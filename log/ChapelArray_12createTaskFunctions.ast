AST dump for ChapelArray after pass createTaskFunctions.
Module use list: ChapelBase ChapelTuple ChapelLocale ArrayViewSlice ArrayViewRankChange ArrayViewReindex Reflection ChapelDebugPrint SysCTypes HaltWrappers Sort IO 

{
  function chpl__init_ChapelArray[416097]() : void[4] "insert line file info" "module init"
  {
    unknown call_tmp[648289] "expr temp" "maybe param" "maybe type" "temp"
    (648292 'move' call_tmp[648289](113710 call chpl__processorAtomicType int(64)[13]))
    (542731 'default init var' numPrivateObjects[113711] call_tmp[648289])
    (113714 'end of statement')
    unknown call_tmp[648294] "maybe param" "maybe type" "temp"
    (648297 'move' call_tmp[648294](113716 call - 1))
    (542733 'init var' nullPid[113718] call_tmp[648294])
    (113721 'end of statement')
    (542735 'init var' debugBulkTransfer[113723] 0)
    (113726 'end of statement')
    (542737 'init var' useBulkTransfer[113728] 1)
    (113731 'end of statement')
    (542739 'init var' useBulkTransferStride[113733] 1)
    (113736 'end of statement')
    (542741 'init var' useBulkPtrTransfer[113738] useBulkTransfer[113728])
    (113741 'end of statement')
    (542743 'init var' PODValAccess[113743] 1)
    (113746 'end of statement')
    (542745 'init var' useBulkTransferDist[113748] 0)
    (113751 'end of statement')
    (542747 'init var' arrayAsVecGrowthFactor[113755] 1.5)
    (113758 'end of statement')
    (542749 'init var' debugArrayAsVec[113760] 0)
    (113763 'end of statement')
    (542773 'init var' CHPL_WARN_DOMAIN_LITERAL[115331] "unset")
    (115334 'end of statement')
    (542775 'init var' arrayLiteralLowBound[115336] defaultLowBound[361])
    (115339 'end of statement')
    (542777 'init var' capturedIteratorLowBound[115341] defaultLowBound[361])
    (115344 'end of statement')
    (519797 return _void[55])
  }
  unknown numPrivateObjects[113711] "dead at end of block" "insert auto destroy" "no doc"
  unknown nullPid[113718] "dead at end of block" "no doc" "param"
  unknown debugBulkTransfer[113723] "config" "no doc" "param"
  unknown useBulkTransfer[113728] "config" "no doc" "param"
  unknown useBulkTransferStride[113733] "config" "no doc" "param"
  unknown useBulkPtrTransfer[113738] "config" "no doc" "param"
  unknown PODValAccess[113743] "config" "no doc" "param"
  unknown useBulkTransferDist[113748] "config" "no doc" "param"
  unknown arrayAsVecGrowthFactor[113755] "config" "no doc" "param"
  unknown debugArrayAsVec[113760] "config" "no doc" "param"
  function _isPrivatized[113768](arg value[113766]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515801] "RVV" "param" "temp"
    unknown tmp[424181] "maybe param" "temp"
    (424192 'move' tmp[424181](113771 call ! 0))
    unknown call_tmp[648299] "expr temp" "maybe param" "maybe type" "temp"
    (648302 'move' call_tmp[648299](424194 call _cond_invalid tmp[424181]))
    if call_tmp[648299]
    {
      (424197 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564342] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564343] "maybe param" "temp"
    unknown call_tmp[648304] "expr temp" "maybe param" "maybe type" "temp"
    (648307 'move' call_tmp[648304](424182 call isTrue tmp[424181]))
    (564348 'move' tmp[564343](564346 call _cond_test call_tmp[648304]))
    if tmp[564343]
    {
      unknown tmp[424202] "maybe param" "temp"
      unknown tmp[424223] "maybe param" "temp"
      (424234 'move' tmp[424223] 1)
      unknown call_tmp[648309] "expr temp" "maybe param" "maybe type" "temp"
      (648312 'move' call_tmp[648309](424236 call _cond_invalid tmp[424223]))
      if call_tmp[648309]
      {
        (424239 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[564288] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564289] "maybe param" "temp"
      unknown call_tmp[648314] "expr temp" "maybe param" "maybe type" "temp"
      (648317 'move' call_tmp[648314](424224 call isTrue tmp[424223]))
      (564294 'move' tmp[564289](564292 call _cond_test call_tmp[648314]))
      if tmp[564289]
      {
        unknown tmp[564296] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648319] "expr temp" "maybe param" "maybe type" "temp"
        (648322 'move' call_tmp[648319](113775 call postfix! value[113766]))
        unknown call_tmp[648326] "expr temp" "maybe param" "maybe type" "temp"
        (648329 'move' call_tmp[648326](113783 call(113779 call (partial) dsiSupportsPrivatization _mt[243] call_tmp[648319])))
        (564298 'move' tmp[564296](424227 call isTrue call_tmp[648326]))
        (564303 'move' tmp[564288](564300 '_paramFoldLogical' tmp[564289] tmp[564296]))
      }
      {
        (564308 'move' tmp[564288](564305 '_paramFoldLogical' tmp[564289] 0))
      }
      (424213 'move' tmp[424202] tmp[564288])
      unknown call_tmp[648331] "expr temp" "maybe param" "maybe type" "temp"
      (648334 'move' call_tmp[648331](424215 call _cond_invalid tmp[424202]))
      if call_tmp[648331]
      {
        (424218 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564315] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564316] "maybe param" "temp"
      unknown call_tmp[648336] "expr temp" "maybe param" "maybe type" "temp"
      (648339 'move' call_tmp[648336](424203 call isTrue tmp[424202]))
      (564321 'move' tmp[564316](564319 call _cond_test call_tmp[648336]))
      if tmp[564316]
      {
        (564326 'move' tmp[564315](564323 '_paramFoldLogical' tmp[564316] 1))
      }
      {
        unknown tmp[564328] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648341] "expr temp" "maybe param" "maybe type" "temp"
        (648344 'move' call_tmp[648341](113787 call postfix! value[113766]))
        unknown call_tmp[648348] "expr temp" "maybe param" "maybe type" "temp"
        (648351 'move' call_tmp[648348](113795 call(113791 call (partial) dsiRequiresPrivatization _mt[243] call_tmp[648341])))
        (564330 'move' tmp[564328](424207 call isTrue call_tmp[648348]))
        (564335 'move' tmp[564315](564332 '_paramFoldLogical' tmp[564316] tmp[564328]))
      }
      unknown tmp[564350] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564352 'move' tmp[564350](424185 call isTrue tmp[564315]))
      (564357 'move' tmp[564342](564354 '_paramFoldLogical' tmp[564343] tmp[564350]))
    }
    {
      (564362 'move' tmp[564342](564359 '_paramFoldLogical' tmp[564343] 0))
    }
    (515806 'move' ret[515801](515805 'deref' tmp[564342]))
    (515803 return ret[515801])
  }
  function _newPrivatizedClass[113809](arg value[113807]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515812] "RVV" "temp"
    unknown call_tmp[648355] "maybe param" "maybe type" "temp"
    (648358 'move' call_tmp[648355](113820 call(113815 call (partial) fetchAdd _mt[243] numPrivateObjects[113711]) 1))
    const n[113821] "dead at end of block" "const" "insert auto destroy"
    (542751 'init var' n[113821] call_tmp[648355])
    (113824 'end of statement')
    unknown call_tmp[648360] "expr temp" "maybe param" "maybe type" "temp"
    (648363 'move' call_tmp[648360](359135 call here[90438]))
    unknown call_tmp[648367] "maybe param" "maybe type" "temp"
    (648370 'move' call_tmp[648367](113827 call id _mt[243] call_tmp[648360]))
    const hereID[113830] "dead at end of block" "const" "insert auto destroy"
    (542753 'init var' hereID[113830] call_tmp[648367])
    (113833 'end of statement')
    unknown call_tmp[648374] "maybe param" "maybe type" "temp"
    (648377 'move' call_tmp[648374](113841 call(113837 call (partial) dsiGetPrivatizeData _mt[243] value[113807])))
    const privatizeData[113842] "dead at end of block" "const" "insert auto destroy"
    (542755 'init var' privatizeData[113842] call_tmp[648374])
    (113845 'end of statement')
    const tmp[113862] "const" "temp"
    unknown call_tmp[648379] "expr temp" "maybe param" "maybe type" "temp"
    (648382 'move' call_tmp[648379](113849 call Locales[113662] 0))
    unknown call_tmp[648384] "expr temp" "maybe param" "maybe type" "temp"
    (648387 'move' call_tmp[648384](113859 '_wide_get_locale' call_tmp[648379]))
    (113864 'move' tmp[113862](113860 'deref' call_tmp[648384]))
    (935114 call on_fn[935110] tmp[113862])
    function on_fn[935110](const in arg dummy_locale_arg[935112]:chpl_localeID_t[209352]) : void[4] "on"
    {
      (113857 call _newPrivatizedClassHelp value[113807] value[113807] n[113821] hereID[113830] privatizeData[113842])
      (479279 'end of statement' n[113821] hereID[113830] privatizeData[113842])
      (935117 return _void[55])
    }
    {
    }
    function _newPrivatizedClassHelp[113874](arg parentValue[113872]:_any[178](?), arg originalValue[113876]:_any[178](?), arg n[113878]:_any[178](?), arg hereID[113880]:_any[178](?), arg privatizeData[113882]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[113885] "dead at end of block" "insert auto destroy"
      (542757 'init var' newValue[113885] originalValue[113876])
      (113888 'end of statement')
      unknown call_tmp[648389] "expr temp" "maybe param" "maybe type" "temp"
      (648392 'move' call_tmp[648389](359138 call here[90438]))
      unknown call_tmp[648396] "expr temp" "maybe param" "maybe type" "temp"
      (648399 'move' call_tmp[648396](113892 call id _mt[243] call_tmp[648389]))
      unknown call_tmp[648401] "expr temp" "maybe param" "maybe type" "temp"
      (648404 'move' call_tmp[648401](113895 call != hereID[113880] call_tmp[648396]))
      unknown call_tmp[648406] "expr temp" "maybe param" "maybe type" "temp"
      (648409 'move' call_tmp[648406](113958 call _cond_test call_tmp[648401]))
      if call_tmp[648406]
      {
        unknown call_tmp[648413] "expr temp" "maybe param" "maybe type" "temp"
        (648416 'move' call_tmp[648413](113906 call(113901 call (partial) dsiPrivatize _mt[243] parentValue[113872]) privatizeData[113882]))
        (113907 call = newValue[113885] call_tmp[648413])
        (479283 'end of statement' newValue[113885])
        (113931 'chpl_newPrivatizedClass' newValue[113885] n[113878])
        (479285 'end of statement' newValue[113885])
        unknown call_tmp[648420] "expr temp" "maybe param" "maybe type" "temp"
        (648423 'move' call_tmp[648420](113936 call pid _mt[243] newValue[113885]))
        (113940 call = call_tmp[648420] n[113878])
        (479287 'end of statement' newValue[113885])
      }
      {
        (113947 'chpl_newPrivatizedClass' newValue[113885] n[113878])
        (479289 'end of statement' newValue[113885])
        unknown call_tmp[648427] "expr temp" "maybe param" "maybe type" "temp"
        (648430 'move' call_tmp[648427](113951 call pid _mt[243] newValue[113885]))
        (113955 call = call_tmp[648427] n[113878])
        (479291 'end of statement' newValue[113885])
      }
      {
        const _cobeginCount[114045] "const" "end count" "temp"
        (114066 'move' _cobeginCount[114045](114063 call _endCountAlloc 1))
        (114058 call _upEndCount _cobeginCount[114045] 1 2)
        (479293 'end of statement')
        (935139 call cobegin_fn[935137] originalValue[113876] newValue[113885] n[113878] hereID[113880] privatizeData[113882])
        function cobegin_fn[935137](arg originalValue[935144]:_any[178](?), arg newValue[935147], arg n[935150]:_any[178](?), arg hereID[935153]:_any[178](?), arg privatizeData[935156]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648434] "expr temp" "maybe param" "maybe type" "temp"
          (648437 'move' call_tmp[648434](113965 call left _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648441] "expr temp" "maybe param" "maybe type" "temp"
          (648444 'move' call_tmp[648441](113968 call _instance _mt[243] call_tmp[648434]))
          unknown call_tmp[648446] "expr temp" "maybe param" "maybe type" "temp"
          (648449 'move' call_tmp[648446](113972 call != call_tmp[648441] nil[44]))
          unknown call_tmp[648451] "expr temp" "maybe param" "maybe type" "temp"
          (648454 'move' call_tmp[648451](113998 call _cond_test call_tmp[648446]))
          if call_tmp[648451]
          {
            const tmp[113990] "const" "temp"
            unknown call_tmp[648458] "expr temp" "maybe param" "maybe type" "temp"
            (648461 'move' call_tmp[648458](113975 call left _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648463] "expr temp" "maybe param" "maybe type" "temp"
            (648466 'move' call_tmp[648463](113987 '_wide_get_locale' call_tmp[648458]))
            (113992 'move' tmp[113990](113988 'deref' call_tmp[648463]))
            (935123 call on_fn[935119] tmp[113990])
            function on_fn[935119](const in arg dummy_locale_arg[935121]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (113985 call _newPrivatizedClassHelp newValue[935147] originalValue[935144] n[935150] hereID[935153] privatizeData[935156])
              (479294 'end of statement' newValue[935147])
              (935126 return _void[55])
            }
            {
            }
          }
          (114048 call _downEndCount _cobeginCount[114045] nil[44])
          (935142 return _void[55])
        }
        {
        }
        (935161 call cobegin_fn[935159] originalValue[113876] newValue[113885] n[113878] hereID[113880] privatizeData[113882])
        function cobegin_fn[935159](arg originalValue[935166]:_any[178](?), arg newValue[935169], arg n[935172]:_any[178](?), arg hereID[935175]:_any[178](?), arg privatizeData[935178]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648470] "expr temp" "maybe param" "maybe type" "temp"
          (648473 'move' call_tmp[648470](114007 call right _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648477] "expr temp" "maybe param" "maybe type" "temp"
          (648480 'move' call_tmp[648477](114010 call _instance _mt[243] call_tmp[648470]))
          unknown call_tmp[648482] "expr temp" "maybe param" "maybe type" "temp"
          (648485 'move' call_tmp[648482](114014 call != call_tmp[648477] nil[44]))
          unknown call_tmp[648487] "expr temp" "maybe param" "maybe type" "temp"
          (648490 'move' call_tmp[648487](114040 call _cond_test call_tmp[648482]))
          if call_tmp[648487]
          {
            const tmp[114032] "const" "temp"
            unknown call_tmp[648494] "expr temp" "maybe param" "maybe type" "temp"
            (648497 'move' call_tmp[648494](114017 call right _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648499] "expr temp" "maybe param" "maybe type" "temp"
            (648502 'move' call_tmp[648499](114029 '_wide_get_locale' call_tmp[648494]))
            (114034 'move' tmp[114032](114030 'deref' call_tmp[648499]))
            (935132 call on_fn[935128] tmp[114032])
            function on_fn[935128](const in arg dummy_locale_arg[935130]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (114027 call _newPrivatizedClassHelp newValue[935169] originalValue[935166] n[935172] hereID[935175] privatizeData[935178])
              (479297 'end of statement' newValue[935169])
              (935135 return _void[55])
            }
            {
            }
          }
          (114054 call _downEndCount _cobeginCount[114045] nil[44])
          (935164 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114069 call _endCountFree _cobeginCount[114045])
          }
        }
        (114074 call _waitEndCount _cobeginCount[114045] 1 2)
      }
      (515808 return _void[55])
    }
    (515818 'move' ret[515812](515817 'coerce' n[113821] int(64)[13]))
    gotoReturn _end__newPrivatizedClass[515810] _end__newPrivatizedClass[515810]
    (479302 'end of statement' n[113821])
    label _end__newPrivatizedClass[515810]
    (515814 return ret[515812])
  }
  { scopeless type
    int(64)[13]
  }
  function _freePrivatizedClass[114093](arg pid[114090]:int(64)[13], arg original[114096]:object[367155](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648504] "expr temp" "maybe param" "maybe type" "temp"
    (648507 'move' call_tmp[648504](114102 call == pid[114090] nullPid[113718]))
    unknown call_tmp[648509] "expr temp" "maybe param" "maybe type" "temp"
    (648512 'move' call_tmp[648509](114106 call _cond_test call_tmp[648504]))
    if call_tmp[648509]
    {
      gotoReturn _end__freePrivatizedClass[515826] _end__freePrivatizedClass[515826]
    }
    const tmp[114126] "const" "temp"
    unknown call_tmp[648514] "expr temp" "maybe param" "maybe type" "temp"
    (648517 'move' call_tmp[648514](114115 call Locales[113662] 0))
    unknown call_tmp[648519] "expr temp" "maybe param" "maybe type" "temp"
    (648522 'move' call_tmp[648519](114123 '_wide_get_locale' call_tmp[648514]))
    (114128 'move' tmp[114126](114124 'deref' call_tmp[648519]))
    (935185 call on_fn[935181] tmp[114126])
    function on_fn[935181](const in arg dummy_locale_arg[935183]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        (114120 call _freePrivatizedClassHelp pid[114090] original[114096])
      }
      (935188 return _void[55])
    }
    {
    }
    function _freePrivatizedClassHelp[114138](arg pid[114136]:_any[178](?), arg original[114140]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown call_tmp[648524] "maybe param" "maybe type" "temp"
      (648527 'move' call_tmp[648524](114147 call chpl_getPrivatizedCopy unmanaged object[415566] pid[114136]))
      unknown prv[114148] "dead at end of block" "insert auto destroy"
      (542759 'init var' prv[114148] call_tmp[648524])
      (114151 'end of statement')
      unknown call_tmp[648529] "expr temp" "maybe param" "maybe type" "temp"
      (648532 'move' call_tmp[648529](114155 call != prv[114148] original[114140]))
      unknown call_tmp[648534] "expr temp" "maybe param" "maybe type" "temp"
      (648537 'move' call_tmp[648534](114162 call _cond_test call_tmp[648529]))
      if call_tmp[648534]
      {
        (114159 call chpl__delete prv[114148])
        (479306 'end of statement' prv[114148])
      }
      function chpl_clearPrivatizedClass[114173](arg pid[114170]:int(64)[13]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
        (515822 return _void[55])
      }
      (114180 call chpl_clearPrivatizedClass pid[114136])
      (479308 'end of statement')
      {
        const _cobeginCount[114255] "const" "end count" "temp"
        (114276 'move' _cobeginCount[114255](114273 call _endCountAlloc 1))
        (114268 call _upEndCount _cobeginCount[114255] 1 2)
        (479309 'end of statement')
        (935210 call cobegin_fn[935208] pid[114136] original[114140])
        function cobegin_fn[935208](arg pid[935215]:_any[178](?), arg original[935218]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648541] "expr temp" "maybe param" "maybe type" "temp"
          (648544 'move' call_tmp[648541](114183 call left _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648548] "expr temp" "maybe param" "maybe type" "temp"
          (648551 'move' call_tmp[648548](114186 call _instance _mt[243] call_tmp[648541]))
          unknown call_tmp[648553] "expr temp" "maybe param" "maybe type" "temp"
          (648556 'move' call_tmp[648553](114190 call != call_tmp[648548] nil[44]))
          unknown call_tmp[648558] "expr temp" "maybe param" "maybe type" "temp"
          (648561 'move' call_tmp[648558](114213 call _cond_test call_tmp[648553]))
          if call_tmp[648558]
          {
            const tmp[114205] "const" "temp"
            unknown call_tmp[648565] "expr temp" "maybe param" "maybe type" "temp"
            (648568 'move' call_tmp[648565](114193 call left _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648570] "expr temp" "maybe param" "maybe type" "temp"
            (648573 'move' call_tmp[648570](114202 '_wide_get_locale' call_tmp[648565]))
            (114207 'move' tmp[114205](114203 'deref' call_tmp[648570]))
            (935194 call on_fn[935190] tmp[114205])
            function on_fn[935190](const in arg dummy_locale_arg[935192]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (114200 call _freePrivatizedClassHelp pid[935215] original[935218])
              (935197 return _void[55])
            }
            {
            }
          }
          (114258 call _downEndCount _cobeginCount[114255] nil[44])
          (935213 return _void[55])
        }
        {
        }
        (935223 call cobegin_fn[935221] pid[114136] original[114140])
        function cobegin_fn[935221](arg pid[935228]:_any[178](?), arg original[935231]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648577] "expr temp" "maybe param" "maybe type" "temp"
          (648580 'move' call_tmp[648577](114220 call right _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648584] "expr temp" "maybe param" "maybe type" "temp"
          (648587 'move' call_tmp[648584](114223 call _instance _mt[243] call_tmp[648577]))
          unknown call_tmp[648589] "expr temp" "maybe param" "maybe type" "temp"
          (648592 'move' call_tmp[648589](114227 call != call_tmp[648584] nil[44]))
          unknown call_tmp[648594] "expr temp" "maybe param" "maybe type" "temp"
          (648597 'move' call_tmp[648594](114250 call _cond_test call_tmp[648589]))
          if call_tmp[648594]
          {
            const tmp[114242] "const" "temp"
            unknown call_tmp[648601] "expr temp" "maybe param" "maybe type" "temp"
            (648604 'move' call_tmp[648601](114230 call right _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648606] "expr temp" "maybe param" "maybe type" "temp"
            (648609 'move' call_tmp[648606](114239 '_wide_get_locale' call_tmp[648601]))
            (114244 'move' tmp[114242](114240 'deref' call_tmp[648606]))
            (935203 call on_fn[935199] tmp[114242])
            function on_fn[935199](const in arg dummy_locale_arg[935201]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (114237 call _freePrivatizedClassHelp pid[935228] original[935231])
              (935206 return _void[55])
            }
            {
            }
          }
          (114264 call _downEndCount _cobeginCount[114255] nil[44])
          (935226 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114279 call _endCountFree _cobeginCount[114255])
          }
        }
        (114284 call _waitEndCount _cobeginCount[114255] 1 2)
      }
      (515824 return _void[55])
    }
    label _end__freePrivatizedClass[515826]
    (515828 return _void[55])
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[114298](arg value[114296]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648613] "maybe param" "maybe type" "temp"
    (648616 'move' call_tmp[648613](114301 call pid _mt[243] value[114296]))
    const pid[114304] "dead at end of block" "const" "insert auto destroy"
    (542761 'init var' pid[114304] call_tmp[648613])
    (114307 'end of statement')
    unknown call_tmp[648618] "expr temp" "maybe param" "maybe type" "temp"
    (648621 'move' call_tmp[648618](359152 call here[90438]))
    unknown call_tmp[648625] "maybe param" "maybe type" "temp"
    (648628 'move' call_tmp[648625](114310 call id _mt[243] call_tmp[648618]))
    const hereID[114313] "dead at end of block" "const" "insert auto destroy"
    (542763 'init var' hereID[114313] call_tmp[648625])
    (114316 'end of statement')
    unknown call_tmp[648632] "maybe param" "maybe type" "temp"
    (648635 'move' call_tmp[648632](114324 call(114320 call (partial) dsiGetReprivatizeData _mt[243] value[114296])))
    const reprivatizeData[114325] "dead at end of block" "const" "insert auto destroy"
    (542765 'init var' reprivatizeData[114325] call_tmp[648632])
    (114328 'end of statement')
    const tmp[114345] "const" "temp"
    unknown call_tmp[648637] "expr temp" "maybe param" "maybe type" "temp"
    (648640 'move' call_tmp[648637](114332 call Locales[113662] 0))
    unknown call_tmp[648642] "expr temp" "maybe param" "maybe type" "temp"
    (648645 'move' call_tmp[648642](114342 '_wide_get_locale' call_tmp[648637]))
    (114347 'move' tmp[114345](114343 'deref' call_tmp[648642]))
    (935238 call on_fn[935234] tmp[114345])
    function on_fn[935234](const in arg dummy_locale_arg[935236]:chpl_localeID_t[209352]) : void[4] "on"
    {
      (114340 call _reprivatizeHelp value[114296] value[114296] pid[114304] hereID[114313] reprivatizeData[114325])
      (479316 'end of statement' pid[114304] hereID[114313] reprivatizeData[114325])
      (935241 return _void[55])
    }
    {
    }
    function _reprivatizeHelp[114357](arg parentValue[114355]:_any[178](?), arg originalValue[114359]:_any[178](?), arg pid[114361]:_any[178](?), arg hereID[114363]:_any[178](?), arg reprivatizeData[114365]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[114368] "dead at end of block" "insert auto destroy"
      (542767 'init var' newValue[114368] originalValue[114359])
      (114371 'end of statement')
      unknown call_tmp[648647] "expr temp" "maybe param" "maybe type" "temp"
      (648650 'move' call_tmp[648647](359155 call here[90438]))
      unknown call_tmp[648654] "expr temp" "maybe param" "maybe type" "temp"
      (648657 'move' call_tmp[648654](114375 call id _mt[243] call_tmp[648647]))
      unknown call_tmp[648659] "expr temp" "maybe param" "maybe type" "temp"
      (648662 'move' call_tmp[648659](114378 call != hereID[114363] call_tmp[648654]))
      unknown call_tmp[648664] "expr temp" "maybe param" "maybe type" "temp"
      (648667 'move' call_tmp[648664](114402 call _cond_test call_tmp[648659]))
      if call_tmp[648664]
      {
        unknown call_tmp[648669] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (648672 'move' call_tmp[648669](114383 'typeof' newValue[114368]))
        unknown call_tmp[648674] "expr temp" "maybe param" "maybe type" "temp"
        (648677 'move' call_tmp[648674](114386 call chpl_getPrivatizedCopy call_tmp[648669] pid[114361]))
        (114387 call = newValue[114368] call_tmp[648674])
        (479320 'end of statement' newValue[114368] newValue[114368])
        (114400 call(114394 call (partial) dsiReprivatize _mt[243] newValue[114368]) parentValue[114355] reprivatizeData[114365])
        (479323 'end of statement' newValue[114368])
      }
      {
        const _cobeginCount[114485] "const" "end count" "temp"
        (114506 'move' _cobeginCount[114485](114503 call _endCountAlloc 1))
        (114498 call _upEndCount _cobeginCount[114485] 1 2)
        (479325 'end of statement')
        (935263 call cobegin_fn[935261] originalValue[114359] newValue[114368] pid[114361] hereID[114363] reprivatizeData[114365])
        function cobegin_fn[935261](arg originalValue[935268]:_any[178](?), arg newValue[935271], arg pid[935274]:_any[178](?), arg hereID[935277]:_any[178](?), arg reprivatizeData[935280]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648683] "expr temp" "maybe param" "maybe type" "temp"
          (648686 'move' call_tmp[648683](114407 call left _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648690] "expr temp" "maybe param" "maybe type" "temp"
          (648693 'move' call_tmp[648690](114410 call _instance _mt[243] call_tmp[648683]))
          unknown call_tmp[648695] "expr temp" "maybe param" "maybe type" "temp"
          (648698 'move' call_tmp[648695](114414 call != call_tmp[648690] nil[44]))
          unknown call_tmp[648700] "expr temp" "maybe param" "maybe type" "temp"
          (648703 'move' call_tmp[648700](114440 call _cond_test call_tmp[648695]))
          if call_tmp[648700]
          {
            const tmp[114432] "const" "temp"
            unknown call_tmp[648707] "expr temp" "maybe param" "maybe type" "temp"
            (648710 'move' call_tmp[648707](114417 call left _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648712] "expr temp" "maybe param" "maybe type" "temp"
            (648715 'move' call_tmp[648712](114429 '_wide_get_locale' call_tmp[648707]))
            (114434 'move' tmp[114432](114430 'deref' call_tmp[648712]))
            (935247 call on_fn[935243] tmp[114432])
            function on_fn[935243](const in arg dummy_locale_arg[935245]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (114427 call _reprivatizeHelp newValue[935271] originalValue[935268] pid[935274] hereID[935277] reprivatizeData[935280])
              (479326 'end of statement' newValue[935271])
              (935250 return _void[55])
            }
            {
            }
          }
          (114488 call _downEndCount _cobeginCount[114485] nil[44])
          (935266 return _void[55])
        }
        {
        }
        (935285 call cobegin_fn[935283] originalValue[114359] newValue[114368] pid[114361] hereID[114363] reprivatizeData[114365])
        function cobegin_fn[935283](arg originalValue[935290]:_any[178](?), arg newValue[935293], arg pid[935296]:_any[178](?), arg hereID[935299]:_any[178](?), arg reprivatizeData[935302]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648719] "expr temp" "maybe param" "maybe type" "temp"
          (648722 'move' call_tmp[648719](114447 call right _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648726] "expr temp" "maybe param" "maybe type" "temp"
          (648729 'move' call_tmp[648726](114450 call _instance _mt[243] call_tmp[648719]))
          unknown call_tmp[648731] "expr temp" "maybe param" "maybe type" "temp"
          (648734 'move' call_tmp[648731](114454 call != call_tmp[648726] nil[44]))
          unknown call_tmp[648736] "expr temp" "maybe param" "maybe type" "temp"
          (648739 'move' call_tmp[648736](114480 call _cond_test call_tmp[648731]))
          if call_tmp[648736]
          {
            const tmp[114472] "const" "temp"
            unknown call_tmp[648743] "expr temp" "maybe param" "maybe type" "temp"
            (648746 'move' call_tmp[648743](114457 call right _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648748] "expr temp" "maybe param" "maybe type" "temp"
            (648751 'move' call_tmp[648748](114469 '_wide_get_locale' call_tmp[648743]))
            (114474 'move' tmp[114472](114470 'deref' call_tmp[648748]))
            (935256 call on_fn[935252] tmp[114472])
            function on_fn[935252](const in arg dummy_locale_arg[935254]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (114467 call _reprivatizeHelp newValue[935293] originalValue[935290] pid[935296] hereID[935299] reprivatizeData[935302])
              (479329 'end of statement' newValue[935293])
              (935259 return _void[55])
            }
            {
            }
          }
          (114494 call _downEndCount _cobeginCount[114485] nil[44])
          (935288 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114509 call _endCountFree _cobeginCount[114485])
          }
        }
        (114514 call _waitEndCount _cobeginCount[114485] 1 2)
      }
      (515832 return _void[55])
    }
    (515834 return _void[55])
  }
  function _makeIndexTuple[114527](param arg rank[114525]:_any[178](?), arg t[114530]:_tuple[56202](?), param arg expand[114535]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515838] "RVV" "temp"
    (515843 'move' ret[515838](515842 'deref' t[114530]))
    (515840 return ret[515838])
  }
  where {
    unknown call_tmp[648755] "expr temp" "maybe param" "maybe type" "temp"
    (648758 'move' call_tmp[648755](114541 call size _mt[243] t[114530]))
    (114544 call == rank[114525] call_tmp[648755])
  }
  function _makeIndexTuple[114557](param arg rank[114555]:_any[178](?), arg t[114560]:_tuple[56202](?), param arg expand[114565]:bool[10] =
  0) : _unknown[51] "no return value for void"
  {
    (114595 call compilerError "index rank must match domain rank")
    (515845 return _void[55])
  }
  where {
    unknown call_tmp[648762] "expr temp" "maybe param" "maybe type" "temp"
    (648765 'move' call_tmp[648762](114571 call size _mt[243] t[114560]))
    (114574 call != rank[114555] call_tmp[648762])
  }
  function _makeIndexTuple[114605](param arg rank[114603]:_any[178](?), arg val[114608]:integral[199](?), param arg expand[114613]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515849] "RVV" "temp"
    unknown tmp[424244] "maybe param" "temp"
    (424255 'move' tmp[424244] expand[114613])
    unknown call_tmp[648767] "expr temp" "maybe param" "maybe type" "temp"
    (648770 'move' call_tmp[648767](424257 call _cond_invalid tmp[424244]))
    if call_tmp[648767]
    {
      (424260 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564369] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564370] "maybe param" "temp"
    unknown call_tmp[648772] "expr temp" "maybe param" "maybe type" "temp"
    (648775 'move' call_tmp[648772](424245 call isTrue tmp[424244]))
    (564375 'move' tmp[564370](564373 call _cond_test call_tmp[648772]))
    if tmp[564370]
    {
      (564380 'move' tmp[564369](564377 '_paramFoldLogical' tmp[564370] 1))
    }
    {
      unknown tmp[564382] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[648777] "expr temp" "maybe param" "maybe type" "temp"
      (648780 'move' call_tmp[648777](114620 call == rank[114603] 1))
      (564384 'move' tmp[564382](424249 call isTrue call_tmp[648777]))
      (564389 'move' tmp[564369](564386 '_paramFoldLogical' tmp[564370] tmp[564382]))
    }
    unknown call_tmp[648782] "expr temp" "maybe param" "maybe type" "temp"
    (648785 'move' call_tmp[648782](114707 call _cond_test tmp[564369]))
    if call_tmp[648782]
    {
      unknown t[114629] "dead at end of block" "insert auto destroy"
      unknown call_tmp[648787] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648790 'move' call_tmp[648787](114626 'typeof' val[114608]))
      unknown call_tmp[648792] "expr temp" "maybe param" "maybe type" "temp"
      (648795 'move' call_tmp[648792](114627 call * rank[114603] call_tmp[648787]))
      (542769 'default init var' t[114629] call_tmp[648792])
      (114632 'end of statement')
      {
        unknown i[114649] "dead at end of block" "insert auto destroy"
        (542771 'init var' i[114649] 0)
        (479337 'end of statement')
        unknown tmp[114650] "maybe param" "temp"
        unknown call_tmp[648797] "expr temp" "maybe param" "maybe type" "temp"
        (648800 'move' call_tmp[648797](114637 call - rank[114603] 1))
        (114662 'move' tmp[114650](114660 call chpl_compute_low_param_loop_bound 0 call_tmp[648797]))
        unknown tmp[114651] "maybe param" "temp"
        unknown call_tmp[648802] "expr temp" "maybe param" "maybe type" "temp"
        (648805 'move' call_tmp[648802](114667 call - rank[114603] 1))
        (114672 'move' tmp[114651](114670 call chpl_compute_high_param_loop_bound 0 call_tmp[648802]))
        unknown tmp[114652] "maybe param" "temp"
        (114675 'move' tmp[114652] 1)
        ParamForLoop[114677]
        { i[114649] tmp[114650] tmp[114651] tmp[114652]
          unknown call_tmp[648807] "expr temp" "maybe param" "maybe type" "temp"
          (648810 'move' call_tmp[648807](114644 call t[114629] i[114649]))
          (114646 call = call_tmp[648807] val[114608])
          (479338 'end of statement' t[114629] i[114649])
        }
        label _unused_continueLabel[114654]
        label _breakLabel[114653]
      }
      (515854 'move' ret[515849](515853 'deref' t[114629]))
      gotoReturn _end__makeIndexTuple[515847] _end__makeIndexTuple[515847]
      (479341 'end of statement' t[114629])
    }
    {
      unknown call_tmp[648812] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648815 'move' call_tmp[648812](114691 'typeof' val[114608]))
      unknown call_tmp[648817] "expr temp" "maybe param" "maybe type" "temp"
      (648820 'move' call_tmp[648817](114693 call _cast string[26] call_tmp[648812]))
      (114696 call compilerWarning call_tmp[648817])
      (479343 'end of statement')
      (114702 call compilerError "index rank must match domain rank")
      (479344 'end of statement')
      (515859 'move' ret[515849](515858 'deref' val[114608]))
      gotoReturn _end__makeIndexTuple[515847] _end__makeIndexTuple[515847]
    }
    label _end__makeIndexTuple[515847]
    (515851 return ret[515849])
  }
  function _newArray[114718](arg value[114716]:_any[178](?)) : _unknown[51] "no copy return"
  {
    unknown ret[515865] "RVV" "temp"
    unknown call_tmp[648822] "expr temp" "maybe param" "maybe type" "temp"
    (648825 'move' call_tmp[648822](114723 call _isPrivatized value[114716]))
    unknown call_tmp[648827] "expr temp" "maybe param" "maybe type" "temp"
    (648830 'move' call_tmp[648827](114743 call _cond_test call_tmp[648822]))
    if call_tmp[648827]
    {
      unknown call_tmp[648832] "expr temp" "maybe param" "maybe type" "temp"
      (648835 'move' call_tmp[648832](114729 call _newPrivatizedClass value[114716]))
      unknown call_tmp[648837] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648840 'move' call_tmp[648837](748041 'new' _array[133594](?) call_tmp[648832] value[114716]))
      (515870 'move' ret[515865](515869 'deref' call_tmp[648837]))
      gotoReturn _end__newArray[515863] _end__newArray[515863]
    }
    {
      unknown call_tmp[648842] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648845 'move' call_tmp[648842](748042 'new' _array[133594](?) nullPid[113718] value[114716]))
      (515875 'move' ret[515865](515874 'deref' call_tmp[648842]))
      gotoReturn _end__newArray[515863] _end__newArray[515863]
    }
    label _end__newArray[515863]
    (515867 return ret[515865])
  }
  function _getDomain[114756](arg value[114754]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515881] "RVV" "temp"
    unknown call_tmp[648847] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648850 'move' call_tmp[648847](114760 'typeof' value[114754]))
    unknown call_tmp[648852] "expr temp" "maybe param" "maybe type" "temp"
    (648855 'move' call_tmp[648852](114762 call _to_unmanaged call_tmp[648847]))
    unknown call_tmp[648857] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648860 'move' call_tmp[648857](114764 'typeof' value[114754]))
    unknown call_tmp[648862] "expr temp" "maybe param" "maybe type" "temp"
    (648865 'move' call_tmp[648862](114765 call != call_tmp[648852] call_tmp[648857]))
    unknown call_tmp[648867] "expr temp" "maybe param" "maybe type" "temp"
    (648870 'move' call_tmp[648867](114788 call _cond_test call_tmp[648862]))
    if call_tmp[648867]
    {
      (114786 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[648872] "expr temp" "maybe param" "maybe type" "temp"
    (648875 'move' call_tmp[648872](114797 call _isPrivatized value[114754]))
    unknown call_tmp[648877] "expr temp" "maybe param" "maybe type" "temp"
    (648880 'move' call_tmp[648877](114821 call _cond_test call_tmp[648872]))
    if call_tmp[648877]
    {
      unknown call_tmp[648884] "expr temp" "maybe param" "maybe type" "temp"
      (648887 'move' call_tmp[648884](114801 call pid _mt[243] value[114754]))
      unknown call_tmp[648889] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648892 'move' call_tmp[648889](748043 'new' _domain[125908](?) call_tmp[648884] value[114754](_unowned = 1)))
      (515886 'move' ret[515881](515885 'deref' call_tmp[648889]))
      gotoReturn _end__getDomain[515879] _end__getDomain[515879]
    }
    {
      unknown call_tmp[648894] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648897 'move' call_tmp[648894](748044 'new' _domain[125908](?) nullPid[113718] value[114754](_unowned = 1)))
      (515891 'move' ret[515881](515890 'deref' call_tmp[648894]))
      gotoReturn _end__getDomain[515879] _end__getDomain[515879]
    }
    label _end__getDomain[515879]
    (515883 return ret[515881])
  }
  function _getDistribution[114833](arg value[114831]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515897] "RVV" "temp"
    unknown call_tmp[648899] "expr temp" "maybe param" "maybe type" "temp"
    (648902 'move' call_tmp[648899](114838 call _isPrivatized value[114831]))
    unknown call_tmp[648904] "expr temp" "maybe param" "maybe type" "temp"
    (648907 'move' call_tmp[648904](114862 call _cond_test call_tmp[648899]))
    if call_tmp[648904]
    {
      unknown call_tmp[648911] "expr temp" "maybe param" "maybe type" "temp"
      (648914 'move' call_tmp[648911](114842 call pid _mt[243] value[114831]))
      unknown call_tmp[648916] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648919 'move' call_tmp[648916](748045 'new' _distribution[118973](?) call_tmp[648911] value[114831](_unowned = 1)))
      (515902 'move' ret[515897](515901 'deref' call_tmp[648916]))
      gotoReturn _end__getDistribution[515895] _end__getDistribution[515895]
    }
    {
      unknown call_tmp[648921] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648924 'move' call_tmp[648921](748046 'new' _distribution[118973](?) nullPid[113718] value[114831](_unowned = 1)))
      (515907 'move' ret[515897](515906 'deref' call_tmp[648921]))
      gotoReturn _end__getDistribution[515895] _end__getDistribution[515895]
    }
    label _end__getDistribution[515895]
    (515899 return ret[515897])
  }
  function chpl__buildDomainRuntimeType[114877](arg dist[114874]:_distribution[118973](?), param arg rank[114880]:int(64)[13], arg idxType[114884]:_any[178](?) =
  int(64)[13], param arg stridable[114889]:bool[10] =
  0) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515913] "RVV" "temp" "type variable"
    unknown call_tmp[648926] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648929 'move' call_tmp[648926](748047 'new' _domain[125908](?) dist[114874] rank[114880] idxType[114884] stridable[114889]))
    (515918 'move' ret[515913](515917 'deref' call_tmp[648926]))
    (515915 return ret[515913])
  }
  function chpl__buildDomainRuntimeType[114912](arg dist[114909]:_distribution[118973](?), arg idxType[114914]:_any[178](?), param arg parSafe[114918]:bool[10] =
  1) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515922] "RVV" "temp" "type variable"
    unknown call_tmp[648931] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648934 'move' call_tmp[648931](748048 'new' _domain[125908](?) dist[114909] idxType[114914] parSafe[114918]))
    (515927 'move' ret[515922](515926 'deref' call_tmp[648931]))
    (515924 return ret[515922])
  }
  function chpl__buildSparseDomainRuntimeType[114940](arg dist[114937]:_distribution[118973](?), arg parentDom[114943]:_domain[125908](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515931] "RVV" "temp" "type variable"
    unknown call_tmp[648936] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648939 'move' call_tmp[648936](748049 'new' _domain[125908](?) dist[114937] parentDom[114943]))
    (515936 'move' ret[515931](515935 'deref' call_tmp[648936]))
    (515933 return ret[515931])
  }
  function chpl__convertRuntimeTypeToValue[114963](arg dist[114960]:_distribution[118973](?), param arg rank[114966]:int(64)[13], arg idxType[114970]:_any[178](?) =
  int(64)[13], param arg stridable[114974]:bool[10], param arg isNoInit[114978]:bool[10]) : _unknown[51]
  {
    unknown ret[515940] "RVV" "temp"
    unknown call_tmp[648941] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648944 'move' call_tmp[648941](748050 'new' _domain[125908](?) dist[114960] rank[114966] idxType[114970] stridable[114974]))
    (515945 'move' ret[515940](515944 'deref' call_tmp[648941]))
    (515942 return ret[515940])
  }
  function chpl__convertRuntimeTypeToValue[115000](arg dist[114997]:_distribution[118973](?), arg idxType[115002]:_any[178](?), param arg parSafe[115005]:bool[10], param arg isNoInit[115009]:bool[10]) : _unknown[51]
  {
    unknown ret[515949] "RVV" "temp"
    unknown call_tmp[648946] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648949 'move' call_tmp[648946](748051 'new' _domain[125908](?) dist[114997] idxType[115002] parSafe[115005]))
    (515954 'move' ret[515949](515953 'deref' call_tmp[648946]))
    (515951 return ret[515949])
  }
  function chpl__convertRuntimeTypeToValue[115030](arg dist[115027]:_distribution[118973](?), arg parentDom[115033]:_domain[125908](?), param arg isNoInit[115037]:bool[10]) : _unknown[51]
  {
    unknown ret[515958] "RVV" "temp"
    unknown call_tmp[648951] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648954 'move' call_tmp[648951](748052 'new' _domain[125908](?) dist[115027] parentDom[115033]))
    (515963 'move' ret[515958](515962 'deref' call_tmp[648951]))
    (515960 return ret[515958])
  }
  function chpl__convertValueToRuntimeType[115057](arg dom[115054]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515967] "RVV" "temp" "type variable"
    unknown call_tmp[648958] "expr temp" "maybe param" "maybe type" "temp"
    (648961 'move' call_tmp[648958](115070 call dist _mt[243] dom[115054]))
    unknown call_tmp[648965] "expr temp" "maybe param" "maybe type" "temp"
    (648968 'move' call_tmp[648965](115075 call _value _mt[243] dom[115054]))
    unknown call_tmp[648972] "expr temp" "maybe param" "maybe type" "temp"
    (648975 'move' call_tmp[648972](115078 call rank _mt[243] call_tmp[648965]))
    unknown call_tmp[648979] "expr temp" "maybe param" "maybe type" "temp"
    (648982 'move' call_tmp[648979](115082 call _value _mt[243] dom[115054]))
    unknown call_tmp[648986] "expr temp" "maybe param" "maybe type" "temp"
    (648989 'move' call_tmp[648986](115085 call idxType _mt[243] call_tmp[648979]))
    unknown call_tmp[648993] "expr temp" "maybe param" "maybe type" "temp"
    (648996 'move' call_tmp[648993](115089 call _value _mt[243] dom[115054]))
    unknown call_tmp[649000] "expr temp" "maybe param" "maybe type" "temp"
    (649003 'move' call_tmp[649000](115092 call stridable _mt[243] call_tmp[648993]))
    unknown call_tmp[649005] "expr temp" "maybe param" "maybe type" "temp"
    (649008 'move' call_tmp[649005](115095 call chpl__buildDomainRuntimeType call_tmp[648958] call_tmp[648972] call_tmp[648986] call_tmp[649000]))
    (515972 'move' ret[515967](515971 'deref' call_tmp[649005]))
    (515969 return ret[515967])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492167] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649012] "expr temp" "maybe param" "maybe type" "temp"
      (649015 'move' call_tmp[649012](115061 call _value _mt[243] dom[115054]))
      (492171 'move' call_type_tmp[492167](115064 'typeof' call_tmp[649012]))
    }
    (354394 'is_subtype' BaseRectangularDom[382354](?) call_type_tmp[492167])
  }
  function chpl__convertValueToRuntimeType[115108](arg dom[115105]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515976] "RVV" "temp" "type variable"
    unknown call_tmp[649019] "expr temp" "maybe param" "maybe type" "temp"
    (649022 'move' call_tmp[649019](115121 call dist _mt[243] dom[115105]))
    unknown call_tmp[649026] "expr temp" "maybe param" "maybe type" "temp"
    (649029 'move' call_tmp[649026](115126 call _value _mt[243] dom[115105]))
    unknown call_tmp[649033] "expr temp" "maybe param" "maybe type" "temp"
    (649036 'move' call_tmp[649033](115129 call idxType _mt[243] call_tmp[649026]))
    unknown call_tmp[649040] "expr temp" "maybe param" "maybe type" "temp"
    (649043 'move' call_tmp[649040](115133 call _value _mt[243] dom[115105]))
    unknown call_tmp[649047] "expr temp" "maybe param" "maybe type" "temp"
    (649050 'move' call_tmp[649047](115138 call parSafe _mt[243] call_tmp[649040]))
    unknown call_tmp[649052] "expr temp" "maybe param" "maybe type" "temp"
    (649055 'move' call_tmp[649052](115141 call chpl__buildDomainRuntimeType call_tmp[649019] call_tmp[649033] call_tmp[649047]))
    (515981 'move' ret[515976](515980 'deref' call_tmp[649052]))
    (515978 return ret[515976])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492173] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649059] "expr temp" "maybe param" "maybe type" "temp"
      (649062 'move' call_tmp[649059](115112 call _value _mt[243] dom[115105]))
      (492177 'move' call_type_tmp[492173](115115 'typeof' call_tmp[649059]))
    }
    (354395 'is_subtype' BaseAssociativeDom[382359](?) call_type_tmp[492173])
  }
  function chpl__convertValueToRuntimeType[115154](arg dom[115151]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515985] "RVV" "temp" "type variable"
    unknown call_tmp[649066] "expr temp" "maybe param" "maybe type" "temp"
    (649069 'move' call_tmp[649066](115167 call dist _mt[243] dom[115151]))
    unknown call_tmp[649073] "expr temp" "maybe param" "maybe type" "temp"
    (649076 'move' call_tmp[649073](115172 call _value _mt[243] dom[115151]))
    unknown call_tmp[649080] "expr temp" "maybe param" "maybe type" "temp"
    (649083 'move' call_tmp[649080](115177 call parentDom _mt[243] call_tmp[649073]))
    unknown call_tmp[649085] "expr temp" "maybe param" "maybe type" "temp"
    (649088 'move' call_tmp[649085](115180 call chpl__buildSparseDomainRuntimeType call_tmp[649066] call_tmp[649080]))
    (515990 'move' ret[515985](515989 'deref' call_tmp[649085]))
    (515987 return ret[515985])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492179] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649092] "expr temp" "maybe param" "maybe type" "temp"
      (649095 'move' call_tmp[649092](115158 call _value _mt[243] dom[115151]))
      (492183 'move' call_type_tmp[492179](115161 'typeof' call_tmp[649092]))
    }
    (354396 'is_subtype' BaseSparseDom[382364](?) call_type_tmp[492179])
  }
  function chpl__convertValueToRuntimeType[115193](arg dom[115190]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515994] "RVV" "temp" "type variable"
    (115217 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, or Bas 0)
    (479362 'end of statement')
    (515999 'move' ret[515994](515998 'deref' 0))
    (515996 return ret[515994])
  }
  function chpl__buildArrayRuntimeType[115231](arg dom[115228]:_domain[125908](?), arg eltType[115233]:_any[178](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[516003] "RVV" "temp" "type variable"
    unknown call_tmp[649099] "expr temp" "maybe param" "maybe type" "temp"
    (649102 'move' call_tmp[649099](115244 call(115238 call (partial) buildArray _mt[243] dom[115228]) eltType[115233] 1))
    (516008 'move' ret[516003](516007 'deref' call_tmp[649099]))
    (516005 return ret[516003])
  }
  function chpl__convertRuntimeTypeToValue[115256](arg dom[115253]:_domain[125908](?), arg eltType[115258]:_any[178](?), param arg isNoInit[115261]:bool[10]) : _unknown[51]
  {
    unknown ret[516012] "RVV" "temp"
    unknown call_tmp[649106] "expr temp" "maybe param" "maybe type" "temp"
    (649109 'move' call_tmp[649106](115271 call ! isNoInit[115261]))
    unknown call_tmp[649111] "expr temp" "maybe param" "maybe type" "temp"
    (649114 'move' call_tmp[649111](115273 call(115265 call (partial) buildArray _mt[243] dom[115253]) eltType[115258] call_tmp[649106]))
    (516017 'move' ret[516012](516016 'deref' call_tmp[649111]))
    (516014 return ret[516012])
  }
  function chpl__convertValueToRuntimeType[115287](arg arr[115284]:_array[133594](?)) type : _unknown[51]
  {
    unknown ret[516021] "RVV" "temp" "type variable"
    unknown call_tmp[649118] "expr temp" "maybe param" "maybe type" "temp"
    (649121 'move' call_tmp[649118](115291 call _dom _mt[243] arr[115284]))
    unknown call_tmp[649125] "expr temp" "maybe param" "maybe type" "temp"
    (649128 'move' call_tmp[649125](115296 call eltType _mt[243] arr[115284]))
    unknown call_tmp[649130] "expr temp" "maybe param" "maybe type" "temp"
    (649133 'move' call_tmp[649130](115299 call chpl__buildArrayRuntimeType call_tmp[649118] call_tmp[649125]))
    (516026 'move' ret[516021](516025 'deref' call_tmp[649130]))
    (516023 return ret[516021])
  }
  function _getLiteralType[115309](arg t[115307]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516030] "RVV" "temp" "type variable"
    unknown call_tmp[649135] "expr temp" "maybe param" "maybe type" "temp"
    (649138 'move' call_tmp[649135](115313 call != t[115307] c_string[19]))
    unknown call_tmp[649140] "expr temp" "maybe param" "maybe type" "temp"
    (649143 'move' call_tmp[649140](115321 call _cond_test call_tmp[649135]))
    if call_tmp[649140]
    {
      (516035 'move' ret[516030](516034 'deref' t[115307]))
      gotoReturn _end__getLiteralType[516028] _end__getLiteralType[516028]
    }
    {
      (516040 'move' ret[516030](516039 'deref' string[26]))
      gotoReturn _end__getLiteralType[516028] _end__getLiteralType[516028]
    }
    label _end__getLiteralType[516028]
    (516032 return ret[516030])
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[115331] "config" "no doc" "param"
  unknown arrayLiteralLowBound[115336] "config" "no doc" "param"
  unknown capturedIteratorLowBound[115341] "config" "no doc" "param"
  function chpl__buildArrayExpr[115352](arg elems[115349]:_any[178](?) ...) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[516046] "RVV" "temp"
    unknown tmp[424265] "maybe param" "temp"
    (424276 'move' tmp[424265](115356 call == CHPL_WARN_DOMAIN_LITERAL[115331] "true"))
    unknown call_tmp[649145] "expr temp" "maybe param" "maybe type" "temp"
    (649148 'move' call_tmp[649145](424278 call _cond_invalid tmp[424265]))
    if call_tmp[649145]
    {
      (424281 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564396] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564397] "maybe param" "temp"
    unknown call_tmp[649150] "expr temp" "maybe param" "maybe type" "temp"
    (649153 'move' call_tmp[649150](424266 call isTrue tmp[424265]))
    (564402 'move' tmp[564397](564400 call _cond_test call_tmp[649150]))
    if tmp[564397]
    {
      unknown tmp[564404] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[649155] "expr temp" "maybe param" "maybe type" "temp"
      (649158 'move' call_tmp[649155](115362 call elems[115349] 0))
      unknown call_tmp[649160] "expr temp" "maybe param" "maybe type" "temp"
      (649163 'move' call_tmp[649160](115364 call isRange call_tmp[649155]))
      (564406 'move' tmp[564404](424269 call isTrue call_tmp[649160]))
      (564411 'move' tmp[564396](564408 '_paramFoldLogical' tmp[564397] tmp[564404]))
    }
    {
      (564416 'move' tmp[564396](564413 '_paramFoldLogical' tmp[564397] 0))
    }
    unknown call_tmp[649165] "expr temp" "maybe param" "maybe type" "temp"
    (649168 'move' call_tmp[649165](115423 call _cond_test tmp[564396]))
    if call_tmp[649165]
    {
      (115420 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    { scopeless type
      unknown call_type_tmp[492185] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649170] "expr temp" "maybe param" "maybe type" "temp"
      (649173 'move' call_tmp[649170](115432 call elems[115349] 0))
      (492189 'move' call_type_tmp[492185](115433 'typeof' call_tmp[649170]))
    }
    unknown elemType[115436] "dead at end of block" "insert auto destroy" "type variable"(115435 call _getLiteralType call_type_tmp[492185])
    (542782 'move' elemType[115436](542780 call _getLiteralType call_type_tmp[492185]))
    unknown A[115451] "dead at end of block" "insert auto destroy" "unsafe"
    unknown call_tmp[649175] "expr temp" "maybe param" "maybe type" "temp"
    (649178 'move' call_tmp[649175](115440 call chpl_build_low_bounded_range arrayLiteralLowBound[115336]))
    unknown call_tmp[649180] "expr temp" "maybe param" "maybe type" "temp"
    (649183 'move' call_tmp[649180](115443 call # call_tmp[649175] k[115347]))
    unknown call_tmp[649185] "expr temp" "maybe param" "maybe type" "temp"
    (649188 'move' call_tmp[649185](115447 call chpl__ensureDomainExpr call_tmp[649180]))
    unknown call_tmp[649190] "expr temp" "maybe param" "maybe type" "temp"
    (649193 'move' call_tmp[649190](115449 call chpl__buildArrayRuntimeType call_tmp[649185] elemType[115436]))
    (542784 'default init var' A[115451] call_tmp[649190])
    (115454 'end of statement' elemType[115436])
    {
      unknown i[115574] "dead at end of block" "insert auto destroy"
      (542786 'init var' i[115574] 0)
      (479372 'end of statement')
      unknown tmp[115575] "maybe param" "temp"
      unknown call_tmp[649195] "expr temp" "maybe param" "maybe type" "temp"
      (649198 'move' call_tmp[649195](115458 call - k[115347] 1))
      (115587 'move' tmp[115575](115585 call chpl_compute_low_param_loop_bound 0 call_tmp[649195]))
      unknown tmp[115576] "maybe param" "temp"
      unknown call_tmp[649200] "expr temp" "maybe param" "maybe type" "temp"
      (649203 'move' call_tmp[649200](115592 call - k[115347] 1))
      (115597 'move' tmp[115576](115595 call chpl_compute_high_param_loop_bound 0 call_tmp[649200]))
      unknown tmp[115577] "maybe param" "temp"
      (115600 'move' tmp[115577] 1)
      ParamForLoop[115602]
      { i[115574] tmp[115575] tmp[115576] tmp[115577]
        {
          { scopeless type
            unknown call_type_tmp[492191] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649205] "expr temp" "maybe param" "maybe type" "temp"
            (649208 'move' call_tmp[649205](115466 call elems[115349] i[115574]))
            (492195 'move' call_type_tmp[492191](115467 'typeof' call_tmp[649205]))
          }
          unknown currType[115470] "dead at end of block" "insert auto destroy" "type variable"(115469 call _getLiteralType call_type_tmp[492191])
          (542791 'move' currType[115470](542789 call _getLiteralType call_type_tmp[492191]))
          (479373 'end of statement' i[115574])
          unknown call_tmp[649210] "expr temp" "maybe param" "maybe type" "temp"
          (649213 'move' call_tmp[649210](115476 call != currType[115470] elemType[115436]))
          unknown call_tmp[649215] "expr temp" "maybe param" "maybe type" "temp"
          (649218 'move' call_tmp[649215](115556 call _cond_test call_tmp[649210]))
          if call_tmp[649215]
          {
            unknown call_tmp[649220] "expr temp" "maybe param" "maybe type" "temp"
            (649223 'move' call_tmp[649220](115498 call _cast string[26] i[115574]))
            unknown call_tmp[649225] "expr temp" "maybe param" "maybe type" "temp"
            (649228 'move' call_tmp[649225](115500 call + "Array literal element " call_tmp[649220]))
            unknown call_tmp[649230] "expr temp" "maybe param" "maybe type" "temp"
            (649233 'move' call_tmp[649230](115519 call + call_tmp[649225] " expected to be of type "))
            unknown call_tmp[649235] "expr temp" "maybe param" "maybe type" "temp"
            (649238 'move' call_tmp[649235](115523 call _cast string[26] elemType[115436]))
            unknown call_tmp[649240] "expr temp" "maybe param" "maybe type" "temp"
            (649243 'move' call_tmp[649240](115525 call + call_tmp[649230] call_tmp[649235]))
            unknown call_tmp[649245] "expr temp" "maybe param" "maybe type" "temp"
            (649248 'move' call_tmp[649245](115544 call + call_tmp[649240] " but is of type "))
            unknown call_tmp[649250] "expr temp" "maybe param" "maybe type" "temp"
            (649253 'move' call_tmp[649250](115548 call _cast string[26] currType[115470]))
            unknown call_tmp[649255] "expr temp" "maybe param" "maybe type" "temp"
            (649258 'move' call_tmp[649255](115550 call + call_tmp[649245] call_tmp[649250]))
            (115553 call compilerError call_tmp[649255])
            (479375 'end of statement' i[115574] elemType[115436] currType[115470])
          }
          unknown call_tmp[649260] "expr temp" "maybe param" "maybe type" "temp"
          (649263 'move' call_tmp[649260](115563 call + i[115574] arrayLiteralLowBound[115336]))
          unknown call_tmp[649265] "expr temp" "maybe param" "maybe type" "temp"
          (649268 'move' call_tmp[649265](115566 call A[115451] call_tmp[649260]))
          unknown call_tmp[649270] "expr temp" "maybe param" "maybe type" "temp"
          (649273 'move' call_tmp[649270](115570 call elems[115349] i[115574]))
          (115571 call = call_tmp[649265] call_tmp[649270])
          (479379 'end of statement' A[115451] i[115574] i[115574])
        }
      }
      label _unused_continueLabel[115579]
      label _breakLabel[115578]
    }
    (516051 'move' ret[516046](516050 'deref' A[115451]))
    gotoReturn _end_chpl__buildArrayExpr[516044] _end_chpl__buildArrayExpr[516044]
    (479383 'end of statement' A[115451])
    label _end_chpl__buildArrayExpr[516044]
    (516048 return ret[516046])
  }
  function chpl__buildAssociativeArrayExpr[115623](arg elems[115620]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516057] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492197] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649275] "expr temp" "maybe param" "maybe type" "temp"
      (649278 'move' call_tmp[649275](115629 call elems[115620] 0))
      (492201 'move' call_type_tmp[492197](115630 'typeof' call_tmp[649275]))
    }
    unknown keyType[115633] "dead at end of block" "insert auto destroy" "type variable"(115632 call _getLiteralType call_type_tmp[492197])
    (542796 'move' keyType[115633](542794 call _getLiteralType call_type_tmp[492197]))
    { scopeless type
      unknown call_type_tmp[492203] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649280] "expr temp" "maybe param" "maybe type" "temp"
      (649283 'move' call_tmp[649280](115641 call elems[115620] 1))
      (492207 'move' call_type_tmp[492203](115642 'typeof' call_tmp[649280]))
    }
    unknown valType[115645] "dead at end of block" "insert auto destroy" "type variable"(115644 call _getLiteralType call_type_tmp[492203])
    (542801 'move' valType[115645](542799 call _getLiteralType call_type_tmp[492203]))
    unknown D[115653] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649285] "expr temp" "maybe param" "maybe type" "temp"
    (649288 'move' call_tmp[649285](115651 call chpl__buildDomainRuntimeType defaultDist[94053] keyType[115633]))
    (542803 'default init var' D[115653] call_tmp[649285])
    (115656 'end of statement')
    unknown call_tmp[649292] "expr temp" "maybe param" "maybe type" "temp"
    (649295 'move' call_tmp[649292](115665 call / k[115618] 2))
    (115668 call(115660 call (partial) requestCapacity _mt[243] D[115653]) call_tmp[649292])
    (479386 'end of statement' D[115653])
    unknown A[115677] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649297] "expr temp" "maybe param" "maybe type" "temp"
    (649300 'move' call_tmp[649297](115673 call chpl__ensureDomainExpr D[115653]))
    unknown call_tmp[649302] "expr temp" "maybe param" "maybe type" "temp"
    (649305 'move' call_tmp[649302](115675 call chpl__buildArrayRuntimeType call_tmp[649297] valType[115645]))
    (542805 'default init var' A[115677] call_tmp[649302])
    (115680 'end of statement' keyType[115633] D[115653] valType[115645])
    {
      unknown i[115854] "dead at end of block" "insert auto destroy"
      (542807 'init var' i[115854] 0)
      (479390 'end of statement')
      unknown tmp[115855] "maybe param" "temp"
      unknown call_tmp[649307] "expr temp" "maybe param" "maybe type" "temp"
      (649310 'move' call_tmp[649307](115684 call - k[115618] 1))
      (115866 'move' tmp[115855](115864 call chpl_compute_low_param_loop_bound 0 call_tmp[649307]))
      unknown tmp[115856] "maybe param" "temp"
      unknown call_tmp[649312] "expr temp" "maybe param" "maybe type" "temp"
      (649315 'move' call_tmp[649312](115871 call - k[115618] 1))
      (115876 'move' tmp[115856](115874 call chpl_compute_high_param_loop_bound 0 call_tmp[649312]))
      unknown tmp[115857] "maybe param" "temp"
      (115879 'move' tmp[115857] 2)
      ParamForLoop[115881]
      { i[115854] tmp[115855] tmp[115856] tmp[115857]
        {
          unknown call_tmp[649317] "maybe param" "maybe type" "temp"
          (649320 'move' call_tmp[649317](115694 call elems[115620] i[115854]))
          unknown elemKey[115695] "dead at end of block" "insert auto destroy"
          (542809 'init var' elemKey[115695] call_tmp[649317])
          (115698 'end of statement')
          unknown call_tmp[649322] "expr temp" "maybe param" "maybe type" "temp"
          (649325 'move' call_tmp[649322](115703 call + i[115854] 1))
          unknown call_tmp[649327] "maybe param" "maybe type" "temp"
          (649330 'move' call_tmp[649327](115706 call elems[115620] call_tmp[649322]))
          unknown elemVal[115707] "dead at end of block" "insert auto destroy"
          (542811 'init var' elemVal[115707] call_tmp[649327])
          (115710 'end of statement' i[115854] i[115854])
          unknown call_tmp[649332] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649335 'move' call_tmp[649332](115713 'typeof' elemKey[115695]))
          unknown elemKeyType[115716] "dead at end of block" "insert auto destroy" "type variable"(115715 call _getLiteralType call_tmp[649332])
          unknown call_tmp[649337] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649340 'move' call_tmp[649337](542815 'typeof' elemKey[115695]))
          (542817 'move' elemKeyType[115716](542814 call _getLiteralType call_tmp[649337]))
          (479393 'end of statement' elemKey[115695])
          unknown call_tmp[649342] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649345 'move' call_tmp[649342](115721 'typeof' elemVal[115707]))
          unknown elemValType[115724] "dead at end of block" "insert auto destroy" "type variable"(115723 call _getLiteralType call_tmp[649342])
          unknown call_tmp[649347] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649350 'move' call_tmp[649347](542821 'typeof' elemVal[115707]))
          (542823 'move' elemValType[115724](542820 call _getLiteralType call_tmp[649347]))
          (479395 'end of statement' elemVal[115707])
          unknown call_tmp[649352] "expr temp" "maybe param" "maybe type" "temp"
          (649355 'move' call_tmp[649352](115729 call != elemKeyType[115716] keyType[115633]))
          unknown call_tmp[649357] "expr temp" "maybe param" "maybe type" "temp"
          (649360 'move' call_tmp[649357](115780 call _cond_test call_tmp[649352]))
          if call_tmp[649357]
          {
            unknown call_tmp[649362] "expr temp" "maybe param" "maybe type" "temp"
            (649365 'move' call_tmp[649362](115751 call / i[115854] 2))
            unknown call_tmp[649367] "expr temp" "maybe param" "maybe type" "temp"
            (649370 'move' call_tmp[649367](115754 call _cast string[26] call_tmp[649362]))
            unknown call_tmp[649372] "expr temp" "maybe param" "maybe type" "temp"
            (649375 'move' call_tmp[649372](115756 call + "Associative array key element " call_tmp[649367]))
            unknown call_tmp[649377] "expr temp" "maybe param" "maybe type" "temp"
            (649380 'move' call_tmp[649377](115759 call + call_tmp[649372] " expected to be of type "))
            unknown call_tmp[649382] "expr temp" "maybe param" "maybe type" "temp"
            (649385 'move' call_tmp[649382](115763 call _cast string[26] keyType[115633]))
            unknown call_tmp[649387] "expr temp" "maybe param" "maybe type" "temp"
            (649390 'move' call_tmp[649387](115765 call + call_tmp[649377] call_tmp[649382]))
            unknown call_tmp[649392] "expr temp" "maybe param" "maybe type" "temp"
            (649395 'move' call_tmp[649392](115768 call + call_tmp[649387] " but is of type "))
            unknown call_tmp[649397] "expr temp" "maybe param" "maybe type" "temp"
            (649400 'move' call_tmp[649397](115772 call _cast string[26] elemKeyType[115716]))
            unknown call_tmp[649402] "expr temp" "maybe param" "maybe type" "temp"
            (649405 'move' call_tmp[649402](115774 call + call_tmp[649392] call_tmp[649397]))
            (115777 call compilerError call_tmp[649402])
            (479397 'end of statement' i[115854] keyType[115633] elemKeyType[115716])
          }
          unknown call_tmp[649407] "expr temp" "maybe param" "maybe type" "temp"
          (649410 'move' call_tmp[649407](115786 call != elemValType[115724] valType[115645]))
          unknown call_tmp[649412] "expr temp" "maybe param" "maybe type" "temp"
          (649415 'move' call_tmp[649412](115837 call _cond_test call_tmp[649407]))
          if call_tmp[649412]
          {
            unknown call_tmp[649417] "expr temp" "maybe param" "maybe type" "temp"
            (649420 'move' call_tmp[649417](115808 call / i[115854] 2))
            unknown call_tmp[649422] "expr temp" "maybe param" "maybe type" "temp"
            (649425 'move' call_tmp[649422](115811 call _cast string[26] call_tmp[649417]))
            unknown call_tmp[649427] "expr temp" "maybe param" "maybe type" "temp"
            (649430 'move' call_tmp[649427](115813 call + "Associative array value element " call_tmp[649422]))
            unknown call_tmp[649432] "expr temp" "maybe param" "maybe type" "temp"
            (649435 'move' call_tmp[649432](115816 call + call_tmp[649427] " expected to be of type "))
            unknown call_tmp[649437] "expr temp" "maybe param" "maybe type" "temp"
            (649440 'move' call_tmp[649437](115820 call _cast string[26] valType[115645]))
            unknown call_tmp[649442] "expr temp" "maybe param" "maybe type" "temp"
            (649445 'move' call_tmp[649442](115822 call + call_tmp[649432] call_tmp[649437]))
            unknown call_tmp[649447] "expr temp" "maybe param" "maybe type" "temp"
            (649450 'move' call_tmp[649447](115825 call + call_tmp[649442] " but is of type "))
            unknown call_tmp[649452] "expr temp" "maybe param" "maybe type" "temp"
            (649455 'move' call_tmp[649452](115829 call _cast string[26] elemValType[115724]))
            unknown call_tmp[649457] "expr temp" "maybe param" "maybe type" "temp"
            (649460 'move' call_tmp[649457](115831 call + call_tmp[649447] call_tmp[649452]))
            (115834 call compilerError call_tmp[649457])
            (479401 'end of statement' i[115854] valType[115645] elemValType[115724])
          }
          (115843 call += D[115653] elemKey[115695])
          (479405 'end of statement' D[115653] elemKey[115695])
          unknown call_tmp[649462] "expr temp" "maybe param" "maybe type" "temp"
          (649465 'move' call_tmp[649462](115849 call A[115677] elemKey[115695]))
          (115851 call = call_tmp[649462] elemVal[115707])
          (479408 'end of statement' A[115677] elemKey[115695] elemVal[115707])
        }
      }
      label _unused_continueLabel[115859]
      label _breakLabel[115858]
    }
    (516062 'move' ret[516057](516061 'deref' A[115677]))
    gotoReturn _end_chpl__buildAssociativeArrayExpr[516055] _end_chpl__buildAssociativeArrayExpr[516055]
    (479412 'end of statement' A[115677])
    label _end_chpl__buildAssociativeArrayExpr[516055]
    (516059 return ret[516057])
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[115902](arg arr[115899]:unmanaged BaseArr[415569], arg eltType[115904]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649467] "expr temp" "maybe param" "maybe type" "temp"
    (649470 'move' call_tmp[649467](115909 call isArrayType eltType[115904]))
    unknown call_tmp[649472] "expr temp" "maybe param" "maybe type" "temp"
    (649475 'move' call_tmp[649472](115960 call _cond_test call_tmp[649467]))
    if call_tmp[649472]
    {
      unknown call_tmp[649479] "expr temp" "maybe param" "maybe type" "temp"
      (649482 'move' call_tmp[649479](115913 call _decEltRefCounts _mt[243] arr[115899]))
      (115917 call = call_tmp[649479] 1)
      (479414 'end of statement')
      unknown arrayEltType[115925] "dead at end of block" "insert auto destroy" "type variable"(115924 call chpl__eltTypeFromArrayRuntimeType eltType[115904])
      (542828 'move' arrayEltType[115925](542826 call chpl__eltTypeFromArrayRuntimeType eltType[115904]))
      const dom[115932] "dead at end of block" "const" "ref var"
      unknown call_tmp[649484] "expr temp" "maybe param" "maybe type" "temp"
      (649487 'move' call_tmp[649484](115931 call chpl__domainFromArrayRuntimeType eltType[115904]))
      (542831 'move' dom[115932](542830 'addr of' call_tmp[649484]))
      (115935 'end of statement')
      unknown call_tmp[649491] "maybe param" "maybe type" "temp"
      (649494 'move' call_tmp[649491](115937 call _instance _mt[243] dom[115932]))
      const dv[115940] "dead at end of block" "const" "insert auto destroy"
      (542833 'init var' dv[115940] call_tmp[649491])
      (115943 'end of statement' dom[115932])
      (115952 call(115947 call (partial) add_containing_arr _mt[243] dv[115940]) arr[115899])
      (479416 'end of statement' dv[115940])
      (115958 call chpl_incRefCountsForDomainsInArrayEltTypes arr[115899] arrayEltType[115925])
      (479418 'end of statement' arrayEltType[115925])
    }
    (516066 return _void[55])
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[115974](arg arr[115971]:unmanaged BaseArr[415569], arg eltType[115976]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649498] "expr temp" "maybe param" "maybe type" "temp"
    (649501 'move' call_tmp[649498](115981 call isArrayType eltType[115976]))
    unknown call_tmp[649503] "expr temp" "maybe param" "maybe type" "temp"
    (649506 'move' call_tmp[649503](116177 call _cond_test call_tmp[649498]))
    if call_tmp[649503]
    {
      unknown call_tmp[649510] "expr temp" "maybe param" "maybe type" "temp"
      (649513 'move' call_tmp[649510](115983 call _decEltRefCounts _mt[243] arr[115971]))
      unknown call_tmp[649515] "expr temp" "maybe param" "maybe type" "temp"
      (649518 'move' call_tmp[649515](115987 call == call_tmp[649510] 0))
      unknown call_tmp[649520] "expr temp" "maybe param" "maybe type" "temp"
      (649523 'move' call_tmp[649520](116010 call _cond_test call_tmp[649515]))
      if call_tmp[649520]
      {
        (116008 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown arrayEltType[116020] "dead at end of block" "insert auto destroy" "type variable"(116019 call chpl__eltTypeFromArrayRuntimeType eltType[115976])
      (542838 'move' arrayEltType[116020](542836 call chpl__eltTypeFromArrayRuntimeType eltType[115976]))
      const dom[116027] "dead at end of block" "const" "ref var"
      unknown call_tmp[649525] "expr temp" "maybe param" "maybe type" "temp"
      (649528 'move' call_tmp[649525](116026 call chpl__domainFromArrayRuntimeType eltType[115976]))
      (542841 'move' dom[116027](542840 'addr of' call_tmp[649525]))
      (116030 'end of statement')
      (116035 call chpl_decRefCountsForDomainsInArrayEltTypes arr[115971] arrayEltType[116020])
      (479421 'end of statement' arrayEltType[116020])
      unknown call_tmp[649532] "expr temp" "maybe param" "maybe type" "temp"
      (649535 'move' call_tmp[649532](116038 call _instance _mt[243] dom[116027]))
      unknown call_tmp[649539] "maybe param" "maybe type" "temp"
      (649542 'move' call_tmp[649539](116048 call(116043 call (partial) remove_containing_arr _mt[243] call_tmp[649532]) arr[115971]))
      unknown removeDom[116049] "dead at end of block" "insert auto destroy"
      (542843 'init var' removeDom[116049] call_tmp[649539])
      (116052 'end of statement' dom[116027])
      unknown call_tmp[649544] "expr temp" "maybe param" "maybe type" "temp"
      (649547 'move' call_tmp[649544](116173 call _cond_test removeDom[116049]))
      if call_tmp[649544]
      {
        const tmp[116164] "const" "temp"
        unknown call_tmp[649551] "expr temp" "maybe param" "maybe type" "temp"
        (649554 'move' call_tmp[649551](116055 call _instance _mt[243] dom[116027]))
        unknown call_tmp[649556] "expr temp" "maybe param" "maybe type" "temp"
        (649559 'move' call_tmp[649556](116161 '_wide_get_locale' call_tmp[649551]))
        (116166 'move' tmp[116164](116162 'deref' call_tmp[649556]))
        (935309 call on_fn[935305] tmp[116164])
        function on_fn[935305](const in arg dummy_locale_arg[935307]:chpl_localeID_t[209352]) : void[4] "on"
        {
          {
            unknown call_tmp[649563] "maybe param" "maybe type" "temp"
            (649566 'move' call_tmp[649563](116059 call _instance _mt[243] dom[116027]))
            const inst[116062] "dead at end of block" "const" "insert auto destroy"
            (542845 'init var' inst[116062] call_tmp[649563])
            (116065 'end of statement')
            unknown call_tmp[649570] "maybe param" "maybe type" "temp"
            (649573 'move' call_tmp[649570](116077 call(116073 call (partial) remove _mt[243] inst[116062])))
            unknown tmp[116078] "dead at end of block" "insert auto destroy" "temp"
            (542847 'init var' tmp[116078] call_tmp[649570])
            (116085 call _check_tuple_var_decl tmp[116078] 2)
            (479425 'end of statement')
            unknown call_tmp[649575] "maybe param" "maybe type" "temp"
            (649578 'move' call_tmp[649575](116079 call tmp[116078] 0))
            unknown domToFree[116067] "dead at end of block" "insert auto destroy"
            (542849 'init var' domToFree[116067] call_tmp[649575])
            unknown call_tmp[649580] "maybe param" "maybe type" "temp"
            (649583 'move' call_tmp[649580](116082 call tmp[116078] 1))
            unknown distToRemove[116069] "dead at end of block" "insert auto destroy"
            (542851 'init var' distToRemove[116069] call_tmp[649580])
            (116090 'end of statement')
            unknown distToFree[116095] "dead at end of block" "insert auto destroy"
            (542853 'init var' distToFree[116095] nil[44] unmanaged BaseDist?[415575])
            (116098 'end of statement' dom[116027])
            unknown call_tmp[649585] "expr temp" "maybe param" "maybe type" "temp"
            (649588 'move' call_tmp[649585](116101 call != distToRemove[116069] nil[44]))
            unknown call_tmp[649590] "expr temp" "maybe param" "maybe type" "temp"
            (649593 'move' call_tmp[649590](116116 call _cond_test call_tmp[649585]))
            if call_tmp[649590]
            {
              unknown call_tmp[649595] "expr temp" "maybe param" "maybe type" "temp"
              (649598 'move' call_tmp[649595](116105 call postfix! distToRemove[116069]))
              unknown call_tmp[649602] "expr temp" "maybe param" "maybe type" "temp"
              (649605 'move' call_tmp[649602](116111 call(116107 call (partial) remove _mt[243] call_tmp[649595])))
              (116112 call = distToFree[116095] call_tmp[649602])
              (479426 'end of statement' distToFree[116095] distToRemove[116069])
            }
            unknown call_tmp[649607] "expr temp" "maybe param" "maybe type" "temp"
            (649610 'move' call_tmp[649607](116122 call != domToFree[116067] nil[44]))
            unknown call_tmp[649612] "expr temp" "maybe param" "maybe type" "temp"
            (649615 'move' call_tmp[649612](116133 call _cond_test call_tmp[649607]))
            if call_tmp[649612]
            {
              unknown call_tmp[649617] "expr temp" "maybe param" "maybe type" "temp"
              (649620 'move' call_tmp[649617](116130 call _isPrivatized inst[116062]))
              (116131 call _delete_dom inst[116062] call_tmp[649617])
              (479429 'end of statement' inst[116062] inst[116062])
            }
            unknown call_tmp[649622] "expr temp" "maybe param" "maybe type" "temp"
            (649625 'move' call_tmp[649622](116140 call != distToFree[116095] nil[44]))
            unknown call_tmp[649627] "expr temp" "maybe param" "maybe type" "temp"
            (649630 'move' call_tmp[649627](116156 call _cond_test call_tmp[649622]))
            if call_tmp[649627]
            {
              unknown call_tmp[649632] "expr temp" "maybe param" "maybe type" "temp"
              (649635 'move' call_tmp[649632](116144 call postfix! distToFree[116095]))
              unknown call_tmp[649639] "expr temp" "maybe param" "maybe type" "temp"
              (649642 'move' call_tmp[649639](116149 call dist _mt[243] inst[116062]))
              unknown call_tmp[649644] "expr temp" "maybe param" "maybe type" "temp"
              (649647 'move' call_tmp[649644](116153 call _isPrivatized call_tmp[649639]))
              (116154 call _delete_dist call_tmp[649632] call_tmp[649644])
              (479432 'end of statement' distToFree[116095] inst[116062])
            }
          }
          (935312 return _void[55])
        }
        {
        }
      }
    }
    (516068 return _void[55])
  }
  function chpl__buildSubDomainType[116190](arg dom[116187]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[516072] "RVV" "temp" "type variable"
    unknown call_tmp[649649] "expr temp" "maybe param" "maybe type" "temp"
    (649652 'move' call_tmp[649649](116195 call chpl__convertValueToRuntimeType dom[116187]))
    (516077 'move' ret[516072](516076 'deref' call_tmp[649649]))
    (516074 return ret[516072])
  }
  function chpl__isTupleOfRanges[116205](arg tup[116203]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516081] "RVV" "param" "temp"
    {
      unknown i[116236] "dead at end of block" "insert auto destroy"
      (542855 'init var' i[116236] 0)
      (479436 'end of statement')
      unknown tmp[116237] "maybe param" "temp"
      unknown call_tmp[649656] "expr temp" "maybe param" "maybe type" "temp"
      (649659 'move' call_tmp[649656](116209 call size _mt[243] tup[116203]))
      unknown call_tmp[649661] "expr temp" "maybe param" "maybe type" "temp"
      (649664 'move' call_tmp[649661](116213 call - call_tmp[649656] 1))
      (116249 'move' tmp[116237](116247 call chpl_compute_low_param_loop_bound 0 call_tmp[649661]))
      unknown tmp[116238] "maybe param" "temp"
      unknown call_tmp[649668] "expr temp" "maybe param" "maybe type" "temp"
      (649671 'move' call_tmp[649668](116256 call size _mt[243] tup[116203]))
      unknown call_tmp[649673] "expr temp" "maybe param" "maybe type" "temp"
      (649676 'move' call_tmp[649673](116254 call - call_tmp[649668] 1))
      (116262 'move' tmp[116238](116260 call chpl_compute_high_param_loop_bound 0 call_tmp[649673]))
      unknown tmp[116239] "maybe param" "temp"
      (116265 'move' tmp[116239] 1)
      ParamForLoop[116267]
      { i[116236] tmp[116237] tmp[116238] tmp[116239]
        {
          { scopeless type
            unknown call_type_tmp[492209] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649678] "expr temp" "maybe param" "maybe type" "temp"
            (649681 'move' call_tmp[649678](116221 call tup[116203] i[116236]))
            (492213 'move' call_type_tmp[492209](116222 'typeof' call_tmp[649678]))
          }
          unknown call_tmp[649683] "expr temp" "maybe param" "maybe type" "temp"
          (649686 'move' call_tmp[649683](116224 call isRangeType call_type_tmp[492209]))
          unknown call_tmp[649688] "expr temp" "maybe param" "maybe type" "temp"
          (649691 'move' call_tmp[649688](116225 call ! call_tmp[649683]))
          unknown call_tmp[649693] "expr temp" "maybe param" "maybe type" "temp"
          (649696 'move' call_tmp[649693](116230 call _cond_test call_tmp[649688]))
          if call_tmp[649693]
          {
            (516086 'move' ret[516081](516085 'deref' 0))
            gotoReturn _end_chpl__isTupleOfRanges[516079] _end_chpl__isTupleOfRanges[516079]
          }
        }
      }
      label _unused_continueLabel[116241]
      label _breakLabel[116240]
    }
    (516091 'move' ret[516081](516090 'deref' 1))
    label _end_chpl__isTupleOfRanges[516079]
    (516083 return ret[516081])
  }
  function chpl__buildDomainExpr[116288](arg ranges[116285]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516095] "RVV" "temp"
    unknown call_tmp[649700] "maybe param" "maybe type" "temp"
    (649703 'move' call_tmp[649700](116295 call size _mt[243] ranges[116285]))
    unknown rank[116298] "dead at end of block" "param"
    (542857 'init var' rank[116298] call_tmp[649700])
    (116301 'end of statement')
    {
      unknown i[116352] "dead at end of block" "insert auto destroy"
      (542859 'init var' i[116352] 0)
      (479439 'end of statement')
      unknown tmp[116353] "maybe param" "temp"
      unknown call_tmp[649705] "expr temp" "maybe param" "maybe type" "temp"
      (649708 'move' call_tmp[649705](116306 call - rank[116298] 1))
      (116365 'move' tmp[116353](116363 call chpl_compute_low_param_loop_bound 1 call_tmp[649705]))
      unknown tmp[116354] "maybe param" "temp"
      unknown call_tmp[649710] "expr temp" "maybe param" "maybe type" "temp"
      (649713 'move' call_tmp[649710](116370 call - rank[116298] 1))
      (116375 'move' tmp[116354](116373 call chpl_compute_high_param_loop_bound 1 call_tmp[649710]))
      unknown tmp[116355] "maybe param" "temp"
      (116378 'move' tmp[116355] 1)
      ParamForLoop[116380]
      { i[116352] tmp[116353] tmp[116354] tmp[116355]
        unknown call_tmp[649715] "expr temp" "maybe param" "maybe type" "temp"
        (649718 'move' call_tmp[649715](116313 call ranges[116285] 0))
        unknown call_tmp[649722] "expr temp" "maybe param" "maybe type" "temp"
        (649725 'move' call_tmp[649722](116314 call idxType _mt[243] call_tmp[649715]))
        unknown call_tmp[649727] "expr temp" "maybe param" "maybe type" "temp"
        (649730 'move' call_tmp[649727](116320 call ranges[116285] i[116352]))
        unknown call_tmp[649734] "expr temp" "maybe param" "maybe type" "temp"
        (649737 'move' call_tmp[649734](116321 call idxType _mt[243] call_tmp[649727]))
        unknown call_tmp[649739] "expr temp" "maybe param" "maybe type" "temp"
        (649742 'move' call_tmp[649739](116324 call != call_tmp[649722] call_tmp[649734]))
        unknown call_tmp[649744] "expr temp" "maybe param" "maybe type" "temp"
        (649747 'move' call_tmp[649744](116347 call _cond_test call_tmp[649739]))
        if call_tmp[649744]
        {
          (116345 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[116357]
      label _breakLabel[116356]
    }
    {
      unknown i[116431] "dead at end of block" "insert auto destroy"
      (542861 'init var' i[116431] 0)
      (479441 'end of statement')
      unknown tmp[116432] "maybe param" "temp"
      unknown call_tmp[649749] "expr temp" "maybe param" "maybe type" "temp"
      (649752 'move' call_tmp[649749](116392 call - rank[116298] 1))
      (116444 'move' tmp[116432](116442 call chpl_compute_low_param_loop_bound 0 call_tmp[649749]))
      unknown tmp[116433] "maybe param" "temp"
      unknown call_tmp[649754] "expr temp" "maybe param" "maybe type" "temp"
      (649757 'move' call_tmp[649754](116449 call - rank[116298] 1))
      (116454 'move' tmp[116433](116452 call chpl_compute_high_param_loop_bound 0 call_tmp[649754]))
      unknown tmp[116434] "maybe param" "temp"
      (116457 'move' tmp[116434] 1)
      ParamForLoop[116459]
      { i[116431] tmp[116432] tmp[116433] tmp[116434]
        unknown call_tmp[649759] "expr temp" "maybe param" "maybe type" "temp"
        (649762 'move' call_tmp[649759](116400 call ranges[116285] i[116431]))
        unknown call_tmp[649764] "expr temp" "maybe param" "maybe type" "temp"
        (649767 'move' call_tmp[649764](116402 call isBoundedRange call_tmp[649759]))
        unknown call_tmp[649769] "expr temp" "maybe param" "maybe type" "temp"
        (649772 'move' call_tmp[649769](116403 call ! call_tmp[649764]))
        unknown call_tmp[649774] "expr temp" "maybe param" "maybe type" "temp"
        (649777 'move' call_tmp[649774](116426 call _cond_test call_tmp[649769]))
        if call_tmp[649774]
        {
          (116424 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[116436]
      label _breakLabel[116435]
    }
    unknown d[116484] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649779] "expr temp" "maybe param" "maybe type" "temp"
    (649782 'move' call_tmp[649779](116473 call ranges[116285] 0))
    unknown call_tmp[649786] "expr temp" "maybe param" "maybe type" "temp"
    (649789 'move' call_tmp[649786](116474 call idxType _mt[243] call_tmp[649779]))
    unknown call_tmp[649791] "expr temp" "maybe param" "maybe type" "temp"
    (649794 'move' call_tmp[649791](116480 call chpl__anyStridable ranges[116285]))
    unknown call_tmp[649796] "expr temp" "maybe param" "maybe type" "temp"
    (649799 'move' call_tmp[649796](116482 call chpl__buildDomainRuntimeType defaultDist[94053] rank[116298] call_tmp[649786] call_tmp[649791]))
    (542863 'default init var' d[116484] call_tmp[649796])
    (116487 'end of statement')
    (116496 call(116491 call (partial) setIndices _mt[243] d[116484]) ranges[116285])
    (479443 'end of statement' d[116484])
    (516100 'move' ret[516095](516099 'deref' d[116484]))
    gotoReturn _end_chpl__buildDomainExpr[516093] _end_chpl__buildDomainExpr[516093]
    (479445 'end of statement' d[116484])
    label _end_chpl__buildDomainExpr[516093]
    (516097 return ret[516095])
  }
  where {
    (116293 call chpl__isTupleOfRanges ranges[116285])
  }
  function chpl__buildDomainExpr[116510](arg keys[116507]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516106] "RVV" "temp"
    unknown call_tmp[649805] "maybe param" "maybe type" "temp"
    (649808 'move' call_tmp[649805](116513 call size _mt[243] keys[116507]))
    unknown count[116516] "dead at end of block" "param"
    (542865 'init var' count[116516] call_tmp[649805])
    (116519 'end of statement')
    { scopeless type
      unknown call_type_tmp[492215] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649810] "expr temp" "maybe param" "maybe type" "temp"
      (649813 'move' call_tmp[649810](116525 call keys[116507] 0))
      (492219 'move' call_type_tmp[492215](116526 'typeof' call_tmp[649810]))
    }
    unknown keyType[116529] "dead at end of block" "insert auto destroy" "type variable"(116528 call _getLiteralType call_type_tmp[492215])
    (542870 'move' keyType[116529](542868 call _getLiteralType call_type_tmp[492215]))
    {
      unknown i[116607] "dead at end of block" "insert auto destroy"
      (542872 'init var' i[116607] 0)
      (479447 'end of statement')
      unknown tmp[116608] "maybe param" "temp"
      unknown call_tmp[649815] "expr temp" "maybe param" "maybe type" "temp"
      (649818 'move' call_tmp[649815](116535 call - count[116516] 1))
      (116620 'move' tmp[116608](116618 call chpl_compute_low_param_loop_bound 1 call_tmp[649815]))
      unknown tmp[116609] "maybe param" "temp"
      unknown call_tmp[649820] "expr temp" "maybe param" "maybe type" "temp"
      (649823 'move' call_tmp[649820](116625 call - count[116516] 1))
      (116630 'move' tmp[116609](116628 call chpl_compute_high_param_loop_bound 1 call_tmp[649820]))
      unknown tmp[116610] "maybe param" "temp"
      (116633 'move' tmp[116610] 1)
      ParamForLoop[116635]
      { i[116607] tmp[116608] tmp[116609] tmp[116610]
        { scopeless type
          unknown call_type_tmp[492221] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[649825] "expr temp" "maybe param" "maybe type" "temp"
          (649828 'move' call_tmp[649825](116544 call keys[116507] i[116607]))
          (492225 'move' call_type_tmp[492221](116545 'typeof' call_tmp[649825]))
        }
        unknown call_tmp[649830] "expr temp" "maybe param" "maybe type" "temp"
        (649833 'move' call_tmp[649830](116547 call _getLiteralType call_type_tmp[492221]))
        unknown call_tmp[649835] "expr temp" "maybe param" "maybe type" "temp"
        (649838 'move' call_tmp[649835](116548 call != keyType[116529] call_tmp[649830]))
        unknown call_tmp[649840] "expr temp" "maybe param" "maybe type" "temp"
        (649843 'move' call_tmp[649840](116603 call _cond_test call_tmp[649835]))
        if call_tmp[649840]
        {
          { scopeless type
            unknown call_type_tmp[492227] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649845] "expr temp" "maybe param" "maybe type" "temp"
            (649848 'move' call_tmp[649845](116590 call keys[116507] i[116607]))
            (492231 'move' call_type_tmp[492227](116591 'typeof' call_tmp[649845]))
          }
          unknown call_tmp[649850] "expr temp" "maybe param" "maybe type" "temp"
          (649853 'move' call_tmp[649850](116570 call _cast string[26] i[116607]))
          unknown call_tmp[649855] "expr temp" "maybe param" "maybe type" "temp"
          (649858 'move' call_tmp[649855](116572 call + "Associative domain element " call_tmp[649850]))
          unknown call_tmp[649860] "expr temp" "maybe param" "maybe type" "temp"
          (649863 'move' call_tmp[649860](116575 call + call_tmp[649855] " expected to be of type "))
          unknown call_tmp[649865] "expr temp" "maybe param" "maybe type" "temp"
          (649868 'move' call_tmp[649865](116579 call _cast string[26] keyType[116529]))
          unknown call_tmp[649870] "expr temp" "maybe param" "maybe type" "temp"
          (649873 'move' call_tmp[649870](116581 call + call_tmp[649860] call_tmp[649865]))
          unknown call_tmp[649875] "expr temp" "maybe param" "maybe type" "temp"
          (649878 'move' call_tmp[649875](116584 call + call_tmp[649870] " but is of type "))
          unknown call_tmp[649880] "expr temp" "maybe param" "maybe type" "temp"
          (649883 'move' call_tmp[649880](116593 call _getLiteralType call_type_tmp[492227]))
          unknown call_tmp[649885] "expr temp" "maybe param" "maybe type" "temp"
          (649888 'move' call_tmp[649885](116595 call _cast string[26] call_tmp[649880]))
          unknown call_tmp[649890] "expr temp" "maybe param" "maybe type" "temp"
          (649893 'move' call_tmp[649890](116597 call + call_tmp[649875] call_tmp[649885]))
          (116600 call compilerError call_tmp[649890])
          (479448 'end of statement' i[116607] keyType[116529] i[116607])
        }
      }
      label _unused_continueLabel[116612]
      label _breakLabel[116611]
    }
    unknown D[116649] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649895] "expr temp" "maybe param" "maybe type" "temp"
    (649898 'move' call_tmp[649895](116647 call chpl__buildDomainRuntimeType defaultDist[94053] keyType[116529]))
    (542874 'default init var' D[116649] call_tmp[649895])
    (116652 'end of statement' keyType[116529])
    (116659 call(116654 call (partial) requestCapacity _mt[243] D[116649]) count[116516])
    (479453 'end of statement' D[116649])
    {
      unknown i[116676] "dead at end of block" "insert auto destroy"
      (542876 'init var' i[116676] 0)
      (479455 'end of statement')
      unknown tmp[116677] "maybe param" "temp"
      unknown call_tmp[649902] "expr temp" "maybe param" "maybe type" "temp"
      (649905 'move' call_tmp[649902](116664 call - count[116516] 1))
      (116689 'move' tmp[116677](116687 call chpl_compute_low_param_loop_bound 0 call_tmp[649902]))
      unknown tmp[116678] "maybe param" "temp"
      unknown call_tmp[649907] "expr temp" "maybe param" "maybe type" "temp"
      (649910 'move' call_tmp[649907](116694 call - count[116516] 1))
      (116699 'move' tmp[116678](116697 call chpl_compute_high_param_loop_bound 0 call_tmp[649907]))
      unknown tmp[116679] "maybe param" "temp"
      (116702 'move' tmp[116679] 1)
      ParamForLoop[116704]
      { i[116676] tmp[116677] tmp[116678] tmp[116679]
        unknown call_tmp[649912] "expr temp" "maybe param" "maybe type" "temp"
        (649915 'move' call_tmp[649912](116672 call keys[116507] i[116676]))
        (116673 call += D[116649] call_tmp[649912])
        (479456 'end of statement' D[116649] i[116676])
      }
      label _unused_continueLabel[116681]
      label _breakLabel[116680]
    }
    (516111 'move' ret[516106](516110 'deref' D[116649]))
    gotoReturn _end_chpl__buildDomainExpr[516104] _end_chpl__buildDomainExpr[516104]
    (479459 'end of statement' D[116649])
    label _end_chpl__buildDomainExpr[516104]
    (516108 return ret[516106])
  }
  function chpl__ensureDomainExpr[116724](const  ref arg x[116721]:_domain[125908](?)) const ref : _unknown[51]
  {
    unknown ret[516117] "RVV" "temp"
    (516122 'move' ret[516117](516121 'addr of' x[116721]))
    (516119 return ret[516117])
  }
  function chpl__ensureDomainExpr[116738](arg x[116735]:_any[178](?) ...) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[516126] "RVV" "temp"
    unknown call_tmp[649917] "expr temp" "maybe param" "maybe type" "temp"
    (649920 'move' call_tmp[649917](116744 call chpl__buildDomainExpr(116742 'expand_tuple' x[116735])))
    (516131 'move' ret[516126](516130 'deref' call_tmp[649917]))
    (516128 return ret[516126])
  }
  function chpl__ensureDomainExpr[116754](arg t[116752]:_any[178](?)) : _unknown[51] "compiler generated" "last resort" "no return value for void"
  {
    unknown call_tmp[649922] "expr temp" "maybe param" "maybe type" "temp"
    (649925 'move' call_tmp[649922](116777 call _cast string[26] t[116752]))
    (116798 call compilerError "Domain expression was a type ('" call_tmp[649922] "') rather than a domain value or range list as expected")
    (516133 return _void[55])
  }
  function chpl__distributed[116809](arg d[116806]:_distribution[118973](?), arg dom[116812]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[516137] "RVV" "temp"
    unknown call_tmp[649927] "expr temp" "maybe param" "maybe type" "temp"
    (649930 'move' call_tmp[649927](116818 call isRectangularDom dom[116812]))
    unknown call_tmp[649932] "expr temp" "maybe param" "maybe type" "temp"
    (649935 'move' call_tmp[649932](116876 call _cond_test call_tmp[649927]))
    if call_tmp[649932]
    {
      unknown call_tmp[649939] "expr temp" "maybe param" "maybe type" "temp"
      (649942 'move' call_tmp[649939](116820 call rank _mt[243] dom[116812]))
      unknown call_tmp[649946] "expr temp" "maybe param" "maybe type" "temp"
      (649949 'move' call_tmp[649946](116825 call _value _mt[243] dom[116812]))
      unknown call_tmp[649953] "expr temp" "maybe param" "maybe type" "temp"
      (649956 'move' call_tmp[649953](116828 call idxType _mt[243] call_tmp[649946]))
      unknown call_tmp[649960] "expr temp" "maybe param" "maybe type" "temp"
      (649963 'move' call_tmp[649960](116832 call _value _mt[243] dom[116812]))
      unknown call_tmp[649967] "expr temp" "maybe param" "maybe type" "temp"
      (649970 'move' call_tmp[649967](116835 call stridable _mt[243] call_tmp[649960]))
      unknown call_tmp[649972] "expr temp" "maybe param" "maybe type" "temp"
      (649975 'move' call_tmp[649972](116839 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[649939] call_tmp[649953] call_tmp[649967]))
      unknown call_tmp[649977] "maybe param" "maybe type" "temp"
      (649980 'move' call_tmp[649977](116842 call chpl__distributed d[116806] call_tmp[649972]))
      unknown distDom[116845] "dead at end of block" "insert auto destroy"
      (542878 'init var' distDom[116845] dom[116812] call_tmp[649977])
      (116848 'end of statement')
      (516142 'move' ret[516137](516141 'deref' distDom[116845]))
      gotoReturn _end_chpl__distributed[516135] _end_chpl__distributed[516135]
      (479462 'end of statement' distDom[116845])
    }
    {
      unknown call_tmp[649984] "expr temp" "maybe param" "maybe type" "temp"
      (649987 'move' call_tmp[649984](116854 call _value _mt[243] dom[116812]))
      unknown call_tmp[649991] "expr temp" "maybe param" "maybe type" "temp"
      (649994 'move' call_tmp[649991](116857 call idxType _mt[243] call_tmp[649984]))
      unknown call_tmp[649996] "expr temp" "maybe param" "maybe type" "temp"
      (649999 'move' call_tmp[649996](116862 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[649991]))
      unknown call_tmp[650001] "maybe param" "maybe type" "temp"
      (650004 'move' call_tmp[650001](116865 call chpl__distributed d[116806] call_tmp[649996]))
      unknown distDom[116868] "dead at end of block" "insert auto destroy"
      (542880 'init var' distDom[116868] dom[116812] call_tmp[650001])
      (116871 'end of statement')
      (516147 'move' ret[516137](516146 'deref' distDom[116868]))
      gotoReturn _end_chpl__distributed[516135] _end_chpl__distributed[516135]
      (479464 'end of statement' distDom[116868])
    }
    label _end_chpl__distributed[516135]
    (516139 return ret[516137])
  }
  function chpl__distributed[116889](arg d[116886]:_distribution[118973](?), arg ranges[116892]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516153] "RVV" "temp"
    unknown call_tmp[650006] "expr temp" "maybe param" "maybe type" "temp"
    (650009 'move' call_tmp[650006](116906 call chpl__buildDomainExpr(116904 'expand_tuple' ranges[116892])))
    unknown call_tmp[650011] "expr temp" "maybe param" "maybe type" "temp"
    (650014 'move' call_tmp[650011](116907 call chpl__distributed d[116886] call_tmp[650006]))
    (516158 'move' ret[516153](516157 'deref' call_tmp[650011]))
    (516155 return ret[516153])
  }
  where {
    (116898 call chpl__isTupleOfRanges ranges[116892])
  }
  function chpl__isArrayView[116918](arg arr[116916]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516162] "RVV" "param" "temp"
    const value[116932] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564423] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564424] "maybe param" "temp"
    unknown call_tmp[650016] "expr temp" "maybe param" "maybe type" "temp"
    (650019 'move' call_tmp[650016](116923 call isArray arr[116916]))
    (564429 'move' tmp[564424](564427 call _cond_test call_tmp[650016]))
    if tmp[564424]
    {
      unknown tmp[564431] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564433 'move' tmp[564431](116925 call _value _mt[243] arr[116916]))
      (564438 'move' tmp[564423](564435 '_paramFoldLogical' tmp[564424] tmp[564431]))
    }
    {
      (564443 'move' tmp[564423](564440 '_paramFoldLogical' tmp[564424] arr[116916]))
    }
    (542882 'init var' value[116932] tmp[564423])
    (116935 'end of statement')
    unknown call_tmp[650025] "maybe param" "maybe type" "temp"
    (650028 'move' call_tmp[650025](116942 call(116938 call (partial) isSliceArrayView _mt[243] value[116932])))
    unknown isSlice[116943] "dead at end of block" "param"
    (542884 'init var' isSlice[116943] call_tmp[650025])
    (116946 'end of statement')
    unknown call_tmp[650032] "maybe param" "maybe type" "temp"
    (650035 'move' call_tmp[650032](116952 call(116948 call (partial) isRankChangeArrayView _mt[243] value[116932])))
    unknown isRankChange[116953] "dead at end of block" "param"
    (542886 'init var' isRankChange[116953] call_tmp[650032])
    (116956 'end of statement')
    unknown call_tmp[650039] "maybe param" "maybe type" "temp"
    (650042 'move' call_tmp[650039](116962 call(116958 call (partial) isReindexArrayView _mt[243] value[116932])))
    unknown isReindex[116963] "dead at end of block" "param"
    (542888 'init var' isReindex[116963] call_tmp[650039])
    (116966 'end of statement' value[116932] value[116932] value[116932])
    unknown tmp[424286] "maybe param" "temp"
    unknown tmp[424307] "maybe param" "temp"
    (424318 'move' tmp[424307] isSlice[116943])
    unknown call_tmp[650044] "expr temp" "maybe param" "maybe type" "temp"
    (650047 'move' call_tmp[650044](424320 call _cond_invalid tmp[424307]))
    if call_tmp[650044]
    {
      (424323 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564450] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564451] "maybe param" "temp"
    unknown call_tmp[650049] "expr temp" "maybe param" "maybe type" "temp"
    (650052 'move' call_tmp[650049](424308 call isTrue tmp[424307]))
    (564456 'move' tmp[564451](564454 call _cond_test call_tmp[650049]))
    if tmp[564451]
    {
      (564461 'move' tmp[564450](564458 '_paramFoldLogical' tmp[564451] 1))
    }
    {
      unknown tmp[564463] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564465 'move' tmp[564463](424312 call isTrue isRankChange[116953]))
      (564470 'move' tmp[564450](564467 '_paramFoldLogical' tmp[564451] tmp[564463]))
    }
    (424297 'move' tmp[424286] tmp[564450])
    unknown call_tmp[650054] "expr temp" "maybe param" "maybe type" "temp"
    (650057 'move' call_tmp[650054](424299 call _cond_invalid tmp[424286]))
    if call_tmp[650054]
    {
      (424302 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564477] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564478] "maybe param" "temp"
    unknown call_tmp[650059] "expr temp" "maybe param" "maybe type" "temp"
    (650062 'move' call_tmp[650059](424287 call isTrue tmp[424286]))
    (564483 'move' tmp[564478](564481 call _cond_test call_tmp[650059]))
    if tmp[564478]
    {
      (564488 'move' tmp[564477](564485 '_paramFoldLogical' tmp[564478] 1))
    }
    {
      unknown tmp[564490] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564492 'move' tmp[564490](424291 call isTrue isReindex[116963]))
      (564497 'move' tmp[564477](564494 '_paramFoldLogical' tmp[564478] tmp[564490]))
    }
    (516167 'move' ret[516162](516166 'deref' tmp[564477]))
    (516164 return ret[516162])
  }
  function chpl__getActualArray[116982](arg arr[116980]:_any[178](?)) : _unknown[51]
  {
    unknown ret[516171] "RVV" "temp"
    unknown value[116996] "dead at end of block" "insert auto destroy"
    unknown tmp[564504] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564505] "maybe param" "temp"
    unknown call_tmp[650064] "expr temp" "maybe param" "maybe type" "temp"
    (650067 'move' call_tmp[650064](116987 call isArray arr[116980]))
    (564510 'move' tmp[564505](564508 call _cond_test call_tmp[650064]))
    if tmp[564505]
    {
      unknown tmp[564512] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564514 'move' tmp[564512](116989 call _value _mt[243] arr[116980]))
      (564519 'move' tmp[564504](564516 '_paramFoldLogical' tmp[564505] tmp[564512]))
    }
    {
      (564524 'move' tmp[564504](564521 '_paramFoldLogical' tmp[564505] arr[116980]))
    }
    (542890 'init var' value[116996] tmp[564504])
    (116999 'end of statement')
    unknown ret[117017] "dead at end of block" "insert auto destroy"
    unknown tmp[564531] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564532] "maybe param" "temp"
    unknown call_tmp[650071] "expr temp" "maybe param" "maybe type" "temp"
    (650074 'move' call_tmp[650071](117004 call chpl__isArrayView value[116996]))
    (564537 'move' tmp[564532](564535 call _cond_test call_tmp[650071]))
    if tmp[564532]
    {
      unknown tmp[564539] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564541 'move' tmp[564539](117012 call(117008 call (partial) _getActualArray _mt[243] value[116996])))
      (564546 'move' tmp[564531](564543 '_paramFoldLogical' tmp[564532] tmp[564539]))
    }
    {
      (564551 'move' tmp[564531](564548 '_paramFoldLogical' tmp[564532] value[116996]))
    }
    (542892 'init var' ret[117017] tmp[564531])
    (117020 'end of statement' value[116996] value[116996] value[116996])
    (516176 'move' ret[516171](516175 'deref' ret[117017]))
    gotoReturn _end_chpl__getActualArray[516169] _end_chpl__getActualArray[516169]
    (479476 'end of statement' ret[117017])
    label _end_chpl__getActualArray[516169]
    (516173 return ret[516171])
  }
  function chpl__isDROrDRView[117030](arg arg[117028]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516182] "RVV" "param" "temp"
    unknown tmp[424433] "maybe param" "temp"
    (424444 'move' tmp[424433](117035 call isDomain arg[117028]))
    unknown call_tmp[650078] "expr temp" "maybe param" "maybe type" "temp"
    (650081 'move' call_tmp[650078](424446 call _cond_invalid tmp[424433]))
    if call_tmp[650078]
    {
      (424449 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564558] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564559] "maybe param" "temp"
    unknown call_tmp[650083] "expr temp" "maybe param" "maybe type" "temp"
    (650086 'move' call_tmp[650083](424434 call isTrue tmp[424433]))
    (564564 'move' tmp[564559](564562 call _cond_test call_tmp[650083]))
    if tmp[564559]
    {
      (564569 'move' tmp[564558](564566 '_paramFoldLogical' tmp[564559] 1))
    }
    {
      unknown tmp[564571] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650088] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (650091 'move' call_tmp[650088](117038 'typeof' arg[117028]))
      unknown call_tmp[650093] "expr temp" "maybe param" "maybe type" "temp"
      (650096 'move' call_tmp[650093](354397 'is_subtype' BaseDom[372854](?) call_tmp[650088]))
      (564573 'move' tmp[564571](424438 call isTrue call_tmp[650093]))
      (564578 'move' tmp[564558](564575 '_paramFoldLogical' tmp[564559] tmp[564571]))
    }
    unknown call_tmp[650098] "expr temp" "maybe param" "maybe type" "temp"
    (650101 'move' call_tmp[650098](117186 call _cond_test tmp[564558]))
    if call_tmp[650098]
    {
      const value[117056] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[564585] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564586] "maybe param" "temp"
      unknown call_tmp[650103] "expr temp" "maybe param" "maybe type" "temp"
      (650106 'move' call_tmp[650103](117047 call isDomain arg[117028]))
      (564591 'move' tmp[564586](564589 call _cond_test call_tmp[650103]))
      if tmp[564586]
      {
        unknown tmp[564593] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564595 'move' tmp[564593](117049 call _value _mt[243] arg[117028]))
        (564600 'move' tmp[564585](564597 '_paramFoldLogical' tmp[564586] tmp[564593]))
      }
      {
        (564605 'move' tmp[564585](564602 '_paramFoldLogical' tmp[564586] arg[117028]))
      }
      (542894 'init var' value[117056] tmp[564585])
      (117059 'end of statement')
      unknown call_tmp[650112] "maybe param" "maybe type" "temp"
      (650115 'move' call_tmp[650112](117066 call(117062 call (partial) isDefaultRectangular _mt[243] value[117056])))
      unknown isDR[117067] "dead at end of block" "param"
      (542896 'init var' isDR[117067] call_tmp[650112])
      (117070 'end of statement')
      unknown tmp[424328] "maybe param" "temp"
      (424339 'move' tmp[424328](117074 call chpl__isDomainView value[117056]))
      unknown call_tmp[650117] "expr temp" "maybe param" "maybe type" "temp"
      (650120 'move' call_tmp[650117](424341 call _cond_invalid tmp[424328]))
      if call_tmp[650117]
      {
        (424344 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown isDRView[117086] "dead at end of block" "param"
      unknown tmp[564612] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564613] "maybe param" "temp"
      unknown call_tmp[650122] "expr temp" "maybe param" "maybe type" "temp"
      (650125 'move' call_tmp[650122](424329 call isTrue tmp[424328]))
      (564618 'move' tmp[564613](564616 call _cond_test call_tmp[650122]))
      if tmp[564613]
      {
        unknown tmp[564620] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[650127] "expr temp" "maybe param" "maybe type" "temp"
        (650130 'move' call_tmp[650127](117078 call chpl__getActualDomain value[117056]))
        unknown call_tmp[650134] "expr temp" "maybe param" "maybe type" "temp"
        (650137 'move' call_tmp[650134](117083 call(117079 call (partial) isDefaultRectangular _mt[243] call_tmp[650127])))
        (564622 'move' tmp[564620](424332 call isTrue call_tmp[650134]))
        (564627 'move' tmp[564612](564624 '_paramFoldLogical' tmp[564613] tmp[564620]))
      }
      {
        (564632 'move' tmp[564612](564629 '_paramFoldLogical' tmp[564613] 0))
      }
      (542898 'init var' isDRView[117086] tmp[564612])
      (117089 'end of statement' value[117056] value[117056])
      unknown tmp[424349] "maybe param" "temp"
      (424360 'move' tmp[424349] isDR[117067])
      unknown call_tmp[650139] "expr temp" "maybe param" "maybe type" "temp"
      (650142 'move' call_tmp[650139](424362 call _cond_invalid tmp[424349]))
      if call_tmp[650139]
      {
        (424365 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564639] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564640] "maybe param" "temp"
      unknown call_tmp[650144] "expr temp" "maybe param" "maybe type" "temp"
      (650147 'move' call_tmp[650144](424350 call isTrue tmp[424349]))
      (564645 'move' tmp[564640](564643 call _cond_test call_tmp[650144]))
      if tmp[564640]
      {
        (564650 'move' tmp[564639](564647 '_paramFoldLogical' tmp[564640] 1))
      }
      {
        unknown tmp[564652] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564654 'move' tmp[564652](424354 call isTrue isDRView[117086]))
        (564659 'move' tmp[564639](564656 '_paramFoldLogical' tmp[564640] tmp[564652]))
      }
      (516187 'move' ret[516182](516186 'deref' tmp[564639]))
      gotoReturn _end_chpl__isDROrDRView[516180] _end_chpl__isDROrDRView[516180]
    }
    {
      unknown tmp[424412] "maybe param" "temp"
      (424423 'move' tmp[424412](117099 call isArray arg[117028]))
      unknown call_tmp[650149] "expr temp" "maybe param" "maybe type" "temp"
      (650152 'move' call_tmp[650149](424425 call _cond_invalid tmp[424412]))
      if call_tmp[650149]
      {
        (424428 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564666] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564667] "maybe param" "temp"
      unknown call_tmp[650154] "expr temp" "maybe param" "maybe type" "temp"
      (650157 'move' call_tmp[650154](424413 call isTrue tmp[424412]))
      (564672 'move' tmp[564667](564670 call _cond_test call_tmp[650154]))
      if tmp[564667]
      {
        (564677 'move' tmp[564666](564674 '_paramFoldLogical' tmp[564667] 1))
      }
      {
        unknown tmp[564679] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[650159] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (650162 'move' call_tmp[650159](117102 'typeof' arg[117028]))
        unknown call_tmp[650164] "expr temp" "maybe param" "maybe type" "temp"
        (650167 'move' call_tmp[650164](354398 'is_subtype' BaseArr[382431](?) call_tmp[650159]))
        (564681 'move' tmp[564679](424417 call isTrue call_tmp[650164]))
        (564686 'move' tmp[564666](564683 '_paramFoldLogical' tmp[564667] tmp[564679]))
      }
      unknown call_tmp[650169] "expr temp" "maybe param" "maybe type" "temp"
      (650172 'move' call_tmp[650169](117182 call _cond_test tmp[564666]))
      if call_tmp[650169]
      {
        const value[117120] "dead at end of block" "const" "insert auto destroy"
        unknown tmp[564693] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564694] "maybe param" "temp"
        unknown call_tmp[650174] "expr temp" "maybe param" "maybe type" "temp"
        (650177 'move' call_tmp[650174](117111 call isArray arg[117028]))
        (564699 'move' tmp[564694](564697 call _cond_test call_tmp[650174]))
        if tmp[564694]
        {
          unknown tmp[564701] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564703 'move' tmp[564701](117113 call _value _mt[243] arg[117028]))
          (564708 'move' tmp[564693](564705 '_paramFoldLogical' tmp[564694] tmp[564701]))
        }
        {
          (564713 'move' tmp[564693](564710 '_paramFoldLogical' tmp[564694] arg[117028]))
        }
        (542900 'init var' value[117120] tmp[564693])
        (117123 'end of statement')
        unknown call_tmp[650183] "maybe param" "maybe type" "temp"
        (650186 'move' call_tmp[650183](117130 call(117126 call (partial) isDefaultRectangular _mt[243] value[117120])))
        unknown isDR[117131] "dead at end of block" "param"
        (542902 'init var' isDR[117131] call_tmp[650183])
        (117134 'end of statement')
        unknown tmp[424370] "maybe param" "temp"
        (424381 'move' tmp[424370](117138 call chpl__isArrayView value[117120]))
        unknown call_tmp[650188] "expr temp" "maybe param" "maybe type" "temp"
        (650191 'move' call_tmp[650188](424383 call _cond_invalid tmp[424370]))
        if call_tmp[650188]
        {
          (424386 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown isDRView[117150] "dead at end of block" "param"
        unknown tmp[564720] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564721] "maybe param" "temp"
        unknown call_tmp[650193] "expr temp" "maybe param" "maybe type" "temp"
        (650196 'move' call_tmp[650193](424371 call isTrue tmp[424370]))
        (564726 'move' tmp[564721](564724 call _cond_test call_tmp[650193]))
        if tmp[564721]
        {
          unknown tmp[564728] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[650198] "expr temp" "maybe param" "maybe type" "temp"
          (650201 'move' call_tmp[650198](117142 call chpl__getActualArray value[117120]))
          unknown call_tmp[650205] "expr temp" "maybe param" "maybe type" "temp"
          (650208 'move' call_tmp[650205](117147 call(117143 call (partial) isDefaultRectangular _mt[243] call_tmp[650198])))
          (564730 'move' tmp[564728](424374 call isTrue call_tmp[650205]))
          (564735 'move' tmp[564720](564732 '_paramFoldLogical' tmp[564721] tmp[564728]))
        }
        {
          (564740 'move' tmp[564720](564737 '_paramFoldLogical' tmp[564721] 0))
        }
        (542904 'init var' isDRView[117150] tmp[564720])
        (117153 'end of statement' value[117120] value[117120])
        unknown tmp[424391] "maybe param" "temp"
        (424402 'move' tmp[424391] isDR[117131])
        unknown call_tmp[650210] "expr temp" "maybe param" "maybe type" "temp"
        (650213 'move' call_tmp[650210](424404 call _cond_invalid tmp[424391]))
        if call_tmp[650210]
        {
          (424407 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[564747] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564748] "maybe param" "temp"
        unknown call_tmp[650215] "expr temp" "maybe param" "maybe type" "temp"
        (650218 'move' call_tmp[650215](424392 call isTrue tmp[424391]))
        (564753 'move' tmp[564748](564751 call _cond_test call_tmp[650215]))
        if tmp[564748]
        {
          (564758 'move' tmp[564747](564755 '_paramFoldLogical' tmp[564748] 1))
        }
        {
          unknown tmp[564760] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564762 'move' tmp[564760](424396 call isTrue isDRView[117150]))
          (564767 'move' tmp[564747](564764 '_paramFoldLogical' tmp[564748] tmp[564760]))
        }
        (516192 'move' ret[516182](516191 'deref' tmp[564747]))
        gotoReturn _end_chpl__isDROrDRView[516180] _end_chpl__isDROrDRView[516180]
      }
      {
        (117179 call compilerError "Invalid argument for chpl__isDROrDRView")
      }
    }
    label _end_chpl__isDROrDRView[516180]
    (516184 return ret[516182])
  }
  function chpl__isDomainView[117198](arg dom[117196]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516198] "RVV" "param" "temp"
    const value[117212] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564774] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564775] "maybe param" "temp"
    unknown call_tmp[650220] "expr temp" "maybe param" "maybe type" "temp"
    (650223 'move' call_tmp[650220](117203 call isDomain dom[117196]))
    (564780 'move' tmp[564775](564778 call _cond_test call_tmp[650220]))
    if tmp[564775]
    {
      unknown tmp[564782] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564784 'move' tmp[564782](117205 call _value _mt[243] dom[117196]))
      (564789 'move' tmp[564774](564786 '_paramFoldLogical' tmp[564775] tmp[564782]))
    }
    {
      (564794 'move' tmp[564774](564791 '_paramFoldLogical' tmp[564775] dom[117196]))
    }
    (542906 'init var' value[117212] tmp[564774])
    (117215 'end of statement')
    unknown call_tmp[650229] "maybe param" "maybe type" "temp"
    (650232 'move' call_tmp[650229](117224 call(117220 call (partial) isSliceDomainView _mt[243] value[117212])))
    unknown isSlice[117225] "dead at end of block" "param"
    (542908 'init var' isSlice[117225] call_tmp[650229])
    (117228 'end of statement')
    unknown call_tmp[650236] "maybe param" "maybe type" "temp"
    (650239 'move' call_tmp[650236](117236 call(117232 call (partial) isRankChangeDomainView _mt[243] value[117212])))
    unknown isRankChange[117237] "dead at end of block" "param"
    (542910 'init var' isRankChange[117237] call_tmp[650236])
    (117240 'end of statement')
    unknown call_tmp[650243] "maybe param" "maybe type" "temp"
    (650246 'move' call_tmp[650243](117248 call(117244 call (partial) isReindexDomainView _mt[243] value[117212])))
    unknown isReindex[117249] "dead at end of block" "param"
    (542912 'init var' isReindex[117249] call_tmp[650243])
    (117252 'end of statement' value[117212] value[117212] value[117212])
    unknown tmp[424454] "maybe param" "temp"
    unknown tmp[424475] "maybe param" "temp"
    (424486 'move' tmp[424475] isSlice[117225])
    unknown call_tmp[650248] "expr temp" "maybe param" "maybe type" "temp"
    (650251 'move' call_tmp[650248](424488 call _cond_invalid tmp[424475]))
    if call_tmp[650248]
    {
      (424491 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564801] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564802] "maybe param" "temp"
    unknown call_tmp[650253] "expr temp" "maybe param" "maybe type" "temp"
    (650256 'move' call_tmp[650253](424476 call isTrue tmp[424475]))
    (564807 'move' tmp[564802](564805 call _cond_test call_tmp[650253]))
    if tmp[564802]
    {
      (564812 'move' tmp[564801](564809 '_paramFoldLogical' tmp[564802] 1))
    }
    {
      unknown tmp[564814] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564816 'move' tmp[564814](424480 call isTrue isRankChange[117237]))
      (564821 'move' tmp[564801](564818 '_paramFoldLogical' tmp[564802] tmp[564814]))
    }
    (424465 'move' tmp[424454] tmp[564801])
    unknown call_tmp[650258] "expr temp" "maybe param" "maybe type" "temp"
    (650261 'move' call_tmp[650258](424467 call _cond_invalid tmp[424454]))
    if call_tmp[650258]
    {
      (424470 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564828] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564829] "maybe param" "temp"
    unknown call_tmp[650263] "expr temp" "maybe param" "maybe type" "temp"
    (650266 'move' call_tmp[650263](424455 call isTrue tmp[424454]))
    (564834 'move' tmp[564829](564832 call _cond_test call_tmp[650263]))
    if tmp[564829]
    {
      (564839 'move' tmp[564828](564836 '_paramFoldLogical' tmp[564829] 1))
    }
    {
      unknown tmp[564841] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564843 'move' tmp[564841](424459 call isTrue isReindex[117249]))
      (564848 'move' tmp[564828](564845 '_paramFoldLogical' tmp[564829] tmp[564841]))
    }
    (516203 'move' ret[516198](516202 'deref' tmp[564828]))
    (516200 return ret[516198])
  }
  function chpl__getActualDomain[117268](arg dom[117266]:_any[178](?)) : _unknown[51]
  {
    unknown ret[516207] "RVV" "temp"
    unknown value[117282] "dead at end of block" "insert auto destroy"
    unknown tmp[564855] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564856] "maybe param" "temp"
    unknown call_tmp[650268] "expr temp" "maybe param" "maybe type" "temp"
    (650271 'move' call_tmp[650268](117273 call isDomain dom[117266]))
    (564861 'move' tmp[564856](564859 call _cond_test call_tmp[650268]))
    if tmp[564856]
    {
      unknown tmp[564863] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564865 'move' tmp[564863](117275 call _value _mt[243] dom[117266]))
      (564870 'move' tmp[564855](564867 '_paramFoldLogical' tmp[564856] tmp[564863]))
    }
    {
      (564875 'move' tmp[564855](564872 '_paramFoldLogical' tmp[564856] dom[117266]))
    }
    (542914 'init var' value[117282] tmp[564855])
    (117285 'end of statement')
    unknown ret[117303] "dead at end of block" "insert auto destroy"
    unknown tmp[564882] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564883] "maybe param" "temp"
    unknown call_tmp[650275] "expr temp" "maybe param" "maybe type" "temp"
    (650278 'move' call_tmp[650275](117290 call chpl__isDomainView value[117282]))
    (564888 'move' tmp[564883](564886 call _cond_test call_tmp[650275]))
    if tmp[564883]
    {
      unknown tmp[564890] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564892 'move' tmp[564890](117298 call(117294 call (partial) _getActualDomain _mt[243] value[117282])))
      (564897 'move' tmp[564882](564894 '_paramFoldLogical' tmp[564883] tmp[564890]))
    }
    {
      (564902 'move' tmp[564882](564899 '_paramFoldLogical' tmp[564883] value[117282]))
    }
    (542916 'init var' ret[117303] tmp[564882])
    (117306 'end of statement' value[117282] value[117282] value[117282])
    (516212 'move' ret[516207](516211 'deref' ret[117303]))
    gotoReturn _end_chpl__getActualDomain[516205] _end_chpl__getActualDomain[516205]
    (479500 'end of statement' ret[117303])
    label _end_chpl__getActualDomain[516205]
    (516209 return ret[516207])
  }
  function chpl__isRectangularDomType[117316](arg domainType[117314]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516218] "RVV" "param" "temp"
    unknown dom[117319] "dead at end of block" "insert auto destroy"
    (542918 'default init var' dom[117319] domainType[117314])
    (117322 'end of statement')
    unknown tmp[424496] "maybe param" "temp"
    (424507 'move' tmp[424496](117327 call isDomainType domainType[117314]))
    unknown call_tmp[650282] "expr temp" "maybe param" "maybe type" "temp"
    (650285 'move' call_tmp[650282](424509 call _cond_invalid tmp[424496]))
    if call_tmp[650282]
    {
      (424512 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564909] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564910] "maybe param" "temp"
    unknown call_tmp[650287] "expr temp" "maybe param" "maybe type" "temp"
    (650290 'move' call_tmp[650287](424497 call isTrue tmp[424496]))
    (564915 'move' tmp[564910](564913 call _cond_test call_tmp[650287]))
    if tmp[564910]
    {
      unknown tmp[564917] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650292] "expr temp" "maybe param" "maybe type" "temp"
      (650295 'move' call_tmp[650292](117331 call isRectangularDom dom[117319]))
      (564919 'move' tmp[564917](424500 call isTrue call_tmp[650292]))
      (564924 'move' tmp[564909](564921 '_paramFoldLogical' tmp[564910] tmp[564917]))
    }
    {
      (564929 'move' tmp[564909](564926 '_paramFoldLogical' tmp[564910] 0))
    }
    (516223 'move' ret[516218](516222 'deref' tmp[564909]))
    gotoReturn _end_chpl__isRectangularDomType[516216] _end_chpl__isRectangularDomType[516216]
    (479503 'end of statement' dom[117319])
    label _end_chpl__isRectangularDomType[516216]
    (516220 return ret[516218])
  }
  function chpl__isSparseDomType[117342](arg domainType[117340]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516229] "RVV" "param" "temp"
    unknown dom[117345] "dead at end of block" "insert auto destroy"
    (542920 'default init var' dom[117345] domainType[117340])
    (117348 'end of statement')
    unknown call_tmp[650297] "expr temp" "maybe param" "maybe type" "temp"
    (650300 'move' call_tmp[650297](117353 call isSparseDom dom[117345]))
    (516234 'move' ret[516229](516233 'deref' call_tmp[650297]))
    gotoReturn _end_chpl__isSparseDomType[516227] _end_chpl__isSparseDomType[516227]
    (479505 'end of statement' dom[117345])
    label _end_chpl__isSparseDomType[516227]
    (516231 return ret[516229])
  }
  function chpl__parentDomainFromDomainRuntimeType[117362](arg domainType[117360]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516240] "RVV" "temp"
    unknown call_tmp[650302] "maybe param" "maybe type" "temp"
    (650305 'move' call_tmp[650302](117398 'get runtime type field' domainType[117360] "parentDom"))
    unknown parentDom[117399] "dead at end of block" "no auto destroy" "no copy"
    (542922 'init var' parentDom[117399] call_tmp[650302])
    (117402 'end of statement')
    unknown call_tmp[650309] "expr temp" "maybe param" "maybe type" "temp"
    (650312 'move' call_tmp[650309](117406 call _value _mt[243] parentDom[117399]))
    unknown call_tmp[650314] "expr temp" "maybe param" "maybe type" "temp"
    (650317 'move' call_tmp[650314](117410 call _getDomain call_tmp[650309]))
    (516245 'move' ret[516240](516244 'deref' call_tmp[650314]))
    gotoReturn _end_chpl__parentDomainFromDomainRuntimeType[516238] _end_chpl__parentDomainFromDomainRuntimeType[516238]
    (479507 'end of statement' parentDom[117399])
    label _end_chpl__parentDomainFromDomainRuntimeType[516238]
    (516242 return ret[516240])
  }
  function chpl__distributed[117421](arg d[117418]:_distribution[118973](?), arg domainType[117423]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516251] "RVV" "temp" "type variable"
    unknown call_tmp[650319] "expr temp" "maybe param" "maybe type" "temp"
    (650322 'move' call_tmp[650319](117428 call isDomainType domainType[117423]))
    unknown call_tmp[650324] "expr temp" "maybe param" "maybe type" "temp"
    (650327 'move' call_tmp[650324](117429 call ! call_tmp[650319]))
    unknown call_tmp[650329] "expr temp" "maybe param" "maybe type" "temp"
    (650332 'move' call_tmp[650329](117456 call _cond_test call_tmp[650324]))
    if call_tmp[650329]
    {
      unknown call_tmp[650334] "expr temp" "maybe param" "maybe type" "temp"
      (650337 'move' call_tmp[650334](117452 call _cast string[26] domainType[117423]))
      (117454 call compilerError "cannot apply 'dmapped' to the non-domain type " call_tmp[650334])
    }
    unknown call_tmp[650339] "expr temp" "maybe param" "maybe type" "temp"
    (650342 'move' call_tmp[650339](117465 call chpl__isRectangularDomType domainType[117423]))
    unknown call_tmp[650344] "expr temp" "maybe param" "maybe type" "temp"
    (650347 'move' call_tmp[650344](117549 call _cond_test call_tmp[650339]))
    if call_tmp[650344]
    {
      unknown dom[117467] "dead at end of block" "insert auto destroy"
      (542924 'default init var' dom[117467] domainType[117423])
      (117470 'end of statement')
      unknown call_tmp[650351] "expr temp" "maybe param" "maybe type" "temp"
      (650354 'move' call_tmp[650351](117476 call _value _mt[243] dom[117467]))
      unknown call_tmp[650358] "expr temp" "maybe param" "maybe type" "temp"
      (650361 'move' call_tmp[650358](117479 call rank _mt[243] call_tmp[650351]))
      unknown call_tmp[650365] "expr temp" "maybe param" "maybe type" "temp"
      (650368 'move' call_tmp[650365](117483 call _value _mt[243] dom[117467]))
      unknown call_tmp[650372] "expr temp" "maybe param" "maybe type" "temp"
      (650375 'move' call_tmp[650372](117486 call idxType _mt[243] call_tmp[650365]))
      unknown call_tmp[650379] "expr temp" "maybe param" "maybe type" "temp"
      (650382 'move' call_tmp[650379](117490 call _value _mt[243] dom[117467]))
      unknown call_tmp[650386] "expr temp" "maybe param" "maybe type" "temp"
      (650389 'move' call_tmp[650386](117493 call stridable _mt[243] call_tmp[650379]))
      unknown call_tmp[650391] "expr temp" "maybe param" "maybe type" "temp"
      (650394 'move' call_tmp[650391](117496 call chpl__buildDomainRuntimeType d[117418] call_tmp[650358] call_tmp[650372] call_tmp[650386]))
      (516256 'move' ret[516251](516255 'deref' call_tmp[650391]))
      gotoReturn _end_chpl__distributed[516249] _end_chpl__distributed[516249]
      (479510 'end of statement' dom[117467] dom[117467] dom[117467])
    }
    {
      unknown call_tmp[650396] "expr temp" "maybe param" "maybe type" "temp"
      (650399 'move' call_tmp[650396](117502 call chpl__isSparseDomType domainType[117423]))
      unknown call_tmp[650401] "expr temp" "maybe param" "maybe type" "temp"
      (650404 'move' call_tmp[650401](117545 call _cond_test call_tmp[650396]))
      if call_tmp[650401]
      {
        const parentDom[117507] "dead at end of block" "const" "ref var"
        unknown call_tmp[650406] "expr temp" "maybe param" "maybe type" "temp"
        (650409 'move' call_tmp[650406](117506 call chpl__parentDomainFromDomainRuntimeType domainType[117423]))
        (542927 'move' parentDom[117507](542926 'addr of' call_tmp[650406]))
        (117510 'end of statement')
        unknown call_tmp[650411] "expr temp" "maybe param" "maybe type" "temp"
        (650414 'move' call_tmp[650411](117516 call chpl__buildSparseDomainRuntimeType d[117418] parentDom[117507]))
        (516261 'move' ret[516251](516260 'deref' call_tmp[650411]))
        gotoReturn _end_chpl__distributed[516249] _end_chpl__distributed[516249]
        (479514 'end of statement' parentDom[117507])
      }
      {
        unknown dom[117520] "dead at end of block" "insert auto destroy"
        (542929 'default init var' dom[117520] domainType[117423])
        (117523 'end of statement')
        unknown call_tmp[650418] "expr temp" "maybe param" "maybe type" "temp"
        (650421 'move' call_tmp[650418](117529 call _value _mt[243] dom[117520]))
        unknown call_tmp[650425] "expr temp" "maybe param" "maybe type" "temp"
        (650428 'move' call_tmp[650425](117532 call idxType _mt[243] call_tmp[650418]))
        unknown call_tmp[650432] "expr temp" "maybe param" "maybe type" "temp"
        (650435 'move' call_tmp[650432](117536 call _value _mt[243] dom[117520]))
        unknown call_tmp[650439] "expr temp" "maybe param" "maybe type" "temp"
        (650442 'move' call_tmp[650439](117539 call parSafe _mt[243] call_tmp[650432]))
        unknown call_tmp[650444] "expr temp" "maybe param" "maybe type" "temp"
        (650447 'move' call_tmp[650444](117542 call chpl__buildDomainRuntimeType d[117418] call_tmp[650425] call_tmp[650439]))
        (516266 'move' ret[516251](516265 'deref' call_tmp[650444]))
        gotoReturn _end_chpl__distributed[516249] _end_chpl__distributed[516249]
        (479516 'end of statement' dom[117520] dom[117520])
      }
    }
    label _end_chpl__distributed[516249]
    (516253 return ret[516251])
  }
  function chpl__distributionFromDomainRuntimeType[117560](arg rtt[117558]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516272] "RVV" "temp"
    unknown call_tmp[650449] "maybe param" "maybe type" "temp"
    (650452 'move' call_tmp[650449](117580 'get runtime type field' rtt[117558] "dist"))
    unknown dist[117581] "dead at end of block" "no auto destroy" "no copy"
    (542931 'init var' dist[117581] call_tmp[650449])
    (117584 'end of statement')
    unknown call_tmp[650456] "expr temp" "maybe param" "maybe type" "temp"
    (650459 'move' call_tmp[650456](117588 call _value _mt[243] dist[117581]))
    unknown call_tmp[650461] "expr temp" "maybe param" "maybe type" "temp"
    (650464 'move' call_tmp[650461](117592 call _getDistribution call_tmp[650456]))
    (516277 'move' ret[516272](516276 'deref' call_tmp[650461]))
    gotoReturn _end_chpl__distributionFromDomainRuntimeType[516270] _end_chpl__distributionFromDomainRuntimeType[516270]
    (479519 'end of statement' dist[117581])
    label _end_chpl__distributionFromDomainRuntimeType[516270]
    (516274 return ret[516272])
  }
  function chpl__domainFromArrayRuntimeType[117601](arg rtt[117599]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516283] "RVV" "temp"
    unknown call_tmp[650466] "maybe param" "maybe type" "temp"
    (650469 'move' call_tmp[650466](117607 'get runtime type field' rtt[117599] "dom"))
    unknown dom[117608] "dead at end of block" "no auto destroy" "no copy"
    (542933 'init var' dom[117608] call_tmp[650466])
    (117611 'end of statement')
    unknown call_tmp[650473] "expr temp" "maybe param" "maybe type" "temp"
    (650476 'move' call_tmp[650473](117615 call _value _mt[243] dom[117608]))
    unknown call_tmp[650478] "expr temp" "maybe param" "maybe type" "temp"
    (650481 'move' call_tmp[650478](117619 call _getDomain call_tmp[650473]))
    (516288 'move' ret[516283](516287 'deref' call_tmp[650478]))
    gotoReturn _end_chpl__domainFromArrayRuntimeType[516281] _end_chpl__domainFromArrayRuntimeType[516281]
    (479521 'end of statement' dom[117608])
    label _end_chpl__domainFromArrayRuntimeType[516281]
    (516285 return ret[516283])
  }
  function chpl__eltTypeFromArrayRuntimeType[117628](arg rtt[117626]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516294] "RVV" "temp" "type variable"
    unknown eltType[117649] "dead at end of block" "no auto destroy" "no copy" "type variable"(117648 'get runtime type field' rtt[117626] "eltType")
    (542938 'move' eltType[117649](542935 'get runtime type field' rtt[117626] "eltType"))
    (479523 'end of statement')
    (516299 'move' ret[516294](516298 'deref' eltType[117649]))
    gotoReturn _end_chpl__eltTypeFromArrayRuntimeType[516292] _end_chpl__eltTypeFromArrayRuntimeType[516292]
    (479524 'end of statement' eltType[117649])
    label _end_chpl__eltTypeFromArrayRuntimeType[516292]
    (516296 return ret[516294])
  }
  function chpl__instanceTypeFromArrayRuntimeType[117662](arg rtt[117660]:_any[178](?)) type : _unknown[51] "ignore runtime type"
  {
    unknown ret[516305] "RVV" "temp" "type variable"
    (117699 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (479526 'end of statement')
    unknown call_tmp[650483] "expr temp" "maybe param" "maybe type" "temp"
    (650486 'move' call_tmp[650483](117706 'static field type' rtt[117660] "_instance"))
    (516310 'move' ret[516305](516309 'deref' call_tmp[650483]))
    (516307 return ret[516305])
  }
  function chpl__buildIndexType[117717](param arg rank[117714]:int(64)[13], arg idxType[117719]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516314] "RVV" "temp" "type variable"
    (516319 'move' ret[516314](516318 'deref' idxType[117719]))
    (516316 return ret[516314])
  }
  where {
    (117723 call == rank[117714] 1)
  }
  function chpl__buildIndexType[117738](param arg rank[117735]:int(64)[13], arg idxType[117740]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516323] "RVV" "temp" "type variable"
    unknown call_tmp[650488] "expr temp" "maybe param" "maybe type" "temp"
    (650491 'move' call_tmp[650488](117748 call * rank[117735] idxType[117740]))
    (516328 'move' ret[516323](516327 'deref' call_tmp[650488]))
    (516325 return ret[516323])
  }
  where {
    (117744 call > rank[117735] 1)
  }
  function chpl__buildIndexType[117762](param arg rank[117759]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[516332] "RVV" "temp" "type variable"
    unknown call_tmp[650493] "expr temp" "maybe param" "maybe type" "temp"
    (650496 'move' call_tmp[650493](117768 call chpl__buildIndexType rank[117759] int(64)[13]))
    (516337 'move' ret[516332](516336 'deref' call_tmp[650493]))
    (516334 return ret[516332])
  }
  function chpl__buildIndexType[117780](arg d[117777]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[516341] "RVV" "temp" "type variable"
    unknown call_tmp[650500] "expr temp" "maybe param" "maybe type" "temp"
    (650503 'move' call_tmp[650500](117784 call rank _mt[243] d[117777]))
    unknown call_tmp[650507] "expr temp" "maybe param" "maybe type" "temp"
    (650510 'move' call_tmp[650507](117789 call _value _mt[243] d[117777]))
    unknown call_tmp[650514] "expr temp" "maybe param" "maybe type" "temp"
    (650517 'move' call_tmp[650514](117792 call idxType _mt[243] call_tmp[650507]))
    unknown call_tmp[650519] "expr temp" "maybe param" "maybe type" "temp"
    (650522 'move' call_tmp[650519](117795 call chpl__buildIndexType call_tmp[650500] call_tmp[650514]))
    (516346 'move' ret[516341](516345 'deref' call_tmp[650519]))
    (516343 return ret[516341])
  }
  function isRectangularDom[117807](arg d[117804]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516350] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[492233] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650526] "expr temp" "maybe param" "maybe type" "temp"
      (650529 'move' call_tmp[650526](117812 call _value _mt[243] d[117804]))
      (492237 'move' call_type_tmp[492233](117815 'typeof' call_tmp[650526]))
    }
    unknown call_tmp[650531] "expr temp" "maybe param" "maybe type" "temp"
    (650534 'move' call_tmp[650531](117817 call _to_borrowed call_type_tmp[492233]))
    unknown call_tmp[650536] "expr temp" "maybe param" "maybe type" "temp"
    (650539 'move' call_tmp[650536](354399 'is_subtype' BaseRectangularDom[382354](?) call_tmp[650531]))
    (516355 'move' ret[516350](516354 'deref' call_tmp[650536]))
    (516352 return ret[516350])
  }
  function isRectangularArr[117834](arg a[117831]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516359] "RVV" "param" "temp"
    unknown call_tmp[650543] "expr temp" "maybe param" "maybe type" "temp"
    (650546 'move' call_tmp[650543](117838 call _dom _mt[243] a[117831]))
    unknown call_tmp[650548] "expr temp" "maybe param" "maybe type" "temp"
    (650551 'move' call_tmp[650548](117842 call isRectangularDom call_tmp[650543]))
    (516364 'move' ret[516359](516363 'deref' call_tmp[650548]))
    (516361 return ret[516359])
  }
  function isIrregularDom[117854](arg d[117851]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516368] "RVV" "param" "temp"
    unknown tmp[424517] "maybe param" "temp"
    (424528 'move' tmp[424517](117859 call isSparseDom d[117851]))
    unknown call_tmp[650553] "expr temp" "maybe param" "maybe type" "temp"
    (650556 'move' call_tmp[650553](424530 call _cond_invalid tmp[424517]))
    if call_tmp[650553]
    {
      (424533 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564936] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564937] "maybe param" "temp"
    unknown call_tmp[650558] "expr temp" "maybe param" "maybe type" "temp"
    (650561 'move' call_tmp[650558](424518 call isTrue tmp[424517]))
    (564942 'move' tmp[564937](564940 call _cond_test call_tmp[650558]))
    if tmp[564937]
    {
      (564947 'move' tmp[564936](564944 '_paramFoldLogical' tmp[564937] 1))
    }
    {
      unknown tmp[564949] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650563] "expr temp" "maybe param" "maybe type" "temp"
      (650566 'move' call_tmp[650563](117863 call isAssociativeDom d[117851]))
      (564951 'move' tmp[564949](424522 call isTrue call_tmp[650563]))
      (564956 'move' tmp[564936](564953 '_paramFoldLogical' tmp[564937] tmp[564949]))
    }
    (516373 'move' ret[516368](516372 'deref' tmp[564936]))
    (516370 return ret[516368])
  }
  function isIrregularArr[117879](arg a[117876]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516377] "RVV" "param" "temp"
    unknown call_tmp[650570] "expr temp" "maybe param" "maybe type" "temp"
    (650573 'move' call_tmp[650570](117883 call _dom _mt[243] a[117876]))
    unknown call_tmp[650575] "expr temp" "maybe param" "maybe type" "temp"
    (650578 'move' call_tmp[650575](117887 call isIrregularDom call_tmp[650570]))
    (516382 'move' ret[516377](516381 'deref' call_tmp[650575]))
    (516379 return ret[516377])
  }
  function isAssociativeDom[117899](arg d[117896]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516404] "RVV" "param" "temp"
    function isAssociativeDomClass[117907](arg dc[117904]:BaseAssociativeDom[382359](?)) param : _unknown[51]
    {
      unknown ret[516386] "RVV" "param" "temp"
      (516391 'move' ret[516386](516390 'deref' 1))
      (516388 return ret[516386])
    }
    function isAssociativeDomClass[117920](arg dc[117918]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516395] "RVV" "param" "temp"
      (516400 'move' ret[516395](516399 'deref' 0))
      (516397 return ret[516395])
    }
    unknown call_tmp[650582] "expr temp" "maybe param" "maybe type" "temp"
    (650585 'move' call_tmp[650582](117931 call _value _mt[243] d[117896]))
    unknown call_tmp[650587] "expr temp" "maybe param" "maybe type" "temp"
    (650590 'move' call_tmp[650587](117935 call _to_borrowed call_tmp[650582]))
    unknown call_tmp[650592] "expr temp" "maybe param" "maybe type" "temp"
    (650595 'move' call_tmp[650592](117937 call isAssociativeDomClass call_tmp[650587]))
    (516409 'move' ret[516404](516408 'deref' call_tmp[650592]))
    (516406 return ret[516404])
  }
  function isAssociativeArr[117950](arg a[117947]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516413] "RVV" "param" "temp"
    unknown call_tmp[650599] "expr temp" "maybe param" "maybe type" "temp"
    (650602 'move' call_tmp[650599](117954 call _dom _mt[243] a[117947]))
    unknown call_tmp[650604] "expr temp" "maybe param" "maybe type" "temp"
    (650607 'move' call_tmp[650604](117958 call isAssociativeDom call_tmp[650599]))
    (516418 'move' ret[516413](516417 'deref' call_tmp[650604]))
    (516415 return ret[516413])
  }
  function isSparseDom[117970](arg d[117967]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516440] "RVV" "param" "temp"
    function isSparseDomClass[117978](arg dc[117975]:BaseSparseDom[382364](?)) param : _unknown[51]
    {
      unknown ret[516422] "RVV" "param" "temp"
      (516427 'move' ret[516422](516426 'deref' 1))
      (516424 return ret[516422])
    }
    function isSparseDomClass[117991](arg dc[117989]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516431] "RVV" "param" "temp"
      (516436 'move' ret[516431](516435 'deref' 0))
      (516433 return ret[516431])
    }
    unknown call_tmp[650611] "expr temp" "maybe param" "maybe type" "temp"
    (650614 'move' call_tmp[650611](118001 call _value _mt[243] d[117967]))
    unknown call_tmp[650616] "expr temp" "maybe param" "maybe type" "temp"
    (650619 'move' call_tmp[650616](118005 call isSparseDomClass call_tmp[650611]))
    (516445 'move' ret[516440](516444 'deref' call_tmp[650616]))
    (516442 return ret[516440])
  }
  function isSparseArr[118018](arg a[118015]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516449] "RVV" "param" "temp"
    unknown call_tmp[650623] "expr temp" "maybe param" "maybe type" "temp"
    (650626 'move' call_tmp[650623](118022 call _dom _mt[243] a[118015]))
    unknown call_tmp[650628] "expr temp" "maybe param" "maybe type" "temp"
    (650631 'move' call_tmp[650628](118026 call isSparseDom call_tmp[650623]))
    (516454 'move' ret[516449](516453 'deref' call_tmp[650628]))
    (516451 return ret[516449])
  }
  function chpl__checkDomainsMatch[118040](arg a[118037]:_array[133594](?), arg b[118042]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650633] "expr temp" "maybe param" "maybe type" "temp"
    (650636 'move' call_tmp[650633](118086 call _cond_test 1))
    if call_tmp[650633]
    {
      unknown call_tmp[650640] "expr temp" "maybe param" "maybe type" "temp"
      (650643 'move' call_tmp[650640](118050 call _dom _mt[243] a[118037]))
      unknown call_tmp[650645] "expr temp" "maybe param" "maybe type" "temp"
      (650648 'move' call_tmp[650645](118054 call != call_tmp[650640] b[118042]))
      unknown call_tmp[650650] "expr temp" "maybe param" "maybe type" "temp"
      (650653 'move' call_tmp[650650](118081 call _cond_test call_tmp[650645]))
      if call_tmp[650650]
      {
        (118078 call boundsCheckHalt module=[255] HaltWrappers[210085] "domain mismatch on return")
        (359237 'referenced modules list' HaltWrappers[210085])
      }
    }
    (516456 return _void[55])
    (355223 'used modules list'(118045 'import' HaltWrappers[210085]))
  }
  function chpl__checkDomainsMatch[118098](arg a[118095]:_iteratorRecord[205](?), arg b[118100]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650655] "expr temp" "maybe param" "maybe type" "temp"
    (650658 'move' call_tmp[650655](118133 call _cond_test 1))
    if call_tmp[650655]
    {
      unknown tmp[118108] "dead at end of block" "insert auto destroy"
      (542940 'init var' tmp[118108] a[118095])
      (118111 'end of statement')
      unknown call_tmp[650662] "expr temp" "maybe param" "maybe type" "temp"
      (650665 'move' call_tmp[650662](118114 call _dom _mt[243] tmp[118108]))
      unknown call_tmp[650667] "expr temp" "maybe param" "maybe type" "temp"
      (650670 'move' call_tmp[650667](118118 call != call_tmp[650662] b[118100]))
      unknown call_tmp[650672] "expr temp" "maybe param" "maybe type" "temp"
      (650675 'move' call_tmp[650672](118129 call _cond_test call_tmp[650667]))
      if call_tmp[650672]
      {
        (118126 call boundsCheckHalt module=[255] HaltWrappers[210085] "domain mismatch on return")
        (359244 'referenced modules list' HaltWrappers[210085])
      }
    }
    (516458 return _void[55])
    (355225 'used modules list'(118103 'import' HaltWrappers[210085]))
  }
  function chpl__checkEltTypeMatch[118147](arg a[118144]:_array[133594](?), arg b[118149]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650679] "expr temp" "maybe param" "maybe type" "temp"
    (650682 'move' call_tmp[650679](118152 call eltType _mt[243] a[118144]))
    unknown call_tmp[650684] "expr temp" "maybe param" "maybe type" "temp"
    (650687 'move' call_tmp[650684](118156 call != call_tmp[650679] b[118149]))
    unknown call_tmp[650689] "expr temp" "maybe param" "maybe type" "temp"
    (650692 'move' call_tmp[650689](118192 call _cond_test call_tmp[650684]))
    if call_tmp[650689]
    {
      unknown call_tmp[650696] "expr temp" "maybe param" "maybe type" "temp"
      (650699 'move' call_tmp[650696](118178 call eltType _mt[243] a[118144]))
      unknown call_tmp[650701] "expr temp" "maybe param" "maybe type" "temp"
      (650704 'move' call_tmp[650701](118182 call _cast string[26] call_tmp[650696]))
      unknown call_tmp[650706] "expr temp" "maybe param" "maybe type" "temp"
      (650709 'move' call_tmp[650706](118187 call _cast string[26] b[118149]))
      (118189 call compilerError "array element type mismatch in return from " call_tmp[650701] " to " call_tmp[650706])
    }
    (516460 return _void[55])
  }
  function chpl__checkEltTypeMatch[118205](arg a[118202]:_iteratorRecord[205](?), arg b[118207]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650711] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650714 'move' call_tmp[650711](118211 'typeof' a[118202]))
    unknown eltType[118214] "dead at end of block" "insert auto destroy" "type variable"(118213 call iteratorToArrayElementType call_tmp[650711])
    unknown call_tmp[650716] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650719 'move' call_tmp[650716](542944 'typeof' a[118202]))
    (542946 'move' eltType[118214](542943 call iteratorToArrayElementType call_tmp[650716]))
    (479548 'end of statement')
    unknown call_tmp[650721] "expr temp" "maybe param" "maybe type" "temp"
    (650724 'move' call_tmp[650721](118220 call != eltType[118214] b[118207]))
    unknown call_tmp[650726] "expr temp" "maybe param" "maybe type" "temp"
    (650729 'move' call_tmp[650726](118237 call _cond_test call_tmp[650721]))
    if call_tmp[650726]
    {
      unknown call_tmp[650731] "expr temp" "maybe param" "maybe type" "temp"
      (650734 'move' call_tmp[650731](118227 call _cast string[26] eltType[118214]))
      unknown call_tmp[650736] "expr temp" "maybe param" "maybe type" "temp"
      (650739 'move' call_tmp[650736](118232 call _cast string[26] b[118207]))
      (118234 call compilerError "array element type mismatch in return from " call_tmp[650731] " to " call_tmp[650736])
      (479549 'end of statement' eltType[118214])
    }
    (516462 return _void[55])
  }
  function dmap[118245].init[799238](arg _mt[799240]:_MT[238], ref arg this[799241]:dmap[118245]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (799245 return _void[55])
  }
  function dmap[118245].init=[799247](arg _mt[799250]:_MT[238], ref arg this[799251]:dmap[118245], arg other[799252]:dmap[118245]) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (799256 return _void[55])
  }
  function dmap[118245].deinit[799258](arg _mt[799260]:_MT[238], arg this[799262]:dmap[118245]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (799270 return _void[55])
  }
  function dmap[118245].writeThis[799272](arg _mt[799276]:_MT[238], arg this[799274]:dmap[118245], arg f[799275]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799281 call writeThisDefaultImpl f[799275] this[799274])
    (799286 return _void[55])
  }
  function dmap[118245].readThis[799288](arg _mt[799292]:_MT[238], arg this[799290]:dmap[118245], arg f[799291]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799296 call readThisDefaultImpl f[799291] this[799290])
    (799302 return _void[55])
  }
  function chpl_fields_are_comparable[799316](arg _arg1[799318]:dmap[118245], arg _arg2[799319]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799328]:bool[10] "RVV" "param" "temp"
    (799333 'move' ret[799328](799332 'deref' 1))
    (799330 return ret[799328])
  }
  function ==[799304](arg _arg1[799306]:dmap[118245], arg _arg2[799307]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799347]:bool[10] "RVV" "temp"
    (799352 'move' ret[799347](799351 'deref' 1))
    (799349 return ret[799347])
  }
  where {
    unknown call_tmp[799354] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799357 'move' call_tmp[799354](799310 'typeof' _arg1[799306]))
    unknown call_tmp[799359] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799362 'move' call_tmp[799359](799312 'typeof' _arg2[799307]))
    unknown call_tmp[799364] "expr temp" "maybe param" "maybe type" "temp"
    (799367 'move' call_tmp[799364](799314 call == call_tmp[799354] call_tmp[799359]))
    unknown call_tmp[799369] "expr temp" "maybe param" "maybe type" "temp"
    (799372 'move' call_tmp[799369](799335 call chpl_fields_are_comparable[799316] _arg1[799306] _arg2[799307]))
    (799339 '&' call_tmp[799364] call_tmp[799369])
  }
  function chpl_fields_are_comparable[799386](arg _arg1[799388]:dmap[118245], arg _arg2[799389]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799398]:bool[10] "RVV" "param" "temp"
    (799403 'move' ret[799398](799402 'deref' 1))
    (799400 return ret[799398])
  }
  function !=[799374](arg _arg1[799376]:dmap[118245], arg _arg2[799377]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799417]:bool[10] "RVV" "temp"
    (799422 'move' ret[799417](799421 'deref' 0))
    (799419 return ret[799417])
  }
  where {
    unknown call_tmp[799424] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799427 'move' call_tmp[799424](799380 'typeof' _arg1[799376]))
    unknown call_tmp[799429] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799432 'move' call_tmp[799429](799382 'typeof' _arg2[799377]))
    unknown call_tmp[799434] "expr temp" "maybe param" "maybe type" "temp"
    (799437 'move' call_tmp[799434](799384 call == call_tmp[799424] call_tmp[799429]))
    unknown call_tmp[799439] "expr temp" "maybe param" "maybe type" "temp"
    (799442 'move' call_tmp[799439](799405 call chpl_fields_are_comparable[799386] _arg1[799376] _arg2[799377]))
    (799409 '&' call_tmp[799434] call_tmp[799439])
  }
  function chpl_fields_are_comparable[799456](arg _arg1[799458]:dmap[118245], arg _arg2[799459]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799468]:bool[10] "RVV" "param" "temp"
    (799473 'move' ret[799468](799472 'deref' 1))
    (799470 return ret[799468])
  }
  function <[799444](arg _arg1[799446]:dmap[118245], arg _arg2[799447]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799487]:bool[10] "RVV" "temp"
    (799492 'move' ret[799487](799491 'deref' 0))
    (799489 return ret[799487])
  }
  where {
    unknown call_tmp[799494] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799497 'move' call_tmp[799494](799450 'typeof' _arg1[799446]))
    unknown call_tmp[799499] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799502 'move' call_tmp[799499](799452 'typeof' _arg2[799447]))
    unknown call_tmp[799504] "expr temp" "maybe param" "maybe type" "temp"
    (799507 'move' call_tmp[799504](799454 call == call_tmp[799494] call_tmp[799499]))
    unknown call_tmp[799509] "expr temp" "maybe param" "maybe type" "temp"
    (799512 'move' call_tmp[799509](799475 call chpl_fields_are_comparable[799456] _arg1[799446] _arg2[799447]))
    (799479 '&' call_tmp[799504] call_tmp[799509])
  }
  function chpl_fields_are_comparable[799526](arg _arg1[799528]:dmap[118245], arg _arg2[799529]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799538]:bool[10] "RVV" "param" "temp"
    (799543 'move' ret[799538](799542 'deref' 1))
    (799540 return ret[799538])
  }
  function <=[799514](arg _arg1[799516]:dmap[118245], arg _arg2[799517]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799557]:bool[10] "RVV" "temp"
    (799562 'move' ret[799557](799561 'deref' 1))
    (799559 return ret[799557])
  }
  where {
    unknown call_tmp[799564] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799567 'move' call_tmp[799564](799520 'typeof' _arg1[799516]))
    unknown call_tmp[799569] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799572 'move' call_tmp[799569](799522 'typeof' _arg2[799517]))
    unknown call_tmp[799574] "expr temp" "maybe param" "maybe type" "temp"
    (799577 'move' call_tmp[799574](799524 call == call_tmp[799564] call_tmp[799569]))
    unknown call_tmp[799579] "expr temp" "maybe param" "maybe type" "temp"
    (799582 'move' call_tmp[799579](799545 call chpl_fields_are_comparable[799526] _arg1[799516] _arg2[799517]))
    (799549 '&' call_tmp[799574] call_tmp[799579])
  }
  function chpl_fields_are_comparable[799596](arg _arg1[799598]:dmap[118245], arg _arg2[799599]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799608]:bool[10] "RVV" "param" "temp"
    (799613 'move' ret[799608](799612 'deref' 1))
    (799610 return ret[799608])
  }
  function >[799584](arg _arg1[799586]:dmap[118245], arg _arg2[799587]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799627]:bool[10] "RVV" "temp"
    (799632 'move' ret[799627](799631 'deref' 0))
    (799629 return ret[799627])
  }
  where {
    unknown call_tmp[799634] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799637 'move' call_tmp[799634](799590 'typeof' _arg1[799586]))
    unknown call_tmp[799639] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799642 'move' call_tmp[799639](799592 'typeof' _arg2[799587]))
    unknown call_tmp[799644] "expr temp" "maybe param" "maybe type" "temp"
    (799647 'move' call_tmp[799644](799594 call == call_tmp[799634] call_tmp[799639]))
    unknown call_tmp[799649] "expr temp" "maybe param" "maybe type" "temp"
    (799652 'move' call_tmp[799649](799615 call chpl_fields_are_comparable[799596] _arg1[799586] _arg2[799587]))
    (799619 '&' call_tmp[799644] call_tmp[799649])
  }
  function chpl_fields_are_comparable[799666](arg _arg1[799668]:dmap[118245], arg _arg2[799669]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799678]:bool[10] "RVV" "param" "temp"
    (799683 'move' ret[799678](799682 'deref' 1))
    (799680 return ret[799678])
  }
  function >=[799654](arg _arg1[799656]:dmap[118245], arg _arg2[799657]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799697]:bool[10] "RVV" "temp"
    (799702 'move' ret[799697](799701 'deref' 1))
    (799699 return ret[799697])
  }
  where {
    unknown call_tmp[799704] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799707 'move' call_tmp[799704](799660 'typeof' _arg1[799656]))
    unknown call_tmp[799709] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799712 'move' call_tmp[799709](799662 'typeof' _arg2[799657]))
    unknown call_tmp[799714] "expr temp" "maybe param" "maybe type" "temp"
    (799717 'move' call_tmp[799714](799664 call == call_tmp[799704] call_tmp[799709]))
    unknown call_tmp[799719] "expr temp" "maybe param" "maybe type" "temp"
    (799722 'move' call_tmp[799719](799685 call chpl_fields_are_comparable[799666] _arg1[799656] _arg2[799657]))
    (799689 '&' call_tmp[799714] call_tmp[799719])
  }
  function =[799724](ref arg _arg1[799726]:dmap[118245], const?  ref arg _arg2[799727]:dmap[118245]) : void[4] "assignop" "compiler generated" "last resort"
  {
    (799738 return _void[55])
  }
  where {
    unknown call_tmp[799740] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799743 'move' call_tmp[799740](799730 'typeof' _arg1[799726]))
    unknown call_tmp[799745] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799748 'move' call_tmp[799745](799732 'typeof' _arg2[799727]))
    (799734 call == call_tmp[799740] call_tmp[799745])
  }
  function chpl__defaultHash[799750](arg r[799752]:dmap[118245]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[799760] "RVV" "temp"
    (799765 'move' ret[799760](799764 'deref' 0))
    (799762 return ret[799760])
  }
  type dmap[118245]
  function chpl__buildDistType[118252](arg t[118250]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516466] "RVV" "temp" "type variable"
    unknown x[118267] "dead at end of block" "insert auto destroy"
    unknown call_tmp[650741] "expr temp" "maybe param" "maybe type" "temp"
    (650744 'move' call_tmp[650741](118265 call _to_unmanaged t[118250]))
    unknown call_tmp[650746] "expr temp" "maybe param" "maybe type" "temp"
    (650749 'move' call_tmp[650746](118266 'to nilable class from type' call_tmp[650741]))
    (542948 'default init var' x[118267] call_tmp[650746])
    (118270 'end of statement')
    unknown call_tmp[650751] "expr temp" "maybe param" "maybe type" "temp"
    (650754 'move' call_tmp[650751](118275 call postfix! x[118267]))
    unknown call_tmp[650756] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650759 'move' call_tmp[650756](748053 'new' _distribution[118973](?) call_tmp[650751]))
    unknown y[118279] "dead at end of block" "insert auto destroy"
    (542950 'init var' y[118279] call_tmp[650756])
    (118282 'end of statement' x[118267])
    unknown call_tmp[650761] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650764 'move' call_tmp[650761](118284 'typeof' y[118279]))
    (516471 'move' ret[516466](516470 'deref' call_tmp[650761]))
    gotoReturn _end_chpl__buildDistType[516464] _end_chpl__buildDistType[516464]
    (479552 'end of statement' y[118279])
    label _end_chpl__buildDistType[516464]
    (516468 return ret[516466])
  }
  where {
    unknown call_tmp[650766] "expr temp" "maybe param" "maybe type" "temp"
    (650769 'move' call_tmp[650766](118258 call _to_borrowed t[118250]))
    (354400 'is_subtype' BaseDist[382449](?) call_tmp[650766])
  }
  function chpl__buildDistType[118294](arg t[118292]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118315 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
    (516475 return _void[55])
  }
  function chpl__buildDistValue[118326](arg x[118323]:unmanaged[220](?)) : _unknown[51]
  {
    unknown ret[516479] "RVV" "temp"
    unknown call_tmp[650771] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650774 'move' call_tmp[650771](748054 'new' _distribution[118973](?) x[118323]))
    (516484 'move' ret[516479](516483 'deref' call_tmp[650771]))
    (516481 return ret[516479])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492239] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650778] "expr temp" "maybe param" "maybe type" "temp"
      (650781 'move' call_tmp[650778](118334 call(118330 call (partial) borrow _mt[243] x[118323])))
      (492243 'move' call_type_tmp[492239](118335 'typeof' call_tmp[650778]))
    }
    (354401 'is_subtype' BaseDist[382449](?) call_type_tmp[492239])
  }
  function chpl__buildDistValue[118356](in arg x[118353]:_owned[30](?)) : _unknown[51]
  {
    unknown ret[516488] "RVV" "temp"
    unknown call_tmp[650785] "expr temp" "maybe param" "maybe type" "temp"
    (650788 'move' call_tmp[650785](118376 call(118372 call (partial) release _mt[243] x[118353])))
    unknown call_tmp[650790] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650793 'move' call_tmp[650790](748055 'new' _distribution[118973](?) call_tmp[650785]))
    (516493 'move' ret[516488](516492 'deref' call_tmp[650790]))
    (516490 return ret[516488])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492245] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650797] "expr temp" "maybe param" "maybe type" "temp"
      (650800 'move' call_tmp[650797](118364 call(118360 call (partial) borrow _mt[243] x[118353])))
      (492249 'move' call_type_tmp[492245](118365 'typeof' call_tmp[650797]))
    }
    (354402 'is_subtype' BaseDist[382449](?) call_type_tmp[492245])
  }
  function chpl__buildDistValue[118389](arg x[118387]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118410 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
    (516495 return _void[55])
  }
  function _distribution[118973](?).init[118436](arg _mt[118977]:_MT[238], ref arg this[118975]:_distribution[118973](?), arg _pid[118433]:int(64)[13], arg _instance[118438]:_any[178](?), arg _unowned[118441]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461361] "temp"
    (461364 'init var' tmp[461361] _pid[118433] int(64)[13])
    (461366 'init field' this[118975] c"_pid" tmp[461361])
    (479558 'end of statement')
    unknown tmp[461370] "temp"
    (461372 'init var' tmp[461370] _instance[118438])
    (461374 'init field' this[118975] c"_instance" tmp[461370])
    (479559 'end of statement')
    unknown tmp[461378] "temp"
    (461381 'init var' tmp[461378] _unowned[118441] bool[10])
    (461383 'init field' this[118975] c"_unowned" tmp[461378])
    (479560 'end of statement')
    (516497 return _void[55])
  }
  function _distribution[118973](?).init[118479](arg _mt[118981]:_MT[238], ref arg this[118979]:_distribution[118973](?), arg value[118477]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461387] "temp"
    unknown tmp[564963] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564964] "maybe param" "temp"
    unknown call_tmp[650802] "expr temp" "maybe param" "maybe type" "temp"
    (650805 'move' call_tmp[650802](118488 call _isPrivatized value[118477]))
    (564969 'move' tmp[564964](564967 call _cond_test call_tmp[650802]))
    if tmp[564964]
    {
      unknown tmp[564971] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564973 'move' tmp[564971](118492 call _newPrivatizedClass value[118477]))
      (564978 'move' tmp[564963](564975 '_paramFoldLogical' tmp[564964] tmp[564971]))
    }
    {
      (564983 'move' tmp[564963](564980 '_paramFoldLogical' tmp[564964] nullPid[113718]))
    }
    (461390 'init var' tmp[461387] tmp[564963] int(64)[13])
    (461392 'init field' this[118979] c"_pid" tmp[461387])
    (479561 'end of statement')
    unknown call_tmp[650807] "maybe param" "maybe type" "temp"
    (650810 'move' call_tmp[650807](118508 call _to_unmanaged value[118477]))
    unknown tmp[461396] "temp"
    (461398 'init var' tmp[461396] call_tmp[650807])
    (461400 'init field' this[118979] c"_instance" tmp[461396])
    (479562 'end of statement')
    val tmp[461405]:bool[10] "temp"
    (461408 'default init var' tmp[461405] bool[10])
    (461410 '.=' this[118979] c"_unowned" tmp[461405])
    (479563 'end of statement')
    (516499 return _void[55])
  }
  function _distribution[118973](?).init=[118520](arg _mt[118985]:_MT[238], ref arg this[118983]:_distribution[118973](?), const  ref arg other[118517]:_distribution[118973](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[650814] "expr temp" "maybe param" "maybe type" "temp"
    (650817 'move' call_tmp[650814](118523 call _value _mt[243] other[118517]))
    unknown call_tmp[650821] "maybe param" "maybe type" "temp"
    (650824 'move' call_tmp[650821](118532 call(118528 call (partial) dsiClone _mt[243] call_tmp[650814])))
    unknown value[118533] "dead at end of block" "insert auto destroy"
    (542952 'init var' value[118533] call_tmp[650821])
    (118536 'end of statement')
    (118544 call(118539 call (partial) init _mt[243] this[118983]) value[118533])
    (479564 'end of statement' value[118533])
    (516501 return _void[55])
  }
  function _distribution[118973](?)._value[118550](arg _mt[118989]:_MT[238], arg this[118987]:_distribution[118973](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516505] "RVV" "temp"
    unknown call_tmp[650830] "expr temp" "maybe param" "maybe type" "temp"
    (650833 'move' call_tmp[650830](382632 call _instance _mt[243] this[118987]))
    unknown call_tmp[650835] "expr temp" "maybe param" "maybe type" "temp"
    (650838 'move' call_tmp[650835](118555 call _isPrivatized call_tmp[650830]))
    unknown call_tmp[650840] "expr temp" "maybe param" "maybe type" "temp"
    (650843 'move' call_tmp[650840](118569 call _cond_test call_tmp[650835]))
    if call_tmp[650840]
    {
      { scopeless type
        unknown call_type_tmp[492251] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[650847] "expr temp" "maybe param" "maybe type" "temp"
        (650850 'move' call_tmp[650847](382637 call _instance _mt[243] this[118987]))
        (492255 'move' call_type_tmp[492251](118558 'typeof' call_tmp[650847]))
      }
      unknown call_tmp[650854] "expr temp" "maybe param" "maybe type" "temp"
      (650857 'move' call_tmp[650854](382642 call _pid _mt[243] this[118987]))
      unknown call_tmp[650859] "expr temp" "maybe param" "maybe type" "temp"
      (650862 'move' call_tmp[650859](118561 call chpl_getPrivatizedCopy call_type_tmp[492251] call_tmp[650854]))
      (516510 'move' ret[516505](516509 'deref' call_tmp[650859]))
      gotoReturn _end__value[516503] _end__value[516503]
    }
    {
      unknown call_tmp[650866] "expr temp" "maybe param" "maybe type" "temp"
      (650869 'move' call_tmp[650866](382647 call _instance _mt[243] this[118987]))
      (516515 'move' ret[516505](516514 'deref' call_tmp[650866]))
      gotoReturn _end__value[516503] _end__value[516503]
    }
    label _end__value[516503]
    (516507 return ret[516505])
  }
  function _distribution[118973](?).chpl_forwarding_expr4__value[118578](arg _mt[118993]:_MT[238], arg this[118991]:_distribution[118973](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516521] "RVV" "temp"
    (516525 'move' ret[516521](382651 call _value _mt[243] this[118991]))
    (516523 return ret[516521])
  }
  function _distribution[118973](?)._do_destroy[118586](arg _mt[118997]:_MT[238], arg this[118995]:_distribution[118973](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown tmp[424538] "maybe param" "temp"
    unknown call_tmp[650875] "expr temp" "maybe param" "maybe type" "temp"
    (650878 'move' call_tmp[650875](382656 call _unowned _mt[243] this[118995]))
    (424549 'move' tmp[424538](118589 call ! call_tmp[650875]))
    unknown call_tmp[650880] "expr temp" "maybe param" "maybe type" "temp"
    (650883 'move' call_tmp[650880](424551 call _cond_invalid tmp[424538]))
    if call_tmp[650880]
    {
      (424554 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564990] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564991] "maybe param" "temp"
    unknown call_tmp[650885] "expr temp" "maybe param" "maybe type" "temp"
    (650888 'move' call_tmp[650885](424539 call isTrue tmp[424538]))
    (564996 'move' tmp[564991](564994 call _cond_test call_tmp[650885]))
    if tmp[564991]
    {
      unknown tmp[564998] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650892] "expr temp" "maybe param" "maybe type" "temp"
      (650895 'move' call_tmp[650892](359263 call _instance _mt[243] this[118995]))
      unknown call_tmp[650899] "expr temp" "maybe param" "maybe type" "temp"
      (650902 'move' call_tmp[650899](118598 call(118594 call (partial) singleton _mt[243] call_tmp[650892])))
      unknown call_tmp[650904] "expr temp" "maybe param" "maybe type" "temp"
      (650907 'move' call_tmp[650904](118599 call ! call_tmp[650899]))
      (565000 'move' tmp[564998](424542 call isTrue call_tmp[650904]))
      (565005 'move' tmp[564990](565002 '_paramFoldLogical' tmp[564991] tmp[564998]))
    }
    {
      (565010 'move' tmp[564990](565007 '_paramFoldLogical' tmp[564991] 0))
    }
    unknown call_tmp[650909] "expr temp" "maybe param" "maybe type" "temp"
    (650912 'move' call_tmp[650909](118647 call _cond_test tmp[564990]))
    if call_tmp[650909]
    {
      const tmp[118638] "const" "temp"
      unknown call_tmp[650916] "expr temp" "maybe param" "maybe type" "temp"
      (650919 'move' call_tmp[650916](382661 call _instance _mt[243] this[118995]))
      unknown call_tmp[650921] "expr temp" "maybe param" "maybe type" "temp"
      (650924 'move' call_tmp[650921](118635 '_wide_get_locale' call_tmp[650916]))
      (118640 'move' tmp[118638](118636 'deref' call_tmp[650921]))
      (935318 call on_fn[935314] tmp[118638])
      function on_fn[935314](const in arg dummy_locale_arg[935316]:chpl_localeID_t[209352]) : void[4] "on"
      {
        {
          unknown call_tmp[650928] "expr temp" "maybe param" "maybe type" "temp"
          (650931 'move' call_tmp[650928](359268 call _instance _mt[243] this[118995]))
          unknown call_tmp[650935] "maybe param" "maybe type" "temp"
          (650938 'move' call_tmp[650935](118609 call(118605 call (partial) remove _mt[243] call_tmp[650928])))
          unknown distToFree[118610] "dead at end of block" "insert auto destroy"
          (542954 'init var' distToFree[118610] call_tmp[650935])
          (118613 'end of statement')
          unknown call_tmp[650940] "expr temp" "maybe param" "maybe type" "temp"
          (650943 'move' call_tmp[650940](118617 call != distToFree[118610] nil[44]))
          unknown call_tmp[650945] "expr temp" "maybe param" "maybe type" "temp"
          (650948 'move' call_tmp[650945](118631 call _cond_test call_tmp[650940]))
          if call_tmp[650945]
          {
            unknown call_tmp[650950] "expr temp" "maybe param" "maybe type" "temp"
            (650953 'move' call_tmp[650950](118621 call postfix! distToFree[118610]))
            unknown call_tmp[650957] "expr temp" "maybe param" "maybe type" "temp"
            (650960 'move' call_tmp[650957](382668 call _instance _mt[243] this[118995]))
            unknown call_tmp[650962] "expr temp" "maybe param" "maybe type" "temp"
            (650965 'move' call_tmp[650962](118627 call _isPrivatized call_tmp[650957]))
            (118628 call _delete_dist call_tmp[650950] call_tmp[650962])
            (479569 'end of statement' distToFree[118610])
          }
        }
        (935321 return _void[55])
      }
      {
      }
    }
    (516527 return _void[55])
  }
  function _distribution[118973](?).deinit[118656](arg _mt[119001]:_MT[238], arg this[118999]:_distribution[118973](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (118660 call(382674 call (partial) _do_destroy _mt[243] this[118999]))
    (516529 return _void[55])
  }
  function _distribution[118973](?).clone[118667](arg _mt[119005]:_MT[238], arg this[119003]:_distribution[118973](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516533] "RVV" "temp"
    unknown call_tmp[650971] "expr temp" "maybe param" "maybe type" "temp"
    (650974 'move' call_tmp[650971](359272 call _value _mt[243] this[119003]))
    unknown call_tmp[650978] "expr temp" "maybe param" "maybe type" "temp"
    (650981 'move' call_tmp[650978](118676 call(118672 call (partial) dsiClone _mt[243] call_tmp[650971])))
    unknown call_tmp[650983] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650986 'move' call_tmp[650983](748056 'new' _distribution[118973](?) call_tmp[650978]))
    (516538 'move' ret[516533](516537 'deref' call_tmp[650983]))
    (516535 return ret[516533])
  }
  function _distribution[118973](?).newRectangularDom[118690](arg _mt[119009]:_MT[238], arg this[119007]:_distribution[118973](?), param arg rank[118687]:int(64)[13], arg idxType[118692]:_any[178](?), param arg stridable[118695]:bool[10], arg ranges[118710] :
  unknown call_tmp[650988] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[516542] "RVV" "temp"
    unknown call_tmp[650995] "expr temp" "maybe param" "maybe type" "temp"
    (650998 'move' call_tmp[650995](359277 call _value _mt[243] this[119007]))
    unknown call_tmp[651002] "maybe param" "maybe type" "temp"
    (651005 'move' call_tmp[651002](118724 call(118716 call (partial) dsiNewRectangularDom _mt[243] call_tmp[650995]) rank[118687] idxType[118692] stridable[118695] ranges[118710]))
    unknown x[118725] "dead at end of block" "insert auto destroy"
    (542956 'init var' x[118725] call_tmp[651002])
    (118728 'end of statement')
    unknown call_tmp[651009] "expr temp" "maybe param" "maybe type" "temp"
    (651012 'move' call_tmp[651009](118737 call(118733 call (partial) linksDistribution _mt[243] x[118725])))
    unknown call_tmp[651014] "expr temp" "maybe param" "maybe type" "temp"
    (651017 'move' call_tmp[651014](118749 call _cond_test call_tmp[651009]))
    if call_tmp[651014]
    {
      unknown call_tmp[651021] "expr temp" "maybe param" "maybe type" "temp"
      (651024 'move' call_tmp[651021](359282 call _value _mt[243] this[119007]))
      (118746 call(118741 call (partial) add_dom _mt[243] call_tmp[651021]) x[118725])
      (479573 'end of statement' x[118725])
    }
    (516547 'move' ret[516542](516546 'deref' x[118725]))
    gotoReturn _end_newRectangularDom[516540] _end_newRectangularDom[516540]
    (479575 'end of statement' x[118725])
    label _end_newRectangularDom[516540]
    (516544 return ret[516542])
  }
  function _distribution[118973](?).newRectangularDom[118764](arg _mt[119013]:_MT[238], arg this[119011]:_distribution[118973](?), param arg rank[118761]:int(64)[13], arg idxType[118766]:_any[178](?), param arg stridable[118769]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516553] "RVV" "temp"
    unknown ranges[118784] "dead at end of block" "insert auto destroy"
    unknown call_tmp[651028] "expr temp" "maybe param" "maybe type" "temp"
    (651031 'move' call_tmp[651028](118781 call range[64319](?) idxType[118766] bounded[64208] stridable[118769]))
    unknown call_tmp[651033] "expr temp" "maybe param" "maybe type" "temp"
    (651036 'move' call_tmp[651033](118782 call * rank[118761] call_tmp[651028]))
    (542958 'default init var' ranges[118784] call_tmp[651033])
    (118787 'end of statement')
    unknown call_tmp[651040] "expr temp" "maybe param" "maybe type" "temp"
    (651043 'move' call_tmp[651040](118795 call(382693 call (partial) newRectangularDom _mt[243] this[119011]) rank[118761] idxType[118766] stridable[118769] ranges[118784]))
    (516558 'move' ret[516553](516557 'deref' call_tmp[651040]))
    gotoReturn _end_newRectangularDom[516551] _end_newRectangularDom[516551]
    (479577 'end of statement' ranges[118784])
    label _end_newRectangularDom[516551]
    (516555 return ret[516553])
  }
  function _distribution[118973](?).newAssociativeDom[118804](arg _mt[119017]:_MT[238], arg this[119015]:_distribution[118973](?), arg idxType[118802]:_any[178](?), param arg parSafe[118808]:bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    unknown ret[516564] "RVV" "temp"
    unknown call_tmp[651047] "expr temp" "maybe param" "maybe type" "temp"
    (651050 'move' call_tmp[651047](359287 call _value _mt[243] this[119015]))
    unknown call_tmp[651054] "maybe param" "maybe type" "temp"
    (651057 'move' call_tmp[651054](118821 call(118815 call (partial) dsiNewAssociativeDom _mt[243] call_tmp[651047]) idxType[118802] parSafe[118808]))
    unknown x[118822] "dead at end of block" "insert auto destroy"
    (542960 'init var' x[118822] call_tmp[651054])
    (118825 'end of statement')
    unknown call_tmp[651061] "expr temp" "maybe param" "maybe type" "temp"
    (651064 'move' call_tmp[651061](118832 call(118828 call (partial) linksDistribution _mt[243] x[118822])))
    unknown call_tmp[651066] "expr temp" "maybe param" "maybe type" "temp"
    (651069 'move' call_tmp[651066](118842 call _cond_test call_tmp[651061]))
    if call_tmp[651066]
    {
      unknown call_tmp[651073] "expr temp" "maybe param" "maybe type" "temp"
      (651076 'move' call_tmp[651073](359292 call _value _mt[243] this[119015]))
      (118839 call(118834 call (partial) add_dom _mt[243] call_tmp[651073]) x[118822])
      (479579 'end of statement' x[118822])
    }
    (516569 'move' ret[516564](516568 'deref' x[118822]))
    gotoReturn _end_newAssociativeDom[516562] _end_newAssociativeDom[516562]
    (479581 'end of statement' x[118822])
    label _end_newAssociativeDom[516562]
    (516566 return ret[516564])
  }
  function _distribution[118973](?).newSparseDom[118857](arg _mt[119021]:_MT[238], arg this[119019]:_distribution[118973](?), param arg rank[118854]:int(64)[13], arg idxType[118859]:_any[178](?), arg dom[118862]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516575] "RVV" "temp"
    unknown call_tmp[651082] "expr temp" "maybe param" "maybe type" "temp"
    (651085 'move' call_tmp[651082](359296 call _value _mt[243] this[119019]))
    unknown call_tmp[651089] "maybe param" "maybe type" "temp"
    (651092 'move' call_tmp[651089](118875 call(118868 call (partial) dsiNewSparseDom _mt[243] call_tmp[651082]) rank[118854] idxType[118859] dom[118862]))
    unknown x[118876] "dead at end of block" "insert auto destroy"
    (542962 'init var' x[118876] call_tmp[651089])
    (118879 'end of statement')
    unknown call_tmp[651096] "expr temp" "maybe param" "maybe type" "temp"
    (651099 'move' call_tmp[651096](118886 call(118882 call (partial) linksDistribution _mt[243] x[118876])))
    unknown call_tmp[651101] "expr temp" "maybe param" "maybe type" "temp"
    (651104 'move' call_tmp[651101](118896 call _cond_test call_tmp[651096]))
    if call_tmp[651101]
    {
      unknown call_tmp[651108] "expr temp" "maybe param" "maybe type" "temp"
      (651111 'move' call_tmp[651108](359301 call _value _mt[243] this[119019]))
      (118893 call(118888 call (partial) add_dom _mt[243] call_tmp[651108]) x[118876])
      (479583 'end of statement' x[118876])
    }
    (516580 'move' ret[516575](516579 'deref' x[118876]))
    gotoReturn _end_newSparseDom[516573] _end_newSparseDom[516573]
    (479585 'end of statement' x[118876])
    label _end_newSparseDom[516573]
    (516577 return ret[516575])
  }
  function _distribution[118973](?).idxToLocale[118909](arg _mt[119025]:_MT[238], arg this[119023]:_distribution[118973](?), arg ind[118907]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516586] "RVV" "temp"
    unknown call_tmp[651117] "expr temp" "maybe param" "maybe type" "temp"
    (651120 'move' call_tmp[651117](359305 call _value _mt[243] this[119023]))
    unknown call_tmp[651124] "expr temp" "maybe param" "maybe type" "temp"
    (651127 'move' call_tmp[651124](118919 call(118914 call (partial) dsiIndexToLocale _mt[243] call_tmp[651117]) ind[118907]))
    (516591 'move' ret[516586](516590 'deref' call_tmp[651124]))
    (516588 return ret[516586])
  }
  function _distribution[118973](?).readWriteThis[118929](arg _mt[119029]:_MT[238], arg this[119027]:_distribution[118973](?), arg f[118927]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651131] "expr temp" "maybe param" "maybe type" "temp"
    (651134 'move' call_tmp[651131](382713 call _value _mt[243] this[119027]))
    (118933 call <~> f[118927] call_tmp[651131])
    (516593 return _void[55])
  }
  function _distribution[118973](?).displayRepresentation[118941](arg _mt[119033]:_MT[238], arg this[119031]:_distribution[118973](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651138] "expr temp" "maybe param" "maybe type" "temp"
    (651141 'move' call_tmp[651138](359309 call _value _mt[243] this[119031]))
    (118950 call(118946 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[651138]))
    (516595 return _void[55])
  }
  function _distribution[118973](?).targetLocales[118957](arg _mt[119037]:_MT[238], arg this[119035]:_distribution[118973](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516599] "RVV" "temp"
    unknown call_tmp[651147] "expr temp" "maybe param" "maybe type" "temp"
    (651150 'move' call_tmp[651147](359313 call _value _mt[243] this[119035]))
    unknown call_tmp[651154] "expr temp" "maybe param" "maybe type" "temp"
    (651157 'move' call_tmp[651154](118966 call(118962 call (partial) dsiTargetLocales _mt[243] call_tmp[651147])))
    (516604 'move' ret[516599](516603 'deref' call_tmp[651154]))
    (516601 return ret[516599])
  }
  function _distribution[118973](?)._pid[799767](arg _mt[799769]:_MT[238], ref arg this[799771]:_distribution[118973](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799781] "RVV" "temp"
    unknown call_tmp[799788] "expr temp" "maybe param" "maybe type" "temp"
    (799791 'move' call_tmp[799788](799775 '.' this[799771] c"_pid"))
    (799786 'move' ret[799781](799785 'addr of' call_tmp[799788]))
    (799783 return ret[799781])
  }
  function _distribution[118973](?)._instance[799793](arg _mt[799795]:_MT[238], ref arg this[799797]:_distribution[118973](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799807] "RVV" "temp"
    unknown call_tmp[799814] "expr temp" "maybe param" "maybe type" "temp"
    (799817 'move' call_tmp[799814](799801 '.' this[799797] c"_instance"))
    (799812 'move' ret[799807](799811 'addr of' call_tmp[799814]))
    (799809 return ret[799807])
  }
  function _distribution[118973](?)._unowned[799819](arg _mt[799821]:_MT[238], ref arg this[799823]:_distribution[118973](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799833] "RVV" "temp"
    unknown call_tmp[799840] "expr temp" "maybe param" "maybe type" "temp"
    (799843 'move' call_tmp[799840](799827 '.' this[799823] c"_unowned"))
    (799838 'move' ret[799833](799837 'addr of' call_tmp[799840]))
    (799835 return ret[799833])
  }
  function _distribution[118973](?).writeThis[799845](arg _mt[799849]:_MT[238], arg this[799847]:_distribution[118973](?), arg f[799848]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799858 call(799854 call (partial) readWriteThis _mt[243] this[799847]) f[799848])
    (799861 return _void[55])
  }
  function _distribution[118973](?).readThis[799865](arg _mt[799869]:_MT[238], arg this[799867]:_distribution[118973](?), arg f[799868]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799877 call(799873 call (partial) readWriteThis _mt[243] this[799867]) f[799868])
    (799881 return _void[55])
  }
  function chpl__defaultHash[799885](arg r[799887]:_distribution[118973](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[799918] "RVV" "temp"
    unknown call_tmp[799925] "expr temp" "maybe param" "maybe type" "temp"
    (799928 'move' call_tmp[799925](799904 call _unowned _mt[243] r[799887]))
    unknown call_tmp[799930] "expr temp" "maybe param" "maybe type" "temp"
    (799933 'move' call_tmp[799930](799908 call chpl__defaultHash call_tmp[799925]))
    unknown call_tmp[799935] "expr temp" "maybe param" "maybe type" "temp"
    (799938 'move' call_tmp[799935](799895 call _instance _mt[243] r[799887]))
    unknown call_tmp[799940] "expr temp" "maybe param" "maybe type" "temp"
    (799943 'move' call_tmp[799940](799899 call chpl__defaultHash call_tmp[799935]))
    unknown call_tmp[799945] "expr temp" "maybe param" "maybe type" "temp"
    (799948 'move' call_tmp[799945](799889 call _pid _mt[243] r[799887]))
    unknown call_tmp[799950] "expr temp" "maybe param" "maybe type" "temp"
    (799953 'move' call_tmp[799950](799893 call chpl__defaultHash call_tmp[799945]))
    unknown call_tmp[799955] "expr temp" "maybe param" "maybe type" "temp"
    (799958 'move' call_tmp[799955](799901 call chpl__defaultHashCombine call_tmp[799940] call_tmp[799950] 2))
    unknown call_tmp[799960] "expr temp" "maybe param" "maybe type" "temp"
    (799963 'move' call_tmp[799960](799910 call chpl__defaultHashCombine call_tmp[799930] call_tmp[799955] 3))
    (799923 'move' ret[799918](799922 'deref' call_tmp[799960]))
    (799920 return ret[799918])
  }
  type _distribution[118973](?) val _pid[118417]:int(64)[13] int(64)[13] unknown _instance[118421] "owned" val _unowned[118426]:bool[10] bool[10] forwarding ( )
  function ==[119049](arg d1[119046]:_distribution[118973](?), arg d2[119055]:_distribution[118973](?)) : _unknown[51] "inline"
  {
    unknown ret[516608] "RVV" "temp"
    unknown call_tmp[651161] "expr temp" "maybe param" "maybe type" "temp"
    (651164 'move' call_tmp[651161](119059 call _value _mt[243] d1[119046]))
    unknown call_tmp[651168] "expr temp" "maybe param" "maybe type" "temp"
    (651171 'move' call_tmp[651168](119063 call _value _mt[243] d2[119055]))
    unknown call_tmp[651173] "expr temp" "maybe param" "maybe type" "temp"
    (651176 'move' call_tmp[651173](119066 call == call_tmp[651161] call_tmp[651168]))
    unknown call_tmp[651178] "expr temp" "maybe param" "maybe type" "temp"
    (651181 'move' call_tmp[651178](119071 call _cond_test call_tmp[651173]))
    if call_tmp[651178]
    {
      (516613 'move' ret[516608](516612 'deref' 1))
      gotoReturn _end_==[516606] _end_==[516606]
    }
    unknown call_tmp[651185] "expr temp" "maybe param" "maybe type" "temp"
    (651188 'move' call_tmp[651185](119078 call _value _mt[243] d1[119046]))
    unknown call_tmp[651194] "expr temp" "maybe param" "maybe type" "temp"
    (651197 'move' call_tmp[651194](119087 call _value _mt[243] d2[119055]))
    unknown call_tmp[651199] "expr temp" "maybe param" "maybe type" "temp"
    (651202 'move' call_tmp[651199](119091 call(119083 call (partial) dsiEqualDMaps _mt[243] call_tmp[651185]) call_tmp[651194]))
    (516618 'move' ret[516608](516617 'deref' call_tmp[651199]))
    label _end_==[516606]
    (516610 return ret[516608])
  }
  function !=[119105](arg d1[119102]:_distribution[118973](?), arg d2[119111]:_distribution[118973](?)) : _unknown[51] "inline"
  {
    unknown ret[516622] "RVV" "temp"
    unknown call_tmp[651206] "expr temp" "maybe param" "maybe type" "temp"
    (651209 'move' call_tmp[651206](119115 call _value _mt[243] d1[119102]))
    unknown call_tmp[651213] "expr temp" "maybe param" "maybe type" "temp"
    (651216 'move' call_tmp[651213](119119 call _value _mt[243] d2[119111]))
    unknown call_tmp[651218] "expr temp" "maybe param" "maybe type" "temp"
    (651221 'move' call_tmp[651218](119122 call == call_tmp[651206] call_tmp[651213]))
    unknown call_tmp[651223] "expr temp" "maybe param" "maybe type" "temp"
    (651226 'move' call_tmp[651223](119127 call _cond_test call_tmp[651218]))
    if call_tmp[651223]
    {
      (516627 'move' ret[516622](516626 'deref' 0))
      gotoReturn _end_!=[516620] _end_!=[516620]
    }
    unknown call_tmp[651230] "expr temp" "maybe param" "maybe type" "temp"
    (651233 'move' call_tmp[651230](119134 call _value _mt[243] d1[119102]))
    unknown call_tmp[651239] "expr temp" "maybe param" "maybe type" "temp"
    (651242 'move' call_tmp[651239](119141 call _value _mt[243] d2[119111]))
    unknown call_tmp[651244] "expr temp" "maybe param" "maybe type" "temp"
    (651247 'move' call_tmp[651244](119145 call(119137 call (partial) dsiEqualDMaps _mt[243] call_tmp[651230]) call_tmp[651239]))
    unknown call_tmp[651249] "expr temp" "maybe param" "maybe type" "temp"
    (651252 'move' call_tmp[651249](119146 call ! call_tmp[651244]))
    (516632 'move' ret[516622](516631 'deref' call_tmp[651249]))
    label _end_!=[516620]
    (516624 return ret[516622])
  }
  function chpl_defaultComparator[119154]() : _unknown[51]
  {
    unknown ret[516636] "RVV" "temp"
    (516641 'move' ret[516636](516640 'deref' defaultComparator[268065]))
    (516638 return ret[516636])
    (355227 'used modules list'(119157 'use' Sort[268056]))
  }
  function _domain[125908](?).chpl__promotionType[119182](arg _mt[125912]:_MT[238], arg this[125910]:_domain[125908](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[516645] "RVV" "temp" "type variable"
    unknown call_tmp[651256] "expr temp" "maybe param" "maybe type" "temp"
    (651259 'move' call_tmp[651256](382722 call rank _mt[243] this[125910]))
    unknown call_tmp[651263] "expr temp" "maybe param" "maybe type" "temp"
    (651266 'move' call_tmp[651263](359325 call _value _mt[243] this[125910]))
    unknown call_tmp[651270] "expr temp" "maybe param" "maybe type" "temp"
    (651273 'move' call_tmp[651270](119187 call idxType _mt[243] call_tmp[651263]))
    unknown call_tmp[651275] "expr temp" "maybe param" "maybe type" "temp"
    (651278 'move' call_tmp[651275](119190 call chpl__buildIndexType call_tmp[651256] call_tmp[651270]))
    (516650 'move' ret[516645](516649 'deref' call_tmp[651275]))
    (516647 return ret[516645])
  }
  function _domain[125908](?).init[119203](arg _mt[125916]:_MT[238], ref arg this[125914]:_domain[125908](?), arg _pid[119200]:int(64)[13], arg _instance[119205]:_any[178](?), arg _unowned[119208]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461442] "temp"
    (461445 'init var' tmp[461442] _pid[119200] int(64)[13])
    (461447 'init field' this[125914] c"_pid" tmp[461442])
    (479597 'end of statement')
    unknown tmp[461451] "temp"
    (461453 'init var' tmp[461451] _instance[119205])
    (461455 'init field' this[125914] c"_instance" tmp[461451])
    (479598 'end of statement')
    unknown tmp[461459] "temp"
    (461462 'init var' tmp[461459] _unowned[119208] bool[10])
    (461464 'init field' this[125914] c"_unowned" tmp[461459])
    (479599 'end of statement')
    (516652 return _void[55])
  }
  function _domain[125908](?).init[119242](arg _mt[125920]:_MT[238], ref arg this[125918]:_domain[125908](?), arg value[119240]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651280] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651283 'move' call_tmp[651280](119246 'typeof' value[119240]))
    unknown call_tmp[651285] "expr temp" "maybe param" "maybe type" "temp"
    (651288 'move' call_tmp[651285](119248 call _to_unmanaged call_tmp[651280]))
    unknown call_tmp[651290] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651293 'move' call_tmp[651290](119250 'typeof' value[119240]))
    unknown call_tmp[651295] "expr temp" "maybe param" "maybe type" "temp"
    (651298 'move' call_tmp[651295](119251 call != call_tmp[651285] call_tmp[651290]))
    unknown call_tmp[651300] "expr temp" "maybe param" "maybe type" "temp"
    (651303 'move' call_tmp[651300](119258 call _cond_test call_tmp[651295]))
    if call_tmp[651300]
    {
      (119256 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[651305] "expr temp" "maybe param" "maybe type" "temp"
    (651308 'move' call_tmp[651305](119267 call _isPrivatized value[119240]))
    unknown call_tmp[651310] "expr temp" "maybe param" "maybe type" "temp"
    (651313 'move' call_tmp[651310](119313 call _cond_test call_tmp[651305]))
    if call_tmp[651310]
    {
      unknown call_tmp[651317] "expr temp" "maybe param" "maybe type" "temp"
      (651320 'move' call_tmp[651317](119269 call pid _mt[243] value[119240]))
      unknown call_tmp[651322] "expr temp" "maybe param" "maybe type" "temp"
      (651325 'move' call_tmp[651322](119273 call == call_tmp[651317] nullPid[113718]))
      unknown call_tmp[651327] "expr temp" "maybe param" "maybe type" "temp"
      (651330 'move' call_tmp[651327](119299 call _cond_test call_tmp[651322]))
      if call_tmp[651327]
      {
        unknown call_tmp[651332] "maybe param" "maybe type" "temp"
        (651335 'move' call_tmp[651332](119282 call _newPrivatizedClass value[119240]))
        unknown tmp[461468] "temp"
        (461471 'init var' tmp[461468] call_tmp[651332] int(64)[13])
        (461473 'init field' this[125918] c"_pid" tmp[461468])
        (479601 'end of statement')
      }
      {
        unknown call_tmp[651339] "maybe param" "maybe type" "temp"
        (651342 'move' call_tmp[651339](119292 call pid _mt[243] value[119240]))
        unknown tmp[461477] "temp"
        (461480 'init var' tmp[461477] call_tmp[651339] int(64)[13])
        (461482 'init field' this[125918] c"_pid" tmp[461477])
        (479602 'end of statement')
      }
    }
    {
      unknown tmp[461486] "temp"
      (461489 'init var' tmp[461486] nullPid[113718] int(64)[13])
      (461491 'init field' this[125918] c"_pid" tmp[461486])
      (479603 'end of statement')
    }
    unknown tmp[461495] "temp"
    (461497 'init var' tmp[461495] value[119240])
    (461499 'init field' this[125918] c"_instance" tmp[461495])
    (479604 'end of statement')
    val tmp[461504]:bool[10] "temp"
    (461507 'default init var' tmp[461504] bool[10])
    (461509 '.=' this[125918] c"_unowned" tmp[461504])
    (479605 'end of statement')
    (516654 return _void[55])
  }
  function _domain[125908](?).init[119333](arg _mt[125924]:_MT[238], ref arg this[125922]:_domain[125908](?), arg d[119330]:_distribution[118973](?), param arg rank[119336]:int(64)[13], arg idxType[119340]:_any[178](?) =
  int(64)[13], param arg stridable[119345]:bool[10] =
  0) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651348] "expr temp" "maybe param" "maybe type" "temp"
    (651351 'move' call_tmp[651348](119361 call(119354 call (partial) newRectangularDom _mt[243] d[119330]) rank[119336] idxType[119340] stridable[119345]))
    (119363 call(119350 call (partial) init _mt[243] this[125922]) call_tmp[651348])
    (516656 return _void[55])
  }
  function _domain[125908](?).init[119374](arg _mt[125928]:_MT[238], ref arg this[125926]:_domain[125908](?), arg d[119371]:_distribution[118973](?), param arg rank[119377]:int(64)[13], arg idxType[119381]:_any[178](?) =
  int(64)[13], param arg stridable[119386]:bool[10] =
  0, arg ranges[119402] :
  unknown call_tmp[651353] "expr temp" "maybe param" "maybe type" "temp") : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651362] "expr temp" "maybe param" "maybe type" "temp"
    (651365 'move' call_tmp[651362](119418 call(119410 call (partial) newRectangularDom _mt[243] d[119371]) rank[119377] idxType[119381] stridable[119386] ranges[119402]))
    (119420 call(119406 call (partial) init _mt[243] this[125926]) call_tmp[651362])
    (516658 return _void[55])
  }
  function _domain[125908](?).init[119431](arg _mt[125932]:_MT[238], ref arg this[125930]:_domain[125908](?), arg d[119428]:_distribution[118973](?), arg idxType[119433]:_any[178](?), param arg parSafe[119437]:bool[10] =
  1) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651371] "expr temp" "maybe param" "maybe type" "temp"
    (651374 'move' call_tmp[651371](119454 call(119448 call (partial) newAssociativeDom _mt[243] d[119428]) idxType[119433] parSafe[119437]))
    (119456 call(119442 call (partial) init _mt[243] this[125930]) call_tmp[651371])
    (516660 return _void[55])
  }
  function _domain[125908](?).init[119467](arg _mt[125936]:_MT[238], ref arg this[125934]:_domain[125908](?), arg d[119464]:_distribution[118973](?), arg dom[119470]:_domain[125908](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651382] "expr temp" "maybe param" "maybe type" "temp"
    (651385 'move' call_tmp[651382](119484 call rank _mt[243] dom[119470]))
    unknown call_tmp[651389] "expr temp" "maybe param" "maybe type" "temp"
    (651392 'move' call_tmp[651389](119489 call _value _mt[243] dom[119470]))
    unknown call_tmp[651396] "expr temp" "maybe param" "maybe type" "temp"
    (651399 'move' call_tmp[651396](119492 call idxType _mt[243] call_tmp[651389]))
    unknown call_tmp[651401] "expr temp" "maybe param" "maybe type" "temp"
    (651404 'move' call_tmp[651401](119496 call(119480 call (partial) newSparseDom _mt[243] d[119464]) call_tmp[651382] call_tmp[651396] dom[119470]))
    (119498 call(119474 call (partial) init _mt[243] this[125934]) call_tmp[651401])
    (516662 return _void[55])
  }
  function _domain[125908](?).init=[119509](arg _mt[125940]:_MT[238], ref arg this[125938]:_domain[125908](?), const  ref arg other[119506]:_domain[125908](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651410] "expr temp" "maybe param" "maybe type" "temp"
    (651413 'move' call_tmp[651410](119520 call dist _mt[243] other[119506]))
    unknown call_tmp[651417] "expr temp" "maybe param" "maybe type" "temp"
    (651420 'move' call_tmp[651417](119525 call rank _mt[243] other[119506]))
    unknown call_tmp[651424] "expr temp" "maybe param" "maybe type" "temp"
    (651427 'move' call_tmp[651424](119529 call idxType _mt[243] other[119506]))
    unknown call_tmp[651431] "expr temp" "maybe param" "maybe type" "temp"
    (651434 'move' call_tmp[651431](119533 call stridable _mt[243] other[119506]))
    unknown call_tmp[651438] "expr temp" "maybe param" "maybe type" "temp"
    (651441 'move' call_tmp[651438](119541 call(119537 call (partial) dims _mt[243] other[119506])))
    (119542 call(119516 call (partial) init _mt[243] this[125938]) call_tmp[651410] call_tmp[651417] call_tmp[651424] call_tmp[651431] call_tmp[651438])
    (516664 return _void[55])
  }
  where {
    (119514 call isRectangularDom other[119506])
  }
  function _domain[125908](?).init=[119554](arg _mt[125944]:_MT[238], ref arg this[125942]:_domain[125908](?), const  ref arg other[119551]:_domain[125908](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651443] "expr temp" "maybe param" "maybe type" "temp"
    (651446 'move' call_tmp[651443](119559 call isAssociativeDom other[119551]))
    unknown call_tmp[651448] "expr temp" "maybe param" "maybe type" "temp"
    (651451 'move' call_tmp[651448](119646 call _cond_test call_tmp[651443]))
    if call_tmp[651448]
    {
      unknown call_tmp[651457] "expr temp" "maybe param" "maybe type" "temp"
      (651460 'move' call_tmp[651457](119565 call dist _mt[243] other[119551]))
      unknown call_tmp[651464] "expr temp" "maybe param" "maybe type" "temp"
      (651467 'move' call_tmp[651464](119570 call idxType _mt[243] other[119551]))
      unknown call_tmp[651471] "expr temp" "maybe param" "maybe type" "temp"
      (651474 'move' call_tmp[651471](119574 call parSafe _mt[243] other[119551]))
      (119577 call(119561 call (partial) init _mt[243] this[125942]) call_tmp[651457] call_tmp[651464] call_tmp[651471])
    }
    {
      unknown call_tmp[651476] "expr temp" "maybe param" "maybe type" "temp"
      (651479 'move' call_tmp[651476](119583 call isSparseDom other[119551]))
      unknown call_tmp[651481] "expr temp" "maybe param" "maybe type" "temp"
      (651484 'move' call_tmp[651481](119642 call _cond_test call_tmp[651476]))
      if call_tmp[651481]
      {
        unknown call_tmp[651490] "expr temp" "maybe param" "maybe type" "temp"
        (651493 'move' call_tmp[651490](119589 call dist _mt[243] other[119551]))
        unknown call_tmp[651497] "expr temp" "maybe param" "maybe type" "temp"
        (651500 'move' call_tmp[651497](119594 call parentDom _mt[243] other[119551]))
        (119597 call(119585 call (partial) init _mt[243] this[125942]) call_tmp[651490] call_tmp[651497])
      }
      {
        unknown call_tmp[651502] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651505 'move' call_tmp[651502](119620 'typeof' this[125942]))
        unknown call_tmp[651507] "expr temp" "maybe param" "maybe type" "temp"
        (651510 'move' call_tmp[651507](119622 call _cast string[26] call_tmp[651502]))
        unknown call_tmp[651512] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651515 'move' call_tmp[651512](119626 'typeof' other[119551]))
        unknown call_tmp[651517] "expr temp" "maybe param" "maybe type" "temp"
        (651520 'move' call_tmp[651517](119628 call _cast string[26] call_tmp[651512]))
        (119631 call compilerError "Cannot initialize '" call_tmp[651507] "' from '" call_tmp[651517] "'")
        (479613 'end of statement')
        (119640 call(119635 call (partial) init _mt[243] this[125942]) nil[44])
      }
    }
    unknown call_tmp[651526] "expr temp" "maybe param" "maybe type" "temp"
    (651529 'move' call_tmp[651526](359364 call _instance _mt[243] this[125942]))
    (119662 call(119655 call (partial) dsiAssignDomain _mt[243] call_tmp[651526]) other[119551](lhsPrivate = 1))
    (516666 return _void[55])
  }
  function _domain[125908](?)._value[119668](arg _mt[125948]:_MT[238], arg this[125946]:_domain[125908](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516670] "RVV" "temp"
    unknown call_tmp[651535] "expr temp" "maybe param" "maybe type" "temp"
    (651538 'move' call_tmp[651535](382764 call _instance _mt[243] this[125946]))
    unknown call_tmp[651540] "expr temp" "maybe param" "maybe type" "temp"
    (651543 'move' call_tmp[651540](119673 call _isPrivatized call_tmp[651535]))
    unknown call_tmp[651545] "expr temp" "maybe param" "maybe type" "temp"
    (651548 'move' call_tmp[651545](119687 call _cond_test call_tmp[651540]))
    if call_tmp[651545]
    {
      { scopeless type
        unknown call_type_tmp[492257] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[651552] "expr temp" "maybe param" "maybe type" "temp"
        (651555 'move' call_tmp[651552](382769 call _instance _mt[243] this[125946]))
        (492261 'move' call_type_tmp[492257](119676 'typeof' call_tmp[651552]))
      }
      unknown call_tmp[651559] "expr temp" "maybe param" "maybe type" "temp"
      (651562 'move' call_tmp[651559](382774 call _pid _mt[243] this[125946]))
      unknown call_tmp[651564] "expr temp" "maybe param" "maybe type" "temp"
      (651567 'move' call_tmp[651564](119679 call chpl_getPrivatizedCopy call_type_tmp[492257] call_tmp[651559]))
      (516675 'move' ret[516670](516674 'deref' call_tmp[651564]))
      gotoReturn _end__value[516668] _end__value[516668]
    }
    {
      unknown call_tmp[651571] "expr temp" "maybe param" "maybe type" "temp"
      (651574 'move' call_tmp[651571](382779 call _instance _mt[243] this[125946]))
      (516680 'move' ret[516670](516679 'deref' call_tmp[651571]))
      gotoReturn _end__value[516668] _end__value[516668]
    }
    label _end__value[516668]
    (516672 return ret[516670])
  }
  function _domain[125908](?).chpl_forwarding_expr5__value[119697](arg _mt[125952]:_MT[238], arg this[125950]:_domain[125908](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516686] "RVV" "temp"
    (516690 'move' ret[516686](382783 call _value _mt[243] this[125950]))
    (516688 return ret[516686])
  }
  function _domain[125908](?).chpl__serialize[119705](arg _mt[125956]:_MT[238], arg this[125954]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516694] "RVV" "temp"
    unknown call_tmp[651580] "expr temp" "maybe param" "maybe type" "temp"
    (651583 'move' call_tmp[651580](119717 call _value _mt[243] this[125954]))
    unknown call_tmp[651587] "expr temp" "maybe param" "maybe type" "temp"
    (651590 'move' call_tmp[651587](119726 call(119722 call (partial) chpl__serialize _mt[243] call_tmp[651580])))
    (516699 'move' ret[516694](516698 'deref' call_tmp[651587]))
    (516696 return ret[516694])
  }
  where {
    unknown call_tmp[651594] "expr temp" "maybe param" "maybe type" "temp"
    (651597 'move' call_tmp[651594](119708 call _value _mt[243] this[125954]))
    (119715 call(119711 call (partial) isDefaultRectangular _mt[243] call_tmp[651594]))
  }
  function _domain[125908](?).chpl__deserialize[119737](arg _mt[125960]:_MT[238], arg this[125958]:_domain[125908](?), arg data[119735]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516703] "RVV" "temp"
    unknown valueType[119744] "dead at end of block" "insert auto destroy" "type variable"(119743 'static field type' this[125958] "_instance")
    (542967 'move' valueType[119744](542964 'static field type' this[125958] "_instance"))
    (479619 'end of statement')
    unknown call_tmp[651601] "expr temp" "maybe param" "maybe type" "temp"
    (651604 'move' call_tmp[651601](119753 call _to_borrowed valueType[119744]))
    unknown call_tmp[651608] "expr temp" "maybe param" "maybe type" "temp"
    (651611 'move' call_tmp[651608](119761 call(119756 call (partial) chpl__deserialize _mt[243] call_tmp[651601]) data[119735]))
    unknown call_tmp[651613] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (651616 'move' call_tmp[651613](748057 'new' _domain[125908](?) call_tmp[651608]))
    (516708 'move' ret[516703](516707 'deref' call_tmp[651613]))
    gotoReturn _end_chpl__deserialize[516701] _end_chpl__deserialize[516701]
    (479620 'end of statement' valueType[119744])
    label _end_chpl__deserialize[516701]
    (516705 return ret[516703])
  }
  function _domain[125908](?)._do_destroy[119770](arg _mt[125964]:_MT[238], arg this[125962]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[651620] "expr temp" "maybe param" "maybe type" "temp"
    (651623 'move' call_tmp[651620](382792 call _unowned _mt[243] this[125962]))
    unknown call_tmp[651625] "expr temp" "maybe param" "maybe type" "temp"
    (651628 'move' call_tmp[651625](119773 call ! call_tmp[651620]))
    unknown call_tmp[651630] "expr temp" "maybe param" "maybe type" "temp"
    (651633 'move' call_tmp[651630](119889 call _cond_test call_tmp[651625]))
    if call_tmp[651630]
    {
      const tmp[119879] "const" "temp"
      unknown call_tmp[651637] "expr temp" "maybe param" "maybe type" "temp"
      (651640 'move' call_tmp[651637](382797 call _instance _mt[243] this[125962]))
      unknown call_tmp[651642] "expr temp" "maybe param" "maybe type" "temp"
      (651645 'move' call_tmp[651642](119876 '_wide_get_locale' call_tmp[651637]))
      (119881 'move' tmp[119879](119877 'deref' call_tmp[651642]))
      (935327 call on_fn[935323] tmp[119879])
      function on_fn[935323](const in arg dummy_locale_arg[935325]:chpl_localeID_t[209352]) : void[4] "on"
      {
        {
          unknown call_tmp[651649] "maybe param" "maybe type" "temp"
          (651652 'move' call_tmp[651649](382802 call _instance _mt[243] this[125962]))
          const inst[119777] "dead at end of block" "const" "insert auto destroy"
          (542969 'init var' inst[119777] call_tmp[651649])
          (119780 'end of statement')
          unknown call_tmp[651656] "maybe param" "maybe type" "temp"
          (651659 'move' call_tmp[651656](119792 call(119788 call (partial) remove _mt[243] inst[119777])))
          unknown tmp[119793] "dead at end of block" "insert auto destroy" "temp"
          (542971 'init var' tmp[119793] call_tmp[651656])
          (119800 call _check_tuple_var_decl tmp[119793] 2)
          (479622 'end of statement')
          unknown call_tmp[651661] "maybe param" "maybe type" "temp"
          (651664 'move' call_tmp[651661](119794 call tmp[119793] 0))
          unknown domToFree[119782] "dead at end of block" "insert auto destroy"
          (542973 'init var' domToFree[119782] call_tmp[651661])
          unknown call_tmp[651666] "maybe param" "maybe type" "temp"
          (651669 'move' call_tmp[651666](119797 call tmp[119793] 1))
          unknown distToRemove[119784] "dead at end of block" "insert auto destroy"
          (542975 'init var' distToRemove[119784] call_tmp[651666])
          (119805 'end of statement')
          unknown distToFree[119810] "dead at end of block" "insert auto destroy"
          (542977 'init var' distToFree[119810] nil[44] unmanaged BaseDist?[415575])
          (119813 'end of statement')
          unknown call_tmp[651671] "expr temp" "maybe param" "maybe type" "temp"
          (651674 'move' call_tmp[651671](119816 call != distToRemove[119784] nil[44]))
          unknown call_tmp[651676] "expr temp" "maybe param" "maybe type" "temp"
          (651679 'move' call_tmp[651676](119831 call _cond_test call_tmp[651671]))
          if call_tmp[651676]
          {
            unknown call_tmp[651681] "expr temp" "maybe param" "maybe type" "temp"
            (651684 'move' call_tmp[651681](119820 call postfix! distToRemove[119784]))
            unknown call_tmp[651688] "expr temp" "maybe param" "maybe type" "temp"
            (651691 'move' call_tmp[651688](119826 call(119822 call (partial) remove _mt[243] call_tmp[651681])))
            (119827 call = distToFree[119810] call_tmp[651688])
            (479623 'end of statement' distToFree[119810] distToRemove[119784])
          }
          unknown call_tmp[651693] "expr temp" "maybe param" "maybe type" "temp"
          (651696 'move' call_tmp[651693](119837 call != domToFree[119782] nil[44]))
          unknown call_tmp[651698] "expr temp" "maybe param" "maybe type" "temp"
          (651701 'move' call_tmp[651698](119848 call _cond_test call_tmp[651693]))
          if call_tmp[651698]
          {
            unknown call_tmp[651703] "expr temp" "maybe param" "maybe type" "temp"
            (651706 'move' call_tmp[651703](119845 call _isPrivatized inst[119777]))
            (119846 call _delete_dom inst[119777] call_tmp[651703])
            (479626 'end of statement' inst[119777] inst[119777])
          }
          unknown call_tmp[651708] "expr temp" "maybe param" "maybe type" "temp"
          (651711 'move' call_tmp[651708](119855 call != distToFree[119810] nil[44]))
          unknown call_tmp[651713] "expr temp" "maybe param" "maybe type" "temp"
          (651716 'move' call_tmp[651713](119871 call _cond_test call_tmp[651708]))
          if call_tmp[651713]
          {
            unknown call_tmp[651718] "expr temp" "maybe param" "maybe type" "temp"
            (651721 'move' call_tmp[651718](119859 call postfix! distToFree[119810]))
            unknown call_tmp[651725] "expr temp" "maybe param" "maybe type" "temp"
            (651728 'move' call_tmp[651725](119864 call dist _mt[243] inst[119777]))
            unknown call_tmp[651730] "expr temp" "maybe param" "maybe type" "temp"
            (651733 'move' call_tmp[651730](119868 call _isPrivatized call_tmp[651725]))
            (119869 call _delete_dist call_tmp[651718] call_tmp[651730])
            (479629 'end of statement' distToFree[119810] inst[119777])
          }
        }
        (935330 return _void[55])
      }
      {
      }
    }
    {
    }
    (516712 return _void[55])
  }
  function _domain[125908](?).deinit[119898](arg _mt[125968]:_MT[238], arg this[125966]:_domain[125908](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (119902 call(382815 call (partial) _do_destroy _mt[243] this[125966]))
    (516714 return _void[55])
  }
  function _domain[125908](?).dist[119909](arg _mt[125972]:_MT[238], arg this[125970]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[516718] "RVV" "temp"
    unknown call_tmp[651739] "expr temp" "maybe param" "maybe type" "temp"
    (651742 'move' call_tmp[651739](359372 call _value _mt[243] this[125970]))
    unknown call_tmp[651746] "expr temp" "maybe param" "maybe type" "temp"
    (651749 'move' call_tmp[651746](119913 call dist _mt[243] call_tmp[651739]))
    unknown call_tmp[651751] "expr temp" "maybe param" "maybe type" "temp"
    (651754 'move' call_tmp[651751](119917 call _getDistribution call_tmp[651746]))
    (516723 'move' ret[516718](516722 'deref' call_tmp[651751]))
    (516720 return ret[516718])
  }
  function _domain[125908](?).rank[119925](arg _mt[125976]:_MT[238], arg this[125974]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516727] "RVV" "param" "temp"
    unknown tmp[424559] "maybe param" "temp"
    (424570 'move' tmp[424559](119930 call isRectangularDom this[125974]))
    unknown call_tmp[651756] "expr temp" "maybe param" "maybe type" "temp"
    (651759 'move' call_tmp[651756](424572 call _cond_invalid tmp[424559]))
    if call_tmp[651756]
    {
      (424575 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565017] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565018] "maybe param" "temp"
    unknown call_tmp[651761] "expr temp" "maybe param" "maybe type" "temp"
    (651764 'move' call_tmp[651761](424560 call isTrue tmp[424559]))
    (565023 'move' tmp[565018](565021 call _cond_test call_tmp[651761]))
    if tmp[565018]
    {
      (565028 'move' tmp[565017](565025 '_paramFoldLogical' tmp[565018] 1))
    }
    {
      unknown tmp[565030] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651766] "expr temp" "maybe param" "maybe type" "temp"
      (651769 'move' call_tmp[651766](119934 call isSparseDom this[125974]))
      (565032 'move' tmp[565030](424564 call isTrue call_tmp[651766]))
      (565037 'move' tmp[565017](565034 '_paramFoldLogical' tmp[565018] tmp[565030]))
    }
    unknown call_tmp[651771] "expr temp" "maybe param" "maybe type" "temp"
    (651774 'move' call_tmp[651771](119946 call _cond_test tmp[565017]))
    if call_tmp[651771]
    {
      unknown call_tmp[651778] "expr temp" "maybe param" "maybe type" "temp"
      (651781 'move' call_tmp[651778](359376 call _value _mt[243] this[125974]))
      unknown call_tmp[651785] "expr temp" "maybe param" "maybe type" "temp"
      (651788 'move' call_tmp[651785](119938 call rank _mt[243] call_tmp[651778]))
      (516732 'move' ret[516727](516731 'deref' call_tmp[651785]))
      gotoReturn _end_rank[516725] _end_rank[516725]
    }
    {
      (516737 'move' ret[516727](516736 'deref' 1))
      gotoReturn _end_rank[516725] _end_rank[516725]
    }
    label _end_rank[516725]
    (516729 return ret[516727])
  }
  function _domain[125908](?).idxType[119957](arg _mt[125980]:_MT[238], arg this[125978]:_domain[125908](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516743] "RVV" "temp" "type variable"
    unknown call_tmp[651792] "expr temp" "maybe param" "maybe type" "temp"
    (651795 'move' call_tmp[651792](359380 call _value _mt[243] this[125978]))
    unknown call_tmp[651799] "expr temp" "maybe param" "maybe type" "temp"
    (651802 'move' call_tmp[651799](119960 call idxType _mt[243] call_tmp[651792]))
    (516748 'move' ret[516743](516747 'deref' call_tmp[651799]))
    (516745 return ret[516743])
  }
  function _domain[125908](?).intIdxType[119970](arg _mt[125984]:_MT[238], arg this[125982]:_domain[125908](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516752] "RVV" "temp" "type variable"
    unknown call_tmp[651806] "expr temp" "maybe param" "maybe type" "temp"
    (651809 'move' call_tmp[651806](359384 call _value _mt[243] this[125982]))
    unknown call_tmp[651813] "expr temp" "maybe param" "maybe type" "temp"
    (651816 'move' call_tmp[651813](119974 call idxType _mt[243] call_tmp[651806]))
    unknown call_tmp[651818] "expr temp" "maybe param" "maybe type" "temp"
    (651821 'move' call_tmp[651818](119978 call chpl__idxTypeToIntIdxType call_tmp[651813]))
    (516757 'move' ret[516752](516756 'deref' call_tmp[651818]))
    (516754 return ret[516752])
  }
  function _domain[125908](?).stridable[119986](arg _mt[125988]:_MT[238], arg this[125986]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516761] "RVV" "param" "temp"
    unknown call_tmp[651825] "expr temp" "maybe param" "maybe type" "temp"
    (651828 'move' call_tmp[651825](359388 call _value _mt[243] this[125986]))
    unknown call_tmp[651832] "expr temp" "maybe param" "maybe type" "temp"
    (651835 'move' call_tmp[651832](119993 call stridable _mt[243] call_tmp[651825]))
    (516766 'move' ret[516761](516765 'deref' call_tmp[651832]))
    (516763 return ret[516761])
  }
  where {
    (119991 call isRectangularDom this[125986])
  }
  function _domain[125908](?).stridable[120004](arg _mt[125992]:_MT[238], arg this[125990]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516770] "RVV" "param" "temp"
    unknown call_tmp[651839] "expr temp" "maybe param" "maybe type" "temp"
    (651842 'move' call_tmp[651839](359392 call _value _mt[243] this[125990]))
    unknown call_tmp[651846] "expr temp" "maybe param" "maybe type" "temp"
    (651849 'move' call_tmp[651846](120011 call parentDom _mt[243] call_tmp[651839]))
    unknown call_tmp[651853] "expr temp" "maybe param" "maybe type" "temp"
    (651856 'move' call_tmp[651853](120014 call stridable _mt[243] call_tmp[651846]))
    (516775 'move' ret[516770](516774 'deref' call_tmp[651853]))
    (516772 return ret[516770])
  }
  where {
    (120009 call isSparseDom this[125990])
  }
  function _domain[125908](?).stridable[120025](arg _mt[125996]:_MT[238], arg this[125994]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (120050 call compilerError "associative domains do not support .stridable")
    (516777 return _void[55])
  }
  where {
    (120030 call isAssociativeDom this[125994])
  }
  function _domain[125908](?).these[120058](arg _mt[126000]:_MT[238], arg this[125998]:_domain[125908](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[516781] "RVV" "temp"
    {
      unknown _indexOfInterest[120071] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120072] "expr temp" "temp"
      unknown call_tmp[651860] "expr temp" "maybe param" "maybe type" "temp"
      (651863 'move' call_tmp[651860](359396 call _value _mt[243] this[125998]))
      unknown call_tmp[651867] "expr temp" "maybe param" "maybe type" "temp"
      (651870 'move' call_tmp[651867](120066 call(120062 call (partial) these _mt[243] call_tmp[651860])))
      (120081 'move' _iterator[120072](120079 call _getIterator call_tmp[651867]))
      Defer
      {
        {
          (120098 call _freeIterator _iterator[120072])
        }
      }
      { scopeless type
        (120087 'move' _indexOfInterest[120071](120084 call iteratorIndex _iterator[120072]))
      }
      ForLoop[120073]
      {
        unknown i[120091] "index var" "insert auto destroy"
        (479643 'end of statement')
        (120093 'move' i[120091] _indexOfInterest[120071])
        (479644 'end of statement' i[120091])
        {
          unknown yret[516785] "YVV" "temp"
          (516788 'move' yret[516785](516787 'deref' i[120091]))
          (516790 yield yret[516785])
          (479646 'end of statement' i[120091])
        }
        label _continueLabel[120076]
        _indexOfInterest[120071]
        _iterator[120072]
      }
      label _breakLabel[120077]
    }
    (516783 return ret[516781])
  }
  function _domain[125908](?).these[120114](arg _mt[126004]:_MT[238], arg this[126002]:_domain[125908](?), param arg tag[120111]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516794] "RVV" "temp"
    {
      unknown _indexOfInterest[120173] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120174] "expr temp" "temp"
      unknown call_tmp[651874] "expr temp" "maybe param" "maybe type" "temp"
      (651877 'move' call_tmp[651874](359401 call _value _mt[243] this[126002]))
      unknown call_tmp[651881] "expr temp" "maybe param" "maybe type" "temp"
      (651884 'move' call_tmp[651881](120169 call(120164 call (partial) these _mt[243] call_tmp[651874]) tag[120111]))
      (120183 'move' _iterator[120174](120181 call _getIterator call_tmp[651881]))
      Defer
      {
        {
          (120200 call _freeIterator _iterator[120174])
        }
      }
      { scopeless type
        (120189 'move' _indexOfInterest[120173](120186 call iteratorIndex _iterator[120174]))
      }
      ForLoop[120175]
      {
        unknown i[120193] "index var" "insert auto destroy"
        (479649 'end of statement')
        (120195 'move' i[120193] _indexOfInterest[120173])
        (479650 'end of statement' i[120193])
        unknown yret[516798] "YVV" "temp"
        (516801 'move' yret[516798](516800 'deref' i[120193]))
        (516803 yield yret[516798])
        (479652 'end of statement' i[120193])
        label _continueLabel[120178]
        _indexOfInterest[120173]
        _iterator[120174]
      }
      label _breakLabel[120179]
    }
    (516796 return ret[516794])
  }
  where {
    unknown tmp[424580] "maybe param" "temp"
    (424591 'move' tmp[424580](120121 call == tag[120111] standalone[451]))
    unknown call_tmp[651886] "expr temp" "maybe param" "maybe type" "temp"
    (651889 'move' call_tmp[651886](424593 call _cond_invalid tmp[424580]))
    if call_tmp[651886]
    {
      (424596 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565044] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565045] "maybe param" "temp"
    unknown call_tmp[651891] "expr temp" "maybe param" "maybe type" "temp"
    (651894 'move' call_tmp[651891](424581 call isTrue tmp[424580]))
    (565050 'move' tmp[565045](565048 call _cond_test call_tmp[651891]))
    if tmp[565045]
    {
      unknown tmp[565052] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651898] "expr temp" "maybe param" "maybe type" "temp"
      (651901 'move' call_tmp[651898](382827 call _value _mt[243] this[126002]))
      unknown call_tmp[651903] "expr temp" "maybe param" "maybe type" "temp"
      (651906 'move' call_tmp[651903](120159 'method call resolves' call_tmp[651898] "these"(tag = tag[120111])))
      (565054 'move' tmp[565052](424584 call isTrue call_tmp[651903]))
      (565059 'move' tmp[565044](565056 '_paramFoldLogical' tmp[565045] tmp[565052]))
    }
    {
      (565064 'move' tmp[565044](565061 '_paramFoldLogical' tmp[565045] 0))
    }
    (748449 call chpl_statementLevelSymbol tmp[565044])
  }
  function _domain[125908](?).these[120217](arg _mt[126008]:_MT[238], arg this[126006]:_domain[125908](?), param arg tag[120214]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516807] "RVV" "temp"
    {
      unknown _indexOfInterest[120237] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120238] "expr temp" "temp"
      unknown call_tmp[651910] "expr temp" "maybe param" "maybe type" "temp"
      (651913 'move' call_tmp[651910](359406 call _value _mt[243] this[126006]))
      unknown call_tmp[651917] "expr temp" "maybe param" "maybe type" "temp"
      (651920 'move' call_tmp[651917](120233 call(120228 call (partial) these _mt[243] call_tmp[651910]) tag[120214]))
      (120247 'move' _iterator[120238](120245 call _getIterator call_tmp[651917]))
      Defer
      {
        {
          (120264 call _freeIterator _iterator[120238])
        }
      }
      { scopeless type
        (120253 'move' _indexOfInterest[120237](120250 call iteratorIndex _iterator[120238]))
      }
      ForLoop[120239]
      {
        unknown followThis[120257] "index var" "insert auto destroy"
        (479655 'end of statement')
        (120259 'move' followThis[120257] _indexOfInterest[120237])
        (479656 'end of statement' followThis[120257])
        unknown yret[516811] "YVV" "temp"
        (516814 'move' yret[516811](516813 'deref' followThis[120257]))
        (516816 yield yret[516811])
        (479658 'end of statement' followThis[120257])
        label _continueLabel[120242]
        _indexOfInterest[120237]
        _iterator[120238]
      }
      label _breakLabel[120243]
    }
    (516809 return ret[516807])
  }
  where {
    (120224 call == tag[120214] leader[447])
  }
  function _domain[125908](?).these[120281](arg _mt[126012]:_MT[238], arg this[126010]:_domain[125908](?), param arg tag[120278]:iterKind[453], arg followThis[120283]:_any[178](?), param arg fast[120287]:bool[10] =
  0) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516820] "RVV" "temp"
    unknown call_tmp[651924] "expr temp" "maybe param" "maybe type" "temp"
    (651927 'move' call_tmp[651924](382840 call _value _mt[243] this[126010]))
    unknown call_tmp[651929] "expr temp" "maybe param" "maybe type" "temp"
    (651932 'move' call_tmp[651929](120307 'method call resolves' call_tmp[651924] "these"(tag = tag[120278]) followThis[120283](fast = fast[120287])))
    unknown call_tmp[651934] "expr temp" "maybe param" "maybe type" "temp"
    (651937 'move' call_tmp[651934](120405 call _cond_test call_tmp[651929]))
    if call_tmp[651934]
    {
      {
        unknown _indexOfInterest[120323] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120324] "expr temp" "temp"
        unknown call_tmp[651941] "expr temp" "maybe param" "maybe type" "temp"
        (651944 'move' call_tmp[651941](359411 call _value _mt[243] this[126010]))
        unknown call_tmp[651948] "expr temp" "maybe param" "maybe type" "temp"
        (651951 'move' call_tmp[651948](120319 call(120310 call (partial) these _mt[243] call_tmp[651941])(tag = tag[120278]) followThis[120283](fast = fast[120287])))
        (120333 'move' _iterator[120324](120331 call _getIterator call_tmp[651948]))
        Defer
        {
          {
            (120350 call _freeIterator _iterator[120324])
          }
        }
        { scopeless type
          (120339 'move' _indexOfInterest[120323](120336 call iteratorIndex _iterator[120324]))
        }
        ForLoop[120325]
        {
          unknown i[120343] "index var" "insert auto destroy"
          (479661 'end of statement')
          (120345 'move' i[120343] _indexOfInterest[120323])
          (479662 'end of statement' i[120343])
          unknown yret[516824] "YVV" "temp"
          (516827 'move' yret[516824](516826 'deref' i[120343]))
          (516829 yield yret[516824])
          (479664 'end of statement' i[120343])
          label _continueLabel[120328]
          _indexOfInterest[120323]
          _iterator[120324]
        }
        label _breakLabel[120329]
      }
    }
    {
      {
        unknown _indexOfInterest[120370] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120371] "expr temp" "temp"
        unknown call_tmp[651955] "expr temp" "maybe param" "maybe type" "temp"
        (651958 'move' call_tmp[651955](359415 call _value _mt[243] this[126010]))
        unknown call_tmp[651962] "expr temp" "maybe param" "maybe type" "temp"
        (651965 'move' call_tmp[651962](120366 call(120360 call (partial) these _mt[243] call_tmp[651955]) tag[120278] followThis[120283]))
        (120380 'move' _iterator[120371](120378 call _getIterator call_tmp[651962]))
        Defer
        {
          {
            (120397 call _freeIterator _iterator[120371])
          }
        }
        { scopeless type
          (120386 'move' _indexOfInterest[120370](120383 call iteratorIndex _iterator[120371]))
        }
        ForLoop[120372]
        {
          unknown i[120390] "index var" "insert auto destroy"
          (479667 'end of statement')
          (120392 'move' i[120390] _indexOfInterest[120370])
          (479668 'end of statement' i[120390])
          unknown yret[516831] "YVV" "temp"
          (516834 'move' yret[516831](516833 'deref' i[120390]))
          (516836 yield yret[516831])
          (479670 'end of statement' i[120390])
          label _continueLabel[120375]
          _indexOfInterest[120370]
          _iterator[120371]
        }
        label _breakLabel[120376]
      }
    }
    (516822 return ret[516820])
  }
  where {
    (120296 call == tag[120278] follower[449])
  }
  function _domain[125908](?).this[120419](arg _mt[126016]:_MT[238], arg this[126014]:_domain[125908](?), arg d[120416]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516840] "RVV" "temp"
    unknown call_tmp[651969] "expr temp" "maybe param" "maybe type" "temp"
    (651972 'move' call_tmp[651969](120422 call rank _mt[243] d[120416]))
    unknown call_tmp[651976] "expr temp" "maybe param" "maybe type" "temp"
    (651979 'move' call_tmp[651976](382855 call rank _mt[243] this[126014]))
    unknown call_tmp[651981] "expr temp" "maybe param" "maybe type" "temp"
    (651984 'move' call_tmp[651981](120426 call == call_tmp[651969] call_tmp[651976]))
    unknown call_tmp[651986] "expr temp" "maybe param" "maybe type" "temp"
    (651989 'move' call_tmp[651986](120461 call _cond_test call_tmp[651981]))
    if call_tmp[651986]
    {
      unknown call_tmp[651993] "expr temp" "maybe param" "maybe type" "temp"
      (651996 'move' call_tmp[651993](120434 call(120430 call (partial) getIndices _mt[243] d[120416])))
      unknown call_tmp[651998] "expr temp" "maybe param" "maybe type" "temp"
      (652001 'move' call_tmp[651998](120437 call this[126014](120435 'expand_tuple' call_tmp[651993])))
      (516845 'move' ret[516840](516844 'deref' call_tmp[651998]))
      gotoReturn _end_this[516838] _end_this[516838]
    }
    {
      (120459 call compilerError "slicing a domain with a domain of a different rank")
    }
    label _end_this[516838]
    (516842 return ret[516840])
  }
  function _domain[125908](?).this[120476](arg _mt[126020]:_MT[238], arg this[126018]:_domain[125908](?), arg ranges[120473]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516851] "RVV" "temp"
    unknown tmp[424601] "maybe param" "temp"
    unknown call_tmp[652007] "expr temp" "maybe param" "maybe type" "temp"
    (652010 'move' call_tmp[652007](359421 call _value _mt[243] this[126018]))
    (424612 'move' tmp[424601](120483 call stridable _mt[243] call_tmp[652007]))
    unknown call_tmp[652014] "expr temp" "maybe param" "maybe type" "temp"
    (652017 'move' call_tmp[652014](424614 call _cond_invalid tmp[424601]))
    if call_tmp[652014]
    {
      (424617 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown stridable[120492] "dead at end of block" "param"
    unknown tmp[565071] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565072] "maybe param" "temp"
    unknown call_tmp[652019] "expr temp" "maybe param" "maybe type" "temp"
    (652022 'move' call_tmp[652019](424602 call isTrue tmp[424601]))
    (565077 'move' tmp[565072](565075 call _cond_test call_tmp[652019]))
    if tmp[565072]
    {
      (565082 'move' tmp[565071](565079 '_paramFoldLogical' tmp[565072] 1))
    }
    {
      unknown tmp[565084] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652024] "expr temp" "maybe param" "maybe type" "temp"
      (652027 'move' call_tmp[652024](120489 call chpl__anyStridable ranges[120473]))
      (565086 'move' tmp[565084](424606 call isTrue call_tmp[652024]))
      (565091 'move' tmp[565071](565088 '_paramFoldLogical' tmp[565072] tmp[565084]))
    }
    (542979 'init var' stridable[120492] tmp[565071])
    (120495 'end of statement')
    unknown r[120512] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652031] "expr temp" "maybe param" "maybe type" "temp"
    (652034 'move' call_tmp[652031](382866 call rank _mt[243] this[126018]))
    unknown call_tmp[652038] "expr temp" "maybe param" "maybe type" "temp"
    (652041 'move' call_tmp[652038](359425 call _value _mt[243] this[126018]))
    unknown call_tmp[652045] "expr temp" "maybe param" "maybe type" "temp"
    (652048 'move' call_tmp[652045](120500 call idxType _mt[243] call_tmp[652038]))
    unknown call_tmp[652050] "expr temp" "maybe param" "maybe type" "temp"
    (652053 'move' call_tmp[652050](120509 call range[64319](?) call_tmp[652045] bounded[64208] stridable[120492]))
    unknown call_tmp[652055] "expr temp" "maybe param" "maybe type" "temp"
    (652058 'move' call_tmp[652055](120510 call * call_tmp[652031] call_tmp[652050]))
    (542981 'default init var' r[120512] call_tmp[652055])
    (120515 'end of statement')
    {
      unknown i[120544] "dead at end of block" "insert auto destroy"
      (542983 'init var' i[120544] 0)
      (479675 'end of statement')
      unknown tmp[120545] "maybe param" "temp"
      unknown call_tmp[652062] "expr temp" "maybe param" "maybe type" "temp"
      (652065 'move' call_tmp[652062](382872 call rank _mt[243] this[126018]))
      unknown call_tmp[652067] "expr temp" "maybe param" "maybe type" "temp"
      (652070 'move' call_tmp[652067](120519 call - call_tmp[652062] 1))
      (120557 'move' tmp[120545](120555 call chpl_compute_low_param_loop_bound 0 call_tmp[652067]))
      unknown tmp[120546] "maybe param" "temp"
      unknown call_tmp[652074] "expr temp" "maybe param" "maybe type" "temp"
      (652077 'move' call_tmp[652074](382881 call rank _mt[243] this[126018]))
      unknown call_tmp[652079] "expr temp" "maybe param" "maybe type" "temp"
      (652082 'move' call_tmp[652079](120562 call - call_tmp[652074] 1))
      (120567 'move' tmp[120546](120565 call chpl_compute_high_param_loop_bound 0 call_tmp[652079]))
      unknown tmp[120547] "maybe param" "temp"
      (120570 'move' tmp[120547] 1)
      ParamForLoop[120572]
      { i[120544] tmp[120545] tmp[120546] tmp[120547]
        {
          unknown call_tmp[652084] "expr temp" "maybe param" "maybe type" "temp"
          (652087 'move' call_tmp[652084](120526 call r[120512] i[120544]))
          unknown call_tmp[652091] "expr temp" "maybe param" "maybe type" "temp"
          (652094 'move' call_tmp[652091](359430 call _value _mt[243] this[126018]))
          unknown call_tmp[652098] "expr temp" "maybe param" "maybe type" "temp"
          (652101 'move' call_tmp[652098](120533 call(120528 call (partial) dsiDim _mt[243] call_tmp[652091]) i[120544]))
          unknown call_tmp[652103] "expr temp" "maybe param" "maybe type" "temp"
          (652106 'move' call_tmp[652103](120537 call ranges[120473] i[120544]))
          unknown call_tmp[652108] "expr temp" "maybe param" "maybe type" "temp"
          (652111 'move' call_tmp[652108](120539 call call_tmp[652098] call_tmp[652103]))
          (120540 call = call_tmp[652084] call_tmp[652108])
          (479676 'end of statement' r[120512] i[120544] i[120544] i[120544])
        }
      }
      label _unused_continueLabel[120549]
      label _breakLabel[120548]
    }
    unknown call_tmp[652115] "expr temp" "maybe param" "maybe type" "temp"
    (652118 'move' call_tmp[652115](382886 call dist _mt[243] this[126018]))
    unknown call_tmp[652122] "expr temp" "maybe param" "maybe type" "temp"
    (652125 'move' call_tmp[652122](382890 call rank _mt[243] this[126018]))
    unknown call_tmp[652129] "expr temp" "maybe param" "maybe type" "temp"
    (652132 'move' call_tmp[652129](359434 call _value _mt[243] this[126018]))
    unknown call_tmp[652136] "expr temp" "maybe param" "maybe type" "temp"
    (652139 'move' call_tmp[652136](120587 call idxType _mt[243] call_tmp[652129]))
    unknown call_tmp[652141] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652144 'move' call_tmp[652141](748058 'new' _domain[125908](?) call_tmp[652115] call_tmp[652122] call_tmp[652136] stridable[120492] r[120512]))
    (516856 'move' ret[516851](516855 'deref' call_tmp[652141]))
    gotoReturn _end_this[516849] _end_this[516849]
    (479681 'end of statement' r[120512])
    label _end_this[516849]
    (516853 return ret[516851])
  }
  where {
    (120481 call chpl__isTupleOfRanges ranges[120473])
  }
  function _domain[125908](?).this[120604](arg _mt[126024]:_MT[238], arg this[126022]:_domain[125908](?), arg args[120601]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516862] "RVV" "temp"
    unknown collapsedDim[120618] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652150] "expr temp" "maybe param" "maybe type" "temp"
    (652153 'move' call_tmp[652150](382901 call rank _mt[243] this[126022]))
    unknown call_tmp[652155] "expr temp" "maybe param" "maybe type" "temp"
    (652158 'move' call_tmp[652155](120616 call * call_tmp[652150] bool[10]))
    (542985 'default init var' collapsedDim[120618] call_tmp[652155])
    (120621 'end of statement')
    unknown idx[120627] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652162] "expr temp" "maybe param" "maybe type" "temp"
    (652165 'move' call_tmp[652162](382905 call rank _mt[243] this[126022]))
    unknown call_tmp[652169] "expr temp" "maybe param" "maybe type" "temp"
    (652172 'move' call_tmp[652169](382909 call idxType _mt[243] this[126022]))
    unknown call_tmp[652174] "expr temp" "maybe param" "maybe type" "temp"
    (652177 'move' call_tmp[652174](120625 call * call_tmp[652162] call_tmp[652169]))
    (542987 'default init var' idx[120627] call_tmp[652174])
    (120630 'end of statement')
    unknown call_tmp[652179] "maybe param" "maybe type" "temp"
    (652182 'move' call_tmp[652179](120635 call chpl__countRanges(120633 'expand_tuple' args[120601])))
    unknown uprank[120636] "dead at end of block" "param"
    (542989 'init var' uprank[120636] call_tmp[652179])
    (120639 'end of statement')
    unknown tmp[424622] "maybe param" "temp"
    (424633 'move' tmp[424622](120641 call stridable _mt[243] this[126022]))
    unknown call_tmp[652186] "expr temp" "maybe param" "maybe type" "temp"
    (652189 'move' call_tmp[652186](424635 call _cond_invalid tmp[424622]))
    if call_tmp[652186]
    {
      (424638 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown upstridable[120650] "dead at end of block" "param"
    unknown tmp[565098] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565099] "maybe param" "temp"
    unknown call_tmp[652191] "expr temp" "maybe param" "maybe type" "temp"
    (652194 'move' call_tmp[652191](424623 call isTrue tmp[424622]))
    (565104 'move' tmp[565099](565102 call _cond_test call_tmp[652191]))
    if tmp[565099]
    {
      (565109 'move' tmp[565098](565106 '_paramFoldLogical' tmp[565099] 1))
    }
    {
      unknown tmp[565111] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652196] "expr temp" "maybe param" "maybe type" "temp"
      (652199 'move' call_tmp[652196](120647 call chpl__anyRankChangeStridable args[120601]))
      (565113 'move' tmp[565111](424627 call isTrue call_tmp[652196]))
      (565118 'move' tmp[565098](565115 '_paramFoldLogical' tmp[565099] tmp[565111]))
    }
    (542991 'init var' upstridable[120650] tmp[565098])
    (120653 'end of statement')
    unknown upranges[120667] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652203] "expr temp" "maybe param" "maybe type" "temp"
    (652206 'move' call_tmp[652203](359443 call _value _mt[243] this[126022]))
    unknown call_tmp[652210] "expr temp" "maybe param" "maybe type" "temp"
    (652213 'move' call_tmp[652210](120657 call idxType _mt[243] call_tmp[652203]))
    unknown call_tmp[652215] "expr temp" "maybe param" "maybe type" "temp"
    (652218 'move' call_tmp[652215](120664 call range[64319](?)(idxType = call_tmp[652210])(stridable = upstridable[120650])))
    unknown call_tmp[652220] "expr temp" "maybe param" "maybe type" "temp"
    (652223 'move' call_tmp[652220](120665 call * uprank[120636] call_tmp[652215]))
    (542993 'default init var' upranges[120667] call_tmp[652220])
    (120670 'end of statement')
    unknown updim[120672] "dead at end of block" "insert auto destroy"
    (542995 'init var' updim[120672] 0)
    (120675 'end of statement')
    {
      unknown i[120766] "dead at end of block" "insert auto destroy"
      (542997 'init var' i[120766] 0)
      (479684 'end of statement')
      unknown tmp[120767] "maybe param" "temp"
      unknown call_tmp[652227] "expr temp" "maybe param" "maybe type" "temp"
      (652230 'move' call_tmp[652227](382918 call rank _mt[243] this[126022]))
      unknown call_tmp[652232] "expr temp" "maybe param" "maybe type" "temp"
      (652235 'move' call_tmp[652232](120679 call - call_tmp[652227] 1))
      (120779 'move' tmp[120767](120777 call chpl_compute_low_param_loop_bound 0 call_tmp[652232]))
      unknown tmp[120768] "maybe param" "temp"
      unknown call_tmp[652239] "expr temp" "maybe param" "maybe type" "temp"
      (652242 'move' call_tmp[652239](382945 call rank _mt[243] this[126022]))
      unknown call_tmp[652244] "expr temp" "maybe param" "maybe type" "temp"
      (652247 'move' call_tmp[652244](120784 call - call_tmp[652239] 1))
      (120789 'move' tmp[120768](120787 call chpl_compute_high_param_loop_bound 0 call_tmp[652244]))
      unknown tmp[120769] "maybe param" "temp"
      (120792 'move' tmp[120769] 1)
      ParamForLoop[120794]
      { i[120766] tmp[120767] tmp[120768] tmp[120769]
        {
          unknown call_tmp[652249] "expr temp" "maybe param" "maybe type" "temp"
          (652252 'move' call_tmp[652249](120687 call args[120601] i[120766]))
          unknown call_tmp[652254] "expr temp" "maybe param" "maybe type" "temp"
          (652257 'move' call_tmp[652254](120689 call isRange call_tmp[652249]))
          unknown call_tmp[652259] "expr temp" "maybe param" "maybe type" "temp"
          (652262 'move' call_tmp[652259](120761 call _cond_test call_tmp[652254]))
          if call_tmp[652259]
          {
            unknown call_tmp[652264] "expr temp" "maybe param" "maybe type" "temp"
            (652267 'move' call_tmp[652264](120693 call collapsedDim[120618] i[120766]))
            (120695 call = call_tmp[652264] 0)
            (479685 'end of statement' collapsedDim[120618] i[120766])
            unknown call_tmp[652269] "expr temp" "maybe param" "maybe type" "temp"
            (652272 'move' call_tmp[652269](120702 call idx[120627] i[120766]))
            unknown call_tmp[652276] "expr temp" "maybe param" "maybe type" "temp"
            (652279 'move' call_tmp[652276](120706 call(382928 call (partial) dim _mt[243] this[126022]) i[120766]))
            unknown call_tmp[652283] "expr temp" "maybe param" "maybe type" "temp"
            (652286 'move' call_tmp[652283](120707 call alignedLow _mt[243] call_tmp[652276]))
            (120710 call = call_tmp[652269] call_tmp[652283])
            (479688 'end of statement' idx[120627] i[120766] i[120766])
            unknown call_tmp[652288] "expr temp" "maybe param" "maybe type" "temp"
            (652291 'move' call_tmp[652288](120716 call upranges[120667] updim[120672]))
            unknown call_tmp[652295] "expr temp" "maybe param" "maybe type" "temp"
            (652298 'move' call_tmp[652295](120718 call _value _mt[243] this[126022]))
            unknown call_tmp[652302] "expr temp" "maybe param" "maybe type" "temp"
            (652305 'move' call_tmp[652302](120726 call(120721 call (partial) dsiDim _mt[243] call_tmp[652295]) i[120766]))
            unknown call_tmp[652307] "expr temp" "maybe param" "maybe type" "temp"
            (652310 'move' call_tmp[652307](120730 call args[120601] i[120766]))
            unknown call_tmp[652312] "expr temp" "maybe param" "maybe type" "temp"
            (652315 'move' call_tmp[652312](120732 call call_tmp[652302] call_tmp[652307]))
            (120733 call = call_tmp[652288] call_tmp[652312])
            (479692 'end of statement' upranges[120667] updim[120672] i[120766] i[120766])
            (120738 call += updim[120672] 1)
            (479697 'end of statement' updim[120672])
          }
          {
            unknown call_tmp[652317] "expr temp" "maybe param" "maybe type" "temp"
            (652320 'move' call_tmp[652317](120744 call collapsedDim[120618] i[120766]))
            (120746 call = call_tmp[652317] 1)
            (479699 'end of statement' collapsedDim[120618] i[120766])
            unknown call_tmp[652322] "expr temp" "maybe param" "maybe type" "temp"
            (652325 'move' call_tmp[652322](120753 call idx[120627] i[120766]))
            unknown call_tmp[652327] "expr temp" "maybe param" "maybe type" "temp"
            (652330 'move' call_tmp[652327](120757 call args[120601] i[120766]))
            (120758 call = call_tmp[652322] call_tmp[652327])
            (479702 'end of statement' idx[120627] i[120766] i[120766])
          }
        }
      }
      label _unused_continueLabel[120771]
      label _breakLabel[120770]
    }
    { scopeless type
      unknown call_type_tmp[492263] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652332] "expr temp" "maybe param" "maybe type" "temp"
      (652335 'move' call_tmp[652332](120806 call upranges[120667] 0))
      (492267 'move' call_type_tmp[492263](120807 'typeof' call_tmp[652332]))
    }
    const emptyrange[120808] "dead at end of block" "const" "insert auto destroy"
    (542999 'default init var' emptyrange[120808] call_type_tmp[492263])
    (120811 'end of statement')
    unknown call_tmp[652339] "expr temp" "maybe param" "maybe type" "temp"
    (652342 'move' call_tmp[652339](120815 call(382950 call (partial) contains _mt[243] this[126022]) idx[120627]))
    unknown call_tmp[652344] "expr temp" "maybe param" "maybe type" "temp"
    (652347 'move' call_tmp[652344](120816 call ! call_tmp[652339]))
    unknown call_tmp[652349] "expr temp" "maybe param" "maybe type" "temp"
    (652352 'move' call_tmp[652349](120871 call _cond_test call_tmp[652344]))
    if call_tmp[652349]
    {
      {
        unknown d[120833] "dead at end of block" "insert auto destroy"
        (543001 'init var' d[120833] 0)
        (479707 'end of statement')
        unknown tmp[120834] "maybe param" "temp"
        unknown call_tmp[652354] "expr temp" "maybe param" "maybe type" "temp"
        (652357 'move' call_tmp[652354](120821 call - uprank[120636] 1))
        (120846 'move' tmp[120834](120844 call chpl_compute_low_param_loop_bound 0 call_tmp[652354]))
        unknown tmp[120835] "maybe param" "temp"
        unknown call_tmp[652359] "expr temp" "maybe param" "maybe type" "temp"
        (652362 'move' call_tmp[652359](120851 call - uprank[120636] 1))
        (120856 'move' tmp[120835](120854 call chpl_compute_high_param_loop_bound 0 call_tmp[652359]))
        unknown tmp[120836] "maybe param" "temp"
        (120859 'move' tmp[120836] 1)
        ParamForLoop[120861]
        { d[120833] tmp[120834] tmp[120835] tmp[120836]
          unknown call_tmp[652364] "expr temp" "maybe param" "maybe type" "temp"
          (652367 'move' call_tmp[652364](120828 call upranges[120667] d[120833]))
          (120830 call = call_tmp[652364] emptyrange[120808])
          (479708 'end of statement' upranges[120667] d[120833] emptyrange[120808])
        }
        label _unused_continueLabel[120838]
        label _breakLabel[120837]
      }
    }
    unknown call_tmp[652371] "expr temp" "maybe param" "maybe type" "temp"
    (652374 'move' call_tmp[652371](359448 call dist _mt[243] this[126022]))
    unknown call_tmp[652378] "expr temp" "maybe param" "maybe type" "temp"
    (652381 'move' call_tmp[652378](120880 call _pid _mt[243] call_tmp[652371]))
    unknown call_tmp[652385] "expr temp" "maybe param" "maybe type" "temp"
    (652388 'move' call_tmp[652385](359452 call dist _mt[243] this[126022]))
    unknown call_tmp[652392] "expr temp" "maybe param" "maybe type" "temp"
    (652395 'move' call_tmp[652392](120886 call _instance _mt[243] call_tmp[652385]))
    unknown call_tmp[652397] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652400 'move' call_tmp[652397](748059 'new' ArrayViewRankChangeDist[382960](?)(downDistPid = call_tmp[652378])(downDistInst = call_tmp[652392])(collapsedDim = collapsedDim[120618])(idx = idx[120627])(_chpl_manager = unmanaged[220](?))))
    const rcdist[120895] "dead at end of block" "const" "insert auto destroy"
    (543003 'init var' rcdist[120895] call_tmp[652397])
    (120898 'end of statement')
    unknown call_tmp[652402] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652405 'move' call_tmp[652402](748060 'new' _distribution[118973](?) rcdist[120895]))
    const rcdistRec[120904] "dead at end of block" "const" "insert auto destroy"
    (543005 'init var' rcdistRec[120904] call_tmp[652402])
    (120907 'end of statement' upranges[120667] collapsedDim[120618] idx[120627] rcdist[120895])
    unknown call_tmp[652407] "expr temp" "maybe param" "maybe type" "temp"
    (652410 'move' call_tmp[652407](120916 call upranges[120667] 0))
    unknown call_tmp[652414] "expr temp" "maybe param" "maybe type" "temp"
    (652417 'move' call_tmp[652414](120917 call idxType _mt[243] call_tmp[652407]))
    unknown call_tmp[652419] "expr temp" "maybe param" "maybe type" "temp"
    (652422 'move' call_tmp[652419](120923 call upranges[120667] 0))
    unknown call_tmp[652426] "expr temp" "maybe param" "maybe type" "temp"
    (652429 'move' call_tmp[652426](120924 call stridable _mt[243] call_tmp[652419]))
    unknown call_tmp[652431] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652434 'move' call_tmp[652431](748061 'new' _domain[125908](?) rcdistRec[120904] uprank[120636] call_tmp[652414] call_tmp[652426] upranges[120667]))
    (516867 'move' ret[516862](516866 'deref' call_tmp[652431]))
    gotoReturn _end_this[516860] _end_this[516860]
    (479715 'end of statement' rcdistRec[120904] upranges[120667] upranges[120667] upranges[120667])
    label _end_this[516860]
    (516864 return ret[516862])
  }
  where {
    unknown call_tmp[652438] "expr temp" "maybe param" "maybe type" "temp"
    (652441 'move' call_tmp[652438](359438 call _value _mt[243] this[126022]))
    unknown call_tmp[652445] "expr temp" "maybe param" "maybe type" "temp"
    (652448 'move' call_tmp[652445](120610 call idxType _mt[243] call_tmp[652438]))
    (120613 call _validRankChangeArgs args[120601] call_tmp[652445])
  }
  function _domain[125908](?).this[120942](arg _mt[126028]:_MT[238], arg this[126026]:_domain[125908](?), arg i[120938]:integral[199](?) ...) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (120963 call compilerError "domain slice requires a range in at least one dimension")
    (516871 return _void[55])
  }
  function _domain[125908](?).this[120975](arg _mt[126032]:_MT[238], arg this[126030]:_domain[125908](?), arg args[120972]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[652454] "expr temp" "maybe param" "maybe type" "temp"
    (652457 'move' call_tmp[652454](382980 call rank _mt[243] this[126030]))
    unknown call_tmp[652459] "expr temp" "maybe param" "maybe type" "temp"
    (652462 'move' call_tmp[652459](120979 call == numArgs[120970] call_tmp[652454]))
    unknown call_tmp[652464] "expr temp" "maybe param" "maybe type" "temp"
    (652467 'move' call_tmp[652464](121026 call _cond_test call_tmp[652459]))
    if call_tmp[652464]
    {
      (121000 call compilerError "invalid argument types for domain slicing")
    }
    {
      (121024 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
    (516873 return _void[55])
  }
  function _domain[125908](?).dims[121036](arg _mt[126036]:_MT[238], arg this[126034]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516877] "RVV" "temp"
    unknown call_tmp[652471] "expr temp" "maybe param" "maybe type" "temp"
    (652474 'move' call_tmp[652471](359456 call _value _mt[243] this[126034]))
    unknown call_tmp[652478] "expr temp" "maybe param" "maybe type" "temp"
    (652481 'move' call_tmp[652478](121043 call(121039 call (partial) dsiDims _mt[243] call_tmp[652471])))
    (516882 'move' ret[516877](516881 'deref' call_tmp[652478]))
    (516879 return ret[516877])
  }
  function _domain[125908](?).dim[121055](arg _mt[126040]:_MT[238], arg this[126038]:_domain[125908](?), arg d[121052]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516886] "RVV" "temp"
    unknown call_tmp[652483] "expr temp" "maybe param" "maybe type" "temp"
    (652486 'move' call_tmp[652483](121135 call _cond_test 1))
    if call_tmp[652483]
    {
      unknown tmp[424643] "maybe param" "temp"
      (424654 'move' tmp[424643](121064 call < d[121052] 0))
      unknown call_tmp[652488] "expr temp" "maybe param" "maybe type" "temp"
      (652491 'move' call_tmp[652488](424656 call _cond_invalid tmp[424643]))
      if call_tmp[652488]
      {
        (424659 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[565125] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565126] "maybe param" "temp"
      unknown call_tmp[652493] "expr temp" "maybe param" "maybe type" "temp"
      (652496 'move' call_tmp[652493](424644 call isTrue tmp[424643]))
      (565131 'move' tmp[565126](565129 call _cond_test call_tmp[652493]))
      if tmp[565126]
      {
        (565136 'move' tmp[565125](565133 '_paramFoldLogical' tmp[565126] 1))
      }
      {
        unknown tmp[565138] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652500] "expr temp" "maybe param" "maybe type" "temp"
        (652503 'move' call_tmp[652500](382987 call rank _mt[243] this[126038]))
        unknown call_tmp[652505] "expr temp" "maybe param" "maybe type" "temp"
        (652508 'move' call_tmp[652505](121068 call >= d[121052] call_tmp[652500]))
        (565140 'move' tmp[565138](424648 call isTrue call_tmp[652505]))
        (565145 'move' tmp[565125](565142 '_paramFoldLogical' tmp[565126] tmp[565138]))
      }
      unknown call_tmp[652510] "expr temp" "maybe param" "maybe type" "temp"
      (652513 'move' call_tmp[652510](121130 call _cond_test tmp[565125]))
      if call_tmp[652510]
      {
        unknown call_tmp[652515] "expr temp" "maybe param" "maybe type" "temp"
        (652518 'move' call_tmp[652515](121095 call _cast string[26] d[121052]))
        unknown call_tmp[652520] "expr temp" "maybe param" "maybe type" "temp"
        (652523 'move' call_tmp[652520](121097 call + "dim(" call_tmp[652515]))
        unknown call_tmp[652525] "expr temp" "maybe param" "maybe type" "temp"
        (652528 'move' call_tmp[652525](121116 call + call_tmp[652520] ") is out-of-bounds; must be 0.."))
        unknown call_tmp[652532] "expr temp" "maybe param" "maybe type" "temp"
        (652535 'move' call_tmp[652532](382992 call rank _mt[243] this[126038]))
        unknown call_tmp[652537] "expr temp" "maybe param" "maybe type" "temp"
        (652540 'move' call_tmp[652537](121120 call - call_tmp[652532] 1))
        unknown call_tmp[652542] "expr temp" "maybe param" "maybe type" "temp"
        (652545 'move' call_tmp[652542](121123 call _cast string[26] call_tmp[652537]))
        unknown call_tmp[652547] "expr temp" "maybe param" "maybe type" "temp"
        (652550 'move' call_tmp[652547](121125 call + call_tmp[652525] call_tmp[652542]))
        (121128 call boundsCheckHalt module=[255] HaltWrappers[210085] call_tmp[652547])
        (359460 'referenced modules list' HaltWrappers[210085])
      }
    }
    unknown call_tmp[652554] "expr temp" "maybe param" "maybe type" "temp"
    (652557 'move' call_tmp[652554](359466 call _value _mt[243] this[126038]))
    unknown call_tmp[652561] "expr temp" "maybe param" "maybe type" "temp"
    (652564 'move' call_tmp[652561](121146 call(121141 call (partial) dsiDim _mt[243] call_tmp[652554]) d[121052]))
    (516891 'move' ret[516886](516890 'deref' call_tmp[652561]))
    (516888 return ret[516886])
    (355229 'used modules list'(121058 'use' HaltWrappers[210085]))
  }
  function _domain[125908](?).dim[121157](arg _mt[126044]:_MT[238], arg this[126042]:_domain[125908](?), param arg d[121154]:int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516895] "RVV" "temp"
    unknown tmp[424664] "maybe param" "temp"
    (424675 'move' tmp[424664](121161 call < d[121154] 0))
    unknown call_tmp[652566] "expr temp" "maybe param" "maybe type" "temp"
    (652569 'move' call_tmp[652566](424677 call _cond_invalid tmp[424664]))
    if call_tmp[652566]
    {
      (424680 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565152] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565153] "maybe param" "temp"
    unknown call_tmp[652571] "expr temp" "maybe param" "maybe type" "temp"
    (652574 'move' call_tmp[652571](424665 call isTrue tmp[424664]))
    (565158 'move' tmp[565153](565156 call _cond_test call_tmp[652571]))
    if tmp[565153]
    {
      (565163 'move' tmp[565152](565160 '_paramFoldLogical' tmp[565153] 1))
    }
    {
      unknown tmp[565165] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652578] "expr temp" "maybe param" "maybe type" "temp"
      (652581 'move' call_tmp[652578](382999 call rank _mt[243] this[126042]))
      unknown call_tmp[652583] "expr temp" "maybe param" "maybe type" "temp"
      (652586 'move' call_tmp[652583](121166 call - call_tmp[652578] 1))
      unknown call_tmp[652588] "expr temp" "maybe param" "maybe type" "temp"
      (652591 'move' call_tmp[652588](121168 call > d[121154] call_tmp[652583]))
      (565167 'move' tmp[565165](424669 call isTrue call_tmp[652588]))
      (565172 'move' tmp[565152](565169 '_paramFoldLogical' tmp[565153] tmp[565165]))
    }
    unknown call_tmp[652593] "expr temp" "maybe param" "maybe type" "temp"
    (652596 'move' call_tmp[652593](121197 call _cond_test tmp[565152]))
    if call_tmp[652593]
    {
      unknown call_tmp[652600] "expr temp" "maybe param" "maybe type" "temp"
      (652603 'move' call_tmp[652600](383003 call rank _mt[243] this[126042]))
      unknown call_tmp[652605] "expr temp" "maybe param" "maybe type" "temp"
      (652608 'move' call_tmp[652605](121193 call - call_tmp[652600] 1))
      (121195 call compilerError "dim() must take a value from 0.." call_tmp[652605])
    }
    unknown call_tmp[652612] "expr temp" "maybe param" "maybe type" "temp"
    (652615 'move' call_tmp[652612](359470 call _value _mt[243] this[126042]))
    unknown call_tmp[652619] "expr temp" "maybe param" "maybe type" "temp"
    (652622 'move' call_tmp[652619](121209 call(121204 call (partial) dsiDim _mt[243] call_tmp[652612]) d[121154]))
    (516900 'move' ret[516895](516899 'deref' call_tmp[652619]))
    (516897 return ret[516895])
  }
  function _domain[125908](?).dimIter[121218](arg _mt[126048]:_MT[238], arg this[126046]:_domain[125908](?), param arg d[121216]:_any[178](?), arg ind[121220]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516904] "RVV" "temp"
    {
      unknown _indexOfInterest[121236] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121237] "expr temp" "temp"
      unknown call_tmp[652626] "expr temp" "maybe param" "maybe type" "temp"
      (652629 'move' call_tmp[652626](359474 call _value _mt[243] this[126046]))
      unknown call_tmp[652633] "expr temp" "maybe param" "maybe type" "temp"
      (652636 'move' call_tmp[652633](121232 call(121226 call (partial) dimIter _mt[243] call_tmp[652626]) d[121216] ind[121220]))
      (121246 'move' _iterator[121237](121244 call _getIterator call_tmp[652633]))
      Defer
      {
        {
          (121263 call _freeIterator _iterator[121237])
        }
      }
      { scopeless type
        (121252 'move' _indexOfInterest[121236](121249 call iteratorIndex _iterator[121237]))
      }
      ForLoop[121238]
      {
        unknown i[121256] "index var" "insert auto destroy"
        (479731 'end of statement')
        (121258 'move' i[121256] _indexOfInterest[121236])
        (479732 'end of statement' i[121256])
        unknown yret[516908] "YVV" "temp"
        (516911 'move' yret[516908](516910 'deref' i[121256]))
        (516913 yield yret[516908])
        (479734 'end of statement' i[121256])
        label _continueLabel[121241]
        _indexOfInterest[121236]
        _iterator[121237]
      }
      label _breakLabel[121242]
    }
    (516906 return ret[516904])
  }
  function _domain[125908](?).shape[121275](arg _mt[126052]:_MT[238], arg this[126050]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516917] "RVV" "temp"
    unknown s[121297] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652640] "expr temp" "maybe param" "maybe type" "temp"
    (652643 'move' call_tmp[652640](383013 call rank _mt[243] this[126050]))
    unknown call_tmp[652647] "expr temp" "maybe param" "maybe type" "temp"
    (652650 'move' call_tmp[652647](121291 call(383017 call (partial) dim _mt[243] this[126050]) 0))
    unknown call_tmp[652654] "expr temp" "maybe param" "maybe type" "temp"
    (652657 'move' call_tmp[652654](121292 call intIdxType _mt[243] call_tmp[652647]))
    unknown call_tmp[652659] "expr temp" "maybe param" "maybe type" "temp"
    (652662 'move' call_tmp[652659](121295 call * call_tmp[652640] call_tmp[652654]))
    (543007 'default init var' s[121297] call_tmp[652659])
    (121300 'end of statement')
    {
      unknown _indexOfInterest[121332] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121333] "expr temp" "temp"
      unknown call_tmp[652666] "expr temp" "maybe param" "maybe type" "temp"
      (652669 'move' call_tmp[652666](121356 call size _mt[243] s[121297]))
      unknown call_tmp[652671] "expr temp" "maybe param" "maybe type" "temp"
      (652674 'move' call_tmp[652671](121360 call chpl_direct_counted_range_iter 0 call_tmp[652666]))
      unknown call_tmp[652676] "expr temp" "maybe param" "maybe type" "temp"
      (652679 'move' call_tmp[652676](121350 call _getIterator call_tmp[652671]))
      unknown call_tmp[652683] "expr temp" "maybe param" "maybe type" "temp"
      (652686 'move' call_tmp[652683](121363 call(383023 call (partial) dims _mt[243] this[126050])))
      unknown call_tmp[652688] "expr temp" "maybe param" "maybe type" "temp"
      (652691 'move' call_tmp[652688](121364 call _getIterator call_tmp[652683]))
      (121367 'move' _iterator[121333](121320 call _build_tuple call_tmp[652676] call_tmp[652688]))
      Defer
      {
        {
          (121397 call _freeIterator _iterator[121333])
        }
      }
      { scopeless type
        (121372 'move' _indexOfInterest[121332](121369 call iteratorIndex _iterator[121333]))
      }
      ForLoop[121334]
      {
        (121377 call _check_tuple_var_decl _indexOfInterest[121332] 2)
        (479737 'end of statement')
        unknown i[121383] "index var" "insert auto destroy"
        (479738 'end of statement')
        (121385 'move' i[121383](121381 call _indexOfInterest[121332] 0))
        (479739 'end of statement' i[121383])
        unknown r[121390] "index var" "insert auto destroy"
        (479741 'end of statement')
        (121392 'move' r[121390](121388 call _indexOfInterest[121332] 1))
        (479742 'end of statement' r[121390])
        unknown call_tmp[652693] "expr temp" "maybe param" "maybe type" "temp"
        (652696 'move' call_tmp[652693](121324 call s[121297] i[121383]))
        unknown call_tmp[652700] "expr temp" "maybe param" "maybe type" "temp"
        (652703 'move' call_tmp[652700](121326 call size _mt[243] r[121390]))
        (121329 call = call_tmp[652693] call_tmp[652700])
        (479744 'end of statement' s[121297] i[121383] r[121390])
        label _continueLabel[121337]
        _indexOfInterest[121332]
        _iterator[121333]
      }
      label _breakLabel[121338]
    }
    (516922 'move' ret[516917](516921 'deref' s[121297]))
    gotoReturn _end_shape[516915] _end_shape[516915]
    (479748 'end of statement' s[121297])
    label _end_shape[516915]
    (516919 return ret[516917])
  }
  where {
    unknown tmp[424685] "maybe param" "temp"
    (424696 'move' tmp[424685](121280 call isRectangularDom this[126050]))
    unknown call_tmp[652705] "expr temp" "maybe param" "maybe type" "temp"
    (652708 'move' call_tmp[652705](424698 call _cond_invalid tmp[424685]))
    if call_tmp[652705]
    {
      (424701 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565179] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565180] "maybe param" "temp"
    unknown call_tmp[652710] "expr temp" "maybe param" "maybe type" "temp"
    (652713 'move' call_tmp[652710](424686 call isTrue tmp[424685]))
    (565185 'move' tmp[565180](565183 call _cond_test call_tmp[652710]))
    if tmp[565180]
    {
      (565190 'move' tmp[565179](565187 '_paramFoldLogical' tmp[565180] 1))
    }
    {
      unknown tmp[565192] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652715] "expr temp" "maybe param" "maybe type" "temp"
      (652718 'move' call_tmp[652715](121284 call isSparseDom this[126050]))
      (565194 'move' tmp[565192](424690 call isTrue call_tmp[652715]))
      (565199 'move' tmp[565179](565196 '_paramFoldLogical' tmp[565180] tmp[565192]))
    }
    (748451 call chpl_statementLevelSymbol tmp[565179])
  }
  function _domain[125908](?).shape[121412](arg _mt[126056]:_MT[238], arg this[126054]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516928] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492269] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652722] "expr temp" "maybe param" "maybe type" "temp"
      (652725 'move' call_tmp[652722](383029 call size _mt[243] this[126054]))
      (492273 'move' call_type_tmp[492269](121419 'typeof' call_tmp[652722]))
    }
    unknown s[121422] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652727] "expr temp" "maybe param" "maybe type" "temp"
    (652730 'move' call_tmp[652727](121420 call _build_tuple call_type_tmp[492269]))
    (543009 'default init var' s[121422] call_tmp[652727])
    (121425 'end of statement')
    unknown call_tmp[652732] "expr temp" "maybe param" "maybe type" "temp"
    (652735 'move' call_tmp[652732](121430 call s[121422] 0))
    unknown call_tmp[652739] "expr temp" "maybe param" "maybe type" "temp"
    (652742 'move' call_tmp[652739](383034 call size _mt[243] this[126054]))
    (121432 call = call_tmp[652732] call_tmp[652739])
    (479750 'end of statement' s[121422])
    (516933 'move' ret[516928](516932 'deref' s[121422]))
    gotoReturn _end_shape[516926] _end_shape[516926]
    (479752 'end of statement' s[121422])
    label _end_shape[516926]
    (516930 return ret[516928])
  }
  where {
    (121417 call isAssociativeDom this[126054])
  }
  function _domain[125908](?).shape[121443](arg _mt[126060]:_MT[238], arg this[126058]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (121464 call compilerError ".shape not supported on this domain")
    (516937 return _void[55])
  }
  function _domain[125908](?).buildArray[121473](arg _mt[126064]:_MT[238], arg this[126062]:_domain[125908](?), arg eltType[121471]:_any[178](?), param arg initElts[121476]:bool[10]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516943] "RVV" "temp"
    unknown call_tmp[652744] "expr temp" "maybe param" "maybe type" "temp"
    (652747 'move' call_tmp[652744](121481 call == eltType[121471] void[4]))
    unknown call_tmp[652749] "expr temp" "maybe param" "maybe type" "temp"
    (652752 'move' call_tmp[652749](121505 call _cond_test call_tmp[652744]))
    if call_tmp[652749]
    {
      (121502 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652754] "expr temp" "maybe param" "maybe type" "temp"
    (652757 'move' call_tmp[652754](121513 call isGenericType eltType[121471]))
    unknown call_tmp[652759] "expr temp" "maybe param" "maybe type" "temp"
    (652762 'move' call_tmp[652759](121673 call _cond_test call_tmp[652754]))
    if call_tmp[652759]
    {
      unknown call_tmp[652764] "expr temp" "maybe param" "maybe type" "temp"
      (652767 'move' call_tmp[652764](121534 call _cast string[26] eltType[121471]))
      unknown call_tmp[652769] "expr temp" "maybe param" "maybe type" "temp"
      (652772 'move' call_tmp[652769](121536 call + "creating an array with element type " call_tmp[652764]))
      (121539 call compilerWarning call_tmp[652769])
      (479756 'end of statement')
      unknown tmp[424706] "maybe param" "temp"
      (424717 'move' tmp[424706](121545 call isClassType eltType[121471]))
      unknown call_tmp[652774] "expr temp" "maybe param" "maybe type" "temp"
      (652777 'move' call_tmp[652774](424719 call _cond_invalid tmp[424706]))
      if call_tmp[652774]
      {
        (424722 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565206] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565207] "maybe param" "temp"
      unknown call_tmp[652779] "expr temp" "maybe param" "maybe type" "temp"
      (652782 'move' call_tmp[652779](424707 call isTrue tmp[424706]))
      (565212 'move' tmp[565207](565210 call _cond_test call_tmp[652779]))
      if tmp[565207]
      {
        unknown tmp[565214] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652784] "expr temp" "maybe param" "maybe type" "temp"
        (652787 'move' call_tmp[652784](121548 'to borrowed class from unknown' eltType[121471]))
        unknown call_tmp[652789] "expr temp" "maybe param" "maybe type" "temp"
        (652792 'move' call_tmp[652789](121550 call isGenericType call_tmp[652784]))
        unknown call_tmp[652794] "expr temp" "maybe param" "maybe type" "temp"
        (652797 'move' call_tmp[652794](121551 call ! call_tmp[652789]))
        (565216 'move' tmp[565214](424710 call isTrue call_tmp[652794]))
        (565221 'move' tmp[565206](565218 '_paramFoldLogical' tmp[565207] tmp[565214]))
      }
      {
        (565226 'move' tmp[565206](565223 '_paramFoldLogical' tmp[565207] 0))
      }
      unknown call_tmp[652799] "expr temp" "maybe param" "maybe type" "temp"
      (652802 'move' call_tmp[652799](121577 call _cond_test tmp[565206]))
      if call_tmp[652799]
      {
        (121574 call compilerWarning "which now means class type with generic management")
      }
      (121600 call compilerError "array element type cannot currently be generic")
    }
    {
      unknown tmp[424727] "maybe param" "temp"
      (424738 'move' tmp[424727](121605 call isSparseDom this[126062]))
      unknown call_tmp[652804] "expr temp" "maybe param" "maybe type" "temp"
      (652807 'move' call_tmp[652804](424740 call _cond_invalid tmp[424727]))
      if call_tmp[652804]
      {
        (424743 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565233] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565234] "maybe param" "temp"
      unknown call_tmp[652809] "expr temp" "maybe param" "maybe type" "temp"
      (652812 'move' call_tmp[652809](424728 call isTrue tmp[424727]))
      (565239 'move' tmp[565234](565237 call _cond_test call_tmp[652809]))
      if tmp[565234]
      {
        unknown tmp[565241] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652814] "expr temp" "maybe param" "maybe type" "temp"
        (652817 'move' call_tmp[652814](121609 call isDefaultInitializable eltType[121471]))
        unknown call_tmp[652819] "expr temp" "maybe param" "maybe type" "temp"
        (652822 'move' call_tmp[652819](121610 call ! call_tmp[652814]))
        (565243 'move' tmp[565241](424731 call isTrue call_tmp[652819]))
        (565248 'move' tmp[565233](565245 '_paramFoldLogical' tmp[565234] tmp[565241]))
      }
      {
        (565253 'move' tmp[565233](565250 '_paramFoldLogical' tmp[565234] 0))
      }
      unknown call_tmp[652824] "expr temp" "maybe param" "maybe type" "temp"
      (652827 'move' call_tmp[652824](121669 call _cond_test tmp[565233]))
      if call_tmp[652824]
      {
        unknown call_tmp[652829] "expr temp" "maybe param" "maybe type" "temp"
        (652832 'move' call_tmp[652829](121617 call isNonNilableClass eltType[121471]))
        unknown call_tmp[652834] "expr temp" "maybe param" "maybe type" "temp"
        (652837 'move' call_tmp[652834](121664 call _cond_test call_tmp[652829]))
        if call_tmp[652834]
        {
          (121637 call compilerError "sparse arrays of non-nilable classes are not currently supported")
        }
        {
          (121661 call compilerError "sparse arrays of non-default-initializable types are not currently supported")
        }
      }
    }
    unknown call_tmp[652839] "expr temp" "maybe param" "maybe type" "temp"
    (652842 'move' call_tmp[652839](121790 call _cond_test 0))
    if call_tmp[652839]
    {
      unknown tmp[424748] "maybe param" "temp"
      (424759 'move' tmp[424748](121682 call isRectangularDom this[126062]))
      unknown call_tmp[652844] "expr temp" "maybe param" "maybe type" "temp"
      (652847 'move' call_tmp[652844](424761 call _cond_invalid tmp[424748]))
      if call_tmp[652844]
      {
        (424764 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565260] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565261] "maybe param" "temp"
      unknown call_tmp[652849] "expr temp" "maybe param" "maybe type" "temp"
      (652852 'move' call_tmp[652849](424749 call isTrue tmp[424748]))
      (565266 'move' tmp[565261](565264 call _cond_test call_tmp[652849]))
      if tmp[565261]
      {
        unknown tmp[565268] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652856] "expr temp" "maybe param" "maybe type" "temp"
        (652859 'move' call_tmp[652856](121684 call stridable _mt[243] this[126062]))
        (565270 'move' tmp[565268](424752 call isTrue call_tmp[652856]))
        (565275 'move' tmp[565260](565272 '_paramFoldLogical' tmp[565261] tmp[565268]))
      }
      {
        (565280 'move' tmp[565260](565277 '_paramFoldLogical' tmp[565261] 0))
      }
      unknown call_tmp[652861] "expr temp" "maybe param" "maybe type" "temp"
      (652864 'move' call_tmp[652861](121785 call _cond_test tmp[565260]))
      if call_tmp[652861]
      {
        unknown call_tmp[652868] "expr temp" "maybe param" "maybe type" "temp"
        (652871 'move' call_tmp[652868](383049 call rank _mt[243] this[126062]))
        unknown call_tmp[652873] "expr temp" "maybe param" "maybe type" "temp"
        (652876 'move' call_tmp[652873](121691 call == call_tmp[652868] 1))
        unknown call_tmp[652878] "expr temp" "maybe param" "maybe type" "temp"
        (652881 'move' call_tmp[652878](121781 call _cond_test call_tmp[652873]))
        if call_tmp[652878]
        {
          unknown call_tmp[652885] "expr temp" "maybe param" "maybe type" "temp"
          (652888 'move' call_tmp[652885](121694 call stride _mt[243] this[126062]))
          unknown call_tmp[652890] "expr temp" "maybe param" "maybe type" "temp"
          (652893 'move' call_tmp[652890](121698 call < call_tmp[652885] 0))
          unknown call_tmp[652895] "expr temp" "maybe param" "maybe type" "temp"
          (652898 'move' call_tmp[652895](121721 call _cond_test call_tmp[652890]))
          if call_tmp[652895]
          {
            (121719 call warning "arrays with negatively strided dimensions are not particularly stable")
          }
        }
        {
          {
            unknown _indexOfInterest[121746] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[121747] "expr temp" "temp"
            unknown call_tmp[652902] "expr temp" "maybe param" "maybe type" "temp"
            (652905 'move' call_tmp[652902](121729 call stride _mt[243] this[126062]))
            (121756 'move' _iterator[121747](121754 call _getIterator call_tmp[652902]))
            Defer
            {
              {
                (121773 call _freeIterator _iterator[121747])
              }
            }
            { scopeless type
              (121762 'move' _indexOfInterest[121746](121759 call iteratorIndex _iterator[121747]))
            }
            ForLoop[121748]
            {
              unknown s[121766] "index var" "insert auto destroy"
              (479766 'end of statement')
              (121768 'move' s[121766] _indexOfInterest[121746])
              (479767 'end of statement' s[121766])
              unknown call_tmp[652907] "expr temp" "maybe param" "maybe type" "temp"
              (652910 'move' call_tmp[652907](121734 call < s[121766] 0))
              unknown call_tmp[652912] "expr temp" "maybe param" "maybe type" "temp"
              (652915 'move' call_tmp[652912](121741 call _cond_test call_tmp[652907]))
              if call_tmp[652912]
              {
                (121739 call warning "arrays with negatively strided dimensions are not particularly stable")
              }
              label _continueLabel[121751]
              _indexOfInterest[121746]
              _iterator[121747]
            }
            label _breakLabel[121752]
          }
        }
      }
    }
    unknown call_tmp[652919] "expr temp" "maybe param" "maybe type" "temp"
    (652922 'move' call_tmp[652919](359483 call _value _mt[243] this[126062]))
    unknown call_tmp[652926] "maybe param" "maybe type" "temp"
    (652929 'move' call_tmp[652926](121804 call(121798 call (partial) dsiBuildArray _mt[243] call_tmp[652919]) eltType[121471] initElts[121476]))
    unknown x[121805] "dead at end of block" "insert auto destroy"
    (543011 'init var' x[121805] call_tmp[652926])
    (121808 'end of statement')
    function help[121811]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652933] "expr temp" "maybe param" "maybe type" "temp"
      (652936 'move' call_tmp[652933](359487 call _value _mt[243] this[126062]))
      (121821 call(121816 call (partial) add_arr _mt[243] call_tmp[652933]) x[121805])
      (516939 return _void[55])
    }
    (121828 call help)
    (479771 'end of statement')
    unknown call_tmp[652942] "expr temp" "maybe param" "maybe type" "temp"
    (652945 'move' call_tmp[652942](121834 call eltType _mt[243] x[121805]))
    (121837 call chpl_incRefCountsForDomainsInArrayEltTypes x[121805] call_tmp[652942])
    (479772 'end of statement' x[121805] x[121805])
    unknown call_tmp[652947] "expr temp" "maybe param" "maybe type" "temp"
    (652950 'move' call_tmp[652947](121842 call _newArray x[121805]))
    (516948 'move' ret[516943](516947 'deref' call_tmp[652947]))
    gotoReturn _end_buildArray[516941] _end_buildArray[516941]
    (479775 'end of statement' x[121805])
    label _end_buildArray[516941]
    (516945 return ret[516943])
  }
  function _domain[125908](?).buildArrayWith[121851](arg _mt[126068]:_MT[238], arg this[126066]:_domain[125908](?), arg eltType[121849]:_any[178](?), arg data[121857] :
  (121856 call _ddata[11696](?) eltType[121849]), arg allocSize[121861]:int(64)[13]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516956] "RVV" "temp"
    unknown call_tmp[652952] "expr temp" "maybe param" "maybe type" "temp"
    (652955 'move' call_tmp[652952](121866 call == eltType[121849] void[4]))
    unknown call_tmp[652957] "expr temp" "maybe param" "maybe type" "temp"
    (652960 'move' call_tmp[652957](121874 call _cond_test call_tmp[652952]))
    if call_tmp[652957]
    {
      (121871 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652964] "expr temp" "maybe param" "maybe type" "temp"
    (652967 'move' call_tmp[652964](359492 call _value _mt[243] this[126066]))
    unknown call_tmp[652971] "maybe param" "maybe type" "temp"
    (652974 'move' call_tmp[652971](121889 call(121882 call (partial) dsiBuildArrayWith _mt[243] call_tmp[652964]) eltType[121849] data[121857] allocSize[121861]))
    unknown x[121890] "dead at end of block" "insert auto destroy"
    (543013 'init var' x[121890] call_tmp[652971])
    (121893 'end of statement')
    function help[121896]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652978] "expr temp" "maybe param" "maybe type" "temp"
      (652981 'move' call_tmp[652978](359496 call _value _mt[243] this[126066]))
      (121904 call(121899 call (partial) add_arr _mt[243] call_tmp[652978]) x[121890])
      (516952 return _void[55])
    }
    (121911 call help)
    (479779 'end of statement')
    unknown call_tmp[652987] "expr temp" "maybe param" "maybe type" "temp"
    (652990 'move' call_tmp[652987](121917 call eltType _mt[243] x[121890]))
    (121920 call chpl_incRefCountsForDomainsInArrayEltTypes x[121890] call_tmp[652987])
    (479780 'end of statement' x[121890] x[121890])
    unknown call_tmp[652992] "expr temp" "maybe param" "maybe type" "temp"
    (652995 'move' call_tmp[652992](121925 call _newArray x[121890]))
    (516961 'move' ret[516956](516960 'deref' call_tmp[652992]))
    gotoReturn _end_buildArrayWith[516954] _end_buildArrayWith[516954]
    (479783 'end of statement' x[121890])
    label _end_buildArrayWith[516954]
    (516958 return ret[516956])
  }
  function _domain[125908](?).clear[121932](arg _mt[126072]:_MT[238], arg this[126070]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[121940] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652997] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653000 'move' call_tmp[652997](121939 'typeof' this[126070]))
    (543015 'default init var' emptyDom[121940] call_tmp[652997])
    (121943 'end of statement')
    (121947 call = this[126070] emptyDom[121940])
    (479785 'end of statement' emptyDom[121940])
    (516965 return _void[55])
  }
  where {
    (121937 call isRectangularDom this[126070])
  }
  function _domain[125908](?).clear[121955](arg _mt[126076]:_MT[238], arg this[126074]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[653004] "expr temp" "maybe param" "maybe type" "temp"
    (653007 'move' call_tmp[653004](359501 call _value _mt[243] this[126074]))
    (121964 call(121960 call (partial) dsiClear _mt[243] call_tmp[653004]))
    (516967 return _void[55])
  }
  function _domain[125908](?).add[121973](arg _mt[126080]:_MT[238], arg this[126078]:_domain[125908](?), in arg i[121971]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516971] "RVV" "temp"
    unknown call_tmp[653013] "expr temp" "maybe param" "maybe type" "temp"
    (653016 'move' call_tmp[653013](359505 call _value _mt[243] this[126078]))
    unknown call_tmp[653020] "expr temp" "maybe param" "maybe type" "temp"
    (653023 'move' call_tmp[653020](121983 call(121978 call (partial) dsiAdd _mt[243] call_tmp[653013]) i[121971]))
    (516976 'move' ret[516971](516975 'deref' call_tmp[653020]))
    (516973 return ret[516971])
  }
  function _domain[125908](?).bulkAdd[122001](arg _mt[126084]:_MT[238], arg this[126082]:_domain[125908](?), arg inds[121998]:_array[133594](?), arg dataSorted[122004] :
  0 =
  0, arg isUnique[122008] :
  0 =
  0, arg preserveInds[122012] :
  1 =
  1, arg addOn[122016] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516980] "RVV" "temp"
    unknown call_tmp[653027] "expr temp" "maybe param" "maybe type" "temp"
    (653030 'move' call_tmp[653027](122033 call size _mt[243] inds[121998]))
    unknown call_tmp[653032] "expr temp" "maybe param" "maybe type" "temp"
    (653035 'move' call_tmp[653032](122037 call == call_tmp[653027] 0))
    unknown call_tmp[653037] "expr temp" "maybe param" "maybe type" "temp"
    (653040 'move' call_tmp[653037](122042 call _cond_test call_tmp[653032]))
    if call_tmp[653037]
    {
      (516985 'move' ret[516980](516984 'deref' 0))
      gotoReturn _end_bulkAdd[516978] _end_bulkAdd[516978]
    }
    unknown call_tmp[653044] "expr temp" "maybe param" "maybe type" "temp"
    (653047 'move' call_tmp[653044](359518 call _value _mt[243] this[126082]))
    unknown call_tmp[653051] "expr temp" "maybe param" "maybe type" "temp"
    (653054 'move' call_tmp[653051](122060 call(122051 call (partial) dsiBulkAdd _mt[243] call_tmp[653044]) inds[121998] dataSorted[122004] isUnique[122008] preserveInds[122012] addOn[122016]))
    (516990 'move' ret[516980](516989 'deref' call_tmp[653051]))
    label _end_bulkAdd[516978]
    (516982 return ret[516980])
  }
  where {
    unknown tmp[424769] "maybe param" "temp"
    (424780 'move' tmp[424769](122022 call isSparseDom this[126082]))
    unknown call_tmp[653056] "expr temp" "maybe param" "maybe type" "temp"
    (653059 'move' call_tmp[653056](424782 call _cond_invalid tmp[424769]))
    if call_tmp[653056]
    {
      (424785 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565287] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565288] "maybe param" "temp"
    unknown call_tmp[653061] "expr temp" "maybe param" "maybe type" "temp"
    (653064 'move' call_tmp[653061](424770 call isTrue tmp[424769]))
    (565293 'move' tmp[565288](565291 call _cond_test call_tmp[653061]))
    if tmp[565288]
    {
      unknown tmp[565295] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653068] "expr temp" "maybe param" "maybe type" "temp"
      (653071 'move' call_tmp[653068](359513 call _value _mt[243] this[126082]))
      unknown call_tmp[653075] "expr temp" "maybe param" "maybe type" "temp"
      (653078 'move' call_tmp[653075](122024 call rank _mt[243] call_tmp[653068]))
      unknown call_tmp[653080] "expr temp" "maybe param" "maybe type" "temp"
      (653083 'move' call_tmp[653080](122028 call == call_tmp[653075] 1))
      (565297 'move' tmp[565295](424773 call isTrue call_tmp[653080]))
      (565302 'move' tmp[565287](565299 '_paramFoldLogical' tmp[565288] tmp[565295]))
    }
    {
      (565307 'move' tmp[565287](565304 '_paramFoldLogical' tmp[565288] 0))
    }
    unknown call_tmp[653087] "expr temp" "maybe param" "maybe type" "temp"
    (653090 'move' call_tmp[653087](359509 call _value _mt[243] this[126082]))
    unknown call_tmp[653094] "expr temp" "maybe param" "maybe type" "temp"
    (653097 'move' call_tmp[653094](121992 call idxType _mt[243] call_tmp[653087]))
    unknown call_tmp[653101] "expr temp" "maybe param" "maybe type" "temp"
    (653104 'move' call_tmp[653101](461517 call eltType _mt[243] inds[121998]))
    unknown call_tmp[653106] "expr temp" "maybe param" "maybe type" "temp"
    (653109 'move' call_tmp[653106](461521 call == call_tmp[653094] call_tmp[653101]))
    (461515 call & tmp[565287] call_tmp[653106])
  }
  function _domain[125908](?).makeIndexBuffer[122072](arg _mt[126088]:_MT[238], arg this[126086]:_domain[125908](?), arg size[122069]:int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[516994] "RVV" "temp"
    unknown call_tmp[653113] "expr temp" "maybe param" "maybe type" "temp"
    (653116 'move' call_tmp[653113](359522 call _value _mt[243] this[126086]))
    unknown call_tmp[653120] "expr temp" "maybe param" "maybe type" "temp"
    (653123 'move' call_tmp[653120](122082 call(122077 call (partial) dsiMakeIndexBuffer _mt[243] call_tmp[653113]) size[122069]))
    (516999 'move' ret[516994](516998 'deref' call_tmp[653120]))
    (516996 return ret[516994])
  }
  function _domain[125908](?).bulkAdd[122106](arg _mt[126092]:_MT[238], arg this[126090]:_domain[125908](?), arg inds[122103]:_array[133594](?), arg dataSorted[122109] :
  0 =
  0, arg isUnique[122113] :
  0 =
  0, arg preserveInds[122117] :
  1 =
  1, arg addOn[122121] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "method" "primary method"
  {
    unknown ret[517003] "RVV" "temp"
    unknown call_tmp[653127] "expr temp" "maybe param" "maybe type" "temp"
    (653130 'move' call_tmp[653127](122138 call size _mt[243] inds[122103]))
    unknown call_tmp[653132] "expr temp" "maybe param" "maybe type" "temp"
    (653135 'move' call_tmp[653132](122142 call == call_tmp[653127] 0))
    unknown call_tmp[653137] "expr temp" "maybe param" "maybe type" "temp"
    (653140 'move' call_tmp[653137](122147 call _cond_test call_tmp[653132]))
    if call_tmp[653137]
    {
      (517008 'move' ret[517003](517007 'deref' 0))
      gotoReturn _end_bulkAdd[517001] _end_bulkAdd[517001]
    }
    unknown call_tmp[653144] "expr temp" "maybe param" "maybe type" "temp"
    (653147 'move' call_tmp[653144](359539 call _value _mt[243] this[126090]))
    unknown call_tmp[653151] "expr temp" "maybe param" "maybe type" "temp"
    (653154 'move' call_tmp[653151](122163 call(122154 call (partial) dsiBulkAdd _mt[243] call_tmp[653144]) inds[122103] dataSorted[122109] isUnique[122113] preserveInds[122117] addOn[122121]))
    (517013 'move' ret[517003](517012 'deref' call_tmp[653151]))
    label _end_bulkAdd[517001]
    (517005 return ret[517003])
  }
  where {
    unknown tmp[424790] "maybe param" "temp"
    (424801 'move' tmp[424790](122127 call isSparseDom this[126090]))
    unknown call_tmp[653156] "expr temp" "maybe param" "maybe type" "temp"
    (653159 'move' call_tmp[653156](424803 call _cond_invalid tmp[424790]))
    if call_tmp[653156]
    {
      (424806 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565314] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565315] "maybe param" "temp"
    unknown call_tmp[653161] "expr temp" "maybe param" "maybe type" "temp"
    (653164 'move' call_tmp[653161](424791 call isTrue tmp[424790]))
    (565320 'move' tmp[565315](565318 call _cond_test call_tmp[653161]))
    if tmp[565315]
    {
      unknown tmp[565322] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653168] "expr temp" "maybe param" "maybe type" "temp"
      (653171 'move' call_tmp[653168](359534 call _value _mt[243] this[126090]))
      unknown call_tmp[653175] "expr temp" "maybe param" "maybe type" "temp"
      (653178 'move' call_tmp[653175](122129 call rank _mt[243] call_tmp[653168]))
      unknown call_tmp[653180] "expr temp" "maybe param" "maybe type" "temp"
      (653183 'move' call_tmp[653180](122133 call > call_tmp[653175] 1))
      (565324 'move' tmp[565322](424794 call isTrue call_tmp[653180]))
      (565329 'move' tmp[565314](565326 '_paramFoldLogical' tmp[565315] tmp[565322]))
    }
    {
      (565334 'move' tmp[565314](565331 '_paramFoldLogical' tmp[565315] 0))
    }
    unknown call_tmp[653187] "expr temp" "maybe param" "maybe type" "temp"
    (653190 'move' call_tmp[653187](359526 call _value _mt[243] this[126090]))
    unknown call_tmp[653194] "expr temp" "maybe param" "maybe type" "temp"
    (653197 'move' call_tmp[653194](122091 call rank _mt[243] call_tmp[653187]))
    unknown call_tmp[653201] "expr temp" "maybe param" "maybe type" "temp"
    (653204 'move' call_tmp[653201](359530 call _value _mt[243] this[126090]))
    unknown call_tmp[653208] "expr temp" "maybe param" "maybe type" "temp"
    (653211 'move' call_tmp[653208](122095 call idxType _mt[243] call_tmp[653201]))
    unknown call_tmp[653213] "expr temp" "maybe param" "maybe type" "temp"
    (653216 'move' call_tmp[653213](122098 call * call_tmp[653194] call_tmp[653208]))
    unknown call_tmp[653220] "expr temp" "maybe param" "maybe type" "temp"
    (653223 'move' call_tmp[653220](461527 call eltType _mt[243] inds[122103]))
    unknown call_tmp[653225] "expr temp" "maybe param" "maybe type" "temp"
    (653228 'move' call_tmp[653225](461531 call == call_tmp[653213] call_tmp[653220]))
    (461525 call & tmp[565314] call_tmp[653225])
  }
  function _domain[125908](?).remove[122173](arg _mt[126096]:_MT[238], arg this[126094]:_domain[125908](?), arg i[122171]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517017] "RVV" "temp"
    unknown call_tmp[653232] "expr temp" "maybe param" "maybe type" "temp"
    (653235 'move' call_tmp[653232](359543 call _value _mt[243] this[126094]))
    unknown call_tmp[653239] "expr temp" "maybe param" "maybe type" "temp"
    (653242 'move' call_tmp[653239](122183 call(122178 call (partial) dsiRemove _mt[243] call_tmp[653232]) i[122171]))
    (517022 'move' ret[517017](517021 'deref' call_tmp[653239]))
    (517019 return ret[517017])
  }
  function _domain[125908](?).requestCapacity[122193](arg _mt[126100]:_MT[238], arg this[126098]:_domain[125908](?), arg i[122191]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[653244] "expr temp" "maybe param" "maybe type" "temp"
    (653247 'move' call_tmp[653244](122197 call < i[122191] 0))
    unknown call_tmp[653249] "expr temp" "maybe param" "maybe type" "temp"
    (653252 'move' call_tmp[653249](122221 call _cond_test call_tmp[653244]))
    if call_tmp[653249]
    {
      (122218 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    unknown call_tmp[653254] "expr temp" "maybe param" "maybe type" "temp"
    (653257 'move' call_tmp[653254](122229 call isAssociativeDom this[126098]))
    unknown call_tmp[653259] "expr temp" "maybe param" "maybe type" "temp"
    (653262 'move' call_tmp[653259](122230 call ! call_tmp[653254]))
    unknown call_tmp[653264] "expr temp" "maybe param" "maybe type" "temp"
    (653267 'move' call_tmp[653264](122253 call _cond_test call_tmp[653259]))
    if call_tmp[653264]
    {
      (122251 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    unknown call_tmp[653271] "expr temp" "maybe param" "maybe type" "temp"
    (653274 'move' call_tmp[653271](359547 call _value _mt[243] this[126098]))
    (122266 call(122261 call (partial) dsiRequestCapacity _mt[243] call_tmp[653271]) i[122191])
    (517024 return _void[55])
  }
  function _domain[125908](?).size[122272](arg _mt[126104]:_MT[238], arg this[126102]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517028] "RVV" "temp"
    unknown call_tmp[653280] "expr temp" "maybe param" "maybe type" "temp"
    (653283 'move' call_tmp[653280](359551 call _value _mt[243] this[126102]))
    unknown call_tmp[653287] "expr temp" "maybe param" "maybe type" "temp"
    (653290 'move' call_tmp[653287](122275 call dsiNumIndices _mt[243] call_tmp[653280]))
    (517033 'move' ret[517028](517032 'deref' call_tmp[653287]))
    (517030 return ret[517028])
  }
  function _domain[125908](?).numIndices[122285](arg _mt[126108]:_MT[238], arg this[126106]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517037] "RVV" "temp"
    unknown call_tmp[653292] "expr temp" "maybe param" "maybe type" "temp"
    (653295 'move' call_tmp[653292](122322 call + "'domain.numIndices' is deprecated - " "please use 'domain.size' instead"))
    (122325 call compilerWarning call_tmp[653292])
    (479799 'end of statement')
    unknown call_tmp[653299] "expr temp" "maybe param" "maybe type" "temp"
    (653302 'move' call_tmp[653299](383092 call size _mt[243] this[126106]))
    (517042 'move' ret[517037](517041 'deref' call_tmp[653299]))
    (517039 return ret[517037])
  }
  function _domain[125908](?).low[122335](arg _mt[126112]:_MT[238], arg this[126110]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517046] "RVV" "temp"
    unknown call_tmp[653306] "expr temp" "maybe param" "maybe type" "temp"
    (653309 'move' call_tmp[653306](359555 call _value _mt[243] this[126110]))
    unknown call_tmp[653313] "expr temp" "maybe param" "maybe type" "temp"
    (653316 'move' call_tmp[653313](122338 call dsiLow _mt[243] call_tmp[653306]))
    (517051 'move' ret[517046](517050 'deref' call_tmp[653313]))
    (517048 return ret[517046])
  }
  function _domain[125908](?).high[122348](arg _mt[126116]:_MT[238], arg this[126114]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517055] "RVV" "temp"
    unknown call_tmp[653320] "expr temp" "maybe param" "maybe type" "temp"
    (653323 'move' call_tmp[653320](359559 call _value _mt[243] this[126114]))
    unknown call_tmp[653327] "expr temp" "maybe param" "maybe type" "temp"
    (653330 'move' call_tmp[653327](122353 call dsiHigh _mt[243] call_tmp[653320]))
    (517060 'move' ret[517055](517059 'deref' call_tmp[653327]))
    (517057 return ret[517055])
  }
  function _domain[125908](?).stride[122363](arg _mt[126120]:_MT[238], arg this[126118]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517064] "RVV" "temp"
    unknown call_tmp[653334] "expr temp" "maybe param" "maybe type" "temp"
    (653337 'move' call_tmp[653334](359563 call _value _mt[243] this[126118]))
    unknown call_tmp[653341] "expr temp" "maybe param" "maybe type" "temp"
    (653344 'move' call_tmp[653341](122366 call dsiStride _mt[243] call_tmp[653334]))
    (517069 'move' ret[517064](517068 'deref' call_tmp[653341]))
    (517066 return ret[517064])
  }
  function _domain[125908](?).alignment[122376](arg _mt[126124]:_MT[238], arg this[126122]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517073] "RVV" "temp"
    unknown call_tmp[653348] "expr temp" "maybe param" "maybe type" "temp"
    (653351 'move' call_tmp[653348](359567 call _value _mt[243] this[126122]))
    unknown call_tmp[653355] "expr temp" "maybe param" "maybe type" "temp"
    (653358 'move' call_tmp[653355](122381 call dsiAlignment _mt[243] call_tmp[653348]))
    (517078 'move' ret[517073](517077 'deref' call_tmp[653355]))
    (517075 return ret[517073])
  }
  function _domain[125908](?).first[122391](arg _mt[126128]:_MT[238], arg this[126126]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517082] "RVV" "temp"
    unknown call_tmp[653362] "expr temp" "maybe param" "maybe type" "temp"
    (653365 'move' call_tmp[653362](359571 call _value _mt[243] this[126126]))
    unknown call_tmp[653369] "expr temp" "maybe param" "maybe type" "temp"
    (653372 'move' call_tmp[653369](122396 call dsiFirst _mt[243] call_tmp[653362]))
    (517087 'move' ret[517082](517086 'deref' call_tmp[653369]))
    (517084 return ret[517082])
  }
  function _domain[125908](?).last[122406](arg _mt[126132]:_MT[238], arg this[126130]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517091] "RVV" "temp"
    unknown call_tmp[653376] "expr temp" "maybe param" "maybe type" "temp"
    (653379 'move' call_tmp[653376](359575 call _value _mt[243] this[126130]))
    unknown call_tmp[653383] "expr temp" "maybe param" "maybe type" "temp"
    (653386 'move' call_tmp[653383](122411 call dsiLast _mt[243] call_tmp[653376]))
    (517096 'move' ret[517091](517095 'deref' call_tmp[653383]))
    (517093 return ret[517091])
  }
  function _domain[125908](?).alignedLow[122421](arg _mt[126136]:_MT[238], arg this[126134]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517100] "RVV" "temp"
    unknown call_tmp[653390] "expr temp" "maybe param" "maybe type" "temp"
    (653393 'move' call_tmp[653390](359579 call _value _mt[243] this[126134]))
    unknown call_tmp[653397] "expr temp" "maybe param" "maybe type" "temp"
    (653400 'move' call_tmp[653397](122426 call dsiAlignedLow _mt[243] call_tmp[653390]))
    (517105 'move' ret[517100](517104 'deref' call_tmp[653397]))
    (517102 return ret[517100])
  }
  function _domain[125908](?).alignedHigh[122436](arg _mt[126140]:_MT[238], arg this[126138]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517109] "RVV" "temp"
    unknown call_tmp[653404] "expr temp" "maybe param" "maybe type" "temp"
    (653407 'move' call_tmp[653404](359583 call _value _mt[243] this[126138]))
    unknown call_tmp[653411] "expr temp" "maybe param" "maybe type" "temp"
    (653414 'move' call_tmp[653411](122441 call dsiAlignedHigh _mt[243] call_tmp[653404]))
    (517114 'move' ret[517109](517113 'deref' call_tmp[653411]))
    (517111 return ret[517109])
  }
  function _domain[125908](?).indices[122451](arg _mt[126144]:_MT[238], arg this[126142]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (122472 call compilerError "domains do not support '.indices'")
    (517116 return _void[55])
  }
  function _domain[125908](?).contains[122489](arg _mt[126148]:_MT[238], arg this[126146]:_domain[125908](?), arg i[122486] :
  unknown call_tmp[653418] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517120] "RVV" "temp"
    unknown tmp[424811] "maybe param" "temp"
    (424822 'move' tmp[424811](122494 call isRectangularDom this[126146]))
    unknown call_tmp[653437] "expr temp" "maybe param" "maybe type" "temp"
    (653440 'move' call_tmp[653437](424824 call _cond_invalid tmp[424811]))
    if call_tmp[653437]
    {
      (424827 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565341] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565342] "maybe param" "temp"
    unknown call_tmp[653442] "expr temp" "maybe param" "maybe type" "temp"
    (653445 'move' call_tmp[653442](424812 call isTrue tmp[424811]))
    (565347 'move' tmp[565342](565345 call _cond_test call_tmp[653442]))
    if tmp[565342]
    {
      (565352 'move' tmp[565341](565349 '_paramFoldLogical' tmp[565342] 1))
    }
    {
      unknown tmp[565354] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653447] "expr temp" "maybe param" "maybe type" "temp"
      (653450 'move' call_tmp[653447](122498 call isSparseDom this[126146]))
      (565356 'move' tmp[565354](424816 call isTrue call_tmp[653447]))
      (565361 'move' tmp[565341](565358 '_paramFoldLogical' tmp[565342] tmp[565354]))
    }
    unknown call_tmp[653452] "expr temp" "maybe param" "maybe type" "temp"
    (653455 'move' call_tmp[653452](122526 call _cond_test tmp[565341]))
    if call_tmp[653452]
    {
      unknown call_tmp[653459] "expr temp" "maybe param" "maybe type" "temp"
      (653462 'move' call_tmp[653459](359591 call _value _mt[243] this[126146]))
      unknown call_tmp[653468] "expr temp" "maybe param" "maybe type" "temp"
      (653471 'move' call_tmp[653468](383102 call rank _mt[243] this[126146]))
      unknown call_tmp[653473] "expr temp" "maybe param" "maybe type" "temp"
      (653476 'move' call_tmp[653473](122509 call _makeIndexTuple call_tmp[653468] i[122486]))
      unknown call_tmp[653478] "expr temp" "maybe param" "maybe type" "temp"
      (653481 'move' call_tmp[653478](122511 call(122502 call (partial) dsiMember _mt[243] call_tmp[653459]) call_tmp[653473]))
      (517125 'move' ret[517120](517124 'deref' call_tmp[653478]))
      gotoReturn _end_contains[517118] _end_contains[517118]
    }
    {
      unknown call_tmp[653485] "expr temp" "maybe param" "maybe type" "temp"
      (653488 'move' call_tmp[653485](359595 call _value _mt[243] this[126146]))
      unknown call_tmp[653492] "expr temp" "maybe param" "maybe type" "temp"
      (653495 'move' call_tmp[653492](122521 call i[122486] 0))
      unknown call_tmp[653497] "expr temp" "maybe param" "maybe type" "temp"
      (653500 'move' call_tmp[653497](122523 call(122515 call (partial) dsiMember _mt[243] call_tmp[653485]) call_tmp[653492]))
      (517130 'move' ret[517120](517129 'deref' call_tmp[653497]))
      gotoReturn _end_contains[517118] _end_contains[517118]
    }
    label _end_contains[517118]
    (517122 return ret[517120])
  }
  function _domain[125908](?).contains[122546](arg _mt[126152]:_MT[238], arg this[126150]:_domain[125908](?), arg i[122542] ... :
  unknown call_tmp[653504] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[517136] "RVV" "temp"
    unknown call_tmp[653515] "expr temp" "maybe param" "maybe type" "temp"
    (653518 'move' call_tmp[653515](122551 call(383112 call (partial) contains _mt[243] this[126150]) i[122542]))
    (517141 'move' ret[517136](517140 'deref' call_tmp[653515]))
    (517138 return ret[517136])
  }
  function _domain[125908](?).member[122569](arg _mt[126156]:_MT[238], arg this[126154]:_domain[125908](?), arg i[122566] :
  unknown call_tmp[653522] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    unknown ret[517145] "RVV" "temp"
    unknown call_tmp[653541] "expr temp" "maybe param" "maybe type" "temp"
    (653544 'move' call_tmp[653541](122606 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122609 call compilerWarning call_tmp[653541])
    (479814 'end of statement')
    unknown call_tmp[653548] "expr temp" "maybe param" "maybe type" "temp"
    (653551 'move' call_tmp[653548](122618 call(122613 call (partial) contains _mt[243] this[126154]) i[122566]))
    (517150 'move' ret[517145](517149 'deref' call_tmp[653548]))
    (517147 return ret[517145])
  }
  function _domain[125908](?).member[122634](arg _mt[126160]:_MT[238], arg this[126158]:_domain[125908](?), arg i[122630] ... :
  unknown call_tmp[653555] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[517154] "RVV" "temp"
    unknown call_tmp[653564] "expr temp" "maybe param" "maybe type" "temp"
    (653567 'move' call_tmp[653564](122639 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122642 call compilerWarning call_tmp[653564])
    (479816 'end of statement')
    unknown call_tmp[653571] "expr temp" "maybe param" "maybe type" "temp"
    (653574 'move' call_tmp[653571](122651 call(122646 call (partial) contains _mt[243] this[126158]) i[122630]))
    (517159 'move' ret[517154](517158 'deref' call_tmp[653571]))
    (517156 return ret[517154])
  }
  function _domain[125908](?).isSubset[122662](arg _mt[126164]:_MT[238], arg this[126162]:_domain[125908](?), arg super[122659]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517163] "RVV" "temp"
    unknown tmp[424832] "maybe param" "temp"
    (424843 'move' tmp[424832](122667 call isAssociativeDom this[126162]))
    unknown call_tmp[653576] "expr temp" "maybe param" "maybe type" "temp"
    (653579 'move' call_tmp[653576](424845 call _cond_invalid tmp[424832]))
    if call_tmp[653576]
    {
      (424848 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565368] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565369] "maybe param" "temp"
    unknown call_tmp[653581] "expr temp" "maybe param" "maybe type" "temp"
    (653584 'move' call_tmp[653581](424833 call isTrue tmp[424832]))
    (565374 'move' tmp[565369](565372 call _cond_test call_tmp[653581]))
    if tmp[565369]
    {
      (565379 'move' tmp[565368](565376 '_paramFoldLogical' tmp[565369] 1))
    }
    {
      unknown tmp[565381] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653586] "expr temp" "maybe param" "maybe type" "temp"
      (653589 'move' call_tmp[653586](122671 call isRectangularDom this[126162]))
      (565383 'move' tmp[565381](424837 call isTrue call_tmp[653586]))
      (565388 'move' tmp[565368](565385 '_paramFoldLogical' tmp[565369] tmp[565381]))
    }
    unknown call_tmp[653591] "expr temp" "maybe param" "maybe type" "temp"
    (653594 'move' call_tmp[653591](122674 call ! tmp[565368]))
    unknown call_tmp[653596] "expr temp" "maybe param" "maybe type" "temp"
    (653599 'move' call_tmp[653596](122729 call _cond_test call_tmp[653591]))
    if call_tmp[653596]
    {
      unknown call_tmp[653601] "expr temp" "maybe param" "maybe type" "temp"
      (653604 'move' call_tmp[653601](122679 call isSparseDom this[126162]))
      unknown call_tmp[653606] "expr temp" "maybe param" "maybe type" "temp"
      (653609 'move' call_tmp[653606](122722 call _cond_test call_tmp[653601]))
      if call_tmp[653606]
      {
        (122699 call compilerError "isSubset not supported on sparse domains")
      }
      {
        (122720 call compilerError "isSubset not supported on this domain type")
      }
    }
    unknown call_tmp[653611] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653614 'move' call_tmp[653611](122735 'typeof' super[122659]))
    unknown call_tmp[653616] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653619 'move' call_tmp[653616](122737 'typeof' this[126162]))
    unknown call_tmp[653621] "expr temp" "maybe param" "maybe type" "temp"
    (653624 'move' call_tmp[653621](122738 call != call_tmp[653611] call_tmp[653616]))
    unknown call_tmp[653626] "expr temp" "maybe param" "maybe type" "temp"
    (653629 'move' call_tmp[653626](122846 call _cond_test call_tmp[653621]))
    if call_tmp[653626]
    {
      unknown call_tmp[653631] "expr temp" "maybe param" "maybe type" "temp"
      (653634 'move' call_tmp[653631](122743 call isRectangularDom this[126162]))
      unknown call_tmp[653636] "expr temp" "maybe param" "maybe type" "temp"
      (653639 'move' call_tmp[653636](122841 call _cond_test call_tmp[653631]))
      if call_tmp[653636]
      {
        unknown call_tmp[653643] "expr temp" "maybe param" "maybe type" "temp"
        (653646 'move' call_tmp[653643](122745 call rank _mt[243] super[122659]))
        unknown call_tmp[653650] "expr temp" "maybe param" "maybe type" "temp"
        (653653 'move' call_tmp[653650](122749 call rank _mt[243] this[126162]))
        unknown call_tmp[653655] "expr temp" "maybe param" "maybe type" "temp"
        (653658 'move' call_tmp[653655](122752 call != call_tmp[653643] call_tmp[653650]))
        unknown call_tmp[653660] "expr temp" "maybe param" "maybe type" "temp"
        (653663 'move' call_tmp[653660](122813 call _cond_test call_tmp[653655]))
        if call_tmp[653660]
        {
          (122773 call compilerError "rank mismatch in domain.isSubset()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492275] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653667] "expr temp" "maybe param" "maybe type" "temp"
            (653670 'move' call_tmp[653667](122776 call low _mt[243] super[122659]))
            (492279 'move' call_type_tmp[492275](122779 'typeof' call_tmp[653667]))
          }
          { scopeless type
            unknown call_type_tmp[492281] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653674] "expr temp" "maybe param" "maybe type" "temp"
            (653677 'move' call_tmp[653674](122781 call low _mt[243] this[126162]))
            (492285 'move' call_type_tmp[492281](122784 'typeof' call_tmp[653674]))
          }
          unknown call_tmp[653679] "expr temp" "maybe param" "maybe type" "temp"
          (653682 'move' call_tmp[653679](122785 call != call_type_tmp[492275] call_type_tmp[492281]))
          unknown call_tmp[653684] "expr temp" "maybe param" "maybe type" "temp"
          (653687 'move' call_tmp[653684](122808 call _cond_test call_tmp[653679]))
          if call_tmp[653684]
          {
            (122806 call compilerError "isSubset called with different index types")
          }
        }
      }
      {
        (122839 call compilerError "isSubset called with different associative domain types")
      }
    }
    unknown call_tmp[653689] "expr temp" "maybe param" "maybe type" "temp"
    (653692 'move' call_tmp[653689](122854 call isRectangularDom this[126162]))
    unknown call_tmp[653694] "expr temp" "maybe param" "maybe type" "temp"
    (653697 'move' call_tmp[653694](122977 call _cond_test call_tmp[653689]))
    if call_tmp[653694]
    {
      unknown contains[122856] "dead at end of block" "insert auto destroy"
      (543017 'init var' contains[122856] 1)
      (122859 'end of statement')
      {
        unknown _indexOfInterest[122926] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[122927] "expr temp" "temp"
        unknown call_tmp[653701] "expr temp" "maybe param" "maybe type" "temp"
        (653704 'move' call_tmp[653701](122948 call(122945 call (partial) dims _mt[243] this[126162])))
        unknown call_tmp[653708] "expr temp" "maybe param" "maybe type" "temp"
        (653711 'move' call_tmp[653708](122943 call size _mt[243] call_tmp[653701]))
        unknown call_tmp[653713] "expr temp" "maybe param" "maybe type" "temp"
        (653716 'move' call_tmp[653713](122941 call - call_tmp[653708] 1))
        unknown call_tmp[653718] "expr temp" "maybe param" "maybe type" "temp"
        (653721 'move' call_tmp[653718](122951 call chpl_direct_range_iter 0 call_tmp[653713] 1))
        (122936 'move' _iterator[122927](122934 call _getIterator call_tmp[653718]))
        Defer
        {
          {
            (122967 call _freeIterator _iterator[122927])
          }
        }
        { scopeless type
          (122956 'move' _indexOfInterest[122926](122953 call iteratorIndex _iterator[122927]))
        }
        ForLoop[122928]
        {
          unknown i[122960] "index var" "insert auto destroy"
          (479825 'end of statement')
          (122962 'move' i[122960] _indexOfInterest[122926])
          (479826 'end of statement' i[122960])
          {
            {
              unknown tmp[122902] "temp"
              (122905 'move' tmp[122902](122904 'addr of' contains[122856]))
              unknown tmp[424853] "maybe param" "temp"
              (424864 'move' tmp[424853] tmp[122902])
              unknown call_tmp[653723] "expr temp" "maybe param" "maybe type" "temp"
              (653726 'move' call_tmp[653723](424866 call _cond_invalid tmp[424853]))
              if call_tmp[653723]
              {
                (424869 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565395] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565396] "maybe param" "temp"
              unknown call_tmp[653728] "expr temp" "maybe param" "maybe type" "temp"
              (653731 'move' call_tmp[653728](424854 call isTrue tmp[424853]))
              (565401 'move' tmp[565396](565399 call _cond_test call_tmp[653728]))
              if tmp[565396]
              {
                unknown tmp[565403] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653735] "expr temp" "maybe param" "maybe type" "temp"
                (653738 'move' call_tmp[653735](122883 call(122879 call (partial) dims _mt[243] super[122659])))
                unknown call_tmp[653740] "expr temp" "maybe param" "maybe type" "temp"
                (653743 'move' call_tmp[653740](122886 call call_tmp[653735] i[122960]))
                unknown call_tmp[653749] "expr temp" "maybe param" "maybe type" "temp"
                (653752 'move' call_tmp[653749](122895 call(122891 call (partial) dims _mt[243] this[126162])))
                unknown call_tmp[653754] "expr temp" "maybe param" "maybe type" "temp"
                (653757 'move' call_tmp[653754](122898 call call_tmp[653749] i[122960]))
                unknown call_tmp[653759] "expr temp" "maybe param" "maybe type" "temp"
                (653762 'move' call_tmp[653759](122900 call(122887 call (partial) contains _mt[243] call_tmp[653740]) call_tmp[653754]))
                (565405 'move' tmp[565403](424857 call isTrue call_tmp[653759]))
                (565410 'move' tmp[565395](565407 '_paramFoldLogical' tmp[565396] tmp[565403]))
              }
              {
                (565415 'move' tmp[565395](565412 '_paramFoldLogical' tmp[565396] 0))
              }
              (122910 call = tmp[122902] tmp[565395])
              (479829 'end of statement' i[122960] i[122960])
            }
            unknown call_tmp[653764] "expr temp" "maybe param" "maybe type" "temp"
            (653767 'move' call_tmp[653764](122916 call == contains[122856] 0))
            unknown call_tmp[653769] "expr temp" "maybe param" "maybe type" "temp"
            (653772 'move' call_tmp[653769](122921 call _cond_test call_tmp[653764]))
            if call_tmp[653769]
            {
              break _breakLabel[122932] _breakLabel[122932]
            }
          }
          label _continueLabel[122931]
          _indexOfInterest[122926]
          _iterator[122927]
        }
        label _breakLabel[122932]
      }
      (517168 'move' ret[517163](517167 'deref' contains[122856]))
      gotoReturn _end_isSubset[517161] _end_isSubset[517161]
      (479832 'end of statement' contains[122856])
    }
    function chpl__loopexpr_iter4[582225](arg iterator[582227]:_any[178](?), arg super[582363]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582374] "RVV" "temp"
      {
        unknown _indexOfInterest[582232] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582233] "expr temp" "temp"
        (582242 'move' _iterator[582233](582240 call _getIterator iterator[582227]))
        Defer
        {
          {
            (582256 call _freeIterator _iterator[582233])
          }
        }
        { scopeless type
          (582247 'move' _indexOfInterest[582232](582244 call iteratorIndex _iterator[582233]))
        }
        ForLoop[582234] for-expr
        {
          unknown i[122993] "index var" "insert auto destroy" "no doc"
          (582367 'end of statement')
          (582251 'move' i[122993] _indexOfInterest[582232])
          (582368 'end of statement' i[122993])
          {
            {
              unknown yret[582378] "YVV" "temp"
              unknown call_tmp[582387] "expr temp" "maybe param" "maybe type" "temp"
              (582390 'move' call_tmp[582387](122990 call(122985 call (partial) contains _mt[243] super[582363]) i[122993]))
              (582381 'move' yret[582378](582380 'deref' call_tmp[582387]))
              (582383 yield yret[582378])
              (582370 'end of statement' i[122993])
            }
          }
          label _continueLabel[582237]
          _indexOfInterest[582232]
          _iterator[582233]
        }
        label _breakLabel[582238]
      }
      (582376 return ret[582374])
    }
    function chpl__loopexpr_iter4[582263](param arg tag[582267]:iterKind[453], arg iterator[582270]:_any[178](?), arg super[582291]:_any[178](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582417] "RVV" "temp"
      const _leaderIterator[582282] "const" "expr temp" "temp"
      (582287 'move' _leaderIterator[582282](582284 call _toLeader iterator[582270]))
      (582422 'move' ret[582417](582421 'deref' _leaderIterator[582282]))
      (582419 return ret[582417])
    }
    where {
      unknown tmp[582393] "maybe param" "temp"
      (582404 'move' tmp[582393](582272 call == tag[582267] leader[447]))
      unknown call_tmp[582451] "expr temp" "maybe param" "maybe type" "temp"
      (582454 'move' call_tmp[582451](582406 call _cond_invalid tmp[582393]))
      if call_tmp[582451]
      {
        (582409 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582424] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582425] "maybe param" "temp"
      unknown call_tmp[582456] "expr temp" "maybe param" "maybe type" "temp"
      (582459 'move' call_tmp[582456](582394 call isTrue tmp[582393]))
      (582430 'move' tmp[582425](582428 call _cond_test call_tmp[582456]))
      if tmp[582425]
      {
        unknown tmp[582432] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582461] "expr temp" "maybe param" "maybe type" "temp"
        (582464 'move' call_tmp[582461](582276 'call resolves' "_toLeader" iterator[582270]))
        (582434 'move' tmp[582432](582397 call isTrue call_tmp[582461]))
        (582439 'move' tmp[582424](582436 '_paramFoldLogical' tmp[582425] tmp[582432]))
      }
      {
        (582444 'move' tmp[582424](582441 '_paramFoldLogical' tmp[582425] 0))
      }
      (748613 call chpl_statementLevelSymbol tmp[582424])
    }
    function chpl__loopexpr_iter4[582293](param arg tag[582297]:iterKind[453], arg followThis[582300]:_any[178](?), arg iterator[582302]:_any[178](?), arg super[582361]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582475] "RVV" "temp"
      const _followerIterator[582309] "const" "expr temp" "temp"
      (582315 'move' _followerIterator[582309](582311 call _toFollower iterator[582302] followThis[582300]))
      {
        unknown _indexOfInterest[582330] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582331] "expr temp" "temp"
        (582340 'move' _iterator[582331](582338 call _getIterator _followerIterator[582309]))
        Defer
        {
          {
            (582354 call _freeIterator _iterator[582331])
          }
        }
        { scopeless type
          (582345 'move' _indexOfInterest[582330](582342 call iteratorIndex _iterator[582331]))
        }
        ForLoop[582332] lowered-forall for-expr
        {
          unknown i[582317] "index var" "insert auto destroy" "no doc"
          (582468 'end of statement')
          (582349 'move' i[582317] _indexOfInterest[582330])
          (582469 'end of statement' i[582317])
          {
            {
              unknown yret[582479] "YVV" "temp"
              unknown call_tmp[582488] "expr temp" "maybe param" "maybe type" "temp"
              (582491 'move' call_tmp[582488](582326 call(582323 call (partial) contains _mt[243] super[582361]) i[582317]))
              (582482 'move' yret[582479](582481 'deref' call_tmp[582488]))
              (582484 yield yret[582479])
              (582471 'end of statement' i[582317])
            }
          }
          label _continueLabel[582335]
          _indexOfInterest[582330]
          _iterator[582331]
        }
        label _breakLabel[582336]
      }
      (582477 return ret[582475])
    }
    where {
      (582305 call == tag[582297] follower[449])
    }
    function chpl__forallexpr4[582205](arg iterExpr[582208]:_any[178](?), arg super[582212]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582496] "RVV" "temp"
      unknown _iterator[582215] "expr temp" "maybe ref" "temp"
      (582217 'move' _iterator[582215] iterExpr[582208])
      unknown call_tmp[582503] "expr temp" "maybe param" "maybe type" "temp"
      (582506 'move' call_tmp[582503](582220 call chpl__loopexpr_iter4 _iterator[582215] super[582212]))
      (582501 'move' ret[582496](582500 'deref' call_tmp[582503]))
      (582498 return ret[582496])
    }
    unknown call_tmp[582508] "expr temp" "maybe param" "maybe type" "temp"
    (582511 'move' call_tmp[582508](582210 call chpl__forallexpr4 this[126162] super[122659]))
    (582515 'iterator record set shape' call_tmp[582508] this[126162] 0)
    unknown call_tmp[653774] "expr temp" "maybe param" "maybe type" "temp"
    (653777 'move' call_tmp[653774](122995 'reduce' LogicalAndReduceScanOp[376730](?) call_tmp[582508] 0))
    (517173 'move' ret[517163](517172 'deref' call_tmp[653774]))
    label _end_isSubset[517161]
    (517165 return ret[517163])
  }
  function _domain[125908](?).isSuper[123007](arg _mt[126168]:_MT[238], arg this[126166]:_domain[125908](?), arg sub[123004]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517177] "RVV" "temp"
    unknown tmp[424874] "maybe param" "temp"
    (424885 'move' tmp[424874](123012 call isAssociativeDom this[126166]))
    unknown call_tmp[653779] "expr temp" "maybe param" "maybe type" "temp"
    (653782 'move' call_tmp[653779](424887 call _cond_invalid tmp[424874]))
    if call_tmp[653779]
    {
      (424890 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565422] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565423] "maybe param" "temp"
    unknown call_tmp[653784] "expr temp" "maybe param" "maybe type" "temp"
    (653787 'move' call_tmp[653784](424875 call isTrue tmp[424874]))
    (565428 'move' tmp[565423](565426 call _cond_test call_tmp[653784]))
    if tmp[565423]
    {
      (565433 'move' tmp[565422](565430 '_paramFoldLogical' tmp[565423] 1))
    }
    {
      unknown tmp[565435] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653789] "expr temp" "maybe param" "maybe type" "temp"
      (653792 'move' call_tmp[653789](123016 call isRectangularDom this[126166]))
      (565437 'move' tmp[565435](424879 call isTrue call_tmp[653789]))
      (565442 'move' tmp[565422](565439 '_paramFoldLogical' tmp[565423] tmp[565435]))
    }
    unknown call_tmp[653794] "expr temp" "maybe param" "maybe type" "temp"
    (653797 'move' call_tmp[653794](123019 call ! tmp[565422]))
    unknown call_tmp[653799] "expr temp" "maybe param" "maybe type" "temp"
    (653802 'move' call_tmp[653799](123076 call _cond_test call_tmp[653794]))
    if call_tmp[653799]
    {
      unknown call_tmp[653804] "expr temp" "maybe param" "maybe type" "temp"
      (653807 'move' call_tmp[653804](123024 call isSparseDom this[126166]))
      unknown call_tmp[653809] "expr temp" "maybe param" "maybe type" "temp"
      (653812 'move' call_tmp[653809](123069 call _cond_test call_tmp[653804]))
      if call_tmp[653809]
      {
        (123044 call compilerError "isSuper not supported on sparse domains")
      }
      {
        unknown call_tmp[653814] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (653817 'move' call_tmp[653814](123066 'typeof' this[126166]))
        (123067 call compilerError "isSuper not supported on the domain type " call_tmp[653814])
      }
    }
    unknown call_tmp[653819] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653822 'move' call_tmp[653819](123082 'typeof' sub[123004]))
    unknown call_tmp[653824] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653827 'move' call_tmp[653824](123084 'typeof' this[126166]))
    unknown call_tmp[653829] "expr temp" "maybe param" "maybe type" "temp"
    (653832 'move' call_tmp[653829](123085 call != call_tmp[653819] call_tmp[653824]))
    unknown call_tmp[653834] "expr temp" "maybe param" "maybe type" "temp"
    (653837 'move' call_tmp[653834](123193 call _cond_test call_tmp[653829]))
    if call_tmp[653834]
    {
      unknown call_tmp[653839] "expr temp" "maybe param" "maybe type" "temp"
      (653842 'move' call_tmp[653839](123090 call isRectangularDom this[126166]))
      unknown call_tmp[653844] "expr temp" "maybe param" "maybe type" "temp"
      (653847 'move' call_tmp[653844](123188 call _cond_test call_tmp[653839]))
      if call_tmp[653844]
      {
        unknown call_tmp[653851] "expr temp" "maybe param" "maybe type" "temp"
        (653854 'move' call_tmp[653851](123092 call rank _mt[243] sub[123004]))
        unknown call_tmp[653858] "expr temp" "maybe param" "maybe type" "temp"
        (653861 'move' call_tmp[653858](123096 call rank _mt[243] this[126166]))
        unknown call_tmp[653863] "expr temp" "maybe param" "maybe type" "temp"
        (653866 'move' call_tmp[653863](123099 call != call_tmp[653851] call_tmp[653858]))
        unknown call_tmp[653868] "expr temp" "maybe param" "maybe type" "temp"
        (653871 'move' call_tmp[653868](123160 call _cond_test call_tmp[653863]))
        if call_tmp[653868]
        {
          (123120 call compilerError "rank mismatch in domain.isSuper()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492287] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653875] "expr temp" "maybe param" "maybe type" "temp"
            (653878 'move' call_tmp[653875](123123 call low _mt[243] sub[123004]))
            (492291 'move' call_type_tmp[492287](123126 'typeof' call_tmp[653875]))
          }
          { scopeless type
            unknown call_type_tmp[492293] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653882] "expr temp" "maybe param" "maybe type" "temp"
            (653885 'move' call_tmp[653882](123128 call low _mt[243] this[126166]))
            (492297 'move' call_type_tmp[492293](123131 'typeof' call_tmp[653882]))
          }
          unknown call_tmp[653887] "expr temp" "maybe param" "maybe type" "temp"
          (653890 'move' call_tmp[653887](123132 call != call_type_tmp[492287] call_type_tmp[492293]))
          unknown call_tmp[653892] "expr temp" "maybe param" "maybe type" "temp"
          (653895 'move' call_tmp[653892](123155 call _cond_test call_tmp[653887]))
          if call_tmp[653892]
          {
            (123153 call compilerError "isSuper called with different index types")
          }
        }
      }
      {
        (123186 call compilerError "isSuper called with different associative domain types")
      }
    }
    unknown call_tmp[653897] "expr temp" "maybe param" "maybe type" "temp"
    (653900 'move' call_tmp[653897](123201 call isRectangularDom this[126166]))
    unknown call_tmp[653902] "expr temp" "maybe param" "maybe type" "temp"
    (653905 'move' call_tmp[653902](123324 call _cond_test call_tmp[653897]))
    if call_tmp[653902]
    {
      unknown contains[123203] "dead at end of block" "insert auto destroy"
      (543019 'init var' contains[123203] 1)
      (123206 'end of statement')
      {
        unknown _indexOfInterest[123273] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123274] "expr temp" "temp"
        unknown call_tmp[653909] "expr temp" "maybe param" "maybe type" "temp"
        (653912 'move' call_tmp[653909](123295 call(123292 call (partial) dims _mt[243] this[126166])))
        unknown call_tmp[653916] "expr temp" "maybe param" "maybe type" "temp"
        (653919 'move' call_tmp[653916](123290 call size _mt[243] call_tmp[653909]))
        unknown call_tmp[653921] "expr temp" "maybe param" "maybe type" "temp"
        (653924 'move' call_tmp[653921](123288 call - call_tmp[653916] 1))
        unknown call_tmp[653926] "expr temp" "maybe param" "maybe type" "temp"
        (653929 'move' call_tmp[653926](123298 call chpl_direct_range_iter 0 call_tmp[653921] 1))
        (123283 'move' _iterator[123274](123281 call _getIterator call_tmp[653926]))
        Defer
        {
          {
            (123314 call _freeIterator _iterator[123274])
          }
        }
        { scopeless type
          (123303 'move' _indexOfInterest[123273](123300 call iteratorIndex _iterator[123274]))
        }
        ForLoop[123275]
        {
          unknown i[123307] "index var" "insert auto destroy"
          (479842 'end of statement')
          (123309 'move' i[123307] _indexOfInterest[123273])
          (479843 'end of statement' i[123307])
          {
            {
              unknown tmp[123249] "temp"
              (123252 'move' tmp[123249](123251 'addr of' contains[123203]))
              unknown tmp[424895] "maybe param" "temp"
              (424906 'move' tmp[424895] tmp[123249])
              unknown call_tmp[653931] "expr temp" "maybe param" "maybe type" "temp"
              (653934 'move' call_tmp[653931](424908 call _cond_invalid tmp[424895]))
              if call_tmp[653931]
              {
                (424911 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565449] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565450] "maybe param" "temp"
              unknown call_tmp[653936] "expr temp" "maybe param" "maybe type" "temp"
              (653939 'move' call_tmp[653936](424896 call isTrue tmp[424895]))
              (565455 'move' tmp[565450](565453 call _cond_test call_tmp[653936]))
              if tmp[565450]
              {
                unknown tmp[565457] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653943] "expr temp" "maybe param" "maybe type" "temp"
                (653946 'move' call_tmp[653943](123230 call(123226 call (partial) dims _mt[243] this[126166])))
                unknown call_tmp[653948] "expr temp" "maybe param" "maybe type" "temp"
                (653951 'move' call_tmp[653948](123233 call call_tmp[653943] i[123307]))
                unknown call_tmp[653957] "expr temp" "maybe param" "maybe type" "temp"
                (653960 'move' call_tmp[653957](123242 call(123238 call (partial) dims _mt[243] sub[123004])))
                unknown call_tmp[653962] "expr temp" "maybe param" "maybe type" "temp"
                (653965 'move' call_tmp[653962](123245 call call_tmp[653957] i[123307]))
                unknown call_tmp[653967] "expr temp" "maybe param" "maybe type" "temp"
                (653970 'move' call_tmp[653967](123247 call(123234 call (partial) contains _mt[243] call_tmp[653948]) call_tmp[653962]))
                (565459 'move' tmp[565457](424899 call isTrue call_tmp[653967]))
                (565464 'move' tmp[565449](565461 '_paramFoldLogical' tmp[565450] tmp[565457]))
              }
              {
                (565469 'move' tmp[565449](565466 '_paramFoldLogical' tmp[565450] 0))
              }
              (123257 call = tmp[123249] tmp[565449])
              (479846 'end of statement' i[123307] i[123307])
            }
            unknown call_tmp[653972] "expr temp" "maybe param" "maybe type" "temp"
            (653975 'move' call_tmp[653972](123263 call == contains[123203] 0))
            unknown call_tmp[653977] "expr temp" "maybe param" "maybe type" "temp"
            (653980 'move' call_tmp[653977](123268 call _cond_test call_tmp[653972]))
            if call_tmp[653977]
            {
              break _breakLabel[123279] _breakLabel[123279]
            }
          }
          label _continueLabel[123278]
          _indexOfInterest[123273]
          _iterator[123274]
        }
        label _breakLabel[123279]
      }
      (517182 'move' ret[517177](517181 'deref' contains[123203]))
      gotoReturn _end_isSuper[517175] _end_isSuper[517175]
      (479849 'end of statement' contains[123203])
    }
    function chpl__loopexpr_iter5[582537](arg iterator[582539]:_any[178](?), arg this[582675]:_domain[125908](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582686] "RVV" "temp"
      {
        unknown _indexOfInterest[582544] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582545] "expr temp" "temp"
        (582554 'move' _iterator[582545](582552 call _getIterator iterator[582539]))
        Defer
        {
          {
            (582568 call _freeIterator _iterator[582545])
          }
        }
        { scopeless type
          (582559 'move' _indexOfInterest[582544](582556 call iteratorIndex _iterator[582545]))
        }
        ForLoop[582546] for-expr
        {
          unknown i[123340] "index var" "insert auto destroy" "no doc"
          (582679 'end of statement')
          (582563 'move' i[123340] _indexOfInterest[582544])
          (582680 'end of statement' i[123340])
          {
            {
              unknown yret[582690] "YVV" "temp"
              unknown call_tmp[582699] "expr temp" "maybe param" "maybe type" "temp"
              (582702 'move' call_tmp[582699](123337 call(123332 call (partial) contains _mt[243] this[582675]) i[123340]))
              (582693 'move' yret[582690](582692 'deref' call_tmp[582699]))
              (582695 yield yret[582690])
              (582682 'end of statement' i[123340])
            }
          }
          label _continueLabel[582549]
          _indexOfInterest[582544]
          _iterator[582545]
        }
        label _breakLabel[582550]
      }
      (582688 return ret[582686])
    }
    function chpl__loopexpr_iter5[582575](param arg tag[582579]:iterKind[453], arg iterator[582582]:_any[178](?), arg this[582603]:_domain[125908](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582729] "RVV" "temp"
      const _leaderIterator[582594] "const" "expr temp" "temp"
      (582599 'move' _leaderIterator[582594](582596 call _toLeader iterator[582582]))
      (582734 'move' ret[582729](582733 'deref' _leaderIterator[582594]))
      (582731 return ret[582729])
    }
    where {
      unknown tmp[582705] "maybe param" "temp"
      (582716 'move' tmp[582705](582584 call == tag[582579] leader[447]))
      unknown call_tmp[582763] "expr temp" "maybe param" "maybe type" "temp"
      (582766 'move' call_tmp[582763](582718 call _cond_invalid tmp[582705]))
      if call_tmp[582763]
      {
        (582721 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582736] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582737] "maybe param" "temp"
      unknown call_tmp[582768] "expr temp" "maybe param" "maybe type" "temp"
      (582771 'move' call_tmp[582768](582706 call isTrue tmp[582705]))
      (582742 'move' tmp[582737](582740 call _cond_test call_tmp[582768]))
      if tmp[582737]
      {
        unknown tmp[582744] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582773] "expr temp" "maybe param" "maybe type" "temp"
        (582776 'move' call_tmp[582773](582588 'call resolves' "_toLeader" iterator[582582]))
        (582746 'move' tmp[582744](582709 call isTrue call_tmp[582773]))
        (582751 'move' tmp[582736](582748 '_paramFoldLogical' tmp[582737] tmp[582744]))
      }
      {
        (582756 'move' tmp[582736](582753 '_paramFoldLogical' tmp[582737] 0))
      }
      (748615 call chpl_statementLevelSymbol tmp[582736])
    }
    function chpl__loopexpr_iter5[582605](param arg tag[582609]:iterKind[453], arg followThis[582612]:_any[178](?), arg iterator[582614]:_any[178](?), arg this[582673]:_domain[125908](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582787] "RVV" "temp"
      const _followerIterator[582621] "const" "expr temp" "temp"
      (582627 'move' _followerIterator[582621](582623 call _toFollower iterator[582614] followThis[582612]))
      {
        unknown _indexOfInterest[582642] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582643] "expr temp" "temp"
        (582652 'move' _iterator[582643](582650 call _getIterator _followerIterator[582621]))
        Defer
        {
          {
            (582666 call _freeIterator _iterator[582643])
          }
        }
        { scopeless type
          (582657 'move' _indexOfInterest[582642](582654 call iteratorIndex _iterator[582643]))
        }
        ForLoop[582644] lowered-forall for-expr
        {
          unknown i[582629] "index var" "insert auto destroy" "no doc"
          (582780 'end of statement')
          (582661 'move' i[582629] _indexOfInterest[582642])
          (582781 'end of statement' i[582629])
          {
            {
              unknown yret[582791] "YVV" "temp"
              unknown call_tmp[582800] "expr temp" "maybe param" "maybe type" "temp"
              (582803 'move' call_tmp[582800](582638 call(582635 call (partial) contains _mt[243] this[582673]) i[582629]))
              (582794 'move' yret[582791](582793 'deref' call_tmp[582800]))
              (582796 yield yret[582791])
              (582783 'end of statement' i[582629])
            }
          }
          label _continueLabel[582647]
          _indexOfInterest[582642]
          _iterator[582643]
        }
        label _breakLabel[582648]
      }
      (582789 return ret[582787])
    }
    where {
      (582617 call == tag[582609] follower[449])
    }
    function chpl__forallexpr5[582517](arg iterExpr[582520]:_any[178](?), arg this[582524]:_domain[125908](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582808] "RVV" "temp"
      unknown _iterator[582527] "expr temp" "maybe ref" "temp"
      (582529 'move' _iterator[582527] iterExpr[582520])
      unknown call_tmp[582815] "expr temp" "maybe param" "maybe type" "temp"
      (582818 'move' call_tmp[582815](582532 call chpl__loopexpr_iter5 _iterator[582527] this[582524]))
      (582813 'move' ret[582808](582812 'deref' call_tmp[582815]))
      (582810 return ret[582808])
    }
    unknown call_tmp[582820] "expr temp" "maybe param" "maybe type" "temp"
    (582823 'move' call_tmp[582820](582522 call chpl__forallexpr5 sub[123004] this[126166]))
    (582827 'iterator record set shape' call_tmp[582820] sub[123004] 0)
    unknown call_tmp[653982] "expr temp" "maybe param" "maybe type" "temp"
    (653985 'move' call_tmp[653982](123342 'reduce' LogicalAndReduceScanOp[376730](?) call_tmp[582820] 0))
    (517187 'move' ret[517177](517186 'deref' call_tmp[653982]))
    label _end_isSuper[517175]
    (517179 return ret[517177])
  }
  function _domain[125908](?).indexOrder[123352](arg _mt[126172]:_MT[238], arg this[126170]:_domain[125908](?), arg i[123350]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517191] "RVV" "temp"
    unknown call_tmp[653989] "expr temp" "maybe param" "maybe type" "temp"
    (653992 'move' call_tmp[653989](359629 call _value _mt[243] this[126170]))
    unknown call_tmp[653998] "expr temp" "maybe param" "maybe type" "temp"
    (654001 'move' call_tmp[653998](383162 call rank _mt[243] this[126170]))
    unknown call_tmp[654003] "expr temp" "maybe param" "maybe type" "temp"
    (654006 'move' call_tmp[654003](123364 call _makeIndexTuple call_tmp[653998] i[123350]))
    unknown call_tmp[654008] "expr temp" "maybe param" "maybe type" "temp"
    (654011 'move' call_tmp[654008](123366 call(123357 call (partial) dsiIndexOrder _mt[243] call_tmp[653989]) call_tmp[654003]))
    (517196 'move' ret[517191](517195 'deref' call_tmp[654008]))
    (517193 return ret[517191])
  }
  function _domain[125908](?).position[123376](arg _mt[126176]:_MT[238], arg this[126174]:_domain[125908](?), arg i[123374]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517200] "RVV" "temp"
    unknown call_tmp[654015] "expr temp" "maybe param" "maybe type" "temp"
    (654018 'move' call_tmp[654015](383167 call rank _mt[243] this[126174]))
    unknown call_tmp[654020] "maybe param" "maybe type" "temp"
    (654023 'move' call_tmp[654020](123382 call _makeIndexTuple call_tmp[654015] i[123374]))
    unknown ind[123383] "dead at end of block" "insert auto destroy"
    (543021 'init var' ind[123383] call_tmp[654020])
    unknown pos[123390] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654027] "expr temp" "maybe param" "maybe type" "temp"
    (654030 'move' call_tmp[654027](383172 call rank _mt[243] this[126174]))
    unknown call_tmp[654034] "expr temp" "maybe param" "maybe type" "temp"
    (654037 'move' call_tmp[654034](383176 call intIdxType _mt[243] this[126174]))
    unknown call_tmp[654039] "expr temp" "maybe param" "maybe type" "temp"
    (654042 'move' call_tmp[654039](123388 call * call_tmp[654027] call_tmp[654034]))
    (543023 'default init var' pos[123390] call_tmp[654039])
    (123393 'end of statement')
    {
      unknown _indexOfInterest[123426] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123427] "expr temp" "temp"
      unknown call_tmp[654046] "expr temp" "maybe param" "maybe type" "temp"
      (654049 'move' call_tmp[654046](383185 call rank _mt[243] this[126174]))
      unknown call_tmp[654051] "expr temp" "maybe param" "maybe type" "temp"
      (654054 'move' call_tmp[654051](123441 call - call_tmp[654046] 1))
      unknown call_tmp[654056] "expr temp" "maybe param" "maybe type" "temp"
      (654059 'move' call_tmp[654056](123444 call chpl_direct_range_iter 0 call_tmp[654051] 1))
      (123436 'move' _iterator[123427](123434 call _getIterator call_tmp[654056]))
      Defer
      {
        {
          (123460 call _freeIterator _iterator[123427])
        }
      }
      { scopeless type
        (123449 'move' _indexOfInterest[123426](123446 call iteratorIndex _iterator[123427]))
      }
      ForLoop[123428]
      {
        unknown d[123453] "index var" "insert auto destroy"
        (479854 'end of statement')
        (123455 'move' d[123453] _indexOfInterest[123426])
        (479855 'end of statement' d[123453])
        unknown call_tmp[654061] "expr temp" "maybe param" "maybe type" "temp"
        (654064 'move' call_tmp[654061](123406 call pos[123390] d[123453]))
        unknown call_tmp[654068] "expr temp" "maybe param" "maybe type" "temp"
        (654071 'move' call_tmp[654068](359633 call _value _mt[243] this[126174]))
        unknown call_tmp[654075] "expr temp" "maybe param" "maybe type" "temp"
        (654078 'move' call_tmp[654075](123413 call(123408 call (partial) dsiDim _mt[243] call_tmp[654068]) d[123453]))
        unknown call_tmp[654082] "expr temp" "maybe param" "maybe type" "temp"
        (654085 'move' call_tmp[654082](123420 call ind[123383] d[123453]))
        unknown call_tmp[654087] "expr temp" "maybe param" "maybe type" "temp"
        (654090 'move' call_tmp[654087](123422 call(123414 call (partial) indexOrder _mt[243] call_tmp[654075]) call_tmp[654082]))
        (123423 call = call_tmp[654061] call_tmp[654087])
        (479857 'end of statement' pos[123390] d[123453] d[123453] ind[123383] d[123453])
        label _continueLabel[123431]
        _indexOfInterest[123426]
        _iterator[123427]
      }
      label _breakLabel[123432]
    }
    (517205 'move' ret[517200](517204 'deref' pos[123390]))
    gotoReturn _end_position[517198] _end_position[517198]
    (479863 'end of statement' pos[123390])
    label _end_position[517198]
    (517202 return ret[517200])
  }
  function _domain[125908](?).expand[123481](arg _mt[126180]:_MT[238], arg this[126178]:_domain[125908](?), arg off[123478] :
  unknown call_tmp[654094] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654106] "expr temp" "maybe param" "maybe type" "temp"
    (654109 'move' call_tmp[654106](123492 call isAssociativeDom this[126178]))
    unknown call_tmp[654111] "expr temp" "maybe param" "maybe type" "temp"
    (654114 'move' call_tmp[654111](123566 call _cond_test call_tmp[654106]))
    if call_tmp[654111]
    {
      (123512 call compilerError "expand not supported on associative domains")
    }
    {
      unknown call_tmp[654116] "expr temp" "maybe param" "maybe type" "temp"
      (654119 'move' call_tmp[654116](123517 call isSparseDom this[126178]))
      unknown call_tmp[654121] "expr temp" "maybe param" "maybe type" "temp"
      (654124 'move' call_tmp[654121](123560 call _cond_test call_tmp[654116]))
      if call_tmp[654121]
      {
        (123537 call compilerError "expand not supported on sparse domains")
      }
      {
        (123558 call compilerError "expand not supported on this domain type")
      }
    }
    (517209 return _void[55])
  }
  where {
    unknown call_tmp[654126] "expr temp" "maybe param" "maybe type" "temp"
    (654129 'move' call_tmp[654126](123486 call isRectangularDom this[126178]))
    (123487 call ! call_tmp[654126])
  }
  function _domain[125908](?).expand[123584](arg _mt[126184]:_MT[238], arg this[126182]:_domain[125908](?), arg off[123580] ... :
  (383201 call intIdxType _mt[243] this[126182])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517213] "RVV" "temp"
    unknown call_tmp[654137] "expr temp" "maybe param" "maybe type" "temp"
    (654140 'move' call_tmp[654137](123589 call(383209 call (partial) expand _mt[243] this[126182]) off[123580]))
    (517218 'move' ret[517213](517217 'deref' call_tmp[654137]))
    (517215 return ret[517213])
  }
  function _domain[125908](?).expand[123604](arg _mt[126188]:_MT[238], arg this[126186]:_domain[125908](?), arg off[123601] :
  unknown call_tmp[654144] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517222] "RVV" "temp"
    unknown call_tmp[654158] "maybe param" "maybe type" "temp"
    (654161 'move' call_tmp[654158](123608 call(383222 call (partial) dims _mt[243] this[126186])))
    unknown ranges[123609] "dead at end of block" "insert auto destroy"
    (543025 'init var' ranges[123609] call_tmp[654158])
    (123612 'end of statement')
    {
      unknown _indexOfInterest[123705] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123706] "expr temp" "temp"
      unknown call_tmp[654165] "expr temp" "maybe param" "maybe type" "temp"
      (654168 'move' call_tmp[654165](383237 call rank _mt[243] this[126186]))
      unknown call_tmp[654170] "expr temp" "maybe param" "maybe type" "temp"
      (654173 'move' call_tmp[654170](123720 call - call_tmp[654165] 1))
      unknown call_tmp[654175] "expr temp" "maybe param" "maybe type" "temp"
      (654178 'move' call_tmp[654175](123723 call chpl_direct_range_iter 0 call_tmp[654170] 1))
      (123715 'move' _iterator[123706](123713 call _getIterator call_tmp[654175]))
      Defer
      {
        {
          (123739 call _freeIterator _iterator[123706])
        }
      }
      { scopeless type
        (123728 'move' _indexOfInterest[123705](123725 call iteratorIndex _iterator[123706]))
      }
      ForLoop[123707]
      {
        unknown i[123732] "index var" "insert auto destroy"
        (479870 'end of statement')
        (123734 'move' i[123732] _indexOfInterest[123705])
        (479871 'end of statement' i[123732])
        {
          unknown call_tmp[654180] "expr temp" "maybe param" "maybe type" "temp"
          (654183 'move' call_tmp[654180](123625 call ranges[123609] i[123732]))
          unknown call_tmp[654185] "expr temp" "maybe param" "maybe type" "temp"
          (654188 'move' call_tmp[654185](123629 call ranges[123609] i[123732]))
          unknown call_tmp[654192] "expr temp" "maybe param" "maybe type" "temp"
          (654195 'move' call_tmp[654192](123638 call off[123601] i[123732]))
          unknown call_tmp[654197] "expr temp" "maybe param" "maybe type" "temp"
          (654200 'move' call_tmp[654197](123640 call(123632 call (partial) expand _mt[243] call_tmp[654185]) call_tmp[654192]))
          (123641 call = call_tmp[654180] call_tmp[654197])
          (479873 'end of statement' ranges[123609] i[123732] ranges[123609] i[123732] i[123732])
          unknown call_tmp[654202] "expr temp" "maybe param" "maybe type" "temp"
          (654205 'move' call_tmp[654202](123648 call ranges[123609] i[123732]))
          unknown call_tmp[654209] "expr temp" "maybe param" "maybe type" "temp"
          (654212 'move' call_tmp[654209](123649 call low _mt[243] call_tmp[654202]))
          unknown call_tmp[654214] "expr temp" "maybe param" "maybe type" "temp"
          (654217 'move' call_tmp[654214](123655 call ranges[123609] i[123732]))
          unknown call_tmp[654221] "expr temp" "maybe param" "maybe type" "temp"
          (654224 'move' call_tmp[654221](123656 call high _mt[243] call_tmp[654214]))
          unknown call_tmp[654226] "expr temp" "maybe param" "maybe type" "temp"
          (654229 'move' call_tmp[654226](123659 call > call_tmp[654209] call_tmp[654221]))
          unknown call_tmp[654231] "expr temp" "maybe param" "maybe type" "temp"
          (654234 'move' call_tmp[654231](123701 call _cond_test call_tmp[654226]))
          if call_tmp[654231]
          {
            (123698 call halt "***Error: Degenerate dimension created in dimension " i[123732] "***")
            (479879 'end of statement' i[123732])
          }
        }
        label _continueLabel[123710]
        _indexOfInterest[123705]
        _iterator[123706]
      }
      label _breakLabel[123711]
    }
    unknown call_tmp[654238] "expr temp" "maybe param" "maybe type" "temp"
    (654241 'move' call_tmp[654238](383242 call dist _mt[243] this[126186]))
    unknown call_tmp[654245] "expr temp" "maybe param" "maybe type" "temp"
    (654248 'move' call_tmp[654245](383246 call rank _mt[243] this[126186]))
    unknown call_tmp[654252] "expr temp" "maybe param" "maybe type" "temp"
    (654255 'move' call_tmp[654252](359637 call _value _mt[243] this[126186]))
    unknown call_tmp[654259] "expr temp" "maybe param" "maybe type" "temp"
    (654262 'move' call_tmp[654259](123752 call idxType _mt[243] call_tmp[654252]))
    unknown call_tmp[654266] "expr temp" "maybe param" "maybe type" "temp"
    (654269 'move' call_tmp[654266](383250 call stridable _mt[243] this[126186]))
    unknown call_tmp[654271] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654274 'move' call_tmp[654271](748062 'new' _domain[125908](?) call_tmp[654238] call_tmp[654245] call_tmp[654259] call_tmp[654266] ranges[123609]))
    (517227 'move' ret[517222](517226 'deref' call_tmp[654271]))
    gotoReturn _end_expand[517220] _end_expand[517220]
    (479881 'end of statement' ranges[123609])
    label _end_expand[517220]
    (517224 return ret[517222])
  }
  function _domain[125908](?).expand[123768](arg _mt[126192]:_MT[238], arg this[126190]:_domain[125908](?), arg off[123765] :
  (383255 call intIdxType _mt[243] this[126190])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517233] "RVV" "temp"
    unknown call_tmp[654280] "maybe param" "maybe type" "temp"
    (654283 'move' call_tmp[654280](123776 call(383263 call (partial) dims _mt[243] this[126190])))
    unknown ranges[123777] "dead at end of block" "insert auto destroy"
    (543027 'init var' ranges[123777] call_tmp[654280])
    (123780 'end of statement')
    {
      unknown _indexOfInterest[123807] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123808] "expr temp" "temp"
      unknown call_tmp[654287] "expr temp" "maybe param" "maybe type" "temp"
      (654290 'move' call_tmp[654287](383275 call rank _mt[243] this[126190]))
      unknown call_tmp[654292] "expr temp" "maybe param" "maybe type" "temp"
      (654295 'move' call_tmp[654292](123822 call - call_tmp[654287] 1))
      unknown call_tmp[654297] "expr temp" "maybe param" "maybe type" "temp"
      (654300 'move' call_tmp[654297](123825 call chpl_direct_range_iter 0 call_tmp[654292] 1))
      (123817 'move' _iterator[123808](123815 call _getIterator call_tmp[654297]))
      Defer
      {
        {
          (123841 call _freeIterator _iterator[123808])
        }
      }
      { scopeless type
        (123830 'move' _indexOfInterest[123807](123827 call iteratorIndex _iterator[123808]))
      }
      ForLoop[123809]
      {
        unknown i[123834] "index var" "insert auto destroy"
        (479884 'end of statement')
        (123836 'move' i[123834] _indexOfInterest[123807])
        (479885 'end of statement' i[123834])
        unknown call_tmp[654302] "expr temp" "maybe param" "maybe type" "temp"
        (654305 'move' call_tmp[654302](123793 call ranges[123777] i[123834]))
        unknown call_tmp[654309] "expr temp" "maybe param" "maybe type" "temp"
        (654312 'move' call_tmp[654309](123797 call(383269 call (partial) dim _mt[243] this[126190]) i[123834]))
        unknown call_tmp[654316] "expr temp" "maybe param" "maybe type" "temp"
        (654319 'move' call_tmp[654316](123803 call(123798 call (partial) expand _mt[243] call_tmp[654309]) off[123765]))
        (123804 call = call_tmp[654302] call_tmp[654316])
        (479887 'end of statement' ranges[123777] i[123834] i[123834])
        label _continueLabel[123812]
        _indexOfInterest[123807]
        _iterator[123808]
      }
      label _breakLabel[123813]
    }
    unknown call_tmp[654323] "expr temp" "maybe param" "maybe type" "temp"
    (654326 'move' call_tmp[654323](383280 call dist _mt[243] this[126190]))
    unknown call_tmp[654330] "expr temp" "maybe param" "maybe type" "temp"
    (654333 'move' call_tmp[654330](383284 call rank _mt[243] this[126190]))
    unknown call_tmp[654337] "expr temp" "maybe param" "maybe type" "temp"
    (654340 'move' call_tmp[654337](359641 call _value _mt[243] this[126190]))
    unknown call_tmp[654344] "expr temp" "maybe param" "maybe type" "temp"
    (654347 'move' call_tmp[654344](123854 call idxType _mt[243] call_tmp[654337]))
    unknown call_tmp[654351] "expr temp" "maybe param" "maybe type" "temp"
    (654354 'move' call_tmp[654351](383288 call stridable _mt[243] this[126190]))
    unknown call_tmp[654356] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654359 'move' call_tmp[654356](748063 'new' _domain[125908](?) call_tmp[654323] call_tmp[654330] call_tmp[654344] call_tmp[654351] ranges[123777]))
    (517238 'move' ret[517233](517237 'deref' call_tmp[654356]))
    gotoReturn _end_expand[517231] _end_expand[517231]
    (479891 'end of statement' ranges[123777])
    label _end_expand[517231]
    (517235 return ret[517233])
  }
  where {
    unknown call_tmp[654363] "expr temp" "maybe param" "maybe type" "temp"
    (654366 'move' call_tmp[654363](383259 call rank _mt[243] this[126190]))
    (123772 call > call_tmp[654363] 1)
  }
  function _domain[125908](?).exterior[123874](arg _mt[126196]:_MT[238], arg this[126194]:_domain[125908](?), arg off[123871] :
  unknown call_tmp[654370] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654382] "expr temp" "maybe param" "maybe type" "temp"
    (654385 'move' call_tmp[654382](123885 call isAssociativeDom this[126194]))
    unknown call_tmp[654387] "expr temp" "maybe param" "maybe type" "temp"
    (654390 'move' call_tmp[654387](123959 call _cond_test call_tmp[654382]))
    if call_tmp[654387]
    {
      (123905 call compilerError "exterior not supported on associative domains")
    }
    {
      unknown call_tmp[654392] "expr temp" "maybe param" "maybe type" "temp"
      (654395 'move' call_tmp[654392](123910 call isSparseDom this[126194]))
      unknown call_tmp[654397] "expr temp" "maybe param" "maybe type" "temp"
      (654400 'move' call_tmp[654397](123953 call _cond_test call_tmp[654392]))
      if call_tmp[654397]
      {
        (123930 call compilerError "exterior not supported on sparse domains")
      }
      {
        (123951 call compilerError "exterior not supported on this domain type")
      }
    }
    (517242 return _void[55])
  }
  where {
    unknown call_tmp[654402] "expr temp" "maybe param" "maybe type" "temp"
    (654405 'move' call_tmp[654402](123879 call isRectangularDom this[126194]))
    (123880 call ! call_tmp[654402])
  }
  function _domain[125908](?).exterior[123977](arg _mt[126200]:_MT[238], arg this[126198]:_domain[125908](?), arg off[123973] ... :
  (383304 call intIdxType _mt[243] this[126198])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517246] "RVV" "temp"
    unknown call_tmp[654413] "expr temp" "maybe param" "maybe type" "temp"
    (654416 'move' call_tmp[654413](123982 call(383312 call (partial) exterior _mt[243] this[126198]) off[123973]))
    (517251 'move' ret[517246](517250 'deref' call_tmp[654413]))
    (517248 return ret[517246])
  }
  function _domain[125908](?).exterior[123997](arg _mt[126204]:_MT[238], arg this[126202]:_domain[125908](?), arg off[123994] :
  unknown call_tmp[654420] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517255] "RVV" "temp"
    unknown call_tmp[654434] "maybe param" "maybe type" "temp"
    (654437 'move' call_tmp[654434](124001 call(383325 call (partial) dims _mt[243] this[126202])))
    unknown ranges[124002] "dead at end of block" "insert auto destroy"
    (543029 'init var' ranges[124002] call_tmp[654434])
    (124005 'end of statement')
    {
      unknown _indexOfInterest[124037] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124038] "expr temp" "temp"
      unknown call_tmp[654441] "expr temp" "maybe param" "maybe type" "temp"
      (654444 'move' call_tmp[654441](383338 call rank _mt[243] this[126202]))
      unknown call_tmp[654446] "expr temp" "maybe param" "maybe type" "temp"
      (654449 'move' call_tmp[654446](124052 call - call_tmp[654441] 1))
      unknown call_tmp[654451] "expr temp" "maybe param" "maybe type" "temp"
      (654454 'move' call_tmp[654451](124055 call chpl_direct_range_iter 0 call_tmp[654446] 1))
      (124047 'move' _iterator[124038](124045 call _getIterator call_tmp[654451]))
      Defer
      {
        {
          (124071 call _freeIterator _iterator[124038])
        }
      }
      { scopeless type
        (124060 'move' _indexOfInterest[124037](124057 call iteratorIndex _iterator[124038]))
      }
      ForLoop[124039]
      {
        unknown i[124064] "index var" "insert auto destroy"
        (479898 'end of statement')
        (124066 'move' i[124064] _indexOfInterest[124037])
        (479899 'end of statement' i[124064])
        unknown call_tmp[654456] "expr temp" "maybe param" "maybe type" "temp"
        (654459 'move' call_tmp[654456](124018 call ranges[124002] i[124064]))
        unknown call_tmp[654463] "expr temp" "maybe param" "maybe type" "temp"
        (654466 'move' call_tmp[654463](124022 call(383331 call (partial) dim _mt[243] this[126202]) i[124064]))
        unknown call_tmp[654470] "expr temp" "maybe param" "maybe type" "temp"
        (654473 'move' call_tmp[654470](124031 call off[123994] i[124064]))
        unknown call_tmp[654475] "expr temp" "maybe param" "maybe type" "temp"
        (654478 'move' call_tmp[654475](124033 call(124025 call (partial) exterior _mt[243] call_tmp[654463]) call_tmp[654470]))
        (124034 call = call_tmp[654456] call_tmp[654475])
        (479901 'end of statement' ranges[124002] i[124064] i[124064] i[124064])
        label _continueLabel[124042]
        _indexOfInterest[124037]
        _iterator[124038]
      }
      label _breakLabel[124043]
    }
    unknown call_tmp[654482] "expr temp" "maybe param" "maybe type" "temp"
    (654485 'move' call_tmp[654482](383343 call dist _mt[243] this[126202]))
    unknown call_tmp[654489] "expr temp" "maybe param" "maybe type" "temp"
    (654492 'move' call_tmp[654489](383347 call rank _mt[243] this[126202]))
    unknown call_tmp[654496] "expr temp" "maybe param" "maybe type" "temp"
    (654499 'move' call_tmp[654496](359645 call _value _mt[243] this[126202]))
    unknown call_tmp[654503] "expr temp" "maybe param" "maybe type" "temp"
    (654506 'move' call_tmp[654503](124084 call idxType _mt[243] call_tmp[654496]))
    unknown call_tmp[654510] "expr temp" "maybe param" "maybe type" "temp"
    (654513 'move' call_tmp[654510](383351 call stridable _mt[243] this[126202]))
    unknown call_tmp[654515] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654518 'move' call_tmp[654515](748064 'new' _domain[125908](?) call_tmp[654482] call_tmp[654489] call_tmp[654503] call_tmp[654510] ranges[124002]))
    (517260 'move' ret[517255](517259 'deref' call_tmp[654515]))
    gotoReturn _end_exterior[517253] _end_exterior[517253]
    (479906 'end of statement' ranges[124002])
    label _end_exterior[517253]
    (517257 return ret[517255])
  }
  function _domain[125908](?).exterior[124100](arg _mt[126208]:_MT[238], arg this[126206]:_domain[125908](?), arg off[124097] :
  (383356 call intIdxType _mt[243] this[126206])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517266] "RVV" "temp"
    unknown offTup[124110] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654524] "expr temp" "maybe param" "maybe type" "temp"
    (654527 'move' call_tmp[654524](383364 call rank _mt[243] this[126206]))
    unknown call_tmp[654531] "expr temp" "maybe param" "maybe type" "temp"
    (654534 'move' call_tmp[654531](383368 call intIdxType _mt[243] this[126206]))
    unknown call_tmp[654536] "expr temp" "maybe param" "maybe type" "temp"
    (654539 'move' call_tmp[654536](124108 call * call_tmp[654524] call_tmp[654531]))
    (543031 'default init var' offTup[124110] call_tmp[654536])
    (124113 'end of statement')
    {
      unknown _indexOfInterest[124131] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124132] "expr temp" "temp"
      unknown call_tmp[654543] "expr temp" "maybe param" "maybe type" "temp"
      (654546 'move' call_tmp[654543](383375 call rank _mt[243] this[126206]))
      unknown call_tmp[654548] "expr temp" "maybe param" "maybe type" "temp"
      (654551 'move' call_tmp[654548](124146 call - call_tmp[654543] 1))
      unknown call_tmp[654553] "expr temp" "maybe param" "maybe type" "temp"
      (654556 'move' call_tmp[654553](124149 call chpl_direct_range_iter 0 call_tmp[654548] 1))
      (124141 'move' _iterator[124132](124139 call _getIterator call_tmp[654553]))
      Defer
      {
        {
          (124165 call _freeIterator _iterator[124132])
        }
      }
      { scopeless type
        (124154 'move' _indexOfInterest[124131](124151 call iteratorIndex _iterator[124132]))
      }
      ForLoop[124133]
      {
        unknown i[124158] "index var" "insert auto destroy"
        (479909 'end of statement')
        (124160 'move' i[124158] _indexOfInterest[124131])
        (479910 'end of statement' i[124158])
        unknown call_tmp[654558] "expr temp" "maybe param" "maybe type" "temp"
        (654561 'move' call_tmp[654558](124126 call offTup[124110] i[124158]))
        (124128 call = call_tmp[654558] off[124097])
        (479912 'end of statement' offTup[124110] i[124158])
        label _continueLabel[124136]
        _indexOfInterest[124131]
        _iterator[124132]
      }
      label _breakLabel[124137]
    }
    unknown call_tmp[654565] "expr temp" "maybe param" "maybe type" "temp"
    (654568 'move' call_tmp[654565](124175 call(383379 call (partial) exterior _mt[243] this[126206]) offTup[124110]))
    (517271 'move' ret[517266](517270 'deref' call_tmp[654565]))
    gotoReturn _end_exterior[517264] _end_exterior[517264]
    (479915 'end of statement' offTup[124110])
    label _end_exterior[517264]
    (517268 return ret[517266])
  }
  where {
    unknown call_tmp[654572] "expr temp" "maybe param" "maybe type" "temp"
    (654575 'move' call_tmp[654572](383360 call rank _mt[243] this[126206]))
    (124104 call != call_tmp[654572] 1)
  }
  function _domain[125908](?).interior[124190](arg _mt[126212]:_MT[238], arg this[126210]:_domain[125908](?), arg off[124187] :
  unknown call_tmp[654579] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654591] "expr temp" "maybe param" "maybe type" "temp"
    (654594 'move' call_tmp[654591](124201 call isAssociativeDom this[126210]))
    unknown call_tmp[654596] "expr temp" "maybe param" "maybe type" "temp"
    (654599 'move' call_tmp[654596](124275 call _cond_test call_tmp[654591]))
    if call_tmp[654596]
    {
      (124221 call compilerError "interior not supported on associative domains")
    }
    {
      unknown call_tmp[654601] "expr temp" "maybe param" "maybe type" "temp"
      (654604 'move' call_tmp[654601](124226 call isSparseDom this[126210]))
      unknown call_tmp[654606] "expr temp" "maybe param" "maybe type" "temp"
      (654609 'move' call_tmp[654606](124269 call _cond_test call_tmp[654601]))
      if call_tmp[654606]
      {
        (124246 call compilerError "interior not supported on sparse domains")
      }
      {
        (124267 call compilerError "interior not supported on this domain type")
      }
    }
    (517275 return _void[55])
  }
  where {
    unknown call_tmp[654611] "expr temp" "maybe param" "maybe type" "temp"
    (654614 'move' call_tmp[654611](124195 call isRectangularDom this[126210]))
    (124196 call ! call_tmp[654611])
  }
  function _domain[125908](?).interior[124293](arg _mt[126216]:_MT[238], arg this[126214]:_domain[125908](?), arg off[124289] ... :
  (383395 call intIdxType _mt[243] this[126214])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517279] "RVV" "temp"
    unknown call_tmp[654622] "expr temp" "maybe param" "maybe type" "temp"
    (654625 'move' call_tmp[654622](124298 call(383403 call (partial) interior _mt[243] this[126214]) off[124289]))
    (517284 'move' ret[517279](517283 'deref' call_tmp[654622]))
    (517281 return ret[517279])
  }
  function _domain[125908](?).interior[124313](arg _mt[126220]:_MT[238], arg this[126218]:_domain[125908](?), arg off[124310] :
  unknown call_tmp[654629] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517288] "RVV" "temp"
    unknown call_tmp[654643] "maybe param" "maybe type" "temp"
    (654646 'move' call_tmp[654643](124317 call(383416 call (partial) dims _mt[243] this[126218])))
    unknown ranges[124318] "dead at end of block" "insert auto destroy"
    (543033 'init var' ranges[124318] call_tmp[654643])
    (124321 'end of statement')
    {
      unknown _indexOfInterest[124455] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124456] "expr temp" "temp"
      unknown call_tmp[654650] "expr temp" "maybe param" "maybe type" "temp"
      (654653 'move' call_tmp[654650](383454 call rank _mt[243] this[126218]))
      unknown call_tmp[654655] "expr temp" "maybe param" "maybe type" "temp"
      (654658 'move' call_tmp[654655](124470 call - call_tmp[654650] 1))
      unknown call_tmp[654660] "expr temp" "maybe param" "maybe type" "temp"
      (654663 'move' call_tmp[654660](124473 call chpl_direct_range_iter 0 call_tmp[654655] 1))
      (124465 'move' _iterator[124456](124463 call _getIterator call_tmp[654660]))
      Defer
      {
        {
          (124489 call _freeIterator _iterator[124456])
        }
      }
      { scopeless type
        (124478 'move' _indexOfInterest[124455](124475 call iteratorIndex _iterator[124456]))
      }
      ForLoop[124457]
      {
        unknown i[124482] "index var" "insert auto destroy"
        (479922 'end of statement')
        (124484 'move' i[124482] _indexOfInterest[124455])
        (479923 'end of statement' i[124482])
        {
          unknown tmp[424916] "maybe param" "temp"
          unknown tmp[424937] "maybe param" "temp"
          unknown call_tmp[654665] "expr temp" "maybe param" "maybe type" "temp"
          (654668 'move' call_tmp[654665](124334 call off[124310] i[124482]))
          (424948 'move' tmp[424937](124336 call > call_tmp[654665] 0))
          unknown call_tmp[654670] "expr temp" "maybe param" "maybe type" "temp"
          (654673 'move' call_tmp[654670](424950 call _cond_invalid tmp[424937]))
          if call_tmp[654670]
          {
            (424953 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[565476] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565477] "maybe param" "temp"
          unknown call_tmp[654675] "expr temp" "maybe param" "maybe type" "temp"
          (654678 'move' call_tmp[654675](424938 call isTrue tmp[424937]))
          (565482 'move' tmp[565477](565480 call _cond_test call_tmp[654675]))
          if tmp[565477]
          {
            unknown tmp[565484] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[654682] "expr temp" "maybe param" "maybe type" "temp"
            (654685 'move' call_tmp[654682](124341 call(383422 call (partial) dim _mt[243] this[126218]) i[124482]))
            unknown call_tmp[654689] "expr temp" "maybe param" "maybe type" "temp"
            (654692 'move' call_tmp[654689](124342 call _high _mt[243] call_tmp[654682]))
            unknown call_tmp[654694] "expr temp" "maybe param" "maybe type" "temp"
            (654697 'move' call_tmp[654694](124346 call + call_tmp[654689] 1))
            unknown call_tmp[654699] "expr temp" "maybe param" "maybe type" "temp"
            (654702 'move' call_tmp[654699](124351 call off[124310] i[124482]))
            unknown call_tmp[654704] "expr temp" "maybe param" "maybe type" "temp"
            (654707 'move' call_tmp[654704](124352 call - call_tmp[654694] call_tmp[654699]))
            unknown call_tmp[654711] "expr temp" "maybe param" "maybe type" "temp"
            (654714 'move' call_tmp[654711](124357 call(383429 call (partial) dim _mt[243] this[126218]) i[124482]))
            unknown call_tmp[654718] "expr temp" "maybe param" "maybe type" "temp"
            (654721 'move' call_tmp[654718](124358 call _low _mt[243] call_tmp[654711]))
            unknown call_tmp[654723] "expr temp" "maybe param" "maybe type" "temp"
            (654726 'move' call_tmp[654723](124361 call < call_tmp[654704] call_tmp[654718]))
            (565486 'move' tmp[565484](424941 call isTrue call_tmp[654723]))
            (565491 'move' tmp[565476](565488 '_paramFoldLogical' tmp[565477] tmp[565484]))
          }
          {
            (565496 'move' tmp[565476](565493 '_paramFoldLogical' tmp[565477] 0))
          }
          (424927 'move' tmp[424916] tmp[565476])
          unknown call_tmp[654728] "expr temp" "maybe param" "maybe type" "temp"
          (654731 'move' call_tmp[654728](424929 call _cond_invalid tmp[424916]))
          if call_tmp[654728]
          {
            (424932 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[565530] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565531] "maybe param" "temp"
          unknown call_tmp[654733] "expr temp" "maybe param" "maybe type" "temp"
          (654736 'move' call_tmp[654733](424917 call isTrue tmp[424916]))
          (565536 'move' tmp[565531](565534 call _cond_test call_tmp[654733]))
          if tmp[565531]
          {
            (565541 'move' tmp[565530](565538 '_paramFoldLogical' tmp[565531] 1))
          }
          {
            unknown tmp[424958] "maybe param" "temp"
            unknown call_tmp[654738] "expr temp" "maybe param" "maybe type" "temp"
            (654741 'move' call_tmp[654738](124368 call off[124310] i[124482]))
            (424969 'move' tmp[424958](124370 call < call_tmp[654738] 0))
            unknown call_tmp[654743] "expr temp" "maybe param" "maybe type" "temp"
            (654746 'move' call_tmp[654743](424971 call _cond_invalid tmp[424958]))
            if call_tmp[654743]
            {
              (424974 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[565503] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[565504] "maybe param" "temp"
            unknown call_tmp[654748] "expr temp" "maybe param" "maybe type" "temp"
            (654751 'move' call_tmp[654748](424959 call isTrue tmp[424958]))
            (565509 'move' tmp[565504](565507 call _cond_test call_tmp[654748]))
            if tmp[565504]
            {
              unknown tmp[565511] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[654755] "expr temp" "maybe param" "maybe type" "temp"
              (654758 'move' call_tmp[654755](124375 call(383436 call (partial) dim _mt[243] this[126218]) i[124482]))
              unknown call_tmp[654762] "expr temp" "maybe param" "maybe type" "temp"
              (654765 'move' call_tmp[654762](124376 call _low _mt[243] call_tmp[654755]))
              unknown call_tmp[654767] "expr temp" "maybe param" "maybe type" "temp"
              (654770 'move' call_tmp[654767](124380 call - call_tmp[654762] 1))
              unknown call_tmp[654772] "expr temp" "maybe param" "maybe type" "temp"
              (654775 'move' call_tmp[654772](124385 call off[124310] i[124482]))
              unknown call_tmp[654777] "expr temp" "maybe param" "maybe type" "temp"
              (654780 'move' call_tmp[654777](124386 call - call_tmp[654767] call_tmp[654772]))
              unknown call_tmp[654784] "expr temp" "maybe param" "maybe type" "temp"
              (654787 'move' call_tmp[654784](124391 call(383443 call (partial) dim _mt[243] this[126218]) i[124482]))
              unknown call_tmp[654791] "expr temp" "maybe param" "maybe type" "temp"
              (654794 'move' call_tmp[654791](124392 call _high _mt[243] call_tmp[654784]))
              unknown call_tmp[654796] "expr temp" "maybe param" "maybe type" "temp"
              (654799 'move' call_tmp[654796](124395 call > call_tmp[654777] call_tmp[654791]))
              (565513 'move' tmp[565511](424962 call isTrue call_tmp[654796]))
              (565518 'move' tmp[565503](565515 '_paramFoldLogical' tmp[565504] tmp[565511]))
            }
            {
              (565523 'move' tmp[565503](565520 '_paramFoldLogical' tmp[565504] 0))
            }
            unknown tmp[565543] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (565545 'move' tmp[565543](424921 call isTrue tmp[565503]))
            (565550 'move' tmp[565530](565547 '_paramFoldLogical' tmp[565531] tmp[565543]))
          }
          unknown call_tmp[654801] "expr temp" "maybe param" "maybe type" "temp"
          (654804 'move' call_tmp[654801](124425 call _cond_test tmp[565530]))
          if call_tmp[654801]
          {
            (124422 call halt "***Error: Argument to 'interior' function out of range in dimension " i[124482] "***")
            (479927 'end of statement' i[124482])
          }
          unknown call_tmp[654806] "expr temp" "maybe param" "maybe type" "temp"
          (654809 'move' call_tmp[654806](124433 call ranges[124318] i[124482]))
          unknown call_tmp[654813] "expr temp" "maybe param" "maybe type" "temp"
          (654816 'move' call_tmp[654813](359649 call _value _mt[243] this[126218]))
          unknown call_tmp[654820] "expr temp" "maybe param" "maybe type" "temp"
          (654823 'move' call_tmp[654820](124440 call(124435 call (partial) dsiDim _mt[243] call_tmp[654813]) i[124482]))
          unknown call_tmp[654827] "expr temp" "maybe param" "maybe type" "temp"
          (654830 'move' call_tmp[654827](124449 call off[124310] i[124482]))
          unknown call_tmp[654832] "expr temp" "maybe param" "maybe type" "temp"
          (654835 'move' call_tmp[654832](124451 call(124443 call (partial) interior _mt[243] call_tmp[654820]) call_tmp[654827]))
          (124452 call = call_tmp[654806] call_tmp[654832])
          (479929 'end of statement' ranges[124318] i[124482] i[124482] i[124482])
        }
        label _continueLabel[124460]
        _indexOfInterest[124455]
        _iterator[124456]
      }
      label _breakLabel[124461]
    }
    unknown call_tmp[654839] "expr temp" "maybe param" "maybe type" "temp"
    (654842 'move' call_tmp[654839](383459 call dist _mt[243] this[126218]))
    unknown call_tmp[654846] "expr temp" "maybe param" "maybe type" "temp"
    (654849 'move' call_tmp[654846](383463 call rank _mt[243] this[126218]))
    unknown call_tmp[654853] "expr temp" "maybe param" "maybe type" "temp"
    (654856 'move' call_tmp[654853](359653 call _value _mt[243] this[126218]))
    unknown call_tmp[654860] "expr temp" "maybe param" "maybe type" "temp"
    (654863 'move' call_tmp[654860](124502 call idxType _mt[243] call_tmp[654853]))
    unknown call_tmp[654867] "expr temp" "maybe param" "maybe type" "temp"
    (654870 'move' call_tmp[654867](383467 call stridable _mt[243] this[126218]))
    unknown call_tmp[654872] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654875 'move' call_tmp[654872](748065 'new' _domain[125908](?) call_tmp[654839] call_tmp[654846] call_tmp[654860] call_tmp[654867] ranges[124318]))
    (517293 'move' ret[517288](517292 'deref' call_tmp[654872]))
    gotoReturn _end_interior[517286] _end_interior[517286]
    (479934 'end of statement' ranges[124318])
    label _end_interior[517286]
    (517290 return ret[517288])
  }
  function _domain[125908](?).interior[124518](arg _mt[126224]:_MT[238], arg this[126222]:_domain[125908](?), arg off[124515] :
  (383472 call intIdxType _mt[243] this[126222])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517299] "RVV" "temp"
    unknown offTup[124528] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654881] "expr temp" "maybe param" "maybe type" "temp"
    (654884 'move' call_tmp[654881](383480 call rank _mt[243] this[126222]))
    unknown call_tmp[654888] "expr temp" "maybe param" "maybe type" "temp"
    (654891 'move' call_tmp[654888](383484 call intIdxType _mt[243] this[126222]))
    unknown call_tmp[654893] "expr temp" "maybe param" "maybe type" "temp"
    (654896 'move' call_tmp[654893](124526 call * call_tmp[654881] call_tmp[654888]))
    (543035 'default init var' offTup[124528] call_tmp[654893])
    (124531 'end of statement')
    {
      unknown _indexOfInterest[124549] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124550] "expr temp" "temp"
      unknown call_tmp[654900] "expr temp" "maybe param" "maybe type" "temp"
      (654903 'move' call_tmp[654900](383491 call rank _mt[243] this[126222]))
      unknown call_tmp[654905] "expr temp" "maybe param" "maybe type" "temp"
      (654908 'move' call_tmp[654905](124564 call - call_tmp[654900] 1))
      unknown call_tmp[654910] "expr temp" "maybe param" "maybe type" "temp"
      (654913 'move' call_tmp[654910](124567 call chpl_direct_range_iter 0 call_tmp[654905] 1))
      (124559 'move' _iterator[124550](124557 call _getIterator call_tmp[654910]))
      Defer
      {
        {
          (124583 call _freeIterator _iterator[124550])
        }
      }
      { scopeless type
        (124572 'move' _indexOfInterest[124549](124569 call iteratorIndex _iterator[124550]))
      }
      ForLoop[124551]
      {
        unknown i[124576] "index var" "insert auto destroy"
        (479937 'end of statement')
        (124578 'move' i[124576] _indexOfInterest[124549])
        (479938 'end of statement' i[124576])
        unknown call_tmp[654915] "expr temp" "maybe param" "maybe type" "temp"
        (654918 'move' call_tmp[654915](124544 call offTup[124528] i[124576]))
        (124546 call = call_tmp[654915] off[124515])
        (479940 'end of statement' offTup[124528] i[124576])
        label _continueLabel[124554]
        _indexOfInterest[124549]
        _iterator[124550]
      }
      label _breakLabel[124555]
    }
    unknown call_tmp[654922] "expr temp" "maybe param" "maybe type" "temp"
    (654925 'move' call_tmp[654922](124593 call(383495 call (partial) interior _mt[243] this[126222]) offTup[124528]))
    (517304 'move' ret[517299](517303 'deref' call_tmp[654922]))
    gotoReturn _end_interior[517297] _end_interior[517297]
    (479943 'end of statement' offTup[124528])
    label _end_interior[517297]
    (517301 return ret[517299])
  }
  where {
    unknown call_tmp[654929] "expr temp" "maybe param" "maybe type" "temp"
    (654932 'move' call_tmp[654929](383476 call rank _mt[243] this[126222]))
    (124522 call != call_tmp[654929] 1)
  }
  function _domain[125908](?).translate[124603](arg _mt[126228]:_MT[238], arg this[126226]:_domain[125908](?), arg off[124601]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654934] "expr temp" "maybe param" "maybe type" "temp"
    (654937 'move' call_tmp[654934](124614 call isAssociativeDom this[126226]))
    unknown call_tmp[654939] "expr temp" "maybe param" "maybe type" "temp"
    (654942 'move' call_tmp[654939](124688 call _cond_test call_tmp[654934]))
    if call_tmp[654939]
    {
      (124634 call compilerError "translate not supported on associative domains")
    }
    {
      unknown call_tmp[654944] "expr temp" "maybe param" "maybe type" "temp"
      (654947 'move' call_tmp[654944](124639 call isSparseDom this[126226]))
      unknown call_tmp[654949] "expr temp" "maybe param" "maybe type" "temp"
      (654952 'move' call_tmp[654949](124682 call _cond_test call_tmp[654944]))
      if call_tmp[654949]
      {
        (124659 call compilerError "translate not supported on sparse domains")
      }
      {
        (124680 call compilerError "translate not supported on this domain type")
      }
    }
    (517308 return _void[55])
  }
  where {
    unknown call_tmp[654954] "expr temp" "maybe param" "maybe type" "temp"
    (654957 'move' call_tmp[654954](124608 call isRectangularDom this[126226]))
    (124609 call ! call_tmp[654954])
  }
  function _domain[125908](?).translate[124704](arg _mt[126232]:_MT[238], arg this[126230]:_domain[125908](?), arg off[124701]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517312] "RVV" "temp"
    unknown call_tmp[654963] "expr temp" "maybe param" "maybe type" "temp"
    (654966 'move' call_tmp[654963](124709 call(383507 call (partial) translate _mt[243] this[126230]) off[124701]))
    (517317 'move' ret[517312](517316 'deref' call_tmp[654963]))
    (517314 return ret[517312])
  }
  function _domain[125908](?).translate[124719](arg _mt[126236]:_MT[238], arg this[126234]:_domain[125908](?), arg off[124717]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517321] "RVV" "temp"
    unknown call_tmp[654970] "expr temp" "maybe param" "maybe type" "temp"
    (654973 'move' call_tmp[654970](124726 call size _mt[243] off[124717]))
    unknown call_tmp[654977] "expr temp" "maybe param" "maybe type" "temp"
    (654980 'move' call_tmp[654977](383513 call rank _mt[243] this[126234]))
    unknown call_tmp[654982] "expr temp" "maybe param" "maybe type" "temp"
    (654985 'move' call_tmp[654982](124730 call != call_tmp[654970] call_tmp[654977]))
    unknown call_tmp[654987] "expr temp" "maybe param" "maybe type" "temp"
    (654990 'move' call_tmp[654987](124753 call _cond_test call_tmp[654982]))
    if call_tmp[654987]
    {
      (124751 call compilerError "the domain and offset arguments of translate() must be of the same rank")
    }
    unknown call_tmp[654994] "maybe param" "maybe type" "temp"
    (654997 'move' call_tmp[654994](124761 call(383517 call (partial) dims _mt[243] this[126234])))
    unknown ranges[124762] "dead at end of block" "insert auto destroy"
    (543037 'init var' ranges[124762] call_tmp[654994])
    (124765 'end of statement')
    {
      unknown _indexOfInterest[124799] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124800] "expr temp" "temp"
      unknown call_tmp[655001] "expr temp" "maybe param" "maybe type" "temp"
      (655004 'move' call_tmp[655001](383526 call rank _mt[243] this[126234]))
      unknown call_tmp[655006] "expr temp" "maybe param" "maybe type" "temp"
      (655009 'move' call_tmp[655006](124814 call - call_tmp[655001] 1))
      unknown call_tmp[655011] "expr temp" "maybe param" "maybe type" "temp"
      (655014 'move' call_tmp[655011](124817 call chpl_direct_range_iter 0 call_tmp[655006] 1))
      (124809 'move' _iterator[124800](124807 call _getIterator call_tmp[655011]))
      Defer
      {
        {
          (124833 call _freeIterator _iterator[124800])
        }
      }
      { scopeless type
        (124822 'move' _indexOfInterest[124799](124819 call iteratorIndex _iterator[124800]))
      }
      ForLoop[124801]
      {
        unknown i[124826] "index var" "insert auto destroy"
        (479951 'end of statement')
        (124828 'move' i[124826] _indexOfInterest[124799])
        (479952 'end of statement' i[124826])
        unknown call_tmp[655016] "expr temp" "maybe param" "maybe type" "temp"
        (655019 'move' call_tmp[655016](124777 call ranges[124762] i[124826]))
        unknown call_tmp[655023] "expr temp" "maybe param" "maybe type" "temp"
        (655026 'move' call_tmp[655023](359658 call _value _mt[243] this[126234]))
        unknown call_tmp[655030] "expr temp" "maybe param" "maybe type" "temp"
        (655033 'move' call_tmp[655030](124784 call(124779 call (partial) dsiDim _mt[243] call_tmp[655023]) i[124826]))
        unknown call_tmp[655037] "expr temp" "maybe param" "maybe type" "temp"
        (655040 'move' call_tmp[655037](124793 call off[124717] i[124826]))
        unknown call_tmp[655042] "expr temp" "maybe param" "maybe type" "temp"
        (655045 'move' call_tmp[655042](124795 call(124787 call (partial) translate _mt[243] call_tmp[655030]) call_tmp[655037]))
        (124796 call = call_tmp[655016] call_tmp[655042])
        (479954 'end of statement' ranges[124762] i[124826] i[124826] i[124826])
        label _continueLabel[124804]
        _indexOfInterest[124799]
        _iterator[124800]
      }
      label _breakLabel[124805]
    }
    unknown call_tmp[655049] "expr temp" "maybe param" "maybe type" "temp"
    (655052 'move' call_tmp[655049](383531 call dist _mt[243] this[126234]))
    unknown call_tmp[655056] "expr temp" "maybe param" "maybe type" "temp"
    (655059 'move' call_tmp[655056](383535 call rank _mt[243] this[126234]))
    unknown call_tmp[655063] "expr temp" "maybe param" "maybe type" "temp"
    (655066 'move' call_tmp[655063](359662 call _value _mt[243] this[126234]))
    unknown call_tmp[655070] "expr temp" "maybe param" "maybe type" "temp"
    (655073 'move' call_tmp[655070](124846 call idxType _mt[243] call_tmp[655063]))
    unknown call_tmp[655077] "expr temp" "maybe param" "maybe type" "temp"
    (655080 'move' call_tmp[655077](383539 call stridable _mt[243] this[126234]))
    unknown call_tmp[655082] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (655085 'move' call_tmp[655082](748066 'new' _domain[125908](?) call_tmp[655049] call_tmp[655056] call_tmp[655070] call_tmp[655077] ranges[124762]))
    (517326 'move' ret[517321](517325 'deref' call_tmp[655082]))
    gotoReturn _end_translate[517319] _end_translate[517319]
    (479959 'end of statement' ranges[124762])
    label _end_translate[517319]
    (517323 return ret[517321])
  }
  where {
    (124724 call isTuple off[124717])
  }
  function _domain[125908](?).translate[124861](arg _mt[126240]:_MT[238], arg this[126238]:_domain[125908](?), arg off[124859]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517332] "RVV" "temp"
    unknown offTup[124880] "dead at end of block" "insert auto destroy"
    unknown call_tmp[655089] "expr temp" "maybe param" "maybe type" "temp"
    (655092 'move' call_tmp[655089](383549 call rank _mt[243] this[126238]))
    unknown call_tmp[655094] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (655097 'move' call_tmp[655094](124877 'typeof' off[124859]))
    unknown call_tmp[655099] "expr temp" "maybe param" "maybe type" "temp"
    (655102 'move' call_tmp[655099](124878 call * call_tmp[655089] call_tmp[655094]))
    (543039 'default init var' offTup[124880] call_tmp[655099])
    (124883 'end of statement')
    {
      unknown _indexOfInterest[124901] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124902] "expr temp" "temp"
      unknown call_tmp[655106] "expr temp" "maybe param" "maybe type" "temp"
      (655109 'move' call_tmp[655106](383557 call rank _mt[243] this[126238]))
      unknown call_tmp[655111] "expr temp" "maybe param" "maybe type" "temp"
      (655114 'move' call_tmp[655111](124916 call - call_tmp[655106] 1))
      unknown call_tmp[655116] "expr temp" "maybe param" "maybe type" "temp"
      (655119 'move' call_tmp[655116](124919 call chpl_direct_range_iter 0 call_tmp[655111] 1))
      (124911 'move' _iterator[124902](124909 call _getIterator call_tmp[655116]))
      Defer
      {
        {
          (124935 call _freeIterator _iterator[124902])
        }
      }
      { scopeless type
        (124924 'move' _indexOfInterest[124901](124921 call iteratorIndex _iterator[124902]))
      }
      ForLoop[124903]
      {
        unknown i[124928] "index var" "insert auto destroy"
        (479962 'end of statement')
        (124930 'move' i[124928] _indexOfInterest[124901])
        (479963 'end of statement' i[124928])
        unknown call_tmp[655121] "expr temp" "maybe param" "maybe type" "temp"
        (655124 'move' call_tmp[655121](124896 call offTup[124880] i[124928]))
        (124898 call = call_tmp[655121] off[124859])
        (479965 'end of statement' offTup[124880] i[124928])
        label _continueLabel[124906]
        _indexOfInterest[124901]
        _iterator[124902]
      }
      label _breakLabel[124907]
    }
    unknown call_tmp[655128] "expr temp" "maybe param" "maybe type" "temp"
    (655131 'move' call_tmp[655128](124945 call(383561 call (partial) translate _mt[243] this[126238]) offTup[124880]))
    (517337 'move' ret[517332](517336 'deref' call_tmp[655128]))
    gotoReturn _end_translate[517330] _end_translate[517330]
    (479968 'end of statement' offTup[124880])
    label _end_translate[517330]
    (517334 return ret[517332])
  }
  where {
    unknown tmp[424979] "maybe param" "temp"
    unknown call_tmp[655135] "expr temp" "maybe param" "maybe type" "temp"
    (655138 'move' call_tmp[655135](383544 call rank _mt[243] this[126238]))
    (424990 'move' tmp[424979](124865 call != call_tmp[655135] 1))
    unknown call_tmp[655140] "expr temp" "maybe param" "maybe type" "temp"
    (655143 'move' call_tmp[655140](424992 call _cond_invalid tmp[424979]))
    if call_tmp[655140]
    {
      (424995 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565557] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565558] "maybe param" "temp"
    unknown call_tmp[655145] "expr temp" "maybe param" "maybe type" "temp"
    (655148 'move' call_tmp[655145](424980 call isTrue tmp[424979]))
    (565563 'move' tmp[565558](565561 call _cond_test call_tmp[655145]))
    if tmp[565558]
    {
      unknown tmp[565565] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655150] "expr temp" "maybe param" "maybe type" "temp"
      (655153 'move' call_tmp[655150](124870 call isTuple off[124859]))
      unknown call_tmp[655155] "expr temp" "maybe param" "maybe type" "temp"
      (655158 'move' call_tmp[655155](124871 call ! call_tmp[655150]))
      (565567 'move' tmp[565565](424983 call isTrue call_tmp[655155]))
      (565572 'move' tmp[565557](565569 '_paramFoldLogical' tmp[565558] tmp[565565]))
    }
    {
      (565577 'move' tmp[565557](565574 '_paramFoldLogical' tmp[565558] 0))
    }
    (748453 call chpl_statementLevelSymbol tmp[565557])
  }
  function _domain[125908](?).isEmpty[124953](arg _mt[126244]:_MT[238], arg this[126242]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517343] "RVV" "temp"
    unknown call_tmp[655162] "expr temp" "maybe param" "maybe type" "temp"
    (655165 'move' call_tmp[655162](124957 call size _mt[243] this[126242]))
    unknown call_tmp[655167] "expr temp" "maybe param" "maybe type" "temp"
    (655170 'move' call_tmp[655167](124961 call == call_tmp[655162] 0))
    (517349 'move' ret[517343](517348 'coerce' call_tmp[655167] bool[10]))
    (517345 return ret[517343])
  }
  { scopeless type
    bool[10]
  }
  function _domain[125908](?).chpl__unTranslate[124977](arg _mt[126248]:_MT[238], arg this[126246]:_domain[125908](?), arg off[124973]:integral[199](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517353] "RVV" "temp"
    unknown call_tmp[655176] "expr temp" "maybe param" "maybe type" "temp"
    (655179 'move' call_tmp[655176](124982 call(383571 call (partial) chpl__unTranslate _mt[243] this[126246]) off[124973]))
    (517358 'move' ret[517353](517357 'deref' call_tmp[655176]))
    (517355 return ret[517353])
  }
  function _domain[125908](?).chpl__unTranslate[124997](arg _mt[126252]:_MT[238], arg this[126250]:_domain[125908](?), arg off[124994] :
  unknown call_tmp[655183] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517362] "RVV" "temp"
    unknown call_tmp[655197] "maybe param" "maybe type" "temp"
    (655200 'move' call_tmp[655197](125001 call(383584 call (partial) dims _mt[243] this[126250])))
    unknown ranges[125002] "dead at end of block" "insert auto destroy"
    (543041 'init var' ranges[125002] call_tmp[655197])
    (125005 'end of statement')
    {
      unknown _indexOfInterest[125037] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125038] "expr temp" "temp"
      unknown call_tmp[655204] "expr temp" "maybe param" "maybe type" "temp"
      (655207 'move' call_tmp[655204](383597 call rank _mt[243] this[126250]))
      unknown call_tmp[655209] "expr temp" "maybe param" "maybe type" "temp"
      (655212 'move' call_tmp[655209](125052 call - call_tmp[655204] 1))
      unknown call_tmp[655214] "expr temp" "maybe param" "maybe type" "temp"
      (655217 'move' call_tmp[655214](125055 call chpl_direct_range_iter 0 call_tmp[655209] 1))
      (125047 'move' _iterator[125038](125045 call _getIterator call_tmp[655214]))
      Defer
      {
        {
          (125071 call _freeIterator _iterator[125038])
        }
      }
      { scopeless type
        (125060 'move' _indexOfInterest[125037](125057 call iteratorIndex _iterator[125038]))
      }
      ForLoop[125039]
      {
        unknown i[125064] "index var" "insert auto destroy"
        (479973 'end of statement')
        (125066 'move' i[125064] _indexOfInterest[125037])
        (479974 'end of statement' i[125064])
        unknown call_tmp[655219] "expr temp" "maybe param" "maybe type" "temp"
        (655222 'move' call_tmp[655219](125018 call ranges[125002] i[125064]))
        unknown call_tmp[655226] "expr temp" "maybe param" "maybe type" "temp"
        (655229 'move' call_tmp[655226](125022 call(383590 call (partial) dim _mt[243] this[126250]) i[125064]))
        unknown call_tmp[655233] "expr temp" "maybe param" "maybe type" "temp"
        (655236 'move' call_tmp[655233](125031 call off[124994] i[125064]))
        unknown call_tmp[655238] "expr temp" "maybe param" "maybe type" "temp"
        (655241 'move' call_tmp[655238](125033 call(125025 call (partial) chpl__unTranslate _mt[243] call_tmp[655226]) call_tmp[655233]))
        (125034 call = call_tmp[655219] call_tmp[655238])
        (479976 'end of statement' ranges[125002] i[125064] i[125064] i[125064])
        label _continueLabel[125042]
        _indexOfInterest[125037]
        _iterator[125038]
      }
      label _breakLabel[125043]
    }
    unknown call_tmp[655245] "expr temp" "maybe param" "maybe type" "temp"
    (655248 'move' call_tmp[655245](383602 call dist _mt[243] this[126250]))
    unknown call_tmp[655252] "expr temp" "maybe param" "maybe type" "temp"
    (655255 'move' call_tmp[655252](383606 call rank _mt[243] this[126250]))
    unknown call_tmp[655259] "expr temp" "maybe param" "maybe type" "temp"
    (655262 'move' call_tmp[655259](359667 call _value _mt[243] this[126250]))
    unknown call_tmp[655266] "expr temp" "maybe param" "maybe type" "temp"
    (655269 'move' call_tmp[655266](125084 call idxType _mt[243] call_tmp[655259]))
    unknown call_tmp[655273] "expr temp" "maybe param" "maybe type" "temp"
    (655276 'move' call_tmp[655273](383610 call stridable _mt[243] this[126250]))
    unknown call_tmp[655278] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (655281 'move' call_tmp[655278](748067 'new' _domain[125908](?) call_tmp[655245] call_tmp[655252] call_tmp[655266] call_tmp[655273] ranges[125002]))
    (517367 'move' ret[517362](517366 'deref' call_tmp[655278]))
    gotoReturn _end_chpl__unTranslate[517360] _end_chpl__unTranslate[517360]
    (479981 'end of statement' ranges[125002])
    label _end_chpl__unTranslate[517360]
    (517364 return ret[517362])
  }
  function _domain[125908](?).setIndices[125098](arg _mt[126256]:_MT[238], arg this[126254]:_domain[125908](?), arg x[125096]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655285] "expr temp" "maybe param" "maybe type" "temp"
    (655288 'move' call_tmp[655285](359671 call _value _mt[243] this[126254]))
    (125106 call(125101 call (partial) dsiSetIndices _mt[243] call_tmp[655285]) x[125096])
    (479983 'end of statement')
    unknown call_tmp[655294] "expr temp" "maybe param" "maybe type" "temp"
    (655297 'move' call_tmp[655294](383617 call _instance _mt[243] this[126254]))
    unknown call_tmp[655299] "expr temp" "maybe param" "maybe type" "temp"
    (655302 'move' call_tmp[655299](125112 call _isPrivatized call_tmp[655294]))
    unknown call_tmp[655304] "expr temp" "maybe param" "maybe type" "temp"
    (655307 'move' call_tmp[655304](125119 call _cond_test call_tmp[655299]))
    if call_tmp[655304]
    {
      unknown call_tmp[655311] "expr temp" "maybe param" "maybe type" "temp"
      (655314 'move' call_tmp[655311](383621 call _value _mt[243] this[126254]))
      (125116 call _reprivatize call_tmp[655311])
    }
    (517371 return _void[55])
  }
  function _domain[125908](?).getIndices[125127](arg _mt[126260]:_MT[238], arg this[126258]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517375] "RVV" "temp"
    unknown call_tmp[655318] "expr temp" "maybe param" "maybe type" "temp"
    (655321 'move' call_tmp[655318](359675 call _value _mt[243] this[126258]))
    unknown call_tmp[655325] "expr temp" "maybe param" "maybe type" "temp"
    (655328 'move' call_tmp[655325](125136 call(125132 call (partial) dsiGetIndices _mt[243] call_tmp[655318])))
    (517380 'move' ret[517375](517379 'deref' call_tmp[655325]))
    (517377 return ret[517375])
  }
  function _domain[125908](?).writeThis[125146](arg _mt[126264]:_MT[238], arg this[126262]:_domain[125908](?), arg f[125144]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655332] "expr temp" "maybe param" "maybe type" "temp"
    (655335 'move' call_tmp[655332](359679 call _value _mt[243] this[126262]))
    (125156 call(125151 call (partial) dsiSerialWrite _mt[243] call_tmp[655332]) f[125144])
    (517382 return _void[55])
  }
  function _domain[125908](?).readThis[125165](arg _mt[126268]:_MT[238], arg this[126266]:_domain[125908](?), arg f[125163]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655341] "expr temp" "maybe param" "maybe type" "temp"
    (655344 'move' call_tmp[655341](359683 call _value _mt[243] this[126266]))
    (125175 call(125170 call (partial) dsiSerialRead _mt[243] call_tmp[655341]) f[125163])
    (517384 return _void[55])
  }
  function _domain[125908](?).localSlice[125186](arg _mt[126272]:_MT[238], arg this[126270]:_domain[125908](?), arg r[125183]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517388] "RVV" "temp"
    unknown call_tmp[655352] "expr temp" "maybe param" "maybe type" "temp"
    (655355 'move' call_tmp[655352](383632 call _value _mt[243] this[126270]))
    unknown call_tmp[655357] "expr temp" "maybe param" "maybe type" "temp"
    (655360 'move' call_tmp[655357](125201 '_wide_get_locale' call_tmp[655352]))
    unknown call_tmp[655362] "expr temp" "maybe param" "maybe type" "temp"
    (655365 'move' call_tmp[655362](125202 call chpl_localeID_to_locale call_tmp[655357]))
    unknown call_tmp[655367] "expr temp" "maybe param" "maybe type" "temp"
    (655370 'move' call_tmp[655367](383635 call here[90438]))
    unknown call_tmp[655372] "expr temp" "maybe param" "maybe type" "temp"
    (655375 'move' call_tmp[655372](125205 call != call_tmp[655362] call_tmp[655367]))
    unknown call_tmp[655377] "expr temp" "maybe param" "maybe type" "temp"
    (655380 'move' call_tmp[655377](125254 call _cond_test call_tmp[655372]))
    if call_tmp[655377]
    {
      unknown call_tmp[655384] "expr temp" "maybe param" "maybe type" "temp"
      (655387 'move' call_tmp[655384](383638 call _value _mt[243] this[126270]))
      unknown call_tmp[655389] "expr temp" "maybe param" "maybe type" "temp"
      (655392 'move' call_tmp[655389](125230 '_wide_get_node' call_tmp[655384]))
      unknown call_tmp[655394] "expr temp" "maybe param" "maybe type" "temp"
      (655397 'move' call_tmp[655394](359690 call here[90438]))
      unknown call_tmp[655401] "expr temp" "maybe param" "maybe type" "temp"
      (655404 'move' call_tmp[655401](125249 call id _mt[243] call_tmp[655394]))
      (125252 call halt "Attempting to take a local slice of a domain on locale " call_tmp[655389] " from locale " call_tmp[655401])
    }
    unknown call_tmp[655406] "expr temp" "maybe param" "maybe type" "temp"
    (655409 'move' call_tmp[655406](125264 call this[126270](125262 'expand_tuple' r[125183])))
    (517393 'move' ret[517388](517392 'deref' call_tmp[655406]))
    (517390 return ret[517388])
  }
  where {
    unknown tmp[425000] "maybe param" "temp"
    (425011 'move' tmp[425000](125191 call chpl__isTupleOfRanges r[125183]))
    unknown call_tmp[655411] "expr temp" "maybe param" "maybe type" "temp"
    (655414 'move' call_tmp[655411](425013 call _cond_invalid tmp[425000]))
    if call_tmp[655411]
    {
      (425016 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565584] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565585] "maybe param" "temp"
    unknown call_tmp[655416] "expr temp" "maybe param" "maybe type" "temp"
    (655419 'move' call_tmp[655416](425001 call isTrue tmp[425000]))
    (565590 'move' tmp[565585](565588 call _cond_test call_tmp[655416]))
    if tmp[565585]
    {
      unknown tmp[565592] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655423] "expr temp" "maybe param" "maybe type" "temp"
      (655426 'move' call_tmp[655423](359687 call _value _mt[243] this[126270]))
      unknown call_tmp[655430] "expr temp" "maybe param" "maybe type" "temp"
      (655433 'move' call_tmp[655430](125197 call(125193 call (partial) isDefaultRectangular _mt[243] call_tmp[655423])))
      (565594 'move' tmp[565592](425004 call isTrue call_tmp[655430]))
      (565599 'move' tmp[565584](565596 '_paramFoldLogical' tmp[565585] tmp[565592]))
    }
    {
      (565604 'move' tmp[565584](565601 '_paramFoldLogical' tmp[565585] 0))
    }
    (748455 call chpl_statementLevelSymbol tmp[565584])
  }
  function _domain[125908](?).localSlice[125276](arg _mt[126276]:_MT[238], arg this[126274]:_domain[125908](?), arg r[125273]:_any[178](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517397] "RVV" "temp"
    unknown call_tmp[655439] "expr temp" "maybe param" "maybe type" "temp"
    (655442 'move' call_tmp[655439](359697 call _value _mt[243] this[126274]))
    unknown call_tmp[655446] "expr temp" "maybe param" "maybe type" "temp"
    (655449 'move' call_tmp[655446](125301 call chpl__anyStridable r[125273]))
    unknown call_tmp[655451] "expr temp" "maybe param" "maybe type" "temp"
    (655454 'move' call_tmp[655451](125304 call(125295 call (partial) dsiLocalSlice _mt[243] call_tmp[655439]) call_tmp[655446] r[125273]))
    (517402 'move' ret[517397](517401 'deref' call_tmp[655451]))
    (517399 return ret[517397])
  }
  where {
    unknown tmp[425021] "maybe param" "temp"
    (425032 'move' tmp[425021](125281 call chpl__isTupleOfRanges r[125273]))
    unknown call_tmp[655456] "expr temp" "maybe param" "maybe type" "temp"
    (655459 'move' call_tmp[655456](425034 call _cond_invalid tmp[425021]))
    if call_tmp[655456]
    {
      (425037 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565611] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565612] "maybe param" "temp"
    unknown call_tmp[655461] "expr temp" "maybe param" "maybe type" "temp"
    (655464 'move' call_tmp[655461](425022 call isTrue tmp[425021]))
    (565617 'move' tmp[565612](565615 call _cond_test call_tmp[655461]))
    if tmp[565612]
    {
      unknown tmp[565619] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655468] "expr temp" "maybe param" "maybe type" "temp"
      (655471 'move' call_tmp[655468](359693 call _value _mt[243] this[126274]))
      unknown call_tmp[655475] "expr temp" "maybe param" "maybe type" "temp"
      (655478 'move' call_tmp[655475](125287 call(125283 call (partial) isDefaultRectangular _mt[243] call_tmp[655468])))
      unknown call_tmp[655480] "expr temp" "maybe param" "maybe type" "temp"
      (655483 'move' call_tmp[655480](125288 call ! call_tmp[655475]))
      (565621 'move' tmp[565619](425025 call isTrue call_tmp[655480]))
      (565626 'move' tmp[565611](565623 '_paramFoldLogical' tmp[565612] tmp[565619]))
    }
    {
      (565631 'move' tmp[565611](565628 '_paramFoldLogical' tmp[565612] 0))
    }
    (748457 call chpl_statementLevelSymbol tmp[565611])
  }
  function _domain[125908](?).localSlice[125317](arg _mt[126280]:_MT[238], arg this[126278]:_domain[125908](?), arg d[125314]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517406] "RVV" "temp"
    unknown call_tmp[655489] "expr temp" "maybe param" "maybe type" "temp"
    (655492 'move' call_tmp[655489](125325 call(125321 call (partial) getIndices _mt[243] d[125314])))
    unknown call_tmp[655494] "expr temp" "maybe param" "maybe type" "temp"
    (655497 'move' call_tmp[655494](125328 call(383652 call (partial) localSlice _mt[243] this[126278])(125326 'expand_tuple' call_tmp[655489])))
    (517411 'move' ret[517406](517410 'deref' call_tmp[655494]))
    (517408 return ret[517406])
  }
  function _domain[125908](?).sorted[125345](arg _mt[126284]:_MT[238], arg this[126282]:_domain[125908](?), arg comparator[125341]:_any[178](?) :
  (749004 call chpl_defaultComparator) =
  (125340 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517415] "RVV" "temp"
    {
      unknown _indexOfInterest[125361] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125362] "expr temp" "temp"
      unknown call_tmp[655501] "expr temp" "maybe param" "maybe type" "temp"
      (655504 'move' call_tmp[655501](359702 call _value _mt[243] this[126282]))
      unknown call_tmp[655508] "expr temp" "maybe param" "maybe type" "temp"
      (655511 'move' call_tmp[655508](125356 call(125351 call (partial) dsiSorted _mt[243] call_tmp[655501]) comparator[125341]))
      (125371 'move' _iterator[125362](125369 call _getIterator call_tmp[655508]))
      Defer
      {
        {
          (125388 call _freeIterator _iterator[125362])
        }
      }
      { scopeless type
        (125377 'move' _indexOfInterest[125361](125374 call iteratorIndex _iterator[125362]))
      }
      ForLoop[125363]
      {
        unknown i[125381] "index var" "insert auto destroy"
        (479993 'end of statement')
        (125383 'move' i[125381] _indexOfInterest[125361])
        (479994 'end of statement' i[125381])
        {
          unknown yret[517419] "YVV" "temp"
          (517422 'move' yret[517419](517421 'deref' i[125381]))
          (517424 yield yret[517419])
          (479996 'end of statement' i[125381])
        }
        label _continueLabel[125366]
        _indexOfInterest[125361]
        _iterator[125362]
      }
      label _breakLabel[125367]
    }
    (517417 return ret[517415])
  }
  function _domain[125908](?).displayRepresentation[125400](arg _mt[126288]:_MT[238], arg this[126286]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655515] "expr temp" "maybe param" "maybe type" "temp"
    (655518 'move' call_tmp[655515](359706 call _value _mt[243] this[126286]))
    (125407 call(125403 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[655515]))
    (517426 return _void[55])
  }
  function _domain[125908](?).defaultSparseDist[125414](arg _mt[126292]:_MT[238], arg this[126290]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[517430] "RVV" "temp"
    unknown call_tmp[655524] "expr temp" "maybe param" "maybe type" "temp"
    (655527 'move' call_tmp[655524](359710 call _value _mt[243] this[126290]))
    unknown call_tmp[655531] "expr temp" "maybe param" "maybe type" "temp"
    (655534 'move' call_tmp[655531](125418 call dist _mt[243] call_tmp[655524]))
    unknown call_tmp[655536] "expr temp" "maybe param" "maybe type" "temp"
    (655539 'move' call_tmp[655536](125422 call _getDistribution call_tmp[655531]))
    (517435 'move' ret[517430](517434 'deref' call_tmp[655536]))
    (517432 return ret[517430])
  }
  function _domain[125908](?).safeCast[125434](arg _mt[126296]:_MT[238], arg this[126294]:_domain[125908](?), arg t[125431]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517439] "RVV" "temp"
    const tmpD[125447] "dead at end of block" "const" "insert auto destroy"
    (543043 'default init var' tmpD[125447] t[125431])
    (125450 'end of statement')
    unknown call_tmp[655543] "expr temp" "maybe param" "maybe type" "temp"
    (655546 'move' call_tmp[655543](125453 call rank _mt[243] tmpD[125447]))
    unknown call_tmp[655550] "expr temp" "maybe param" "maybe type" "temp"
    (655553 'move' call_tmp[655550](125457 call rank _mt[243] this[126294]))
    unknown call_tmp[655555] "expr temp" "maybe param" "maybe type" "temp"
    (655558 'move' call_tmp[655555](125460 call != call_tmp[655543] call_tmp[655550]))
    unknown call_tmp[655560] "expr temp" "maybe param" "maybe type" "temp"
    (655563 'move' call_tmp[655560](125483 call _cond_test call_tmp[655555]))
    if call_tmp[655560]
    {
      (125481 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655567] "expr temp" "maybe param" "maybe type" "temp"
    (655570 'move' call_tmp[655567](125489 call idxType _mt[243] tmpD[125447]))
    unknown call_tmp[655574] "expr temp" "maybe param" "maybe type" "temp"
    (655577 'move' call_tmp[655574](125493 call idxType _mt[243] this[126294]))
    unknown call_tmp[655579] "expr temp" "maybe param" "maybe type" "temp"
    (655582 'move' call_tmp[655579](125496 call != call_tmp[655567] call_tmp[655574]))
    unknown call_tmp[655584] "expr temp" "maybe param" "maybe type" "temp"
    (655587 'move' call_tmp[655584](125519 call _cond_test call_tmp[655579]))
    if call_tmp[655584]
    {
      (125517 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655591] "expr temp" "maybe param" "maybe type" "temp"
    (655594 'move' call_tmp[655591](125525 call stridable _mt[243] tmpD[125447]))
    unknown call_tmp[655598] "expr temp" "maybe param" "maybe type" "temp"
    (655601 'move' call_tmp[655598](125529 call stridable _mt[243] this[126294]))
    unknown call_tmp[655603] "expr temp" "maybe param" "maybe type" "temp"
    (655606 'move' call_tmp[655603](125532 call == call_tmp[655591] call_tmp[655598]))
    unknown call_tmp[655608] "expr temp" "maybe param" "maybe type" "temp"
    (655611 'move' call_tmp[655608](125713 call _cond_test call_tmp[655603]))
    if call_tmp[655608]
    {
      (517444 'move' ret[517439](517443 'deref' this[126294]))
      gotoReturn _end_safeCast[517437] _end_safeCast[517437]
    }
    {
      unknown tmp[425063] "maybe param" "temp"
      unknown call_tmp[655615] "expr temp" "maybe param" "maybe type" "temp"
      (655618 'move' call_tmp[655615](125538 call stridable _mt[243] tmpD[125447]))
      (425074 'move' tmp[425063](125541 call ! call_tmp[655615]))
      unknown call_tmp[655620] "expr temp" "maybe param" "maybe type" "temp"
      (655623 'move' call_tmp[655620](425076 call _cond_invalid tmp[425063]))
      if call_tmp[655620]
      {
        (425079 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565638] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565639] "maybe param" "temp"
      unknown call_tmp[655625] "expr temp" "maybe param" "maybe type" "temp"
      (655628 'move' call_tmp[655625](425064 call isTrue tmp[425063]))
      (565644 'move' tmp[565639](565642 call _cond_test call_tmp[655625]))
      if tmp[565639]
      {
        unknown tmp[565646] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655632] "expr temp" "maybe param" "maybe type" "temp"
        (655635 'move' call_tmp[655632](125544 call stridable _mt[243] this[126294]))
        (565648 'move' tmp[565646](425067 call isTrue call_tmp[655632]))
        (565653 'move' tmp[565638](565650 '_paramFoldLogical' tmp[565639] tmp[565646]))
      }
      {
        (565658 'move' tmp[565638](565655 '_paramFoldLogical' tmp[565639] 0))
      }
      unknown call_tmp[655637] "expr temp" "maybe param" "maybe type" "temp"
      (655640 'move' call_tmp[655637](125709 call _cond_test tmp[565638]))
      if call_tmp[655637]
      {
        unknown call_tmp[655644] "maybe param" "maybe type" "temp"
        (655647 'move' call_tmp[655644](125554 call(125550 call (partial) getIndices _mt[243] this[126294])))
        const inds[125555] "dead at end of block" "const" "insert auto destroy"
        (543045 'init var' inds[125555] call_tmp[655644])
        (125558 'end of statement')
        unknown unstridableInds[125572] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655651] "expr temp" "maybe param" "maybe type" "temp"
        (655654 'move' call_tmp[655651](383663 call rank _mt[243] this[126294]))
        unknown call_tmp[655658] "expr temp" "maybe param" "maybe type" "temp"
        (655661 'move' call_tmp[655658](125563 call idxType _mt[243] tmpD[125447]))
        unknown call_tmp[655663] "expr temp" "maybe param" "maybe type" "temp"
        (655666 'move' call_tmp[655663](125569 call range[64319](?) call_tmp[655658](stridable = 0)))
        unknown call_tmp[655668] "expr temp" "maybe param" "maybe type" "temp"
        (655671 'move' call_tmp[655668](125570 call * call_tmp[655651] call_tmp[655663]))
        (543047 'default init var' unstridableInds[125572] call_tmp[655668])
        (125575 'end of statement' tmpD[125447])
        {
          unknown dim[125649] "dead at end of block" "insert auto destroy"
          (543049 'init var' dim[125649] 0)
          (480005 'end of statement')
          unknown tmp[125650] "maybe param" "temp"
          unknown call_tmp[655675] "expr temp" "maybe param" "maybe type" "temp"
          (655678 'move' call_tmp[655675](125578 call size _mt[243] inds[125555]))
          unknown call_tmp[655680] "expr temp" "maybe param" "maybe type" "temp"
          (655683 'move' call_tmp[655680](125582 call - call_tmp[655675] 1))
          (125662 'move' tmp[125650](125660 call chpl_compute_low_param_loop_bound 0 call_tmp[655680]))
          unknown tmp[125651] "maybe param" "temp"
          unknown call_tmp[655687] "expr temp" "maybe param" "maybe type" "temp"
          (655690 'move' call_tmp[655687](125669 call size _mt[243] inds[125555]))
          unknown call_tmp[655692] "expr temp" "maybe param" "maybe type" "temp"
          (655695 'move' call_tmp[655692](125667 call - call_tmp[655687] 1))
          (125675 'move' tmp[125651](125673 call chpl_compute_high_param_loop_bound 0 call_tmp[655692]))
          unknown tmp[125652] "maybe param" "temp"
          (125678 'move' tmp[125652] 1)
          ParamForLoop[125680]
          { dim[125649] tmp[125650] tmp[125651] tmp[125652]
            {
              unknown call_tmp[655697] "expr temp" "maybe param" "maybe type" "temp"
              (655700 'move' call_tmp[655697](125589 call inds[125555] dim[125649]))
              unknown call_tmp[655704] "expr temp" "maybe param" "maybe type" "temp"
              (655707 'move' call_tmp[655704](125590 call stride _mt[243] call_tmp[655697]))
              unknown call_tmp[655709] "expr temp" "maybe param" "maybe type" "temp"
              (655712 'move' call_tmp[655709](125594 call != call_tmp[655704] 1))
              unknown call_tmp[655714] "expr temp" "maybe param" "maybe type" "temp"
              (655717 'move' call_tmp[655714](125618 call _cond_test call_tmp[655709]))
              if call_tmp[655714]
              {
                (125616 call halt "non-stridable domain assigned non-unit stride in dimension " dim[125649])
                (480006 'end of statement' dim[125649])
              }
              unknown call_tmp[655719] "expr temp" "maybe param" "maybe type" "temp"
              (655722 'move' call_tmp[655719](125627 call unstridableInds[125572] dim[125649]))
              unknown call_tmp[655724] "expr temp" "maybe param" "maybe type" "temp"
              (655727 'move' call_tmp[655724](125631 call inds[125555] dim[125649]))
              unknown call_tmp[655733] "expr temp" "maybe param" "maybe type" "temp"
              (655736 'move' call_tmp[655733](125637 call idxType _mt[243] tmpD[125447]))
              unknown call_tmp[655738] "expr temp" "maybe param" "maybe type" "temp"
              (655741 'move' call_tmp[655738](125643 call range[64319](?) call_tmp[655733](stridable = 0)))
              unknown call_tmp[655743] "expr temp" "maybe param" "maybe type" "temp"
              (655746 'move' call_tmp[655743](125645 call(125632 call (partial) safeCast _mt[243] call_tmp[655724]) call_tmp[655738]))
              (125646 call = call_tmp[655719] call_tmp[655743])
              (480008 'end of statement' unstridableInds[125572] dim[125649] inds[125555] dim[125649] tmpD[125447])
            }
          }
          label _unused_continueLabel[125654]
          label _breakLabel[125653]
        }
        (125695 call(125690 call (partial) setIndices _mt[243] tmpD[125447]) unstridableInds[125572])
        (480014 'end of statement' tmpD[125447] unstridableInds[125572])
        (517449 'move' ret[517439](517448 'deref' tmpD[125447]))
        gotoReturn _end_safeCast[517437] _end_safeCast[517437]
        (480017 'end of statement' tmpD[125447])
      }
      {
        (125702 call = tmpD[125447] this[126294])
        (480019 'end of statement' tmpD[125447])
        (517454 'move' ret[517439](517453 'deref' tmpD[125447]))
        gotoReturn _end_safeCast[517437] _end_safeCast[517437]
        (480021 'end of statement' tmpD[125447])
      }
    }
    label _end_safeCast[517437]
    (517441 return ret[517439])
  }
  where {
    unknown tmp[425042] "maybe param" "temp"
    (425053 'move' tmp[425042](125439 call chpl__isRectangularDomType t[125431]))
    unknown call_tmp[655750] "expr temp" "maybe param" "maybe type" "temp"
    (655753 'move' call_tmp[655750](425055 call _cond_invalid tmp[425042]))
    if call_tmp[655750]
    {
      (425058 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565665] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565666] "maybe param" "temp"
    unknown call_tmp[655755] "expr temp" "maybe param" "maybe type" "temp"
    (655758 'move' call_tmp[655755](425043 call isTrue tmp[425042]))
    (565671 'move' tmp[565666](565669 call _cond_test call_tmp[655755]))
    if tmp[565666]
    {
      unknown tmp[565673] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655760] "expr temp" "maybe param" "maybe type" "temp"
      (655763 'move' call_tmp[655760](125443 call isRectangularDom this[126294]))
      (565675 'move' tmp[565673](425046 call isTrue call_tmp[655760]))
      (565680 'move' tmp[565665](565677 '_paramFoldLogical' tmp[565666] tmp[565673]))
    }
    {
      (565685 'move' tmp[565665](565682 '_paramFoldLogical' tmp[565666] 0))
    }
    (748459 call chpl_statementLevelSymbol tmp[565665])
  }
  function _domain[125908](?).targetLocales[125724](arg _mt[126300]:_MT[238], arg this[126298]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517460] "RVV" "temp"
    unknown call_tmp[655767] "expr temp" "maybe param" "maybe type" "temp"
    (655770 'move' call_tmp[655767](359728 call _value _mt[243] this[126298]))
    unknown call_tmp[655774] "expr temp" "maybe param" "maybe type" "temp"
    (655777 'move' call_tmp[655774](125731 call(125727 call (partial) dsiTargetLocales _mt[243] call_tmp[655767])))
    (517465 'move' ret[517460](517464 'deref' call_tmp[655774]))
    (517462 return ret[517460])
  }
  function _domain[125908](?).hasSingleLocalSubdomain[125739](arg _mt[126304]:_MT[238], arg this[126302]:_domain[125908](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517469] "RVV" "param" "temp"
    unknown call_tmp[655781] "expr temp" "maybe param" "maybe type" "temp"
    (655784 'move' call_tmp[655781](359732 call _value _mt[243] this[126302]))
    unknown call_tmp[655788] "expr temp" "maybe param" "maybe type" "temp"
    (655791 'move' call_tmp[655788](125748 call(125744 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655781])))
    (517474 'move' ret[517469](517473 'deref' call_tmp[655788]))
    (517471 return ret[517469])
  }
  function _domain[125908](?).localSubdomain[125762](arg _mt[126308]:_MT[238], arg this[126306]:_domain[125908](?), arg loc[125758]:locale[28] =
  (383680 call here[90438])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517478] "RVV" "temp"
    unknown call_tmp[655795] "expr temp" "maybe param" "maybe type" "temp"
    (655798 'move' call_tmp[655795](359736 call _value _mt[243] this[126306]))
    unknown call_tmp[655802] "expr temp" "maybe param" "maybe type" "temp"
    (655805 'move' call_tmp[655802](125769 call(125765 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655795])))
    unknown call_tmp[655807] "expr temp" "maybe param" "maybe type" "temp"
    (655810 'move' call_tmp[655807](125770 call ! call_tmp[655802]))
    unknown call_tmp[655812] "expr temp" "maybe param" "maybe type" "temp"
    (655815 'move' call_tmp[655812](125793 call _cond_test call_tmp[655807]))
    if call_tmp[655812]
    {
      (125791 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[655819] "expr temp" "maybe param" "maybe type" "temp"
    (655822 'move' call_tmp[655819](359740 call _value _mt[243] this[126306]))
    unknown call_tmp[655826] "expr temp" "maybe param" "maybe type" "temp"
    (655829 'move' call_tmp[655826](125807 call(125802 call (partial) dsiLocalSubdomain _mt[243] call_tmp[655819]) loc[125758]))
    (517483 'move' ret[517478](517482 'deref' call_tmp[655826]))
    (517480 return ret[517478])
  }
  function _domain[125908](?).localSubdomains[125820](arg _mt[126312]:_MT[238], arg this[126310]:_domain[125908](?), arg loc[125816]:locale[28] =
  (383683 call here[90438])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517487] "RVV" "temp"
    unknown call_tmp[655833] "expr temp" "maybe param" "maybe type" "temp"
    (655836 'move' call_tmp[655833](359744 call _value _mt[243] this[126310]))
    unknown call_tmp[655840] "expr temp" "maybe param" "maybe type" "temp"
    (655843 'move' call_tmp[655840](125827 call(125823 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655833])))
    unknown call_tmp[655845] "expr temp" "maybe param" "maybe type" "temp"
    (655848 'move' call_tmp[655845](125883 call _cond_test call_tmp[655840]))
    if call_tmp[655845]
    {
      unknown yret[517491] "YVV" "temp"
      unknown call_tmp[655852] "expr temp" "maybe param" "maybe type" "temp"
      (655855 'move' call_tmp[655852](125831 call(383686 call (partial) localSubdomain _mt[243] this[126310]) loc[125816]))
      (517494 'move' yret[517491](517493 'deref' call_tmp[655852]))
      (517496 yield yret[517491])
    }
    {
      {
        unknown _indexOfInterest[125848] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[125849] "expr temp" "temp"
        unknown call_tmp[655859] "expr temp" "maybe param" "maybe type" "temp"
        (655862 'move' call_tmp[655859](359748 call _value _mt[243] this[126310]))
        unknown call_tmp[655866] "expr temp" "maybe param" "maybe type" "temp"
        (655869 'move' call_tmp[655866](125844 call(125839 call (partial) dsiLocalSubdomains _mt[243] call_tmp[655859]) loc[125816]))
        (125858 'move' _iterator[125849](125856 call _getIterator call_tmp[655866]))
        Defer
        {
          {
            (125875 call _freeIterator _iterator[125849])
          }
        }
        { scopeless type
          (125864 'move' _indexOfInterest[125848](125861 call iteratorIndex _iterator[125849]))
        }
        ForLoop[125850]
        {
          unknown d[125868] "index var" "insert auto destroy"
          (480029 'end of statement')
          (125870 'move' d[125868] _indexOfInterest[125848])
          (480030 'end of statement' d[125868])
          unknown yret[517498] "YVV" "temp"
          (517501 'move' yret[517498](517500 'deref' d[125868]))
          (517503 yield yret[517498])
          (480032 'end of statement' d[125868])
          label _continueLabel[125853]
          _indexOfInterest[125848]
          _iterator[125849]
        }
        label _breakLabel[125854]
      }
    }
    (517489 return ret[517487])
  }
  function _domain[125908](?).supportsAutoLocalAccess[125892](arg _mt[126316]:_MT[238], arg this[126314]:_domain[125908](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517507] "RVV" "param" "temp"
    unknown call_tmp[655873] "expr temp" "maybe param" "maybe type" "temp"
    (655876 'move' call_tmp[655873](359752 call _value _mt[243] this[126314]))
    unknown call_tmp[655880] "expr temp" "maybe param" "maybe type" "temp"
    (655883 'move' call_tmp[655880](125901 call(125897 call (partial) dsiSupportsAutoLocalAccess _mt[243] call_tmp[655873])))
    (517512 'move' ret[517507](517511 'deref' call_tmp[655880]))
    (517509 return ret[517507])
  }
  function _domain[125908](?)._pid[799965](arg _mt[799967]:_MT[238], ref arg this[799969]:_domain[125908](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799979] "RVV" "temp"
    unknown call_tmp[799986] "expr temp" "maybe param" "maybe type" "temp"
    (799989 'move' call_tmp[799986](799973 '.' this[799969] c"_pid"))
    (799984 'move' ret[799979](799983 'addr of' call_tmp[799986]))
    (799981 return ret[799979])
  }
  function _domain[125908](?)._instance[799991](arg _mt[799993]:_MT[238], ref arg this[799995]:_domain[125908](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[800005] "RVV" "temp"
    unknown call_tmp[800012] "expr temp" "maybe param" "maybe type" "temp"
    (800015 'move' call_tmp[800012](799999 '.' this[799995] c"_instance"))
    (800010 'move' ret[800005](800009 'addr of' call_tmp[800012]))
    (800007 return ret[800005])
  }
  function _domain[125908](?)._unowned[800017](arg _mt[800019]:_MT[238], ref arg this[800021]:_domain[125908](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[800031] "RVV" "temp"
    unknown call_tmp[800038] "expr temp" "maybe param" "maybe type" "temp"
    (800041 'move' call_tmp[800038](800025 '.' this[800021] c"_unowned"))
    (800036 'move' ret[800031](800035 'addr of' call_tmp[800038]))
    (800033 return ret[800031])
  }
  function chpl__defaultHash[800043](arg r[800045]:_domain[125908](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[800076] "RVV" "temp"
    unknown call_tmp[800083] "expr temp" "maybe param" "maybe type" "temp"
    (800086 'move' call_tmp[800083](800062 call _unowned _mt[243] r[800045]))
    unknown call_tmp[800088] "expr temp" "maybe param" "maybe type" "temp"
    (800091 'move' call_tmp[800088](800066 call chpl__defaultHash call_tmp[800083]))
    unknown call_tmp[800093] "expr temp" "maybe param" "maybe type" "temp"
    (800096 'move' call_tmp[800093](800053 call _instance _mt[243] r[800045]))
    unknown call_tmp[800098] "expr temp" "maybe param" "maybe type" "temp"
    (800101 'move' call_tmp[800098](800057 call chpl__defaultHash call_tmp[800093]))
    unknown call_tmp[800103] "expr temp" "maybe param" "maybe type" "temp"
    (800106 'move' call_tmp[800103](800047 call _pid _mt[243] r[800045]))
    unknown call_tmp[800108] "expr temp" "maybe param" "maybe type" "temp"
    (800111 'move' call_tmp[800108](800051 call chpl__defaultHash call_tmp[800103]))
    unknown call_tmp[800113] "expr temp" "maybe param" "maybe type" "temp"
    (800116 'move' call_tmp[800113](800059 call chpl__defaultHashCombine call_tmp[800098] call_tmp[800108] 2))
    unknown call_tmp[800118] "expr temp" "maybe param" "maybe type" "temp"
    (800121 'move' call_tmp[800118](800068 call chpl__defaultHashCombine call_tmp[800088] call_tmp[800113] 3))
    (800081 'move' ret[800076](800080 'deref' call_tmp[800118]))
    (800078 return ret[800076])
  }
  type _domain[125908](?) val _pid[119167]:int(64)[13] int(64)[13] unknown _instance[119171] "owned" val _unowned[119176]:bool[10] bool[10] forwarding ( )
  function _cast[126325](arg t[126322]:_domain[125908](?), arg d[126328]:_domain[125908](?)) : _unknown[51] "no doc"
  {
    unknown ret[517516] "RVV" "temp"
    const tmpD[126342] "dead at end of block" "const" "insert auto destroy"
    (543051 'default init var' tmpD[126342] t[126322])
    (126345 'end of statement')
    unknown call_tmp[655887] "expr temp" "maybe param" "maybe type" "temp"
    (655890 'move' call_tmp[655887](126348 call rank _mt[243] tmpD[126342]))
    unknown call_tmp[655894] "expr temp" "maybe param" "maybe type" "temp"
    (655897 'move' call_tmp[655894](126352 call rank _mt[243] d[126328]))
    unknown call_tmp[655899] "expr temp" "maybe param" "maybe type" "temp"
    (655902 'move' call_tmp[655899](126355 call != call_tmp[655887] call_tmp[655894]))
    unknown call_tmp[655904] "expr temp" "maybe param" "maybe type" "temp"
    (655907 'move' call_tmp[655904](126362 call _cond_test call_tmp[655899]))
    if call_tmp[655904]
    {
      (126360 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655911] "expr temp" "maybe param" "maybe type" "temp"
    (655914 'move' call_tmp[655911](126368 call idxType _mt[243] tmpD[126342]))
    unknown call_tmp[655918] "expr temp" "maybe param" "maybe type" "temp"
    (655921 'move' call_tmp[655918](126372 call idxType _mt[243] d[126328]))
    unknown call_tmp[655923] "expr temp" "maybe param" "maybe type" "temp"
    (655926 'move' call_tmp[655923](126375 call != call_tmp[655911] call_tmp[655918]))
    unknown call_tmp[655928] "expr temp" "maybe param" "maybe type" "temp"
    (655931 'move' call_tmp[655928](126382 call _cond_test call_tmp[655923]))
    if call_tmp[655928]
    {
      (126380 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655935] "expr temp" "maybe param" "maybe type" "temp"
    (655938 'move' call_tmp[655935](126388 call stridable _mt[243] tmpD[126342]))
    unknown call_tmp[655942] "expr temp" "maybe param" "maybe type" "temp"
    (655945 'move' call_tmp[655942](126392 call stridable _mt[243] d[126328]))
    unknown call_tmp[655947] "expr temp" "maybe param" "maybe type" "temp"
    (655950 'move' call_tmp[655947](126395 call == call_tmp[655935] call_tmp[655942]))
    unknown call_tmp[655952] "expr temp" "maybe param" "maybe type" "temp"
    (655955 'move' call_tmp[655952](126539 call _cond_test call_tmp[655947]))
    if call_tmp[655952]
    {
      (517521 'move' ret[517516](517520 'deref' d[126328]))
      gotoReturn _end__cast[517514] _end__cast[517514]
    }
    {
      unknown tmp[425105] "maybe param" "temp"
      unknown call_tmp[655959] "expr temp" "maybe param" "maybe type" "temp"
      (655962 'move' call_tmp[655959](126401 call stridable _mt[243] tmpD[126342]))
      (425116 'move' tmp[425105](126404 call ! call_tmp[655959]))
      unknown call_tmp[655964] "expr temp" "maybe param" "maybe type" "temp"
      (655967 'move' call_tmp[655964](425118 call _cond_invalid tmp[425105]))
      if call_tmp[655964]
      {
        (425121 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565692] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565693] "maybe param" "temp"
      unknown call_tmp[655969] "expr temp" "maybe param" "maybe type" "temp"
      (655972 'move' call_tmp[655969](425106 call isTrue tmp[425105]))
      (565698 'move' tmp[565693](565696 call _cond_test call_tmp[655969]))
      if tmp[565693]
      {
        unknown tmp[565700] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655976] "expr temp" "maybe param" "maybe type" "temp"
        (655979 'move' call_tmp[655976](126407 call stridable _mt[243] d[126328]))
        (565702 'move' tmp[565700](425109 call isTrue call_tmp[655976]))
        (565707 'move' tmp[565692](565704 '_paramFoldLogical' tmp[565693] tmp[565700]))
      }
      {
        (565712 'move' tmp[565692](565709 '_paramFoldLogical' tmp[565693] 0))
      }
      unknown call_tmp[655981] "expr temp" "maybe param" "maybe type" "temp"
      (655984 'move' call_tmp[655981](126535 call _cond_test tmp[565692]))
      if call_tmp[655981]
      {
        unknown call_tmp[655988] "maybe param" "maybe type" "temp"
        (655991 'move' call_tmp[655988](126417 call(126413 call (partial) getIndices _mt[243] d[126328])))
        unknown inds[126418] "dead at end of block" "insert auto destroy"
        (543053 'init var' inds[126418] call_tmp[655988])
        (126421 'end of statement')
        unknown unstridableInds[126438] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655995] "expr temp" "maybe param" "maybe type" "temp"
        (655998 'move' call_tmp[655995](126424 call rank _mt[243] d[126328]))
        unknown call_tmp[656002] "expr temp" "maybe param" "maybe type" "temp"
        (656005 'move' call_tmp[656002](126429 call idxType _mt[243] tmpD[126342]))
        unknown call_tmp[656007] "expr temp" "maybe param" "maybe type" "temp"
        (656010 'move' call_tmp[656007](126435 call range[64319](?) call_tmp[656002](stridable = 0)))
        unknown call_tmp[656012] "expr temp" "maybe param" "maybe type" "temp"
        (656015 'move' call_tmp[656012](126436 call * call_tmp[655995] call_tmp[656007]))
        (543055 'default init var' unstridableInds[126438] call_tmp[656012])
        (126441 'end of statement' tmpD[126342])
        {
          unknown i[126475] "dead at end of block" "insert auto destroy"
          (543057 'init var' i[126475] 0)
          (480040 'end of statement')
          unknown tmp[126476] "maybe param" "temp"
          unknown call_tmp[656019] "expr temp" "maybe param" "maybe type" "temp"
          (656022 'move' call_tmp[656019](126444 call rank _mt[243] tmpD[126342]))
          unknown call_tmp[656024] "expr temp" "maybe param" "maybe type" "temp"
          (656027 'move' call_tmp[656024](126448 call - call_tmp[656019] 1))
          (126488 'move' tmp[126476](126486 call chpl_compute_low_param_loop_bound 0 call_tmp[656024]))
          unknown tmp[126477] "maybe param" "temp"
          unknown call_tmp[656031] "expr temp" "maybe param" "maybe type" "temp"
          (656034 'move' call_tmp[656031](126495 call rank _mt[243] tmpD[126342]))
          unknown call_tmp[656036] "expr temp" "maybe param" "maybe type" "temp"
          (656039 'move' call_tmp[656036](126493 call - call_tmp[656031] 1))
          (126501 'move' tmp[126477](126499 call chpl_compute_high_param_loop_bound 0 call_tmp[656036]))
          unknown tmp[126478] "maybe param" "temp"
          (126504 'move' tmp[126478] 1)
          ParamForLoop[126506]
          { i[126475] tmp[126476] tmp[126477] tmp[126478]
            {
              unknown call_tmp[656041] "expr temp" "maybe param" "maybe type" "temp"
              (656044 'move' call_tmp[656041](126455 call unstridableInds[126438] i[126475]))
              unknown call_tmp[656048] "expr temp" "maybe param" "maybe type" "temp"
              (656051 'move' call_tmp[656048](126462 call idxType _mt[243] tmpD[126342]))
              unknown call_tmp[656053] "expr temp" "maybe param" "maybe type" "temp"
              (656056 'move' call_tmp[656053](126468 call range[64319](?) call_tmp[656048](stridable = 0)))
              unknown call_tmp[656058] "expr temp" "maybe param" "maybe type" "temp"
              (656061 'move' call_tmp[656058](126459 call inds[126418] i[126475]))
              unknown call_tmp[656063] "expr temp" "maybe param" "maybe type" "temp"
              (656066 'move' call_tmp[656063](126469 call _cast call_tmp[656053] call_tmp[656058]))
              (126471 call = call_tmp[656041] call_tmp[656063])
              (480041 'end of statement' unstridableInds[126438] i[126475] tmpD[126342] inds[126418] i[126475])
            }
          }
          label _unused_continueLabel[126480]
          label _breakLabel[126479]
        }
        (126521 call(126516 call (partial) setIndices _mt[243] tmpD[126342]) unstridableInds[126438])
        (480047 'end of statement' tmpD[126342] unstridableInds[126438])
        (517526 'move' ret[517516](517525 'deref' tmpD[126342]))
        gotoReturn _end__cast[517514] _end__cast[517514]
        (480050 'end of statement' tmpD[126342])
      }
      {
        (126528 call = tmpD[126342] d[126328])
        (480052 'end of statement' tmpD[126342])
        (517531 'move' ret[517516](517530 'deref' tmpD[126342]))
        gotoReturn _end__cast[517514] _end__cast[517514]
        (480054 'end of statement' tmpD[126342])
      }
    }
    label _end__cast[517514]
    (517518 return ret[517516])
  }
  where {
    unknown tmp[425084] "maybe param" "temp"
    (425095 'move' tmp[425084](126334 call chpl__isRectangularDomType t[126322]))
    unknown call_tmp[656070] "expr temp" "maybe param" "maybe type" "temp"
    (656073 'move' call_tmp[656070](425097 call _cond_invalid tmp[425084]))
    if call_tmp[656070]
    {
      (425100 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565719] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565720] "maybe param" "temp"
    unknown call_tmp[656075] "expr temp" "maybe param" "maybe type" "temp"
    (656078 'move' call_tmp[656075](425085 call isTrue tmp[425084]))
    (565725 'move' tmp[565720](565723 call _cond_test call_tmp[656075]))
    if tmp[565720]
    {
      unknown tmp[565727] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656080] "expr temp" "maybe param" "maybe type" "temp"
      (656083 'move' call_tmp[656080](126338 call isRectangularDom d[126328]))
      (565729 'move' tmp[565727](425088 call isTrue call_tmp[656080]))
      (565734 'move' tmp[565719](565731 '_paramFoldLogical' tmp[565720] tmp[565727]))
    }
    {
      (565739 'move' tmp[565719](565736 '_paramFoldLogical' tmp[565720] 0))
    }
    (748461 call chpl_statementLevelSymbol tmp[565719])
  }
  function _cast[126554](arg t[126551]:string[26], arg x[126557]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517537] "RVV" "temp"
    unknown call_tmp[656085] "expr temp" "maybe param" "maybe type" "temp"
    (656088 'move' call_tmp[656085](126567 call stringify x[126557]))
    (517542 'move' ret[517537](517541 'deref' call_tmp[656085]))
    (517539 return ret[517537])
    (355231 'used modules list'(126561 'use' IO[230979]))
  }
  function chpl_countDomHelp[126576](arg dom[126574]:_any[178](?), arg counts[126578]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517546] "RVV" "temp"
    unknown call_tmp[656092] "maybe param" "maybe type" "temp"
    (656095 'move' call_tmp[656092](126585 call(126581 call (partial) dims _mt[243] dom[126574])))
    unknown ranges[126586] "dead at end of block" "insert auto destroy"
    (543059 'init var' ranges[126586] call_tmp[656092])
    (126589 'end of statement')
    {
      unknown i[126618] "dead at end of block" "insert auto destroy"
      (543061 'init var' i[126618] 0)
      (480057 'end of statement')
      unknown tmp[126619] "maybe param" "temp"
      unknown call_tmp[656099] "expr temp" "maybe param" "maybe type" "temp"
      (656102 'move' call_tmp[656099](126593 call rank _mt[243] dom[126574]))
      unknown call_tmp[656104] "expr temp" "maybe param" "maybe type" "temp"
      (656107 'move' call_tmp[656104](126597 call - call_tmp[656099] 1))
      (126631 'move' tmp[126619](126629 call chpl_compute_low_param_loop_bound 0 call_tmp[656104]))
      unknown tmp[126620] "maybe param" "temp"
      unknown call_tmp[656111] "expr temp" "maybe param" "maybe type" "temp"
      (656114 'move' call_tmp[656111](126638 call rank _mt[243] dom[126574]))
      unknown call_tmp[656116] "expr temp" "maybe param" "maybe type" "temp"
      (656119 'move' call_tmp[656116](126636 call - call_tmp[656111] 1))
      (126644 'move' tmp[126620](126642 call chpl_compute_high_param_loop_bound 0 call_tmp[656116]))
      unknown tmp[126621] "maybe param" "temp"
      (126647 'move' tmp[126621] 1)
      ParamForLoop[126649]
      { i[126618] tmp[126619] tmp[126620] tmp[126621]
        unknown call_tmp[656121] "expr temp" "maybe param" "maybe type" "temp"
        (656124 'move' call_tmp[656121](126604 call ranges[126586] i[126618]))
        unknown call_tmp[656126] "expr temp" "maybe param" "maybe type" "temp"
        (656129 'move' call_tmp[656126](126608 call ranges[126586] i[126618]))
        unknown call_tmp[656131] "expr temp" "maybe param" "maybe type" "temp"
        (656134 'move' call_tmp[656131](126612 call counts[126578] i[126618]))
        unknown call_tmp[656136] "expr temp" "maybe param" "maybe type" "temp"
        (656139 'move' call_tmp[656136](126613 call # call_tmp[656126] call_tmp[656131]))
        (126615 call = call_tmp[656121] call_tmp[656136])
        (480058 'end of statement' ranges[126586] i[126618] ranges[126586] i[126618] i[126618])
      }
      label _unused_continueLabel[126623]
      label _breakLabel[126622]
    }
    unknown call_tmp[656141] "expr temp" "maybe param" "maybe type" "temp"
    (656144 'move' call_tmp[656141](126662 call dom[126574](126660 'expand_tuple' ranges[126586])))
    (517551 'move' ret[517546](517550 'deref' call_tmp[656141]))
    gotoReturn _end_chpl_countDomHelp[517544] _end_chpl_countDomHelp[517544]
    (480064 'end of statement' ranges[126586])
    label _end_chpl_countDomHelp[517544]
    (517548 return ret[517546])
  }
  function #[126673](arg dom[126670]:_domain[125908](?), arg counts[126676]:integral[199](?)) : _unknown[51]
  {
    unknown ret[517557] "RVV" "temp"
    unknown call_tmp[656146] "expr temp" "maybe param" "maybe type" "temp"
    (656149 'move' call_tmp[656146](126696 call _build_tuple counts[126676]))
    unknown call_tmp[656151] "expr temp" "maybe param" "maybe type" "temp"
    (656154 'move' call_tmp[656151](126698 call chpl_countDomHelp dom[126670] call_tmp[656146]))
    (517562 'move' ret[517557](517561 'deref' call_tmp[656151]))
    (517559 return ret[517557])
  }
  where {
    unknown tmp[425126] "maybe param" "temp"
    (425137 'move' tmp[425126](126682 call isRectangularDom dom[126670]))
    unknown call_tmp[656156] "expr temp" "maybe param" "maybe type" "temp"
    (656159 'move' call_tmp[656156](425139 call _cond_invalid tmp[425126]))
    if call_tmp[656156]
    {
      (425142 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565746] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565747] "maybe param" "temp"
    unknown call_tmp[656161] "expr temp" "maybe param" "maybe type" "temp"
    (656164 'move' call_tmp[656161](425127 call isTrue tmp[425126]))
    (565752 'move' tmp[565747](565750 call _cond_test call_tmp[656161]))
    if tmp[565747]
    {
      unknown tmp[565754] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656168] "expr temp" "maybe param" "maybe type" "temp"
      (656171 'move' call_tmp[656168](126684 call rank _mt[243] dom[126670]))
      unknown call_tmp[656173] "expr temp" "maybe param" "maybe type" "temp"
      (656176 'move' call_tmp[656173](126688 call == call_tmp[656168] 1))
      (565756 'move' tmp[565754](425130 call isTrue call_tmp[656173]))
      (565761 'move' tmp[565746](565758 '_paramFoldLogical' tmp[565747] tmp[565754]))
    }
    {
      (565766 'move' tmp[565746](565763 '_paramFoldLogical' tmp[565747] 0))
    }
    (748463 call chpl_statementLevelSymbol tmp[565746])
  }
  function #[126711](arg dom[126708]:_domain[125908](?), arg counts[126713]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517566] "RVV" "temp"
    unknown call_tmp[656180] "expr temp" "maybe param" "maybe type" "temp"
    (656183 'move' call_tmp[656180](126726 call size _mt[243] counts[126713]))
    unknown call_tmp[656187] "expr temp" "maybe param" "maybe type" "temp"
    (656190 'move' call_tmp[656187](126730 call rank _mt[243] dom[126708]))
    unknown call_tmp[656192] "expr temp" "maybe param" "maybe type" "temp"
    (656195 'move' call_tmp[656192](126733 call != call_tmp[656180] call_tmp[656187]))
    unknown call_tmp[656197] "expr temp" "maybe param" "maybe type" "temp"
    (656200 'move' call_tmp[656197](126756 call _cond_test call_tmp[656192]))
    if call_tmp[656197]
    {
      (126754 call compilerError "the domain and tuple arguments of # must have the same rank")
    }
    unknown call_tmp[656202] "expr temp" "maybe param" "maybe type" "temp"
    (656205 'move' call_tmp[656202](126766 call chpl_countDomHelp dom[126708] counts[126713]))
    (517571 'move' ret[517566](517570 'deref' call_tmp[656202]))
    (517568 return ret[517566])
  }
  where {
    unknown tmp[425147] "maybe param" "temp"
    (425158 'move' tmp[425147](126718 call isRectangularDom dom[126708]))
    unknown call_tmp[656207] "expr temp" "maybe param" "maybe type" "temp"
    (656210 'move' call_tmp[656207](425160 call _cond_invalid tmp[425147]))
    if call_tmp[656207]
    {
      (425163 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565773] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565774] "maybe param" "temp"
    unknown call_tmp[656212] "expr temp" "maybe param" "maybe type" "temp"
    (656215 'move' call_tmp[656212](425148 call isTrue tmp[425147]))
    (565779 'move' tmp[565774](565777 call _cond_test call_tmp[656212]))
    if tmp[565774]
    {
      unknown tmp[565781] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656217] "expr temp" "maybe param" "maybe type" "temp"
      (656220 'move' call_tmp[656217](126722 call isTuple counts[126713]))
      (565783 'move' tmp[565781](425151 call isTrue call_tmp[656217]))
      (565788 'move' tmp[565773](565785 '_paramFoldLogical' tmp[565774] tmp[565781]))
    }
    {
      (565793 'move' tmp[565773](565790 '_paramFoldLogical' tmp[565774] 0))
    }
    (748465 call chpl_statementLevelSymbol tmp[565773])
  }
  function #[126780](arg arr[126777]:_array[133594](?), arg counts[126783]:integral[199](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517575] "RVV" "temp"
    unknown call_tmp[656224] "expr temp" "maybe param" "maybe type" "temp"
    (656227 'move' call_tmp[656224](126801 call _dom _mt[243] arr[126777]))
    unknown call_tmp[656229] "expr temp" "maybe param" "maybe type" "temp"
    (656232 'move' call_tmp[656229](126805 call # call_tmp[656224] counts[126783]))
    unknown call_tmp[656234] "expr temp" "maybe param" "maybe type" "temp"
    (656237 'move' call_tmp[656234](126808 call arr[126777] call_tmp[656229]))
    (517580 'move' ret[517575](517579 'deref' call_tmp[656234]))
    (517577 return ret[517575])
  }
  where {
    unknown tmp[425168] "maybe param" "temp"
    (425179 'move' tmp[425168](126789 call isRectangularArr arr[126777]))
    unknown call_tmp[656239] "expr temp" "maybe param" "maybe type" "temp"
    (656242 'move' call_tmp[656239](425181 call _cond_invalid tmp[425168]))
    if call_tmp[656239]
    {
      (425184 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565800] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565801] "maybe param" "temp"
    unknown call_tmp[656244] "expr temp" "maybe param" "maybe type" "temp"
    (656247 'move' call_tmp[656244](425169 call isTrue tmp[425168]))
    (565806 'move' tmp[565801](565804 call _cond_test call_tmp[656244]))
    if tmp[565801]
    {
      unknown tmp[565808] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656251] "expr temp" "maybe param" "maybe type" "temp"
      (656254 'move' call_tmp[656251](126791 call rank _mt[243] arr[126777]))
      unknown call_tmp[656256] "expr temp" "maybe param" "maybe type" "temp"
      (656259 'move' call_tmp[656256](126795 call == call_tmp[656251] 1))
      (565810 'move' tmp[565808](425172 call isTrue call_tmp[656256]))
      (565815 'move' tmp[565800](565812 '_paramFoldLogical' tmp[565801] tmp[565808]))
    }
    {
      (565820 'move' tmp[565800](565817 '_paramFoldLogical' tmp[565801] 0))
    }
    (748467 call chpl_statementLevelSymbol tmp[565800])
  }
  function #[126823](arg arr[126820]:_array[133594](?), arg counts[126825]:_any[178](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517584] "RVV" "temp"
    unknown call_tmp[656263] "expr temp" "maybe param" "maybe type" "temp"
    (656266 'move' call_tmp[656263](126838 call size _mt[243] counts[126825]))
    unknown call_tmp[656270] "expr temp" "maybe param" "maybe type" "temp"
    (656273 'move' call_tmp[656270](126842 call rank _mt[243] arr[126820]))
    unknown call_tmp[656275] "expr temp" "maybe param" "maybe type" "temp"
    (656278 'move' call_tmp[656275](126845 call != call_tmp[656263] call_tmp[656270]))
    unknown call_tmp[656280] "expr temp" "maybe param" "maybe type" "temp"
    (656283 'move' call_tmp[656280](126868 call _cond_test call_tmp[656275]))
    if call_tmp[656280]
    {
      (126866 call compilerError "the domain and array arguments of # must have the same rank")
    }
    unknown call_tmp[656287] "expr temp" "maybe param" "maybe type" "temp"
    (656290 'move' call_tmp[656287](126876 call _dom _mt[243] arr[126820]))
    unknown call_tmp[656292] "expr temp" "maybe param" "maybe type" "temp"
    (656295 'move' call_tmp[656292](126880 call # call_tmp[656287] counts[126825]))
    unknown call_tmp[656297] "expr temp" "maybe param" "maybe type" "temp"
    (656300 'move' call_tmp[656297](126883 call arr[126820] call_tmp[656292]))
    (517589 'move' ret[517584](517588 'deref' call_tmp[656297]))
    (517586 return ret[517584])
  }
  where {
    unknown tmp[425189] "maybe param" "temp"
    (425200 'move' tmp[425189](126830 call isRectangularArr arr[126820]))
    unknown call_tmp[656302] "expr temp" "maybe param" "maybe type" "temp"
    (656305 'move' call_tmp[656302](425202 call _cond_invalid tmp[425189]))
    if call_tmp[656302]
    {
      (425205 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565827] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565828] "maybe param" "temp"
    unknown call_tmp[656307] "expr temp" "maybe param" "maybe type" "temp"
    (656310 'move' call_tmp[656307](425190 call isTrue tmp[425189]))
    (565833 'move' tmp[565828](565831 call _cond_test call_tmp[656307]))
    if tmp[565828]
    {
      unknown tmp[565835] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656312] "expr temp" "maybe param" "maybe type" "temp"
      (656315 'move' call_tmp[656312](126834 call isTuple counts[126825]))
      (565837 'move' tmp[565835](425193 call isTrue call_tmp[656312]))
      (565842 'move' tmp[565827](565839 '_paramFoldLogical' tmp[565828] tmp[565835]))
    }
    {
      (565847 'move' tmp[565827](565844 '_paramFoldLogical' tmp[565828] 0))
    }
    (748469 call chpl_statementLevelSymbol tmp[565827])
  }
  function +[126895](arg d[126892]:_domain[125908](?), arg i[126901] :
  (126899 call chpl__buildIndexType d[126892])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656317] "expr temp" "maybe param" "maybe type" "temp"
    (656320 'move' call_tmp[656317](126907 call isRectangularDom d[126892]))
    unknown call_tmp[656322] "expr temp" "maybe param" "maybe type" "temp"
    (656325 'move' call_tmp[656322](126950 call _cond_test call_tmp[656317]))
    if call_tmp[656322]
    {
      (126927 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126948 call compilerError "Cannot add indices to this domain type")
    }
    (517591 return _void[55])
  }
  function +[126963](arg i[126961]:_any[178](?), arg d[126966]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656327] "expr temp" "maybe param" "maybe type" "temp"
    (656330 'move' call_tmp[656327](126981 call isRectangularDom d[126966]))
    unknown call_tmp[656332] "expr temp" "maybe param" "maybe type" "temp"
    (656335 'move' call_tmp[656332](126992 call _cond_test call_tmp[656327]))
    if call_tmp[656332]
    {
      (126985 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126990 call compilerError "Cannot add indices to this domain type")
    }
    (517593 return _void[55])
  }
  where {
    unknown call_tmp[656337] "expr temp" "maybe param" "maybe type" "temp"
    (656340 'move' call_tmp[656337](126975 call chpl__buildIndexType d[126966]))
    unknown call_tmp[656342] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656345 'move' call_tmp[656342](126971 'typeof' i[126961]))
    (354403 'is_subtype' call_tmp[656337] call_tmp[656342])
  }
  function +[127008](arg d[127005]:_domain[125908](?), arg i[127014] :
  (127012 call chpl__buildIndexType d[127005])) : _unknown[51]
  {
    unknown ret[517597] "RVV" "temp"
    (127027 call(127022 call (partial) add _mt[243] d[127005]) i[127014])
    (480076 'end of statement')
    (517602 'move' ret[517597](517601 'deref' d[127005]))
    (517599 return ret[517597])
  }
  where {
    (127020 call isIrregularDom d[127005])
  }
  function +[127040](arg i[127038]:_any[178](?), arg d[127043]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517606] "RVV" "temp"
    (127067 call(127062 call (partial) add _mt[243] d[127043]) i[127038])
    (480078 'end of statement')
    (517611 'move' ret[517606](517610 'deref' d[127043]))
    (517608 return ret[517606])
  }
  where {
    unknown tmp[425210] "maybe param" "temp"
    unknown call_tmp[656351] "expr temp" "maybe param" "maybe type" "temp"
    (656354 'move' call_tmp[656351](127052 call chpl__buildIndexType d[127043]))
    unknown call_tmp[656356] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656359 'move' call_tmp[656356](127048 'typeof' i[127038]))
    (425221 'move' tmp[425210](354404 'is_subtype' call_tmp[656351] call_tmp[656356]))
    unknown call_tmp[656361] "expr temp" "maybe param" "maybe type" "temp"
    (656364 'move' call_tmp[656361](425223 call _cond_invalid tmp[425210]))
    if call_tmp[656361]
    {
      (425226 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565854] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565855] "maybe param" "temp"
    unknown call_tmp[656366] "expr temp" "maybe param" "maybe type" "temp"
    (656369 'move' call_tmp[656366](425211 call isTrue tmp[425210]))
    (565860 'move' tmp[565855](565858 call _cond_test call_tmp[656366]))
    if tmp[565855]
    {
      unknown tmp[565862] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656371] "expr temp" "maybe param" "maybe type" "temp"
      (656374 'move' call_tmp[656371](127058 call isIrregularDom d[127043]))
      (565864 'move' tmp[565862](425214 call isTrue call_tmp[656371]))
      (565869 'move' tmp[565854](565866 '_paramFoldLogical' tmp[565855] tmp[565862]))
    }
    {
      (565874 'move' tmp[565854](565871 '_paramFoldLogical' tmp[565855] 0))
    }
    (748471 call chpl_statementLevelSymbol tmp[565854])
  }
  function +[127082](arg d1[127079]:_domain[125908](?), arg d2[127085]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517615] "RVV" "temp"
    unknown d3[127108] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656376] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656379 'move' call_tmp[656376](127107 'typeof' d1[127079]))
    (543063 'default init var' d3[127108] call_tmp[656376])
    (127111 'end of statement')
    {
      unknown _indexOfInterest[127123] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127124] "expr temp" "temp"
      (127133 'move' _iterator[127124](127131 call _getIterator d1[127079]))
      Defer
      {
        {
          (127149 call _freeIterator _iterator[127124])
        }
      }
      { scopeless type
        (127138 'move' _indexOfInterest[127123](127135 call iteratorIndex _iterator[127124]))
      }
      ForLoop[127125]
      {
        unknown e[127142] "index var" "insert auto destroy"
        (480081 'end of statement')
        (127144 'move' e[127142] _indexOfInterest[127123])
        (480082 'end of statement' e[127142])
        (127121 call(127116 call (partial) add _mt[243] d3[127108]) e[127142])
        (480084 'end of statement' d3[127108] e[127142])
        label _continueLabel[127128]
        _indexOfInterest[127123]
        _iterator[127124]
      }
      label _breakLabel[127129]
    }
    {
      unknown _indexOfInterest[127166] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127167] "expr temp" "temp"
      (127176 'move' _iterator[127167](127174 call _getIterator d2[127085]))
      Defer
      {
        {
          (127192 call _freeIterator _iterator[127167])
        }
      }
      { scopeless type
        (127181 'move' _indexOfInterest[127166](127178 call iteratorIndex _iterator[127167]))
      }
      ForLoop[127168]
      {
        unknown e[127185] "index var" "insert auto destroy"
        (480088 'end of statement')
        (127187 'move' e[127185] _indexOfInterest[127166])
        (480089 'end of statement' e[127185])
        (127164 call(127159 call (partial) add _mt[243] d3[127108]) e[127185])
        (480091 'end of statement' d3[127108] e[127185])
        label _continueLabel[127171]
        _indexOfInterest[127166]
        _iterator[127167]
      }
      label _breakLabel[127172]
    }
    (517620 'move' ret[517615](517619 'deref' d3[127108]))
    gotoReturn _end_+[517613] _end_+[517613]
    (480094 'end of statement' d3[127108])
    label _end_+[517613]
    (517617 return ret[517615])
  }
  where {
    unknown tmp[425231] "maybe param" "temp"
    unknown call_tmp[656385] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656388 'move' call_tmp[656385](127089 'typeof' d1[127079]))
    unknown call_tmp[656390] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656393 'move' call_tmp[656390](127091 'typeof' d2[127085]))
    (425242 'move' tmp[425231](127092 call == call_tmp[656385] call_tmp[656390]))
    unknown call_tmp[656395] "expr temp" "maybe param" "maybe type" "temp"
    (656398 'move' call_tmp[656395](425244 call _cond_invalid tmp[425231]))
    if call_tmp[656395]
    {
      (425247 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565908] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565909] "maybe param" "temp"
    unknown call_tmp[656400] "expr temp" "maybe param" "maybe type" "temp"
    (656403 'move' call_tmp[656400](425232 call isTrue tmp[425231]))
    (565914 'move' tmp[565909](565912 call _cond_test call_tmp[656400]))
    if tmp[565909]
    {
      unknown tmp[425252] "maybe param" "temp"
      (425263 'move' tmp[425252](127097 call isIrregularDom d1[127079]))
      unknown call_tmp[656405] "expr temp" "maybe param" "maybe type" "temp"
      (656408 'move' call_tmp[656405](425265 call _cond_invalid tmp[425252]))
      if call_tmp[656405]
      {
        (425268 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565881] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565882] "maybe param" "temp"
      unknown call_tmp[656410] "expr temp" "maybe param" "maybe type" "temp"
      (656413 'move' call_tmp[656410](425253 call isTrue tmp[425252]))
      (565887 'move' tmp[565882](565885 call _cond_test call_tmp[656410]))
      if tmp[565882]
      {
        unknown tmp[565889] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[656415] "expr temp" "maybe param" "maybe type" "temp"
        (656418 'move' call_tmp[656415](127101 call isIrregularDom d2[127085]))
        (565891 'move' tmp[565889](425256 call isTrue call_tmp[656415]))
        (565896 'move' tmp[565881](565893 '_paramFoldLogical' tmp[565882] tmp[565889]))
      }
      {
        (565901 'move' tmp[565881](565898 '_paramFoldLogical' tmp[565882] 0))
      }
      unknown tmp[565916] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (565918 'move' tmp[565916](425235 call isTrue tmp[565881]))
      (565923 'move' tmp[565908](565920 '_paramFoldLogical' tmp[565909] tmp[565916]))
    }
    {
      (565928 'move' tmp[565908](565925 '_paramFoldLogical' tmp[565909] 0))
    }
    (748473 call chpl_statementLevelSymbol tmp[565908])
  }
  function +[127211](arg d1[127208]:_domain[125908](?), arg d2[127214]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425273] "maybe param" "temp"
    (425284 'move' tmp[425273](127220 call isRectangularDom d1[127208]))
    unknown call_tmp[656420] "expr temp" "maybe param" "maybe type" "temp"
    (656423 'move' call_tmp[656420](425286 call _cond_invalid tmp[425273]))
    if call_tmp[656420]
    {
      (425289 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565935] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565936] "maybe param" "temp"
    unknown call_tmp[656425] "expr temp" "maybe param" "maybe type" "temp"
    (656428 'move' call_tmp[656425](425274 call isTrue tmp[425273]))
    (565941 'move' tmp[565936](565939 call _cond_test call_tmp[656425]))
    if tmp[565936]
    {
      (565946 'move' tmp[565935](565943 '_paramFoldLogical' tmp[565936] 1))
    }
    {
      unknown tmp[565948] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656430] "expr temp" "maybe param" "maybe type" "temp"
      (656433 'move' call_tmp[656430](127224 call isRectangularDom d2[127214]))
      (565950 'move' tmp[565948](425278 call isTrue call_tmp[656430]))
      (565955 'move' tmp[565935](565952 '_paramFoldLogical' tmp[565936] tmp[565948]))
    }
    unknown call_tmp[656435] "expr temp" "maybe param" "maybe type" "temp"
    (656438 'move' call_tmp[656435](127237 call _cond_test tmp[565935]))
    if call_tmp[656435]
    {
      (127230 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (127235 call compilerError "Cannot add indices to this domain type")
    }
    (517624 return _void[55])
  }
  function -[127252](arg d[127249]:_domain[125908](?), arg i[127258] :
  (127256 call chpl__buildIndexType d[127249])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656440] "expr temp" "maybe param" "maybe type" "temp"
    (656443 'move' call_tmp[656440](127264 call isRectangularDom d[127249]))
    unknown call_tmp[656445] "expr temp" "maybe param" "maybe type" "temp"
    (656448 'move' call_tmp[656445](127307 call _cond_test call_tmp[656440]))
    if call_tmp[656445]
    {
      (127284 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127305 call compilerError "Cannot remove indices from this domain type")
    }
    (517626 return _void[55])
  }
  function -[127322](arg d[127319]:_domain[125908](?), arg i[127328] :
  (127326 call chpl__buildIndexType d[127319])) : _unknown[51]
  {
    unknown ret[517630] "RVV" "temp"
    (127341 call(127336 call (partial) remove _mt[243] d[127319]) i[127328])
    (480101 'end of statement')
    (517635 'move' ret[517630](517634 'deref' d[127319]))
    (517632 return ret[517630])
  }
  where {
    (127334 call isIrregularDom d[127319])
  }
  function -[127356](arg d1[127353]:_domain[125908](?), arg d2[127359]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517639] "RVV" "temp"
    unknown d3[127376] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656452] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656455 'move' call_tmp[656452](127375 'typeof' d1[127353]))
    (543065 'default init var' d3[127376] call_tmp[656452])
    (127379 'end of statement')
    {
      unknown _indexOfInterest[127391] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127392] "expr temp" "temp"
      (127401 'move' _iterator[127392](127399 call _getIterator d1[127353]))
      Defer
      {
        {
          (127417 call _freeIterator _iterator[127392])
        }
      }
      { scopeless type
        (127406 'move' _indexOfInterest[127391](127403 call iteratorIndex _iterator[127392]))
      }
      ForLoop[127393]
      {
        unknown e[127410] "index var" "insert auto destroy"
        (480104 'end of statement')
        (127412 'move' e[127410] _indexOfInterest[127391])
        (480105 'end of statement' e[127410])
        (127389 call(127384 call (partial) add _mt[243] d3[127376]) e[127410])
        (480107 'end of statement' d3[127376] e[127410])
        label _continueLabel[127396]
        _indexOfInterest[127391]
        _iterator[127392]
      }
      label _breakLabel[127397]
    }
    {
      unknown _indexOfInterest[127434] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127435] "expr temp" "temp"
      (127444 'move' _iterator[127435](127442 call _getIterator d2[127359]))
      Defer
      {
        {
          (127460 call _freeIterator _iterator[127435])
        }
      }
      { scopeless type
        (127449 'move' _indexOfInterest[127434](127446 call iteratorIndex _iterator[127435]))
      }
      ForLoop[127436]
      {
        unknown e[127453] "index var" "insert auto destroy"
        (480111 'end of statement')
        (127455 'move' e[127453] _indexOfInterest[127434])
        (480112 'end of statement' e[127453])
        (127432 call(127427 call (partial) remove _mt[243] d3[127376]) e[127453])
        (480114 'end of statement' d3[127376] e[127453])
        label _continueLabel[127439]
        _indexOfInterest[127434]
        _iterator[127435]
      }
      label _breakLabel[127440]
    }
    (517644 'move' ret[517639](517643 'deref' d3[127376]))
    gotoReturn _end_-[517637] _end_-[517637]
    (480117 'end of statement' d3[127376])
    label _end_-[517637]
    (517641 return ret[517639])
  }
  where {
    unknown tmp[425294] "maybe param" "temp"
    unknown call_tmp[656461] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656464 'move' call_tmp[656461](127363 'typeof' d1[127353]))
    unknown call_tmp[656466] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656469 'move' call_tmp[656466](127365 'typeof' d2[127359]))
    (425305 'move' tmp[425294](127366 call == call_tmp[656461] call_tmp[656466]))
    unknown call_tmp[656471] "expr temp" "maybe param" "maybe type" "temp"
    (656474 'move' call_tmp[656471](425307 call _cond_invalid tmp[425294]))
    if call_tmp[656471]
    {
      (425310 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565962] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565963] "maybe param" "temp"
    unknown call_tmp[656476] "expr temp" "maybe param" "maybe type" "temp"
    (656479 'move' call_tmp[656476](425295 call isTrue tmp[425294]))
    (565968 'move' tmp[565963](565966 call _cond_test call_tmp[656476]))
    if tmp[565963]
    {
      unknown tmp[565970] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656481] "expr temp" "maybe param" "maybe type" "temp"
      (656484 'move' call_tmp[656481](127371 call isSparseDom d1[127353]))
      (565972 'move' tmp[565970](425298 call isTrue call_tmp[656481]))
      (565977 'move' tmp[565962](565974 '_paramFoldLogical' tmp[565963] tmp[565970]))
    }
    {
      (565982 'move' tmp[565962](565979 '_paramFoldLogical' tmp[565963] 0))
    }
    (748475 call chpl_statementLevelSymbol tmp[565962])
  }
  function -[127479](arg d1[127476]:_domain[125908](?), arg d2[127482]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425315] "maybe param" "temp"
    (425326 'move' tmp[425315](127488 call isRectangularDom d1[127476]))
    unknown call_tmp[656486] "expr temp" "maybe param" "maybe type" "temp"
    (656489 'move' call_tmp[656486](425328 call _cond_invalid tmp[425315]))
    if call_tmp[656486]
    {
      (425331 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565989] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565990] "maybe param" "temp"
    unknown call_tmp[656491] "expr temp" "maybe param" "maybe type" "temp"
    (656494 'move' call_tmp[656491](425316 call isTrue tmp[425315]))
    (565995 'move' tmp[565990](565993 call _cond_test call_tmp[656491]))
    if tmp[565990]
    {
      (566000 'move' tmp[565989](565997 '_paramFoldLogical' tmp[565990] 1))
    }
    {
      unknown tmp[566002] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656496] "expr temp" "maybe param" "maybe type" "temp"
      (656499 'move' call_tmp[656496](127492 call isRectangularDom d2[127482]))
      (566004 'move' tmp[566002](425320 call isTrue call_tmp[656496]))
      (566009 'move' tmp[565989](566006 '_paramFoldLogical' tmp[565990] tmp[566002]))
    }
    unknown call_tmp[656501] "expr temp" "maybe param" "maybe type" "temp"
    (656504 'move' call_tmp[656501](127505 call _cond_test tmp[565989]))
    if call_tmp[656501]
    {
      (127498 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127503 call compilerError "Cannot remove indices from this domain type")
    }
    (517648 return _void[55])
  }
  function ==[127520](arg d1[127517]:_domain[125908](?), arg d2[127523]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517652] "RVV" "temp"
    unknown call_tmp[656508] "expr temp" "maybe param" "maybe type" "temp"
    (656511 'move' call_tmp[656508](127537 call _value _mt[243] d1[127517]))
    unknown call_tmp[656515] "expr temp" "maybe param" "maybe type" "temp"
    (656518 'move' call_tmp[656515](127540 call rank _mt[243] call_tmp[656508]))
    unknown call_tmp[656522] "expr temp" "maybe param" "maybe type" "temp"
    (656525 'move' call_tmp[656522](127544 call _value _mt[243] d2[127523]))
    unknown call_tmp[656529] "expr temp" "maybe param" "maybe type" "temp"
    (656532 'move' call_tmp[656529](127547 call rank _mt[243] call_tmp[656522]))
    unknown call_tmp[656534] "expr temp" "maybe param" "maybe type" "temp"
    (656537 'move' call_tmp[656534](127550 call != call_tmp[656515] call_tmp[656529]))
    unknown call_tmp[656539] "expr temp" "maybe param" "maybe type" "temp"
    (656542 'move' call_tmp[656539](127658 call _cond_test call_tmp[656534]))
    if call_tmp[656539]
    {
      (517657 'move' ret[517652](517656 'deref' 0))
      gotoReturn _end_==[517650] _end_==[517650]
    }
    {
      unknown call_tmp[656546] "expr temp" "maybe param" "maybe type" "temp"
      (656549 'move' call_tmp[656546](127557 call _value _mt[243] d1[127517]))
      unknown call_tmp[656553] "expr temp" "maybe param" "maybe type" "temp"
      (656556 'move' call_tmp[656553](127561 call _value _mt[243] d2[127523]))
      unknown call_tmp[656558] "expr temp" "maybe param" "maybe type" "temp"
      (656561 'move' call_tmp[656558](127564 call == call_tmp[656546] call_tmp[656553]))
      unknown call_tmp[656563] "expr temp" "maybe param" "maybe type" "temp"
      (656566 'move' call_tmp[656563](127654 call _cond_test call_tmp[656558]))
      if call_tmp[656563]
      {
        (517662 'move' ret[517652](517661 'deref' 1))
        gotoReturn _end_==[517650] _end_==[517650]
      }
      {
        {
          unknown i[127607] "dead at end of block" "insert auto destroy"
          (543067 'init var' i[127607] 0)
          (480124 'end of statement')
          unknown tmp[127608] "maybe param" "temp"
          unknown call_tmp[656570] "expr temp" "maybe param" "maybe type" "temp"
          (656573 'move' call_tmp[656570](127572 call _value _mt[243] d1[127517]))
          unknown call_tmp[656577] "expr temp" "maybe param" "maybe type" "temp"
          (656580 'move' call_tmp[656577](127575 call rank _mt[243] call_tmp[656570]))
          unknown call_tmp[656582] "expr temp" "maybe param" "maybe type" "temp"
          (656585 'move' call_tmp[656582](127579 call - call_tmp[656577] 1))
          (127620 'move' tmp[127608](127618 call chpl_compute_low_param_loop_bound 0 call_tmp[656582]))
          unknown tmp[127609] "maybe param" "temp"
          unknown call_tmp[656589] "expr temp" "maybe param" "maybe type" "temp"
          (656592 'move' call_tmp[656589](127629 call _value _mt[243] d1[127517]))
          unknown call_tmp[656596] "expr temp" "maybe param" "maybe type" "temp"
          (656599 'move' call_tmp[656596](127627 call rank _mt[243] call_tmp[656589]))
          unknown call_tmp[656601] "expr temp" "maybe param" "maybe type" "temp"
          (656604 'move' call_tmp[656601](127625 call - call_tmp[656596] 1))
          (127636 'move' tmp[127609](127634 call chpl_compute_high_param_loop_bound 0 call_tmp[656601]))
          unknown tmp[127610] "maybe param" "temp"
          (127639 'move' tmp[127610] 1)
          ParamForLoop[127641]
          { i[127607] tmp[127608] tmp[127609] tmp[127610]
            unknown call_tmp[656608] "expr temp" "maybe param" "maybe type" "temp"
            (656611 'move' call_tmp[656608](127589 call(127584 call (partial) dim _mt[243] d1[127517]) i[127607]))
            unknown call_tmp[656615] "expr temp" "maybe param" "maybe type" "temp"
            (656618 'move' call_tmp[656615](127596 call(127591 call (partial) dim _mt[243] d2[127523]) i[127607]))
            unknown call_tmp[656620] "expr temp" "maybe param" "maybe type" "temp"
            (656623 'move' call_tmp[656620](127597 call != call_tmp[656608] call_tmp[656615]))
            unknown call_tmp[656625] "expr temp" "maybe param" "maybe type" "temp"
            (656628 'move' call_tmp[656625](127602 call _cond_test call_tmp[656620]))
            if call_tmp[656625]
            {
              (517667 'move' ret[517652](517666 'deref' 0))
              gotoReturn _end_==[517650] _end_==[517650]
            }
          }
          label _unused_continueLabel[127612]
          label _breakLabel[127611]
        }
        (517672 'move' ret[517652](517671 'deref' 1))
        gotoReturn _end_==[517650] _end_==[517650]
      }
    }
    label _end_==[517650]
    (517654 return ret[517652])
  }
  where {
    unknown tmp[425336] "maybe param" "temp"
    (425347 'move' tmp[425336](127529 call isRectangularDom d1[127517]))
    unknown call_tmp[656630] "expr temp" "maybe param" "maybe type" "temp"
    (656633 'move' call_tmp[656630](425349 call _cond_invalid tmp[425336]))
    if call_tmp[656630]
    {
      (425352 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566016] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566017] "maybe param" "temp"
    unknown call_tmp[656635] "expr temp" "maybe param" "maybe type" "temp"
    (656638 'move' call_tmp[656635](425337 call isTrue tmp[425336]))
    (566022 'move' tmp[566017](566020 call _cond_test call_tmp[656635]))
    if tmp[566017]
    {
      unknown tmp[566024] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656640] "expr temp" "maybe param" "maybe type" "temp"
      (656643 'move' call_tmp[656640](127533 call isRectangularDom d2[127523]))
      (566026 'move' tmp[566024](425340 call isTrue call_tmp[656640]))
      (566031 'move' tmp[566016](566028 '_paramFoldLogical' tmp[566017] tmp[566024]))
    }
    {
      (566036 'move' tmp[566016](566033 '_paramFoldLogical' tmp[566017] 0))
    }
    (748477 call chpl_statementLevelSymbol tmp[566016])
  }
  function !=[127673](arg d1[127670]:_domain[125908](?), arg d2[127676]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517678] "RVV" "temp"
    unknown call_tmp[656647] "expr temp" "maybe param" "maybe type" "temp"
    (656650 'move' call_tmp[656647](127690 call _value _mt[243] d1[127670]))
    unknown call_tmp[656654] "expr temp" "maybe param" "maybe type" "temp"
    (656657 'move' call_tmp[656654](127693 call rank _mt[243] call_tmp[656647]))
    unknown call_tmp[656661] "expr temp" "maybe param" "maybe type" "temp"
    (656664 'move' call_tmp[656661](127697 call _value _mt[243] d2[127676]))
    unknown call_tmp[656668] "expr temp" "maybe param" "maybe type" "temp"
    (656671 'move' call_tmp[656668](127700 call rank _mt[243] call_tmp[656661]))
    unknown call_tmp[656673] "expr temp" "maybe param" "maybe type" "temp"
    (656676 'move' call_tmp[656673](127703 call != call_tmp[656654] call_tmp[656668]))
    unknown call_tmp[656678] "expr temp" "maybe param" "maybe type" "temp"
    (656681 'move' call_tmp[656678](127811 call _cond_test call_tmp[656673]))
    if call_tmp[656678]
    {
      (517683 'move' ret[517678](517682 'deref' 1))
      gotoReturn _end_!=[517676] _end_!=[517676]
    }
    {
      unknown call_tmp[656685] "expr temp" "maybe param" "maybe type" "temp"
      (656688 'move' call_tmp[656685](127710 call _value _mt[243] d1[127670]))
      unknown call_tmp[656692] "expr temp" "maybe param" "maybe type" "temp"
      (656695 'move' call_tmp[656692](127714 call _value _mt[243] d2[127676]))
      unknown call_tmp[656697] "expr temp" "maybe param" "maybe type" "temp"
      (656700 'move' call_tmp[656697](127717 call == call_tmp[656685] call_tmp[656692]))
      unknown call_tmp[656702] "expr temp" "maybe param" "maybe type" "temp"
      (656705 'move' call_tmp[656702](127807 call _cond_test call_tmp[656697]))
      if call_tmp[656702]
      {
        (517688 'move' ret[517678](517687 'deref' 0))
        gotoReturn _end_!=[517676] _end_!=[517676]
      }
      {
        {
          unknown i[127760] "dead at end of block" "insert auto destroy"
          (543069 'init var' i[127760] 0)
          (480129 'end of statement')
          unknown tmp[127761] "maybe param" "temp"
          unknown call_tmp[656709] "expr temp" "maybe param" "maybe type" "temp"
          (656712 'move' call_tmp[656709](127725 call _value _mt[243] d1[127670]))
          unknown call_tmp[656716] "expr temp" "maybe param" "maybe type" "temp"
          (656719 'move' call_tmp[656716](127728 call rank _mt[243] call_tmp[656709]))
          unknown call_tmp[656721] "expr temp" "maybe param" "maybe type" "temp"
          (656724 'move' call_tmp[656721](127732 call - call_tmp[656716] 1))
          (127773 'move' tmp[127761](127771 call chpl_compute_low_param_loop_bound 0 call_tmp[656721]))
          unknown tmp[127762] "maybe param" "temp"
          unknown call_tmp[656728] "expr temp" "maybe param" "maybe type" "temp"
          (656731 'move' call_tmp[656728](127782 call _value _mt[243] d1[127670]))
          unknown call_tmp[656735] "expr temp" "maybe param" "maybe type" "temp"
          (656738 'move' call_tmp[656735](127780 call rank _mt[243] call_tmp[656728]))
          unknown call_tmp[656740] "expr temp" "maybe param" "maybe type" "temp"
          (656743 'move' call_tmp[656740](127778 call - call_tmp[656735] 1))
          (127789 'move' tmp[127762](127787 call chpl_compute_high_param_loop_bound 0 call_tmp[656740]))
          unknown tmp[127763] "maybe param" "temp"
          (127792 'move' tmp[127763] 1)
          ParamForLoop[127794]
          { i[127760] tmp[127761] tmp[127762] tmp[127763]
            unknown call_tmp[656747] "expr temp" "maybe param" "maybe type" "temp"
            (656750 'move' call_tmp[656747](127742 call(127737 call (partial) dim _mt[243] d1[127670]) i[127760]))
            unknown call_tmp[656754] "expr temp" "maybe param" "maybe type" "temp"
            (656757 'move' call_tmp[656754](127749 call(127744 call (partial) dim _mt[243] d2[127676]) i[127760]))
            unknown call_tmp[656759] "expr temp" "maybe param" "maybe type" "temp"
            (656762 'move' call_tmp[656759](127750 call != call_tmp[656747] call_tmp[656754]))
            unknown call_tmp[656764] "expr temp" "maybe param" "maybe type" "temp"
            (656767 'move' call_tmp[656764](127755 call _cond_test call_tmp[656759]))
            if call_tmp[656764]
            {
              (517693 'move' ret[517678](517692 'deref' 1))
              gotoReturn _end_!=[517676] _end_!=[517676]
            }
          }
          label _unused_continueLabel[127765]
          label _breakLabel[127764]
        }
        (517698 'move' ret[517678](517697 'deref' 0))
        gotoReturn _end_!=[517676] _end_!=[517676]
      }
    }
    label _end_!=[517676]
    (517680 return ret[517678])
  }
  where {
    unknown tmp[425357] "maybe param" "temp"
    (425368 'move' tmp[425357](127682 call isRectangularDom d1[127670]))
    unknown call_tmp[656769] "expr temp" "maybe param" "maybe type" "temp"
    (656772 'move' call_tmp[656769](425370 call _cond_invalid tmp[425357]))
    if call_tmp[656769]
    {
      (425373 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566043] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566044] "maybe param" "temp"
    unknown call_tmp[656774] "expr temp" "maybe param" "maybe type" "temp"
    (656777 'move' call_tmp[656774](425358 call isTrue tmp[425357]))
    (566049 'move' tmp[566044](566047 call _cond_test call_tmp[656774]))
    if tmp[566044]
    {
      unknown tmp[566051] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656779] "expr temp" "maybe param" "maybe type" "temp"
      (656782 'move' call_tmp[656779](127686 call isRectangularDom d2[127676]))
      (566053 'move' tmp[566051](425361 call isTrue call_tmp[656779]))
      (566058 'move' tmp[566043](566055 '_paramFoldLogical' tmp[566044] tmp[566051]))
    }
    {
      (566063 'move' tmp[566043](566060 '_paramFoldLogical' tmp[566044] 0))
    }
    (748479 call chpl_statementLevelSymbol tmp[566043])
  }
  function ==[127826](arg d1[127823]:_domain[125908](?), arg d2[127829]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517704] "RVV" "temp"
    unknown call_tmp[656786] "expr temp" "maybe param" "maybe type" "temp"
    (656789 'move' call_tmp[656786](127843 call _value _mt[243] d1[127823]))
    unknown call_tmp[656793] "expr temp" "maybe param" "maybe type" "temp"
    (656796 'move' call_tmp[656793](127847 call _value _mt[243] d2[127829]))
    unknown call_tmp[656798] "expr temp" "maybe param" "maybe type" "temp"
    (656801 'move' call_tmp[656798](127850 call == call_tmp[656786] call_tmp[656793]))
    unknown call_tmp[656803] "expr temp" "maybe param" "maybe type" "temp"
    (656806 'move' call_tmp[656803](127855 call _cond_test call_tmp[656798]))
    if call_tmp[656803]
    {
      (517709 'move' ret[517704](517708 'deref' 1))
      gotoReturn _end_==[517702] _end_==[517702]
    }
    unknown call_tmp[656810] "expr temp" "maybe param" "maybe type" "temp"
    (656813 'move' call_tmp[656810](127862 call size _mt[243] d1[127823]))
    unknown call_tmp[656817] "expr temp" "maybe param" "maybe type" "temp"
    (656820 'move' call_tmp[656817](127866 call size _mt[243] d2[127829]))
    unknown call_tmp[656822] "expr temp" "maybe param" "maybe type" "temp"
    (656825 'move' call_tmp[656822](127869 call != call_tmp[656810] call_tmp[656817]))
    unknown call_tmp[656827] "expr temp" "maybe param" "maybe type" "temp"
    (656830 'move' call_tmp[656827](127874 call _cond_test call_tmp[656822]))
    if call_tmp[656827]
    {
      (517714 'move' ret[517704](517713 'deref' 0))
      gotoReturn _end_==[517702] _end_==[517702]
    }
    {
      unknown _indexOfInterest[127898] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127899] "expr temp" "temp"
      (127908 'move' _iterator[127899](127906 call _getIterator d1[127823]))
      Defer
      {
        {
          (127924 call _freeIterator _iterator[127899])
        }
      }
      { scopeless type
        (127913 'move' _indexOfInterest[127898](127910 call iteratorIndex _iterator[127899]))
      }
      ForLoop[127900]
      {
        unknown idx[127917] "index var" "insert auto destroy"
        (480135 'end of statement')
        (127919 'move' idx[127917] _indexOfInterest[127898])
        (480136 'end of statement' idx[127917])
        unknown call_tmp[656834] "expr temp" "maybe param" "maybe type" "temp"
        (656837 'move' call_tmp[656834](127887 call(127882 call (partial) contains _mt[243] d2[127829]) idx[127917]))
        unknown call_tmp[656839] "expr temp" "maybe param" "maybe type" "temp"
        (656842 'move' call_tmp[656839](127888 call ! call_tmp[656834]))
        unknown call_tmp[656844] "expr temp" "maybe param" "maybe type" "temp"
        (656847 'move' call_tmp[656844](127893 call _cond_test call_tmp[656839]))
        if call_tmp[656844]
        {
          (517719 'move' ret[517704](517718 'deref' 0))
          gotoReturn _end_==[517702] _end_==[517702]
        }
        label _continueLabel[127903]
        _indexOfInterest[127898]
        _iterator[127899]
      }
      label _breakLabel[127904]
    }
    (517724 'move' ret[517704](517723 'deref' 1))
    label _end_==[517702]
    (517706 return ret[517704])
  }
  where {
    unknown tmp[425378] "maybe param" "temp"
    (425389 'move' tmp[425378](127835 call isAssociativeDom d1[127823]))
    unknown call_tmp[656849] "expr temp" "maybe param" "maybe type" "temp"
    (656852 'move' call_tmp[656849](425391 call _cond_invalid tmp[425378]))
    if call_tmp[656849]
    {
      (425394 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566070] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566071] "maybe param" "temp"
    unknown call_tmp[656854] "expr temp" "maybe param" "maybe type" "temp"
    (656857 'move' call_tmp[656854](425379 call isTrue tmp[425378]))
    (566076 'move' tmp[566071](566074 call _cond_test call_tmp[656854]))
    if tmp[566071]
    {
      unknown tmp[566078] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656859] "expr temp" "maybe param" "maybe type" "temp"
      (656862 'move' call_tmp[656859](127839 call isAssociativeDom d2[127829]))
      (566080 'move' tmp[566078](425382 call isTrue call_tmp[656859]))
      (566085 'move' tmp[566070](566082 '_paramFoldLogical' tmp[566071] tmp[566078]))
    }
    {
      (566090 'move' tmp[566070](566087 '_paramFoldLogical' tmp[566071] 0))
    }
    (748481 call chpl_statementLevelSymbol tmp[566070])
  }
  function !=[127943](arg d1[127940]:_domain[125908](?), arg d2[127946]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517728] "RVV" "temp"
    unknown call_tmp[656866] "expr temp" "maybe param" "maybe type" "temp"
    (656869 'move' call_tmp[656866](127960 call _value _mt[243] d1[127940]))
    unknown call_tmp[656873] "expr temp" "maybe param" "maybe type" "temp"
    (656876 'move' call_tmp[656873](127964 call _value _mt[243] d2[127946]))
    unknown call_tmp[656878] "expr temp" "maybe param" "maybe type" "temp"
    (656881 'move' call_tmp[656878](127967 call == call_tmp[656866] call_tmp[656873]))
    unknown call_tmp[656883] "expr temp" "maybe param" "maybe type" "temp"
    (656886 'move' call_tmp[656883](127972 call _cond_test call_tmp[656878]))
    if call_tmp[656883]
    {
      (517733 'move' ret[517728](517732 'deref' 0))
      gotoReturn _end_!=[517726] _end_!=[517726]
    }
    unknown call_tmp[656890] "expr temp" "maybe param" "maybe type" "temp"
    (656893 'move' call_tmp[656890](127979 call size _mt[243] d1[127940]))
    unknown call_tmp[656897] "expr temp" "maybe param" "maybe type" "temp"
    (656900 'move' call_tmp[656897](127983 call size _mt[243] d2[127946]))
    unknown call_tmp[656902] "expr temp" "maybe param" "maybe type" "temp"
    (656905 'move' call_tmp[656902](127986 call != call_tmp[656890] call_tmp[656897]))
    unknown call_tmp[656907] "expr temp" "maybe param" "maybe type" "temp"
    (656910 'move' call_tmp[656907](127991 call _cond_test call_tmp[656902]))
    if call_tmp[656907]
    {
      (517738 'move' ret[517728](517737 'deref' 1))
      gotoReturn _end_!=[517726] _end_!=[517726]
    }
    {
      unknown _indexOfInterest[128015] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128016] "expr temp" "temp"
      (128025 'move' _iterator[128016](128023 call _getIterator d1[127940]))
      Defer
      {
        {
          (128041 call _freeIterator _iterator[128016])
        }
      }
      { scopeless type
        (128030 'move' _indexOfInterest[128015](128027 call iteratorIndex _iterator[128016]))
      }
      ForLoop[128017]
      {
        unknown idx[128034] "index var" "insert auto destroy"
        (480143 'end of statement')
        (128036 'move' idx[128034] _indexOfInterest[128015])
        (480144 'end of statement' idx[128034])
        unknown call_tmp[656914] "expr temp" "maybe param" "maybe type" "temp"
        (656917 'move' call_tmp[656914](128004 call(127999 call (partial) contains _mt[243] d2[127946]) idx[128034]))
        unknown call_tmp[656919] "expr temp" "maybe param" "maybe type" "temp"
        (656922 'move' call_tmp[656919](128005 call ! call_tmp[656914]))
        unknown call_tmp[656924] "expr temp" "maybe param" "maybe type" "temp"
        (656927 'move' call_tmp[656924](128010 call _cond_test call_tmp[656919]))
        if call_tmp[656924]
        {
          (517743 'move' ret[517728](517742 'deref' 1))
          gotoReturn _end_!=[517726] _end_!=[517726]
        }
        label _continueLabel[128020]
        _indexOfInterest[128015]
        _iterator[128016]
      }
      label _breakLabel[128021]
    }
    (517748 'move' ret[517728](517747 'deref' 0))
    label _end_!=[517726]
    (517730 return ret[517728])
  }
  where {
    unknown tmp[425399] "maybe param" "temp"
    (425410 'move' tmp[425399](127952 call isAssociativeDom d1[127940]))
    unknown call_tmp[656929] "expr temp" "maybe param" "maybe type" "temp"
    (656932 'move' call_tmp[656929](425412 call _cond_invalid tmp[425399]))
    if call_tmp[656929]
    {
      (425415 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566097] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566098] "maybe param" "temp"
    unknown call_tmp[656934] "expr temp" "maybe param" "maybe type" "temp"
    (656937 'move' call_tmp[656934](425400 call isTrue tmp[425399]))
    (566103 'move' tmp[566098](566101 call _cond_test call_tmp[656934]))
    if tmp[566098]
    {
      unknown tmp[566105] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656939] "expr temp" "maybe param" "maybe type" "temp"
      (656942 'move' call_tmp[656939](127956 call isAssociativeDom d2[127946]))
      (566107 'move' tmp[566105](425403 call isTrue call_tmp[656939]))
      (566112 'move' tmp[566097](566109 '_paramFoldLogical' tmp[566098] tmp[566105]))
    }
    {
      (566117 'move' tmp[566097](566114 '_paramFoldLogical' tmp[566098] 0))
    }
    (748483 call chpl_statementLevelSymbol tmp[566097])
  }
  function ==[128060](arg d1[128057]:_domain[125908](?), arg d2[128063]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517752] "RVV" "temp"
    unknown call_tmp[656946] "expr temp" "maybe param" "maybe type" "temp"
    (656949 'move' call_tmp[656946](128077 call _value _mt[243] d1[128057]))
    unknown call_tmp[656953] "expr temp" "maybe param" "maybe type" "temp"
    (656956 'move' call_tmp[656953](128081 call _value _mt[243] d2[128063]))
    unknown call_tmp[656958] "expr temp" "maybe param" "maybe type" "temp"
    (656961 'move' call_tmp[656958](128084 call == call_tmp[656946] call_tmp[656953]))
    unknown call_tmp[656963] "expr temp" "maybe param" "maybe type" "temp"
    (656966 'move' call_tmp[656963](128089 call _cond_test call_tmp[656958]))
    if call_tmp[656963]
    {
      (517757 'move' ret[517752](517756 'deref' 1))
      gotoReturn _end_==[517750] _end_==[517750]
    }
    unknown call_tmp[656970] "expr temp" "maybe param" "maybe type" "temp"
    (656973 'move' call_tmp[656970](128096 call size _mt[243] d1[128057]))
    unknown call_tmp[656977] "expr temp" "maybe param" "maybe type" "temp"
    (656980 'move' call_tmp[656977](128100 call size _mt[243] d2[128063]))
    unknown call_tmp[656982] "expr temp" "maybe param" "maybe type" "temp"
    (656985 'move' call_tmp[656982](128103 call != call_tmp[656970] call_tmp[656977]))
    unknown call_tmp[656987] "expr temp" "maybe param" "maybe type" "temp"
    (656990 'move' call_tmp[656987](128108 call _cond_test call_tmp[656982]))
    if call_tmp[656987]
    {
      (517762 'move' ret[517752](517761 'deref' 0))
      gotoReturn _end_==[517750] _end_==[517750]
    }
    unknown call_tmp[656994] "expr temp" "maybe param" "maybe type" "temp"
    (656997 'move' call_tmp[656994](128114 call _value _mt[243] d1[128057]))
    unknown call_tmp[657001] "expr temp" "maybe param" "maybe type" "temp"
    (657004 'move' call_tmp[657001](128117 call parentDom _mt[243] call_tmp[656994]))
    unknown call_tmp[657008] "expr temp" "maybe param" "maybe type" "temp"
    (657011 'move' call_tmp[657008](128121 call _value _mt[243] d2[128063]))
    unknown call_tmp[657015] "expr temp" "maybe param" "maybe type" "temp"
    (657018 'move' call_tmp[657015](128124 call parentDom _mt[243] call_tmp[657008]))
    unknown call_tmp[657020] "expr temp" "maybe param" "maybe type" "temp"
    (657023 'move' call_tmp[657020](128127 call != call_tmp[657001] call_tmp[657015]))
    unknown call_tmp[657025] "expr temp" "maybe param" "maybe type" "temp"
    (657028 'move' call_tmp[657025](128132 call _cond_test call_tmp[657020]))
    if call_tmp[657025]
    {
      (517767 'move' ret[517752](517766 'deref' 0))
      gotoReturn _end_==[517750] _end_==[517750]
    }
    {
      unknown _indexOfInterest[128156] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128157] "expr temp" "temp"
      (128166 'move' _iterator[128157](128164 call _getIterator d1[128057]))
      Defer
      {
        {
          (128182 call _freeIterator _iterator[128157])
        }
      }
      { scopeless type
        (128171 'move' _indexOfInterest[128156](128168 call iteratorIndex _iterator[128157]))
      }
      ForLoop[128158]
      {
        unknown idx[128175] "index var" "insert auto destroy"
        (480152 'end of statement')
        (128177 'move' idx[128175] _indexOfInterest[128156])
        (480153 'end of statement' idx[128175])
        unknown call_tmp[657032] "expr temp" "maybe param" "maybe type" "temp"
        (657035 'move' call_tmp[657032](128145 call(128140 call (partial) contains _mt[243] d2[128063]) idx[128175]))
        unknown call_tmp[657037] "expr temp" "maybe param" "maybe type" "temp"
        (657040 'move' call_tmp[657037](128146 call ! call_tmp[657032]))
        unknown call_tmp[657042] "expr temp" "maybe param" "maybe type" "temp"
        (657045 'move' call_tmp[657042](128151 call _cond_test call_tmp[657037]))
        if call_tmp[657042]
        {
          (517772 'move' ret[517752](517771 'deref' 0))
          gotoReturn _end_==[517750] _end_==[517750]
        }
        label _continueLabel[128161]
        _indexOfInterest[128156]
        _iterator[128157]
      }
      label _breakLabel[128162]
    }
    (517777 'move' ret[517752](517776 'deref' 1))
    label _end_==[517750]
    (517754 return ret[517752])
  }
  where {
    unknown tmp[425420] "maybe param" "temp"
    (425431 'move' tmp[425420](128069 call isSparseDom d1[128057]))
    unknown call_tmp[657047] "expr temp" "maybe param" "maybe type" "temp"
    (657050 'move' call_tmp[657047](425433 call _cond_invalid tmp[425420]))
    if call_tmp[657047]
    {
      (425436 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566124] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566125] "maybe param" "temp"
    unknown call_tmp[657052] "expr temp" "maybe param" "maybe type" "temp"
    (657055 'move' call_tmp[657052](425421 call isTrue tmp[425420]))
    (566130 'move' tmp[566125](566128 call _cond_test call_tmp[657052]))
    if tmp[566125]
    {
      unknown tmp[566132] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657057] "expr temp" "maybe param" "maybe type" "temp"
      (657060 'move' call_tmp[657057](128073 call isSparseDom d2[128063]))
      (566134 'move' tmp[566132](425424 call isTrue call_tmp[657057]))
      (566139 'move' tmp[566124](566136 '_paramFoldLogical' tmp[566125] tmp[566132]))
    }
    {
      (566144 'move' tmp[566124](566141 '_paramFoldLogical' tmp[566125] 0))
    }
    (748485 call chpl_statementLevelSymbol tmp[566124])
  }
  function !=[128201](arg d1[128198]:_domain[125908](?), arg d2[128204]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517781] "RVV" "temp"
    unknown call_tmp[657064] "expr temp" "maybe param" "maybe type" "temp"
    (657067 'move' call_tmp[657064](128218 call _value _mt[243] d1[128198]))
    unknown call_tmp[657071] "expr temp" "maybe param" "maybe type" "temp"
    (657074 'move' call_tmp[657071](128222 call _value _mt[243] d2[128204]))
    unknown call_tmp[657076] "expr temp" "maybe param" "maybe type" "temp"
    (657079 'move' call_tmp[657076](128225 call == call_tmp[657064] call_tmp[657071]))
    unknown call_tmp[657081] "expr temp" "maybe param" "maybe type" "temp"
    (657084 'move' call_tmp[657081](128230 call _cond_test call_tmp[657076]))
    if call_tmp[657081]
    {
      (517786 'move' ret[517781](517785 'deref' 0))
      gotoReturn _end_!=[517779] _end_!=[517779]
    }
    unknown call_tmp[657088] "expr temp" "maybe param" "maybe type" "temp"
    (657091 'move' call_tmp[657088](128237 call size _mt[243] d1[128198]))
    unknown call_tmp[657095] "expr temp" "maybe param" "maybe type" "temp"
    (657098 'move' call_tmp[657095](128241 call size _mt[243] d2[128204]))
    unknown call_tmp[657100] "expr temp" "maybe param" "maybe type" "temp"
    (657103 'move' call_tmp[657100](128244 call != call_tmp[657088] call_tmp[657095]))
    unknown call_tmp[657105] "expr temp" "maybe param" "maybe type" "temp"
    (657108 'move' call_tmp[657105](128249 call _cond_test call_tmp[657100]))
    if call_tmp[657105]
    {
      (517791 'move' ret[517781](517790 'deref' 1))
      gotoReturn _end_!=[517779] _end_!=[517779]
    }
    unknown call_tmp[657112] "expr temp" "maybe param" "maybe type" "temp"
    (657115 'move' call_tmp[657112](128255 call _value _mt[243] d1[128198]))
    unknown call_tmp[657119] "expr temp" "maybe param" "maybe type" "temp"
    (657122 'move' call_tmp[657119](128258 call parentDom _mt[243] call_tmp[657112]))
    unknown call_tmp[657126] "expr temp" "maybe param" "maybe type" "temp"
    (657129 'move' call_tmp[657126](128262 call _value _mt[243] d2[128204]))
    unknown call_tmp[657133] "expr temp" "maybe param" "maybe type" "temp"
    (657136 'move' call_tmp[657133](128265 call parentDom _mt[243] call_tmp[657126]))
    unknown call_tmp[657138] "expr temp" "maybe param" "maybe type" "temp"
    (657141 'move' call_tmp[657138](128268 call != call_tmp[657119] call_tmp[657133]))
    unknown call_tmp[657143] "expr temp" "maybe param" "maybe type" "temp"
    (657146 'move' call_tmp[657143](128273 call _cond_test call_tmp[657138]))
    if call_tmp[657143]
    {
      (517796 'move' ret[517781](517795 'deref' 1))
      gotoReturn _end_!=[517779] _end_!=[517779]
    }
    {
      unknown _indexOfInterest[128297] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128298] "expr temp" "temp"
      (128307 'move' _iterator[128298](128305 call _getIterator d1[128198]))
      Defer
      {
        {
          (128323 call _freeIterator _iterator[128298])
        }
      }
      { scopeless type
        (128312 'move' _indexOfInterest[128297](128309 call iteratorIndex _iterator[128298]))
      }
      ForLoop[128299]
      {
        unknown idx[128316] "index var" "insert auto destroy"
        (480161 'end of statement')
        (128318 'move' idx[128316] _indexOfInterest[128297])
        (480162 'end of statement' idx[128316])
        unknown call_tmp[657150] "expr temp" "maybe param" "maybe type" "temp"
        (657153 'move' call_tmp[657150](128286 call(128281 call (partial) contains _mt[243] d2[128204]) idx[128316]))
        unknown call_tmp[657155] "expr temp" "maybe param" "maybe type" "temp"
        (657158 'move' call_tmp[657155](128287 call ! call_tmp[657150]))
        unknown call_tmp[657160] "expr temp" "maybe param" "maybe type" "temp"
        (657163 'move' call_tmp[657160](128292 call _cond_test call_tmp[657155]))
        if call_tmp[657160]
        {
          (517801 'move' ret[517781](517800 'deref' 1))
          gotoReturn _end_!=[517779] _end_!=[517779]
        }
        label _continueLabel[128302]
        _indexOfInterest[128297]
        _iterator[128298]
      }
      label _breakLabel[128303]
    }
    (517806 'move' ret[517781](517805 'deref' 0))
    label _end_!=[517779]
    (517783 return ret[517781])
  }
  where {
    unknown tmp[425441] "maybe param" "temp"
    (425452 'move' tmp[425441](128210 call isSparseDom d1[128198]))
    unknown call_tmp[657165] "expr temp" "maybe param" "maybe type" "temp"
    (657168 'move' call_tmp[657165](425454 call _cond_invalid tmp[425441]))
    if call_tmp[657165]
    {
      (425457 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566151] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566152] "maybe param" "temp"
    unknown call_tmp[657170] "expr temp" "maybe param" "maybe type" "temp"
    (657173 'move' call_tmp[657170](425442 call isTrue tmp[425441]))
    (566157 'move' tmp[566152](566155 call _cond_test call_tmp[657170]))
    if tmp[566152]
    {
      unknown tmp[566159] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657175] "expr temp" "maybe param" "maybe type" "temp"
      (657178 'move' call_tmp[657175](128214 call isSparseDom d2[128204]))
      (566161 'move' tmp[566159](425445 call isTrue call_tmp[657175]))
      (566166 'move' tmp[566151](566163 '_paramFoldLogical' tmp[566152] tmp[566159]))
    }
    {
      (566171 'move' tmp[566151](566168 '_paramFoldLogical' tmp[566152] 0))
    }
    (748487 call chpl_statementLevelSymbol tmp[566151])
  }
  function ==[128342](arg d1[128339]:_domain[125908](?), arg d2[128345]:_domain[125908](?)) param : _unknown[51] "inline"
  {
    unknown ret[517810] "RVV" "param" "temp"
    (517815 'move' ret[517810](517814 'deref' 0))
    (517812 return ret[517810])
  }
  function !=[128360](arg d1[128357]:_domain[125908](?), arg d2[128363]:_domain[125908](?)) param : _unknown[51] "inline"
  {
    unknown ret[517819] "RVV" "param" "temp"
    (517824 'move' ret[517819](517823 'deref' 1))
    (517821 return ret[517819])
  }
  function shouldReturnRvalueByConstRef[128376](arg t[128374]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517828] "RVV" "param" "temp"
    (517833 'move' ret[517828](517832 'deref' 1))
    (517830 return ret[517828])
  }
  function shouldReturnRvalueByValue[128388](arg t[128386]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517837] "RVV" "param" "temp"
    unknown call_tmp[657180] "expr temp" "maybe param" "maybe type" "temp"
    (657183 'move' call_tmp[657180](128391 call ! PODValAccess[113743]))
    unknown call_tmp[657185] "expr temp" "maybe param" "maybe type" "temp"
    (657188 'move' call_tmp[657185](128396 call _cond_test call_tmp[657180]))
    if call_tmp[657185]
    {
      (517842 'move' ret[517837](517841 'deref' 0))
      gotoReturn _end_shouldReturnRvalueByValue[517835] _end_shouldReturnRvalueByValue[517835]
    }
    unknown call_tmp[657190] "expr temp" "maybe param" "maybe type" "temp"
    (657193 'move' call_tmp[657190](128405 call isPODType t[128386]))
    unknown call_tmp[657195] "expr temp" "maybe param" "maybe type" "temp"
    (657198 'move' call_tmp[657195](128409 call _cond_test call_tmp[657190]))
    if call_tmp[657195]
    {
      (517847 'move' ret[517837](517846 'deref' 1))
      gotoReturn _end_shouldReturnRvalueByValue[517835] _end_shouldReturnRvalueByValue[517835]
    }
    (517852 'move' ret[517837](517851 'deref' 0))
    label _end_shouldReturnRvalueByValue[517835]
    (517839 return ret[517837])
  }
  function _array[133594](?).chpl__serialize[128436](arg _mt[133598]:_MT[238], arg this[133596]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517856] "RVV" "temp"
    unknown call_tmp[657202] "expr temp" "maybe param" "maybe type" "temp"
    (657205 'move' call_tmp[657202](359835 call _instance _mt[243] this[133596]))
    unknown call_tmp[657209] "expr temp" "maybe param" "maybe type" "temp"
    (657212 'move' call_tmp[657209](128451 call(128447 call (partial) chpl__serialize _mt[243] call_tmp[657202])))
    (517861 'move' ret[517856](517860 'deref' call_tmp[657209]))
    (517858 return ret[517856])
  }
  where {
    unknown call_tmp[657216] "expr temp" "maybe param" "maybe type" "temp"
    (657219 'move' call_tmp[657216](359830 call _instance _mt[243] this[133596]))
    (128445 call(128441 call (partial) chpl__rvfMe _mt[243] call_tmp[657216]))
  }
  function _array[133594](?).chpl__deserialize[128462](arg _mt[133602]:_MT[238], arg this[133600]:_array[133594](?), arg data[128460]:_any[178](?)) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[517865] "RVV" "temp"
    unknown call_tmp[657223] "expr temp" "maybe param" "maybe type" "temp"
    (657226 'move' call_tmp[657223](128469 'static field type' this[133600] "_instance"))
    unknown call_tmp[657228] "expr temp" "maybe param" "maybe type" "temp"
    (657231 'move' call_tmp[657228](128471 call _to_borrowed call_tmp[657223]))
    unknown call_tmp[657235] "maybe param" "maybe type" "temp"
    (657238 'move' call_tmp[657235](128477 call(128472 call (partial) chpl__deserialize _mt[243] call_tmp[657228]) data[128460]))
    unknown arrinst[128478] "dead at end of block" "insert auto destroy"
    (543071 'init var' arrinst[128478] call_tmp[657235])
    (128481 'end of statement')
    unknown call_tmp[657240] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (657243 'move' call_tmp[657240](748068 'new' _array[133594](?) nullPid[113718] arrinst[128478](_unowned = 1)))
    (517870 'move' ret[517865](517869 'deref' call_tmp[657240]))
    gotoReturn _end_chpl__deserialize[517863] _end_chpl__deserialize[517863]
    (480173 'end of statement' arrinst[128478])
    label _end_chpl__deserialize[517863]
    (517867 return ret[517865])
  }
  function _array[133594](?).chpl__promotionType[128497](arg _mt[133606]:_MT[238], arg this[133604]:_array[133594](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[517876] "RVV" "temp" "type variable"
    unknown call_tmp[657247] "expr temp" "maybe param" "maybe type" "temp"
    (657250 'move' call_tmp[657247](359839 call _value _mt[243] this[133604]))
    unknown call_tmp[657254] "expr temp" "maybe param" "maybe type" "temp"
    (657257 'move' call_tmp[657254](128500 call eltType _mt[243] call_tmp[657247]))
    (517881 'move' ret[517876](517880 'deref' call_tmp[657254]))
    (517878 return ret[517876])
  }
  function _array[133594](?)._value[128510](arg _mt[133610]:_MT[238], arg this[133608]:_array[133594](?)) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    unknown ret[517885] "RVV" "temp"
    unknown call_tmp[657261] "expr temp" "maybe param" "maybe type" "temp"
    (657264 'move' call_tmp[657261](383843 call _instance _mt[243] this[133608]))
    unknown call_tmp[657266] "expr temp" "maybe param" "maybe type" "temp"
    (657269 'move' call_tmp[657266](128515 call _isPrivatized call_tmp[657261]))
    unknown call_tmp[657271] "expr temp" "maybe param" "maybe type" "temp"
    (657274 'move' call_tmp[657271](128529 call _cond_test call_tmp[657266]))
    if call_tmp[657271]
    {
      { scopeless type
        unknown call_type_tmp[492299] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[657278] "expr temp" "maybe param" "maybe type" "temp"
        (657281 'move' call_tmp[657278](383848 call _instance _mt[243] this[133608]))
        (492303 'move' call_type_tmp[492299](128518 'typeof' call_tmp[657278]))
      }
      unknown call_tmp[657285] "expr temp" "maybe param" "maybe type" "temp"
      (657288 'move' call_tmp[657285](383853 call _pid _mt[243] this[133608]))
      unknown call_tmp[657290] "expr temp" "maybe param" "maybe type" "temp"
      (657293 'move' call_tmp[657290](128521 call chpl_getPrivatizedCopy call_type_tmp[492299] call_tmp[657285]))
      (517890 'move' ret[517885](517889 'deref' call_tmp[657290]))
      gotoReturn _end__value[517883] _end__value[517883]
    }
    {
      unknown call_tmp[657297] "expr temp" "maybe param" "maybe type" "temp"
      (657300 'move' call_tmp[657297](383858 call _instance _mt[243] this[133608]))
      (517895 'move' ret[517885](517894 'deref' call_tmp[657297]))
      gotoReturn _end__value[517883] _end__value[517883]
    }
    label _end__value[517883]
    (517887 return ret[517885])
  }
  function _array[133594](?).chpl_forwarding_expr6__value[128543](arg _mt[133614]:_MT[238], arg this[133612]:_array[133594](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[517901] "RVV" "temp"
    (517905 'move' ret[517901](383862 call _value _mt[243] this[133612]))
    (517903 return ret[517901])
  }
  function _array[133594](?).deinit[128551](arg _mt[133618]:_MT[238], arg this[133616]:_array[133594](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (128556 call _do_destroy_array this[133616])
    (517907 return _void[55])
  }
  function _array[133594](?).eltType[128563](arg _mt[133622]:_MT[238], arg this[133620]:_array[133594](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517911] "RVV" "temp" "type variable"
    unknown call_tmp[657306] "expr temp" "maybe param" "maybe type" "temp"
    (657309 'move' call_tmp[657306](359843 call _value _mt[243] this[133620]))
    unknown call_tmp[657313] "expr temp" "maybe param" "maybe type" "temp"
    (657316 'move' call_tmp[657313](128566 call eltType _mt[243] call_tmp[657306]))
    (517916 'move' ret[517911](517915 'deref' call_tmp[657313]))
    (517913 return ret[517911])
  }
  function _array[133594](?).idxType[128576](arg _mt[133626]:_MT[238], arg this[133624]:_array[133594](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517920] "RVV" "temp" "type variable"
    unknown call_tmp[657320] "expr temp" "maybe param" "maybe type" "temp"
    (657323 'move' call_tmp[657320](359847 call _value _mt[243] this[133624]))
    unknown call_tmp[657327] "expr temp" "maybe param" "maybe type" "temp"
    (657330 'move' call_tmp[657327](128579 call idxType _mt[243] call_tmp[657320]))
    (517925 'move' ret[517920](517924 'deref' call_tmp[657327]))
    (517922 return ret[517920])
  }
  function _array[133594](?)._dom[128589](arg _mt[133630]:_MT[238], arg this[133628]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517929] "RVV" "temp"
    unknown call_tmp[657334] "expr temp" "maybe param" "maybe type" "temp"
    (657337 'move' call_tmp[657334](359851 call _value _mt[243] this[133628]))
    unknown call_tmp[657341] "expr temp" "maybe param" "maybe type" "temp"
    (657344 'move' call_tmp[657341](128593 call dom _mt[243] call_tmp[657334]))
    unknown call_tmp[657346] "expr temp" "maybe param" "maybe type" "temp"
    (657349 'move' call_tmp[657346](128597 call _getDomain call_tmp[657341]))
    (517934 'move' ret[517929](517933 'deref' call_tmp[657346]))
    (517931 return ret[517929])
  }
  function _array[133594](?).rank[128605](arg _mt[133634]:_MT[238], arg this[133632]:_array[133594](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517938] "RVV" "param" "temp"
    unknown call_tmp[657353] "expr temp" "maybe param" "maybe type" "temp"
    (657356 'move' call_tmp[657353](128608 call _dom _mt[243] this[133632]))
    unknown call_tmp[657360] "expr temp" "maybe param" "maybe type" "temp"
    (657363 'move' call_tmp[657360](128611 call rank _mt[243] call_tmp[657353]))
    (517943 'move' ret[517938](517942 'deref' call_tmp[657360]))
    (517940 return ret[517938])
  }
  function _array[133594](?).indices[128621](arg _mt[133638]:_MT[238], arg this[133636]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517947] "RVV" "temp"
    unknown call_tmp[657367] "expr temp" "maybe param" "maybe type" "temp"
    (657370 'move' call_tmp[657367](383867 call _dom _mt[243] this[133636]))
    (517952 'move' ret[517947](517951 'deref' call_tmp[657367]))
    (517949 return ret[517947])
  }
  function _array[133594](?).checkAccess[128633](arg _mt[133642]:_MT[238], arg this[133640]:_array[133594](?), arg indices[128631]:_any[178](?), arg value[128635]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657372] "expr temp" "maybe param" "maybe type" "temp"
    (657375 'move' call_tmp[657372](128640 call isRectangularArr this[133640]))
    unknown call_tmp[657377] "expr temp" "maybe param" "maybe type" "temp"
    (657380 'move' call_tmp[657377](129156 call _cond_test call_tmp[657372]))
    if call_tmp[657377]
    {
      unknown call_tmp[657384] "expr temp" "maybe param" "maybe type" "temp"
      (657387 'move' call_tmp[657384](128649 call(128644 call (partial) dsiBoundsCheck _mt[243] value[128635]) indices[128631]))
      unknown call_tmp[657389] "expr temp" "maybe param" "maybe type" "temp"
      (657392 'move' call_tmp[657389](128650 call ! call_tmp[657384]))
      unknown call_tmp[657394] "expr temp" "maybe param" "maybe type" "temp"
      (657397 'move' call_tmp[657394](129151 call _cond_test call_tmp[657389]))
      if call_tmp[657394]
      {
        unknown call_tmp[657401] "expr temp" "maybe param" "maybe type" "temp"
        (657404 'move' call_tmp[657401](383873 call rank _mt[243] this[133640]))
        unknown call_tmp[657406] "expr temp" "maybe param" "maybe type" "temp"
        (657409 'move' call_tmp[657406](128654 call == call_tmp[657401] 1))
        unknown call_tmp[657411] "expr temp" "maybe param" "maybe type" "temp"
        (657414 'move' call_tmp[657411](129146 call _cond_test call_tmp[657406]))
        if call_tmp[657411]
        {
          unknown call_tmp[657416] "expr temp" "maybe param" "maybe type" "temp"
          (657419 'move' call_tmp[657416](128695 call indices[128631] 0))
          unknown call_tmp[657423] "expr temp" "maybe param" "maybe type" "temp"
          (657426 'move' call_tmp[657423](128714 call dom _mt[243] value[128635]))
          unknown call_tmp[657430] "expr temp" "maybe param" "maybe type" "temp"
          (657433 'move' call_tmp[657430](128722 call(128717 call (partial) dsiDim _mt[243] call_tmp[657423]) 0))
          (128723 call halt "array index out of bounds\n" "note: index was " call_tmp[657416] " but array bounds are " call_tmp[657430])
        }
        {
          unknown istr[128743] "dead at end of block" "insert auto destroy"
          (543073 'init var' istr[128743] "")
          (128746 'end of statement')
          unknown bstr[128765] "dead at end of block" "insert auto destroy"
          (543075 'init var' bstr[128765] "")
          (128768 'end of statement')
          {
            unknown i[128824] "dead at end of block" "insert auto destroy"
            (543077 'init var' i[128824] 0)
            (480185 'end of statement')
            unknown tmp[128825] "maybe param" "temp"
            unknown call_tmp[657437] "expr temp" "maybe param" "maybe type" "temp"
            (657440 'move' call_tmp[657437](383878 call rank _mt[243] this[133640]))
            unknown call_tmp[657442] "expr temp" "maybe param" "maybe type" "temp"
            (657445 'move' call_tmp[657442](128772 call - call_tmp[657437] 1))
            (128837 'move' tmp[128825](128835 call chpl_compute_low_param_loop_bound 0 call_tmp[657442]))
            unknown tmp[128826] "maybe param" "temp"
            unknown call_tmp[657449] "expr temp" "maybe param" "maybe type" "temp"
            (657452 'move' call_tmp[657449](383890 call rank _mt[243] this[133640]))
            unknown call_tmp[657454] "expr temp" "maybe param" "maybe type" "temp"
            (657457 'move' call_tmp[657454](128842 call - call_tmp[657449] 1))
            (128847 'move' tmp[128826](128845 call chpl_compute_high_param_loop_bound 0 call_tmp[657454]))
            unknown tmp[128827] "maybe param" "temp"
            (128850 'move' tmp[128827] 1)
            ParamForLoop[128852]
            { i[128824] tmp[128825] tmp[128826] tmp[128827]
              {
                unknown call_tmp[657459] "expr temp" "maybe param" "maybe type" "temp"
                (657462 'move' call_tmp[657459](128778 call != i[128824] 0))
                unknown call_tmp[657464] "expr temp" "maybe param" "maybe type" "temp"
                (657467 'move' call_tmp[657464](128791 call _cond_test call_tmp[657459]))
                if call_tmp[657464]
                {
                  (128782 call += istr[128743] ", ")
                  (480186 'end of statement' istr[128743])
                  (128788 call += bstr[128765] ", ")
                  (480188 'end of statement' bstr[128765])
                }
                unknown call_tmp[657469] "expr temp" "maybe param" "maybe type" "temp"
                (657472 'move' call_tmp[657469](128800 call indices[128631] i[128824]))
                unknown call_tmp[657474] "expr temp" "maybe param" "maybe type" "temp"
                (657477 'move' call_tmp[657474](128802 call _cast string[26] call_tmp[657469]))
                (128804 call += istr[128743] call_tmp[657474])
                (480190 'end of statement' istr[128743] i[128824])
                unknown call_tmp[657481] "expr temp" "maybe param" "maybe type" "temp"
                (657484 'move' call_tmp[657481](128809 call dom _mt[243] value[128635]))
                unknown call_tmp[657488] "expr temp" "maybe param" "maybe type" "temp"
                (657491 'move' call_tmp[657488](128817 call(128812 call (partial) dsiDim _mt[243] call_tmp[657481]) i[128824]))
                unknown call_tmp[657493] "expr temp" "maybe param" "maybe type" "temp"
                (657496 'move' call_tmp[657493](128819 call _cast string[26] call_tmp[657488]))
                (128821 call += bstr[128765] call_tmp[657493])
                (480193 'end of statement' bstr[128765] i[128824])
              }
            }
            label _unused_continueLabel[128829]
            label _breakLabel[128828]
          }
          unknown dimstr[128878] "dead at end of block" "insert auto destroy"
          (543079 'init var' dimstr[128878] "")
          (128881 'end of statement')
          {
            unknown i[129032] "dead at end of block" "insert auto destroy"
            (543081 'init var' i[129032] 0)
            (480196 'end of statement')
            unknown tmp[129033] "maybe param" "temp"
            unknown call_tmp[657500] "expr temp" "maybe param" "maybe type" "temp"
            (657503 'move' call_tmp[657500](383894 call rank _mt[243] this[133640]))
            unknown call_tmp[657505] "expr temp" "maybe param" "maybe type" "temp"
            (657508 'move' call_tmp[657505](128885 call - call_tmp[657500] 1))
            (129045 'move' tmp[129033](129043 call chpl_compute_low_param_loop_bound 0 call_tmp[657505]))
            unknown tmp[129034] "maybe param" "temp"
            unknown call_tmp[657512] "expr temp" "maybe param" "maybe type" "temp"
            (657515 'move' call_tmp[657512](383907 call rank _mt[243] this[133640]))
            unknown call_tmp[657517] "expr temp" "maybe param" "maybe type" "temp"
            (657520 'move' call_tmp[657517](129050 call - call_tmp[657512] 1))
            (129055 'move' tmp[129034](129053 call chpl_compute_high_param_loop_bound 0 call_tmp[657517]))
            unknown tmp[129035] "maybe param" "temp"
            (129058 'move' tmp[129035] 1)
            ParamForLoop[129060]
            { i[129032] tmp[129033] tmp[129034] tmp[129035]
              {
                unknown call_tmp[657524] "expr temp" "maybe param" "maybe type" "temp"
                (657527 'move' call_tmp[657524](128890 call dom _mt[243] value[128635]))
                unknown call_tmp[657531] "expr temp" "maybe param" "maybe type" "temp"
                (657534 'move' call_tmp[657531](128898 call(128893 call (partial) dsiDim _mt[243] call_tmp[657524]) i[129032]))
                unknown call_tmp[657538] "expr temp" "maybe param" "maybe type" "temp"
                (657541 'move' call_tmp[657538](128907 call indices[128631] i[129032]))
                unknown call_tmp[657543] "expr temp" "maybe param" "maybe type" "temp"
                (657546 'move' call_tmp[657543](128909 call(128901 call (partial) boundsCheck _mt[243] call_tmp[657531]) call_tmp[657538]))
                unknown call_tmp[657548] "expr temp" "maybe param" "maybe type" "temp"
                (657551 'move' call_tmp[657548](128910 call ! call_tmp[657543]))
                unknown call_tmp[657553] "expr temp" "maybe param" "maybe type" "temp"
                (657556 'move' call_tmp[657553](129027 call _cond_test call_tmp[657548]))
                if call_tmp[657553]
                {
                  unknown call_tmp[657558] "expr temp" "maybe param" "maybe type" "temp"
                  (657561 'move' call_tmp[657558](128930 call == dimstr[128878] ""))
                  unknown call_tmp[657563] "expr temp" "maybe param" "maybe type" "temp"
                  (657566 'move' call_tmp[657563](129022 call _cond_test call_tmp[657558]))
                  if call_tmp[657563]
                  {
                    unknown call_tmp[657568] "expr temp" "maybe param" "maybe type" "temp"
                    (657571 'move' call_tmp[657568](128952 call _cast string[26] i[129032]))
                    unknown call_tmp[657573] "expr temp" "maybe param" "maybe type" "temp"
                    (657576 'move' call_tmp[657573](128954 call + "out of bounds in dimension " call_tmp[657568]))
                    unknown call_tmp[657578] "expr temp" "maybe param" "maybe type" "temp"
                    (657581 'move' call_tmp[657578](128973 call + call_tmp[657573] " because index "))
                    unknown call_tmp[657583] "expr temp" "maybe param" "maybe type" "temp"
                    (657586 'move' call_tmp[657583](128978 call indices[128631] i[129032]))
                    unknown call_tmp[657588] "expr temp" "maybe param" "maybe type" "temp"
                    (657591 'move' call_tmp[657588](128980 call _cast string[26] call_tmp[657583]))
                    unknown call_tmp[657593] "expr temp" "maybe param" "maybe type" "temp"
                    (657596 'move' call_tmp[657593](128982 call + call_tmp[657578] call_tmp[657588]))
                    unknown call_tmp[657598] "expr temp" "maybe param" "maybe type" "temp"
                    (657601 'move' call_tmp[657598](129001 call + call_tmp[657593] " is not in "))
                    unknown call_tmp[657605] "expr temp" "maybe param" "maybe type" "temp"
                    (657608 'move' call_tmp[657605](129004 call dom _mt[243] value[128635]))
                    unknown call_tmp[657612] "expr temp" "maybe param" "maybe type" "temp"
                    (657615 'move' call_tmp[657612](129012 call(129007 call (partial) dsiDim _mt[243] call_tmp[657605]) i[129032]))
                    unknown call_tmp[657617] "expr temp" "maybe param" "maybe type" "temp"
                    (657620 'move' call_tmp[657617](129014 call _cast string[26] call_tmp[657612]))
                    unknown call_tmp[657622] "expr temp" "maybe param" "maybe type" "temp"
                    (657625 'move' call_tmp[657622](129016 call + call_tmp[657598] call_tmp[657617]))
                    (129018 call = dimstr[128878] call_tmp[657622])
                    (480197 'end of statement' dimstr[128878] i[129032] i[129032] i[129032])
                  }
                }
              }
            }
            label _unused_continueLabel[129037]
            label _breakLabel[129036]
          }
          (129144 call halt "array index out of bounds\n" "note: index was (" istr[128743] ") " "but array bounds are (" bstr[128765] ")\n" "note: " dimstr[128878])
          (480202 'end of statement' istr[128743] bstr[128765] dimstr[128878])
        }
      }
    }
    (517954 return _void[55])
  }
  function _array[133594](?).checkSlice[129169](arg _mt[133646]:_MT[238], arg this[133644]:_array[133594](?), arg d[129166]:_domain[125908](?), arg value[129171]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657631] "expr temp" "maybe param" "maybe type" "temp"
    (657634 'move' call_tmp[657631](129179 call(129175 call (partial) dsiDims _mt[243] d[129166])))
    (129184 call(383917 call (partial) checkSlice _mt[243] this[133644])(129180 'expand_tuple' call_tmp[657631])(value = value[129171]))
    (517956 return _void[55])
  }
  function _array[133594](?).checkSlice[129195](arg _mt[133650]:_MT[238], arg this[133648]:_array[133594](?), arg ranges[129192]:_any[178](?) ..., arg value[129197]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657638] "expr temp" "maybe param" "maybe type" "temp"
    (657641 'move' call_tmp[657638](129206 call isRectangularArr this[133648]))
    unknown call_tmp[657643] "expr temp" "maybe param" "maybe type" "temp"
    (657646 'move' call_tmp[657643](129699 call _cond_test call_tmp[657638]))
    if call_tmp[657643]
    {
      unknown ok[129208] "dead at end of block" "insert auto destroy"
      (543083 'init var' ok[129208] 1)
      (129211 'end of statement')
      {
        unknown i[129253] "dead at end of block" "insert auto destroy"
        (543085 'init var' i[129253] 0)
        (480207 'end of statement')
        unknown tmp[129254] "maybe param" "temp"
        unknown call_tmp[657650] "expr temp" "maybe param" "maybe type" "temp"
        (657653 'move' call_tmp[657650](383928 call rank _mt[243] this[133648]))
        unknown call_tmp[657655] "expr temp" "maybe param" "maybe type" "temp"
        (657658 'move' call_tmp[657655](129216 call - call_tmp[657650] 1))
        (129266 'move' tmp[129254](129264 call chpl_compute_low_param_loop_bound 0 call_tmp[657655]))
        unknown tmp[129255] "maybe param" "temp"
        unknown call_tmp[657662] "expr temp" "maybe param" "maybe type" "temp"
        (657665 'move' call_tmp[657662](383936 call rank _mt[243] this[133648]))
        unknown call_tmp[657667] "expr temp" "maybe param" "maybe type" "temp"
        (657670 'move' call_tmp[657667](129271 call - call_tmp[657662] 1))
        (129276 'move' tmp[129255](129274 call chpl_compute_high_param_loop_bound 0 call_tmp[657667]))
        unknown tmp[129256] "maybe param" "temp"
        (129279 'move' tmp[129256] 1)
        ParamForLoop[129281]
        { i[129253] tmp[129254] tmp[129255] tmp[129256]
          {
            {
              unknown tmp[129241] "temp"
              (129244 'move' tmp[129241](129243 'addr of' ok[129208]))
              unknown tmp[425462] "maybe param" "temp"
              (425473 'move' tmp[425462] tmp[129241])
              unknown call_tmp[657672] "expr temp" "maybe param" "maybe type" "temp"
              (657675 'move' call_tmp[657672](425475 call _cond_invalid tmp[425462]))
              if call_tmp[657672]
              {
                (425478 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[566178] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[566179] "maybe param" "temp"
              unknown call_tmp[657677] "expr temp" "maybe param" "maybe type" "temp"
              (657680 'move' call_tmp[657677](425463 call isTrue tmp[425462]))
              (566184 'move' tmp[566179](566182 call _cond_test call_tmp[657677]))
              if tmp[566179]
              {
                unknown tmp[566186] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[657684] "expr temp" "maybe param" "maybe type" "temp"
                (657687 'move' call_tmp[657684](129222 call dom _mt[243] value[129197]))
                unknown call_tmp[657691] "expr temp" "maybe param" "maybe type" "temp"
                (657694 'move' call_tmp[657691](129230 call(129225 call (partial) dsiDim _mt[243] call_tmp[657684]) i[129253]))
                unknown call_tmp[657698] "expr temp" "maybe param" "maybe type" "temp"
                (657701 'move' call_tmp[657698](129237 call ranges[129192] i[129253]))
                unknown call_tmp[657703] "expr temp" "maybe param" "maybe type" "temp"
                (657706 'move' call_tmp[657703](129239 call(129231 call (partial) boundsCheck _mt[243] call_tmp[657691]) call_tmp[657698]))
                (566188 'move' tmp[566186](425466 call isTrue call_tmp[657703]))
                (566193 'move' tmp[566178](566190 '_paramFoldLogical' tmp[566179] tmp[566186]))
              }
              {
                (566198 'move' tmp[566178](566195 '_paramFoldLogical' tmp[566179] 0))
              }
              (129249 call = tmp[129241] tmp[566178])
              (480209 'end of statement' i[129253] i[129253])
            }
          }
        }
        label _unused_continueLabel[129258]
        label _breakLabel[129257]
      }
      unknown call_tmp[657708] "expr temp" "maybe param" "maybe type" "temp"
      (657711 'move' call_tmp[657708](129292 call == ok[129208] 0))
      unknown call_tmp[657713] "expr temp" "maybe param" "maybe type" "temp"
      (657716 'move' call_tmp[657713](129695 call _cond_test call_tmp[657708]))
      if call_tmp[657713]
      {
        unknown call_tmp[657720] "expr temp" "maybe param" "maybe type" "temp"
        (657723 'move' call_tmp[657720](383941 call rank _mt[243] this[133648]))
        unknown call_tmp[657725] "expr temp" "maybe param" "maybe type" "temp"
        (657728 'move' call_tmp[657725](129296 call == call_tmp[657720] 1))
        unknown call_tmp[657730] "expr temp" "maybe param" "maybe type" "temp"
        (657733 'move' call_tmp[657730](129690 call _cond_test call_tmp[657725]))
        if call_tmp[657730]
        {
          unknown call_tmp[657735] "expr temp" "maybe param" "maybe type" "temp"
          (657738 'move' call_tmp[657735](129337 call ranges[129192] 0))
          unknown call_tmp[657742] "expr temp" "maybe param" "maybe type" "temp"
          (657745 'move' call_tmp[657742](129340 call dom _mt[243] value[129197]))
          unknown call_tmp[657749] "expr temp" "maybe param" "maybe type" "temp"
          (657752 'move' call_tmp[657749](129348 call(129343 call (partial) dsiDim _mt[243] call_tmp[657742]) 0))
          (129349 call halt "array slice out of bounds\n" "note: slice index was " call_tmp[657735] " but array bounds are " call_tmp[657749])
        }
        {
          unknown istr[129369] "dead at end of block" "insert auto destroy"
          (543087 'init var' istr[129369] "")
          (129372 'end of statement')
          unknown bstr[129391] "dead at end of block" "insert auto destroy"
          (543089 'init var' bstr[129391] "")
          (129394 'end of statement')
          {
            unknown i[129450] "dead at end of block" "insert auto destroy"
            (543091 'init var' i[129450] 0)
            (480213 'end of statement')
            unknown tmp[129451] "maybe param" "temp"
            unknown call_tmp[657756] "expr temp" "maybe param" "maybe type" "temp"
            (657759 'move' call_tmp[657756](383946 call rank _mt[243] this[133648]))
            unknown call_tmp[657761] "expr temp" "maybe param" "maybe type" "temp"
            (657764 'move' call_tmp[657761](129398 call - call_tmp[657756] 1))
            (129463 'move' tmp[129451](129461 call chpl_compute_low_param_loop_bound 0 call_tmp[657761]))
            unknown tmp[129452] "maybe param" "temp"
            unknown call_tmp[657768] "expr temp" "maybe param" "maybe type" "temp"
            (657771 'move' call_tmp[657768](383958 call rank _mt[243] this[133648]))
            unknown call_tmp[657773] "expr temp" "maybe param" "maybe type" "temp"
            (657776 'move' call_tmp[657773](129468 call - call_tmp[657768] 1))
            (129473 'move' tmp[129452](129471 call chpl_compute_high_param_loop_bound 0 call_tmp[657773]))
            unknown tmp[129453] "maybe param" "temp"
            (129476 'move' tmp[129453] 1)
            ParamForLoop[129478]
            { i[129450] tmp[129451] tmp[129452] tmp[129453]
              {
                unknown call_tmp[657778] "expr temp" "maybe param" "maybe type" "temp"
                (657781 'move' call_tmp[657778](129404 call != i[129450] 0))
                unknown call_tmp[657783] "expr temp" "maybe param" "maybe type" "temp"
                (657786 'move' call_tmp[657783](129417 call _cond_test call_tmp[657778]))
                if call_tmp[657783]
                {
                  (129408 call += istr[129369] ", ")
                  (480214 'end of statement' istr[129369])
                  (129414 call += bstr[129391] ", ")
                  (480216 'end of statement' bstr[129391])
                }
                unknown call_tmp[657788] "expr temp" "maybe param" "maybe type" "temp"
                (657791 'move' call_tmp[657788](129426 call ranges[129192] i[129450]))
                unknown call_tmp[657793] "expr temp" "maybe param" "maybe type" "temp"
                (657796 'move' call_tmp[657793](129428 call _cast string[26] call_tmp[657788]))
                (129430 call += istr[129369] call_tmp[657793])
                (480218 'end of statement' istr[129369] i[129450])
                unknown call_tmp[657800] "expr temp" "maybe param" "maybe type" "temp"
                (657803 'move' call_tmp[657800](129435 call dom _mt[243] value[129197]))
                unknown call_tmp[657807] "expr temp" "maybe param" "maybe type" "temp"
                (657810 'move' call_tmp[657807](129443 call(129438 call (partial) dsiDim _mt[243] call_tmp[657800]) i[129450]))
                unknown call_tmp[657812] "expr temp" "maybe param" "maybe type" "temp"
                (657815 'move' call_tmp[657812](129445 call _cast string[26] call_tmp[657807]))
                (129447 call += bstr[129391] call_tmp[657812])
                (480221 'end of statement' bstr[129391] i[129450])
              }
            }
            label _unused_continueLabel[129455]
            label _breakLabel[129454]
          }
          unknown dimstr[129504] "dead at end of block" "insert auto destroy"
          (543093 'init var' dimstr[129504] "")
          (129507 'end of statement')
          {
            unknown i[129624] "dead at end of block" "insert auto destroy"
            (543095 'init var' i[129624] 0)
            (480224 'end of statement')
            unknown tmp[129625] "maybe param" "temp"
            unknown call_tmp[657819] "expr temp" "maybe param" "maybe type" "temp"
            (657822 'move' call_tmp[657819](383962 call rank _mt[243] this[133648]))
            unknown call_tmp[657824] "expr temp" "maybe param" "maybe type" "temp"
            (657827 'move' call_tmp[657824](129511 call - call_tmp[657819] 1))
            (129637 'move' tmp[129625](129635 call chpl_compute_low_param_loop_bound 0 call_tmp[657824]))
            unknown tmp[129626] "maybe param" "temp"
            unknown call_tmp[657831] "expr temp" "maybe param" "maybe type" "temp"
            (657834 'move' call_tmp[657831](383975 call rank _mt[243] this[133648]))
            unknown call_tmp[657836] "expr temp" "maybe param" "maybe type" "temp"
            (657839 'move' call_tmp[657836](129642 call - call_tmp[657831] 1))
            (129647 'move' tmp[129626](129645 call chpl_compute_high_param_loop_bound 0 call_tmp[657836]))
            unknown tmp[129627] "maybe param" "temp"
            (129650 'move' tmp[129627] 1)
            ParamForLoop[129652]
            { i[129624] tmp[129625] tmp[129626] tmp[129627]
              {
                unknown call_tmp[657843] "expr temp" "maybe param" "maybe type" "temp"
                (657846 'move' call_tmp[657843](129516 call dom _mt[243] value[129197]))
                unknown call_tmp[657850] "expr temp" "maybe param" "maybe type" "temp"
                (657853 'move' call_tmp[657850](129524 call(129519 call (partial) dsiDim _mt[243] call_tmp[657843]) i[129624]))
                unknown call_tmp[657857] "expr temp" "maybe param" "maybe type" "temp"
                (657860 'move' call_tmp[657857](129531 call ranges[129192] i[129624]))
                unknown call_tmp[657862] "expr temp" "maybe param" "maybe type" "temp"
                (657865 'move' call_tmp[657862](129533 call(129525 call (partial) boundsCheck _mt[243] call_tmp[657850]) call_tmp[657857]))
                unknown call_tmp[657867] "expr temp" "maybe param" "maybe type" "temp"
                (657870 'move' call_tmp[657867](129534 call ! call_tmp[657862]))
                unknown call_tmp[657872] "expr temp" "maybe param" "maybe type" "temp"
                (657875 'move' call_tmp[657872](129619 call _cond_test call_tmp[657867]))
                if call_tmp[657872]
                {
                  unknown call_tmp[657877] "expr temp" "maybe param" "maybe type" "temp"
                  (657880 'move' call_tmp[657877](129554 call == dimstr[129504] ""))
                  unknown call_tmp[657882] "expr temp" "maybe param" "maybe type" "temp"
                  (657885 'move' call_tmp[657882](129614 call _cond_test call_tmp[657877]))
                  if call_tmp[657882]
                  {
                    unknown call_tmp[657887] "expr temp" "maybe param" "maybe type" "temp"
                    (657890 'move' call_tmp[657887](129560 call _cast string[26] i[129624]))
                    unknown call_tmp[657892] "expr temp" "maybe param" "maybe type" "temp"
                    (657895 'move' call_tmp[657892](129562 call + "out of bounds in dimension " call_tmp[657887]))
                    unknown call_tmp[657897] "expr temp" "maybe param" "maybe type" "temp"
                    (657900 'move' call_tmp[657897](129581 call + call_tmp[657892] " because slice index "))
                    unknown call_tmp[657902] "expr temp" "maybe param" "maybe type" "temp"
                    (657905 'move' call_tmp[657902](129586 call ranges[129192] i[129624]))
                    unknown call_tmp[657907] "expr temp" "maybe param" "maybe type" "temp"
                    (657910 'move' call_tmp[657907](129588 call _cast string[26] call_tmp[657902]))
                    unknown call_tmp[657912] "expr temp" "maybe param" "maybe type" "temp"
                    (657915 'move' call_tmp[657912](129590 call + call_tmp[657897] call_tmp[657907]))
                    unknown call_tmp[657917] "expr temp" "maybe param" "maybe type" "temp"
                    (657920 'move' call_tmp[657917](129593 call + call_tmp[657912] " is not in "))
                    unknown call_tmp[657924] "expr temp" "maybe param" "maybe type" "temp"
                    (657927 'move' call_tmp[657924](129596 call dom _mt[243] value[129197]))
                    unknown call_tmp[657931] "expr temp" "maybe param" "maybe type" "temp"
                    (657934 'move' call_tmp[657931](129604 call(129599 call (partial) dsiDim _mt[243] call_tmp[657924]) i[129624]))
                    unknown call_tmp[657936] "expr temp" "maybe param" "maybe type" "temp"
                    (657939 'move' call_tmp[657936](129606 call _cast string[26] call_tmp[657931]))
                    unknown call_tmp[657941] "expr temp" "maybe param" "maybe type" "temp"
                    (657944 'move' call_tmp[657941](129608 call + call_tmp[657917] call_tmp[657936]))
                    (129610 call = dimstr[129504] call_tmp[657941])
                    (480225 'end of statement' dimstr[129504] i[129624] i[129624] i[129624])
                  }
                }
              }
            }
            label _unused_continueLabel[129629]
            label _breakLabel[129628]
          }
          (129688 call halt "array slice out of bounds\n" "note: slice index was (" istr[129369] ") " "but array bounds are (" bstr[129391] ")\n" "note: " dimstr[129504])
          (480230 'end of statement' istr[129369] bstr[129391] dimstr[129504])
        }
      }
    }
    (517958 return _void[55])
  }
  where {
    (129202 call chpl__isTupleOfRanges ranges[129192])
  }
  function _array[133594](?).this[129722](arg _mt[133654]:_MT[238], ref arg this[133652]:_array[133594](?), arg i[129719] :
  unknown call_tmp[657948] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[517962] "RVV" "temp"
    unknown call_tmp[657976] "maybe param" "maybe type" "temp"
    (657979 'move' call_tmp[657976](383986 call _value _mt[243] this[133652]))
    const value[129725] "dead at end of block" "const" "insert auto destroy"
    (543097 'init var' value[129725] call_tmp[657976])
    (129728 'end of statement')
    unknown call_tmp[657981] "expr temp" "maybe param" "maybe type" "temp"
    (657984 'move' call_tmp[657981](129738 call _cond_test 1))
    if call_tmp[657981]
    {
      (129736 call(383993 call (partial) checkAccess _mt[243] this[133652]) i[129719](value = value[129725]))
      (480234 'end of statement' value[129725])
    }
    unknown tmp[425483] "maybe param" "temp"
    (425494 'move' tmp[425483](129746 call isRectangularArr this[133652]))
    unknown call_tmp[657988] "expr temp" "maybe param" "maybe type" "temp"
    (657991 'move' call_tmp[657988](425496 call _cond_invalid tmp[425483]))
    if call_tmp[657988]
    {
      (425499 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566205] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566206] "maybe param" "temp"
    unknown call_tmp[657993] "expr temp" "maybe param" "maybe type" "temp"
    (657996 'move' call_tmp[657993](425484 call isTrue tmp[425483]))
    (566211 'move' tmp[566206](566209 call _cond_test call_tmp[657993]))
    if tmp[566206]
    {
      (566216 'move' tmp[566205](566213 '_paramFoldLogical' tmp[566206] 1))
    }
    {
      unknown tmp[566218] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657998] "expr temp" "maybe param" "maybe type" "temp"
      (658001 'move' call_tmp[657998](129750 call isSparseArr this[133652]))
      (566220 'move' tmp[566218](425488 call isTrue call_tmp[657998]))
      (566225 'move' tmp[566205](566222 '_paramFoldLogical' tmp[566206] tmp[566218]))
    }
    unknown call_tmp[658003] "expr temp" "maybe param" "maybe type" "temp"
    (658006 'move' call_tmp[658003](129774 call _cond_test tmp[566205]))
    if call_tmp[658003]
    {
      unknown call_tmp[658010] "expr temp" "maybe param" "maybe type" "temp"
      (658013 'move' call_tmp[658010](129759 call(129754 call (partial) dsiAccess _mt[243] value[129725]) i[129719]))
      (517967 'move' ret[517962](517966 'addr of' call_tmp[658010]))
      gotoReturn _end_this[517960] _end_this[517960]
      (480237 'end of statement' value[129725])
    }
    {
      unknown call_tmp[658017] "expr temp" "maybe param" "maybe type" "temp"
      (658020 'move' call_tmp[658017](129769 call i[129719] 0))
      unknown call_tmp[658022] "expr temp" "maybe param" "maybe type" "temp"
      (658025 'move' call_tmp[658022](129771 call(129763 call (partial) dsiAccess _mt[243] value[129725]) call_tmp[658017]))
      (517972 'move' ret[517962](517971 'addr of' call_tmp[658022]))
      gotoReturn _end_this[517960] _end_this[517960]
      (480239 'end of statement' value[129725])
    }
    label _end_this[517960]
    (517964 return ret[517962])
  }
  function _array[133594](?).this[129797](arg _mt[133658]:_MT[238], const arg this[133656]:_array[133594](?), arg i[129794] :
  unknown call_tmp[658029] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517978] "RVV" "temp"
    unknown call_tmp[658057] "maybe param" "maybe type" "temp"
    (658060 'move' call_tmp[658057](384007 call _value _mt[243] this[133656]))
    const value[129807] "dead at end of block" "const" "insert auto destroy"
    (543099 'init var' value[129807] call_tmp[658057])
    (129810 'end of statement')
    unknown call_tmp[658062] "expr temp" "maybe param" "maybe type" "temp"
    (658065 'move' call_tmp[658062](129820 call _cond_test 1))
    if call_tmp[658062]
    {
      (129818 call(384012 call (partial) checkAccess _mt[243] this[133656]) i[129794](value = value[129807]))
      (480241 'end of statement' value[129807])
    }
    unknown tmp[425504] "maybe param" "temp"
    (425515 'move' tmp[425504](129828 call isRectangularArr this[133656]))
    unknown call_tmp[658069] "expr temp" "maybe param" "maybe type" "temp"
    (658072 'move' call_tmp[658069](425517 call _cond_invalid tmp[425504]))
    if call_tmp[658069]
    {
      (425520 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566232] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566233] "maybe param" "temp"
    unknown call_tmp[658074] "expr temp" "maybe param" "maybe type" "temp"
    (658077 'move' call_tmp[658074](425505 call isTrue tmp[425504]))
    (566238 'move' tmp[566233](566236 call _cond_test call_tmp[658074]))
    if tmp[566233]
    {
      (566243 'move' tmp[566232](566240 '_paramFoldLogical' tmp[566233] 1))
    }
    {
      unknown tmp[566245] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658079] "expr temp" "maybe param" "maybe type" "temp"
      (658082 'move' call_tmp[658079](129832 call isSparseArr this[133656]))
      (566247 'move' tmp[566245](425509 call isTrue call_tmp[658079]))
      (566252 'move' tmp[566232](566249 '_paramFoldLogical' tmp[566233] tmp[566245]))
    }
    unknown call_tmp[658084] "expr temp" "maybe param" "maybe type" "temp"
    (658087 'move' call_tmp[658084](129856 call _cond_test tmp[566232]))
    if call_tmp[658084]
    {
      unknown call_tmp[658091] "expr temp" "maybe param" "maybe type" "temp"
      (658094 'move' call_tmp[658091](129841 call(129836 call (partial) dsiAccess _mt[243] value[129807]) i[129794]))
      (517983 'move' ret[517978](517982 'deref' call_tmp[658091]))
      gotoReturn _end_this[517976] _end_this[517976]
      (480244 'end of statement' value[129807])
    }
    {
      unknown call_tmp[658098] "expr temp" "maybe param" "maybe type" "temp"
      (658101 'move' call_tmp[658098](129851 call i[129794] 0))
      unknown call_tmp[658103] "expr temp" "maybe param" "maybe type" "temp"
      (658106 'move' call_tmp[658103](129853 call(129845 call (partial) dsiAccess _mt[243] value[129807]) call_tmp[658098]))
      (517988 'move' ret[517978](517987 'deref' call_tmp[658103]))
      gotoReturn _end_this[517976] _end_this[517976]
      (480246 'end of statement' value[129807])
    }
    label _end_this[517976]
    (517980 return ret[517978])
  }
  where {
    unknown call_tmp[658110] "expr temp" "maybe param" "maybe type" "temp"
    (658113 'move' call_tmp[658110](359877 call _value _mt[243] this[133656]))
    unknown call_tmp[658117] "expr temp" "maybe param" "maybe type" "temp"
    (658120 'move' call_tmp[658117](129801 call eltType _mt[243] call_tmp[658110]))
    (129805 call shouldReturnRvalueByValue call_tmp[658117])
  }
  function _array[133594](?).this[129880](arg _mt[133662]:_MT[238], const arg this[133660]:_array[133594](?), arg i[129877] :
  unknown call_tmp[658124] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517994] "RVV" "temp"
    unknown call_tmp[658152] "maybe param" "maybe type" "temp"
    (658155 'move' call_tmp[658152](384026 call _value _mt[243] this[133660]))
    const value[129890] "dead at end of block" "const" "insert auto destroy"
    (543101 'init var' value[129890] call_tmp[658152])
    (129893 'end of statement')
    unknown call_tmp[658157] "expr temp" "maybe param" "maybe type" "temp"
    (658160 'move' call_tmp[658157](129903 call _cond_test 1))
    if call_tmp[658157]
    {
      (129901 call(384031 call (partial) checkAccess _mt[243] this[133660]) i[129877](value = value[129890]))
      (480248 'end of statement' value[129890])
    }
    unknown tmp[425525] "maybe param" "temp"
    (425536 'move' tmp[425525](129911 call isRectangularArr this[133660]))
    unknown call_tmp[658164] "expr temp" "maybe param" "maybe type" "temp"
    (658167 'move' call_tmp[658164](425538 call _cond_invalid tmp[425525]))
    if call_tmp[658164]
    {
      (425541 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566259] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566260] "maybe param" "temp"
    unknown call_tmp[658169] "expr temp" "maybe param" "maybe type" "temp"
    (658172 'move' call_tmp[658169](425526 call isTrue tmp[425525]))
    (566265 'move' tmp[566260](566263 call _cond_test call_tmp[658169]))
    if tmp[566260]
    {
      (566270 'move' tmp[566259](566267 '_paramFoldLogical' tmp[566260] 1))
    }
    {
      unknown tmp[566272] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658174] "expr temp" "maybe param" "maybe type" "temp"
      (658177 'move' call_tmp[658174](129915 call isSparseArr this[133660]))
      (566274 'move' tmp[566272](425530 call isTrue call_tmp[658174]))
      (566279 'move' tmp[566259](566276 '_paramFoldLogical' tmp[566260] tmp[566272]))
    }
    unknown call_tmp[658179] "expr temp" "maybe param" "maybe type" "temp"
    (658182 'move' call_tmp[658179](129939 call _cond_test tmp[566259]))
    if call_tmp[658179]
    {
      unknown call_tmp[658186] "expr temp" "maybe param" "maybe type" "temp"
      (658189 'move' call_tmp[658186](129924 call(129919 call (partial) dsiAccess _mt[243] value[129890]) i[129877]))
      (517999 'move' ret[517994](517998 'addr of' call_tmp[658186]))
      gotoReturn _end_this[517992] _end_this[517992]
      (480251 'end of statement' value[129890])
    }
    {
      unknown call_tmp[658193] "expr temp" "maybe param" "maybe type" "temp"
      (658196 'move' call_tmp[658193](129934 call i[129877] 0))
      unknown call_tmp[658198] "expr temp" "maybe param" "maybe type" "temp"
      (658201 'move' call_tmp[658198](129936 call(129928 call (partial) dsiAccess _mt[243] value[129890]) call_tmp[658193]))
      (518004 'move' ret[517994](518003 'addr of' call_tmp[658198]))
      gotoReturn _end_this[517992] _end_this[517992]
      (480253 'end of statement' value[129890])
    }
    label _end_this[517992]
    (517996 return ret[517994])
  }
  where {
    unknown call_tmp[658205] "expr temp" "maybe param" "maybe type" "temp"
    (658208 'move' call_tmp[658205](359887 call _value _mt[243] this[133660]))
    unknown call_tmp[658212] "expr temp" "maybe param" "maybe type" "temp"
    (658215 'move' call_tmp[658212](129884 call eltType _mt[243] call_tmp[658205]))
    (129888 call shouldReturnRvalueByConstRef call_tmp[658212])
  }
  function _array[133594](?).this[129962](arg _mt[133666]:_MT[238], ref arg this[133664]:_array[133594](?), arg i[129958] ... :
  unknown call_tmp[658219] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[518010] "RVV" "temp"
    unknown call_tmp[658235] "expr temp" "maybe param" "maybe type" "temp"
    (658238 'move' call_tmp[658235](129967 call this[133664] i[129958]))
    (518015 'move' ret[518010](518014 'addr of' call_tmp[658235]))
    (518012 return ret[518010])
  }
  function _array[133594](?).this[129987](arg _mt[133670]:_MT[238], const arg this[133668]:_array[133594](?), arg i[129983] ... :
  unknown call_tmp[658242] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518019] "RVV" "temp"
    unknown call_tmp[658258] "expr temp" "maybe param" "maybe type" "temp"
    (658261 'move' call_tmp[658258](129999 call this[133668] i[129983]))
    (518024 'move' ret[518019](518023 'deref' call_tmp[658258]))
    (518021 return ret[518019])
  }
  where {
    unknown call_tmp[658265] "expr temp" "maybe param" "maybe type" "temp"
    (658268 'move' call_tmp[658265](359901 call _value _mt[243] this[133668]))
    unknown call_tmp[658272] "expr temp" "maybe param" "maybe type" "temp"
    (658275 'move' call_tmp[658272](129991 call eltType _mt[243] call_tmp[658265]))
    (129995 call shouldReturnRvalueByValue call_tmp[658272])
  }
  function _array[133594](?).this[130020](arg _mt[133674]:_MT[238], const arg this[133672]:_array[133594](?), arg i[130016] ... :
  unknown call_tmp[658279] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518028] "RVV" "temp"
    unknown call_tmp[658295] "expr temp" "maybe param" "maybe type" "temp"
    (658298 'move' call_tmp[658295](130032 call this[133672] i[130016]))
    (518033 'move' ret[518028](518032 'addr of' call_tmp[658295]))
    (518030 return ret[518028])
  }
  where {
    unknown call_tmp[658302] "expr temp" "maybe param" "maybe type" "temp"
    (658305 'move' call_tmp[658302](359909 call _value _mt[243] this[133672]))
    unknown call_tmp[658309] "expr temp" "maybe param" "maybe type" "temp"
    (658312 'move' call_tmp[658309](130024 call eltType _mt[243] call_tmp[658302]))
    (130028 call shouldReturnRvalueByConstRef call_tmp[658309])
  }
  function _array[133594](?).localAccess[130054](arg _mt[133678]:_MT[238], ref arg this[133676]:_array[133594](?), arg i[130051] :
  unknown call_tmp[658316] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[518037] "RVV" "temp"
    unknown call_tmp[658344] "maybe param" "maybe type" "temp"
    (658347 'move' call_tmp[658344](384063 call _value _mt[243] this[133676]))
    const value[130057] "dead at end of block" "const" "insert auto destroy"
    (543103 'init var' value[130057] call_tmp[658344])
    (130060 'end of statement')
    unknown call_tmp[658349] "expr temp" "maybe param" "maybe type" "temp"
    (658352 'move' call_tmp[658349](130070 call _cond_test 1))
    if call_tmp[658349]
    {
      (130068 call(384068 call (partial) checkAccess _mt[243] this[133676]) i[130051](value = value[130057]))
      (480258 'end of statement' value[130057])
    }
    unknown tmp[425546] "maybe param" "temp"
    (425557 'move' tmp[425546](130078 call isRectangularArr this[133676]))
    unknown call_tmp[658356] "expr temp" "maybe param" "maybe type" "temp"
    (658359 'move' call_tmp[658356](425559 call _cond_invalid tmp[425546]))
    if call_tmp[658356]
    {
      (425562 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566286] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566287] "maybe param" "temp"
    unknown call_tmp[658361] "expr temp" "maybe param" "maybe type" "temp"
    (658364 'move' call_tmp[658361](425547 call isTrue tmp[425546]))
    (566292 'move' tmp[566287](566290 call _cond_test call_tmp[658361]))
    if tmp[566287]
    {
      (566297 'move' tmp[566286](566294 '_paramFoldLogical' tmp[566287] 1))
    }
    {
      unknown tmp[566299] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658366] "expr temp" "maybe param" "maybe type" "temp"
      (658369 'move' call_tmp[658366](130082 call isSparseArr this[133676]))
      (566301 'move' tmp[566299](425551 call isTrue call_tmp[658366]))
      (566306 'move' tmp[566286](566303 '_paramFoldLogical' tmp[566287] tmp[566299]))
    }
    unknown call_tmp[658371] "expr temp" "maybe param" "maybe type" "temp"
    (658374 'move' call_tmp[658371](130108 call _cond_test tmp[566286]))
    if call_tmp[658371]
    {
      unknown call_tmp[658378] "expr temp" "maybe param" "maybe type" "temp"
      (658381 'move' call_tmp[658378](130093 call(130088 call (partial) dsiLocalAccess _mt[243] value[130057]) i[130051]))
      (518042 'move' ret[518037](518041 'addr of' call_tmp[658378]))
      gotoReturn _end_localAccess[518035] _end_localAccess[518035]
      (480261 'end of statement' value[130057])
    }
    {
      unknown call_tmp[658385] "expr temp" "maybe param" "maybe type" "temp"
      (658388 'move' call_tmp[658385](130103 call i[130051] 0))
      unknown call_tmp[658390] "expr temp" "maybe param" "maybe type" "temp"
      (658393 'move' call_tmp[658390](130105 call(130097 call (partial) dsiLocalAccess _mt[243] value[130057]) call_tmp[658385]))
      (518047 'move' ret[518037](518046 'addr of' call_tmp[658390]))
      gotoReturn _end_localAccess[518035] _end_localAccess[518035]
      (480263 'end of statement' value[130057])
    }
    label _end_localAccess[518035]
    (518039 return ret[518037])
  }
  function _array[133594](?).localAccess[130131](arg _mt[133682]:_MT[238], const arg this[133680]:_array[133594](?), arg i[130128] :
  unknown call_tmp[658397] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518053] "RVV" "temp"
    unknown call_tmp[658425] "maybe param" "maybe type" "temp"
    (658428 'move' call_tmp[658425](384082 call _value _mt[243] this[133680]))
    const value[130141] "dead at end of block" "const" "insert auto destroy"
    (543105 'init var' value[130141] call_tmp[658425])
    (130144 'end of statement')
    unknown call_tmp[658430] "expr temp" "maybe param" "maybe type" "temp"
    (658433 'move' call_tmp[658430](130154 call _cond_test 1))
    if call_tmp[658430]
    {
      (130152 call(384087 call (partial) checkAccess _mt[243] this[133680]) i[130128](value = value[130141]))
      (480265 'end of statement' value[130141])
    }
    unknown tmp[425567] "maybe param" "temp"
    (425578 'move' tmp[425567](130162 call isRectangularArr this[133680]))
    unknown call_tmp[658437] "expr temp" "maybe param" "maybe type" "temp"
    (658440 'move' call_tmp[658437](425580 call _cond_invalid tmp[425567]))
    if call_tmp[658437]
    {
      (425583 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566313] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566314] "maybe param" "temp"
    unknown call_tmp[658442] "expr temp" "maybe param" "maybe type" "temp"
    (658445 'move' call_tmp[658442](425568 call isTrue tmp[425567]))
    (566319 'move' tmp[566314](566317 call _cond_test call_tmp[658442]))
    if tmp[566314]
    {
      (566324 'move' tmp[566313](566321 '_paramFoldLogical' tmp[566314] 1))
    }
    {
      unknown tmp[566326] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658447] "expr temp" "maybe param" "maybe type" "temp"
      (658450 'move' call_tmp[658447](130166 call isSparseArr this[133680]))
      (566328 'move' tmp[566326](425572 call isTrue call_tmp[658447]))
      (566333 'move' tmp[566313](566330 '_paramFoldLogical' tmp[566314] tmp[566326]))
    }
    unknown call_tmp[658452] "expr temp" "maybe param" "maybe type" "temp"
    (658455 'move' call_tmp[658452](130190 call _cond_test tmp[566313]))
    if call_tmp[658452]
    {
      unknown call_tmp[658459] "expr temp" "maybe param" "maybe type" "temp"
      (658462 'move' call_tmp[658459](130175 call(130170 call (partial) dsiLocalAccess _mt[243] value[130141]) i[130128]))
      (518058 'move' ret[518053](518057 'deref' call_tmp[658459]))
      gotoReturn _end_localAccess[518051] _end_localAccess[518051]
      (480268 'end of statement' value[130141])
    }
    {
      unknown call_tmp[658466] "expr temp" "maybe param" "maybe type" "temp"
      (658469 'move' call_tmp[658466](130185 call i[130128] 0))
      unknown call_tmp[658471] "expr temp" "maybe param" "maybe type" "temp"
      (658474 'move' call_tmp[658471](130187 call(130179 call (partial) dsiLocalAccess _mt[243] value[130141]) call_tmp[658466]))
      (518063 'move' ret[518053](518062 'deref' call_tmp[658471]))
      gotoReturn _end_localAccess[518051] _end_localAccess[518051]
      (480270 'end of statement' value[130141])
    }
    label _end_localAccess[518051]
    (518055 return ret[518053])
  }
  where {
    unknown call_tmp[658478] "expr temp" "maybe param" "maybe type" "temp"
    (658481 'move' call_tmp[658478](359923 call _value _mt[243] this[133680]))
    unknown call_tmp[658485] "expr temp" "maybe param" "maybe type" "temp"
    (658488 'move' call_tmp[658485](130135 call eltType _mt[243] call_tmp[658478]))
    (130139 call shouldReturnRvalueByValue call_tmp[658485])
  }
  function _array[133594](?).localAccess[130214](arg _mt[133686]:_MT[238], const arg this[133684]:_array[133594](?), arg i[130211] :
  unknown call_tmp[658492] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518069] "RVV" "temp"
    unknown call_tmp[658520] "maybe param" "maybe type" "temp"
    (658523 'move' call_tmp[658520](384101 call _value _mt[243] this[133684]))
    const value[130224] "dead at end of block" "const" "insert auto destroy"
    (543107 'init var' value[130224] call_tmp[658520])
    (130227 'end of statement')
    unknown call_tmp[658525] "expr temp" "maybe param" "maybe type" "temp"
    (658528 'move' call_tmp[658525](130237 call _cond_test 1))
    if call_tmp[658525]
    {
      (130235 call(384106 call (partial) checkAccess _mt[243] this[133684]) i[130211](value = value[130224]))
      (480272 'end of statement' value[130224])
    }
    unknown tmp[425588] "maybe param" "temp"
    (425599 'move' tmp[425588](130245 call isRectangularArr this[133684]))
    unknown call_tmp[658532] "expr temp" "maybe param" "maybe type" "temp"
    (658535 'move' call_tmp[658532](425601 call _cond_invalid tmp[425588]))
    if call_tmp[658532]
    {
      (425604 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566340] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566341] "maybe param" "temp"
    unknown call_tmp[658537] "expr temp" "maybe param" "maybe type" "temp"
    (658540 'move' call_tmp[658537](425589 call isTrue tmp[425588]))
    (566346 'move' tmp[566341](566344 call _cond_test call_tmp[658537]))
    if tmp[566341]
    {
      (566351 'move' tmp[566340](566348 '_paramFoldLogical' tmp[566341] 1))
    }
    {
      unknown tmp[566353] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658542] "expr temp" "maybe param" "maybe type" "temp"
      (658545 'move' call_tmp[658542](130249 call isSparseArr this[133684]))
      (566355 'move' tmp[566353](425593 call isTrue call_tmp[658542]))
      (566360 'move' tmp[566340](566357 '_paramFoldLogical' tmp[566341] tmp[566353]))
    }
    unknown call_tmp[658547] "expr temp" "maybe param" "maybe type" "temp"
    (658550 'move' call_tmp[658547](130273 call _cond_test tmp[566340]))
    if call_tmp[658547]
    {
      unknown call_tmp[658554] "expr temp" "maybe param" "maybe type" "temp"
      (658557 'move' call_tmp[658554](130258 call(130253 call (partial) dsiLocalAccess _mt[243] value[130224]) i[130211]))
      (518074 'move' ret[518069](518073 'addr of' call_tmp[658554]))
      gotoReturn _end_localAccess[518067] _end_localAccess[518067]
      (480275 'end of statement' value[130224])
    }
    {
      unknown call_tmp[658561] "expr temp" "maybe param" "maybe type" "temp"
      (658564 'move' call_tmp[658561](130268 call i[130211] 0))
      unknown call_tmp[658566] "expr temp" "maybe param" "maybe type" "temp"
      (658569 'move' call_tmp[658566](130270 call(130262 call (partial) dsiLocalAccess _mt[243] value[130224]) call_tmp[658561]))
      (518079 'move' ret[518069](518078 'addr of' call_tmp[658566]))
      gotoReturn _end_localAccess[518067] _end_localAccess[518067]
      (480277 'end of statement' value[130224])
    }
    label _end_localAccess[518067]
    (518071 return ret[518069])
  }
  where {
    unknown call_tmp[658573] "expr temp" "maybe param" "maybe type" "temp"
    (658576 'move' call_tmp[658573](359933 call _value _mt[243] this[133684]))
    unknown call_tmp[658580] "expr temp" "maybe param" "maybe type" "temp"
    (658583 'move' call_tmp[658580](130218 call eltType _mt[243] call_tmp[658573]))
    (130222 call shouldReturnRvalueByConstRef call_tmp[658580])
  }
  function _array[133594](?).localAccess[130296](arg _mt[133690]:_MT[238], ref arg this[133688]:_array[133594](?), arg i[130292] ... :
  unknown call_tmp[658587] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[518085] "RVV" "temp"
    unknown call_tmp[658605] "expr temp" "maybe param" "maybe type" "temp"
    (658608 'move' call_tmp[658605](130301 call(384122 call (partial) localAccess _mt[243] this[133688]) i[130292]))
    (518090 'move' ret[518085](518089 'addr of' call_tmp[658605]))
    (518087 return ret[518085])
  }
  function _array[133594](?).localAccess[130321](arg _mt[133694]:_MT[238], const arg this[133692]:_array[133594](?), arg i[130317] ... :
  unknown call_tmp[658612] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518094] "RVV" "temp"
    unknown call_tmp[658630] "expr temp" "maybe param" "maybe type" "temp"
    (658633 'move' call_tmp[658630](130333 call(384131 call (partial) localAccess _mt[243] this[133692]) i[130317]))
    (518099 'move' ret[518094](518098 'deref' call_tmp[658630]))
    (518096 return ret[518094])
  }
  where {
    unknown call_tmp[658637] "expr temp" "maybe param" "maybe type" "temp"
    (658640 'move' call_tmp[658637](359947 call _value _mt[243] this[133692]))
    unknown call_tmp[658644] "expr temp" "maybe param" "maybe type" "temp"
    (658647 'move' call_tmp[658644](130325 call eltType _mt[243] call_tmp[658637]))
    (130329 call shouldReturnRvalueByValue call_tmp[658644])
  }
  function _array[133594](?).localAccess[130354](arg _mt[133698]:_MT[238], const arg this[133696]:_array[133594](?), arg i[130350] ... :
  unknown call_tmp[658651] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518103] "RVV" "temp"
    unknown call_tmp[658669] "expr temp" "maybe param" "maybe type" "temp"
    (658672 'move' call_tmp[658669](130366 call(384140 call (partial) localAccess _mt[243] this[133696]) i[130350]))
    (518108 'move' ret[518103](518107 'addr of' call_tmp[658669]))
    (518105 return ret[518103])
  }
  where {
    unknown call_tmp[658676] "expr temp" "maybe param" "maybe type" "temp"
    (658679 'move' call_tmp[658676](359955 call _value _mt[243] this[133696]))
    unknown call_tmp[658683] "expr temp" "maybe param" "maybe type" "temp"
    (658686 'move' call_tmp[658683](130358 call eltType _mt[243] call_tmp[658676]))
    (130362 call shouldReturnRvalueByConstRef call_tmp[658683])
  }
  function _array[133594](?).this[130379](arg _mt[133702]:_MT[238], arg this[133700]:_array[133594](?), arg d[130376]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518112] "RVV" "temp"
    unknown call_tmp[658690] "expr temp" "maybe param" "maybe type" "temp"
    (658693 'move' call_tmp[658690](130382 call rank _mt[243] d[130376]))
    unknown call_tmp[658697] "expr temp" "maybe param" "maybe type" "temp"
    (658700 'move' call_tmp[658697](384146 call rank _mt[243] this[133700]))
    unknown call_tmp[658702] "expr temp" "maybe param" "maybe type" "temp"
    (658705 'move' call_tmp[658702](130386 call != call_tmp[658690] call_tmp[658697]))
    unknown call_tmp[658707] "expr temp" "maybe param" "maybe type" "temp"
    (658710 'move' call_tmp[658707](130409 call _cond_test call_tmp[658702]))
    if call_tmp[658707]
    {
      (130407 call compilerError "slicing an array with a domain of a different rank")
    }
    unknown call_tmp[658712] "expr temp" "maybe param" "maybe type" "temp"
    (658715 'move' call_tmp[658712](130422 call _cond_test 1))
    if call_tmp[658712]
    {
      unknown call_tmp[658721] "expr temp" "maybe param" "maybe type" "temp"
      (658724 'move' call_tmp[658721](384156 call _value _mt[243] this[133700]))
      (130420 call(384151 call (partial) checkSlice _mt[243] this[133700]) d[130376] call_tmp[658721])
    }
    const tmp[130471] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566367] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566368] "maybe param" "temp"
    unknown call_tmp[658728] "expr temp" "maybe param" "maybe type" "temp"
    (658731 'move' call_tmp[658728](359960 call _value _mt[243] this[133700]))
    unknown call_tmp[658735] "expr temp" "maybe param" "maybe type" "temp"
    (658738 'move' call_tmp[658735](130437 call(130433 call (partial) isSliceArrayView _mt[243] call_tmp[658728])))
    (566373 'move' tmp[566368](566371 call _cond_test call_tmp[658735]))
    if tmp[566368]
    {
      unknown tmp[566375] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658742] "expr temp" "maybe param" "maybe type" "temp"
      (658745 'move' call_tmp[658742](130439 call _value _mt[243] this[133700]))
      unknown call_tmp[658749] "expr temp" "maybe param" "maybe type" "temp"
      (658752 'move' call_tmp[658749](130442 call arr _mt[243] call_tmp[658742]))
      unknown call_tmp[658756] "expr temp" "maybe param" "maybe type" "temp"
      (658759 'move' call_tmp[658756](130446 call _value _mt[243] this[133700]))
      unknown call_tmp[658763] "expr temp" "maybe param" "maybe type" "temp"
      (658766 'move' call_tmp[658763](130451 call _ArrPid _mt[243] call_tmp[658756]))
      (566377 'move' tmp[566375](130455 call _build_tuple call_tmp[658749] call_tmp[658763]))
      (566382 'move' tmp[566367](566379 '_paramFoldLogical' tmp[566368] tmp[566375]))
    }
    {
      unknown tmp[566384] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658770] "expr temp" "maybe param" "maybe type" "temp"
      (658773 'move' call_tmp[658770](130458 call _value _mt[243] this[133700]))
      unknown call_tmp[658777] "expr temp" "maybe param" "maybe type" "temp"
      (658780 'move' call_tmp[658777](130462 call _pid _mt[243] this[133700]))
      (566386 'move' tmp[566384](130466 call _build_tuple call_tmp[658770] call_tmp[658777]))
      (566391 'move' tmp[566367](566388 '_paramFoldLogical' tmp[566368] tmp[566384]))
    }
    (543109 'init var' tmp[130471] tmp[566367])
    (130478 call _check_tuple_var_decl tmp[130471] 2)
    (480284 'end of statement')
    unknown call_tmp[658782] "maybe param" "maybe type" "temp"
    (658785 'move' call_tmp[658782](130472 call tmp[130471] 0))
    const arr[130427] "dead at end of block" "const" "insert auto destroy"
    (543111 'init var' arr[130427] call_tmp[658782])
    unknown call_tmp[658787] "maybe param" "maybe type" "temp"
    (658790 'move' call_tmp[658787](130475 call tmp[130471] 1))
    const arrpid[130429] "dead at end of block" "const" "insert auto destroy"
    (543113 'init var' arrpid[130429] call_tmp[658787])
    (130483 'end of statement')
    unknown call_tmp[658794] "expr temp" "maybe param" "maybe type" "temp"
    (658797 'move' call_tmp[658794](130489 call eltType _mt[243] this[133700]))
    unknown call_tmp[658801] "expr temp" "maybe param" "maybe type" "temp"
    (658804 'move' call_tmp[658801](130495 call _pid _mt[243] d[130376]))
    unknown call_tmp[658808] "expr temp" "maybe param" "maybe type" "temp"
    (658811 'move' call_tmp[658808](130500 call _instance _mt[243] d[130376]))
    unknown call_tmp[658813] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658816 'move' call_tmp[658813](748069 'new' ArrayViewSliceArr[384160](?)(eltType = call_tmp[658794])(_DomPid = call_tmp[658801])(dom = call_tmp[658808])(_ArrPid = arrpid[130429])(_ArrInstance = arr[130427])(_chpl_manager = unmanaged[220](?))))
    unknown a[130509] "dead at end of block" "insert auto destroy"
    (543115 'init var' a[130509] call_tmp[658813])
    (130512 'end of statement' arrpid[130429] arr[130427])
    unknown call_tmp[658820] "expr temp" "maybe param" "maybe type" "temp"
    (658823 'move' call_tmp[658820](130514 call _value _mt[243] d[130376]))
    (130526 call(130517 call (partial) add_arr _mt[243] call_tmp[658820]) a[130509](locking = 1)(addToList = 0))
    (480287 'end of statement' a[130509])
    unknown call_tmp[658827] "expr temp" "maybe param" "maybe type" "temp"
    (658830 'move' call_tmp[658827](130531 call _newArray a[130509]))
    (518117 'move' ret[518112](518116 'deref' call_tmp[658827]))
    gotoReturn _end_this[518110] _end_this[518110]
    (480289 'end of statement' a[130509])
    label _end_this[518110]
    (518114 return ret[518112])
  }
  function _array[133594](?).this[130542](arg _mt[133706]:_MT[238], arg this[133704]:_array[133594](?), arg ranges[130539]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518123] "RVV" "temp"
    unknown call_tmp[658834] "expr temp" "maybe param" "maybe type" "temp"
    (658837 'move' call_tmp[658834](130557 call _cond_test 1))
    if call_tmp[658834]
    {
      unknown call_tmp[658843] "expr temp" "maybe param" "maybe type" "temp"
      (658846 'move' call_tmp[658843](384179 call _value _mt[243] this[133704]))
      (130555 call(384174 call (partial) checkSlice _mt[243] this[133704])(130551 'expand_tuple' ranges[130539])(value = call_tmp[658843]))
    }
    unknown call_tmp[658850] "maybe param" "maybe type" "temp"
    (658853 'move' call_tmp[658850](130567 call(384183 call (partial) _dom _mt[243] this[133704])(130565 'expand_tuple' ranges[130539])))
    unknown d[130568] "dead at end of block" "no auto destroy"
    (543117 'init var' d[130568] call_tmp[658850])
    (130571 'end of statement')
    unknown call_tmp[658857] "expr temp" "maybe param" "maybe type" "temp"
    (658860 'move' call_tmp[658857](130573 call _value _mt[243] d[130568]))
    unknown call_tmp[658864] "expr temp" "maybe param" "maybe type" "temp"
    (658867 'move' call_tmp[658864](130578 call _free_when_no_arrs _mt[243] call_tmp[658857]))
    (130582 call = call_tmp[658864] 1)
    (480292 'end of statement' d[130568])
    const tmp[130627] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566398] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566399] "maybe param" "temp"
    unknown call_tmp[658871] "expr temp" "maybe param" "maybe type" "temp"
    (658874 'move' call_tmp[658871](359973 call _value _mt[243] this[133704]))
    unknown call_tmp[658878] "expr temp" "maybe param" "maybe type" "temp"
    (658881 'move' call_tmp[658878](130595 call(130591 call (partial) isSliceArrayView _mt[243] call_tmp[658871])))
    (566404 'move' tmp[566399](566402 call _cond_test call_tmp[658878]))
    if tmp[566399]
    {
      unknown tmp[566406] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658885] "expr temp" "maybe param" "maybe type" "temp"
      (658888 'move' call_tmp[658885](130597 call _value _mt[243] this[133704]))
      unknown call_tmp[658892] "expr temp" "maybe param" "maybe type" "temp"
      (658895 'move' call_tmp[658892](130600 call arr _mt[243] call_tmp[658885]))
      unknown call_tmp[658899] "expr temp" "maybe param" "maybe type" "temp"
      (658902 'move' call_tmp[658899](130604 call _value _mt[243] this[133704]))
      unknown call_tmp[658906] "expr temp" "maybe param" "maybe type" "temp"
      (658909 'move' call_tmp[658906](130607 call _ArrPid _mt[243] call_tmp[658899]))
      (566408 'move' tmp[566406](130611 call _build_tuple call_tmp[658892] call_tmp[658906]))
      (566413 'move' tmp[566398](566410 '_paramFoldLogical' tmp[566399] tmp[566406]))
    }
    {
      unknown tmp[566415] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658913] "expr temp" "maybe param" "maybe type" "temp"
      (658916 'move' call_tmp[658913](130614 call _value _mt[243] this[133704]))
      unknown call_tmp[658920] "expr temp" "maybe param" "maybe type" "temp"
      (658923 'move' call_tmp[658920](130618 call _pid _mt[243] this[133704]))
      (566417 'move' tmp[566415](130622 call _build_tuple call_tmp[658913] call_tmp[658920]))
      (566422 'move' tmp[566398](566419 '_paramFoldLogical' tmp[566399] tmp[566415]))
    }
    (543119 'init var' tmp[130627] tmp[566398])
    (130634 call _check_tuple_var_decl tmp[130627] 2)
    (480294 'end of statement')
    unknown call_tmp[658925] "maybe param" "maybe type" "temp"
    (658928 'move' call_tmp[658925](130628 call tmp[130627] 0))
    const arr[130585] "dead at end of block" "const" "insert auto destroy"
    (543121 'init var' arr[130585] call_tmp[658925])
    unknown call_tmp[658930] "maybe param" "maybe type" "temp"
    (658933 'move' call_tmp[658930](130631 call tmp[130627] 1))
    const arrpid[130587] "dead at end of block" "const" "insert auto destroy"
    (543123 'init var' arrpid[130587] call_tmp[658930])
    (130639 'end of statement')
    unknown call_tmp[658937] "expr temp" "maybe param" "maybe type" "temp"
    (658940 'move' call_tmp[658937](130645 call eltType _mt[243] this[133704]))
    unknown call_tmp[658944] "expr temp" "maybe param" "maybe type" "temp"
    (658947 'move' call_tmp[658944](130651 call _pid _mt[243] d[130568]))
    unknown call_tmp[658951] "expr temp" "maybe param" "maybe type" "temp"
    (658954 'move' call_tmp[658951](130656 call _instance _mt[243] d[130568]))
    unknown call_tmp[658956] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658959 'move' call_tmp[658956](748070 'new' ArrayViewSliceArr[384160](?)(eltType = call_tmp[658937])(_DomPid = call_tmp[658944])(dom = call_tmp[658951])(_ArrPid = arrpid[130587])(_ArrInstance = arr[130585])(_chpl_manager = unmanaged[220](?))))
    unknown a[130665] "dead at end of block" "insert auto destroy"
    (543125 'init var' a[130665] call_tmp[658956])
    (130668 'end of statement' d[130568] d[130568] arrpid[130587] arr[130585])
    unknown call_tmp[658963] "expr temp" "maybe param" "maybe type" "temp"
    (658966 'move' call_tmp[658963](130670 call _value _mt[243] d[130568]))
    (130682 call(130673 call (partial) add_arr _mt[243] call_tmp[658963]) a[130665](locking = 0)(addToList = 0))
    (480299 'end of statement' d[130568] a[130665])
    unknown call_tmp[658970] "expr temp" "maybe param" "maybe type" "temp"
    (658973 'move' call_tmp[658970](130687 call _newArray a[130665]))
    (518128 'move' ret[518123](518127 'deref' call_tmp[658970]))
    gotoReturn _end_this[518121] _end_this[518121]
    (480302 'end of statement' a[130665])
    label _end_this[518121]
    (518125 return ret[518123])
  }
  where {
    (130547 call chpl__isTupleOfRanges ranges[130539])
  }
  function _array[133594](?).this[130699](arg _mt[133710]:_MT[238], arg this[133708]:_array[133594](?), arg args[130696]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518134] "RVV" "temp"
    unknown call_tmp[658977] "expr temp" "maybe param" "maybe type" "temp"
    (658980 'move' call_tmp[658977](130718 call _cond_test 1))
    if call_tmp[658977]
    {
      (130716 call(384201 call (partial) checkRankChange _mt[243] this[133708]) args[130696])
    }
    unknown call_tmp[658986] "maybe param" "maybe type" "temp"
    (658989 'move' call_tmp[658986](130731 call(130725 call (partial) _dom _mt[243] this[133708])(130729 'expand_tuple' args[130696])))
    const rcdom[130732] "dead at end of block" "const" "insert auto destroy"
    (543127 'init var' rcdom[130732] call_tmp[658986])
    (130735 'end of statement')
    unknown call_tmp[658993] "expr temp" "maybe param" "maybe type" "temp"
    (658996 'move' call_tmp[658993](130742 call _value _mt[243] this[133708]))
    unknown call_tmp[659000] "expr temp" "maybe param" "maybe type" "temp"
    (659003 'move' call_tmp[659000](130746 call _pid _mt[243] this[133708]))
    unknown call_tmp[659005] "maybe param" "maybe type" "temp"
    (659008 'move' call_tmp[659005](130750 call _build_tuple call_tmp[658993] call_tmp[659000]))
    const tmp[130752] "dead at end of block" "const" "insert auto destroy" "temp"
    (543129 'init var' tmp[130752] call_tmp[659005])
    (130759 call _check_tuple_var_decl tmp[130752] 2)
    (480305 'end of statement')
    unknown call_tmp[659010] "maybe param" "maybe type" "temp"
    (659013 'move' call_tmp[659010](130753 call tmp[130752] 0))
    const arr[130736] "dead at end of block" "const" "insert auto destroy"
    (543131 'init var' arr[130736] call_tmp[659010])
    unknown call_tmp[659015] "maybe param" "maybe type" "temp"
    (659018 'move' call_tmp[659015](130756 call tmp[130752] 1))
    const arrpid[130738] "dead at end of block" "const" "insert auto destroy"
    (543133 'init var' arrpid[130738] call_tmp[659015])
    (130764 'end of statement')
    unknown call_tmp[659022] "expr temp" "maybe param" "maybe type" "temp"
    (659025 'move' call_tmp[659022](130770 call eltType _mt[243] this[133708]))
    unknown call_tmp[659029] "expr temp" "maybe param" "maybe type" "temp"
    (659032 'move' call_tmp[659029](130776 call _pid _mt[243] rcdom[130732]))
    unknown call_tmp[659036] "expr temp" "maybe param" "maybe type" "temp"
    (659039 'move' call_tmp[659036](130781 call _instance _mt[243] rcdom[130732]))
    unknown call_tmp[659043] "expr temp" "maybe param" "maybe type" "temp"
    (659046 'move' call_tmp[659043](130790 call _value _mt[243] rcdom[130732]))
    unknown call_tmp[659050] "expr temp" "maybe param" "maybe type" "temp"
    (659053 'move' call_tmp[659050](130793 call collapsedDim _mt[243] call_tmp[659043]))
    unknown call_tmp[659057] "expr temp" "maybe param" "maybe type" "temp"
    (659060 'move' call_tmp[659057](130798 call _value _mt[243] rcdom[130732]))
    unknown call_tmp[659064] "expr temp" "maybe param" "maybe type" "temp"
    (659067 'move' call_tmp[659064](130801 call idx _mt[243] call_tmp[659057]))
    unknown call_tmp[659069] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659072 'move' call_tmp[659069](748071 'new' ArrayViewRankChangeArr[384207](?)(eltType = call_tmp[659022])(_DomPid = call_tmp[659029])(dom = call_tmp[659036])(_ArrPid = arrpid[130738])(_ArrInstance = arr[130736])(collapsedDim = call_tmp[659050])(idx = call_tmp[659064])(_chpl_manager = unmanaged[220](?))))
    unknown a[130806] "dead at end of block" "insert auto destroy"
    (543135 'init var' a[130806] call_tmp[659069])
    (130809 'end of statement' rcdom[130732] rcdom[130732] arrpid[130738] arr[130736] rcdom[130732] rcdom[130732])
    unknown call_tmp[659076] "expr temp" "maybe param" "maybe type" "temp"
    (659079 'move' call_tmp[659076](130811 call _value _mt[243] rcdom[130732]))
    (130821 call(130814 call (partial) add_arr _mt[243] call_tmp[659076]) a[130806](locking = 0))
    (480312 'end of statement' rcdom[130732] a[130806])
    unknown call_tmp[659083] "expr temp" "maybe param" "maybe type" "temp"
    (659086 'move' call_tmp[659083](130826 call _newArray a[130806]))
    (518139 'move' ret[518134](518138 'deref' call_tmp[659083]))
    gotoReturn _end_this[518132] _end_this[518132]
    (480315 'end of statement' a[130806])
    label _end_this[518132]
    (518136 return ret[518134])
  }
  where {
    unknown call_tmp[659090] "expr temp" "maybe param" "maybe type" "temp"
    (659093 'move' call_tmp[659090](359985 call _value _mt[243] this[133708]))
    unknown call_tmp[659097] "expr temp" "maybe param" "maybe type" "temp"
    (659100 'move' call_tmp[659097](130705 call dom _mt[243] call_tmp[659090]))
    unknown call_tmp[659104] "expr temp" "maybe param" "maybe type" "temp"
    (659107 'move' call_tmp[659104](130708 call idxType _mt[243] call_tmp[659097]))
    (130711 call _validRankChangeArgs args[130696] call_tmp[659104])
  }
  function _array[133594](?).checkRankChange[130836](arg _mt[133714]:_MT[238], arg this[133712]:_array[133594](?), arg args[130834]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[130917] "dead at end of block" "insert auto destroy"
      (543137 'init var' i[130917] 0)
      (480317 'end of statement')
      unknown tmp[130918] "maybe param" "temp"
      unknown call_tmp[659111] "expr temp" "maybe param" "maybe type" "temp"
      (659114 'move' call_tmp[659111](130840 call size _mt[243] args[130834]))
      unknown call_tmp[659116] "expr temp" "maybe param" "maybe type" "temp"
      (659119 'move' call_tmp[659116](130844 call - call_tmp[659111] 1))
      (130930 'move' tmp[130918](130928 call chpl_compute_low_param_loop_bound 0 call_tmp[659116]))
      unknown tmp[130919] "maybe param" "temp"
      unknown call_tmp[659123] "expr temp" "maybe param" "maybe type" "temp"
      (659126 'move' call_tmp[659123](130937 call size _mt[243] args[130834]))
      unknown call_tmp[659128] "expr temp" "maybe param" "maybe type" "temp"
      (659131 'move' call_tmp[659128](130935 call - call_tmp[659123] 1))
      (130943 'move' tmp[130919](130941 call chpl_compute_high_param_loop_bound 0 call_tmp[659128]))
      unknown tmp[130920] "maybe param" "temp"
      (130946 'move' tmp[130920] 1)
      ParamForLoop[130948]
      { i[130917] tmp[130918] tmp[130919] tmp[130920]
        unknown call_tmp[659135] "expr temp" "maybe param" "maybe type" "temp"
        (659138 'move' call_tmp[659135](359999 call _value _mt[243] this[133712]))
        unknown call_tmp[659142] "expr temp" "maybe param" "maybe type" "temp"
        (659145 'move' call_tmp[659142](130849 call dom _mt[243] call_tmp[659135]))
        unknown call_tmp[659149] "expr temp" "maybe param" "maybe type" "temp"
        (659152 'move' call_tmp[659149](130857 call(130852 call (partial) dsiDim _mt[243] call_tmp[659142]) i[130917]))
        unknown call_tmp[659156] "expr temp" "maybe param" "maybe type" "temp"
        (659159 'move' call_tmp[659156](130864 call args[130834] i[130917]))
        unknown call_tmp[659161] "expr temp" "maybe param" "maybe type" "temp"
        (659164 'move' call_tmp[659161](130866 call(130858 call (partial) boundsCheck _mt[243] call_tmp[659149]) call_tmp[659156]))
        unknown call_tmp[659166] "expr temp" "maybe param" "maybe type" "temp"
        (659169 'move' call_tmp[659166](130867 call ! call_tmp[659161]))
        unknown call_tmp[659171] "expr temp" "maybe param" "maybe type" "temp"
        (659174 'move' call_tmp[659171](130912 call _cond_test call_tmp[659166]))
        if call_tmp[659171]
        {
          unknown call_tmp[659176] "expr temp" "maybe param" "maybe type" "temp"
          (659179 'move' call_tmp[659176](130909 call args[130834] i[130917]))
          (130910 call halt "array slice out of bounds in dimension " i[130917] ": " call_tmp[659176])
          (480318 'end of statement' i[130917] i[130917])
        }
      }
      label _unused_continueLabel[130922]
      label _breakLabel[130921]
    }
    (518143 return _void[55])
  }
  function _array[133594](?).localSlice[130966](arg _mt[133718]:_MT[238], arg this[133716]:_array[133594](?), arg r[130963]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518147] "RVV" "temp"
    unknown call_tmp[659183] "expr temp" "maybe param" "maybe type" "temp"
    (659186 'move' call_tmp[659183](130989 call _cond_test 1))
    if call_tmp[659183]
    {
      unknown call_tmp[659192] "expr temp" "maybe param" "maybe type" "temp"
      (659195 'move' call_tmp[659192](384237 call _value _mt[243] this[133716]))
      (130987 call(384232 call (partial) checkSlice _mt[243] this[133716])(130983 'expand_tuple' r[130963])(value = call_tmp[659192]))
    }
    unknown call_tmp[659199] "maybe param" "maybe type" "temp"
    (659202 'move' call_tmp[659199](130999 call(384241 call (partial) _dom _mt[243] this[133716])(130997 'expand_tuple' r[130963])))
    unknown dom[131000] "dead at end of block" "insert auto destroy"
    (543139 'init var' dom[131000] call_tmp[659199])
    (131003 'end of statement')
    unknown call_tmp[659206] "expr temp" "maybe param" "maybe type" "temp"
    (659209 'move' call_tmp[659206](131007 call(384248 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133716]) dom[131000]))
    (518152 'move' ret[518147](518151 'deref' call_tmp[659206]))
    gotoReturn _end_localSlice[518145] _end_localSlice[518145]
    (480322 'end of statement' dom[131000])
    label _end_localSlice[518145]
    (518149 return ret[518147])
  }
  where {
    unknown tmp[425609] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492305] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659213] "expr temp" "maybe param" "maybe type" "temp"
      (659216 'move' call_tmp[659213](384225 call _value _mt[243] this[133716]))
      (492309 'move' call_type_tmp[492305](130970 'typeof' call_tmp[659213]))
    }
    (425620 'move' tmp[425609](354405 'is_subtype' DefaultRectangularArr[379804](?) call_type_tmp[492305]))
    unknown call_tmp[659218] "expr temp" "maybe param" "maybe type" "temp"
    (659221 'move' call_tmp[659218](425622 call _cond_invalid tmp[425609]))
    if call_tmp[659218]
    {
      (425625 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566429] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566430] "maybe param" "temp"
    unknown call_tmp[659223] "expr temp" "maybe param" "maybe type" "temp"
    (659226 'move' call_tmp[659223](425610 call isTrue tmp[425609]))
    (566435 'move' tmp[566430](566433 call _cond_test call_tmp[659223]))
    if tmp[566430]
    {
      unknown tmp[566437] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659228] "expr temp" "maybe param" "maybe type" "temp"
      (659231 'move' call_tmp[659228](130977 call chpl__isTupleOfRanges r[130963]))
      (566439 'move' tmp[566437](425613 call isTrue call_tmp[659228]))
      (566444 'move' tmp[566429](566441 '_paramFoldLogical' tmp[566430] tmp[566437]))
    }
    {
      (566449 'move' tmp[566429](566446 '_paramFoldLogical' tmp[566430] 0))
    }
    (748489 call chpl_statementLevelSymbol tmp[566429])
  }
  function _array[133594](?).localSlice[131019](arg _mt[133722]:_MT[238], arg this[133720]:_array[133594](?), arg d[131016]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518158] "RVV" "temp"
    unknown call_tmp[659233] "expr temp" "maybe param" "maybe type" "temp"
    (659236 'move' call_tmp[659233](131041 call _cond_test 1))
    if call_tmp[659233]
    {
      unknown call_tmp[659242] "expr temp" "maybe param" "maybe type" "temp"
      (659245 'move' call_tmp[659242](131034 call(131030 call (partial) getIndices _mt[243] d[131016])))
      unknown call_tmp[659249] "expr temp" "maybe param" "maybe type" "temp"
      (659252 'move' call_tmp[659249](384264 call _value _mt[243] this[133720]))
      (131039 call(384260 call (partial) checkSlice _mt[243] this[133720])(131035 'expand_tuple' call_tmp[659242])(value = call_tmp[659249]))
    }
    unknown call_tmp[659256] "expr temp" "maybe param" "maybe type" "temp"
    (659259 'move' call_tmp[659256](131050 call(384268 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133720]) d[131016]))
    (518163 'move' ret[518158](518162 'deref' call_tmp[659256]))
    (518160 return ret[518158])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492311] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659263] "expr temp" "maybe param" "maybe type" "temp"
      (659266 'move' call_tmp[659263](384254 call _value _mt[243] this[133720]))
      (492315 'move' call_type_tmp[492311](131023 'typeof' call_tmp[659263]))
    }
    (354406 'is_subtype' DefaultRectangularArr[379804](?) call_type_tmp[492311])
  }
  function _array[133594](?).chpl__localSliceDefaultArithArrHelp[131062](arg _mt[133726]:_MT[238], arg this[133724]:_array[133594](?), arg d[131059]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no copy return"
  {
    unknown ret[518167] "RVV" "temp"
    unknown call_tmp[659270] "expr temp" "maybe param" "maybe type" "temp"
    (659273 'move' call_tmp[659270](384274 call _value _mt[243] this[133724]))
    unknown call_tmp[659275] "expr temp" "maybe param" "maybe type" "temp"
    (659278 'move' call_tmp[659275](131065 '_wide_get_locale' call_tmp[659270]))
    unknown call_tmp[659280] "expr temp" "maybe param" "maybe type" "temp"
    (659283 'move' call_tmp[659280](131066 call chpl_localeID_to_locale call_tmp[659275]))
    unknown call_tmp[659285] "expr temp" "maybe param" "maybe type" "temp"
    (659288 'move' call_tmp[659285](384277 call here[90438]))
    unknown call_tmp[659290] "expr temp" "maybe param" "maybe type" "temp"
    (659293 'move' call_tmp[659290](131069 call != call_tmp[659280] call_tmp[659285]))
    unknown call_tmp[659295] "expr temp" "maybe param" "maybe type" "temp"
    (659298 'move' call_tmp[659295](131102 call _cond_test call_tmp[659290]))
    if call_tmp[659295]
    {
      unknown call_tmp[659302] "expr temp" "maybe param" "maybe type" "temp"
      (659305 'move' call_tmp[659302](384280 call _value _mt[243] this[133724]))
      unknown call_tmp[659307] "expr temp" "maybe param" "maybe type" "temp"
      (659310 'move' call_tmp[659307](131094 '_wide_get_node' call_tmp[659302]))
      unknown call_tmp[659312] "expr temp" "maybe param" "maybe type" "temp"
      (659315 'move' call_tmp[659312](360004 call here[90438]))
      unknown call_tmp[659319] "expr temp" "maybe param" "maybe type" "temp"
      (659322 'move' call_tmp[659319](131097 call id _mt[243] call_tmp[659312]))
      (131100 call halt "Attempting to take a local slice of an array on locale " call_tmp[659307] " from locale " call_tmp[659319])
    }
    unknown call_tmp[659324] "expr temp" "maybe param" "maybe type" "temp"
    (659327 'move' call_tmp[659324](131111 call this[133724] d[131059]))
    (518172 'move' ret[518167](518171 'deref' call_tmp[659324]))
    (518169 return ret[518167])
  }
  function _array[133594](?).localSlice[131122](arg _mt[133730]:_MT[238], arg this[133728]:_array[133594](?), arg r[131119]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518176] "RVV" "temp"
    unknown call_tmp[659331] "expr temp" "maybe param" "maybe type" "temp"
    (659334 'move' call_tmp[659331](131147 call _cond_test 1))
    if call_tmp[659331]
    {
      unknown call_tmp[659340] "expr temp" "maybe param" "maybe type" "temp"
      (659343 'move' call_tmp[659340](384302 call _value _mt[243] this[133728]))
      (131145 call(384297 call (partial) checkSlice _mt[243] this[133728])(131141 'expand_tuple' r[131119])(value = call_tmp[659340]))
    }
    unknown call_tmp[659347] "expr temp" "maybe param" "maybe type" "temp"
    (659350 'move' call_tmp[659347](360007 call _value _mt[243] this[133728]))
    unknown call_tmp[659354] "expr temp" "maybe param" "maybe type" "temp"
    (659357 'move' call_tmp[659354](131159 call(131154 call (partial) dsiLocalSlice _mt[243] call_tmp[659347]) r[131119]))
    (518181 'move' ret[518176](518180 'deref' call_tmp[659354]))
    (518178 return ret[518176])
  }
  where {
    unknown tmp[425630] "maybe param" "temp"
    (425641 'move' tmp[425630](131127 call chpl__isTupleOfRanges r[131119]))
    unknown call_tmp[659359] "expr temp" "maybe param" "maybe type" "temp"
    (659362 'move' call_tmp[659359](425643 call _cond_invalid tmp[425630]))
    if call_tmp[659359]
    {
      (425646 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566456] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566457] "maybe param" "temp"
    unknown call_tmp[659364] "expr temp" "maybe param" "maybe type" "temp"
    (659367 'move' call_tmp[659364](425631 call isTrue tmp[425630]))
    (566462 'move' tmp[566457](566460 call _cond_test call_tmp[659364]))
    if tmp[566457]
    {
      { scopeless type
        unknown call_type_tmp[492317] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659371] "expr temp" "maybe param" "maybe type" "temp"
        (659374 'move' call_tmp[659371](384291 call _value _mt[243] this[133728]))
        (492321 'move' call_type_tmp[492317](131130 'typeof' call_tmp[659371]))
      }
      unknown tmp[566464] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659376] "expr temp" "maybe param" "maybe type" "temp"
      (659379 'move' call_tmp[659376](354407 'is_subtype' DefaultRectangularArr[379804](?) call_type_tmp[492317]))
      unknown call_tmp[659381] "expr temp" "maybe param" "maybe type" "temp"
      (659384 'move' call_tmp[659381](131134 call ! call_tmp[659376]))
      (566466 'move' tmp[566464](425634 call isTrue call_tmp[659381]))
      (566471 'move' tmp[566456](566468 '_paramFoldLogical' tmp[566457] tmp[566464]))
    }
    {
      (566476 'move' tmp[566456](566473 '_paramFoldLogical' tmp[566457] 0))
    }
    (748491 call chpl_statementLevelSymbol tmp[566456])
  }
  function _array[133594](?).localSlice[131171](arg _mt[133734]:_MT[238], arg this[133732]:_array[133594](?), arg d[131168]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518185] "RVV" "temp"
    unknown call_tmp[659390] "expr temp" "maybe param" "maybe type" "temp"
    (659393 'move' call_tmp[659390](131179 call(131175 call (partial) getIndices _mt[243] d[131168])))
    unknown call_tmp[659395] "expr temp" "maybe param" "maybe type" "temp"
    (659398 'move' call_tmp[659395](131182 call(384308 call (partial) localSlice _mt[243] this[133732])(131180 'expand_tuple' call_tmp[659390])))
    (518190 'move' ret[518185](518189 'deref' call_tmp[659395]))
    (518187 return ret[518185])
  }
  function _array[133594](?).these[131190](arg _mt[133738]:_MT[238], arg this[133736]:_array[133594](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    unknown ret[518194] "RVV" "temp"
    {
      unknown _indexOfInterest[131203] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131204] "expr temp" "temp"
      unknown call_tmp[659402] "expr temp" "maybe param" "maybe type" "temp"
      (659405 'move' call_tmp[659402](360012 call _value _mt[243] this[133736]))
      unknown call_tmp[659409] "expr temp" "maybe param" "maybe type" "temp"
      (659412 'move' call_tmp[659409](131198 call(131194 call (partial) these _mt[243] call_tmp[659402])))
      (131213 'move' _iterator[131204](131211 call _getIterator call_tmp[659409]))
      Defer
      {
        {
          (131230 call _freeIterator _iterator[131204])
        }
      }
      { scopeless type
        (131219 'move' _indexOfInterest[131203](131216 call iteratorIndex _iterator[131204]))
      }
      ForLoop[131205]
      {
        unknown i[131223] "index var" "insert auto destroy"
        (480332 'end of statement')
        (131225 'move' i[131223] _indexOfInterest[131203])
        (480333 'end of statement' i[131223])
        {
          unknown yret[518198] "YVV" "temp"
          (518201 'move' yret[518198](518200 'addr of' i[131223]))
          (518203 yield yret[518198])
          (480335 'end of statement' i[131223])
        }
        label _continueLabel[131208]
        _indexOfInterest[131203]
        _iterator[131204]
      }
      label _breakLabel[131209]
    }
    (518196 return ret[518194])
  }
  function _array[133594](?).these[131246](arg _mt[133742]:_MT[238], arg this[133740]:_array[133594](?), param arg tag[131243]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[518207] "RVV" "temp"
    {
      unknown _indexOfInterest[131275] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131276] "expr temp" "temp"
      unknown call_tmp[659416] "expr temp" "maybe param" "maybe type" "temp"
      (659419 'move' call_tmp[659416](360017 call _value _mt[243] this[133740]))
      unknown call_tmp[659423] "expr temp" "maybe param" "maybe type" "temp"
      (659426 'move' call_tmp[659423](131271 call(131266 call (partial) these _mt[243] call_tmp[659416]) tag[131243]))
      (131285 'move' _iterator[131276](131283 call _getIterator call_tmp[659423]))
      Defer
      {
        {
          (131302 call _freeIterator _iterator[131276])
        }
      }
      { scopeless type
        (131291 'move' _indexOfInterest[131275](131288 call iteratorIndex _iterator[131276]))
      }
      ForLoop[131277]
      {
        unknown i[131295] "index var" "insert auto destroy"
        (480338 'end of statement')
        (131297 'move' i[131295] _indexOfInterest[131275])
        (480339 'end of statement' i[131295])
        unknown yret[518211] "YVV" "temp"
        (518214 'move' yret[518211](518213 'addr of' i[131295]))
        (518216 yield yret[518211])
        (480341 'end of statement' i[131295])
        label _continueLabel[131280]
        _indexOfInterest[131275]
        _iterator[131276]
      }
      label _breakLabel[131281]
    }
    (518209 return ret[518207])
  }
  where {
    unknown tmp[425651] "maybe param" "temp"
    (425662 'move' tmp[425651](131253 call == tag[131243] standalone[451]))
    unknown call_tmp[659428] "expr temp" "maybe param" "maybe type" "temp"
    (659431 'move' call_tmp[659428](425664 call _cond_invalid tmp[425651]))
    if call_tmp[659428]
    {
      (425667 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566483] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566484] "maybe param" "temp"
    unknown call_tmp[659433] "expr temp" "maybe param" "maybe type" "temp"
    (659436 'move' call_tmp[659433](425652 call isTrue tmp[425651]))
    (566489 'move' tmp[566484](566487 call _cond_test call_tmp[659433]))
    if tmp[566484]
    {
      unknown tmp[566491] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659440] "expr temp" "maybe param" "maybe type" "temp"
      (659443 'move' call_tmp[659440](384315 call _value _mt[243] this[133740]))
      unknown call_tmp[659445] "expr temp" "maybe param" "maybe type" "temp"
      (659448 'move' call_tmp[659445](131261 'method call resolves' call_tmp[659440] "these"(tag = tag[131243])))
      (566493 'move' tmp[566491](425655 call isTrue call_tmp[659445]))
      (566498 'move' tmp[566483](566495 '_paramFoldLogical' tmp[566484] tmp[566491]))
    }
    {
      (566503 'move' tmp[566483](566500 '_paramFoldLogical' tmp[566484] 0))
    }
    (748493 call chpl_statementLevelSymbol tmp[566483])
  }
  function _array[133594](?).these[131319](arg _mt[133746]:_MT[238], arg this[133744]:_array[133594](?), param arg tag[131316]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[518220] "RVV" "temp"
    {
      unknown _indexOfInterest[131339] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131340] "expr temp" "temp"
      unknown call_tmp[659452] "expr temp" "maybe param" "maybe type" "temp"
      (659455 'move' call_tmp[659452](360022 call _value _mt[243] this[133744]))
      unknown call_tmp[659459] "expr temp" "maybe param" "maybe type" "temp"
      (659462 'move' call_tmp[659459](131335 call(131330 call (partial) these _mt[243] call_tmp[659452]) tag[131316]))
      (131349 'move' _iterator[131340](131347 call _getIterator call_tmp[659459]))
      Defer
      {
        {
          (131366 call _freeIterator _iterator[131340])
        }
      }
      { scopeless type
        (131355 'move' _indexOfInterest[131339](131352 call iteratorIndex _iterator[131340]))
      }
      ForLoop[131341]
      {
        unknown followThis[131359] "index var" "insert auto destroy"
        (480344 'end of statement')
        (131361 'move' followThis[131359] _indexOfInterest[131339])
        (480345 'end of statement' followThis[131359])
        unknown yret[518224] "YVV" "temp"
        (518227 'move' yret[518224](518226 'deref' followThis[131359]))
        (518229 yield yret[518224])
        (480347 'end of statement' followThis[131359])
        label _continueLabel[131344]
        _indexOfInterest[131339]
        _iterator[131340]
      }
      label _breakLabel[131345]
    }
    (518222 return ret[518220])
  }
  where {
    (131326 call == tag[131316] leader[447])
  }
  function _array[133594](?).these[131383](arg _mt[133750]:_MT[238], arg this[133748]:_array[133594](?), param arg tag[131380]:iterKind[453], arg followThis[131385]:_any[178](?), param arg fast[131389]:bool[10] =
  0) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[518233] "RVV" "temp"
    unknown call_tmp[659466] "expr temp" "maybe param" "maybe type" "temp"
    (659469 'move' call_tmp[659466](384328 call _value _mt[243] this[133748]))
    unknown call_tmp[659471] "expr temp" "maybe param" "maybe type" "temp"
    (659474 'move' call_tmp[659471](131409 'method call resolves' call_tmp[659466] "these"(tag = tag[131380]) followThis[131385](fast = fast[131389])))
    unknown call_tmp[659476] "expr temp" "maybe param" "maybe type" "temp"
    (659479 'move' call_tmp[659476](131507 call _cond_test call_tmp[659471]))
    if call_tmp[659476]
    {
      {
        unknown _indexOfInterest[131425] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131426] "expr temp" "temp"
        unknown call_tmp[659483] "expr temp" "maybe param" "maybe type" "temp"
        (659486 'move' call_tmp[659483](360027 call _value _mt[243] this[133748]))
        unknown call_tmp[659490] "expr temp" "maybe param" "maybe type" "temp"
        (659493 'move' call_tmp[659490](131421 call(131412 call (partial) these _mt[243] call_tmp[659483])(tag = tag[131380]) followThis[131385](fast = fast[131389])))
        (131435 'move' _iterator[131426](131433 call _getIterator call_tmp[659490]))
        Defer
        {
          {
            (131452 call _freeIterator _iterator[131426])
          }
        }
        { scopeless type
          (131441 'move' _indexOfInterest[131425](131438 call iteratorIndex _iterator[131426]))
        }
        ForLoop[131427]
        {
          unknown i[131445] "index var" "insert auto destroy"
          (480350 'end of statement')
          (131447 'move' i[131445] _indexOfInterest[131425])
          (480351 'end of statement' i[131445])
          unknown yret[518237] "YVV" "temp"
          (518240 'move' yret[518237](518239 'addr of' i[131445]))
          (518242 yield yret[518237])
          (480353 'end of statement' i[131445])
          label _continueLabel[131430]
          _indexOfInterest[131425]
          _iterator[131426]
        }
        label _breakLabel[131431]
      }
    }
    {
      {
        unknown _indexOfInterest[131472] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131473] "expr temp" "temp"
        unknown call_tmp[659497] "expr temp" "maybe param" "maybe type" "temp"
        (659500 'move' call_tmp[659497](360031 call _value _mt[243] this[133748]))
        unknown call_tmp[659504] "expr temp" "maybe param" "maybe type" "temp"
        (659507 'move' call_tmp[659504](131468 call(131462 call (partial) these _mt[243] call_tmp[659497]) tag[131380] followThis[131385]))
        (131482 'move' _iterator[131473](131480 call _getIterator call_tmp[659504]))
        Defer
        {
          {
            (131499 call _freeIterator _iterator[131473])
          }
        }
        { scopeless type
          (131488 'move' _indexOfInterest[131472](131485 call iteratorIndex _iterator[131473]))
        }
        ForLoop[131474]
        {
          unknown i[131492] "index var" "insert auto destroy"
          (480356 'end of statement')
          (131494 'move' i[131492] _indexOfInterest[131472])
          (480357 'end of statement' i[131492])
          unknown yret[518244] "YVV" "temp"
          (518247 'move' yret[518244](518246 'addr of' i[131492]))
          (518249 yield yret[518244])
          (480359 'end of statement' i[131492])
          label _continueLabel[131477]
          _indexOfInterest[131472]
          _iterator[131473]
        }
        label _breakLabel[131478]
      }
    }
    (518235 return ret[518233])
  }
  where {
    (131398 call == tag[131380] follower[449])
  }
  function _array[133594](?).numElements[131517](arg _mt[133754]:_MT[238], arg this[133752]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518253] "RVV" "temp"
    unknown call_tmp[659509] "expr temp" "maybe param" "maybe type" "temp"
    (659512 'move' call_tmp[659509](131554 call + "'array.numElements' is deprecated - " "please use 'array.size' instead"))
    (131557 call compilerWarning call_tmp[659509])
    (480361 'end of statement')
    unknown call_tmp[659516] "expr temp" "maybe param" "maybe type" "temp"
    (659519 'move' call_tmp[659516](384342 call size _mt[243] this[133752]))
    (518258 'move' ret[518253](518257 'deref' call_tmp[659516]))
    (518255 return ret[518253])
  }
  function _array[133594](?).size[131567](arg _mt[133758]:_MT[238], arg this[133756]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518262] "RVV" "temp"
    unknown call_tmp[659523] "expr temp" "maybe param" "maybe type" "temp"
    (659526 'move' call_tmp[659523](360035 call _value _mt[243] this[133756]))
    unknown call_tmp[659530] "expr temp" "maybe param" "maybe type" "temp"
    (659533 'move' call_tmp[659530](131570 call dom _mt[243] call_tmp[659523]))
    unknown call_tmp[659537] "expr temp" "maybe param" "maybe type" "temp"
    (659540 'move' call_tmp[659537](131573 call dsiNumIndices _mt[243] call_tmp[659530]))
    (518267 'move' ret[518262](518266 'deref' call_tmp[659537]))
    (518264 return ret[518262])
  }
  function _array[133594](?).chpl_checkArrArgDoms[131587](arg _mt[133762]:_MT[238], arg this[133760]:_array[133594](?), arg formalDom[131584]:_domain[125908](?), param arg runtimeChecks[131590]:bool[10]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[659544] "expr temp" "maybe param" "maybe type" "temp"
    (659547 'move' call_tmp[659544](131594 call rank _mt[243] formalDom[131584]))
    unknown call_tmp[659551] "expr temp" "maybe param" "maybe type" "temp"
    (659554 'move' call_tmp[659551](131598 call _dom _mt[243] this[133760]))
    unknown call_tmp[659558] "expr temp" "maybe param" "maybe type" "temp"
    (659561 'move' call_tmp[659558](131601 call rank _mt[243] call_tmp[659551]))
    unknown call_tmp[659563] "expr temp" "maybe param" "maybe type" "temp"
    (659566 'move' call_tmp[659563](131604 call != call_tmp[659544] call_tmp[659558]))
    unknown call_tmp[659568] "expr temp" "maybe param" "maybe type" "temp"
    (659571 'move' call_tmp[659568](131669 call _cond_test call_tmp[659563]))
    if call_tmp[659568]
    {
      unknown call_tmp[659575] "expr temp" "maybe param" "maybe type" "temp"
      (659578 'move' call_tmp[659575](131625 call rank _mt[243] formalDom[131584]))
      unknown call_tmp[659580] "expr temp" "maybe param" "maybe type" "temp"
      (659583 'move' call_tmp[659580](131629 call _cast string[26] call_tmp[659575]))
      unknown call_tmp[659585] "expr temp" "maybe param" "maybe type" "temp"
      (659588 'move' call_tmp[659585](131631 call + "Rank mismatch passing array argument: expected " call_tmp[659580]))
      unknown call_tmp[659590] "expr temp" "maybe param" "maybe type" "temp"
      (659593 'move' call_tmp[659590](131650 call + call_tmp[659585] " but got "))
      unknown call_tmp[659597] "expr temp" "maybe param" "maybe type" "temp"
      (659600 'move' call_tmp[659597](131653 call _dom _mt[243] this[133760]))
      unknown call_tmp[659604] "expr temp" "maybe param" "maybe type" "temp"
      (659607 'move' call_tmp[659604](131656 call rank _mt[243] call_tmp[659597]))
      unknown call_tmp[659609] "expr temp" "maybe param" "maybe type" "temp"
      (659612 'move' call_tmp[659609](131660 call _cast string[26] call_tmp[659604]))
      unknown call_tmp[659614] "expr temp" "maybe param" "maybe type" "temp"
      (659617 'move' call_tmp[659614](131662 call + call_tmp[659590] call_tmp[659609]))
      (131667 call compilerError call_tmp[659614](errorDepth = 2))
    }
    { scopeless type
      unknown call_type_tmp[492323] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659621] "expr temp" "maybe param" "maybe type" "temp"
      (659624 'move' call_tmp[659621](131676 call dist _mt[243] formalDom[131584]))
      unknown call_tmp[659628] "expr temp" "maybe param" "maybe type" "temp"
      (659631 'move' call_tmp[659628](131679 call _value _mt[243] call_tmp[659621]))
      (492327 'move' call_type_tmp[492323](131682 'typeof' call_tmp[659628]))
    }
    unknown call_tmp[659633] "expr temp" "maybe param" "maybe type" "temp"
    (659636 'move' call_tmp[659633](131685 call != call_type_tmp[492323] unmanaged DefaultDist[415560]))
    unknown call_tmp[659638] "expr temp" "maybe param" "maybe type" "temp"
    (659641 'move' call_tmp[659638](131813 call _cond_test call_tmp[659633]))
    if call_tmp[659638]
    {
      { scopeless type
        unknown call_type_tmp[492329] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659645] "expr temp" "maybe param" "maybe type" "temp"
        (659648 'move' call_tmp[659645](131690 call _dom _mt[243] this[133760]))
        (492333 'move' call_type_tmp[492329](131693 'typeof' call_tmp[659645]))
      }
      unknown call_tmp[659650] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (659653 'move' call_tmp[659650](131688 'typeof' formalDom[131584]))
      unknown call_tmp[659655] "expr temp" "maybe param" "maybe type" "temp"
      (659658 'move' call_tmp[659655](131694 call != call_tmp[659650] call_type_tmp[492329]))
      unknown call_tmp[659660] "expr temp" "maybe param" "maybe type" "temp"
      (659663 'move' call_tmp[659660](131719 call _cond_test call_tmp[659655]))
      if call_tmp[659660]
      {
        (131717 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      unknown tmp[425672] "maybe param" "temp"
      (425683 'move' tmp[425672] runtimeChecks[131590])
      unknown call_tmp[659665] "expr temp" "maybe param" "maybe type" "temp"
      (659668 'move' call_tmp[659665](425685 call _cond_invalid tmp[425672]))
      if call_tmp[659665]
      {
        (425688 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[566510] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[566511] "maybe param" "temp"
      unknown call_tmp[659670] "expr temp" "maybe param" "maybe type" "temp"
      (659673 'move' call_tmp[659670](425673 call isTrue tmp[425672]))
      (566516 'move' tmp[566511](566514 call _cond_test call_tmp[659670]))
      if tmp[566511]
      {
        unknown tmp[566518] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[659677] "expr temp" "maybe param" "maybe type" "temp"
        (659680 'move' call_tmp[659677](131727 call dist _mt[243] formalDom[131584]))
        unknown call_tmp[659684] "expr temp" "maybe param" "maybe type" "temp"
        (659687 'move' call_tmp[659684](131731 call _dom _mt[243] this[133760]))
        unknown call_tmp[659691] "expr temp" "maybe param" "maybe type" "temp"
        (659694 'move' call_tmp[659691](131734 call dist _mt[243] call_tmp[659684]))
        unknown call_tmp[659696] "expr temp" "maybe param" "maybe type" "temp"
        (659699 'move' call_tmp[659696](131737 call != call_tmp[659677] call_tmp[659691]))
        (566520 'move' tmp[566518](425676 call isTrue call_tmp[659696]))
        (566525 'move' tmp[566510](566522 '_paramFoldLogical' tmp[566511] tmp[566518]))
      }
      {
        (566530 'move' tmp[566510](566527 '_paramFoldLogical' tmp[566511] 0))
      }
      unknown call_tmp[659701] "expr temp" "maybe param" "maybe type" "temp"
      (659704 'move' call_tmp[659701](131808 call _cond_test tmp[566510]))
      if call_tmp[659701]
      {
        unknown call_tmp[659708] "expr temp" "maybe param" "maybe type" "temp"
        (659711 'move' call_tmp[659708](131778 call dist _mt[243] formalDom[131584]))
        unknown call_tmp[659715] "expr temp" "maybe param" "maybe type" "temp"
        (659718 'move' call_tmp[659715](131800 call _dom _mt[243] this[133760]))
        unknown call_tmp[659722] "expr temp" "maybe param" "maybe type" "temp"
        (659725 'move' call_tmp[659722](131803 call dist _mt[243] call_tmp[659715]))
        (131806 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: " call_tmp[659708] "\n" "  Actual domain map is: " call_tmp[659722])
      }
    }
    unknown tmp[425693] "maybe param" "temp"
    (425704 'move' tmp[425693] runtimeChecks[131590])
    unknown call_tmp[659727] "expr temp" "maybe param" "maybe type" "temp"
    (659730 'move' call_tmp[659727](425706 call _cond_invalid tmp[425693]))
    if call_tmp[659727]
    {
      (425709 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566537] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566538] "maybe param" "temp"
    unknown call_tmp[659732] "expr temp" "maybe param" "maybe type" "temp"
    (659735 'move' call_tmp[659732](425694 call isTrue tmp[425693]))
    (566543 'move' tmp[566538](566541 call _cond_test call_tmp[659732]))
    if tmp[566538]
    {
      unknown tmp[566545] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659739] "expr temp" "maybe param" "maybe type" "temp"
      (659742 'move' call_tmp[659739](131820 call _dom _mt[243] this[133760]))
      unknown call_tmp[659744] "expr temp" "maybe param" "maybe type" "temp"
      (659747 'move' call_tmp[659744](131823 call != formalDom[131584] call_tmp[659739]))
      (566547 'move' tmp[566545](425697 call isTrue call_tmp[659744]))
      (566552 'move' tmp[566537](566549 '_paramFoldLogical' tmp[566538] tmp[566545]))
    }
    {
      (566557 'move' tmp[566537](566554 '_paramFoldLogical' tmp[566538] 0))
    }
    unknown call_tmp[659749] "expr temp" "maybe param" "maybe type" "temp"
    (659752 'move' call_tmp[659749](131888 call _cond_test tmp[566537]))
    if call_tmp[659749]
    {
      unknown call_tmp[659756] "expr temp" "maybe param" "maybe type" "temp"
      (659759 'move' call_tmp[659756](131883 call _dom _mt[243] this[133760]))
      (131886 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom[131584] "\n" "  Actual domain is: " call_tmp[659756])
    }
    (518269 return _void[55])
  }
  function _array[133594](?).reindex[131901](arg _mt[133766]:_MT[238], arg this[133764]:_array[133594](?), arg newDomain[131898]:_domain[125908](?)) : _unknown[51] "inline" "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518273] "RVV" "temp"
    unknown call_tmp[659765] "expr temp" "maybe param" "maybe type" "temp"
    (659768 'move' call_tmp[659765](131922 call(131918 call (partial) dims _mt[243] newDomain[131898])))
    unknown call_tmp[659770] "expr temp" "maybe param" "maybe type" "temp"
    (659773 'move' call_tmp[659770](131925 call(384355 call (partial) reindex _mt[243] this[133764])(131923 'expand_tuple' call_tmp[659765])))
    (518278 'move' ret[518273](518277 'deref' call_tmp[659770]))
    (518275 return ret[518273])
  }
  where {
    unknown tmp[425714] "maybe param" "temp"
    unknown call_tmp[659777] "expr temp" "maybe param" "maybe type" "temp"
    (659780 'move' call_tmp[659777](131905 call _dom _mt[243] this[133764]))
    (425725 'move' tmp[425714](131909 call isRectangularDom call_tmp[659777]))
    unknown call_tmp[659782] "expr temp" "maybe param" "maybe type" "temp"
    (659785 'move' call_tmp[659782](425727 call _cond_invalid tmp[425714]))
    if call_tmp[659782]
    {
      (425730 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566564] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566565] "maybe param" "temp"
    unknown call_tmp[659787] "expr temp" "maybe param" "maybe type" "temp"
    (659790 'move' call_tmp[659787](425715 call isTrue tmp[425714]))
    (566570 'move' tmp[566565](566568 call _cond_test call_tmp[659787]))
    if tmp[566565]
    {
      unknown tmp[566572] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659792] "expr temp" "maybe param" "maybe type" "temp"
      (659795 'move' call_tmp[659792](131913 call isRectangularDom newDomain[131898]))
      (566574 'move' tmp[566572](425718 call isTrue call_tmp[659792]))
      (566579 'move' tmp[566564](566576 '_paramFoldLogical' tmp[566565] tmp[566572]))
    }
    {
      (566584 'move' tmp[566564](566581 '_paramFoldLogical' tmp[566565] 0))
    }
    (748495 call chpl_statementLevelSymbol tmp[566564])
  }
  function _array[133594](?).reindex[131938](arg _mt[133770]:_MT[238], arg this[133768]:_array[133594](?), arg newDims[131935]:_any[178](?) ...) : _unknown[51] "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518282] "RVV" "temp"
    {
      unknown i[131992] "dead at end of block" "insert auto destroy"
      (543141 'init var' i[131992] 0)
      (480371 'end of statement')
      unknown tmp[131993] "maybe param" "temp"
      unknown call_tmp[659799] "expr temp" "maybe param" "maybe type" "temp"
      (659802 'move' call_tmp[659799](131949 call size _mt[243] newDims[131935]))
      unknown call_tmp[659804] "expr temp" "maybe param" "maybe type" "temp"
      (659807 'move' call_tmp[659804](131953 call - call_tmp[659799] 1))
      (132005 'move' tmp[131993](132003 call chpl_compute_low_param_loop_bound 0 call_tmp[659804]))
      unknown tmp[131994] "maybe param" "temp"
      unknown call_tmp[659811] "expr temp" "maybe param" "maybe type" "temp"
      (659814 'move' call_tmp[659811](132012 call size _mt[243] newDims[131935]))
      unknown call_tmp[659816] "expr temp" "maybe param" "maybe type" "temp"
      (659819 'move' call_tmp[659816](132010 call - call_tmp[659811] 1))
      (132018 'move' tmp[131994](132016 call chpl_compute_high_param_loop_bound 0 call_tmp[659816]))
      unknown tmp[131995] "maybe param" "temp"
      (132021 'move' tmp[131995] 1)
      ParamForLoop[132023]
      { i[131992] tmp[131993] tmp[131994] tmp[131995]
        unknown call_tmp[659821] "expr temp" "maybe param" "maybe type" "temp"
        (659824 'move' call_tmp[659821](131961 call newDims[131935] i[131992]))
        unknown call_tmp[659826] "expr temp" "maybe param" "maybe type" "temp"
        (659829 'move' call_tmp[659826](131963 call isRange call_tmp[659821]))
        unknown call_tmp[659831] "expr temp" "maybe param" "maybe type" "temp"
        (659834 'move' call_tmp[659831](131964 call ! call_tmp[659826]))
        unknown call_tmp[659836] "expr temp" "maybe param" "maybe type" "temp"
        (659839 'move' call_tmp[659836](131987 call _cond_test call_tmp[659831]))
        if call_tmp[659836]
        {
          (131985 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[131997]
      label _breakLabel[131996]
    }
    unknown call_tmp[659843] "expr temp" "maybe param" "maybe type" "temp"
    (659846 'move' call_tmp[659843](132034 call rank _mt[243] this[133768]))
    unknown call_tmp[659850] "expr temp" "maybe param" "maybe type" "temp"
    (659853 'move' call_tmp[659850](132038 call size _mt[243] newDims[131935]))
    unknown call_tmp[659855] "expr temp" "maybe param" "maybe type" "temp"
    (659858 'move' call_tmp[659855](132041 call != call_tmp[659843] call_tmp[659850]))
    unknown call_tmp[659860] "expr temp" "maybe param" "maybe type" "temp"
    (659863 'move' call_tmp[659860](132101 call _cond_test call_tmp[659855]))
    if call_tmp[659860]
    {
      unknown call_tmp[659867] "expr temp" "maybe param" "maybe type" "temp"
      (659870 'move' call_tmp[659867](132062 call rank _mt[243] this[133768]))
      unknown call_tmp[659872] "expr temp" "maybe param" "maybe type" "temp"
      (659875 'move' call_tmp[659872](132066 call _cast string[26] call_tmp[659867]))
      unknown call_tmp[659877] "expr temp" "maybe param" "maybe type" "temp"
      (659880 'move' call_tmp[659877](132068 call + "rank mismatch: cannot reindex() from " call_tmp[659872]))
      unknown call_tmp[659882] "expr temp" "maybe param" "maybe type" "temp"
      (659885 'move' call_tmp[659882](132087 call + call_tmp[659877] " dimension(s) to "))
      unknown call_tmp[659889] "expr temp" "maybe param" "maybe type" "temp"
      (659892 'move' call_tmp[659889](132090 call size _mt[243] newDims[131935]))
      unknown call_tmp[659894] "expr temp" "maybe param" "maybe type" "temp"
      (659897 'move' call_tmp[659894](132094 call _cast string[26] call_tmp[659889]))
      unknown call_tmp[659899] "expr temp" "maybe param" "maybe type" "temp"
      (659902 'move' call_tmp[659899](132096 call + call_tmp[659882] call_tmp[659894]))
      (132099 call compilerError call_tmp[659899])
    }
    {
      unknown i[132179] "dead at end of block" "insert auto destroy"
      (543143 'init var' i[132179] 0)
      (480374 'end of statement')
      unknown tmp[132180] "maybe param" "temp"
      unknown call_tmp[659906] "expr temp" "maybe param" "maybe type" "temp"
      (659909 'move' call_tmp[659906](384361 call rank _mt[243] this[133768]))
      unknown call_tmp[659911] "expr temp" "maybe param" "maybe type" "temp"
      (659914 'move' call_tmp[659911](132109 call - call_tmp[659906] 1))
      (132192 'move' tmp[132180](132190 call chpl_compute_low_param_loop_bound 0 call_tmp[659911]))
      unknown tmp[132181] "maybe param" "temp"
      unknown call_tmp[659918] "expr temp" "maybe param" "maybe type" "temp"
      (659921 'move' call_tmp[659918](384369 call rank _mt[243] this[133768]))
      unknown call_tmp[659923] "expr temp" "maybe param" "maybe type" "temp"
      (659926 'move' call_tmp[659923](132197 call - call_tmp[659918] 1))
      (132202 'move' tmp[132181](132200 call chpl_compute_high_param_loop_bound 0 call_tmp[659923]))
      unknown tmp[132182] "maybe param" "temp"
      (132205 'move' tmp[132182] 1)
      ParamForLoop[132207]
      { i[132179] tmp[132180] tmp[132181] tmp[132182]
        unknown call_tmp[659928] "expr temp" "maybe param" "maybe type" "temp"
        (659931 'move' call_tmp[659928](132116 call newDims[131935] i[132179]))
        unknown call_tmp[659935] "expr temp" "maybe param" "maybe type" "temp"
        (659938 'move' call_tmp[659935](132117 call size _mt[243] call_tmp[659928]))
        unknown call_tmp[659942] "expr temp" "maybe param" "maybe type" "temp"
        (659945 'move' call_tmp[659942](360060 call _value _mt[243] this[133768]))
        unknown call_tmp[659949] "expr temp" "maybe param" "maybe type" "temp"
        (659952 'move' call_tmp[659949](132121 call dom _mt[243] call_tmp[659942]))
        unknown call_tmp[659956] "expr temp" "maybe param" "maybe type" "temp"
        (659959 'move' call_tmp[659956](132129 call(132124 call (partial) dsiDim _mt[243] call_tmp[659949]) i[132179]))
        unknown call_tmp[659963] "expr temp" "maybe param" "maybe type" "temp"
        (659966 'move' call_tmp[659963](132130 call size _mt[243] call_tmp[659956]))
        unknown call_tmp[659968] "expr temp" "maybe param" "maybe type" "temp"
        (659971 'move' call_tmp[659968](132133 call != call_tmp[659935] call_tmp[659963]))
        unknown call_tmp[659973] "expr temp" "maybe param" "maybe type" "temp"
        (659976 'move' call_tmp[659973](132174 call _cond_test call_tmp[659968]))
        if call_tmp[659973]
        {
          (132172 call halt "extent in dimension " i[132179] " does not match actual")
          (480375 'end of statement' i[132179])
        }
      }
      label _unused_continueLabel[132184]
      label _breakLabel[132183]
    }
    unknown call_tmp[659980] "expr temp" "maybe param" "maybe type" "temp"
    (659983 'move' call_tmp[659980](132217 call _value _mt[243] this[133768]))
    unknown call_tmp[659987] "maybe param" "maybe type" "temp"
    (659990 'move' call_tmp[659987](132220 call dom _mt[243] call_tmp[659980]))
    const thisDomClass[132223] "dead at end of block" "const" "insert auto destroy"
    (543145 'init var' thisDomClass[132223] call_tmp[659987])
    (132226 'end of statement')
    unknown call_tmp[659994] "expr temp" "maybe param" "maybe type" "temp"
    (659997 'move' call_tmp[659994](132234 call pid _mt[243] thisDomClass[132223]))
    unknown call_tmp[659999] "maybe param" "maybe type" "temp"
    (660002 'move' call_tmp[659999](132238 call _build_tuple thisDomClass[132223] call_tmp[659994]))
    const tmp[132240] "dead at end of block" "const" "insert auto destroy" "temp"
    (543147 'init var' tmp[132240] call_tmp[659999])
    (132247 call _check_tuple_var_decl tmp[132240] 2)
    (480377 'end of statement')
    unknown call_tmp[660004] "maybe param" "maybe type" "temp"
    (660007 'move' call_tmp[660004](132241 call tmp[132240] 0))
    const dom[132227] "dead at end of block" "const" "insert auto destroy"
    (543149 'init var' dom[132227] call_tmp[660004])
    unknown call_tmp[660009] "maybe param" "maybe type" "temp"
    (660012 'move' call_tmp[660009](132244 call tmp[132240] 1))
    const dompid[132229] "dead at end of block" "const" "insert auto destroy"
    (543151 'init var' dompid[132229] call_tmp[660009])
    (132252 'end of statement')
    unknown call_tmp[660014] "maybe param" "maybe type" "temp"
    (660017 'move' call_tmp[660014](132256 call chpl__buildDomainExpr(132254 'expand_tuple' newDims[131935])))
    const updom[132258] "dead at end of block" "const" "no auto destroy"
    (543153 'init var' updom[132258] call_tmp[660014])
    (132261 'end of statement')
    unknown call_tmp[660021] "expr temp" "maybe param" "maybe type" "temp"
    (660024 'move' call_tmp[660021](132267 call _dom _mt[243] this[133768]))
    unknown call_tmp[660028] "expr temp" "maybe param" "maybe type" "temp"
    (660031 'move' call_tmp[660028](132270 call dist _mt[243] call_tmp[660021]))
    unknown call_tmp[660035] "expr temp" "maybe param" "maybe type" "temp"
    (660038 'move' call_tmp[660035](132273 call _pid _mt[243] call_tmp[660028]))
    unknown call_tmp[660042] "expr temp" "maybe param" "maybe type" "temp"
    (660045 'move' call_tmp[660042](132279 call _dom _mt[243] this[133768]))
    unknown call_tmp[660049] "expr temp" "maybe param" "maybe type" "temp"
    (660052 'move' call_tmp[660049](132282 call dist _mt[243] call_tmp[660042]))
    unknown call_tmp[660056] "expr temp" "maybe param" "maybe type" "temp"
    (660059 'move' call_tmp[660056](132285 call _instance _mt[243] call_tmp[660049]))
    unknown call_tmp[660063] "expr temp" "maybe param" "maybe type" "temp"
    (660066 'move' call_tmp[660063](132290 call _value _mt[243] updom[132258]))
    unknown call_tmp[660068] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (660071 'move' call_tmp[660068](748072 'new' ArrayViewReindexDist[384375](?)(downDistPid = call_tmp[660035])(downDistInst = call_tmp[660056])(updom = call_tmp[660063])(downdomPid = dompid[132229])(downdomInst = dom[132227])(_chpl_manager = unmanaged[220](?))))
    const redist[132299] "dead at end of block" "const" "insert auto destroy"
    (543155 'init var' redist[132299] call_tmp[660068])
    (132302 'end of statement')
    unknown call_tmp[660073] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (660076 'move' call_tmp[660073](748073 'new' _distribution[118973](?) redist[132299]))
    const redistRec[132308] "dead at end of block" "const" "insert auto destroy"
    (543157 'init var' redistRec[132308] call_tmp[660073])
    (132311 'end of statement')
    unknown call_tmp[660080] "expr temp" "maybe param" "maybe type" "temp"
    (660083 'move' call_tmp[660080](384385 call rank _mt[243] this[133768]))
    unknown call_tmp[660087] "expr temp" "maybe param" "maybe type" "temp"
    (660090 'move' call_tmp[660087](132318 call idxType _mt[243] updom[132258]))
    unknown call_tmp[660094] "expr temp" "maybe param" "maybe type" "temp"
    (660097 'move' call_tmp[660094](132322 call stridable _mt[243] updom[132258]))
    unknown call_tmp[660101] "expr temp" "maybe param" "maybe type" "temp"
    (660104 'move' call_tmp[660101](132330 call(132326 call (partial) dims _mt[243] updom[132258])))
    unknown call_tmp[660106] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (660109 'move' call_tmp[660106](748074 'new' _domain[125908](?) redistRec[132308] call_tmp[660080] call_tmp[660087] call_tmp[660094] call_tmp[660101]))
    const newDom[132332] "dead at end of block" "const" "no auto destroy"
    (543159 'init var' newDom[132332] call_tmp[660106])
    (132335 'end of statement')
    unknown call_tmp[660113] "expr temp" "maybe param" "maybe type" "temp"
    (660116 'move' call_tmp[660113](132337 call _value _mt[243] newDom[132332]))
    unknown call_tmp[660120] "expr temp" "maybe param" "maybe type" "temp"
    (660123 'move' call_tmp[660120](132340 call _free_when_no_arrs _mt[243] call_tmp[660113]))
    (132344 call = call_tmp[660120] 1)
    (480386 'end of statement' newDom[132332])
    unknown call_tmp[660127] "expr temp" "maybe param" "maybe type" "temp"
    (660130 'move' call_tmp[660127](132353 call _value _mt[243] this[133768]))
    unknown call_tmp[660134] "expr temp" "maybe param" "maybe type" "temp"
    (660137 'move' call_tmp[660134](132357 call _pid _mt[243] this[133768]))
    unknown call_tmp[660139] "maybe param" "maybe type" "temp"
    (660142 'move' call_tmp[660139](132361 call _build_tuple call_tmp[660127] call_tmp[660134]))
    const tmp[132363] "dead at end of block" "const" "insert auto destroy" "temp"
    (543161 'init var' tmp[132363] call_tmp[660139])
    (132370 call _check_tuple_var_decl tmp[132363] 2)
    (480388 'end of statement')
    unknown call_tmp[660144] "maybe param" "maybe type" "temp"
    (660147 'move' call_tmp[660144](132364 call tmp[132363] 0))
    const arr[132347] "dead at end of block" "const" "insert auto destroy"
    (543163 'init var' arr[132347] call_tmp[660144])
    unknown call_tmp[660149] "maybe param" "maybe type" "temp"
    (660152 'move' call_tmp[660149](132367 call tmp[132363] 1))
    const arrpid[132349] "dead at end of block" "const" "insert auto destroy"
    (543165 'init var' arrpid[132349] call_tmp[660149])
    (132375 'end of statement')
    unknown call_tmp[660156] "expr temp" "maybe param" "maybe type" "temp"
    (660159 'move' call_tmp[660156](132381 call eltType _mt[243] this[133768]))
    unknown call_tmp[660163] "expr temp" "maybe param" "maybe type" "temp"
    (660166 'move' call_tmp[660163](132387 call _pid _mt[243] newDom[132332]))
    unknown call_tmp[660170] "expr temp" "maybe param" "maybe type" "temp"
    (660173 'move' call_tmp[660170](132392 call _instance _mt[243] newDom[132332]))
    unknown call_tmp[660175] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (660178 'move' call_tmp[660175](748075 'new' ArrayViewReindexArr[384389](?)(eltType = call_tmp[660156])(_DomPid = call_tmp[660163])(dom = call_tmp[660170])(_ArrPid = arrpid[132349])(_ArrInstance = arr[132347])(_chpl_manager = unmanaged[220](?))))
    unknown x[132401] "dead at end of block" "insert auto destroy"
    (543167 'init var' x[132401] call_tmp[660175])
    (132404 'end of statement' updom[132258] dompid[132229] dom[132227] redist[132299] redistRec[132308] updom[132258] updom[132258] updom[132258] newDom[132332] newDom[132332] arrpid[132349] arr[132347])
    unknown call_tmp[660182] "expr temp" "maybe param" "maybe type" "temp"
    (660185 'move' call_tmp[660182](132406 call _value _mt[243] newDom[132332]))
    (132416 call(132409 call (partial) add_arr _mt[243] call_tmp[660182]) x[132401](locking = 0))
    (480393 'end of statement' newDom[132332] x[132401])
    unknown call_tmp[660189] "expr temp" "maybe param" "maybe type" "temp"
    (660192 'move' call_tmp[660189](132421 call _newArray x[132401]))
    (518287 'move' ret[518282](518286 'deref' call_tmp[660189]))
    gotoReturn _end_reindex[518280] _end_reindex[518280]
    (480396 'end of statement' x[132401])
    label _end_reindex[518280]
    (518284 return ret[518282])
  }
  where {
    unknown call_tmp[660196] "expr temp" "maybe param" "maybe type" "temp"
    (660199 'move' call_tmp[660196](131942 call _dom _mt[243] this[133768]))
    (131946 call isRectangularDom call_tmp[660196])
  }
  function _array[133594](?).reindex[132433](arg _mt[133774]:_MT[238], arg this[133772]:_array[133594](?), arg d[132430]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns aliasing array" "no return value for void"
  {
    (132454 call compilerError "Reindexing non-rectangular arrays is not permitted.")
    (518291 return _void[55])
  }
  function _array[133594](?).writeThis[132463](arg _mt[133778]:_MT[238], arg this[133776]:_array[133594](?), arg f[132461]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660203] "expr temp" "maybe param" "maybe type" "temp"
    (660206 'move' call_tmp[660203](360079 call _value _mt[243] this[133776]))
    (132471 call(132466 call (partial) dsiSerialWrite _mt[243] call_tmp[660203]) f[132461])
    (518293 return _void[55])
  }
  function _array[133594](?).readThis[132480](arg _mt[133782]:_MT[238], arg this[133780]:_array[133594](?), arg f[132478]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660212] "expr temp" "maybe param" "maybe type" "temp"
    (660215 'move' call_tmp[660212](360083 call _value _mt[243] this[133780]))
    (132488 call(132483 call (partial) dsiSerialRead _mt[243] call_tmp[660212]) f[132478])
    (518295 return _void[55])
  }
  function _array[133594](?).IRV[132495](arg _mt[133786]:_MT[238], arg this[133784]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "no return value for void"
  {
    (132522 call compilerError "only sparse arrays have an IRV")
    (518297 return _void[55])
  }
  where {
    unknown call_tmp[660219] "expr temp" "maybe param" "maybe type" "temp"
    (660222 'move' call_tmp[660219](132500 call isSparseArr this[133784]))
    (132501 call ! call_tmp[660219])
  }
  function _array[133594](?).IRV[132530](arg _mt[133790]:_MT[238], arg this[133788]:_array[133594](?)) ref : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[518301] "RVV" "temp"
    unknown call_tmp[660226] "expr temp" "maybe param" "maybe type" "temp"
    (660229 'move' call_tmp[660226](360087 call _value _mt[243] this[133788]))
    unknown call_tmp[660233] "expr temp" "maybe param" "maybe type" "temp"
    (660236 'move' call_tmp[660233](132539 call IRV _mt[243] call_tmp[660226]))
    (518306 'move' ret[518301](518305 'addr of' call_tmp[660233]))
    (518303 return ret[518301])
  }
  where {
    (132535 call isSparseArr this[133788])
  }
  function _array[133594](?).sorted[132559](arg _mt[133794]:_MT[238], arg this[133792]:_array[133594](?), arg comparator[132555]:_any[178](?) :
  (749007 call chpl_defaultComparator) =
  (132554 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518310] "RVV" "temp"
    unknown call_tmp[660240] "expr temp" "maybe param" "maybe type" "temp"
    (660243 'move' call_tmp[660240](384402 call _value _mt[243] this[133792]))
    unknown call_tmp[660245] "expr temp" "maybe param" "maybe type" "temp"
    (660248 'move' call_tmp[660245](132583 call canResolveMethod module=[255] Reflection[224970] call_tmp[660240] "dsiSorted" comparator[132555]))
    unknown call_tmp[660250] "expr temp" "maybe param" "maybe type" "temp"
    (660253 'move' call_tmp[660250](132726 call _cond_test call_tmp[660245]))
    if call_tmp[660250]
    {
      {
        unknown _indexOfInterest[132596] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132597] "expr temp" "temp"
        unknown call_tmp[660257] "expr temp" "maybe param" "maybe type" "temp"
        (660260 'move' call_tmp[660257](360097 call _value _mt[243] this[133792]))
        unknown call_tmp[660264] "expr temp" "maybe param" "maybe type" "temp"
        (660267 'move' call_tmp[660264](132591 call(132586 call (partial) dsiSorted _mt[243] call_tmp[660257]) comparator[132555]))
        (132606 'move' _iterator[132597](132604 call _getIterator call_tmp[660264]))
        Defer
        {
          {
            (132623 call _freeIterator _iterator[132597])
          }
        }
        { scopeless type
          (132612 'move' _indexOfInterest[132596](132609 call iteratorIndex _iterator[132597]))
        }
        ForLoop[132598]
        {
          unknown i[132616] "index var" "insert auto destroy"
          (480404 'end of statement')
          (132618 'move' i[132616] _indexOfInterest[132596])
          (480405 'end of statement' i[132616])
          {
            unknown yret[518314] "YVV" "temp"
            (518317 'move' yret[518314](518316 'deref' i[132616]))
            (518319 yield yret[518314])
            (480407 'end of statement' i[132616])
          }
          label _continueLabel[132601]
          _indexOfInterest[132596]
          _iterator[132597]
        }
        label _breakLabel[132602]
      }
    }
    {
      unknown call_tmp[660271] "expr temp" "maybe param" "maybe type" "temp"
      (660274 'move' call_tmp[660271](384409 call _value _mt[243] this[133792]))
      unknown call_tmp[660276] "expr temp" "maybe param" "maybe type" "temp"
      (660279 'move' call_tmp[660276](132638 call canResolveMethod module=[255] Reflection[224970] call_tmp[660271] "dsiSorted"))
      unknown call_tmp[660281] "expr temp" "maybe param" "maybe type" "temp"
      (660284 'move' call_tmp[660281](132722 call _cond_test call_tmp[660276]))
      if call_tmp[660281]
      {
        { scopeless type
          unknown call_type_tmp[492335] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[660288] "expr temp" "maybe param" "maybe type" "temp"
          (660291 'move' call_tmp[660288](384413 call _value _mt[243] this[133792]))
          (492339 'move' call_type_tmp[492335](132641 'typeof' call_tmp[660288]))
        }
        unknown call_tmp[660293] "expr temp" "maybe param" "maybe type" "temp"
        (660296 'move' call_tmp[660293](132643 call _cast string[26] call_type_tmp[492335]))
        unknown call_tmp[660298] "expr temp" "maybe param" "maybe type" "temp"
        (660301 'move' call_tmp[660298](132662 call + call_tmp[660293] " does not support dsiSorted(comparator)"))
        (132665 call compilerError call_tmp[660298])
      }
      {
        unknown copy[132673] "dead at end of block" "insert auto destroy"
        (543169 'init var' copy[132673] this[133792])
        (132676 'end of statement')
        (132682 call sort copy[132673](comparator = comparator[132555]))
        (480410 'end of statement' copy[132673])
        {
          unknown _indexOfInterest[132689] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[132690] "expr temp" "temp"
          (132699 'move' _iterator[132690](132697 call _getIterator copy[132673]))
          Defer
          {
            {
              (132715 call _freeIterator _iterator[132690])
            }
          }
          { scopeless type
            (132704 'move' _indexOfInterest[132689](132701 call iteratorIndex _iterator[132690]))
          }
          ForLoop[132691]
          {
            unknown ind[132708] "index var" "insert auto destroy"
            (480413 'end of statement')
            (132710 'move' ind[132708] _indexOfInterest[132689])
            (480414 'end of statement' ind[132708])
            unknown yret[518321] "YVV" "temp"
            (518324 'move' yret[518321](518323 'deref' ind[132708]))
            (518326 yield yret[518321])
            (480416 'end of statement' ind[132708])
            label _continueLabel[132694]
            _indexOfInterest[132689]
            _iterator[132690]
          }
          label _breakLabel[132695]
        }
        (355233 'used modules list'(132669 'use' Sort[268056]))
      }
      (360101 'referenced modules list' Reflection[224970])
    }
    (518312 return ret[518310])
    (360091 'referenced modules list' Reflection[224970])
  }
  function _array[133594](?).displayRepresentation[132736](arg _mt[133798]:_MT[238], arg this[133796]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660305] "expr temp" "maybe param" "maybe type" "temp"
    (660308 'move' call_tmp[660305](360107 call _value _mt[243] this[133796]))
    (132743 call(132739 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[660305]))
    (518328 return _void[55])
  }
  function _array[133594](?).targetLocales[132750](arg _mt[133802]:_MT[238], arg this[133800]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518332] "RVV" "temp"
    unknown call_tmp[660314] "expr temp" "maybe param" "maybe type" "temp"
    (660317 'move' call_tmp[660314](360111 call _value _mt[243] this[133800]))
    unknown call_tmp[660321] "expr temp" "maybe param" "maybe type" "temp"
    (660324 'move' call_tmp[660321](132757 call(132753 call (partial) dsiTargetLocales _mt[243] call_tmp[660314])))
    (518337 'move' ret[518332](518336 'deref' call_tmp[660321]))
    (518334 return ret[518332])
  }
  function _array[133594](?).hasSingleLocalSubdomain[132765](arg _mt[133806]:_MT[238], arg this[133804]:_array[133594](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518341] "RVV" "param" "temp"
    unknown call_tmp[660328] "expr temp" "maybe param" "maybe type" "temp"
    (660331 'move' call_tmp[660328](360115 call _value _mt[243] this[133804]))
    unknown call_tmp[660335] "expr temp" "maybe param" "maybe type" "temp"
    (660338 'move' call_tmp[660335](132772 call(132768 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660328])))
    (518346 'move' ret[518341](518345 'deref' call_tmp[660335]))
    (518343 return ret[518341])
  }
  function _array[133594](?).localSubdomain[132786](arg _mt[133810]:_MT[238], arg this[133808]:_array[133594](?), arg loc[132782]:locale[28] =
  (384421 call here[90438])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518350] "RVV" "temp"
    unknown call_tmp[660342] "expr temp" "maybe param" "maybe type" "temp"
    (660345 'move' call_tmp[660342](360119 call _value _mt[243] this[133808]))
    unknown call_tmp[660349] "expr temp" "maybe param" "maybe type" "temp"
    (660352 'move' call_tmp[660349](132793 call(132789 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660342])))
    unknown call_tmp[660354] "expr temp" "maybe param" "maybe type" "temp"
    (660357 'move' call_tmp[660354](132794 call ! call_tmp[660349]))
    unknown call_tmp[660359] "expr temp" "maybe param" "maybe type" "temp"
    (660362 'move' call_tmp[660359](132801 call _cond_test call_tmp[660354]))
    if call_tmp[660359]
    {
      (132799 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[660366] "expr temp" "maybe param" "maybe type" "temp"
    (660369 'move' call_tmp[660366](360123 call _value _mt[243] this[133808]))
    unknown call_tmp[660373] "expr temp" "maybe param" "maybe type" "temp"
    (660376 'move' call_tmp[660373](132813 call(132808 call (partial) dsiLocalSubdomain _mt[243] call_tmp[660366]) loc[132782]))
    (518355 'move' ret[518350](518354 'deref' call_tmp[660373]))
    (518352 return ret[518350])
  }
  function _array[133594](?).localSubdomains[132826](arg _mt[133814]:_MT[238], arg this[133812]:_array[133594](?), arg loc[132822]:locale[28] =
  (384424 call here[90438])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518359] "RVV" "temp"
    unknown call_tmp[660380] "expr temp" "maybe param" "maybe type" "temp"
    (660383 'move' call_tmp[660380](360127 call _value _mt[243] this[133812]))
    unknown call_tmp[660387] "expr temp" "maybe param" "maybe type" "temp"
    (660390 'move' call_tmp[660387](132833 call(132829 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660380])))
    unknown call_tmp[660392] "expr temp" "maybe param" "maybe type" "temp"
    (660395 'move' call_tmp[660392](132887 call _cond_test call_tmp[660387]))
    if call_tmp[660392]
    {
      unknown yret[518363] "YVV" "temp"
      unknown call_tmp[660399] "expr temp" "maybe param" "maybe type" "temp"
      (660402 'move' call_tmp[660399](132837 call(384427 call (partial) localSubdomain _mt[243] this[133812]) loc[132822]))
      (518366 'move' yret[518363](518365 'deref' call_tmp[660399]))
      (518368 yield yret[518363])
    }
    {
      {
        unknown _indexOfInterest[132852] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132853] "expr temp" "temp"
        unknown call_tmp[660406] "expr temp" "maybe param" "maybe type" "temp"
        (660409 'move' call_tmp[660406](360131 call _value _mt[243] this[133812]))
        unknown call_tmp[660413] "expr temp" "maybe param" "maybe type" "temp"
        (660416 'move' call_tmp[660413](132848 call(132843 call (partial) dsiLocalSubdomains _mt[243] call_tmp[660406]) loc[132822]))
        (132862 'move' _iterator[132853](132860 call _getIterator call_tmp[660413]))
        Defer
        {
          {
            (132879 call _freeIterator _iterator[132853])
          }
        }
        { scopeless type
          (132868 'move' _indexOfInterest[132852](132865 call iteratorIndex _iterator[132853]))
        }
        ForLoop[132854]
        {
          unknown d[132872] "index var" "insert auto destroy"
          (480425 'end of statement')
          (132874 'move' d[132872] _indexOfInterest[132852])
          (480426 'end of statement' d[132872])
          unknown yret[518370] "YVV" "temp"
          (518373 'move' yret[518370](518372 'deref' d[132872]))
          (518375 yield yret[518370])
          (480428 'end of statement' d[132872])
          label _continueLabel[132857]
          _indexOfInterest[132852]
          _iterator[132853]
        }
        label _breakLabel[132858]
      }
    }
    (518361 return ret[518359])
  }
  function _array[133594](?).chpl__isDense1DArray[132896](arg _mt[133818]:_MT[238], arg this[133816]:_array[133594](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518379] "RVV" "param" "temp"
    unknown tmp[425735] "maybe param" "temp"
    unknown tmp[425756] "maybe param" "temp"
    (425767 'move' tmp[425756](132901 call isRectangularArr this[133816]))
    unknown call_tmp[660418] "expr temp" "maybe param" "maybe type" "temp"
    (660421 'move' call_tmp[660418](425769 call _cond_invalid tmp[425756]))
    if call_tmp[660418]
    {
      (425772 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566591] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566592] "maybe param" "temp"
    unknown call_tmp[660423] "expr temp" "maybe param" "maybe type" "temp"
    (660426 'move' call_tmp[660423](425757 call isTrue tmp[425756]))
    (566597 'move' tmp[566592](566595 call _cond_test call_tmp[660423]))
    if tmp[566592]
    {
      unknown tmp[566599] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660430] "expr temp" "maybe param" "maybe type" "temp"
      (660433 'move' call_tmp[660430](132903 call rank _mt[243] this[133816]))
      unknown call_tmp[660435] "expr temp" "maybe param" "maybe type" "temp"
      (660438 'move' call_tmp[660435](132907 call == call_tmp[660430] 1))
      (566601 'move' tmp[566599](425760 call isTrue call_tmp[660435]))
      (566606 'move' tmp[566591](566603 '_paramFoldLogical' tmp[566592] tmp[566599]))
    }
    {
      (566611 'move' tmp[566591](566608 '_paramFoldLogical' tmp[566592] 0))
    }
    (425746 'move' tmp[425735] tmp[566591])
    unknown call_tmp[660440] "expr temp" "maybe param" "maybe type" "temp"
    (660443 'move' call_tmp[660440](425748 call _cond_invalid tmp[425735]))
    if call_tmp[660440]
    {
      (425751 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566618] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566619] "maybe param" "temp"
    unknown call_tmp[660445] "expr temp" "maybe param" "maybe type" "temp"
    (660448 'move' call_tmp[660445](425736 call isTrue tmp[425735]))
    (566624 'move' tmp[566619](566622 call _cond_test call_tmp[660445]))
    if tmp[566619]
    {
      unknown tmp[566626] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660452] "expr temp" "maybe param" "maybe type" "temp"
      (660455 'move' call_tmp[660452](132912 call _value _mt[243] this[133816]))
      unknown call_tmp[660459] "expr temp" "maybe param" "maybe type" "temp"
      (660462 'move' call_tmp[660459](132915 call stridable _mt[243] call_tmp[660452]))
      unknown call_tmp[660464] "expr temp" "maybe param" "maybe type" "temp"
      (660467 'move' call_tmp[660464](132918 call ! call_tmp[660459]))
      (566628 'move' tmp[566626](425739 call isTrue call_tmp[660464]))
      (566633 'move' tmp[566618](566630 '_paramFoldLogical' tmp[566619] tmp[566626]))
    }
    {
      (566638 'move' tmp[566618](566635 '_paramFoldLogical' tmp[566619] 0))
    }
    (518384 'move' ret[518379](518383 'deref' tmp[566618]))
    (518381 return ret[518379])
  }
  function _array[133594](?).chpl__assertSingleArrayDomain[132933](arg _mt[133822]:_MT[238], arg this[133820]:_array[133594](?), arg fnName[132930]:string[26]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660471] "expr temp" "maybe param" "maybe type" "temp"
    (660474 'move' call_tmp[660471](132936 call _dom _mt[243] this[133820]))
    unknown call_tmp[660478] "expr temp" "maybe param" "maybe type" "temp"
    (660481 'move' call_tmp[660478](132939 call _value _mt[243] call_tmp[660471]))
    unknown call_tmp[660485] "expr temp" "maybe param" "maybe type" "temp"
    (660488 'move' call_tmp[660485](132942 call _arrs _mt[243] call_tmp[660478]))
    unknown call_tmp[660492] "expr temp" "maybe param" "maybe type" "temp"
    (660495 'move' call_tmp[660492](132945 call size _mt[243] call_tmp[660485]))
    unknown call_tmp[660497] "expr temp" "maybe param" "maybe type" "temp"
    (660500 'move' call_tmp[660497](132949 call != call_tmp[660492] 1))
    unknown call_tmp[660502] "expr temp" "maybe param" "maybe type" "temp"
    (660505 'move' call_tmp[660502](132994 call _cond_test call_tmp[660497]))
    if call_tmp[660502]
    {
      unknown call_tmp[660507] "expr temp" "maybe param" "maybe type" "temp"
      (660510 'move' call_tmp[660507](132970 call + "cannot call " fnName[132930]))
      unknown call_tmp[660512] "expr temp" "maybe param" "maybe type" "temp"
      (660515 'move' call_tmp[660512](132989 call + call_tmp[660507] " on an array defined over a domain with multiple arrays"))
      (132992 call halt call_tmp[660512])
    }
    (518386 return _void[55])
  }
  function _array[133594](?).isEmpty[133004](arg _mt[133826]:_MT[238], arg this[133824]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518390] "RVV" "temp"
    unknown call_tmp[660519] "expr temp" "maybe param" "maybe type" "temp"
    (660522 'move' call_tmp[660519](133008 call size _mt[243] this[133824]))
    unknown call_tmp[660524] "expr temp" "maybe param" "maybe type" "temp"
    (660527 'move' call_tmp[660524](133012 call == call_tmp[660519] 0))
    (518396 'move' ret[518390](518395 'coerce' call_tmp[660524] bool[10]))
    (518392 return ret[518390])
  }
  { scopeless type
    bool[10]
  }
  function _array[133594](?).head[133022](arg _mt[133830]:_MT[238], arg this[133828]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518400] "RVV" "temp"
    unknown call_tmp[660531] "expr temp" "maybe param" "maybe type" "temp"
    (660534 'move' call_tmp[660531](133033 call _dom _mt[243] this[133828]))
    unknown call_tmp[660538] "expr temp" "maybe param" "maybe type" "temp"
    (660541 'move' call_tmp[660538](133036 call alignedLow _mt[243] call_tmp[660531]))
    unknown call_tmp[660543] "expr temp" "maybe param" "maybe type" "temp"
    (660546 'move' call_tmp[660543](133040 call this[133828] call_tmp[660538]))
    unknown call_tmp[660550] "expr temp" "maybe param" "maybe type" "temp"
    (660553 'move' call_tmp[660550](518407 call _value _mt[243] this[133828]))
    unknown call_tmp[660557] "expr temp" "maybe param" "maybe type" "temp"
    (660560 'move' call_tmp[660557](518405 call eltType _mt[243] call_tmp[660550]))
    (518412 'move' ret[518400](518411 'coerce' call_tmp[660543] call_tmp[660557]))
    (518402 return ret[518400])
  }
  { scopeless type
    unknown call_tmp[660564] "expr temp" "maybe param" "maybe type" "temp"
    (660567 'move' call_tmp[660564](133025 call _value _mt[243] this[133828]))
    (133028 call eltType _mt[243] call_tmp[660564])
  }
  function _array[133594](?).tail[133049](arg _mt[133834]:_MT[238], arg this[133832]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518416] "RVV" "temp"
    unknown call_tmp[660573] "expr temp" "maybe param" "maybe type" "temp"
    (660576 'move' call_tmp[660573](133060 call _dom _mt[243] this[133832]))
    unknown call_tmp[660580] "expr temp" "maybe param" "maybe type" "temp"
    (660583 'move' call_tmp[660580](133063 call alignedHigh _mt[243] call_tmp[660573]))
    unknown call_tmp[660585] "expr temp" "maybe param" "maybe type" "temp"
    (660588 'move' call_tmp[660585](133067 call this[133832] call_tmp[660580]))
    unknown call_tmp[660592] "expr temp" "maybe param" "maybe type" "temp"
    (660595 'move' call_tmp[660592](518423 call _value _mt[243] this[133832]))
    unknown call_tmp[660599] "expr temp" "maybe param" "maybe type" "temp"
    (660602 'move' call_tmp[660599](518421 call eltType _mt[243] call_tmp[660592]))
    (518428 'move' ret[518416](518427 'coerce' call_tmp[660585] call_tmp[660599]))
    (518418 return ret[518416])
  }
  { scopeless type
    unknown call_tmp[660606] "expr temp" "maybe param" "maybe type" "temp"
    (660609 'move' call_tmp[660606](133052 call _value _mt[243] this[133832]))
    (133055 call eltType _mt[243] call_tmp[660606])
  }
  function _array[133594](?).back[133076](arg _mt[133838]:_MT[238], arg this[133836]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518432] "RVV" "temp"
    unknown tmp[425777] "maybe param" "temp"
    unknown call_tmp[660613] "expr temp" "maybe param" "maybe type" "temp"
    (660616 'move' call_tmp[660613](133081 call isRectangularArr this[133836]))
    (425788 'move' tmp[425777](133082 call ! call_tmp[660613]))
    unknown call_tmp[660618] "expr temp" "maybe param" "maybe type" "temp"
    (660621 'move' call_tmp[660618](425790 call _cond_invalid tmp[425777]))
    if call_tmp[660618]
    {
      (425793 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566645] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566646] "maybe param" "temp"
    unknown call_tmp[660623] "expr temp" "maybe param" "maybe type" "temp"
    (660626 'move' call_tmp[660623](425778 call isTrue tmp[425777]))
    (566651 'move' tmp[566646](566649 call _cond_test call_tmp[660623]))
    if tmp[566646]
    {
      (566656 'move' tmp[566645](566653 '_paramFoldLogical' tmp[566646] 1))
    }
    {
      unknown tmp[566658] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660630] "expr temp" "maybe param" "maybe type" "temp"
      (660633 'move' call_tmp[660630](133085 call rank _mt[243] this[133836]))
      unknown call_tmp[660635] "expr temp" "maybe param" "maybe type" "temp"
      (660638 'move' call_tmp[660635](133089 call != call_tmp[660630] 1))
      (566660 'move' tmp[566658](425782 call isTrue call_tmp[660635]))
      (566665 'move' tmp[566645](566662 '_paramFoldLogical' tmp[566646] tmp[566658]))
    }
    unknown call_tmp[660640] "expr temp" "maybe param" "maybe type" "temp"
    (660643 'move' call_tmp[660640](133114 call _cond_test tmp[566645]))
    if call_tmp[660640]
    {
      (133112 call compilerError "back() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425798] "maybe param" "temp"
    (425809 'move' tmp[425798] 1)
    unknown call_tmp[660645] "expr temp" "maybe param" "maybe type" "temp"
    (660648 'move' call_tmp[660645](425811 call _cond_invalid tmp[425798]))
    if call_tmp[660645]
    {
      (425814 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566672] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566673] "maybe param" "temp"
    unknown call_tmp[660650] "expr temp" "maybe param" "maybe type" "temp"
    (660653 'move' call_tmp[660650](425799 call isTrue tmp[425798]))
    (566678 'move' tmp[566673](566676 call _cond_test call_tmp[660650]))
    if tmp[566673]
    {
      unknown tmp[566680] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660657] "expr temp" "maybe param" "maybe type" "temp"
      (660660 'move' call_tmp[660657](133123 call(384440 call (partial) isEmpty _mt[243] this[133836])))
      (566682 'move' tmp[566680](425802 call isTrue call_tmp[660657]))
      (566687 'move' tmp[566672](566684 '_paramFoldLogical' tmp[566673] tmp[566680]))
    }
    {
      (566692 'move' tmp[566672](566689 '_paramFoldLogical' tmp[566673] 0))
    }
    unknown call_tmp[660662] "expr temp" "maybe param" "maybe type" "temp"
    (660665 'move' call_tmp[660662](133147 call _cond_test tmp[566672]))
    if call_tmp[660662]
    {
      (133145 call halt "back called on an empty array")
    }
    unknown call_tmp[660669] "expr temp" "maybe param" "maybe type" "temp"
    (660672 'move' call_tmp[660669](133154 call _dom _mt[243] this[133836]))
    unknown call_tmp[660676] "expr temp" "maybe param" "maybe type" "temp"
    (660679 'move' call_tmp[660676](133157 call high _mt[243] call_tmp[660669]))
    unknown call_tmp[660681] "expr temp" "maybe param" "maybe type" "temp"
    (660684 'move' call_tmp[660681](133161 call this[133836] call_tmp[660676]))
    (518437 'move' ret[518432](518436 'deref' call_tmp[660681]))
    (518434 return ret[518432])
  }
  function _array[133594](?).front[133168](arg _mt[133842]:_MT[238], arg this[133840]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518441] "RVV" "temp"
    unknown tmp[425819] "maybe param" "temp"
    unknown call_tmp[660686] "expr temp" "maybe param" "maybe type" "temp"
    (660689 'move' call_tmp[660686](133173 call isRectangularArr this[133840]))
    (425830 'move' tmp[425819](133174 call ! call_tmp[660686]))
    unknown call_tmp[660691] "expr temp" "maybe param" "maybe type" "temp"
    (660694 'move' call_tmp[660691](425832 call _cond_invalid tmp[425819]))
    if call_tmp[660691]
    {
      (425835 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566699] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566700] "maybe param" "temp"
    unknown call_tmp[660696] "expr temp" "maybe param" "maybe type" "temp"
    (660699 'move' call_tmp[660696](425820 call isTrue tmp[425819]))
    (566705 'move' tmp[566700](566703 call _cond_test call_tmp[660696]))
    if tmp[566700]
    {
      (566710 'move' tmp[566699](566707 '_paramFoldLogical' tmp[566700] 1))
    }
    {
      unknown tmp[566712] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660703] "expr temp" "maybe param" "maybe type" "temp"
      (660706 'move' call_tmp[660703](133177 call rank _mt[243] this[133840]))
      unknown call_tmp[660708] "expr temp" "maybe param" "maybe type" "temp"
      (660711 'move' call_tmp[660708](133181 call != call_tmp[660703] 1))
      (566714 'move' tmp[566712](425824 call isTrue call_tmp[660708]))
      (566719 'move' tmp[566699](566716 '_paramFoldLogical' tmp[566700] tmp[566712]))
    }
    unknown call_tmp[660713] "expr temp" "maybe param" "maybe type" "temp"
    (660716 'move' call_tmp[660713](133206 call _cond_test tmp[566699]))
    if call_tmp[660713]
    {
      (133204 call compilerError "front() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425840] "maybe param" "temp"
    (425851 'move' tmp[425840] 1)
    unknown call_tmp[660718] "expr temp" "maybe param" "maybe type" "temp"
    (660721 'move' call_tmp[660718](425853 call _cond_invalid tmp[425840]))
    if call_tmp[660718]
    {
      (425856 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566726] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566727] "maybe param" "temp"
    unknown call_tmp[660723] "expr temp" "maybe param" "maybe type" "temp"
    (660726 'move' call_tmp[660723](425841 call isTrue tmp[425840]))
    (566732 'move' tmp[566727](566730 call _cond_test call_tmp[660723]))
    if tmp[566727]
    {
      unknown tmp[566734] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660730] "expr temp" "maybe param" "maybe type" "temp"
      (660733 'move' call_tmp[660730](133215 call(384447 call (partial) isEmpty _mt[243] this[133840])))
      (566736 'move' tmp[566734](425844 call isTrue call_tmp[660730]))
      (566741 'move' tmp[566726](566738 '_paramFoldLogical' tmp[566727] tmp[566734]))
    }
    {
      (566746 'move' tmp[566726](566743 '_paramFoldLogical' tmp[566727] 0))
    }
    unknown call_tmp[660735] "expr temp" "maybe param" "maybe type" "temp"
    (660738 'move' call_tmp[660735](133239 call _cond_test tmp[566726]))
    if call_tmp[660735]
    {
      (133237 call halt "front called on an empty array")
    }
    unknown call_tmp[660742] "expr temp" "maybe param" "maybe type" "temp"
    (660745 'move' call_tmp[660742](133246 call _dom _mt[243] this[133840]))
    unknown call_tmp[660749] "expr temp" "maybe param" "maybe type" "temp"
    (660752 'move' call_tmp[660749](133249 call low _mt[243] call_tmp[660742]))
    unknown call_tmp[660754] "expr temp" "maybe param" "maybe type" "temp"
    (660757 'move' call_tmp[660754](133253 call this[133840] call_tmp[660749]))
    (518446 'move' ret[518441](518445 'deref' call_tmp[660754]))
    (518443 return ret[518441])
  }
  function _array[133594](?).reverse[133260](arg _mt[133846]:_MT[238], arg this[133844]:_array[133594](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660761] "expr temp" "maybe param" "maybe type" "temp"
    (660764 'move' call_tmp[660761](133264 call(384454 call (partial) chpl__isDense1DArray _mt[243] this[133844])))
    unknown call_tmp[660766] "expr temp" "maybe param" "maybe type" "temp"
    (660769 'move' call_tmp[660766](133265 call ! call_tmp[660761]))
    unknown call_tmp[660771] "expr temp" "maybe param" "maybe type" "temp"
    (660774 'move' call_tmp[660771](133288 call _cond_test call_tmp[660766]))
    if call_tmp[660771]
    {
      (133286 call compilerError "reverse() is only supported on dense 1D arrays")
    }
    unknown call_tmp[660778] "expr temp" "maybe param" "maybe type" "temp"
    (660781 'move' call_tmp[660778](133295 call _dom _mt[243] this[133844]))
    unknown call_tmp[660785] "maybe param" "maybe type" "temp"
    (660788 'move' call_tmp[660785](133298 call low _mt[243] call_tmp[660778]))
    const lo[133301] "dead at end of block" "const" "insert auto destroy"
    (543171 'init var' lo[133301] call_tmp[660785])
    unknown call_tmp[660792] "expr temp" "maybe param" "maybe type" "temp"
    (660795 'move' call_tmp[660792](133305 call _dom _mt[243] this[133844]))
    unknown call_tmp[660799] "expr temp" "maybe param" "maybe type" "temp"
    (660802 'move' call_tmp[660799](133308 call size _mt[243] call_tmp[660792]))
    unknown call_tmp[660804] "maybe param" "maybe type" "temp"
    (660807 'move' call_tmp[660804](133312 call / call_tmp[660799] 2))
    const mid[133314] "dead at end of block" "const" "insert auto destroy"
    (543173 'init var' mid[133314] call_tmp[660804])
    unknown call_tmp[660811] "expr temp" "maybe param" "maybe type" "temp"
    (660814 'move' call_tmp[660811](133318 call _dom _mt[243] this[133844]))
    unknown call_tmp[660818] "maybe param" "maybe type" "temp"
    (660821 'move' call_tmp[660818](133321 call high _mt[243] call_tmp[660811]))
    const hi[133324] "dead at end of block" "const" "insert auto destroy"
    (543175 'init var' hi[133324] call_tmp[660818])
    (133327 'end of statement')
    {
      unknown _indexOfInterest[133353] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133354] "expr temp" "temp"
      unknown call_tmp[660823] "expr temp" "maybe param" "maybe type" "temp"
      (660826 'move' call_tmp[660823](133370 call chpl_direct_counted_range_iter 0 mid[133314]))
      (133363 'move' _iterator[133354](133361 call _getIterator call_tmp[660823]))
      Defer
      {
        {
          (133386 call _freeIterator _iterator[133354])
        }
      }
      { scopeless type
        (133375 'move' _indexOfInterest[133353](133372 call iteratorIndex _iterator[133354]))
      }
      ForLoop[133355]
      {
        unknown i[133379] "index var" "insert auto destroy"
        (480449 'end of statement')
        (133381 'move' i[133379] _indexOfInterest[133353])
        (480450 'end of statement' i[133379])
        {
          unknown call_tmp[660828] "expr temp" "maybe param" "maybe type" "temp"
          (660831 'move' call_tmp[660828](133338 call + lo[133301] i[133379]))
          unknown call_tmp[660833] "expr temp" "maybe param" "maybe type" "temp"
          (660836 'move' call_tmp[660833](133341 call this[133844] call_tmp[660828]))
          unknown call_tmp[660838] "expr temp" "maybe param" "maybe type" "temp"
          (660841 'move' call_tmp[660838](133345 call - hi[133324] i[133379]))
          unknown call_tmp[660843] "expr temp" "maybe param" "maybe type" "temp"
          (660846 'move' call_tmp[660843](133348 call this[133844] call_tmp[660838]))
          (133349 call <=> call_tmp[660833] call_tmp[660843])
          (480452 'end of statement' lo[133301] i[133379] hi[133324] i[133379])
        }
        label _continueLabel[133358]
        _indexOfInterest[133353]
        _iterator[133354]
      }
      label _breakLabel[133359]
    }
    (518448 return _void[55])
  }
  function _array[133594](?).find[133404](arg _mt[133850]:_MT[238], arg this[133848]:_array[133594](?), arg val[133401] :
  (133398 call eltType _mt[243] this[133848])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518452] "RVV" "temp"
    {
      unknown _indexOfInterest[133442] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133443] "expr temp" "temp"
      unknown call_tmp[660852] "expr temp" "maybe param" "maybe type" "temp"
      (660855 'move' call_tmp[660852](133419 call _dom _mt[243] this[133848]))
      (133452 'move' _iterator[133443](133450 call _getIterator call_tmp[660852]))
      Defer
      {
        {
          (133469 call _freeIterator _iterator[133443])
        }
      }
      { scopeless type
        (133458 'move' _indexOfInterest[133442](133455 call iteratorIndex _iterator[133443]))
      }
      ForLoop[133444]
      {
        unknown i[133462] "index var" "insert auto destroy"
        (480458 'end of statement')
        (133464 'move' i[133462] _indexOfInterest[133442])
        (480459 'end of statement' i[133462])
        {
          unknown call_tmp[660857] "expr temp" "maybe param" "maybe type" "temp"
          (660860 'move' call_tmp[660857](133425 call this[133848] i[133462]))
          unknown call_tmp[660862] "expr temp" "maybe param" "maybe type" "temp"
          (660865 'move' call_tmp[660862](133427 call == call_tmp[660857] val[133401]))
          unknown call_tmp[660867] "expr temp" "maybe param" "maybe type" "temp"
          (660870 'move' call_tmp[660867](133436 call _cond_test call_tmp[660862]))
          if call_tmp[660867]
          {
            unknown call_tmp[660872] "expr temp" "maybe param" "maybe type" "temp"
            (660875 'move' call_tmp[660872](133432 call _build_tuple 1 i[133462]))
            unknown call_tmp[660879] "expr temp" "maybe param" "maybe type" "temp"
            (660882 'move' call_tmp[660879](518462 call _dom _mt[243] this[133848]))
            unknown call_tmp[660884] "expr temp" "maybe param" "maybe type" "temp"
            (660887 'move' call_tmp[660884](518460 call chpl__buildIndexType call_tmp[660879]))
            unknown call_tmp[660889] "expr temp" "maybe param" "maybe type" "temp"
            (660892 'move' call_tmp[660889](518457 call _build_tuple bool[10] call_tmp[660884]))
            (518466 'move' ret[518452](518465 'coerce' call_tmp[660872] call_tmp[660889]))
            gotoReturn _end_find[518450] _end_find[518450]
            (480461 'end of statement' i[133462])
          }
        }
        label _continueLabel[133447]
        _indexOfInterest[133442]
        _iterator[133443]
      }
      label _breakLabel[133448]
    }
    unknown arbInd[133484] "dead at end of block" "insert auto destroy"
    unknown call_tmp[660896] "expr temp" "maybe param" "maybe type" "temp"
    (660899 'move' call_tmp[660896](133478 call _dom _mt[243] this[133848]))
    unknown call_tmp[660901] "expr temp" "maybe param" "maybe type" "temp"
    (660904 'move' call_tmp[660901](133482 call chpl__buildIndexType call_tmp[660896]))
    (543177 'default init var' arbInd[133484] call_tmp[660901])
    (133487 'end of statement')
    unknown call_tmp[660906] "expr temp" "maybe param" "maybe type" "temp"
    (660909 'move' call_tmp[660906](133491 call _build_tuple 0 arbInd[133484]))
    unknown call_tmp[660913] "expr temp" "maybe param" "maybe type" "temp"
    (660916 'move' call_tmp[660913](518476 call _dom _mt[243] this[133848]))
    unknown call_tmp[660918] "expr temp" "maybe param" "maybe type" "temp"
    (660921 'move' call_tmp[660918](518474 call chpl__buildIndexType call_tmp[660913]))
    unknown call_tmp[660923] "expr temp" "maybe param" "maybe type" "temp"
    (660926 'move' call_tmp[660923](518471 call _build_tuple bool[10] call_tmp[660918]))
    (518480 'move' ret[518452](518479 'coerce' call_tmp[660906] call_tmp[660923]))
    gotoReturn _end_find[518450] _end_find[518450]
    (480463 'end of statement' arbInd[133484])
    label _end_find[518450]
    (518454 return ret[518452])
  }
  { scopeless type
    unknown call_tmp[660930] "expr temp" "maybe param" "maybe type" "temp"
    (660933 'move' call_tmp[660930](133408 call _dom _mt[243] this[133848]))
    unknown call_tmp[660935] "expr temp" "maybe param" "maybe type" "temp"
    (660938 'move' call_tmp[660935](133412 call chpl__buildIndexType call_tmp[660930]))
    (133415 call _build_tuple bool[10] call_tmp[660935])
  }
  function _array[133594](?).count[133507](arg _mt[133854]:_MT[238], arg this[133852]:_array[133594](?), arg val[133504] :
  (133501 call eltType _mt[243] this[133852])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518486] "RVV" "temp"
    unknown call_tmp[660942] "expr temp" "maybe param" "maybe type" "temp"
    (660945 'move' call_tmp[660942](133513 call == this[133852] val[133504]))
    unknown call_tmp[660947] "expr temp" "maybe param" "maybe type" "temp"
    (660950 'move' call_tmp[660947](133515 'reduce' SumReduceScanOp[376483](?) call_tmp[660942] 0))
    (518492 'move' ret[518486](518491 'coerce' call_tmp[660947] int(64)[13]))
    (518488 return ret[518486])
  }
  { scopeless type
    int(64)[13]
  }
  function _array[133594](?).shape[133525](arg _mt[133858]:_MT[238], arg this[133856]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518496] "RVV" "temp"
    unknown call_tmp[660954] "expr temp" "maybe param" "maybe type" "temp"
    (660957 'move' call_tmp[660954](133528 call _dom _mt[243] this[133856]))
    unknown call_tmp[660961] "expr temp" "maybe param" "maybe type" "temp"
    (660964 'move' call_tmp[660961](133533 call shape _mt[243] call_tmp[660954]))
    (518501 'move' ret[518496](518500 'deref' call_tmp[660961]))
    (518498 return ret[518496])
  }
  function _array[133594](?)._scan[133545](arg _mt[133862]:_MT[238], arg this[133860]:_array[133594](?), arg op[133543]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518505] "RVV" "temp"
    unknown call_tmp[660968] "expr temp" "maybe param" "maybe type" "temp"
    (660971 'move' call_tmp[660968](360163 call _value _mt[243] this[133860]))
    unknown call_tmp[660977] "expr temp" "maybe param" "maybe type" "temp"
    (660980 'move' call_tmp[660977](133583 call _dom _mt[243] this[133860]))
    unknown call_tmp[660982] "expr temp" "maybe param" "maybe type" "temp"
    (660985 'move' call_tmp[660982](133586 call(133577 call (partial) doiScan _mt[243] call_tmp[660968]) op[133543] call_tmp[660977]))
    (518510 'move' ret[518505](518509 'deref' call_tmp[660982]))
    (518507 return ret[518505])
  }
  where {
    unknown call_tmp[660989] "expr temp" "maybe param" "maybe type" "temp"
    (660992 'move' call_tmp[660989](384473 call _value _mt[243] this[133860]))
    unknown call_tmp[660996] "expr temp" "maybe param" "maybe type" "temp"
    (660999 'move' call_tmp[660996](133572 call _dom _mt[243] this[133860]))
    (133575 call canResolveMethod module=[255] Reflection[224970] call_tmp[660989] "doiScan" op[133543] call_tmp[660996])
    (360156 'referenced modules list' Reflection[224970])
  }
  function _array[133594](?)._pid[800123](arg _mt[800125]:_MT[238], ref arg this[800127]:_array[133594](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[800137] "RVV" "temp"
    unknown call_tmp[800144] "expr temp" "maybe param" "maybe type" "temp"
    (800147 'move' call_tmp[800144](800131 '.' this[800127] c"_pid"))
    (800142 'move' ret[800137](800141 'addr of' call_tmp[800144]))
    (800139 return ret[800137])
  }
  function _array[133594](?)._instance[800149](arg _mt[800151]:_MT[238], ref arg this[800153]:_array[133594](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[800163] "RVV" "temp"
    unknown call_tmp[800170] "expr temp" "maybe param" "maybe type" "temp"
    (800173 'move' call_tmp[800170](800157 '.' this[800153] c"_instance"))
    (800168 'move' ret[800163](800167 'addr of' call_tmp[800170]))
    (800165 return ret[800163])
  }
  function _array[133594](?)._unowned[800175](arg _mt[800177]:_MT[238], ref arg this[800179]:_array[133594](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[800189] "RVV" "temp"
    unknown call_tmp[800196] "expr temp" "maybe param" "maybe type" "temp"
    (800199 'move' call_tmp[800196](800183 '.' this[800179] c"_unowned"))
    (800194 'move' ret[800189](800193 'addr of' call_tmp[800196]))
    (800191 return ret[800189])
  }
  function _array[133594](?).init[800201](arg _mt[800203]:_MT[238], ref arg this[800204]:_array[133594](?), in arg _pid[800207]:int(64)[13] =
  _typeDefaultT[250], in arg _instance[800220]:_any[178](?), in arg _unowned[800229]:bool[10] =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (800243 'init field' this[800204] c"_pid" _pid[800207])
    (800246 'init field' this[800204] c"_instance" _instance[800220])
    (800252 'end of statement')
    (800249 'init field' this[800204] c"_unowned" _unowned[800229])
    (800254 return _void[55])
  }
  function _array[133594](?).init=[800256](arg _mt[800259]:_MT[238], ref arg this[800260]:_array[133594](?), arg other[800263] :
  (800262 'typeof' this[800260])) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[800331] "maybe param" "maybe type" "temp"
    (800334 'move' call_tmp[800331](800272 call _pid _mt[243] other[800263]))
    unknown tmp[800298] "temp"
    (800301 'init var' tmp[800298] call_tmp[800331] int(64)[13])
    (800303 'init field' this[800260] c"_pid" tmp[800298])
    (800324 'end of statement')
    unknown call_tmp[800338] "maybe param" "maybe type" "temp"
    (800341 'move' call_tmp[800338](800282 call _instance _mt[243] other[800263]))
    unknown tmp[800307] "temp"
    (800309 'init var' tmp[800307] call_tmp[800338])
    (800311 'init field' this[800260] c"_instance" tmp[800307])
    (800325 'end of statement')
    unknown call_tmp[800345] "maybe param" "maybe type" "temp"
    (800348 'move' call_tmp[800345](800292 call _unowned _mt[243] other[800263]))
    unknown tmp[800315] "temp"
    (800318 'init var' tmp[800315] call_tmp[800345] bool[10])
    (800320 'init field' this[800260] c"_unowned" tmp[800315])
    (800326 'end of statement')
    (800327 return _void[55])
  }
  type _array[133594](?) val _pid[128421]:int(64)[13] int(64)[13] unknown _instance[128425] "alias scope from this" "owned" val _unowned[128430]:bool[10] bool[10] forwarding ( )
  function _do_destroy_arr[133871](arg _unowned[133868]:bool[10], arg _instance[133873]:_any[178](?), arg deinitElts[133876] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[661001] "expr temp" "maybe param" "maybe type" "temp"
    (661004 'move' call_tmp[661001](133880 call ! _unowned[133868]))
    unknown call_tmp[661006] "expr temp" "maybe param" "maybe type" "temp"
    (661009 'move' call_tmp[661006](134119 call _cond_test call_tmp[661001]))
    if call_tmp[661006]
    {
      const tmp[134095] "const" "temp"
      unknown call_tmp[661011] "expr temp" "maybe param" "maybe type" "temp"
      (661014 'move' call_tmp[661011](134092 '_wide_get_locale' _instance[133873]))
      (134097 'move' tmp[134095](134093 'deref' call_tmp[661011]))
      (935336 call on_fn[935332] tmp[134095])
      function on_fn[935332](const in arg dummy_locale_arg[935334]:chpl_localeID_t[209352]) : void[4] "on"
      {
        {
          unknown call_tmp[661018] "expr temp" "maybe param" "maybe type" "temp"
          (661021 'move' call_tmp[661018](133888 call(133884 call (partial) isSliceArrayView _mt[243] _instance[133873])))
          unknown call_tmp[661023] "maybe param" "maybe type" "temp"
          (661026 'move' call_tmp[661023](133889 call ! call_tmp[661018]))
          unknown arrIsInList[133891] "dead at end of block" "param"
          (543179 'init var' arrIsInList[133891] call_tmp[661023])
          (133894 'end of statement')
          unknown call_tmp[661030] "maybe param" "maybe type" "temp"
          (661033 'move' call_tmp[661030](133907 call(133902 call (partial) remove _mt[243] _instance[133873]) arrIsInList[133891]))
          unknown tmp[133908] "dead at end of block" "insert auto destroy" "temp"
          (543181 'init var' tmp[133908] call_tmp[661030])
          (133915 call _check_tuple_var_decl tmp[133908] 2)
          (480468 'end of statement')
          unknown call_tmp[661035] "maybe param" "maybe type" "temp"
          (661038 'move' call_tmp[661035](133909 call tmp[133908] 0))
          unknown arrToFree[133896] "dead at end of block" "insert auto destroy"
          (543183 'init var' arrToFree[133896] call_tmp[661035])
          unknown call_tmp[661040] "maybe param" "maybe type" "temp"
          (661043 'move' call_tmp[661040](133912 call tmp[133908] 1))
          unknown domToRemove[133898] "dead at end of block" "insert auto destroy"
          (543185 'init var' domToRemove[133898] call_tmp[661040])
          (133920 'end of statement')
          unknown domToFree[133925] "dead at end of block" "insert auto destroy"
          (543187 'init var' domToFree[133925] nil[44] unmanaged BaseDom?[415581])
          (133928 'end of statement')
          unknown distToRemove[133933] "dead at end of block" "insert auto destroy"
          (543189 'init var' distToRemove[133933] nil[44] unmanaged BaseDist?[415575])
          (133936 'end of statement')
          unknown distToFree[133941] "dead at end of block" "insert auto destroy"
          (543191 'init var' distToFree[133941] nil[44] unmanaged BaseDist?[415575])
          (133944 'end of statement')
          unknown domIsPrivatized[133946] "dead at end of block" "insert auto destroy"
          (543193 'init var' domIsPrivatized[133946] 0)
          (133949 'end of statement')
          const instanceDom[133951] "dead at end of block" "const" "insert auto destroy"
          (543195 'init var' instanceDom[133951] domToRemove[133898])
          (133954 'end of statement')
          unknown call_tmp[661045] "expr temp" "maybe param" "maybe type" "temp"
          (661048 'move' call_tmp[661045](133957 call != domToRemove[133898] nil[44]))
          unknown call_tmp[661050] "expr temp" "maybe param" "maybe type" "temp"
          (661053 'move' call_tmp[661050](133992 call _cond_test call_tmp[661045]))
          if call_tmp[661050]
          {
            unknown tmp[492341] "expr temp" "maybe param" "maybe type" "temp"
            unknown tmp[492366] "maybe param" "temp"
            (492369 'move' tmp[492366](492367 'addr of' domToFree[133925]))
            unknown tmp[492377] "maybe param" "temp"
            (492380 'move' tmp[492377](492378 'addr of' distToRemove[133933]))
            unknown call_tmp[661055] "expr temp" "maybe param" "maybe type" "temp"
            (661058 'move' call_tmp[661055](133965 call postfix! domToRemove[133898]))
            (492342 'move' tmp[492341](133971 call(133967 call (partial) remove _mt[243] call_tmp[661055])))
            { scopeless
              unknown call_tmp[661064] "expr temp" "maybe param" "maybe type" "temp"
              (661067 'move' call_tmp[661064](492348 call size _mt[243] tmp[492341]))
              unknown call_tmp[661069] "expr temp" "maybe param" "maybe type" "temp"
              (661072 'move' call_tmp[661069](492351 call != 2 call_tmp[661064]))
              unknown call_tmp[661074] "expr temp" "maybe param" "maybe type" "temp"
              (661077 'move' call_tmp[661074](492358 call _cond_test call_tmp[661069]))
              if call_tmp[661074]
              {
                (492354 call compilerError "tuple size must match the number of grouped variables" 0)
              }
            }
            unknown call_tmp[661079] "expr temp" "maybe param" "maybe type" "temp"
            (661082 'move' call_tmp[661079](492364 call tmp[492341] 0))
            (492371 call = tmp[492366] call_tmp[661079])
            unknown call_tmp[661084] "expr temp" "maybe param" "maybe type" "temp"
            (661087 'move' call_tmp[661084](492375 call tmp[492341] 1))
            (492382 call = tmp[492377] call_tmp[661084])
            (480470 'end of statement' domToFree[133925] distToRemove[133933] domToRemove[133898])
            unknown tmp[425861] "maybe param" "temp"
            (425872 'move' tmp[425861] 1)
            unknown call_tmp[661089] "expr temp" "maybe param" "maybe type" "temp"
            (661092 'move' call_tmp[661089](425874 call _cond_invalid tmp[425861]))
            if call_tmp[661089]
            {
              (425877 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566753] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566754] "maybe param" "temp"
            unknown call_tmp[661094] "expr temp" "maybe param" "maybe type" "temp"
            (661097 'move' call_tmp[661094](425862 call isTrue tmp[425861]))
            (566759 'move' tmp[566754](566757 call _cond_test call_tmp[661094]))
            if tmp[566754]
            {
              unknown tmp[566761] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[661099] "expr temp" "maybe param" "maybe type" "temp"
              (661102 'move' call_tmp[661099](133979 call postfix! domToRemove[133898]))
              unknown call_tmp[661106] "expr temp" "maybe param" "maybe type" "temp"
              (661109 'move' call_tmp[661106](133981 call pid _mt[243] call_tmp[661099]))
              unknown call_tmp[661111] "expr temp" "maybe param" "maybe type" "temp"
              (661114 'move' call_tmp[661111](133985 call != call_tmp[661106] nullPid[113718]))
              (566763 'move' tmp[566761](425865 call isTrue call_tmp[661111]))
              (566768 'move' tmp[566753](566765 '_paramFoldLogical' tmp[566754] tmp[566761]))
            }
            {
              (566773 'move' tmp[566753](566770 '_paramFoldLogical' tmp[566754] 0))
            }
            (133989 call = domIsPrivatized[133946] tmp[566753])
            (480475 'end of statement' domIsPrivatized[133946] domToRemove[133898])
          }
          unknown distIsPrivatized[133997] "dead at end of block" "insert auto destroy"
          (543197 'init var' distIsPrivatized[133997] 0)
          (134000 'end of statement' domToRemove[133898])
          unknown call_tmp[661116] "expr temp" "maybe param" "maybe type" "temp"
          (661119 'move' call_tmp[661116](134003 call != distToRemove[133933] nil[44]))
          unknown call_tmp[661121] "expr temp" "maybe param" "maybe type" "temp"
          (661124 'move' call_tmp[661121](134034 call _cond_test call_tmp[661116]))
          if call_tmp[661121]
          {
            unknown call_tmp[661126] "expr temp" "maybe param" "maybe type" "temp"
            (661129 'move' call_tmp[661126](134007 call postfix! distToRemove[133933]))
            unknown call_tmp[661133] "expr temp" "maybe param" "maybe type" "temp"
            (661136 'move' call_tmp[661133](134013 call(134009 call (partial) remove _mt[243] call_tmp[661126])))
            (134014 call = distToFree[133941] call_tmp[661133])
            (480478 'end of statement' distToFree[133941] distToRemove[133933])
            unknown tmp[425882] "maybe param" "temp"
            (425893 'move' tmp[425882] 1)
            unknown call_tmp[661138] "expr temp" "maybe param" "maybe type" "temp"
            (661141 'move' call_tmp[661138](425895 call _cond_invalid tmp[425882]))
            if call_tmp[661138]
            {
              (425898 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566780] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566781] "maybe param" "temp"
            unknown call_tmp[661143] "expr temp" "maybe param" "maybe type" "temp"
            (661146 'move' call_tmp[661143](425883 call isTrue tmp[425882]))
            (566786 'move' tmp[566781](566784 call _cond_test call_tmp[661143]))
            if tmp[566781]
            {
              unknown tmp[566788] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[661148] "expr temp" "maybe param" "maybe type" "temp"
              (661151 'move' call_tmp[661148](134021 call postfix! distToRemove[133933]))
              unknown call_tmp[661155] "expr temp" "maybe param" "maybe type" "temp"
              (661158 'move' call_tmp[661155](134023 call pid _mt[243] call_tmp[661148]))
              unknown call_tmp[661160] "expr temp" "maybe param" "maybe type" "temp"
              (661163 'move' call_tmp[661160](134027 call != call_tmp[661155] nullPid[113718]))
              (566790 'move' tmp[566788](425886 call isTrue call_tmp[661160]))
              (566795 'move' tmp[566780](566792 '_paramFoldLogical' tmp[566781] tmp[566788]))
            }
            {
              (566800 'move' tmp[566780](566797 '_paramFoldLogical' tmp[566781] 0))
            }
            (134031 call = distIsPrivatized[133997] tmp[566780])
            (480482 'end of statement' distIsPrivatized[133997] distToRemove[133933])
          }
          unknown call_tmp[661165] "expr temp" "maybe param" "maybe type" "temp"
          (661168 'move' call_tmp[661165](134040 call != arrToFree[133896] nil[44]))
          unknown call_tmp[661170] "expr temp" "maybe param" "maybe type" "temp"
          (661173 'move' call_tmp[661170](134053 call _cond_test call_tmp[661165]))
          if call_tmp[661170]
          {
            unknown call_tmp[661175] "expr temp" "maybe param" "maybe type" "temp"
            (661178 'move' call_tmp[661175](134048 call _isPrivatized _instance[133873]))
            (134051 call _delete_arr _instance[133873] call_tmp[661175](deinitElts = deinitElts[133876]))
          }
          unknown call_tmp[661180] "expr temp" "maybe param" "maybe type" "temp"
          (661183 'move' call_tmp[661180](134060 call != domToFree[133925] nil[44]))
          unknown call_tmp[661185] "expr temp" "maybe param" "maybe type" "temp"
          (661188 'move' call_tmp[661185](134070 call _cond_test call_tmp[661180]))
          if call_tmp[661185]
          {
            unknown call_tmp[661190] "expr temp" "maybe param" "maybe type" "temp"
            (661193 'move' call_tmp[661190](134064 call postfix! instanceDom[133951]))
            (134068 call _delete_dom call_tmp[661190] domIsPrivatized[133946])
            (480486 'end of statement' instanceDom[133951] domIsPrivatized[133946])
          }
          unknown call_tmp[661195] "expr temp" "maybe param" "maybe type" "temp"
          (661198 'move' call_tmp[661195](134077 call != distToFree[133941] nil[44]))
          unknown call_tmp[661200] "expr temp" "maybe param" "maybe type" "temp"
          (661203 'move' call_tmp[661200](134087 call _cond_test call_tmp[661195]))
          if call_tmp[661200]
          {
            unknown call_tmp[661205] "expr temp" "maybe param" "maybe type" "temp"
            (661208 'move' call_tmp[661205](134081 call postfix! distToFree[133941]))
            (134085 call _delete_dist call_tmp[661205] distIsPrivatized[133997])
            (480489 'end of statement' distToFree[133941] distIsPrivatized[133997])
          }
        }
        (935339 return _void[55])
      }
      {
      }
    }
    {
      unknown call_tmp[661210] "expr temp" "maybe param" "maybe type" "temp"
      (661213 'move' call_tmp[661210](134107 call chpl__isArrayView _instance[133873]))
      unknown call_tmp[661215] "expr temp" "maybe param" "maybe type" "temp"
      (661218 'move' call_tmp[661215](134114 call _cond_test call_tmp[661210]))
      if call_tmp[661215]
      {
        (134110 call chpl__delete _instance[133873])
      }
    }
    (518512 return _void[55])
  }
  function _do_destroy_array[134132](arg array[134129]:_array[133594](?), arg deinitElts[134135] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[661222] "expr temp" "maybe param" "maybe type" "temp"
    (661225 'move' call_tmp[661222](134140 call _unowned _mt[243] array[134129]))
    unknown call_tmp[661229] "expr temp" "maybe param" "maybe type" "temp"
    (661232 'move' call_tmp[661229](134145 call _instance _mt[243] array[134129]))
    (134149 call _do_destroy_arr call_tmp[661222] call_tmp[661229] deinitElts[134135])
    (518514 return _void[55])
  }
  function _deinitElementsIsParallel[134158](arg eltType[134156]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518518] "RVV" "param" "temp"
    (518523 'move' ret[518518](518522 'deref' 0))
    (518520 return ret[518518])
  }
  function _deinitElements[134172](arg array[134169]:_array[133594](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[661236] "expr temp" "maybe param" "maybe type" "temp"
    (661239 'move' call_tmp[661236](134177 call eltType _mt[243] array[134169]))
    unknown call_tmp[661241] "maybe param" "maybe type" "temp"
    (661244 'move' call_tmp[661241](134180 'needs auto destroy' call_tmp[661236]))
    unknown needsDestroy[134181] "dead at end of block" "param"
    (543199 'init var' needsDestroy[134181] call_tmp[661241])
    (134184 'end of statement')
    unknown call_tmp[661246] "expr temp" "maybe param" "maybe type" "temp"
    (661249 'move' call_tmp[661246](134255 call _cond_test needsDestroy[134181]))
    if call_tmp[661246]
    {
      unknown call_tmp[661253] "expr temp" "maybe param" "maybe type" "temp"
      (661256 'move' call_tmp[661253](134189 call eltType _mt[243] array[134169]))
      unknown call_tmp[661258] "expr temp" "maybe param" "maybe type" "temp"
      (661261 'move' call_tmp[661258](134193 call _deinitElementsIsParallel call_tmp[661253]))
      unknown call_tmp[661263] "expr temp" "maybe param" "maybe type" "temp"
      (661266 'move' call_tmp[661263](134250 call _cond_test call_tmp[661258]))
      if call_tmp[661263]
      {
        Forall {
          induction variables:
            
            unknown elt[134203] "index var" "insert auto destroy"
          iterated expressions:
            array[134169]
          shadow variables:
          other variables
            forall body
          {
            (134199 call chpl__autoDestroy elt[134203])
            (480495 'end of statement' elt[134203])
          }
        }
      }
      {
        {
          unknown _indexOfInterest[134216] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[134217] "expr temp" "temp"
          (134226 'move' _iterator[134217](134224 call _getIterator array[134169]))
          Defer
          {
            {
              (134242 call _freeIterator _iterator[134217])
            }
          }
          { scopeless type
            (134231 'move' _indexOfInterest[134216](134228 call iteratorIndex _iterator[134217]))
          }
          ForLoop[134218]
          {
            unknown elt[134235] "index var" "insert auto destroy"
            (480498 'end of statement')
            (134237 'move' elt[134235] _indexOfInterest[134216])
            (480499 'end of statement' elt[134235])
            {
              (134213 call chpl__autoDestroy elt[134235])
              (480501 'end of statement' elt[134235])
            }
            label _continueLabel[134221]
            _indexOfInterest[134216]
            _iterator[134217]
          }
          label _breakLabel[134222]
        }
      }
    }
    unknown call_tmp[661270] "expr temp" "maybe param" "maybe type" "temp"
    (661273 'move' call_tmp[661270](134260 call _instance _mt[243] array[134169]))
    (134269 call(134265 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[661270]))
    (518525 return _void[55])
  }
  function _array[133594](?).equals[134280](arg _mt[134285]:_MT[238], arg this[134282]:_array[133594](?) :
  _array[133594](?), arg that[134277]:_array[133594](?)) : _unknown[51] "method"
  {
    unknown ret[518529] "RVV" "temp"
    unknown call_tmp[661279] "expr temp" "maybe param" "maybe type" "temp"
    (661282 'move' call_tmp[661279](134289 call _value _mt[243] this[134282]))
    unknown call_tmp[661286] "expr temp" "maybe param" "maybe type" "temp"
    (661289 'move' call_tmp[661286](134293 call _value _mt[243] that[134277]))
    unknown call_tmp[661291] "expr temp" "maybe param" "maybe type" "temp"
    (661294 'move' call_tmp[661291](134296 call == call_tmp[661279] call_tmp[661286]))
    unknown call_tmp[661296] "expr temp" "maybe param" "maybe type" "temp"
    (661299 'move' call_tmp[661296](134301 call _cond_test call_tmp[661291]))
    if call_tmp[661296]
    {
      (518535 'move' ret[518529](518534 'coerce' 1 bool[10]))
      gotoReturn _end_equals[518527] _end_equals[518527]
    }
    unknown call_tmp[661303] "expr temp" "maybe param" "maybe type" "temp"
    (661306 'move' call_tmp[661303](134308 call rank _mt[243] this[134282]))
    unknown call_tmp[661310] "expr temp" "maybe param" "maybe type" "temp"
    (661313 'move' call_tmp[661310](134312 call rank _mt[243] that[134277]))
    unknown call_tmp[661315] "expr temp" "maybe param" "maybe type" "temp"
    (661318 'move' call_tmp[661315](134315 call != call_tmp[661303] call_tmp[661310]))
    unknown call_tmp[661320] "expr temp" "maybe param" "maybe type" "temp"
    (661323 'move' call_tmp[661320](134320 call _cond_test call_tmp[661315]))
    if call_tmp[661320]
    {
      (518541 'move' ret[518529](518540 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518527] _end_equals[518527]
    }
    unknown call_tmp[661327] "expr temp" "maybe param" "maybe type" "temp"
    (661330 'move' call_tmp[661327](134326 call size _mt[243] this[134282]))
    unknown call_tmp[661334] "expr temp" "maybe param" "maybe type" "temp"
    (661337 'move' call_tmp[661334](134330 call size _mt[243] that[134277]))
    unknown call_tmp[661339] "expr temp" "maybe param" "maybe type" "temp"
    (661342 'move' call_tmp[661339](134333 call != call_tmp[661327] call_tmp[661334]))
    unknown call_tmp[661344] "expr temp" "maybe param" "maybe type" "temp"
    (661347 'move' call_tmp[661344](134338 call _cond_test call_tmp[661339]))
    if call_tmp[661344]
    {
      (518547 'move' ret[518529](518546 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518527] _end_equals[518527]
    }
    unknown tmp[425903] "maybe param" "temp"
    unknown call_tmp[661351] "expr temp" "maybe param" "maybe type" "temp"
    (661354 'move' call_tmp[661351](134345 call _dom _mt[243] this[134282]))
    (425914 'move' tmp[425903](134349 call isRectangularDom call_tmp[661351]))
    unknown call_tmp[661356] "expr temp" "maybe param" "maybe type" "temp"
    (661359 'move' call_tmp[661356](425916 call _cond_invalid tmp[425903]))
    if call_tmp[661356]
    {
      (425919 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566807] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566808] "maybe param" "temp"
    unknown call_tmp[661361] "expr temp" "maybe param" "maybe type" "temp"
    (661364 'move' call_tmp[661361](425904 call isTrue tmp[425903]))
    (566813 'move' tmp[566808](566811 call _cond_test call_tmp[661361]))
    if tmp[566808]
    {
      unknown tmp[566815] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661368] "expr temp" "maybe param" "maybe type" "temp"
      (661371 'move' call_tmp[661368](134352 call _dom _mt[243] that[134277]))
      unknown call_tmp[661373] "expr temp" "maybe param" "maybe type" "temp"
      (661376 'move' call_tmp[661373](134356 call isRectangularDom call_tmp[661368]))
      (566817 'move' tmp[566815](425907 call isTrue call_tmp[661373]))
      (566822 'move' tmp[566807](566819 '_paramFoldLogical' tmp[566808] tmp[566815]))
    }
    {
      (566827 'move' tmp[566807](566824 '_paramFoldLogical' tmp[566808] 0))
    }
    unknown call_tmp[661378] "expr temp" "maybe param" "maybe type" "temp"
    (661381 'move' call_tmp[661378](134449 call _cond_test tmp[566807]))
    if call_tmp[661378]
    {
      {
        unknown _indexOfInterest[134405] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[134406] "expr temp" "temp"
        unknown call_tmp[661385] "expr temp" "maybe param" "maybe type" "temp"
        (661388 'move' call_tmp[661385](134421 call rank _mt[243] this[134282]))
        unknown call_tmp[661390] "expr temp" "maybe param" "maybe type" "temp"
        (661393 'move' call_tmp[661390](134425 call chpl_direct_counted_range_iter 0 call_tmp[661385]))
        (134415 'move' _iterator[134406](134413 call _getIterator call_tmp[661390]))
        Defer
        {
          {
            (134441 call _freeIterator _iterator[134406])
          }
        }
        { scopeless type
          (134430 'move' _indexOfInterest[134405](134427 call iteratorIndex _iterator[134406]))
        }
        ForLoop[134407]
        {
          unknown d[134434] "index var" "insert auto destroy"
          (480509 'end of statement')
          (134436 'move' d[134434] _indexOfInterest[134405])
          (480510 'end of statement' d[134434])
          unknown call_tmp[661397] "expr temp" "maybe param" "maybe type" "temp"
          (661400 'move' call_tmp[661397](134370 call _dom _mt[243] this[134282]))
          unknown call_tmp[661404] "expr temp" "maybe param" "maybe type" "temp"
          (661407 'move' call_tmp[661404](134378 call(134373 call (partial) dim _mt[243] call_tmp[661397]) d[134434]))
          unknown call_tmp[661411] "expr temp" "maybe param" "maybe type" "temp"
          (661414 'move' call_tmp[661411](134379 call size _mt[243] call_tmp[661404]))
          unknown call_tmp[661418] "expr temp" "maybe param" "maybe type" "temp"
          (661421 'move' call_tmp[661418](134383 call _dom _mt[243] that[134277]))
          unknown call_tmp[661425] "expr temp" "maybe param" "maybe type" "temp"
          (661428 'move' call_tmp[661425](134391 call(134386 call (partial) dim _mt[243] call_tmp[661418]) d[134434]))
          unknown call_tmp[661432] "expr temp" "maybe param" "maybe type" "temp"
          (661435 'move' call_tmp[661432](134392 call size _mt[243] call_tmp[661425]))
          unknown call_tmp[661437] "expr temp" "maybe param" "maybe type" "temp"
          (661440 'move' call_tmp[661437](134395 call != call_tmp[661411] call_tmp[661432]))
          unknown call_tmp[661442] "expr temp" "maybe param" "maybe type" "temp"
          (661445 'move' call_tmp[661442](134400 call _cond_test call_tmp[661437]))
          if call_tmp[661442]
          {
            (518553 'move' ret[518529](518552 'coerce' 0 bool[10]))
            gotoReturn _end_equals[518527] _end_equals[518527]
          }
          label _continueLabel[134410]
          _indexOfInterest[134405]
          _iterator[134406]
        }
        label _breakLabel[134411]
      }
    }
    unknown call_tmp[661449] "expr temp" "maybe param" "maybe type" "temp"
    (661452 'move' call_tmp[661449](134455 call eltType _mt[243] this[134282]))
    unknown call_tmp[661454] "expr temp" "maybe param" "maybe type" "temp"
    (661457 'move' call_tmp[661454](134459 call isArrayType call_tmp[661449]))
    unknown call_tmp[661459] "expr temp" "maybe param" "maybe type" "temp"
    (661462 'move' call_tmp[661459](134525 call _cond_test call_tmp[661454]))
    if call_tmp[661459]
    {
      unknown ret[134461] "dead at end of block" "insert auto destroy"
      (543201 'init var' ret[134461] 1)
      (134464 'end of statement')
      Forall {
        induction variables:
          
          unknown thisArr[134506] "index var" "insert auto destroy"
          
          unknown thatArr[134508] "index var" "insert auto destroy"
        iterated expressions:
          this[134282]
          that[134277]
        shadow variables:
          ret[134477] 'reduce' intent outer var ret[134461]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown tmp[134494] "temp"
          (134497 'move' tmp[134494](134496 'addr of' ret[134477]))
          unknown tmp[425924] "maybe param" "temp"
          (425935 'move' tmp[425924] tmp[134494])
          unknown call_tmp[661464] "expr temp" "maybe param" "maybe type" "temp"
          (661467 'move' call_tmp[661464](425937 call _cond_invalid tmp[425924]))
          if call_tmp[661464]
          {
            (425940 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[566834] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[566835] "maybe param" "temp"
          unknown call_tmp[661469] "expr temp" "maybe param" "maybe type" "temp"
          (661472 'move' call_tmp[661469](425925 call isTrue tmp[425924]))
          (566840 'move' tmp[566835](566838 call _cond_test call_tmp[661469]))
          if tmp[566835]
          {
            unknown tmp[566842] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[661476] "expr temp" "maybe param" "maybe type" "temp"
            (661479 'move' call_tmp[661476](134492 call(134487 call (partial) equals _mt[243] thisArr[134506]) thatArr[134508]))
            (566844 'move' tmp[566842](425928 call isTrue call_tmp[661476]))
            (566849 'move' tmp[566834](566846 '_paramFoldLogical' tmp[566835] tmp[566842]))
          }
          {
            (566854 'move' tmp[566834](566851 '_paramFoldLogical' tmp[566835] 0))
          }
          (134502 call = tmp[134494] tmp[566834])
          (480514 'end of statement' thisArr[134506] thatArr[134508])
        }
      }
      (518559 'move' ret[518529](518558 'coerce' ret[134461] bool[10]))
      gotoReturn _end_equals[518527] _end_equals[518527]
      (480517 'end of statement' ret[134461])
    }
    {
      unknown call_tmp[661481] "expr temp" "maybe param" "maybe type" "temp"
      (661484 'move' call_tmp[661481](134518 call == this[134282] that[134277]))
      unknown call_tmp[661486] "expr temp" "maybe param" "maybe type" "temp"
      (661489 'move' call_tmp[661486](134520 'reduce' LogicalAndReduceScanOp[376730](?) call_tmp[661481] 0))
      (518565 'move' ret[518529](518564 'coerce' call_tmp[661486] bool[10]))
      gotoReturn _end_equals[518527] _end_equals[518527]
    }
    label _end_equals[518527]
    (518531 return ret[518529])
  }
  { scopeless type
    bool[10]
  }
  function _cast[134538](arg t[134535]:_array[133594](?), param arg arg[134540]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown ret[518571] "RVV" "temp"
    unknown result[134543] "dead at end of block" "insert auto destroy"
    (543203 'default init var' result[134543] t[134535])
    (134546 'end of statement')
    (134552 call chpl__transferArray result[134543] arg[134540])
    (480520 'end of statement' result[134543])
    (518576 'move' ret[518571](518575 'deref' result[134543]))
    gotoReturn _end__cast[518569] _end__cast[518569]
    (480522 'end of statement' result[134543])
    label _end__cast[518569]
    (518573 return ret[518571])
  }
  function _cast[134565](arg t[134562]:string[26], arg x[134570]:_array[133594](?)) : _unknown[51] "no doc"
  {
    unknown ret[518582] "RVV" "temp"
    unknown call_tmp[661491] "expr temp" "maybe param" "maybe type" "temp"
    (661494 'move' call_tmp[661491](134580 call stringify x[134570]))
    (518587 'move' ret[518582](518586 'deref' call_tmp[661491]))
    (518584 return ret[518582])
    (355235 'used modules list'(134574 'use' IO[230979]))
  }
  function isDmapType[134589](arg t[134587]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518609] "RVV" "param" "temp"
    function isDmapHelp[134597](arg t[134594]:_distribution[118973](?)) param : _unknown[51]
    {
      unknown ret[518591] "RVV" "param" "temp"
      (518596 'move' ret[518591](518595 'deref' 1))
      (518593 return ret[518591])
    }
    function isDmapHelp[134610](arg t[134608]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518600] "RVV" "param" "temp"
      (518605 'move' ret[518600](518604 'deref' 0))
      (518602 return ret[518600])
    }
    unknown call_tmp[661496] "expr temp" "maybe param" "maybe type" "temp"
    (661499 'move' call_tmp[661496](134621 call isDmapHelp t[134587]))
    (518614 'move' ret[518609](518613 'deref' call_tmp[661496]))
    (518611 return ret[518609])
  }
  function isDmapValue[134632](arg e[134629]:_distribution[118973](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518618] "RVV" "param" "temp"
    (518623 'move' ret[518618](518622 'deref' 1))
    (518620 return ret[518618])
  }
  function isDmapValue[134644](arg e[134642]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518627] "RVV" "param" "temp"
    (518632 'move' ret[518627](518631 'deref' 0))
    (518629 return ret[518627])
  }
  function isDomainType[134656](arg t[134654]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518636] "RVV" "param" "temp"
    unknown call_tmp[661501] "expr temp" "maybe param" "maybe type" "temp"
    (661504 'move' call_tmp[661501](354408 'is_subtype' _domain[125908](?) t[134654]))
    (518641 'move' ret[518636](518640 'deref' call_tmp[661501]))
    (518638 return ret[518636])
  }
  function isDomainValue[134674](arg e[134671]:_domain[125908](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518645] "RVV" "param" "temp"
    (518650 'move' ret[518645](518649 'deref' 1))
    (518647 return ret[518645])
  }
  function isDomainValue[134686](arg e[134684]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518654] "RVV" "param" "temp"
    (518659 'move' ret[518654](518658 'deref' 0))
    (518656 return ret[518654])
  }
  function isArrayType[134698](arg t[134696]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518663] "RVV" "param" "temp"
    unknown call_tmp[661506] "expr temp" "maybe param" "maybe type" "temp"
    (661509 'move' call_tmp[661506](354409 'is_subtype' _array[133594](?) t[134696]))
    (518668 'move' ret[518663](518667 'deref' call_tmp[661506]))
    (518665 return ret[518663])
  }
  function isArrayValue[134718](arg e[134715]:_array[133594](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518672] "RVV" "param" "temp"
    (518677 'move' ret[518672](518676 'deref' 1))
    (518674 return ret[518672])
  }
  function isArrayValue[134730](arg e[134728]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518681] "RVV" "param" "temp"
    (518686 'move' ret[518681](518685 'deref' 0))
    (518683 return ret[518681])
  }
  function -[134744](arg a[134741]:_domain[125908](?), arg b[134747]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518690] "RVV" "temp"
    unknown newDom[134764] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661511] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661514 'move' call_tmp[661511](134763 'typeof' a[134741]))
    (543205 'default init var' newDom[134764] call_tmp[661511])
    (134767 'end of statement')
    {
      unknown call_tmp[661516] "maybe param" "maybe type" "temp"
      (661519 'move' call_tmp[661516](134811 'task_get_serial'))
      unknown tmp[134810] "dead at end of block" "insert auto destroy" "temp"
      (543207 'init var' tmp[134810] call_tmp[661516])
      unknown call_tmp[661523] "expr temp" "maybe param" "maybe type" "temp"
      (661526 'move' call_tmp[661523](134770 call _value _mt[243] newDom[134764]))
      unknown call_tmp[661530] "expr temp" "maybe param" "maybe type" "temp"
      (661533 'move' call_tmp[661530](134773 call parSafe _mt[243] call_tmp[661523]))
      unknown call_tmp[661535] "expr temp" "maybe param" "maybe type" "temp"
      (661538 'move' call_tmp[661535](134776 call ! call_tmp[661530]))
      unknown call_tmp[661540] "expr temp" "maybe param" "maybe type" "temp"
      (661543 'move' call_tmp[661540](134807 call _cond_test call_tmp[661535]))
      if call_tmp[661540]
      {
        (134813 'task_set_serial' 1)
      }
      Defer
      {
        {
          (134817 'task_set_serial' tmp[134810])
        }
      }
      Forall {
        induction variables:
          
          unknown e[134803] "index var" "insert auto destroy"
        iterated expressions:
          a[134741]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[661547] "expr temp" "maybe param" "maybe type" "temp"
          (661550 'move' call_tmp[661547](134786 call(134781 call (partial) contains _mt[243] b[134747]) e[134803]))
          unknown call_tmp[661552] "expr temp" "maybe param" "maybe type" "temp"
          (661555 'move' call_tmp[661552](134787 call ! call_tmp[661547]))
          unknown call_tmp[661557] "expr temp" "maybe param" "maybe type" "temp"
          (661560 'move' call_tmp[661557](134797 call _cond_test call_tmp[661552]))
          if call_tmp[661557]
          {
            (134795 call(134790 call (partial) add _mt[243] newDom[134764]) e[134803])
            (480538 'end of statement' newDom[134764] e[134803])
          }
        }
      }
    }
    (518695 'move' ret[518690](518694 'deref' newDom[134764]))
    gotoReturn _end_-[518688] _end_-[518688]
    (480541 'end of statement' newDom[134764])
    label _end_-[518688]
    (518692 return ret[518690])
  }
  where {
    unknown tmp[425945] "maybe param" "temp"
    unknown call_tmp[661564] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661567 'move' call_tmp[661564](134751 'typeof' a[134741]))
    unknown call_tmp[661569] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661572 'move' call_tmp[661569](134753 'typeof' b[134747]))
    (425956 'move' tmp[425945](134754 call == call_tmp[661564] call_tmp[661569]))
    unknown call_tmp[661574] "expr temp" "maybe param" "maybe type" "temp"
    (661577 'move' call_tmp[661574](425958 call _cond_invalid tmp[425945]))
    if call_tmp[661574]
    {
      (425961 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566861] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566862] "maybe param" "temp"
    unknown call_tmp[661579] "expr temp" "maybe param" "maybe type" "temp"
    (661582 'move' call_tmp[661579](425946 call isTrue tmp[425945]))
    (566867 'move' tmp[566862](566865 call _cond_test call_tmp[661579]))
    if tmp[566862]
    {
      unknown tmp[566869] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661584] "expr temp" "maybe param" "maybe type" "temp"
      (661587 'move' call_tmp[661584](134759 call isAssociativeDom a[134741]))
      (566871 'move' tmp[566869](425949 call isTrue call_tmp[661584]))
      (566876 'move' tmp[566861](566873 '_paramFoldLogical' tmp[566862] tmp[566869]))
    }
    {
      (566881 'move' tmp[566861](566878 '_paramFoldLogical' tmp[566862] 0))
    }
    (748497 call chpl_statementLevelSymbol tmp[566861])
  }
  function -=[134833](ref arg a[134830]:_domain[125908](?), arg b[134836]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134873] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134874] "expr temp" "temp"
      (134883 'move' _iterator[134874](134881 call _getIterator b[134836]))
      Defer
      {
        {
          (134899 call _freeIterator _iterator[134874])
        }
      }
      { scopeless type
        (134888 'move' _indexOfInterest[134873](134885 call iteratorIndex _iterator[134874]))
      }
      ForLoop[134875]
      {
        unknown e[134892] "index var" "insert auto destroy"
        (480544 'end of statement')
        (134894 'move' e[134892] _indexOfInterest[134873])
        (480545 'end of statement' e[134892])
        unknown call_tmp[661591] "expr temp" "maybe param" "maybe type" "temp"
        (661594 'move' call_tmp[661591](134859 call(134854 call (partial) contains _mt[243] a[134830]) e[134892]))
        unknown call_tmp[661596] "expr temp" "maybe param" "maybe type" "temp"
        (661599 'move' call_tmp[661596](134868 call _cond_test call_tmp[661591]))
        if call_tmp[661596]
        {
          (134866 call(134861 call (partial) remove _mt[243] a[134830]) e[134892])
          (480547 'end of statement' e[134892])
        }
        label _continueLabel[134878]
        _indexOfInterest[134873]
        _iterator[134874]
      }
      label _breakLabel[134879]
    }
    (518699 return _void[55])
  }
  where {
    unknown tmp[425966] "maybe param" "temp"
    unknown call_tmp[661603] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661606 'move' call_tmp[661603](134840 'typeof' a[134830]))
    unknown call_tmp[661608] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661611 'move' call_tmp[661608](134842 'typeof' b[134836]))
    (425977 'move' tmp[425966](134843 call == call_tmp[661603] call_tmp[661608]))
    unknown call_tmp[661613] "expr temp" "maybe param" "maybe type" "temp"
    (661616 'move' call_tmp[661613](425979 call _cond_invalid tmp[425966]))
    if call_tmp[661613]
    {
      (425982 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566888] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566889] "maybe param" "temp"
    unknown call_tmp[661618] "expr temp" "maybe param" "maybe type" "temp"
    (661621 'move' call_tmp[661618](425967 call isTrue tmp[425966]))
    (566894 'move' tmp[566889](566892 call _cond_test call_tmp[661618]))
    if tmp[566889]
    {
      unknown tmp[566896] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661623] "expr temp" "maybe param" "maybe type" "temp"
      (661626 'move' call_tmp[661623](134848 call isAssociativeDom a[134830]))
      (566898 'move' tmp[566896](425970 call isTrue call_tmp[661623]))
      (566903 'move' tmp[566888](566900 '_paramFoldLogical' tmp[566889] tmp[566896]))
    }
    {
      (566908 'move' tmp[566888](566905 '_paramFoldLogical' tmp[566889] 0))
    }
    (748499 call chpl_statementLevelSymbol tmp[566888])
  }
  function |[134916](arg a[134913]:_domain[125908](?), arg b[134919]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518703] "RVV" "temp"
    unknown call_tmp[661628] "expr temp" "maybe param" "maybe type" "temp"
    (661631 'move' call_tmp[661628](134936 call + a[134913] b[134919]))
    (518708 'move' ret[518703](518707 'deref' call_tmp[661628]))
    (518705 return ret[518703])
  }
  where {
    unknown tmp[425987] "maybe param" "temp"
    unknown call_tmp[661633] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661636 'move' call_tmp[661633](134923 'typeof' a[134913]))
    unknown call_tmp[661638] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661641 'move' call_tmp[661638](134925 'typeof' b[134919]))
    (425998 'move' tmp[425987](134926 call == call_tmp[661633] call_tmp[661638]))
    unknown call_tmp[661643] "expr temp" "maybe param" "maybe type" "temp"
    (661646 'move' call_tmp[661643](426000 call _cond_invalid tmp[425987]))
    if call_tmp[661643]
    {
      (426003 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566915] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566916] "maybe param" "temp"
    unknown call_tmp[661648] "expr temp" "maybe param" "maybe type" "temp"
    (661651 'move' call_tmp[661648](425988 call isTrue tmp[425987]))
    (566921 'move' tmp[566916](566919 call _cond_test call_tmp[661648]))
    if tmp[566916]
    {
      unknown tmp[566923] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661653] "expr temp" "maybe param" "maybe type" "temp"
      (661656 'move' call_tmp[661653](134931 call isAssociativeDom a[134913]))
      (566925 'move' tmp[566923](425991 call isTrue call_tmp[661653]))
      (566930 'move' tmp[566915](566927 '_paramFoldLogical' tmp[566916] tmp[566923]))
    }
    {
      (566935 'move' tmp[566915](566932 '_paramFoldLogical' tmp[566916] 0))
    }
    (748501 call chpl_statementLevelSymbol tmp[566915])
  }
  function |=[134950](ref arg a[134947]:_domain[125908](?), arg b[134953]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134978] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134979] "expr temp" "temp"
      (134988 'move' _iterator[134979](134986 call _getIterator b[134953]))
      Defer
      {
        {
          (135004 call _freeIterator _iterator[134979])
        }
      }
      { scopeless type
        (134993 'move' _indexOfInterest[134978](134990 call iteratorIndex _iterator[134979]))
      }
      ForLoop[134980]
      {
        unknown e[134997] "index var" "insert auto destroy"
        (480551 'end of statement')
        (134999 'move' e[134997] _indexOfInterest[134978])
        (480552 'end of statement' e[134997])
        (134976 call(134971 call (partial) add _mt[243] a[134947]) e[134997])
        (480554 'end of statement' e[134997])
        label _continueLabel[134983]
        _indexOfInterest[134978]
        _iterator[134979]
      }
      label _breakLabel[134984]
    }
    (518710 return _void[55])
  }
  where {
    unknown tmp[426008] "maybe param" "temp"
    unknown call_tmp[661660] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661663 'move' call_tmp[661660](134957 'typeof' a[134947]))
    unknown call_tmp[661665] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661668 'move' call_tmp[661665](134959 'typeof' b[134953]))
    (426019 'move' tmp[426008](134960 call == call_tmp[661660] call_tmp[661665]))
    unknown call_tmp[661670] "expr temp" "maybe param" "maybe type" "temp"
    (661673 'move' call_tmp[661670](426021 call _cond_invalid tmp[426008]))
    if call_tmp[661670]
    {
      (426024 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566942] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566943] "maybe param" "temp"
    unknown call_tmp[661675] "expr temp" "maybe param" "maybe type" "temp"
    (661678 'move' call_tmp[661675](426009 call isTrue tmp[426008]))
    (566948 'move' tmp[566943](566946 call _cond_test call_tmp[661675]))
    if tmp[566943]
    {
      unknown tmp[566950] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661680] "expr temp" "maybe param" "maybe type" "temp"
      (661683 'move' call_tmp[661680](134965 call isAssociativeDom a[134947]))
      (566952 'move' tmp[566950](426012 call isTrue call_tmp[661680]))
      (566957 'move' tmp[566942](566954 '_paramFoldLogical' tmp[566943] tmp[566950]))
    }
    {
      (566962 'move' tmp[566942](566959 '_paramFoldLogical' tmp[566943] 0))
    }
    (748503 call chpl_statementLevelSymbol tmp[566942])
  }
  function +=[135021](ref arg a[135018]:_domain[125908](?), arg b[135024]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (135041 call |= a[135018] b[135024])
    (518712 return _void[55])
  }
  where {
    unknown tmp[426029] "maybe param" "temp"
    unknown call_tmp[661685] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661688 'move' call_tmp[661685](135028 'typeof' a[135018]))
    unknown call_tmp[661690] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661693 'move' call_tmp[661690](135030 'typeof' b[135024]))
    (426040 'move' tmp[426029](135031 call == call_tmp[661685] call_tmp[661690]))
    unknown call_tmp[661695] "expr temp" "maybe param" "maybe type" "temp"
    (661698 'move' call_tmp[661695](426042 call _cond_invalid tmp[426029]))
    if call_tmp[661695]
    {
      (426045 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566969] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566970] "maybe param" "temp"
    unknown call_tmp[661700] "expr temp" "maybe param" "maybe type" "temp"
    (661703 'move' call_tmp[661700](426030 call isTrue tmp[426029]))
    (566975 'move' tmp[566970](566973 call _cond_test call_tmp[661700]))
    if tmp[566970]
    {
      unknown tmp[566977] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661705] "expr temp" "maybe param" "maybe type" "temp"
      (661708 'move' call_tmp[661705](135036 call isAssociativeDom a[135018]))
      (566979 'move' tmp[566977](426033 call isTrue call_tmp[661705]))
      (566984 'move' tmp[566969](566981 '_paramFoldLogical' tmp[566970] tmp[566977]))
    }
    {
      (566989 'move' tmp[566969](566986 '_paramFoldLogical' tmp[566970] 0))
    }
    (748505 call chpl_statementLevelSymbol tmp[566969])
  }
  function &[135054](arg a[135051]:_domain[125908](?), arg b[135057]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518716] "RVV" "temp"
    unknown newDom[135074] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661710] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661713 'move' call_tmp[661710](135073 'typeof' a[135051]))
    (543209 'default init var' newDom[135074] call_tmp[661710])
    (135077 'end of statement')
    {
      unknown call_tmp[661715] "maybe param" "maybe type" "temp"
      (661718 'move' call_tmp[661715](135122 'task_get_serial'))
      unknown tmp[135121] "dead at end of block" "insert auto destroy" "temp"
      (543211 'init var' tmp[135121] call_tmp[661715])
      unknown call_tmp[661722] "expr temp" "maybe param" "maybe type" "temp"
      (661725 'move' call_tmp[661722](135080 call _value _mt[243] newDom[135074]))
      unknown call_tmp[661729] "expr temp" "maybe param" "maybe type" "temp"
      (661732 'move' call_tmp[661729](135083 call parSafe _mt[243] call_tmp[661722]))
      unknown call_tmp[661734] "expr temp" "maybe param" "maybe type" "temp"
      (661737 'move' call_tmp[661734](135086 call ! call_tmp[661729]))
      unknown call_tmp[661739] "expr temp" "maybe param" "maybe type" "temp"
      (661742 'move' call_tmp[661739](135118 call _cond_test call_tmp[661734]))
      if call_tmp[661739]
      {
        (135124 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135128 'task_set_serial' tmp[135121])
        }
      }
      Forall {
        induction variables:
          
          unknown k[135114] "index var" "insert auto destroy"
        iterated expressions:
          a[135051]
        shadow variables:
          newDom[135091] 'ref' intent outer var newDom[135074]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown call_tmp[661746] "expr temp" "maybe param" "maybe type" "temp"
          (661749 'move' call_tmp[661746](135102 call(135097 call (partial) contains _mt[243] b[135057]) k[135114]))
          unknown call_tmp[661751] "expr temp" "maybe param" "maybe type" "temp"
          (661754 'move' call_tmp[661751](135108 call _cond_test call_tmp[661746]))
          if call_tmp[661751]
          {
            (135105 call += newDom[135091] k[135114])
            (480559 'end of statement' newDom[135091] k[135114])
          }
        }
      }
    }
    (518721 'move' ret[518716](518720 'deref' newDom[135074]))
    gotoReturn _end_&[518714] _end_&[518714]
    (480562 'end of statement' newDom[135074])
    label _end_&[518714]
    (518718 return ret[518716])
  }
  where {
    unknown tmp[426050] "maybe param" "temp"
    unknown call_tmp[661756] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661759 'move' call_tmp[661756](135061 'typeof' a[135051]))
    unknown call_tmp[661761] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661764 'move' call_tmp[661761](135063 'typeof' b[135057]))
    (426061 'move' tmp[426050](135064 call == call_tmp[661756] call_tmp[661761]))
    unknown call_tmp[661766] "expr temp" "maybe param" "maybe type" "temp"
    (661769 'move' call_tmp[661766](426063 call _cond_invalid tmp[426050]))
    if call_tmp[661766]
    {
      (426066 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566996] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566997] "maybe param" "temp"
    unknown call_tmp[661771] "expr temp" "maybe param" "maybe type" "temp"
    (661774 'move' call_tmp[661771](426051 call isTrue tmp[426050]))
    (567002 'move' tmp[566997](567000 call _cond_test call_tmp[661771]))
    if tmp[566997]
    {
      unknown tmp[567004] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661776] "expr temp" "maybe param" "maybe type" "temp"
      (661779 'move' call_tmp[661776](135069 call isAssociativeDom a[135051]))
      (567006 'move' tmp[567004](426054 call isTrue call_tmp[661776]))
      (567011 'move' tmp[566996](567008 '_paramFoldLogical' tmp[566997] tmp[567004]))
    }
    {
      (567016 'move' tmp[566996](567013 '_paramFoldLogical' tmp[566997] 0))
    }
    (748507 call chpl_statementLevelSymbol tmp[566996])
  }
  function &=[135144](ref arg a[135141]:_domain[125908](?), arg b[135147]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown removeSet[135170] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661783] "expr temp" "maybe param" "maybe type" "temp"
    (661786 'move' call_tmp[661783](135163 call idxType _mt[243] a[135141]))
    unknown call_tmp[661788] "expr temp" "maybe param" "maybe type" "temp"
    (661791 'move' call_tmp[661788](135168 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[661783]))
    (543213 'default init var' removeSet[135170] call_tmp[661788])
    (135173 'end of statement')
    {
      unknown _indexOfInterest[135196] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135197] "expr temp" "temp"
      (135206 'move' _iterator[135197](135204 call _getIterator a[135141]))
      Defer
      {
        {
          (135222 call _freeIterator _iterator[135197])
        }
      }
      { scopeless type
        (135211 'move' _indexOfInterest[135196](135208 call iteratorIndex _iterator[135197]))
      }
      ForLoop[135198]
      {
        unknown e[135215] "index var" "insert auto destroy"
        (480565 'end of statement')
        (135217 'move' e[135215] _indexOfInterest[135196])
        (480566 'end of statement' e[135215])
        unknown call_tmp[661795] "expr temp" "maybe param" "maybe type" "temp"
        (661798 'move' call_tmp[661795](135183 call(135178 call (partial) contains _mt[243] b[135147]) e[135215]))
        unknown call_tmp[661800] "expr temp" "maybe param" "maybe type" "temp"
        (661803 'move' call_tmp[661800](135184 call ! call_tmp[661795]))
        unknown call_tmp[661805] "expr temp" "maybe param" "maybe type" "temp"
        (661808 'move' call_tmp[661805](135191 call _cond_test call_tmp[661800]))
        if call_tmp[661805]
        {
          (135188 call += removeSet[135170] e[135215])
          (480568 'end of statement' removeSet[135170] e[135215])
        }
        label _continueLabel[135201]
        _indexOfInterest[135196]
        _iterator[135197]
      }
      label _breakLabel[135202]
    }
    {
      unknown _indexOfInterest[135239] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135240] "expr temp" "temp"
      (135249 'move' _iterator[135240](135247 call _getIterator removeSet[135170]))
      Defer
      {
        {
          (135265 call _freeIterator _iterator[135240])
        }
      }
      { scopeless type
        (135254 'move' _indexOfInterest[135239](135251 call iteratorIndex _iterator[135240]))
      }
      ForLoop[135241]
      {
        unknown e[135258] "index var" "insert auto destroy"
        (480572 'end of statement')
        (135260 'move' e[135258] _indexOfInterest[135239])
        (480573 'end of statement' e[135258])
        (135237 call(135232 call (partial) remove _mt[243] a[135141]) e[135258])
        (480575 'end of statement' e[135258])
        label _continueLabel[135244]
        _indexOfInterest[135239]
        _iterator[135240]
      }
      label _breakLabel[135245]
    }
    (518725 return _void[55])
  }
  where {
    unknown tmp[426071] "maybe param" "temp"
    unknown call_tmp[661812] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661815 'move' call_tmp[661812](135151 'typeof' a[135141]))
    unknown call_tmp[661817] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661820 'move' call_tmp[661817](135153 'typeof' b[135147]))
    (426082 'move' tmp[426071](135154 call == call_tmp[661812] call_tmp[661817]))
    unknown call_tmp[661822] "expr temp" "maybe param" "maybe type" "temp"
    (661825 'move' call_tmp[661822](426084 call _cond_invalid tmp[426071]))
    if call_tmp[661822]
    {
      (426087 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567023] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567024] "maybe param" "temp"
    unknown call_tmp[661827] "expr temp" "maybe param" "maybe type" "temp"
    (661830 'move' call_tmp[661827](426072 call isTrue tmp[426071]))
    (567029 'move' tmp[567024](567027 call _cond_test call_tmp[661827]))
    if tmp[567024]
    {
      unknown tmp[567031] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661832] "expr temp" "maybe param" "maybe type" "temp"
      (661835 'move' call_tmp[661832](135159 call isAssociativeDom a[135141]))
      (567033 'move' tmp[567031](426075 call isTrue call_tmp[661832]))
      (567038 'move' tmp[567023](567035 '_paramFoldLogical' tmp[567024] tmp[567031]))
    }
    {
      (567043 'move' tmp[567023](567040 '_paramFoldLogical' tmp[567024] 0))
    }
    (748509 call chpl_statementLevelSymbol tmp[567023])
  }
  function ^[135281](arg a[135278]:_domain[125908](?), arg b[135284]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518729] "RVV" "temp"
    unknown newDom[135301] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661837] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661840 'move' call_tmp[661837](135300 'typeof' a[135278]))
    (543215 'default init var' newDom[135301] call_tmp[661837])
    (135304 'end of statement')
    {
      unknown call_tmp[661842] "maybe param" "maybe type" "temp"
      (661845 'move' call_tmp[661842](135378 'task_get_serial'))
      unknown tmp[135377] "dead at end of block" "insert auto destroy" "temp"
      (543217 'init var' tmp[135377] call_tmp[661842])
      unknown call_tmp[661849] "expr temp" "maybe param" "maybe type" "temp"
      (661852 'move' call_tmp[661849](135307 call _value _mt[243] newDom[135301]))
      unknown call_tmp[661856] "expr temp" "maybe param" "maybe type" "temp"
      (661859 'move' call_tmp[661856](135310 call parSafe _mt[243] call_tmp[661849]))
      unknown call_tmp[661861] "expr temp" "maybe param" "maybe type" "temp"
      (661864 'move' call_tmp[661861](135313 call ! call_tmp[661856]))
      unknown call_tmp[661866] "expr temp" "maybe param" "maybe type" "temp"
      (661869 'move' call_tmp[661866](135374 call _cond_test call_tmp[661861]))
      if call_tmp[661866]
      {
        (135380 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135384 'task_set_serial' tmp[135377])
        }
      }
      {
        Forall {
          induction variables:
            
            unknown k[135340] "index var" "insert auto destroy"
          iterated expressions:
            a[135278]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661873] "expr temp" "maybe param" "maybe type" "temp"
            (661876 'move' call_tmp[661873](135323 call(135318 call (partial) contains _mt[243] b[135284]) k[135340]))
            unknown call_tmp[661878] "expr temp" "maybe param" "maybe type" "temp"
            (661881 'move' call_tmp[661878](135324 call ! call_tmp[661873]))
            unknown call_tmp[661883] "expr temp" "maybe param" "maybe type" "temp"
            (661886 'move' call_tmp[661883](135334 call _cond_test call_tmp[661878]))
            if call_tmp[661883]
            {
              (135332 call(135327 call (partial) add _mt[243] newDom[135301]) k[135340])
              (480579 'end of statement' newDom[135301] k[135340])
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135370] "index var" "insert auto destroy"
          iterated expressions:
            b[135284]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661892] "expr temp" "maybe param" "maybe type" "temp"
            (661895 'move' call_tmp[661892](135353 call(135348 call (partial) contains _mt[243] a[135278]) k[135370]))
            unknown call_tmp[661897] "expr temp" "maybe param" "maybe type" "temp"
            (661900 'move' call_tmp[661897](135354 call ! call_tmp[661892]))
            unknown call_tmp[661902] "expr temp" "maybe param" "maybe type" "temp"
            (661905 'move' call_tmp[661902](135364 call _cond_test call_tmp[661897]))
            if call_tmp[661902]
            {
              (135362 call(135357 call (partial) add _mt[243] newDom[135301]) k[135370])
              (480582 'end of statement' newDom[135301] k[135370])
            }
          }
        }
      }
    }
    (518734 'move' ret[518729](518733 'deref' newDom[135301]))
    gotoReturn _end_^[518727] _end_^[518727]
    (480585 'end of statement' newDom[135301])
    label _end_^[518727]
    (518731 return ret[518729])
  }
  where {
    unknown tmp[426092] "maybe param" "temp"
    unknown call_tmp[661909] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661912 'move' call_tmp[661909](135288 'typeof' a[135278]))
    unknown call_tmp[661914] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661917 'move' call_tmp[661914](135290 'typeof' b[135284]))
    (426103 'move' tmp[426092](135291 call == call_tmp[661909] call_tmp[661914]))
    unknown call_tmp[661919] "expr temp" "maybe param" "maybe type" "temp"
    (661922 'move' call_tmp[661919](426105 call _cond_invalid tmp[426092]))
    if call_tmp[661919]
    {
      (426108 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567050] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567051] "maybe param" "temp"
    unknown call_tmp[661924] "expr temp" "maybe param" "maybe type" "temp"
    (661927 'move' call_tmp[661924](426093 call isTrue tmp[426092]))
    (567056 'move' tmp[567051](567054 call _cond_test call_tmp[661924]))
    if tmp[567051]
    {
      unknown tmp[567058] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661929] "expr temp" "maybe param" "maybe type" "temp"
      (661932 'move' call_tmp[661929](135296 call isAssociativeDom a[135278]))
      (567060 'move' tmp[567058](426096 call isTrue call_tmp[661929]))
      (567065 'move' tmp[567050](567062 '_paramFoldLogical' tmp[567051] tmp[567058]))
    }
    {
      (567070 'move' tmp[567050](567067 '_paramFoldLogical' tmp[567051] 0))
    }
    (748511 call chpl_statementLevelSymbol tmp[567050])
  }
  function ^=[135400](ref arg a[135397]:_domain[125908](?), arg b[135403]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135449] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135450] "expr temp" "temp"
      (135459 'move' _iterator[135450](135457 call _getIterator b[135403]))
      Defer
      {
        {
          (135475 call _freeIterator _iterator[135450])
        }
      }
      { scopeless type
        (135464 'move' _indexOfInterest[135449](135461 call iteratorIndex _iterator[135450]))
      }
      ForLoop[135451]
      {
        unknown e[135468] "index var" "insert auto destroy"
        (480588 'end of statement')
        (135470 'move' e[135468] _indexOfInterest[135449])
        (480589 'end of statement' e[135468])
        unknown call_tmp[661936] "expr temp" "maybe param" "maybe type" "temp"
        (661939 'move' call_tmp[661936](135426 call(135421 call (partial) contains _mt[243] a[135397]) e[135468]))
        unknown call_tmp[661941] "expr temp" "maybe param" "maybe type" "temp"
        (661944 'move' call_tmp[661941](135443 call _cond_test call_tmp[661936]))
        if call_tmp[661941]
        {
          (135433 call(135428 call (partial) remove _mt[243] a[135397]) e[135468])
          (480591 'end of statement' e[135468])
        }
        {
          (135441 call(135436 call (partial) add _mt[243] a[135397]) e[135468])
          (480593 'end of statement' e[135468])
        }
        label _continueLabel[135454]
        _indexOfInterest[135449]
        _iterator[135450]
      }
      label _breakLabel[135455]
    }
    (518738 return _void[55])
  }
  where {
    unknown tmp[426113] "maybe param" "temp"
    unknown call_tmp[661950] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661953 'move' call_tmp[661950](135407 'typeof' a[135397]))
    unknown call_tmp[661955] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661958 'move' call_tmp[661955](135409 'typeof' b[135403]))
    (426124 'move' tmp[426113](135410 call == call_tmp[661950] call_tmp[661955]))
    unknown call_tmp[661960] "expr temp" "maybe param" "maybe type" "temp"
    (661963 'move' call_tmp[661960](426126 call _cond_invalid tmp[426113]))
    if call_tmp[661960]
    {
      (426129 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567077] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567078] "maybe param" "temp"
    unknown call_tmp[661965] "expr temp" "maybe param" "maybe type" "temp"
    (661968 'move' call_tmp[661965](426114 call isTrue tmp[426113]))
    (567083 'move' tmp[567078](567081 call _cond_test call_tmp[661965]))
    if tmp[567078]
    {
      unknown tmp[567085] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661970] "expr temp" "maybe param" "maybe type" "temp"
      (661973 'move' call_tmp[661970](135415 call isAssociativeDom a[135397]))
      (567087 'move' tmp[567085](426117 call isTrue call_tmp[661970]))
      (567092 'move' tmp[567077](567089 '_paramFoldLogical' tmp[567078] tmp[567085]))
    }
    {
      (567097 'move' tmp[567077](567094 '_paramFoldLogical' tmp[567078] 0))
    }
    (748513 call chpl_statementLevelSymbol tmp[567077])
  }
  function +=[135492](ref arg sd[135489]:_domain[125908](?), arg inds[135501]:_array[133594](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[661977] "expr temp" "maybe param" "maybe type" "temp"
    (661980 'move' call_tmp[661977](135509 call size _mt[243] inds[135501]))
    unknown call_tmp[661982] "expr temp" "maybe param" "maybe type" "temp"
    (661985 'move' call_tmp[661982](135513 call == call_tmp[661977] 0))
    unknown call_tmp[661987] "expr temp" "maybe param" "maybe type" "temp"
    (661990 'move' call_tmp[661987](135517 call _cond_test call_tmp[661982]))
    if call_tmp[661987]
    {
      gotoReturn _end_+=[518740] _end_+=[518740]
    }
    unknown call_tmp[661994] "expr temp" "maybe param" "maybe type" "temp"
    (661997 'move' call_tmp[661994](135524 call _value _mt[243] sd[135489]))
    (135532 call(135527 call (partial) dsiBulkAdd _mt[243] call_tmp[661994]) inds[135501])
    label _end_+=[518740]
    (518742 return _void[55])
  }
  where {
    unknown call_tmp[662001] "expr temp" "maybe param" "maybe type" "temp"
    (662004 'move' call_tmp[662001](135507 call isSparseDom sd[135489]))
    unknown call_tmp[662006] "expr temp" "maybe param" "maybe type" "temp"
    (662009 'move' call_tmp[662006](135496 call chpl__buildIndexType sd[135489]))
    unknown call_tmp[662013] "expr temp" "maybe param" "maybe type" "temp"
    (662016 'move' call_tmp[662013](461545 call eltType _mt[243] inds[135501]))
    unknown call_tmp[662018] "expr temp" "maybe param" "maybe type" "temp"
    (662021 'move' call_tmp[662018](461549 call == call_tmp[662006] call_tmp[662013]))
    (461543 call & call_tmp[662001] call_tmp[662018])
  }
  function +=[135543](ref arg sd[135540]:_domain[125908](?), arg d[135546]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662025] "expr temp" "maybe param" "maybe type" "temp"
    (662028 'move' call_tmp[662025](135578 call size _mt[243] d[135546]))
    unknown call_tmp[662030] "expr temp" "maybe param" "maybe type" "temp"
    (662033 'move' call_tmp[662030](135582 call == call_tmp[662025] 0))
    unknown call_tmp[662035] "expr temp" "maybe param" "maybe type" "temp"
    (662038 'move' call_tmp[662035](135586 call _cond_test call_tmp[662030]))
    if call_tmp[662035]
    {
      gotoReturn _end_+=[518746] _end_+=[518746]
    }
    unknown call_tmp[662042] "maybe param" "maybe type" "temp"
    (662045 'move' call_tmp[662042](135593 call size _mt[243] d[135546]))
    const indCount[135596] "dead at end of block" "const" "insert auto destroy"
    (543219 'init var' indCount[135596] call_tmp[662042])
    (135599 'end of statement')
    unknown arr[135618] "dead at end of block" "insert auto destroy"
    unknown call_tmp[662047] "expr temp" "maybe param" "maybe type" "temp"
    (662050 'move' call_tmp[662047](135601 call chpl_build_low_bounded_range 0))
    unknown call_tmp[662052] "expr temp" "maybe param" "maybe type" "temp"
    (662055 'move' call_tmp[662052](135604 call # call_tmp[662047] indCount[135596]))
    unknown call_tmp[662057] "expr temp" "maybe param" "maybe type" "temp"
    (662060 'move' call_tmp[662057](135607 call chpl__buildDomainExpr call_tmp[662052]))
    unknown call_tmp[662062] "expr temp" "maybe param" "maybe type" "temp"
    (662065 'move' call_tmp[662062](135614 call chpl__ensureDomainExpr call_tmp[662057]))
    unknown call_tmp[662067] "expr temp" "maybe param" "maybe type" "temp"
    (662070 'move' call_tmp[662067](135612 call chpl__buildIndexType sd[135540]))
    unknown call_tmp[662072] "expr temp" "maybe param" "maybe type" "temp"
    (662075 'move' call_tmp[662072](135616 call chpl__buildArrayRuntimeType call_tmp[662062] call_tmp[662067]))
    (543221 'default init var' arr[135618] call_tmp[662072])
    (135621 'end of statement')
    {
      unknown _indexOfInterest[135641] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135642] "expr temp" "temp"
      unknown call_tmp[662077] "expr temp" "maybe param" "maybe type" "temp"
      (662080 'move' call_tmp[662077](135651 call _getIterator d[135546]))
      unknown call_tmp[662082] "expr temp" "maybe param" "maybe type" "temp"
      (662085 'move' call_tmp[662082](135654 call chpl_build_low_bounded_range 0))
      unknown call_tmp[662087] "expr temp" "maybe param" "maybe type" "temp"
      (662090 'move' call_tmp[662087](135656 call _getIterator call_tmp[662082]))
      (135659 'move' _iterator[135642](135632 call _build_tuple call_tmp[662077] call_tmp[662087]))
      Defer
      {
        {
          (135689 call _freeIterator _iterator[135642])
        }
      }
      { scopeless type
        (135664 'move' _indexOfInterest[135641](135661 call iteratorIndex _iterator[135642]))
      }
      ForLoop[135643]
      {
        (135669 call _check_tuple_var_decl _indexOfInterest[135641] 2)
        (480600 'end of statement')
        unknown i[135675] "index var" "insert auto destroy"
        (480601 'end of statement')
        (135677 'move' i[135675](135673 call _indexOfInterest[135641] 0))
        (480602 'end of statement' i[135675])
        unknown j[135682] "index var" "insert auto destroy"
        (480604 'end of statement')
        (135684 'move' j[135682](135680 call _indexOfInterest[135641] 1))
        (480605 'end of statement' j[135682])
        unknown call_tmp[662092] "expr temp" "maybe param" "maybe type" "temp"
        (662095 'move' call_tmp[662092](135636 call arr[135618] j[135682]))
        (135638 call = call_tmp[662092] i[135675])
        (480607 'end of statement' arr[135618] j[135682] i[135675])
        label _continueLabel[135646]
        _indexOfInterest[135641]
        _iterator[135642]
      }
      label _breakLabel[135647]
    }
    unknown rowSorted[135697] "dead at end of block" "insert auto destroy"
    (543223 'init var' rowSorted[135697] 0)
    (135700 'end of statement' indCount[135596])
    unknown call_tmp[662099] "expr temp" "maybe param" "maybe type" "temp"
    (662102 'move' call_tmp[662099](135702 call _value _mt[243] sd[135540]))
    (135713 call(135705 call (partial) dsiBulkAdd _mt[243] call_tmp[662099]) arr[135618] rowSorted[135697] 1 0)
    (480611 'end of statement' arr[135618] rowSorted[135697])
    label _end_+=[518746]
    (518748 return _void[55])
  }
  where {
    unknown tmp[426134] "maybe param" "temp"
    unknown tmp[426155] "maybe param" "temp"
    (426166 'move' tmp[426155](135552 call isSparseDom sd[135540]))
    unknown call_tmp[662106] "expr temp" "maybe param" "maybe type" "temp"
    (662109 'move' call_tmp[662106](426168 call _cond_invalid tmp[426155]))
    if call_tmp[662106]
    {
      (426171 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567104] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567105] "maybe param" "temp"
    unknown call_tmp[662111] "expr temp" "maybe param" "maybe type" "temp"
    (662114 'move' call_tmp[662111](426156 call isTrue tmp[426155]))
    (567110 'move' tmp[567105](567108 call _cond_test call_tmp[662111]))
    if tmp[567105]
    {
      unknown tmp[567112] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662118] "expr temp" "maybe param" "maybe type" "temp"
      (662121 'move' call_tmp[662118](135554 call rank _mt[243] d[135546]))
      unknown call_tmp[662125] "expr temp" "maybe param" "maybe type" "temp"
      (662128 'move' call_tmp[662125](135558 call rank _mt[243] sd[135540]))
      unknown call_tmp[662130] "expr temp" "maybe param" "maybe type" "temp"
      (662133 'move' call_tmp[662130](135561 call == call_tmp[662118] call_tmp[662125]))
      (567114 'move' tmp[567112](426159 call isTrue call_tmp[662130]))
      (567119 'move' tmp[567104](567116 '_paramFoldLogical' tmp[567105] tmp[567112]))
    }
    {
      (567124 'move' tmp[567104](567121 '_paramFoldLogical' tmp[567105] 0))
    }
    (426145 'move' tmp[426134] tmp[567104])
    unknown call_tmp[662135] "expr temp" "maybe param" "maybe type" "temp"
    (662138 'move' call_tmp[662135](426147 call _cond_invalid tmp[426134]))
    if call_tmp[662135]
    {
      (426150 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567131] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567132] "maybe param" "temp"
    unknown call_tmp[662140] "expr temp" "maybe param" "maybe type" "temp"
    (662143 'move' call_tmp[662140](426135 call isTrue tmp[426134]))
    (567137 'move' tmp[567132](567135 call _cond_test call_tmp[662140]))
    if tmp[567132]
    {
      unknown tmp[567139] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662147] "expr temp" "maybe param" "maybe type" "temp"
      (662150 'move' call_tmp[662147](135566 call idxType _mt[243] sd[135540]))
      unknown call_tmp[662154] "expr temp" "maybe param" "maybe type" "temp"
      (662157 'move' call_tmp[662154](135570 call idxType _mt[243] d[135546]))
      unknown call_tmp[662159] "expr temp" "maybe param" "maybe type" "temp"
      (662162 'move' call_tmp[662159](135573 call == call_tmp[662147] call_tmp[662154]))
      (567141 'move' tmp[567139](426138 call isTrue call_tmp[662159]))
      (567146 'move' tmp[567131](567143 '_paramFoldLogical' tmp[567132] tmp[567139]))
    }
    {
      (567151 'move' tmp[567131](567148 '_paramFoldLogical' tmp[567132] 0))
    }
    (748515 call chpl_statementLevelSymbol tmp[567131])
  }
  function -=[135724](ref arg sd[135721]:_domain[125908](?), arg inds[135733]:_array[133594](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135747] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135748] "expr temp" "temp"
      (135757 'move' _iterator[135748](135755 call _getIterator inds[135733]))
      Defer
      {
        {
          (135773 call _freeIterator _iterator[135748])
        }
      }
      { scopeless type
        (135762 'move' _indexOfInterest[135747](135759 call iteratorIndex _iterator[135748]))
      }
      ForLoop[135749]
      {
        unknown ind[135766] "index var" "insert auto destroy"
        (480615 'end of statement')
        (135768 'move' ind[135766] _indexOfInterest[135747])
        (480616 'end of statement' ind[135766])
        (135744 call -= sd[135721] ind[135766])
        (480618 'end of statement' ind[135766])
        label _continueLabel[135752]
        _indexOfInterest[135747]
        _iterator[135748]
      }
      label _breakLabel[135753]
    }
    (518752 return _void[55])
  }
  where {
    unknown call_tmp[662164] "expr temp" "maybe param" "maybe type" "temp"
    (662167 'move' call_tmp[662164](135739 call isSparseDom sd[135721]))
    unknown call_tmp[662169] "expr temp" "maybe param" "maybe type" "temp"
    (662172 'move' call_tmp[662169](135728 call chpl__buildIndexType sd[135721]))
    unknown call_tmp[662176] "expr temp" "maybe param" "maybe type" "temp"
    (662179 'move' call_tmp[662176](461555 call eltType _mt[243] inds[135733]))
    unknown call_tmp[662181] "expr temp" "maybe param" "maybe type" "temp"
    (662184 'move' call_tmp[662181](461559 call == call_tmp[662169] call_tmp[662176]))
    (461553 call & call_tmp[662164] call_tmp[662181])
  }
  function -=[135790](ref arg sd[135787]:_domain[125908](?), arg d[135793]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135831] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135832] "expr temp" "temp"
      (135841 'move' _iterator[135832](135839 call _getIterator d[135793]))
      Defer
      {
        {
          (135857 call _freeIterator _iterator[135832])
        }
      }
      { scopeless type
        (135846 'move' _indexOfInterest[135831](135843 call iteratorIndex _iterator[135832]))
      }
      ForLoop[135833]
      {
        unknown ind[135850] "index var" "insert auto destroy"
        (480621 'end of statement')
        (135852 'move' ind[135850] _indexOfInterest[135831])
        (480622 'end of statement' ind[135850])
        (135828 call -= sd[135787] ind[135850])
        (480624 'end of statement' ind[135850])
        label _continueLabel[135836]
        _indexOfInterest[135831]
        _iterator[135832]
      }
      label _breakLabel[135837]
    }
    (518754 return _void[55])
  }
  where {
    unknown tmp[426176] "maybe param" "temp"
    unknown tmp[426197] "maybe param" "temp"
    (426208 'move' tmp[426197](135799 call isSparseDom sd[135787]))
    unknown call_tmp[662186] "expr temp" "maybe param" "maybe type" "temp"
    (662189 'move' call_tmp[662186](426210 call _cond_invalid tmp[426197]))
    if call_tmp[662186]
    {
      (426213 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567158] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567159] "maybe param" "temp"
    unknown call_tmp[662191] "expr temp" "maybe param" "maybe type" "temp"
    (662194 'move' call_tmp[662191](426198 call isTrue tmp[426197]))
    (567164 'move' tmp[567159](567162 call _cond_test call_tmp[662191]))
    if tmp[567159]
    {
      unknown tmp[567166] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662198] "expr temp" "maybe param" "maybe type" "temp"
      (662201 'move' call_tmp[662198](135801 call rank _mt[243] d[135793]))
      unknown call_tmp[662205] "expr temp" "maybe param" "maybe type" "temp"
      (662208 'move' call_tmp[662205](135805 call rank _mt[243] sd[135787]))
      unknown call_tmp[662210] "expr temp" "maybe param" "maybe type" "temp"
      (662213 'move' call_tmp[662210](135808 call == call_tmp[662198] call_tmp[662205]))
      (567168 'move' tmp[567166](426201 call isTrue call_tmp[662210]))
      (567173 'move' tmp[567158](567170 '_paramFoldLogical' tmp[567159] tmp[567166]))
    }
    {
      (567178 'move' tmp[567158](567175 '_paramFoldLogical' tmp[567159] 0))
    }
    (426187 'move' tmp[426176] tmp[567158])
    unknown call_tmp[662215] "expr temp" "maybe param" "maybe type" "temp"
    (662218 'move' call_tmp[662215](426189 call _cond_invalid tmp[426176]))
    if call_tmp[662215]
    {
      (426192 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567185] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567186] "maybe param" "temp"
    unknown call_tmp[662220] "expr temp" "maybe param" "maybe type" "temp"
    (662223 'move' call_tmp[662220](426177 call isTrue tmp[426176]))
    (567191 'move' tmp[567186](567189 call _cond_test call_tmp[662220]))
    if tmp[567186]
    {
      unknown tmp[567193] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662227] "expr temp" "maybe param" "maybe type" "temp"
      (662230 'move' call_tmp[662227](135813 call idxType _mt[243] sd[135787]))
      unknown call_tmp[662234] "expr temp" "maybe param" "maybe type" "temp"
      (662237 'move' call_tmp[662234](135817 call idxType _mt[243] d[135793]))
      unknown call_tmp[662239] "expr temp" "maybe param" "maybe type" "temp"
      (662242 'move' call_tmp[662239](135820 call == call_tmp[662227] call_tmp[662234]))
      (567195 'move' tmp[567193](426180 call isTrue call_tmp[662239]))
      (567200 'move' tmp[567185](567197 '_paramFoldLogical' tmp[567186] tmp[567193]))
    }
    {
      (567205 'move' tmp[567185](567202 '_paramFoldLogical' tmp[567186] 0))
    }
    (748517 call chpl_statementLevelSymbol tmp[567185])
  }
  function isCollapsedDimension[135884](arg r[135881]:range[64319](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518758] "RVV" "param" "temp"
    (518763 'move' ret[518758](518762 'deref' 0))
    (518760 return ret[518758])
  }
  function isCollapsedDimension[135896](arg r[135894]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518767] "RVV" "param" "temp"
    (518772 'move' ret[518767](518771 'deref' 1))
    (518769 return ret[518767])
  }
  function chpl__anyStridable[135908](arg ranges[135906]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518776] "RVV" "param" "temp"
    {
      unknown i[135935] "dead at end of block" "insert auto destroy"
      (543225 'init var' i[135935] 0)
      (480628 'end of statement')
      unknown tmp[135936] "maybe param" "temp"
      unknown call_tmp[662246] "expr temp" "maybe param" "maybe type" "temp"
      (662249 'move' call_tmp[662246](135912 call size _mt[243] ranges[135906]))
      unknown call_tmp[662251] "expr temp" "maybe param" "maybe type" "temp"
      (662254 'move' call_tmp[662251](135916 call - call_tmp[662246] 1))
      (135948 'move' tmp[135936](135946 call chpl_compute_low_param_loop_bound 0 call_tmp[662251]))
      unknown tmp[135937] "maybe param" "temp"
      unknown call_tmp[662258] "expr temp" "maybe param" "maybe type" "temp"
      (662261 'move' call_tmp[662258](135955 call size _mt[243] ranges[135906]))
      unknown call_tmp[662263] "expr temp" "maybe param" "maybe type" "temp"
      (662266 'move' call_tmp[662263](135953 call - call_tmp[662258] 1))
      (135961 'move' tmp[135937](135959 call chpl_compute_high_param_loop_bound 0 call_tmp[662263]))
      unknown tmp[135938] "maybe param" "temp"
      (135964 'move' tmp[135938] 1)
      ParamForLoop[135966]
      { i[135935] tmp[135936] tmp[135937] tmp[135938]
        unknown call_tmp[662268] "expr temp" "maybe param" "maybe type" "temp"
        (662271 'move' call_tmp[662268](135923 call ranges[135906] i[135935]))
        unknown call_tmp[662275] "expr temp" "maybe param" "maybe type" "temp"
        (662278 'move' call_tmp[662275](135924 call stridable _mt[243] call_tmp[662268]))
        unknown call_tmp[662280] "expr temp" "maybe param" "maybe type" "temp"
        (662283 'move' call_tmp[662280](135930 call _cond_test call_tmp[662275]))
        if call_tmp[662280]
        {
          (518781 'move' ret[518776](518780 'deref' 1))
          gotoReturn _end_chpl__anyStridable[518774] _end_chpl__anyStridable[518774]
        }
      }
      label _unused_continueLabel[135940]
      label _breakLabel[135939]
    }
    (518786 'move' ret[518776](518785 'deref' 0))
    label _end_chpl__anyStridable[518774]
    (518778 return ret[518776])
  }
  function chpl__anyRankChangeStridable[135985](arg args[135983]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518790] "RVV" "param" "temp"
    {
      unknown i[136024] "dead at end of block" "insert auto destroy"
      (543227 'init var' i[136024] 0)
      (480631 'end of statement')
      unknown tmp[136025] "maybe param" "temp"
      unknown call_tmp[662287] "expr temp" "maybe param" "maybe type" "temp"
      (662290 'move' call_tmp[662287](135989 call size _mt[243] args[135983]))
      unknown call_tmp[662292] "expr temp" "maybe param" "maybe type" "temp"
      (662295 'move' call_tmp[662292](135993 call - call_tmp[662287] 1))
      (136037 'move' tmp[136025](136035 call chpl_compute_low_param_loop_bound 0 call_tmp[662292]))
      unknown tmp[136026] "maybe param" "temp"
      unknown call_tmp[662299] "expr temp" "maybe param" "maybe type" "temp"
      (662302 'move' call_tmp[662299](136044 call size _mt[243] args[135983]))
      unknown call_tmp[662304] "expr temp" "maybe param" "maybe type" "temp"
      (662307 'move' call_tmp[662304](136042 call - call_tmp[662299] 1))
      (136050 'move' tmp[136026](136048 call chpl_compute_high_param_loop_bound 0 call_tmp[662304]))
      unknown tmp[136027] "maybe param" "temp"
      (136053 'move' tmp[136027] 1)
      ParamForLoop[136055]
      { i[136024] tmp[136025] tmp[136026] tmp[136027]
        unknown call_tmp[662309] "expr temp" "maybe param" "maybe type" "temp"
        (662312 'move' call_tmp[662309](136001 call args[135983] i[136024]))
        unknown call_tmp[662314] "expr temp" "maybe param" "maybe type" "temp"
        (662317 'move' call_tmp[662314](136003 call isRangeValue call_tmp[662309]))
        unknown call_tmp[662319] "expr temp" "maybe param" "maybe type" "temp"
        (662322 'move' call_tmp[662319](136019 call _cond_test call_tmp[662314]))
        if call_tmp[662319]
        {
          unknown call_tmp[662324] "expr temp" "maybe param" "maybe type" "temp"
          (662327 'move' call_tmp[662324](136007 call args[135983] i[136024]))
          unknown call_tmp[662331] "expr temp" "maybe param" "maybe type" "temp"
          (662334 'move' call_tmp[662331](136008 call stridable _mt[243] call_tmp[662324]))
          unknown call_tmp[662336] "expr temp" "maybe param" "maybe type" "temp"
          (662339 'move' call_tmp[662336](136014 call _cond_test call_tmp[662331]))
          if call_tmp[662336]
          {
            (518795 'move' ret[518790](518794 'deref' 1))
            gotoReturn _end_chpl__anyRankChangeStridable[518788] _end_chpl__anyRankChangeStridable[518788]
          }
        }
      }
      label _unused_continueLabel[136029]
      label _breakLabel[136028]
    }
    (518800 'move' ret[518790](518799 'deref' 0))
    label _end_chpl__anyRankChangeStridable[518788]
    (518792 return ret[518790])
  }
  function chpl__countRanges[136074](arg arg[136072]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518804] "RVV" "param" "temp"
    unknown call_tmp[662341] "expr temp" "maybe param" "maybe type" "temp"
    (662344 'move' call_tmp[662341](136079 call isRangeValue arg[136072]))
    unknown call_tmp[662346] "expr temp" "maybe param" "maybe type" "temp"
    (662349 'move' call_tmp[662346](136081 call _cast int(64)[13] call_tmp[662341]))
    (518809 'move' ret[518804](518808 'deref' call_tmp[662346]))
    (518806 return ret[518804])
  }
  function chpl__countRanges[136092](arg arg[136090]:_any[178](?), arg args[136095]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[518813] "RVV" "param" "temp"
    unknown call_tmp[662351] "expr temp" "maybe param" "maybe type" "temp"
    (662354 'move' call_tmp[662351](136101 call chpl__countRanges arg[136090]))
    unknown call_tmp[662356] "expr temp" "maybe param" "maybe type" "temp"
    (662359 'move' call_tmp[662356](136106 call chpl__countRanges(136104 'expand_tuple' args[136095])))
    unknown call_tmp[662361] "expr temp" "maybe param" "maybe type" "temp"
    (662364 'move' call_tmp[662361](136107 call + call_tmp[662351] call_tmp[662356]))
    (518818 'move' ret[518813](518817 'deref' call_tmp[662361]))
    (518815 return ret[518813])
  }
  function _validRankChangeArgs[136118](arg args[136116]:_any[178](?), arg idxType[136120]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518891] "RVV" "param" "temp"
    function _validRankChangeArg[136126](arg idxType[136124]:_any[178](?), arg r[136132]:range[64319](?)) param : _unknown[51]
    {
      unknown ret[518822] "RVV" "param" "temp"
      (518827 'move' ret[518822](518826 'deref' 1))
      (518824 return ret[518822])
    }
    function _validRankChangeArg[136146](arg idxType[136144]:_any[178](?), arg i[136149] :
    idxType[136144]) param : _unknown[51]
    {
      unknown ret[518831] "RVV" "param" "temp"
      (518836 'move' ret[518831](518835 'deref' 1))
      (518833 return ret[518831])
    }
    function _validRankChangeArg[136162](arg idxType[136160]:_any[178](?), arg x[136164]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518840] "RVV" "param" "temp"
      (518845 'move' ret[518840](518844 'deref' 0))
      (518842 return ret[518840])
    }
    function allValid[136174]() param : _unknown[51]
    {
      unknown ret[518849] "RVV" "param" "temp"
      {
        unknown dim[136205] "dead at end of block" "insert auto destroy"
        (543229 'init var' dim[136205] 0)
        (480639 'end of statement')
        unknown tmp[136206] "maybe param" "temp"
        unknown call_tmp[662368] "expr temp" "maybe param" "maybe type" "temp"
        (662371 'move' call_tmp[662368](136178 call size _mt[243] args[136116]))
        unknown call_tmp[662373] "expr temp" "maybe param" "maybe type" "temp"
        (662376 'move' call_tmp[662373](136182 call - call_tmp[662368] 1))
        (136218 'move' tmp[136206](136216 call chpl_compute_low_param_loop_bound 0 call_tmp[662373]))
        unknown tmp[136207] "maybe param" "temp"
        unknown call_tmp[662380] "expr temp" "maybe param" "maybe type" "temp"
        (662383 'move' call_tmp[662380](136225 call size _mt[243] args[136116]))
        unknown call_tmp[662385] "expr temp" "maybe param" "maybe type" "temp"
        (662388 'move' call_tmp[662385](136223 call - call_tmp[662380] 1))
        (136231 'move' tmp[136207](136229 call chpl_compute_high_param_loop_bound 0 call_tmp[662385]))
        unknown tmp[136208] "maybe param" "temp"
        (136234 'move' tmp[136208] 1)
        ParamForLoop[136236]
        { dim[136205] tmp[136206] tmp[136207] tmp[136208]
          {
            unknown call_tmp[662390] "expr temp" "maybe param" "maybe type" "temp"
            (662393 'move' call_tmp[662390](136192 call args[136116] dim[136205]))
            unknown call_tmp[662395] "expr temp" "maybe param" "maybe type" "temp"
            (662398 'move' call_tmp[662395](136193 call _validRankChangeArg idxType[136120] call_tmp[662390]))
            unknown call_tmp[662400] "expr temp" "maybe param" "maybe type" "temp"
            (662403 'move' call_tmp[662400](136194 call ! call_tmp[662395]))
            unknown call_tmp[662405] "expr temp" "maybe param" "maybe type" "temp"
            (662408 'move' call_tmp[662405](136199 call _cond_test call_tmp[662400]))
            if call_tmp[662405]
            {
              (518854 'move' ret[518849](518853 'deref' 0))
              gotoReturn _end_allValid[518847] _end_allValid[518847]
            }
          }
        }
        label _unused_continueLabel[136210]
        label _breakLabel[136209]
      }
      (518859 'move' ret[518849](518858 'deref' 1))
      label _end_allValid[518847]
      (518851 return ret[518849])
    }
    function oneRange[136253]() param : _unknown[51]
    {
      unknown ret[518863] "RVV" "param" "temp"
      {
        unknown dim[136281] "dead at end of block" "insert auto destroy"
        (543231 'init var' dim[136281] 0)
        (480642 'end of statement')
        unknown tmp[136282] "maybe param" "temp"
        unknown call_tmp[662412] "expr temp" "maybe param" "maybe type" "temp"
        (662415 'move' call_tmp[662412](136257 call size _mt[243] args[136116]))
        unknown call_tmp[662417] "expr temp" "maybe param" "maybe type" "temp"
        (662420 'move' call_tmp[662417](136261 call - call_tmp[662412] 1))
        (136294 'move' tmp[136282](136292 call chpl_compute_low_param_loop_bound 0 call_tmp[662417]))
        unknown tmp[136283] "maybe param" "temp"
        unknown call_tmp[662424] "expr temp" "maybe param" "maybe type" "temp"
        (662427 'move' call_tmp[662424](136301 call size _mt[243] args[136116]))
        unknown call_tmp[662429] "expr temp" "maybe param" "maybe type" "temp"
        (662432 'move' call_tmp[662429](136299 call - call_tmp[662424] 1))
        (136307 'move' tmp[136283](136305 call chpl_compute_high_param_loop_bound 0 call_tmp[662429]))
        unknown tmp[136284] "maybe param" "temp"
        (136310 'move' tmp[136284] 1)
        ParamForLoop[136312]
        { dim[136281] tmp[136282] tmp[136283] tmp[136284]
          {
            unknown call_tmp[662434] "expr temp" "maybe param" "maybe type" "temp"
            (662437 'move' call_tmp[662434](136269 call args[136116] dim[136281]))
            unknown call_tmp[662439] "expr temp" "maybe param" "maybe type" "temp"
            (662442 'move' call_tmp[662439](136271 call isRange call_tmp[662434]))
            unknown call_tmp[662444] "expr temp" "maybe param" "maybe type" "temp"
            (662447 'move' call_tmp[662444](136275 call _cond_test call_tmp[662439]))
            if call_tmp[662444]
            {
              (518868 'move' ret[518863](518867 'deref' 1))
              gotoReturn _end_oneRange[518861] _end_oneRange[518861]
            }
          }
        }
        label _unused_continueLabel[136286]
        label _breakLabel[136285]
      }
      (518873 'move' ret[518863](518872 'deref' 0))
      label _end_oneRange[518861]
      (518865 return ret[518863])
    }
    function oneNonRange[136329]() param : _unknown[51]
    {
      unknown ret[518877] "RVV" "param" "temp"
      {
        unknown dim[136359] "dead at end of block" "insert auto destroy"
        (543233 'init var' dim[136359] 0)
        (480645 'end of statement')
        unknown tmp[136360] "maybe param" "temp"
        unknown call_tmp[662451] "expr temp" "maybe param" "maybe type" "temp"
        (662454 'move' call_tmp[662451](136333 call size _mt[243] args[136116]))
        unknown call_tmp[662456] "expr temp" "maybe param" "maybe type" "temp"
        (662459 'move' call_tmp[662456](136337 call - call_tmp[662451] 1))
        (136372 'move' tmp[136360](136370 call chpl_compute_low_param_loop_bound 0 call_tmp[662456]))
        unknown tmp[136361] "maybe param" "temp"
        unknown call_tmp[662463] "expr temp" "maybe param" "maybe type" "temp"
        (662466 'move' call_tmp[662463](136379 call size _mt[243] args[136116]))
        unknown call_tmp[662468] "expr temp" "maybe param" "maybe type" "temp"
        (662471 'move' call_tmp[662468](136377 call - call_tmp[662463] 1))
        (136385 'move' tmp[136361](136383 call chpl_compute_high_param_loop_bound 0 call_tmp[662468]))
        unknown tmp[136362] "maybe param" "temp"
        (136388 'move' tmp[136362] 1)
        ParamForLoop[136390]
        { dim[136359] tmp[136360] tmp[136361] tmp[136362]
          {
            unknown call_tmp[662473] "expr temp" "maybe param" "maybe type" "temp"
            (662476 'move' call_tmp[662473](136345 call args[136116] dim[136359]))
            unknown call_tmp[662478] "expr temp" "maybe param" "maybe type" "temp"
            (662481 'move' call_tmp[662478](136347 call isRange call_tmp[662473]))
            unknown call_tmp[662483] "expr temp" "maybe param" "maybe type" "temp"
            (662486 'move' call_tmp[662483](136348 call ! call_tmp[662478]))
            unknown call_tmp[662488] "expr temp" "maybe param" "maybe type" "temp"
            (662491 'move' call_tmp[662488](136353 call _cond_test call_tmp[662483]))
            if call_tmp[662488]
            {
              (518882 'move' ret[518877](518881 'deref' 1))
              gotoReturn _end_oneNonRange[518875] _end_oneNonRange[518875]
            }
          }
        }
        label _unused_continueLabel[136364]
        label _breakLabel[136363]
      }
      (518887 'move' ret[518877](518886 'deref' 0))
      label _end_oneNonRange[518875]
      (518879 return ret[518877])
    }
    unknown tmp[426218] "maybe param" "temp"
    unknown tmp[426239] "maybe param" "temp"
    (426250 'move' tmp[426239](136407 call allValid))
    unknown call_tmp[662493] "expr temp" "maybe param" "maybe type" "temp"
    (662496 'move' call_tmp[662493](426252 call _cond_invalid tmp[426239]))
    if call_tmp[662493]
    {
      (426255 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567212] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567213] "maybe param" "temp"
    unknown call_tmp[662498] "expr temp" "maybe param" "maybe type" "temp"
    (662501 'move' call_tmp[662498](426240 call isTrue tmp[426239]))
    (567218 'move' tmp[567213](567216 call _cond_test call_tmp[662498]))
    if tmp[567213]
    {
      unknown tmp[567220] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662503] "expr temp" "maybe param" "maybe type" "temp"
      (662506 'move' call_tmp[662503](136410 call oneRange))
      (567222 'move' tmp[567220](426243 call isTrue call_tmp[662503]))
      (567227 'move' tmp[567212](567224 '_paramFoldLogical' tmp[567213] tmp[567220]))
    }
    {
      (567232 'move' tmp[567212](567229 '_paramFoldLogical' tmp[567213] 0))
    }
    (426229 'move' tmp[426218] tmp[567212])
    unknown call_tmp[662508] "expr temp" "maybe param" "maybe type" "temp"
    (662511 'move' call_tmp[662508](426231 call _cond_invalid tmp[426218]))
    if call_tmp[662508]
    {
      (426234 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567239] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567240] "maybe param" "temp"
    unknown call_tmp[662513] "expr temp" "maybe param" "maybe type" "temp"
    (662516 'move' call_tmp[662513](426219 call isTrue tmp[426218]))
    (567245 'move' tmp[567240](567243 call _cond_test call_tmp[662513]))
    if tmp[567240]
    {
      unknown tmp[567247] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662518] "expr temp" "maybe param" "maybe type" "temp"
      (662521 'move' call_tmp[662518](136415 call oneNonRange))
      (567249 'move' tmp[567247](426222 call isTrue call_tmp[662518]))
      (567254 'move' tmp[567239](567251 '_paramFoldLogical' tmp[567240] tmp[567247]))
    }
    {
      (567259 'move' tmp[567239](567256 '_paramFoldLogical' tmp[567240] 0))
    }
    (518896 'move' ret[518891](518895 'deref' tmp[567239]))
    (518893 return ret[518891])
  }
  function =[136428](ref arg a[136425]:_distribution[118973](?), arg b[136431]:_distribution[118973](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662525] "expr temp" "maybe param" "maybe type" "temp"
    (662528 'move' call_tmp[662525](136435 call _value _mt[243] a[136425]))
    unknown call_tmp[662530] "expr temp" "maybe param" "maybe type" "temp"
    (662533 'move' call_tmp[662530](136439 call == call_tmp[662525] nil[44]))
    unknown call_tmp[662535] "expr temp" "maybe param" "maybe type" "temp"
    (662538 'move' call_tmp[662535](136588 call _cond_test call_tmp[662530]))
    if call_tmp[662535]
    {
      unknown call_tmp[662542] "expr temp" "maybe param" "maybe type" "temp"
      (662545 'move' call_tmp[662542](136450 call(136446 call (partial) clone _mt[243] b[136431])))
      (136453 'move' a[136425](136452 call chpl__autoCopy call_tmp[662542]))
    }
    {
      unknown call_tmp[662549] "expr temp" "maybe param" "maybe type" "temp"
      (662552 'move' call_tmp[662549](136457 call _value _mt[243] a[136425]))
      unknown call_tmp[662556] "expr temp" "maybe param" "maybe type" "temp"
      (662559 'move' call_tmp[662556](136462 call _doms _mt[243] call_tmp[662549]))
      unknown call_tmp[662563] "expr temp" "maybe param" "maybe type" "temp"
      (662566 'move' call_tmp[662563](136465 call size _mt[243] call_tmp[662556]))
      unknown call_tmp[662568] "expr temp" "maybe param" "maybe type" "temp"
      (662571 'move' call_tmp[662568](136469 call == call_tmp[662563] 0))
      unknown call_tmp[662573] "expr temp" "maybe param" "maybe type" "temp"
      (662576 'move' call_tmp[662573](136584 call _cond_test call_tmp[662568]))
      if call_tmp[662573]
      {
        { scopeless type
          unknown call_type_tmp[492385] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662580] "expr temp" "maybe param" "maybe type" "temp"
          (662583 'move' call_tmp[662580](136472 call _value _mt[243] a[136425]))
          (492389 'move' call_type_tmp[492385](136475 'typeof' call_tmp[662580]))
        }
        { scopeless type
          unknown call_type_tmp[492391] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662587] "expr temp" "maybe param" "maybe type" "temp"
          (662590 'move' call_tmp[662587](136477 call _value _mt[243] b[136431]))
          (492395 'move' call_type_tmp[492391](136480 'typeof' call_tmp[662587]))
        }
        unknown call_tmp[662592] "expr temp" "maybe param" "maybe type" "temp"
        (662595 'move' call_tmp[662592](136481 call != call_type_tmp[492385] call_type_tmp[492391]))
        unknown call_tmp[662597] "expr temp" "maybe param" "maybe type" "temp"
        (662600 'move' call_tmp[662597](136504 call _cond_test call_tmp[662592]))
        if call_tmp[662597]
        {
          (136502 call compilerError "type mismatch in distribution assignment")
        }
        unknown call_tmp[662604] "expr temp" "maybe param" "maybe type" "temp"
        (662607 'move' call_tmp[662604](136511 call _value _mt[243] a[136425]))
        unknown call_tmp[662611] "expr temp" "maybe param" "maybe type" "temp"
        (662614 'move' call_tmp[662611](136515 call _value _mt[243] b[136431]))
        unknown call_tmp[662616] "expr temp" "maybe param" "maybe type" "temp"
        (662619 'move' call_tmp[662616](136518 call == call_tmp[662604] call_tmp[662611]))
        unknown call_tmp[662621] "expr temp" "maybe param" "maybe type" "temp"
        (662624 'move' call_tmp[662621](136537 call _cond_test call_tmp[662616]))
        if call_tmp[662621]
        {
        }
        {
          unknown call_tmp[662628] "expr temp" "maybe param" "maybe type" "temp"
          (662631 'move' call_tmp[662628](136522 call _value _mt[243] a[136425]))
          unknown call_tmp[662637] "expr temp" "maybe param" "maybe type" "temp"
          (662640 'move' call_tmp[662637](136531 call _value _mt[243] b[136431]))
          (136535 call(136527 call (partial) dsiAssign _mt[243] call_tmp[662628]) call_tmp[662637])
        }
        unknown call_tmp[662644] "expr temp" "maybe param" "maybe type" "temp"
        (662647 'move' call_tmp[662644](136544 call _instance _mt[243] a[136425]))
        unknown call_tmp[662649] "expr temp" "maybe param" "maybe type" "temp"
        (662652 'move' call_tmp[662649](136548 call _isPrivatized call_tmp[662644]))
        unknown call_tmp[662654] "expr temp" "maybe param" "maybe type" "temp"
        (662657 'move' call_tmp[662654](136557 call _cond_test call_tmp[662649]))
        if call_tmp[662654]
        {
          unknown call_tmp[662661] "expr temp" "maybe param" "maybe type" "temp"
          (662664 'move' call_tmp[662661](136551 call _value _mt[243] a[136425]))
          (136555 call _reprivatize call_tmp[662661])
        }
      }
      {
        (136581 call halt "assignment to distributions with declared domains is not yet supported")
      }
    }
    (518898 return _void[55])
  }
  function =[136602](ref arg a[136599]:_domain[125908](?), arg b[136605]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662668] "expr temp" "maybe param" "maybe type" "temp"
    (662671 'move' call_tmp[662668](136609 call rank _mt[243] a[136599]))
    unknown call_tmp[662675] "expr temp" "maybe param" "maybe type" "temp"
    (662678 'move' call_tmp[662675](136613 call rank _mt[243] b[136605]))
    unknown call_tmp[662680] "expr temp" "maybe param" "maybe type" "temp"
    (662683 'move' call_tmp[662680](136616 call != call_tmp[662668] call_tmp[662675]))
    unknown call_tmp[662685] "expr temp" "maybe param" "maybe type" "temp"
    (662688 'move' call_tmp[662685](136639 call _cond_test call_tmp[662680]))
    if call_tmp[662685]
    {
      (136637 call compilerError "rank mismatch in domain assignment")
    }
    unknown call_tmp[662692] "expr temp" "maybe param" "maybe type" "temp"
    (662695 'move' call_tmp[662692](136646 call idxType _mt[243] a[136599]))
    unknown call_tmp[662699] "expr temp" "maybe param" "maybe type" "temp"
    (662702 'move' call_tmp[662699](136650 call idxType _mt[243] b[136605]))
    unknown call_tmp[662704] "expr temp" "maybe param" "maybe type" "temp"
    (662707 'move' call_tmp[662704](136653 call != call_tmp[662692] call_tmp[662699]))
    unknown call_tmp[662709] "expr temp" "maybe param" "maybe type" "temp"
    (662712 'move' call_tmp[662709](136676 call _cond_test call_tmp[662704]))
    if call_tmp[662709]
    {
      (136674 call compilerError "index type mismatch in domain assignment")
    }
    unknown tmp[426281] "maybe param" "temp"
    (426292 'move' tmp[426281](136684 call isRectangularDom a[136599]))
    unknown call_tmp[662714] "expr temp" "maybe param" "maybe type" "temp"
    (662717 'move' call_tmp[662714](426294 call _cond_invalid tmp[426281]))
    if call_tmp[662714]
    {
      (426297 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567266] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567267] "maybe param" "temp"
    unknown call_tmp[662719] "expr temp" "maybe param" "maybe type" "temp"
    (662722 'move' call_tmp[662719](426282 call isTrue tmp[426281]))
    (567272 'move' tmp[567267](567270 call _cond_test call_tmp[662719]))
    if tmp[567267]
    {
      unknown tmp[567274] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662724] "expr temp" "maybe param" "maybe type" "temp"
      (662727 'move' call_tmp[662724](136688 call isRectangularDom b[136605]))
      (567276 'move' tmp[567274](426285 call isTrue call_tmp[662724]))
      (567281 'move' tmp[567266](567278 '_paramFoldLogical' tmp[567267] tmp[567274]))
    }
    {
      (567286 'move' tmp[567266](567283 '_paramFoldLogical' tmp[567267] 0))
    }
    unknown call_tmp[662729] "expr temp" "maybe param" "maybe type" "temp"
    (662732 'move' call_tmp[662729](136731 call _cond_test tmp[567266]))
    if call_tmp[662729]
    {
      unknown tmp[426260] "maybe param" "temp"
      unknown call_tmp[662736] "expr temp" "maybe param" "maybe type" "temp"
      (662739 'move' call_tmp[662736](136692 call stridable _mt[243] a[136599]))
      (426271 'move' tmp[426260](136695 call ! call_tmp[662736]))
      unknown call_tmp[662741] "expr temp" "maybe param" "maybe type" "temp"
      (662744 'move' call_tmp[662741](426273 call _cond_invalid tmp[426260]))
      if call_tmp[662741]
      {
        (426276 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567293] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567294] "maybe param" "temp"
      unknown call_tmp[662746] "expr temp" "maybe param" "maybe type" "temp"
      (662749 'move' call_tmp[662746](426261 call isTrue tmp[426260]))
      (567299 'move' tmp[567294](567297 call _cond_test call_tmp[662746]))
      if tmp[567294]
      {
        unknown tmp[567301] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[662753] "expr temp" "maybe param" "maybe type" "temp"
        (662756 'move' call_tmp[662753](136698 call stridable _mt[243] b[136605]))
        (567303 'move' tmp[567301](426264 call isTrue call_tmp[662753]))
        (567308 'move' tmp[567293](567305 '_paramFoldLogical' tmp[567294] tmp[567301]))
      }
      {
        (567313 'move' tmp[567293](567310 '_paramFoldLogical' tmp[567294] 0))
      }
      unknown call_tmp[662758] "expr temp" "maybe param" "maybe type" "temp"
      (662761 'move' call_tmp[662758](136726 call _cond_test tmp[567293]))
      if call_tmp[662758]
      {
        (136724 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
      }
    }
    unknown call_tmp[662765] "expr temp" "maybe param" "maybe type" "temp"
    (662768 'move' call_tmp[662765](136737 call _instance _mt[243] a[136599]))
    (136747 call(136740 call (partial) dsiAssignDomain _mt[243] call_tmp[662765]) b[136605](lhsPrivate = 0))
    (480661 'end of statement')
    unknown call_tmp[662774] "expr temp" "maybe param" "maybe type" "temp"
    (662777 'move' call_tmp[662774](136751 call _instance _mt[243] a[136599]))
    unknown call_tmp[662779] "expr temp" "maybe param" "maybe type" "temp"
    (662782 'move' call_tmp[662779](136755 call _isPrivatized call_tmp[662774]))
    unknown call_tmp[662784] "expr temp" "maybe param" "maybe type" "temp"
    (662787 'move' call_tmp[662784](136765 call _cond_test call_tmp[662779]))
    if call_tmp[662784]
    {
      unknown call_tmp[662791] "expr temp" "maybe param" "maybe type" "temp"
      (662794 'move' call_tmp[662791](136758 call _instance _mt[243] a[136599]))
      (136762 call _reprivatize call_tmp[662791])
    }
    (518900 return _void[55])
  }
  function chpl__isLegalRectTupDomAssign[136775](arg d[136773]:_any[178](?), arg t[136777]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518940] "RVV" "param" "temp"
    function isRangeTuple[136783](arg a[136781]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518922] "RVV" "param" "temp"
      function peelArgs[136789](arg first[136787]:_any[178](?), arg rest[136792]:_any[178](?) ...) param : _unknown[51]
      {
        unknown ret[518904] "RVV" "param" "temp"
        unknown tmp[567374] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567375] "maybe param" "temp"
        unknown call_tmp[662798] "expr temp" "maybe param" "maybe type" "temp"
        (662801 'move' call_tmp[662798](136796 call size _mt[243] rest[136792]))
        unknown call_tmp[662803] "expr temp" "maybe param" "maybe type" "temp"
        (662806 'move' call_tmp[662803](136800 call > call_tmp[662798] 1))
        (567380 'move' tmp[567375](567378 call _cond_test call_tmp[662803]))
        if tmp[567375]
        {
          unknown tmp[426302] "maybe param" "temp"
          (426313 'move' tmp[426302](136805 call isRange first[136787]))
          unknown call_tmp[662808] "expr temp" "maybe param" "maybe type" "temp"
          (662811 'move' call_tmp[662808](426315 call _cond_invalid tmp[426302]))
          if call_tmp[662808]
          {
            (426318 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567320] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567321] "maybe param" "temp"
          unknown call_tmp[662813] "expr temp" "maybe param" "maybe type" "temp"
          (662816 'move' call_tmp[662813](426303 call isTrue tmp[426302]))
          (567326 'move' tmp[567321](567324 call _cond_test call_tmp[662813]))
          if tmp[567321]
          {
            unknown tmp[567328] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662818] "expr temp" "maybe param" "maybe type" "temp"
            (662821 'move' call_tmp[662818](136810 call peelArgs(136808 'expand_tuple' rest[136792])))
            (567330 'move' tmp[567328](426306 call isTrue call_tmp[662818]))
            (567335 'move' tmp[567320](567332 '_paramFoldLogical' tmp[567321] tmp[567328]))
          }
          {
            (567340 'move' tmp[567320](567337 '_paramFoldLogical' tmp[567321] 0))
          }
          (567385 'move' tmp[567374](567382 '_paramFoldLogical' tmp[567375] tmp[567320]))
        }
        {
          unknown tmp[426323] "maybe param" "temp"
          (426334 'move' tmp[426323](136816 call isRange first[136787]))
          unknown call_tmp[662823] "expr temp" "maybe param" "maybe type" "temp"
          (662826 'move' call_tmp[662823](426336 call _cond_invalid tmp[426323]))
          if call_tmp[662823]
          {
            (426339 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567347] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567348] "maybe param" "temp"
          unknown call_tmp[662828] "expr temp" "maybe param" "maybe type" "temp"
          (662831 'move' call_tmp[662828](426324 call isTrue tmp[426323]))
          (567353 'move' tmp[567348](567351 call _cond_test call_tmp[662828]))
          if tmp[567348]
          {
            unknown tmp[567355] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662833] "expr temp" "maybe param" "maybe type" "temp"
            (662836 'move' call_tmp[662833](136821 call rest[136792] 0))
            unknown call_tmp[662838] "expr temp" "maybe param" "maybe type" "temp"
            (662841 'move' call_tmp[662838](136823 call isRange call_tmp[662833]))
            (567357 'move' tmp[567355](426327 call isTrue call_tmp[662838]))
            (567362 'move' tmp[567347](567359 '_paramFoldLogical' tmp[567348] tmp[567355]))
          }
          {
            (567367 'move' tmp[567347](567364 '_paramFoldLogical' tmp[567348] 0))
          }
          (567390 'move' tmp[567374](567387 '_paramFoldLogical' tmp[567375] tmp[567347]))
        }
        (518909 'move' ret[518904](518908 'deref' tmp[567374]))
        (518906 return ret[518904])
      }
      function peelArgs[136839](arg first[136837]:_any[178](?)) param : _unknown[51]
      {
        unknown ret[518913] "RVV" "param" "temp"
        unknown call_tmp[662843] "expr temp" "maybe param" "maybe type" "temp"
        (662846 'move' call_tmp[662843](136844 call isRange first[136837]))
        (518918 'move' ret[518913](518917 'deref' call_tmp[662843]))
        (518915 return ret[518913])
      }
      unknown tmp[567397] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567398] "maybe param" "temp"
      unknown call_tmp[662848] "expr temp" "maybe param" "maybe type" "temp"
      (662851 'move' call_tmp[662848](136853 call isTuple a[136781]))
      unknown call_tmp[662853] "expr temp" "maybe param" "maybe type" "temp"
      (662856 'move' call_tmp[662853](136854 call ! call_tmp[662848]))
      (567403 'move' tmp[567398](567401 call _cond_test call_tmp[662853]))
      if tmp[567398]
      {
        (567408 'move' tmp[567397](567405 '_paramFoldLogical' tmp[567398] 0))
      }
      {
        unknown tmp[567410] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (567412 'move' tmp[567410](136861 call peelArgs(136859 'expand_tuple' a[136781])))
        (567417 'move' tmp[567397](567414 '_paramFoldLogical' tmp[567398] tmp[567410]))
      }
      (518927 'move' ret[518922](518926 'deref' tmp[567397]))
      (518924 return ret[518922])
    }
    function strideSafe[136874](arg d[136872]:_any[178](?), arg rt[136876]:_any[178](?), param arg dim[136880]:int(64)[13] =
    0) param : _unknown[51]
    {
      unknown ret[518931] "RVV" "param" "temp"
      unknown tmp[567505] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567506] "maybe param" "temp"
      unknown call_tmp[662860] "expr temp" "maybe param" "maybe type" "temp"
      (662863 'move' call_tmp[662860](136886 call rank _mt[243] d[136872]))
      unknown call_tmp[662865] "expr temp" "maybe param" "maybe type" "temp"
      (662868 'move' call_tmp[662865](136890 call - call_tmp[662860] 1))
      unknown call_tmp[662870] "expr temp" "maybe param" "maybe type" "temp"
      (662873 'move' call_tmp[662870](136892 call == dim[136880] call_tmp[662865]))
      (567511 'move' tmp[567506](567509 call _cond_test call_tmp[662870]))
      if tmp[567506]
      {
        unknown tmp[426344] "maybe param" "temp"
        unknown call_tmp[662877] "expr temp" "maybe param" "maybe type" "temp"
        (662880 'move' call_tmp[662877](136900 call(136895 call (partial) dim _mt[243] d[136872]) dim[136880]))
        (426355 'move' tmp[426344](136901 call stridable _mt[243] call_tmp[662877]))
        unknown call_tmp[662884] "expr temp" "maybe param" "maybe type" "temp"
        (662887 'move' call_tmp[662884](426357 call _cond_invalid tmp[426344]))
        if call_tmp[662884]
        {
          (426360 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567424] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567425] "maybe param" "temp"
        unknown call_tmp[662889] "expr temp" "maybe param" "maybe type" "temp"
        (662892 'move' call_tmp[662889](426345 call isTrue tmp[426344]))
        (567430 'move' tmp[567425](567428 call _cond_test call_tmp[662889]))
        if tmp[567425]
        {
          (567435 'move' tmp[567424](567432 '_paramFoldLogical' tmp[567425] 1))
        }
        {
          unknown tmp[567437] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662894] "expr temp" "maybe param" "maybe type" "temp"
          (662897 'move' call_tmp[662894](136907 call rt[136876] dim[136880]))
          unknown call_tmp[662901] "expr temp" "maybe param" "maybe type" "temp"
          (662904 'move' call_tmp[662901](136908 call stridable _mt[243] call_tmp[662894]))
          unknown call_tmp[662906] "expr temp" "maybe param" "maybe type" "temp"
          (662909 'move' call_tmp[662906](136911 call ! call_tmp[662901]))
          (567439 'move' tmp[567437](426349 call isTrue call_tmp[662906]))
          (567444 'move' tmp[567424](567441 '_paramFoldLogical' tmp[567425] tmp[567437]))
        }
        (567516 'move' tmp[567505](567513 '_paramFoldLogical' tmp[567506] tmp[567424]))
      }
      {
        unknown tmp[426365] "maybe param" "temp"
        unknown tmp[426386] "maybe param" "temp"
        unknown call_tmp[662913] "expr temp" "maybe param" "maybe type" "temp"
        (662916 'move' call_tmp[662913](136921 call(136916 call (partial) dim _mt[243] d[136872]) dim[136880]))
        (426397 'move' tmp[426386](136922 call stridable _mt[243] call_tmp[662913]))
        unknown call_tmp[662920] "expr temp" "maybe param" "maybe type" "temp"
        (662923 'move' call_tmp[662920](426399 call _cond_invalid tmp[426386]))
        if call_tmp[662920]
        {
          (426402 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567451] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567452] "maybe param" "temp"
        unknown call_tmp[662925] "expr temp" "maybe param" "maybe type" "temp"
        (662928 'move' call_tmp[662925](426387 call isTrue tmp[426386]))
        (567457 'move' tmp[567452](567455 call _cond_test call_tmp[662925]))
        if tmp[567452]
        {
          (567462 'move' tmp[567451](567459 '_paramFoldLogical' tmp[567452] 1))
        }
        {
          unknown tmp[567464] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662930] "expr temp" "maybe param" "maybe type" "temp"
          (662933 'move' call_tmp[662930](136928 call rt[136876] dim[136880]))
          unknown call_tmp[662937] "expr temp" "maybe param" "maybe type" "temp"
          (662940 'move' call_tmp[662937](136929 call stridable _mt[243] call_tmp[662930]))
          unknown call_tmp[662942] "expr temp" "maybe param" "maybe type" "temp"
          (662945 'move' call_tmp[662942](136932 call ! call_tmp[662937]))
          (567466 'move' tmp[567464](426391 call isTrue call_tmp[662942]))
          (567471 'move' tmp[567451](567468 '_paramFoldLogical' tmp[567452] tmp[567464]))
        }
        (426376 'move' tmp[426365] tmp[567451])
        unknown call_tmp[662947] "expr temp" "maybe param" "maybe type" "temp"
        (662950 'move' call_tmp[662947](426378 call _cond_invalid tmp[426365]))
        if call_tmp[662947]
        {
          (426381 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567478] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567479] "maybe param" "temp"
        unknown call_tmp[662952] "expr temp" "maybe param" "maybe type" "temp"
        (662955 'move' call_tmp[662952](426366 call isTrue tmp[426365]))
        (567484 'move' tmp[567479](567482 call _cond_test call_tmp[662952]))
        if tmp[567479]
        {
          unknown tmp[567486] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662957] "expr temp" "maybe param" "maybe type" "temp"
          (662960 'move' call_tmp[662957](136942 call + dim[136880] 1))
          unknown call_tmp[662962] "expr temp" "maybe param" "maybe type" "temp"
          (662965 'move' call_tmp[662962](136944 call strideSafe d[136872] rt[136876] call_tmp[662957]))
          (567488 'move' tmp[567486](426369 call isTrue call_tmp[662962]))
          (567493 'move' tmp[567478](567490 '_paramFoldLogical' tmp[567479] tmp[567486]))
        }
        {
          (567498 'move' tmp[567478](567495 '_paramFoldLogical' tmp[567479] 0))
        }
        (567521 'move' tmp[567505](567518 '_paramFoldLogical' tmp[567506] tmp[567478]))
      }
      (518936 'move' ret[518931](518935 'deref' tmp[567505]))
      (518933 return ret[518931])
    }
    unknown tmp[426407] "maybe param" "temp"
    unknown tmp[426428] "maybe param" "temp"
    (426439 'move' tmp[426428](136958 call isRangeTuple t[136777]))
    unknown call_tmp[662967] "expr temp" "maybe param" "maybe type" "temp"
    (662970 'move' call_tmp[662967](426441 call _cond_invalid tmp[426428]))
    if call_tmp[662967]
    {
      (426444 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567528] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567529] "maybe param" "temp"
    unknown call_tmp[662972] "expr temp" "maybe param" "maybe type" "temp"
    (662975 'move' call_tmp[662972](426429 call isTrue tmp[426428]))
    (567534 'move' tmp[567529](567532 call _cond_test call_tmp[662972]))
    if tmp[567529]
    {
      unknown tmp[567536] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662979] "expr temp" "maybe param" "maybe type" "temp"
      (662982 'move' call_tmp[662979](136960 call rank _mt[243] d[136773]))
      unknown call_tmp[662986] "expr temp" "maybe param" "maybe type" "temp"
      (662989 'move' call_tmp[662986](136964 call size _mt[243] t[136777]))
      unknown call_tmp[662991] "expr temp" "maybe param" "maybe type" "temp"
      (662994 'move' call_tmp[662991](136967 call == call_tmp[662979] call_tmp[662986]))
      (567538 'move' tmp[567536](426432 call isTrue call_tmp[662991]))
      (567543 'move' tmp[567528](567540 '_paramFoldLogical' tmp[567529] tmp[567536]))
    }
    {
      (567548 'move' tmp[567528](567545 '_paramFoldLogical' tmp[567529] 0))
    }
    (426418 'move' tmp[426407] tmp[567528])
    unknown call_tmp[662996] "expr temp" "maybe param" "maybe type" "temp"
    (662999 'move' call_tmp[662996](426420 call _cond_invalid tmp[426407]))
    if call_tmp[662996]
    {
      (426423 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567555] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567556] "maybe param" "temp"
    unknown call_tmp[663001] "expr temp" "maybe param" "maybe type" "temp"
    (663004 'move' call_tmp[663001](426408 call isTrue tmp[426407]))
    (567561 'move' tmp[567556](567559 call _cond_test call_tmp[663001]))
    if tmp[567556]
    {
      unknown tmp[567563] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663006] "expr temp" "maybe param" "maybe type" "temp"
      (663009 'move' call_tmp[663006](136975 call strideSafe d[136773] t[136777]))
      (567565 'move' tmp[567563](426411 call isTrue call_tmp[663006]))
      (567570 'move' tmp[567555](567567 '_paramFoldLogical' tmp[567556] tmp[567563]))
    }
    {
      (567575 'move' tmp[567555](567572 '_paramFoldLogical' tmp[567556] 0))
    }
    (518945 'move' ret[518940](518944 'deref' tmp[567555]))
    (518942 return ret[518940])
  }
  function =[136988](ref arg a[136985]:_domain[125908](?), arg b[136991]:_tuple[56202](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[663011] "expr temp" "maybe param" "maybe type" "temp"
    (663014 'move' call_tmp[663011](136998 call chpl__isLegalRectTupDomAssign a[136985] b[136991]))
    unknown call_tmp[663016] "expr temp" "maybe param" "maybe type" "temp"
    (663019 'move' call_tmp[663016](137082 call _cond_test call_tmp[663011]))
    if call_tmp[663016]
    {
      unknown call_tmp[663021] "expr temp" "maybe param" "maybe type" "temp"
      (663024 'move' call_tmp[663021](137003 call chpl__buildDomainExpr(137001 'expand_tuple' b[136991])))
      (137005 call = a[136985] call_tmp[663021])
    }
    {
      (137014 call(137010 call (partial) clear _mt[243] a[136985]))
      (480671 'end of statement')
      {
        unknown _indexOfInterest[137039] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[137040] "expr temp" "temp"
        unknown call_tmp[663030] "expr temp" "maybe param" "maybe type" "temp"
        (663033 'move' call_tmp[663030](137055 call size _mt[243] b[136991]))
        unknown call_tmp[663035] "expr temp" "maybe param" "maybe type" "temp"
        (663038 'move' call_tmp[663035](137059 call chpl_direct_counted_range_iter 0 call_tmp[663030]))
        (137049 'move' _iterator[137040](137047 call _getIterator call_tmp[663035]))
        Defer
        {
          {
            (137075 call _freeIterator _iterator[137040])
          }
        }
        { scopeless type
          (137064 'move' _indexOfInterest[137039](137061 call iteratorIndex _iterator[137040]))
        }
        ForLoop[137041]
        {
          unknown ind[137068] "index var" "insert auto destroy"
          (480673 'end of statement')
          (137070 'move' ind[137068] _indexOfInterest[137039])
          (480674 'end of statement' ind[137068])
          {
            unknown call_tmp[663042] "expr temp" "maybe param" "maybe type" "temp"
            (663045 'move' call_tmp[663042](137034 call b[136991] ind[137068]))
            (137036 call(137028 call (partial) add _mt[243] a[136985]) call_tmp[663042])
            (480676 'end of statement' ind[137068])
          }
          label _continueLabel[137044]
          _indexOfInterest[137039]
          _iterator[137040]
        }
        label _breakLabel[137045]
      }
    }
    (518947 return _void[55])
  }
  function =[137095](ref arg d[137092]:_domain[125908](?), arg r[137101]:range[64319](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[663047] "expr temp" "maybe param" "maybe type" "temp"
    (663050 'move' call_tmp[663047](137107 call chpl__buildDomainExpr r[137101]))
    (137109 call = d[137092] call_tmp[663047])
    (518949 return _void[55])
  }
  function =[137121](ref arg a[137118]:_domain[125908](?), arg b[137123]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[663052] "expr temp" "maybe param" "maybe type" "temp"
    (663055 'move' call_tmp[663052](137128 call isRectangularDom a[137118]))
    unknown call_tmp[663057] "expr temp" "maybe param" "maybe type" "temp"
    (663060 'move' call_tmp[663057](137150 call _cond_test call_tmp[663052]))
    if call_tmp[663057]
    {
      (137148 call compilerError "Illegal assignment to a rectangular domain")
    }
    (137161 call(137157 call (partial) clear _mt[243] a[137118]))
    (480680 'end of statement')
    {
      unknown _indexOfInterest[137174] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137175] "expr temp" "temp"
      (137184 'move' _iterator[137175](137182 call _getIterator b[137123]))
      Defer
      {
        {
          (137200 call _freeIterator _iterator[137175])
        }
      }
      { scopeless type
        (137189 'move' _indexOfInterest[137174](137186 call iteratorIndex _iterator[137175]))
      }
      ForLoop[137176]
      {
        unknown ind[137193] "index var" "insert auto destroy"
        (480682 'end of statement')
        (137195 'move' ind[137193] _indexOfInterest[137174])
        (480683 'end of statement' ind[137193])
        {
          (137171 call(137166 call (partial) add _mt[243] a[137118]) ind[137193])
          (480685 'end of statement' ind[137193])
        }
        label _continueLabel[137179]
        _indexOfInterest[137174]
        _iterator[137175]
      }
      label _breakLabel[137180]
    }
    (518951 return _void[55])
  }
  function chpl__serializeAssignment[137217](arg a[137214]:_array[133594](?), arg b[137219]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518955] "RVV" "param" "temp"
    unknown tmp[426449] "maybe param" "temp"
    unknown call_tmp[663068] "expr temp" "maybe param" "maybe type" "temp"
    (663071 'move' call_tmp[663068](137222 call rank _mt[243] a[137214]))
    (426460 'move' tmp[426449](137226 call != call_tmp[663068] 1))
    unknown call_tmp[663073] "expr temp" "maybe param" "maybe type" "temp"
    (663076 'move' call_tmp[663073](426462 call _cond_invalid tmp[426449]))
    if call_tmp[663073]
    {
      (426465 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567582] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567583] "maybe param" "temp"
    unknown call_tmp[663078] "expr temp" "maybe param" "maybe type" "temp"
    (663081 'move' call_tmp[663078](426450 call isTrue tmp[426449]))
    (567588 'move' tmp[567583](567586 call _cond_test call_tmp[663078]))
    if tmp[567583]
    {
      unknown tmp[567590] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663083] "expr temp" "maybe param" "maybe type" "temp"
      (663086 'move' call_tmp[663083](137231 call isRange b[137219]))
      (567592 'move' tmp[567590](426453 call isTrue call_tmp[663083]))
      (567597 'move' tmp[567582](567594 '_paramFoldLogical' tmp[567583] tmp[567590]))
    }
    {
      (567602 'move' tmp[567582](567599 '_paramFoldLogical' tmp[567583] 0))
    }
    unknown call_tmp[663088] "expr temp" "maybe param" "maybe type" "temp"
    (663091 'move' call_tmp[663088](137237 call _cond_test tmp[567582]))
    if call_tmp[663088]
    {
      (518960 'move' ret[518955](518959 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518953] _end_chpl__serializeAssignment[518953]
    }
    unknown tmp[426470] "maybe param" "temp"
    unknown tmp[426491] "maybe param" "temp"
    unknown tmp[426512] "maybe param" "temp"
    unknown call_tmp[663093] "expr temp" "maybe param" "maybe type" "temp"
    (663096 'move' call_tmp[663093](137246 call isRectangularArr a[137214]))
    (426523 'move' tmp[426512](137247 call ! call_tmp[663093]))
    unknown call_tmp[663098] "expr temp" "maybe param" "maybe type" "temp"
    (663101 'move' call_tmp[663098](426525 call _cond_invalid tmp[426512]))
    if call_tmp[663098]
    {
      (426528 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567609] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567610] "maybe param" "temp"
    unknown call_tmp[663103] "expr temp" "maybe param" "maybe type" "temp"
    (663106 'move' call_tmp[663103](426513 call isTrue tmp[426512]))
    (567615 'move' tmp[567610](567613 call _cond_test call_tmp[663103]))
    if tmp[567610]
    {
      unknown tmp[567617] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663108] "expr temp" "maybe param" "maybe type" "temp"
      (663111 'move' call_tmp[663108](137252 call isAssociativeArr a[137214]))
      unknown call_tmp[663113] "expr temp" "maybe param" "maybe type" "temp"
      (663116 'move' call_tmp[663113](137253 call ! call_tmp[663108]))
      (567619 'move' tmp[567617](426516 call isTrue call_tmp[663113]))
      (567624 'move' tmp[567609](567621 '_paramFoldLogical' tmp[567610] tmp[567617]))
    }
    {
      (567629 'move' tmp[567609](567626 '_paramFoldLogical' tmp[567610] 0))
    }
    (426502 'move' tmp[426491] tmp[567609])
    unknown call_tmp[663118] "expr temp" "maybe param" "maybe type" "temp"
    (663121 'move' call_tmp[663118](426504 call _cond_invalid tmp[426491]))
    if call_tmp[663118]
    {
      (426507 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567636] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567637] "maybe param" "temp"
    unknown call_tmp[663123] "expr temp" "maybe param" "maybe type" "temp"
    (663126 'move' call_tmp[663123](426492 call isTrue tmp[426491]))
    (567642 'move' tmp[567637](567640 call _cond_test call_tmp[663123]))
    if tmp[567637]
    {
      unknown tmp[567644] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663128] "expr temp" "maybe param" "maybe type" "temp"
      (663131 'move' call_tmp[663128](137260 call isSparseArr a[137214]))
      unknown call_tmp[663133] "expr temp" "maybe param" "maybe type" "temp"
      (663136 'move' call_tmp[663133](137261 call ! call_tmp[663128]))
      (567646 'move' tmp[567644](426495 call isTrue call_tmp[663133]))
      (567651 'move' tmp[567636](567648 '_paramFoldLogical' tmp[567637] tmp[567644]))
    }
    {
      (567656 'move' tmp[567636](567653 '_paramFoldLogical' tmp[567637] 0))
    }
    (426481 'move' tmp[426470] tmp[567636])
    unknown call_tmp[663138] "expr temp" "maybe param" "maybe type" "temp"
    (663141 'move' call_tmp[663138](426483 call _cond_invalid tmp[426470]))
    if call_tmp[663138]
    {
      (426486 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567744] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567745] "maybe param" "temp"
    unknown call_tmp[663143] "expr temp" "maybe param" "maybe type" "temp"
    (663146 'move' call_tmp[663143](426471 call isTrue tmp[426470]))
    (567750 'move' tmp[567745](567748 call _cond_test call_tmp[663143]))
    if tmp[567745]
    {
      (567755 'move' tmp[567744](567752 '_paramFoldLogical' tmp[567745] 1))
    }
    {
      unknown tmp[426533] "maybe param" "temp"
      unknown tmp[426554] "maybe param" "temp"
      unknown tmp[426575] "maybe param" "temp"
      (426586 'move' tmp[426575](137268 call isArray b[137219]))
      unknown call_tmp[663148] "expr temp" "maybe param" "maybe type" "temp"
      (663151 'move' call_tmp[663148](426588 call _cond_invalid tmp[426575]))
      if call_tmp[663148]
      {
        (426591 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567663] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567664] "maybe param" "temp"
      unknown call_tmp[663153] "expr temp" "maybe param" "maybe type" "temp"
      (663156 'move' call_tmp[663153](426576 call isTrue tmp[426575]))
      (567669 'move' tmp[567664](567667 call _cond_test call_tmp[663153]))
      if tmp[567664]
      {
        unknown tmp[567671] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663158] "expr temp" "maybe param" "maybe type" "temp"
        (663161 'move' call_tmp[663158](137272 call isRectangularArr b[137219]))
        unknown call_tmp[663163] "expr temp" "maybe param" "maybe type" "temp"
        (663166 'move' call_tmp[663163](137273 call ! call_tmp[663158]))
        (567673 'move' tmp[567671](426579 call isTrue call_tmp[663163]))
        (567678 'move' tmp[567663](567675 '_paramFoldLogical' tmp[567664] tmp[567671]))
      }
      {
        (567683 'move' tmp[567663](567680 '_paramFoldLogical' tmp[567664] 0))
      }
      (426565 'move' tmp[426554] tmp[567663])
      unknown call_tmp[663168] "expr temp" "maybe param" "maybe type" "temp"
      (663171 'move' call_tmp[663168](426567 call _cond_invalid tmp[426554]))
      if call_tmp[663168]
      {
        (426570 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567690] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567691] "maybe param" "temp"
      unknown call_tmp[663173] "expr temp" "maybe param" "maybe type" "temp"
      (663176 'move' call_tmp[663173](426555 call isTrue tmp[426554]))
      (567696 'move' tmp[567691](567694 call _cond_test call_tmp[663173]))
      if tmp[567691]
      {
        unknown tmp[567698] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663178] "expr temp" "maybe param" "maybe type" "temp"
        (663181 'move' call_tmp[663178](137280 call isAssociativeArr b[137219]))
        unknown call_tmp[663183] "expr temp" "maybe param" "maybe type" "temp"
        (663186 'move' call_tmp[663183](137281 call ! call_tmp[663178]))
        (567700 'move' tmp[567698](426558 call isTrue call_tmp[663183]))
        (567705 'move' tmp[567690](567702 '_paramFoldLogical' tmp[567691] tmp[567698]))
      }
      {
        (567710 'move' tmp[567690](567707 '_paramFoldLogical' tmp[567691] 0))
      }
      (426544 'move' tmp[426533] tmp[567690])
      unknown call_tmp[663188] "expr temp" "maybe param" "maybe type" "temp"
      (663191 'move' call_tmp[663188](426546 call _cond_invalid tmp[426533]))
      if call_tmp[663188]
      {
        (426549 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567717] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567718] "maybe param" "temp"
      unknown call_tmp[663193] "expr temp" "maybe param" "maybe type" "temp"
      (663196 'move' call_tmp[663193](426534 call isTrue tmp[426533]))
      (567723 'move' tmp[567718](567721 call _cond_test call_tmp[663193]))
      if tmp[567718]
      {
        unknown tmp[567725] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663198] "expr temp" "maybe param" "maybe type" "temp"
        (663201 'move' call_tmp[663198](137288 call isSparseArr b[137219]))
        unknown call_tmp[663203] "expr temp" "maybe param" "maybe type" "temp"
        (663206 'move' call_tmp[663203](137289 call ! call_tmp[663198]))
        (567727 'move' tmp[567725](426537 call isTrue call_tmp[663203]))
        (567732 'move' tmp[567717](567729 '_paramFoldLogical' tmp[567718] tmp[567725]))
      }
      {
        (567737 'move' tmp[567717](567734 '_paramFoldLogical' tmp[567718] 0))
      }
      unknown tmp[567757] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (567759 'move' tmp[567757](426475 call isTrue tmp[567717]))
      (567764 'move' tmp[567744](567761 '_paramFoldLogical' tmp[567745] tmp[567757]))
    }
    unknown call_tmp[663208] "expr temp" "maybe param" "maybe type" "temp"
    (663211 'move' call_tmp[663208](137298 call _cond_test tmp[567744]))
    if call_tmp[663208]
    {
      (518965 'move' ret[518955](518964 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518953] _end_chpl__serializeAssignment[518953]
    }
    (518970 'move' ret[518955](518969 'deref' 0))
    label _end_chpl__serializeAssignment[518953]
    (518957 return ret[518955])
  }
  function chpl__compatibleForBulkTransfer[137316](arg a[137313]:_array[133594](?), arg b[137321]:_array[133594](?), param arg kind[137325]:_tElt[137999]) param : _unknown[51]
  {
    unknown ret[518974] "RVV" "param" "temp"
    unknown call_tmp[663213] "expr temp" "maybe param" "maybe type" "temp"
    (663216 'move' call_tmp[663213](137329 call ! useBulkTransfer[113728]))
    unknown call_tmp[663218] "expr temp" "maybe param" "maybe type" "temp"
    (663221 'move' call_tmp[663218](137334 call _cond_test call_tmp[663213]))
    if call_tmp[663218]
    {
      (518979 'move' ret[518974](518978 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518972] _end_chpl__compatibleForBulkTransfer[518972]
    }
    unknown call_tmp[663225] "expr temp" "maybe param" "maybe type" "temp"
    (663228 'move' call_tmp[663225](137341 call eltType _mt[243] a[137313]))
    unknown call_tmp[663232] "expr temp" "maybe param" "maybe type" "temp"
    (663235 'move' call_tmp[663232](137345 call eltType _mt[243] b[137321]))
    unknown call_tmp[663237] "expr temp" "maybe param" "maybe type" "temp"
    (663240 'move' call_tmp[663237](137348 call != call_tmp[663225] call_tmp[663232]))
    unknown call_tmp[663242] "expr temp" "maybe param" "maybe type" "temp"
    (663245 'move' call_tmp[663242](137353 call _cond_test call_tmp[663237]))
    if call_tmp[663242]
    {
      (518984 'move' ret[518974](518983 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518972] _end_chpl__compatibleForBulkTransfer[518972]
    }
    unknown call_tmp[663247] "expr temp" "maybe param" "maybe type" "temp"
    (663250 'move' call_tmp[663247](137363 call == kind[137325] move[137993]))
    unknown call_tmp[663252] "expr temp" "maybe param" "maybe type" "temp"
    (663255 'move' call_tmp[663252](137368 call _cond_test call_tmp[663247]))
    if call_tmp[663252]
    {
      (518989 'move' ret[518974](518988 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518972] _end_chpl__compatibleForBulkTransfer[518972]
    }
    unknown tmp[426596] "maybe param" "temp"
    (426607 'move' tmp[426596](137380 call == kind[137325] initCopy[137995]))
    unknown call_tmp[663257] "expr temp" "maybe param" "maybe type" "temp"
    (663260 'move' call_tmp[663257](426609 call _cond_invalid tmp[426596]))
    if call_tmp[663257]
    {
      (426612 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567771] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567772] "maybe param" "temp"
    unknown call_tmp[663262] "expr temp" "maybe param" "maybe type" "temp"
    (663265 'move' call_tmp[663262](426597 call isTrue tmp[426596]))
    (567777 'move' tmp[567772](567775 call _cond_test call_tmp[663262]))
    if tmp[567772]
    {
      unknown tmp[567779] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663269] "expr temp" "maybe param" "maybe type" "temp"
      (663272 'move' call_tmp[663269](137384 call eltType _mt[243] a[137313]))
      unknown call_tmp[663274] "expr temp" "maybe param" "maybe type" "temp"
      (663277 'move' call_tmp[663274](137388 call isConstCopyableType call_tmp[663269]))
      (567781 'move' tmp[567779](426600 call isTrue call_tmp[663274]))
      (567786 'move' tmp[567771](567783 '_paramFoldLogical' tmp[567772] tmp[567779]))
    }
    {
      (567791 'move' tmp[567771](567788 '_paramFoldLogical' tmp[567772] 0))
    }
    unknown call_tmp[663279] "expr temp" "maybe param" "maybe type" "temp"
    (663282 'move' call_tmp[663279](137394 call _cond_test tmp[567771]))
    if call_tmp[663279]
    {
      (518994 'move' ret[518974](518993 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518972] _end_chpl__compatibleForBulkTransfer[518972]
    }
    unknown call_tmp[663286] "expr temp" "maybe param" "maybe type" "temp"
    (663289 'move' call_tmp[663286](137401 call eltType _mt[243] a[137313]))
    unknown call_tmp[663291] "expr temp" "maybe param" "maybe type" "temp"
    (663294 'move' call_tmp[663291](137405 call chpl__supportedDataTypeForBulkTransfer call_tmp[663286]))
    unknown call_tmp[663296] "expr temp" "maybe param" "maybe type" "temp"
    (663299 'move' call_tmp[663296](137406 call ! call_tmp[663291]))
    unknown call_tmp[663301] "expr temp" "maybe param" "maybe type" "temp"
    (663304 'move' call_tmp[663301](137411 call _cond_test call_tmp[663296]))
    if call_tmp[663301]
    {
      (518999 'move' ret[518974](518998 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518972] _end_chpl__compatibleForBulkTransfer[518972]
    }
    (519004 'move' ret[518974](519003 'deref' 1))
    label _end_chpl__compatibleForBulkTransfer[518972]
    (518976 return ret[518974])
  }
  function chpl__supportedDataTypeForBulkTransfer[137425](arg t[137423]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[519008] "RVV" "param" "temp"
    unknown tmp[426638] "maybe param" "temp"
    (426649 'move' tmp[426638](354412 'is_subtype' borrowed[211](?) t[137423]))
    unknown call_tmp[663306] "expr temp" "maybe param" "maybe type" "temp"
    (663309 'move' call_tmp[663306](426651 call _cond_invalid tmp[426638]))
    if call_tmp[663306]
    {
      (426654 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567798] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567799] "maybe param" "temp"
    unknown call_tmp[663311] "expr temp" "maybe param" "maybe type" "temp"
    (663314 'move' call_tmp[663311](426639 call isTrue tmp[426638]))
    (567804 'move' tmp[567799](567802 call _cond_test call_tmp[663311]))
    if tmp[567799]
    {
      (567809 'move' tmp[567798](567806 '_paramFoldLogical' tmp[567799] 1))
    }
    {
      unknown tmp[567811] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663316] "expr temp" "maybe param" "maybe type" "temp"
      (663319 'move' call_tmp[663316](354413 'is_subtype' unmanaged[220](?) t[137423]))
      (567813 'move' tmp[567811](426643 call isTrue call_tmp[663316]))
      (567818 'move' tmp[567798](567815 '_paramFoldLogical' tmp[567799] tmp[567811]))
    }
    unknown call_tmp[663321] "expr temp" "maybe param" "maybe type" "temp"
    (663324 'move' call_tmp[663321](137489 call _cond_test tmp[567798]))
    if call_tmp[663321]
    {
      (519013 'move' ret[519008](519012 'deref' 0))
      gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[519006] _end_chpl__supportedDataTypeForBulkTransfer[519006]
    }
    {
      unknown tmp[426617] "maybe param" "temp"
      (426628 'move' tmp[426617](137446 call isRecordType t[137423]))
      unknown call_tmp[663326] "expr temp" "maybe param" "maybe type" "temp"
      (663329 'move' call_tmp[663326](426630 call _cond_invalid tmp[426617]))
      if call_tmp[663326]
      {
        (426633 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[567825] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567826] "maybe param" "temp"
      unknown call_tmp[663331] "expr temp" "maybe param" "maybe type" "temp"
      (663334 'move' call_tmp[663331](426618 call isTrue tmp[426617]))
      (567831 'move' tmp[567826](567829 call _cond_test call_tmp[663331]))
      if tmp[567826]
      {
        (567836 'move' tmp[567825](567833 '_paramFoldLogical' tmp[567826] 1))
      }
      {
        unknown tmp[567838] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663336] "expr temp" "maybe param" "maybe type" "temp"
        (663339 'move' call_tmp[663336](137450 call isTupleType t[137423]))
        (567840 'move' tmp[567838](426622 call isTrue call_tmp[663336]))
        (567845 'move' tmp[567825](567842 '_paramFoldLogical' tmp[567826] tmp[567838]))
      }
      unknown call_tmp[663341] "expr temp" "maybe param" "maybe type" "temp"
      (663344 'move' call_tmp[663341](137484 call _cond_test tmp[567825]))
      if call_tmp[663341]
      {
        unknown call_tmp[663346] "expr temp" "maybe param" "maybe type" "temp"
        (663349 'move' call_tmp[663346](137456 call isPODType t[137423]))
        (519018 'move' ret[519008](519017 'deref' call_tmp[663346]))
        gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[519006] _end_chpl__supportedDataTypeForBulkTransfer[519006]
      }
      {
        unknown call_tmp[663351] "expr temp" "maybe param" "maybe type" "temp"
        (663354 'move' call_tmp[663351](137463 call isUnionType t[137423]))
        unknown call_tmp[663356] "expr temp" "maybe param" "maybe type" "temp"
        (663359 'move' call_tmp[663356](137480 call _cond_test call_tmp[663351]))
        if call_tmp[663356]
        {
          (519023 'move' ret[519008](519022 'deref' 0))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[519006] _end_chpl__supportedDataTypeForBulkTransfer[519006]
        }
        {
          unknown x[137469] "dead at end of block" "insert auto destroy" "unsafe"
          (543235 'default init var' x[137469] t[137423])
          (137472 'end of statement')
          unknown call_tmp[663361] "expr temp" "maybe param" "maybe type" "temp"
          (663364 'move' call_tmp[663361](137477 call chpl__supportedDataTypeForBulkTransfer x[137469]))
          (519028 'move' ret[519008](519027 'deref' call_tmp[663361]))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[519006] _end_chpl__supportedDataTypeForBulkTransfer[519006]
          (480706 'end of statement' x[137469])
        }
      }
    }
    label _end_chpl__supportedDataTypeForBulkTransfer[519006]
    (519010 return ret[519008])
  }
  function chpl__supportedDataTypeForBulkTransfer[137503](arg x[137500]:string[26]) param : _unknown[51]
  {
    unknown ret[519034] "RVV" "param" "temp"
    (519039 'move' ret[519034](519038 'deref' 0))
    (519036 return ret[519034])
  }
  function chpl__supportedDataTypeForBulkTransfer[137517](arg x[137514]:bytes[24]) param : _unknown[51]
  {
    unknown ret[519043] "RVV" "param" "temp"
    (519048 'move' ret[519043](519047 'deref' 0))
    (519045 return ret[519043])
  }
  function chpl__supportedDataTypeForBulkTransfer[137531](arg x[137528]:_syncvar[84947](?)) param : _unknown[51]
  {
    unknown ret[519052] "RVV" "param" "temp"
    (519057 'move' ret[519052](519056 'deref' 0))
    (519054 return ret[519052])
  }
  function chpl__supportedDataTypeForBulkTransfer[137545](arg x[137542]:_singlevar[87256](?)) param : _unknown[51]
  {
    unknown ret[519061] "RVV" "param" "temp"
    (519066 'move' ret[519061](519065 'deref' 0))
    (519063 return ret[519061])
  }
  function chpl__supportedDataTypeForBulkTransfer[137559](arg x[137556]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[519070] "RVV" "param" "temp"
    (519075 'move' ret[519070](519074 'deref' 0))
    (519072 return ret[519070])
  }
  function chpl__supportedDataTypeForBulkTransfer[137575](arg x[137572]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[519079] "RVV" "param" "temp"
    (519084 'move' ret[519079](519083 'deref' 0))
    (519081 return ret[519079])
  }
  function chpl__supportedDataTypeForBulkTransfer[137589](arg x[137586]:_distribution[118973](?)) param : _unknown[51]
  {
    unknown ret[519088] "RVV" "param" "temp"
    (519093 'move' ret[519088](519092 'deref' 1))
    (519090 return ret[519088])
  }
  function chpl__supportedDataTypeForBulkTransfer[137603](arg x[137600]:locale[28]) param : _unknown[51]
  {
    unknown ret[519097] "RVV" "param" "temp"
    (519102 'move' ret[519097](519101 'deref' 1))
    (519099 return ret[519097])
  }
  function chpl__supportedDataTypeForBulkTransfer[137617](arg x[137614]:chpl_anycomplex[184](?)) param : _unknown[51]
  {
    unknown ret[519106] "RVV" "param" "temp"
    (519111 'move' ret[519106](519110 'deref' 1))
    (519108 return ret[519106])
  }
  function chpl__supportedDataTypeForBulkTransfer[137632](arg x[137629]:object[22]) param : _unknown[51]
  {
    unknown ret[519115] "RVV" "param" "temp"
    (519120 'move' ret[519115](519119 'deref' 0))
    (519117 return ret[519115])
  }
  function chpl__supportedDataTypeForBulkTransfer[137644](arg x[137642]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[519124] "RVV" "param" "temp"
    (519129 'move' ret[519124](519128 'deref' 1))
    (519126 return ret[519124])
  }
  function checkArrayShapesUponAssignment[137660](arg a[137657]:_array[133594](?), arg b[137665]:_array[133594](?)) : _unknown[51] "no doc" "no return value for void"
  {
    unknown tmp[426659] "maybe param" "temp"
    (426670 'move' tmp[426659](137671 call isRectangularArr a[137657]))
    unknown call_tmp[663366] "expr temp" "maybe param" "maybe type" "temp"
    (663369 'move' call_tmp[663366](426672 call _cond_invalid tmp[426659]))
    if call_tmp[663366]
    {
      (426675 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567852] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567853] "maybe param" "temp"
    unknown call_tmp[663371] "expr temp" "maybe param" "maybe type" "temp"
    (663374 'move' call_tmp[663371](426660 call isTrue tmp[426659]))
    (567858 'move' tmp[567853](567856 call _cond_test call_tmp[663371]))
    if tmp[567853]
    {
      unknown tmp[567860] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663376] "expr temp" "maybe param" "maybe type" "temp"
      (663379 'move' call_tmp[663376](137675 call isRectangularArr b[137665]))
      (567862 'move' tmp[567860](426663 call isTrue call_tmp[663376]))
      (567867 'move' tmp[567852](567864 '_paramFoldLogical' tmp[567853] tmp[567860]))
    }
    {
      (567872 'move' tmp[567852](567869 '_paramFoldLogical' tmp[567853] 0))
    }
    unknown call_tmp[663381] "expr temp" "maybe param" "maybe type" "temp"
    (663384 'move' call_tmp[663381](137851 call _cond_test tmp[567852]))
    if call_tmp[663381]
    {
      unknown call_tmp[663388] "expr temp" "maybe param" "maybe type" "temp"
      (663391 'move' call_tmp[663388](137679 call _value _mt[243] a[137657]))
      unknown call_tmp[663395] "expr temp" "maybe param" "maybe type" "temp"
      (663398 'move' call_tmp[663395](137682 call dom _mt[243] call_tmp[663388]))
      unknown call_tmp[663402] "maybe param" "maybe type" "temp"
      (663405 'move' call_tmp[663402](137689 call(137685 call (partial) dsiDims _mt[243] call_tmp[663395])))
      const aDims[137690] "dead at end of block" "const" "insert auto destroy"
      (543237 'init var' aDims[137690] call_tmp[663402])
      unknown call_tmp[663409] "expr temp" "maybe param" "maybe type" "temp"
      (663412 'move' call_tmp[663409](137694 call _value _mt[243] b[137665]))
      unknown call_tmp[663416] "expr temp" "maybe param" "maybe type" "temp"
      (663419 'move' call_tmp[663416](137697 call dom _mt[243] call_tmp[663409]))
      unknown call_tmp[663423] "maybe param" "maybe type" "temp"
      (663426 'move' call_tmp[663423](137704 call(137700 call (partial) dsiDims _mt[243] call_tmp[663416])))
      const bDims[137705] "dead at end of block" "const" "insert auto destroy"
      (543239 'init var' bDims[137705] call_tmp[663423])
      (137708 'end of statement')
      unknown call_tmp[663430] "expr temp" "maybe param" "maybe type" "temp"
      (663433 'move' call_tmp[663430](137712 call size _mt[243] aDims[137690]))
      unknown call_tmp[663437] "expr temp" "maybe param" "maybe type" "temp"
      (663440 'move' call_tmp[663437](137716 call size _mt[243] bDims[137705]))
      unknown call_tmp[663442] "expr temp" "maybe param" "maybe type" "temp"
      (663445 'move' call_tmp[663442](137719 call == call_tmp[663430] call_tmp[663437]))
      (137722 call compilerAssert call_tmp[663442])
      (480720 'end of statement' aDims[137690] bDims[137705])
      {
        unknown i[137810] "dead at end of block" "insert auto destroy"
        (543241 'init var' i[137810] 0)
        (480723 'end of statement')
        unknown tmp[137811] "maybe param" "temp"
        unknown call_tmp[663449] "expr temp" "maybe param" "maybe type" "temp"
        (663452 'move' call_tmp[663449](137726 call size _mt[243] aDims[137690]))
        unknown call_tmp[663454] "expr temp" "maybe param" "maybe type" "temp"
        (663457 'move' call_tmp[663454](137730 call - call_tmp[663449] 1))
        (137823 'move' tmp[137811](137821 call chpl_compute_low_param_loop_bound 0 call_tmp[663454]))
        unknown tmp[137812] "maybe param" "temp"
        unknown call_tmp[663461] "expr temp" "maybe param" "maybe type" "temp"
        (663464 'move' call_tmp[663461](137830 call size _mt[243] aDims[137690]))
        unknown call_tmp[663466] "expr temp" "maybe param" "maybe type" "temp"
        (663469 'move' call_tmp[663466](137828 call - call_tmp[663461] 1))
        (137836 'move' tmp[137812](137834 call chpl_compute_high_param_loop_bound 0 call_tmp[663466]))
        unknown tmp[137813] "maybe param" "temp"
        (137839 'move' tmp[137813] 1)
        ParamForLoop[137841]
        { i[137810] tmp[137811] tmp[137812] tmp[137813]
          {
            unknown call_tmp[663471] "expr temp" "maybe param" "maybe type" "temp"
            (663474 'move' call_tmp[663471](137737 call aDims[137690] i[137810]))
            unknown call_tmp[663478] "expr temp" "maybe param" "maybe type" "temp"
            (663481 'move' call_tmp[663478](137738 call size _mt[243] call_tmp[663471]))
            unknown call_tmp[663483] "expr temp" "maybe param" "maybe type" "temp"
            (663486 'move' call_tmp[663483](137744 call bDims[137705] i[137810]))
            unknown call_tmp[663490] "expr temp" "maybe param" "maybe type" "temp"
            (663493 'move' call_tmp[663490](137745 call size _mt[243] call_tmp[663483]))
            unknown call_tmp[663495] "expr temp" "maybe param" "maybe type" "temp"
            (663498 'move' call_tmp[663495](137748 call != call_tmp[663478] call_tmp[663490]))
            unknown call_tmp[663500] "expr temp" "maybe param" "maybe type" "temp"
            (663503 'move' call_tmp[663500](137804 call _cond_test call_tmp[663495]))
            if call_tmp[663500]
            {
              unknown call_tmp[663505] "expr temp" "maybe param" "maybe type" "temp"
              (663508 'move' call_tmp[663505](137774 call aDims[137690] i[137810]))
              unknown call_tmp[663512] "expr temp" "maybe param" "maybe type" "temp"
              (663515 'move' call_tmp[663512](137775 call size _mt[243] call_tmp[663505]))
              unknown call_tmp[663517] "expr temp" "maybe param" "maybe type" "temp"
              (663520 'move' call_tmp[663517](137798 call bDims[137705] i[137810]))
              unknown call_tmp[663524] "expr temp" "maybe param" "maybe type" "temp"
              (663527 'move' call_tmp[663524](137799 call size _mt[243] call_tmp[663517]))
              (137802 call halt "assigning between arrays of different shapes in dimension " i[137810] ": " call_tmp[663512] " vs. " call_tmp[663524])
              (480724 'end of statement' i[137810] aDims[137690] i[137810] bDims[137705] i[137810])
            }
          }
        }
        label _unused_continueLabel[137815]
        label _breakLabel[137814]
      }
    }
    {
    }
    (519131 return _void[55])
  }
  function =[137866](ref arg a[137863]:_array[133594](?), arg b[137871]:_array[133594](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[663531] "expr temp" "maybe param" "maybe type" "temp"
    (663534 'move' call_tmp[663531](137875 call rank _mt[243] a[137863]))
    unknown call_tmp[663538] "expr temp" "maybe param" "maybe type" "temp"
    (663541 'move' call_tmp[663538](137879 call rank _mt[243] b[137871]))
    unknown call_tmp[663543] "expr temp" "maybe param" "maybe type" "temp"
    (663546 'move' call_tmp[663543](137882 call != call_tmp[663531] call_tmp[663538]))
    unknown call_tmp[663548] "expr temp" "maybe param" "maybe type" "temp"
    (663551 'move' call_tmp[663548](137905 call _cond_test call_tmp[663543]))
    if call_tmp[663548]
    {
      (137903 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[663555] "expr temp" "maybe param" "maybe type" "temp"
    (663558 'move' call_tmp[663555](137912 call _value _mt[243] b[137871]))
    unknown call_tmp[663560] "expr temp" "maybe param" "maybe type" "temp"
    (663563 'move' call_tmp[663560](137916 call == call_tmp[663555] nil[44]))
    unknown call_tmp[663565] "expr temp" "maybe param" "maybe type" "temp"
    (663568 'move' call_tmp[663565](137920 call _cond_test call_tmp[663560]))
    if call_tmp[663565]
    {
      gotoReturn _end_=[519133] _end_=[519133]
    }
    unknown call_tmp[663572] "expr temp" "maybe param" "maybe type" "temp"
    (663575 'move' call_tmp[663572](137926 call _value _mt[243] a[137863]))
    unknown call_tmp[663579] "expr temp" "maybe param" "maybe type" "temp"
    (663582 'move' call_tmp[663579](137930 call _value _mt[243] b[137871]))
    unknown call_tmp[663584] "expr temp" "maybe param" "maybe type" "temp"
    (663587 'move' call_tmp[663584](137933 call == call_tmp[663572] call_tmp[663579]))
    unknown call_tmp[663589] "expr temp" "maybe param" "maybe type" "temp"
    (663592 'move' call_tmp[663589](137938 call _cond_test call_tmp[663584]))
    if call_tmp[663589]
    {
      gotoReturn _end_=[519133] _end_=[519133]
    }
    unknown tmp[426680] "maybe param" "temp"
    unknown call_tmp[663596] "expr temp" "maybe param" "maybe type" "temp"
    (663599 'move' call_tmp[663596](137943 call size _mt[243] a[137863]))
    (426691 'move' tmp[426680](137947 call == call_tmp[663596] 0))
    unknown call_tmp[663601] "expr temp" "maybe param" "maybe type" "temp"
    (663604 'move' call_tmp[663601](426693 call _cond_invalid tmp[426680]))
    if call_tmp[663601]
    {
      (426696 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567879] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567880] "maybe param" "temp"
    unknown call_tmp[663606] "expr temp" "maybe param" "maybe type" "temp"
    (663609 'move' call_tmp[663606](426681 call isTrue tmp[426680]))
    (567885 'move' tmp[567880](567883 call _cond_test call_tmp[663606]))
    if tmp[567880]
    {
      unknown tmp[567887] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663613] "expr temp" "maybe param" "maybe type" "temp"
      (663616 'move' call_tmp[663613](137950 call size _mt[243] b[137871]))
      unknown call_tmp[663618] "expr temp" "maybe param" "maybe type" "temp"
      (663621 'move' call_tmp[663618](137954 call == call_tmp[663613] 0))
      (567889 'move' tmp[567887](426684 call isTrue call_tmp[663618]))
      (567894 'move' tmp[567879](567891 '_paramFoldLogical' tmp[567880] tmp[567887]))
    }
    {
      (567899 'move' tmp[567879](567896 '_paramFoldLogical' tmp[567880] 0))
    }
    unknown call_tmp[663623] "expr temp" "maybe param" "maybe type" "temp"
    (663626 'move' call_tmp[663623](137960 call _cond_test tmp[567879]))
    if call_tmp[663623]
    {
      gotoReturn _end_=[519133] _end_=[519133]
    }
    unknown call_tmp[663628] "expr temp" "maybe param" "maybe type" "temp"
    (663631 'move' call_tmp[663628](137972 call _cond_test 1))
    if call_tmp[663628]
    {
      (137970 call checkArrayShapesUponAssignment a[137863] b[137871])
    }
    (137988 call chpl__uncheckedArrayTransfer a[137863] b[137871](kind = assign[137997]))
    label _end_=[519133]
    (519135 return _void[55])
  }
  type _tElt[137999] def move[137993]:_tElt[137999] def initCopy[137995]:_tElt[137999] def assign[137997]:_tElt[137999]
  function needsInitWorkaround[138006](arg t[138004]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[519145] "RVV" "param" "temp"
    unknown tmp[426701] "maybe param" "temp"
    unknown tmp[426722] "maybe param" "temp"
    (426733 'move' tmp[426722](354417 'is_subtype' _array[133594](?) t[138004]))
    unknown call_tmp[663633] "expr temp" "maybe param" "maybe type" "temp"
    (663636 'move' call_tmp[663633](426735 call _cond_invalid tmp[426722]))
    if call_tmp[663633]
    {
      (426738 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567906] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567907] "maybe param" "temp"
    unknown call_tmp[663638] "expr temp" "maybe param" "maybe type" "temp"
    (663641 'move' call_tmp[663638](426723 call isTrue tmp[426722]))
    (567912 'move' tmp[567907](567910 call _cond_test call_tmp[663638]))
    if tmp[567907]
    {
      (567917 'move' tmp[567906](567914 '_paramFoldLogical' tmp[567907] 1))
    }
    {
      unknown tmp[567919] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663643] "expr temp" "maybe param" "maybe type" "temp"
      (663646 'move' call_tmp[663643](354418 'is_subtype' _domain[125908](?) t[138004]))
      (567921 'move' tmp[567919](426727 call isTrue call_tmp[663643]))
      (567926 'move' tmp[567906](567923 '_paramFoldLogical' tmp[567907] tmp[567919]))
    }
    (426712 'move' tmp[426701] tmp[567906])
    unknown call_tmp[663648] "expr temp" "maybe param" "maybe type" "temp"
    (663651 'move' call_tmp[663648](426714 call _cond_invalid tmp[426701]))
    if call_tmp[663648]
    {
      (426717 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567933] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567934] "maybe param" "temp"
    unknown call_tmp[663653] "expr temp" "maybe param" "maybe type" "temp"
    (663656 'move' call_tmp[663653](426702 call isTrue tmp[426701]))
    (567939 'move' tmp[567934](567937 call _cond_test call_tmp[663653]))
    if tmp[567934]
    {
      (567944 'move' tmp[567933](567941 '_paramFoldLogical' tmp[567934] 1))
    }
    {
      unknown tmp[567946] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663658] "expr temp" "maybe param" "maybe type" "temp"
      (663661 'move' call_tmp[663658](354419 'is_subtype' _distribution[118973](?) t[138004]))
      (567948 'move' tmp[567946](426706 call isTrue call_tmp[663658]))
      (567953 'move' tmp[567933](567950 '_paramFoldLogical' tmp[567934] tmp[567946]))
    }
    (519150 'move' ret[519145](519149 'deref' tmp[567933]))
    (519147 return ret[519145])
  }
  function initCopyAfterTransfer[138040](ref arg a[138037]:_array[133594](?)) : _unknown[51] "private" "ignore transfer errors" "no return value for void"
  {
    unknown call_tmp[663665] "expr temp" "maybe param" "maybe type" "temp"
    (663668 'move' call_tmp[663665](138044 call eltType _mt[243] a[138037]))
    unknown call_tmp[663670] "expr temp" "maybe param" "maybe type" "temp"
    (663673 'move' call_tmp[663670](138048 call needsInitWorkaround call_tmp[663665]))
    unknown call_tmp[663675] "expr temp" "maybe param" "maybe type" "temp"
    (663678 'move' call_tmp[663675](138108 call _cond_test call_tmp[663670]))
    if call_tmp[663675]
    {
      unknown call_tmp[663682] "expr temp" "maybe param" "maybe type" "temp"
      (663685 'move' call_tmp[663682](415766 call _dom _mt[243] a[138037]))
      unknown call_tmp[663687] "maybe param" "maybe type" "temp"
      (663690 'move' call_tmp[663687](415762 call chpl__staticAutoLocalCheck a[138037] call_tmp[663682]))
      unknown chpl__staticAutoLocalCheckSym[415761] "dead at end of block" "param"
      (543243 'init var' chpl__staticAutoLocalCheckSym[415761] call_tmp[663687])
      (480740 'end of statement')
      if chpl__staticAutoLocalCheckSym[415761]
      {
        unknown call_tmp[663694] "expr temp" "maybe param" "maybe type" "temp"
        (663697 'move' call_tmp[663694](138051 call _dom _mt[243] a[138037]))
        Forall {
          induction variables:
            
            unknown ai[138079] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663694]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138058] "dead at end of block" "ref var"
            unknown call_tmp[663699] "expr temp" "maybe param" "maybe type" "temp"
            (663702 'move' call_tmp[663699](415772 'may be local access' a[138037] ai[138079] chpl__staticAutoLocalCheckSym[415761] 1))
            (543246 'move' aa[138058](543245 'addr of' call_tmp[663699]))
            (138061 'end of statement')
            unknown call_tmp[663706] "maybe param" "maybe type" "temp"
            (663709 'move' call_tmp[663706](138064 call eltType _mt[243] a[138037]))
            unknown copy[138068] "dead at end of block" "no auto destroy"
            (543248 'init var' copy[138068] aa[138058] call_tmp[663706])
            (138071 'end of statement' ai[138079] aa[138058])
            (138076 '=' aa[138058] copy[138068])
            (480743 'end of statement' aa[138058] copy[138068])
          }
        }
      }
      {
        unknown call_tmp[663713] "expr temp" "maybe param" "maybe type" "temp"
        (663716 'move' call_tmp[663713](415758 call _dom _mt[243] a[138037]))
        Forall {
          induction variables:
            
            unknown ai[415755] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663713]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415737] "dead at end of block" "ref var"
            unknown call_tmp[663718] "expr temp" "maybe param" "maybe type" "temp"
            (663721 'move' call_tmp[663718](415739 call a[138037] ai[415755]))
            (543251 'move' aa[415737](543250 'addr of' call_tmp[663718]))
            (415742 'end of statement')
            unknown call_tmp[663725] "maybe param" "maybe type" "temp"
            (663728 'move' call_tmp[663725](415746 call eltType _mt[243] a[138037]))
            unknown copy[415743] "dead at end of block" "no auto destroy"
            (543253 'init var' copy[415743] aa[415737] call_tmp[663725])
            (415750 'end of statement' ai[415755] aa[415737])
            (415751 '=' aa[415737] copy[415743])
            (480748 'end of statement' aa[415737] copy[415743])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138103] "index var" "insert auto destroy"
        iterated expressions:
          a[138037]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663732] "maybe param" "maybe type" "temp"
          (663735 'move' call_tmp[663732](138087 call eltType _mt[243] a[138037]))
          unknown copy[138091] "dead at end of block" "no auto destroy"
          (543255 'init var' copy[138091] aa[138103] call_tmp[663732])
          (138094 'end of statement' aa[138103])
          (138100 '=' aa[138103] copy[138091])
          (480752 'end of statement' aa[138103] copy[138091])
        }
      }
    }
    (519152 return _void[55])
  }
  function fixRuntimeType[138119](arg eltType[138117]:_any[178](?), ref arg elt[138121]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown runtimeTypesDiffer[138124] "dead at end of block" "insert auto destroy"
    (543257 'init var' runtimeTypesDiffer[138124] 0)
    (138127 'end of statement')
    unknown tmp[426743] "maybe param" "temp"
    (426754 'move' tmp[426743](354420 'is_subtype' _array[133594](?) eltType[138117]))
    unknown call_tmp[663737] "expr temp" "maybe param" "maybe type" "temp"
    (663740 'move' call_tmp[663737](426756 call _cond_invalid tmp[426743]))
    if call_tmp[663737]
    {
      (426759 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567960] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567961] "maybe param" "temp"
    unknown call_tmp[663742] "expr temp" "maybe param" "maybe type" "temp"
    (663745 'move' call_tmp[663742](426744 call isTrue tmp[426743]))
    (567966 'move' tmp[567961](567964 call _cond_test call_tmp[663742]))
    if tmp[567961]
    {
      (567971 'move' tmp[567960](567968 '_paramFoldLogical' tmp[567961] 1))
    }
    {
      unknown tmp[567973] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663747] "expr temp" "maybe param" "maybe type" "temp"
      (663750 'move' call_tmp[663747](354421 'is_subtype' _domain[125908](?) eltType[138117]))
      (567975 'move' tmp[567973](426748 call isTrue call_tmp[663747]))
      (567980 'move' tmp[567960](567977 '_paramFoldLogical' tmp[567961] tmp[567973]))
    }
    unknown call_tmp[663752] "expr temp" "maybe param" "maybe type" "temp"
    (663755 'move' call_tmp[663752](138257 call _cond_test tmp[567960]))
    if call_tmp[663752]
    {
      unknown call_tmp[663757] "expr temp" "maybe param" "maybe type" "temp"
      (663760 'move' call_tmp[663757](354422 'is_subtype' _array[133594](?) eltType[138117]))
      unknown call_tmp[663762] "expr temp" "maybe param" "maybe type" "temp"
      (663765 'move' call_tmp[663762](138183 call _cond_test call_tmp[663757]))
      if call_tmp[663762]
      {
        const lhsDomain[138150] "dead at end of block" "const" "ref var"
        unknown call_tmp[663767] "expr temp" "maybe param" "maybe type" "temp"
        (663770 'move' call_tmp[663767](138149 call chpl__domainFromArrayRuntimeType eltType[138117]))
        (543260 'move' lhsDomain[138150](543259 'addr of' call_tmp[663767]))
        (138153 'end of statement')
        const rhsDomain[138159] "dead at end of block" "const" "ref var"
        unknown call_tmp[663774] "expr temp" "maybe param" "maybe type" "temp"
        (663777 'move' call_tmp[663774](138156 call _dom _mt[243] elt[138121]))
        (543263 'move' rhsDomain[138159](543262 'addr of' call_tmp[663774]))
        (138162 'end of statement')
        unknown call_tmp[663781] "expr temp" "maybe param" "maybe type" "temp"
        (663784 'move' call_tmp[663781](138164 call _instance _mt[243] lhsDomain[138150]))
        unknown call_tmp[663788] "expr temp" "maybe param" "maybe type" "temp"
        (663791 'move' call_tmp[663788](138168 call _instance _mt[243] rhsDomain[138159]))
        unknown call_tmp[663793] "expr temp" "maybe param" "maybe type" "temp"
        (663796 'move' call_tmp[663793](138171 call != call_tmp[663781] call_tmp[663788]))
        unknown call_tmp[663798] "expr temp" "maybe param" "maybe type" "temp"
        (663801 'move' call_tmp[663798](138179 call _cond_test call_tmp[663793]))
        if call_tmp[663798]
        {
          (138175 call = runtimeTypesDiffer[138124] 1)
          (480756 'end of statement' runtimeTypesDiffer[138124])
        }
      }
      unknown call_tmp[663803] "expr temp" "maybe param" "maybe type" "temp"
      (663806 'move' call_tmp[663803](354423 'is_subtype' _domain[125908](?) eltType[138117]))
      unknown call_tmp[663808] "expr temp" "maybe param" "maybe type" "temp"
      (663811 'move' call_tmp[663808](138230 call _cond_test call_tmp[663803]))
      if call_tmp[663808]
      {
        const lhsDist[138197] "dead at end of block" "const" "ref var"
        unknown call_tmp[663813] "expr temp" "maybe param" "maybe type" "temp"
        (663816 'move' call_tmp[663813](138196 call chpl__distributionFromDomainRuntimeType eltType[138117]))
        (543266 'move' lhsDist[138197](543265 'addr of' call_tmp[663813]))
        (138200 'end of statement')
        const rhsDist[138206] "dead at end of block" "const" "ref var"
        unknown call_tmp[663820] "expr temp" "maybe param" "maybe type" "temp"
        (663823 'move' call_tmp[663820](138203 call dist _mt[243] elt[138121]))
        (543269 'move' rhsDist[138206](543268 'addr of' call_tmp[663820]))
        (138209 'end of statement')
        unknown call_tmp[663827] "expr temp" "maybe param" "maybe type" "temp"
        (663830 'move' call_tmp[663827](138211 call _instance _mt[243] lhsDist[138197]))
        unknown call_tmp[663834] "expr temp" "maybe param" "maybe type" "temp"
        (663837 'move' call_tmp[663834](138215 call _instance _mt[243] rhsDist[138206]))
        unknown call_tmp[663839] "expr temp" "maybe param" "maybe type" "temp"
        (663842 'move' call_tmp[663839](138218 call != call_tmp[663827] call_tmp[663834]))
        unknown call_tmp[663844] "expr temp" "maybe param" "maybe type" "temp"
        (663847 'move' call_tmp[663844](138226 call _cond_test call_tmp[663839]))
        if call_tmp[663844]
        {
          (138222 call = runtimeTypesDiffer[138124] 1)
          (480758 'end of statement' runtimeTypesDiffer[138124])
        }
      }
      unknown call_tmp[663849] "expr temp" "maybe param" "maybe type" "temp"
      (663852 'move' call_tmp[663849](138253 call _cond_test runtimeTypesDiffer[138124]))
      if call_tmp[663849]
      {
        unknown copy[138237] "dead at end of block" "no auto destroy"
        (543271 'init var' copy[138237] elt[138121] eltType[138117])
        (138240 'end of statement')
        (138245 call chpl__autoDestroy elt[138121])
        (480760 'end of statement')
        (138251 '=' elt[138121] copy[138237])
        (480761 'end of statement' copy[138237])
      }
    }
    (519154 return _void[55])
  }
  function fixEltRuntimeTypesAfterTransfer[138271](ref arg a[138268]:_array[133594](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[663856] "expr temp" "maybe param" "maybe type" "temp"
    (663859 'move' call_tmp[663856](138275 call eltType _mt[243] a[138268]))
    unknown call_tmp[663861] "expr temp" "maybe param" "maybe type" "temp"
    (663864 'move' call_tmp[663861](138279 call needsInitWorkaround call_tmp[663856]))
    unknown call_tmp[663866] "expr temp" "maybe param" "maybe type" "temp"
    (663869 'move' call_tmp[663866](138327 call _cond_test call_tmp[663861]))
    if call_tmp[663866]
    {
      unknown call_tmp[663873] "expr temp" "maybe param" "maybe type" "temp"
      (663876 'move' call_tmp[663873](415805 call _dom _mt[243] a[138268]))
      unknown call_tmp[663878] "maybe param" "maybe type" "temp"
      (663881 'move' call_tmp[663878](415801 call chpl__staticAutoLocalCheck a[138268] call_tmp[663873]))
      unknown chpl__staticAutoLocalCheckSym[415800] "dead at end of block" "param"
      (543273 'init var' chpl__staticAutoLocalCheckSym[415800] call_tmp[663878])
      (480763 'end of statement')
      if chpl__staticAutoLocalCheckSym[415800]
      {
        unknown call_tmp[663885] "expr temp" "maybe param" "maybe type" "temp"
        (663888 'move' call_tmp[663885](138282 call _dom _mt[243] a[138268]))
        Forall {
          induction variables:
            
            unknown ai[138304] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663885]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138289] "dead at end of block" "ref var"
            unknown call_tmp[663890] "expr temp" "maybe param" "maybe type" "temp"
            (663893 'move' call_tmp[663890](415811 'may be local access' a[138268] ai[138304] chpl__staticAutoLocalCheckSym[415800] 1))
            (543276 'move' aa[138289](543275 'addr of' call_tmp[663890]))
            (138292 'end of statement' ai[138304])
            unknown call_tmp[663897] "expr temp" "maybe param" "maybe type" "temp"
            (663900 'move' call_tmp[663897](138296 call eltType _mt[243] a[138268]))
            (138301 call fixRuntimeType call_tmp[663897] aa[138289])
            (480765 'end of statement' aa[138289])
          }
        }
      }
      {
        unknown call_tmp[663904] "expr temp" "maybe param" "maybe type" "temp"
        (663907 'move' call_tmp[663904](415797 call _dom _mt[243] a[138268]))
        Forall {
          induction variables:
            
            unknown ai[415794] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663904]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415780] "dead at end of block" "ref var"
            unknown call_tmp[663909] "expr temp" "maybe param" "maybe type" "temp"
            (663912 'move' call_tmp[663909](415782 call a[138268] ai[415794]))
            (543279 'move' aa[415780](543278 'addr of' call_tmp[663909]))
            (415785 'end of statement' ai[415794])
            unknown call_tmp[663916] "expr temp" "maybe param" "maybe type" "temp"
            (663919 'move' call_tmp[663916](415789 call eltType _mt[243] a[138268]))
            (415787 call fixRuntimeType call_tmp[663916] aa[415780])
            (480768 'end of statement' aa[415780])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138322] "index var" "insert auto destroy"
        iterated expressions:
          a[138268]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663923] "expr temp" "maybe param" "maybe type" "temp"
          (663926 'move' call_tmp[663923](138313 call eltType _mt[243] a[138268]))
          (138318 call fixRuntimeType call_tmp[663923] aa[138322])
          (480770 'end of statement' aa[138322])
        }
      }
    }
    (519156 return _void[55])
  }
  function chpl__uncheckedArrayTransfer[138342](ref arg a[138339]:_array[133594](?), arg b[138347]:_array[133594](?), param arg kind[138350]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown done[138353] "dead at end of block" "insert auto destroy"
    (543281 'init var' done[138353] 0)
    (138356 'end of statement')
    unknown call_tmp[663928] "expr temp" "maybe param" "maybe type" "temp"
    (663931 'move' call_tmp[663928](138362 call chpl__serializeAssignment a[138339] b[138347]))
    unknown call_tmp[663933] "expr temp" "maybe param" "maybe type" "temp"
    (663936 'move' call_tmp[663933](138363 call ! call_tmp[663928]))
    unknown call_tmp[663938] "expr temp" "maybe param" "maybe type" "temp"
    (663941 'move' call_tmp[663938](138479 call _cond_test call_tmp[663933]))
    if call_tmp[663938]
    {
      unknown call_tmp[663943] "expr temp" "maybe param" "maybe type" "temp"
      (663946 'move' call_tmp[663943](138370 call chpl__compatibleForBulkTransfer a[138339] b[138347] kind[138350]))
      unknown call_tmp[663948] "expr temp" "maybe param" "maybe type" "temp"
      (663951 'move' call_tmp[663948](138401 call _cond_test call_tmp[663943]))
      if call_tmp[663948]
      {
        unknown call_tmp[663953] "expr temp" "maybe param" "maybe type" "temp"
        (663956 'move' call_tmp[663953](138376 call chpl__bulkTransferArray a[138339] b[138347]))
        (138377 call = done[138353] call_tmp[663953])
        (480772 'end of statement' done[138353])
      }
      {
        unknown call_tmp[663958] "expr temp" "maybe param" "maybe type" "temp"
        (663961 'move' call_tmp[663958](138386 call chpl__compatibleForWidePtrBulkTransfer a[138339] b[138347] kind[138350]))
        unknown call_tmp[663963] "expr temp" "maybe param" "maybe type" "temp"
        (663966 'move' call_tmp[663963](138397 call _cond_test call_tmp[663958]))
        if call_tmp[663963]
        {
          unknown call_tmp[663968] "expr temp" "maybe param" "maybe type" "temp"
          (663971 'move' call_tmp[663968](138392 call chpl__bulkTransferPtrArray a[138339] b[138347]))
          (138393 call = done[138353] call_tmp[663968])
          (480774 'end of statement' done[138353])
        }
      }
      unknown call_tmp[663973] "expr temp" "maybe param" "maybe type" "temp"
      (663976 'move' call_tmp[663973](138475 call _cond_test done[138353]))
      if call_tmp[663973]
      {
        unknown tmp[426806] "maybe param" "temp"
        (426817 'move' tmp[426806](138413 call == kind[138350] initCopy[137995]))
        unknown call_tmp[663978] "expr temp" "maybe param" "maybe type" "temp"
        (663981 'move' call_tmp[663978](426819 call _cond_invalid tmp[426806]))
        if call_tmp[663978]
        {
          (426822 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567987] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567988] "maybe param" "temp"
        unknown call_tmp[663983] "expr temp" "maybe param" "maybe type" "temp"
        (663986 'move' call_tmp[663983](426807 call isTrue tmp[426806]))
        (567993 'move' tmp[567988](567991 call _cond_test call_tmp[663983]))
        if tmp[567988]
        {
          unknown tmp[567995] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[663990] "expr temp" "maybe param" "maybe type" "temp"
          (663993 'move' call_tmp[663990](138417 call eltType _mt[243] a[138339]))
          unknown call_tmp[663995] "expr temp" "maybe param" "maybe type" "temp"
          (663998 'move' call_tmp[663995](138421 call isPODType call_tmp[663990]))
          unknown call_tmp[664000] "expr temp" "maybe param" "maybe type" "temp"
          (664003 'move' call_tmp[664000](138422 call ! call_tmp[663995]))
          (567997 'move' tmp[567995](426810 call isTrue call_tmp[664000]))
          (568002 'move' tmp[567987](567999 '_paramFoldLogical' tmp[567988] tmp[567995]))
        }
        {
          (568007 'move' tmp[567987](568004 '_paramFoldLogical' tmp[567988] 0))
        }
        unknown call_tmp[664005] "expr temp" "maybe param" "maybe type" "temp"
        (664008 'move' call_tmp[664005](138469 call _cond_test tmp[567987]))
        if call_tmp[664005]
        {
          (138429 call initCopyAfterTransfer a[138339])
        }
        {
          unknown tmp[426764] "maybe param" "temp"
          (426775 'move' tmp[426764](138437 call == kind[138350] move[137993]))
          unknown call_tmp[664010] "expr temp" "maybe param" "maybe type" "temp"
          (664013 'move' call_tmp[664010](426777 call _cond_invalid tmp[426764]))
          if call_tmp[664010]
          {
            (426780 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[568041] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568042] "maybe param" "temp"
          unknown call_tmp[664015] "expr temp" "maybe param" "maybe type" "temp"
          (664018 'move' call_tmp[664015](426765 call isTrue tmp[426764]))
          (568047 'move' tmp[568042](568045 call _cond_test call_tmp[664015]))
          if tmp[568042]
          {
            unknown tmp[426785] "maybe param" "temp"
            unknown call_tmp[664022] "expr temp" "maybe param" "maybe type" "temp"
            (664025 'move' call_tmp[664022](138441 call eltType _mt[243] a[138339]))
            (426796 'move' tmp[426785](354424 'is_subtype' _array[133594](?) call_tmp[664022]))
            unknown call_tmp[664027] "expr temp" "maybe param" "maybe type" "temp"
            (664030 'move' call_tmp[664027](426798 call _cond_invalid tmp[426785]))
            if call_tmp[664027]
            {
              (426801 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[568014] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[568015] "maybe param" "temp"
            unknown call_tmp[664032] "expr temp" "maybe param" "maybe type" "temp"
            (664035 'move' call_tmp[664032](426786 call isTrue tmp[426785]))
            (568020 'move' tmp[568015](568018 call _cond_test call_tmp[664032]))
            if tmp[568015]
            {
              (568025 'move' tmp[568014](568022 '_paramFoldLogical' tmp[568015] 1))
            }
            {
              unknown tmp[568027] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[664039] "expr temp" "maybe param" "maybe type" "temp"
              (664042 'move' call_tmp[664039](138449 call eltType _mt[243] a[138339]))
              unknown call_tmp[664044] "expr temp" "maybe param" "maybe type" "temp"
              (664047 'move' call_tmp[664044](354425 'is_subtype' _domain[125908](?) call_tmp[664039]))
              (568029 'move' tmp[568027](426790 call isTrue call_tmp[664044]))
              (568034 'move' tmp[568014](568031 '_paramFoldLogical' tmp[568015] tmp[568027]))
            }
            unknown tmp[568049] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (568051 'move' tmp[568049](426768 call isTrue tmp[568014]))
            (568056 'move' tmp[568041](568053 '_paramFoldLogical' tmp[568042] tmp[568049]))
          }
          {
            (568061 'move' tmp[568041](568058 '_paramFoldLogical' tmp[568042] 0))
          }
          unknown call_tmp[664049] "expr temp" "maybe param" "maybe type" "temp"
          (664052 'move' call_tmp[664049](138465 call _cond_test tmp[568041]))
          if call_tmp[664049]
          {
            (138462 call fixEltRuntimeTypesAfterTransfer a[138339])
          }
        }
      }
    }
    unknown call_tmp[664054] "expr temp" "maybe param" "maybe type" "temp"
    (664057 'move' call_tmp[664054](138484 call ! done[138353]))
    unknown call_tmp[664059] "expr temp" "maybe param" "maybe type" "temp"
    (664062 'move' call_tmp[664059](138494 call _cond_test call_tmp[664054]))
    if call_tmp[664059]
    {
      (138491 call chpl__transferArray a[138339] b[138347] kind[138350])
    }
    (519158 return _void[55])
  }
  function chpl__compatibleForWidePtrBulkTransfer[138504](arg a[138502]:_any[178](?), arg b[138506]:_any[178](?), param arg kind[138512] :
  assign[137997] =
  assign[137997]) param : _unknown[51]
  {
    unknown ret[519162] "RVV" "param" "temp"
    unknown call_tmp[664064] "expr temp" "maybe param" "maybe type" "temp"
    (664067 'move' call_tmp[664064](138516 call ! useBulkPtrTransfer[113738]))
    unknown call_tmp[664069] "expr temp" "maybe param" "maybe type" "temp"
    (664072 'move' call_tmp[664069](138521 call _cond_test call_tmp[664064]))
    if call_tmp[664069]
    {
      (519167 'move' ret[519162](519166 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519160] _end_chpl__compatibleForWidePtrBulkTransfer[519160]
    }
    unknown tmp[426827] "maybe param" "temp"
    unknown call_tmp[664076] "expr temp" "maybe param" "maybe type" "temp"
    (664079 'move' call_tmp[664076](138528 call _value _mt[243] a[138502]))
    (426838 'move' tmp[426827](138535 call(138531 call (partial) isDefaultRectangular _mt[243] call_tmp[664076])))
    unknown call_tmp[664083] "expr temp" "maybe param" "maybe type" "temp"
    (664086 'move' call_tmp[664083](426840 call _cond_invalid tmp[426827]))
    if call_tmp[664083]
    {
      (426843 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568068] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568069] "maybe param" "temp"
    unknown call_tmp[664088] "expr temp" "maybe param" "maybe type" "temp"
    (664091 'move' call_tmp[664088](426828 call isTrue tmp[426827]))
    (568074 'move' tmp[568069](568072 call _cond_test call_tmp[664088]))
    if tmp[568069]
    {
      unknown tmp[568076] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[664095] "expr temp" "maybe param" "maybe type" "temp"
      (664098 'move' call_tmp[664095](138537 call _value _mt[243] b[138506]))
      unknown call_tmp[664102] "expr temp" "maybe param" "maybe type" "temp"
      (664105 'move' call_tmp[664102](138544 call(138540 call (partial) isDefaultRectangular _mt[243] call_tmp[664095])))
      (568078 'move' tmp[568076](426831 call isTrue call_tmp[664102]))
      (568083 'move' tmp[568068](568080 '_paramFoldLogical' tmp[568069] tmp[568076]))
    }
    {
      (568088 'move' tmp[568068](568085 '_paramFoldLogical' tmp[568069] 0))
    }
    unknown call_tmp[664107] "expr temp" "maybe param" "maybe type" "temp"
    (664110 'move' call_tmp[664107](138547 call ! tmp[568068]))
    unknown call_tmp[664112] "expr temp" "maybe param" "maybe type" "temp"
    (664115 'move' call_tmp[664112](138552 call _cond_test call_tmp[664107]))
    if call_tmp[664112]
    {
      (519172 'move' ret[519162](519171 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519160] _end_chpl__compatibleForWidePtrBulkTransfer[519160]
    }
    unknown call_tmp[664119] "expr temp" "maybe param" "maybe type" "temp"
    (664122 'move' call_tmp[664119](138558 call eltType _mt[243] a[138502]))
    unknown call_tmp[664126] "expr temp" "maybe param" "maybe type" "temp"
    (664129 'move' call_tmp[664126](138562 call eltType _mt[243] b[138506]))
    unknown call_tmp[664131] "expr temp" "maybe param" "maybe type" "temp"
    (664134 'move' call_tmp[664131](138565 call != call_tmp[664119] call_tmp[664126]))
    unknown call_tmp[664136] "expr temp" "maybe param" "maybe type" "temp"
    (664139 'move' call_tmp[664136](138570 call _cond_test call_tmp[664131]))
    if call_tmp[664136]
    {
      (519177 'move' ret[519162](519176 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519160] _end_chpl__compatibleForWidePtrBulkTransfer[519160]
    }
    unknown call_tmp[664143] "expr temp" "maybe param" "maybe type" "temp"
    (664146 'move' call_tmp[664143](138577 call eltType _mt[243] a[138502]))
    unknown call_tmp[664148] "expr temp" "maybe param" "maybe type" "temp"
    (664151 'move' call_tmp[664148](138581 call isClass call_tmp[664143]))
    unknown call_tmp[664153] "expr temp" "maybe param" "maybe type" "temp"
    (664156 'move' call_tmp[664153](138582 call ! call_tmp[664148]))
    unknown call_tmp[664158] "expr temp" "maybe param" "maybe type" "temp"
    (664161 'move' call_tmp[664158](138587 call _cond_test call_tmp[664153]))
    if call_tmp[664158]
    {
      (519182 'move' ret[519162](519181 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519160] _end_chpl__compatibleForWidePtrBulkTransfer[519160]
    }
    unknown call_tmp[664165] "expr temp" "maybe param" "maybe type" "temp"
    (664168 'move' call_tmp[664165](138594 call eltType _mt[243] a[138502]))
    unknown call_tmp[664170] "expr temp" "maybe param" "maybe type" "temp"
    (664173 'move' call_tmp[664170](138598 call isOwnedClass call_tmp[664165]))
    unknown call_tmp[664175] "expr temp" "maybe param" "maybe type" "temp"
    (664178 'move' call_tmp[664175](138602 call _cond_test call_tmp[664170]))
    if call_tmp[664175]
    {
      (519187 'move' ret[519162](519186 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519160] _end_chpl__compatibleForWidePtrBulkTransfer[519160]
    }
    unknown call_tmp[664182] "expr temp" "maybe param" "maybe type" "temp"
    (664185 'move' call_tmp[664182](138609 call eltType _mt[243] a[138502]))
    unknown call_tmp[664187] "expr temp" "maybe param" "maybe type" "temp"
    (664190 'move' call_tmp[664187](138613 call isSharedClass call_tmp[664182]))
    unknown call_tmp[664192] "expr temp" "maybe param" "maybe type" "temp"
    (664195 'move' call_tmp[664192](138617 call _cond_test call_tmp[664187]))
    if call_tmp[664192]
    {
      (519192 'move' ret[519162](519191 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519160] _end_chpl__compatibleForWidePtrBulkTransfer[519160]
    }
    (519197 'move' ret[519162](519196 'deref' 1))
    label _end_chpl__compatibleForWidePtrBulkTransfer[519160]
    (519164 return ret[519162])
  }
  function chpl__bulkTransferPtrArray[138635](ref arg a[138632]:_array[133594](?), arg b[138640]:_array[133594](?)) : _unknown[51] "inline"
  {
    unknown ret[519201] "RVV" "temp"
    unknown call_tmp[664199] "maybe param" "maybe type" "temp"
    (664202 'move' call_tmp[664199](138644 call _dom _mt[243] a[138632]))
    const aDom[138647] "dead at end of block" "const" "insert auto destroy"
    (543283 'init var' aDom[138647] call_tmp[664199])
    (138650 'end of statement')
    unknown call_tmp[664206] "maybe param" "maybe type" "temp"
    (664209 'move' call_tmp[664206](138653 call _dom _mt[243] b[138640]))
    const bDom[138656] "dead at end of block" "const" "insert auto destroy"
    (543285 'init var' bDom[138656] call_tmp[664206])
    (138659 'end of statement')
    unknown call_tmp[664211] "expr temp" "maybe param" "maybe type" "temp"
    (664214 'move' call_tmp[664211](138662 call != aDom[138647] bDom[138656]))
    unknown call_tmp[664216] "expr temp" "maybe param" "maybe type" "temp"
    (664219 'move' call_tmp[664216](138667 call _cond_test call_tmp[664211]))
    if call_tmp[664216]
    {
      (519206 'move' ret[519201](519205 'deref' 0))
      gotoReturn _end_chpl__bulkTransferPtrArray[519199] _end_chpl__bulkTransferPtrArray[519199]
    }
    unknown call_tmp[664223] "expr temp" "maybe param" "maybe type" "temp"
    (664226 'move' call_tmp[664223](138692 call low _mt[243] aDom[138647]))
    unknown call_tmp[664228] "expr temp" "maybe param" "maybe type" "temp"
    (664231 'move' call_tmp[664228](138696 call a[138632] call_tmp[664223]))
    unknown call_tmp[664233] "expr temp" "maybe param" "maybe type" "temp"
    (664236 'move' call_tmp[664233](138697 'is wide pointer' call_tmp[664228]))
    unknown call_tmp[664238] "expr temp" "maybe param" "maybe type" "temp"
    (664241 'move' call_tmp[664238](138708 call _cond_test call_tmp[664233]))
    if call_tmp[664238]
    {
      unknown call_tmp[664243] "expr temp" "maybe param" "maybe type" "temp"
      (664246 'move' call_tmp[664243](138704 call chpl__bulkTransferArray a[138632] aDom[138647] b[138640] bDom[138656]))
      (519211 'move' ret[519201](519210 'deref' call_tmp[664243]))
      gotoReturn _end_chpl__bulkTransferPtrArray[519199] _end_chpl__bulkTransferPtrArray[519199]
      (480790 'end of statement' aDom[138647] bDom[138656])
    }
    (519216 'move' ret[519201](519215 'deref' 0))
    label _end_chpl__bulkTransferPtrArray[519199]
    (519203 return ret[519201])
  }
  function chpl__bulkTransferArray[138727](ref arg a[138724]:_array[133594](?), arg b[138734]:_array[133594](?)) : _unknown[51] "inline"
  {
    unknown ret[519220] "RVV" "temp"
    unknown call_tmp[664250] "expr temp" "maybe param" "maybe type" "temp"
    (664253 'move' call_tmp[664250](461621 call _dom _mt[243] a[138724]))
    unknown call_tmp[664257] "expr temp" "maybe param" "maybe type" "temp"
    (664260 'move' call_tmp[664257](461627 call _dom _mt[243] b[138734]))
    unknown call_tmp[664262] "expr temp" "maybe param" "maybe type" "temp"
    (664265 'move' call_tmp[664262](138743 call chpl__bulkTransferArray a[138724] call_tmp[664250] b[138734] call_tmp[664257]))
    (519225 'move' ret[519220](519224 'deref' call_tmp[664262]))
    (519222 return ret[519220])
  }
  function chpl__bulkTransferArray[138757](ref arg a[138754]:_array[133594](?), arg AD[138760]:_domain[125908](?), const  ref arg b[138766]:_array[133594](?), arg BD[138770]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[519229] "RVV" "temp"
    unknown call_tmp[664269] "expr temp" "maybe param" "maybe type" "temp"
    (664272 'move' call_tmp[664269](138775 call _value _mt[243] a[138754]))
    unknown call_tmp[664276] "expr temp" "maybe param" "maybe type" "temp"
    (664279 'move' call_tmp[664276](138781 call _value _mt[243] b[138766]))
    unknown call_tmp[664281] "expr temp" "maybe param" "maybe type" "temp"
    (664284 'move' call_tmp[664281](138785 call chpl__bulkTransferArray call_tmp[664269] AD[138760] call_tmp[664276] BD[138770]))
    (519234 'move' ret[519229](519233 'deref' call_tmp[664281]))
    (519231 return ret[519229])
  }
  function chpl__bulkTransferArray[138795](arg destClass[138793]:_any[178](?), arg destDom[138798]:_domain[125908](?), arg srcClass[138801]:_any[178](?), arg srcDom[138804]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[519240] "RVV" "temp"
    unknown success[138808] "dead at end of block" "insert auto destroy"
    (543287 'init var' success[138808] 0)
    (138811 'end of statement')
    function bulkTransferDebug[138819](arg msg[138816]:string[26]) : _unknown[51] "inline" "no return value for void"
    {
      unknown call_tmp[664286] "expr temp" "maybe param" "maybe type" "temp"
      (664289 'move' call_tmp[664286](138844 call _cond_test debugBulkTransfer[113723]))
      if call_tmp[664286]
      {
        (138842 call chpl_debug_writeln "proc =(a:[],b:[]): " msg[138816])
      }
      (519236 return _void[55])
    }
    (138871 call bulkTransferDebug "in chpl__bulkTransferArray")
    (480797 'end of statement')
    unknown call_tmp[664291] "expr temp" "maybe param" "maybe type" "temp"
    (664294 'move' call_tmp[664291](138899 call canResolveMethod module=[255] Reflection[224970] destClass[138793] "doiBulkTransferFromKnown" destDom[138798] srcClass[138801] srcDom[138804]))
    unknown call_tmp[664296] "expr temp" "maybe param" "maybe type" "temp"
    (664299 'move' call_tmp[664296](139135 call _cond_test call_tmp[664291]))
    if call_tmp[664296]
    {
      (138919 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (480798 'end of statement')
      unknown call_tmp[664303] "expr temp" "maybe param" "maybe type" "temp"
      (664306 'move' call_tmp[664303](138931 call(138924 call (partial) doiBulkTransferFromKnown _mt[243] destClass[138793]) destDom[138798] srcClass[138801] srcDom[138804]))
      (138932 call = success[138808] call_tmp[664303])
      (480799 'end of statement' success[138808])
    }
    {
      unknown call_tmp[664308] "expr temp" "maybe param" "maybe type" "temp"
      (664311 'move' call_tmp[664308](138961 call canResolveMethod module=[255] Reflection[224970] srcClass[138801] "doiBulkTransferToKnown" srcDom[138804] destClass[138793] destDom[138798]))
      unknown call_tmp[664313] "expr temp" "maybe param" "maybe type" "temp"
      (664316 'move' call_tmp[664313](139130 call _cond_test call_tmp[664308]))
      if call_tmp[664313]
      {
        (138981 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (480801 'end of statement')
        unknown call_tmp[664320] "expr temp" "maybe param" "maybe type" "temp"
        (664323 'move' call_tmp[664320](138993 call(138986 call (partial) doiBulkTransferToKnown _mt[243] srcClass[138801]) srcDom[138804] destClass[138793] destDom[138798]))
        (138994 call = success[138808] call_tmp[664320])
        (480802 'end of statement' success[138808])
      }
      {
        unknown call_tmp[664325] "expr temp" "maybe param" "maybe type" "temp"
        (664328 'move' call_tmp[664325](139023 call canResolveMethod module=[255] Reflection[224970] destClass[138793] "doiBulkTransferFromAny" destDom[138798] srcClass[138801] srcDom[138804]))
        unknown call_tmp[664330] "expr temp" "maybe param" "maybe type" "temp"
        (664333 'move' call_tmp[664330](139125 call _cond_test call_tmp[664325]))
        if call_tmp[664330]
        {
          (139043 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (480804 'end of statement')
          unknown call_tmp[664337] "expr temp" "maybe param" "maybe type" "temp"
          (664340 'move' call_tmp[664337](139055 call(139048 call (partial) doiBulkTransferFromAny _mt[243] destClass[138793]) destDom[138798] srcClass[138801] srcDom[138804]))
          (139056 call = success[138808] call_tmp[664337])
          (480805 'end of statement' success[138808])
        }
        {
          unknown call_tmp[664342] "expr temp" "maybe param" "maybe type" "temp"
          (664345 'move' call_tmp[664342](139085 call canResolveMethod module=[255] Reflection[224970] srcClass[138801] "doiBulkTransferToAny" srcDom[138804] destClass[138793] destDom[138798]))
          unknown call_tmp[664347] "expr temp" "maybe param" "maybe type" "temp"
          (664350 'move' call_tmp[664347](139121 call _cond_test call_tmp[664342]))
          if call_tmp[664347]
          {
            (139105 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (480807 'end of statement')
            unknown call_tmp[664354] "expr temp" "maybe param" "maybe type" "temp"
            (664357 'move' call_tmp[664354](139117 call(139110 call (partial) doiBulkTransferToAny _mt[243] srcClass[138801]) srcDom[138804] destClass[138793] destDom[138798]))
            (139118 call = success[138808] call_tmp[664354])
            (480808 'end of statement' success[138808])
          }
          (360335 'referenced modules list' Reflection[224970])
        }
        (360328 'referenced modules list' Reflection[224970])
      }
      (360321 'referenced modules list' Reflection[224970])
    }
    unknown call_tmp[664359] "expr temp" "maybe param" "maybe type" "temp"
    (664362 'move' call_tmp[664359](139183 call _cond_test success[138808]))
    if call_tmp[664359]
    {
      (139160 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (139181 call bulkTransferDebug "bulk transfer did not happen")
    }
    (519245 'move' ret[519240](519244 'deref' success[138808]))
    gotoReturn _end_chpl__bulkTransferArray[519238] _end_chpl__bulkTransferArray[519238]
    (480812 'end of statement' success[138808])
    label _end_chpl__bulkTransferArray[519238]
    (519242 return ret[519240])
    (360314 'referenced modules list' Reflection[224970])
  }
  function chpl__transferArray[139202](ref arg a[139199]:_array[133594](?), const  ref arg b[139204]:_any[178](?), param arg kind[139210] :
  assign[137997] =
  assign[137997]) : _unknown[51] "inline" "ignore transfer errors" "find user line" "no return value for void"
  {
    unknown tmp[426869] "maybe param" "temp"
    unknown call_tmp[664366] "expr temp" "maybe param" "maybe type" "temp"
    (664369 'move' call_tmp[664366](139220 call eltType _mt[243] a[139199]))
    unknown call_tmp[664371] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (664374 'move' call_tmp[664371](139224 'typeof' b[139204]))
    (426880 'move' tmp[426869](139225 call == call_tmp[664366] call_tmp[664371]))
    unknown call_tmp[664376] "expr temp" "maybe param" "maybe type" "temp"
    (664379 'move' call_tmp[664376](426882 call _cond_invalid tmp[426869]))
    if call_tmp[664376]
    {
      (426885 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568122] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568123] "maybe param" "temp"
    unknown call_tmp[664381] "expr temp" "maybe param" "maybe type" "temp"
    (664384 'move' call_tmp[664381](426870 call isTrue tmp[426869]))
    (568128 'move' tmp[568123](568126 call _cond_test call_tmp[664381]))
    if tmp[568123]
    {
      (568133 'move' tmp[568122](568130 '_paramFoldLogical' tmp[568123] 1))
    }
    {
      unknown tmp[426890] "maybe param" "temp"
      unknown call_tmp[664388] "expr temp" "maybe param" "maybe type" "temp"
      (664391 'move' call_tmp[664388](139229 call eltType _mt[243] a[139199]))
      (426901 'move' tmp[426890](139233 call _isPrimitiveType call_tmp[664388]))
      unknown call_tmp[664393] "expr temp" "maybe param" "maybe type" "temp"
      (664396 'move' call_tmp[664393](426903 call _cond_invalid tmp[426890]))
      if call_tmp[664393]
      {
        (426906 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[568095] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568096] "maybe param" "temp"
      unknown call_tmp[664398] "expr temp" "maybe param" "maybe type" "temp"
      (664401 'move' call_tmp[664398](426891 call isTrue tmp[426890]))
      (568101 'move' tmp[568096](568099 call _cond_test call_tmp[664398]))
      if tmp[568096]
      {
        unknown tmp[568103] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664403] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (664406 'move' call_tmp[664403](139236 'typeof' b[139204]))
        unknown call_tmp[664408] "expr temp" "maybe param" "maybe type" "temp"
        (664411 'move' call_tmp[664408](139238 call _isPrimitiveType call_tmp[664403]))
        (568105 'move' tmp[568103](426894 call isTrue call_tmp[664408]))
        (568110 'move' tmp[568095](568107 '_paramFoldLogical' tmp[568096] tmp[568103]))
      }
      {
        (568115 'move' tmp[568095](568112 '_paramFoldLogical' tmp[568096] 0))
      }
      unknown tmp[568135] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568137 'move' tmp[568135](426874 call isTrue tmp[568095]))
      (568142 'move' tmp[568122](568139 '_paramFoldLogical' tmp[568123] tmp[568135]))
    }
    unknown call_tmp[664413] "expr temp" "maybe param" "maybe type" "temp"
    (664416 'move' call_tmp[664413](140133 call _cond_test tmp[568122]))
    if call_tmp[664413]
    {
      unknown tmp[426848] "maybe param" "temp"
      (426859 'move' tmp[426848](139248 call == kind[139210] move[137993]))
      unknown call_tmp[664418] "expr temp" "maybe param" "maybe type" "temp"
      (664421 'move' call_tmp[664418](426861 call _cond_invalid tmp[426848]))
      if call_tmp[664418]
      {
        (426864 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[568149] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568150] "maybe param" "temp"
      unknown call_tmp[664423] "expr temp" "maybe param" "maybe type" "temp"
      (664426 'move' call_tmp[664423](426849 call isTrue tmp[426848]))
      (568155 'move' tmp[568150](568153 call _cond_test call_tmp[664423]))
      if tmp[568150]
      {
        (568160 'move' tmp[568149](568157 '_paramFoldLogical' tmp[568150] 1))
      }
      {
        unknown tmp[568162] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664428] "expr temp" "maybe param" "maybe type" "temp"
        (664431 'move' call_tmp[664428](139255 call == kind[139210] initCopy[137995]))
        (568164 'move' tmp[568162](426853 call isTrue call_tmp[664428]))
        (568169 'move' tmp[568149](568166 '_paramFoldLogical' tmp[568150] tmp[568162]))
      }
      unknown call_tmp[664433] "expr temp" "maybe param" "maybe type" "temp"
      (664436 'move' call_tmp[664433](139373 call _cond_test tmp[568149]))
      if call_tmp[664433]
      {
        unknown call_tmp[664440] "expr temp" "maybe param" "maybe type" "temp"
        (664443 'move' call_tmp[664440](139261 call eltType _mt[243] a[139199]))
        unknown call_tmp[664445] "expr temp" "maybe param" "maybe type" "temp"
        (664448 'move' call_tmp[664445](139265 call needsInitWorkaround call_tmp[664440]))
        unknown call_tmp[664450] "expr temp" "maybe param" "maybe type" "temp"
        (664453 'move' call_tmp[664450](139337 call _cond_test call_tmp[664445]))
        if call_tmp[664450]
        {
          unknown call_tmp[664457] "expr temp" "maybe param" "maybe type" "temp"
          (664460 'move' call_tmp[664457](415855 call _dom _mt[243] a[139199]))
          unknown call_tmp[664462] "maybe param" "maybe type" "temp"
          (664465 'move' call_tmp[664462](415851 call chpl__staticAutoLocalCheck a[139199] call_tmp[664457]))
          unknown chpl__staticAutoLocalCheckSym[415850] "dead at end of block" "param"
          (543289 'init var' chpl__staticAutoLocalCheckSym[415850] call_tmp[664462])
          (480816 'end of statement')
          if chpl__staticAutoLocalCheckSym[415850]
          {
            unknown call_tmp[664469] "expr temp" "maybe param" "maybe type" "temp"
            (664472 'move' call_tmp[664469](139268 call _dom _mt[243] a[139199]))
            Forall {
              induction variables:
                
                unknown ai[139302] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664469]
              shadow variables:
                b[139272] 'in' intent outer var b[139204]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[139281] "dead at end of block" "ref var"
                unknown call_tmp[664474] "expr temp" "maybe param" "maybe type" "temp"
                (664477 'move' call_tmp[664474](415861 'may be local access' a[139199] ai[139302] chpl__staticAutoLocalCheckSym[415850] 1))
                (543292 'move' aa[139281](543291 'addr of' call_tmp[664474]))
                (139284 'end of statement')
                unknown call_tmp[664481] "maybe param" "maybe type" "temp"
                (664484 'move' call_tmp[664481](139287 call eltType _mt[243] a[139199]))
                unknown copy[139291] "dead at end of block" "no auto destroy"
                (543294 'init var' copy[139291] b[139272] call_tmp[664481])
                (139294 'end of statement' ai[139302] b[139272])
                (139299 '=' aa[139281] copy[139291])
                (480819 'end of statement' aa[139281] copy[139291])
              }
            }
          }
          {
            unknown call_tmp[664488] "expr temp" "maybe param" "maybe type" "temp"
            (664491 'move' call_tmp[664488](415840 call _dom _mt[243] a[139199]))
            Forall {
              induction variables:
                
                unknown ai[415837] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664488]
              shadow variables:
                b[415844] 'in' intent outer var b[139204]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[415819] "dead at end of block" "ref var"
                unknown call_tmp[664493] "expr temp" "maybe param" "maybe type" "temp"
                (664496 'move' call_tmp[664493](415821 call a[139199] ai[415837]))
                (543297 'move' aa[415819](543296 'addr of' call_tmp[664493]))
                (415824 'end of statement')
                unknown call_tmp[664500] "maybe param" "maybe type" "temp"
                (664503 'move' call_tmp[664500](415828 call eltType _mt[243] a[139199]))
                unknown copy[415825] "dead at end of block" "no auto destroy"
                (543299 'init var' copy[415825] b[415844] call_tmp[664500])
                (415832 'end of statement' ai[415837] b[415844])
                (415833 '=' aa[415819] copy[415825])
                (480824 'end of statement' aa[415819] copy[415825])
              }
            }
          }
        }
        {
          Forall {
            induction variables:
              
              unknown aa[139332] "index var" "insert auto destroy"
            iterated expressions:
              a[139199]
            shadow variables:
              b[139310] 'in' intent outer var b[139204]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown call_tmp[664507] "maybe param" "maybe type" "temp"
              (664510 'move' call_tmp[664507](139316 call eltType _mt[243] a[139199]))
              unknown copy[139320] "dead at end of block" "no auto destroy"
              (543301 'init var' copy[139320] b[139310] call_tmp[664507])
              (139323 'end of statement' b[139310])
              (139329 '=' aa[139332] copy[139320])
              (480828 'end of statement' aa[139332] copy[139320])
            }
          }
        }
      }
      {
        unknown call_tmp[664512] "expr temp" "maybe param" "maybe type" "temp"
        (664515 'move' call_tmp[664512](139347 call == kind[139210] assign[137997]))
        unknown call_tmp[664517] "expr temp" "maybe param" "maybe type" "temp"
        (664520 'move' call_tmp[664517](139369 call _cond_test call_tmp[664512]))
        if call_tmp[664517]
        {
          Forall {
            induction variables:
              
              unknown aa[139364] "index var" "insert auto destroy"
            iterated expressions:
              a[139199]
            shadow variables:
              b[139352] 'in' intent outer var b[139204]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              (139359 call = aa[139364] b[139352])
              (480831 'end of statement' aa[139364] b[139352])
            }
          }
        }
      }
    }
    {
      unknown call_tmp[664522] "expr temp" "maybe param" "maybe type" "temp"
      (664525 'move' call_tmp[664522](139383 call chpl__serializeAssignment a[139199] b[139204]))
      unknown call_tmp[664527] "expr temp" "maybe param" "maybe type" "temp"
      (664530 'move' call_tmp[664527](140129 call _cond_test call_tmp[664522]))
      if call_tmp[664527]
      {
        unknown call_tmp[664532] "expr temp" "maybe param" "maybe type" "temp"
        (664535 'move' call_tmp[664532](139389 call == kind[139210] move[137993]))
        unknown call_tmp[664537] "expr temp" "maybe param" "maybe type" "temp"
        (664540 'move' call_tmp[664537](139870 call _cond_test call_tmp[664532]))
        if call_tmp[664537]
        {
          unknown call_tmp[664544] "expr temp" "maybe param" "maybe type" "temp"
          (664547 'move' call_tmp[664544](139393 call eltType _mt[243] a[139199]))
          unknown call_tmp[664549] "expr temp" "maybe param" "maybe type" "temp"
          (664552 'move' call_tmp[664549](139397 call needsInitWorkaround call_tmp[664544]))
          unknown call_tmp[664554] "expr temp" "maybe param" "maybe type" "temp"
          (664557 'move' call_tmp[664554](139591 call _cond_test call_tmp[664549]))
          if call_tmp[664554]
          {
            {
              unknown _indexOfInterest[139453] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139454] "expr temp" "temp"
              unknown call_tmp[664561] "expr temp" "maybe param" "maybe type" "temp"
              (664564 'move' call_tmp[664561](139463 call _dom _mt[243] a[139199]))
              unknown call_tmp[664566] "expr temp" "maybe param" "maybe type" "temp"
              (664569 'move' call_tmp[664566](139466 call _getIterator call_tmp[664561]))
              unknown call_tmp[664571] "expr temp" "maybe param" "maybe type" "temp"
              (664574 'move' call_tmp[664571](139470 call _getIterator b[139204]))
              (139472 'move' _iterator[139454](139409 call _build_tuple call_tmp[664566] call_tmp[664571]))
              Defer
              {
                {
                  (139502 call _freeIterator _iterator[139454])
                }
              }
              { scopeless type
                (139477 'move' _indexOfInterest[139453](139474 call iteratorIndex _iterator[139454]))
              }
              ForLoop[139455]
              {
                (139482 call _check_tuple_var_decl _indexOfInterest[139453] 2)
                (480835 'end of statement')
                unknown ai[139488] "index var" "insert auto destroy"
                (480836 'end of statement')
                (139490 'move' ai[139488](139486 call _indexOfInterest[139453] 0))
                (480837 'end of statement' ai[139488])
                unknown bb[139495] "index var" "insert auto destroy"
                (480839 'end of statement')
                (139497 'move' bb[139495](139493 call _indexOfInterest[139453] 1))
                (480840 'end of statement' bb[139495])
                {
                  unknown aa[139414] "dead at end of block" "ref var"
                  unknown call_tmp[664576] "expr temp" "maybe param" "maybe type" "temp"
                  (664579 'move' call_tmp[664576](139413 call a[139199] ai[139488]))
                  (543304 'move' aa[139414](543303 'addr of' call_tmp[664576]))
                  (139417 'end of statement' ai[139488])
                  unknown call_tmp[664581] "expr temp" "maybe param" "maybe type" "temp"
                  (664584 'move' call_tmp[664581](139441 'steal' bb[139495]))
                  (139442 '=' aa[139414] call_tmp[664581])
                  (480843 'end of statement' aa[139414] bb[139495])
                  unknown call_tmp[664588] "expr temp" "maybe param" "maybe type" "temp"
                  (664591 'move' call_tmp[664588](139446 call eltType _mt[243] a[139199]))
                  (139451 call fixRuntimeType call_tmp[664588] aa[139414])
                  (480846 'end of statement' aa[139414])
                }
                label _continueLabel[139458]
                _indexOfInterest[139453]
                _iterator[139454]
              }
              label _breakLabel[139459]
            }
          }
          {
            {
              unknown _indexOfInterest[139538] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139539] "expr temp" "temp"
              unknown call_tmp[664593] "expr temp" "maybe param" "maybe type" "temp"
              (664596 'move' call_tmp[664593](139548 call _getIterator a[139199]))
              unknown call_tmp[664598] "expr temp" "maybe param" "maybe type" "temp"
              (664601 'move' call_tmp[664598](139551 call _getIterator b[139204]))
              (139553 'move' _iterator[139539](139518 call _build_tuple call_tmp[664593] call_tmp[664598]))
              Defer
              {
                {
                  (139583 call _freeIterator _iterator[139539])
                }
              }
              { scopeless type
                (139558 'move' _indexOfInterest[139538](139555 call iteratorIndex _iterator[139539]))
              }
              ForLoop[139540]
              {
                (139563 call _check_tuple_var_decl _indexOfInterest[139538] 2)
                (480849 'end of statement')
                unknown aa[139569] "index var" "insert auto destroy"
                (480850 'end of statement')
                (139571 'move' aa[139569](139567 call _indexOfInterest[139538] 0))
                (480851 'end of statement' aa[139569])
                unknown bb[139576] "index var" "insert auto destroy"
                (480853 'end of statement')
                (139578 'move' bb[139576](139574 call _indexOfInterest[139538] 1))
                (480854 'end of statement' bb[139576])
                {
                  unknown call_tmp[664603] "expr temp" "maybe param" "maybe type" "temp"
                  (664606 'move' call_tmp[664603](139525 'steal' bb[139576]))
                  (139526 '=' aa[139569] call_tmp[664603])
                  (480856 'end of statement' aa[139569] bb[139576])
                  unknown call_tmp[664610] "expr temp" "maybe param" "maybe type" "temp"
                  (664613 'move' call_tmp[664610](139531 call eltType _mt[243] a[139199]))
                  (139536 call fixRuntimeType call_tmp[664610] aa[139569])
                  (480859 'end of statement' aa[139569])
                }
                label _continueLabel[139543]
                _indexOfInterest[139538]
                _iterator[139539]
              }
              label _breakLabel[139544]
            }
          }
        }
        {
          unknown call_tmp[664615] "expr temp" "maybe param" "maybe type" "temp"
          (664618 'move' call_tmp[664615](139601 call == kind[139210] initCopy[137995]))
          unknown call_tmp[664620] "expr temp" "maybe param" "maybe type" "temp"
          (664623 'move' call_tmp[664620](139865 call _cond_test call_tmp[664615]))
          if call_tmp[664620]
          {
            unknown call_tmp[664627] "expr temp" "maybe param" "maybe type" "temp"
            (664630 'move' call_tmp[664627](139605 call eltType _mt[243] a[139199]))
            unknown call_tmp[664632] "expr temp" "maybe param" "maybe type" "temp"
            (664635 'move' call_tmp[664632](139609 call needsInitWorkaround call_tmp[664627]))
            unknown call_tmp[664637] "expr temp" "maybe param" "maybe type" "temp"
            (664640 'move' call_tmp[664637](139781 call _cond_test call_tmp[664632]))
            if call_tmp[664637]
            {
              {
                unknown _indexOfInterest[139646] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139647] "expr temp" "temp"
                unknown call_tmp[664644] "expr temp" "maybe param" "maybe type" "temp"
                (664647 'move' call_tmp[664644](139656 call _dom _mt[243] a[139199]))
                unknown call_tmp[664649] "expr temp" "maybe param" "maybe type" "temp"
                (664652 'move' call_tmp[664649](139659 call _getIterator call_tmp[664644]))
                unknown call_tmp[664654] "expr temp" "maybe param" "maybe type" "temp"
                (664657 'move' call_tmp[664654](139663 call _getIterator b[139204]))
                (139665 'move' _iterator[139647](139621 call _build_tuple call_tmp[664649] call_tmp[664654]))
                Defer
                {
                  {
                    (139695 call _freeIterator _iterator[139647])
                  }
                }
                { scopeless type
                  (139670 'move' _indexOfInterest[139646](139667 call iteratorIndex _iterator[139647]))
                }
                ForLoop[139648]
                {
                  (139675 call _check_tuple_var_decl _indexOfInterest[139646] 2)
                  (480862 'end of statement')
                  unknown ai[139681] "index var" "insert auto destroy"
                  (480863 'end of statement')
                  (139683 'move' ai[139681](139679 call _indexOfInterest[139646] 0))
                  (480864 'end of statement' ai[139681])
                  unknown bb[139688] "index var" "insert auto destroy"
                  (480866 'end of statement')
                  (139690 'move' bb[139688](139686 call _indexOfInterest[139646] 1))
                  (480867 'end of statement' bb[139688])
                  {
                    unknown aa[139626] "dead at end of block" "ref var"
                    unknown call_tmp[664659] "expr temp" "maybe param" "maybe type" "temp"
                    (664662 'move' call_tmp[664659](139625 call a[139199] ai[139681]))
                    (543307 'move' aa[139626](543306 'addr of' call_tmp[664659]))
                    (139629 'end of statement')
                    unknown call_tmp[664666] "maybe param" "maybe type" "temp"
                    (664669 'move' call_tmp[664666](139632 call eltType _mt[243] a[139199]))
                    unknown copy[139636] "dead at end of block" "no auto destroy"
                    (543309 'init var' copy[139636] b[139204] call_tmp[664666])
                    (139639 'end of statement' ai[139681])
                    (139644 '=' aa[139626] copy[139636])
                    (480870 'end of statement' aa[139626] copy[139636])
                  }
                  label _continueLabel[139651]
                  _indexOfInterest[139646]
                  _iterator[139647]
                }
                label _breakLabel[139652]
              }
            }
            {
              {
                unknown _indexOfInterest[139728] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139729] "expr temp" "temp"
                unknown call_tmp[664671] "expr temp" "maybe param" "maybe type" "temp"
                (664674 'move' call_tmp[664671](139738 call _getIterator a[139199]))
                unknown call_tmp[664676] "expr temp" "maybe param" "maybe type" "temp"
                (664679 'move' call_tmp[664676](139741 call _getIterator b[139204]))
                (139743 'move' _iterator[139729](139711 call _build_tuple call_tmp[664671] call_tmp[664676]))
                Defer
                {
                  {
                    (139773 call _freeIterator _iterator[139729])
                  }
                }
                { scopeless type
                  (139748 'move' _indexOfInterest[139728](139745 call iteratorIndex _iterator[139729]))
                }
                ForLoop[139730]
                {
                  (139753 call _check_tuple_var_decl _indexOfInterest[139728] 2)
                  (480874 'end of statement')
                  unknown aa[139759] "index var" "insert auto destroy"
                  (480875 'end of statement')
                  (139761 'move' aa[139759](139757 call _indexOfInterest[139728] 0))
                  (480876 'end of statement' aa[139759])
                  unknown bb[139766] "index var" "insert auto destroy"
                  (480878 'end of statement')
                  (139768 'move' bb[139766](139764 call _indexOfInterest[139728] 1))
                  (480879 'end of statement' bb[139766])
                  {
                    unknown call_tmp[664683] "maybe param" "maybe type" "temp"
                    (664686 'move' call_tmp[664683](139713 call eltType _mt[243] a[139199]))
                    unknown copy[139717] "dead at end of block" "no auto destroy"
                    (543311 'init var' copy[139717] b[139204] call_tmp[664683])
                    (139720 'end of statement')
                    (139726 '=' aa[139759] copy[139717])
                    (480881 'end of statement' aa[139759] copy[139717])
                  }
                  label _continueLabel[139733]
                  _indexOfInterest[139728]
                  _iterator[139729]
                }
                label _breakLabel[139734]
              }
            }
          }
          {
            unknown call_tmp[664688] "expr temp" "maybe param" "maybe type" "temp"
            (664691 'move' call_tmp[664688](139791 call == kind[139210] assign[137997]))
            unknown call_tmp[664693] "expr temp" "maybe param" "maybe type" "temp"
            (664696 'move' call_tmp[664693](139861 call _cond_test call_tmp[664688]))
            if call_tmp[664693]
            {
              {
                unknown _indexOfInterest[139808] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139809] "expr temp" "temp"
                unknown call_tmp[664698] "expr temp" "maybe param" "maybe type" "temp"
                (664701 'move' call_tmp[664698](139818 call _getIterator a[139199]))
                unknown call_tmp[664703] "expr temp" "maybe param" "maybe type" "temp"
                (664706 'move' call_tmp[664703](139821 call _getIterator b[139204]))
                (139823 'move' _iterator[139809](139801 call _build_tuple call_tmp[664698] call_tmp[664703]))
                Defer
                {
                  {
                    (139853 call _freeIterator _iterator[139809])
                  }
                }
                { scopeless type
                  (139828 'move' _indexOfInterest[139808](139825 call iteratorIndex _iterator[139809]))
                }
                ForLoop[139810]
                {
                  (139833 call _check_tuple_var_decl _indexOfInterest[139808] 2)
                  (480885 'end of statement')
                  unknown aa[139839] "index var" "insert auto destroy"
                  (480886 'end of statement')
                  (139841 'move' aa[139839](139837 call _indexOfInterest[139808] 0))
                  (480887 'end of statement' aa[139839])
                  unknown bb[139846] "index var" "insert auto destroy"
                  (480889 'end of statement')
                  (139848 'move' bb[139846](139844 call _indexOfInterest[139808] 1))
                  (480890 'end of statement' bb[139846])
                  {
                    (139804 call = aa[139839] bb[139846])
                    (480892 'end of statement' aa[139839] bb[139846])
                  }
                  label _continueLabel[139813]
                  _indexOfInterest[139808]
                  _iterator[139809]
                }
                label _breakLabel[139814]
              }
            }
          }
        }
      }
      {
        unknown call_tmp[664708] "expr temp" "maybe param" "maybe type" "temp"
        (664711 'move' call_tmp[664708](139881 call == kind[139210] move[137993]))
        unknown call_tmp[664713] "expr temp" "maybe param" "maybe type" "temp"
        (664716 'move' call_tmp[664713](140123 call _cond_test call_tmp[664708]))
        if call_tmp[664713]
        {
          unknown call_tmp[664720] "expr temp" "maybe param" "maybe type" "temp"
          (664723 'move' call_tmp[664720](139885 call eltType _mt[243] a[139199]))
          unknown call_tmp[664725] "expr temp" "maybe param" "maybe type" "temp"
          (664728 'move' call_tmp[664725](139889 call needsInitWorkaround call_tmp[664720]))
          unknown call_tmp[664730] "expr temp" "maybe param" "maybe type" "temp"
          (664733 'move' call_tmp[664730](139977 call _cond_test call_tmp[664725]))
          if call_tmp[664730]
          {
            unknown call_tmp[664737] "expr temp" "maybe param" "maybe type" "temp"
            (664740 'move' call_tmp[664737](415902 call _dom _mt[243] a[139199]))
            unknown call_tmp[664742] "maybe param" "maybe type" "temp"
            (664745 'move' call_tmp[664742](415898 call chpl__staticAutoLocalCheck a[139199] call_tmp[664737]))
            unknown chpl__staticAutoLocalCheckSym[415897] "dead at end of block" "param"
            (543313 'init var' chpl__staticAutoLocalCheckSym[415897] call_tmp[664742])
            (480895 'end of statement')
            if chpl__staticAutoLocalCheckSym[415897]
            {
              unknown call_tmp[664749] "expr temp" "maybe param" "maybe type" "temp"
              (664752 'move' call_tmp[664749](139897 call _dom _mt[243] a[139199]))
              Forall {
                induction variables:
                  
                  unknown ai[139932] "index var" "insert auto destroy"
                  
                  unknown bb[139934] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664749]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[139907] "dead at end of block" "ref var"
                    unknown call_tmp[664754] "expr temp" "maybe param" "maybe type" "temp"
                    (664757 'move' call_tmp[664754](415908 'may be local access' a[139199] ai[139932] chpl__staticAutoLocalCheckSym[415897] 1))
                    (543316 'move' aa[139907](543315 'addr of' call_tmp[664754]))
                    (139910 'end of statement' ai[139932])
                    unknown call_tmp[664759] "expr temp" "maybe param" "maybe type" "temp"
                    (664762 'move' call_tmp[664759](139918 'steal' bb[139934]))
                    (139919 '=' aa[139907] call_tmp[664759])
                    (480897 'end of statement' aa[139907] bb[139934])
                    unknown call_tmp[664766] "expr temp" "maybe param" "maybe type" "temp"
                    (664769 'move' call_tmp[664766](139923 call eltType _mt[243] a[139199]))
                    (139928 call fixRuntimeType call_tmp[664766] aa[139907])
                    (480900 'end of statement' aa[139907])
                  }
                }
              }
            }
            {
              unknown call_tmp[664773] "expr temp" "maybe param" "maybe type" "temp"
              (664776 'move' call_tmp[664773](415893 call _dom _mt[243] a[139199]))
              Forall {
                induction variables:
                  
                  unknown ai[415888] "index var" "insert auto destroy"
                  
                  unknown bb[415890] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664773]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[415870] "dead at end of block" "ref var"
                    unknown call_tmp[664778] "expr temp" "maybe param" "maybe type" "temp"
                    (664781 'move' call_tmp[664778](415872 call a[139199] ai[415888]))
                    (543319 'move' aa[415870](543318 'addr of' call_tmp[664778]))
                    (415875 'end of statement' ai[415888])
                    unknown call_tmp[664783] "expr temp" "maybe param" "maybe type" "temp"
                    (664786 'move' call_tmp[664783](415878 'steal' bb[415890]))
                    (415876 '=' aa[415870] call_tmp[664783])
                    (480903 'end of statement' aa[415870] bb[415890])
                    unknown call_tmp[664790] "expr temp" "maybe param" "maybe type" "temp"
                    (664793 'move' call_tmp[664790](415883 call eltType _mt[243] a[139199]))
                    (415881 call fixRuntimeType call_tmp[664790] aa[415870])
                    (480906 'end of statement' aa[415870])
                  }
                }
              }
            }
          }
          {
            Forall {
              induction variables:
                
                unknown aa[139970] "index var" "insert auto destroy"
                
                unknown bb[139972] "index var" "insert auto destroy"
              iterated expressions:
                a[139199]
                b[139204]
              shadow variables:
              other variables
                forall body
              {
                {
                  unknown call_tmp[664795] "expr temp" "maybe param" "maybe type" "temp"
                  (664798 'move' call_tmp[664795](139955 'steal' bb[139972]))
                  (139956 '=' aa[139970] call_tmp[664795])
                  (480908 'end of statement' aa[139970] bb[139972])
                  unknown call_tmp[664802] "expr temp" "maybe param" "maybe type" "temp"
                  (664805 'move' call_tmp[664802](139961 call eltType _mt[243] a[139199]))
                  (139966 call fixRuntimeType call_tmp[664802] aa[139970])
                  (480911 'end of statement' aa[139970])
                }
              }
            }
          }
        }
        {
          unknown call_tmp[664807] "expr temp" "maybe param" "maybe type" "temp"
          (664810 'move' call_tmp[664807](139987 call == kind[139210] initCopy[137995]))
          unknown call_tmp[664812] "expr temp" "maybe param" "maybe type" "temp"
          (664815 'move' call_tmp[664812](140118 call _cond_test call_tmp[664807]))
          if call_tmp[664812]
          {
            unknown call_tmp[664819] "expr temp" "maybe param" "maybe type" "temp"
            (664822 'move' call_tmp[664819](139991 call eltType _mt[243] a[139199]))
            unknown call_tmp[664824] "expr temp" "maybe param" "maybe type" "temp"
            (664827 'move' call_tmp[664824](139995 call needsInitWorkaround call_tmp[664819]))
            unknown call_tmp[664829] "expr temp" "maybe param" "maybe type" "temp"
            (664832 'move' call_tmp[664829](140077 call _cond_test call_tmp[664824]))
            if call_tmp[664829]
            {
              unknown call_tmp[664836] "expr temp" "maybe param" "maybe type" "temp"
              (664839 'move' call_tmp[664836](415949 call _dom _mt[243] a[139199]))
              unknown call_tmp[664841] "maybe param" "maybe type" "temp"
              (664844 'move' call_tmp[664841](415945 call chpl__staticAutoLocalCheck a[139199] call_tmp[664836]))
              unknown chpl__staticAutoLocalCheckSym[415944] "dead at end of block" "param"
              (543321 'init var' chpl__staticAutoLocalCheckSym[415944] call_tmp[664841])
              (480913 'end of statement')
              if chpl__staticAutoLocalCheckSym[415944]
              {
                unknown call_tmp[664848] "expr temp" "maybe param" "maybe type" "temp"
                (664851 'move' call_tmp[664848](140003 call _dom _mt[243] a[139199]))
                Forall {
                  induction variables:
                    
                    unknown ai[140035] "index var" "insert auto destroy"
                    
                    unknown bb[140037] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664848]
                    b[139204]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[140013] "dead at end of block" "ref var"
                      unknown call_tmp[664853] "expr temp" "maybe param" "maybe type" "temp"
                      (664856 'move' call_tmp[664853](415955 'may be local access' a[139199] ai[140035] chpl__staticAutoLocalCheckSym[415944] 1))
                      (543324 'move' aa[140013](543323 'addr of' call_tmp[664853]))
                      (140016 'end of statement')
                      unknown call_tmp[664860] "maybe param" "maybe type" "temp"
                      (664863 'move' call_tmp[664860](140019 call eltType _mt[243] a[139199]))
                      unknown copy[140023] "dead at end of block" "no auto destroy"
                      (543326 'init var' copy[140023] bb[140037] call_tmp[664860])
                      (140026 'end of statement' ai[140035] bb[140037])
                      (140031 '=' aa[140013] copy[140023])
                      (480916 'end of statement' aa[140013] copy[140023])
                    }
                  }
                }
              }
              {
                unknown call_tmp[664867] "expr temp" "maybe param" "maybe type" "temp"
                (664870 'move' call_tmp[664867](415940 call _dom _mt[243] a[139199]))
                Forall {
                  induction variables:
                    
                    unknown ai[415935] "index var" "insert auto destroy"
                    
                    unknown bb[415937] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664867]
                    b[139204]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[415917] "dead at end of block" "ref var"
                      unknown call_tmp[664872] "expr temp" "maybe param" "maybe type" "temp"
                      (664875 'move' call_tmp[664872](415919 call a[139199] ai[415935]))
                      (543329 'move' aa[415917](543328 'addr of' call_tmp[664872]))
                      (415922 'end of statement')
                      unknown call_tmp[664879] "maybe param" "maybe type" "temp"
                      (664882 'move' call_tmp[664879](415926 call eltType _mt[243] a[139199]))
                      unknown copy[415923] "dead at end of block" "no auto destroy"
                      (543331 'init var' copy[415923] bb[415937] call_tmp[664879])
                      (415930 'end of statement' ai[415935] bb[415937])
                      (415931 '=' aa[415917] copy[415923])
                      (480921 'end of statement' aa[415917] copy[415923])
                    }
                  }
                }
              }
            }
            {
              Forall {
                induction variables:
                  
                  unknown aa[140070] "index var" "insert auto destroy"
                  
                  unknown bb[140072] "index var" "insert auto destroy"
                iterated expressions:
                  a[139199]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown call_tmp[664886] "maybe param" "maybe type" "temp"
                    (664889 'move' call_tmp[664886](140053 call eltType _mt[243] a[139199]))
                    unknown copy[140057] "dead at end of block" "no auto destroy"
                    (543333 'init var' copy[140057] bb[140072] call_tmp[664886])
                    (140060 'end of statement' bb[140072])
                    (140066 '=' aa[140070] copy[140057])
                    (480925 'end of statement' aa[140070] copy[140057])
                  }
                }
              }
            }
          }
          {
            unknown call_tmp[664891] "expr temp" "maybe param" "maybe type" "temp"
            (664894 'move' call_tmp[664891](140087 call == kind[139210] assign[137997]))
            unknown call_tmp[664896] "expr temp" "maybe param" "maybe type" "temp"
            (664899 'move' call_tmp[664896](140114 call _cond_test call_tmp[664891]))
            if call_tmp[664896]
            {
              Forall {
                induction variables:
                  
                  unknown aa[140107] "index var" "insert auto destroy"
                  
                  unknown bb[140109] "index var" "insert auto destroy"
                iterated expressions:
                  a[139199]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    (140101 call = aa[140107] bb[140109])
                    (480928 'end of statement' aa[140107] bb[140109])
                  }
                }
              }
            }
          }
        }
      }
    }
    (519249 return _void[55])
  }
  {
    (139217 call <=(139214 'lifetime_of' a[139199])(139216 'lifetime_of' b[139204]))
  }
  function chpl__transferArray[140150](ref arg a[140147]:_array[133594](?), param arg b[140152]:_any[178](?), param arg kind[140158] :
  assign[137997] =
  assign[137997]) : _unknown[51] "inline" "find user line" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown aa[140169] "index var" "insert auto destroy"
      iterated expressions:
        a[140147]
      shadow variables:
      other variables
        forall body
      {
        (140165 call = aa[140169] b[140152])
        (480931 'end of statement' aa[140169])
      }
    }
    (519251 return _void[55])
  }
  function =[140184](ref arg a[140181]:_array[133594](?), arg b[140187]:_domain[125908](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664903] "expr temp" "maybe param" "maybe type" "temp"
    (664906 'move' call_tmp[664903](140191 call rank _mt[243] a[140181]))
    unknown call_tmp[664910] "expr temp" "maybe param" "maybe type" "temp"
    (664913 'move' call_tmp[664910](140195 call rank _mt[243] b[140187]))
    unknown call_tmp[664915] "expr temp" "maybe param" "maybe type" "temp"
    (664918 'move' call_tmp[664915](140198 call != call_tmp[664903] call_tmp[664910]))
    unknown call_tmp[664920] "expr temp" "maybe param" "maybe type" "temp"
    (664923 'move' call_tmp[664920](140205 call _cond_test call_tmp[664915]))
    if call_tmp[664920]
    {
      (140203 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[426911] "maybe param" "temp"
    (426922 'move' tmp[426911](140214 call isAssociativeDom b[140187]))
    unknown call_tmp[664925] "expr temp" "maybe param" "maybe type" "temp"
    (664928 'move' call_tmp[664925](426924 call _cond_invalid tmp[426911]))
    if call_tmp[664925]
    {
      (426927 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568176] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568177] "maybe param" "temp"
    unknown call_tmp[664930] "expr temp" "maybe param" "maybe type" "temp"
    (664933 'move' call_tmp[664930](426912 call isTrue tmp[426911]))
    (568182 'move' tmp[568177](568180 call _cond_test call_tmp[664930]))
    if tmp[568177]
    {
      unknown tmp[568184] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[664935] "expr temp" "maybe param" "maybe type" "temp"
      (664938 'move' call_tmp[664935](140218 call isRectangularArr a[140181]))
      (568186 'move' tmp[568184](426915 call isTrue call_tmp[664935]))
      (568191 'move' tmp[568176](568188 '_paramFoldLogical' tmp[568177] tmp[568184]))
    }
    {
      (568196 'move' tmp[568176](568193 '_paramFoldLogical' tmp[568177] 0))
    }
    unknown call_tmp[664940] "expr temp" "maybe param" "maybe type" "temp"
    (664943 'move' call_tmp[664940](140242 call _cond_test tmp[568176]))
    if call_tmp[664940]
    {
      (140240 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    (140251 call chpl__transferArray a[140181] b[140187])
    (519253 return _void[55])
  }
  function =[140263](arg a[140260]:_array[133594](?), arg b[140269]:range[64319](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664947] "expr temp" "maybe param" "maybe type" "temp"
    (664950 'move' call_tmp[664947](140273 call rank _mt[243] a[140260]))
    unknown call_tmp[664952] "expr temp" "maybe param" "maybe type" "temp"
    (664955 'move' call_tmp[664952](140277 call == call_tmp[664947] 1))
    unknown call_tmp[664957] "expr temp" "maybe param" "maybe type" "temp"
    (664960 'move' call_tmp[664957](140306 call _cond_test call_tmp[664952]))
    if call_tmp[664957]
    {
      (140283 call chpl__transferArray a[140260] b[140269])
    }
    {
      (140304 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (519255 return _void[55])
  }
  function =[140323](ref arg a[140320]:_array[133594](?), arg b[140325]:_any[178](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    (140331 call chpl__transferArray a[140320] b[140325])
    (519257 return _void[55])
  }
  function helpInitArrFromTuple[140340](ref arg j[140338]:_any[178](?), param arg rank[140343]:int(64)[13], ref arg a[140349]:_array[133594](?), arg b[140353]:_tuple[56202](?), param arg kind[140357]:_tElt[137999]) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[664964] "expr temp" "maybe param" "maybe type" "temp"
    (664967 'move' call_tmp[664964](140367 call _dom _mt[243] a[140349]))
    unknown idxType[140386] "dead at end of block" "insert auto destroy" "type variable"(140370 call idxType _mt[243] call_tmp[664964])
    unknown call_tmp[664973] "expr temp" "maybe param" "maybe type" "temp"
    (664976 'move' call_tmp[664973](543338 call _dom _mt[243] a[140349]))
    (543342 'move' idxType[140386](543336 call idxType _mt[243] call_tmp[664973]))
    unknown call_tmp[664982] "expr temp" "maybe param" "maybe type" "temp"
    (664985 'move' call_tmp[664982](140375 call _dom _mt[243] a[140349]))
    unknown call_tmp[664989] "expr temp" "maybe param" "maybe type" "temp"
    (664992 'move' call_tmp[664989](140378 call intIdxType _mt[243] call_tmp[664982]))
    unknown strType[140383] "dead at end of block" "insert auto destroy" "type variable"(140382 call chpl__signedType call_tmp[664989])
    unknown call_tmp[664996] "expr temp" "maybe param" "maybe type" "temp"
    (664999 'move' call_tmp[664996](543349 call _dom _mt[243] a[140349]))
    unknown call_tmp[665003] "expr temp" "maybe param" "maybe type" "temp"
    (665006 'move' call_tmp[665003](543347 call intIdxType _mt[243] call_tmp[664996]))
    (543353 'move' strType[140383](543345 call chpl__signedType call_tmp[665003]))
    unknown call_tmp[665010] "expr temp" "maybe param" "maybe type" "temp"
    (665013 'move' call_tmp[665010](140391 call _dom _mt[243] a[140349]))
    unknown call_tmp[665019] "expr temp" "maybe param" "maybe type" "temp"
    (665022 'move' call_tmp[665019](140398 call rank _mt[243] a[140349]))
    unknown call_tmp[665024] "expr temp" "maybe param" "maybe type" "temp"
    (665027 'move' call_tmp[665024](140402 call - call_tmp[665019] rank[140343]))
    unknown call_tmp[665029] "expr temp" "maybe param" "maybe type" "temp"
    (665032 'move' call_tmp[665029](140405 call(140394 call (partial) dim _mt[243] call_tmp[665010]) call_tmp[665024]))
    unknown call_tmp[665036] "maybe param" "maybe type" "temp"
    (665039 'move' call_tmp[665036](140406 call stride _mt[243] call_tmp[665029]))
    const stride[140409] "dead at end of block" "const" "insert auto destroy"
    (543355 'init var' stride[140409] call_tmp[665036])
    unknown call_tmp[665043] "expr temp" "maybe param" "maybe type" "temp"
    (665046 'move' call_tmp[665043](140413 call _dom _mt[243] a[140349]))
    unknown call_tmp[665052] "expr temp" "maybe param" "maybe type" "temp"
    (665055 'move' call_tmp[665052](140420 call rank _mt[243] a[140349]))
    unknown call_tmp[665057] "expr temp" "maybe param" "maybe type" "temp"
    (665060 'move' call_tmp[665057](140424 call - call_tmp[665052] rank[140343]))
    unknown call_tmp[665062] "expr temp" "maybe param" "maybe type" "temp"
    (665065 'move' call_tmp[665062](140427 call(140416 call (partial) dim _mt[243] call_tmp[665043]) call_tmp[665057]))
    unknown call_tmp[665069] "maybe param" "maybe type" "temp"
    (665072 'move' call_tmp[665069](140428 call firstAsInt _mt[243] call_tmp[665062]))
    const start[140431] "dead at end of block" "const" "insert auto destroy"
    (543357 'init var' start[140431] call_tmp[665069])
    (140434 'end of statement')
    unknown call_tmp[665074] "expr temp" "maybe param" "maybe type" "temp"
    (665077 'move' call_tmp[665074](140437 call == rank[140343] 1))
    unknown call_tmp[665079] "expr temp" "maybe param" "maybe type" "temp"
    (665082 'move' call_tmp[665079](140729 call _cond_test call_tmp[665074]))
    if call_tmp[665079]
    {
      {
        unknown i[140594] "dead at end of block" "insert auto destroy"
        (543359 'init var' i[140594] 0)
        (480940 'end of statement')
        unknown tmp[140595] "maybe param" "temp"
        unknown call_tmp[665086] "expr temp" "maybe param" "maybe type" "temp"
        (665089 'move' call_tmp[665086](140441 call size _mt[243] b[140353]))
        unknown call_tmp[665091] "expr temp" "maybe param" "maybe type" "temp"
        (665094 'move' call_tmp[665091](140445 call - call_tmp[665086] 1))
        (140607 'move' tmp[140595](140605 call chpl_compute_low_param_loop_bound 0 call_tmp[665091]))
        unknown tmp[140596] "maybe param" "temp"
        unknown call_tmp[665098] "expr temp" "maybe param" "maybe type" "temp"
        (665101 'move' call_tmp[665098](140614 call size _mt[243] b[140353]))
        unknown call_tmp[665103] "expr temp" "maybe param" "maybe type" "temp"
        (665106 'move' call_tmp[665103](140612 call - call_tmp[665098] 1))
        (140620 'move' tmp[140596](140618 call chpl_compute_high_param_loop_bound 0 call_tmp[665103]))
        unknown tmp[140597] "maybe param" "temp"
        (140623 'move' tmp[140597] 1)
        ParamForLoop[140625]
        { i[140594] tmp[140595] tmp[140596] tmp[140597]
          {
            unknown call_tmp[665110] "expr temp" "maybe param" "maybe type" "temp"
            (665113 'move' call_tmp[665110](140451 call rank _mt[243] a[140349]))
            unknown call_tmp[665115] "expr temp" "maybe param" "maybe type" "temp"
            (665118 'move' call_tmp[665115](140455 call - call_tmp[665110] rank[140343]))
            unknown call_tmp[665120] "expr temp" "maybe param" "maybe type" "temp"
            (665123 'move' call_tmp[665120](140458 call j[140338] call_tmp[665115]))
            unknown call_tmp[665125] "expr temp" "maybe param" "maybe type" "temp"
            (665128 'move' call_tmp[665125](140464 call _cast strType[140383] start[140431]))
            unknown call_tmp[665130] "expr temp" "maybe param" "maybe type" "temp"
            (665133 'move' call_tmp[665130](140468 call * i[140594] stride[140409]))
            unknown call_tmp[665135] "expr temp" "maybe param" "maybe type" "temp"
            (665138 'move' call_tmp[665135](140470 call + call_tmp[665125] call_tmp[665130]))
            unknown call_tmp[665140] "expr temp" "maybe param" "maybe type" "temp"
            (665143 'move' call_tmp[665140](140472 call chpl__intToIdx idxType[140386] call_tmp[665135]))
            (140473 call = call_tmp[665120] call_tmp[665140])
            (480941 'end of statement' idxType[140386] strType[140383] start[140431] i[140594] stride[140409])
            unknown dst[140481] "dead at end of block" "ref var"
            unknown call_tmp[665145] "expr temp" "maybe param" "maybe type" "temp"
            (665148 'move' call_tmp[665145](140480 call a[140349] j[140338]))
            (543362 'move' dst[140481](543361 'addr of' call_tmp[665145]))
            (140484 'end of statement')
            const src[140489] "dead at end of block" "const" "ref var"
            unknown call_tmp[665150] "expr temp" "maybe param" "maybe type" "temp"
            (665153 'move' call_tmp[665150](140488 call b[140353] i[140594]))
            (543365 'move' src[140489](543364 'addr of' call_tmp[665150]))
            (140492 'end of statement' i[140594])
            unknown call_tmp[665155] "expr temp" "maybe param" "maybe type" "temp"
            (665158 'move' call_tmp[665155](140498 call == kind[140357] move[137993]))
            unknown call_tmp[665160] "expr temp" "maybe param" "maybe type" "temp"
            (665163 'move' call_tmp[665160](140589 call _cond_test call_tmp[665155]))
            if call_tmp[665160]
            {
              unknown call_tmp[665165] "expr temp" "maybe param" "maybe type" "temp"
              (665168 'move' call_tmp[665165](140503 call isArray dst[140481]))
              unknown call_tmp[665170] "expr temp" "maybe param" "maybe type" "temp"
              (665173 'move' call_tmp[665170](140539 call _cond_test call_tmp[665165]))
              if call_tmp[665170]
              {
                unknown call_tmp[665177] "expr temp" "maybe param" "maybe type" "temp"
                (665180 'move' call_tmp[665177](140506 call eltType _mt[243] a[140349]))
                unknown call_tmp[665182] "maybe param" "maybe type" "temp"
                (665185 'move' call_tmp[665182](140511 call chpl__coerceMove call_tmp[665177] src[140489]))
                unknown newArr[140512] "dead at end of block" "no auto destroy" "no copy"
                (543367 'init var' newArr[140512] call_tmp[665182])
                (140515 'end of statement' src[140489])
                (140521 '=' dst[140481] newArr[140512])
                (480949 'end of statement' dst[140481] newArr[140512])
              }
              {
                (140527 '=' dst[140481] src[140489])
                (480952 'end of statement' dst[140481] src[140489])
                unknown call_tmp[665189] "expr temp" "maybe param" "maybe type" "temp"
                (665192 'move' call_tmp[665189](140532 call eltType _mt[243] a[140349]))
                (140537 call fixRuntimeType call_tmp[665189] dst[140481])
                (480955 'end of statement' dst[140481])
              }
            }
            {
              unknown call_tmp[665194] "expr temp" "maybe param" "maybe type" "temp"
              (665197 'move' call_tmp[665194](140549 call == kind[140357] initCopy[137995]))
              unknown call_tmp[665199] "expr temp" "maybe param" "maybe type" "temp"
              (665202 'move' call_tmp[665199](140584 call _cond_test call_tmp[665194]))
              if call_tmp[665199]
              {
                unknown call_tmp[665206] "maybe param" "maybe type" "temp"
                (665209 'move' call_tmp[665206](140552 call eltType _mt[243] a[140349]))
                unknown copy[140556] "dead at end of block" "no auto destroy"
                (543369 'init var' copy[140556] src[140489] call_tmp[665206])
                (140559 'end of statement' src[140489])
                (140565 '=' dst[140481] copy[140556])
                (480958 'end of statement' dst[140481] copy[140556])
              }
              {
                unknown call_tmp[665211] "expr temp" "maybe param" "maybe type" "temp"
                (665214 'move' call_tmp[665211](140572 call == kind[140357] assign[137997]))
                unknown call_tmp[665216] "expr temp" "maybe param" "maybe type" "temp"
                (665219 'move' call_tmp[665216](140580 call _cond_test call_tmp[665211]))
                if call_tmp[665216]
                {
                  (140576 call = dst[140481] src[140489])
                  (480961 'end of statement' dst[140481] src[140489])
                }
              }
            }
          }
        }
        label _unused_continueLabel[140599]
        label _breakLabel[140598]
      }
    }
    {
      {
        unknown i[140688] "dead at end of block" "insert auto destroy"
        (543371 'init var' i[140688] 0)
        (480964 'end of statement')
        unknown tmp[140689] "maybe param" "temp"
        unknown call_tmp[665223] "expr temp" "maybe param" "maybe type" "temp"
        (665226 'move' call_tmp[665223](140637 call size _mt[243] b[140353]))
        unknown call_tmp[665228] "expr temp" "maybe param" "maybe type" "temp"
        (665231 'move' call_tmp[665228](140641 call - call_tmp[665223] 1))
        (140701 'move' tmp[140689](140699 call chpl_compute_low_param_loop_bound 0 call_tmp[665228]))
        unknown tmp[140690] "maybe param" "temp"
        unknown call_tmp[665235] "expr temp" "maybe param" "maybe type" "temp"
        (665238 'move' call_tmp[665235](140708 call size _mt[243] b[140353]))
        unknown call_tmp[665240] "expr temp" "maybe param" "maybe type" "temp"
        (665243 'move' call_tmp[665240](140706 call - call_tmp[665235] 1))
        (140714 'move' tmp[140690](140712 call chpl_compute_high_param_loop_bound 0 call_tmp[665240]))
        unknown tmp[140691] "maybe param" "temp"
        (140717 'move' tmp[140691] 1)
        ParamForLoop[140719]
        { i[140688] tmp[140689] tmp[140690] tmp[140691]
          {
            unknown call_tmp[665247] "expr temp" "maybe param" "maybe type" "temp"
            (665250 'move' call_tmp[665247](140647 call rank _mt[243] a[140349]))
            unknown call_tmp[665252] "expr temp" "maybe param" "maybe type" "temp"
            (665255 'move' call_tmp[665252](140651 call - call_tmp[665247] rank[140343]))
            unknown call_tmp[665257] "expr temp" "maybe param" "maybe type" "temp"
            (665260 'move' call_tmp[665257](140654 call j[140338] call_tmp[665252]))
            unknown call_tmp[665262] "expr temp" "maybe param" "maybe type" "temp"
            (665265 'move' call_tmp[665262](140660 call _cast strType[140383] start[140431]))
            unknown call_tmp[665267] "expr temp" "maybe param" "maybe type" "temp"
            (665270 'move' call_tmp[665267](140664 call * i[140688] stride[140409]))
            unknown call_tmp[665272] "expr temp" "maybe param" "maybe type" "temp"
            (665275 'move' call_tmp[665272](140666 call + call_tmp[665262] call_tmp[665267]))
            unknown call_tmp[665277] "expr temp" "maybe param" "maybe type" "temp"
            (665280 'move' call_tmp[665277](140668 call chpl__intToIdx idxType[140386] call_tmp[665272]))
            (140669 call = call_tmp[665257] call_tmp[665277])
            (480965 'end of statement' idxType[140386] strType[140383] start[140431] i[140688] stride[140409])
            unknown call_tmp[665282] "expr temp" "maybe param" "maybe type" "temp"
            (665285 'move' call_tmp[665282](140678 call - rank[140343] 1))
            unknown call_tmp[665287] "expr temp" "maybe param" "maybe type" "temp"
            (665290 'move' call_tmp[665287](140684 call b[140353] i[140688]))
            (140686 call helpInitArrFromTuple j[140338] call_tmp[665282] a[140349] call_tmp[665287] kind[140357])
            (480971 'end of statement' i[140688])
          }
        }
        label _unused_continueLabel[140693]
        label _breakLabel[140692]
      }
    }
    (519259 return _void[55])
  }
  {
    (140364 call <(140361 'lifetime_of' a[140349])(140363 'lifetime_of' b[140353]))
  }
  function initArrFromTuple[140744](ref arg a[140741]:_array[133594](?), arg b[140747]:_tuple[56202](?), param arg kind[140751]:_tElt[137999]) : _unknown[51] "private" "no return value for void"
  {
    unknown j[140767] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665294] "expr temp" "maybe param" "maybe type" "temp"
    (665297 'move' call_tmp[665294](140755 call rank _mt[243] a[140741]))
    unknown call_tmp[665301] "expr temp" "maybe param" "maybe type" "temp"
    (665304 'move' call_tmp[665301](140759 call _dom _mt[243] a[140741]))
    unknown call_tmp[665308] "expr temp" "maybe param" "maybe type" "temp"
    (665311 'move' call_tmp[665308](140762 call idxType _mt[243] call_tmp[665301]))
    unknown call_tmp[665313] "expr temp" "maybe param" "maybe type" "temp"
    (665316 'move' call_tmp[665313](140765 call * call_tmp[665294] call_tmp[665308]))
    (543373 'default init var' j[140767] call_tmp[665313])
    (140770 'end of statement')
    unknown call_tmp[665320] "expr temp" "maybe param" "maybe type" "temp"
    (665323 'move' call_tmp[665320](140776 call rank _mt[243] a[140741]))
    (140782 call helpInitArrFromTuple j[140767] call_tmp[665320] a[140741] b[140747] kind[140751])
    (480973 'end of statement' j[140767])
    (519261 return _void[55])
  }
  function =[140794](ref arg a[140791]:_array[133594](?), arg b[140797]:_tuple[56202](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (140812 call initArrFromTuple a[140791] b[140797] assign[137997])
    (519263 return _void[55])
  }
  where {
    (140803 call isRectangularArr a[140791])
  }
  function _desync[140824](arg t[140821]:_syncvar[84947](?)) type : _unknown[51]
  {
    unknown ret[519267] "RVV" "temp" "type variable"
    unknown x[140827] "dead at end of block" "insert auto destroy"
    (543375 'default init var' x[140827] t[140821])
    (140830 'end of statement')
    unknown call_tmp[665327] "expr temp" "maybe param" "maybe type" "temp"
    (665330 'move' call_tmp[665327](140833 call valType _mt[243] x[140827]))
    (519272 'move' ret[519267](519271 'deref' call_tmp[665327]))
    gotoReturn _end__desync[519265] _end__desync[519265]
    (480976 'end of statement' x[140827])
    label _end__desync[519265]
    (519269 return ret[519267])
  }
  function _desync[140846](arg t[140843]:_singlevar[87256](?)) type : _unknown[51]
  {
    unknown ret[519278] "RVV" "temp" "type variable"
    unknown x[140849] "dead at end of block" "insert auto destroy"
    (543377 'default init var' x[140849] t[140843])
    (140852 'end of statement')
    unknown call_tmp[665334] "expr temp" "maybe param" "maybe type" "temp"
    (665337 'move' call_tmp[665334](140855 call valType _mt[243] x[140849]))
    (519283 'move' ret[519278](519282 'deref' call_tmp[665334]))
    gotoReturn _end__desync[519276] _end__desync[519276]
    (480978 'end of statement' x[140849])
    label _end__desync[519276]
    (519280 return ret[519278])
  }
  function _desync[140866](arg t[140864]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[519289] "RVV" "temp" "type variable"
    (519294 'move' ret[519289](519293 'deref' t[140864]))
    (519291 return ret[519289])
  }
  function desyncEltType[140880](arg t[140877]:_array[133594](?)) type : _unknown[51] "private"
  {
    unknown ret[519298] "RVV" "temp" "type variable"
    unknown eltType[140886] "dead at end of block" "insert auto destroy" "type variable"(140885 call chpl__eltTypeFromArrayRuntimeType t[140877])
    (543382 'move' eltType[140886](543380 call chpl__eltTypeFromArrayRuntimeType t[140877]))
    (480981 'end of statement')
    unknown call_tmp[665339] "expr temp" "maybe param" "maybe type" "temp"
    (665342 'move' call_tmp[665339](140893 call _desync eltType[140886]))
    (519303 'move' ret[519298](519302 'deref' call_tmp[665339]))
    gotoReturn _end_desyncEltType[519296] _end_desyncEltType[519296]
    (480982 'end of statement' eltType[140886])
    label _end_desyncEltType[519296]
    (519300 return ret[519298])
  }
  function =[140906](ref arg a[140903]:_array[133594](?), arg b[140915] :
  unknown call_tmp[665346] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140926] "index var" "insert auto destroy"
      iterated expressions:
        a[140903]
      shadow variables:
      other variables
        forall body
      {
        (140922 call = e[140926] b[140915])
        (480984 'end of statement' e[140926])
      }
    }
    (519307 return _void[55])
  }
  function +=[140941](arg a[140938]:_array[133594](?), arg b[140950] :
  unknown call_tmp[665353] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140961] "index var" "insert auto destroy"
      iterated expressions:
        a[140938]
      shadow variables:
      other variables
        forall body
      {
        (140957 call += e[140961] b[140950])
        (480986 'end of statement' e[140961])
      }
    }
    (519309 return _void[55])
  }
  function -=[140976](arg a[140973]:_array[133594](?), arg b[140985] :
  unknown call_tmp[665360] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140996] "index var" "insert auto destroy"
      iterated expressions:
        a[140973]
      shadow variables:
      other variables
        forall body
      {
        (140992 call -= e[140996] b[140985])
        (480988 'end of statement' e[140996])
      }
    }
    (519311 return _void[55])
  }
  function *=[141011](arg a[141008]:_array[133594](?), arg b[141020] :
  unknown call_tmp[665367] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141031] "index var" "insert auto destroy"
      iterated expressions:
        a[141008]
      shadow variables:
      other variables
        forall body
      {
        (141027 call *= e[141031] b[141020])
        (480990 'end of statement' e[141031])
      }
    }
    (519313 return _void[55])
  }
  function /=[141046](arg a[141043]:_array[133594](?), arg b[141055] :
  unknown call_tmp[665374] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141066] "index var" "insert auto destroy"
      iterated expressions:
        a[141043]
      shadow variables:
      other variables
        forall body
      {
        (141062 call /= e[141066] b[141055])
        (480992 'end of statement' e[141066])
      }
    }
    (519315 return _void[55])
  }
  function %=[141081](arg a[141078]:_array[133594](?), arg b[141090] :
  unknown call_tmp[665381] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141101] "index var" "insert auto destroy"
      iterated expressions:
        a[141078]
      shadow variables:
      other variables
        forall body
      {
        (141097 call %= e[141101] b[141090])
        (480994 'end of statement' e[141101])
      }
    }
    (519317 return _void[55])
  }
  function **=[141116](arg a[141113]:_array[133594](?), arg b[141125] :
  unknown call_tmp[665388] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141136] "index var" "insert auto destroy"
      iterated expressions:
        a[141113]
      shadow variables:
      other variables
        forall body
      {
        (141132 call **= e[141136] b[141125])
        (480996 'end of statement' e[141136])
      }
    }
    (519319 return _void[55])
  }
  function &=[141151](arg a[141148]:_array[133594](?), arg b[141160] :
  unknown call_tmp[665395] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141171] "index var" "insert auto destroy"
      iterated expressions:
        a[141148]
      shadow variables:
      other variables
        forall body
      {
        (141167 call &= e[141171] b[141160])
        (480998 'end of statement' e[141171])
      }
    }
    (519321 return _void[55])
  }
  function |=[141186](arg a[141183]:_array[133594](?), arg b[141195] :
  unknown call_tmp[665402] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141206] "index var" "insert auto destroy"
      iterated expressions:
        a[141183]
      shadow variables:
      other variables
        forall body
      {
        (141202 call |= e[141206] b[141195])
        (481000 'end of statement' e[141206])
      }
    }
    (519323 return _void[55])
  }
  function ^=[141221](arg a[141218]:_array[133594](?), arg b[141230] :
  unknown call_tmp[665409] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141241] "index var" "insert auto destroy"
      iterated expressions:
        a[141218]
      shadow variables:
      other variables
        forall body
      {
        (141237 call ^= e[141241] b[141230])
        (481002 'end of statement' e[141241])
      }
    }
    (519325 return _void[55])
  }
  function >>=[141256](arg a[141253]:_array[133594](?), arg b[141265] :
  unknown call_tmp[665416] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141276] "index var" "insert auto destroy"
      iterated expressions:
        a[141253]
      shadow variables:
      other variables
        forall body
      {
        (141272 call >>= e[141276] b[141265])
        (481004 'end of statement' e[141276])
      }
    }
    (519327 return _void[55])
  }
  function <<=[141291](arg a[141288]:_array[133594](?), arg b[141300] :
  unknown call_tmp[665423] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141311] "index var" "insert auto destroy"
      iterated expressions:
        a[141288]
      shadow variables:
      other variables
        forall body
      {
        (141307 call <<= e[141311] b[141300])
        (481006 'end of statement' e[141311])
      }
    }
    (519329 return _void[55])
  }
  function chpl_by[141324](arg a[141321]:_domain[125908](?), arg b[141326]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519333] "RVV" "temp"
    unknown r[141349] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665430] "expr temp" "maybe param" "maybe type" "temp"
    (665433 'move' call_tmp[665430](141329 call rank _mt[243] a[141321]))
    unknown call_tmp[665437] "expr temp" "maybe param" "maybe type" "temp"
    (665440 'move' call_tmp[665437](141334 call _value _mt[243] a[141321]))
    unknown call_tmp[665444] "expr temp" "maybe param" "maybe type" "temp"
    (665447 'move' call_tmp[665444](141337 call idxType _mt[243] call_tmp[665437]))
    unknown call_tmp[665449] "expr temp" "maybe param" "maybe type" "temp"
    (665452 'move' call_tmp[665449](141346 call range[64319](?) call_tmp[665444] bounded[64208] 1))
    unknown call_tmp[665454] "expr temp" "maybe param" "maybe type" "temp"
    (665457 'move' call_tmp[665454](141347 call * call_tmp[665430] call_tmp[665449]))
    (543384 'default init var' r[141349] call_tmp[665454])
    (141352 'end of statement')
    unknown call_tmp[665461] "expr temp" "maybe param" "maybe type" "temp"
    (665464 'move' call_tmp[665461](141356 call rank _mt[243] a[141321]))
    unknown call_tmp[665466] "maybe param" "maybe type" "temp"
    (665469 'move' call_tmp[665466](141363 call _makeIndexTuple call_tmp[665461] b[141326](expand = 1)))
    unknown t[141364] "dead at end of block" "insert auto destroy"
    (543386 'init var' t[141364] call_tmp[665466])
    (141367 'end of statement')
    {
      unknown i[141398] "dead at end of block" "insert auto destroy"
      (543388 'init var' i[141398] 0)
      (481008 'end of statement')
      unknown tmp[141399] "maybe param" "temp"
      unknown call_tmp[665473] "expr temp" "maybe param" "maybe type" "temp"
      (665476 'move' call_tmp[665473](141370 call rank _mt[243] a[141321]))
      unknown call_tmp[665478] "expr temp" "maybe param" "maybe type" "temp"
      (665481 'move' call_tmp[665478](141374 call - call_tmp[665473] 1))
      (141411 'move' tmp[141399](141409 call chpl_compute_low_param_loop_bound 0 call_tmp[665478]))
      unknown tmp[141400] "maybe param" "temp"
      unknown call_tmp[665485] "expr temp" "maybe param" "maybe type" "temp"
      (665488 'move' call_tmp[665485](141418 call rank _mt[243] a[141321]))
      unknown call_tmp[665490] "expr temp" "maybe param" "maybe type" "temp"
      (665493 'move' call_tmp[665490](141416 call - call_tmp[665485] 1))
      (141424 'move' tmp[141400](141422 call chpl_compute_high_param_loop_bound 0 call_tmp[665490]))
      unknown tmp[141401] "maybe param" "temp"
      (141427 'move' tmp[141401] 1)
      ParamForLoop[141429]
      { i[141398] tmp[141399] tmp[141400] tmp[141401]
        unknown call_tmp[665495] "expr temp" "maybe param" "maybe type" "temp"
        (665498 'move' call_tmp[665495](141381 call r[141349] i[141398]))
        unknown call_tmp[665502] "expr temp" "maybe param" "maybe type" "temp"
        (665505 'move' call_tmp[665502](141388 call(141383 call (partial) dim _mt[243] a[141321]) i[141398]))
        unknown call_tmp[665507] "expr temp" "maybe param" "maybe type" "temp"
        (665510 'move' call_tmp[665507](141392 call t[141364] i[141398]))
        unknown call_tmp[665512] "expr temp" "maybe param" "maybe type" "temp"
        (665515 'move' call_tmp[665512](141393 call chpl_by call_tmp[665502] call_tmp[665507]))
        (141395 call = call_tmp[665495] call_tmp[665512])
        (481009 'end of statement' r[141349] i[141398] i[141398] t[141364] i[141398])
      }
      label _unused_continueLabel[141403]
      label _breakLabel[141402]
    }
    unknown call_tmp[665519] "expr temp" "maybe param" "maybe type" "temp"
    (665522 'move' call_tmp[665519](141441 call dist _mt[243] a[141321]))
    unknown call_tmp[665526] "expr temp" "maybe param" "maybe type" "temp"
    (665529 'move' call_tmp[665526](141446 call rank _mt[243] a[141321]))
    unknown call_tmp[665533] "expr temp" "maybe param" "maybe type" "temp"
    (665536 'move' call_tmp[665533](141450 call _value _mt[243] a[141321]))
    unknown call_tmp[665540] "expr temp" "maybe param" "maybe type" "temp"
    (665543 'move' call_tmp[665540](141453 call idxType _mt[243] call_tmp[665533]))
    unknown call_tmp[665545] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665548 'move' call_tmp[665545](748076 'new' _domain[125908](?) call_tmp[665519] call_tmp[665526] call_tmp[665540] 1 r[141349]))
    (519338 'move' ret[519333](519337 'deref' call_tmp[665545]))
    gotoReturn _end_chpl_by[519331] _end_chpl_by[519331]
    (481015 'end of statement' r[141349])
    label _end_chpl_by[519331]
    (519335 return ret[519333])
  }
  function chpl_align[141469](arg a[141466]:_domain[125908](?), arg b[141471]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519344] "RVV" "temp"
    unknown r[141497] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665552] "expr temp" "maybe param" "maybe type" "temp"
    (665555 'move' call_tmp[665552](141474 call rank _mt[243] a[141466]))
    unknown call_tmp[665559] "expr temp" "maybe param" "maybe type" "temp"
    (665562 'move' call_tmp[665559](141479 call _value _mt[243] a[141466]))
    unknown call_tmp[665566] "expr temp" "maybe param" "maybe type" "temp"
    (665569 'move' call_tmp[665566](141482 call idxType _mt[243] call_tmp[665559]))
    unknown call_tmp[665573] "expr temp" "maybe param" "maybe type" "temp"
    (665576 'move' call_tmp[665573](141491 call stridable _mt[243] a[141466]))
    unknown call_tmp[665578] "expr temp" "maybe param" "maybe type" "temp"
    (665581 'move' call_tmp[665578](141494 call range[64319](?) call_tmp[665566] bounded[64208] call_tmp[665573]))
    unknown call_tmp[665583] "expr temp" "maybe param" "maybe type" "temp"
    (665586 'move' call_tmp[665583](141495 call * call_tmp[665552] call_tmp[665578]))
    (543390 'default init var' r[141497] call_tmp[665583])
    (141500 'end of statement')
    unknown call_tmp[665590] "expr temp" "maybe param" "maybe type" "temp"
    (665593 'move' call_tmp[665590](141504 call rank _mt[243] a[141466]))
    unknown call_tmp[665595] "maybe param" "maybe type" "temp"
    (665598 'move' call_tmp[665595](141511 call _makeIndexTuple call_tmp[665590] b[141471](expand = 1)))
    unknown t[141512] "dead at end of block" "insert auto destroy"
    (543392 'init var' t[141512] call_tmp[665595])
    (141515 'end of statement')
    {
      unknown i[141546] "dead at end of block" "insert auto destroy"
      (543394 'init var' i[141546] 0)
      (481017 'end of statement')
      unknown tmp[141547] "maybe param" "temp"
      unknown call_tmp[665602] "expr temp" "maybe param" "maybe type" "temp"
      (665605 'move' call_tmp[665602](141518 call rank _mt[243] a[141466]))
      unknown call_tmp[665607] "expr temp" "maybe param" "maybe type" "temp"
      (665610 'move' call_tmp[665607](141522 call - call_tmp[665602] 1))
      (141559 'move' tmp[141547](141557 call chpl_compute_low_param_loop_bound 0 call_tmp[665607]))
      unknown tmp[141548] "maybe param" "temp"
      unknown call_tmp[665614] "expr temp" "maybe param" "maybe type" "temp"
      (665617 'move' call_tmp[665614](141566 call rank _mt[243] a[141466]))
      unknown call_tmp[665619] "expr temp" "maybe param" "maybe type" "temp"
      (665622 'move' call_tmp[665619](141564 call - call_tmp[665614] 1))
      (141572 'move' tmp[141548](141570 call chpl_compute_high_param_loop_bound 0 call_tmp[665619]))
      unknown tmp[141549] "maybe param" "temp"
      (141575 'move' tmp[141549] 1)
      ParamForLoop[141577]
      { i[141546] tmp[141547] tmp[141548] tmp[141549]
        unknown call_tmp[665624] "expr temp" "maybe param" "maybe type" "temp"
        (665627 'move' call_tmp[665624](141529 call r[141497] i[141546]))
        unknown call_tmp[665631] "expr temp" "maybe param" "maybe type" "temp"
        (665634 'move' call_tmp[665631](141536 call(141531 call (partial) dim _mt[243] a[141466]) i[141546]))
        unknown call_tmp[665636] "expr temp" "maybe param" "maybe type" "temp"
        (665639 'move' call_tmp[665636](141540 call t[141512] i[141546]))
        unknown call_tmp[665641] "expr temp" "maybe param" "maybe type" "temp"
        (665644 'move' call_tmp[665641](141541 call chpl_align call_tmp[665631] call_tmp[665636]))
        (141543 call = call_tmp[665624] call_tmp[665641])
        (481018 'end of statement' r[141497] i[141546] i[141546] t[141512] i[141546])
      }
      label _unused_continueLabel[141551]
      label _breakLabel[141550]
    }
    unknown call_tmp[665648] "expr temp" "maybe param" "maybe type" "temp"
    (665651 'move' call_tmp[665648](141589 call dist _mt[243] a[141466]))
    unknown call_tmp[665655] "expr temp" "maybe param" "maybe type" "temp"
    (665658 'move' call_tmp[665655](141594 call rank _mt[243] a[141466]))
    unknown call_tmp[665662] "expr temp" "maybe param" "maybe type" "temp"
    (665665 'move' call_tmp[665662](141598 call _value _mt[243] a[141466]))
    unknown call_tmp[665669] "expr temp" "maybe param" "maybe type" "temp"
    (665672 'move' call_tmp[665669](141601 call idxType _mt[243] call_tmp[665662]))
    unknown call_tmp[665676] "expr temp" "maybe param" "maybe type" "temp"
    (665679 'move' call_tmp[665676](141605 call stridable _mt[243] a[141466]))
    unknown call_tmp[665681] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665684 'move' call_tmp[665681](748077 'new' _domain[125908](?) call_tmp[665648] call_tmp[665655] call_tmp[665669] call_tmp[665676] r[141497]))
    (519349 'move' ret[519344](519348 'deref' call_tmp[665681]))
    gotoReturn _end_chpl_align[519342] _end_chpl_align[519342]
    (481024 'end of statement' r[141497])
    label _end_chpl_align[519342]
    (519346 return ret[519344])
  }
  function <=>[141624](arg x[141621]:_array[133594](?), arg y[141631]:_array[133594](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown hasSwapped[141636] "dead at end of block" "insert auto destroy"
    (543396 'init var' hasSwapped[141636] 0 bool[10])
    (141639 'end of statement')
    unknown tmp[426932] "maybe param" "temp"
    unknown tmp[426953] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492397] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665688] "expr temp" "maybe param" "maybe type" "temp"
      (665691 'move' call_tmp[665688](141642 call _value _mt[243] x[141621]))
      (492401 'move' call_type_tmp[492397](141645 'typeof' call_tmp[665688]))
    }
    { scopeless type
      unknown call_type_tmp[492403] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665695] "expr temp" "maybe param" "maybe type" "temp"
      (665698 'move' call_tmp[665695](141647 call _value _mt[243] y[141631]))
      (492407 'move' call_type_tmp[492403](141650 'typeof' call_tmp[665695]))
    }
    (426964 'move' tmp[426953](141651 call == call_type_tmp[492397] call_type_tmp[492403]))
    unknown call_tmp[665700] "expr temp" "maybe param" "maybe type" "temp"
    (665703 'move' call_tmp[665700](426966 call _cond_invalid tmp[426953]))
    if call_tmp[665700]
    {
      (426969 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568203] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568204] "maybe param" "temp"
    unknown call_tmp[665705] "expr temp" "maybe param" "maybe type" "temp"
    (665708 'move' call_tmp[665705](426954 call isTrue tmp[426953]))
    (568209 'move' tmp[568204](568207 call _cond_test call_tmp[665705]))
    if tmp[568204]
    {
      unknown tmp[568211] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665712] "expr temp" "maybe param" "maybe type" "temp"
      (665715 'move' call_tmp[665712](141655 call _value _mt[243] x[141621]))
      unknown call_tmp[665717] "expr temp" "maybe param" "maybe type" "temp"
      (665720 'move' call_tmp[665717](141659 call chpl__isArrayView call_tmp[665712]))
      unknown call_tmp[665722] "expr temp" "maybe param" "maybe type" "temp"
      (665725 'move' call_tmp[665722](141660 call ! call_tmp[665717]))
      (568213 'move' tmp[568211](426957 call isTrue call_tmp[665722]))
      (568218 'move' tmp[568203](568215 '_paramFoldLogical' tmp[568204] tmp[568211]))
    }
    {
      (568223 'move' tmp[568203](568220 '_paramFoldLogical' tmp[568204] 0))
    }
    (426943 'move' tmp[426932] tmp[568203])
    unknown call_tmp[665727] "expr temp" "maybe param" "maybe type" "temp"
    (665730 'move' call_tmp[665727](426945 call _cond_invalid tmp[426932]))
    if call_tmp[665727]
    {
      (426948 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568230] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568231] "maybe param" "temp"
    unknown call_tmp[665732] "expr temp" "maybe param" "maybe type" "temp"
    (665735 'move' call_tmp[665732](426933 call isTrue tmp[426932]))
    (568236 'move' tmp[568231](568234 call _cond_test call_tmp[665732]))
    if tmp[568231]
    {
      unknown tmp[568238] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665739] "expr temp" "maybe param" "maybe type" "temp"
      (665742 'move' call_tmp[665739](141669 call _value _mt[243] x[141621]))
      unknown call_tmp[665746] "expr temp" "maybe param" "maybe type" "temp"
      (665749 'move' call_tmp[665746](141691 call _value _mt[243] y[141631]))
      unknown call_tmp[665751] "expr temp" "maybe param" "maybe type" "temp"
      (665754 'move' call_tmp[665751](141694 call canResolveMethod module=[255] Reflection[224970] call_tmp[665739] "doiSwap" call_tmp[665746]))
      (568240 'move' tmp[568238](426936 call isTrue call_tmp[665751]))
      (568245 'move' tmp[568230](568242 '_paramFoldLogical' tmp[568231] tmp[568238]))
    }
    {
      (568250 'move' tmp[568230](568247 '_paramFoldLogical' tmp[568231] 0))
    }
    unknown call_tmp[665756] "expr temp" "maybe param" "maybe type" "temp"
    (665759 'move' call_tmp[665756](141726 call _cond_test tmp[568230]))
    if call_tmp[665756]
    {
      unknown call_tmp[665763] "expr temp" "maybe param" "maybe type" "temp"
      (665766 'move' call_tmp[665763](461684 call _dom _mt[243] x[141621]))
      unknown call_tmp[665770] "expr temp" "maybe param" "maybe type" "temp"
      (665773 'move' call_tmp[665770](461690 call _dom _mt[243] y[141631]))
      unknown call_tmp[665775] "expr temp" "maybe param" "maybe type" "temp"
      (665778 'move' call_tmp[665775](141699 call == call_tmp[665763] call_tmp[665770]))
      unknown call_tmp[665780] "expr temp" "maybe param" "maybe type" "temp"
      (665783 'move' call_tmp[665780](141721 call _cond_test call_tmp[665775]))
      if call_tmp[665780]
      {
        unknown call_tmp[665787] "expr temp" "maybe param" "maybe type" "temp"
        (665790 'move' call_tmp[665787](141702 call _value _mt[243] x[141621]))
        unknown call_tmp[665796] "expr temp" "maybe param" "maybe type" "temp"
        (665799 'move' call_tmp[665796](141709 call _value _mt[243] y[141631]))
        (141713 call(141705 call (partial) doiSwap _mt[243] call_tmp[665787]) call_tmp[665796])
        (481028 'end of statement')
        (141718 call = hasSwapped[141636] 1)
        (481029 'end of statement' hasSwapped[141636])
      }
    }
    unknown call_tmp[665801] "expr temp" "maybe param" "maybe type" "temp"
    (665804 'move' call_tmp[665801](141731 call ! hasSwapped[141636]))
    unknown call_tmp[665806] "expr temp" "maybe param" "maybe type" "temp"
    (665809 'move' call_tmp[665806](141755 call _cond_test call_tmp[665801]))
    if call_tmp[665806]
    {
      Forall {
        induction variables:
          
          unknown a[141748] "index var" "insert auto destroy"
          
          unknown b[141750] "index var" "insert auto destroy"
        iterated expressions:
          x[141621]
          y[141631]
        shadow variables:
        other variables
          forall body
        {
          (141744 call <=> a[141748] b[141750])
          (481031 'end of statement' a[141748] b[141750])
        }
      }
    }
    (519353 return _void[55])
    (360439 'referenced modules list' Reflection[224970])
  }
  function reshape[141769](arg A[141766]:_array[133594](?), arg D[141772]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[519357] "RVV" "temp"
    unknown call_tmp[665811] "expr temp" "maybe param" "maybe type" "temp"
    (665814 'move' call_tmp[665811](141778 call isRectangularDom D[141772]))
    unknown call_tmp[665816] "expr temp" "maybe param" "maybe type" "temp"
    (665819 'move' call_tmp[665816](141779 call ! call_tmp[665811]))
    unknown call_tmp[665821] "expr temp" "maybe param" "maybe type" "temp"
    (665824 'move' call_tmp[665821](141807 call _cond_test call_tmp[665816]))
    if call_tmp[665821]
    {
      unknown call_tmp[665826] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665829 'move' call_tmp[665826](141801 'typeof' D[141772]))
      unknown call_tmp[665831] "expr temp" "maybe param" "maybe type" "temp"
      (665834 'move' call_tmp[665831](141803 call _cast string[26] call_tmp[665826]))
      (141805 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665831])
    }
    unknown call_tmp[665838] "expr temp" "maybe param" "maybe type" "temp"
    (665841 'move' call_tmp[665838](141814 call size _mt[243] A[141766]))
    unknown call_tmp[665845] "expr temp" "maybe param" "maybe type" "temp"
    (665848 'move' call_tmp[665845](141818 call size _mt[243] D[141772]))
    unknown call_tmp[665850] "expr temp" "maybe param" "maybe type" "temp"
    (665853 'move' call_tmp[665850](141821 call != call_tmp[665838] call_tmp[665845]))
    unknown call_tmp[665855] "expr temp" "maybe param" "maybe type" "temp"
    (665858 'move' call_tmp[665855](141886 call _cond_test call_tmp[665850]))
    if call_tmp[665855]
    {
      unknown call_tmp[665862] "expr temp" "maybe param" "maybe type" "temp"
      (665865 'move' call_tmp[665862](141843 call size _mt[243] A[141766]))
      unknown call_tmp[665869] "expr temp" "maybe param" "maybe type" "temp"
      (665872 'move' call_tmp[665869](141864 call size _mt[243] D[141772]))
      (141884 call halt "reshape(A,D) is invoked when A has " call_tmp[665862] " elements, but D has " call_tmp[665869] " indices")
    }
    unknown B[141918] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter6[582845](arg iterator[582847]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582908] "RVV" "temp"
      {
        unknown _indexOfInterest[582852] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582853] "expr temp" "temp"
        (582862 'move' _iterator[582853](582860 call _getIteratorZip iterator[582847]))
        Defer
        {
          {
            (582888 call _freeIterator _iterator[582853])
          }
        }
        { scopeless type
          (582867 'move' _indexOfInterest[582852](582864 call iteratorIndex _iterator[582853]))
        }
        ForLoop[582854] for-expr
        {
          unknown a[141916] "index var" "insert auto destroy" "no doc"
          (582897 'end of statement')
          unknown i[141914] "index var" "insert auto destroy" "no doc"
          (582898 'end of statement')
          (582872 call _check_tuple_var_decl _indexOfInterest[582852] 2)
          (582899 'end of statement')
          (582878 'move' i[141914](582876 call _indexOfInterest[582852] 0))
          (582900 'end of statement' i[141914])
          (582883 'move' a[141916](582881 call _indexOfInterest[582852] 1))
          (582902 'end of statement' a[141916])
          {
            {
              unknown yret[582912] "YVV" "temp"
              (582915 'move' yret[582912](582914 'deref' a[141916]))
              (582917 yield yret[582912])
              (582904 'end of statement' a[141916])
            }
          }
          label _continueLabel[582857]
          _indexOfInterest[582852]
          _iterator[582853]
        }
        label _breakLabel[582858]
      }
      (582910 return ret[582908])
    }
    function chpl__forexpr6[582829](arg iterExpr[582832]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582922] "RVV" "temp"
      unknown _iterator[582836] "expr temp" "maybe ref" "temp"
      (582838 'move' _iterator[582836] iterExpr[582832])
      unknown call_tmp[582929] "expr temp" "maybe param" "maybe type" "temp"
      (582932 'move' call_tmp[582929](582841 call chpl__loopexpr_iter6 _iterator[582836]))
      (582927 'move' ret[582922](582926 'deref' call_tmp[582929]))
      (582924 return ret[582922])
    }
    unknown call_tmp[582934] "expr temp" "maybe param" "maybe type" "temp"
    (582937 'move' call_tmp[582934](141909 call _build_tuple D[141772] A[141766]))
    unknown call_tmp[582939] "maybe param" "maybe type" "temp"
    (582942 'move' call_tmp[582939](582834 call chpl__forexpr6 call_tmp[582934]))
    (582946 'iterator record set shape' call_tmp[582939] D[141772] 1)
    unknown call_tmp[665874] "expr temp" "maybe param" "maybe type" "temp"
    (665877 'move' call_tmp[665874](141897 call chpl__ensureDomainExpr D[141772]))
    unknown call_tmp[665881] "expr temp" "maybe param" "maybe type" "temp"
    (665884 'move' call_tmp[665881](141894 call eltType _mt[243] A[141766]))
    unknown call_tmp[665886] "maybe param" "maybe type" "temp"
    (665889 'move' call_tmp[665886](141899 call chpl__buildArrayRuntimeType call_tmp[665874] call_tmp[665881]))
    (543398 'init var' B[141918] call_tmp[582939] call_tmp[665886])
    (141921 'end of statement')
    (519362 'move' ret[519357](519361 'deref' B[141918]))
    gotoReturn _end_reshape[519355] _end_reshape[519355]
    (481036 'end of statement' B[141918])
    label _end_reshape[519355]
    (519359 return ret[519357])
  }
  function reshape[141933](arg A[141930]:_iteratorRecord[205](?), arg D[141936]:_domain[125908](?)) : _unknown[51] "no doc"
  {
    unknown ret[519368] "RVV" "temp"
    unknown call_tmp[665891] "expr temp" "maybe param" "maybe type" "temp"
    (665894 'move' call_tmp[665891](141942 call isRectangularDom D[141936]))
    unknown call_tmp[665896] "expr temp" "maybe param" "maybe type" "temp"
    (665899 'move' call_tmp[665896](141943 call ! call_tmp[665891]))
    unknown call_tmp[665901] "expr temp" "maybe param" "maybe type" "temp"
    (665904 'move' call_tmp[665901](141955 call _cond_test call_tmp[665896]))
    if call_tmp[665901]
    {
      unknown call_tmp[665906] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665909 'move' call_tmp[665906](141949 'typeof' D[141936]))
      unknown call_tmp[665911] "expr temp" "maybe param" "maybe type" "temp"
      (665914 'move' call_tmp[665911](141951 call _cast string[26] call_tmp[665906]))
      (141953 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665911])
    }
    unknown B[141978] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter7[582964](arg iterator[582966]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[583027] "RVV" "temp"
      {
        unknown _indexOfInterest[582971] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582972] "expr temp" "temp"
        (582981 'move' _iterator[582972](582979 call _getIteratorZip iterator[582966]))
        Defer
        {
          {
            (583007 call _freeIterator _iterator[582972])
          }
        }
        { scopeless type
          (582986 'move' _indexOfInterest[582971](582983 call iteratorIndex _iterator[582972]))
        }
        ForLoop[582973] for-expr
        {
          unknown a[141976] "index var" "insert auto destroy" "no doc"
          (583016 'end of statement')
          unknown i[141974] "index var" "insert auto destroy" "no doc"
          (583017 'end of statement')
          (582991 call _check_tuple_var_decl _indexOfInterest[582971] 2)
          (583018 'end of statement')
          (582997 'move' i[141974](582995 call _indexOfInterest[582971] 0))
          (583019 'end of statement' i[141974])
          (583002 'move' a[141976](583000 call _indexOfInterest[582971] 1))
          (583021 'end of statement' a[141976])
          {
            {
              unknown yret[583031] "YVV" "temp"
              (583034 'move' yret[583031](583033 'deref' a[141976]))
              (583036 yield yret[583031])
              (583023 'end of statement' a[141976])
            }
          }
          label _continueLabel[582976]
          _indexOfInterest[582971]
          _iterator[582972]
        }
        label _breakLabel[582977]
      }
      (583029 return ret[583027])
    }
    function chpl__forexpr7[582948](arg iterExpr[582951]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[583041] "RVV" "temp"
      unknown _iterator[582955] "expr temp" "maybe ref" "temp"
      (582957 'move' _iterator[582955] iterExpr[582951])
      unknown call_tmp[583048] "expr temp" "maybe param" "maybe type" "temp"
      (583051 'move' call_tmp[583048](582960 call chpl__loopexpr_iter7 _iterator[582955]))
      (583046 'move' ret[583041](583045 'deref' call_tmp[583048]))
      (583043 return ret[583041])
    }
    unknown call_tmp[583053] "expr temp" "maybe param" "maybe type" "temp"
    (583056 'move' call_tmp[583053](141969 call _build_tuple D[141936] A[141930]))
    unknown call_tmp[583058] "maybe param" "maybe type" "temp"
    (583061 'move' call_tmp[583058](582953 call chpl__forexpr7 call_tmp[583053]))
    (583065 'iterator record set shape' call_tmp[583058] D[141936] 1)
    (543400 'init var' B[141978] call_tmp[583058])
    (141981 'end of statement')
    (519373 'move' ret[519368](519372 'deref' B[141978]))
    gotoReturn _end_reshape[519366] _end_reshape[519366]
    (481039 'end of statement' B[141978])
    label _end_reshape[519366]
    (519370 return ret[519368])
  }
  function linearize[141991](arg Xs[141989]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[519379] "RVV" "temp"
    {
      unknown _indexOfInterest[141998] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141999] "expr temp" "temp"
      (142008 'move' _iterator[141999](142006 call _getIterator Xs[141989]))
      Defer
      {
        {
          (142024 call _freeIterator _iterator[141999])
        }
      }
      { scopeless type
        (142013 'move' _indexOfInterest[141998](142010 call iteratorIndex _iterator[141999]))
      }
      ForLoop[142000]
      {
        unknown x[142017] "index var" "insert auto destroy"
        (481042 'end of statement')
        (142019 'move' x[142017] _indexOfInterest[141998])
        (481043 'end of statement' x[142017])
        unknown yret[519383] "YVV" "temp"
        (519386 'move' yret[519383](519385 'deref' x[142017]))
        (519388 yield yret[519383])
        (481045 'end of statement' x[142017])
        label _continueLabel[142003]
        _indexOfInterest[141998]
        _iterator[141999]
      }
      label _breakLabel[142004]
    }
    (519381 return ret[519379])
  }
  function chpl__unalias[142040](arg x[142037]:_domain[125908](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519392] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492409] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665918] "expr temp" "maybe param" "maybe type" "temp"
      (665921 'move' call_tmp[665918](142044 call _instance _mt[243] x[142037]))
      (492413 'move' call_type_tmp[492409](142047 'typeof' call_tmp[665918]))
    }
    { scopeless type
      unknown call_type_tmp[492415] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665925] "expr temp" "maybe param" "maybe type" "temp"
      (665928 'move' call_tmp[665925](142051 call _instance _mt[243] x[142037]))
      (492419 'move' call_type_tmp[492415](142054 'typeof' call_tmp[665925]))
    }
    unknown call_tmp[665930] "expr temp" "maybe param" "maybe type" "temp"
    (665933 'move' call_tmp[665930](142049 call _to_unmanaged call_type_tmp[492409]))
    unknown call_tmp[665935] "expr temp" "maybe param" "maybe type" "temp"
    (665938 'move' call_tmp[665935](142055 call != call_tmp[665930] call_type_tmp[492415]))
    unknown call_tmp[665940] "expr temp" "maybe param" "maybe type" "temp"
    (665943 'move' call_tmp[665940](142062 call _cond_test call_tmp[665935]))
    if call_tmp[665940]
    {
      (142060 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[665947] "expr temp" "maybe param" "maybe type" "temp"
    (665950 'move' call_tmp[665947](142069 call _unowned _mt[243] x[142037]))
    unknown call_tmp[665952] "expr temp" "maybe param" "maybe type" "temp"
    (665955 'move' call_tmp[665952](142090 call _cond_test call_tmp[665947]))
    if call_tmp[665952]
    {
      unknown ret[142073] "dead at end of block" "no auto destroy"
      (543402 'init var' ret[142073] x[142037])
      (142076 'end of statement')
      (519397 'move' ret[519392](519396 'deref' ret[142073]))
      gotoReturn _end_chpl__unalias[519390] _end_chpl__unalias[519390]
      (481048 'end of statement' ret[142073])
    }
    {
      unknown ret[142082] "dead at end of block" "insert auto destroy" "no copy"
      (543404 'init var' ret[142082] x[142037])
      (142085 'end of statement')
      (519402 'move' ret[519392](519401 'deref' ret[142082]))
      gotoReturn _end_chpl__unalias[519390] _end_chpl__unalias[519390]
      (481050 'end of statement' ret[142082])
    }
    label _end_chpl__unalias[519390]
    (519394 return ret[519392])
  }
  function chpl__initCopy[142104](const  ref arg rhs[142101]:_array[133594](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519408] "RVV" "temp"
    unknown call_tmp[665957] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (665960 'move' call_tmp[665957](142108 'typeof' rhs[142101]))
    unknown call_tmp[665962] "maybe param" "maybe type" "temp"
    (665965 'move' call_tmp[665962](142111 call chpl__coerceCopy call_tmp[665957] rhs[142101]))
    unknown lhs[142112] "dead at end of block" "no copy"
    (543406 'init var' lhs[142112] call_tmp[665962])
    (142115 'end of statement')
    (519413 'move' ret[519408](519412 'deref' lhs[142112]))
    gotoReturn _end_chpl__initCopy[519406] _end_chpl__initCopy[519406]
    (481052 'end of statement' lhs[142112])
    label _end_chpl__initCopy[519406]
    (519410 return ret[519408])
  }
  function chpl__autoCopy[142130](arg x[142127]:_array[133594](?)) : _unknown[51] "auto copy fn"
  {
    unknown ret[519419] "RVV" "temp"
    unknown call_tmp[665967] "maybe param" "maybe type" "temp"
    (665970 'move' call_tmp[665967](142135 call chpl__initCopy x[142127]))
    unknown b[142136] "dead at end of block" "insert auto destroy" "no copy"
    (543408 'init var' b[142136] call_tmp[665967])
    (142139 'end of statement')
    (519424 'move' ret[519419](519423 'deref' b[142136]))
    gotoReturn _end_chpl__autoCopy[519417] _end_chpl__autoCopy[519417]
    (481054 'end of statement' b[142136])
    label _end_chpl__autoCopy[519417]
    (519421 return ret[519419])
  }
  function chpl__coerceCopy[142152](arg dstType[142149]:_domain[125908](?), arg rhs[142155]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519430] "RVV" "temp"
    unknown call_tmp[665974] "expr temp" "maybe param" "maybe type" "temp"
    (665977 'move' call_tmp[665974](142159 call dist _mt[243] rhs[142155]))
    unknown call_tmp[665981] "expr temp" "maybe param" "maybe type" "temp"
    (665984 'move' call_tmp[665981](142162 call _value _mt[243] call_tmp[665974]))
    unknown call_tmp[665988] "maybe param" "maybe type" "temp"
    (665991 'move' call_tmp[665988](142171 call(142167 call (partial) dsiIsLayout _mt[243] call_tmp[665981])))
    unknown rhsIsLayout[142172] "dead at end of block" "param"
    (543410 'init var' rhsIsLayout[142172] call_tmp[665988])
    (142175 'end of statement')
    unknown lhs[142178] "dead at end of block" "insert auto destroy"
    (543412 'default init var' lhs[142178] dstType[142149])
    (142181 'end of statement')
    (748327 call chpl_statementLevelSymbol lhs[142178])
    (142186 call = lhs[142178] rhs[142155])
    (481056 'end of statement' lhs[142178])
    unknown tmp[426974] "maybe param" "temp"
    unknown call_tmp[665995] "expr temp" "maybe param" "maybe type" "temp"
    (665998 'move' call_tmp[665995](142190 call dist _mt[243] lhs[142178]))
    unknown call_tmp[666002] "expr temp" "maybe param" "maybe type" "temp"
    (666005 'move' call_tmp[666002](142193 call _value _mt[243] call_tmp[665995]))
    (426985 'move' tmp[426974](142200 call(142196 call (partial) dsiIsLayout _mt[243] call_tmp[666002])))
    unknown call_tmp[666009] "expr temp" "maybe param" "maybe type" "temp"
    (666012 'move' call_tmp[666009](426987 call _cond_invalid tmp[426974]))
    if call_tmp[666009]
    {
      (426990 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568257] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568258] "maybe param" "temp"
    unknown call_tmp[666014] "expr temp" "maybe param" "maybe type" "temp"
    (666017 'move' call_tmp[666014](426975 call isTrue tmp[426974]))
    (568263 'move' tmp[568258](568261 call _cond_test call_tmp[666014]))
    if tmp[568258]
    {
      unknown tmp[568265] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666019] "expr temp" "maybe param" "maybe type" "temp"
      (666022 'move' call_tmp[666019](142202 call ! rhsIsLayout[142172]))
      (568267 'move' tmp[568265](426978 call isTrue call_tmp[666019]))
      (568272 'move' tmp[568257](568269 '_paramFoldLogical' tmp[568258] tmp[568265]))
    }
    {
      (568277 'move' tmp[568257](568274 '_paramFoldLogical' tmp[568258] 0))
    }
    unknown call_tmp[666024] "expr temp" "maybe param" "maybe type" "temp"
    (666027 'move' call_tmp[666024](142229 call _cond_test tmp[568257]))
    if call_tmp[666024]
    {
      (142227 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519435 'move' ret[519430](519434 'deref' lhs[142178]))
    gotoReturn _end_chpl__coerceCopy[519428] _end_chpl__coerceCopy[519428]
    (481060 'end of statement' lhs[142178])
    label _end_chpl__coerceCopy[519428]
    (519432 return ret[519430])
  }
  function chpl__coerceMove[142245](arg dstType[142242]:_domain[125908](?), in arg rhs[142248]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519441] "RVV" "temp"
    unknown call_tmp[666031] "expr temp" "maybe param" "maybe type" "temp"
    (666034 'move' call_tmp[666031](142252 call dist _mt[243] rhs[142248]))
    unknown call_tmp[666038] "expr temp" "maybe param" "maybe type" "temp"
    (666041 'move' call_tmp[666038](142255 call _value _mt[243] call_tmp[666031]))
    unknown call_tmp[666045] "maybe param" "maybe type" "temp"
    (666048 'move' call_tmp[666045](142262 call(142258 call (partial) dsiIsLayout _mt[243] call_tmp[666038])))
    unknown rhsIsLayout[142263] "dead at end of block" "param"
    (543414 'init var' rhsIsLayout[142263] call_tmp[666045])
    (142266 'end of statement')
    unknown lhs[142269] "dead at end of block" "insert auto destroy"
    (543416 'default init var' lhs[142269] dstType[142242])
    (142272 'end of statement')
    (748329 call chpl_statementLevelSymbol lhs[142269])
    (142277 call = lhs[142269] rhs[142248])
    (481062 'end of statement' lhs[142269])
    unknown tmp[426995] "maybe param" "temp"
    unknown call_tmp[666052] "expr temp" "maybe param" "maybe type" "temp"
    (666055 'move' call_tmp[666052](142281 call dist _mt[243] lhs[142269]))
    unknown call_tmp[666059] "expr temp" "maybe param" "maybe type" "temp"
    (666062 'move' call_tmp[666059](142284 call _value _mt[243] call_tmp[666052]))
    (427006 'move' tmp[426995](142291 call(142287 call (partial) dsiIsLayout _mt[243] call_tmp[666059])))
    unknown call_tmp[666066] "expr temp" "maybe param" "maybe type" "temp"
    (666069 'move' call_tmp[666066](427008 call _cond_invalid tmp[426995]))
    if call_tmp[666066]
    {
      (427011 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568284] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568285] "maybe param" "temp"
    unknown call_tmp[666071] "expr temp" "maybe param" "maybe type" "temp"
    (666074 'move' call_tmp[666071](426996 call isTrue tmp[426995]))
    (568290 'move' tmp[568285](568288 call _cond_test call_tmp[666071]))
    if tmp[568285]
    {
      unknown tmp[568292] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666076] "expr temp" "maybe param" "maybe type" "temp"
      (666079 'move' call_tmp[666076](142293 call ! rhsIsLayout[142263]))
      (568294 'move' tmp[568292](426999 call isTrue call_tmp[666076]))
      (568299 'move' tmp[568284](568296 '_paramFoldLogical' tmp[568285] tmp[568292]))
    }
    {
      (568304 'move' tmp[568284](568301 '_paramFoldLogical' tmp[568285] 0))
    }
    unknown call_tmp[666081] "expr temp" "maybe param" "maybe type" "temp"
    (666084 'move' call_tmp[666081](142302 call _cond_test tmp[568284]))
    if call_tmp[666081]
    {
      (142300 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519446 'move' ret[519441](519445 'deref' lhs[142269]))
    gotoReturn _end_chpl__coerceMove[519439] _end_chpl__coerceMove[519439]
    (481066 'end of statement' lhs[142269])
    label _end_chpl__coerceMove[519439]
    (519443 return ret[519441])
  }
  function chpl__coerceCopy[142318](arg dstType[142315]:_domain[125908](?), arg rhs[142321]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519452] "RVV" "temp"
    unknown lhs[142325] "dead at end of block" "insert auto destroy"
    (543418 'default init var' lhs[142325] dstType[142315])
    (142328 'end of statement')
    (748331 call chpl_statementLevelSymbol lhs[142325])
    unknown call_tmp[666086] "expr temp" "maybe param" "maybe type" "temp"
    (666089 'move' call_tmp[666086](142336 call chpl__isLegalRectTupDomAssign lhs[142325] rhs[142321]))
    unknown call_tmp[666091] "expr temp" "maybe param" "maybe type" "temp"
    (666094 'move' call_tmp[666091](142353 call _cond_test call_tmp[666086]))
    if call_tmp[666091]
    {
      unknown call_tmp[666096] "expr temp" "maybe param" "maybe type" "temp"
      (666099 'move' call_tmp[666096](142341 call chpl__buildDomainExpr(142339 'expand_tuple' rhs[142321])))
      (142343 call = lhs[142325] call_tmp[666096])
      (481068 'end of statement' lhs[142325])
    }
    {
      (142349 call = lhs[142325] rhs[142321])
      (481070 'end of statement' lhs[142325])
    }
    (519457 'move' ret[519452](519456 'deref' lhs[142325]))
    gotoReturn _end_chpl__coerceCopy[519450] _end_chpl__coerceCopy[519450]
    (481072 'end of statement' lhs[142325])
    label _end_chpl__coerceCopy[519450]
    (519454 return ret[519452])
  }
  function chpl__coerceMove[142368](arg dstType[142365]:_domain[125908](?), in arg rhs[142371]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519463] "RVV" "temp"
    unknown lhs[142375] "dead at end of block" "insert auto destroy"
    (543420 'default init var' lhs[142375] dstType[142365])
    (142378 'end of statement')
    (748333 call chpl_statementLevelSymbol lhs[142375])
    unknown call_tmp[666101] "expr temp" "maybe param" "maybe type" "temp"
    (666104 'move' call_tmp[666101](142386 call chpl__isLegalRectTupDomAssign lhs[142375] rhs[142371]))
    unknown call_tmp[666106] "expr temp" "maybe param" "maybe type" "temp"
    (666109 'move' call_tmp[666106](142403 call _cond_test call_tmp[666101]))
    if call_tmp[666106]
    {
      unknown call_tmp[666111] "expr temp" "maybe param" "maybe type" "temp"
      (666114 'move' call_tmp[666111](142391 call chpl__buildDomainExpr(142389 'expand_tuple' rhs[142371])))
      (142393 call = lhs[142375] call_tmp[666111])
      (481074 'end of statement' lhs[142375])
    }
    {
      (142399 call = lhs[142375] rhs[142371])
      (481076 'end of statement' lhs[142375])
    }
    (519468 'move' ret[519463](519467 'deref' lhs[142375]))
    gotoReturn _end_chpl__coerceMove[519461] _end_chpl__coerceMove[519461]
    (481078 'end of statement' lhs[142375])
    label _end_chpl__coerceMove[519461]
    (519465 return ret[519463])
  }
  function chpl__coerceCopy[142418](arg dstType[142415]:_domain[125908](?), arg rhs[142424]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519474] "RVV" "temp"
    unknown lhs[142428] "dead at end of block" "insert auto destroy"
    (543422 'default init var' lhs[142428] dstType[142415])
    (142431 'end of statement')
    (748335 call chpl_statementLevelSymbol lhs[142428])
    unknown call_tmp[666116] "expr temp" "maybe param" "maybe type" "temp"
    (666119 'move' call_tmp[666116](142438 call chpl__buildDomainExpr rhs[142424]))
    (142440 call = lhs[142428] call_tmp[666116])
    (481080 'end of statement' lhs[142428])
    (519479 'move' ret[519474](519478 'deref' lhs[142428]))
    gotoReturn _end_chpl__coerceCopy[519472] _end_chpl__coerceCopy[519472]
    (481082 'end of statement' lhs[142428])
    label _end_chpl__coerceCopy[519472]
    (519476 return ret[519474])
  }
  function chpl__coerceMove[142454](arg dstType[142451]:_domain[125908](?), in arg rhs[142460]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519485] "RVV" "temp"
    unknown lhs[142464] "dead at end of block" "insert auto destroy"
    (543424 'default init var' lhs[142464] dstType[142451])
    (142467 'end of statement')
    (748337 call chpl_statementLevelSymbol lhs[142464])
    unknown call_tmp[666121] "expr temp" "maybe param" "maybe type" "temp"
    (666124 'move' call_tmp[666121](142474 call chpl__buildDomainExpr rhs[142460]))
    (142476 call = lhs[142464] call_tmp[666121])
    (481084 'end of statement' lhs[142464])
    (519490 'move' ret[519485](519489 'deref' lhs[142464]))
    gotoReturn _end_chpl__coerceMove[519483] _end_chpl__coerceMove[519483]
    (481086 'end of statement' lhs[142464])
    label _end_chpl__coerceMove[519483]
    (519487 return ret[519485])
  }
  function chpl__coerceCopy[142490](arg dstType[142487]:_domain[125908](?), arg rhs[142493]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519496] "RVV" "temp"
    unknown lhs[142497] "dead at end of block" "insert auto destroy"
    (543426 'default init var' lhs[142497] dstType[142487])
    (142500 'end of statement')
    unknown call_tmp[666126] "expr temp" "maybe param" "maybe type" "temp"
    (666129 'move' call_tmp[666126](142505 call isRectangularDom lhs[142497]))
    unknown call_tmp[666131] "expr temp" "maybe param" "maybe type" "temp"
    (666134 'move' call_tmp[666131](142511 call _cond_test call_tmp[666126]))
    if call_tmp[666131]
    {
      (142509 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142521 call(142517 call (partial) clear _mt[243] lhs[142497]))
    (481089 'end of statement' lhs[142497])
    {
      unknown _indexOfInterest[142534] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142535] "expr temp" "temp"
      (142544 'move' _iterator[142535](142542 call _getIterator rhs[142493]))
      Defer
      {
        {
          (142560 call _freeIterator _iterator[142535])
        }
      }
      { scopeless type
        (142549 'move' _indexOfInterest[142534](142546 call iteratorIndex _iterator[142535]))
      }
      ForLoop[142536]
      {
        unknown ind[142553] "index var" "insert auto destroy"
        (481092 'end of statement')
        (142555 'move' ind[142553] _indexOfInterest[142534])
        (481093 'end of statement' ind[142553])
        {
          (142531 call(142526 call (partial) add _mt[243] lhs[142497]) ind[142553])
          (481095 'end of statement' lhs[142497] ind[142553])
        }
        label _continueLabel[142539]
        _indexOfInterest[142534]
        _iterator[142535]
      }
      label _breakLabel[142540]
    }
    (519501 'move' ret[519496](519500 'deref' lhs[142497]))
    gotoReturn _end_chpl__coerceCopy[519494] _end_chpl__coerceCopy[519494]
    (481098 'end of statement' lhs[142497])
    label _end_chpl__coerceCopy[519494]
    (519498 return ret[519496])
  }
  function chpl__coerceMove[142578](arg dstType[142575]:_domain[125908](?), arg rhs[142581]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519507] "RVV" "temp"
    unknown lhs[142585] "dead at end of block" "insert auto destroy"
    (543428 'default init var' lhs[142585] dstType[142575])
    (142588 'end of statement')
    unknown call_tmp[666140] "expr temp" "maybe param" "maybe type" "temp"
    (666143 'move' call_tmp[666140](142593 call isRectangularDom lhs[142585]))
    unknown call_tmp[666145] "expr temp" "maybe param" "maybe type" "temp"
    (666148 'move' call_tmp[666145](142599 call _cond_test call_tmp[666140]))
    if call_tmp[666145]
    {
      (142597 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142609 call(142605 call (partial) clear _mt[243] lhs[142585]))
    (481101 'end of statement' lhs[142585])
    {
      unknown _indexOfInterest[142622] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142623] "expr temp" "temp"
      (142632 'move' _iterator[142623](142630 call _getIterator rhs[142581]))
      Defer
      {
        {
          (142648 call _freeIterator _iterator[142623])
        }
      }
      { scopeless type
        (142637 'move' _indexOfInterest[142622](142634 call iteratorIndex _iterator[142623]))
      }
      ForLoop[142624]
      {
        unknown ind[142641] "index var" "insert auto destroy"
        (481104 'end of statement')
        (142643 'move' ind[142641] _indexOfInterest[142622])
        (481105 'end of statement' ind[142641])
        {
          (142619 call(142614 call (partial) add _mt[243] lhs[142585]) ind[142641])
          (481107 'end of statement' lhs[142585] ind[142641])
        }
        label _continueLabel[142627]
        _indexOfInterest[142622]
        _iterator[142623]
      }
      label _breakLabel[142628]
    }
    (519512 'move' ret[519507](519511 'deref' lhs[142585]))
    gotoReturn _end_chpl__coerceMove[519505] _end_chpl__coerceMove[519505]
    (481110 'end of statement' lhs[142585])
    label _end_chpl__coerceMove[519505]
    (519509 return ret[519507])
  }
  function chpl__coerceCopy[142666](arg dstType[142663]:_domain[125908](?), arg rhs[142668]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519518] "RVV" "temp"
    unknown lhs[142671] "dead at end of block" "insert auto destroy"
    (543430 'default init var' lhs[142671] dstType[142663])
    (142674 'end of statement')
    unknown call_tmp[666154] "expr temp" "maybe param" "maybe type" "temp"
    (666157 'move' call_tmp[666154](142679 call isRectangularDom lhs[142671]))
    unknown call_tmp[666159] "expr temp" "maybe param" "maybe type" "temp"
    (666162 'move' call_tmp[666159](142685 call _cond_test call_tmp[666154]))
    if call_tmp[666159]
    {
      (142683 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142695 call(142691 call (partial) clear _mt[243] lhs[142671]))
    (481113 'end of statement' lhs[142671])
    {
      unknown _indexOfInterest[142708] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142709] "expr temp" "temp"
      (142718 'move' _iterator[142709](142716 call _getIterator rhs[142668]))
      Defer
      {
        {
          (142734 call _freeIterator _iterator[142709])
        }
      }
      { scopeless type
        (142723 'move' _indexOfInterest[142708](142720 call iteratorIndex _iterator[142709]))
      }
      ForLoop[142710]
      {
        unknown ind[142727] "index var" "insert auto destroy"
        (481116 'end of statement')
        (142729 'move' ind[142727] _indexOfInterest[142708])
        (481117 'end of statement' ind[142727])
        {
          (142705 call(142700 call (partial) add _mt[243] lhs[142671]) ind[142727])
          (481119 'end of statement' lhs[142671] ind[142727])
        }
        label _continueLabel[142713]
        _indexOfInterest[142708]
        _iterator[142709]
      }
      label _breakLabel[142714]
    }
    (519523 'move' ret[519518](519522 'deref' lhs[142671]))
    gotoReturn _end_chpl__coerceCopy[519516] _end_chpl__coerceCopy[519516]
    (481122 'end of statement' lhs[142671])
    label _end_chpl__coerceCopy[519516]
    (519520 return ret[519518])
  }
  function chpl__coerceMove[142752](arg dstType[142749]:_domain[125908](?), in arg rhs[142754]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519529] "RVV" "temp"
    unknown lhs[142757] "dead at end of block" "insert auto destroy"
    (543432 'default init var' lhs[142757] dstType[142749])
    (142760 'end of statement')
    unknown call_tmp[666168] "expr temp" "maybe param" "maybe type" "temp"
    (666171 'move' call_tmp[666168](142765 call isRectangularDom lhs[142757]))
    unknown call_tmp[666173] "expr temp" "maybe param" "maybe type" "temp"
    (666176 'move' call_tmp[666173](142771 call _cond_test call_tmp[666168]))
    if call_tmp[666173]
    {
      (142769 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142781 call(142777 call (partial) clear _mt[243] lhs[142757]))
    (481125 'end of statement' lhs[142757])
    {
      unknown _indexOfInterest[142794] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142795] "expr temp" "temp"
      (142804 'move' _iterator[142795](142802 call _getIterator rhs[142754]))
      Defer
      {
        {
          (142820 call _freeIterator _iterator[142795])
        }
      }
      { scopeless type
        (142809 'move' _indexOfInterest[142794](142806 call iteratorIndex _iterator[142795]))
      }
      ForLoop[142796]
      {
        unknown ind[142813] "index var" "insert auto destroy"
        (481128 'end of statement')
        (142815 'move' ind[142813] _indexOfInterest[142794])
        (481129 'end of statement' ind[142813])
        {
          (142791 call(142786 call (partial) add _mt[243] lhs[142757]) ind[142813])
          (481131 'end of statement' lhs[142757] ind[142813])
        }
        label _continueLabel[142799]
        _indexOfInterest[142794]
        _iterator[142795]
      }
      label _breakLabel[142800]
    }
    (519534 'move' ret[519529](519533 'deref' lhs[142757]))
    gotoReturn _end_chpl__coerceMove[519527] _end_chpl__coerceMove[519527]
    (481134 'end of statement' lhs[142757])
    label _end_chpl__coerceMove[519527]
    (519531 return ret[519529])
  }
  function chpl__coerceCopy[142838](arg dstType[142835]:_array[133594](?), arg rhs[142841]:_array[133594](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519540] "RVV" "temp"
    unknown eltType[142848] "dead at end of block" "insert auto destroy" "type variable"(142847 call chpl__eltTypeFromArrayRuntimeType dstType[142835])
    (543437 'move' eltType[142848](543435 call chpl__eltTypeFromArrayRuntimeType dstType[142835]))
    const dom[142856] "dead at end of block" "const" "ref var"
    unknown call_tmp[666182] "expr temp" "maybe param" "maybe type" "temp"
    (666185 'move' call_tmp[666182](142855 call chpl__domainFromArrayRuntimeType dstType[142835]))
    (543440 'move' dom[142856](543439 'addr of' call_tmp[666182]))
    (142859 'end of statement')
    unknown call_tmp[666189] "maybe param" "maybe type" "temp"
    (666192 'move' call_tmp[666189](142868 call(142861 call (partial) buildArray _mt[243] dom[142856]) eltType[142848](initElts = 0)))
    unknown lhs[142869] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543442 'init var' lhs[142869] call_tmp[666189])
    (142872 'end of statement' dom[142856] eltType[142848])
    unknown call_tmp[666196] "expr temp" "maybe param" "maybe type" "temp"
    (666199 'move' call_tmp[666196](142874 call rank _mt[243] lhs[142869]))
    unknown call_tmp[666203] "expr temp" "maybe param" "maybe type" "temp"
    (666206 'move' call_tmp[666203](142878 call rank _mt[243] rhs[142841]))
    unknown call_tmp[666208] "expr temp" "maybe param" "maybe type" "temp"
    (666211 'move' call_tmp[666208](142881 call != call_tmp[666196] call_tmp[666203]))
    unknown call_tmp[666213] "expr temp" "maybe param" "maybe type" "temp"
    (666216 'move' call_tmp[666213](142888 call _cond_test call_tmp[666208]))
    if call_tmp[666213]
    {
      (142886 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666218] "expr temp" "maybe param" "maybe type" "temp"
    (666221 'move' call_tmp[666218](142896 call isCopyableType eltType[142848]))
    unknown call_tmp[666223] "expr temp" "maybe param" "maybe type" "temp"
    (666226 'move' call_tmp[666223](142897 call ! call_tmp[666218]))
    unknown call_tmp[666228] "expr temp" "maybe param" "maybe type" "temp"
    (666231 'move' call_tmp[666228](142941 call _cond_test call_tmp[666223]))
    if call_tmp[666228]
    {
      unknown call_tmp[666233] "expr temp" "maybe param" "maybe type" "temp"
      (666236 'move' call_tmp[666233](142920 call _cast string[26] eltType[142848]))
      (142939 call compilerError "Cannot copy-initialize array because element type '" call_tmp[666233] "' cannot be copy-initialized")
      (481139 'end of statement' eltType[142848])
    }
    unknown call_tmp[666240] "expr temp" "maybe param" "maybe type" "temp"
    (666243 'move' call_tmp[666240](142947 call _value _mt[243] rhs[142841]))
    unknown call_tmp[666245] "expr temp" "maybe param" "maybe type" "temp"
    (666248 'move' call_tmp[666245](142951 call == call_tmp[666240] nil[44]))
    unknown call_tmp[666250] "expr temp" "maybe param" "maybe type" "temp"
    (666253 'move' call_tmp[666250](143015 call _cond_test call_tmp[666245]))
    if call_tmp[666250]
    {
    }
    {
      unknown call_tmp[666257] "expr temp" "maybe param" "maybe type" "temp"
      (666260 'move' call_tmp[666257](142955 call _value _mt[243] lhs[142869]))
      unknown call_tmp[666264] "expr temp" "maybe param" "maybe type" "temp"
      (666267 'move' call_tmp[666264](142959 call _value _mt[243] rhs[142841]))
      unknown call_tmp[666269] "expr temp" "maybe param" "maybe type" "temp"
      (666272 'move' call_tmp[666269](142962 call == call_tmp[666257] call_tmp[666264]))
      unknown call_tmp[666274] "expr temp" "maybe param" "maybe type" "temp"
      (666277 'move' call_tmp[666274](143010 call _cond_test call_tmp[666269]))
      if call_tmp[666274]
      {
      }
      {
        unknown tmp[427016] "maybe param" "temp"
        unknown call_tmp[666281] "expr temp" "maybe param" "maybe type" "temp"
        (666284 'move' call_tmp[666281](142966 call size _mt[243] lhs[142869]))
        (427027 'move' tmp[427016](142970 call == call_tmp[666281] 0))
        unknown call_tmp[666286] "expr temp" "maybe param" "maybe type" "temp"
        (666289 'move' call_tmp[666286](427029 call _cond_invalid tmp[427016]))
        if call_tmp[666286]
        {
          (427032 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568311] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568312] "maybe param" "temp"
        unknown call_tmp[666291] "expr temp" "maybe param" "maybe type" "temp"
        (666294 'move' call_tmp[666291](427017 call isTrue tmp[427016]))
        (568317 'move' tmp[568312](568315 call _cond_test call_tmp[666291]))
        if tmp[568312]
        {
          unknown tmp[568319] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666298] "expr temp" "maybe param" "maybe type" "temp"
          (666301 'move' call_tmp[666298](142973 call size _mt[243] rhs[142841]))
          unknown call_tmp[666303] "expr temp" "maybe param" "maybe type" "temp"
          (666306 'move' call_tmp[666303](142977 call == call_tmp[666298] 0))
          (568321 'move' tmp[568319](427020 call isTrue call_tmp[666303]))
          (568326 'move' tmp[568311](568323 '_paramFoldLogical' tmp[568312] tmp[568319]))
        }
        {
          (568331 'move' tmp[568311](568328 '_paramFoldLogical' tmp[568312] 0))
        }
        unknown call_tmp[666308] "expr temp" "maybe param" "maybe type" "temp"
        (666311 'move' call_tmp[666308](143006 call _cond_test tmp[568311]))
        if call_tmp[666308]
        {
        }
        {
          unknown call_tmp[666313] "expr temp" "maybe param" "maybe type" "temp"
          (666316 'move' call_tmp[666313](142989 call _cond_test 1))
          if call_tmp[666313]
          {
            (142987 call checkArrayShapesUponAssignment lhs[142869] rhs[142841])
            (481142 'end of statement' lhs[142869])
          }
          (143004 call chpl__uncheckedArrayTransfer lhs[142869] rhs[142841](kind = initCopy[137995]))
          (481144 'end of statement' lhs[142869])
        }
      }
    }
    unknown call_tmp[666320] "expr temp" "maybe param" "maybe type" "temp"
    (666323 'move' call_tmp[666320](143021 call _value _mt[243] lhs[142869]))
    (143030 call(143026 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666320]))
    (481146 'end of statement' lhs[142869])
    (519545 'move' ret[519540](519544 'deref' lhs[142869]))
    gotoReturn _end_chpl__coerceCopy[519538] _end_chpl__coerceCopy[519538]
    (481148 'end of statement' lhs[142869])
    label _end_chpl__coerceCopy[519538]
    (519542 return ret[519540])
  }
  function chpl__coerceMove[143043](arg dstType[143040]:_array[133594](?), in arg rhs[143046]:_array[133594](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519551] "RVV" "temp"
    unknown eltType[143053] "dead at end of block" "insert auto destroy" "type variable"(143052 call chpl__eltTypeFromArrayRuntimeType dstType[143040])
    (543447 'move' eltType[143053](543445 call chpl__eltTypeFromArrayRuntimeType dstType[143040]))
    const dom[143061] "dead at end of block" "const" "ref var"
    unknown call_tmp[666327] "expr temp" "maybe param" "maybe type" "temp"
    (666330 'move' call_tmp[666327](143060 call chpl__domainFromArrayRuntimeType dstType[143040]))
    (543450 'move' dom[143061](543449 'addr of' call_tmp[666327]))
    (143064 'end of statement')
    { scopeless type
      unknown call_type_tmp[492421] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[666334] "expr temp" "maybe param" "maybe type" "temp"
      (666337 'move' call_tmp[666334](143066 call _instance _mt[243] rhs[143046]))
      (492425 'move' call_type_tmp[492421](143069 'typeof' call_tmp[666334]))
    }
    unknown call_tmp[666339] "expr temp" "maybe param" "maybe type" "temp"
    (666342 'move' call_tmp[666339](143073 call chpl__instanceTypeFromArrayRuntimeType dstType[143040]))
    unknown call_tmp[666344] "maybe param" "maybe type" "temp"
    (666347 'move' call_tmp[666344](143074 call != call_type_tmp[492421] call_tmp[666339]))
    unknown typeMismatch[143076] "dead at end of block" "param"
    (543452 'init var' typeMismatch[143076] call_tmp[666344])
    (143079 'end of statement')
    unknown call_tmp[666349] "maybe param" "maybe type" "temp"
    (666352 'move' call_tmp[666349](143081 call ! typeMismatch[143076]))
    unknown moveElts[143083] "dead at end of block" "param"
    (543454 'init var' moveElts[143083] call_tmp[666349])
    (143086 'end of statement')
    unknown tmp[427037] "maybe param" "temp"
    (427048 'move' tmp[427037] moveElts[143083])
    unknown call_tmp[666354] "expr temp" "maybe param" "maybe type" "temp"
    (666357 'move' call_tmp[666354](427050 call _cond_invalid tmp[427037]))
    if call_tmp[666354]
    {
      (427053 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568338] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568339] "maybe param" "temp"
    unknown call_tmp[666359] "expr temp" "maybe param" "maybe type" "temp"
    (666362 'move' call_tmp[666359](427038 call isTrue tmp[427037]))
    (568344 'move' tmp[568339](568342 call _cond_test call_tmp[666359]))
    if tmp[568339]
    {
      unknown tmp[568346] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666366] "expr temp" "maybe param" "maybe type" "temp"
      (666369 'move' call_tmp[666366](143089 call _instance _mt[243] dom[143061]))
      unknown call_tmp[666373] "expr temp" "maybe param" "maybe type" "temp"
      (666376 'move' call_tmp[666373](143093 call _dom _mt[243] rhs[143046]))
      unknown call_tmp[666380] "expr temp" "maybe param" "maybe type" "temp"
      (666383 'move' call_tmp[666380](143096 call _instance _mt[243] call_tmp[666373]))
      unknown call_tmp[666385] "expr temp" "maybe param" "maybe type" "temp"
      (666388 'move' call_tmp[666385](143099 call == call_tmp[666366] call_tmp[666380]))
      (568348 'move' tmp[568346](427041 call isTrue call_tmp[666385]))
      (568353 'move' tmp[568338](568350 '_paramFoldLogical' tmp[568339] tmp[568346]))
    }
    {
      (568358 'move' tmp[568338](568355 '_paramFoldLogical' tmp[568339] 0))
    }
    unknown call_tmp[666390] "expr temp" "maybe param" "maybe type" "temp"
    (666393 'move' call_tmp[666390](143107 call _cond_test tmp[568338]))
    if call_tmp[666390]
    {
      (519556 'move' ret[519551](519555 'deref' rhs[143046]))
      gotoReturn _end_chpl__coerceMove[519549] _end_chpl__coerceMove[519549]
    }
    unknown call_tmp[666397] "maybe param" "maybe type" "temp"
    (666400 'move' call_tmp[666397](143119 call(143112 call (partial) buildArray _mt[243] dom[143061]) eltType[143053](initElts = 0)))
    unknown lhs[143120] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543456 'init var' lhs[143120] call_tmp[666397])
    (143123 'end of statement' dom[143061] eltType[143053])
    unknown call_tmp[666404] "expr temp" "maybe param" "maybe type" "temp"
    (666407 'move' call_tmp[666404](143125 call rank _mt[243] lhs[143120]))
    unknown call_tmp[666411] "expr temp" "maybe param" "maybe type" "temp"
    (666414 'move' call_tmp[666411](143129 call rank _mt[243] rhs[143046]))
    unknown call_tmp[666416] "expr temp" "maybe param" "maybe type" "temp"
    (666419 'move' call_tmp[666416](143132 call != call_tmp[666404] call_tmp[666411]))
    unknown call_tmp[666421] "expr temp" "maybe param" "maybe type" "temp"
    (666424 'move' call_tmp[666421](143139 call _cond_test call_tmp[666416]))
    if call_tmp[666421]
    {
      (143137 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666428] "expr temp" "maybe param" "maybe type" "temp"
    (666431 'move' call_tmp[666428](143145 call _value _mt[243] rhs[143046]))
    unknown call_tmp[666433] "expr temp" "maybe param" "maybe type" "temp"
    (666436 'move' call_tmp[666433](143149 call == call_tmp[666428] nil[44]))
    unknown call_tmp[666438] "expr temp" "maybe param" "maybe type" "temp"
    (666441 'move' call_tmp[666438](143226 call _cond_test call_tmp[666433]))
    if call_tmp[666438]
    {
    }
    {
      unknown call_tmp[666445] "expr temp" "maybe param" "maybe type" "temp"
      (666448 'move' call_tmp[666445](143153 call _value _mt[243] lhs[143120]))
      unknown call_tmp[666452] "expr temp" "maybe param" "maybe type" "temp"
      (666455 'move' call_tmp[666452](143157 call _value _mt[243] rhs[143046]))
      unknown call_tmp[666457] "expr temp" "maybe param" "maybe type" "temp"
      (666460 'move' call_tmp[666457](143160 call == call_tmp[666445] call_tmp[666452]))
      unknown call_tmp[666462] "expr temp" "maybe param" "maybe type" "temp"
      (666465 'move' call_tmp[666462](143221 call _cond_test call_tmp[666457]))
      if call_tmp[666462]
      {
      }
      {
        unknown tmp[427058] "maybe param" "temp"
        unknown call_tmp[666469] "expr temp" "maybe param" "maybe type" "temp"
        (666472 'move' call_tmp[666469](143164 call size _mt[243] lhs[143120]))
        (427069 'move' tmp[427058](143168 call == call_tmp[666469] 0))
        unknown call_tmp[666474] "expr temp" "maybe param" "maybe type" "temp"
        (666477 'move' call_tmp[666474](427071 call _cond_invalid tmp[427058]))
        if call_tmp[666474]
        {
          (427074 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568365] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568366] "maybe param" "temp"
        unknown call_tmp[666479] "expr temp" "maybe param" "maybe type" "temp"
        (666482 'move' call_tmp[666479](427059 call isTrue tmp[427058]))
        (568371 'move' tmp[568366](568369 call _cond_test call_tmp[666479]))
        if tmp[568366]
        {
          unknown tmp[568373] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666486] "expr temp" "maybe param" "maybe type" "temp"
          (666489 'move' call_tmp[666486](143171 call size _mt[243] rhs[143046]))
          unknown call_tmp[666491] "expr temp" "maybe param" "maybe type" "temp"
          (666494 'move' call_tmp[666491](143175 call == call_tmp[666486] 0))
          (568375 'move' tmp[568373](427062 call isTrue call_tmp[666491]))
          (568380 'move' tmp[568365](568377 '_paramFoldLogical' tmp[568366] tmp[568373]))
        }
        {
          (568385 'move' tmp[568365](568382 '_paramFoldLogical' tmp[568366] 0))
        }
        unknown call_tmp[666496] "expr temp" "maybe param" "maybe type" "temp"
        (666499 'move' call_tmp[666496](143217 call _cond_test tmp[568365]))
        if call_tmp[666496]
        {
        }
        {
          unknown call_tmp[666501] "expr temp" "maybe param" "maybe type" "temp"
          (666504 'move' call_tmp[666501](143187 call _cond_test 1))
          if call_tmp[666501]
          {
            (143185 call checkArrayShapesUponAssignment lhs[143120] rhs[143046])
            (481156 'end of statement' lhs[143120])
          }
          unknown kind[143205] "dead at end of block" "param"
          unknown tmp[568392] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568393] "maybe param" "temp"
          (568398 'move' tmp[568393](568396 call _cond_test moveElts[143083]))
          if tmp[568393]
          {
            (568403 'move' tmp[568392](568400 '_paramFoldLogical' tmp[568393] move[137993]))
          }
          {
            (568408 'move' tmp[568392](568405 '_paramFoldLogical' tmp[568393] initCopy[137995]))
          }
          (543458 'init var' kind[143205] tmp[568392])
          (143208 'end of statement')
          (143215 call chpl__uncheckedArrayTransfer lhs[143120] rhs[143046](kind = kind[143205]))
          (481158 'end of statement' lhs[143120])
        }
      }
    }
    unknown call_tmp[666508] "expr temp" "maybe param" "maybe type" "temp"
    (666511 'move' call_tmp[666508](143233 call _unowned _mt[243] rhs[143046]))
    unknown call_tmp[666515] "expr temp" "maybe param" "maybe type" "temp"
    (666518 'move' call_tmp[666515](143238 call _instance _mt[243] rhs[143046]))
    unknown call_tmp[666520] "expr temp" "maybe param" "maybe type" "temp"
    (666523 'move' call_tmp[666520](143242 call ! moveElts[143083]))
    (143245 call _do_destroy_arr call_tmp[666508] call_tmp[666515](deinitElts = call_tmp[666520]))
    (481160 'end of statement')
    unknown call_tmp[666527] "expr temp" "maybe param" "maybe type" "temp"
    (666530 'move' call_tmp[666527](143248 call _value _mt[243] lhs[143120]))
    (143255 call(143251 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666527]))
    (481161 'end of statement' lhs[143120])
    (519561 'move' ret[519551](519560 'deref' lhs[143120]))
    gotoReturn _end_chpl__coerceMove[519549] _end_chpl__coerceMove[519549]
    (481163 'end of statement' lhs[143120])
    label _end_chpl__coerceMove[519549]
    (519553 return ret[519551])
  }
  function chpl__coerceCopy[143268](arg dstType[143265]:_array[133594](?), arg rhs[143271]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519567] "RVV" "temp"
    unknown eltType[143278] "dead at end of block" "insert auto destroy" "type variable"(143277 call chpl__eltTypeFromArrayRuntimeType dstType[143265])
    (543463 'move' eltType[143278](543461 call chpl__eltTypeFromArrayRuntimeType dstType[143265]))
    const dom[143286] "dead at end of block" "const" "ref var"
    unknown call_tmp[666534] "expr temp" "maybe param" "maybe type" "temp"
    (666537 'move' call_tmp[666534](143285 call chpl__domainFromArrayRuntimeType dstType[143265]))
    (543466 'move' dom[143286](543465 'addr of' call_tmp[666534]))
    (143289 'end of statement')
    unknown call_tmp[666541] "maybe param" "maybe type" "temp"
    (666544 'move' call_tmp[666541](143298 call(143291 call (partial) buildArray _mt[243] dom[143286]) eltType[143278](initElts = 0)))
    unknown lhs[143299] "dead at end of block" "insert auto destroy" "no copy"
    (543468 'init var' lhs[143299] call_tmp[666541])
    (143302 'end of statement' dom[143286] eltType[143278])
    unknown call_tmp[666548] "expr temp" "maybe param" "maybe type" "temp"
    (666551 'move' call_tmp[666548](143304 call rank _mt[243] lhs[143299]))
    unknown call_tmp[666555] "expr temp" "maybe param" "maybe type" "temp"
    (666558 'move' call_tmp[666555](143308 call rank _mt[243] rhs[143271]))
    unknown call_tmp[666560] "expr temp" "maybe param" "maybe type" "temp"
    (666563 'move' call_tmp[666560](143311 call != call_tmp[666548] call_tmp[666555]))
    unknown call_tmp[666565] "expr temp" "maybe param" "maybe type" "temp"
    (666568 'move' call_tmp[666565](143318 call _cond_test call_tmp[666560]))
    if call_tmp[666565]
    {
      (143316 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[427079] "maybe param" "temp"
    (427090 'move' tmp[427079](143326 call isAssociativeDom rhs[143271]))
    unknown call_tmp[666570] "expr temp" "maybe param" "maybe type" "temp"
    (666573 'move' call_tmp[666570](427092 call _cond_invalid tmp[427079]))
    if call_tmp[666570]
    {
      (427095 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568415] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568416] "maybe param" "temp"
    unknown call_tmp[666575] "expr temp" "maybe param" "maybe type" "temp"
    (666578 'move' call_tmp[666575](427080 call isTrue tmp[427079]))
    (568421 'move' tmp[568416](568419 call _cond_test call_tmp[666575]))
    if tmp[568416]
    {
      unknown tmp[568423] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666580] "expr temp" "maybe param" "maybe type" "temp"
      (666583 'move' call_tmp[666580](143330 call isRectangularArr lhs[143299]))
      (568425 'move' tmp[568423](427083 call isTrue call_tmp[666580]))
      (568430 'move' tmp[568415](568427 '_paramFoldLogical' tmp[568416] tmp[568423]))
    }
    {
      (568435 'move' tmp[568415](568432 '_paramFoldLogical' tmp[568416] 0))
    }
    unknown call_tmp[666585] "expr temp" "maybe param" "maybe type" "temp"
    (666588 'move' call_tmp[666585](143338 call _cond_test tmp[568415]))
    if call_tmp[666585]
    {
      (143336 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666590] "expr temp" "maybe param" "maybe type" "temp"
    (666593 'move' call_tmp[666590](143346 call isPODType eltType[143278]))
    unknown call_tmp[666595] "expr temp" "maybe param" "maybe type" "temp"
    (666598 'move' call_tmp[666595](143347 call ! call_tmp[666590]))
    unknown call_tmp[666600] "expr temp" "maybe param" "maybe type" "temp"
    (666603 'move' call_tmp[666600](143370 call _cond_test call_tmp[666595]))
    if call_tmp[666600]
    {
      (143368 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143384 call chpl__transferArray lhs[143299] rhs[143271](kind = initCopy[137995]))
    (481171 'end of statement' lhs[143299])
    unknown call_tmp[666607] "expr temp" "maybe param" "maybe type" "temp"
    (666610 'move' call_tmp[666607](143387 call _value _mt[243] lhs[143299]))
    (143394 call(143390 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666607]))
    (481173 'end of statement' lhs[143299])
    (519572 'move' ret[519567](519571 'deref' lhs[143299]))
    gotoReturn _end_chpl__coerceCopy[519565] _end_chpl__coerceCopy[519565]
    (481175 'end of statement' lhs[143299])
    label _end_chpl__coerceCopy[519565]
    (519569 return ret[519567])
  }
  function chpl__coerceMove[143407](arg dstType[143404]:_array[133594](?), in arg rhs[143410]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519578] "RVV" "temp"
    unknown eltType[143417] "dead at end of block" "insert auto destroy" "type variable"(143416 call chpl__eltTypeFromArrayRuntimeType dstType[143404])
    (543473 'move' eltType[143417](543471 call chpl__eltTypeFromArrayRuntimeType dstType[143404]))
    const dom[143425] "dead at end of block" "const" "ref var"
    unknown call_tmp[666614] "expr temp" "maybe param" "maybe type" "temp"
    (666617 'move' call_tmp[666614](143424 call chpl__domainFromArrayRuntimeType dstType[143404]))
    (543476 'move' dom[143425](543475 'addr of' call_tmp[666614]))
    (143428 'end of statement')
    unknown call_tmp[666621] "maybe param" "maybe type" "temp"
    (666624 'move' call_tmp[666621](143437 call(143430 call (partial) buildArray _mt[243] dom[143425]) eltType[143417](initElts = 0)))
    unknown lhs[143438] "dead at end of block" "insert auto destroy" "no copy"
    (543478 'init var' lhs[143438] call_tmp[666621])
    (143441 'end of statement' dom[143425] eltType[143417])
    unknown call_tmp[666628] "expr temp" "maybe param" "maybe type" "temp"
    (666631 'move' call_tmp[666628](143443 call rank _mt[243] lhs[143438]))
    unknown call_tmp[666635] "expr temp" "maybe param" "maybe type" "temp"
    (666638 'move' call_tmp[666635](143447 call rank _mt[243] rhs[143410]))
    unknown call_tmp[666640] "expr temp" "maybe param" "maybe type" "temp"
    (666643 'move' call_tmp[666640](143450 call != call_tmp[666628] call_tmp[666635]))
    unknown call_tmp[666645] "expr temp" "maybe param" "maybe type" "temp"
    (666648 'move' call_tmp[666645](143457 call _cond_test call_tmp[666640]))
    if call_tmp[666645]
    {
      (143455 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[427100] "maybe param" "temp"
    (427111 'move' tmp[427100](143465 call isAssociativeDom rhs[143410]))
    unknown call_tmp[666650] "expr temp" "maybe param" "maybe type" "temp"
    (666653 'move' call_tmp[666650](427113 call _cond_invalid tmp[427100]))
    if call_tmp[666650]
    {
      (427116 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568442] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568443] "maybe param" "temp"
    unknown call_tmp[666655] "expr temp" "maybe param" "maybe type" "temp"
    (666658 'move' call_tmp[666655](427101 call isTrue tmp[427100]))
    (568448 'move' tmp[568443](568446 call _cond_test call_tmp[666655]))
    if tmp[568443]
    {
      unknown tmp[568450] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666660] "expr temp" "maybe param" "maybe type" "temp"
      (666663 'move' call_tmp[666660](143469 call isRectangularArr lhs[143438]))
      (568452 'move' tmp[568450](427104 call isTrue call_tmp[666660]))
      (568457 'move' tmp[568442](568454 '_paramFoldLogical' tmp[568443] tmp[568450]))
    }
    {
      (568462 'move' tmp[568442](568459 '_paramFoldLogical' tmp[568443] 0))
    }
    unknown call_tmp[666665] "expr temp" "maybe param" "maybe type" "temp"
    (666668 'move' call_tmp[666665](143477 call _cond_test tmp[568442]))
    if call_tmp[666665]
    {
      (143475 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666670] "expr temp" "maybe param" "maybe type" "temp"
    (666673 'move' call_tmp[666670](143485 call isPODType eltType[143417]))
    unknown call_tmp[666675] "expr temp" "maybe param" "maybe type" "temp"
    (666678 'move' call_tmp[666675](143486 call ! call_tmp[666670]))
    unknown call_tmp[666680] "expr temp" "maybe param" "maybe type" "temp"
    (666683 'move' call_tmp[666680](143493 call _cond_test call_tmp[666675]))
    if call_tmp[666680]
    {
      (143491 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143507 call chpl__transferArray lhs[143438] rhs[143410](kind = initCopy[137995]))
    (481183 'end of statement' lhs[143438])
    unknown call_tmp[666687] "expr temp" "maybe param" "maybe type" "temp"
    (666690 'move' call_tmp[666687](143510 call _value _mt[243] lhs[143438]))
    (143517 call(143513 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666687]))
    (481185 'end of statement' lhs[143438])
    (519583 'move' ret[519578](519582 'deref' lhs[143438]))
    gotoReturn _end_chpl__coerceMove[519576] _end_chpl__coerceMove[519576]
    (481187 'end of statement' lhs[143438])
    label _end_chpl__coerceMove[519576]
    (519580 return ret[519578])
  }
  function chpl__coerceCopy[143530](arg dstType[143527]:_array[133594](?), arg rhs[143536]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519589] "RVV" "temp"
    unknown eltType[143543] "dead at end of block" "insert auto destroy" "type variable"(143542 call chpl__eltTypeFromArrayRuntimeType dstType[143527])
    (543483 'move' eltType[143543](543481 call chpl__eltTypeFromArrayRuntimeType dstType[143527]))
    const dom[143551] "dead at end of block" "const" "ref var"
    unknown call_tmp[666694] "expr temp" "maybe param" "maybe type" "temp"
    (666697 'move' call_tmp[666694](143550 call chpl__domainFromArrayRuntimeType dstType[143527]))
    (543486 'move' dom[143551](543485 'addr of' call_tmp[666694]))
    (143554 'end of statement')
    unknown call_tmp[666701] "maybe param" "maybe type" "temp"
    (666704 'move' call_tmp[666701](143563 call(143556 call (partial) buildArray _mt[243] dom[143551]) eltType[143543](initElts = 0)))
    unknown lhs[143564] "dead at end of block" "insert auto destroy" "no copy"
    (543488 'init var' lhs[143564] call_tmp[666701])
    (143567 'end of statement' dom[143551] eltType[143543])
    unknown call_tmp[666708] "expr temp" "maybe param" "maybe type" "temp"
    (666711 'move' call_tmp[666708](143569 call rank _mt[243] lhs[143564]))
    unknown call_tmp[666713] "expr temp" "maybe param" "maybe type" "temp"
    (666716 'move' call_tmp[666713](143573 call != call_tmp[666708] 1))
    unknown call_tmp[666718] "expr temp" "maybe param" "maybe type" "temp"
    (666721 'move' call_tmp[666718](143580 call _cond_test call_tmp[666713]))
    if call_tmp[666718]
    {
      (143578 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143594 call chpl__transferArray lhs[143564] rhs[143536](kind = initCopy[137995]))
    (481192 'end of statement' lhs[143564])
    unknown call_tmp[666725] "expr temp" "maybe param" "maybe type" "temp"
    (666728 'move' call_tmp[666725](143597 call _value _mt[243] lhs[143564]))
    (143604 call(143600 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666725]))
    (481194 'end of statement' lhs[143564])
    (519594 'move' ret[519589](519593 'deref' lhs[143564]))
    gotoReturn _end_chpl__coerceCopy[519587] _end_chpl__coerceCopy[519587]
    (481196 'end of statement' lhs[143564])
    label _end_chpl__coerceCopy[519587]
    (519591 return ret[519589])
  }
  function chpl__coerceMove[143617](arg dstType[143614]:_array[133594](?), in arg rhs[143623]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519600] "RVV" "temp"
    unknown eltType[143630] "dead at end of block" "insert auto destroy" "type variable"(143629 call chpl__eltTypeFromArrayRuntimeType dstType[143614])
    (543493 'move' eltType[143630](543491 call chpl__eltTypeFromArrayRuntimeType dstType[143614]))
    const dom[143638] "dead at end of block" "const" "ref var"
    unknown call_tmp[666732] "expr temp" "maybe param" "maybe type" "temp"
    (666735 'move' call_tmp[666732](143637 call chpl__domainFromArrayRuntimeType dstType[143614]))
    (543496 'move' dom[143638](543495 'addr of' call_tmp[666732]))
    (143641 'end of statement')
    unknown call_tmp[666739] "maybe param" "maybe type" "temp"
    (666742 'move' call_tmp[666739](143650 call(143643 call (partial) buildArray _mt[243] dom[143638]) eltType[143630](initElts = 0)))
    unknown lhs[143651] "dead at end of block" "insert auto destroy" "no copy"
    (543498 'init var' lhs[143651] call_tmp[666739])
    (143654 'end of statement' dom[143638] eltType[143630])
    unknown call_tmp[666746] "expr temp" "maybe param" "maybe type" "temp"
    (666749 'move' call_tmp[666746](143656 call rank _mt[243] lhs[143651]))
    unknown call_tmp[666751] "expr temp" "maybe param" "maybe type" "temp"
    (666754 'move' call_tmp[666751](143660 call != call_tmp[666746] 1))
    unknown call_tmp[666756] "expr temp" "maybe param" "maybe type" "temp"
    (666759 'move' call_tmp[666756](143667 call _cond_test call_tmp[666751]))
    if call_tmp[666756]
    {
      (143665 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143681 call chpl__transferArray lhs[143651] rhs[143623](kind = initCopy[137995]))
    (481201 'end of statement' lhs[143651])
    unknown call_tmp[666763] "expr temp" "maybe param" "maybe type" "temp"
    (666766 'move' call_tmp[666763](143684 call _value _mt[243] lhs[143651]))
    (143691 call(143687 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666763]))
    (481203 'end of statement' lhs[143651])
    (519605 'move' ret[519600](519604 'deref' lhs[143651]))
    gotoReturn _end_chpl__coerceMove[519598] _end_chpl__coerceMove[519598]
    (481205 'end of statement' lhs[143651])
    label _end_chpl__coerceMove[519598]
    (519602 return ret[519600])
  }
  function chpl__coerceCopy[143704](arg dstType[143701]:_array[133594](?), arg rhs[143707]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519611] "RVV" "temp"
    unknown eltType[143714] "dead at end of block" "insert auto destroy" "type variable"(143713 call chpl__eltTypeFromArrayRuntimeType dstType[143701])
    (543503 'move' eltType[143714](543501 call chpl__eltTypeFromArrayRuntimeType dstType[143701]))
    const dom[143722] "dead at end of block" "const" "ref var"
    unknown call_tmp[666770] "expr temp" "maybe param" "maybe type" "temp"
    (666773 'move' call_tmp[666770](143721 call chpl__domainFromArrayRuntimeType dstType[143701]))
    (543506 'move' dom[143722](543505 'addr of' call_tmp[666770]))
    (143725 'end of statement')
    unknown call_tmp[666777] "maybe param" "maybe type" "temp"
    (666780 'move' call_tmp[666777](143734 call(143727 call (partial) buildArray _mt[243] dom[143722]) eltType[143714](initElts = 0)))
    unknown lhs[143735] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543508 'init var' lhs[143735] call_tmp[666777])
    (143738 'end of statement' dom[143722] eltType[143714])
    unknown call_tmp[666782] "expr temp" "maybe param" "maybe type" "temp"
    (666785 'move' call_tmp[666782](143742 call isRectangularArr lhs[143735]))
    unknown call_tmp[666787] "expr temp" "maybe param" "maybe type" "temp"
    (666790 'move' call_tmp[666787](143743 call ! call_tmp[666782]))
    unknown call_tmp[666792] "expr temp" "maybe param" "maybe type" "temp"
    (666795 'move' call_tmp[666792](143766 call _cond_test call_tmp[666787]))
    if call_tmp[666792]
    {
      (143764 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143779 call initArrFromTuple lhs[143735] rhs[143707] initCopy[137995])
    (481210 'end of statement' lhs[143735])
    unknown call_tmp[666799] "expr temp" "maybe param" "maybe type" "temp"
    (666802 'move' call_tmp[666799](143782 call _value _mt[243] lhs[143735]))
    (143789 call(143785 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666799]))
    (481212 'end of statement' lhs[143735])
    (519616 'move' ret[519611](519615 'deref' lhs[143735]))
    gotoReturn _end_chpl__coerceCopy[519609] _end_chpl__coerceCopy[519609]
    (481214 'end of statement' lhs[143735])
    label _end_chpl__coerceCopy[519609]
    (519613 return ret[519611])
  }
  function chpl__coerceMove[143802](arg dstType[143799]:_array[133594](?), in arg rhs[143805]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519622] "RVV" "temp"
    unknown eltType[143812] "dead at end of block" "insert auto destroy" "type variable"(143811 call chpl__eltTypeFromArrayRuntimeType dstType[143799])
    (543513 'move' eltType[143812](543511 call chpl__eltTypeFromArrayRuntimeType dstType[143799]))
    const dom[143820] "dead at end of block" "const" "ref var"
    unknown call_tmp[666806] "expr temp" "maybe param" "maybe type" "temp"
    (666809 'move' call_tmp[666806](143819 call chpl__domainFromArrayRuntimeType dstType[143799]))
    (543516 'move' dom[143820](543515 'addr of' call_tmp[666806]))
    (143823 'end of statement')
    unknown call_tmp[666813] "maybe param" "maybe type" "temp"
    (666816 'move' call_tmp[666813](143832 call(143825 call (partial) buildArray _mt[243] dom[143820]) eltType[143812](initElts = 0)))
    unknown lhs[143833] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543518 'init var' lhs[143833] call_tmp[666813])
    (143836 'end of statement' dom[143820] eltType[143812])
    unknown call_tmp[666818] "expr temp" "maybe param" "maybe type" "temp"
    (666821 'move' call_tmp[666818](143840 call isRectangularArr lhs[143833]))
    unknown call_tmp[666823] "expr temp" "maybe param" "maybe type" "temp"
    (666826 'move' call_tmp[666823](143841 call ! call_tmp[666818]))
    unknown call_tmp[666828] "expr temp" "maybe param" "maybe type" "temp"
    (666831 'move' call_tmp[666828](143848 call _cond_test call_tmp[666823]))
    if call_tmp[666828]
    {
      (143846 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143861 call initArrFromTuple lhs[143833] rhs[143805] move[137993])
    (481219 'end of statement' lhs[143833])
    unknown call_tmp[666835] "expr temp" "maybe param" "maybe type" "temp"
    (666838 'move' call_tmp[666835](143864 call _value _mt[243] lhs[143833]))
    (143871 call(143867 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666835]))
    (481221 'end of statement' lhs[143833])
    (519627 'move' ret[519622](519626 'deref' lhs[143833]))
    gotoReturn _end_chpl__coerceMove[519620] _end_chpl__coerceMove[519620]
    (481223 'end of statement' lhs[143833])
    label _end_chpl__coerceMove[519620]
    (519624 return ret[519622])
  }
  function chpl__coerceCopy[143884](arg dstType[143881]:_array[133594](?), arg rhs[143890] :
  (143889 call desyncEltType dstType[143881])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519633] "RVV" "temp"
    unknown eltType[143897] "dead at end of block" "insert auto destroy" "type variable"(143896 call chpl__eltTypeFromArrayRuntimeType dstType[143881])
    (543523 'move' eltType[143897](543521 call chpl__eltTypeFromArrayRuntimeType dstType[143881]))
    const dom[143905] "dead at end of block" "const" "ref var"
    unknown call_tmp[666842] "expr temp" "maybe param" "maybe type" "temp"
    (666845 'move' call_tmp[666842](143904 call chpl__domainFromArrayRuntimeType dstType[143881]))
    (543526 'move' dom[143905](543525 'addr of' call_tmp[666842]))
    (143908 'end of statement')
    unknown call_tmp[666849] "maybe param" "maybe type" "temp"
    (666852 'move' call_tmp[666849](143917 call(143910 call (partial) buildArray _mt[243] dom[143905]) eltType[143897](initElts = 0)))
    unknown lhs[143918] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543528 'init var' lhs[143918] call_tmp[666849])
    (143921 'end of statement' dom[143905] eltType[143897])
    Forall {
      induction variables:
        
        unknown e[143947] "index var" "insert auto destroy"
      iterated expressions:
        lhs[143918]
      shadow variables:
        rhs[143925] 'in' intent outer var rhs[143890]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown call_tmp[666856] "maybe param" "maybe type" "temp"
        (666859 'move' call_tmp[666856](143931 call eltType _mt[243] lhs[143918]))
        unknown copy[143935] "dead at end of block" "no auto destroy"
        (543530 'init var' copy[143935] rhs[143925] call_tmp[666856])
        (143938 'end of statement' rhs[143925] lhs[143918])
        (143944 '=' e[143947] copy[143935])
        (481229 'end of statement' e[143947] copy[143935])
      }
    }
    unknown call_tmp[666863] "expr temp" "maybe param" "maybe type" "temp"
    (666866 'move' call_tmp[666863](143952 call _value _mt[243] lhs[143918]))
    (143959 call(143955 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666863]))
    (481232 'end of statement' lhs[143918])
    (519638 'move' ret[519633](519637 'deref' lhs[143918]))
    gotoReturn _end_chpl__coerceCopy[519631] _end_chpl__coerceCopy[519631]
    (481234 'end of statement' lhs[143918])
    label _end_chpl__coerceCopy[519631]
    (519635 return ret[519633])
  }
  function chpl__coerceMove[143972](arg dstType[143969]:_array[133594](?), in arg rhs[143978] :
  (143977 call desyncEltType dstType[143969])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519644] "RVV" "temp"
    unknown eltType[143985] "dead at end of block" "insert auto destroy" "type variable"(143984 call chpl__eltTypeFromArrayRuntimeType dstType[143969])
    (543535 'move' eltType[143985](543533 call chpl__eltTypeFromArrayRuntimeType dstType[143969]))
    const dom[143993] "dead at end of block" "const" "ref var"
    unknown call_tmp[666870] "expr temp" "maybe param" "maybe type" "temp"
    (666873 'move' call_tmp[666870](143992 call chpl__domainFromArrayRuntimeType dstType[143969]))
    (543538 'move' dom[143993](543537 'addr of' call_tmp[666870]))
    (143996 'end of statement')
    unknown call_tmp[666877] "maybe param" "maybe type" "temp"
    (666880 'move' call_tmp[666877](144005 call(143998 call (partial) buildArray _mt[243] dom[143993]) eltType[143985](initElts = 0)))
    unknown lhs[144006] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543540 'init var' lhs[144006] call_tmp[666877])
    (144009 'end of statement' dom[143993] eltType[143985])
    Forall {
      induction variables:
        
        unknown e[144032] "index var" "insert auto destroy"
      iterated expressions:
        lhs[144006]
      shadow variables:
        rhs[144013] 'in' intent outer var rhs[143978]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[144020] "dead at end of block" "no auto destroy"
        (543542 'init var' copy[144020] rhs[144013] eltType[143985])
        (144023 'end of statement' rhs[144013] eltType[143985])
        (144029 '=' e[144032] copy[144020])
        (481240 'end of statement' e[144032] copy[144020])
      }
    }
    unknown call_tmp[666884] "expr temp" "maybe param" "maybe type" "temp"
    (666887 'move' call_tmp[666884](144037 call _value _mt[243] lhs[144006]))
    (144044 call(144040 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666884]))
    (481243 'end of statement' lhs[144006])
    (519649 'move' ret[519644](519648 'deref' lhs[144006]))
    gotoReturn _end_chpl__coerceMove[519642] _end_chpl__coerceMove[519642]
    (481245 'end of statement' lhs[144006])
    label _end_chpl__coerceMove[519642]
    (519646 return ret[519644])
  }
  function chpl__coerceCopy[144057](arg dstType[144054]:_array[133594](?), arg rhs[144060]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519655] "RVV" "temp"
    unknown eltType[144067] "dead at end of block" "insert auto destroy" "type variable"(144066 call chpl__eltTypeFromArrayRuntimeType dstType[144054])
    (543547 'move' eltType[144067](543545 call chpl__eltTypeFromArrayRuntimeType dstType[144054]))
    const dom[144075] "dead at end of block" "const" "ref var"
    unknown call_tmp[666891] "expr temp" "maybe param" "maybe type" "temp"
    (666894 'move' call_tmp[666891](144074 call chpl__domainFromArrayRuntimeType dstType[144054]))
    (543550 'move' dom[144075](543549 'addr of' call_tmp[666891]))
    (144078 'end of statement')
    unknown call_tmp[666898] "maybe param" "maybe type" "temp"
    (666901 'move' call_tmp[666898](144087 call(144080 call (partial) buildArray _mt[243] dom[144075]) eltType[144067](initElts = 0)))
    unknown lhs[144088] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543552 'init var' lhs[144088] call_tmp[666898])
    (144091 'end of statement' dom[144075] eltType[144067])
    (144101 call chpl__transferArray lhs[144088] rhs[144060](kind = initCopy[137995]))
    (481249 'end of statement' lhs[144088])
    unknown call_tmp[666905] "expr temp" "maybe param" "maybe type" "temp"
    (666908 'move' call_tmp[666905](144104 call _value _mt[243] lhs[144088]))
    (144111 call(144107 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666905]))
    (481251 'end of statement' lhs[144088])
    (519660 'move' ret[519655](519659 'deref' lhs[144088]))
    gotoReturn _end_chpl__coerceCopy[519653] _end_chpl__coerceCopy[519653]
    (481253 'end of statement' lhs[144088])
    label _end_chpl__coerceCopy[519653]
    (519657 return ret[519655])
  }
  function chpl__coerceMove[144124](arg dstType[144121]:_array[133594](?), arg rhs[144127]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519666] "RVV" "temp"
    unknown eltType[144134] "dead at end of block" "insert auto destroy" "type variable"(144133 call chpl__eltTypeFromArrayRuntimeType dstType[144121])
    (543557 'move' eltType[144134](543555 call chpl__eltTypeFromArrayRuntimeType dstType[144121]))
    const dom[144142] "dead at end of block" "const" "ref var"
    unknown call_tmp[666912] "expr temp" "maybe param" "maybe type" "temp"
    (666915 'move' call_tmp[666912](144141 call chpl__domainFromArrayRuntimeType dstType[144121]))
    (543560 'move' dom[144142](543559 'addr of' call_tmp[666912]))
    (144145 'end of statement')
    unknown call_tmp[666919] "maybe param" "maybe type" "temp"
    (666922 'move' call_tmp[666919](144154 call(144147 call (partial) buildArray _mt[243] dom[144142]) eltType[144134](initElts = 0)))
    unknown lhs[144155] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543562 'init var' lhs[144155] call_tmp[666919])
    (144158 'end of statement' dom[144142] eltType[144134])
    (144168 call chpl__transferArray lhs[144155] rhs[144127](kind = move[137993]))
    (481257 'end of statement' lhs[144155])
    unknown call_tmp[666926] "expr temp" "maybe param" "maybe type" "temp"
    (666929 'move' call_tmp[666926](144171 call _value _mt[243] lhs[144155]))
    (144178 call(144174 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666926]))
    (481259 'end of statement' lhs[144155])
    (519671 'move' ret[519666](519670 'deref' lhs[144155]))
    gotoReturn _end_chpl__coerceMove[519664] _end_chpl__coerceMove[519664]
    (481261 'end of statement' lhs[144155])
    label _end_chpl__coerceMove[519664]
    (519668 return ret[519666])
  }
  function chpl__coerceCopy[144191](arg dstType[144188]:_array[133594](?), arg rhs[144193]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519677] "RVV" "temp"
    unknown eltType[144199] "dead at end of block" "insert auto destroy" "type variable"(144198 call chpl__eltTypeFromArrayRuntimeType dstType[144188])
    (543567 'move' eltType[144199](543565 call chpl__eltTypeFromArrayRuntimeType dstType[144188]))
    const dom[144207] "dead at end of block" "const" "ref var"
    unknown call_tmp[666933] "expr temp" "maybe param" "maybe type" "temp"
    (666936 'move' call_tmp[666933](144206 call chpl__domainFromArrayRuntimeType dstType[144188]))
    (543570 'move' dom[144207](543569 'addr of' call_tmp[666933]))
    (144210 'end of statement')
    unknown call_tmp[666940] "maybe param" "maybe type" "temp"
    (666943 'move' call_tmp[666940](144219 call(144212 call (partial) buildArray _mt[243] dom[144207]) eltType[144199](initElts = 0)))
    unknown lhs[144220] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543572 'init var' lhs[144220] call_tmp[666940])
    (144223 'end of statement' dom[144207] eltType[144199])
    (144233 call chpl__transferArray lhs[144220] rhs[144193](kind = initCopy[137995]))
    (481265 'end of statement' lhs[144220])
    unknown call_tmp[666947] "expr temp" "maybe param" "maybe type" "temp"
    (666950 'move' call_tmp[666947](144236 call _value _mt[243] lhs[144220]))
    (144243 call(144239 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666947]))
    (481267 'end of statement' lhs[144220])
    (519682 'move' ret[519677](519681 'deref' lhs[144220]))
    gotoReturn _end_chpl__coerceCopy[519675] _end_chpl__coerceCopy[519675]
    (481269 'end of statement' lhs[144220])
    label _end_chpl__coerceCopy[519675]
    (519679 return ret[519677])
  }
  function chpl__coerceMove[144256](arg dstType[144253]:_array[133594](?), in arg rhs[144258]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519688] "RVV" "temp"
    unknown eltType[144264] "dead at end of block" "insert auto destroy" "type variable"(144263 call chpl__eltTypeFromArrayRuntimeType dstType[144253])
    (543577 'move' eltType[144264](543575 call chpl__eltTypeFromArrayRuntimeType dstType[144253]))
    const dom[144272] "dead at end of block" "const" "ref var"
    unknown call_tmp[666954] "expr temp" "maybe param" "maybe type" "temp"
    (666957 'move' call_tmp[666954](144271 call chpl__domainFromArrayRuntimeType dstType[144253]))
    (543580 'move' dom[144272](543579 'addr of' call_tmp[666954]))
    (144275 'end of statement')
    unknown call_tmp[666961] "maybe param" "maybe type" "temp"
    (666964 'move' call_tmp[666961](144284 call(144277 call (partial) buildArray _mt[243] dom[144272]) eltType[144264](initElts = 0)))
    unknown lhs[144285] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543582 'init var' lhs[144285] call_tmp[666961])
    (144288 'end of statement' dom[144272] eltType[144264])
    (144298 call chpl__transferArray lhs[144285] rhs[144258](kind = initCopy[137995]))
    (481273 'end of statement' lhs[144285])
    unknown call_tmp[666968] "expr temp" "maybe param" "maybe type" "temp"
    (666971 'move' call_tmp[666968](144301 call _value _mt[243] lhs[144285]))
    (144308 call(144304 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666968]))
    (481275 'end of statement' lhs[144285])
    (519693 'move' ret[519688](519692 'deref' lhs[144285]))
    gotoReturn _end_chpl__coerceMove[519686] _end_chpl__coerceMove[519686]
    (481277 'end of statement' lhs[144285])
    label _end_chpl__coerceMove[519686]
    (519690 return ret[519688])
  }
  function chpl__unref[144323](arg x[144320]:_array[133594](?)) : _unknown[51] "inline" "no copy return" "unref fn"
  {
    unknown ret[519699] "RVV" "temp"
    unknown ret[144333] "dead at end of block" "no auto destroy"
    (543584 'init var' ret[144333] x[144320])
    (144336 'end of statement')
    (519704 'move' ret[519699](519703 'deref' ret[144333]))
    gotoReturn _end_chpl__unref[519697] _end_chpl__unref[519697]
    (481279 'end of statement' ret[144333])
    label _end_chpl__unref[519697]
    (519701 return ret[519699])
  }
  where {
    unknown call_tmp[666977] "expr temp" "maybe param" "maybe type" "temp"
    (666980 'move' call_tmp[666977](144327 call _value _mt[243] x[144320]))
    (144331 call chpl__isArrayView call_tmp[666977])
  }
  function chpl__unref[144350](arg ir[144347]:_iteratorRecord[205](?)) : _unknown[51] "no copy return" "unref fn"
  {
    unknown ret[519710] "RVV" "temp"
    unknown call_tmp[666982] "maybe param" "maybe type" "temp"
    (666985 'move' call_tmp[666982](144355 call chpl__initCopy ir[144347]))
    unknown toArray[144356] "dead at end of block" "no auto destroy" "no copy"
    (543586 'init var' toArray[144356] call_tmp[666982])
    (144359 'end of statement')
    (519715 'move' ret[519710](519714 'deref' toArray[144356]))
    gotoReturn _end_chpl__unref[519708] _end_chpl__unref[519708]
    (481281 'end of statement' toArray[144356])
    label _end_chpl__unref[519708]
    (519712 return ret[519710])
  }
  function chpl__unref[144374](arg x[144371]:_array[133594](?)) : _unknown[51] "inline" "no copy return"
  {
    unknown ret[519721] "RVV" "temp"
    unknown ret[144377] "dead at end of block" "insert auto destroy" "no copy"
    (543588 'init var' ret[144377] x[144371])
    (144380 'end of statement')
    (519726 'move' ret[519721](519725 'deref' ret[144377]))
    gotoReturn _end_chpl__unref[519719] _end_chpl__unref[519719]
    (481283 'end of statement' ret[144377])
    label _end_chpl__unref[519719]
    (519723 return ret[519721])
  }
  function chpl__unalias[144395](arg x[144392]:_array[133594](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519732] "RVV" "temp"
    unknown tmp[427121] "maybe param" "temp"
    unknown tmp[427142] "maybe param" "temp"
    unknown call_tmp[666989] "expr temp" "maybe param" "maybe type" "temp"
    (666992 'move' call_tmp[666989](144398 call _value _mt[243] x[144392]))
    (427153 'move' tmp[427142](144405 call(144401 call (partial) isSliceArrayView _mt[243] call_tmp[666989])))
    unknown call_tmp[666996] "expr temp" "maybe param" "maybe type" "temp"
    (666999 'move' call_tmp[666996](427155 call _cond_invalid tmp[427142]))
    if call_tmp[666996]
    {
      (427158 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568469] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568470] "maybe param" "temp"
    unknown call_tmp[667001] "expr temp" "maybe param" "maybe type" "temp"
    (667004 'move' call_tmp[667001](427143 call isTrue tmp[427142]))
    (568475 'move' tmp[568470](568473 call _cond_test call_tmp[667001]))
    if tmp[568470]
    {
      (568480 'move' tmp[568469](568477 '_paramFoldLogical' tmp[568470] 1))
    }
    {
      unknown tmp[568482] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[667008] "expr temp" "maybe param" "maybe type" "temp"
      (667011 'move' call_tmp[667008](144407 call _value _mt[243] x[144392]))
      unknown call_tmp[667015] "expr temp" "maybe param" "maybe type" "temp"
      (667018 'move' call_tmp[667015](144414 call(144410 call (partial) isRankChangeArrayView _mt[243] call_tmp[667008])))
      (568484 'move' tmp[568482](427147 call isTrue call_tmp[667015]))
      (568489 'move' tmp[568469](568486 '_paramFoldLogical' tmp[568470] tmp[568482]))
    }
    (427132 'move' tmp[427121] tmp[568469])
    unknown call_tmp[667020] "expr temp" "maybe param" "maybe type" "temp"
    (667023 'move' call_tmp[667020](427134 call _cond_invalid tmp[427121]))
    if call_tmp[667020]
    {
      (427137 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown isview[144428] "dead at end of block" "param"
    unknown tmp[568496] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568497] "maybe param" "temp"
    unknown call_tmp[667025] "expr temp" "maybe param" "maybe type" "temp"
    (667028 'move' call_tmp[667025](427122 call isTrue tmp[427121]))
    (568502 'move' tmp[568497](568500 call _cond_test call_tmp[667025]))
    if tmp[568497]
    {
      (568507 'move' tmp[568496](568504 '_paramFoldLogical' tmp[568497] 1))
    }
    {
      unknown tmp[568509] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[667032] "expr temp" "maybe param" "maybe type" "temp"
      (667035 'move' call_tmp[667032](144418 call _value _mt[243] x[144392]))
      unknown call_tmp[667039] "expr temp" "maybe param" "maybe type" "temp"
      (667042 'move' call_tmp[667039](144425 call(144421 call (partial) isReindexArrayView _mt[243] call_tmp[667032])))
      (568511 'move' tmp[568509](427126 call isTrue call_tmp[667039]))
      (568516 'move' tmp[568496](568513 '_paramFoldLogical' tmp[568497] tmp[568509]))
    }
    (543590 'init var' isview[144428] tmp[568496])
    (144431 'end of statement')
    unknown call_tmp[667044] "expr temp" "maybe param" "maybe type" "temp"
    (667047 'move' call_tmp[667044](144457 call _cond_test isview[144428]))
    if call_tmp[667044]
    {
      unknown ret[144435] "dead at end of block" "no auto destroy"
      (543592 'init var' ret[144435] x[144392])
      (144438 'end of statement')
      (144443 call chpl__autoDestroy x[144392])
      (481287 'end of statement')
      (519737 'move' ret[519732](519736 'deref' ret[144435]))
      gotoReturn _end_chpl__unalias[519730] _end_chpl__unalias[519730]
      (481288 'end of statement' ret[144435])
    }
    {
      unknown ret[144449] "dead at end of block" "insert auto destroy" "no copy"
      (543594 'init var' ret[144449] x[144392])
      (144452 'end of statement')
      (519742 'move' ret[519732](519741 'deref' ret[144449]))
      gotoReturn _end_chpl__unalias[519730] _end_chpl__unalias[519730]
      (481290 'end of statement' ret[144449])
    }
    label _end_chpl__unalias[519730]
    (519734 return ret[519732])
  }
  function chpl__initCopy[144469](arg ir[144466]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519748] "RVV" "temp"
    unknown call_tmp[667051] "expr temp" "maybe param" "maybe type" "temp"
    (667054 'move' call_tmp[667051](144478 call _shape_ _mt[243] ir[144466]))
    unknown call_tmp[667056] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (667059 'move' call_tmp[667056](748078 'new' _domain[125908](?) call_tmp[667051]))
    unknown shape[144483] "dead at end of block"
    (543596 'init var' shape[144483] call_tmp[667056])
    (144486 'end of statement')
    unknown call_tmp[667063] "expr temp" "maybe param" "maybe type" "temp"
    (667066 'move' call_tmp[667063](144489 call _unowned _mt[243] shape[144483]))
    (144493 call = call_tmp[667063] 1)
    (481292 'end of statement' shape[144483])
    unknown call_tmp[667068] "expr temp" "maybe param" "maybe type" "temp"
    (667071 'move' call_tmp[667068](144500 call chpl__initCopy_shapeHelp shape[144483] ir[144466]))
    (519753 'move' ret[519748](519752 'deref' call_tmp[667068]))
    gotoReturn _end_chpl__initCopy[519746] _end_chpl__initCopy[519746]
    (481294 'end of statement' shape[144483])
    label _end_chpl__initCopy[519746]
    (519750 return ret[519748])
  }
  where {
    (144474 call chpl_iteratorHasDomainShape ir[144466])
  }
  function chpl__initCopy[144512](arg ir[144509]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519759] "RVV" "temp"
    unknown call_tmp[667075] "expr temp" "maybe param" "maybe type" "temp"
    (667078 'move' call_tmp[667075](144527 call _shape_ _mt[243] ir[144509]))
    unknown call_tmp[667080] "maybe param" "maybe type" "temp"
    (667083 'move' call_tmp[667080](144531 call chpl__buildDomainExpr call_tmp[667075]))
    unknown shape[144533] "dead at end of block" "insert auto destroy"
    (543598 'init var' shape[144533] call_tmp[667080])
    (144536 'end of statement')
    unknown call_tmp[667085] "expr temp" "maybe param" "maybe type" "temp"
    (667088 'move' call_tmp[667085](144542 call chpl__initCopy_shapeHelp shape[144533] ir[144509]))
    (519764 'move' ret[519759](519763 'deref' call_tmp[667085]))
    gotoReturn _end_chpl__initCopy[519757] _end_chpl__initCopy[519757]
    (481296 'end of statement' shape[144533])
    label _end_chpl__initCopy[519757]
    (519761 return ret[519759])
  }
  where {
    unknown tmp[427163] "maybe param" "temp"
    (427174 'move' tmp[427163](144517 call chpl_iteratorHasRangeShape ir[144509]))
    unknown call_tmp[667090] "expr temp" "maybe param" "maybe type" "temp"
    (667093 'move' call_tmp[667090](427176 call _cond_invalid tmp[427163]))
    if call_tmp[667090]
    {
      (427179 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568523] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568524] "maybe param" "temp"
    unknown call_tmp[667095] "expr temp" "maybe param" "maybe type" "temp"
    (667098 'move' call_tmp[667095](427164 call isTrue tmp[427163]))
    (568529 'move' tmp[568524](568527 call _cond_test call_tmp[667095]))
    if tmp[568524]
    {
      unknown tmp[568531] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[667100] "expr temp" "maybe param" "maybe type" "temp"
      (667103 'move' call_tmp[667100](144521 call chpl_iteratorFromForExpr ir[144509]))
      unknown call_tmp[667105] "expr temp" "maybe param" "maybe type" "temp"
      (667108 'move' call_tmp[667105](144522 call ! call_tmp[667100]))
      (568533 'move' tmp[568531](427167 call isTrue call_tmp[667105]))
      (568538 'move' tmp[568523](568535 '_paramFoldLogical' tmp[568524] tmp[568531]))
    }
    {
      (568543 'move' tmp[568523](568540 '_paramFoldLogical' tmp[568524] 0))
    }
    (748519 call chpl_statementLevelSymbol tmp[568523])
  }
  function chpl__initCopy_shapeHelp[144554](arg shape[144551]:_domain[125908](?), arg ir[144557]:_iteratorRecord[205](?)) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[519770] "RVV" "temp"
    unknown call_tmp[667112] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667115 'move' call_tmp[667112](144566 'typeof' ir[144557]))
    unknown call_tmp[667117] "expr temp" "maybe param" "maybe type" "temp"
    (667120 'move' call_tmp[667117](144568 call iteratorToArrayElementType call_tmp[667112]))
    unknown call_tmp[667122] "maybe param" "maybe type" "temp"
    (667125 'move' call_tmp[667122](144572 call(144561 call (partial) buildArray _mt[243] shape[144551]) call_tmp[667117](initElts = 0)))
    unknown result[144573] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543600 'init var' result[144573] call_tmp[667122])
    (144576 'end of statement')
    unknown call_tmp[667129] "expr temp" "maybe param" "maybe type" "temp"
    (667132 'move' call_tmp[667129](144580 call eltType _mt[243] result[144573]))
    unknown call_tmp[667134] "expr temp" "maybe param" "maybe type" "temp"
    (667137 'move' call_tmp[667134](144584 call isArray call_tmp[667129]))
    unknown call_tmp[667139] "expr temp" "maybe param" "maybe type" "temp"
    (667142 'move' call_tmp[667139](144608 call _cond_test call_tmp[667134]))
    if call_tmp[667139]
    {
      (144606 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    unknown call_tmp[667144] "expr temp" "maybe param" "maybe type" "temp"
    (667147 'move' call_tmp[667144](144616 call chpl_iteratorFromForExpr ir[144557]))
    unknown call_tmp[667149] "expr temp" "maybe param" "maybe type" "temp"
    (667152 'move' call_tmp[667149](144873 call _cond_test call_tmp[667144]))
    if call_tmp[667149]
    {
      unknown call_tmp[667156] "expr temp" "maybe param" "maybe type" "temp"
      (667159 'move' call_tmp[667156](144619 call eltType _mt[243] result[144573]))
      unknown call_tmp[667161] "expr temp" "maybe param" "maybe type" "temp"
      (667164 'move' call_tmp[667161](144623 call needsInitWorkaround call_tmp[667156]))
      unknown call_tmp[667166] "expr temp" "maybe param" "maybe type" "temp"
      (667169 'move' call_tmp[667166](144787 call _cond_test call_tmp[667161]))
      if call_tmp[667166]
      {
        {
          unknown _indexOfInterest[144656] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144657] "expr temp" "temp"
          unknown call_tmp[667173] "expr temp" "maybe param" "maybe type" "temp"
          (667176 'move' call_tmp[667173](144666 call _dom _mt[243] result[144573]))
          unknown call_tmp[667178] "expr temp" "maybe param" "maybe type" "temp"
          (667181 'move' call_tmp[667178](144669 call _getIterator call_tmp[667173]))
          unknown call_tmp[667183] "expr temp" "maybe param" "maybe type" "temp"
          (667186 'move' call_tmp[667183](144673 call _getIterator ir[144557]))
          (144675 'move' _iterator[144657](144635 call _build_tuple call_tmp[667178] call_tmp[667183]))
          Defer
          {
            {
              (144705 call _freeIterator _iterator[144657])
            }
          }
          { scopeless type
            (144680 'move' _indexOfInterest[144656](144677 call iteratorIndex _iterator[144657]))
          }
          ForLoop[144658]
          {
            (144685 call _check_tuple_var_decl _indexOfInterest[144656] 2)
            (481300 'end of statement')
            unknown ri[144691] "index var" "insert auto destroy"
            (481301 'end of statement')
            (144693 'move' ri[144691](144689 call _indexOfInterest[144656] 0))
            (481302 'end of statement' ri[144691])
            unknown src[144698] "index var" "insert auto destroy"
            (481304 'end of statement')
            (144700 'move' src[144698](144696 call _indexOfInterest[144656] 1))
            (481305 'end of statement' src[144698])
            {
              unknown r[144640] "dead at end of block" "ref var"
              unknown call_tmp[667188] "expr temp" "maybe param" "maybe type" "temp"
              (667191 'move' call_tmp[667188](144639 call result[144573] ri[144691]))
              (543603 'move' r[144640](543602 'addr of' call_tmp[667188]))
              (144643 'end of statement')
              unknown copy[144646] "dead at end of block" "no auto destroy"
              (543605 'init var' copy[144646] src[144698])
              (144649 'end of statement' result[144573] ri[144691] src[144698])
              (144654 '=' r[144640] copy[144646])
              (481310 'end of statement' r[144640] copy[144646])
            }
            label _continueLabel[144661]
            _indexOfInterest[144656]
            _iterator[144657]
          }
          label _breakLabel[144662]
        }
      }
      {
        {
          unknown _indexOfInterest[144734] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144735] "expr temp" "temp"
          unknown call_tmp[667193] "expr temp" "maybe param" "maybe type" "temp"
          (667196 'move' call_tmp[667193](144744 call _getIterator result[144573]))
          unknown call_tmp[667198] "expr temp" "maybe param" "maybe type" "temp"
          (667201 'move' call_tmp[667198](144747 call _getIterator ir[144557]))
          (144749 'move' _iterator[144735](144721 call _build_tuple call_tmp[667193] call_tmp[667198]))
          Defer
          {
            {
              (144779 call _freeIterator _iterator[144735])
            }
          }
          { scopeless type
            (144754 'move' _indexOfInterest[144734](144751 call iteratorIndex _iterator[144735]))
          }
          ForLoop[144736]
          {
            (144759 call _check_tuple_var_decl _indexOfInterest[144734] 2)
            (481314 'end of statement')
            unknown r[144765] "index var" "insert auto destroy"
            (481315 'end of statement')
            (144767 'move' r[144765](144763 call _indexOfInterest[144734] 0))
            (481316 'end of statement' r[144765])
            unknown src[144772] "index var" "insert auto destroy"
            (481318 'end of statement')
            (144774 'move' src[144772](144770 call _indexOfInterest[144734] 1))
            (481319 'end of statement' src[144772])
            {
              unknown copy[144723] "dead at end of block" "no auto destroy"
              (543607 'init var' copy[144723] src[144772])
              (144726 'end of statement' src[144772])
              (144732 '=' r[144765] copy[144723])
              (481322 'end of statement' r[144765] copy[144723])
            }
            label _continueLabel[144739]
            _indexOfInterest[144734]
            _iterator[144735]
          }
          label _breakLabel[144740]
        }
      }
    }
    {
      unknown call_tmp[667205] "expr temp" "maybe param" "maybe type" "temp"
      (667208 'move' call_tmp[667205](144794 call eltType _mt[243] result[144573]))
      unknown call_tmp[667210] "expr temp" "maybe param" "maybe type" "temp"
      (667213 'move' call_tmp[667210](144798 call needsInitWorkaround call_tmp[667205]))
      unknown call_tmp[667215] "expr temp" "maybe param" "maybe type" "temp"
      (667218 'move' call_tmp[667215](144868 call _cond_test call_tmp[667210]))
      if call_tmp[667215]
      {
        unknown call_tmp[667222] "expr temp" "maybe param" "maybe type" "temp"
        (667225 'move' call_tmp[667222](415991 call _dom _mt[243] result[144573]))
        unknown call_tmp[667227] "maybe param" "maybe type" "temp"
        (667230 'move' call_tmp[667227](415987 call chpl__staticAutoLocalCheck result[144573] call_tmp[667222]))
        unknown chpl__staticAutoLocalCheckSym[415986] "dead at end of block" "param"
        (543609 'init var' chpl__staticAutoLocalCheckSym[415986] call_tmp[667227])
        (481325 'end of statement' result[144573] result[144573])
        if chpl__staticAutoLocalCheckSym[415986]
        {
          unknown call_tmp[667234] "expr temp" "maybe param" "maybe type" "temp"
          (667237 'move' call_tmp[667234](144805 call _dom _mt[243] result[144573]))
          Forall {
            induction variables:
              
              unknown ri[144832] "index var" "insert auto destroy"
              
              unknown src[144834] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667234]
              ir[144557]
            shadow variables:
            other variables
              forall body
            {
              unknown r[144815] "dead at end of block" "ref var"
              unknown call_tmp[667239] "expr temp" "maybe param" "maybe type" "temp"
              (667242 'move' call_tmp[667239](415997 'may be local access' result[144573] ri[144832] chpl__staticAutoLocalCheckSym[415986] 1))
              (543612 'move' r[144815](543611 'addr of' call_tmp[667239]))
              (144818 'end of statement')
              unknown copy[144821] "dead at end of block" "no auto destroy"
              (543614 'init var' copy[144821] src[144834])
              (144824 'end of statement' result[144573] ri[144832] src[144834])
              (144829 '=' r[144815] copy[144821])
              (481331 'end of statement' r[144815] copy[144821])
            }
          }
        }
        {
          unknown call_tmp[667246] "expr temp" "maybe param" "maybe type" "temp"
          (667249 'move' call_tmp[667246](415982 call _dom _mt[243] result[144573]))
          Forall {
            induction variables:
              
              unknown ri[415977] "index var" "insert auto destroy"
              
              unknown src[415979] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667246]
              ir[144557]
            shadow variables:
            other variables
              forall body
            {
              unknown r[415963] "dead at end of block" "ref var"
              unknown call_tmp[667251] "expr temp" "maybe param" "maybe type" "temp"
              (667254 'move' call_tmp[667251](415965 call result[144573] ri[415977]))
              (543617 'move' r[415963](543616 'addr of' call_tmp[667251]))
              (415968 'end of statement')
              unknown copy[415969] "dead at end of block" "no auto destroy"
              (543619 'init var' copy[415969] src[415979])
              (415972 'end of statement' result[144573] ri[415977] src[415979])
              (415973 '=' r[415963] copy[415969])
              (481337 'end of statement' r[415963] copy[415969])
            }
          }
        }
      }
      {
        Forall {
          induction variables:
            
            unknown r[144861] "index var" "insert auto destroy"
            
            unknown src[144863] "index var" "insert auto destroy"
          iterated expressions:
            result[144573]
            ir[144557]
          shadow variables:
          other variables
            forall body
          {
            unknown copy[144849] "dead at end of block" "no auto destroy"
            (543621 'init var' copy[144849] src[144863])
            (144852 'end of statement' src[144863])
            (144858 '=' r[144861] copy[144849])
            (481341 'end of statement' r[144861] copy[144849])
          }
        }
      }
    }
    unknown call_tmp[667258] "expr temp" "maybe param" "maybe type" "temp"
    (667261 'move' call_tmp[667258](144878 call _value _mt[243] result[144573]))
    (144885 call(144881 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[667258]))
    (481344 'end of statement' result[144573])
    (519775 'move' ret[519770](519774 'deref' result[144573]))
    gotoReturn _end_chpl__initCopy_shapeHelp[519768] _end_chpl__initCopy_shapeHelp[519768]
    (481346 'end of statement' result[144573])
    label _end_chpl__initCopy_shapeHelp[519768]
    (519772 return ret[519770])
  }
  function chpl__throwErrorUnchecked[144900](in arg e[144897] :
  (144895 call _owned[30](?) Error[167984])) : _unknown[51] throws "unchecked throws" "no return value for void"
  {
    unknown call_tmp[667265] "expr temp" "maybe param" "maybe type" "temp"
    (667268 'move' call_tmp[667265](468155 call chpl_fix_thrown_error e[144897]))
    (144903 'throw' call_tmp[667265])
    (519779 return _void[55])
  }
  function chpl__initCopy[144914](arg ir[144911]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519783] "RVV" "temp"
    unknown call_tmp[667270] "maybe param" "maybe type" "temp"
    (667273 'move' call_tmp[667270](144919 call chpl_iteratorHasRangeShape ir[144911]))
    unknown shapeful[144920] "dead at end of block" "param"
    (543623 'init var' shapeful[144920] call_tmp[667270])
    (144923 'end of statement')
    unknown r[144937] "dead at end of block"
    unknown tmp[568550] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568551] "maybe param" "temp"
    (568556 'move' tmp[568551](568554 call _cond_test shapeful[144920]))
    if tmp[568551]
    {
      unknown tmp[568558] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568560 'move' tmp[568558](144927 call _shape_ _mt[243] ir[144911]))
      (568565 'move' tmp[568550](568562 '_paramFoldLogical' tmp[568551] tmp[568558]))
    }
    {
      unknown tmp[568567] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568569 'move' tmp[568567](144932 call chpl_build_bounded_range 1 0))
      (568574 'move' tmp[568550](568571 '_paramFoldLogical' tmp[568551] tmp[568567]))
    }
    (543625 'init var' r[144937] tmp[568550])
    (144940 'end of statement')
    unknown i[144942] "dead at end of block"
    (543627 'init var' i[144942] 0)
    (144945 'end of statement')
    unknown call_tmp[667279] "expr temp" "maybe param" "maybe type" "temp"
    (667282 'move' call_tmp[667279](144947 call size _mt[243] r[144937]))
    unknown call_tmp[667284] "maybe param" "maybe type" "temp"
    (667287 'move' call_tmp[667284](144951 call _cast size_t[20657] call_tmp[667279]))
    unknown size[144953] "dead at end of block"
    (543629 'init var' size[144953] call_tmp[667284])
    (144956 'end of statement')
    unknown call_tmp[667289] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667292 'move' call_tmp[667289](144959 'typeof' ir[144911]))
    unknown elemType[144962] "dead at end of block" "type variable"(144961 call iteratorToArrayElementType call_tmp[667289])
    unknown call_tmp[667294] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667297 'move' call_tmp[667294](543633 'typeof' ir[144911]))
    (543635 'move' elemType[144962](543632 call iteratorToArrayElementType call_tmp[667294]))
    unknown call_tmp[667299] "maybe param" "maybe type" "temp"
    (667302 'move' call_tmp[667299](144968 call _ddata[11696](?) elemType[144962]))
    unknown data[144970] "dead at end of block"
    (543637 'init var' data[144970] nil[44] call_tmp[667299])
    (144973 'end of statement')
    unknown callPostAlloc[144975] "dead at end of block"
    (543639 'default init var' callPostAlloc[144975] bool[10])
    (144978 'end of statement')
    unknown subloc[144980] "dead at end of block"
    (543641 'init var' subloc[144980] c_sublocid_none[89873])
    (144983 'end of statement')
    unknown call_tmp[667304] "expr temp" "maybe param" "maybe type" "temp"
    (667307 'move' call_tmp[667304](144986 call > size[144953] 0))
    unknown call_tmp[667309] "expr temp" "maybe param" "maybe type" "temp"
    (667312 'move' call_tmp[667309](144999 call _cond_test call_tmp[667304]))
    if call_tmp[667309]
    {
      unknown call_tmp[667314] "expr temp" "maybe param" "maybe type" "temp"
      (667317 'move' call_tmp[667314](144994 call _ddata_allocate_noinit elemType[144962] size[144953] callPostAlloc[144975]))
      (144995 call = data[144970] call_tmp[667314])
      (481351 'end of statement' data[144970] elemType[144962] size[144953] callPostAlloc[144975])
    }
    Try
    {
      {
        {
          unknown _indexOfInterest[145147] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145148] "expr temp" "temp"
          (145157 'move' _iterator[145148](145155 call _getIterator ir[144911]))
          Defer
          {
            {
              (145173 call _freeIterator _iterator[145148])
            }
          }
          { scopeless type
            (145162 'move' _indexOfInterest[145147](145159 call iteratorIndex _iterator[145148]))
          }
          ForLoop[145149]
          {
            unknown elt[145166] "index var" "insert auto destroy"
            (481357 'end of statement')
            (145168 'move' elt[145166] _indexOfInterest[145147])
            (481358 'end of statement' elt[145166])
            {
              unknown call_tmp[667319] "maybe param" "maybe type" "temp"
              (667322 'move' call_tmp[667319](145008 call chpl__initCopy elt[145166]))
              unknown eltCopy[145010] "dead at end of block" "no auto destroy" "no copy"
              (543643 'init var' eltCopy[145010] call_tmp[667319])
              (145013 'end of statement' elt[145166])
              unknown call_tmp[667324] "expr temp" "maybe param" "maybe type" "temp"
              (667327 'move' call_tmp[667324](145017 call >= i[144942] size[144953]))
              unknown call_tmp[667329] "expr temp" "maybe param" "maybe type" "temp"
              (667332 'move' call_tmp[667329](145129 call _cond_test call_tmp[667324]))
              if call_tmp[667329]
              {
                unknown oldSize[145020] "dead at end of block"
                (543645 'init var' oldSize[145020] size[144953])
                (145023 'end of statement')
                unknown oldData[145026] "dead at end of block"
                (543647 'init var' oldData[145026] data[144970])
                (145029 'end of statement' size[144953] data[144970])
                unknown call_tmp[667334] "expr temp" "maybe param" "maybe type" "temp"
                (667337 'move' call_tmp[667334](145032 call == size[144953] 0))
                unknown call_tmp[667339] "expr temp" "maybe param" "maybe type" "temp"
                (667342 'move' call_tmp[667339](145047 call _cond_test call_tmp[667334]))
                if call_tmp[667339]
                {
                  (145036 call = size[144953] 4)
                  (481363 'end of statement' size[144953])
                }
                {
                  unknown call_tmp[667344] "expr temp" "maybe param" "maybe type" "temp"
                  (667347 'move' call_tmp[667344](145042 call * 2 size[144953]))
                  (145044 call = size[144953] call_tmp[667344])
                  (481365 'end of statement' size[144953] size[144953])
                }
                unknown call_tmp[667349] "expr temp" "maybe param" "maybe type" "temp"
                (667352 'move' call_tmp[667349](145059 call _ddata_allocate_noinit elemType[144962] size[144953] callPostAlloc[144975]))
                (145060 call = data[144970] call_tmp[667349])
                (481368 'end of statement' data[144970] elemType[144962] size[144953] callPostAlloc[144975])
                {
                  unknown _indexOfInterest[145083] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[145084] "expr temp" "temp"
                  unknown call_tmp[667354] "expr temp" "maybe param" "maybe type" "temp"
                  (667357 'move' call_tmp[667354](145100 call chpl_direct_counted_range_iter 0 oldSize[145020]))
                  (145093 'move' _iterator[145084](145091 call _getIterator call_tmp[667354]))
                  Defer
                  {
                    {
                      (145116 call _freeIterator _iterator[145084])
                    }
                  }
                  { scopeless type
                    (145105 'move' _indexOfInterest[145083](145102 call iteratorIndex _iterator[145084]))
                  }
                  ForLoop[145085]
                  {
                    unknown i[145109] "index var" "insert auto destroy"
                    (481374 'end of statement')
                    (145111 'move' i[145109] _indexOfInterest[145083])
                    (481375 'end of statement' i[145109])
                    {
                      unknown call_tmp[667359] "expr temp" "maybe param" "maybe type" "temp"
                      (667362 'move' call_tmp[667359](145075 call data[144970] i[145109]))
                      unknown call_tmp[667364] "expr temp" "maybe param" "maybe type" "temp"
                      (667367 'move' call_tmp[667364](145079 call oldData[145026] i[145109]))
                      (145080 '=' call_tmp[667359] call_tmp[667364])
                      (481377 'end of statement' data[144970] i[145109] oldData[145026] i[145109])
                    }
                    label _continueLabel[145088]
                    _indexOfInterest[145083]
                    _iterator[145084]
                  }
                  label _breakLabel[145089]
                }
                (145127 call _ddata_free oldData[145026] oldSize[145020])
                (481382 'end of statement' oldData[145026] oldSize[145020])
              }
              unknown call_tmp[667369] "expr temp" "maybe param" "maybe type" "temp"
              (667372 'move' call_tmp[667369](145138 call data[144970] i[144942]))
              (145140 '=' call_tmp[667369] eltCopy[145010])
              (481385 'end of statement' data[144970] i[144942] eltCopy[145010])
              (145144 call += i[144942] 1)
              (481389 'end of statement' i[144942])
            }
            label _continueLabel[145152]
            _indexOfInterest[145147]
            _iterator[145148]
          }
          label _breakLabel[145153]
        }
      }
    }
    Catch e : Error
    {
      unknown call_tmp[667374] "maybe param" "maybe type" "temp"
      (667377 'move' call_tmp[667374](354430 'current error'))
      unknown tmp[354427] "dead at end of block" "temp"
      (543649 'init var' tmp[354427] call_tmp[667374])
      unknown call_tmp[667379] "expr temp" "maybe param" "maybe type" "temp"
      (667382 'move' call_tmp[667379](354434 'to non nilable class' tmp[354427]))
      unknown call_tmp[667384] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (667387 'move' call_tmp[667384](748079 'new' _owned[30](?) call_tmp[667379]))
      unknown e[354433] "dead at end of block"
      (543651 'init var' e[354433] call_tmp[667384])
      (481391 'end of statement')
      {
        {
          unknown _indexOfInterest[145202] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145203] "expr temp" "temp"
          unknown call_tmp[667389] "expr temp" "maybe param" "maybe type" "temp"
          (667392 'move' call_tmp[667389](145217 call - i[144942] 1))
          unknown call_tmp[667394] "expr temp" "maybe param" "maybe type" "temp"
          (667397 'move' call_tmp[667394](145220 call chpl_direct_range_iter 0 call_tmp[667389] 1))
          (145212 'move' _iterator[145203](145210 call _getIterator call_tmp[667394]))
          Defer
          {
            {
              (145236 call _freeIterator _iterator[145203])
            }
          }
          { scopeless type
            (145225 'move' _indexOfInterest[145202](145222 call iteratorIndex _iterator[145203]))
          }
          ForLoop[145204]
          {
            unknown j[145229] "index var" "insert auto destroy"
            (481393 'end of statement')
            (145231 'move' j[145229] _indexOfInterest[145202])
            (481394 'end of statement' j[145229])
            {
              unknown call_tmp[667399] "expr temp" "maybe param" "maybe type" "temp"
              (667402 'move' call_tmp[667399](145197 call data[144970] j[145229]))
              (145199 call chpl__autoDestroy call_tmp[667399])
              (481396 'end of statement' data[144970] j[145229])
            }
            label _continueLabel[145207]
            _indexOfInterest[145202]
            _iterator[145203]
          }
          label _breakLabel[145208]
        }
        (145248 call _ddata_free data[144970] size[144953])
        (481399 'end of statement' data[144970] size[144953])
        (145253 call chpl__throwErrorUnchecked e[354433])
        (481402 'end of statement' e[354433])
      }
    }
    unknown tmp[427184] "maybe param" "temp"
    (427195 'move' tmp[427184] shapeful[144920])
    unknown call_tmp[667404] "expr temp" "maybe param" "maybe type" "temp"
    (667407 'move' call_tmp[667404](427197 call _cond_invalid tmp[427184]))
    if call_tmp[667404]
    {
      (427200 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568581] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568582] "maybe param" "temp"
    unknown call_tmp[667409] "expr temp" "maybe param" "maybe type" "temp"
    (667412 'move' call_tmp[667409](427185 call isTrue tmp[427184]))
    (568587 'move' tmp[568582](568585 call _cond_test call_tmp[667409]))
    if tmp[568582]
    {
      unknown tmp[568589] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[667416] "expr temp" "maybe param" "maybe type" "temp"
      (667419 'move' call_tmp[667416](145261 call size _mt[243] r[144937]))
      unknown call_tmp[667421] "expr temp" "maybe param" "maybe type" "temp"
      (667424 'move' call_tmp[667421](145264 call < i[144942] call_tmp[667416]))
      (568591 'move' tmp[568589](427188 call isTrue call_tmp[667421]))
      (568596 'move' tmp[568581](568593 '_paramFoldLogical' tmp[568582] tmp[568589]))
    }
    {
      (568601 'move' tmp[568581](568598 '_paramFoldLogical' tmp[568582] 0))
    }
    unknown call_tmp[667426] "expr temp" "maybe param" "maybe type" "temp"
    (667429 'move' call_tmp[667426](145276 call _cond_test tmp[568581]))
    if call_tmp[667426]
    {
      unknown call_tmp[667431] "expr temp" "maybe param" "maybe type" "temp"
      (667434 'move' call_tmp[667431](145271 call # r[144937] i[144942]))
      (145273 call = r[144937] call_tmp[667431])
      (481405 'end of statement' r[144937] r[144937] i[144942])
    }
    unknown call_tmp[667436] "expr temp" "maybe param" "maybe type" "temp"
    (667439 'move' call_tmp[667436](145282 call ! shapeful[144920]))
    unknown call_tmp[667441] "expr temp" "maybe param" "maybe type" "temp"
    (667444 'move' call_tmp[667441](145305 call _cond_test call_tmp[667436]))
    if call_tmp[667441]
    {
      unknown tmp[568608] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568609] "maybe param" "temp"
      unknown call_tmp[667446] "expr temp" "maybe param" "maybe type" "temp"
      (667449 'move' call_tmp[667446](145287 call == i[144942] 0))
      (568614 'move' tmp[568609](568612 call _cond_test call_tmp[667446]))
      if tmp[568609]
      {
        unknown tmp[568616] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (568618 'move' tmp[568616](145291 call chpl_build_bounded_range 1 0))
        (568623 'move' tmp[568608](568620 '_paramFoldLogical' tmp[568609] tmp[568616]))
      }
      {
        unknown tmp[568625] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[667451] "expr temp" "maybe param" "maybe type" "temp"
        (667454 'move' call_tmp[667451](145294 call chpl_build_low_bounded_range capturedIteratorLowBound[115341]))
        (568627 'move' tmp[568625](145297 call # call_tmp[667451] i[144942]))
        (568632 'move' tmp[568608](568629 '_paramFoldLogical' tmp[568609] tmp[568625]))
      }
      (145302 call = r[144937] tmp[568608])
      (481409 'end of statement' r[144937] i[144942] i[144942])
    }
    unknown call_tmp[667456] "maybe param" "maybe type" "temp"
    (667459 'move' call_tmp[667456](145312 call chpl__buildDomainExpr r[144937]))
    unknown D[145314] "dead at end of block" "insert auto destroy"
    (543653 'init var' D[145314] call_tmp[667456])
    (145317 'end of statement' r[144937] elemType[144962] r[144937])
    unknown call_tmp[667461] "expr temp" "maybe param" "maybe type" "temp"
    (667464 'move' call_tmp[667461](145320 call != data[144970] nil[44]))
    unknown call_tmp[667466] "expr temp" "maybe param" "maybe type" "temp"
    (667469 'move' call_tmp[667466](145447 call _cond_test call_tmp[667461]))
    if call_tmp[667466]
    {
      unknown call_tmp[667471] "expr temp" "maybe param" "maybe type" "temp"
      (667474 'move' call_tmp[667471](145329 call _cond_test callPostAlloc[144975]))
      if call_tmp[667471]
      {
        (145327 call _ddata_allocate_postalloc data[144970] size[144953])
        (481414 'end of statement' data[144970] size[144953])
      }
      { scopeless type
        unknown call_type_tmp[492427] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667476] "expr temp" "maybe param" "maybe type" "temp"
        (667479 'move' call_tmp[667476](145344 call data[144970] 0))
        (492431 'move' call_type_tmp[492427](145345 'typeof' call_tmp[667476]))
      }
      unknown call_tmp[667483] "expr temp" "maybe param" "maybe type" "temp"
      (667486 'move' call_tmp[667483](145350 call _cast int(64)[13] size[144953]))
      unknown call_tmp[667488] "maybe param" "maybe type" "temp"
      (667491 'move' call_tmp[667488](145352 call(145338 call (partial) buildArrayWith _mt[243] D[145314]) call_type_tmp[492427] data[144970] call_tmp[667483]))
      unknown A[145353] "dead at end of block"
      (543655 'init var' A[145353] call_tmp[667488])
      (145356 'end of statement' D[145314] data[144970] data[144970] size[144953])
      { scopeless type
        unknown call_type_tmp[492433] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667493] "expr temp" "maybe param" "maybe type" "temp"
        (667496 'move' call_tmp[667493](145366 call data[144970] 0))
        (492437 'move' call_type_tmp[492433](145367 'typeof' call_tmp[667493]))
      }
      unknown call_tmp[667500] "expr temp" "maybe param" "maybe type" "temp"
      (667503 'move' call_tmp[667500](145359 call _value _mt[243] A[145353]))
      (145368 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[667500] call_type_tmp[492433])
      (481421 'end of statement' A[145353] data[144970])
      unknown call_tmp[667507] "expr temp" "maybe param" "maybe type" "temp"
      (667510 'move' call_tmp[667507](145371 call _value _mt[243] A[145353]))
      unknown call_tmp[667514] "expr temp" "maybe param" "maybe type" "temp"
      (667517 'move' call_tmp[667514](145374 call _decEltRefCounts _mt[243] call_tmp[667507]))
      (145378 call = call_tmp[667514] 0)
      (481424 'end of statement' A[145353])
      (145400 'auto destroy runtime type' elemType[144962])
      (481426 'end of statement' elemType[144962])
      (519788 'move' ret[519783](519787 'deref' A[145353]))
      gotoReturn _end_chpl__initCopy[519781] _end_chpl__initCopy[519781]
      (481428 'end of statement' A[145353])
    }
    {
      unknown call_tmp[667519] "expr temp" "maybe param" "maybe type" "temp"
      (667522 'move' call_tmp[667519](145411 call _ddata_allocate_noinit elemType[144962] size[144953] callPostAlloc[144975]))
      (145412 call = data[144970] call_tmp[667519])
      (481430 'end of statement' data[144970] elemType[144962] size[144953] callPostAlloc[144975])
      unknown call_tmp[667524] "expr temp" "maybe param" "maybe type" "temp"
      (667527 'move' call_tmp[667524](145423 call _cond_test callPostAlloc[144975]))
      if call_tmp[667524]
      {
        (145421 call _ddata_allocate_postalloc data[144970] size[144953])
        (481435 'end of statement' data[144970] size[144953])
      }
      unknown call_tmp[667531] "expr temp" "maybe param" "maybe type" "temp"
      (667534 'move' call_tmp[667531](145437 call _cast int(64)[13] size[144953]))
      unknown call_tmp[667536] "maybe param" "maybe type" "temp"
      (667539 'move' call_tmp[667536](145439 call(145429 call (partial) buildArrayWith _mt[243] D[145314]) elemType[144962] data[144970] call_tmp[667531]))
      unknown A[145440] "dead at end of block"
      (543657 'init var' A[145440] call_tmp[667536])
      (145443 'end of statement' D[145314] elemType[144962] data[144970] size[144953])
      (519793 'move' ret[519783](519792 'deref' A[145440]))
      gotoReturn _end_chpl__initCopy[519781] _end_chpl__initCopy[519781]
      (481442 'end of statement' A[145440])
    }
    label _end_chpl__initCopy[519781]
    (519785 return ret[519783])
  }
  (355213 'used modules list'(113680 'use' ChapelBase[307])(113684 'use' ChapelTuple[56188])(113687 'use' ChapelLocale[89847])(113690 'use' ArrayViewSlice[189732])(113693 'use' ArrayViewRankChange[191488])(113696 'use' ArrayViewReindex[196078])(113699 'import' Reflection[224970])(113702 'use' ChapelDebugPrint[188155])(113705 'use' SysCTypes[20943]))
}