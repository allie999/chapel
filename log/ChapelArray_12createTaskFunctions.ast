AST dump for ChapelArray after pass createTaskFunctions.
Module use list: ChapelBase ChapelTuple ChapelLocale ArrayViewSlice ArrayViewRankChange ArrayViewReindex Reflection ChapelDebugPrint SysCTypes HaltWrappers Sort IO 

{
  function chpl__init_ChapelArray[415892]() : void[4] "insert line file info" "module init"
  {
    unknown call_tmp[648073] "expr temp" "maybe param" "maybe type" "temp"
    (648076 'move' call_tmp[648073](113704 call chpl__processorAtomicType int(64)[13]))
    (542498 'default init var' numPrivateObjects[113705] call_tmp[648073])
    (113708 'end of statement')
    unknown call_tmp[648078] "maybe param" "maybe type" "temp"
    (648081 'move' call_tmp[648078](113710 call - 1))
    (542500 'init var' nullPid[113712] call_tmp[648078])
    (113715 'end of statement')
    (542502 'init var' debugBulkTransfer[113717] 0)
    (113720 'end of statement')
    (542504 'init var' useBulkTransfer[113722] 1)
    (113725 'end of statement')
    (542506 'init var' useBulkTransferStride[113727] 1)
    (113730 'end of statement')
    (542508 'init var' useBulkPtrTransfer[113732] useBulkTransfer[113722])
    (113735 'end of statement')
    (542510 'init var' PODValAccess[113737] 1)
    (113740 'end of statement')
    (542512 'init var' useBulkTransferDist[113742] 0)
    (113745 'end of statement')
    (542514 'init var' arrayAsVecGrowthFactor[113749] 1.5)
    (113752 'end of statement')
    (542516 'init var' debugArrayAsVec[113754] 0)
    (113757 'end of statement')
    (542540 'init var' CHPL_WARN_DOMAIN_LITERAL[115325] "unset")
    (115328 'end of statement')
    (542542 'init var' arrayLiteralLowBound[115330] defaultLowBound[361])
    (115333 'end of statement')
    (542544 'init var' capturedIteratorLowBound[115335] defaultLowBound[361])
    (115338 'end of statement')
    (519582 return _void[55])
  }
  unknown numPrivateObjects[113705] "dead at end of block" "insert auto destroy" "no doc"
  unknown nullPid[113712] "dead at end of block" "no doc" "param"
  unknown debugBulkTransfer[113717] "config" "no doc" "param"
  unknown useBulkTransfer[113722] "config" "no doc" "param"
  unknown useBulkTransferStride[113727] "config" "no doc" "param"
  unknown useBulkPtrTransfer[113732] "config" "no doc" "param"
  unknown PODValAccess[113737] "config" "no doc" "param"
  unknown useBulkTransferDist[113742] "config" "no doc" "param"
  unknown arrayAsVecGrowthFactor[113749] "config" "no doc" "param"
  unknown debugArrayAsVec[113754] "config" "no doc" "param"
  function _isPrivatized[113762](arg value[113760]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515586] "RVV" "param" "temp"
    unknown tmp[423976] "maybe param" "temp"
    (423987 'move' tmp[423976](113765 call ! 0))
    unknown call_tmp[648083] "expr temp" "maybe param" "maybe type" "temp"
    (648086 'move' call_tmp[648083](423989 call _cond_invalid tmp[423976]))
    if call_tmp[648083]
    {
      (423992 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564126] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564127] "maybe param" "temp"
    unknown call_tmp[648088] "expr temp" "maybe param" "maybe type" "temp"
    (648091 'move' call_tmp[648088](423977 call isTrue tmp[423976]))
    (564132 'move' tmp[564127](564130 call _cond_test call_tmp[648088]))
    if tmp[564127]
    {
      unknown tmp[423997] "maybe param" "temp"
      unknown tmp[424018] "maybe param" "temp"
      (424029 'move' tmp[424018] 1)
      unknown call_tmp[648093] "expr temp" "maybe param" "maybe type" "temp"
      (648096 'move' call_tmp[648093](424031 call _cond_invalid tmp[424018]))
      if call_tmp[648093]
      {
        (424034 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[564072] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564073] "maybe param" "temp"
      unknown call_tmp[648098] "expr temp" "maybe param" "maybe type" "temp"
      (648101 'move' call_tmp[648098](424019 call isTrue tmp[424018]))
      (564078 'move' tmp[564073](564076 call _cond_test call_tmp[648098]))
      if tmp[564073]
      {
        unknown tmp[564080] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648103] "expr temp" "maybe param" "maybe type" "temp"
        (648106 'move' call_tmp[648103](113769 call postfix! value[113760]))
        unknown call_tmp[648110] "expr temp" "maybe param" "maybe type" "temp"
        (648113 'move' call_tmp[648110](113777 call(113773 call (partial) dsiSupportsPrivatization _mt[243] call_tmp[648103])))
        (564082 'move' tmp[564080](424022 call isTrue call_tmp[648110]))
        (564087 'move' tmp[564072](564084 '_paramFoldLogical' tmp[564073] tmp[564080]))
      }
      {
        (564092 'move' tmp[564072](564089 '_paramFoldLogical' tmp[564073] 0))
      }
      (424008 'move' tmp[423997] tmp[564072])
      unknown call_tmp[648115] "expr temp" "maybe param" "maybe type" "temp"
      (648118 'move' call_tmp[648115](424010 call _cond_invalid tmp[423997]))
      if call_tmp[648115]
      {
        (424013 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564099] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564100] "maybe param" "temp"
      unknown call_tmp[648120] "expr temp" "maybe param" "maybe type" "temp"
      (648123 'move' call_tmp[648120](423998 call isTrue tmp[423997]))
      (564105 'move' tmp[564100](564103 call _cond_test call_tmp[648120]))
      if tmp[564100]
      {
        (564110 'move' tmp[564099](564107 '_paramFoldLogical' tmp[564100] 1))
      }
      {
        unknown tmp[564112] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648125] "expr temp" "maybe param" "maybe type" "temp"
        (648128 'move' call_tmp[648125](113781 call postfix! value[113760]))
        unknown call_tmp[648132] "expr temp" "maybe param" "maybe type" "temp"
        (648135 'move' call_tmp[648132](113789 call(113785 call (partial) dsiRequiresPrivatization _mt[243] call_tmp[648125])))
        (564114 'move' tmp[564112](424002 call isTrue call_tmp[648132]))
        (564119 'move' tmp[564099](564116 '_paramFoldLogical' tmp[564100] tmp[564112]))
      }
      unknown tmp[564134] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564136 'move' tmp[564134](423980 call isTrue tmp[564099]))
      (564141 'move' tmp[564126](564138 '_paramFoldLogical' tmp[564127] tmp[564134]))
    }
    {
      (564146 'move' tmp[564126](564143 '_paramFoldLogical' tmp[564127] 0))
    }
    (515591 'move' ret[515586](515590 'deref' tmp[564126]))
    (515588 return ret[515586])
  }
  function _newPrivatizedClass[113803](arg value[113801]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515597] "RVV" "temp"
    unknown call_tmp[648139] "maybe param" "maybe type" "temp"
    (648142 'move' call_tmp[648139](113814 call(113809 call (partial) fetchAdd _mt[243] numPrivateObjects[113705]) 1))
    const n[113815] "dead at end of block" "const" "insert auto destroy"
    (542518 'init var' n[113815] call_tmp[648139])
    (113818 'end of statement')
    unknown call_tmp[648144] "expr temp" "maybe param" "maybe type" "temp"
    (648147 'move' call_tmp[648144](358936 call here[90435]))
    unknown call_tmp[648151] "maybe param" "maybe type" "temp"
    (648154 'move' call_tmp[648151](113821 call id _mt[243] call_tmp[648144]))
    const hereID[113824] "dead at end of block" "const" "insert auto destroy"
    (542520 'init var' hereID[113824] call_tmp[648151])
    (113827 'end of statement')
    unknown call_tmp[648158] "maybe param" "maybe type" "temp"
    (648161 'move' call_tmp[648158](113835 call(113831 call (partial) dsiGetPrivatizeData _mt[243] value[113801])))
    const privatizeData[113836] "dead at end of block" "const" "insert auto destroy"
    (542522 'init var' privatizeData[113836] call_tmp[648158])
    (113839 'end of statement')
    const tmp[113856] "const" "temp"
    unknown call_tmp[648163] "expr temp" "maybe param" "maybe type" "temp"
    (648166 'move' call_tmp[648163](113843 call Locales[113656] 0))
    unknown call_tmp[648168] "expr temp" "maybe param" "maybe type" "temp"
    (648171 'move' call_tmp[648168](113853 '_wide_get_locale' call_tmp[648163]))
    (113858 'move' tmp[113856](113854 'deref' call_tmp[648168]))
    (934836 call on_fn[934832] tmp[113856])
    function on_fn[934832](const in arg dummy_locale_arg[934834]:chpl_localeID_t[209294]) : void[4] "on"
    {
      (113851 call _newPrivatizedClassHelp value[113801] value[113801] n[113815] hereID[113824] privatizeData[113836])
      (479072 'end of statement' n[113815] hereID[113824] privatizeData[113836])
      (934839 return _void[55])
    }
    {
    }
    function _newPrivatizedClassHelp[113868](arg parentValue[113866]:_any[178](?), arg originalValue[113870]:_any[178](?), arg n[113872]:_any[178](?), arg hereID[113874]:_any[178](?), arg privatizeData[113876]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[113879] "dead at end of block" "insert auto destroy"
      (542524 'init var' newValue[113879] originalValue[113870])
      (113882 'end of statement')
      unknown call_tmp[648173] "expr temp" "maybe param" "maybe type" "temp"
      (648176 'move' call_tmp[648173](358939 call here[90435]))
      unknown call_tmp[648180] "expr temp" "maybe param" "maybe type" "temp"
      (648183 'move' call_tmp[648180](113886 call id _mt[243] call_tmp[648173]))
      unknown call_tmp[648185] "expr temp" "maybe param" "maybe type" "temp"
      (648188 'move' call_tmp[648185](113889 call != hereID[113874] call_tmp[648180]))
      unknown call_tmp[648190] "expr temp" "maybe param" "maybe type" "temp"
      (648193 'move' call_tmp[648190](113952 call _cond_test call_tmp[648185]))
      if call_tmp[648190]
      {
        unknown call_tmp[648197] "expr temp" "maybe param" "maybe type" "temp"
        (648200 'move' call_tmp[648197](113900 call(113895 call (partial) dsiPrivatize _mt[243] parentValue[113866]) privatizeData[113876]))
        (113901 call = newValue[113879] call_tmp[648197])
        (479076 'end of statement' newValue[113879])
        (113925 'chpl_newPrivatizedClass' newValue[113879] n[113872])
        (479078 'end of statement' newValue[113879])
        unknown call_tmp[648204] "expr temp" "maybe param" "maybe type" "temp"
        (648207 'move' call_tmp[648204](113930 call pid _mt[243] newValue[113879]))
        (113934 call = call_tmp[648204] n[113872])
        (479080 'end of statement' newValue[113879])
      }
      {
        (113941 'chpl_newPrivatizedClass' newValue[113879] n[113872])
        (479082 'end of statement' newValue[113879])
        unknown call_tmp[648211] "expr temp" "maybe param" "maybe type" "temp"
        (648214 'move' call_tmp[648211](113945 call pid _mt[243] newValue[113879]))
        (113949 call = call_tmp[648211] n[113872])
        (479084 'end of statement' newValue[113879])
      }
      {
        const _cobeginCount[114039] "const" "end count" "temp"
        (114060 'move' _cobeginCount[114039](114057 call _endCountAlloc 1))
        (114052 call _upEndCount _cobeginCount[114039] 1 2)
        (479086 'end of statement')
        (934861 call cobegin_fn[934859] privatizeData[113876] originalValue[113870] newValue[113879] n[113872] hereID[113874])
        function cobegin_fn[934859](arg privatizeData[934866]:_any[178](?), arg originalValue[934869]:_any[178](?), arg newValue[934872], arg n[934875]:_any[178](?), arg hereID[934878]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648218] "expr temp" "maybe param" "maybe type" "temp"
          (648221 'move' call_tmp[648218](113959 call left _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648225] "expr temp" "maybe param" "maybe type" "temp"
          (648228 'move' call_tmp[648225](113962 call _instance _mt[243] call_tmp[648218]))
          unknown call_tmp[648230] "expr temp" "maybe param" "maybe type" "temp"
          (648233 'move' call_tmp[648230](113966 call != call_tmp[648225] nil[44]))
          unknown call_tmp[648235] "expr temp" "maybe param" "maybe type" "temp"
          (648238 'move' call_tmp[648235](113992 call _cond_test call_tmp[648230]))
          if call_tmp[648235]
          {
            const tmp[113984] "const" "temp"
            unknown call_tmp[648242] "expr temp" "maybe param" "maybe type" "temp"
            (648245 'move' call_tmp[648242](113969 call left _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648247] "expr temp" "maybe param" "maybe type" "temp"
            (648250 'move' call_tmp[648247](113981 '_wide_get_locale' call_tmp[648242]))
            (113986 'move' tmp[113984](113982 'deref' call_tmp[648247]))
            (934845 call on_fn[934841] tmp[113984])
            function on_fn[934841](const in arg dummy_locale_arg[934843]:chpl_localeID_t[209294]) : void[4] "on"
            {
              (113979 call _newPrivatizedClassHelp newValue[934872] originalValue[934869] n[934875] hereID[934878] privatizeData[934866])
              (479087 'end of statement' newValue[934872])
              (934848 return _void[55])
            }
            {
            }
          }
          (114042 call _downEndCount _cobeginCount[114039] nil[44])
          (934864 return _void[55])
        }
        {
        }
        (934883 call cobegin_fn[934881] privatizeData[113876] originalValue[113870] newValue[113879] n[113872] hereID[113874])
        function cobegin_fn[934881](arg privatizeData[934888]:_any[178](?), arg originalValue[934891]:_any[178](?), arg newValue[934894], arg n[934897]:_any[178](?), arg hereID[934900]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648254] "expr temp" "maybe param" "maybe type" "temp"
          (648257 'move' call_tmp[648254](114001 call right _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648261] "expr temp" "maybe param" "maybe type" "temp"
          (648264 'move' call_tmp[648261](114004 call _instance _mt[243] call_tmp[648254]))
          unknown call_tmp[648266] "expr temp" "maybe param" "maybe type" "temp"
          (648269 'move' call_tmp[648266](114008 call != call_tmp[648261] nil[44]))
          unknown call_tmp[648271] "expr temp" "maybe param" "maybe type" "temp"
          (648274 'move' call_tmp[648271](114034 call _cond_test call_tmp[648266]))
          if call_tmp[648271]
          {
            const tmp[114026] "const" "temp"
            unknown call_tmp[648278] "expr temp" "maybe param" "maybe type" "temp"
            (648281 'move' call_tmp[648278](114011 call right _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648283] "expr temp" "maybe param" "maybe type" "temp"
            (648286 'move' call_tmp[648283](114023 '_wide_get_locale' call_tmp[648278]))
            (114028 'move' tmp[114026](114024 'deref' call_tmp[648283]))
            (934854 call on_fn[934850] tmp[114026])
            function on_fn[934850](const in arg dummy_locale_arg[934852]:chpl_localeID_t[209294]) : void[4] "on"
            {
              (114021 call _newPrivatizedClassHelp newValue[934894] originalValue[934891] n[934897] hereID[934900] privatizeData[934888])
              (479090 'end of statement' newValue[934894])
              (934857 return _void[55])
            }
            {
            }
          }
          (114048 call _downEndCount _cobeginCount[114039] nil[44])
          (934886 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114063 call _endCountFree _cobeginCount[114039])
          }
        }
        (114068 call _waitEndCount _cobeginCount[114039] 1 2)
      }
      (515593 return _void[55])
    }
    (515603 'move' ret[515597](515602 'coerce' n[113815] int(64)[13]))
    gotoReturn _end__newPrivatizedClass[515595] _end__newPrivatizedClass[515595]
    (479095 'end of statement' n[113815])
    label _end__newPrivatizedClass[515595]
    (515599 return ret[515597])
  }
  { scopeless type
    int(64)[13]
  }
  function _freePrivatizedClass[114087](arg pid[114084]:int(64)[13], arg original[114090]:object[366956](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648288] "expr temp" "maybe param" "maybe type" "temp"
    (648291 'move' call_tmp[648288](114096 call == pid[114084] nullPid[113712]))
    unknown call_tmp[648293] "expr temp" "maybe param" "maybe type" "temp"
    (648296 'move' call_tmp[648293](114100 call _cond_test call_tmp[648288]))
    if call_tmp[648293]
    {
      gotoReturn _end__freePrivatizedClass[515611] _end__freePrivatizedClass[515611]
    }
    const tmp[114120] "const" "temp"
    unknown call_tmp[648298] "expr temp" "maybe param" "maybe type" "temp"
    (648301 'move' call_tmp[648298](114109 call Locales[113656] 0))
    unknown call_tmp[648303] "expr temp" "maybe param" "maybe type" "temp"
    (648306 'move' call_tmp[648303](114117 '_wide_get_locale' call_tmp[648298]))
    (114122 'move' tmp[114120](114118 'deref' call_tmp[648303]))
    (934907 call on_fn[934903] tmp[114120])
    function on_fn[934903](const in arg dummy_locale_arg[934905]:chpl_localeID_t[209294]) : void[4] "on"
    {
      {
        (114114 call _freePrivatizedClassHelp pid[114084] original[114090])
      }
      (934910 return _void[55])
    }
    {
    }
    function _freePrivatizedClassHelp[114132](arg pid[114130]:_any[178](?), arg original[114134]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown call_tmp[648308] "maybe param" "maybe type" "temp"
      (648311 'move' call_tmp[648308](114141 call chpl_getPrivatizedCopy unmanaged object[415361] pid[114130]))
      unknown prv[114142] "dead at end of block" "insert auto destroy"
      (542526 'init var' prv[114142] call_tmp[648308])
      (114145 'end of statement')
      unknown call_tmp[648313] "expr temp" "maybe param" "maybe type" "temp"
      (648316 'move' call_tmp[648313](114149 call != prv[114142] original[114134]))
      unknown call_tmp[648318] "expr temp" "maybe param" "maybe type" "temp"
      (648321 'move' call_tmp[648318](114156 call _cond_test call_tmp[648313]))
      if call_tmp[648318]
      {
        (114153 call chpl__delete prv[114142])
        (479099 'end of statement' prv[114142])
      }
      function chpl_clearPrivatizedClass[114167](arg pid[114164]:int(64)[13]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
        (515607 return _void[55])
      }
      (114174 call chpl_clearPrivatizedClass pid[114130])
      (479101 'end of statement')
      {
        const _cobeginCount[114249] "const" "end count" "temp"
        (114270 'move' _cobeginCount[114249](114267 call _endCountAlloc 1))
        (114262 call _upEndCount _cobeginCount[114249] 1 2)
        (479102 'end of statement')
        (934932 call cobegin_fn[934930] pid[114130] original[114134])
        function cobegin_fn[934930](arg pid[934937]:_any[178](?), arg original[934940]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648325] "expr temp" "maybe param" "maybe type" "temp"
          (648328 'move' call_tmp[648325](114177 call left _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648332] "expr temp" "maybe param" "maybe type" "temp"
          (648335 'move' call_tmp[648332](114180 call _instance _mt[243] call_tmp[648325]))
          unknown call_tmp[648337] "expr temp" "maybe param" "maybe type" "temp"
          (648340 'move' call_tmp[648337](114184 call != call_tmp[648332] nil[44]))
          unknown call_tmp[648342] "expr temp" "maybe param" "maybe type" "temp"
          (648345 'move' call_tmp[648342](114207 call _cond_test call_tmp[648337]))
          if call_tmp[648342]
          {
            const tmp[114199] "const" "temp"
            unknown call_tmp[648349] "expr temp" "maybe param" "maybe type" "temp"
            (648352 'move' call_tmp[648349](114187 call left _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648354] "expr temp" "maybe param" "maybe type" "temp"
            (648357 'move' call_tmp[648354](114196 '_wide_get_locale' call_tmp[648349]))
            (114201 'move' tmp[114199](114197 'deref' call_tmp[648354]))
            (934916 call on_fn[934912] tmp[114199])
            function on_fn[934912](const in arg dummy_locale_arg[934914]:chpl_localeID_t[209294]) : void[4] "on"
            {
              (114194 call _freePrivatizedClassHelp pid[934937] original[934940])
              (934919 return _void[55])
            }
            {
            }
          }
          (114252 call _downEndCount _cobeginCount[114249] nil[44])
          (934935 return _void[55])
        }
        {
        }
        (934945 call cobegin_fn[934943] pid[114130] original[114134])
        function cobegin_fn[934943](arg pid[934950]:_any[178](?), arg original[934953]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648361] "expr temp" "maybe param" "maybe type" "temp"
          (648364 'move' call_tmp[648361](114214 call right _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648368] "expr temp" "maybe param" "maybe type" "temp"
          (648371 'move' call_tmp[648368](114217 call _instance _mt[243] call_tmp[648361]))
          unknown call_tmp[648373] "expr temp" "maybe param" "maybe type" "temp"
          (648376 'move' call_tmp[648373](114221 call != call_tmp[648368] nil[44]))
          unknown call_tmp[648378] "expr temp" "maybe param" "maybe type" "temp"
          (648381 'move' call_tmp[648378](114244 call _cond_test call_tmp[648373]))
          if call_tmp[648378]
          {
            const tmp[114236] "const" "temp"
            unknown call_tmp[648385] "expr temp" "maybe param" "maybe type" "temp"
            (648388 'move' call_tmp[648385](114224 call right _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648390] "expr temp" "maybe param" "maybe type" "temp"
            (648393 'move' call_tmp[648390](114233 '_wide_get_locale' call_tmp[648385]))
            (114238 'move' tmp[114236](114234 'deref' call_tmp[648390]))
            (934925 call on_fn[934921] tmp[114236])
            function on_fn[934921](const in arg dummy_locale_arg[934923]:chpl_localeID_t[209294]) : void[4] "on"
            {
              (114231 call _freePrivatizedClassHelp pid[934950] original[934953])
              (934928 return _void[55])
            }
            {
            }
          }
          (114258 call _downEndCount _cobeginCount[114249] nil[44])
          (934948 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114273 call _endCountFree _cobeginCount[114249])
          }
        }
        (114278 call _waitEndCount _cobeginCount[114249] 1 2)
      }
      (515609 return _void[55])
    }
    label _end__freePrivatizedClass[515611]
    (515613 return _void[55])
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[114292](arg value[114290]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648397] "maybe param" "maybe type" "temp"
    (648400 'move' call_tmp[648397](114295 call pid _mt[243] value[114290]))
    const pid[114298] "dead at end of block" "const" "insert auto destroy"
    (542528 'init var' pid[114298] call_tmp[648397])
    (114301 'end of statement')
    unknown call_tmp[648402] "expr temp" "maybe param" "maybe type" "temp"
    (648405 'move' call_tmp[648402](358953 call here[90435]))
    unknown call_tmp[648409] "maybe param" "maybe type" "temp"
    (648412 'move' call_tmp[648409](114304 call id _mt[243] call_tmp[648402]))
    const hereID[114307] "dead at end of block" "const" "insert auto destroy"
    (542530 'init var' hereID[114307] call_tmp[648409])
    (114310 'end of statement')
    unknown call_tmp[648416] "maybe param" "maybe type" "temp"
    (648419 'move' call_tmp[648416](114318 call(114314 call (partial) dsiGetReprivatizeData _mt[243] value[114290])))
    const reprivatizeData[114319] "dead at end of block" "const" "insert auto destroy"
    (542532 'init var' reprivatizeData[114319] call_tmp[648416])
    (114322 'end of statement')
    const tmp[114339] "const" "temp"
    unknown call_tmp[648421] "expr temp" "maybe param" "maybe type" "temp"
    (648424 'move' call_tmp[648421](114326 call Locales[113656] 0))
    unknown call_tmp[648426] "expr temp" "maybe param" "maybe type" "temp"
    (648429 'move' call_tmp[648426](114336 '_wide_get_locale' call_tmp[648421]))
    (114341 'move' tmp[114339](114337 'deref' call_tmp[648426]))
    (934960 call on_fn[934956] tmp[114339])
    function on_fn[934956](const in arg dummy_locale_arg[934958]:chpl_localeID_t[209294]) : void[4] "on"
    {
      (114334 call _reprivatizeHelp value[114290] value[114290] pid[114298] hereID[114307] reprivatizeData[114319])
      (479109 'end of statement' pid[114298] hereID[114307] reprivatizeData[114319])
      (934963 return _void[55])
    }
    {
    }
    function _reprivatizeHelp[114351](arg parentValue[114349]:_any[178](?), arg originalValue[114353]:_any[178](?), arg pid[114355]:_any[178](?), arg hereID[114357]:_any[178](?), arg reprivatizeData[114359]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[114362] "dead at end of block" "insert auto destroy"
      (542534 'init var' newValue[114362] originalValue[114353])
      (114365 'end of statement')
      unknown call_tmp[648431] "expr temp" "maybe param" "maybe type" "temp"
      (648434 'move' call_tmp[648431](358956 call here[90435]))
      unknown call_tmp[648438] "expr temp" "maybe param" "maybe type" "temp"
      (648441 'move' call_tmp[648438](114369 call id _mt[243] call_tmp[648431]))
      unknown call_tmp[648443] "expr temp" "maybe param" "maybe type" "temp"
      (648446 'move' call_tmp[648443](114372 call != hereID[114357] call_tmp[648438]))
      unknown call_tmp[648448] "expr temp" "maybe param" "maybe type" "temp"
      (648451 'move' call_tmp[648448](114396 call _cond_test call_tmp[648443]))
      if call_tmp[648448]
      {
        unknown call_tmp[648453] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (648456 'move' call_tmp[648453](114377 'typeof' newValue[114362]))
        unknown call_tmp[648458] "expr temp" "maybe param" "maybe type" "temp"
        (648461 'move' call_tmp[648458](114380 call chpl_getPrivatizedCopy call_tmp[648453] pid[114355]))
        (114381 call = newValue[114362] call_tmp[648458])
        (479113 'end of statement' newValue[114362] newValue[114362])
        (114394 call(114388 call (partial) dsiReprivatize _mt[243] newValue[114362]) parentValue[114349] reprivatizeData[114359])
        (479116 'end of statement' newValue[114362])
      }
      {
        const _cobeginCount[114479] "const" "end count" "temp"
        (114500 'move' _cobeginCount[114479](114497 call _endCountAlloc 1))
        (114492 call _upEndCount _cobeginCount[114479] 1 2)
        (479118 'end of statement')
        (934985 call cobegin_fn[934983] reprivatizeData[114359] originalValue[114353] newValue[114362] pid[114355] hereID[114357])
        function cobegin_fn[934983](arg reprivatizeData[934990]:_any[178](?), arg originalValue[934993]:_any[178](?), arg newValue[934996], arg pid[934999]:_any[178](?), arg hereID[935002]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648467] "expr temp" "maybe param" "maybe type" "temp"
          (648470 'move' call_tmp[648467](114401 call left _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648474] "expr temp" "maybe param" "maybe type" "temp"
          (648477 'move' call_tmp[648474](114404 call _instance _mt[243] call_tmp[648467]))
          unknown call_tmp[648479] "expr temp" "maybe param" "maybe type" "temp"
          (648482 'move' call_tmp[648479](114408 call != call_tmp[648474] nil[44]))
          unknown call_tmp[648484] "expr temp" "maybe param" "maybe type" "temp"
          (648487 'move' call_tmp[648484](114434 call _cond_test call_tmp[648479]))
          if call_tmp[648484]
          {
            const tmp[114426] "const" "temp"
            unknown call_tmp[648491] "expr temp" "maybe param" "maybe type" "temp"
            (648494 'move' call_tmp[648491](114411 call left _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648496] "expr temp" "maybe param" "maybe type" "temp"
            (648499 'move' call_tmp[648496](114423 '_wide_get_locale' call_tmp[648491]))
            (114428 'move' tmp[114426](114424 'deref' call_tmp[648496]))
            (934969 call on_fn[934965] tmp[114426])
            function on_fn[934965](const in arg dummy_locale_arg[934967]:chpl_localeID_t[209294]) : void[4] "on"
            {
              (114421 call _reprivatizeHelp newValue[934996] originalValue[934993] pid[934999] hereID[935002] reprivatizeData[934990])
              (479119 'end of statement' newValue[934996])
              (934972 return _void[55])
            }
            {
            }
          }
          (114482 call _downEndCount _cobeginCount[114479] nil[44])
          (934988 return _void[55])
        }
        {
        }
        (935007 call cobegin_fn[935005] reprivatizeData[114359] originalValue[114353] newValue[114362] pid[114355] hereID[114357])
        function cobegin_fn[935005](arg reprivatizeData[935012]:_any[178](?), arg originalValue[935015]:_any[178](?), arg newValue[935018], arg pid[935021]:_any[178](?), arg hereID[935024]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648503] "expr temp" "maybe param" "maybe type" "temp"
          (648506 'move' call_tmp[648503](114441 call right _mt[243] chpl_localeTree[155188]))
          unknown call_tmp[648510] "expr temp" "maybe param" "maybe type" "temp"
          (648513 'move' call_tmp[648510](114444 call _instance _mt[243] call_tmp[648503]))
          unknown call_tmp[648515] "expr temp" "maybe param" "maybe type" "temp"
          (648518 'move' call_tmp[648515](114448 call != call_tmp[648510] nil[44]))
          unknown call_tmp[648520] "expr temp" "maybe param" "maybe type" "temp"
          (648523 'move' call_tmp[648520](114474 call _cond_test call_tmp[648515]))
          if call_tmp[648520]
          {
            const tmp[114466] "const" "temp"
            unknown call_tmp[648527] "expr temp" "maybe param" "maybe type" "temp"
            (648530 'move' call_tmp[648527](114451 call right _mt[243] chpl_localeTree[155188]))
            unknown call_tmp[648532] "expr temp" "maybe param" "maybe type" "temp"
            (648535 'move' call_tmp[648532](114463 '_wide_get_locale' call_tmp[648527]))
            (114468 'move' tmp[114466](114464 'deref' call_tmp[648532]))
            (934978 call on_fn[934974] tmp[114466])
            function on_fn[934974](const in arg dummy_locale_arg[934976]:chpl_localeID_t[209294]) : void[4] "on"
            {
              (114461 call _reprivatizeHelp newValue[935018] originalValue[935015] pid[935021] hereID[935024] reprivatizeData[935012])
              (479122 'end of statement' newValue[935018])
              (934981 return _void[55])
            }
            {
            }
          }
          (114488 call _downEndCount _cobeginCount[114479] nil[44])
          (935010 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114503 call _endCountFree _cobeginCount[114479])
          }
        }
        (114508 call _waitEndCount _cobeginCount[114479] 1 2)
      }
      (515617 return _void[55])
    }
    (515619 return _void[55])
  }
  function _makeIndexTuple[114521](param arg rank[114519]:_any[178](?), arg t[114524]:_tuple[56199](?), param arg expand[114529]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515623] "RVV" "temp"
    (515628 'move' ret[515623](515627 'deref' t[114524]))
    (515625 return ret[515623])
  }
  where {
    unknown call_tmp[648539] "expr temp" "maybe param" "maybe type" "temp"
    (648542 'move' call_tmp[648539](114535 call size _mt[243] t[114524]))
    (114538 call == rank[114519] call_tmp[648539])
  }
  function _makeIndexTuple[114551](param arg rank[114549]:_any[178](?), arg t[114554]:_tuple[56199](?), param arg expand[114559]:bool[10] =
  0) : _unknown[51] "no return value for void"
  {
    (114589 call compilerError "index rank must match domain rank")
    (515630 return _void[55])
  }
  where {
    unknown call_tmp[648546] "expr temp" "maybe param" "maybe type" "temp"
    (648549 'move' call_tmp[648546](114565 call size _mt[243] t[114554]))
    (114568 call != rank[114549] call_tmp[648546])
  }
  function _makeIndexTuple[114599](param arg rank[114597]:_any[178](?), arg val[114602]:integral[199](?), param arg expand[114607]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515634] "RVV" "temp"
    unknown tmp[424039] "maybe param" "temp"
    (424050 'move' tmp[424039] expand[114607])
    unknown call_tmp[648551] "expr temp" "maybe param" "maybe type" "temp"
    (648554 'move' call_tmp[648551](424052 call _cond_invalid tmp[424039]))
    if call_tmp[648551]
    {
      (424055 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564153] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564154] "maybe param" "temp"
    unknown call_tmp[648556] "expr temp" "maybe param" "maybe type" "temp"
    (648559 'move' call_tmp[648556](424040 call isTrue tmp[424039]))
    (564159 'move' tmp[564154](564157 call _cond_test call_tmp[648556]))
    if tmp[564154]
    {
      (564164 'move' tmp[564153](564161 '_paramFoldLogical' tmp[564154] 1))
    }
    {
      unknown tmp[564166] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[648561] "expr temp" "maybe param" "maybe type" "temp"
      (648564 'move' call_tmp[648561](114614 call == rank[114597] 1))
      (564168 'move' tmp[564166](424044 call isTrue call_tmp[648561]))
      (564173 'move' tmp[564153](564170 '_paramFoldLogical' tmp[564154] tmp[564166]))
    }
    unknown call_tmp[648566] "expr temp" "maybe param" "maybe type" "temp"
    (648569 'move' call_tmp[648566](114701 call _cond_test tmp[564153]))
    if call_tmp[648566]
    {
      unknown t[114623] "dead at end of block" "insert auto destroy"
      unknown call_tmp[648571] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648574 'move' call_tmp[648571](114620 'typeof' val[114602]))
      unknown call_tmp[648576] "expr temp" "maybe param" "maybe type" "temp"
      (648579 'move' call_tmp[648576](114621 call * rank[114597] call_tmp[648571]))
      (542536 'default init var' t[114623] call_tmp[648576])
      (114626 'end of statement')
      {
        unknown i[114643] "dead at end of block" "insert auto destroy"
        (542538 'init var' i[114643] 0)
        (479130 'end of statement')
        unknown tmp[114644] "maybe param" "temp"
        unknown call_tmp[648581] "expr temp" "maybe param" "maybe type" "temp"
        (648584 'move' call_tmp[648581](114631 call - rank[114597] 1))
        (114656 'move' tmp[114644](114654 call chpl_compute_low_param_loop_bound 0 call_tmp[648581]))
        unknown tmp[114645] "maybe param" "temp"
        unknown call_tmp[648586] "expr temp" "maybe param" "maybe type" "temp"
        (648589 'move' call_tmp[648586](114661 call - rank[114597] 1))
        (114666 'move' tmp[114645](114664 call chpl_compute_high_param_loop_bound 0 call_tmp[648586]))
        unknown tmp[114646] "maybe param" "temp"
        (114669 'move' tmp[114646] 1)
        ParamForLoop[114671]
        { i[114643] tmp[114644] tmp[114645] tmp[114646]
          unknown call_tmp[648591] "expr temp" "maybe param" "maybe type" "temp"
          (648594 'move' call_tmp[648591](114638 call t[114623] i[114643]))
          (114640 call = call_tmp[648591] val[114602])
          (479131 'end of statement' t[114623] i[114643])
        }
        label _unused_continueLabel[114648]
        label _breakLabel[114647]
      }
      (515639 'move' ret[515634](515638 'deref' t[114623]))
      gotoReturn _end__makeIndexTuple[515632] _end__makeIndexTuple[515632]
      (479134 'end of statement' t[114623])
    }
    {
      unknown call_tmp[648596] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648599 'move' call_tmp[648596](114685 'typeof' val[114602]))
      unknown call_tmp[648601] "expr temp" "maybe param" "maybe type" "temp"
      (648604 'move' call_tmp[648601](114687 call _cast string[26] call_tmp[648596]))
      (114690 call compilerWarning call_tmp[648601])
      (479136 'end of statement')
      (114696 call compilerError "index rank must match domain rank")
      (479137 'end of statement')
      (515644 'move' ret[515634](515643 'deref' val[114602]))
      gotoReturn _end__makeIndexTuple[515632] _end__makeIndexTuple[515632]
    }
    label _end__makeIndexTuple[515632]
    (515636 return ret[515634])
  }
  function _newArray[114712](arg value[114710]:_any[178](?)) : _unknown[51] "no copy return"
  {
    unknown ret[515650] "RVV" "temp"
    unknown call_tmp[648606] "expr temp" "maybe param" "maybe type" "temp"
    (648609 'move' call_tmp[648606](114717 call _isPrivatized value[114710]))
    unknown call_tmp[648611] "expr temp" "maybe param" "maybe type" "temp"
    (648614 'move' call_tmp[648611](114737 call _cond_test call_tmp[648606]))
    if call_tmp[648611]
    {
      unknown call_tmp[648616] "expr temp" "maybe param" "maybe type" "temp"
      (648619 'move' call_tmp[648616](114723 call _newPrivatizedClass value[114710]))
      unknown call_tmp[648621] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648624 'move' call_tmp[648621](747765 'new' _array[133588](?) call_tmp[648616] value[114710]))
      (515655 'move' ret[515650](515654 'deref' call_tmp[648621]))
      gotoReturn _end__newArray[515648] _end__newArray[515648]
    }
    {
      unknown call_tmp[648626] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648629 'move' call_tmp[648626](747766 'new' _array[133588](?) nullPid[113712] value[114710]))
      (515660 'move' ret[515650](515659 'deref' call_tmp[648626]))
      gotoReturn _end__newArray[515648] _end__newArray[515648]
    }
    label _end__newArray[515648]
    (515652 return ret[515650])
  }
  function _getDomain[114750](arg value[114748]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515666] "RVV" "temp"
    unknown call_tmp[648631] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648634 'move' call_tmp[648631](114754 'typeof' value[114748]))
    unknown call_tmp[648636] "expr temp" "maybe param" "maybe type" "temp"
    (648639 'move' call_tmp[648636](114756 call _to_unmanaged call_tmp[648631]))
    unknown call_tmp[648641] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648644 'move' call_tmp[648641](114758 'typeof' value[114748]))
    unknown call_tmp[648646] "expr temp" "maybe param" "maybe type" "temp"
    (648649 'move' call_tmp[648646](114759 call != call_tmp[648636] call_tmp[648641]))
    unknown call_tmp[648651] "expr temp" "maybe param" "maybe type" "temp"
    (648654 'move' call_tmp[648651](114782 call _cond_test call_tmp[648646]))
    if call_tmp[648651]
    {
      (114780 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[648656] "expr temp" "maybe param" "maybe type" "temp"
    (648659 'move' call_tmp[648656](114791 call _isPrivatized value[114748]))
    unknown call_tmp[648661] "expr temp" "maybe param" "maybe type" "temp"
    (648664 'move' call_tmp[648661](114815 call _cond_test call_tmp[648656]))
    if call_tmp[648661]
    {
      unknown call_tmp[648668] "expr temp" "maybe param" "maybe type" "temp"
      (648671 'move' call_tmp[648668](114795 call pid _mt[243] value[114748]))
      unknown call_tmp[648673] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648676 'move' call_tmp[648673](747767 'new' _domain[125902](?) call_tmp[648668] value[114748](_unowned = 1)))
      (515671 'move' ret[515666](515670 'deref' call_tmp[648673]))
      gotoReturn _end__getDomain[515664] _end__getDomain[515664]
    }
    {
      unknown call_tmp[648678] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648681 'move' call_tmp[648678](747768 'new' _domain[125902](?) nullPid[113712] value[114748](_unowned = 1)))
      (515676 'move' ret[515666](515675 'deref' call_tmp[648678]))
      gotoReturn _end__getDomain[515664] _end__getDomain[515664]
    }
    label _end__getDomain[515664]
    (515668 return ret[515666])
  }
  function _getDistribution[114827](arg value[114825]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515682] "RVV" "temp"
    unknown call_tmp[648683] "expr temp" "maybe param" "maybe type" "temp"
    (648686 'move' call_tmp[648683](114832 call _isPrivatized value[114825]))
    unknown call_tmp[648688] "expr temp" "maybe param" "maybe type" "temp"
    (648691 'move' call_tmp[648688](114856 call _cond_test call_tmp[648683]))
    if call_tmp[648688]
    {
      unknown call_tmp[648695] "expr temp" "maybe param" "maybe type" "temp"
      (648698 'move' call_tmp[648695](114836 call pid _mt[243] value[114825]))
      unknown call_tmp[648700] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648703 'move' call_tmp[648700](747769 'new' _distribution[118967](?) call_tmp[648695] value[114825](_unowned = 1)))
      (515687 'move' ret[515682](515686 'deref' call_tmp[648700]))
      gotoReturn _end__getDistribution[515680] _end__getDistribution[515680]
    }
    {
      unknown call_tmp[648705] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648708 'move' call_tmp[648705](747770 'new' _distribution[118967](?) nullPid[113712] value[114825](_unowned = 1)))
      (515692 'move' ret[515682](515691 'deref' call_tmp[648705]))
      gotoReturn _end__getDistribution[515680] _end__getDistribution[515680]
    }
    label _end__getDistribution[515680]
    (515684 return ret[515682])
  }
  function chpl__buildDomainRuntimeType[114871](arg dist[114868]:_distribution[118967](?), param arg rank[114874]:int(64)[13], arg idxType[114878]:_any[178](?) =
  int(64)[13], param arg stridable[114883]:bool[10] =
  0) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515698] "RVV" "temp" "type variable"
    unknown call_tmp[648710] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648713 'move' call_tmp[648710](747771 'new' _domain[125902](?) dist[114868] rank[114874] idxType[114878] stridable[114883]))
    (515703 'move' ret[515698](515702 'deref' call_tmp[648710]))
    (515700 return ret[515698])
  }
  function chpl__buildDomainRuntimeType[114906](arg dist[114903]:_distribution[118967](?), arg idxType[114908]:_any[178](?), param arg parSafe[114912]:bool[10] =
  1) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515707] "RVV" "temp" "type variable"
    unknown call_tmp[648715] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648718 'move' call_tmp[648715](747772 'new' _domain[125902](?) dist[114903] idxType[114908] parSafe[114912]))
    (515712 'move' ret[515707](515711 'deref' call_tmp[648715]))
    (515709 return ret[515707])
  }
  function chpl__buildSparseDomainRuntimeType[114934](arg dist[114931]:_distribution[118967](?), arg parentDom[114937]:_domain[125902](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515716] "RVV" "temp" "type variable"
    unknown call_tmp[648720] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648723 'move' call_tmp[648720](747773 'new' _domain[125902](?) dist[114931] parentDom[114937]))
    (515721 'move' ret[515716](515720 'deref' call_tmp[648720]))
    (515718 return ret[515716])
  }
  function chpl__convertRuntimeTypeToValue[114957](arg dist[114954]:_distribution[118967](?), param arg rank[114960]:int(64)[13], arg idxType[114964]:_any[178](?) =
  int(64)[13], param arg stridable[114968]:bool[10], param arg isNoInit[114972]:bool[10]) : _unknown[51]
  {
    unknown ret[515725] "RVV" "temp"
    unknown call_tmp[648725] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648728 'move' call_tmp[648725](747774 'new' _domain[125902](?) dist[114954] rank[114960] idxType[114964] stridable[114968]))
    (515730 'move' ret[515725](515729 'deref' call_tmp[648725]))
    (515727 return ret[515725])
  }
  function chpl__convertRuntimeTypeToValue[114994](arg dist[114991]:_distribution[118967](?), arg idxType[114996]:_any[178](?), param arg parSafe[114999]:bool[10], param arg isNoInit[115003]:bool[10]) : _unknown[51]
  {
    unknown ret[515734] "RVV" "temp"
    unknown call_tmp[648730] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648733 'move' call_tmp[648730](747775 'new' _domain[125902](?) dist[114991] idxType[114996] parSafe[114999]))
    (515739 'move' ret[515734](515738 'deref' call_tmp[648730]))
    (515736 return ret[515734])
  }
  function chpl__convertRuntimeTypeToValue[115024](arg dist[115021]:_distribution[118967](?), arg parentDom[115027]:_domain[125902](?), param arg isNoInit[115031]:bool[10]) : _unknown[51]
  {
    unknown ret[515743] "RVV" "temp"
    unknown call_tmp[648735] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648738 'move' call_tmp[648735](747776 'new' _domain[125902](?) dist[115021] parentDom[115027]))
    (515748 'move' ret[515743](515747 'deref' call_tmp[648735]))
    (515745 return ret[515743])
  }
  function chpl__convertValueToRuntimeType[115051](arg dom[115048]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[515752] "RVV" "temp" "type variable"
    unknown call_tmp[648742] "expr temp" "maybe param" "maybe type" "temp"
    (648745 'move' call_tmp[648742](115064 call dist _mt[243] dom[115048]))
    unknown call_tmp[648749] "expr temp" "maybe param" "maybe type" "temp"
    (648752 'move' call_tmp[648749](115069 call _value _mt[243] dom[115048]))
    unknown call_tmp[648756] "expr temp" "maybe param" "maybe type" "temp"
    (648759 'move' call_tmp[648756](115072 call rank _mt[243] call_tmp[648749]))
    unknown call_tmp[648763] "expr temp" "maybe param" "maybe type" "temp"
    (648766 'move' call_tmp[648763](115076 call _value _mt[243] dom[115048]))
    unknown call_tmp[648770] "expr temp" "maybe param" "maybe type" "temp"
    (648773 'move' call_tmp[648770](115079 call idxType _mt[243] call_tmp[648763]))
    unknown call_tmp[648777] "expr temp" "maybe param" "maybe type" "temp"
    (648780 'move' call_tmp[648777](115083 call _value _mt[243] dom[115048]))
    unknown call_tmp[648784] "expr temp" "maybe param" "maybe type" "temp"
    (648787 'move' call_tmp[648784](115086 call stridable _mt[243] call_tmp[648777]))
    unknown call_tmp[648789] "expr temp" "maybe param" "maybe type" "temp"
    (648792 'move' call_tmp[648789](115089 call chpl__buildDomainRuntimeType call_tmp[648742] call_tmp[648756] call_tmp[648770] call_tmp[648784]))
    (515757 'move' ret[515752](515756 'deref' call_tmp[648789]))
    (515754 return ret[515752])
  }
  where {
    { scopeless type
      unknown call_type_tmp[491952] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648796] "expr temp" "maybe param" "maybe type" "temp"
      (648799 'move' call_tmp[648796](115055 call _value _mt[243] dom[115048]))
      (491956 'move' call_type_tmp[491952](115058 'typeof' call_tmp[648796]))
    }
    (354197 'is_subtype' BaseRectangularDom[382155](?) call_type_tmp[491952])
  }
  function chpl__convertValueToRuntimeType[115102](arg dom[115099]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[515761] "RVV" "temp" "type variable"
    unknown call_tmp[648803] "expr temp" "maybe param" "maybe type" "temp"
    (648806 'move' call_tmp[648803](115115 call dist _mt[243] dom[115099]))
    unknown call_tmp[648810] "expr temp" "maybe param" "maybe type" "temp"
    (648813 'move' call_tmp[648810](115120 call _value _mt[243] dom[115099]))
    unknown call_tmp[648817] "expr temp" "maybe param" "maybe type" "temp"
    (648820 'move' call_tmp[648817](115123 call idxType _mt[243] call_tmp[648810]))
    unknown call_tmp[648824] "expr temp" "maybe param" "maybe type" "temp"
    (648827 'move' call_tmp[648824](115127 call _value _mt[243] dom[115099]))
    unknown call_tmp[648831] "expr temp" "maybe param" "maybe type" "temp"
    (648834 'move' call_tmp[648831](115132 call parSafe _mt[243] call_tmp[648824]))
    unknown call_tmp[648836] "expr temp" "maybe param" "maybe type" "temp"
    (648839 'move' call_tmp[648836](115135 call chpl__buildDomainRuntimeType call_tmp[648803] call_tmp[648817] call_tmp[648831]))
    (515766 'move' ret[515761](515765 'deref' call_tmp[648836]))
    (515763 return ret[515761])
  }
  where {
    { scopeless type
      unknown call_type_tmp[491958] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648843] "expr temp" "maybe param" "maybe type" "temp"
      (648846 'move' call_tmp[648843](115106 call _value _mt[243] dom[115099]))
      (491962 'move' call_type_tmp[491958](115109 'typeof' call_tmp[648843]))
    }
    (354198 'is_subtype' BaseAssociativeDom[382160](?) call_type_tmp[491958])
  }
  function chpl__convertValueToRuntimeType[115148](arg dom[115145]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[515770] "RVV" "temp" "type variable"
    unknown call_tmp[648850] "expr temp" "maybe param" "maybe type" "temp"
    (648853 'move' call_tmp[648850](115161 call dist _mt[243] dom[115145]))
    unknown call_tmp[648857] "expr temp" "maybe param" "maybe type" "temp"
    (648860 'move' call_tmp[648857](115166 call _value _mt[243] dom[115145]))
    unknown call_tmp[648864] "expr temp" "maybe param" "maybe type" "temp"
    (648867 'move' call_tmp[648864](115171 call parentDom _mt[243] call_tmp[648857]))
    unknown call_tmp[648869] "expr temp" "maybe param" "maybe type" "temp"
    (648872 'move' call_tmp[648869](115174 call chpl__buildSparseDomainRuntimeType call_tmp[648850] call_tmp[648864]))
    (515775 'move' ret[515770](515774 'deref' call_tmp[648869]))
    (515772 return ret[515770])
  }
  where {
    { scopeless type
      unknown call_type_tmp[491964] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648876] "expr temp" "maybe param" "maybe type" "temp"
      (648879 'move' call_tmp[648876](115152 call _value _mt[243] dom[115145]))
      (491968 'move' call_type_tmp[491964](115155 'typeof' call_tmp[648876]))
    }
    (354199 'is_subtype' BaseSparseDom[382165](?) call_type_tmp[491964])
  }
  function chpl__convertValueToRuntimeType[115187](arg dom[115184]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[515779] "RVV" "temp" "type variable"
    (115211 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, or Bas 0)
    (479155 'end of statement')
    (515784 'move' ret[515779](515783 'deref' 0))
    (515781 return ret[515779])
  }
  function chpl__buildArrayRuntimeType[115225](arg dom[115222]:_domain[125902](?), arg eltType[115227]:_any[178](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515788] "RVV" "temp" "type variable"
    unknown call_tmp[648883] "expr temp" "maybe param" "maybe type" "temp"
    (648886 'move' call_tmp[648883](115238 call(115232 call (partial) buildArray _mt[243] dom[115222]) eltType[115227] 1))
    (515793 'move' ret[515788](515792 'deref' call_tmp[648883]))
    (515790 return ret[515788])
  }
  function chpl__convertRuntimeTypeToValue[115250](arg dom[115247]:_domain[125902](?), arg eltType[115252]:_any[178](?), param arg isNoInit[115255]:bool[10]) : _unknown[51]
  {
    unknown ret[515797] "RVV" "temp"
    unknown call_tmp[648890] "expr temp" "maybe param" "maybe type" "temp"
    (648893 'move' call_tmp[648890](115265 call ! isNoInit[115255]))
    unknown call_tmp[648895] "expr temp" "maybe param" "maybe type" "temp"
    (648898 'move' call_tmp[648895](115267 call(115259 call (partial) buildArray _mt[243] dom[115247]) eltType[115252] call_tmp[648890]))
    (515802 'move' ret[515797](515801 'deref' call_tmp[648895]))
    (515799 return ret[515797])
  }
  function chpl__convertValueToRuntimeType[115281](arg arr[115278]:_array[133588](?)) type : _unknown[51]
  {
    unknown ret[515806] "RVV" "temp" "type variable"
    unknown call_tmp[648902] "expr temp" "maybe param" "maybe type" "temp"
    (648905 'move' call_tmp[648902](115285 call _dom _mt[243] arr[115278]))
    unknown call_tmp[648909] "expr temp" "maybe param" "maybe type" "temp"
    (648912 'move' call_tmp[648909](115290 call eltType _mt[243] arr[115278]))
    unknown call_tmp[648914] "expr temp" "maybe param" "maybe type" "temp"
    (648917 'move' call_tmp[648914](115293 call chpl__buildArrayRuntimeType call_tmp[648902] call_tmp[648909]))
    (515811 'move' ret[515806](515810 'deref' call_tmp[648914]))
    (515808 return ret[515806])
  }
  function _getLiteralType[115303](arg t[115301]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[515815] "RVV" "temp" "type variable"
    unknown call_tmp[648919] "expr temp" "maybe param" "maybe type" "temp"
    (648922 'move' call_tmp[648919](115307 call != t[115301] c_string[19]))
    unknown call_tmp[648924] "expr temp" "maybe param" "maybe type" "temp"
    (648927 'move' call_tmp[648924](115315 call _cond_test call_tmp[648919]))
    if call_tmp[648924]
    {
      (515820 'move' ret[515815](515819 'deref' t[115301]))
      gotoReturn _end__getLiteralType[515813] _end__getLiteralType[515813]
    }
    {
      (515825 'move' ret[515815](515824 'deref' string[26]))
      gotoReturn _end__getLiteralType[515813] _end__getLiteralType[515813]
    }
    label _end__getLiteralType[515813]
    (515817 return ret[515815])
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[115325] "config" "no doc" "param"
  unknown arrayLiteralLowBound[115330] "config" "no doc" "param"
  unknown capturedIteratorLowBound[115335] "config" "no doc" "param"
  function chpl__buildArrayExpr[115346](arg elems[115343]:_any[178](?) ...) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[515831] "RVV" "temp"
    unknown tmp[424060] "maybe param" "temp"
    (424071 'move' tmp[424060](115350 call == CHPL_WARN_DOMAIN_LITERAL[115325] "true"))
    unknown call_tmp[648929] "expr temp" "maybe param" "maybe type" "temp"
    (648932 'move' call_tmp[648929](424073 call _cond_invalid tmp[424060]))
    if call_tmp[648929]
    {
      (424076 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564180] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564181] "maybe param" "temp"
    unknown call_tmp[648934] "expr temp" "maybe param" "maybe type" "temp"
    (648937 'move' call_tmp[648934](424061 call isTrue tmp[424060]))
    (564186 'move' tmp[564181](564184 call _cond_test call_tmp[648934]))
    if tmp[564181]
    {
      unknown tmp[564188] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[648939] "expr temp" "maybe param" "maybe type" "temp"
      (648942 'move' call_tmp[648939](115356 call elems[115343] 0))
      unknown call_tmp[648944] "expr temp" "maybe param" "maybe type" "temp"
      (648947 'move' call_tmp[648944](115358 call isRange call_tmp[648939]))
      (564190 'move' tmp[564188](424064 call isTrue call_tmp[648944]))
      (564195 'move' tmp[564180](564192 '_paramFoldLogical' tmp[564181] tmp[564188]))
    }
    {
      (564200 'move' tmp[564180](564197 '_paramFoldLogical' tmp[564181] 0))
    }
    unknown call_tmp[648949] "expr temp" "maybe param" "maybe type" "temp"
    (648952 'move' call_tmp[648949](115417 call _cond_test tmp[564180]))
    if call_tmp[648949]
    {
      (115414 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    { scopeless type
      unknown call_type_tmp[491970] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648954] "expr temp" "maybe param" "maybe type" "temp"
      (648957 'move' call_tmp[648954](115426 call elems[115343] 0))
      (491974 'move' call_type_tmp[491970](115427 'typeof' call_tmp[648954]))
    }
    unknown elemType[115430] "dead at end of block" "insert auto destroy" "type variable"(115429 call _getLiteralType call_type_tmp[491970])
    (542549 'move' elemType[115430](542547 call _getLiteralType call_type_tmp[491970]))
    unknown A[115445] "dead at end of block" "insert auto destroy" "unsafe"
    unknown call_tmp[648959] "expr temp" "maybe param" "maybe type" "temp"
    (648962 'move' call_tmp[648959](115434 call chpl_build_low_bounded_range arrayLiteralLowBound[115330]))
    unknown call_tmp[648964] "expr temp" "maybe param" "maybe type" "temp"
    (648967 'move' call_tmp[648964](115437 call # call_tmp[648959] k[115341]))
    unknown call_tmp[648969] "expr temp" "maybe param" "maybe type" "temp"
    (648972 'move' call_tmp[648969](115441 call chpl__ensureDomainExpr call_tmp[648964]))
    unknown call_tmp[648974] "expr temp" "maybe param" "maybe type" "temp"
    (648977 'move' call_tmp[648974](115443 call chpl__buildArrayRuntimeType call_tmp[648969] elemType[115430]))
    (542551 'default init var' A[115445] call_tmp[648974])
    (115448 'end of statement' elemType[115430])
    {
      unknown i[115568] "dead at end of block" "insert auto destroy"
      (542553 'init var' i[115568] 0)
      (479165 'end of statement')
      unknown tmp[115569] "maybe param" "temp"
      unknown call_tmp[648979] "expr temp" "maybe param" "maybe type" "temp"
      (648982 'move' call_tmp[648979](115452 call - k[115341] 1))
      (115581 'move' tmp[115569](115579 call chpl_compute_low_param_loop_bound 0 call_tmp[648979]))
      unknown tmp[115570] "maybe param" "temp"
      unknown call_tmp[648984] "expr temp" "maybe param" "maybe type" "temp"
      (648987 'move' call_tmp[648984](115586 call - k[115341] 1))
      (115591 'move' tmp[115570](115589 call chpl_compute_high_param_loop_bound 0 call_tmp[648984]))
      unknown tmp[115571] "maybe param" "temp"
      (115594 'move' tmp[115571] 1)
      ParamForLoop[115596]
      { i[115568] tmp[115569] tmp[115570] tmp[115571]
        {
          { scopeless type
            unknown call_type_tmp[491976] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[648989] "expr temp" "maybe param" "maybe type" "temp"
            (648992 'move' call_tmp[648989](115460 call elems[115343] i[115568]))
            (491980 'move' call_type_tmp[491976](115461 'typeof' call_tmp[648989]))
          }
          unknown currType[115464] "dead at end of block" "insert auto destroy" "type variable"(115463 call _getLiteralType call_type_tmp[491976])
          (542558 'move' currType[115464](542556 call _getLiteralType call_type_tmp[491976]))
          (479166 'end of statement' i[115568])
          unknown call_tmp[648994] "expr temp" "maybe param" "maybe type" "temp"
          (648997 'move' call_tmp[648994](115470 call != currType[115464] elemType[115430]))
          unknown call_tmp[648999] "expr temp" "maybe param" "maybe type" "temp"
          (649002 'move' call_tmp[648999](115550 call _cond_test call_tmp[648994]))
          if call_tmp[648999]
          {
            unknown call_tmp[649004] "expr temp" "maybe param" "maybe type" "temp"
            (649007 'move' call_tmp[649004](115492 call _cast string[26] i[115568]))
            unknown call_tmp[649009] "expr temp" "maybe param" "maybe type" "temp"
            (649012 'move' call_tmp[649009](115494 call + "Array literal element " call_tmp[649004]))
            unknown call_tmp[649014] "expr temp" "maybe param" "maybe type" "temp"
            (649017 'move' call_tmp[649014](115513 call + call_tmp[649009] " expected to be of type "))
            unknown call_tmp[649019] "expr temp" "maybe param" "maybe type" "temp"
            (649022 'move' call_tmp[649019](115517 call _cast string[26] elemType[115430]))
            unknown call_tmp[649024] "expr temp" "maybe param" "maybe type" "temp"
            (649027 'move' call_tmp[649024](115519 call + call_tmp[649014] call_tmp[649019]))
            unknown call_tmp[649029] "expr temp" "maybe param" "maybe type" "temp"
            (649032 'move' call_tmp[649029](115538 call + call_tmp[649024] " but is of type "))
            unknown call_tmp[649034] "expr temp" "maybe param" "maybe type" "temp"
            (649037 'move' call_tmp[649034](115542 call _cast string[26] currType[115464]))
            unknown call_tmp[649039] "expr temp" "maybe param" "maybe type" "temp"
            (649042 'move' call_tmp[649039](115544 call + call_tmp[649029] call_tmp[649034]))
            (115547 call compilerError call_tmp[649039])
            (479168 'end of statement' i[115568] elemType[115430] currType[115464])
          }
          unknown call_tmp[649044] "expr temp" "maybe param" "maybe type" "temp"
          (649047 'move' call_tmp[649044](115557 call + i[115568] arrayLiteralLowBound[115330]))
          unknown call_tmp[649049] "expr temp" "maybe param" "maybe type" "temp"
          (649052 'move' call_tmp[649049](115560 call A[115445] call_tmp[649044]))
          unknown call_tmp[649054] "expr temp" "maybe param" "maybe type" "temp"
          (649057 'move' call_tmp[649054](115564 call elems[115343] i[115568]))
          (115565 call = call_tmp[649049] call_tmp[649054])
          (479172 'end of statement' A[115445] i[115568] i[115568])
        }
      }
      label _unused_continueLabel[115573]
      label _breakLabel[115572]
    }
    (515836 'move' ret[515831](515835 'deref' A[115445]))
    gotoReturn _end_chpl__buildArrayExpr[515829] _end_chpl__buildArrayExpr[515829]
    (479176 'end of statement' A[115445])
    label _end_chpl__buildArrayExpr[515829]
    (515833 return ret[515831])
  }
  function chpl__buildAssociativeArrayExpr[115617](arg elems[115614]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[515842] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[491982] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649059] "expr temp" "maybe param" "maybe type" "temp"
      (649062 'move' call_tmp[649059](115623 call elems[115614] 0))
      (491986 'move' call_type_tmp[491982](115624 'typeof' call_tmp[649059]))
    }
    unknown keyType[115627] "dead at end of block" "insert auto destroy" "type variable"(115626 call _getLiteralType call_type_tmp[491982])
    (542563 'move' keyType[115627](542561 call _getLiteralType call_type_tmp[491982]))
    { scopeless type
      unknown call_type_tmp[491988] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649064] "expr temp" "maybe param" "maybe type" "temp"
      (649067 'move' call_tmp[649064](115635 call elems[115614] 1))
      (491992 'move' call_type_tmp[491988](115636 'typeof' call_tmp[649064]))
    }
    unknown valType[115639] "dead at end of block" "insert auto destroy" "type variable"(115638 call _getLiteralType call_type_tmp[491988])
    (542568 'move' valType[115639](542566 call _getLiteralType call_type_tmp[491988]))
    unknown D[115647] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649069] "expr temp" "maybe param" "maybe type" "temp"
    (649072 'move' call_tmp[649069](115645 call chpl__buildDomainRuntimeType defaultDist[94050] keyType[115627]))
    (542570 'default init var' D[115647] call_tmp[649069])
    (115650 'end of statement')
    unknown call_tmp[649076] "expr temp" "maybe param" "maybe type" "temp"
    (649079 'move' call_tmp[649076](115659 call / k[115612] 2))
    (115662 call(115654 call (partial) requestCapacity _mt[243] D[115647]) call_tmp[649076])
    (479179 'end of statement' D[115647])
    unknown A[115671] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649081] "expr temp" "maybe param" "maybe type" "temp"
    (649084 'move' call_tmp[649081](115667 call chpl__ensureDomainExpr D[115647]))
    unknown call_tmp[649086] "expr temp" "maybe param" "maybe type" "temp"
    (649089 'move' call_tmp[649086](115669 call chpl__buildArrayRuntimeType call_tmp[649081] valType[115639]))
    (542572 'default init var' A[115671] call_tmp[649086])
    (115674 'end of statement' keyType[115627] D[115647] valType[115639])
    {
      unknown i[115848] "dead at end of block" "insert auto destroy"
      (542574 'init var' i[115848] 0)
      (479183 'end of statement')
      unknown tmp[115849] "maybe param" "temp"
      unknown call_tmp[649091] "expr temp" "maybe param" "maybe type" "temp"
      (649094 'move' call_tmp[649091](115678 call - k[115612] 1))
      (115860 'move' tmp[115849](115858 call chpl_compute_low_param_loop_bound 0 call_tmp[649091]))
      unknown tmp[115850] "maybe param" "temp"
      unknown call_tmp[649096] "expr temp" "maybe param" "maybe type" "temp"
      (649099 'move' call_tmp[649096](115865 call - k[115612] 1))
      (115870 'move' tmp[115850](115868 call chpl_compute_high_param_loop_bound 0 call_tmp[649096]))
      unknown tmp[115851] "maybe param" "temp"
      (115873 'move' tmp[115851] 2)
      ParamForLoop[115875]
      { i[115848] tmp[115849] tmp[115850] tmp[115851]
        {
          unknown call_tmp[649101] "maybe param" "maybe type" "temp"
          (649104 'move' call_tmp[649101](115688 call elems[115614] i[115848]))
          unknown elemKey[115689] "dead at end of block" "insert auto destroy"
          (542576 'init var' elemKey[115689] call_tmp[649101])
          (115692 'end of statement')
          unknown call_tmp[649106] "expr temp" "maybe param" "maybe type" "temp"
          (649109 'move' call_tmp[649106](115697 call + i[115848] 1))
          unknown call_tmp[649111] "maybe param" "maybe type" "temp"
          (649114 'move' call_tmp[649111](115700 call elems[115614] call_tmp[649106]))
          unknown elemVal[115701] "dead at end of block" "insert auto destroy"
          (542578 'init var' elemVal[115701] call_tmp[649111])
          (115704 'end of statement' i[115848] i[115848])
          unknown call_tmp[649116] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649119 'move' call_tmp[649116](115707 'typeof' elemKey[115689]))
          unknown elemKeyType[115710] "dead at end of block" "insert auto destroy" "type variable"(115709 call _getLiteralType call_tmp[649116])
          unknown call_tmp[649121] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649124 'move' call_tmp[649121](542582 'typeof' elemKey[115689]))
          (542584 'move' elemKeyType[115710](542581 call _getLiteralType call_tmp[649121]))
          (479186 'end of statement' elemKey[115689])
          unknown call_tmp[649126] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649129 'move' call_tmp[649126](115715 'typeof' elemVal[115701]))
          unknown elemValType[115718] "dead at end of block" "insert auto destroy" "type variable"(115717 call _getLiteralType call_tmp[649126])
          unknown call_tmp[649131] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649134 'move' call_tmp[649131](542588 'typeof' elemVal[115701]))
          (542590 'move' elemValType[115718](542587 call _getLiteralType call_tmp[649131]))
          (479188 'end of statement' elemVal[115701])
          unknown call_tmp[649136] "expr temp" "maybe param" "maybe type" "temp"
          (649139 'move' call_tmp[649136](115723 call != elemKeyType[115710] keyType[115627]))
          unknown call_tmp[649141] "expr temp" "maybe param" "maybe type" "temp"
          (649144 'move' call_tmp[649141](115774 call _cond_test call_tmp[649136]))
          if call_tmp[649141]
          {
            unknown call_tmp[649146] "expr temp" "maybe param" "maybe type" "temp"
            (649149 'move' call_tmp[649146](115745 call / i[115848] 2))
            unknown call_tmp[649151] "expr temp" "maybe param" "maybe type" "temp"
            (649154 'move' call_tmp[649151](115748 call _cast string[26] call_tmp[649146]))
            unknown call_tmp[649156] "expr temp" "maybe param" "maybe type" "temp"
            (649159 'move' call_tmp[649156](115750 call + "Associative array key element " call_tmp[649151]))
            unknown call_tmp[649161] "expr temp" "maybe param" "maybe type" "temp"
            (649164 'move' call_tmp[649161](115753 call + call_tmp[649156] " expected to be of type "))
            unknown call_tmp[649166] "expr temp" "maybe param" "maybe type" "temp"
            (649169 'move' call_tmp[649166](115757 call _cast string[26] keyType[115627]))
            unknown call_tmp[649171] "expr temp" "maybe param" "maybe type" "temp"
            (649174 'move' call_tmp[649171](115759 call + call_tmp[649161] call_tmp[649166]))
            unknown call_tmp[649176] "expr temp" "maybe param" "maybe type" "temp"
            (649179 'move' call_tmp[649176](115762 call + call_tmp[649171] " but is of type "))
            unknown call_tmp[649181] "expr temp" "maybe param" "maybe type" "temp"
            (649184 'move' call_tmp[649181](115766 call _cast string[26] elemKeyType[115710]))
            unknown call_tmp[649186] "expr temp" "maybe param" "maybe type" "temp"
            (649189 'move' call_tmp[649186](115768 call + call_tmp[649176] call_tmp[649181]))
            (115771 call compilerError call_tmp[649186])
            (479190 'end of statement' i[115848] keyType[115627] elemKeyType[115710])
          }
          unknown call_tmp[649191] "expr temp" "maybe param" "maybe type" "temp"
          (649194 'move' call_tmp[649191](115780 call != elemValType[115718] valType[115639]))
          unknown call_tmp[649196] "expr temp" "maybe param" "maybe type" "temp"
          (649199 'move' call_tmp[649196](115831 call _cond_test call_tmp[649191]))
          if call_tmp[649196]
          {
            unknown call_tmp[649201] "expr temp" "maybe param" "maybe type" "temp"
            (649204 'move' call_tmp[649201](115802 call / i[115848] 2))
            unknown call_tmp[649206] "expr temp" "maybe param" "maybe type" "temp"
            (649209 'move' call_tmp[649206](115805 call _cast string[26] call_tmp[649201]))
            unknown call_tmp[649211] "expr temp" "maybe param" "maybe type" "temp"
            (649214 'move' call_tmp[649211](115807 call + "Associative array value element " call_tmp[649206]))
            unknown call_tmp[649216] "expr temp" "maybe param" "maybe type" "temp"
            (649219 'move' call_tmp[649216](115810 call + call_tmp[649211] " expected to be of type "))
            unknown call_tmp[649221] "expr temp" "maybe param" "maybe type" "temp"
            (649224 'move' call_tmp[649221](115814 call _cast string[26] valType[115639]))
            unknown call_tmp[649226] "expr temp" "maybe param" "maybe type" "temp"
            (649229 'move' call_tmp[649226](115816 call + call_tmp[649216] call_tmp[649221]))
            unknown call_tmp[649231] "expr temp" "maybe param" "maybe type" "temp"
            (649234 'move' call_tmp[649231](115819 call + call_tmp[649226] " but is of type "))
            unknown call_tmp[649236] "expr temp" "maybe param" "maybe type" "temp"
            (649239 'move' call_tmp[649236](115823 call _cast string[26] elemValType[115718]))
            unknown call_tmp[649241] "expr temp" "maybe param" "maybe type" "temp"
            (649244 'move' call_tmp[649241](115825 call + call_tmp[649231] call_tmp[649236]))
            (115828 call compilerError call_tmp[649241])
            (479194 'end of statement' i[115848] valType[115639] elemValType[115718])
          }
          (115837 call += D[115647] elemKey[115689])
          (479198 'end of statement' D[115647] elemKey[115689])
          unknown call_tmp[649246] "expr temp" "maybe param" "maybe type" "temp"
          (649249 'move' call_tmp[649246](115843 call A[115671] elemKey[115689]))
          (115845 call = call_tmp[649246] elemVal[115701])
          (479201 'end of statement' A[115671] elemKey[115689] elemVal[115701])
        }
      }
      label _unused_continueLabel[115853]
      label _breakLabel[115852]
    }
    (515847 'move' ret[515842](515846 'deref' A[115671]))
    gotoReturn _end_chpl__buildAssociativeArrayExpr[515840] _end_chpl__buildAssociativeArrayExpr[515840]
    (479205 'end of statement' A[115671])
    label _end_chpl__buildAssociativeArrayExpr[515840]
    (515844 return ret[515842])
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[115896](arg arr[115893]:unmanaged BaseArr[415364], arg eltType[115898]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649251] "expr temp" "maybe param" "maybe type" "temp"
    (649254 'move' call_tmp[649251](115903 call isArrayType eltType[115898]))
    unknown call_tmp[649256] "expr temp" "maybe param" "maybe type" "temp"
    (649259 'move' call_tmp[649256](115954 call _cond_test call_tmp[649251]))
    if call_tmp[649256]
    {
      unknown call_tmp[649263] "expr temp" "maybe param" "maybe type" "temp"
      (649266 'move' call_tmp[649263](115907 call _decEltRefCounts _mt[243] arr[115893]))
      (115911 call = call_tmp[649263] 1)
      (479207 'end of statement')
      unknown arrayEltType[115919] "dead at end of block" "insert auto destroy" "type variable"(115918 call chpl__eltTypeFromArrayRuntimeType eltType[115898])
      (542595 'move' arrayEltType[115919](542593 call chpl__eltTypeFromArrayRuntimeType eltType[115898]))
      const dom[115926] "dead at end of block" "const" "ref var"
      unknown call_tmp[649268] "expr temp" "maybe param" "maybe type" "temp"
      (649271 'move' call_tmp[649268](115925 call chpl__domainFromArrayRuntimeType eltType[115898]))
      (542598 'move' dom[115926](542597 'addr of' call_tmp[649268]))
      (115929 'end of statement')
      unknown call_tmp[649275] "maybe param" "maybe type" "temp"
      (649278 'move' call_tmp[649275](115931 call _instance _mt[243] dom[115926]))
      const dv[115934] "dead at end of block" "const" "insert auto destroy"
      (542600 'init var' dv[115934] call_tmp[649275])
      (115937 'end of statement' dom[115926])
      (115946 call(115941 call (partial) add_containing_arr _mt[243] dv[115934]) arr[115893])
      (479209 'end of statement' dv[115934])
      (115952 call chpl_incRefCountsForDomainsInArrayEltTypes arr[115893] arrayEltType[115919])
      (479211 'end of statement' arrayEltType[115919])
    }
    (515851 return _void[55])
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[115968](arg arr[115965]:unmanaged BaseArr[415364], arg eltType[115970]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649282] "expr temp" "maybe param" "maybe type" "temp"
    (649285 'move' call_tmp[649282](115975 call isArrayType eltType[115970]))
    unknown call_tmp[649287] "expr temp" "maybe param" "maybe type" "temp"
    (649290 'move' call_tmp[649287](116171 call _cond_test call_tmp[649282]))
    if call_tmp[649287]
    {
      unknown call_tmp[649294] "expr temp" "maybe param" "maybe type" "temp"
      (649297 'move' call_tmp[649294](115977 call _decEltRefCounts _mt[243] arr[115965]))
      unknown call_tmp[649299] "expr temp" "maybe param" "maybe type" "temp"
      (649302 'move' call_tmp[649299](115981 call == call_tmp[649294] 0))
      unknown call_tmp[649304] "expr temp" "maybe param" "maybe type" "temp"
      (649307 'move' call_tmp[649304](116004 call _cond_test call_tmp[649299]))
      if call_tmp[649304]
      {
        (116002 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown arrayEltType[116014] "dead at end of block" "insert auto destroy" "type variable"(116013 call chpl__eltTypeFromArrayRuntimeType eltType[115970])
      (542605 'move' arrayEltType[116014](542603 call chpl__eltTypeFromArrayRuntimeType eltType[115970]))
      const dom[116021] "dead at end of block" "const" "ref var"
      unknown call_tmp[649309] "expr temp" "maybe param" "maybe type" "temp"
      (649312 'move' call_tmp[649309](116020 call chpl__domainFromArrayRuntimeType eltType[115970]))
      (542608 'move' dom[116021](542607 'addr of' call_tmp[649309]))
      (116024 'end of statement')
      (116029 call chpl_decRefCountsForDomainsInArrayEltTypes arr[115965] arrayEltType[116014])
      (479214 'end of statement' arrayEltType[116014])
      unknown call_tmp[649316] "expr temp" "maybe param" "maybe type" "temp"
      (649319 'move' call_tmp[649316](116032 call _instance _mt[243] dom[116021]))
      unknown call_tmp[649323] "maybe param" "maybe type" "temp"
      (649326 'move' call_tmp[649323](116042 call(116037 call (partial) remove_containing_arr _mt[243] call_tmp[649316]) arr[115965]))
      unknown removeDom[116043] "dead at end of block" "insert auto destroy"
      (542610 'init var' removeDom[116043] call_tmp[649323])
      (116046 'end of statement' dom[116021])
      unknown call_tmp[649328] "expr temp" "maybe param" "maybe type" "temp"
      (649331 'move' call_tmp[649328](116167 call _cond_test removeDom[116043]))
      if call_tmp[649328]
      {
        const tmp[116158] "const" "temp"
        unknown call_tmp[649335] "expr temp" "maybe param" "maybe type" "temp"
        (649338 'move' call_tmp[649335](116049 call _instance _mt[243] dom[116021]))
        unknown call_tmp[649340] "expr temp" "maybe param" "maybe type" "temp"
        (649343 'move' call_tmp[649340](116155 '_wide_get_locale' call_tmp[649335]))
        (116160 'move' tmp[116158](116156 'deref' call_tmp[649340]))
        (935031 call on_fn[935027] tmp[116158])
        function on_fn[935027](const in arg dummy_locale_arg[935029]:chpl_localeID_t[209294]) : void[4] "on"
        {
          {
            unknown call_tmp[649347] "maybe param" "maybe type" "temp"
            (649350 'move' call_tmp[649347](116053 call _instance _mt[243] dom[116021]))
            const inst[116056] "dead at end of block" "const" "insert auto destroy"
            (542612 'init var' inst[116056] call_tmp[649347])
            (116059 'end of statement')
            unknown call_tmp[649354] "maybe param" "maybe type" "temp"
            (649357 'move' call_tmp[649354](116071 call(116067 call (partial) remove _mt[243] inst[116056])))
            unknown tmp[116072] "dead at end of block" "insert auto destroy" "temp"
            (542614 'init var' tmp[116072] call_tmp[649354])
            (116079 call _check_tuple_var_decl tmp[116072] 2)
            (479218 'end of statement')
            unknown call_tmp[649359] "maybe param" "maybe type" "temp"
            (649362 'move' call_tmp[649359](116073 call tmp[116072] 0))
            unknown domToFree[116061] "dead at end of block" "insert auto destroy"
            (542616 'init var' domToFree[116061] call_tmp[649359])
            unknown call_tmp[649364] "maybe param" "maybe type" "temp"
            (649367 'move' call_tmp[649364](116076 call tmp[116072] 1))
            unknown distToRemove[116063] "dead at end of block" "insert auto destroy"
            (542618 'init var' distToRemove[116063] call_tmp[649364])
            (116084 'end of statement')
            unknown distToFree[116089] "dead at end of block" "insert auto destroy"
            (542620 'init var' distToFree[116089] nil[44] unmanaged BaseDist?[415370])
            (116092 'end of statement' dom[116021])
            unknown call_tmp[649369] "expr temp" "maybe param" "maybe type" "temp"
            (649372 'move' call_tmp[649369](116095 call != distToRemove[116063] nil[44]))
            unknown call_tmp[649374] "expr temp" "maybe param" "maybe type" "temp"
            (649377 'move' call_tmp[649374](116110 call _cond_test call_tmp[649369]))
            if call_tmp[649374]
            {
              unknown call_tmp[649379] "expr temp" "maybe param" "maybe type" "temp"
              (649382 'move' call_tmp[649379](116099 call postfix! distToRemove[116063]))
              unknown call_tmp[649386] "expr temp" "maybe param" "maybe type" "temp"
              (649389 'move' call_tmp[649386](116105 call(116101 call (partial) remove _mt[243] call_tmp[649379])))
              (116106 call = distToFree[116089] call_tmp[649386])
              (479219 'end of statement' distToFree[116089] distToRemove[116063])
            }
            unknown call_tmp[649391] "expr temp" "maybe param" "maybe type" "temp"
            (649394 'move' call_tmp[649391](116116 call != domToFree[116061] nil[44]))
            unknown call_tmp[649396] "expr temp" "maybe param" "maybe type" "temp"
            (649399 'move' call_tmp[649396](116127 call _cond_test call_tmp[649391]))
            if call_tmp[649396]
            {
              unknown call_tmp[649401] "expr temp" "maybe param" "maybe type" "temp"
              (649404 'move' call_tmp[649401](116124 call _isPrivatized inst[116056]))
              (116125 call _delete_dom inst[116056] call_tmp[649401])
              (479222 'end of statement' inst[116056] inst[116056])
            }
            unknown call_tmp[649406] "expr temp" "maybe param" "maybe type" "temp"
            (649409 'move' call_tmp[649406](116134 call != distToFree[116089] nil[44]))
            unknown call_tmp[649411] "expr temp" "maybe param" "maybe type" "temp"
            (649414 'move' call_tmp[649411](116150 call _cond_test call_tmp[649406]))
            if call_tmp[649411]
            {
              unknown call_tmp[649416] "expr temp" "maybe param" "maybe type" "temp"
              (649419 'move' call_tmp[649416](116138 call postfix! distToFree[116089]))
              unknown call_tmp[649423] "expr temp" "maybe param" "maybe type" "temp"
              (649426 'move' call_tmp[649423](116143 call dist _mt[243] inst[116056]))
              unknown call_tmp[649428] "expr temp" "maybe param" "maybe type" "temp"
              (649431 'move' call_tmp[649428](116147 call _isPrivatized call_tmp[649423]))
              (116148 call _delete_dist call_tmp[649416] call_tmp[649428])
              (479225 'end of statement' distToFree[116089] inst[116056])
            }
          }
          (935034 return _void[55])
        }
        {
        }
      }
    }
    (515853 return _void[55])
  }
  function chpl__buildSubDomainType[116184](arg dom[116181]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[515857] "RVV" "temp" "type variable"
    unknown call_tmp[649433] "expr temp" "maybe param" "maybe type" "temp"
    (649436 'move' call_tmp[649433](116189 call chpl__convertValueToRuntimeType dom[116181]))
    (515862 'move' ret[515857](515861 'deref' call_tmp[649433]))
    (515859 return ret[515857])
  }
  function chpl__isTupleOfRanges[116199](arg tup[116197]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515866] "RVV" "param" "temp"
    {
      unknown i[116230] "dead at end of block" "insert auto destroy"
      (542622 'init var' i[116230] 0)
      (479229 'end of statement')
      unknown tmp[116231] "maybe param" "temp"
      unknown call_tmp[649440] "expr temp" "maybe param" "maybe type" "temp"
      (649443 'move' call_tmp[649440](116203 call size _mt[243] tup[116197]))
      unknown call_tmp[649445] "expr temp" "maybe param" "maybe type" "temp"
      (649448 'move' call_tmp[649445](116207 call - call_tmp[649440] 1))
      (116243 'move' tmp[116231](116241 call chpl_compute_low_param_loop_bound 0 call_tmp[649445]))
      unknown tmp[116232] "maybe param" "temp"
      unknown call_tmp[649452] "expr temp" "maybe param" "maybe type" "temp"
      (649455 'move' call_tmp[649452](116250 call size _mt[243] tup[116197]))
      unknown call_tmp[649457] "expr temp" "maybe param" "maybe type" "temp"
      (649460 'move' call_tmp[649457](116248 call - call_tmp[649452] 1))
      (116256 'move' tmp[116232](116254 call chpl_compute_high_param_loop_bound 0 call_tmp[649457]))
      unknown tmp[116233] "maybe param" "temp"
      (116259 'move' tmp[116233] 1)
      ParamForLoop[116261]
      { i[116230] tmp[116231] tmp[116232] tmp[116233]
        {
          { scopeless type
            unknown call_type_tmp[491994] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649462] "expr temp" "maybe param" "maybe type" "temp"
            (649465 'move' call_tmp[649462](116215 call tup[116197] i[116230]))
            (491998 'move' call_type_tmp[491994](116216 'typeof' call_tmp[649462]))
          }
          unknown call_tmp[649467] "expr temp" "maybe param" "maybe type" "temp"
          (649470 'move' call_tmp[649467](116218 call isRangeType call_type_tmp[491994]))
          unknown call_tmp[649472] "expr temp" "maybe param" "maybe type" "temp"
          (649475 'move' call_tmp[649472](116219 call ! call_tmp[649467]))
          unknown call_tmp[649477] "expr temp" "maybe param" "maybe type" "temp"
          (649480 'move' call_tmp[649477](116224 call _cond_test call_tmp[649472]))
          if call_tmp[649477]
          {
            (515871 'move' ret[515866](515870 'deref' 0))
            gotoReturn _end_chpl__isTupleOfRanges[515864] _end_chpl__isTupleOfRanges[515864]
          }
        }
      }
      label _unused_continueLabel[116235]
      label _breakLabel[116234]
    }
    (515876 'move' ret[515866](515875 'deref' 1))
    label _end_chpl__isTupleOfRanges[515864]
    (515868 return ret[515866])
  }
  function chpl__buildDomainExpr[116282](arg ranges[116279]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[515880] "RVV" "temp"
    unknown call_tmp[649484] "maybe param" "maybe type" "temp"
    (649487 'move' call_tmp[649484](116289 call size _mt[243] ranges[116279]))
    unknown rank[116292] "dead at end of block" "param"
    (542624 'init var' rank[116292] call_tmp[649484])
    (116295 'end of statement')
    {
      unknown i[116346] "dead at end of block" "insert auto destroy"
      (542626 'init var' i[116346] 0)
      (479232 'end of statement')
      unknown tmp[116347] "maybe param" "temp"
      unknown call_tmp[649489] "expr temp" "maybe param" "maybe type" "temp"
      (649492 'move' call_tmp[649489](116300 call - rank[116292] 1))
      (116359 'move' tmp[116347](116357 call chpl_compute_low_param_loop_bound 1 call_tmp[649489]))
      unknown tmp[116348] "maybe param" "temp"
      unknown call_tmp[649494] "expr temp" "maybe param" "maybe type" "temp"
      (649497 'move' call_tmp[649494](116364 call - rank[116292] 1))
      (116369 'move' tmp[116348](116367 call chpl_compute_high_param_loop_bound 1 call_tmp[649494]))
      unknown tmp[116349] "maybe param" "temp"
      (116372 'move' tmp[116349] 1)
      ParamForLoop[116374]
      { i[116346] tmp[116347] tmp[116348] tmp[116349]
        unknown call_tmp[649499] "expr temp" "maybe param" "maybe type" "temp"
        (649502 'move' call_tmp[649499](116307 call ranges[116279] 0))
        unknown call_tmp[649506] "expr temp" "maybe param" "maybe type" "temp"
        (649509 'move' call_tmp[649506](116308 call idxType _mt[243] call_tmp[649499]))
        unknown call_tmp[649511] "expr temp" "maybe param" "maybe type" "temp"
        (649514 'move' call_tmp[649511](116314 call ranges[116279] i[116346]))
        unknown call_tmp[649518] "expr temp" "maybe param" "maybe type" "temp"
        (649521 'move' call_tmp[649518](116315 call idxType _mt[243] call_tmp[649511]))
        unknown call_tmp[649523] "expr temp" "maybe param" "maybe type" "temp"
        (649526 'move' call_tmp[649523](116318 call != call_tmp[649506] call_tmp[649518]))
        unknown call_tmp[649528] "expr temp" "maybe param" "maybe type" "temp"
        (649531 'move' call_tmp[649528](116341 call _cond_test call_tmp[649523]))
        if call_tmp[649528]
        {
          (116339 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[116351]
      label _breakLabel[116350]
    }
    {
      unknown i[116425] "dead at end of block" "insert auto destroy"
      (542628 'init var' i[116425] 0)
      (479234 'end of statement')
      unknown tmp[116426] "maybe param" "temp"
      unknown call_tmp[649533] "expr temp" "maybe param" "maybe type" "temp"
      (649536 'move' call_tmp[649533](116386 call - rank[116292] 1))
      (116438 'move' tmp[116426](116436 call chpl_compute_low_param_loop_bound 0 call_tmp[649533]))
      unknown tmp[116427] "maybe param" "temp"
      unknown call_tmp[649538] "expr temp" "maybe param" "maybe type" "temp"
      (649541 'move' call_tmp[649538](116443 call - rank[116292] 1))
      (116448 'move' tmp[116427](116446 call chpl_compute_high_param_loop_bound 0 call_tmp[649538]))
      unknown tmp[116428] "maybe param" "temp"
      (116451 'move' tmp[116428] 1)
      ParamForLoop[116453]
      { i[116425] tmp[116426] tmp[116427] tmp[116428]
        unknown call_tmp[649543] "expr temp" "maybe param" "maybe type" "temp"
        (649546 'move' call_tmp[649543](116394 call ranges[116279] i[116425]))
        unknown call_tmp[649548] "expr temp" "maybe param" "maybe type" "temp"
        (649551 'move' call_tmp[649548](116396 call isBoundedRange call_tmp[649543]))
        unknown call_tmp[649553] "expr temp" "maybe param" "maybe type" "temp"
        (649556 'move' call_tmp[649553](116397 call ! call_tmp[649548]))
        unknown call_tmp[649558] "expr temp" "maybe param" "maybe type" "temp"
        (649561 'move' call_tmp[649558](116420 call _cond_test call_tmp[649553]))
        if call_tmp[649558]
        {
          (116418 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[116430]
      label _breakLabel[116429]
    }
    unknown d[116478] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649563] "expr temp" "maybe param" "maybe type" "temp"
    (649566 'move' call_tmp[649563](116467 call ranges[116279] 0))
    unknown call_tmp[649570] "expr temp" "maybe param" "maybe type" "temp"
    (649573 'move' call_tmp[649570](116468 call idxType _mt[243] call_tmp[649563]))
    unknown call_tmp[649575] "expr temp" "maybe param" "maybe type" "temp"
    (649578 'move' call_tmp[649575](116474 call chpl__anyStridable ranges[116279]))
    unknown call_tmp[649580] "expr temp" "maybe param" "maybe type" "temp"
    (649583 'move' call_tmp[649580](116476 call chpl__buildDomainRuntimeType defaultDist[94050] rank[116292] call_tmp[649570] call_tmp[649575]))
    (542630 'default init var' d[116478] call_tmp[649580])
    (116481 'end of statement')
    (116490 call(116485 call (partial) setIndices _mt[243] d[116478]) ranges[116279])
    (479236 'end of statement' d[116478])
    (515885 'move' ret[515880](515884 'deref' d[116478]))
    gotoReturn _end_chpl__buildDomainExpr[515878] _end_chpl__buildDomainExpr[515878]
    (479238 'end of statement' d[116478])
    label _end_chpl__buildDomainExpr[515878]
    (515882 return ret[515880])
  }
  where {
    (116287 call chpl__isTupleOfRanges ranges[116279])
  }
  function chpl__buildDomainExpr[116504](arg keys[116501]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[515891] "RVV" "temp"
    unknown call_tmp[649589] "maybe param" "maybe type" "temp"
    (649592 'move' call_tmp[649589](116507 call size _mt[243] keys[116501]))
    unknown count[116510] "dead at end of block" "param"
    (542632 'init var' count[116510] call_tmp[649589])
    (116513 'end of statement')
    { scopeless type
      unknown call_type_tmp[492000] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649594] "expr temp" "maybe param" "maybe type" "temp"
      (649597 'move' call_tmp[649594](116519 call keys[116501] 0))
      (492004 'move' call_type_tmp[492000](116520 'typeof' call_tmp[649594]))
    }
    unknown keyType[116523] "dead at end of block" "insert auto destroy" "type variable"(116522 call _getLiteralType call_type_tmp[492000])
    (542637 'move' keyType[116523](542635 call _getLiteralType call_type_tmp[492000]))
    {
      unknown i[116601] "dead at end of block" "insert auto destroy"
      (542639 'init var' i[116601] 0)
      (479240 'end of statement')
      unknown tmp[116602] "maybe param" "temp"
      unknown call_tmp[649599] "expr temp" "maybe param" "maybe type" "temp"
      (649602 'move' call_tmp[649599](116529 call - count[116510] 1))
      (116614 'move' tmp[116602](116612 call chpl_compute_low_param_loop_bound 1 call_tmp[649599]))
      unknown tmp[116603] "maybe param" "temp"
      unknown call_tmp[649604] "expr temp" "maybe param" "maybe type" "temp"
      (649607 'move' call_tmp[649604](116619 call - count[116510] 1))
      (116624 'move' tmp[116603](116622 call chpl_compute_high_param_loop_bound 1 call_tmp[649604]))
      unknown tmp[116604] "maybe param" "temp"
      (116627 'move' tmp[116604] 1)
      ParamForLoop[116629]
      { i[116601] tmp[116602] tmp[116603] tmp[116604]
        { scopeless type
          unknown call_type_tmp[492006] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[649609] "expr temp" "maybe param" "maybe type" "temp"
          (649612 'move' call_tmp[649609](116538 call keys[116501] i[116601]))
          (492010 'move' call_type_tmp[492006](116539 'typeof' call_tmp[649609]))
        }
        unknown call_tmp[649614] "expr temp" "maybe param" "maybe type" "temp"
        (649617 'move' call_tmp[649614](116541 call _getLiteralType call_type_tmp[492006]))
        unknown call_tmp[649619] "expr temp" "maybe param" "maybe type" "temp"
        (649622 'move' call_tmp[649619](116542 call != keyType[116523] call_tmp[649614]))
        unknown call_tmp[649624] "expr temp" "maybe param" "maybe type" "temp"
        (649627 'move' call_tmp[649624](116597 call _cond_test call_tmp[649619]))
        if call_tmp[649624]
        {
          { scopeless type
            unknown call_type_tmp[492012] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649629] "expr temp" "maybe param" "maybe type" "temp"
            (649632 'move' call_tmp[649629](116584 call keys[116501] i[116601]))
            (492016 'move' call_type_tmp[492012](116585 'typeof' call_tmp[649629]))
          }
          unknown call_tmp[649634] "expr temp" "maybe param" "maybe type" "temp"
          (649637 'move' call_tmp[649634](116564 call _cast string[26] i[116601]))
          unknown call_tmp[649639] "expr temp" "maybe param" "maybe type" "temp"
          (649642 'move' call_tmp[649639](116566 call + "Associative domain element " call_tmp[649634]))
          unknown call_tmp[649644] "expr temp" "maybe param" "maybe type" "temp"
          (649647 'move' call_tmp[649644](116569 call + call_tmp[649639] " expected to be of type "))
          unknown call_tmp[649649] "expr temp" "maybe param" "maybe type" "temp"
          (649652 'move' call_tmp[649649](116573 call _cast string[26] keyType[116523]))
          unknown call_tmp[649654] "expr temp" "maybe param" "maybe type" "temp"
          (649657 'move' call_tmp[649654](116575 call + call_tmp[649644] call_tmp[649649]))
          unknown call_tmp[649659] "expr temp" "maybe param" "maybe type" "temp"
          (649662 'move' call_tmp[649659](116578 call + call_tmp[649654] " but is of type "))
          unknown call_tmp[649664] "expr temp" "maybe param" "maybe type" "temp"
          (649667 'move' call_tmp[649664](116587 call _getLiteralType call_type_tmp[492012]))
          unknown call_tmp[649669] "expr temp" "maybe param" "maybe type" "temp"
          (649672 'move' call_tmp[649669](116589 call _cast string[26] call_tmp[649664]))
          unknown call_tmp[649674] "expr temp" "maybe param" "maybe type" "temp"
          (649677 'move' call_tmp[649674](116591 call + call_tmp[649659] call_tmp[649669]))
          (116594 call compilerError call_tmp[649674])
          (479241 'end of statement' i[116601] keyType[116523] i[116601])
        }
      }
      label _unused_continueLabel[116606]
      label _breakLabel[116605]
    }
    unknown D[116643] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649679] "expr temp" "maybe param" "maybe type" "temp"
    (649682 'move' call_tmp[649679](116641 call chpl__buildDomainRuntimeType defaultDist[94050] keyType[116523]))
    (542641 'default init var' D[116643] call_tmp[649679])
    (116646 'end of statement' keyType[116523])
    (116653 call(116648 call (partial) requestCapacity _mt[243] D[116643]) count[116510])
    (479246 'end of statement' D[116643])
    {
      unknown i[116670] "dead at end of block" "insert auto destroy"
      (542643 'init var' i[116670] 0)
      (479248 'end of statement')
      unknown tmp[116671] "maybe param" "temp"
      unknown call_tmp[649686] "expr temp" "maybe param" "maybe type" "temp"
      (649689 'move' call_tmp[649686](116658 call - count[116510] 1))
      (116683 'move' tmp[116671](116681 call chpl_compute_low_param_loop_bound 0 call_tmp[649686]))
      unknown tmp[116672] "maybe param" "temp"
      unknown call_tmp[649691] "expr temp" "maybe param" "maybe type" "temp"
      (649694 'move' call_tmp[649691](116688 call - count[116510] 1))
      (116693 'move' tmp[116672](116691 call chpl_compute_high_param_loop_bound 0 call_tmp[649691]))
      unknown tmp[116673] "maybe param" "temp"
      (116696 'move' tmp[116673] 1)
      ParamForLoop[116698]
      { i[116670] tmp[116671] tmp[116672] tmp[116673]
        unknown call_tmp[649696] "expr temp" "maybe param" "maybe type" "temp"
        (649699 'move' call_tmp[649696](116666 call keys[116501] i[116670]))
        (116667 call += D[116643] call_tmp[649696])
        (479249 'end of statement' D[116643] i[116670])
      }
      label _unused_continueLabel[116675]
      label _breakLabel[116674]
    }
    (515896 'move' ret[515891](515895 'deref' D[116643]))
    gotoReturn _end_chpl__buildDomainExpr[515889] _end_chpl__buildDomainExpr[515889]
    (479252 'end of statement' D[116643])
    label _end_chpl__buildDomainExpr[515889]
    (515893 return ret[515891])
  }
  function chpl__ensureDomainExpr[116718](const  ref arg x[116715]:_domain[125902](?)) const ref : _unknown[51]
  {
    unknown ret[515902] "RVV" "temp"
    (515907 'move' ret[515902](515906 'addr of' x[116715]))
    (515904 return ret[515902])
  }
  function chpl__ensureDomainExpr[116732](arg x[116729]:_any[178](?) ...) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[515911] "RVV" "temp"
    unknown call_tmp[649701] "expr temp" "maybe param" "maybe type" "temp"
    (649704 'move' call_tmp[649701](116738 call chpl__buildDomainExpr(116736 'expand_tuple' x[116729])))
    (515916 'move' ret[515911](515915 'deref' call_tmp[649701]))
    (515913 return ret[515911])
  }
  function chpl__ensureDomainExpr[116748](arg t[116746]:_any[178](?)) : _unknown[51] "compiler generated" "last resort" "no return value for void"
  {
    unknown call_tmp[649706] "expr temp" "maybe param" "maybe type" "temp"
    (649709 'move' call_tmp[649706](116771 call _cast string[26] t[116746]))
    (116792 call compilerError "Domain expression was a type ('" call_tmp[649706] "') rather than a domain value or range list as expected")
    (515918 return _void[55])
  }
  function chpl__distributed[116803](arg d[116800]:_distribution[118967](?), arg dom[116806]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[515922] "RVV" "temp"
    unknown call_tmp[649711] "expr temp" "maybe param" "maybe type" "temp"
    (649714 'move' call_tmp[649711](116812 call isRectangularDom dom[116806]))
    unknown call_tmp[649716] "expr temp" "maybe param" "maybe type" "temp"
    (649719 'move' call_tmp[649716](116870 call _cond_test call_tmp[649711]))
    if call_tmp[649716]
    {
      unknown call_tmp[649723] "expr temp" "maybe param" "maybe type" "temp"
      (649726 'move' call_tmp[649723](116814 call rank _mt[243] dom[116806]))
      unknown call_tmp[649730] "expr temp" "maybe param" "maybe type" "temp"
      (649733 'move' call_tmp[649730](116819 call _value _mt[243] dom[116806]))
      unknown call_tmp[649737] "expr temp" "maybe param" "maybe type" "temp"
      (649740 'move' call_tmp[649737](116822 call idxType _mt[243] call_tmp[649730]))
      unknown call_tmp[649744] "expr temp" "maybe param" "maybe type" "temp"
      (649747 'move' call_tmp[649744](116826 call _value _mt[243] dom[116806]))
      unknown call_tmp[649751] "expr temp" "maybe param" "maybe type" "temp"
      (649754 'move' call_tmp[649751](116829 call stridable _mt[243] call_tmp[649744]))
      unknown call_tmp[649756] "expr temp" "maybe param" "maybe type" "temp"
      (649759 'move' call_tmp[649756](116833 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[649723] call_tmp[649737] call_tmp[649751]))
      unknown call_tmp[649761] "maybe param" "maybe type" "temp"
      (649764 'move' call_tmp[649761](116836 call chpl__distributed d[116800] call_tmp[649756]))
      unknown distDom[116839] "dead at end of block" "insert auto destroy"
      (542645 'init var' distDom[116839] dom[116806] call_tmp[649761])
      (116842 'end of statement')
      (515927 'move' ret[515922](515926 'deref' distDom[116839]))
      gotoReturn _end_chpl__distributed[515920] _end_chpl__distributed[515920]
      (479255 'end of statement' distDom[116839])
    }
    {
      unknown call_tmp[649768] "expr temp" "maybe param" "maybe type" "temp"
      (649771 'move' call_tmp[649768](116848 call _value _mt[243] dom[116806]))
      unknown call_tmp[649775] "expr temp" "maybe param" "maybe type" "temp"
      (649778 'move' call_tmp[649775](116851 call idxType _mt[243] call_tmp[649768]))
      unknown call_tmp[649780] "expr temp" "maybe param" "maybe type" "temp"
      (649783 'move' call_tmp[649780](116856 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[649775]))
      unknown call_tmp[649785] "maybe param" "maybe type" "temp"
      (649788 'move' call_tmp[649785](116859 call chpl__distributed d[116800] call_tmp[649780]))
      unknown distDom[116862] "dead at end of block" "insert auto destroy"
      (542647 'init var' distDom[116862] dom[116806] call_tmp[649785])
      (116865 'end of statement')
      (515932 'move' ret[515922](515931 'deref' distDom[116862]))
      gotoReturn _end_chpl__distributed[515920] _end_chpl__distributed[515920]
      (479257 'end of statement' distDom[116862])
    }
    label _end_chpl__distributed[515920]
    (515924 return ret[515922])
  }
  function chpl__distributed[116883](arg d[116880]:_distribution[118967](?), arg ranges[116886]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[515938] "RVV" "temp"
    unknown call_tmp[649790] "expr temp" "maybe param" "maybe type" "temp"
    (649793 'move' call_tmp[649790](116900 call chpl__buildDomainExpr(116898 'expand_tuple' ranges[116886])))
    unknown call_tmp[649795] "expr temp" "maybe param" "maybe type" "temp"
    (649798 'move' call_tmp[649795](116901 call chpl__distributed d[116880] call_tmp[649790]))
    (515943 'move' ret[515938](515942 'deref' call_tmp[649795]))
    (515940 return ret[515938])
  }
  where {
    (116892 call chpl__isTupleOfRanges ranges[116886])
  }
  function chpl__isArrayView[116912](arg arr[116910]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515947] "RVV" "param" "temp"
    const value[116926] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564207] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564208] "maybe param" "temp"
    unknown call_tmp[649800] "expr temp" "maybe param" "maybe type" "temp"
    (649803 'move' call_tmp[649800](116917 call isArray arr[116910]))
    (564213 'move' tmp[564208](564211 call _cond_test call_tmp[649800]))
    if tmp[564208]
    {
      unknown tmp[564215] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564217 'move' tmp[564215](116919 call _value _mt[243] arr[116910]))
      (564222 'move' tmp[564207](564219 '_paramFoldLogical' tmp[564208] tmp[564215]))
    }
    {
      (564227 'move' tmp[564207](564224 '_paramFoldLogical' tmp[564208] arr[116910]))
    }
    (542649 'init var' value[116926] tmp[564207])
    (116929 'end of statement')
    unknown call_tmp[649809] "maybe param" "maybe type" "temp"
    (649812 'move' call_tmp[649809](116936 call(116932 call (partial) isSliceArrayView _mt[243] value[116926])))
    unknown isSlice[116937] "dead at end of block" "param"
    (542651 'init var' isSlice[116937] call_tmp[649809])
    (116940 'end of statement')
    unknown call_tmp[649816] "maybe param" "maybe type" "temp"
    (649819 'move' call_tmp[649816](116946 call(116942 call (partial) isRankChangeArrayView _mt[243] value[116926])))
    unknown isRankChange[116947] "dead at end of block" "param"
    (542653 'init var' isRankChange[116947] call_tmp[649816])
    (116950 'end of statement')
    unknown call_tmp[649823] "maybe param" "maybe type" "temp"
    (649826 'move' call_tmp[649823](116956 call(116952 call (partial) isReindexArrayView _mt[243] value[116926])))
    unknown isReindex[116957] "dead at end of block" "param"
    (542655 'init var' isReindex[116957] call_tmp[649823])
    (116960 'end of statement' value[116926] value[116926] value[116926])
    unknown tmp[424081] "maybe param" "temp"
    unknown tmp[424102] "maybe param" "temp"
    (424113 'move' tmp[424102] isSlice[116937])
    unknown call_tmp[649828] "expr temp" "maybe param" "maybe type" "temp"
    (649831 'move' call_tmp[649828](424115 call _cond_invalid tmp[424102]))
    if call_tmp[649828]
    {
      (424118 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564234] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564235] "maybe param" "temp"
    unknown call_tmp[649833] "expr temp" "maybe param" "maybe type" "temp"
    (649836 'move' call_tmp[649833](424103 call isTrue tmp[424102]))
    (564240 'move' tmp[564235](564238 call _cond_test call_tmp[649833]))
    if tmp[564235]
    {
      (564245 'move' tmp[564234](564242 '_paramFoldLogical' tmp[564235] 1))
    }
    {
      unknown tmp[564247] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564249 'move' tmp[564247](424107 call isTrue isRankChange[116947]))
      (564254 'move' tmp[564234](564251 '_paramFoldLogical' tmp[564235] tmp[564247]))
    }
    (424092 'move' tmp[424081] tmp[564234])
    unknown call_tmp[649838] "expr temp" "maybe param" "maybe type" "temp"
    (649841 'move' call_tmp[649838](424094 call _cond_invalid tmp[424081]))
    if call_tmp[649838]
    {
      (424097 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564261] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564262] "maybe param" "temp"
    unknown call_tmp[649843] "expr temp" "maybe param" "maybe type" "temp"
    (649846 'move' call_tmp[649843](424082 call isTrue tmp[424081]))
    (564267 'move' tmp[564262](564265 call _cond_test call_tmp[649843]))
    if tmp[564262]
    {
      (564272 'move' tmp[564261](564269 '_paramFoldLogical' tmp[564262] 1))
    }
    {
      unknown tmp[564274] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564276 'move' tmp[564274](424086 call isTrue isReindex[116957]))
      (564281 'move' tmp[564261](564278 '_paramFoldLogical' tmp[564262] tmp[564274]))
    }
    (515952 'move' ret[515947](515951 'deref' tmp[564261]))
    (515949 return ret[515947])
  }
  function chpl__getActualArray[116976](arg arr[116974]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515956] "RVV" "temp"
    unknown value[116990] "dead at end of block" "insert auto destroy"
    unknown tmp[564288] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564289] "maybe param" "temp"
    unknown call_tmp[649848] "expr temp" "maybe param" "maybe type" "temp"
    (649851 'move' call_tmp[649848](116981 call isArray arr[116974]))
    (564294 'move' tmp[564289](564292 call _cond_test call_tmp[649848]))
    if tmp[564289]
    {
      unknown tmp[564296] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564298 'move' tmp[564296](116983 call _value _mt[243] arr[116974]))
      (564303 'move' tmp[564288](564300 '_paramFoldLogical' tmp[564289] tmp[564296]))
    }
    {
      (564308 'move' tmp[564288](564305 '_paramFoldLogical' tmp[564289] arr[116974]))
    }
    (542657 'init var' value[116990] tmp[564288])
    (116993 'end of statement')
    unknown ret[117011] "dead at end of block" "insert auto destroy"
    unknown tmp[564315] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564316] "maybe param" "temp"
    unknown call_tmp[649855] "expr temp" "maybe param" "maybe type" "temp"
    (649858 'move' call_tmp[649855](116998 call chpl__isArrayView value[116990]))
    (564321 'move' tmp[564316](564319 call _cond_test call_tmp[649855]))
    if tmp[564316]
    {
      unknown tmp[564323] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564325 'move' tmp[564323](117006 call(117002 call (partial) _getActualArray _mt[243] value[116990])))
      (564330 'move' tmp[564315](564327 '_paramFoldLogical' tmp[564316] tmp[564323]))
    }
    {
      (564335 'move' tmp[564315](564332 '_paramFoldLogical' tmp[564316] value[116990]))
    }
    (542659 'init var' ret[117011] tmp[564315])
    (117014 'end of statement' value[116990] value[116990] value[116990])
    (515961 'move' ret[515956](515960 'deref' ret[117011]))
    gotoReturn _end_chpl__getActualArray[515954] _end_chpl__getActualArray[515954]
    (479269 'end of statement' ret[117011])
    label _end_chpl__getActualArray[515954]
    (515958 return ret[515956])
  }
  function chpl__isDROrDRView[117024](arg arg[117022]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515967] "RVV" "param" "temp"
    unknown tmp[424228] "maybe param" "temp"
    (424239 'move' tmp[424228](117029 call isDomain arg[117022]))
    unknown call_tmp[649862] "expr temp" "maybe param" "maybe type" "temp"
    (649865 'move' call_tmp[649862](424241 call _cond_invalid tmp[424228]))
    if call_tmp[649862]
    {
      (424244 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564342] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564343] "maybe param" "temp"
    unknown call_tmp[649867] "expr temp" "maybe param" "maybe type" "temp"
    (649870 'move' call_tmp[649867](424229 call isTrue tmp[424228]))
    (564348 'move' tmp[564343](564346 call _cond_test call_tmp[649867]))
    if tmp[564343]
    {
      (564353 'move' tmp[564342](564350 '_paramFoldLogical' tmp[564343] 1))
    }
    {
      unknown tmp[564355] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[649872] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (649875 'move' call_tmp[649872](117032 'typeof' arg[117022]))
      unknown call_tmp[649877] "expr temp" "maybe param" "maybe type" "temp"
      (649880 'move' call_tmp[649877](354200 'is_subtype' BaseDom[372655](?) call_tmp[649872]))
      (564357 'move' tmp[564355](424233 call isTrue call_tmp[649877]))
      (564362 'move' tmp[564342](564359 '_paramFoldLogical' tmp[564343] tmp[564355]))
    }
    unknown call_tmp[649882] "expr temp" "maybe param" "maybe type" "temp"
    (649885 'move' call_tmp[649882](117180 call _cond_test tmp[564342]))
    if call_tmp[649882]
    {
      const value[117050] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[564369] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564370] "maybe param" "temp"
      unknown call_tmp[649887] "expr temp" "maybe param" "maybe type" "temp"
      (649890 'move' call_tmp[649887](117041 call isDomain arg[117022]))
      (564375 'move' tmp[564370](564373 call _cond_test call_tmp[649887]))
      if tmp[564370]
      {
        unknown tmp[564377] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564379 'move' tmp[564377](117043 call _value _mt[243] arg[117022]))
        (564384 'move' tmp[564369](564381 '_paramFoldLogical' tmp[564370] tmp[564377]))
      }
      {
        (564389 'move' tmp[564369](564386 '_paramFoldLogical' tmp[564370] arg[117022]))
      }
      (542661 'init var' value[117050] tmp[564369])
      (117053 'end of statement')
      unknown call_tmp[649896] "maybe param" "maybe type" "temp"
      (649899 'move' call_tmp[649896](117060 call(117056 call (partial) isDefaultRectangular _mt[243] value[117050])))
      unknown isDR[117061] "dead at end of block" "param"
      (542663 'init var' isDR[117061] call_tmp[649896])
      (117064 'end of statement')
      unknown tmp[424123] "maybe param" "temp"
      (424134 'move' tmp[424123](117068 call chpl__isDomainView value[117050]))
      unknown call_tmp[649901] "expr temp" "maybe param" "maybe type" "temp"
      (649904 'move' call_tmp[649901](424136 call _cond_invalid tmp[424123]))
      if call_tmp[649901]
      {
        (424139 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown isDRView[117080] "dead at end of block" "param"
      unknown tmp[564396] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564397] "maybe param" "temp"
      unknown call_tmp[649906] "expr temp" "maybe param" "maybe type" "temp"
      (649909 'move' call_tmp[649906](424124 call isTrue tmp[424123]))
      (564402 'move' tmp[564397](564400 call _cond_test call_tmp[649906]))
      if tmp[564397]
      {
        unknown tmp[564404] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[649911] "expr temp" "maybe param" "maybe type" "temp"
        (649914 'move' call_tmp[649911](117072 call chpl__getActualDomain value[117050]))
        unknown call_tmp[649918] "expr temp" "maybe param" "maybe type" "temp"
        (649921 'move' call_tmp[649918](117077 call(117073 call (partial) isDefaultRectangular _mt[243] call_tmp[649911])))
        (564406 'move' tmp[564404](424127 call isTrue call_tmp[649918]))
        (564411 'move' tmp[564396](564408 '_paramFoldLogical' tmp[564397] tmp[564404]))
      }
      {
        (564416 'move' tmp[564396](564413 '_paramFoldLogical' tmp[564397] 0))
      }
      (542665 'init var' isDRView[117080] tmp[564396])
      (117083 'end of statement' value[117050] value[117050])
      unknown tmp[424144] "maybe param" "temp"
      (424155 'move' tmp[424144] isDR[117061])
      unknown call_tmp[649923] "expr temp" "maybe param" "maybe type" "temp"
      (649926 'move' call_tmp[649923](424157 call _cond_invalid tmp[424144]))
      if call_tmp[649923]
      {
        (424160 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564423] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564424] "maybe param" "temp"
      unknown call_tmp[649928] "expr temp" "maybe param" "maybe type" "temp"
      (649931 'move' call_tmp[649928](424145 call isTrue tmp[424144]))
      (564429 'move' tmp[564424](564427 call _cond_test call_tmp[649928]))
      if tmp[564424]
      {
        (564434 'move' tmp[564423](564431 '_paramFoldLogical' tmp[564424] 1))
      }
      {
        unknown tmp[564436] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564438 'move' tmp[564436](424149 call isTrue isDRView[117080]))
        (564443 'move' tmp[564423](564440 '_paramFoldLogical' tmp[564424] tmp[564436]))
      }
      (515972 'move' ret[515967](515971 'deref' tmp[564423]))
      gotoReturn _end_chpl__isDROrDRView[515965] _end_chpl__isDROrDRView[515965]
    }
    {
      unknown tmp[424207] "maybe param" "temp"
      (424218 'move' tmp[424207](117093 call isArray arg[117022]))
      unknown call_tmp[649933] "expr temp" "maybe param" "maybe type" "temp"
      (649936 'move' call_tmp[649933](424220 call _cond_invalid tmp[424207]))
      if call_tmp[649933]
      {
        (424223 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564450] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564451] "maybe param" "temp"
      unknown call_tmp[649938] "expr temp" "maybe param" "maybe type" "temp"
      (649941 'move' call_tmp[649938](424208 call isTrue tmp[424207]))
      (564456 'move' tmp[564451](564454 call _cond_test call_tmp[649938]))
      if tmp[564451]
      {
        (564461 'move' tmp[564450](564458 '_paramFoldLogical' tmp[564451] 1))
      }
      {
        unknown tmp[564463] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[649943] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (649946 'move' call_tmp[649943](117096 'typeof' arg[117022]))
        unknown call_tmp[649948] "expr temp" "maybe param" "maybe type" "temp"
        (649951 'move' call_tmp[649948](354201 'is_subtype' BaseArr[382232](?) call_tmp[649943]))
        (564465 'move' tmp[564463](424212 call isTrue call_tmp[649948]))
        (564470 'move' tmp[564450](564467 '_paramFoldLogical' tmp[564451] tmp[564463]))
      }
      unknown call_tmp[649953] "expr temp" "maybe param" "maybe type" "temp"
      (649956 'move' call_tmp[649953](117176 call _cond_test tmp[564450]))
      if call_tmp[649953]
      {
        const value[117114] "dead at end of block" "const" "insert auto destroy"
        unknown tmp[564477] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564478] "maybe param" "temp"
        unknown call_tmp[649958] "expr temp" "maybe param" "maybe type" "temp"
        (649961 'move' call_tmp[649958](117105 call isArray arg[117022]))
        (564483 'move' tmp[564478](564481 call _cond_test call_tmp[649958]))
        if tmp[564478]
        {
          unknown tmp[564485] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564487 'move' tmp[564485](117107 call _value _mt[243] arg[117022]))
          (564492 'move' tmp[564477](564489 '_paramFoldLogical' tmp[564478] tmp[564485]))
        }
        {
          (564497 'move' tmp[564477](564494 '_paramFoldLogical' tmp[564478] arg[117022]))
        }
        (542667 'init var' value[117114] tmp[564477])
        (117117 'end of statement')
        unknown call_tmp[649967] "maybe param" "maybe type" "temp"
        (649970 'move' call_tmp[649967](117124 call(117120 call (partial) isDefaultRectangular _mt[243] value[117114])))
        unknown isDR[117125] "dead at end of block" "param"
        (542669 'init var' isDR[117125] call_tmp[649967])
        (117128 'end of statement')
        unknown tmp[424165] "maybe param" "temp"
        (424176 'move' tmp[424165](117132 call chpl__isArrayView value[117114]))
        unknown call_tmp[649972] "expr temp" "maybe param" "maybe type" "temp"
        (649975 'move' call_tmp[649972](424178 call _cond_invalid tmp[424165]))
        if call_tmp[649972]
        {
          (424181 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown isDRView[117144] "dead at end of block" "param"
        unknown tmp[564504] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564505] "maybe param" "temp"
        unknown call_tmp[649977] "expr temp" "maybe param" "maybe type" "temp"
        (649980 'move' call_tmp[649977](424166 call isTrue tmp[424165]))
        (564510 'move' tmp[564505](564508 call _cond_test call_tmp[649977]))
        if tmp[564505]
        {
          unknown tmp[564512] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[649982] "expr temp" "maybe param" "maybe type" "temp"
          (649985 'move' call_tmp[649982](117136 call chpl__getActualArray value[117114]))
          unknown call_tmp[649989] "expr temp" "maybe param" "maybe type" "temp"
          (649992 'move' call_tmp[649989](117141 call(117137 call (partial) isDefaultRectangular _mt[243] call_tmp[649982])))
          (564514 'move' tmp[564512](424169 call isTrue call_tmp[649989]))
          (564519 'move' tmp[564504](564516 '_paramFoldLogical' tmp[564505] tmp[564512]))
        }
        {
          (564524 'move' tmp[564504](564521 '_paramFoldLogical' tmp[564505] 0))
        }
        (542671 'init var' isDRView[117144] tmp[564504])
        (117147 'end of statement' value[117114] value[117114])
        unknown tmp[424186] "maybe param" "temp"
        (424197 'move' tmp[424186] isDR[117125])
        unknown call_tmp[649994] "expr temp" "maybe param" "maybe type" "temp"
        (649997 'move' call_tmp[649994](424199 call _cond_invalid tmp[424186]))
        if call_tmp[649994]
        {
          (424202 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[564531] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564532] "maybe param" "temp"
        unknown call_tmp[649999] "expr temp" "maybe param" "maybe type" "temp"
        (650002 'move' call_tmp[649999](424187 call isTrue tmp[424186]))
        (564537 'move' tmp[564532](564535 call _cond_test call_tmp[649999]))
        if tmp[564532]
        {
          (564542 'move' tmp[564531](564539 '_paramFoldLogical' tmp[564532] 1))
        }
        {
          unknown tmp[564544] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564546 'move' tmp[564544](424191 call isTrue isDRView[117144]))
          (564551 'move' tmp[564531](564548 '_paramFoldLogical' tmp[564532] tmp[564544]))
        }
        (515977 'move' ret[515967](515976 'deref' tmp[564531]))
        gotoReturn _end_chpl__isDROrDRView[515965] _end_chpl__isDROrDRView[515965]
      }
      {
        (117173 call compilerError "Invalid argument for chpl__isDROrDRView")
      }
    }
    label _end_chpl__isDROrDRView[515965]
    (515969 return ret[515967])
  }
  function chpl__isDomainView[117192](arg dom[117190]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515983] "RVV" "param" "temp"
    const value[117206] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564558] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564559] "maybe param" "temp"
    unknown call_tmp[650004] "expr temp" "maybe param" "maybe type" "temp"
    (650007 'move' call_tmp[650004](117197 call isDomain dom[117190]))
    (564564 'move' tmp[564559](564562 call _cond_test call_tmp[650004]))
    if tmp[564559]
    {
      unknown tmp[564566] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564568 'move' tmp[564566](117199 call _value _mt[243] dom[117190]))
      (564573 'move' tmp[564558](564570 '_paramFoldLogical' tmp[564559] tmp[564566]))
    }
    {
      (564578 'move' tmp[564558](564575 '_paramFoldLogical' tmp[564559] dom[117190]))
    }
    (542673 'init var' value[117206] tmp[564558])
    (117209 'end of statement')
    unknown call_tmp[650013] "maybe param" "maybe type" "temp"
    (650016 'move' call_tmp[650013](117218 call(117214 call (partial) isSliceDomainView _mt[243] value[117206])))
    unknown isSlice[117219] "dead at end of block" "param"
    (542675 'init var' isSlice[117219] call_tmp[650013])
    (117222 'end of statement')
    unknown call_tmp[650020] "maybe param" "maybe type" "temp"
    (650023 'move' call_tmp[650020](117230 call(117226 call (partial) isRankChangeDomainView _mt[243] value[117206])))
    unknown isRankChange[117231] "dead at end of block" "param"
    (542677 'init var' isRankChange[117231] call_tmp[650020])
    (117234 'end of statement')
    unknown call_tmp[650027] "maybe param" "maybe type" "temp"
    (650030 'move' call_tmp[650027](117242 call(117238 call (partial) isReindexDomainView _mt[243] value[117206])))
    unknown isReindex[117243] "dead at end of block" "param"
    (542679 'init var' isReindex[117243] call_tmp[650027])
    (117246 'end of statement' value[117206] value[117206] value[117206])
    unknown tmp[424249] "maybe param" "temp"
    unknown tmp[424270] "maybe param" "temp"
    (424281 'move' tmp[424270] isSlice[117219])
    unknown call_tmp[650032] "expr temp" "maybe param" "maybe type" "temp"
    (650035 'move' call_tmp[650032](424283 call _cond_invalid tmp[424270]))
    if call_tmp[650032]
    {
      (424286 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564585] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564586] "maybe param" "temp"
    unknown call_tmp[650037] "expr temp" "maybe param" "maybe type" "temp"
    (650040 'move' call_tmp[650037](424271 call isTrue tmp[424270]))
    (564591 'move' tmp[564586](564589 call _cond_test call_tmp[650037]))
    if tmp[564586]
    {
      (564596 'move' tmp[564585](564593 '_paramFoldLogical' tmp[564586] 1))
    }
    {
      unknown tmp[564598] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564600 'move' tmp[564598](424275 call isTrue isRankChange[117231]))
      (564605 'move' tmp[564585](564602 '_paramFoldLogical' tmp[564586] tmp[564598]))
    }
    (424260 'move' tmp[424249] tmp[564585])
    unknown call_tmp[650042] "expr temp" "maybe param" "maybe type" "temp"
    (650045 'move' call_tmp[650042](424262 call _cond_invalid tmp[424249]))
    if call_tmp[650042]
    {
      (424265 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564612] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564613] "maybe param" "temp"
    unknown call_tmp[650047] "expr temp" "maybe param" "maybe type" "temp"
    (650050 'move' call_tmp[650047](424250 call isTrue tmp[424249]))
    (564618 'move' tmp[564613](564616 call _cond_test call_tmp[650047]))
    if tmp[564613]
    {
      (564623 'move' tmp[564612](564620 '_paramFoldLogical' tmp[564613] 1))
    }
    {
      unknown tmp[564625] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564627 'move' tmp[564625](424254 call isTrue isReindex[117243]))
      (564632 'move' tmp[564612](564629 '_paramFoldLogical' tmp[564613] tmp[564625]))
    }
    (515988 'move' ret[515983](515987 'deref' tmp[564612]))
    (515985 return ret[515983])
  }
  function chpl__getActualDomain[117262](arg dom[117260]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515992] "RVV" "temp"
    unknown value[117276] "dead at end of block" "insert auto destroy"
    unknown tmp[564639] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564640] "maybe param" "temp"
    unknown call_tmp[650052] "expr temp" "maybe param" "maybe type" "temp"
    (650055 'move' call_tmp[650052](117267 call isDomain dom[117260]))
    (564645 'move' tmp[564640](564643 call _cond_test call_tmp[650052]))
    if tmp[564640]
    {
      unknown tmp[564647] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564649 'move' tmp[564647](117269 call _value _mt[243] dom[117260]))
      (564654 'move' tmp[564639](564651 '_paramFoldLogical' tmp[564640] tmp[564647]))
    }
    {
      (564659 'move' tmp[564639](564656 '_paramFoldLogical' tmp[564640] dom[117260]))
    }
    (542681 'init var' value[117276] tmp[564639])
    (117279 'end of statement')
    unknown ret[117297] "dead at end of block" "insert auto destroy"
    unknown tmp[564666] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564667] "maybe param" "temp"
    unknown call_tmp[650059] "expr temp" "maybe param" "maybe type" "temp"
    (650062 'move' call_tmp[650059](117284 call chpl__isDomainView value[117276]))
    (564672 'move' tmp[564667](564670 call _cond_test call_tmp[650059]))
    if tmp[564667]
    {
      unknown tmp[564674] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564676 'move' tmp[564674](117292 call(117288 call (partial) _getActualDomain _mt[243] value[117276])))
      (564681 'move' tmp[564666](564678 '_paramFoldLogical' tmp[564667] tmp[564674]))
    }
    {
      (564686 'move' tmp[564666](564683 '_paramFoldLogical' tmp[564667] value[117276]))
    }
    (542683 'init var' ret[117297] tmp[564666])
    (117300 'end of statement' value[117276] value[117276] value[117276])
    (515997 'move' ret[515992](515996 'deref' ret[117297]))
    gotoReturn _end_chpl__getActualDomain[515990] _end_chpl__getActualDomain[515990]
    (479293 'end of statement' ret[117297])
    label _end_chpl__getActualDomain[515990]
    (515994 return ret[515992])
  }
  function chpl__isRectangularDomType[117310](arg domainType[117308]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516003] "RVV" "param" "temp"
    unknown dom[117313] "dead at end of block" "insert auto destroy"
    (542685 'default init var' dom[117313] domainType[117308])
    (117316 'end of statement')
    unknown tmp[424291] "maybe param" "temp"
    (424302 'move' tmp[424291](117321 call isDomainType domainType[117308]))
    unknown call_tmp[650066] "expr temp" "maybe param" "maybe type" "temp"
    (650069 'move' call_tmp[650066](424304 call _cond_invalid tmp[424291]))
    if call_tmp[650066]
    {
      (424307 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564693] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564694] "maybe param" "temp"
    unknown call_tmp[650071] "expr temp" "maybe param" "maybe type" "temp"
    (650074 'move' call_tmp[650071](424292 call isTrue tmp[424291]))
    (564699 'move' tmp[564694](564697 call _cond_test call_tmp[650071]))
    if tmp[564694]
    {
      unknown tmp[564701] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650076] "expr temp" "maybe param" "maybe type" "temp"
      (650079 'move' call_tmp[650076](117325 call isRectangularDom dom[117313]))
      (564703 'move' tmp[564701](424295 call isTrue call_tmp[650076]))
      (564708 'move' tmp[564693](564705 '_paramFoldLogical' tmp[564694] tmp[564701]))
    }
    {
      (564713 'move' tmp[564693](564710 '_paramFoldLogical' tmp[564694] 0))
    }
    (516008 'move' ret[516003](516007 'deref' tmp[564693]))
    gotoReturn _end_chpl__isRectangularDomType[516001] _end_chpl__isRectangularDomType[516001]
    (479296 'end of statement' dom[117313])
    label _end_chpl__isRectangularDomType[516001]
    (516005 return ret[516003])
  }
  function chpl__isSparseDomType[117336](arg domainType[117334]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516014] "RVV" "param" "temp"
    unknown dom[117339] "dead at end of block" "insert auto destroy"
    (542687 'default init var' dom[117339] domainType[117334])
    (117342 'end of statement')
    unknown call_tmp[650081] "expr temp" "maybe param" "maybe type" "temp"
    (650084 'move' call_tmp[650081](117347 call isSparseDom dom[117339]))
    (516019 'move' ret[516014](516018 'deref' call_tmp[650081]))
    gotoReturn _end_chpl__isSparseDomType[516012] _end_chpl__isSparseDomType[516012]
    (479298 'end of statement' dom[117339])
    label _end_chpl__isSparseDomType[516012]
    (516016 return ret[516014])
  }
  function chpl__parentDomainFromDomainRuntimeType[117356](arg domainType[117354]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516025] "RVV" "temp"
    unknown call_tmp[650086] "maybe param" "maybe type" "temp"
    (650089 'move' call_tmp[650086](117392 'get runtime type field' domainType[117354] "parentDom"))
    unknown parentDom[117393] "dead at end of block" "no auto destroy" "no copy"
    (542689 'init var' parentDom[117393] call_tmp[650086])
    (117396 'end of statement')
    unknown call_tmp[650093] "expr temp" "maybe param" "maybe type" "temp"
    (650096 'move' call_tmp[650093](117400 call _value _mt[243] parentDom[117393]))
    unknown call_tmp[650098] "expr temp" "maybe param" "maybe type" "temp"
    (650101 'move' call_tmp[650098](117404 call _getDomain call_tmp[650093]))
    (516030 'move' ret[516025](516029 'deref' call_tmp[650098]))
    gotoReturn _end_chpl__parentDomainFromDomainRuntimeType[516023] _end_chpl__parentDomainFromDomainRuntimeType[516023]
    (479300 'end of statement' parentDom[117393])
    label _end_chpl__parentDomainFromDomainRuntimeType[516023]
    (516027 return ret[516025])
  }
  function chpl__distributed[117415](arg d[117412]:_distribution[118967](?), arg domainType[117417]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516036] "RVV" "temp" "type variable"
    unknown call_tmp[650103] "expr temp" "maybe param" "maybe type" "temp"
    (650106 'move' call_tmp[650103](117422 call isDomainType domainType[117417]))
    unknown call_tmp[650108] "expr temp" "maybe param" "maybe type" "temp"
    (650111 'move' call_tmp[650108](117423 call ! call_tmp[650103]))
    unknown call_tmp[650113] "expr temp" "maybe param" "maybe type" "temp"
    (650116 'move' call_tmp[650113](117450 call _cond_test call_tmp[650108]))
    if call_tmp[650113]
    {
      unknown call_tmp[650118] "expr temp" "maybe param" "maybe type" "temp"
      (650121 'move' call_tmp[650118](117446 call _cast string[26] domainType[117417]))
      (117448 call compilerError "cannot apply 'dmapped' to the non-domain type " call_tmp[650118])
    }
    unknown call_tmp[650123] "expr temp" "maybe param" "maybe type" "temp"
    (650126 'move' call_tmp[650123](117459 call chpl__isRectangularDomType domainType[117417]))
    unknown call_tmp[650128] "expr temp" "maybe param" "maybe type" "temp"
    (650131 'move' call_tmp[650128](117543 call _cond_test call_tmp[650123]))
    if call_tmp[650128]
    {
      unknown dom[117461] "dead at end of block" "insert auto destroy"
      (542691 'default init var' dom[117461] domainType[117417])
      (117464 'end of statement')
      unknown call_tmp[650135] "expr temp" "maybe param" "maybe type" "temp"
      (650138 'move' call_tmp[650135](117470 call _value _mt[243] dom[117461]))
      unknown call_tmp[650142] "expr temp" "maybe param" "maybe type" "temp"
      (650145 'move' call_tmp[650142](117473 call rank _mt[243] call_tmp[650135]))
      unknown call_tmp[650149] "expr temp" "maybe param" "maybe type" "temp"
      (650152 'move' call_tmp[650149](117477 call _value _mt[243] dom[117461]))
      unknown call_tmp[650156] "expr temp" "maybe param" "maybe type" "temp"
      (650159 'move' call_tmp[650156](117480 call idxType _mt[243] call_tmp[650149]))
      unknown call_tmp[650163] "expr temp" "maybe param" "maybe type" "temp"
      (650166 'move' call_tmp[650163](117484 call _value _mt[243] dom[117461]))
      unknown call_tmp[650170] "expr temp" "maybe param" "maybe type" "temp"
      (650173 'move' call_tmp[650170](117487 call stridable _mt[243] call_tmp[650163]))
      unknown call_tmp[650175] "expr temp" "maybe param" "maybe type" "temp"
      (650178 'move' call_tmp[650175](117490 call chpl__buildDomainRuntimeType d[117412] call_tmp[650142] call_tmp[650156] call_tmp[650170]))
      (516041 'move' ret[516036](516040 'deref' call_tmp[650175]))
      gotoReturn _end_chpl__distributed[516034] _end_chpl__distributed[516034]
      (479303 'end of statement' dom[117461] dom[117461] dom[117461])
    }
    {
      unknown call_tmp[650180] "expr temp" "maybe param" "maybe type" "temp"
      (650183 'move' call_tmp[650180](117496 call chpl__isSparseDomType domainType[117417]))
      unknown call_tmp[650185] "expr temp" "maybe param" "maybe type" "temp"
      (650188 'move' call_tmp[650185](117539 call _cond_test call_tmp[650180]))
      if call_tmp[650185]
      {
        const parentDom[117501] "dead at end of block" "const" "ref var"
        unknown call_tmp[650190] "expr temp" "maybe param" "maybe type" "temp"
        (650193 'move' call_tmp[650190](117500 call chpl__parentDomainFromDomainRuntimeType domainType[117417]))
        (542694 'move' parentDom[117501](542693 'addr of' call_tmp[650190]))
        (117504 'end of statement')
        unknown call_tmp[650195] "expr temp" "maybe param" "maybe type" "temp"
        (650198 'move' call_tmp[650195](117510 call chpl__buildSparseDomainRuntimeType d[117412] parentDom[117501]))
        (516046 'move' ret[516036](516045 'deref' call_tmp[650195]))
        gotoReturn _end_chpl__distributed[516034] _end_chpl__distributed[516034]
        (479307 'end of statement' parentDom[117501])
      }
      {
        unknown dom[117514] "dead at end of block" "insert auto destroy"
        (542696 'default init var' dom[117514] domainType[117417])
        (117517 'end of statement')
        unknown call_tmp[650202] "expr temp" "maybe param" "maybe type" "temp"
        (650205 'move' call_tmp[650202](117523 call _value _mt[243] dom[117514]))
        unknown call_tmp[650209] "expr temp" "maybe param" "maybe type" "temp"
        (650212 'move' call_tmp[650209](117526 call idxType _mt[243] call_tmp[650202]))
        unknown call_tmp[650216] "expr temp" "maybe param" "maybe type" "temp"
        (650219 'move' call_tmp[650216](117530 call _value _mt[243] dom[117514]))
        unknown call_tmp[650223] "expr temp" "maybe param" "maybe type" "temp"
        (650226 'move' call_tmp[650223](117533 call parSafe _mt[243] call_tmp[650216]))
        unknown call_tmp[650228] "expr temp" "maybe param" "maybe type" "temp"
        (650231 'move' call_tmp[650228](117536 call chpl__buildDomainRuntimeType d[117412] call_tmp[650209] call_tmp[650223]))
        (516051 'move' ret[516036](516050 'deref' call_tmp[650228]))
        gotoReturn _end_chpl__distributed[516034] _end_chpl__distributed[516034]
        (479309 'end of statement' dom[117514] dom[117514])
      }
    }
    label _end_chpl__distributed[516034]
    (516038 return ret[516036])
  }
  function chpl__distributionFromDomainRuntimeType[117554](arg rtt[117552]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516057] "RVV" "temp"
    unknown call_tmp[650233] "maybe param" "maybe type" "temp"
    (650236 'move' call_tmp[650233](117574 'get runtime type field' rtt[117552] "dist"))
    unknown dist[117575] "dead at end of block" "no auto destroy" "no copy"
    (542698 'init var' dist[117575] call_tmp[650233])
    (117578 'end of statement')
    unknown call_tmp[650240] "expr temp" "maybe param" "maybe type" "temp"
    (650243 'move' call_tmp[650240](117582 call _value _mt[243] dist[117575]))
    unknown call_tmp[650245] "expr temp" "maybe param" "maybe type" "temp"
    (650248 'move' call_tmp[650245](117586 call _getDistribution call_tmp[650240]))
    (516062 'move' ret[516057](516061 'deref' call_tmp[650245]))
    gotoReturn _end_chpl__distributionFromDomainRuntimeType[516055] _end_chpl__distributionFromDomainRuntimeType[516055]
    (479312 'end of statement' dist[117575])
    label _end_chpl__distributionFromDomainRuntimeType[516055]
    (516059 return ret[516057])
  }
  function chpl__domainFromArrayRuntimeType[117595](arg rtt[117593]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516068] "RVV" "temp"
    unknown call_tmp[650250] "maybe param" "maybe type" "temp"
    (650253 'move' call_tmp[650250](117601 'get runtime type field' rtt[117593] "dom"))
    unknown dom[117602] "dead at end of block" "no auto destroy" "no copy"
    (542700 'init var' dom[117602] call_tmp[650250])
    (117605 'end of statement')
    unknown call_tmp[650257] "expr temp" "maybe param" "maybe type" "temp"
    (650260 'move' call_tmp[650257](117609 call _value _mt[243] dom[117602]))
    unknown call_tmp[650262] "expr temp" "maybe param" "maybe type" "temp"
    (650265 'move' call_tmp[650262](117613 call _getDomain call_tmp[650257]))
    (516073 'move' ret[516068](516072 'deref' call_tmp[650262]))
    gotoReturn _end_chpl__domainFromArrayRuntimeType[516066] _end_chpl__domainFromArrayRuntimeType[516066]
    (479314 'end of statement' dom[117602])
    label _end_chpl__domainFromArrayRuntimeType[516066]
    (516070 return ret[516068])
  }
  function chpl__eltTypeFromArrayRuntimeType[117622](arg rtt[117620]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516079] "RVV" "temp" "type variable"
    unknown eltType[117643] "dead at end of block" "no auto destroy" "no copy" "type variable"(117642 'get runtime type field' rtt[117620] "eltType")
    (542705 'move' eltType[117643](542702 'get runtime type field' rtt[117620] "eltType"))
    (479316 'end of statement')
    (516084 'move' ret[516079](516083 'deref' eltType[117643]))
    gotoReturn _end_chpl__eltTypeFromArrayRuntimeType[516077] _end_chpl__eltTypeFromArrayRuntimeType[516077]
    (479317 'end of statement' eltType[117643])
    label _end_chpl__eltTypeFromArrayRuntimeType[516077]
    (516081 return ret[516079])
  }
  function chpl__instanceTypeFromArrayRuntimeType[117656](arg rtt[117654]:_any[178](?)) type : _unknown[51] "ignore runtime type"
  {
    unknown ret[516090] "RVV" "temp" "type variable"
    (117693 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (479319 'end of statement')
    unknown call_tmp[650267] "expr temp" "maybe param" "maybe type" "temp"
    (650270 'move' call_tmp[650267](117700 'static field type' rtt[117654] "_instance"))
    (516095 'move' ret[516090](516094 'deref' call_tmp[650267]))
    (516092 return ret[516090])
  }
  function chpl__buildIndexType[117711](param arg rank[117708]:int(64)[13], arg idxType[117713]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516099] "RVV" "temp" "type variable"
    (516104 'move' ret[516099](516103 'deref' idxType[117713]))
    (516101 return ret[516099])
  }
  where {
    (117717 call == rank[117708] 1)
  }
  function chpl__buildIndexType[117732](param arg rank[117729]:int(64)[13], arg idxType[117734]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516108] "RVV" "temp" "type variable"
    unknown call_tmp[650272] "expr temp" "maybe param" "maybe type" "temp"
    (650275 'move' call_tmp[650272](117742 call * rank[117729] idxType[117734]))
    (516113 'move' ret[516108](516112 'deref' call_tmp[650272]))
    (516110 return ret[516108])
  }
  where {
    (117738 call > rank[117729] 1)
  }
  function chpl__buildIndexType[117756](param arg rank[117753]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[516117] "RVV" "temp" "type variable"
    unknown call_tmp[650277] "expr temp" "maybe param" "maybe type" "temp"
    (650280 'move' call_tmp[650277](117762 call chpl__buildIndexType rank[117753] int(64)[13]))
    (516122 'move' ret[516117](516121 'deref' call_tmp[650277]))
    (516119 return ret[516117])
  }
  function chpl__buildIndexType[117774](arg d[117771]:_domain[125902](?)) type : _unknown[51]
  {
    unknown ret[516126] "RVV" "temp" "type variable"
    unknown call_tmp[650284] "expr temp" "maybe param" "maybe type" "temp"
    (650287 'move' call_tmp[650284](117778 call rank _mt[243] d[117771]))
    unknown call_tmp[650291] "expr temp" "maybe param" "maybe type" "temp"
    (650294 'move' call_tmp[650291](117783 call _value _mt[243] d[117771]))
    unknown call_tmp[650298] "expr temp" "maybe param" "maybe type" "temp"
    (650301 'move' call_tmp[650298](117786 call idxType _mt[243] call_tmp[650291]))
    unknown call_tmp[650303] "expr temp" "maybe param" "maybe type" "temp"
    (650306 'move' call_tmp[650303](117789 call chpl__buildIndexType call_tmp[650284] call_tmp[650298]))
    (516131 'move' ret[516126](516130 'deref' call_tmp[650303]))
    (516128 return ret[516126])
  }
  function isRectangularDom[117801](arg d[117798]:_domain[125902](?)) param : _unknown[51]
  {
    unknown ret[516135] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[492018] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650310] "expr temp" "maybe param" "maybe type" "temp"
      (650313 'move' call_tmp[650310](117806 call _value _mt[243] d[117798]))
      (492022 'move' call_type_tmp[492018](117809 'typeof' call_tmp[650310]))
    }
    unknown call_tmp[650315] "expr temp" "maybe param" "maybe type" "temp"
    (650318 'move' call_tmp[650315](117811 call _to_borrowed call_type_tmp[492018]))
    unknown call_tmp[650320] "expr temp" "maybe param" "maybe type" "temp"
    (650323 'move' call_tmp[650320](354202 'is_subtype' BaseRectangularDom[382155](?) call_tmp[650315]))
    (516140 'move' ret[516135](516139 'deref' call_tmp[650320]))
    (516137 return ret[516135])
  }
  function isRectangularArr[117828](arg a[117825]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[516144] "RVV" "param" "temp"
    unknown call_tmp[650327] "expr temp" "maybe param" "maybe type" "temp"
    (650330 'move' call_tmp[650327](117832 call _dom _mt[243] a[117825]))
    unknown call_tmp[650332] "expr temp" "maybe param" "maybe type" "temp"
    (650335 'move' call_tmp[650332](117836 call isRectangularDom call_tmp[650327]))
    (516149 'move' ret[516144](516148 'deref' call_tmp[650332]))
    (516146 return ret[516144])
  }
  function isIrregularDom[117848](arg d[117845]:_domain[125902](?)) param : _unknown[51]
  {
    unknown ret[516153] "RVV" "param" "temp"
    unknown tmp[424312] "maybe param" "temp"
    (424323 'move' tmp[424312](117853 call isSparseDom d[117845]))
    unknown call_tmp[650337] "expr temp" "maybe param" "maybe type" "temp"
    (650340 'move' call_tmp[650337](424325 call _cond_invalid tmp[424312]))
    if call_tmp[650337]
    {
      (424328 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564720] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564721] "maybe param" "temp"
    unknown call_tmp[650342] "expr temp" "maybe param" "maybe type" "temp"
    (650345 'move' call_tmp[650342](424313 call isTrue tmp[424312]))
    (564726 'move' tmp[564721](564724 call _cond_test call_tmp[650342]))
    if tmp[564721]
    {
      (564731 'move' tmp[564720](564728 '_paramFoldLogical' tmp[564721] 1))
    }
    {
      unknown tmp[564733] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650347] "expr temp" "maybe param" "maybe type" "temp"
      (650350 'move' call_tmp[650347](117857 call isAssociativeDom d[117845]))
      (564735 'move' tmp[564733](424317 call isTrue call_tmp[650347]))
      (564740 'move' tmp[564720](564737 '_paramFoldLogical' tmp[564721] tmp[564733]))
    }
    (516158 'move' ret[516153](516157 'deref' tmp[564720]))
    (516155 return ret[516153])
  }
  function isIrregularArr[117873](arg a[117870]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[516162] "RVV" "param" "temp"
    unknown call_tmp[650354] "expr temp" "maybe param" "maybe type" "temp"
    (650357 'move' call_tmp[650354](117877 call _dom _mt[243] a[117870]))
    unknown call_tmp[650359] "expr temp" "maybe param" "maybe type" "temp"
    (650362 'move' call_tmp[650359](117881 call isIrregularDom call_tmp[650354]))
    (516167 'move' ret[516162](516166 'deref' call_tmp[650359]))
    (516164 return ret[516162])
  }
  function isAssociativeDom[117893](arg d[117890]:_domain[125902](?)) param : _unknown[51]
  {
    unknown ret[516189] "RVV" "param" "temp"
    function isAssociativeDomClass[117901](arg dc[117898]:BaseAssociativeDom[382160](?)) param : _unknown[51]
    {
      unknown ret[516171] "RVV" "param" "temp"
      (516176 'move' ret[516171](516175 'deref' 1))
      (516173 return ret[516171])
    }
    function isAssociativeDomClass[117914](arg dc[117912]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516180] "RVV" "param" "temp"
      (516185 'move' ret[516180](516184 'deref' 0))
      (516182 return ret[516180])
    }
    unknown call_tmp[650366] "expr temp" "maybe param" "maybe type" "temp"
    (650369 'move' call_tmp[650366](117925 call _value _mt[243] d[117890]))
    unknown call_tmp[650371] "expr temp" "maybe param" "maybe type" "temp"
    (650374 'move' call_tmp[650371](117929 call _to_borrowed call_tmp[650366]))
    unknown call_tmp[650376] "expr temp" "maybe param" "maybe type" "temp"
    (650379 'move' call_tmp[650376](117931 call isAssociativeDomClass call_tmp[650371]))
    (516194 'move' ret[516189](516193 'deref' call_tmp[650376]))
    (516191 return ret[516189])
  }
  function isAssociativeArr[117944](arg a[117941]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[516198] "RVV" "param" "temp"
    unknown call_tmp[650383] "expr temp" "maybe param" "maybe type" "temp"
    (650386 'move' call_tmp[650383](117948 call _dom _mt[243] a[117941]))
    unknown call_tmp[650388] "expr temp" "maybe param" "maybe type" "temp"
    (650391 'move' call_tmp[650388](117952 call isAssociativeDom call_tmp[650383]))
    (516203 'move' ret[516198](516202 'deref' call_tmp[650388]))
    (516200 return ret[516198])
  }
  function isSparseDom[117964](arg d[117961]:_domain[125902](?)) param : _unknown[51]
  {
    unknown ret[516225] "RVV" "param" "temp"
    function isSparseDomClass[117972](arg dc[117969]:BaseSparseDom[382165](?)) param : _unknown[51]
    {
      unknown ret[516207] "RVV" "param" "temp"
      (516212 'move' ret[516207](516211 'deref' 1))
      (516209 return ret[516207])
    }
    function isSparseDomClass[117985](arg dc[117983]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516216] "RVV" "param" "temp"
      (516221 'move' ret[516216](516220 'deref' 0))
      (516218 return ret[516216])
    }
    unknown call_tmp[650395] "expr temp" "maybe param" "maybe type" "temp"
    (650398 'move' call_tmp[650395](117995 call _value _mt[243] d[117961]))
    unknown call_tmp[650400] "expr temp" "maybe param" "maybe type" "temp"
    (650403 'move' call_tmp[650400](117999 call isSparseDomClass call_tmp[650395]))
    (516230 'move' ret[516225](516229 'deref' call_tmp[650400]))
    (516227 return ret[516225])
  }
  function isSparseArr[118012](arg a[118009]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[516234] "RVV" "param" "temp"
    unknown call_tmp[650407] "expr temp" "maybe param" "maybe type" "temp"
    (650410 'move' call_tmp[650407](118016 call _dom _mt[243] a[118009]))
    unknown call_tmp[650412] "expr temp" "maybe param" "maybe type" "temp"
    (650415 'move' call_tmp[650412](118020 call isSparseDom call_tmp[650407]))
    (516239 'move' ret[516234](516238 'deref' call_tmp[650412]))
    (516236 return ret[516234])
  }
  function chpl__checkDomainsMatch[118034](arg a[118031]:_array[133588](?), arg b[118036]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650417] "expr temp" "maybe param" "maybe type" "temp"
    (650420 'move' call_tmp[650417](118080 call _cond_test 1))
    if call_tmp[650417]
    {
      unknown call_tmp[650424] "expr temp" "maybe param" "maybe type" "temp"
      (650427 'move' call_tmp[650424](118044 call _dom _mt[243] a[118031]))
      unknown call_tmp[650429] "expr temp" "maybe param" "maybe type" "temp"
      (650432 'move' call_tmp[650429](118048 call != call_tmp[650424] b[118036]))
      unknown call_tmp[650434] "expr temp" "maybe param" "maybe type" "temp"
      (650437 'move' call_tmp[650434](118075 call _cond_test call_tmp[650429]))
      if call_tmp[650434]
      {
        (118072 call boundsCheckHalt module=[255] HaltWrappers[209910] "domain mismatch on return")
        (359038 'referenced modules list' HaltWrappers[209910])
      }
    }
    (516241 return _void[55])
    (355024 'used modules list'(118039 'import' HaltWrappers[209910]))
  }
  function chpl__checkDomainsMatch[118092](arg a[118089]:_iteratorRecord[205](?), arg b[118094]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650439] "expr temp" "maybe param" "maybe type" "temp"
    (650442 'move' call_tmp[650439](118127 call _cond_test 1))
    if call_tmp[650439]
    {
      unknown tmp[118102] "dead at end of block" "insert auto destroy"
      (542707 'init var' tmp[118102] a[118089])
      (118105 'end of statement')
      unknown call_tmp[650446] "expr temp" "maybe param" "maybe type" "temp"
      (650449 'move' call_tmp[650446](118108 call _dom _mt[243] tmp[118102]))
      unknown call_tmp[650451] "expr temp" "maybe param" "maybe type" "temp"
      (650454 'move' call_tmp[650451](118112 call != call_tmp[650446] b[118094]))
      unknown call_tmp[650456] "expr temp" "maybe param" "maybe type" "temp"
      (650459 'move' call_tmp[650456](118123 call _cond_test call_tmp[650451]))
      if call_tmp[650456]
      {
        (118120 call boundsCheckHalt module=[255] HaltWrappers[209910] "domain mismatch on return")
        (359045 'referenced modules list' HaltWrappers[209910])
      }
    }
    (516243 return _void[55])
    (355026 'used modules list'(118097 'import' HaltWrappers[209910]))
  }
  function chpl__checkEltTypeMatch[118141](arg a[118138]:_array[133588](?), arg b[118143]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650463] "expr temp" "maybe param" "maybe type" "temp"
    (650466 'move' call_tmp[650463](118146 call eltType _mt[243] a[118138]))
    unknown call_tmp[650468] "expr temp" "maybe param" "maybe type" "temp"
    (650471 'move' call_tmp[650468](118150 call != call_tmp[650463] b[118143]))
    unknown call_tmp[650473] "expr temp" "maybe param" "maybe type" "temp"
    (650476 'move' call_tmp[650473](118186 call _cond_test call_tmp[650468]))
    if call_tmp[650473]
    {
      unknown call_tmp[650480] "expr temp" "maybe param" "maybe type" "temp"
      (650483 'move' call_tmp[650480](118172 call eltType _mt[243] a[118138]))
      unknown call_tmp[650485] "expr temp" "maybe param" "maybe type" "temp"
      (650488 'move' call_tmp[650485](118176 call _cast string[26] call_tmp[650480]))
      unknown call_tmp[650490] "expr temp" "maybe param" "maybe type" "temp"
      (650493 'move' call_tmp[650490](118181 call _cast string[26] b[118143]))
      (118183 call compilerError "array element type mismatch in return from " call_tmp[650485] " to " call_tmp[650490])
    }
    (516245 return _void[55])
  }
  function chpl__checkEltTypeMatch[118199](arg a[118196]:_iteratorRecord[205](?), arg b[118201]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650495] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650498 'move' call_tmp[650495](118205 'typeof' a[118196]))
    unknown eltType[118208] "dead at end of block" "insert auto destroy" "type variable"(118207 call iteratorToArrayElementType call_tmp[650495])
    unknown call_tmp[650500] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650503 'move' call_tmp[650500](542711 'typeof' a[118196]))
    (542713 'move' eltType[118208](542710 call iteratorToArrayElementType call_tmp[650500]))
    (479341 'end of statement')
    unknown call_tmp[650505] "expr temp" "maybe param" "maybe type" "temp"
    (650508 'move' call_tmp[650505](118214 call != eltType[118208] b[118201]))
    unknown call_tmp[650510] "expr temp" "maybe param" "maybe type" "temp"
    (650513 'move' call_tmp[650510](118231 call _cond_test call_tmp[650505]))
    if call_tmp[650510]
    {
      unknown call_tmp[650515] "expr temp" "maybe param" "maybe type" "temp"
      (650518 'move' call_tmp[650515](118221 call _cast string[26] eltType[118208]))
      unknown call_tmp[650520] "expr temp" "maybe param" "maybe type" "temp"
      (650523 'move' call_tmp[650520](118226 call _cast string[26] b[118201]))
      (118228 call compilerError "array element type mismatch in return from " call_tmp[650515] " to " call_tmp[650520])
      (479342 'end of statement' eltType[118208])
    }
    (516247 return _void[55])
  }
  function dmap[118239].init[798960](arg _mt[798962]:_MT[238], ref arg this[798963]:dmap[118239]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (798967 return _void[55])
  }
  function dmap[118239].init=[798969](arg _mt[798972]:_MT[238], ref arg this[798973]:dmap[118239], arg other[798974]:dmap[118239]) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (798978 return _void[55])
  }
  function dmap[118239].deinit[798980](arg _mt[798982]:_MT[238], arg this[798984]:dmap[118239]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (798992 return _void[55])
  }
  function dmap[118239].writeThis[798994](arg _mt[798998]:_MT[238], arg this[798996]:dmap[118239], arg f[798997]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799003 call writeThisDefaultImpl f[798997] this[798996])
    (799008 return _void[55])
  }
  function dmap[118239].readThis[799010](arg _mt[799014]:_MT[238], arg this[799012]:dmap[118239], arg f[799013]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799018 call readThisDefaultImpl f[799013] this[799012])
    (799024 return _void[55])
  }
  function chpl_fields_are_comparable[799038](arg _arg1[799040]:dmap[118239], arg _arg2[799041]:dmap[118239]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799050]:bool[10] "RVV" "param" "temp"
    (799055 'move' ret[799050](799054 'deref' 1))
    (799052 return ret[799050])
  }
  function ==[799026](arg _arg1[799028]:dmap[118239], arg _arg2[799029]:dmap[118239]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799069]:bool[10] "RVV" "temp"
    (799074 'move' ret[799069](799073 'deref' 1))
    (799071 return ret[799069])
  }
  where {
    unknown call_tmp[799076] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799079 'move' call_tmp[799076](799032 'typeof' _arg1[799028]))
    unknown call_tmp[799081] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799084 'move' call_tmp[799081](799034 'typeof' _arg2[799029]))
    unknown call_tmp[799086] "expr temp" "maybe param" "maybe type" "temp"
    (799089 'move' call_tmp[799086](799036 call == call_tmp[799076] call_tmp[799081]))
    unknown call_tmp[799091] "expr temp" "maybe param" "maybe type" "temp"
    (799094 'move' call_tmp[799091](799057 call chpl_fields_are_comparable[799038] _arg1[799028] _arg2[799029]))
    (799061 '&' call_tmp[799086] call_tmp[799091])
  }
  function chpl_fields_are_comparable[799108](arg _arg1[799110]:dmap[118239], arg _arg2[799111]:dmap[118239]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799120]:bool[10] "RVV" "param" "temp"
    (799125 'move' ret[799120](799124 'deref' 1))
    (799122 return ret[799120])
  }
  function !=[799096](arg _arg1[799098]:dmap[118239], arg _arg2[799099]:dmap[118239]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799139]:bool[10] "RVV" "temp"
    (799144 'move' ret[799139](799143 'deref' 0))
    (799141 return ret[799139])
  }
  where {
    unknown call_tmp[799146] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799149 'move' call_tmp[799146](799102 'typeof' _arg1[799098]))
    unknown call_tmp[799151] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799154 'move' call_tmp[799151](799104 'typeof' _arg2[799099]))
    unknown call_tmp[799156] "expr temp" "maybe param" "maybe type" "temp"
    (799159 'move' call_tmp[799156](799106 call == call_tmp[799146] call_tmp[799151]))
    unknown call_tmp[799161] "expr temp" "maybe param" "maybe type" "temp"
    (799164 'move' call_tmp[799161](799127 call chpl_fields_are_comparable[799108] _arg1[799098] _arg2[799099]))
    (799131 '&' call_tmp[799156] call_tmp[799161])
  }
  function chpl_fields_are_comparable[799178](arg _arg1[799180]:dmap[118239], arg _arg2[799181]:dmap[118239]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799190]:bool[10] "RVV" "param" "temp"
    (799195 'move' ret[799190](799194 'deref' 1))
    (799192 return ret[799190])
  }
  function <[799166](arg _arg1[799168]:dmap[118239], arg _arg2[799169]:dmap[118239]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799209]:bool[10] "RVV" "temp"
    (799214 'move' ret[799209](799213 'deref' 0))
    (799211 return ret[799209])
  }
  where {
    unknown call_tmp[799216] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799219 'move' call_tmp[799216](799172 'typeof' _arg1[799168]))
    unknown call_tmp[799221] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799224 'move' call_tmp[799221](799174 'typeof' _arg2[799169]))
    unknown call_tmp[799226] "expr temp" "maybe param" "maybe type" "temp"
    (799229 'move' call_tmp[799226](799176 call == call_tmp[799216] call_tmp[799221]))
    unknown call_tmp[799231] "expr temp" "maybe param" "maybe type" "temp"
    (799234 'move' call_tmp[799231](799197 call chpl_fields_are_comparable[799178] _arg1[799168] _arg2[799169]))
    (799201 '&' call_tmp[799226] call_tmp[799231])
  }
  function chpl_fields_are_comparable[799248](arg _arg1[799250]:dmap[118239], arg _arg2[799251]:dmap[118239]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799260]:bool[10] "RVV" "param" "temp"
    (799265 'move' ret[799260](799264 'deref' 1))
    (799262 return ret[799260])
  }
  function <=[799236](arg _arg1[799238]:dmap[118239], arg _arg2[799239]:dmap[118239]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799279]:bool[10] "RVV" "temp"
    (799284 'move' ret[799279](799283 'deref' 1))
    (799281 return ret[799279])
  }
  where {
    unknown call_tmp[799286] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799289 'move' call_tmp[799286](799242 'typeof' _arg1[799238]))
    unknown call_tmp[799291] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799294 'move' call_tmp[799291](799244 'typeof' _arg2[799239]))
    unknown call_tmp[799296] "expr temp" "maybe param" "maybe type" "temp"
    (799299 'move' call_tmp[799296](799246 call == call_tmp[799286] call_tmp[799291]))
    unknown call_tmp[799301] "expr temp" "maybe param" "maybe type" "temp"
    (799304 'move' call_tmp[799301](799267 call chpl_fields_are_comparable[799248] _arg1[799238] _arg2[799239]))
    (799271 '&' call_tmp[799296] call_tmp[799301])
  }
  function chpl_fields_are_comparable[799318](arg _arg1[799320]:dmap[118239], arg _arg2[799321]:dmap[118239]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799330]:bool[10] "RVV" "param" "temp"
    (799335 'move' ret[799330](799334 'deref' 1))
    (799332 return ret[799330])
  }
  function >[799306](arg _arg1[799308]:dmap[118239], arg _arg2[799309]:dmap[118239]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799349]:bool[10] "RVV" "temp"
    (799354 'move' ret[799349](799353 'deref' 0))
    (799351 return ret[799349])
  }
  where {
    unknown call_tmp[799356] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799359 'move' call_tmp[799356](799312 'typeof' _arg1[799308]))
    unknown call_tmp[799361] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799364 'move' call_tmp[799361](799314 'typeof' _arg2[799309]))
    unknown call_tmp[799366] "expr temp" "maybe param" "maybe type" "temp"
    (799369 'move' call_tmp[799366](799316 call == call_tmp[799356] call_tmp[799361]))
    unknown call_tmp[799371] "expr temp" "maybe param" "maybe type" "temp"
    (799374 'move' call_tmp[799371](799337 call chpl_fields_are_comparable[799318] _arg1[799308] _arg2[799309]))
    (799341 '&' call_tmp[799366] call_tmp[799371])
  }
  function chpl_fields_are_comparable[799388](arg _arg1[799390]:dmap[118239], arg _arg2[799391]:dmap[118239]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799400]:bool[10] "RVV" "param" "temp"
    (799405 'move' ret[799400](799404 'deref' 1))
    (799402 return ret[799400])
  }
  function >=[799376](arg _arg1[799378]:dmap[118239], arg _arg2[799379]:dmap[118239]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799419]:bool[10] "RVV" "temp"
    (799424 'move' ret[799419](799423 'deref' 1))
    (799421 return ret[799419])
  }
  where {
    unknown call_tmp[799426] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799429 'move' call_tmp[799426](799382 'typeof' _arg1[799378]))
    unknown call_tmp[799431] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799434 'move' call_tmp[799431](799384 'typeof' _arg2[799379]))
    unknown call_tmp[799436] "expr temp" "maybe param" "maybe type" "temp"
    (799439 'move' call_tmp[799436](799386 call == call_tmp[799426] call_tmp[799431]))
    unknown call_tmp[799441] "expr temp" "maybe param" "maybe type" "temp"
    (799444 'move' call_tmp[799441](799407 call chpl_fields_are_comparable[799388] _arg1[799378] _arg2[799379]))
    (799411 '&' call_tmp[799436] call_tmp[799441])
  }
  function =[799446](ref arg _arg1[799448]:dmap[118239], const?  ref arg _arg2[799449]:dmap[118239]) : void[4] "assignop" "compiler generated" "last resort"
  {
    (799460 return _void[55])
  }
  where {
    unknown call_tmp[799462] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799465 'move' call_tmp[799462](799452 'typeof' _arg1[799448]))
    unknown call_tmp[799467] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799470 'move' call_tmp[799467](799454 'typeof' _arg2[799449]))
    (799456 call == call_tmp[799462] call_tmp[799467])
  }
  function chpl__defaultHash[799472](arg r[799474]:dmap[118239]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[799482] "RVV" "temp"
    (799487 'move' ret[799482](799486 'deref' 0))
    (799484 return ret[799482])
  }
  type dmap[118239]
  function chpl__buildDistType[118246](arg t[118244]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516251] "RVV" "temp" "type variable"
    unknown x[118261] "dead at end of block" "insert auto destroy"
    unknown call_tmp[650525] "expr temp" "maybe param" "maybe type" "temp"
    (650528 'move' call_tmp[650525](118259 call _to_unmanaged t[118244]))
    unknown call_tmp[650530] "expr temp" "maybe param" "maybe type" "temp"
    (650533 'move' call_tmp[650530](118260 'to nilable class from type' call_tmp[650525]))
    (542715 'default init var' x[118261] call_tmp[650530])
    (118264 'end of statement')
    unknown call_tmp[650535] "expr temp" "maybe param" "maybe type" "temp"
    (650538 'move' call_tmp[650535](118269 call postfix! x[118261]))
    unknown call_tmp[650540] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650543 'move' call_tmp[650540](747777 'new' _distribution[118967](?) call_tmp[650535]))
    unknown y[118273] "dead at end of block" "insert auto destroy"
    (542717 'init var' y[118273] call_tmp[650540])
    (118276 'end of statement' x[118261])
    unknown call_tmp[650545] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650548 'move' call_tmp[650545](118278 'typeof' y[118273]))
    (516256 'move' ret[516251](516255 'deref' call_tmp[650545]))
    gotoReturn _end_chpl__buildDistType[516249] _end_chpl__buildDistType[516249]
    (479345 'end of statement' y[118273])
    label _end_chpl__buildDistType[516249]
    (516253 return ret[516251])
  }
  where {
    unknown call_tmp[650550] "expr temp" "maybe param" "maybe type" "temp"
    (650553 'move' call_tmp[650550](118252 call _to_borrowed t[118244]))
    (354203 'is_subtype' BaseDist[382250](?) call_tmp[650550])
  }
  function chpl__buildDistType[118288](arg t[118286]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118309 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
    (516260 return _void[55])
  }
  function chpl__buildDistValue[118320](arg x[118317]:unmanaged[220](?)) : _unknown[51]
  {
    unknown ret[516264] "RVV" "temp"
    unknown call_tmp[650555] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650558 'move' call_tmp[650555](747778 'new' _distribution[118967](?) x[118317]))
    (516269 'move' ret[516264](516268 'deref' call_tmp[650555]))
    (516266 return ret[516264])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492024] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650562] "expr temp" "maybe param" "maybe type" "temp"
      (650565 'move' call_tmp[650562](118328 call(118324 call (partial) borrow _mt[243] x[118317])))
      (492028 'move' call_type_tmp[492024](118329 'typeof' call_tmp[650562]))
    }
    (354204 'is_subtype' BaseDist[382250](?) call_type_tmp[492024])
  }
  function chpl__buildDistValue[118350](in arg x[118347]:_owned[30](?)) : _unknown[51]
  {
    unknown ret[516273] "RVV" "temp"
    unknown call_tmp[650569] "expr temp" "maybe param" "maybe type" "temp"
    (650572 'move' call_tmp[650569](118370 call(118366 call (partial) release _mt[243] x[118347])))
    unknown call_tmp[650574] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650577 'move' call_tmp[650574](747779 'new' _distribution[118967](?) call_tmp[650569]))
    (516278 'move' ret[516273](516277 'deref' call_tmp[650574]))
    (516275 return ret[516273])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492030] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650581] "expr temp" "maybe param" "maybe type" "temp"
      (650584 'move' call_tmp[650581](118358 call(118354 call (partial) borrow _mt[243] x[118347])))
      (492034 'move' call_type_tmp[492030](118359 'typeof' call_tmp[650581]))
    }
    (354205 'is_subtype' BaseDist[382250](?) call_type_tmp[492030])
  }
  function chpl__buildDistValue[118383](arg x[118381]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118404 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
    (516280 return _void[55])
  }
  function _distribution[118967](?).init[118430](arg _mt[118971]:_MT[238], ref arg this[118969]:_distribution[118967](?), arg _pid[118427]:int(64)[13], arg _instance[118432]:_any[178](?), arg _unowned[118435]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461156] "temp"
    (461159 'init var' tmp[461156] _pid[118427] int(64)[13])
    (461161 'init field' this[118969] c"_pid" tmp[461156])
    (479351 'end of statement')
    unknown tmp[461165] "temp"
    (461167 'init var' tmp[461165] _instance[118432])
    (461169 'init field' this[118969] c"_instance" tmp[461165])
    (479352 'end of statement')
    unknown tmp[461173] "temp"
    (461176 'init var' tmp[461173] _unowned[118435] bool[10])
    (461178 'init field' this[118969] c"_unowned" tmp[461173])
    (479353 'end of statement')
    (516282 return _void[55])
  }
  function _distribution[118967](?).init[118473](arg _mt[118975]:_MT[238], ref arg this[118973]:_distribution[118967](?), arg value[118471]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461182] "temp"
    unknown tmp[564747] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564748] "maybe param" "temp"
    unknown call_tmp[650586] "expr temp" "maybe param" "maybe type" "temp"
    (650589 'move' call_tmp[650586](118482 call _isPrivatized value[118471]))
    (564753 'move' tmp[564748](564751 call _cond_test call_tmp[650586]))
    if tmp[564748]
    {
      unknown tmp[564755] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564757 'move' tmp[564755](118486 call _newPrivatizedClass value[118471]))
      (564762 'move' tmp[564747](564759 '_paramFoldLogical' tmp[564748] tmp[564755]))
    }
    {
      (564767 'move' tmp[564747](564764 '_paramFoldLogical' tmp[564748] nullPid[113712]))
    }
    (461185 'init var' tmp[461182] tmp[564747] int(64)[13])
    (461187 'init field' this[118973] c"_pid" tmp[461182])
    (479354 'end of statement')
    unknown call_tmp[650591] "maybe param" "maybe type" "temp"
    (650594 'move' call_tmp[650591](118502 call _to_unmanaged value[118471]))
    unknown tmp[461191] "temp"
    (461193 'init var' tmp[461191] call_tmp[650591])
    (461195 'init field' this[118973] c"_instance" tmp[461191])
    (479355 'end of statement')
    val tmp[461200]:bool[10] "temp"
    (461203 'default init var' tmp[461200] bool[10])
    (461205 '.=' this[118973] c"_unowned" tmp[461200])
    (479356 'end of statement')
    (516284 return _void[55])
  }
  function _distribution[118967](?).init=[118514](arg _mt[118979]:_MT[238], ref arg this[118977]:_distribution[118967](?), const  ref arg other[118511]:_distribution[118967](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[650598] "expr temp" "maybe param" "maybe type" "temp"
    (650601 'move' call_tmp[650598](118517 call _value _mt[243] other[118511]))
    unknown call_tmp[650605] "maybe param" "maybe type" "temp"
    (650608 'move' call_tmp[650605](118526 call(118522 call (partial) dsiClone _mt[243] call_tmp[650598])))
    unknown value[118527] "dead at end of block" "insert auto destroy"
    (542719 'init var' value[118527] call_tmp[650605])
    (118530 'end of statement')
    (118538 call(118533 call (partial) init _mt[243] this[118977]) value[118527])
    (479357 'end of statement' value[118527])
    (516286 return _void[55])
  }
  function _distribution[118967](?)._value[118544](arg _mt[118983]:_MT[238], arg this[118981]:_distribution[118967](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516290] "RVV" "temp"
    unknown call_tmp[650614] "expr temp" "maybe param" "maybe type" "temp"
    (650617 'move' call_tmp[650614](382433 call _instance _mt[243] this[118981]))
    unknown call_tmp[650619] "expr temp" "maybe param" "maybe type" "temp"
    (650622 'move' call_tmp[650619](118549 call _isPrivatized call_tmp[650614]))
    unknown call_tmp[650624] "expr temp" "maybe param" "maybe type" "temp"
    (650627 'move' call_tmp[650624](118563 call _cond_test call_tmp[650619]))
    if call_tmp[650624]
    {
      { scopeless type
        unknown call_type_tmp[492036] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[650631] "expr temp" "maybe param" "maybe type" "temp"
        (650634 'move' call_tmp[650631](382438 call _instance _mt[243] this[118981]))
        (492040 'move' call_type_tmp[492036](118552 'typeof' call_tmp[650631]))
      }
      unknown call_tmp[650638] "expr temp" "maybe param" "maybe type" "temp"
      (650641 'move' call_tmp[650638](382443 call _pid _mt[243] this[118981]))
      unknown call_tmp[650643] "expr temp" "maybe param" "maybe type" "temp"
      (650646 'move' call_tmp[650643](118555 call chpl_getPrivatizedCopy call_type_tmp[492036] call_tmp[650638]))
      (516295 'move' ret[516290](516294 'deref' call_tmp[650643]))
      gotoReturn _end__value[516288] _end__value[516288]
    }
    {
      unknown call_tmp[650650] "expr temp" "maybe param" "maybe type" "temp"
      (650653 'move' call_tmp[650650](382448 call _instance _mt[243] this[118981]))
      (516300 'move' ret[516290](516299 'deref' call_tmp[650650]))
      gotoReturn _end__value[516288] _end__value[516288]
    }
    label _end__value[516288]
    (516292 return ret[516290])
  }
  function _distribution[118967](?).chpl_forwarding_expr4__value[118572](arg _mt[118987]:_MT[238], arg this[118985]:_distribution[118967](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516306] "RVV" "temp"
    (516310 'move' ret[516306](382452 call _value _mt[243] this[118985]))
    (516308 return ret[516306])
  }
  function _distribution[118967](?)._do_destroy[118580](arg _mt[118991]:_MT[238], arg this[118989]:_distribution[118967](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown tmp[424333] "maybe param" "temp"
    unknown call_tmp[650659] "expr temp" "maybe param" "maybe type" "temp"
    (650662 'move' call_tmp[650659](382457 call _unowned _mt[243] this[118989]))
    (424344 'move' tmp[424333](118583 call ! call_tmp[650659]))
    unknown call_tmp[650664] "expr temp" "maybe param" "maybe type" "temp"
    (650667 'move' call_tmp[650664](424346 call _cond_invalid tmp[424333]))
    if call_tmp[650664]
    {
      (424349 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564774] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564775] "maybe param" "temp"
    unknown call_tmp[650669] "expr temp" "maybe param" "maybe type" "temp"
    (650672 'move' call_tmp[650669](424334 call isTrue tmp[424333]))
    (564780 'move' tmp[564775](564778 call _cond_test call_tmp[650669]))
    if tmp[564775]
    {
      unknown tmp[564782] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650676] "expr temp" "maybe param" "maybe type" "temp"
      (650679 'move' call_tmp[650676](359064 call _instance _mt[243] this[118989]))
      unknown call_tmp[650683] "expr temp" "maybe param" "maybe type" "temp"
      (650686 'move' call_tmp[650683](118592 call(118588 call (partial) singleton _mt[243] call_tmp[650676])))
      unknown call_tmp[650688] "expr temp" "maybe param" "maybe type" "temp"
      (650691 'move' call_tmp[650688](118593 call ! call_tmp[650683]))
      (564784 'move' tmp[564782](424337 call isTrue call_tmp[650688]))
      (564789 'move' tmp[564774](564786 '_paramFoldLogical' tmp[564775] tmp[564782]))
    }
    {
      (564794 'move' tmp[564774](564791 '_paramFoldLogical' tmp[564775] 0))
    }
    unknown call_tmp[650693] "expr temp" "maybe param" "maybe type" "temp"
    (650696 'move' call_tmp[650693](118641 call _cond_test tmp[564774]))
    if call_tmp[650693]
    {
      const tmp[118632] "const" "temp"
      unknown call_tmp[650700] "expr temp" "maybe param" "maybe type" "temp"
      (650703 'move' call_tmp[650700](382462 call _instance _mt[243] this[118989]))
      unknown call_tmp[650705] "expr temp" "maybe param" "maybe type" "temp"
      (650708 'move' call_tmp[650705](118629 '_wide_get_locale' call_tmp[650700]))
      (118634 'move' tmp[118632](118630 'deref' call_tmp[650705]))
      (935040 call on_fn[935036] tmp[118632])
      function on_fn[935036](const in arg dummy_locale_arg[935038]:chpl_localeID_t[209294]) : void[4] "on"
      {
        {
          unknown call_tmp[650712] "expr temp" "maybe param" "maybe type" "temp"
          (650715 'move' call_tmp[650712](359069 call _instance _mt[243] this[118989]))
          unknown call_tmp[650719] "maybe param" "maybe type" "temp"
          (650722 'move' call_tmp[650719](118603 call(118599 call (partial) remove _mt[243] call_tmp[650712])))
          unknown distToFree[118604] "dead at end of block" "insert auto destroy"
          (542721 'init var' distToFree[118604] call_tmp[650719])
          (118607 'end of statement')
          unknown call_tmp[650724] "expr temp" "maybe param" "maybe type" "temp"
          (650727 'move' call_tmp[650724](118611 call != distToFree[118604] nil[44]))
          unknown call_tmp[650729] "expr temp" "maybe param" "maybe type" "temp"
          (650732 'move' call_tmp[650729](118625 call _cond_test call_tmp[650724]))
          if call_tmp[650729]
          {
            unknown call_tmp[650734] "expr temp" "maybe param" "maybe type" "temp"
            (650737 'move' call_tmp[650734](118615 call postfix! distToFree[118604]))
            unknown call_tmp[650741] "expr temp" "maybe param" "maybe type" "temp"
            (650744 'move' call_tmp[650741](382469 call _instance _mt[243] this[118989]))
            unknown call_tmp[650746] "expr temp" "maybe param" "maybe type" "temp"
            (650749 'move' call_tmp[650746](118621 call _isPrivatized call_tmp[650741]))
            (118622 call _delete_dist call_tmp[650734] call_tmp[650746])
            (479362 'end of statement' distToFree[118604])
          }
        }
        (935043 return _void[55])
      }
      {
      }
    }
    (516312 return _void[55])
  }
  function _distribution[118967](?).deinit[118650](arg _mt[118995]:_MT[238], arg this[118993]:_distribution[118967](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (118654 call(382475 call (partial) _do_destroy _mt[243] this[118993]))
    (516314 return _void[55])
  }
  function _distribution[118967](?).clone[118661](arg _mt[118999]:_MT[238], arg this[118997]:_distribution[118967](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516318] "RVV" "temp"
    unknown call_tmp[650755] "expr temp" "maybe param" "maybe type" "temp"
    (650758 'move' call_tmp[650755](359073 call _value _mt[243] this[118997]))
    unknown call_tmp[650762] "expr temp" "maybe param" "maybe type" "temp"
    (650765 'move' call_tmp[650762](118670 call(118666 call (partial) dsiClone _mt[243] call_tmp[650755])))
    unknown call_tmp[650767] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650770 'move' call_tmp[650767](747780 'new' _distribution[118967](?) call_tmp[650762]))
    (516323 'move' ret[516318](516322 'deref' call_tmp[650767]))
    (516320 return ret[516318])
  }
  function _distribution[118967](?).newRectangularDom[118684](arg _mt[119003]:_MT[238], arg this[119001]:_distribution[118967](?), param arg rank[118681]:int(64)[13], arg idxType[118686]:_any[178](?), param arg stridable[118689]:bool[10], arg ranges[118704] :
  unknown call_tmp[650772] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[516327] "RVV" "temp"
    unknown call_tmp[650779] "expr temp" "maybe param" "maybe type" "temp"
    (650782 'move' call_tmp[650779](359078 call _value _mt[243] this[119001]))
    unknown call_tmp[650786] "maybe param" "maybe type" "temp"
    (650789 'move' call_tmp[650786](118718 call(118710 call (partial) dsiNewRectangularDom _mt[243] call_tmp[650779]) rank[118681] idxType[118686] stridable[118689] ranges[118704]))
    unknown x[118719] "dead at end of block" "insert auto destroy"
    (542723 'init var' x[118719] call_tmp[650786])
    (118722 'end of statement')
    unknown call_tmp[650793] "expr temp" "maybe param" "maybe type" "temp"
    (650796 'move' call_tmp[650793](118731 call(118727 call (partial) linksDistribution _mt[243] x[118719])))
    unknown call_tmp[650798] "expr temp" "maybe param" "maybe type" "temp"
    (650801 'move' call_tmp[650798](118743 call _cond_test call_tmp[650793]))
    if call_tmp[650798]
    {
      unknown call_tmp[650805] "expr temp" "maybe param" "maybe type" "temp"
      (650808 'move' call_tmp[650805](359083 call _value _mt[243] this[119001]))
      (118740 call(118735 call (partial) add_dom _mt[243] call_tmp[650805]) x[118719])
      (479366 'end of statement' x[118719])
    }
    (516332 'move' ret[516327](516331 'deref' x[118719]))
    gotoReturn _end_newRectangularDom[516325] _end_newRectangularDom[516325]
    (479368 'end of statement' x[118719])
    label _end_newRectangularDom[516325]
    (516329 return ret[516327])
  }
  function _distribution[118967](?).newRectangularDom[118758](arg _mt[119007]:_MT[238], arg this[119005]:_distribution[118967](?), param arg rank[118755]:int(64)[13], arg idxType[118760]:_any[178](?), param arg stridable[118763]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516338] "RVV" "temp"
    unknown ranges[118778] "dead at end of block" "insert auto destroy"
    unknown call_tmp[650812] "expr temp" "maybe param" "maybe type" "temp"
    (650815 'move' call_tmp[650812](118775 call range[64316](?) idxType[118760] bounded[64205] stridable[118763]))
    unknown call_tmp[650817] "expr temp" "maybe param" "maybe type" "temp"
    (650820 'move' call_tmp[650817](118776 call * rank[118755] call_tmp[650812]))
    (542725 'default init var' ranges[118778] call_tmp[650817])
    (118781 'end of statement')
    unknown call_tmp[650824] "expr temp" "maybe param" "maybe type" "temp"
    (650827 'move' call_tmp[650824](118789 call(382494 call (partial) newRectangularDom _mt[243] this[119005]) rank[118755] idxType[118760] stridable[118763] ranges[118778]))
    (516343 'move' ret[516338](516342 'deref' call_tmp[650824]))
    gotoReturn _end_newRectangularDom[516336] _end_newRectangularDom[516336]
    (479370 'end of statement' ranges[118778])
    label _end_newRectangularDom[516336]
    (516340 return ret[516338])
  }
  function _distribution[118967](?).newAssociativeDom[118798](arg _mt[119011]:_MT[238], arg this[119009]:_distribution[118967](?), arg idxType[118796]:_any[178](?), param arg parSafe[118802]:bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    unknown ret[516349] "RVV" "temp"
    unknown call_tmp[650831] "expr temp" "maybe param" "maybe type" "temp"
    (650834 'move' call_tmp[650831](359088 call _value _mt[243] this[119009]))
    unknown call_tmp[650838] "maybe param" "maybe type" "temp"
    (650841 'move' call_tmp[650838](118815 call(118809 call (partial) dsiNewAssociativeDom _mt[243] call_tmp[650831]) idxType[118796] parSafe[118802]))
    unknown x[118816] "dead at end of block" "insert auto destroy"
    (542727 'init var' x[118816] call_tmp[650838])
    (118819 'end of statement')
    unknown call_tmp[650845] "expr temp" "maybe param" "maybe type" "temp"
    (650848 'move' call_tmp[650845](118826 call(118822 call (partial) linksDistribution _mt[243] x[118816])))
    unknown call_tmp[650850] "expr temp" "maybe param" "maybe type" "temp"
    (650853 'move' call_tmp[650850](118836 call _cond_test call_tmp[650845]))
    if call_tmp[650850]
    {
      unknown call_tmp[650857] "expr temp" "maybe param" "maybe type" "temp"
      (650860 'move' call_tmp[650857](359093 call _value _mt[243] this[119009]))
      (118833 call(118828 call (partial) add_dom _mt[243] call_tmp[650857]) x[118816])
      (479372 'end of statement' x[118816])
    }
    (516354 'move' ret[516349](516353 'deref' x[118816]))
    gotoReturn _end_newAssociativeDom[516347] _end_newAssociativeDom[516347]
    (479374 'end of statement' x[118816])
    label _end_newAssociativeDom[516347]
    (516351 return ret[516349])
  }
  function _distribution[118967](?).newSparseDom[118851](arg _mt[119015]:_MT[238], arg this[119013]:_distribution[118967](?), param arg rank[118848]:int(64)[13], arg idxType[118853]:_any[178](?), arg dom[118856]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516360] "RVV" "temp"
    unknown call_tmp[650866] "expr temp" "maybe param" "maybe type" "temp"
    (650869 'move' call_tmp[650866](359097 call _value _mt[243] this[119013]))
    unknown call_tmp[650873] "maybe param" "maybe type" "temp"
    (650876 'move' call_tmp[650873](118869 call(118862 call (partial) dsiNewSparseDom _mt[243] call_tmp[650866]) rank[118848] idxType[118853] dom[118856]))
    unknown x[118870] "dead at end of block" "insert auto destroy"
    (542729 'init var' x[118870] call_tmp[650873])
    (118873 'end of statement')
    unknown call_tmp[650880] "expr temp" "maybe param" "maybe type" "temp"
    (650883 'move' call_tmp[650880](118880 call(118876 call (partial) linksDistribution _mt[243] x[118870])))
    unknown call_tmp[650885] "expr temp" "maybe param" "maybe type" "temp"
    (650888 'move' call_tmp[650885](118890 call _cond_test call_tmp[650880]))
    if call_tmp[650885]
    {
      unknown call_tmp[650892] "expr temp" "maybe param" "maybe type" "temp"
      (650895 'move' call_tmp[650892](359102 call _value _mt[243] this[119013]))
      (118887 call(118882 call (partial) add_dom _mt[243] call_tmp[650892]) x[118870])
      (479376 'end of statement' x[118870])
    }
    (516365 'move' ret[516360](516364 'deref' x[118870]))
    gotoReturn _end_newSparseDom[516358] _end_newSparseDom[516358]
    (479378 'end of statement' x[118870])
    label _end_newSparseDom[516358]
    (516362 return ret[516360])
  }
  function _distribution[118967](?).idxToLocale[118903](arg _mt[119019]:_MT[238], arg this[119017]:_distribution[118967](?), arg ind[118901]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516371] "RVV" "temp"
    unknown call_tmp[650901] "expr temp" "maybe param" "maybe type" "temp"
    (650904 'move' call_tmp[650901](359106 call _value _mt[243] this[119017]))
    unknown call_tmp[650908] "expr temp" "maybe param" "maybe type" "temp"
    (650911 'move' call_tmp[650908](118913 call(118908 call (partial) dsiIndexToLocale _mt[243] call_tmp[650901]) ind[118901]))
    (516376 'move' ret[516371](516375 'deref' call_tmp[650908]))
    (516373 return ret[516371])
  }
  function _distribution[118967](?).readWriteThis[118923](arg _mt[119023]:_MT[238], arg this[119021]:_distribution[118967](?), arg f[118921]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[650915] "expr temp" "maybe param" "maybe type" "temp"
    (650918 'move' call_tmp[650915](382514 call _value _mt[243] this[119021]))
    (118927 call <~> f[118921] call_tmp[650915])
    (516378 return _void[55])
  }
  function _distribution[118967](?).displayRepresentation[118935](arg _mt[119027]:_MT[238], arg this[119025]:_distribution[118967](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[650922] "expr temp" "maybe param" "maybe type" "temp"
    (650925 'move' call_tmp[650922](359110 call _value _mt[243] this[119025]))
    (118944 call(118940 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[650922]))
    (516380 return _void[55])
  }
  function _distribution[118967](?).targetLocales[118951](arg _mt[119031]:_MT[238], arg this[119029]:_distribution[118967](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516384] "RVV" "temp"
    unknown call_tmp[650931] "expr temp" "maybe param" "maybe type" "temp"
    (650934 'move' call_tmp[650931](359114 call _value _mt[243] this[119029]))
    unknown call_tmp[650938] "expr temp" "maybe param" "maybe type" "temp"
    (650941 'move' call_tmp[650938](118960 call(118956 call (partial) dsiTargetLocales _mt[243] call_tmp[650931])))
    (516389 'move' ret[516384](516388 'deref' call_tmp[650938]))
    (516386 return ret[516384])
  }
  function _distribution[118967](?)._pid[799489](arg _mt[799491]:_MT[238], ref arg this[799493]:_distribution[118967](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799503] "RVV" "temp"
    unknown call_tmp[799510] "expr temp" "maybe param" "maybe type" "temp"
    (799513 'move' call_tmp[799510](799497 '.' this[799493] c"_pid"))
    (799508 'move' ret[799503](799507 'addr of' call_tmp[799510]))
    (799505 return ret[799503])
  }
  function _distribution[118967](?)._instance[799515](arg _mt[799517]:_MT[238], ref arg this[799519]:_distribution[118967](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799529] "RVV" "temp"
    unknown call_tmp[799536] "expr temp" "maybe param" "maybe type" "temp"
    (799539 'move' call_tmp[799536](799523 '.' this[799519] c"_instance"))
    (799534 'move' ret[799529](799533 'addr of' call_tmp[799536]))
    (799531 return ret[799529])
  }
  function _distribution[118967](?)._unowned[799541](arg _mt[799543]:_MT[238], ref arg this[799545]:_distribution[118967](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799555] "RVV" "temp"
    unknown call_tmp[799562] "expr temp" "maybe param" "maybe type" "temp"
    (799565 'move' call_tmp[799562](799549 '.' this[799545] c"_unowned"))
    (799560 'move' ret[799555](799559 'addr of' call_tmp[799562]))
    (799557 return ret[799555])
  }
  function _distribution[118967](?).writeThis[799567](arg _mt[799571]:_MT[238], arg this[799569]:_distribution[118967](?), arg f[799570]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799580 call(799576 call (partial) readWriteThis _mt[243] this[799569]) f[799570])
    (799583 return _void[55])
  }
  function _distribution[118967](?).readThis[799587](arg _mt[799591]:_MT[238], arg this[799589]:_distribution[118967](?), arg f[799590]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799599 call(799595 call (partial) readWriteThis _mt[243] this[799589]) f[799590])
    (799603 return _void[55])
  }
  function chpl__defaultHash[799607](arg r[799609]:_distribution[118967](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[799640] "RVV" "temp"
    unknown call_tmp[799647] "expr temp" "maybe param" "maybe type" "temp"
    (799650 'move' call_tmp[799647](799626 call _unowned _mt[243] r[799609]))
    unknown call_tmp[799652] "expr temp" "maybe param" "maybe type" "temp"
    (799655 'move' call_tmp[799652](799630 call chpl__defaultHash call_tmp[799647]))
    unknown call_tmp[799657] "expr temp" "maybe param" "maybe type" "temp"
    (799660 'move' call_tmp[799657](799617 call _instance _mt[243] r[799609]))
    unknown call_tmp[799662] "expr temp" "maybe param" "maybe type" "temp"
    (799665 'move' call_tmp[799662](799621 call chpl__defaultHash call_tmp[799657]))
    unknown call_tmp[799667] "expr temp" "maybe param" "maybe type" "temp"
    (799670 'move' call_tmp[799667](799611 call _pid _mt[243] r[799609]))
    unknown call_tmp[799672] "expr temp" "maybe param" "maybe type" "temp"
    (799675 'move' call_tmp[799672](799615 call chpl__defaultHash call_tmp[799667]))
    unknown call_tmp[799677] "expr temp" "maybe param" "maybe type" "temp"
    (799680 'move' call_tmp[799677](799623 call chpl__defaultHashCombine call_tmp[799662] call_tmp[799672] 2))
    unknown call_tmp[799682] "expr temp" "maybe param" "maybe type" "temp"
    (799685 'move' call_tmp[799682](799632 call chpl__defaultHashCombine call_tmp[799652] call_tmp[799677] 3))
    (799645 'move' ret[799640](799644 'deref' call_tmp[799682]))
    (799642 return ret[799640])
  }
  type _distribution[118967](?) val _pid[118411]:int(64)[13] int(64)[13] unknown _instance[118415] "owned" val _unowned[118420]:bool[10] bool[10] forwarding ( )
  function ==[119043](arg d1[119040]:_distribution[118967](?), arg d2[119049]:_distribution[118967](?)) : _unknown[51] "inline"
  {
    unknown ret[516393] "RVV" "temp"
    unknown call_tmp[650945] "expr temp" "maybe param" "maybe type" "temp"
    (650948 'move' call_tmp[650945](119053 call _value _mt[243] d1[119040]))
    unknown call_tmp[650952] "expr temp" "maybe param" "maybe type" "temp"
    (650955 'move' call_tmp[650952](119057 call _value _mt[243] d2[119049]))
    unknown call_tmp[650957] "expr temp" "maybe param" "maybe type" "temp"
    (650960 'move' call_tmp[650957](119060 call == call_tmp[650945] call_tmp[650952]))
    unknown call_tmp[650962] "expr temp" "maybe param" "maybe type" "temp"
    (650965 'move' call_tmp[650962](119065 call _cond_test call_tmp[650957]))
    if call_tmp[650962]
    {
      (516398 'move' ret[516393](516397 'deref' 1))
      gotoReturn _end_==[516391] _end_==[516391]
    }
    unknown call_tmp[650969] "expr temp" "maybe param" "maybe type" "temp"
    (650972 'move' call_tmp[650969](119072 call _value _mt[243] d1[119040]))
    unknown call_tmp[650978] "expr temp" "maybe param" "maybe type" "temp"
    (650981 'move' call_tmp[650978](119081 call _value _mt[243] d2[119049]))
    unknown call_tmp[650983] "expr temp" "maybe param" "maybe type" "temp"
    (650986 'move' call_tmp[650983](119085 call(119077 call (partial) dsiEqualDMaps _mt[243] call_tmp[650969]) call_tmp[650978]))
    (516403 'move' ret[516393](516402 'deref' call_tmp[650983]))
    label _end_==[516391]
    (516395 return ret[516393])
  }
  function !=[119099](arg d1[119096]:_distribution[118967](?), arg d2[119105]:_distribution[118967](?)) : _unknown[51] "inline"
  {
    unknown ret[516407] "RVV" "temp"
    unknown call_tmp[650990] "expr temp" "maybe param" "maybe type" "temp"
    (650993 'move' call_tmp[650990](119109 call _value _mt[243] d1[119096]))
    unknown call_tmp[650997] "expr temp" "maybe param" "maybe type" "temp"
    (651000 'move' call_tmp[650997](119113 call _value _mt[243] d2[119105]))
    unknown call_tmp[651002] "expr temp" "maybe param" "maybe type" "temp"
    (651005 'move' call_tmp[651002](119116 call == call_tmp[650990] call_tmp[650997]))
    unknown call_tmp[651007] "expr temp" "maybe param" "maybe type" "temp"
    (651010 'move' call_tmp[651007](119121 call _cond_test call_tmp[651002]))
    if call_tmp[651007]
    {
      (516412 'move' ret[516407](516411 'deref' 0))
      gotoReturn _end_!=[516405] _end_!=[516405]
    }
    unknown call_tmp[651014] "expr temp" "maybe param" "maybe type" "temp"
    (651017 'move' call_tmp[651014](119128 call _value _mt[243] d1[119096]))
    unknown call_tmp[651023] "expr temp" "maybe param" "maybe type" "temp"
    (651026 'move' call_tmp[651023](119135 call _value _mt[243] d2[119105]))
    unknown call_tmp[651028] "expr temp" "maybe param" "maybe type" "temp"
    (651031 'move' call_tmp[651028](119139 call(119131 call (partial) dsiEqualDMaps _mt[243] call_tmp[651014]) call_tmp[651023]))
    unknown call_tmp[651033] "expr temp" "maybe param" "maybe type" "temp"
    (651036 'move' call_tmp[651033](119140 call ! call_tmp[651028]))
    (516417 'move' ret[516407](516416 'deref' call_tmp[651033]))
    label _end_!=[516405]
    (516409 return ret[516407])
  }
  function chpl_defaultComparator[119148]() : _unknown[51]
  {
    unknown ret[516421] "RVV" "temp"
    (516426 'move' ret[516421](516425 'deref' defaultComparator[267889]))
    (516423 return ret[516421])
    (355028 'used modules list'(119151 'use' Sort[267880]))
  }
  function _domain[125902](?).chpl__promotionType[119176](arg _mt[125906]:_MT[238], arg this[125904]:_domain[125902](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[516430] "RVV" "temp" "type variable"
    unknown call_tmp[651040] "expr temp" "maybe param" "maybe type" "temp"
    (651043 'move' call_tmp[651040](382523 call rank _mt[243] this[125904]))
    unknown call_tmp[651047] "expr temp" "maybe param" "maybe type" "temp"
    (651050 'move' call_tmp[651047](359126 call _value _mt[243] this[125904]))
    unknown call_tmp[651054] "expr temp" "maybe param" "maybe type" "temp"
    (651057 'move' call_tmp[651054](119181 call idxType _mt[243] call_tmp[651047]))
    unknown call_tmp[651059] "expr temp" "maybe param" "maybe type" "temp"
    (651062 'move' call_tmp[651059](119184 call chpl__buildIndexType call_tmp[651040] call_tmp[651054]))
    (516435 'move' ret[516430](516434 'deref' call_tmp[651059]))
    (516432 return ret[516430])
  }
  function _domain[125902](?).init[119197](arg _mt[125910]:_MT[238], ref arg this[125908]:_domain[125902](?), arg _pid[119194]:int(64)[13], arg _instance[119199]:_any[178](?), arg _unowned[119202]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461237] "temp"
    (461240 'init var' tmp[461237] _pid[119194] int(64)[13])
    (461242 'init field' this[125908] c"_pid" tmp[461237])
    (479390 'end of statement')
    unknown tmp[461246] "temp"
    (461248 'init var' tmp[461246] _instance[119199])
    (461250 'init field' this[125908] c"_instance" tmp[461246])
    (479391 'end of statement')
    unknown tmp[461254] "temp"
    (461257 'init var' tmp[461254] _unowned[119202] bool[10])
    (461259 'init field' this[125908] c"_unowned" tmp[461254])
    (479392 'end of statement')
    (516437 return _void[55])
  }
  function _domain[125902](?).init[119236](arg _mt[125914]:_MT[238], ref arg this[125912]:_domain[125902](?), arg value[119234]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651064] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651067 'move' call_tmp[651064](119240 'typeof' value[119234]))
    unknown call_tmp[651069] "expr temp" "maybe param" "maybe type" "temp"
    (651072 'move' call_tmp[651069](119242 call _to_unmanaged call_tmp[651064]))
    unknown call_tmp[651074] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651077 'move' call_tmp[651074](119244 'typeof' value[119234]))
    unknown call_tmp[651079] "expr temp" "maybe param" "maybe type" "temp"
    (651082 'move' call_tmp[651079](119245 call != call_tmp[651069] call_tmp[651074]))
    unknown call_tmp[651084] "expr temp" "maybe param" "maybe type" "temp"
    (651087 'move' call_tmp[651084](119252 call _cond_test call_tmp[651079]))
    if call_tmp[651084]
    {
      (119250 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[651089] "expr temp" "maybe param" "maybe type" "temp"
    (651092 'move' call_tmp[651089](119261 call _isPrivatized value[119234]))
    unknown call_tmp[651094] "expr temp" "maybe param" "maybe type" "temp"
    (651097 'move' call_tmp[651094](119307 call _cond_test call_tmp[651089]))
    if call_tmp[651094]
    {
      unknown call_tmp[651101] "expr temp" "maybe param" "maybe type" "temp"
      (651104 'move' call_tmp[651101](119263 call pid _mt[243] value[119234]))
      unknown call_tmp[651106] "expr temp" "maybe param" "maybe type" "temp"
      (651109 'move' call_tmp[651106](119267 call == call_tmp[651101] nullPid[113712]))
      unknown call_tmp[651111] "expr temp" "maybe param" "maybe type" "temp"
      (651114 'move' call_tmp[651111](119293 call _cond_test call_tmp[651106]))
      if call_tmp[651111]
      {
        unknown call_tmp[651116] "maybe param" "maybe type" "temp"
        (651119 'move' call_tmp[651116](119276 call _newPrivatizedClass value[119234]))
        unknown tmp[461263] "temp"
        (461266 'init var' tmp[461263] call_tmp[651116] int(64)[13])
        (461268 'init field' this[125912] c"_pid" tmp[461263])
        (479394 'end of statement')
      }
      {
        unknown call_tmp[651123] "maybe param" "maybe type" "temp"
        (651126 'move' call_tmp[651123](119286 call pid _mt[243] value[119234]))
        unknown tmp[461272] "temp"
        (461275 'init var' tmp[461272] call_tmp[651123] int(64)[13])
        (461277 'init field' this[125912] c"_pid" tmp[461272])
        (479395 'end of statement')
      }
    }
    {
      unknown tmp[461281] "temp"
      (461284 'init var' tmp[461281] nullPid[113712] int(64)[13])
      (461286 'init field' this[125912] c"_pid" tmp[461281])
      (479396 'end of statement')
    }
    unknown tmp[461290] "temp"
    (461292 'init var' tmp[461290] value[119234])
    (461294 'init field' this[125912] c"_instance" tmp[461290])
    (479397 'end of statement')
    val tmp[461299]:bool[10] "temp"
    (461302 'default init var' tmp[461299] bool[10])
    (461304 '.=' this[125912] c"_unowned" tmp[461299])
    (479398 'end of statement')
    (516439 return _void[55])
  }
  function _domain[125902](?).init[119327](arg _mt[125918]:_MT[238], ref arg this[125916]:_domain[125902](?), arg d[119324]:_distribution[118967](?), param arg rank[119330]:int(64)[13], arg idxType[119334]:_any[178](?) =
  int(64)[13], param arg stridable[119339]:bool[10] =
  0) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651132] "expr temp" "maybe param" "maybe type" "temp"
    (651135 'move' call_tmp[651132](119355 call(119348 call (partial) newRectangularDom _mt[243] d[119324]) rank[119330] idxType[119334] stridable[119339]))
    (119357 call(119344 call (partial) init _mt[243] this[125916]) call_tmp[651132])
    (516441 return _void[55])
  }
  function _domain[125902](?).init[119368](arg _mt[125922]:_MT[238], ref arg this[125920]:_domain[125902](?), arg d[119365]:_distribution[118967](?), param arg rank[119371]:int(64)[13], arg idxType[119375]:_any[178](?) =
  int(64)[13], param arg stridable[119380]:bool[10] =
  0, arg ranges[119396] :
  unknown call_tmp[651137] "expr temp" "maybe param" "maybe type" "temp") : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651146] "expr temp" "maybe param" "maybe type" "temp"
    (651149 'move' call_tmp[651146](119412 call(119404 call (partial) newRectangularDom _mt[243] d[119365]) rank[119371] idxType[119375] stridable[119380] ranges[119396]))
    (119414 call(119400 call (partial) init _mt[243] this[125920]) call_tmp[651146])
    (516443 return _void[55])
  }
  function _domain[125902](?).init[119425](arg _mt[125926]:_MT[238], ref arg this[125924]:_domain[125902](?), arg d[119422]:_distribution[118967](?), arg idxType[119427]:_any[178](?), param arg parSafe[119431]:bool[10] =
  1) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651155] "expr temp" "maybe param" "maybe type" "temp"
    (651158 'move' call_tmp[651155](119448 call(119442 call (partial) newAssociativeDom _mt[243] d[119422]) idxType[119427] parSafe[119431]))
    (119450 call(119436 call (partial) init _mt[243] this[125924]) call_tmp[651155])
    (516445 return _void[55])
  }
  function _domain[125902](?).init[119461](arg _mt[125930]:_MT[238], ref arg this[125928]:_domain[125902](?), arg d[119458]:_distribution[118967](?), arg dom[119464]:_domain[125902](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651166] "expr temp" "maybe param" "maybe type" "temp"
    (651169 'move' call_tmp[651166](119478 call rank _mt[243] dom[119464]))
    unknown call_tmp[651173] "expr temp" "maybe param" "maybe type" "temp"
    (651176 'move' call_tmp[651173](119483 call _value _mt[243] dom[119464]))
    unknown call_tmp[651180] "expr temp" "maybe param" "maybe type" "temp"
    (651183 'move' call_tmp[651180](119486 call idxType _mt[243] call_tmp[651173]))
    unknown call_tmp[651185] "expr temp" "maybe param" "maybe type" "temp"
    (651188 'move' call_tmp[651185](119490 call(119474 call (partial) newSparseDom _mt[243] d[119458]) call_tmp[651166] call_tmp[651180] dom[119464]))
    (119492 call(119468 call (partial) init _mt[243] this[125928]) call_tmp[651185])
    (516447 return _void[55])
  }
  function _domain[125902](?).init=[119503](arg _mt[125934]:_MT[238], ref arg this[125932]:_domain[125902](?), const  ref arg other[119500]:_domain[125902](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651194] "expr temp" "maybe param" "maybe type" "temp"
    (651197 'move' call_tmp[651194](119514 call dist _mt[243] other[119500]))
    unknown call_tmp[651201] "expr temp" "maybe param" "maybe type" "temp"
    (651204 'move' call_tmp[651201](119519 call rank _mt[243] other[119500]))
    unknown call_tmp[651208] "expr temp" "maybe param" "maybe type" "temp"
    (651211 'move' call_tmp[651208](119523 call idxType _mt[243] other[119500]))
    unknown call_tmp[651215] "expr temp" "maybe param" "maybe type" "temp"
    (651218 'move' call_tmp[651215](119527 call stridable _mt[243] other[119500]))
    unknown call_tmp[651222] "expr temp" "maybe param" "maybe type" "temp"
    (651225 'move' call_tmp[651222](119535 call(119531 call (partial) dims _mt[243] other[119500])))
    (119536 call(119510 call (partial) init _mt[243] this[125932]) call_tmp[651194] call_tmp[651201] call_tmp[651208] call_tmp[651215] call_tmp[651222])
    (516449 return _void[55])
  }
  where {
    (119508 call isRectangularDom other[119500])
  }
  function _domain[125902](?).init=[119548](arg _mt[125938]:_MT[238], ref arg this[125936]:_domain[125902](?), const  ref arg other[119545]:_domain[125902](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651227] "expr temp" "maybe param" "maybe type" "temp"
    (651230 'move' call_tmp[651227](119553 call isAssociativeDom other[119545]))
    unknown call_tmp[651232] "expr temp" "maybe param" "maybe type" "temp"
    (651235 'move' call_tmp[651232](119640 call _cond_test call_tmp[651227]))
    if call_tmp[651232]
    {
      unknown call_tmp[651241] "expr temp" "maybe param" "maybe type" "temp"
      (651244 'move' call_tmp[651241](119559 call dist _mt[243] other[119545]))
      unknown call_tmp[651248] "expr temp" "maybe param" "maybe type" "temp"
      (651251 'move' call_tmp[651248](119564 call idxType _mt[243] other[119545]))
      unknown call_tmp[651255] "expr temp" "maybe param" "maybe type" "temp"
      (651258 'move' call_tmp[651255](119568 call parSafe _mt[243] other[119545]))
      (119571 call(119555 call (partial) init _mt[243] this[125936]) call_tmp[651241] call_tmp[651248] call_tmp[651255])
    }
    {
      unknown call_tmp[651260] "expr temp" "maybe param" "maybe type" "temp"
      (651263 'move' call_tmp[651260](119577 call isSparseDom other[119545]))
      unknown call_tmp[651265] "expr temp" "maybe param" "maybe type" "temp"
      (651268 'move' call_tmp[651265](119636 call _cond_test call_tmp[651260]))
      if call_tmp[651265]
      {
        unknown call_tmp[651274] "expr temp" "maybe param" "maybe type" "temp"
        (651277 'move' call_tmp[651274](119583 call dist _mt[243] other[119545]))
        unknown call_tmp[651281] "expr temp" "maybe param" "maybe type" "temp"
        (651284 'move' call_tmp[651281](119588 call parentDom _mt[243] other[119545]))
        (119591 call(119579 call (partial) init _mt[243] this[125936]) call_tmp[651274] call_tmp[651281])
      }
      {
        unknown call_tmp[651286] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651289 'move' call_tmp[651286](119614 'typeof' this[125936]))
        unknown call_tmp[651291] "expr temp" "maybe param" "maybe type" "temp"
        (651294 'move' call_tmp[651291](119616 call _cast string[26] call_tmp[651286]))
        unknown call_tmp[651296] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651299 'move' call_tmp[651296](119620 'typeof' other[119545]))
        unknown call_tmp[651301] "expr temp" "maybe param" "maybe type" "temp"
        (651304 'move' call_tmp[651301](119622 call _cast string[26] call_tmp[651296]))
        (119625 call compilerError "Cannot initialize '" call_tmp[651291] "' from '" call_tmp[651301] "'")
        (479406 'end of statement')
        (119634 call(119629 call (partial) init _mt[243] this[125936]) nil[44])
      }
    }
    unknown call_tmp[651310] "expr temp" "maybe param" "maybe type" "temp"
    (651313 'move' call_tmp[651310](359165 call _instance _mt[243] this[125936]))
    (119656 call(119649 call (partial) dsiAssignDomain _mt[243] call_tmp[651310]) other[119545](lhsPrivate = 1))
    (516451 return _void[55])
  }
  function _domain[125902](?)._value[119662](arg _mt[125942]:_MT[238], arg this[125940]:_domain[125902](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516455] "RVV" "temp"
    unknown call_tmp[651319] "expr temp" "maybe param" "maybe type" "temp"
    (651322 'move' call_tmp[651319](382565 call _instance _mt[243] this[125940]))
    unknown call_tmp[651324] "expr temp" "maybe param" "maybe type" "temp"
    (651327 'move' call_tmp[651324](119667 call _isPrivatized call_tmp[651319]))
    unknown call_tmp[651329] "expr temp" "maybe param" "maybe type" "temp"
    (651332 'move' call_tmp[651329](119681 call _cond_test call_tmp[651324]))
    if call_tmp[651329]
    {
      { scopeless type
        unknown call_type_tmp[492042] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[651336] "expr temp" "maybe param" "maybe type" "temp"
        (651339 'move' call_tmp[651336](382570 call _instance _mt[243] this[125940]))
        (492046 'move' call_type_tmp[492042](119670 'typeof' call_tmp[651336]))
      }
      unknown call_tmp[651343] "expr temp" "maybe param" "maybe type" "temp"
      (651346 'move' call_tmp[651343](382575 call _pid _mt[243] this[125940]))
      unknown call_tmp[651348] "expr temp" "maybe param" "maybe type" "temp"
      (651351 'move' call_tmp[651348](119673 call chpl_getPrivatizedCopy call_type_tmp[492042] call_tmp[651343]))
      (516460 'move' ret[516455](516459 'deref' call_tmp[651348]))
      gotoReturn _end__value[516453] _end__value[516453]
    }
    {
      unknown call_tmp[651355] "expr temp" "maybe param" "maybe type" "temp"
      (651358 'move' call_tmp[651355](382580 call _instance _mt[243] this[125940]))
      (516465 'move' ret[516455](516464 'deref' call_tmp[651355]))
      gotoReturn _end__value[516453] _end__value[516453]
    }
    label _end__value[516453]
    (516457 return ret[516455])
  }
  function _domain[125902](?).chpl_forwarding_expr5__value[119691](arg _mt[125946]:_MT[238], arg this[125944]:_domain[125902](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516471] "RVV" "temp"
    (516475 'move' ret[516471](382584 call _value _mt[243] this[125944]))
    (516473 return ret[516471])
  }
  function _domain[125902](?).chpl__serialize[119699](arg _mt[125950]:_MT[238], arg this[125948]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516479] "RVV" "temp"
    unknown call_tmp[651364] "expr temp" "maybe param" "maybe type" "temp"
    (651367 'move' call_tmp[651364](119711 call _value _mt[243] this[125948]))
    unknown call_tmp[651371] "expr temp" "maybe param" "maybe type" "temp"
    (651374 'move' call_tmp[651371](119720 call(119716 call (partial) chpl__serialize _mt[243] call_tmp[651364])))
    (516484 'move' ret[516479](516483 'deref' call_tmp[651371]))
    (516481 return ret[516479])
  }
  where {
    unknown call_tmp[651378] "expr temp" "maybe param" "maybe type" "temp"
    (651381 'move' call_tmp[651378](119702 call _value _mt[243] this[125948]))
    (119709 call(119705 call (partial) isDefaultRectangular _mt[243] call_tmp[651378]))
  }
  function _domain[125902](?).chpl__deserialize[119731](arg _mt[125954]:_MT[238], arg this[125952]:_domain[125902](?), arg data[119729]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516488] "RVV" "temp"
    unknown valueType[119738] "dead at end of block" "insert auto destroy" "type variable"(119737 'static field type' this[125952] "_instance")
    (542734 'move' valueType[119738](542731 'static field type' this[125952] "_instance"))
    (479412 'end of statement')
    unknown call_tmp[651385] "expr temp" "maybe param" "maybe type" "temp"
    (651388 'move' call_tmp[651385](119747 call _to_borrowed valueType[119738]))
    unknown call_tmp[651392] "expr temp" "maybe param" "maybe type" "temp"
    (651395 'move' call_tmp[651392](119755 call(119750 call (partial) chpl__deserialize _mt[243] call_tmp[651385]) data[119729]))
    unknown call_tmp[651397] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (651400 'move' call_tmp[651397](747781 'new' _domain[125902](?) call_tmp[651392]))
    (516493 'move' ret[516488](516492 'deref' call_tmp[651397]))
    gotoReturn _end_chpl__deserialize[516486] _end_chpl__deserialize[516486]
    (479413 'end of statement' valueType[119738])
    label _end_chpl__deserialize[516486]
    (516490 return ret[516488])
  }
  function _domain[125902](?)._do_destroy[119764](arg _mt[125958]:_MT[238], arg this[125956]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[651404] "expr temp" "maybe param" "maybe type" "temp"
    (651407 'move' call_tmp[651404](382593 call _unowned _mt[243] this[125956]))
    unknown call_tmp[651409] "expr temp" "maybe param" "maybe type" "temp"
    (651412 'move' call_tmp[651409](119767 call ! call_tmp[651404]))
    unknown call_tmp[651414] "expr temp" "maybe param" "maybe type" "temp"
    (651417 'move' call_tmp[651414](119883 call _cond_test call_tmp[651409]))
    if call_tmp[651414]
    {
      const tmp[119873] "const" "temp"
      unknown call_tmp[651421] "expr temp" "maybe param" "maybe type" "temp"
      (651424 'move' call_tmp[651421](382598 call _instance _mt[243] this[125956]))
      unknown call_tmp[651426] "expr temp" "maybe param" "maybe type" "temp"
      (651429 'move' call_tmp[651426](119870 '_wide_get_locale' call_tmp[651421]))
      (119875 'move' tmp[119873](119871 'deref' call_tmp[651426]))
      (935049 call on_fn[935045] tmp[119873])
      function on_fn[935045](const in arg dummy_locale_arg[935047]:chpl_localeID_t[209294]) : void[4] "on"
      {
        {
          unknown call_tmp[651433] "maybe param" "maybe type" "temp"
          (651436 'move' call_tmp[651433](382603 call _instance _mt[243] this[125956]))
          const inst[119771] "dead at end of block" "const" "insert auto destroy"
          (542736 'init var' inst[119771] call_tmp[651433])
          (119774 'end of statement')
          unknown call_tmp[651440] "maybe param" "maybe type" "temp"
          (651443 'move' call_tmp[651440](119786 call(119782 call (partial) remove _mt[243] inst[119771])))
          unknown tmp[119787] "dead at end of block" "insert auto destroy" "temp"
          (542738 'init var' tmp[119787] call_tmp[651440])
          (119794 call _check_tuple_var_decl tmp[119787] 2)
          (479415 'end of statement')
          unknown call_tmp[651445] "maybe param" "maybe type" "temp"
          (651448 'move' call_tmp[651445](119788 call tmp[119787] 0))
          unknown domToFree[119776] "dead at end of block" "insert auto destroy"
          (542740 'init var' domToFree[119776] call_tmp[651445])
          unknown call_tmp[651450] "maybe param" "maybe type" "temp"
          (651453 'move' call_tmp[651450](119791 call tmp[119787] 1))
          unknown distToRemove[119778] "dead at end of block" "insert auto destroy"
          (542742 'init var' distToRemove[119778] call_tmp[651450])
          (119799 'end of statement')
          unknown distToFree[119804] "dead at end of block" "insert auto destroy"
          (542744 'init var' distToFree[119804] nil[44] unmanaged BaseDist?[415370])
          (119807 'end of statement')
          unknown call_tmp[651455] "expr temp" "maybe param" "maybe type" "temp"
          (651458 'move' call_tmp[651455](119810 call != distToRemove[119778] nil[44]))
          unknown call_tmp[651460] "expr temp" "maybe param" "maybe type" "temp"
          (651463 'move' call_tmp[651460](119825 call _cond_test call_tmp[651455]))
          if call_tmp[651460]
          {
            unknown call_tmp[651465] "expr temp" "maybe param" "maybe type" "temp"
            (651468 'move' call_tmp[651465](119814 call postfix! distToRemove[119778]))
            unknown call_tmp[651472] "expr temp" "maybe param" "maybe type" "temp"
            (651475 'move' call_tmp[651472](119820 call(119816 call (partial) remove _mt[243] call_tmp[651465])))
            (119821 call = distToFree[119804] call_tmp[651472])
            (479416 'end of statement' distToFree[119804] distToRemove[119778])
          }
          unknown call_tmp[651477] "expr temp" "maybe param" "maybe type" "temp"
          (651480 'move' call_tmp[651477](119831 call != domToFree[119776] nil[44]))
          unknown call_tmp[651482] "expr temp" "maybe param" "maybe type" "temp"
          (651485 'move' call_tmp[651482](119842 call _cond_test call_tmp[651477]))
          if call_tmp[651482]
          {
            unknown call_tmp[651487] "expr temp" "maybe param" "maybe type" "temp"
            (651490 'move' call_tmp[651487](119839 call _isPrivatized inst[119771]))
            (119840 call _delete_dom inst[119771] call_tmp[651487])
            (479419 'end of statement' inst[119771] inst[119771])
          }
          unknown call_tmp[651492] "expr temp" "maybe param" "maybe type" "temp"
          (651495 'move' call_tmp[651492](119849 call != distToFree[119804] nil[44]))
          unknown call_tmp[651497] "expr temp" "maybe param" "maybe type" "temp"
          (651500 'move' call_tmp[651497](119865 call _cond_test call_tmp[651492]))
          if call_tmp[651497]
          {
            unknown call_tmp[651502] "expr temp" "maybe param" "maybe type" "temp"
            (651505 'move' call_tmp[651502](119853 call postfix! distToFree[119804]))
            unknown call_tmp[651509] "expr temp" "maybe param" "maybe type" "temp"
            (651512 'move' call_tmp[651509](119858 call dist _mt[243] inst[119771]))
            unknown call_tmp[651514] "expr temp" "maybe param" "maybe type" "temp"
            (651517 'move' call_tmp[651514](119862 call _isPrivatized call_tmp[651509]))
            (119863 call _delete_dist call_tmp[651502] call_tmp[651514])
            (479422 'end of statement' distToFree[119804] inst[119771])
          }
        }
        (935052 return _void[55])
      }
      {
      }
    }
    {
    }
    (516497 return _void[55])
  }
  function _domain[125902](?).deinit[119892](arg _mt[125962]:_MT[238], arg this[125960]:_domain[125902](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (119896 call(382616 call (partial) _do_destroy _mt[243] this[125960]))
    (516499 return _void[55])
  }
  function _domain[125902](?).dist[119903](arg _mt[125966]:_MT[238], arg this[125964]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[516503] "RVV" "temp"
    unknown call_tmp[651523] "expr temp" "maybe param" "maybe type" "temp"
    (651526 'move' call_tmp[651523](359173 call _value _mt[243] this[125964]))
    unknown call_tmp[651530] "expr temp" "maybe param" "maybe type" "temp"
    (651533 'move' call_tmp[651530](119907 call dist _mt[243] call_tmp[651523]))
    unknown call_tmp[651535] "expr temp" "maybe param" "maybe type" "temp"
    (651538 'move' call_tmp[651535](119911 call _getDistribution call_tmp[651530]))
    (516508 'move' ret[516503](516507 'deref' call_tmp[651535]))
    (516505 return ret[516503])
  }
  function _domain[125902](?).rank[119919](arg _mt[125970]:_MT[238], arg this[125968]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516512] "RVV" "param" "temp"
    unknown tmp[424354] "maybe param" "temp"
    (424365 'move' tmp[424354](119924 call isRectangularDom this[125968]))
    unknown call_tmp[651540] "expr temp" "maybe param" "maybe type" "temp"
    (651543 'move' call_tmp[651540](424367 call _cond_invalid tmp[424354]))
    if call_tmp[651540]
    {
      (424370 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564801] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564802] "maybe param" "temp"
    unknown call_tmp[651545] "expr temp" "maybe param" "maybe type" "temp"
    (651548 'move' call_tmp[651545](424355 call isTrue tmp[424354]))
    (564807 'move' tmp[564802](564805 call _cond_test call_tmp[651545]))
    if tmp[564802]
    {
      (564812 'move' tmp[564801](564809 '_paramFoldLogical' tmp[564802] 1))
    }
    {
      unknown tmp[564814] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651550] "expr temp" "maybe param" "maybe type" "temp"
      (651553 'move' call_tmp[651550](119928 call isSparseDom this[125968]))
      (564816 'move' tmp[564814](424359 call isTrue call_tmp[651550]))
      (564821 'move' tmp[564801](564818 '_paramFoldLogical' tmp[564802] tmp[564814]))
    }
    unknown call_tmp[651555] "expr temp" "maybe param" "maybe type" "temp"
    (651558 'move' call_tmp[651555](119940 call _cond_test tmp[564801]))
    if call_tmp[651555]
    {
      unknown call_tmp[651562] "expr temp" "maybe param" "maybe type" "temp"
      (651565 'move' call_tmp[651562](359177 call _value _mt[243] this[125968]))
      unknown call_tmp[651569] "expr temp" "maybe param" "maybe type" "temp"
      (651572 'move' call_tmp[651569](119932 call rank _mt[243] call_tmp[651562]))
      (516517 'move' ret[516512](516516 'deref' call_tmp[651569]))
      gotoReturn _end_rank[516510] _end_rank[516510]
    }
    {
      (516522 'move' ret[516512](516521 'deref' 1))
      gotoReturn _end_rank[516510] _end_rank[516510]
    }
    label _end_rank[516510]
    (516514 return ret[516512])
  }
  function _domain[125902](?).idxType[119951](arg _mt[125974]:_MT[238], arg this[125972]:_domain[125902](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516528] "RVV" "temp" "type variable"
    unknown call_tmp[651576] "expr temp" "maybe param" "maybe type" "temp"
    (651579 'move' call_tmp[651576](359181 call _value _mt[243] this[125972]))
    unknown call_tmp[651583] "expr temp" "maybe param" "maybe type" "temp"
    (651586 'move' call_tmp[651583](119954 call idxType _mt[243] call_tmp[651576]))
    (516533 'move' ret[516528](516532 'deref' call_tmp[651583]))
    (516530 return ret[516528])
  }
  function _domain[125902](?).intIdxType[119964](arg _mt[125978]:_MT[238], arg this[125976]:_domain[125902](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516537] "RVV" "temp" "type variable"
    unknown call_tmp[651590] "expr temp" "maybe param" "maybe type" "temp"
    (651593 'move' call_tmp[651590](359185 call _value _mt[243] this[125976]))
    unknown call_tmp[651597] "expr temp" "maybe param" "maybe type" "temp"
    (651600 'move' call_tmp[651597](119968 call idxType _mt[243] call_tmp[651590]))
    unknown call_tmp[651602] "expr temp" "maybe param" "maybe type" "temp"
    (651605 'move' call_tmp[651602](119972 call chpl__idxTypeToIntIdxType call_tmp[651597]))
    (516542 'move' ret[516537](516541 'deref' call_tmp[651602]))
    (516539 return ret[516537])
  }
  function _domain[125902](?).stridable[119980](arg _mt[125982]:_MT[238], arg this[125980]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516546] "RVV" "param" "temp"
    unknown call_tmp[651609] "expr temp" "maybe param" "maybe type" "temp"
    (651612 'move' call_tmp[651609](359189 call _value _mt[243] this[125980]))
    unknown call_tmp[651616] "expr temp" "maybe param" "maybe type" "temp"
    (651619 'move' call_tmp[651616](119987 call stridable _mt[243] call_tmp[651609]))
    (516551 'move' ret[516546](516550 'deref' call_tmp[651616]))
    (516548 return ret[516546])
  }
  where {
    (119985 call isRectangularDom this[125980])
  }
  function _domain[125902](?).stridable[119998](arg _mt[125986]:_MT[238], arg this[125984]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516555] "RVV" "param" "temp"
    unknown call_tmp[651623] "expr temp" "maybe param" "maybe type" "temp"
    (651626 'move' call_tmp[651623](359193 call _value _mt[243] this[125984]))
    unknown call_tmp[651630] "expr temp" "maybe param" "maybe type" "temp"
    (651633 'move' call_tmp[651630](120005 call parentDom _mt[243] call_tmp[651623]))
    unknown call_tmp[651637] "expr temp" "maybe param" "maybe type" "temp"
    (651640 'move' call_tmp[651637](120008 call stridable _mt[243] call_tmp[651630]))
    (516560 'move' ret[516555](516559 'deref' call_tmp[651637]))
    (516557 return ret[516555])
  }
  where {
    (120003 call isSparseDom this[125984])
  }
  function _domain[125902](?).stridable[120019](arg _mt[125990]:_MT[238], arg this[125988]:_domain[125902](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (120044 call compilerError "associative domains do not support .stridable")
    (516562 return _void[55])
  }
  where {
    (120024 call isAssociativeDom this[125988])
  }
  function _domain[125902](?).these[120052](arg _mt[125994]:_MT[238], arg this[125992]:_domain[125902](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[516566] "RVV" "temp"
    {
      unknown _indexOfInterest[120065] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120066] "expr temp" "temp"
      unknown call_tmp[651644] "expr temp" "maybe param" "maybe type" "temp"
      (651647 'move' call_tmp[651644](359197 call _value _mt[243] this[125992]))
      unknown call_tmp[651651] "expr temp" "maybe param" "maybe type" "temp"
      (651654 'move' call_tmp[651651](120060 call(120056 call (partial) these _mt[243] call_tmp[651644])))
      (120075 'move' _iterator[120066](120073 call _getIterator call_tmp[651651]))
      Defer
      {
        {
          (120092 call _freeIterator _iterator[120066])
        }
      }
      { scopeless type
        (120081 'move' _indexOfInterest[120065](120078 call iteratorIndex _iterator[120066]))
      }
      ForLoop[120067]
      {
        unknown i[120085] "index var" "insert auto destroy"
        (479436 'end of statement')
        (120087 'move' i[120085] _indexOfInterest[120065])
        (479437 'end of statement' i[120085])
        {
          unknown yret[516570] "YVV" "temp"
          (516573 'move' yret[516570](516572 'deref' i[120085]))
          (516575 yield yret[516570])
          (479439 'end of statement' i[120085])
        }
        label _continueLabel[120070]
        _indexOfInterest[120065]
        _iterator[120066]
      }
      label _breakLabel[120071]
    }
    (516568 return ret[516566])
  }
  function _domain[125902](?).these[120108](arg _mt[125998]:_MT[238], arg this[125996]:_domain[125902](?), param arg tag[120105]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516579] "RVV" "temp"
    {
      unknown _indexOfInterest[120167] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120168] "expr temp" "temp"
      unknown call_tmp[651658] "expr temp" "maybe param" "maybe type" "temp"
      (651661 'move' call_tmp[651658](359202 call _value _mt[243] this[125996]))
      unknown call_tmp[651665] "expr temp" "maybe param" "maybe type" "temp"
      (651668 'move' call_tmp[651665](120163 call(120158 call (partial) these _mt[243] call_tmp[651658]) tag[120105]))
      (120177 'move' _iterator[120168](120175 call _getIterator call_tmp[651665]))
      Defer
      {
        {
          (120194 call _freeIterator _iterator[120168])
        }
      }
      { scopeless type
        (120183 'move' _indexOfInterest[120167](120180 call iteratorIndex _iterator[120168]))
      }
      ForLoop[120169]
      {
        unknown i[120187] "index var" "insert auto destroy"
        (479442 'end of statement')
        (120189 'move' i[120187] _indexOfInterest[120167])
        (479443 'end of statement' i[120187])
        unknown yret[516583] "YVV" "temp"
        (516586 'move' yret[516583](516585 'deref' i[120187]))
        (516588 yield yret[516583])
        (479445 'end of statement' i[120187])
        label _continueLabel[120172]
        _indexOfInterest[120167]
        _iterator[120168]
      }
      label _breakLabel[120173]
    }
    (516581 return ret[516579])
  }
  where {
    unknown tmp[424375] "maybe param" "temp"
    (424386 'move' tmp[424375](120115 call == tag[120105] standalone[451]))
    unknown call_tmp[651670] "expr temp" "maybe param" "maybe type" "temp"
    (651673 'move' call_tmp[651670](424388 call _cond_invalid tmp[424375]))
    if call_tmp[651670]
    {
      (424391 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564828] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564829] "maybe param" "temp"
    unknown call_tmp[651675] "expr temp" "maybe param" "maybe type" "temp"
    (651678 'move' call_tmp[651675](424376 call isTrue tmp[424375]))
    (564834 'move' tmp[564829](564832 call _cond_test call_tmp[651675]))
    if tmp[564829]
    {
      unknown tmp[564836] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651682] "expr temp" "maybe param" "maybe type" "temp"
      (651685 'move' call_tmp[651682](382628 call _value _mt[243] this[125996]))
      unknown call_tmp[651687] "expr temp" "maybe param" "maybe type" "temp"
      (651690 'move' call_tmp[651687](120153 'method call resolves' call_tmp[651682] "these"(tag = tag[120105])))
      (564838 'move' tmp[564836](424379 call isTrue call_tmp[651687]))
      (564843 'move' tmp[564828](564840 '_paramFoldLogical' tmp[564829] tmp[564836]))
    }
    {
      (564848 'move' tmp[564828](564845 '_paramFoldLogical' tmp[564829] 0))
    }
    (748171 call chpl_statementLevelSymbol tmp[564828])
  }
  function _domain[125902](?).these[120211](arg _mt[126002]:_MT[238], arg this[126000]:_domain[125902](?), param arg tag[120208]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516592] "RVV" "temp"
    {
      unknown _indexOfInterest[120231] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120232] "expr temp" "temp"
      unknown call_tmp[651694] "expr temp" "maybe param" "maybe type" "temp"
      (651697 'move' call_tmp[651694](359207 call _value _mt[243] this[126000]))
      unknown call_tmp[651701] "expr temp" "maybe param" "maybe type" "temp"
      (651704 'move' call_tmp[651701](120227 call(120222 call (partial) these _mt[243] call_tmp[651694]) tag[120208]))
      (120241 'move' _iterator[120232](120239 call _getIterator call_tmp[651701]))
      Defer
      {
        {
          (120258 call _freeIterator _iterator[120232])
        }
      }
      { scopeless type
        (120247 'move' _indexOfInterest[120231](120244 call iteratorIndex _iterator[120232]))
      }
      ForLoop[120233]
      {
        unknown followThis[120251] "index var" "insert auto destroy"
        (479448 'end of statement')
        (120253 'move' followThis[120251] _indexOfInterest[120231])
        (479449 'end of statement' followThis[120251])
        unknown yret[516596] "YVV" "temp"
        (516599 'move' yret[516596](516598 'deref' followThis[120251]))
        (516601 yield yret[516596])
        (479451 'end of statement' followThis[120251])
        label _continueLabel[120236]
        _indexOfInterest[120231]
        _iterator[120232]
      }
      label _breakLabel[120237]
    }
    (516594 return ret[516592])
  }
  where {
    (120218 call == tag[120208] leader[447])
  }
  function _domain[125902](?).these[120275](arg _mt[126006]:_MT[238], arg this[126004]:_domain[125902](?), param arg tag[120272]:iterKind[453], arg followThis[120277]:_any[178](?), param arg fast[120281]:bool[10] =
  0) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516605] "RVV" "temp"
    unknown call_tmp[651708] "expr temp" "maybe param" "maybe type" "temp"
    (651711 'move' call_tmp[651708](382641 call _value _mt[243] this[126004]))
    unknown call_tmp[651713] "expr temp" "maybe param" "maybe type" "temp"
    (651716 'move' call_tmp[651713](120301 'method call resolves' call_tmp[651708] "these"(tag = tag[120272]) followThis[120277](fast = fast[120281])))
    unknown call_tmp[651718] "expr temp" "maybe param" "maybe type" "temp"
    (651721 'move' call_tmp[651718](120399 call _cond_test call_tmp[651713]))
    if call_tmp[651718]
    {
      {
        unknown _indexOfInterest[120317] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120318] "expr temp" "temp"
        unknown call_tmp[651725] "expr temp" "maybe param" "maybe type" "temp"
        (651728 'move' call_tmp[651725](359212 call _value _mt[243] this[126004]))
        unknown call_tmp[651732] "expr temp" "maybe param" "maybe type" "temp"
        (651735 'move' call_tmp[651732](120313 call(120304 call (partial) these _mt[243] call_tmp[651725])(tag = tag[120272]) followThis[120277](fast = fast[120281])))
        (120327 'move' _iterator[120318](120325 call _getIterator call_tmp[651732]))
        Defer
        {
          {
            (120344 call _freeIterator _iterator[120318])
          }
        }
        { scopeless type
          (120333 'move' _indexOfInterest[120317](120330 call iteratorIndex _iterator[120318]))
        }
        ForLoop[120319]
        {
          unknown i[120337] "index var" "insert auto destroy"
          (479454 'end of statement')
          (120339 'move' i[120337] _indexOfInterest[120317])
          (479455 'end of statement' i[120337])
          unknown yret[516609] "YVV" "temp"
          (516612 'move' yret[516609](516611 'deref' i[120337]))
          (516614 yield yret[516609])
          (479457 'end of statement' i[120337])
          label _continueLabel[120322]
          _indexOfInterest[120317]
          _iterator[120318]
        }
        label _breakLabel[120323]
      }
    }
    {
      {
        unknown _indexOfInterest[120364] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120365] "expr temp" "temp"
        unknown call_tmp[651739] "expr temp" "maybe param" "maybe type" "temp"
        (651742 'move' call_tmp[651739](359216 call _value _mt[243] this[126004]))
        unknown call_tmp[651746] "expr temp" "maybe param" "maybe type" "temp"
        (651749 'move' call_tmp[651746](120360 call(120354 call (partial) these _mt[243] call_tmp[651739]) tag[120272] followThis[120277]))
        (120374 'move' _iterator[120365](120372 call _getIterator call_tmp[651746]))
        Defer
        {
          {
            (120391 call _freeIterator _iterator[120365])
          }
        }
        { scopeless type
          (120380 'move' _indexOfInterest[120364](120377 call iteratorIndex _iterator[120365]))
        }
        ForLoop[120366]
        {
          unknown i[120384] "index var" "insert auto destroy"
          (479460 'end of statement')
          (120386 'move' i[120384] _indexOfInterest[120364])
          (479461 'end of statement' i[120384])
          unknown yret[516616] "YVV" "temp"
          (516619 'move' yret[516616](516618 'deref' i[120384]))
          (516621 yield yret[516616])
          (479463 'end of statement' i[120384])
          label _continueLabel[120369]
          _indexOfInterest[120364]
          _iterator[120365]
        }
        label _breakLabel[120370]
      }
    }
    (516607 return ret[516605])
  }
  where {
    (120290 call == tag[120272] follower[449])
  }
  function _domain[125902](?).this[120413](arg _mt[126010]:_MT[238], arg this[126008]:_domain[125902](?), arg d[120410]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516625] "RVV" "temp"
    unknown call_tmp[651753] "expr temp" "maybe param" "maybe type" "temp"
    (651756 'move' call_tmp[651753](120416 call rank _mt[243] d[120410]))
    unknown call_tmp[651760] "expr temp" "maybe param" "maybe type" "temp"
    (651763 'move' call_tmp[651760](382656 call rank _mt[243] this[126008]))
    unknown call_tmp[651765] "expr temp" "maybe param" "maybe type" "temp"
    (651768 'move' call_tmp[651765](120420 call == call_tmp[651753] call_tmp[651760]))
    unknown call_tmp[651770] "expr temp" "maybe param" "maybe type" "temp"
    (651773 'move' call_tmp[651770](120455 call _cond_test call_tmp[651765]))
    if call_tmp[651770]
    {
      unknown call_tmp[651777] "expr temp" "maybe param" "maybe type" "temp"
      (651780 'move' call_tmp[651777](120428 call(120424 call (partial) getIndices _mt[243] d[120410])))
      unknown call_tmp[651782] "expr temp" "maybe param" "maybe type" "temp"
      (651785 'move' call_tmp[651782](120431 call this[126008](120429 'expand_tuple' call_tmp[651777])))
      (516630 'move' ret[516625](516629 'deref' call_tmp[651782]))
      gotoReturn _end_this[516623] _end_this[516623]
    }
    {
      (120453 call compilerError "slicing a domain with a domain of a different rank")
    }
    label _end_this[516623]
    (516627 return ret[516625])
  }
  function _domain[125902](?).this[120470](arg _mt[126014]:_MT[238], arg this[126012]:_domain[125902](?), arg ranges[120467]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516636] "RVV" "temp"
    unknown tmp[424396] "maybe param" "temp"
    unknown call_tmp[651791] "expr temp" "maybe param" "maybe type" "temp"
    (651794 'move' call_tmp[651791](359222 call _value _mt[243] this[126012]))
    (424407 'move' tmp[424396](120477 call stridable _mt[243] call_tmp[651791]))
    unknown call_tmp[651798] "expr temp" "maybe param" "maybe type" "temp"
    (651801 'move' call_tmp[651798](424409 call _cond_invalid tmp[424396]))
    if call_tmp[651798]
    {
      (424412 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown stridable[120486] "dead at end of block" "param"
    unknown tmp[564855] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564856] "maybe param" "temp"
    unknown call_tmp[651803] "expr temp" "maybe param" "maybe type" "temp"
    (651806 'move' call_tmp[651803](424397 call isTrue tmp[424396]))
    (564861 'move' tmp[564856](564859 call _cond_test call_tmp[651803]))
    if tmp[564856]
    {
      (564866 'move' tmp[564855](564863 '_paramFoldLogical' tmp[564856] 1))
    }
    {
      unknown tmp[564868] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651808] "expr temp" "maybe param" "maybe type" "temp"
      (651811 'move' call_tmp[651808](120483 call chpl__anyStridable ranges[120467]))
      (564870 'move' tmp[564868](424401 call isTrue call_tmp[651808]))
      (564875 'move' tmp[564855](564872 '_paramFoldLogical' tmp[564856] tmp[564868]))
    }
    (542746 'init var' stridable[120486] tmp[564855])
    (120489 'end of statement')
    unknown r[120506] "dead at end of block" "insert auto destroy"
    unknown call_tmp[651815] "expr temp" "maybe param" "maybe type" "temp"
    (651818 'move' call_tmp[651815](382667 call rank _mt[243] this[126012]))
    unknown call_tmp[651822] "expr temp" "maybe param" "maybe type" "temp"
    (651825 'move' call_tmp[651822](359226 call _value _mt[243] this[126012]))
    unknown call_tmp[651829] "expr temp" "maybe param" "maybe type" "temp"
    (651832 'move' call_tmp[651829](120494 call idxType _mt[243] call_tmp[651822]))
    unknown call_tmp[651834] "expr temp" "maybe param" "maybe type" "temp"
    (651837 'move' call_tmp[651834](120503 call range[64316](?) call_tmp[651829] bounded[64205] stridable[120486]))
    unknown call_tmp[651839] "expr temp" "maybe param" "maybe type" "temp"
    (651842 'move' call_tmp[651839](120504 call * call_tmp[651815] call_tmp[651834]))
    (542748 'default init var' r[120506] call_tmp[651839])
    (120509 'end of statement')
    {
      unknown i[120538] "dead at end of block" "insert auto destroy"
      (542750 'init var' i[120538] 0)
      (479468 'end of statement')
      unknown tmp[120539] "maybe param" "temp"
      unknown call_tmp[651846] "expr temp" "maybe param" "maybe type" "temp"
      (651849 'move' call_tmp[651846](382673 call rank _mt[243] this[126012]))
      unknown call_tmp[651851] "expr temp" "maybe param" "maybe type" "temp"
      (651854 'move' call_tmp[651851](120513 call - call_tmp[651846] 1))
      (120551 'move' tmp[120539](120549 call chpl_compute_low_param_loop_bound 0 call_tmp[651851]))
      unknown tmp[120540] "maybe param" "temp"
      unknown call_tmp[651858] "expr temp" "maybe param" "maybe type" "temp"
      (651861 'move' call_tmp[651858](382682 call rank _mt[243] this[126012]))
      unknown call_tmp[651863] "expr temp" "maybe param" "maybe type" "temp"
      (651866 'move' call_tmp[651863](120556 call - call_tmp[651858] 1))
      (120561 'move' tmp[120540](120559 call chpl_compute_high_param_loop_bound 0 call_tmp[651863]))
      unknown tmp[120541] "maybe param" "temp"
      (120564 'move' tmp[120541] 1)
      ParamForLoop[120566]
      { i[120538] tmp[120539] tmp[120540] tmp[120541]
        {
          unknown call_tmp[651868] "expr temp" "maybe param" "maybe type" "temp"
          (651871 'move' call_tmp[651868](120520 call r[120506] i[120538]))
          unknown call_tmp[651875] "expr temp" "maybe param" "maybe type" "temp"
          (651878 'move' call_tmp[651875](359231 call _value _mt[243] this[126012]))
          unknown call_tmp[651882] "expr temp" "maybe param" "maybe type" "temp"
          (651885 'move' call_tmp[651882](120527 call(120522 call (partial) dsiDim _mt[243] call_tmp[651875]) i[120538]))
          unknown call_tmp[651887] "expr temp" "maybe param" "maybe type" "temp"
          (651890 'move' call_tmp[651887](120531 call ranges[120467] i[120538]))
          unknown call_tmp[651892] "expr temp" "maybe param" "maybe type" "temp"
          (651895 'move' call_tmp[651892](120533 call call_tmp[651882] call_tmp[651887]))
          (120534 call = call_tmp[651868] call_tmp[651892])
          (479469 'end of statement' r[120506] i[120538] i[120538] i[120538])
        }
      }
      label _unused_continueLabel[120543]
      label _breakLabel[120542]
    }
    unknown call_tmp[651899] "expr temp" "maybe param" "maybe type" "temp"
    (651902 'move' call_tmp[651899](382687 call dist _mt[243] this[126012]))
    unknown call_tmp[651906] "expr temp" "maybe param" "maybe type" "temp"
    (651909 'move' call_tmp[651906](382691 call rank _mt[243] this[126012]))
    unknown call_tmp[651913] "expr temp" "maybe param" "maybe type" "temp"
    (651916 'move' call_tmp[651913](359235 call _value _mt[243] this[126012]))
    unknown call_tmp[651920] "expr temp" "maybe param" "maybe type" "temp"
    (651923 'move' call_tmp[651920](120581 call idxType _mt[243] call_tmp[651913]))
    unknown call_tmp[651925] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (651928 'move' call_tmp[651925](747782 'new' _domain[125902](?) call_tmp[651899] call_tmp[651906] call_tmp[651920] stridable[120486] r[120506]))
    (516641 'move' ret[516636](516640 'deref' call_tmp[651925]))
    gotoReturn _end_this[516634] _end_this[516634]
    (479474 'end of statement' r[120506])
    label _end_this[516634]
    (516638 return ret[516636])
  }
  where {
    (120475 call chpl__isTupleOfRanges ranges[120467])
  }
  function _domain[125902](?).this[120598](arg _mt[126018]:_MT[238], arg this[126016]:_domain[125902](?), arg args[120595]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516647] "RVV" "temp"
    unknown collapsedDim[120612] "dead at end of block" "insert auto destroy"
    unknown call_tmp[651934] "expr temp" "maybe param" "maybe type" "temp"
    (651937 'move' call_tmp[651934](382702 call rank _mt[243] this[126016]))
    unknown call_tmp[651939] "expr temp" "maybe param" "maybe type" "temp"
    (651942 'move' call_tmp[651939](120610 call * call_tmp[651934] bool[10]))
    (542752 'default init var' collapsedDim[120612] call_tmp[651939])
    (120615 'end of statement')
    unknown idx[120621] "dead at end of block" "insert auto destroy"
    unknown call_tmp[651946] "expr temp" "maybe param" "maybe type" "temp"
    (651949 'move' call_tmp[651946](382706 call rank _mt[243] this[126016]))
    unknown call_tmp[651953] "expr temp" "maybe param" "maybe type" "temp"
    (651956 'move' call_tmp[651953](382710 call idxType _mt[243] this[126016]))
    unknown call_tmp[651958] "expr temp" "maybe param" "maybe type" "temp"
    (651961 'move' call_tmp[651958](120619 call * call_tmp[651946] call_tmp[651953]))
    (542754 'default init var' idx[120621] call_tmp[651958])
    (120624 'end of statement')
    unknown call_tmp[651963] "maybe param" "maybe type" "temp"
    (651966 'move' call_tmp[651963](120629 call chpl__countRanges(120627 'expand_tuple' args[120595])))
    unknown uprank[120630] "dead at end of block" "param"
    (542756 'init var' uprank[120630] call_tmp[651963])
    (120633 'end of statement')
    unknown tmp[424417] "maybe param" "temp"
    (424428 'move' tmp[424417](120635 call stridable _mt[243] this[126016]))
    unknown call_tmp[651970] "expr temp" "maybe param" "maybe type" "temp"
    (651973 'move' call_tmp[651970](424430 call _cond_invalid tmp[424417]))
    if call_tmp[651970]
    {
      (424433 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown upstridable[120644] "dead at end of block" "param"
    unknown tmp[564882] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564883] "maybe param" "temp"
    unknown call_tmp[651975] "expr temp" "maybe param" "maybe type" "temp"
    (651978 'move' call_tmp[651975](424418 call isTrue tmp[424417]))
    (564888 'move' tmp[564883](564886 call _cond_test call_tmp[651975]))
    if tmp[564883]
    {
      (564893 'move' tmp[564882](564890 '_paramFoldLogical' tmp[564883] 1))
    }
    {
      unknown tmp[564895] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651980] "expr temp" "maybe param" "maybe type" "temp"
      (651983 'move' call_tmp[651980](120641 call chpl__anyRankChangeStridable args[120595]))
      (564897 'move' tmp[564895](424422 call isTrue call_tmp[651980]))
      (564902 'move' tmp[564882](564899 '_paramFoldLogical' tmp[564883] tmp[564895]))
    }
    (542758 'init var' upstridable[120644] tmp[564882])
    (120647 'end of statement')
    unknown upranges[120661] "dead at end of block" "insert auto destroy"
    unknown call_tmp[651987] "expr temp" "maybe param" "maybe type" "temp"
    (651990 'move' call_tmp[651987](359244 call _value _mt[243] this[126016]))
    unknown call_tmp[651994] "expr temp" "maybe param" "maybe type" "temp"
    (651997 'move' call_tmp[651994](120651 call idxType _mt[243] call_tmp[651987]))
    unknown call_tmp[651999] "expr temp" "maybe param" "maybe type" "temp"
    (652002 'move' call_tmp[651999](120658 call range[64316](?)(idxType = call_tmp[651994])(stridable = upstridable[120644])))
    unknown call_tmp[652004] "expr temp" "maybe param" "maybe type" "temp"
    (652007 'move' call_tmp[652004](120659 call * uprank[120630] call_tmp[651999]))
    (542760 'default init var' upranges[120661] call_tmp[652004])
    (120664 'end of statement')
    unknown updim[120666] "dead at end of block" "insert auto destroy"
    (542762 'init var' updim[120666] 0)
    (120669 'end of statement')
    {
      unknown i[120760] "dead at end of block" "insert auto destroy"
      (542764 'init var' i[120760] 0)
      (479477 'end of statement')
      unknown tmp[120761] "maybe param" "temp"
      unknown call_tmp[652011] "expr temp" "maybe param" "maybe type" "temp"
      (652014 'move' call_tmp[652011](382719 call rank _mt[243] this[126016]))
      unknown call_tmp[652016] "expr temp" "maybe param" "maybe type" "temp"
      (652019 'move' call_tmp[652016](120673 call - call_tmp[652011] 1))
      (120773 'move' tmp[120761](120771 call chpl_compute_low_param_loop_bound 0 call_tmp[652016]))
      unknown tmp[120762] "maybe param" "temp"
      unknown call_tmp[652023] "expr temp" "maybe param" "maybe type" "temp"
      (652026 'move' call_tmp[652023](382746 call rank _mt[243] this[126016]))
      unknown call_tmp[652028] "expr temp" "maybe param" "maybe type" "temp"
      (652031 'move' call_tmp[652028](120778 call - call_tmp[652023] 1))
      (120783 'move' tmp[120762](120781 call chpl_compute_high_param_loop_bound 0 call_tmp[652028]))
      unknown tmp[120763] "maybe param" "temp"
      (120786 'move' tmp[120763] 1)
      ParamForLoop[120788]
      { i[120760] tmp[120761] tmp[120762] tmp[120763]
        {
          unknown call_tmp[652033] "expr temp" "maybe param" "maybe type" "temp"
          (652036 'move' call_tmp[652033](120681 call args[120595] i[120760]))
          unknown call_tmp[652038] "expr temp" "maybe param" "maybe type" "temp"
          (652041 'move' call_tmp[652038](120683 call isRange call_tmp[652033]))
          unknown call_tmp[652043] "expr temp" "maybe param" "maybe type" "temp"
          (652046 'move' call_tmp[652043](120755 call _cond_test call_tmp[652038]))
          if call_tmp[652043]
          {
            unknown call_tmp[652048] "expr temp" "maybe param" "maybe type" "temp"
            (652051 'move' call_tmp[652048](120687 call collapsedDim[120612] i[120760]))
            (120689 call = call_tmp[652048] 0)
            (479478 'end of statement' collapsedDim[120612] i[120760])
            unknown call_tmp[652053] "expr temp" "maybe param" "maybe type" "temp"
            (652056 'move' call_tmp[652053](120696 call idx[120621] i[120760]))
            unknown call_tmp[652060] "expr temp" "maybe param" "maybe type" "temp"
            (652063 'move' call_tmp[652060](120700 call(382729 call (partial) dim _mt[243] this[126016]) i[120760]))
            unknown call_tmp[652067] "expr temp" "maybe param" "maybe type" "temp"
            (652070 'move' call_tmp[652067](120701 call alignedLow _mt[243] call_tmp[652060]))
            (120704 call = call_tmp[652053] call_tmp[652067])
            (479481 'end of statement' idx[120621] i[120760] i[120760])
            unknown call_tmp[652072] "expr temp" "maybe param" "maybe type" "temp"
            (652075 'move' call_tmp[652072](120710 call upranges[120661] updim[120666]))
            unknown call_tmp[652079] "expr temp" "maybe param" "maybe type" "temp"
            (652082 'move' call_tmp[652079](120712 call _value _mt[243] this[126016]))
            unknown call_tmp[652086] "expr temp" "maybe param" "maybe type" "temp"
            (652089 'move' call_tmp[652086](120720 call(120715 call (partial) dsiDim _mt[243] call_tmp[652079]) i[120760]))
            unknown call_tmp[652091] "expr temp" "maybe param" "maybe type" "temp"
            (652094 'move' call_tmp[652091](120724 call args[120595] i[120760]))
            unknown call_tmp[652096] "expr temp" "maybe param" "maybe type" "temp"
            (652099 'move' call_tmp[652096](120726 call call_tmp[652086] call_tmp[652091]))
            (120727 call = call_tmp[652072] call_tmp[652096])
            (479485 'end of statement' upranges[120661] updim[120666] i[120760] i[120760])
            (120732 call += updim[120666] 1)
            (479490 'end of statement' updim[120666])
          }
          {
            unknown call_tmp[652101] "expr temp" "maybe param" "maybe type" "temp"
            (652104 'move' call_tmp[652101](120738 call collapsedDim[120612] i[120760]))
            (120740 call = call_tmp[652101] 1)
            (479492 'end of statement' collapsedDim[120612] i[120760])
            unknown call_tmp[652106] "expr temp" "maybe param" "maybe type" "temp"
            (652109 'move' call_tmp[652106](120747 call idx[120621] i[120760]))
            unknown call_tmp[652111] "expr temp" "maybe param" "maybe type" "temp"
            (652114 'move' call_tmp[652111](120751 call args[120595] i[120760]))
            (120752 call = call_tmp[652106] call_tmp[652111])
            (479495 'end of statement' idx[120621] i[120760] i[120760])
          }
        }
      }
      label _unused_continueLabel[120765]
      label _breakLabel[120764]
    }
    { scopeless type
      unknown call_type_tmp[492048] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652116] "expr temp" "maybe param" "maybe type" "temp"
      (652119 'move' call_tmp[652116](120800 call upranges[120661] 0))
      (492052 'move' call_type_tmp[492048](120801 'typeof' call_tmp[652116]))
    }
    const emptyrange[120802] "dead at end of block" "const" "insert auto destroy"
    (542766 'default init var' emptyrange[120802] call_type_tmp[492048])
    (120805 'end of statement')
    unknown call_tmp[652123] "expr temp" "maybe param" "maybe type" "temp"
    (652126 'move' call_tmp[652123](120809 call(382751 call (partial) contains _mt[243] this[126016]) idx[120621]))
    unknown call_tmp[652128] "expr temp" "maybe param" "maybe type" "temp"
    (652131 'move' call_tmp[652128](120810 call ! call_tmp[652123]))
    unknown call_tmp[652133] "expr temp" "maybe param" "maybe type" "temp"
    (652136 'move' call_tmp[652133](120865 call _cond_test call_tmp[652128]))
    if call_tmp[652133]
    {
      {
        unknown d[120827] "dead at end of block" "insert auto destroy"
        (542768 'init var' d[120827] 0)
        (479500 'end of statement')
        unknown tmp[120828] "maybe param" "temp"
        unknown call_tmp[652138] "expr temp" "maybe param" "maybe type" "temp"
        (652141 'move' call_tmp[652138](120815 call - uprank[120630] 1))
        (120840 'move' tmp[120828](120838 call chpl_compute_low_param_loop_bound 0 call_tmp[652138]))
        unknown tmp[120829] "maybe param" "temp"
        unknown call_tmp[652143] "expr temp" "maybe param" "maybe type" "temp"
        (652146 'move' call_tmp[652143](120845 call - uprank[120630] 1))
        (120850 'move' tmp[120829](120848 call chpl_compute_high_param_loop_bound 0 call_tmp[652143]))
        unknown tmp[120830] "maybe param" "temp"
        (120853 'move' tmp[120830] 1)
        ParamForLoop[120855]
        { d[120827] tmp[120828] tmp[120829] tmp[120830]
          unknown call_tmp[652148] "expr temp" "maybe param" "maybe type" "temp"
          (652151 'move' call_tmp[652148](120822 call upranges[120661] d[120827]))
          (120824 call = call_tmp[652148] emptyrange[120802])
          (479501 'end of statement' upranges[120661] d[120827] emptyrange[120802])
        }
        label _unused_continueLabel[120832]
        label _breakLabel[120831]
      }
    }
    unknown call_tmp[652155] "expr temp" "maybe param" "maybe type" "temp"
    (652158 'move' call_tmp[652155](359249 call dist _mt[243] this[126016]))
    unknown call_tmp[652162] "expr temp" "maybe param" "maybe type" "temp"
    (652165 'move' call_tmp[652162](120874 call _pid _mt[243] call_tmp[652155]))
    unknown call_tmp[652169] "expr temp" "maybe param" "maybe type" "temp"
    (652172 'move' call_tmp[652169](359253 call dist _mt[243] this[126016]))
    unknown call_tmp[652176] "expr temp" "maybe param" "maybe type" "temp"
    (652179 'move' call_tmp[652176](120880 call _instance _mt[243] call_tmp[652169]))
    unknown call_tmp[652181] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652184 'move' call_tmp[652181](747783 'new' ArrayViewRankChangeDist[382761](?)(downDistPid = call_tmp[652162])(downDistInst = call_tmp[652176])(collapsedDim = collapsedDim[120612])(idx = idx[120621])(_chpl_manager = unmanaged[220](?))))
    const rcdist[120889] "dead at end of block" "const" "insert auto destroy"
    (542770 'init var' rcdist[120889] call_tmp[652181])
    (120892 'end of statement')
    unknown call_tmp[652186] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652189 'move' call_tmp[652186](747784 'new' _distribution[118967](?) rcdist[120889]))
    const rcdistRec[120898] "dead at end of block" "const" "insert auto destroy"
    (542772 'init var' rcdistRec[120898] call_tmp[652186])
    (120901 'end of statement' upranges[120661] collapsedDim[120612] idx[120621] rcdist[120889])
    unknown call_tmp[652191] "expr temp" "maybe param" "maybe type" "temp"
    (652194 'move' call_tmp[652191](120910 call upranges[120661] 0))
    unknown call_tmp[652198] "expr temp" "maybe param" "maybe type" "temp"
    (652201 'move' call_tmp[652198](120911 call idxType _mt[243] call_tmp[652191]))
    unknown call_tmp[652203] "expr temp" "maybe param" "maybe type" "temp"
    (652206 'move' call_tmp[652203](120917 call upranges[120661] 0))
    unknown call_tmp[652210] "expr temp" "maybe param" "maybe type" "temp"
    (652213 'move' call_tmp[652210](120918 call stridable _mt[243] call_tmp[652203]))
    unknown call_tmp[652215] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652218 'move' call_tmp[652215](747785 'new' _domain[125902](?) rcdistRec[120898] uprank[120630] call_tmp[652198] call_tmp[652210] upranges[120661]))
    (516652 'move' ret[516647](516651 'deref' call_tmp[652215]))
    gotoReturn _end_this[516645] _end_this[516645]
    (479508 'end of statement' rcdistRec[120898] upranges[120661] upranges[120661] upranges[120661])
    label _end_this[516645]
    (516649 return ret[516647])
  }
  where {
    unknown call_tmp[652222] "expr temp" "maybe param" "maybe type" "temp"
    (652225 'move' call_tmp[652222](359239 call _value _mt[243] this[126016]))
    unknown call_tmp[652229] "expr temp" "maybe param" "maybe type" "temp"
    (652232 'move' call_tmp[652229](120604 call idxType _mt[243] call_tmp[652222]))
    (120607 call _validRankChangeArgs args[120595] call_tmp[652229])
  }
  function _domain[125902](?).this[120936](arg _mt[126022]:_MT[238], arg this[126020]:_domain[125902](?), arg i[120932]:integral[199](?) ...) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (120957 call compilerError "domain slice requires a range in at least one dimension")
    (516656 return _void[55])
  }
  function _domain[125902](?).this[120969](arg _mt[126026]:_MT[238], arg this[126024]:_domain[125902](?), arg args[120966]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[652238] "expr temp" "maybe param" "maybe type" "temp"
    (652241 'move' call_tmp[652238](382781 call rank _mt[243] this[126024]))
    unknown call_tmp[652243] "expr temp" "maybe param" "maybe type" "temp"
    (652246 'move' call_tmp[652243](120973 call == numArgs[120964] call_tmp[652238]))
    unknown call_tmp[652248] "expr temp" "maybe param" "maybe type" "temp"
    (652251 'move' call_tmp[652248](121020 call _cond_test call_tmp[652243]))
    if call_tmp[652248]
    {
      (120994 call compilerError "invalid argument types for domain slicing")
    }
    {
      (121018 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
    (516658 return _void[55])
  }
  function _domain[125902](?).dims[121030](arg _mt[126030]:_MT[238], arg this[126028]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516662] "RVV" "temp"
    unknown call_tmp[652255] "expr temp" "maybe param" "maybe type" "temp"
    (652258 'move' call_tmp[652255](359257 call _value _mt[243] this[126028]))
    unknown call_tmp[652262] "expr temp" "maybe param" "maybe type" "temp"
    (652265 'move' call_tmp[652262](121037 call(121033 call (partial) dsiDims _mt[243] call_tmp[652255])))
    (516667 'move' ret[516662](516666 'deref' call_tmp[652262]))
    (516664 return ret[516662])
  }
  function _domain[125902](?).dim[121049](arg _mt[126034]:_MT[238], arg this[126032]:_domain[125902](?), arg d[121046]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516671] "RVV" "temp"
    unknown call_tmp[652267] "expr temp" "maybe param" "maybe type" "temp"
    (652270 'move' call_tmp[652267](121129 call _cond_test 1))
    if call_tmp[652267]
    {
      unknown tmp[424438] "maybe param" "temp"
      (424449 'move' tmp[424438](121058 call < d[121046] 0))
      unknown call_tmp[652272] "expr temp" "maybe param" "maybe type" "temp"
      (652275 'move' call_tmp[652272](424451 call _cond_invalid tmp[424438]))
      if call_tmp[652272]
      {
        (424454 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564909] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564910] "maybe param" "temp"
      unknown call_tmp[652277] "expr temp" "maybe param" "maybe type" "temp"
      (652280 'move' call_tmp[652277](424439 call isTrue tmp[424438]))
      (564915 'move' tmp[564910](564913 call _cond_test call_tmp[652277]))
      if tmp[564910]
      {
        (564920 'move' tmp[564909](564917 '_paramFoldLogical' tmp[564910] 1))
      }
      {
        unknown tmp[564922] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652284] "expr temp" "maybe param" "maybe type" "temp"
        (652287 'move' call_tmp[652284](382788 call rank _mt[243] this[126032]))
        unknown call_tmp[652289] "expr temp" "maybe param" "maybe type" "temp"
        (652292 'move' call_tmp[652289](121062 call >= d[121046] call_tmp[652284]))
        (564924 'move' tmp[564922](424443 call isTrue call_tmp[652289]))
        (564929 'move' tmp[564909](564926 '_paramFoldLogical' tmp[564910] tmp[564922]))
      }
      unknown call_tmp[652294] "expr temp" "maybe param" "maybe type" "temp"
      (652297 'move' call_tmp[652294](121124 call _cond_test tmp[564909]))
      if call_tmp[652294]
      {
        unknown call_tmp[652299] "expr temp" "maybe param" "maybe type" "temp"
        (652302 'move' call_tmp[652299](121089 call _cast string[26] d[121046]))
        unknown call_tmp[652304] "expr temp" "maybe param" "maybe type" "temp"
        (652307 'move' call_tmp[652304](121091 call + "dim(" call_tmp[652299]))
        unknown call_tmp[652309] "expr temp" "maybe param" "maybe type" "temp"
        (652312 'move' call_tmp[652309](121110 call + call_tmp[652304] ") is out-of-bounds; must be 0.."))
        unknown call_tmp[652316] "expr temp" "maybe param" "maybe type" "temp"
        (652319 'move' call_tmp[652316](382793 call rank _mt[243] this[126032]))
        unknown call_tmp[652321] "expr temp" "maybe param" "maybe type" "temp"
        (652324 'move' call_tmp[652321](121114 call - call_tmp[652316] 1))
        unknown call_tmp[652326] "expr temp" "maybe param" "maybe type" "temp"
        (652329 'move' call_tmp[652326](121117 call _cast string[26] call_tmp[652321]))
        unknown call_tmp[652331] "expr temp" "maybe param" "maybe type" "temp"
        (652334 'move' call_tmp[652331](121119 call + call_tmp[652309] call_tmp[652326]))
        (121122 call boundsCheckHalt module=[255] HaltWrappers[209910] call_tmp[652331])
        (359261 'referenced modules list' HaltWrappers[209910])
      }
    }
    unknown call_tmp[652338] "expr temp" "maybe param" "maybe type" "temp"
    (652341 'move' call_tmp[652338](359267 call _value _mt[243] this[126032]))
    unknown call_tmp[652345] "expr temp" "maybe param" "maybe type" "temp"
    (652348 'move' call_tmp[652345](121140 call(121135 call (partial) dsiDim _mt[243] call_tmp[652338]) d[121046]))
    (516676 'move' ret[516671](516675 'deref' call_tmp[652345]))
    (516673 return ret[516671])
    (355030 'used modules list'(121052 'use' HaltWrappers[209910]))
  }
  function _domain[125902](?).dim[121151](arg _mt[126038]:_MT[238], arg this[126036]:_domain[125902](?), param arg d[121148]:int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516680] "RVV" "temp"
    unknown tmp[424459] "maybe param" "temp"
    (424470 'move' tmp[424459](121155 call < d[121148] 0))
    unknown call_tmp[652350] "expr temp" "maybe param" "maybe type" "temp"
    (652353 'move' call_tmp[652350](424472 call _cond_invalid tmp[424459]))
    if call_tmp[652350]
    {
      (424475 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564936] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564937] "maybe param" "temp"
    unknown call_tmp[652355] "expr temp" "maybe param" "maybe type" "temp"
    (652358 'move' call_tmp[652355](424460 call isTrue tmp[424459]))
    (564942 'move' tmp[564937](564940 call _cond_test call_tmp[652355]))
    if tmp[564937]
    {
      (564947 'move' tmp[564936](564944 '_paramFoldLogical' tmp[564937] 1))
    }
    {
      unknown tmp[564949] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652362] "expr temp" "maybe param" "maybe type" "temp"
      (652365 'move' call_tmp[652362](382800 call rank _mt[243] this[126036]))
      unknown call_tmp[652367] "expr temp" "maybe param" "maybe type" "temp"
      (652370 'move' call_tmp[652367](121160 call - call_tmp[652362] 1))
      unknown call_tmp[652372] "expr temp" "maybe param" "maybe type" "temp"
      (652375 'move' call_tmp[652372](121162 call > d[121148] call_tmp[652367]))
      (564951 'move' tmp[564949](424464 call isTrue call_tmp[652372]))
      (564956 'move' tmp[564936](564953 '_paramFoldLogical' tmp[564937] tmp[564949]))
    }
    unknown call_tmp[652377] "expr temp" "maybe param" "maybe type" "temp"
    (652380 'move' call_tmp[652377](121191 call _cond_test tmp[564936]))
    if call_tmp[652377]
    {
      unknown call_tmp[652384] "expr temp" "maybe param" "maybe type" "temp"
      (652387 'move' call_tmp[652384](382804 call rank _mt[243] this[126036]))
      unknown call_tmp[652389] "expr temp" "maybe param" "maybe type" "temp"
      (652392 'move' call_tmp[652389](121187 call - call_tmp[652384] 1))
      (121189 call compilerError "dim() must take a value from 0.." call_tmp[652389])
    }
    unknown call_tmp[652396] "expr temp" "maybe param" "maybe type" "temp"
    (652399 'move' call_tmp[652396](359271 call _value _mt[243] this[126036]))
    unknown call_tmp[652403] "expr temp" "maybe param" "maybe type" "temp"
    (652406 'move' call_tmp[652403](121203 call(121198 call (partial) dsiDim _mt[243] call_tmp[652396]) d[121148]))
    (516685 'move' ret[516680](516684 'deref' call_tmp[652403]))
    (516682 return ret[516680])
  }
  function _domain[125902](?).dimIter[121212](arg _mt[126042]:_MT[238], arg this[126040]:_domain[125902](?), param arg d[121210]:_any[178](?), arg ind[121214]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516689] "RVV" "temp"
    {
      unknown _indexOfInterest[121230] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121231] "expr temp" "temp"
      unknown call_tmp[652410] "expr temp" "maybe param" "maybe type" "temp"
      (652413 'move' call_tmp[652410](359275 call _value _mt[243] this[126040]))
      unknown call_tmp[652417] "expr temp" "maybe param" "maybe type" "temp"
      (652420 'move' call_tmp[652417](121226 call(121220 call (partial) dimIter _mt[243] call_tmp[652410]) d[121210] ind[121214]))
      (121240 'move' _iterator[121231](121238 call _getIterator call_tmp[652417]))
      Defer
      {
        {
          (121257 call _freeIterator _iterator[121231])
        }
      }
      { scopeless type
        (121246 'move' _indexOfInterest[121230](121243 call iteratorIndex _iterator[121231]))
      }
      ForLoop[121232]
      {
        unknown i[121250] "index var" "insert auto destroy"
        (479524 'end of statement')
        (121252 'move' i[121250] _indexOfInterest[121230])
        (479525 'end of statement' i[121250])
        unknown yret[516693] "YVV" "temp"
        (516696 'move' yret[516693](516695 'deref' i[121250]))
        (516698 yield yret[516693])
        (479527 'end of statement' i[121250])
        label _continueLabel[121235]
        _indexOfInterest[121230]
        _iterator[121231]
      }
      label _breakLabel[121236]
    }
    (516691 return ret[516689])
  }
  function _domain[125902](?).shape[121269](arg _mt[126046]:_MT[238], arg this[126044]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516702] "RVV" "temp"
    unknown s[121291] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652424] "expr temp" "maybe param" "maybe type" "temp"
    (652427 'move' call_tmp[652424](382814 call rank _mt[243] this[126044]))
    unknown call_tmp[652431] "expr temp" "maybe param" "maybe type" "temp"
    (652434 'move' call_tmp[652431](121285 call(382818 call (partial) dim _mt[243] this[126044]) 0))
    unknown call_tmp[652438] "expr temp" "maybe param" "maybe type" "temp"
    (652441 'move' call_tmp[652438](121286 call intIdxType _mt[243] call_tmp[652431]))
    unknown call_tmp[652443] "expr temp" "maybe param" "maybe type" "temp"
    (652446 'move' call_tmp[652443](121289 call * call_tmp[652424] call_tmp[652438]))
    (542774 'default init var' s[121291] call_tmp[652443])
    (121294 'end of statement')
    {
      unknown _indexOfInterest[121326] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121327] "expr temp" "temp"
      unknown call_tmp[652450] "expr temp" "maybe param" "maybe type" "temp"
      (652453 'move' call_tmp[652450](121350 call size _mt[243] s[121291]))
      unknown call_tmp[652455] "expr temp" "maybe param" "maybe type" "temp"
      (652458 'move' call_tmp[652455](121354 call chpl_direct_counted_range_iter 0 call_tmp[652450]))
      unknown call_tmp[652460] "expr temp" "maybe param" "maybe type" "temp"
      (652463 'move' call_tmp[652460](121344 call _getIterator call_tmp[652455]))
      unknown call_tmp[652467] "expr temp" "maybe param" "maybe type" "temp"
      (652470 'move' call_tmp[652467](121357 call(382824 call (partial) dims _mt[243] this[126044])))
      unknown call_tmp[652472] "expr temp" "maybe param" "maybe type" "temp"
      (652475 'move' call_tmp[652472](121358 call _getIterator call_tmp[652467]))
      (121361 'move' _iterator[121327](121314 call _build_tuple call_tmp[652460] call_tmp[652472]))
      Defer
      {
        {
          (121391 call _freeIterator _iterator[121327])
        }
      }
      { scopeless type
        (121366 'move' _indexOfInterest[121326](121363 call iteratorIndex _iterator[121327]))
      }
      ForLoop[121328]
      {
        (121371 call _check_tuple_var_decl _indexOfInterest[121326] 2)
        (479530 'end of statement')
        unknown i[121377] "index var" "insert auto destroy"
        (479531 'end of statement')
        (121379 'move' i[121377](121375 call _indexOfInterest[121326] 0))
        (479532 'end of statement' i[121377])
        unknown r[121384] "index var" "insert auto destroy"
        (479534 'end of statement')
        (121386 'move' r[121384](121382 call _indexOfInterest[121326] 1))
        (479535 'end of statement' r[121384])
        unknown call_tmp[652477] "expr temp" "maybe param" "maybe type" "temp"
        (652480 'move' call_tmp[652477](121318 call s[121291] i[121377]))
        unknown call_tmp[652484] "expr temp" "maybe param" "maybe type" "temp"
        (652487 'move' call_tmp[652484](121320 call size _mt[243] r[121384]))
        (121323 call = call_tmp[652477] call_tmp[652484])
        (479537 'end of statement' s[121291] i[121377] r[121384])
        label _continueLabel[121331]
        _indexOfInterest[121326]
        _iterator[121327]
      }
      label _breakLabel[121332]
    }
    (516707 'move' ret[516702](516706 'deref' s[121291]))
    gotoReturn _end_shape[516700] _end_shape[516700]
    (479541 'end of statement' s[121291])
    label _end_shape[516700]
    (516704 return ret[516702])
  }
  where {
    unknown tmp[424480] "maybe param" "temp"
    (424491 'move' tmp[424480](121274 call isRectangularDom this[126044]))
    unknown call_tmp[652489] "expr temp" "maybe param" "maybe type" "temp"
    (652492 'move' call_tmp[652489](424493 call _cond_invalid tmp[424480]))
    if call_tmp[652489]
    {
      (424496 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564963] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564964] "maybe param" "temp"
    unknown call_tmp[652494] "expr temp" "maybe param" "maybe type" "temp"
    (652497 'move' call_tmp[652494](424481 call isTrue tmp[424480]))
    (564969 'move' tmp[564964](564967 call _cond_test call_tmp[652494]))
    if tmp[564964]
    {
      (564974 'move' tmp[564963](564971 '_paramFoldLogical' tmp[564964] 1))
    }
    {
      unknown tmp[564976] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652499] "expr temp" "maybe param" "maybe type" "temp"
      (652502 'move' call_tmp[652499](121278 call isSparseDom this[126044]))
      (564978 'move' tmp[564976](424485 call isTrue call_tmp[652499]))
      (564983 'move' tmp[564963](564980 '_paramFoldLogical' tmp[564964] tmp[564976]))
    }
    (748173 call chpl_statementLevelSymbol tmp[564963])
  }
  function _domain[125902](?).shape[121406](arg _mt[126050]:_MT[238], arg this[126048]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516713] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492054] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652506] "expr temp" "maybe param" "maybe type" "temp"
      (652509 'move' call_tmp[652506](382830 call size _mt[243] this[126048]))
      (492058 'move' call_type_tmp[492054](121413 'typeof' call_tmp[652506]))
    }
    unknown s[121416] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652511] "expr temp" "maybe param" "maybe type" "temp"
    (652514 'move' call_tmp[652511](121414 call _build_tuple call_type_tmp[492054]))
    (542776 'default init var' s[121416] call_tmp[652511])
    (121419 'end of statement')
    unknown call_tmp[652516] "expr temp" "maybe param" "maybe type" "temp"
    (652519 'move' call_tmp[652516](121424 call s[121416] 0))
    unknown call_tmp[652523] "expr temp" "maybe param" "maybe type" "temp"
    (652526 'move' call_tmp[652523](382835 call size _mt[243] this[126048]))
    (121426 call = call_tmp[652516] call_tmp[652523])
    (479543 'end of statement' s[121416])
    (516718 'move' ret[516713](516717 'deref' s[121416]))
    gotoReturn _end_shape[516711] _end_shape[516711]
    (479545 'end of statement' s[121416])
    label _end_shape[516711]
    (516715 return ret[516713])
  }
  where {
    (121411 call isAssociativeDom this[126048])
  }
  function _domain[125902](?).shape[121437](arg _mt[126054]:_MT[238], arg this[126052]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (121458 call compilerError ".shape not supported on this domain")
    (516722 return _void[55])
  }
  function _domain[125902](?).buildArray[121467](arg _mt[126058]:_MT[238], arg this[126056]:_domain[125902](?), arg eltType[121465]:_any[178](?), param arg initElts[121470]:bool[10]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516728] "RVV" "temp"
    unknown call_tmp[652528] "expr temp" "maybe param" "maybe type" "temp"
    (652531 'move' call_tmp[652528](121475 call == eltType[121465] void[4]))
    unknown call_tmp[652533] "expr temp" "maybe param" "maybe type" "temp"
    (652536 'move' call_tmp[652533](121499 call _cond_test call_tmp[652528]))
    if call_tmp[652533]
    {
      (121496 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652538] "expr temp" "maybe param" "maybe type" "temp"
    (652541 'move' call_tmp[652538](121507 call isGenericType eltType[121465]))
    unknown call_tmp[652543] "expr temp" "maybe param" "maybe type" "temp"
    (652546 'move' call_tmp[652543](121667 call _cond_test call_tmp[652538]))
    if call_tmp[652543]
    {
      unknown call_tmp[652548] "expr temp" "maybe param" "maybe type" "temp"
      (652551 'move' call_tmp[652548](121528 call _cast string[26] eltType[121465]))
      unknown call_tmp[652553] "expr temp" "maybe param" "maybe type" "temp"
      (652556 'move' call_tmp[652553](121530 call + "creating an array with element type " call_tmp[652548]))
      (121533 call compilerWarning call_tmp[652553])
      (479549 'end of statement')
      unknown tmp[424501] "maybe param" "temp"
      (424512 'move' tmp[424501](121539 call isClassType eltType[121465]))
      unknown call_tmp[652558] "expr temp" "maybe param" "maybe type" "temp"
      (652561 'move' call_tmp[652558](424514 call _cond_invalid tmp[424501]))
      if call_tmp[652558]
      {
        (424517 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[564990] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564991] "maybe param" "temp"
      unknown call_tmp[652563] "expr temp" "maybe param" "maybe type" "temp"
      (652566 'move' call_tmp[652563](424502 call isTrue tmp[424501]))
      (564996 'move' tmp[564991](564994 call _cond_test call_tmp[652563]))
      if tmp[564991]
      {
        unknown tmp[564998] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652568] "expr temp" "maybe param" "maybe type" "temp"
        (652571 'move' call_tmp[652568](121542 'to borrowed class from unknown' eltType[121465]))
        unknown call_tmp[652573] "expr temp" "maybe param" "maybe type" "temp"
        (652576 'move' call_tmp[652573](121544 call isGenericType call_tmp[652568]))
        unknown call_tmp[652578] "expr temp" "maybe param" "maybe type" "temp"
        (652581 'move' call_tmp[652578](121545 call ! call_tmp[652573]))
        (565000 'move' tmp[564998](424505 call isTrue call_tmp[652578]))
        (565005 'move' tmp[564990](565002 '_paramFoldLogical' tmp[564991] tmp[564998]))
      }
      {
        (565010 'move' tmp[564990](565007 '_paramFoldLogical' tmp[564991] 0))
      }
      unknown call_tmp[652583] "expr temp" "maybe param" "maybe type" "temp"
      (652586 'move' call_tmp[652583](121571 call _cond_test tmp[564990]))
      if call_tmp[652583]
      {
        (121568 call compilerWarning "which now means class type with generic management")
      }
      (121594 call compilerError "array element type cannot currently be generic")
    }
    {
      unknown tmp[424522] "maybe param" "temp"
      (424533 'move' tmp[424522](121599 call isSparseDom this[126056]))
      unknown call_tmp[652588] "expr temp" "maybe param" "maybe type" "temp"
      (652591 'move' call_tmp[652588](424535 call _cond_invalid tmp[424522]))
      if call_tmp[652588]
      {
        (424538 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565017] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565018] "maybe param" "temp"
      unknown call_tmp[652593] "expr temp" "maybe param" "maybe type" "temp"
      (652596 'move' call_tmp[652593](424523 call isTrue tmp[424522]))
      (565023 'move' tmp[565018](565021 call _cond_test call_tmp[652593]))
      if tmp[565018]
      {
        unknown tmp[565025] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652598] "expr temp" "maybe param" "maybe type" "temp"
        (652601 'move' call_tmp[652598](121603 call isDefaultInitializable eltType[121465]))
        unknown call_tmp[652603] "expr temp" "maybe param" "maybe type" "temp"
        (652606 'move' call_tmp[652603](121604 call ! call_tmp[652598]))
        (565027 'move' tmp[565025](424526 call isTrue call_tmp[652603]))
        (565032 'move' tmp[565017](565029 '_paramFoldLogical' tmp[565018] tmp[565025]))
      }
      {
        (565037 'move' tmp[565017](565034 '_paramFoldLogical' tmp[565018] 0))
      }
      unknown call_tmp[652608] "expr temp" "maybe param" "maybe type" "temp"
      (652611 'move' call_tmp[652608](121663 call _cond_test tmp[565017]))
      if call_tmp[652608]
      {
        unknown call_tmp[652613] "expr temp" "maybe param" "maybe type" "temp"
        (652616 'move' call_tmp[652613](121611 call isNonNilableClass eltType[121465]))
        unknown call_tmp[652618] "expr temp" "maybe param" "maybe type" "temp"
        (652621 'move' call_tmp[652618](121658 call _cond_test call_tmp[652613]))
        if call_tmp[652618]
        {
          (121631 call compilerError "sparse arrays of non-nilable classes are not currently supported")
        }
        {
          (121655 call compilerError "sparse arrays of non-default-initializable types are not currently supported")
        }
      }
    }
    unknown call_tmp[652623] "expr temp" "maybe param" "maybe type" "temp"
    (652626 'move' call_tmp[652623](121784 call _cond_test 0))
    if call_tmp[652623]
    {
      unknown tmp[424543] "maybe param" "temp"
      (424554 'move' tmp[424543](121676 call isRectangularDom this[126056]))
      unknown call_tmp[652628] "expr temp" "maybe param" "maybe type" "temp"
      (652631 'move' call_tmp[652628](424556 call _cond_invalid tmp[424543]))
      if call_tmp[652628]
      {
        (424559 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565044] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565045] "maybe param" "temp"
      unknown call_tmp[652633] "expr temp" "maybe param" "maybe type" "temp"
      (652636 'move' call_tmp[652633](424544 call isTrue tmp[424543]))
      (565050 'move' tmp[565045](565048 call _cond_test call_tmp[652633]))
      if tmp[565045]
      {
        unknown tmp[565052] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652640] "expr temp" "maybe param" "maybe type" "temp"
        (652643 'move' call_tmp[652640](121678 call stridable _mt[243] this[126056]))
        (565054 'move' tmp[565052](424547 call isTrue call_tmp[652640]))
        (565059 'move' tmp[565044](565056 '_paramFoldLogical' tmp[565045] tmp[565052]))
      }
      {
        (565064 'move' tmp[565044](565061 '_paramFoldLogical' tmp[565045] 0))
      }
      unknown call_tmp[652645] "expr temp" "maybe param" "maybe type" "temp"
      (652648 'move' call_tmp[652645](121779 call _cond_test tmp[565044]))
      if call_tmp[652645]
      {
        unknown call_tmp[652652] "expr temp" "maybe param" "maybe type" "temp"
        (652655 'move' call_tmp[652652](382850 call rank _mt[243] this[126056]))
        unknown call_tmp[652657] "expr temp" "maybe param" "maybe type" "temp"
        (652660 'move' call_tmp[652657](121685 call == call_tmp[652652] 1))
        unknown call_tmp[652662] "expr temp" "maybe param" "maybe type" "temp"
        (652665 'move' call_tmp[652662](121775 call _cond_test call_tmp[652657]))
        if call_tmp[652662]
        {
          unknown call_tmp[652669] "expr temp" "maybe param" "maybe type" "temp"
          (652672 'move' call_tmp[652669](121688 call stride _mt[243] this[126056]))
          unknown call_tmp[652674] "expr temp" "maybe param" "maybe type" "temp"
          (652677 'move' call_tmp[652674](121692 call < call_tmp[652669] 0))
          unknown call_tmp[652679] "expr temp" "maybe param" "maybe type" "temp"
          (652682 'move' call_tmp[652679](121715 call _cond_test call_tmp[652674]))
          if call_tmp[652679]
          {
            (121713 call warning "arrays with negatively strided dimensions are not particularly stable")
          }
        }
        {
          {
            unknown _indexOfInterest[121740] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[121741] "expr temp" "temp"
            unknown call_tmp[652686] "expr temp" "maybe param" "maybe type" "temp"
            (652689 'move' call_tmp[652686](121723 call stride _mt[243] this[126056]))
            (121750 'move' _iterator[121741](121748 call _getIterator call_tmp[652686]))
            Defer
            {
              {
                (121767 call _freeIterator _iterator[121741])
              }
            }
            { scopeless type
              (121756 'move' _indexOfInterest[121740](121753 call iteratorIndex _iterator[121741]))
            }
            ForLoop[121742]
            {
              unknown s[121760] "index var" "insert auto destroy"
              (479559 'end of statement')
              (121762 'move' s[121760] _indexOfInterest[121740])
              (479560 'end of statement' s[121760])
              unknown call_tmp[652691] "expr temp" "maybe param" "maybe type" "temp"
              (652694 'move' call_tmp[652691](121728 call < s[121760] 0))
              unknown call_tmp[652696] "expr temp" "maybe param" "maybe type" "temp"
              (652699 'move' call_tmp[652696](121735 call _cond_test call_tmp[652691]))
              if call_tmp[652696]
              {
                (121733 call warning "arrays with negatively strided dimensions are not particularly stable")
              }
              label _continueLabel[121745]
              _indexOfInterest[121740]
              _iterator[121741]
            }
            label _breakLabel[121746]
          }
        }
      }
    }
    unknown call_tmp[652703] "expr temp" "maybe param" "maybe type" "temp"
    (652706 'move' call_tmp[652703](359284 call _value _mt[243] this[126056]))
    unknown call_tmp[652710] "maybe param" "maybe type" "temp"
    (652713 'move' call_tmp[652710](121798 call(121792 call (partial) dsiBuildArray _mt[243] call_tmp[652703]) eltType[121465] initElts[121470]))
    unknown x[121799] "dead at end of block" "insert auto destroy"
    (542778 'init var' x[121799] call_tmp[652710])
    (121802 'end of statement')
    function help[121805]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652717] "expr temp" "maybe param" "maybe type" "temp"
      (652720 'move' call_tmp[652717](359288 call _value _mt[243] this[126056]))
      (121815 call(121810 call (partial) add_arr _mt[243] call_tmp[652717]) x[121799])
      (516724 return _void[55])
    }
    (121822 call help)
    (479564 'end of statement')
    unknown call_tmp[652726] "expr temp" "maybe param" "maybe type" "temp"
    (652729 'move' call_tmp[652726](121828 call eltType _mt[243] x[121799]))
    (121831 call chpl_incRefCountsForDomainsInArrayEltTypes x[121799] call_tmp[652726])
    (479565 'end of statement' x[121799] x[121799])
    unknown call_tmp[652731] "expr temp" "maybe param" "maybe type" "temp"
    (652734 'move' call_tmp[652731](121836 call _newArray x[121799]))
    (516733 'move' ret[516728](516732 'deref' call_tmp[652731]))
    gotoReturn _end_buildArray[516726] _end_buildArray[516726]
    (479568 'end of statement' x[121799])
    label _end_buildArray[516726]
    (516730 return ret[516728])
  }
  function _domain[125902](?).buildArrayWith[121845](arg _mt[126062]:_MT[238], arg this[126060]:_domain[125902](?), arg eltType[121843]:_any[178](?), arg data[121851] :
  (121850 call _ddata[11695](?) eltType[121843]), arg allocSize[121855]:int(64)[13]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516741] "RVV" "temp"
    unknown call_tmp[652736] "expr temp" "maybe param" "maybe type" "temp"
    (652739 'move' call_tmp[652736](121860 call == eltType[121843] void[4]))
    unknown call_tmp[652741] "expr temp" "maybe param" "maybe type" "temp"
    (652744 'move' call_tmp[652741](121868 call _cond_test call_tmp[652736]))
    if call_tmp[652741]
    {
      (121865 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652748] "expr temp" "maybe param" "maybe type" "temp"
    (652751 'move' call_tmp[652748](359293 call _value _mt[243] this[126060]))
    unknown call_tmp[652755] "maybe param" "maybe type" "temp"
    (652758 'move' call_tmp[652755](121883 call(121876 call (partial) dsiBuildArrayWith _mt[243] call_tmp[652748]) eltType[121843] data[121851] allocSize[121855]))
    unknown x[121884] "dead at end of block" "insert auto destroy"
    (542780 'init var' x[121884] call_tmp[652755])
    (121887 'end of statement')
    function help[121890]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652762] "expr temp" "maybe param" "maybe type" "temp"
      (652765 'move' call_tmp[652762](359297 call _value _mt[243] this[126060]))
      (121898 call(121893 call (partial) add_arr _mt[243] call_tmp[652762]) x[121884])
      (516737 return _void[55])
    }
    (121905 call help)
    (479572 'end of statement')
    unknown call_tmp[652771] "expr temp" "maybe param" "maybe type" "temp"
    (652774 'move' call_tmp[652771](121911 call eltType _mt[243] x[121884]))
    (121914 call chpl_incRefCountsForDomainsInArrayEltTypes x[121884] call_tmp[652771])
    (479573 'end of statement' x[121884] x[121884])
    unknown call_tmp[652776] "expr temp" "maybe param" "maybe type" "temp"
    (652779 'move' call_tmp[652776](121919 call _newArray x[121884]))
    (516746 'move' ret[516741](516745 'deref' call_tmp[652776]))
    gotoReturn _end_buildArrayWith[516739] _end_buildArrayWith[516739]
    (479576 'end of statement' x[121884])
    label _end_buildArrayWith[516739]
    (516743 return ret[516741])
  }
  function _domain[125902](?).clear[121926](arg _mt[126066]:_MT[238], arg this[126064]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[121934] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652781] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (652784 'move' call_tmp[652781](121933 'typeof' this[126064]))
    (542782 'default init var' emptyDom[121934] call_tmp[652781])
    (121937 'end of statement')
    (121941 call = this[126064] emptyDom[121934])
    (479578 'end of statement' emptyDom[121934])
    (516750 return _void[55])
  }
  where {
    (121931 call isRectangularDom this[126064])
  }
  function _domain[125902](?).clear[121949](arg _mt[126070]:_MT[238], arg this[126068]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[652788] "expr temp" "maybe param" "maybe type" "temp"
    (652791 'move' call_tmp[652788](359302 call _value _mt[243] this[126068]))
    (121958 call(121954 call (partial) dsiClear _mt[243] call_tmp[652788]))
    (516752 return _void[55])
  }
  function _domain[125902](?).add[121967](arg _mt[126074]:_MT[238], arg this[126072]:_domain[125902](?), in arg i[121965]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516756] "RVV" "temp"
    unknown call_tmp[652797] "expr temp" "maybe param" "maybe type" "temp"
    (652800 'move' call_tmp[652797](359306 call _value _mt[243] this[126072]))
    unknown call_tmp[652804] "expr temp" "maybe param" "maybe type" "temp"
    (652807 'move' call_tmp[652804](121977 call(121972 call (partial) dsiAdd _mt[243] call_tmp[652797]) i[121965]))
    (516761 'move' ret[516756](516760 'deref' call_tmp[652804]))
    (516758 return ret[516756])
  }
  function _domain[125902](?).bulkAdd[121995](arg _mt[126078]:_MT[238], arg this[126076]:_domain[125902](?), arg inds[121992]:_array[133588](?), arg dataSorted[121998] :
  0 =
  0, arg isUnique[122002] :
  0 =
  0, arg preserveInds[122006] :
  1 =
  1, arg addOn[122010] :
  nilLocale[89939] =
  nilLocale[89939]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516765] "RVV" "temp"
    unknown call_tmp[652811] "expr temp" "maybe param" "maybe type" "temp"
    (652814 'move' call_tmp[652811](122027 call size _mt[243] inds[121992]))
    unknown call_tmp[652816] "expr temp" "maybe param" "maybe type" "temp"
    (652819 'move' call_tmp[652816](122031 call == call_tmp[652811] 0))
    unknown call_tmp[652821] "expr temp" "maybe param" "maybe type" "temp"
    (652824 'move' call_tmp[652821](122036 call _cond_test call_tmp[652816]))
    if call_tmp[652821]
    {
      (516770 'move' ret[516765](516769 'deref' 0))
      gotoReturn _end_bulkAdd[516763] _end_bulkAdd[516763]
    }
    unknown call_tmp[652828] "expr temp" "maybe param" "maybe type" "temp"
    (652831 'move' call_tmp[652828](359319 call _value _mt[243] this[126076]))
    unknown call_tmp[652835] "expr temp" "maybe param" "maybe type" "temp"
    (652838 'move' call_tmp[652835](122054 call(122045 call (partial) dsiBulkAdd _mt[243] call_tmp[652828]) inds[121992] dataSorted[121998] isUnique[122002] preserveInds[122006] addOn[122010]))
    (516775 'move' ret[516765](516774 'deref' call_tmp[652835]))
    label _end_bulkAdd[516763]
    (516767 return ret[516765])
  }
  where {
    unknown tmp[424564] "maybe param" "temp"
    (424575 'move' tmp[424564](122016 call isSparseDom this[126076]))
    unknown call_tmp[652840] "expr temp" "maybe param" "maybe type" "temp"
    (652843 'move' call_tmp[652840](424577 call _cond_invalid tmp[424564]))
    if call_tmp[652840]
    {
      (424580 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565071] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565072] "maybe param" "temp"
    unknown call_tmp[652845] "expr temp" "maybe param" "maybe type" "temp"
    (652848 'move' call_tmp[652845](424565 call isTrue tmp[424564]))
    (565077 'move' tmp[565072](565075 call _cond_test call_tmp[652845]))
    if tmp[565072]
    {
      unknown tmp[565079] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652852] "expr temp" "maybe param" "maybe type" "temp"
      (652855 'move' call_tmp[652852](359314 call _value _mt[243] this[126076]))
      unknown call_tmp[652859] "expr temp" "maybe param" "maybe type" "temp"
      (652862 'move' call_tmp[652859](122018 call rank _mt[243] call_tmp[652852]))
      unknown call_tmp[652864] "expr temp" "maybe param" "maybe type" "temp"
      (652867 'move' call_tmp[652864](122022 call == call_tmp[652859] 1))
      (565081 'move' tmp[565079](424568 call isTrue call_tmp[652864]))
      (565086 'move' tmp[565071](565083 '_paramFoldLogical' tmp[565072] tmp[565079]))
    }
    {
      (565091 'move' tmp[565071](565088 '_paramFoldLogical' tmp[565072] 0))
    }
    unknown call_tmp[652871] "expr temp" "maybe param" "maybe type" "temp"
    (652874 'move' call_tmp[652871](359310 call _value _mt[243] this[126076]))
    unknown call_tmp[652878] "expr temp" "maybe param" "maybe type" "temp"
    (652881 'move' call_tmp[652878](121986 call idxType _mt[243] call_tmp[652871]))
    unknown call_tmp[652885] "expr temp" "maybe param" "maybe type" "temp"
    (652888 'move' call_tmp[652885](461312 call eltType _mt[243] inds[121992]))
    unknown call_tmp[652890] "expr temp" "maybe param" "maybe type" "temp"
    (652893 'move' call_tmp[652890](461316 call == call_tmp[652878] call_tmp[652885]))
    (461310 call & tmp[565071] call_tmp[652890])
  }
  function _domain[125902](?).makeIndexBuffer[122066](arg _mt[126082]:_MT[238], arg this[126080]:_domain[125902](?), arg size[122063]:int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[516779] "RVV" "temp"
    unknown call_tmp[652897] "expr temp" "maybe param" "maybe type" "temp"
    (652900 'move' call_tmp[652897](359323 call _value _mt[243] this[126080]))
    unknown call_tmp[652904] "expr temp" "maybe param" "maybe type" "temp"
    (652907 'move' call_tmp[652904](122076 call(122071 call (partial) dsiMakeIndexBuffer _mt[243] call_tmp[652897]) size[122063]))
    (516784 'move' ret[516779](516783 'deref' call_tmp[652904]))
    (516781 return ret[516779])
  }
  function _domain[125902](?).bulkAdd[122100](arg _mt[126086]:_MT[238], arg this[126084]:_domain[125902](?), arg inds[122097]:_array[133588](?), arg dataSorted[122103] :
  0 =
  0, arg isUnique[122107] :
  0 =
  0, arg preserveInds[122111] :
  1 =
  1, arg addOn[122115] :
  nilLocale[89939] =
  nilLocale[89939]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516788] "RVV" "temp"
    unknown call_tmp[652911] "expr temp" "maybe param" "maybe type" "temp"
    (652914 'move' call_tmp[652911](122132 call size _mt[243] inds[122097]))
    unknown call_tmp[652916] "expr temp" "maybe param" "maybe type" "temp"
    (652919 'move' call_tmp[652916](122136 call == call_tmp[652911] 0))
    unknown call_tmp[652921] "expr temp" "maybe param" "maybe type" "temp"
    (652924 'move' call_tmp[652921](122141 call _cond_test call_tmp[652916]))
    if call_tmp[652921]
    {
      (516793 'move' ret[516788](516792 'deref' 0))
      gotoReturn _end_bulkAdd[516786] _end_bulkAdd[516786]
    }
    unknown call_tmp[652928] "expr temp" "maybe param" "maybe type" "temp"
    (652931 'move' call_tmp[652928](359340 call _value _mt[243] this[126084]))
    unknown call_tmp[652935] "expr temp" "maybe param" "maybe type" "temp"
    (652938 'move' call_tmp[652935](122157 call(122148 call (partial) dsiBulkAdd _mt[243] call_tmp[652928]) inds[122097] dataSorted[122103] isUnique[122107] preserveInds[122111] addOn[122115]))
    (516798 'move' ret[516788](516797 'deref' call_tmp[652935]))
    label _end_bulkAdd[516786]
    (516790 return ret[516788])
  }
  where {
    unknown tmp[424585] "maybe param" "temp"
    (424596 'move' tmp[424585](122121 call isSparseDom this[126084]))
    unknown call_tmp[652940] "expr temp" "maybe param" "maybe type" "temp"
    (652943 'move' call_tmp[652940](424598 call _cond_invalid tmp[424585]))
    if call_tmp[652940]
    {
      (424601 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565098] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565099] "maybe param" "temp"
    unknown call_tmp[652945] "expr temp" "maybe param" "maybe type" "temp"
    (652948 'move' call_tmp[652945](424586 call isTrue tmp[424585]))
    (565104 'move' tmp[565099](565102 call _cond_test call_tmp[652945]))
    if tmp[565099]
    {
      unknown tmp[565106] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652952] "expr temp" "maybe param" "maybe type" "temp"
      (652955 'move' call_tmp[652952](359335 call _value _mt[243] this[126084]))
      unknown call_tmp[652959] "expr temp" "maybe param" "maybe type" "temp"
      (652962 'move' call_tmp[652959](122123 call rank _mt[243] call_tmp[652952]))
      unknown call_tmp[652964] "expr temp" "maybe param" "maybe type" "temp"
      (652967 'move' call_tmp[652964](122127 call > call_tmp[652959] 1))
      (565108 'move' tmp[565106](424589 call isTrue call_tmp[652964]))
      (565113 'move' tmp[565098](565110 '_paramFoldLogical' tmp[565099] tmp[565106]))
    }
    {
      (565118 'move' tmp[565098](565115 '_paramFoldLogical' tmp[565099] 0))
    }
    unknown call_tmp[652971] "expr temp" "maybe param" "maybe type" "temp"
    (652974 'move' call_tmp[652971](359327 call _value _mt[243] this[126084]))
    unknown call_tmp[652978] "expr temp" "maybe param" "maybe type" "temp"
    (652981 'move' call_tmp[652978](122085 call rank _mt[243] call_tmp[652971]))
    unknown call_tmp[652985] "expr temp" "maybe param" "maybe type" "temp"
    (652988 'move' call_tmp[652985](359331 call _value _mt[243] this[126084]))
    unknown call_tmp[652992] "expr temp" "maybe param" "maybe type" "temp"
    (652995 'move' call_tmp[652992](122089 call idxType _mt[243] call_tmp[652985]))
    unknown call_tmp[652997] "expr temp" "maybe param" "maybe type" "temp"
    (653000 'move' call_tmp[652997](122092 call * call_tmp[652978] call_tmp[652992]))
    unknown call_tmp[653004] "expr temp" "maybe param" "maybe type" "temp"
    (653007 'move' call_tmp[653004](461322 call eltType _mt[243] inds[122097]))
    unknown call_tmp[653009] "expr temp" "maybe param" "maybe type" "temp"
    (653012 'move' call_tmp[653009](461326 call == call_tmp[652997] call_tmp[653004]))
    (461320 call & tmp[565098] call_tmp[653009])
  }
  function _domain[125902](?).remove[122167](arg _mt[126090]:_MT[238], arg this[126088]:_domain[125902](?), arg i[122165]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516802] "RVV" "temp"
    unknown call_tmp[653016] "expr temp" "maybe param" "maybe type" "temp"
    (653019 'move' call_tmp[653016](359344 call _value _mt[243] this[126088]))
    unknown call_tmp[653023] "expr temp" "maybe param" "maybe type" "temp"
    (653026 'move' call_tmp[653023](122177 call(122172 call (partial) dsiRemove _mt[243] call_tmp[653016]) i[122165]))
    (516807 'move' ret[516802](516806 'deref' call_tmp[653023]))
    (516804 return ret[516802])
  }
  function _domain[125902](?).requestCapacity[122187](arg _mt[126094]:_MT[238], arg this[126092]:_domain[125902](?), arg i[122185]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[653028] "expr temp" "maybe param" "maybe type" "temp"
    (653031 'move' call_tmp[653028](122191 call < i[122185] 0))
    unknown call_tmp[653033] "expr temp" "maybe param" "maybe type" "temp"
    (653036 'move' call_tmp[653033](122215 call _cond_test call_tmp[653028]))
    if call_tmp[653033]
    {
      (122212 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    unknown call_tmp[653038] "expr temp" "maybe param" "maybe type" "temp"
    (653041 'move' call_tmp[653038](122223 call isAssociativeDom this[126092]))
    unknown call_tmp[653043] "expr temp" "maybe param" "maybe type" "temp"
    (653046 'move' call_tmp[653043](122224 call ! call_tmp[653038]))
    unknown call_tmp[653048] "expr temp" "maybe param" "maybe type" "temp"
    (653051 'move' call_tmp[653048](122247 call _cond_test call_tmp[653043]))
    if call_tmp[653048]
    {
      (122245 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    unknown call_tmp[653055] "expr temp" "maybe param" "maybe type" "temp"
    (653058 'move' call_tmp[653055](359348 call _value _mt[243] this[126092]))
    (122260 call(122255 call (partial) dsiRequestCapacity _mt[243] call_tmp[653055]) i[122185])
    (516809 return _void[55])
  }
  function _domain[125902](?).size[122266](arg _mt[126098]:_MT[238], arg this[126096]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516813] "RVV" "temp"
    unknown call_tmp[653064] "expr temp" "maybe param" "maybe type" "temp"
    (653067 'move' call_tmp[653064](359352 call _value _mt[243] this[126096]))
    unknown call_tmp[653071] "expr temp" "maybe param" "maybe type" "temp"
    (653074 'move' call_tmp[653071](122269 call dsiNumIndices _mt[243] call_tmp[653064]))
    (516818 'move' ret[516813](516817 'deref' call_tmp[653071]))
    (516815 return ret[516813])
  }
  function _domain[125902](?).numIndices[122279](arg _mt[126102]:_MT[238], arg this[126100]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516822] "RVV" "temp"
    unknown call_tmp[653076] "expr temp" "maybe param" "maybe type" "temp"
    (653079 'move' call_tmp[653076](122316 call + "'domain.numIndices' is deprecated - " "please use 'domain.size' instead"))
    (122319 call compilerWarning call_tmp[653076])
    (479592 'end of statement')
    unknown call_tmp[653083] "expr temp" "maybe param" "maybe type" "temp"
    (653086 'move' call_tmp[653083](382893 call size _mt[243] this[126100]))
    (516827 'move' ret[516822](516826 'deref' call_tmp[653083]))
    (516824 return ret[516822])
  }
  function _domain[125902](?).low[122329](arg _mt[126106]:_MT[238], arg this[126104]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516831] "RVV" "temp"
    unknown call_tmp[653090] "expr temp" "maybe param" "maybe type" "temp"
    (653093 'move' call_tmp[653090](359356 call _value _mt[243] this[126104]))
    unknown call_tmp[653097] "expr temp" "maybe param" "maybe type" "temp"
    (653100 'move' call_tmp[653097](122332 call dsiLow _mt[243] call_tmp[653090]))
    (516836 'move' ret[516831](516835 'deref' call_tmp[653097]))
    (516833 return ret[516831])
  }
  function _domain[125902](?).high[122342](arg _mt[126110]:_MT[238], arg this[126108]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516840] "RVV" "temp"
    unknown call_tmp[653104] "expr temp" "maybe param" "maybe type" "temp"
    (653107 'move' call_tmp[653104](359360 call _value _mt[243] this[126108]))
    unknown call_tmp[653111] "expr temp" "maybe param" "maybe type" "temp"
    (653114 'move' call_tmp[653111](122347 call dsiHigh _mt[243] call_tmp[653104]))
    (516845 'move' ret[516840](516844 'deref' call_tmp[653111]))
    (516842 return ret[516840])
  }
  function _domain[125902](?).stride[122357](arg _mt[126114]:_MT[238], arg this[126112]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516849] "RVV" "temp"
    unknown call_tmp[653118] "expr temp" "maybe param" "maybe type" "temp"
    (653121 'move' call_tmp[653118](359364 call _value _mt[243] this[126112]))
    unknown call_tmp[653125] "expr temp" "maybe param" "maybe type" "temp"
    (653128 'move' call_tmp[653125](122360 call dsiStride _mt[243] call_tmp[653118]))
    (516854 'move' ret[516849](516853 'deref' call_tmp[653125]))
    (516851 return ret[516849])
  }
  function _domain[125902](?).alignment[122370](arg _mt[126118]:_MT[238], arg this[126116]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516858] "RVV" "temp"
    unknown call_tmp[653132] "expr temp" "maybe param" "maybe type" "temp"
    (653135 'move' call_tmp[653132](359368 call _value _mt[243] this[126116]))
    unknown call_tmp[653139] "expr temp" "maybe param" "maybe type" "temp"
    (653142 'move' call_tmp[653139](122375 call dsiAlignment _mt[243] call_tmp[653132]))
    (516863 'move' ret[516858](516862 'deref' call_tmp[653139]))
    (516860 return ret[516858])
  }
  function _domain[125902](?).first[122385](arg _mt[126122]:_MT[238], arg this[126120]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516867] "RVV" "temp"
    unknown call_tmp[653146] "expr temp" "maybe param" "maybe type" "temp"
    (653149 'move' call_tmp[653146](359372 call _value _mt[243] this[126120]))
    unknown call_tmp[653153] "expr temp" "maybe param" "maybe type" "temp"
    (653156 'move' call_tmp[653153](122390 call dsiFirst _mt[243] call_tmp[653146]))
    (516872 'move' ret[516867](516871 'deref' call_tmp[653153]))
    (516869 return ret[516867])
  }
  function _domain[125902](?).last[122400](arg _mt[126126]:_MT[238], arg this[126124]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516876] "RVV" "temp"
    unknown call_tmp[653160] "expr temp" "maybe param" "maybe type" "temp"
    (653163 'move' call_tmp[653160](359376 call _value _mt[243] this[126124]))
    unknown call_tmp[653167] "expr temp" "maybe param" "maybe type" "temp"
    (653170 'move' call_tmp[653167](122405 call dsiLast _mt[243] call_tmp[653160]))
    (516881 'move' ret[516876](516880 'deref' call_tmp[653167]))
    (516878 return ret[516876])
  }
  function _domain[125902](?).alignedLow[122415](arg _mt[126130]:_MT[238], arg this[126128]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516885] "RVV" "temp"
    unknown call_tmp[653174] "expr temp" "maybe param" "maybe type" "temp"
    (653177 'move' call_tmp[653174](359380 call _value _mt[243] this[126128]))
    unknown call_tmp[653181] "expr temp" "maybe param" "maybe type" "temp"
    (653184 'move' call_tmp[653181](122420 call dsiAlignedLow _mt[243] call_tmp[653174]))
    (516890 'move' ret[516885](516889 'deref' call_tmp[653181]))
    (516887 return ret[516885])
  }
  function _domain[125902](?).alignedHigh[122430](arg _mt[126134]:_MT[238], arg this[126132]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516894] "RVV" "temp"
    unknown call_tmp[653188] "expr temp" "maybe param" "maybe type" "temp"
    (653191 'move' call_tmp[653188](359384 call _value _mt[243] this[126132]))
    unknown call_tmp[653195] "expr temp" "maybe param" "maybe type" "temp"
    (653198 'move' call_tmp[653195](122435 call dsiAlignedHigh _mt[243] call_tmp[653188]))
    (516899 'move' ret[516894](516898 'deref' call_tmp[653195]))
    (516896 return ret[516894])
  }
  function _domain[125902](?).indices[122445](arg _mt[126138]:_MT[238], arg this[126136]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (122466 call compilerError "domains do not support '.indices'")
    (516901 return _void[55])
  }
  function _domain[125902](?).contains[122483](arg _mt[126142]:_MT[238], arg this[126140]:_domain[125902](?), arg i[122480] :
  unknown call_tmp[653202] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516905] "RVV" "temp"
    unknown tmp[424606] "maybe param" "temp"
    (424617 'move' tmp[424606](122488 call isRectangularDom this[126140]))
    unknown call_tmp[653221] "expr temp" "maybe param" "maybe type" "temp"
    (653224 'move' call_tmp[653221](424619 call _cond_invalid tmp[424606]))
    if call_tmp[653221]
    {
      (424622 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565125] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565126] "maybe param" "temp"
    unknown call_tmp[653226] "expr temp" "maybe param" "maybe type" "temp"
    (653229 'move' call_tmp[653226](424607 call isTrue tmp[424606]))
    (565131 'move' tmp[565126](565129 call _cond_test call_tmp[653226]))
    if tmp[565126]
    {
      (565136 'move' tmp[565125](565133 '_paramFoldLogical' tmp[565126] 1))
    }
    {
      unknown tmp[565138] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653231] "expr temp" "maybe param" "maybe type" "temp"
      (653234 'move' call_tmp[653231](122492 call isSparseDom this[126140]))
      (565140 'move' tmp[565138](424611 call isTrue call_tmp[653231]))
      (565145 'move' tmp[565125](565142 '_paramFoldLogical' tmp[565126] tmp[565138]))
    }
    unknown call_tmp[653236] "expr temp" "maybe param" "maybe type" "temp"
    (653239 'move' call_tmp[653236](122520 call _cond_test tmp[565125]))
    if call_tmp[653236]
    {
      unknown call_tmp[653243] "expr temp" "maybe param" "maybe type" "temp"
      (653246 'move' call_tmp[653243](359392 call _value _mt[243] this[126140]))
      unknown call_tmp[653252] "expr temp" "maybe param" "maybe type" "temp"
      (653255 'move' call_tmp[653252](382903 call rank _mt[243] this[126140]))
      unknown call_tmp[653257] "expr temp" "maybe param" "maybe type" "temp"
      (653260 'move' call_tmp[653257](122503 call _makeIndexTuple call_tmp[653252] i[122480]))
      unknown call_tmp[653262] "expr temp" "maybe param" "maybe type" "temp"
      (653265 'move' call_tmp[653262](122505 call(122496 call (partial) dsiMember _mt[243] call_tmp[653243]) call_tmp[653257]))
      (516910 'move' ret[516905](516909 'deref' call_tmp[653262]))
      gotoReturn _end_contains[516903] _end_contains[516903]
    }
    {
      unknown call_tmp[653269] "expr temp" "maybe param" "maybe type" "temp"
      (653272 'move' call_tmp[653269](359396 call _value _mt[243] this[126140]))
      unknown call_tmp[653276] "expr temp" "maybe param" "maybe type" "temp"
      (653279 'move' call_tmp[653276](122515 call i[122480] 0))
      unknown call_tmp[653281] "expr temp" "maybe param" "maybe type" "temp"
      (653284 'move' call_tmp[653281](122517 call(122509 call (partial) dsiMember _mt[243] call_tmp[653269]) call_tmp[653276]))
      (516915 'move' ret[516905](516914 'deref' call_tmp[653281]))
      gotoReturn _end_contains[516903] _end_contains[516903]
    }
    label _end_contains[516903]
    (516907 return ret[516905])
  }
  function _domain[125902](?).contains[122540](arg _mt[126146]:_MT[238], arg this[126144]:_domain[125902](?), arg i[122536] ... :
  unknown call_tmp[653288] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[516921] "RVV" "temp"
    unknown call_tmp[653299] "expr temp" "maybe param" "maybe type" "temp"
    (653302 'move' call_tmp[653299](122545 call(382913 call (partial) contains _mt[243] this[126144]) i[122536]))
    (516926 'move' ret[516921](516925 'deref' call_tmp[653299]))
    (516923 return ret[516921])
  }
  function _domain[125902](?).member[122563](arg _mt[126150]:_MT[238], arg this[126148]:_domain[125902](?), arg i[122560] :
  unknown call_tmp[653306] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    unknown ret[516930] "RVV" "temp"
    unknown call_tmp[653325] "expr temp" "maybe param" "maybe type" "temp"
    (653328 'move' call_tmp[653325](122600 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122603 call compilerWarning call_tmp[653325])
    (479607 'end of statement')
    unknown call_tmp[653332] "expr temp" "maybe param" "maybe type" "temp"
    (653335 'move' call_tmp[653332](122612 call(122607 call (partial) contains _mt[243] this[126148]) i[122560]))
    (516935 'move' ret[516930](516934 'deref' call_tmp[653332]))
    (516932 return ret[516930])
  }
  function _domain[125902](?).member[122628](arg _mt[126154]:_MT[238], arg this[126152]:_domain[125902](?), arg i[122624] ... :
  unknown call_tmp[653339] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[516939] "RVV" "temp"
    unknown call_tmp[653348] "expr temp" "maybe param" "maybe type" "temp"
    (653351 'move' call_tmp[653348](122633 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122636 call compilerWarning call_tmp[653348])
    (479609 'end of statement')
    unknown call_tmp[653355] "expr temp" "maybe param" "maybe type" "temp"
    (653358 'move' call_tmp[653355](122645 call(122640 call (partial) contains _mt[243] this[126152]) i[122624]))
    (516944 'move' ret[516939](516943 'deref' call_tmp[653355]))
    (516941 return ret[516939])
  }
  function _domain[125902](?).isSubset[122656](arg _mt[126158]:_MT[238], arg this[126156]:_domain[125902](?), arg super[122653]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516948] "RVV" "temp"
    unknown tmp[424627] "maybe param" "temp"
    (424638 'move' tmp[424627](122661 call isAssociativeDom this[126156]))
    unknown call_tmp[653360] "expr temp" "maybe param" "maybe type" "temp"
    (653363 'move' call_tmp[653360](424640 call _cond_invalid tmp[424627]))
    if call_tmp[653360]
    {
      (424643 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565152] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565153] "maybe param" "temp"
    unknown call_tmp[653365] "expr temp" "maybe param" "maybe type" "temp"
    (653368 'move' call_tmp[653365](424628 call isTrue tmp[424627]))
    (565158 'move' tmp[565153](565156 call _cond_test call_tmp[653365]))
    if tmp[565153]
    {
      (565163 'move' tmp[565152](565160 '_paramFoldLogical' tmp[565153] 1))
    }
    {
      unknown tmp[565165] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653370] "expr temp" "maybe param" "maybe type" "temp"
      (653373 'move' call_tmp[653370](122665 call isRectangularDom this[126156]))
      (565167 'move' tmp[565165](424632 call isTrue call_tmp[653370]))
      (565172 'move' tmp[565152](565169 '_paramFoldLogical' tmp[565153] tmp[565165]))
    }
    unknown call_tmp[653375] "expr temp" "maybe param" "maybe type" "temp"
    (653378 'move' call_tmp[653375](122668 call ! tmp[565152]))
    unknown call_tmp[653380] "expr temp" "maybe param" "maybe type" "temp"
    (653383 'move' call_tmp[653380](122723 call _cond_test call_tmp[653375]))
    if call_tmp[653380]
    {
      unknown call_tmp[653385] "expr temp" "maybe param" "maybe type" "temp"
      (653388 'move' call_tmp[653385](122673 call isSparseDom this[126156]))
      unknown call_tmp[653390] "expr temp" "maybe param" "maybe type" "temp"
      (653393 'move' call_tmp[653390](122716 call _cond_test call_tmp[653385]))
      if call_tmp[653390]
      {
        (122693 call compilerError "isSubset not supported on sparse domains")
      }
      {
        (122714 call compilerError "isSubset not supported on this domain type")
      }
    }
    unknown call_tmp[653395] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653398 'move' call_tmp[653395](122729 'typeof' super[122653]))
    unknown call_tmp[653400] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653403 'move' call_tmp[653400](122731 'typeof' this[126156]))
    unknown call_tmp[653405] "expr temp" "maybe param" "maybe type" "temp"
    (653408 'move' call_tmp[653405](122732 call != call_tmp[653395] call_tmp[653400]))
    unknown call_tmp[653410] "expr temp" "maybe param" "maybe type" "temp"
    (653413 'move' call_tmp[653410](122840 call _cond_test call_tmp[653405]))
    if call_tmp[653410]
    {
      unknown call_tmp[653415] "expr temp" "maybe param" "maybe type" "temp"
      (653418 'move' call_tmp[653415](122737 call isRectangularDom this[126156]))
      unknown call_tmp[653420] "expr temp" "maybe param" "maybe type" "temp"
      (653423 'move' call_tmp[653420](122835 call _cond_test call_tmp[653415]))
      if call_tmp[653420]
      {
        unknown call_tmp[653427] "expr temp" "maybe param" "maybe type" "temp"
        (653430 'move' call_tmp[653427](122739 call rank _mt[243] super[122653]))
        unknown call_tmp[653434] "expr temp" "maybe param" "maybe type" "temp"
        (653437 'move' call_tmp[653434](122743 call rank _mt[243] this[126156]))
        unknown call_tmp[653439] "expr temp" "maybe param" "maybe type" "temp"
        (653442 'move' call_tmp[653439](122746 call != call_tmp[653427] call_tmp[653434]))
        unknown call_tmp[653444] "expr temp" "maybe param" "maybe type" "temp"
        (653447 'move' call_tmp[653444](122807 call _cond_test call_tmp[653439]))
        if call_tmp[653444]
        {
          (122767 call compilerError "rank mismatch in domain.isSubset()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492060] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653451] "expr temp" "maybe param" "maybe type" "temp"
            (653454 'move' call_tmp[653451](122770 call low _mt[243] super[122653]))
            (492064 'move' call_type_tmp[492060](122773 'typeof' call_tmp[653451]))
          }
          { scopeless type
            unknown call_type_tmp[492066] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653458] "expr temp" "maybe param" "maybe type" "temp"
            (653461 'move' call_tmp[653458](122775 call low _mt[243] this[126156]))
            (492070 'move' call_type_tmp[492066](122778 'typeof' call_tmp[653458]))
          }
          unknown call_tmp[653463] "expr temp" "maybe param" "maybe type" "temp"
          (653466 'move' call_tmp[653463](122779 call != call_type_tmp[492060] call_type_tmp[492066]))
          unknown call_tmp[653468] "expr temp" "maybe param" "maybe type" "temp"
          (653471 'move' call_tmp[653468](122802 call _cond_test call_tmp[653463]))
          if call_tmp[653468]
          {
            (122800 call compilerError "isSubset called with different index types")
          }
        }
      }
      {
        (122833 call compilerError "isSubset called with different associative domain types")
      }
    }
    unknown call_tmp[653473] "expr temp" "maybe param" "maybe type" "temp"
    (653476 'move' call_tmp[653473](122848 call isRectangularDom this[126156]))
    unknown call_tmp[653478] "expr temp" "maybe param" "maybe type" "temp"
    (653481 'move' call_tmp[653478](122971 call _cond_test call_tmp[653473]))
    if call_tmp[653478]
    {
      unknown contains[122850] "dead at end of block" "insert auto destroy"
      (542784 'init var' contains[122850] 1)
      (122853 'end of statement')
      {
        unknown _indexOfInterest[122920] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[122921] "expr temp" "temp"
        unknown call_tmp[653485] "expr temp" "maybe param" "maybe type" "temp"
        (653488 'move' call_tmp[653485](122942 call(122939 call (partial) dims _mt[243] this[126156])))
        unknown call_tmp[653492] "expr temp" "maybe param" "maybe type" "temp"
        (653495 'move' call_tmp[653492](122937 call size _mt[243] call_tmp[653485]))
        unknown call_tmp[653497] "expr temp" "maybe param" "maybe type" "temp"
        (653500 'move' call_tmp[653497](122935 call - call_tmp[653492] 1))
        unknown call_tmp[653502] "expr temp" "maybe param" "maybe type" "temp"
        (653505 'move' call_tmp[653502](122945 call chpl_direct_range_iter 0 call_tmp[653497] 1))
        (122930 'move' _iterator[122921](122928 call _getIterator call_tmp[653502]))
        Defer
        {
          {
            (122961 call _freeIterator _iterator[122921])
          }
        }
        { scopeless type
          (122950 'move' _indexOfInterest[122920](122947 call iteratorIndex _iterator[122921]))
        }
        ForLoop[122922]
        {
          unknown i[122954] "index var" "insert auto destroy"
          (479618 'end of statement')
          (122956 'move' i[122954] _indexOfInterest[122920])
          (479619 'end of statement' i[122954])
          {
            {
              unknown tmp[122896] "temp"
              (122899 'move' tmp[122896](122898 'addr of' contains[122850]))
              unknown tmp[424648] "maybe param" "temp"
              (424659 'move' tmp[424648] tmp[122896])
              unknown call_tmp[653507] "expr temp" "maybe param" "maybe type" "temp"
              (653510 'move' call_tmp[653507](424661 call _cond_invalid tmp[424648]))
              if call_tmp[653507]
              {
                (424664 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565179] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565180] "maybe param" "temp"
              unknown call_tmp[653512] "expr temp" "maybe param" "maybe type" "temp"
              (653515 'move' call_tmp[653512](424649 call isTrue tmp[424648]))
              (565185 'move' tmp[565180](565183 call _cond_test call_tmp[653512]))
              if tmp[565180]
              {
                unknown tmp[565187] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653519] "expr temp" "maybe param" "maybe type" "temp"
                (653522 'move' call_tmp[653519](122877 call(122873 call (partial) dims _mt[243] super[122653])))
                unknown call_tmp[653524] "expr temp" "maybe param" "maybe type" "temp"
                (653527 'move' call_tmp[653524](122880 call call_tmp[653519] i[122954]))
                unknown call_tmp[653533] "expr temp" "maybe param" "maybe type" "temp"
                (653536 'move' call_tmp[653533](122889 call(122885 call (partial) dims _mt[243] this[126156])))
                unknown call_tmp[653538] "expr temp" "maybe param" "maybe type" "temp"
                (653541 'move' call_tmp[653538](122892 call call_tmp[653533] i[122954]))
                unknown call_tmp[653543] "expr temp" "maybe param" "maybe type" "temp"
                (653546 'move' call_tmp[653543](122894 call(122881 call (partial) contains _mt[243] call_tmp[653524]) call_tmp[653538]))
                (565189 'move' tmp[565187](424652 call isTrue call_tmp[653543]))
                (565194 'move' tmp[565179](565191 '_paramFoldLogical' tmp[565180] tmp[565187]))
              }
              {
                (565199 'move' tmp[565179](565196 '_paramFoldLogical' tmp[565180] 0))
              }
              (122904 call = tmp[122896] tmp[565179])
              (479622 'end of statement' i[122954] i[122954])
            }
            unknown call_tmp[653548] "expr temp" "maybe param" "maybe type" "temp"
            (653551 'move' call_tmp[653548](122910 call == contains[122850] 0))
            unknown call_tmp[653553] "expr temp" "maybe param" "maybe type" "temp"
            (653556 'move' call_tmp[653553](122915 call _cond_test call_tmp[653548]))
            if call_tmp[653553]
            {
              break _breakLabel[122926] _breakLabel[122926]
            }
          }
          label _continueLabel[122925]
          _indexOfInterest[122920]
          _iterator[122921]
        }
        label _breakLabel[122926]
      }
      (516953 'move' ret[516948](516952 'deref' contains[122850]))
      gotoReturn _end_isSubset[516946] _end_isSubset[516946]
      (479625 'end of statement' contains[122850])
    }
    function chpl__loopexpr_iter4[582009](arg iterator[582011]:_any[178](?), arg super[582147]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582158] "RVV" "temp"
      {
        unknown _indexOfInterest[582016] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582017] "expr temp" "temp"
        (582026 'move' _iterator[582017](582024 call _getIterator iterator[582011]))
        Defer
        {
          {
            (582040 call _freeIterator _iterator[582017])
          }
        }
        { scopeless type
          (582031 'move' _indexOfInterest[582016](582028 call iteratorIndex _iterator[582017]))
        }
        ForLoop[582018] for-expr
        {
          unknown i[122987] "index var" "insert auto destroy" "no doc"
          (582151 'end of statement')
          (582035 'move' i[122987] _indexOfInterest[582016])
          (582152 'end of statement' i[122987])
          {
            {
              unknown yret[582162] "YVV" "temp"
              unknown call_tmp[582171] "expr temp" "maybe param" "maybe type" "temp"
              (582174 'move' call_tmp[582171](122984 call(122979 call (partial) contains _mt[243] super[582147]) i[122987]))
              (582165 'move' yret[582162](582164 'deref' call_tmp[582171]))
              (582167 yield yret[582162])
              (582154 'end of statement' i[122987])
            }
          }
          label _continueLabel[582021]
          _indexOfInterest[582016]
          _iterator[582017]
        }
        label _breakLabel[582022]
      }
      (582160 return ret[582158])
    }
    function chpl__loopexpr_iter4[582047](param arg tag[582051]:iterKind[453], arg iterator[582054]:_any[178](?), arg super[582075]:_any[178](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582201] "RVV" "temp"
      const _leaderIterator[582066] "const" "expr temp" "temp"
      (582071 'move' _leaderIterator[582066](582068 call _toLeader iterator[582054]))
      (582206 'move' ret[582201](582205 'deref' _leaderIterator[582066]))
      (582203 return ret[582201])
    }
    where {
      unknown tmp[582177] "maybe param" "temp"
      (582188 'move' tmp[582177](582056 call == tag[582051] leader[447]))
      unknown call_tmp[582235] "expr temp" "maybe param" "maybe type" "temp"
      (582238 'move' call_tmp[582235](582190 call _cond_invalid tmp[582177]))
      if call_tmp[582235]
      {
        (582193 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582208] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582209] "maybe param" "temp"
      unknown call_tmp[582240] "expr temp" "maybe param" "maybe type" "temp"
      (582243 'move' call_tmp[582240](582178 call isTrue tmp[582177]))
      (582214 'move' tmp[582209](582212 call _cond_test call_tmp[582240]))
      if tmp[582209]
      {
        unknown tmp[582216] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582245] "expr temp" "maybe param" "maybe type" "temp"
        (582248 'move' call_tmp[582245](582060 'call resolves' "_toLeader" iterator[582054]))
        (582218 'move' tmp[582216](582181 call isTrue call_tmp[582245]))
        (582223 'move' tmp[582208](582220 '_paramFoldLogical' tmp[582209] tmp[582216]))
      }
      {
        (582228 'move' tmp[582208](582225 '_paramFoldLogical' tmp[582209] 0))
      }
      (748335 call chpl_statementLevelSymbol tmp[582208])
    }
    function chpl__loopexpr_iter4[582077](param arg tag[582081]:iterKind[453], arg followThis[582084]:_any[178](?), arg iterator[582086]:_any[178](?), arg super[582145]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582259] "RVV" "temp"
      const _followerIterator[582093] "const" "expr temp" "temp"
      (582099 'move' _followerIterator[582093](582095 call _toFollower iterator[582086] followThis[582084]))
      {
        unknown _indexOfInterest[582114] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582115] "expr temp" "temp"
        (582124 'move' _iterator[582115](582122 call _getIterator _followerIterator[582093]))
        Defer
        {
          {
            (582138 call _freeIterator _iterator[582115])
          }
        }
        { scopeless type
          (582129 'move' _indexOfInterest[582114](582126 call iteratorIndex _iterator[582115]))
        }
        ForLoop[582116] lowered-forall for-expr
        {
          unknown i[582101] "index var" "insert auto destroy" "no doc"
          (582252 'end of statement')
          (582133 'move' i[582101] _indexOfInterest[582114])
          (582253 'end of statement' i[582101])
          {
            {
              unknown yret[582263] "YVV" "temp"
              unknown call_tmp[582272] "expr temp" "maybe param" "maybe type" "temp"
              (582275 'move' call_tmp[582272](582110 call(582107 call (partial) contains _mt[243] super[582145]) i[582101]))
              (582266 'move' yret[582263](582265 'deref' call_tmp[582272]))
              (582268 yield yret[582263])
              (582255 'end of statement' i[582101])
            }
          }
          label _continueLabel[582119]
          _indexOfInterest[582114]
          _iterator[582115]
        }
        label _breakLabel[582120]
      }
      (582261 return ret[582259])
    }
    where {
      (582089 call == tag[582081] follower[449])
    }
    function chpl__forallexpr4[581989](arg iterExpr[581992]:_any[178](?), arg super[581996]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582280] "RVV" "temp"
      unknown _iterator[581999] "expr temp" "maybe ref" "temp"
      (582001 'move' _iterator[581999] iterExpr[581992])
      unknown call_tmp[582287] "expr temp" "maybe param" "maybe type" "temp"
      (582290 'move' call_tmp[582287](582004 call chpl__loopexpr_iter4 _iterator[581999] super[581996]))
      (582285 'move' ret[582280](582284 'deref' call_tmp[582287]))
      (582282 return ret[582280])
    }
    unknown call_tmp[582292] "expr temp" "maybe param" "maybe type" "temp"
    (582295 'move' call_tmp[582292](581994 call chpl__forallexpr4 this[126156] super[122653]))
    (582299 'iterator record set shape' call_tmp[582292] this[126156] 0)
    unknown call_tmp[653558] "expr temp" "maybe param" "maybe type" "temp"
    (653561 'move' call_tmp[653558](122989 'reduce' LogicalAndReduceScanOp[376531](?) call_tmp[582292] 0))
    (516958 'move' ret[516948](516957 'deref' call_tmp[653558]))
    label _end_isSubset[516946]
    (516950 return ret[516948])
  }
  function _domain[125902](?).isSuper[123001](arg _mt[126162]:_MT[238], arg this[126160]:_domain[125902](?), arg sub[122998]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516962] "RVV" "temp"
    unknown tmp[424669] "maybe param" "temp"
    (424680 'move' tmp[424669](123006 call isAssociativeDom this[126160]))
    unknown call_tmp[653563] "expr temp" "maybe param" "maybe type" "temp"
    (653566 'move' call_tmp[653563](424682 call _cond_invalid tmp[424669]))
    if call_tmp[653563]
    {
      (424685 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565206] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565207] "maybe param" "temp"
    unknown call_tmp[653568] "expr temp" "maybe param" "maybe type" "temp"
    (653571 'move' call_tmp[653568](424670 call isTrue tmp[424669]))
    (565212 'move' tmp[565207](565210 call _cond_test call_tmp[653568]))
    if tmp[565207]
    {
      (565217 'move' tmp[565206](565214 '_paramFoldLogical' tmp[565207] 1))
    }
    {
      unknown tmp[565219] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653573] "expr temp" "maybe param" "maybe type" "temp"
      (653576 'move' call_tmp[653573](123010 call isRectangularDom this[126160]))
      (565221 'move' tmp[565219](424674 call isTrue call_tmp[653573]))
      (565226 'move' tmp[565206](565223 '_paramFoldLogical' tmp[565207] tmp[565219]))
    }
    unknown call_tmp[653578] "expr temp" "maybe param" "maybe type" "temp"
    (653581 'move' call_tmp[653578](123013 call ! tmp[565206]))
    unknown call_tmp[653583] "expr temp" "maybe param" "maybe type" "temp"
    (653586 'move' call_tmp[653583](123070 call _cond_test call_tmp[653578]))
    if call_tmp[653583]
    {
      unknown call_tmp[653588] "expr temp" "maybe param" "maybe type" "temp"
      (653591 'move' call_tmp[653588](123018 call isSparseDom this[126160]))
      unknown call_tmp[653593] "expr temp" "maybe param" "maybe type" "temp"
      (653596 'move' call_tmp[653593](123063 call _cond_test call_tmp[653588]))
      if call_tmp[653593]
      {
        (123038 call compilerError "isSuper not supported on sparse domains")
      }
      {
        unknown call_tmp[653598] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (653601 'move' call_tmp[653598](123060 'typeof' this[126160]))
        (123061 call compilerError "isSuper not supported on the domain type " call_tmp[653598])
      }
    }
    unknown call_tmp[653603] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653606 'move' call_tmp[653603](123076 'typeof' sub[122998]))
    unknown call_tmp[653608] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653611 'move' call_tmp[653608](123078 'typeof' this[126160]))
    unknown call_tmp[653613] "expr temp" "maybe param" "maybe type" "temp"
    (653616 'move' call_tmp[653613](123079 call != call_tmp[653603] call_tmp[653608]))
    unknown call_tmp[653618] "expr temp" "maybe param" "maybe type" "temp"
    (653621 'move' call_tmp[653618](123187 call _cond_test call_tmp[653613]))
    if call_tmp[653618]
    {
      unknown call_tmp[653623] "expr temp" "maybe param" "maybe type" "temp"
      (653626 'move' call_tmp[653623](123084 call isRectangularDom this[126160]))
      unknown call_tmp[653628] "expr temp" "maybe param" "maybe type" "temp"
      (653631 'move' call_tmp[653628](123182 call _cond_test call_tmp[653623]))
      if call_tmp[653628]
      {
        unknown call_tmp[653635] "expr temp" "maybe param" "maybe type" "temp"
        (653638 'move' call_tmp[653635](123086 call rank _mt[243] sub[122998]))
        unknown call_tmp[653642] "expr temp" "maybe param" "maybe type" "temp"
        (653645 'move' call_tmp[653642](123090 call rank _mt[243] this[126160]))
        unknown call_tmp[653647] "expr temp" "maybe param" "maybe type" "temp"
        (653650 'move' call_tmp[653647](123093 call != call_tmp[653635] call_tmp[653642]))
        unknown call_tmp[653652] "expr temp" "maybe param" "maybe type" "temp"
        (653655 'move' call_tmp[653652](123154 call _cond_test call_tmp[653647]))
        if call_tmp[653652]
        {
          (123114 call compilerError "rank mismatch in domain.isSuper()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492072] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653659] "expr temp" "maybe param" "maybe type" "temp"
            (653662 'move' call_tmp[653659](123117 call low _mt[243] sub[122998]))
            (492076 'move' call_type_tmp[492072](123120 'typeof' call_tmp[653659]))
          }
          { scopeless type
            unknown call_type_tmp[492078] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653666] "expr temp" "maybe param" "maybe type" "temp"
            (653669 'move' call_tmp[653666](123122 call low _mt[243] this[126160]))
            (492082 'move' call_type_tmp[492078](123125 'typeof' call_tmp[653666]))
          }
          unknown call_tmp[653671] "expr temp" "maybe param" "maybe type" "temp"
          (653674 'move' call_tmp[653671](123126 call != call_type_tmp[492072] call_type_tmp[492078]))
          unknown call_tmp[653676] "expr temp" "maybe param" "maybe type" "temp"
          (653679 'move' call_tmp[653676](123149 call _cond_test call_tmp[653671]))
          if call_tmp[653676]
          {
            (123147 call compilerError "isSuper called with different index types")
          }
        }
      }
      {
        (123180 call compilerError "isSuper called with different associative domain types")
      }
    }
    unknown call_tmp[653681] "expr temp" "maybe param" "maybe type" "temp"
    (653684 'move' call_tmp[653681](123195 call isRectangularDom this[126160]))
    unknown call_tmp[653686] "expr temp" "maybe param" "maybe type" "temp"
    (653689 'move' call_tmp[653686](123318 call _cond_test call_tmp[653681]))
    if call_tmp[653686]
    {
      unknown contains[123197] "dead at end of block" "insert auto destroy"
      (542786 'init var' contains[123197] 1)
      (123200 'end of statement')
      {
        unknown _indexOfInterest[123267] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123268] "expr temp" "temp"
        unknown call_tmp[653693] "expr temp" "maybe param" "maybe type" "temp"
        (653696 'move' call_tmp[653693](123289 call(123286 call (partial) dims _mt[243] this[126160])))
        unknown call_tmp[653700] "expr temp" "maybe param" "maybe type" "temp"
        (653703 'move' call_tmp[653700](123284 call size _mt[243] call_tmp[653693]))
        unknown call_tmp[653705] "expr temp" "maybe param" "maybe type" "temp"
        (653708 'move' call_tmp[653705](123282 call - call_tmp[653700] 1))
        unknown call_tmp[653710] "expr temp" "maybe param" "maybe type" "temp"
        (653713 'move' call_tmp[653710](123292 call chpl_direct_range_iter 0 call_tmp[653705] 1))
        (123277 'move' _iterator[123268](123275 call _getIterator call_tmp[653710]))
        Defer
        {
          {
            (123308 call _freeIterator _iterator[123268])
          }
        }
        { scopeless type
          (123297 'move' _indexOfInterest[123267](123294 call iteratorIndex _iterator[123268]))
        }
        ForLoop[123269]
        {
          unknown i[123301] "index var" "insert auto destroy"
          (479635 'end of statement')
          (123303 'move' i[123301] _indexOfInterest[123267])
          (479636 'end of statement' i[123301])
          {
            {
              unknown tmp[123243] "temp"
              (123246 'move' tmp[123243](123245 'addr of' contains[123197]))
              unknown tmp[424690] "maybe param" "temp"
              (424701 'move' tmp[424690] tmp[123243])
              unknown call_tmp[653715] "expr temp" "maybe param" "maybe type" "temp"
              (653718 'move' call_tmp[653715](424703 call _cond_invalid tmp[424690]))
              if call_tmp[653715]
              {
                (424706 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565233] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565234] "maybe param" "temp"
              unknown call_tmp[653720] "expr temp" "maybe param" "maybe type" "temp"
              (653723 'move' call_tmp[653720](424691 call isTrue tmp[424690]))
              (565239 'move' tmp[565234](565237 call _cond_test call_tmp[653720]))
              if tmp[565234]
              {
                unknown tmp[565241] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653727] "expr temp" "maybe param" "maybe type" "temp"
                (653730 'move' call_tmp[653727](123224 call(123220 call (partial) dims _mt[243] this[126160])))
                unknown call_tmp[653732] "expr temp" "maybe param" "maybe type" "temp"
                (653735 'move' call_tmp[653732](123227 call call_tmp[653727] i[123301]))
                unknown call_tmp[653741] "expr temp" "maybe param" "maybe type" "temp"
                (653744 'move' call_tmp[653741](123236 call(123232 call (partial) dims _mt[243] sub[122998])))
                unknown call_tmp[653746] "expr temp" "maybe param" "maybe type" "temp"
                (653749 'move' call_tmp[653746](123239 call call_tmp[653741] i[123301]))
                unknown call_tmp[653751] "expr temp" "maybe param" "maybe type" "temp"
                (653754 'move' call_tmp[653751](123241 call(123228 call (partial) contains _mt[243] call_tmp[653732]) call_tmp[653746]))
                (565243 'move' tmp[565241](424694 call isTrue call_tmp[653751]))
                (565248 'move' tmp[565233](565245 '_paramFoldLogical' tmp[565234] tmp[565241]))
              }
              {
                (565253 'move' tmp[565233](565250 '_paramFoldLogical' tmp[565234] 0))
              }
              (123251 call = tmp[123243] tmp[565233])
              (479639 'end of statement' i[123301] i[123301])
            }
            unknown call_tmp[653756] "expr temp" "maybe param" "maybe type" "temp"
            (653759 'move' call_tmp[653756](123257 call == contains[123197] 0))
            unknown call_tmp[653761] "expr temp" "maybe param" "maybe type" "temp"
            (653764 'move' call_tmp[653761](123262 call _cond_test call_tmp[653756]))
            if call_tmp[653761]
            {
              break _breakLabel[123273] _breakLabel[123273]
            }
          }
          label _continueLabel[123272]
          _indexOfInterest[123267]
          _iterator[123268]
        }
        label _breakLabel[123273]
      }
      (516967 'move' ret[516962](516966 'deref' contains[123197]))
      gotoReturn _end_isSuper[516960] _end_isSuper[516960]
      (479642 'end of statement' contains[123197])
    }
    function chpl__loopexpr_iter5[582321](arg iterator[582323]:_any[178](?), arg this[582459]:_domain[125902](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582470] "RVV" "temp"
      {
        unknown _indexOfInterest[582328] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582329] "expr temp" "temp"
        (582338 'move' _iterator[582329](582336 call _getIterator iterator[582323]))
        Defer
        {
          {
            (582352 call _freeIterator _iterator[582329])
          }
        }
        { scopeless type
          (582343 'move' _indexOfInterest[582328](582340 call iteratorIndex _iterator[582329]))
        }
        ForLoop[582330] for-expr
        {
          unknown i[123334] "index var" "insert auto destroy" "no doc"
          (582463 'end of statement')
          (582347 'move' i[123334] _indexOfInterest[582328])
          (582464 'end of statement' i[123334])
          {
            {
              unknown yret[582474] "YVV" "temp"
              unknown call_tmp[582483] "expr temp" "maybe param" "maybe type" "temp"
              (582486 'move' call_tmp[582483](123331 call(123326 call (partial) contains _mt[243] this[582459]) i[123334]))
              (582477 'move' yret[582474](582476 'deref' call_tmp[582483]))
              (582479 yield yret[582474])
              (582466 'end of statement' i[123334])
            }
          }
          label _continueLabel[582333]
          _indexOfInterest[582328]
          _iterator[582329]
        }
        label _breakLabel[582334]
      }
      (582472 return ret[582470])
    }
    function chpl__loopexpr_iter5[582359](param arg tag[582363]:iterKind[453], arg iterator[582366]:_any[178](?), arg this[582387]:_domain[125902](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582513] "RVV" "temp"
      const _leaderIterator[582378] "const" "expr temp" "temp"
      (582383 'move' _leaderIterator[582378](582380 call _toLeader iterator[582366]))
      (582518 'move' ret[582513](582517 'deref' _leaderIterator[582378]))
      (582515 return ret[582513])
    }
    where {
      unknown tmp[582489] "maybe param" "temp"
      (582500 'move' tmp[582489](582368 call == tag[582363] leader[447]))
      unknown call_tmp[582547] "expr temp" "maybe param" "maybe type" "temp"
      (582550 'move' call_tmp[582547](582502 call _cond_invalid tmp[582489]))
      if call_tmp[582547]
      {
        (582505 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582520] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582521] "maybe param" "temp"
      unknown call_tmp[582552] "expr temp" "maybe param" "maybe type" "temp"
      (582555 'move' call_tmp[582552](582490 call isTrue tmp[582489]))
      (582526 'move' tmp[582521](582524 call _cond_test call_tmp[582552]))
      if tmp[582521]
      {
        unknown tmp[582528] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582557] "expr temp" "maybe param" "maybe type" "temp"
        (582560 'move' call_tmp[582557](582372 'call resolves' "_toLeader" iterator[582366]))
        (582530 'move' tmp[582528](582493 call isTrue call_tmp[582557]))
        (582535 'move' tmp[582520](582532 '_paramFoldLogical' tmp[582521] tmp[582528]))
      }
      {
        (582540 'move' tmp[582520](582537 '_paramFoldLogical' tmp[582521] 0))
      }
      (748337 call chpl_statementLevelSymbol tmp[582520])
    }
    function chpl__loopexpr_iter5[582389](param arg tag[582393]:iterKind[453], arg followThis[582396]:_any[178](?), arg iterator[582398]:_any[178](?), arg this[582457]:_domain[125902](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582571] "RVV" "temp"
      const _followerIterator[582405] "const" "expr temp" "temp"
      (582411 'move' _followerIterator[582405](582407 call _toFollower iterator[582398] followThis[582396]))
      {
        unknown _indexOfInterest[582426] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582427] "expr temp" "temp"
        (582436 'move' _iterator[582427](582434 call _getIterator _followerIterator[582405]))
        Defer
        {
          {
            (582450 call _freeIterator _iterator[582427])
          }
        }
        { scopeless type
          (582441 'move' _indexOfInterest[582426](582438 call iteratorIndex _iterator[582427]))
        }
        ForLoop[582428] lowered-forall for-expr
        {
          unknown i[582413] "index var" "insert auto destroy" "no doc"
          (582564 'end of statement')
          (582445 'move' i[582413] _indexOfInterest[582426])
          (582565 'end of statement' i[582413])
          {
            {
              unknown yret[582575] "YVV" "temp"
              unknown call_tmp[582584] "expr temp" "maybe param" "maybe type" "temp"
              (582587 'move' call_tmp[582584](582422 call(582419 call (partial) contains _mt[243] this[582457]) i[582413]))
              (582578 'move' yret[582575](582577 'deref' call_tmp[582584]))
              (582580 yield yret[582575])
              (582567 'end of statement' i[582413])
            }
          }
          label _continueLabel[582431]
          _indexOfInterest[582426]
          _iterator[582427]
        }
        label _breakLabel[582432]
      }
      (582573 return ret[582571])
    }
    where {
      (582401 call == tag[582393] follower[449])
    }
    function chpl__forallexpr5[582301](arg iterExpr[582304]:_any[178](?), arg this[582308]:_domain[125902](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582592] "RVV" "temp"
      unknown _iterator[582311] "expr temp" "maybe ref" "temp"
      (582313 'move' _iterator[582311] iterExpr[582304])
      unknown call_tmp[582599] "expr temp" "maybe param" "maybe type" "temp"
      (582602 'move' call_tmp[582599](582316 call chpl__loopexpr_iter5 _iterator[582311] this[582308]))
      (582597 'move' ret[582592](582596 'deref' call_tmp[582599]))
      (582594 return ret[582592])
    }
    unknown call_tmp[582604] "expr temp" "maybe param" "maybe type" "temp"
    (582607 'move' call_tmp[582604](582306 call chpl__forallexpr5 sub[122998] this[126160]))
    (582611 'iterator record set shape' call_tmp[582604] sub[122998] 0)
    unknown call_tmp[653766] "expr temp" "maybe param" "maybe type" "temp"
    (653769 'move' call_tmp[653766](123336 'reduce' LogicalAndReduceScanOp[376531](?) call_tmp[582604] 0))
    (516972 'move' ret[516962](516971 'deref' call_tmp[653766]))
    label _end_isSuper[516960]
    (516964 return ret[516962])
  }
  function _domain[125902](?).indexOrder[123346](arg _mt[126166]:_MT[238], arg this[126164]:_domain[125902](?), arg i[123344]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516976] "RVV" "temp"
    unknown call_tmp[653773] "expr temp" "maybe param" "maybe type" "temp"
    (653776 'move' call_tmp[653773](359430 call _value _mt[243] this[126164]))
    unknown call_tmp[653782] "expr temp" "maybe param" "maybe type" "temp"
    (653785 'move' call_tmp[653782](382963 call rank _mt[243] this[126164]))
    unknown call_tmp[653787] "expr temp" "maybe param" "maybe type" "temp"
    (653790 'move' call_tmp[653787](123358 call _makeIndexTuple call_tmp[653782] i[123344]))
    unknown call_tmp[653792] "expr temp" "maybe param" "maybe type" "temp"
    (653795 'move' call_tmp[653792](123360 call(123351 call (partial) dsiIndexOrder _mt[243] call_tmp[653773]) call_tmp[653787]))
    (516981 'move' ret[516976](516980 'deref' call_tmp[653792]))
    (516978 return ret[516976])
  }
  function _domain[125902](?).position[123370](arg _mt[126170]:_MT[238], arg this[126168]:_domain[125902](?), arg i[123368]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516985] "RVV" "temp"
    unknown call_tmp[653799] "expr temp" "maybe param" "maybe type" "temp"
    (653802 'move' call_tmp[653799](382968 call rank _mt[243] this[126168]))
    unknown call_tmp[653804] "maybe param" "maybe type" "temp"
    (653807 'move' call_tmp[653804](123376 call _makeIndexTuple call_tmp[653799] i[123368]))
    unknown ind[123377] "dead at end of block" "insert auto destroy"
    (542788 'init var' ind[123377] call_tmp[653804])
    unknown pos[123384] "dead at end of block" "insert auto destroy"
    unknown call_tmp[653811] "expr temp" "maybe param" "maybe type" "temp"
    (653814 'move' call_tmp[653811](382973 call rank _mt[243] this[126168]))
    unknown call_tmp[653818] "expr temp" "maybe param" "maybe type" "temp"
    (653821 'move' call_tmp[653818](382977 call intIdxType _mt[243] this[126168]))
    unknown call_tmp[653823] "expr temp" "maybe param" "maybe type" "temp"
    (653826 'move' call_tmp[653823](123382 call * call_tmp[653811] call_tmp[653818]))
    (542790 'default init var' pos[123384] call_tmp[653823])
    (123387 'end of statement')
    {
      unknown _indexOfInterest[123420] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123421] "expr temp" "temp"
      unknown call_tmp[653830] "expr temp" "maybe param" "maybe type" "temp"
      (653833 'move' call_tmp[653830](382986 call rank _mt[243] this[126168]))
      unknown call_tmp[653835] "expr temp" "maybe param" "maybe type" "temp"
      (653838 'move' call_tmp[653835](123435 call - call_tmp[653830] 1))
      unknown call_tmp[653840] "expr temp" "maybe param" "maybe type" "temp"
      (653843 'move' call_tmp[653840](123438 call chpl_direct_range_iter 0 call_tmp[653835] 1))
      (123430 'move' _iterator[123421](123428 call _getIterator call_tmp[653840]))
      Defer
      {
        {
          (123454 call _freeIterator _iterator[123421])
        }
      }
      { scopeless type
        (123443 'move' _indexOfInterest[123420](123440 call iteratorIndex _iterator[123421]))
      }
      ForLoop[123422]
      {
        unknown d[123447] "index var" "insert auto destroy"
        (479647 'end of statement')
        (123449 'move' d[123447] _indexOfInterest[123420])
        (479648 'end of statement' d[123447])
        unknown call_tmp[653845] "expr temp" "maybe param" "maybe type" "temp"
        (653848 'move' call_tmp[653845](123400 call pos[123384] d[123447]))
        unknown call_tmp[653852] "expr temp" "maybe param" "maybe type" "temp"
        (653855 'move' call_tmp[653852](359434 call _value _mt[243] this[126168]))
        unknown call_tmp[653859] "expr temp" "maybe param" "maybe type" "temp"
        (653862 'move' call_tmp[653859](123407 call(123402 call (partial) dsiDim _mt[243] call_tmp[653852]) d[123447]))
        unknown call_tmp[653866] "expr temp" "maybe param" "maybe type" "temp"
        (653869 'move' call_tmp[653866](123414 call ind[123377] d[123447]))
        unknown call_tmp[653871] "expr temp" "maybe param" "maybe type" "temp"
        (653874 'move' call_tmp[653871](123416 call(123408 call (partial) indexOrder _mt[243] call_tmp[653859]) call_tmp[653866]))
        (123417 call = call_tmp[653845] call_tmp[653871])
        (479650 'end of statement' pos[123384] d[123447] d[123447] ind[123377] d[123447])
        label _continueLabel[123425]
        _indexOfInterest[123420]
        _iterator[123421]
      }
      label _breakLabel[123426]
    }
    (516990 'move' ret[516985](516989 'deref' pos[123384]))
    gotoReturn _end_position[516983] _end_position[516983]
    (479656 'end of statement' pos[123384])
    label _end_position[516983]
    (516987 return ret[516985])
  }
  function _domain[125902](?).expand[123475](arg _mt[126174]:_MT[238], arg this[126172]:_domain[125902](?), arg off[123472] :
  unknown call_tmp[653878] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[653890] "expr temp" "maybe param" "maybe type" "temp"
    (653893 'move' call_tmp[653890](123486 call isAssociativeDom this[126172]))
    unknown call_tmp[653895] "expr temp" "maybe param" "maybe type" "temp"
    (653898 'move' call_tmp[653895](123560 call _cond_test call_tmp[653890]))
    if call_tmp[653895]
    {
      (123506 call compilerError "expand not supported on associative domains")
    }
    {
      unknown call_tmp[653900] "expr temp" "maybe param" "maybe type" "temp"
      (653903 'move' call_tmp[653900](123511 call isSparseDom this[126172]))
      unknown call_tmp[653905] "expr temp" "maybe param" "maybe type" "temp"
      (653908 'move' call_tmp[653905](123554 call _cond_test call_tmp[653900]))
      if call_tmp[653905]
      {
        (123531 call compilerError "expand not supported on sparse domains")
      }
      {
        (123552 call compilerError "expand not supported on this domain type")
      }
    }
    (516994 return _void[55])
  }
  where {
    unknown call_tmp[653910] "expr temp" "maybe param" "maybe type" "temp"
    (653913 'move' call_tmp[653910](123480 call isRectangularDom this[126172]))
    (123481 call ! call_tmp[653910])
  }
  function _domain[125902](?).expand[123578](arg _mt[126178]:_MT[238], arg this[126176]:_domain[125902](?), arg off[123574] ... :
  (383002 call intIdxType _mt[243] this[126176])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516998] "RVV" "temp"
    unknown call_tmp[653921] "expr temp" "maybe param" "maybe type" "temp"
    (653924 'move' call_tmp[653921](123583 call(383010 call (partial) expand _mt[243] this[126176]) off[123574]))
    (517003 'move' ret[516998](517002 'deref' call_tmp[653921]))
    (517000 return ret[516998])
  }
  function _domain[125902](?).expand[123598](arg _mt[126182]:_MT[238], arg this[126180]:_domain[125902](?), arg off[123595] :
  unknown call_tmp[653928] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517007] "RVV" "temp"
    unknown call_tmp[653942] "maybe param" "maybe type" "temp"
    (653945 'move' call_tmp[653942](123602 call(383023 call (partial) dims _mt[243] this[126180])))
    unknown ranges[123603] "dead at end of block" "insert auto destroy"
    (542792 'init var' ranges[123603] call_tmp[653942])
    (123606 'end of statement')
    {
      unknown _indexOfInterest[123699] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123700] "expr temp" "temp"
      unknown call_tmp[653949] "expr temp" "maybe param" "maybe type" "temp"
      (653952 'move' call_tmp[653949](383038 call rank _mt[243] this[126180]))
      unknown call_tmp[653954] "expr temp" "maybe param" "maybe type" "temp"
      (653957 'move' call_tmp[653954](123714 call - call_tmp[653949] 1))
      unknown call_tmp[653959] "expr temp" "maybe param" "maybe type" "temp"
      (653962 'move' call_tmp[653959](123717 call chpl_direct_range_iter 0 call_tmp[653954] 1))
      (123709 'move' _iterator[123700](123707 call _getIterator call_tmp[653959]))
      Defer
      {
        {
          (123733 call _freeIterator _iterator[123700])
        }
      }
      { scopeless type
        (123722 'move' _indexOfInterest[123699](123719 call iteratorIndex _iterator[123700]))
      }
      ForLoop[123701]
      {
        unknown i[123726] "index var" "insert auto destroy"
        (479663 'end of statement')
        (123728 'move' i[123726] _indexOfInterest[123699])
        (479664 'end of statement' i[123726])
        {
          unknown call_tmp[653964] "expr temp" "maybe param" "maybe type" "temp"
          (653967 'move' call_tmp[653964](123619 call ranges[123603] i[123726]))
          unknown call_tmp[653969] "expr temp" "maybe param" "maybe type" "temp"
          (653972 'move' call_tmp[653969](123623 call ranges[123603] i[123726]))
          unknown call_tmp[653976] "expr temp" "maybe param" "maybe type" "temp"
          (653979 'move' call_tmp[653976](123632 call off[123595] i[123726]))
          unknown call_tmp[653981] "expr temp" "maybe param" "maybe type" "temp"
          (653984 'move' call_tmp[653981](123634 call(123626 call (partial) expand _mt[243] call_tmp[653969]) call_tmp[653976]))
          (123635 call = call_tmp[653964] call_tmp[653981])
          (479666 'end of statement' ranges[123603] i[123726] ranges[123603] i[123726] i[123726])
          unknown call_tmp[653986] "expr temp" "maybe param" "maybe type" "temp"
          (653989 'move' call_tmp[653986](123642 call ranges[123603] i[123726]))
          unknown call_tmp[653993] "expr temp" "maybe param" "maybe type" "temp"
          (653996 'move' call_tmp[653993](123643 call low _mt[243] call_tmp[653986]))
          unknown call_tmp[653998] "expr temp" "maybe param" "maybe type" "temp"
          (654001 'move' call_tmp[653998](123649 call ranges[123603] i[123726]))
          unknown call_tmp[654005] "expr temp" "maybe param" "maybe type" "temp"
          (654008 'move' call_tmp[654005](123650 call high _mt[243] call_tmp[653998]))
          unknown call_tmp[654010] "expr temp" "maybe param" "maybe type" "temp"
          (654013 'move' call_tmp[654010](123653 call > call_tmp[653993] call_tmp[654005]))
          unknown call_tmp[654015] "expr temp" "maybe param" "maybe type" "temp"
          (654018 'move' call_tmp[654015](123695 call _cond_test call_tmp[654010]))
          if call_tmp[654015]
          {
            (123692 call halt "***Error: Degenerate dimension created in dimension " i[123726] "***")
            (479672 'end of statement' i[123726])
          }
        }
        label _continueLabel[123704]
        _indexOfInterest[123699]
        _iterator[123700]
      }
      label _breakLabel[123705]
    }
    unknown call_tmp[654022] "expr temp" "maybe param" "maybe type" "temp"
    (654025 'move' call_tmp[654022](383043 call dist _mt[243] this[126180]))
    unknown call_tmp[654029] "expr temp" "maybe param" "maybe type" "temp"
    (654032 'move' call_tmp[654029](383047 call rank _mt[243] this[126180]))
    unknown call_tmp[654036] "expr temp" "maybe param" "maybe type" "temp"
    (654039 'move' call_tmp[654036](359438 call _value _mt[243] this[126180]))
    unknown call_tmp[654043] "expr temp" "maybe param" "maybe type" "temp"
    (654046 'move' call_tmp[654043](123746 call idxType _mt[243] call_tmp[654036]))
    unknown call_tmp[654050] "expr temp" "maybe param" "maybe type" "temp"
    (654053 'move' call_tmp[654050](383051 call stridable _mt[243] this[126180]))
    unknown call_tmp[654055] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654058 'move' call_tmp[654055](747786 'new' _domain[125902](?) call_tmp[654022] call_tmp[654029] call_tmp[654043] call_tmp[654050] ranges[123603]))
    (517012 'move' ret[517007](517011 'deref' call_tmp[654055]))
    gotoReturn _end_expand[517005] _end_expand[517005]
    (479674 'end of statement' ranges[123603])
    label _end_expand[517005]
    (517009 return ret[517007])
  }
  function _domain[125902](?).expand[123762](arg _mt[126186]:_MT[238], arg this[126184]:_domain[125902](?), arg off[123759] :
  (383056 call intIdxType _mt[243] this[126184])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517018] "RVV" "temp"
    unknown call_tmp[654064] "maybe param" "maybe type" "temp"
    (654067 'move' call_tmp[654064](123770 call(383064 call (partial) dims _mt[243] this[126184])))
    unknown ranges[123771] "dead at end of block" "insert auto destroy"
    (542794 'init var' ranges[123771] call_tmp[654064])
    (123774 'end of statement')
    {
      unknown _indexOfInterest[123801] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123802] "expr temp" "temp"
      unknown call_tmp[654071] "expr temp" "maybe param" "maybe type" "temp"
      (654074 'move' call_tmp[654071](383076 call rank _mt[243] this[126184]))
      unknown call_tmp[654076] "expr temp" "maybe param" "maybe type" "temp"
      (654079 'move' call_tmp[654076](123816 call - call_tmp[654071] 1))
      unknown call_tmp[654081] "expr temp" "maybe param" "maybe type" "temp"
      (654084 'move' call_tmp[654081](123819 call chpl_direct_range_iter 0 call_tmp[654076] 1))
      (123811 'move' _iterator[123802](123809 call _getIterator call_tmp[654081]))
      Defer
      {
        {
          (123835 call _freeIterator _iterator[123802])
        }
      }
      { scopeless type
        (123824 'move' _indexOfInterest[123801](123821 call iteratorIndex _iterator[123802]))
      }
      ForLoop[123803]
      {
        unknown i[123828] "index var" "insert auto destroy"
        (479677 'end of statement')
        (123830 'move' i[123828] _indexOfInterest[123801])
        (479678 'end of statement' i[123828])
        unknown call_tmp[654086] "expr temp" "maybe param" "maybe type" "temp"
        (654089 'move' call_tmp[654086](123787 call ranges[123771] i[123828]))
        unknown call_tmp[654093] "expr temp" "maybe param" "maybe type" "temp"
        (654096 'move' call_tmp[654093](123791 call(383070 call (partial) dim _mt[243] this[126184]) i[123828]))
        unknown call_tmp[654100] "expr temp" "maybe param" "maybe type" "temp"
        (654103 'move' call_tmp[654100](123797 call(123792 call (partial) expand _mt[243] call_tmp[654093]) off[123759]))
        (123798 call = call_tmp[654086] call_tmp[654100])
        (479680 'end of statement' ranges[123771] i[123828] i[123828])
        label _continueLabel[123806]
        _indexOfInterest[123801]
        _iterator[123802]
      }
      label _breakLabel[123807]
    }
    unknown call_tmp[654107] "expr temp" "maybe param" "maybe type" "temp"
    (654110 'move' call_tmp[654107](383081 call dist _mt[243] this[126184]))
    unknown call_tmp[654114] "expr temp" "maybe param" "maybe type" "temp"
    (654117 'move' call_tmp[654114](383085 call rank _mt[243] this[126184]))
    unknown call_tmp[654121] "expr temp" "maybe param" "maybe type" "temp"
    (654124 'move' call_tmp[654121](359442 call _value _mt[243] this[126184]))
    unknown call_tmp[654128] "expr temp" "maybe param" "maybe type" "temp"
    (654131 'move' call_tmp[654128](123848 call idxType _mt[243] call_tmp[654121]))
    unknown call_tmp[654135] "expr temp" "maybe param" "maybe type" "temp"
    (654138 'move' call_tmp[654135](383089 call stridable _mt[243] this[126184]))
    unknown call_tmp[654140] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654143 'move' call_tmp[654140](747787 'new' _domain[125902](?) call_tmp[654107] call_tmp[654114] call_tmp[654128] call_tmp[654135] ranges[123771]))
    (517023 'move' ret[517018](517022 'deref' call_tmp[654140]))
    gotoReturn _end_expand[517016] _end_expand[517016]
    (479684 'end of statement' ranges[123771])
    label _end_expand[517016]
    (517020 return ret[517018])
  }
  where {
    unknown call_tmp[654147] "expr temp" "maybe param" "maybe type" "temp"
    (654150 'move' call_tmp[654147](383060 call rank _mt[243] this[126184]))
    (123766 call > call_tmp[654147] 1)
  }
  function _domain[125902](?).exterior[123868](arg _mt[126190]:_MT[238], arg this[126188]:_domain[125902](?), arg off[123865] :
  unknown call_tmp[654154] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654166] "expr temp" "maybe param" "maybe type" "temp"
    (654169 'move' call_tmp[654166](123879 call isAssociativeDom this[126188]))
    unknown call_tmp[654171] "expr temp" "maybe param" "maybe type" "temp"
    (654174 'move' call_tmp[654171](123953 call _cond_test call_tmp[654166]))
    if call_tmp[654171]
    {
      (123899 call compilerError "exterior not supported on associative domains")
    }
    {
      unknown call_tmp[654176] "expr temp" "maybe param" "maybe type" "temp"
      (654179 'move' call_tmp[654176](123904 call isSparseDom this[126188]))
      unknown call_tmp[654181] "expr temp" "maybe param" "maybe type" "temp"
      (654184 'move' call_tmp[654181](123947 call _cond_test call_tmp[654176]))
      if call_tmp[654181]
      {
        (123924 call compilerError "exterior not supported on sparse domains")
      }
      {
        (123945 call compilerError "exterior not supported on this domain type")
      }
    }
    (517027 return _void[55])
  }
  where {
    unknown call_tmp[654186] "expr temp" "maybe param" "maybe type" "temp"
    (654189 'move' call_tmp[654186](123873 call isRectangularDom this[126188]))
    (123874 call ! call_tmp[654186])
  }
  function _domain[125902](?).exterior[123971](arg _mt[126194]:_MT[238], arg this[126192]:_domain[125902](?), arg off[123967] ... :
  (383105 call intIdxType _mt[243] this[126192])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517031] "RVV" "temp"
    unknown call_tmp[654197] "expr temp" "maybe param" "maybe type" "temp"
    (654200 'move' call_tmp[654197](123976 call(383113 call (partial) exterior _mt[243] this[126192]) off[123967]))
    (517036 'move' ret[517031](517035 'deref' call_tmp[654197]))
    (517033 return ret[517031])
  }
  function _domain[125902](?).exterior[123991](arg _mt[126198]:_MT[238], arg this[126196]:_domain[125902](?), arg off[123988] :
  unknown call_tmp[654204] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517040] "RVV" "temp"
    unknown call_tmp[654218] "maybe param" "maybe type" "temp"
    (654221 'move' call_tmp[654218](123995 call(383126 call (partial) dims _mt[243] this[126196])))
    unknown ranges[123996] "dead at end of block" "insert auto destroy"
    (542796 'init var' ranges[123996] call_tmp[654218])
    (123999 'end of statement')
    {
      unknown _indexOfInterest[124031] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124032] "expr temp" "temp"
      unknown call_tmp[654225] "expr temp" "maybe param" "maybe type" "temp"
      (654228 'move' call_tmp[654225](383139 call rank _mt[243] this[126196]))
      unknown call_tmp[654230] "expr temp" "maybe param" "maybe type" "temp"
      (654233 'move' call_tmp[654230](124046 call - call_tmp[654225] 1))
      unknown call_tmp[654235] "expr temp" "maybe param" "maybe type" "temp"
      (654238 'move' call_tmp[654235](124049 call chpl_direct_range_iter 0 call_tmp[654230] 1))
      (124041 'move' _iterator[124032](124039 call _getIterator call_tmp[654235]))
      Defer
      {
        {
          (124065 call _freeIterator _iterator[124032])
        }
      }
      { scopeless type
        (124054 'move' _indexOfInterest[124031](124051 call iteratorIndex _iterator[124032]))
      }
      ForLoop[124033]
      {
        unknown i[124058] "index var" "insert auto destroy"
        (479691 'end of statement')
        (124060 'move' i[124058] _indexOfInterest[124031])
        (479692 'end of statement' i[124058])
        unknown call_tmp[654240] "expr temp" "maybe param" "maybe type" "temp"
        (654243 'move' call_tmp[654240](124012 call ranges[123996] i[124058]))
        unknown call_tmp[654247] "expr temp" "maybe param" "maybe type" "temp"
        (654250 'move' call_tmp[654247](124016 call(383132 call (partial) dim _mt[243] this[126196]) i[124058]))
        unknown call_tmp[654254] "expr temp" "maybe param" "maybe type" "temp"
        (654257 'move' call_tmp[654254](124025 call off[123988] i[124058]))
        unknown call_tmp[654259] "expr temp" "maybe param" "maybe type" "temp"
        (654262 'move' call_tmp[654259](124027 call(124019 call (partial) exterior _mt[243] call_tmp[654247]) call_tmp[654254]))
        (124028 call = call_tmp[654240] call_tmp[654259])
        (479694 'end of statement' ranges[123996] i[124058] i[124058] i[124058])
        label _continueLabel[124036]
        _indexOfInterest[124031]
        _iterator[124032]
      }
      label _breakLabel[124037]
    }
    unknown call_tmp[654266] "expr temp" "maybe param" "maybe type" "temp"
    (654269 'move' call_tmp[654266](383144 call dist _mt[243] this[126196]))
    unknown call_tmp[654273] "expr temp" "maybe param" "maybe type" "temp"
    (654276 'move' call_tmp[654273](383148 call rank _mt[243] this[126196]))
    unknown call_tmp[654280] "expr temp" "maybe param" "maybe type" "temp"
    (654283 'move' call_tmp[654280](359446 call _value _mt[243] this[126196]))
    unknown call_tmp[654287] "expr temp" "maybe param" "maybe type" "temp"
    (654290 'move' call_tmp[654287](124078 call idxType _mt[243] call_tmp[654280]))
    unknown call_tmp[654294] "expr temp" "maybe param" "maybe type" "temp"
    (654297 'move' call_tmp[654294](383152 call stridable _mt[243] this[126196]))
    unknown call_tmp[654299] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654302 'move' call_tmp[654299](747788 'new' _domain[125902](?) call_tmp[654266] call_tmp[654273] call_tmp[654287] call_tmp[654294] ranges[123996]))
    (517045 'move' ret[517040](517044 'deref' call_tmp[654299]))
    gotoReturn _end_exterior[517038] _end_exterior[517038]
    (479699 'end of statement' ranges[123996])
    label _end_exterior[517038]
    (517042 return ret[517040])
  }
  function _domain[125902](?).exterior[124094](arg _mt[126202]:_MT[238], arg this[126200]:_domain[125902](?), arg off[124091] :
  (383157 call intIdxType _mt[243] this[126200])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517051] "RVV" "temp"
    unknown offTup[124104] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654308] "expr temp" "maybe param" "maybe type" "temp"
    (654311 'move' call_tmp[654308](383165 call rank _mt[243] this[126200]))
    unknown call_tmp[654315] "expr temp" "maybe param" "maybe type" "temp"
    (654318 'move' call_tmp[654315](383169 call intIdxType _mt[243] this[126200]))
    unknown call_tmp[654320] "expr temp" "maybe param" "maybe type" "temp"
    (654323 'move' call_tmp[654320](124102 call * call_tmp[654308] call_tmp[654315]))
    (542798 'default init var' offTup[124104] call_tmp[654320])
    (124107 'end of statement')
    {
      unknown _indexOfInterest[124125] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124126] "expr temp" "temp"
      unknown call_tmp[654327] "expr temp" "maybe param" "maybe type" "temp"
      (654330 'move' call_tmp[654327](383176 call rank _mt[243] this[126200]))
      unknown call_tmp[654332] "expr temp" "maybe param" "maybe type" "temp"
      (654335 'move' call_tmp[654332](124140 call - call_tmp[654327] 1))
      unknown call_tmp[654337] "expr temp" "maybe param" "maybe type" "temp"
      (654340 'move' call_tmp[654337](124143 call chpl_direct_range_iter 0 call_tmp[654332] 1))
      (124135 'move' _iterator[124126](124133 call _getIterator call_tmp[654337]))
      Defer
      {
        {
          (124159 call _freeIterator _iterator[124126])
        }
      }
      { scopeless type
        (124148 'move' _indexOfInterest[124125](124145 call iteratorIndex _iterator[124126]))
      }
      ForLoop[124127]
      {
        unknown i[124152] "index var" "insert auto destroy"
        (479702 'end of statement')
        (124154 'move' i[124152] _indexOfInterest[124125])
        (479703 'end of statement' i[124152])
        unknown call_tmp[654342] "expr temp" "maybe param" "maybe type" "temp"
        (654345 'move' call_tmp[654342](124120 call offTup[124104] i[124152]))
        (124122 call = call_tmp[654342] off[124091])
        (479705 'end of statement' offTup[124104] i[124152])
        label _continueLabel[124130]
        _indexOfInterest[124125]
        _iterator[124126]
      }
      label _breakLabel[124131]
    }
    unknown call_tmp[654349] "expr temp" "maybe param" "maybe type" "temp"
    (654352 'move' call_tmp[654349](124169 call(383180 call (partial) exterior _mt[243] this[126200]) offTup[124104]))
    (517056 'move' ret[517051](517055 'deref' call_tmp[654349]))
    gotoReturn _end_exterior[517049] _end_exterior[517049]
    (479708 'end of statement' offTup[124104])
    label _end_exterior[517049]
    (517053 return ret[517051])
  }
  where {
    unknown call_tmp[654356] "expr temp" "maybe param" "maybe type" "temp"
    (654359 'move' call_tmp[654356](383161 call rank _mt[243] this[126200]))
    (124098 call != call_tmp[654356] 1)
  }
  function _domain[125902](?).interior[124184](arg _mt[126206]:_MT[238], arg this[126204]:_domain[125902](?), arg off[124181] :
  unknown call_tmp[654363] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654375] "expr temp" "maybe param" "maybe type" "temp"
    (654378 'move' call_tmp[654375](124195 call isAssociativeDom this[126204]))
    unknown call_tmp[654380] "expr temp" "maybe param" "maybe type" "temp"
    (654383 'move' call_tmp[654380](124269 call _cond_test call_tmp[654375]))
    if call_tmp[654380]
    {
      (124215 call compilerError "interior not supported on associative domains")
    }
    {
      unknown call_tmp[654385] "expr temp" "maybe param" "maybe type" "temp"
      (654388 'move' call_tmp[654385](124220 call isSparseDom this[126204]))
      unknown call_tmp[654390] "expr temp" "maybe param" "maybe type" "temp"
      (654393 'move' call_tmp[654390](124263 call _cond_test call_tmp[654385]))
      if call_tmp[654390]
      {
        (124240 call compilerError "interior not supported on sparse domains")
      }
      {
        (124261 call compilerError "interior not supported on this domain type")
      }
    }
    (517060 return _void[55])
  }
  where {
    unknown call_tmp[654395] "expr temp" "maybe param" "maybe type" "temp"
    (654398 'move' call_tmp[654395](124189 call isRectangularDom this[126204]))
    (124190 call ! call_tmp[654395])
  }
  function _domain[125902](?).interior[124287](arg _mt[126210]:_MT[238], arg this[126208]:_domain[125902](?), arg off[124283] ... :
  (383196 call intIdxType _mt[243] this[126208])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517064] "RVV" "temp"
    unknown call_tmp[654406] "expr temp" "maybe param" "maybe type" "temp"
    (654409 'move' call_tmp[654406](124292 call(383204 call (partial) interior _mt[243] this[126208]) off[124283]))
    (517069 'move' ret[517064](517068 'deref' call_tmp[654406]))
    (517066 return ret[517064])
  }
  function _domain[125902](?).interior[124307](arg _mt[126214]:_MT[238], arg this[126212]:_domain[125902](?), arg off[124304] :
  unknown call_tmp[654413] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517073] "RVV" "temp"
    unknown call_tmp[654427] "maybe param" "maybe type" "temp"
    (654430 'move' call_tmp[654427](124311 call(383217 call (partial) dims _mt[243] this[126212])))
    unknown ranges[124312] "dead at end of block" "insert auto destroy"
    (542800 'init var' ranges[124312] call_tmp[654427])
    (124315 'end of statement')
    {
      unknown _indexOfInterest[124449] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124450] "expr temp" "temp"
      unknown call_tmp[654434] "expr temp" "maybe param" "maybe type" "temp"
      (654437 'move' call_tmp[654434](383255 call rank _mt[243] this[126212]))
      unknown call_tmp[654439] "expr temp" "maybe param" "maybe type" "temp"
      (654442 'move' call_tmp[654439](124464 call - call_tmp[654434] 1))
      unknown call_tmp[654444] "expr temp" "maybe param" "maybe type" "temp"
      (654447 'move' call_tmp[654444](124467 call chpl_direct_range_iter 0 call_tmp[654439] 1))
      (124459 'move' _iterator[124450](124457 call _getIterator call_tmp[654444]))
      Defer
      {
        {
          (124483 call _freeIterator _iterator[124450])
        }
      }
      { scopeless type
        (124472 'move' _indexOfInterest[124449](124469 call iteratorIndex _iterator[124450]))
      }
      ForLoop[124451]
      {
        unknown i[124476] "index var" "insert auto destroy"
        (479715 'end of statement')
        (124478 'move' i[124476] _indexOfInterest[124449])
        (479716 'end of statement' i[124476])
        {
          unknown tmp[424711] "maybe param" "temp"
          unknown tmp[424732] "maybe param" "temp"
          unknown call_tmp[654449] "expr temp" "maybe param" "maybe type" "temp"
          (654452 'move' call_tmp[654449](124328 call off[124304] i[124476]))
          (424743 'move' tmp[424732](124330 call > call_tmp[654449] 0))
          unknown call_tmp[654454] "expr temp" "maybe param" "maybe type" "temp"
          (654457 'move' call_tmp[654454](424745 call _cond_invalid tmp[424732]))
          if call_tmp[654454]
          {
            (424748 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[565260] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565261] "maybe param" "temp"
          unknown call_tmp[654459] "expr temp" "maybe param" "maybe type" "temp"
          (654462 'move' call_tmp[654459](424733 call isTrue tmp[424732]))
          (565266 'move' tmp[565261](565264 call _cond_test call_tmp[654459]))
          if tmp[565261]
          {
            unknown tmp[565268] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[654466] "expr temp" "maybe param" "maybe type" "temp"
            (654469 'move' call_tmp[654466](124335 call(383223 call (partial) dim _mt[243] this[126212]) i[124476]))
            unknown call_tmp[654473] "expr temp" "maybe param" "maybe type" "temp"
            (654476 'move' call_tmp[654473](124336 call _high _mt[243] call_tmp[654466]))
            unknown call_tmp[654478] "expr temp" "maybe param" "maybe type" "temp"
            (654481 'move' call_tmp[654478](124340 call + call_tmp[654473] 1))
            unknown call_tmp[654483] "expr temp" "maybe param" "maybe type" "temp"
            (654486 'move' call_tmp[654483](124345 call off[124304] i[124476]))
            unknown call_tmp[654488] "expr temp" "maybe param" "maybe type" "temp"
            (654491 'move' call_tmp[654488](124346 call - call_tmp[654478] call_tmp[654483]))
            unknown call_tmp[654495] "expr temp" "maybe param" "maybe type" "temp"
            (654498 'move' call_tmp[654495](124351 call(383230 call (partial) dim _mt[243] this[126212]) i[124476]))
            unknown call_tmp[654502] "expr temp" "maybe param" "maybe type" "temp"
            (654505 'move' call_tmp[654502](124352 call _low _mt[243] call_tmp[654495]))
            unknown call_tmp[654507] "expr temp" "maybe param" "maybe type" "temp"
            (654510 'move' call_tmp[654507](124355 call < call_tmp[654488] call_tmp[654502]))
            (565270 'move' tmp[565268](424736 call isTrue call_tmp[654507]))
            (565275 'move' tmp[565260](565272 '_paramFoldLogical' tmp[565261] tmp[565268]))
          }
          {
            (565280 'move' tmp[565260](565277 '_paramFoldLogical' tmp[565261] 0))
          }
          (424722 'move' tmp[424711] tmp[565260])
          unknown call_tmp[654512] "expr temp" "maybe param" "maybe type" "temp"
          (654515 'move' call_tmp[654512](424724 call _cond_invalid tmp[424711]))
          if call_tmp[654512]
          {
            (424727 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[565314] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565315] "maybe param" "temp"
          unknown call_tmp[654517] "expr temp" "maybe param" "maybe type" "temp"
          (654520 'move' call_tmp[654517](424712 call isTrue tmp[424711]))
          (565320 'move' tmp[565315](565318 call _cond_test call_tmp[654517]))
          if tmp[565315]
          {
            (565325 'move' tmp[565314](565322 '_paramFoldLogical' tmp[565315] 1))
          }
          {
            unknown tmp[424753] "maybe param" "temp"
            unknown call_tmp[654522] "expr temp" "maybe param" "maybe type" "temp"
            (654525 'move' call_tmp[654522](124362 call off[124304] i[124476]))
            (424764 'move' tmp[424753](124364 call < call_tmp[654522] 0))
            unknown call_tmp[654527] "expr temp" "maybe param" "maybe type" "temp"
            (654530 'move' call_tmp[654527](424766 call _cond_invalid tmp[424753]))
            if call_tmp[654527]
            {
              (424769 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[565287] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[565288] "maybe param" "temp"
            unknown call_tmp[654532] "expr temp" "maybe param" "maybe type" "temp"
            (654535 'move' call_tmp[654532](424754 call isTrue tmp[424753]))
            (565293 'move' tmp[565288](565291 call _cond_test call_tmp[654532]))
            if tmp[565288]
            {
              unknown tmp[565295] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[654539] "expr temp" "maybe param" "maybe type" "temp"
              (654542 'move' call_tmp[654539](124369 call(383237 call (partial) dim _mt[243] this[126212]) i[124476]))
              unknown call_tmp[654546] "expr temp" "maybe param" "maybe type" "temp"
              (654549 'move' call_tmp[654546](124370 call _low _mt[243] call_tmp[654539]))
              unknown call_tmp[654551] "expr temp" "maybe param" "maybe type" "temp"
              (654554 'move' call_tmp[654551](124374 call - call_tmp[654546] 1))
              unknown call_tmp[654556] "expr temp" "maybe param" "maybe type" "temp"
              (654559 'move' call_tmp[654556](124379 call off[124304] i[124476]))
              unknown call_tmp[654561] "expr temp" "maybe param" "maybe type" "temp"
              (654564 'move' call_tmp[654561](124380 call - call_tmp[654551] call_tmp[654556]))
              unknown call_tmp[654568] "expr temp" "maybe param" "maybe type" "temp"
              (654571 'move' call_tmp[654568](124385 call(383244 call (partial) dim _mt[243] this[126212]) i[124476]))
              unknown call_tmp[654575] "expr temp" "maybe param" "maybe type" "temp"
              (654578 'move' call_tmp[654575](124386 call _high _mt[243] call_tmp[654568]))
              unknown call_tmp[654580] "expr temp" "maybe param" "maybe type" "temp"
              (654583 'move' call_tmp[654580](124389 call > call_tmp[654561] call_tmp[654575]))
              (565297 'move' tmp[565295](424757 call isTrue call_tmp[654580]))
              (565302 'move' tmp[565287](565299 '_paramFoldLogical' tmp[565288] tmp[565295]))
            }
            {
              (565307 'move' tmp[565287](565304 '_paramFoldLogical' tmp[565288] 0))
            }
            unknown tmp[565327] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (565329 'move' tmp[565327](424716 call isTrue tmp[565287]))
            (565334 'move' tmp[565314](565331 '_paramFoldLogical' tmp[565315] tmp[565327]))
          }
          unknown call_tmp[654585] "expr temp" "maybe param" "maybe type" "temp"
          (654588 'move' call_tmp[654585](124419 call _cond_test tmp[565314]))
          if call_tmp[654585]
          {
            (124416 call halt "***Error: Argument to 'interior' function out of range in dimension " i[124476] "***")
            (479720 'end of statement' i[124476])
          }
          unknown call_tmp[654590] "expr temp" "maybe param" "maybe type" "temp"
          (654593 'move' call_tmp[654590](124427 call ranges[124312] i[124476]))
          unknown call_tmp[654597] "expr temp" "maybe param" "maybe type" "temp"
          (654600 'move' call_tmp[654597](359450 call _value _mt[243] this[126212]))
          unknown call_tmp[654604] "expr temp" "maybe param" "maybe type" "temp"
          (654607 'move' call_tmp[654604](124434 call(124429 call (partial) dsiDim _mt[243] call_tmp[654597]) i[124476]))
          unknown call_tmp[654611] "expr temp" "maybe param" "maybe type" "temp"
          (654614 'move' call_tmp[654611](124443 call off[124304] i[124476]))
          unknown call_tmp[654616] "expr temp" "maybe param" "maybe type" "temp"
          (654619 'move' call_tmp[654616](124445 call(124437 call (partial) interior _mt[243] call_tmp[654604]) call_tmp[654611]))
          (124446 call = call_tmp[654590] call_tmp[654616])
          (479722 'end of statement' ranges[124312] i[124476] i[124476] i[124476])
        }
        label _continueLabel[124454]
        _indexOfInterest[124449]
        _iterator[124450]
      }
      label _breakLabel[124455]
    }
    unknown call_tmp[654623] "expr temp" "maybe param" "maybe type" "temp"
    (654626 'move' call_tmp[654623](383260 call dist _mt[243] this[126212]))
    unknown call_tmp[654630] "expr temp" "maybe param" "maybe type" "temp"
    (654633 'move' call_tmp[654630](383264 call rank _mt[243] this[126212]))
    unknown call_tmp[654637] "expr temp" "maybe param" "maybe type" "temp"
    (654640 'move' call_tmp[654637](359454 call _value _mt[243] this[126212]))
    unknown call_tmp[654644] "expr temp" "maybe param" "maybe type" "temp"
    (654647 'move' call_tmp[654644](124496 call idxType _mt[243] call_tmp[654637]))
    unknown call_tmp[654651] "expr temp" "maybe param" "maybe type" "temp"
    (654654 'move' call_tmp[654651](383268 call stridable _mt[243] this[126212]))
    unknown call_tmp[654656] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654659 'move' call_tmp[654656](747789 'new' _domain[125902](?) call_tmp[654623] call_tmp[654630] call_tmp[654644] call_tmp[654651] ranges[124312]))
    (517078 'move' ret[517073](517077 'deref' call_tmp[654656]))
    gotoReturn _end_interior[517071] _end_interior[517071]
    (479727 'end of statement' ranges[124312])
    label _end_interior[517071]
    (517075 return ret[517073])
  }
  function _domain[125902](?).interior[124512](arg _mt[126218]:_MT[238], arg this[126216]:_domain[125902](?), arg off[124509] :
  (383273 call intIdxType _mt[243] this[126216])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517084] "RVV" "temp"
    unknown offTup[124522] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654665] "expr temp" "maybe param" "maybe type" "temp"
    (654668 'move' call_tmp[654665](383281 call rank _mt[243] this[126216]))
    unknown call_tmp[654672] "expr temp" "maybe param" "maybe type" "temp"
    (654675 'move' call_tmp[654672](383285 call intIdxType _mt[243] this[126216]))
    unknown call_tmp[654677] "expr temp" "maybe param" "maybe type" "temp"
    (654680 'move' call_tmp[654677](124520 call * call_tmp[654665] call_tmp[654672]))
    (542802 'default init var' offTup[124522] call_tmp[654677])
    (124525 'end of statement')
    {
      unknown _indexOfInterest[124543] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124544] "expr temp" "temp"
      unknown call_tmp[654684] "expr temp" "maybe param" "maybe type" "temp"
      (654687 'move' call_tmp[654684](383292 call rank _mt[243] this[126216]))
      unknown call_tmp[654689] "expr temp" "maybe param" "maybe type" "temp"
      (654692 'move' call_tmp[654689](124558 call - call_tmp[654684] 1))
      unknown call_tmp[654694] "expr temp" "maybe param" "maybe type" "temp"
      (654697 'move' call_tmp[654694](124561 call chpl_direct_range_iter 0 call_tmp[654689] 1))
      (124553 'move' _iterator[124544](124551 call _getIterator call_tmp[654694]))
      Defer
      {
        {
          (124577 call _freeIterator _iterator[124544])
        }
      }
      { scopeless type
        (124566 'move' _indexOfInterest[124543](124563 call iteratorIndex _iterator[124544]))
      }
      ForLoop[124545]
      {
        unknown i[124570] "index var" "insert auto destroy"
        (479730 'end of statement')
        (124572 'move' i[124570] _indexOfInterest[124543])
        (479731 'end of statement' i[124570])
        unknown call_tmp[654699] "expr temp" "maybe param" "maybe type" "temp"
        (654702 'move' call_tmp[654699](124538 call offTup[124522] i[124570]))
        (124540 call = call_tmp[654699] off[124509])
        (479733 'end of statement' offTup[124522] i[124570])
        label _continueLabel[124548]
        _indexOfInterest[124543]
        _iterator[124544]
      }
      label _breakLabel[124549]
    }
    unknown call_tmp[654706] "expr temp" "maybe param" "maybe type" "temp"
    (654709 'move' call_tmp[654706](124587 call(383296 call (partial) interior _mt[243] this[126216]) offTup[124522]))
    (517089 'move' ret[517084](517088 'deref' call_tmp[654706]))
    gotoReturn _end_interior[517082] _end_interior[517082]
    (479736 'end of statement' offTup[124522])
    label _end_interior[517082]
    (517086 return ret[517084])
  }
  where {
    unknown call_tmp[654713] "expr temp" "maybe param" "maybe type" "temp"
    (654716 'move' call_tmp[654713](383277 call rank _mt[243] this[126216]))
    (124516 call != call_tmp[654713] 1)
  }
  function _domain[125902](?).translate[124597](arg _mt[126222]:_MT[238], arg this[126220]:_domain[125902](?), arg off[124595]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654718] "expr temp" "maybe param" "maybe type" "temp"
    (654721 'move' call_tmp[654718](124608 call isAssociativeDom this[126220]))
    unknown call_tmp[654723] "expr temp" "maybe param" "maybe type" "temp"
    (654726 'move' call_tmp[654723](124682 call _cond_test call_tmp[654718]))
    if call_tmp[654723]
    {
      (124628 call compilerError "translate not supported on associative domains")
    }
    {
      unknown call_tmp[654728] "expr temp" "maybe param" "maybe type" "temp"
      (654731 'move' call_tmp[654728](124633 call isSparseDom this[126220]))
      unknown call_tmp[654733] "expr temp" "maybe param" "maybe type" "temp"
      (654736 'move' call_tmp[654733](124676 call _cond_test call_tmp[654728]))
      if call_tmp[654733]
      {
        (124653 call compilerError "translate not supported on sparse domains")
      }
      {
        (124674 call compilerError "translate not supported on this domain type")
      }
    }
    (517093 return _void[55])
  }
  where {
    unknown call_tmp[654738] "expr temp" "maybe param" "maybe type" "temp"
    (654741 'move' call_tmp[654738](124602 call isRectangularDom this[126220]))
    (124603 call ! call_tmp[654738])
  }
  function _domain[125902](?).translate[124698](arg _mt[126226]:_MT[238], arg this[126224]:_domain[125902](?), arg off[124695]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517097] "RVV" "temp"
    unknown call_tmp[654747] "expr temp" "maybe param" "maybe type" "temp"
    (654750 'move' call_tmp[654747](124703 call(383308 call (partial) translate _mt[243] this[126224]) off[124695]))
    (517102 'move' ret[517097](517101 'deref' call_tmp[654747]))
    (517099 return ret[517097])
  }
  function _domain[125902](?).translate[124713](arg _mt[126230]:_MT[238], arg this[126228]:_domain[125902](?), arg off[124711]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517106] "RVV" "temp"
    unknown call_tmp[654754] "expr temp" "maybe param" "maybe type" "temp"
    (654757 'move' call_tmp[654754](124720 call size _mt[243] off[124711]))
    unknown call_tmp[654761] "expr temp" "maybe param" "maybe type" "temp"
    (654764 'move' call_tmp[654761](383314 call rank _mt[243] this[126228]))
    unknown call_tmp[654766] "expr temp" "maybe param" "maybe type" "temp"
    (654769 'move' call_tmp[654766](124724 call != call_tmp[654754] call_tmp[654761]))
    unknown call_tmp[654771] "expr temp" "maybe param" "maybe type" "temp"
    (654774 'move' call_tmp[654771](124747 call _cond_test call_tmp[654766]))
    if call_tmp[654771]
    {
      (124745 call compilerError "the domain and offset arguments of translate() must be of the same rank")
    }
    unknown call_tmp[654778] "maybe param" "maybe type" "temp"
    (654781 'move' call_tmp[654778](124755 call(383318 call (partial) dims _mt[243] this[126228])))
    unknown ranges[124756] "dead at end of block" "insert auto destroy"
    (542804 'init var' ranges[124756] call_tmp[654778])
    (124759 'end of statement')
    {
      unknown _indexOfInterest[124793] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124794] "expr temp" "temp"
      unknown call_tmp[654785] "expr temp" "maybe param" "maybe type" "temp"
      (654788 'move' call_tmp[654785](383327 call rank _mt[243] this[126228]))
      unknown call_tmp[654790] "expr temp" "maybe param" "maybe type" "temp"
      (654793 'move' call_tmp[654790](124808 call - call_tmp[654785] 1))
      unknown call_tmp[654795] "expr temp" "maybe param" "maybe type" "temp"
      (654798 'move' call_tmp[654795](124811 call chpl_direct_range_iter 0 call_tmp[654790] 1))
      (124803 'move' _iterator[124794](124801 call _getIterator call_tmp[654795]))
      Defer
      {
        {
          (124827 call _freeIterator _iterator[124794])
        }
      }
      { scopeless type
        (124816 'move' _indexOfInterest[124793](124813 call iteratorIndex _iterator[124794]))
      }
      ForLoop[124795]
      {
        unknown i[124820] "index var" "insert auto destroy"
        (479744 'end of statement')
        (124822 'move' i[124820] _indexOfInterest[124793])
        (479745 'end of statement' i[124820])
        unknown call_tmp[654800] "expr temp" "maybe param" "maybe type" "temp"
        (654803 'move' call_tmp[654800](124771 call ranges[124756] i[124820]))
        unknown call_tmp[654807] "expr temp" "maybe param" "maybe type" "temp"
        (654810 'move' call_tmp[654807](359459 call _value _mt[243] this[126228]))
        unknown call_tmp[654814] "expr temp" "maybe param" "maybe type" "temp"
        (654817 'move' call_tmp[654814](124778 call(124773 call (partial) dsiDim _mt[243] call_tmp[654807]) i[124820]))
        unknown call_tmp[654821] "expr temp" "maybe param" "maybe type" "temp"
        (654824 'move' call_tmp[654821](124787 call off[124711] i[124820]))
        unknown call_tmp[654826] "expr temp" "maybe param" "maybe type" "temp"
        (654829 'move' call_tmp[654826](124789 call(124781 call (partial) translate _mt[243] call_tmp[654814]) call_tmp[654821]))
        (124790 call = call_tmp[654800] call_tmp[654826])
        (479747 'end of statement' ranges[124756] i[124820] i[124820] i[124820])
        label _continueLabel[124798]
        _indexOfInterest[124793]
        _iterator[124794]
      }
      label _breakLabel[124799]
    }
    unknown call_tmp[654833] "expr temp" "maybe param" "maybe type" "temp"
    (654836 'move' call_tmp[654833](383332 call dist _mt[243] this[126228]))
    unknown call_tmp[654840] "expr temp" "maybe param" "maybe type" "temp"
    (654843 'move' call_tmp[654840](383336 call rank _mt[243] this[126228]))
    unknown call_tmp[654847] "expr temp" "maybe param" "maybe type" "temp"
    (654850 'move' call_tmp[654847](359463 call _value _mt[243] this[126228]))
    unknown call_tmp[654854] "expr temp" "maybe param" "maybe type" "temp"
    (654857 'move' call_tmp[654854](124840 call idxType _mt[243] call_tmp[654847]))
    unknown call_tmp[654861] "expr temp" "maybe param" "maybe type" "temp"
    (654864 'move' call_tmp[654861](383340 call stridable _mt[243] this[126228]))
    unknown call_tmp[654866] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654869 'move' call_tmp[654866](747790 'new' _domain[125902](?) call_tmp[654833] call_tmp[654840] call_tmp[654854] call_tmp[654861] ranges[124756]))
    (517111 'move' ret[517106](517110 'deref' call_tmp[654866]))
    gotoReturn _end_translate[517104] _end_translate[517104]
    (479752 'end of statement' ranges[124756])
    label _end_translate[517104]
    (517108 return ret[517106])
  }
  where {
    (124718 call isTuple off[124711])
  }
  function _domain[125902](?).translate[124855](arg _mt[126234]:_MT[238], arg this[126232]:_domain[125902](?), arg off[124853]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517117] "RVV" "temp"
    unknown offTup[124874] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654873] "expr temp" "maybe param" "maybe type" "temp"
    (654876 'move' call_tmp[654873](383350 call rank _mt[243] this[126232]))
    unknown call_tmp[654878] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (654881 'move' call_tmp[654878](124871 'typeof' off[124853]))
    unknown call_tmp[654883] "expr temp" "maybe param" "maybe type" "temp"
    (654886 'move' call_tmp[654883](124872 call * call_tmp[654873] call_tmp[654878]))
    (542806 'default init var' offTup[124874] call_tmp[654883])
    (124877 'end of statement')
    {
      unknown _indexOfInterest[124895] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124896] "expr temp" "temp"
      unknown call_tmp[654890] "expr temp" "maybe param" "maybe type" "temp"
      (654893 'move' call_tmp[654890](383358 call rank _mt[243] this[126232]))
      unknown call_tmp[654895] "expr temp" "maybe param" "maybe type" "temp"
      (654898 'move' call_tmp[654895](124910 call - call_tmp[654890] 1))
      unknown call_tmp[654900] "expr temp" "maybe param" "maybe type" "temp"
      (654903 'move' call_tmp[654900](124913 call chpl_direct_range_iter 0 call_tmp[654895] 1))
      (124905 'move' _iterator[124896](124903 call _getIterator call_tmp[654900]))
      Defer
      {
        {
          (124929 call _freeIterator _iterator[124896])
        }
      }
      { scopeless type
        (124918 'move' _indexOfInterest[124895](124915 call iteratorIndex _iterator[124896]))
      }
      ForLoop[124897]
      {
        unknown i[124922] "index var" "insert auto destroy"
        (479755 'end of statement')
        (124924 'move' i[124922] _indexOfInterest[124895])
        (479756 'end of statement' i[124922])
        unknown call_tmp[654905] "expr temp" "maybe param" "maybe type" "temp"
        (654908 'move' call_tmp[654905](124890 call offTup[124874] i[124922]))
        (124892 call = call_tmp[654905] off[124853])
        (479758 'end of statement' offTup[124874] i[124922])
        label _continueLabel[124900]
        _indexOfInterest[124895]
        _iterator[124896]
      }
      label _breakLabel[124901]
    }
    unknown call_tmp[654912] "expr temp" "maybe param" "maybe type" "temp"
    (654915 'move' call_tmp[654912](124939 call(383362 call (partial) translate _mt[243] this[126232]) offTup[124874]))
    (517122 'move' ret[517117](517121 'deref' call_tmp[654912]))
    gotoReturn _end_translate[517115] _end_translate[517115]
    (479761 'end of statement' offTup[124874])
    label _end_translate[517115]
    (517119 return ret[517117])
  }
  where {
    unknown tmp[424774] "maybe param" "temp"
    unknown call_tmp[654919] "expr temp" "maybe param" "maybe type" "temp"
    (654922 'move' call_tmp[654919](383345 call rank _mt[243] this[126232]))
    (424785 'move' tmp[424774](124859 call != call_tmp[654919] 1))
    unknown call_tmp[654924] "expr temp" "maybe param" "maybe type" "temp"
    (654927 'move' call_tmp[654924](424787 call _cond_invalid tmp[424774]))
    if call_tmp[654924]
    {
      (424790 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565341] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565342] "maybe param" "temp"
    unknown call_tmp[654929] "expr temp" "maybe param" "maybe type" "temp"
    (654932 'move' call_tmp[654929](424775 call isTrue tmp[424774]))
    (565347 'move' tmp[565342](565345 call _cond_test call_tmp[654929]))
    if tmp[565342]
    {
      unknown tmp[565349] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[654934] "expr temp" "maybe param" "maybe type" "temp"
      (654937 'move' call_tmp[654934](124864 call isTuple off[124853]))
      unknown call_tmp[654939] "expr temp" "maybe param" "maybe type" "temp"
      (654942 'move' call_tmp[654939](124865 call ! call_tmp[654934]))
      (565351 'move' tmp[565349](424778 call isTrue call_tmp[654939]))
      (565356 'move' tmp[565341](565353 '_paramFoldLogical' tmp[565342] tmp[565349]))
    }
    {
      (565361 'move' tmp[565341](565358 '_paramFoldLogical' tmp[565342] 0))
    }
    (748175 call chpl_statementLevelSymbol tmp[565341])
  }
  function _domain[125902](?).isEmpty[124947](arg _mt[126238]:_MT[238], arg this[126236]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517128] "RVV" "temp"
    unknown call_tmp[654946] "expr temp" "maybe param" "maybe type" "temp"
    (654949 'move' call_tmp[654946](124951 call size _mt[243] this[126236]))
    unknown call_tmp[654951] "expr temp" "maybe param" "maybe type" "temp"
    (654954 'move' call_tmp[654951](124955 call == call_tmp[654946] 0))
    (517134 'move' ret[517128](517133 'coerce' call_tmp[654951] bool[10]))
    (517130 return ret[517128])
  }
  { scopeless type
    bool[10]
  }
  function _domain[125902](?).chpl__unTranslate[124971](arg _mt[126242]:_MT[238], arg this[126240]:_domain[125902](?), arg off[124967]:integral[199](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517138] "RVV" "temp"
    unknown call_tmp[654960] "expr temp" "maybe param" "maybe type" "temp"
    (654963 'move' call_tmp[654960](124976 call(383372 call (partial) chpl__unTranslate _mt[243] this[126240]) off[124967]))
    (517143 'move' ret[517138](517142 'deref' call_tmp[654960]))
    (517140 return ret[517138])
  }
  function _domain[125902](?).chpl__unTranslate[124991](arg _mt[126246]:_MT[238], arg this[126244]:_domain[125902](?), arg off[124988] :
  unknown call_tmp[654967] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517147] "RVV" "temp"
    unknown call_tmp[654981] "maybe param" "maybe type" "temp"
    (654984 'move' call_tmp[654981](124995 call(383385 call (partial) dims _mt[243] this[126244])))
    unknown ranges[124996] "dead at end of block" "insert auto destroy"
    (542808 'init var' ranges[124996] call_tmp[654981])
    (124999 'end of statement')
    {
      unknown _indexOfInterest[125031] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125032] "expr temp" "temp"
      unknown call_tmp[654988] "expr temp" "maybe param" "maybe type" "temp"
      (654991 'move' call_tmp[654988](383398 call rank _mt[243] this[126244]))
      unknown call_tmp[654993] "expr temp" "maybe param" "maybe type" "temp"
      (654996 'move' call_tmp[654993](125046 call - call_tmp[654988] 1))
      unknown call_tmp[654998] "expr temp" "maybe param" "maybe type" "temp"
      (655001 'move' call_tmp[654998](125049 call chpl_direct_range_iter 0 call_tmp[654993] 1))
      (125041 'move' _iterator[125032](125039 call _getIterator call_tmp[654998]))
      Defer
      {
        {
          (125065 call _freeIterator _iterator[125032])
        }
      }
      { scopeless type
        (125054 'move' _indexOfInterest[125031](125051 call iteratorIndex _iterator[125032]))
      }
      ForLoop[125033]
      {
        unknown i[125058] "index var" "insert auto destroy"
        (479766 'end of statement')
        (125060 'move' i[125058] _indexOfInterest[125031])
        (479767 'end of statement' i[125058])
        unknown call_tmp[655003] "expr temp" "maybe param" "maybe type" "temp"
        (655006 'move' call_tmp[655003](125012 call ranges[124996] i[125058]))
        unknown call_tmp[655010] "expr temp" "maybe param" "maybe type" "temp"
        (655013 'move' call_tmp[655010](125016 call(383391 call (partial) dim _mt[243] this[126244]) i[125058]))
        unknown call_tmp[655017] "expr temp" "maybe param" "maybe type" "temp"
        (655020 'move' call_tmp[655017](125025 call off[124988] i[125058]))
        unknown call_tmp[655022] "expr temp" "maybe param" "maybe type" "temp"
        (655025 'move' call_tmp[655022](125027 call(125019 call (partial) chpl__unTranslate _mt[243] call_tmp[655010]) call_tmp[655017]))
        (125028 call = call_tmp[655003] call_tmp[655022])
        (479769 'end of statement' ranges[124996] i[125058] i[125058] i[125058])
        label _continueLabel[125036]
        _indexOfInterest[125031]
        _iterator[125032]
      }
      label _breakLabel[125037]
    }
    unknown call_tmp[655029] "expr temp" "maybe param" "maybe type" "temp"
    (655032 'move' call_tmp[655029](383403 call dist _mt[243] this[126244]))
    unknown call_tmp[655036] "expr temp" "maybe param" "maybe type" "temp"
    (655039 'move' call_tmp[655036](383407 call rank _mt[243] this[126244]))
    unknown call_tmp[655043] "expr temp" "maybe param" "maybe type" "temp"
    (655046 'move' call_tmp[655043](359468 call _value _mt[243] this[126244]))
    unknown call_tmp[655050] "expr temp" "maybe param" "maybe type" "temp"
    (655053 'move' call_tmp[655050](125078 call idxType _mt[243] call_tmp[655043]))
    unknown call_tmp[655057] "expr temp" "maybe param" "maybe type" "temp"
    (655060 'move' call_tmp[655057](383411 call stridable _mt[243] this[126244]))
    unknown call_tmp[655062] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (655065 'move' call_tmp[655062](747791 'new' _domain[125902](?) call_tmp[655029] call_tmp[655036] call_tmp[655050] call_tmp[655057] ranges[124996]))
    (517152 'move' ret[517147](517151 'deref' call_tmp[655062]))
    gotoReturn _end_chpl__unTranslate[517145] _end_chpl__unTranslate[517145]
    (479774 'end of statement' ranges[124996])
    label _end_chpl__unTranslate[517145]
    (517149 return ret[517147])
  }
  function _domain[125902](?).setIndices[125092](arg _mt[126250]:_MT[238], arg this[126248]:_domain[125902](?), arg x[125090]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655069] "expr temp" "maybe param" "maybe type" "temp"
    (655072 'move' call_tmp[655069](359472 call _value _mt[243] this[126248]))
    (125100 call(125095 call (partial) dsiSetIndices _mt[243] call_tmp[655069]) x[125090])
    (479776 'end of statement')
    unknown call_tmp[655078] "expr temp" "maybe param" "maybe type" "temp"
    (655081 'move' call_tmp[655078](383418 call _instance _mt[243] this[126248]))
    unknown call_tmp[655083] "expr temp" "maybe param" "maybe type" "temp"
    (655086 'move' call_tmp[655083](125106 call _isPrivatized call_tmp[655078]))
    unknown call_tmp[655088] "expr temp" "maybe param" "maybe type" "temp"
    (655091 'move' call_tmp[655088](125113 call _cond_test call_tmp[655083]))
    if call_tmp[655088]
    {
      unknown call_tmp[655095] "expr temp" "maybe param" "maybe type" "temp"
      (655098 'move' call_tmp[655095](383422 call _value _mt[243] this[126248]))
      (125110 call _reprivatize call_tmp[655095])
    }
    (517156 return _void[55])
  }
  function _domain[125902](?).getIndices[125121](arg _mt[126254]:_MT[238], arg this[126252]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517160] "RVV" "temp"
    unknown call_tmp[655102] "expr temp" "maybe param" "maybe type" "temp"
    (655105 'move' call_tmp[655102](359476 call _value _mt[243] this[126252]))
    unknown call_tmp[655109] "expr temp" "maybe param" "maybe type" "temp"
    (655112 'move' call_tmp[655109](125130 call(125126 call (partial) dsiGetIndices _mt[243] call_tmp[655102])))
    (517165 'move' ret[517160](517164 'deref' call_tmp[655109]))
    (517162 return ret[517160])
  }
  function _domain[125902](?).writeThis[125140](arg _mt[126258]:_MT[238], arg this[126256]:_domain[125902](?), arg f[125138]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655116] "expr temp" "maybe param" "maybe type" "temp"
    (655119 'move' call_tmp[655116](359480 call _value _mt[243] this[126256]))
    (125150 call(125145 call (partial) dsiSerialWrite _mt[243] call_tmp[655116]) f[125138])
    (517167 return _void[55])
  }
  function _domain[125902](?).readThis[125159](arg _mt[126262]:_MT[238], arg this[126260]:_domain[125902](?), arg f[125157]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655125] "expr temp" "maybe param" "maybe type" "temp"
    (655128 'move' call_tmp[655125](359484 call _value _mt[243] this[126260]))
    (125169 call(125164 call (partial) dsiSerialRead _mt[243] call_tmp[655125]) f[125157])
    (517169 return _void[55])
  }
  function _domain[125902](?).localSlice[125180](arg _mt[126266]:_MT[238], arg this[126264]:_domain[125902](?), arg r[125177]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517173] "RVV" "temp"
    unknown call_tmp[655136] "expr temp" "maybe param" "maybe type" "temp"
    (655139 'move' call_tmp[655136](383433 call _value _mt[243] this[126264]))
    unknown call_tmp[655141] "expr temp" "maybe param" "maybe type" "temp"
    (655144 'move' call_tmp[655141](125195 '_wide_get_locale' call_tmp[655136]))
    unknown call_tmp[655146] "expr temp" "maybe param" "maybe type" "temp"
    (655149 'move' call_tmp[655146](125196 call chpl_localeID_to_locale call_tmp[655141]))
    unknown call_tmp[655151] "expr temp" "maybe param" "maybe type" "temp"
    (655154 'move' call_tmp[655151](383436 call here[90435]))
    unknown call_tmp[655156] "expr temp" "maybe param" "maybe type" "temp"
    (655159 'move' call_tmp[655156](125199 call != call_tmp[655146] call_tmp[655151]))
    unknown call_tmp[655161] "expr temp" "maybe param" "maybe type" "temp"
    (655164 'move' call_tmp[655161](125248 call _cond_test call_tmp[655156]))
    if call_tmp[655161]
    {
      unknown call_tmp[655168] "expr temp" "maybe param" "maybe type" "temp"
      (655171 'move' call_tmp[655168](383439 call _value _mt[243] this[126264]))
      unknown call_tmp[655173] "expr temp" "maybe param" "maybe type" "temp"
      (655176 'move' call_tmp[655173](125224 '_wide_get_node' call_tmp[655168]))
      unknown call_tmp[655178] "expr temp" "maybe param" "maybe type" "temp"
      (655181 'move' call_tmp[655178](359491 call here[90435]))
      unknown call_tmp[655185] "expr temp" "maybe param" "maybe type" "temp"
      (655188 'move' call_tmp[655185](125243 call id _mt[243] call_tmp[655178]))
      (125246 call halt "Attempting to take a local slice of a domain on locale " call_tmp[655173] " from locale " call_tmp[655185])
    }
    unknown call_tmp[655190] "expr temp" "maybe param" "maybe type" "temp"
    (655193 'move' call_tmp[655190](125258 call this[126264](125256 'expand_tuple' r[125177])))
    (517178 'move' ret[517173](517177 'deref' call_tmp[655190]))
    (517175 return ret[517173])
  }
  where {
    unknown tmp[424795] "maybe param" "temp"
    (424806 'move' tmp[424795](125185 call chpl__isTupleOfRanges r[125177]))
    unknown call_tmp[655195] "expr temp" "maybe param" "maybe type" "temp"
    (655198 'move' call_tmp[655195](424808 call _cond_invalid tmp[424795]))
    if call_tmp[655195]
    {
      (424811 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565368] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565369] "maybe param" "temp"
    unknown call_tmp[655200] "expr temp" "maybe param" "maybe type" "temp"
    (655203 'move' call_tmp[655200](424796 call isTrue tmp[424795]))
    (565374 'move' tmp[565369](565372 call _cond_test call_tmp[655200]))
    if tmp[565369]
    {
      unknown tmp[565376] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655207] "expr temp" "maybe param" "maybe type" "temp"
      (655210 'move' call_tmp[655207](359488 call _value _mt[243] this[126264]))
      unknown call_tmp[655214] "expr temp" "maybe param" "maybe type" "temp"
      (655217 'move' call_tmp[655214](125191 call(125187 call (partial) isDefaultRectangular _mt[243] call_tmp[655207])))
      (565378 'move' tmp[565376](424799 call isTrue call_tmp[655214]))
      (565383 'move' tmp[565368](565380 '_paramFoldLogical' tmp[565369] tmp[565376]))
    }
    {
      (565388 'move' tmp[565368](565385 '_paramFoldLogical' tmp[565369] 0))
    }
    (748177 call chpl_statementLevelSymbol tmp[565368])
  }
  function _domain[125902](?).localSlice[125270](arg _mt[126270]:_MT[238], arg this[126268]:_domain[125902](?), arg r[125267]:_any[178](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517182] "RVV" "temp"
    unknown call_tmp[655223] "expr temp" "maybe param" "maybe type" "temp"
    (655226 'move' call_tmp[655223](359498 call _value _mt[243] this[126268]))
    unknown call_tmp[655230] "expr temp" "maybe param" "maybe type" "temp"
    (655233 'move' call_tmp[655230](125295 call chpl__anyStridable r[125267]))
    unknown call_tmp[655235] "expr temp" "maybe param" "maybe type" "temp"
    (655238 'move' call_tmp[655235](125298 call(125289 call (partial) dsiLocalSlice _mt[243] call_tmp[655223]) call_tmp[655230] r[125267]))
    (517187 'move' ret[517182](517186 'deref' call_tmp[655235]))
    (517184 return ret[517182])
  }
  where {
    unknown tmp[424816] "maybe param" "temp"
    (424827 'move' tmp[424816](125275 call chpl__isTupleOfRanges r[125267]))
    unknown call_tmp[655240] "expr temp" "maybe param" "maybe type" "temp"
    (655243 'move' call_tmp[655240](424829 call _cond_invalid tmp[424816]))
    if call_tmp[655240]
    {
      (424832 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565395] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565396] "maybe param" "temp"
    unknown call_tmp[655245] "expr temp" "maybe param" "maybe type" "temp"
    (655248 'move' call_tmp[655245](424817 call isTrue tmp[424816]))
    (565401 'move' tmp[565396](565399 call _cond_test call_tmp[655245]))
    if tmp[565396]
    {
      unknown tmp[565403] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655252] "expr temp" "maybe param" "maybe type" "temp"
      (655255 'move' call_tmp[655252](359494 call _value _mt[243] this[126268]))
      unknown call_tmp[655259] "expr temp" "maybe param" "maybe type" "temp"
      (655262 'move' call_tmp[655259](125281 call(125277 call (partial) isDefaultRectangular _mt[243] call_tmp[655252])))
      unknown call_tmp[655264] "expr temp" "maybe param" "maybe type" "temp"
      (655267 'move' call_tmp[655264](125282 call ! call_tmp[655259]))
      (565405 'move' tmp[565403](424820 call isTrue call_tmp[655264]))
      (565410 'move' tmp[565395](565407 '_paramFoldLogical' tmp[565396] tmp[565403]))
    }
    {
      (565415 'move' tmp[565395](565412 '_paramFoldLogical' tmp[565396] 0))
    }
    (748179 call chpl_statementLevelSymbol tmp[565395])
  }
  function _domain[125902](?).localSlice[125311](arg _mt[126274]:_MT[238], arg this[126272]:_domain[125902](?), arg d[125308]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517191] "RVV" "temp"
    unknown call_tmp[655273] "expr temp" "maybe param" "maybe type" "temp"
    (655276 'move' call_tmp[655273](125319 call(125315 call (partial) getIndices _mt[243] d[125308])))
    unknown call_tmp[655278] "expr temp" "maybe param" "maybe type" "temp"
    (655281 'move' call_tmp[655278](125322 call(383453 call (partial) localSlice _mt[243] this[126272])(125320 'expand_tuple' call_tmp[655273])))
    (517196 'move' ret[517191](517195 'deref' call_tmp[655278]))
    (517193 return ret[517191])
  }
  function _domain[125902](?).sorted[125339](arg _mt[126278]:_MT[238], arg this[126276]:_domain[125902](?), arg comparator[125335]:_any[178](?) :
  (748726 call chpl_defaultComparator) =
  (125334 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517200] "RVV" "temp"
    {
      unknown _indexOfInterest[125355] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125356] "expr temp" "temp"
      unknown call_tmp[655285] "expr temp" "maybe param" "maybe type" "temp"
      (655288 'move' call_tmp[655285](359503 call _value _mt[243] this[126276]))
      unknown call_tmp[655292] "expr temp" "maybe param" "maybe type" "temp"
      (655295 'move' call_tmp[655292](125350 call(125345 call (partial) dsiSorted _mt[243] call_tmp[655285]) comparator[125335]))
      (125365 'move' _iterator[125356](125363 call _getIterator call_tmp[655292]))
      Defer
      {
        {
          (125382 call _freeIterator _iterator[125356])
        }
      }
      { scopeless type
        (125371 'move' _indexOfInterest[125355](125368 call iteratorIndex _iterator[125356]))
      }
      ForLoop[125357]
      {
        unknown i[125375] "index var" "insert auto destroy"
        (479786 'end of statement')
        (125377 'move' i[125375] _indexOfInterest[125355])
        (479787 'end of statement' i[125375])
        {
          unknown yret[517204] "YVV" "temp"
          (517207 'move' yret[517204](517206 'deref' i[125375]))
          (517209 yield yret[517204])
          (479789 'end of statement' i[125375])
        }
        label _continueLabel[125360]
        _indexOfInterest[125355]
        _iterator[125356]
      }
      label _breakLabel[125361]
    }
    (517202 return ret[517200])
  }
  function _domain[125902](?).displayRepresentation[125394](arg _mt[126282]:_MT[238], arg this[126280]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655299] "expr temp" "maybe param" "maybe type" "temp"
    (655302 'move' call_tmp[655299](359507 call _value _mt[243] this[126280]))
    (125401 call(125397 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[655299]))
    (517211 return _void[55])
  }
  function _domain[125902](?).defaultSparseDist[125408](arg _mt[126286]:_MT[238], arg this[126284]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[517215] "RVV" "temp"
    unknown call_tmp[655308] "expr temp" "maybe param" "maybe type" "temp"
    (655311 'move' call_tmp[655308](359511 call _value _mt[243] this[126284]))
    unknown call_tmp[655315] "expr temp" "maybe param" "maybe type" "temp"
    (655318 'move' call_tmp[655315](125412 call dist _mt[243] call_tmp[655308]))
    unknown call_tmp[655320] "expr temp" "maybe param" "maybe type" "temp"
    (655323 'move' call_tmp[655320](125416 call _getDistribution call_tmp[655315]))
    (517220 'move' ret[517215](517219 'deref' call_tmp[655320]))
    (517217 return ret[517215])
  }
  function _domain[125902](?).safeCast[125428](arg _mt[126290]:_MT[238], arg this[126288]:_domain[125902](?), arg t[125425]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517224] "RVV" "temp"
    const tmpD[125441] "dead at end of block" "const" "insert auto destroy"
    (542810 'default init var' tmpD[125441] t[125425])
    (125444 'end of statement')
    unknown call_tmp[655327] "expr temp" "maybe param" "maybe type" "temp"
    (655330 'move' call_tmp[655327](125447 call rank _mt[243] tmpD[125441]))
    unknown call_tmp[655334] "expr temp" "maybe param" "maybe type" "temp"
    (655337 'move' call_tmp[655334](125451 call rank _mt[243] this[126288]))
    unknown call_tmp[655339] "expr temp" "maybe param" "maybe type" "temp"
    (655342 'move' call_tmp[655339](125454 call != call_tmp[655327] call_tmp[655334]))
    unknown call_tmp[655344] "expr temp" "maybe param" "maybe type" "temp"
    (655347 'move' call_tmp[655344](125477 call _cond_test call_tmp[655339]))
    if call_tmp[655344]
    {
      (125475 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655351] "expr temp" "maybe param" "maybe type" "temp"
    (655354 'move' call_tmp[655351](125483 call idxType _mt[243] tmpD[125441]))
    unknown call_tmp[655358] "expr temp" "maybe param" "maybe type" "temp"
    (655361 'move' call_tmp[655358](125487 call idxType _mt[243] this[126288]))
    unknown call_tmp[655363] "expr temp" "maybe param" "maybe type" "temp"
    (655366 'move' call_tmp[655363](125490 call != call_tmp[655351] call_tmp[655358]))
    unknown call_tmp[655368] "expr temp" "maybe param" "maybe type" "temp"
    (655371 'move' call_tmp[655368](125513 call _cond_test call_tmp[655363]))
    if call_tmp[655368]
    {
      (125511 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655375] "expr temp" "maybe param" "maybe type" "temp"
    (655378 'move' call_tmp[655375](125519 call stridable _mt[243] tmpD[125441]))
    unknown call_tmp[655382] "expr temp" "maybe param" "maybe type" "temp"
    (655385 'move' call_tmp[655382](125523 call stridable _mt[243] this[126288]))
    unknown call_tmp[655387] "expr temp" "maybe param" "maybe type" "temp"
    (655390 'move' call_tmp[655387](125526 call == call_tmp[655375] call_tmp[655382]))
    unknown call_tmp[655392] "expr temp" "maybe param" "maybe type" "temp"
    (655395 'move' call_tmp[655392](125707 call _cond_test call_tmp[655387]))
    if call_tmp[655392]
    {
      (517229 'move' ret[517224](517228 'deref' this[126288]))
      gotoReturn _end_safeCast[517222] _end_safeCast[517222]
    }
    {
      unknown tmp[424858] "maybe param" "temp"
      unknown call_tmp[655399] "expr temp" "maybe param" "maybe type" "temp"
      (655402 'move' call_tmp[655399](125532 call stridable _mt[243] tmpD[125441]))
      (424869 'move' tmp[424858](125535 call ! call_tmp[655399]))
      unknown call_tmp[655404] "expr temp" "maybe param" "maybe type" "temp"
      (655407 'move' call_tmp[655404](424871 call _cond_invalid tmp[424858]))
      if call_tmp[655404]
      {
        (424874 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565422] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565423] "maybe param" "temp"
      unknown call_tmp[655409] "expr temp" "maybe param" "maybe type" "temp"
      (655412 'move' call_tmp[655409](424859 call isTrue tmp[424858]))
      (565428 'move' tmp[565423](565426 call _cond_test call_tmp[655409]))
      if tmp[565423]
      {
        unknown tmp[565430] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655416] "expr temp" "maybe param" "maybe type" "temp"
        (655419 'move' call_tmp[655416](125538 call stridable _mt[243] this[126288]))
        (565432 'move' tmp[565430](424862 call isTrue call_tmp[655416]))
        (565437 'move' tmp[565422](565434 '_paramFoldLogical' tmp[565423] tmp[565430]))
      }
      {
        (565442 'move' tmp[565422](565439 '_paramFoldLogical' tmp[565423] 0))
      }
      unknown call_tmp[655421] "expr temp" "maybe param" "maybe type" "temp"
      (655424 'move' call_tmp[655421](125703 call _cond_test tmp[565422]))
      if call_tmp[655421]
      {
        unknown call_tmp[655428] "maybe param" "maybe type" "temp"
        (655431 'move' call_tmp[655428](125548 call(125544 call (partial) getIndices _mt[243] this[126288])))
        const inds[125549] "dead at end of block" "const" "insert auto destroy"
        (542812 'init var' inds[125549] call_tmp[655428])
        (125552 'end of statement')
        unknown unstridableInds[125566] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655435] "expr temp" "maybe param" "maybe type" "temp"
        (655438 'move' call_tmp[655435](383464 call rank _mt[243] this[126288]))
        unknown call_tmp[655442] "expr temp" "maybe param" "maybe type" "temp"
        (655445 'move' call_tmp[655442](125557 call idxType _mt[243] tmpD[125441]))
        unknown call_tmp[655447] "expr temp" "maybe param" "maybe type" "temp"
        (655450 'move' call_tmp[655447](125563 call range[64316](?) call_tmp[655442](stridable = 0)))
        unknown call_tmp[655452] "expr temp" "maybe param" "maybe type" "temp"
        (655455 'move' call_tmp[655452](125564 call * call_tmp[655435] call_tmp[655447]))
        (542814 'default init var' unstridableInds[125566] call_tmp[655452])
        (125569 'end of statement' tmpD[125441])
        {
          unknown dim[125643] "dead at end of block" "insert auto destroy"
          (542816 'init var' dim[125643] 0)
          (479798 'end of statement')
          unknown tmp[125644] "maybe param" "temp"
          unknown call_tmp[655459] "expr temp" "maybe param" "maybe type" "temp"
          (655462 'move' call_tmp[655459](125572 call size _mt[243] inds[125549]))
          unknown call_tmp[655464] "expr temp" "maybe param" "maybe type" "temp"
          (655467 'move' call_tmp[655464](125576 call - call_tmp[655459] 1))
          (125656 'move' tmp[125644](125654 call chpl_compute_low_param_loop_bound 0 call_tmp[655464]))
          unknown tmp[125645] "maybe param" "temp"
          unknown call_tmp[655471] "expr temp" "maybe param" "maybe type" "temp"
          (655474 'move' call_tmp[655471](125663 call size _mt[243] inds[125549]))
          unknown call_tmp[655476] "expr temp" "maybe param" "maybe type" "temp"
          (655479 'move' call_tmp[655476](125661 call - call_tmp[655471] 1))
          (125669 'move' tmp[125645](125667 call chpl_compute_high_param_loop_bound 0 call_tmp[655476]))
          unknown tmp[125646] "maybe param" "temp"
          (125672 'move' tmp[125646] 1)
          ParamForLoop[125674]
          { dim[125643] tmp[125644] tmp[125645] tmp[125646]
            {
              unknown call_tmp[655481] "expr temp" "maybe param" "maybe type" "temp"
              (655484 'move' call_tmp[655481](125583 call inds[125549] dim[125643]))
              unknown call_tmp[655488] "expr temp" "maybe param" "maybe type" "temp"
              (655491 'move' call_tmp[655488](125584 call stride _mt[243] call_tmp[655481]))
              unknown call_tmp[655493] "expr temp" "maybe param" "maybe type" "temp"
              (655496 'move' call_tmp[655493](125588 call != call_tmp[655488] 1))
              unknown call_tmp[655498] "expr temp" "maybe param" "maybe type" "temp"
              (655501 'move' call_tmp[655498](125612 call _cond_test call_tmp[655493]))
              if call_tmp[655498]
              {
                (125610 call halt "non-stridable domain assigned non-unit stride in dimension " dim[125643])
                (479799 'end of statement' dim[125643])
              }
              unknown call_tmp[655503] "expr temp" "maybe param" "maybe type" "temp"
              (655506 'move' call_tmp[655503](125621 call unstridableInds[125566] dim[125643]))
              unknown call_tmp[655508] "expr temp" "maybe param" "maybe type" "temp"
              (655511 'move' call_tmp[655508](125625 call inds[125549] dim[125643]))
              unknown call_tmp[655517] "expr temp" "maybe param" "maybe type" "temp"
              (655520 'move' call_tmp[655517](125631 call idxType _mt[243] tmpD[125441]))
              unknown call_tmp[655522] "expr temp" "maybe param" "maybe type" "temp"
              (655525 'move' call_tmp[655522](125637 call range[64316](?) call_tmp[655517](stridable = 0)))
              unknown call_tmp[655527] "expr temp" "maybe param" "maybe type" "temp"
              (655530 'move' call_tmp[655527](125639 call(125626 call (partial) safeCast _mt[243] call_tmp[655508]) call_tmp[655522]))
              (125640 call = call_tmp[655503] call_tmp[655527])
              (479801 'end of statement' unstridableInds[125566] dim[125643] inds[125549] dim[125643] tmpD[125441])
            }
          }
          label _unused_continueLabel[125648]
          label _breakLabel[125647]
        }
        (125689 call(125684 call (partial) setIndices _mt[243] tmpD[125441]) unstridableInds[125566])
        (479807 'end of statement' tmpD[125441] unstridableInds[125566])
        (517234 'move' ret[517224](517233 'deref' tmpD[125441]))
        gotoReturn _end_safeCast[517222] _end_safeCast[517222]
        (479810 'end of statement' tmpD[125441])
      }
      {
        (125696 call = tmpD[125441] this[126288])
        (479812 'end of statement' tmpD[125441])
        (517239 'move' ret[517224](517238 'deref' tmpD[125441]))
        gotoReturn _end_safeCast[517222] _end_safeCast[517222]
        (479814 'end of statement' tmpD[125441])
      }
    }
    label _end_safeCast[517222]
    (517226 return ret[517224])
  }
  where {
    unknown tmp[424837] "maybe param" "temp"
    (424848 'move' tmp[424837](125433 call chpl__isRectangularDomType t[125425]))
    unknown call_tmp[655534] "expr temp" "maybe param" "maybe type" "temp"
    (655537 'move' call_tmp[655534](424850 call _cond_invalid tmp[424837]))
    if call_tmp[655534]
    {
      (424853 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565449] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565450] "maybe param" "temp"
    unknown call_tmp[655539] "expr temp" "maybe param" "maybe type" "temp"
    (655542 'move' call_tmp[655539](424838 call isTrue tmp[424837]))
    (565455 'move' tmp[565450](565453 call _cond_test call_tmp[655539]))
    if tmp[565450]
    {
      unknown tmp[565457] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655544] "expr temp" "maybe param" "maybe type" "temp"
      (655547 'move' call_tmp[655544](125437 call isRectangularDom this[126288]))
      (565459 'move' tmp[565457](424841 call isTrue call_tmp[655544]))
      (565464 'move' tmp[565449](565461 '_paramFoldLogical' tmp[565450] tmp[565457]))
    }
    {
      (565469 'move' tmp[565449](565466 '_paramFoldLogical' tmp[565450] 0))
    }
    (748181 call chpl_statementLevelSymbol tmp[565449])
  }
  function _domain[125902](?).targetLocales[125718](arg _mt[126294]:_MT[238], arg this[126292]:_domain[125902](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517245] "RVV" "temp"
    unknown call_tmp[655551] "expr temp" "maybe param" "maybe type" "temp"
    (655554 'move' call_tmp[655551](359529 call _value _mt[243] this[126292]))
    unknown call_tmp[655558] "expr temp" "maybe param" "maybe type" "temp"
    (655561 'move' call_tmp[655558](125725 call(125721 call (partial) dsiTargetLocales _mt[243] call_tmp[655551])))
    (517250 'move' ret[517245](517249 'deref' call_tmp[655558]))
    (517247 return ret[517245])
  }
  function _domain[125902](?).hasSingleLocalSubdomain[125733](arg _mt[126298]:_MT[238], arg this[126296]:_domain[125902](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517254] "RVV" "param" "temp"
    unknown call_tmp[655565] "expr temp" "maybe param" "maybe type" "temp"
    (655568 'move' call_tmp[655565](359533 call _value _mt[243] this[126296]))
    unknown call_tmp[655572] "expr temp" "maybe param" "maybe type" "temp"
    (655575 'move' call_tmp[655572](125742 call(125738 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655565])))
    (517259 'move' ret[517254](517258 'deref' call_tmp[655572]))
    (517256 return ret[517254])
  }
  function _domain[125902](?).localSubdomain[125756](arg _mt[126302]:_MT[238], arg this[126300]:_domain[125902](?), arg loc[125752]:locale[28] =
  (383481 call here[90435])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517263] "RVV" "temp"
    unknown call_tmp[655579] "expr temp" "maybe param" "maybe type" "temp"
    (655582 'move' call_tmp[655579](359537 call _value _mt[243] this[126300]))
    unknown call_tmp[655586] "expr temp" "maybe param" "maybe type" "temp"
    (655589 'move' call_tmp[655586](125763 call(125759 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655579])))
    unknown call_tmp[655591] "expr temp" "maybe param" "maybe type" "temp"
    (655594 'move' call_tmp[655591](125764 call ! call_tmp[655586]))
    unknown call_tmp[655596] "expr temp" "maybe param" "maybe type" "temp"
    (655599 'move' call_tmp[655596](125787 call _cond_test call_tmp[655591]))
    if call_tmp[655596]
    {
      (125785 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[655603] "expr temp" "maybe param" "maybe type" "temp"
    (655606 'move' call_tmp[655603](359541 call _value _mt[243] this[126300]))
    unknown call_tmp[655610] "expr temp" "maybe param" "maybe type" "temp"
    (655613 'move' call_tmp[655610](125801 call(125796 call (partial) dsiLocalSubdomain _mt[243] call_tmp[655603]) loc[125752]))
    (517268 'move' ret[517263](517267 'deref' call_tmp[655610]))
    (517265 return ret[517263])
  }
  function _domain[125902](?).localSubdomains[125814](arg _mt[126306]:_MT[238], arg this[126304]:_domain[125902](?), arg loc[125810]:locale[28] =
  (383484 call here[90435])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517272] "RVV" "temp"
    unknown call_tmp[655617] "expr temp" "maybe param" "maybe type" "temp"
    (655620 'move' call_tmp[655617](359545 call _value _mt[243] this[126304]))
    unknown call_tmp[655624] "expr temp" "maybe param" "maybe type" "temp"
    (655627 'move' call_tmp[655624](125821 call(125817 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655617])))
    unknown call_tmp[655629] "expr temp" "maybe param" "maybe type" "temp"
    (655632 'move' call_tmp[655629](125877 call _cond_test call_tmp[655624]))
    if call_tmp[655629]
    {
      unknown yret[517276] "YVV" "temp"
      unknown call_tmp[655636] "expr temp" "maybe param" "maybe type" "temp"
      (655639 'move' call_tmp[655636](125825 call(383487 call (partial) localSubdomain _mt[243] this[126304]) loc[125810]))
      (517279 'move' yret[517276](517278 'deref' call_tmp[655636]))
      (517281 yield yret[517276])
    }
    {
      {
        unknown _indexOfInterest[125842] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[125843] "expr temp" "temp"
        unknown call_tmp[655643] "expr temp" "maybe param" "maybe type" "temp"
        (655646 'move' call_tmp[655643](359549 call _value _mt[243] this[126304]))
        unknown call_tmp[655650] "expr temp" "maybe param" "maybe type" "temp"
        (655653 'move' call_tmp[655650](125838 call(125833 call (partial) dsiLocalSubdomains _mt[243] call_tmp[655643]) loc[125810]))
        (125852 'move' _iterator[125843](125850 call _getIterator call_tmp[655650]))
        Defer
        {
          {
            (125869 call _freeIterator _iterator[125843])
          }
        }
        { scopeless type
          (125858 'move' _indexOfInterest[125842](125855 call iteratorIndex _iterator[125843]))
        }
        ForLoop[125844]
        {
          unknown d[125862] "index var" "insert auto destroy"
          (479822 'end of statement')
          (125864 'move' d[125862] _indexOfInterest[125842])
          (479823 'end of statement' d[125862])
          unknown yret[517283] "YVV" "temp"
          (517286 'move' yret[517283](517285 'deref' d[125862]))
          (517288 yield yret[517283])
          (479825 'end of statement' d[125862])
          label _continueLabel[125847]
          _indexOfInterest[125842]
          _iterator[125843]
        }
        label _breakLabel[125848]
      }
    }
    (517274 return ret[517272])
  }
  function _domain[125902](?).supportsAutoLocalAccess[125886](arg _mt[126310]:_MT[238], arg this[126308]:_domain[125902](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517292] "RVV" "param" "temp"
    unknown call_tmp[655657] "expr temp" "maybe param" "maybe type" "temp"
    (655660 'move' call_tmp[655657](359553 call _value _mt[243] this[126308]))
    unknown call_tmp[655664] "expr temp" "maybe param" "maybe type" "temp"
    (655667 'move' call_tmp[655664](125895 call(125891 call (partial) dsiSupportsAutoLocalAccess _mt[243] call_tmp[655657])))
    (517297 'move' ret[517292](517296 'deref' call_tmp[655664]))
    (517294 return ret[517292])
  }
  function _domain[125902](?)._pid[799687](arg _mt[799689]:_MT[238], ref arg this[799691]:_domain[125902](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799701] "RVV" "temp"
    unknown call_tmp[799708] "expr temp" "maybe param" "maybe type" "temp"
    (799711 'move' call_tmp[799708](799695 '.' this[799691] c"_pid"))
    (799706 'move' ret[799701](799705 'addr of' call_tmp[799708]))
    (799703 return ret[799701])
  }
  function _domain[125902](?)._instance[799713](arg _mt[799715]:_MT[238], ref arg this[799717]:_domain[125902](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799727] "RVV" "temp"
    unknown call_tmp[799734] "expr temp" "maybe param" "maybe type" "temp"
    (799737 'move' call_tmp[799734](799721 '.' this[799717] c"_instance"))
    (799732 'move' ret[799727](799731 'addr of' call_tmp[799734]))
    (799729 return ret[799727])
  }
  function _domain[125902](?)._unowned[799739](arg _mt[799741]:_MT[238], ref arg this[799743]:_domain[125902](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799753] "RVV" "temp"
    unknown call_tmp[799760] "expr temp" "maybe param" "maybe type" "temp"
    (799763 'move' call_tmp[799760](799747 '.' this[799743] c"_unowned"))
    (799758 'move' ret[799753](799757 'addr of' call_tmp[799760]))
    (799755 return ret[799753])
  }
  function chpl__defaultHash[799765](arg r[799767]:_domain[125902](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[799798] "RVV" "temp"
    unknown call_tmp[799805] "expr temp" "maybe param" "maybe type" "temp"
    (799808 'move' call_tmp[799805](799784 call _unowned _mt[243] r[799767]))
    unknown call_tmp[799810] "expr temp" "maybe param" "maybe type" "temp"
    (799813 'move' call_tmp[799810](799788 call chpl__defaultHash call_tmp[799805]))
    unknown call_tmp[799815] "expr temp" "maybe param" "maybe type" "temp"
    (799818 'move' call_tmp[799815](799775 call _instance _mt[243] r[799767]))
    unknown call_tmp[799820] "expr temp" "maybe param" "maybe type" "temp"
    (799823 'move' call_tmp[799820](799779 call chpl__defaultHash call_tmp[799815]))
    unknown call_tmp[799825] "expr temp" "maybe param" "maybe type" "temp"
    (799828 'move' call_tmp[799825](799769 call _pid _mt[243] r[799767]))
    unknown call_tmp[799830] "expr temp" "maybe param" "maybe type" "temp"
    (799833 'move' call_tmp[799830](799773 call chpl__defaultHash call_tmp[799825]))
    unknown call_tmp[799835] "expr temp" "maybe param" "maybe type" "temp"
    (799838 'move' call_tmp[799835](799781 call chpl__defaultHashCombine call_tmp[799820] call_tmp[799830] 2))
    unknown call_tmp[799840] "expr temp" "maybe param" "maybe type" "temp"
    (799843 'move' call_tmp[799840](799790 call chpl__defaultHashCombine call_tmp[799810] call_tmp[799835] 3))
    (799803 'move' ret[799798](799802 'deref' call_tmp[799840]))
    (799800 return ret[799798])
  }
  type _domain[125902](?) val _pid[119161]:int(64)[13] int(64)[13] unknown _instance[119165] "owned" val _unowned[119170]:bool[10] bool[10] forwarding ( )
  function _cast[126319](arg t[126316]:_domain[125902](?), arg d[126322]:_domain[125902](?)) : _unknown[51] "no doc"
  {
    unknown ret[517301] "RVV" "temp"
    const tmpD[126336] "dead at end of block" "const" "insert auto destroy"
    (542818 'default init var' tmpD[126336] t[126316])
    (126339 'end of statement')
    unknown call_tmp[655671] "expr temp" "maybe param" "maybe type" "temp"
    (655674 'move' call_tmp[655671](126342 call rank _mt[243] tmpD[126336]))
    unknown call_tmp[655678] "expr temp" "maybe param" "maybe type" "temp"
    (655681 'move' call_tmp[655678](126346 call rank _mt[243] d[126322]))
    unknown call_tmp[655683] "expr temp" "maybe param" "maybe type" "temp"
    (655686 'move' call_tmp[655683](126349 call != call_tmp[655671] call_tmp[655678]))
    unknown call_tmp[655688] "expr temp" "maybe param" "maybe type" "temp"
    (655691 'move' call_tmp[655688](126356 call _cond_test call_tmp[655683]))
    if call_tmp[655688]
    {
      (126354 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655695] "expr temp" "maybe param" "maybe type" "temp"
    (655698 'move' call_tmp[655695](126362 call idxType _mt[243] tmpD[126336]))
    unknown call_tmp[655702] "expr temp" "maybe param" "maybe type" "temp"
    (655705 'move' call_tmp[655702](126366 call idxType _mt[243] d[126322]))
    unknown call_tmp[655707] "expr temp" "maybe param" "maybe type" "temp"
    (655710 'move' call_tmp[655707](126369 call != call_tmp[655695] call_tmp[655702]))
    unknown call_tmp[655712] "expr temp" "maybe param" "maybe type" "temp"
    (655715 'move' call_tmp[655712](126376 call _cond_test call_tmp[655707]))
    if call_tmp[655712]
    {
      (126374 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655719] "expr temp" "maybe param" "maybe type" "temp"
    (655722 'move' call_tmp[655719](126382 call stridable _mt[243] tmpD[126336]))
    unknown call_tmp[655726] "expr temp" "maybe param" "maybe type" "temp"
    (655729 'move' call_tmp[655726](126386 call stridable _mt[243] d[126322]))
    unknown call_tmp[655731] "expr temp" "maybe param" "maybe type" "temp"
    (655734 'move' call_tmp[655731](126389 call == call_tmp[655719] call_tmp[655726]))
    unknown call_tmp[655736] "expr temp" "maybe param" "maybe type" "temp"
    (655739 'move' call_tmp[655736](126533 call _cond_test call_tmp[655731]))
    if call_tmp[655736]
    {
      (517306 'move' ret[517301](517305 'deref' d[126322]))
      gotoReturn _end__cast[517299] _end__cast[517299]
    }
    {
      unknown tmp[424900] "maybe param" "temp"
      unknown call_tmp[655743] "expr temp" "maybe param" "maybe type" "temp"
      (655746 'move' call_tmp[655743](126395 call stridable _mt[243] tmpD[126336]))
      (424911 'move' tmp[424900](126398 call ! call_tmp[655743]))
      unknown call_tmp[655748] "expr temp" "maybe param" "maybe type" "temp"
      (655751 'move' call_tmp[655748](424913 call _cond_invalid tmp[424900]))
      if call_tmp[655748]
      {
        (424916 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565476] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565477] "maybe param" "temp"
      unknown call_tmp[655753] "expr temp" "maybe param" "maybe type" "temp"
      (655756 'move' call_tmp[655753](424901 call isTrue tmp[424900]))
      (565482 'move' tmp[565477](565480 call _cond_test call_tmp[655753]))
      if tmp[565477]
      {
        unknown tmp[565484] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655760] "expr temp" "maybe param" "maybe type" "temp"
        (655763 'move' call_tmp[655760](126401 call stridable _mt[243] d[126322]))
        (565486 'move' tmp[565484](424904 call isTrue call_tmp[655760]))
        (565491 'move' tmp[565476](565488 '_paramFoldLogical' tmp[565477] tmp[565484]))
      }
      {
        (565496 'move' tmp[565476](565493 '_paramFoldLogical' tmp[565477] 0))
      }
      unknown call_tmp[655765] "expr temp" "maybe param" "maybe type" "temp"
      (655768 'move' call_tmp[655765](126529 call _cond_test tmp[565476]))
      if call_tmp[655765]
      {
        unknown call_tmp[655772] "maybe param" "maybe type" "temp"
        (655775 'move' call_tmp[655772](126411 call(126407 call (partial) getIndices _mt[243] d[126322])))
        unknown inds[126412] "dead at end of block" "insert auto destroy"
        (542820 'init var' inds[126412] call_tmp[655772])
        (126415 'end of statement')
        unknown unstridableInds[126432] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655779] "expr temp" "maybe param" "maybe type" "temp"
        (655782 'move' call_tmp[655779](126418 call rank _mt[243] d[126322]))
        unknown call_tmp[655786] "expr temp" "maybe param" "maybe type" "temp"
        (655789 'move' call_tmp[655786](126423 call idxType _mt[243] tmpD[126336]))
        unknown call_tmp[655791] "expr temp" "maybe param" "maybe type" "temp"
        (655794 'move' call_tmp[655791](126429 call range[64316](?) call_tmp[655786](stridable = 0)))
        unknown call_tmp[655796] "expr temp" "maybe param" "maybe type" "temp"
        (655799 'move' call_tmp[655796](126430 call * call_tmp[655779] call_tmp[655791]))
        (542822 'default init var' unstridableInds[126432] call_tmp[655796])
        (126435 'end of statement' tmpD[126336])
        {
          unknown i[126469] "dead at end of block" "insert auto destroy"
          (542824 'init var' i[126469] 0)
          (479833 'end of statement')
          unknown tmp[126470] "maybe param" "temp"
          unknown call_tmp[655803] "expr temp" "maybe param" "maybe type" "temp"
          (655806 'move' call_tmp[655803](126438 call rank _mt[243] tmpD[126336]))
          unknown call_tmp[655808] "expr temp" "maybe param" "maybe type" "temp"
          (655811 'move' call_tmp[655808](126442 call - call_tmp[655803] 1))
          (126482 'move' tmp[126470](126480 call chpl_compute_low_param_loop_bound 0 call_tmp[655808]))
          unknown tmp[126471] "maybe param" "temp"
          unknown call_tmp[655815] "expr temp" "maybe param" "maybe type" "temp"
          (655818 'move' call_tmp[655815](126489 call rank _mt[243] tmpD[126336]))
          unknown call_tmp[655820] "expr temp" "maybe param" "maybe type" "temp"
          (655823 'move' call_tmp[655820](126487 call - call_tmp[655815] 1))
          (126495 'move' tmp[126471](126493 call chpl_compute_high_param_loop_bound 0 call_tmp[655820]))
          unknown tmp[126472] "maybe param" "temp"
          (126498 'move' tmp[126472] 1)
          ParamForLoop[126500]
          { i[126469] tmp[126470] tmp[126471] tmp[126472]
            {
              unknown call_tmp[655825] "expr temp" "maybe param" "maybe type" "temp"
              (655828 'move' call_tmp[655825](126449 call unstridableInds[126432] i[126469]))
              unknown call_tmp[655832] "expr temp" "maybe param" "maybe type" "temp"
              (655835 'move' call_tmp[655832](126456 call idxType _mt[243] tmpD[126336]))
              unknown call_tmp[655837] "expr temp" "maybe param" "maybe type" "temp"
              (655840 'move' call_tmp[655837](126462 call range[64316](?) call_tmp[655832](stridable = 0)))
              unknown call_tmp[655842] "expr temp" "maybe param" "maybe type" "temp"
              (655845 'move' call_tmp[655842](126453 call inds[126412] i[126469]))
              unknown call_tmp[655847] "expr temp" "maybe param" "maybe type" "temp"
              (655850 'move' call_tmp[655847](126463 call _cast call_tmp[655837] call_tmp[655842]))
              (126465 call = call_tmp[655825] call_tmp[655847])
              (479834 'end of statement' unstridableInds[126432] i[126469] tmpD[126336] inds[126412] i[126469])
            }
          }
          label _unused_continueLabel[126474]
          label _breakLabel[126473]
        }
        (126515 call(126510 call (partial) setIndices _mt[243] tmpD[126336]) unstridableInds[126432])
        (479840 'end of statement' tmpD[126336] unstridableInds[126432])
        (517311 'move' ret[517301](517310 'deref' tmpD[126336]))
        gotoReturn _end__cast[517299] _end__cast[517299]
        (479843 'end of statement' tmpD[126336])
      }
      {
        (126522 call = tmpD[126336] d[126322])
        (479845 'end of statement' tmpD[126336])
        (517316 'move' ret[517301](517315 'deref' tmpD[126336]))
        gotoReturn _end__cast[517299] _end__cast[517299]
        (479847 'end of statement' tmpD[126336])
      }
    }
    label _end__cast[517299]
    (517303 return ret[517301])
  }
  where {
    unknown tmp[424879] "maybe param" "temp"
    (424890 'move' tmp[424879](126328 call chpl__isRectangularDomType t[126316]))
    unknown call_tmp[655854] "expr temp" "maybe param" "maybe type" "temp"
    (655857 'move' call_tmp[655854](424892 call _cond_invalid tmp[424879]))
    if call_tmp[655854]
    {
      (424895 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565503] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565504] "maybe param" "temp"
    unknown call_tmp[655859] "expr temp" "maybe param" "maybe type" "temp"
    (655862 'move' call_tmp[655859](424880 call isTrue tmp[424879]))
    (565509 'move' tmp[565504](565507 call _cond_test call_tmp[655859]))
    if tmp[565504]
    {
      unknown tmp[565511] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655864] "expr temp" "maybe param" "maybe type" "temp"
      (655867 'move' call_tmp[655864](126332 call isRectangularDom d[126322]))
      (565513 'move' tmp[565511](424883 call isTrue call_tmp[655864]))
      (565518 'move' tmp[565503](565515 '_paramFoldLogical' tmp[565504] tmp[565511]))
    }
    {
      (565523 'move' tmp[565503](565520 '_paramFoldLogical' tmp[565504] 0))
    }
    (748183 call chpl_statementLevelSymbol tmp[565503])
  }
  function _cast[126548](arg t[126545]:string[26], arg x[126551]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[517322] "RVV" "temp"
    unknown call_tmp[655869] "expr temp" "maybe param" "maybe type" "temp"
    (655872 'move' call_tmp[655869](126561 call stringify x[126551]))
    (517327 'move' ret[517322](517326 'deref' call_tmp[655869]))
    (517324 return ret[517322])
    (355032 'used modules list'(126555 'use' IO[230803]))
  }
  function chpl_countDomHelp[126570](arg dom[126568]:_any[178](?), arg counts[126572]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517331] "RVV" "temp"
    unknown call_tmp[655876] "maybe param" "maybe type" "temp"
    (655879 'move' call_tmp[655876](126579 call(126575 call (partial) dims _mt[243] dom[126568])))
    unknown ranges[126580] "dead at end of block" "insert auto destroy"
    (542826 'init var' ranges[126580] call_tmp[655876])
    (126583 'end of statement')
    {
      unknown i[126612] "dead at end of block" "insert auto destroy"
      (542828 'init var' i[126612] 0)
      (479850 'end of statement')
      unknown tmp[126613] "maybe param" "temp"
      unknown call_tmp[655883] "expr temp" "maybe param" "maybe type" "temp"
      (655886 'move' call_tmp[655883](126587 call rank _mt[243] dom[126568]))
      unknown call_tmp[655888] "expr temp" "maybe param" "maybe type" "temp"
      (655891 'move' call_tmp[655888](126591 call - call_tmp[655883] 1))
      (126625 'move' tmp[126613](126623 call chpl_compute_low_param_loop_bound 0 call_tmp[655888]))
      unknown tmp[126614] "maybe param" "temp"
      unknown call_tmp[655895] "expr temp" "maybe param" "maybe type" "temp"
      (655898 'move' call_tmp[655895](126632 call rank _mt[243] dom[126568]))
      unknown call_tmp[655900] "expr temp" "maybe param" "maybe type" "temp"
      (655903 'move' call_tmp[655900](126630 call - call_tmp[655895] 1))
      (126638 'move' tmp[126614](126636 call chpl_compute_high_param_loop_bound 0 call_tmp[655900]))
      unknown tmp[126615] "maybe param" "temp"
      (126641 'move' tmp[126615] 1)
      ParamForLoop[126643]
      { i[126612] tmp[126613] tmp[126614] tmp[126615]
        unknown call_tmp[655905] "expr temp" "maybe param" "maybe type" "temp"
        (655908 'move' call_tmp[655905](126598 call ranges[126580] i[126612]))
        unknown call_tmp[655910] "expr temp" "maybe param" "maybe type" "temp"
        (655913 'move' call_tmp[655910](126602 call ranges[126580] i[126612]))
        unknown call_tmp[655915] "expr temp" "maybe param" "maybe type" "temp"
        (655918 'move' call_tmp[655915](126606 call counts[126572] i[126612]))
        unknown call_tmp[655920] "expr temp" "maybe param" "maybe type" "temp"
        (655923 'move' call_tmp[655920](126607 call # call_tmp[655910] call_tmp[655915]))
        (126609 call = call_tmp[655905] call_tmp[655920])
        (479851 'end of statement' ranges[126580] i[126612] ranges[126580] i[126612] i[126612])
      }
      label _unused_continueLabel[126617]
      label _breakLabel[126616]
    }
    unknown call_tmp[655925] "expr temp" "maybe param" "maybe type" "temp"
    (655928 'move' call_tmp[655925](126656 call dom[126568](126654 'expand_tuple' ranges[126580])))
    (517336 'move' ret[517331](517335 'deref' call_tmp[655925]))
    gotoReturn _end_chpl_countDomHelp[517329] _end_chpl_countDomHelp[517329]
    (479857 'end of statement' ranges[126580])
    label _end_chpl_countDomHelp[517329]
    (517333 return ret[517331])
  }
  function #[126667](arg dom[126664]:_domain[125902](?), arg counts[126670]:integral[199](?)) : _unknown[51]
  {
    unknown ret[517342] "RVV" "temp"
    unknown call_tmp[655930] "expr temp" "maybe param" "maybe type" "temp"
    (655933 'move' call_tmp[655930](126690 call _build_tuple counts[126670]))
    unknown call_tmp[655935] "expr temp" "maybe param" "maybe type" "temp"
    (655938 'move' call_tmp[655935](126692 call chpl_countDomHelp dom[126664] call_tmp[655930]))
    (517347 'move' ret[517342](517346 'deref' call_tmp[655935]))
    (517344 return ret[517342])
  }
  where {
    unknown tmp[424921] "maybe param" "temp"
    (424932 'move' tmp[424921](126676 call isRectangularDom dom[126664]))
    unknown call_tmp[655940] "expr temp" "maybe param" "maybe type" "temp"
    (655943 'move' call_tmp[655940](424934 call _cond_invalid tmp[424921]))
    if call_tmp[655940]
    {
      (424937 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565530] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565531] "maybe param" "temp"
    unknown call_tmp[655945] "expr temp" "maybe param" "maybe type" "temp"
    (655948 'move' call_tmp[655945](424922 call isTrue tmp[424921]))
    (565536 'move' tmp[565531](565534 call _cond_test call_tmp[655945]))
    if tmp[565531]
    {
      unknown tmp[565538] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655952] "expr temp" "maybe param" "maybe type" "temp"
      (655955 'move' call_tmp[655952](126678 call rank _mt[243] dom[126664]))
      unknown call_tmp[655957] "expr temp" "maybe param" "maybe type" "temp"
      (655960 'move' call_tmp[655957](126682 call == call_tmp[655952] 1))
      (565540 'move' tmp[565538](424925 call isTrue call_tmp[655957]))
      (565545 'move' tmp[565530](565542 '_paramFoldLogical' tmp[565531] tmp[565538]))
    }
    {
      (565550 'move' tmp[565530](565547 '_paramFoldLogical' tmp[565531] 0))
    }
    (748185 call chpl_statementLevelSymbol tmp[565530])
  }
  function #[126705](arg dom[126702]:_domain[125902](?), arg counts[126707]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517351] "RVV" "temp"
    unknown call_tmp[655964] "expr temp" "maybe param" "maybe type" "temp"
    (655967 'move' call_tmp[655964](126720 call size _mt[243] counts[126707]))
    unknown call_tmp[655971] "expr temp" "maybe param" "maybe type" "temp"
    (655974 'move' call_tmp[655971](126724 call rank _mt[243] dom[126702]))
    unknown call_tmp[655976] "expr temp" "maybe param" "maybe type" "temp"
    (655979 'move' call_tmp[655976](126727 call != call_tmp[655964] call_tmp[655971]))
    unknown call_tmp[655981] "expr temp" "maybe param" "maybe type" "temp"
    (655984 'move' call_tmp[655981](126750 call _cond_test call_tmp[655976]))
    if call_tmp[655981]
    {
      (126748 call compilerError "the domain and tuple arguments of # must have the same rank")
    }
    unknown call_tmp[655986] "expr temp" "maybe param" "maybe type" "temp"
    (655989 'move' call_tmp[655986](126760 call chpl_countDomHelp dom[126702] counts[126707]))
    (517356 'move' ret[517351](517355 'deref' call_tmp[655986]))
    (517353 return ret[517351])
  }
  where {
    unknown tmp[424942] "maybe param" "temp"
    (424953 'move' tmp[424942](126712 call isRectangularDom dom[126702]))
    unknown call_tmp[655991] "expr temp" "maybe param" "maybe type" "temp"
    (655994 'move' call_tmp[655991](424955 call _cond_invalid tmp[424942]))
    if call_tmp[655991]
    {
      (424958 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565557] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565558] "maybe param" "temp"
    unknown call_tmp[655996] "expr temp" "maybe param" "maybe type" "temp"
    (655999 'move' call_tmp[655996](424943 call isTrue tmp[424942]))
    (565563 'move' tmp[565558](565561 call _cond_test call_tmp[655996]))
    if tmp[565558]
    {
      unknown tmp[565565] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656001] "expr temp" "maybe param" "maybe type" "temp"
      (656004 'move' call_tmp[656001](126716 call isTuple counts[126707]))
      (565567 'move' tmp[565565](424946 call isTrue call_tmp[656001]))
      (565572 'move' tmp[565557](565569 '_paramFoldLogical' tmp[565558] tmp[565565]))
    }
    {
      (565577 'move' tmp[565557](565574 '_paramFoldLogical' tmp[565558] 0))
    }
    (748187 call chpl_statementLevelSymbol tmp[565557])
  }
  function #[126774](arg arr[126771]:_array[133588](?), arg counts[126777]:integral[199](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517360] "RVV" "temp"
    unknown call_tmp[656008] "expr temp" "maybe param" "maybe type" "temp"
    (656011 'move' call_tmp[656008](126795 call _dom _mt[243] arr[126771]))
    unknown call_tmp[656013] "expr temp" "maybe param" "maybe type" "temp"
    (656016 'move' call_tmp[656013](126799 call # call_tmp[656008] counts[126777]))
    unknown call_tmp[656018] "expr temp" "maybe param" "maybe type" "temp"
    (656021 'move' call_tmp[656018](126802 call arr[126771] call_tmp[656013]))
    (517365 'move' ret[517360](517364 'deref' call_tmp[656018]))
    (517362 return ret[517360])
  }
  where {
    unknown tmp[424963] "maybe param" "temp"
    (424974 'move' tmp[424963](126783 call isRectangularArr arr[126771]))
    unknown call_tmp[656023] "expr temp" "maybe param" "maybe type" "temp"
    (656026 'move' call_tmp[656023](424976 call _cond_invalid tmp[424963]))
    if call_tmp[656023]
    {
      (424979 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565584] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565585] "maybe param" "temp"
    unknown call_tmp[656028] "expr temp" "maybe param" "maybe type" "temp"
    (656031 'move' call_tmp[656028](424964 call isTrue tmp[424963]))
    (565590 'move' tmp[565585](565588 call _cond_test call_tmp[656028]))
    if tmp[565585]
    {
      unknown tmp[565592] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656035] "expr temp" "maybe param" "maybe type" "temp"
      (656038 'move' call_tmp[656035](126785 call rank _mt[243] arr[126771]))
      unknown call_tmp[656040] "expr temp" "maybe param" "maybe type" "temp"
      (656043 'move' call_tmp[656040](126789 call == call_tmp[656035] 1))
      (565594 'move' tmp[565592](424967 call isTrue call_tmp[656040]))
      (565599 'move' tmp[565584](565596 '_paramFoldLogical' tmp[565585] tmp[565592]))
    }
    {
      (565604 'move' tmp[565584](565601 '_paramFoldLogical' tmp[565585] 0))
    }
    (748189 call chpl_statementLevelSymbol tmp[565584])
  }
  function #[126817](arg arr[126814]:_array[133588](?), arg counts[126819]:_any[178](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517369] "RVV" "temp"
    unknown call_tmp[656047] "expr temp" "maybe param" "maybe type" "temp"
    (656050 'move' call_tmp[656047](126832 call size _mt[243] counts[126819]))
    unknown call_tmp[656054] "expr temp" "maybe param" "maybe type" "temp"
    (656057 'move' call_tmp[656054](126836 call rank _mt[243] arr[126814]))
    unknown call_tmp[656059] "expr temp" "maybe param" "maybe type" "temp"
    (656062 'move' call_tmp[656059](126839 call != call_tmp[656047] call_tmp[656054]))
    unknown call_tmp[656064] "expr temp" "maybe param" "maybe type" "temp"
    (656067 'move' call_tmp[656064](126862 call _cond_test call_tmp[656059]))
    if call_tmp[656064]
    {
      (126860 call compilerError "the domain and array arguments of # must have the same rank")
    }
    unknown call_tmp[656071] "expr temp" "maybe param" "maybe type" "temp"
    (656074 'move' call_tmp[656071](126870 call _dom _mt[243] arr[126814]))
    unknown call_tmp[656076] "expr temp" "maybe param" "maybe type" "temp"
    (656079 'move' call_tmp[656076](126874 call # call_tmp[656071] counts[126819]))
    unknown call_tmp[656081] "expr temp" "maybe param" "maybe type" "temp"
    (656084 'move' call_tmp[656081](126877 call arr[126814] call_tmp[656076]))
    (517374 'move' ret[517369](517373 'deref' call_tmp[656081]))
    (517371 return ret[517369])
  }
  where {
    unknown tmp[424984] "maybe param" "temp"
    (424995 'move' tmp[424984](126824 call isRectangularArr arr[126814]))
    unknown call_tmp[656086] "expr temp" "maybe param" "maybe type" "temp"
    (656089 'move' call_tmp[656086](424997 call _cond_invalid tmp[424984]))
    if call_tmp[656086]
    {
      (425000 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565611] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565612] "maybe param" "temp"
    unknown call_tmp[656091] "expr temp" "maybe param" "maybe type" "temp"
    (656094 'move' call_tmp[656091](424985 call isTrue tmp[424984]))
    (565617 'move' tmp[565612](565615 call _cond_test call_tmp[656091]))
    if tmp[565612]
    {
      unknown tmp[565619] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656096] "expr temp" "maybe param" "maybe type" "temp"
      (656099 'move' call_tmp[656096](126828 call isTuple counts[126819]))
      (565621 'move' tmp[565619](424988 call isTrue call_tmp[656096]))
      (565626 'move' tmp[565611](565623 '_paramFoldLogical' tmp[565612] tmp[565619]))
    }
    {
      (565631 'move' tmp[565611](565628 '_paramFoldLogical' tmp[565612] 0))
    }
    (748191 call chpl_statementLevelSymbol tmp[565611])
  }
  function +[126889](arg d[126886]:_domain[125902](?), arg i[126895] :
  (126893 call chpl__buildIndexType d[126886])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656101] "expr temp" "maybe param" "maybe type" "temp"
    (656104 'move' call_tmp[656101](126901 call isRectangularDom d[126886]))
    unknown call_tmp[656106] "expr temp" "maybe param" "maybe type" "temp"
    (656109 'move' call_tmp[656106](126944 call _cond_test call_tmp[656101]))
    if call_tmp[656106]
    {
      (126921 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126942 call compilerError "Cannot add indices to this domain type")
    }
    (517376 return _void[55])
  }
  function +[126957](arg i[126955]:_any[178](?), arg d[126960]:_domain[125902](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656111] "expr temp" "maybe param" "maybe type" "temp"
    (656114 'move' call_tmp[656111](126975 call isRectangularDom d[126960]))
    unknown call_tmp[656116] "expr temp" "maybe param" "maybe type" "temp"
    (656119 'move' call_tmp[656116](126986 call _cond_test call_tmp[656111]))
    if call_tmp[656116]
    {
      (126979 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126984 call compilerError "Cannot add indices to this domain type")
    }
    (517378 return _void[55])
  }
  where {
    unknown call_tmp[656121] "expr temp" "maybe param" "maybe type" "temp"
    (656124 'move' call_tmp[656121](126969 call chpl__buildIndexType d[126960]))
    unknown call_tmp[656126] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656129 'move' call_tmp[656126](126965 'typeof' i[126955]))
    (354206 'is_subtype' call_tmp[656121] call_tmp[656126])
  }
  function +[127002](arg d[126999]:_domain[125902](?), arg i[127008] :
  (127006 call chpl__buildIndexType d[126999])) : _unknown[51]
  {
    unknown ret[517382] "RVV" "temp"
    (127021 call(127016 call (partial) add _mt[243] d[126999]) i[127008])
    (479869 'end of statement')
    (517387 'move' ret[517382](517386 'deref' d[126999]))
    (517384 return ret[517382])
  }
  where {
    (127014 call isIrregularDom d[126999])
  }
  function +[127034](arg i[127032]:_any[178](?), arg d[127037]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[517391] "RVV" "temp"
    (127061 call(127056 call (partial) add _mt[243] d[127037]) i[127032])
    (479871 'end of statement')
    (517396 'move' ret[517391](517395 'deref' d[127037]))
    (517393 return ret[517391])
  }
  where {
    unknown tmp[425005] "maybe param" "temp"
    unknown call_tmp[656135] "expr temp" "maybe param" "maybe type" "temp"
    (656138 'move' call_tmp[656135](127046 call chpl__buildIndexType d[127037]))
    unknown call_tmp[656140] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656143 'move' call_tmp[656140](127042 'typeof' i[127032]))
    (425016 'move' tmp[425005](354207 'is_subtype' call_tmp[656135] call_tmp[656140]))
    unknown call_tmp[656145] "expr temp" "maybe param" "maybe type" "temp"
    (656148 'move' call_tmp[656145](425018 call _cond_invalid tmp[425005]))
    if call_tmp[656145]
    {
      (425021 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565638] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565639] "maybe param" "temp"
    unknown call_tmp[656150] "expr temp" "maybe param" "maybe type" "temp"
    (656153 'move' call_tmp[656150](425006 call isTrue tmp[425005]))
    (565644 'move' tmp[565639](565642 call _cond_test call_tmp[656150]))
    if tmp[565639]
    {
      unknown tmp[565646] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656155] "expr temp" "maybe param" "maybe type" "temp"
      (656158 'move' call_tmp[656155](127052 call isIrregularDom d[127037]))
      (565648 'move' tmp[565646](425009 call isTrue call_tmp[656155]))
      (565653 'move' tmp[565638](565650 '_paramFoldLogical' tmp[565639] tmp[565646]))
    }
    {
      (565658 'move' tmp[565638](565655 '_paramFoldLogical' tmp[565639] 0))
    }
    (748193 call chpl_statementLevelSymbol tmp[565638])
  }
  function +[127076](arg d1[127073]:_domain[125902](?), arg d2[127079]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[517400] "RVV" "temp"
    unknown d3[127102] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656160] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656163 'move' call_tmp[656160](127101 'typeof' d1[127073]))
    (542830 'default init var' d3[127102] call_tmp[656160])
    (127105 'end of statement')
    {
      unknown _indexOfInterest[127117] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127118] "expr temp" "temp"
      (127127 'move' _iterator[127118](127125 call _getIterator d1[127073]))
      Defer
      {
        {
          (127143 call _freeIterator _iterator[127118])
        }
      }
      { scopeless type
        (127132 'move' _indexOfInterest[127117](127129 call iteratorIndex _iterator[127118]))
      }
      ForLoop[127119]
      {
        unknown e[127136] "index var" "insert auto destroy"
        (479874 'end of statement')
        (127138 'move' e[127136] _indexOfInterest[127117])
        (479875 'end of statement' e[127136])
        (127115 call(127110 call (partial) add _mt[243] d3[127102]) e[127136])
        (479877 'end of statement' d3[127102] e[127136])
        label _continueLabel[127122]
        _indexOfInterest[127117]
        _iterator[127118]
      }
      label _breakLabel[127123]
    }
    {
      unknown _indexOfInterest[127160] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127161] "expr temp" "temp"
      (127170 'move' _iterator[127161](127168 call _getIterator d2[127079]))
      Defer
      {
        {
          (127186 call _freeIterator _iterator[127161])
        }
      }
      { scopeless type
        (127175 'move' _indexOfInterest[127160](127172 call iteratorIndex _iterator[127161]))
      }
      ForLoop[127162]
      {
        unknown e[127179] "index var" "insert auto destroy"
        (479881 'end of statement')
        (127181 'move' e[127179] _indexOfInterest[127160])
        (479882 'end of statement' e[127179])
        (127158 call(127153 call (partial) add _mt[243] d3[127102]) e[127179])
        (479884 'end of statement' d3[127102] e[127179])
        label _continueLabel[127165]
        _indexOfInterest[127160]
        _iterator[127161]
      }
      label _breakLabel[127166]
    }
    (517405 'move' ret[517400](517404 'deref' d3[127102]))
    gotoReturn _end_+[517398] _end_+[517398]
    (479887 'end of statement' d3[127102])
    label _end_+[517398]
    (517402 return ret[517400])
  }
  where {
    unknown tmp[425026] "maybe param" "temp"
    unknown call_tmp[656169] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656172 'move' call_tmp[656169](127083 'typeof' d1[127073]))
    unknown call_tmp[656174] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656177 'move' call_tmp[656174](127085 'typeof' d2[127079]))
    (425037 'move' tmp[425026](127086 call == call_tmp[656169] call_tmp[656174]))
    unknown call_tmp[656179] "expr temp" "maybe param" "maybe type" "temp"
    (656182 'move' call_tmp[656179](425039 call _cond_invalid tmp[425026]))
    if call_tmp[656179]
    {
      (425042 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565692] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565693] "maybe param" "temp"
    unknown call_tmp[656184] "expr temp" "maybe param" "maybe type" "temp"
    (656187 'move' call_tmp[656184](425027 call isTrue tmp[425026]))
    (565698 'move' tmp[565693](565696 call _cond_test call_tmp[656184]))
    if tmp[565693]
    {
      unknown tmp[425047] "maybe param" "temp"
      (425058 'move' tmp[425047](127091 call isIrregularDom d1[127073]))
      unknown call_tmp[656189] "expr temp" "maybe param" "maybe type" "temp"
      (656192 'move' call_tmp[656189](425060 call _cond_invalid tmp[425047]))
      if call_tmp[656189]
      {
        (425063 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565665] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565666] "maybe param" "temp"
      unknown call_tmp[656194] "expr temp" "maybe param" "maybe type" "temp"
      (656197 'move' call_tmp[656194](425048 call isTrue tmp[425047]))
      (565671 'move' tmp[565666](565669 call _cond_test call_tmp[656194]))
      if tmp[565666]
      {
        unknown tmp[565673] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[656199] "expr temp" "maybe param" "maybe type" "temp"
        (656202 'move' call_tmp[656199](127095 call isIrregularDom d2[127079]))
        (565675 'move' tmp[565673](425051 call isTrue call_tmp[656199]))
        (565680 'move' tmp[565665](565677 '_paramFoldLogical' tmp[565666] tmp[565673]))
      }
      {
        (565685 'move' tmp[565665](565682 '_paramFoldLogical' tmp[565666] 0))
      }
      unknown tmp[565700] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (565702 'move' tmp[565700](425030 call isTrue tmp[565665]))
      (565707 'move' tmp[565692](565704 '_paramFoldLogical' tmp[565693] tmp[565700]))
    }
    {
      (565712 'move' tmp[565692](565709 '_paramFoldLogical' tmp[565693] 0))
    }
    (748195 call chpl_statementLevelSymbol tmp[565692])
  }
  function +[127205](arg d1[127202]:_domain[125902](?), arg d2[127208]:_domain[125902](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425068] "maybe param" "temp"
    (425079 'move' tmp[425068](127214 call isRectangularDom d1[127202]))
    unknown call_tmp[656204] "expr temp" "maybe param" "maybe type" "temp"
    (656207 'move' call_tmp[656204](425081 call _cond_invalid tmp[425068]))
    if call_tmp[656204]
    {
      (425084 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565719] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565720] "maybe param" "temp"
    unknown call_tmp[656209] "expr temp" "maybe param" "maybe type" "temp"
    (656212 'move' call_tmp[656209](425069 call isTrue tmp[425068]))
    (565725 'move' tmp[565720](565723 call _cond_test call_tmp[656209]))
    if tmp[565720]
    {
      (565730 'move' tmp[565719](565727 '_paramFoldLogical' tmp[565720] 1))
    }
    {
      unknown tmp[565732] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656214] "expr temp" "maybe param" "maybe type" "temp"
      (656217 'move' call_tmp[656214](127218 call isRectangularDom d2[127208]))
      (565734 'move' tmp[565732](425073 call isTrue call_tmp[656214]))
      (565739 'move' tmp[565719](565736 '_paramFoldLogical' tmp[565720] tmp[565732]))
    }
    unknown call_tmp[656219] "expr temp" "maybe param" "maybe type" "temp"
    (656222 'move' call_tmp[656219](127231 call _cond_test tmp[565719]))
    if call_tmp[656219]
    {
      (127224 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (127229 call compilerError "Cannot add indices to this domain type")
    }
    (517409 return _void[55])
  }
  function -[127246](arg d[127243]:_domain[125902](?), arg i[127252] :
  (127250 call chpl__buildIndexType d[127243])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656224] "expr temp" "maybe param" "maybe type" "temp"
    (656227 'move' call_tmp[656224](127258 call isRectangularDom d[127243]))
    unknown call_tmp[656229] "expr temp" "maybe param" "maybe type" "temp"
    (656232 'move' call_tmp[656229](127301 call _cond_test call_tmp[656224]))
    if call_tmp[656229]
    {
      (127278 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127299 call compilerError "Cannot remove indices from this domain type")
    }
    (517411 return _void[55])
  }
  function -[127316](arg d[127313]:_domain[125902](?), arg i[127322] :
  (127320 call chpl__buildIndexType d[127313])) : _unknown[51]
  {
    unknown ret[517415] "RVV" "temp"
    (127335 call(127330 call (partial) remove _mt[243] d[127313]) i[127322])
    (479894 'end of statement')
    (517420 'move' ret[517415](517419 'deref' d[127313]))
    (517417 return ret[517415])
  }
  where {
    (127328 call isIrregularDom d[127313])
  }
  function -[127350](arg d1[127347]:_domain[125902](?), arg d2[127353]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[517424] "RVV" "temp"
    unknown d3[127370] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656236] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656239 'move' call_tmp[656236](127369 'typeof' d1[127347]))
    (542832 'default init var' d3[127370] call_tmp[656236])
    (127373 'end of statement')
    {
      unknown _indexOfInterest[127385] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127386] "expr temp" "temp"
      (127395 'move' _iterator[127386](127393 call _getIterator d1[127347]))
      Defer
      {
        {
          (127411 call _freeIterator _iterator[127386])
        }
      }
      { scopeless type
        (127400 'move' _indexOfInterest[127385](127397 call iteratorIndex _iterator[127386]))
      }
      ForLoop[127387]
      {
        unknown e[127404] "index var" "insert auto destroy"
        (479897 'end of statement')
        (127406 'move' e[127404] _indexOfInterest[127385])
        (479898 'end of statement' e[127404])
        (127383 call(127378 call (partial) add _mt[243] d3[127370]) e[127404])
        (479900 'end of statement' d3[127370] e[127404])
        label _continueLabel[127390]
        _indexOfInterest[127385]
        _iterator[127386]
      }
      label _breakLabel[127391]
    }
    {
      unknown _indexOfInterest[127428] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127429] "expr temp" "temp"
      (127438 'move' _iterator[127429](127436 call _getIterator d2[127353]))
      Defer
      {
        {
          (127454 call _freeIterator _iterator[127429])
        }
      }
      { scopeless type
        (127443 'move' _indexOfInterest[127428](127440 call iteratorIndex _iterator[127429]))
      }
      ForLoop[127430]
      {
        unknown e[127447] "index var" "insert auto destroy"
        (479904 'end of statement')
        (127449 'move' e[127447] _indexOfInterest[127428])
        (479905 'end of statement' e[127447])
        (127426 call(127421 call (partial) remove _mt[243] d3[127370]) e[127447])
        (479907 'end of statement' d3[127370] e[127447])
        label _continueLabel[127433]
        _indexOfInterest[127428]
        _iterator[127429]
      }
      label _breakLabel[127434]
    }
    (517429 'move' ret[517424](517428 'deref' d3[127370]))
    gotoReturn _end_-[517422] _end_-[517422]
    (479910 'end of statement' d3[127370])
    label _end_-[517422]
    (517426 return ret[517424])
  }
  where {
    unknown tmp[425089] "maybe param" "temp"
    unknown call_tmp[656245] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656248 'move' call_tmp[656245](127357 'typeof' d1[127347]))
    unknown call_tmp[656250] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656253 'move' call_tmp[656250](127359 'typeof' d2[127353]))
    (425100 'move' tmp[425089](127360 call == call_tmp[656245] call_tmp[656250]))
    unknown call_tmp[656255] "expr temp" "maybe param" "maybe type" "temp"
    (656258 'move' call_tmp[656255](425102 call _cond_invalid tmp[425089]))
    if call_tmp[656255]
    {
      (425105 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565746] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565747] "maybe param" "temp"
    unknown call_tmp[656260] "expr temp" "maybe param" "maybe type" "temp"
    (656263 'move' call_tmp[656260](425090 call isTrue tmp[425089]))
    (565752 'move' tmp[565747](565750 call _cond_test call_tmp[656260]))
    if tmp[565747]
    {
      unknown tmp[565754] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656265] "expr temp" "maybe param" "maybe type" "temp"
      (656268 'move' call_tmp[656265](127365 call isSparseDom d1[127347]))
      (565756 'move' tmp[565754](425093 call isTrue call_tmp[656265]))
      (565761 'move' tmp[565746](565758 '_paramFoldLogical' tmp[565747] tmp[565754]))
    }
    {
      (565766 'move' tmp[565746](565763 '_paramFoldLogical' tmp[565747] 0))
    }
    (748197 call chpl_statementLevelSymbol tmp[565746])
  }
  function -[127473](arg d1[127470]:_domain[125902](?), arg d2[127476]:_domain[125902](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425110] "maybe param" "temp"
    (425121 'move' tmp[425110](127482 call isRectangularDom d1[127470]))
    unknown call_tmp[656270] "expr temp" "maybe param" "maybe type" "temp"
    (656273 'move' call_tmp[656270](425123 call _cond_invalid tmp[425110]))
    if call_tmp[656270]
    {
      (425126 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565773] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565774] "maybe param" "temp"
    unknown call_tmp[656275] "expr temp" "maybe param" "maybe type" "temp"
    (656278 'move' call_tmp[656275](425111 call isTrue tmp[425110]))
    (565779 'move' tmp[565774](565777 call _cond_test call_tmp[656275]))
    if tmp[565774]
    {
      (565784 'move' tmp[565773](565781 '_paramFoldLogical' tmp[565774] 1))
    }
    {
      unknown tmp[565786] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656280] "expr temp" "maybe param" "maybe type" "temp"
      (656283 'move' call_tmp[656280](127486 call isRectangularDom d2[127476]))
      (565788 'move' tmp[565786](425115 call isTrue call_tmp[656280]))
      (565793 'move' tmp[565773](565790 '_paramFoldLogical' tmp[565774] tmp[565786]))
    }
    unknown call_tmp[656285] "expr temp" "maybe param" "maybe type" "temp"
    (656288 'move' call_tmp[656285](127499 call _cond_test tmp[565773]))
    if call_tmp[656285]
    {
      (127492 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127497 call compilerError "Cannot remove indices from this domain type")
    }
    (517433 return _void[55])
  }
  function ==[127514](arg d1[127511]:_domain[125902](?), arg d2[127517]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517437] "RVV" "temp"
    unknown call_tmp[656292] "expr temp" "maybe param" "maybe type" "temp"
    (656295 'move' call_tmp[656292](127531 call _value _mt[243] d1[127511]))
    unknown call_tmp[656299] "expr temp" "maybe param" "maybe type" "temp"
    (656302 'move' call_tmp[656299](127534 call rank _mt[243] call_tmp[656292]))
    unknown call_tmp[656306] "expr temp" "maybe param" "maybe type" "temp"
    (656309 'move' call_tmp[656306](127538 call _value _mt[243] d2[127517]))
    unknown call_tmp[656313] "expr temp" "maybe param" "maybe type" "temp"
    (656316 'move' call_tmp[656313](127541 call rank _mt[243] call_tmp[656306]))
    unknown call_tmp[656318] "expr temp" "maybe param" "maybe type" "temp"
    (656321 'move' call_tmp[656318](127544 call != call_tmp[656299] call_tmp[656313]))
    unknown call_tmp[656323] "expr temp" "maybe param" "maybe type" "temp"
    (656326 'move' call_tmp[656323](127652 call _cond_test call_tmp[656318]))
    if call_tmp[656323]
    {
      (517442 'move' ret[517437](517441 'deref' 0))
      gotoReturn _end_==[517435] _end_==[517435]
    }
    {
      unknown call_tmp[656330] "expr temp" "maybe param" "maybe type" "temp"
      (656333 'move' call_tmp[656330](127551 call _value _mt[243] d1[127511]))
      unknown call_tmp[656337] "expr temp" "maybe param" "maybe type" "temp"
      (656340 'move' call_tmp[656337](127555 call _value _mt[243] d2[127517]))
      unknown call_tmp[656342] "expr temp" "maybe param" "maybe type" "temp"
      (656345 'move' call_tmp[656342](127558 call == call_tmp[656330] call_tmp[656337]))
      unknown call_tmp[656347] "expr temp" "maybe param" "maybe type" "temp"
      (656350 'move' call_tmp[656347](127648 call _cond_test call_tmp[656342]))
      if call_tmp[656347]
      {
        (517447 'move' ret[517437](517446 'deref' 1))
        gotoReturn _end_==[517435] _end_==[517435]
      }
      {
        {
          unknown i[127601] "dead at end of block" "insert auto destroy"
          (542834 'init var' i[127601] 0)
          (479917 'end of statement')
          unknown tmp[127602] "maybe param" "temp"
          unknown call_tmp[656354] "expr temp" "maybe param" "maybe type" "temp"
          (656357 'move' call_tmp[656354](127566 call _value _mt[243] d1[127511]))
          unknown call_tmp[656361] "expr temp" "maybe param" "maybe type" "temp"
          (656364 'move' call_tmp[656361](127569 call rank _mt[243] call_tmp[656354]))
          unknown call_tmp[656366] "expr temp" "maybe param" "maybe type" "temp"
          (656369 'move' call_tmp[656366](127573 call - call_tmp[656361] 1))
          (127614 'move' tmp[127602](127612 call chpl_compute_low_param_loop_bound 0 call_tmp[656366]))
          unknown tmp[127603] "maybe param" "temp"
          unknown call_tmp[656373] "expr temp" "maybe param" "maybe type" "temp"
          (656376 'move' call_tmp[656373](127623 call _value _mt[243] d1[127511]))
          unknown call_tmp[656380] "expr temp" "maybe param" "maybe type" "temp"
          (656383 'move' call_tmp[656380](127621 call rank _mt[243] call_tmp[656373]))
          unknown call_tmp[656385] "expr temp" "maybe param" "maybe type" "temp"
          (656388 'move' call_tmp[656385](127619 call - call_tmp[656380] 1))
          (127630 'move' tmp[127603](127628 call chpl_compute_high_param_loop_bound 0 call_tmp[656385]))
          unknown tmp[127604] "maybe param" "temp"
          (127633 'move' tmp[127604] 1)
          ParamForLoop[127635]
          { i[127601] tmp[127602] tmp[127603] tmp[127604]
            unknown call_tmp[656392] "expr temp" "maybe param" "maybe type" "temp"
            (656395 'move' call_tmp[656392](127583 call(127578 call (partial) dim _mt[243] d1[127511]) i[127601]))
            unknown call_tmp[656399] "expr temp" "maybe param" "maybe type" "temp"
            (656402 'move' call_tmp[656399](127590 call(127585 call (partial) dim _mt[243] d2[127517]) i[127601]))
            unknown call_tmp[656404] "expr temp" "maybe param" "maybe type" "temp"
            (656407 'move' call_tmp[656404](127591 call != call_tmp[656392] call_tmp[656399]))
            unknown call_tmp[656409] "expr temp" "maybe param" "maybe type" "temp"
            (656412 'move' call_tmp[656409](127596 call _cond_test call_tmp[656404]))
            if call_tmp[656409]
            {
              (517452 'move' ret[517437](517451 'deref' 0))
              gotoReturn _end_==[517435] _end_==[517435]
            }
          }
          label _unused_continueLabel[127606]
          label _breakLabel[127605]
        }
        (517457 'move' ret[517437](517456 'deref' 1))
        gotoReturn _end_==[517435] _end_==[517435]
      }
    }
    label _end_==[517435]
    (517439 return ret[517437])
  }
  where {
    unknown tmp[425131] "maybe param" "temp"
    (425142 'move' tmp[425131](127523 call isRectangularDom d1[127511]))
    unknown call_tmp[656414] "expr temp" "maybe param" "maybe type" "temp"
    (656417 'move' call_tmp[656414](425144 call _cond_invalid tmp[425131]))
    if call_tmp[656414]
    {
      (425147 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565800] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565801] "maybe param" "temp"
    unknown call_tmp[656419] "expr temp" "maybe param" "maybe type" "temp"
    (656422 'move' call_tmp[656419](425132 call isTrue tmp[425131]))
    (565806 'move' tmp[565801](565804 call _cond_test call_tmp[656419]))
    if tmp[565801]
    {
      unknown tmp[565808] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656424] "expr temp" "maybe param" "maybe type" "temp"
      (656427 'move' call_tmp[656424](127527 call isRectangularDom d2[127517]))
      (565810 'move' tmp[565808](425135 call isTrue call_tmp[656424]))
      (565815 'move' tmp[565800](565812 '_paramFoldLogical' tmp[565801] tmp[565808]))
    }
    {
      (565820 'move' tmp[565800](565817 '_paramFoldLogical' tmp[565801] 0))
    }
    (748199 call chpl_statementLevelSymbol tmp[565800])
  }
  function !=[127667](arg d1[127664]:_domain[125902](?), arg d2[127670]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517463] "RVV" "temp"
    unknown call_tmp[656431] "expr temp" "maybe param" "maybe type" "temp"
    (656434 'move' call_tmp[656431](127684 call _value _mt[243] d1[127664]))
    unknown call_tmp[656438] "expr temp" "maybe param" "maybe type" "temp"
    (656441 'move' call_tmp[656438](127687 call rank _mt[243] call_tmp[656431]))
    unknown call_tmp[656445] "expr temp" "maybe param" "maybe type" "temp"
    (656448 'move' call_tmp[656445](127691 call _value _mt[243] d2[127670]))
    unknown call_tmp[656452] "expr temp" "maybe param" "maybe type" "temp"
    (656455 'move' call_tmp[656452](127694 call rank _mt[243] call_tmp[656445]))
    unknown call_tmp[656457] "expr temp" "maybe param" "maybe type" "temp"
    (656460 'move' call_tmp[656457](127697 call != call_tmp[656438] call_tmp[656452]))
    unknown call_tmp[656462] "expr temp" "maybe param" "maybe type" "temp"
    (656465 'move' call_tmp[656462](127805 call _cond_test call_tmp[656457]))
    if call_tmp[656462]
    {
      (517468 'move' ret[517463](517467 'deref' 1))
      gotoReturn _end_!=[517461] _end_!=[517461]
    }
    {
      unknown call_tmp[656469] "expr temp" "maybe param" "maybe type" "temp"
      (656472 'move' call_tmp[656469](127704 call _value _mt[243] d1[127664]))
      unknown call_tmp[656476] "expr temp" "maybe param" "maybe type" "temp"
      (656479 'move' call_tmp[656476](127708 call _value _mt[243] d2[127670]))
      unknown call_tmp[656481] "expr temp" "maybe param" "maybe type" "temp"
      (656484 'move' call_tmp[656481](127711 call == call_tmp[656469] call_tmp[656476]))
      unknown call_tmp[656486] "expr temp" "maybe param" "maybe type" "temp"
      (656489 'move' call_tmp[656486](127801 call _cond_test call_tmp[656481]))
      if call_tmp[656486]
      {
        (517473 'move' ret[517463](517472 'deref' 0))
        gotoReturn _end_!=[517461] _end_!=[517461]
      }
      {
        {
          unknown i[127754] "dead at end of block" "insert auto destroy"
          (542836 'init var' i[127754] 0)
          (479922 'end of statement')
          unknown tmp[127755] "maybe param" "temp"
          unknown call_tmp[656493] "expr temp" "maybe param" "maybe type" "temp"
          (656496 'move' call_tmp[656493](127719 call _value _mt[243] d1[127664]))
          unknown call_tmp[656500] "expr temp" "maybe param" "maybe type" "temp"
          (656503 'move' call_tmp[656500](127722 call rank _mt[243] call_tmp[656493]))
          unknown call_tmp[656505] "expr temp" "maybe param" "maybe type" "temp"
          (656508 'move' call_tmp[656505](127726 call - call_tmp[656500] 1))
          (127767 'move' tmp[127755](127765 call chpl_compute_low_param_loop_bound 0 call_tmp[656505]))
          unknown tmp[127756] "maybe param" "temp"
          unknown call_tmp[656512] "expr temp" "maybe param" "maybe type" "temp"
          (656515 'move' call_tmp[656512](127776 call _value _mt[243] d1[127664]))
          unknown call_tmp[656519] "expr temp" "maybe param" "maybe type" "temp"
          (656522 'move' call_tmp[656519](127774 call rank _mt[243] call_tmp[656512]))
          unknown call_tmp[656524] "expr temp" "maybe param" "maybe type" "temp"
          (656527 'move' call_tmp[656524](127772 call - call_tmp[656519] 1))
          (127783 'move' tmp[127756](127781 call chpl_compute_high_param_loop_bound 0 call_tmp[656524]))
          unknown tmp[127757] "maybe param" "temp"
          (127786 'move' tmp[127757] 1)
          ParamForLoop[127788]
          { i[127754] tmp[127755] tmp[127756] tmp[127757]
            unknown call_tmp[656531] "expr temp" "maybe param" "maybe type" "temp"
            (656534 'move' call_tmp[656531](127736 call(127731 call (partial) dim _mt[243] d1[127664]) i[127754]))
            unknown call_tmp[656538] "expr temp" "maybe param" "maybe type" "temp"
            (656541 'move' call_tmp[656538](127743 call(127738 call (partial) dim _mt[243] d2[127670]) i[127754]))
            unknown call_tmp[656543] "expr temp" "maybe param" "maybe type" "temp"
            (656546 'move' call_tmp[656543](127744 call != call_tmp[656531] call_tmp[656538]))
            unknown call_tmp[656548] "expr temp" "maybe param" "maybe type" "temp"
            (656551 'move' call_tmp[656548](127749 call _cond_test call_tmp[656543]))
            if call_tmp[656548]
            {
              (517478 'move' ret[517463](517477 'deref' 1))
              gotoReturn _end_!=[517461] _end_!=[517461]
            }
          }
          label _unused_continueLabel[127759]
          label _breakLabel[127758]
        }
        (517483 'move' ret[517463](517482 'deref' 0))
        gotoReturn _end_!=[517461] _end_!=[517461]
      }
    }
    label _end_!=[517461]
    (517465 return ret[517463])
  }
  where {
    unknown tmp[425152] "maybe param" "temp"
    (425163 'move' tmp[425152](127676 call isRectangularDom d1[127664]))
    unknown call_tmp[656553] "expr temp" "maybe param" "maybe type" "temp"
    (656556 'move' call_tmp[656553](425165 call _cond_invalid tmp[425152]))
    if call_tmp[656553]
    {
      (425168 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565827] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565828] "maybe param" "temp"
    unknown call_tmp[656558] "expr temp" "maybe param" "maybe type" "temp"
    (656561 'move' call_tmp[656558](425153 call isTrue tmp[425152]))
    (565833 'move' tmp[565828](565831 call _cond_test call_tmp[656558]))
    if tmp[565828]
    {
      unknown tmp[565835] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656563] "expr temp" "maybe param" "maybe type" "temp"
      (656566 'move' call_tmp[656563](127680 call isRectangularDom d2[127670]))
      (565837 'move' tmp[565835](425156 call isTrue call_tmp[656563]))
      (565842 'move' tmp[565827](565839 '_paramFoldLogical' tmp[565828] tmp[565835]))
    }
    {
      (565847 'move' tmp[565827](565844 '_paramFoldLogical' tmp[565828] 0))
    }
    (748201 call chpl_statementLevelSymbol tmp[565827])
  }
  function ==[127820](arg d1[127817]:_domain[125902](?), arg d2[127823]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517489] "RVV" "temp"
    unknown call_tmp[656570] "expr temp" "maybe param" "maybe type" "temp"
    (656573 'move' call_tmp[656570](127837 call _value _mt[243] d1[127817]))
    unknown call_tmp[656577] "expr temp" "maybe param" "maybe type" "temp"
    (656580 'move' call_tmp[656577](127841 call _value _mt[243] d2[127823]))
    unknown call_tmp[656582] "expr temp" "maybe param" "maybe type" "temp"
    (656585 'move' call_tmp[656582](127844 call == call_tmp[656570] call_tmp[656577]))
    unknown call_tmp[656587] "expr temp" "maybe param" "maybe type" "temp"
    (656590 'move' call_tmp[656587](127849 call _cond_test call_tmp[656582]))
    if call_tmp[656587]
    {
      (517494 'move' ret[517489](517493 'deref' 1))
      gotoReturn _end_==[517487] _end_==[517487]
    }
    unknown call_tmp[656594] "expr temp" "maybe param" "maybe type" "temp"
    (656597 'move' call_tmp[656594](127856 call size _mt[243] d1[127817]))
    unknown call_tmp[656601] "expr temp" "maybe param" "maybe type" "temp"
    (656604 'move' call_tmp[656601](127860 call size _mt[243] d2[127823]))
    unknown call_tmp[656606] "expr temp" "maybe param" "maybe type" "temp"
    (656609 'move' call_tmp[656606](127863 call != call_tmp[656594] call_tmp[656601]))
    unknown call_tmp[656611] "expr temp" "maybe param" "maybe type" "temp"
    (656614 'move' call_tmp[656611](127868 call _cond_test call_tmp[656606]))
    if call_tmp[656611]
    {
      (517499 'move' ret[517489](517498 'deref' 0))
      gotoReturn _end_==[517487] _end_==[517487]
    }
    {
      unknown _indexOfInterest[127892] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127893] "expr temp" "temp"
      (127902 'move' _iterator[127893](127900 call _getIterator d1[127817]))
      Defer
      {
        {
          (127918 call _freeIterator _iterator[127893])
        }
      }
      { scopeless type
        (127907 'move' _indexOfInterest[127892](127904 call iteratorIndex _iterator[127893]))
      }
      ForLoop[127894]
      {
        unknown idx[127911] "index var" "insert auto destroy"
        (479928 'end of statement')
        (127913 'move' idx[127911] _indexOfInterest[127892])
        (479929 'end of statement' idx[127911])
        unknown call_tmp[656618] "expr temp" "maybe param" "maybe type" "temp"
        (656621 'move' call_tmp[656618](127881 call(127876 call (partial) contains _mt[243] d2[127823]) idx[127911]))
        unknown call_tmp[656623] "expr temp" "maybe param" "maybe type" "temp"
        (656626 'move' call_tmp[656623](127882 call ! call_tmp[656618]))
        unknown call_tmp[656628] "expr temp" "maybe param" "maybe type" "temp"
        (656631 'move' call_tmp[656628](127887 call _cond_test call_tmp[656623]))
        if call_tmp[656628]
        {
          (517504 'move' ret[517489](517503 'deref' 0))
          gotoReturn _end_==[517487] _end_==[517487]
        }
        label _continueLabel[127897]
        _indexOfInterest[127892]
        _iterator[127893]
      }
      label _breakLabel[127898]
    }
    (517509 'move' ret[517489](517508 'deref' 1))
    label _end_==[517487]
    (517491 return ret[517489])
  }
  where {
    unknown tmp[425173] "maybe param" "temp"
    (425184 'move' tmp[425173](127829 call isAssociativeDom d1[127817]))
    unknown call_tmp[656633] "expr temp" "maybe param" "maybe type" "temp"
    (656636 'move' call_tmp[656633](425186 call _cond_invalid tmp[425173]))
    if call_tmp[656633]
    {
      (425189 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565854] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565855] "maybe param" "temp"
    unknown call_tmp[656638] "expr temp" "maybe param" "maybe type" "temp"
    (656641 'move' call_tmp[656638](425174 call isTrue tmp[425173]))
    (565860 'move' tmp[565855](565858 call _cond_test call_tmp[656638]))
    if tmp[565855]
    {
      unknown tmp[565862] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656643] "expr temp" "maybe param" "maybe type" "temp"
      (656646 'move' call_tmp[656643](127833 call isAssociativeDom d2[127823]))
      (565864 'move' tmp[565862](425177 call isTrue call_tmp[656643]))
      (565869 'move' tmp[565854](565866 '_paramFoldLogical' tmp[565855] tmp[565862]))
    }
    {
      (565874 'move' tmp[565854](565871 '_paramFoldLogical' tmp[565855] 0))
    }
    (748203 call chpl_statementLevelSymbol tmp[565854])
  }
  function !=[127937](arg d1[127934]:_domain[125902](?), arg d2[127940]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517513] "RVV" "temp"
    unknown call_tmp[656650] "expr temp" "maybe param" "maybe type" "temp"
    (656653 'move' call_tmp[656650](127954 call _value _mt[243] d1[127934]))
    unknown call_tmp[656657] "expr temp" "maybe param" "maybe type" "temp"
    (656660 'move' call_tmp[656657](127958 call _value _mt[243] d2[127940]))
    unknown call_tmp[656662] "expr temp" "maybe param" "maybe type" "temp"
    (656665 'move' call_tmp[656662](127961 call == call_tmp[656650] call_tmp[656657]))
    unknown call_tmp[656667] "expr temp" "maybe param" "maybe type" "temp"
    (656670 'move' call_tmp[656667](127966 call _cond_test call_tmp[656662]))
    if call_tmp[656667]
    {
      (517518 'move' ret[517513](517517 'deref' 0))
      gotoReturn _end_!=[517511] _end_!=[517511]
    }
    unknown call_tmp[656674] "expr temp" "maybe param" "maybe type" "temp"
    (656677 'move' call_tmp[656674](127973 call size _mt[243] d1[127934]))
    unknown call_tmp[656681] "expr temp" "maybe param" "maybe type" "temp"
    (656684 'move' call_tmp[656681](127977 call size _mt[243] d2[127940]))
    unknown call_tmp[656686] "expr temp" "maybe param" "maybe type" "temp"
    (656689 'move' call_tmp[656686](127980 call != call_tmp[656674] call_tmp[656681]))
    unknown call_tmp[656691] "expr temp" "maybe param" "maybe type" "temp"
    (656694 'move' call_tmp[656691](127985 call _cond_test call_tmp[656686]))
    if call_tmp[656691]
    {
      (517523 'move' ret[517513](517522 'deref' 1))
      gotoReturn _end_!=[517511] _end_!=[517511]
    }
    {
      unknown _indexOfInterest[128009] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128010] "expr temp" "temp"
      (128019 'move' _iterator[128010](128017 call _getIterator d1[127934]))
      Defer
      {
        {
          (128035 call _freeIterator _iterator[128010])
        }
      }
      { scopeless type
        (128024 'move' _indexOfInterest[128009](128021 call iteratorIndex _iterator[128010]))
      }
      ForLoop[128011]
      {
        unknown idx[128028] "index var" "insert auto destroy"
        (479936 'end of statement')
        (128030 'move' idx[128028] _indexOfInterest[128009])
        (479937 'end of statement' idx[128028])
        unknown call_tmp[656698] "expr temp" "maybe param" "maybe type" "temp"
        (656701 'move' call_tmp[656698](127998 call(127993 call (partial) contains _mt[243] d2[127940]) idx[128028]))
        unknown call_tmp[656703] "expr temp" "maybe param" "maybe type" "temp"
        (656706 'move' call_tmp[656703](127999 call ! call_tmp[656698]))
        unknown call_tmp[656708] "expr temp" "maybe param" "maybe type" "temp"
        (656711 'move' call_tmp[656708](128004 call _cond_test call_tmp[656703]))
        if call_tmp[656708]
        {
          (517528 'move' ret[517513](517527 'deref' 1))
          gotoReturn _end_!=[517511] _end_!=[517511]
        }
        label _continueLabel[128014]
        _indexOfInterest[128009]
        _iterator[128010]
      }
      label _breakLabel[128015]
    }
    (517533 'move' ret[517513](517532 'deref' 0))
    label _end_!=[517511]
    (517515 return ret[517513])
  }
  where {
    unknown tmp[425194] "maybe param" "temp"
    (425205 'move' tmp[425194](127946 call isAssociativeDom d1[127934]))
    unknown call_tmp[656713] "expr temp" "maybe param" "maybe type" "temp"
    (656716 'move' call_tmp[656713](425207 call _cond_invalid tmp[425194]))
    if call_tmp[656713]
    {
      (425210 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565881] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565882] "maybe param" "temp"
    unknown call_tmp[656718] "expr temp" "maybe param" "maybe type" "temp"
    (656721 'move' call_tmp[656718](425195 call isTrue tmp[425194]))
    (565887 'move' tmp[565882](565885 call _cond_test call_tmp[656718]))
    if tmp[565882]
    {
      unknown tmp[565889] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656723] "expr temp" "maybe param" "maybe type" "temp"
      (656726 'move' call_tmp[656723](127950 call isAssociativeDom d2[127940]))
      (565891 'move' tmp[565889](425198 call isTrue call_tmp[656723]))
      (565896 'move' tmp[565881](565893 '_paramFoldLogical' tmp[565882] tmp[565889]))
    }
    {
      (565901 'move' tmp[565881](565898 '_paramFoldLogical' tmp[565882] 0))
    }
    (748205 call chpl_statementLevelSymbol tmp[565881])
  }
  function ==[128054](arg d1[128051]:_domain[125902](?), arg d2[128057]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517537] "RVV" "temp"
    unknown call_tmp[656730] "expr temp" "maybe param" "maybe type" "temp"
    (656733 'move' call_tmp[656730](128071 call _value _mt[243] d1[128051]))
    unknown call_tmp[656737] "expr temp" "maybe param" "maybe type" "temp"
    (656740 'move' call_tmp[656737](128075 call _value _mt[243] d2[128057]))
    unknown call_tmp[656742] "expr temp" "maybe param" "maybe type" "temp"
    (656745 'move' call_tmp[656742](128078 call == call_tmp[656730] call_tmp[656737]))
    unknown call_tmp[656747] "expr temp" "maybe param" "maybe type" "temp"
    (656750 'move' call_tmp[656747](128083 call _cond_test call_tmp[656742]))
    if call_tmp[656747]
    {
      (517542 'move' ret[517537](517541 'deref' 1))
      gotoReturn _end_==[517535] _end_==[517535]
    }
    unknown call_tmp[656754] "expr temp" "maybe param" "maybe type" "temp"
    (656757 'move' call_tmp[656754](128090 call size _mt[243] d1[128051]))
    unknown call_tmp[656761] "expr temp" "maybe param" "maybe type" "temp"
    (656764 'move' call_tmp[656761](128094 call size _mt[243] d2[128057]))
    unknown call_tmp[656766] "expr temp" "maybe param" "maybe type" "temp"
    (656769 'move' call_tmp[656766](128097 call != call_tmp[656754] call_tmp[656761]))
    unknown call_tmp[656771] "expr temp" "maybe param" "maybe type" "temp"
    (656774 'move' call_tmp[656771](128102 call _cond_test call_tmp[656766]))
    if call_tmp[656771]
    {
      (517547 'move' ret[517537](517546 'deref' 0))
      gotoReturn _end_==[517535] _end_==[517535]
    }
    unknown call_tmp[656778] "expr temp" "maybe param" "maybe type" "temp"
    (656781 'move' call_tmp[656778](128108 call _value _mt[243] d1[128051]))
    unknown call_tmp[656785] "expr temp" "maybe param" "maybe type" "temp"
    (656788 'move' call_tmp[656785](128111 call parentDom _mt[243] call_tmp[656778]))
    unknown call_tmp[656792] "expr temp" "maybe param" "maybe type" "temp"
    (656795 'move' call_tmp[656792](128115 call _value _mt[243] d2[128057]))
    unknown call_tmp[656799] "expr temp" "maybe param" "maybe type" "temp"
    (656802 'move' call_tmp[656799](128118 call parentDom _mt[243] call_tmp[656792]))
    unknown call_tmp[656804] "expr temp" "maybe param" "maybe type" "temp"
    (656807 'move' call_tmp[656804](128121 call != call_tmp[656785] call_tmp[656799]))
    unknown call_tmp[656809] "expr temp" "maybe param" "maybe type" "temp"
    (656812 'move' call_tmp[656809](128126 call _cond_test call_tmp[656804]))
    if call_tmp[656809]
    {
      (517552 'move' ret[517537](517551 'deref' 0))
      gotoReturn _end_==[517535] _end_==[517535]
    }
    {
      unknown _indexOfInterest[128150] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128151] "expr temp" "temp"
      (128160 'move' _iterator[128151](128158 call _getIterator d1[128051]))
      Defer
      {
        {
          (128176 call _freeIterator _iterator[128151])
        }
      }
      { scopeless type
        (128165 'move' _indexOfInterest[128150](128162 call iteratorIndex _iterator[128151]))
      }
      ForLoop[128152]
      {
        unknown idx[128169] "index var" "insert auto destroy"
        (479945 'end of statement')
        (128171 'move' idx[128169] _indexOfInterest[128150])
        (479946 'end of statement' idx[128169])
        unknown call_tmp[656816] "expr temp" "maybe param" "maybe type" "temp"
        (656819 'move' call_tmp[656816](128139 call(128134 call (partial) contains _mt[243] d2[128057]) idx[128169]))
        unknown call_tmp[656821] "expr temp" "maybe param" "maybe type" "temp"
        (656824 'move' call_tmp[656821](128140 call ! call_tmp[656816]))
        unknown call_tmp[656826] "expr temp" "maybe param" "maybe type" "temp"
        (656829 'move' call_tmp[656826](128145 call _cond_test call_tmp[656821]))
        if call_tmp[656826]
        {
          (517557 'move' ret[517537](517556 'deref' 0))
          gotoReturn _end_==[517535] _end_==[517535]
        }
        label _continueLabel[128155]
        _indexOfInterest[128150]
        _iterator[128151]
      }
      label _breakLabel[128156]
    }
    (517562 'move' ret[517537](517561 'deref' 1))
    label _end_==[517535]
    (517539 return ret[517537])
  }
  where {
    unknown tmp[425215] "maybe param" "temp"
    (425226 'move' tmp[425215](128063 call isSparseDom d1[128051]))
    unknown call_tmp[656831] "expr temp" "maybe param" "maybe type" "temp"
    (656834 'move' call_tmp[656831](425228 call _cond_invalid tmp[425215]))
    if call_tmp[656831]
    {
      (425231 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565908] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565909] "maybe param" "temp"
    unknown call_tmp[656836] "expr temp" "maybe param" "maybe type" "temp"
    (656839 'move' call_tmp[656836](425216 call isTrue tmp[425215]))
    (565914 'move' tmp[565909](565912 call _cond_test call_tmp[656836]))
    if tmp[565909]
    {
      unknown tmp[565916] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656841] "expr temp" "maybe param" "maybe type" "temp"
      (656844 'move' call_tmp[656841](128067 call isSparseDom d2[128057]))
      (565918 'move' tmp[565916](425219 call isTrue call_tmp[656841]))
      (565923 'move' tmp[565908](565920 '_paramFoldLogical' tmp[565909] tmp[565916]))
    }
    {
      (565928 'move' tmp[565908](565925 '_paramFoldLogical' tmp[565909] 0))
    }
    (748207 call chpl_statementLevelSymbol tmp[565908])
  }
  function !=[128195](arg d1[128192]:_domain[125902](?), arg d2[128198]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[517566] "RVV" "temp"
    unknown call_tmp[656848] "expr temp" "maybe param" "maybe type" "temp"
    (656851 'move' call_tmp[656848](128212 call _value _mt[243] d1[128192]))
    unknown call_tmp[656855] "expr temp" "maybe param" "maybe type" "temp"
    (656858 'move' call_tmp[656855](128216 call _value _mt[243] d2[128198]))
    unknown call_tmp[656860] "expr temp" "maybe param" "maybe type" "temp"
    (656863 'move' call_tmp[656860](128219 call == call_tmp[656848] call_tmp[656855]))
    unknown call_tmp[656865] "expr temp" "maybe param" "maybe type" "temp"
    (656868 'move' call_tmp[656865](128224 call _cond_test call_tmp[656860]))
    if call_tmp[656865]
    {
      (517571 'move' ret[517566](517570 'deref' 0))
      gotoReturn _end_!=[517564] _end_!=[517564]
    }
    unknown call_tmp[656872] "expr temp" "maybe param" "maybe type" "temp"
    (656875 'move' call_tmp[656872](128231 call size _mt[243] d1[128192]))
    unknown call_tmp[656879] "expr temp" "maybe param" "maybe type" "temp"
    (656882 'move' call_tmp[656879](128235 call size _mt[243] d2[128198]))
    unknown call_tmp[656884] "expr temp" "maybe param" "maybe type" "temp"
    (656887 'move' call_tmp[656884](128238 call != call_tmp[656872] call_tmp[656879]))
    unknown call_tmp[656889] "expr temp" "maybe param" "maybe type" "temp"
    (656892 'move' call_tmp[656889](128243 call _cond_test call_tmp[656884]))
    if call_tmp[656889]
    {
      (517576 'move' ret[517566](517575 'deref' 1))
      gotoReturn _end_!=[517564] _end_!=[517564]
    }
    unknown call_tmp[656896] "expr temp" "maybe param" "maybe type" "temp"
    (656899 'move' call_tmp[656896](128249 call _value _mt[243] d1[128192]))
    unknown call_tmp[656903] "expr temp" "maybe param" "maybe type" "temp"
    (656906 'move' call_tmp[656903](128252 call parentDom _mt[243] call_tmp[656896]))
    unknown call_tmp[656910] "expr temp" "maybe param" "maybe type" "temp"
    (656913 'move' call_tmp[656910](128256 call _value _mt[243] d2[128198]))
    unknown call_tmp[656917] "expr temp" "maybe param" "maybe type" "temp"
    (656920 'move' call_tmp[656917](128259 call parentDom _mt[243] call_tmp[656910]))
    unknown call_tmp[656922] "expr temp" "maybe param" "maybe type" "temp"
    (656925 'move' call_tmp[656922](128262 call != call_tmp[656903] call_tmp[656917]))
    unknown call_tmp[656927] "expr temp" "maybe param" "maybe type" "temp"
    (656930 'move' call_tmp[656927](128267 call _cond_test call_tmp[656922]))
    if call_tmp[656927]
    {
      (517581 'move' ret[517566](517580 'deref' 1))
      gotoReturn _end_!=[517564] _end_!=[517564]
    }
    {
      unknown _indexOfInterest[128291] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128292] "expr temp" "temp"
      (128301 'move' _iterator[128292](128299 call _getIterator d1[128192]))
      Defer
      {
        {
          (128317 call _freeIterator _iterator[128292])
        }
      }
      { scopeless type
        (128306 'move' _indexOfInterest[128291](128303 call iteratorIndex _iterator[128292]))
      }
      ForLoop[128293]
      {
        unknown idx[128310] "index var" "insert auto destroy"
        (479954 'end of statement')
        (128312 'move' idx[128310] _indexOfInterest[128291])
        (479955 'end of statement' idx[128310])
        unknown call_tmp[656934] "expr temp" "maybe param" "maybe type" "temp"
        (656937 'move' call_tmp[656934](128280 call(128275 call (partial) contains _mt[243] d2[128198]) idx[128310]))
        unknown call_tmp[656939] "expr temp" "maybe param" "maybe type" "temp"
        (656942 'move' call_tmp[656939](128281 call ! call_tmp[656934]))
        unknown call_tmp[656944] "expr temp" "maybe param" "maybe type" "temp"
        (656947 'move' call_tmp[656944](128286 call _cond_test call_tmp[656939]))
        if call_tmp[656944]
        {
          (517586 'move' ret[517566](517585 'deref' 1))
          gotoReturn _end_!=[517564] _end_!=[517564]
        }
        label _continueLabel[128296]
        _indexOfInterest[128291]
        _iterator[128292]
      }
      label _breakLabel[128297]
    }
    (517591 'move' ret[517566](517590 'deref' 0))
    label _end_!=[517564]
    (517568 return ret[517566])
  }
  where {
    unknown tmp[425236] "maybe param" "temp"
    (425247 'move' tmp[425236](128204 call isSparseDom d1[128192]))
    unknown call_tmp[656949] "expr temp" "maybe param" "maybe type" "temp"
    (656952 'move' call_tmp[656949](425249 call _cond_invalid tmp[425236]))
    if call_tmp[656949]
    {
      (425252 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565935] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565936] "maybe param" "temp"
    unknown call_tmp[656954] "expr temp" "maybe param" "maybe type" "temp"
    (656957 'move' call_tmp[656954](425237 call isTrue tmp[425236]))
    (565941 'move' tmp[565936](565939 call _cond_test call_tmp[656954]))
    if tmp[565936]
    {
      unknown tmp[565943] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656959] "expr temp" "maybe param" "maybe type" "temp"
      (656962 'move' call_tmp[656959](128208 call isSparseDom d2[128198]))
      (565945 'move' tmp[565943](425240 call isTrue call_tmp[656959]))
      (565950 'move' tmp[565935](565947 '_paramFoldLogical' tmp[565936] tmp[565943]))
    }
    {
      (565955 'move' tmp[565935](565952 '_paramFoldLogical' tmp[565936] 0))
    }
    (748209 call chpl_statementLevelSymbol tmp[565935])
  }
  function ==[128336](arg d1[128333]:_domain[125902](?), arg d2[128339]:_domain[125902](?)) param : _unknown[51] "inline"
  {
    unknown ret[517595] "RVV" "param" "temp"
    (517600 'move' ret[517595](517599 'deref' 0))
    (517597 return ret[517595])
  }
  function !=[128354](arg d1[128351]:_domain[125902](?), arg d2[128357]:_domain[125902](?)) param : _unknown[51] "inline"
  {
    unknown ret[517604] "RVV" "param" "temp"
    (517609 'move' ret[517604](517608 'deref' 1))
    (517606 return ret[517604])
  }
  function shouldReturnRvalueByConstRef[128370](arg t[128368]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517613] "RVV" "param" "temp"
    (517618 'move' ret[517613](517617 'deref' 1))
    (517615 return ret[517613])
  }
  function shouldReturnRvalueByValue[128382](arg t[128380]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517622] "RVV" "param" "temp"
    unknown call_tmp[656964] "expr temp" "maybe param" "maybe type" "temp"
    (656967 'move' call_tmp[656964](128385 call ! PODValAccess[113737]))
    unknown call_tmp[656969] "expr temp" "maybe param" "maybe type" "temp"
    (656972 'move' call_tmp[656969](128390 call _cond_test call_tmp[656964]))
    if call_tmp[656969]
    {
      (517627 'move' ret[517622](517626 'deref' 0))
      gotoReturn _end_shouldReturnRvalueByValue[517620] _end_shouldReturnRvalueByValue[517620]
    }
    unknown call_tmp[656974] "expr temp" "maybe param" "maybe type" "temp"
    (656977 'move' call_tmp[656974](128399 call isPODType t[128380]))
    unknown call_tmp[656979] "expr temp" "maybe param" "maybe type" "temp"
    (656982 'move' call_tmp[656979](128403 call _cond_test call_tmp[656974]))
    if call_tmp[656979]
    {
      (517632 'move' ret[517622](517631 'deref' 1))
      gotoReturn _end_shouldReturnRvalueByValue[517620] _end_shouldReturnRvalueByValue[517620]
    }
    (517637 'move' ret[517622](517636 'deref' 0))
    label _end_shouldReturnRvalueByValue[517620]
    (517624 return ret[517622])
  }
  function _array[133588](?).chpl__serialize[128430](arg _mt[133592]:_MT[238], arg this[133590]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517641] "RVV" "temp"
    unknown call_tmp[656986] "expr temp" "maybe param" "maybe type" "temp"
    (656989 'move' call_tmp[656986](359636 call _instance _mt[243] this[133590]))
    unknown call_tmp[656993] "expr temp" "maybe param" "maybe type" "temp"
    (656996 'move' call_tmp[656993](128445 call(128441 call (partial) chpl__serialize _mt[243] call_tmp[656986])))
    (517646 'move' ret[517641](517645 'deref' call_tmp[656993]))
    (517643 return ret[517641])
  }
  where {
    unknown call_tmp[657000] "expr temp" "maybe param" "maybe type" "temp"
    (657003 'move' call_tmp[657000](359631 call _instance _mt[243] this[133590]))
    (128439 call(128435 call (partial) chpl__rvfMe _mt[243] call_tmp[657000]))
  }
  function _array[133588](?).chpl__deserialize[128456](arg _mt[133596]:_MT[238], arg this[133594]:_array[133588](?), arg data[128454]:_any[178](?)) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[517650] "RVV" "temp"
    unknown call_tmp[657007] "expr temp" "maybe param" "maybe type" "temp"
    (657010 'move' call_tmp[657007](128463 'static field type' this[133594] "_instance"))
    unknown call_tmp[657012] "expr temp" "maybe param" "maybe type" "temp"
    (657015 'move' call_tmp[657012](128465 call _to_borrowed call_tmp[657007]))
    unknown call_tmp[657019] "maybe param" "maybe type" "temp"
    (657022 'move' call_tmp[657019](128471 call(128466 call (partial) chpl__deserialize _mt[243] call_tmp[657012]) data[128454]))
    unknown arrinst[128472] "dead at end of block" "insert auto destroy"
    (542838 'init var' arrinst[128472] call_tmp[657019])
    (128475 'end of statement')
    unknown call_tmp[657024] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (657027 'move' call_tmp[657024](747792 'new' _array[133588](?) nullPid[113712] arrinst[128472](_unowned = 1)))
    (517655 'move' ret[517650](517654 'deref' call_tmp[657024]))
    gotoReturn _end_chpl__deserialize[517648] _end_chpl__deserialize[517648]
    (479966 'end of statement' arrinst[128472])
    label _end_chpl__deserialize[517648]
    (517652 return ret[517650])
  }
  function _array[133588](?).chpl__promotionType[128491](arg _mt[133600]:_MT[238], arg this[133598]:_array[133588](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[517661] "RVV" "temp" "type variable"
    unknown call_tmp[657031] "expr temp" "maybe param" "maybe type" "temp"
    (657034 'move' call_tmp[657031](359640 call _value _mt[243] this[133598]))
    unknown call_tmp[657038] "expr temp" "maybe param" "maybe type" "temp"
    (657041 'move' call_tmp[657038](128494 call eltType _mt[243] call_tmp[657031]))
    (517666 'move' ret[517661](517665 'deref' call_tmp[657038]))
    (517663 return ret[517661])
  }
  function _array[133588](?)._value[128504](arg _mt[133604]:_MT[238], arg this[133602]:_array[133588](?)) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    unknown ret[517670] "RVV" "temp"
    unknown call_tmp[657045] "expr temp" "maybe param" "maybe type" "temp"
    (657048 'move' call_tmp[657045](383644 call _instance _mt[243] this[133602]))
    unknown call_tmp[657050] "expr temp" "maybe param" "maybe type" "temp"
    (657053 'move' call_tmp[657050](128509 call _isPrivatized call_tmp[657045]))
    unknown call_tmp[657055] "expr temp" "maybe param" "maybe type" "temp"
    (657058 'move' call_tmp[657055](128523 call _cond_test call_tmp[657050]))
    if call_tmp[657055]
    {
      { scopeless type
        unknown call_type_tmp[492084] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[657062] "expr temp" "maybe param" "maybe type" "temp"
        (657065 'move' call_tmp[657062](383649 call _instance _mt[243] this[133602]))
        (492088 'move' call_type_tmp[492084](128512 'typeof' call_tmp[657062]))
      }
      unknown call_tmp[657069] "expr temp" "maybe param" "maybe type" "temp"
      (657072 'move' call_tmp[657069](383654 call _pid _mt[243] this[133602]))
      unknown call_tmp[657074] "expr temp" "maybe param" "maybe type" "temp"
      (657077 'move' call_tmp[657074](128515 call chpl_getPrivatizedCopy call_type_tmp[492084] call_tmp[657069]))
      (517675 'move' ret[517670](517674 'deref' call_tmp[657074]))
      gotoReturn _end__value[517668] _end__value[517668]
    }
    {
      unknown call_tmp[657081] "expr temp" "maybe param" "maybe type" "temp"
      (657084 'move' call_tmp[657081](383659 call _instance _mt[243] this[133602]))
      (517680 'move' ret[517670](517679 'deref' call_tmp[657081]))
      gotoReturn _end__value[517668] _end__value[517668]
    }
    label _end__value[517668]
    (517672 return ret[517670])
  }
  function _array[133588](?).chpl_forwarding_expr6__value[128537](arg _mt[133608]:_MT[238], arg this[133606]:_array[133588](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[517686] "RVV" "temp"
    (517690 'move' ret[517686](383663 call _value _mt[243] this[133606]))
    (517688 return ret[517686])
  }
  function _array[133588](?).deinit[128545](arg _mt[133612]:_MT[238], arg this[133610]:_array[133588](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (128550 call _do_destroy_array this[133610])
    (517692 return _void[55])
  }
  function _array[133588](?).eltType[128557](arg _mt[133616]:_MT[238], arg this[133614]:_array[133588](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517696] "RVV" "temp" "type variable"
    unknown call_tmp[657090] "expr temp" "maybe param" "maybe type" "temp"
    (657093 'move' call_tmp[657090](359644 call _value _mt[243] this[133614]))
    unknown call_tmp[657097] "expr temp" "maybe param" "maybe type" "temp"
    (657100 'move' call_tmp[657097](128560 call eltType _mt[243] call_tmp[657090]))
    (517701 'move' ret[517696](517700 'deref' call_tmp[657097]))
    (517698 return ret[517696])
  }
  function _array[133588](?).idxType[128570](arg _mt[133620]:_MT[238], arg this[133618]:_array[133588](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517705] "RVV" "temp" "type variable"
    unknown call_tmp[657104] "expr temp" "maybe param" "maybe type" "temp"
    (657107 'move' call_tmp[657104](359648 call _value _mt[243] this[133618]))
    unknown call_tmp[657111] "expr temp" "maybe param" "maybe type" "temp"
    (657114 'move' call_tmp[657111](128573 call idxType _mt[243] call_tmp[657104]))
    (517710 'move' ret[517705](517709 'deref' call_tmp[657111]))
    (517707 return ret[517705])
  }
  function _array[133588](?)._dom[128583](arg _mt[133624]:_MT[238], arg this[133622]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517714] "RVV" "temp"
    unknown call_tmp[657118] "expr temp" "maybe param" "maybe type" "temp"
    (657121 'move' call_tmp[657118](359652 call _value _mt[243] this[133622]))
    unknown call_tmp[657125] "expr temp" "maybe param" "maybe type" "temp"
    (657128 'move' call_tmp[657125](128587 call dom _mt[243] call_tmp[657118]))
    unknown call_tmp[657130] "expr temp" "maybe param" "maybe type" "temp"
    (657133 'move' call_tmp[657130](128591 call _getDomain call_tmp[657125]))
    (517719 'move' ret[517714](517718 'deref' call_tmp[657130]))
    (517716 return ret[517714])
  }
  function _array[133588](?).rank[128599](arg _mt[133628]:_MT[238], arg this[133626]:_array[133588](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517723] "RVV" "param" "temp"
    unknown call_tmp[657137] "expr temp" "maybe param" "maybe type" "temp"
    (657140 'move' call_tmp[657137](128602 call _dom _mt[243] this[133626]))
    unknown call_tmp[657144] "expr temp" "maybe param" "maybe type" "temp"
    (657147 'move' call_tmp[657144](128605 call rank _mt[243] call_tmp[657137]))
    (517728 'move' ret[517723](517727 'deref' call_tmp[657144]))
    (517725 return ret[517723])
  }
  function _array[133588](?).indices[128615](arg _mt[133632]:_MT[238], arg this[133630]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517732] "RVV" "temp"
    unknown call_tmp[657151] "expr temp" "maybe param" "maybe type" "temp"
    (657154 'move' call_tmp[657151](383668 call _dom _mt[243] this[133630]))
    (517737 'move' ret[517732](517736 'deref' call_tmp[657151]))
    (517734 return ret[517732])
  }
  function _array[133588](?).checkAccess[128627](arg _mt[133636]:_MT[238], arg this[133634]:_array[133588](?), arg indices[128625]:_any[178](?), arg value[128629]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657156] "expr temp" "maybe param" "maybe type" "temp"
    (657159 'move' call_tmp[657156](128634 call isRectangularArr this[133634]))
    unknown call_tmp[657161] "expr temp" "maybe param" "maybe type" "temp"
    (657164 'move' call_tmp[657161](129150 call _cond_test call_tmp[657156]))
    if call_tmp[657161]
    {
      unknown call_tmp[657168] "expr temp" "maybe param" "maybe type" "temp"
      (657171 'move' call_tmp[657168](128643 call(128638 call (partial) dsiBoundsCheck _mt[243] value[128629]) indices[128625]))
      unknown call_tmp[657173] "expr temp" "maybe param" "maybe type" "temp"
      (657176 'move' call_tmp[657173](128644 call ! call_tmp[657168]))
      unknown call_tmp[657178] "expr temp" "maybe param" "maybe type" "temp"
      (657181 'move' call_tmp[657178](129145 call _cond_test call_tmp[657173]))
      if call_tmp[657178]
      {
        unknown call_tmp[657185] "expr temp" "maybe param" "maybe type" "temp"
        (657188 'move' call_tmp[657185](383674 call rank _mt[243] this[133634]))
        unknown call_tmp[657190] "expr temp" "maybe param" "maybe type" "temp"
        (657193 'move' call_tmp[657190](128648 call == call_tmp[657185] 1))
        unknown call_tmp[657195] "expr temp" "maybe param" "maybe type" "temp"
        (657198 'move' call_tmp[657195](129140 call _cond_test call_tmp[657190]))
        if call_tmp[657195]
        {
          unknown call_tmp[657200] "expr temp" "maybe param" "maybe type" "temp"
          (657203 'move' call_tmp[657200](128689 call indices[128625] 0))
          unknown call_tmp[657207] "expr temp" "maybe param" "maybe type" "temp"
          (657210 'move' call_tmp[657207](128708 call dom _mt[243] value[128629]))
          unknown call_tmp[657214] "expr temp" "maybe param" "maybe type" "temp"
          (657217 'move' call_tmp[657214](128716 call(128711 call (partial) dsiDim _mt[243] call_tmp[657207]) 0))
          (128717 call halt "array index out of bounds\n" "note: index was " call_tmp[657200] " but array bounds are " call_tmp[657214])
        }
        {
          unknown istr[128737] "dead at end of block" "insert auto destroy"
          (542840 'init var' istr[128737] "")
          (128740 'end of statement')
          unknown bstr[128759] "dead at end of block" "insert auto destroy"
          (542842 'init var' bstr[128759] "")
          (128762 'end of statement')
          {
            unknown i[128818] "dead at end of block" "insert auto destroy"
            (542844 'init var' i[128818] 0)
            (479978 'end of statement')
            unknown tmp[128819] "maybe param" "temp"
            unknown call_tmp[657221] "expr temp" "maybe param" "maybe type" "temp"
            (657224 'move' call_tmp[657221](383679 call rank _mt[243] this[133634]))
            unknown call_tmp[657226] "expr temp" "maybe param" "maybe type" "temp"
            (657229 'move' call_tmp[657226](128766 call - call_tmp[657221] 1))
            (128831 'move' tmp[128819](128829 call chpl_compute_low_param_loop_bound 0 call_tmp[657226]))
            unknown tmp[128820] "maybe param" "temp"
            unknown call_tmp[657233] "expr temp" "maybe param" "maybe type" "temp"
            (657236 'move' call_tmp[657233](383691 call rank _mt[243] this[133634]))
            unknown call_tmp[657238] "expr temp" "maybe param" "maybe type" "temp"
            (657241 'move' call_tmp[657238](128836 call - call_tmp[657233] 1))
            (128841 'move' tmp[128820](128839 call chpl_compute_high_param_loop_bound 0 call_tmp[657238]))
            unknown tmp[128821] "maybe param" "temp"
            (128844 'move' tmp[128821] 1)
            ParamForLoop[128846]
            { i[128818] tmp[128819] tmp[128820] tmp[128821]
              {
                unknown call_tmp[657243] "expr temp" "maybe param" "maybe type" "temp"
                (657246 'move' call_tmp[657243](128772 call != i[128818] 0))
                unknown call_tmp[657248] "expr temp" "maybe param" "maybe type" "temp"
                (657251 'move' call_tmp[657248](128785 call _cond_test call_tmp[657243]))
                if call_tmp[657248]
                {
                  (128776 call += istr[128737] ", ")
                  (479979 'end of statement' istr[128737])
                  (128782 call += bstr[128759] ", ")
                  (479981 'end of statement' bstr[128759])
                }
                unknown call_tmp[657253] "expr temp" "maybe param" "maybe type" "temp"
                (657256 'move' call_tmp[657253](128794 call indices[128625] i[128818]))
                unknown call_tmp[657258] "expr temp" "maybe param" "maybe type" "temp"
                (657261 'move' call_tmp[657258](128796 call _cast string[26] call_tmp[657253]))
                (128798 call += istr[128737] call_tmp[657258])
                (479983 'end of statement' istr[128737] i[128818])
                unknown call_tmp[657265] "expr temp" "maybe param" "maybe type" "temp"
                (657268 'move' call_tmp[657265](128803 call dom _mt[243] value[128629]))
                unknown call_tmp[657272] "expr temp" "maybe param" "maybe type" "temp"
                (657275 'move' call_tmp[657272](128811 call(128806 call (partial) dsiDim _mt[243] call_tmp[657265]) i[128818]))
                unknown call_tmp[657277] "expr temp" "maybe param" "maybe type" "temp"
                (657280 'move' call_tmp[657277](128813 call _cast string[26] call_tmp[657272]))
                (128815 call += bstr[128759] call_tmp[657277])
                (479986 'end of statement' bstr[128759] i[128818])
              }
            }
            label _unused_continueLabel[128823]
            label _breakLabel[128822]
          }
          unknown dimstr[128872] "dead at end of block" "insert auto destroy"
          (542846 'init var' dimstr[128872] "")
          (128875 'end of statement')
          {
            unknown i[129026] "dead at end of block" "insert auto destroy"
            (542848 'init var' i[129026] 0)
            (479989 'end of statement')
            unknown tmp[129027] "maybe param" "temp"
            unknown call_tmp[657284] "expr temp" "maybe param" "maybe type" "temp"
            (657287 'move' call_tmp[657284](383695 call rank _mt[243] this[133634]))
            unknown call_tmp[657289] "expr temp" "maybe param" "maybe type" "temp"
            (657292 'move' call_tmp[657289](128879 call - call_tmp[657284] 1))
            (129039 'move' tmp[129027](129037 call chpl_compute_low_param_loop_bound 0 call_tmp[657289]))
            unknown tmp[129028] "maybe param" "temp"
            unknown call_tmp[657296] "expr temp" "maybe param" "maybe type" "temp"
            (657299 'move' call_tmp[657296](383708 call rank _mt[243] this[133634]))
            unknown call_tmp[657301] "expr temp" "maybe param" "maybe type" "temp"
            (657304 'move' call_tmp[657301](129044 call - call_tmp[657296] 1))
            (129049 'move' tmp[129028](129047 call chpl_compute_high_param_loop_bound 0 call_tmp[657301]))
            unknown tmp[129029] "maybe param" "temp"
            (129052 'move' tmp[129029] 1)
            ParamForLoop[129054]
            { i[129026] tmp[129027] tmp[129028] tmp[129029]
              {
                unknown call_tmp[657308] "expr temp" "maybe param" "maybe type" "temp"
                (657311 'move' call_tmp[657308](128884 call dom _mt[243] value[128629]))
                unknown call_tmp[657315] "expr temp" "maybe param" "maybe type" "temp"
                (657318 'move' call_tmp[657315](128892 call(128887 call (partial) dsiDim _mt[243] call_tmp[657308]) i[129026]))
                unknown call_tmp[657322] "expr temp" "maybe param" "maybe type" "temp"
                (657325 'move' call_tmp[657322](128901 call indices[128625] i[129026]))
                unknown call_tmp[657327] "expr temp" "maybe param" "maybe type" "temp"
                (657330 'move' call_tmp[657327](128903 call(128895 call (partial) boundsCheck _mt[243] call_tmp[657315]) call_tmp[657322]))
                unknown call_tmp[657332] "expr temp" "maybe param" "maybe type" "temp"
                (657335 'move' call_tmp[657332](128904 call ! call_tmp[657327]))
                unknown call_tmp[657337] "expr temp" "maybe param" "maybe type" "temp"
                (657340 'move' call_tmp[657337](129021 call _cond_test call_tmp[657332]))
                if call_tmp[657337]
                {
                  unknown call_tmp[657342] "expr temp" "maybe param" "maybe type" "temp"
                  (657345 'move' call_tmp[657342](128924 call == dimstr[128872] ""))
                  unknown call_tmp[657347] "expr temp" "maybe param" "maybe type" "temp"
                  (657350 'move' call_tmp[657347](129016 call _cond_test call_tmp[657342]))
                  if call_tmp[657347]
                  {
                    unknown call_tmp[657352] "expr temp" "maybe param" "maybe type" "temp"
                    (657355 'move' call_tmp[657352](128946 call _cast string[26] i[129026]))
                    unknown call_tmp[657357] "expr temp" "maybe param" "maybe type" "temp"
                    (657360 'move' call_tmp[657357](128948 call + "out of bounds in dimension " call_tmp[657352]))
                    unknown call_tmp[657362] "expr temp" "maybe param" "maybe type" "temp"
                    (657365 'move' call_tmp[657362](128967 call + call_tmp[657357] " because index "))
                    unknown call_tmp[657367] "expr temp" "maybe param" "maybe type" "temp"
                    (657370 'move' call_tmp[657367](128972 call indices[128625] i[129026]))
                    unknown call_tmp[657372] "expr temp" "maybe param" "maybe type" "temp"
                    (657375 'move' call_tmp[657372](128974 call _cast string[26] call_tmp[657367]))
                    unknown call_tmp[657377] "expr temp" "maybe param" "maybe type" "temp"
                    (657380 'move' call_tmp[657377](128976 call + call_tmp[657362] call_tmp[657372]))
                    unknown call_tmp[657382] "expr temp" "maybe param" "maybe type" "temp"
                    (657385 'move' call_tmp[657382](128995 call + call_tmp[657377] " is not in "))
                    unknown call_tmp[657389] "expr temp" "maybe param" "maybe type" "temp"
                    (657392 'move' call_tmp[657389](128998 call dom _mt[243] value[128629]))
                    unknown call_tmp[657396] "expr temp" "maybe param" "maybe type" "temp"
                    (657399 'move' call_tmp[657396](129006 call(129001 call (partial) dsiDim _mt[243] call_tmp[657389]) i[129026]))
                    unknown call_tmp[657401] "expr temp" "maybe param" "maybe type" "temp"
                    (657404 'move' call_tmp[657401](129008 call _cast string[26] call_tmp[657396]))
                    unknown call_tmp[657406] "expr temp" "maybe param" "maybe type" "temp"
                    (657409 'move' call_tmp[657406](129010 call + call_tmp[657382] call_tmp[657401]))
                    (129012 call = dimstr[128872] call_tmp[657406])
                    (479990 'end of statement' dimstr[128872] i[129026] i[129026] i[129026])
                  }
                }
              }
            }
            label _unused_continueLabel[129031]
            label _breakLabel[129030]
          }
          (129138 call halt "array index out of bounds\n" "note: index was (" istr[128737] ") " "but array bounds are (" bstr[128759] ")\n" "note: " dimstr[128872])
          (479995 'end of statement' istr[128737] bstr[128759] dimstr[128872])
        }
      }
    }
    (517739 return _void[55])
  }
  function _array[133588](?).checkSlice[129163](arg _mt[133640]:_MT[238], arg this[133638]:_array[133588](?), arg d[129160]:_domain[125902](?), arg value[129165]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657415] "expr temp" "maybe param" "maybe type" "temp"
    (657418 'move' call_tmp[657415](129173 call(129169 call (partial) dsiDims _mt[243] d[129160])))
    (129178 call(383718 call (partial) checkSlice _mt[243] this[133638])(129174 'expand_tuple' call_tmp[657415])(value = value[129165]))
    (517741 return _void[55])
  }
  function _array[133588](?).checkSlice[129189](arg _mt[133644]:_MT[238], arg this[133642]:_array[133588](?), arg ranges[129186]:_any[178](?) ..., arg value[129191]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657422] "expr temp" "maybe param" "maybe type" "temp"
    (657425 'move' call_tmp[657422](129200 call isRectangularArr this[133642]))
    unknown call_tmp[657427] "expr temp" "maybe param" "maybe type" "temp"
    (657430 'move' call_tmp[657427](129693 call _cond_test call_tmp[657422]))
    if call_tmp[657427]
    {
      unknown ok[129202] "dead at end of block" "insert auto destroy"
      (542850 'init var' ok[129202] 1)
      (129205 'end of statement')
      {
        unknown i[129247] "dead at end of block" "insert auto destroy"
        (542852 'init var' i[129247] 0)
        (480000 'end of statement')
        unknown tmp[129248] "maybe param" "temp"
        unknown call_tmp[657434] "expr temp" "maybe param" "maybe type" "temp"
        (657437 'move' call_tmp[657434](383729 call rank _mt[243] this[133642]))
        unknown call_tmp[657439] "expr temp" "maybe param" "maybe type" "temp"
        (657442 'move' call_tmp[657439](129210 call - call_tmp[657434] 1))
        (129260 'move' tmp[129248](129258 call chpl_compute_low_param_loop_bound 0 call_tmp[657439]))
        unknown tmp[129249] "maybe param" "temp"
        unknown call_tmp[657446] "expr temp" "maybe param" "maybe type" "temp"
        (657449 'move' call_tmp[657446](383737 call rank _mt[243] this[133642]))
        unknown call_tmp[657451] "expr temp" "maybe param" "maybe type" "temp"
        (657454 'move' call_tmp[657451](129265 call - call_tmp[657446] 1))
        (129270 'move' tmp[129249](129268 call chpl_compute_high_param_loop_bound 0 call_tmp[657451]))
        unknown tmp[129250] "maybe param" "temp"
        (129273 'move' tmp[129250] 1)
        ParamForLoop[129275]
        { i[129247] tmp[129248] tmp[129249] tmp[129250]
          {
            {
              unknown tmp[129235] "temp"
              (129238 'move' tmp[129235](129237 'addr of' ok[129202]))
              unknown tmp[425257] "maybe param" "temp"
              (425268 'move' tmp[425257] tmp[129235])
              unknown call_tmp[657456] "expr temp" "maybe param" "maybe type" "temp"
              (657459 'move' call_tmp[657456](425270 call _cond_invalid tmp[425257]))
              if call_tmp[657456]
              {
                (425273 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565962] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565963] "maybe param" "temp"
              unknown call_tmp[657461] "expr temp" "maybe param" "maybe type" "temp"
              (657464 'move' call_tmp[657461](425258 call isTrue tmp[425257]))
              (565968 'move' tmp[565963](565966 call _cond_test call_tmp[657461]))
              if tmp[565963]
              {
                unknown tmp[565970] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[657468] "expr temp" "maybe param" "maybe type" "temp"
                (657471 'move' call_tmp[657468](129216 call dom _mt[243] value[129191]))
                unknown call_tmp[657475] "expr temp" "maybe param" "maybe type" "temp"
                (657478 'move' call_tmp[657475](129224 call(129219 call (partial) dsiDim _mt[243] call_tmp[657468]) i[129247]))
                unknown call_tmp[657482] "expr temp" "maybe param" "maybe type" "temp"
                (657485 'move' call_tmp[657482](129231 call ranges[129186] i[129247]))
                unknown call_tmp[657487] "expr temp" "maybe param" "maybe type" "temp"
                (657490 'move' call_tmp[657487](129233 call(129225 call (partial) boundsCheck _mt[243] call_tmp[657475]) call_tmp[657482]))
                (565972 'move' tmp[565970](425261 call isTrue call_tmp[657487]))
                (565977 'move' tmp[565962](565974 '_paramFoldLogical' tmp[565963] tmp[565970]))
              }
              {
                (565982 'move' tmp[565962](565979 '_paramFoldLogical' tmp[565963] 0))
              }
              (129243 call = tmp[129235] tmp[565962])
              (480002 'end of statement' i[129247] i[129247])
            }
          }
        }
        label _unused_continueLabel[129252]
        label _breakLabel[129251]
      }
      unknown call_tmp[657492] "expr temp" "maybe param" "maybe type" "temp"
      (657495 'move' call_tmp[657492](129286 call == ok[129202] 0))
      unknown call_tmp[657497] "expr temp" "maybe param" "maybe type" "temp"
      (657500 'move' call_tmp[657497](129689 call _cond_test call_tmp[657492]))
      if call_tmp[657497]
      {
        unknown call_tmp[657504] "expr temp" "maybe param" "maybe type" "temp"
        (657507 'move' call_tmp[657504](383742 call rank _mt[243] this[133642]))
        unknown call_tmp[657509] "expr temp" "maybe param" "maybe type" "temp"
        (657512 'move' call_tmp[657509](129290 call == call_tmp[657504] 1))
        unknown call_tmp[657514] "expr temp" "maybe param" "maybe type" "temp"
        (657517 'move' call_tmp[657514](129684 call _cond_test call_tmp[657509]))
        if call_tmp[657514]
        {
          unknown call_tmp[657519] "expr temp" "maybe param" "maybe type" "temp"
          (657522 'move' call_tmp[657519](129331 call ranges[129186] 0))
          unknown call_tmp[657526] "expr temp" "maybe param" "maybe type" "temp"
          (657529 'move' call_tmp[657526](129334 call dom _mt[243] value[129191]))
          unknown call_tmp[657533] "expr temp" "maybe param" "maybe type" "temp"
          (657536 'move' call_tmp[657533](129342 call(129337 call (partial) dsiDim _mt[243] call_tmp[657526]) 0))
          (129343 call halt "array slice out of bounds\n" "note: slice index was " call_tmp[657519] " but array bounds are " call_tmp[657533])
        }
        {
          unknown istr[129363] "dead at end of block" "insert auto destroy"
          (542854 'init var' istr[129363] "")
          (129366 'end of statement')
          unknown bstr[129385] "dead at end of block" "insert auto destroy"
          (542856 'init var' bstr[129385] "")
          (129388 'end of statement')
          {
            unknown i[129444] "dead at end of block" "insert auto destroy"
            (542858 'init var' i[129444] 0)
            (480006 'end of statement')
            unknown tmp[129445] "maybe param" "temp"
            unknown call_tmp[657540] "expr temp" "maybe param" "maybe type" "temp"
            (657543 'move' call_tmp[657540](383747 call rank _mt[243] this[133642]))
            unknown call_tmp[657545] "expr temp" "maybe param" "maybe type" "temp"
            (657548 'move' call_tmp[657545](129392 call - call_tmp[657540] 1))
            (129457 'move' tmp[129445](129455 call chpl_compute_low_param_loop_bound 0 call_tmp[657545]))
            unknown tmp[129446] "maybe param" "temp"
            unknown call_tmp[657552] "expr temp" "maybe param" "maybe type" "temp"
            (657555 'move' call_tmp[657552](383759 call rank _mt[243] this[133642]))
            unknown call_tmp[657557] "expr temp" "maybe param" "maybe type" "temp"
            (657560 'move' call_tmp[657557](129462 call - call_tmp[657552] 1))
            (129467 'move' tmp[129446](129465 call chpl_compute_high_param_loop_bound 0 call_tmp[657557]))
            unknown tmp[129447] "maybe param" "temp"
            (129470 'move' tmp[129447] 1)
            ParamForLoop[129472]
            { i[129444] tmp[129445] tmp[129446] tmp[129447]
              {
                unknown call_tmp[657562] "expr temp" "maybe param" "maybe type" "temp"
                (657565 'move' call_tmp[657562](129398 call != i[129444] 0))
                unknown call_tmp[657567] "expr temp" "maybe param" "maybe type" "temp"
                (657570 'move' call_tmp[657567](129411 call _cond_test call_tmp[657562]))
                if call_tmp[657567]
                {
                  (129402 call += istr[129363] ", ")
                  (480007 'end of statement' istr[129363])
                  (129408 call += bstr[129385] ", ")
                  (480009 'end of statement' bstr[129385])
                }
                unknown call_tmp[657572] "expr temp" "maybe param" "maybe type" "temp"
                (657575 'move' call_tmp[657572](129420 call ranges[129186] i[129444]))
                unknown call_tmp[657577] "expr temp" "maybe param" "maybe type" "temp"
                (657580 'move' call_tmp[657577](129422 call _cast string[26] call_tmp[657572]))
                (129424 call += istr[129363] call_tmp[657577])
                (480011 'end of statement' istr[129363] i[129444])
                unknown call_tmp[657584] "expr temp" "maybe param" "maybe type" "temp"
                (657587 'move' call_tmp[657584](129429 call dom _mt[243] value[129191]))
                unknown call_tmp[657591] "expr temp" "maybe param" "maybe type" "temp"
                (657594 'move' call_tmp[657591](129437 call(129432 call (partial) dsiDim _mt[243] call_tmp[657584]) i[129444]))
                unknown call_tmp[657596] "expr temp" "maybe param" "maybe type" "temp"
                (657599 'move' call_tmp[657596](129439 call _cast string[26] call_tmp[657591]))
                (129441 call += bstr[129385] call_tmp[657596])
                (480014 'end of statement' bstr[129385] i[129444])
              }
            }
            label _unused_continueLabel[129449]
            label _breakLabel[129448]
          }
          unknown dimstr[129498] "dead at end of block" "insert auto destroy"
          (542860 'init var' dimstr[129498] "")
          (129501 'end of statement')
          {
            unknown i[129618] "dead at end of block" "insert auto destroy"
            (542862 'init var' i[129618] 0)
            (480017 'end of statement')
            unknown tmp[129619] "maybe param" "temp"
            unknown call_tmp[657603] "expr temp" "maybe param" "maybe type" "temp"
            (657606 'move' call_tmp[657603](383763 call rank _mt[243] this[133642]))
            unknown call_tmp[657608] "expr temp" "maybe param" "maybe type" "temp"
            (657611 'move' call_tmp[657608](129505 call - call_tmp[657603] 1))
            (129631 'move' tmp[129619](129629 call chpl_compute_low_param_loop_bound 0 call_tmp[657608]))
            unknown tmp[129620] "maybe param" "temp"
            unknown call_tmp[657615] "expr temp" "maybe param" "maybe type" "temp"
            (657618 'move' call_tmp[657615](383776 call rank _mt[243] this[133642]))
            unknown call_tmp[657620] "expr temp" "maybe param" "maybe type" "temp"
            (657623 'move' call_tmp[657620](129636 call - call_tmp[657615] 1))
            (129641 'move' tmp[129620](129639 call chpl_compute_high_param_loop_bound 0 call_tmp[657620]))
            unknown tmp[129621] "maybe param" "temp"
            (129644 'move' tmp[129621] 1)
            ParamForLoop[129646]
            { i[129618] tmp[129619] tmp[129620] tmp[129621]
              {
                unknown call_tmp[657627] "expr temp" "maybe param" "maybe type" "temp"
                (657630 'move' call_tmp[657627](129510 call dom _mt[243] value[129191]))
                unknown call_tmp[657634] "expr temp" "maybe param" "maybe type" "temp"
                (657637 'move' call_tmp[657634](129518 call(129513 call (partial) dsiDim _mt[243] call_tmp[657627]) i[129618]))
                unknown call_tmp[657641] "expr temp" "maybe param" "maybe type" "temp"
                (657644 'move' call_tmp[657641](129525 call ranges[129186] i[129618]))
                unknown call_tmp[657646] "expr temp" "maybe param" "maybe type" "temp"
                (657649 'move' call_tmp[657646](129527 call(129519 call (partial) boundsCheck _mt[243] call_tmp[657634]) call_tmp[657641]))
                unknown call_tmp[657651] "expr temp" "maybe param" "maybe type" "temp"
                (657654 'move' call_tmp[657651](129528 call ! call_tmp[657646]))
                unknown call_tmp[657656] "expr temp" "maybe param" "maybe type" "temp"
                (657659 'move' call_tmp[657656](129613 call _cond_test call_tmp[657651]))
                if call_tmp[657656]
                {
                  unknown call_tmp[657661] "expr temp" "maybe param" "maybe type" "temp"
                  (657664 'move' call_tmp[657661](129548 call == dimstr[129498] ""))
                  unknown call_tmp[657666] "expr temp" "maybe param" "maybe type" "temp"
                  (657669 'move' call_tmp[657666](129608 call _cond_test call_tmp[657661]))
                  if call_tmp[657666]
                  {
                    unknown call_tmp[657671] "expr temp" "maybe param" "maybe type" "temp"
                    (657674 'move' call_tmp[657671](129554 call _cast string[26] i[129618]))
                    unknown call_tmp[657676] "expr temp" "maybe param" "maybe type" "temp"
                    (657679 'move' call_tmp[657676](129556 call + "out of bounds in dimension " call_tmp[657671]))
                    unknown call_tmp[657681] "expr temp" "maybe param" "maybe type" "temp"
                    (657684 'move' call_tmp[657681](129575 call + call_tmp[657676] " because slice index "))
                    unknown call_tmp[657686] "expr temp" "maybe param" "maybe type" "temp"
                    (657689 'move' call_tmp[657686](129580 call ranges[129186] i[129618]))
                    unknown call_tmp[657691] "expr temp" "maybe param" "maybe type" "temp"
                    (657694 'move' call_tmp[657691](129582 call _cast string[26] call_tmp[657686]))
                    unknown call_tmp[657696] "expr temp" "maybe param" "maybe type" "temp"
                    (657699 'move' call_tmp[657696](129584 call + call_tmp[657681] call_tmp[657691]))
                    unknown call_tmp[657701] "expr temp" "maybe param" "maybe type" "temp"
                    (657704 'move' call_tmp[657701](129587 call + call_tmp[657696] " is not in "))
                    unknown call_tmp[657708] "expr temp" "maybe param" "maybe type" "temp"
                    (657711 'move' call_tmp[657708](129590 call dom _mt[243] value[129191]))
                    unknown call_tmp[657715] "expr temp" "maybe param" "maybe type" "temp"
                    (657718 'move' call_tmp[657715](129598 call(129593 call (partial) dsiDim _mt[243] call_tmp[657708]) i[129618]))
                    unknown call_tmp[657720] "expr temp" "maybe param" "maybe type" "temp"
                    (657723 'move' call_tmp[657720](129600 call _cast string[26] call_tmp[657715]))
                    unknown call_tmp[657725] "expr temp" "maybe param" "maybe type" "temp"
                    (657728 'move' call_tmp[657725](129602 call + call_tmp[657701] call_tmp[657720]))
                    (129604 call = dimstr[129498] call_tmp[657725])
                    (480018 'end of statement' dimstr[129498] i[129618] i[129618] i[129618])
                  }
                }
              }
            }
            label _unused_continueLabel[129623]
            label _breakLabel[129622]
          }
          (129682 call halt "array slice out of bounds\n" "note: slice index was (" istr[129363] ") " "but array bounds are (" bstr[129385] ")\n" "note: " dimstr[129498])
          (480023 'end of statement' istr[129363] bstr[129385] dimstr[129498])
        }
      }
    }
    (517743 return _void[55])
  }
  where {
    (129196 call chpl__isTupleOfRanges ranges[129186])
  }
  function _array[133588](?).this[129716](arg _mt[133648]:_MT[238], ref arg this[133646]:_array[133588](?), arg i[129713] :
  unknown call_tmp[657732] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[517747] "RVV" "temp"
    unknown call_tmp[657760] "maybe param" "maybe type" "temp"
    (657763 'move' call_tmp[657760](383787 call _value _mt[243] this[133646]))
    const value[129719] "dead at end of block" "const" "insert auto destroy"
    (542864 'init var' value[129719] call_tmp[657760])
    (129722 'end of statement')
    unknown call_tmp[657765] "expr temp" "maybe param" "maybe type" "temp"
    (657768 'move' call_tmp[657765](129732 call _cond_test 1))
    if call_tmp[657765]
    {
      (129730 call(383794 call (partial) checkAccess _mt[243] this[133646]) i[129713](value = value[129719]))
      (480027 'end of statement' value[129719])
    }
    unknown tmp[425278] "maybe param" "temp"
    (425289 'move' tmp[425278](129740 call isRectangularArr this[133646]))
    unknown call_tmp[657772] "expr temp" "maybe param" "maybe type" "temp"
    (657775 'move' call_tmp[657772](425291 call _cond_invalid tmp[425278]))
    if call_tmp[657772]
    {
      (425294 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565989] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565990] "maybe param" "temp"
    unknown call_tmp[657777] "expr temp" "maybe param" "maybe type" "temp"
    (657780 'move' call_tmp[657777](425279 call isTrue tmp[425278]))
    (565995 'move' tmp[565990](565993 call _cond_test call_tmp[657777]))
    if tmp[565990]
    {
      (566000 'move' tmp[565989](565997 '_paramFoldLogical' tmp[565990] 1))
    }
    {
      unknown tmp[566002] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657782] "expr temp" "maybe param" "maybe type" "temp"
      (657785 'move' call_tmp[657782](129744 call isSparseArr this[133646]))
      (566004 'move' tmp[566002](425283 call isTrue call_tmp[657782]))
      (566009 'move' tmp[565989](566006 '_paramFoldLogical' tmp[565990] tmp[566002]))
    }
    unknown call_tmp[657787] "expr temp" "maybe param" "maybe type" "temp"
    (657790 'move' call_tmp[657787](129768 call _cond_test tmp[565989]))
    if call_tmp[657787]
    {
      unknown call_tmp[657794] "expr temp" "maybe param" "maybe type" "temp"
      (657797 'move' call_tmp[657794](129753 call(129748 call (partial) dsiAccess _mt[243] value[129719]) i[129713]))
      (517752 'move' ret[517747](517751 'addr of' call_tmp[657794]))
      gotoReturn _end_this[517745] _end_this[517745]
      (480030 'end of statement' value[129719])
    }
    {
      unknown call_tmp[657801] "expr temp" "maybe param" "maybe type" "temp"
      (657804 'move' call_tmp[657801](129763 call i[129713] 0))
      unknown call_tmp[657806] "expr temp" "maybe param" "maybe type" "temp"
      (657809 'move' call_tmp[657806](129765 call(129757 call (partial) dsiAccess _mt[243] value[129719]) call_tmp[657801]))
      (517757 'move' ret[517747](517756 'addr of' call_tmp[657806]))
      gotoReturn _end_this[517745] _end_this[517745]
      (480032 'end of statement' value[129719])
    }
    label _end_this[517745]
    (517749 return ret[517747])
  }
  function _array[133588](?).this[129791](arg _mt[133652]:_MT[238], const arg this[133650]:_array[133588](?), arg i[129788] :
  unknown call_tmp[657813] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517763] "RVV" "temp"
    unknown call_tmp[657841] "maybe param" "maybe type" "temp"
    (657844 'move' call_tmp[657841](383808 call _value _mt[243] this[133650]))
    const value[129801] "dead at end of block" "const" "insert auto destroy"
    (542866 'init var' value[129801] call_tmp[657841])
    (129804 'end of statement')
    unknown call_tmp[657846] "expr temp" "maybe param" "maybe type" "temp"
    (657849 'move' call_tmp[657846](129814 call _cond_test 1))
    if call_tmp[657846]
    {
      (129812 call(383813 call (partial) checkAccess _mt[243] this[133650]) i[129788](value = value[129801]))
      (480034 'end of statement' value[129801])
    }
    unknown tmp[425299] "maybe param" "temp"
    (425310 'move' tmp[425299](129822 call isRectangularArr this[133650]))
    unknown call_tmp[657853] "expr temp" "maybe param" "maybe type" "temp"
    (657856 'move' call_tmp[657853](425312 call _cond_invalid tmp[425299]))
    if call_tmp[657853]
    {
      (425315 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566016] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566017] "maybe param" "temp"
    unknown call_tmp[657858] "expr temp" "maybe param" "maybe type" "temp"
    (657861 'move' call_tmp[657858](425300 call isTrue tmp[425299]))
    (566022 'move' tmp[566017](566020 call _cond_test call_tmp[657858]))
    if tmp[566017]
    {
      (566027 'move' tmp[566016](566024 '_paramFoldLogical' tmp[566017] 1))
    }
    {
      unknown tmp[566029] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657863] "expr temp" "maybe param" "maybe type" "temp"
      (657866 'move' call_tmp[657863](129826 call isSparseArr this[133650]))
      (566031 'move' tmp[566029](425304 call isTrue call_tmp[657863]))
      (566036 'move' tmp[566016](566033 '_paramFoldLogical' tmp[566017] tmp[566029]))
    }
    unknown call_tmp[657868] "expr temp" "maybe param" "maybe type" "temp"
    (657871 'move' call_tmp[657868](129850 call _cond_test tmp[566016]))
    if call_tmp[657868]
    {
      unknown call_tmp[657875] "expr temp" "maybe param" "maybe type" "temp"
      (657878 'move' call_tmp[657875](129835 call(129830 call (partial) dsiAccess _mt[243] value[129801]) i[129788]))
      (517768 'move' ret[517763](517767 'deref' call_tmp[657875]))
      gotoReturn _end_this[517761] _end_this[517761]
      (480037 'end of statement' value[129801])
    }
    {
      unknown call_tmp[657882] "expr temp" "maybe param" "maybe type" "temp"
      (657885 'move' call_tmp[657882](129845 call i[129788] 0))
      unknown call_tmp[657887] "expr temp" "maybe param" "maybe type" "temp"
      (657890 'move' call_tmp[657887](129847 call(129839 call (partial) dsiAccess _mt[243] value[129801]) call_tmp[657882]))
      (517773 'move' ret[517763](517772 'deref' call_tmp[657887]))
      gotoReturn _end_this[517761] _end_this[517761]
      (480039 'end of statement' value[129801])
    }
    label _end_this[517761]
    (517765 return ret[517763])
  }
  where {
    unknown call_tmp[657894] "expr temp" "maybe param" "maybe type" "temp"
    (657897 'move' call_tmp[657894](359678 call _value _mt[243] this[133650]))
    unknown call_tmp[657901] "expr temp" "maybe param" "maybe type" "temp"
    (657904 'move' call_tmp[657901](129795 call eltType _mt[243] call_tmp[657894]))
    (129799 call shouldReturnRvalueByValue call_tmp[657901])
  }
  function _array[133588](?).this[129874](arg _mt[133656]:_MT[238], const arg this[133654]:_array[133588](?), arg i[129871] :
  unknown call_tmp[657908] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517779] "RVV" "temp"
    unknown call_tmp[657936] "maybe param" "maybe type" "temp"
    (657939 'move' call_tmp[657936](383827 call _value _mt[243] this[133654]))
    const value[129884] "dead at end of block" "const" "insert auto destroy"
    (542868 'init var' value[129884] call_tmp[657936])
    (129887 'end of statement')
    unknown call_tmp[657941] "expr temp" "maybe param" "maybe type" "temp"
    (657944 'move' call_tmp[657941](129897 call _cond_test 1))
    if call_tmp[657941]
    {
      (129895 call(383832 call (partial) checkAccess _mt[243] this[133654]) i[129871](value = value[129884]))
      (480041 'end of statement' value[129884])
    }
    unknown tmp[425320] "maybe param" "temp"
    (425331 'move' tmp[425320](129905 call isRectangularArr this[133654]))
    unknown call_tmp[657948] "expr temp" "maybe param" "maybe type" "temp"
    (657951 'move' call_tmp[657948](425333 call _cond_invalid tmp[425320]))
    if call_tmp[657948]
    {
      (425336 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566043] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566044] "maybe param" "temp"
    unknown call_tmp[657953] "expr temp" "maybe param" "maybe type" "temp"
    (657956 'move' call_tmp[657953](425321 call isTrue tmp[425320]))
    (566049 'move' tmp[566044](566047 call _cond_test call_tmp[657953]))
    if tmp[566044]
    {
      (566054 'move' tmp[566043](566051 '_paramFoldLogical' tmp[566044] 1))
    }
    {
      unknown tmp[566056] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657958] "expr temp" "maybe param" "maybe type" "temp"
      (657961 'move' call_tmp[657958](129909 call isSparseArr this[133654]))
      (566058 'move' tmp[566056](425325 call isTrue call_tmp[657958]))
      (566063 'move' tmp[566043](566060 '_paramFoldLogical' tmp[566044] tmp[566056]))
    }
    unknown call_tmp[657963] "expr temp" "maybe param" "maybe type" "temp"
    (657966 'move' call_tmp[657963](129933 call _cond_test tmp[566043]))
    if call_tmp[657963]
    {
      unknown call_tmp[657970] "expr temp" "maybe param" "maybe type" "temp"
      (657973 'move' call_tmp[657970](129918 call(129913 call (partial) dsiAccess _mt[243] value[129884]) i[129871]))
      (517784 'move' ret[517779](517783 'addr of' call_tmp[657970]))
      gotoReturn _end_this[517777] _end_this[517777]
      (480044 'end of statement' value[129884])
    }
    {
      unknown call_tmp[657977] "expr temp" "maybe param" "maybe type" "temp"
      (657980 'move' call_tmp[657977](129928 call i[129871] 0))
      unknown call_tmp[657982] "expr temp" "maybe param" "maybe type" "temp"
      (657985 'move' call_tmp[657982](129930 call(129922 call (partial) dsiAccess _mt[243] value[129884]) call_tmp[657977]))
      (517789 'move' ret[517779](517788 'addr of' call_tmp[657982]))
      gotoReturn _end_this[517777] _end_this[517777]
      (480046 'end of statement' value[129884])
    }
    label _end_this[517777]
    (517781 return ret[517779])
  }
  where {
    unknown call_tmp[657989] "expr temp" "maybe param" "maybe type" "temp"
    (657992 'move' call_tmp[657989](359688 call _value _mt[243] this[133654]))
    unknown call_tmp[657996] "expr temp" "maybe param" "maybe type" "temp"
    (657999 'move' call_tmp[657996](129878 call eltType _mt[243] call_tmp[657989]))
    (129882 call shouldReturnRvalueByConstRef call_tmp[657996])
  }
  function _array[133588](?).this[129956](arg _mt[133660]:_MT[238], ref arg this[133658]:_array[133588](?), arg i[129952] ... :
  unknown call_tmp[658003] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[517795] "RVV" "temp"
    unknown call_tmp[658019] "expr temp" "maybe param" "maybe type" "temp"
    (658022 'move' call_tmp[658019](129961 call this[133658] i[129952]))
    (517800 'move' ret[517795](517799 'addr of' call_tmp[658019]))
    (517797 return ret[517795])
  }
  function _array[133588](?).this[129981](arg _mt[133664]:_MT[238], const arg this[133662]:_array[133588](?), arg i[129977] ... :
  unknown call_tmp[658026] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517804] "RVV" "temp"
    unknown call_tmp[658042] "expr temp" "maybe param" "maybe type" "temp"
    (658045 'move' call_tmp[658042](129993 call this[133662] i[129977]))
    (517809 'move' ret[517804](517808 'deref' call_tmp[658042]))
    (517806 return ret[517804])
  }
  where {
    unknown call_tmp[658049] "expr temp" "maybe param" "maybe type" "temp"
    (658052 'move' call_tmp[658049](359702 call _value _mt[243] this[133662]))
    unknown call_tmp[658056] "expr temp" "maybe param" "maybe type" "temp"
    (658059 'move' call_tmp[658056](129985 call eltType _mt[243] call_tmp[658049]))
    (129989 call shouldReturnRvalueByValue call_tmp[658056])
  }
  function _array[133588](?).this[130014](arg _mt[133668]:_MT[238], const arg this[133666]:_array[133588](?), arg i[130010] ... :
  unknown call_tmp[658063] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517813] "RVV" "temp"
    unknown call_tmp[658079] "expr temp" "maybe param" "maybe type" "temp"
    (658082 'move' call_tmp[658079](130026 call this[133666] i[130010]))
    (517818 'move' ret[517813](517817 'addr of' call_tmp[658079]))
    (517815 return ret[517813])
  }
  where {
    unknown call_tmp[658086] "expr temp" "maybe param" "maybe type" "temp"
    (658089 'move' call_tmp[658086](359710 call _value _mt[243] this[133666]))
    unknown call_tmp[658093] "expr temp" "maybe param" "maybe type" "temp"
    (658096 'move' call_tmp[658093](130018 call eltType _mt[243] call_tmp[658086]))
    (130022 call shouldReturnRvalueByConstRef call_tmp[658093])
  }
  function _array[133588](?).localAccess[130048](arg _mt[133672]:_MT[238], ref arg this[133670]:_array[133588](?), arg i[130045] :
  unknown call_tmp[658100] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[517822] "RVV" "temp"
    unknown call_tmp[658128] "maybe param" "maybe type" "temp"
    (658131 'move' call_tmp[658128](383864 call _value _mt[243] this[133670]))
    const value[130051] "dead at end of block" "const" "insert auto destroy"
    (542870 'init var' value[130051] call_tmp[658128])
    (130054 'end of statement')
    unknown call_tmp[658133] "expr temp" "maybe param" "maybe type" "temp"
    (658136 'move' call_tmp[658133](130064 call _cond_test 1))
    if call_tmp[658133]
    {
      (130062 call(383869 call (partial) checkAccess _mt[243] this[133670]) i[130045](value = value[130051]))
      (480051 'end of statement' value[130051])
    }
    unknown tmp[425341] "maybe param" "temp"
    (425352 'move' tmp[425341](130072 call isRectangularArr this[133670]))
    unknown call_tmp[658140] "expr temp" "maybe param" "maybe type" "temp"
    (658143 'move' call_tmp[658140](425354 call _cond_invalid tmp[425341]))
    if call_tmp[658140]
    {
      (425357 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566070] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566071] "maybe param" "temp"
    unknown call_tmp[658145] "expr temp" "maybe param" "maybe type" "temp"
    (658148 'move' call_tmp[658145](425342 call isTrue tmp[425341]))
    (566076 'move' tmp[566071](566074 call _cond_test call_tmp[658145]))
    if tmp[566071]
    {
      (566081 'move' tmp[566070](566078 '_paramFoldLogical' tmp[566071] 1))
    }
    {
      unknown tmp[566083] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658150] "expr temp" "maybe param" "maybe type" "temp"
      (658153 'move' call_tmp[658150](130076 call isSparseArr this[133670]))
      (566085 'move' tmp[566083](425346 call isTrue call_tmp[658150]))
      (566090 'move' tmp[566070](566087 '_paramFoldLogical' tmp[566071] tmp[566083]))
    }
    unknown call_tmp[658155] "expr temp" "maybe param" "maybe type" "temp"
    (658158 'move' call_tmp[658155](130102 call _cond_test tmp[566070]))
    if call_tmp[658155]
    {
      unknown call_tmp[658162] "expr temp" "maybe param" "maybe type" "temp"
      (658165 'move' call_tmp[658162](130087 call(130082 call (partial) dsiLocalAccess _mt[243] value[130051]) i[130045]))
      (517827 'move' ret[517822](517826 'addr of' call_tmp[658162]))
      gotoReturn _end_localAccess[517820] _end_localAccess[517820]
      (480054 'end of statement' value[130051])
    }
    {
      unknown call_tmp[658169] "expr temp" "maybe param" "maybe type" "temp"
      (658172 'move' call_tmp[658169](130097 call i[130045] 0))
      unknown call_tmp[658174] "expr temp" "maybe param" "maybe type" "temp"
      (658177 'move' call_tmp[658174](130099 call(130091 call (partial) dsiLocalAccess _mt[243] value[130051]) call_tmp[658169]))
      (517832 'move' ret[517822](517831 'addr of' call_tmp[658174]))
      gotoReturn _end_localAccess[517820] _end_localAccess[517820]
      (480056 'end of statement' value[130051])
    }
    label _end_localAccess[517820]
    (517824 return ret[517822])
  }
  function _array[133588](?).localAccess[130125](arg _mt[133676]:_MT[238], const arg this[133674]:_array[133588](?), arg i[130122] :
  unknown call_tmp[658181] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517838] "RVV" "temp"
    unknown call_tmp[658209] "maybe param" "maybe type" "temp"
    (658212 'move' call_tmp[658209](383883 call _value _mt[243] this[133674]))
    const value[130135] "dead at end of block" "const" "insert auto destroy"
    (542872 'init var' value[130135] call_tmp[658209])
    (130138 'end of statement')
    unknown call_tmp[658214] "expr temp" "maybe param" "maybe type" "temp"
    (658217 'move' call_tmp[658214](130148 call _cond_test 1))
    if call_tmp[658214]
    {
      (130146 call(383888 call (partial) checkAccess _mt[243] this[133674]) i[130122](value = value[130135]))
      (480058 'end of statement' value[130135])
    }
    unknown tmp[425362] "maybe param" "temp"
    (425373 'move' tmp[425362](130156 call isRectangularArr this[133674]))
    unknown call_tmp[658221] "expr temp" "maybe param" "maybe type" "temp"
    (658224 'move' call_tmp[658221](425375 call _cond_invalid tmp[425362]))
    if call_tmp[658221]
    {
      (425378 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566097] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566098] "maybe param" "temp"
    unknown call_tmp[658226] "expr temp" "maybe param" "maybe type" "temp"
    (658229 'move' call_tmp[658226](425363 call isTrue tmp[425362]))
    (566103 'move' tmp[566098](566101 call _cond_test call_tmp[658226]))
    if tmp[566098]
    {
      (566108 'move' tmp[566097](566105 '_paramFoldLogical' tmp[566098] 1))
    }
    {
      unknown tmp[566110] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658231] "expr temp" "maybe param" "maybe type" "temp"
      (658234 'move' call_tmp[658231](130160 call isSparseArr this[133674]))
      (566112 'move' tmp[566110](425367 call isTrue call_tmp[658231]))
      (566117 'move' tmp[566097](566114 '_paramFoldLogical' tmp[566098] tmp[566110]))
    }
    unknown call_tmp[658236] "expr temp" "maybe param" "maybe type" "temp"
    (658239 'move' call_tmp[658236](130184 call _cond_test tmp[566097]))
    if call_tmp[658236]
    {
      unknown call_tmp[658243] "expr temp" "maybe param" "maybe type" "temp"
      (658246 'move' call_tmp[658243](130169 call(130164 call (partial) dsiLocalAccess _mt[243] value[130135]) i[130122]))
      (517843 'move' ret[517838](517842 'deref' call_tmp[658243]))
      gotoReturn _end_localAccess[517836] _end_localAccess[517836]
      (480061 'end of statement' value[130135])
    }
    {
      unknown call_tmp[658250] "expr temp" "maybe param" "maybe type" "temp"
      (658253 'move' call_tmp[658250](130179 call i[130122] 0))
      unknown call_tmp[658255] "expr temp" "maybe param" "maybe type" "temp"
      (658258 'move' call_tmp[658255](130181 call(130173 call (partial) dsiLocalAccess _mt[243] value[130135]) call_tmp[658250]))
      (517848 'move' ret[517838](517847 'deref' call_tmp[658255]))
      gotoReturn _end_localAccess[517836] _end_localAccess[517836]
      (480063 'end of statement' value[130135])
    }
    label _end_localAccess[517836]
    (517840 return ret[517838])
  }
  where {
    unknown call_tmp[658262] "expr temp" "maybe param" "maybe type" "temp"
    (658265 'move' call_tmp[658262](359724 call _value _mt[243] this[133674]))
    unknown call_tmp[658269] "expr temp" "maybe param" "maybe type" "temp"
    (658272 'move' call_tmp[658269](130129 call eltType _mt[243] call_tmp[658262]))
    (130133 call shouldReturnRvalueByValue call_tmp[658269])
  }
  function _array[133588](?).localAccess[130208](arg _mt[133680]:_MT[238], const arg this[133678]:_array[133588](?), arg i[130205] :
  unknown call_tmp[658276] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517854] "RVV" "temp"
    unknown call_tmp[658304] "maybe param" "maybe type" "temp"
    (658307 'move' call_tmp[658304](383902 call _value _mt[243] this[133678]))
    const value[130218] "dead at end of block" "const" "insert auto destroy"
    (542874 'init var' value[130218] call_tmp[658304])
    (130221 'end of statement')
    unknown call_tmp[658309] "expr temp" "maybe param" "maybe type" "temp"
    (658312 'move' call_tmp[658309](130231 call _cond_test 1))
    if call_tmp[658309]
    {
      (130229 call(383907 call (partial) checkAccess _mt[243] this[133678]) i[130205](value = value[130218]))
      (480065 'end of statement' value[130218])
    }
    unknown tmp[425383] "maybe param" "temp"
    (425394 'move' tmp[425383](130239 call isRectangularArr this[133678]))
    unknown call_tmp[658316] "expr temp" "maybe param" "maybe type" "temp"
    (658319 'move' call_tmp[658316](425396 call _cond_invalid tmp[425383]))
    if call_tmp[658316]
    {
      (425399 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566124] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566125] "maybe param" "temp"
    unknown call_tmp[658321] "expr temp" "maybe param" "maybe type" "temp"
    (658324 'move' call_tmp[658321](425384 call isTrue tmp[425383]))
    (566130 'move' tmp[566125](566128 call _cond_test call_tmp[658321]))
    if tmp[566125]
    {
      (566135 'move' tmp[566124](566132 '_paramFoldLogical' tmp[566125] 1))
    }
    {
      unknown tmp[566137] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658326] "expr temp" "maybe param" "maybe type" "temp"
      (658329 'move' call_tmp[658326](130243 call isSparseArr this[133678]))
      (566139 'move' tmp[566137](425388 call isTrue call_tmp[658326]))
      (566144 'move' tmp[566124](566141 '_paramFoldLogical' tmp[566125] tmp[566137]))
    }
    unknown call_tmp[658331] "expr temp" "maybe param" "maybe type" "temp"
    (658334 'move' call_tmp[658331](130267 call _cond_test tmp[566124]))
    if call_tmp[658331]
    {
      unknown call_tmp[658338] "expr temp" "maybe param" "maybe type" "temp"
      (658341 'move' call_tmp[658338](130252 call(130247 call (partial) dsiLocalAccess _mt[243] value[130218]) i[130205]))
      (517859 'move' ret[517854](517858 'addr of' call_tmp[658338]))
      gotoReturn _end_localAccess[517852] _end_localAccess[517852]
      (480068 'end of statement' value[130218])
    }
    {
      unknown call_tmp[658345] "expr temp" "maybe param" "maybe type" "temp"
      (658348 'move' call_tmp[658345](130262 call i[130205] 0))
      unknown call_tmp[658350] "expr temp" "maybe param" "maybe type" "temp"
      (658353 'move' call_tmp[658350](130264 call(130256 call (partial) dsiLocalAccess _mt[243] value[130218]) call_tmp[658345]))
      (517864 'move' ret[517854](517863 'addr of' call_tmp[658350]))
      gotoReturn _end_localAccess[517852] _end_localAccess[517852]
      (480070 'end of statement' value[130218])
    }
    label _end_localAccess[517852]
    (517856 return ret[517854])
  }
  where {
    unknown call_tmp[658357] "expr temp" "maybe param" "maybe type" "temp"
    (658360 'move' call_tmp[658357](359734 call _value _mt[243] this[133678]))
    unknown call_tmp[658364] "expr temp" "maybe param" "maybe type" "temp"
    (658367 'move' call_tmp[658364](130212 call eltType _mt[243] call_tmp[658357]))
    (130216 call shouldReturnRvalueByConstRef call_tmp[658364])
  }
  function _array[133588](?).localAccess[130290](arg _mt[133684]:_MT[238], ref arg this[133682]:_array[133588](?), arg i[130286] ... :
  unknown call_tmp[658371] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[517870] "RVV" "temp"
    unknown call_tmp[658389] "expr temp" "maybe param" "maybe type" "temp"
    (658392 'move' call_tmp[658389](130295 call(383923 call (partial) localAccess _mt[243] this[133682]) i[130286]))
    (517875 'move' ret[517870](517874 'addr of' call_tmp[658389]))
    (517872 return ret[517870])
  }
  function _array[133588](?).localAccess[130315](arg _mt[133688]:_MT[238], const arg this[133686]:_array[133588](?), arg i[130311] ... :
  unknown call_tmp[658396] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517879] "RVV" "temp"
    unknown call_tmp[658414] "expr temp" "maybe param" "maybe type" "temp"
    (658417 'move' call_tmp[658414](130327 call(383932 call (partial) localAccess _mt[243] this[133686]) i[130311]))
    (517884 'move' ret[517879](517883 'deref' call_tmp[658414]))
    (517881 return ret[517879])
  }
  where {
    unknown call_tmp[658421] "expr temp" "maybe param" "maybe type" "temp"
    (658424 'move' call_tmp[658421](359748 call _value _mt[243] this[133686]))
    unknown call_tmp[658428] "expr temp" "maybe param" "maybe type" "temp"
    (658431 'move' call_tmp[658428](130319 call eltType _mt[243] call_tmp[658421]))
    (130323 call shouldReturnRvalueByValue call_tmp[658428])
  }
  function _array[133588](?).localAccess[130348](arg _mt[133692]:_MT[238], const arg this[133690]:_array[133588](?), arg i[130344] ... :
  unknown call_tmp[658435] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517888] "RVV" "temp"
    unknown call_tmp[658453] "expr temp" "maybe param" "maybe type" "temp"
    (658456 'move' call_tmp[658453](130360 call(383941 call (partial) localAccess _mt[243] this[133690]) i[130344]))
    (517893 'move' ret[517888](517892 'addr of' call_tmp[658453]))
    (517890 return ret[517888])
  }
  where {
    unknown call_tmp[658460] "expr temp" "maybe param" "maybe type" "temp"
    (658463 'move' call_tmp[658460](359756 call _value _mt[243] this[133690]))
    unknown call_tmp[658467] "expr temp" "maybe param" "maybe type" "temp"
    (658470 'move' call_tmp[658467](130352 call eltType _mt[243] call_tmp[658460]))
    (130356 call shouldReturnRvalueByConstRef call_tmp[658467])
  }
  function _array[133588](?).this[130373](arg _mt[133696]:_MT[238], arg this[133694]:_array[133588](?), arg d[130370]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[517897] "RVV" "temp"
    unknown call_tmp[658474] "expr temp" "maybe param" "maybe type" "temp"
    (658477 'move' call_tmp[658474](130376 call rank _mt[243] d[130370]))
    unknown call_tmp[658481] "expr temp" "maybe param" "maybe type" "temp"
    (658484 'move' call_tmp[658481](383947 call rank _mt[243] this[133694]))
    unknown call_tmp[658486] "expr temp" "maybe param" "maybe type" "temp"
    (658489 'move' call_tmp[658486](130380 call != call_tmp[658474] call_tmp[658481]))
    unknown call_tmp[658491] "expr temp" "maybe param" "maybe type" "temp"
    (658494 'move' call_tmp[658491](130403 call _cond_test call_tmp[658486]))
    if call_tmp[658491]
    {
      (130401 call compilerError "slicing an array with a domain of a different rank")
    }
    unknown call_tmp[658496] "expr temp" "maybe param" "maybe type" "temp"
    (658499 'move' call_tmp[658496](130416 call _cond_test 1))
    if call_tmp[658496]
    {
      unknown call_tmp[658505] "expr temp" "maybe param" "maybe type" "temp"
      (658508 'move' call_tmp[658505](383957 call _value _mt[243] this[133694]))
      (130414 call(383952 call (partial) checkSlice _mt[243] this[133694]) d[130370] call_tmp[658505])
    }
    const tmp[130465] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566151] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566152] "maybe param" "temp"
    unknown call_tmp[658512] "expr temp" "maybe param" "maybe type" "temp"
    (658515 'move' call_tmp[658512](359761 call _value _mt[243] this[133694]))
    unknown call_tmp[658519] "expr temp" "maybe param" "maybe type" "temp"
    (658522 'move' call_tmp[658519](130431 call(130427 call (partial) isSliceArrayView _mt[243] call_tmp[658512])))
    (566157 'move' tmp[566152](566155 call _cond_test call_tmp[658519]))
    if tmp[566152]
    {
      unknown tmp[566159] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658526] "expr temp" "maybe param" "maybe type" "temp"
      (658529 'move' call_tmp[658526](130433 call _value _mt[243] this[133694]))
      unknown call_tmp[658533] "expr temp" "maybe param" "maybe type" "temp"
      (658536 'move' call_tmp[658533](130436 call arr _mt[243] call_tmp[658526]))
      unknown call_tmp[658540] "expr temp" "maybe param" "maybe type" "temp"
      (658543 'move' call_tmp[658540](130440 call _value _mt[243] this[133694]))
      unknown call_tmp[658547] "expr temp" "maybe param" "maybe type" "temp"
      (658550 'move' call_tmp[658547](130445 call _ArrPid _mt[243] call_tmp[658540]))
      (566161 'move' tmp[566159](130449 call _build_tuple call_tmp[658533] call_tmp[658547]))
      (566166 'move' tmp[566151](566163 '_paramFoldLogical' tmp[566152] tmp[566159]))
    }
    {
      unknown tmp[566168] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658554] "expr temp" "maybe param" "maybe type" "temp"
      (658557 'move' call_tmp[658554](130452 call _value _mt[243] this[133694]))
      unknown call_tmp[658561] "expr temp" "maybe param" "maybe type" "temp"
      (658564 'move' call_tmp[658561](130456 call _pid _mt[243] this[133694]))
      (566170 'move' tmp[566168](130460 call _build_tuple call_tmp[658554] call_tmp[658561]))
      (566175 'move' tmp[566151](566172 '_paramFoldLogical' tmp[566152] tmp[566168]))
    }
    (542876 'init var' tmp[130465] tmp[566151])
    (130472 call _check_tuple_var_decl tmp[130465] 2)
    (480077 'end of statement')
    unknown call_tmp[658566] "maybe param" "maybe type" "temp"
    (658569 'move' call_tmp[658566](130466 call tmp[130465] 0))
    const arr[130421] "dead at end of block" "const" "insert auto destroy"
    (542878 'init var' arr[130421] call_tmp[658566])
    unknown call_tmp[658571] "maybe param" "maybe type" "temp"
    (658574 'move' call_tmp[658571](130469 call tmp[130465] 1))
    const arrpid[130423] "dead at end of block" "const" "insert auto destroy"
    (542880 'init var' arrpid[130423] call_tmp[658571])
    (130477 'end of statement')
    unknown call_tmp[658578] "expr temp" "maybe param" "maybe type" "temp"
    (658581 'move' call_tmp[658578](130483 call eltType _mt[243] this[133694]))
    unknown call_tmp[658585] "expr temp" "maybe param" "maybe type" "temp"
    (658588 'move' call_tmp[658585](130489 call _pid _mt[243] d[130370]))
    unknown call_tmp[658592] "expr temp" "maybe param" "maybe type" "temp"
    (658595 'move' call_tmp[658592](130494 call _instance _mt[243] d[130370]))
    unknown call_tmp[658597] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658600 'move' call_tmp[658597](747793 'new' ArrayViewSliceArr[383961](?)(eltType = call_tmp[658578])(_DomPid = call_tmp[658585])(dom = call_tmp[658592])(_ArrPid = arrpid[130423])(_ArrInstance = arr[130421])(_chpl_manager = unmanaged[220](?))))
    unknown a[130503] "dead at end of block" "insert auto destroy"
    (542882 'init var' a[130503] call_tmp[658597])
    (130506 'end of statement' arrpid[130423] arr[130421])
    unknown call_tmp[658604] "expr temp" "maybe param" "maybe type" "temp"
    (658607 'move' call_tmp[658604](130508 call _value _mt[243] d[130370]))
    (130520 call(130511 call (partial) add_arr _mt[243] call_tmp[658604]) a[130503](locking = 1)(addToList = 0))
    (480080 'end of statement' a[130503])
    unknown call_tmp[658611] "expr temp" "maybe param" "maybe type" "temp"
    (658614 'move' call_tmp[658611](130525 call _newArray a[130503]))
    (517902 'move' ret[517897](517901 'deref' call_tmp[658611]))
    gotoReturn _end_this[517895] _end_this[517895]
    (480082 'end of statement' a[130503])
    label _end_this[517895]
    (517899 return ret[517897])
  }
  function _array[133588](?).this[130536](arg _mt[133700]:_MT[238], arg this[133698]:_array[133588](?), arg ranges[130533]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[517908] "RVV" "temp"
    unknown call_tmp[658618] "expr temp" "maybe param" "maybe type" "temp"
    (658621 'move' call_tmp[658618](130551 call _cond_test 1))
    if call_tmp[658618]
    {
      unknown call_tmp[658627] "expr temp" "maybe param" "maybe type" "temp"
      (658630 'move' call_tmp[658627](383980 call _value _mt[243] this[133698]))
      (130549 call(383975 call (partial) checkSlice _mt[243] this[133698])(130545 'expand_tuple' ranges[130533])(value = call_tmp[658627]))
    }
    unknown call_tmp[658634] "maybe param" "maybe type" "temp"
    (658637 'move' call_tmp[658634](130561 call(383984 call (partial) _dom _mt[243] this[133698])(130559 'expand_tuple' ranges[130533])))
    unknown d[130562] "dead at end of block" "no auto destroy"
    (542884 'init var' d[130562] call_tmp[658634])
    (130565 'end of statement')
    unknown call_tmp[658641] "expr temp" "maybe param" "maybe type" "temp"
    (658644 'move' call_tmp[658641](130567 call _value _mt[243] d[130562]))
    unknown call_tmp[658648] "expr temp" "maybe param" "maybe type" "temp"
    (658651 'move' call_tmp[658648](130572 call _free_when_no_arrs _mt[243] call_tmp[658641]))
    (130576 call = call_tmp[658648] 1)
    (480085 'end of statement' d[130562])
    const tmp[130621] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566182] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566183] "maybe param" "temp"
    unknown call_tmp[658655] "expr temp" "maybe param" "maybe type" "temp"
    (658658 'move' call_tmp[658655](359774 call _value _mt[243] this[133698]))
    unknown call_tmp[658662] "expr temp" "maybe param" "maybe type" "temp"
    (658665 'move' call_tmp[658662](130589 call(130585 call (partial) isSliceArrayView _mt[243] call_tmp[658655])))
    (566188 'move' tmp[566183](566186 call _cond_test call_tmp[658662]))
    if tmp[566183]
    {
      unknown tmp[566190] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658669] "expr temp" "maybe param" "maybe type" "temp"
      (658672 'move' call_tmp[658669](130591 call _value _mt[243] this[133698]))
      unknown call_tmp[658676] "expr temp" "maybe param" "maybe type" "temp"
      (658679 'move' call_tmp[658676](130594 call arr _mt[243] call_tmp[658669]))
      unknown call_tmp[658683] "expr temp" "maybe param" "maybe type" "temp"
      (658686 'move' call_tmp[658683](130598 call _value _mt[243] this[133698]))
      unknown call_tmp[658690] "expr temp" "maybe param" "maybe type" "temp"
      (658693 'move' call_tmp[658690](130601 call _ArrPid _mt[243] call_tmp[658683]))
      (566192 'move' tmp[566190](130605 call _build_tuple call_tmp[658676] call_tmp[658690]))
      (566197 'move' tmp[566182](566194 '_paramFoldLogical' tmp[566183] tmp[566190]))
    }
    {
      unknown tmp[566199] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658697] "expr temp" "maybe param" "maybe type" "temp"
      (658700 'move' call_tmp[658697](130608 call _value _mt[243] this[133698]))
      unknown call_tmp[658704] "expr temp" "maybe param" "maybe type" "temp"
      (658707 'move' call_tmp[658704](130612 call _pid _mt[243] this[133698]))
      (566201 'move' tmp[566199](130616 call _build_tuple call_tmp[658697] call_tmp[658704]))
      (566206 'move' tmp[566182](566203 '_paramFoldLogical' tmp[566183] tmp[566199]))
    }
    (542886 'init var' tmp[130621] tmp[566182])
    (130628 call _check_tuple_var_decl tmp[130621] 2)
    (480087 'end of statement')
    unknown call_tmp[658709] "maybe param" "maybe type" "temp"
    (658712 'move' call_tmp[658709](130622 call tmp[130621] 0))
    const arr[130579] "dead at end of block" "const" "insert auto destroy"
    (542888 'init var' arr[130579] call_tmp[658709])
    unknown call_tmp[658714] "maybe param" "maybe type" "temp"
    (658717 'move' call_tmp[658714](130625 call tmp[130621] 1))
    const arrpid[130581] "dead at end of block" "const" "insert auto destroy"
    (542890 'init var' arrpid[130581] call_tmp[658714])
    (130633 'end of statement')
    unknown call_tmp[658721] "expr temp" "maybe param" "maybe type" "temp"
    (658724 'move' call_tmp[658721](130639 call eltType _mt[243] this[133698]))
    unknown call_tmp[658728] "expr temp" "maybe param" "maybe type" "temp"
    (658731 'move' call_tmp[658728](130645 call _pid _mt[243] d[130562]))
    unknown call_tmp[658735] "expr temp" "maybe param" "maybe type" "temp"
    (658738 'move' call_tmp[658735](130650 call _instance _mt[243] d[130562]))
    unknown call_tmp[658740] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658743 'move' call_tmp[658740](747794 'new' ArrayViewSliceArr[383961](?)(eltType = call_tmp[658721])(_DomPid = call_tmp[658728])(dom = call_tmp[658735])(_ArrPid = arrpid[130581])(_ArrInstance = arr[130579])(_chpl_manager = unmanaged[220](?))))
    unknown a[130659] "dead at end of block" "insert auto destroy"
    (542892 'init var' a[130659] call_tmp[658740])
    (130662 'end of statement' d[130562] d[130562] arrpid[130581] arr[130579])
    unknown call_tmp[658747] "expr temp" "maybe param" "maybe type" "temp"
    (658750 'move' call_tmp[658747](130664 call _value _mt[243] d[130562]))
    (130676 call(130667 call (partial) add_arr _mt[243] call_tmp[658747]) a[130659](locking = 0)(addToList = 0))
    (480092 'end of statement' d[130562] a[130659])
    unknown call_tmp[658754] "expr temp" "maybe param" "maybe type" "temp"
    (658757 'move' call_tmp[658754](130681 call _newArray a[130659]))
    (517913 'move' ret[517908](517912 'deref' call_tmp[658754]))
    gotoReturn _end_this[517906] _end_this[517906]
    (480095 'end of statement' a[130659])
    label _end_this[517906]
    (517910 return ret[517908])
  }
  where {
    (130541 call chpl__isTupleOfRanges ranges[130533])
  }
  function _array[133588](?).this[130693](arg _mt[133704]:_MT[238], arg this[133702]:_array[133588](?), arg args[130690]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[517919] "RVV" "temp"
    unknown call_tmp[658761] "expr temp" "maybe param" "maybe type" "temp"
    (658764 'move' call_tmp[658761](130712 call _cond_test 1))
    if call_tmp[658761]
    {
      (130710 call(384002 call (partial) checkRankChange _mt[243] this[133702]) args[130690])
    }
    unknown call_tmp[658770] "maybe param" "maybe type" "temp"
    (658773 'move' call_tmp[658770](130725 call(130719 call (partial) _dom _mt[243] this[133702])(130723 'expand_tuple' args[130690])))
    const rcdom[130726] "dead at end of block" "const" "insert auto destroy"
    (542894 'init var' rcdom[130726] call_tmp[658770])
    (130729 'end of statement')
    unknown call_tmp[658777] "expr temp" "maybe param" "maybe type" "temp"
    (658780 'move' call_tmp[658777](130736 call _value _mt[243] this[133702]))
    unknown call_tmp[658784] "expr temp" "maybe param" "maybe type" "temp"
    (658787 'move' call_tmp[658784](130740 call _pid _mt[243] this[133702]))
    unknown call_tmp[658789] "maybe param" "maybe type" "temp"
    (658792 'move' call_tmp[658789](130744 call _build_tuple call_tmp[658777] call_tmp[658784]))
    const tmp[130746] "dead at end of block" "const" "insert auto destroy" "temp"
    (542896 'init var' tmp[130746] call_tmp[658789])
    (130753 call _check_tuple_var_decl tmp[130746] 2)
    (480098 'end of statement')
    unknown call_tmp[658794] "maybe param" "maybe type" "temp"
    (658797 'move' call_tmp[658794](130747 call tmp[130746] 0))
    const arr[130730] "dead at end of block" "const" "insert auto destroy"
    (542898 'init var' arr[130730] call_tmp[658794])
    unknown call_tmp[658799] "maybe param" "maybe type" "temp"
    (658802 'move' call_tmp[658799](130750 call tmp[130746] 1))
    const arrpid[130732] "dead at end of block" "const" "insert auto destroy"
    (542900 'init var' arrpid[130732] call_tmp[658799])
    (130758 'end of statement')
    unknown call_tmp[658806] "expr temp" "maybe param" "maybe type" "temp"
    (658809 'move' call_tmp[658806](130764 call eltType _mt[243] this[133702]))
    unknown call_tmp[658813] "expr temp" "maybe param" "maybe type" "temp"
    (658816 'move' call_tmp[658813](130770 call _pid _mt[243] rcdom[130726]))
    unknown call_tmp[658820] "expr temp" "maybe param" "maybe type" "temp"
    (658823 'move' call_tmp[658820](130775 call _instance _mt[243] rcdom[130726]))
    unknown call_tmp[658827] "expr temp" "maybe param" "maybe type" "temp"
    (658830 'move' call_tmp[658827](130784 call _value _mt[243] rcdom[130726]))
    unknown call_tmp[658834] "expr temp" "maybe param" "maybe type" "temp"
    (658837 'move' call_tmp[658834](130787 call collapsedDim _mt[243] call_tmp[658827]))
    unknown call_tmp[658841] "expr temp" "maybe param" "maybe type" "temp"
    (658844 'move' call_tmp[658841](130792 call _value _mt[243] rcdom[130726]))
    unknown call_tmp[658848] "expr temp" "maybe param" "maybe type" "temp"
    (658851 'move' call_tmp[658848](130795 call idx _mt[243] call_tmp[658841]))
    unknown call_tmp[658853] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658856 'move' call_tmp[658853](747795 'new' ArrayViewRankChangeArr[384008](?)(eltType = call_tmp[658806])(_DomPid = call_tmp[658813])(dom = call_tmp[658820])(_ArrPid = arrpid[130732])(_ArrInstance = arr[130730])(collapsedDim = call_tmp[658834])(idx = call_tmp[658848])(_chpl_manager = unmanaged[220](?))))
    unknown a[130800] "dead at end of block" "insert auto destroy"
    (542902 'init var' a[130800] call_tmp[658853])
    (130803 'end of statement' rcdom[130726] rcdom[130726] arrpid[130732] arr[130730] rcdom[130726] rcdom[130726])
    unknown call_tmp[658860] "expr temp" "maybe param" "maybe type" "temp"
    (658863 'move' call_tmp[658860](130805 call _value _mt[243] rcdom[130726]))
    (130815 call(130808 call (partial) add_arr _mt[243] call_tmp[658860]) a[130800](locking = 0))
    (480105 'end of statement' rcdom[130726] a[130800])
    unknown call_tmp[658867] "expr temp" "maybe param" "maybe type" "temp"
    (658870 'move' call_tmp[658867](130820 call _newArray a[130800]))
    (517924 'move' ret[517919](517923 'deref' call_tmp[658867]))
    gotoReturn _end_this[517917] _end_this[517917]
    (480108 'end of statement' a[130800])
    label _end_this[517917]
    (517921 return ret[517919])
  }
  where {
    unknown call_tmp[658874] "expr temp" "maybe param" "maybe type" "temp"
    (658877 'move' call_tmp[658874](359786 call _value _mt[243] this[133702]))
    unknown call_tmp[658881] "expr temp" "maybe param" "maybe type" "temp"
    (658884 'move' call_tmp[658881](130699 call dom _mt[243] call_tmp[658874]))
    unknown call_tmp[658888] "expr temp" "maybe param" "maybe type" "temp"
    (658891 'move' call_tmp[658888](130702 call idxType _mt[243] call_tmp[658881]))
    (130705 call _validRankChangeArgs args[130690] call_tmp[658888])
  }
  function _array[133588](?).checkRankChange[130830](arg _mt[133708]:_MT[238], arg this[133706]:_array[133588](?), arg args[130828]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[130911] "dead at end of block" "insert auto destroy"
      (542904 'init var' i[130911] 0)
      (480110 'end of statement')
      unknown tmp[130912] "maybe param" "temp"
      unknown call_tmp[658895] "expr temp" "maybe param" "maybe type" "temp"
      (658898 'move' call_tmp[658895](130834 call size _mt[243] args[130828]))
      unknown call_tmp[658900] "expr temp" "maybe param" "maybe type" "temp"
      (658903 'move' call_tmp[658900](130838 call - call_tmp[658895] 1))
      (130924 'move' tmp[130912](130922 call chpl_compute_low_param_loop_bound 0 call_tmp[658900]))
      unknown tmp[130913] "maybe param" "temp"
      unknown call_tmp[658907] "expr temp" "maybe param" "maybe type" "temp"
      (658910 'move' call_tmp[658907](130931 call size _mt[243] args[130828]))
      unknown call_tmp[658912] "expr temp" "maybe param" "maybe type" "temp"
      (658915 'move' call_tmp[658912](130929 call - call_tmp[658907] 1))
      (130937 'move' tmp[130913](130935 call chpl_compute_high_param_loop_bound 0 call_tmp[658912]))
      unknown tmp[130914] "maybe param" "temp"
      (130940 'move' tmp[130914] 1)
      ParamForLoop[130942]
      { i[130911] tmp[130912] tmp[130913] tmp[130914]
        unknown call_tmp[658919] "expr temp" "maybe param" "maybe type" "temp"
        (658922 'move' call_tmp[658919](359800 call _value _mt[243] this[133706]))
        unknown call_tmp[658926] "expr temp" "maybe param" "maybe type" "temp"
        (658929 'move' call_tmp[658926](130843 call dom _mt[243] call_tmp[658919]))
        unknown call_tmp[658933] "expr temp" "maybe param" "maybe type" "temp"
        (658936 'move' call_tmp[658933](130851 call(130846 call (partial) dsiDim _mt[243] call_tmp[658926]) i[130911]))
        unknown call_tmp[658940] "expr temp" "maybe param" "maybe type" "temp"
        (658943 'move' call_tmp[658940](130858 call args[130828] i[130911]))
        unknown call_tmp[658945] "expr temp" "maybe param" "maybe type" "temp"
        (658948 'move' call_tmp[658945](130860 call(130852 call (partial) boundsCheck _mt[243] call_tmp[658933]) call_tmp[658940]))
        unknown call_tmp[658950] "expr temp" "maybe param" "maybe type" "temp"
        (658953 'move' call_tmp[658950](130861 call ! call_tmp[658945]))
        unknown call_tmp[658955] "expr temp" "maybe param" "maybe type" "temp"
        (658958 'move' call_tmp[658955](130906 call _cond_test call_tmp[658950]))
        if call_tmp[658955]
        {
          unknown call_tmp[658960] "expr temp" "maybe param" "maybe type" "temp"
          (658963 'move' call_tmp[658960](130903 call args[130828] i[130911]))
          (130904 call halt "array slice out of bounds in dimension " i[130911] ": " call_tmp[658960])
          (480111 'end of statement' i[130911] i[130911])
        }
      }
      label _unused_continueLabel[130916]
      label _breakLabel[130915]
    }
    (517928 return _void[55])
  }
  function _array[133588](?).localSlice[130960](arg _mt[133712]:_MT[238], arg this[133710]:_array[133588](?), arg r[130957]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[517932] "RVV" "temp"
    unknown call_tmp[658967] "expr temp" "maybe param" "maybe type" "temp"
    (658970 'move' call_tmp[658967](130983 call _cond_test 1))
    if call_tmp[658967]
    {
      unknown call_tmp[658976] "expr temp" "maybe param" "maybe type" "temp"
      (658979 'move' call_tmp[658976](384038 call _value _mt[243] this[133710]))
      (130981 call(384033 call (partial) checkSlice _mt[243] this[133710])(130977 'expand_tuple' r[130957])(value = call_tmp[658976]))
    }
    unknown call_tmp[658983] "maybe param" "maybe type" "temp"
    (658986 'move' call_tmp[658983](130993 call(384042 call (partial) _dom _mt[243] this[133710])(130991 'expand_tuple' r[130957])))
    unknown dom[130994] "dead at end of block" "insert auto destroy"
    (542906 'init var' dom[130994] call_tmp[658983])
    (130997 'end of statement')
    unknown call_tmp[658990] "expr temp" "maybe param" "maybe type" "temp"
    (658993 'move' call_tmp[658990](131001 call(384049 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133710]) dom[130994]))
    (517937 'move' ret[517932](517936 'deref' call_tmp[658990]))
    gotoReturn _end_localSlice[517930] _end_localSlice[517930]
    (480115 'end of statement' dom[130994])
    label _end_localSlice[517930]
    (517934 return ret[517932])
  }
  where {
    unknown tmp[425404] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492090] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[658997] "expr temp" "maybe param" "maybe type" "temp"
      (659000 'move' call_tmp[658997](384026 call _value _mt[243] this[133710]))
      (492094 'move' call_type_tmp[492090](130964 'typeof' call_tmp[658997]))
    }
    (425415 'move' tmp[425404](354208 'is_subtype' DefaultRectangularArr[379605](?) call_type_tmp[492090]))
    unknown call_tmp[659002] "expr temp" "maybe param" "maybe type" "temp"
    (659005 'move' call_tmp[659002](425417 call _cond_invalid tmp[425404]))
    if call_tmp[659002]
    {
      (425420 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566213] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566214] "maybe param" "temp"
    unknown call_tmp[659007] "expr temp" "maybe param" "maybe type" "temp"
    (659010 'move' call_tmp[659007](425405 call isTrue tmp[425404]))
    (566219 'move' tmp[566214](566217 call _cond_test call_tmp[659007]))
    if tmp[566214]
    {
      unknown tmp[566221] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659012] "expr temp" "maybe param" "maybe type" "temp"
      (659015 'move' call_tmp[659012](130971 call chpl__isTupleOfRanges r[130957]))
      (566223 'move' tmp[566221](425408 call isTrue call_tmp[659012]))
      (566228 'move' tmp[566213](566225 '_paramFoldLogical' tmp[566214] tmp[566221]))
    }
    {
      (566233 'move' tmp[566213](566230 '_paramFoldLogical' tmp[566214] 0))
    }
    (748211 call chpl_statementLevelSymbol tmp[566213])
  }
  function _array[133588](?).localSlice[131013](arg _mt[133716]:_MT[238], arg this[133714]:_array[133588](?), arg d[131010]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[517943] "RVV" "temp"
    unknown call_tmp[659017] "expr temp" "maybe param" "maybe type" "temp"
    (659020 'move' call_tmp[659017](131035 call _cond_test 1))
    if call_tmp[659017]
    {
      unknown call_tmp[659026] "expr temp" "maybe param" "maybe type" "temp"
      (659029 'move' call_tmp[659026](131028 call(131024 call (partial) getIndices _mt[243] d[131010])))
      unknown call_tmp[659033] "expr temp" "maybe param" "maybe type" "temp"
      (659036 'move' call_tmp[659033](384065 call _value _mt[243] this[133714]))
      (131033 call(384061 call (partial) checkSlice _mt[243] this[133714])(131029 'expand_tuple' call_tmp[659026])(value = call_tmp[659033]))
    }
    unknown call_tmp[659040] "expr temp" "maybe param" "maybe type" "temp"
    (659043 'move' call_tmp[659040](131044 call(384069 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133714]) d[131010]))
    (517948 'move' ret[517943](517947 'deref' call_tmp[659040]))
    (517945 return ret[517943])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492096] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659047] "expr temp" "maybe param" "maybe type" "temp"
      (659050 'move' call_tmp[659047](384055 call _value _mt[243] this[133714]))
      (492100 'move' call_type_tmp[492096](131017 'typeof' call_tmp[659047]))
    }
    (354209 'is_subtype' DefaultRectangularArr[379605](?) call_type_tmp[492096])
  }
  function _array[133588](?).chpl__localSliceDefaultArithArrHelp[131056](arg _mt[133720]:_MT[238], arg this[133718]:_array[133588](?), arg d[131053]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no copy return"
  {
    unknown ret[517952] "RVV" "temp"
    unknown call_tmp[659054] "expr temp" "maybe param" "maybe type" "temp"
    (659057 'move' call_tmp[659054](384075 call _value _mt[243] this[133718]))
    unknown call_tmp[659059] "expr temp" "maybe param" "maybe type" "temp"
    (659062 'move' call_tmp[659059](131059 '_wide_get_locale' call_tmp[659054]))
    unknown call_tmp[659064] "expr temp" "maybe param" "maybe type" "temp"
    (659067 'move' call_tmp[659064](131060 call chpl_localeID_to_locale call_tmp[659059]))
    unknown call_tmp[659069] "expr temp" "maybe param" "maybe type" "temp"
    (659072 'move' call_tmp[659069](384078 call here[90435]))
    unknown call_tmp[659074] "expr temp" "maybe param" "maybe type" "temp"
    (659077 'move' call_tmp[659074](131063 call != call_tmp[659064] call_tmp[659069]))
    unknown call_tmp[659079] "expr temp" "maybe param" "maybe type" "temp"
    (659082 'move' call_tmp[659079](131096 call _cond_test call_tmp[659074]))
    if call_tmp[659079]
    {
      unknown call_tmp[659086] "expr temp" "maybe param" "maybe type" "temp"
      (659089 'move' call_tmp[659086](384081 call _value _mt[243] this[133718]))
      unknown call_tmp[659091] "expr temp" "maybe param" "maybe type" "temp"
      (659094 'move' call_tmp[659091](131088 '_wide_get_node' call_tmp[659086]))
      unknown call_tmp[659096] "expr temp" "maybe param" "maybe type" "temp"
      (659099 'move' call_tmp[659096](359805 call here[90435]))
      unknown call_tmp[659103] "expr temp" "maybe param" "maybe type" "temp"
      (659106 'move' call_tmp[659103](131091 call id _mt[243] call_tmp[659096]))
      (131094 call halt "Attempting to take a local slice of an array on locale " call_tmp[659091] " from locale " call_tmp[659103])
    }
    unknown call_tmp[659108] "expr temp" "maybe param" "maybe type" "temp"
    (659111 'move' call_tmp[659108](131105 call this[133718] d[131053]))
    (517957 'move' ret[517952](517956 'deref' call_tmp[659108]))
    (517954 return ret[517952])
  }
  function _array[133588](?).localSlice[131116](arg _mt[133724]:_MT[238], arg this[133722]:_array[133588](?), arg r[131113]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[517961] "RVV" "temp"
    unknown call_tmp[659115] "expr temp" "maybe param" "maybe type" "temp"
    (659118 'move' call_tmp[659115](131141 call _cond_test 1))
    if call_tmp[659115]
    {
      unknown call_tmp[659124] "expr temp" "maybe param" "maybe type" "temp"
      (659127 'move' call_tmp[659124](384103 call _value _mt[243] this[133722]))
      (131139 call(384098 call (partial) checkSlice _mt[243] this[133722])(131135 'expand_tuple' r[131113])(value = call_tmp[659124]))
    }
    unknown call_tmp[659131] "expr temp" "maybe param" "maybe type" "temp"
    (659134 'move' call_tmp[659131](359808 call _value _mt[243] this[133722]))
    unknown call_tmp[659138] "expr temp" "maybe param" "maybe type" "temp"
    (659141 'move' call_tmp[659138](131153 call(131148 call (partial) dsiLocalSlice _mt[243] call_tmp[659131]) r[131113]))
    (517966 'move' ret[517961](517965 'deref' call_tmp[659138]))
    (517963 return ret[517961])
  }
  where {
    unknown tmp[425425] "maybe param" "temp"
    (425436 'move' tmp[425425](131121 call chpl__isTupleOfRanges r[131113]))
    unknown call_tmp[659143] "expr temp" "maybe param" "maybe type" "temp"
    (659146 'move' call_tmp[659143](425438 call _cond_invalid tmp[425425]))
    if call_tmp[659143]
    {
      (425441 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566240] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566241] "maybe param" "temp"
    unknown call_tmp[659148] "expr temp" "maybe param" "maybe type" "temp"
    (659151 'move' call_tmp[659148](425426 call isTrue tmp[425425]))
    (566246 'move' tmp[566241](566244 call _cond_test call_tmp[659148]))
    if tmp[566241]
    {
      { scopeless type
        unknown call_type_tmp[492102] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659155] "expr temp" "maybe param" "maybe type" "temp"
        (659158 'move' call_tmp[659155](384092 call _value _mt[243] this[133722]))
        (492106 'move' call_type_tmp[492102](131124 'typeof' call_tmp[659155]))
      }
      unknown tmp[566248] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659160] "expr temp" "maybe param" "maybe type" "temp"
      (659163 'move' call_tmp[659160](354210 'is_subtype' DefaultRectangularArr[379605](?) call_type_tmp[492102]))
      unknown call_tmp[659165] "expr temp" "maybe param" "maybe type" "temp"
      (659168 'move' call_tmp[659165](131128 call ! call_tmp[659160]))
      (566250 'move' tmp[566248](425429 call isTrue call_tmp[659165]))
      (566255 'move' tmp[566240](566252 '_paramFoldLogical' tmp[566241] tmp[566248]))
    }
    {
      (566260 'move' tmp[566240](566257 '_paramFoldLogical' tmp[566241] 0))
    }
    (748213 call chpl_statementLevelSymbol tmp[566240])
  }
  function _array[133588](?).localSlice[131165](arg _mt[133728]:_MT[238], arg this[133726]:_array[133588](?), arg d[131162]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[517970] "RVV" "temp"
    unknown call_tmp[659174] "expr temp" "maybe param" "maybe type" "temp"
    (659177 'move' call_tmp[659174](131173 call(131169 call (partial) getIndices _mt[243] d[131162])))
    unknown call_tmp[659179] "expr temp" "maybe param" "maybe type" "temp"
    (659182 'move' call_tmp[659179](131176 call(384109 call (partial) localSlice _mt[243] this[133726])(131174 'expand_tuple' call_tmp[659174])))
    (517975 'move' ret[517970](517974 'deref' call_tmp[659179]))
    (517972 return ret[517970])
  }
  function _array[133588](?).these[131184](arg _mt[133732]:_MT[238], arg this[133730]:_array[133588](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    unknown ret[517979] "RVV" "temp"
    {
      unknown _indexOfInterest[131197] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131198] "expr temp" "temp"
      unknown call_tmp[659186] "expr temp" "maybe param" "maybe type" "temp"
      (659189 'move' call_tmp[659186](359813 call _value _mt[243] this[133730]))
      unknown call_tmp[659193] "expr temp" "maybe param" "maybe type" "temp"
      (659196 'move' call_tmp[659193](131192 call(131188 call (partial) these _mt[243] call_tmp[659186])))
      (131207 'move' _iterator[131198](131205 call _getIterator call_tmp[659193]))
      Defer
      {
        {
          (131224 call _freeIterator _iterator[131198])
        }
      }
      { scopeless type
        (131213 'move' _indexOfInterest[131197](131210 call iteratorIndex _iterator[131198]))
      }
      ForLoop[131199]
      {
        unknown i[131217] "index var" "insert auto destroy"
        (480125 'end of statement')
        (131219 'move' i[131217] _indexOfInterest[131197])
        (480126 'end of statement' i[131217])
        {
          unknown yret[517983] "YVV" "temp"
          (517986 'move' yret[517983](517985 'addr of' i[131217]))
          (517988 yield yret[517983])
          (480128 'end of statement' i[131217])
        }
        label _continueLabel[131202]
        _indexOfInterest[131197]
        _iterator[131198]
      }
      label _breakLabel[131203]
    }
    (517981 return ret[517979])
  }
  function _array[133588](?).these[131240](arg _mt[133736]:_MT[238], arg this[133734]:_array[133588](?), param arg tag[131237]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[517992] "RVV" "temp"
    {
      unknown _indexOfInterest[131269] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131270] "expr temp" "temp"
      unknown call_tmp[659200] "expr temp" "maybe param" "maybe type" "temp"
      (659203 'move' call_tmp[659200](359818 call _value _mt[243] this[133734]))
      unknown call_tmp[659207] "expr temp" "maybe param" "maybe type" "temp"
      (659210 'move' call_tmp[659207](131265 call(131260 call (partial) these _mt[243] call_tmp[659200]) tag[131237]))
      (131279 'move' _iterator[131270](131277 call _getIterator call_tmp[659207]))
      Defer
      {
        {
          (131296 call _freeIterator _iterator[131270])
        }
      }
      { scopeless type
        (131285 'move' _indexOfInterest[131269](131282 call iteratorIndex _iterator[131270]))
      }
      ForLoop[131271]
      {
        unknown i[131289] "index var" "insert auto destroy"
        (480131 'end of statement')
        (131291 'move' i[131289] _indexOfInterest[131269])
        (480132 'end of statement' i[131289])
        unknown yret[517996] "YVV" "temp"
        (517999 'move' yret[517996](517998 'addr of' i[131289]))
        (518001 yield yret[517996])
        (480134 'end of statement' i[131289])
        label _continueLabel[131274]
        _indexOfInterest[131269]
        _iterator[131270]
      }
      label _breakLabel[131275]
    }
    (517994 return ret[517992])
  }
  where {
    unknown tmp[425446] "maybe param" "temp"
    (425457 'move' tmp[425446](131247 call == tag[131237] standalone[451]))
    unknown call_tmp[659212] "expr temp" "maybe param" "maybe type" "temp"
    (659215 'move' call_tmp[659212](425459 call _cond_invalid tmp[425446]))
    if call_tmp[659212]
    {
      (425462 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566267] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566268] "maybe param" "temp"
    unknown call_tmp[659217] "expr temp" "maybe param" "maybe type" "temp"
    (659220 'move' call_tmp[659217](425447 call isTrue tmp[425446]))
    (566273 'move' tmp[566268](566271 call _cond_test call_tmp[659217]))
    if tmp[566268]
    {
      unknown tmp[566275] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659224] "expr temp" "maybe param" "maybe type" "temp"
      (659227 'move' call_tmp[659224](384116 call _value _mt[243] this[133734]))
      unknown call_tmp[659229] "expr temp" "maybe param" "maybe type" "temp"
      (659232 'move' call_tmp[659229](131255 'method call resolves' call_tmp[659224] "these"(tag = tag[131237])))
      (566277 'move' tmp[566275](425450 call isTrue call_tmp[659229]))
      (566282 'move' tmp[566267](566279 '_paramFoldLogical' tmp[566268] tmp[566275]))
    }
    {
      (566287 'move' tmp[566267](566284 '_paramFoldLogical' tmp[566268] 0))
    }
    (748215 call chpl_statementLevelSymbol tmp[566267])
  }
  function _array[133588](?).these[131313](arg _mt[133740]:_MT[238], arg this[133738]:_array[133588](?), param arg tag[131310]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[518005] "RVV" "temp"
    {
      unknown _indexOfInterest[131333] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131334] "expr temp" "temp"
      unknown call_tmp[659236] "expr temp" "maybe param" "maybe type" "temp"
      (659239 'move' call_tmp[659236](359823 call _value _mt[243] this[133738]))
      unknown call_tmp[659243] "expr temp" "maybe param" "maybe type" "temp"
      (659246 'move' call_tmp[659243](131329 call(131324 call (partial) these _mt[243] call_tmp[659236]) tag[131310]))
      (131343 'move' _iterator[131334](131341 call _getIterator call_tmp[659243]))
      Defer
      {
        {
          (131360 call _freeIterator _iterator[131334])
        }
      }
      { scopeless type
        (131349 'move' _indexOfInterest[131333](131346 call iteratorIndex _iterator[131334]))
      }
      ForLoop[131335]
      {
        unknown followThis[131353] "index var" "insert auto destroy"
        (480137 'end of statement')
        (131355 'move' followThis[131353] _indexOfInterest[131333])
        (480138 'end of statement' followThis[131353])
        unknown yret[518009] "YVV" "temp"
        (518012 'move' yret[518009](518011 'deref' followThis[131353]))
        (518014 yield yret[518009])
        (480140 'end of statement' followThis[131353])
        label _continueLabel[131338]
        _indexOfInterest[131333]
        _iterator[131334]
      }
      label _breakLabel[131339]
    }
    (518007 return ret[518005])
  }
  where {
    (131320 call == tag[131310] leader[447])
  }
  function _array[133588](?).these[131377](arg _mt[133744]:_MT[238], arg this[133742]:_array[133588](?), param arg tag[131374]:iterKind[453], arg followThis[131379]:_any[178](?), param arg fast[131383]:bool[10] =
  0) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[518018] "RVV" "temp"
    unknown call_tmp[659250] "expr temp" "maybe param" "maybe type" "temp"
    (659253 'move' call_tmp[659250](384129 call _value _mt[243] this[133742]))
    unknown call_tmp[659255] "expr temp" "maybe param" "maybe type" "temp"
    (659258 'move' call_tmp[659255](131403 'method call resolves' call_tmp[659250] "these"(tag = tag[131374]) followThis[131379](fast = fast[131383])))
    unknown call_tmp[659260] "expr temp" "maybe param" "maybe type" "temp"
    (659263 'move' call_tmp[659260](131501 call _cond_test call_tmp[659255]))
    if call_tmp[659260]
    {
      {
        unknown _indexOfInterest[131419] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131420] "expr temp" "temp"
        unknown call_tmp[659267] "expr temp" "maybe param" "maybe type" "temp"
        (659270 'move' call_tmp[659267](359828 call _value _mt[243] this[133742]))
        unknown call_tmp[659274] "expr temp" "maybe param" "maybe type" "temp"
        (659277 'move' call_tmp[659274](131415 call(131406 call (partial) these _mt[243] call_tmp[659267])(tag = tag[131374]) followThis[131379](fast = fast[131383])))
        (131429 'move' _iterator[131420](131427 call _getIterator call_tmp[659274]))
        Defer
        {
          {
            (131446 call _freeIterator _iterator[131420])
          }
        }
        { scopeless type
          (131435 'move' _indexOfInterest[131419](131432 call iteratorIndex _iterator[131420]))
        }
        ForLoop[131421]
        {
          unknown i[131439] "index var" "insert auto destroy"
          (480143 'end of statement')
          (131441 'move' i[131439] _indexOfInterest[131419])
          (480144 'end of statement' i[131439])
          unknown yret[518022] "YVV" "temp"
          (518025 'move' yret[518022](518024 'addr of' i[131439]))
          (518027 yield yret[518022])
          (480146 'end of statement' i[131439])
          label _continueLabel[131424]
          _indexOfInterest[131419]
          _iterator[131420]
        }
        label _breakLabel[131425]
      }
    }
    {
      {
        unknown _indexOfInterest[131466] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131467] "expr temp" "temp"
        unknown call_tmp[659281] "expr temp" "maybe param" "maybe type" "temp"
        (659284 'move' call_tmp[659281](359832 call _value _mt[243] this[133742]))
        unknown call_tmp[659288] "expr temp" "maybe param" "maybe type" "temp"
        (659291 'move' call_tmp[659288](131462 call(131456 call (partial) these _mt[243] call_tmp[659281]) tag[131374] followThis[131379]))
        (131476 'move' _iterator[131467](131474 call _getIterator call_tmp[659288]))
        Defer
        {
          {
            (131493 call _freeIterator _iterator[131467])
          }
        }
        { scopeless type
          (131482 'move' _indexOfInterest[131466](131479 call iteratorIndex _iterator[131467]))
        }
        ForLoop[131468]
        {
          unknown i[131486] "index var" "insert auto destroy"
          (480149 'end of statement')
          (131488 'move' i[131486] _indexOfInterest[131466])
          (480150 'end of statement' i[131486])
          unknown yret[518029] "YVV" "temp"
          (518032 'move' yret[518029](518031 'addr of' i[131486]))
          (518034 yield yret[518029])
          (480152 'end of statement' i[131486])
          label _continueLabel[131471]
          _indexOfInterest[131466]
          _iterator[131467]
        }
        label _breakLabel[131472]
      }
    }
    (518020 return ret[518018])
  }
  where {
    (131392 call == tag[131374] follower[449])
  }
  function _array[133588](?).numElements[131511](arg _mt[133748]:_MT[238], arg this[133746]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518038] "RVV" "temp"
    unknown call_tmp[659293] "expr temp" "maybe param" "maybe type" "temp"
    (659296 'move' call_tmp[659293](131548 call + "'array.numElements' is deprecated - " "please use 'array.size' instead"))
    (131551 call compilerWarning call_tmp[659293])
    (480154 'end of statement')
    unknown call_tmp[659300] "expr temp" "maybe param" "maybe type" "temp"
    (659303 'move' call_tmp[659300](384143 call size _mt[243] this[133746]))
    (518043 'move' ret[518038](518042 'deref' call_tmp[659300]))
    (518040 return ret[518038])
  }
  function _array[133588](?).size[131561](arg _mt[133752]:_MT[238], arg this[133750]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518047] "RVV" "temp"
    unknown call_tmp[659307] "expr temp" "maybe param" "maybe type" "temp"
    (659310 'move' call_tmp[659307](359836 call _value _mt[243] this[133750]))
    unknown call_tmp[659314] "expr temp" "maybe param" "maybe type" "temp"
    (659317 'move' call_tmp[659314](131564 call dom _mt[243] call_tmp[659307]))
    unknown call_tmp[659321] "expr temp" "maybe param" "maybe type" "temp"
    (659324 'move' call_tmp[659321](131567 call dsiNumIndices _mt[243] call_tmp[659314]))
    (518052 'move' ret[518047](518051 'deref' call_tmp[659321]))
    (518049 return ret[518047])
  }
  function _array[133588](?).chpl_checkArrArgDoms[131581](arg _mt[133756]:_MT[238], arg this[133754]:_array[133588](?), arg formalDom[131578]:_domain[125902](?), param arg runtimeChecks[131584]:bool[10]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[659328] "expr temp" "maybe param" "maybe type" "temp"
    (659331 'move' call_tmp[659328](131588 call rank _mt[243] formalDom[131578]))
    unknown call_tmp[659335] "expr temp" "maybe param" "maybe type" "temp"
    (659338 'move' call_tmp[659335](131592 call _dom _mt[243] this[133754]))
    unknown call_tmp[659342] "expr temp" "maybe param" "maybe type" "temp"
    (659345 'move' call_tmp[659342](131595 call rank _mt[243] call_tmp[659335]))
    unknown call_tmp[659347] "expr temp" "maybe param" "maybe type" "temp"
    (659350 'move' call_tmp[659347](131598 call != call_tmp[659328] call_tmp[659342]))
    unknown call_tmp[659352] "expr temp" "maybe param" "maybe type" "temp"
    (659355 'move' call_tmp[659352](131663 call _cond_test call_tmp[659347]))
    if call_tmp[659352]
    {
      unknown call_tmp[659359] "expr temp" "maybe param" "maybe type" "temp"
      (659362 'move' call_tmp[659359](131619 call rank _mt[243] formalDom[131578]))
      unknown call_tmp[659364] "expr temp" "maybe param" "maybe type" "temp"
      (659367 'move' call_tmp[659364](131623 call _cast string[26] call_tmp[659359]))
      unknown call_tmp[659369] "expr temp" "maybe param" "maybe type" "temp"
      (659372 'move' call_tmp[659369](131625 call + "Rank mismatch passing array argument: expected " call_tmp[659364]))
      unknown call_tmp[659374] "expr temp" "maybe param" "maybe type" "temp"
      (659377 'move' call_tmp[659374](131644 call + call_tmp[659369] " but got "))
      unknown call_tmp[659381] "expr temp" "maybe param" "maybe type" "temp"
      (659384 'move' call_tmp[659381](131647 call _dom _mt[243] this[133754]))
      unknown call_tmp[659388] "expr temp" "maybe param" "maybe type" "temp"
      (659391 'move' call_tmp[659388](131650 call rank _mt[243] call_tmp[659381]))
      unknown call_tmp[659393] "expr temp" "maybe param" "maybe type" "temp"
      (659396 'move' call_tmp[659393](131654 call _cast string[26] call_tmp[659388]))
      unknown call_tmp[659398] "expr temp" "maybe param" "maybe type" "temp"
      (659401 'move' call_tmp[659398](131656 call + call_tmp[659374] call_tmp[659393]))
      (131661 call compilerError call_tmp[659398](errorDepth = 2))
    }
    { scopeless type
      unknown call_type_tmp[492108] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659405] "expr temp" "maybe param" "maybe type" "temp"
      (659408 'move' call_tmp[659405](131670 call dist _mt[243] formalDom[131578]))
      unknown call_tmp[659412] "expr temp" "maybe param" "maybe type" "temp"
      (659415 'move' call_tmp[659412](131673 call _value _mt[243] call_tmp[659405]))
      (492112 'move' call_type_tmp[492108](131676 'typeof' call_tmp[659412]))
    }
    unknown call_tmp[659417] "expr temp" "maybe param" "maybe type" "temp"
    (659420 'move' call_tmp[659417](131679 call != call_type_tmp[492108] unmanaged DefaultDist[415355]))
    unknown call_tmp[659422] "expr temp" "maybe param" "maybe type" "temp"
    (659425 'move' call_tmp[659422](131807 call _cond_test call_tmp[659417]))
    if call_tmp[659422]
    {
      { scopeless type
        unknown call_type_tmp[492114] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659429] "expr temp" "maybe param" "maybe type" "temp"
        (659432 'move' call_tmp[659429](131684 call _dom _mt[243] this[133754]))
        (492118 'move' call_type_tmp[492114](131687 'typeof' call_tmp[659429]))
      }
      unknown call_tmp[659434] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (659437 'move' call_tmp[659434](131682 'typeof' formalDom[131578]))
      unknown call_tmp[659439] "expr temp" "maybe param" "maybe type" "temp"
      (659442 'move' call_tmp[659439](131688 call != call_tmp[659434] call_type_tmp[492114]))
      unknown call_tmp[659444] "expr temp" "maybe param" "maybe type" "temp"
      (659447 'move' call_tmp[659444](131713 call _cond_test call_tmp[659439]))
      if call_tmp[659444]
      {
        (131711 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      unknown tmp[425467] "maybe param" "temp"
      (425478 'move' tmp[425467] runtimeChecks[131584])
      unknown call_tmp[659449] "expr temp" "maybe param" "maybe type" "temp"
      (659452 'move' call_tmp[659449](425480 call _cond_invalid tmp[425467]))
      if call_tmp[659449]
      {
        (425483 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[566294] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[566295] "maybe param" "temp"
      unknown call_tmp[659454] "expr temp" "maybe param" "maybe type" "temp"
      (659457 'move' call_tmp[659454](425468 call isTrue tmp[425467]))
      (566300 'move' tmp[566295](566298 call _cond_test call_tmp[659454]))
      if tmp[566295]
      {
        unknown tmp[566302] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[659461] "expr temp" "maybe param" "maybe type" "temp"
        (659464 'move' call_tmp[659461](131721 call dist _mt[243] formalDom[131578]))
        unknown call_tmp[659468] "expr temp" "maybe param" "maybe type" "temp"
        (659471 'move' call_tmp[659468](131725 call _dom _mt[243] this[133754]))
        unknown call_tmp[659475] "expr temp" "maybe param" "maybe type" "temp"
        (659478 'move' call_tmp[659475](131728 call dist _mt[243] call_tmp[659468]))
        unknown call_tmp[659480] "expr temp" "maybe param" "maybe type" "temp"
        (659483 'move' call_tmp[659480](131731 call != call_tmp[659461] call_tmp[659475]))
        (566304 'move' tmp[566302](425471 call isTrue call_tmp[659480]))
        (566309 'move' tmp[566294](566306 '_paramFoldLogical' tmp[566295] tmp[566302]))
      }
      {
        (566314 'move' tmp[566294](566311 '_paramFoldLogical' tmp[566295] 0))
      }
      unknown call_tmp[659485] "expr temp" "maybe param" "maybe type" "temp"
      (659488 'move' call_tmp[659485](131802 call _cond_test tmp[566294]))
      if call_tmp[659485]
      {
        unknown call_tmp[659492] "expr temp" "maybe param" "maybe type" "temp"
        (659495 'move' call_tmp[659492](131772 call dist _mt[243] formalDom[131578]))
        unknown call_tmp[659499] "expr temp" "maybe param" "maybe type" "temp"
        (659502 'move' call_tmp[659499](131794 call _dom _mt[243] this[133754]))
        unknown call_tmp[659506] "expr temp" "maybe param" "maybe type" "temp"
        (659509 'move' call_tmp[659506](131797 call dist _mt[243] call_tmp[659499]))
        (131800 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: " call_tmp[659492] "\n" "  Actual domain map is: " call_tmp[659506])
      }
    }
    unknown tmp[425488] "maybe param" "temp"
    (425499 'move' tmp[425488] runtimeChecks[131584])
    unknown call_tmp[659511] "expr temp" "maybe param" "maybe type" "temp"
    (659514 'move' call_tmp[659511](425501 call _cond_invalid tmp[425488]))
    if call_tmp[659511]
    {
      (425504 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566321] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566322] "maybe param" "temp"
    unknown call_tmp[659516] "expr temp" "maybe param" "maybe type" "temp"
    (659519 'move' call_tmp[659516](425489 call isTrue tmp[425488]))
    (566327 'move' tmp[566322](566325 call _cond_test call_tmp[659516]))
    if tmp[566322]
    {
      unknown tmp[566329] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659523] "expr temp" "maybe param" "maybe type" "temp"
      (659526 'move' call_tmp[659523](131814 call _dom _mt[243] this[133754]))
      unknown call_tmp[659528] "expr temp" "maybe param" "maybe type" "temp"
      (659531 'move' call_tmp[659528](131817 call != formalDom[131578] call_tmp[659523]))
      (566331 'move' tmp[566329](425492 call isTrue call_tmp[659528]))
      (566336 'move' tmp[566321](566333 '_paramFoldLogical' tmp[566322] tmp[566329]))
    }
    {
      (566341 'move' tmp[566321](566338 '_paramFoldLogical' tmp[566322] 0))
    }
    unknown call_tmp[659533] "expr temp" "maybe param" "maybe type" "temp"
    (659536 'move' call_tmp[659533](131882 call _cond_test tmp[566321]))
    if call_tmp[659533]
    {
      unknown call_tmp[659540] "expr temp" "maybe param" "maybe type" "temp"
      (659543 'move' call_tmp[659540](131877 call _dom _mt[243] this[133754]))
      (131880 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom[131578] "\n" "  Actual domain is: " call_tmp[659540])
    }
    (518054 return _void[55])
  }
  function _array[133588](?).reindex[131895](arg _mt[133760]:_MT[238], arg this[133758]:_array[133588](?), arg newDomain[131892]:_domain[125902](?)) : _unknown[51] "inline" "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518058] "RVV" "temp"
    unknown call_tmp[659549] "expr temp" "maybe param" "maybe type" "temp"
    (659552 'move' call_tmp[659549](131916 call(131912 call (partial) dims _mt[243] newDomain[131892])))
    unknown call_tmp[659554] "expr temp" "maybe param" "maybe type" "temp"
    (659557 'move' call_tmp[659554](131919 call(384156 call (partial) reindex _mt[243] this[133758])(131917 'expand_tuple' call_tmp[659549])))
    (518063 'move' ret[518058](518062 'deref' call_tmp[659554]))
    (518060 return ret[518058])
  }
  where {
    unknown tmp[425509] "maybe param" "temp"
    unknown call_tmp[659561] "expr temp" "maybe param" "maybe type" "temp"
    (659564 'move' call_tmp[659561](131899 call _dom _mt[243] this[133758]))
    (425520 'move' tmp[425509](131903 call isRectangularDom call_tmp[659561]))
    unknown call_tmp[659566] "expr temp" "maybe param" "maybe type" "temp"
    (659569 'move' call_tmp[659566](425522 call _cond_invalid tmp[425509]))
    if call_tmp[659566]
    {
      (425525 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566348] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566349] "maybe param" "temp"
    unknown call_tmp[659571] "expr temp" "maybe param" "maybe type" "temp"
    (659574 'move' call_tmp[659571](425510 call isTrue tmp[425509]))
    (566354 'move' tmp[566349](566352 call _cond_test call_tmp[659571]))
    if tmp[566349]
    {
      unknown tmp[566356] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659576] "expr temp" "maybe param" "maybe type" "temp"
      (659579 'move' call_tmp[659576](131907 call isRectangularDom newDomain[131892]))
      (566358 'move' tmp[566356](425513 call isTrue call_tmp[659576]))
      (566363 'move' tmp[566348](566360 '_paramFoldLogical' tmp[566349] tmp[566356]))
    }
    {
      (566368 'move' tmp[566348](566365 '_paramFoldLogical' tmp[566349] 0))
    }
    (748217 call chpl_statementLevelSymbol tmp[566348])
  }
  function _array[133588](?).reindex[131932](arg _mt[133764]:_MT[238], arg this[133762]:_array[133588](?), arg newDims[131929]:_any[178](?) ...) : _unknown[51] "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518067] "RVV" "temp"
    {
      unknown i[131986] "dead at end of block" "insert auto destroy"
      (542908 'init var' i[131986] 0)
      (480164 'end of statement')
      unknown tmp[131987] "maybe param" "temp"
      unknown call_tmp[659583] "expr temp" "maybe param" "maybe type" "temp"
      (659586 'move' call_tmp[659583](131943 call size _mt[243] newDims[131929]))
      unknown call_tmp[659588] "expr temp" "maybe param" "maybe type" "temp"
      (659591 'move' call_tmp[659588](131947 call - call_tmp[659583] 1))
      (131999 'move' tmp[131987](131997 call chpl_compute_low_param_loop_bound 0 call_tmp[659588]))
      unknown tmp[131988] "maybe param" "temp"
      unknown call_tmp[659595] "expr temp" "maybe param" "maybe type" "temp"
      (659598 'move' call_tmp[659595](132006 call size _mt[243] newDims[131929]))
      unknown call_tmp[659600] "expr temp" "maybe param" "maybe type" "temp"
      (659603 'move' call_tmp[659600](132004 call - call_tmp[659595] 1))
      (132012 'move' tmp[131988](132010 call chpl_compute_high_param_loop_bound 0 call_tmp[659600]))
      unknown tmp[131989] "maybe param" "temp"
      (132015 'move' tmp[131989] 1)
      ParamForLoop[132017]
      { i[131986] tmp[131987] tmp[131988] tmp[131989]
        unknown call_tmp[659605] "expr temp" "maybe param" "maybe type" "temp"
        (659608 'move' call_tmp[659605](131955 call newDims[131929] i[131986]))
        unknown call_tmp[659610] "expr temp" "maybe param" "maybe type" "temp"
        (659613 'move' call_tmp[659610](131957 call isRange call_tmp[659605]))
        unknown call_tmp[659615] "expr temp" "maybe param" "maybe type" "temp"
        (659618 'move' call_tmp[659615](131958 call ! call_tmp[659610]))
        unknown call_tmp[659620] "expr temp" "maybe param" "maybe type" "temp"
        (659623 'move' call_tmp[659620](131981 call _cond_test call_tmp[659615]))
        if call_tmp[659620]
        {
          (131979 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[131991]
      label _breakLabel[131990]
    }
    unknown call_tmp[659627] "expr temp" "maybe param" "maybe type" "temp"
    (659630 'move' call_tmp[659627](132028 call rank _mt[243] this[133762]))
    unknown call_tmp[659634] "expr temp" "maybe param" "maybe type" "temp"
    (659637 'move' call_tmp[659634](132032 call size _mt[243] newDims[131929]))
    unknown call_tmp[659639] "expr temp" "maybe param" "maybe type" "temp"
    (659642 'move' call_tmp[659639](132035 call != call_tmp[659627] call_tmp[659634]))
    unknown call_tmp[659644] "expr temp" "maybe param" "maybe type" "temp"
    (659647 'move' call_tmp[659644](132095 call _cond_test call_tmp[659639]))
    if call_tmp[659644]
    {
      unknown call_tmp[659651] "expr temp" "maybe param" "maybe type" "temp"
      (659654 'move' call_tmp[659651](132056 call rank _mt[243] this[133762]))
      unknown call_tmp[659656] "expr temp" "maybe param" "maybe type" "temp"
      (659659 'move' call_tmp[659656](132060 call _cast string[26] call_tmp[659651]))
      unknown call_tmp[659661] "expr temp" "maybe param" "maybe type" "temp"
      (659664 'move' call_tmp[659661](132062 call + "rank mismatch: cannot reindex() from " call_tmp[659656]))
      unknown call_tmp[659666] "expr temp" "maybe param" "maybe type" "temp"
      (659669 'move' call_tmp[659666](132081 call + call_tmp[659661] " dimension(s) to "))
      unknown call_tmp[659673] "expr temp" "maybe param" "maybe type" "temp"
      (659676 'move' call_tmp[659673](132084 call size _mt[243] newDims[131929]))
      unknown call_tmp[659678] "expr temp" "maybe param" "maybe type" "temp"
      (659681 'move' call_tmp[659678](132088 call _cast string[26] call_tmp[659673]))
      unknown call_tmp[659683] "expr temp" "maybe param" "maybe type" "temp"
      (659686 'move' call_tmp[659683](132090 call + call_tmp[659666] call_tmp[659678]))
      (132093 call compilerError call_tmp[659683])
    }
    {
      unknown i[132173] "dead at end of block" "insert auto destroy"
      (542910 'init var' i[132173] 0)
      (480167 'end of statement')
      unknown tmp[132174] "maybe param" "temp"
      unknown call_tmp[659690] "expr temp" "maybe param" "maybe type" "temp"
      (659693 'move' call_tmp[659690](384162 call rank _mt[243] this[133762]))
      unknown call_tmp[659695] "expr temp" "maybe param" "maybe type" "temp"
      (659698 'move' call_tmp[659695](132103 call - call_tmp[659690] 1))
      (132186 'move' tmp[132174](132184 call chpl_compute_low_param_loop_bound 0 call_tmp[659695]))
      unknown tmp[132175] "maybe param" "temp"
      unknown call_tmp[659702] "expr temp" "maybe param" "maybe type" "temp"
      (659705 'move' call_tmp[659702](384170 call rank _mt[243] this[133762]))
      unknown call_tmp[659707] "expr temp" "maybe param" "maybe type" "temp"
      (659710 'move' call_tmp[659707](132191 call - call_tmp[659702] 1))
      (132196 'move' tmp[132175](132194 call chpl_compute_high_param_loop_bound 0 call_tmp[659707]))
      unknown tmp[132176] "maybe param" "temp"
      (132199 'move' tmp[132176] 1)
      ParamForLoop[132201]
      { i[132173] tmp[132174] tmp[132175] tmp[132176]
        unknown call_tmp[659712] "expr temp" "maybe param" "maybe type" "temp"
        (659715 'move' call_tmp[659712](132110 call newDims[131929] i[132173]))
        unknown call_tmp[659719] "expr temp" "maybe param" "maybe type" "temp"
        (659722 'move' call_tmp[659719](132111 call size _mt[243] call_tmp[659712]))
        unknown call_tmp[659726] "expr temp" "maybe param" "maybe type" "temp"
        (659729 'move' call_tmp[659726](359861 call _value _mt[243] this[133762]))
        unknown call_tmp[659733] "expr temp" "maybe param" "maybe type" "temp"
        (659736 'move' call_tmp[659733](132115 call dom _mt[243] call_tmp[659726]))
        unknown call_tmp[659740] "expr temp" "maybe param" "maybe type" "temp"
        (659743 'move' call_tmp[659740](132123 call(132118 call (partial) dsiDim _mt[243] call_tmp[659733]) i[132173]))
        unknown call_tmp[659747] "expr temp" "maybe param" "maybe type" "temp"
        (659750 'move' call_tmp[659747](132124 call size _mt[243] call_tmp[659740]))
        unknown call_tmp[659752] "expr temp" "maybe param" "maybe type" "temp"
        (659755 'move' call_tmp[659752](132127 call != call_tmp[659719] call_tmp[659747]))
        unknown call_tmp[659757] "expr temp" "maybe param" "maybe type" "temp"
        (659760 'move' call_tmp[659757](132168 call _cond_test call_tmp[659752]))
        if call_tmp[659757]
        {
          (132166 call halt "extent in dimension " i[132173] " does not match actual")
          (480168 'end of statement' i[132173])
        }
      }
      label _unused_continueLabel[132178]
      label _breakLabel[132177]
    }
    unknown call_tmp[659764] "expr temp" "maybe param" "maybe type" "temp"
    (659767 'move' call_tmp[659764](132211 call _value _mt[243] this[133762]))
    unknown call_tmp[659771] "maybe param" "maybe type" "temp"
    (659774 'move' call_tmp[659771](132214 call dom _mt[243] call_tmp[659764]))
    const thisDomClass[132217] "dead at end of block" "const" "insert auto destroy"
    (542912 'init var' thisDomClass[132217] call_tmp[659771])
    (132220 'end of statement')
    unknown call_tmp[659778] "expr temp" "maybe param" "maybe type" "temp"
    (659781 'move' call_tmp[659778](132228 call pid _mt[243] thisDomClass[132217]))
    unknown call_tmp[659783] "maybe param" "maybe type" "temp"
    (659786 'move' call_tmp[659783](132232 call _build_tuple thisDomClass[132217] call_tmp[659778]))
    const tmp[132234] "dead at end of block" "const" "insert auto destroy" "temp"
    (542914 'init var' tmp[132234] call_tmp[659783])
    (132241 call _check_tuple_var_decl tmp[132234] 2)
    (480170 'end of statement')
    unknown call_tmp[659788] "maybe param" "maybe type" "temp"
    (659791 'move' call_tmp[659788](132235 call tmp[132234] 0))
    const dom[132221] "dead at end of block" "const" "insert auto destroy"
    (542916 'init var' dom[132221] call_tmp[659788])
    unknown call_tmp[659793] "maybe param" "maybe type" "temp"
    (659796 'move' call_tmp[659793](132238 call tmp[132234] 1))
    const dompid[132223] "dead at end of block" "const" "insert auto destroy"
    (542918 'init var' dompid[132223] call_tmp[659793])
    (132246 'end of statement')
    unknown call_tmp[659798] "maybe param" "maybe type" "temp"
    (659801 'move' call_tmp[659798](132250 call chpl__buildDomainExpr(132248 'expand_tuple' newDims[131929])))
    const updom[132252] "dead at end of block" "const" "no auto destroy"
    (542920 'init var' updom[132252] call_tmp[659798])
    (132255 'end of statement')
    unknown call_tmp[659805] "expr temp" "maybe param" "maybe type" "temp"
    (659808 'move' call_tmp[659805](132261 call _dom _mt[243] this[133762]))
    unknown call_tmp[659812] "expr temp" "maybe param" "maybe type" "temp"
    (659815 'move' call_tmp[659812](132264 call dist _mt[243] call_tmp[659805]))
    unknown call_tmp[659819] "expr temp" "maybe param" "maybe type" "temp"
    (659822 'move' call_tmp[659819](132267 call _pid _mt[243] call_tmp[659812]))
    unknown call_tmp[659826] "expr temp" "maybe param" "maybe type" "temp"
    (659829 'move' call_tmp[659826](132273 call _dom _mt[243] this[133762]))
    unknown call_tmp[659833] "expr temp" "maybe param" "maybe type" "temp"
    (659836 'move' call_tmp[659833](132276 call dist _mt[243] call_tmp[659826]))
    unknown call_tmp[659840] "expr temp" "maybe param" "maybe type" "temp"
    (659843 'move' call_tmp[659840](132279 call _instance _mt[243] call_tmp[659833]))
    unknown call_tmp[659847] "expr temp" "maybe param" "maybe type" "temp"
    (659850 'move' call_tmp[659847](132284 call _value _mt[243] updom[132252]))
    unknown call_tmp[659852] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659855 'move' call_tmp[659852](747796 'new' ArrayViewReindexDist[384176](?)(downDistPid = call_tmp[659819])(downDistInst = call_tmp[659840])(updom = call_tmp[659847])(downdomPid = dompid[132223])(downdomInst = dom[132221])(_chpl_manager = unmanaged[220](?))))
    const redist[132293] "dead at end of block" "const" "insert auto destroy"
    (542922 'init var' redist[132293] call_tmp[659852])
    (132296 'end of statement')
    unknown call_tmp[659857] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659860 'move' call_tmp[659857](747797 'new' _distribution[118967](?) redist[132293]))
    const redistRec[132302] "dead at end of block" "const" "insert auto destroy"
    (542924 'init var' redistRec[132302] call_tmp[659857])
    (132305 'end of statement')
    unknown call_tmp[659864] "expr temp" "maybe param" "maybe type" "temp"
    (659867 'move' call_tmp[659864](384186 call rank _mt[243] this[133762]))
    unknown call_tmp[659871] "expr temp" "maybe param" "maybe type" "temp"
    (659874 'move' call_tmp[659871](132312 call idxType _mt[243] updom[132252]))
    unknown call_tmp[659878] "expr temp" "maybe param" "maybe type" "temp"
    (659881 'move' call_tmp[659878](132316 call stridable _mt[243] updom[132252]))
    unknown call_tmp[659885] "expr temp" "maybe param" "maybe type" "temp"
    (659888 'move' call_tmp[659885](132324 call(132320 call (partial) dims _mt[243] updom[132252])))
    unknown call_tmp[659890] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659893 'move' call_tmp[659890](747798 'new' _domain[125902](?) redistRec[132302] call_tmp[659864] call_tmp[659871] call_tmp[659878] call_tmp[659885]))
    const newDom[132326] "dead at end of block" "const" "no auto destroy"
    (542926 'init var' newDom[132326] call_tmp[659890])
    (132329 'end of statement')
    unknown call_tmp[659897] "expr temp" "maybe param" "maybe type" "temp"
    (659900 'move' call_tmp[659897](132331 call _value _mt[243] newDom[132326]))
    unknown call_tmp[659904] "expr temp" "maybe param" "maybe type" "temp"
    (659907 'move' call_tmp[659904](132334 call _free_when_no_arrs _mt[243] call_tmp[659897]))
    (132338 call = call_tmp[659904] 1)
    (480179 'end of statement' newDom[132326])
    unknown call_tmp[659911] "expr temp" "maybe param" "maybe type" "temp"
    (659914 'move' call_tmp[659911](132347 call _value _mt[243] this[133762]))
    unknown call_tmp[659918] "expr temp" "maybe param" "maybe type" "temp"
    (659921 'move' call_tmp[659918](132351 call _pid _mt[243] this[133762]))
    unknown call_tmp[659923] "maybe param" "maybe type" "temp"
    (659926 'move' call_tmp[659923](132355 call _build_tuple call_tmp[659911] call_tmp[659918]))
    const tmp[132357] "dead at end of block" "const" "insert auto destroy" "temp"
    (542928 'init var' tmp[132357] call_tmp[659923])
    (132364 call _check_tuple_var_decl tmp[132357] 2)
    (480181 'end of statement')
    unknown call_tmp[659928] "maybe param" "maybe type" "temp"
    (659931 'move' call_tmp[659928](132358 call tmp[132357] 0))
    const arr[132341] "dead at end of block" "const" "insert auto destroy"
    (542930 'init var' arr[132341] call_tmp[659928])
    unknown call_tmp[659933] "maybe param" "maybe type" "temp"
    (659936 'move' call_tmp[659933](132361 call tmp[132357] 1))
    const arrpid[132343] "dead at end of block" "const" "insert auto destroy"
    (542932 'init var' arrpid[132343] call_tmp[659933])
    (132369 'end of statement')
    unknown call_tmp[659940] "expr temp" "maybe param" "maybe type" "temp"
    (659943 'move' call_tmp[659940](132375 call eltType _mt[243] this[133762]))
    unknown call_tmp[659947] "expr temp" "maybe param" "maybe type" "temp"
    (659950 'move' call_tmp[659947](132381 call _pid _mt[243] newDom[132326]))
    unknown call_tmp[659954] "expr temp" "maybe param" "maybe type" "temp"
    (659957 'move' call_tmp[659954](132386 call _instance _mt[243] newDom[132326]))
    unknown call_tmp[659959] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659962 'move' call_tmp[659959](747799 'new' ArrayViewReindexArr[384190](?)(eltType = call_tmp[659940])(_DomPid = call_tmp[659947])(dom = call_tmp[659954])(_ArrPid = arrpid[132343])(_ArrInstance = arr[132341])(_chpl_manager = unmanaged[220](?))))
    unknown x[132395] "dead at end of block" "insert auto destroy"
    (542934 'init var' x[132395] call_tmp[659959])
    (132398 'end of statement' updom[132252] dompid[132223] dom[132221] redist[132293] redistRec[132302] updom[132252] updom[132252] updom[132252] newDom[132326] newDom[132326] arrpid[132343] arr[132341])
    unknown call_tmp[659966] "expr temp" "maybe param" "maybe type" "temp"
    (659969 'move' call_tmp[659966](132400 call _value _mt[243] newDom[132326]))
    (132410 call(132403 call (partial) add_arr _mt[243] call_tmp[659966]) x[132395](locking = 0))
    (480186 'end of statement' newDom[132326] x[132395])
    unknown call_tmp[659973] "expr temp" "maybe param" "maybe type" "temp"
    (659976 'move' call_tmp[659973](132415 call _newArray x[132395]))
    (518072 'move' ret[518067](518071 'deref' call_tmp[659973]))
    gotoReturn _end_reindex[518065] _end_reindex[518065]
    (480189 'end of statement' x[132395])
    label _end_reindex[518065]
    (518069 return ret[518067])
  }
  where {
    unknown call_tmp[659980] "expr temp" "maybe param" "maybe type" "temp"
    (659983 'move' call_tmp[659980](131936 call _dom _mt[243] this[133762]))
    (131940 call isRectangularDom call_tmp[659980])
  }
  function _array[133588](?).reindex[132427](arg _mt[133768]:_MT[238], arg this[133766]:_array[133588](?), arg d[132424]:_domain[125902](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns aliasing array" "no return value for void"
  {
    (132448 call compilerError "Reindexing non-rectangular arrays is not permitted.")
    (518076 return _void[55])
  }
  function _array[133588](?).writeThis[132457](arg _mt[133772]:_MT[238], arg this[133770]:_array[133588](?), arg f[132455]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[659987] "expr temp" "maybe param" "maybe type" "temp"
    (659990 'move' call_tmp[659987](359880 call _value _mt[243] this[133770]))
    (132465 call(132460 call (partial) dsiSerialWrite _mt[243] call_tmp[659987]) f[132455])
    (518078 return _void[55])
  }
  function _array[133588](?).readThis[132474](arg _mt[133776]:_MT[238], arg this[133774]:_array[133588](?), arg f[132472]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[659996] "expr temp" "maybe param" "maybe type" "temp"
    (659999 'move' call_tmp[659996](359884 call _value _mt[243] this[133774]))
    (132482 call(132477 call (partial) dsiSerialRead _mt[243] call_tmp[659996]) f[132472])
    (518080 return _void[55])
  }
  function _array[133588](?).IRV[132489](arg _mt[133780]:_MT[238], arg this[133778]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens" "no return value for void"
  {
    (132516 call compilerError "only sparse arrays have an IRV")
    (518082 return _void[55])
  }
  where {
    unknown call_tmp[660003] "expr temp" "maybe param" "maybe type" "temp"
    (660006 'move' call_tmp[660003](132494 call isSparseArr this[133778]))
    (132495 call ! call_tmp[660003])
  }
  function _array[133588](?).IRV[132524](arg _mt[133784]:_MT[238], arg this[133782]:_array[133588](?)) ref : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[518086] "RVV" "temp"
    unknown call_tmp[660010] "expr temp" "maybe param" "maybe type" "temp"
    (660013 'move' call_tmp[660010](359888 call _value _mt[243] this[133782]))
    unknown call_tmp[660017] "expr temp" "maybe param" "maybe type" "temp"
    (660020 'move' call_tmp[660017](132533 call IRV _mt[243] call_tmp[660010]))
    (518091 'move' ret[518086](518090 'addr of' call_tmp[660017]))
    (518088 return ret[518086])
  }
  where {
    (132529 call isSparseArr this[133782])
  }
  function _array[133588](?).sorted[132553](arg _mt[133788]:_MT[238], arg this[133786]:_array[133588](?), arg comparator[132549]:_any[178](?) :
  (748729 call chpl_defaultComparator) =
  (132548 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518095] "RVV" "temp"
    unknown call_tmp[660024] "expr temp" "maybe param" "maybe type" "temp"
    (660027 'move' call_tmp[660024](384203 call _value _mt[243] this[133786]))
    unknown call_tmp[660029] "expr temp" "maybe param" "maybe type" "temp"
    (660032 'move' call_tmp[660029](132577 call canResolveMethod module=[255] Reflection[224794] call_tmp[660024] "dsiSorted" comparator[132549]))
    unknown call_tmp[660034] "expr temp" "maybe param" "maybe type" "temp"
    (660037 'move' call_tmp[660034](132720 call _cond_test call_tmp[660029]))
    if call_tmp[660034]
    {
      {
        unknown _indexOfInterest[132590] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132591] "expr temp" "temp"
        unknown call_tmp[660041] "expr temp" "maybe param" "maybe type" "temp"
        (660044 'move' call_tmp[660041](359898 call _value _mt[243] this[133786]))
        unknown call_tmp[660048] "expr temp" "maybe param" "maybe type" "temp"
        (660051 'move' call_tmp[660048](132585 call(132580 call (partial) dsiSorted _mt[243] call_tmp[660041]) comparator[132549]))
        (132600 'move' _iterator[132591](132598 call _getIterator call_tmp[660048]))
        Defer
        {
          {
            (132617 call _freeIterator _iterator[132591])
          }
        }
        { scopeless type
          (132606 'move' _indexOfInterest[132590](132603 call iteratorIndex _iterator[132591]))
        }
        ForLoop[132592]
        {
          unknown i[132610] "index var" "insert auto destroy"
          (480197 'end of statement')
          (132612 'move' i[132610] _indexOfInterest[132590])
          (480198 'end of statement' i[132610])
          {
            unknown yret[518099] "YVV" "temp"
            (518102 'move' yret[518099](518101 'deref' i[132610]))
            (518104 yield yret[518099])
            (480200 'end of statement' i[132610])
          }
          label _continueLabel[132595]
          _indexOfInterest[132590]
          _iterator[132591]
        }
        label _breakLabel[132596]
      }
    }
    {
      unknown call_tmp[660055] "expr temp" "maybe param" "maybe type" "temp"
      (660058 'move' call_tmp[660055](384210 call _value _mt[243] this[133786]))
      unknown call_tmp[660060] "expr temp" "maybe param" "maybe type" "temp"
      (660063 'move' call_tmp[660060](132632 call canResolveMethod module=[255] Reflection[224794] call_tmp[660055] "dsiSorted"))
      unknown call_tmp[660065] "expr temp" "maybe param" "maybe type" "temp"
      (660068 'move' call_tmp[660065](132716 call _cond_test call_tmp[660060]))
      if call_tmp[660065]
      {
        { scopeless type
          unknown call_type_tmp[492120] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[660072] "expr temp" "maybe param" "maybe type" "temp"
          (660075 'move' call_tmp[660072](384214 call _value _mt[243] this[133786]))
          (492124 'move' call_type_tmp[492120](132635 'typeof' call_tmp[660072]))
        }
        unknown call_tmp[660077] "expr temp" "maybe param" "maybe type" "temp"
        (660080 'move' call_tmp[660077](132637 call _cast string[26] call_type_tmp[492120]))
        unknown call_tmp[660082] "expr temp" "maybe param" "maybe type" "temp"
        (660085 'move' call_tmp[660082](132656 call + call_tmp[660077] " does not support dsiSorted(comparator)"))
        (132659 call compilerError call_tmp[660082])
      }
      {
        unknown copy[132667] "dead at end of block" "insert auto destroy"
        (542936 'init var' copy[132667] this[133786])
        (132670 'end of statement')
        (132676 call sort copy[132667](comparator = comparator[132549]))
        (480203 'end of statement' copy[132667])
        {
          unknown _indexOfInterest[132683] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[132684] "expr temp" "temp"
          (132693 'move' _iterator[132684](132691 call _getIterator copy[132667]))
          Defer
          {
            {
              (132709 call _freeIterator _iterator[132684])
            }
          }
          { scopeless type
            (132698 'move' _indexOfInterest[132683](132695 call iteratorIndex _iterator[132684]))
          }
          ForLoop[132685]
          {
            unknown ind[132702] "index var" "insert auto destroy"
            (480206 'end of statement')
            (132704 'move' ind[132702] _indexOfInterest[132683])
            (480207 'end of statement' ind[132702])
            unknown yret[518106] "YVV" "temp"
            (518109 'move' yret[518106](518108 'deref' ind[132702]))
            (518111 yield yret[518106])
            (480209 'end of statement' ind[132702])
            label _continueLabel[132688]
            _indexOfInterest[132683]
            _iterator[132684]
          }
          label _breakLabel[132689]
        }
        (355034 'used modules list'(132663 'use' Sort[267880]))
      }
      (359902 'referenced modules list' Reflection[224794])
    }
    (518097 return ret[518095])
    (359892 'referenced modules list' Reflection[224794])
  }
  function _array[133588](?).displayRepresentation[132730](arg _mt[133792]:_MT[238], arg this[133790]:_array[133588](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660089] "expr temp" "maybe param" "maybe type" "temp"
    (660092 'move' call_tmp[660089](359908 call _value _mt[243] this[133790]))
    (132737 call(132733 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[660089]))
    (518113 return _void[55])
  }
  function _array[133588](?).targetLocales[132744](arg _mt[133796]:_MT[238], arg this[133794]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518117] "RVV" "temp"
    unknown call_tmp[660098] "expr temp" "maybe param" "maybe type" "temp"
    (660101 'move' call_tmp[660098](359912 call _value _mt[243] this[133794]))
    unknown call_tmp[660105] "expr temp" "maybe param" "maybe type" "temp"
    (660108 'move' call_tmp[660105](132751 call(132747 call (partial) dsiTargetLocales _mt[243] call_tmp[660098])))
    (518122 'move' ret[518117](518121 'deref' call_tmp[660105]))
    (518119 return ret[518117])
  }
  function _array[133588](?).hasSingleLocalSubdomain[132759](arg _mt[133800]:_MT[238], arg this[133798]:_array[133588](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518126] "RVV" "param" "temp"
    unknown call_tmp[660112] "expr temp" "maybe param" "maybe type" "temp"
    (660115 'move' call_tmp[660112](359916 call _value _mt[243] this[133798]))
    unknown call_tmp[660119] "expr temp" "maybe param" "maybe type" "temp"
    (660122 'move' call_tmp[660119](132766 call(132762 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660112])))
    (518131 'move' ret[518126](518130 'deref' call_tmp[660119]))
    (518128 return ret[518126])
  }
  function _array[133588](?).localSubdomain[132780](arg _mt[133804]:_MT[238], arg this[133802]:_array[133588](?), arg loc[132776]:locale[28] =
  (384222 call here[90435])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518135] "RVV" "temp"
    unknown call_tmp[660126] "expr temp" "maybe param" "maybe type" "temp"
    (660129 'move' call_tmp[660126](359920 call _value _mt[243] this[133802]))
    unknown call_tmp[660133] "expr temp" "maybe param" "maybe type" "temp"
    (660136 'move' call_tmp[660133](132787 call(132783 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660126])))
    unknown call_tmp[660138] "expr temp" "maybe param" "maybe type" "temp"
    (660141 'move' call_tmp[660138](132788 call ! call_tmp[660133]))
    unknown call_tmp[660143] "expr temp" "maybe param" "maybe type" "temp"
    (660146 'move' call_tmp[660143](132795 call _cond_test call_tmp[660138]))
    if call_tmp[660143]
    {
      (132793 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[660150] "expr temp" "maybe param" "maybe type" "temp"
    (660153 'move' call_tmp[660150](359924 call _value _mt[243] this[133802]))
    unknown call_tmp[660157] "expr temp" "maybe param" "maybe type" "temp"
    (660160 'move' call_tmp[660157](132807 call(132802 call (partial) dsiLocalSubdomain _mt[243] call_tmp[660150]) loc[132776]))
    (518140 'move' ret[518135](518139 'deref' call_tmp[660157]))
    (518137 return ret[518135])
  }
  function _array[133588](?).localSubdomains[132820](arg _mt[133808]:_MT[238], arg this[133806]:_array[133588](?), arg loc[132816]:locale[28] =
  (384225 call here[90435])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518144] "RVV" "temp"
    unknown call_tmp[660164] "expr temp" "maybe param" "maybe type" "temp"
    (660167 'move' call_tmp[660164](359928 call _value _mt[243] this[133806]))
    unknown call_tmp[660171] "expr temp" "maybe param" "maybe type" "temp"
    (660174 'move' call_tmp[660171](132827 call(132823 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660164])))
    unknown call_tmp[660176] "expr temp" "maybe param" "maybe type" "temp"
    (660179 'move' call_tmp[660176](132881 call _cond_test call_tmp[660171]))
    if call_tmp[660176]
    {
      unknown yret[518148] "YVV" "temp"
      unknown call_tmp[660183] "expr temp" "maybe param" "maybe type" "temp"
      (660186 'move' call_tmp[660183](132831 call(384228 call (partial) localSubdomain _mt[243] this[133806]) loc[132816]))
      (518151 'move' yret[518148](518150 'deref' call_tmp[660183]))
      (518153 yield yret[518148])
    }
    {
      {
        unknown _indexOfInterest[132846] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132847] "expr temp" "temp"
        unknown call_tmp[660190] "expr temp" "maybe param" "maybe type" "temp"
        (660193 'move' call_tmp[660190](359932 call _value _mt[243] this[133806]))
        unknown call_tmp[660197] "expr temp" "maybe param" "maybe type" "temp"
        (660200 'move' call_tmp[660197](132842 call(132837 call (partial) dsiLocalSubdomains _mt[243] call_tmp[660190]) loc[132816]))
        (132856 'move' _iterator[132847](132854 call _getIterator call_tmp[660197]))
        Defer
        {
          {
            (132873 call _freeIterator _iterator[132847])
          }
        }
        { scopeless type
          (132862 'move' _indexOfInterest[132846](132859 call iteratorIndex _iterator[132847]))
        }
        ForLoop[132848]
        {
          unknown d[132866] "index var" "insert auto destroy"
          (480218 'end of statement')
          (132868 'move' d[132866] _indexOfInterest[132846])
          (480219 'end of statement' d[132866])
          unknown yret[518155] "YVV" "temp"
          (518158 'move' yret[518155](518157 'deref' d[132866]))
          (518160 yield yret[518155])
          (480221 'end of statement' d[132866])
          label _continueLabel[132851]
          _indexOfInterest[132846]
          _iterator[132847]
        }
        label _breakLabel[132852]
      }
    }
    (518146 return ret[518144])
  }
  function _array[133588](?).chpl__isDense1DArray[132890](arg _mt[133812]:_MT[238], arg this[133810]:_array[133588](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518164] "RVV" "param" "temp"
    unknown tmp[425530] "maybe param" "temp"
    unknown tmp[425551] "maybe param" "temp"
    (425562 'move' tmp[425551](132895 call isRectangularArr this[133810]))
    unknown call_tmp[660202] "expr temp" "maybe param" "maybe type" "temp"
    (660205 'move' call_tmp[660202](425564 call _cond_invalid tmp[425551]))
    if call_tmp[660202]
    {
      (425567 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566375] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566376] "maybe param" "temp"
    unknown call_tmp[660207] "expr temp" "maybe param" "maybe type" "temp"
    (660210 'move' call_tmp[660207](425552 call isTrue tmp[425551]))
    (566381 'move' tmp[566376](566379 call _cond_test call_tmp[660207]))
    if tmp[566376]
    {
      unknown tmp[566383] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660214] "expr temp" "maybe param" "maybe type" "temp"
      (660217 'move' call_tmp[660214](132897 call rank _mt[243] this[133810]))
      unknown call_tmp[660219] "expr temp" "maybe param" "maybe type" "temp"
      (660222 'move' call_tmp[660219](132901 call == call_tmp[660214] 1))
      (566385 'move' tmp[566383](425555 call isTrue call_tmp[660219]))
      (566390 'move' tmp[566375](566387 '_paramFoldLogical' tmp[566376] tmp[566383]))
    }
    {
      (566395 'move' tmp[566375](566392 '_paramFoldLogical' tmp[566376] 0))
    }
    (425541 'move' tmp[425530] tmp[566375])
    unknown call_tmp[660224] "expr temp" "maybe param" "maybe type" "temp"
    (660227 'move' call_tmp[660224](425543 call _cond_invalid tmp[425530]))
    if call_tmp[660224]
    {
      (425546 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566402] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566403] "maybe param" "temp"
    unknown call_tmp[660229] "expr temp" "maybe param" "maybe type" "temp"
    (660232 'move' call_tmp[660229](425531 call isTrue tmp[425530]))
    (566408 'move' tmp[566403](566406 call _cond_test call_tmp[660229]))
    if tmp[566403]
    {
      unknown tmp[566410] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660236] "expr temp" "maybe param" "maybe type" "temp"
      (660239 'move' call_tmp[660236](132906 call _value _mt[243] this[133810]))
      unknown call_tmp[660243] "expr temp" "maybe param" "maybe type" "temp"
      (660246 'move' call_tmp[660243](132909 call stridable _mt[243] call_tmp[660236]))
      unknown call_tmp[660248] "expr temp" "maybe param" "maybe type" "temp"
      (660251 'move' call_tmp[660248](132912 call ! call_tmp[660243]))
      (566412 'move' tmp[566410](425534 call isTrue call_tmp[660248]))
      (566417 'move' tmp[566402](566414 '_paramFoldLogical' tmp[566403] tmp[566410]))
    }
    {
      (566422 'move' tmp[566402](566419 '_paramFoldLogical' tmp[566403] 0))
    }
    (518169 'move' ret[518164](518168 'deref' tmp[566402]))
    (518166 return ret[518164])
  }
  function _array[133588](?).chpl__assertSingleArrayDomain[132927](arg _mt[133816]:_MT[238], arg this[133814]:_array[133588](?), arg fnName[132924]:string[26]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660255] "expr temp" "maybe param" "maybe type" "temp"
    (660258 'move' call_tmp[660255](132930 call _dom _mt[243] this[133814]))
    unknown call_tmp[660262] "expr temp" "maybe param" "maybe type" "temp"
    (660265 'move' call_tmp[660262](132933 call _value _mt[243] call_tmp[660255]))
    unknown call_tmp[660269] "expr temp" "maybe param" "maybe type" "temp"
    (660272 'move' call_tmp[660269](132936 call _arrs _mt[243] call_tmp[660262]))
    unknown call_tmp[660276] "expr temp" "maybe param" "maybe type" "temp"
    (660279 'move' call_tmp[660276](132939 call size _mt[243] call_tmp[660269]))
    unknown call_tmp[660281] "expr temp" "maybe param" "maybe type" "temp"
    (660284 'move' call_tmp[660281](132943 call != call_tmp[660276] 1))
    unknown call_tmp[660286] "expr temp" "maybe param" "maybe type" "temp"
    (660289 'move' call_tmp[660286](132988 call _cond_test call_tmp[660281]))
    if call_tmp[660286]
    {
      unknown call_tmp[660291] "expr temp" "maybe param" "maybe type" "temp"
      (660294 'move' call_tmp[660291](132964 call + "cannot call " fnName[132924]))
      unknown call_tmp[660296] "expr temp" "maybe param" "maybe type" "temp"
      (660299 'move' call_tmp[660296](132983 call + call_tmp[660291] " on an array defined over a domain with multiple arrays"))
      (132986 call halt call_tmp[660296])
    }
    (518171 return _void[55])
  }
  function _array[133588](?).isEmpty[132998](arg _mt[133820]:_MT[238], arg this[133818]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518175] "RVV" "temp"
    unknown call_tmp[660303] "expr temp" "maybe param" "maybe type" "temp"
    (660306 'move' call_tmp[660303](133002 call size _mt[243] this[133818]))
    unknown call_tmp[660308] "expr temp" "maybe param" "maybe type" "temp"
    (660311 'move' call_tmp[660308](133006 call == call_tmp[660303] 0))
    (518181 'move' ret[518175](518180 'coerce' call_tmp[660308] bool[10]))
    (518177 return ret[518175])
  }
  { scopeless type
    bool[10]
  }
  function _array[133588](?).head[133016](arg _mt[133824]:_MT[238], arg this[133822]:_array[133588](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518185] "RVV" "temp"
    unknown call_tmp[660315] "expr temp" "maybe param" "maybe type" "temp"
    (660318 'move' call_tmp[660315](133027 call _dom _mt[243] this[133822]))
    unknown call_tmp[660322] "expr temp" "maybe param" "maybe type" "temp"
    (660325 'move' call_tmp[660322](133030 call alignedLow _mt[243] call_tmp[660315]))
    unknown call_tmp[660327] "expr temp" "maybe param" "maybe type" "temp"
    (660330 'move' call_tmp[660327](133034 call this[133822] call_tmp[660322]))
    unknown call_tmp[660334] "expr temp" "maybe param" "maybe type" "temp"
    (660337 'move' call_tmp[660334](518192 call _value _mt[243] this[133822]))
    unknown call_tmp[660341] "expr temp" "maybe param" "maybe type" "temp"
    (660344 'move' call_tmp[660341](518190 call eltType _mt[243] call_tmp[660334]))
    (518197 'move' ret[518185](518196 'coerce' call_tmp[660327] call_tmp[660341]))
    (518187 return ret[518185])
  }
  { scopeless type
    unknown call_tmp[660348] "expr temp" "maybe param" "maybe type" "temp"
    (660351 'move' call_tmp[660348](133019 call _value _mt[243] this[133822]))
    (133022 call eltType _mt[243] call_tmp[660348])
  }
  function _array[133588](?).tail[133043](arg _mt[133828]:_MT[238], arg this[133826]:_array[133588](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518201] "RVV" "temp"
    unknown call_tmp[660357] "expr temp" "maybe param" "maybe type" "temp"
    (660360 'move' call_tmp[660357](133054 call _dom _mt[243] this[133826]))
    unknown call_tmp[660364] "expr temp" "maybe param" "maybe type" "temp"
    (660367 'move' call_tmp[660364](133057 call alignedHigh _mt[243] call_tmp[660357]))
    unknown call_tmp[660369] "expr temp" "maybe param" "maybe type" "temp"
    (660372 'move' call_tmp[660369](133061 call this[133826] call_tmp[660364]))
    unknown call_tmp[660376] "expr temp" "maybe param" "maybe type" "temp"
    (660379 'move' call_tmp[660376](518208 call _value _mt[243] this[133826]))
    unknown call_tmp[660383] "expr temp" "maybe param" "maybe type" "temp"
    (660386 'move' call_tmp[660383](518206 call eltType _mt[243] call_tmp[660376]))
    (518213 'move' ret[518201](518212 'coerce' call_tmp[660369] call_tmp[660383]))
    (518203 return ret[518201])
  }
  { scopeless type
    unknown call_tmp[660390] "expr temp" "maybe param" "maybe type" "temp"
    (660393 'move' call_tmp[660390](133046 call _value _mt[243] this[133826]))
    (133049 call eltType _mt[243] call_tmp[660390])
  }
  function _array[133588](?).back[133070](arg _mt[133832]:_MT[238], arg this[133830]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518217] "RVV" "temp"
    unknown tmp[425572] "maybe param" "temp"
    unknown call_tmp[660397] "expr temp" "maybe param" "maybe type" "temp"
    (660400 'move' call_tmp[660397](133075 call isRectangularArr this[133830]))
    (425583 'move' tmp[425572](133076 call ! call_tmp[660397]))
    unknown call_tmp[660402] "expr temp" "maybe param" "maybe type" "temp"
    (660405 'move' call_tmp[660402](425585 call _cond_invalid tmp[425572]))
    if call_tmp[660402]
    {
      (425588 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566429] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566430] "maybe param" "temp"
    unknown call_tmp[660407] "expr temp" "maybe param" "maybe type" "temp"
    (660410 'move' call_tmp[660407](425573 call isTrue tmp[425572]))
    (566435 'move' tmp[566430](566433 call _cond_test call_tmp[660407]))
    if tmp[566430]
    {
      (566440 'move' tmp[566429](566437 '_paramFoldLogical' tmp[566430] 1))
    }
    {
      unknown tmp[566442] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660414] "expr temp" "maybe param" "maybe type" "temp"
      (660417 'move' call_tmp[660414](133079 call rank _mt[243] this[133830]))
      unknown call_tmp[660419] "expr temp" "maybe param" "maybe type" "temp"
      (660422 'move' call_tmp[660419](133083 call != call_tmp[660414] 1))
      (566444 'move' tmp[566442](425577 call isTrue call_tmp[660419]))
      (566449 'move' tmp[566429](566446 '_paramFoldLogical' tmp[566430] tmp[566442]))
    }
    unknown call_tmp[660424] "expr temp" "maybe param" "maybe type" "temp"
    (660427 'move' call_tmp[660424](133108 call _cond_test tmp[566429]))
    if call_tmp[660424]
    {
      (133106 call compilerError "back() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425593] "maybe param" "temp"
    (425604 'move' tmp[425593] 1)
    unknown call_tmp[660429] "expr temp" "maybe param" "maybe type" "temp"
    (660432 'move' call_tmp[660429](425606 call _cond_invalid tmp[425593]))
    if call_tmp[660429]
    {
      (425609 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566456] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566457] "maybe param" "temp"
    unknown call_tmp[660434] "expr temp" "maybe param" "maybe type" "temp"
    (660437 'move' call_tmp[660434](425594 call isTrue tmp[425593]))
    (566462 'move' tmp[566457](566460 call _cond_test call_tmp[660434]))
    if tmp[566457]
    {
      unknown tmp[566464] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660441] "expr temp" "maybe param" "maybe type" "temp"
      (660444 'move' call_tmp[660441](133117 call(384241 call (partial) isEmpty _mt[243] this[133830])))
      (566466 'move' tmp[566464](425597 call isTrue call_tmp[660441]))
      (566471 'move' tmp[566456](566468 '_paramFoldLogical' tmp[566457] tmp[566464]))
    }
    {
      (566476 'move' tmp[566456](566473 '_paramFoldLogical' tmp[566457] 0))
    }
    unknown call_tmp[660446] "expr temp" "maybe param" "maybe type" "temp"
    (660449 'move' call_tmp[660446](133141 call _cond_test tmp[566456]))
    if call_tmp[660446]
    {
      (133139 call halt "back called on an empty array")
    }
    unknown call_tmp[660453] "expr temp" "maybe param" "maybe type" "temp"
    (660456 'move' call_tmp[660453](133148 call _dom _mt[243] this[133830]))
    unknown call_tmp[660460] "expr temp" "maybe param" "maybe type" "temp"
    (660463 'move' call_tmp[660460](133151 call high _mt[243] call_tmp[660453]))
    unknown call_tmp[660465] "expr temp" "maybe param" "maybe type" "temp"
    (660468 'move' call_tmp[660465](133155 call this[133830] call_tmp[660460]))
    (518222 'move' ret[518217](518221 'deref' call_tmp[660465]))
    (518219 return ret[518217])
  }
  function _array[133588](?).front[133162](arg _mt[133836]:_MT[238], arg this[133834]:_array[133588](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518226] "RVV" "temp"
    unknown tmp[425614] "maybe param" "temp"
    unknown call_tmp[660470] "expr temp" "maybe param" "maybe type" "temp"
    (660473 'move' call_tmp[660470](133167 call isRectangularArr this[133834]))
    (425625 'move' tmp[425614](133168 call ! call_tmp[660470]))
    unknown call_tmp[660475] "expr temp" "maybe param" "maybe type" "temp"
    (660478 'move' call_tmp[660475](425627 call _cond_invalid tmp[425614]))
    if call_tmp[660475]
    {
      (425630 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566483] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566484] "maybe param" "temp"
    unknown call_tmp[660480] "expr temp" "maybe param" "maybe type" "temp"
    (660483 'move' call_tmp[660480](425615 call isTrue tmp[425614]))
    (566489 'move' tmp[566484](566487 call _cond_test call_tmp[660480]))
    if tmp[566484]
    {
      (566494 'move' tmp[566483](566491 '_paramFoldLogical' tmp[566484] 1))
    }
    {
      unknown tmp[566496] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660487] "expr temp" "maybe param" "maybe type" "temp"
      (660490 'move' call_tmp[660487](133171 call rank _mt[243] this[133834]))
      unknown call_tmp[660492] "expr temp" "maybe param" "maybe type" "temp"
      (660495 'move' call_tmp[660492](133175 call != call_tmp[660487] 1))
      (566498 'move' tmp[566496](425619 call isTrue call_tmp[660492]))
      (566503 'move' tmp[566483](566500 '_paramFoldLogical' tmp[566484] tmp[566496]))
    }
    unknown call_tmp[660497] "expr temp" "maybe param" "maybe type" "temp"
    (660500 'move' call_tmp[660497](133200 call _cond_test tmp[566483]))
    if call_tmp[660497]
    {
      (133198 call compilerError "front() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425635] "maybe param" "temp"
    (425646 'move' tmp[425635] 1)
    unknown call_tmp[660502] "expr temp" "maybe param" "maybe type" "temp"
    (660505 'move' call_tmp[660502](425648 call _cond_invalid tmp[425635]))
    if call_tmp[660502]
    {
      (425651 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566510] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566511] "maybe param" "temp"
    unknown call_tmp[660507] "expr temp" "maybe param" "maybe type" "temp"
    (660510 'move' call_tmp[660507](425636 call isTrue tmp[425635]))
    (566516 'move' tmp[566511](566514 call _cond_test call_tmp[660507]))
    if tmp[566511]
    {
      unknown tmp[566518] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660514] "expr temp" "maybe param" "maybe type" "temp"
      (660517 'move' call_tmp[660514](133209 call(384248 call (partial) isEmpty _mt[243] this[133834])))
      (566520 'move' tmp[566518](425639 call isTrue call_tmp[660514]))
      (566525 'move' tmp[566510](566522 '_paramFoldLogical' tmp[566511] tmp[566518]))
    }
    {
      (566530 'move' tmp[566510](566527 '_paramFoldLogical' tmp[566511] 0))
    }
    unknown call_tmp[660519] "expr temp" "maybe param" "maybe type" "temp"
    (660522 'move' call_tmp[660519](133233 call _cond_test tmp[566510]))
    if call_tmp[660519]
    {
      (133231 call halt "front called on an empty array")
    }
    unknown call_tmp[660526] "expr temp" "maybe param" "maybe type" "temp"
    (660529 'move' call_tmp[660526](133240 call _dom _mt[243] this[133834]))
    unknown call_tmp[660533] "expr temp" "maybe param" "maybe type" "temp"
    (660536 'move' call_tmp[660533](133243 call low _mt[243] call_tmp[660526]))
    unknown call_tmp[660538] "expr temp" "maybe param" "maybe type" "temp"
    (660541 'move' call_tmp[660538](133247 call this[133834] call_tmp[660533]))
    (518231 'move' ret[518226](518230 'deref' call_tmp[660538]))
    (518228 return ret[518226])
  }
  function _array[133588](?).reverse[133254](arg _mt[133840]:_MT[238], arg this[133838]:_array[133588](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660545] "expr temp" "maybe param" "maybe type" "temp"
    (660548 'move' call_tmp[660545](133258 call(384255 call (partial) chpl__isDense1DArray _mt[243] this[133838])))
    unknown call_tmp[660550] "expr temp" "maybe param" "maybe type" "temp"
    (660553 'move' call_tmp[660550](133259 call ! call_tmp[660545]))
    unknown call_tmp[660555] "expr temp" "maybe param" "maybe type" "temp"
    (660558 'move' call_tmp[660555](133282 call _cond_test call_tmp[660550]))
    if call_tmp[660555]
    {
      (133280 call compilerError "reverse() is only supported on dense 1D arrays")
    }
    unknown call_tmp[660562] "expr temp" "maybe param" "maybe type" "temp"
    (660565 'move' call_tmp[660562](133289 call _dom _mt[243] this[133838]))
    unknown call_tmp[660569] "maybe param" "maybe type" "temp"
    (660572 'move' call_tmp[660569](133292 call low _mt[243] call_tmp[660562]))
    const lo[133295] "dead at end of block" "const" "insert auto destroy"
    (542938 'init var' lo[133295] call_tmp[660569])
    unknown call_tmp[660576] "expr temp" "maybe param" "maybe type" "temp"
    (660579 'move' call_tmp[660576](133299 call _dom _mt[243] this[133838]))
    unknown call_tmp[660583] "expr temp" "maybe param" "maybe type" "temp"
    (660586 'move' call_tmp[660583](133302 call size _mt[243] call_tmp[660576]))
    unknown call_tmp[660588] "maybe param" "maybe type" "temp"
    (660591 'move' call_tmp[660588](133306 call / call_tmp[660583] 2))
    const mid[133308] "dead at end of block" "const" "insert auto destroy"
    (542940 'init var' mid[133308] call_tmp[660588])
    unknown call_tmp[660595] "expr temp" "maybe param" "maybe type" "temp"
    (660598 'move' call_tmp[660595](133312 call _dom _mt[243] this[133838]))
    unknown call_tmp[660602] "maybe param" "maybe type" "temp"
    (660605 'move' call_tmp[660602](133315 call high _mt[243] call_tmp[660595]))
    const hi[133318] "dead at end of block" "const" "insert auto destroy"
    (542942 'init var' hi[133318] call_tmp[660602])
    (133321 'end of statement')
    {
      unknown _indexOfInterest[133347] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133348] "expr temp" "temp"
      unknown call_tmp[660607] "expr temp" "maybe param" "maybe type" "temp"
      (660610 'move' call_tmp[660607](133364 call chpl_direct_counted_range_iter 0 mid[133308]))
      (133357 'move' _iterator[133348](133355 call _getIterator call_tmp[660607]))
      Defer
      {
        {
          (133380 call _freeIterator _iterator[133348])
        }
      }
      { scopeless type
        (133369 'move' _indexOfInterest[133347](133366 call iteratorIndex _iterator[133348]))
      }
      ForLoop[133349]
      {
        unknown i[133373] "index var" "insert auto destroy"
        (480242 'end of statement')
        (133375 'move' i[133373] _indexOfInterest[133347])
        (480243 'end of statement' i[133373])
        {
          unknown call_tmp[660612] "expr temp" "maybe param" "maybe type" "temp"
          (660615 'move' call_tmp[660612](133332 call + lo[133295] i[133373]))
          unknown call_tmp[660617] "expr temp" "maybe param" "maybe type" "temp"
          (660620 'move' call_tmp[660617](133335 call this[133838] call_tmp[660612]))
          unknown call_tmp[660622] "expr temp" "maybe param" "maybe type" "temp"
          (660625 'move' call_tmp[660622](133339 call - hi[133318] i[133373]))
          unknown call_tmp[660627] "expr temp" "maybe param" "maybe type" "temp"
          (660630 'move' call_tmp[660627](133342 call this[133838] call_tmp[660622]))
          (133343 call <=> call_tmp[660617] call_tmp[660627])
          (480245 'end of statement' lo[133295] i[133373] hi[133318] i[133373])
        }
        label _continueLabel[133352]
        _indexOfInterest[133347]
        _iterator[133348]
      }
      label _breakLabel[133353]
    }
    (518233 return _void[55])
  }
  function _array[133588](?).find[133398](arg _mt[133844]:_MT[238], arg this[133842]:_array[133588](?), arg val[133395] :
  (133392 call eltType _mt[243] this[133842])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518237] "RVV" "temp"
    {
      unknown _indexOfInterest[133436] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133437] "expr temp" "temp"
      unknown call_tmp[660636] "expr temp" "maybe param" "maybe type" "temp"
      (660639 'move' call_tmp[660636](133413 call _dom _mt[243] this[133842]))
      (133446 'move' _iterator[133437](133444 call _getIterator call_tmp[660636]))
      Defer
      {
        {
          (133463 call _freeIterator _iterator[133437])
        }
      }
      { scopeless type
        (133452 'move' _indexOfInterest[133436](133449 call iteratorIndex _iterator[133437]))
      }
      ForLoop[133438]
      {
        unknown i[133456] "index var" "insert auto destroy"
        (480251 'end of statement')
        (133458 'move' i[133456] _indexOfInterest[133436])
        (480252 'end of statement' i[133456])
        {
          unknown call_tmp[660641] "expr temp" "maybe param" "maybe type" "temp"
          (660644 'move' call_tmp[660641](133419 call this[133842] i[133456]))
          unknown call_tmp[660646] "expr temp" "maybe param" "maybe type" "temp"
          (660649 'move' call_tmp[660646](133421 call == call_tmp[660641] val[133395]))
          unknown call_tmp[660651] "expr temp" "maybe param" "maybe type" "temp"
          (660654 'move' call_tmp[660651](133430 call _cond_test call_tmp[660646]))
          if call_tmp[660651]
          {
            unknown call_tmp[660656] "expr temp" "maybe param" "maybe type" "temp"
            (660659 'move' call_tmp[660656](133426 call _build_tuple 1 i[133456]))
            unknown call_tmp[660663] "expr temp" "maybe param" "maybe type" "temp"
            (660666 'move' call_tmp[660663](518247 call _dom _mt[243] this[133842]))
            unknown call_tmp[660668] "expr temp" "maybe param" "maybe type" "temp"
            (660671 'move' call_tmp[660668](518245 call chpl__buildIndexType call_tmp[660663]))
            unknown call_tmp[660673] "expr temp" "maybe param" "maybe type" "temp"
            (660676 'move' call_tmp[660673](518242 call _build_tuple bool[10] call_tmp[660668]))
            (518251 'move' ret[518237](518250 'coerce' call_tmp[660656] call_tmp[660673]))
            gotoReturn _end_find[518235] _end_find[518235]
            (480254 'end of statement' i[133456])
          }
        }
        label _continueLabel[133441]
        _indexOfInterest[133436]
        _iterator[133437]
      }
      label _breakLabel[133442]
    }
    unknown arbInd[133478] "dead at end of block" "insert auto destroy"
    unknown call_tmp[660680] "expr temp" "maybe param" "maybe type" "temp"
    (660683 'move' call_tmp[660680](133472 call _dom _mt[243] this[133842]))
    unknown call_tmp[660685] "expr temp" "maybe param" "maybe type" "temp"
    (660688 'move' call_tmp[660685](133476 call chpl__buildIndexType call_tmp[660680]))
    (542944 'default init var' arbInd[133478] call_tmp[660685])
    (133481 'end of statement')
    unknown call_tmp[660690] "expr temp" "maybe param" "maybe type" "temp"
    (660693 'move' call_tmp[660690](133485 call _build_tuple 0 arbInd[133478]))
    unknown call_tmp[660697] "expr temp" "maybe param" "maybe type" "temp"
    (660700 'move' call_tmp[660697](518261 call _dom _mt[243] this[133842]))
    unknown call_tmp[660702] "expr temp" "maybe param" "maybe type" "temp"
    (660705 'move' call_tmp[660702](518259 call chpl__buildIndexType call_tmp[660697]))
    unknown call_tmp[660707] "expr temp" "maybe param" "maybe type" "temp"
    (660710 'move' call_tmp[660707](518256 call _build_tuple bool[10] call_tmp[660702]))
    (518265 'move' ret[518237](518264 'coerce' call_tmp[660690] call_tmp[660707]))
    gotoReturn _end_find[518235] _end_find[518235]
    (480256 'end of statement' arbInd[133478])
    label _end_find[518235]
    (518239 return ret[518237])
  }
  { scopeless type
    unknown call_tmp[660714] "expr temp" "maybe param" "maybe type" "temp"
    (660717 'move' call_tmp[660714](133402 call _dom _mt[243] this[133842]))
    unknown call_tmp[660719] "expr temp" "maybe param" "maybe type" "temp"
    (660722 'move' call_tmp[660719](133406 call chpl__buildIndexType call_tmp[660714]))
    (133409 call _build_tuple bool[10] call_tmp[660719])
  }
  function _array[133588](?).count[133501](arg _mt[133848]:_MT[238], arg this[133846]:_array[133588](?), arg val[133498] :
  (133495 call eltType _mt[243] this[133846])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518271] "RVV" "temp"
    unknown call_tmp[660726] "expr temp" "maybe param" "maybe type" "temp"
    (660729 'move' call_tmp[660726](133507 call == this[133846] val[133498]))
    unknown call_tmp[660731] "expr temp" "maybe param" "maybe type" "temp"
    (660734 'move' call_tmp[660731](133509 'reduce' SumReduceScanOp[376284](?) call_tmp[660726] 0))
    (518277 'move' ret[518271](518276 'coerce' call_tmp[660731] int(64)[13]))
    (518273 return ret[518271])
  }
  { scopeless type
    int(64)[13]
  }
  function _array[133588](?).shape[133519](arg _mt[133852]:_MT[238], arg this[133850]:_array[133588](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518281] "RVV" "temp"
    unknown call_tmp[660738] "expr temp" "maybe param" "maybe type" "temp"
    (660741 'move' call_tmp[660738](133522 call _dom _mt[243] this[133850]))
    unknown call_tmp[660745] "expr temp" "maybe param" "maybe type" "temp"
    (660748 'move' call_tmp[660745](133527 call shape _mt[243] call_tmp[660738]))
    (518286 'move' ret[518281](518285 'deref' call_tmp[660745]))
    (518283 return ret[518281])
  }
  function _array[133588](?)._scan[133539](arg _mt[133856]:_MT[238], arg this[133854]:_array[133588](?), arg op[133537]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518290] "RVV" "temp"
    unknown call_tmp[660752] "expr temp" "maybe param" "maybe type" "temp"
    (660755 'move' call_tmp[660752](359964 call _value _mt[243] this[133854]))
    unknown call_tmp[660761] "expr temp" "maybe param" "maybe type" "temp"
    (660764 'move' call_tmp[660761](133577 call _dom _mt[243] this[133854]))
    unknown call_tmp[660766] "expr temp" "maybe param" "maybe type" "temp"
    (660769 'move' call_tmp[660766](133580 call(133571 call (partial) doiScan _mt[243] call_tmp[660752]) op[133537] call_tmp[660761]))
    (518295 'move' ret[518290](518294 'deref' call_tmp[660766]))
    (518292 return ret[518290])
  }
  where {
    unknown call_tmp[660773] "expr temp" "maybe param" "maybe type" "temp"
    (660776 'move' call_tmp[660773](384274 call _value _mt[243] this[133854]))
    unknown call_tmp[660780] "expr temp" "maybe param" "maybe type" "temp"
    (660783 'move' call_tmp[660780](133566 call _dom _mt[243] this[133854]))
    (133569 call canResolveMethod module=[255] Reflection[224794] call_tmp[660773] "doiScan" op[133537] call_tmp[660780])
    (359957 'referenced modules list' Reflection[224794])
  }
  function _array[133588](?)._pid[799845](arg _mt[799847]:_MT[238], ref arg this[799849]:_array[133588](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799859] "RVV" "temp"
    unknown call_tmp[799866] "expr temp" "maybe param" "maybe type" "temp"
    (799869 'move' call_tmp[799866](799853 '.' this[799849] c"_pid"))
    (799864 'move' ret[799859](799863 'addr of' call_tmp[799866]))
    (799861 return ret[799859])
  }
  function _array[133588](?)._instance[799871](arg _mt[799873]:_MT[238], ref arg this[799875]:_array[133588](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799885] "RVV" "temp"
    unknown call_tmp[799892] "expr temp" "maybe param" "maybe type" "temp"
    (799895 'move' call_tmp[799892](799879 '.' this[799875] c"_instance"))
    (799890 'move' ret[799885](799889 'addr of' call_tmp[799892]))
    (799887 return ret[799885])
  }
  function _array[133588](?)._unowned[799897](arg _mt[799899]:_MT[238], ref arg this[799901]:_array[133588](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799911] "RVV" "temp"
    unknown call_tmp[799918] "expr temp" "maybe param" "maybe type" "temp"
    (799921 'move' call_tmp[799918](799905 '.' this[799901] c"_unowned"))
    (799916 'move' ret[799911](799915 'addr of' call_tmp[799918]))
    (799913 return ret[799911])
  }
  function _array[133588](?).init[799923](arg _mt[799925]:_MT[238], ref arg this[799926]:_array[133588](?), in arg _pid[799929]:int(64)[13] =
  _typeDefaultT[250], in arg _instance[799942]:_any[178](?), in arg _unowned[799951]:bool[10] =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (799965 'init field' this[799926] c"_pid" _pid[799929])
    (799968 'init field' this[799926] c"_instance" _instance[799942])
    (799974 'end of statement')
    (799971 'init field' this[799926] c"_unowned" _unowned[799951])
    (799976 return _void[55])
  }
  function _array[133588](?).init=[799978](arg _mt[799981]:_MT[238], ref arg this[799982]:_array[133588](?), arg other[799985] :
  (799984 'typeof' this[799982])) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[800053] "maybe param" "maybe type" "temp"
    (800056 'move' call_tmp[800053](799994 call _pid _mt[243] other[799985]))
    unknown tmp[800020] "temp"
    (800023 'init var' tmp[800020] call_tmp[800053] int(64)[13])
    (800025 'init field' this[799982] c"_pid" tmp[800020])
    (800046 'end of statement')
    unknown call_tmp[800060] "maybe param" "maybe type" "temp"
    (800063 'move' call_tmp[800060](800004 call _instance _mt[243] other[799985]))
    unknown tmp[800029] "temp"
    (800031 'init var' tmp[800029] call_tmp[800060])
    (800033 'init field' this[799982] c"_instance" tmp[800029])
    (800047 'end of statement')
    unknown call_tmp[800067] "maybe param" "maybe type" "temp"
    (800070 'move' call_tmp[800067](800014 call _unowned _mt[243] other[799985]))
    unknown tmp[800037] "temp"
    (800040 'init var' tmp[800037] call_tmp[800067] bool[10])
    (800042 'init field' this[799982] c"_unowned" tmp[800037])
    (800048 'end of statement')
    (800049 return _void[55])
  }
  type _array[133588](?) val _pid[128415]:int(64)[13] int(64)[13] unknown _instance[128419] "alias scope from this" "owned" val _unowned[128424]:bool[10] bool[10] forwarding ( )
  function _do_destroy_arr[133865](arg _unowned[133862]:bool[10], arg _instance[133867]:_any[178](?), arg deinitElts[133870] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[660785] "expr temp" "maybe param" "maybe type" "temp"
    (660788 'move' call_tmp[660785](133874 call ! _unowned[133862]))
    unknown call_tmp[660790] "expr temp" "maybe param" "maybe type" "temp"
    (660793 'move' call_tmp[660790](134113 call _cond_test call_tmp[660785]))
    if call_tmp[660790]
    {
      const tmp[134089] "const" "temp"
      unknown call_tmp[660795] "expr temp" "maybe param" "maybe type" "temp"
      (660798 'move' call_tmp[660795](134086 '_wide_get_locale' _instance[133867]))
      (134091 'move' tmp[134089](134087 'deref' call_tmp[660795]))
      (935058 call on_fn[935054] tmp[134089])
      function on_fn[935054](const in arg dummy_locale_arg[935056]:chpl_localeID_t[209294]) : void[4] "on"
      {
        {
          unknown call_tmp[660802] "expr temp" "maybe param" "maybe type" "temp"
          (660805 'move' call_tmp[660802](133882 call(133878 call (partial) isSliceArrayView _mt[243] _instance[133867])))
          unknown call_tmp[660807] "maybe param" "maybe type" "temp"
          (660810 'move' call_tmp[660807](133883 call ! call_tmp[660802]))
          unknown arrIsInList[133885] "dead at end of block" "param"
          (542946 'init var' arrIsInList[133885] call_tmp[660807])
          (133888 'end of statement')
          unknown call_tmp[660814] "maybe param" "maybe type" "temp"
          (660817 'move' call_tmp[660814](133901 call(133896 call (partial) remove _mt[243] _instance[133867]) arrIsInList[133885]))
          unknown tmp[133902] "dead at end of block" "insert auto destroy" "temp"
          (542948 'init var' tmp[133902] call_tmp[660814])
          (133909 call _check_tuple_var_decl tmp[133902] 2)
          (480261 'end of statement')
          unknown call_tmp[660819] "maybe param" "maybe type" "temp"
          (660822 'move' call_tmp[660819](133903 call tmp[133902] 0))
          unknown arrToFree[133890] "dead at end of block" "insert auto destroy"
          (542950 'init var' arrToFree[133890] call_tmp[660819])
          unknown call_tmp[660824] "maybe param" "maybe type" "temp"
          (660827 'move' call_tmp[660824](133906 call tmp[133902] 1))
          unknown domToRemove[133892] "dead at end of block" "insert auto destroy"
          (542952 'init var' domToRemove[133892] call_tmp[660824])
          (133914 'end of statement')
          unknown domToFree[133919] "dead at end of block" "insert auto destroy"
          (542954 'init var' domToFree[133919] nil[44] unmanaged BaseDom?[415376])
          (133922 'end of statement')
          unknown distToRemove[133927] "dead at end of block" "insert auto destroy"
          (542956 'init var' distToRemove[133927] nil[44] unmanaged BaseDist?[415370])
          (133930 'end of statement')
          unknown distToFree[133935] "dead at end of block" "insert auto destroy"
          (542958 'init var' distToFree[133935] nil[44] unmanaged BaseDist?[415370])
          (133938 'end of statement')
          unknown domIsPrivatized[133940] "dead at end of block" "insert auto destroy"
          (542960 'init var' domIsPrivatized[133940] 0)
          (133943 'end of statement')
          const instanceDom[133945] "dead at end of block" "const" "insert auto destroy"
          (542962 'init var' instanceDom[133945] domToRemove[133892])
          (133948 'end of statement')
          unknown call_tmp[660829] "expr temp" "maybe param" "maybe type" "temp"
          (660832 'move' call_tmp[660829](133951 call != domToRemove[133892] nil[44]))
          unknown call_tmp[660834] "expr temp" "maybe param" "maybe type" "temp"
          (660837 'move' call_tmp[660834](133986 call _cond_test call_tmp[660829]))
          if call_tmp[660834]
          {
            unknown tmp[492126] "expr temp" "maybe param" "maybe type" "temp"
            unknown tmp[492151] "maybe param" "temp"
            (492154 'move' tmp[492151](492152 'addr of' domToFree[133919]))
            unknown tmp[492162] "maybe param" "temp"
            (492165 'move' tmp[492162](492163 'addr of' distToRemove[133927]))
            unknown call_tmp[660839] "expr temp" "maybe param" "maybe type" "temp"
            (660842 'move' call_tmp[660839](133959 call postfix! domToRemove[133892]))
            (492127 'move' tmp[492126](133965 call(133961 call (partial) remove _mt[243] call_tmp[660839])))
            { scopeless
              unknown call_tmp[660848] "expr temp" "maybe param" "maybe type" "temp"
              (660851 'move' call_tmp[660848](492133 call size _mt[243] tmp[492126]))
              unknown call_tmp[660853] "expr temp" "maybe param" "maybe type" "temp"
              (660856 'move' call_tmp[660853](492136 call != 2 call_tmp[660848]))
              unknown call_tmp[660858] "expr temp" "maybe param" "maybe type" "temp"
              (660861 'move' call_tmp[660858](492143 call _cond_test call_tmp[660853]))
              if call_tmp[660858]
              {
                (492139 call compilerError "tuple size must match the number of grouped variables" 0)
              }
            }
            unknown call_tmp[660863] "expr temp" "maybe param" "maybe type" "temp"
            (660866 'move' call_tmp[660863](492149 call tmp[492126] 0))
            (492156 call = tmp[492151] call_tmp[660863])
            unknown call_tmp[660868] "expr temp" "maybe param" "maybe type" "temp"
            (660871 'move' call_tmp[660868](492160 call tmp[492126] 1))
            (492167 call = tmp[492162] call_tmp[660868])
            (480263 'end of statement' domToFree[133919] distToRemove[133927] domToRemove[133892])
            unknown tmp[425656] "maybe param" "temp"
            (425667 'move' tmp[425656] 1)
            unknown call_tmp[660873] "expr temp" "maybe param" "maybe type" "temp"
            (660876 'move' call_tmp[660873](425669 call _cond_invalid tmp[425656]))
            if call_tmp[660873]
            {
              (425672 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566537] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566538] "maybe param" "temp"
            unknown call_tmp[660878] "expr temp" "maybe param" "maybe type" "temp"
            (660881 'move' call_tmp[660878](425657 call isTrue tmp[425656]))
            (566543 'move' tmp[566538](566541 call _cond_test call_tmp[660878]))
            if tmp[566538]
            {
              unknown tmp[566545] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[660883] "expr temp" "maybe param" "maybe type" "temp"
              (660886 'move' call_tmp[660883](133973 call postfix! domToRemove[133892]))
              unknown call_tmp[660890] "expr temp" "maybe param" "maybe type" "temp"
              (660893 'move' call_tmp[660890](133975 call pid _mt[243] call_tmp[660883]))
              unknown call_tmp[660895] "expr temp" "maybe param" "maybe type" "temp"
              (660898 'move' call_tmp[660895](133979 call != call_tmp[660890] nullPid[113712]))
              (566547 'move' tmp[566545](425660 call isTrue call_tmp[660895]))
              (566552 'move' tmp[566537](566549 '_paramFoldLogical' tmp[566538] tmp[566545]))
            }
            {
              (566557 'move' tmp[566537](566554 '_paramFoldLogical' tmp[566538] 0))
            }
            (133983 call = domIsPrivatized[133940] tmp[566537])
            (480268 'end of statement' domIsPrivatized[133940] domToRemove[133892])
          }
          unknown distIsPrivatized[133991] "dead at end of block" "insert auto destroy"
          (542964 'init var' distIsPrivatized[133991] 0)
          (133994 'end of statement' domToRemove[133892])
          unknown call_tmp[660900] "expr temp" "maybe param" "maybe type" "temp"
          (660903 'move' call_tmp[660900](133997 call != distToRemove[133927] nil[44]))
          unknown call_tmp[660905] "expr temp" "maybe param" "maybe type" "temp"
          (660908 'move' call_tmp[660905](134028 call _cond_test call_tmp[660900]))
          if call_tmp[660905]
          {
            unknown call_tmp[660910] "expr temp" "maybe param" "maybe type" "temp"
            (660913 'move' call_tmp[660910](134001 call postfix! distToRemove[133927]))
            unknown call_tmp[660917] "expr temp" "maybe param" "maybe type" "temp"
            (660920 'move' call_tmp[660917](134007 call(134003 call (partial) remove _mt[243] call_tmp[660910])))
            (134008 call = distToFree[133935] call_tmp[660917])
            (480271 'end of statement' distToFree[133935] distToRemove[133927])
            unknown tmp[425677] "maybe param" "temp"
            (425688 'move' tmp[425677] 1)
            unknown call_tmp[660922] "expr temp" "maybe param" "maybe type" "temp"
            (660925 'move' call_tmp[660922](425690 call _cond_invalid tmp[425677]))
            if call_tmp[660922]
            {
              (425693 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566564] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566565] "maybe param" "temp"
            unknown call_tmp[660927] "expr temp" "maybe param" "maybe type" "temp"
            (660930 'move' call_tmp[660927](425678 call isTrue tmp[425677]))
            (566570 'move' tmp[566565](566568 call _cond_test call_tmp[660927]))
            if tmp[566565]
            {
              unknown tmp[566572] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[660932] "expr temp" "maybe param" "maybe type" "temp"
              (660935 'move' call_tmp[660932](134015 call postfix! distToRemove[133927]))
              unknown call_tmp[660939] "expr temp" "maybe param" "maybe type" "temp"
              (660942 'move' call_tmp[660939](134017 call pid _mt[243] call_tmp[660932]))
              unknown call_tmp[660944] "expr temp" "maybe param" "maybe type" "temp"
              (660947 'move' call_tmp[660944](134021 call != call_tmp[660939] nullPid[113712]))
              (566574 'move' tmp[566572](425681 call isTrue call_tmp[660944]))
              (566579 'move' tmp[566564](566576 '_paramFoldLogical' tmp[566565] tmp[566572]))
            }
            {
              (566584 'move' tmp[566564](566581 '_paramFoldLogical' tmp[566565] 0))
            }
            (134025 call = distIsPrivatized[133991] tmp[566564])
            (480275 'end of statement' distIsPrivatized[133991] distToRemove[133927])
          }
          unknown call_tmp[660949] "expr temp" "maybe param" "maybe type" "temp"
          (660952 'move' call_tmp[660949](134034 call != arrToFree[133890] nil[44]))
          unknown call_tmp[660954] "expr temp" "maybe param" "maybe type" "temp"
          (660957 'move' call_tmp[660954](134047 call _cond_test call_tmp[660949]))
          if call_tmp[660954]
          {
            unknown call_tmp[660959] "expr temp" "maybe param" "maybe type" "temp"
            (660962 'move' call_tmp[660959](134042 call _isPrivatized _instance[133867]))
            (134045 call _delete_arr _instance[133867] call_tmp[660959](deinitElts = deinitElts[133870]))
          }
          unknown call_tmp[660964] "expr temp" "maybe param" "maybe type" "temp"
          (660967 'move' call_tmp[660964](134054 call != domToFree[133919] nil[44]))
          unknown call_tmp[660969] "expr temp" "maybe param" "maybe type" "temp"
          (660972 'move' call_tmp[660969](134064 call _cond_test call_tmp[660964]))
          if call_tmp[660969]
          {
            unknown call_tmp[660974] "expr temp" "maybe param" "maybe type" "temp"
            (660977 'move' call_tmp[660974](134058 call postfix! instanceDom[133945]))
            (134062 call _delete_dom call_tmp[660974] domIsPrivatized[133940])
            (480279 'end of statement' instanceDom[133945] domIsPrivatized[133940])
          }
          unknown call_tmp[660979] "expr temp" "maybe param" "maybe type" "temp"
          (660982 'move' call_tmp[660979](134071 call != distToFree[133935] nil[44]))
          unknown call_tmp[660984] "expr temp" "maybe param" "maybe type" "temp"
          (660987 'move' call_tmp[660984](134081 call _cond_test call_tmp[660979]))
          if call_tmp[660984]
          {
            unknown call_tmp[660989] "expr temp" "maybe param" "maybe type" "temp"
            (660992 'move' call_tmp[660989](134075 call postfix! distToFree[133935]))
            (134079 call _delete_dist call_tmp[660989] distIsPrivatized[133991])
            (480282 'end of statement' distToFree[133935] distIsPrivatized[133991])
          }
        }
        (935061 return _void[55])
      }
      {
      }
    }
    {
      unknown call_tmp[660994] "expr temp" "maybe param" "maybe type" "temp"
      (660997 'move' call_tmp[660994](134101 call chpl__isArrayView _instance[133867]))
      unknown call_tmp[660999] "expr temp" "maybe param" "maybe type" "temp"
      (661002 'move' call_tmp[660999](134108 call _cond_test call_tmp[660994]))
      if call_tmp[660999]
      {
        (134104 call chpl__delete _instance[133867])
      }
    }
    (518297 return _void[55])
  }
  function _do_destroy_array[134126](arg array[134123]:_array[133588](?), arg deinitElts[134129] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[661006] "expr temp" "maybe param" "maybe type" "temp"
    (661009 'move' call_tmp[661006](134134 call _unowned _mt[243] array[134123]))
    unknown call_tmp[661013] "expr temp" "maybe param" "maybe type" "temp"
    (661016 'move' call_tmp[661013](134139 call _instance _mt[243] array[134123]))
    (134143 call _do_destroy_arr call_tmp[661006] call_tmp[661013] deinitElts[134129])
    (518299 return _void[55])
  }
  function _deinitElementsIsParallel[134152](arg eltType[134150]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518303] "RVV" "param" "temp"
    (518308 'move' ret[518303](518307 'deref' 0))
    (518305 return ret[518303])
  }
  function _deinitElements[134166](arg array[134163]:_array[133588](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[661020] "expr temp" "maybe param" "maybe type" "temp"
    (661023 'move' call_tmp[661020](134171 call eltType _mt[243] array[134163]))
    unknown call_tmp[661025] "maybe param" "maybe type" "temp"
    (661028 'move' call_tmp[661025](134174 'needs auto destroy' call_tmp[661020]))
    unknown needsDestroy[134175] "dead at end of block" "param"
    (542966 'init var' needsDestroy[134175] call_tmp[661025])
    (134178 'end of statement')
    unknown call_tmp[661030] "expr temp" "maybe param" "maybe type" "temp"
    (661033 'move' call_tmp[661030](134248 call _cond_test needsDestroy[134175]))
    if call_tmp[661030]
    {
      unknown call_tmp[661037] "expr temp" "maybe param" "maybe type" "temp"
      (661040 'move' call_tmp[661037](134183 call eltType _mt[243] array[134163]))
      unknown call_tmp[661042] "expr temp" "maybe param" "maybe type" "temp"
      (661045 'move' call_tmp[661042](134187 call _deinitElementsIsParallel call_tmp[661037]))
      unknown call_tmp[661047] "expr temp" "maybe param" "maybe type" "temp"
      (661050 'move' call_tmp[661047](134243 call _cond_test call_tmp[661042]))
      if call_tmp[661047]
      {
        Forall {
          induction variables:
            
            unknown elt[134197] "index var" "insert auto destroy"
          iterated expressions:
            array[134163]
          shadow variables:
          other variables
            forall body
          {
            (134193 call chpl__autoDestroy elt[134197])
            (480288 'end of statement' elt[134197])
          }
        }
      }
      {
        {
          unknown _indexOfInterest[134209] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[134210] "expr temp" "temp"
          (134219 'move' _iterator[134210](134217 call _getIterator array[134163]))
          Defer
          {
            {
              (134235 call _freeIterator _iterator[134210])
            }
          }
          { scopeless type
            (134224 'move' _indexOfInterest[134209](134221 call iteratorIndex _iterator[134210]))
          }
          ForLoop[134211]
          {
            unknown elt[134228] "index var" "insert auto destroy"
            (480291 'end of statement')
            (134230 'move' elt[134228] _indexOfInterest[134209])
            (480292 'end of statement' elt[134228])
            {
              (134206 call chpl__autoDestroy elt[134228])
              (480294 'end of statement' elt[134228])
            }
            label _continueLabel[134214]
            _indexOfInterest[134209]
            _iterator[134210]
          }
          label _breakLabel[134215]
        }
      }
    }
    unknown call_tmp[661054] "expr temp" "maybe param" "maybe type" "temp"
    (661057 'move' call_tmp[661054](134253 call _instance _mt[243] array[134163]))
    (134262 call(134258 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[661054]))
    (518310 return _void[55])
  }
  function _array[133588](?).equals[134273](arg _mt[134278]:_MT[238], arg this[134275]:_array[133588](?) :
  _array[133588](?), arg that[134270]:_array[133588](?)) : _unknown[51] "method"
  {
    unknown ret[518314] "RVV" "temp"
    unknown call_tmp[661063] "expr temp" "maybe param" "maybe type" "temp"
    (661066 'move' call_tmp[661063](134282 call _value _mt[243] this[134275]))
    unknown call_tmp[661070] "expr temp" "maybe param" "maybe type" "temp"
    (661073 'move' call_tmp[661070](134286 call _value _mt[243] that[134270]))
    unknown call_tmp[661075] "expr temp" "maybe param" "maybe type" "temp"
    (661078 'move' call_tmp[661075](134289 call == call_tmp[661063] call_tmp[661070]))
    unknown call_tmp[661080] "expr temp" "maybe param" "maybe type" "temp"
    (661083 'move' call_tmp[661080](134294 call _cond_test call_tmp[661075]))
    if call_tmp[661080]
    {
      (518320 'move' ret[518314](518319 'coerce' 1 bool[10]))
      gotoReturn _end_equals[518312] _end_equals[518312]
    }
    unknown call_tmp[661087] "expr temp" "maybe param" "maybe type" "temp"
    (661090 'move' call_tmp[661087](134301 call rank _mt[243] this[134275]))
    unknown call_tmp[661094] "expr temp" "maybe param" "maybe type" "temp"
    (661097 'move' call_tmp[661094](134305 call rank _mt[243] that[134270]))
    unknown call_tmp[661099] "expr temp" "maybe param" "maybe type" "temp"
    (661102 'move' call_tmp[661099](134308 call != call_tmp[661087] call_tmp[661094]))
    unknown call_tmp[661104] "expr temp" "maybe param" "maybe type" "temp"
    (661107 'move' call_tmp[661104](134313 call _cond_test call_tmp[661099]))
    if call_tmp[661104]
    {
      (518326 'move' ret[518314](518325 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518312] _end_equals[518312]
    }
    unknown call_tmp[661111] "expr temp" "maybe param" "maybe type" "temp"
    (661114 'move' call_tmp[661111](134319 call size _mt[243] this[134275]))
    unknown call_tmp[661118] "expr temp" "maybe param" "maybe type" "temp"
    (661121 'move' call_tmp[661118](134323 call size _mt[243] that[134270]))
    unknown call_tmp[661123] "expr temp" "maybe param" "maybe type" "temp"
    (661126 'move' call_tmp[661123](134326 call != call_tmp[661111] call_tmp[661118]))
    unknown call_tmp[661128] "expr temp" "maybe param" "maybe type" "temp"
    (661131 'move' call_tmp[661128](134331 call _cond_test call_tmp[661123]))
    if call_tmp[661128]
    {
      (518332 'move' ret[518314](518331 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518312] _end_equals[518312]
    }
    unknown tmp[425698] "maybe param" "temp"
    unknown call_tmp[661135] "expr temp" "maybe param" "maybe type" "temp"
    (661138 'move' call_tmp[661135](134338 call _dom _mt[243] this[134275]))
    (425709 'move' tmp[425698](134342 call isRectangularDom call_tmp[661135]))
    unknown call_tmp[661140] "expr temp" "maybe param" "maybe type" "temp"
    (661143 'move' call_tmp[661140](425711 call _cond_invalid tmp[425698]))
    if call_tmp[661140]
    {
      (425714 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566591] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566592] "maybe param" "temp"
    unknown call_tmp[661145] "expr temp" "maybe param" "maybe type" "temp"
    (661148 'move' call_tmp[661145](425699 call isTrue tmp[425698]))
    (566597 'move' tmp[566592](566595 call _cond_test call_tmp[661145]))
    if tmp[566592]
    {
      unknown tmp[566599] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661152] "expr temp" "maybe param" "maybe type" "temp"
      (661155 'move' call_tmp[661152](134345 call _dom _mt[243] that[134270]))
      unknown call_tmp[661157] "expr temp" "maybe param" "maybe type" "temp"
      (661160 'move' call_tmp[661157](134349 call isRectangularDom call_tmp[661152]))
      (566601 'move' tmp[566599](425702 call isTrue call_tmp[661157]))
      (566606 'move' tmp[566591](566603 '_paramFoldLogical' tmp[566592] tmp[566599]))
    }
    {
      (566611 'move' tmp[566591](566608 '_paramFoldLogical' tmp[566592] 0))
    }
    unknown call_tmp[661162] "expr temp" "maybe param" "maybe type" "temp"
    (661165 'move' call_tmp[661162](134442 call _cond_test tmp[566591]))
    if call_tmp[661162]
    {
      {
        unknown _indexOfInterest[134398] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[134399] "expr temp" "temp"
        unknown call_tmp[661169] "expr temp" "maybe param" "maybe type" "temp"
        (661172 'move' call_tmp[661169](134414 call rank _mt[243] this[134275]))
        unknown call_tmp[661174] "expr temp" "maybe param" "maybe type" "temp"
        (661177 'move' call_tmp[661174](134418 call chpl_direct_counted_range_iter 0 call_tmp[661169]))
        (134408 'move' _iterator[134399](134406 call _getIterator call_tmp[661174]))
        Defer
        {
          {
            (134434 call _freeIterator _iterator[134399])
          }
        }
        { scopeless type
          (134423 'move' _indexOfInterest[134398](134420 call iteratorIndex _iterator[134399]))
        }
        ForLoop[134400]
        {
          unknown d[134427] "index var" "insert auto destroy"
          (480302 'end of statement')
          (134429 'move' d[134427] _indexOfInterest[134398])
          (480303 'end of statement' d[134427])
          unknown call_tmp[661181] "expr temp" "maybe param" "maybe type" "temp"
          (661184 'move' call_tmp[661181](134363 call _dom _mt[243] this[134275]))
          unknown call_tmp[661188] "expr temp" "maybe param" "maybe type" "temp"
          (661191 'move' call_tmp[661188](134371 call(134366 call (partial) dim _mt[243] call_tmp[661181]) d[134427]))
          unknown call_tmp[661195] "expr temp" "maybe param" "maybe type" "temp"
          (661198 'move' call_tmp[661195](134372 call size _mt[243] call_tmp[661188]))
          unknown call_tmp[661202] "expr temp" "maybe param" "maybe type" "temp"
          (661205 'move' call_tmp[661202](134376 call _dom _mt[243] that[134270]))
          unknown call_tmp[661209] "expr temp" "maybe param" "maybe type" "temp"
          (661212 'move' call_tmp[661209](134384 call(134379 call (partial) dim _mt[243] call_tmp[661202]) d[134427]))
          unknown call_tmp[661216] "expr temp" "maybe param" "maybe type" "temp"
          (661219 'move' call_tmp[661216](134385 call size _mt[243] call_tmp[661209]))
          unknown call_tmp[661221] "expr temp" "maybe param" "maybe type" "temp"
          (661224 'move' call_tmp[661221](134388 call != call_tmp[661195] call_tmp[661216]))
          unknown call_tmp[661226] "expr temp" "maybe param" "maybe type" "temp"
          (661229 'move' call_tmp[661226](134393 call _cond_test call_tmp[661221]))
          if call_tmp[661226]
          {
            (518338 'move' ret[518314](518337 'coerce' 0 bool[10]))
            gotoReturn _end_equals[518312] _end_equals[518312]
          }
          label _continueLabel[134403]
          _indexOfInterest[134398]
          _iterator[134399]
        }
        label _breakLabel[134404]
      }
    }
    unknown call_tmp[661233] "expr temp" "maybe param" "maybe type" "temp"
    (661236 'move' call_tmp[661233](134448 call eltType _mt[243] this[134275]))
    unknown call_tmp[661238] "expr temp" "maybe param" "maybe type" "temp"
    (661241 'move' call_tmp[661238](134452 call isArrayType call_tmp[661233]))
    unknown call_tmp[661243] "expr temp" "maybe param" "maybe type" "temp"
    (661246 'move' call_tmp[661243](134517 call _cond_test call_tmp[661238]))
    if call_tmp[661243]
    {
      unknown ret[134454] "dead at end of block" "insert auto destroy"
      (542968 'init var' ret[134454] 1)
      (134457 'end of statement')
      Forall {
        induction variables:
          
          unknown thisArr[134499] "index var" "insert auto destroy"
          
          unknown thatArr[134501] "index var" "insert auto destroy"
        iterated expressions:
          this[134275]
          that[134270]
        shadow variables:
          ret[134470] 'reduce' intent outer var ret[134454]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown tmp[134487] "temp"
          (134490 'move' tmp[134487](134489 'addr of' ret[134470]))
          unknown tmp[425719] "maybe param" "temp"
          (425730 'move' tmp[425719] tmp[134487])
          unknown call_tmp[661248] "expr temp" "maybe param" "maybe type" "temp"
          (661251 'move' call_tmp[661248](425732 call _cond_invalid tmp[425719]))
          if call_tmp[661248]
          {
            (425735 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[566618] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[566619] "maybe param" "temp"
          unknown call_tmp[661253] "expr temp" "maybe param" "maybe type" "temp"
          (661256 'move' call_tmp[661253](425720 call isTrue tmp[425719]))
          (566624 'move' tmp[566619](566622 call _cond_test call_tmp[661253]))
          if tmp[566619]
          {
            unknown tmp[566626] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[661260] "expr temp" "maybe param" "maybe type" "temp"
            (661263 'move' call_tmp[661260](134485 call(134480 call (partial) equals _mt[243] thisArr[134499]) thatArr[134501]))
            (566628 'move' tmp[566626](425723 call isTrue call_tmp[661260]))
            (566633 'move' tmp[566618](566630 '_paramFoldLogical' tmp[566619] tmp[566626]))
          }
          {
            (566638 'move' tmp[566618](566635 '_paramFoldLogical' tmp[566619] 0))
          }
          (134495 call = tmp[134487] tmp[566618])
          (480307 'end of statement' thisArr[134499] thatArr[134501])
        }
      }
      (518344 'move' ret[518314](518343 'coerce' ret[134454] bool[10]))
      gotoReturn _end_equals[518312] _end_equals[518312]
      (480310 'end of statement' ret[134454])
    }
    {
      unknown call_tmp[661265] "expr temp" "maybe param" "maybe type" "temp"
      (661268 'move' call_tmp[661265](134510 call == this[134275] that[134270]))
      unknown call_tmp[661270] "expr temp" "maybe param" "maybe type" "temp"
      (661273 'move' call_tmp[661270](134512 'reduce' LogicalAndReduceScanOp[376531](?) call_tmp[661265] 0))
      (518350 'move' ret[518314](518349 'coerce' call_tmp[661270] bool[10]))
      gotoReturn _end_equals[518312] _end_equals[518312]
    }
    label _end_equals[518312]
    (518316 return ret[518314])
  }
  { scopeless type
    bool[10]
  }
  function _cast[134530](arg t[134527]:_array[133588](?), param arg arg[134532]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown ret[518356] "RVV" "temp"
    unknown result[134535] "dead at end of block" "insert auto destroy"
    (542970 'default init var' result[134535] t[134527])
    (134538 'end of statement')
    (134544 call chpl__transferArray result[134535] arg[134532])
    (480313 'end of statement' result[134535])
    (518361 'move' ret[518356](518360 'deref' result[134535]))
    gotoReturn _end__cast[518354] _end__cast[518354]
    (480315 'end of statement' result[134535])
    label _end__cast[518354]
    (518358 return ret[518356])
  }
  function _cast[134557](arg t[134554]:string[26], arg x[134562]:_array[133588](?)) : _unknown[51] "no doc"
  {
    unknown ret[518367] "RVV" "temp"
    unknown call_tmp[661275] "expr temp" "maybe param" "maybe type" "temp"
    (661278 'move' call_tmp[661275](134572 call stringify x[134562]))
    (518372 'move' ret[518367](518371 'deref' call_tmp[661275]))
    (518369 return ret[518367])
    (355036 'used modules list'(134566 'use' IO[230803]))
  }
  function isDmapType[134581](arg t[134579]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518394] "RVV" "param" "temp"
    function isDmapHelp[134589](arg t[134586]:_distribution[118967](?)) param : _unknown[51]
    {
      unknown ret[518376] "RVV" "param" "temp"
      (518381 'move' ret[518376](518380 'deref' 1))
      (518378 return ret[518376])
    }
    function isDmapHelp[134602](arg t[134600]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518385] "RVV" "param" "temp"
      (518390 'move' ret[518385](518389 'deref' 0))
      (518387 return ret[518385])
    }
    unknown call_tmp[661280] "expr temp" "maybe param" "maybe type" "temp"
    (661283 'move' call_tmp[661280](134613 call isDmapHelp t[134579]))
    (518399 'move' ret[518394](518398 'deref' call_tmp[661280]))
    (518396 return ret[518394])
  }
  function isDmapValue[134624](arg e[134621]:_distribution[118967](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518403] "RVV" "param" "temp"
    (518408 'move' ret[518403](518407 'deref' 1))
    (518405 return ret[518403])
  }
  function isDmapValue[134636](arg e[134634]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518412] "RVV" "param" "temp"
    (518417 'move' ret[518412](518416 'deref' 0))
    (518414 return ret[518412])
  }
  function isDomainType[134648](arg t[134646]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518421] "RVV" "param" "temp"
    unknown call_tmp[661285] "expr temp" "maybe param" "maybe type" "temp"
    (661288 'move' call_tmp[661285](354211 'is_subtype' _domain[125902](?) t[134646]))
    (518426 'move' ret[518421](518425 'deref' call_tmp[661285]))
    (518423 return ret[518421])
  }
  function isDomainValue[134666](arg e[134663]:_domain[125902](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518430] "RVV" "param" "temp"
    (518435 'move' ret[518430](518434 'deref' 1))
    (518432 return ret[518430])
  }
  function isDomainValue[134678](arg e[134676]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518439] "RVV" "param" "temp"
    (518444 'move' ret[518439](518443 'deref' 0))
    (518441 return ret[518439])
  }
  function isArrayType[134690](arg t[134688]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518448] "RVV" "param" "temp"
    unknown call_tmp[661290] "expr temp" "maybe param" "maybe type" "temp"
    (661293 'move' call_tmp[661290](354212 'is_subtype' _array[133588](?) t[134688]))
    (518453 'move' ret[518448](518452 'deref' call_tmp[661290]))
    (518450 return ret[518448])
  }
  function isArrayValue[134710](arg e[134707]:_array[133588](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518457] "RVV" "param" "temp"
    (518462 'move' ret[518457](518461 'deref' 1))
    (518459 return ret[518457])
  }
  function isArrayValue[134722](arg e[134720]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518466] "RVV" "param" "temp"
    (518471 'move' ret[518466](518470 'deref' 0))
    (518468 return ret[518466])
  }
  function -[134736](arg a[134733]:_domain[125902](?), arg b[134739]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[518475] "RVV" "temp"
    unknown newDom[134756] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661295] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661298 'move' call_tmp[661295](134755 'typeof' a[134733]))
    (542972 'default init var' newDom[134756] call_tmp[661295])
    (134759 'end of statement')
    {
      unknown call_tmp[661300] "maybe param" "maybe type" "temp"
      (661303 'move' call_tmp[661300](134802 'task_get_serial'))
      unknown tmp[134801] "dead at end of block" "insert auto destroy" "temp"
      (542974 'init var' tmp[134801] call_tmp[661300])
      unknown call_tmp[661307] "expr temp" "maybe param" "maybe type" "temp"
      (661310 'move' call_tmp[661307](134762 call _value _mt[243] newDom[134756]))
      unknown call_tmp[661314] "expr temp" "maybe param" "maybe type" "temp"
      (661317 'move' call_tmp[661314](134765 call parSafe _mt[243] call_tmp[661307]))
      unknown call_tmp[661319] "expr temp" "maybe param" "maybe type" "temp"
      (661322 'move' call_tmp[661319](134768 call ! call_tmp[661314]))
      unknown call_tmp[661324] "expr temp" "maybe param" "maybe type" "temp"
      (661327 'move' call_tmp[661324](134798 call _cond_test call_tmp[661319]))
      if call_tmp[661324]
      {
        (134804 'task_set_serial' 1)
      }
      Defer
      {
        {
          (134808 'task_set_serial' tmp[134801])
        }
      }
      Forall {
        induction variables:
          
          unknown e[134795] "index var" "insert auto destroy"
        iterated expressions:
          a[134733]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[661331] "expr temp" "maybe param" "maybe type" "temp"
          (661334 'move' call_tmp[661331](134778 call(134773 call (partial) contains _mt[243] b[134739]) e[134795]))
          unknown call_tmp[661336] "expr temp" "maybe param" "maybe type" "temp"
          (661339 'move' call_tmp[661336](134779 call ! call_tmp[661331]))
          unknown call_tmp[661341] "expr temp" "maybe param" "maybe type" "temp"
          (661344 'move' call_tmp[661341](134789 call _cond_test call_tmp[661336]))
          if call_tmp[661341]
          {
            (134787 call(134782 call (partial) add _mt[243] newDom[134756]) e[134795])
            (480331 'end of statement' newDom[134756] e[134795])
          }
        }
      }
    }
    (518480 'move' ret[518475](518479 'deref' newDom[134756]))
    gotoReturn _end_-[518473] _end_-[518473]
    (480334 'end of statement' newDom[134756])
    label _end_-[518473]
    (518477 return ret[518475])
  }
  where {
    unknown tmp[425740] "maybe param" "temp"
    unknown call_tmp[661348] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661351 'move' call_tmp[661348](134743 'typeof' a[134733]))
    unknown call_tmp[661353] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661356 'move' call_tmp[661353](134745 'typeof' b[134739]))
    (425751 'move' tmp[425740](134746 call == call_tmp[661348] call_tmp[661353]))
    unknown call_tmp[661358] "expr temp" "maybe param" "maybe type" "temp"
    (661361 'move' call_tmp[661358](425753 call _cond_invalid tmp[425740]))
    if call_tmp[661358]
    {
      (425756 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566645] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566646] "maybe param" "temp"
    unknown call_tmp[661363] "expr temp" "maybe param" "maybe type" "temp"
    (661366 'move' call_tmp[661363](425741 call isTrue tmp[425740]))
    (566651 'move' tmp[566646](566649 call _cond_test call_tmp[661363]))
    if tmp[566646]
    {
      unknown tmp[566653] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661368] "expr temp" "maybe param" "maybe type" "temp"
      (661371 'move' call_tmp[661368](134751 call isAssociativeDom a[134733]))
      (566655 'move' tmp[566653](425744 call isTrue call_tmp[661368]))
      (566660 'move' tmp[566645](566657 '_paramFoldLogical' tmp[566646] tmp[566653]))
    }
    {
      (566665 'move' tmp[566645](566662 '_paramFoldLogical' tmp[566646] 0))
    }
    (748219 call chpl_statementLevelSymbol tmp[566645])
  }
  function -=[134824](ref arg a[134821]:_domain[125902](?), arg b[134827]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134864] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134865] "expr temp" "temp"
      (134874 'move' _iterator[134865](134872 call _getIterator b[134827]))
      Defer
      {
        {
          (134890 call _freeIterator _iterator[134865])
        }
      }
      { scopeless type
        (134879 'move' _indexOfInterest[134864](134876 call iteratorIndex _iterator[134865]))
      }
      ForLoop[134866]
      {
        unknown e[134883] "index var" "insert auto destroy"
        (480337 'end of statement')
        (134885 'move' e[134883] _indexOfInterest[134864])
        (480338 'end of statement' e[134883])
        unknown call_tmp[661375] "expr temp" "maybe param" "maybe type" "temp"
        (661378 'move' call_tmp[661375](134850 call(134845 call (partial) contains _mt[243] a[134821]) e[134883]))
        unknown call_tmp[661380] "expr temp" "maybe param" "maybe type" "temp"
        (661383 'move' call_tmp[661380](134859 call _cond_test call_tmp[661375]))
        if call_tmp[661380]
        {
          (134857 call(134852 call (partial) remove _mt[243] a[134821]) e[134883])
          (480340 'end of statement' e[134883])
        }
        label _continueLabel[134869]
        _indexOfInterest[134864]
        _iterator[134865]
      }
      label _breakLabel[134870]
    }
    (518484 return _void[55])
  }
  where {
    unknown tmp[425761] "maybe param" "temp"
    unknown call_tmp[661387] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661390 'move' call_tmp[661387](134831 'typeof' a[134821]))
    unknown call_tmp[661392] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661395 'move' call_tmp[661392](134833 'typeof' b[134827]))
    (425772 'move' tmp[425761](134834 call == call_tmp[661387] call_tmp[661392]))
    unknown call_tmp[661397] "expr temp" "maybe param" "maybe type" "temp"
    (661400 'move' call_tmp[661397](425774 call _cond_invalid tmp[425761]))
    if call_tmp[661397]
    {
      (425777 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566672] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566673] "maybe param" "temp"
    unknown call_tmp[661402] "expr temp" "maybe param" "maybe type" "temp"
    (661405 'move' call_tmp[661402](425762 call isTrue tmp[425761]))
    (566678 'move' tmp[566673](566676 call _cond_test call_tmp[661402]))
    if tmp[566673]
    {
      unknown tmp[566680] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661407] "expr temp" "maybe param" "maybe type" "temp"
      (661410 'move' call_tmp[661407](134839 call isAssociativeDom a[134821]))
      (566682 'move' tmp[566680](425765 call isTrue call_tmp[661407]))
      (566687 'move' tmp[566672](566684 '_paramFoldLogical' tmp[566673] tmp[566680]))
    }
    {
      (566692 'move' tmp[566672](566689 '_paramFoldLogical' tmp[566673] 0))
    }
    (748221 call chpl_statementLevelSymbol tmp[566672])
  }
  function |[134907](arg a[134904]:_domain[125902](?), arg b[134910]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[518488] "RVV" "temp"
    unknown call_tmp[661412] "expr temp" "maybe param" "maybe type" "temp"
    (661415 'move' call_tmp[661412](134927 call + a[134904] b[134910]))
    (518493 'move' ret[518488](518492 'deref' call_tmp[661412]))
    (518490 return ret[518488])
  }
  where {
    unknown tmp[425782] "maybe param" "temp"
    unknown call_tmp[661417] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661420 'move' call_tmp[661417](134914 'typeof' a[134904]))
    unknown call_tmp[661422] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661425 'move' call_tmp[661422](134916 'typeof' b[134910]))
    (425793 'move' tmp[425782](134917 call == call_tmp[661417] call_tmp[661422]))
    unknown call_tmp[661427] "expr temp" "maybe param" "maybe type" "temp"
    (661430 'move' call_tmp[661427](425795 call _cond_invalid tmp[425782]))
    if call_tmp[661427]
    {
      (425798 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566699] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566700] "maybe param" "temp"
    unknown call_tmp[661432] "expr temp" "maybe param" "maybe type" "temp"
    (661435 'move' call_tmp[661432](425783 call isTrue tmp[425782]))
    (566705 'move' tmp[566700](566703 call _cond_test call_tmp[661432]))
    if tmp[566700]
    {
      unknown tmp[566707] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661437] "expr temp" "maybe param" "maybe type" "temp"
      (661440 'move' call_tmp[661437](134922 call isAssociativeDom a[134904]))
      (566709 'move' tmp[566707](425786 call isTrue call_tmp[661437]))
      (566714 'move' tmp[566699](566711 '_paramFoldLogical' tmp[566700] tmp[566707]))
    }
    {
      (566719 'move' tmp[566699](566716 '_paramFoldLogical' tmp[566700] 0))
    }
    (748223 call chpl_statementLevelSymbol tmp[566699])
  }
  function |=[134941](ref arg a[134938]:_domain[125902](?), arg b[134944]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134969] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134970] "expr temp" "temp"
      (134979 'move' _iterator[134970](134977 call _getIterator b[134944]))
      Defer
      {
        {
          (134995 call _freeIterator _iterator[134970])
        }
      }
      { scopeless type
        (134984 'move' _indexOfInterest[134969](134981 call iteratorIndex _iterator[134970]))
      }
      ForLoop[134971]
      {
        unknown e[134988] "index var" "insert auto destroy"
        (480344 'end of statement')
        (134990 'move' e[134988] _indexOfInterest[134969])
        (480345 'end of statement' e[134988])
        (134967 call(134962 call (partial) add _mt[243] a[134938]) e[134988])
        (480347 'end of statement' e[134988])
        label _continueLabel[134974]
        _indexOfInterest[134969]
        _iterator[134970]
      }
      label _breakLabel[134975]
    }
    (518495 return _void[55])
  }
  where {
    unknown tmp[425803] "maybe param" "temp"
    unknown call_tmp[661444] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661447 'move' call_tmp[661444](134948 'typeof' a[134938]))
    unknown call_tmp[661449] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661452 'move' call_tmp[661449](134950 'typeof' b[134944]))
    (425814 'move' tmp[425803](134951 call == call_tmp[661444] call_tmp[661449]))
    unknown call_tmp[661454] "expr temp" "maybe param" "maybe type" "temp"
    (661457 'move' call_tmp[661454](425816 call _cond_invalid tmp[425803]))
    if call_tmp[661454]
    {
      (425819 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566726] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566727] "maybe param" "temp"
    unknown call_tmp[661459] "expr temp" "maybe param" "maybe type" "temp"
    (661462 'move' call_tmp[661459](425804 call isTrue tmp[425803]))
    (566732 'move' tmp[566727](566730 call _cond_test call_tmp[661459]))
    if tmp[566727]
    {
      unknown tmp[566734] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661464] "expr temp" "maybe param" "maybe type" "temp"
      (661467 'move' call_tmp[661464](134956 call isAssociativeDom a[134938]))
      (566736 'move' tmp[566734](425807 call isTrue call_tmp[661464]))
      (566741 'move' tmp[566726](566738 '_paramFoldLogical' tmp[566727] tmp[566734]))
    }
    {
      (566746 'move' tmp[566726](566743 '_paramFoldLogical' tmp[566727] 0))
    }
    (748225 call chpl_statementLevelSymbol tmp[566726])
  }
  function +=[135012](ref arg a[135009]:_domain[125902](?), arg b[135015]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (135032 call |= a[135009] b[135015])
    (518497 return _void[55])
  }
  where {
    unknown tmp[425824] "maybe param" "temp"
    unknown call_tmp[661469] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661472 'move' call_tmp[661469](135019 'typeof' a[135009]))
    unknown call_tmp[661474] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661477 'move' call_tmp[661474](135021 'typeof' b[135015]))
    (425835 'move' tmp[425824](135022 call == call_tmp[661469] call_tmp[661474]))
    unknown call_tmp[661479] "expr temp" "maybe param" "maybe type" "temp"
    (661482 'move' call_tmp[661479](425837 call _cond_invalid tmp[425824]))
    if call_tmp[661479]
    {
      (425840 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566753] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566754] "maybe param" "temp"
    unknown call_tmp[661484] "expr temp" "maybe param" "maybe type" "temp"
    (661487 'move' call_tmp[661484](425825 call isTrue tmp[425824]))
    (566759 'move' tmp[566754](566757 call _cond_test call_tmp[661484]))
    if tmp[566754]
    {
      unknown tmp[566761] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661489] "expr temp" "maybe param" "maybe type" "temp"
      (661492 'move' call_tmp[661489](135027 call isAssociativeDom a[135009]))
      (566763 'move' tmp[566761](425828 call isTrue call_tmp[661489]))
      (566768 'move' tmp[566753](566765 '_paramFoldLogical' tmp[566754] tmp[566761]))
    }
    {
      (566773 'move' tmp[566753](566770 '_paramFoldLogical' tmp[566754] 0))
    }
    (748227 call chpl_statementLevelSymbol tmp[566753])
  }
  function &[135045](arg a[135042]:_domain[125902](?), arg b[135048]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[518501] "RVV" "temp"
    unknown newDom[135065] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661494] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661497 'move' call_tmp[661494](135064 'typeof' a[135042]))
    (542976 'default init var' newDom[135065] call_tmp[661494])
    (135068 'end of statement')
    {
      unknown call_tmp[661499] "maybe param" "maybe type" "temp"
      (661502 'move' call_tmp[661499](135112 'task_get_serial'))
      unknown tmp[135111] "dead at end of block" "insert auto destroy" "temp"
      (542978 'init var' tmp[135111] call_tmp[661499])
      unknown call_tmp[661506] "expr temp" "maybe param" "maybe type" "temp"
      (661509 'move' call_tmp[661506](135071 call _value _mt[243] newDom[135065]))
      unknown call_tmp[661513] "expr temp" "maybe param" "maybe type" "temp"
      (661516 'move' call_tmp[661513](135074 call parSafe _mt[243] call_tmp[661506]))
      unknown call_tmp[661518] "expr temp" "maybe param" "maybe type" "temp"
      (661521 'move' call_tmp[661518](135077 call ! call_tmp[661513]))
      unknown call_tmp[661523] "expr temp" "maybe param" "maybe type" "temp"
      (661526 'move' call_tmp[661523](135108 call _cond_test call_tmp[661518]))
      if call_tmp[661523]
      {
        (135114 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135118 'task_set_serial' tmp[135111])
        }
      }
      Forall {
        induction variables:
          
          unknown k[135105] "index var" "insert auto destroy"
        iterated expressions:
          a[135042]
        shadow variables:
          newDom[135082] 'ref' intent outer var newDom[135065]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown call_tmp[661530] "expr temp" "maybe param" "maybe type" "temp"
          (661533 'move' call_tmp[661530](135093 call(135088 call (partial) contains _mt[243] b[135048]) k[135105]))
          unknown call_tmp[661535] "expr temp" "maybe param" "maybe type" "temp"
          (661538 'move' call_tmp[661535](135099 call _cond_test call_tmp[661530]))
          if call_tmp[661535]
          {
            (135096 call += newDom[135082] k[135105])
            (480352 'end of statement' newDom[135082] k[135105])
          }
        }
      }
    }
    (518506 'move' ret[518501](518505 'deref' newDom[135065]))
    gotoReturn _end_&[518499] _end_&[518499]
    (480355 'end of statement' newDom[135065])
    label _end_&[518499]
    (518503 return ret[518501])
  }
  where {
    unknown tmp[425845] "maybe param" "temp"
    unknown call_tmp[661540] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661543 'move' call_tmp[661540](135052 'typeof' a[135042]))
    unknown call_tmp[661545] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661548 'move' call_tmp[661545](135054 'typeof' b[135048]))
    (425856 'move' tmp[425845](135055 call == call_tmp[661540] call_tmp[661545]))
    unknown call_tmp[661550] "expr temp" "maybe param" "maybe type" "temp"
    (661553 'move' call_tmp[661550](425858 call _cond_invalid tmp[425845]))
    if call_tmp[661550]
    {
      (425861 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566780] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566781] "maybe param" "temp"
    unknown call_tmp[661555] "expr temp" "maybe param" "maybe type" "temp"
    (661558 'move' call_tmp[661555](425846 call isTrue tmp[425845]))
    (566786 'move' tmp[566781](566784 call _cond_test call_tmp[661555]))
    if tmp[566781]
    {
      unknown tmp[566788] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661560] "expr temp" "maybe param" "maybe type" "temp"
      (661563 'move' call_tmp[661560](135060 call isAssociativeDom a[135042]))
      (566790 'move' tmp[566788](425849 call isTrue call_tmp[661560]))
      (566795 'move' tmp[566780](566792 '_paramFoldLogical' tmp[566781] tmp[566788]))
    }
    {
      (566800 'move' tmp[566780](566797 '_paramFoldLogical' tmp[566781] 0))
    }
    (748229 call chpl_statementLevelSymbol tmp[566780])
  }
  function &=[135134](ref arg a[135131]:_domain[125902](?), arg b[135137]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown removeSet[135160] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661567] "expr temp" "maybe param" "maybe type" "temp"
    (661570 'move' call_tmp[661567](135153 call idxType _mt[243] a[135131]))
    unknown call_tmp[661572] "expr temp" "maybe param" "maybe type" "temp"
    (661575 'move' call_tmp[661572](135158 call chpl__buildDomainRuntimeType defaultDist[94050] call_tmp[661567]))
    (542980 'default init var' removeSet[135160] call_tmp[661572])
    (135163 'end of statement')
    {
      unknown _indexOfInterest[135186] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135187] "expr temp" "temp"
      (135196 'move' _iterator[135187](135194 call _getIterator a[135131]))
      Defer
      {
        {
          (135212 call _freeIterator _iterator[135187])
        }
      }
      { scopeless type
        (135201 'move' _indexOfInterest[135186](135198 call iteratorIndex _iterator[135187]))
      }
      ForLoop[135188]
      {
        unknown e[135205] "index var" "insert auto destroy"
        (480358 'end of statement')
        (135207 'move' e[135205] _indexOfInterest[135186])
        (480359 'end of statement' e[135205])
        unknown call_tmp[661579] "expr temp" "maybe param" "maybe type" "temp"
        (661582 'move' call_tmp[661579](135173 call(135168 call (partial) contains _mt[243] b[135137]) e[135205]))
        unknown call_tmp[661584] "expr temp" "maybe param" "maybe type" "temp"
        (661587 'move' call_tmp[661584](135174 call ! call_tmp[661579]))
        unknown call_tmp[661589] "expr temp" "maybe param" "maybe type" "temp"
        (661592 'move' call_tmp[661589](135181 call _cond_test call_tmp[661584]))
        if call_tmp[661589]
        {
          (135178 call += removeSet[135160] e[135205])
          (480361 'end of statement' removeSet[135160] e[135205])
        }
        label _continueLabel[135191]
        _indexOfInterest[135186]
        _iterator[135187]
      }
      label _breakLabel[135192]
    }
    {
      unknown _indexOfInterest[135229] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135230] "expr temp" "temp"
      (135239 'move' _iterator[135230](135237 call _getIterator removeSet[135160]))
      Defer
      {
        {
          (135255 call _freeIterator _iterator[135230])
        }
      }
      { scopeless type
        (135244 'move' _indexOfInterest[135229](135241 call iteratorIndex _iterator[135230]))
      }
      ForLoop[135231]
      {
        unknown e[135248] "index var" "insert auto destroy"
        (480365 'end of statement')
        (135250 'move' e[135248] _indexOfInterest[135229])
        (480366 'end of statement' e[135248])
        (135227 call(135222 call (partial) remove _mt[243] a[135131]) e[135248])
        (480368 'end of statement' e[135248])
        label _continueLabel[135234]
        _indexOfInterest[135229]
        _iterator[135230]
      }
      label _breakLabel[135235]
    }
    (518510 return _void[55])
  }
  where {
    unknown tmp[425866] "maybe param" "temp"
    unknown call_tmp[661596] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661599 'move' call_tmp[661596](135141 'typeof' a[135131]))
    unknown call_tmp[661601] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661604 'move' call_tmp[661601](135143 'typeof' b[135137]))
    (425877 'move' tmp[425866](135144 call == call_tmp[661596] call_tmp[661601]))
    unknown call_tmp[661606] "expr temp" "maybe param" "maybe type" "temp"
    (661609 'move' call_tmp[661606](425879 call _cond_invalid tmp[425866]))
    if call_tmp[661606]
    {
      (425882 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566807] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566808] "maybe param" "temp"
    unknown call_tmp[661611] "expr temp" "maybe param" "maybe type" "temp"
    (661614 'move' call_tmp[661611](425867 call isTrue tmp[425866]))
    (566813 'move' tmp[566808](566811 call _cond_test call_tmp[661611]))
    if tmp[566808]
    {
      unknown tmp[566815] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661616] "expr temp" "maybe param" "maybe type" "temp"
      (661619 'move' call_tmp[661616](135149 call isAssociativeDom a[135131]))
      (566817 'move' tmp[566815](425870 call isTrue call_tmp[661616]))
      (566822 'move' tmp[566807](566819 '_paramFoldLogical' tmp[566808] tmp[566815]))
    }
    {
      (566827 'move' tmp[566807](566824 '_paramFoldLogical' tmp[566808] 0))
    }
    (748231 call chpl_statementLevelSymbol tmp[566807])
  }
  function ^[135271](arg a[135268]:_domain[125902](?), arg b[135274]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[518514] "RVV" "temp"
    unknown newDom[135291] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661621] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661624 'move' call_tmp[661621](135290 'typeof' a[135268]))
    (542982 'default init var' newDom[135291] call_tmp[661621])
    (135294 'end of statement')
    {
      unknown call_tmp[661626] "maybe param" "maybe type" "temp"
      (661629 'move' call_tmp[661626](135366 'task_get_serial'))
      unknown tmp[135365] "dead at end of block" "insert auto destroy" "temp"
      (542984 'init var' tmp[135365] call_tmp[661626])
      unknown call_tmp[661633] "expr temp" "maybe param" "maybe type" "temp"
      (661636 'move' call_tmp[661633](135297 call _value _mt[243] newDom[135291]))
      unknown call_tmp[661640] "expr temp" "maybe param" "maybe type" "temp"
      (661643 'move' call_tmp[661640](135300 call parSafe _mt[243] call_tmp[661633]))
      unknown call_tmp[661645] "expr temp" "maybe param" "maybe type" "temp"
      (661648 'move' call_tmp[661645](135303 call ! call_tmp[661640]))
      unknown call_tmp[661650] "expr temp" "maybe param" "maybe type" "temp"
      (661653 'move' call_tmp[661650](135362 call _cond_test call_tmp[661645]))
      if call_tmp[661650]
      {
        (135368 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135372 'task_set_serial' tmp[135365])
        }
      }
      {
        Forall {
          induction variables:
            
            unknown k[135330] "index var" "insert auto destroy"
          iterated expressions:
            a[135268]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661657] "expr temp" "maybe param" "maybe type" "temp"
            (661660 'move' call_tmp[661657](135313 call(135308 call (partial) contains _mt[243] b[135274]) k[135330]))
            unknown call_tmp[661662] "expr temp" "maybe param" "maybe type" "temp"
            (661665 'move' call_tmp[661662](135314 call ! call_tmp[661657]))
            unknown call_tmp[661667] "expr temp" "maybe param" "maybe type" "temp"
            (661670 'move' call_tmp[661667](135324 call _cond_test call_tmp[661662]))
            if call_tmp[661667]
            {
              (135322 call(135317 call (partial) add _mt[243] newDom[135291]) k[135330])
              (480372 'end of statement' newDom[135291] k[135330])
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135359] "index var" "insert auto destroy"
          iterated expressions:
            b[135274]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661676] "expr temp" "maybe param" "maybe type" "temp"
            (661679 'move' call_tmp[661676](135342 call(135337 call (partial) contains _mt[243] a[135268]) k[135359]))
            unknown call_tmp[661681] "expr temp" "maybe param" "maybe type" "temp"
            (661684 'move' call_tmp[661681](135343 call ! call_tmp[661676]))
            unknown call_tmp[661686] "expr temp" "maybe param" "maybe type" "temp"
            (661689 'move' call_tmp[661686](135353 call _cond_test call_tmp[661681]))
            if call_tmp[661686]
            {
              (135351 call(135346 call (partial) add _mt[243] newDom[135291]) k[135359])
              (480375 'end of statement' newDom[135291] k[135359])
            }
          }
        }
      }
    }
    (518519 'move' ret[518514](518518 'deref' newDom[135291]))
    gotoReturn _end_^[518512] _end_^[518512]
    (480378 'end of statement' newDom[135291])
    label _end_^[518512]
    (518516 return ret[518514])
  }
  where {
    unknown tmp[425887] "maybe param" "temp"
    unknown call_tmp[661693] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661696 'move' call_tmp[661693](135278 'typeof' a[135268]))
    unknown call_tmp[661698] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661701 'move' call_tmp[661698](135280 'typeof' b[135274]))
    (425898 'move' tmp[425887](135281 call == call_tmp[661693] call_tmp[661698]))
    unknown call_tmp[661703] "expr temp" "maybe param" "maybe type" "temp"
    (661706 'move' call_tmp[661703](425900 call _cond_invalid tmp[425887]))
    if call_tmp[661703]
    {
      (425903 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566834] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566835] "maybe param" "temp"
    unknown call_tmp[661708] "expr temp" "maybe param" "maybe type" "temp"
    (661711 'move' call_tmp[661708](425888 call isTrue tmp[425887]))
    (566840 'move' tmp[566835](566838 call _cond_test call_tmp[661708]))
    if tmp[566835]
    {
      unknown tmp[566842] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661713] "expr temp" "maybe param" "maybe type" "temp"
      (661716 'move' call_tmp[661713](135286 call isAssociativeDom a[135268]))
      (566844 'move' tmp[566842](425891 call isTrue call_tmp[661713]))
      (566849 'move' tmp[566834](566846 '_paramFoldLogical' tmp[566835] tmp[566842]))
    }
    {
      (566854 'move' tmp[566834](566851 '_paramFoldLogical' tmp[566835] 0))
    }
    (748233 call chpl_statementLevelSymbol tmp[566834])
  }
  function ^=[135388](ref arg a[135385]:_domain[125902](?), arg b[135391]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135437] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135438] "expr temp" "temp"
      (135447 'move' _iterator[135438](135445 call _getIterator b[135391]))
      Defer
      {
        {
          (135463 call _freeIterator _iterator[135438])
        }
      }
      { scopeless type
        (135452 'move' _indexOfInterest[135437](135449 call iteratorIndex _iterator[135438]))
      }
      ForLoop[135439]
      {
        unknown e[135456] "index var" "insert auto destroy"
        (480381 'end of statement')
        (135458 'move' e[135456] _indexOfInterest[135437])
        (480382 'end of statement' e[135456])
        unknown call_tmp[661720] "expr temp" "maybe param" "maybe type" "temp"
        (661723 'move' call_tmp[661720](135414 call(135409 call (partial) contains _mt[243] a[135385]) e[135456]))
        unknown call_tmp[661725] "expr temp" "maybe param" "maybe type" "temp"
        (661728 'move' call_tmp[661725](135431 call _cond_test call_tmp[661720]))
        if call_tmp[661725]
        {
          (135421 call(135416 call (partial) remove _mt[243] a[135385]) e[135456])
          (480384 'end of statement' e[135456])
        }
        {
          (135429 call(135424 call (partial) add _mt[243] a[135385]) e[135456])
          (480386 'end of statement' e[135456])
        }
        label _continueLabel[135442]
        _indexOfInterest[135437]
        _iterator[135438]
      }
      label _breakLabel[135443]
    }
    (518523 return _void[55])
  }
  where {
    unknown tmp[425908] "maybe param" "temp"
    unknown call_tmp[661734] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661737 'move' call_tmp[661734](135395 'typeof' a[135385]))
    unknown call_tmp[661739] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661742 'move' call_tmp[661739](135397 'typeof' b[135391]))
    (425919 'move' tmp[425908](135398 call == call_tmp[661734] call_tmp[661739]))
    unknown call_tmp[661744] "expr temp" "maybe param" "maybe type" "temp"
    (661747 'move' call_tmp[661744](425921 call _cond_invalid tmp[425908]))
    if call_tmp[661744]
    {
      (425924 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566861] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566862] "maybe param" "temp"
    unknown call_tmp[661749] "expr temp" "maybe param" "maybe type" "temp"
    (661752 'move' call_tmp[661749](425909 call isTrue tmp[425908]))
    (566867 'move' tmp[566862](566865 call _cond_test call_tmp[661749]))
    if tmp[566862]
    {
      unknown tmp[566869] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661754] "expr temp" "maybe param" "maybe type" "temp"
      (661757 'move' call_tmp[661754](135403 call isAssociativeDom a[135385]))
      (566871 'move' tmp[566869](425912 call isTrue call_tmp[661754]))
      (566876 'move' tmp[566861](566873 '_paramFoldLogical' tmp[566862] tmp[566869]))
    }
    {
      (566881 'move' tmp[566861](566878 '_paramFoldLogical' tmp[566862] 0))
    }
    (748235 call chpl_statementLevelSymbol tmp[566861])
  }
  function +=[135480](ref arg sd[135477]:_domain[125902](?), arg inds[135489]:_array[133588](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[661761] "expr temp" "maybe param" "maybe type" "temp"
    (661764 'move' call_tmp[661761](135497 call size _mt[243] inds[135489]))
    unknown call_tmp[661766] "expr temp" "maybe param" "maybe type" "temp"
    (661769 'move' call_tmp[661766](135501 call == call_tmp[661761] 0))
    unknown call_tmp[661771] "expr temp" "maybe param" "maybe type" "temp"
    (661774 'move' call_tmp[661771](135505 call _cond_test call_tmp[661766]))
    if call_tmp[661771]
    {
      gotoReturn _end_+=[518525] _end_+=[518525]
    }
    unknown call_tmp[661778] "expr temp" "maybe param" "maybe type" "temp"
    (661781 'move' call_tmp[661778](135512 call _value _mt[243] sd[135477]))
    (135520 call(135515 call (partial) dsiBulkAdd _mt[243] call_tmp[661778]) inds[135489])
    label _end_+=[518525]
    (518527 return _void[55])
  }
  where {
    unknown call_tmp[661785] "expr temp" "maybe param" "maybe type" "temp"
    (661788 'move' call_tmp[661785](135495 call isSparseDom sd[135477]))
    unknown call_tmp[661790] "expr temp" "maybe param" "maybe type" "temp"
    (661793 'move' call_tmp[661790](135484 call chpl__buildIndexType sd[135477]))
    unknown call_tmp[661797] "expr temp" "maybe param" "maybe type" "temp"
    (661800 'move' call_tmp[661797](461340 call eltType _mt[243] inds[135489]))
    unknown call_tmp[661802] "expr temp" "maybe param" "maybe type" "temp"
    (661805 'move' call_tmp[661802](461344 call == call_tmp[661790] call_tmp[661797]))
    (461338 call & call_tmp[661785] call_tmp[661802])
  }
  function +=[135531](ref arg sd[135528]:_domain[125902](?), arg d[135534]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[661809] "expr temp" "maybe param" "maybe type" "temp"
    (661812 'move' call_tmp[661809](135566 call size _mt[243] d[135534]))
    unknown call_tmp[661814] "expr temp" "maybe param" "maybe type" "temp"
    (661817 'move' call_tmp[661814](135570 call == call_tmp[661809] 0))
    unknown call_tmp[661819] "expr temp" "maybe param" "maybe type" "temp"
    (661822 'move' call_tmp[661819](135574 call _cond_test call_tmp[661814]))
    if call_tmp[661819]
    {
      gotoReturn _end_+=[518531] _end_+=[518531]
    }
    unknown call_tmp[661826] "maybe param" "maybe type" "temp"
    (661829 'move' call_tmp[661826](135581 call size _mt[243] d[135534]))
    const indCount[135584] "dead at end of block" "const" "insert auto destroy"
    (542986 'init var' indCount[135584] call_tmp[661826])
    (135587 'end of statement')
    unknown arr[135606] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661831] "expr temp" "maybe param" "maybe type" "temp"
    (661834 'move' call_tmp[661831](135589 call chpl_build_low_bounded_range 0))
    unknown call_tmp[661836] "expr temp" "maybe param" "maybe type" "temp"
    (661839 'move' call_tmp[661836](135592 call # call_tmp[661831] indCount[135584]))
    unknown call_tmp[661841] "expr temp" "maybe param" "maybe type" "temp"
    (661844 'move' call_tmp[661841](135595 call chpl__buildDomainExpr call_tmp[661836]))
    unknown call_tmp[661846] "expr temp" "maybe param" "maybe type" "temp"
    (661849 'move' call_tmp[661846](135602 call chpl__ensureDomainExpr call_tmp[661841]))
    unknown call_tmp[661851] "expr temp" "maybe param" "maybe type" "temp"
    (661854 'move' call_tmp[661851](135600 call chpl__buildIndexType sd[135528]))
    unknown call_tmp[661856] "expr temp" "maybe param" "maybe type" "temp"
    (661859 'move' call_tmp[661856](135604 call chpl__buildArrayRuntimeType call_tmp[661846] call_tmp[661851]))
    (542988 'default init var' arr[135606] call_tmp[661856])
    (135609 'end of statement')
    {
      unknown _indexOfInterest[135629] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135630] "expr temp" "temp"
      unknown call_tmp[661861] "expr temp" "maybe param" "maybe type" "temp"
      (661864 'move' call_tmp[661861](135639 call _getIterator d[135534]))
      unknown call_tmp[661866] "expr temp" "maybe param" "maybe type" "temp"
      (661869 'move' call_tmp[661866](135642 call chpl_build_low_bounded_range 0))
      unknown call_tmp[661871] "expr temp" "maybe param" "maybe type" "temp"
      (661874 'move' call_tmp[661871](135644 call _getIterator call_tmp[661866]))
      (135647 'move' _iterator[135630](135620 call _build_tuple call_tmp[661861] call_tmp[661871]))
      Defer
      {
        {
          (135677 call _freeIterator _iterator[135630])
        }
      }
      { scopeless type
        (135652 'move' _indexOfInterest[135629](135649 call iteratorIndex _iterator[135630]))
      }
      ForLoop[135631]
      {
        (135657 call _check_tuple_var_decl _indexOfInterest[135629] 2)
        (480393 'end of statement')
        unknown i[135663] "index var" "insert auto destroy"
        (480394 'end of statement')
        (135665 'move' i[135663](135661 call _indexOfInterest[135629] 0))
        (480395 'end of statement' i[135663])
        unknown j[135670] "index var" "insert auto destroy"
        (480397 'end of statement')
        (135672 'move' j[135670](135668 call _indexOfInterest[135629] 1))
        (480398 'end of statement' j[135670])
        unknown call_tmp[661876] "expr temp" "maybe param" "maybe type" "temp"
        (661879 'move' call_tmp[661876](135624 call arr[135606] j[135670]))
        (135626 call = call_tmp[661876] i[135663])
        (480400 'end of statement' arr[135606] j[135670] i[135663])
        label _continueLabel[135634]
        _indexOfInterest[135629]
        _iterator[135630]
      }
      label _breakLabel[135635]
    }
    unknown rowSorted[135685] "dead at end of block" "insert auto destroy"
    (542990 'init var' rowSorted[135685] 0)
    (135688 'end of statement' indCount[135584])
    unknown call_tmp[661883] "expr temp" "maybe param" "maybe type" "temp"
    (661886 'move' call_tmp[661883](135690 call _value _mt[243] sd[135528]))
    (135701 call(135693 call (partial) dsiBulkAdd _mt[243] call_tmp[661883]) arr[135606] rowSorted[135685] 1 0)
    (480404 'end of statement' arr[135606] rowSorted[135685])
    label _end_+=[518531]
    (518533 return _void[55])
  }
  where {
    unknown tmp[425929] "maybe param" "temp"
    unknown tmp[425950] "maybe param" "temp"
    (425961 'move' tmp[425950](135540 call isSparseDom sd[135528]))
    unknown call_tmp[661890] "expr temp" "maybe param" "maybe type" "temp"
    (661893 'move' call_tmp[661890](425963 call _cond_invalid tmp[425950]))
    if call_tmp[661890]
    {
      (425966 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566888] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566889] "maybe param" "temp"
    unknown call_tmp[661895] "expr temp" "maybe param" "maybe type" "temp"
    (661898 'move' call_tmp[661895](425951 call isTrue tmp[425950]))
    (566894 'move' tmp[566889](566892 call _cond_test call_tmp[661895]))
    if tmp[566889]
    {
      unknown tmp[566896] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661902] "expr temp" "maybe param" "maybe type" "temp"
      (661905 'move' call_tmp[661902](135542 call rank _mt[243] d[135534]))
      unknown call_tmp[661909] "expr temp" "maybe param" "maybe type" "temp"
      (661912 'move' call_tmp[661909](135546 call rank _mt[243] sd[135528]))
      unknown call_tmp[661914] "expr temp" "maybe param" "maybe type" "temp"
      (661917 'move' call_tmp[661914](135549 call == call_tmp[661902] call_tmp[661909]))
      (566898 'move' tmp[566896](425954 call isTrue call_tmp[661914]))
      (566903 'move' tmp[566888](566900 '_paramFoldLogical' tmp[566889] tmp[566896]))
    }
    {
      (566908 'move' tmp[566888](566905 '_paramFoldLogical' tmp[566889] 0))
    }
    (425940 'move' tmp[425929] tmp[566888])
    unknown call_tmp[661919] "expr temp" "maybe param" "maybe type" "temp"
    (661922 'move' call_tmp[661919](425942 call _cond_invalid tmp[425929]))
    if call_tmp[661919]
    {
      (425945 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566915] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566916] "maybe param" "temp"
    unknown call_tmp[661924] "expr temp" "maybe param" "maybe type" "temp"
    (661927 'move' call_tmp[661924](425930 call isTrue tmp[425929]))
    (566921 'move' tmp[566916](566919 call _cond_test call_tmp[661924]))
    if tmp[566916]
    {
      unknown tmp[566923] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661931] "expr temp" "maybe param" "maybe type" "temp"
      (661934 'move' call_tmp[661931](135554 call idxType _mt[243] sd[135528]))
      unknown call_tmp[661938] "expr temp" "maybe param" "maybe type" "temp"
      (661941 'move' call_tmp[661938](135558 call idxType _mt[243] d[135534]))
      unknown call_tmp[661943] "expr temp" "maybe param" "maybe type" "temp"
      (661946 'move' call_tmp[661943](135561 call == call_tmp[661931] call_tmp[661938]))
      (566925 'move' tmp[566923](425933 call isTrue call_tmp[661943]))
      (566930 'move' tmp[566915](566927 '_paramFoldLogical' tmp[566916] tmp[566923]))
    }
    {
      (566935 'move' tmp[566915](566932 '_paramFoldLogical' tmp[566916] 0))
    }
    (748237 call chpl_statementLevelSymbol tmp[566915])
  }
  function -=[135712](ref arg sd[135709]:_domain[125902](?), arg inds[135721]:_array[133588](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135735] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135736] "expr temp" "temp"
      (135745 'move' _iterator[135736](135743 call _getIterator inds[135721]))
      Defer
      {
        {
          (135761 call _freeIterator _iterator[135736])
        }
      }
      { scopeless type
        (135750 'move' _indexOfInterest[135735](135747 call iteratorIndex _iterator[135736]))
      }
      ForLoop[135737]
      {
        unknown ind[135754] "index var" "insert auto destroy"
        (480408 'end of statement')
        (135756 'move' ind[135754] _indexOfInterest[135735])
        (480409 'end of statement' ind[135754])
        (135732 call -= sd[135709] ind[135754])
        (480411 'end of statement' ind[135754])
        label _continueLabel[135740]
        _indexOfInterest[135735]
        _iterator[135736]
      }
      label _breakLabel[135741]
    }
    (518537 return _void[55])
  }
  where {
    unknown call_tmp[661948] "expr temp" "maybe param" "maybe type" "temp"
    (661951 'move' call_tmp[661948](135727 call isSparseDom sd[135709]))
    unknown call_tmp[661953] "expr temp" "maybe param" "maybe type" "temp"
    (661956 'move' call_tmp[661953](135716 call chpl__buildIndexType sd[135709]))
    unknown call_tmp[661960] "expr temp" "maybe param" "maybe type" "temp"
    (661963 'move' call_tmp[661960](461350 call eltType _mt[243] inds[135721]))
    unknown call_tmp[661965] "expr temp" "maybe param" "maybe type" "temp"
    (661968 'move' call_tmp[661965](461354 call == call_tmp[661953] call_tmp[661960]))
    (461348 call & call_tmp[661948] call_tmp[661965])
  }
  function -=[135778](ref arg sd[135775]:_domain[125902](?), arg d[135781]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135819] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135820] "expr temp" "temp"
      (135829 'move' _iterator[135820](135827 call _getIterator d[135781]))
      Defer
      {
        {
          (135845 call _freeIterator _iterator[135820])
        }
      }
      { scopeless type
        (135834 'move' _indexOfInterest[135819](135831 call iteratorIndex _iterator[135820]))
      }
      ForLoop[135821]
      {
        unknown ind[135838] "index var" "insert auto destroy"
        (480414 'end of statement')
        (135840 'move' ind[135838] _indexOfInterest[135819])
        (480415 'end of statement' ind[135838])
        (135816 call -= sd[135775] ind[135838])
        (480417 'end of statement' ind[135838])
        label _continueLabel[135824]
        _indexOfInterest[135819]
        _iterator[135820]
      }
      label _breakLabel[135825]
    }
    (518539 return _void[55])
  }
  where {
    unknown tmp[425971] "maybe param" "temp"
    unknown tmp[425992] "maybe param" "temp"
    (426003 'move' tmp[425992](135787 call isSparseDom sd[135775]))
    unknown call_tmp[661970] "expr temp" "maybe param" "maybe type" "temp"
    (661973 'move' call_tmp[661970](426005 call _cond_invalid tmp[425992]))
    if call_tmp[661970]
    {
      (426008 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566942] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566943] "maybe param" "temp"
    unknown call_tmp[661975] "expr temp" "maybe param" "maybe type" "temp"
    (661978 'move' call_tmp[661975](425993 call isTrue tmp[425992]))
    (566948 'move' tmp[566943](566946 call _cond_test call_tmp[661975]))
    if tmp[566943]
    {
      unknown tmp[566950] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661982] "expr temp" "maybe param" "maybe type" "temp"
      (661985 'move' call_tmp[661982](135789 call rank _mt[243] d[135781]))
      unknown call_tmp[661989] "expr temp" "maybe param" "maybe type" "temp"
      (661992 'move' call_tmp[661989](135793 call rank _mt[243] sd[135775]))
      unknown call_tmp[661994] "expr temp" "maybe param" "maybe type" "temp"
      (661997 'move' call_tmp[661994](135796 call == call_tmp[661982] call_tmp[661989]))
      (566952 'move' tmp[566950](425996 call isTrue call_tmp[661994]))
      (566957 'move' tmp[566942](566954 '_paramFoldLogical' tmp[566943] tmp[566950]))
    }
    {
      (566962 'move' tmp[566942](566959 '_paramFoldLogical' tmp[566943] 0))
    }
    (425982 'move' tmp[425971] tmp[566942])
    unknown call_tmp[661999] "expr temp" "maybe param" "maybe type" "temp"
    (662002 'move' call_tmp[661999](425984 call _cond_invalid tmp[425971]))
    if call_tmp[661999]
    {
      (425987 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566969] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566970] "maybe param" "temp"
    unknown call_tmp[662004] "expr temp" "maybe param" "maybe type" "temp"
    (662007 'move' call_tmp[662004](425972 call isTrue tmp[425971]))
    (566975 'move' tmp[566970](566973 call _cond_test call_tmp[662004]))
    if tmp[566970]
    {
      unknown tmp[566977] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662011] "expr temp" "maybe param" "maybe type" "temp"
      (662014 'move' call_tmp[662011](135801 call idxType _mt[243] sd[135775]))
      unknown call_tmp[662018] "expr temp" "maybe param" "maybe type" "temp"
      (662021 'move' call_tmp[662018](135805 call idxType _mt[243] d[135781]))
      unknown call_tmp[662023] "expr temp" "maybe param" "maybe type" "temp"
      (662026 'move' call_tmp[662023](135808 call == call_tmp[662011] call_tmp[662018]))
      (566979 'move' tmp[566977](425975 call isTrue call_tmp[662023]))
      (566984 'move' tmp[566969](566981 '_paramFoldLogical' tmp[566970] tmp[566977]))
    }
    {
      (566989 'move' tmp[566969](566986 '_paramFoldLogical' tmp[566970] 0))
    }
    (748239 call chpl_statementLevelSymbol tmp[566969])
  }
  function isCollapsedDimension[135872](arg r[135869]:range[64316](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518543] "RVV" "param" "temp"
    (518548 'move' ret[518543](518547 'deref' 0))
    (518545 return ret[518543])
  }
  function isCollapsedDimension[135884](arg r[135882]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518552] "RVV" "param" "temp"
    (518557 'move' ret[518552](518556 'deref' 1))
    (518554 return ret[518552])
  }
  function chpl__anyStridable[135896](arg ranges[135894]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518561] "RVV" "param" "temp"
    {
      unknown i[135923] "dead at end of block" "insert auto destroy"
      (542992 'init var' i[135923] 0)
      (480421 'end of statement')
      unknown tmp[135924] "maybe param" "temp"
      unknown call_tmp[662030] "expr temp" "maybe param" "maybe type" "temp"
      (662033 'move' call_tmp[662030](135900 call size _mt[243] ranges[135894]))
      unknown call_tmp[662035] "expr temp" "maybe param" "maybe type" "temp"
      (662038 'move' call_tmp[662035](135904 call - call_tmp[662030] 1))
      (135936 'move' tmp[135924](135934 call chpl_compute_low_param_loop_bound 0 call_tmp[662035]))
      unknown tmp[135925] "maybe param" "temp"
      unknown call_tmp[662042] "expr temp" "maybe param" "maybe type" "temp"
      (662045 'move' call_tmp[662042](135943 call size _mt[243] ranges[135894]))
      unknown call_tmp[662047] "expr temp" "maybe param" "maybe type" "temp"
      (662050 'move' call_tmp[662047](135941 call - call_tmp[662042] 1))
      (135949 'move' tmp[135925](135947 call chpl_compute_high_param_loop_bound 0 call_tmp[662047]))
      unknown tmp[135926] "maybe param" "temp"
      (135952 'move' tmp[135926] 1)
      ParamForLoop[135954]
      { i[135923] tmp[135924] tmp[135925] tmp[135926]
        unknown call_tmp[662052] "expr temp" "maybe param" "maybe type" "temp"
        (662055 'move' call_tmp[662052](135911 call ranges[135894] i[135923]))
        unknown call_tmp[662059] "expr temp" "maybe param" "maybe type" "temp"
        (662062 'move' call_tmp[662059](135912 call stridable _mt[243] call_tmp[662052]))
        unknown call_tmp[662064] "expr temp" "maybe param" "maybe type" "temp"
        (662067 'move' call_tmp[662064](135918 call _cond_test call_tmp[662059]))
        if call_tmp[662064]
        {
          (518566 'move' ret[518561](518565 'deref' 1))
          gotoReturn _end_chpl__anyStridable[518559] _end_chpl__anyStridable[518559]
        }
      }
      label _unused_continueLabel[135928]
      label _breakLabel[135927]
    }
    (518571 'move' ret[518561](518570 'deref' 0))
    label _end_chpl__anyStridable[518559]
    (518563 return ret[518561])
  }
  function chpl__anyRankChangeStridable[135973](arg args[135971]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518575] "RVV" "param" "temp"
    {
      unknown i[136012] "dead at end of block" "insert auto destroy"
      (542994 'init var' i[136012] 0)
      (480424 'end of statement')
      unknown tmp[136013] "maybe param" "temp"
      unknown call_tmp[662071] "expr temp" "maybe param" "maybe type" "temp"
      (662074 'move' call_tmp[662071](135977 call size _mt[243] args[135971]))
      unknown call_tmp[662076] "expr temp" "maybe param" "maybe type" "temp"
      (662079 'move' call_tmp[662076](135981 call - call_tmp[662071] 1))
      (136025 'move' tmp[136013](136023 call chpl_compute_low_param_loop_bound 0 call_tmp[662076]))
      unknown tmp[136014] "maybe param" "temp"
      unknown call_tmp[662083] "expr temp" "maybe param" "maybe type" "temp"
      (662086 'move' call_tmp[662083](136032 call size _mt[243] args[135971]))
      unknown call_tmp[662088] "expr temp" "maybe param" "maybe type" "temp"
      (662091 'move' call_tmp[662088](136030 call - call_tmp[662083] 1))
      (136038 'move' tmp[136014](136036 call chpl_compute_high_param_loop_bound 0 call_tmp[662088]))
      unknown tmp[136015] "maybe param" "temp"
      (136041 'move' tmp[136015] 1)
      ParamForLoop[136043]
      { i[136012] tmp[136013] tmp[136014] tmp[136015]
        unknown call_tmp[662093] "expr temp" "maybe param" "maybe type" "temp"
        (662096 'move' call_tmp[662093](135989 call args[135971] i[136012]))
        unknown call_tmp[662098] "expr temp" "maybe param" "maybe type" "temp"
        (662101 'move' call_tmp[662098](135991 call isRangeValue call_tmp[662093]))
        unknown call_tmp[662103] "expr temp" "maybe param" "maybe type" "temp"
        (662106 'move' call_tmp[662103](136007 call _cond_test call_tmp[662098]))
        if call_tmp[662103]
        {
          unknown call_tmp[662108] "expr temp" "maybe param" "maybe type" "temp"
          (662111 'move' call_tmp[662108](135995 call args[135971] i[136012]))
          unknown call_tmp[662115] "expr temp" "maybe param" "maybe type" "temp"
          (662118 'move' call_tmp[662115](135996 call stridable _mt[243] call_tmp[662108]))
          unknown call_tmp[662120] "expr temp" "maybe param" "maybe type" "temp"
          (662123 'move' call_tmp[662120](136002 call _cond_test call_tmp[662115]))
          if call_tmp[662120]
          {
            (518580 'move' ret[518575](518579 'deref' 1))
            gotoReturn _end_chpl__anyRankChangeStridable[518573] _end_chpl__anyRankChangeStridable[518573]
          }
        }
      }
      label _unused_continueLabel[136017]
      label _breakLabel[136016]
    }
    (518585 'move' ret[518575](518584 'deref' 0))
    label _end_chpl__anyRankChangeStridable[518573]
    (518577 return ret[518575])
  }
  function chpl__countRanges[136062](arg arg[136060]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518589] "RVV" "param" "temp"
    unknown call_tmp[662125] "expr temp" "maybe param" "maybe type" "temp"
    (662128 'move' call_tmp[662125](136067 call isRangeValue arg[136060]))
    unknown call_tmp[662130] "expr temp" "maybe param" "maybe type" "temp"
    (662133 'move' call_tmp[662130](136069 call _cast int(64)[13] call_tmp[662125]))
    (518594 'move' ret[518589](518593 'deref' call_tmp[662130]))
    (518591 return ret[518589])
  }
  function chpl__countRanges[136080](arg arg[136078]:_any[178](?), arg args[136083]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[518598] "RVV" "param" "temp"
    unknown call_tmp[662135] "expr temp" "maybe param" "maybe type" "temp"
    (662138 'move' call_tmp[662135](136089 call chpl__countRanges arg[136078]))
    unknown call_tmp[662140] "expr temp" "maybe param" "maybe type" "temp"
    (662143 'move' call_tmp[662140](136094 call chpl__countRanges(136092 'expand_tuple' args[136083])))
    unknown call_tmp[662145] "expr temp" "maybe param" "maybe type" "temp"
    (662148 'move' call_tmp[662145](136095 call + call_tmp[662135] call_tmp[662140]))
    (518603 'move' ret[518598](518602 'deref' call_tmp[662145]))
    (518600 return ret[518598])
  }
  function _validRankChangeArgs[136106](arg args[136104]:_any[178](?), arg idxType[136108]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518676] "RVV" "param" "temp"
    function _validRankChangeArg[136114](arg idxType[136112]:_any[178](?), arg r[136120]:range[64316](?)) param : _unknown[51]
    {
      unknown ret[518607] "RVV" "param" "temp"
      (518612 'move' ret[518607](518611 'deref' 1))
      (518609 return ret[518607])
    }
    function _validRankChangeArg[136134](arg idxType[136132]:_any[178](?), arg i[136137] :
    idxType[136132]) param : _unknown[51]
    {
      unknown ret[518616] "RVV" "param" "temp"
      (518621 'move' ret[518616](518620 'deref' 1))
      (518618 return ret[518616])
    }
    function _validRankChangeArg[136150](arg idxType[136148]:_any[178](?), arg x[136152]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518625] "RVV" "param" "temp"
      (518630 'move' ret[518625](518629 'deref' 0))
      (518627 return ret[518625])
    }
    function allValid[136162]() param : _unknown[51]
    {
      unknown ret[518634] "RVV" "param" "temp"
      {
        unknown dim[136193] "dead at end of block" "insert auto destroy"
        (542996 'init var' dim[136193] 0)
        (480432 'end of statement')
        unknown tmp[136194] "maybe param" "temp"
        unknown call_tmp[662152] "expr temp" "maybe param" "maybe type" "temp"
        (662155 'move' call_tmp[662152](136166 call size _mt[243] args[136104]))
        unknown call_tmp[662157] "expr temp" "maybe param" "maybe type" "temp"
        (662160 'move' call_tmp[662157](136170 call - call_tmp[662152] 1))
        (136206 'move' tmp[136194](136204 call chpl_compute_low_param_loop_bound 0 call_tmp[662157]))
        unknown tmp[136195] "maybe param" "temp"
        unknown call_tmp[662164] "expr temp" "maybe param" "maybe type" "temp"
        (662167 'move' call_tmp[662164](136213 call size _mt[243] args[136104]))
        unknown call_tmp[662169] "expr temp" "maybe param" "maybe type" "temp"
        (662172 'move' call_tmp[662169](136211 call - call_tmp[662164] 1))
        (136219 'move' tmp[136195](136217 call chpl_compute_high_param_loop_bound 0 call_tmp[662169]))
        unknown tmp[136196] "maybe param" "temp"
        (136222 'move' tmp[136196] 1)
        ParamForLoop[136224]
        { dim[136193] tmp[136194] tmp[136195] tmp[136196]
          {
            unknown call_tmp[662174] "expr temp" "maybe param" "maybe type" "temp"
            (662177 'move' call_tmp[662174](136180 call args[136104] dim[136193]))
            unknown call_tmp[662179] "expr temp" "maybe param" "maybe type" "temp"
            (662182 'move' call_tmp[662179](136181 call _validRankChangeArg idxType[136108] call_tmp[662174]))
            unknown call_tmp[662184] "expr temp" "maybe param" "maybe type" "temp"
            (662187 'move' call_tmp[662184](136182 call ! call_tmp[662179]))
            unknown call_tmp[662189] "expr temp" "maybe param" "maybe type" "temp"
            (662192 'move' call_tmp[662189](136187 call _cond_test call_tmp[662184]))
            if call_tmp[662189]
            {
              (518639 'move' ret[518634](518638 'deref' 0))
              gotoReturn _end_allValid[518632] _end_allValid[518632]
            }
          }
        }
        label _unused_continueLabel[136198]
        label _breakLabel[136197]
      }
      (518644 'move' ret[518634](518643 'deref' 1))
      label _end_allValid[518632]
      (518636 return ret[518634])
    }
    function oneRange[136241]() param : _unknown[51]
    {
      unknown ret[518648] "RVV" "param" "temp"
      {
        unknown dim[136269] "dead at end of block" "insert auto destroy"
        (542998 'init var' dim[136269] 0)
        (480435 'end of statement')
        unknown tmp[136270] "maybe param" "temp"
        unknown call_tmp[662196] "expr temp" "maybe param" "maybe type" "temp"
        (662199 'move' call_tmp[662196](136245 call size _mt[243] args[136104]))
        unknown call_tmp[662201] "expr temp" "maybe param" "maybe type" "temp"
        (662204 'move' call_tmp[662201](136249 call - call_tmp[662196] 1))
        (136282 'move' tmp[136270](136280 call chpl_compute_low_param_loop_bound 0 call_tmp[662201]))
        unknown tmp[136271] "maybe param" "temp"
        unknown call_tmp[662208] "expr temp" "maybe param" "maybe type" "temp"
        (662211 'move' call_tmp[662208](136289 call size _mt[243] args[136104]))
        unknown call_tmp[662213] "expr temp" "maybe param" "maybe type" "temp"
        (662216 'move' call_tmp[662213](136287 call - call_tmp[662208] 1))
        (136295 'move' tmp[136271](136293 call chpl_compute_high_param_loop_bound 0 call_tmp[662213]))
        unknown tmp[136272] "maybe param" "temp"
        (136298 'move' tmp[136272] 1)
        ParamForLoop[136300]
        { dim[136269] tmp[136270] tmp[136271] tmp[136272]
          {
            unknown call_tmp[662218] "expr temp" "maybe param" "maybe type" "temp"
            (662221 'move' call_tmp[662218](136257 call args[136104] dim[136269]))
            unknown call_tmp[662223] "expr temp" "maybe param" "maybe type" "temp"
            (662226 'move' call_tmp[662223](136259 call isRange call_tmp[662218]))
            unknown call_tmp[662228] "expr temp" "maybe param" "maybe type" "temp"
            (662231 'move' call_tmp[662228](136263 call _cond_test call_tmp[662223]))
            if call_tmp[662228]
            {
              (518653 'move' ret[518648](518652 'deref' 1))
              gotoReturn _end_oneRange[518646] _end_oneRange[518646]
            }
          }
        }
        label _unused_continueLabel[136274]
        label _breakLabel[136273]
      }
      (518658 'move' ret[518648](518657 'deref' 0))
      label _end_oneRange[518646]
      (518650 return ret[518648])
    }
    function oneNonRange[136317]() param : _unknown[51]
    {
      unknown ret[518662] "RVV" "param" "temp"
      {
        unknown dim[136347] "dead at end of block" "insert auto destroy"
        (543000 'init var' dim[136347] 0)
        (480438 'end of statement')
        unknown tmp[136348] "maybe param" "temp"
        unknown call_tmp[662235] "expr temp" "maybe param" "maybe type" "temp"
        (662238 'move' call_tmp[662235](136321 call size _mt[243] args[136104]))
        unknown call_tmp[662240] "expr temp" "maybe param" "maybe type" "temp"
        (662243 'move' call_tmp[662240](136325 call - call_tmp[662235] 1))
        (136360 'move' tmp[136348](136358 call chpl_compute_low_param_loop_bound 0 call_tmp[662240]))
        unknown tmp[136349] "maybe param" "temp"
        unknown call_tmp[662247] "expr temp" "maybe param" "maybe type" "temp"
        (662250 'move' call_tmp[662247](136367 call size _mt[243] args[136104]))
        unknown call_tmp[662252] "expr temp" "maybe param" "maybe type" "temp"
        (662255 'move' call_tmp[662252](136365 call - call_tmp[662247] 1))
        (136373 'move' tmp[136349](136371 call chpl_compute_high_param_loop_bound 0 call_tmp[662252]))
        unknown tmp[136350] "maybe param" "temp"
        (136376 'move' tmp[136350] 1)
        ParamForLoop[136378]
        { dim[136347] tmp[136348] tmp[136349] tmp[136350]
          {
            unknown call_tmp[662257] "expr temp" "maybe param" "maybe type" "temp"
            (662260 'move' call_tmp[662257](136333 call args[136104] dim[136347]))
            unknown call_tmp[662262] "expr temp" "maybe param" "maybe type" "temp"
            (662265 'move' call_tmp[662262](136335 call isRange call_tmp[662257]))
            unknown call_tmp[662267] "expr temp" "maybe param" "maybe type" "temp"
            (662270 'move' call_tmp[662267](136336 call ! call_tmp[662262]))
            unknown call_tmp[662272] "expr temp" "maybe param" "maybe type" "temp"
            (662275 'move' call_tmp[662272](136341 call _cond_test call_tmp[662267]))
            if call_tmp[662272]
            {
              (518667 'move' ret[518662](518666 'deref' 1))
              gotoReturn _end_oneNonRange[518660] _end_oneNonRange[518660]
            }
          }
        }
        label _unused_continueLabel[136352]
        label _breakLabel[136351]
      }
      (518672 'move' ret[518662](518671 'deref' 0))
      label _end_oneNonRange[518660]
      (518664 return ret[518662])
    }
    unknown tmp[426013] "maybe param" "temp"
    unknown tmp[426034] "maybe param" "temp"
    (426045 'move' tmp[426034](136395 call allValid))
    unknown call_tmp[662277] "expr temp" "maybe param" "maybe type" "temp"
    (662280 'move' call_tmp[662277](426047 call _cond_invalid tmp[426034]))
    if call_tmp[662277]
    {
      (426050 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566996] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566997] "maybe param" "temp"
    unknown call_tmp[662282] "expr temp" "maybe param" "maybe type" "temp"
    (662285 'move' call_tmp[662282](426035 call isTrue tmp[426034]))
    (567002 'move' tmp[566997](567000 call _cond_test call_tmp[662282]))
    if tmp[566997]
    {
      unknown tmp[567004] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662287] "expr temp" "maybe param" "maybe type" "temp"
      (662290 'move' call_tmp[662287](136398 call oneRange))
      (567006 'move' tmp[567004](426038 call isTrue call_tmp[662287]))
      (567011 'move' tmp[566996](567008 '_paramFoldLogical' tmp[566997] tmp[567004]))
    }
    {
      (567016 'move' tmp[566996](567013 '_paramFoldLogical' tmp[566997] 0))
    }
    (426024 'move' tmp[426013] tmp[566996])
    unknown call_tmp[662292] "expr temp" "maybe param" "maybe type" "temp"
    (662295 'move' call_tmp[662292](426026 call _cond_invalid tmp[426013]))
    if call_tmp[662292]
    {
      (426029 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567023] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567024] "maybe param" "temp"
    unknown call_tmp[662297] "expr temp" "maybe param" "maybe type" "temp"
    (662300 'move' call_tmp[662297](426014 call isTrue tmp[426013]))
    (567029 'move' tmp[567024](567027 call _cond_test call_tmp[662297]))
    if tmp[567024]
    {
      unknown tmp[567031] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662302] "expr temp" "maybe param" "maybe type" "temp"
      (662305 'move' call_tmp[662302](136403 call oneNonRange))
      (567033 'move' tmp[567031](426017 call isTrue call_tmp[662302]))
      (567038 'move' tmp[567023](567035 '_paramFoldLogical' tmp[567024] tmp[567031]))
    }
    {
      (567043 'move' tmp[567023](567040 '_paramFoldLogical' tmp[567024] 0))
    }
    (518681 'move' ret[518676](518680 'deref' tmp[567023]))
    (518678 return ret[518676])
  }
  function =[136416](ref arg a[136413]:_distribution[118967](?), arg b[136419]:_distribution[118967](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662309] "expr temp" "maybe param" "maybe type" "temp"
    (662312 'move' call_tmp[662309](136423 call _value _mt[243] a[136413]))
    unknown call_tmp[662314] "expr temp" "maybe param" "maybe type" "temp"
    (662317 'move' call_tmp[662314](136427 call == call_tmp[662309] nil[44]))
    unknown call_tmp[662319] "expr temp" "maybe param" "maybe type" "temp"
    (662322 'move' call_tmp[662319](136576 call _cond_test call_tmp[662314]))
    if call_tmp[662319]
    {
      unknown call_tmp[662326] "expr temp" "maybe param" "maybe type" "temp"
      (662329 'move' call_tmp[662326](136438 call(136434 call (partial) clone _mt[243] b[136419])))
      (136441 'move' a[136413](136440 call chpl__autoCopy call_tmp[662326]))
    }
    {
      unknown call_tmp[662333] "expr temp" "maybe param" "maybe type" "temp"
      (662336 'move' call_tmp[662333](136445 call _value _mt[243] a[136413]))
      unknown call_tmp[662340] "expr temp" "maybe param" "maybe type" "temp"
      (662343 'move' call_tmp[662340](136450 call _doms _mt[243] call_tmp[662333]))
      unknown call_tmp[662347] "expr temp" "maybe param" "maybe type" "temp"
      (662350 'move' call_tmp[662347](136453 call size _mt[243] call_tmp[662340]))
      unknown call_tmp[662352] "expr temp" "maybe param" "maybe type" "temp"
      (662355 'move' call_tmp[662352](136457 call == call_tmp[662347] 0))
      unknown call_tmp[662357] "expr temp" "maybe param" "maybe type" "temp"
      (662360 'move' call_tmp[662357](136572 call _cond_test call_tmp[662352]))
      if call_tmp[662357]
      {
        { scopeless type
          unknown call_type_tmp[492170] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662364] "expr temp" "maybe param" "maybe type" "temp"
          (662367 'move' call_tmp[662364](136460 call _value _mt[243] a[136413]))
          (492174 'move' call_type_tmp[492170](136463 'typeof' call_tmp[662364]))
        }
        { scopeless type
          unknown call_type_tmp[492176] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662371] "expr temp" "maybe param" "maybe type" "temp"
          (662374 'move' call_tmp[662371](136465 call _value _mt[243] b[136419]))
          (492180 'move' call_type_tmp[492176](136468 'typeof' call_tmp[662371]))
        }
        unknown call_tmp[662376] "expr temp" "maybe param" "maybe type" "temp"
        (662379 'move' call_tmp[662376](136469 call != call_type_tmp[492170] call_type_tmp[492176]))
        unknown call_tmp[662381] "expr temp" "maybe param" "maybe type" "temp"
        (662384 'move' call_tmp[662381](136492 call _cond_test call_tmp[662376]))
        if call_tmp[662381]
        {
          (136490 call compilerError "type mismatch in distribution assignment")
        }
        unknown call_tmp[662388] "expr temp" "maybe param" "maybe type" "temp"
        (662391 'move' call_tmp[662388](136499 call _value _mt[243] a[136413]))
        unknown call_tmp[662395] "expr temp" "maybe param" "maybe type" "temp"
        (662398 'move' call_tmp[662395](136503 call _value _mt[243] b[136419]))
        unknown call_tmp[662400] "expr temp" "maybe param" "maybe type" "temp"
        (662403 'move' call_tmp[662400](136506 call == call_tmp[662388] call_tmp[662395]))
        unknown call_tmp[662405] "expr temp" "maybe param" "maybe type" "temp"
        (662408 'move' call_tmp[662405](136525 call _cond_test call_tmp[662400]))
        if call_tmp[662405]
        {
        }
        {
          unknown call_tmp[662412] "expr temp" "maybe param" "maybe type" "temp"
          (662415 'move' call_tmp[662412](136510 call _value _mt[243] a[136413]))
          unknown call_tmp[662421] "expr temp" "maybe param" "maybe type" "temp"
          (662424 'move' call_tmp[662421](136519 call _value _mt[243] b[136419]))
          (136523 call(136515 call (partial) dsiAssign _mt[243] call_tmp[662412]) call_tmp[662421])
        }
        unknown call_tmp[662428] "expr temp" "maybe param" "maybe type" "temp"
        (662431 'move' call_tmp[662428](136532 call _instance _mt[243] a[136413]))
        unknown call_tmp[662433] "expr temp" "maybe param" "maybe type" "temp"
        (662436 'move' call_tmp[662433](136536 call _isPrivatized call_tmp[662428]))
        unknown call_tmp[662438] "expr temp" "maybe param" "maybe type" "temp"
        (662441 'move' call_tmp[662438](136545 call _cond_test call_tmp[662433]))
        if call_tmp[662438]
        {
          unknown call_tmp[662445] "expr temp" "maybe param" "maybe type" "temp"
          (662448 'move' call_tmp[662445](136539 call _value _mt[243] a[136413]))
          (136543 call _reprivatize call_tmp[662445])
        }
      }
      {
        (136569 call halt "assignment to distributions with declared domains is not yet supported")
      }
    }
    (518683 return _void[55])
  }
  function =[136590](ref arg a[136587]:_domain[125902](?), arg b[136593]:_domain[125902](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662452] "expr temp" "maybe param" "maybe type" "temp"
    (662455 'move' call_tmp[662452](136597 call rank _mt[243] a[136587]))
    unknown call_tmp[662459] "expr temp" "maybe param" "maybe type" "temp"
    (662462 'move' call_tmp[662459](136601 call rank _mt[243] b[136593]))
    unknown call_tmp[662464] "expr temp" "maybe param" "maybe type" "temp"
    (662467 'move' call_tmp[662464](136604 call != call_tmp[662452] call_tmp[662459]))
    unknown call_tmp[662469] "expr temp" "maybe param" "maybe type" "temp"
    (662472 'move' call_tmp[662469](136627 call _cond_test call_tmp[662464]))
    if call_tmp[662469]
    {
      (136625 call compilerError "rank mismatch in domain assignment")
    }
    unknown call_tmp[662476] "expr temp" "maybe param" "maybe type" "temp"
    (662479 'move' call_tmp[662476](136634 call idxType _mt[243] a[136587]))
    unknown call_tmp[662483] "expr temp" "maybe param" "maybe type" "temp"
    (662486 'move' call_tmp[662483](136638 call idxType _mt[243] b[136593]))
    unknown call_tmp[662488] "expr temp" "maybe param" "maybe type" "temp"
    (662491 'move' call_tmp[662488](136641 call != call_tmp[662476] call_tmp[662483]))
    unknown call_tmp[662493] "expr temp" "maybe param" "maybe type" "temp"
    (662496 'move' call_tmp[662493](136664 call _cond_test call_tmp[662488]))
    if call_tmp[662493]
    {
      (136662 call compilerError "index type mismatch in domain assignment")
    }
    unknown tmp[426076] "maybe param" "temp"
    (426087 'move' tmp[426076](136672 call isRectangularDom a[136587]))
    unknown call_tmp[662498] "expr temp" "maybe param" "maybe type" "temp"
    (662501 'move' call_tmp[662498](426089 call _cond_invalid tmp[426076]))
    if call_tmp[662498]
    {
      (426092 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567050] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567051] "maybe param" "temp"
    unknown call_tmp[662503] "expr temp" "maybe param" "maybe type" "temp"
    (662506 'move' call_tmp[662503](426077 call isTrue tmp[426076]))
    (567056 'move' tmp[567051](567054 call _cond_test call_tmp[662503]))
    if tmp[567051]
    {
      unknown tmp[567058] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662508] "expr temp" "maybe param" "maybe type" "temp"
      (662511 'move' call_tmp[662508](136676 call isRectangularDom b[136593]))
      (567060 'move' tmp[567058](426080 call isTrue call_tmp[662508]))
      (567065 'move' tmp[567050](567062 '_paramFoldLogical' tmp[567051] tmp[567058]))
    }
    {
      (567070 'move' tmp[567050](567067 '_paramFoldLogical' tmp[567051] 0))
    }
    unknown call_tmp[662513] "expr temp" "maybe param" "maybe type" "temp"
    (662516 'move' call_tmp[662513](136719 call _cond_test tmp[567050]))
    if call_tmp[662513]
    {
      unknown tmp[426055] "maybe param" "temp"
      unknown call_tmp[662520] "expr temp" "maybe param" "maybe type" "temp"
      (662523 'move' call_tmp[662520](136680 call stridable _mt[243] a[136587]))
      (426066 'move' tmp[426055](136683 call ! call_tmp[662520]))
      unknown call_tmp[662525] "expr temp" "maybe param" "maybe type" "temp"
      (662528 'move' call_tmp[662525](426068 call _cond_invalid tmp[426055]))
      if call_tmp[662525]
      {
        (426071 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567077] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567078] "maybe param" "temp"
      unknown call_tmp[662530] "expr temp" "maybe param" "maybe type" "temp"
      (662533 'move' call_tmp[662530](426056 call isTrue tmp[426055]))
      (567083 'move' tmp[567078](567081 call _cond_test call_tmp[662530]))
      if tmp[567078]
      {
        unknown tmp[567085] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[662537] "expr temp" "maybe param" "maybe type" "temp"
        (662540 'move' call_tmp[662537](136686 call stridable _mt[243] b[136593]))
        (567087 'move' tmp[567085](426059 call isTrue call_tmp[662537]))
        (567092 'move' tmp[567077](567089 '_paramFoldLogical' tmp[567078] tmp[567085]))
      }
      {
        (567097 'move' tmp[567077](567094 '_paramFoldLogical' tmp[567078] 0))
      }
      unknown call_tmp[662542] "expr temp" "maybe param" "maybe type" "temp"
      (662545 'move' call_tmp[662542](136714 call _cond_test tmp[567077]))
      if call_tmp[662542]
      {
        (136712 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
      }
    }
    unknown call_tmp[662549] "expr temp" "maybe param" "maybe type" "temp"
    (662552 'move' call_tmp[662549](136725 call _instance _mt[243] a[136587]))
    (136735 call(136728 call (partial) dsiAssignDomain _mt[243] call_tmp[662549]) b[136593](lhsPrivate = 0))
    (480454 'end of statement')
    unknown call_tmp[662558] "expr temp" "maybe param" "maybe type" "temp"
    (662561 'move' call_tmp[662558](136739 call _instance _mt[243] a[136587]))
    unknown call_tmp[662563] "expr temp" "maybe param" "maybe type" "temp"
    (662566 'move' call_tmp[662563](136743 call _isPrivatized call_tmp[662558]))
    unknown call_tmp[662568] "expr temp" "maybe param" "maybe type" "temp"
    (662571 'move' call_tmp[662568](136753 call _cond_test call_tmp[662563]))
    if call_tmp[662568]
    {
      unknown call_tmp[662575] "expr temp" "maybe param" "maybe type" "temp"
      (662578 'move' call_tmp[662575](136746 call _instance _mt[243] a[136587]))
      (136750 call _reprivatize call_tmp[662575])
    }
    (518685 return _void[55])
  }
  function chpl__isLegalRectTupDomAssign[136763](arg d[136761]:_any[178](?), arg t[136765]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518725] "RVV" "param" "temp"
    function isRangeTuple[136771](arg a[136769]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518707] "RVV" "param" "temp"
      function peelArgs[136777](arg first[136775]:_any[178](?), arg rest[136780]:_any[178](?) ...) param : _unknown[51]
      {
        unknown ret[518689] "RVV" "param" "temp"
        unknown tmp[567158] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567159] "maybe param" "temp"
        unknown call_tmp[662582] "expr temp" "maybe param" "maybe type" "temp"
        (662585 'move' call_tmp[662582](136784 call size _mt[243] rest[136780]))
        unknown call_tmp[662587] "expr temp" "maybe param" "maybe type" "temp"
        (662590 'move' call_tmp[662587](136788 call > call_tmp[662582] 1))
        (567164 'move' tmp[567159](567162 call _cond_test call_tmp[662587]))
        if tmp[567159]
        {
          unknown tmp[426097] "maybe param" "temp"
          (426108 'move' tmp[426097](136793 call isRange first[136775]))
          unknown call_tmp[662592] "expr temp" "maybe param" "maybe type" "temp"
          (662595 'move' call_tmp[662592](426110 call _cond_invalid tmp[426097]))
          if call_tmp[662592]
          {
            (426113 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567104] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567105] "maybe param" "temp"
          unknown call_tmp[662597] "expr temp" "maybe param" "maybe type" "temp"
          (662600 'move' call_tmp[662597](426098 call isTrue tmp[426097]))
          (567110 'move' tmp[567105](567108 call _cond_test call_tmp[662597]))
          if tmp[567105]
          {
            unknown tmp[567112] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662602] "expr temp" "maybe param" "maybe type" "temp"
            (662605 'move' call_tmp[662602](136798 call peelArgs(136796 'expand_tuple' rest[136780])))
            (567114 'move' tmp[567112](426101 call isTrue call_tmp[662602]))
            (567119 'move' tmp[567104](567116 '_paramFoldLogical' tmp[567105] tmp[567112]))
          }
          {
            (567124 'move' tmp[567104](567121 '_paramFoldLogical' tmp[567105] 0))
          }
          (567169 'move' tmp[567158](567166 '_paramFoldLogical' tmp[567159] tmp[567104]))
        }
        {
          unknown tmp[426118] "maybe param" "temp"
          (426129 'move' tmp[426118](136804 call isRange first[136775]))
          unknown call_tmp[662607] "expr temp" "maybe param" "maybe type" "temp"
          (662610 'move' call_tmp[662607](426131 call _cond_invalid tmp[426118]))
          if call_tmp[662607]
          {
            (426134 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567131] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567132] "maybe param" "temp"
          unknown call_tmp[662612] "expr temp" "maybe param" "maybe type" "temp"
          (662615 'move' call_tmp[662612](426119 call isTrue tmp[426118]))
          (567137 'move' tmp[567132](567135 call _cond_test call_tmp[662612]))
          if tmp[567132]
          {
            unknown tmp[567139] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662617] "expr temp" "maybe param" "maybe type" "temp"
            (662620 'move' call_tmp[662617](136809 call rest[136780] 0))
            unknown call_tmp[662622] "expr temp" "maybe param" "maybe type" "temp"
            (662625 'move' call_tmp[662622](136811 call isRange call_tmp[662617]))
            (567141 'move' tmp[567139](426122 call isTrue call_tmp[662622]))
            (567146 'move' tmp[567131](567143 '_paramFoldLogical' tmp[567132] tmp[567139]))
          }
          {
            (567151 'move' tmp[567131](567148 '_paramFoldLogical' tmp[567132] 0))
          }
          (567174 'move' tmp[567158](567171 '_paramFoldLogical' tmp[567159] tmp[567131]))
        }
        (518694 'move' ret[518689](518693 'deref' tmp[567158]))
        (518691 return ret[518689])
      }
      function peelArgs[136827](arg first[136825]:_any[178](?)) param : _unknown[51]
      {
        unknown ret[518698] "RVV" "param" "temp"
        unknown call_tmp[662627] "expr temp" "maybe param" "maybe type" "temp"
        (662630 'move' call_tmp[662627](136832 call isRange first[136825]))
        (518703 'move' ret[518698](518702 'deref' call_tmp[662627]))
        (518700 return ret[518698])
      }
      unknown tmp[567181] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567182] "maybe param" "temp"
      unknown call_tmp[662632] "expr temp" "maybe param" "maybe type" "temp"
      (662635 'move' call_tmp[662632](136841 call isTuple a[136769]))
      unknown call_tmp[662637] "expr temp" "maybe param" "maybe type" "temp"
      (662640 'move' call_tmp[662637](136842 call ! call_tmp[662632]))
      (567187 'move' tmp[567182](567185 call _cond_test call_tmp[662637]))
      if tmp[567182]
      {
        (567192 'move' tmp[567181](567189 '_paramFoldLogical' tmp[567182] 0))
      }
      {
        unknown tmp[567194] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (567196 'move' tmp[567194](136849 call peelArgs(136847 'expand_tuple' a[136769])))
        (567201 'move' tmp[567181](567198 '_paramFoldLogical' tmp[567182] tmp[567194]))
      }
      (518712 'move' ret[518707](518711 'deref' tmp[567181]))
      (518709 return ret[518707])
    }
    function strideSafe[136862](arg d[136860]:_any[178](?), arg rt[136864]:_any[178](?), param arg dim[136868]:int(64)[13] =
    0) param : _unknown[51]
    {
      unknown ret[518716] "RVV" "param" "temp"
      unknown tmp[567289] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567290] "maybe param" "temp"
      unknown call_tmp[662644] "expr temp" "maybe param" "maybe type" "temp"
      (662647 'move' call_tmp[662644](136874 call rank _mt[243] d[136860]))
      unknown call_tmp[662649] "expr temp" "maybe param" "maybe type" "temp"
      (662652 'move' call_tmp[662649](136878 call - call_tmp[662644] 1))
      unknown call_tmp[662654] "expr temp" "maybe param" "maybe type" "temp"
      (662657 'move' call_tmp[662654](136880 call == dim[136868] call_tmp[662649]))
      (567295 'move' tmp[567290](567293 call _cond_test call_tmp[662654]))
      if tmp[567290]
      {
        unknown tmp[426139] "maybe param" "temp"
        unknown call_tmp[662661] "expr temp" "maybe param" "maybe type" "temp"
        (662664 'move' call_tmp[662661](136888 call(136883 call (partial) dim _mt[243] d[136860]) dim[136868]))
        (426150 'move' tmp[426139](136889 call stridable _mt[243] call_tmp[662661]))
        unknown call_tmp[662668] "expr temp" "maybe param" "maybe type" "temp"
        (662671 'move' call_tmp[662668](426152 call _cond_invalid tmp[426139]))
        if call_tmp[662668]
        {
          (426155 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567208] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567209] "maybe param" "temp"
        unknown call_tmp[662673] "expr temp" "maybe param" "maybe type" "temp"
        (662676 'move' call_tmp[662673](426140 call isTrue tmp[426139]))
        (567214 'move' tmp[567209](567212 call _cond_test call_tmp[662673]))
        if tmp[567209]
        {
          (567219 'move' tmp[567208](567216 '_paramFoldLogical' tmp[567209] 1))
        }
        {
          unknown tmp[567221] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662678] "expr temp" "maybe param" "maybe type" "temp"
          (662681 'move' call_tmp[662678](136895 call rt[136864] dim[136868]))
          unknown call_tmp[662685] "expr temp" "maybe param" "maybe type" "temp"
          (662688 'move' call_tmp[662685](136896 call stridable _mt[243] call_tmp[662678]))
          unknown call_tmp[662690] "expr temp" "maybe param" "maybe type" "temp"
          (662693 'move' call_tmp[662690](136899 call ! call_tmp[662685]))
          (567223 'move' tmp[567221](426144 call isTrue call_tmp[662690]))
          (567228 'move' tmp[567208](567225 '_paramFoldLogical' tmp[567209] tmp[567221]))
        }
        (567300 'move' tmp[567289](567297 '_paramFoldLogical' tmp[567290] tmp[567208]))
      }
      {
        unknown tmp[426160] "maybe param" "temp"
        unknown tmp[426181] "maybe param" "temp"
        unknown call_tmp[662697] "expr temp" "maybe param" "maybe type" "temp"
        (662700 'move' call_tmp[662697](136909 call(136904 call (partial) dim _mt[243] d[136860]) dim[136868]))
        (426192 'move' tmp[426181](136910 call stridable _mt[243] call_tmp[662697]))
        unknown call_tmp[662704] "expr temp" "maybe param" "maybe type" "temp"
        (662707 'move' call_tmp[662704](426194 call _cond_invalid tmp[426181]))
        if call_tmp[662704]
        {
          (426197 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567235] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567236] "maybe param" "temp"
        unknown call_tmp[662709] "expr temp" "maybe param" "maybe type" "temp"
        (662712 'move' call_tmp[662709](426182 call isTrue tmp[426181]))
        (567241 'move' tmp[567236](567239 call _cond_test call_tmp[662709]))
        if tmp[567236]
        {
          (567246 'move' tmp[567235](567243 '_paramFoldLogical' tmp[567236] 1))
        }
        {
          unknown tmp[567248] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662714] "expr temp" "maybe param" "maybe type" "temp"
          (662717 'move' call_tmp[662714](136916 call rt[136864] dim[136868]))
          unknown call_tmp[662721] "expr temp" "maybe param" "maybe type" "temp"
          (662724 'move' call_tmp[662721](136917 call stridable _mt[243] call_tmp[662714]))
          unknown call_tmp[662726] "expr temp" "maybe param" "maybe type" "temp"
          (662729 'move' call_tmp[662726](136920 call ! call_tmp[662721]))
          (567250 'move' tmp[567248](426186 call isTrue call_tmp[662726]))
          (567255 'move' tmp[567235](567252 '_paramFoldLogical' tmp[567236] tmp[567248]))
        }
        (426171 'move' tmp[426160] tmp[567235])
        unknown call_tmp[662731] "expr temp" "maybe param" "maybe type" "temp"
        (662734 'move' call_tmp[662731](426173 call _cond_invalid tmp[426160]))
        if call_tmp[662731]
        {
          (426176 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567262] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567263] "maybe param" "temp"
        unknown call_tmp[662736] "expr temp" "maybe param" "maybe type" "temp"
        (662739 'move' call_tmp[662736](426161 call isTrue tmp[426160]))
        (567268 'move' tmp[567263](567266 call _cond_test call_tmp[662736]))
        if tmp[567263]
        {
          unknown tmp[567270] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662741] "expr temp" "maybe param" "maybe type" "temp"
          (662744 'move' call_tmp[662741](136930 call + dim[136868] 1))
          unknown call_tmp[662746] "expr temp" "maybe param" "maybe type" "temp"
          (662749 'move' call_tmp[662746](136932 call strideSafe d[136860] rt[136864] call_tmp[662741]))
          (567272 'move' tmp[567270](426164 call isTrue call_tmp[662746]))
          (567277 'move' tmp[567262](567274 '_paramFoldLogical' tmp[567263] tmp[567270]))
        }
        {
          (567282 'move' tmp[567262](567279 '_paramFoldLogical' tmp[567263] 0))
        }
        (567305 'move' tmp[567289](567302 '_paramFoldLogical' tmp[567290] tmp[567262]))
      }
      (518721 'move' ret[518716](518720 'deref' tmp[567289]))
      (518718 return ret[518716])
    }
    unknown tmp[426202] "maybe param" "temp"
    unknown tmp[426223] "maybe param" "temp"
    (426234 'move' tmp[426223](136946 call isRangeTuple t[136765]))
    unknown call_tmp[662751] "expr temp" "maybe param" "maybe type" "temp"
    (662754 'move' call_tmp[662751](426236 call _cond_invalid tmp[426223]))
    if call_tmp[662751]
    {
      (426239 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567312] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567313] "maybe param" "temp"
    unknown call_tmp[662756] "expr temp" "maybe param" "maybe type" "temp"
    (662759 'move' call_tmp[662756](426224 call isTrue tmp[426223]))
    (567318 'move' tmp[567313](567316 call _cond_test call_tmp[662756]))
    if tmp[567313]
    {
      unknown tmp[567320] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662763] "expr temp" "maybe param" "maybe type" "temp"
      (662766 'move' call_tmp[662763](136948 call rank _mt[243] d[136761]))
      unknown call_tmp[662770] "expr temp" "maybe param" "maybe type" "temp"
      (662773 'move' call_tmp[662770](136952 call size _mt[243] t[136765]))
      unknown call_tmp[662775] "expr temp" "maybe param" "maybe type" "temp"
      (662778 'move' call_tmp[662775](136955 call == call_tmp[662763] call_tmp[662770]))
      (567322 'move' tmp[567320](426227 call isTrue call_tmp[662775]))
      (567327 'move' tmp[567312](567324 '_paramFoldLogical' tmp[567313] tmp[567320]))
    }
    {
      (567332 'move' tmp[567312](567329 '_paramFoldLogical' tmp[567313] 0))
    }
    (426213 'move' tmp[426202] tmp[567312])
    unknown call_tmp[662780] "expr temp" "maybe param" "maybe type" "temp"
    (662783 'move' call_tmp[662780](426215 call _cond_invalid tmp[426202]))
    if call_tmp[662780]
    {
      (426218 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567339] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567340] "maybe param" "temp"
    unknown call_tmp[662785] "expr temp" "maybe param" "maybe type" "temp"
    (662788 'move' call_tmp[662785](426203 call isTrue tmp[426202]))
    (567345 'move' tmp[567340](567343 call _cond_test call_tmp[662785]))
    if tmp[567340]
    {
      unknown tmp[567347] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662790] "expr temp" "maybe param" "maybe type" "temp"
      (662793 'move' call_tmp[662790](136963 call strideSafe d[136761] t[136765]))
      (567349 'move' tmp[567347](426206 call isTrue call_tmp[662790]))
      (567354 'move' tmp[567339](567351 '_paramFoldLogical' tmp[567340] tmp[567347]))
    }
    {
      (567359 'move' tmp[567339](567356 '_paramFoldLogical' tmp[567340] 0))
    }
    (518730 'move' ret[518725](518729 'deref' tmp[567339]))
    (518727 return ret[518725])
  }
  function =[136976](ref arg a[136973]:_domain[125902](?), arg b[136979]:_tuple[56199](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662795] "expr temp" "maybe param" "maybe type" "temp"
    (662798 'move' call_tmp[662795](136986 call chpl__isLegalRectTupDomAssign a[136973] b[136979]))
    unknown call_tmp[662800] "expr temp" "maybe param" "maybe type" "temp"
    (662803 'move' call_tmp[662800](137070 call _cond_test call_tmp[662795]))
    if call_tmp[662800]
    {
      unknown call_tmp[662805] "expr temp" "maybe param" "maybe type" "temp"
      (662808 'move' call_tmp[662805](136991 call chpl__buildDomainExpr(136989 'expand_tuple' b[136979])))
      (136993 call = a[136973] call_tmp[662805])
    }
    {
      (137002 call(136998 call (partial) clear _mt[243] a[136973]))
      (480464 'end of statement')
      {
        unknown _indexOfInterest[137027] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[137028] "expr temp" "temp"
        unknown call_tmp[662814] "expr temp" "maybe param" "maybe type" "temp"
        (662817 'move' call_tmp[662814](137043 call size _mt[243] b[136979]))
        unknown call_tmp[662819] "expr temp" "maybe param" "maybe type" "temp"
        (662822 'move' call_tmp[662819](137047 call chpl_direct_counted_range_iter 0 call_tmp[662814]))
        (137037 'move' _iterator[137028](137035 call _getIterator call_tmp[662819]))
        Defer
        {
          {
            (137063 call _freeIterator _iterator[137028])
          }
        }
        { scopeless type
          (137052 'move' _indexOfInterest[137027](137049 call iteratorIndex _iterator[137028]))
        }
        ForLoop[137029]
        {
          unknown ind[137056] "index var" "insert auto destroy"
          (480466 'end of statement')
          (137058 'move' ind[137056] _indexOfInterest[137027])
          (480467 'end of statement' ind[137056])
          {
            unknown call_tmp[662826] "expr temp" "maybe param" "maybe type" "temp"
            (662829 'move' call_tmp[662826](137022 call b[136979] ind[137056]))
            (137024 call(137016 call (partial) add _mt[243] a[136973]) call_tmp[662826])
            (480469 'end of statement' ind[137056])
          }
          label _continueLabel[137032]
          _indexOfInterest[137027]
          _iterator[137028]
        }
        label _breakLabel[137033]
      }
    }
    (518732 return _void[55])
  }
  function =[137083](ref arg d[137080]:_domain[125902](?), arg r[137089]:range[64316](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662831] "expr temp" "maybe param" "maybe type" "temp"
    (662834 'move' call_tmp[662831](137095 call chpl__buildDomainExpr r[137089]))
    (137097 call = d[137080] call_tmp[662831])
    (518734 return _void[55])
  }
  function =[137109](ref arg a[137106]:_domain[125902](?), arg b[137111]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662836] "expr temp" "maybe param" "maybe type" "temp"
    (662839 'move' call_tmp[662836](137116 call isRectangularDom a[137106]))
    unknown call_tmp[662841] "expr temp" "maybe param" "maybe type" "temp"
    (662844 'move' call_tmp[662841](137138 call _cond_test call_tmp[662836]))
    if call_tmp[662841]
    {
      (137136 call compilerError "Illegal assignment to a rectangular domain")
    }
    (137149 call(137145 call (partial) clear _mt[243] a[137106]))
    (480473 'end of statement')
    {
      unknown _indexOfInterest[137162] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137163] "expr temp" "temp"
      (137172 'move' _iterator[137163](137170 call _getIterator b[137111]))
      Defer
      {
        {
          (137188 call _freeIterator _iterator[137163])
        }
      }
      { scopeless type
        (137177 'move' _indexOfInterest[137162](137174 call iteratorIndex _iterator[137163]))
      }
      ForLoop[137164]
      {
        unknown ind[137181] "index var" "insert auto destroy"
        (480475 'end of statement')
        (137183 'move' ind[137181] _indexOfInterest[137162])
        (480476 'end of statement' ind[137181])
        {
          (137159 call(137154 call (partial) add _mt[243] a[137106]) ind[137181])
          (480478 'end of statement' ind[137181])
        }
        label _continueLabel[137167]
        _indexOfInterest[137162]
        _iterator[137163]
      }
      label _breakLabel[137168]
    }
    (518736 return _void[55])
  }
  function chpl__serializeAssignment[137205](arg a[137202]:_array[133588](?), arg b[137207]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518740] "RVV" "param" "temp"
    unknown tmp[426244] "maybe param" "temp"
    unknown call_tmp[662852] "expr temp" "maybe param" "maybe type" "temp"
    (662855 'move' call_tmp[662852](137210 call rank _mt[243] a[137202]))
    (426255 'move' tmp[426244](137214 call != call_tmp[662852] 1))
    unknown call_tmp[662857] "expr temp" "maybe param" "maybe type" "temp"
    (662860 'move' call_tmp[662857](426257 call _cond_invalid tmp[426244]))
    if call_tmp[662857]
    {
      (426260 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567366] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567367] "maybe param" "temp"
    unknown call_tmp[662862] "expr temp" "maybe param" "maybe type" "temp"
    (662865 'move' call_tmp[662862](426245 call isTrue tmp[426244]))
    (567372 'move' tmp[567367](567370 call _cond_test call_tmp[662862]))
    if tmp[567367]
    {
      unknown tmp[567374] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662867] "expr temp" "maybe param" "maybe type" "temp"
      (662870 'move' call_tmp[662867](137219 call isRange b[137207]))
      (567376 'move' tmp[567374](426248 call isTrue call_tmp[662867]))
      (567381 'move' tmp[567366](567378 '_paramFoldLogical' tmp[567367] tmp[567374]))
    }
    {
      (567386 'move' tmp[567366](567383 '_paramFoldLogical' tmp[567367] 0))
    }
    unknown call_tmp[662872] "expr temp" "maybe param" "maybe type" "temp"
    (662875 'move' call_tmp[662872](137225 call _cond_test tmp[567366]))
    if call_tmp[662872]
    {
      (518745 'move' ret[518740](518744 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518738] _end_chpl__serializeAssignment[518738]
    }
    unknown tmp[426265] "maybe param" "temp"
    unknown tmp[426286] "maybe param" "temp"
    unknown tmp[426307] "maybe param" "temp"
    unknown call_tmp[662877] "expr temp" "maybe param" "maybe type" "temp"
    (662880 'move' call_tmp[662877](137234 call isRectangularArr a[137202]))
    (426318 'move' tmp[426307](137235 call ! call_tmp[662877]))
    unknown call_tmp[662882] "expr temp" "maybe param" "maybe type" "temp"
    (662885 'move' call_tmp[662882](426320 call _cond_invalid tmp[426307]))
    if call_tmp[662882]
    {
      (426323 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567393] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567394] "maybe param" "temp"
    unknown call_tmp[662887] "expr temp" "maybe param" "maybe type" "temp"
    (662890 'move' call_tmp[662887](426308 call isTrue tmp[426307]))
    (567399 'move' tmp[567394](567397 call _cond_test call_tmp[662887]))
    if tmp[567394]
    {
      unknown tmp[567401] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662892] "expr temp" "maybe param" "maybe type" "temp"
      (662895 'move' call_tmp[662892](137240 call isAssociativeArr a[137202]))
      unknown call_tmp[662897] "expr temp" "maybe param" "maybe type" "temp"
      (662900 'move' call_tmp[662897](137241 call ! call_tmp[662892]))
      (567403 'move' tmp[567401](426311 call isTrue call_tmp[662897]))
      (567408 'move' tmp[567393](567405 '_paramFoldLogical' tmp[567394] tmp[567401]))
    }
    {
      (567413 'move' tmp[567393](567410 '_paramFoldLogical' tmp[567394] 0))
    }
    (426297 'move' tmp[426286] tmp[567393])
    unknown call_tmp[662902] "expr temp" "maybe param" "maybe type" "temp"
    (662905 'move' call_tmp[662902](426299 call _cond_invalid tmp[426286]))
    if call_tmp[662902]
    {
      (426302 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567420] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567421] "maybe param" "temp"
    unknown call_tmp[662907] "expr temp" "maybe param" "maybe type" "temp"
    (662910 'move' call_tmp[662907](426287 call isTrue tmp[426286]))
    (567426 'move' tmp[567421](567424 call _cond_test call_tmp[662907]))
    if tmp[567421]
    {
      unknown tmp[567428] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662912] "expr temp" "maybe param" "maybe type" "temp"
      (662915 'move' call_tmp[662912](137248 call isSparseArr a[137202]))
      unknown call_tmp[662917] "expr temp" "maybe param" "maybe type" "temp"
      (662920 'move' call_tmp[662917](137249 call ! call_tmp[662912]))
      (567430 'move' tmp[567428](426290 call isTrue call_tmp[662917]))
      (567435 'move' tmp[567420](567432 '_paramFoldLogical' tmp[567421] tmp[567428]))
    }
    {
      (567440 'move' tmp[567420](567437 '_paramFoldLogical' tmp[567421] 0))
    }
    (426276 'move' tmp[426265] tmp[567420])
    unknown call_tmp[662922] "expr temp" "maybe param" "maybe type" "temp"
    (662925 'move' call_tmp[662922](426278 call _cond_invalid tmp[426265]))
    if call_tmp[662922]
    {
      (426281 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567528] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567529] "maybe param" "temp"
    unknown call_tmp[662927] "expr temp" "maybe param" "maybe type" "temp"
    (662930 'move' call_tmp[662927](426266 call isTrue tmp[426265]))
    (567534 'move' tmp[567529](567532 call _cond_test call_tmp[662927]))
    if tmp[567529]
    {
      (567539 'move' tmp[567528](567536 '_paramFoldLogical' tmp[567529] 1))
    }
    {
      unknown tmp[426328] "maybe param" "temp"
      unknown tmp[426349] "maybe param" "temp"
      unknown tmp[426370] "maybe param" "temp"
      (426381 'move' tmp[426370](137256 call isArray b[137207]))
      unknown call_tmp[662932] "expr temp" "maybe param" "maybe type" "temp"
      (662935 'move' call_tmp[662932](426383 call _cond_invalid tmp[426370]))
      if call_tmp[662932]
      {
        (426386 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567447] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567448] "maybe param" "temp"
      unknown call_tmp[662937] "expr temp" "maybe param" "maybe type" "temp"
      (662940 'move' call_tmp[662937](426371 call isTrue tmp[426370]))
      (567453 'move' tmp[567448](567451 call _cond_test call_tmp[662937]))
      if tmp[567448]
      {
        unknown tmp[567455] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[662942] "expr temp" "maybe param" "maybe type" "temp"
        (662945 'move' call_tmp[662942](137260 call isRectangularArr b[137207]))
        unknown call_tmp[662947] "expr temp" "maybe param" "maybe type" "temp"
        (662950 'move' call_tmp[662947](137261 call ! call_tmp[662942]))
        (567457 'move' tmp[567455](426374 call isTrue call_tmp[662947]))
        (567462 'move' tmp[567447](567459 '_paramFoldLogical' tmp[567448] tmp[567455]))
      }
      {
        (567467 'move' tmp[567447](567464 '_paramFoldLogical' tmp[567448] 0))
      }
      (426360 'move' tmp[426349] tmp[567447])
      unknown call_tmp[662952] "expr temp" "maybe param" "maybe type" "temp"
      (662955 'move' call_tmp[662952](426362 call _cond_invalid tmp[426349]))
      if call_tmp[662952]
      {
        (426365 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567474] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567475] "maybe param" "temp"
      unknown call_tmp[662957] "expr temp" "maybe param" "maybe type" "temp"
      (662960 'move' call_tmp[662957](426350 call isTrue tmp[426349]))
      (567480 'move' tmp[567475](567478 call _cond_test call_tmp[662957]))
      if tmp[567475]
      {
        unknown tmp[567482] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[662962] "expr temp" "maybe param" "maybe type" "temp"
        (662965 'move' call_tmp[662962](137268 call isAssociativeArr b[137207]))
        unknown call_tmp[662967] "expr temp" "maybe param" "maybe type" "temp"
        (662970 'move' call_tmp[662967](137269 call ! call_tmp[662962]))
        (567484 'move' tmp[567482](426353 call isTrue call_tmp[662967]))
        (567489 'move' tmp[567474](567486 '_paramFoldLogical' tmp[567475] tmp[567482]))
      }
      {
        (567494 'move' tmp[567474](567491 '_paramFoldLogical' tmp[567475] 0))
      }
      (426339 'move' tmp[426328] tmp[567474])
      unknown call_tmp[662972] "expr temp" "maybe param" "maybe type" "temp"
      (662975 'move' call_tmp[662972](426341 call _cond_invalid tmp[426328]))
      if call_tmp[662972]
      {
        (426344 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567501] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567502] "maybe param" "temp"
      unknown call_tmp[662977] "expr temp" "maybe param" "maybe type" "temp"
      (662980 'move' call_tmp[662977](426329 call isTrue tmp[426328]))
      (567507 'move' tmp[567502](567505 call _cond_test call_tmp[662977]))
      if tmp[567502]
      {
        unknown tmp[567509] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[662982] "expr temp" "maybe param" "maybe type" "temp"
        (662985 'move' call_tmp[662982](137276 call isSparseArr b[137207]))
        unknown call_tmp[662987] "expr temp" "maybe param" "maybe type" "temp"
        (662990 'move' call_tmp[662987](137277 call ! call_tmp[662982]))
        (567511 'move' tmp[567509](426332 call isTrue call_tmp[662987]))
        (567516 'move' tmp[567501](567513 '_paramFoldLogical' tmp[567502] tmp[567509]))
      }
      {
        (567521 'move' tmp[567501](567518 '_paramFoldLogical' tmp[567502] 0))
      }
      unknown tmp[567541] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (567543 'move' tmp[567541](426270 call isTrue tmp[567501]))
      (567548 'move' tmp[567528](567545 '_paramFoldLogical' tmp[567529] tmp[567541]))
    }
    unknown call_tmp[662992] "expr temp" "maybe param" "maybe type" "temp"
    (662995 'move' call_tmp[662992](137286 call _cond_test tmp[567528]))
    if call_tmp[662992]
    {
      (518750 'move' ret[518740](518749 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518738] _end_chpl__serializeAssignment[518738]
    }
    (518755 'move' ret[518740](518754 'deref' 0))
    label _end_chpl__serializeAssignment[518738]
    (518742 return ret[518740])
  }
  function chpl__compatibleForBulkTransfer[137304](arg a[137301]:_array[133588](?), arg b[137309]:_array[133588](?), param arg kind[137313]:_tElt[137987]) param : _unknown[51]
  {
    unknown ret[518759] "RVV" "param" "temp"
    unknown call_tmp[662997] "expr temp" "maybe param" "maybe type" "temp"
    (663000 'move' call_tmp[662997](137317 call ! useBulkTransfer[113722]))
    unknown call_tmp[663002] "expr temp" "maybe param" "maybe type" "temp"
    (663005 'move' call_tmp[663002](137322 call _cond_test call_tmp[662997]))
    if call_tmp[663002]
    {
      (518764 'move' ret[518759](518763 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518757] _end_chpl__compatibleForBulkTransfer[518757]
    }
    unknown call_tmp[663009] "expr temp" "maybe param" "maybe type" "temp"
    (663012 'move' call_tmp[663009](137329 call eltType _mt[243] a[137301]))
    unknown call_tmp[663016] "expr temp" "maybe param" "maybe type" "temp"
    (663019 'move' call_tmp[663016](137333 call eltType _mt[243] b[137309]))
    unknown call_tmp[663021] "expr temp" "maybe param" "maybe type" "temp"
    (663024 'move' call_tmp[663021](137336 call != call_tmp[663009] call_tmp[663016]))
    unknown call_tmp[663026] "expr temp" "maybe param" "maybe type" "temp"
    (663029 'move' call_tmp[663026](137341 call _cond_test call_tmp[663021]))
    if call_tmp[663026]
    {
      (518769 'move' ret[518759](518768 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518757] _end_chpl__compatibleForBulkTransfer[518757]
    }
    unknown call_tmp[663031] "expr temp" "maybe param" "maybe type" "temp"
    (663034 'move' call_tmp[663031](137351 call == kind[137313] move[137981]))
    unknown call_tmp[663036] "expr temp" "maybe param" "maybe type" "temp"
    (663039 'move' call_tmp[663036](137356 call _cond_test call_tmp[663031]))
    if call_tmp[663036]
    {
      (518774 'move' ret[518759](518773 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518757] _end_chpl__compatibleForBulkTransfer[518757]
    }
    unknown tmp[426391] "maybe param" "temp"
    (426402 'move' tmp[426391](137368 call == kind[137313] initCopy[137983]))
    unknown call_tmp[663041] "expr temp" "maybe param" "maybe type" "temp"
    (663044 'move' call_tmp[663041](426404 call _cond_invalid tmp[426391]))
    if call_tmp[663041]
    {
      (426407 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567555] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567556] "maybe param" "temp"
    unknown call_tmp[663046] "expr temp" "maybe param" "maybe type" "temp"
    (663049 'move' call_tmp[663046](426392 call isTrue tmp[426391]))
    (567561 'move' tmp[567556](567559 call _cond_test call_tmp[663046]))
    if tmp[567556]
    {
      unknown tmp[567563] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663053] "expr temp" "maybe param" "maybe type" "temp"
      (663056 'move' call_tmp[663053](137372 call eltType _mt[243] a[137301]))
      unknown call_tmp[663058] "expr temp" "maybe param" "maybe type" "temp"
      (663061 'move' call_tmp[663058](137376 call isConstCopyableType call_tmp[663053]))
      (567565 'move' tmp[567563](426395 call isTrue call_tmp[663058]))
      (567570 'move' tmp[567555](567567 '_paramFoldLogical' tmp[567556] tmp[567563]))
    }
    {
      (567575 'move' tmp[567555](567572 '_paramFoldLogical' tmp[567556] 0))
    }
    unknown call_tmp[663063] "expr temp" "maybe param" "maybe type" "temp"
    (663066 'move' call_tmp[663063](137382 call _cond_test tmp[567555]))
    if call_tmp[663063]
    {
      (518779 'move' ret[518759](518778 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518757] _end_chpl__compatibleForBulkTransfer[518757]
    }
    unknown call_tmp[663070] "expr temp" "maybe param" "maybe type" "temp"
    (663073 'move' call_tmp[663070](137389 call eltType _mt[243] a[137301]))
    unknown call_tmp[663075] "expr temp" "maybe param" "maybe type" "temp"
    (663078 'move' call_tmp[663075](137393 call chpl__supportedDataTypeForBulkTransfer call_tmp[663070]))
    unknown call_tmp[663080] "expr temp" "maybe param" "maybe type" "temp"
    (663083 'move' call_tmp[663080](137394 call ! call_tmp[663075]))
    unknown call_tmp[663085] "expr temp" "maybe param" "maybe type" "temp"
    (663088 'move' call_tmp[663085](137399 call _cond_test call_tmp[663080]))
    if call_tmp[663085]
    {
      (518784 'move' ret[518759](518783 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518757] _end_chpl__compatibleForBulkTransfer[518757]
    }
    (518789 'move' ret[518759](518788 'deref' 1))
    label _end_chpl__compatibleForBulkTransfer[518757]
    (518761 return ret[518759])
  }
  function chpl__supportedDataTypeForBulkTransfer[137413](arg t[137411]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518793] "RVV" "param" "temp"
    unknown tmp[426433] "maybe param" "temp"
    (426444 'move' tmp[426433](354215 'is_subtype' borrowed[211](?) t[137411]))
    unknown call_tmp[663090] "expr temp" "maybe param" "maybe type" "temp"
    (663093 'move' call_tmp[663090](426446 call _cond_invalid tmp[426433]))
    if call_tmp[663090]
    {
      (426449 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567582] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567583] "maybe param" "temp"
    unknown call_tmp[663095] "expr temp" "maybe param" "maybe type" "temp"
    (663098 'move' call_tmp[663095](426434 call isTrue tmp[426433]))
    (567588 'move' tmp[567583](567586 call _cond_test call_tmp[663095]))
    if tmp[567583]
    {
      (567593 'move' tmp[567582](567590 '_paramFoldLogical' tmp[567583] 1))
    }
    {
      unknown tmp[567595] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663100] "expr temp" "maybe param" "maybe type" "temp"
      (663103 'move' call_tmp[663100](354216 'is_subtype' unmanaged[220](?) t[137411]))
      (567597 'move' tmp[567595](426438 call isTrue call_tmp[663100]))
      (567602 'move' tmp[567582](567599 '_paramFoldLogical' tmp[567583] tmp[567595]))
    }
    unknown call_tmp[663105] "expr temp" "maybe param" "maybe type" "temp"
    (663108 'move' call_tmp[663105](137477 call _cond_test tmp[567582]))
    if call_tmp[663105]
    {
      (518798 'move' ret[518793](518797 'deref' 0))
      gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518791] _end_chpl__supportedDataTypeForBulkTransfer[518791]
    }
    {
      unknown tmp[426412] "maybe param" "temp"
      (426423 'move' tmp[426412](137434 call isRecordType t[137411]))
      unknown call_tmp[663110] "expr temp" "maybe param" "maybe type" "temp"
      (663113 'move' call_tmp[663110](426425 call _cond_invalid tmp[426412]))
      if call_tmp[663110]
      {
        (426428 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[567609] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567610] "maybe param" "temp"
      unknown call_tmp[663115] "expr temp" "maybe param" "maybe type" "temp"
      (663118 'move' call_tmp[663115](426413 call isTrue tmp[426412]))
      (567615 'move' tmp[567610](567613 call _cond_test call_tmp[663115]))
      if tmp[567610]
      {
        (567620 'move' tmp[567609](567617 '_paramFoldLogical' tmp[567610] 1))
      }
      {
        unknown tmp[567622] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663120] "expr temp" "maybe param" "maybe type" "temp"
        (663123 'move' call_tmp[663120](137438 call isTupleType t[137411]))
        (567624 'move' tmp[567622](426417 call isTrue call_tmp[663120]))
        (567629 'move' tmp[567609](567626 '_paramFoldLogical' tmp[567610] tmp[567622]))
      }
      unknown call_tmp[663125] "expr temp" "maybe param" "maybe type" "temp"
      (663128 'move' call_tmp[663125](137472 call _cond_test tmp[567609]))
      if call_tmp[663125]
      {
        unknown call_tmp[663130] "expr temp" "maybe param" "maybe type" "temp"
        (663133 'move' call_tmp[663130](137444 call isPODType t[137411]))
        (518803 'move' ret[518793](518802 'deref' call_tmp[663130]))
        gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518791] _end_chpl__supportedDataTypeForBulkTransfer[518791]
      }
      {
        unknown call_tmp[663135] "expr temp" "maybe param" "maybe type" "temp"
        (663138 'move' call_tmp[663135](137451 call isUnionType t[137411]))
        unknown call_tmp[663140] "expr temp" "maybe param" "maybe type" "temp"
        (663143 'move' call_tmp[663140](137468 call _cond_test call_tmp[663135]))
        if call_tmp[663140]
        {
          (518808 'move' ret[518793](518807 'deref' 0))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518791] _end_chpl__supportedDataTypeForBulkTransfer[518791]
        }
        {
          unknown x[137457] "dead at end of block" "insert auto destroy" "unsafe"
          (543002 'default init var' x[137457] t[137411])
          (137460 'end of statement')
          unknown call_tmp[663145] "expr temp" "maybe param" "maybe type" "temp"
          (663148 'move' call_tmp[663145](137465 call chpl__supportedDataTypeForBulkTransfer x[137457]))
          (518813 'move' ret[518793](518812 'deref' call_tmp[663145]))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518791] _end_chpl__supportedDataTypeForBulkTransfer[518791]
          (480499 'end of statement' x[137457])
        }
      }
    }
    label _end_chpl__supportedDataTypeForBulkTransfer[518791]
    (518795 return ret[518793])
  }
  function chpl__supportedDataTypeForBulkTransfer[137491](arg x[137488]:string[26]) param : _unknown[51]
  {
    unknown ret[518819] "RVV" "param" "temp"
    (518824 'move' ret[518819](518823 'deref' 0))
    (518821 return ret[518819])
  }
  function chpl__supportedDataTypeForBulkTransfer[137505](arg x[137502]:bytes[24]) param : _unknown[51]
  {
    unknown ret[518828] "RVV" "param" "temp"
    (518833 'move' ret[518828](518832 'deref' 0))
    (518830 return ret[518828])
  }
  function chpl__supportedDataTypeForBulkTransfer[137519](arg x[137516]:_syncvar[84944](?)) param : _unknown[51]
  {
    unknown ret[518837] "RVV" "param" "temp"
    (518842 'move' ret[518837](518841 'deref' 0))
    (518839 return ret[518837])
  }
  function chpl__supportedDataTypeForBulkTransfer[137533](arg x[137530]:_singlevar[87253](?)) param : _unknown[51]
  {
    unknown ret[518846] "RVV" "param" "temp"
    (518851 'move' ret[518846](518850 'deref' 0))
    (518848 return ret[518846])
  }
  function chpl__supportedDataTypeForBulkTransfer[137547](arg x[137544]:_domain[125902](?)) param : _unknown[51]
  {
    unknown ret[518855] "RVV" "param" "temp"
    (518860 'move' ret[518855](518859 'deref' 0))
    (518857 return ret[518855])
  }
  function chpl__supportedDataTypeForBulkTransfer[137563](arg x[137560]:_array[133588](?)) param : _unknown[51]
  {
    unknown ret[518864] "RVV" "param" "temp"
    (518869 'move' ret[518864](518868 'deref' 0))
    (518866 return ret[518864])
  }
  function chpl__supportedDataTypeForBulkTransfer[137577](arg x[137574]:_distribution[118967](?)) param : _unknown[51]
  {
    unknown ret[518873] "RVV" "param" "temp"
    (518878 'move' ret[518873](518877 'deref' 1))
    (518875 return ret[518873])
  }
  function chpl__supportedDataTypeForBulkTransfer[137591](arg x[137588]:locale[28]) param : _unknown[51]
  {
    unknown ret[518882] "RVV" "param" "temp"
    (518887 'move' ret[518882](518886 'deref' 1))
    (518884 return ret[518882])
  }
  function chpl__supportedDataTypeForBulkTransfer[137605](arg x[137602]:chpl_anycomplex[184](?)) param : _unknown[51]
  {
    unknown ret[518891] "RVV" "param" "temp"
    (518896 'move' ret[518891](518895 'deref' 1))
    (518893 return ret[518891])
  }
  function chpl__supportedDataTypeForBulkTransfer[137620](arg x[137617]:object[22]) param : _unknown[51]
  {
    unknown ret[518900] "RVV" "param" "temp"
    (518905 'move' ret[518900](518904 'deref' 0))
    (518902 return ret[518900])
  }
  function chpl__supportedDataTypeForBulkTransfer[137632](arg x[137630]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518909] "RVV" "param" "temp"
    (518914 'move' ret[518909](518913 'deref' 1))
    (518911 return ret[518909])
  }
  function checkArrayShapesUponAssignment[137648](arg a[137645]:_array[133588](?), arg b[137653]:_array[133588](?)) : _unknown[51] "no doc" "no return value for void"
  {
    unknown tmp[426454] "maybe param" "temp"
    (426465 'move' tmp[426454](137659 call isRectangularArr a[137645]))
    unknown call_tmp[663150] "expr temp" "maybe param" "maybe type" "temp"
    (663153 'move' call_tmp[663150](426467 call _cond_invalid tmp[426454]))
    if call_tmp[663150]
    {
      (426470 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567636] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567637] "maybe param" "temp"
    unknown call_tmp[663155] "expr temp" "maybe param" "maybe type" "temp"
    (663158 'move' call_tmp[663155](426455 call isTrue tmp[426454]))
    (567642 'move' tmp[567637](567640 call _cond_test call_tmp[663155]))
    if tmp[567637]
    {
      unknown tmp[567644] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663160] "expr temp" "maybe param" "maybe type" "temp"
      (663163 'move' call_tmp[663160](137663 call isRectangularArr b[137653]))
      (567646 'move' tmp[567644](426458 call isTrue call_tmp[663160]))
      (567651 'move' tmp[567636](567648 '_paramFoldLogical' tmp[567637] tmp[567644]))
    }
    {
      (567656 'move' tmp[567636](567653 '_paramFoldLogical' tmp[567637] 0))
    }
    unknown call_tmp[663165] "expr temp" "maybe param" "maybe type" "temp"
    (663168 'move' call_tmp[663165](137839 call _cond_test tmp[567636]))
    if call_tmp[663165]
    {
      unknown call_tmp[663172] "expr temp" "maybe param" "maybe type" "temp"
      (663175 'move' call_tmp[663172](137667 call _value _mt[243] a[137645]))
      unknown call_tmp[663179] "expr temp" "maybe param" "maybe type" "temp"
      (663182 'move' call_tmp[663179](137670 call dom _mt[243] call_tmp[663172]))
      unknown call_tmp[663186] "maybe param" "maybe type" "temp"
      (663189 'move' call_tmp[663186](137677 call(137673 call (partial) dsiDims _mt[243] call_tmp[663179])))
      const aDims[137678] "dead at end of block" "const" "insert auto destroy"
      (543004 'init var' aDims[137678] call_tmp[663186])
      unknown call_tmp[663193] "expr temp" "maybe param" "maybe type" "temp"
      (663196 'move' call_tmp[663193](137682 call _value _mt[243] b[137653]))
      unknown call_tmp[663200] "expr temp" "maybe param" "maybe type" "temp"
      (663203 'move' call_tmp[663200](137685 call dom _mt[243] call_tmp[663193]))
      unknown call_tmp[663207] "maybe param" "maybe type" "temp"
      (663210 'move' call_tmp[663207](137692 call(137688 call (partial) dsiDims _mt[243] call_tmp[663200])))
      const bDims[137693] "dead at end of block" "const" "insert auto destroy"
      (543006 'init var' bDims[137693] call_tmp[663207])
      (137696 'end of statement')
      unknown call_tmp[663214] "expr temp" "maybe param" "maybe type" "temp"
      (663217 'move' call_tmp[663214](137700 call size _mt[243] aDims[137678]))
      unknown call_tmp[663221] "expr temp" "maybe param" "maybe type" "temp"
      (663224 'move' call_tmp[663221](137704 call size _mt[243] bDims[137693]))
      unknown call_tmp[663226] "expr temp" "maybe param" "maybe type" "temp"
      (663229 'move' call_tmp[663226](137707 call == call_tmp[663214] call_tmp[663221]))
      (137710 call compilerAssert call_tmp[663226])
      (480513 'end of statement' aDims[137678] bDims[137693])
      {
        unknown i[137798] "dead at end of block" "insert auto destroy"
        (543008 'init var' i[137798] 0)
        (480516 'end of statement')
        unknown tmp[137799] "maybe param" "temp"
        unknown call_tmp[663233] "expr temp" "maybe param" "maybe type" "temp"
        (663236 'move' call_tmp[663233](137714 call size _mt[243] aDims[137678]))
        unknown call_tmp[663238] "expr temp" "maybe param" "maybe type" "temp"
        (663241 'move' call_tmp[663238](137718 call - call_tmp[663233] 1))
        (137811 'move' tmp[137799](137809 call chpl_compute_low_param_loop_bound 0 call_tmp[663238]))
        unknown tmp[137800] "maybe param" "temp"
        unknown call_tmp[663245] "expr temp" "maybe param" "maybe type" "temp"
        (663248 'move' call_tmp[663245](137818 call size _mt[243] aDims[137678]))
        unknown call_tmp[663250] "expr temp" "maybe param" "maybe type" "temp"
        (663253 'move' call_tmp[663250](137816 call - call_tmp[663245] 1))
        (137824 'move' tmp[137800](137822 call chpl_compute_high_param_loop_bound 0 call_tmp[663250]))
        unknown tmp[137801] "maybe param" "temp"
        (137827 'move' tmp[137801] 1)
        ParamForLoop[137829]
        { i[137798] tmp[137799] tmp[137800] tmp[137801]
          {
            unknown call_tmp[663255] "expr temp" "maybe param" "maybe type" "temp"
            (663258 'move' call_tmp[663255](137725 call aDims[137678] i[137798]))
            unknown call_tmp[663262] "expr temp" "maybe param" "maybe type" "temp"
            (663265 'move' call_tmp[663262](137726 call size _mt[243] call_tmp[663255]))
            unknown call_tmp[663267] "expr temp" "maybe param" "maybe type" "temp"
            (663270 'move' call_tmp[663267](137732 call bDims[137693] i[137798]))
            unknown call_tmp[663274] "expr temp" "maybe param" "maybe type" "temp"
            (663277 'move' call_tmp[663274](137733 call size _mt[243] call_tmp[663267]))
            unknown call_tmp[663279] "expr temp" "maybe param" "maybe type" "temp"
            (663282 'move' call_tmp[663279](137736 call != call_tmp[663262] call_tmp[663274]))
            unknown call_tmp[663284] "expr temp" "maybe param" "maybe type" "temp"
            (663287 'move' call_tmp[663284](137792 call _cond_test call_tmp[663279]))
            if call_tmp[663284]
            {
              unknown call_tmp[663289] "expr temp" "maybe param" "maybe type" "temp"
              (663292 'move' call_tmp[663289](137762 call aDims[137678] i[137798]))
              unknown call_tmp[663296] "expr temp" "maybe param" "maybe type" "temp"
              (663299 'move' call_tmp[663296](137763 call size _mt[243] call_tmp[663289]))
              unknown call_tmp[663301] "expr temp" "maybe param" "maybe type" "temp"
              (663304 'move' call_tmp[663301](137786 call bDims[137693] i[137798]))
              unknown call_tmp[663308] "expr temp" "maybe param" "maybe type" "temp"
              (663311 'move' call_tmp[663308](137787 call size _mt[243] call_tmp[663301]))
              (137790 call halt "assigning between arrays of different shapes in dimension " i[137798] ": " call_tmp[663296] " vs. " call_tmp[663308])
              (480517 'end of statement' i[137798] aDims[137678] i[137798] bDims[137693] i[137798])
            }
          }
        }
        label _unused_continueLabel[137803]
        label _breakLabel[137802]
      }
    }
    {
    }
    (518916 return _void[55])
  }
  function =[137854](ref arg a[137851]:_array[133588](?), arg b[137859]:_array[133588](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[663315] "expr temp" "maybe param" "maybe type" "temp"
    (663318 'move' call_tmp[663315](137863 call rank _mt[243] a[137851]))
    unknown call_tmp[663322] "expr temp" "maybe param" "maybe type" "temp"
    (663325 'move' call_tmp[663322](137867 call rank _mt[243] b[137859]))
    unknown call_tmp[663327] "expr temp" "maybe param" "maybe type" "temp"
    (663330 'move' call_tmp[663327](137870 call != call_tmp[663315] call_tmp[663322]))
    unknown call_tmp[663332] "expr temp" "maybe param" "maybe type" "temp"
    (663335 'move' call_tmp[663332](137893 call _cond_test call_tmp[663327]))
    if call_tmp[663332]
    {
      (137891 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[663339] "expr temp" "maybe param" "maybe type" "temp"
    (663342 'move' call_tmp[663339](137900 call _value _mt[243] b[137859]))
    unknown call_tmp[663344] "expr temp" "maybe param" "maybe type" "temp"
    (663347 'move' call_tmp[663344](137904 call == call_tmp[663339] nil[44]))
    unknown call_tmp[663349] "expr temp" "maybe param" "maybe type" "temp"
    (663352 'move' call_tmp[663349](137908 call _cond_test call_tmp[663344]))
    if call_tmp[663349]
    {
      gotoReturn _end_=[518918] _end_=[518918]
    }
    unknown call_tmp[663356] "expr temp" "maybe param" "maybe type" "temp"
    (663359 'move' call_tmp[663356](137914 call _value _mt[243] a[137851]))
    unknown call_tmp[663363] "expr temp" "maybe param" "maybe type" "temp"
    (663366 'move' call_tmp[663363](137918 call _value _mt[243] b[137859]))
    unknown call_tmp[663368] "expr temp" "maybe param" "maybe type" "temp"
    (663371 'move' call_tmp[663368](137921 call == call_tmp[663356] call_tmp[663363]))
    unknown call_tmp[663373] "expr temp" "maybe param" "maybe type" "temp"
    (663376 'move' call_tmp[663373](137926 call _cond_test call_tmp[663368]))
    if call_tmp[663373]
    {
      gotoReturn _end_=[518918] _end_=[518918]
    }
    unknown tmp[426475] "maybe param" "temp"
    unknown call_tmp[663380] "expr temp" "maybe param" "maybe type" "temp"
    (663383 'move' call_tmp[663380](137931 call size _mt[243] a[137851]))
    (426486 'move' tmp[426475](137935 call == call_tmp[663380] 0))
    unknown call_tmp[663385] "expr temp" "maybe param" "maybe type" "temp"
    (663388 'move' call_tmp[663385](426488 call _cond_invalid tmp[426475]))
    if call_tmp[663385]
    {
      (426491 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567663] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567664] "maybe param" "temp"
    unknown call_tmp[663390] "expr temp" "maybe param" "maybe type" "temp"
    (663393 'move' call_tmp[663390](426476 call isTrue tmp[426475]))
    (567669 'move' tmp[567664](567667 call _cond_test call_tmp[663390]))
    if tmp[567664]
    {
      unknown tmp[567671] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663397] "expr temp" "maybe param" "maybe type" "temp"
      (663400 'move' call_tmp[663397](137938 call size _mt[243] b[137859]))
      unknown call_tmp[663402] "expr temp" "maybe param" "maybe type" "temp"
      (663405 'move' call_tmp[663402](137942 call == call_tmp[663397] 0))
      (567673 'move' tmp[567671](426479 call isTrue call_tmp[663402]))
      (567678 'move' tmp[567663](567675 '_paramFoldLogical' tmp[567664] tmp[567671]))
    }
    {
      (567683 'move' tmp[567663](567680 '_paramFoldLogical' tmp[567664] 0))
    }
    unknown call_tmp[663407] "expr temp" "maybe param" "maybe type" "temp"
    (663410 'move' call_tmp[663407](137948 call _cond_test tmp[567663]))
    if call_tmp[663407]
    {
      gotoReturn _end_=[518918] _end_=[518918]
    }
    unknown call_tmp[663412] "expr temp" "maybe param" "maybe type" "temp"
    (663415 'move' call_tmp[663412](137960 call _cond_test 1))
    if call_tmp[663412]
    {
      (137958 call checkArrayShapesUponAssignment a[137851] b[137859])
    }
    (137976 call chpl__uncheckedArrayTransfer a[137851] b[137859](kind = assign[137985]))
    label _end_=[518918]
    (518920 return _void[55])
  }
  type _tElt[137987] def move[137981]:_tElt[137987] def initCopy[137983]:_tElt[137987] def assign[137985]:_tElt[137987]
  function needsInitWorkaround[137994](arg t[137992]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[518930] "RVV" "param" "temp"
    unknown tmp[426496] "maybe param" "temp"
    unknown tmp[426517] "maybe param" "temp"
    (426528 'move' tmp[426517](354220 'is_subtype' _array[133588](?) t[137992]))
    unknown call_tmp[663417] "expr temp" "maybe param" "maybe type" "temp"
    (663420 'move' call_tmp[663417](426530 call _cond_invalid tmp[426517]))
    if call_tmp[663417]
    {
      (426533 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567690] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567691] "maybe param" "temp"
    unknown call_tmp[663422] "expr temp" "maybe param" "maybe type" "temp"
    (663425 'move' call_tmp[663422](426518 call isTrue tmp[426517]))
    (567696 'move' tmp[567691](567694 call _cond_test call_tmp[663422]))
    if tmp[567691]
    {
      (567701 'move' tmp[567690](567698 '_paramFoldLogical' tmp[567691] 1))
    }
    {
      unknown tmp[567703] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663427] "expr temp" "maybe param" "maybe type" "temp"
      (663430 'move' call_tmp[663427](354221 'is_subtype' _domain[125902](?) t[137992]))
      (567705 'move' tmp[567703](426522 call isTrue call_tmp[663427]))
      (567710 'move' tmp[567690](567707 '_paramFoldLogical' tmp[567691] tmp[567703]))
    }
    (426507 'move' tmp[426496] tmp[567690])
    unknown call_tmp[663432] "expr temp" "maybe param" "maybe type" "temp"
    (663435 'move' call_tmp[663432](426509 call _cond_invalid tmp[426496]))
    if call_tmp[663432]
    {
      (426512 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567717] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567718] "maybe param" "temp"
    unknown call_tmp[663437] "expr temp" "maybe param" "maybe type" "temp"
    (663440 'move' call_tmp[663437](426497 call isTrue tmp[426496]))
    (567723 'move' tmp[567718](567721 call _cond_test call_tmp[663437]))
    if tmp[567718]
    {
      (567728 'move' tmp[567717](567725 '_paramFoldLogical' tmp[567718] 1))
    }
    {
      unknown tmp[567730] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663442] "expr temp" "maybe param" "maybe type" "temp"
      (663445 'move' call_tmp[663442](354222 'is_subtype' _distribution[118967](?) t[137992]))
      (567732 'move' tmp[567730](426501 call isTrue call_tmp[663442]))
      (567737 'move' tmp[567717](567734 '_paramFoldLogical' tmp[567718] tmp[567730]))
    }
    (518935 'move' ret[518930](518934 'deref' tmp[567717]))
    (518932 return ret[518930])
  }
  function initCopyAfterTransfer[138028](ref arg a[138025]:_array[133588](?)) : _unknown[51] "private" "ignore transfer errors" "no return value for void"
  {
    unknown call_tmp[663449] "expr temp" "maybe param" "maybe type" "temp"
    (663452 'move' call_tmp[663449](138032 call eltType _mt[243] a[138025]))
    unknown call_tmp[663454] "expr temp" "maybe param" "maybe type" "temp"
    (663457 'move' call_tmp[663454](138036 call needsInitWorkaround call_tmp[663449]))
    unknown call_tmp[663459] "expr temp" "maybe param" "maybe type" "temp"
    (663462 'move' call_tmp[663459](138094 call _cond_test call_tmp[663454]))
    if call_tmp[663459]
    {
      unknown call_tmp[663466] "expr temp" "maybe param" "maybe type" "temp"
      (663469 'move' call_tmp[663466](415561 call _dom _mt[243] a[138025]))
      unknown call_tmp[663471] "maybe param" "maybe type" "temp"
      (663474 'move' call_tmp[663471](415557 call chpl__staticAutoLocalCheck a[138025] call_tmp[663466]))
      unknown chpl__staticAutoLocalCheckSym[415556] "dead at end of block" "param"
      (543010 'init var' chpl__staticAutoLocalCheckSym[415556] call_tmp[663471])
      (480533 'end of statement')
      if chpl__staticAutoLocalCheckSym[415556]
      {
        unknown call_tmp[663478] "expr temp" "maybe param" "maybe type" "temp"
        (663481 'move' call_tmp[663478](138039 call _dom _mt[243] a[138025]))
        Forall {
          induction variables:
            
            unknown ai[138067] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663478]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138046] "dead at end of block" "ref var"
            unknown call_tmp[663483] "expr temp" "maybe param" "maybe type" "temp"
            (663486 'move' call_tmp[663483](415567 'may be local access' a[138025] ai[138067] chpl__staticAutoLocalCheckSym[415556] 1))
            (543013 'move' aa[138046](543012 'addr of' call_tmp[663483]))
            (138049 'end of statement')
            unknown call_tmp[663490] "maybe param" "maybe type" "temp"
            (663493 'move' call_tmp[663490](138052 call eltType _mt[243] a[138025]))
            unknown copy[138056] "dead at end of block" "no auto destroy"
            (543015 'init var' copy[138056] aa[138046] call_tmp[663490])
            (138059 'end of statement' ai[138067] aa[138046])
            (138064 '=' aa[138046] copy[138056])
            (480536 'end of statement' aa[138046] copy[138056])
          }
        }
      }
      {
        unknown call_tmp[663497] "expr temp" "maybe param" "maybe type" "temp"
        (663500 'move' call_tmp[663497](415553 call _dom _mt[243] a[138025]))
        Forall {
          induction variables:
            
            unknown ai[415550] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663497]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415532] "dead at end of block" "ref var"
            unknown call_tmp[663502] "expr temp" "maybe param" "maybe type" "temp"
            (663505 'move' call_tmp[663502](415534 call a[138025] ai[415550]))
            (543018 'move' aa[415532](543017 'addr of' call_tmp[663502]))
            (415537 'end of statement')
            unknown call_tmp[663509] "maybe param" "maybe type" "temp"
            (663512 'move' call_tmp[663509](415541 call eltType _mt[243] a[138025]))
            unknown copy[415538] "dead at end of block" "no auto destroy"
            (543020 'init var' copy[415538] aa[415532] call_tmp[663509])
            (415545 'end of statement' ai[415550] aa[415532])
            (415546 '=' aa[415532] copy[415538])
            (480541 'end of statement' aa[415532] copy[415538])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138090] "index var" "insert auto destroy"
        iterated expressions:
          a[138025]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663516] "maybe param" "maybe type" "temp"
          (663519 'move' call_tmp[663516](138074 call eltType _mt[243] a[138025]))
          unknown copy[138078] "dead at end of block" "no auto destroy"
          (543022 'init var' copy[138078] aa[138090] call_tmp[663516])
          (138081 'end of statement' aa[138090])
          (138087 '=' aa[138090] copy[138078])
          (480545 'end of statement' aa[138090] copy[138078])
        }
      }
    }
    (518937 return _void[55])
  }
  function fixRuntimeType[138105](arg eltType[138103]:_any[178](?), ref arg elt[138107]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown runtimeTypesDiffer[138110] "dead at end of block" "insert auto destroy"
    (543024 'init var' runtimeTypesDiffer[138110] 0)
    (138113 'end of statement')
    unknown tmp[426538] "maybe param" "temp"
    (426549 'move' tmp[426538](354223 'is_subtype' _array[133588](?) eltType[138103]))
    unknown call_tmp[663521] "expr temp" "maybe param" "maybe type" "temp"
    (663524 'move' call_tmp[663521](426551 call _cond_invalid tmp[426538]))
    if call_tmp[663521]
    {
      (426554 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567744] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567745] "maybe param" "temp"
    unknown call_tmp[663526] "expr temp" "maybe param" "maybe type" "temp"
    (663529 'move' call_tmp[663526](426539 call isTrue tmp[426538]))
    (567750 'move' tmp[567745](567748 call _cond_test call_tmp[663526]))
    if tmp[567745]
    {
      (567755 'move' tmp[567744](567752 '_paramFoldLogical' tmp[567745] 1))
    }
    {
      unknown tmp[567757] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663531] "expr temp" "maybe param" "maybe type" "temp"
      (663534 'move' call_tmp[663531](354224 'is_subtype' _domain[125902](?) eltType[138103]))
      (567759 'move' tmp[567757](426543 call isTrue call_tmp[663531]))
      (567764 'move' tmp[567744](567761 '_paramFoldLogical' tmp[567745] tmp[567757]))
    }
    unknown call_tmp[663536] "expr temp" "maybe param" "maybe type" "temp"
    (663539 'move' call_tmp[663536](138243 call _cond_test tmp[567744]))
    if call_tmp[663536]
    {
      unknown call_tmp[663541] "expr temp" "maybe param" "maybe type" "temp"
      (663544 'move' call_tmp[663541](354225 'is_subtype' _array[133588](?) eltType[138103]))
      unknown call_tmp[663546] "expr temp" "maybe param" "maybe type" "temp"
      (663549 'move' call_tmp[663546](138169 call _cond_test call_tmp[663541]))
      if call_tmp[663546]
      {
        const lhsDomain[138136] "dead at end of block" "const" "ref var"
        unknown call_tmp[663551] "expr temp" "maybe param" "maybe type" "temp"
        (663554 'move' call_tmp[663551](138135 call chpl__domainFromArrayRuntimeType eltType[138103]))
        (543027 'move' lhsDomain[138136](543026 'addr of' call_tmp[663551]))
        (138139 'end of statement')
        const rhsDomain[138145] "dead at end of block" "const" "ref var"
        unknown call_tmp[663558] "expr temp" "maybe param" "maybe type" "temp"
        (663561 'move' call_tmp[663558](138142 call _dom _mt[243] elt[138107]))
        (543030 'move' rhsDomain[138145](543029 'addr of' call_tmp[663558]))
        (138148 'end of statement')
        unknown call_tmp[663565] "expr temp" "maybe param" "maybe type" "temp"
        (663568 'move' call_tmp[663565](138150 call _instance _mt[243] lhsDomain[138136]))
        unknown call_tmp[663572] "expr temp" "maybe param" "maybe type" "temp"
        (663575 'move' call_tmp[663572](138154 call _instance _mt[243] rhsDomain[138145]))
        unknown call_tmp[663577] "expr temp" "maybe param" "maybe type" "temp"
        (663580 'move' call_tmp[663577](138157 call != call_tmp[663565] call_tmp[663572]))
        unknown call_tmp[663582] "expr temp" "maybe param" "maybe type" "temp"
        (663585 'move' call_tmp[663582](138165 call _cond_test call_tmp[663577]))
        if call_tmp[663582]
        {
          (138161 call = runtimeTypesDiffer[138110] 1)
          (480549 'end of statement' runtimeTypesDiffer[138110])
        }
      }
      unknown call_tmp[663587] "expr temp" "maybe param" "maybe type" "temp"
      (663590 'move' call_tmp[663587](354226 'is_subtype' _domain[125902](?) eltType[138103]))
      unknown call_tmp[663592] "expr temp" "maybe param" "maybe type" "temp"
      (663595 'move' call_tmp[663592](138216 call _cond_test call_tmp[663587]))
      if call_tmp[663592]
      {
        const lhsDist[138183] "dead at end of block" "const" "ref var"
        unknown call_tmp[663597] "expr temp" "maybe param" "maybe type" "temp"
        (663600 'move' call_tmp[663597](138182 call chpl__distributionFromDomainRuntimeType eltType[138103]))
        (543033 'move' lhsDist[138183](543032 'addr of' call_tmp[663597]))
        (138186 'end of statement')
        const rhsDist[138192] "dead at end of block" "const" "ref var"
        unknown call_tmp[663604] "expr temp" "maybe param" "maybe type" "temp"
        (663607 'move' call_tmp[663604](138189 call dist _mt[243] elt[138107]))
        (543036 'move' rhsDist[138192](543035 'addr of' call_tmp[663604]))
        (138195 'end of statement')
        unknown call_tmp[663611] "expr temp" "maybe param" "maybe type" "temp"
        (663614 'move' call_tmp[663611](138197 call _instance _mt[243] lhsDist[138183]))
        unknown call_tmp[663618] "expr temp" "maybe param" "maybe type" "temp"
        (663621 'move' call_tmp[663618](138201 call _instance _mt[243] rhsDist[138192]))
        unknown call_tmp[663623] "expr temp" "maybe param" "maybe type" "temp"
        (663626 'move' call_tmp[663623](138204 call != call_tmp[663611] call_tmp[663618]))
        unknown call_tmp[663628] "expr temp" "maybe param" "maybe type" "temp"
        (663631 'move' call_tmp[663628](138212 call _cond_test call_tmp[663623]))
        if call_tmp[663628]
        {
          (138208 call = runtimeTypesDiffer[138110] 1)
          (480551 'end of statement' runtimeTypesDiffer[138110])
        }
      }
      unknown call_tmp[663633] "expr temp" "maybe param" "maybe type" "temp"
      (663636 'move' call_tmp[663633](138239 call _cond_test runtimeTypesDiffer[138110]))
      if call_tmp[663633]
      {
        unknown copy[138223] "dead at end of block" "no auto destroy"
        (543038 'init var' copy[138223] elt[138107] eltType[138103])
        (138226 'end of statement')
        (138231 call chpl__autoDestroy elt[138107])
        (480553 'end of statement')
        (138237 '=' elt[138107] copy[138223])
        (480554 'end of statement' copy[138223])
      }
    }
    (518939 return _void[55])
  }
  function fixEltRuntimeTypesAfterTransfer[138257](ref arg a[138254]:_array[133588](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[663640] "expr temp" "maybe param" "maybe type" "temp"
    (663643 'move' call_tmp[663640](138261 call eltType _mt[243] a[138254]))
    unknown call_tmp[663645] "expr temp" "maybe param" "maybe type" "temp"
    (663648 'move' call_tmp[663645](138265 call needsInitWorkaround call_tmp[663640]))
    unknown call_tmp[663650] "expr temp" "maybe param" "maybe type" "temp"
    (663653 'move' call_tmp[663650](138311 call _cond_test call_tmp[663645]))
    if call_tmp[663650]
    {
      unknown call_tmp[663657] "expr temp" "maybe param" "maybe type" "temp"
      (663660 'move' call_tmp[663657](415600 call _dom _mt[243] a[138254]))
      unknown call_tmp[663662] "maybe param" "maybe type" "temp"
      (663665 'move' call_tmp[663662](415596 call chpl__staticAutoLocalCheck a[138254] call_tmp[663657]))
      unknown chpl__staticAutoLocalCheckSym[415595] "dead at end of block" "param"
      (543040 'init var' chpl__staticAutoLocalCheckSym[415595] call_tmp[663662])
      (480556 'end of statement')
      if chpl__staticAutoLocalCheckSym[415595]
      {
        unknown call_tmp[663669] "expr temp" "maybe param" "maybe type" "temp"
        (663672 'move' call_tmp[663669](138268 call _dom _mt[243] a[138254]))
        Forall {
          induction variables:
            
            unknown ai[138290] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663669]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138275] "dead at end of block" "ref var"
            unknown call_tmp[663674] "expr temp" "maybe param" "maybe type" "temp"
            (663677 'move' call_tmp[663674](415606 'may be local access' a[138254] ai[138290] chpl__staticAutoLocalCheckSym[415595] 1))
            (543043 'move' aa[138275](543042 'addr of' call_tmp[663674]))
            (138278 'end of statement' ai[138290])
            unknown call_tmp[663681] "expr temp" "maybe param" "maybe type" "temp"
            (663684 'move' call_tmp[663681](138282 call eltType _mt[243] a[138254]))
            (138287 call fixRuntimeType call_tmp[663681] aa[138275])
            (480558 'end of statement' aa[138275])
          }
        }
      }
      {
        unknown call_tmp[663688] "expr temp" "maybe param" "maybe type" "temp"
        (663691 'move' call_tmp[663688](415592 call _dom _mt[243] a[138254]))
        Forall {
          induction variables:
            
            unknown ai[415589] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663688]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415575] "dead at end of block" "ref var"
            unknown call_tmp[663693] "expr temp" "maybe param" "maybe type" "temp"
            (663696 'move' call_tmp[663693](415577 call a[138254] ai[415589]))
            (543046 'move' aa[415575](543045 'addr of' call_tmp[663693]))
            (415580 'end of statement' ai[415589])
            unknown call_tmp[663700] "expr temp" "maybe param" "maybe type" "temp"
            (663703 'move' call_tmp[663700](415584 call eltType _mt[243] a[138254]))
            (415582 call fixRuntimeType call_tmp[663700] aa[415575])
            (480561 'end of statement' aa[415575])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138307] "index var" "insert auto destroy"
        iterated expressions:
          a[138254]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663707] "expr temp" "maybe param" "maybe type" "temp"
          (663710 'move' call_tmp[663707](138298 call eltType _mt[243] a[138254]))
          (138303 call fixRuntimeType call_tmp[663707] aa[138307])
          (480563 'end of statement' aa[138307])
        }
      }
    }
    (518941 return _void[55])
  }
  function chpl__uncheckedArrayTransfer[138326](ref arg a[138323]:_array[133588](?), arg b[138331]:_array[133588](?), param arg kind[138334]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown done[138337] "dead at end of block" "insert auto destroy"
    (543048 'init var' done[138337] 0)
    (138340 'end of statement')
    unknown call_tmp[663712] "expr temp" "maybe param" "maybe type" "temp"
    (663715 'move' call_tmp[663712](138346 call chpl__serializeAssignment a[138323] b[138331]))
    unknown call_tmp[663717] "expr temp" "maybe param" "maybe type" "temp"
    (663720 'move' call_tmp[663717](138347 call ! call_tmp[663712]))
    unknown call_tmp[663722] "expr temp" "maybe param" "maybe type" "temp"
    (663725 'move' call_tmp[663722](138463 call _cond_test call_tmp[663717]))
    if call_tmp[663722]
    {
      unknown call_tmp[663727] "expr temp" "maybe param" "maybe type" "temp"
      (663730 'move' call_tmp[663727](138354 call chpl__compatibleForBulkTransfer a[138323] b[138331] kind[138334]))
      unknown call_tmp[663732] "expr temp" "maybe param" "maybe type" "temp"
      (663735 'move' call_tmp[663732](138385 call _cond_test call_tmp[663727]))
      if call_tmp[663732]
      {
        unknown call_tmp[663737] "expr temp" "maybe param" "maybe type" "temp"
        (663740 'move' call_tmp[663737](138360 call chpl__bulkTransferArray a[138323] b[138331]))
        (138361 call = done[138337] call_tmp[663737])
        (480565 'end of statement' done[138337])
      }
      {
        unknown call_tmp[663742] "expr temp" "maybe param" "maybe type" "temp"
        (663745 'move' call_tmp[663742](138370 call chpl__compatibleForWidePtrBulkTransfer a[138323] b[138331] kind[138334]))
        unknown call_tmp[663747] "expr temp" "maybe param" "maybe type" "temp"
        (663750 'move' call_tmp[663747](138381 call _cond_test call_tmp[663742]))
        if call_tmp[663747]
        {
          unknown call_tmp[663752] "expr temp" "maybe param" "maybe type" "temp"
          (663755 'move' call_tmp[663752](138376 call chpl__bulkTransferPtrArray a[138323] b[138331]))
          (138377 call = done[138337] call_tmp[663752])
          (480567 'end of statement' done[138337])
        }
      }
      unknown call_tmp[663757] "expr temp" "maybe param" "maybe type" "temp"
      (663760 'move' call_tmp[663757](138459 call _cond_test done[138337]))
      if call_tmp[663757]
      {
        unknown tmp[426601] "maybe param" "temp"
        (426612 'move' tmp[426601](138397 call == kind[138334] initCopy[137983]))
        unknown call_tmp[663762] "expr temp" "maybe param" "maybe type" "temp"
        (663765 'move' call_tmp[663762](426614 call _cond_invalid tmp[426601]))
        if call_tmp[663762]
        {
          (426617 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567771] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567772] "maybe param" "temp"
        unknown call_tmp[663767] "expr temp" "maybe param" "maybe type" "temp"
        (663770 'move' call_tmp[663767](426602 call isTrue tmp[426601]))
        (567777 'move' tmp[567772](567775 call _cond_test call_tmp[663767]))
        if tmp[567772]
        {
          unknown tmp[567779] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[663774] "expr temp" "maybe param" "maybe type" "temp"
          (663777 'move' call_tmp[663774](138401 call eltType _mt[243] a[138323]))
          unknown call_tmp[663779] "expr temp" "maybe param" "maybe type" "temp"
          (663782 'move' call_tmp[663779](138405 call isPODType call_tmp[663774]))
          unknown call_tmp[663784] "expr temp" "maybe param" "maybe type" "temp"
          (663787 'move' call_tmp[663784](138406 call ! call_tmp[663779]))
          (567781 'move' tmp[567779](426605 call isTrue call_tmp[663784]))
          (567786 'move' tmp[567771](567783 '_paramFoldLogical' tmp[567772] tmp[567779]))
        }
        {
          (567791 'move' tmp[567771](567788 '_paramFoldLogical' tmp[567772] 0))
        }
        unknown call_tmp[663789] "expr temp" "maybe param" "maybe type" "temp"
        (663792 'move' call_tmp[663789](138453 call _cond_test tmp[567771]))
        if call_tmp[663789]
        {
          (138413 call initCopyAfterTransfer a[138323])
        }
        {
          unknown tmp[426559] "maybe param" "temp"
          (426570 'move' tmp[426559](138421 call == kind[138334] move[137981]))
          unknown call_tmp[663794] "expr temp" "maybe param" "maybe type" "temp"
          (663797 'move' call_tmp[663794](426572 call _cond_invalid tmp[426559]))
          if call_tmp[663794]
          {
            (426575 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567825] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[567826] "maybe param" "temp"
          unknown call_tmp[663799] "expr temp" "maybe param" "maybe type" "temp"
          (663802 'move' call_tmp[663799](426560 call isTrue tmp[426559]))
          (567831 'move' tmp[567826](567829 call _cond_test call_tmp[663799]))
          if tmp[567826]
          {
            unknown tmp[426580] "maybe param" "temp"
            unknown call_tmp[663806] "expr temp" "maybe param" "maybe type" "temp"
            (663809 'move' call_tmp[663806](138425 call eltType _mt[243] a[138323]))
            (426591 'move' tmp[426580](354227 'is_subtype' _array[133588](?) call_tmp[663806]))
            unknown call_tmp[663811] "expr temp" "maybe param" "maybe type" "temp"
            (663814 'move' call_tmp[663811](426593 call _cond_invalid tmp[426580]))
            if call_tmp[663811]
            {
              (426596 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[567798] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[567799] "maybe param" "temp"
            unknown call_tmp[663816] "expr temp" "maybe param" "maybe type" "temp"
            (663819 'move' call_tmp[663816](426581 call isTrue tmp[426580]))
            (567804 'move' tmp[567799](567802 call _cond_test call_tmp[663816]))
            if tmp[567799]
            {
              (567809 'move' tmp[567798](567806 '_paramFoldLogical' tmp[567799] 1))
            }
            {
              unknown tmp[567811] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[663823] "expr temp" "maybe param" "maybe type" "temp"
              (663826 'move' call_tmp[663823](138433 call eltType _mt[243] a[138323]))
              unknown call_tmp[663828] "expr temp" "maybe param" "maybe type" "temp"
              (663831 'move' call_tmp[663828](354228 'is_subtype' _domain[125902](?) call_tmp[663823]))
              (567813 'move' tmp[567811](426585 call isTrue call_tmp[663828]))
              (567818 'move' tmp[567798](567815 '_paramFoldLogical' tmp[567799] tmp[567811]))
            }
            unknown tmp[567833] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (567835 'move' tmp[567833](426563 call isTrue tmp[567798]))
            (567840 'move' tmp[567825](567837 '_paramFoldLogical' tmp[567826] tmp[567833]))
          }
          {
            (567845 'move' tmp[567825](567842 '_paramFoldLogical' tmp[567826] 0))
          }
          unknown call_tmp[663833] "expr temp" "maybe param" "maybe type" "temp"
          (663836 'move' call_tmp[663833](138449 call _cond_test tmp[567825]))
          if call_tmp[663833]
          {
            (138446 call fixEltRuntimeTypesAfterTransfer a[138323])
          }
        }
      }
    }
    unknown call_tmp[663838] "expr temp" "maybe param" "maybe type" "temp"
    (663841 'move' call_tmp[663838](138468 call ! done[138337]))
    unknown call_tmp[663843] "expr temp" "maybe param" "maybe type" "temp"
    (663846 'move' call_tmp[663843](138478 call _cond_test call_tmp[663838]))
    if call_tmp[663843]
    {
      (138475 call chpl__transferArray a[138323] b[138331] kind[138334])
    }
    (518943 return _void[55])
  }
  function chpl__compatibleForWidePtrBulkTransfer[138488](arg a[138486]:_any[178](?), arg b[138490]:_any[178](?), param arg kind[138496] :
  assign[137985] =
  assign[137985]) param : _unknown[51]
  {
    unknown ret[518947] "RVV" "param" "temp"
    unknown call_tmp[663848] "expr temp" "maybe param" "maybe type" "temp"
    (663851 'move' call_tmp[663848](138500 call ! useBulkPtrTransfer[113732]))
    unknown call_tmp[663853] "expr temp" "maybe param" "maybe type" "temp"
    (663856 'move' call_tmp[663853](138505 call _cond_test call_tmp[663848]))
    if call_tmp[663853]
    {
      (518952 'move' ret[518947](518951 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[518945] _end_chpl__compatibleForWidePtrBulkTransfer[518945]
    }
    unknown tmp[426622] "maybe param" "temp"
    unknown call_tmp[663860] "expr temp" "maybe param" "maybe type" "temp"
    (663863 'move' call_tmp[663860](138512 call _value _mt[243] a[138486]))
    (426633 'move' tmp[426622](138519 call(138515 call (partial) isDefaultRectangular _mt[243] call_tmp[663860])))
    unknown call_tmp[663867] "expr temp" "maybe param" "maybe type" "temp"
    (663870 'move' call_tmp[663867](426635 call _cond_invalid tmp[426622]))
    if call_tmp[663867]
    {
      (426638 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567852] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567853] "maybe param" "temp"
    unknown call_tmp[663872] "expr temp" "maybe param" "maybe type" "temp"
    (663875 'move' call_tmp[663872](426623 call isTrue tmp[426622]))
    (567858 'move' tmp[567853](567856 call _cond_test call_tmp[663872]))
    if tmp[567853]
    {
      unknown tmp[567860] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663879] "expr temp" "maybe param" "maybe type" "temp"
      (663882 'move' call_tmp[663879](138521 call _value _mt[243] b[138490]))
      unknown call_tmp[663886] "expr temp" "maybe param" "maybe type" "temp"
      (663889 'move' call_tmp[663886](138528 call(138524 call (partial) isDefaultRectangular _mt[243] call_tmp[663879])))
      (567862 'move' tmp[567860](426626 call isTrue call_tmp[663886]))
      (567867 'move' tmp[567852](567864 '_paramFoldLogical' tmp[567853] tmp[567860]))
    }
    {
      (567872 'move' tmp[567852](567869 '_paramFoldLogical' tmp[567853] 0))
    }
    unknown call_tmp[663891] "expr temp" "maybe param" "maybe type" "temp"
    (663894 'move' call_tmp[663891](138531 call ! tmp[567852]))
    unknown call_tmp[663896] "expr temp" "maybe param" "maybe type" "temp"
    (663899 'move' call_tmp[663896](138536 call _cond_test call_tmp[663891]))
    if call_tmp[663896]
    {
      (518957 'move' ret[518947](518956 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[518945] _end_chpl__compatibleForWidePtrBulkTransfer[518945]
    }
    unknown call_tmp[663903] "expr temp" "maybe param" "maybe type" "temp"
    (663906 'move' call_tmp[663903](138542 call eltType _mt[243] a[138486]))
    unknown call_tmp[663910] "expr temp" "maybe param" "maybe type" "temp"
    (663913 'move' call_tmp[663910](138546 call eltType _mt[243] b[138490]))
    unknown call_tmp[663915] "expr temp" "maybe param" "maybe type" "temp"
    (663918 'move' call_tmp[663915](138549 call != call_tmp[663903] call_tmp[663910]))
    unknown call_tmp[663920] "expr temp" "maybe param" "maybe type" "temp"
    (663923 'move' call_tmp[663920](138554 call _cond_test call_tmp[663915]))
    if call_tmp[663920]
    {
      (518962 'move' ret[518947](518961 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[518945] _end_chpl__compatibleForWidePtrBulkTransfer[518945]
    }
    unknown call_tmp[663927] "expr temp" "maybe param" "maybe type" "temp"
    (663930 'move' call_tmp[663927](138561 call eltType _mt[243] a[138486]))
    unknown call_tmp[663932] "expr temp" "maybe param" "maybe type" "temp"
    (663935 'move' call_tmp[663932](138565 call isClass call_tmp[663927]))
    unknown call_tmp[663937] "expr temp" "maybe param" "maybe type" "temp"
    (663940 'move' call_tmp[663937](138566 call ! call_tmp[663932]))
    unknown call_tmp[663942] "expr temp" "maybe param" "maybe type" "temp"
    (663945 'move' call_tmp[663942](138571 call _cond_test call_tmp[663937]))
    if call_tmp[663942]
    {
      (518967 'move' ret[518947](518966 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[518945] _end_chpl__compatibleForWidePtrBulkTransfer[518945]
    }
    unknown call_tmp[663949] "expr temp" "maybe param" "maybe type" "temp"
    (663952 'move' call_tmp[663949](138578 call eltType _mt[243] a[138486]))
    unknown call_tmp[663954] "expr temp" "maybe param" "maybe type" "temp"
    (663957 'move' call_tmp[663954](138582 call isOwnedClass call_tmp[663949]))
    unknown call_tmp[663959] "expr temp" "maybe param" "maybe type" "temp"
    (663962 'move' call_tmp[663959](138586 call _cond_test call_tmp[663954]))
    if call_tmp[663959]
    {
      (518972 'move' ret[518947](518971 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[518945] _end_chpl__compatibleForWidePtrBulkTransfer[518945]
    }
    unknown call_tmp[663966] "expr temp" "maybe param" "maybe type" "temp"
    (663969 'move' call_tmp[663966](138593 call eltType _mt[243] a[138486]))
    unknown call_tmp[663971] "expr temp" "maybe param" "maybe type" "temp"
    (663974 'move' call_tmp[663971](138597 call isSharedClass call_tmp[663966]))
    unknown call_tmp[663976] "expr temp" "maybe param" "maybe type" "temp"
    (663979 'move' call_tmp[663976](138601 call _cond_test call_tmp[663971]))
    if call_tmp[663976]
    {
      (518977 'move' ret[518947](518976 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[518945] _end_chpl__compatibleForWidePtrBulkTransfer[518945]
    }
    (518982 'move' ret[518947](518981 'deref' 1))
    label _end_chpl__compatibleForWidePtrBulkTransfer[518945]
    (518949 return ret[518947])
  }
  function chpl__bulkTransferPtrArray[138619](ref arg a[138616]:_array[133588](?), arg b[138624]:_array[133588](?)) : _unknown[51] "inline"
  {
    unknown ret[518986] "RVV" "temp"
    unknown call_tmp[663983] "maybe param" "maybe type" "temp"
    (663986 'move' call_tmp[663983](138628 call _dom _mt[243] a[138616]))
    const aDom[138631] "dead at end of block" "const" "insert auto destroy"
    (543050 'init var' aDom[138631] call_tmp[663983])
    (138634 'end of statement')
    unknown call_tmp[663990] "maybe param" "maybe type" "temp"
    (663993 'move' call_tmp[663990](138637 call _dom _mt[243] b[138624]))
    const bDom[138640] "dead at end of block" "const" "insert auto destroy"
    (543052 'init var' bDom[138640] call_tmp[663990])
    (138643 'end of statement')
    unknown call_tmp[663995] "expr temp" "maybe param" "maybe type" "temp"
    (663998 'move' call_tmp[663995](138646 call != aDom[138631] bDom[138640]))
    unknown call_tmp[664000] "expr temp" "maybe param" "maybe type" "temp"
    (664003 'move' call_tmp[664000](138651 call _cond_test call_tmp[663995]))
    if call_tmp[664000]
    {
      (518991 'move' ret[518986](518990 'deref' 0))
      gotoReturn _end_chpl__bulkTransferPtrArray[518984] _end_chpl__bulkTransferPtrArray[518984]
    }
    unknown call_tmp[664007] "expr temp" "maybe param" "maybe type" "temp"
    (664010 'move' call_tmp[664007](138676 call low _mt[243] aDom[138631]))
    unknown call_tmp[664012] "expr temp" "maybe param" "maybe type" "temp"
    (664015 'move' call_tmp[664012](138680 call a[138616] call_tmp[664007]))
    unknown call_tmp[664017] "expr temp" "maybe param" "maybe type" "temp"
    (664020 'move' call_tmp[664017](138681 'is wide pointer' call_tmp[664012]))
    unknown call_tmp[664022] "expr temp" "maybe param" "maybe type" "temp"
    (664025 'move' call_tmp[664022](138692 call _cond_test call_tmp[664017]))
    if call_tmp[664022]
    {
      unknown call_tmp[664027] "expr temp" "maybe param" "maybe type" "temp"
      (664030 'move' call_tmp[664027](138688 call chpl__bulkTransferArray a[138616] aDom[138631] b[138624] bDom[138640]))
      (518996 'move' ret[518986](518995 'deref' call_tmp[664027]))
      gotoReturn _end_chpl__bulkTransferPtrArray[518984] _end_chpl__bulkTransferPtrArray[518984]
      (480583 'end of statement' aDom[138631] bDom[138640])
    }
    (519001 'move' ret[518986](519000 'deref' 0))
    label _end_chpl__bulkTransferPtrArray[518984]
    (518988 return ret[518986])
  }
  function chpl__bulkTransferArray[138711](ref arg a[138708]:_array[133588](?), arg b[138718]:_array[133588](?)) : _unknown[51] "inline"
  {
    unknown ret[519005] "RVV" "temp"
    unknown call_tmp[664034] "expr temp" "maybe param" "maybe type" "temp"
    (664037 'move' call_tmp[664034](461416 call _dom _mt[243] a[138708]))
    unknown call_tmp[664041] "expr temp" "maybe param" "maybe type" "temp"
    (664044 'move' call_tmp[664041](461422 call _dom _mt[243] b[138718]))
    unknown call_tmp[664046] "expr temp" "maybe param" "maybe type" "temp"
    (664049 'move' call_tmp[664046](138727 call chpl__bulkTransferArray a[138708] call_tmp[664034] b[138718] call_tmp[664041]))
    (519010 'move' ret[519005](519009 'deref' call_tmp[664046]))
    (519007 return ret[519005])
  }
  function chpl__bulkTransferArray[138741](ref arg a[138738]:_array[133588](?), arg AD[138744]:_domain[125902](?), const  ref arg b[138750]:_array[133588](?), arg BD[138754]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[519014] "RVV" "temp"
    unknown call_tmp[664053] "expr temp" "maybe param" "maybe type" "temp"
    (664056 'move' call_tmp[664053](138759 call _value _mt[243] a[138738]))
    unknown call_tmp[664060] "expr temp" "maybe param" "maybe type" "temp"
    (664063 'move' call_tmp[664060](138765 call _value _mt[243] b[138750]))
    unknown call_tmp[664065] "expr temp" "maybe param" "maybe type" "temp"
    (664068 'move' call_tmp[664065](138769 call chpl__bulkTransferArray call_tmp[664053] AD[138744] call_tmp[664060] BD[138754]))
    (519019 'move' ret[519014](519018 'deref' call_tmp[664065]))
    (519016 return ret[519014])
  }
  function chpl__bulkTransferArray[138779](arg destClass[138777]:_any[178](?), arg destDom[138782]:_domain[125902](?), arg srcClass[138785]:_any[178](?), arg srcDom[138788]:_domain[125902](?)) : _unknown[51] "inline"
  {
    unknown ret[519025] "RVV" "temp"
    unknown success[138792] "dead at end of block" "insert auto destroy"
    (543054 'init var' success[138792] 0)
    (138795 'end of statement')
    function bulkTransferDebug[138803](arg msg[138800]:string[26]) : _unknown[51] "inline" "no return value for void"
    {
      unknown call_tmp[664070] "expr temp" "maybe param" "maybe type" "temp"
      (664073 'move' call_tmp[664070](138828 call _cond_test debugBulkTransfer[113717]))
      if call_tmp[664070]
      {
        (138826 call chpl_debug_writeln "proc =(a:[],b:[]): " msg[138800])
      }
      (519021 return _void[55])
    }
    (138855 call bulkTransferDebug "in chpl__bulkTransferArray")
    (480590 'end of statement')
    unknown call_tmp[664075] "expr temp" "maybe param" "maybe type" "temp"
    (664078 'move' call_tmp[664075](138883 call canResolveMethod module=[255] Reflection[224794] destClass[138777] "doiBulkTransferFromKnown" destDom[138782] srcClass[138785] srcDom[138788]))
    unknown call_tmp[664080] "expr temp" "maybe param" "maybe type" "temp"
    (664083 'move' call_tmp[664080](139119 call _cond_test call_tmp[664075]))
    if call_tmp[664080]
    {
      (138903 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (480591 'end of statement')
      unknown call_tmp[664087] "expr temp" "maybe param" "maybe type" "temp"
      (664090 'move' call_tmp[664087](138915 call(138908 call (partial) doiBulkTransferFromKnown _mt[243] destClass[138777]) destDom[138782] srcClass[138785] srcDom[138788]))
      (138916 call = success[138792] call_tmp[664087])
      (480592 'end of statement' success[138792])
    }
    {
      unknown call_tmp[664092] "expr temp" "maybe param" "maybe type" "temp"
      (664095 'move' call_tmp[664092](138945 call canResolveMethod module=[255] Reflection[224794] srcClass[138785] "doiBulkTransferToKnown" srcDom[138788] destClass[138777] destDom[138782]))
      unknown call_tmp[664097] "expr temp" "maybe param" "maybe type" "temp"
      (664100 'move' call_tmp[664097](139114 call _cond_test call_tmp[664092]))
      if call_tmp[664097]
      {
        (138965 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (480594 'end of statement')
        unknown call_tmp[664104] "expr temp" "maybe param" "maybe type" "temp"
        (664107 'move' call_tmp[664104](138977 call(138970 call (partial) doiBulkTransferToKnown _mt[243] srcClass[138785]) srcDom[138788] destClass[138777] destDom[138782]))
        (138978 call = success[138792] call_tmp[664104])
        (480595 'end of statement' success[138792])
      }
      {
        unknown call_tmp[664109] "expr temp" "maybe param" "maybe type" "temp"
        (664112 'move' call_tmp[664109](139007 call canResolveMethod module=[255] Reflection[224794] destClass[138777] "doiBulkTransferFromAny" destDom[138782] srcClass[138785] srcDom[138788]))
        unknown call_tmp[664114] "expr temp" "maybe param" "maybe type" "temp"
        (664117 'move' call_tmp[664114](139109 call _cond_test call_tmp[664109]))
        if call_tmp[664114]
        {
          (139027 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (480597 'end of statement')
          unknown call_tmp[664121] "expr temp" "maybe param" "maybe type" "temp"
          (664124 'move' call_tmp[664121](139039 call(139032 call (partial) doiBulkTransferFromAny _mt[243] destClass[138777]) destDom[138782] srcClass[138785] srcDom[138788]))
          (139040 call = success[138792] call_tmp[664121])
          (480598 'end of statement' success[138792])
        }
        {
          unknown call_tmp[664126] "expr temp" "maybe param" "maybe type" "temp"
          (664129 'move' call_tmp[664126](139069 call canResolveMethod module=[255] Reflection[224794] srcClass[138785] "doiBulkTransferToAny" srcDom[138788] destClass[138777] destDom[138782]))
          unknown call_tmp[664131] "expr temp" "maybe param" "maybe type" "temp"
          (664134 'move' call_tmp[664131](139105 call _cond_test call_tmp[664126]))
          if call_tmp[664131]
          {
            (139089 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (480600 'end of statement')
            unknown call_tmp[664138] "expr temp" "maybe param" "maybe type" "temp"
            (664141 'move' call_tmp[664138](139101 call(139094 call (partial) doiBulkTransferToAny _mt[243] srcClass[138785]) srcDom[138788] destClass[138777] destDom[138782]))
            (139102 call = success[138792] call_tmp[664138])
            (480601 'end of statement' success[138792])
          }
          (360136 'referenced modules list' Reflection[224794])
        }
        (360129 'referenced modules list' Reflection[224794])
      }
      (360122 'referenced modules list' Reflection[224794])
    }
    unknown call_tmp[664143] "expr temp" "maybe param" "maybe type" "temp"
    (664146 'move' call_tmp[664143](139167 call _cond_test success[138792]))
    if call_tmp[664143]
    {
      (139144 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (139165 call bulkTransferDebug "bulk transfer did not happen")
    }
    (519030 'move' ret[519025](519029 'deref' success[138792]))
    gotoReturn _end_chpl__bulkTransferArray[519023] _end_chpl__bulkTransferArray[519023]
    (480605 'end of statement' success[138792])
    label _end_chpl__bulkTransferArray[519023]
    (519027 return ret[519025])
    (360115 'referenced modules list' Reflection[224794])
  }
  function chpl__transferArray[139186](ref arg a[139183]:_array[133588](?), const  ref arg b[139188]:_any[178](?), param arg kind[139194] :
  assign[137985] =
  assign[137985]) : _unknown[51] "inline" "ignore transfer errors" "find user line" "no return value for void"
  {
    unknown tmp[426664] "maybe param" "temp"
    unknown call_tmp[664150] "expr temp" "maybe param" "maybe type" "temp"
    (664153 'move' call_tmp[664150](139204 call eltType _mt[243] a[139183]))
    unknown call_tmp[664155] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (664158 'move' call_tmp[664155](139208 'typeof' b[139188]))
    (426675 'move' tmp[426664](139209 call == call_tmp[664150] call_tmp[664155]))
    unknown call_tmp[664160] "expr temp" "maybe param" "maybe type" "temp"
    (664163 'move' call_tmp[664160](426677 call _cond_invalid tmp[426664]))
    if call_tmp[664160]
    {
      (426680 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567906] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567907] "maybe param" "temp"
    unknown call_tmp[664165] "expr temp" "maybe param" "maybe type" "temp"
    (664168 'move' call_tmp[664165](426665 call isTrue tmp[426664]))
    (567912 'move' tmp[567907](567910 call _cond_test call_tmp[664165]))
    if tmp[567907]
    {
      (567917 'move' tmp[567906](567914 '_paramFoldLogical' tmp[567907] 1))
    }
    {
      unknown tmp[426685] "maybe param" "temp"
      unknown call_tmp[664172] "expr temp" "maybe param" "maybe type" "temp"
      (664175 'move' call_tmp[664172](139213 call eltType _mt[243] a[139183]))
      (426696 'move' tmp[426685](139217 call _isPrimitiveType call_tmp[664172]))
      unknown call_tmp[664177] "expr temp" "maybe param" "maybe type" "temp"
      (664180 'move' call_tmp[664177](426698 call _cond_invalid tmp[426685]))
      if call_tmp[664177]
      {
        (426701 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567879] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567880] "maybe param" "temp"
      unknown call_tmp[664182] "expr temp" "maybe param" "maybe type" "temp"
      (664185 'move' call_tmp[664182](426686 call isTrue tmp[426685]))
      (567885 'move' tmp[567880](567883 call _cond_test call_tmp[664182]))
      if tmp[567880]
      {
        unknown tmp[567887] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664187] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (664190 'move' call_tmp[664187](139220 'typeof' b[139188]))
        unknown call_tmp[664192] "expr temp" "maybe param" "maybe type" "temp"
        (664195 'move' call_tmp[664192](139222 call _isPrimitiveType call_tmp[664187]))
        (567889 'move' tmp[567887](426689 call isTrue call_tmp[664192]))
        (567894 'move' tmp[567879](567891 '_paramFoldLogical' tmp[567880] tmp[567887]))
      }
      {
        (567899 'move' tmp[567879](567896 '_paramFoldLogical' tmp[567880] 0))
      }
      unknown tmp[567919] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (567921 'move' tmp[567919](426669 call isTrue tmp[567879]))
      (567926 'move' tmp[567906](567923 '_paramFoldLogical' tmp[567907] tmp[567919]))
    }
    unknown call_tmp[664197] "expr temp" "maybe param" "maybe type" "temp"
    (664200 'move' call_tmp[664197](140109 call _cond_test tmp[567906]))
    if call_tmp[664197]
    {
      unknown tmp[426643] "maybe param" "temp"
      (426654 'move' tmp[426643](139232 call == kind[139194] move[137981]))
      unknown call_tmp[664202] "expr temp" "maybe param" "maybe type" "temp"
      (664205 'move' call_tmp[664202](426656 call _cond_invalid tmp[426643]))
      if call_tmp[664202]
      {
        (426659 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[567933] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567934] "maybe param" "temp"
      unknown call_tmp[664207] "expr temp" "maybe param" "maybe type" "temp"
      (664210 'move' call_tmp[664207](426644 call isTrue tmp[426643]))
      (567939 'move' tmp[567934](567937 call _cond_test call_tmp[664207]))
      if tmp[567934]
      {
        (567944 'move' tmp[567933](567941 '_paramFoldLogical' tmp[567934] 1))
      }
      {
        unknown tmp[567946] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664212] "expr temp" "maybe param" "maybe type" "temp"
        (664215 'move' call_tmp[664212](139239 call == kind[139194] initCopy[137983]))
        (567948 'move' tmp[567946](426648 call isTrue call_tmp[664212]))
        (567953 'move' tmp[567933](567950 '_paramFoldLogical' tmp[567934] tmp[567946]))
      }
      unknown call_tmp[664217] "expr temp" "maybe param" "maybe type" "temp"
      (664220 'move' call_tmp[664217](139354 call _cond_test tmp[567933]))
      if call_tmp[664217]
      {
        unknown call_tmp[664224] "expr temp" "maybe param" "maybe type" "temp"
        (664227 'move' call_tmp[664224](139245 call eltType _mt[243] a[139183]))
        unknown call_tmp[664229] "expr temp" "maybe param" "maybe type" "temp"
        (664232 'move' call_tmp[664229](139249 call needsInitWorkaround call_tmp[664224]))
        unknown call_tmp[664234] "expr temp" "maybe param" "maybe type" "temp"
        (664237 'move' call_tmp[664234](139319 call _cond_test call_tmp[664229]))
        if call_tmp[664234]
        {
          unknown call_tmp[664241] "expr temp" "maybe param" "maybe type" "temp"
          (664244 'move' call_tmp[664241](415650 call _dom _mt[243] a[139183]))
          unknown call_tmp[664246] "maybe param" "maybe type" "temp"
          (664249 'move' call_tmp[664246](415646 call chpl__staticAutoLocalCheck a[139183] call_tmp[664241]))
          unknown chpl__staticAutoLocalCheckSym[415645] "dead at end of block" "param"
          (543056 'init var' chpl__staticAutoLocalCheckSym[415645] call_tmp[664246])
          (480609 'end of statement')
          if chpl__staticAutoLocalCheckSym[415645]
          {
            unknown call_tmp[664253] "expr temp" "maybe param" "maybe type" "temp"
            (664256 'move' call_tmp[664253](139252 call _dom _mt[243] a[139183]))
            Forall {
              induction variables:
                
                unknown ai[139286] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664253]
              shadow variables:
                b[139256] 'in' intent outer var b[139188]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[139265] "dead at end of block" "ref var"
                unknown call_tmp[664258] "expr temp" "maybe param" "maybe type" "temp"
                (664261 'move' call_tmp[664258](415656 'may be local access' a[139183] ai[139286] chpl__staticAutoLocalCheckSym[415645] 1))
                (543059 'move' aa[139265](543058 'addr of' call_tmp[664258]))
                (139268 'end of statement')
                unknown call_tmp[664265] "maybe param" "maybe type" "temp"
                (664268 'move' call_tmp[664265](139271 call eltType _mt[243] a[139183]))
                unknown copy[139275] "dead at end of block" "no auto destroy"
                (543061 'init var' copy[139275] b[139256] call_tmp[664265])
                (139278 'end of statement' ai[139286] b[139256])
                (139283 '=' aa[139265] copy[139275])
                (480612 'end of statement' aa[139265] copy[139275])
              }
            }
          }
          {
            unknown call_tmp[664272] "expr temp" "maybe param" "maybe type" "temp"
            (664275 'move' call_tmp[664272](415635 call _dom _mt[243] a[139183]))
            Forall {
              induction variables:
                
                unknown ai[415632] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664272]
              shadow variables:
                b[415639] 'in' intent outer var b[139188]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[415614] "dead at end of block" "ref var"
                unknown call_tmp[664277] "expr temp" "maybe param" "maybe type" "temp"
                (664280 'move' call_tmp[664277](415616 call a[139183] ai[415632]))
                (543064 'move' aa[415614](543063 'addr of' call_tmp[664277]))
                (415619 'end of statement')
                unknown call_tmp[664284] "maybe param" "maybe type" "temp"
                (664287 'move' call_tmp[664284](415623 call eltType _mt[243] a[139183]))
                unknown copy[415620] "dead at end of block" "no auto destroy"
                (543066 'init var' copy[415620] b[415639] call_tmp[664284])
                (415627 'end of statement' ai[415632] b[415639])
                (415628 '=' aa[415614] copy[415620])
                (480617 'end of statement' aa[415614] copy[415620])
              }
            }
          }
        }
        {
          Forall {
            induction variables:
              
              unknown aa[139315] "index var" "insert auto destroy"
            iterated expressions:
              a[139183]
            shadow variables:
              b[139293] 'in' intent outer var b[139188]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown call_tmp[664291] "maybe param" "maybe type" "temp"
              (664294 'move' call_tmp[664291](139299 call eltType _mt[243] a[139183]))
              unknown copy[139303] "dead at end of block" "no auto destroy"
              (543068 'init var' copy[139303] b[139293] call_tmp[664291])
              (139306 'end of statement' b[139293])
              (139312 '=' aa[139315] copy[139303])
              (480621 'end of statement' aa[139315] copy[139303])
            }
          }
        }
      }
      {
        unknown call_tmp[664296] "expr temp" "maybe param" "maybe type" "temp"
        (664299 'move' call_tmp[664296](139329 call == kind[139194] assign[137985]))
        unknown call_tmp[664301] "expr temp" "maybe param" "maybe type" "temp"
        (664304 'move' call_tmp[664301](139350 call _cond_test call_tmp[664296]))
        if call_tmp[664301]
        {
          Forall {
            induction variables:
              
              unknown aa[139346] "index var" "insert auto destroy"
            iterated expressions:
              a[139183]
            shadow variables:
              b[139334] 'in' intent outer var b[139188]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              (139341 call = aa[139346] b[139334])
              (480624 'end of statement' aa[139346] b[139334])
            }
          }
        }
      }
    }
    {
      unknown call_tmp[664306] "expr temp" "maybe param" "maybe type" "temp"
      (664309 'move' call_tmp[664306](139364 call chpl__serializeAssignment a[139183] b[139188]))
      unknown call_tmp[664311] "expr temp" "maybe param" "maybe type" "temp"
      (664314 'move' call_tmp[664311](140105 call _cond_test call_tmp[664306]))
      if call_tmp[664311]
      {
        unknown call_tmp[664316] "expr temp" "maybe param" "maybe type" "temp"
        (664319 'move' call_tmp[664316](139370 call == kind[139194] move[137981]))
        unknown call_tmp[664321] "expr temp" "maybe param" "maybe type" "temp"
        (664324 'move' call_tmp[664321](139851 call _cond_test call_tmp[664316]))
        if call_tmp[664321]
        {
          unknown call_tmp[664328] "expr temp" "maybe param" "maybe type" "temp"
          (664331 'move' call_tmp[664328](139374 call eltType _mt[243] a[139183]))
          unknown call_tmp[664333] "expr temp" "maybe param" "maybe type" "temp"
          (664336 'move' call_tmp[664333](139378 call needsInitWorkaround call_tmp[664328]))
          unknown call_tmp[664338] "expr temp" "maybe param" "maybe type" "temp"
          (664341 'move' call_tmp[664338](139572 call _cond_test call_tmp[664333]))
          if call_tmp[664338]
          {
            {
              unknown _indexOfInterest[139434] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139435] "expr temp" "temp"
              unknown call_tmp[664345] "expr temp" "maybe param" "maybe type" "temp"
              (664348 'move' call_tmp[664345](139444 call _dom _mt[243] a[139183]))
              unknown call_tmp[664350] "expr temp" "maybe param" "maybe type" "temp"
              (664353 'move' call_tmp[664350](139447 call _getIterator call_tmp[664345]))
              unknown call_tmp[664355] "expr temp" "maybe param" "maybe type" "temp"
              (664358 'move' call_tmp[664355](139451 call _getIterator b[139188]))
              (139453 'move' _iterator[139435](139390 call _build_tuple call_tmp[664350] call_tmp[664355]))
              Defer
              {
                {
                  (139483 call _freeIterator _iterator[139435])
                }
              }
              { scopeless type
                (139458 'move' _indexOfInterest[139434](139455 call iteratorIndex _iterator[139435]))
              }
              ForLoop[139436]
              {
                (139463 call _check_tuple_var_decl _indexOfInterest[139434] 2)
                (480628 'end of statement')
                unknown ai[139469] "index var" "insert auto destroy"
                (480629 'end of statement')
                (139471 'move' ai[139469](139467 call _indexOfInterest[139434] 0))
                (480630 'end of statement' ai[139469])
                unknown bb[139476] "index var" "insert auto destroy"
                (480632 'end of statement')
                (139478 'move' bb[139476](139474 call _indexOfInterest[139434] 1))
                (480633 'end of statement' bb[139476])
                {
                  unknown aa[139395] "dead at end of block" "ref var"
                  unknown call_tmp[664360] "expr temp" "maybe param" "maybe type" "temp"
                  (664363 'move' call_tmp[664360](139394 call a[139183] ai[139469]))
                  (543071 'move' aa[139395](543070 'addr of' call_tmp[664360]))
                  (139398 'end of statement' ai[139469])
                  unknown call_tmp[664365] "expr temp" "maybe param" "maybe type" "temp"
                  (664368 'move' call_tmp[664365](139422 'steal' bb[139476]))
                  (139423 '=' aa[139395] call_tmp[664365])
                  (480636 'end of statement' aa[139395] bb[139476])
                  unknown call_tmp[664372] "expr temp" "maybe param" "maybe type" "temp"
                  (664375 'move' call_tmp[664372](139427 call eltType _mt[243] a[139183]))
                  (139432 call fixRuntimeType call_tmp[664372] aa[139395])
                  (480639 'end of statement' aa[139395])
                }
                label _continueLabel[139439]
                _indexOfInterest[139434]
                _iterator[139435]
              }
              label _breakLabel[139440]
            }
          }
          {
            {
              unknown _indexOfInterest[139519] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139520] "expr temp" "temp"
              unknown call_tmp[664377] "expr temp" "maybe param" "maybe type" "temp"
              (664380 'move' call_tmp[664377](139529 call _getIterator a[139183]))
              unknown call_tmp[664382] "expr temp" "maybe param" "maybe type" "temp"
              (664385 'move' call_tmp[664382](139532 call _getIterator b[139188]))
              (139534 'move' _iterator[139520](139499 call _build_tuple call_tmp[664377] call_tmp[664382]))
              Defer
              {
                {
                  (139564 call _freeIterator _iterator[139520])
                }
              }
              { scopeless type
                (139539 'move' _indexOfInterest[139519](139536 call iteratorIndex _iterator[139520]))
              }
              ForLoop[139521]
              {
                (139544 call _check_tuple_var_decl _indexOfInterest[139519] 2)
                (480642 'end of statement')
                unknown aa[139550] "index var" "insert auto destroy"
                (480643 'end of statement')
                (139552 'move' aa[139550](139548 call _indexOfInterest[139519] 0))
                (480644 'end of statement' aa[139550])
                unknown bb[139557] "index var" "insert auto destroy"
                (480646 'end of statement')
                (139559 'move' bb[139557](139555 call _indexOfInterest[139519] 1))
                (480647 'end of statement' bb[139557])
                {
                  unknown call_tmp[664387] "expr temp" "maybe param" "maybe type" "temp"
                  (664390 'move' call_tmp[664387](139506 'steal' bb[139557]))
                  (139507 '=' aa[139550] call_tmp[664387])
                  (480649 'end of statement' aa[139550] bb[139557])
                  unknown call_tmp[664394] "expr temp" "maybe param" "maybe type" "temp"
                  (664397 'move' call_tmp[664394](139512 call eltType _mt[243] a[139183]))
                  (139517 call fixRuntimeType call_tmp[664394] aa[139550])
                  (480652 'end of statement' aa[139550])
                }
                label _continueLabel[139524]
                _indexOfInterest[139519]
                _iterator[139520]
              }
              label _breakLabel[139525]
            }
          }
        }
        {
          unknown call_tmp[664399] "expr temp" "maybe param" "maybe type" "temp"
          (664402 'move' call_tmp[664399](139582 call == kind[139194] initCopy[137983]))
          unknown call_tmp[664404] "expr temp" "maybe param" "maybe type" "temp"
          (664407 'move' call_tmp[664404](139846 call _cond_test call_tmp[664399]))
          if call_tmp[664404]
          {
            unknown call_tmp[664411] "expr temp" "maybe param" "maybe type" "temp"
            (664414 'move' call_tmp[664411](139586 call eltType _mt[243] a[139183]))
            unknown call_tmp[664416] "expr temp" "maybe param" "maybe type" "temp"
            (664419 'move' call_tmp[664416](139590 call needsInitWorkaround call_tmp[664411]))
            unknown call_tmp[664421] "expr temp" "maybe param" "maybe type" "temp"
            (664424 'move' call_tmp[664421](139762 call _cond_test call_tmp[664416]))
            if call_tmp[664421]
            {
              {
                unknown _indexOfInterest[139627] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139628] "expr temp" "temp"
                unknown call_tmp[664428] "expr temp" "maybe param" "maybe type" "temp"
                (664431 'move' call_tmp[664428](139637 call _dom _mt[243] a[139183]))
                unknown call_tmp[664433] "expr temp" "maybe param" "maybe type" "temp"
                (664436 'move' call_tmp[664433](139640 call _getIterator call_tmp[664428]))
                unknown call_tmp[664438] "expr temp" "maybe param" "maybe type" "temp"
                (664441 'move' call_tmp[664438](139644 call _getIterator b[139188]))
                (139646 'move' _iterator[139628](139602 call _build_tuple call_tmp[664433] call_tmp[664438]))
                Defer
                {
                  {
                    (139676 call _freeIterator _iterator[139628])
                  }
                }
                { scopeless type
                  (139651 'move' _indexOfInterest[139627](139648 call iteratorIndex _iterator[139628]))
                }
                ForLoop[139629]
                {
                  (139656 call _check_tuple_var_decl _indexOfInterest[139627] 2)
                  (480655 'end of statement')
                  unknown ai[139662] "index var" "insert auto destroy"
                  (480656 'end of statement')
                  (139664 'move' ai[139662](139660 call _indexOfInterest[139627] 0))
                  (480657 'end of statement' ai[139662])
                  unknown bb[139669] "index var" "insert auto destroy"
                  (480659 'end of statement')
                  (139671 'move' bb[139669](139667 call _indexOfInterest[139627] 1))
                  (480660 'end of statement' bb[139669])
                  {
                    unknown aa[139607] "dead at end of block" "ref var"
                    unknown call_tmp[664443] "expr temp" "maybe param" "maybe type" "temp"
                    (664446 'move' call_tmp[664443](139606 call a[139183] ai[139662]))
                    (543074 'move' aa[139607](543073 'addr of' call_tmp[664443]))
                    (139610 'end of statement')
                    unknown call_tmp[664450] "maybe param" "maybe type" "temp"
                    (664453 'move' call_tmp[664450](139613 call eltType _mt[243] a[139183]))
                    unknown copy[139617] "dead at end of block" "no auto destroy"
                    (543076 'init var' copy[139617] b[139188] call_tmp[664450])
                    (139620 'end of statement' ai[139662])
                    (139625 '=' aa[139607] copy[139617])
                    (480663 'end of statement' aa[139607] copy[139617])
                  }
                  label _continueLabel[139632]
                  _indexOfInterest[139627]
                  _iterator[139628]
                }
                label _breakLabel[139633]
              }
            }
            {
              {
                unknown _indexOfInterest[139709] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139710] "expr temp" "temp"
                unknown call_tmp[664455] "expr temp" "maybe param" "maybe type" "temp"
                (664458 'move' call_tmp[664455](139719 call _getIterator a[139183]))
                unknown call_tmp[664460] "expr temp" "maybe param" "maybe type" "temp"
                (664463 'move' call_tmp[664460](139722 call _getIterator b[139188]))
                (139724 'move' _iterator[139710](139692 call _build_tuple call_tmp[664455] call_tmp[664460]))
                Defer
                {
                  {
                    (139754 call _freeIterator _iterator[139710])
                  }
                }
                { scopeless type
                  (139729 'move' _indexOfInterest[139709](139726 call iteratorIndex _iterator[139710]))
                }
                ForLoop[139711]
                {
                  (139734 call _check_tuple_var_decl _indexOfInterest[139709] 2)
                  (480667 'end of statement')
                  unknown aa[139740] "index var" "insert auto destroy"
                  (480668 'end of statement')
                  (139742 'move' aa[139740](139738 call _indexOfInterest[139709] 0))
                  (480669 'end of statement' aa[139740])
                  unknown bb[139747] "index var" "insert auto destroy"
                  (480671 'end of statement')
                  (139749 'move' bb[139747](139745 call _indexOfInterest[139709] 1))
                  (480672 'end of statement' bb[139747])
                  {
                    unknown call_tmp[664467] "maybe param" "maybe type" "temp"
                    (664470 'move' call_tmp[664467](139694 call eltType _mt[243] a[139183]))
                    unknown copy[139698] "dead at end of block" "no auto destroy"
                    (543078 'init var' copy[139698] b[139188] call_tmp[664467])
                    (139701 'end of statement')
                    (139707 '=' aa[139740] copy[139698])
                    (480674 'end of statement' aa[139740] copy[139698])
                  }
                  label _continueLabel[139714]
                  _indexOfInterest[139709]
                  _iterator[139710]
                }
                label _breakLabel[139715]
              }
            }
          }
          {
            unknown call_tmp[664472] "expr temp" "maybe param" "maybe type" "temp"
            (664475 'move' call_tmp[664472](139772 call == kind[139194] assign[137985]))
            unknown call_tmp[664477] "expr temp" "maybe param" "maybe type" "temp"
            (664480 'move' call_tmp[664477](139842 call _cond_test call_tmp[664472]))
            if call_tmp[664477]
            {
              {
                unknown _indexOfInterest[139789] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139790] "expr temp" "temp"
                unknown call_tmp[664482] "expr temp" "maybe param" "maybe type" "temp"
                (664485 'move' call_tmp[664482](139799 call _getIterator a[139183]))
                unknown call_tmp[664487] "expr temp" "maybe param" "maybe type" "temp"
                (664490 'move' call_tmp[664487](139802 call _getIterator b[139188]))
                (139804 'move' _iterator[139790](139782 call _build_tuple call_tmp[664482] call_tmp[664487]))
                Defer
                {
                  {
                    (139834 call _freeIterator _iterator[139790])
                  }
                }
                { scopeless type
                  (139809 'move' _indexOfInterest[139789](139806 call iteratorIndex _iterator[139790]))
                }
                ForLoop[139791]
                {
                  (139814 call _check_tuple_var_decl _indexOfInterest[139789] 2)
                  (480678 'end of statement')
                  unknown aa[139820] "index var" "insert auto destroy"
                  (480679 'end of statement')
                  (139822 'move' aa[139820](139818 call _indexOfInterest[139789] 0))
                  (480680 'end of statement' aa[139820])
                  unknown bb[139827] "index var" "insert auto destroy"
                  (480682 'end of statement')
                  (139829 'move' bb[139827](139825 call _indexOfInterest[139789] 1))
                  (480683 'end of statement' bb[139827])
                  {
                    (139785 call = aa[139820] bb[139827])
                    (480685 'end of statement' aa[139820] bb[139827])
                  }
                  label _continueLabel[139794]
                  _indexOfInterest[139789]
                  _iterator[139790]
                }
                label _breakLabel[139795]
              }
            }
          }
        }
      }
      {
        unknown call_tmp[664492] "expr temp" "maybe param" "maybe type" "temp"
        (664495 'move' call_tmp[664492](139862 call == kind[139194] move[137981]))
        unknown call_tmp[664497] "expr temp" "maybe param" "maybe type" "temp"
        (664500 'move' call_tmp[664497](140099 call _cond_test call_tmp[664492]))
        if call_tmp[664497]
        {
          unknown call_tmp[664504] "expr temp" "maybe param" "maybe type" "temp"
          (664507 'move' call_tmp[664504](139866 call eltType _mt[243] a[139183]))
          unknown call_tmp[664509] "expr temp" "maybe param" "maybe type" "temp"
          (664512 'move' call_tmp[664509](139870 call needsInitWorkaround call_tmp[664504]))
          unknown call_tmp[664514] "expr temp" "maybe param" "maybe type" "temp"
          (664517 'move' call_tmp[664514](139956 call _cond_test call_tmp[664509]))
          if call_tmp[664514]
          {
            unknown call_tmp[664521] "expr temp" "maybe param" "maybe type" "temp"
            (664524 'move' call_tmp[664521](415697 call _dom _mt[243] a[139183]))
            unknown call_tmp[664526] "maybe param" "maybe type" "temp"
            (664529 'move' call_tmp[664526](415693 call chpl__staticAutoLocalCheck a[139183] call_tmp[664521]))
            unknown chpl__staticAutoLocalCheckSym[415692] "dead at end of block" "param"
            (543080 'init var' chpl__staticAutoLocalCheckSym[415692] call_tmp[664526])
            (480688 'end of statement')
            if chpl__staticAutoLocalCheckSym[415692]
            {
              unknown call_tmp[664533] "expr temp" "maybe param" "maybe type" "temp"
              (664536 'move' call_tmp[664533](139878 call _dom _mt[243] a[139183]))
              Forall {
                induction variables:
                  
                  unknown ai[139913] "index var" "insert auto destroy"
                  
                  unknown bb[139915] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664533]
                  b[139188]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[139888] "dead at end of block" "ref var"
                    unknown call_tmp[664538] "expr temp" "maybe param" "maybe type" "temp"
                    (664541 'move' call_tmp[664538](415703 'may be local access' a[139183] ai[139913] chpl__staticAutoLocalCheckSym[415692] 1))
                    (543083 'move' aa[139888](543082 'addr of' call_tmp[664538]))
                    (139891 'end of statement' ai[139913])
                    unknown call_tmp[664543] "expr temp" "maybe param" "maybe type" "temp"
                    (664546 'move' call_tmp[664543](139899 'steal' bb[139915]))
                    (139900 '=' aa[139888] call_tmp[664543])
                    (480690 'end of statement' aa[139888] bb[139915])
                    unknown call_tmp[664550] "expr temp" "maybe param" "maybe type" "temp"
                    (664553 'move' call_tmp[664550](139904 call eltType _mt[243] a[139183]))
                    (139909 call fixRuntimeType call_tmp[664550] aa[139888])
                    (480693 'end of statement' aa[139888])
                  }
                }
              }
            }
            {
              unknown call_tmp[664557] "expr temp" "maybe param" "maybe type" "temp"
              (664560 'move' call_tmp[664557](415688 call _dom _mt[243] a[139183]))
              Forall {
                induction variables:
                  
                  unknown ai[415683] "index var" "insert auto destroy"
                  
                  unknown bb[415685] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664557]
                  b[139188]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[415665] "dead at end of block" "ref var"
                    unknown call_tmp[664562] "expr temp" "maybe param" "maybe type" "temp"
                    (664565 'move' call_tmp[664562](415667 call a[139183] ai[415683]))
                    (543086 'move' aa[415665](543085 'addr of' call_tmp[664562]))
                    (415670 'end of statement' ai[415683])
                    unknown call_tmp[664567] "expr temp" "maybe param" "maybe type" "temp"
                    (664570 'move' call_tmp[664567](415673 'steal' bb[415685]))
                    (415671 '=' aa[415665] call_tmp[664567])
                    (480696 'end of statement' aa[415665] bb[415685])
                    unknown call_tmp[664574] "expr temp" "maybe param" "maybe type" "temp"
                    (664577 'move' call_tmp[664574](415678 call eltType _mt[243] a[139183]))
                    (415676 call fixRuntimeType call_tmp[664574] aa[415665])
                    (480699 'end of statement' aa[415665])
                  }
                }
              }
            }
          }
          {
            Forall {
              induction variables:
                
                unknown aa[139950] "index var" "insert auto destroy"
                
                unknown bb[139952] "index var" "insert auto destroy"
              iterated expressions:
                a[139183]
                b[139188]
              shadow variables:
              other variables
                forall body
              {
                {
                  unknown call_tmp[664579] "expr temp" "maybe param" "maybe type" "temp"
                  (664582 'move' call_tmp[664579](139935 'steal' bb[139952]))
                  (139936 '=' aa[139950] call_tmp[664579])
                  (480701 'end of statement' aa[139950] bb[139952])
                  unknown call_tmp[664586] "expr temp" "maybe param" "maybe type" "temp"
                  (664589 'move' call_tmp[664586](139941 call eltType _mt[243] a[139183]))
                  (139946 call fixRuntimeType call_tmp[664586] aa[139950])
                  (480704 'end of statement' aa[139950])
                }
              }
            }
          }
        }
        {
          unknown call_tmp[664591] "expr temp" "maybe param" "maybe type" "temp"
          (664594 'move' call_tmp[664591](139966 call == kind[139194] initCopy[137983]))
          unknown call_tmp[664596] "expr temp" "maybe param" "maybe type" "temp"
          (664599 'move' call_tmp[664596](140094 call _cond_test call_tmp[664591]))
          if call_tmp[664596]
          {
            unknown call_tmp[664603] "expr temp" "maybe param" "maybe type" "temp"
            (664606 'move' call_tmp[664603](139970 call eltType _mt[243] a[139183]))
            unknown call_tmp[664608] "expr temp" "maybe param" "maybe type" "temp"
            (664611 'move' call_tmp[664608](139974 call needsInitWorkaround call_tmp[664603]))
            unknown call_tmp[664613] "expr temp" "maybe param" "maybe type" "temp"
            (664616 'move' call_tmp[664613](140054 call _cond_test call_tmp[664608]))
            if call_tmp[664613]
            {
              unknown call_tmp[664620] "expr temp" "maybe param" "maybe type" "temp"
              (664623 'move' call_tmp[664620](415744 call _dom _mt[243] a[139183]))
              unknown call_tmp[664625] "maybe param" "maybe type" "temp"
              (664628 'move' call_tmp[664625](415740 call chpl__staticAutoLocalCheck a[139183] call_tmp[664620]))
              unknown chpl__staticAutoLocalCheckSym[415739] "dead at end of block" "param"
              (543088 'init var' chpl__staticAutoLocalCheckSym[415739] call_tmp[664625])
              (480706 'end of statement')
              if chpl__staticAutoLocalCheckSym[415739]
              {
                unknown call_tmp[664632] "expr temp" "maybe param" "maybe type" "temp"
                (664635 'move' call_tmp[664632](139982 call _dom _mt[243] a[139183]))
                Forall {
                  induction variables:
                    
                    unknown ai[140014] "index var" "insert auto destroy"
                    
                    unknown bb[140016] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664632]
                    b[139188]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[139992] "dead at end of block" "ref var"
                      unknown call_tmp[664637] "expr temp" "maybe param" "maybe type" "temp"
                      (664640 'move' call_tmp[664637](415750 'may be local access' a[139183] ai[140014] chpl__staticAutoLocalCheckSym[415739] 1))
                      (543091 'move' aa[139992](543090 'addr of' call_tmp[664637]))
                      (139995 'end of statement')
                      unknown call_tmp[664644] "maybe param" "maybe type" "temp"
                      (664647 'move' call_tmp[664644](139998 call eltType _mt[243] a[139183]))
                      unknown copy[140002] "dead at end of block" "no auto destroy"
                      (543093 'init var' copy[140002] bb[140016] call_tmp[664644])
                      (140005 'end of statement' ai[140014] bb[140016])
                      (140010 '=' aa[139992] copy[140002])
                      (480709 'end of statement' aa[139992] copy[140002])
                    }
                  }
                }
              }
              {
                unknown call_tmp[664651] "expr temp" "maybe param" "maybe type" "temp"
                (664654 'move' call_tmp[664651](415735 call _dom _mt[243] a[139183]))
                Forall {
                  induction variables:
                    
                    unknown ai[415730] "index var" "insert auto destroy"
                    
                    unknown bb[415732] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664651]
                    b[139188]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[415712] "dead at end of block" "ref var"
                      unknown call_tmp[664656] "expr temp" "maybe param" "maybe type" "temp"
                      (664659 'move' call_tmp[664656](415714 call a[139183] ai[415730]))
                      (543096 'move' aa[415712](543095 'addr of' call_tmp[664656]))
                      (415717 'end of statement')
                      unknown call_tmp[664663] "maybe param" "maybe type" "temp"
                      (664666 'move' call_tmp[664663](415721 call eltType _mt[243] a[139183]))
                      unknown copy[415718] "dead at end of block" "no auto destroy"
                      (543098 'init var' copy[415718] bb[415732] call_tmp[664663])
                      (415725 'end of statement' ai[415730] bb[415732])
                      (415726 '=' aa[415712] copy[415718])
                      (480714 'end of statement' aa[415712] copy[415718])
                    }
                  }
                }
              }
            }
            {
              Forall {
                induction variables:
                  
                  unknown aa[140048] "index var" "insert auto destroy"
                  
                  unknown bb[140050] "index var" "insert auto destroy"
                iterated expressions:
                  a[139183]
                  b[139188]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown call_tmp[664670] "maybe param" "maybe type" "temp"
                    (664673 'move' call_tmp[664670](140031 call eltType _mt[243] a[139183]))
                    unknown copy[140035] "dead at end of block" "no auto destroy"
                    (543100 'init var' copy[140035] bb[140050] call_tmp[664670])
                    (140038 'end of statement' bb[140050])
                    (140044 '=' aa[140048] copy[140035])
                    (480718 'end of statement' aa[140048] copy[140035])
                  }
                }
              }
            }
          }
          {
            unknown call_tmp[664675] "expr temp" "maybe param" "maybe type" "temp"
            (664678 'move' call_tmp[664675](140064 call == kind[139194] assign[137985]))
            unknown call_tmp[664680] "expr temp" "maybe param" "maybe type" "temp"
            (664683 'move' call_tmp[664680](140090 call _cond_test call_tmp[664675]))
            if call_tmp[664680]
            {
              Forall {
                induction variables:
                  
                  unknown aa[140084] "index var" "insert auto destroy"
                  
                  unknown bb[140086] "index var" "insert auto destroy"
                iterated expressions:
                  a[139183]
                  b[139188]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    (140078 call = aa[140084] bb[140086])
                    (480721 'end of statement' aa[140084] bb[140086])
                  }
                }
              }
            }
          }
        }
      }
    }
    (519034 return _void[55])
  }
  {
    (139201 call <=(139198 'lifetime_of' a[139183])(139200 'lifetime_of' b[139188]))
  }
  function chpl__transferArray[140126](ref arg a[140123]:_array[133588](?), param arg b[140128]:_any[178](?), param arg kind[140134] :
  assign[137985] =
  assign[137985]) : _unknown[51] "inline" "find user line" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown aa[140145] "index var" "insert auto destroy"
      iterated expressions:
        a[140123]
      shadow variables:
      other variables
        forall body
      {
        (140141 call = aa[140145] b[140128])
        (480724 'end of statement' aa[140145])
      }
    }
    (519036 return _void[55])
  }
  function =[140159](ref arg a[140156]:_array[133588](?), arg b[140162]:_domain[125902](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664687] "expr temp" "maybe param" "maybe type" "temp"
    (664690 'move' call_tmp[664687](140166 call rank _mt[243] a[140156]))
    unknown call_tmp[664694] "expr temp" "maybe param" "maybe type" "temp"
    (664697 'move' call_tmp[664694](140170 call rank _mt[243] b[140162]))
    unknown call_tmp[664699] "expr temp" "maybe param" "maybe type" "temp"
    (664702 'move' call_tmp[664699](140173 call != call_tmp[664687] call_tmp[664694]))
    unknown call_tmp[664704] "expr temp" "maybe param" "maybe type" "temp"
    (664707 'move' call_tmp[664704](140180 call _cond_test call_tmp[664699]))
    if call_tmp[664704]
    {
      (140178 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[426706] "maybe param" "temp"
    (426717 'move' tmp[426706](140189 call isAssociativeDom b[140162]))
    unknown call_tmp[664709] "expr temp" "maybe param" "maybe type" "temp"
    (664712 'move' call_tmp[664709](426719 call _cond_invalid tmp[426706]))
    if call_tmp[664709]
    {
      (426722 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567960] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567961] "maybe param" "temp"
    unknown call_tmp[664714] "expr temp" "maybe param" "maybe type" "temp"
    (664717 'move' call_tmp[664714](426707 call isTrue tmp[426706]))
    (567966 'move' tmp[567961](567964 call _cond_test call_tmp[664714]))
    if tmp[567961]
    {
      unknown tmp[567968] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[664719] "expr temp" "maybe param" "maybe type" "temp"
      (664722 'move' call_tmp[664719](140193 call isRectangularArr a[140156]))
      (567970 'move' tmp[567968](426710 call isTrue call_tmp[664719]))
      (567975 'move' tmp[567960](567972 '_paramFoldLogical' tmp[567961] tmp[567968]))
    }
    {
      (567980 'move' tmp[567960](567977 '_paramFoldLogical' tmp[567961] 0))
    }
    unknown call_tmp[664724] "expr temp" "maybe param" "maybe type" "temp"
    (664727 'move' call_tmp[664724](140217 call _cond_test tmp[567960]))
    if call_tmp[664724]
    {
      (140215 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    (140226 call chpl__transferArray a[140156] b[140162])
    (519038 return _void[55])
  }
  function =[140238](arg a[140235]:_array[133588](?), arg b[140244]:range[64316](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664731] "expr temp" "maybe param" "maybe type" "temp"
    (664734 'move' call_tmp[664731](140248 call rank _mt[243] a[140235]))
    unknown call_tmp[664736] "expr temp" "maybe param" "maybe type" "temp"
    (664739 'move' call_tmp[664736](140252 call == call_tmp[664731] 1))
    unknown call_tmp[664741] "expr temp" "maybe param" "maybe type" "temp"
    (664744 'move' call_tmp[664741](140281 call _cond_test call_tmp[664736]))
    if call_tmp[664741]
    {
      (140258 call chpl__transferArray a[140235] b[140244])
    }
    {
      (140279 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (519040 return _void[55])
  }
  function =[140298](ref arg a[140295]:_array[133588](?), arg b[140300]:_any[178](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    (140306 call chpl__transferArray a[140295] b[140300])
    (519042 return _void[55])
  }
  function helpInitArrFromTuple[140315](ref arg j[140313]:_any[178](?), param arg rank[140318]:int(64)[13], ref arg a[140324]:_array[133588](?), arg b[140328]:_tuple[56199](?), param arg kind[140332]:_tElt[137987]) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[664748] "expr temp" "maybe param" "maybe type" "temp"
    (664751 'move' call_tmp[664748](140342 call _dom _mt[243] a[140324]))
    unknown idxType[140361] "dead at end of block" "insert auto destroy" "type variable"(140345 call idxType _mt[243] call_tmp[664748])
    unknown call_tmp[664757] "expr temp" "maybe param" "maybe type" "temp"
    (664760 'move' call_tmp[664757](543105 call _dom _mt[243] a[140324]))
    (543109 'move' idxType[140361](543103 call idxType _mt[243] call_tmp[664757]))
    unknown call_tmp[664766] "expr temp" "maybe param" "maybe type" "temp"
    (664769 'move' call_tmp[664766](140350 call _dom _mt[243] a[140324]))
    unknown call_tmp[664773] "expr temp" "maybe param" "maybe type" "temp"
    (664776 'move' call_tmp[664773](140353 call intIdxType _mt[243] call_tmp[664766]))
    unknown strType[140358] "dead at end of block" "insert auto destroy" "type variable"(140357 call chpl__signedType call_tmp[664773])
    unknown call_tmp[664780] "expr temp" "maybe param" "maybe type" "temp"
    (664783 'move' call_tmp[664780](543116 call _dom _mt[243] a[140324]))
    unknown call_tmp[664787] "expr temp" "maybe param" "maybe type" "temp"
    (664790 'move' call_tmp[664787](543114 call intIdxType _mt[243] call_tmp[664780]))
    (543120 'move' strType[140358](543112 call chpl__signedType call_tmp[664787]))
    unknown call_tmp[664794] "expr temp" "maybe param" "maybe type" "temp"
    (664797 'move' call_tmp[664794](140366 call _dom _mt[243] a[140324]))
    unknown call_tmp[664803] "expr temp" "maybe param" "maybe type" "temp"
    (664806 'move' call_tmp[664803](140373 call rank _mt[243] a[140324]))
    unknown call_tmp[664808] "expr temp" "maybe param" "maybe type" "temp"
    (664811 'move' call_tmp[664808](140377 call - call_tmp[664803] rank[140318]))
    unknown call_tmp[664813] "expr temp" "maybe param" "maybe type" "temp"
    (664816 'move' call_tmp[664813](140380 call(140369 call (partial) dim _mt[243] call_tmp[664794]) call_tmp[664808]))
    unknown call_tmp[664820] "maybe param" "maybe type" "temp"
    (664823 'move' call_tmp[664820](140381 call stride _mt[243] call_tmp[664813]))
    const stride[140384] "dead at end of block" "const" "insert auto destroy"
    (543122 'init var' stride[140384] call_tmp[664820])
    unknown call_tmp[664827] "expr temp" "maybe param" "maybe type" "temp"
    (664830 'move' call_tmp[664827](140388 call _dom _mt[243] a[140324]))
    unknown call_tmp[664836] "expr temp" "maybe param" "maybe type" "temp"
    (664839 'move' call_tmp[664836](140395 call rank _mt[243] a[140324]))
    unknown call_tmp[664841] "expr temp" "maybe param" "maybe type" "temp"
    (664844 'move' call_tmp[664841](140399 call - call_tmp[664836] rank[140318]))
    unknown call_tmp[664846] "expr temp" "maybe param" "maybe type" "temp"
    (664849 'move' call_tmp[664846](140402 call(140391 call (partial) dim _mt[243] call_tmp[664827]) call_tmp[664841]))
    unknown call_tmp[664853] "maybe param" "maybe type" "temp"
    (664856 'move' call_tmp[664853](140403 call firstAsInt _mt[243] call_tmp[664846]))
    const start[140406] "dead at end of block" "const" "insert auto destroy"
    (543124 'init var' start[140406] call_tmp[664853])
    (140409 'end of statement')
    unknown call_tmp[664858] "expr temp" "maybe param" "maybe type" "temp"
    (664861 'move' call_tmp[664858](140412 call == rank[140318] 1))
    unknown call_tmp[664863] "expr temp" "maybe param" "maybe type" "temp"
    (664866 'move' call_tmp[664863](140704 call _cond_test call_tmp[664858]))
    if call_tmp[664863]
    {
      {
        unknown i[140569] "dead at end of block" "insert auto destroy"
        (543126 'init var' i[140569] 0)
        (480733 'end of statement')
        unknown tmp[140570] "maybe param" "temp"
        unknown call_tmp[664870] "expr temp" "maybe param" "maybe type" "temp"
        (664873 'move' call_tmp[664870](140416 call size _mt[243] b[140328]))
        unknown call_tmp[664875] "expr temp" "maybe param" "maybe type" "temp"
        (664878 'move' call_tmp[664875](140420 call - call_tmp[664870] 1))
        (140582 'move' tmp[140570](140580 call chpl_compute_low_param_loop_bound 0 call_tmp[664875]))
        unknown tmp[140571] "maybe param" "temp"
        unknown call_tmp[664882] "expr temp" "maybe param" "maybe type" "temp"
        (664885 'move' call_tmp[664882](140589 call size _mt[243] b[140328]))
        unknown call_tmp[664887] "expr temp" "maybe param" "maybe type" "temp"
        (664890 'move' call_tmp[664887](140587 call - call_tmp[664882] 1))
        (140595 'move' tmp[140571](140593 call chpl_compute_high_param_loop_bound 0 call_tmp[664887]))
        unknown tmp[140572] "maybe param" "temp"
        (140598 'move' tmp[140572] 1)
        ParamForLoop[140600]
        { i[140569] tmp[140570] tmp[140571] tmp[140572]
          {
            unknown call_tmp[664894] "expr temp" "maybe param" "maybe type" "temp"
            (664897 'move' call_tmp[664894](140426 call rank _mt[243] a[140324]))
            unknown call_tmp[664899] "expr temp" "maybe param" "maybe type" "temp"
            (664902 'move' call_tmp[664899](140430 call - call_tmp[664894] rank[140318]))
            unknown call_tmp[664904] "expr temp" "maybe param" "maybe type" "temp"
            (664907 'move' call_tmp[664904](140433 call j[140313] call_tmp[664899]))
            unknown call_tmp[664909] "expr temp" "maybe param" "maybe type" "temp"
            (664912 'move' call_tmp[664909](140439 call _cast strType[140358] start[140406]))
            unknown call_tmp[664914] "expr temp" "maybe param" "maybe type" "temp"
            (664917 'move' call_tmp[664914](140443 call * i[140569] stride[140384]))
            unknown call_tmp[664919] "expr temp" "maybe param" "maybe type" "temp"
            (664922 'move' call_tmp[664919](140445 call + call_tmp[664909] call_tmp[664914]))
            unknown call_tmp[664924] "expr temp" "maybe param" "maybe type" "temp"
            (664927 'move' call_tmp[664924](140447 call chpl__intToIdx idxType[140361] call_tmp[664919]))
            (140448 call = call_tmp[664904] call_tmp[664924])
            (480734 'end of statement' idxType[140361] strType[140358] start[140406] i[140569] stride[140384])
            unknown dst[140456] "dead at end of block" "ref var"
            unknown call_tmp[664929] "expr temp" "maybe param" "maybe type" "temp"
            (664932 'move' call_tmp[664929](140455 call a[140324] j[140313]))
            (543129 'move' dst[140456](543128 'addr of' call_tmp[664929]))
            (140459 'end of statement')
            const src[140464] "dead at end of block" "const" "ref var"
            unknown call_tmp[664934] "expr temp" "maybe param" "maybe type" "temp"
            (664937 'move' call_tmp[664934](140463 call b[140328] i[140569]))
            (543132 'move' src[140464](543131 'addr of' call_tmp[664934]))
            (140467 'end of statement' i[140569])
            unknown call_tmp[664939] "expr temp" "maybe param" "maybe type" "temp"
            (664942 'move' call_tmp[664939](140473 call == kind[140332] move[137981]))
            unknown call_tmp[664944] "expr temp" "maybe param" "maybe type" "temp"
            (664947 'move' call_tmp[664944](140564 call _cond_test call_tmp[664939]))
            if call_tmp[664944]
            {
              unknown call_tmp[664949] "expr temp" "maybe param" "maybe type" "temp"
              (664952 'move' call_tmp[664949](140478 call isArray dst[140456]))
              unknown call_tmp[664954] "expr temp" "maybe param" "maybe type" "temp"
              (664957 'move' call_tmp[664954](140514 call _cond_test call_tmp[664949]))
              if call_tmp[664954]
              {
                unknown call_tmp[664961] "expr temp" "maybe param" "maybe type" "temp"
                (664964 'move' call_tmp[664961](140481 call eltType _mt[243] a[140324]))
                unknown call_tmp[664966] "maybe param" "maybe type" "temp"
                (664969 'move' call_tmp[664966](140486 call chpl__coerceMove call_tmp[664961] src[140464]))
                unknown newArr[140487] "dead at end of block" "no auto destroy" "no copy"
                (543134 'init var' newArr[140487] call_tmp[664966])
                (140490 'end of statement' src[140464])
                (140496 '=' dst[140456] newArr[140487])
                (480742 'end of statement' dst[140456] newArr[140487])
              }
              {
                (140502 '=' dst[140456] src[140464])
                (480745 'end of statement' dst[140456] src[140464])
                unknown call_tmp[664973] "expr temp" "maybe param" "maybe type" "temp"
                (664976 'move' call_tmp[664973](140507 call eltType _mt[243] a[140324]))
                (140512 call fixRuntimeType call_tmp[664973] dst[140456])
                (480748 'end of statement' dst[140456])
              }
            }
            {
              unknown call_tmp[664978] "expr temp" "maybe param" "maybe type" "temp"
              (664981 'move' call_tmp[664978](140524 call == kind[140332] initCopy[137983]))
              unknown call_tmp[664983] "expr temp" "maybe param" "maybe type" "temp"
              (664986 'move' call_tmp[664983](140559 call _cond_test call_tmp[664978]))
              if call_tmp[664983]
              {
                unknown call_tmp[664990] "maybe param" "maybe type" "temp"
                (664993 'move' call_tmp[664990](140527 call eltType _mt[243] a[140324]))
                unknown copy[140531] "dead at end of block" "no auto destroy"
                (543136 'init var' copy[140531] src[140464] call_tmp[664990])
                (140534 'end of statement' src[140464])
                (140540 '=' dst[140456] copy[140531])
                (480751 'end of statement' dst[140456] copy[140531])
              }
              {
                unknown call_tmp[664995] "expr temp" "maybe param" "maybe type" "temp"
                (664998 'move' call_tmp[664995](140547 call == kind[140332] assign[137985]))
                unknown call_tmp[665000] "expr temp" "maybe param" "maybe type" "temp"
                (665003 'move' call_tmp[665000](140555 call _cond_test call_tmp[664995]))
                if call_tmp[665000]
                {
                  (140551 call = dst[140456] src[140464])
                  (480754 'end of statement' dst[140456] src[140464])
                }
              }
            }
          }
        }
        label _unused_continueLabel[140574]
        label _breakLabel[140573]
      }
    }
    {
      {
        unknown i[140663] "dead at end of block" "insert auto destroy"
        (543138 'init var' i[140663] 0)
        (480757 'end of statement')
        unknown tmp[140664] "maybe param" "temp"
        unknown call_tmp[665007] "expr temp" "maybe param" "maybe type" "temp"
        (665010 'move' call_tmp[665007](140612 call size _mt[243] b[140328]))
        unknown call_tmp[665012] "expr temp" "maybe param" "maybe type" "temp"
        (665015 'move' call_tmp[665012](140616 call - call_tmp[665007] 1))
        (140676 'move' tmp[140664](140674 call chpl_compute_low_param_loop_bound 0 call_tmp[665012]))
        unknown tmp[140665] "maybe param" "temp"
        unknown call_tmp[665019] "expr temp" "maybe param" "maybe type" "temp"
        (665022 'move' call_tmp[665019](140683 call size _mt[243] b[140328]))
        unknown call_tmp[665024] "expr temp" "maybe param" "maybe type" "temp"
        (665027 'move' call_tmp[665024](140681 call - call_tmp[665019] 1))
        (140689 'move' tmp[140665](140687 call chpl_compute_high_param_loop_bound 0 call_tmp[665024]))
        unknown tmp[140666] "maybe param" "temp"
        (140692 'move' tmp[140666] 1)
        ParamForLoop[140694]
        { i[140663] tmp[140664] tmp[140665] tmp[140666]
          {
            unknown call_tmp[665031] "expr temp" "maybe param" "maybe type" "temp"
            (665034 'move' call_tmp[665031](140622 call rank _mt[243] a[140324]))
            unknown call_tmp[665036] "expr temp" "maybe param" "maybe type" "temp"
            (665039 'move' call_tmp[665036](140626 call - call_tmp[665031] rank[140318]))
            unknown call_tmp[665041] "expr temp" "maybe param" "maybe type" "temp"
            (665044 'move' call_tmp[665041](140629 call j[140313] call_tmp[665036]))
            unknown call_tmp[665046] "expr temp" "maybe param" "maybe type" "temp"
            (665049 'move' call_tmp[665046](140635 call _cast strType[140358] start[140406]))
            unknown call_tmp[665051] "expr temp" "maybe param" "maybe type" "temp"
            (665054 'move' call_tmp[665051](140639 call * i[140663] stride[140384]))
            unknown call_tmp[665056] "expr temp" "maybe param" "maybe type" "temp"
            (665059 'move' call_tmp[665056](140641 call + call_tmp[665046] call_tmp[665051]))
            unknown call_tmp[665061] "expr temp" "maybe param" "maybe type" "temp"
            (665064 'move' call_tmp[665061](140643 call chpl__intToIdx idxType[140361] call_tmp[665056]))
            (140644 call = call_tmp[665041] call_tmp[665061])
            (480758 'end of statement' idxType[140361] strType[140358] start[140406] i[140663] stride[140384])
            unknown call_tmp[665066] "expr temp" "maybe param" "maybe type" "temp"
            (665069 'move' call_tmp[665066](140653 call - rank[140318] 1))
            unknown call_tmp[665071] "expr temp" "maybe param" "maybe type" "temp"
            (665074 'move' call_tmp[665071](140659 call b[140328] i[140663]))
            (140661 call helpInitArrFromTuple j[140313] call_tmp[665066] a[140324] call_tmp[665071] kind[140332])
            (480764 'end of statement' i[140663])
          }
        }
        label _unused_continueLabel[140668]
        label _breakLabel[140667]
      }
    }
    (519044 return _void[55])
  }
  {
    (140339 call <(140336 'lifetime_of' a[140324])(140338 'lifetime_of' b[140328]))
  }
  function initArrFromTuple[140719](ref arg a[140716]:_array[133588](?), arg b[140722]:_tuple[56199](?), param arg kind[140726]:_tElt[137987]) : _unknown[51] "private" "no return value for void"
  {
    unknown j[140742] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665078] "expr temp" "maybe param" "maybe type" "temp"
    (665081 'move' call_tmp[665078](140730 call rank _mt[243] a[140716]))
    unknown call_tmp[665085] "expr temp" "maybe param" "maybe type" "temp"
    (665088 'move' call_tmp[665085](140734 call _dom _mt[243] a[140716]))
    unknown call_tmp[665092] "expr temp" "maybe param" "maybe type" "temp"
    (665095 'move' call_tmp[665092](140737 call idxType _mt[243] call_tmp[665085]))
    unknown call_tmp[665097] "expr temp" "maybe param" "maybe type" "temp"
    (665100 'move' call_tmp[665097](140740 call * call_tmp[665078] call_tmp[665092]))
    (543140 'default init var' j[140742] call_tmp[665097])
    (140745 'end of statement')
    unknown call_tmp[665104] "expr temp" "maybe param" "maybe type" "temp"
    (665107 'move' call_tmp[665104](140751 call rank _mt[243] a[140716]))
    (140757 call helpInitArrFromTuple j[140742] call_tmp[665104] a[140716] b[140722] kind[140726])
    (480766 'end of statement' j[140742])
    (519046 return _void[55])
  }
  function =[140769](ref arg a[140766]:_array[133588](?), arg b[140772]:_tuple[56199](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (140787 call initArrFromTuple a[140766] b[140772] assign[137985])
    (519048 return _void[55])
  }
  where {
    (140778 call isRectangularArr a[140766])
  }
  function _desync[140799](arg t[140796]:_syncvar[84944](?)) type : _unknown[51]
  {
    unknown ret[519052] "RVV" "temp" "type variable"
    unknown x[140802] "dead at end of block" "insert auto destroy"
    (543142 'default init var' x[140802] t[140796])
    (140805 'end of statement')
    unknown call_tmp[665111] "expr temp" "maybe param" "maybe type" "temp"
    (665114 'move' call_tmp[665111](140808 call valType _mt[243] x[140802]))
    (519057 'move' ret[519052](519056 'deref' call_tmp[665111]))
    gotoReturn _end__desync[519050] _end__desync[519050]
    (480769 'end of statement' x[140802])
    label _end__desync[519050]
    (519054 return ret[519052])
  }
  function _desync[140821](arg t[140818]:_singlevar[87253](?)) type : _unknown[51]
  {
    unknown ret[519063] "RVV" "temp" "type variable"
    unknown x[140824] "dead at end of block" "insert auto destroy"
    (543144 'default init var' x[140824] t[140818])
    (140827 'end of statement')
    unknown call_tmp[665118] "expr temp" "maybe param" "maybe type" "temp"
    (665121 'move' call_tmp[665118](140830 call valType _mt[243] x[140824]))
    (519068 'move' ret[519063](519067 'deref' call_tmp[665118]))
    gotoReturn _end__desync[519061] _end__desync[519061]
    (480771 'end of statement' x[140824])
    label _end__desync[519061]
    (519065 return ret[519063])
  }
  function _desync[140841](arg t[140839]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[519074] "RVV" "temp" "type variable"
    (519079 'move' ret[519074](519078 'deref' t[140839]))
    (519076 return ret[519074])
  }
  function desyncEltType[140855](arg t[140852]:_array[133588](?)) type : _unknown[51] "private"
  {
    unknown ret[519083] "RVV" "temp" "type variable"
    unknown eltType[140861] "dead at end of block" "insert auto destroy" "type variable"(140860 call chpl__eltTypeFromArrayRuntimeType t[140852])
    (543149 'move' eltType[140861](543147 call chpl__eltTypeFromArrayRuntimeType t[140852]))
    (480774 'end of statement')
    unknown call_tmp[665123] "expr temp" "maybe param" "maybe type" "temp"
    (665126 'move' call_tmp[665123](140868 call _desync eltType[140861]))
    (519088 'move' ret[519083](519087 'deref' call_tmp[665123]))
    gotoReturn _end_desyncEltType[519081] _end_desyncEltType[519081]
    (480775 'end of statement' eltType[140861])
    label _end_desyncEltType[519081]
    (519085 return ret[519083])
  }
  function =[140881](ref arg a[140878]:_array[133588](?), arg b[140890] :
  unknown call_tmp[665130] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140901] "index var" "insert auto destroy"
      iterated expressions:
        a[140878]
      shadow variables:
      other variables
        forall body
      {
        (140897 call = e[140901] b[140890])
        (480777 'end of statement' e[140901])
      }
    }
    (519092 return _void[55])
  }
  function +=[140915](arg a[140912]:_array[133588](?), arg b[140924] :
  unknown call_tmp[665137] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140935] "index var" "insert auto destroy"
      iterated expressions:
        a[140912]
      shadow variables:
      other variables
        forall body
      {
        (140931 call += e[140935] b[140924])
        (480779 'end of statement' e[140935])
      }
    }
    (519094 return _void[55])
  }
  function -=[140949](arg a[140946]:_array[133588](?), arg b[140958] :
  unknown call_tmp[665144] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140969] "index var" "insert auto destroy"
      iterated expressions:
        a[140946]
      shadow variables:
      other variables
        forall body
      {
        (140965 call -= e[140969] b[140958])
        (480781 'end of statement' e[140969])
      }
    }
    (519096 return _void[55])
  }
  function *=[140983](arg a[140980]:_array[133588](?), arg b[140992] :
  unknown call_tmp[665151] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141003] "index var" "insert auto destroy"
      iterated expressions:
        a[140980]
      shadow variables:
      other variables
        forall body
      {
        (140999 call *= e[141003] b[140992])
        (480783 'end of statement' e[141003])
      }
    }
    (519098 return _void[55])
  }
  function /=[141017](arg a[141014]:_array[133588](?), arg b[141026] :
  unknown call_tmp[665158] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141037] "index var" "insert auto destroy"
      iterated expressions:
        a[141014]
      shadow variables:
      other variables
        forall body
      {
        (141033 call /= e[141037] b[141026])
        (480785 'end of statement' e[141037])
      }
    }
    (519100 return _void[55])
  }
  function %=[141051](arg a[141048]:_array[133588](?), arg b[141060] :
  unknown call_tmp[665165] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141071] "index var" "insert auto destroy"
      iterated expressions:
        a[141048]
      shadow variables:
      other variables
        forall body
      {
        (141067 call %= e[141071] b[141060])
        (480787 'end of statement' e[141071])
      }
    }
    (519102 return _void[55])
  }
  function **=[141085](arg a[141082]:_array[133588](?), arg b[141094] :
  unknown call_tmp[665172] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141105] "index var" "insert auto destroy"
      iterated expressions:
        a[141082]
      shadow variables:
      other variables
        forall body
      {
        (141101 call **= e[141105] b[141094])
        (480789 'end of statement' e[141105])
      }
    }
    (519104 return _void[55])
  }
  function &=[141119](arg a[141116]:_array[133588](?), arg b[141128] :
  unknown call_tmp[665179] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141139] "index var" "insert auto destroy"
      iterated expressions:
        a[141116]
      shadow variables:
      other variables
        forall body
      {
        (141135 call &= e[141139] b[141128])
        (480791 'end of statement' e[141139])
      }
    }
    (519106 return _void[55])
  }
  function |=[141153](arg a[141150]:_array[133588](?), arg b[141162] :
  unknown call_tmp[665186] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141173] "index var" "insert auto destroy"
      iterated expressions:
        a[141150]
      shadow variables:
      other variables
        forall body
      {
        (141169 call |= e[141173] b[141162])
        (480793 'end of statement' e[141173])
      }
    }
    (519108 return _void[55])
  }
  function ^=[141187](arg a[141184]:_array[133588](?), arg b[141196] :
  unknown call_tmp[665193] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141207] "index var" "insert auto destroy"
      iterated expressions:
        a[141184]
      shadow variables:
      other variables
        forall body
      {
        (141203 call ^= e[141207] b[141196])
        (480795 'end of statement' e[141207])
      }
    }
    (519110 return _void[55])
  }
  function >>=[141221](arg a[141218]:_array[133588](?), arg b[141230] :
  unknown call_tmp[665200] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141241] "index var" "insert auto destroy"
      iterated expressions:
        a[141218]
      shadow variables:
      other variables
        forall body
      {
        (141237 call >>= e[141241] b[141230])
        (480797 'end of statement' e[141241])
      }
    }
    (519112 return _void[55])
  }
  function <<=[141255](arg a[141252]:_array[133588](?), arg b[141264] :
  unknown call_tmp[665207] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141275] "index var" "insert auto destroy"
      iterated expressions:
        a[141252]
      shadow variables:
      other variables
        forall body
      {
        (141271 call <<= e[141275] b[141264])
        (480799 'end of statement' e[141275])
      }
    }
    (519114 return _void[55])
  }
  function chpl_by[141287](arg a[141284]:_domain[125902](?), arg b[141289]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519118] "RVV" "temp"
    unknown r[141312] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665214] "expr temp" "maybe param" "maybe type" "temp"
    (665217 'move' call_tmp[665214](141292 call rank _mt[243] a[141284]))
    unknown call_tmp[665221] "expr temp" "maybe param" "maybe type" "temp"
    (665224 'move' call_tmp[665221](141297 call _value _mt[243] a[141284]))
    unknown call_tmp[665228] "expr temp" "maybe param" "maybe type" "temp"
    (665231 'move' call_tmp[665228](141300 call idxType _mt[243] call_tmp[665221]))
    unknown call_tmp[665233] "expr temp" "maybe param" "maybe type" "temp"
    (665236 'move' call_tmp[665233](141309 call range[64316](?) call_tmp[665228] bounded[64205] 1))
    unknown call_tmp[665238] "expr temp" "maybe param" "maybe type" "temp"
    (665241 'move' call_tmp[665238](141310 call * call_tmp[665214] call_tmp[665233]))
    (543151 'default init var' r[141312] call_tmp[665238])
    (141315 'end of statement')
    unknown call_tmp[665245] "expr temp" "maybe param" "maybe type" "temp"
    (665248 'move' call_tmp[665245](141319 call rank _mt[243] a[141284]))
    unknown call_tmp[665250] "maybe param" "maybe type" "temp"
    (665253 'move' call_tmp[665250](141326 call _makeIndexTuple call_tmp[665245] b[141289](expand = 1)))
    unknown t[141327] "dead at end of block" "insert auto destroy"
    (543153 'init var' t[141327] call_tmp[665250])
    (141330 'end of statement')
    {
      unknown i[141361] "dead at end of block" "insert auto destroy"
      (543155 'init var' i[141361] 0)
      (480801 'end of statement')
      unknown tmp[141362] "maybe param" "temp"
      unknown call_tmp[665257] "expr temp" "maybe param" "maybe type" "temp"
      (665260 'move' call_tmp[665257](141333 call rank _mt[243] a[141284]))
      unknown call_tmp[665262] "expr temp" "maybe param" "maybe type" "temp"
      (665265 'move' call_tmp[665262](141337 call - call_tmp[665257] 1))
      (141374 'move' tmp[141362](141372 call chpl_compute_low_param_loop_bound 0 call_tmp[665262]))
      unknown tmp[141363] "maybe param" "temp"
      unknown call_tmp[665269] "expr temp" "maybe param" "maybe type" "temp"
      (665272 'move' call_tmp[665269](141381 call rank _mt[243] a[141284]))
      unknown call_tmp[665274] "expr temp" "maybe param" "maybe type" "temp"
      (665277 'move' call_tmp[665274](141379 call - call_tmp[665269] 1))
      (141387 'move' tmp[141363](141385 call chpl_compute_high_param_loop_bound 0 call_tmp[665274]))
      unknown tmp[141364] "maybe param" "temp"
      (141390 'move' tmp[141364] 1)
      ParamForLoop[141392]
      { i[141361] tmp[141362] tmp[141363] tmp[141364]
        unknown call_tmp[665279] "expr temp" "maybe param" "maybe type" "temp"
        (665282 'move' call_tmp[665279](141344 call r[141312] i[141361]))
        unknown call_tmp[665286] "expr temp" "maybe param" "maybe type" "temp"
        (665289 'move' call_tmp[665286](141351 call(141346 call (partial) dim _mt[243] a[141284]) i[141361]))
        unknown call_tmp[665291] "expr temp" "maybe param" "maybe type" "temp"
        (665294 'move' call_tmp[665291](141355 call t[141327] i[141361]))
        unknown call_tmp[665296] "expr temp" "maybe param" "maybe type" "temp"
        (665299 'move' call_tmp[665296](141356 call chpl_by call_tmp[665286] call_tmp[665291]))
        (141358 call = call_tmp[665279] call_tmp[665296])
        (480802 'end of statement' r[141312] i[141361] i[141361] t[141327] i[141361])
      }
      label _unused_continueLabel[141366]
      label _breakLabel[141365]
    }
    unknown call_tmp[665303] "expr temp" "maybe param" "maybe type" "temp"
    (665306 'move' call_tmp[665303](141404 call dist _mt[243] a[141284]))
    unknown call_tmp[665310] "expr temp" "maybe param" "maybe type" "temp"
    (665313 'move' call_tmp[665310](141409 call rank _mt[243] a[141284]))
    unknown call_tmp[665317] "expr temp" "maybe param" "maybe type" "temp"
    (665320 'move' call_tmp[665317](141413 call _value _mt[243] a[141284]))
    unknown call_tmp[665324] "expr temp" "maybe param" "maybe type" "temp"
    (665327 'move' call_tmp[665324](141416 call idxType _mt[243] call_tmp[665317]))
    unknown call_tmp[665329] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665332 'move' call_tmp[665329](747800 'new' _domain[125902](?) call_tmp[665303] call_tmp[665310] call_tmp[665324] 1 r[141312]))
    (519123 'move' ret[519118](519122 'deref' call_tmp[665329]))
    gotoReturn _end_chpl_by[519116] _end_chpl_by[519116]
    (480808 'end of statement' r[141312])
    label _end_chpl_by[519116]
    (519120 return ret[519118])
  }
  function chpl_align[141432](arg a[141429]:_domain[125902](?), arg b[141434]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519129] "RVV" "temp"
    unknown r[141460] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665336] "expr temp" "maybe param" "maybe type" "temp"
    (665339 'move' call_tmp[665336](141437 call rank _mt[243] a[141429]))
    unknown call_tmp[665343] "expr temp" "maybe param" "maybe type" "temp"
    (665346 'move' call_tmp[665343](141442 call _value _mt[243] a[141429]))
    unknown call_tmp[665350] "expr temp" "maybe param" "maybe type" "temp"
    (665353 'move' call_tmp[665350](141445 call idxType _mt[243] call_tmp[665343]))
    unknown call_tmp[665357] "expr temp" "maybe param" "maybe type" "temp"
    (665360 'move' call_tmp[665357](141454 call stridable _mt[243] a[141429]))
    unknown call_tmp[665362] "expr temp" "maybe param" "maybe type" "temp"
    (665365 'move' call_tmp[665362](141457 call range[64316](?) call_tmp[665350] bounded[64205] call_tmp[665357]))
    unknown call_tmp[665367] "expr temp" "maybe param" "maybe type" "temp"
    (665370 'move' call_tmp[665367](141458 call * call_tmp[665336] call_tmp[665362]))
    (543157 'default init var' r[141460] call_tmp[665367])
    (141463 'end of statement')
    unknown call_tmp[665374] "expr temp" "maybe param" "maybe type" "temp"
    (665377 'move' call_tmp[665374](141467 call rank _mt[243] a[141429]))
    unknown call_tmp[665379] "maybe param" "maybe type" "temp"
    (665382 'move' call_tmp[665379](141474 call _makeIndexTuple call_tmp[665374] b[141434](expand = 1)))
    unknown t[141475] "dead at end of block" "insert auto destroy"
    (543159 'init var' t[141475] call_tmp[665379])
    (141478 'end of statement')
    {
      unknown i[141509] "dead at end of block" "insert auto destroy"
      (543161 'init var' i[141509] 0)
      (480810 'end of statement')
      unknown tmp[141510] "maybe param" "temp"
      unknown call_tmp[665386] "expr temp" "maybe param" "maybe type" "temp"
      (665389 'move' call_tmp[665386](141481 call rank _mt[243] a[141429]))
      unknown call_tmp[665391] "expr temp" "maybe param" "maybe type" "temp"
      (665394 'move' call_tmp[665391](141485 call - call_tmp[665386] 1))
      (141522 'move' tmp[141510](141520 call chpl_compute_low_param_loop_bound 0 call_tmp[665391]))
      unknown tmp[141511] "maybe param" "temp"
      unknown call_tmp[665398] "expr temp" "maybe param" "maybe type" "temp"
      (665401 'move' call_tmp[665398](141529 call rank _mt[243] a[141429]))
      unknown call_tmp[665403] "expr temp" "maybe param" "maybe type" "temp"
      (665406 'move' call_tmp[665403](141527 call - call_tmp[665398] 1))
      (141535 'move' tmp[141511](141533 call chpl_compute_high_param_loop_bound 0 call_tmp[665403]))
      unknown tmp[141512] "maybe param" "temp"
      (141538 'move' tmp[141512] 1)
      ParamForLoop[141540]
      { i[141509] tmp[141510] tmp[141511] tmp[141512]
        unknown call_tmp[665408] "expr temp" "maybe param" "maybe type" "temp"
        (665411 'move' call_tmp[665408](141492 call r[141460] i[141509]))
        unknown call_tmp[665415] "expr temp" "maybe param" "maybe type" "temp"
        (665418 'move' call_tmp[665415](141499 call(141494 call (partial) dim _mt[243] a[141429]) i[141509]))
        unknown call_tmp[665420] "expr temp" "maybe param" "maybe type" "temp"
        (665423 'move' call_tmp[665420](141503 call t[141475] i[141509]))
        unknown call_tmp[665425] "expr temp" "maybe param" "maybe type" "temp"
        (665428 'move' call_tmp[665425](141504 call chpl_align call_tmp[665415] call_tmp[665420]))
        (141506 call = call_tmp[665408] call_tmp[665425])
        (480811 'end of statement' r[141460] i[141509] i[141509] t[141475] i[141509])
      }
      label _unused_continueLabel[141514]
      label _breakLabel[141513]
    }
    unknown call_tmp[665432] "expr temp" "maybe param" "maybe type" "temp"
    (665435 'move' call_tmp[665432](141552 call dist _mt[243] a[141429]))
    unknown call_tmp[665439] "expr temp" "maybe param" "maybe type" "temp"
    (665442 'move' call_tmp[665439](141557 call rank _mt[243] a[141429]))
    unknown call_tmp[665446] "expr temp" "maybe param" "maybe type" "temp"
    (665449 'move' call_tmp[665446](141561 call _value _mt[243] a[141429]))
    unknown call_tmp[665453] "expr temp" "maybe param" "maybe type" "temp"
    (665456 'move' call_tmp[665453](141564 call idxType _mt[243] call_tmp[665446]))
    unknown call_tmp[665460] "expr temp" "maybe param" "maybe type" "temp"
    (665463 'move' call_tmp[665460](141568 call stridable _mt[243] a[141429]))
    unknown call_tmp[665465] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665468 'move' call_tmp[665465](747801 'new' _domain[125902](?) call_tmp[665432] call_tmp[665439] call_tmp[665453] call_tmp[665460] r[141460]))
    (519134 'move' ret[519129](519133 'deref' call_tmp[665465]))
    gotoReturn _end_chpl_align[519127] _end_chpl_align[519127]
    (480817 'end of statement' r[141460])
    label _end_chpl_align[519127]
    (519131 return ret[519129])
  }
  function <=>[141587](arg x[141584]:_array[133588](?), arg y[141594]:_array[133588](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown hasSwapped[141599] "dead at end of block" "insert auto destroy"
    (543163 'init var' hasSwapped[141599] 0 bool[10])
    (141602 'end of statement')
    unknown tmp[426727] "maybe param" "temp"
    unknown tmp[426748] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492182] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665472] "expr temp" "maybe param" "maybe type" "temp"
      (665475 'move' call_tmp[665472](141605 call _value _mt[243] x[141584]))
      (492186 'move' call_type_tmp[492182](141608 'typeof' call_tmp[665472]))
    }
    { scopeless type
      unknown call_type_tmp[492188] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665479] "expr temp" "maybe param" "maybe type" "temp"
      (665482 'move' call_tmp[665479](141610 call _value _mt[243] y[141594]))
      (492192 'move' call_type_tmp[492188](141613 'typeof' call_tmp[665479]))
    }
    (426759 'move' tmp[426748](141614 call == call_type_tmp[492182] call_type_tmp[492188]))
    unknown call_tmp[665484] "expr temp" "maybe param" "maybe type" "temp"
    (665487 'move' call_tmp[665484](426761 call _cond_invalid tmp[426748]))
    if call_tmp[665484]
    {
      (426764 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567987] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567988] "maybe param" "temp"
    unknown call_tmp[665489] "expr temp" "maybe param" "maybe type" "temp"
    (665492 'move' call_tmp[665489](426749 call isTrue tmp[426748]))
    (567993 'move' tmp[567988](567991 call _cond_test call_tmp[665489]))
    if tmp[567988]
    {
      unknown tmp[567995] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665496] "expr temp" "maybe param" "maybe type" "temp"
      (665499 'move' call_tmp[665496](141618 call _value _mt[243] x[141584]))
      unknown call_tmp[665501] "expr temp" "maybe param" "maybe type" "temp"
      (665504 'move' call_tmp[665501](141622 call chpl__isArrayView call_tmp[665496]))
      unknown call_tmp[665506] "expr temp" "maybe param" "maybe type" "temp"
      (665509 'move' call_tmp[665506](141623 call ! call_tmp[665501]))
      (567997 'move' tmp[567995](426752 call isTrue call_tmp[665506]))
      (568002 'move' tmp[567987](567999 '_paramFoldLogical' tmp[567988] tmp[567995]))
    }
    {
      (568007 'move' tmp[567987](568004 '_paramFoldLogical' tmp[567988] 0))
    }
    (426738 'move' tmp[426727] tmp[567987])
    unknown call_tmp[665511] "expr temp" "maybe param" "maybe type" "temp"
    (665514 'move' call_tmp[665511](426740 call _cond_invalid tmp[426727]))
    if call_tmp[665511]
    {
      (426743 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568014] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568015] "maybe param" "temp"
    unknown call_tmp[665516] "expr temp" "maybe param" "maybe type" "temp"
    (665519 'move' call_tmp[665516](426728 call isTrue tmp[426727]))
    (568020 'move' tmp[568015](568018 call _cond_test call_tmp[665516]))
    if tmp[568015]
    {
      unknown tmp[568022] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665523] "expr temp" "maybe param" "maybe type" "temp"
      (665526 'move' call_tmp[665523](141632 call _value _mt[243] x[141584]))
      unknown call_tmp[665530] "expr temp" "maybe param" "maybe type" "temp"
      (665533 'move' call_tmp[665530](141654 call _value _mt[243] y[141594]))
      unknown call_tmp[665535] "expr temp" "maybe param" "maybe type" "temp"
      (665538 'move' call_tmp[665535](141657 call canResolveMethod module=[255] Reflection[224794] call_tmp[665523] "doiSwap" call_tmp[665530]))
      (568024 'move' tmp[568022](426731 call isTrue call_tmp[665535]))
      (568029 'move' tmp[568014](568026 '_paramFoldLogical' tmp[568015] tmp[568022]))
    }
    {
      (568034 'move' tmp[568014](568031 '_paramFoldLogical' tmp[568015] 0))
    }
    unknown call_tmp[665540] "expr temp" "maybe param" "maybe type" "temp"
    (665543 'move' call_tmp[665540](141689 call _cond_test tmp[568014]))
    if call_tmp[665540]
    {
      unknown call_tmp[665547] "expr temp" "maybe param" "maybe type" "temp"
      (665550 'move' call_tmp[665547](461479 call _dom _mt[243] x[141584]))
      unknown call_tmp[665554] "expr temp" "maybe param" "maybe type" "temp"
      (665557 'move' call_tmp[665554](461485 call _dom _mt[243] y[141594]))
      unknown call_tmp[665559] "expr temp" "maybe param" "maybe type" "temp"
      (665562 'move' call_tmp[665559](141662 call == call_tmp[665547] call_tmp[665554]))
      unknown call_tmp[665564] "expr temp" "maybe param" "maybe type" "temp"
      (665567 'move' call_tmp[665564](141684 call _cond_test call_tmp[665559]))
      if call_tmp[665564]
      {
        unknown call_tmp[665571] "expr temp" "maybe param" "maybe type" "temp"
        (665574 'move' call_tmp[665571](141665 call _value _mt[243] x[141584]))
        unknown call_tmp[665580] "expr temp" "maybe param" "maybe type" "temp"
        (665583 'move' call_tmp[665580](141672 call _value _mt[243] y[141594]))
        (141676 call(141668 call (partial) doiSwap _mt[243] call_tmp[665571]) call_tmp[665580])
        (480821 'end of statement')
        (141681 call = hasSwapped[141599] 1)
        (480822 'end of statement' hasSwapped[141599])
      }
    }
    unknown call_tmp[665585] "expr temp" "maybe param" "maybe type" "temp"
    (665588 'move' call_tmp[665585](141694 call ! hasSwapped[141599]))
    unknown call_tmp[665590] "expr temp" "maybe param" "maybe type" "temp"
    (665593 'move' call_tmp[665590](141717 call _cond_test call_tmp[665585]))
    if call_tmp[665590]
    {
      Forall {
        induction variables:
          
          unknown a[141711] "index var" "insert auto destroy"
          
          unknown b[141713] "index var" "insert auto destroy"
        iterated expressions:
          x[141584]
          y[141594]
        shadow variables:
        other variables
          forall body
        {
          (141707 call <=> a[141711] b[141713])
          (480824 'end of statement' a[141711] b[141713])
        }
      }
    }
    (519138 return _void[55])
    (360240 'referenced modules list' Reflection[224794])
  }
  function reshape[141731](arg A[141728]:_array[133588](?), arg D[141734]:_domain[125902](?)) : _unknown[51]
  {
    unknown ret[519142] "RVV" "temp"
    unknown call_tmp[665595] "expr temp" "maybe param" "maybe type" "temp"
    (665598 'move' call_tmp[665595](141740 call isRectangularDom D[141734]))
    unknown call_tmp[665600] "expr temp" "maybe param" "maybe type" "temp"
    (665603 'move' call_tmp[665600](141741 call ! call_tmp[665595]))
    unknown call_tmp[665605] "expr temp" "maybe param" "maybe type" "temp"
    (665608 'move' call_tmp[665605](141769 call _cond_test call_tmp[665600]))
    if call_tmp[665605]
    {
      unknown call_tmp[665610] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665613 'move' call_tmp[665610](141763 'typeof' D[141734]))
      unknown call_tmp[665615] "expr temp" "maybe param" "maybe type" "temp"
      (665618 'move' call_tmp[665615](141765 call _cast string[26] call_tmp[665610]))
      (141767 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665615])
    }
    unknown call_tmp[665622] "expr temp" "maybe param" "maybe type" "temp"
    (665625 'move' call_tmp[665622](141776 call size _mt[243] A[141728]))
    unknown call_tmp[665629] "expr temp" "maybe param" "maybe type" "temp"
    (665632 'move' call_tmp[665629](141780 call size _mt[243] D[141734]))
    unknown call_tmp[665634] "expr temp" "maybe param" "maybe type" "temp"
    (665637 'move' call_tmp[665634](141783 call != call_tmp[665622] call_tmp[665629]))
    unknown call_tmp[665639] "expr temp" "maybe param" "maybe type" "temp"
    (665642 'move' call_tmp[665639](141848 call _cond_test call_tmp[665634]))
    if call_tmp[665639]
    {
      unknown call_tmp[665646] "expr temp" "maybe param" "maybe type" "temp"
      (665649 'move' call_tmp[665646](141805 call size _mt[243] A[141728]))
      unknown call_tmp[665653] "expr temp" "maybe param" "maybe type" "temp"
      (665656 'move' call_tmp[665653](141826 call size _mt[243] D[141734]))
      (141846 call halt "reshape(A,D) is invoked when A has " call_tmp[665646] " elements, but D has " call_tmp[665653] " indices")
    }
    unknown B[141880] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter6[582629](arg iterator[582631]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582692] "RVV" "temp"
      {
        unknown _indexOfInterest[582636] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582637] "expr temp" "temp"
        (582646 'move' _iterator[582637](582644 call _getIteratorZip iterator[582631]))
        Defer
        {
          {
            (582672 call _freeIterator _iterator[582637])
          }
        }
        { scopeless type
          (582651 'move' _indexOfInterest[582636](582648 call iteratorIndex _iterator[582637]))
        }
        ForLoop[582638] for-expr
        {
          unknown a[141878] "index var" "insert auto destroy" "no doc"
          (582681 'end of statement')
          unknown i[141876] "index var" "insert auto destroy" "no doc"
          (582682 'end of statement')
          (582656 call _check_tuple_var_decl _indexOfInterest[582636] 2)
          (582683 'end of statement')
          (582662 'move' i[141876](582660 call _indexOfInterest[582636] 0))
          (582684 'end of statement' i[141876])
          (582667 'move' a[141878](582665 call _indexOfInterest[582636] 1))
          (582686 'end of statement' a[141878])
          {
            {
              unknown yret[582696] "YVV" "temp"
              (582699 'move' yret[582696](582698 'deref' a[141878]))
              (582701 yield yret[582696])
              (582688 'end of statement' a[141878])
            }
          }
          label _continueLabel[582641]
          _indexOfInterest[582636]
          _iterator[582637]
        }
        label _breakLabel[582642]
      }
      (582694 return ret[582692])
    }
    function chpl__forexpr6[582613](arg iterExpr[582616]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582706] "RVV" "temp"
      unknown _iterator[582620] "expr temp" "maybe ref" "temp"
      (582622 'move' _iterator[582620] iterExpr[582616])
      unknown call_tmp[582713] "expr temp" "maybe param" "maybe type" "temp"
      (582716 'move' call_tmp[582713](582625 call chpl__loopexpr_iter6 _iterator[582620]))
      (582711 'move' ret[582706](582710 'deref' call_tmp[582713]))
      (582708 return ret[582706])
    }
    unknown call_tmp[582718] "expr temp" "maybe param" "maybe type" "temp"
    (582721 'move' call_tmp[582718](141871 call _build_tuple D[141734] A[141728]))
    unknown call_tmp[582723] "maybe param" "maybe type" "temp"
    (582726 'move' call_tmp[582723](582618 call chpl__forexpr6 call_tmp[582718]))
    (582730 'iterator record set shape' call_tmp[582723] D[141734] 1)
    unknown call_tmp[665658] "expr temp" "maybe param" "maybe type" "temp"
    (665661 'move' call_tmp[665658](141859 call chpl__ensureDomainExpr D[141734]))
    unknown call_tmp[665665] "expr temp" "maybe param" "maybe type" "temp"
    (665668 'move' call_tmp[665665](141856 call eltType _mt[243] A[141728]))
    unknown call_tmp[665670] "maybe param" "maybe type" "temp"
    (665673 'move' call_tmp[665670](141861 call chpl__buildArrayRuntimeType call_tmp[665658] call_tmp[665665]))
    (543165 'init var' B[141880] call_tmp[582723] call_tmp[665670])
    (141883 'end of statement')
    (519147 'move' ret[519142](519146 'deref' B[141880]))
    gotoReturn _end_reshape[519140] _end_reshape[519140]
    (480829 'end of statement' B[141880])
    label _end_reshape[519140]
    (519144 return ret[519142])
  }
  function reshape[141895](arg A[141892]:_iteratorRecord[205](?), arg D[141898]:_domain[125902](?)) : _unknown[51] "no doc"
  {
    unknown ret[519153] "RVV" "temp"
    unknown call_tmp[665675] "expr temp" "maybe param" "maybe type" "temp"
    (665678 'move' call_tmp[665675](141904 call isRectangularDom D[141898]))
    unknown call_tmp[665680] "expr temp" "maybe param" "maybe type" "temp"
    (665683 'move' call_tmp[665680](141905 call ! call_tmp[665675]))
    unknown call_tmp[665685] "expr temp" "maybe param" "maybe type" "temp"
    (665688 'move' call_tmp[665685](141917 call _cond_test call_tmp[665680]))
    if call_tmp[665685]
    {
      unknown call_tmp[665690] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665693 'move' call_tmp[665690](141911 'typeof' D[141898]))
      unknown call_tmp[665695] "expr temp" "maybe param" "maybe type" "temp"
      (665698 'move' call_tmp[665695](141913 call _cast string[26] call_tmp[665690]))
      (141915 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665695])
    }
    unknown B[141940] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter7[582748](arg iterator[582750]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582811] "RVV" "temp"
      {
        unknown _indexOfInterest[582755] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582756] "expr temp" "temp"
        (582765 'move' _iterator[582756](582763 call _getIteratorZip iterator[582750]))
        Defer
        {
          {
            (582791 call _freeIterator _iterator[582756])
          }
        }
        { scopeless type
          (582770 'move' _indexOfInterest[582755](582767 call iteratorIndex _iterator[582756]))
        }
        ForLoop[582757] for-expr
        {
          unknown a[141938] "index var" "insert auto destroy" "no doc"
          (582800 'end of statement')
          unknown i[141936] "index var" "insert auto destroy" "no doc"
          (582801 'end of statement')
          (582775 call _check_tuple_var_decl _indexOfInterest[582755] 2)
          (582802 'end of statement')
          (582781 'move' i[141936](582779 call _indexOfInterest[582755] 0))
          (582803 'end of statement' i[141936])
          (582786 'move' a[141938](582784 call _indexOfInterest[582755] 1))
          (582805 'end of statement' a[141938])
          {
            {
              unknown yret[582815] "YVV" "temp"
              (582818 'move' yret[582815](582817 'deref' a[141938]))
              (582820 yield yret[582815])
              (582807 'end of statement' a[141938])
            }
          }
          label _continueLabel[582760]
          _indexOfInterest[582755]
          _iterator[582756]
        }
        label _breakLabel[582761]
      }
      (582813 return ret[582811])
    }
    function chpl__forexpr7[582732](arg iterExpr[582735]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582825] "RVV" "temp"
      unknown _iterator[582739] "expr temp" "maybe ref" "temp"
      (582741 'move' _iterator[582739] iterExpr[582735])
      unknown call_tmp[582832] "expr temp" "maybe param" "maybe type" "temp"
      (582835 'move' call_tmp[582832](582744 call chpl__loopexpr_iter7 _iterator[582739]))
      (582830 'move' ret[582825](582829 'deref' call_tmp[582832]))
      (582827 return ret[582825])
    }
    unknown call_tmp[582837] "expr temp" "maybe param" "maybe type" "temp"
    (582840 'move' call_tmp[582837](141931 call _build_tuple D[141898] A[141892]))
    unknown call_tmp[582842] "maybe param" "maybe type" "temp"
    (582845 'move' call_tmp[582842](582737 call chpl__forexpr7 call_tmp[582837]))
    (582849 'iterator record set shape' call_tmp[582842] D[141898] 1)
    (543167 'init var' B[141940] call_tmp[582842])
    (141943 'end of statement')
    (519158 'move' ret[519153](519157 'deref' B[141940]))
    gotoReturn _end_reshape[519151] _end_reshape[519151]
    (480832 'end of statement' B[141940])
    label _end_reshape[519151]
    (519155 return ret[519153])
  }
  function linearize[141953](arg Xs[141951]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[519164] "RVV" "temp"
    {
      unknown _indexOfInterest[141960] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141961] "expr temp" "temp"
      (141970 'move' _iterator[141961](141968 call _getIterator Xs[141951]))
      Defer
      {
        {
          (141986 call _freeIterator _iterator[141961])
        }
      }
      { scopeless type
        (141975 'move' _indexOfInterest[141960](141972 call iteratorIndex _iterator[141961]))
      }
      ForLoop[141962]
      {
        unknown x[141979] "index var" "insert auto destroy"
        (480835 'end of statement')
        (141981 'move' x[141979] _indexOfInterest[141960])
        (480836 'end of statement' x[141979])
        unknown yret[519168] "YVV" "temp"
        (519171 'move' yret[519168](519170 'deref' x[141979]))
        (519173 yield yret[519168])
        (480838 'end of statement' x[141979])
        label _continueLabel[141965]
        _indexOfInterest[141960]
        _iterator[141961]
      }
      label _breakLabel[141966]
    }
    (519166 return ret[519164])
  }
  function chpl__unalias[142002](arg x[141999]:_domain[125902](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519177] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492194] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665702] "expr temp" "maybe param" "maybe type" "temp"
      (665705 'move' call_tmp[665702](142006 call _instance _mt[243] x[141999]))
      (492198 'move' call_type_tmp[492194](142009 'typeof' call_tmp[665702]))
    }
    { scopeless type
      unknown call_type_tmp[492200] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665709] "expr temp" "maybe param" "maybe type" "temp"
      (665712 'move' call_tmp[665709](142013 call _instance _mt[243] x[141999]))
      (492204 'move' call_type_tmp[492200](142016 'typeof' call_tmp[665709]))
    }
    unknown call_tmp[665714] "expr temp" "maybe param" "maybe type" "temp"
    (665717 'move' call_tmp[665714](142011 call _to_unmanaged call_type_tmp[492194]))
    unknown call_tmp[665719] "expr temp" "maybe param" "maybe type" "temp"
    (665722 'move' call_tmp[665719](142017 call != call_tmp[665714] call_type_tmp[492200]))
    unknown call_tmp[665724] "expr temp" "maybe param" "maybe type" "temp"
    (665727 'move' call_tmp[665724](142024 call _cond_test call_tmp[665719]))
    if call_tmp[665724]
    {
      (142022 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[665731] "expr temp" "maybe param" "maybe type" "temp"
    (665734 'move' call_tmp[665731](142031 call _unowned _mt[243] x[141999]))
    unknown call_tmp[665736] "expr temp" "maybe param" "maybe type" "temp"
    (665739 'move' call_tmp[665736](142052 call _cond_test call_tmp[665731]))
    if call_tmp[665736]
    {
      unknown ret[142035] "dead at end of block" "no auto destroy"
      (543169 'init var' ret[142035] x[141999])
      (142038 'end of statement')
      (519182 'move' ret[519177](519181 'deref' ret[142035]))
      gotoReturn _end_chpl__unalias[519175] _end_chpl__unalias[519175]
      (480841 'end of statement' ret[142035])
    }
    {
      unknown ret[142044] "dead at end of block" "insert auto destroy" "no copy"
      (543171 'init var' ret[142044] x[141999])
      (142047 'end of statement')
      (519187 'move' ret[519177](519186 'deref' ret[142044]))
      gotoReturn _end_chpl__unalias[519175] _end_chpl__unalias[519175]
      (480843 'end of statement' ret[142044])
    }
    label _end_chpl__unalias[519175]
    (519179 return ret[519177])
  }
  function chpl__initCopy[142066](const  ref arg rhs[142063]:_array[133588](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519193] "RVV" "temp"
    unknown call_tmp[665741] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (665744 'move' call_tmp[665741](142070 'typeof' rhs[142063]))
    unknown call_tmp[665746] "maybe param" "maybe type" "temp"
    (665749 'move' call_tmp[665746](142073 call chpl__coerceCopy call_tmp[665741] rhs[142063]))
    unknown lhs[142074] "dead at end of block" "no copy"
    (543173 'init var' lhs[142074] call_tmp[665746])
    (142077 'end of statement')
    (519198 'move' ret[519193](519197 'deref' lhs[142074]))
    gotoReturn _end_chpl__initCopy[519191] _end_chpl__initCopy[519191]
    (480845 'end of statement' lhs[142074])
    label _end_chpl__initCopy[519191]
    (519195 return ret[519193])
  }
  function chpl__autoCopy[142092](arg x[142089]:_array[133588](?)) : _unknown[51] "auto copy fn"
  {
    unknown ret[519204] "RVV" "temp"
    unknown call_tmp[665751] "maybe param" "maybe type" "temp"
    (665754 'move' call_tmp[665751](142097 call chpl__initCopy x[142089]))
    unknown b[142098] "dead at end of block" "insert auto destroy" "no copy"
    (543175 'init var' b[142098] call_tmp[665751])
    (142101 'end of statement')
    (519209 'move' ret[519204](519208 'deref' b[142098]))
    gotoReturn _end_chpl__autoCopy[519202] _end_chpl__autoCopy[519202]
    (480847 'end of statement' b[142098])
    label _end_chpl__autoCopy[519202]
    (519206 return ret[519204])
  }
  function chpl__coerceCopy[142114](arg dstType[142111]:_domain[125902](?), arg rhs[142117]:_domain[125902](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519215] "RVV" "temp"
    unknown call_tmp[665758] "expr temp" "maybe param" "maybe type" "temp"
    (665761 'move' call_tmp[665758](142121 call dist _mt[243] rhs[142117]))
    unknown call_tmp[665765] "expr temp" "maybe param" "maybe type" "temp"
    (665768 'move' call_tmp[665765](142124 call _value _mt[243] call_tmp[665758]))
    unknown call_tmp[665772] "maybe param" "maybe type" "temp"
    (665775 'move' call_tmp[665772](142133 call(142129 call (partial) dsiIsLayout _mt[243] call_tmp[665765])))
    unknown rhsIsLayout[142134] "dead at end of block" "param"
    (543177 'init var' rhsIsLayout[142134] call_tmp[665772])
    (142137 'end of statement')
    unknown lhs[142140] "dead at end of block" "insert auto destroy"
    (543179 'default init var' lhs[142140] dstType[142111])
    (142143 'end of statement')
    (748049 call chpl_statementLevelSymbol lhs[142140])
    (142148 call = lhs[142140] rhs[142117])
    (480849 'end of statement' lhs[142140])
    unknown tmp[426769] "maybe param" "temp"
    unknown call_tmp[665779] "expr temp" "maybe param" "maybe type" "temp"
    (665782 'move' call_tmp[665779](142152 call dist _mt[243] lhs[142140]))
    unknown call_tmp[665786] "expr temp" "maybe param" "maybe type" "temp"
    (665789 'move' call_tmp[665786](142155 call _value _mt[243] call_tmp[665779]))
    (426780 'move' tmp[426769](142162 call(142158 call (partial) dsiIsLayout _mt[243] call_tmp[665786])))
    unknown call_tmp[665793] "expr temp" "maybe param" "maybe type" "temp"
    (665796 'move' call_tmp[665793](426782 call _cond_invalid tmp[426769]))
    if call_tmp[665793]
    {
      (426785 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568041] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568042] "maybe param" "temp"
    unknown call_tmp[665798] "expr temp" "maybe param" "maybe type" "temp"
    (665801 'move' call_tmp[665798](426770 call isTrue tmp[426769]))
    (568047 'move' tmp[568042](568045 call _cond_test call_tmp[665798]))
    if tmp[568042]
    {
      unknown tmp[568049] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665803] "expr temp" "maybe param" "maybe type" "temp"
      (665806 'move' call_tmp[665803](142164 call ! rhsIsLayout[142134]))
      (568051 'move' tmp[568049](426773 call isTrue call_tmp[665803]))
      (568056 'move' tmp[568041](568053 '_paramFoldLogical' tmp[568042] tmp[568049]))
    }
    {
      (568061 'move' tmp[568041](568058 '_paramFoldLogical' tmp[568042] 0))
    }
    unknown call_tmp[665808] "expr temp" "maybe param" "maybe type" "temp"
    (665811 'move' call_tmp[665808](142191 call _cond_test tmp[568041]))
    if call_tmp[665808]
    {
      (142189 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519220 'move' ret[519215](519219 'deref' lhs[142140]))
    gotoReturn _end_chpl__coerceCopy[519213] _end_chpl__coerceCopy[519213]
    (480853 'end of statement' lhs[142140])
    label _end_chpl__coerceCopy[519213]
    (519217 return ret[519215])
  }
  function chpl__coerceMove[142207](arg dstType[142204]:_domain[125902](?), in arg rhs[142210]:_domain[125902](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519226] "RVV" "temp"
    unknown call_tmp[665815] "expr temp" "maybe param" "maybe type" "temp"
    (665818 'move' call_tmp[665815](142214 call dist _mt[243] rhs[142210]))
    unknown call_tmp[665822] "expr temp" "maybe param" "maybe type" "temp"
    (665825 'move' call_tmp[665822](142217 call _value _mt[243] call_tmp[665815]))
    unknown call_tmp[665829] "maybe param" "maybe type" "temp"
    (665832 'move' call_tmp[665829](142224 call(142220 call (partial) dsiIsLayout _mt[243] call_tmp[665822])))
    unknown rhsIsLayout[142225] "dead at end of block" "param"
    (543181 'init var' rhsIsLayout[142225] call_tmp[665829])
    (142228 'end of statement')
    unknown lhs[142231] "dead at end of block" "insert auto destroy"
    (543183 'default init var' lhs[142231] dstType[142204])
    (142234 'end of statement')
    (748051 call chpl_statementLevelSymbol lhs[142231])
    (142239 call = lhs[142231] rhs[142210])
    (480855 'end of statement' lhs[142231])
    unknown tmp[426790] "maybe param" "temp"
    unknown call_tmp[665836] "expr temp" "maybe param" "maybe type" "temp"
    (665839 'move' call_tmp[665836](142243 call dist _mt[243] lhs[142231]))
    unknown call_tmp[665843] "expr temp" "maybe param" "maybe type" "temp"
    (665846 'move' call_tmp[665843](142246 call _value _mt[243] call_tmp[665836]))
    (426801 'move' tmp[426790](142253 call(142249 call (partial) dsiIsLayout _mt[243] call_tmp[665843])))
    unknown call_tmp[665850] "expr temp" "maybe param" "maybe type" "temp"
    (665853 'move' call_tmp[665850](426803 call _cond_invalid tmp[426790]))
    if call_tmp[665850]
    {
      (426806 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568068] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568069] "maybe param" "temp"
    unknown call_tmp[665855] "expr temp" "maybe param" "maybe type" "temp"
    (665858 'move' call_tmp[665855](426791 call isTrue tmp[426790]))
    (568074 'move' tmp[568069](568072 call _cond_test call_tmp[665855]))
    if tmp[568069]
    {
      unknown tmp[568076] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665860] "expr temp" "maybe param" "maybe type" "temp"
      (665863 'move' call_tmp[665860](142255 call ! rhsIsLayout[142225]))
      (568078 'move' tmp[568076](426794 call isTrue call_tmp[665860]))
      (568083 'move' tmp[568068](568080 '_paramFoldLogical' tmp[568069] tmp[568076]))
    }
    {
      (568088 'move' tmp[568068](568085 '_paramFoldLogical' tmp[568069] 0))
    }
    unknown call_tmp[665865] "expr temp" "maybe param" "maybe type" "temp"
    (665868 'move' call_tmp[665865](142264 call _cond_test tmp[568068]))
    if call_tmp[665865]
    {
      (142262 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519231 'move' ret[519226](519230 'deref' lhs[142231]))
    gotoReturn _end_chpl__coerceMove[519224] _end_chpl__coerceMove[519224]
    (480859 'end of statement' lhs[142231])
    label _end_chpl__coerceMove[519224]
    (519228 return ret[519226])
  }
  function chpl__coerceCopy[142280](arg dstType[142277]:_domain[125902](?), arg rhs[142283]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519237] "RVV" "temp"
    unknown lhs[142287] "dead at end of block" "insert auto destroy"
    (543185 'default init var' lhs[142287] dstType[142277])
    (142290 'end of statement')
    (748053 call chpl_statementLevelSymbol lhs[142287])
    unknown call_tmp[665870] "expr temp" "maybe param" "maybe type" "temp"
    (665873 'move' call_tmp[665870](142298 call chpl__isLegalRectTupDomAssign lhs[142287] rhs[142283]))
    unknown call_tmp[665875] "expr temp" "maybe param" "maybe type" "temp"
    (665878 'move' call_tmp[665875](142315 call _cond_test call_tmp[665870]))
    if call_tmp[665875]
    {
      unknown call_tmp[665880] "expr temp" "maybe param" "maybe type" "temp"
      (665883 'move' call_tmp[665880](142303 call chpl__buildDomainExpr(142301 'expand_tuple' rhs[142283])))
      (142305 call = lhs[142287] call_tmp[665880])
      (480861 'end of statement' lhs[142287])
    }
    {
      (142311 call = lhs[142287] rhs[142283])
      (480863 'end of statement' lhs[142287])
    }
    (519242 'move' ret[519237](519241 'deref' lhs[142287]))
    gotoReturn _end_chpl__coerceCopy[519235] _end_chpl__coerceCopy[519235]
    (480865 'end of statement' lhs[142287])
    label _end_chpl__coerceCopy[519235]
    (519239 return ret[519237])
  }
  function chpl__coerceMove[142330](arg dstType[142327]:_domain[125902](?), in arg rhs[142333]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519248] "RVV" "temp"
    unknown lhs[142337] "dead at end of block" "insert auto destroy"
    (543187 'default init var' lhs[142337] dstType[142327])
    (142340 'end of statement')
    (748055 call chpl_statementLevelSymbol lhs[142337])
    unknown call_tmp[665885] "expr temp" "maybe param" "maybe type" "temp"
    (665888 'move' call_tmp[665885](142348 call chpl__isLegalRectTupDomAssign lhs[142337] rhs[142333]))
    unknown call_tmp[665890] "expr temp" "maybe param" "maybe type" "temp"
    (665893 'move' call_tmp[665890](142365 call _cond_test call_tmp[665885]))
    if call_tmp[665890]
    {
      unknown call_tmp[665895] "expr temp" "maybe param" "maybe type" "temp"
      (665898 'move' call_tmp[665895](142353 call chpl__buildDomainExpr(142351 'expand_tuple' rhs[142333])))
      (142355 call = lhs[142337] call_tmp[665895])
      (480867 'end of statement' lhs[142337])
    }
    {
      (142361 call = lhs[142337] rhs[142333])
      (480869 'end of statement' lhs[142337])
    }
    (519253 'move' ret[519248](519252 'deref' lhs[142337]))
    gotoReturn _end_chpl__coerceMove[519246] _end_chpl__coerceMove[519246]
    (480871 'end of statement' lhs[142337])
    label _end_chpl__coerceMove[519246]
    (519250 return ret[519248])
  }
  function chpl__coerceCopy[142380](arg dstType[142377]:_domain[125902](?), arg rhs[142386]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519259] "RVV" "temp"
    unknown lhs[142390] "dead at end of block" "insert auto destroy"
    (543189 'default init var' lhs[142390] dstType[142377])
    (142393 'end of statement')
    (748057 call chpl_statementLevelSymbol lhs[142390])
    unknown call_tmp[665900] "expr temp" "maybe param" "maybe type" "temp"
    (665903 'move' call_tmp[665900](142400 call chpl__buildDomainExpr rhs[142386]))
    (142402 call = lhs[142390] call_tmp[665900])
    (480873 'end of statement' lhs[142390])
    (519264 'move' ret[519259](519263 'deref' lhs[142390]))
    gotoReturn _end_chpl__coerceCopy[519257] _end_chpl__coerceCopy[519257]
    (480875 'end of statement' lhs[142390])
    label _end_chpl__coerceCopy[519257]
    (519261 return ret[519259])
  }
  function chpl__coerceMove[142416](arg dstType[142413]:_domain[125902](?), in arg rhs[142422]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519270] "RVV" "temp"
    unknown lhs[142426] "dead at end of block" "insert auto destroy"
    (543191 'default init var' lhs[142426] dstType[142413])
    (142429 'end of statement')
    (748059 call chpl_statementLevelSymbol lhs[142426])
    unknown call_tmp[665905] "expr temp" "maybe param" "maybe type" "temp"
    (665908 'move' call_tmp[665905](142436 call chpl__buildDomainExpr rhs[142422]))
    (142438 call = lhs[142426] call_tmp[665905])
    (480877 'end of statement' lhs[142426])
    (519275 'move' ret[519270](519274 'deref' lhs[142426]))
    gotoReturn _end_chpl__coerceMove[519268] _end_chpl__coerceMove[519268]
    (480879 'end of statement' lhs[142426])
    label _end_chpl__coerceMove[519268]
    (519272 return ret[519270])
  }
  function chpl__coerceCopy[142452](arg dstType[142449]:_domain[125902](?), arg rhs[142455]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519281] "RVV" "temp"
    unknown lhs[142459] "dead at end of block" "insert auto destroy"
    (543193 'default init var' lhs[142459] dstType[142449])
    (142462 'end of statement')
    unknown call_tmp[665910] "expr temp" "maybe param" "maybe type" "temp"
    (665913 'move' call_tmp[665910](142467 call isRectangularDom lhs[142459]))
    unknown call_tmp[665915] "expr temp" "maybe param" "maybe type" "temp"
    (665918 'move' call_tmp[665915](142473 call _cond_test call_tmp[665910]))
    if call_tmp[665915]
    {
      (142471 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142483 call(142479 call (partial) clear _mt[243] lhs[142459]))
    (480882 'end of statement' lhs[142459])
    {
      unknown _indexOfInterest[142496] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142497] "expr temp" "temp"
      (142506 'move' _iterator[142497](142504 call _getIterator rhs[142455]))
      Defer
      {
        {
          (142522 call _freeIterator _iterator[142497])
        }
      }
      { scopeless type
        (142511 'move' _indexOfInterest[142496](142508 call iteratorIndex _iterator[142497]))
      }
      ForLoop[142498]
      {
        unknown ind[142515] "index var" "insert auto destroy"
        (480885 'end of statement')
        (142517 'move' ind[142515] _indexOfInterest[142496])
        (480886 'end of statement' ind[142515])
        {
          (142493 call(142488 call (partial) add _mt[243] lhs[142459]) ind[142515])
          (480888 'end of statement' lhs[142459] ind[142515])
        }
        label _continueLabel[142501]
        _indexOfInterest[142496]
        _iterator[142497]
      }
      label _breakLabel[142502]
    }
    (519286 'move' ret[519281](519285 'deref' lhs[142459]))
    gotoReturn _end_chpl__coerceCopy[519279] _end_chpl__coerceCopy[519279]
    (480891 'end of statement' lhs[142459])
    label _end_chpl__coerceCopy[519279]
    (519283 return ret[519281])
  }
  function chpl__coerceMove[142540](arg dstType[142537]:_domain[125902](?), arg rhs[142543]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519292] "RVV" "temp"
    unknown lhs[142547] "dead at end of block" "insert auto destroy"
    (543195 'default init var' lhs[142547] dstType[142537])
    (142550 'end of statement')
    unknown call_tmp[665924] "expr temp" "maybe param" "maybe type" "temp"
    (665927 'move' call_tmp[665924](142555 call isRectangularDom lhs[142547]))
    unknown call_tmp[665929] "expr temp" "maybe param" "maybe type" "temp"
    (665932 'move' call_tmp[665929](142561 call _cond_test call_tmp[665924]))
    if call_tmp[665929]
    {
      (142559 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142571 call(142567 call (partial) clear _mt[243] lhs[142547]))
    (480894 'end of statement' lhs[142547])
    {
      unknown _indexOfInterest[142584] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142585] "expr temp" "temp"
      (142594 'move' _iterator[142585](142592 call _getIterator rhs[142543]))
      Defer
      {
        {
          (142610 call _freeIterator _iterator[142585])
        }
      }
      { scopeless type
        (142599 'move' _indexOfInterest[142584](142596 call iteratorIndex _iterator[142585]))
      }
      ForLoop[142586]
      {
        unknown ind[142603] "index var" "insert auto destroy"
        (480897 'end of statement')
        (142605 'move' ind[142603] _indexOfInterest[142584])
        (480898 'end of statement' ind[142603])
        {
          (142581 call(142576 call (partial) add _mt[243] lhs[142547]) ind[142603])
          (480900 'end of statement' lhs[142547] ind[142603])
        }
        label _continueLabel[142589]
        _indexOfInterest[142584]
        _iterator[142585]
      }
      label _breakLabel[142590]
    }
    (519297 'move' ret[519292](519296 'deref' lhs[142547]))
    gotoReturn _end_chpl__coerceMove[519290] _end_chpl__coerceMove[519290]
    (480903 'end of statement' lhs[142547])
    label _end_chpl__coerceMove[519290]
    (519294 return ret[519292])
  }
  function chpl__coerceCopy[142628](arg dstType[142625]:_domain[125902](?), arg rhs[142630]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519303] "RVV" "temp"
    unknown lhs[142633] "dead at end of block" "insert auto destroy"
    (543197 'default init var' lhs[142633] dstType[142625])
    (142636 'end of statement')
    unknown call_tmp[665938] "expr temp" "maybe param" "maybe type" "temp"
    (665941 'move' call_tmp[665938](142641 call isRectangularDom lhs[142633]))
    unknown call_tmp[665943] "expr temp" "maybe param" "maybe type" "temp"
    (665946 'move' call_tmp[665943](142647 call _cond_test call_tmp[665938]))
    if call_tmp[665943]
    {
      (142645 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142657 call(142653 call (partial) clear _mt[243] lhs[142633]))
    (480906 'end of statement' lhs[142633])
    {
      unknown _indexOfInterest[142670] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142671] "expr temp" "temp"
      (142680 'move' _iterator[142671](142678 call _getIterator rhs[142630]))
      Defer
      {
        {
          (142696 call _freeIterator _iterator[142671])
        }
      }
      { scopeless type
        (142685 'move' _indexOfInterest[142670](142682 call iteratorIndex _iterator[142671]))
      }
      ForLoop[142672]
      {
        unknown ind[142689] "index var" "insert auto destroy"
        (480909 'end of statement')
        (142691 'move' ind[142689] _indexOfInterest[142670])
        (480910 'end of statement' ind[142689])
        {
          (142667 call(142662 call (partial) add _mt[243] lhs[142633]) ind[142689])
          (480912 'end of statement' lhs[142633] ind[142689])
        }
        label _continueLabel[142675]
        _indexOfInterest[142670]
        _iterator[142671]
      }
      label _breakLabel[142676]
    }
    (519308 'move' ret[519303](519307 'deref' lhs[142633]))
    gotoReturn _end_chpl__coerceCopy[519301] _end_chpl__coerceCopy[519301]
    (480915 'end of statement' lhs[142633])
    label _end_chpl__coerceCopy[519301]
    (519305 return ret[519303])
  }
  function chpl__coerceMove[142714](arg dstType[142711]:_domain[125902](?), in arg rhs[142716]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519314] "RVV" "temp"
    unknown lhs[142719] "dead at end of block" "insert auto destroy"
    (543199 'default init var' lhs[142719] dstType[142711])
    (142722 'end of statement')
    unknown call_tmp[665952] "expr temp" "maybe param" "maybe type" "temp"
    (665955 'move' call_tmp[665952](142727 call isRectangularDom lhs[142719]))
    unknown call_tmp[665957] "expr temp" "maybe param" "maybe type" "temp"
    (665960 'move' call_tmp[665957](142733 call _cond_test call_tmp[665952]))
    if call_tmp[665957]
    {
      (142731 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142743 call(142739 call (partial) clear _mt[243] lhs[142719]))
    (480918 'end of statement' lhs[142719])
    {
      unknown _indexOfInterest[142756] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142757] "expr temp" "temp"
      (142766 'move' _iterator[142757](142764 call _getIterator rhs[142716]))
      Defer
      {
        {
          (142782 call _freeIterator _iterator[142757])
        }
      }
      { scopeless type
        (142771 'move' _indexOfInterest[142756](142768 call iteratorIndex _iterator[142757]))
      }
      ForLoop[142758]
      {
        unknown ind[142775] "index var" "insert auto destroy"
        (480921 'end of statement')
        (142777 'move' ind[142775] _indexOfInterest[142756])
        (480922 'end of statement' ind[142775])
        {
          (142753 call(142748 call (partial) add _mt[243] lhs[142719]) ind[142775])
          (480924 'end of statement' lhs[142719] ind[142775])
        }
        label _continueLabel[142761]
        _indexOfInterest[142756]
        _iterator[142757]
      }
      label _breakLabel[142762]
    }
    (519319 'move' ret[519314](519318 'deref' lhs[142719]))
    gotoReturn _end_chpl__coerceMove[519312] _end_chpl__coerceMove[519312]
    (480927 'end of statement' lhs[142719])
    label _end_chpl__coerceMove[519312]
    (519316 return ret[519314])
  }
  function chpl__coerceCopy[142800](arg dstType[142797]:_array[133588](?), arg rhs[142803]:_array[133588](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519325] "RVV" "temp"
    unknown eltType[142810] "dead at end of block" "insert auto destroy" "type variable"(142809 call chpl__eltTypeFromArrayRuntimeType dstType[142797])
    (543204 'move' eltType[142810](543202 call chpl__eltTypeFromArrayRuntimeType dstType[142797]))
    const dom[142818] "dead at end of block" "const" "ref var"
    unknown call_tmp[665966] "expr temp" "maybe param" "maybe type" "temp"
    (665969 'move' call_tmp[665966](142817 call chpl__domainFromArrayRuntimeType dstType[142797]))
    (543207 'move' dom[142818](543206 'addr of' call_tmp[665966]))
    (142821 'end of statement')
    unknown call_tmp[665973] "maybe param" "maybe type" "temp"
    (665976 'move' call_tmp[665973](142830 call(142823 call (partial) buildArray _mt[243] dom[142818]) eltType[142810](initElts = 0)))
    unknown lhs[142831] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543209 'init var' lhs[142831] call_tmp[665973])
    (142834 'end of statement' dom[142818] eltType[142810])
    unknown call_tmp[665980] "expr temp" "maybe param" "maybe type" "temp"
    (665983 'move' call_tmp[665980](142836 call rank _mt[243] lhs[142831]))
    unknown call_tmp[665987] "expr temp" "maybe param" "maybe type" "temp"
    (665990 'move' call_tmp[665987](142840 call rank _mt[243] rhs[142803]))
    unknown call_tmp[665992] "expr temp" "maybe param" "maybe type" "temp"
    (665995 'move' call_tmp[665992](142843 call != call_tmp[665980] call_tmp[665987]))
    unknown call_tmp[665997] "expr temp" "maybe param" "maybe type" "temp"
    (666000 'move' call_tmp[665997](142850 call _cond_test call_tmp[665992]))
    if call_tmp[665997]
    {
      (142848 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666002] "expr temp" "maybe param" "maybe type" "temp"
    (666005 'move' call_tmp[666002](142858 call isCopyableType eltType[142810]))
    unknown call_tmp[666007] "expr temp" "maybe param" "maybe type" "temp"
    (666010 'move' call_tmp[666007](142859 call ! call_tmp[666002]))
    unknown call_tmp[666012] "expr temp" "maybe param" "maybe type" "temp"
    (666015 'move' call_tmp[666012](142903 call _cond_test call_tmp[666007]))
    if call_tmp[666012]
    {
      unknown call_tmp[666017] "expr temp" "maybe param" "maybe type" "temp"
      (666020 'move' call_tmp[666017](142882 call _cast string[26] eltType[142810]))
      (142901 call compilerError "Cannot copy-initialize array because element type '" call_tmp[666017] "' cannot be copy-initialized")
      (480932 'end of statement' eltType[142810])
    }
    unknown call_tmp[666024] "expr temp" "maybe param" "maybe type" "temp"
    (666027 'move' call_tmp[666024](142909 call _value _mt[243] rhs[142803]))
    unknown call_tmp[666029] "expr temp" "maybe param" "maybe type" "temp"
    (666032 'move' call_tmp[666029](142913 call == call_tmp[666024] nil[44]))
    unknown call_tmp[666034] "expr temp" "maybe param" "maybe type" "temp"
    (666037 'move' call_tmp[666034](142977 call _cond_test call_tmp[666029]))
    if call_tmp[666034]
    {
    }
    {
      unknown call_tmp[666041] "expr temp" "maybe param" "maybe type" "temp"
      (666044 'move' call_tmp[666041](142917 call _value _mt[243] lhs[142831]))
      unknown call_tmp[666048] "expr temp" "maybe param" "maybe type" "temp"
      (666051 'move' call_tmp[666048](142921 call _value _mt[243] rhs[142803]))
      unknown call_tmp[666053] "expr temp" "maybe param" "maybe type" "temp"
      (666056 'move' call_tmp[666053](142924 call == call_tmp[666041] call_tmp[666048]))
      unknown call_tmp[666058] "expr temp" "maybe param" "maybe type" "temp"
      (666061 'move' call_tmp[666058](142972 call _cond_test call_tmp[666053]))
      if call_tmp[666058]
      {
      }
      {
        unknown tmp[426811] "maybe param" "temp"
        unknown call_tmp[666065] "expr temp" "maybe param" "maybe type" "temp"
        (666068 'move' call_tmp[666065](142928 call size _mt[243] lhs[142831]))
        (426822 'move' tmp[426811](142932 call == call_tmp[666065] 0))
        unknown call_tmp[666070] "expr temp" "maybe param" "maybe type" "temp"
        (666073 'move' call_tmp[666070](426824 call _cond_invalid tmp[426811]))
        if call_tmp[666070]
        {
          (426827 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568095] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568096] "maybe param" "temp"
        unknown call_tmp[666075] "expr temp" "maybe param" "maybe type" "temp"
        (666078 'move' call_tmp[666075](426812 call isTrue tmp[426811]))
        (568101 'move' tmp[568096](568099 call _cond_test call_tmp[666075]))
        if tmp[568096]
        {
          unknown tmp[568103] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666082] "expr temp" "maybe param" "maybe type" "temp"
          (666085 'move' call_tmp[666082](142935 call size _mt[243] rhs[142803]))
          unknown call_tmp[666087] "expr temp" "maybe param" "maybe type" "temp"
          (666090 'move' call_tmp[666087](142939 call == call_tmp[666082] 0))
          (568105 'move' tmp[568103](426815 call isTrue call_tmp[666087]))
          (568110 'move' tmp[568095](568107 '_paramFoldLogical' tmp[568096] tmp[568103]))
        }
        {
          (568115 'move' tmp[568095](568112 '_paramFoldLogical' tmp[568096] 0))
        }
        unknown call_tmp[666092] "expr temp" "maybe param" "maybe type" "temp"
        (666095 'move' call_tmp[666092](142968 call _cond_test tmp[568095]))
        if call_tmp[666092]
        {
        }
        {
          unknown call_tmp[666097] "expr temp" "maybe param" "maybe type" "temp"
          (666100 'move' call_tmp[666097](142951 call _cond_test 1))
          if call_tmp[666097]
          {
            (142949 call checkArrayShapesUponAssignment lhs[142831] rhs[142803])
            (480935 'end of statement' lhs[142831])
          }
          (142966 call chpl__uncheckedArrayTransfer lhs[142831] rhs[142803](kind = initCopy[137983]))
          (480937 'end of statement' lhs[142831])
        }
      }
    }
    unknown call_tmp[666104] "expr temp" "maybe param" "maybe type" "temp"
    (666107 'move' call_tmp[666104](142983 call _value _mt[243] lhs[142831]))
    (142992 call(142988 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666104]))
    (480939 'end of statement' lhs[142831])
    (519330 'move' ret[519325](519329 'deref' lhs[142831]))
    gotoReturn _end_chpl__coerceCopy[519323] _end_chpl__coerceCopy[519323]
    (480941 'end of statement' lhs[142831])
    label _end_chpl__coerceCopy[519323]
    (519327 return ret[519325])
  }
  function chpl__coerceMove[143005](arg dstType[143002]:_array[133588](?), in arg rhs[143008]:_array[133588](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519336] "RVV" "temp"
    unknown eltType[143015] "dead at end of block" "insert auto destroy" "type variable"(143014 call chpl__eltTypeFromArrayRuntimeType dstType[143002])
    (543214 'move' eltType[143015](543212 call chpl__eltTypeFromArrayRuntimeType dstType[143002]))
    const dom[143023] "dead at end of block" "const" "ref var"
    unknown call_tmp[666111] "expr temp" "maybe param" "maybe type" "temp"
    (666114 'move' call_tmp[666111](143022 call chpl__domainFromArrayRuntimeType dstType[143002]))
    (543217 'move' dom[143023](543216 'addr of' call_tmp[666111]))
    (143026 'end of statement')
    { scopeless type
      unknown call_type_tmp[492206] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[666118] "expr temp" "maybe param" "maybe type" "temp"
      (666121 'move' call_tmp[666118](143028 call _instance _mt[243] rhs[143008]))
      (492210 'move' call_type_tmp[492206](143031 'typeof' call_tmp[666118]))
    }
    unknown call_tmp[666123] "expr temp" "maybe param" "maybe type" "temp"
    (666126 'move' call_tmp[666123](143035 call chpl__instanceTypeFromArrayRuntimeType dstType[143002]))
    unknown call_tmp[666128] "maybe param" "maybe type" "temp"
    (666131 'move' call_tmp[666128](143036 call != call_type_tmp[492206] call_tmp[666123]))
    unknown typeMismatch[143038] "dead at end of block" "param"
    (543219 'init var' typeMismatch[143038] call_tmp[666128])
    (143041 'end of statement')
    unknown call_tmp[666133] "maybe param" "maybe type" "temp"
    (666136 'move' call_tmp[666133](143043 call ! typeMismatch[143038]))
    unknown moveElts[143045] "dead at end of block" "param"
    (543221 'init var' moveElts[143045] call_tmp[666133])
    (143048 'end of statement')
    unknown tmp[426832] "maybe param" "temp"
    (426843 'move' tmp[426832] moveElts[143045])
    unknown call_tmp[666138] "expr temp" "maybe param" "maybe type" "temp"
    (666141 'move' call_tmp[666138](426845 call _cond_invalid tmp[426832]))
    if call_tmp[666138]
    {
      (426848 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568122] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568123] "maybe param" "temp"
    unknown call_tmp[666143] "expr temp" "maybe param" "maybe type" "temp"
    (666146 'move' call_tmp[666143](426833 call isTrue tmp[426832]))
    (568128 'move' tmp[568123](568126 call _cond_test call_tmp[666143]))
    if tmp[568123]
    {
      unknown tmp[568130] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666150] "expr temp" "maybe param" "maybe type" "temp"
      (666153 'move' call_tmp[666150](143051 call _instance _mt[243] dom[143023]))
      unknown call_tmp[666157] "expr temp" "maybe param" "maybe type" "temp"
      (666160 'move' call_tmp[666157](143055 call _dom _mt[243] rhs[143008]))
      unknown call_tmp[666164] "expr temp" "maybe param" "maybe type" "temp"
      (666167 'move' call_tmp[666164](143058 call _instance _mt[243] call_tmp[666157]))
      unknown call_tmp[666169] "expr temp" "maybe param" "maybe type" "temp"
      (666172 'move' call_tmp[666169](143061 call == call_tmp[666150] call_tmp[666164]))
      (568132 'move' tmp[568130](426836 call isTrue call_tmp[666169]))
      (568137 'move' tmp[568122](568134 '_paramFoldLogical' tmp[568123] tmp[568130]))
    }
    {
      (568142 'move' tmp[568122](568139 '_paramFoldLogical' tmp[568123] 0))
    }
    unknown call_tmp[666174] "expr temp" "maybe param" "maybe type" "temp"
    (666177 'move' call_tmp[666174](143069 call _cond_test tmp[568122]))
    if call_tmp[666174]
    {
      (519341 'move' ret[519336](519340 'deref' rhs[143008]))
      gotoReturn _end_chpl__coerceMove[519334] _end_chpl__coerceMove[519334]
    }
    unknown call_tmp[666181] "maybe param" "maybe type" "temp"
    (666184 'move' call_tmp[666181](143081 call(143074 call (partial) buildArray _mt[243] dom[143023]) eltType[143015](initElts = 0)))
    unknown lhs[143082] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543223 'init var' lhs[143082] call_tmp[666181])
    (143085 'end of statement' dom[143023] eltType[143015])
    unknown call_tmp[666188] "expr temp" "maybe param" "maybe type" "temp"
    (666191 'move' call_tmp[666188](143087 call rank _mt[243] lhs[143082]))
    unknown call_tmp[666195] "expr temp" "maybe param" "maybe type" "temp"
    (666198 'move' call_tmp[666195](143091 call rank _mt[243] rhs[143008]))
    unknown call_tmp[666200] "expr temp" "maybe param" "maybe type" "temp"
    (666203 'move' call_tmp[666200](143094 call != call_tmp[666188] call_tmp[666195]))
    unknown call_tmp[666205] "expr temp" "maybe param" "maybe type" "temp"
    (666208 'move' call_tmp[666205](143101 call _cond_test call_tmp[666200]))
    if call_tmp[666205]
    {
      (143099 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666212] "expr temp" "maybe param" "maybe type" "temp"
    (666215 'move' call_tmp[666212](143107 call _value _mt[243] rhs[143008]))
    unknown call_tmp[666217] "expr temp" "maybe param" "maybe type" "temp"
    (666220 'move' call_tmp[666217](143111 call == call_tmp[666212] nil[44]))
    unknown call_tmp[666222] "expr temp" "maybe param" "maybe type" "temp"
    (666225 'move' call_tmp[666222](143188 call _cond_test call_tmp[666217]))
    if call_tmp[666222]
    {
    }
    {
      unknown call_tmp[666229] "expr temp" "maybe param" "maybe type" "temp"
      (666232 'move' call_tmp[666229](143115 call _value _mt[243] lhs[143082]))
      unknown call_tmp[666236] "expr temp" "maybe param" "maybe type" "temp"
      (666239 'move' call_tmp[666236](143119 call _value _mt[243] rhs[143008]))
      unknown call_tmp[666241] "expr temp" "maybe param" "maybe type" "temp"
      (666244 'move' call_tmp[666241](143122 call == call_tmp[666229] call_tmp[666236]))
      unknown call_tmp[666246] "expr temp" "maybe param" "maybe type" "temp"
      (666249 'move' call_tmp[666246](143183 call _cond_test call_tmp[666241]))
      if call_tmp[666246]
      {
      }
      {
        unknown tmp[426853] "maybe param" "temp"
        unknown call_tmp[666253] "expr temp" "maybe param" "maybe type" "temp"
        (666256 'move' call_tmp[666253](143126 call size _mt[243] lhs[143082]))
        (426864 'move' tmp[426853](143130 call == call_tmp[666253] 0))
        unknown call_tmp[666258] "expr temp" "maybe param" "maybe type" "temp"
        (666261 'move' call_tmp[666258](426866 call _cond_invalid tmp[426853]))
        if call_tmp[666258]
        {
          (426869 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568149] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568150] "maybe param" "temp"
        unknown call_tmp[666263] "expr temp" "maybe param" "maybe type" "temp"
        (666266 'move' call_tmp[666263](426854 call isTrue tmp[426853]))
        (568155 'move' tmp[568150](568153 call _cond_test call_tmp[666263]))
        if tmp[568150]
        {
          unknown tmp[568157] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666270] "expr temp" "maybe param" "maybe type" "temp"
          (666273 'move' call_tmp[666270](143133 call size _mt[243] rhs[143008]))
          unknown call_tmp[666275] "expr temp" "maybe param" "maybe type" "temp"
          (666278 'move' call_tmp[666275](143137 call == call_tmp[666270] 0))
          (568159 'move' tmp[568157](426857 call isTrue call_tmp[666275]))
          (568164 'move' tmp[568149](568161 '_paramFoldLogical' tmp[568150] tmp[568157]))
        }
        {
          (568169 'move' tmp[568149](568166 '_paramFoldLogical' tmp[568150] 0))
        }
        unknown call_tmp[666280] "expr temp" "maybe param" "maybe type" "temp"
        (666283 'move' call_tmp[666280](143179 call _cond_test tmp[568149]))
        if call_tmp[666280]
        {
        }
        {
          unknown call_tmp[666285] "expr temp" "maybe param" "maybe type" "temp"
          (666288 'move' call_tmp[666285](143149 call _cond_test 1))
          if call_tmp[666285]
          {
            (143147 call checkArrayShapesUponAssignment lhs[143082] rhs[143008])
            (480949 'end of statement' lhs[143082])
          }
          unknown kind[143167] "dead at end of block" "param"
          unknown tmp[568176] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568177] "maybe param" "temp"
          (568182 'move' tmp[568177](568180 call _cond_test moveElts[143045]))
          if tmp[568177]
          {
            (568187 'move' tmp[568176](568184 '_paramFoldLogical' tmp[568177] move[137981]))
          }
          {
            (568192 'move' tmp[568176](568189 '_paramFoldLogical' tmp[568177] initCopy[137983]))
          }
          (543225 'init var' kind[143167] tmp[568176])
          (143170 'end of statement')
          (143177 call chpl__uncheckedArrayTransfer lhs[143082] rhs[143008](kind = kind[143167]))
          (480951 'end of statement' lhs[143082])
        }
      }
    }
    unknown call_tmp[666292] "expr temp" "maybe param" "maybe type" "temp"
    (666295 'move' call_tmp[666292](143195 call _unowned _mt[243] rhs[143008]))
    unknown call_tmp[666299] "expr temp" "maybe param" "maybe type" "temp"
    (666302 'move' call_tmp[666299](143200 call _instance _mt[243] rhs[143008]))
    unknown call_tmp[666304] "expr temp" "maybe param" "maybe type" "temp"
    (666307 'move' call_tmp[666304](143204 call ! moveElts[143045]))
    (143207 call _do_destroy_arr call_tmp[666292] call_tmp[666299](deinitElts = call_tmp[666304]))
    (480953 'end of statement')
    unknown call_tmp[666311] "expr temp" "maybe param" "maybe type" "temp"
    (666314 'move' call_tmp[666311](143210 call _value _mt[243] lhs[143082]))
    (143217 call(143213 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666311]))
    (480954 'end of statement' lhs[143082])
    (519346 'move' ret[519336](519345 'deref' lhs[143082]))
    gotoReturn _end_chpl__coerceMove[519334] _end_chpl__coerceMove[519334]
    (480956 'end of statement' lhs[143082])
    label _end_chpl__coerceMove[519334]
    (519338 return ret[519336])
  }
  function chpl__coerceCopy[143230](arg dstType[143227]:_array[133588](?), arg rhs[143233]:_domain[125902](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519352] "RVV" "temp"
    unknown eltType[143240] "dead at end of block" "insert auto destroy" "type variable"(143239 call chpl__eltTypeFromArrayRuntimeType dstType[143227])
    (543230 'move' eltType[143240](543228 call chpl__eltTypeFromArrayRuntimeType dstType[143227]))
    const dom[143248] "dead at end of block" "const" "ref var"
    unknown call_tmp[666318] "expr temp" "maybe param" "maybe type" "temp"
    (666321 'move' call_tmp[666318](143247 call chpl__domainFromArrayRuntimeType dstType[143227]))
    (543233 'move' dom[143248](543232 'addr of' call_tmp[666318]))
    (143251 'end of statement')
    unknown call_tmp[666325] "maybe param" "maybe type" "temp"
    (666328 'move' call_tmp[666325](143260 call(143253 call (partial) buildArray _mt[243] dom[143248]) eltType[143240](initElts = 0)))
    unknown lhs[143261] "dead at end of block" "insert auto destroy" "no copy"
    (543235 'init var' lhs[143261] call_tmp[666325])
    (143264 'end of statement' dom[143248] eltType[143240])
    unknown call_tmp[666332] "expr temp" "maybe param" "maybe type" "temp"
    (666335 'move' call_tmp[666332](143266 call rank _mt[243] lhs[143261]))
    unknown call_tmp[666339] "expr temp" "maybe param" "maybe type" "temp"
    (666342 'move' call_tmp[666339](143270 call rank _mt[243] rhs[143233]))
    unknown call_tmp[666344] "expr temp" "maybe param" "maybe type" "temp"
    (666347 'move' call_tmp[666344](143273 call != call_tmp[666332] call_tmp[666339]))
    unknown call_tmp[666349] "expr temp" "maybe param" "maybe type" "temp"
    (666352 'move' call_tmp[666349](143280 call _cond_test call_tmp[666344]))
    if call_tmp[666349]
    {
      (143278 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[426874] "maybe param" "temp"
    (426885 'move' tmp[426874](143288 call isAssociativeDom rhs[143233]))
    unknown call_tmp[666354] "expr temp" "maybe param" "maybe type" "temp"
    (666357 'move' call_tmp[666354](426887 call _cond_invalid tmp[426874]))
    if call_tmp[666354]
    {
      (426890 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568199] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568200] "maybe param" "temp"
    unknown call_tmp[666359] "expr temp" "maybe param" "maybe type" "temp"
    (666362 'move' call_tmp[666359](426875 call isTrue tmp[426874]))
    (568205 'move' tmp[568200](568203 call _cond_test call_tmp[666359]))
    if tmp[568200]
    {
      unknown tmp[568207] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666364] "expr temp" "maybe param" "maybe type" "temp"
      (666367 'move' call_tmp[666364](143292 call isRectangularArr lhs[143261]))
      (568209 'move' tmp[568207](426878 call isTrue call_tmp[666364]))
      (568214 'move' tmp[568199](568211 '_paramFoldLogical' tmp[568200] tmp[568207]))
    }
    {
      (568219 'move' tmp[568199](568216 '_paramFoldLogical' tmp[568200] 0))
    }
    unknown call_tmp[666369] "expr temp" "maybe param" "maybe type" "temp"
    (666372 'move' call_tmp[666369](143300 call _cond_test tmp[568199]))
    if call_tmp[666369]
    {
      (143298 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666374] "expr temp" "maybe param" "maybe type" "temp"
    (666377 'move' call_tmp[666374](143308 call isPODType eltType[143240]))
    unknown call_tmp[666379] "expr temp" "maybe param" "maybe type" "temp"
    (666382 'move' call_tmp[666379](143309 call ! call_tmp[666374]))
    unknown call_tmp[666384] "expr temp" "maybe param" "maybe type" "temp"
    (666387 'move' call_tmp[666384](143332 call _cond_test call_tmp[666379]))
    if call_tmp[666384]
    {
      (143330 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143346 call chpl__transferArray lhs[143261] rhs[143233](kind = initCopy[137983]))
    (480964 'end of statement' lhs[143261])
    unknown call_tmp[666391] "expr temp" "maybe param" "maybe type" "temp"
    (666394 'move' call_tmp[666391](143349 call _value _mt[243] lhs[143261]))
    (143356 call(143352 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666391]))
    (480966 'end of statement' lhs[143261])
    (519357 'move' ret[519352](519356 'deref' lhs[143261]))
    gotoReturn _end_chpl__coerceCopy[519350] _end_chpl__coerceCopy[519350]
    (480968 'end of statement' lhs[143261])
    label _end_chpl__coerceCopy[519350]
    (519354 return ret[519352])
  }
  function chpl__coerceMove[143369](arg dstType[143366]:_array[133588](?), in arg rhs[143372]:_domain[125902](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519363] "RVV" "temp"
    unknown eltType[143379] "dead at end of block" "insert auto destroy" "type variable"(143378 call chpl__eltTypeFromArrayRuntimeType dstType[143366])
    (543240 'move' eltType[143379](543238 call chpl__eltTypeFromArrayRuntimeType dstType[143366]))
    const dom[143387] "dead at end of block" "const" "ref var"
    unknown call_tmp[666398] "expr temp" "maybe param" "maybe type" "temp"
    (666401 'move' call_tmp[666398](143386 call chpl__domainFromArrayRuntimeType dstType[143366]))
    (543243 'move' dom[143387](543242 'addr of' call_tmp[666398]))
    (143390 'end of statement')
    unknown call_tmp[666405] "maybe param" "maybe type" "temp"
    (666408 'move' call_tmp[666405](143399 call(143392 call (partial) buildArray _mt[243] dom[143387]) eltType[143379](initElts = 0)))
    unknown lhs[143400] "dead at end of block" "insert auto destroy" "no copy"
    (543245 'init var' lhs[143400] call_tmp[666405])
    (143403 'end of statement' dom[143387] eltType[143379])
    unknown call_tmp[666412] "expr temp" "maybe param" "maybe type" "temp"
    (666415 'move' call_tmp[666412](143405 call rank _mt[243] lhs[143400]))
    unknown call_tmp[666419] "expr temp" "maybe param" "maybe type" "temp"
    (666422 'move' call_tmp[666419](143409 call rank _mt[243] rhs[143372]))
    unknown call_tmp[666424] "expr temp" "maybe param" "maybe type" "temp"
    (666427 'move' call_tmp[666424](143412 call != call_tmp[666412] call_tmp[666419]))
    unknown call_tmp[666429] "expr temp" "maybe param" "maybe type" "temp"
    (666432 'move' call_tmp[666429](143419 call _cond_test call_tmp[666424]))
    if call_tmp[666429]
    {
      (143417 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[426895] "maybe param" "temp"
    (426906 'move' tmp[426895](143427 call isAssociativeDom rhs[143372]))
    unknown call_tmp[666434] "expr temp" "maybe param" "maybe type" "temp"
    (666437 'move' call_tmp[666434](426908 call _cond_invalid tmp[426895]))
    if call_tmp[666434]
    {
      (426911 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568226] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568227] "maybe param" "temp"
    unknown call_tmp[666439] "expr temp" "maybe param" "maybe type" "temp"
    (666442 'move' call_tmp[666439](426896 call isTrue tmp[426895]))
    (568232 'move' tmp[568227](568230 call _cond_test call_tmp[666439]))
    if tmp[568227]
    {
      unknown tmp[568234] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666444] "expr temp" "maybe param" "maybe type" "temp"
      (666447 'move' call_tmp[666444](143431 call isRectangularArr lhs[143400]))
      (568236 'move' tmp[568234](426899 call isTrue call_tmp[666444]))
      (568241 'move' tmp[568226](568238 '_paramFoldLogical' tmp[568227] tmp[568234]))
    }
    {
      (568246 'move' tmp[568226](568243 '_paramFoldLogical' tmp[568227] 0))
    }
    unknown call_tmp[666449] "expr temp" "maybe param" "maybe type" "temp"
    (666452 'move' call_tmp[666449](143439 call _cond_test tmp[568226]))
    if call_tmp[666449]
    {
      (143437 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666454] "expr temp" "maybe param" "maybe type" "temp"
    (666457 'move' call_tmp[666454](143447 call isPODType eltType[143379]))
    unknown call_tmp[666459] "expr temp" "maybe param" "maybe type" "temp"
    (666462 'move' call_tmp[666459](143448 call ! call_tmp[666454]))
    unknown call_tmp[666464] "expr temp" "maybe param" "maybe type" "temp"
    (666467 'move' call_tmp[666464](143455 call _cond_test call_tmp[666459]))
    if call_tmp[666464]
    {
      (143453 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143469 call chpl__transferArray lhs[143400] rhs[143372](kind = initCopy[137983]))
    (480976 'end of statement' lhs[143400])
    unknown call_tmp[666471] "expr temp" "maybe param" "maybe type" "temp"
    (666474 'move' call_tmp[666471](143472 call _value _mt[243] lhs[143400]))
    (143479 call(143475 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666471]))
    (480978 'end of statement' lhs[143400])
    (519368 'move' ret[519363](519367 'deref' lhs[143400]))
    gotoReturn _end_chpl__coerceMove[519361] _end_chpl__coerceMove[519361]
    (480980 'end of statement' lhs[143400])
    label _end_chpl__coerceMove[519361]
    (519365 return ret[519363])
  }
  function chpl__coerceCopy[143492](arg dstType[143489]:_array[133588](?), arg rhs[143498]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519374] "RVV" "temp"
    unknown eltType[143505] "dead at end of block" "insert auto destroy" "type variable"(143504 call chpl__eltTypeFromArrayRuntimeType dstType[143489])
    (543250 'move' eltType[143505](543248 call chpl__eltTypeFromArrayRuntimeType dstType[143489]))
    const dom[143513] "dead at end of block" "const" "ref var"
    unknown call_tmp[666478] "expr temp" "maybe param" "maybe type" "temp"
    (666481 'move' call_tmp[666478](143512 call chpl__domainFromArrayRuntimeType dstType[143489]))
    (543253 'move' dom[143513](543252 'addr of' call_tmp[666478]))
    (143516 'end of statement')
    unknown call_tmp[666485] "maybe param" "maybe type" "temp"
    (666488 'move' call_tmp[666485](143525 call(143518 call (partial) buildArray _mt[243] dom[143513]) eltType[143505](initElts = 0)))
    unknown lhs[143526] "dead at end of block" "insert auto destroy" "no copy"
    (543255 'init var' lhs[143526] call_tmp[666485])
    (143529 'end of statement' dom[143513] eltType[143505])
    unknown call_tmp[666492] "expr temp" "maybe param" "maybe type" "temp"
    (666495 'move' call_tmp[666492](143531 call rank _mt[243] lhs[143526]))
    unknown call_tmp[666497] "expr temp" "maybe param" "maybe type" "temp"
    (666500 'move' call_tmp[666497](143535 call != call_tmp[666492] 1))
    unknown call_tmp[666502] "expr temp" "maybe param" "maybe type" "temp"
    (666505 'move' call_tmp[666502](143542 call _cond_test call_tmp[666497]))
    if call_tmp[666502]
    {
      (143540 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143556 call chpl__transferArray lhs[143526] rhs[143498](kind = initCopy[137983]))
    (480985 'end of statement' lhs[143526])
    unknown call_tmp[666509] "expr temp" "maybe param" "maybe type" "temp"
    (666512 'move' call_tmp[666509](143559 call _value _mt[243] lhs[143526]))
    (143566 call(143562 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666509]))
    (480987 'end of statement' lhs[143526])
    (519379 'move' ret[519374](519378 'deref' lhs[143526]))
    gotoReturn _end_chpl__coerceCopy[519372] _end_chpl__coerceCopy[519372]
    (480989 'end of statement' lhs[143526])
    label _end_chpl__coerceCopy[519372]
    (519376 return ret[519374])
  }
  function chpl__coerceMove[143579](arg dstType[143576]:_array[133588](?), in arg rhs[143585]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519385] "RVV" "temp"
    unknown eltType[143592] "dead at end of block" "insert auto destroy" "type variable"(143591 call chpl__eltTypeFromArrayRuntimeType dstType[143576])
    (543260 'move' eltType[143592](543258 call chpl__eltTypeFromArrayRuntimeType dstType[143576]))
    const dom[143600] "dead at end of block" "const" "ref var"
    unknown call_tmp[666516] "expr temp" "maybe param" "maybe type" "temp"
    (666519 'move' call_tmp[666516](143599 call chpl__domainFromArrayRuntimeType dstType[143576]))
    (543263 'move' dom[143600](543262 'addr of' call_tmp[666516]))
    (143603 'end of statement')
    unknown call_tmp[666523] "maybe param" "maybe type" "temp"
    (666526 'move' call_tmp[666523](143612 call(143605 call (partial) buildArray _mt[243] dom[143600]) eltType[143592](initElts = 0)))
    unknown lhs[143613] "dead at end of block" "insert auto destroy" "no copy"
    (543265 'init var' lhs[143613] call_tmp[666523])
    (143616 'end of statement' dom[143600] eltType[143592])
    unknown call_tmp[666530] "expr temp" "maybe param" "maybe type" "temp"
    (666533 'move' call_tmp[666530](143618 call rank _mt[243] lhs[143613]))
    unknown call_tmp[666535] "expr temp" "maybe param" "maybe type" "temp"
    (666538 'move' call_tmp[666535](143622 call != call_tmp[666530] 1))
    unknown call_tmp[666540] "expr temp" "maybe param" "maybe type" "temp"
    (666543 'move' call_tmp[666540](143629 call _cond_test call_tmp[666535]))
    if call_tmp[666540]
    {
      (143627 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143643 call chpl__transferArray lhs[143613] rhs[143585](kind = initCopy[137983]))
    (480994 'end of statement' lhs[143613])
    unknown call_tmp[666547] "expr temp" "maybe param" "maybe type" "temp"
    (666550 'move' call_tmp[666547](143646 call _value _mt[243] lhs[143613]))
    (143653 call(143649 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666547]))
    (480996 'end of statement' lhs[143613])
    (519390 'move' ret[519385](519389 'deref' lhs[143613]))
    gotoReturn _end_chpl__coerceMove[519383] _end_chpl__coerceMove[519383]
    (480998 'end of statement' lhs[143613])
    label _end_chpl__coerceMove[519383]
    (519387 return ret[519385])
  }
  function chpl__coerceCopy[143666](arg dstType[143663]:_array[133588](?), arg rhs[143669]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519396] "RVV" "temp"
    unknown eltType[143676] "dead at end of block" "insert auto destroy" "type variable"(143675 call chpl__eltTypeFromArrayRuntimeType dstType[143663])
    (543270 'move' eltType[143676](543268 call chpl__eltTypeFromArrayRuntimeType dstType[143663]))
    const dom[143684] "dead at end of block" "const" "ref var"
    unknown call_tmp[666554] "expr temp" "maybe param" "maybe type" "temp"
    (666557 'move' call_tmp[666554](143683 call chpl__domainFromArrayRuntimeType dstType[143663]))
    (543273 'move' dom[143684](543272 'addr of' call_tmp[666554]))
    (143687 'end of statement')
    unknown call_tmp[666561] "maybe param" "maybe type" "temp"
    (666564 'move' call_tmp[666561](143696 call(143689 call (partial) buildArray _mt[243] dom[143684]) eltType[143676](initElts = 0)))
    unknown lhs[143697] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543275 'init var' lhs[143697] call_tmp[666561])
    (143700 'end of statement' dom[143684] eltType[143676])
    unknown call_tmp[666566] "expr temp" "maybe param" "maybe type" "temp"
    (666569 'move' call_tmp[666566](143704 call isRectangularArr lhs[143697]))
    unknown call_tmp[666571] "expr temp" "maybe param" "maybe type" "temp"
    (666574 'move' call_tmp[666571](143705 call ! call_tmp[666566]))
    unknown call_tmp[666576] "expr temp" "maybe param" "maybe type" "temp"
    (666579 'move' call_tmp[666576](143728 call _cond_test call_tmp[666571]))
    if call_tmp[666576]
    {
      (143726 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143741 call initArrFromTuple lhs[143697] rhs[143669] initCopy[137983])
    (481003 'end of statement' lhs[143697])
    unknown call_tmp[666583] "expr temp" "maybe param" "maybe type" "temp"
    (666586 'move' call_tmp[666583](143744 call _value _mt[243] lhs[143697]))
    (143751 call(143747 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666583]))
    (481005 'end of statement' lhs[143697])
    (519401 'move' ret[519396](519400 'deref' lhs[143697]))
    gotoReturn _end_chpl__coerceCopy[519394] _end_chpl__coerceCopy[519394]
    (481007 'end of statement' lhs[143697])
    label _end_chpl__coerceCopy[519394]
    (519398 return ret[519396])
  }
  function chpl__coerceMove[143764](arg dstType[143761]:_array[133588](?), in arg rhs[143767]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519407] "RVV" "temp"
    unknown eltType[143774] "dead at end of block" "insert auto destroy" "type variable"(143773 call chpl__eltTypeFromArrayRuntimeType dstType[143761])
    (543280 'move' eltType[143774](543278 call chpl__eltTypeFromArrayRuntimeType dstType[143761]))
    const dom[143782] "dead at end of block" "const" "ref var"
    unknown call_tmp[666590] "expr temp" "maybe param" "maybe type" "temp"
    (666593 'move' call_tmp[666590](143781 call chpl__domainFromArrayRuntimeType dstType[143761]))
    (543283 'move' dom[143782](543282 'addr of' call_tmp[666590]))
    (143785 'end of statement')
    unknown call_tmp[666597] "maybe param" "maybe type" "temp"
    (666600 'move' call_tmp[666597](143794 call(143787 call (partial) buildArray _mt[243] dom[143782]) eltType[143774](initElts = 0)))
    unknown lhs[143795] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543285 'init var' lhs[143795] call_tmp[666597])
    (143798 'end of statement' dom[143782] eltType[143774])
    unknown call_tmp[666602] "expr temp" "maybe param" "maybe type" "temp"
    (666605 'move' call_tmp[666602](143802 call isRectangularArr lhs[143795]))
    unknown call_tmp[666607] "expr temp" "maybe param" "maybe type" "temp"
    (666610 'move' call_tmp[666607](143803 call ! call_tmp[666602]))
    unknown call_tmp[666612] "expr temp" "maybe param" "maybe type" "temp"
    (666615 'move' call_tmp[666612](143810 call _cond_test call_tmp[666607]))
    if call_tmp[666612]
    {
      (143808 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143823 call initArrFromTuple lhs[143795] rhs[143767] move[137981])
    (481012 'end of statement' lhs[143795])
    unknown call_tmp[666619] "expr temp" "maybe param" "maybe type" "temp"
    (666622 'move' call_tmp[666619](143826 call _value _mt[243] lhs[143795]))
    (143833 call(143829 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666619]))
    (481014 'end of statement' lhs[143795])
    (519412 'move' ret[519407](519411 'deref' lhs[143795]))
    gotoReturn _end_chpl__coerceMove[519405] _end_chpl__coerceMove[519405]
    (481016 'end of statement' lhs[143795])
    label _end_chpl__coerceMove[519405]
    (519409 return ret[519407])
  }
  function chpl__coerceCopy[143846](arg dstType[143843]:_array[133588](?), arg rhs[143852] :
  (143851 call desyncEltType dstType[143843])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519418] "RVV" "temp"
    unknown eltType[143859] "dead at end of block" "insert auto destroy" "type variable"(143858 call chpl__eltTypeFromArrayRuntimeType dstType[143843])
    (543290 'move' eltType[143859](543288 call chpl__eltTypeFromArrayRuntimeType dstType[143843]))
    const dom[143867] "dead at end of block" "const" "ref var"
    unknown call_tmp[666626] "expr temp" "maybe param" "maybe type" "temp"
    (666629 'move' call_tmp[666626](143866 call chpl__domainFromArrayRuntimeType dstType[143843]))
    (543293 'move' dom[143867](543292 'addr of' call_tmp[666626]))
    (143870 'end of statement')
    unknown call_tmp[666633] "maybe param" "maybe type" "temp"
    (666636 'move' call_tmp[666633](143879 call(143872 call (partial) buildArray _mt[243] dom[143867]) eltType[143859](initElts = 0)))
    unknown lhs[143880] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543295 'init var' lhs[143880] call_tmp[666633])
    (143883 'end of statement' dom[143867] eltType[143859])
    Forall {
      induction variables:
        
        unknown e[143909] "index var" "insert auto destroy"
      iterated expressions:
        lhs[143880]
      shadow variables:
        rhs[143887] 'in' intent outer var rhs[143852]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown call_tmp[666640] "maybe param" "maybe type" "temp"
        (666643 'move' call_tmp[666640](143893 call eltType _mt[243] lhs[143880]))
        unknown copy[143897] "dead at end of block" "no auto destroy"
        (543297 'init var' copy[143897] rhs[143887] call_tmp[666640])
        (143900 'end of statement' rhs[143887] lhs[143880])
        (143906 '=' e[143909] copy[143897])
        (481022 'end of statement' e[143909] copy[143897])
      }
    }
    unknown call_tmp[666647] "expr temp" "maybe param" "maybe type" "temp"
    (666650 'move' call_tmp[666647](143913 call _value _mt[243] lhs[143880]))
    (143920 call(143916 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666647]))
    (481025 'end of statement' lhs[143880])
    (519423 'move' ret[519418](519422 'deref' lhs[143880]))
    gotoReturn _end_chpl__coerceCopy[519416] _end_chpl__coerceCopy[519416]
    (481027 'end of statement' lhs[143880])
    label _end_chpl__coerceCopy[519416]
    (519420 return ret[519418])
  }
  function chpl__coerceMove[143933](arg dstType[143930]:_array[133588](?), in arg rhs[143939] :
  (143938 call desyncEltType dstType[143930])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519429] "RVV" "temp"
    unknown eltType[143946] "dead at end of block" "insert auto destroy" "type variable"(143945 call chpl__eltTypeFromArrayRuntimeType dstType[143930])
    (543302 'move' eltType[143946](543300 call chpl__eltTypeFromArrayRuntimeType dstType[143930]))
    const dom[143954] "dead at end of block" "const" "ref var"
    unknown call_tmp[666654] "expr temp" "maybe param" "maybe type" "temp"
    (666657 'move' call_tmp[666654](143953 call chpl__domainFromArrayRuntimeType dstType[143930]))
    (543305 'move' dom[143954](543304 'addr of' call_tmp[666654]))
    (143957 'end of statement')
    unknown call_tmp[666661] "maybe param" "maybe type" "temp"
    (666664 'move' call_tmp[666661](143966 call(143959 call (partial) buildArray _mt[243] dom[143954]) eltType[143946](initElts = 0)))
    unknown lhs[143967] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543307 'init var' lhs[143967] call_tmp[666661])
    (143970 'end of statement' dom[143954] eltType[143946])
    Forall {
      induction variables:
        
        unknown e[143993] "index var" "insert auto destroy"
      iterated expressions:
        lhs[143967]
      shadow variables:
        rhs[143974] 'in' intent outer var rhs[143939]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[143981] "dead at end of block" "no auto destroy"
        (543309 'init var' copy[143981] rhs[143974] eltType[143946])
        (143984 'end of statement' rhs[143974] eltType[143946])
        (143990 '=' e[143993] copy[143981])
        (481033 'end of statement' e[143993] copy[143981])
      }
    }
    unknown call_tmp[666668] "expr temp" "maybe param" "maybe type" "temp"
    (666671 'move' call_tmp[666668](143997 call _value _mt[243] lhs[143967]))
    (144004 call(144000 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666668]))
    (481036 'end of statement' lhs[143967])
    (519434 'move' ret[519429](519433 'deref' lhs[143967]))
    gotoReturn _end_chpl__coerceMove[519427] _end_chpl__coerceMove[519427]
    (481038 'end of statement' lhs[143967])
    label _end_chpl__coerceMove[519427]
    (519431 return ret[519429])
  }
  function chpl__coerceCopy[144017](arg dstType[144014]:_array[133588](?), arg rhs[144020]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519440] "RVV" "temp"
    unknown eltType[144027] "dead at end of block" "insert auto destroy" "type variable"(144026 call chpl__eltTypeFromArrayRuntimeType dstType[144014])
    (543314 'move' eltType[144027](543312 call chpl__eltTypeFromArrayRuntimeType dstType[144014]))
    const dom[144035] "dead at end of block" "const" "ref var"
    unknown call_tmp[666675] "expr temp" "maybe param" "maybe type" "temp"
    (666678 'move' call_tmp[666675](144034 call chpl__domainFromArrayRuntimeType dstType[144014]))
    (543317 'move' dom[144035](543316 'addr of' call_tmp[666675]))
    (144038 'end of statement')
    unknown call_tmp[666682] "maybe param" "maybe type" "temp"
    (666685 'move' call_tmp[666682](144047 call(144040 call (partial) buildArray _mt[243] dom[144035]) eltType[144027](initElts = 0)))
    unknown lhs[144048] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543319 'init var' lhs[144048] call_tmp[666682])
    (144051 'end of statement' dom[144035] eltType[144027])
    (144061 call chpl__transferArray lhs[144048] rhs[144020](kind = initCopy[137983]))
    (481042 'end of statement' lhs[144048])
    unknown call_tmp[666689] "expr temp" "maybe param" "maybe type" "temp"
    (666692 'move' call_tmp[666689](144064 call _value _mt[243] lhs[144048]))
    (144071 call(144067 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666689]))
    (481044 'end of statement' lhs[144048])
    (519445 'move' ret[519440](519444 'deref' lhs[144048]))
    gotoReturn _end_chpl__coerceCopy[519438] _end_chpl__coerceCopy[519438]
    (481046 'end of statement' lhs[144048])
    label _end_chpl__coerceCopy[519438]
    (519442 return ret[519440])
  }
  function chpl__coerceMove[144084](arg dstType[144081]:_array[133588](?), arg rhs[144087]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519451] "RVV" "temp"
    unknown eltType[144094] "dead at end of block" "insert auto destroy" "type variable"(144093 call chpl__eltTypeFromArrayRuntimeType dstType[144081])
    (543324 'move' eltType[144094](543322 call chpl__eltTypeFromArrayRuntimeType dstType[144081]))
    const dom[144102] "dead at end of block" "const" "ref var"
    unknown call_tmp[666696] "expr temp" "maybe param" "maybe type" "temp"
    (666699 'move' call_tmp[666696](144101 call chpl__domainFromArrayRuntimeType dstType[144081]))
    (543327 'move' dom[144102](543326 'addr of' call_tmp[666696]))
    (144105 'end of statement')
    unknown call_tmp[666703] "maybe param" "maybe type" "temp"
    (666706 'move' call_tmp[666703](144114 call(144107 call (partial) buildArray _mt[243] dom[144102]) eltType[144094](initElts = 0)))
    unknown lhs[144115] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543329 'init var' lhs[144115] call_tmp[666703])
    (144118 'end of statement' dom[144102] eltType[144094])
    (144128 call chpl__transferArray lhs[144115] rhs[144087](kind = move[137981]))
    (481050 'end of statement' lhs[144115])
    unknown call_tmp[666710] "expr temp" "maybe param" "maybe type" "temp"
    (666713 'move' call_tmp[666710](144131 call _value _mt[243] lhs[144115]))
    (144138 call(144134 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666710]))
    (481052 'end of statement' lhs[144115])
    (519456 'move' ret[519451](519455 'deref' lhs[144115]))
    gotoReturn _end_chpl__coerceMove[519449] _end_chpl__coerceMove[519449]
    (481054 'end of statement' lhs[144115])
    label _end_chpl__coerceMove[519449]
    (519453 return ret[519451])
  }
  function chpl__coerceCopy[144151](arg dstType[144148]:_array[133588](?), arg rhs[144153]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519462] "RVV" "temp"
    unknown eltType[144159] "dead at end of block" "insert auto destroy" "type variable"(144158 call chpl__eltTypeFromArrayRuntimeType dstType[144148])
    (543334 'move' eltType[144159](543332 call chpl__eltTypeFromArrayRuntimeType dstType[144148]))
    const dom[144167] "dead at end of block" "const" "ref var"
    unknown call_tmp[666717] "expr temp" "maybe param" "maybe type" "temp"
    (666720 'move' call_tmp[666717](144166 call chpl__domainFromArrayRuntimeType dstType[144148]))
    (543337 'move' dom[144167](543336 'addr of' call_tmp[666717]))
    (144170 'end of statement')
    unknown call_tmp[666724] "maybe param" "maybe type" "temp"
    (666727 'move' call_tmp[666724](144179 call(144172 call (partial) buildArray _mt[243] dom[144167]) eltType[144159](initElts = 0)))
    unknown lhs[144180] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543339 'init var' lhs[144180] call_tmp[666724])
    (144183 'end of statement' dom[144167] eltType[144159])
    (144193 call chpl__transferArray lhs[144180] rhs[144153](kind = initCopy[137983]))
    (481058 'end of statement' lhs[144180])
    unknown call_tmp[666731] "expr temp" "maybe param" "maybe type" "temp"
    (666734 'move' call_tmp[666731](144196 call _value _mt[243] lhs[144180]))
    (144203 call(144199 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666731]))
    (481060 'end of statement' lhs[144180])
    (519467 'move' ret[519462](519466 'deref' lhs[144180]))
    gotoReturn _end_chpl__coerceCopy[519460] _end_chpl__coerceCopy[519460]
    (481062 'end of statement' lhs[144180])
    label _end_chpl__coerceCopy[519460]
    (519464 return ret[519462])
  }
  function chpl__coerceMove[144216](arg dstType[144213]:_array[133588](?), in arg rhs[144218]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519473] "RVV" "temp"
    unknown eltType[144224] "dead at end of block" "insert auto destroy" "type variable"(144223 call chpl__eltTypeFromArrayRuntimeType dstType[144213])
    (543344 'move' eltType[144224](543342 call chpl__eltTypeFromArrayRuntimeType dstType[144213]))
    const dom[144232] "dead at end of block" "const" "ref var"
    unknown call_tmp[666738] "expr temp" "maybe param" "maybe type" "temp"
    (666741 'move' call_tmp[666738](144231 call chpl__domainFromArrayRuntimeType dstType[144213]))
    (543347 'move' dom[144232](543346 'addr of' call_tmp[666738]))
    (144235 'end of statement')
    unknown call_tmp[666745] "maybe param" "maybe type" "temp"
    (666748 'move' call_tmp[666745](144244 call(144237 call (partial) buildArray _mt[243] dom[144232]) eltType[144224](initElts = 0)))
    unknown lhs[144245] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543349 'init var' lhs[144245] call_tmp[666745])
    (144248 'end of statement' dom[144232] eltType[144224])
    (144258 call chpl__transferArray lhs[144245] rhs[144218](kind = initCopy[137983]))
    (481066 'end of statement' lhs[144245])
    unknown call_tmp[666752] "expr temp" "maybe param" "maybe type" "temp"
    (666755 'move' call_tmp[666752](144261 call _value _mt[243] lhs[144245]))
    (144268 call(144264 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666752]))
    (481068 'end of statement' lhs[144245])
    (519478 'move' ret[519473](519477 'deref' lhs[144245]))
    gotoReturn _end_chpl__coerceMove[519471] _end_chpl__coerceMove[519471]
    (481070 'end of statement' lhs[144245])
    label _end_chpl__coerceMove[519471]
    (519475 return ret[519473])
  }
  function chpl__unref[144283](arg x[144280]:_array[133588](?)) : _unknown[51] "inline" "no copy return" "unref fn"
  {
    unknown ret[519484] "RVV" "temp"
    unknown ret[144293] "dead at end of block" "no auto destroy"
    (543351 'init var' ret[144293] x[144280])
    (144296 'end of statement')
    (519489 'move' ret[519484](519488 'deref' ret[144293]))
    gotoReturn _end_chpl__unref[519482] _end_chpl__unref[519482]
    (481072 'end of statement' ret[144293])
    label _end_chpl__unref[519482]
    (519486 return ret[519484])
  }
  where {
    unknown call_tmp[666761] "expr temp" "maybe param" "maybe type" "temp"
    (666764 'move' call_tmp[666761](144287 call _value _mt[243] x[144280]))
    (144291 call chpl__isArrayView call_tmp[666761])
  }
  function chpl__unref[144310](arg ir[144307]:_iteratorRecord[205](?)) : _unknown[51] "no copy return" "unref fn"
  {
    unknown ret[519495] "RVV" "temp"
    unknown call_tmp[666766] "maybe param" "maybe type" "temp"
    (666769 'move' call_tmp[666766](144315 call chpl__initCopy ir[144307]))
    unknown toArray[144316] "dead at end of block" "no auto destroy" "no copy"
    (543353 'init var' toArray[144316] call_tmp[666766])
    (144319 'end of statement')
    (519500 'move' ret[519495](519499 'deref' toArray[144316]))
    gotoReturn _end_chpl__unref[519493] _end_chpl__unref[519493]
    (481074 'end of statement' toArray[144316])
    label _end_chpl__unref[519493]
    (519497 return ret[519495])
  }
  function chpl__unref[144334](arg x[144331]:_array[133588](?)) : _unknown[51] "inline" "no copy return"
  {
    unknown ret[519506] "RVV" "temp"
    unknown ret[144337] "dead at end of block" "insert auto destroy" "no copy"
    (543355 'init var' ret[144337] x[144331])
    (144340 'end of statement')
    (519511 'move' ret[519506](519510 'deref' ret[144337]))
    gotoReturn _end_chpl__unref[519504] _end_chpl__unref[519504]
    (481076 'end of statement' ret[144337])
    label _end_chpl__unref[519504]
    (519508 return ret[519506])
  }
  function chpl__unalias[144355](arg x[144352]:_array[133588](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519517] "RVV" "temp"
    unknown tmp[426916] "maybe param" "temp"
    unknown tmp[426937] "maybe param" "temp"
    unknown call_tmp[666773] "expr temp" "maybe param" "maybe type" "temp"
    (666776 'move' call_tmp[666773](144358 call _value _mt[243] x[144352]))
    (426948 'move' tmp[426937](144365 call(144361 call (partial) isSliceArrayView _mt[243] call_tmp[666773])))
    unknown call_tmp[666780] "expr temp" "maybe param" "maybe type" "temp"
    (666783 'move' call_tmp[666780](426950 call _cond_invalid tmp[426937]))
    if call_tmp[666780]
    {
      (426953 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568253] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568254] "maybe param" "temp"
    unknown call_tmp[666785] "expr temp" "maybe param" "maybe type" "temp"
    (666788 'move' call_tmp[666785](426938 call isTrue tmp[426937]))
    (568259 'move' tmp[568254](568257 call _cond_test call_tmp[666785]))
    if tmp[568254]
    {
      (568264 'move' tmp[568253](568261 '_paramFoldLogical' tmp[568254] 1))
    }
    {
      unknown tmp[568266] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666792] "expr temp" "maybe param" "maybe type" "temp"
      (666795 'move' call_tmp[666792](144367 call _value _mt[243] x[144352]))
      unknown call_tmp[666799] "expr temp" "maybe param" "maybe type" "temp"
      (666802 'move' call_tmp[666799](144374 call(144370 call (partial) isRankChangeArrayView _mt[243] call_tmp[666792])))
      (568268 'move' tmp[568266](426942 call isTrue call_tmp[666799]))
      (568273 'move' tmp[568253](568270 '_paramFoldLogical' tmp[568254] tmp[568266]))
    }
    (426927 'move' tmp[426916] tmp[568253])
    unknown call_tmp[666804] "expr temp" "maybe param" "maybe type" "temp"
    (666807 'move' call_tmp[666804](426929 call _cond_invalid tmp[426916]))
    if call_tmp[666804]
    {
      (426932 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown isview[144388] "dead at end of block" "param"
    unknown tmp[568280] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568281] "maybe param" "temp"
    unknown call_tmp[666809] "expr temp" "maybe param" "maybe type" "temp"
    (666812 'move' call_tmp[666809](426917 call isTrue tmp[426916]))
    (568286 'move' tmp[568281](568284 call _cond_test call_tmp[666809]))
    if tmp[568281]
    {
      (568291 'move' tmp[568280](568288 '_paramFoldLogical' tmp[568281] 1))
    }
    {
      unknown tmp[568293] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666816] "expr temp" "maybe param" "maybe type" "temp"
      (666819 'move' call_tmp[666816](144378 call _value _mt[243] x[144352]))
      unknown call_tmp[666823] "expr temp" "maybe param" "maybe type" "temp"
      (666826 'move' call_tmp[666823](144385 call(144381 call (partial) isReindexArrayView _mt[243] call_tmp[666816])))
      (568295 'move' tmp[568293](426921 call isTrue call_tmp[666823]))
      (568300 'move' tmp[568280](568297 '_paramFoldLogical' tmp[568281] tmp[568293]))
    }
    (543357 'init var' isview[144388] tmp[568280])
    (144391 'end of statement')
    unknown call_tmp[666828] "expr temp" "maybe param" "maybe type" "temp"
    (666831 'move' call_tmp[666828](144417 call _cond_test isview[144388]))
    if call_tmp[666828]
    {
      unknown ret[144395] "dead at end of block" "no auto destroy"
      (543359 'init var' ret[144395] x[144352])
      (144398 'end of statement')
      (144403 call chpl__autoDestroy x[144352])
      (481080 'end of statement')
      (519522 'move' ret[519517](519521 'deref' ret[144395]))
      gotoReturn _end_chpl__unalias[519515] _end_chpl__unalias[519515]
      (481081 'end of statement' ret[144395])
    }
    {
      unknown ret[144409] "dead at end of block" "insert auto destroy" "no copy"
      (543361 'init var' ret[144409] x[144352])
      (144412 'end of statement')
      (519527 'move' ret[519517](519526 'deref' ret[144409]))
      gotoReturn _end_chpl__unalias[519515] _end_chpl__unalias[519515]
      (481083 'end of statement' ret[144409])
    }
    label _end_chpl__unalias[519515]
    (519519 return ret[519517])
  }
  function chpl__initCopy[144429](arg ir[144426]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519533] "RVV" "temp"
    unknown call_tmp[666835] "expr temp" "maybe param" "maybe type" "temp"
    (666838 'move' call_tmp[666835](144438 call _shape_ _mt[243] ir[144426]))
    unknown call_tmp[666840] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (666843 'move' call_tmp[666840](747802 'new' _domain[125902](?) call_tmp[666835]))
    unknown shape[144443] "dead at end of block"
    (543363 'init var' shape[144443] call_tmp[666840])
    (144446 'end of statement')
    unknown call_tmp[666847] "expr temp" "maybe param" "maybe type" "temp"
    (666850 'move' call_tmp[666847](144449 call _unowned _mt[243] shape[144443]))
    (144453 call = call_tmp[666847] 1)
    (481085 'end of statement' shape[144443])
    unknown call_tmp[666852] "expr temp" "maybe param" "maybe type" "temp"
    (666855 'move' call_tmp[666852](144460 call chpl__initCopy_shapeHelp shape[144443] ir[144426]))
    (519538 'move' ret[519533](519537 'deref' call_tmp[666852]))
    gotoReturn _end_chpl__initCopy[519531] _end_chpl__initCopy[519531]
    (481087 'end of statement' shape[144443])
    label _end_chpl__initCopy[519531]
    (519535 return ret[519533])
  }
  where {
    (144434 call chpl_iteratorHasDomainShape ir[144426])
  }
  function chpl__initCopy[144472](arg ir[144469]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519544] "RVV" "temp"
    unknown call_tmp[666859] "expr temp" "maybe param" "maybe type" "temp"
    (666862 'move' call_tmp[666859](144487 call _shape_ _mt[243] ir[144469]))
    unknown call_tmp[666864] "maybe param" "maybe type" "temp"
    (666867 'move' call_tmp[666864](144491 call chpl__buildDomainExpr call_tmp[666859]))
    unknown shape[144493] "dead at end of block" "insert auto destroy"
    (543365 'init var' shape[144493] call_tmp[666864])
    (144496 'end of statement')
    unknown call_tmp[666869] "expr temp" "maybe param" "maybe type" "temp"
    (666872 'move' call_tmp[666869](144502 call chpl__initCopy_shapeHelp shape[144493] ir[144469]))
    (519549 'move' ret[519544](519548 'deref' call_tmp[666869]))
    gotoReturn _end_chpl__initCopy[519542] _end_chpl__initCopy[519542]
    (481089 'end of statement' shape[144493])
    label _end_chpl__initCopy[519542]
    (519546 return ret[519544])
  }
  where {
    unknown tmp[426958] "maybe param" "temp"
    (426969 'move' tmp[426958](144477 call chpl_iteratorHasRangeShape ir[144469]))
    unknown call_tmp[666874] "expr temp" "maybe param" "maybe type" "temp"
    (666877 'move' call_tmp[666874](426971 call _cond_invalid tmp[426958]))
    if call_tmp[666874]
    {
      (426974 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568307] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568308] "maybe param" "temp"
    unknown call_tmp[666879] "expr temp" "maybe param" "maybe type" "temp"
    (666882 'move' call_tmp[666879](426959 call isTrue tmp[426958]))
    (568313 'move' tmp[568308](568311 call _cond_test call_tmp[666879]))
    if tmp[568308]
    {
      unknown tmp[568315] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666884] "expr temp" "maybe param" "maybe type" "temp"
      (666887 'move' call_tmp[666884](144481 call chpl_iteratorFromForExpr ir[144469]))
      unknown call_tmp[666889] "expr temp" "maybe param" "maybe type" "temp"
      (666892 'move' call_tmp[666889](144482 call ! call_tmp[666884]))
      (568317 'move' tmp[568315](426962 call isTrue call_tmp[666889]))
      (568322 'move' tmp[568307](568319 '_paramFoldLogical' tmp[568308] tmp[568315]))
    }
    {
      (568327 'move' tmp[568307](568324 '_paramFoldLogical' tmp[568308] 0))
    }
    (748241 call chpl_statementLevelSymbol tmp[568307])
  }
  function chpl__initCopy_shapeHelp[144514](arg shape[144511]:_domain[125902](?), arg ir[144517]:_iteratorRecord[205](?)) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[519555] "RVV" "temp"
    unknown call_tmp[666896] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (666899 'move' call_tmp[666896](144526 'typeof' ir[144517]))
    unknown call_tmp[666901] "expr temp" "maybe param" "maybe type" "temp"
    (666904 'move' call_tmp[666901](144528 call iteratorToArrayElementType call_tmp[666896]))
    unknown call_tmp[666906] "maybe param" "maybe type" "temp"
    (666909 'move' call_tmp[666906](144532 call(144521 call (partial) buildArray _mt[243] shape[144511]) call_tmp[666901](initElts = 0)))
    unknown result[144533] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543367 'init var' result[144533] call_tmp[666906])
    (144536 'end of statement')
    unknown call_tmp[666913] "expr temp" "maybe param" "maybe type" "temp"
    (666916 'move' call_tmp[666913](144540 call eltType _mt[243] result[144533]))
    unknown call_tmp[666918] "expr temp" "maybe param" "maybe type" "temp"
    (666921 'move' call_tmp[666918](144544 call isArray call_tmp[666913]))
    unknown call_tmp[666923] "expr temp" "maybe param" "maybe type" "temp"
    (666926 'move' call_tmp[666923](144568 call _cond_test call_tmp[666918]))
    if call_tmp[666923]
    {
      (144566 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    unknown call_tmp[666928] "expr temp" "maybe param" "maybe type" "temp"
    (666931 'move' call_tmp[666928](144576 call chpl_iteratorFromForExpr ir[144517]))
    unknown call_tmp[666933] "expr temp" "maybe param" "maybe type" "temp"
    (666936 'move' call_tmp[666933](144831 call _cond_test call_tmp[666928]))
    if call_tmp[666933]
    {
      unknown call_tmp[666940] "expr temp" "maybe param" "maybe type" "temp"
      (666943 'move' call_tmp[666940](144579 call eltType _mt[243] result[144533]))
      unknown call_tmp[666945] "expr temp" "maybe param" "maybe type" "temp"
      (666948 'move' call_tmp[666945](144583 call needsInitWorkaround call_tmp[666940]))
      unknown call_tmp[666950] "expr temp" "maybe param" "maybe type" "temp"
      (666953 'move' call_tmp[666950](144747 call _cond_test call_tmp[666945]))
      if call_tmp[666950]
      {
        {
          unknown _indexOfInterest[144616] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144617] "expr temp" "temp"
          unknown call_tmp[666957] "expr temp" "maybe param" "maybe type" "temp"
          (666960 'move' call_tmp[666957](144626 call _dom _mt[243] result[144533]))
          unknown call_tmp[666962] "expr temp" "maybe param" "maybe type" "temp"
          (666965 'move' call_tmp[666962](144629 call _getIterator call_tmp[666957]))
          unknown call_tmp[666967] "expr temp" "maybe param" "maybe type" "temp"
          (666970 'move' call_tmp[666967](144633 call _getIterator ir[144517]))
          (144635 'move' _iterator[144617](144595 call _build_tuple call_tmp[666962] call_tmp[666967]))
          Defer
          {
            {
              (144665 call _freeIterator _iterator[144617])
            }
          }
          { scopeless type
            (144640 'move' _indexOfInterest[144616](144637 call iteratorIndex _iterator[144617]))
          }
          ForLoop[144618]
          {
            (144645 call _check_tuple_var_decl _indexOfInterest[144616] 2)
            (481093 'end of statement')
            unknown ri[144651] "index var" "insert auto destroy"
            (481094 'end of statement')
            (144653 'move' ri[144651](144649 call _indexOfInterest[144616] 0))
            (481095 'end of statement' ri[144651])
            unknown src[144658] "index var" "insert auto destroy"
            (481097 'end of statement')
            (144660 'move' src[144658](144656 call _indexOfInterest[144616] 1))
            (481098 'end of statement' src[144658])
            {
              unknown r[144600] "dead at end of block" "ref var"
              unknown call_tmp[666972] "expr temp" "maybe param" "maybe type" "temp"
              (666975 'move' call_tmp[666972](144599 call result[144533] ri[144651]))
              (543370 'move' r[144600](543369 'addr of' call_tmp[666972]))
              (144603 'end of statement')
              unknown copy[144606] "dead at end of block" "no auto destroy"
              (543372 'init var' copy[144606] src[144658])
              (144609 'end of statement' result[144533] ri[144651] src[144658])
              (144614 '=' r[144600] copy[144606])
              (481103 'end of statement' r[144600] copy[144606])
            }
            label _continueLabel[144621]
            _indexOfInterest[144616]
            _iterator[144617]
          }
          label _breakLabel[144622]
        }
      }
      {
        {
          unknown _indexOfInterest[144694] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144695] "expr temp" "temp"
          unknown call_tmp[666977] "expr temp" "maybe param" "maybe type" "temp"
          (666980 'move' call_tmp[666977](144704 call _getIterator result[144533]))
          unknown call_tmp[666982] "expr temp" "maybe param" "maybe type" "temp"
          (666985 'move' call_tmp[666982](144707 call _getIterator ir[144517]))
          (144709 'move' _iterator[144695](144681 call _build_tuple call_tmp[666977] call_tmp[666982]))
          Defer
          {
            {
              (144739 call _freeIterator _iterator[144695])
            }
          }
          { scopeless type
            (144714 'move' _indexOfInterest[144694](144711 call iteratorIndex _iterator[144695]))
          }
          ForLoop[144696]
          {
            (144719 call _check_tuple_var_decl _indexOfInterest[144694] 2)
            (481107 'end of statement')
            unknown r[144725] "index var" "insert auto destroy"
            (481108 'end of statement')
            (144727 'move' r[144725](144723 call _indexOfInterest[144694] 0))
            (481109 'end of statement' r[144725])
            unknown src[144732] "index var" "insert auto destroy"
            (481111 'end of statement')
            (144734 'move' src[144732](144730 call _indexOfInterest[144694] 1))
            (481112 'end of statement' src[144732])
            {
              unknown copy[144683] "dead at end of block" "no auto destroy"
              (543374 'init var' copy[144683] src[144732])
              (144686 'end of statement' src[144732])
              (144692 '=' r[144725] copy[144683])
              (481115 'end of statement' r[144725] copy[144683])
            }
            label _continueLabel[144699]
            _indexOfInterest[144694]
            _iterator[144695]
          }
          label _breakLabel[144700]
        }
      }
    }
    {
      unknown call_tmp[666989] "expr temp" "maybe param" "maybe type" "temp"
      (666992 'move' call_tmp[666989](144754 call eltType _mt[243] result[144533]))
      unknown call_tmp[666994] "expr temp" "maybe param" "maybe type" "temp"
      (666997 'move' call_tmp[666994](144758 call needsInitWorkaround call_tmp[666989]))
      unknown call_tmp[666999] "expr temp" "maybe param" "maybe type" "temp"
      (667002 'move' call_tmp[666999](144826 call _cond_test call_tmp[666994]))
      if call_tmp[666999]
      {
        unknown call_tmp[667006] "expr temp" "maybe param" "maybe type" "temp"
        (667009 'move' call_tmp[667006](415786 call _dom _mt[243] result[144533]))
        unknown call_tmp[667011] "maybe param" "maybe type" "temp"
        (667014 'move' call_tmp[667011](415782 call chpl__staticAutoLocalCheck result[144533] call_tmp[667006]))
        unknown chpl__staticAutoLocalCheckSym[415781] "dead at end of block" "param"
        (543376 'init var' chpl__staticAutoLocalCheckSym[415781] call_tmp[667011])
        (481118 'end of statement' result[144533] result[144533])
        if chpl__staticAutoLocalCheckSym[415781]
        {
          unknown call_tmp[667018] "expr temp" "maybe param" "maybe type" "temp"
          (667021 'move' call_tmp[667018](144765 call _dom _mt[243] result[144533]))
          Forall {
            induction variables:
              
              unknown ri[144792] "index var" "insert auto destroy"
              
              unknown src[144794] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667018]
              ir[144517]
            shadow variables:
            other variables
              forall body
            {
              unknown r[144775] "dead at end of block" "ref var"
              unknown call_tmp[667023] "expr temp" "maybe param" "maybe type" "temp"
              (667026 'move' call_tmp[667023](415792 'may be local access' result[144533] ri[144792] chpl__staticAutoLocalCheckSym[415781] 1))
              (543379 'move' r[144775](543378 'addr of' call_tmp[667023]))
              (144778 'end of statement')
              unknown copy[144781] "dead at end of block" "no auto destroy"
              (543381 'init var' copy[144781] src[144794])
              (144784 'end of statement' result[144533] ri[144792] src[144794])
              (144789 '=' r[144775] copy[144781])
              (481124 'end of statement' r[144775] copy[144781])
            }
          }
        }
        {
          unknown call_tmp[667030] "expr temp" "maybe param" "maybe type" "temp"
          (667033 'move' call_tmp[667030](415777 call _dom _mt[243] result[144533]))
          Forall {
            induction variables:
              
              unknown ri[415772] "index var" "insert auto destroy"
              
              unknown src[415774] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667030]
              ir[144517]
            shadow variables:
            other variables
              forall body
            {
              unknown r[415758] "dead at end of block" "ref var"
              unknown call_tmp[667035] "expr temp" "maybe param" "maybe type" "temp"
              (667038 'move' call_tmp[667035](415760 call result[144533] ri[415772]))
              (543384 'move' r[415758](543383 'addr of' call_tmp[667035]))
              (415763 'end of statement')
              unknown copy[415764] "dead at end of block" "no auto destroy"
              (543386 'init var' copy[415764] src[415774])
              (415767 'end of statement' result[144533] ri[415772] src[415774])
              (415768 '=' r[415758] copy[415764])
              (481130 'end of statement' r[415758] copy[415764])
            }
          }
        }
      }
      {
        Forall {
          induction variables:
            
            unknown r[144820] "index var" "insert auto destroy"
            
            unknown src[144822] "index var" "insert auto destroy"
          iterated expressions:
            result[144533]
            ir[144517]
          shadow variables:
          other variables
            forall body
          {
            unknown copy[144808] "dead at end of block" "no auto destroy"
            (543388 'init var' copy[144808] src[144822])
            (144811 'end of statement' src[144822])
            (144817 '=' r[144820] copy[144808])
            (481134 'end of statement' r[144820] copy[144808])
          }
        }
      }
    }
    unknown call_tmp[667042] "expr temp" "maybe param" "maybe type" "temp"
    (667045 'move' call_tmp[667042](144836 call _value _mt[243] result[144533]))
    (144843 call(144839 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[667042]))
    (481137 'end of statement' result[144533])
    (519560 'move' ret[519555](519559 'deref' result[144533]))
    gotoReturn _end_chpl__initCopy_shapeHelp[519553] _end_chpl__initCopy_shapeHelp[519553]
    (481139 'end of statement' result[144533])
    label _end_chpl__initCopy_shapeHelp[519553]
    (519557 return ret[519555])
  }
  function chpl__throwErrorUnchecked[144858](in arg e[144855] :
  (144853 call _owned[30](?) Error[167938])) : _unknown[51] throws "unchecked throws" "no return value for void"
  {
    unknown call_tmp[667049] "expr temp" "maybe param" "maybe type" "temp"
    (667052 'move' call_tmp[667049](467950 call chpl_fix_thrown_error e[144855]))
    (144861 'throw' call_tmp[667049])
    (519564 return _void[55])
  }
  function chpl__initCopy[144872](arg ir[144869]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519568] "RVV" "temp"
    unknown call_tmp[667054] "maybe param" "maybe type" "temp"
    (667057 'move' call_tmp[667054](144877 call chpl_iteratorHasRangeShape ir[144869]))
    unknown shapeful[144878] "dead at end of block" "param"
    (543390 'init var' shapeful[144878] call_tmp[667054])
    (144881 'end of statement')
    unknown r[144895] "dead at end of block"
    unknown tmp[568334] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568335] "maybe param" "temp"
    (568340 'move' tmp[568335](568338 call _cond_test shapeful[144878]))
    if tmp[568335]
    {
      unknown tmp[568342] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568344 'move' tmp[568342](144885 call _shape_ _mt[243] ir[144869]))
      (568349 'move' tmp[568334](568346 '_paramFoldLogical' tmp[568335] tmp[568342]))
    }
    {
      unknown tmp[568351] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568353 'move' tmp[568351](144890 call chpl_build_bounded_range 1 0))
      (568358 'move' tmp[568334](568355 '_paramFoldLogical' tmp[568335] tmp[568351]))
    }
    (543392 'init var' r[144895] tmp[568334])
    (144898 'end of statement')
    unknown i[144900] "dead at end of block"
    (543394 'init var' i[144900] 0)
    (144903 'end of statement')
    unknown call_tmp[667063] "expr temp" "maybe param" "maybe type" "temp"
    (667066 'move' call_tmp[667063](144905 call size _mt[243] r[144895]))
    unknown call_tmp[667068] "maybe param" "maybe type" "temp"
    (667071 'move' call_tmp[667068](144909 call _cast size_t[20654] call_tmp[667063]))
    unknown size[144911] "dead at end of block"
    (543396 'init var' size[144911] call_tmp[667068])
    (144914 'end of statement')
    unknown call_tmp[667073] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667076 'move' call_tmp[667073](144917 'typeof' ir[144869]))
    unknown elemType[144920] "dead at end of block" "type variable"(144919 call iteratorToArrayElementType call_tmp[667073])
    unknown call_tmp[667078] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667081 'move' call_tmp[667078](543400 'typeof' ir[144869]))
    (543402 'move' elemType[144920](543399 call iteratorToArrayElementType call_tmp[667078]))
    unknown call_tmp[667083] "maybe param" "maybe type" "temp"
    (667086 'move' call_tmp[667083](144926 call _ddata[11695](?) elemType[144920]))
    unknown data[144928] "dead at end of block"
    (543404 'init var' data[144928] nil[44] call_tmp[667083])
    (144931 'end of statement')
    unknown callPostAlloc[144933] "dead at end of block"
    (543406 'default init var' callPostAlloc[144933] bool[10])
    (144936 'end of statement')
    unknown subloc[144938] "dead at end of block"
    (543408 'init var' subloc[144938] c_sublocid_none[89870])
    (144941 'end of statement')
    unknown call_tmp[667088] "expr temp" "maybe param" "maybe type" "temp"
    (667091 'move' call_tmp[667088](144944 call > size[144911] 0))
    unknown call_tmp[667093] "expr temp" "maybe param" "maybe type" "temp"
    (667096 'move' call_tmp[667093](144957 call _cond_test call_tmp[667088]))
    if call_tmp[667093]
    {
      unknown call_tmp[667098] "expr temp" "maybe param" "maybe type" "temp"
      (667101 'move' call_tmp[667098](144952 call _ddata_allocate_noinit elemType[144920] size[144911] callPostAlloc[144933]))
      (144953 call = data[144928] call_tmp[667098])
      (481144 'end of statement' data[144928] elemType[144920] size[144911] callPostAlloc[144933])
    }
    Try
    {
      {
        {
          unknown _indexOfInterest[145105] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145106] "expr temp" "temp"
          (145115 'move' _iterator[145106](145113 call _getIterator ir[144869]))
          Defer
          {
            {
              (145131 call _freeIterator _iterator[145106])
            }
          }
          { scopeless type
            (145120 'move' _indexOfInterest[145105](145117 call iteratorIndex _iterator[145106]))
          }
          ForLoop[145107]
          {
            unknown elt[145124] "index var" "insert auto destroy"
            (481150 'end of statement')
            (145126 'move' elt[145124] _indexOfInterest[145105])
            (481151 'end of statement' elt[145124])
            {
              unknown call_tmp[667103] "maybe param" "maybe type" "temp"
              (667106 'move' call_tmp[667103](144966 call chpl__initCopy elt[145124]))
              unknown eltCopy[144968] "dead at end of block" "no auto destroy" "no copy"
              (543410 'init var' eltCopy[144968] call_tmp[667103])
              (144971 'end of statement' elt[145124])
              unknown call_tmp[667108] "expr temp" "maybe param" "maybe type" "temp"
              (667111 'move' call_tmp[667108](144975 call >= i[144900] size[144911]))
              unknown call_tmp[667113] "expr temp" "maybe param" "maybe type" "temp"
              (667116 'move' call_tmp[667113](145087 call _cond_test call_tmp[667108]))
              if call_tmp[667113]
              {
                unknown oldSize[144978] "dead at end of block"
                (543412 'init var' oldSize[144978] size[144911])
                (144981 'end of statement')
                unknown oldData[144984] "dead at end of block"
                (543414 'init var' oldData[144984] data[144928])
                (144987 'end of statement' size[144911] data[144928])
                unknown call_tmp[667118] "expr temp" "maybe param" "maybe type" "temp"
                (667121 'move' call_tmp[667118](144990 call == size[144911] 0))
                unknown call_tmp[667123] "expr temp" "maybe param" "maybe type" "temp"
                (667126 'move' call_tmp[667123](145005 call _cond_test call_tmp[667118]))
                if call_tmp[667123]
                {
                  (144994 call = size[144911] 4)
                  (481156 'end of statement' size[144911])
                }
                {
                  unknown call_tmp[667128] "expr temp" "maybe param" "maybe type" "temp"
                  (667131 'move' call_tmp[667128](145000 call * 2 size[144911]))
                  (145002 call = size[144911] call_tmp[667128])
                  (481158 'end of statement' size[144911] size[144911])
                }
                unknown call_tmp[667133] "expr temp" "maybe param" "maybe type" "temp"
                (667136 'move' call_tmp[667133](145017 call _ddata_allocate_noinit elemType[144920] size[144911] callPostAlloc[144933]))
                (145018 call = data[144928] call_tmp[667133])
                (481161 'end of statement' data[144928] elemType[144920] size[144911] callPostAlloc[144933])
                {
                  unknown _indexOfInterest[145041] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[145042] "expr temp" "temp"
                  unknown call_tmp[667138] "expr temp" "maybe param" "maybe type" "temp"
                  (667141 'move' call_tmp[667138](145058 call chpl_direct_counted_range_iter 0 oldSize[144978]))
                  (145051 'move' _iterator[145042](145049 call _getIterator call_tmp[667138]))
                  Defer
                  {
                    {
                      (145074 call _freeIterator _iterator[145042])
                    }
                  }
                  { scopeless type
                    (145063 'move' _indexOfInterest[145041](145060 call iteratorIndex _iterator[145042]))
                  }
                  ForLoop[145043]
                  {
                    unknown i[145067] "index var" "insert auto destroy"
                    (481167 'end of statement')
                    (145069 'move' i[145067] _indexOfInterest[145041])
                    (481168 'end of statement' i[145067])
                    {
                      unknown call_tmp[667143] "expr temp" "maybe param" "maybe type" "temp"
                      (667146 'move' call_tmp[667143](145033 call data[144928] i[145067]))
                      unknown call_tmp[667148] "expr temp" "maybe param" "maybe type" "temp"
                      (667151 'move' call_tmp[667148](145037 call oldData[144984] i[145067]))
                      (145038 '=' call_tmp[667143] call_tmp[667148])
                      (481170 'end of statement' data[144928] i[145067] oldData[144984] i[145067])
                    }
                    label _continueLabel[145046]
                    _indexOfInterest[145041]
                    _iterator[145042]
                  }
                  label _breakLabel[145047]
                }
                (145085 call _ddata_free oldData[144984] oldSize[144978])
                (481175 'end of statement' oldData[144984] oldSize[144978])
              }
              unknown call_tmp[667153] "expr temp" "maybe param" "maybe type" "temp"
              (667156 'move' call_tmp[667153](145096 call data[144928] i[144900]))
              (145098 '=' call_tmp[667153] eltCopy[144968])
              (481178 'end of statement' data[144928] i[144900] eltCopy[144968])
              (145102 call += i[144900] 1)
              (481182 'end of statement' i[144900])
            }
            label _continueLabel[145110]
            _indexOfInterest[145105]
            _iterator[145106]
          }
          label _breakLabel[145111]
        }
      }
    }
    Catch e : Error
    {
      unknown call_tmp[667158] "maybe param" "maybe type" "temp"
      (667161 'move' call_tmp[667158](354233 'current error'))
      unknown tmp[354230] "dead at end of block" "temp"
      (543416 'init var' tmp[354230] call_tmp[667158])
      unknown call_tmp[667163] "expr temp" "maybe param" "maybe type" "temp"
      (667166 'move' call_tmp[667163](354237 'to non nilable class' tmp[354230]))
      unknown call_tmp[667168] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (667171 'move' call_tmp[667168](747803 'new' _owned[30](?) call_tmp[667163]))
      unknown e[354236] "dead at end of block"
      (543418 'init var' e[354236] call_tmp[667168])
      (481184 'end of statement')
      {
        {
          unknown _indexOfInterest[145160] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145161] "expr temp" "temp"
          unknown call_tmp[667173] "expr temp" "maybe param" "maybe type" "temp"
          (667176 'move' call_tmp[667173](145175 call - i[144900] 1))
          unknown call_tmp[667178] "expr temp" "maybe param" "maybe type" "temp"
          (667181 'move' call_tmp[667178](145178 call chpl_direct_range_iter 0 call_tmp[667173] 1))
          (145170 'move' _iterator[145161](145168 call _getIterator call_tmp[667178]))
          Defer
          {
            {
              (145194 call _freeIterator _iterator[145161])
            }
          }
          { scopeless type
            (145183 'move' _indexOfInterest[145160](145180 call iteratorIndex _iterator[145161]))
          }
          ForLoop[145162]
          {
            unknown j[145187] "index var" "insert auto destroy"
            (481186 'end of statement')
            (145189 'move' j[145187] _indexOfInterest[145160])
            (481187 'end of statement' j[145187])
            {
              unknown call_tmp[667183] "expr temp" "maybe param" "maybe type" "temp"
              (667186 'move' call_tmp[667183](145155 call data[144928] j[145187]))
              (145157 call chpl__autoDestroy call_tmp[667183])
              (481189 'end of statement' data[144928] j[145187])
            }
            label _continueLabel[145165]
            _indexOfInterest[145160]
            _iterator[145161]
          }
          label _breakLabel[145166]
        }
        (145206 call _ddata_free data[144928] size[144911])
        (481192 'end of statement' data[144928] size[144911])
        (145211 call chpl__throwErrorUnchecked e[354236])
        (481195 'end of statement' e[354236])
      }
    }
    unknown tmp[426979] "maybe param" "temp"
    (426990 'move' tmp[426979] shapeful[144878])
    unknown call_tmp[667188] "expr temp" "maybe param" "maybe type" "temp"
    (667191 'move' call_tmp[667188](426992 call _cond_invalid tmp[426979]))
    if call_tmp[667188]
    {
      (426995 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568365] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568366] "maybe param" "temp"
    unknown call_tmp[667193] "expr temp" "maybe param" "maybe type" "temp"
    (667196 'move' call_tmp[667193](426980 call isTrue tmp[426979]))
    (568371 'move' tmp[568366](568369 call _cond_test call_tmp[667193]))
    if tmp[568366]
    {
      unknown tmp[568373] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[667200] "expr temp" "maybe param" "maybe type" "temp"
      (667203 'move' call_tmp[667200](145219 call size _mt[243] r[144895]))
      unknown call_tmp[667205] "expr temp" "maybe param" "maybe type" "temp"
      (667208 'move' call_tmp[667205](145222 call < i[144900] call_tmp[667200]))
      (568375 'move' tmp[568373](426983 call isTrue call_tmp[667205]))
      (568380 'move' tmp[568365](568377 '_paramFoldLogical' tmp[568366] tmp[568373]))
    }
    {
      (568385 'move' tmp[568365](568382 '_paramFoldLogical' tmp[568366] 0))
    }
    unknown call_tmp[667210] "expr temp" "maybe param" "maybe type" "temp"
    (667213 'move' call_tmp[667210](145234 call _cond_test tmp[568365]))
    if call_tmp[667210]
    {
      unknown call_tmp[667215] "expr temp" "maybe param" "maybe type" "temp"
      (667218 'move' call_tmp[667215](145229 call # r[144895] i[144900]))
      (145231 call = r[144895] call_tmp[667215])
      (481198 'end of statement' r[144895] r[144895] i[144900])
    }
    unknown call_tmp[667220] "expr temp" "maybe param" "maybe type" "temp"
    (667223 'move' call_tmp[667220](145240 call ! shapeful[144878]))
    unknown call_tmp[667225] "expr temp" "maybe param" "maybe type" "temp"
    (667228 'move' call_tmp[667225](145263 call _cond_test call_tmp[667220]))
    if call_tmp[667225]
    {
      unknown tmp[568392] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568393] "maybe param" "temp"
      unknown call_tmp[667230] "expr temp" "maybe param" "maybe type" "temp"
      (667233 'move' call_tmp[667230](145245 call == i[144900] 0))
      (568398 'move' tmp[568393](568396 call _cond_test call_tmp[667230]))
      if tmp[568393]
      {
        unknown tmp[568400] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (568402 'move' tmp[568400](145249 call chpl_build_bounded_range 1 0))
        (568407 'move' tmp[568392](568404 '_paramFoldLogical' tmp[568393] tmp[568400]))
      }
      {
        unknown tmp[568409] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[667235] "expr temp" "maybe param" "maybe type" "temp"
        (667238 'move' call_tmp[667235](145252 call chpl_build_low_bounded_range capturedIteratorLowBound[115335]))
        (568411 'move' tmp[568409](145255 call # call_tmp[667235] i[144900]))
        (568416 'move' tmp[568392](568413 '_paramFoldLogical' tmp[568393] tmp[568409]))
      }
      (145260 call = r[144895] tmp[568392])
      (481202 'end of statement' r[144895] i[144900] i[144900])
    }
    unknown call_tmp[667240] "maybe param" "maybe type" "temp"
    (667243 'move' call_tmp[667240](145270 call chpl__buildDomainExpr r[144895]))
    unknown D[145272] "dead at end of block" "insert auto destroy"
    (543420 'init var' D[145272] call_tmp[667240])
    (145275 'end of statement' r[144895] elemType[144920] r[144895])
    unknown call_tmp[667245] "expr temp" "maybe param" "maybe type" "temp"
    (667248 'move' call_tmp[667245](145278 call != data[144928] nil[44]))
    unknown call_tmp[667250] "expr temp" "maybe param" "maybe type" "temp"
    (667253 'move' call_tmp[667250](145405 call _cond_test call_tmp[667245]))
    if call_tmp[667250]
    {
      unknown call_tmp[667255] "expr temp" "maybe param" "maybe type" "temp"
      (667258 'move' call_tmp[667255](145287 call _cond_test callPostAlloc[144933]))
      if call_tmp[667255]
      {
        (145285 call _ddata_allocate_postalloc data[144928] size[144911])
        (481207 'end of statement' data[144928] size[144911])
      }
      { scopeless type
        unknown call_type_tmp[492212] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667260] "expr temp" "maybe param" "maybe type" "temp"
        (667263 'move' call_tmp[667260](145302 call data[144928] 0))
        (492216 'move' call_type_tmp[492212](145303 'typeof' call_tmp[667260]))
      }
      unknown call_tmp[667267] "expr temp" "maybe param" "maybe type" "temp"
      (667270 'move' call_tmp[667267](145308 call _cast int(64)[13] size[144911]))
      unknown call_tmp[667272] "maybe param" "maybe type" "temp"
      (667275 'move' call_tmp[667272](145310 call(145296 call (partial) buildArrayWith _mt[243] D[145272]) call_type_tmp[492212] data[144928] call_tmp[667267]))
      unknown A[145311] "dead at end of block"
      (543422 'init var' A[145311] call_tmp[667272])
      (145314 'end of statement' D[145272] data[144928] data[144928] size[144911])
      { scopeless type
        unknown call_type_tmp[492218] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667277] "expr temp" "maybe param" "maybe type" "temp"
        (667280 'move' call_tmp[667277](145324 call data[144928] 0))
        (492222 'move' call_type_tmp[492218](145325 'typeof' call_tmp[667277]))
      }
      unknown call_tmp[667284] "expr temp" "maybe param" "maybe type" "temp"
      (667287 'move' call_tmp[667284](145317 call _value _mt[243] A[145311]))
      (145326 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[667284] call_type_tmp[492218])
      (481214 'end of statement' A[145311] data[144928])
      unknown call_tmp[667291] "expr temp" "maybe param" "maybe type" "temp"
      (667294 'move' call_tmp[667291](145329 call _value _mt[243] A[145311]))
      unknown call_tmp[667298] "expr temp" "maybe param" "maybe type" "temp"
      (667301 'move' call_tmp[667298](145332 call _decEltRefCounts _mt[243] call_tmp[667291]))
      (145336 call = call_tmp[667298] 0)
      (481217 'end of statement' A[145311])
      (145358 'auto destroy runtime type' elemType[144920])
      (481219 'end of statement' elemType[144920])
      (519573 'move' ret[519568](519572 'deref' A[145311]))
      gotoReturn _end_chpl__initCopy[519566] _end_chpl__initCopy[519566]
      (481221 'end of statement' A[145311])
    }
    {
      unknown call_tmp[667303] "expr temp" "maybe param" "maybe type" "temp"
      (667306 'move' call_tmp[667303](145369 call _ddata_allocate_noinit elemType[144920] size[144911] callPostAlloc[144933]))
      (145370 call = data[144928] call_tmp[667303])
      (481223 'end of statement' data[144928] elemType[144920] size[144911] callPostAlloc[144933])
      unknown call_tmp[667308] "expr temp" "maybe param" "maybe type" "temp"
      (667311 'move' call_tmp[667308](145381 call _cond_test callPostAlloc[144933]))
      if call_tmp[667308]
      {
        (145379 call _ddata_allocate_postalloc data[144928] size[144911])
        (481228 'end of statement' data[144928] size[144911])
      }
      unknown call_tmp[667315] "expr temp" "maybe param" "maybe type" "temp"
      (667318 'move' call_tmp[667315](145395 call _cast int(64)[13] size[144911]))
      unknown call_tmp[667320] "maybe param" "maybe type" "temp"
      (667323 'move' call_tmp[667320](145397 call(145387 call (partial) buildArrayWith _mt[243] D[145272]) elemType[144920] data[144928] call_tmp[667315]))
      unknown A[145398] "dead at end of block"
      (543424 'init var' A[145398] call_tmp[667320])
      (145401 'end of statement' D[145272] elemType[144920] data[144928] size[144911])
      (519578 'move' ret[519568](519577 'deref' A[145398]))
      gotoReturn _end_chpl__initCopy[519566] _end_chpl__initCopy[519566]
      (481235 'end of statement' A[145398])
    }
    label _end_chpl__initCopy[519566]
    (519570 return ret[519568])
  }
  (355014 'used modules list'(113674 'use' ChapelBase[307])(113678 'use' ChapelTuple[56185])(113681 'use' ChapelLocale[89844])(113684 'use' ArrayViewSlice[189686])(113687 'use' ArrayViewRankChange[191441])(113690 'use' ArrayViewReindex[196028])(113693 'import' Reflection[224794])(113696 'use' ChapelDebugPrint[188109])(113699 'use' SysCTypes[20940]))
}