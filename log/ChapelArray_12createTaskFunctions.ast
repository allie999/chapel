AST dump for ChapelArray after pass createTaskFunctions.
Module use list: ChapelBase ChapelTuple ChapelLocale ArrayViewSlice ArrayViewRankChange ArrayViewReindex Reflection ChapelDebugPrint SysCTypes HaltWrappers Sort IO 

{
  function chpl__init_ChapelArray[416024]() : void[4] "insert line file info" "module init"
  {
    unknown call_tmp[648202] "expr temp" "maybe param" "maybe type" "temp"
    (648205 'move' call_tmp[648202](113710 call chpl__processorAtomicType int(64)[13]))
    (542644 'default init var' numPrivateObjects[113711] call_tmp[648202])
    (113714 'end of statement')
    unknown call_tmp[648207] "maybe param" "maybe type" "temp"
    (648210 'move' call_tmp[648207](113716 call - 1))
    (542646 'init var' nullPid[113718] call_tmp[648207])
    (113721 'end of statement')
    (542648 'init var' debugBulkTransfer[113723] 0)
    (113726 'end of statement')
    (542650 'init var' useBulkTransfer[113728] 1)
    (113731 'end of statement')
    (542652 'init var' useBulkTransferStride[113733] 1)
    (113736 'end of statement')
    (542654 'init var' useBulkPtrTransfer[113738] useBulkTransfer[113728])
    (113741 'end of statement')
    (542656 'init var' PODValAccess[113743] 1)
    (113746 'end of statement')
    (542658 'init var' useBulkTransferDist[113748] 0)
    (113751 'end of statement')
    (542660 'init var' arrayAsVecGrowthFactor[113755] 1.5)
    (113758 'end of statement')
    (542662 'init var' debugArrayAsVec[113760] 0)
    (113763 'end of statement')
    (542686 'init var' CHPL_WARN_DOMAIN_LITERAL[115331] "unset")
    (115334 'end of statement')
    (542688 'init var' arrayLiteralLowBound[115336] defaultLowBound[361])
    (115339 'end of statement')
    (542690 'init var' capturedIteratorLowBound[115341] defaultLowBound[361])
    (115344 'end of statement')
    (519719 return _void[55])
  }
  unknown numPrivateObjects[113711] "dead at end of block" "insert auto destroy" "no doc"
  unknown nullPid[113718] "dead at end of block" "no doc" "param"
  unknown debugBulkTransfer[113723] "config" "no doc" "param"
  unknown useBulkTransfer[113728] "config" "no doc" "param"
  unknown useBulkTransferStride[113733] "config" "no doc" "param"
  unknown useBulkPtrTransfer[113738] "config" "no doc" "param"
  unknown PODValAccess[113743] "config" "no doc" "param"
  unknown useBulkTransferDist[113748] "config" "no doc" "param"
  unknown arrayAsVecGrowthFactor[113755] "config" "no doc" "param"
  unknown debugArrayAsVec[113760] "config" "no doc" "param"
  function _isPrivatized[113768](arg value[113766]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515723] "RVV" "param" "temp"
    unknown tmp[424108] "maybe param" "temp"
    (424119 'move' tmp[424108](113771 call ! 0))
    unknown call_tmp[648212] "expr temp" "maybe param" "maybe type" "temp"
    (648215 'move' call_tmp[648212](424121 call _cond_invalid tmp[424108]))
    if call_tmp[648212]
    {
      (424124 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564255] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564256] "maybe param" "temp"
    unknown call_tmp[648217] "expr temp" "maybe param" "maybe type" "temp"
    (648220 'move' call_tmp[648217](424109 call isTrue tmp[424108]))
    (564261 'move' tmp[564256](564259 call _cond_test call_tmp[648217]))
    if tmp[564256]
    {
      unknown tmp[424129] "maybe param" "temp"
      unknown tmp[424150] "maybe param" "temp"
      (424161 'move' tmp[424150] 1)
      unknown call_tmp[648222] "expr temp" "maybe param" "maybe type" "temp"
      (648225 'move' call_tmp[648222](424163 call _cond_invalid tmp[424150]))
      if call_tmp[648222]
      {
        (424166 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[564201] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564202] "maybe param" "temp"
      unknown call_tmp[648227] "expr temp" "maybe param" "maybe type" "temp"
      (648230 'move' call_tmp[648227](424151 call isTrue tmp[424150]))
      (564207 'move' tmp[564202](564205 call _cond_test call_tmp[648227]))
      if tmp[564202]
      {
        unknown tmp[564209] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648232] "expr temp" "maybe param" "maybe type" "temp"
        (648235 'move' call_tmp[648232](113775 call postfix! value[113766]))
        unknown call_tmp[648239] "expr temp" "maybe param" "maybe type" "temp"
        (648242 'move' call_tmp[648239](113783 call(113779 call (partial) dsiSupportsPrivatization _mt[243] call_tmp[648232])))
        (564211 'move' tmp[564209](424154 call isTrue call_tmp[648239]))
        (564216 'move' tmp[564201](564213 '_paramFoldLogical' tmp[564202] tmp[564209]))
      }
      {
        (564221 'move' tmp[564201](564218 '_paramFoldLogical' tmp[564202] 0))
      }
      (424140 'move' tmp[424129] tmp[564201])
      unknown call_tmp[648244] "expr temp" "maybe param" "maybe type" "temp"
      (648247 'move' call_tmp[648244](424142 call _cond_invalid tmp[424129]))
      if call_tmp[648244]
      {
        (424145 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564228] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564229] "maybe param" "temp"
      unknown call_tmp[648249] "expr temp" "maybe param" "maybe type" "temp"
      (648252 'move' call_tmp[648249](424130 call isTrue tmp[424129]))
      (564234 'move' tmp[564229](564232 call _cond_test call_tmp[648249]))
      if tmp[564229]
      {
        (564239 'move' tmp[564228](564236 '_paramFoldLogical' tmp[564229] 1))
      }
      {
        unknown tmp[564241] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648254] "expr temp" "maybe param" "maybe type" "temp"
        (648257 'move' call_tmp[648254](113787 call postfix! value[113766]))
        unknown call_tmp[648261] "expr temp" "maybe param" "maybe type" "temp"
        (648264 'move' call_tmp[648261](113795 call(113791 call (partial) dsiRequiresPrivatization _mt[243] call_tmp[648254])))
        (564243 'move' tmp[564241](424134 call isTrue call_tmp[648261]))
        (564248 'move' tmp[564228](564245 '_paramFoldLogical' tmp[564229] tmp[564241]))
      }
      unknown tmp[564263] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564265 'move' tmp[564263](424112 call isTrue tmp[564228]))
      (564270 'move' tmp[564255](564267 '_paramFoldLogical' tmp[564256] tmp[564263]))
    }
    {
      (564275 'move' tmp[564255](564272 '_paramFoldLogical' tmp[564256] 0))
    }
    (515728 'move' ret[515723](515727 'deref' tmp[564255]))
    (515725 return ret[515723])
  }
  function _newPrivatizedClass[113809](arg value[113807]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515734] "RVV" "temp"
    unknown call_tmp[648268] "maybe param" "maybe type" "temp"
    (648271 'move' call_tmp[648268](113820 call(113815 call (partial) fetchAdd _mt[243] numPrivateObjects[113711]) 1))
    const n[113821] "dead at end of block" "const" "insert auto destroy"
    (542664 'init var' n[113821] call_tmp[648268])
    (113824 'end of statement')
    unknown call_tmp[648273] "expr temp" "maybe param" "maybe type" "temp"
    (648276 'move' call_tmp[648273](359067 call here[90438]))
    unknown call_tmp[648280] "maybe param" "maybe type" "temp"
    (648283 'move' call_tmp[648280](113827 call id _mt[243] call_tmp[648273]))
    const hereID[113830] "dead at end of block" "const" "insert auto destroy"
    (542666 'init var' hereID[113830] call_tmp[648280])
    (113833 'end of statement')
    unknown call_tmp[648287] "maybe param" "maybe type" "temp"
    (648290 'move' call_tmp[648287](113841 call(113837 call (partial) dsiGetPrivatizeData _mt[243] value[113807])))
    const privatizeData[113842] "dead at end of block" "const" "insert auto destroy"
    (542668 'init var' privatizeData[113842] call_tmp[648287])
    (113845 'end of statement')
    const tmp[113862] "const" "temp"
    unknown call_tmp[648292] "expr temp" "maybe param" "maybe type" "temp"
    (648295 'move' call_tmp[648292](113849 call Locales[113662] 0))
    unknown call_tmp[648297] "expr temp" "maybe param" "maybe type" "temp"
    (648300 'move' call_tmp[648297](113859 '_wide_get_locale' call_tmp[648292]))
    (113864 'move' tmp[113862](113860 'deref' call_tmp[648297]))
    (934986 call on_fn[934982] tmp[113862])
    function on_fn[934982](const in arg dummy_locale_arg[934984]:chpl_localeID_t[209352]) : void[4] "on"
    {
      (113857 call _newPrivatizedClassHelp value[113807] value[113807] n[113821] hereID[113830] privatizeData[113842])
      (479206 'end of statement' n[113821] hereID[113830] privatizeData[113842])
      (934989 return _void[55])
    }
    {
    }
    function _newPrivatizedClassHelp[113874](arg parentValue[113872]:_any[178](?), arg originalValue[113876]:_any[178](?), arg n[113878]:_any[178](?), arg hereID[113880]:_any[178](?), arg privatizeData[113882]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[113885] "dead at end of block" "insert auto destroy"
      (542670 'init var' newValue[113885] originalValue[113876])
      (113888 'end of statement')
      unknown call_tmp[648302] "expr temp" "maybe param" "maybe type" "temp"
      (648305 'move' call_tmp[648302](359070 call here[90438]))
      unknown call_tmp[648309] "expr temp" "maybe param" "maybe type" "temp"
      (648312 'move' call_tmp[648309](113892 call id _mt[243] call_tmp[648302]))
      unknown call_tmp[648314] "expr temp" "maybe param" "maybe type" "temp"
      (648317 'move' call_tmp[648314](113895 call != hereID[113880] call_tmp[648309]))
      unknown call_tmp[648319] "expr temp" "maybe param" "maybe type" "temp"
      (648322 'move' call_tmp[648319](113958 call _cond_test call_tmp[648314]))
      if call_tmp[648319]
      {
        unknown call_tmp[648326] "expr temp" "maybe param" "maybe type" "temp"
        (648329 'move' call_tmp[648326](113906 call(113901 call (partial) dsiPrivatize _mt[243] parentValue[113872]) privatizeData[113882]))
        (113907 call = newValue[113885] call_tmp[648326])
        (479210 'end of statement' newValue[113885])
        (113931 'chpl_newPrivatizedClass' newValue[113885] n[113878])
        (479212 'end of statement' newValue[113885])
        unknown call_tmp[648333] "expr temp" "maybe param" "maybe type" "temp"
        (648336 'move' call_tmp[648333](113936 call pid _mt[243] newValue[113885]))
        (113940 call = call_tmp[648333] n[113878])
        (479214 'end of statement' newValue[113885])
      }
      {
        (113947 'chpl_newPrivatizedClass' newValue[113885] n[113878])
        (479216 'end of statement' newValue[113885])
        unknown call_tmp[648340] "expr temp" "maybe param" "maybe type" "temp"
        (648343 'move' call_tmp[648340](113951 call pid _mt[243] newValue[113885]))
        (113955 call = call_tmp[648340] n[113878])
        (479218 'end of statement' newValue[113885])
      }
      {
        const _cobeginCount[114045] "const" "end count" "temp"
        (114066 'move' _cobeginCount[114045](114063 call _endCountAlloc 1))
        (114058 call _upEndCount _cobeginCount[114045] 1 2)
        (479220 'end of statement')
        (935011 call cobegin_fn[935009] originalValue[113876] newValue[113885] n[113878] hereID[113880] privatizeData[113882])
        function cobegin_fn[935009](arg originalValue[935016]:_any[178](?), arg newValue[935019], arg n[935022]:_any[178](?), arg hereID[935025]:_any[178](?), arg privatizeData[935028]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648347] "expr temp" "maybe param" "maybe type" "temp"
          (648350 'move' call_tmp[648347](113965 call left _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648354] "expr temp" "maybe param" "maybe type" "temp"
          (648357 'move' call_tmp[648354](113968 call _instance _mt[243] call_tmp[648347]))
          unknown call_tmp[648359] "expr temp" "maybe param" "maybe type" "temp"
          (648362 'move' call_tmp[648359](113972 call != call_tmp[648354] nil[44]))
          unknown call_tmp[648364] "expr temp" "maybe param" "maybe type" "temp"
          (648367 'move' call_tmp[648364](113998 call _cond_test call_tmp[648359]))
          if call_tmp[648364]
          {
            const tmp[113990] "const" "temp"
            unknown call_tmp[648371] "expr temp" "maybe param" "maybe type" "temp"
            (648374 'move' call_tmp[648371](113975 call left _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648376] "expr temp" "maybe param" "maybe type" "temp"
            (648379 'move' call_tmp[648376](113987 '_wide_get_locale' call_tmp[648371]))
            (113992 'move' tmp[113990](113988 'deref' call_tmp[648376]))
            (934995 call on_fn[934991] tmp[113990])
            function on_fn[934991](const in arg dummy_locale_arg[934993]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (113985 call _newPrivatizedClassHelp newValue[935019] originalValue[935016] n[935022] hereID[935025] privatizeData[935028])
              (479221 'end of statement' newValue[935019])
              (934998 return _void[55])
            }
            {
            }
          }
          (114048 call _downEndCount _cobeginCount[114045] nil[44])
          (935014 return _void[55])
        }
        {
        }
        (935033 call cobegin_fn[935031] originalValue[113876] newValue[113885] n[113878] hereID[113880] privatizeData[113882])
        function cobegin_fn[935031](arg originalValue[935038]:_any[178](?), arg newValue[935041], arg n[935044]:_any[178](?), arg hereID[935047]:_any[178](?), arg privatizeData[935050]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648383] "expr temp" "maybe param" "maybe type" "temp"
          (648386 'move' call_tmp[648383](114007 call right _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648390] "expr temp" "maybe param" "maybe type" "temp"
          (648393 'move' call_tmp[648390](114010 call _instance _mt[243] call_tmp[648383]))
          unknown call_tmp[648395] "expr temp" "maybe param" "maybe type" "temp"
          (648398 'move' call_tmp[648395](114014 call != call_tmp[648390] nil[44]))
          unknown call_tmp[648400] "expr temp" "maybe param" "maybe type" "temp"
          (648403 'move' call_tmp[648400](114040 call _cond_test call_tmp[648395]))
          if call_tmp[648400]
          {
            const tmp[114032] "const" "temp"
            unknown call_tmp[648407] "expr temp" "maybe param" "maybe type" "temp"
            (648410 'move' call_tmp[648407](114017 call right _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648412] "expr temp" "maybe param" "maybe type" "temp"
            (648415 'move' call_tmp[648412](114029 '_wide_get_locale' call_tmp[648407]))
            (114034 'move' tmp[114032](114030 'deref' call_tmp[648412]))
            (935004 call on_fn[935000] tmp[114032])
            function on_fn[935000](const in arg dummy_locale_arg[935002]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (114027 call _newPrivatizedClassHelp newValue[935041] originalValue[935038] n[935044] hereID[935047] privatizeData[935050])
              (479224 'end of statement' newValue[935041])
              (935007 return _void[55])
            }
            {
            }
          }
          (114054 call _downEndCount _cobeginCount[114045] nil[44])
          (935036 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114069 call _endCountFree _cobeginCount[114045])
          }
        }
        (114074 call _waitEndCount _cobeginCount[114045] 1 2)
      }
      (515730 return _void[55])
    }
    (515740 'move' ret[515734](515739 'coerce' n[113821] int(64)[13]))
    gotoReturn _end__newPrivatizedClass[515732] _end__newPrivatizedClass[515732]
    (479229 'end of statement' n[113821])
    label _end__newPrivatizedClass[515732]
    (515736 return ret[515734])
  }
  { scopeless type
    int(64)[13]
  }
  function _freePrivatizedClass[114093](arg pid[114090]:int(64)[13], arg original[114096]:object[367087](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648417] "expr temp" "maybe param" "maybe type" "temp"
    (648420 'move' call_tmp[648417](114102 call == pid[114090] nullPid[113718]))
    unknown call_tmp[648422] "expr temp" "maybe param" "maybe type" "temp"
    (648425 'move' call_tmp[648422](114106 call _cond_test call_tmp[648417]))
    if call_tmp[648422]
    {
      gotoReturn _end__freePrivatizedClass[515748] _end__freePrivatizedClass[515748]
    }
    const tmp[114126] "const" "temp"
    unknown call_tmp[648427] "expr temp" "maybe param" "maybe type" "temp"
    (648430 'move' call_tmp[648427](114115 call Locales[113662] 0))
    unknown call_tmp[648432] "expr temp" "maybe param" "maybe type" "temp"
    (648435 'move' call_tmp[648432](114123 '_wide_get_locale' call_tmp[648427]))
    (114128 'move' tmp[114126](114124 'deref' call_tmp[648432]))
    (935057 call on_fn[935053] tmp[114126])
    function on_fn[935053](const in arg dummy_locale_arg[935055]:chpl_localeID_t[209352]) : void[4] "on"
    {
      {
        (114120 call _freePrivatizedClassHelp pid[114090] original[114096])
      }
      (935060 return _void[55])
    }
    {
    }
    function _freePrivatizedClassHelp[114138](arg pid[114136]:_any[178](?), arg original[114140]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown call_tmp[648437] "maybe param" "maybe type" "temp"
      (648440 'move' call_tmp[648437](114147 call chpl_getPrivatizedCopy unmanaged object[415493] pid[114136]))
      unknown prv[114148] "dead at end of block" "insert auto destroy"
      (542672 'init var' prv[114148] call_tmp[648437])
      (114151 'end of statement')
      unknown call_tmp[648442] "expr temp" "maybe param" "maybe type" "temp"
      (648445 'move' call_tmp[648442](114155 call != prv[114148] original[114140]))
      unknown call_tmp[648447] "expr temp" "maybe param" "maybe type" "temp"
      (648450 'move' call_tmp[648447](114162 call _cond_test call_tmp[648442]))
      if call_tmp[648447]
      {
        (114159 call chpl__delete prv[114148])
        (479233 'end of statement' prv[114148])
      }
      function chpl_clearPrivatizedClass[114173](arg pid[114170]:int(64)[13]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
        (515744 return _void[55])
      }
      (114180 call chpl_clearPrivatizedClass pid[114136])
      (479235 'end of statement')
      {
        const _cobeginCount[114255] "const" "end count" "temp"
        (114276 'move' _cobeginCount[114255](114273 call _endCountAlloc 1))
        (114268 call _upEndCount _cobeginCount[114255] 1 2)
        (479236 'end of statement')
        (935082 call cobegin_fn[935080] pid[114136] original[114140])
        function cobegin_fn[935080](arg pid[935087]:_any[178](?), arg original[935090]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648454] "expr temp" "maybe param" "maybe type" "temp"
          (648457 'move' call_tmp[648454](114183 call left _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648461] "expr temp" "maybe param" "maybe type" "temp"
          (648464 'move' call_tmp[648461](114186 call _instance _mt[243] call_tmp[648454]))
          unknown call_tmp[648466] "expr temp" "maybe param" "maybe type" "temp"
          (648469 'move' call_tmp[648466](114190 call != call_tmp[648461] nil[44]))
          unknown call_tmp[648471] "expr temp" "maybe param" "maybe type" "temp"
          (648474 'move' call_tmp[648471](114213 call _cond_test call_tmp[648466]))
          if call_tmp[648471]
          {
            const tmp[114205] "const" "temp"
            unknown call_tmp[648478] "expr temp" "maybe param" "maybe type" "temp"
            (648481 'move' call_tmp[648478](114193 call left _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648483] "expr temp" "maybe param" "maybe type" "temp"
            (648486 'move' call_tmp[648483](114202 '_wide_get_locale' call_tmp[648478]))
            (114207 'move' tmp[114205](114203 'deref' call_tmp[648483]))
            (935066 call on_fn[935062] tmp[114205])
            function on_fn[935062](const in arg dummy_locale_arg[935064]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (114200 call _freePrivatizedClassHelp pid[935087] original[935090])
              (935069 return _void[55])
            }
            {
            }
          }
          (114258 call _downEndCount _cobeginCount[114255] nil[44])
          (935085 return _void[55])
        }
        {
        }
        (935095 call cobegin_fn[935093] pid[114136] original[114140])
        function cobegin_fn[935093](arg pid[935100]:_any[178](?), arg original[935103]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648490] "expr temp" "maybe param" "maybe type" "temp"
          (648493 'move' call_tmp[648490](114220 call right _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648497] "expr temp" "maybe param" "maybe type" "temp"
          (648500 'move' call_tmp[648497](114223 call _instance _mt[243] call_tmp[648490]))
          unknown call_tmp[648502] "expr temp" "maybe param" "maybe type" "temp"
          (648505 'move' call_tmp[648502](114227 call != call_tmp[648497] nil[44]))
          unknown call_tmp[648507] "expr temp" "maybe param" "maybe type" "temp"
          (648510 'move' call_tmp[648507](114250 call _cond_test call_tmp[648502]))
          if call_tmp[648507]
          {
            const tmp[114242] "const" "temp"
            unknown call_tmp[648514] "expr temp" "maybe param" "maybe type" "temp"
            (648517 'move' call_tmp[648514](114230 call right _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648519] "expr temp" "maybe param" "maybe type" "temp"
            (648522 'move' call_tmp[648519](114239 '_wide_get_locale' call_tmp[648514]))
            (114244 'move' tmp[114242](114240 'deref' call_tmp[648519]))
            (935075 call on_fn[935071] tmp[114242])
            function on_fn[935071](const in arg dummy_locale_arg[935073]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (114237 call _freePrivatizedClassHelp pid[935100] original[935103])
              (935078 return _void[55])
            }
            {
            }
          }
          (114264 call _downEndCount _cobeginCount[114255] nil[44])
          (935098 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114279 call _endCountFree _cobeginCount[114255])
          }
        }
        (114284 call _waitEndCount _cobeginCount[114255] 1 2)
      }
      (515746 return _void[55])
    }
    label _end__freePrivatizedClass[515748]
    (515750 return _void[55])
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[114298](arg value[114296]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648526] "maybe param" "maybe type" "temp"
    (648529 'move' call_tmp[648526](114301 call pid _mt[243] value[114296]))
    const pid[114304] "dead at end of block" "const" "insert auto destroy"
    (542674 'init var' pid[114304] call_tmp[648526])
    (114307 'end of statement')
    unknown call_tmp[648531] "expr temp" "maybe param" "maybe type" "temp"
    (648534 'move' call_tmp[648531](359084 call here[90438]))
    unknown call_tmp[648538] "maybe param" "maybe type" "temp"
    (648541 'move' call_tmp[648538](114310 call id _mt[243] call_tmp[648531]))
    const hereID[114313] "dead at end of block" "const" "insert auto destroy"
    (542676 'init var' hereID[114313] call_tmp[648538])
    (114316 'end of statement')
    unknown call_tmp[648545] "maybe param" "maybe type" "temp"
    (648548 'move' call_tmp[648545](114324 call(114320 call (partial) dsiGetReprivatizeData _mt[243] value[114296])))
    const reprivatizeData[114325] "dead at end of block" "const" "insert auto destroy"
    (542678 'init var' reprivatizeData[114325] call_tmp[648545])
    (114328 'end of statement')
    const tmp[114345] "const" "temp"
    unknown call_tmp[648550] "expr temp" "maybe param" "maybe type" "temp"
    (648553 'move' call_tmp[648550](114332 call Locales[113662] 0))
    unknown call_tmp[648555] "expr temp" "maybe param" "maybe type" "temp"
    (648558 'move' call_tmp[648555](114342 '_wide_get_locale' call_tmp[648550]))
    (114347 'move' tmp[114345](114343 'deref' call_tmp[648555]))
    (935110 call on_fn[935106] tmp[114345])
    function on_fn[935106](const in arg dummy_locale_arg[935108]:chpl_localeID_t[209352]) : void[4] "on"
    {
      (114340 call _reprivatizeHelp value[114296] value[114296] pid[114304] hereID[114313] reprivatizeData[114325])
      (479243 'end of statement' pid[114304] hereID[114313] reprivatizeData[114325])
      (935113 return _void[55])
    }
    {
    }
    function _reprivatizeHelp[114357](arg parentValue[114355]:_any[178](?), arg originalValue[114359]:_any[178](?), arg pid[114361]:_any[178](?), arg hereID[114363]:_any[178](?), arg reprivatizeData[114365]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[114368] "dead at end of block" "insert auto destroy"
      (542680 'init var' newValue[114368] originalValue[114359])
      (114371 'end of statement')
      unknown call_tmp[648560] "expr temp" "maybe param" "maybe type" "temp"
      (648563 'move' call_tmp[648560](359087 call here[90438]))
      unknown call_tmp[648567] "expr temp" "maybe param" "maybe type" "temp"
      (648570 'move' call_tmp[648567](114375 call id _mt[243] call_tmp[648560]))
      unknown call_tmp[648572] "expr temp" "maybe param" "maybe type" "temp"
      (648575 'move' call_tmp[648572](114378 call != hereID[114363] call_tmp[648567]))
      unknown call_tmp[648577] "expr temp" "maybe param" "maybe type" "temp"
      (648580 'move' call_tmp[648577](114402 call _cond_test call_tmp[648572]))
      if call_tmp[648577]
      {
        unknown call_tmp[648582] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (648585 'move' call_tmp[648582](114383 'typeof' newValue[114368]))
        unknown call_tmp[648587] "expr temp" "maybe param" "maybe type" "temp"
        (648590 'move' call_tmp[648587](114386 call chpl_getPrivatizedCopy call_tmp[648582] pid[114361]))
        (114387 call = newValue[114368] call_tmp[648587])
        (479247 'end of statement' newValue[114368] newValue[114368])
        (114400 call(114394 call (partial) dsiReprivatize _mt[243] newValue[114368]) parentValue[114355] reprivatizeData[114365])
        (479250 'end of statement' newValue[114368])
      }
      {
        const _cobeginCount[114485] "const" "end count" "temp"
        (114506 'move' _cobeginCount[114485](114503 call _endCountAlloc 1))
        (114498 call _upEndCount _cobeginCount[114485] 1 2)
        (479252 'end of statement')
        (935135 call cobegin_fn[935133] originalValue[114359] newValue[114368] pid[114361] hereID[114363] reprivatizeData[114365])
        function cobegin_fn[935133](arg originalValue[935140]:_any[178](?), arg newValue[935143], arg pid[935146]:_any[178](?), arg hereID[935149]:_any[178](?), arg reprivatizeData[935152]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648596] "expr temp" "maybe param" "maybe type" "temp"
          (648599 'move' call_tmp[648596](114407 call left _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648603] "expr temp" "maybe param" "maybe type" "temp"
          (648606 'move' call_tmp[648603](114410 call _instance _mt[243] call_tmp[648596]))
          unknown call_tmp[648608] "expr temp" "maybe param" "maybe type" "temp"
          (648611 'move' call_tmp[648608](114414 call != call_tmp[648603] nil[44]))
          unknown call_tmp[648613] "expr temp" "maybe param" "maybe type" "temp"
          (648616 'move' call_tmp[648613](114440 call _cond_test call_tmp[648608]))
          if call_tmp[648613]
          {
            const tmp[114432] "const" "temp"
            unknown call_tmp[648620] "expr temp" "maybe param" "maybe type" "temp"
            (648623 'move' call_tmp[648620](114417 call left _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648625] "expr temp" "maybe param" "maybe type" "temp"
            (648628 'move' call_tmp[648625](114429 '_wide_get_locale' call_tmp[648620]))
            (114434 'move' tmp[114432](114430 'deref' call_tmp[648625]))
            (935119 call on_fn[935115] tmp[114432])
            function on_fn[935115](const in arg dummy_locale_arg[935117]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (114427 call _reprivatizeHelp newValue[935143] originalValue[935140] pid[935146] hereID[935149] reprivatizeData[935152])
              (479253 'end of statement' newValue[935143])
              (935122 return _void[55])
            }
            {
            }
          }
          (114488 call _downEndCount _cobeginCount[114485] nil[44])
          (935138 return _void[55])
        }
        {
        }
        (935157 call cobegin_fn[935155] originalValue[114359] newValue[114368] pid[114361] hereID[114363] reprivatizeData[114365])
        function cobegin_fn[935155](arg originalValue[935162]:_any[178](?), arg newValue[935165], arg pid[935168]:_any[178](?), arg hereID[935171]:_any[178](?), arg reprivatizeData[935174]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648632] "expr temp" "maybe param" "maybe type" "temp"
          (648635 'move' call_tmp[648632](114447 call right _mt[243] chpl_localeTree[155232]))
          unknown call_tmp[648639] "expr temp" "maybe param" "maybe type" "temp"
          (648642 'move' call_tmp[648639](114450 call _instance _mt[243] call_tmp[648632]))
          unknown call_tmp[648644] "expr temp" "maybe param" "maybe type" "temp"
          (648647 'move' call_tmp[648644](114454 call != call_tmp[648639] nil[44]))
          unknown call_tmp[648649] "expr temp" "maybe param" "maybe type" "temp"
          (648652 'move' call_tmp[648649](114480 call _cond_test call_tmp[648644]))
          if call_tmp[648649]
          {
            const tmp[114472] "const" "temp"
            unknown call_tmp[648656] "expr temp" "maybe param" "maybe type" "temp"
            (648659 'move' call_tmp[648656](114457 call right _mt[243] chpl_localeTree[155232]))
            unknown call_tmp[648661] "expr temp" "maybe param" "maybe type" "temp"
            (648664 'move' call_tmp[648661](114469 '_wide_get_locale' call_tmp[648656]))
            (114474 'move' tmp[114472](114470 'deref' call_tmp[648661]))
            (935128 call on_fn[935124] tmp[114472])
            function on_fn[935124](const in arg dummy_locale_arg[935126]:chpl_localeID_t[209352]) : void[4] "on"
            {
              (114467 call _reprivatizeHelp newValue[935165] originalValue[935162] pid[935168] hereID[935171] reprivatizeData[935174])
              (479256 'end of statement' newValue[935165])
              (935131 return _void[55])
            }
            {
            }
          }
          (114494 call _downEndCount _cobeginCount[114485] nil[44])
          (935160 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114509 call _endCountFree _cobeginCount[114485])
          }
        }
        (114514 call _waitEndCount _cobeginCount[114485] 1 2)
      }
      (515754 return _void[55])
    }
    (515756 return _void[55])
  }
  function _makeIndexTuple[114527](param arg rank[114525]:_any[178](?), arg t[114530]:_tuple[56202](?), param arg expand[114535]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515760] "RVV" "temp"
    (515765 'move' ret[515760](515764 'deref' t[114530]))
    (515762 return ret[515760])
  }
  where {
    unknown call_tmp[648668] "expr temp" "maybe param" "maybe type" "temp"
    (648671 'move' call_tmp[648668](114541 call size _mt[243] t[114530]))
    (114544 call == rank[114525] call_tmp[648668])
  }
  function _makeIndexTuple[114557](param arg rank[114555]:_any[178](?), arg t[114560]:_tuple[56202](?), param arg expand[114565]:bool[10] =
  0) : _unknown[51] "no return value for void"
  {
    (114595 call compilerError "index rank must match domain rank")
    (515767 return _void[55])
  }
  where {
    unknown call_tmp[648675] "expr temp" "maybe param" "maybe type" "temp"
    (648678 'move' call_tmp[648675](114571 call size _mt[243] t[114560]))
    (114574 call != rank[114555] call_tmp[648675])
  }
  function _makeIndexTuple[114605](param arg rank[114603]:_any[178](?), arg val[114608]:integral[199](?), param arg expand[114613]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515771] "RVV" "temp"
    unknown tmp[424171] "maybe param" "temp"
    (424182 'move' tmp[424171] expand[114613])
    unknown call_tmp[648680] "expr temp" "maybe param" "maybe type" "temp"
    (648683 'move' call_tmp[648680](424184 call _cond_invalid tmp[424171]))
    if call_tmp[648680]
    {
      (424187 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564282] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564283] "maybe param" "temp"
    unknown call_tmp[648685] "expr temp" "maybe param" "maybe type" "temp"
    (648688 'move' call_tmp[648685](424172 call isTrue tmp[424171]))
    (564288 'move' tmp[564283](564286 call _cond_test call_tmp[648685]))
    if tmp[564283]
    {
      (564293 'move' tmp[564282](564290 '_paramFoldLogical' tmp[564283] 1))
    }
    {
      unknown tmp[564295] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[648690] "expr temp" "maybe param" "maybe type" "temp"
      (648693 'move' call_tmp[648690](114620 call == rank[114603] 1))
      (564297 'move' tmp[564295](424176 call isTrue call_tmp[648690]))
      (564302 'move' tmp[564282](564299 '_paramFoldLogical' tmp[564283] tmp[564295]))
    }
    unknown call_tmp[648695] "expr temp" "maybe param" "maybe type" "temp"
    (648698 'move' call_tmp[648695](114707 call _cond_test tmp[564282]))
    if call_tmp[648695]
    {
      unknown t[114629] "dead at end of block" "insert auto destroy"
      unknown call_tmp[648700] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648703 'move' call_tmp[648700](114626 'typeof' val[114608]))
      unknown call_tmp[648705] "expr temp" "maybe param" "maybe type" "temp"
      (648708 'move' call_tmp[648705](114627 call * rank[114603] call_tmp[648700]))
      (542682 'default init var' t[114629] call_tmp[648705])
      (114632 'end of statement')
      {
        unknown i[114649] "dead at end of block" "insert auto destroy"
        (542684 'init var' i[114649] 0)
        (479264 'end of statement')
        unknown tmp[114650] "maybe param" "temp"
        unknown call_tmp[648710] "expr temp" "maybe param" "maybe type" "temp"
        (648713 'move' call_tmp[648710](114637 call - rank[114603] 1))
        (114662 'move' tmp[114650](114660 call chpl_compute_low_param_loop_bound 0 call_tmp[648710]))
        unknown tmp[114651] "maybe param" "temp"
        unknown call_tmp[648715] "expr temp" "maybe param" "maybe type" "temp"
        (648718 'move' call_tmp[648715](114667 call - rank[114603] 1))
        (114672 'move' tmp[114651](114670 call chpl_compute_high_param_loop_bound 0 call_tmp[648715]))
        unknown tmp[114652] "maybe param" "temp"
        (114675 'move' tmp[114652] 1)
        ParamForLoop[114677]
        { i[114649] tmp[114650] tmp[114651] tmp[114652]
          unknown call_tmp[648720] "expr temp" "maybe param" "maybe type" "temp"
          (648723 'move' call_tmp[648720](114644 call t[114629] i[114649]))
          (114646 call = call_tmp[648720] val[114608])
          (479265 'end of statement' t[114629] i[114649])
        }
        label _unused_continueLabel[114654]
        label _breakLabel[114653]
      }
      (515776 'move' ret[515771](515775 'deref' t[114629]))
      gotoReturn _end__makeIndexTuple[515769] _end__makeIndexTuple[515769]
      (479268 'end of statement' t[114629])
    }
    {
      unknown call_tmp[648725] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648728 'move' call_tmp[648725](114691 'typeof' val[114608]))
      unknown call_tmp[648730] "expr temp" "maybe param" "maybe type" "temp"
      (648733 'move' call_tmp[648730](114693 call _cast string[26] call_tmp[648725]))
      (114696 call compilerWarning call_tmp[648730])
      (479270 'end of statement')
      (114702 call compilerError "index rank must match domain rank")
      (479271 'end of statement')
      (515781 'move' ret[515771](515780 'deref' val[114608]))
      gotoReturn _end__makeIndexTuple[515769] _end__makeIndexTuple[515769]
    }
    label _end__makeIndexTuple[515769]
    (515773 return ret[515771])
  }
  function _newArray[114718](arg value[114716]:_any[178](?)) : _unknown[51] "no copy return"
  {
    unknown ret[515787] "RVV" "temp"
    unknown call_tmp[648735] "expr temp" "maybe param" "maybe type" "temp"
    (648738 'move' call_tmp[648735](114723 call _isPrivatized value[114716]))
    unknown call_tmp[648740] "expr temp" "maybe param" "maybe type" "temp"
    (648743 'move' call_tmp[648740](114743 call _cond_test call_tmp[648735]))
    if call_tmp[648740]
    {
      unknown call_tmp[648745] "expr temp" "maybe param" "maybe type" "temp"
      (648748 'move' call_tmp[648745](114729 call _newPrivatizedClass value[114716]))
      unknown call_tmp[648750] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648753 'move' call_tmp[648750](747914 'new' _array[133594](?) call_tmp[648745] value[114716]))
      (515792 'move' ret[515787](515791 'deref' call_tmp[648750]))
      gotoReturn _end__newArray[515785] _end__newArray[515785]
    }
    {
      unknown call_tmp[648755] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648758 'move' call_tmp[648755](747915 'new' _array[133594](?) nullPid[113718] value[114716]))
      (515797 'move' ret[515787](515796 'deref' call_tmp[648755]))
      gotoReturn _end__newArray[515785] _end__newArray[515785]
    }
    label _end__newArray[515785]
    (515789 return ret[515787])
  }
  function _getDomain[114756](arg value[114754]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515803] "RVV" "temp"
    unknown call_tmp[648760] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648763 'move' call_tmp[648760](114760 'typeof' value[114754]))
    unknown call_tmp[648765] "expr temp" "maybe param" "maybe type" "temp"
    (648768 'move' call_tmp[648765](114762 call _to_unmanaged call_tmp[648760]))
    unknown call_tmp[648770] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648773 'move' call_tmp[648770](114764 'typeof' value[114754]))
    unknown call_tmp[648775] "expr temp" "maybe param" "maybe type" "temp"
    (648778 'move' call_tmp[648775](114765 call != call_tmp[648765] call_tmp[648770]))
    unknown call_tmp[648780] "expr temp" "maybe param" "maybe type" "temp"
    (648783 'move' call_tmp[648780](114788 call _cond_test call_tmp[648775]))
    if call_tmp[648780]
    {
      (114786 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[648785] "expr temp" "maybe param" "maybe type" "temp"
    (648788 'move' call_tmp[648785](114797 call _isPrivatized value[114754]))
    unknown call_tmp[648790] "expr temp" "maybe param" "maybe type" "temp"
    (648793 'move' call_tmp[648790](114821 call _cond_test call_tmp[648785]))
    if call_tmp[648790]
    {
      unknown call_tmp[648797] "expr temp" "maybe param" "maybe type" "temp"
      (648800 'move' call_tmp[648797](114801 call pid _mt[243] value[114754]))
      unknown call_tmp[648802] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648805 'move' call_tmp[648802](747916 'new' _domain[125908](?) call_tmp[648797] value[114754](_unowned = 1)))
      (515808 'move' ret[515803](515807 'deref' call_tmp[648802]))
      gotoReturn _end__getDomain[515801] _end__getDomain[515801]
    }
    {
      unknown call_tmp[648807] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648810 'move' call_tmp[648807](747917 'new' _domain[125908](?) nullPid[113718] value[114754](_unowned = 1)))
      (515813 'move' ret[515803](515812 'deref' call_tmp[648807]))
      gotoReturn _end__getDomain[515801] _end__getDomain[515801]
    }
    label _end__getDomain[515801]
    (515805 return ret[515803])
  }
  function _getDistribution[114833](arg value[114831]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515819] "RVV" "temp"
    unknown call_tmp[648812] "expr temp" "maybe param" "maybe type" "temp"
    (648815 'move' call_tmp[648812](114838 call _isPrivatized value[114831]))
    unknown call_tmp[648817] "expr temp" "maybe param" "maybe type" "temp"
    (648820 'move' call_tmp[648817](114862 call _cond_test call_tmp[648812]))
    if call_tmp[648817]
    {
      unknown call_tmp[648824] "expr temp" "maybe param" "maybe type" "temp"
      (648827 'move' call_tmp[648824](114842 call pid _mt[243] value[114831]))
      unknown call_tmp[648829] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648832 'move' call_tmp[648829](747918 'new' _distribution[118973](?) call_tmp[648824] value[114831](_unowned = 1)))
      (515824 'move' ret[515819](515823 'deref' call_tmp[648829]))
      gotoReturn _end__getDistribution[515817] _end__getDistribution[515817]
    }
    {
      unknown call_tmp[648834] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648837 'move' call_tmp[648834](747919 'new' _distribution[118973](?) nullPid[113718] value[114831](_unowned = 1)))
      (515829 'move' ret[515819](515828 'deref' call_tmp[648834]))
      gotoReturn _end__getDistribution[515817] _end__getDistribution[515817]
    }
    label _end__getDistribution[515817]
    (515821 return ret[515819])
  }
  function chpl__buildDomainRuntimeType[114877](arg dist[114874]:_distribution[118973](?), param arg rank[114880]:int(64)[13], arg idxType[114884]:_any[178](?) =
  int(64)[13], param arg stridable[114889]:bool[10] =
  0) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515835] "RVV" "temp" "type variable"
    unknown call_tmp[648839] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648842 'move' call_tmp[648839](747920 'new' _domain[125908](?) dist[114874] rank[114880] idxType[114884] stridable[114889]))
    (515840 'move' ret[515835](515839 'deref' call_tmp[648839]))
    (515837 return ret[515835])
  }
  function chpl__buildDomainRuntimeType[114912](arg dist[114909]:_distribution[118973](?), arg idxType[114914]:_any[178](?), param arg parSafe[114918]:bool[10] =
  1) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515844] "RVV" "temp" "type variable"
    unknown call_tmp[648844] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648847 'move' call_tmp[648844](747921 'new' _domain[125908](?) dist[114909] idxType[114914] parSafe[114918]))
    (515849 'move' ret[515844](515848 'deref' call_tmp[648844]))
    (515846 return ret[515844])
  }
  function chpl__buildSparseDomainRuntimeType[114940](arg dist[114937]:_distribution[118973](?), arg parentDom[114943]:_domain[125908](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515853] "RVV" "temp" "type variable"
    unknown call_tmp[648849] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648852 'move' call_tmp[648849](747922 'new' _domain[125908](?) dist[114937] parentDom[114943]))
    (515858 'move' ret[515853](515857 'deref' call_tmp[648849]))
    (515855 return ret[515853])
  }
  function chpl__convertRuntimeTypeToValue[114963](arg dist[114960]:_distribution[118973](?), param arg rank[114966]:int(64)[13], arg idxType[114970]:_any[178](?) =
  int(64)[13], param arg stridable[114974]:bool[10], param arg isNoInit[114978]:bool[10]) : _unknown[51]
  {
    unknown ret[515862] "RVV" "temp"
    unknown call_tmp[648854] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648857 'move' call_tmp[648854](747923 'new' _domain[125908](?) dist[114960] rank[114966] idxType[114970] stridable[114974]))
    (515867 'move' ret[515862](515866 'deref' call_tmp[648854]))
    (515864 return ret[515862])
  }
  function chpl__convertRuntimeTypeToValue[115000](arg dist[114997]:_distribution[118973](?), arg idxType[115002]:_any[178](?), param arg parSafe[115005]:bool[10], param arg isNoInit[115009]:bool[10]) : _unknown[51]
  {
    unknown ret[515871] "RVV" "temp"
    unknown call_tmp[648859] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648862 'move' call_tmp[648859](747924 'new' _domain[125908](?) dist[114997] idxType[115002] parSafe[115005]))
    (515876 'move' ret[515871](515875 'deref' call_tmp[648859]))
    (515873 return ret[515871])
  }
  function chpl__convertRuntimeTypeToValue[115030](arg dist[115027]:_distribution[118973](?), arg parentDom[115033]:_domain[125908](?), param arg isNoInit[115037]:bool[10]) : _unknown[51]
  {
    unknown ret[515880] "RVV" "temp"
    unknown call_tmp[648864] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648867 'move' call_tmp[648864](747925 'new' _domain[125908](?) dist[115027] parentDom[115033]))
    (515885 'move' ret[515880](515884 'deref' call_tmp[648864]))
    (515882 return ret[515880])
  }
  function chpl__convertValueToRuntimeType[115057](arg dom[115054]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515889] "RVV" "temp" "type variable"
    unknown call_tmp[648871] "expr temp" "maybe param" "maybe type" "temp"
    (648874 'move' call_tmp[648871](115070 call dist _mt[243] dom[115054]))
    unknown call_tmp[648878] "expr temp" "maybe param" "maybe type" "temp"
    (648881 'move' call_tmp[648878](115075 call _value _mt[243] dom[115054]))
    unknown call_tmp[648885] "expr temp" "maybe param" "maybe type" "temp"
    (648888 'move' call_tmp[648885](115078 call rank _mt[243] call_tmp[648878]))
    unknown call_tmp[648892] "expr temp" "maybe param" "maybe type" "temp"
    (648895 'move' call_tmp[648892](115082 call _value _mt[243] dom[115054]))
    unknown call_tmp[648899] "expr temp" "maybe param" "maybe type" "temp"
    (648902 'move' call_tmp[648899](115085 call idxType _mt[243] call_tmp[648892]))
    unknown call_tmp[648906] "expr temp" "maybe param" "maybe type" "temp"
    (648909 'move' call_tmp[648906](115089 call _value _mt[243] dom[115054]))
    unknown call_tmp[648913] "expr temp" "maybe param" "maybe type" "temp"
    (648916 'move' call_tmp[648913](115092 call stridable _mt[243] call_tmp[648906]))
    unknown call_tmp[648918] "expr temp" "maybe param" "maybe type" "temp"
    (648921 'move' call_tmp[648918](115095 call chpl__buildDomainRuntimeType call_tmp[648871] call_tmp[648885] call_tmp[648899] call_tmp[648913]))
    (515894 'move' ret[515889](515893 'deref' call_tmp[648918]))
    (515891 return ret[515889])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492089] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648925] "expr temp" "maybe param" "maybe type" "temp"
      (648928 'move' call_tmp[648925](115061 call _value _mt[243] dom[115054]))
      (492093 'move' call_type_tmp[492089](115064 'typeof' call_tmp[648925]))
    }
    (354327 'is_subtype' BaseRectangularDom[382286](?) call_type_tmp[492089])
  }
  function chpl__convertValueToRuntimeType[115108](arg dom[115105]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515898] "RVV" "temp" "type variable"
    unknown call_tmp[648932] "expr temp" "maybe param" "maybe type" "temp"
    (648935 'move' call_tmp[648932](115121 call dist _mt[243] dom[115105]))
    unknown call_tmp[648939] "expr temp" "maybe param" "maybe type" "temp"
    (648942 'move' call_tmp[648939](115126 call _value _mt[243] dom[115105]))
    unknown call_tmp[648946] "expr temp" "maybe param" "maybe type" "temp"
    (648949 'move' call_tmp[648946](115129 call idxType _mt[243] call_tmp[648939]))
    unknown call_tmp[648953] "expr temp" "maybe param" "maybe type" "temp"
    (648956 'move' call_tmp[648953](115133 call _value _mt[243] dom[115105]))
    unknown call_tmp[648960] "expr temp" "maybe param" "maybe type" "temp"
    (648963 'move' call_tmp[648960](115138 call parSafe _mt[243] call_tmp[648953]))
    unknown call_tmp[648965] "expr temp" "maybe param" "maybe type" "temp"
    (648968 'move' call_tmp[648965](115141 call chpl__buildDomainRuntimeType call_tmp[648932] call_tmp[648946] call_tmp[648960]))
    (515903 'move' ret[515898](515902 'deref' call_tmp[648965]))
    (515900 return ret[515898])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492095] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648972] "expr temp" "maybe param" "maybe type" "temp"
      (648975 'move' call_tmp[648972](115112 call _value _mt[243] dom[115105]))
      (492099 'move' call_type_tmp[492095](115115 'typeof' call_tmp[648972]))
    }
    (354328 'is_subtype' BaseAssociativeDom[382291](?) call_type_tmp[492095])
  }
  function chpl__convertValueToRuntimeType[115154](arg dom[115151]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515907] "RVV" "temp" "type variable"
    unknown call_tmp[648979] "expr temp" "maybe param" "maybe type" "temp"
    (648982 'move' call_tmp[648979](115167 call dist _mt[243] dom[115151]))
    unknown call_tmp[648986] "expr temp" "maybe param" "maybe type" "temp"
    (648989 'move' call_tmp[648986](115172 call _value _mt[243] dom[115151]))
    unknown call_tmp[648993] "expr temp" "maybe param" "maybe type" "temp"
    (648996 'move' call_tmp[648993](115177 call parentDom _mt[243] call_tmp[648986]))
    unknown call_tmp[648998] "expr temp" "maybe param" "maybe type" "temp"
    (649001 'move' call_tmp[648998](115180 call chpl__buildSparseDomainRuntimeType call_tmp[648979] call_tmp[648993]))
    (515912 'move' ret[515907](515911 'deref' call_tmp[648998]))
    (515909 return ret[515907])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492101] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649005] "expr temp" "maybe param" "maybe type" "temp"
      (649008 'move' call_tmp[649005](115158 call _value _mt[243] dom[115151]))
      (492105 'move' call_type_tmp[492101](115161 'typeof' call_tmp[649005]))
    }
    (354329 'is_subtype' BaseSparseDom[382296](?) call_type_tmp[492101])
  }
  function chpl__convertValueToRuntimeType[115193](arg dom[115190]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515916] "RVV" "temp" "type variable"
    (115217 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, or Bas 0)
    (479289 'end of statement')
    (515921 'move' ret[515916](515920 'deref' 0))
    (515918 return ret[515916])
  }
  function chpl__buildArrayRuntimeType[115231](arg dom[115228]:_domain[125908](?), arg eltType[115233]:_any[178](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515925] "RVV" "temp" "type variable"
    unknown call_tmp[649012] "expr temp" "maybe param" "maybe type" "temp"
    (649015 'move' call_tmp[649012](115244 call(115238 call (partial) buildArray _mt[243] dom[115228]) eltType[115233] 1))
    (515930 'move' ret[515925](515929 'deref' call_tmp[649012]))
    (515927 return ret[515925])
  }
  function chpl__convertRuntimeTypeToValue[115256](arg dom[115253]:_domain[125908](?), arg eltType[115258]:_any[178](?), param arg isNoInit[115261]:bool[10]) : _unknown[51]
  {
    unknown ret[515934] "RVV" "temp"
    unknown call_tmp[649019] "expr temp" "maybe param" "maybe type" "temp"
    (649022 'move' call_tmp[649019](115271 call ! isNoInit[115261]))
    unknown call_tmp[649024] "expr temp" "maybe param" "maybe type" "temp"
    (649027 'move' call_tmp[649024](115273 call(115265 call (partial) buildArray _mt[243] dom[115253]) eltType[115258] call_tmp[649019]))
    (515939 'move' ret[515934](515938 'deref' call_tmp[649024]))
    (515936 return ret[515934])
  }
  function chpl__convertValueToRuntimeType[115287](arg arr[115284]:_array[133594](?)) type : _unknown[51]
  {
    unknown ret[515943] "RVV" "temp" "type variable"
    unknown call_tmp[649031] "expr temp" "maybe param" "maybe type" "temp"
    (649034 'move' call_tmp[649031](115291 call _dom _mt[243] arr[115284]))
    unknown call_tmp[649038] "expr temp" "maybe param" "maybe type" "temp"
    (649041 'move' call_tmp[649038](115296 call eltType _mt[243] arr[115284]))
    unknown call_tmp[649043] "expr temp" "maybe param" "maybe type" "temp"
    (649046 'move' call_tmp[649043](115299 call chpl__buildArrayRuntimeType call_tmp[649031] call_tmp[649038]))
    (515948 'move' ret[515943](515947 'deref' call_tmp[649043]))
    (515945 return ret[515943])
  }
  function _getLiteralType[115309](arg t[115307]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[515952] "RVV" "temp" "type variable"
    unknown call_tmp[649048] "expr temp" "maybe param" "maybe type" "temp"
    (649051 'move' call_tmp[649048](115313 call != t[115307] c_string[19]))
    unknown call_tmp[649053] "expr temp" "maybe param" "maybe type" "temp"
    (649056 'move' call_tmp[649053](115321 call _cond_test call_tmp[649048]))
    if call_tmp[649053]
    {
      (515957 'move' ret[515952](515956 'deref' t[115307]))
      gotoReturn _end__getLiteralType[515950] _end__getLiteralType[515950]
    }
    {
      (515962 'move' ret[515952](515961 'deref' string[26]))
      gotoReturn _end__getLiteralType[515950] _end__getLiteralType[515950]
    }
    label _end__getLiteralType[515950]
    (515954 return ret[515952])
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[115331] "config" "no doc" "param"
  unknown arrayLiteralLowBound[115336] "config" "no doc" "param"
  unknown capturedIteratorLowBound[115341] "config" "no doc" "param"
  function chpl__buildArrayExpr[115352](arg elems[115349]:_any[178](?) ...) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[515968] "RVV" "temp"
    unknown tmp[424192] "maybe param" "temp"
    (424203 'move' tmp[424192](115356 call == CHPL_WARN_DOMAIN_LITERAL[115331] "true"))
    unknown call_tmp[649058] "expr temp" "maybe param" "maybe type" "temp"
    (649061 'move' call_tmp[649058](424205 call _cond_invalid tmp[424192]))
    if call_tmp[649058]
    {
      (424208 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564309] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564310] "maybe param" "temp"
    unknown call_tmp[649063] "expr temp" "maybe param" "maybe type" "temp"
    (649066 'move' call_tmp[649063](424193 call isTrue tmp[424192]))
    (564315 'move' tmp[564310](564313 call _cond_test call_tmp[649063]))
    if tmp[564310]
    {
      unknown tmp[564317] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[649068] "expr temp" "maybe param" "maybe type" "temp"
      (649071 'move' call_tmp[649068](115362 call elems[115349] 0))
      unknown call_tmp[649073] "expr temp" "maybe param" "maybe type" "temp"
      (649076 'move' call_tmp[649073](115364 call isRange call_tmp[649068]))
      (564319 'move' tmp[564317](424196 call isTrue call_tmp[649073]))
      (564324 'move' tmp[564309](564321 '_paramFoldLogical' tmp[564310] tmp[564317]))
    }
    {
      (564329 'move' tmp[564309](564326 '_paramFoldLogical' tmp[564310] 0))
    }
    unknown call_tmp[649078] "expr temp" "maybe param" "maybe type" "temp"
    (649081 'move' call_tmp[649078](115423 call _cond_test tmp[564309]))
    if call_tmp[649078]
    {
      (115420 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    { scopeless type
      unknown call_type_tmp[492107] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649083] "expr temp" "maybe param" "maybe type" "temp"
      (649086 'move' call_tmp[649083](115432 call elems[115349] 0))
      (492111 'move' call_type_tmp[492107](115433 'typeof' call_tmp[649083]))
    }
    unknown elemType[115436] "dead at end of block" "insert auto destroy" "type variable"(115435 call _getLiteralType call_type_tmp[492107])
    (542695 'move' elemType[115436](542693 call _getLiteralType call_type_tmp[492107]))
    unknown A[115451] "dead at end of block" "insert auto destroy" "unsafe"
    unknown call_tmp[649088] "expr temp" "maybe param" "maybe type" "temp"
    (649091 'move' call_tmp[649088](115440 call chpl_build_low_bounded_range arrayLiteralLowBound[115336]))
    unknown call_tmp[649093] "expr temp" "maybe param" "maybe type" "temp"
    (649096 'move' call_tmp[649093](115443 call # call_tmp[649088] k[115347]))
    unknown call_tmp[649098] "expr temp" "maybe param" "maybe type" "temp"
    (649101 'move' call_tmp[649098](115447 call chpl__ensureDomainExpr call_tmp[649093]))
    unknown call_tmp[649103] "expr temp" "maybe param" "maybe type" "temp"
    (649106 'move' call_tmp[649103](115449 call chpl__buildArrayRuntimeType call_tmp[649098] elemType[115436]))
    (542697 'default init var' A[115451] call_tmp[649103])
    (115454 'end of statement' elemType[115436])
    {
      unknown i[115574] "dead at end of block" "insert auto destroy"
      (542699 'init var' i[115574] 0)
      (479299 'end of statement')
      unknown tmp[115575] "maybe param" "temp"
      unknown call_tmp[649108] "expr temp" "maybe param" "maybe type" "temp"
      (649111 'move' call_tmp[649108](115458 call - k[115347] 1))
      (115587 'move' tmp[115575](115585 call chpl_compute_low_param_loop_bound 0 call_tmp[649108]))
      unknown tmp[115576] "maybe param" "temp"
      unknown call_tmp[649113] "expr temp" "maybe param" "maybe type" "temp"
      (649116 'move' call_tmp[649113](115592 call - k[115347] 1))
      (115597 'move' tmp[115576](115595 call chpl_compute_high_param_loop_bound 0 call_tmp[649113]))
      unknown tmp[115577] "maybe param" "temp"
      (115600 'move' tmp[115577] 1)
      ParamForLoop[115602]
      { i[115574] tmp[115575] tmp[115576] tmp[115577]
        {
          { scopeless type
            unknown call_type_tmp[492113] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649118] "expr temp" "maybe param" "maybe type" "temp"
            (649121 'move' call_tmp[649118](115466 call elems[115349] i[115574]))
            (492117 'move' call_type_tmp[492113](115467 'typeof' call_tmp[649118]))
          }
          unknown currType[115470] "dead at end of block" "insert auto destroy" "type variable"(115469 call _getLiteralType call_type_tmp[492113])
          (542704 'move' currType[115470](542702 call _getLiteralType call_type_tmp[492113]))
          (479300 'end of statement' i[115574])
          unknown call_tmp[649123] "expr temp" "maybe param" "maybe type" "temp"
          (649126 'move' call_tmp[649123](115476 call != currType[115470] elemType[115436]))
          unknown call_tmp[649128] "expr temp" "maybe param" "maybe type" "temp"
          (649131 'move' call_tmp[649128](115556 call _cond_test call_tmp[649123]))
          if call_tmp[649128]
          {
            unknown call_tmp[649133] "expr temp" "maybe param" "maybe type" "temp"
            (649136 'move' call_tmp[649133](115498 call _cast string[26] i[115574]))
            unknown call_tmp[649138] "expr temp" "maybe param" "maybe type" "temp"
            (649141 'move' call_tmp[649138](115500 call + "Array literal element " call_tmp[649133]))
            unknown call_tmp[649143] "expr temp" "maybe param" "maybe type" "temp"
            (649146 'move' call_tmp[649143](115519 call + call_tmp[649138] " expected to be of type "))
            unknown call_tmp[649148] "expr temp" "maybe param" "maybe type" "temp"
            (649151 'move' call_tmp[649148](115523 call _cast string[26] elemType[115436]))
            unknown call_tmp[649153] "expr temp" "maybe param" "maybe type" "temp"
            (649156 'move' call_tmp[649153](115525 call + call_tmp[649143] call_tmp[649148]))
            unknown call_tmp[649158] "expr temp" "maybe param" "maybe type" "temp"
            (649161 'move' call_tmp[649158](115544 call + call_tmp[649153] " but is of type "))
            unknown call_tmp[649163] "expr temp" "maybe param" "maybe type" "temp"
            (649166 'move' call_tmp[649163](115548 call _cast string[26] currType[115470]))
            unknown call_tmp[649168] "expr temp" "maybe param" "maybe type" "temp"
            (649171 'move' call_tmp[649168](115550 call + call_tmp[649158] call_tmp[649163]))
            (115553 call compilerError call_tmp[649168])
            (479302 'end of statement' i[115574] elemType[115436] currType[115470])
          }
          unknown call_tmp[649173] "expr temp" "maybe param" "maybe type" "temp"
          (649176 'move' call_tmp[649173](115563 call + i[115574] arrayLiteralLowBound[115336]))
          unknown call_tmp[649178] "expr temp" "maybe param" "maybe type" "temp"
          (649181 'move' call_tmp[649178](115566 call A[115451] call_tmp[649173]))
          unknown call_tmp[649183] "expr temp" "maybe param" "maybe type" "temp"
          (649186 'move' call_tmp[649183](115570 call elems[115349] i[115574]))
          (115571 call = call_tmp[649178] call_tmp[649183])
          (479306 'end of statement' A[115451] i[115574] i[115574])
        }
      }
      label _unused_continueLabel[115579]
      label _breakLabel[115578]
    }
    (515973 'move' ret[515968](515972 'deref' A[115451]))
    gotoReturn _end_chpl__buildArrayExpr[515966] _end_chpl__buildArrayExpr[515966]
    (479310 'end of statement' A[115451])
    label _end_chpl__buildArrayExpr[515966]
    (515970 return ret[515968])
  }
  function chpl__buildAssociativeArrayExpr[115623](arg elems[115620]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[515979] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492119] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649188] "expr temp" "maybe param" "maybe type" "temp"
      (649191 'move' call_tmp[649188](115629 call elems[115620] 0))
      (492123 'move' call_type_tmp[492119](115630 'typeof' call_tmp[649188]))
    }
    unknown keyType[115633] "dead at end of block" "insert auto destroy" "type variable"(115632 call _getLiteralType call_type_tmp[492119])
    (542709 'move' keyType[115633](542707 call _getLiteralType call_type_tmp[492119]))
    { scopeless type
      unknown call_type_tmp[492125] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649193] "expr temp" "maybe param" "maybe type" "temp"
      (649196 'move' call_tmp[649193](115641 call elems[115620] 1))
      (492129 'move' call_type_tmp[492125](115642 'typeof' call_tmp[649193]))
    }
    unknown valType[115645] "dead at end of block" "insert auto destroy" "type variable"(115644 call _getLiteralType call_type_tmp[492125])
    (542714 'move' valType[115645](542712 call _getLiteralType call_type_tmp[492125]))
    unknown D[115653] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649198] "expr temp" "maybe param" "maybe type" "temp"
    (649201 'move' call_tmp[649198](115651 call chpl__buildDomainRuntimeType defaultDist[94053] keyType[115633]))
    (542716 'default init var' D[115653] call_tmp[649198])
    (115656 'end of statement')
    unknown call_tmp[649205] "expr temp" "maybe param" "maybe type" "temp"
    (649208 'move' call_tmp[649205](115665 call / k[115618] 2))
    (115668 call(115660 call (partial) requestCapacity _mt[243] D[115653]) call_tmp[649205])
    (479313 'end of statement' D[115653])
    unknown A[115677] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649210] "expr temp" "maybe param" "maybe type" "temp"
    (649213 'move' call_tmp[649210](115673 call chpl__ensureDomainExpr D[115653]))
    unknown call_tmp[649215] "expr temp" "maybe param" "maybe type" "temp"
    (649218 'move' call_tmp[649215](115675 call chpl__buildArrayRuntimeType call_tmp[649210] valType[115645]))
    (542718 'default init var' A[115677] call_tmp[649215])
    (115680 'end of statement' keyType[115633] D[115653] valType[115645])
    {
      unknown i[115854] "dead at end of block" "insert auto destroy"
      (542720 'init var' i[115854] 0)
      (479317 'end of statement')
      unknown tmp[115855] "maybe param" "temp"
      unknown call_tmp[649220] "expr temp" "maybe param" "maybe type" "temp"
      (649223 'move' call_tmp[649220](115684 call - k[115618] 1))
      (115866 'move' tmp[115855](115864 call chpl_compute_low_param_loop_bound 0 call_tmp[649220]))
      unknown tmp[115856] "maybe param" "temp"
      unknown call_tmp[649225] "expr temp" "maybe param" "maybe type" "temp"
      (649228 'move' call_tmp[649225](115871 call - k[115618] 1))
      (115876 'move' tmp[115856](115874 call chpl_compute_high_param_loop_bound 0 call_tmp[649225]))
      unknown tmp[115857] "maybe param" "temp"
      (115879 'move' tmp[115857] 2)
      ParamForLoop[115881]
      { i[115854] tmp[115855] tmp[115856] tmp[115857]
        {
          unknown call_tmp[649230] "maybe param" "maybe type" "temp"
          (649233 'move' call_tmp[649230](115694 call elems[115620] i[115854]))
          unknown elemKey[115695] "dead at end of block" "insert auto destroy"
          (542722 'init var' elemKey[115695] call_tmp[649230])
          (115698 'end of statement')
          unknown call_tmp[649235] "expr temp" "maybe param" "maybe type" "temp"
          (649238 'move' call_tmp[649235](115703 call + i[115854] 1))
          unknown call_tmp[649240] "maybe param" "maybe type" "temp"
          (649243 'move' call_tmp[649240](115706 call elems[115620] call_tmp[649235]))
          unknown elemVal[115707] "dead at end of block" "insert auto destroy"
          (542724 'init var' elemVal[115707] call_tmp[649240])
          (115710 'end of statement' i[115854] i[115854])
          unknown call_tmp[649245] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649248 'move' call_tmp[649245](115713 'typeof' elemKey[115695]))
          unknown elemKeyType[115716] "dead at end of block" "insert auto destroy" "type variable"(115715 call _getLiteralType call_tmp[649245])
          unknown call_tmp[649250] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649253 'move' call_tmp[649250](542728 'typeof' elemKey[115695]))
          (542730 'move' elemKeyType[115716](542727 call _getLiteralType call_tmp[649250]))
          (479320 'end of statement' elemKey[115695])
          unknown call_tmp[649255] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649258 'move' call_tmp[649255](115721 'typeof' elemVal[115707]))
          unknown elemValType[115724] "dead at end of block" "insert auto destroy" "type variable"(115723 call _getLiteralType call_tmp[649255])
          unknown call_tmp[649260] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649263 'move' call_tmp[649260](542734 'typeof' elemVal[115707]))
          (542736 'move' elemValType[115724](542733 call _getLiteralType call_tmp[649260]))
          (479322 'end of statement' elemVal[115707])
          unknown call_tmp[649265] "expr temp" "maybe param" "maybe type" "temp"
          (649268 'move' call_tmp[649265](115729 call != elemKeyType[115716] keyType[115633]))
          unknown call_tmp[649270] "expr temp" "maybe param" "maybe type" "temp"
          (649273 'move' call_tmp[649270](115780 call _cond_test call_tmp[649265]))
          if call_tmp[649270]
          {
            unknown call_tmp[649275] "expr temp" "maybe param" "maybe type" "temp"
            (649278 'move' call_tmp[649275](115751 call / i[115854] 2))
            unknown call_tmp[649280] "expr temp" "maybe param" "maybe type" "temp"
            (649283 'move' call_tmp[649280](115754 call _cast string[26] call_tmp[649275]))
            unknown call_tmp[649285] "expr temp" "maybe param" "maybe type" "temp"
            (649288 'move' call_tmp[649285](115756 call + "Associative array key element " call_tmp[649280]))
            unknown call_tmp[649290] "expr temp" "maybe param" "maybe type" "temp"
            (649293 'move' call_tmp[649290](115759 call + call_tmp[649285] " expected to be of type "))
            unknown call_tmp[649295] "expr temp" "maybe param" "maybe type" "temp"
            (649298 'move' call_tmp[649295](115763 call _cast string[26] keyType[115633]))
            unknown call_tmp[649300] "expr temp" "maybe param" "maybe type" "temp"
            (649303 'move' call_tmp[649300](115765 call + call_tmp[649290] call_tmp[649295]))
            unknown call_tmp[649305] "expr temp" "maybe param" "maybe type" "temp"
            (649308 'move' call_tmp[649305](115768 call + call_tmp[649300] " but is of type "))
            unknown call_tmp[649310] "expr temp" "maybe param" "maybe type" "temp"
            (649313 'move' call_tmp[649310](115772 call _cast string[26] elemKeyType[115716]))
            unknown call_tmp[649315] "expr temp" "maybe param" "maybe type" "temp"
            (649318 'move' call_tmp[649315](115774 call + call_tmp[649305] call_tmp[649310]))
            (115777 call compilerError call_tmp[649315])
            (479324 'end of statement' i[115854] keyType[115633] elemKeyType[115716])
          }
          unknown call_tmp[649320] "expr temp" "maybe param" "maybe type" "temp"
          (649323 'move' call_tmp[649320](115786 call != elemValType[115724] valType[115645]))
          unknown call_tmp[649325] "expr temp" "maybe param" "maybe type" "temp"
          (649328 'move' call_tmp[649325](115837 call _cond_test call_tmp[649320]))
          if call_tmp[649325]
          {
            unknown call_tmp[649330] "expr temp" "maybe param" "maybe type" "temp"
            (649333 'move' call_tmp[649330](115808 call / i[115854] 2))
            unknown call_tmp[649335] "expr temp" "maybe param" "maybe type" "temp"
            (649338 'move' call_tmp[649335](115811 call _cast string[26] call_tmp[649330]))
            unknown call_tmp[649340] "expr temp" "maybe param" "maybe type" "temp"
            (649343 'move' call_tmp[649340](115813 call + "Associative array value element " call_tmp[649335]))
            unknown call_tmp[649345] "expr temp" "maybe param" "maybe type" "temp"
            (649348 'move' call_tmp[649345](115816 call + call_tmp[649340] " expected to be of type "))
            unknown call_tmp[649350] "expr temp" "maybe param" "maybe type" "temp"
            (649353 'move' call_tmp[649350](115820 call _cast string[26] valType[115645]))
            unknown call_tmp[649355] "expr temp" "maybe param" "maybe type" "temp"
            (649358 'move' call_tmp[649355](115822 call + call_tmp[649345] call_tmp[649350]))
            unknown call_tmp[649360] "expr temp" "maybe param" "maybe type" "temp"
            (649363 'move' call_tmp[649360](115825 call + call_tmp[649355] " but is of type "))
            unknown call_tmp[649365] "expr temp" "maybe param" "maybe type" "temp"
            (649368 'move' call_tmp[649365](115829 call _cast string[26] elemValType[115724]))
            unknown call_tmp[649370] "expr temp" "maybe param" "maybe type" "temp"
            (649373 'move' call_tmp[649370](115831 call + call_tmp[649360] call_tmp[649365]))
            (115834 call compilerError call_tmp[649370])
            (479328 'end of statement' i[115854] valType[115645] elemValType[115724])
          }
          (115843 call += D[115653] elemKey[115695])
          (479332 'end of statement' D[115653] elemKey[115695])
          unknown call_tmp[649375] "expr temp" "maybe param" "maybe type" "temp"
          (649378 'move' call_tmp[649375](115849 call A[115677] elemKey[115695]))
          (115851 call = call_tmp[649375] elemVal[115707])
          (479335 'end of statement' A[115677] elemKey[115695] elemVal[115707])
        }
      }
      label _unused_continueLabel[115859]
      label _breakLabel[115858]
    }
    (515984 'move' ret[515979](515983 'deref' A[115677]))
    gotoReturn _end_chpl__buildAssociativeArrayExpr[515977] _end_chpl__buildAssociativeArrayExpr[515977]
    (479339 'end of statement' A[115677])
    label _end_chpl__buildAssociativeArrayExpr[515977]
    (515981 return ret[515979])
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[115902](arg arr[115899]:unmanaged BaseArr[415496], arg eltType[115904]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649380] "expr temp" "maybe param" "maybe type" "temp"
    (649383 'move' call_tmp[649380](115909 call isArrayType eltType[115904]))
    unknown call_tmp[649385] "expr temp" "maybe param" "maybe type" "temp"
    (649388 'move' call_tmp[649385](115960 call _cond_test call_tmp[649380]))
    if call_tmp[649385]
    {
      unknown call_tmp[649392] "expr temp" "maybe param" "maybe type" "temp"
      (649395 'move' call_tmp[649392](115913 call _decEltRefCounts _mt[243] arr[115899]))
      (115917 call = call_tmp[649392] 1)
      (479341 'end of statement')
      unknown arrayEltType[115925] "dead at end of block" "insert auto destroy" "type variable"(115924 call chpl__eltTypeFromArrayRuntimeType eltType[115904])
      (542741 'move' arrayEltType[115925](542739 call chpl__eltTypeFromArrayRuntimeType eltType[115904]))
      const dom[115932] "dead at end of block" "const" "ref var"
      unknown call_tmp[649397] "expr temp" "maybe param" "maybe type" "temp"
      (649400 'move' call_tmp[649397](115931 call chpl__domainFromArrayRuntimeType eltType[115904]))
      (542744 'move' dom[115932](542743 'addr of' call_tmp[649397]))
      (115935 'end of statement')
      unknown call_tmp[649404] "maybe param" "maybe type" "temp"
      (649407 'move' call_tmp[649404](115937 call _instance _mt[243] dom[115932]))
      const dv[115940] "dead at end of block" "const" "insert auto destroy"
      (542746 'init var' dv[115940] call_tmp[649404])
      (115943 'end of statement' dom[115932])
      (115952 call(115947 call (partial) add_containing_arr _mt[243] dv[115940]) arr[115899])
      (479343 'end of statement' dv[115940])
      (115958 call chpl_incRefCountsForDomainsInArrayEltTypes arr[115899] arrayEltType[115925])
      (479345 'end of statement' arrayEltType[115925])
    }
    (515988 return _void[55])
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[115974](arg arr[115971]:unmanaged BaseArr[415496], arg eltType[115976]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649411] "expr temp" "maybe param" "maybe type" "temp"
    (649414 'move' call_tmp[649411](115981 call isArrayType eltType[115976]))
    unknown call_tmp[649416] "expr temp" "maybe param" "maybe type" "temp"
    (649419 'move' call_tmp[649416](116177 call _cond_test call_tmp[649411]))
    if call_tmp[649416]
    {
      unknown call_tmp[649423] "expr temp" "maybe param" "maybe type" "temp"
      (649426 'move' call_tmp[649423](115983 call _decEltRefCounts _mt[243] arr[115971]))
      unknown call_tmp[649428] "expr temp" "maybe param" "maybe type" "temp"
      (649431 'move' call_tmp[649428](115987 call == call_tmp[649423] 0))
      unknown call_tmp[649433] "expr temp" "maybe param" "maybe type" "temp"
      (649436 'move' call_tmp[649433](116010 call _cond_test call_tmp[649428]))
      if call_tmp[649433]
      {
        (116008 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown arrayEltType[116020] "dead at end of block" "insert auto destroy" "type variable"(116019 call chpl__eltTypeFromArrayRuntimeType eltType[115976])
      (542751 'move' arrayEltType[116020](542749 call chpl__eltTypeFromArrayRuntimeType eltType[115976]))
      const dom[116027] "dead at end of block" "const" "ref var"
      unknown call_tmp[649438] "expr temp" "maybe param" "maybe type" "temp"
      (649441 'move' call_tmp[649438](116026 call chpl__domainFromArrayRuntimeType eltType[115976]))
      (542754 'move' dom[116027](542753 'addr of' call_tmp[649438]))
      (116030 'end of statement')
      (116035 call chpl_decRefCountsForDomainsInArrayEltTypes arr[115971] arrayEltType[116020])
      (479348 'end of statement' arrayEltType[116020])
      unknown call_tmp[649445] "expr temp" "maybe param" "maybe type" "temp"
      (649448 'move' call_tmp[649445](116038 call _instance _mt[243] dom[116027]))
      unknown call_tmp[649452] "maybe param" "maybe type" "temp"
      (649455 'move' call_tmp[649452](116048 call(116043 call (partial) remove_containing_arr _mt[243] call_tmp[649445]) arr[115971]))
      unknown removeDom[116049] "dead at end of block" "insert auto destroy"
      (542756 'init var' removeDom[116049] call_tmp[649452])
      (116052 'end of statement' dom[116027])
      unknown call_tmp[649457] "expr temp" "maybe param" "maybe type" "temp"
      (649460 'move' call_tmp[649457](116173 call _cond_test removeDom[116049]))
      if call_tmp[649457]
      {
        const tmp[116164] "const" "temp"
        unknown call_tmp[649464] "expr temp" "maybe param" "maybe type" "temp"
        (649467 'move' call_tmp[649464](116055 call _instance _mt[243] dom[116027]))
        unknown call_tmp[649469] "expr temp" "maybe param" "maybe type" "temp"
        (649472 'move' call_tmp[649469](116161 '_wide_get_locale' call_tmp[649464]))
        (116166 'move' tmp[116164](116162 'deref' call_tmp[649469]))
        (935181 call on_fn[935177] tmp[116164])
        function on_fn[935177](const in arg dummy_locale_arg[935179]:chpl_localeID_t[209352]) : void[4] "on"
        {
          {
            unknown call_tmp[649476] "maybe param" "maybe type" "temp"
            (649479 'move' call_tmp[649476](116059 call _instance _mt[243] dom[116027]))
            const inst[116062] "dead at end of block" "const" "insert auto destroy"
            (542758 'init var' inst[116062] call_tmp[649476])
            (116065 'end of statement')
            unknown call_tmp[649483] "maybe param" "maybe type" "temp"
            (649486 'move' call_tmp[649483](116077 call(116073 call (partial) remove _mt[243] inst[116062])))
            unknown tmp[116078] "dead at end of block" "insert auto destroy" "temp"
            (542760 'init var' tmp[116078] call_tmp[649483])
            (116085 call _check_tuple_var_decl tmp[116078] 2)
            (479352 'end of statement')
            unknown call_tmp[649488] "maybe param" "maybe type" "temp"
            (649491 'move' call_tmp[649488](116079 call tmp[116078] 0))
            unknown domToFree[116067] "dead at end of block" "insert auto destroy"
            (542762 'init var' domToFree[116067] call_tmp[649488])
            unknown call_tmp[649493] "maybe param" "maybe type" "temp"
            (649496 'move' call_tmp[649493](116082 call tmp[116078] 1))
            unknown distToRemove[116069] "dead at end of block" "insert auto destroy"
            (542764 'init var' distToRemove[116069] call_tmp[649493])
            (116090 'end of statement')
            unknown distToFree[116095] "dead at end of block" "insert auto destroy"
            (542766 'init var' distToFree[116095] nil[44] unmanaged BaseDist?[415502])
            (116098 'end of statement' dom[116027])
            unknown call_tmp[649498] "expr temp" "maybe param" "maybe type" "temp"
            (649501 'move' call_tmp[649498](116101 call != distToRemove[116069] nil[44]))
            unknown call_tmp[649503] "expr temp" "maybe param" "maybe type" "temp"
            (649506 'move' call_tmp[649503](116116 call _cond_test call_tmp[649498]))
            if call_tmp[649503]
            {
              unknown call_tmp[649508] "expr temp" "maybe param" "maybe type" "temp"
              (649511 'move' call_tmp[649508](116105 call postfix! distToRemove[116069]))
              unknown call_tmp[649515] "expr temp" "maybe param" "maybe type" "temp"
              (649518 'move' call_tmp[649515](116111 call(116107 call (partial) remove _mt[243] call_tmp[649508])))
              (116112 call = distToFree[116095] call_tmp[649515])
              (479353 'end of statement' distToFree[116095] distToRemove[116069])
            }
            unknown call_tmp[649520] "expr temp" "maybe param" "maybe type" "temp"
            (649523 'move' call_tmp[649520](116122 call != domToFree[116067] nil[44]))
            unknown call_tmp[649525] "expr temp" "maybe param" "maybe type" "temp"
            (649528 'move' call_tmp[649525](116133 call _cond_test call_tmp[649520]))
            if call_tmp[649525]
            {
              unknown call_tmp[649530] "expr temp" "maybe param" "maybe type" "temp"
              (649533 'move' call_tmp[649530](116130 call _isPrivatized inst[116062]))
              (116131 call _delete_dom inst[116062] call_tmp[649530])
              (479356 'end of statement' inst[116062] inst[116062])
            }
            unknown call_tmp[649535] "expr temp" "maybe param" "maybe type" "temp"
            (649538 'move' call_tmp[649535](116140 call != distToFree[116095] nil[44]))
            unknown call_tmp[649540] "expr temp" "maybe param" "maybe type" "temp"
            (649543 'move' call_tmp[649540](116156 call _cond_test call_tmp[649535]))
            if call_tmp[649540]
            {
              unknown call_tmp[649545] "expr temp" "maybe param" "maybe type" "temp"
              (649548 'move' call_tmp[649545](116144 call postfix! distToFree[116095]))
              unknown call_tmp[649552] "expr temp" "maybe param" "maybe type" "temp"
              (649555 'move' call_tmp[649552](116149 call dist _mt[243] inst[116062]))
              unknown call_tmp[649557] "expr temp" "maybe param" "maybe type" "temp"
              (649560 'move' call_tmp[649557](116153 call _isPrivatized call_tmp[649552]))
              (116154 call _delete_dist call_tmp[649545] call_tmp[649557])
              (479359 'end of statement' distToFree[116095] inst[116062])
            }
          }
          (935184 return _void[55])
        }
        {
        }
      }
    }
    (515990 return _void[55])
  }
  function chpl__buildSubDomainType[116190](arg dom[116187]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[515994] "RVV" "temp" "type variable"
    unknown call_tmp[649562] "expr temp" "maybe param" "maybe type" "temp"
    (649565 'move' call_tmp[649562](116195 call chpl__convertValueToRuntimeType dom[116187]))
    (515999 'move' ret[515994](515998 'deref' call_tmp[649562]))
    (515996 return ret[515994])
  }
  function chpl__isTupleOfRanges[116205](arg tup[116203]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516003] "RVV" "param" "temp"
    {
      unknown i[116236] "dead at end of block" "insert auto destroy"
      (542768 'init var' i[116236] 0)
      (479363 'end of statement')
      unknown tmp[116237] "maybe param" "temp"
      unknown call_tmp[649569] "expr temp" "maybe param" "maybe type" "temp"
      (649572 'move' call_tmp[649569](116209 call size _mt[243] tup[116203]))
      unknown call_tmp[649574] "expr temp" "maybe param" "maybe type" "temp"
      (649577 'move' call_tmp[649574](116213 call - call_tmp[649569] 1))
      (116249 'move' tmp[116237](116247 call chpl_compute_low_param_loop_bound 0 call_tmp[649574]))
      unknown tmp[116238] "maybe param" "temp"
      unknown call_tmp[649581] "expr temp" "maybe param" "maybe type" "temp"
      (649584 'move' call_tmp[649581](116256 call size _mt[243] tup[116203]))
      unknown call_tmp[649586] "expr temp" "maybe param" "maybe type" "temp"
      (649589 'move' call_tmp[649586](116254 call - call_tmp[649581] 1))
      (116262 'move' tmp[116238](116260 call chpl_compute_high_param_loop_bound 0 call_tmp[649586]))
      unknown tmp[116239] "maybe param" "temp"
      (116265 'move' tmp[116239] 1)
      ParamForLoop[116267]
      { i[116236] tmp[116237] tmp[116238] tmp[116239]
        {
          { scopeless type
            unknown call_type_tmp[492131] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649591] "expr temp" "maybe param" "maybe type" "temp"
            (649594 'move' call_tmp[649591](116221 call tup[116203] i[116236]))
            (492135 'move' call_type_tmp[492131](116222 'typeof' call_tmp[649591]))
          }
          unknown call_tmp[649596] "expr temp" "maybe param" "maybe type" "temp"
          (649599 'move' call_tmp[649596](116224 call isRangeType call_type_tmp[492131]))
          unknown call_tmp[649601] "expr temp" "maybe param" "maybe type" "temp"
          (649604 'move' call_tmp[649601](116225 call ! call_tmp[649596]))
          unknown call_tmp[649606] "expr temp" "maybe param" "maybe type" "temp"
          (649609 'move' call_tmp[649606](116230 call _cond_test call_tmp[649601]))
          if call_tmp[649606]
          {
            (516008 'move' ret[516003](516007 'deref' 0))
            gotoReturn _end_chpl__isTupleOfRanges[516001] _end_chpl__isTupleOfRanges[516001]
          }
        }
      }
      label _unused_continueLabel[116241]
      label _breakLabel[116240]
    }
    (516013 'move' ret[516003](516012 'deref' 1))
    label _end_chpl__isTupleOfRanges[516001]
    (516005 return ret[516003])
  }
  function chpl__buildDomainExpr[116288](arg ranges[116285]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516017] "RVV" "temp"
    unknown call_tmp[649613] "maybe param" "maybe type" "temp"
    (649616 'move' call_tmp[649613](116295 call size _mt[243] ranges[116285]))
    unknown rank[116298] "dead at end of block" "param"
    (542770 'init var' rank[116298] call_tmp[649613])
    (116301 'end of statement')
    {
      unknown i[116352] "dead at end of block" "insert auto destroy"
      (542772 'init var' i[116352] 0)
      (479366 'end of statement')
      unknown tmp[116353] "maybe param" "temp"
      unknown call_tmp[649618] "expr temp" "maybe param" "maybe type" "temp"
      (649621 'move' call_tmp[649618](116306 call - rank[116298] 1))
      (116365 'move' tmp[116353](116363 call chpl_compute_low_param_loop_bound 1 call_tmp[649618]))
      unknown tmp[116354] "maybe param" "temp"
      unknown call_tmp[649623] "expr temp" "maybe param" "maybe type" "temp"
      (649626 'move' call_tmp[649623](116370 call - rank[116298] 1))
      (116375 'move' tmp[116354](116373 call chpl_compute_high_param_loop_bound 1 call_tmp[649623]))
      unknown tmp[116355] "maybe param" "temp"
      (116378 'move' tmp[116355] 1)
      ParamForLoop[116380]
      { i[116352] tmp[116353] tmp[116354] tmp[116355]
        unknown call_tmp[649628] "expr temp" "maybe param" "maybe type" "temp"
        (649631 'move' call_tmp[649628](116313 call ranges[116285] 0))
        unknown call_tmp[649635] "expr temp" "maybe param" "maybe type" "temp"
        (649638 'move' call_tmp[649635](116314 call idxType _mt[243] call_tmp[649628]))
        unknown call_tmp[649640] "expr temp" "maybe param" "maybe type" "temp"
        (649643 'move' call_tmp[649640](116320 call ranges[116285] i[116352]))
        unknown call_tmp[649647] "expr temp" "maybe param" "maybe type" "temp"
        (649650 'move' call_tmp[649647](116321 call idxType _mt[243] call_tmp[649640]))
        unknown call_tmp[649652] "expr temp" "maybe param" "maybe type" "temp"
        (649655 'move' call_tmp[649652](116324 call != call_tmp[649635] call_tmp[649647]))
        unknown call_tmp[649657] "expr temp" "maybe param" "maybe type" "temp"
        (649660 'move' call_tmp[649657](116347 call _cond_test call_tmp[649652]))
        if call_tmp[649657]
        {
          (116345 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[116357]
      label _breakLabel[116356]
    }
    {
      unknown i[116431] "dead at end of block" "insert auto destroy"
      (542774 'init var' i[116431] 0)
      (479368 'end of statement')
      unknown tmp[116432] "maybe param" "temp"
      unknown call_tmp[649662] "expr temp" "maybe param" "maybe type" "temp"
      (649665 'move' call_tmp[649662](116392 call - rank[116298] 1))
      (116444 'move' tmp[116432](116442 call chpl_compute_low_param_loop_bound 0 call_tmp[649662]))
      unknown tmp[116433] "maybe param" "temp"
      unknown call_tmp[649667] "expr temp" "maybe param" "maybe type" "temp"
      (649670 'move' call_tmp[649667](116449 call - rank[116298] 1))
      (116454 'move' tmp[116433](116452 call chpl_compute_high_param_loop_bound 0 call_tmp[649667]))
      unknown tmp[116434] "maybe param" "temp"
      (116457 'move' tmp[116434] 1)
      ParamForLoop[116459]
      { i[116431] tmp[116432] tmp[116433] tmp[116434]
        unknown call_tmp[649672] "expr temp" "maybe param" "maybe type" "temp"
        (649675 'move' call_tmp[649672](116400 call ranges[116285] i[116431]))
        unknown call_tmp[649677] "expr temp" "maybe param" "maybe type" "temp"
        (649680 'move' call_tmp[649677](116402 call isBoundedRange call_tmp[649672]))
        unknown call_tmp[649682] "expr temp" "maybe param" "maybe type" "temp"
        (649685 'move' call_tmp[649682](116403 call ! call_tmp[649677]))
        unknown call_tmp[649687] "expr temp" "maybe param" "maybe type" "temp"
        (649690 'move' call_tmp[649687](116426 call _cond_test call_tmp[649682]))
        if call_tmp[649687]
        {
          (116424 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[116436]
      label _breakLabel[116435]
    }
    unknown d[116484] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649692] "expr temp" "maybe param" "maybe type" "temp"
    (649695 'move' call_tmp[649692](116473 call ranges[116285] 0))
    unknown call_tmp[649699] "expr temp" "maybe param" "maybe type" "temp"
    (649702 'move' call_tmp[649699](116474 call idxType _mt[243] call_tmp[649692]))
    unknown call_tmp[649704] "expr temp" "maybe param" "maybe type" "temp"
    (649707 'move' call_tmp[649704](116480 call chpl__anyStridable ranges[116285]))
    unknown call_tmp[649709] "expr temp" "maybe param" "maybe type" "temp"
    (649712 'move' call_tmp[649709](116482 call chpl__buildDomainRuntimeType defaultDist[94053] rank[116298] call_tmp[649699] call_tmp[649704]))
    (542776 'default init var' d[116484] call_tmp[649709])
    (116487 'end of statement')
    (116496 call(116491 call (partial) setIndices _mt[243] d[116484]) ranges[116285])
    (479370 'end of statement' d[116484])
    (516022 'move' ret[516017](516021 'deref' d[116484]))
    gotoReturn _end_chpl__buildDomainExpr[516015] _end_chpl__buildDomainExpr[516015]
    (479372 'end of statement' d[116484])
    label _end_chpl__buildDomainExpr[516015]
    (516019 return ret[516017])
  }
  where {
    (116293 call chpl__isTupleOfRanges ranges[116285])
  }
  function chpl__buildDomainExpr[116510](arg keys[116507]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516028] "RVV" "temp"
    unknown call_tmp[649718] "maybe param" "maybe type" "temp"
    (649721 'move' call_tmp[649718](116513 call size _mt[243] keys[116507]))
    unknown count[116516] "dead at end of block" "param"
    (542778 'init var' count[116516] call_tmp[649718])
    (116519 'end of statement')
    { scopeless type
      unknown call_type_tmp[492137] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649723] "expr temp" "maybe param" "maybe type" "temp"
      (649726 'move' call_tmp[649723](116525 call keys[116507] 0))
      (492141 'move' call_type_tmp[492137](116526 'typeof' call_tmp[649723]))
    }
    unknown keyType[116529] "dead at end of block" "insert auto destroy" "type variable"(116528 call _getLiteralType call_type_tmp[492137])
    (542783 'move' keyType[116529](542781 call _getLiteralType call_type_tmp[492137]))
    {
      unknown i[116607] "dead at end of block" "insert auto destroy"
      (542785 'init var' i[116607] 0)
      (479374 'end of statement')
      unknown tmp[116608] "maybe param" "temp"
      unknown call_tmp[649728] "expr temp" "maybe param" "maybe type" "temp"
      (649731 'move' call_tmp[649728](116535 call - count[116516] 1))
      (116620 'move' tmp[116608](116618 call chpl_compute_low_param_loop_bound 1 call_tmp[649728]))
      unknown tmp[116609] "maybe param" "temp"
      unknown call_tmp[649733] "expr temp" "maybe param" "maybe type" "temp"
      (649736 'move' call_tmp[649733](116625 call - count[116516] 1))
      (116630 'move' tmp[116609](116628 call chpl_compute_high_param_loop_bound 1 call_tmp[649733]))
      unknown tmp[116610] "maybe param" "temp"
      (116633 'move' tmp[116610] 1)
      ParamForLoop[116635]
      { i[116607] tmp[116608] tmp[116609] tmp[116610]
        { scopeless type
          unknown call_type_tmp[492143] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[649738] "expr temp" "maybe param" "maybe type" "temp"
          (649741 'move' call_tmp[649738](116544 call keys[116507] i[116607]))
          (492147 'move' call_type_tmp[492143](116545 'typeof' call_tmp[649738]))
        }
        unknown call_tmp[649743] "expr temp" "maybe param" "maybe type" "temp"
        (649746 'move' call_tmp[649743](116547 call _getLiteralType call_type_tmp[492143]))
        unknown call_tmp[649748] "expr temp" "maybe param" "maybe type" "temp"
        (649751 'move' call_tmp[649748](116548 call != keyType[116529] call_tmp[649743]))
        unknown call_tmp[649753] "expr temp" "maybe param" "maybe type" "temp"
        (649756 'move' call_tmp[649753](116603 call _cond_test call_tmp[649748]))
        if call_tmp[649753]
        {
          { scopeless type
            unknown call_type_tmp[492149] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649758] "expr temp" "maybe param" "maybe type" "temp"
            (649761 'move' call_tmp[649758](116590 call keys[116507] i[116607]))
            (492153 'move' call_type_tmp[492149](116591 'typeof' call_tmp[649758]))
          }
          unknown call_tmp[649763] "expr temp" "maybe param" "maybe type" "temp"
          (649766 'move' call_tmp[649763](116570 call _cast string[26] i[116607]))
          unknown call_tmp[649768] "expr temp" "maybe param" "maybe type" "temp"
          (649771 'move' call_tmp[649768](116572 call + "Associative domain element " call_tmp[649763]))
          unknown call_tmp[649773] "expr temp" "maybe param" "maybe type" "temp"
          (649776 'move' call_tmp[649773](116575 call + call_tmp[649768] " expected to be of type "))
          unknown call_tmp[649778] "expr temp" "maybe param" "maybe type" "temp"
          (649781 'move' call_tmp[649778](116579 call _cast string[26] keyType[116529]))
          unknown call_tmp[649783] "expr temp" "maybe param" "maybe type" "temp"
          (649786 'move' call_tmp[649783](116581 call + call_tmp[649773] call_tmp[649778]))
          unknown call_tmp[649788] "expr temp" "maybe param" "maybe type" "temp"
          (649791 'move' call_tmp[649788](116584 call + call_tmp[649783] " but is of type "))
          unknown call_tmp[649793] "expr temp" "maybe param" "maybe type" "temp"
          (649796 'move' call_tmp[649793](116593 call _getLiteralType call_type_tmp[492149]))
          unknown call_tmp[649798] "expr temp" "maybe param" "maybe type" "temp"
          (649801 'move' call_tmp[649798](116595 call _cast string[26] call_tmp[649793]))
          unknown call_tmp[649803] "expr temp" "maybe param" "maybe type" "temp"
          (649806 'move' call_tmp[649803](116597 call + call_tmp[649788] call_tmp[649798]))
          (116600 call compilerError call_tmp[649803])
          (479375 'end of statement' i[116607] keyType[116529] i[116607])
        }
      }
      label _unused_continueLabel[116612]
      label _breakLabel[116611]
    }
    unknown D[116649] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649808] "expr temp" "maybe param" "maybe type" "temp"
    (649811 'move' call_tmp[649808](116647 call chpl__buildDomainRuntimeType defaultDist[94053] keyType[116529]))
    (542787 'default init var' D[116649] call_tmp[649808])
    (116652 'end of statement' keyType[116529])
    (116659 call(116654 call (partial) requestCapacity _mt[243] D[116649]) count[116516])
    (479380 'end of statement' D[116649])
    {
      unknown i[116676] "dead at end of block" "insert auto destroy"
      (542789 'init var' i[116676] 0)
      (479382 'end of statement')
      unknown tmp[116677] "maybe param" "temp"
      unknown call_tmp[649815] "expr temp" "maybe param" "maybe type" "temp"
      (649818 'move' call_tmp[649815](116664 call - count[116516] 1))
      (116689 'move' tmp[116677](116687 call chpl_compute_low_param_loop_bound 0 call_tmp[649815]))
      unknown tmp[116678] "maybe param" "temp"
      unknown call_tmp[649820] "expr temp" "maybe param" "maybe type" "temp"
      (649823 'move' call_tmp[649820](116694 call - count[116516] 1))
      (116699 'move' tmp[116678](116697 call chpl_compute_high_param_loop_bound 0 call_tmp[649820]))
      unknown tmp[116679] "maybe param" "temp"
      (116702 'move' tmp[116679] 1)
      ParamForLoop[116704]
      { i[116676] tmp[116677] tmp[116678] tmp[116679]
        unknown call_tmp[649825] "expr temp" "maybe param" "maybe type" "temp"
        (649828 'move' call_tmp[649825](116672 call keys[116507] i[116676]))
        (116673 call += D[116649] call_tmp[649825])
        (479383 'end of statement' D[116649] i[116676])
      }
      label _unused_continueLabel[116681]
      label _breakLabel[116680]
    }
    (516033 'move' ret[516028](516032 'deref' D[116649]))
    gotoReturn _end_chpl__buildDomainExpr[516026] _end_chpl__buildDomainExpr[516026]
    (479386 'end of statement' D[116649])
    label _end_chpl__buildDomainExpr[516026]
    (516030 return ret[516028])
  }
  function chpl__ensureDomainExpr[116724](const  ref arg x[116721]:_domain[125908](?)) const ref : _unknown[51]
  {
    unknown ret[516039] "RVV" "temp"
    (516044 'move' ret[516039](516043 'addr of' x[116721]))
    (516041 return ret[516039])
  }
  function chpl__ensureDomainExpr[116738](arg x[116735]:_any[178](?) ...) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[516048] "RVV" "temp"
    unknown call_tmp[649830] "expr temp" "maybe param" "maybe type" "temp"
    (649833 'move' call_tmp[649830](116744 call chpl__buildDomainExpr(116742 'expand_tuple' x[116735])))
    (516053 'move' ret[516048](516052 'deref' call_tmp[649830]))
    (516050 return ret[516048])
  }
  function chpl__ensureDomainExpr[116754](arg t[116752]:_any[178](?)) : _unknown[51] "compiler generated" "last resort" "no return value for void"
  {
    unknown call_tmp[649835] "expr temp" "maybe param" "maybe type" "temp"
    (649838 'move' call_tmp[649835](116777 call _cast string[26] t[116752]))
    (116798 call compilerError "Domain expression was a type ('" call_tmp[649835] "') rather than a domain value or range list as expected")
    (516055 return _void[55])
  }
  function chpl__distributed[116809](arg d[116806]:_distribution[118973](?), arg dom[116812]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[516059] "RVV" "temp"
    unknown call_tmp[649840] "expr temp" "maybe param" "maybe type" "temp"
    (649843 'move' call_tmp[649840](116818 call isRectangularDom dom[116812]))
    unknown call_tmp[649845] "expr temp" "maybe param" "maybe type" "temp"
    (649848 'move' call_tmp[649845](116876 call _cond_test call_tmp[649840]))
    if call_tmp[649845]
    {
      unknown call_tmp[649852] "expr temp" "maybe param" "maybe type" "temp"
      (649855 'move' call_tmp[649852](116820 call rank _mt[243] dom[116812]))
      unknown call_tmp[649859] "expr temp" "maybe param" "maybe type" "temp"
      (649862 'move' call_tmp[649859](116825 call _value _mt[243] dom[116812]))
      unknown call_tmp[649866] "expr temp" "maybe param" "maybe type" "temp"
      (649869 'move' call_tmp[649866](116828 call idxType _mt[243] call_tmp[649859]))
      unknown call_tmp[649873] "expr temp" "maybe param" "maybe type" "temp"
      (649876 'move' call_tmp[649873](116832 call _value _mt[243] dom[116812]))
      unknown call_tmp[649880] "expr temp" "maybe param" "maybe type" "temp"
      (649883 'move' call_tmp[649880](116835 call stridable _mt[243] call_tmp[649873]))
      unknown call_tmp[649885] "expr temp" "maybe param" "maybe type" "temp"
      (649888 'move' call_tmp[649885](116839 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[649852] call_tmp[649866] call_tmp[649880]))
      unknown call_tmp[649890] "maybe param" "maybe type" "temp"
      (649893 'move' call_tmp[649890](116842 call chpl__distributed d[116806] call_tmp[649885]))
      unknown distDom[116845] "dead at end of block" "insert auto destroy"
      (542791 'init var' distDom[116845] dom[116812] call_tmp[649890])
      (116848 'end of statement')
      (516064 'move' ret[516059](516063 'deref' distDom[116845]))
      gotoReturn _end_chpl__distributed[516057] _end_chpl__distributed[516057]
      (479389 'end of statement' distDom[116845])
    }
    {
      unknown call_tmp[649897] "expr temp" "maybe param" "maybe type" "temp"
      (649900 'move' call_tmp[649897](116854 call _value _mt[243] dom[116812]))
      unknown call_tmp[649904] "expr temp" "maybe param" "maybe type" "temp"
      (649907 'move' call_tmp[649904](116857 call idxType _mt[243] call_tmp[649897]))
      unknown call_tmp[649909] "expr temp" "maybe param" "maybe type" "temp"
      (649912 'move' call_tmp[649909](116862 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[649904]))
      unknown call_tmp[649914] "maybe param" "maybe type" "temp"
      (649917 'move' call_tmp[649914](116865 call chpl__distributed d[116806] call_tmp[649909]))
      unknown distDom[116868] "dead at end of block" "insert auto destroy"
      (542793 'init var' distDom[116868] dom[116812] call_tmp[649914])
      (116871 'end of statement')
      (516069 'move' ret[516059](516068 'deref' distDom[116868]))
      gotoReturn _end_chpl__distributed[516057] _end_chpl__distributed[516057]
      (479391 'end of statement' distDom[116868])
    }
    label _end_chpl__distributed[516057]
    (516061 return ret[516059])
  }
  function chpl__distributed[116889](arg d[116886]:_distribution[118973](?), arg ranges[116892]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516075] "RVV" "temp"
    unknown call_tmp[649919] "expr temp" "maybe param" "maybe type" "temp"
    (649922 'move' call_tmp[649919](116906 call chpl__buildDomainExpr(116904 'expand_tuple' ranges[116892])))
    unknown call_tmp[649924] "expr temp" "maybe param" "maybe type" "temp"
    (649927 'move' call_tmp[649924](116907 call chpl__distributed d[116886] call_tmp[649919]))
    (516080 'move' ret[516075](516079 'deref' call_tmp[649924]))
    (516077 return ret[516075])
  }
  where {
    (116898 call chpl__isTupleOfRanges ranges[116892])
  }
  function chpl__isArrayView[116918](arg arr[116916]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516084] "RVV" "param" "temp"
    const value[116932] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564336] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564337] "maybe param" "temp"
    unknown call_tmp[649929] "expr temp" "maybe param" "maybe type" "temp"
    (649932 'move' call_tmp[649929](116923 call isArray arr[116916]))
    (564342 'move' tmp[564337](564340 call _cond_test call_tmp[649929]))
    if tmp[564337]
    {
      unknown tmp[564344] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564346 'move' tmp[564344](116925 call _value _mt[243] arr[116916]))
      (564351 'move' tmp[564336](564348 '_paramFoldLogical' tmp[564337] tmp[564344]))
    }
    {
      (564356 'move' tmp[564336](564353 '_paramFoldLogical' tmp[564337] arr[116916]))
    }
    (542795 'init var' value[116932] tmp[564336])
    (116935 'end of statement')
    unknown call_tmp[649938] "maybe param" "maybe type" "temp"
    (649941 'move' call_tmp[649938](116942 call(116938 call (partial) isSliceArrayView _mt[243] value[116932])))
    unknown isSlice[116943] "dead at end of block" "param"
    (542797 'init var' isSlice[116943] call_tmp[649938])
    (116946 'end of statement')
    unknown call_tmp[649945] "maybe param" "maybe type" "temp"
    (649948 'move' call_tmp[649945](116952 call(116948 call (partial) isRankChangeArrayView _mt[243] value[116932])))
    unknown isRankChange[116953] "dead at end of block" "param"
    (542799 'init var' isRankChange[116953] call_tmp[649945])
    (116956 'end of statement')
    unknown call_tmp[649952] "maybe param" "maybe type" "temp"
    (649955 'move' call_tmp[649952](116962 call(116958 call (partial) isReindexArrayView _mt[243] value[116932])))
    unknown isReindex[116963] "dead at end of block" "param"
    (542801 'init var' isReindex[116963] call_tmp[649952])
    (116966 'end of statement' value[116932] value[116932] value[116932])
    unknown tmp[424213] "maybe param" "temp"
    unknown tmp[424234] "maybe param" "temp"
    (424245 'move' tmp[424234] isSlice[116943])
    unknown call_tmp[649957] "expr temp" "maybe param" "maybe type" "temp"
    (649960 'move' call_tmp[649957](424247 call _cond_invalid tmp[424234]))
    if call_tmp[649957]
    {
      (424250 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564363] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564364] "maybe param" "temp"
    unknown call_tmp[649962] "expr temp" "maybe param" "maybe type" "temp"
    (649965 'move' call_tmp[649962](424235 call isTrue tmp[424234]))
    (564369 'move' tmp[564364](564367 call _cond_test call_tmp[649962]))
    if tmp[564364]
    {
      (564374 'move' tmp[564363](564371 '_paramFoldLogical' tmp[564364] 1))
    }
    {
      unknown tmp[564376] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564378 'move' tmp[564376](424239 call isTrue isRankChange[116953]))
      (564383 'move' tmp[564363](564380 '_paramFoldLogical' tmp[564364] tmp[564376]))
    }
    (424224 'move' tmp[424213] tmp[564363])
    unknown call_tmp[649967] "expr temp" "maybe param" "maybe type" "temp"
    (649970 'move' call_tmp[649967](424226 call _cond_invalid tmp[424213]))
    if call_tmp[649967]
    {
      (424229 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564390] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564391] "maybe param" "temp"
    unknown call_tmp[649972] "expr temp" "maybe param" "maybe type" "temp"
    (649975 'move' call_tmp[649972](424214 call isTrue tmp[424213]))
    (564396 'move' tmp[564391](564394 call _cond_test call_tmp[649972]))
    if tmp[564391]
    {
      (564401 'move' tmp[564390](564398 '_paramFoldLogical' tmp[564391] 1))
    }
    {
      unknown tmp[564403] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564405 'move' tmp[564403](424218 call isTrue isReindex[116963]))
      (564410 'move' tmp[564390](564407 '_paramFoldLogical' tmp[564391] tmp[564403]))
    }
    (516089 'move' ret[516084](516088 'deref' tmp[564390]))
    (516086 return ret[516084])
  }
  function chpl__getActualArray[116982](arg arr[116980]:_any[178](?)) : _unknown[51]
  {
    unknown ret[516093] "RVV" "temp"
    unknown value[116996] "dead at end of block" "insert auto destroy"
    unknown tmp[564417] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564418] "maybe param" "temp"
    unknown call_tmp[649977] "expr temp" "maybe param" "maybe type" "temp"
    (649980 'move' call_tmp[649977](116987 call isArray arr[116980]))
    (564423 'move' tmp[564418](564421 call _cond_test call_tmp[649977]))
    if tmp[564418]
    {
      unknown tmp[564425] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564427 'move' tmp[564425](116989 call _value _mt[243] arr[116980]))
      (564432 'move' tmp[564417](564429 '_paramFoldLogical' tmp[564418] tmp[564425]))
    }
    {
      (564437 'move' tmp[564417](564434 '_paramFoldLogical' tmp[564418] arr[116980]))
    }
    (542803 'init var' value[116996] tmp[564417])
    (116999 'end of statement')
    unknown ret[117017] "dead at end of block" "insert auto destroy"
    unknown tmp[564444] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564445] "maybe param" "temp"
    unknown call_tmp[649984] "expr temp" "maybe param" "maybe type" "temp"
    (649987 'move' call_tmp[649984](117004 call chpl__isArrayView value[116996]))
    (564450 'move' tmp[564445](564448 call _cond_test call_tmp[649984]))
    if tmp[564445]
    {
      unknown tmp[564452] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564454 'move' tmp[564452](117012 call(117008 call (partial) _getActualArray _mt[243] value[116996])))
      (564459 'move' tmp[564444](564456 '_paramFoldLogical' tmp[564445] tmp[564452]))
    }
    {
      (564464 'move' tmp[564444](564461 '_paramFoldLogical' tmp[564445] value[116996]))
    }
    (542805 'init var' ret[117017] tmp[564444])
    (117020 'end of statement' value[116996] value[116996] value[116996])
    (516098 'move' ret[516093](516097 'deref' ret[117017]))
    gotoReturn _end_chpl__getActualArray[516091] _end_chpl__getActualArray[516091]
    (479403 'end of statement' ret[117017])
    label _end_chpl__getActualArray[516091]
    (516095 return ret[516093])
  }
  function chpl__isDROrDRView[117030](arg arg[117028]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516104] "RVV" "param" "temp"
    unknown tmp[424360] "maybe param" "temp"
    (424371 'move' tmp[424360](117035 call isDomain arg[117028]))
    unknown call_tmp[649991] "expr temp" "maybe param" "maybe type" "temp"
    (649994 'move' call_tmp[649991](424373 call _cond_invalid tmp[424360]))
    if call_tmp[649991]
    {
      (424376 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564471] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564472] "maybe param" "temp"
    unknown call_tmp[649996] "expr temp" "maybe param" "maybe type" "temp"
    (649999 'move' call_tmp[649996](424361 call isTrue tmp[424360]))
    (564477 'move' tmp[564472](564475 call _cond_test call_tmp[649996]))
    if tmp[564472]
    {
      (564482 'move' tmp[564471](564479 '_paramFoldLogical' tmp[564472] 1))
    }
    {
      unknown tmp[564484] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650001] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (650004 'move' call_tmp[650001](117038 'typeof' arg[117028]))
      unknown call_tmp[650006] "expr temp" "maybe param" "maybe type" "temp"
      (650009 'move' call_tmp[650006](354330 'is_subtype' BaseDom[372786](?) call_tmp[650001]))
      (564486 'move' tmp[564484](424365 call isTrue call_tmp[650006]))
      (564491 'move' tmp[564471](564488 '_paramFoldLogical' tmp[564472] tmp[564484]))
    }
    unknown call_tmp[650011] "expr temp" "maybe param" "maybe type" "temp"
    (650014 'move' call_tmp[650011](117186 call _cond_test tmp[564471]))
    if call_tmp[650011]
    {
      const value[117056] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[564498] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564499] "maybe param" "temp"
      unknown call_tmp[650016] "expr temp" "maybe param" "maybe type" "temp"
      (650019 'move' call_tmp[650016](117047 call isDomain arg[117028]))
      (564504 'move' tmp[564499](564502 call _cond_test call_tmp[650016]))
      if tmp[564499]
      {
        unknown tmp[564506] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564508 'move' tmp[564506](117049 call _value _mt[243] arg[117028]))
        (564513 'move' tmp[564498](564510 '_paramFoldLogical' tmp[564499] tmp[564506]))
      }
      {
        (564518 'move' tmp[564498](564515 '_paramFoldLogical' tmp[564499] arg[117028]))
      }
      (542807 'init var' value[117056] tmp[564498])
      (117059 'end of statement')
      unknown call_tmp[650025] "maybe param" "maybe type" "temp"
      (650028 'move' call_tmp[650025](117066 call(117062 call (partial) isDefaultRectangular _mt[243] value[117056])))
      unknown isDR[117067] "dead at end of block" "param"
      (542809 'init var' isDR[117067] call_tmp[650025])
      (117070 'end of statement')
      unknown tmp[424255] "maybe param" "temp"
      (424266 'move' tmp[424255](117074 call chpl__isDomainView value[117056]))
      unknown call_tmp[650030] "expr temp" "maybe param" "maybe type" "temp"
      (650033 'move' call_tmp[650030](424268 call _cond_invalid tmp[424255]))
      if call_tmp[650030]
      {
        (424271 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown isDRView[117086] "dead at end of block" "param"
      unknown tmp[564525] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564526] "maybe param" "temp"
      unknown call_tmp[650035] "expr temp" "maybe param" "maybe type" "temp"
      (650038 'move' call_tmp[650035](424256 call isTrue tmp[424255]))
      (564531 'move' tmp[564526](564529 call _cond_test call_tmp[650035]))
      if tmp[564526]
      {
        unknown tmp[564533] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[650040] "expr temp" "maybe param" "maybe type" "temp"
        (650043 'move' call_tmp[650040](117078 call chpl__getActualDomain value[117056]))
        unknown call_tmp[650047] "expr temp" "maybe param" "maybe type" "temp"
        (650050 'move' call_tmp[650047](117083 call(117079 call (partial) isDefaultRectangular _mt[243] call_tmp[650040])))
        (564535 'move' tmp[564533](424259 call isTrue call_tmp[650047]))
        (564540 'move' tmp[564525](564537 '_paramFoldLogical' tmp[564526] tmp[564533]))
      }
      {
        (564545 'move' tmp[564525](564542 '_paramFoldLogical' tmp[564526] 0))
      }
      (542811 'init var' isDRView[117086] tmp[564525])
      (117089 'end of statement' value[117056] value[117056])
      unknown tmp[424276] "maybe param" "temp"
      (424287 'move' tmp[424276] isDR[117067])
      unknown call_tmp[650052] "expr temp" "maybe param" "maybe type" "temp"
      (650055 'move' call_tmp[650052](424289 call _cond_invalid tmp[424276]))
      if call_tmp[650052]
      {
        (424292 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564552] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564553] "maybe param" "temp"
      unknown call_tmp[650057] "expr temp" "maybe param" "maybe type" "temp"
      (650060 'move' call_tmp[650057](424277 call isTrue tmp[424276]))
      (564558 'move' tmp[564553](564556 call _cond_test call_tmp[650057]))
      if tmp[564553]
      {
        (564563 'move' tmp[564552](564560 '_paramFoldLogical' tmp[564553] 1))
      }
      {
        unknown tmp[564565] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564567 'move' tmp[564565](424281 call isTrue isDRView[117086]))
        (564572 'move' tmp[564552](564569 '_paramFoldLogical' tmp[564553] tmp[564565]))
      }
      (516109 'move' ret[516104](516108 'deref' tmp[564552]))
      gotoReturn _end_chpl__isDROrDRView[516102] _end_chpl__isDROrDRView[516102]
    }
    {
      unknown tmp[424339] "maybe param" "temp"
      (424350 'move' tmp[424339](117099 call isArray arg[117028]))
      unknown call_tmp[650062] "expr temp" "maybe param" "maybe type" "temp"
      (650065 'move' call_tmp[650062](424352 call _cond_invalid tmp[424339]))
      if call_tmp[650062]
      {
        (424355 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564579] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564580] "maybe param" "temp"
      unknown call_tmp[650067] "expr temp" "maybe param" "maybe type" "temp"
      (650070 'move' call_tmp[650067](424340 call isTrue tmp[424339]))
      (564585 'move' tmp[564580](564583 call _cond_test call_tmp[650067]))
      if tmp[564580]
      {
        (564590 'move' tmp[564579](564587 '_paramFoldLogical' tmp[564580] 1))
      }
      {
        unknown tmp[564592] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[650072] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (650075 'move' call_tmp[650072](117102 'typeof' arg[117028]))
        unknown call_tmp[650077] "expr temp" "maybe param" "maybe type" "temp"
        (650080 'move' call_tmp[650077](354331 'is_subtype' BaseArr[382363](?) call_tmp[650072]))
        (564594 'move' tmp[564592](424344 call isTrue call_tmp[650077]))
        (564599 'move' tmp[564579](564596 '_paramFoldLogical' tmp[564580] tmp[564592]))
      }
      unknown call_tmp[650082] "expr temp" "maybe param" "maybe type" "temp"
      (650085 'move' call_tmp[650082](117182 call _cond_test tmp[564579]))
      if call_tmp[650082]
      {
        const value[117120] "dead at end of block" "const" "insert auto destroy"
        unknown tmp[564606] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564607] "maybe param" "temp"
        unknown call_tmp[650087] "expr temp" "maybe param" "maybe type" "temp"
        (650090 'move' call_tmp[650087](117111 call isArray arg[117028]))
        (564612 'move' tmp[564607](564610 call _cond_test call_tmp[650087]))
        if tmp[564607]
        {
          unknown tmp[564614] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564616 'move' tmp[564614](117113 call _value _mt[243] arg[117028]))
          (564621 'move' tmp[564606](564618 '_paramFoldLogical' tmp[564607] tmp[564614]))
        }
        {
          (564626 'move' tmp[564606](564623 '_paramFoldLogical' tmp[564607] arg[117028]))
        }
        (542813 'init var' value[117120] tmp[564606])
        (117123 'end of statement')
        unknown call_tmp[650096] "maybe param" "maybe type" "temp"
        (650099 'move' call_tmp[650096](117130 call(117126 call (partial) isDefaultRectangular _mt[243] value[117120])))
        unknown isDR[117131] "dead at end of block" "param"
        (542815 'init var' isDR[117131] call_tmp[650096])
        (117134 'end of statement')
        unknown tmp[424297] "maybe param" "temp"
        (424308 'move' tmp[424297](117138 call chpl__isArrayView value[117120]))
        unknown call_tmp[650101] "expr temp" "maybe param" "maybe type" "temp"
        (650104 'move' call_tmp[650101](424310 call _cond_invalid tmp[424297]))
        if call_tmp[650101]
        {
          (424313 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown isDRView[117150] "dead at end of block" "param"
        unknown tmp[564633] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564634] "maybe param" "temp"
        unknown call_tmp[650106] "expr temp" "maybe param" "maybe type" "temp"
        (650109 'move' call_tmp[650106](424298 call isTrue tmp[424297]))
        (564639 'move' tmp[564634](564637 call _cond_test call_tmp[650106]))
        if tmp[564634]
        {
          unknown tmp[564641] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[650111] "expr temp" "maybe param" "maybe type" "temp"
          (650114 'move' call_tmp[650111](117142 call chpl__getActualArray value[117120]))
          unknown call_tmp[650118] "expr temp" "maybe param" "maybe type" "temp"
          (650121 'move' call_tmp[650118](117147 call(117143 call (partial) isDefaultRectangular _mt[243] call_tmp[650111])))
          (564643 'move' tmp[564641](424301 call isTrue call_tmp[650118]))
          (564648 'move' tmp[564633](564645 '_paramFoldLogical' tmp[564634] tmp[564641]))
        }
        {
          (564653 'move' tmp[564633](564650 '_paramFoldLogical' tmp[564634] 0))
        }
        (542817 'init var' isDRView[117150] tmp[564633])
        (117153 'end of statement' value[117120] value[117120])
        unknown tmp[424318] "maybe param" "temp"
        (424329 'move' tmp[424318] isDR[117131])
        unknown call_tmp[650123] "expr temp" "maybe param" "maybe type" "temp"
        (650126 'move' call_tmp[650123](424331 call _cond_invalid tmp[424318]))
        if call_tmp[650123]
        {
          (424334 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[564660] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564661] "maybe param" "temp"
        unknown call_tmp[650128] "expr temp" "maybe param" "maybe type" "temp"
        (650131 'move' call_tmp[650128](424319 call isTrue tmp[424318]))
        (564666 'move' tmp[564661](564664 call _cond_test call_tmp[650128]))
        if tmp[564661]
        {
          (564671 'move' tmp[564660](564668 '_paramFoldLogical' tmp[564661] 1))
        }
        {
          unknown tmp[564673] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564675 'move' tmp[564673](424323 call isTrue isDRView[117150]))
          (564680 'move' tmp[564660](564677 '_paramFoldLogical' tmp[564661] tmp[564673]))
        }
        (516114 'move' ret[516104](516113 'deref' tmp[564660]))
        gotoReturn _end_chpl__isDROrDRView[516102] _end_chpl__isDROrDRView[516102]
      }
      {
        (117179 call compilerError "Invalid argument for chpl__isDROrDRView")
      }
    }
    label _end_chpl__isDROrDRView[516102]
    (516106 return ret[516104])
  }
  function chpl__isDomainView[117198](arg dom[117196]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516120] "RVV" "param" "temp"
    const value[117212] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564687] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564688] "maybe param" "temp"
    unknown call_tmp[650133] "expr temp" "maybe param" "maybe type" "temp"
    (650136 'move' call_tmp[650133](117203 call isDomain dom[117196]))
    (564693 'move' tmp[564688](564691 call _cond_test call_tmp[650133]))
    if tmp[564688]
    {
      unknown tmp[564695] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564697 'move' tmp[564695](117205 call _value _mt[243] dom[117196]))
      (564702 'move' tmp[564687](564699 '_paramFoldLogical' tmp[564688] tmp[564695]))
    }
    {
      (564707 'move' tmp[564687](564704 '_paramFoldLogical' tmp[564688] dom[117196]))
    }
    (542819 'init var' value[117212] tmp[564687])
    (117215 'end of statement')
    unknown call_tmp[650142] "maybe param" "maybe type" "temp"
    (650145 'move' call_tmp[650142](117224 call(117220 call (partial) isSliceDomainView _mt[243] value[117212])))
    unknown isSlice[117225] "dead at end of block" "param"
    (542821 'init var' isSlice[117225] call_tmp[650142])
    (117228 'end of statement')
    unknown call_tmp[650149] "maybe param" "maybe type" "temp"
    (650152 'move' call_tmp[650149](117236 call(117232 call (partial) isRankChangeDomainView _mt[243] value[117212])))
    unknown isRankChange[117237] "dead at end of block" "param"
    (542823 'init var' isRankChange[117237] call_tmp[650149])
    (117240 'end of statement')
    unknown call_tmp[650156] "maybe param" "maybe type" "temp"
    (650159 'move' call_tmp[650156](117248 call(117244 call (partial) isReindexDomainView _mt[243] value[117212])))
    unknown isReindex[117249] "dead at end of block" "param"
    (542825 'init var' isReindex[117249] call_tmp[650156])
    (117252 'end of statement' value[117212] value[117212] value[117212])
    unknown tmp[424381] "maybe param" "temp"
    unknown tmp[424402] "maybe param" "temp"
    (424413 'move' tmp[424402] isSlice[117225])
    unknown call_tmp[650161] "expr temp" "maybe param" "maybe type" "temp"
    (650164 'move' call_tmp[650161](424415 call _cond_invalid tmp[424402]))
    if call_tmp[650161]
    {
      (424418 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564714] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564715] "maybe param" "temp"
    unknown call_tmp[650166] "expr temp" "maybe param" "maybe type" "temp"
    (650169 'move' call_tmp[650166](424403 call isTrue tmp[424402]))
    (564720 'move' tmp[564715](564718 call _cond_test call_tmp[650166]))
    if tmp[564715]
    {
      (564725 'move' tmp[564714](564722 '_paramFoldLogical' tmp[564715] 1))
    }
    {
      unknown tmp[564727] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564729 'move' tmp[564727](424407 call isTrue isRankChange[117237]))
      (564734 'move' tmp[564714](564731 '_paramFoldLogical' tmp[564715] tmp[564727]))
    }
    (424392 'move' tmp[424381] tmp[564714])
    unknown call_tmp[650171] "expr temp" "maybe param" "maybe type" "temp"
    (650174 'move' call_tmp[650171](424394 call _cond_invalid tmp[424381]))
    if call_tmp[650171]
    {
      (424397 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564741] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564742] "maybe param" "temp"
    unknown call_tmp[650176] "expr temp" "maybe param" "maybe type" "temp"
    (650179 'move' call_tmp[650176](424382 call isTrue tmp[424381]))
    (564747 'move' tmp[564742](564745 call _cond_test call_tmp[650176]))
    if tmp[564742]
    {
      (564752 'move' tmp[564741](564749 '_paramFoldLogical' tmp[564742] 1))
    }
    {
      unknown tmp[564754] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564756 'move' tmp[564754](424386 call isTrue isReindex[117249]))
      (564761 'move' tmp[564741](564758 '_paramFoldLogical' tmp[564742] tmp[564754]))
    }
    (516125 'move' ret[516120](516124 'deref' tmp[564741]))
    (516122 return ret[516120])
  }
  function chpl__getActualDomain[117268](arg dom[117266]:_any[178](?)) : _unknown[51]
  {
    unknown ret[516129] "RVV" "temp"
    unknown value[117282] "dead at end of block" "insert auto destroy"
    unknown tmp[564768] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564769] "maybe param" "temp"
    unknown call_tmp[650181] "expr temp" "maybe param" "maybe type" "temp"
    (650184 'move' call_tmp[650181](117273 call isDomain dom[117266]))
    (564774 'move' tmp[564769](564772 call _cond_test call_tmp[650181]))
    if tmp[564769]
    {
      unknown tmp[564776] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564778 'move' tmp[564776](117275 call _value _mt[243] dom[117266]))
      (564783 'move' tmp[564768](564780 '_paramFoldLogical' tmp[564769] tmp[564776]))
    }
    {
      (564788 'move' tmp[564768](564785 '_paramFoldLogical' tmp[564769] dom[117266]))
    }
    (542827 'init var' value[117282] tmp[564768])
    (117285 'end of statement')
    unknown ret[117303] "dead at end of block" "insert auto destroy"
    unknown tmp[564795] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564796] "maybe param" "temp"
    unknown call_tmp[650188] "expr temp" "maybe param" "maybe type" "temp"
    (650191 'move' call_tmp[650188](117290 call chpl__isDomainView value[117282]))
    (564801 'move' tmp[564796](564799 call _cond_test call_tmp[650188]))
    if tmp[564796]
    {
      unknown tmp[564803] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564805 'move' tmp[564803](117298 call(117294 call (partial) _getActualDomain _mt[243] value[117282])))
      (564810 'move' tmp[564795](564807 '_paramFoldLogical' tmp[564796] tmp[564803]))
    }
    {
      (564815 'move' tmp[564795](564812 '_paramFoldLogical' tmp[564796] value[117282]))
    }
    (542829 'init var' ret[117303] tmp[564795])
    (117306 'end of statement' value[117282] value[117282] value[117282])
    (516134 'move' ret[516129](516133 'deref' ret[117303]))
    gotoReturn _end_chpl__getActualDomain[516127] _end_chpl__getActualDomain[516127]
    (479427 'end of statement' ret[117303])
    label _end_chpl__getActualDomain[516127]
    (516131 return ret[516129])
  }
  function chpl__isRectangularDomType[117316](arg domainType[117314]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516140] "RVV" "param" "temp"
    unknown dom[117319] "dead at end of block" "insert auto destroy"
    (542831 'default init var' dom[117319] domainType[117314])
    (117322 'end of statement')
    unknown tmp[424423] "maybe param" "temp"
    (424434 'move' tmp[424423](117327 call isDomainType domainType[117314]))
    unknown call_tmp[650195] "expr temp" "maybe param" "maybe type" "temp"
    (650198 'move' call_tmp[650195](424436 call _cond_invalid tmp[424423]))
    if call_tmp[650195]
    {
      (424439 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564822] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564823] "maybe param" "temp"
    unknown call_tmp[650200] "expr temp" "maybe param" "maybe type" "temp"
    (650203 'move' call_tmp[650200](424424 call isTrue tmp[424423]))
    (564828 'move' tmp[564823](564826 call _cond_test call_tmp[650200]))
    if tmp[564823]
    {
      unknown tmp[564830] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650205] "expr temp" "maybe param" "maybe type" "temp"
      (650208 'move' call_tmp[650205](117331 call isRectangularDom dom[117319]))
      (564832 'move' tmp[564830](424427 call isTrue call_tmp[650205]))
      (564837 'move' tmp[564822](564834 '_paramFoldLogical' tmp[564823] tmp[564830]))
    }
    {
      (564842 'move' tmp[564822](564839 '_paramFoldLogical' tmp[564823] 0))
    }
    (516145 'move' ret[516140](516144 'deref' tmp[564822]))
    gotoReturn _end_chpl__isRectangularDomType[516138] _end_chpl__isRectangularDomType[516138]
    (479430 'end of statement' dom[117319])
    label _end_chpl__isRectangularDomType[516138]
    (516142 return ret[516140])
  }
  function chpl__isSparseDomType[117342](arg domainType[117340]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516151] "RVV" "param" "temp"
    unknown dom[117345] "dead at end of block" "insert auto destroy"
    (542833 'default init var' dom[117345] domainType[117340])
    (117348 'end of statement')
    unknown call_tmp[650210] "expr temp" "maybe param" "maybe type" "temp"
    (650213 'move' call_tmp[650210](117353 call isSparseDom dom[117345]))
    (516156 'move' ret[516151](516155 'deref' call_tmp[650210]))
    gotoReturn _end_chpl__isSparseDomType[516149] _end_chpl__isSparseDomType[516149]
    (479432 'end of statement' dom[117345])
    label _end_chpl__isSparseDomType[516149]
    (516153 return ret[516151])
  }
  function chpl__parentDomainFromDomainRuntimeType[117362](arg domainType[117360]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516162] "RVV" "temp"
    unknown call_tmp[650215] "maybe param" "maybe type" "temp"
    (650218 'move' call_tmp[650215](117398 'get runtime type field' domainType[117360] "parentDom"))
    unknown parentDom[117399] "dead at end of block" "no auto destroy" "no copy"
    (542835 'init var' parentDom[117399] call_tmp[650215])
    (117402 'end of statement')
    unknown call_tmp[650222] "expr temp" "maybe param" "maybe type" "temp"
    (650225 'move' call_tmp[650222](117406 call _value _mt[243] parentDom[117399]))
    unknown call_tmp[650227] "expr temp" "maybe param" "maybe type" "temp"
    (650230 'move' call_tmp[650227](117410 call _getDomain call_tmp[650222]))
    (516167 'move' ret[516162](516166 'deref' call_tmp[650227]))
    gotoReturn _end_chpl__parentDomainFromDomainRuntimeType[516160] _end_chpl__parentDomainFromDomainRuntimeType[516160]
    (479434 'end of statement' parentDom[117399])
    label _end_chpl__parentDomainFromDomainRuntimeType[516160]
    (516164 return ret[516162])
  }
  function chpl__distributed[117421](arg d[117418]:_distribution[118973](?), arg domainType[117423]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516173] "RVV" "temp" "type variable"
    unknown call_tmp[650232] "expr temp" "maybe param" "maybe type" "temp"
    (650235 'move' call_tmp[650232](117428 call isDomainType domainType[117423]))
    unknown call_tmp[650237] "expr temp" "maybe param" "maybe type" "temp"
    (650240 'move' call_tmp[650237](117429 call ! call_tmp[650232]))
    unknown call_tmp[650242] "expr temp" "maybe param" "maybe type" "temp"
    (650245 'move' call_tmp[650242](117456 call _cond_test call_tmp[650237]))
    if call_tmp[650242]
    {
      unknown call_tmp[650247] "expr temp" "maybe param" "maybe type" "temp"
      (650250 'move' call_tmp[650247](117452 call _cast string[26] domainType[117423]))
      (117454 call compilerError "cannot apply 'dmapped' to the non-domain type " call_tmp[650247])
    }
    unknown call_tmp[650252] "expr temp" "maybe param" "maybe type" "temp"
    (650255 'move' call_tmp[650252](117465 call chpl__isRectangularDomType domainType[117423]))
    unknown call_tmp[650257] "expr temp" "maybe param" "maybe type" "temp"
    (650260 'move' call_tmp[650257](117549 call _cond_test call_tmp[650252]))
    if call_tmp[650257]
    {
      unknown dom[117467] "dead at end of block" "insert auto destroy"
      (542837 'default init var' dom[117467] domainType[117423])
      (117470 'end of statement')
      unknown call_tmp[650264] "expr temp" "maybe param" "maybe type" "temp"
      (650267 'move' call_tmp[650264](117476 call _value _mt[243] dom[117467]))
      unknown call_tmp[650271] "expr temp" "maybe param" "maybe type" "temp"
      (650274 'move' call_tmp[650271](117479 call rank _mt[243] call_tmp[650264]))
      unknown call_tmp[650278] "expr temp" "maybe param" "maybe type" "temp"
      (650281 'move' call_tmp[650278](117483 call _value _mt[243] dom[117467]))
      unknown call_tmp[650285] "expr temp" "maybe param" "maybe type" "temp"
      (650288 'move' call_tmp[650285](117486 call idxType _mt[243] call_tmp[650278]))
      unknown call_tmp[650292] "expr temp" "maybe param" "maybe type" "temp"
      (650295 'move' call_tmp[650292](117490 call _value _mt[243] dom[117467]))
      unknown call_tmp[650299] "expr temp" "maybe param" "maybe type" "temp"
      (650302 'move' call_tmp[650299](117493 call stridable _mt[243] call_tmp[650292]))
      unknown call_tmp[650304] "expr temp" "maybe param" "maybe type" "temp"
      (650307 'move' call_tmp[650304](117496 call chpl__buildDomainRuntimeType d[117418] call_tmp[650271] call_tmp[650285] call_tmp[650299]))
      (516178 'move' ret[516173](516177 'deref' call_tmp[650304]))
      gotoReturn _end_chpl__distributed[516171] _end_chpl__distributed[516171]
      (479437 'end of statement' dom[117467] dom[117467] dom[117467])
    }
    {
      unknown call_tmp[650309] "expr temp" "maybe param" "maybe type" "temp"
      (650312 'move' call_tmp[650309](117502 call chpl__isSparseDomType domainType[117423]))
      unknown call_tmp[650314] "expr temp" "maybe param" "maybe type" "temp"
      (650317 'move' call_tmp[650314](117545 call _cond_test call_tmp[650309]))
      if call_tmp[650314]
      {
        const parentDom[117507] "dead at end of block" "const" "ref var"
        unknown call_tmp[650319] "expr temp" "maybe param" "maybe type" "temp"
        (650322 'move' call_tmp[650319](117506 call chpl__parentDomainFromDomainRuntimeType domainType[117423]))
        (542840 'move' parentDom[117507](542839 'addr of' call_tmp[650319]))
        (117510 'end of statement')
        unknown call_tmp[650324] "expr temp" "maybe param" "maybe type" "temp"
        (650327 'move' call_tmp[650324](117516 call chpl__buildSparseDomainRuntimeType d[117418] parentDom[117507]))
        (516183 'move' ret[516173](516182 'deref' call_tmp[650324]))
        gotoReturn _end_chpl__distributed[516171] _end_chpl__distributed[516171]
        (479441 'end of statement' parentDom[117507])
      }
      {
        unknown dom[117520] "dead at end of block" "insert auto destroy"
        (542842 'default init var' dom[117520] domainType[117423])
        (117523 'end of statement')
        unknown call_tmp[650331] "expr temp" "maybe param" "maybe type" "temp"
        (650334 'move' call_tmp[650331](117529 call _value _mt[243] dom[117520]))
        unknown call_tmp[650338] "expr temp" "maybe param" "maybe type" "temp"
        (650341 'move' call_tmp[650338](117532 call idxType _mt[243] call_tmp[650331]))
        unknown call_tmp[650345] "expr temp" "maybe param" "maybe type" "temp"
        (650348 'move' call_tmp[650345](117536 call _value _mt[243] dom[117520]))
        unknown call_tmp[650352] "expr temp" "maybe param" "maybe type" "temp"
        (650355 'move' call_tmp[650352](117539 call parSafe _mt[243] call_tmp[650345]))
        unknown call_tmp[650357] "expr temp" "maybe param" "maybe type" "temp"
        (650360 'move' call_tmp[650357](117542 call chpl__buildDomainRuntimeType d[117418] call_tmp[650338] call_tmp[650352]))
        (516188 'move' ret[516173](516187 'deref' call_tmp[650357]))
        gotoReturn _end_chpl__distributed[516171] _end_chpl__distributed[516171]
        (479443 'end of statement' dom[117520] dom[117520])
      }
    }
    label _end_chpl__distributed[516171]
    (516175 return ret[516173])
  }
  function chpl__distributionFromDomainRuntimeType[117560](arg rtt[117558]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516194] "RVV" "temp"
    unknown call_tmp[650362] "maybe param" "maybe type" "temp"
    (650365 'move' call_tmp[650362](117580 'get runtime type field' rtt[117558] "dist"))
    unknown dist[117581] "dead at end of block" "no auto destroy" "no copy"
    (542844 'init var' dist[117581] call_tmp[650362])
    (117584 'end of statement')
    unknown call_tmp[650369] "expr temp" "maybe param" "maybe type" "temp"
    (650372 'move' call_tmp[650369](117588 call _value _mt[243] dist[117581]))
    unknown call_tmp[650374] "expr temp" "maybe param" "maybe type" "temp"
    (650377 'move' call_tmp[650374](117592 call _getDistribution call_tmp[650369]))
    (516199 'move' ret[516194](516198 'deref' call_tmp[650374]))
    gotoReturn _end_chpl__distributionFromDomainRuntimeType[516192] _end_chpl__distributionFromDomainRuntimeType[516192]
    (479446 'end of statement' dist[117581])
    label _end_chpl__distributionFromDomainRuntimeType[516192]
    (516196 return ret[516194])
  }
  function chpl__domainFromArrayRuntimeType[117601](arg rtt[117599]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516205] "RVV" "temp"
    unknown call_tmp[650379] "maybe param" "maybe type" "temp"
    (650382 'move' call_tmp[650379](117607 'get runtime type field' rtt[117599] "dom"))
    unknown dom[117608] "dead at end of block" "no auto destroy" "no copy"
    (542846 'init var' dom[117608] call_tmp[650379])
    (117611 'end of statement')
    unknown call_tmp[650386] "expr temp" "maybe param" "maybe type" "temp"
    (650389 'move' call_tmp[650386](117615 call _value _mt[243] dom[117608]))
    unknown call_tmp[650391] "expr temp" "maybe param" "maybe type" "temp"
    (650394 'move' call_tmp[650391](117619 call _getDomain call_tmp[650386]))
    (516210 'move' ret[516205](516209 'deref' call_tmp[650391]))
    gotoReturn _end_chpl__domainFromArrayRuntimeType[516203] _end_chpl__domainFromArrayRuntimeType[516203]
    (479448 'end of statement' dom[117608])
    label _end_chpl__domainFromArrayRuntimeType[516203]
    (516207 return ret[516205])
  }
  function chpl__eltTypeFromArrayRuntimeType[117628](arg rtt[117626]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516216] "RVV" "temp" "type variable"
    unknown eltType[117649] "dead at end of block" "no auto destroy" "no copy" "type variable"(117648 'get runtime type field' rtt[117626] "eltType")
    (542851 'move' eltType[117649](542848 'get runtime type field' rtt[117626] "eltType"))
    (479450 'end of statement')
    (516221 'move' ret[516216](516220 'deref' eltType[117649]))
    gotoReturn _end_chpl__eltTypeFromArrayRuntimeType[516214] _end_chpl__eltTypeFromArrayRuntimeType[516214]
    (479451 'end of statement' eltType[117649])
    label _end_chpl__eltTypeFromArrayRuntimeType[516214]
    (516218 return ret[516216])
  }
  function chpl__instanceTypeFromArrayRuntimeType[117662](arg rtt[117660]:_any[178](?)) type : _unknown[51] "ignore runtime type"
  {
    unknown ret[516227] "RVV" "temp" "type variable"
    (117699 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (479453 'end of statement')
    unknown call_tmp[650396] "expr temp" "maybe param" "maybe type" "temp"
    (650399 'move' call_tmp[650396](117706 'static field type' rtt[117660] "_instance"))
    (516232 'move' ret[516227](516231 'deref' call_tmp[650396]))
    (516229 return ret[516227])
  }
  function chpl__buildIndexType[117717](param arg rank[117714]:int(64)[13], arg idxType[117719]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516236] "RVV" "temp" "type variable"
    (516241 'move' ret[516236](516240 'deref' idxType[117719]))
    (516238 return ret[516236])
  }
  where {
    (117723 call == rank[117714] 1)
  }
  function chpl__buildIndexType[117738](param arg rank[117735]:int(64)[13], arg idxType[117740]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516245] "RVV" "temp" "type variable"
    unknown call_tmp[650401] "expr temp" "maybe param" "maybe type" "temp"
    (650404 'move' call_tmp[650401](117748 call * rank[117735] idxType[117740]))
    (516250 'move' ret[516245](516249 'deref' call_tmp[650401]))
    (516247 return ret[516245])
  }
  where {
    (117744 call > rank[117735] 1)
  }
  function chpl__buildIndexType[117762](param arg rank[117759]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[516254] "RVV" "temp" "type variable"
    unknown call_tmp[650406] "expr temp" "maybe param" "maybe type" "temp"
    (650409 'move' call_tmp[650406](117768 call chpl__buildIndexType rank[117759] int(64)[13]))
    (516259 'move' ret[516254](516258 'deref' call_tmp[650406]))
    (516256 return ret[516254])
  }
  function chpl__buildIndexType[117780](arg d[117777]:_domain[125908](?)) type : _unknown[51]
  {
    unknown ret[516263] "RVV" "temp" "type variable"
    unknown call_tmp[650413] "expr temp" "maybe param" "maybe type" "temp"
    (650416 'move' call_tmp[650413](117784 call rank _mt[243] d[117777]))
    unknown call_tmp[650420] "expr temp" "maybe param" "maybe type" "temp"
    (650423 'move' call_tmp[650420](117789 call _value _mt[243] d[117777]))
    unknown call_tmp[650427] "expr temp" "maybe param" "maybe type" "temp"
    (650430 'move' call_tmp[650427](117792 call idxType _mt[243] call_tmp[650420]))
    unknown call_tmp[650432] "expr temp" "maybe param" "maybe type" "temp"
    (650435 'move' call_tmp[650432](117795 call chpl__buildIndexType call_tmp[650413] call_tmp[650427]))
    (516268 'move' ret[516263](516267 'deref' call_tmp[650432]))
    (516265 return ret[516263])
  }
  function isRectangularDom[117807](arg d[117804]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516272] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[492155] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650439] "expr temp" "maybe param" "maybe type" "temp"
      (650442 'move' call_tmp[650439](117812 call _value _mt[243] d[117804]))
      (492159 'move' call_type_tmp[492155](117815 'typeof' call_tmp[650439]))
    }
    unknown call_tmp[650444] "expr temp" "maybe param" "maybe type" "temp"
    (650447 'move' call_tmp[650444](117817 call _to_borrowed call_type_tmp[492155]))
    unknown call_tmp[650449] "expr temp" "maybe param" "maybe type" "temp"
    (650452 'move' call_tmp[650449](354332 'is_subtype' BaseRectangularDom[382286](?) call_tmp[650444]))
    (516277 'move' ret[516272](516276 'deref' call_tmp[650449]))
    (516274 return ret[516272])
  }
  function isRectangularArr[117834](arg a[117831]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516281] "RVV" "param" "temp"
    unknown call_tmp[650456] "expr temp" "maybe param" "maybe type" "temp"
    (650459 'move' call_tmp[650456](117838 call _dom _mt[243] a[117831]))
    unknown call_tmp[650461] "expr temp" "maybe param" "maybe type" "temp"
    (650464 'move' call_tmp[650461](117842 call isRectangularDom call_tmp[650456]))
    (516286 'move' ret[516281](516285 'deref' call_tmp[650461]))
    (516283 return ret[516281])
  }
  function isIrregularDom[117854](arg d[117851]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516290] "RVV" "param" "temp"
    unknown tmp[424444] "maybe param" "temp"
    (424455 'move' tmp[424444](117859 call isSparseDom d[117851]))
    unknown call_tmp[650466] "expr temp" "maybe param" "maybe type" "temp"
    (650469 'move' call_tmp[650466](424457 call _cond_invalid tmp[424444]))
    if call_tmp[650466]
    {
      (424460 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564849] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564850] "maybe param" "temp"
    unknown call_tmp[650471] "expr temp" "maybe param" "maybe type" "temp"
    (650474 'move' call_tmp[650471](424445 call isTrue tmp[424444]))
    (564855 'move' tmp[564850](564853 call _cond_test call_tmp[650471]))
    if tmp[564850]
    {
      (564860 'move' tmp[564849](564857 '_paramFoldLogical' tmp[564850] 1))
    }
    {
      unknown tmp[564862] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650476] "expr temp" "maybe param" "maybe type" "temp"
      (650479 'move' call_tmp[650476](117863 call isAssociativeDom d[117851]))
      (564864 'move' tmp[564862](424449 call isTrue call_tmp[650476]))
      (564869 'move' tmp[564849](564866 '_paramFoldLogical' tmp[564850] tmp[564862]))
    }
    (516295 'move' ret[516290](516294 'deref' tmp[564849]))
    (516292 return ret[516290])
  }
  function isIrregularArr[117879](arg a[117876]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516299] "RVV" "param" "temp"
    unknown call_tmp[650483] "expr temp" "maybe param" "maybe type" "temp"
    (650486 'move' call_tmp[650483](117883 call _dom _mt[243] a[117876]))
    unknown call_tmp[650488] "expr temp" "maybe param" "maybe type" "temp"
    (650491 'move' call_tmp[650488](117887 call isIrregularDom call_tmp[650483]))
    (516304 'move' ret[516299](516303 'deref' call_tmp[650488]))
    (516301 return ret[516299])
  }
  function isAssociativeDom[117899](arg d[117896]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516326] "RVV" "param" "temp"
    function isAssociativeDomClass[117907](arg dc[117904]:BaseAssociativeDom[382291](?)) param : _unknown[51]
    {
      unknown ret[516308] "RVV" "param" "temp"
      (516313 'move' ret[516308](516312 'deref' 1))
      (516310 return ret[516308])
    }
    function isAssociativeDomClass[117920](arg dc[117918]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516317] "RVV" "param" "temp"
      (516322 'move' ret[516317](516321 'deref' 0))
      (516319 return ret[516317])
    }
    unknown call_tmp[650495] "expr temp" "maybe param" "maybe type" "temp"
    (650498 'move' call_tmp[650495](117931 call _value _mt[243] d[117896]))
    unknown call_tmp[650500] "expr temp" "maybe param" "maybe type" "temp"
    (650503 'move' call_tmp[650500](117935 call _to_borrowed call_tmp[650495]))
    unknown call_tmp[650505] "expr temp" "maybe param" "maybe type" "temp"
    (650508 'move' call_tmp[650505](117937 call isAssociativeDomClass call_tmp[650500]))
    (516331 'move' ret[516326](516330 'deref' call_tmp[650505]))
    (516328 return ret[516326])
  }
  function isAssociativeArr[117950](arg a[117947]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516335] "RVV" "param" "temp"
    unknown call_tmp[650512] "expr temp" "maybe param" "maybe type" "temp"
    (650515 'move' call_tmp[650512](117954 call _dom _mt[243] a[117947]))
    unknown call_tmp[650517] "expr temp" "maybe param" "maybe type" "temp"
    (650520 'move' call_tmp[650517](117958 call isAssociativeDom call_tmp[650512]))
    (516340 'move' ret[516335](516339 'deref' call_tmp[650517]))
    (516337 return ret[516335])
  }
  function isSparseDom[117970](arg d[117967]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[516362] "RVV" "param" "temp"
    function isSparseDomClass[117978](arg dc[117975]:BaseSparseDom[382296](?)) param : _unknown[51]
    {
      unknown ret[516344] "RVV" "param" "temp"
      (516349 'move' ret[516344](516348 'deref' 1))
      (516346 return ret[516344])
    }
    function isSparseDomClass[117991](arg dc[117989]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516353] "RVV" "param" "temp"
      (516358 'move' ret[516353](516357 'deref' 0))
      (516355 return ret[516353])
    }
    unknown call_tmp[650524] "expr temp" "maybe param" "maybe type" "temp"
    (650527 'move' call_tmp[650524](118001 call _value _mt[243] d[117967]))
    unknown call_tmp[650529] "expr temp" "maybe param" "maybe type" "temp"
    (650532 'move' call_tmp[650529](118005 call isSparseDomClass call_tmp[650524]))
    (516367 'move' ret[516362](516366 'deref' call_tmp[650529]))
    (516364 return ret[516362])
  }
  function isSparseArr[118018](arg a[118015]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[516371] "RVV" "param" "temp"
    unknown call_tmp[650536] "expr temp" "maybe param" "maybe type" "temp"
    (650539 'move' call_tmp[650536](118022 call _dom _mt[243] a[118015]))
    unknown call_tmp[650541] "expr temp" "maybe param" "maybe type" "temp"
    (650544 'move' call_tmp[650541](118026 call isSparseDom call_tmp[650536]))
    (516376 'move' ret[516371](516375 'deref' call_tmp[650541]))
    (516373 return ret[516371])
  }
  function chpl__checkDomainsMatch[118040](arg a[118037]:_array[133594](?), arg b[118042]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650546] "expr temp" "maybe param" "maybe type" "temp"
    (650549 'move' call_tmp[650546](118086 call _cond_test 1))
    if call_tmp[650546]
    {
      unknown call_tmp[650553] "expr temp" "maybe param" "maybe type" "temp"
      (650556 'move' call_tmp[650553](118050 call _dom _mt[243] a[118037]))
      unknown call_tmp[650558] "expr temp" "maybe param" "maybe type" "temp"
      (650561 'move' call_tmp[650558](118054 call != call_tmp[650553] b[118042]))
      unknown call_tmp[650563] "expr temp" "maybe param" "maybe type" "temp"
      (650566 'move' call_tmp[650563](118081 call _cond_test call_tmp[650558]))
      if call_tmp[650563]
      {
        (118078 call boundsCheckHalt module=[255] HaltWrappers[210018] "domain mismatch on return")
        (359169 'referenced modules list' HaltWrappers[210018])
      }
    }
    (516378 return _void[55])
    (355155 'used modules list'(118045 'import' HaltWrappers[210018]))
  }
  function chpl__checkDomainsMatch[118098](arg a[118095]:_iteratorRecord[205](?), arg b[118100]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650568] "expr temp" "maybe param" "maybe type" "temp"
    (650571 'move' call_tmp[650568](118133 call _cond_test 1))
    if call_tmp[650568]
    {
      unknown tmp[118108] "dead at end of block" "insert auto destroy"
      (542853 'init var' tmp[118108] a[118095])
      (118111 'end of statement')
      unknown call_tmp[650575] "expr temp" "maybe param" "maybe type" "temp"
      (650578 'move' call_tmp[650575](118114 call _dom _mt[243] tmp[118108]))
      unknown call_tmp[650580] "expr temp" "maybe param" "maybe type" "temp"
      (650583 'move' call_tmp[650580](118118 call != call_tmp[650575] b[118100]))
      unknown call_tmp[650585] "expr temp" "maybe param" "maybe type" "temp"
      (650588 'move' call_tmp[650585](118129 call _cond_test call_tmp[650580]))
      if call_tmp[650585]
      {
        (118126 call boundsCheckHalt module=[255] HaltWrappers[210018] "domain mismatch on return")
        (359176 'referenced modules list' HaltWrappers[210018])
      }
    }
    (516380 return _void[55])
    (355157 'used modules list'(118103 'import' HaltWrappers[210018]))
  }
  function chpl__checkEltTypeMatch[118147](arg a[118144]:_array[133594](?), arg b[118149]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650592] "expr temp" "maybe param" "maybe type" "temp"
    (650595 'move' call_tmp[650592](118152 call eltType _mt[243] a[118144]))
    unknown call_tmp[650597] "expr temp" "maybe param" "maybe type" "temp"
    (650600 'move' call_tmp[650597](118156 call != call_tmp[650592] b[118149]))
    unknown call_tmp[650602] "expr temp" "maybe param" "maybe type" "temp"
    (650605 'move' call_tmp[650602](118192 call _cond_test call_tmp[650597]))
    if call_tmp[650602]
    {
      unknown call_tmp[650609] "expr temp" "maybe param" "maybe type" "temp"
      (650612 'move' call_tmp[650609](118178 call eltType _mt[243] a[118144]))
      unknown call_tmp[650614] "expr temp" "maybe param" "maybe type" "temp"
      (650617 'move' call_tmp[650614](118182 call _cast string[26] call_tmp[650609]))
      unknown call_tmp[650619] "expr temp" "maybe param" "maybe type" "temp"
      (650622 'move' call_tmp[650619](118187 call _cast string[26] b[118149]))
      (118189 call compilerError "array element type mismatch in return from " call_tmp[650614] " to " call_tmp[650619])
    }
    (516382 return _void[55])
  }
  function chpl__checkEltTypeMatch[118205](arg a[118202]:_iteratorRecord[205](?), arg b[118207]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650624] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650627 'move' call_tmp[650624](118211 'typeof' a[118202]))
    unknown eltType[118214] "dead at end of block" "insert auto destroy" "type variable"(118213 call iteratorToArrayElementType call_tmp[650624])
    unknown call_tmp[650629] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650632 'move' call_tmp[650629](542857 'typeof' a[118202]))
    (542859 'move' eltType[118214](542856 call iteratorToArrayElementType call_tmp[650629]))
    (479475 'end of statement')
    unknown call_tmp[650634] "expr temp" "maybe param" "maybe type" "temp"
    (650637 'move' call_tmp[650634](118220 call != eltType[118214] b[118207]))
    unknown call_tmp[650639] "expr temp" "maybe param" "maybe type" "temp"
    (650642 'move' call_tmp[650639](118237 call _cond_test call_tmp[650634]))
    if call_tmp[650639]
    {
      unknown call_tmp[650644] "expr temp" "maybe param" "maybe type" "temp"
      (650647 'move' call_tmp[650644](118227 call _cast string[26] eltType[118214]))
      unknown call_tmp[650649] "expr temp" "maybe param" "maybe type" "temp"
      (650652 'move' call_tmp[650649](118232 call _cast string[26] b[118207]))
      (118234 call compilerError "array element type mismatch in return from " call_tmp[650644] " to " call_tmp[650649])
      (479476 'end of statement' eltType[118214])
    }
    (516384 return _void[55])
  }
  function dmap[118245].init[799110](arg _mt[799112]:_MT[238], ref arg this[799113]:dmap[118245]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (799117 return _void[55])
  }
  function dmap[118245].init=[799119](arg _mt[799122]:_MT[238], ref arg this[799123]:dmap[118245], arg other[799124]:dmap[118245]) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (799128 return _void[55])
  }
  function dmap[118245].deinit[799130](arg _mt[799132]:_MT[238], arg this[799134]:dmap[118245]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (799142 return _void[55])
  }
  function dmap[118245].writeThis[799144](arg _mt[799148]:_MT[238], arg this[799146]:dmap[118245], arg f[799147]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799153 call writeThisDefaultImpl f[799147] this[799146])
    (799158 return _void[55])
  }
  function dmap[118245].readThis[799160](arg _mt[799164]:_MT[238], arg this[799162]:dmap[118245], arg f[799163]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799168 call readThisDefaultImpl f[799163] this[799162])
    (799174 return _void[55])
  }
  function chpl_fields_are_comparable[799188](arg _arg1[799190]:dmap[118245], arg _arg2[799191]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799200]:bool[10] "RVV" "param" "temp"
    (799205 'move' ret[799200](799204 'deref' 1))
    (799202 return ret[799200])
  }
  function ==[799176](arg _arg1[799178]:dmap[118245], arg _arg2[799179]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799219]:bool[10] "RVV" "temp"
    (799224 'move' ret[799219](799223 'deref' 1))
    (799221 return ret[799219])
  }
  where {
    unknown call_tmp[799226] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799229 'move' call_tmp[799226](799182 'typeof' _arg1[799178]))
    unknown call_tmp[799231] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799234 'move' call_tmp[799231](799184 'typeof' _arg2[799179]))
    unknown call_tmp[799236] "expr temp" "maybe param" "maybe type" "temp"
    (799239 'move' call_tmp[799236](799186 call == call_tmp[799226] call_tmp[799231]))
    unknown call_tmp[799241] "expr temp" "maybe param" "maybe type" "temp"
    (799244 'move' call_tmp[799241](799207 call chpl_fields_are_comparable[799188] _arg1[799178] _arg2[799179]))
    (799211 '&' call_tmp[799236] call_tmp[799241])
  }
  function chpl_fields_are_comparable[799258](arg _arg1[799260]:dmap[118245], arg _arg2[799261]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799270]:bool[10] "RVV" "param" "temp"
    (799275 'move' ret[799270](799274 'deref' 1))
    (799272 return ret[799270])
  }
  function !=[799246](arg _arg1[799248]:dmap[118245], arg _arg2[799249]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799289]:bool[10] "RVV" "temp"
    (799294 'move' ret[799289](799293 'deref' 0))
    (799291 return ret[799289])
  }
  where {
    unknown call_tmp[799296] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799299 'move' call_tmp[799296](799252 'typeof' _arg1[799248]))
    unknown call_tmp[799301] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799304 'move' call_tmp[799301](799254 'typeof' _arg2[799249]))
    unknown call_tmp[799306] "expr temp" "maybe param" "maybe type" "temp"
    (799309 'move' call_tmp[799306](799256 call == call_tmp[799296] call_tmp[799301]))
    unknown call_tmp[799311] "expr temp" "maybe param" "maybe type" "temp"
    (799314 'move' call_tmp[799311](799277 call chpl_fields_are_comparable[799258] _arg1[799248] _arg2[799249]))
    (799281 '&' call_tmp[799306] call_tmp[799311])
  }
  function chpl_fields_are_comparable[799328](arg _arg1[799330]:dmap[118245], arg _arg2[799331]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799340]:bool[10] "RVV" "param" "temp"
    (799345 'move' ret[799340](799344 'deref' 1))
    (799342 return ret[799340])
  }
  function <[799316](arg _arg1[799318]:dmap[118245], arg _arg2[799319]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799359]:bool[10] "RVV" "temp"
    (799364 'move' ret[799359](799363 'deref' 0))
    (799361 return ret[799359])
  }
  where {
    unknown call_tmp[799366] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799369 'move' call_tmp[799366](799322 'typeof' _arg1[799318]))
    unknown call_tmp[799371] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799374 'move' call_tmp[799371](799324 'typeof' _arg2[799319]))
    unknown call_tmp[799376] "expr temp" "maybe param" "maybe type" "temp"
    (799379 'move' call_tmp[799376](799326 call == call_tmp[799366] call_tmp[799371]))
    unknown call_tmp[799381] "expr temp" "maybe param" "maybe type" "temp"
    (799384 'move' call_tmp[799381](799347 call chpl_fields_are_comparable[799328] _arg1[799318] _arg2[799319]))
    (799351 '&' call_tmp[799376] call_tmp[799381])
  }
  function chpl_fields_are_comparable[799398](arg _arg1[799400]:dmap[118245], arg _arg2[799401]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799410]:bool[10] "RVV" "param" "temp"
    (799415 'move' ret[799410](799414 'deref' 1))
    (799412 return ret[799410])
  }
  function <=[799386](arg _arg1[799388]:dmap[118245], arg _arg2[799389]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799429]:bool[10] "RVV" "temp"
    (799434 'move' ret[799429](799433 'deref' 1))
    (799431 return ret[799429])
  }
  where {
    unknown call_tmp[799436] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799439 'move' call_tmp[799436](799392 'typeof' _arg1[799388]))
    unknown call_tmp[799441] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799444 'move' call_tmp[799441](799394 'typeof' _arg2[799389]))
    unknown call_tmp[799446] "expr temp" "maybe param" "maybe type" "temp"
    (799449 'move' call_tmp[799446](799396 call == call_tmp[799436] call_tmp[799441]))
    unknown call_tmp[799451] "expr temp" "maybe param" "maybe type" "temp"
    (799454 'move' call_tmp[799451](799417 call chpl_fields_are_comparable[799398] _arg1[799388] _arg2[799389]))
    (799421 '&' call_tmp[799446] call_tmp[799451])
  }
  function chpl_fields_are_comparable[799468](arg _arg1[799470]:dmap[118245], arg _arg2[799471]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799480]:bool[10] "RVV" "param" "temp"
    (799485 'move' ret[799480](799484 'deref' 1))
    (799482 return ret[799480])
  }
  function >[799456](arg _arg1[799458]:dmap[118245], arg _arg2[799459]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799499]:bool[10] "RVV" "temp"
    (799504 'move' ret[799499](799503 'deref' 0))
    (799501 return ret[799499])
  }
  where {
    unknown call_tmp[799506] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799509 'move' call_tmp[799506](799462 'typeof' _arg1[799458]))
    unknown call_tmp[799511] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799514 'move' call_tmp[799511](799464 'typeof' _arg2[799459]))
    unknown call_tmp[799516] "expr temp" "maybe param" "maybe type" "temp"
    (799519 'move' call_tmp[799516](799466 call == call_tmp[799506] call_tmp[799511]))
    unknown call_tmp[799521] "expr temp" "maybe param" "maybe type" "temp"
    (799524 'move' call_tmp[799521](799487 call chpl_fields_are_comparable[799468] _arg1[799458] _arg2[799459]))
    (799491 '&' call_tmp[799516] call_tmp[799521])
  }
  function chpl_fields_are_comparable[799538](arg _arg1[799540]:dmap[118245], arg _arg2[799541]:dmap[118245]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799550]:bool[10] "RVV" "param" "temp"
    (799555 'move' ret[799550](799554 'deref' 1))
    (799552 return ret[799550])
  }
  function >=[799526](arg _arg1[799528]:dmap[118245], arg _arg2[799529]:dmap[118245]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799569]:bool[10] "RVV" "temp"
    (799574 'move' ret[799569](799573 'deref' 1))
    (799571 return ret[799569])
  }
  where {
    unknown call_tmp[799576] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799579 'move' call_tmp[799576](799532 'typeof' _arg1[799528]))
    unknown call_tmp[799581] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799584 'move' call_tmp[799581](799534 'typeof' _arg2[799529]))
    unknown call_tmp[799586] "expr temp" "maybe param" "maybe type" "temp"
    (799589 'move' call_tmp[799586](799536 call == call_tmp[799576] call_tmp[799581]))
    unknown call_tmp[799591] "expr temp" "maybe param" "maybe type" "temp"
    (799594 'move' call_tmp[799591](799557 call chpl_fields_are_comparable[799538] _arg1[799528] _arg2[799529]))
    (799561 '&' call_tmp[799586] call_tmp[799591])
  }
  function =[799596](ref arg _arg1[799598]:dmap[118245], const?  ref arg _arg2[799599]:dmap[118245]) : void[4] "assignop" "compiler generated" "last resort"
  {
    (799610 return _void[55])
  }
  where {
    unknown call_tmp[799612] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799615 'move' call_tmp[799612](799602 'typeof' _arg1[799598]))
    unknown call_tmp[799617] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799620 'move' call_tmp[799617](799604 'typeof' _arg2[799599]))
    (799606 call == call_tmp[799612] call_tmp[799617])
  }
  function chpl__defaultHash[799622](arg r[799624]:dmap[118245]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[799632] "RVV" "temp"
    (799637 'move' ret[799632](799636 'deref' 0))
    (799634 return ret[799632])
  }
  type dmap[118245]
  function chpl__buildDistType[118252](arg t[118250]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516388] "RVV" "temp" "type variable"
    unknown x[118267] "dead at end of block" "insert auto destroy"
    unknown call_tmp[650654] "expr temp" "maybe param" "maybe type" "temp"
    (650657 'move' call_tmp[650654](118265 call _to_unmanaged t[118250]))
    unknown call_tmp[650659] "expr temp" "maybe param" "maybe type" "temp"
    (650662 'move' call_tmp[650659](118266 'to nilable class from type' call_tmp[650654]))
    (542861 'default init var' x[118267] call_tmp[650659])
    (118270 'end of statement')
    unknown call_tmp[650664] "expr temp" "maybe param" "maybe type" "temp"
    (650667 'move' call_tmp[650664](118275 call postfix! x[118267]))
    unknown call_tmp[650669] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650672 'move' call_tmp[650669](747926 'new' _distribution[118973](?) call_tmp[650664]))
    unknown y[118279] "dead at end of block" "insert auto destroy"
    (542863 'init var' y[118279] call_tmp[650669])
    (118282 'end of statement' x[118267])
    unknown call_tmp[650674] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650677 'move' call_tmp[650674](118284 'typeof' y[118279]))
    (516393 'move' ret[516388](516392 'deref' call_tmp[650674]))
    gotoReturn _end_chpl__buildDistType[516386] _end_chpl__buildDistType[516386]
    (479479 'end of statement' y[118279])
    label _end_chpl__buildDistType[516386]
    (516390 return ret[516388])
  }
  where {
    unknown call_tmp[650679] "expr temp" "maybe param" "maybe type" "temp"
    (650682 'move' call_tmp[650679](118258 call _to_borrowed t[118250]))
    (354333 'is_subtype' BaseDist[382381](?) call_tmp[650679])
  }
  function chpl__buildDistType[118294](arg t[118292]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118315 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
    (516397 return _void[55])
  }
  function chpl__buildDistValue[118326](arg x[118323]:unmanaged[220](?)) : _unknown[51]
  {
    unknown ret[516401] "RVV" "temp"
    unknown call_tmp[650684] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650687 'move' call_tmp[650684](747927 'new' _distribution[118973](?) x[118323]))
    (516406 'move' ret[516401](516405 'deref' call_tmp[650684]))
    (516403 return ret[516401])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492161] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650691] "expr temp" "maybe param" "maybe type" "temp"
      (650694 'move' call_tmp[650691](118334 call(118330 call (partial) borrow _mt[243] x[118323])))
      (492165 'move' call_type_tmp[492161](118335 'typeof' call_tmp[650691]))
    }
    (354334 'is_subtype' BaseDist[382381](?) call_type_tmp[492161])
  }
  function chpl__buildDistValue[118356](in arg x[118353]:_owned[30](?)) : _unknown[51]
  {
    unknown ret[516410] "RVV" "temp"
    unknown call_tmp[650698] "expr temp" "maybe param" "maybe type" "temp"
    (650701 'move' call_tmp[650698](118376 call(118372 call (partial) release _mt[243] x[118353])))
    unknown call_tmp[650703] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650706 'move' call_tmp[650703](747928 'new' _distribution[118973](?) call_tmp[650698]))
    (516415 'move' ret[516410](516414 'deref' call_tmp[650703]))
    (516412 return ret[516410])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492167] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650710] "expr temp" "maybe param" "maybe type" "temp"
      (650713 'move' call_tmp[650710](118364 call(118360 call (partial) borrow _mt[243] x[118353])))
      (492171 'move' call_type_tmp[492167](118365 'typeof' call_tmp[650710]))
    }
    (354335 'is_subtype' BaseDist[382381](?) call_type_tmp[492167])
  }
  function chpl__buildDistValue[118389](arg x[118387]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118410 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
    (516417 return _void[55])
  }
  function _distribution[118973](?).init[118436](arg _mt[118977]:_MT[238], ref arg this[118975]:_distribution[118973](?), arg _pid[118433]:int(64)[13], arg _instance[118438]:_any[178](?), arg _unowned[118441]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461288] "temp"
    (461291 'init var' tmp[461288] _pid[118433] int(64)[13])
    (461293 'init field' this[118975] c"_pid" tmp[461288])
    (479485 'end of statement')
    unknown tmp[461297] "temp"
    (461299 'init var' tmp[461297] _instance[118438])
    (461301 'init field' this[118975] c"_instance" tmp[461297])
    (479486 'end of statement')
    unknown tmp[461305] "temp"
    (461308 'init var' tmp[461305] _unowned[118441] bool[10])
    (461310 'init field' this[118975] c"_unowned" tmp[461305])
    (479487 'end of statement')
    (516419 return _void[55])
  }
  function _distribution[118973](?).init[118479](arg _mt[118981]:_MT[238], ref arg this[118979]:_distribution[118973](?), arg value[118477]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461314] "temp"
    unknown tmp[564876] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564877] "maybe param" "temp"
    unknown call_tmp[650715] "expr temp" "maybe param" "maybe type" "temp"
    (650718 'move' call_tmp[650715](118488 call _isPrivatized value[118477]))
    (564882 'move' tmp[564877](564880 call _cond_test call_tmp[650715]))
    if tmp[564877]
    {
      unknown tmp[564884] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564886 'move' tmp[564884](118492 call _newPrivatizedClass value[118477]))
      (564891 'move' tmp[564876](564888 '_paramFoldLogical' tmp[564877] tmp[564884]))
    }
    {
      (564896 'move' tmp[564876](564893 '_paramFoldLogical' tmp[564877] nullPid[113718]))
    }
    (461317 'init var' tmp[461314] tmp[564876] int(64)[13])
    (461319 'init field' this[118979] c"_pid" tmp[461314])
    (479488 'end of statement')
    unknown call_tmp[650720] "maybe param" "maybe type" "temp"
    (650723 'move' call_tmp[650720](118508 call _to_unmanaged value[118477]))
    unknown tmp[461323] "temp"
    (461325 'init var' tmp[461323] call_tmp[650720])
    (461327 'init field' this[118979] c"_instance" tmp[461323])
    (479489 'end of statement')
    val tmp[461332]:bool[10] "temp"
    (461335 'default init var' tmp[461332] bool[10])
    (461337 '.=' this[118979] c"_unowned" tmp[461332])
    (479490 'end of statement')
    (516421 return _void[55])
  }
  function _distribution[118973](?).init=[118520](arg _mt[118985]:_MT[238], ref arg this[118983]:_distribution[118973](?), const  ref arg other[118517]:_distribution[118973](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[650727] "expr temp" "maybe param" "maybe type" "temp"
    (650730 'move' call_tmp[650727](118523 call _value _mt[243] other[118517]))
    unknown call_tmp[650734] "maybe param" "maybe type" "temp"
    (650737 'move' call_tmp[650734](118532 call(118528 call (partial) dsiClone _mt[243] call_tmp[650727])))
    unknown value[118533] "dead at end of block" "insert auto destroy"
    (542865 'init var' value[118533] call_tmp[650734])
    (118536 'end of statement')
    (118544 call(118539 call (partial) init _mt[243] this[118983]) value[118533])
    (479491 'end of statement' value[118533])
    (516423 return _void[55])
  }
  function _distribution[118973](?)._value[118550](arg _mt[118989]:_MT[238], arg this[118987]:_distribution[118973](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516427] "RVV" "temp"
    unknown call_tmp[650743] "expr temp" "maybe param" "maybe type" "temp"
    (650746 'move' call_tmp[650743](382564 call _instance _mt[243] this[118987]))
    unknown call_tmp[650748] "expr temp" "maybe param" "maybe type" "temp"
    (650751 'move' call_tmp[650748](118555 call _isPrivatized call_tmp[650743]))
    unknown call_tmp[650753] "expr temp" "maybe param" "maybe type" "temp"
    (650756 'move' call_tmp[650753](118569 call _cond_test call_tmp[650748]))
    if call_tmp[650753]
    {
      { scopeless type
        unknown call_type_tmp[492173] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[650760] "expr temp" "maybe param" "maybe type" "temp"
        (650763 'move' call_tmp[650760](382569 call _instance _mt[243] this[118987]))
        (492177 'move' call_type_tmp[492173](118558 'typeof' call_tmp[650760]))
      }
      unknown call_tmp[650767] "expr temp" "maybe param" "maybe type" "temp"
      (650770 'move' call_tmp[650767](382574 call _pid _mt[243] this[118987]))
      unknown call_tmp[650772] "expr temp" "maybe param" "maybe type" "temp"
      (650775 'move' call_tmp[650772](118561 call chpl_getPrivatizedCopy call_type_tmp[492173] call_tmp[650767]))
      (516432 'move' ret[516427](516431 'deref' call_tmp[650772]))
      gotoReturn _end__value[516425] _end__value[516425]
    }
    {
      unknown call_tmp[650779] "expr temp" "maybe param" "maybe type" "temp"
      (650782 'move' call_tmp[650779](382579 call _instance _mt[243] this[118987]))
      (516437 'move' ret[516427](516436 'deref' call_tmp[650779]))
      gotoReturn _end__value[516425] _end__value[516425]
    }
    label _end__value[516425]
    (516429 return ret[516427])
  }
  function _distribution[118973](?).chpl_forwarding_expr4__value[118578](arg _mt[118993]:_MT[238], arg this[118991]:_distribution[118973](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516443] "RVV" "temp"
    (516447 'move' ret[516443](382583 call _value _mt[243] this[118991]))
    (516445 return ret[516443])
  }
  function _distribution[118973](?)._do_destroy[118586](arg _mt[118997]:_MT[238], arg this[118995]:_distribution[118973](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown tmp[424465] "maybe param" "temp"
    unknown call_tmp[650788] "expr temp" "maybe param" "maybe type" "temp"
    (650791 'move' call_tmp[650788](382588 call _unowned _mt[243] this[118995]))
    (424476 'move' tmp[424465](118589 call ! call_tmp[650788]))
    unknown call_tmp[650793] "expr temp" "maybe param" "maybe type" "temp"
    (650796 'move' call_tmp[650793](424478 call _cond_invalid tmp[424465]))
    if call_tmp[650793]
    {
      (424481 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564903] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564904] "maybe param" "temp"
    unknown call_tmp[650798] "expr temp" "maybe param" "maybe type" "temp"
    (650801 'move' call_tmp[650798](424466 call isTrue tmp[424465]))
    (564909 'move' tmp[564904](564907 call _cond_test call_tmp[650798]))
    if tmp[564904]
    {
      unknown tmp[564911] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650805] "expr temp" "maybe param" "maybe type" "temp"
      (650808 'move' call_tmp[650805](359195 call _instance _mt[243] this[118995]))
      unknown call_tmp[650812] "expr temp" "maybe param" "maybe type" "temp"
      (650815 'move' call_tmp[650812](118598 call(118594 call (partial) singleton _mt[243] call_tmp[650805])))
      unknown call_tmp[650817] "expr temp" "maybe param" "maybe type" "temp"
      (650820 'move' call_tmp[650817](118599 call ! call_tmp[650812]))
      (564913 'move' tmp[564911](424469 call isTrue call_tmp[650817]))
      (564918 'move' tmp[564903](564915 '_paramFoldLogical' tmp[564904] tmp[564911]))
    }
    {
      (564923 'move' tmp[564903](564920 '_paramFoldLogical' tmp[564904] 0))
    }
    unknown call_tmp[650822] "expr temp" "maybe param" "maybe type" "temp"
    (650825 'move' call_tmp[650822](118647 call _cond_test tmp[564903]))
    if call_tmp[650822]
    {
      const tmp[118638] "const" "temp"
      unknown call_tmp[650829] "expr temp" "maybe param" "maybe type" "temp"
      (650832 'move' call_tmp[650829](382593 call _instance _mt[243] this[118995]))
      unknown call_tmp[650834] "expr temp" "maybe param" "maybe type" "temp"
      (650837 'move' call_tmp[650834](118635 '_wide_get_locale' call_tmp[650829]))
      (118640 'move' tmp[118638](118636 'deref' call_tmp[650834]))
      (935190 call on_fn[935186] tmp[118638])
      function on_fn[935186](const in arg dummy_locale_arg[935188]:chpl_localeID_t[209352]) : void[4] "on"
      {
        {
          unknown call_tmp[650841] "expr temp" "maybe param" "maybe type" "temp"
          (650844 'move' call_tmp[650841](359200 call _instance _mt[243] this[118995]))
          unknown call_tmp[650848] "maybe param" "maybe type" "temp"
          (650851 'move' call_tmp[650848](118609 call(118605 call (partial) remove _mt[243] call_tmp[650841])))
          unknown distToFree[118610] "dead at end of block" "insert auto destroy"
          (542867 'init var' distToFree[118610] call_tmp[650848])
          (118613 'end of statement')
          unknown call_tmp[650853] "expr temp" "maybe param" "maybe type" "temp"
          (650856 'move' call_tmp[650853](118617 call != distToFree[118610] nil[44]))
          unknown call_tmp[650858] "expr temp" "maybe param" "maybe type" "temp"
          (650861 'move' call_tmp[650858](118631 call _cond_test call_tmp[650853]))
          if call_tmp[650858]
          {
            unknown call_tmp[650863] "expr temp" "maybe param" "maybe type" "temp"
            (650866 'move' call_tmp[650863](118621 call postfix! distToFree[118610]))
            unknown call_tmp[650870] "expr temp" "maybe param" "maybe type" "temp"
            (650873 'move' call_tmp[650870](382600 call _instance _mt[243] this[118995]))
            unknown call_tmp[650875] "expr temp" "maybe param" "maybe type" "temp"
            (650878 'move' call_tmp[650875](118627 call _isPrivatized call_tmp[650870]))
            (118628 call _delete_dist call_tmp[650863] call_tmp[650875])
            (479496 'end of statement' distToFree[118610])
          }
        }
        (935193 return _void[55])
      }
      {
      }
    }
    (516449 return _void[55])
  }
  function _distribution[118973](?).deinit[118656](arg _mt[119001]:_MT[238], arg this[118999]:_distribution[118973](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (118660 call(382606 call (partial) _do_destroy _mt[243] this[118999]))
    (516451 return _void[55])
  }
  function _distribution[118973](?).clone[118667](arg _mt[119005]:_MT[238], arg this[119003]:_distribution[118973](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516455] "RVV" "temp"
    unknown call_tmp[650884] "expr temp" "maybe param" "maybe type" "temp"
    (650887 'move' call_tmp[650884](359204 call _value _mt[243] this[119003]))
    unknown call_tmp[650891] "expr temp" "maybe param" "maybe type" "temp"
    (650894 'move' call_tmp[650891](118676 call(118672 call (partial) dsiClone _mt[243] call_tmp[650884])))
    unknown call_tmp[650896] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650899 'move' call_tmp[650896](747929 'new' _distribution[118973](?) call_tmp[650891]))
    (516460 'move' ret[516455](516459 'deref' call_tmp[650896]))
    (516457 return ret[516455])
  }
  function _distribution[118973](?).newRectangularDom[118690](arg _mt[119009]:_MT[238], arg this[119007]:_distribution[118973](?), param arg rank[118687]:int(64)[13], arg idxType[118692]:_any[178](?), param arg stridable[118695]:bool[10], arg ranges[118710] :
  unknown call_tmp[650901] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[516464] "RVV" "temp"
    unknown call_tmp[650908] "expr temp" "maybe param" "maybe type" "temp"
    (650911 'move' call_tmp[650908](359209 call _value _mt[243] this[119007]))
    unknown call_tmp[650915] "maybe param" "maybe type" "temp"
    (650918 'move' call_tmp[650915](118724 call(118716 call (partial) dsiNewRectangularDom _mt[243] call_tmp[650908]) rank[118687] idxType[118692] stridable[118695] ranges[118710]))
    unknown x[118725] "dead at end of block" "insert auto destroy"
    (542869 'init var' x[118725] call_tmp[650915])
    (118728 'end of statement')
    unknown call_tmp[650922] "expr temp" "maybe param" "maybe type" "temp"
    (650925 'move' call_tmp[650922](118737 call(118733 call (partial) linksDistribution _mt[243] x[118725])))
    unknown call_tmp[650927] "expr temp" "maybe param" "maybe type" "temp"
    (650930 'move' call_tmp[650927](118749 call _cond_test call_tmp[650922]))
    if call_tmp[650927]
    {
      unknown call_tmp[650934] "expr temp" "maybe param" "maybe type" "temp"
      (650937 'move' call_tmp[650934](359214 call _value _mt[243] this[119007]))
      (118746 call(118741 call (partial) add_dom _mt[243] call_tmp[650934]) x[118725])
      (479500 'end of statement' x[118725])
    }
    (516469 'move' ret[516464](516468 'deref' x[118725]))
    gotoReturn _end_newRectangularDom[516462] _end_newRectangularDom[516462]
    (479502 'end of statement' x[118725])
    label _end_newRectangularDom[516462]
    (516466 return ret[516464])
  }
  function _distribution[118973](?).newRectangularDom[118764](arg _mt[119013]:_MT[238], arg this[119011]:_distribution[118973](?), param arg rank[118761]:int(64)[13], arg idxType[118766]:_any[178](?), param arg stridable[118769]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516475] "RVV" "temp"
    unknown ranges[118784] "dead at end of block" "insert auto destroy"
    unknown call_tmp[650941] "expr temp" "maybe param" "maybe type" "temp"
    (650944 'move' call_tmp[650941](118781 call range[64319](?) idxType[118766] bounded[64208] stridable[118769]))
    unknown call_tmp[650946] "expr temp" "maybe param" "maybe type" "temp"
    (650949 'move' call_tmp[650946](118782 call * rank[118761] call_tmp[650941]))
    (542871 'default init var' ranges[118784] call_tmp[650946])
    (118787 'end of statement')
    unknown call_tmp[650953] "expr temp" "maybe param" "maybe type" "temp"
    (650956 'move' call_tmp[650953](118795 call(382625 call (partial) newRectangularDom _mt[243] this[119011]) rank[118761] idxType[118766] stridable[118769] ranges[118784]))
    (516480 'move' ret[516475](516479 'deref' call_tmp[650953]))
    gotoReturn _end_newRectangularDom[516473] _end_newRectangularDom[516473]
    (479504 'end of statement' ranges[118784])
    label _end_newRectangularDom[516473]
    (516477 return ret[516475])
  }
  function _distribution[118973](?).newAssociativeDom[118804](arg _mt[119017]:_MT[238], arg this[119015]:_distribution[118973](?), arg idxType[118802]:_any[178](?), param arg parSafe[118808]:bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    unknown ret[516486] "RVV" "temp"
    unknown call_tmp[650960] "expr temp" "maybe param" "maybe type" "temp"
    (650963 'move' call_tmp[650960](359219 call _value _mt[243] this[119015]))
    unknown call_tmp[650967] "maybe param" "maybe type" "temp"
    (650970 'move' call_tmp[650967](118821 call(118815 call (partial) dsiNewAssociativeDom _mt[243] call_tmp[650960]) idxType[118802] parSafe[118808]))
    unknown x[118822] "dead at end of block" "insert auto destroy"
    (542873 'init var' x[118822] call_tmp[650967])
    (118825 'end of statement')
    unknown call_tmp[650974] "expr temp" "maybe param" "maybe type" "temp"
    (650977 'move' call_tmp[650974](118832 call(118828 call (partial) linksDistribution _mt[243] x[118822])))
    unknown call_tmp[650979] "expr temp" "maybe param" "maybe type" "temp"
    (650982 'move' call_tmp[650979](118842 call _cond_test call_tmp[650974]))
    if call_tmp[650979]
    {
      unknown call_tmp[650986] "expr temp" "maybe param" "maybe type" "temp"
      (650989 'move' call_tmp[650986](359224 call _value _mt[243] this[119015]))
      (118839 call(118834 call (partial) add_dom _mt[243] call_tmp[650986]) x[118822])
      (479506 'end of statement' x[118822])
    }
    (516491 'move' ret[516486](516490 'deref' x[118822]))
    gotoReturn _end_newAssociativeDom[516484] _end_newAssociativeDom[516484]
    (479508 'end of statement' x[118822])
    label _end_newAssociativeDom[516484]
    (516488 return ret[516486])
  }
  function _distribution[118973](?).newSparseDom[118857](arg _mt[119021]:_MT[238], arg this[119019]:_distribution[118973](?), param arg rank[118854]:int(64)[13], arg idxType[118859]:_any[178](?), arg dom[118862]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516497] "RVV" "temp"
    unknown call_tmp[650995] "expr temp" "maybe param" "maybe type" "temp"
    (650998 'move' call_tmp[650995](359228 call _value _mt[243] this[119019]))
    unknown call_tmp[651002] "maybe param" "maybe type" "temp"
    (651005 'move' call_tmp[651002](118875 call(118868 call (partial) dsiNewSparseDom _mt[243] call_tmp[650995]) rank[118854] idxType[118859] dom[118862]))
    unknown x[118876] "dead at end of block" "insert auto destroy"
    (542875 'init var' x[118876] call_tmp[651002])
    (118879 'end of statement')
    unknown call_tmp[651009] "expr temp" "maybe param" "maybe type" "temp"
    (651012 'move' call_tmp[651009](118886 call(118882 call (partial) linksDistribution _mt[243] x[118876])))
    unknown call_tmp[651014] "expr temp" "maybe param" "maybe type" "temp"
    (651017 'move' call_tmp[651014](118896 call _cond_test call_tmp[651009]))
    if call_tmp[651014]
    {
      unknown call_tmp[651021] "expr temp" "maybe param" "maybe type" "temp"
      (651024 'move' call_tmp[651021](359233 call _value _mt[243] this[119019]))
      (118893 call(118888 call (partial) add_dom _mt[243] call_tmp[651021]) x[118876])
      (479510 'end of statement' x[118876])
    }
    (516502 'move' ret[516497](516501 'deref' x[118876]))
    gotoReturn _end_newSparseDom[516495] _end_newSparseDom[516495]
    (479512 'end of statement' x[118876])
    label _end_newSparseDom[516495]
    (516499 return ret[516497])
  }
  function _distribution[118973](?).idxToLocale[118909](arg _mt[119025]:_MT[238], arg this[119023]:_distribution[118973](?), arg ind[118907]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516508] "RVV" "temp"
    unknown call_tmp[651030] "expr temp" "maybe param" "maybe type" "temp"
    (651033 'move' call_tmp[651030](359237 call _value _mt[243] this[119023]))
    unknown call_tmp[651037] "expr temp" "maybe param" "maybe type" "temp"
    (651040 'move' call_tmp[651037](118919 call(118914 call (partial) dsiIndexToLocale _mt[243] call_tmp[651030]) ind[118907]))
    (516513 'move' ret[516508](516512 'deref' call_tmp[651037]))
    (516510 return ret[516508])
  }
  function _distribution[118973](?).readWriteThis[118929](arg _mt[119029]:_MT[238], arg this[119027]:_distribution[118973](?), arg f[118927]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651044] "expr temp" "maybe param" "maybe type" "temp"
    (651047 'move' call_tmp[651044](382645 call _value _mt[243] this[119027]))
    (118933 call <~> f[118927] call_tmp[651044])
    (516515 return _void[55])
  }
  function _distribution[118973](?).displayRepresentation[118941](arg _mt[119033]:_MT[238], arg this[119031]:_distribution[118973](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651051] "expr temp" "maybe param" "maybe type" "temp"
    (651054 'move' call_tmp[651051](359241 call _value _mt[243] this[119031]))
    (118950 call(118946 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[651051]))
    (516517 return _void[55])
  }
  function _distribution[118973](?).targetLocales[118957](arg _mt[119037]:_MT[238], arg this[119035]:_distribution[118973](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516521] "RVV" "temp"
    unknown call_tmp[651060] "expr temp" "maybe param" "maybe type" "temp"
    (651063 'move' call_tmp[651060](359245 call _value _mt[243] this[119035]))
    unknown call_tmp[651067] "expr temp" "maybe param" "maybe type" "temp"
    (651070 'move' call_tmp[651067](118966 call(118962 call (partial) dsiTargetLocales _mt[243] call_tmp[651060])))
    (516526 'move' ret[516521](516525 'deref' call_tmp[651067]))
    (516523 return ret[516521])
  }
  function _distribution[118973](?)._pid[799639](arg _mt[799641]:_MT[238], ref arg this[799643]:_distribution[118973](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799653] "RVV" "temp"
    unknown call_tmp[799660] "expr temp" "maybe param" "maybe type" "temp"
    (799663 'move' call_tmp[799660](799647 '.' this[799643] c"_pid"))
    (799658 'move' ret[799653](799657 'addr of' call_tmp[799660]))
    (799655 return ret[799653])
  }
  function _distribution[118973](?)._instance[799665](arg _mt[799667]:_MT[238], ref arg this[799669]:_distribution[118973](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799679] "RVV" "temp"
    unknown call_tmp[799686] "expr temp" "maybe param" "maybe type" "temp"
    (799689 'move' call_tmp[799686](799673 '.' this[799669] c"_instance"))
    (799684 'move' ret[799679](799683 'addr of' call_tmp[799686]))
    (799681 return ret[799679])
  }
  function _distribution[118973](?)._unowned[799691](arg _mt[799693]:_MT[238], ref arg this[799695]:_distribution[118973](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799705] "RVV" "temp"
    unknown call_tmp[799712] "expr temp" "maybe param" "maybe type" "temp"
    (799715 'move' call_tmp[799712](799699 '.' this[799695] c"_unowned"))
    (799710 'move' ret[799705](799709 'addr of' call_tmp[799712]))
    (799707 return ret[799705])
  }
  function _distribution[118973](?).writeThis[799717](arg _mt[799721]:_MT[238], arg this[799719]:_distribution[118973](?), arg f[799720]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799730 call(799726 call (partial) readWriteThis _mt[243] this[799719]) f[799720])
    (799733 return _void[55])
  }
  function _distribution[118973](?).readThis[799737](arg _mt[799741]:_MT[238], arg this[799739]:_distribution[118973](?), arg f[799740]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799749 call(799745 call (partial) readWriteThis _mt[243] this[799739]) f[799740])
    (799753 return _void[55])
  }
  function chpl__defaultHash[799757](arg r[799759]:_distribution[118973](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[799790] "RVV" "temp"
    unknown call_tmp[799797] "expr temp" "maybe param" "maybe type" "temp"
    (799800 'move' call_tmp[799797](799776 call _unowned _mt[243] r[799759]))
    unknown call_tmp[799802] "expr temp" "maybe param" "maybe type" "temp"
    (799805 'move' call_tmp[799802](799780 call chpl__defaultHash call_tmp[799797]))
    unknown call_tmp[799807] "expr temp" "maybe param" "maybe type" "temp"
    (799810 'move' call_tmp[799807](799767 call _instance _mt[243] r[799759]))
    unknown call_tmp[799812] "expr temp" "maybe param" "maybe type" "temp"
    (799815 'move' call_tmp[799812](799771 call chpl__defaultHash call_tmp[799807]))
    unknown call_tmp[799817] "expr temp" "maybe param" "maybe type" "temp"
    (799820 'move' call_tmp[799817](799761 call _pid _mt[243] r[799759]))
    unknown call_tmp[799822] "expr temp" "maybe param" "maybe type" "temp"
    (799825 'move' call_tmp[799822](799765 call chpl__defaultHash call_tmp[799817]))
    unknown call_tmp[799827] "expr temp" "maybe param" "maybe type" "temp"
    (799830 'move' call_tmp[799827](799773 call chpl__defaultHashCombine call_tmp[799812] call_tmp[799822] 2))
    unknown call_tmp[799832] "expr temp" "maybe param" "maybe type" "temp"
    (799835 'move' call_tmp[799832](799782 call chpl__defaultHashCombine call_tmp[799802] call_tmp[799827] 3))
    (799795 'move' ret[799790](799794 'deref' call_tmp[799832]))
    (799792 return ret[799790])
  }
  type _distribution[118973](?) val _pid[118417]:int(64)[13] int(64)[13] unknown _instance[118421] "owned" val _unowned[118426]:bool[10] bool[10] forwarding ( )
  function ==[119049](arg d1[119046]:_distribution[118973](?), arg d2[119055]:_distribution[118973](?)) : _unknown[51] "inline"
  {
    unknown ret[516530] "RVV" "temp"
    unknown call_tmp[651074] "expr temp" "maybe param" "maybe type" "temp"
    (651077 'move' call_tmp[651074](119059 call _value _mt[243] d1[119046]))
    unknown call_tmp[651081] "expr temp" "maybe param" "maybe type" "temp"
    (651084 'move' call_tmp[651081](119063 call _value _mt[243] d2[119055]))
    unknown call_tmp[651086] "expr temp" "maybe param" "maybe type" "temp"
    (651089 'move' call_tmp[651086](119066 call == call_tmp[651074] call_tmp[651081]))
    unknown call_tmp[651091] "expr temp" "maybe param" "maybe type" "temp"
    (651094 'move' call_tmp[651091](119071 call _cond_test call_tmp[651086]))
    if call_tmp[651091]
    {
      (516535 'move' ret[516530](516534 'deref' 1))
      gotoReturn _end_==[516528] _end_==[516528]
    }
    unknown call_tmp[651098] "expr temp" "maybe param" "maybe type" "temp"
    (651101 'move' call_tmp[651098](119078 call _value _mt[243] d1[119046]))
    unknown call_tmp[651107] "expr temp" "maybe param" "maybe type" "temp"
    (651110 'move' call_tmp[651107](119087 call _value _mt[243] d2[119055]))
    unknown call_tmp[651112] "expr temp" "maybe param" "maybe type" "temp"
    (651115 'move' call_tmp[651112](119091 call(119083 call (partial) dsiEqualDMaps _mt[243] call_tmp[651098]) call_tmp[651107]))
    (516540 'move' ret[516530](516539 'deref' call_tmp[651112]))
    label _end_==[516528]
    (516532 return ret[516530])
  }
  function !=[119105](arg d1[119102]:_distribution[118973](?), arg d2[119111]:_distribution[118973](?)) : _unknown[51] "inline"
  {
    unknown ret[516544] "RVV" "temp"
    unknown call_tmp[651119] "expr temp" "maybe param" "maybe type" "temp"
    (651122 'move' call_tmp[651119](119115 call _value _mt[243] d1[119102]))
    unknown call_tmp[651126] "expr temp" "maybe param" "maybe type" "temp"
    (651129 'move' call_tmp[651126](119119 call _value _mt[243] d2[119111]))
    unknown call_tmp[651131] "expr temp" "maybe param" "maybe type" "temp"
    (651134 'move' call_tmp[651131](119122 call == call_tmp[651119] call_tmp[651126]))
    unknown call_tmp[651136] "expr temp" "maybe param" "maybe type" "temp"
    (651139 'move' call_tmp[651136](119127 call _cond_test call_tmp[651131]))
    if call_tmp[651136]
    {
      (516549 'move' ret[516544](516548 'deref' 0))
      gotoReturn _end_!=[516542] _end_!=[516542]
    }
    unknown call_tmp[651143] "expr temp" "maybe param" "maybe type" "temp"
    (651146 'move' call_tmp[651143](119134 call _value _mt[243] d1[119102]))
    unknown call_tmp[651152] "expr temp" "maybe param" "maybe type" "temp"
    (651155 'move' call_tmp[651152](119141 call _value _mt[243] d2[119111]))
    unknown call_tmp[651157] "expr temp" "maybe param" "maybe type" "temp"
    (651160 'move' call_tmp[651157](119145 call(119137 call (partial) dsiEqualDMaps _mt[243] call_tmp[651143]) call_tmp[651152]))
    unknown call_tmp[651162] "expr temp" "maybe param" "maybe type" "temp"
    (651165 'move' call_tmp[651162](119146 call ! call_tmp[651157]))
    (516554 'move' ret[516544](516553 'deref' call_tmp[651162]))
    label _end_!=[516542]
    (516546 return ret[516544])
  }
  function chpl_defaultComparator[119154]() : _unknown[51]
  {
    unknown ret[516558] "RVV" "temp"
    (516563 'move' ret[516558](516562 'deref' defaultComparator[267998]))
    (516560 return ret[516558])
    (355159 'used modules list'(119157 'use' Sort[267989]))
  }
  function _domain[125908](?).chpl__promotionType[119182](arg _mt[125912]:_MT[238], arg this[125910]:_domain[125908](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[516567] "RVV" "temp" "type variable"
    unknown call_tmp[651169] "expr temp" "maybe param" "maybe type" "temp"
    (651172 'move' call_tmp[651169](382654 call rank _mt[243] this[125910]))
    unknown call_tmp[651176] "expr temp" "maybe param" "maybe type" "temp"
    (651179 'move' call_tmp[651176](359257 call _value _mt[243] this[125910]))
    unknown call_tmp[651183] "expr temp" "maybe param" "maybe type" "temp"
    (651186 'move' call_tmp[651183](119187 call idxType _mt[243] call_tmp[651176]))
    unknown call_tmp[651188] "expr temp" "maybe param" "maybe type" "temp"
    (651191 'move' call_tmp[651188](119190 call chpl__buildIndexType call_tmp[651169] call_tmp[651183]))
    (516572 'move' ret[516567](516571 'deref' call_tmp[651188]))
    (516569 return ret[516567])
  }
  function _domain[125908](?).init[119203](arg _mt[125916]:_MT[238], ref arg this[125914]:_domain[125908](?), arg _pid[119200]:int(64)[13], arg _instance[119205]:_any[178](?), arg _unowned[119208]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461369] "temp"
    (461372 'init var' tmp[461369] _pid[119200] int(64)[13])
    (461374 'init field' this[125914] c"_pid" tmp[461369])
    (479524 'end of statement')
    unknown tmp[461378] "temp"
    (461380 'init var' tmp[461378] _instance[119205])
    (461382 'init field' this[125914] c"_instance" tmp[461378])
    (479525 'end of statement')
    unknown tmp[461386] "temp"
    (461389 'init var' tmp[461386] _unowned[119208] bool[10])
    (461391 'init field' this[125914] c"_unowned" tmp[461386])
    (479526 'end of statement')
    (516574 return _void[55])
  }
  function _domain[125908](?).init[119242](arg _mt[125920]:_MT[238], ref arg this[125918]:_domain[125908](?), arg value[119240]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651193] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651196 'move' call_tmp[651193](119246 'typeof' value[119240]))
    unknown call_tmp[651198] "expr temp" "maybe param" "maybe type" "temp"
    (651201 'move' call_tmp[651198](119248 call _to_unmanaged call_tmp[651193]))
    unknown call_tmp[651203] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651206 'move' call_tmp[651203](119250 'typeof' value[119240]))
    unknown call_tmp[651208] "expr temp" "maybe param" "maybe type" "temp"
    (651211 'move' call_tmp[651208](119251 call != call_tmp[651198] call_tmp[651203]))
    unknown call_tmp[651213] "expr temp" "maybe param" "maybe type" "temp"
    (651216 'move' call_tmp[651213](119258 call _cond_test call_tmp[651208]))
    if call_tmp[651213]
    {
      (119256 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[651218] "expr temp" "maybe param" "maybe type" "temp"
    (651221 'move' call_tmp[651218](119267 call _isPrivatized value[119240]))
    unknown call_tmp[651223] "expr temp" "maybe param" "maybe type" "temp"
    (651226 'move' call_tmp[651223](119313 call _cond_test call_tmp[651218]))
    if call_tmp[651223]
    {
      unknown call_tmp[651230] "expr temp" "maybe param" "maybe type" "temp"
      (651233 'move' call_tmp[651230](119269 call pid _mt[243] value[119240]))
      unknown call_tmp[651235] "expr temp" "maybe param" "maybe type" "temp"
      (651238 'move' call_tmp[651235](119273 call == call_tmp[651230] nullPid[113718]))
      unknown call_tmp[651240] "expr temp" "maybe param" "maybe type" "temp"
      (651243 'move' call_tmp[651240](119299 call _cond_test call_tmp[651235]))
      if call_tmp[651240]
      {
        unknown call_tmp[651245] "maybe param" "maybe type" "temp"
        (651248 'move' call_tmp[651245](119282 call _newPrivatizedClass value[119240]))
        unknown tmp[461395] "temp"
        (461398 'init var' tmp[461395] call_tmp[651245] int(64)[13])
        (461400 'init field' this[125918] c"_pid" tmp[461395])
        (479528 'end of statement')
      }
      {
        unknown call_tmp[651252] "maybe param" "maybe type" "temp"
        (651255 'move' call_tmp[651252](119292 call pid _mt[243] value[119240]))
        unknown tmp[461404] "temp"
        (461407 'init var' tmp[461404] call_tmp[651252] int(64)[13])
        (461409 'init field' this[125918] c"_pid" tmp[461404])
        (479529 'end of statement')
      }
    }
    {
      unknown tmp[461413] "temp"
      (461416 'init var' tmp[461413] nullPid[113718] int(64)[13])
      (461418 'init field' this[125918] c"_pid" tmp[461413])
      (479530 'end of statement')
    }
    unknown tmp[461422] "temp"
    (461424 'init var' tmp[461422] value[119240])
    (461426 'init field' this[125918] c"_instance" tmp[461422])
    (479531 'end of statement')
    val tmp[461431]:bool[10] "temp"
    (461434 'default init var' tmp[461431] bool[10])
    (461436 '.=' this[125918] c"_unowned" tmp[461431])
    (479532 'end of statement')
    (516576 return _void[55])
  }
  function _domain[125908](?).init[119333](arg _mt[125924]:_MT[238], ref arg this[125922]:_domain[125908](?), arg d[119330]:_distribution[118973](?), param arg rank[119336]:int(64)[13], arg idxType[119340]:_any[178](?) =
  int(64)[13], param arg stridable[119345]:bool[10] =
  0) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651261] "expr temp" "maybe param" "maybe type" "temp"
    (651264 'move' call_tmp[651261](119361 call(119354 call (partial) newRectangularDom _mt[243] d[119330]) rank[119336] idxType[119340] stridable[119345]))
    (119363 call(119350 call (partial) init _mt[243] this[125922]) call_tmp[651261])
    (516578 return _void[55])
  }
  function _domain[125908](?).init[119374](arg _mt[125928]:_MT[238], ref arg this[125926]:_domain[125908](?), arg d[119371]:_distribution[118973](?), param arg rank[119377]:int(64)[13], arg idxType[119381]:_any[178](?) =
  int(64)[13], param arg stridable[119386]:bool[10] =
  0, arg ranges[119402] :
  unknown call_tmp[651266] "expr temp" "maybe param" "maybe type" "temp") : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651275] "expr temp" "maybe param" "maybe type" "temp"
    (651278 'move' call_tmp[651275](119418 call(119410 call (partial) newRectangularDom _mt[243] d[119371]) rank[119377] idxType[119381] stridable[119386] ranges[119402]))
    (119420 call(119406 call (partial) init _mt[243] this[125926]) call_tmp[651275])
    (516580 return _void[55])
  }
  function _domain[125908](?).init[119431](arg _mt[125932]:_MT[238], ref arg this[125930]:_domain[125908](?), arg d[119428]:_distribution[118973](?), arg idxType[119433]:_any[178](?), param arg parSafe[119437]:bool[10] =
  1) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651284] "expr temp" "maybe param" "maybe type" "temp"
    (651287 'move' call_tmp[651284](119454 call(119448 call (partial) newAssociativeDom _mt[243] d[119428]) idxType[119433] parSafe[119437]))
    (119456 call(119442 call (partial) init _mt[243] this[125930]) call_tmp[651284])
    (516582 return _void[55])
  }
  function _domain[125908](?).init[119467](arg _mt[125936]:_MT[238], ref arg this[125934]:_domain[125908](?), arg d[119464]:_distribution[118973](?), arg dom[119470]:_domain[125908](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651295] "expr temp" "maybe param" "maybe type" "temp"
    (651298 'move' call_tmp[651295](119484 call rank _mt[243] dom[119470]))
    unknown call_tmp[651302] "expr temp" "maybe param" "maybe type" "temp"
    (651305 'move' call_tmp[651302](119489 call _value _mt[243] dom[119470]))
    unknown call_tmp[651309] "expr temp" "maybe param" "maybe type" "temp"
    (651312 'move' call_tmp[651309](119492 call idxType _mt[243] call_tmp[651302]))
    unknown call_tmp[651314] "expr temp" "maybe param" "maybe type" "temp"
    (651317 'move' call_tmp[651314](119496 call(119480 call (partial) newSparseDom _mt[243] d[119464]) call_tmp[651295] call_tmp[651309] dom[119470]))
    (119498 call(119474 call (partial) init _mt[243] this[125934]) call_tmp[651314])
    (516584 return _void[55])
  }
  function _domain[125908](?).init=[119509](arg _mt[125940]:_MT[238], ref arg this[125938]:_domain[125908](?), const  ref arg other[119506]:_domain[125908](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651323] "expr temp" "maybe param" "maybe type" "temp"
    (651326 'move' call_tmp[651323](119520 call dist _mt[243] other[119506]))
    unknown call_tmp[651330] "expr temp" "maybe param" "maybe type" "temp"
    (651333 'move' call_tmp[651330](119525 call rank _mt[243] other[119506]))
    unknown call_tmp[651337] "expr temp" "maybe param" "maybe type" "temp"
    (651340 'move' call_tmp[651337](119529 call idxType _mt[243] other[119506]))
    unknown call_tmp[651344] "expr temp" "maybe param" "maybe type" "temp"
    (651347 'move' call_tmp[651344](119533 call stridable _mt[243] other[119506]))
    unknown call_tmp[651351] "expr temp" "maybe param" "maybe type" "temp"
    (651354 'move' call_tmp[651351](119541 call(119537 call (partial) dims _mt[243] other[119506])))
    (119542 call(119516 call (partial) init _mt[243] this[125938]) call_tmp[651323] call_tmp[651330] call_tmp[651337] call_tmp[651344] call_tmp[651351])
    (516586 return _void[55])
  }
  where {
    (119514 call isRectangularDom other[119506])
  }
  function _domain[125908](?).init=[119554](arg _mt[125944]:_MT[238], ref arg this[125942]:_domain[125908](?), const  ref arg other[119551]:_domain[125908](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651356] "expr temp" "maybe param" "maybe type" "temp"
    (651359 'move' call_tmp[651356](119559 call isAssociativeDom other[119551]))
    unknown call_tmp[651361] "expr temp" "maybe param" "maybe type" "temp"
    (651364 'move' call_tmp[651361](119646 call _cond_test call_tmp[651356]))
    if call_tmp[651361]
    {
      unknown call_tmp[651370] "expr temp" "maybe param" "maybe type" "temp"
      (651373 'move' call_tmp[651370](119565 call dist _mt[243] other[119551]))
      unknown call_tmp[651377] "expr temp" "maybe param" "maybe type" "temp"
      (651380 'move' call_tmp[651377](119570 call idxType _mt[243] other[119551]))
      unknown call_tmp[651384] "expr temp" "maybe param" "maybe type" "temp"
      (651387 'move' call_tmp[651384](119574 call parSafe _mt[243] other[119551]))
      (119577 call(119561 call (partial) init _mt[243] this[125942]) call_tmp[651370] call_tmp[651377] call_tmp[651384])
    }
    {
      unknown call_tmp[651389] "expr temp" "maybe param" "maybe type" "temp"
      (651392 'move' call_tmp[651389](119583 call isSparseDom other[119551]))
      unknown call_tmp[651394] "expr temp" "maybe param" "maybe type" "temp"
      (651397 'move' call_tmp[651394](119642 call _cond_test call_tmp[651389]))
      if call_tmp[651394]
      {
        unknown call_tmp[651403] "expr temp" "maybe param" "maybe type" "temp"
        (651406 'move' call_tmp[651403](119589 call dist _mt[243] other[119551]))
        unknown call_tmp[651410] "expr temp" "maybe param" "maybe type" "temp"
        (651413 'move' call_tmp[651410](119594 call parentDom _mt[243] other[119551]))
        (119597 call(119585 call (partial) init _mt[243] this[125942]) call_tmp[651403] call_tmp[651410])
      }
      {
        unknown call_tmp[651415] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651418 'move' call_tmp[651415](119620 'typeof' this[125942]))
        unknown call_tmp[651420] "expr temp" "maybe param" "maybe type" "temp"
        (651423 'move' call_tmp[651420](119622 call _cast string[26] call_tmp[651415]))
        unknown call_tmp[651425] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651428 'move' call_tmp[651425](119626 'typeof' other[119551]))
        unknown call_tmp[651430] "expr temp" "maybe param" "maybe type" "temp"
        (651433 'move' call_tmp[651430](119628 call _cast string[26] call_tmp[651425]))
        (119631 call compilerError "Cannot initialize '" call_tmp[651420] "' from '" call_tmp[651430] "'")
        (479540 'end of statement')
        (119640 call(119635 call (partial) init _mt[243] this[125942]) nil[44])
      }
    }
    unknown call_tmp[651439] "expr temp" "maybe param" "maybe type" "temp"
    (651442 'move' call_tmp[651439](359296 call _instance _mt[243] this[125942]))
    (119662 call(119655 call (partial) dsiAssignDomain _mt[243] call_tmp[651439]) other[119551](lhsPrivate = 1))
    (516588 return _void[55])
  }
  function _domain[125908](?)._value[119668](arg _mt[125948]:_MT[238], arg this[125946]:_domain[125908](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516592] "RVV" "temp"
    unknown call_tmp[651448] "expr temp" "maybe param" "maybe type" "temp"
    (651451 'move' call_tmp[651448](382696 call _instance _mt[243] this[125946]))
    unknown call_tmp[651453] "expr temp" "maybe param" "maybe type" "temp"
    (651456 'move' call_tmp[651453](119673 call _isPrivatized call_tmp[651448]))
    unknown call_tmp[651458] "expr temp" "maybe param" "maybe type" "temp"
    (651461 'move' call_tmp[651458](119687 call _cond_test call_tmp[651453]))
    if call_tmp[651458]
    {
      { scopeless type
        unknown call_type_tmp[492179] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[651465] "expr temp" "maybe param" "maybe type" "temp"
        (651468 'move' call_tmp[651465](382701 call _instance _mt[243] this[125946]))
        (492183 'move' call_type_tmp[492179](119676 'typeof' call_tmp[651465]))
      }
      unknown call_tmp[651472] "expr temp" "maybe param" "maybe type" "temp"
      (651475 'move' call_tmp[651472](382706 call _pid _mt[243] this[125946]))
      unknown call_tmp[651477] "expr temp" "maybe param" "maybe type" "temp"
      (651480 'move' call_tmp[651477](119679 call chpl_getPrivatizedCopy call_type_tmp[492179] call_tmp[651472]))
      (516597 'move' ret[516592](516596 'deref' call_tmp[651477]))
      gotoReturn _end__value[516590] _end__value[516590]
    }
    {
      unknown call_tmp[651484] "expr temp" "maybe param" "maybe type" "temp"
      (651487 'move' call_tmp[651484](382711 call _instance _mt[243] this[125946]))
      (516602 'move' ret[516592](516601 'deref' call_tmp[651484]))
      gotoReturn _end__value[516590] _end__value[516590]
    }
    label _end__value[516590]
    (516594 return ret[516592])
  }
  function _domain[125908](?).chpl_forwarding_expr5__value[119697](arg _mt[125952]:_MT[238], arg this[125950]:_domain[125908](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516608] "RVV" "temp"
    (516612 'move' ret[516608](382715 call _value _mt[243] this[125950]))
    (516610 return ret[516608])
  }
  function _domain[125908](?).chpl__serialize[119705](arg _mt[125956]:_MT[238], arg this[125954]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516616] "RVV" "temp"
    unknown call_tmp[651493] "expr temp" "maybe param" "maybe type" "temp"
    (651496 'move' call_tmp[651493](119717 call _value _mt[243] this[125954]))
    unknown call_tmp[651500] "expr temp" "maybe param" "maybe type" "temp"
    (651503 'move' call_tmp[651500](119726 call(119722 call (partial) chpl__serialize _mt[243] call_tmp[651493])))
    (516621 'move' ret[516616](516620 'deref' call_tmp[651500]))
    (516618 return ret[516616])
  }
  where {
    unknown call_tmp[651507] "expr temp" "maybe param" "maybe type" "temp"
    (651510 'move' call_tmp[651507](119708 call _value _mt[243] this[125954]))
    (119715 call(119711 call (partial) isDefaultRectangular _mt[243] call_tmp[651507]))
  }
  function _domain[125908](?).chpl__deserialize[119737](arg _mt[125960]:_MT[238], arg this[125958]:_domain[125908](?), arg data[119735]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516625] "RVV" "temp"
    unknown valueType[119744] "dead at end of block" "insert auto destroy" "type variable"(119743 'static field type' this[125958] "_instance")
    (542880 'move' valueType[119744](542877 'static field type' this[125958] "_instance"))
    (479546 'end of statement')
    unknown call_tmp[651514] "expr temp" "maybe param" "maybe type" "temp"
    (651517 'move' call_tmp[651514](119753 call _to_borrowed valueType[119744]))
    unknown call_tmp[651521] "expr temp" "maybe param" "maybe type" "temp"
    (651524 'move' call_tmp[651521](119761 call(119756 call (partial) chpl__deserialize _mt[243] call_tmp[651514]) data[119735]))
    unknown call_tmp[651526] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (651529 'move' call_tmp[651526](747930 'new' _domain[125908](?) call_tmp[651521]))
    (516630 'move' ret[516625](516629 'deref' call_tmp[651526]))
    gotoReturn _end_chpl__deserialize[516623] _end_chpl__deserialize[516623]
    (479547 'end of statement' valueType[119744])
    label _end_chpl__deserialize[516623]
    (516627 return ret[516625])
  }
  function _domain[125908](?)._do_destroy[119770](arg _mt[125964]:_MT[238], arg this[125962]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[651533] "expr temp" "maybe param" "maybe type" "temp"
    (651536 'move' call_tmp[651533](382724 call _unowned _mt[243] this[125962]))
    unknown call_tmp[651538] "expr temp" "maybe param" "maybe type" "temp"
    (651541 'move' call_tmp[651538](119773 call ! call_tmp[651533]))
    unknown call_tmp[651543] "expr temp" "maybe param" "maybe type" "temp"
    (651546 'move' call_tmp[651543](119889 call _cond_test call_tmp[651538]))
    if call_tmp[651543]
    {
      const tmp[119879] "const" "temp"
      unknown call_tmp[651550] "expr temp" "maybe param" "maybe type" "temp"
      (651553 'move' call_tmp[651550](382729 call _instance _mt[243] this[125962]))
      unknown call_tmp[651555] "expr temp" "maybe param" "maybe type" "temp"
      (651558 'move' call_tmp[651555](119876 '_wide_get_locale' call_tmp[651550]))
      (119881 'move' tmp[119879](119877 'deref' call_tmp[651555]))
      (935199 call on_fn[935195] tmp[119879])
      function on_fn[935195](const in arg dummy_locale_arg[935197]:chpl_localeID_t[209352]) : void[4] "on"
      {
        {
          unknown call_tmp[651562] "maybe param" "maybe type" "temp"
          (651565 'move' call_tmp[651562](382734 call _instance _mt[243] this[125962]))
          const inst[119777] "dead at end of block" "const" "insert auto destroy"
          (542882 'init var' inst[119777] call_tmp[651562])
          (119780 'end of statement')
          unknown call_tmp[651569] "maybe param" "maybe type" "temp"
          (651572 'move' call_tmp[651569](119792 call(119788 call (partial) remove _mt[243] inst[119777])))
          unknown tmp[119793] "dead at end of block" "insert auto destroy" "temp"
          (542884 'init var' tmp[119793] call_tmp[651569])
          (119800 call _check_tuple_var_decl tmp[119793] 2)
          (479549 'end of statement')
          unknown call_tmp[651574] "maybe param" "maybe type" "temp"
          (651577 'move' call_tmp[651574](119794 call tmp[119793] 0))
          unknown domToFree[119782] "dead at end of block" "insert auto destroy"
          (542886 'init var' domToFree[119782] call_tmp[651574])
          unknown call_tmp[651579] "maybe param" "maybe type" "temp"
          (651582 'move' call_tmp[651579](119797 call tmp[119793] 1))
          unknown distToRemove[119784] "dead at end of block" "insert auto destroy"
          (542888 'init var' distToRemove[119784] call_tmp[651579])
          (119805 'end of statement')
          unknown distToFree[119810] "dead at end of block" "insert auto destroy"
          (542890 'init var' distToFree[119810] nil[44] unmanaged BaseDist?[415502])
          (119813 'end of statement')
          unknown call_tmp[651584] "expr temp" "maybe param" "maybe type" "temp"
          (651587 'move' call_tmp[651584](119816 call != distToRemove[119784] nil[44]))
          unknown call_tmp[651589] "expr temp" "maybe param" "maybe type" "temp"
          (651592 'move' call_tmp[651589](119831 call _cond_test call_tmp[651584]))
          if call_tmp[651589]
          {
            unknown call_tmp[651594] "expr temp" "maybe param" "maybe type" "temp"
            (651597 'move' call_tmp[651594](119820 call postfix! distToRemove[119784]))
            unknown call_tmp[651601] "expr temp" "maybe param" "maybe type" "temp"
            (651604 'move' call_tmp[651601](119826 call(119822 call (partial) remove _mt[243] call_tmp[651594])))
            (119827 call = distToFree[119810] call_tmp[651601])
            (479550 'end of statement' distToFree[119810] distToRemove[119784])
          }
          unknown call_tmp[651606] "expr temp" "maybe param" "maybe type" "temp"
          (651609 'move' call_tmp[651606](119837 call != domToFree[119782] nil[44]))
          unknown call_tmp[651611] "expr temp" "maybe param" "maybe type" "temp"
          (651614 'move' call_tmp[651611](119848 call _cond_test call_tmp[651606]))
          if call_tmp[651611]
          {
            unknown call_tmp[651616] "expr temp" "maybe param" "maybe type" "temp"
            (651619 'move' call_tmp[651616](119845 call _isPrivatized inst[119777]))
            (119846 call _delete_dom inst[119777] call_tmp[651616])
            (479553 'end of statement' inst[119777] inst[119777])
          }
          unknown call_tmp[651621] "expr temp" "maybe param" "maybe type" "temp"
          (651624 'move' call_tmp[651621](119855 call != distToFree[119810] nil[44]))
          unknown call_tmp[651626] "expr temp" "maybe param" "maybe type" "temp"
          (651629 'move' call_tmp[651626](119871 call _cond_test call_tmp[651621]))
          if call_tmp[651626]
          {
            unknown call_tmp[651631] "expr temp" "maybe param" "maybe type" "temp"
            (651634 'move' call_tmp[651631](119859 call postfix! distToFree[119810]))
            unknown call_tmp[651638] "expr temp" "maybe param" "maybe type" "temp"
            (651641 'move' call_tmp[651638](119864 call dist _mt[243] inst[119777]))
            unknown call_tmp[651643] "expr temp" "maybe param" "maybe type" "temp"
            (651646 'move' call_tmp[651643](119868 call _isPrivatized call_tmp[651638]))
            (119869 call _delete_dist call_tmp[651631] call_tmp[651643])
            (479556 'end of statement' distToFree[119810] inst[119777])
          }
        }
        (935202 return _void[55])
      }
      {
      }
    }
    {
    }
    (516634 return _void[55])
  }
  function _domain[125908](?).deinit[119898](arg _mt[125968]:_MT[238], arg this[125966]:_domain[125908](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (119902 call(382747 call (partial) _do_destroy _mt[243] this[125966]))
    (516636 return _void[55])
  }
  function _domain[125908](?).dist[119909](arg _mt[125972]:_MT[238], arg this[125970]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[516640] "RVV" "temp"
    unknown call_tmp[651652] "expr temp" "maybe param" "maybe type" "temp"
    (651655 'move' call_tmp[651652](359304 call _value _mt[243] this[125970]))
    unknown call_tmp[651659] "expr temp" "maybe param" "maybe type" "temp"
    (651662 'move' call_tmp[651659](119913 call dist _mt[243] call_tmp[651652]))
    unknown call_tmp[651664] "expr temp" "maybe param" "maybe type" "temp"
    (651667 'move' call_tmp[651664](119917 call _getDistribution call_tmp[651659]))
    (516645 'move' ret[516640](516644 'deref' call_tmp[651664]))
    (516642 return ret[516640])
  }
  function _domain[125908](?).rank[119925](arg _mt[125976]:_MT[238], arg this[125974]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516649] "RVV" "param" "temp"
    unknown tmp[424486] "maybe param" "temp"
    (424497 'move' tmp[424486](119930 call isRectangularDom this[125974]))
    unknown call_tmp[651669] "expr temp" "maybe param" "maybe type" "temp"
    (651672 'move' call_tmp[651669](424499 call _cond_invalid tmp[424486]))
    if call_tmp[651669]
    {
      (424502 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564930] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564931] "maybe param" "temp"
    unknown call_tmp[651674] "expr temp" "maybe param" "maybe type" "temp"
    (651677 'move' call_tmp[651674](424487 call isTrue tmp[424486]))
    (564936 'move' tmp[564931](564934 call _cond_test call_tmp[651674]))
    if tmp[564931]
    {
      (564941 'move' tmp[564930](564938 '_paramFoldLogical' tmp[564931] 1))
    }
    {
      unknown tmp[564943] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651679] "expr temp" "maybe param" "maybe type" "temp"
      (651682 'move' call_tmp[651679](119934 call isSparseDom this[125974]))
      (564945 'move' tmp[564943](424491 call isTrue call_tmp[651679]))
      (564950 'move' tmp[564930](564947 '_paramFoldLogical' tmp[564931] tmp[564943]))
    }
    unknown call_tmp[651684] "expr temp" "maybe param" "maybe type" "temp"
    (651687 'move' call_tmp[651684](119946 call _cond_test tmp[564930]))
    if call_tmp[651684]
    {
      unknown call_tmp[651691] "expr temp" "maybe param" "maybe type" "temp"
      (651694 'move' call_tmp[651691](359308 call _value _mt[243] this[125974]))
      unknown call_tmp[651698] "expr temp" "maybe param" "maybe type" "temp"
      (651701 'move' call_tmp[651698](119938 call rank _mt[243] call_tmp[651691]))
      (516654 'move' ret[516649](516653 'deref' call_tmp[651698]))
      gotoReturn _end_rank[516647] _end_rank[516647]
    }
    {
      (516659 'move' ret[516649](516658 'deref' 1))
      gotoReturn _end_rank[516647] _end_rank[516647]
    }
    label _end_rank[516647]
    (516651 return ret[516649])
  }
  function _domain[125908](?).idxType[119957](arg _mt[125980]:_MT[238], arg this[125978]:_domain[125908](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516665] "RVV" "temp" "type variable"
    unknown call_tmp[651705] "expr temp" "maybe param" "maybe type" "temp"
    (651708 'move' call_tmp[651705](359312 call _value _mt[243] this[125978]))
    unknown call_tmp[651712] "expr temp" "maybe param" "maybe type" "temp"
    (651715 'move' call_tmp[651712](119960 call idxType _mt[243] call_tmp[651705]))
    (516670 'move' ret[516665](516669 'deref' call_tmp[651712]))
    (516667 return ret[516665])
  }
  function _domain[125908](?).intIdxType[119970](arg _mt[125984]:_MT[238], arg this[125982]:_domain[125908](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516674] "RVV" "temp" "type variable"
    unknown call_tmp[651719] "expr temp" "maybe param" "maybe type" "temp"
    (651722 'move' call_tmp[651719](359316 call _value _mt[243] this[125982]))
    unknown call_tmp[651726] "expr temp" "maybe param" "maybe type" "temp"
    (651729 'move' call_tmp[651726](119974 call idxType _mt[243] call_tmp[651719]))
    unknown call_tmp[651731] "expr temp" "maybe param" "maybe type" "temp"
    (651734 'move' call_tmp[651731](119978 call chpl__idxTypeToIntIdxType call_tmp[651726]))
    (516679 'move' ret[516674](516678 'deref' call_tmp[651731]))
    (516676 return ret[516674])
  }
  function _domain[125908](?).stridable[119986](arg _mt[125988]:_MT[238], arg this[125986]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516683] "RVV" "param" "temp"
    unknown call_tmp[651738] "expr temp" "maybe param" "maybe type" "temp"
    (651741 'move' call_tmp[651738](359320 call _value _mt[243] this[125986]))
    unknown call_tmp[651745] "expr temp" "maybe param" "maybe type" "temp"
    (651748 'move' call_tmp[651745](119993 call stridable _mt[243] call_tmp[651738]))
    (516688 'move' ret[516683](516687 'deref' call_tmp[651745]))
    (516685 return ret[516683])
  }
  where {
    (119991 call isRectangularDom this[125986])
  }
  function _domain[125908](?).stridable[120004](arg _mt[125992]:_MT[238], arg this[125990]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516692] "RVV" "param" "temp"
    unknown call_tmp[651752] "expr temp" "maybe param" "maybe type" "temp"
    (651755 'move' call_tmp[651752](359324 call _value _mt[243] this[125990]))
    unknown call_tmp[651759] "expr temp" "maybe param" "maybe type" "temp"
    (651762 'move' call_tmp[651759](120011 call parentDom _mt[243] call_tmp[651752]))
    unknown call_tmp[651766] "expr temp" "maybe param" "maybe type" "temp"
    (651769 'move' call_tmp[651766](120014 call stridable _mt[243] call_tmp[651759]))
    (516697 'move' ret[516692](516696 'deref' call_tmp[651766]))
    (516694 return ret[516692])
  }
  where {
    (120009 call isSparseDom this[125990])
  }
  function _domain[125908](?).stridable[120025](arg _mt[125996]:_MT[238], arg this[125994]:_domain[125908](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (120050 call compilerError "associative domains do not support .stridable")
    (516699 return _void[55])
  }
  where {
    (120030 call isAssociativeDom this[125994])
  }
  function _domain[125908](?).these[120058](arg _mt[126000]:_MT[238], arg this[125998]:_domain[125908](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[516703] "RVV" "temp"
    {
      unknown _indexOfInterest[120071] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120072] "expr temp" "temp"
      unknown call_tmp[651773] "expr temp" "maybe param" "maybe type" "temp"
      (651776 'move' call_tmp[651773](359328 call _value _mt[243] this[125998]))
      unknown call_tmp[651780] "expr temp" "maybe param" "maybe type" "temp"
      (651783 'move' call_tmp[651780](120066 call(120062 call (partial) these _mt[243] call_tmp[651773])))
      (120081 'move' _iterator[120072](120079 call _getIterator call_tmp[651780]))
      Defer
      {
        {
          (120098 call _freeIterator _iterator[120072])
        }
      }
      { scopeless type
        (120087 'move' _indexOfInterest[120071](120084 call iteratorIndex _iterator[120072]))
      }
      ForLoop[120073]
      {
        unknown i[120091] "index var" "insert auto destroy"
        (479570 'end of statement')
        (120093 'move' i[120091] _indexOfInterest[120071])
        (479571 'end of statement' i[120091])
        {
          unknown yret[516707] "YVV" "temp"
          (516710 'move' yret[516707](516709 'deref' i[120091]))
          (516712 yield yret[516707])
          (479573 'end of statement' i[120091])
        }
        label _continueLabel[120076]
        _indexOfInterest[120071]
        _iterator[120072]
      }
      label _breakLabel[120077]
    }
    (516705 return ret[516703])
  }
  function _domain[125908](?).these[120114](arg _mt[126004]:_MT[238], arg this[126002]:_domain[125908](?), param arg tag[120111]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516716] "RVV" "temp"
    {
      unknown _indexOfInterest[120173] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120174] "expr temp" "temp"
      unknown call_tmp[651787] "expr temp" "maybe param" "maybe type" "temp"
      (651790 'move' call_tmp[651787](359333 call _value _mt[243] this[126002]))
      unknown call_tmp[651794] "expr temp" "maybe param" "maybe type" "temp"
      (651797 'move' call_tmp[651794](120169 call(120164 call (partial) these _mt[243] call_tmp[651787]) tag[120111]))
      (120183 'move' _iterator[120174](120181 call _getIterator call_tmp[651794]))
      Defer
      {
        {
          (120200 call _freeIterator _iterator[120174])
        }
      }
      { scopeless type
        (120189 'move' _indexOfInterest[120173](120186 call iteratorIndex _iterator[120174]))
      }
      ForLoop[120175]
      {
        unknown i[120193] "index var" "insert auto destroy"
        (479576 'end of statement')
        (120195 'move' i[120193] _indexOfInterest[120173])
        (479577 'end of statement' i[120193])
        unknown yret[516720] "YVV" "temp"
        (516723 'move' yret[516720](516722 'deref' i[120193]))
        (516725 yield yret[516720])
        (479579 'end of statement' i[120193])
        label _continueLabel[120178]
        _indexOfInterest[120173]
        _iterator[120174]
      }
      label _breakLabel[120179]
    }
    (516718 return ret[516716])
  }
  where {
    unknown tmp[424507] "maybe param" "temp"
    (424518 'move' tmp[424507](120121 call == tag[120111] standalone[451]))
    unknown call_tmp[651799] "expr temp" "maybe param" "maybe type" "temp"
    (651802 'move' call_tmp[651799](424520 call _cond_invalid tmp[424507]))
    if call_tmp[651799]
    {
      (424523 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564957] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564958] "maybe param" "temp"
    unknown call_tmp[651804] "expr temp" "maybe param" "maybe type" "temp"
    (651807 'move' call_tmp[651804](424508 call isTrue tmp[424507]))
    (564963 'move' tmp[564958](564961 call _cond_test call_tmp[651804]))
    if tmp[564958]
    {
      unknown tmp[564965] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651811] "expr temp" "maybe param" "maybe type" "temp"
      (651814 'move' call_tmp[651811](382759 call _value _mt[243] this[126002]))
      unknown call_tmp[651816] "expr temp" "maybe param" "maybe type" "temp"
      (651819 'move' call_tmp[651816](120159 'method call resolves' call_tmp[651811] "these"(tag = tag[120111])))
      (564967 'move' tmp[564965](424511 call isTrue call_tmp[651816]))
      (564972 'move' tmp[564957](564969 '_paramFoldLogical' tmp[564958] tmp[564965]))
    }
    {
      (564977 'move' tmp[564957](564974 '_paramFoldLogical' tmp[564958] 0))
    }
    (748321 call chpl_statementLevelSymbol tmp[564957])
  }
  function _domain[125908](?).these[120217](arg _mt[126008]:_MT[238], arg this[126006]:_domain[125908](?), param arg tag[120214]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516729] "RVV" "temp"
    {
      unknown _indexOfInterest[120237] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120238] "expr temp" "temp"
      unknown call_tmp[651823] "expr temp" "maybe param" "maybe type" "temp"
      (651826 'move' call_tmp[651823](359338 call _value _mt[243] this[126006]))
      unknown call_tmp[651830] "expr temp" "maybe param" "maybe type" "temp"
      (651833 'move' call_tmp[651830](120233 call(120228 call (partial) these _mt[243] call_tmp[651823]) tag[120214]))
      (120247 'move' _iterator[120238](120245 call _getIterator call_tmp[651830]))
      Defer
      {
        {
          (120264 call _freeIterator _iterator[120238])
        }
      }
      { scopeless type
        (120253 'move' _indexOfInterest[120237](120250 call iteratorIndex _iterator[120238]))
      }
      ForLoop[120239]
      {
        unknown followThis[120257] "index var" "insert auto destroy"
        (479582 'end of statement')
        (120259 'move' followThis[120257] _indexOfInterest[120237])
        (479583 'end of statement' followThis[120257])
        unknown yret[516733] "YVV" "temp"
        (516736 'move' yret[516733](516735 'deref' followThis[120257]))
        (516738 yield yret[516733])
        (479585 'end of statement' followThis[120257])
        label _continueLabel[120242]
        _indexOfInterest[120237]
        _iterator[120238]
      }
      label _breakLabel[120243]
    }
    (516731 return ret[516729])
  }
  where {
    (120224 call == tag[120214] leader[447])
  }
  function _domain[125908](?).these[120281](arg _mt[126012]:_MT[238], arg this[126010]:_domain[125908](?), param arg tag[120278]:iterKind[453], arg followThis[120283]:_any[178](?), param arg fast[120287]:bool[10] =
  0) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516742] "RVV" "temp"
    unknown call_tmp[651837] "expr temp" "maybe param" "maybe type" "temp"
    (651840 'move' call_tmp[651837](382772 call _value _mt[243] this[126010]))
    unknown call_tmp[651842] "expr temp" "maybe param" "maybe type" "temp"
    (651845 'move' call_tmp[651842](120307 'method call resolves' call_tmp[651837] "these"(tag = tag[120278]) followThis[120283](fast = fast[120287])))
    unknown call_tmp[651847] "expr temp" "maybe param" "maybe type" "temp"
    (651850 'move' call_tmp[651847](120405 call _cond_test call_tmp[651842]))
    if call_tmp[651847]
    {
      {
        unknown _indexOfInterest[120323] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120324] "expr temp" "temp"
        unknown call_tmp[651854] "expr temp" "maybe param" "maybe type" "temp"
        (651857 'move' call_tmp[651854](359343 call _value _mt[243] this[126010]))
        unknown call_tmp[651861] "expr temp" "maybe param" "maybe type" "temp"
        (651864 'move' call_tmp[651861](120319 call(120310 call (partial) these _mt[243] call_tmp[651854])(tag = tag[120278]) followThis[120283](fast = fast[120287])))
        (120333 'move' _iterator[120324](120331 call _getIterator call_tmp[651861]))
        Defer
        {
          {
            (120350 call _freeIterator _iterator[120324])
          }
        }
        { scopeless type
          (120339 'move' _indexOfInterest[120323](120336 call iteratorIndex _iterator[120324]))
        }
        ForLoop[120325]
        {
          unknown i[120343] "index var" "insert auto destroy"
          (479588 'end of statement')
          (120345 'move' i[120343] _indexOfInterest[120323])
          (479589 'end of statement' i[120343])
          unknown yret[516746] "YVV" "temp"
          (516749 'move' yret[516746](516748 'deref' i[120343]))
          (516751 yield yret[516746])
          (479591 'end of statement' i[120343])
          label _continueLabel[120328]
          _indexOfInterest[120323]
          _iterator[120324]
        }
        label _breakLabel[120329]
      }
    }
    {
      {
        unknown _indexOfInterest[120370] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120371] "expr temp" "temp"
        unknown call_tmp[651868] "expr temp" "maybe param" "maybe type" "temp"
        (651871 'move' call_tmp[651868](359347 call _value _mt[243] this[126010]))
        unknown call_tmp[651875] "expr temp" "maybe param" "maybe type" "temp"
        (651878 'move' call_tmp[651875](120366 call(120360 call (partial) these _mt[243] call_tmp[651868]) tag[120278] followThis[120283]))
        (120380 'move' _iterator[120371](120378 call _getIterator call_tmp[651875]))
        Defer
        {
          {
            (120397 call _freeIterator _iterator[120371])
          }
        }
        { scopeless type
          (120386 'move' _indexOfInterest[120370](120383 call iteratorIndex _iterator[120371]))
        }
        ForLoop[120372]
        {
          unknown i[120390] "index var" "insert auto destroy"
          (479594 'end of statement')
          (120392 'move' i[120390] _indexOfInterest[120370])
          (479595 'end of statement' i[120390])
          unknown yret[516753] "YVV" "temp"
          (516756 'move' yret[516753](516755 'deref' i[120390]))
          (516758 yield yret[516753])
          (479597 'end of statement' i[120390])
          label _continueLabel[120375]
          _indexOfInterest[120370]
          _iterator[120371]
        }
        label _breakLabel[120376]
      }
    }
    (516744 return ret[516742])
  }
  where {
    (120296 call == tag[120278] follower[449])
  }
  function _domain[125908](?).this[120419](arg _mt[126016]:_MT[238], arg this[126014]:_domain[125908](?), arg d[120416]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516762] "RVV" "temp"
    unknown call_tmp[651882] "expr temp" "maybe param" "maybe type" "temp"
    (651885 'move' call_tmp[651882](120422 call rank _mt[243] d[120416]))
    unknown call_tmp[651889] "expr temp" "maybe param" "maybe type" "temp"
    (651892 'move' call_tmp[651889](382787 call rank _mt[243] this[126014]))
    unknown call_tmp[651894] "expr temp" "maybe param" "maybe type" "temp"
    (651897 'move' call_tmp[651894](120426 call == call_tmp[651882] call_tmp[651889]))
    unknown call_tmp[651899] "expr temp" "maybe param" "maybe type" "temp"
    (651902 'move' call_tmp[651899](120461 call _cond_test call_tmp[651894]))
    if call_tmp[651899]
    {
      unknown call_tmp[651906] "expr temp" "maybe param" "maybe type" "temp"
      (651909 'move' call_tmp[651906](120434 call(120430 call (partial) getIndices _mt[243] d[120416])))
      unknown call_tmp[651911] "expr temp" "maybe param" "maybe type" "temp"
      (651914 'move' call_tmp[651911](120437 call this[126014](120435 'expand_tuple' call_tmp[651906])))
      (516767 'move' ret[516762](516766 'deref' call_tmp[651911]))
      gotoReturn _end_this[516760] _end_this[516760]
    }
    {
      (120459 call compilerError "slicing a domain with a domain of a different rank")
    }
    label _end_this[516760]
    (516764 return ret[516762])
  }
  function _domain[125908](?).this[120476](arg _mt[126020]:_MT[238], arg this[126018]:_domain[125908](?), arg ranges[120473]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516773] "RVV" "temp"
    unknown tmp[424528] "maybe param" "temp"
    unknown call_tmp[651920] "expr temp" "maybe param" "maybe type" "temp"
    (651923 'move' call_tmp[651920](359353 call _value _mt[243] this[126018]))
    (424539 'move' tmp[424528](120483 call stridable _mt[243] call_tmp[651920]))
    unknown call_tmp[651927] "expr temp" "maybe param" "maybe type" "temp"
    (651930 'move' call_tmp[651927](424541 call _cond_invalid tmp[424528]))
    if call_tmp[651927]
    {
      (424544 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown stridable[120492] "dead at end of block" "param"
    unknown tmp[564984] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564985] "maybe param" "temp"
    unknown call_tmp[651932] "expr temp" "maybe param" "maybe type" "temp"
    (651935 'move' call_tmp[651932](424529 call isTrue tmp[424528]))
    (564990 'move' tmp[564985](564988 call _cond_test call_tmp[651932]))
    if tmp[564985]
    {
      (564995 'move' tmp[564984](564992 '_paramFoldLogical' tmp[564985] 1))
    }
    {
      unknown tmp[564997] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651937] "expr temp" "maybe param" "maybe type" "temp"
      (651940 'move' call_tmp[651937](120489 call chpl__anyStridable ranges[120473]))
      (564999 'move' tmp[564997](424533 call isTrue call_tmp[651937]))
      (565004 'move' tmp[564984](565001 '_paramFoldLogical' tmp[564985] tmp[564997]))
    }
    (542892 'init var' stridable[120492] tmp[564984])
    (120495 'end of statement')
    unknown r[120512] "dead at end of block" "insert auto destroy"
    unknown call_tmp[651944] "expr temp" "maybe param" "maybe type" "temp"
    (651947 'move' call_tmp[651944](382798 call rank _mt[243] this[126018]))
    unknown call_tmp[651951] "expr temp" "maybe param" "maybe type" "temp"
    (651954 'move' call_tmp[651951](359357 call _value _mt[243] this[126018]))
    unknown call_tmp[651958] "expr temp" "maybe param" "maybe type" "temp"
    (651961 'move' call_tmp[651958](120500 call idxType _mt[243] call_tmp[651951]))
    unknown call_tmp[651963] "expr temp" "maybe param" "maybe type" "temp"
    (651966 'move' call_tmp[651963](120509 call range[64319](?) call_tmp[651958] bounded[64208] stridable[120492]))
    unknown call_tmp[651968] "expr temp" "maybe param" "maybe type" "temp"
    (651971 'move' call_tmp[651968](120510 call * call_tmp[651944] call_tmp[651963]))
    (542894 'default init var' r[120512] call_tmp[651968])
    (120515 'end of statement')
    {
      unknown i[120544] "dead at end of block" "insert auto destroy"
      (542896 'init var' i[120544] 0)
      (479602 'end of statement')
      unknown tmp[120545] "maybe param" "temp"
      unknown call_tmp[651975] "expr temp" "maybe param" "maybe type" "temp"
      (651978 'move' call_tmp[651975](382804 call rank _mt[243] this[126018]))
      unknown call_tmp[651980] "expr temp" "maybe param" "maybe type" "temp"
      (651983 'move' call_tmp[651980](120519 call - call_tmp[651975] 1))
      (120557 'move' tmp[120545](120555 call chpl_compute_low_param_loop_bound 0 call_tmp[651980]))
      unknown tmp[120546] "maybe param" "temp"
      unknown call_tmp[651987] "expr temp" "maybe param" "maybe type" "temp"
      (651990 'move' call_tmp[651987](382813 call rank _mt[243] this[126018]))
      unknown call_tmp[651992] "expr temp" "maybe param" "maybe type" "temp"
      (651995 'move' call_tmp[651992](120562 call - call_tmp[651987] 1))
      (120567 'move' tmp[120546](120565 call chpl_compute_high_param_loop_bound 0 call_tmp[651992]))
      unknown tmp[120547] "maybe param" "temp"
      (120570 'move' tmp[120547] 1)
      ParamForLoop[120572]
      { i[120544] tmp[120545] tmp[120546] tmp[120547]
        {
          unknown call_tmp[651997] "expr temp" "maybe param" "maybe type" "temp"
          (652000 'move' call_tmp[651997](120526 call r[120512] i[120544]))
          unknown call_tmp[652004] "expr temp" "maybe param" "maybe type" "temp"
          (652007 'move' call_tmp[652004](359362 call _value _mt[243] this[126018]))
          unknown call_tmp[652011] "expr temp" "maybe param" "maybe type" "temp"
          (652014 'move' call_tmp[652011](120533 call(120528 call (partial) dsiDim _mt[243] call_tmp[652004]) i[120544]))
          unknown call_tmp[652016] "expr temp" "maybe param" "maybe type" "temp"
          (652019 'move' call_tmp[652016](120537 call ranges[120473] i[120544]))
          unknown call_tmp[652021] "expr temp" "maybe param" "maybe type" "temp"
          (652024 'move' call_tmp[652021](120539 call call_tmp[652011] call_tmp[652016]))
          (120540 call = call_tmp[651997] call_tmp[652021])
          (479603 'end of statement' r[120512] i[120544] i[120544] i[120544])
        }
      }
      label _unused_continueLabel[120549]
      label _breakLabel[120548]
    }
    unknown call_tmp[652028] "expr temp" "maybe param" "maybe type" "temp"
    (652031 'move' call_tmp[652028](382818 call dist _mt[243] this[126018]))
    unknown call_tmp[652035] "expr temp" "maybe param" "maybe type" "temp"
    (652038 'move' call_tmp[652035](382822 call rank _mt[243] this[126018]))
    unknown call_tmp[652042] "expr temp" "maybe param" "maybe type" "temp"
    (652045 'move' call_tmp[652042](359366 call _value _mt[243] this[126018]))
    unknown call_tmp[652049] "expr temp" "maybe param" "maybe type" "temp"
    (652052 'move' call_tmp[652049](120587 call idxType _mt[243] call_tmp[652042]))
    unknown call_tmp[652054] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652057 'move' call_tmp[652054](747931 'new' _domain[125908](?) call_tmp[652028] call_tmp[652035] call_tmp[652049] stridable[120492] r[120512]))
    (516778 'move' ret[516773](516777 'deref' call_tmp[652054]))
    gotoReturn _end_this[516771] _end_this[516771]
    (479608 'end of statement' r[120512])
    label _end_this[516771]
    (516775 return ret[516773])
  }
  where {
    (120481 call chpl__isTupleOfRanges ranges[120473])
  }
  function _domain[125908](?).this[120604](arg _mt[126024]:_MT[238], arg this[126022]:_domain[125908](?), arg args[120601]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516784] "RVV" "temp"
    unknown collapsedDim[120618] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652063] "expr temp" "maybe param" "maybe type" "temp"
    (652066 'move' call_tmp[652063](382833 call rank _mt[243] this[126022]))
    unknown call_tmp[652068] "expr temp" "maybe param" "maybe type" "temp"
    (652071 'move' call_tmp[652068](120616 call * call_tmp[652063] bool[10]))
    (542898 'default init var' collapsedDim[120618] call_tmp[652068])
    (120621 'end of statement')
    unknown idx[120627] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652075] "expr temp" "maybe param" "maybe type" "temp"
    (652078 'move' call_tmp[652075](382837 call rank _mt[243] this[126022]))
    unknown call_tmp[652082] "expr temp" "maybe param" "maybe type" "temp"
    (652085 'move' call_tmp[652082](382841 call idxType _mt[243] this[126022]))
    unknown call_tmp[652087] "expr temp" "maybe param" "maybe type" "temp"
    (652090 'move' call_tmp[652087](120625 call * call_tmp[652075] call_tmp[652082]))
    (542900 'default init var' idx[120627] call_tmp[652087])
    (120630 'end of statement')
    unknown call_tmp[652092] "maybe param" "maybe type" "temp"
    (652095 'move' call_tmp[652092](120635 call chpl__countRanges(120633 'expand_tuple' args[120601])))
    unknown uprank[120636] "dead at end of block" "param"
    (542902 'init var' uprank[120636] call_tmp[652092])
    (120639 'end of statement')
    unknown tmp[424549] "maybe param" "temp"
    (424560 'move' tmp[424549](120641 call stridable _mt[243] this[126022]))
    unknown call_tmp[652099] "expr temp" "maybe param" "maybe type" "temp"
    (652102 'move' call_tmp[652099](424562 call _cond_invalid tmp[424549]))
    if call_tmp[652099]
    {
      (424565 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown upstridable[120650] "dead at end of block" "param"
    unknown tmp[565011] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565012] "maybe param" "temp"
    unknown call_tmp[652104] "expr temp" "maybe param" "maybe type" "temp"
    (652107 'move' call_tmp[652104](424550 call isTrue tmp[424549]))
    (565017 'move' tmp[565012](565015 call _cond_test call_tmp[652104]))
    if tmp[565012]
    {
      (565022 'move' tmp[565011](565019 '_paramFoldLogical' tmp[565012] 1))
    }
    {
      unknown tmp[565024] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652109] "expr temp" "maybe param" "maybe type" "temp"
      (652112 'move' call_tmp[652109](120647 call chpl__anyRankChangeStridable args[120601]))
      (565026 'move' tmp[565024](424554 call isTrue call_tmp[652109]))
      (565031 'move' tmp[565011](565028 '_paramFoldLogical' tmp[565012] tmp[565024]))
    }
    (542904 'init var' upstridable[120650] tmp[565011])
    (120653 'end of statement')
    unknown upranges[120667] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652116] "expr temp" "maybe param" "maybe type" "temp"
    (652119 'move' call_tmp[652116](359375 call _value _mt[243] this[126022]))
    unknown call_tmp[652123] "expr temp" "maybe param" "maybe type" "temp"
    (652126 'move' call_tmp[652123](120657 call idxType _mt[243] call_tmp[652116]))
    unknown call_tmp[652128] "expr temp" "maybe param" "maybe type" "temp"
    (652131 'move' call_tmp[652128](120664 call range[64319](?)(idxType = call_tmp[652123])(stridable = upstridable[120650])))
    unknown call_tmp[652133] "expr temp" "maybe param" "maybe type" "temp"
    (652136 'move' call_tmp[652133](120665 call * uprank[120636] call_tmp[652128]))
    (542906 'default init var' upranges[120667] call_tmp[652133])
    (120670 'end of statement')
    unknown updim[120672] "dead at end of block" "insert auto destroy"
    (542908 'init var' updim[120672] 0)
    (120675 'end of statement')
    {
      unknown i[120766] "dead at end of block" "insert auto destroy"
      (542910 'init var' i[120766] 0)
      (479611 'end of statement')
      unknown tmp[120767] "maybe param" "temp"
      unknown call_tmp[652140] "expr temp" "maybe param" "maybe type" "temp"
      (652143 'move' call_tmp[652140](382850 call rank _mt[243] this[126022]))
      unknown call_tmp[652145] "expr temp" "maybe param" "maybe type" "temp"
      (652148 'move' call_tmp[652145](120679 call - call_tmp[652140] 1))
      (120779 'move' tmp[120767](120777 call chpl_compute_low_param_loop_bound 0 call_tmp[652145]))
      unknown tmp[120768] "maybe param" "temp"
      unknown call_tmp[652152] "expr temp" "maybe param" "maybe type" "temp"
      (652155 'move' call_tmp[652152](382877 call rank _mt[243] this[126022]))
      unknown call_tmp[652157] "expr temp" "maybe param" "maybe type" "temp"
      (652160 'move' call_tmp[652157](120784 call - call_tmp[652152] 1))
      (120789 'move' tmp[120768](120787 call chpl_compute_high_param_loop_bound 0 call_tmp[652157]))
      unknown tmp[120769] "maybe param" "temp"
      (120792 'move' tmp[120769] 1)
      ParamForLoop[120794]
      { i[120766] tmp[120767] tmp[120768] tmp[120769]
        {
          unknown call_tmp[652162] "expr temp" "maybe param" "maybe type" "temp"
          (652165 'move' call_tmp[652162](120687 call args[120601] i[120766]))
          unknown call_tmp[652167] "expr temp" "maybe param" "maybe type" "temp"
          (652170 'move' call_tmp[652167](120689 call isRange call_tmp[652162]))
          unknown call_tmp[652172] "expr temp" "maybe param" "maybe type" "temp"
          (652175 'move' call_tmp[652172](120761 call _cond_test call_tmp[652167]))
          if call_tmp[652172]
          {
            unknown call_tmp[652177] "expr temp" "maybe param" "maybe type" "temp"
            (652180 'move' call_tmp[652177](120693 call collapsedDim[120618] i[120766]))
            (120695 call = call_tmp[652177] 0)
            (479612 'end of statement' collapsedDim[120618] i[120766])
            unknown call_tmp[652182] "expr temp" "maybe param" "maybe type" "temp"
            (652185 'move' call_tmp[652182](120702 call idx[120627] i[120766]))
            unknown call_tmp[652189] "expr temp" "maybe param" "maybe type" "temp"
            (652192 'move' call_tmp[652189](120706 call(382860 call (partial) dim _mt[243] this[126022]) i[120766]))
            unknown call_tmp[652196] "expr temp" "maybe param" "maybe type" "temp"
            (652199 'move' call_tmp[652196](120707 call alignedLow _mt[243] call_tmp[652189]))
            (120710 call = call_tmp[652182] call_tmp[652196])
            (479615 'end of statement' idx[120627] i[120766] i[120766])
            unknown call_tmp[652201] "expr temp" "maybe param" "maybe type" "temp"
            (652204 'move' call_tmp[652201](120716 call upranges[120667] updim[120672]))
            unknown call_tmp[652208] "expr temp" "maybe param" "maybe type" "temp"
            (652211 'move' call_tmp[652208](120718 call _value _mt[243] this[126022]))
            unknown call_tmp[652215] "expr temp" "maybe param" "maybe type" "temp"
            (652218 'move' call_tmp[652215](120726 call(120721 call (partial) dsiDim _mt[243] call_tmp[652208]) i[120766]))
            unknown call_tmp[652220] "expr temp" "maybe param" "maybe type" "temp"
            (652223 'move' call_tmp[652220](120730 call args[120601] i[120766]))
            unknown call_tmp[652225] "expr temp" "maybe param" "maybe type" "temp"
            (652228 'move' call_tmp[652225](120732 call call_tmp[652215] call_tmp[652220]))
            (120733 call = call_tmp[652201] call_tmp[652225])
            (479619 'end of statement' upranges[120667] updim[120672] i[120766] i[120766])
            (120738 call += updim[120672] 1)
            (479624 'end of statement' updim[120672])
          }
          {
            unknown call_tmp[652230] "expr temp" "maybe param" "maybe type" "temp"
            (652233 'move' call_tmp[652230](120744 call collapsedDim[120618] i[120766]))
            (120746 call = call_tmp[652230] 1)
            (479626 'end of statement' collapsedDim[120618] i[120766])
            unknown call_tmp[652235] "expr temp" "maybe param" "maybe type" "temp"
            (652238 'move' call_tmp[652235](120753 call idx[120627] i[120766]))
            unknown call_tmp[652240] "expr temp" "maybe param" "maybe type" "temp"
            (652243 'move' call_tmp[652240](120757 call args[120601] i[120766]))
            (120758 call = call_tmp[652235] call_tmp[652240])
            (479629 'end of statement' idx[120627] i[120766] i[120766])
          }
        }
      }
      label _unused_continueLabel[120771]
      label _breakLabel[120770]
    }
    { scopeless type
      unknown call_type_tmp[492185] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652245] "expr temp" "maybe param" "maybe type" "temp"
      (652248 'move' call_tmp[652245](120806 call upranges[120667] 0))
      (492189 'move' call_type_tmp[492185](120807 'typeof' call_tmp[652245]))
    }
    const emptyrange[120808] "dead at end of block" "const" "insert auto destroy"
    (542912 'default init var' emptyrange[120808] call_type_tmp[492185])
    (120811 'end of statement')
    unknown call_tmp[652252] "expr temp" "maybe param" "maybe type" "temp"
    (652255 'move' call_tmp[652252](120815 call(382882 call (partial) contains _mt[243] this[126022]) idx[120627]))
    unknown call_tmp[652257] "expr temp" "maybe param" "maybe type" "temp"
    (652260 'move' call_tmp[652257](120816 call ! call_tmp[652252]))
    unknown call_tmp[652262] "expr temp" "maybe param" "maybe type" "temp"
    (652265 'move' call_tmp[652262](120871 call _cond_test call_tmp[652257]))
    if call_tmp[652262]
    {
      {
        unknown d[120833] "dead at end of block" "insert auto destroy"
        (542914 'init var' d[120833] 0)
        (479634 'end of statement')
        unknown tmp[120834] "maybe param" "temp"
        unknown call_tmp[652267] "expr temp" "maybe param" "maybe type" "temp"
        (652270 'move' call_tmp[652267](120821 call - uprank[120636] 1))
        (120846 'move' tmp[120834](120844 call chpl_compute_low_param_loop_bound 0 call_tmp[652267]))
        unknown tmp[120835] "maybe param" "temp"
        unknown call_tmp[652272] "expr temp" "maybe param" "maybe type" "temp"
        (652275 'move' call_tmp[652272](120851 call - uprank[120636] 1))
        (120856 'move' tmp[120835](120854 call chpl_compute_high_param_loop_bound 0 call_tmp[652272]))
        unknown tmp[120836] "maybe param" "temp"
        (120859 'move' tmp[120836] 1)
        ParamForLoop[120861]
        { d[120833] tmp[120834] tmp[120835] tmp[120836]
          unknown call_tmp[652277] "expr temp" "maybe param" "maybe type" "temp"
          (652280 'move' call_tmp[652277](120828 call upranges[120667] d[120833]))
          (120830 call = call_tmp[652277] emptyrange[120808])
          (479635 'end of statement' upranges[120667] d[120833] emptyrange[120808])
        }
        label _unused_continueLabel[120838]
        label _breakLabel[120837]
      }
    }
    unknown call_tmp[652284] "expr temp" "maybe param" "maybe type" "temp"
    (652287 'move' call_tmp[652284](359380 call dist _mt[243] this[126022]))
    unknown call_tmp[652291] "expr temp" "maybe param" "maybe type" "temp"
    (652294 'move' call_tmp[652291](120880 call _pid _mt[243] call_tmp[652284]))
    unknown call_tmp[652298] "expr temp" "maybe param" "maybe type" "temp"
    (652301 'move' call_tmp[652298](359384 call dist _mt[243] this[126022]))
    unknown call_tmp[652305] "expr temp" "maybe param" "maybe type" "temp"
    (652308 'move' call_tmp[652305](120886 call _instance _mt[243] call_tmp[652298]))
    unknown call_tmp[652310] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652313 'move' call_tmp[652310](747932 'new' ArrayViewRankChangeDist[382892](?)(downDistPid = call_tmp[652291])(downDistInst = call_tmp[652305])(collapsedDim = collapsedDim[120618])(idx = idx[120627])(_chpl_manager = unmanaged[220](?))))
    const rcdist[120895] "dead at end of block" "const" "insert auto destroy"
    (542916 'init var' rcdist[120895] call_tmp[652310])
    (120898 'end of statement')
    unknown call_tmp[652315] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652318 'move' call_tmp[652315](747933 'new' _distribution[118973](?) rcdist[120895]))
    const rcdistRec[120904] "dead at end of block" "const" "insert auto destroy"
    (542918 'init var' rcdistRec[120904] call_tmp[652315])
    (120907 'end of statement' upranges[120667] collapsedDim[120618] idx[120627] rcdist[120895])
    unknown call_tmp[652320] "expr temp" "maybe param" "maybe type" "temp"
    (652323 'move' call_tmp[652320](120916 call upranges[120667] 0))
    unknown call_tmp[652327] "expr temp" "maybe param" "maybe type" "temp"
    (652330 'move' call_tmp[652327](120917 call idxType _mt[243] call_tmp[652320]))
    unknown call_tmp[652332] "expr temp" "maybe param" "maybe type" "temp"
    (652335 'move' call_tmp[652332](120923 call upranges[120667] 0))
    unknown call_tmp[652339] "expr temp" "maybe param" "maybe type" "temp"
    (652342 'move' call_tmp[652339](120924 call stridable _mt[243] call_tmp[652332]))
    unknown call_tmp[652344] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652347 'move' call_tmp[652344](747934 'new' _domain[125908](?) rcdistRec[120904] uprank[120636] call_tmp[652327] call_tmp[652339] upranges[120667]))
    (516789 'move' ret[516784](516788 'deref' call_tmp[652344]))
    gotoReturn _end_this[516782] _end_this[516782]
    (479642 'end of statement' rcdistRec[120904] upranges[120667] upranges[120667] upranges[120667])
    label _end_this[516782]
    (516786 return ret[516784])
  }
  where {
    unknown call_tmp[652351] "expr temp" "maybe param" "maybe type" "temp"
    (652354 'move' call_tmp[652351](359370 call _value _mt[243] this[126022]))
    unknown call_tmp[652358] "expr temp" "maybe param" "maybe type" "temp"
    (652361 'move' call_tmp[652358](120610 call idxType _mt[243] call_tmp[652351]))
    (120613 call _validRankChangeArgs args[120601] call_tmp[652358])
  }
  function _domain[125908](?).this[120942](arg _mt[126028]:_MT[238], arg this[126026]:_domain[125908](?), arg i[120938]:integral[199](?) ...) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (120963 call compilerError "domain slice requires a range in at least one dimension")
    (516793 return _void[55])
  }
  function _domain[125908](?).this[120975](arg _mt[126032]:_MT[238], arg this[126030]:_domain[125908](?), arg args[120972]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[652367] "expr temp" "maybe param" "maybe type" "temp"
    (652370 'move' call_tmp[652367](382912 call rank _mt[243] this[126030]))
    unknown call_tmp[652372] "expr temp" "maybe param" "maybe type" "temp"
    (652375 'move' call_tmp[652372](120979 call == numArgs[120970] call_tmp[652367]))
    unknown call_tmp[652377] "expr temp" "maybe param" "maybe type" "temp"
    (652380 'move' call_tmp[652377](121026 call _cond_test call_tmp[652372]))
    if call_tmp[652377]
    {
      (121000 call compilerError "invalid argument types for domain slicing")
    }
    {
      (121024 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
    (516795 return _void[55])
  }
  function _domain[125908](?).dims[121036](arg _mt[126036]:_MT[238], arg this[126034]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516799] "RVV" "temp"
    unknown call_tmp[652384] "expr temp" "maybe param" "maybe type" "temp"
    (652387 'move' call_tmp[652384](359388 call _value _mt[243] this[126034]))
    unknown call_tmp[652391] "expr temp" "maybe param" "maybe type" "temp"
    (652394 'move' call_tmp[652391](121043 call(121039 call (partial) dsiDims _mt[243] call_tmp[652384])))
    (516804 'move' ret[516799](516803 'deref' call_tmp[652391]))
    (516801 return ret[516799])
  }
  function _domain[125908](?).dim[121055](arg _mt[126040]:_MT[238], arg this[126038]:_domain[125908](?), arg d[121052]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516808] "RVV" "temp"
    unknown call_tmp[652396] "expr temp" "maybe param" "maybe type" "temp"
    (652399 'move' call_tmp[652396](121135 call _cond_test 1))
    if call_tmp[652396]
    {
      unknown tmp[424570] "maybe param" "temp"
      (424581 'move' tmp[424570](121064 call < d[121052] 0))
      unknown call_tmp[652401] "expr temp" "maybe param" "maybe type" "temp"
      (652404 'move' call_tmp[652401](424583 call _cond_invalid tmp[424570]))
      if call_tmp[652401]
      {
        (424586 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[565038] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565039] "maybe param" "temp"
      unknown call_tmp[652406] "expr temp" "maybe param" "maybe type" "temp"
      (652409 'move' call_tmp[652406](424571 call isTrue tmp[424570]))
      (565044 'move' tmp[565039](565042 call _cond_test call_tmp[652406]))
      if tmp[565039]
      {
        (565049 'move' tmp[565038](565046 '_paramFoldLogical' tmp[565039] 1))
      }
      {
        unknown tmp[565051] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652413] "expr temp" "maybe param" "maybe type" "temp"
        (652416 'move' call_tmp[652413](382919 call rank _mt[243] this[126038]))
        unknown call_tmp[652418] "expr temp" "maybe param" "maybe type" "temp"
        (652421 'move' call_tmp[652418](121068 call >= d[121052] call_tmp[652413]))
        (565053 'move' tmp[565051](424575 call isTrue call_tmp[652418]))
        (565058 'move' tmp[565038](565055 '_paramFoldLogical' tmp[565039] tmp[565051]))
      }
      unknown call_tmp[652423] "expr temp" "maybe param" "maybe type" "temp"
      (652426 'move' call_tmp[652423](121130 call _cond_test tmp[565038]))
      if call_tmp[652423]
      {
        unknown call_tmp[652428] "expr temp" "maybe param" "maybe type" "temp"
        (652431 'move' call_tmp[652428](121095 call _cast string[26] d[121052]))
        unknown call_tmp[652433] "expr temp" "maybe param" "maybe type" "temp"
        (652436 'move' call_tmp[652433](121097 call + "dim(" call_tmp[652428]))
        unknown call_tmp[652438] "expr temp" "maybe param" "maybe type" "temp"
        (652441 'move' call_tmp[652438](121116 call + call_tmp[652433] ") is out-of-bounds; must be 0.."))
        unknown call_tmp[652445] "expr temp" "maybe param" "maybe type" "temp"
        (652448 'move' call_tmp[652445](382924 call rank _mt[243] this[126038]))
        unknown call_tmp[652450] "expr temp" "maybe param" "maybe type" "temp"
        (652453 'move' call_tmp[652450](121120 call - call_tmp[652445] 1))
        unknown call_tmp[652455] "expr temp" "maybe param" "maybe type" "temp"
        (652458 'move' call_tmp[652455](121123 call _cast string[26] call_tmp[652450]))
        unknown call_tmp[652460] "expr temp" "maybe param" "maybe type" "temp"
        (652463 'move' call_tmp[652460](121125 call + call_tmp[652438] call_tmp[652455]))
        (121128 call boundsCheckHalt module=[255] HaltWrappers[210018] call_tmp[652460])
        (359392 'referenced modules list' HaltWrappers[210018])
      }
    }
    unknown call_tmp[652467] "expr temp" "maybe param" "maybe type" "temp"
    (652470 'move' call_tmp[652467](359398 call _value _mt[243] this[126038]))
    unknown call_tmp[652474] "expr temp" "maybe param" "maybe type" "temp"
    (652477 'move' call_tmp[652474](121146 call(121141 call (partial) dsiDim _mt[243] call_tmp[652467]) d[121052]))
    (516813 'move' ret[516808](516812 'deref' call_tmp[652474]))
    (516810 return ret[516808])
    (355161 'used modules list'(121058 'use' HaltWrappers[210018]))
  }
  function _domain[125908](?).dim[121157](arg _mt[126044]:_MT[238], arg this[126042]:_domain[125908](?), param arg d[121154]:int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516817] "RVV" "temp"
    unknown tmp[424591] "maybe param" "temp"
    (424602 'move' tmp[424591](121161 call < d[121154] 0))
    unknown call_tmp[652479] "expr temp" "maybe param" "maybe type" "temp"
    (652482 'move' call_tmp[652479](424604 call _cond_invalid tmp[424591]))
    if call_tmp[652479]
    {
      (424607 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565065] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565066] "maybe param" "temp"
    unknown call_tmp[652484] "expr temp" "maybe param" "maybe type" "temp"
    (652487 'move' call_tmp[652484](424592 call isTrue tmp[424591]))
    (565071 'move' tmp[565066](565069 call _cond_test call_tmp[652484]))
    if tmp[565066]
    {
      (565076 'move' tmp[565065](565073 '_paramFoldLogical' tmp[565066] 1))
    }
    {
      unknown tmp[565078] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652491] "expr temp" "maybe param" "maybe type" "temp"
      (652494 'move' call_tmp[652491](382931 call rank _mt[243] this[126042]))
      unknown call_tmp[652496] "expr temp" "maybe param" "maybe type" "temp"
      (652499 'move' call_tmp[652496](121166 call - call_tmp[652491] 1))
      unknown call_tmp[652501] "expr temp" "maybe param" "maybe type" "temp"
      (652504 'move' call_tmp[652501](121168 call > d[121154] call_tmp[652496]))
      (565080 'move' tmp[565078](424596 call isTrue call_tmp[652501]))
      (565085 'move' tmp[565065](565082 '_paramFoldLogical' tmp[565066] tmp[565078]))
    }
    unknown call_tmp[652506] "expr temp" "maybe param" "maybe type" "temp"
    (652509 'move' call_tmp[652506](121197 call _cond_test tmp[565065]))
    if call_tmp[652506]
    {
      unknown call_tmp[652513] "expr temp" "maybe param" "maybe type" "temp"
      (652516 'move' call_tmp[652513](382935 call rank _mt[243] this[126042]))
      unknown call_tmp[652518] "expr temp" "maybe param" "maybe type" "temp"
      (652521 'move' call_tmp[652518](121193 call - call_tmp[652513] 1))
      (121195 call compilerError "dim() must take a value from 0.." call_tmp[652518])
    }
    unknown call_tmp[652525] "expr temp" "maybe param" "maybe type" "temp"
    (652528 'move' call_tmp[652525](359402 call _value _mt[243] this[126042]))
    unknown call_tmp[652532] "expr temp" "maybe param" "maybe type" "temp"
    (652535 'move' call_tmp[652532](121209 call(121204 call (partial) dsiDim _mt[243] call_tmp[652525]) d[121154]))
    (516822 'move' ret[516817](516821 'deref' call_tmp[652532]))
    (516819 return ret[516817])
  }
  function _domain[125908](?).dimIter[121218](arg _mt[126048]:_MT[238], arg this[126046]:_domain[125908](?), param arg d[121216]:_any[178](?), arg ind[121220]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516826] "RVV" "temp"
    {
      unknown _indexOfInterest[121236] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121237] "expr temp" "temp"
      unknown call_tmp[652539] "expr temp" "maybe param" "maybe type" "temp"
      (652542 'move' call_tmp[652539](359406 call _value _mt[243] this[126046]))
      unknown call_tmp[652546] "expr temp" "maybe param" "maybe type" "temp"
      (652549 'move' call_tmp[652546](121232 call(121226 call (partial) dimIter _mt[243] call_tmp[652539]) d[121216] ind[121220]))
      (121246 'move' _iterator[121237](121244 call _getIterator call_tmp[652546]))
      Defer
      {
        {
          (121263 call _freeIterator _iterator[121237])
        }
      }
      { scopeless type
        (121252 'move' _indexOfInterest[121236](121249 call iteratorIndex _iterator[121237]))
      }
      ForLoop[121238]
      {
        unknown i[121256] "index var" "insert auto destroy"
        (479658 'end of statement')
        (121258 'move' i[121256] _indexOfInterest[121236])
        (479659 'end of statement' i[121256])
        unknown yret[516830] "YVV" "temp"
        (516833 'move' yret[516830](516832 'deref' i[121256]))
        (516835 yield yret[516830])
        (479661 'end of statement' i[121256])
        label _continueLabel[121241]
        _indexOfInterest[121236]
        _iterator[121237]
      }
      label _breakLabel[121242]
    }
    (516828 return ret[516826])
  }
  function _domain[125908](?).shape[121275](arg _mt[126052]:_MT[238], arg this[126050]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516839] "RVV" "temp"
    unknown s[121297] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652553] "expr temp" "maybe param" "maybe type" "temp"
    (652556 'move' call_tmp[652553](382945 call rank _mt[243] this[126050]))
    unknown call_tmp[652560] "expr temp" "maybe param" "maybe type" "temp"
    (652563 'move' call_tmp[652560](121291 call(382949 call (partial) dim _mt[243] this[126050]) 0))
    unknown call_tmp[652567] "expr temp" "maybe param" "maybe type" "temp"
    (652570 'move' call_tmp[652567](121292 call intIdxType _mt[243] call_tmp[652560]))
    unknown call_tmp[652572] "expr temp" "maybe param" "maybe type" "temp"
    (652575 'move' call_tmp[652572](121295 call * call_tmp[652553] call_tmp[652567]))
    (542920 'default init var' s[121297] call_tmp[652572])
    (121300 'end of statement')
    {
      unknown _indexOfInterest[121332] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121333] "expr temp" "temp"
      unknown call_tmp[652579] "expr temp" "maybe param" "maybe type" "temp"
      (652582 'move' call_tmp[652579](121356 call size _mt[243] s[121297]))
      unknown call_tmp[652584] "expr temp" "maybe param" "maybe type" "temp"
      (652587 'move' call_tmp[652584](121360 call chpl_direct_counted_range_iter 0 call_tmp[652579]))
      unknown call_tmp[652589] "expr temp" "maybe param" "maybe type" "temp"
      (652592 'move' call_tmp[652589](121350 call _getIterator call_tmp[652584]))
      unknown call_tmp[652596] "expr temp" "maybe param" "maybe type" "temp"
      (652599 'move' call_tmp[652596](121363 call(382955 call (partial) dims _mt[243] this[126050])))
      unknown call_tmp[652601] "expr temp" "maybe param" "maybe type" "temp"
      (652604 'move' call_tmp[652601](121364 call _getIterator call_tmp[652596]))
      (121367 'move' _iterator[121333](121320 call _build_tuple call_tmp[652589] call_tmp[652601]))
      Defer
      {
        {
          (121397 call _freeIterator _iterator[121333])
        }
      }
      { scopeless type
        (121372 'move' _indexOfInterest[121332](121369 call iteratorIndex _iterator[121333]))
      }
      ForLoop[121334]
      {
        (121377 call _check_tuple_var_decl _indexOfInterest[121332] 2)
        (479664 'end of statement')
        unknown i[121383] "index var" "insert auto destroy"
        (479665 'end of statement')
        (121385 'move' i[121383](121381 call _indexOfInterest[121332] 0))
        (479666 'end of statement' i[121383])
        unknown r[121390] "index var" "insert auto destroy"
        (479668 'end of statement')
        (121392 'move' r[121390](121388 call _indexOfInterest[121332] 1))
        (479669 'end of statement' r[121390])
        unknown call_tmp[652606] "expr temp" "maybe param" "maybe type" "temp"
        (652609 'move' call_tmp[652606](121324 call s[121297] i[121383]))
        unknown call_tmp[652613] "expr temp" "maybe param" "maybe type" "temp"
        (652616 'move' call_tmp[652613](121326 call size _mt[243] r[121390]))
        (121329 call = call_tmp[652606] call_tmp[652613])
        (479671 'end of statement' s[121297] i[121383] r[121390])
        label _continueLabel[121337]
        _indexOfInterest[121332]
        _iterator[121333]
      }
      label _breakLabel[121338]
    }
    (516844 'move' ret[516839](516843 'deref' s[121297]))
    gotoReturn _end_shape[516837] _end_shape[516837]
    (479675 'end of statement' s[121297])
    label _end_shape[516837]
    (516841 return ret[516839])
  }
  where {
    unknown tmp[424612] "maybe param" "temp"
    (424623 'move' tmp[424612](121280 call isRectangularDom this[126050]))
    unknown call_tmp[652618] "expr temp" "maybe param" "maybe type" "temp"
    (652621 'move' call_tmp[652618](424625 call _cond_invalid tmp[424612]))
    if call_tmp[652618]
    {
      (424628 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565092] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565093] "maybe param" "temp"
    unknown call_tmp[652623] "expr temp" "maybe param" "maybe type" "temp"
    (652626 'move' call_tmp[652623](424613 call isTrue tmp[424612]))
    (565098 'move' tmp[565093](565096 call _cond_test call_tmp[652623]))
    if tmp[565093]
    {
      (565103 'move' tmp[565092](565100 '_paramFoldLogical' tmp[565093] 1))
    }
    {
      unknown tmp[565105] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652628] "expr temp" "maybe param" "maybe type" "temp"
      (652631 'move' call_tmp[652628](121284 call isSparseDom this[126050]))
      (565107 'move' tmp[565105](424617 call isTrue call_tmp[652628]))
      (565112 'move' tmp[565092](565109 '_paramFoldLogical' tmp[565093] tmp[565105]))
    }
    (748323 call chpl_statementLevelSymbol tmp[565092])
  }
  function _domain[125908](?).shape[121412](arg _mt[126056]:_MT[238], arg this[126054]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516850] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492191] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652635] "expr temp" "maybe param" "maybe type" "temp"
      (652638 'move' call_tmp[652635](382961 call size _mt[243] this[126054]))
      (492195 'move' call_type_tmp[492191](121419 'typeof' call_tmp[652635]))
    }
    unknown s[121422] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652640] "expr temp" "maybe param" "maybe type" "temp"
    (652643 'move' call_tmp[652640](121420 call _build_tuple call_type_tmp[492191]))
    (542922 'default init var' s[121422] call_tmp[652640])
    (121425 'end of statement')
    unknown call_tmp[652645] "expr temp" "maybe param" "maybe type" "temp"
    (652648 'move' call_tmp[652645](121430 call s[121422] 0))
    unknown call_tmp[652652] "expr temp" "maybe param" "maybe type" "temp"
    (652655 'move' call_tmp[652652](382966 call size _mt[243] this[126054]))
    (121432 call = call_tmp[652645] call_tmp[652652])
    (479677 'end of statement' s[121422])
    (516855 'move' ret[516850](516854 'deref' s[121422]))
    gotoReturn _end_shape[516848] _end_shape[516848]
    (479679 'end of statement' s[121422])
    label _end_shape[516848]
    (516852 return ret[516850])
  }
  where {
    (121417 call isAssociativeDom this[126054])
  }
  function _domain[125908](?).shape[121443](arg _mt[126060]:_MT[238], arg this[126058]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (121464 call compilerError ".shape not supported on this domain")
    (516859 return _void[55])
  }
  function _domain[125908](?).buildArray[121473](arg _mt[126064]:_MT[238], arg this[126062]:_domain[125908](?), arg eltType[121471]:_any[178](?), param arg initElts[121476]:bool[10]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516865] "RVV" "temp"
    unknown call_tmp[652657] "expr temp" "maybe param" "maybe type" "temp"
    (652660 'move' call_tmp[652657](121481 call == eltType[121471] void[4]))
    unknown call_tmp[652662] "expr temp" "maybe param" "maybe type" "temp"
    (652665 'move' call_tmp[652662](121505 call _cond_test call_tmp[652657]))
    if call_tmp[652662]
    {
      (121502 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652667] "expr temp" "maybe param" "maybe type" "temp"
    (652670 'move' call_tmp[652667](121513 call isGenericType eltType[121471]))
    unknown call_tmp[652672] "expr temp" "maybe param" "maybe type" "temp"
    (652675 'move' call_tmp[652672](121673 call _cond_test call_tmp[652667]))
    if call_tmp[652672]
    {
      unknown call_tmp[652677] "expr temp" "maybe param" "maybe type" "temp"
      (652680 'move' call_tmp[652677](121534 call _cast string[26] eltType[121471]))
      unknown call_tmp[652682] "expr temp" "maybe param" "maybe type" "temp"
      (652685 'move' call_tmp[652682](121536 call + "creating an array with element type " call_tmp[652677]))
      (121539 call compilerWarning call_tmp[652682])
      (479683 'end of statement')
      unknown tmp[424633] "maybe param" "temp"
      (424644 'move' tmp[424633](121545 call isClassType eltType[121471]))
      unknown call_tmp[652687] "expr temp" "maybe param" "maybe type" "temp"
      (652690 'move' call_tmp[652687](424646 call _cond_invalid tmp[424633]))
      if call_tmp[652687]
      {
        (424649 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565119] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565120] "maybe param" "temp"
      unknown call_tmp[652692] "expr temp" "maybe param" "maybe type" "temp"
      (652695 'move' call_tmp[652692](424634 call isTrue tmp[424633]))
      (565125 'move' tmp[565120](565123 call _cond_test call_tmp[652692]))
      if tmp[565120]
      {
        unknown tmp[565127] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652697] "expr temp" "maybe param" "maybe type" "temp"
        (652700 'move' call_tmp[652697](121548 'to borrowed class from unknown' eltType[121471]))
        unknown call_tmp[652702] "expr temp" "maybe param" "maybe type" "temp"
        (652705 'move' call_tmp[652702](121550 call isGenericType call_tmp[652697]))
        unknown call_tmp[652707] "expr temp" "maybe param" "maybe type" "temp"
        (652710 'move' call_tmp[652707](121551 call ! call_tmp[652702]))
        (565129 'move' tmp[565127](424637 call isTrue call_tmp[652707]))
        (565134 'move' tmp[565119](565131 '_paramFoldLogical' tmp[565120] tmp[565127]))
      }
      {
        (565139 'move' tmp[565119](565136 '_paramFoldLogical' tmp[565120] 0))
      }
      unknown call_tmp[652712] "expr temp" "maybe param" "maybe type" "temp"
      (652715 'move' call_tmp[652712](121577 call _cond_test tmp[565119]))
      if call_tmp[652712]
      {
        (121574 call compilerWarning "which now means class type with generic management")
      }
      (121600 call compilerError "array element type cannot currently be generic")
    }
    {
      unknown tmp[424654] "maybe param" "temp"
      (424665 'move' tmp[424654](121605 call isSparseDom this[126062]))
      unknown call_tmp[652717] "expr temp" "maybe param" "maybe type" "temp"
      (652720 'move' call_tmp[652717](424667 call _cond_invalid tmp[424654]))
      if call_tmp[652717]
      {
        (424670 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565146] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565147] "maybe param" "temp"
      unknown call_tmp[652722] "expr temp" "maybe param" "maybe type" "temp"
      (652725 'move' call_tmp[652722](424655 call isTrue tmp[424654]))
      (565152 'move' tmp[565147](565150 call _cond_test call_tmp[652722]))
      if tmp[565147]
      {
        unknown tmp[565154] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652727] "expr temp" "maybe param" "maybe type" "temp"
        (652730 'move' call_tmp[652727](121609 call isDefaultInitializable eltType[121471]))
        unknown call_tmp[652732] "expr temp" "maybe param" "maybe type" "temp"
        (652735 'move' call_tmp[652732](121610 call ! call_tmp[652727]))
        (565156 'move' tmp[565154](424658 call isTrue call_tmp[652732]))
        (565161 'move' tmp[565146](565158 '_paramFoldLogical' tmp[565147] tmp[565154]))
      }
      {
        (565166 'move' tmp[565146](565163 '_paramFoldLogical' tmp[565147] 0))
      }
      unknown call_tmp[652737] "expr temp" "maybe param" "maybe type" "temp"
      (652740 'move' call_tmp[652737](121669 call _cond_test tmp[565146]))
      if call_tmp[652737]
      {
        unknown call_tmp[652742] "expr temp" "maybe param" "maybe type" "temp"
        (652745 'move' call_tmp[652742](121617 call isNonNilableClass eltType[121471]))
        unknown call_tmp[652747] "expr temp" "maybe param" "maybe type" "temp"
        (652750 'move' call_tmp[652747](121664 call _cond_test call_tmp[652742]))
        if call_tmp[652747]
        {
          (121637 call compilerError "sparse arrays of non-nilable classes are not currently supported")
        }
        {
          (121661 call compilerError "sparse arrays of non-default-initializable types are not currently supported")
        }
      }
    }
    unknown call_tmp[652752] "expr temp" "maybe param" "maybe type" "temp"
    (652755 'move' call_tmp[652752](121790 call _cond_test 0))
    if call_tmp[652752]
    {
      unknown tmp[424675] "maybe param" "temp"
      (424686 'move' tmp[424675](121682 call isRectangularDom this[126062]))
      unknown call_tmp[652757] "expr temp" "maybe param" "maybe type" "temp"
      (652760 'move' call_tmp[652757](424688 call _cond_invalid tmp[424675]))
      if call_tmp[652757]
      {
        (424691 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565173] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565174] "maybe param" "temp"
      unknown call_tmp[652762] "expr temp" "maybe param" "maybe type" "temp"
      (652765 'move' call_tmp[652762](424676 call isTrue tmp[424675]))
      (565179 'move' tmp[565174](565177 call _cond_test call_tmp[652762]))
      if tmp[565174]
      {
        unknown tmp[565181] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652769] "expr temp" "maybe param" "maybe type" "temp"
        (652772 'move' call_tmp[652769](121684 call stridable _mt[243] this[126062]))
        (565183 'move' tmp[565181](424679 call isTrue call_tmp[652769]))
        (565188 'move' tmp[565173](565185 '_paramFoldLogical' tmp[565174] tmp[565181]))
      }
      {
        (565193 'move' tmp[565173](565190 '_paramFoldLogical' tmp[565174] 0))
      }
      unknown call_tmp[652774] "expr temp" "maybe param" "maybe type" "temp"
      (652777 'move' call_tmp[652774](121785 call _cond_test tmp[565173]))
      if call_tmp[652774]
      {
        unknown call_tmp[652781] "expr temp" "maybe param" "maybe type" "temp"
        (652784 'move' call_tmp[652781](382981 call rank _mt[243] this[126062]))
        unknown call_tmp[652786] "expr temp" "maybe param" "maybe type" "temp"
        (652789 'move' call_tmp[652786](121691 call == call_tmp[652781] 1))
        unknown call_tmp[652791] "expr temp" "maybe param" "maybe type" "temp"
        (652794 'move' call_tmp[652791](121781 call _cond_test call_tmp[652786]))
        if call_tmp[652791]
        {
          unknown call_tmp[652798] "expr temp" "maybe param" "maybe type" "temp"
          (652801 'move' call_tmp[652798](121694 call stride _mt[243] this[126062]))
          unknown call_tmp[652803] "expr temp" "maybe param" "maybe type" "temp"
          (652806 'move' call_tmp[652803](121698 call < call_tmp[652798] 0))
          unknown call_tmp[652808] "expr temp" "maybe param" "maybe type" "temp"
          (652811 'move' call_tmp[652808](121721 call _cond_test call_tmp[652803]))
          if call_tmp[652808]
          {
            (121719 call warning "arrays with negatively strided dimensions are not particularly stable")
          }
        }
        {
          {
            unknown _indexOfInterest[121746] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[121747] "expr temp" "temp"
            unknown call_tmp[652815] "expr temp" "maybe param" "maybe type" "temp"
            (652818 'move' call_tmp[652815](121729 call stride _mt[243] this[126062]))
            (121756 'move' _iterator[121747](121754 call _getIterator call_tmp[652815]))
            Defer
            {
              {
                (121773 call _freeIterator _iterator[121747])
              }
            }
            { scopeless type
              (121762 'move' _indexOfInterest[121746](121759 call iteratorIndex _iterator[121747]))
            }
            ForLoop[121748]
            {
              unknown s[121766] "index var" "insert auto destroy"
              (479693 'end of statement')
              (121768 'move' s[121766] _indexOfInterest[121746])
              (479694 'end of statement' s[121766])
              unknown call_tmp[652820] "expr temp" "maybe param" "maybe type" "temp"
              (652823 'move' call_tmp[652820](121734 call < s[121766] 0))
              unknown call_tmp[652825] "expr temp" "maybe param" "maybe type" "temp"
              (652828 'move' call_tmp[652825](121741 call _cond_test call_tmp[652820]))
              if call_tmp[652825]
              {
                (121739 call warning "arrays with negatively strided dimensions are not particularly stable")
              }
              label _continueLabel[121751]
              _indexOfInterest[121746]
              _iterator[121747]
            }
            label _breakLabel[121752]
          }
        }
      }
    }
    unknown call_tmp[652832] "expr temp" "maybe param" "maybe type" "temp"
    (652835 'move' call_tmp[652832](359415 call _value _mt[243] this[126062]))
    unknown call_tmp[652839] "maybe param" "maybe type" "temp"
    (652842 'move' call_tmp[652839](121804 call(121798 call (partial) dsiBuildArray _mt[243] call_tmp[652832]) eltType[121471] initElts[121476]))
    unknown x[121805] "dead at end of block" "insert auto destroy"
    (542924 'init var' x[121805] call_tmp[652839])
    (121808 'end of statement')
    function help[121811]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652846] "expr temp" "maybe param" "maybe type" "temp"
      (652849 'move' call_tmp[652846](359419 call _value _mt[243] this[126062]))
      (121821 call(121816 call (partial) add_arr _mt[243] call_tmp[652846]) x[121805])
      (516861 return _void[55])
    }
    (121828 call help)
    (479698 'end of statement')
    unknown call_tmp[652855] "expr temp" "maybe param" "maybe type" "temp"
    (652858 'move' call_tmp[652855](121834 call eltType _mt[243] x[121805]))
    (121837 call chpl_incRefCountsForDomainsInArrayEltTypes x[121805] call_tmp[652855])
    (479699 'end of statement' x[121805] x[121805])
    unknown call_tmp[652860] "expr temp" "maybe param" "maybe type" "temp"
    (652863 'move' call_tmp[652860](121842 call _newArray x[121805]))
    (516870 'move' ret[516865](516869 'deref' call_tmp[652860]))
    gotoReturn _end_buildArray[516863] _end_buildArray[516863]
    (479702 'end of statement' x[121805])
    label _end_buildArray[516863]
    (516867 return ret[516865])
  }
  function _domain[125908](?).buildArrayWith[121851](arg _mt[126068]:_MT[238], arg this[126066]:_domain[125908](?), arg eltType[121849]:_any[178](?), arg data[121857] :
  (121856 call _ddata[11696](?) eltType[121849]), arg allocSize[121861]:int(64)[13]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516878] "RVV" "temp"
    unknown call_tmp[652865] "expr temp" "maybe param" "maybe type" "temp"
    (652868 'move' call_tmp[652865](121866 call == eltType[121849] void[4]))
    unknown call_tmp[652870] "expr temp" "maybe param" "maybe type" "temp"
    (652873 'move' call_tmp[652870](121874 call _cond_test call_tmp[652865]))
    if call_tmp[652870]
    {
      (121871 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652877] "expr temp" "maybe param" "maybe type" "temp"
    (652880 'move' call_tmp[652877](359424 call _value _mt[243] this[126066]))
    unknown call_tmp[652884] "maybe param" "maybe type" "temp"
    (652887 'move' call_tmp[652884](121889 call(121882 call (partial) dsiBuildArrayWith _mt[243] call_tmp[652877]) eltType[121849] data[121857] allocSize[121861]))
    unknown x[121890] "dead at end of block" "insert auto destroy"
    (542926 'init var' x[121890] call_tmp[652884])
    (121893 'end of statement')
    function help[121896]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652891] "expr temp" "maybe param" "maybe type" "temp"
      (652894 'move' call_tmp[652891](359428 call _value _mt[243] this[126066]))
      (121904 call(121899 call (partial) add_arr _mt[243] call_tmp[652891]) x[121890])
      (516874 return _void[55])
    }
    (121911 call help)
    (479706 'end of statement')
    unknown call_tmp[652900] "expr temp" "maybe param" "maybe type" "temp"
    (652903 'move' call_tmp[652900](121917 call eltType _mt[243] x[121890]))
    (121920 call chpl_incRefCountsForDomainsInArrayEltTypes x[121890] call_tmp[652900])
    (479707 'end of statement' x[121890] x[121890])
    unknown call_tmp[652905] "expr temp" "maybe param" "maybe type" "temp"
    (652908 'move' call_tmp[652905](121925 call _newArray x[121890]))
    (516883 'move' ret[516878](516882 'deref' call_tmp[652905]))
    gotoReturn _end_buildArrayWith[516876] _end_buildArrayWith[516876]
    (479710 'end of statement' x[121890])
    label _end_buildArrayWith[516876]
    (516880 return ret[516878])
  }
  function _domain[125908](?).clear[121932](arg _mt[126072]:_MT[238], arg this[126070]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[121940] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652910] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (652913 'move' call_tmp[652910](121939 'typeof' this[126070]))
    (542928 'default init var' emptyDom[121940] call_tmp[652910])
    (121943 'end of statement')
    (121947 call = this[126070] emptyDom[121940])
    (479712 'end of statement' emptyDom[121940])
    (516887 return _void[55])
  }
  where {
    (121937 call isRectangularDom this[126070])
  }
  function _domain[125908](?).clear[121955](arg _mt[126076]:_MT[238], arg this[126074]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[652917] "expr temp" "maybe param" "maybe type" "temp"
    (652920 'move' call_tmp[652917](359433 call _value _mt[243] this[126074]))
    (121964 call(121960 call (partial) dsiClear _mt[243] call_tmp[652917]))
    (516889 return _void[55])
  }
  function _domain[125908](?).add[121973](arg _mt[126080]:_MT[238], arg this[126078]:_domain[125908](?), in arg i[121971]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516893] "RVV" "temp"
    unknown call_tmp[652926] "expr temp" "maybe param" "maybe type" "temp"
    (652929 'move' call_tmp[652926](359437 call _value _mt[243] this[126078]))
    unknown call_tmp[652933] "expr temp" "maybe param" "maybe type" "temp"
    (652936 'move' call_tmp[652933](121983 call(121978 call (partial) dsiAdd _mt[243] call_tmp[652926]) i[121971]))
    (516898 'move' ret[516893](516897 'deref' call_tmp[652933]))
    (516895 return ret[516893])
  }
  function _domain[125908](?).bulkAdd[122001](arg _mt[126084]:_MT[238], arg this[126082]:_domain[125908](?), arg inds[121998]:_array[133594](?), arg dataSorted[122004] :
  0 =
  0, arg isUnique[122008] :
  0 =
  0, arg preserveInds[122012] :
  1 =
  1, arg addOn[122016] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516902] "RVV" "temp"
    unknown call_tmp[652940] "expr temp" "maybe param" "maybe type" "temp"
    (652943 'move' call_tmp[652940](122033 call size _mt[243] inds[121998]))
    unknown call_tmp[652945] "expr temp" "maybe param" "maybe type" "temp"
    (652948 'move' call_tmp[652945](122037 call == call_tmp[652940] 0))
    unknown call_tmp[652950] "expr temp" "maybe param" "maybe type" "temp"
    (652953 'move' call_tmp[652950](122042 call _cond_test call_tmp[652945]))
    if call_tmp[652950]
    {
      (516907 'move' ret[516902](516906 'deref' 0))
      gotoReturn _end_bulkAdd[516900] _end_bulkAdd[516900]
    }
    unknown call_tmp[652957] "expr temp" "maybe param" "maybe type" "temp"
    (652960 'move' call_tmp[652957](359450 call _value _mt[243] this[126082]))
    unknown call_tmp[652964] "expr temp" "maybe param" "maybe type" "temp"
    (652967 'move' call_tmp[652964](122060 call(122051 call (partial) dsiBulkAdd _mt[243] call_tmp[652957]) inds[121998] dataSorted[122004] isUnique[122008] preserveInds[122012] addOn[122016]))
    (516912 'move' ret[516902](516911 'deref' call_tmp[652964]))
    label _end_bulkAdd[516900]
    (516904 return ret[516902])
  }
  where {
    unknown tmp[424696] "maybe param" "temp"
    (424707 'move' tmp[424696](122022 call isSparseDom this[126082]))
    unknown call_tmp[652969] "expr temp" "maybe param" "maybe type" "temp"
    (652972 'move' call_tmp[652969](424709 call _cond_invalid tmp[424696]))
    if call_tmp[652969]
    {
      (424712 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565200] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565201] "maybe param" "temp"
    unknown call_tmp[652974] "expr temp" "maybe param" "maybe type" "temp"
    (652977 'move' call_tmp[652974](424697 call isTrue tmp[424696]))
    (565206 'move' tmp[565201](565204 call _cond_test call_tmp[652974]))
    if tmp[565201]
    {
      unknown tmp[565208] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652981] "expr temp" "maybe param" "maybe type" "temp"
      (652984 'move' call_tmp[652981](359445 call _value _mt[243] this[126082]))
      unknown call_tmp[652988] "expr temp" "maybe param" "maybe type" "temp"
      (652991 'move' call_tmp[652988](122024 call rank _mt[243] call_tmp[652981]))
      unknown call_tmp[652993] "expr temp" "maybe param" "maybe type" "temp"
      (652996 'move' call_tmp[652993](122028 call == call_tmp[652988] 1))
      (565210 'move' tmp[565208](424700 call isTrue call_tmp[652993]))
      (565215 'move' tmp[565200](565212 '_paramFoldLogical' tmp[565201] tmp[565208]))
    }
    {
      (565220 'move' tmp[565200](565217 '_paramFoldLogical' tmp[565201] 0))
    }
    unknown call_tmp[653000] "expr temp" "maybe param" "maybe type" "temp"
    (653003 'move' call_tmp[653000](359441 call _value _mt[243] this[126082]))
    unknown call_tmp[653007] "expr temp" "maybe param" "maybe type" "temp"
    (653010 'move' call_tmp[653007](121992 call idxType _mt[243] call_tmp[653000]))
    unknown call_tmp[653014] "expr temp" "maybe param" "maybe type" "temp"
    (653017 'move' call_tmp[653014](461444 call eltType _mt[243] inds[121998]))
    unknown call_tmp[653019] "expr temp" "maybe param" "maybe type" "temp"
    (653022 'move' call_tmp[653019](461448 call == call_tmp[653007] call_tmp[653014]))
    (461442 call & tmp[565200] call_tmp[653019])
  }
  function _domain[125908](?).makeIndexBuffer[122072](arg _mt[126088]:_MT[238], arg this[126086]:_domain[125908](?), arg size[122069]:int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[516916] "RVV" "temp"
    unknown call_tmp[653026] "expr temp" "maybe param" "maybe type" "temp"
    (653029 'move' call_tmp[653026](359454 call _value _mt[243] this[126086]))
    unknown call_tmp[653033] "expr temp" "maybe param" "maybe type" "temp"
    (653036 'move' call_tmp[653033](122082 call(122077 call (partial) dsiMakeIndexBuffer _mt[243] call_tmp[653026]) size[122069]))
    (516921 'move' ret[516916](516920 'deref' call_tmp[653033]))
    (516918 return ret[516916])
  }
  function _domain[125908](?).bulkAdd[122106](arg _mt[126092]:_MT[238], arg this[126090]:_domain[125908](?), arg inds[122103]:_array[133594](?), arg dataSorted[122109] :
  0 =
  0, arg isUnique[122113] :
  0 =
  0, arg preserveInds[122117] :
  1 =
  1, arg addOn[122121] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516925] "RVV" "temp"
    unknown call_tmp[653040] "expr temp" "maybe param" "maybe type" "temp"
    (653043 'move' call_tmp[653040](122138 call size _mt[243] inds[122103]))
    unknown call_tmp[653045] "expr temp" "maybe param" "maybe type" "temp"
    (653048 'move' call_tmp[653045](122142 call == call_tmp[653040] 0))
    unknown call_tmp[653050] "expr temp" "maybe param" "maybe type" "temp"
    (653053 'move' call_tmp[653050](122147 call _cond_test call_tmp[653045]))
    if call_tmp[653050]
    {
      (516930 'move' ret[516925](516929 'deref' 0))
      gotoReturn _end_bulkAdd[516923] _end_bulkAdd[516923]
    }
    unknown call_tmp[653057] "expr temp" "maybe param" "maybe type" "temp"
    (653060 'move' call_tmp[653057](359471 call _value _mt[243] this[126090]))
    unknown call_tmp[653064] "expr temp" "maybe param" "maybe type" "temp"
    (653067 'move' call_tmp[653064](122163 call(122154 call (partial) dsiBulkAdd _mt[243] call_tmp[653057]) inds[122103] dataSorted[122109] isUnique[122113] preserveInds[122117] addOn[122121]))
    (516935 'move' ret[516925](516934 'deref' call_tmp[653064]))
    label _end_bulkAdd[516923]
    (516927 return ret[516925])
  }
  where {
    unknown tmp[424717] "maybe param" "temp"
    (424728 'move' tmp[424717](122127 call isSparseDom this[126090]))
    unknown call_tmp[653069] "expr temp" "maybe param" "maybe type" "temp"
    (653072 'move' call_tmp[653069](424730 call _cond_invalid tmp[424717]))
    if call_tmp[653069]
    {
      (424733 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565227] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565228] "maybe param" "temp"
    unknown call_tmp[653074] "expr temp" "maybe param" "maybe type" "temp"
    (653077 'move' call_tmp[653074](424718 call isTrue tmp[424717]))
    (565233 'move' tmp[565228](565231 call _cond_test call_tmp[653074]))
    if tmp[565228]
    {
      unknown tmp[565235] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653081] "expr temp" "maybe param" "maybe type" "temp"
      (653084 'move' call_tmp[653081](359466 call _value _mt[243] this[126090]))
      unknown call_tmp[653088] "expr temp" "maybe param" "maybe type" "temp"
      (653091 'move' call_tmp[653088](122129 call rank _mt[243] call_tmp[653081]))
      unknown call_tmp[653093] "expr temp" "maybe param" "maybe type" "temp"
      (653096 'move' call_tmp[653093](122133 call > call_tmp[653088] 1))
      (565237 'move' tmp[565235](424721 call isTrue call_tmp[653093]))
      (565242 'move' tmp[565227](565239 '_paramFoldLogical' tmp[565228] tmp[565235]))
    }
    {
      (565247 'move' tmp[565227](565244 '_paramFoldLogical' tmp[565228] 0))
    }
    unknown call_tmp[653100] "expr temp" "maybe param" "maybe type" "temp"
    (653103 'move' call_tmp[653100](359458 call _value _mt[243] this[126090]))
    unknown call_tmp[653107] "expr temp" "maybe param" "maybe type" "temp"
    (653110 'move' call_tmp[653107](122091 call rank _mt[243] call_tmp[653100]))
    unknown call_tmp[653114] "expr temp" "maybe param" "maybe type" "temp"
    (653117 'move' call_tmp[653114](359462 call _value _mt[243] this[126090]))
    unknown call_tmp[653121] "expr temp" "maybe param" "maybe type" "temp"
    (653124 'move' call_tmp[653121](122095 call idxType _mt[243] call_tmp[653114]))
    unknown call_tmp[653126] "expr temp" "maybe param" "maybe type" "temp"
    (653129 'move' call_tmp[653126](122098 call * call_tmp[653107] call_tmp[653121]))
    unknown call_tmp[653133] "expr temp" "maybe param" "maybe type" "temp"
    (653136 'move' call_tmp[653133](461454 call eltType _mt[243] inds[122103]))
    unknown call_tmp[653138] "expr temp" "maybe param" "maybe type" "temp"
    (653141 'move' call_tmp[653138](461458 call == call_tmp[653126] call_tmp[653133]))
    (461452 call & tmp[565227] call_tmp[653138])
  }
  function _domain[125908](?).remove[122173](arg _mt[126096]:_MT[238], arg this[126094]:_domain[125908](?), arg i[122171]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516939] "RVV" "temp"
    unknown call_tmp[653145] "expr temp" "maybe param" "maybe type" "temp"
    (653148 'move' call_tmp[653145](359475 call _value _mt[243] this[126094]))
    unknown call_tmp[653152] "expr temp" "maybe param" "maybe type" "temp"
    (653155 'move' call_tmp[653152](122183 call(122178 call (partial) dsiRemove _mt[243] call_tmp[653145]) i[122171]))
    (516944 'move' ret[516939](516943 'deref' call_tmp[653152]))
    (516941 return ret[516939])
  }
  function _domain[125908](?).requestCapacity[122193](arg _mt[126100]:_MT[238], arg this[126098]:_domain[125908](?), arg i[122191]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[653157] "expr temp" "maybe param" "maybe type" "temp"
    (653160 'move' call_tmp[653157](122197 call < i[122191] 0))
    unknown call_tmp[653162] "expr temp" "maybe param" "maybe type" "temp"
    (653165 'move' call_tmp[653162](122221 call _cond_test call_tmp[653157]))
    if call_tmp[653162]
    {
      (122218 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    unknown call_tmp[653167] "expr temp" "maybe param" "maybe type" "temp"
    (653170 'move' call_tmp[653167](122229 call isAssociativeDom this[126098]))
    unknown call_tmp[653172] "expr temp" "maybe param" "maybe type" "temp"
    (653175 'move' call_tmp[653172](122230 call ! call_tmp[653167]))
    unknown call_tmp[653177] "expr temp" "maybe param" "maybe type" "temp"
    (653180 'move' call_tmp[653177](122253 call _cond_test call_tmp[653172]))
    if call_tmp[653177]
    {
      (122251 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    unknown call_tmp[653184] "expr temp" "maybe param" "maybe type" "temp"
    (653187 'move' call_tmp[653184](359479 call _value _mt[243] this[126098]))
    (122266 call(122261 call (partial) dsiRequestCapacity _mt[243] call_tmp[653184]) i[122191])
    (516946 return _void[55])
  }
  function _domain[125908](?).size[122272](arg _mt[126104]:_MT[238], arg this[126102]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516950] "RVV" "temp"
    unknown call_tmp[653193] "expr temp" "maybe param" "maybe type" "temp"
    (653196 'move' call_tmp[653193](359483 call _value _mt[243] this[126102]))
    unknown call_tmp[653200] "expr temp" "maybe param" "maybe type" "temp"
    (653203 'move' call_tmp[653200](122275 call dsiNumIndices _mt[243] call_tmp[653193]))
    (516955 'move' ret[516950](516954 'deref' call_tmp[653200]))
    (516952 return ret[516950])
  }
  function _domain[125908](?).numIndices[122285](arg _mt[126108]:_MT[238], arg this[126106]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516959] "RVV" "temp"
    unknown call_tmp[653205] "expr temp" "maybe param" "maybe type" "temp"
    (653208 'move' call_tmp[653205](122322 call + "'domain.numIndices' is deprecated - " "please use 'domain.size' instead"))
    (122325 call compilerWarning call_tmp[653205])
    (479726 'end of statement')
    unknown call_tmp[653212] "expr temp" "maybe param" "maybe type" "temp"
    (653215 'move' call_tmp[653212](383024 call size _mt[243] this[126106]))
    (516964 'move' ret[516959](516963 'deref' call_tmp[653212]))
    (516961 return ret[516959])
  }
  function _domain[125908](?).low[122335](arg _mt[126112]:_MT[238], arg this[126110]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516968] "RVV" "temp"
    unknown call_tmp[653219] "expr temp" "maybe param" "maybe type" "temp"
    (653222 'move' call_tmp[653219](359487 call _value _mt[243] this[126110]))
    unknown call_tmp[653226] "expr temp" "maybe param" "maybe type" "temp"
    (653229 'move' call_tmp[653226](122338 call dsiLow _mt[243] call_tmp[653219]))
    (516973 'move' ret[516968](516972 'deref' call_tmp[653226]))
    (516970 return ret[516968])
  }
  function _domain[125908](?).high[122348](arg _mt[126116]:_MT[238], arg this[126114]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516977] "RVV" "temp"
    unknown call_tmp[653233] "expr temp" "maybe param" "maybe type" "temp"
    (653236 'move' call_tmp[653233](359491 call _value _mt[243] this[126114]))
    unknown call_tmp[653240] "expr temp" "maybe param" "maybe type" "temp"
    (653243 'move' call_tmp[653240](122353 call dsiHigh _mt[243] call_tmp[653233]))
    (516982 'move' ret[516977](516981 'deref' call_tmp[653240]))
    (516979 return ret[516977])
  }
  function _domain[125908](?).stride[122363](arg _mt[126120]:_MT[238], arg this[126118]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516986] "RVV" "temp"
    unknown call_tmp[653247] "expr temp" "maybe param" "maybe type" "temp"
    (653250 'move' call_tmp[653247](359495 call _value _mt[243] this[126118]))
    unknown call_tmp[653254] "expr temp" "maybe param" "maybe type" "temp"
    (653257 'move' call_tmp[653254](122366 call dsiStride _mt[243] call_tmp[653247]))
    (516991 'move' ret[516986](516990 'deref' call_tmp[653254]))
    (516988 return ret[516986])
  }
  function _domain[125908](?).alignment[122376](arg _mt[126124]:_MT[238], arg this[126122]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516995] "RVV" "temp"
    unknown call_tmp[653261] "expr temp" "maybe param" "maybe type" "temp"
    (653264 'move' call_tmp[653261](359499 call _value _mt[243] this[126122]))
    unknown call_tmp[653268] "expr temp" "maybe param" "maybe type" "temp"
    (653271 'move' call_tmp[653268](122381 call dsiAlignment _mt[243] call_tmp[653261]))
    (517000 'move' ret[516995](516999 'deref' call_tmp[653268]))
    (516997 return ret[516995])
  }
  function _domain[125908](?).first[122391](arg _mt[126128]:_MT[238], arg this[126126]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517004] "RVV" "temp"
    unknown call_tmp[653275] "expr temp" "maybe param" "maybe type" "temp"
    (653278 'move' call_tmp[653275](359503 call _value _mt[243] this[126126]))
    unknown call_tmp[653282] "expr temp" "maybe param" "maybe type" "temp"
    (653285 'move' call_tmp[653282](122396 call dsiFirst _mt[243] call_tmp[653275]))
    (517009 'move' ret[517004](517008 'deref' call_tmp[653282]))
    (517006 return ret[517004])
  }
  function _domain[125908](?).last[122406](arg _mt[126132]:_MT[238], arg this[126130]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517013] "RVV" "temp"
    unknown call_tmp[653289] "expr temp" "maybe param" "maybe type" "temp"
    (653292 'move' call_tmp[653289](359507 call _value _mt[243] this[126130]))
    unknown call_tmp[653296] "expr temp" "maybe param" "maybe type" "temp"
    (653299 'move' call_tmp[653296](122411 call dsiLast _mt[243] call_tmp[653289]))
    (517018 'move' ret[517013](517017 'deref' call_tmp[653296]))
    (517015 return ret[517013])
  }
  function _domain[125908](?).alignedLow[122421](arg _mt[126136]:_MT[238], arg this[126134]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517022] "RVV" "temp"
    unknown call_tmp[653303] "expr temp" "maybe param" "maybe type" "temp"
    (653306 'move' call_tmp[653303](359511 call _value _mt[243] this[126134]))
    unknown call_tmp[653310] "expr temp" "maybe param" "maybe type" "temp"
    (653313 'move' call_tmp[653310](122426 call dsiAlignedLow _mt[243] call_tmp[653303]))
    (517027 'move' ret[517022](517026 'deref' call_tmp[653310]))
    (517024 return ret[517022])
  }
  function _domain[125908](?).alignedHigh[122436](arg _mt[126140]:_MT[238], arg this[126138]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517031] "RVV" "temp"
    unknown call_tmp[653317] "expr temp" "maybe param" "maybe type" "temp"
    (653320 'move' call_tmp[653317](359515 call _value _mt[243] this[126138]))
    unknown call_tmp[653324] "expr temp" "maybe param" "maybe type" "temp"
    (653327 'move' call_tmp[653324](122441 call dsiAlignedHigh _mt[243] call_tmp[653317]))
    (517036 'move' ret[517031](517035 'deref' call_tmp[653324]))
    (517033 return ret[517031])
  }
  function _domain[125908](?).indices[122451](arg _mt[126144]:_MT[238], arg this[126142]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (122472 call compilerError "domains do not support '.indices'")
    (517038 return _void[55])
  }
  function _domain[125908](?).contains[122489](arg _mt[126148]:_MT[238], arg this[126146]:_domain[125908](?), arg i[122486] :
  unknown call_tmp[653331] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517042] "RVV" "temp"
    unknown tmp[424738] "maybe param" "temp"
    (424749 'move' tmp[424738](122494 call isRectangularDom this[126146]))
    unknown call_tmp[653350] "expr temp" "maybe param" "maybe type" "temp"
    (653353 'move' call_tmp[653350](424751 call _cond_invalid tmp[424738]))
    if call_tmp[653350]
    {
      (424754 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565254] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565255] "maybe param" "temp"
    unknown call_tmp[653355] "expr temp" "maybe param" "maybe type" "temp"
    (653358 'move' call_tmp[653355](424739 call isTrue tmp[424738]))
    (565260 'move' tmp[565255](565258 call _cond_test call_tmp[653355]))
    if tmp[565255]
    {
      (565265 'move' tmp[565254](565262 '_paramFoldLogical' tmp[565255] 1))
    }
    {
      unknown tmp[565267] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653360] "expr temp" "maybe param" "maybe type" "temp"
      (653363 'move' call_tmp[653360](122498 call isSparseDom this[126146]))
      (565269 'move' tmp[565267](424743 call isTrue call_tmp[653360]))
      (565274 'move' tmp[565254](565271 '_paramFoldLogical' tmp[565255] tmp[565267]))
    }
    unknown call_tmp[653365] "expr temp" "maybe param" "maybe type" "temp"
    (653368 'move' call_tmp[653365](122526 call _cond_test tmp[565254]))
    if call_tmp[653365]
    {
      unknown call_tmp[653372] "expr temp" "maybe param" "maybe type" "temp"
      (653375 'move' call_tmp[653372](359523 call _value _mt[243] this[126146]))
      unknown call_tmp[653381] "expr temp" "maybe param" "maybe type" "temp"
      (653384 'move' call_tmp[653381](383034 call rank _mt[243] this[126146]))
      unknown call_tmp[653386] "expr temp" "maybe param" "maybe type" "temp"
      (653389 'move' call_tmp[653386](122509 call _makeIndexTuple call_tmp[653381] i[122486]))
      unknown call_tmp[653391] "expr temp" "maybe param" "maybe type" "temp"
      (653394 'move' call_tmp[653391](122511 call(122502 call (partial) dsiMember _mt[243] call_tmp[653372]) call_tmp[653386]))
      (517047 'move' ret[517042](517046 'deref' call_tmp[653391]))
      gotoReturn _end_contains[517040] _end_contains[517040]
    }
    {
      unknown call_tmp[653398] "expr temp" "maybe param" "maybe type" "temp"
      (653401 'move' call_tmp[653398](359527 call _value _mt[243] this[126146]))
      unknown call_tmp[653405] "expr temp" "maybe param" "maybe type" "temp"
      (653408 'move' call_tmp[653405](122521 call i[122486] 0))
      unknown call_tmp[653410] "expr temp" "maybe param" "maybe type" "temp"
      (653413 'move' call_tmp[653410](122523 call(122515 call (partial) dsiMember _mt[243] call_tmp[653398]) call_tmp[653405]))
      (517052 'move' ret[517042](517051 'deref' call_tmp[653410]))
      gotoReturn _end_contains[517040] _end_contains[517040]
    }
    label _end_contains[517040]
    (517044 return ret[517042])
  }
  function _domain[125908](?).contains[122546](arg _mt[126152]:_MT[238], arg this[126150]:_domain[125908](?), arg i[122542] ... :
  unknown call_tmp[653417] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[517058] "RVV" "temp"
    unknown call_tmp[653428] "expr temp" "maybe param" "maybe type" "temp"
    (653431 'move' call_tmp[653428](122551 call(383044 call (partial) contains _mt[243] this[126150]) i[122542]))
    (517063 'move' ret[517058](517062 'deref' call_tmp[653428]))
    (517060 return ret[517058])
  }
  function _domain[125908](?).member[122569](arg _mt[126156]:_MT[238], arg this[126154]:_domain[125908](?), arg i[122566] :
  unknown call_tmp[653435] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    unknown ret[517067] "RVV" "temp"
    unknown call_tmp[653454] "expr temp" "maybe param" "maybe type" "temp"
    (653457 'move' call_tmp[653454](122606 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122609 call compilerWarning call_tmp[653454])
    (479741 'end of statement')
    unknown call_tmp[653461] "expr temp" "maybe param" "maybe type" "temp"
    (653464 'move' call_tmp[653461](122618 call(122613 call (partial) contains _mt[243] this[126154]) i[122566]))
    (517072 'move' ret[517067](517071 'deref' call_tmp[653461]))
    (517069 return ret[517067])
  }
  function _domain[125908](?).member[122634](arg _mt[126160]:_MT[238], arg this[126158]:_domain[125908](?), arg i[122630] ... :
  unknown call_tmp[653468] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[517076] "RVV" "temp"
    unknown call_tmp[653477] "expr temp" "maybe param" "maybe type" "temp"
    (653480 'move' call_tmp[653477](122639 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122642 call compilerWarning call_tmp[653477])
    (479743 'end of statement')
    unknown call_tmp[653484] "expr temp" "maybe param" "maybe type" "temp"
    (653487 'move' call_tmp[653484](122651 call(122646 call (partial) contains _mt[243] this[126158]) i[122630]))
    (517081 'move' ret[517076](517080 'deref' call_tmp[653484]))
    (517078 return ret[517076])
  }
  function _domain[125908](?).isSubset[122662](arg _mt[126164]:_MT[238], arg this[126162]:_domain[125908](?), arg super[122659]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517085] "RVV" "temp"
    unknown tmp[424759] "maybe param" "temp"
    (424770 'move' tmp[424759](122667 call isAssociativeDom this[126162]))
    unknown call_tmp[653489] "expr temp" "maybe param" "maybe type" "temp"
    (653492 'move' call_tmp[653489](424772 call _cond_invalid tmp[424759]))
    if call_tmp[653489]
    {
      (424775 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565281] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565282] "maybe param" "temp"
    unknown call_tmp[653494] "expr temp" "maybe param" "maybe type" "temp"
    (653497 'move' call_tmp[653494](424760 call isTrue tmp[424759]))
    (565287 'move' tmp[565282](565285 call _cond_test call_tmp[653494]))
    if tmp[565282]
    {
      (565292 'move' tmp[565281](565289 '_paramFoldLogical' tmp[565282] 1))
    }
    {
      unknown tmp[565294] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653499] "expr temp" "maybe param" "maybe type" "temp"
      (653502 'move' call_tmp[653499](122671 call isRectangularDom this[126162]))
      (565296 'move' tmp[565294](424764 call isTrue call_tmp[653499]))
      (565301 'move' tmp[565281](565298 '_paramFoldLogical' tmp[565282] tmp[565294]))
    }
    unknown call_tmp[653504] "expr temp" "maybe param" "maybe type" "temp"
    (653507 'move' call_tmp[653504](122674 call ! tmp[565281]))
    unknown call_tmp[653509] "expr temp" "maybe param" "maybe type" "temp"
    (653512 'move' call_tmp[653509](122729 call _cond_test call_tmp[653504]))
    if call_tmp[653509]
    {
      unknown call_tmp[653514] "expr temp" "maybe param" "maybe type" "temp"
      (653517 'move' call_tmp[653514](122679 call isSparseDom this[126162]))
      unknown call_tmp[653519] "expr temp" "maybe param" "maybe type" "temp"
      (653522 'move' call_tmp[653519](122722 call _cond_test call_tmp[653514]))
      if call_tmp[653519]
      {
        (122699 call compilerError "isSubset not supported on sparse domains")
      }
      {
        (122720 call compilerError "isSubset not supported on this domain type")
      }
    }
    unknown call_tmp[653524] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653527 'move' call_tmp[653524](122735 'typeof' super[122659]))
    unknown call_tmp[653529] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653532 'move' call_tmp[653529](122737 'typeof' this[126162]))
    unknown call_tmp[653534] "expr temp" "maybe param" "maybe type" "temp"
    (653537 'move' call_tmp[653534](122738 call != call_tmp[653524] call_tmp[653529]))
    unknown call_tmp[653539] "expr temp" "maybe param" "maybe type" "temp"
    (653542 'move' call_tmp[653539](122846 call _cond_test call_tmp[653534]))
    if call_tmp[653539]
    {
      unknown call_tmp[653544] "expr temp" "maybe param" "maybe type" "temp"
      (653547 'move' call_tmp[653544](122743 call isRectangularDom this[126162]))
      unknown call_tmp[653549] "expr temp" "maybe param" "maybe type" "temp"
      (653552 'move' call_tmp[653549](122841 call _cond_test call_tmp[653544]))
      if call_tmp[653549]
      {
        unknown call_tmp[653556] "expr temp" "maybe param" "maybe type" "temp"
        (653559 'move' call_tmp[653556](122745 call rank _mt[243] super[122659]))
        unknown call_tmp[653563] "expr temp" "maybe param" "maybe type" "temp"
        (653566 'move' call_tmp[653563](122749 call rank _mt[243] this[126162]))
        unknown call_tmp[653568] "expr temp" "maybe param" "maybe type" "temp"
        (653571 'move' call_tmp[653568](122752 call != call_tmp[653556] call_tmp[653563]))
        unknown call_tmp[653573] "expr temp" "maybe param" "maybe type" "temp"
        (653576 'move' call_tmp[653573](122813 call _cond_test call_tmp[653568]))
        if call_tmp[653573]
        {
          (122773 call compilerError "rank mismatch in domain.isSubset()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492197] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653580] "expr temp" "maybe param" "maybe type" "temp"
            (653583 'move' call_tmp[653580](122776 call low _mt[243] super[122659]))
            (492201 'move' call_type_tmp[492197](122779 'typeof' call_tmp[653580]))
          }
          { scopeless type
            unknown call_type_tmp[492203] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653587] "expr temp" "maybe param" "maybe type" "temp"
            (653590 'move' call_tmp[653587](122781 call low _mt[243] this[126162]))
            (492207 'move' call_type_tmp[492203](122784 'typeof' call_tmp[653587]))
          }
          unknown call_tmp[653592] "expr temp" "maybe param" "maybe type" "temp"
          (653595 'move' call_tmp[653592](122785 call != call_type_tmp[492197] call_type_tmp[492203]))
          unknown call_tmp[653597] "expr temp" "maybe param" "maybe type" "temp"
          (653600 'move' call_tmp[653597](122808 call _cond_test call_tmp[653592]))
          if call_tmp[653597]
          {
            (122806 call compilerError "isSubset called with different index types")
          }
        }
      }
      {
        (122839 call compilerError "isSubset called with different associative domain types")
      }
    }
    unknown call_tmp[653602] "expr temp" "maybe param" "maybe type" "temp"
    (653605 'move' call_tmp[653602](122854 call isRectangularDom this[126162]))
    unknown call_tmp[653607] "expr temp" "maybe param" "maybe type" "temp"
    (653610 'move' call_tmp[653607](122977 call _cond_test call_tmp[653602]))
    if call_tmp[653607]
    {
      unknown contains[122856] "dead at end of block" "insert auto destroy"
      (542930 'init var' contains[122856] 1)
      (122859 'end of statement')
      {
        unknown _indexOfInterest[122926] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[122927] "expr temp" "temp"
        unknown call_tmp[653614] "expr temp" "maybe param" "maybe type" "temp"
        (653617 'move' call_tmp[653614](122948 call(122945 call (partial) dims _mt[243] this[126162])))
        unknown call_tmp[653621] "expr temp" "maybe param" "maybe type" "temp"
        (653624 'move' call_tmp[653621](122943 call size _mt[243] call_tmp[653614]))
        unknown call_tmp[653626] "expr temp" "maybe param" "maybe type" "temp"
        (653629 'move' call_tmp[653626](122941 call - call_tmp[653621] 1))
        unknown call_tmp[653631] "expr temp" "maybe param" "maybe type" "temp"
        (653634 'move' call_tmp[653631](122951 call chpl_direct_range_iter 0 call_tmp[653626] 1))
        (122936 'move' _iterator[122927](122934 call _getIterator call_tmp[653631]))
        Defer
        {
          {
            (122967 call _freeIterator _iterator[122927])
          }
        }
        { scopeless type
          (122956 'move' _indexOfInterest[122926](122953 call iteratorIndex _iterator[122927]))
        }
        ForLoop[122928]
        {
          unknown i[122960] "index var" "insert auto destroy"
          (479752 'end of statement')
          (122962 'move' i[122960] _indexOfInterest[122926])
          (479753 'end of statement' i[122960])
          {
            {
              unknown tmp[122902] "temp"
              (122905 'move' tmp[122902](122904 'addr of' contains[122856]))
              unknown tmp[424780] "maybe param" "temp"
              (424791 'move' tmp[424780] tmp[122902])
              unknown call_tmp[653636] "expr temp" "maybe param" "maybe type" "temp"
              (653639 'move' call_tmp[653636](424793 call _cond_invalid tmp[424780]))
              if call_tmp[653636]
              {
                (424796 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565308] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565309] "maybe param" "temp"
              unknown call_tmp[653641] "expr temp" "maybe param" "maybe type" "temp"
              (653644 'move' call_tmp[653641](424781 call isTrue tmp[424780]))
              (565314 'move' tmp[565309](565312 call _cond_test call_tmp[653641]))
              if tmp[565309]
              {
                unknown tmp[565316] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653648] "expr temp" "maybe param" "maybe type" "temp"
                (653651 'move' call_tmp[653648](122883 call(122879 call (partial) dims _mt[243] super[122659])))
                unknown call_tmp[653653] "expr temp" "maybe param" "maybe type" "temp"
                (653656 'move' call_tmp[653653](122886 call call_tmp[653648] i[122960]))
                unknown call_tmp[653662] "expr temp" "maybe param" "maybe type" "temp"
                (653665 'move' call_tmp[653662](122895 call(122891 call (partial) dims _mt[243] this[126162])))
                unknown call_tmp[653667] "expr temp" "maybe param" "maybe type" "temp"
                (653670 'move' call_tmp[653667](122898 call call_tmp[653662] i[122960]))
                unknown call_tmp[653672] "expr temp" "maybe param" "maybe type" "temp"
                (653675 'move' call_tmp[653672](122900 call(122887 call (partial) contains _mt[243] call_tmp[653653]) call_tmp[653667]))
                (565318 'move' tmp[565316](424784 call isTrue call_tmp[653672]))
                (565323 'move' tmp[565308](565320 '_paramFoldLogical' tmp[565309] tmp[565316]))
              }
              {
                (565328 'move' tmp[565308](565325 '_paramFoldLogical' tmp[565309] 0))
              }
              (122910 call = tmp[122902] tmp[565308])
              (479756 'end of statement' i[122960] i[122960])
            }
            unknown call_tmp[653677] "expr temp" "maybe param" "maybe type" "temp"
            (653680 'move' call_tmp[653677](122916 call == contains[122856] 0))
            unknown call_tmp[653682] "expr temp" "maybe param" "maybe type" "temp"
            (653685 'move' call_tmp[653682](122921 call _cond_test call_tmp[653677]))
            if call_tmp[653682]
            {
              break _breakLabel[122932] _breakLabel[122932]
            }
          }
          label _continueLabel[122931]
          _indexOfInterest[122926]
          _iterator[122927]
        }
        label _breakLabel[122932]
      }
      (517090 'move' ret[517085](517089 'deref' contains[122856]))
      gotoReturn _end_isSubset[517083] _end_isSubset[517083]
      (479759 'end of statement' contains[122856])
    }
    function chpl__loopexpr_iter4[582138](arg iterator[582140]:_any[178](?), arg super[582276]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582287] "RVV" "temp"
      {
        unknown _indexOfInterest[582145] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582146] "expr temp" "temp"
        (582155 'move' _iterator[582146](582153 call _getIterator iterator[582140]))
        Defer
        {
          {
            (582169 call _freeIterator _iterator[582146])
          }
        }
        { scopeless type
          (582160 'move' _indexOfInterest[582145](582157 call iteratorIndex _iterator[582146]))
        }
        ForLoop[582147] for-expr
        {
          unknown i[122993] "index var" "insert auto destroy" "no doc"
          (582280 'end of statement')
          (582164 'move' i[122993] _indexOfInterest[582145])
          (582281 'end of statement' i[122993])
          {
            {
              unknown yret[582291] "YVV" "temp"
              unknown call_tmp[582300] "expr temp" "maybe param" "maybe type" "temp"
              (582303 'move' call_tmp[582300](122990 call(122985 call (partial) contains _mt[243] super[582276]) i[122993]))
              (582294 'move' yret[582291](582293 'deref' call_tmp[582300]))
              (582296 yield yret[582291])
              (582283 'end of statement' i[122993])
            }
          }
          label _continueLabel[582150]
          _indexOfInterest[582145]
          _iterator[582146]
        }
        label _breakLabel[582151]
      }
      (582289 return ret[582287])
    }
    function chpl__loopexpr_iter4[582176](param arg tag[582180]:iterKind[453], arg iterator[582183]:_any[178](?), arg super[582204]:_any[178](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582330] "RVV" "temp"
      const _leaderIterator[582195] "const" "expr temp" "temp"
      (582200 'move' _leaderIterator[582195](582197 call _toLeader iterator[582183]))
      (582335 'move' ret[582330](582334 'deref' _leaderIterator[582195]))
      (582332 return ret[582330])
    }
    where {
      unknown tmp[582306] "maybe param" "temp"
      (582317 'move' tmp[582306](582185 call == tag[582180] leader[447]))
      unknown call_tmp[582364] "expr temp" "maybe param" "maybe type" "temp"
      (582367 'move' call_tmp[582364](582319 call _cond_invalid tmp[582306]))
      if call_tmp[582364]
      {
        (582322 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582337] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582338] "maybe param" "temp"
      unknown call_tmp[582369] "expr temp" "maybe param" "maybe type" "temp"
      (582372 'move' call_tmp[582369](582307 call isTrue tmp[582306]))
      (582343 'move' tmp[582338](582341 call _cond_test call_tmp[582369]))
      if tmp[582338]
      {
        unknown tmp[582345] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582374] "expr temp" "maybe param" "maybe type" "temp"
        (582377 'move' call_tmp[582374](582189 'call resolves' "_toLeader" iterator[582183]))
        (582347 'move' tmp[582345](582310 call isTrue call_tmp[582374]))
        (582352 'move' tmp[582337](582349 '_paramFoldLogical' tmp[582338] tmp[582345]))
      }
      {
        (582357 'move' tmp[582337](582354 '_paramFoldLogical' tmp[582338] 0))
      }
      (748485 call chpl_statementLevelSymbol tmp[582337])
    }
    function chpl__loopexpr_iter4[582206](param arg tag[582210]:iterKind[453], arg followThis[582213]:_any[178](?), arg iterator[582215]:_any[178](?), arg super[582274]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582388] "RVV" "temp"
      const _followerIterator[582222] "const" "expr temp" "temp"
      (582228 'move' _followerIterator[582222](582224 call _toFollower iterator[582215] followThis[582213]))
      {
        unknown _indexOfInterest[582243] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582244] "expr temp" "temp"
        (582253 'move' _iterator[582244](582251 call _getIterator _followerIterator[582222]))
        Defer
        {
          {
            (582267 call _freeIterator _iterator[582244])
          }
        }
        { scopeless type
          (582258 'move' _indexOfInterest[582243](582255 call iteratorIndex _iterator[582244]))
        }
        ForLoop[582245] lowered-forall for-expr
        {
          unknown i[582230] "index var" "insert auto destroy" "no doc"
          (582381 'end of statement')
          (582262 'move' i[582230] _indexOfInterest[582243])
          (582382 'end of statement' i[582230])
          {
            {
              unknown yret[582392] "YVV" "temp"
              unknown call_tmp[582401] "expr temp" "maybe param" "maybe type" "temp"
              (582404 'move' call_tmp[582401](582239 call(582236 call (partial) contains _mt[243] super[582274]) i[582230]))
              (582395 'move' yret[582392](582394 'deref' call_tmp[582401]))
              (582397 yield yret[582392])
              (582384 'end of statement' i[582230])
            }
          }
          label _continueLabel[582248]
          _indexOfInterest[582243]
          _iterator[582244]
        }
        label _breakLabel[582249]
      }
      (582390 return ret[582388])
    }
    where {
      (582218 call == tag[582210] follower[449])
    }
    function chpl__forallexpr4[582118](arg iterExpr[582121]:_any[178](?), arg super[582125]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582409] "RVV" "temp"
      unknown _iterator[582128] "expr temp" "maybe ref" "temp"
      (582130 'move' _iterator[582128] iterExpr[582121])
      unknown call_tmp[582416] "expr temp" "maybe param" "maybe type" "temp"
      (582419 'move' call_tmp[582416](582133 call chpl__loopexpr_iter4 _iterator[582128] super[582125]))
      (582414 'move' ret[582409](582413 'deref' call_tmp[582416]))
      (582411 return ret[582409])
    }
    unknown call_tmp[582421] "expr temp" "maybe param" "maybe type" "temp"
    (582424 'move' call_tmp[582421](582123 call chpl__forallexpr4 this[126162] super[122659]))
    (582428 'iterator record set shape' call_tmp[582421] this[126162] 0)
    unknown call_tmp[653687] "expr temp" "maybe param" "maybe type" "temp"
    (653690 'move' call_tmp[653687](122995 'reduce' LogicalAndReduceScanOp[376662](?) call_tmp[582421] 0))
    (517095 'move' ret[517085](517094 'deref' call_tmp[653687]))
    label _end_isSubset[517083]
    (517087 return ret[517085])
  }
  function _domain[125908](?).isSuper[123007](arg _mt[126168]:_MT[238], arg this[126166]:_domain[125908](?), arg sub[123004]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517099] "RVV" "temp"
    unknown tmp[424801] "maybe param" "temp"
    (424812 'move' tmp[424801](123012 call isAssociativeDom this[126166]))
    unknown call_tmp[653692] "expr temp" "maybe param" "maybe type" "temp"
    (653695 'move' call_tmp[653692](424814 call _cond_invalid tmp[424801]))
    if call_tmp[653692]
    {
      (424817 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565335] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565336] "maybe param" "temp"
    unknown call_tmp[653697] "expr temp" "maybe param" "maybe type" "temp"
    (653700 'move' call_tmp[653697](424802 call isTrue tmp[424801]))
    (565341 'move' tmp[565336](565339 call _cond_test call_tmp[653697]))
    if tmp[565336]
    {
      (565346 'move' tmp[565335](565343 '_paramFoldLogical' tmp[565336] 1))
    }
    {
      unknown tmp[565348] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653702] "expr temp" "maybe param" "maybe type" "temp"
      (653705 'move' call_tmp[653702](123016 call isRectangularDom this[126166]))
      (565350 'move' tmp[565348](424806 call isTrue call_tmp[653702]))
      (565355 'move' tmp[565335](565352 '_paramFoldLogical' tmp[565336] tmp[565348]))
    }
    unknown call_tmp[653707] "expr temp" "maybe param" "maybe type" "temp"
    (653710 'move' call_tmp[653707](123019 call ! tmp[565335]))
    unknown call_tmp[653712] "expr temp" "maybe param" "maybe type" "temp"
    (653715 'move' call_tmp[653712](123076 call _cond_test call_tmp[653707]))
    if call_tmp[653712]
    {
      unknown call_tmp[653717] "expr temp" "maybe param" "maybe type" "temp"
      (653720 'move' call_tmp[653717](123024 call isSparseDom this[126166]))
      unknown call_tmp[653722] "expr temp" "maybe param" "maybe type" "temp"
      (653725 'move' call_tmp[653722](123069 call _cond_test call_tmp[653717]))
      if call_tmp[653722]
      {
        (123044 call compilerError "isSuper not supported on sparse domains")
      }
      {
        unknown call_tmp[653727] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (653730 'move' call_tmp[653727](123066 'typeof' this[126166]))
        (123067 call compilerError "isSuper not supported on the domain type " call_tmp[653727])
      }
    }
    unknown call_tmp[653732] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653735 'move' call_tmp[653732](123082 'typeof' sub[123004]))
    unknown call_tmp[653737] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653740 'move' call_tmp[653737](123084 'typeof' this[126166]))
    unknown call_tmp[653742] "expr temp" "maybe param" "maybe type" "temp"
    (653745 'move' call_tmp[653742](123085 call != call_tmp[653732] call_tmp[653737]))
    unknown call_tmp[653747] "expr temp" "maybe param" "maybe type" "temp"
    (653750 'move' call_tmp[653747](123193 call _cond_test call_tmp[653742]))
    if call_tmp[653747]
    {
      unknown call_tmp[653752] "expr temp" "maybe param" "maybe type" "temp"
      (653755 'move' call_tmp[653752](123090 call isRectangularDom this[126166]))
      unknown call_tmp[653757] "expr temp" "maybe param" "maybe type" "temp"
      (653760 'move' call_tmp[653757](123188 call _cond_test call_tmp[653752]))
      if call_tmp[653757]
      {
        unknown call_tmp[653764] "expr temp" "maybe param" "maybe type" "temp"
        (653767 'move' call_tmp[653764](123092 call rank _mt[243] sub[123004]))
        unknown call_tmp[653771] "expr temp" "maybe param" "maybe type" "temp"
        (653774 'move' call_tmp[653771](123096 call rank _mt[243] this[126166]))
        unknown call_tmp[653776] "expr temp" "maybe param" "maybe type" "temp"
        (653779 'move' call_tmp[653776](123099 call != call_tmp[653764] call_tmp[653771]))
        unknown call_tmp[653781] "expr temp" "maybe param" "maybe type" "temp"
        (653784 'move' call_tmp[653781](123160 call _cond_test call_tmp[653776]))
        if call_tmp[653781]
        {
          (123120 call compilerError "rank mismatch in domain.isSuper()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492209] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653788] "expr temp" "maybe param" "maybe type" "temp"
            (653791 'move' call_tmp[653788](123123 call low _mt[243] sub[123004]))
            (492213 'move' call_type_tmp[492209](123126 'typeof' call_tmp[653788]))
          }
          { scopeless type
            unknown call_type_tmp[492215] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653795] "expr temp" "maybe param" "maybe type" "temp"
            (653798 'move' call_tmp[653795](123128 call low _mt[243] this[126166]))
            (492219 'move' call_type_tmp[492215](123131 'typeof' call_tmp[653795]))
          }
          unknown call_tmp[653800] "expr temp" "maybe param" "maybe type" "temp"
          (653803 'move' call_tmp[653800](123132 call != call_type_tmp[492209] call_type_tmp[492215]))
          unknown call_tmp[653805] "expr temp" "maybe param" "maybe type" "temp"
          (653808 'move' call_tmp[653805](123155 call _cond_test call_tmp[653800]))
          if call_tmp[653805]
          {
            (123153 call compilerError "isSuper called with different index types")
          }
        }
      }
      {
        (123186 call compilerError "isSuper called with different associative domain types")
      }
    }
    unknown call_tmp[653810] "expr temp" "maybe param" "maybe type" "temp"
    (653813 'move' call_tmp[653810](123201 call isRectangularDom this[126166]))
    unknown call_tmp[653815] "expr temp" "maybe param" "maybe type" "temp"
    (653818 'move' call_tmp[653815](123324 call _cond_test call_tmp[653810]))
    if call_tmp[653815]
    {
      unknown contains[123203] "dead at end of block" "insert auto destroy"
      (542932 'init var' contains[123203] 1)
      (123206 'end of statement')
      {
        unknown _indexOfInterest[123273] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123274] "expr temp" "temp"
        unknown call_tmp[653822] "expr temp" "maybe param" "maybe type" "temp"
        (653825 'move' call_tmp[653822](123295 call(123292 call (partial) dims _mt[243] this[126166])))
        unknown call_tmp[653829] "expr temp" "maybe param" "maybe type" "temp"
        (653832 'move' call_tmp[653829](123290 call size _mt[243] call_tmp[653822]))
        unknown call_tmp[653834] "expr temp" "maybe param" "maybe type" "temp"
        (653837 'move' call_tmp[653834](123288 call - call_tmp[653829] 1))
        unknown call_tmp[653839] "expr temp" "maybe param" "maybe type" "temp"
        (653842 'move' call_tmp[653839](123298 call chpl_direct_range_iter 0 call_tmp[653834] 1))
        (123283 'move' _iterator[123274](123281 call _getIterator call_tmp[653839]))
        Defer
        {
          {
            (123314 call _freeIterator _iterator[123274])
          }
        }
        { scopeless type
          (123303 'move' _indexOfInterest[123273](123300 call iteratorIndex _iterator[123274]))
        }
        ForLoop[123275]
        {
          unknown i[123307] "index var" "insert auto destroy"
          (479769 'end of statement')
          (123309 'move' i[123307] _indexOfInterest[123273])
          (479770 'end of statement' i[123307])
          {
            {
              unknown tmp[123249] "temp"
              (123252 'move' tmp[123249](123251 'addr of' contains[123203]))
              unknown tmp[424822] "maybe param" "temp"
              (424833 'move' tmp[424822] tmp[123249])
              unknown call_tmp[653844] "expr temp" "maybe param" "maybe type" "temp"
              (653847 'move' call_tmp[653844](424835 call _cond_invalid tmp[424822]))
              if call_tmp[653844]
              {
                (424838 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565362] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565363] "maybe param" "temp"
              unknown call_tmp[653849] "expr temp" "maybe param" "maybe type" "temp"
              (653852 'move' call_tmp[653849](424823 call isTrue tmp[424822]))
              (565368 'move' tmp[565363](565366 call _cond_test call_tmp[653849]))
              if tmp[565363]
              {
                unknown tmp[565370] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653856] "expr temp" "maybe param" "maybe type" "temp"
                (653859 'move' call_tmp[653856](123230 call(123226 call (partial) dims _mt[243] this[126166])))
                unknown call_tmp[653861] "expr temp" "maybe param" "maybe type" "temp"
                (653864 'move' call_tmp[653861](123233 call call_tmp[653856] i[123307]))
                unknown call_tmp[653870] "expr temp" "maybe param" "maybe type" "temp"
                (653873 'move' call_tmp[653870](123242 call(123238 call (partial) dims _mt[243] sub[123004])))
                unknown call_tmp[653875] "expr temp" "maybe param" "maybe type" "temp"
                (653878 'move' call_tmp[653875](123245 call call_tmp[653870] i[123307]))
                unknown call_tmp[653880] "expr temp" "maybe param" "maybe type" "temp"
                (653883 'move' call_tmp[653880](123247 call(123234 call (partial) contains _mt[243] call_tmp[653861]) call_tmp[653875]))
                (565372 'move' tmp[565370](424826 call isTrue call_tmp[653880]))
                (565377 'move' tmp[565362](565374 '_paramFoldLogical' tmp[565363] tmp[565370]))
              }
              {
                (565382 'move' tmp[565362](565379 '_paramFoldLogical' tmp[565363] 0))
              }
              (123257 call = tmp[123249] tmp[565362])
              (479773 'end of statement' i[123307] i[123307])
            }
            unknown call_tmp[653885] "expr temp" "maybe param" "maybe type" "temp"
            (653888 'move' call_tmp[653885](123263 call == contains[123203] 0))
            unknown call_tmp[653890] "expr temp" "maybe param" "maybe type" "temp"
            (653893 'move' call_tmp[653890](123268 call _cond_test call_tmp[653885]))
            if call_tmp[653890]
            {
              break _breakLabel[123279] _breakLabel[123279]
            }
          }
          label _continueLabel[123278]
          _indexOfInterest[123273]
          _iterator[123274]
        }
        label _breakLabel[123279]
      }
      (517104 'move' ret[517099](517103 'deref' contains[123203]))
      gotoReturn _end_isSuper[517097] _end_isSuper[517097]
      (479776 'end of statement' contains[123203])
    }
    function chpl__loopexpr_iter5[582450](arg iterator[582452]:_any[178](?), arg this[582588]:_domain[125908](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582599] "RVV" "temp"
      {
        unknown _indexOfInterest[582457] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582458] "expr temp" "temp"
        (582467 'move' _iterator[582458](582465 call _getIterator iterator[582452]))
        Defer
        {
          {
            (582481 call _freeIterator _iterator[582458])
          }
        }
        { scopeless type
          (582472 'move' _indexOfInterest[582457](582469 call iteratorIndex _iterator[582458]))
        }
        ForLoop[582459] for-expr
        {
          unknown i[123340] "index var" "insert auto destroy" "no doc"
          (582592 'end of statement')
          (582476 'move' i[123340] _indexOfInterest[582457])
          (582593 'end of statement' i[123340])
          {
            {
              unknown yret[582603] "YVV" "temp"
              unknown call_tmp[582612] "expr temp" "maybe param" "maybe type" "temp"
              (582615 'move' call_tmp[582612](123337 call(123332 call (partial) contains _mt[243] this[582588]) i[123340]))
              (582606 'move' yret[582603](582605 'deref' call_tmp[582612]))
              (582608 yield yret[582603])
              (582595 'end of statement' i[123340])
            }
          }
          label _continueLabel[582462]
          _indexOfInterest[582457]
          _iterator[582458]
        }
        label _breakLabel[582463]
      }
      (582601 return ret[582599])
    }
    function chpl__loopexpr_iter5[582488](param arg tag[582492]:iterKind[453], arg iterator[582495]:_any[178](?), arg this[582516]:_domain[125908](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582642] "RVV" "temp"
      const _leaderIterator[582507] "const" "expr temp" "temp"
      (582512 'move' _leaderIterator[582507](582509 call _toLeader iterator[582495]))
      (582647 'move' ret[582642](582646 'deref' _leaderIterator[582507]))
      (582644 return ret[582642])
    }
    where {
      unknown tmp[582618] "maybe param" "temp"
      (582629 'move' tmp[582618](582497 call == tag[582492] leader[447]))
      unknown call_tmp[582676] "expr temp" "maybe param" "maybe type" "temp"
      (582679 'move' call_tmp[582676](582631 call _cond_invalid tmp[582618]))
      if call_tmp[582676]
      {
        (582634 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582649] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582650] "maybe param" "temp"
      unknown call_tmp[582681] "expr temp" "maybe param" "maybe type" "temp"
      (582684 'move' call_tmp[582681](582619 call isTrue tmp[582618]))
      (582655 'move' tmp[582650](582653 call _cond_test call_tmp[582681]))
      if tmp[582650]
      {
        unknown tmp[582657] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582686] "expr temp" "maybe param" "maybe type" "temp"
        (582689 'move' call_tmp[582686](582501 'call resolves' "_toLeader" iterator[582495]))
        (582659 'move' tmp[582657](582622 call isTrue call_tmp[582686]))
        (582664 'move' tmp[582649](582661 '_paramFoldLogical' tmp[582650] tmp[582657]))
      }
      {
        (582669 'move' tmp[582649](582666 '_paramFoldLogical' tmp[582650] 0))
      }
      (748487 call chpl_statementLevelSymbol tmp[582649])
    }
    function chpl__loopexpr_iter5[582518](param arg tag[582522]:iterKind[453], arg followThis[582525]:_any[178](?), arg iterator[582527]:_any[178](?), arg this[582586]:_domain[125908](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582700] "RVV" "temp"
      const _followerIterator[582534] "const" "expr temp" "temp"
      (582540 'move' _followerIterator[582534](582536 call _toFollower iterator[582527] followThis[582525]))
      {
        unknown _indexOfInterest[582555] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582556] "expr temp" "temp"
        (582565 'move' _iterator[582556](582563 call _getIterator _followerIterator[582534]))
        Defer
        {
          {
            (582579 call _freeIterator _iterator[582556])
          }
        }
        { scopeless type
          (582570 'move' _indexOfInterest[582555](582567 call iteratorIndex _iterator[582556]))
        }
        ForLoop[582557] lowered-forall for-expr
        {
          unknown i[582542] "index var" "insert auto destroy" "no doc"
          (582693 'end of statement')
          (582574 'move' i[582542] _indexOfInterest[582555])
          (582694 'end of statement' i[582542])
          {
            {
              unknown yret[582704] "YVV" "temp"
              unknown call_tmp[582713] "expr temp" "maybe param" "maybe type" "temp"
              (582716 'move' call_tmp[582713](582551 call(582548 call (partial) contains _mt[243] this[582586]) i[582542]))
              (582707 'move' yret[582704](582706 'deref' call_tmp[582713]))
              (582709 yield yret[582704])
              (582696 'end of statement' i[582542])
            }
          }
          label _continueLabel[582560]
          _indexOfInterest[582555]
          _iterator[582556]
        }
        label _breakLabel[582561]
      }
      (582702 return ret[582700])
    }
    where {
      (582530 call == tag[582522] follower[449])
    }
    function chpl__forallexpr5[582430](arg iterExpr[582433]:_any[178](?), arg this[582437]:_domain[125908](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582721] "RVV" "temp"
      unknown _iterator[582440] "expr temp" "maybe ref" "temp"
      (582442 'move' _iterator[582440] iterExpr[582433])
      unknown call_tmp[582728] "expr temp" "maybe param" "maybe type" "temp"
      (582731 'move' call_tmp[582728](582445 call chpl__loopexpr_iter5 _iterator[582440] this[582437]))
      (582726 'move' ret[582721](582725 'deref' call_tmp[582728]))
      (582723 return ret[582721])
    }
    unknown call_tmp[582733] "expr temp" "maybe param" "maybe type" "temp"
    (582736 'move' call_tmp[582733](582435 call chpl__forallexpr5 sub[123004] this[126166]))
    (582740 'iterator record set shape' call_tmp[582733] sub[123004] 0)
    unknown call_tmp[653895] "expr temp" "maybe param" "maybe type" "temp"
    (653898 'move' call_tmp[653895](123342 'reduce' LogicalAndReduceScanOp[376662](?) call_tmp[582733] 0))
    (517109 'move' ret[517099](517108 'deref' call_tmp[653895]))
    label _end_isSuper[517097]
    (517101 return ret[517099])
  }
  function _domain[125908](?).indexOrder[123352](arg _mt[126172]:_MT[238], arg this[126170]:_domain[125908](?), arg i[123350]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517113] "RVV" "temp"
    unknown call_tmp[653902] "expr temp" "maybe param" "maybe type" "temp"
    (653905 'move' call_tmp[653902](359561 call _value _mt[243] this[126170]))
    unknown call_tmp[653911] "expr temp" "maybe param" "maybe type" "temp"
    (653914 'move' call_tmp[653911](383094 call rank _mt[243] this[126170]))
    unknown call_tmp[653916] "expr temp" "maybe param" "maybe type" "temp"
    (653919 'move' call_tmp[653916](123364 call _makeIndexTuple call_tmp[653911] i[123350]))
    unknown call_tmp[653921] "expr temp" "maybe param" "maybe type" "temp"
    (653924 'move' call_tmp[653921](123366 call(123357 call (partial) dsiIndexOrder _mt[243] call_tmp[653902]) call_tmp[653916]))
    (517118 'move' ret[517113](517117 'deref' call_tmp[653921]))
    (517115 return ret[517113])
  }
  function _domain[125908](?).position[123376](arg _mt[126176]:_MT[238], arg this[126174]:_domain[125908](?), arg i[123374]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517122] "RVV" "temp"
    unknown call_tmp[653928] "expr temp" "maybe param" "maybe type" "temp"
    (653931 'move' call_tmp[653928](383099 call rank _mt[243] this[126174]))
    unknown call_tmp[653933] "maybe param" "maybe type" "temp"
    (653936 'move' call_tmp[653933](123382 call _makeIndexTuple call_tmp[653928] i[123374]))
    unknown ind[123383] "dead at end of block" "insert auto destroy"
    (542934 'init var' ind[123383] call_tmp[653933])
    unknown pos[123390] "dead at end of block" "insert auto destroy"
    unknown call_tmp[653940] "expr temp" "maybe param" "maybe type" "temp"
    (653943 'move' call_tmp[653940](383104 call rank _mt[243] this[126174]))
    unknown call_tmp[653947] "expr temp" "maybe param" "maybe type" "temp"
    (653950 'move' call_tmp[653947](383108 call intIdxType _mt[243] this[126174]))
    unknown call_tmp[653952] "expr temp" "maybe param" "maybe type" "temp"
    (653955 'move' call_tmp[653952](123388 call * call_tmp[653940] call_tmp[653947]))
    (542936 'default init var' pos[123390] call_tmp[653952])
    (123393 'end of statement')
    {
      unknown _indexOfInterest[123426] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123427] "expr temp" "temp"
      unknown call_tmp[653959] "expr temp" "maybe param" "maybe type" "temp"
      (653962 'move' call_tmp[653959](383117 call rank _mt[243] this[126174]))
      unknown call_tmp[653964] "expr temp" "maybe param" "maybe type" "temp"
      (653967 'move' call_tmp[653964](123441 call - call_tmp[653959] 1))
      unknown call_tmp[653969] "expr temp" "maybe param" "maybe type" "temp"
      (653972 'move' call_tmp[653969](123444 call chpl_direct_range_iter 0 call_tmp[653964] 1))
      (123436 'move' _iterator[123427](123434 call _getIterator call_tmp[653969]))
      Defer
      {
        {
          (123460 call _freeIterator _iterator[123427])
        }
      }
      { scopeless type
        (123449 'move' _indexOfInterest[123426](123446 call iteratorIndex _iterator[123427]))
      }
      ForLoop[123428]
      {
        unknown d[123453] "index var" "insert auto destroy"
        (479781 'end of statement')
        (123455 'move' d[123453] _indexOfInterest[123426])
        (479782 'end of statement' d[123453])
        unknown call_tmp[653974] "expr temp" "maybe param" "maybe type" "temp"
        (653977 'move' call_tmp[653974](123406 call pos[123390] d[123453]))
        unknown call_tmp[653981] "expr temp" "maybe param" "maybe type" "temp"
        (653984 'move' call_tmp[653981](359565 call _value _mt[243] this[126174]))
        unknown call_tmp[653988] "expr temp" "maybe param" "maybe type" "temp"
        (653991 'move' call_tmp[653988](123413 call(123408 call (partial) dsiDim _mt[243] call_tmp[653981]) d[123453]))
        unknown call_tmp[653995] "expr temp" "maybe param" "maybe type" "temp"
        (653998 'move' call_tmp[653995](123420 call ind[123383] d[123453]))
        unknown call_tmp[654000] "expr temp" "maybe param" "maybe type" "temp"
        (654003 'move' call_tmp[654000](123422 call(123414 call (partial) indexOrder _mt[243] call_tmp[653988]) call_tmp[653995]))
        (123423 call = call_tmp[653974] call_tmp[654000])
        (479784 'end of statement' pos[123390] d[123453] d[123453] ind[123383] d[123453])
        label _continueLabel[123431]
        _indexOfInterest[123426]
        _iterator[123427]
      }
      label _breakLabel[123432]
    }
    (517127 'move' ret[517122](517126 'deref' pos[123390]))
    gotoReturn _end_position[517120] _end_position[517120]
    (479790 'end of statement' pos[123390])
    label _end_position[517120]
    (517124 return ret[517122])
  }
  function _domain[125908](?).expand[123481](arg _mt[126180]:_MT[238], arg this[126178]:_domain[125908](?), arg off[123478] :
  unknown call_tmp[654007] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654019] "expr temp" "maybe param" "maybe type" "temp"
    (654022 'move' call_tmp[654019](123492 call isAssociativeDom this[126178]))
    unknown call_tmp[654024] "expr temp" "maybe param" "maybe type" "temp"
    (654027 'move' call_tmp[654024](123566 call _cond_test call_tmp[654019]))
    if call_tmp[654024]
    {
      (123512 call compilerError "expand not supported on associative domains")
    }
    {
      unknown call_tmp[654029] "expr temp" "maybe param" "maybe type" "temp"
      (654032 'move' call_tmp[654029](123517 call isSparseDom this[126178]))
      unknown call_tmp[654034] "expr temp" "maybe param" "maybe type" "temp"
      (654037 'move' call_tmp[654034](123560 call _cond_test call_tmp[654029]))
      if call_tmp[654034]
      {
        (123537 call compilerError "expand not supported on sparse domains")
      }
      {
        (123558 call compilerError "expand not supported on this domain type")
      }
    }
    (517131 return _void[55])
  }
  where {
    unknown call_tmp[654039] "expr temp" "maybe param" "maybe type" "temp"
    (654042 'move' call_tmp[654039](123486 call isRectangularDom this[126178]))
    (123487 call ! call_tmp[654039])
  }
  function _domain[125908](?).expand[123584](arg _mt[126184]:_MT[238], arg this[126182]:_domain[125908](?), arg off[123580] ... :
  (383133 call intIdxType _mt[243] this[126182])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517135] "RVV" "temp"
    unknown call_tmp[654050] "expr temp" "maybe param" "maybe type" "temp"
    (654053 'move' call_tmp[654050](123589 call(383141 call (partial) expand _mt[243] this[126182]) off[123580]))
    (517140 'move' ret[517135](517139 'deref' call_tmp[654050]))
    (517137 return ret[517135])
  }
  function _domain[125908](?).expand[123604](arg _mt[126188]:_MT[238], arg this[126186]:_domain[125908](?), arg off[123601] :
  unknown call_tmp[654057] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517144] "RVV" "temp"
    unknown call_tmp[654071] "maybe param" "maybe type" "temp"
    (654074 'move' call_tmp[654071](123608 call(383154 call (partial) dims _mt[243] this[126186])))
    unknown ranges[123609] "dead at end of block" "insert auto destroy"
    (542938 'init var' ranges[123609] call_tmp[654071])
    (123612 'end of statement')
    {
      unknown _indexOfInterest[123705] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123706] "expr temp" "temp"
      unknown call_tmp[654078] "expr temp" "maybe param" "maybe type" "temp"
      (654081 'move' call_tmp[654078](383169 call rank _mt[243] this[126186]))
      unknown call_tmp[654083] "expr temp" "maybe param" "maybe type" "temp"
      (654086 'move' call_tmp[654083](123720 call - call_tmp[654078] 1))
      unknown call_tmp[654088] "expr temp" "maybe param" "maybe type" "temp"
      (654091 'move' call_tmp[654088](123723 call chpl_direct_range_iter 0 call_tmp[654083] 1))
      (123715 'move' _iterator[123706](123713 call _getIterator call_tmp[654088]))
      Defer
      {
        {
          (123739 call _freeIterator _iterator[123706])
        }
      }
      { scopeless type
        (123728 'move' _indexOfInterest[123705](123725 call iteratorIndex _iterator[123706]))
      }
      ForLoop[123707]
      {
        unknown i[123732] "index var" "insert auto destroy"
        (479797 'end of statement')
        (123734 'move' i[123732] _indexOfInterest[123705])
        (479798 'end of statement' i[123732])
        {
          unknown call_tmp[654093] "expr temp" "maybe param" "maybe type" "temp"
          (654096 'move' call_tmp[654093](123625 call ranges[123609] i[123732]))
          unknown call_tmp[654098] "expr temp" "maybe param" "maybe type" "temp"
          (654101 'move' call_tmp[654098](123629 call ranges[123609] i[123732]))
          unknown call_tmp[654105] "expr temp" "maybe param" "maybe type" "temp"
          (654108 'move' call_tmp[654105](123638 call off[123601] i[123732]))
          unknown call_tmp[654110] "expr temp" "maybe param" "maybe type" "temp"
          (654113 'move' call_tmp[654110](123640 call(123632 call (partial) expand _mt[243] call_tmp[654098]) call_tmp[654105]))
          (123641 call = call_tmp[654093] call_tmp[654110])
          (479800 'end of statement' ranges[123609] i[123732] ranges[123609] i[123732] i[123732])
          unknown call_tmp[654115] "expr temp" "maybe param" "maybe type" "temp"
          (654118 'move' call_tmp[654115](123648 call ranges[123609] i[123732]))
          unknown call_tmp[654122] "expr temp" "maybe param" "maybe type" "temp"
          (654125 'move' call_tmp[654122](123649 call low _mt[243] call_tmp[654115]))
          unknown call_tmp[654127] "expr temp" "maybe param" "maybe type" "temp"
          (654130 'move' call_tmp[654127](123655 call ranges[123609] i[123732]))
          unknown call_tmp[654134] "expr temp" "maybe param" "maybe type" "temp"
          (654137 'move' call_tmp[654134](123656 call high _mt[243] call_tmp[654127]))
          unknown call_tmp[654139] "expr temp" "maybe param" "maybe type" "temp"
          (654142 'move' call_tmp[654139](123659 call > call_tmp[654122] call_tmp[654134]))
          unknown call_tmp[654144] "expr temp" "maybe param" "maybe type" "temp"
          (654147 'move' call_tmp[654144](123701 call _cond_test call_tmp[654139]))
          if call_tmp[654144]
          {
            (123698 call halt "***Error: Degenerate dimension created in dimension " i[123732] "***")
            (479806 'end of statement' i[123732])
          }
        }
        label _continueLabel[123710]
        _indexOfInterest[123705]
        _iterator[123706]
      }
      label _breakLabel[123711]
    }
    unknown call_tmp[654151] "expr temp" "maybe param" "maybe type" "temp"
    (654154 'move' call_tmp[654151](383174 call dist _mt[243] this[126186]))
    unknown call_tmp[654158] "expr temp" "maybe param" "maybe type" "temp"
    (654161 'move' call_tmp[654158](383178 call rank _mt[243] this[126186]))
    unknown call_tmp[654165] "expr temp" "maybe param" "maybe type" "temp"
    (654168 'move' call_tmp[654165](359569 call _value _mt[243] this[126186]))
    unknown call_tmp[654172] "expr temp" "maybe param" "maybe type" "temp"
    (654175 'move' call_tmp[654172](123752 call idxType _mt[243] call_tmp[654165]))
    unknown call_tmp[654179] "expr temp" "maybe param" "maybe type" "temp"
    (654182 'move' call_tmp[654179](383182 call stridable _mt[243] this[126186]))
    unknown call_tmp[654184] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654187 'move' call_tmp[654184](747935 'new' _domain[125908](?) call_tmp[654151] call_tmp[654158] call_tmp[654172] call_tmp[654179] ranges[123609]))
    (517149 'move' ret[517144](517148 'deref' call_tmp[654184]))
    gotoReturn _end_expand[517142] _end_expand[517142]
    (479808 'end of statement' ranges[123609])
    label _end_expand[517142]
    (517146 return ret[517144])
  }
  function _domain[125908](?).expand[123768](arg _mt[126192]:_MT[238], arg this[126190]:_domain[125908](?), arg off[123765] :
  (383187 call intIdxType _mt[243] this[126190])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517155] "RVV" "temp"
    unknown call_tmp[654193] "maybe param" "maybe type" "temp"
    (654196 'move' call_tmp[654193](123776 call(383195 call (partial) dims _mt[243] this[126190])))
    unknown ranges[123777] "dead at end of block" "insert auto destroy"
    (542940 'init var' ranges[123777] call_tmp[654193])
    (123780 'end of statement')
    {
      unknown _indexOfInterest[123807] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123808] "expr temp" "temp"
      unknown call_tmp[654200] "expr temp" "maybe param" "maybe type" "temp"
      (654203 'move' call_tmp[654200](383207 call rank _mt[243] this[126190]))
      unknown call_tmp[654205] "expr temp" "maybe param" "maybe type" "temp"
      (654208 'move' call_tmp[654205](123822 call - call_tmp[654200] 1))
      unknown call_tmp[654210] "expr temp" "maybe param" "maybe type" "temp"
      (654213 'move' call_tmp[654210](123825 call chpl_direct_range_iter 0 call_tmp[654205] 1))
      (123817 'move' _iterator[123808](123815 call _getIterator call_tmp[654210]))
      Defer
      {
        {
          (123841 call _freeIterator _iterator[123808])
        }
      }
      { scopeless type
        (123830 'move' _indexOfInterest[123807](123827 call iteratorIndex _iterator[123808]))
      }
      ForLoop[123809]
      {
        unknown i[123834] "index var" "insert auto destroy"
        (479811 'end of statement')
        (123836 'move' i[123834] _indexOfInterest[123807])
        (479812 'end of statement' i[123834])
        unknown call_tmp[654215] "expr temp" "maybe param" "maybe type" "temp"
        (654218 'move' call_tmp[654215](123793 call ranges[123777] i[123834]))
        unknown call_tmp[654222] "expr temp" "maybe param" "maybe type" "temp"
        (654225 'move' call_tmp[654222](123797 call(383201 call (partial) dim _mt[243] this[126190]) i[123834]))
        unknown call_tmp[654229] "expr temp" "maybe param" "maybe type" "temp"
        (654232 'move' call_tmp[654229](123803 call(123798 call (partial) expand _mt[243] call_tmp[654222]) off[123765]))
        (123804 call = call_tmp[654215] call_tmp[654229])
        (479814 'end of statement' ranges[123777] i[123834] i[123834])
        label _continueLabel[123812]
        _indexOfInterest[123807]
        _iterator[123808]
      }
      label _breakLabel[123813]
    }
    unknown call_tmp[654236] "expr temp" "maybe param" "maybe type" "temp"
    (654239 'move' call_tmp[654236](383212 call dist _mt[243] this[126190]))
    unknown call_tmp[654243] "expr temp" "maybe param" "maybe type" "temp"
    (654246 'move' call_tmp[654243](383216 call rank _mt[243] this[126190]))
    unknown call_tmp[654250] "expr temp" "maybe param" "maybe type" "temp"
    (654253 'move' call_tmp[654250](359573 call _value _mt[243] this[126190]))
    unknown call_tmp[654257] "expr temp" "maybe param" "maybe type" "temp"
    (654260 'move' call_tmp[654257](123854 call idxType _mt[243] call_tmp[654250]))
    unknown call_tmp[654264] "expr temp" "maybe param" "maybe type" "temp"
    (654267 'move' call_tmp[654264](383220 call stridable _mt[243] this[126190]))
    unknown call_tmp[654269] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654272 'move' call_tmp[654269](747936 'new' _domain[125908](?) call_tmp[654236] call_tmp[654243] call_tmp[654257] call_tmp[654264] ranges[123777]))
    (517160 'move' ret[517155](517159 'deref' call_tmp[654269]))
    gotoReturn _end_expand[517153] _end_expand[517153]
    (479818 'end of statement' ranges[123777])
    label _end_expand[517153]
    (517157 return ret[517155])
  }
  where {
    unknown call_tmp[654276] "expr temp" "maybe param" "maybe type" "temp"
    (654279 'move' call_tmp[654276](383191 call rank _mt[243] this[126190]))
    (123772 call > call_tmp[654276] 1)
  }
  function _domain[125908](?).exterior[123874](arg _mt[126196]:_MT[238], arg this[126194]:_domain[125908](?), arg off[123871] :
  unknown call_tmp[654283] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654295] "expr temp" "maybe param" "maybe type" "temp"
    (654298 'move' call_tmp[654295](123885 call isAssociativeDom this[126194]))
    unknown call_tmp[654300] "expr temp" "maybe param" "maybe type" "temp"
    (654303 'move' call_tmp[654300](123959 call _cond_test call_tmp[654295]))
    if call_tmp[654300]
    {
      (123905 call compilerError "exterior not supported on associative domains")
    }
    {
      unknown call_tmp[654305] "expr temp" "maybe param" "maybe type" "temp"
      (654308 'move' call_tmp[654305](123910 call isSparseDom this[126194]))
      unknown call_tmp[654310] "expr temp" "maybe param" "maybe type" "temp"
      (654313 'move' call_tmp[654310](123953 call _cond_test call_tmp[654305]))
      if call_tmp[654310]
      {
        (123930 call compilerError "exterior not supported on sparse domains")
      }
      {
        (123951 call compilerError "exterior not supported on this domain type")
      }
    }
    (517164 return _void[55])
  }
  where {
    unknown call_tmp[654315] "expr temp" "maybe param" "maybe type" "temp"
    (654318 'move' call_tmp[654315](123879 call isRectangularDom this[126194]))
    (123880 call ! call_tmp[654315])
  }
  function _domain[125908](?).exterior[123977](arg _mt[126200]:_MT[238], arg this[126198]:_domain[125908](?), arg off[123973] ... :
  (383236 call intIdxType _mt[243] this[126198])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517168] "RVV" "temp"
    unknown call_tmp[654326] "expr temp" "maybe param" "maybe type" "temp"
    (654329 'move' call_tmp[654326](123982 call(383244 call (partial) exterior _mt[243] this[126198]) off[123973]))
    (517173 'move' ret[517168](517172 'deref' call_tmp[654326]))
    (517170 return ret[517168])
  }
  function _domain[125908](?).exterior[123997](arg _mt[126204]:_MT[238], arg this[126202]:_domain[125908](?), arg off[123994] :
  unknown call_tmp[654333] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517177] "RVV" "temp"
    unknown call_tmp[654347] "maybe param" "maybe type" "temp"
    (654350 'move' call_tmp[654347](124001 call(383257 call (partial) dims _mt[243] this[126202])))
    unknown ranges[124002] "dead at end of block" "insert auto destroy"
    (542942 'init var' ranges[124002] call_tmp[654347])
    (124005 'end of statement')
    {
      unknown _indexOfInterest[124037] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124038] "expr temp" "temp"
      unknown call_tmp[654354] "expr temp" "maybe param" "maybe type" "temp"
      (654357 'move' call_tmp[654354](383270 call rank _mt[243] this[126202]))
      unknown call_tmp[654359] "expr temp" "maybe param" "maybe type" "temp"
      (654362 'move' call_tmp[654359](124052 call - call_tmp[654354] 1))
      unknown call_tmp[654364] "expr temp" "maybe param" "maybe type" "temp"
      (654367 'move' call_tmp[654364](124055 call chpl_direct_range_iter 0 call_tmp[654359] 1))
      (124047 'move' _iterator[124038](124045 call _getIterator call_tmp[654364]))
      Defer
      {
        {
          (124071 call _freeIterator _iterator[124038])
        }
      }
      { scopeless type
        (124060 'move' _indexOfInterest[124037](124057 call iteratorIndex _iterator[124038]))
      }
      ForLoop[124039]
      {
        unknown i[124064] "index var" "insert auto destroy"
        (479825 'end of statement')
        (124066 'move' i[124064] _indexOfInterest[124037])
        (479826 'end of statement' i[124064])
        unknown call_tmp[654369] "expr temp" "maybe param" "maybe type" "temp"
        (654372 'move' call_tmp[654369](124018 call ranges[124002] i[124064]))
        unknown call_tmp[654376] "expr temp" "maybe param" "maybe type" "temp"
        (654379 'move' call_tmp[654376](124022 call(383263 call (partial) dim _mt[243] this[126202]) i[124064]))
        unknown call_tmp[654383] "expr temp" "maybe param" "maybe type" "temp"
        (654386 'move' call_tmp[654383](124031 call off[123994] i[124064]))
        unknown call_tmp[654388] "expr temp" "maybe param" "maybe type" "temp"
        (654391 'move' call_tmp[654388](124033 call(124025 call (partial) exterior _mt[243] call_tmp[654376]) call_tmp[654383]))
        (124034 call = call_tmp[654369] call_tmp[654388])
        (479828 'end of statement' ranges[124002] i[124064] i[124064] i[124064])
        label _continueLabel[124042]
        _indexOfInterest[124037]
        _iterator[124038]
      }
      label _breakLabel[124043]
    }
    unknown call_tmp[654395] "expr temp" "maybe param" "maybe type" "temp"
    (654398 'move' call_tmp[654395](383275 call dist _mt[243] this[126202]))
    unknown call_tmp[654402] "expr temp" "maybe param" "maybe type" "temp"
    (654405 'move' call_tmp[654402](383279 call rank _mt[243] this[126202]))
    unknown call_tmp[654409] "expr temp" "maybe param" "maybe type" "temp"
    (654412 'move' call_tmp[654409](359577 call _value _mt[243] this[126202]))
    unknown call_tmp[654416] "expr temp" "maybe param" "maybe type" "temp"
    (654419 'move' call_tmp[654416](124084 call idxType _mt[243] call_tmp[654409]))
    unknown call_tmp[654423] "expr temp" "maybe param" "maybe type" "temp"
    (654426 'move' call_tmp[654423](383283 call stridable _mt[243] this[126202]))
    unknown call_tmp[654428] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654431 'move' call_tmp[654428](747937 'new' _domain[125908](?) call_tmp[654395] call_tmp[654402] call_tmp[654416] call_tmp[654423] ranges[124002]))
    (517182 'move' ret[517177](517181 'deref' call_tmp[654428]))
    gotoReturn _end_exterior[517175] _end_exterior[517175]
    (479833 'end of statement' ranges[124002])
    label _end_exterior[517175]
    (517179 return ret[517177])
  }
  function _domain[125908](?).exterior[124100](arg _mt[126208]:_MT[238], arg this[126206]:_domain[125908](?), arg off[124097] :
  (383288 call intIdxType _mt[243] this[126206])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517188] "RVV" "temp"
    unknown offTup[124110] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654437] "expr temp" "maybe param" "maybe type" "temp"
    (654440 'move' call_tmp[654437](383296 call rank _mt[243] this[126206]))
    unknown call_tmp[654444] "expr temp" "maybe param" "maybe type" "temp"
    (654447 'move' call_tmp[654444](383300 call intIdxType _mt[243] this[126206]))
    unknown call_tmp[654449] "expr temp" "maybe param" "maybe type" "temp"
    (654452 'move' call_tmp[654449](124108 call * call_tmp[654437] call_tmp[654444]))
    (542944 'default init var' offTup[124110] call_tmp[654449])
    (124113 'end of statement')
    {
      unknown _indexOfInterest[124131] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124132] "expr temp" "temp"
      unknown call_tmp[654456] "expr temp" "maybe param" "maybe type" "temp"
      (654459 'move' call_tmp[654456](383307 call rank _mt[243] this[126206]))
      unknown call_tmp[654461] "expr temp" "maybe param" "maybe type" "temp"
      (654464 'move' call_tmp[654461](124146 call - call_tmp[654456] 1))
      unknown call_tmp[654466] "expr temp" "maybe param" "maybe type" "temp"
      (654469 'move' call_tmp[654466](124149 call chpl_direct_range_iter 0 call_tmp[654461] 1))
      (124141 'move' _iterator[124132](124139 call _getIterator call_tmp[654466]))
      Defer
      {
        {
          (124165 call _freeIterator _iterator[124132])
        }
      }
      { scopeless type
        (124154 'move' _indexOfInterest[124131](124151 call iteratorIndex _iterator[124132]))
      }
      ForLoop[124133]
      {
        unknown i[124158] "index var" "insert auto destroy"
        (479836 'end of statement')
        (124160 'move' i[124158] _indexOfInterest[124131])
        (479837 'end of statement' i[124158])
        unknown call_tmp[654471] "expr temp" "maybe param" "maybe type" "temp"
        (654474 'move' call_tmp[654471](124126 call offTup[124110] i[124158]))
        (124128 call = call_tmp[654471] off[124097])
        (479839 'end of statement' offTup[124110] i[124158])
        label _continueLabel[124136]
        _indexOfInterest[124131]
        _iterator[124132]
      }
      label _breakLabel[124137]
    }
    unknown call_tmp[654478] "expr temp" "maybe param" "maybe type" "temp"
    (654481 'move' call_tmp[654478](124175 call(383311 call (partial) exterior _mt[243] this[126206]) offTup[124110]))
    (517193 'move' ret[517188](517192 'deref' call_tmp[654478]))
    gotoReturn _end_exterior[517186] _end_exterior[517186]
    (479842 'end of statement' offTup[124110])
    label _end_exterior[517186]
    (517190 return ret[517188])
  }
  where {
    unknown call_tmp[654485] "expr temp" "maybe param" "maybe type" "temp"
    (654488 'move' call_tmp[654485](383292 call rank _mt[243] this[126206]))
    (124104 call != call_tmp[654485] 1)
  }
  function _domain[125908](?).interior[124190](arg _mt[126212]:_MT[238], arg this[126210]:_domain[125908](?), arg off[124187] :
  unknown call_tmp[654492] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654504] "expr temp" "maybe param" "maybe type" "temp"
    (654507 'move' call_tmp[654504](124201 call isAssociativeDom this[126210]))
    unknown call_tmp[654509] "expr temp" "maybe param" "maybe type" "temp"
    (654512 'move' call_tmp[654509](124275 call _cond_test call_tmp[654504]))
    if call_tmp[654509]
    {
      (124221 call compilerError "interior not supported on associative domains")
    }
    {
      unknown call_tmp[654514] "expr temp" "maybe param" "maybe type" "temp"
      (654517 'move' call_tmp[654514](124226 call isSparseDom this[126210]))
      unknown call_tmp[654519] "expr temp" "maybe param" "maybe type" "temp"
      (654522 'move' call_tmp[654519](124269 call _cond_test call_tmp[654514]))
      if call_tmp[654519]
      {
        (124246 call compilerError "interior not supported on sparse domains")
      }
      {
        (124267 call compilerError "interior not supported on this domain type")
      }
    }
    (517197 return _void[55])
  }
  where {
    unknown call_tmp[654524] "expr temp" "maybe param" "maybe type" "temp"
    (654527 'move' call_tmp[654524](124195 call isRectangularDom this[126210]))
    (124196 call ! call_tmp[654524])
  }
  function _domain[125908](?).interior[124293](arg _mt[126216]:_MT[238], arg this[126214]:_domain[125908](?), arg off[124289] ... :
  (383327 call intIdxType _mt[243] this[126214])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517201] "RVV" "temp"
    unknown call_tmp[654535] "expr temp" "maybe param" "maybe type" "temp"
    (654538 'move' call_tmp[654535](124298 call(383335 call (partial) interior _mt[243] this[126214]) off[124289]))
    (517206 'move' ret[517201](517205 'deref' call_tmp[654535]))
    (517203 return ret[517201])
  }
  function _domain[125908](?).interior[124313](arg _mt[126220]:_MT[238], arg this[126218]:_domain[125908](?), arg off[124310] :
  unknown call_tmp[654542] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517210] "RVV" "temp"
    unknown call_tmp[654556] "maybe param" "maybe type" "temp"
    (654559 'move' call_tmp[654556](124317 call(383348 call (partial) dims _mt[243] this[126218])))
    unknown ranges[124318] "dead at end of block" "insert auto destroy"
    (542946 'init var' ranges[124318] call_tmp[654556])
    (124321 'end of statement')
    {
      unknown _indexOfInterest[124455] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124456] "expr temp" "temp"
      unknown call_tmp[654563] "expr temp" "maybe param" "maybe type" "temp"
      (654566 'move' call_tmp[654563](383386 call rank _mt[243] this[126218]))
      unknown call_tmp[654568] "expr temp" "maybe param" "maybe type" "temp"
      (654571 'move' call_tmp[654568](124470 call - call_tmp[654563] 1))
      unknown call_tmp[654573] "expr temp" "maybe param" "maybe type" "temp"
      (654576 'move' call_tmp[654573](124473 call chpl_direct_range_iter 0 call_tmp[654568] 1))
      (124465 'move' _iterator[124456](124463 call _getIterator call_tmp[654573]))
      Defer
      {
        {
          (124489 call _freeIterator _iterator[124456])
        }
      }
      { scopeless type
        (124478 'move' _indexOfInterest[124455](124475 call iteratorIndex _iterator[124456]))
      }
      ForLoop[124457]
      {
        unknown i[124482] "index var" "insert auto destroy"
        (479849 'end of statement')
        (124484 'move' i[124482] _indexOfInterest[124455])
        (479850 'end of statement' i[124482])
        {
          unknown tmp[424843] "maybe param" "temp"
          unknown tmp[424864] "maybe param" "temp"
          unknown call_tmp[654578] "expr temp" "maybe param" "maybe type" "temp"
          (654581 'move' call_tmp[654578](124334 call off[124310] i[124482]))
          (424875 'move' tmp[424864](124336 call > call_tmp[654578] 0))
          unknown call_tmp[654583] "expr temp" "maybe param" "maybe type" "temp"
          (654586 'move' call_tmp[654583](424877 call _cond_invalid tmp[424864]))
          if call_tmp[654583]
          {
            (424880 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[565389] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565390] "maybe param" "temp"
          unknown call_tmp[654588] "expr temp" "maybe param" "maybe type" "temp"
          (654591 'move' call_tmp[654588](424865 call isTrue tmp[424864]))
          (565395 'move' tmp[565390](565393 call _cond_test call_tmp[654588]))
          if tmp[565390]
          {
            unknown tmp[565397] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[654595] "expr temp" "maybe param" "maybe type" "temp"
            (654598 'move' call_tmp[654595](124341 call(383354 call (partial) dim _mt[243] this[126218]) i[124482]))
            unknown call_tmp[654602] "expr temp" "maybe param" "maybe type" "temp"
            (654605 'move' call_tmp[654602](124342 call _high _mt[243] call_tmp[654595]))
            unknown call_tmp[654607] "expr temp" "maybe param" "maybe type" "temp"
            (654610 'move' call_tmp[654607](124346 call + call_tmp[654602] 1))
            unknown call_tmp[654612] "expr temp" "maybe param" "maybe type" "temp"
            (654615 'move' call_tmp[654612](124351 call off[124310] i[124482]))
            unknown call_tmp[654617] "expr temp" "maybe param" "maybe type" "temp"
            (654620 'move' call_tmp[654617](124352 call - call_tmp[654607] call_tmp[654612]))
            unknown call_tmp[654624] "expr temp" "maybe param" "maybe type" "temp"
            (654627 'move' call_tmp[654624](124357 call(383361 call (partial) dim _mt[243] this[126218]) i[124482]))
            unknown call_tmp[654631] "expr temp" "maybe param" "maybe type" "temp"
            (654634 'move' call_tmp[654631](124358 call _low _mt[243] call_tmp[654624]))
            unknown call_tmp[654636] "expr temp" "maybe param" "maybe type" "temp"
            (654639 'move' call_tmp[654636](124361 call < call_tmp[654617] call_tmp[654631]))
            (565399 'move' tmp[565397](424868 call isTrue call_tmp[654636]))
            (565404 'move' tmp[565389](565401 '_paramFoldLogical' tmp[565390] tmp[565397]))
          }
          {
            (565409 'move' tmp[565389](565406 '_paramFoldLogical' tmp[565390] 0))
          }
          (424854 'move' tmp[424843] tmp[565389])
          unknown call_tmp[654641] "expr temp" "maybe param" "maybe type" "temp"
          (654644 'move' call_tmp[654641](424856 call _cond_invalid tmp[424843]))
          if call_tmp[654641]
          {
            (424859 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[565443] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565444] "maybe param" "temp"
          unknown call_tmp[654646] "expr temp" "maybe param" "maybe type" "temp"
          (654649 'move' call_tmp[654646](424844 call isTrue tmp[424843]))
          (565449 'move' tmp[565444](565447 call _cond_test call_tmp[654646]))
          if tmp[565444]
          {
            (565454 'move' tmp[565443](565451 '_paramFoldLogical' tmp[565444] 1))
          }
          {
            unknown tmp[424885] "maybe param" "temp"
            unknown call_tmp[654651] "expr temp" "maybe param" "maybe type" "temp"
            (654654 'move' call_tmp[654651](124368 call off[124310] i[124482]))
            (424896 'move' tmp[424885](124370 call < call_tmp[654651] 0))
            unknown call_tmp[654656] "expr temp" "maybe param" "maybe type" "temp"
            (654659 'move' call_tmp[654656](424898 call _cond_invalid tmp[424885]))
            if call_tmp[654656]
            {
              (424901 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[565416] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[565417] "maybe param" "temp"
            unknown call_tmp[654661] "expr temp" "maybe param" "maybe type" "temp"
            (654664 'move' call_tmp[654661](424886 call isTrue tmp[424885]))
            (565422 'move' tmp[565417](565420 call _cond_test call_tmp[654661]))
            if tmp[565417]
            {
              unknown tmp[565424] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[654668] "expr temp" "maybe param" "maybe type" "temp"
              (654671 'move' call_tmp[654668](124375 call(383368 call (partial) dim _mt[243] this[126218]) i[124482]))
              unknown call_tmp[654675] "expr temp" "maybe param" "maybe type" "temp"
              (654678 'move' call_tmp[654675](124376 call _low _mt[243] call_tmp[654668]))
              unknown call_tmp[654680] "expr temp" "maybe param" "maybe type" "temp"
              (654683 'move' call_tmp[654680](124380 call - call_tmp[654675] 1))
              unknown call_tmp[654685] "expr temp" "maybe param" "maybe type" "temp"
              (654688 'move' call_tmp[654685](124385 call off[124310] i[124482]))
              unknown call_tmp[654690] "expr temp" "maybe param" "maybe type" "temp"
              (654693 'move' call_tmp[654690](124386 call - call_tmp[654680] call_tmp[654685]))
              unknown call_tmp[654697] "expr temp" "maybe param" "maybe type" "temp"
              (654700 'move' call_tmp[654697](124391 call(383375 call (partial) dim _mt[243] this[126218]) i[124482]))
              unknown call_tmp[654704] "expr temp" "maybe param" "maybe type" "temp"
              (654707 'move' call_tmp[654704](124392 call _high _mt[243] call_tmp[654697]))
              unknown call_tmp[654709] "expr temp" "maybe param" "maybe type" "temp"
              (654712 'move' call_tmp[654709](124395 call > call_tmp[654690] call_tmp[654704]))
              (565426 'move' tmp[565424](424889 call isTrue call_tmp[654709]))
              (565431 'move' tmp[565416](565428 '_paramFoldLogical' tmp[565417] tmp[565424]))
            }
            {
              (565436 'move' tmp[565416](565433 '_paramFoldLogical' tmp[565417] 0))
            }
            unknown tmp[565456] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (565458 'move' tmp[565456](424848 call isTrue tmp[565416]))
            (565463 'move' tmp[565443](565460 '_paramFoldLogical' tmp[565444] tmp[565456]))
          }
          unknown call_tmp[654714] "expr temp" "maybe param" "maybe type" "temp"
          (654717 'move' call_tmp[654714](124425 call _cond_test tmp[565443]))
          if call_tmp[654714]
          {
            (124422 call halt "***Error: Argument to 'interior' function out of range in dimension " i[124482] "***")
            (479854 'end of statement' i[124482])
          }
          unknown call_tmp[654719] "expr temp" "maybe param" "maybe type" "temp"
          (654722 'move' call_tmp[654719](124433 call ranges[124318] i[124482]))
          unknown call_tmp[654726] "expr temp" "maybe param" "maybe type" "temp"
          (654729 'move' call_tmp[654726](359581 call _value _mt[243] this[126218]))
          unknown call_tmp[654733] "expr temp" "maybe param" "maybe type" "temp"
          (654736 'move' call_tmp[654733](124440 call(124435 call (partial) dsiDim _mt[243] call_tmp[654726]) i[124482]))
          unknown call_tmp[654740] "expr temp" "maybe param" "maybe type" "temp"
          (654743 'move' call_tmp[654740](124449 call off[124310] i[124482]))
          unknown call_tmp[654745] "expr temp" "maybe param" "maybe type" "temp"
          (654748 'move' call_tmp[654745](124451 call(124443 call (partial) interior _mt[243] call_tmp[654733]) call_tmp[654740]))
          (124452 call = call_tmp[654719] call_tmp[654745])
          (479856 'end of statement' ranges[124318] i[124482] i[124482] i[124482])
        }
        label _continueLabel[124460]
        _indexOfInterest[124455]
        _iterator[124456]
      }
      label _breakLabel[124461]
    }
    unknown call_tmp[654752] "expr temp" "maybe param" "maybe type" "temp"
    (654755 'move' call_tmp[654752](383391 call dist _mt[243] this[126218]))
    unknown call_tmp[654759] "expr temp" "maybe param" "maybe type" "temp"
    (654762 'move' call_tmp[654759](383395 call rank _mt[243] this[126218]))
    unknown call_tmp[654766] "expr temp" "maybe param" "maybe type" "temp"
    (654769 'move' call_tmp[654766](359585 call _value _mt[243] this[126218]))
    unknown call_tmp[654773] "expr temp" "maybe param" "maybe type" "temp"
    (654776 'move' call_tmp[654773](124502 call idxType _mt[243] call_tmp[654766]))
    unknown call_tmp[654780] "expr temp" "maybe param" "maybe type" "temp"
    (654783 'move' call_tmp[654780](383399 call stridable _mt[243] this[126218]))
    unknown call_tmp[654785] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654788 'move' call_tmp[654785](747938 'new' _domain[125908](?) call_tmp[654752] call_tmp[654759] call_tmp[654773] call_tmp[654780] ranges[124318]))
    (517215 'move' ret[517210](517214 'deref' call_tmp[654785]))
    gotoReturn _end_interior[517208] _end_interior[517208]
    (479861 'end of statement' ranges[124318])
    label _end_interior[517208]
    (517212 return ret[517210])
  }
  function _domain[125908](?).interior[124518](arg _mt[126224]:_MT[238], arg this[126222]:_domain[125908](?), arg off[124515] :
  (383404 call intIdxType _mt[243] this[126222])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517221] "RVV" "temp"
    unknown offTup[124528] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654794] "expr temp" "maybe param" "maybe type" "temp"
    (654797 'move' call_tmp[654794](383412 call rank _mt[243] this[126222]))
    unknown call_tmp[654801] "expr temp" "maybe param" "maybe type" "temp"
    (654804 'move' call_tmp[654801](383416 call intIdxType _mt[243] this[126222]))
    unknown call_tmp[654806] "expr temp" "maybe param" "maybe type" "temp"
    (654809 'move' call_tmp[654806](124526 call * call_tmp[654794] call_tmp[654801]))
    (542948 'default init var' offTup[124528] call_tmp[654806])
    (124531 'end of statement')
    {
      unknown _indexOfInterest[124549] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124550] "expr temp" "temp"
      unknown call_tmp[654813] "expr temp" "maybe param" "maybe type" "temp"
      (654816 'move' call_tmp[654813](383423 call rank _mt[243] this[126222]))
      unknown call_tmp[654818] "expr temp" "maybe param" "maybe type" "temp"
      (654821 'move' call_tmp[654818](124564 call - call_tmp[654813] 1))
      unknown call_tmp[654823] "expr temp" "maybe param" "maybe type" "temp"
      (654826 'move' call_tmp[654823](124567 call chpl_direct_range_iter 0 call_tmp[654818] 1))
      (124559 'move' _iterator[124550](124557 call _getIterator call_tmp[654823]))
      Defer
      {
        {
          (124583 call _freeIterator _iterator[124550])
        }
      }
      { scopeless type
        (124572 'move' _indexOfInterest[124549](124569 call iteratorIndex _iterator[124550]))
      }
      ForLoop[124551]
      {
        unknown i[124576] "index var" "insert auto destroy"
        (479864 'end of statement')
        (124578 'move' i[124576] _indexOfInterest[124549])
        (479865 'end of statement' i[124576])
        unknown call_tmp[654828] "expr temp" "maybe param" "maybe type" "temp"
        (654831 'move' call_tmp[654828](124544 call offTup[124528] i[124576]))
        (124546 call = call_tmp[654828] off[124515])
        (479867 'end of statement' offTup[124528] i[124576])
        label _continueLabel[124554]
        _indexOfInterest[124549]
        _iterator[124550]
      }
      label _breakLabel[124555]
    }
    unknown call_tmp[654835] "expr temp" "maybe param" "maybe type" "temp"
    (654838 'move' call_tmp[654835](124593 call(383427 call (partial) interior _mt[243] this[126222]) offTup[124528]))
    (517226 'move' ret[517221](517225 'deref' call_tmp[654835]))
    gotoReturn _end_interior[517219] _end_interior[517219]
    (479870 'end of statement' offTup[124528])
    label _end_interior[517219]
    (517223 return ret[517221])
  }
  where {
    unknown call_tmp[654842] "expr temp" "maybe param" "maybe type" "temp"
    (654845 'move' call_tmp[654842](383408 call rank _mt[243] this[126222]))
    (124522 call != call_tmp[654842] 1)
  }
  function _domain[125908](?).translate[124603](arg _mt[126228]:_MT[238], arg this[126226]:_domain[125908](?), arg off[124601]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654847] "expr temp" "maybe param" "maybe type" "temp"
    (654850 'move' call_tmp[654847](124614 call isAssociativeDom this[126226]))
    unknown call_tmp[654852] "expr temp" "maybe param" "maybe type" "temp"
    (654855 'move' call_tmp[654852](124688 call _cond_test call_tmp[654847]))
    if call_tmp[654852]
    {
      (124634 call compilerError "translate not supported on associative domains")
    }
    {
      unknown call_tmp[654857] "expr temp" "maybe param" "maybe type" "temp"
      (654860 'move' call_tmp[654857](124639 call isSparseDom this[126226]))
      unknown call_tmp[654862] "expr temp" "maybe param" "maybe type" "temp"
      (654865 'move' call_tmp[654862](124682 call _cond_test call_tmp[654857]))
      if call_tmp[654862]
      {
        (124659 call compilerError "translate not supported on sparse domains")
      }
      {
        (124680 call compilerError "translate not supported on this domain type")
      }
    }
    (517230 return _void[55])
  }
  where {
    unknown call_tmp[654867] "expr temp" "maybe param" "maybe type" "temp"
    (654870 'move' call_tmp[654867](124608 call isRectangularDom this[126226]))
    (124609 call ! call_tmp[654867])
  }
  function _domain[125908](?).translate[124704](arg _mt[126232]:_MT[238], arg this[126230]:_domain[125908](?), arg off[124701]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517234] "RVV" "temp"
    unknown call_tmp[654876] "expr temp" "maybe param" "maybe type" "temp"
    (654879 'move' call_tmp[654876](124709 call(383439 call (partial) translate _mt[243] this[126230]) off[124701]))
    (517239 'move' ret[517234](517238 'deref' call_tmp[654876]))
    (517236 return ret[517234])
  }
  function _domain[125908](?).translate[124719](arg _mt[126236]:_MT[238], arg this[126234]:_domain[125908](?), arg off[124717]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517243] "RVV" "temp"
    unknown call_tmp[654883] "expr temp" "maybe param" "maybe type" "temp"
    (654886 'move' call_tmp[654883](124726 call size _mt[243] off[124717]))
    unknown call_tmp[654890] "expr temp" "maybe param" "maybe type" "temp"
    (654893 'move' call_tmp[654890](383445 call rank _mt[243] this[126234]))
    unknown call_tmp[654895] "expr temp" "maybe param" "maybe type" "temp"
    (654898 'move' call_tmp[654895](124730 call != call_tmp[654883] call_tmp[654890]))
    unknown call_tmp[654900] "expr temp" "maybe param" "maybe type" "temp"
    (654903 'move' call_tmp[654900](124753 call _cond_test call_tmp[654895]))
    if call_tmp[654900]
    {
      (124751 call compilerError "the domain and offset arguments of translate() must be of the same rank")
    }
    unknown call_tmp[654907] "maybe param" "maybe type" "temp"
    (654910 'move' call_tmp[654907](124761 call(383449 call (partial) dims _mt[243] this[126234])))
    unknown ranges[124762] "dead at end of block" "insert auto destroy"
    (542950 'init var' ranges[124762] call_tmp[654907])
    (124765 'end of statement')
    {
      unknown _indexOfInterest[124799] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124800] "expr temp" "temp"
      unknown call_tmp[654914] "expr temp" "maybe param" "maybe type" "temp"
      (654917 'move' call_tmp[654914](383458 call rank _mt[243] this[126234]))
      unknown call_tmp[654919] "expr temp" "maybe param" "maybe type" "temp"
      (654922 'move' call_tmp[654919](124814 call - call_tmp[654914] 1))
      unknown call_tmp[654924] "expr temp" "maybe param" "maybe type" "temp"
      (654927 'move' call_tmp[654924](124817 call chpl_direct_range_iter 0 call_tmp[654919] 1))
      (124809 'move' _iterator[124800](124807 call _getIterator call_tmp[654924]))
      Defer
      {
        {
          (124833 call _freeIterator _iterator[124800])
        }
      }
      { scopeless type
        (124822 'move' _indexOfInterest[124799](124819 call iteratorIndex _iterator[124800]))
      }
      ForLoop[124801]
      {
        unknown i[124826] "index var" "insert auto destroy"
        (479878 'end of statement')
        (124828 'move' i[124826] _indexOfInterest[124799])
        (479879 'end of statement' i[124826])
        unknown call_tmp[654929] "expr temp" "maybe param" "maybe type" "temp"
        (654932 'move' call_tmp[654929](124777 call ranges[124762] i[124826]))
        unknown call_tmp[654936] "expr temp" "maybe param" "maybe type" "temp"
        (654939 'move' call_tmp[654936](359590 call _value _mt[243] this[126234]))
        unknown call_tmp[654943] "expr temp" "maybe param" "maybe type" "temp"
        (654946 'move' call_tmp[654943](124784 call(124779 call (partial) dsiDim _mt[243] call_tmp[654936]) i[124826]))
        unknown call_tmp[654950] "expr temp" "maybe param" "maybe type" "temp"
        (654953 'move' call_tmp[654950](124793 call off[124717] i[124826]))
        unknown call_tmp[654955] "expr temp" "maybe param" "maybe type" "temp"
        (654958 'move' call_tmp[654955](124795 call(124787 call (partial) translate _mt[243] call_tmp[654943]) call_tmp[654950]))
        (124796 call = call_tmp[654929] call_tmp[654955])
        (479881 'end of statement' ranges[124762] i[124826] i[124826] i[124826])
        label _continueLabel[124804]
        _indexOfInterest[124799]
        _iterator[124800]
      }
      label _breakLabel[124805]
    }
    unknown call_tmp[654962] "expr temp" "maybe param" "maybe type" "temp"
    (654965 'move' call_tmp[654962](383463 call dist _mt[243] this[126234]))
    unknown call_tmp[654969] "expr temp" "maybe param" "maybe type" "temp"
    (654972 'move' call_tmp[654969](383467 call rank _mt[243] this[126234]))
    unknown call_tmp[654976] "expr temp" "maybe param" "maybe type" "temp"
    (654979 'move' call_tmp[654976](359594 call _value _mt[243] this[126234]))
    unknown call_tmp[654983] "expr temp" "maybe param" "maybe type" "temp"
    (654986 'move' call_tmp[654983](124846 call idxType _mt[243] call_tmp[654976]))
    unknown call_tmp[654990] "expr temp" "maybe param" "maybe type" "temp"
    (654993 'move' call_tmp[654990](383471 call stridable _mt[243] this[126234]))
    unknown call_tmp[654995] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654998 'move' call_tmp[654995](747939 'new' _domain[125908](?) call_tmp[654962] call_tmp[654969] call_tmp[654983] call_tmp[654990] ranges[124762]))
    (517248 'move' ret[517243](517247 'deref' call_tmp[654995]))
    gotoReturn _end_translate[517241] _end_translate[517241]
    (479886 'end of statement' ranges[124762])
    label _end_translate[517241]
    (517245 return ret[517243])
  }
  where {
    (124724 call isTuple off[124717])
  }
  function _domain[125908](?).translate[124861](arg _mt[126240]:_MT[238], arg this[126238]:_domain[125908](?), arg off[124859]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517254] "RVV" "temp"
    unknown offTup[124880] "dead at end of block" "insert auto destroy"
    unknown call_tmp[655002] "expr temp" "maybe param" "maybe type" "temp"
    (655005 'move' call_tmp[655002](383481 call rank _mt[243] this[126238]))
    unknown call_tmp[655007] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (655010 'move' call_tmp[655007](124877 'typeof' off[124859]))
    unknown call_tmp[655012] "expr temp" "maybe param" "maybe type" "temp"
    (655015 'move' call_tmp[655012](124878 call * call_tmp[655002] call_tmp[655007]))
    (542952 'default init var' offTup[124880] call_tmp[655012])
    (124883 'end of statement')
    {
      unknown _indexOfInterest[124901] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124902] "expr temp" "temp"
      unknown call_tmp[655019] "expr temp" "maybe param" "maybe type" "temp"
      (655022 'move' call_tmp[655019](383489 call rank _mt[243] this[126238]))
      unknown call_tmp[655024] "expr temp" "maybe param" "maybe type" "temp"
      (655027 'move' call_tmp[655024](124916 call - call_tmp[655019] 1))
      unknown call_tmp[655029] "expr temp" "maybe param" "maybe type" "temp"
      (655032 'move' call_tmp[655029](124919 call chpl_direct_range_iter 0 call_tmp[655024] 1))
      (124911 'move' _iterator[124902](124909 call _getIterator call_tmp[655029]))
      Defer
      {
        {
          (124935 call _freeIterator _iterator[124902])
        }
      }
      { scopeless type
        (124924 'move' _indexOfInterest[124901](124921 call iteratorIndex _iterator[124902]))
      }
      ForLoop[124903]
      {
        unknown i[124928] "index var" "insert auto destroy"
        (479889 'end of statement')
        (124930 'move' i[124928] _indexOfInterest[124901])
        (479890 'end of statement' i[124928])
        unknown call_tmp[655034] "expr temp" "maybe param" "maybe type" "temp"
        (655037 'move' call_tmp[655034](124896 call offTup[124880] i[124928]))
        (124898 call = call_tmp[655034] off[124859])
        (479892 'end of statement' offTup[124880] i[124928])
        label _continueLabel[124906]
        _indexOfInterest[124901]
        _iterator[124902]
      }
      label _breakLabel[124907]
    }
    unknown call_tmp[655041] "expr temp" "maybe param" "maybe type" "temp"
    (655044 'move' call_tmp[655041](124945 call(383493 call (partial) translate _mt[243] this[126238]) offTup[124880]))
    (517259 'move' ret[517254](517258 'deref' call_tmp[655041]))
    gotoReturn _end_translate[517252] _end_translate[517252]
    (479895 'end of statement' offTup[124880])
    label _end_translate[517252]
    (517256 return ret[517254])
  }
  where {
    unknown tmp[424906] "maybe param" "temp"
    unknown call_tmp[655048] "expr temp" "maybe param" "maybe type" "temp"
    (655051 'move' call_tmp[655048](383476 call rank _mt[243] this[126238]))
    (424917 'move' tmp[424906](124865 call != call_tmp[655048] 1))
    unknown call_tmp[655053] "expr temp" "maybe param" "maybe type" "temp"
    (655056 'move' call_tmp[655053](424919 call _cond_invalid tmp[424906]))
    if call_tmp[655053]
    {
      (424922 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565470] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565471] "maybe param" "temp"
    unknown call_tmp[655058] "expr temp" "maybe param" "maybe type" "temp"
    (655061 'move' call_tmp[655058](424907 call isTrue tmp[424906]))
    (565476 'move' tmp[565471](565474 call _cond_test call_tmp[655058]))
    if tmp[565471]
    {
      unknown tmp[565478] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655063] "expr temp" "maybe param" "maybe type" "temp"
      (655066 'move' call_tmp[655063](124870 call isTuple off[124859]))
      unknown call_tmp[655068] "expr temp" "maybe param" "maybe type" "temp"
      (655071 'move' call_tmp[655068](124871 call ! call_tmp[655063]))
      (565480 'move' tmp[565478](424910 call isTrue call_tmp[655068]))
      (565485 'move' tmp[565470](565482 '_paramFoldLogical' tmp[565471] tmp[565478]))
    }
    {
      (565490 'move' tmp[565470](565487 '_paramFoldLogical' tmp[565471] 0))
    }
    (748325 call chpl_statementLevelSymbol tmp[565470])
  }
  function _domain[125908](?).isEmpty[124953](arg _mt[126244]:_MT[238], arg this[126242]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517265] "RVV" "temp"
    unknown call_tmp[655075] "expr temp" "maybe param" "maybe type" "temp"
    (655078 'move' call_tmp[655075](124957 call size _mt[243] this[126242]))
    unknown call_tmp[655080] "expr temp" "maybe param" "maybe type" "temp"
    (655083 'move' call_tmp[655080](124961 call == call_tmp[655075] 0))
    (517271 'move' ret[517265](517270 'coerce' call_tmp[655080] bool[10]))
    (517267 return ret[517265])
  }
  { scopeless type
    bool[10]
  }
  function _domain[125908](?).chpl__unTranslate[124977](arg _mt[126248]:_MT[238], arg this[126246]:_domain[125908](?), arg off[124973]:integral[199](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517275] "RVV" "temp"
    unknown call_tmp[655089] "expr temp" "maybe param" "maybe type" "temp"
    (655092 'move' call_tmp[655089](124982 call(383503 call (partial) chpl__unTranslate _mt[243] this[126246]) off[124973]))
    (517280 'move' ret[517275](517279 'deref' call_tmp[655089]))
    (517277 return ret[517275])
  }
  function _domain[125908](?).chpl__unTranslate[124997](arg _mt[126252]:_MT[238], arg this[126250]:_domain[125908](?), arg off[124994] :
  unknown call_tmp[655096] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517284] "RVV" "temp"
    unknown call_tmp[655110] "maybe param" "maybe type" "temp"
    (655113 'move' call_tmp[655110](125001 call(383516 call (partial) dims _mt[243] this[126250])))
    unknown ranges[125002] "dead at end of block" "insert auto destroy"
    (542954 'init var' ranges[125002] call_tmp[655110])
    (125005 'end of statement')
    {
      unknown _indexOfInterest[125037] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125038] "expr temp" "temp"
      unknown call_tmp[655117] "expr temp" "maybe param" "maybe type" "temp"
      (655120 'move' call_tmp[655117](383529 call rank _mt[243] this[126250]))
      unknown call_tmp[655122] "expr temp" "maybe param" "maybe type" "temp"
      (655125 'move' call_tmp[655122](125052 call - call_tmp[655117] 1))
      unknown call_tmp[655127] "expr temp" "maybe param" "maybe type" "temp"
      (655130 'move' call_tmp[655127](125055 call chpl_direct_range_iter 0 call_tmp[655122] 1))
      (125047 'move' _iterator[125038](125045 call _getIterator call_tmp[655127]))
      Defer
      {
        {
          (125071 call _freeIterator _iterator[125038])
        }
      }
      { scopeless type
        (125060 'move' _indexOfInterest[125037](125057 call iteratorIndex _iterator[125038]))
      }
      ForLoop[125039]
      {
        unknown i[125064] "index var" "insert auto destroy"
        (479900 'end of statement')
        (125066 'move' i[125064] _indexOfInterest[125037])
        (479901 'end of statement' i[125064])
        unknown call_tmp[655132] "expr temp" "maybe param" "maybe type" "temp"
        (655135 'move' call_tmp[655132](125018 call ranges[125002] i[125064]))
        unknown call_tmp[655139] "expr temp" "maybe param" "maybe type" "temp"
        (655142 'move' call_tmp[655139](125022 call(383522 call (partial) dim _mt[243] this[126250]) i[125064]))
        unknown call_tmp[655146] "expr temp" "maybe param" "maybe type" "temp"
        (655149 'move' call_tmp[655146](125031 call off[124994] i[125064]))
        unknown call_tmp[655151] "expr temp" "maybe param" "maybe type" "temp"
        (655154 'move' call_tmp[655151](125033 call(125025 call (partial) chpl__unTranslate _mt[243] call_tmp[655139]) call_tmp[655146]))
        (125034 call = call_tmp[655132] call_tmp[655151])
        (479903 'end of statement' ranges[125002] i[125064] i[125064] i[125064])
        label _continueLabel[125042]
        _indexOfInterest[125037]
        _iterator[125038]
      }
      label _breakLabel[125043]
    }
    unknown call_tmp[655158] "expr temp" "maybe param" "maybe type" "temp"
    (655161 'move' call_tmp[655158](383534 call dist _mt[243] this[126250]))
    unknown call_tmp[655165] "expr temp" "maybe param" "maybe type" "temp"
    (655168 'move' call_tmp[655165](383538 call rank _mt[243] this[126250]))
    unknown call_tmp[655172] "expr temp" "maybe param" "maybe type" "temp"
    (655175 'move' call_tmp[655172](359599 call _value _mt[243] this[126250]))
    unknown call_tmp[655179] "expr temp" "maybe param" "maybe type" "temp"
    (655182 'move' call_tmp[655179](125084 call idxType _mt[243] call_tmp[655172]))
    unknown call_tmp[655186] "expr temp" "maybe param" "maybe type" "temp"
    (655189 'move' call_tmp[655186](383542 call stridable _mt[243] this[126250]))
    unknown call_tmp[655191] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (655194 'move' call_tmp[655191](747940 'new' _domain[125908](?) call_tmp[655158] call_tmp[655165] call_tmp[655179] call_tmp[655186] ranges[125002]))
    (517289 'move' ret[517284](517288 'deref' call_tmp[655191]))
    gotoReturn _end_chpl__unTranslate[517282] _end_chpl__unTranslate[517282]
    (479908 'end of statement' ranges[125002])
    label _end_chpl__unTranslate[517282]
    (517286 return ret[517284])
  }
  function _domain[125908](?).setIndices[125098](arg _mt[126256]:_MT[238], arg this[126254]:_domain[125908](?), arg x[125096]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655198] "expr temp" "maybe param" "maybe type" "temp"
    (655201 'move' call_tmp[655198](359603 call _value _mt[243] this[126254]))
    (125106 call(125101 call (partial) dsiSetIndices _mt[243] call_tmp[655198]) x[125096])
    (479910 'end of statement')
    unknown call_tmp[655207] "expr temp" "maybe param" "maybe type" "temp"
    (655210 'move' call_tmp[655207](383549 call _instance _mt[243] this[126254]))
    unknown call_tmp[655212] "expr temp" "maybe param" "maybe type" "temp"
    (655215 'move' call_tmp[655212](125112 call _isPrivatized call_tmp[655207]))
    unknown call_tmp[655217] "expr temp" "maybe param" "maybe type" "temp"
    (655220 'move' call_tmp[655217](125119 call _cond_test call_tmp[655212]))
    if call_tmp[655217]
    {
      unknown call_tmp[655224] "expr temp" "maybe param" "maybe type" "temp"
      (655227 'move' call_tmp[655224](383553 call _value _mt[243] this[126254]))
      (125116 call _reprivatize call_tmp[655224])
    }
    (517293 return _void[55])
  }
  function _domain[125908](?).getIndices[125127](arg _mt[126260]:_MT[238], arg this[126258]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517297] "RVV" "temp"
    unknown call_tmp[655231] "expr temp" "maybe param" "maybe type" "temp"
    (655234 'move' call_tmp[655231](359607 call _value _mt[243] this[126258]))
    unknown call_tmp[655238] "expr temp" "maybe param" "maybe type" "temp"
    (655241 'move' call_tmp[655238](125136 call(125132 call (partial) dsiGetIndices _mt[243] call_tmp[655231])))
    (517302 'move' ret[517297](517301 'deref' call_tmp[655238]))
    (517299 return ret[517297])
  }
  function _domain[125908](?).writeThis[125146](arg _mt[126264]:_MT[238], arg this[126262]:_domain[125908](?), arg f[125144]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655245] "expr temp" "maybe param" "maybe type" "temp"
    (655248 'move' call_tmp[655245](359611 call _value _mt[243] this[126262]))
    (125156 call(125151 call (partial) dsiSerialWrite _mt[243] call_tmp[655245]) f[125144])
    (517304 return _void[55])
  }
  function _domain[125908](?).readThis[125165](arg _mt[126268]:_MT[238], arg this[126266]:_domain[125908](?), arg f[125163]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655254] "expr temp" "maybe param" "maybe type" "temp"
    (655257 'move' call_tmp[655254](359615 call _value _mt[243] this[126266]))
    (125175 call(125170 call (partial) dsiSerialRead _mt[243] call_tmp[655254]) f[125163])
    (517306 return _void[55])
  }
  function _domain[125908](?).localSlice[125186](arg _mt[126272]:_MT[238], arg this[126270]:_domain[125908](?), arg r[125183]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517310] "RVV" "temp"
    unknown call_tmp[655265] "expr temp" "maybe param" "maybe type" "temp"
    (655268 'move' call_tmp[655265](383564 call _value _mt[243] this[126270]))
    unknown call_tmp[655270] "expr temp" "maybe param" "maybe type" "temp"
    (655273 'move' call_tmp[655270](125201 '_wide_get_locale' call_tmp[655265]))
    unknown call_tmp[655275] "expr temp" "maybe param" "maybe type" "temp"
    (655278 'move' call_tmp[655275](125202 call chpl_localeID_to_locale call_tmp[655270]))
    unknown call_tmp[655280] "expr temp" "maybe param" "maybe type" "temp"
    (655283 'move' call_tmp[655280](383567 call here[90438]))
    unknown call_tmp[655285] "expr temp" "maybe param" "maybe type" "temp"
    (655288 'move' call_tmp[655285](125205 call != call_tmp[655275] call_tmp[655280]))
    unknown call_tmp[655290] "expr temp" "maybe param" "maybe type" "temp"
    (655293 'move' call_tmp[655290](125254 call _cond_test call_tmp[655285]))
    if call_tmp[655290]
    {
      unknown call_tmp[655297] "expr temp" "maybe param" "maybe type" "temp"
      (655300 'move' call_tmp[655297](383570 call _value _mt[243] this[126270]))
      unknown call_tmp[655302] "expr temp" "maybe param" "maybe type" "temp"
      (655305 'move' call_tmp[655302](125230 '_wide_get_node' call_tmp[655297]))
      unknown call_tmp[655307] "expr temp" "maybe param" "maybe type" "temp"
      (655310 'move' call_tmp[655307](359622 call here[90438]))
      unknown call_tmp[655314] "expr temp" "maybe param" "maybe type" "temp"
      (655317 'move' call_tmp[655314](125249 call id _mt[243] call_tmp[655307]))
      (125252 call halt "Attempting to take a local slice of a domain on locale " call_tmp[655302] " from locale " call_tmp[655314])
    }
    unknown call_tmp[655319] "expr temp" "maybe param" "maybe type" "temp"
    (655322 'move' call_tmp[655319](125264 call this[126270](125262 'expand_tuple' r[125183])))
    (517315 'move' ret[517310](517314 'deref' call_tmp[655319]))
    (517312 return ret[517310])
  }
  where {
    unknown tmp[424927] "maybe param" "temp"
    (424938 'move' tmp[424927](125191 call chpl__isTupleOfRanges r[125183]))
    unknown call_tmp[655324] "expr temp" "maybe param" "maybe type" "temp"
    (655327 'move' call_tmp[655324](424940 call _cond_invalid tmp[424927]))
    if call_tmp[655324]
    {
      (424943 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565497] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565498] "maybe param" "temp"
    unknown call_tmp[655329] "expr temp" "maybe param" "maybe type" "temp"
    (655332 'move' call_tmp[655329](424928 call isTrue tmp[424927]))
    (565503 'move' tmp[565498](565501 call _cond_test call_tmp[655329]))
    if tmp[565498]
    {
      unknown tmp[565505] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655336] "expr temp" "maybe param" "maybe type" "temp"
      (655339 'move' call_tmp[655336](359619 call _value _mt[243] this[126270]))
      unknown call_tmp[655343] "expr temp" "maybe param" "maybe type" "temp"
      (655346 'move' call_tmp[655343](125197 call(125193 call (partial) isDefaultRectangular _mt[243] call_tmp[655336])))
      (565507 'move' tmp[565505](424931 call isTrue call_tmp[655343]))
      (565512 'move' tmp[565497](565509 '_paramFoldLogical' tmp[565498] tmp[565505]))
    }
    {
      (565517 'move' tmp[565497](565514 '_paramFoldLogical' tmp[565498] 0))
    }
    (748327 call chpl_statementLevelSymbol tmp[565497])
  }
  function _domain[125908](?).localSlice[125276](arg _mt[126276]:_MT[238], arg this[126274]:_domain[125908](?), arg r[125273]:_any[178](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517319] "RVV" "temp"
    unknown call_tmp[655352] "expr temp" "maybe param" "maybe type" "temp"
    (655355 'move' call_tmp[655352](359629 call _value _mt[243] this[126274]))
    unknown call_tmp[655359] "expr temp" "maybe param" "maybe type" "temp"
    (655362 'move' call_tmp[655359](125301 call chpl__anyStridable r[125273]))
    unknown call_tmp[655364] "expr temp" "maybe param" "maybe type" "temp"
    (655367 'move' call_tmp[655364](125304 call(125295 call (partial) dsiLocalSlice _mt[243] call_tmp[655352]) call_tmp[655359] r[125273]))
    (517324 'move' ret[517319](517323 'deref' call_tmp[655364]))
    (517321 return ret[517319])
  }
  where {
    unknown tmp[424948] "maybe param" "temp"
    (424959 'move' tmp[424948](125281 call chpl__isTupleOfRanges r[125273]))
    unknown call_tmp[655369] "expr temp" "maybe param" "maybe type" "temp"
    (655372 'move' call_tmp[655369](424961 call _cond_invalid tmp[424948]))
    if call_tmp[655369]
    {
      (424964 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565524] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565525] "maybe param" "temp"
    unknown call_tmp[655374] "expr temp" "maybe param" "maybe type" "temp"
    (655377 'move' call_tmp[655374](424949 call isTrue tmp[424948]))
    (565530 'move' tmp[565525](565528 call _cond_test call_tmp[655374]))
    if tmp[565525]
    {
      unknown tmp[565532] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655381] "expr temp" "maybe param" "maybe type" "temp"
      (655384 'move' call_tmp[655381](359625 call _value _mt[243] this[126274]))
      unknown call_tmp[655388] "expr temp" "maybe param" "maybe type" "temp"
      (655391 'move' call_tmp[655388](125287 call(125283 call (partial) isDefaultRectangular _mt[243] call_tmp[655381])))
      unknown call_tmp[655393] "expr temp" "maybe param" "maybe type" "temp"
      (655396 'move' call_tmp[655393](125288 call ! call_tmp[655388]))
      (565534 'move' tmp[565532](424952 call isTrue call_tmp[655393]))
      (565539 'move' tmp[565524](565536 '_paramFoldLogical' tmp[565525] tmp[565532]))
    }
    {
      (565544 'move' tmp[565524](565541 '_paramFoldLogical' tmp[565525] 0))
    }
    (748329 call chpl_statementLevelSymbol tmp[565524])
  }
  function _domain[125908](?).localSlice[125317](arg _mt[126280]:_MT[238], arg this[126278]:_domain[125908](?), arg d[125314]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517328] "RVV" "temp"
    unknown call_tmp[655402] "expr temp" "maybe param" "maybe type" "temp"
    (655405 'move' call_tmp[655402](125325 call(125321 call (partial) getIndices _mt[243] d[125314])))
    unknown call_tmp[655407] "expr temp" "maybe param" "maybe type" "temp"
    (655410 'move' call_tmp[655407](125328 call(383584 call (partial) localSlice _mt[243] this[126278])(125326 'expand_tuple' call_tmp[655402])))
    (517333 'move' ret[517328](517332 'deref' call_tmp[655407]))
    (517330 return ret[517328])
  }
  function _domain[125908](?).sorted[125345](arg _mt[126284]:_MT[238], arg this[126282]:_domain[125908](?), arg comparator[125341]:_any[178](?) :
  (748876 call chpl_defaultComparator) =
  (125340 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517337] "RVV" "temp"
    {
      unknown _indexOfInterest[125361] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125362] "expr temp" "temp"
      unknown call_tmp[655414] "expr temp" "maybe param" "maybe type" "temp"
      (655417 'move' call_tmp[655414](359634 call _value _mt[243] this[126282]))
      unknown call_tmp[655421] "expr temp" "maybe param" "maybe type" "temp"
      (655424 'move' call_tmp[655421](125356 call(125351 call (partial) dsiSorted _mt[243] call_tmp[655414]) comparator[125341]))
      (125371 'move' _iterator[125362](125369 call _getIterator call_tmp[655421]))
      Defer
      {
        {
          (125388 call _freeIterator _iterator[125362])
        }
      }
      { scopeless type
        (125377 'move' _indexOfInterest[125361](125374 call iteratorIndex _iterator[125362]))
      }
      ForLoop[125363]
      {
        unknown i[125381] "index var" "insert auto destroy"
        (479920 'end of statement')
        (125383 'move' i[125381] _indexOfInterest[125361])
        (479921 'end of statement' i[125381])
        {
          unknown yret[517341] "YVV" "temp"
          (517344 'move' yret[517341](517343 'deref' i[125381]))
          (517346 yield yret[517341])
          (479923 'end of statement' i[125381])
        }
        label _continueLabel[125366]
        _indexOfInterest[125361]
        _iterator[125362]
      }
      label _breakLabel[125367]
    }
    (517339 return ret[517337])
  }
  function _domain[125908](?).displayRepresentation[125400](arg _mt[126288]:_MT[238], arg this[126286]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655428] "expr temp" "maybe param" "maybe type" "temp"
    (655431 'move' call_tmp[655428](359638 call _value _mt[243] this[126286]))
    (125407 call(125403 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[655428]))
    (517348 return _void[55])
  }
  function _domain[125908](?).defaultSparseDist[125414](arg _mt[126292]:_MT[238], arg this[126290]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[517352] "RVV" "temp"
    unknown call_tmp[655437] "expr temp" "maybe param" "maybe type" "temp"
    (655440 'move' call_tmp[655437](359642 call _value _mt[243] this[126290]))
    unknown call_tmp[655444] "expr temp" "maybe param" "maybe type" "temp"
    (655447 'move' call_tmp[655444](125418 call dist _mt[243] call_tmp[655437]))
    unknown call_tmp[655449] "expr temp" "maybe param" "maybe type" "temp"
    (655452 'move' call_tmp[655449](125422 call _getDistribution call_tmp[655444]))
    (517357 'move' ret[517352](517356 'deref' call_tmp[655449]))
    (517354 return ret[517352])
  }
  function _domain[125908](?).safeCast[125434](arg _mt[126296]:_MT[238], arg this[126294]:_domain[125908](?), arg t[125431]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517361] "RVV" "temp"
    const tmpD[125447] "dead at end of block" "const" "insert auto destroy"
    (542956 'default init var' tmpD[125447] t[125431])
    (125450 'end of statement')
    unknown call_tmp[655456] "expr temp" "maybe param" "maybe type" "temp"
    (655459 'move' call_tmp[655456](125453 call rank _mt[243] tmpD[125447]))
    unknown call_tmp[655463] "expr temp" "maybe param" "maybe type" "temp"
    (655466 'move' call_tmp[655463](125457 call rank _mt[243] this[126294]))
    unknown call_tmp[655468] "expr temp" "maybe param" "maybe type" "temp"
    (655471 'move' call_tmp[655468](125460 call != call_tmp[655456] call_tmp[655463]))
    unknown call_tmp[655473] "expr temp" "maybe param" "maybe type" "temp"
    (655476 'move' call_tmp[655473](125483 call _cond_test call_tmp[655468]))
    if call_tmp[655473]
    {
      (125481 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655480] "expr temp" "maybe param" "maybe type" "temp"
    (655483 'move' call_tmp[655480](125489 call idxType _mt[243] tmpD[125447]))
    unknown call_tmp[655487] "expr temp" "maybe param" "maybe type" "temp"
    (655490 'move' call_tmp[655487](125493 call idxType _mt[243] this[126294]))
    unknown call_tmp[655492] "expr temp" "maybe param" "maybe type" "temp"
    (655495 'move' call_tmp[655492](125496 call != call_tmp[655480] call_tmp[655487]))
    unknown call_tmp[655497] "expr temp" "maybe param" "maybe type" "temp"
    (655500 'move' call_tmp[655497](125519 call _cond_test call_tmp[655492]))
    if call_tmp[655497]
    {
      (125517 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655504] "expr temp" "maybe param" "maybe type" "temp"
    (655507 'move' call_tmp[655504](125525 call stridable _mt[243] tmpD[125447]))
    unknown call_tmp[655511] "expr temp" "maybe param" "maybe type" "temp"
    (655514 'move' call_tmp[655511](125529 call stridable _mt[243] this[126294]))
    unknown call_tmp[655516] "expr temp" "maybe param" "maybe type" "temp"
    (655519 'move' call_tmp[655516](125532 call == call_tmp[655504] call_tmp[655511]))
    unknown call_tmp[655521] "expr temp" "maybe param" "maybe type" "temp"
    (655524 'move' call_tmp[655521](125713 call _cond_test call_tmp[655516]))
    if call_tmp[655521]
    {
      (517366 'move' ret[517361](517365 'deref' this[126294]))
      gotoReturn _end_safeCast[517359] _end_safeCast[517359]
    }
    {
      unknown tmp[424990] "maybe param" "temp"
      unknown call_tmp[655528] "expr temp" "maybe param" "maybe type" "temp"
      (655531 'move' call_tmp[655528](125538 call stridable _mt[243] tmpD[125447]))
      (425001 'move' tmp[424990](125541 call ! call_tmp[655528]))
      unknown call_tmp[655533] "expr temp" "maybe param" "maybe type" "temp"
      (655536 'move' call_tmp[655533](425003 call _cond_invalid tmp[424990]))
      if call_tmp[655533]
      {
        (425006 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565551] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565552] "maybe param" "temp"
      unknown call_tmp[655538] "expr temp" "maybe param" "maybe type" "temp"
      (655541 'move' call_tmp[655538](424991 call isTrue tmp[424990]))
      (565557 'move' tmp[565552](565555 call _cond_test call_tmp[655538]))
      if tmp[565552]
      {
        unknown tmp[565559] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655545] "expr temp" "maybe param" "maybe type" "temp"
        (655548 'move' call_tmp[655545](125544 call stridable _mt[243] this[126294]))
        (565561 'move' tmp[565559](424994 call isTrue call_tmp[655545]))
        (565566 'move' tmp[565551](565563 '_paramFoldLogical' tmp[565552] tmp[565559]))
      }
      {
        (565571 'move' tmp[565551](565568 '_paramFoldLogical' tmp[565552] 0))
      }
      unknown call_tmp[655550] "expr temp" "maybe param" "maybe type" "temp"
      (655553 'move' call_tmp[655550](125709 call _cond_test tmp[565551]))
      if call_tmp[655550]
      {
        unknown call_tmp[655557] "maybe param" "maybe type" "temp"
        (655560 'move' call_tmp[655557](125554 call(125550 call (partial) getIndices _mt[243] this[126294])))
        const inds[125555] "dead at end of block" "const" "insert auto destroy"
        (542958 'init var' inds[125555] call_tmp[655557])
        (125558 'end of statement')
        unknown unstridableInds[125572] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655564] "expr temp" "maybe param" "maybe type" "temp"
        (655567 'move' call_tmp[655564](383595 call rank _mt[243] this[126294]))
        unknown call_tmp[655571] "expr temp" "maybe param" "maybe type" "temp"
        (655574 'move' call_tmp[655571](125563 call idxType _mt[243] tmpD[125447]))
        unknown call_tmp[655576] "expr temp" "maybe param" "maybe type" "temp"
        (655579 'move' call_tmp[655576](125569 call range[64319](?) call_tmp[655571](stridable = 0)))
        unknown call_tmp[655581] "expr temp" "maybe param" "maybe type" "temp"
        (655584 'move' call_tmp[655581](125570 call * call_tmp[655564] call_tmp[655576]))
        (542960 'default init var' unstridableInds[125572] call_tmp[655581])
        (125575 'end of statement' tmpD[125447])
        {
          unknown dim[125649] "dead at end of block" "insert auto destroy"
          (542962 'init var' dim[125649] 0)
          (479932 'end of statement')
          unknown tmp[125650] "maybe param" "temp"
          unknown call_tmp[655588] "expr temp" "maybe param" "maybe type" "temp"
          (655591 'move' call_tmp[655588](125578 call size _mt[243] inds[125555]))
          unknown call_tmp[655593] "expr temp" "maybe param" "maybe type" "temp"
          (655596 'move' call_tmp[655593](125582 call - call_tmp[655588] 1))
          (125662 'move' tmp[125650](125660 call chpl_compute_low_param_loop_bound 0 call_tmp[655593]))
          unknown tmp[125651] "maybe param" "temp"
          unknown call_tmp[655600] "expr temp" "maybe param" "maybe type" "temp"
          (655603 'move' call_tmp[655600](125669 call size _mt[243] inds[125555]))
          unknown call_tmp[655605] "expr temp" "maybe param" "maybe type" "temp"
          (655608 'move' call_tmp[655605](125667 call - call_tmp[655600] 1))
          (125675 'move' tmp[125651](125673 call chpl_compute_high_param_loop_bound 0 call_tmp[655605]))
          unknown tmp[125652] "maybe param" "temp"
          (125678 'move' tmp[125652] 1)
          ParamForLoop[125680]
          { dim[125649] tmp[125650] tmp[125651] tmp[125652]
            {
              unknown call_tmp[655610] "expr temp" "maybe param" "maybe type" "temp"
              (655613 'move' call_tmp[655610](125589 call inds[125555] dim[125649]))
              unknown call_tmp[655617] "expr temp" "maybe param" "maybe type" "temp"
              (655620 'move' call_tmp[655617](125590 call stride _mt[243] call_tmp[655610]))
              unknown call_tmp[655622] "expr temp" "maybe param" "maybe type" "temp"
              (655625 'move' call_tmp[655622](125594 call != call_tmp[655617] 1))
              unknown call_tmp[655627] "expr temp" "maybe param" "maybe type" "temp"
              (655630 'move' call_tmp[655627](125618 call _cond_test call_tmp[655622]))
              if call_tmp[655627]
              {
                (125616 call halt "non-stridable domain assigned non-unit stride in dimension " dim[125649])
                (479933 'end of statement' dim[125649])
              }
              unknown call_tmp[655632] "expr temp" "maybe param" "maybe type" "temp"
              (655635 'move' call_tmp[655632](125627 call unstridableInds[125572] dim[125649]))
              unknown call_tmp[655637] "expr temp" "maybe param" "maybe type" "temp"
              (655640 'move' call_tmp[655637](125631 call inds[125555] dim[125649]))
              unknown call_tmp[655646] "expr temp" "maybe param" "maybe type" "temp"
              (655649 'move' call_tmp[655646](125637 call idxType _mt[243] tmpD[125447]))
              unknown call_tmp[655651] "expr temp" "maybe param" "maybe type" "temp"
              (655654 'move' call_tmp[655651](125643 call range[64319](?) call_tmp[655646](stridable = 0)))
              unknown call_tmp[655656] "expr temp" "maybe param" "maybe type" "temp"
              (655659 'move' call_tmp[655656](125645 call(125632 call (partial) safeCast _mt[243] call_tmp[655637]) call_tmp[655651]))
              (125646 call = call_tmp[655632] call_tmp[655656])
              (479935 'end of statement' unstridableInds[125572] dim[125649] inds[125555] dim[125649] tmpD[125447])
            }
          }
          label _unused_continueLabel[125654]
          label _breakLabel[125653]
        }
        (125695 call(125690 call (partial) setIndices _mt[243] tmpD[125447]) unstridableInds[125572])
        (479941 'end of statement' tmpD[125447] unstridableInds[125572])
        (517371 'move' ret[517361](517370 'deref' tmpD[125447]))
        gotoReturn _end_safeCast[517359] _end_safeCast[517359]
        (479944 'end of statement' tmpD[125447])
      }
      {
        (125702 call = tmpD[125447] this[126294])
        (479946 'end of statement' tmpD[125447])
        (517376 'move' ret[517361](517375 'deref' tmpD[125447]))
        gotoReturn _end_safeCast[517359] _end_safeCast[517359]
        (479948 'end of statement' tmpD[125447])
      }
    }
    label _end_safeCast[517359]
    (517363 return ret[517361])
  }
  where {
    unknown tmp[424969] "maybe param" "temp"
    (424980 'move' tmp[424969](125439 call chpl__isRectangularDomType t[125431]))
    unknown call_tmp[655663] "expr temp" "maybe param" "maybe type" "temp"
    (655666 'move' call_tmp[655663](424982 call _cond_invalid tmp[424969]))
    if call_tmp[655663]
    {
      (424985 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565578] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565579] "maybe param" "temp"
    unknown call_tmp[655668] "expr temp" "maybe param" "maybe type" "temp"
    (655671 'move' call_tmp[655668](424970 call isTrue tmp[424969]))
    (565584 'move' tmp[565579](565582 call _cond_test call_tmp[655668]))
    if tmp[565579]
    {
      unknown tmp[565586] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655673] "expr temp" "maybe param" "maybe type" "temp"
      (655676 'move' call_tmp[655673](125443 call isRectangularDom this[126294]))
      (565588 'move' tmp[565586](424973 call isTrue call_tmp[655673]))
      (565593 'move' tmp[565578](565590 '_paramFoldLogical' tmp[565579] tmp[565586]))
    }
    {
      (565598 'move' tmp[565578](565595 '_paramFoldLogical' tmp[565579] 0))
    }
    (748331 call chpl_statementLevelSymbol tmp[565578])
  }
  function _domain[125908](?).targetLocales[125724](arg _mt[126300]:_MT[238], arg this[126298]:_domain[125908](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517382] "RVV" "temp"
    unknown call_tmp[655680] "expr temp" "maybe param" "maybe type" "temp"
    (655683 'move' call_tmp[655680](359660 call _value _mt[243] this[126298]))
    unknown call_tmp[655687] "expr temp" "maybe param" "maybe type" "temp"
    (655690 'move' call_tmp[655687](125731 call(125727 call (partial) dsiTargetLocales _mt[243] call_tmp[655680])))
    (517387 'move' ret[517382](517386 'deref' call_tmp[655687]))
    (517384 return ret[517382])
  }
  function _domain[125908](?).hasSingleLocalSubdomain[125739](arg _mt[126304]:_MT[238], arg this[126302]:_domain[125908](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517391] "RVV" "param" "temp"
    unknown call_tmp[655694] "expr temp" "maybe param" "maybe type" "temp"
    (655697 'move' call_tmp[655694](359664 call _value _mt[243] this[126302]))
    unknown call_tmp[655701] "expr temp" "maybe param" "maybe type" "temp"
    (655704 'move' call_tmp[655701](125748 call(125744 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655694])))
    (517396 'move' ret[517391](517395 'deref' call_tmp[655701]))
    (517393 return ret[517391])
  }
  function _domain[125908](?).localSubdomain[125762](arg _mt[126308]:_MT[238], arg this[126306]:_domain[125908](?), arg loc[125758]:locale[28] =
  (383612 call here[90438])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517400] "RVV" "temp"
    unknown call_tmp[655708] "expr temp" "maybe param" "maybe type" "temp"
    (655711 'move' call_tmp[655708](359668 call _value _mt[243] this[126306]))
    unknown call_tmp[655715] "expr temp" "maybe param" "maybe type" "temp"
    (655718 'move' call_tmp[655715](125769 call(125765 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655708])))
    unknown call_tmp[655720] "expr temp" "maybe param" "maybe type" "temp"
    (655723 'move' call_tmp[655720](125770 call ! call_tmp[655715]))
    unknown call_tmp[655725] "expr temp" "maybe param" "maybe type" "temp"
    (655728 'move' call_tmp[655725](125793 call _cond_test call_tmp[655720]))
    if call_tmp[655725]
    {
      (125791 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[655732] "expr temp" "maybe param" "maybe type" "temp"
    (655735 'move' call_tmp[655732](359672 call _value _mt[243] this[126306]))
    unknown call_tmp[655739] "expr temp" "maybe param" "maybe type" "temp"
    (655742 'move' call_tmp[655739](125807 call(125802 call (partial) dsiLocalSubdomain _mt[243] call_tmp[655732]) loc[125758]))
    (517405 'move' ret[517400](517404 'deref' call_tmp[655739]))
    (517402 return ret[517400])
  }
  function _domain[125908](?).localSubdomains[125820](arg _mt[126312]:_MT[238], arg this[126310]:_domain[125908](?), arg loc[125816]:locale[28] =
  (383615 call here[90438])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517409] "RVV" "temp"
    unknown call_tmp[655746] "expr temp" "maybe param" "maybe type" "temp"
    (655749 'move' call_tmp[655746](359676 call _value _mt[243] this[126310]))
    unknown call_tmp[655753] "expr temp" "maybe param" "maybe type" "temp"
    (655756 'move' call_tmp[655753](125827 call(125823 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655746])))
    unknown call_tmp[655758] "expr temp" "maybe param" "maybe type" "temp"
    (655761 'move' call_tmp[655758](125883 call _cond_test call_tmp[655753]))
    if call_tmp[655758]
    {
      unknown yret[517413] "YVV" "temp"
      unknown call_tmp[655765] "expr temp" "maybe param" "maybe type" "temp"
      (655768 'move' call_tmp[655765](125831 call(383618 call (partial) localSubdomain _mt[243] this[126310]) loc[125816]))
      (517416 'move' yret[517413](517415 'deref' call_tmp[655765]))
      (517418 yield yret[517413])
    }
    {
      {
        unknown _indexOfInterest[125848] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[125849] "expr temp" "temp"
        unknown call_tmp[655772] "expr temp" "maybe param" "maybe type" "temp"
        (655775 'move' call_tmp[655772](359680 call _value _mt[243] this[126310]))
        unknown call_tmp[655779] "expr temp" "maybe param" "maybe type" "temp"
        (655782 'move' call_tmp[655779](125844 call(125839 call (partial) dsiLocalSubdomains _mt[243] call_tmp[655772]) loc[125816]))
        (125858 'move' _iterator[125849](125856 call _getIterator call_tmp[655779]))
        Defer
        {
          {
            (125875 call _freeIterator _iterator[125849])
          }
        }
        { scopeless type
          (125864 'move' _indexOfInterest[125848](125861 call iteratorIndex _iterator[125849]))
        }
        ForLoop[125850]
        {
          unknown d[125868] "index var" "insert auto destroy"
          (479956 'end of statement')
          (125870 'move' d[125868] _indexOfInterest[125848])
          (479957 'end of statement' d[125868])
          unknown yret[517420] "YVV" "temp"
          (517423 'move' yret[517420](517422 'deref' d[125868]))
          (517425 yield yret[517420])
          (479959 'end of statement' d[125868])
          label _continueLabel[125853]
          _indexOfInterest[125848]
          _iterator[125849]
        }
        label _breakLabel[125854]
      }
    }
    (517411 return ret[517409])
  }
  function _domain[125908](?).supportsAutoLocalAccess[125892](arg _mt[126316]:_MT[238], arg this[126314]:_domain[125908](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517429] "RVV" "param" "temp"
    unknown call_tmp[655786] "expr temp" "maybe param" "maybe type" "temp"
    (655789 'move' call_tmp[655786](359684 call _value _mt[243] this[126314]))
    unknown call_tmp[655793] "expr temp" "maybe param" "maybe type" "temp"
    (655796 'move' call_tmp[655793](125901 call(125897 call (partial) dsiSupportsAutoLocalAccess _mt[243] call_tmp[655786])))
    (517434 'move' ret[517429](517433 'deref' call_tmp[655793]))
    (517431 return ret[517429])
  }
  function _domain[125908](?)._pid[799837](arg _mt[799839]:_MT[238], ref arg this[799841]:_domain[125908](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799851] "RVV" "temp"
    unknown call_tmp[799858] "expr temp" "maybe param" "maybe type" "temp"
    (799861 'move' call_tmp[799858](799845 '.' this[799841] c"_pid"))
    (799856 'move' ret[799851](799855 'addr of' call_tmp[799858]))
    (799853 return ret[799851])
  }
  function _domain[125908](?)._instance[799863](arg _mt[799865]:_MT[238], ref arg this[799867]:_domain[125908](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799877] "RVV" "temp"
    unknown call_tmp[799884] "expr temp" "maybe param" "maybe type" "temp"
    (799887 'move' call_tmp[799884](799871 '.' this[799867] c"_instance"))
    (799882 'move' ret[799877](799881 'addr of' call_tmp[799884]))
    (799879 return ret[799877])
  }
  function _domain[125908](?)._unowned[799889](arg _mt[799891]:_MT[238], ref arg this[799893]:_domain[125908](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799903] "RVV" "temp"
    unknown call_tmp[799910] "expr temp" "maybe param" "maybe type" "temp"
    (799913 'move' call_tmp[799910](799897 '.' this[799893] c"_unowned"))
    (799908 'move' ret[799903](799907 'addr of' call_tmp[799910]))
    (799905 return ret[799903])
  }
  function chpl__defaultHash[799915](arg r[799917]:_domain[125908](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[799948] "RVV" "temp"
    unknown call_tmp[799955] "expr temp" "maybe param" "maybe type" "temp"
    (799958 'move' call_tmp[799955](799934 call _unowned _mt[243] r[799917]))
    unknown call_tmp[799960] "expr temp" "maybe param" "maybe type" "temp"
    (799963 'move' call_tmp[799960](799938 call chpl__defaultHash call_tmp[799955]))
    unknown call_tmp[799965] "expr temp" "maybe param" "maybe type" "temp"
    (799968 'move' call_tmp[799965](799925 call _instance _mt[243] r[799917]))
    unknown call_tmp[799970] "expr temp" "maybe param" "maybe type" "temp"
    (799973 'move' call_tmp[799970](799929 call chpl__defaultHash call_tmp[799965]))
    unknown call_tmp[799975] "expr temp" "maybe param" "maybe type" "temp"
    (799978 'move' call_tmp[799975](799919 call _pid _mt[243] r[799917]))
    unknown call_tmp[799980] "expr temp" "maybe param" "maybe type" "temp"
    (799983 'move' call_tmp[799980](799923 call chpl__defaultHash call_tmp[799975]))
    unknown call_tmp[799985] "expr temp" "maybe param" "maybe type" "temp"
    (799988 'move' call_tmp[799985](799931 call chpl__defaultHashCombine call_tmp[799970] call_tmp[799980] 2))
    unknown call_tmp[799990] "expr temp" "maybe param" "maybe type" "temp"
    (799993 'move' call_tmp[799990](799940 call chpl__defaultHashCombine call_tmp[799960] call_tmp[799985] 3))
    (799953 'move' ret[799948](799952 'deref' call_tmp[799990]))
    (799950 return ret[799948])
  }
  type _domain[125908](?) val _pid[119167]:int(64)[13] int(64)[13] unknown _instance[119171] "owned" val _unowned[119176]:bool[10] bool[10] forwarding ( )
  function _cast[126325](arg t[126322]:_domain[125908](?), arg d[126328]:_domain[125908](?)) : _unknown[51] "no doc"
  {
    unknown ret[517438] "RVV" "temp"
    const tmpD[126342] "dead at end of block" "const" "insert auto destroy"
    (542964 'default init var' tmpD[126342] t[126322])
    (126345 'end of statement')
    unknown call_tmp[655800] "expr temp" "maybe param" "maybe type" "temp"
    (655803 'move' call_tmp[655800](126348 call rank _mt[243] tmpD[126342]))
    unknown call_tmp[655807] "expr temp" "maybe param" "maybe type" "temp"
    (655810 'move' call_tmp[655807](126352 call rank _mt[243] d[126328]))
    unknown call_tmp[655812] "expr temp" "maybe param" "maybe type" "temp"
    (655815 'move' call_tmp[655812](126355 call != call_tmp[655800] call_tmp[655807]))
    unknown call_tmp[655817] "expr temp" "maybe param" "maybe type" "temp"
    (655820 'move' call_tmp[655817](126362 call _cond_test call_tmp[655812]))
    if call_tmp[655817]
    {
      (126360 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655824] "expr temp" "maybe param" "maybe type" "temp"
    (655827 'move' call_tmp[655824](126368 call idxType _mt[243] tmpD[126342]))
    unknown call_tmp[655831] "expr temp" "maybe param" "maybe type" "temp"
    (655834 'move' call_tmp[655831](126372 call idxType _mt[243] d[126328]))
    unknown call_tmp[655836] "expr temp" "maybe param" "maybe type" "temp"
    (655839 'move' call_tmp[655836](126375 call != call_tmp[655824] call_tmp[655831]))
    unknown call_tmp[655841] "expr temp" "maybe param" "maybe type" "temp"
    (655844 'move' call_tmp[655841](126382 call _cond_test call_tmp[655836]))
    if call_tmp[655841]
    {
      (126380 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655848] "expr temp" "maybe param" "maybe type" "temp"
    (655851 'move' call_tmp[655848](126388 call stridable _mt[243] tmpD[126342]))
    unknown call_tmp[655855] "expr temp" "maybe param" "maybe type" "temp"
    (655858 'move' call_tmp[655855](126392 call stridable _mt[243] d[126328]))
    unknown call_tmp[655860] "expr temp" "maybe param" "maybe type" "temp"
    (655863 'move' call_tmp[655860](126395 call == call_tmp[655848] call_tmp[655855]))
    unknown call_tmp[655865] "expr temp" "maybe param" "maybe type" "temp"
    (655868 'move' call_tmp[655865](126539 call _cond_test call_tmp[655860]))
    if call_tmp[655865]
    {
      (517443 'move' ret[517438](517442 'deref' d[126328]))
      gotoReturn _end__cast[517436] _end__cast[517436]
    }
    {
      unknown tmp[425032] "maybe param" "temp"
      unknown call_tmp[655872] "expr temp" "maybe param" "maybe type" "temp"
      (655875 'move' call_tmp[655872](126401 call stridable _mt[243] tmpD[126342]))
      (425043 'move' tmp[425032](126404 call ! call_tmp[655872]))
      unknown call_tmp[655877] "expr temp" "maybe param" "maybe type" "temp"
      (655880 'move' call_tmp[655877](425045 call _cond_invalid tmp[425032]))
      if call_tmp[655877]
      {
        (425048 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565605] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565606] "maybe param" "temp"
      unknown call_tmp[655882] "expr temp" "maybe param" "maybe type" "temp"
      (655885 'move' call_tmp[655882](425033 call isTrue tmp[425032]))
      (565611 'move' tmp[565606](565609 call _cond_test call_tmp[655882]))
      if tmp[565606]
      {
        unknown tmp[565613] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655889] "expr temp" "maybe param" "maybe type" "temp"
        (655892 'move' call_tmp[655889](126407 call stridable _mt[243] d[126328]))
        (565615 'move' tmp[565613](425036 call isTrue call_tmp[655889]))
        (565620 'move' tmp[565605](565617 '_paramFoldLogical' tmp[565606] tmp[565613]))
      }
      {
        (565625 'move' tmp[565605](565622 '_paramFoldLogical' tmp[565606] 0))
      }
      unknown call_tmp[655894] "expr temp" "maybe param" "maybe type" "temp"
      (655897 'move' call_tmp[655894](126535 call _cond_test tmp[565605]))
      if call_tmp[655894]
      {
        unknown call_tmp[655901] "maybe param" "maybe type" "temp"
        (655904 'move' call_tmp[655901](126417 call(126413 call (partial) getIndices _mt[243] d[126328])))
        unknown inds[126418] "dead at end of block" "insert auto destroy"
        (542966 'init var' inds[126418] call_tmp[655901])
        (126421 'end of statement')
        unknown unstridableInds[126438] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655908] "expr temp" "maybe param" "maybe type" "temp"
        (655911 'move' call_tmp[655908](126424 call rank _mt[243] d[126328]))
        unknown call_tmp[655915] "expr temp" "maybe param" "maybe type" "temp"
        (655918 'move' call_tmp[655915](126429 call idxType _mt[243] tmpD[126342]))
        unknown call_tmp[655920] "expr temp" "maybe param" "maybe type" "temp"
        (655923 'move' call_tmp[655920](126435 call range[64319](?) call_tmp[655915](stridable = 0)))
        unknown call_tmp[655925] "expr temp" "maybe param" "maybe type" "temp"
        (655928 'move' call_tmp[655925](126436 call * call_tmp[655908] call_tmp[655920]))
        (542968 'default init var' unstridableInds[126438] call_tmp[655925])
        (126441 'end of statement' tmpD[126342])
        {
          unknown i[126475] "dead at end of block" "insert auto destroy"
          (542970 'init var' i[126475] 0)
          (479967 'end of statement')
          unknown tmp[126476] "maybe param" "temp"
          unknown call_tmp[655932] "expr temp" "maybe param" "maybe type" "temp"
          (655935 'move' call_tmp[655932](126444 call rank _mt[243] tmpD[126342]))
          unknown call_tmp[655937] "expr temp" "maybe param" "maybe type" "temp"
          (655940 'move' call_tmp[655937](126448 call - call_tmp[655932] 1))
          (126488 'move' tmp[126476](126486 call chpl_compute_low_param_loop_bound 0 call_tmp[655937]))
          unknown tmp[126477] "maybe param" "temp"
          unknown call_tmp[655944] "expr temp" "maybe param" "maybe type" "temp"
          (655947 'move' call_tmp[655944](126495 call rank _mt[243] tmpD[126342]))
          unknown call_tmp[655949] "expr temp" "maybe param" "maybe type" "temp"
          (655952 'move' call_tmp[655949](126493 call - call_tmp[655944] 1))
          (126501 'move' tmp[126477](126499 call chpl_compute_high_param_loop_bound 0 call_tmp[655949]))
          unknown tmp[126478] "maybe param" "temp"
          (126504 'move' tmp[126478] 1)
          ParamForLoop[126506]
          { i[126475] tmp[126476] tmp[126477] tmp[126478]
            {
              unknown call_tmp[655954] "expr temp" "maybe param" "maybe type" "temp"
              (655957 'move' call_tmp[655954](126455 call unstridableInds[126438] i[126475]))
              unknown call_tmp[655961] "expr temp" "maybe param" "maybe type" "temp"
              (655964 'move' call_tmp[655961](126462 call idxType _mt[243] tmpD[126342]))
              unknown call_tmp[655966] "expr temp" "maybe param" "maybe type" "temp"
              (655969 'move' call_tmp[655966](126468 call range[64319](?) call_tmp[655961](stridable = 0)))
              unknown call_tmp[655971] "expr temp" "maybe param" "maybe type" "temp"
              (655974 'move' call_tmp[655971](126459 call inds[126418] i[126475]))
              unknown call_tmp[655976] "expr temp" "maybe param" "maybe type" "temp"
              (655979 'move' call_tmp[655976](126469 call _cast call_tmp[655966] call_tmp[655971]))
              (126471 call = call_tmp[655954] call_tmp[655976])
              (479968 'end of statement' unstridableInds[126438] i[126475] tmpD[126342] inds[126418] i[126475])
            }
          }
          label _unused_continueLabel[126480]
          label _breakLabel[126479]
        }
        (126521 call(126516 call (partial) setIndices _mt[243] tmpD[126342]) unstridableInds[126438])
        (479974 'end of statement' tmpD[126342] unstridableInds[126438])
        (517448 'move' ret[517438](517447 'deref' tmpD[126342]))
        gotoReturn _end__cast[517436] _end__cast[517436]
        (479977 'end of statement' tmpD[126342])
      }
      {
        (126528 call = tmpD[126342] d[126328])
        (479979 'end of statement' tmpD[126342])
        (517453 'move' ret[517438](517452 'deref' tmpD[126342]))
        gotoReturn _end__cast[517436] _end__cast[517436]
        (479981 'end of statement' tmpD[126342])
      }
    }
    label _end__cast[517436]
    (517440 return ret[517438])
  }
  where {
    unknown tmp[425011] "maybe param" "temp"
    (425022 'move' tmp[425011](126334 call chpl__isRectangularDomType t[126322]))
    unknown call_tmp[655983] "expr temp" "maybe param" "maybe type" "temp"
    (655986 'move' call_tmp[655983](425024 call _cond_invalid tmp[425011]))
    if call_tmp[655983]
    {
      (425027 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565632] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565633] "maybe param" "temp"
    unknown call_tmp[655988] "expr temp" "maybe param" "maybe type" "temp"
    (655991 'move' call_tmp[655988](425012 call isTrue tmp[425011]))
    (565638 'move' tmp[565633](565636 call _cond_test call_tmp[655988]))
    if tmp[565633]
    {
      unknown tmp[565640] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655993] "expr temp" "maybe param" "maybe type" "temp"
      (655996 'move' call_tmp[655993](126338 call isRectangularDom d[126328]))
      (565642 'move' tmp[565640](425015 call isTrue call_tmp[655993]))
      (565647 'move' tmp[565632](565644 '_paramFoldLogical' tmp[565633] tmp[565640]))
    }
    {
      (565652 'move' tmp[565632](565649 '_paramFoldLogical' tmp[565633] 0))
    }
    (748333 call chpl_statementLevelSymbol tmp[565632])
  }
  function _cast[126554](arg t[126551]:string[26], arg x[126557]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517459] "RVV" "temp"
    unknown call_tmp[655998] "expr temp" "maybe param" "maybe type" "temp"
    (656001 'move' call_tmp[655998](126567 call stringify x[126557]))
    (517464 'move' ret[517459](517463 'deref' call_tmp[655998]))
    (517461 return ret[517459])
    (355163 'used modules list'(126561 'use' IO[230912]))
  }
  function chpl_countDomHelp[126576](arg dom[126574]:_any[178](?), arg counts[126578]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517468] "RVV" "temp"
    unknown call_tmp[656005] "maybe param" "maybe type" "temp"
    (656008 'move' call_tmp[656005](126585 call(126581 call (partial) dims _mt[243] dom[126574])))
    unknown ranges[126586] "dead at end of block" "insert auto destroy"
    (542972 'init var' ranges[126586] call_tmp[656005])
    (126589 'end of statement')
    {
      unknown i[126618] "dead at end of block" "insert auto destroy"
      (542974 'init var' i[126618] 0)
      (479984 'end of statement')
      unknown tmp[126619] "maybe param" "temp"
      unknown call_tmp[656012] "expr temp" "maybe param" "maybe type" "temp"
      (656015 'move' call_tmp[656012](126593 call rank _mt[243] dom[126574]))
      unknown call_tmp[656017] "expr temp" "maybe param" "maybe type" "temp"
      (656020 'move' call_tmp[656017](126597 call - call_tmp[656012] 1))
      (126631 'move' tmp[126619](126629 call chpl_compute_low_param_loop_bound 0 call_tmp[656017]))
      unknown tmp[126620] "maybe param" "temp"
      unknown call_tmp[656024] "expr temp" "maybe param" "maybe type" "temp"
      (656027 'move' call_tmp[656024](126638 call rank _mt[243] dom[126574]))
      unknown call_tmp[656029] "expr temp" "maybe param" "maybe type" "temp"
      (656032 'move' call_tmp[656029](126636 call - call_tmp[656024] 1))
      (126644 'move' tmp[126620](126642 call chpl_compute_high_param_loop_bound 0 call_tmp[656029]))
      unknown tmp[126621] "maybe param" "temp"
      (126647 'move' tmp[126621] 1)
      ParamForLoop[126649]
      { i[126618] tmp[126619] tmp[126620] tmp[126621]
        unknown call_tmp[656034] "expr temp" "maybe param" "maybe type" "temp"
        (656037 'move' call_tmp[656034](126604 call ranges[126586] i[126618]))
        unknown call_tmp[656039] "expr temp" "maybe param" "maybe type" "temp"
        (656042 'move' call_tmp[656039](126608 call ranges[126586] i[126618]))
        unknown call_tmp[656044] "expr temp" "maybe param" "maybe type" "temp"
        (656047 'move' call_tmp[656044](126612 call counts[126578] i[126618]))
        unknown call_tmp[656049] "expr temp" "maybe param" "maybe type" "temp"
        (656052 'move' call_tmp[656049](126613 call # call_tmp[656039] call_tmp[656044]))
        (126615 call = call_tmp[656034] call_tmp[656049])
        (479985 'end of statement' ranges[126586] i[126618] ranges[126586] i[126618] i[126618])
      }
      label _unused_continueLabel[126623]
      label _breakLabel[126622]
    }
    unknown call_tmp[656054] "expr temp" "maybe param" "maybe type" "temp"
    (656057 'move' call_tmp[656054](126662 call dom[126574](126660 'expand_tuple' ranges[126586])))
    (517473 'move' ret[517468](517472 'deref' call_tmp[656054]))
    gotoReturn _end_chpl_countDomHelp[517466] _end_chpl_countDomHelp[517466]
    (479991 'end of statement' ranges[126586])
    label _end_chpl_countDomHelp[517466]
    (517470 return ret[517468])
  }
  function #[126673](arg dom[126670]:_domain[125908](?), arg counts[126676]:integral[199](?)) : _unknown[51]
  {
    unknown ret[517479] "RVV" "temp"
    unknown call_tmp[656059] "expr temp" "maybe param" "maybe type" "temp"
    (656062 'move' call_tmp[656059](126696 call _build_tuple counts[126676]))
    unknown call_tmp[656064] "expr temp" "maybe param" "maybe type" "temp"
    (656067 'move' call_tmp[656064](126698 call chpl_countDomHelp dom[126670] call_tmp[656059]))
    (517484 'move' ret[517479](517483 'deref' call_tmp[656064]))
    (517481 return ret[517479])
  }
  where {
    unknown tmp[425053] "maybe param" "temp"
    (425064 'move' tmp[425053](126682 call isRectangularDom dom[126670]))
    unknown call_tmp[656069] "expr temp" "maybe param" "maybe type" "temp"
    (656072 'move' call_tmp[656069](425066 call _cond_invalid tmp[425053]))
    if call_tmp[656069]
    {
      (425069 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565659] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565660] "maybe param" "temp"
    unknown call_tmp[656074] "expr temp" "maybe param" "maybe type" "temp"
    (656077 'move' call_tmp[656074](425054 call isTrue tmp[425053]))
    (565665 'move' tmp[565660](565663 call _cond_test call_tmp[656074]))
    if tmp[565660]
    {
      unknown tmp[565667] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656081] "expr temp" "maybe param" "maybe type" "temp"
      (656084 'move' call_tmp[656081](126684 call rank _mt[243] dom[126670]))
      unknown call_tmp[656086] "expr temp" "maybe param" "maybe type" "temp"
      (656089 'move' call_tmp[656086](126688 call == call_tmp[656081] 1))
      (565669 'move' tmp[565667](425057 call isTrue call_tmp[656086]))
      (565674 'move' tmp[565659](565671 '_paramFoldLogical' tmp[565660] tmp[565667]))
    }
    {
      (565679 'move' tmp[565659](565676 '_paramFoldLogical' tmp[565660] 0))
    }
    (748335 call chpl_statementLevelSymbol tmp[565659])
  }
  function #[126711](arg dom[126708]:_domain[125908](?), arg counts[126713]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517488] "RVV" "temp"
    unknown call_tmp[656093] "expr temp" "maybe param" "maybe type" "temp"
    (656096 'move' call_tmp[656093](126726 call size _mt[243] counts[126713]))
    unknown call_tmp[656100] "expr temp" "maybe param" "maybe type" "temp"
    (656103 'move' call_tmp[656100](126730 call rank _mt[243] dom[126708]))
    unknown call_tmp[656105] "expr temp" "maybe param" "maybe type" "temp"
    (656108 'move' call_tmp[656105](126733 call != call_tmp[656093] call_tmp[656100]))
    unknown call_tmp[656110] "expr temp" "maybe param" "maybe type" "temp"
    (656113 'move' call_tmp[656110](126756 call _cond_test call_tmp[656105]))
    if call_tmp[656110]
    {
      (126754 call compilerError "the domain and tuple arguments of # must have the same rank")
    }
    unknown call_tmp[656115] "expr temp" "maybe param" "maybe type" "temp"
    (656118 'move' call_tmp[656115](126766 call chpl_countDomHelp dom[126708] counts[126713]))
    (517493 'move' ret[517488](517492 'deref' call_tmp[656115]))
    (517490 return ret[517488])
  }
  where {
    unknown tmp[425074] "maybe param" "temp"
    (425085 'move' tmp[425074](126718 call isRectangularDom dom[126708]))
    unknown call_tmp[656120] "expr temp" "maybe param" "maybe type" "temp"
    (656123 'move' call_tmp[656120](425087 call _cond_invalid tmp[425074]))
    if call_tmp[656120]
    {
      (425090 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565686] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565687] "maybe param" "temp"
    unknown call_tmp[656125] "expr temp" "maybe param" "maybe type" "temp"
    (656128 'move' call_tmp[656125](425075 call isTrue tmp[425074]))
    (565692 'move' tmp[565687](565690 call _cond_test call_tmp[656125]))
    if tmp[565687]
    {
      unknown tmp[565694] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656130] "expr temp" "maybe param" "maybe type" "temp"
      (656133 'move' call_tmp[656130](126722 call isTuple counts[126713]))
      (565696 'move' tmp[565694](425078 call isTrue call_tmp[656130]))
      (565701 'move' tmp[565686](565698 '_paramFoldLogical' tmp[565687] tmp[565694]))
    }
    {
      (565706 'move' tmp[565686](565703 '_paramFoldLogical' tmp[565687] 0))
    }
    (748337 call chpl_statementLevelSymbol tmp[565686])
  }
  function #[126780](arg arr[126777]:_array[133594](?), arg counts[126783]:integral[199](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517497] "RVV" "temp"
    unknown call_tmp[656137] "expr temp" "maybe param" "maybe type" "temp"
    (656140 'move' call_tmp[656137](126801 call _dom _mt[243] arr[126777]))
    unknown call_tmp[656142] "expr temp" "maybe param" "maybe type" "temp"
    (656145 'move' call_tmp[656142](126805 call # call_tmp[656137] counts[126783]))
    unknown call_tmp[656147] "expr temp" "maybe param" "maybe type" "temp"
    (656150 'move' call_tmp[656147](126808 call arr[126777] call_tmp[656142]))
    (517502 'move' ret[517497](517501 'deref' call_tmp[656147]))
    (517499 return ret[517497])
  }
  where {
    unknown tmp[425095] "maybe param" "temp"
    (425106 'move' tmp[425095](126789 call isRectangularArr arr[126777]))
    unknown call_tmp[656152] "expr temp" "maybe param" "maybe type" "temp"
    (656155 'move' call_tmp[656152](425108 call _cond_invalid tmp[425095]))
    if call_tmp[656152]
    {
      (425111 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565713] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565714] "maybe param" "temp"
    unknown call_tmp[656157] "expr temp" "maybe param" "maybe type" "temp"
    (656160 'move' call_tmp[656157](425096 call isTrue tmp[425095]))
    (565719 'move' tmp[565714](565717 call _cond_test call_tmp[656157]))
    if tmp[565714]
    {
      unknown tmp[565721] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656164] "expr temp" "maybe param" "maybe type" "temp"
      (656167 'move' call_tmp[656164](126791 call rank _mt[243] arr[126777]))
      unknown call_tmp[656169] "expr temp" "maybe param" "maybe type" "temp"
      (656172 'move' call_tmp[656169](126795 call == call_tmp[656164] 1))
      (565723 'move' tmp[565721](425099 call isTrue call_tmp[656169]))
      (565728 'move' tmp[565713](565725 '_paramFoldLogical' tmp[565714] tmp[565721]))
    }
    {
      (565733 'move' tmp[565713](565730 '_paramFoldLogical' tmp[565714] 0))
    }
    (748339 call chpl_statementLevelSymbol tmp[565713])
  }
  function #[126823](arg arr[126820]:_array[133594](?), arg counts[126825]:_any[178](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517506] "RVV" "temp"
    unknown call_tmp[656176] "expr temp" "maybe param" "maybe type" "temp"
    (656179 'move' call_tmp[656176](126838 call size _mt[243] counts[126825]))
    unknown call_tmp[656183] "expr temp" "maybe param" "maybe type" "temp"
    (656186 'move' call_tmp[656183](126842 call rank _mt[243] arr[126820]))
    unknown call_tmp[656188] "expr temp" "maybe param" "maybe type" "temp"
    (656191 'move' call_tmp[656188](126845 call != call_tmp[656176] call_tmp[656183]))
    unknown call_tmp[656193] "expr temp" "maybe param" "maybe type" "temp"
    (656196 'move' call_tmp[656193](126868 call _cond_test call_tmp[656188]))
    if call_tmp[656193]
    {
      (126866 call compilerError "the domain and array arguments of # must have the same rank")
    }
    unknown call_tmp[656200] "expr temp" "maybe param" "maybe type" "temp"
    (656203 'move' call_tmp[656200](126876 call _dom _mt[243] arr[126820]))
    unknown call_tmp[656205] "expr temp" "maybe param" "maybe type" "temp"
    (656208 'move' call_tmp[656205](126880 call # call_tmp[656200] counts[126825]))
    unknown call_tmp[656210] "expr temp" "maybe param" "maybe type" "temp"
    (656213 'move' call_tmp[656210](126883 call arr[126820] call_tmp[656205]))
    (517511 'move' ret[517506](517510 'deref' call_tmp[656210]))
    (517508 return ret[517506])
  }
  where {
    unknown tmp[425116] "maybe param" "temp"
    (425127 'move' tmp[425116](126830 call isRectangularArr arr[126820]))
    unknown call_tmp[656215] "expr temp" "maybe param" "maybe type" "temp"
    (656218 'move' call_tmp[656215](425129 call _cond_invalid tmp[425116]))
    if call_tmp[656215]
    {
      (425132 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565740] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565741] "maybe param" "temp"
    unknown call_tmp[656220] "expr temp" "maybe param" "maybe type" "temp"
    (656223 'move' call_tmp[656220](425117 call isTrue tmp[425116]))
    (565746 'move' tmp[565741](565744 call _cond_test call_tmp[656220]))
    if tmp[565741]
    {
      unknown tmp[565748] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656225] "expr temp" "maybe param" "maybe type" "temp"
      (656228 'move' call_tmp[656225](126834 call isTuple counts[126825]))
      (565750 'move' tmp[565748](425120 call isTrue call_tmp[656225]))
      (565755 'move' tmp[565740](565752 '_paramFoldLogical' tmp[565741] tmp[565748]))
    }
    {
      (565760 'move' tmp[565740](565757 '_paramFoldLogical' tmp[565741] 0))
    }
    (748341 call chpl_statementLevelSymbol tmp[565740])
  }
  function +[126895](arg d[126892]:_domain[125908](?), arg i[126901] :
  (126899 call chpl__buildIndexType d[126892])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656230] "expr temp" "maybe param" "maybe type" "temp"
    (656233 'move' call_tmp[656230](126907 call isRectangularDom d[126892]))
    unknown call_tmp[656235] "expr temp" "maybe param" "maybe type" "temp"
    (656238 'move' call_tmp[656235](126950 call _cond_test call_tmp[656230]))
    if call_tmp[656235]
    {
      (126927 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126948 call compilerError "Cannot add indices to this domain type")
    }
    (517513 return _void[55])
  }
  function +[126963](arg i[126961]:_any[178](?), arg d[126966]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656240] "expr temp" "maybe param" "maybe type" "temp"
    (656243 'move' call_tmp[656240](126981 call isRectangularDom d[126966]))
    unknown call_tmp[656245] "expr temp" "maybe param" "maybe type" "temp"
    (656248 'move' call_tmp[656245](126992 call _cond_test call_tmp[656240]))
    if call_tmp[656245]
    {
      (126985 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126990 call compilerError "Cannot add indices to this domain type")
    }
    (517515 return _void[55])
  }
  where {
    unknown call_tmp[656250] "expr temp" "maybe param" "maybe type" "temp"
    (656253 'move' call_tmp[656250](126975 call chpl__buildIndexType d[126966]))
    unknown call_tmp[656255] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656258 'move' call_tmp[656255](126971 'typeof' i[126961]))
    (354336 'is_subtype' call_tmp[656250] call_tmp[656255])
  }
  function +[127008](arg d[127005]:_domain[125908](?), arg i[127014] :
  (127012 call chpl__buildIndexType d[127005])) : _unknown[51]
  {
    unknown ret[517519] "RVV" "temp"
    (127027 call(127022 call (partial) add _mt[243] d[127005]) i[127014])
    (480003 'end of statement')
    (517524 'move' ret[517519](517523 'deref' d[127005]))
    (517521 return ret[517519])
  }
  where {
    (127020 call isIrregularDom d[127005])
  }
  function +[127040](arg i[127038]:_any[178](?), arg d[127043]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517528] "RVV" "temp"
    (127067 call(127062 call (partial) add _mt[243] d[127043]) i[127038])
    (480005 'end of statement')
    (517533 'move' ret[517528](517532 'deref' d[127043]))
    (517530 return ret[517528])
  }
  where {
    unknown tmp[425137] "maybe param" "temp"
    unknown call_tmp[656264] "expr temp" "maybe param" "maybe type" "temp"
    (656267 'move' call_tmp[656264](127052 call chpl__buildIndexType d[127043]))
    unknown call_tmp[656269] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656272 'move' call_tmp[656269](127048 'typeof' i[127038]))
    (425148 'move' tmp[425137](354337 'is_subtype' call_tmp[656264] call_tmp[656269]))
    unknown call_tmp[656274] "expr temp" "maybe param" "maybe type" "temp"
    (656277 'move' call_tmp[656274](425150 call _cond_invalid tmp[425137]))
    if call_tmp[656274]
    {
      (425153 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565767] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565768] "maybe param" "temp"
    unknown call_tmp[656279] "expr temp" "maybe param" "maybe type" "temp"
    (656282 'move' call_tmp[656279](425138 call isTrue tmp[425137]))
    (565773 'move' tmp[565768](565771 call _cond_test call_tmp[656279]))
    if tmp[565768]
    {
      unknown tmp[565775] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656284] "expr temp" "maybe param" "maybe type" "temp"
      (656287 'move' call_tmp[656284](127058 call isIrregularDom d[127043]))
      (565777 'move' tmp[565775](425141 call isTrue call_tmp[656284]))
      (565782 'move' tmp[565767](565779 '_paramFoldLogical' tmp[565768] tmp[565775]))
    }
    {
      (565787 'move' tmp[565767](565784 '_paramFoldLogical' tmp[565768] 0))
    }
    (748343 call chpl_statementLevelSymbol tmp[565767])
  }
  function +[127082](arg d1[127079]:_domain[125908](?), arg d2[127085]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517537] "RVV" "temp"
    unknown d3[127108] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656289] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656292 'move' call_tmp[656289](127107 'typeof' d1[127079]))
    (542976 'default init var' d3[127108] call_tmp[656289])
    (127111 'end of statement')
    {
      unknown _indexOfInterest[127123] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127124] "expr temp" "temp"
      (127133 'move' _iterator[127124](127131 call _getIterator d1[127079]))
      Defer
      {
        {
          (127149 call _freeIterator _iterator[127124])
        }
      }
      { scopeless type
        (127138 'move' _indexOfInterest[127123](127135 call iteratorIndex _iterator[127124]))
      }
      ForLoop[127125]
      {
        unknown e[127142] "index var" "insert auto destroy"
        (480008 'end of statement')
        (127144 'move' e[127142] _indexOfInterest[127123])
        (480009 'end of statement' e[127142])
        (127121 call(127116 call (partial) add _mt[243] d3[127108]) e[127142])
        (480011 'end of statement' d3[127108] e[127142])
        label _continueLabel[127128]
        _indexOfInterest[127123]
        _iterator[127124]
      }
      label _breakLabel[127129]
    }
    {
      unknown _indexOfInterest[127166] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127167] "expr temp" "temp"
      (127176 'move' _iterator[127167](127174 call _getIterator d2[127085]))
      Defer
      {
        {
          (127192 call _freeIterator _iterator[127167])
        }
      }
      { scopeless type
        (127181 'move' _indexOfInterest[127166](127178 call iteratorIndex _iterator[127167]))
      }
      ForLoop[127168]
      {
        unknown e[127185] "index var" "insert auto destroy"
        (480015 'end of statement')
        (127187 'move' e[127185] _indexOfInterest[127166])
        (480016 'end of statement' e[127185])
        (127164 call(127159 call (partial) add _mt[243] d3[127108]) e[127185])
        (480018 'end of statement' d3[127108] e[127185])
        label _continueLabel[127171]
        _indexOfInterest[127166]
        _iterator[127167]
      }
      label _breakLabel[127172]
    }
    (517542 'move' ret[517537](517541 'deref' d3[127108]))
    gotoReturn _end_+[517535] _end_+[517535]
    (480021 'end of statement' d3[127108])
    label _end_+[517535]
    (517539 return ret[517537])
  }
  where {
    unknown tmp[425158] "maybe param" "temp"
    unknown call_tmp[656298] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656301 'move' call_tmp[656298](127089 'typeof' d1[127079]))
    unknown call_tmp[656303] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656306 'move' call_tmp[656303](127091 'typeof' d2[127085]))
    (425169 'move' tmp[425158](127092 call == call_tmp[656298] call_tmp[656303]))
    unknown call_tmp[656308] "expr temp" "maybe param" "maybe type" "temp"
    (656311 'move' call_tmp[656308](425171 call _cond_invalid tmp[425158]))
    if call_tmp[656308]
    {
      (425174 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565821] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565822] "maybe param" "temp"
    unknown call_tmp[656313] "expr temp" "maybe param" "maybe type" "temp"
    (656316 'move' call_tmp[656313](425159 call isTrue tmp[425158]))
    (565827 'move' tmp[565822](565825 call _cond_test call_tmp[656313]))
    if tmp[565822]
    {
      unknown tmp[425179] "maybe param" "temp"
      (425190 'move' tmp[425179](127097 call isIrregularDom d1[127079]))
      unknown call_tmp[656318] "expr temp" "maybe param" "maybe type" "temp"
      (656321 'move' call_tmp[656318](425192 call _cond_invalid tmp[425179]))
      if call_tmp[656318]
      {
        (425195 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565794] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565795] "maybe param" "temp"
      unknown call_tmp[656323] "expr temp" "maybe param" "maybe type" "temp"
      (656326 'move' call_tmp[656323](425180 call isTrue tmp[425179]))
      (565800 'move' tmp[565795](565798 call _cond_test call_tmp[656323]))
      if tmp[565795]
      {
        unknown tmp[565802] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[656328] "expr temp" "maybe param" "maybe type" "temp"
        (656331 'move' call_tmp[656328](127101 call isIrregularDom d2[127085]))
        (565804 'move' tmp[565802](425183 call isTrue call_tmp[656328]))
        (565809 'move' tmp[565794](565806 '_paramFoldLogical' tmp[565795] tmp[565802]))
      }
      {
        (565814 'move' tmp[565794](565811 '_paramFoldLogical' tmp[565795] 0))
      }
      unknown tmp[565829] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (565831 'move' tmp[565829](425162 call isTrue tmp[565794]))
      (565836 'move' tmp[565821](565833 '_paramFoldLogical' tmp[565822] tmp[565829]))
    }
    {
      (565841 'move' tmp[565821](565838 '_paramFoldLogical' tmp[565822] 0))
    }
    (748345 call chpl_statementLevelSymbol tmp[565821])
  }
  function +[127211](arg d1[127208]:_domain[125908](?), arg d2[127214]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425200] "maybe param" "temp"
    (425211 'move' tmp[425200](127220 call isRectangularDom d1[127208]))
    unknown call_tmp[656333] "expr temp" "maybe param" "maybe type" "temp"
    (656336 'move' call_tmp[656333](425213 call _cond_invalid tmp[425200]))
    if call_tmp[656333]
    {
      (425216 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565848] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565849] "maybe param" "temp"
    unknown call_tmp[656338] "expr temp" "maybe param" "maybe type" "temp"
    (656341 'move' call_tmp[656338](425201 call isTrue tmp[425200]))
    (565854 'move' tmp[565849](565852 call _cond_test call_tmp[656338]))
    if tmp[565849]
    {
      (565859 'move' tmp[565848](565856 '_paramFoldLogical' tmp[565849] 1))
    }
    {
      unknown tmp[565861] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656343] "expr temp" "maybe param" "maybe type" "temp"
      (656346 'move' call_tmp[656343](127224 call isRectangularDom d2[127214]))
      (565863 'move' tmp[565861](425205 call isTrue call_tmp[656343]))
      (565868 'move' tmp[565848](565865 '_paramFoldLogical' tmp[565849] tmp[565861]))
    }
    unknown call_tmp[656348] "expr temp" "maybe param" "maybe type" "temp"
    (656351 'move' call_tmp[656348](127237 call _cond_test tmp[565848]))
    if call_tmp[656348]
    {
      (127230 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (127235 call compilerError "Cannot add indices to this domain type")
    }
    (517546 return _void[55])
  }
  function -[127252](arg d[127249]:_domain[125908](?), arg i[127258] :
  (127256 call chpl__buildIndexType d[127249])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656353] "expr temp" "maybe param" "maybe type" "temp"
    (656356 'move' call_tmp[656353](127264 call isRectangularDom d[127249]))
    unknown call_tmp[656358] "expr temp" "maybe param" "maybe type" "temp"
    (656361 'move' call_tmp[656358](127307 call _cond_test call_tmp[656353]))
    if call_tmp[656358]
    {
      (127284 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127305 call compilerError "Cannot remove indices from this domain type")
    }
    (517548 return _void[55])
  }
  function -[127322](arg d[127319]:_domain[125908](?), arg i[127328] :
  (127326 call chpl__buildIndexType d[127319])) : _unknown[51]
  {
    unknown ret[517552] "RVV" "temp"
    (127341 call(127336 call (partial) remove _mt[243] d[127319]) i[127328])
    (480028 'end of statement')
    (517557 'move' ret[517552](517556 'deref' d[127319]))
    (517554 return ret[517552])
  }
  where {
    (127334 call isIrregularDom d[127319])
  }
  function -[127356](arg d1[127353]:_domain[125908](?), arg d2[127359]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[517561] "RVV" "temp"
    unknown d3[127376] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656365] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656368 'move' call_tmp[656365](127375 'typeof' d1[127353]))
    (542978 'default init var' d3[127376] call_tmp[656365])
    (127379 'end of statement')
    {
      unknown _indexOfInterest[127391] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127392] "expr temp" "temp"
      (127401 'move' _iterator[127392](127399 call _getIterator d1[127353]))
      Defer
      {
        {
          (127417 call _freeIterator _iterator[127392])
        }
      }
      { scopeless type
        (127406 'move' _indexOfInterest[127391](127403 call iteratorIndex _iterator[127392]))
      }
      ForLoop[127393]
      {
        unknown e[127410] "index var" "insert auto destroy"
        (480031 'end of statement')
        (127412 'move' e[127410] _indexOfInterest[127391])
        (480032 'end of statement' e[127410])
        (127389 call(127384 call (partial) add _mt[243] d3[127376]) e[127410])
        (480034 'end of statement' d3[127376] e[127410])
        label _continueLabel[127396]
        _indexOfInterest[127391]
        _iterator[127392]
      }
      label _breakLabel[127397]
    }
    {
      unknown _indexOfInterest[127434] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127435] "expr temp" "temp"
      (127444 'move' _iterator[127435](127442 call _getIterator d2[127359]))
      Defer
      {
        {
          (127460 call _freeIterator _iterator[127435])
        }
      }
      { scopeless type
        (127449 'move' _indexOfInterest[127434](127446 call iteratorIndex _iterator[127435]))
      }
      ForLoop[127436]
      {
        unknown e[127453] "index var" "insert auto destroy"
        (480038 'end of statement')
        (127455 'move' e[127453] _indexOfInterest[127434])
        (480039 'end of statement' e[127453])
        (127432 call(127427 call (partial) remove _mt[243] d3[127376]) e[127453])
        (480041 'end of statement' d3[127376] e[127453])
        label _continueLabel[127439]
        _indexOfInterest[127434]
        _iterator[127435]
      }
      label _breakLabel[127440]
    }
    (517566 'move' ret[517561](517565 'deref' d3[127376]))
    gotoReturn _end_-[517559] _end_-[517559]
    (480044 'end of statement' d3[127376])
    label _end_-[517559]
    (517563 return ret[517561])
  }
  where {
    unknown tmp[425221] "maybe param" "temp"
    unknown call_tmp[656374] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656377 'move' call_tmp[656374](127363 'typeof' d1[127353]))
    unknown call_tmp[656379] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656382 'move' call_tmp[656379](127365 'typeof' d2[127359]))
    (425232 'move' tmp[425221](127366 call == call_tmp[656374] call_tmp[656379]))
    unknown call_tmp[656384] "expr temp" "maybe param" "maybe type" "temp"
    (656387 'move' call_tmp[656384](425234 call _cond_invalid tmp[425221]))
    if call_tmp[656384]
    {
      (425237 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565875] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565876] "maybe param" "temp"
    unknown call_tmp[656389] "expr temp" "maybe param" "maybe type" "temp"
    (656392 'move' call_tmp[656389](425222 call isTrue tmp[425221]))
    (565881 'move' tmp[565876](565879 call _cond_test call_tmp[656389]))
    if tmp[565876]
    {
      unknown tmp[565883] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656394] "expr temp" "maybe param" "maybe type" "temp"
      (656397 'move' call_tmp[656394](127371 call isSparseDom d1[127353]))
      (565885 'move' tmp[565883](425225 call isTrue call_tmp[656394]))
      (565890 'move' tmp[565875](565887 '_paramFoldLogical' tmp[565876] tmp[565883]))
    }
    {
      (565895 'move' tmp[565875](565892 '_paramFoldLogical' tmp[565876] 0))
    }
    (748347 call chpl_statementLevelSymbol tmp[565875])
  }
  function -[127479](arg d1[127476]:_domain[125908](?), arg d2[127482]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425242] "maybe param" "temp"
    (425253 'move' tmp[425242](127488 call isRectangularDom d1[127476]))
    unknown call_tmp[656399] "expr temp" "maybe param" "maybe type" "temp"
    (656402 'move' call_tmp[656399](425255 call _cond_invalid tmp[425242]))
    if call_tmp[656399]
    {
      (425258 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565902] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565903] "maybe param" "temp"
    unknown call_tmp[656404] "expr temp" "maybe param" "maybe type" "temp"
    (656407 'move' call_tmp[656404](425243 call isTrue tmp[425242]))
    (565908 'move' tmp[565903](565906 call _cond_test call_tmp[656404]))
    if tmp[565903]
    {
      (565913 'move' tmp[565902](565910 '_paramFoldLogical' tmp[565903] 1))
    }
    {
      unknown tmp[565915] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656409] "expr temp" "maybe param" "maybe type" "temp"
      (656412 'move' call_tmp[656409](127492 call isRectangularDom d2[127482]))
      (565917 'move' tmp[565915](425247 call isTrue call_tmp[656409]))
      (565922 'move' tmp[565902](565919 '_paramFoldLogical' tmp[565903] tmp[565915]))
    }
    unknown call_tmp[656414] "expr temp" "maybe param" "maybe type" "temp"
    (656417 'move' call_tmp[656414](127505 call _cond_test tmp[565902]))
    if call_tmp[656414]
    {
      (127498 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127503 call compilerError "Cannot remove indices from this domain type")
    }
    (517570 return _void[55])
  }
  function ==[127520](arg d1[127517]:_domain[125908](?), arg d2[127523]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517574] "RVV" "temp"
    unknown call_tmp[656421] "expr temp" "maybe param" "maybe type" "temp"
    (656424 'move' call_tmp[656421](127537 call _value _mt[243] d1[127517]))
    unknown call_tmp[656428] "expr temp" "maybe param" "maybe type" "temp"
    (656431 'move' call_tmp[656428](127540 call rank _mt[243] call_tmp[656421]))
    unknown call_tmp[656435] "expr temp" "maybe param" "maybe type" "temp"
    (656438 'move' call_tmp[656435](127544 call _value _mt[243] d2[127523]))
    unknown call_tmp[656442] "expr temp" "maybe param" "maybe type" "temp"
    (656445 'move' call_tmp[656442](127547 call rank _mt[243] call_tmp[656435]))
    unknown call_tmp[656447] "expr temp" "maybe param" "maybe type" "temp"
    (656450 'move' call_tmp[656447](127550 call != call_tmp[656428] call_tmp[656442]))
    unknown call_tmp[656452] "expr temp" "maybe param" "maybe type" "temp"
    (656455 'move' call_tmp[656452](127658 call _cond_test call_tmp[656447]))
    if call_tmp[656452]
    {
      (517579 'move' ret[517574](517578 'deref' 0))
      gotoReturn _end_==[517572] _end_==[517572]
    }
    {
      unknown call_tmp[656459] "expr temp" "maybe param" "maybe type" "temp"
      (656462 'move' call_tmp[656459](127557 call _value _mt[243] d1[127517]))
      unknown call_tmp[656466] "expr temp" "maybe param" "maybe type" "temp"
      (656469 'move' call_tmp[656466](127561 call _value _mt[243] d2[127523]))
      unknown call_tmp[656471] "expr temp" "maybe param" "maybe type" "temp"
      (656474 'move' call_tmp[656471](127564 call == call_tmp[656459] call_tmp[656466]))
      unknown call_tmp[656476] "expr temp" "maybe param" "maybe type" "temp"
      (656479 'move' call_tmp[656476](127654 call _cond_test call_tmp[656471]))
      if call_tmp[656476]
      {
        (517584 'move' ret[517574](517583 'deref' 1))
        gotoReturn _end_==[517572] _end_==[517572]
      }
      {
        {
          unknown i[127607] "dead at end of block" "insert auto destroy"
          (542980 'init var' i[127607] 0)
          (480051 'end of statement')
          unknown tmp[127608] "maybe param" "temp"
          unknown call_tmp[656483] "expr temp" "maybe param" "maybe type" "temp"
          (656486 'move' call_tmp[656483](127572 call _value _mt[243] d1[127517]))
          unknown call_tmp[656490] "expr temp" "maybe param" "maybe type" "temp"
          (656493 'move' call_tmp[656490](127575 call rank _mt[243] call_tmp[656483]))
          unknown call_tmp[656495] "expr temp" "maybe param" "maybe type" "temp"
          (656498 'move' call_tmp[656495](127579 call - call_tmp[656490] 1))
          (127620 'move' tmp[127608](127618 call chpl_compute_low_param_loop_bound 0 call_tmp[656495]))
          unknown tmp[127609] "maybe param" "temp"
          unknown call_tmp[656502] "expr temp" "maybe param" "maybe type" "temp"
          (656505 'move' call_tmp[656502](127629 call _value _mt[243] d1[127517]))
          unknown call_tmp[656509] "expr temp" "maybe param" "maybe type" "temp"
          (656512 'move' call_tmp[656509](127627 call rank _mt[243] call_tmp[656502]))
          unknown call_tmp[656514] "expr temp" "maybe param" "maybe type" "temp"
          (656517 'move' call_tmp[656514](127625 call - call_tmp[656509] 1))
          (127636 'move' tmp[127609](127634 call chpl_compute_high_param_loop_bound 0 call_tmp[656514]))
          unknown tmp[127610] "maybe param" "temp"
          (127639 'move' tmp[127610] 1)
          ParamForLoop[127641]
          { i[127607] tmp[127608] tmp[127609] tmp[127610]
            unknown call_tmp[656521] "expr temp" "maybe param" "maybe type" "temp"
            (656524 'move' call_tmp[656521](127589 call(127584 call (partial) dim _mt[243] d1[127517]) i[127607]))
            unknown call_tmp[656528] "expr temp" "maybe param" "maybe type" "temp"
            (656531 'move' call_tmp[656528](127596 call(127591 call (partial) dim _mt[243] d2[127523]) i[127607]))
            unknown call_tmp[656533] "expr temp" "maybe param" "maybe type" "temp"
            (656536 'move' call_tmp[656533](127597 call != call_tmp[656521] call_tmp[656528]))
            unknown call_tmp[656538] "expr temp" "maybe param" "maybe type" "temp"
            (656541 'move' call_tmp[656538](127602 call _cond_test call_tmp[656533]))
            if call_tmp[656538]
            {
              (517589 'move' ret[517574](517588 'deref' 0))
              gotoReturn _end_==[517572] _end_==[517572]
            }
          }
          label _unused_continueLabel[127612]
          label _breakLabel[127611]
        }
        (517594 'move' ret[517574](517593 'deref' 1))
        gotoReturn _end_==[517572] _end_==[517572]
      }
    }
    label _end_==[517572]
    (517576 return ret[517574])
  }
  where {
    unknown tmp[425263] "maybe param" "temp"
    (425274 'move' tmp[425263](127529 call isRectangularDom d1[127517]))
    unknown call_tmp[656543] "expr temp" "maybe param" "maybe type" "temp"
    (656546 'move' call_tmp[656543](425276 call _cond_invalid tmp[425263]))
    if call_tmp[656543]
    {
      (425279 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565929] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565930] "maybe param" "temp"
    unknown call_tmp[656548] "expr temp" "maybe param" "maybe type" "temp"
    (656551 'move' call_tmp[656548](425264 call isTrue tmp[425263]))
    (565935 'move' tmp[565930](565933 call _cond_test call_tmp[656548]))
    if tmp[565930]
    {
      unknown tmp[565937] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656553] "expr temp" "maybe param" "maybe type" "temp"
      (656556 'move' call_tmp[656553](127533 call isRectangularDom d2[127523]))
      (565939 'move' tmp[565937](425267 call isTrue call_tmp[656553]))
      (565944 'move' tmp[565929](565941 '_paramFoldLogical' tmp[565930] tmp[565937]))
    }
    {
      (565949 'move' tmp[565929](565946 '_paramFoldLogical' tmp[565930] 0))
    }
    (748349 call chpl_statementLevelSymbol tmp[565929])
  }
  function !=[127673](arg d1[127670]:_domain[125908](?), arg d2[127676]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517600] "RVV" "temp"
    unknown call_tmp[656560] "expr temp" "maybe param" "maybe type" "temp"
    (656563 'move' call_tmp[656560](127690 call _value _mt[243] d1[127670]))
    unknown call_tmp[656567] "expr temp" "maybe param" "maybe type" "temp"
    (656570 'move' call_tmp[656567](127693 call rank _mt[243] call_tmp[656560]))
    unknown call_tmp[656574] "expr temp" "maybe param" "maybe type" "temp"
    (656577 'move' call_tmp[656574](127697 call _value _mt[243] d2[127676]))
    unknown call_tmp[656581] "expr temp" "maybe param" "maybe type" "temp"
    (656584 'move' call_tmp[656581](127700 call rank _mt[243] call_tmp[656574]))
    unknown call_tmp[656586] "expr temp" "maybe param" "maybe type" "temp"
    (656589 'move' call_tmp[656586](127703 call != call_tmp[656567] call_tmp[656581]))
    unknown call_tmp[656591] "expr temp" "maybe param" "maybe type" "temp"
    (656594 'move' call_tmp[656591](127811 call _cond_test call_tmp[656586]))
    if call_tmp[656591]
    {
      (517605 'move' ret[517600](517604 'deref' 1))
      gotoReturn _end_!=[517598] _end_!=[517598]
    }
    {
      unknown call_tmp[656598] "expr temp" "maybe param" "maybe type" "temp"
      (656601 'move' call_tmp[656598](127710 call _value _mt[243] d1[127670]))
      unknown call_tmp[656605] "expr temp" "maybe param" "maybe type" "temp"
      (656608 'move' call_tmp[656605](127714 call _value _mt[243] d2[127676]))
      unknown call_tmp[656610] "expr temp" "maybe param" "maybe type" "temp"
      (656613 'move' call_tmp[656610](127717 call == call_tmp[656598] call_tmp[656605]))
      unknown call_tmp[656615] "expr temp" "maybe param" "maybe type" "temp"
      (656618 'move' call_tmp[656615](127807 call _cond_test call_tmp[656610]))
      if call_tmp[656615]
      {
        (517610 'move' ret[517600](517609 'deref' 0))
        gotoReturn _end_!=[517598] _end_!=[517598]
      }
      {
        {
          unknown i[127760] "dead at end of block" "insert auto destroy"
          (542982 'init var' i[127760] 0)
          (480056 'end of statement')
          unknown tmp[127761] "maybe param" "temp"
          unknown call_tmp[656622] "expr temp" "maybe param" "maybe type" "temp"
          (656625 'move' call_tmp[656622](127725 call _value _mt[243] d1[127670]))
          unknown call_tmp[656629] "expr temp" "maybe param" "maybe type" "temp"
          (656632 'move' call_tmp[656629](127728 call rank _mt[243] call_tmp[656622]))
          unknown call_tmp[656634] "expr temp" "maybe param" "maybe type" "temp"
          (656637 'move' call_tmp[656634](127732 call - call_tmp[656629] 1))
          (127773 'move' tmp[127761](127771 call chpl_compute_low_param_loop_bound 0 call_tmp[656634]))
          unknown tmp[127762] "maybe param" "temp"
          unknown call_tmp[656641] "expr temp" "maybe param" "maybe type" "temp"
          (656644 'move' call_tmp[656641](127782 call _value _mt[243] d1[127670]))
          unknown call_tmp[656648] "expr temp" "maybe param" "maybe type" "temp"
          (656651 'move' call_tmp[656648](127780 call rank _mt[243] call_tmp[656641]))
          unknown call_tmp[656653] "expr temp" "maybe param" "maybe type" "temp"
          (656656 'move' call_tmp[656653](127778 call - call_tmp[656648] 1))
          (127789 'move' tmp[127762](127787 call chpl_compute_high_param_loop_bound 0 call_tmp[656653]))
          unknown tmp[127763] "maybe param" "temp"
          (127792 'move' tmp[127763] 1)
          ParamForLoop[127794]
          { i[127760] tmp[127761] tmp[127762] tmp[127763]
            unknown call_tmp[656660] "expr temp" "maybe param" "maybe type" "temp"
            (656663 'move' call_tmp[656660](127742 call(127737 call (partial) dim _mt[243] d1[127670]) i[127760]))
            unknown call_tmp[656667] "expr temp" "maybe param" "maybe type" "temp"
            (656670 'move' call_tmp[656667](127749 call(127744 call (partial) dim _mt[243] d2[127676]) i[127760]))
            unknown call_tmp[656672] "expr temp" "maybe param" "maybe type" "temp"
            (656675 'move' call_tmp[656672](127750 call != call_tmp[656660] call_tmp[656667]))
            unknown call_tmp[656677] "expr temp" "maybe param" "maybe type" "temp"
            (656680 'move' call_tmp[656677](127755 call _cond_test call_tmp[656672]))
            if call_tmp[656677]
            {
              (517615 'move' ret[517600](517614 'deref' 1))
              gotoReturn _end_!=[517598] _end_!=[517598]
            }
          }
          label _unused_continueLabel[127765]
          label _breakLabel[127764]
        }
        (517620 'move' ret[517600](517619 'deref' 0))
        gotoReturn _end_!=[517598] _end_!=[517598]
      }
    }
    label _end_!=[517598]
    (517602 return ret[517600])
  }
  where {
    unknown tmp[425284] "maybe param" "temp"
    (425295 'move' tmp[425284](127682 call isRectangularDom d1[127670]))
    unknown call_tmp[656682] "expr temp" "maybe param" "maybe type" "temp"
    (656685 'move' call_tmp[656682](425297 call _cond_invalid tmp[425284]))
    if call_tmp[656682]
    {
      (425300 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565956] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565957] "maybe param" "temp"
    unknown call_tmp[656687] "expr temp" "maybe param" "maybe type" "temp"
    (656690 'move' call_tmp[656687](425285 call isTrue tmp[425284]))
    (565962 'move' tmp[565957](565960 call _cond_test call_tmp[656687]))
    if tmp[565957]
    {
      unknown tmp[565964] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656692] "expr temp" "maybe param" "maybe type" "temp"
      (656695 'move' call_tmp[656692](127686 call isRectangularDom d2[127676]))
      (565966 'move' tmp[565964](425288 call isTrue call_tmp[656692]))
      (565971 'move' tmp[565956](565968 '_paramFoldLogical' tmp[565957] tmp[565964]))
    }
    {
      (565976 'move' tmp[565956](565973 '_paramFoldLogical' tmp[565957] 0))
    }
    (748351 call chpl_statementLevelSymbol tmp[565956])
  }
  function ==[127826](arg d1[127823]:_domain[125908](?), arg d2[127829]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517626] "RVV" "temp"
    unknown call_tmp[656699] "expr temp" "maybe param" "maybe type" "temp"
    (656702 'move' call_tmp[656699](127843 call _value _mt[243] d1[127823]))
    unknown call_tmp[656706] "expr temp" "maybe param" "maybe type" "temp"
    (656709 'move' call_tmp[656706](127847 call _value _mt[243] d2[127829]))
    unknown call_tmp[656711] "expr temp" "maybe param" "maybe type" "temp"
    (656714 'move' call_tmp[656711](127850 call == call_tmp[656699] call_tmp[656706]))
    unknown call_tmp[656716] "expr temp" "maybe param" "maybe type" "temp"
    (656719 'move' call_tmp[656716](127855 call _cond_test call_tmp[656711]))
    if call_tmp[656716]
    {
      (517631 'move' ret[517626](517630 'deref' 1))
      gotoReturn _end_==[517624] _end_==[517624]
    }
    unknown call_tmp[656723] "expr temp" "maybe param" "maybe type" "temp"
    (656726 'move' call_tmp[656723](127862 call size _mt[243] d1[127823]))
    unknown call_tmp[656730] "expr temp" "maybe param" "maybe type" "temp"
    (656733 'move' call_tmp[656730](127866 call size _mt[243] d2[127829]))
    unknown call_tmp[656735] "expr temp" "maybe param" "maybe type" "temp"
    (656738 'move' call_tmp[656735](127869 call != call_tmp[656723] call_tmp[656730]))
    unknown call_tmp[656740] "expr temp" "maybe param" "maybe type" "temp"
    (656743 'move' call_tmp[656740](127874 call _cond_test call_tmp[656735]))
    if call_tmp[656740]
    {
      (517636 'move' ret[517626](517635 'deref' 0))
      gotoReturn _end_==[517624] _end_==[517624]
    }
    {
      unknown _indexOfInterest[127898] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127899] "expr temp" "temp"
      (127908 'move' _iterator[127899](127906 call _getIterator d1[127823]))
      Defer
      {
        {
          (127924 call _freeIterator _iterator[127899])
        }
      }
      { scopeless type
        (127913 'move' _indexOfInterest[127898](127910 call iteratorIndex _iterator[127899]))
      }
      ForLoop[127900]
      {
        unknown idx[127917] "index var" "insert auto destroy"
        (480062 'end of statement')
        (127919 'move' idx[127917] _indexOfInterest[127898])
        (480063 'end of statement' idx[127917])
        unknown call_tmp[656747] "expr temp" "maybe param" "maybe type" "temp"
        (656750 'move' call_tmp[656747](127887 call(127882 call (partial) contains _mt[243] d2[127829]) idx[127917]))
        unknown call_tmp[656752] "expr temp" "maybe param" "maybe type" "temp"
        (656755 'move' call_tmp[656752](127888 call ! call_tmp[656747]))
        unknown call_tmp[656757] "expr temp" "maybe param" "maybe type" "temp"
        (656760 'move' call_tmp[656757](127893 call _cond_test call_tmp[656752]))
        if call_tmp[656757]
        {
          (517641 'move' ret[517626](517640 'deref' 0))
          gotoReturn _end_==[517624] _end_==[517624]
        }
        label _continueLabel[127903]
        _indexOfInterest[127898]
        _iterator[127899]
      }
      label _breakLabel[127904]
    }
    (517646 'move' ret[517626](517645 'deref' 1))
    label _end_==[517624]
    (517628 return ret[517626])
  }
  where {
    unknown tmp[425305] "maybe param" "temp"
    (425316 'move' tmp[425305](127835 call isAssociativeDom d1[127823]))
    unknown call_tmp[656762] "expr temp" "maybe param" "maybe type" "temp"
    (656765 'move' call_tmp[656762](425318 call _cond_invalid tmp[425305]))
    if call_tmp[656762]
    {
      (425321 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565983] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565984] "maybe param" "temp"
    unknown call_tmp[656767] "expr temp" "maybe param" "maybe type" "temp"
    (656770 'move' call_tmp[656767](425306 call isTrue tmp[425305]))
    (565989 'move' tmp[565984](565987 call _cond_test call_tmp[656767]))
    if tmp[565984]
    {
      unknown tmp[565991] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656772] "expr temp" "maybe param" "maybe type" "temp"
      (656775 'move' call_tmp[656772](127839 call isAssociativeDom d2[127829]))
      (565993 'move' tmp[565991](425309 call isTrue call_tmp[656772]))
      (565998 'move' tmp[565983](565995 '_paramFoldLogical' tmp[565984] tmp[565991]))
    }
    {
      (566003 'move' tmp[565983](566000 '_paramFoldLogical' tmp[565984] 0))
    }
    (748353 call chpl_statementLevelSymbol tmp[565983])
  }
  function !=[127943](arg d1[127940]:_domain[125908](?), arg d2[127946]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517650] "RVV" "temp"
    unknown call_tmp[656779] "expr temp" "maybe param" "maybe type" "temp"
    (656782 'move' call_tmp[656779](127960 call _value _mt[243] d1[127940]))
    unknown call_tmp[656786] "expr temp" "maybe param" "maybe type" "temp"
    (656789 'move' call_tmp[656786](127964 call _value _mt[243] d2[127946]))
    unknown call_tmp[656791] "expr temp" "maybe param" "maybe type" "temp"
    (656794 'move' call_tmp[656791](127967 call == call_tmp[656779] call_tmp[656786]))
    unknown call_tmp[656796] "expr temp" "maybe param" "maybe type" "temp"
    (656799 'move' call_tmp[656796](127972 call _cond_test call_tmp[656791]))
    if call_tmp[656796]
    {
      (517655 'move' ret[517650](517654 'deref' 0))
      gotoReturn _end_!=[517648] _end_!=[517648]
    }
    unknown call_tmp[656803] "expr temp" "maybe param" "maybe type" "temp"
    (656806 'move' call_tmp[656803](127979 call size _mt[243] d1[127940]))
    unknown call_tmp[656810] "expr temp" "maybe param" "maybe type" "temp"
    (656813 'move' call_tmp[656810](127983 call size _mt[243] d2[127946]))
    unknown call_tmp[656815] "expr temp" "maybe param" "maybe type" "temp"
    (656818 'move' call_tmp[656815](127986 call != call_tmp[656803] call_tmp[656810]))
    unknown call_tmp[656820] "expr temp" "maybe param" "maybe type" "temp"
    (656823 'move' call_tmp[656820](127991 call _cond_test call_tmp[656815]))
    if call_tmp[656820]
    {
      (517660 'move' ret[517650](517659 'deref' 1))
      gotoReturn _end_!=[517648] _end_!=[517648]
    }
    {
      unknown _indexOfInterest[128015] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128016] "expr temp" "temp"
      (128025 'move' _iterator[128016](128023 call _getIterator d1[127940]))
      Defer
      {
        {
          (128041 call _freeIterator _iterator[128016])
        }
      }
      { scopeless type
        (128030 'move' _indexOfInterest[128015](128027 call iteratorIndex _iterator[128016]))
      }
      ForLoop[128017]
      {
        unknown idx[128034] "index var" "insert auto destroy"
        (480070 'end of statement')
        (128036 'move' idx[128034] _indexOfInterest[128015])
        (480071 'end of statement' idx[128034])
        unknown call_tmp[656827] "expr temp" "maybe param" "maybe type" "temp"
        (656830 'move' call_tmp[656827](128004 call(127999 call (partial) contains _mt[243] d2[127946]) idx[128034]))
        unknown call_tmp[656832] "expr temp" "maybe param" "maybe type" "temp"
        (656835 'move' call_tmp[656832](128005 call ! call_tmp[656827]))
        unknown call_tmp[656837] "expr temp" "maybe param" "maybe type" "temp"
        (656840 'move' call_tmp[656837](128010 call _cond_test call_tmp[656832]))
        if call_tmp[656837]
        {
          (517665 'move' ret[517650](517664 'deref' 1))
          gotoReturn _end_!=[517648] _end_!=[517648]
        }
        label _continueLabel[128020]
        _indexOfInterest[128015]
        _iterator[128016]
      }
      label _breakLabel[128021]
    }
    (517670 'move' ret[517650](517669 'deref' 0))
    label _end_!=[517648]
    (517652 return ret[517650])
  }
  where {
    unknown tmp[425326] "maybe param" "temp"
    (425337 'move' tmp[425326](127952 call isAssociativeDom d1[127940]))
    unknown call_tmp[656842] "expr temp" "maybe param" "maybe type" "temp"
    (656845 'move' call_tmp[656842](425339 call _cond_invalid tmp[425326]))
    if call_tmp[656842]
    {
      (425342 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566010] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566011] "maybe param" "temp"
    unknown call_tmp[656847] "expr temp" "maybe param" "maybe type" "temp"
    (656850 'move' call_tmp[656847](425327 call isTrue tmp[425326]))
    (566016 'move' tmp[566011](566014 call _cond_test call_tmp[656847]))
    if tmp[566011]
    {
      unknown tmp[566018] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656852] "expr temp" "maybe param" "maybe type" "temp"
      (656855 'move' call_tmp[656852](127956 call isAssociativeDom d2[127946]))
      (566020 'move' tmp[566018](425330 call isTrue call_tmp[656852]))
      (566025 'move' tmp[566010](566022 '_paramFoldLogical' tmp[566011] tmp[566018]))
    }
    {
      (566030 'move' tmp[566010](566027 '_paramFoldLogical' tmp[566011] 0))
    }
    (748355 call chpl_statementLevelSymbol tmp[566010])
  }
  function ==[128060](arg d1[128057]:_domain[125908](?), arg d2[128063]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517674] "RVV" "temp"
    unknown call_tmp[656859] "expr temp" "maybe param" "maybe type" "temp"
    (656862 'move' call_tmp[656859](128077 call _value _mt[243] d1[128057]))
    unknown call_tmp[656866] "expr temp" "maybe param" "maybe type" "temp"
    (656869 'move' call_tmp[656866](128081 call _value _mt[243] d2[128063]))
    unknown call_tmp[656871] "expr temp" "maybe param" "maybe type" "temp"
    (656874 'move' call_tmp[656871](128084 call == call_tmp[656859] call_tmp[656866]))
    unknown call_tmp[656876] "expr temp" "maybe param" "maybe type" "temp"
    (656879 'move' call_tmp[656876](128089 call _cond_test call_tmp[656871]))
    if call_tmp[656876]
    {
      (517679 'move' ret[517674](517678 'deref' 1))
      gotoReturn _end_==[517672] _end_==[517672]
    }
    unknown call_tmp[656883] "expr temp" "maybe param" "maybe type" "temp"
    (656886 'move' call_tmp[656883](128096 call size _mt[243] d1[128057]))
    unknown call_tmp[656890] "expr temp" "maybe param" "maybe type" "temp"
    (656893 'move' call_tmp[656890](128100 call size _mt[243] d2[128063]))
    unknown call_tmp[656895] "expr temp" "maybe param" "maybe type" "temp"
    (656898 'move' call_tmp[656895](128103 call != call_tmp[656883] call_tmp[656890]))
    unknown call_tmp[656900] "expr temp" "maybe param" "maybe type" "temp"
    (656903 'move' call_tmp[656900](128108 call _cond_test call_tmp[656895]))
    if call_tmp[656900]
    {
      (517684 'move' ret[517674](517683 'deref' 0))
      gotoReturn _end_==[517672] _end_==[517672]
    }
    unknown call_tmp[656907] "expr temp" "maybe param" "maybe type" "temp"
    (656910 'move' call_tmp[656907](128114 call _value _mt[243] d1[128057]))
    unknown call_tmp[656914] "expr temp" "maybe param" "maybe type" "temp"
    (656917 'move' call_tmp[656914](128117 call parentDom _mt[243] call_tmp[656907]))
    unknown call_tmp[656921] "expr temp" "maybe param" "maybe type" "temp"
    (656924 'move' call_tmp[656921](128121 call _value _mt[243] d2[128063]))
    unknown call_tmp[656928] "expr temp" "maybe param" "maybe type" "temp"
    (656931 'move' call_tmp[656928](128124 call parentDom _mt[243] call_tmp[656921]))
    unknown call_tmp[656933] "expr temp" "maybe param" "maybe type" "temp"
    (656936 'move' call_tmp[656933](128127 call != call_tmp[656914] call_tmp[656928]))
    unknown call_tmp[656938] "expr temp" "maybe param" "maybe type" "temp"
    (656941 'move' call_tmp[656938](128132 call _cond_test call_tmp[656933]))
    if call_tmp[656938]
    {
      (517689 'move' ret[517674](517688 'deref' 0))
      gotoReturn _end_==[517672] _end_==[517672]
    }
    {
      unknown _indexOfInterest[128156] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128157] "expr temp" "temp"
      (128166 'move' _iterator[128157](128164 call _getIterator d1[128057]))
      Defer
      {
        {
          (128182 call _freeIterator _iterator[128157])
        }
      }
      { scopeless type
        (128171 'move' _indexOfInterest[128156](128168 call iteratorIndex _iterator[128157]))
      }
      ForLoop[128158]
      {
        unknown idx[128175] "index var" "insert auto destroy"
        (480079 'end of statement')
        (128177 'move' idx[128175] _indexOfInterest[128156])
        (480080 'end of statement' idx[128175])
        unknown call_tmp[656945] "expr temp" "maybe param" "maybe type" "temp"
        (656948 'move' call_tmp[656945](128145 call(128140 call (partial) contains _mt[243] d2[128063]) idx[128175]))
        unknown call_tmp[656950] "expr temp" "maybe param" "maybe type" "temp"
        (656953 'move' call_tmp[656950](128146 call ! call_tmp[656945]))
        unknown call_tmp[656955] "expr temp" "maybe param" "maybe type" "temp"
        (656958 'move' call_tmp[656955](128151 call _cond_test call_tmp[656950]))
        if call_tmp[656955]
        {
          (517694 'move' ret[517674](517693 'deref' 0))
          gotoReturn _end_==[517672] _end_==[517672]
        }
        label _continueLabel[128161]
        _indexOfInterest[128156]
        _iterator[128157]
      }
      label _breakLabel[128162]
    }
    (517699 'move' ret[517674](517698 'deref' 1))
    label _end_==[517672]
    (517676 return ret[517674])
  }
  where {
    unknown tmp[425347] "maybe param" "temp"
    (425358 'move' tmp[425347](128069 call isSparseDom d1[128057]))
    unknown call_tmp[656960] "expr temp" "maybe param" "maybe type" "temp"
    (656963 'move' call_tmp[656960](425360 call _cond_invalid tmp[425347]))
    if call_tmp[656960]
    {
      (425363 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566037] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566038] "maybe param" "temp"
    unknown call_tmp[656965] "expr temp" "maybe param" "maybe type" "temp"
    (656968 'move' call_tmp[656965](425348 call isTrue tmp[425347]))
    (566043 'move' tmp[566038](566041 call _cond_test call_tmp[656965]))
    if tmp[566038]
    {
      unknown tmp[566045] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656970] "expr temp" "maybe param" "maybe type" "temp"
      (656973 'move' call_tmp[656970](128073 call isSparseDom d2[128063]))
      (566047 'move' tmp[566045](425351 call isTrue call_tmp[656970]))
      (566052 'move' tmp[566037](566049 '_paramFoldLogical' tmp[566038] tmp[566045]))
    }
    {
      (566057 'move' tmp[566037](566054 '_paramFoldLogical' tmp[566038] 0))
    }
    (748357 call chpl_statementLevelSymbol tmp[566037])
  }
  function !=[128201](arg d1[128198]:_domain[125908](?), arg d2[128204]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[517703] "RVV" "temp"
    unknown call_tmp[656977] "expr temp" "maybe param" "maybe type" "temp"
    (656980 'move' call_tmp[656977](128218 call _value _mt[243] d1[128198]))
    unknown call_tmp[656984] "expr temp" "maybe param" "maybe type" "temp"
    (656987 'move' call_tmp[656984](128222 call _value _mt[243] d2[128204]))
    unknown call_tmp[656989] "expr temp" "maybe param" "maybe type" "temp"
    (656992 'move' call_tmp[656989](128225 call == call_tmp[656977] call_tmp[656984]))
    unknown call_tmp[656994] "expr temp" "maybe param" "maybe type" "temp"
    (656997 'move' call_tmp[656994](128230 call _cond_test call_tmp[656989]))
    if call_tmp[656994]
    {
      (517708 'move' ret[517703](517707 'deref' 0))
      gotoReturn _end_!=[517701] _end_!=[517701]
    }
    unknown call_tmp[657001] "expr temp" "maybe param" "maybe type" "temp"
    (657004 'move' call_tmp[657001](128237 call size _mt[243] d1[128198]))
    unknown call_tmp[657008] "expr temp" "maybe param" "maybe type" "temp"
    (657011 'move' call_tmp[657008](128241 call size _mt[243] d2[128204]))
    unknown call_tmp[657013] "expr temp" "maybe param" "maybe type" "temp"
    (657016 'move' call_tmp[657013](128244 call != call_tmp[657001] call_tmp[657008]))
    unknown call_tmp[657018] "expr temp" "maybe param" "maybe type" "temp"
    (657021 'move' call_tmp[657018](128249 call _cond_test call_tmp[657013]))
    if call_tmp[657018]
    {
      (517713 'move' ret[517703](517712 'deref' 1))
      gotoReturn _end_!=[517701] _end_!=[517701]
    }
    unknown call_tmp[657025] "expr temp" "maybe param" "maybe type" "temp"
    (657028 'move' call_tmp[657025](128255 call _value _mt[243] d1[128198]))
    unknown call_tmp[657032] "expr temp" "maybe param" "maybe type" "temp"
    (657035 'move' call_tmp[657032](128258 call parentDom _mt[243] call_tmp[657025]))
    unknown call_tmp[657039] "expr temp" "maybe param" "maybe type" "temp"
    (657042 'move' call_tmp[657039](128262 call _value _mt[243] d2[128204]))
    unknown call_tmp[657046] "expr temp" "maybe param" "maybe type" "temp"
    (657049 'move' call_tmp[657046](128265 call parentDom _mt[243] call_tmp[657039]))
    unknown call_tmp[657051] "expr temp" "maybe param" "maybe type" "temp"
    (657054 'move' call_tmp[657051](128268 call != call_tmp[657032] call_tmp[657046]))
    unknown call_tmp[657056] "expr temp" "maybe param" "maybe type" "temp"
    (657059 'move' call_tmp[657056](128273 call _cond_test call_tmp[657051]))
    if call_tmp[657056]
    {
      (517718 'move' ret[517703](517717 'deref' 1))
      gotoReturn _end_!=[517701] _end_!=[517701]
    }
    {
      unknown _indexOfInterest[128297] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128298] "expr temp" "temp"
      (128307 'move' _iterator[128298](128305 call _getIterator d1[128198]))
      Defer
      {
        {
          (128323 call _freeIterator _iterator[128298])
        }
      }
      { scopeless type
        (128312 'move' _indexOfInterest[128297](128309 call iteratorIndex _iterator[128298]))
      }
      ForLoop[128299]
      {
        unknown idx[128316] "index var" "insert auto destroy"
        (480088 'end of statement')
        (128318 'move' idx[128316] _indexOfInterest[128297])
        (480089 'end of statement' idx[128316])
        unknown call_tmp[657063] "expr temp" "maybe param" "maybe type" "temp"
        (657066 'move' call_tmp[657063](128286 call(128281 call (partial) contains _mt[243] d2[128204]) idx[128316]))
        unknown call_tmp[657068] "expr temp" "maybe param" "maybe type" "temp"
        (657071 'move' call_tmp[657068](128287 call ! call_tmp[657063]))
        unknown call_tmp[657073] "expr temp" "maybe param" "maybe type" "temp"
        (657076 'move' call_tmp[657073](128292 call _cond_test call_tmp[657068]))
        if call_tmp[657073]
        {
          (517723 'move' ret[517703](517722 'deref' 1))
          gotoReturn _end_!=[517701] _end_!=[517701]
        }
        label _continueLabel[128302]
        _indexOfInterest[128297]
        _iterator[128298]
      }
      label _breakLabel[128303]
    }
    (517728 'move' ret[517703](517727 'deref' 0))
    label _end_!=[517701]
    (517705 return ret[517703])
  }
  where {
    unknown tmp[425368] "maybe param" "temp"
    (425379 'move' tmp[425368](128210 call isSparseDom d1[128198]))
    unknown call_tmp[657078] "expr temp" "maybe param" "maybe type" "temp"
    (657081 'move' call_tmp[657078](425381 call _cond_invalid tmp[425368]))
    if call_tmp[657078]
    {
      (425384 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566064] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566065] "maybe param" "temp"
    unknown call_tmp[657083] "expr temp" "maybe param" "maybe type" "temp"
    (657086 'move' call_tmp[657083](425369 call isTrue tmp[425368]))
    (566070 'move' tmp[566065](566068 call _cond_test call_tmp[657083]))
    if tmp[566065]
    {
      unknown tmp[566072] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657088] "expr temp" "maybe param" "maybe type" "temp"
      (657091 'move' call_tmp[657088](128214 call isSparseDom d2[128204]))
      (566074 'move' tmp[566072](425372 call isTrue call_tmp[657088]))
      (566079 'move' tmp[566064](566076 '_paramFoldLogical' tmp[566065] tmp[566072]))
    }
    {
      (566084 'move' tmp[566064](566081 '_paramFoldLogical' tmp[566065] 0))
    }
    (748359 call chpl_statementLevelSymbol tmp[566064])
  }
  function ==[128342](arg d1[128339]:_domain[125908](?), arg d2[128345]:_domain[125908](?)) param : _unknown[51] "inline"
  {
    unknown ret[517732] "RVV" "param" "temp"
    (517737 'move' ret[517732](517736 'deref' 0))
    (517734 return ret[517732])
  }
  function !=[128360](arg d1[128357]:_domain[125908](?), arg d2[128363]:_domain[125908](?)) param : _unknown[51] "inline"
  {
    unknown ret[517741] "RVV" "param" "temp"
    (517746 'move' ret[517741](517745 'deref' 1))
    (517743 return ret[517741])
  }
  function shouldReturnRvalueByConstRef[128376](arg t[128374]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517750] "RVV" "param" "temp"
    (517755 'move' ret[517750](517754 'deref' 1))
    (517752 return ret[517750])
  }
  function shouldReturnRvalueByValue[128388](arg t[128386]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517759] "RVV" "param" "temp"
    unknown call_tmp[657093] "expr temp" "maybe param" "maybe type" "temp"
    (657096 'move' call_tmp[657093](128391 call ! PODValAccess[113743]))
    unknown call_tmp[657098] "expr temp" "maybe param" "maybe type" "temp"
    (657101 'move' call_tmp[657098](128396 call _cond_test call_tmp[657093]))
    if call_tmp[657098]
    {
      (517764 'move' ret[517759](517763 'deref' 0))
      gotoReturn _end_shouldReturnRvalueByValue[517757] _end_shouldReturnRvalueByValue[517757]
    }
    unknown call_tmp[657103] "expr temp" "maybe param" "maybe type" "temp"
    (657106 'move' call_tmp[657103](128405 call isPODType t[128386]))
    unknown call_tmp[657108] "expr temp" "maybe param" "maybe type" "temp"
    (657111 'move' call_tmp[657108](128409 call _cond_test call_tmp[657103]))
    if call_tmp[657108]
    {
      (517769 'move' ret[517759](517768 'deref' 1))
      gotoReturn _end_shouldReturnRvalueByValue[517757] _end_shouldReturnRvalueByValue[517757]
    }
    (517774 'move' ret[517759](517773 'deref' 0))
    label _end_shouldReturnRvalueByValue[517757]
    (517761 return ret[517759])
  }
  function _array[133594](?).chpl__serialize[128436](arg _mt[133598]:_MT[238], arg this[133596]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517778] "RVV" "temp"
    unknown call_tmp[657115] "expr temp" "maybe param" "maybe type" "temp"
    (657118 'move' call_tmp[657115](359767 call _instance _mt[243] this[133596]))
    unknown call_tmp[657122] "expr temp" "maybe param" "maybe type" "temp"
    (657125 'move' call_tmp[657122](128451 call(128447 call (partial) chpl__serialize _mt[243] call_tmp[657115])))
    (517783 'move' ret[517778](517782 'deref' call_tmp[657122]))
    (517780 return ret[517778])
  }
  where {
    unknown call_tmp[657129] "expr temp" "maybe param" "maybe type" "temp"
    (657132 'move' call_tmp[657129](359762 call _instance _mt[243] this[133596]))
    (128445 call(128441 call (partial) chpl__rvfMe _mt[243] call_tmp[657129]))
  }
  function _array[133594](?).chpl__deserialize[128462](arg _mt[133602]:_MT[238], arg this[133600]:_array[133594](?), arg data[128460]:_any[178](?)) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[517787] "RVV" "temp"
    unknown call_tmp[657136] "expr temp" "maybe param" "maybe type" "temp"
    (657139 'move' call_tmp[657136](128469 'static field type' this[133600] "_instance"))
    unknown call_tmp[657141] "expr temp" "maybe param" "maybe type" "temp"
    (657144 'move' call_tmp[657141](128471 call _to_borrowed call_tmp[657136]))
    unknown call_tmp[657148] "maybe param" "maybe type" "temp"
    (657151 'move' call_tmp[657148](128477 call(128472 call (partial) chpl__deserialize _mt[243] call_tmp[657141]) data[128460]))
    unknown arrinst[128478] "dead at end of block" "insert auto destroy"
    (542984 'init var' arrinst[128478] call_tmp[657148])
    (128481 'end of statement')
    unknown call_tmp[657153] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (657156 'move' call_tmp[657153](747941 'new' _array[133594](?) nullPid[113718] arrinst[128478](_unowned = 1)))
    (517792 'move' ret[517787](517791 'deref' call_tmp[657153]))
    gotoReturn _end_chpl__deserialize[517785] _end_chpl__deserialize[517785]
    (480100 'end of statement' arrinst[128478])
    label _end_chpl__deserialize[517785]
    (517789 return ret[517787])
  }
  function _array[133594](?).chpl__promotionType[128497](arg _mt[133606]:_MT[238], arg this[133604]:_array[133594](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[517798] "RVV" "temp" "type variable"
    unknown call_tmp[657160] "expr temp" "maybe param" "maybe type" "temp"
    (657163 'move' call_tmp[657160](359771 call _value _mt[243] this[133604]))
    unknown call_tmp[657167] "expr temp" "maybe param" "maybe type" "temp"
    (657170 'move' call_tmp[657167](128500 call eltType _mt[243] call_tmp[657160]))
    (517803 'move' ret[517798](517802 'deref' call_tmp[657167]))
    (517800 return ret[517798])
  }
  function _array[133594](?)._value[128510](arg _mt[133610]:_MT[238], arg this[133608]:_array[133594](?)) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    unknown ret[517807] "RVV" "temp"
    unknown call_tmp[657174] "expr temp" "maybe param" "maybe type" "temp"
    (657177 'move' call_tmp[657174](383775 call _instance _mt[243] this[133608]))
    unknown call_tmp[657179] "expr temp" "maybe param" "maybe type" "temp"
    (657182 'move' call_tmp[657179](128515 call _isPrivatized call_tmp[657174]))
    unknown call_tmp[657184] "expr temp" "maybe param" "maybe type" "temp"
    (657187 'move' call_tmp[657184](128529 call _cond_test call_tmp[657179]))
    if call_tmp[657184]
    {
      { scopeless type
        unknown call_type_tmp[492221] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[657191] "expr temp" "maybe param" "maybe type" "temp"
        (657194 'move' call_tmp[657191](383780 call _instance _mt[243] this[133608]))
        (492225 'move' call_type_tmp[492221](128518 'typeof' call_tmp[657191]))
      }
      unknown call_tmp[657198] "expr temp" "maybe param" "maybe type" "temp"
      (657201 'move' call_tmp[657198](383785 call _pid _mt[243] this[133608]))
      unknown call_tmp[657203] "expr temp" "maybe param" "maybe type" "temp"
      (657206 'move' call_tmp[657203](128521 call chpl_getPrivatizedCopy call_type_tmp[492221] call_tmp[657198]))
      (517812 'move' ret[517807](517811 'deref' call_tmp[657203]))
      gotoReturn _end__value[517805] _end__value[517805]
    }
    {
      unknown call_tmp[657210] "expr temp" "maybe param" "maybe type" "temp"
      (657213 'move' call_tmp[657210](383790 call _instance _mt[243] this[133608]))
      (517817 'move' ret[517807](517816 'deref' call_tmp[657210]))
      gotoReturn _end__value[517805] _end__value[517805]
    }
    label _end__value[517805]
    (517809 return ret[517807])
  }
  function _array[133594](?).chpl_forwarding_expr6__value[128543](arg _mt[133614]:_MT[238], arg this[133612]:_array[133594](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[517823] "RVV" "temp"
    (517827 'move' ret[517823](383794 call _value _mt[243] this[133612]))
    (517825 return ret[517823])
  }
  function _array[133594](?).deinit[128551](arg _mt[133618]:_MT[238], arg this[133616]:_array[133594](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (128556 call _do_destroy_array this[133616])
    (517829 return _void[55])
  }
  function _array[133594](?).eltType[128563](arg _mt[133622]:_MT[238], arg this[133620]:_array[133594](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517833] "RVV" "temp" "type variable"
    unknown call_tmp[657219] "expr temp" "maybe param" "maybe type" "temp"
    (657222 'move' call_tmp[657219](359775 call _value _mt[243] this[133620]))
    unknown call_tmp[657226] "expr temp" "maybe param" "maybe type" "temp"
    (657229 'move' call_tmp[657226](128566 call eltType _mt[243] call_tmp[657219]))
    (517838 'move' ret[517833](517837 'deref' call_tmp[657226]))
    (517835 return ret[517833])
  }
  function _array[133594](?).idxType[128576](arg _mt[133626]:_MT[238], arg this[133624]:_array[133594](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517842] "RVV" "temp" "type variable"
    unknown call_tmp[657233] "expr temp" "maybe param" "maybe type" "temp"
    (657236 'move' call_tmp[657233](359779 call _value _mt[243] this[133624]))
    unknown call_tmp[657240] "expr temp" "maybe param" "maybe type" "temp"
    (657243 'move' call_tmp[657240](128579 call idxType _mt[243] call_tmp[657233]))
    (517847 'move' ret[517842](517846 'deref' call_tmp[657240]))
    (517844 return ret[517842])
  }
  function _array[133594](?)._dom[128589](arg _mt[133630]:_MT[238], arg this[133628]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517851] "RVV" "temp"
    unknown call_tmp[657247] "expr temp" "maybe param" "maybe type" "temp"
    (657250 'move' call_tmp[657247](359783 call _value _mt[243] this[133628]))
    unknown call_tmp[657254] "expr temp" "maybe param" "maybe type" "temp"
    (657257 'move' call_tmp[657254](128593 call dom _mt[243] call_tmp[657247]))
    unknown call_tmp[657259] "expr temp" "maybe param" "maybe type" "temp"
    (657262 'move' call_tmp[657259](128597 call _getDomain call_tmp[657254]))
    (517856 'move' ret[517851](517855 'deref' call_tmp[657259]))
    (517853 return ret[517851])
  }
  function _array[133594](?).rank[128605](arg _mt[133634]:_MT[238], arg this[133632]:_array[133594](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517860] "RVV" "param" "temp"
    unknown call_tmp[657266] "expr temp" "maybe param" "maybe type" "temp"
    (657269 'move' call_tmp[657266](128608 call _dom _mt[243] this[133632]))
    unknown call_tmp[657273] "expr temp" "maybe param" "maybe type" "temp"
    (657276 'move' call_tmp[657273](128611 call rank _mt[243] call_tmp[657266]))
    (517865 'move' ret[517860](517864 'deref' call_tmp[657273]))
    (517862 return ret[517860])
  }
  function _array[133594](?).indices[128621](arg _mt[133638]:_MT[238], arg this[133636]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517869] "RVV" "temp"
    unknown call_tmp[657280] "expr temp" "maybe param" "maybe type" "temp"
    (657283 'move' call_tmp[657280](383799 call _dom _mt[243] this[133636]))
    (517874 'move' ret[517869](517873 'deref' call_tmp[657280]))
    (517871 return ret[517869])
  }
  function _array[133594](?).checkAccess[128633](arg _mt[133642]:_MT[238], arg this[133640]:_array[133594](?), arg indices[128631]:_any[178](?), arg value[128635]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657285] "expr temp" "maybe param" "maybe type" "temp"
    (657288 'move' call_tmp[657285](128640 call isRectangularArr this[133640]))
    unknown call_tmp[657290] "expr temp" "maybe param" "maybe type" "temp"
    (657293 'move' call_tmp[657290](129156 call _cond_test call_tmp[657285]))
    if call_tmp[657290]
    {
      unknown call_tmp[657297] "expr temp" "maybe param" "maybe type" "temp"
      (657300 'move' call_tmp[657297](128649 call(128644 call (partial) dsiBoundsCheck _mt[243] value[128635]) indices[128631]))
      unknown call_tmp[657302] "expr temp" "maybe param" "maybe type" "temp"
      (657305 'move' call_tmp[657302](128650 call ! call_tmp[657297]))
      unknown call_tmp[657307] "expr temp" "maybe param" "maybe type" "temp"
      (657310 'move' call_tmp[657307](129151 call _cond_test call_tmp[657302]))
      if call_tmp[657307]
      {
        unknown call_tmp[657314] "expr temp" "maybe param" "maybe type" "temp"
        (657317 'move' call_tmp[657314](383805 call rank _mt[243] this[133640]))
        unknown call_tmp[657319] "expr temp" "maybe param" "maybe type" "temp"
        (657322 'move' call_tmp[657319](128654 call == call_tmp[657314] 1))
        unknown call_tmp[657324] "expr temp" "maybe param" "maybe type" "temp"
        (657327 'move' call_tmp[657324](129146 call _cond_test call_tmp[657319]))
        if call_tmp[657324]
        {
          unknown call_tmp[657329] "expr temp" "maybe param" "maybe type" "temp"
          (657332 'move' call_tmp[657329](128695 call indices[128631] 0))
          unknown call_tmp[657336] "expr temp" "maybe param" "maybe type" "temp"
          (657339 'move' call_tmp[657336](128714 call dom _mt[243] value[128635]))
          unknown call_tmp[657343] "expr temp" "maybe param" "maybe type" "temp"
          (657346 'move' call_tmp[657343](128722 call(128717 call (partial) dsiDim _mt[243] call_tmp[657336]) 0))
          (128723 call halt "array index out of bounds\n" "note: index was " call_tmp[657329] " but array bounds are " call_tmp[657343])
        }
        {
          unknown istr[128743] "dead at end of block" "insert auto destroy"
          (542986 'init var' istr[128743] "")
          (128746 'end of statement')
          unknown bstr[128765] "dead at end of block" "insert auto destroy"
          (542988 'init var' bstr[128765] "")
          (128768 'end of statement')
          {
            unknown i[128824] "dead at end of block" "insert auto destroy"
            (542990 'init var' i[128824] 0)
            (480112 'end of statement')
            unknown tmp[128825] "maybe param" "temp"
            unknown call_tmp[657350] "expr temp" "maybe param" "maybe type" "temp"
            (657353 'move' call_tmp[657350](383810 call rank _mt[243] this[133640]))
            unknown call_tmp[657355] "expr temp" "maybe param" "maybe type" "temp"
            (657358 'move' call_tmp[657355](128772 call - call_tmp[657350] 1))
            (128837 'move' tmp[128825](128835 call chpl_compute_low_param_loop_bound 0 call_tmp[657355]))
            unknown tmp[128826] "maybe param" "temp"
            unknown call_tmp[657362] "expr temp" "maybe param" "maybe type" "temp"
            (657365 'move' call_tmp[657362](383822 call rank _mt[243] this[133640]))
            unknown call_tmp[657367] "expr temp" "maybe param" "maybe type" "temp"
            (657370 'move' call_tmp[657367](128842 call - call_tmp[657362] 1))
            (128847 'move' tmp[128826](128845 call chpl_compute_high_param_loop_bound 0 call_tmp[657367]))
            unknown tmp[128827] "maybe param" "temp"
            (128850 'move' tmp[128827] 1)
            ParamForLoop[128852]
            { i[128824] tmp[128825] tmp[128826] tmp[128827]
              {
                unknown call_tmp[657372] "expr temp" "maybe param" "maybe type" "temp"
                (657375 'move' call_tmp[657372](128778 call != i[128824] 0))
                unknown call_tmp[657377] "expr temp" "maybe param" "maybe type" "temp"
                (657380 'move' call_tmp[657377](128791 call _cond_test call_tmp[657372]))
                if call_tmp[657377]
                {
                  (128782 call += istr[128743] ", ")
                  (480113 'end of statement' istr[128743])
                  (128788 call += bstr[128765] ", ")
                  (480115 'end of statement' bstr[128765])
                }
                unknown call_tmp[657382] "expr temp" "maybe param" "maybe type" "temp"
                (657385 'move' call_tmp[657382](128800 call indices[128631] i[128824]))
                unknown call_tmp[657387] "expr temp" "maybe param" "maybe type" "temp"
                (657390 'move' call_tmp[657387](128802 call _cast string[26] call_tmp[657382]))
                (128804 call += istr[128743] call_tmp[657387])
                (480117 'end of statement' istr[128743] i[128824])
                unknown call_tmp[657394] "expr temp" "maybe param" "maybe type" "temp"
                (657397 'move' call_tmp[657394](128809 call dom _mt[243] value[128635]))
                unknown call_tmp[657401] "expr temp" "maybe param" "maybe type" "temp"
                (657404 'move' call_tmp[657401](128817 call(128812 call (partial) dsiDim _mt[243] call_tmp[657394]) i[128824]))
                unknown call_tmp[657406] "expr temp" "maybe param" "maybe type" "temp"
                (657409 'move' call_tmp[657406](128819 call _cast string[26] call_tmp[657401]))
                (128821 call += bstr[128765] call_tmp[657406])
                (480120 'end of statement' bstr[128765] i[128824])
              }
            }
            label _unused_continueLabel[128829]
            label _breakLabel[128828]
          }
          unknown dimstr[128878] "dead at end of block" "insert auto destroy"
          (542992 'init var' dimstr[128878] "")
          (128881 'end of statement')
          {
            unknown i[129032] "dead at end of block" "insert auto destroy"
            (542994 'init var' i[129032] 0)
            (480123 'end of statement')
            unknown tmp[129033] "maybe param" "temp"
            unknown call_tmp[657413] "expr temp" "maybe param" "maybe type" "temp"
            (657416 'move' call_tmp[657413](383826 call rank _mt[243] this[133640]))
            unknown call_tmp[657418] "expr temp" "maybe param" "maybe type" "temp"
            (657421 'move' call_tmp[657418](128885 call - call_tmp[657413] 1))
            (129045 'move' tmp[129033](129043 call chpl_compute_low_param_loop_bound 0 call_tmp[657418]))
            unknown tmp[129034] "maybe param" "temp"
            unknown call_tmp[657425] "expr temp" "maybe param" "maybe type" "temp"
            (657428 'move' call_tmp[657425](383839 call rank _mt[243] this[133640]))
            unknown call_tmp[657430] "expr temp" "maybe param" "maybe type" "temp"
            (657433 'move' call_tmp[657430](129050 call - call_tmp[657425] 1))
            (129055 'move' tmp[129034](129053 call chpl_compute_high_param_loop_bound 0 call_tmp[657430]))
            unknown tmp[129035] "maybe param" "temp"
            (129058 'move' tmp[129035] 1)
            ParamForLoop[129060]
            { i[129032] tmp[129033] tmp[129034] tmp[129035]
              {
                unknown call_tmp[657437] "expr temp" "maybe param" "maybe type" "temp"
                (657440 'move' call_tmp[657437](128890 call dom _mt[243] value[128635]))
                unknown call_tmp[657444] "expr temp" "maybe param" "maybe type" "temp"
                (657447 'move' call_tmp[657444](128898 call(128893 call (partial) dsiDim _mt[243] call_tmp[657437]) i[129032]))
                unknown call_tmp[657451] "expr temp" "maybe param" "maybe type" "temp"
                (657454 'move' call_tmp[657451](128907 call indices[128631] i[129032]))
                unknown call_tmp[657456] "expr temp" "maybe param" "maybe type" "temp"
                (657459 'move' call_tmp[657456](128909 call(128901 call (partial) boundsCheck _mt[243] call_tmp[657444]) call_tmp[657451]))
                unknown call_tmp[657461] "expr temp" "maybe param" "maybe type" "temp"
                (657464 'move' call_tmp[657461](128910 call ! call_tmp[657456]))
                unknown call_tmp[657466] "expr temp" "maybe param" "maybe type" "temp"
                (657469 'move' call_tmp[657466](129027 call _cond_test call_tmp[657461]))
                if call_tmp[657466]
                {
                  unknown call_tmp[657471] "expr temp" "maybe param" "maybe type" "temp"
                  (657474 'move' call_tmp[657471](128930 call == dimstr[128878] ""))
                  unknown call_tmp[657476] "expr temp" "maybe param" "maybe type" "temp"
                  (657479 'move' call_tmp[657476](129022 call _cond_test call_tmp[657471]))
                  if call_tmp[657476]
                  {
                    unknown call_tmp[657481] "expr temp" "maybe param" "maybe type" "temp"
                    (657484 'move' call_tmp[657481](128952 call _cast string[26] i[129032]))
                    unknown call_tmp[657486] "expr temp" "maybe param" "maybe type" "temp"
                    (657489 'move' call_tmp[657486](128954 call + "out of bounds in dimension " call_tmp[657481]))
                    unknown call_tmp[657491] "expr temp" "maybe param" "maybe type" "temp"
                    (657494 'move' call_tmp[657491](128973 call + call_tmp[657486] " because index "))
                    unknown call_tmp[657496] "expr temp" "maybe param" "maybe type" "temp"
                    (657499 'move' call_tmp[657496](128978 call indices[128631] i[129032]))
                    unknown call_tmp[657501] "expr temp" "maybe param" "maybe type" "temp"
                    (657504 'move' call_tmp[657501](128980 call _cast string[26] call_tmp[657496]))
                    unknown call_tmp[657506] "expr temp" "maybe param" "maybe type" "temp"
                    (657509 'move' call_tmp[657506](128982 call + call_tmp[657491] call_tmp[657501]))
                    unknown call_tmp[657511] "expr temp" "maybe param" "maybe type" "temp"
                    (657514 'move' call_tmp[657511](129001 call + call_tmp[657506] " is not in "))
                    unknown call_tmp[657518] "expr temp" "maybe param" "maybe type" "temp"
                    (657521 'move' call_tmp[657518](129004 call dom _mt[243] value[128635]))
                    unknown call_tmp[657525] "expr temp" "maybe param" "maybe type" "temp"
                    (657528 'move' call_tmp[657525](129012 call(129007 call (partial) dsiDim _mt[243] call_tmp[657518]) i[129032]))
                    unknown call_tmp[657530] "expr temp" "maybe param" "maybe type" "temp"
                    (657533 'move' call_tmp[657530](129014 call _cast string[26] call_tmp[657525]))
                    unknown call_tmp[657535] "expr temp" "maybe param" "maybe type" "temp"
                    (657538 'move' call_tmp[657535](129016 call + call_tmp[657511] call_tmp[657530]))
                    (129018 call = dimstr[128878] call_tmp[657535])
                    (480124 'end of statement' dimstr[128878] i[129032] i[129032] i[129032])
                  }
                }
              }
            }
            label _unused_continueLabel[129037]
            label _breakLabel[129036]
          }
          (129144 call halt "array index out of bounds\n" "note: index was (" istr[128743] ") " "but array bounds are (" bstr[128765] ")\n" "note: " dimstr[128878])
          (480129 'end of statement' istr[128743] bstr[128765] dimstr[128878])
        }
      }
    }
    (517876 return _void[55])
  }
  function _array[133594](?).checkSlice[129169](arg _mt[133646]:_MT[238], arg this[133644]:_array[133594](?), arg d[129166]:_domain[125908](?), arg value[129171]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657544] "expr temp" "maybe param" "maybe type" "temp"
    (657547 'move' call_tmp[657544](129179 call(129175 call (partial) dsiDims _mt[243] d[129166])))
    (129184 call(383849 call (partial) checkSlice _mt[243] this[133644])(129180 'expand_tuple' call_tmp[657544])(value = value[129171]))
    (517878 return _void[55])
  }
  function _array[133594](?).checkSlice[129195](arg _mt[133650]:_MT[238], arg this[133648]:_array[133594](?), arg ranges[129192]:_any[178](?) ..., arg value[129197]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657551] "expr temp" "maybe param" "maybe type" "temp"
    (657554 'move' call_tmp[657551](129206 call isRectangularArr this[133648]))
    unknown call_tmp[657556] "expr temp" "maybe param" "maybe type" "temp"
    (657559 'move' call_tmp[657556](129699 call _cond_test call_tmp[657551]))
    if call_tmp[657556]
    {
      unknown ok[129208] "dead at end of block" "insert auto destroy"
      (542996 'init var' ok[129208] 1)
      (129211 'end of statement')
      {
        unknown i[129253] "dead at end of block" "insert auto destroy"
        (542998 'init var' i[129253] 0)
        (480134 'end of statement')
        unknown tmp[129254] "maybe param" "temp"
        unknown call_tmp[657563] "expr temp" "maybe param" "maybe type" "temp"
        (657566 'move' call_tmp[657563](383860 call rank _mt[243] this[133648]))
        unknown call_tmp[657568] "expr temp" "maybe param" "maybe type" "temp"
        (657571 'move' call_tmp[657568](129216 call - call_tmp[657563] 1))
        (129266 'move' tmp[129254](129264 call chpl_compute_low_param_loop_bound 0 call_tmp[657568]))
        unknown tmp[129255] "maybe param" "temp"
        unknown call_tmp[657575] "expr temp" "maybe param" "maybe type" "temp"
        (657578 'move' call_tmp[657575](383868 call rank _mt[243] this[133648]))
        unknown call_tmp[657580] "expr temp" "maybe param" "maybe type" "temp"
        (657583 'move' call_tmp[657580](129271 call - call_tmp[657575] 1))
        (129276 'move' tmp[129255](129274 call chpl_compute_high_param_loop_bound 0 call_tmp[657580]))
        unknown tmp[129256] "maybe param" "temp"
        (129279 'move' tmp[129256] 1)
        ParamForLoop[129281]
        { i[129253] tmp[129254] tmp[129255] tmp[129256]
          {
            {
              unknown tmp[129241] "temp"
              (129244 'move' tmp[129241](129243 'addr of' ok[129208]))
              unknown tmp[425389] "maybe param" "temp"
              (425400 'move' tmp[425389] tmp[129241])
              unknown call_tmp[657585] "expr temp" "maybe param" "maybe type" "temp"
              (657588 'move' call_tmp[657585](425402 call _cond_invalid tmp[425389]))
              if call_tmp[657585]
              {
                (425405 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[566091] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[566092] "maybe param" "temp"
              unknown call_tmp[657590] "expr temp" "maybe param" "maybe type" "temp"
              (657593 'move' call_tmp[657590](425390 call isTrue tmp[425389]))
              (566097 'move' tmp[566092](566095 call _cond_test call_tmp[657590]))
              if tmp[566092]
              {
                unknown tmp[566099] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[657597] "expr temp" "maybe param" "maybe type" "temp"
                (657600 'move' call_tmp[657597](129222 call dom _mt[243] value[129197]))
                unknown call_tmp[657604] "expr temp" "maybe param" "maybe type" "temp"
                (657607 'move' call_tmp[657604](129230 call(129225 call (partial) dsiDim _mt[243] call_tmp[657597]) i[129253]))
                unknown call_tmp[657611] "expr temp" "maybe param" "maybe type" "temp"
                (657614 'move' call_tmp[657611](129237 call ranges[129192] i[129253]))
                unknown call_tmp[657616] "expr temp" "maybe param" "maybe type" "temp"
                (657619 'move' call_tmp[657616](129239 call(129231 call (partial) boundsCheck _mt[243] call_tmp[657604]) call_tmp[657611]))
                (566101 'move' tmp[566099](425393 call isTrue call_tmp[657616]))
                (566106 'move' tmp[566091](566103 '_paramFoldLogical' tmp[566092] tmp[566099]))
              }
              {
                (566111 'move' tmp[566091](566108 '_paramFoldLogical' tmp[566092] 0))
              }
              (129249 call = tmp[129241] tmp[566091])
              (480136 'end of statement' i[129253] i[129253])
            }
          }
        }
        label _unused_continueLabel[129258]
        label _breakLabel[129257]
      }
      unknown call_tmp[657621] "expr temp" "maybe param" "maybe type" "temp"
      (657624 'move' call_tmp[657621](129292 call == ok[129208] 0))
      unknown call_tmp[657626] "expr temp" "maybe param" "maybe type" "temp"
      (657629 'move' call_tmp[657626](129695 call _cond_test call_tmp[657621]))
      if call_tmp[657626]
      {
        unknown call_tmp[657633] "expr temp" "maybe param" "maybe type" "temp"
        (657636 'move' call_tmp[657633](383873 call rank _mt[243] this[133648]))
        unknown call_tmp[657638] "expr temp" "maybe param" "maybe type" "temp"
        (657641 'move' call_tmp[657638](129296 call == call_tmp[657633] 1))
        unknown call_tmp[657643] "expr temp" "maybe param" "maybe type" "temp"
        (657646 'move' call_tmp[657643](129690 call _cond_test call_tmp[657638]))
        if call_tmp[657643]
        {
          unknown call_tmp[657648] "expr temp" "maybe param" "maybe type" "temp"
          (657651 'move' call_tmp[657648](129337 call ranges[129192] 0))
          unknown call_tmp[657655] "expr temp" "maybe param" "maybe type" "temp"
          (657658 'move' call_tmp[657655](129340 call dom _mt[243] value[129197]))
          unknown call_tmp[657662] "expr temp" "maybe param" "maybe type" "temp"
          (657665 'move' call_tmp[657662](129348 call(129343 call (partial) dsiDim _mt[243] call_tmp[657655]) 0))
          (129349 call halt "array slice out of bounds\n" "note: slice index was " call_tmp[657648] " but array bounds are " call_tmp[657662])
        }
        {
          unknown istr[129369] "dead at end of block" "insert auto destroy"
          (543000 'init var' istr[129369] "")
          (129372 'end of statement')
          unknown bstr[129391] "dead at end of block" "insert auto destroy"
          (543002 'init var' bstr[129391] "")
          (129394 'end of statement')
          {
            unknown i[129450] "dead at end of block" "insert auto destroy"
            (543004 'init var' i[129450] 0)
            (480140 'end of statement')
            unknown tmp[129451] "maybe param" "temp"
            unknown call_tmp[657669] "expr temp" "maybe param" "maybe type" "temp"
            (657672 'move' call_tmp[657669](383878 call rank _mt[243] this[133648]))
            unknown call_tmp[657674] "expr temp" "maybe param" "maybe type" "temp"
            (657677 'move' call_tmp[657674](129398 call - call_tmp[657669] 1))
            (129463 'move' tmp[129451](129461 call chpl_compute_low_param_loop_bound 0 call_tmp[657674]))
            unknown tmp[129452] "maybe param" "temp"
            unknown call_tmp[657681] "expr temp" "maybe param" "maybe type" "temp"
            (657684 'move' call_tmp[657681](383890 call rank _mt[243] this[133648]))
            unknown call_tmp[657686] "expr temp" "maybe param" "maybe type" "temp"
            (657689 'move' call_tmp[657686](129468 call - call_tmp[657681] 1))
            (129473 'move' tmp[129452](129471 call chpl_compute_high_param_loop_bound 0 call_tmp[657686]))
            unknown tmp[129453] "maybe param" "temp"
            (129476 'move' tmp[129453] 1)
            ParamForLoop[129478]
            { i[129450] tmp[129451] tmp[129452] tmp[129453]
              {
                unknown call_tmp[657691] "expr temp" "maybe param" "maybe type" "temp"
                (657694 'move' call_tmp[657691](129404 call != i[129450] 0))
                unknown call_tmp[657696] "expr temp" "maybe param" "maybe type" "temp"
                (657699 'move' call_tmp[657696](129417 call _cond_test call_tmp[657691]))
                if call_tmp[657696]
                {
                  (129408 call += istr[129369] ", ")
                  (480141 'end of statement' istr[129369])
                  (129414 call += bstr[129391] ", ")
                  (480143 'end of statement' bstr[129391])
                }
                unknown call_tmp[657701] "expr temp" "maybe param" "maybe type" "temp"
                (657704 'move' call_tmp[657701](129426 call ranges[129192] i[129450]))
                unknown call_tmp[657706] "expr temp" "maybe param" "maybe type" "temp"
                (657709 'move' call_tmp[657706](129428 call _cast string[26] call_tmp[657701]))
                (129430 call += istr[129369] call_tmp[657706])
                (480145 'end of statement' istr[129369] i[129450])
                unknown call_tmp[657713] "expr temp" "maybe param" "maybe type" "temp"
                (657716 'move' call_tmp[657713](129435 call dom _mt[243] value[129197]))
                unknown call_tmp[657720] "expr temp" "maybe param" "maybe type" "temp"
                (657723 'move' call_tmp[657720](129443 call(129438 call (partial) dsiDim _mt[243] call_tmp[657713]) i[129450]))
                unknown call_tmp[657725] "expr temp" "maybe param" "maybe type" "temp"
                (657728 'move' call_tmp[657725](129445 call _cast string[26] call_tmp[657720]))
                (129447 call += bstr[129391] call_tmp[657725])
                (480148 'end of statement' bstr[129391] i[129450])
              }
            }
            label _unused_continueLabel[129455]
            label _breakLabel[129454]
          }
          unknown dimstr[129504] "dead at end of block" "insert auto destroy"
          (543006 'init var' dimstr[129504] "")
          (129507 'end of statement')
          {
            unknown i[129624] "dead at end of block" "insert auto destroy"
            (543008 'init var' i[129624] 0)
            (480151 'end of statement')
            unknown tmp[129625] "maybe param" "temp"
            unknown call_tmp[657732] "expr temp" "maybe param" "maybe type" "temp"
            (657735 'move' call_tmp[657732](383894 call rank _mt[243] this[133648]))
            unknown call_tmp[657737] "expr temp" "maybe param" "maybe type" "temp"
            (657740 'move' call_tmp[657737](129511 call - call_tmp[657732] 1))
            (129637 'move' tmp[129625](129635 call chpl_compute_low_param_loop_bound 0 call_tmp[657737]))
            unknown tmp[129626] "maybe param" "temp"
            unknown call_tmp[657744] "expr temp" "maybe param" "maybe type" "temp"
            (657747 'move' call_tmp[657744](383907 call rank _mt[243] this[133648]))
            unknown call_tmp[657749] "expr temp" "maybe param" "maybe type" "temp"
            (657752 'move' call_tmp[657749](129642 call - call_tmp[657744] 1))
            (129647 'move' tmp[129626](129645 call chpl_compute_high_param_loop_bound 0 call_tmp[657749]))
            unknown tmp[129627] "maybe param" "temp"
            (129650 'move' tmp[129627] 1)
            ParamForLoop[129652]
            { i[129624] tmp[129625] tmp[129626] tmp[129627]
              {
                unknown call_tmp[657756] "expr temp" "maybe param" "maybe type" "temp"
                (657759 'move' call_tmp[657756](129516 call dom _mt[243] value[129197]))
                unknown call_tmp[657763] "expr temp" "maybe param" "maybe type" "temp"
                (657766 'move' call_tmp[657763](129524 call(129519 call (partial) dsiDim _mt[243] call_tmp[657756]) i[129624]))
                unknown call_tmp[657770] "expr temp" "maybe param" "maybe type" "temp"
                (657773 'move' call_tmp[657770](129531 call ranges[129192] i[129624]))
                unknown call_tmp[657775] "expr temp" "maybe param" "maybe type" "temp"
                (657778 'move' call_tmp[657775](129533 call(129525 call (partial) boundsCheck _mt[243] call_tmp[657763]) call_tmp[657770]))
                unknown call_tmp[657780] "expr temp" "maybe param" "maybe type" "temp"
                (657783 'move' call_tmp[657780](129534 call ! call_tmp[657775]))
                unknown call_tmp[657785] "expr temp" "maybe param" "maybe type" "temp"
                (657788 'move' call_tmp[657785](129619 call _cond_test call_tmp[657780]))
                if call_tmp[657785]
                {
                  unknown call_tmp[657790] "expr temp" "maybe param" "maybe type" "temp"
                  (657793 'move' call_tmp[657790](129554 call == dimstr[129504] ""))
                  unknown call_tmp[657795] "expr temp" "maybe param" "maybe type" "temp"
                  (657798 'move' call_tmp[657795](129614 call _cond_test call_tmp[657790]))
                  if call_tmp[657795]
                  {
                    unknown call_tmp[657800] "expr temp" "maybe param" "maybe type" "temp"
                    (657803 'move' call_tmp[657800](129560 call _cast string[26] i[129624]))
                    unknown call_tmp[657805] "expr temp" "maybe param" "maybe type" "temp"
                    (657808 'move' call_tmp[657805](129562 call + "out of bounds in dimension " call_tmp[657800]))
                    unknown call_tmp[657810] "expr temp" "maybe param" "maybe type" "temp"
                    (657813 'move' call_tmp[657810](129581 call + call_tmp[657805] " because slice index "))
                    unknown call_tmp[657815] "expr temp" "maybe param" "maybe type" "temp"
                    (657818 'move' call_tmp[657815](129586 call ranges[129192] i[129624]))
                    unknown call_tmp[657820] "expr temp" "maybe param" "maybe type" "temp"
                    (657823 'move' call_tmp[657820](129588 call _cast string[26] call_tmp[657815]))
                    unknown call_tmp[657825] "expr temp" "maybe param" "maybe type" "temp"
                    (657828 'move' call_tmp[657825](129590 call + call_tmp[657810] call_tmp[657820]))
                    unknown call_tmp[657830] "expr temp" "maybe param" "maybe type" "temp"
                    (657833 'move' call_tmp[657830](129593 call + call_tmp[657825] " is not in "))
                    unknown call_tmp[657837] "expr temp" "maybe param" "maybe type" "temp"
                    (657840 'move' call_tmp[657837](129596 call dom _mt[243] value[129197]))
                    unknown call_tmp[657844] "expr temp" "maybe param" "maybe type" "temp"
                    (657847 'move' call_tmp[657844](129604 call(129599 call (partial) dsiDim _mt[243] call_tmp[657837]) i[129624]))
                    unknown call_tmp[657849] "expr temp" "maybe param" "maybe type" "temp"
                    (657852 'move' call_tmp[657849](129606 call _cast string[26] call_tmp[657844]))
                    unknown call_tmp[657854] "expr temp" "maybe param" "maybe type" "temp"
                    (657857 'move' call_tmp[657854](129608 call + call_tmp[657830] call_tmp[657849]))
                    (129610 call = dimstr[129504] call_tmp[657854])
                    (480152 'end of statement' dimstr[129504] i[129624] i[129624] i[129624])
                  }
                }
              }
            }
            label _unused_continueLabel[129629]
            label _breakLabel[129628]
          }
          (129688 call halt "array slice out of bounds\n" "note: slice index was (" istr[129369] ") " "but array bounds are (" bstr[129391] ")\n" "note: " dimstr[129504])
          (480157 'end of statement' istr[129369] bstr[129391] dimstr[129504])
        }
      }
    }
    (517880 return _void[55])
  }
  where {
    (129202 call chpl__isTupleOfRanges ranges[129192])
  }
  function _array[133594](?).this[129722](arg _mt[133654]:_MT[238], ref arg this[133652]:_array[133594](?), arg i[129719] :
  unknown call_tmp[657861] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[517884] "RVV" "temp"
    unknown call_tmp[657889] "maybe param" "maybe type" "temp"
    (657892 'move' call_tmp[657889](383918 call _value _mt[243] this[133652]))
    const value[129725] "dead at end of block" "const" "insert auto destroy"
    (543010 'init var' value[129725] call_tmp[657889])
    (129728 'end of statement')
    unknown call_tmp[657894] "expr temp" "maybe param" "maybe type" "temp"
    (657897 'move' call_tmp[657894](129738 call _cond_test 1))
    if call_tmp[657894]
    {
      (129736 call(383925 call (partial) checkAccess _mt[243] this[133652]) i[129719](value = value[129725]))
      (480161 'end of statement' value[129725])
    }
    unknown tmp[425410] "maybe param" "temp"
    (425421 'move' tmp[425410](129746 call isRectangularArr this[133652]))
    unknown call_tmp[657901] "expr temp" "maybe param" "maybe type" "temp"
    (657904 'move' call_tmp[657901](425423 call _cond_invalid tmp[425410]))
    if call_tmp[657901]
    {
      (425426 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566118] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566119] "maybe param" "temp"
    unknown call_tmp[657906] "expr temp" "maybe param" "maybe type" "temp"
    (657909 'move' call_tmp[657906](425411 call isTrue tmp[425410]))
    (566124 'move' tmp[566119](566122 call _cond_test call_tmp[657906]))
    if tmp[566119]
    {
      (566129 'move' tmp[566118](566126 '_paramFoldLogical' tmp[566119] 1))
    }
    {
      unknown tmp[566131] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657911] "expr temp" "maybe param" "maybe type" "temp"
      (657914 'move' call_tmp[657911](129750 call isSparseArr this[133652]))
      (566133 'move' tmp[566131](425415 call isTrue call_tmp[657911]))
      (566138 'move' tmp[566118](566135 '_paramFoldLogical' tmp[566119] tmp[566131]))
    }
    unknown call_tmp[657916] "expr temp" "maybe param" "maybe type" "temp"
    (657919 'move' call_tmp[657916](129774 call _cond_test tmp[566118]))
    if call_tmp[657916]
    {
      unknown call_tmp[657923] "expr temp" "maybe param" "maybe type" "temp"
      (657926 'move' call_tmp[657923](129759 call(129754 call (partial) dsiAccess _mt[243] value[129725]) i[129719]))
      (517889 'move' ret[517884](517888 'addr of' call_tmp[657923]))
      gotoReturn _end_this[517882] _end_this[517882]
      (480164 'end of statement' value[129725])
    }
    {
      unknown call_tmp[657930] "expr temp" "maybe param" "maybe type" "temp"
      (657933 'move' call_tmp[657930](129769 call i[129719] 0))
      unknown call_tmp[657935] "expr temp" "maybe param" "maybe type" "temp"
      (657938 'move' call_tmp[657935](129771 call(129763 call (partial) dsiAccess _mt[243] value[129725]) call_tmp[657930]))
      (517894 'move' ret[517884](517893 'addr of' call_tmp[657935]))
      gotoReturn _end_this[517882] _end_this[517882]
      (480166 'end of statement' value[129725])
    }
    label _end_this[517882]
    (517886 return ret[517884])
  }
  function _array[133594](?).this[129797](arg _mt[133658]:_MT[238], const arg this[133656]:_array[133594](?), arg i[129794] :
  unknown call_tmp[657942] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517900] "RVV" "temp"
    unknown call_tmp[657970] "maybe param" "maybe type" "temp"
    (657973 'move' call_tmp[657970](383939 call _value _mt[243] this[133656]))
    const value[129807] "dead at end of block" "const" "insert auto destroy"
    (543012 'init var' value[129807] call_tmp[657970])
    (129810 'end of statement')
    unknown call_tmp[657975] "expr temp" "maybe param" "maybe type" "temp"
    (657978 'move' call_tmp[657975](129820 call _cond_test 1))
    if call_tmp[657975]
    {
      (129818 call(383944 call (partial) checkAccess _mt[243] this[133656]) i[129794](value = value[129807]))
      (480168 'end of statement' value[129807])
    }
    unknown tmp[425431] "maybe param" "temp"
    (425442 'move' tmp[425431](129828 call isRectangularArr this[133656]))
    unknown call_tmp[657982] "expr temp" "maybe param" "maybe type" "temp"
    (657985 'move' call_tmp[657982](425444 call _cond_invalid tmp[425431]))
    if call_tmp[657982]
    {
      (425447 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566145] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566146] "maybe param" "temp"
    unknown call_tmp[657987] "expr temp" "maybe param" "maybe type" "temp"
    (657990 'move' call_tmp[657987](425432 call isTrue tmp[425431]))
    (566151 'move' tmp[566146](566149 call _cond_test call_tmp[657987]))
    if tmp[566146]
    {
      (566156 'move' tmp[566145](566153 '_paramFoldLogical' tmp[566146] 1))
    }
    {
      unknown tmp[566158] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657992] "expr temp" "maybe param" "maybe type" "temp"
      (657995 'move' call_tmp[657992](129832 call isSparseArr this[133656]))
      (566160 'move' tmp[566158](425436 call isTrue call_tmp[657992]))
      (566165 'move' tmp[566145](566162 '_paramFoldLogical' tmp[566146] tmp[566158]))
    }
    unknown call_tmp[657997] "expr temp" "maybe param" "maybe type" "temp"
    (658000 'move' call_tmp[657997](129856 call _cond_test tmp[566145]))
    if call_tmp[657997]
    {
      unknown call_tmp[658004] "expr temp" "maybe param" "maybe type" "temp"
      (658007 'move' call_tmp[658004](129841 call(129836 call (partial) dsiAccess _mt[243] value[129807]) i[129794]))
      (517905 'move' ret[517900](517904 'deref' call_tmp[658004]))
      gotoReturn _end_this[517898] _end_this[517898]
      (480171 'end of statement' value[129807])
    }
    {
      unknown call_tmp[658011] "expr temp" "maybe param" "maybe type" "temp"
      (658014 'move' call_tmp[658011](129851 call i[129794] 0))
      unknown call_tmp[658016] "expr temp" "maybe param" "maybe type" "temp"
      (658019 'move' call_tmp[658016](129853 call(129845 call (partial) dsiAccess _mt[243] value[129807]) call_tmp[658011]))
      (517910 'move' ret[517900](517909 'deref' call_tmp[658016]))
      gotoReturn _end_this[517898] _end_this[517898]
      (480173 'end of statement' value[129807])
    }
    label _end_this[517898]
    (517902 return ret[517900])
  }
  where {
    unknown call_tmp[658023] "expr temp" "maybe param" "maybe type" "temp"
    (658026 'move' call_tmp[658023](359809 call _value _mt[243] this[133656]))
    unknown call_tmp[658030] "expr temp" "maybe param" "maybe type" "temp"
    (658033 'move' call_tmp[658030](129801 call eltType _mt[243] call_tmp[658023]))
    (129805 call shouldReturnRvalueByValue call_tmp[658030])
  }
  function _array[133594](?).this[129880](arg _mt[133662]:_MT[238], const arg this[133660]:_array[133594](?), arg i[129877] :
  unknown call_tmp[658037] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517916] "RVV" "temp"
    unknown call_tmp[658065] "maybe param" "maybe type" "temp"
    (658068 'move' call_tmp[658065](383958 call _value _mt[243] this[133660]))
    const value[129890] "dead at end of block" "const" "insert auto destroy"
    (543014 'init var' value[129890] call_tmp[658065])
    (129893 'end of statement')
    unknown call_tmp[658070] "expr temp" "maybe param" "maybe type" "temp"
    (658073 'move' call_tmp[658070](129903 call _cond_test 1))
    if call_tmp[658070]
    {
      (129901 call(383963 call (partial) checkAccess _mt[243] this[133660]) i[129877](value = value[129890]))
      (480175 'end of statement' value[129890])
    }
    unknown tmp[425452] "maybe param" "temp"
    (425463 'move' tmp[425452](129911 call isRectangularArr this[133660]))
    unknown call_tmp[658077] "expr temp" "maybe param" "maybe type" "temp"
    (658080 'move' call_tmp[658077](425465 call _cond_invalid tmp[425452]))
    if call_tmp[658077]
    {
      (425468 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566172] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566173] "maybe param" "temp"
    unknown call_tmp[658082] "expr temp" "maybe param" "maybe type" "temp"
    (658085 'move' call_tmp[658082](425453 call isTrue tmp[425452]))
    (566178 'move' tmp[566173](566176 call _cond_test call_tmp[658082]))
    if tmp[566173]
    {
      (566183 'move' tmp[566172](566180 '_paramFoldLogical' tmp[566173] 1))
    }
    {
      unknown tmp[566185] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658087] "expr temp" "maybe param" "maybe type" "temp"
      (658090 'move' call_tmp[658087](129915 call isSparseArr this[133660]))
      (566187 'move' tmp[566185](425457 call isTrue call_tmp[658087]))
      (566192 'move' tmp[566172](566189 '_paramFoldLogical' tmp[566173] tmp[566185]))
    }
    unknown call_tmp[658092] "expr temp" "maybe param" "maybe type" "temp"
    (658095 'move' call_tmp[658092](129939 call _cond_test tmp[566172]))
    if call_tmp[658092]
    {
      unknown call_tmp[658099] "expr temp" "maybe param" "maybe type" "temp"
      (658102 'move' call_tmp[658099](129924 call(129919 call (partial) dsiAccess _mt[243] value[129890]) i[129877]))
      (517921 'move' ret[517916](517920 'addr of' call_tmp[658099]))
      gotoReturn _end_this[517914] _end_this[517914]
      (480178 'end of statement' value[129890])
    }
    {
      unknown call_tmp[658106] "expr temp" "maybe param" "maybe type" "temp"
      (658109 'move' call_tmp[658106](129934 call i[129877] 0))
      unknown call_tmp[658111] "expr temp" "maybe param" "maybe type" "temp"
      (658114 'move' call_tmp[658111](129936 call(129928 call (partial) dsiAccess _mt[243] value[129890]) call_tmp[658106]))
      (517926 'move' ret[517916](517925 'addr of' call_tmp[658111]))
      gotoReturn _end_this[517914] _end_this[517914]
      (480180 'end of statement' value[129890])
    }
    label _end_this[517914]
    (517918 return ret[517916])
  }
  where {
    unknown call_tmp[658118] "expr temp" "maybe param" "maybe type" "temp"
    (658121 'move' call_tmp[658118](359819 call _value _mt[243] this[133660]))
    unknown call_tmp[658125] "expr temp" "maybe param" "maybe type" "temp"
    (658128 'move' call_tmp[658125](129884 call eltType _mt[243] call_tmp[658118]))
    (129888 call shouldReturnRvalueByConstRef call_tmp[658125])
  }
  function _array[133594](?).this[129962](arg _mt[133666]:_MT[238], ref arg this[133664]:_array[133594](?), arg i[129958] ... :
  unknown call_tmp[658132] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[517932] "RVV" "temp"
    unknown call_tmp[658148] "expr temp" "maybe param" "maybe type" "temp"
    (658151 'move' call_tmp[658148](129967 call this[133664] i[129958]))
    (517937 'move' ret[517932](517936 'addr of' call_tmp[658148]))
    (517934 return ret[517932])
  }
  function _array[133594](?).this[129987](arg _mt[133670]:_MT[238], const arg this[133668]:_array[133594](?), arg i[129983] ... :
  unknown call_tmp[658155] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517941] "RVV" "temp"
    unknown call_tmp[658171] "expr temp" "maybe param" "maybe type" "temp"
    (658174 'move' call_tmp[658171](129999 call this[133668] i[129983]))
    (517946 'move' ret[517941](517945 'deref' call_tmp[658171]))
    (517943 return ret[517941])
  }
  where {
    unknown call_tmp[658178] "expr temp" "maybe param" "maybe type" "temp"
    (658181 'move' call_tmp[658178](359833 call _value _mt[243] this[133668]))
    unknown call_tmp[658185] "expr temp" "maybe param" "maybe type" "temp"
    (658188 'move' call_tmp[658185](129991 call eltType _mt[243] call_tmp[658178]))
    (129995 call shouldReturnRvalueByValue call_tmp[658185])
  }
  function _array[133594](?).this[130020](arg _mt[133674]:_MT[238], const arg this[133672]:_array[133594](?), arg i[130016] ... :
  unknown call_tmp[658192] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517950] "RVV" "temp"
    unknown call_tmp[658208] "expr temp" "maybe param" "maybe type" "temp"
    (658211 'move' call_tmp[658208](130032 call this[133672] i[130016]))
    (517955 'move' ret[517950](517954 'addr of' call_tmp[658208]))
    (517952 return ret[517950])
  }
  where {
    unknown call_tmp[658215] "expr temp" "maybe param" "maybe type" "temp"
    (658218 'move' call_tmp[658215](359841 call _value _mt[243] this[133672]))
    unknown call_tmp[658222] "expr temp" "maybe param" "maybe type" "temp"
    (658225 'move' call_tmp[658222](130024 call eltType _mt[243] call_tmp[658215]))
    (130028 call shouldReturnRvalueByConstRef call_tmp[658222])
  }
  function _array[133594](?).localAccess[130054](arg _mt[133678]:_MT[238], ref arg this[133676]:_array[133594](?), arg i[130051] :
  unknown call_tmp[658229] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[517959] "RVV" "temp"
    unknown call_tmp[658257] "maybe param" "maybe type" "temp"
    (658260 'move' call_tmp[658257](383995 call _value _mt[243] this[133676]))
    const value[130057] "dead at end of block" "const" "insert auto destroy"
    (543016 'init var' value[130057] call_tmp[658257])
    (130060 'end of statement')
    unknown call_tmp[658262] "expr temp" "maybe param" "maybe type" "temp"
    (658265 'move' call_tmp[658262](130070 call _cond_test 1))
    if call_tmp[658262]
    {
      (130068 call(384000 call (partial) checkAccess _mt[243] this[133676]) i[130051](value = value[130057]))
      (480185 'end of statement' value[130057])
    }
    unknown tmp[425473] "maybe param" "temp"
    (425484 'move' tmp[425473](130078 call isRectangularArr this[133676]))
    unknown call_tmp[658269] "expr temp" "maybe param" "maybe type" "temp"
    (658272 'move' call_tmp[658269](425486 call _cond_invalid tmp[425473]))
    if call_tmp[658269]
    {
      (425489 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566199] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566200] "maybe param" "temp"
    unknown call_tmp[658274] "expr temp" "maybe param" "maybe type" "temp"
    (658277 'move' call_tmp[658274](425474 call isTrue tmp[425473]))
    (566205 'move' tmp[566200](566203 call _cond_test call_tmp[658274]))
    if tmp[566200]
    {
      (566210 'move' tmp[566199](566207 '_paramFoldLogical' tmp[566200] 1))
    }
    {
      unknown tmp[566212] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658279] "expr temp" "maybe param" "maybe type" "temp"
      (658282 'move' call_tmp[658279](130082 call isSparseArr this[133676]))
      (566214 'move' tmp[566212](425478 call isTrue call_tmp[658279]))
      (566219 'move' tmp[566199](566216 '_paramFoldLogical' tmp[566200] tmp[566212]))
    }
    unknown call_tmp[658284] "expr temp" "maybe param" "maybe type" "temp"
    (658287 'move' call_tmp[658284](130108 call _cond_test tmp[566199]))
    if call_tmp[658284]
    {
      unknown call_tmp[658291] "expr temp" "maybe param" "maybe type" "temp"
      (658294 'move' call_tmp[658291](130093 call(130088 call (partial) dsiLocalAccess _mt[243] value[130057]) i[130051]))
      (517964 'move' ret[517959](517963 'addr of' call_tmp[658291]))
      gotoReturn _end_localAccess[517957] _end_localAccess[517957]
      (480188 'end of statement' value[130057])
    }
    {
      unknown call_tmp[658298] "expr temp" "maybe param" "maybe type" "temp"
      (658301 'move' call_tmp[658298](130103 call i[130051] 0))
      unknown call_tmp[658303] "expr temp" "maybe param" "maybe type" "temp"
      (658306 'move' call_tmp[658303](130105 call(130097 call (partial) dsiLocalAccess _mt[243] value[130057]) call_tmp[658298]))
      (517969 'move' ret[517959](517968 'addr of' call_tmp[658303]))
      gotoReturn _end_localAccess[517957] _end_localAccess[517957]
      (480190 'end of statement' value[130057])
    }
    label _end_localAccess[517957]
    (517961 return ret[517959])
  }
  function _array[133594](?).localAccess[130131](arg _mt[133682]:_MT[238], const arg this[133680]:_array[133594](?), arg i[130128] :
  unknown call_tmp[658310] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517975] "RVV" "temp"
    unknown call_tmp[658338] "maybe param" "maybe type" "temp"
    (658341 'move' call_tmp[658338](384014 call _value _mt[243] this[133680]))
    const value[130141] "dead at end of block" "const" "insert auto destroy"
    (543018 'init var' value[130141] call_tmp[658338])
    (130144 'end of statement')
    unknown call_tmp[658343] "expr temp" "maybe param" "maybe type" "temp"
    (658346 'move' call_tmp[658343](130154 call _cond_test 1))
    if call_tmp[658343]
    {
      (130152 call(384019 call (partial) checkAccess _mt[243] this[133680]) i[130128](value = value[130141]))
      (480192 'end of statement' value[130141])
    }
    unknown tmp[425494] "maybe param" "temp"
    (425505 'move' tmp[425494](130162 call isRectangularArr this[133680]))
    unknown call_tmp[658350] "expr temp" "maybe param" "maybe type" "temp"
    (658353 'move' call_tmp[658350](425507 call _cond_invalid tmp[425494]))
    if call_tmp[658350]
    {
      (425510 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566226] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566227] "maybe param" "temp"
    unknown call_tmp[658355] "expr temp" "maybe param" "maybe type" "temp"
    (658358 'move' call_tmp[658355](425495 call isTrue tmp[425494]))
    (566232 'move' tmp[566227](566230 call _cond_test call_tmp[658355]))
    if tmp[566227]
    {
      (566237 'move' tmp[566226](566234 '_paramFoldLogical' tmp[566227] 1))
    }
    {
      unknown tmp[566239] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658360] "expr temp" "maybe param" "maybe type" "temp"
      (658363 'move' call_tmp[658360](130166 call isSparseArr this[133680]))
      (566241 'move' tmp[566239](425499 call isTrue call_tmp[658360]))
      (566246 'move' tmp[566226](566243 '_paramFoldLogical' tmp[566227] tmp[566239]))
    }
    unknown call_tmp[658365] "expr temp" "maybe param" "maybe type" "temp"
    (658368 'move' call_tmp[658365](130190 call _cond_test tmp[566226]))
    if call_tmp[658365]
    {
      unknown call_tmp[658372] "expr temp" "maybe param" "maybe type" "temp"
      (658375 'move' call_tmp[658372](130175 call(130170 call (partial) dsiLocalAccess _mt[243] value[130141]) i[130128]))
      (517980 'move' ret[517975](517979 'deref' call_tmp[658372]))
      gotoReturn _end_localAccess[517973] _end_localAccess[517973]
      (480195 'end of statement' value[130141])
    }
    {
      unknown call_tmp[658379] "expr temp" "maybe param" "maybe type" "temp"
      (658382 'move' call_tmp[658379](130185 call i[130128] 0))
      unknown call_tmp[658384] "expr temp" "maybe param" "maybe type" "temp"
      (658387 'move' call_tmp[658384](130187 call(130179 call (partial) dsiLocalAccess _mt[243] value[130141]) call_tmp[658379]))
      (517985 'move' ret[517975](517984 'deref' call_tmp[658384]))
      gotoReturn _end_localAccess[517973] _end_localAccess[517973]
      (480197 'end of statement' value[130141])
    }
    label _end_localAccess[517973]
    (517977 return ret[517975])
  }
  where {
    unknown call_tmp[658391] "expr temp" "maybe param" "maybe type" "temp"
    (658394 'move' call_tmp[658391](359855 call _value _mt[243] this[133680]))
    unknown call_tmp[658398] "expr temp" "maybe param" "maybe type" "temp"
    (658401 'move' call_tmp[658398](130135 call eltType _mt[243] call_tmp[658391]))
    (130139 call shouldReturnRvalueByValue call_tmp[658398])
  }
  function _array[133594](?).localAccess[130214](arg _mt[133686]:_MT[238], const arg this[133684]:_array[133594](?), arg i[130211] :
  unknown call_tmp[658405] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517991] "RVV" "temp"
    unknown call_tmp[658433] "maybe param" "maybe type" "temp"
    (658436 'move' call_tmp[658433](384033 call _value _mt[243] this[133684]))
    const value[130224] "dead at end of block" "const" "insert auto destroy"
    (543020 'init var' value[130224] call_tmp[658433])
    (130227 'end of statement')
    unknown call_tmp[658438] "expr temp" "maybe param" "maybe type" "temp"
    (658441 'move' call_tmp[658438](130237 call _cond_test 1))
    if call_tmp[658438]
    {
      (130235 call(384038 call (partial) checkAccess _mt[243] this[133684]) i[130211](value = value[130224]))
      (480199 'end of statement' value[130224])
    }
    unknown tmp[425515] "maybe param" "temp"
    (425526 'move' tmp[425515](130245 call isRectangularArr this[133684]))
    unknown call_tmp[658445] "expr temp" "maybe param" "maybe type" "temp"
    (658448 'move' call_tmp[658445](425528 call _cond_invalid tmp[425515]))
    if call_tmp[658445]
    {
      (425531 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566253] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566254] "maybe param" "temp"
    unknown call_tmp[658450] "expr temp" "maybe param" "maybe type" "temp"
    (658453 'move' call_tmp[658450](425516 call isTrue tmp[425515]))
    (566259 'move' tmp[566254](566257 call _cond_test call_tmp[658450]))
    if tmp[566254]
    {
      (566264 'move' tmp[566253](566261 '_paramFoldLogical' tmp[566254] 1))
    }
    {
      unknown tmp[566266] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658455] "expr temp" "maybe param" "maybe type" "temp"
      (658458 'move' call_tmp[658455](130249 call isSparseArr this[133684]))
      (566268 'move' tmp[566266](425520 call isTrue call_tmp[658455]))
      (566273 'move' tmp[566253](566270 '_paramFoldLogical' tmp[566254] tmp[566266]))
    }
    unknown call_tmp[658460] "expr temp" "maybe param" "maybe type" "temp"
    (658463 'move' call_tmp[658460](130273 call _cond_test tmp[566253]))
    if call_tmp[658460]
    {
      unknown call_tmp[658467] "expr temp" "maybe param" "maybe type" "temp"
      (658470 'move' call_tmp[658467](130258 call(130253 call (partial) dsiLocalAccess _mt[243] value[130224]) i[130211]))
      (517996 'move' ret[517991](517995 'addr of' call_tmp[658467]))
      gotoReturn _end_localAccess[517989] _end_localAccess[517989]
      (480202 'end of statement' value[130224])
    }
    {
      unknown call_tmp[658474] "expr temp" "maybe param" "maybe type" "temp"
      (658477 'move' call_tmp[658474](130268 call i[130211] 0))
      unknown call_tmp[658479] "expr temp" "maybe param" "maybe type" "temp"
      (658482 'move' call_tmp[658479](130270 call(130262 call (partial) dsiLocalAccess _mt[243] value[130224]) call_tmp[658474]))
      (518001 'move' ret[517991](518000 'addr of' call_tmp[658479]))
      gotoReturn _end_localAccess[517989] _end_localAccess[517989]
      (480204 'end of statement' value[130224])
    }
    label _end_localAccess[517989]
    (517993 return ret[517991])
  }
  where {
    unknown call_tmp[658486] "expr temp" "maybe param" "maybe type" "temp"
    (658489 'move' call_tmp[658486](359865 call _value _mt[243] this[133684]))
    unknown call_tmp[658493] "expr temp" "maybe param" "maybe type" "temp"
    (658496 'move' call_tmp[658493](130218 call eltType _mt[243] call_tmp[658486]))
    (130222 call shouldReturnRvalueByConstRef call_tmp[658493])
  }
  function _array[133594](?).localAccess[130296](arg _mt[133690]:_MT[238], ref arg this[133688]:_array[133594](?), arg i[130292] ... :
  unknown call_tmp[658500] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[518007] "RVV" "temp"
    unknown call_tmp[658518] "expr temp" "maybe param" "maybe type" "temp"
    (658521 'move' call_tmp[658518](130301 call(384054 call (partial) localAccess _mt[243] this[133688]) i[130292]))
    (518012 'move' ret[518007](518011 'addr of' call_tmp[658518]))
    (518009 return ret[518007])
  }
  function _array[133594](?).localAccess[130321](arg _mt[133694]:_MT[238], const arg this[133692]:_array[133594](?), arg i[130317] ... :
  unknown call_tmp[658525] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518016] "RVV" "temp"
    unknown call_tmp[658543] "expr temp" "maybe param" "maybe type" "temp"
    (658546 'move' call_tmp[658543](130333 call(384063 call (partial) localAccess _mt[243] this[133692]) i[130317]))
    (518021 'move' ret[518016](518020 'deref' call_tmp[658543]))
    (518018 return ret[518016])
  }
  where {
    unknown call_tmp[658550] "expr temp" "maybe param" "maybe type" "temp"
    (658553 'move' call_tmp[658550](359879 call _value _mt[243] this[133692]))
    unknown call_tmp[658557] "expr temp" "maybe param" "maybe type" "temp"
    (658560 'move' call_tmp[658557](130325 call eltType _mt[243] call_tmp[658550]))
    (130329 call shouldReturnRvalueByValue call_tmp[658557])
  }
  function _array[133594](?).localAccess[130354](arg _mt[133698]:_MT[238], const arg this[133696]:_array[133594](?), arg i[130350] ... :
  unknown call_tmp[658564] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518025] "RVV" "temp"
    unknown call_tmp[658582] "expr temp" "maybe param" "maybe type" "temp"
    (658585 'move' call_tmp[658582](130366 call(384072 call (partial) localAccess _mt[243] this[133696]) i[130350]))
    (518030 'move' ret[518025](518029 'addr of' call_tmp[658582]))
    (518027 return ret[518025])
  }
  where {
    unknown call_tmp[658589] "expr temp" "maybe param" "maybe type" "temp"
    (658592 'move' call_tmp[658589](359887 call _value _mt[243] this[133696]))
    unknown call_tmp[658596] "expr temp" "maybe param" "maybe type" "temp"
    (658599 'move' call_tmp[658596](130358 call eltType _mt[243] call_tmp[658589]))
    (130362 call shouldReturnRvalueByConstRef call_tmp[658596])
  }
  function _array[133594](?).this[130379](arg _mt[133702]:_MT[238], arg this[133700]:_array[133594](?), arg d[130376]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518034] "RVV" "temp"
    unknown call_tmp[658603] "expr temp" "maybe param" "maybe type" "temp"
    (658606 'move' call_tmp[658603](130382 call rank _mt[243] d[130376]))
    unknown call_tmp[658610] "expr temp" "maybe param" "maybe type" "temp"
    (658613 'move' call_tmp[658610](384078 call rank _mt[243] this[133700]))
    unknown call_tmp[658615] "expr temp" "maybe param" "maybe type" "temp"
    (658618 'move' call_tmp[658615](130386 call != call_tmp[658603] call_tmp[658610]))
    unknown call_tmp[658620] "expr temp" "maybe param" "maybe type" "temp"
    (658623 'move' call_tmp[658620](130409 call _cond_test call_tmp[658615]))
    if call_tmp[658620]
    {
      (130407 call compilerError "slicing an array with a domain of a different rank")
    }
    unknown call_tmp[658625] "expr temp" "maybe param" "maybe type" "temp"
    (658628 'move' call_tmp[658625](130422 call _cond_test 1))
    if call_tmp[658625]
    {
      unknown call_tmp[658634] "expr temp" "maybe param" "maybe type" "temp"
      (658637 'move' call_tmp[658634](384088 call _value _mt[243] this[133700]))
      (130420 call(384083 call (partial) checkSlice _mt[243] this[133700]) d[130376] call_tmp[658634])
    }
    const tmp[130471] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566280] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566281] "maybe param" "temp"
    unknown call_tmp[658641] "expr temp" "maybe param" "maybe type" "temp"
    (658644 'move' call_tmp[658641](359892 call _value _mt[243] this[133700]))
    unknown call_tmp[658648] "expr temp" "maybe param" "maybe type" "temp"
    (658651 'move' call_tmp[658648](130437 call(130433 call (partial) isSliceArrayView _mt[243] call_tmp[658641])))
    (566286 'move' tmp[566281](566284 call _cond_test call_tmp[658648]))
    if tmp[566281]
    {
      unknown tmp[566288] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658655] "expr temp" "maybe param" "maybe type" "temp"
      (658658 'move' call_tmp[658655](130439 call _value _mt[243] this[133700]))
      unknown call_tmp[658662] "expr temp" "maybe param" "maybe type" "temp"
      (658665 'move' call_tmp[658662](130442 call arr _mt[243] call_tmp[658655]))
      unknown call_tmp[658669] "expr temp" "maybe param" "maybe type" "temp"
      (658672 'move' call_tmp[658669](130446 call _value _mt[243] this[133700]))
      unknown call_tmp[658676] "expr temp" "maybe param" "maybe type" "temp"
      (658679 'move' call_tmp[658676](130451 call _ArrPid _mt[243] call_tmp[658669]))
      (566290 'move' tmp[566288](130455 call _build_tuple call_tmp[658662] call_tmp[658676]))
      (566295 'move' tmp[566280](566292 '_paramFoldLogical' tmp[566281] tmp[566288]))
    }
    {
      unknown tmp[566297] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658683] "expr temp" "maybe param" "maybe type" "temp"
      (658686 'move' call_tmp[658683](130458 call _value _mt[243] this[133700]))
      unknown call_tmp[658690] "expr temp" "maybe param" "maybe type" "temp"
      (658693 'move' call_tmp[658690](130462 call _pid _mt[243] this[133700]))
      (566299 'move' tmp[566297](130466 call _build_tuple call_tmp[658683] call_tmp[658690]))
      (566304 'move' tmp[566280](566301 '_paramFoldLogical' tmp[566281] tmp[566297]))
    }
    (543022 'init var' tmp[130471] tmp[566280])
    (130478 call _check_tuple_var_decl tmp[130471] 2)
    (480211 'end of statement')
    unknown call_tmp[658695] "maybe param" "maybe type" "temp"
    (658698 'move' call_tmp[658695](130472 call tmp[130471] 0))
    const arr[130427] "dead at end of block" "const" "insert auto destroy"
    (543024 'init var' arr[130427] call_tmp[658695])
    unknown call_tmp[658700] "maybe param" "maybe type" "temp"
    (658703 'move' call_tmp[658700](130475 call tmp[130471] 1))
    const arrpid[130429] "dead at end of block" "const" "insert auto destroy"
    (543026 'init var' arrpid[130429] call_tmp[658700])
    (130483 'end of statement')
    unknown call_tmp[658707] "expr temp" "maybe param" "maybe type" "temp"
    (658710 'move' call_tmp[658707](130489 call eltType _mt[243] this[133700]))
    unknown call_tmp[658714] "expr temp" "maybe param" "maybe type" "temp"
    (658717 'move' call_tmp[658714](130495 call _pid _mt[243] d[130376]))
    unknown call_tmp[658721] "expr temp" "maybe param" "maybe type" "temp"
    (658724 'move' call_tmp[658721](130500 call _instance _mt[243] d[130376]))
    unknown call_tmp[658726] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658729 'move' call_tmp[658726](747942 'new' ArrayViewSliceArr[384092](?)(eltType = call_tmp[658707])(_DomPid = call_tmp[658714])(dom = call_tmp[658721])(_ArrPid = arrpid[130429])(_ArrInstance = arr[130427])(_chpl_manager = unmanaged[220](?))))
    unknown a[130509] "dead at end of block" "insert auto destroy"
    (543028 'init var' a[130509] call_tmp[658726])
    (130512 'end of statement' arrpid[130429] arr[130427])
    unknown call_tmp[658733] "expr temp" "maybe param" "maybe type" "temp"
    (658736 'move' call_tmp[658733](130514 call _value _mt[243] d[130376]))
    (130526 call(130517 call (partial) add_arr _mt[243] call_tmp[658733]) a[130509](locking = 1)(addToList = 0))
    (480214 'end of statement' a[130509])
    unknown call_tmp[658740] "expr temp" "maybe param" "maybe type" "temp"
    (658743 'move' call_tmp[658740](130531 call _newArray a[130509]))
    (518039 'move' ret[518034](518038 'deref' call_tmp[658740]))
    gotoReturn _end_this[518032] _end_this[518032]
    (480216 'end of statement' a[130509])
    label _end_this[518032]
    (518036 return ret[518034])
  }
  function _array[133594](?).this[130542](arg _mt[133706]:_MT[238], arg this[133704]:_array[133594](?), arg ranges[130539]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518045] "RVV" "temp"
    unknown call_tmp[658747] "expr temp" "maybe param" "maybe type" "temp"
    (658750 'move' call_tmp[658747](130557 call _cond_test 1))
    if call_tmp[658747]
    {
      unknown call_tmp[658756] "expr temp" "maybe param" "maybe type" "temp"
      (658759 'move' call_tmp[658756](384111 call _value _mt[243] this[133704]))
      (130555 call(384106 call (partial) checkSlice _mt[243] this[133704])(130551 'expand_tuple' ranges[130539])(value = call_tmp[658756]))
    }
    unknown call_tmp[658763] "maybe param" "maybe type" "temp"
    (658766 'move' call_tmp[658763](130567 call(384115 call (partial) _dom _mt[243] this[133704])(130565 'expand_tuple' ranges[130539])))
    unknown d[130568] "dead at end of block" "no auto destroy"
    (543030 'init var' d[130568] call_tmp[658763])
    (130571 'end of statement')
    unknown call_tmp[658770] "expr temp" "maybe param" "maybe type" "temp"
    (658773 'move' call_tmp[658770](130573 call _value _mt[243] d[130568]))
    unknown call_tmp[658777] "expr temp" "maybe param" "maybe type" "temp"
    (658780 'move' call_tmp[658777](130578 call _free_when_no_arrs _mt[243] call_tmp[658770]))
    (130582 call = call_tmp[658777] 1)
    (480219 'end of statement' d[130568])
    const tmp[130627] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566311] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566312] "maybe param" "temp"
    unknown call_tmp[658784] "expr temp" "maybe param" "maybe type" "temp"
    (658787 'move' call_tmp[658784](359905 call _value _mt[243] this[133704]))
    unknown call_tmp[658791] "expr temp" "maybe param" "maybe type" "temp"
    (658794 'move' call_tmp[658791](130595 call(130591 call (partial) isSliceArrayView _mt[243] call_tmp[658784])))
    (566317 'move' tmp[566312](566315 call _cond_test call_tmp[658791]))
    if tmp[566312]
    {
      unknown tmp[566319] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658798] "expr temp" "maybe param" "maybe type" "temp"
      (658801 'move' call_tmp[658798](130597 call _value _mt[243] this[133704]))
      unknown call_tmp[658805] "expr temp" "maybe param" "maybe type" "temp"
      (658808 'move' call_tmp[658805](130600 call arr _mt[243] call_tmp[658798]))
      unknown call_tmp[658812] "expr temp" "maybe param" "maybe type" "temp"
      (658815 'move' call_tmp[658812](130604 call _value _mt[243] this[133704]))
      unknown call_tmp[658819] "expr temp" "maybe param" "maybe type" "temp"
      (658822 'move' call_tmp[658819](130607 call _ArrPid _mt[243] call_tmp[658812]))
      (566321 'move' tmp[566319](130611 call _build_tuple call_tmp[658805] call_tmp[658819]))
      (566326 'move' tmp[566311](566323 '_paramFoldLogical' tmp[566312] tmp[566319]))
    }
    {
      unknown tmp[566328] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658826] "expr temp" "maybe param" "maybe type" "temp"
      (658829 'move' call_tmp[658826](130614 call _value _mt[243] this[133704]))
      unknown call_tmp[658833] "expr temp" "maybe param" "maybe type" "temp"
      (658836 'move' call_tmp[658833](130618 call _pid _mt[243] this[133704]))
      (566330 'move' tmp[566328](130622 call _build_tuple call_tmp[658826] call_tmp[658833]))
      (566335 'move' tmp[566311](566332 '_paramFoldLogical' tmp[566312] tmp[566328]))
    }
    (543032 'init var' tmp[130627] tmp[566311])
    (130634 call _check_tuple_var_decl tmp[130627] 2)
    (480221 'end of statement')
    unknown call_tmp[658838] "maybe param" "maybe type" "temp"
    (658841 'move' call_tmp[658838](130628 call tmp[130627] 0))
    const arr[130585] "dead at end of block" "const" "insert auto destroy"
    (543034 'init var' arr[130585] call_tmp[658838])
    unknown call_tmp[658843] "maybe param" "maybe type" "temp"
    (658846 'move' call_tmp[658843](130631 call tmp[130627] 1))
    const arrpid[130587] "dead at end of block" "const" "insert auto destroy"
    (543036 'init var' arrpid[130587] call_tmp[658843])
    (130639 'end of statement')
    unknown call_tmp[658850] "expr temp" "maybe param" "maybe type" "temp"
    (658853 'move' call_tmp[658850](130645 call eltType _mt[243] this[133704]))
    unknown call_tmp[658857] "expr temp" "maybe param" "maybe type" "temp"
    (658860 'move' call_tmp[658857](130651 call _pid _mt[243] d[130568]))
    unknown call_tmp[658864] "expr temp" "maybe param" "maybe type" "temp"
    (658867 'move' call_tmp[658864](130656 call _instance _mt[243] d[130568]))
    unknown call_tmp[658869] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658872 'move' call_tmp[658869](747943 'new' ArrayViewSliceArr[384092](?)(eltType = call_tmp[658850])(_DomPid = call_tmp[658857])(dom = call_tmp[658864])(_ArrPid = arrpid[130587])(_ArrInstance = arr[130585])(_chpl_manager = unmanaged[220](?))))
    unknown a[130665] "dead at end of block" "insert auto destroy"
    (543038 'init var' a[130665] call_tmp[658869])
    (130668 'end of statement' d[130568] d[130568] arrpid[130587] arr[130585])
    unknown call_tmp[658876] "expr temp" "maybe param" "maybe type" "temp"
    (658879 'move' call_tmp[658876](130670 call _value _mt[243] d[130568]))
    (130682 call(130673 call (partial) add_arr _mt[243] call_tmp[658876]) a[130665](locking = 0)(addToList = 0))
    (480226 'end of statement' d[130568] a[130665])
    unknown call_tmp[658883] "expr temp" "maybe param" "maybe type" "temp"
    (658886 'move' call_tmp[658883](130687 call _newArray a[130665]))
    (518050 'move' ret[518045](518049 'deref' call_tmp[658883]))
    gotoReturn _end_this[518043] _end_this[518043]
    (480229 'end of statement' a[130665])
    label _end_this[518043]
    (518047 return ret[518045])
  }
  where {
    (130547 call chpl__isTupleOfRanges ranges[130539])
  }
  function _array[133594](?).this[130699](arg _mt[133710]:_MT[238], arg this[133708]:_array[133594](?), arg args[130696]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518056] "RVV" "temp"
    unknown call_tmp[658890] "expr temp" "maybe param" "maybe type" "temp"
    (658893 'move' call_tmp[658890](130718 call _cond_test 1))
    if call_tmp[658890]
    {
      (130716 call(384133 call (partial) checkRankChange _mt[243] this[133708]) args[130696])
    }
    unknown call_tmp[658899] "maybe param" "maybe type" "temp"
    (658902 'move' call_tmp[658899](130731 call(130725 call (partial) _dom _mt[243] this[133708])(130729 'expand_tuple' args[130696])))
    const rcdom[130732] "dead at end of block" "const" "insert auto destroy"
    (543040 'init var' rcdom[130732] call_tmp[658899])
    (130735 'end of statement')
    unknown call_tmp[658906] "expr temp" "maybe param" "maybe type" "temp"
    (658909 'move' call_tmp[658906](130742 call _value _mt[243] this[133708]))
    unknown call_tmp[658913] "expr temp" "maybe param" "maybe type" "temp"
    (658916 'move' call_tmp[658913](130746 call _pid _mt[243] this[133708]))
    unknown call_tmp[658918] "maybe param" "maybe type" "temp"
    (658921 'move' call_tmp[658918](130750 call _build_tuple call_tmp[658906] call_tmp[658913]))
    const tmp[130752] "dead at end of block" "const" "insert auto destroy" "temp"
    (543042 'init var' tmp[130752] call_tmp[658918])
    (130759 call _check_tuple_var_decl tmp[130752] 2)
    (480232 'end of statement')
    unknown call_tmp[658923] "maybe param" "maybe type" "temp"
    (658926 'move' call_tmp[658923](130753 call tmp[130752] 0))
    const arr[130736] "dead at end of block" "const" "insert auto destroy"
    (543044 'init var' arr[130736] call_tmp[658923])
    unknown call_tmp[658928] "maybe param" "maybe type" "temp"
    (658931 'move' call_tmp[658928](130756 call tmp[130752] 1))
    const arrpid[130738] "dead at end of block" "const" "insert auto destroy"
    (543046 'init var' arrpid[130738] call_tmp[658928])
    (130764 'end of statement')
    unknown call_tmp[658935] "expr temp" "maybe param" "maybe type" "temp"
    (658938 'move' call_tmp[658935](130770 call eltType _mt[243] this[133708]))
    unknown call_tmp[658942] "expr temp" "maybe param" "maybe type" "temp"
    (658945 'move' call_tmp[658942](130776 call _pid _mt[243] rcdom[130732]))
    unknown call_tmp[658949] "expr temp" "maybe param" "maybe type" "temp"
    (658952 'move' call_tmp[658949](130781 call _instance _mt[243] rcdom[130732]))
    unknown call_tmp[658956] "expr temp" "maybe param" "maybe type" "temp"
    (658959 'move' call_tmp[658956](130790 call _value _mt[243] rcdom[130732]))
    unknown call_tmp[658963] "expr temp" "maybe param" "maybe type" "temp"
    (658966 'move' call_tmp[658963](130793 call collapsedDim _mt[243] call_tmp[658956]))
    unknown call_tmp[658970] "expr temp" "maybe param" "maybe type" "temp"
    (658973 'move' call_tmp[658970](130798 call _value _mt[243] rcdom[130732]))
    unknown call_tmp[658977] "expr temp" "maybe param" "maybe type" "temp"
    (658980 'move' call_tmp[658977](130801 call idx _mt[243] call_tmp[658970]))
    unknown call_tmp[658982] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658985 'move' call_tmp[658982](747944 'new' ArrayViewRankChangeArr[384139](?)(eltType = call_tmp[658935])(_DomPid = call_tmp[658942])(dom = call_tmp[658949])(_ArrPid = arrpid[130738])(_ArrInstance = arr[130736])(collapsedDim = call_tmp[658963])(idx = call_tmp[658977])(_chpl_manager = unmanaged[220](?))))
    unknown a[130806] "dead at end of block" "insert auto destroy"
    (543048 'init var' a[130806] call_tmp[658982])
    (130809 'end of statement' rcdom[130732] rcdom[130732] arrpid[130738] arr[130736] rcdom[130732] rcdom[130732])
    unknown call_tmp[658989] "expr temp" "maybe param" "maybe type" "temp"
    (658992 'move' call_tmp[658989](130811 call _value _mt[243] rcdom[130732]))
    (130821 call(130814 call (partial) add_arr _mt[243] call_tmp[658989]) a[130806](locking = 0))
    (480239 'end of statement' rcdom[130732] a[130806])
    unknown call_tmp[658996] "expr temp" "maybe param" "maybe type" "temp"
    (658999 'move' call_tmp[658996](130826 call _newArray a[130806]))
    (518061 'move' ret[518056](518060 'deref' call_tmp[658996]))
    gotoReturn _end_this[518054] _end_this[518054]
    (480242 'end of statement' a[130806])
    label _end_this[518054]
    (518058 return ret[518056])
  }
  where {
    unknown call_tmp[659003] "expr temp" "maybe param" "maybe type" "temp"
    (659006 'move' call_tmp[659003](359917 call _value _mt[243] this[133708]))
    unknown call_tmp[659010] "expr temp" "maybe param" "maybe type" "temp"
    (659013 'move' call_tmp[659010](130705 call dom _mt[243] call_tmp[659003]))
    unknown call_tmp[659017] "expr temp" "maybe param" "maybe type" "temp"
    (659020 'move' call_tmp[659017](130708 call idxType _mt[243] call_tmp[659010]))
    (130711 call _validRankChangeArgs args[130696] call_tmp[659017])
  }
  function _array[133594](?).checkRankChange[130836](arg _mt[133714]:_MT[238], arg this[133712]:_array[133594](?), arg args[130834]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[130917] "dead at end of block" "insert auto destroy"
      (543050 'init var' i[130917] 0)
      (480244 'end of statement')
      unknown tmp[130918] "maybe param" "temp"
      unknown call_tmp[659024] "expr temp" "maybe param" "maybe type" "temp"
      (659027 'move' call_tmp[659024](130840 call size _mt[243] args[130834]))
      unknown call_tmp[659029] "expr temp" "maybe param" "maybe type" "temp"
      (659032 'move' call_tmp[659029](130844 call - call_tmp[659024] 1))
      (130930 'move' tmp[130918](130928 call chpl_compute_low_param_loop_bound 0 call_tmp[659029]))
      unknown tmp[130919] "maybe param" "temp"
      unknown call_tmp[659036] "expr temp" "maybe param" "maybe type" "temp"
      (659039 'move' call_tmp[659036](130937 call size _mt[243] args[130834]))
      unknown call_tmp[659041] "expr temp" "maybe param" "maybe type" "temp"
      (659044 'move' call_tmp[659041](130935 call - call_tmp[659036] 1))
      (130943 'move' tmp[130919](130941 call chpl_compute_high_param_loop_bound 0 call_tmp[659041]))
      unknown tmp[130920] "maybe param" "temp"
      (130946 'move' tmp[130920] 1)
      ParamForLoop[130948]
      { i[130917] tmp[130918] tmp[130919] tmp[130920]
        unknown call_tmp[659048] "expr temp" "maybe param" "maybe type" "temp"
        (659051 'move' call_tmp[659048](359931 call _value _mt[243] this[133712]))
        unknown call_tmp[659055] "expr temp" "maybe param" "maybe type" "temp"
        (659058 'move' call_tmp[659055](130849 call dom _mt[243] call_tmp[659048]))
        unknown call_tmp[659062] "expr temp" "maybe param" "maybe type" "temp"
        (659065 'move' call_tmp[659062](130857 call(130852 call (partial) dsiDim _mt[243] call_tmp[659055]) i[130917]))
        unknown call_tmp[659069] "expr temp" "maybe param" "maybe type" "temp"
        (659072 'move' call_tmp[659069](130864 call args[130834] i[130917]))
        unknown call_tmp[659074] "expr temp" "maybe param" "maybe type" "temp"
        (659077 'move' call_tmp[659074](130866 call(130858 call (partial) boundsCheck _mt[243] call_tmp[659062]) call_tmp[659069]))
        unknown call_tmp[659079] "expr temp" "maybe param" "maybe type" "temp"
        (659082 'move' call_tmp[659079](130867 call ! call_tmp[659074]))
        unknown call_tmp[659084] "expr temp" "maybe param" "maybe type" "temp"
        (659087 'move' call_tmp[659084](130912 call _cond_test call_tmp[659079]))
        if call_tmp[659084]
        {
          unknown call_tmp[659089] "expr temp" "maybe param" "maybe type" "temp"
          (659092 'move' call_tmp[659089](130909 call args[130834] i[130917]))
          (130910 call halt "array slice out of bounds in dimension " i[130917] ": " call_tmp[659089])
          (480245 'end of statement' i[130917] i[130917])
        }
      }
      label _unused_continueLabel[130922]
      label _breakLabel[130921]
    }
    (518065 return _void[55])
  }
  function _array[133594](?).localSlice[130966](arg _mt[133718]:_MT[238], arg this[133716]:_array[133594](?), arg r[130963]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518069] "RVV" "temp"
    unknown call_tmp[659096] "expr temp" "maybe param" "maybe type" "temp"
    (659099 'move' call_tmp[659096](130989 call _cond_test 1))
    if call_tmp[659096]
    {
      unknown call_tmp[659105] "expr temp" "maybe param" "maybe type" "temp"
      (659108 'move' call_tmp[659105](384169 call _value _mt[243] this[133716]))
      (130987 call(384164 call (partial) checkSlice _mt[243] this[133716])(130983 'expand_tuple' r[130963])(value = call_tmp[659105]))
    }
    unknown call_tmp[659112] "maybe param" "maybe type" "temp"
    (659115 'move' call_tmp[659112](130999 call(384173 call (partial) _dom _mt[243] this[133716])(130997 'expand_tuple' r[130963])))
    unknown dom[131000] "dead at end of block" "insert auto destroy"
    (543052 'init var' dom[131000] call_tmp[659112])
    (131003 'end of statement')
    unknown call_tmp[659119] "expr temp" "maybe param" "maybe type" "temp"
    (659122 'move' call_tmp[659119](131007 call(384180 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133716]) dom[131000]))
    (518074 'move' ret[518069](518073 'deref' call_tmp[659119]))
    gotoReturn _end_localSlice[518067] _end_localSlice[518067]
    (480249 'end of statement' dom[131000])
    label _end_localSlice[518067]
    (518071 return ret[518069])
  }
  where {
    unknown tmp[425536] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492227] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659126] "expr temp" "maybe param" "maybe type" "temp"
      (659129 'move' call_tmp[659126](384157 call _value _mt[243] this[133716]))
      (492231 'move' call_type_tmp[492227](130970 'typeof' call_tmp[659126]))
    }
    (425547 'move' tmp[425536](354338 'is_subtype' DefaultRectangularArr[379736](?) call_type_tmp[492227]))
    unknown call_tmp[659131] "expr temp" "maybe param" "maybe type" "temp"
    (659134 'move' call_tmp[659131](425549 call _cond_invalid tmp[425536]))
    if call_tmp[659131]
    {
      (425552 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566342] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566343] "maybe param" "temp"
    unknown call_tmp[659136] "expr temp" "maybe param" "maybe type" "temp"
    (659139 'move' call_tmp[659136](425537 call isTrue tmp[425536]))
    (566348 'move' tmp[566343](566346 call _cond_test call_tmp[659136]))
    if tmp[566343]
    {
      unknown tmp[566350] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659141] "expr temp" "maybe param" "maybe type" "temp"
      (659144 'move' call_tmp[659141](130977 call chpl__isTupleOfRanges r[130963]))
      (566352 'move' tmp[566350](425540 call isTrue call_tmp[659141]))
      (566357 'move' tmp[566342](566354 '_paramFoldLogical' tmp[566343] tmp[566350]))
    }
    {
      (566362 'move' tmp[566342](566359 '_paramFoldLogical' tmp[566343] 0))
    }
    (748361 call chpl_statementLevelSymbol tmp[566342])
  }
  function _array[133594](?).localSlice[131019](arg _mt[133722]:_MT[238], arg this[133720]:_array[133594](?), arg d[131016]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518080] "RVV" "temp"
    unknown call_tmp[659146] "expr temp" "maybe param" "maybe type" "temp"
    (659149 'move' call_tmp[659146](131041 call _cond_test 1))
    if call_tmp[659146]
    {
      unknown call_tmp[659155] "expr temp" "maybe param" "maybe type" "temp"
      (659158 'move' call_tmp[659155](131034 call(131030 call (partial) getIndices _mt[243] d[131016])))
      unknown call_tmp[659162] "expr temp" "maybe param" "maybe type" "temp"
      (659165 'move' call_tmp[659162](384196 call _value _mt[243] this[133720]))
      (131039 call(384192 call (partial) checkSlice _mt[243] this[133720])(131035 'expand_tuple' call_tmp[659155])(value = call_tmp[659162]))
    }
    unknown call_tmp[659169] "expr temp" "maybe param" "maybe type" "temp"
    (659172 'move' call_tmp[659169](131050 call(384200 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133720]) d[131016]))
    (518085 'move' ret[518080](518084 'deref' call_tmp[659169]))
    (518082 return ret[518080])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492233] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659176] "expr temp" "maybe param" "maybe type" "temp"
      (659179 'move' call_tmp[659176](384186 call _value _mt[243] this[133720]))
      (492237 'move' call_type_tmp[492233](131023 'typeof' call_tmp[659176]))
    }
    (354339 'is_subtype' DefaultRectangularArr[379736](?) call_type_tmp[492233])
  }
  function _array[133594](?).chpl__localSliceDefaultArithArrHelp[131062](arg _mt[133726]:_MT[238], arg this[133724]:_array[133594](?), arg d[131059]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no copy return"
  {
    unknown ret[518089] "RVV" "temp"
    unknown call_tmp[659183] "expr temp" "maybe param" "maybe type" "temp"
    (659186 'move' call_tmp[659183](384206 call _value _mt[243] this[133724]))
    unknown call_tmp[659188] "expr temp" "maybe param" "maybe type" "temp"
    (659191 'move' call_tmp[659188](131065 '_wide_get_locale' call_tmp[659183]))
    unknown call_tmp[659193] "expr temp" "maybe param" "maybe type" "temp"
    (659196 'move' call_tmp[659193](131066 call chpl_localeID_to_locale call_tmp[659188]))
    unknown call_tmp[659198] "expr temp" "maybe param" "maybe type" "temp"
    (659201 'move' call_tmp[659198](384209 call here[90438]))
    unknown call_tmp[659203] "expr temp" "maybe param" "maybe type" "temp"
    (659206 'move' call_tmp[659203](131069 call != call_tmp[659193] call_tmp[659198]))
    unknown call_tmp[659208] "expr temp" "maybe param" "maybe type" "temp"
    (659211 'move' call_tmp[659208](131102 call _cond_test call_tmp[659203]))
    if call_tmp[659208]
    {
      unknown call_tmp[659215] "expr temp" "maybe param" "maybe type" "temp"
      (659218 'move' call_tmp[659215](384212 call _value _mt[243] this[133724]))
      unknown call_tmp[659220] "expr temp" "maybe param" "maybe type" "temp"
      (659223 'move' call_tmp[659220](131094 '_wide_get_node' call_tmp[659215]))
      unknown call_tmp[659225] "expr temp" "maybe param" "maybe type" "temp"
      (659228 'move' call_tmp[659225](359936 call here[90438]))
      unknown call_tmp[659232] "expr temp" "maybe param" "maybe type" "temp"
      (659235 'move' call_tmp[659232](131097 call id _mt[243] call_tmp[659225]))
      (131100 call halt "Attempting to take a local slice of an array on locale " call_tmp[659220] " from locale " call_tmp[659232])
    }
    unknown call_tmp[659237] "expr temp" "maybe param" "maybe type" "temp"
    (659240 'move' call_tmp[659237](131111 call this[133724] d[131059]))
    (518094 'move' ret[518089](518093 'deref' call_tmp[659237]))
    (518091 return ret[518089])
  }
  function _array[133594](?).localSlice[131122](arg _mt[133730]:_MT[238], arg this[133728]:_array[133594](?), arg r[131119]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518098] "RVV" "temp"
    unknown call_tmp[659244] "expr temp" "maybe param" "maybe type" "temp"
    (659247 'move' call_tmp[659244](131147 call _cond_test 1))
    if call_tmp[659244]
    {
      unknown call_tmp[659253] "expr temp" "maybe param" "maybe type" "temp"
      (659256 'move' call_tmp[659253](384234 call _value _mt[243] this[133728]))
      (131145 call(384229 call (partial) checkSlice _mt[243] this[133728])(131141 'expand_tuple' r[131119])(value = call_tmp[659253]))
    }
    unknown call_tmp[659260] "expr temp" "maybe param" "maybe type" "temp"
    (659263 'move' call_tmp[659260](359939 call _value _mt[243] this[133728]))
    unknown call_tmp[659267] "expr temp" "maybe param" "maybe type" "temp"
    (659270 'move' call_tmp[659267](131159 call(131154 call (partial) dsiLocalSlice _mt[243] call_tmp[659260]) r[131119]))
    (518103 'move' ret[518098](518102 'deref' call_tmp[659267]))
    (518100 return ret[518098])
  }
  where {
    unknown tmp[425557] "maybe param" "temp"
    (425568 'move' tmp[425557](131127 call chpl__isTupleOfRanges r[131119]))
    unknown call_tmp[659272] "expr temp" "maybe param" "maybe type" "temp"
    (659275 'move' call_tmp[659272](425570 call _cond_invalid tmp[425557]))
    if call_tmp[659272]
    {
      (425573 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566369] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566370] "maybe param" "temp"
    unknown call_tmp[659277] "expr temp" "maybe param" "maybe type" "temp"
    (659280 'move' call_tmp[659277](425558 call isTrue tmp[425557]))
    (566375 'move' tmp[566370](566373 call _cond_test call_tmp[659277]))
    if tmp[566370]
    {
      { scopeless type
        unknown call_type_tmp[492239] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659284] "expr temp" "maybe param" "maybe type" "temp"
        (659287 'move' call_tmp[659284](384223 call _value _mt[243] this[133728]))
        (492243 'move' call_type_tmp[492239](131130 'typeof' call_tmp[659284]))
      }
      unknown tmp[566377] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659289] "expr temp" "maybe param" "maybe type" "temp"
      (659292 'move' call_tmp[659289](354340 'is_subtype' DefaultRectangularArr[379736](?) call_type_tmp[492239]))
      unknown call_tmp[659294] "expr temp" "maybe param" "maybe type" "temp"
      (659297 'move' call_tmp[659294](131134 call ! call_tmp[659289]))
      (566379 'move' tmp[566377](425561 call isTrue call_tmp[659294]))
      (566384 'move' tmp[566369](566381 '_paramFoldLogical' tmp[566370] tmp[566377]))
    }
    {
      (566389 'move' tmp[566369](566386 '_paramFoldLogical' tmp[566370] 0))
    }
    (748363 call chpl_statementLevelSymbol tmp[566369])
  }
  function _array[133594](?).localSlice[131171](arg _mt[133734]:_MT[238], arg this[133732]:_array[133594](?), arg d[131168]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518107] "RVV" "temp"
    unknown call_tmp[659303] "expr temp" "maybe param" "maybe type" "temp"
    (659306 'move' call_tmp[659303](131179 call(131175 call (partial) getIndices _mt[243] d[131168])))
    unknown call_tmp[659308] "expr temp" "maybe param" "maybe type" "temp"
    (659311 'move' call_tmp[659308](131182 call(384240 call (partial) localSlice _mt[243] this[133732])(131180 'expand_tuple' call_tmp[659303])))
    (518112 'move' ret[518107](518111 'deref' call_tmp[659308]))
    (518109 return ret[518107])
  }
  function _array[133594](?).these[131190](arg _mt[133738]:_MT[238], arg this[133736]:_array[133594](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    unknown ret[518116] "RVV" "temp"
    {
      unknown _indexOfInterest[131203] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131204] "expr temp" "temp"
      unknown call_tmp[659315] "expr temp" "maybe param" "maybe type" "temp"
      (659318 'move' call_tmp[659315](359944 call _value _mt[243] this[133736]))
      unknown call_tmp[659322] "expr temp" "maybe param" "maybe type" "temp"
      (659325 'move' call_tmp[659322](131198 call(131194 call (partial) these _mt[243] call_tmp[659315])))
      (131213 'move' _iterator[131204](131211 call _getIterator call_tmp[659322]))
      Defer
      {
        {
          (131230 call _freeIterator _iterator[131204])
        }
      }
      { scopeless type
        (131219 'move' _indexOfInterest[131203](131216 call iteratorIndex _iterator[131204]))
      }
      ForLoop[131205]
      {
        unknown i[131223] "index var" "insert auto destroy"
        (480259 'end of statement')
        (131225 'move' i[131223] _indexOfInterest[131203])
        (480260 'end of statement' i[131223])
        {
          unknown yret[518120] "YVV" "temp"
          (518123 'move' yret[518120](518122 'addr of' i[131223]))
          (518125 yield yret[518120])
          (480262 'end of statement' i[131223])
        }
        label _continueLabel[131208]
        _indexOfInterest[131203]
        _iterator[131204]
      }
      label _breakLabel[131209]
    }
    (518118 return ret[518116])
  }
  function _array[133594](?).these[131246](arg _mt[133742]:_MT[238], arg this[133740]:_array[133594](?), param arg tag[131243]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[518129] "RVV" "temp"
    {
      unknown _indexOfInterest[131275] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131276] "expr temp" "temp"
      unknown call_tmp[659329] "expr temp" "maybe param" "maybe type" "temp"
      (659332 'move' call_tmp[659329](359949 call _value _mt[243] this[133740]))
      unknown call_tmp[659336] "expr temp" "maybe param" "maybe type" "temp"
      (659339 'move' call_tmp[659336](131271 call(131266 call (partial) these _mt[243] call_tmp[659329]) tag[131243]))
      (131285 'move' _iterator[131276](131283 call _getIterator call_tmp[659336]))
      Defer
      {
        {
          (131302 call _freeIterator _iterator[131276])
        }
      }
      { scopeless type
        (131291 'move' _indexOfInterest[131275](131288 call iteratorIndex _iterator[131276]))
      }
      ForLoop[131277]
      {
        unknown i[131295] "index var" "insert auto destroy"
        (480265 'end of statement')
        (131297 'move' i[131295] _indexOfInterest[131275])
        (480266 'end of statement' i[131295])
        unknown yret[518133] "YVV" "temp"
        (518136 'move' yret[518133](518135 'addr of' i[131295]))
        (518138 yield yret[518133])
        (480268 'end of statement' i[131295])
        label _continueLabel[131280]
        _indexOfInterest[131275]
        _iterator[131276]
      }
      label _breakLabel[131281]
    }
    (518131 return ret[518129])
  }
  where {
    unknown tmp[425578] "maybe param" "temp"
    (425589 'move' tmp[425578](131253 call == tag[131243] standalone[451]))
    unknown call_tmp[659341] "expr temp" "maybe param" "maybe type" "temp"
    (659344 'move' call_tmp[659341](425591 call _cond_invalid tmp[425578]))
    if call_tmp[659341]
    {
      (425594 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566396] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566397] "maybe param" "temp"
    unknown call_tmp[659346] "expr temp" "maybe param" "maybe type" "temp"
    (659349 'move' call_tmp[659346](425579 call isTrue tmp[425578]))
    (566402 'move' tmp[566397](566400 call _cond_test call_tmp[659346]))
    if tmp[566397]
    {
      unknown tmp[566404] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659353] "expr temp" "maybe param" "maybe type" "temp"
      (659356 'move' call_tmp[659353](384247 call _value _mt[243] this[133740]))
      unknown call_tmp[659358] "expr temp" "maybe param" "maybe type" "temp"
      (659361 'move' call_tmp[659358](131261 'method call resolves' call_tmp[659353] "these"(tag = tag[131243])))
      (566406 'move' tmp[566404](425582 call isTrue call_tmp[659358]))
      (566411 'move' tmp[566396](566408 '_paramFoldLogical' tmp[566397] tmp[566404]))
    }
    {
      (566416 'move' tmp[566396](566413 '_paramFoldLogical' tmp[566397] 0))
    }
    (748365 call chpl_statementLevelSymbol tmp[566396])
  }
  function _array[133594](?).these[131319](arg _mt[133746]:_MT[238], arg this[133744]:_array[133594](?), param arg tag[131316]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[518142] "RVV" "temp"
    {
      unknown _indexOfInterest[131339] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131340] "expr temp" "temp"
      unknown call_tmp[659365] "expr temp" "maybe param" "maybe type" "temp"
      (659368 'move' call_tmp[659365](359954 call _value _mt[243] this[133744]))
      unknown call_tmp[659372] "expr temp" "maybe param" "maybe type" "temp"
      (659375 'move' call_tmp[659372](131335 call(131330 call (partial) these _mt[243] call_tmp[659365]) tag[131316]))
      (131349 'move' _iterator[131340](131347 call _getIterator call_tmp[659372]))
      Defer
      {
        {
          (131366 call _freeIterator _iterator[131340])
        }
      }
      { scopeless type
        (131355 'move' _indexOfInterest[131339](131352 call iteratorIndex _iterator[131340]))
      }
      ForLoop[131341]
      {
        unknown followThis[131359] "index var" "insert auto destroy"
        (480271 'end of statement')
        (131361 'move' followThis[131359] _indexOfInterest[131339])
        (480272 'end of statement' followThis[131359])
        unknown yret[518146] "YVV" "temp"
        (518149 'move' yret[518146](518148 'deref' followThis[131359]))
        (518151 yield yret[518146])
        (480274 'end of statement' followThis[131359])
        label _continueLabel[131344]
        _indexOfInterest[131339]
        _iterator[131340]
      }
      label _breakLabel[131345]
    }
    (518144 return ret[518142])
  }
  where {
    (131326 call == tag[131316] leader[447])
  }
  function _array[133594](?).these[131383](arg _mt[133750]:_MT[238], arg this[133748]:_array[133594](?), param arg tag[131380]:iterKind[453], arg followThis[131385]:_any[178](?), param arg fast[131389]:bool[10] =
  0) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[518155] "RVV" "temp"
    unknown call_tmp[659379] "expr temp" "maybe param" "maybe type" "temp"
    (659382 'move' call_tmp[659379](384260 call _value _mt[243] this[133748]))
    unknown call_tmp[659384] "expr temp" "maybe param" "maybe type" "temp"
    (659387 'move' call_tmp[659384](131409 'method call resolves' call_tmp[659379] "these"(tag = tag[131380]) followThis[131385](fast = fast[131389])))
    unknown call_tmp[659389] "expr temp" "maybe param" "maybe type" "temp"
    (659392 'move' call_tmp[659389](131507 call _cond_test call_tmp[659384]))
    if call_tmp[659389]
    {
      {
        unknown _indexOfInterest[131425] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131426] "expr temp" "temp"
        unknown call_tmp[659396] "expr temp" "maybe param" "maybe type" "temp"
        (659399 'move' call_tmp[659396](359959 call _value _mt[243] this[133748]))
        unknown call_tmp[659403] "expr temp" "maybe param" "maybe type" "temp"
        (659406 'move' call_tmp[659403](131421 call(131412 call (partial) these _mt[243] call_tmp[659396])(tag = tag[131380]) followThis[131385](fast = fast[131389])))
        (131435 'move' _iterator[131426](131433 call _getIterator call_tmp[659403]))
        Defer
        {
          {
            (131452 call _freeIterator _iterator[131426])
          }
        }
        { scopeless type
          (131441 'move' _indexOfInterest[131425](131438 call iteratorIndex _iterator[131426]))
        }
        ForLoop[131427]
        {
          unknown i[131445] "index var" "insert auto destroy"
          (480277 'end of statement')
          (131447 'move' i[131445] _indexOfInterest[131425])
          (480278 'end of statement' i[131445])
          unknown yret[518159] "YVV" "temp"
          (518162 'move' yret[518159](518161 'addr of' i[131445]))
          (518164 yield yret[518159])
          (480280 'end of statement' i[131445])
          label _continueLabel[131430]
          _indexOfInterest[131425]
          _iterator[131426]
        }
        label _breakLabel[131431]
      }
    }
    {
      {
        unknown _indexOfInterest[131472] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131473] "expr temp" "temp"
        unknown call_tmp[659410] "expr temp" "maybe param" "maybe type" "temp"
        (659413 'move' call_tmp[659410](359963 call _value _mt[243] this[133748]))
        unknown call_tmp[659417] "expr temp" "maybe param" "maybe type" "temp"
        (659420 'move' call_tmp[659417](131468 call(131462 call (partial) these _mt[243] call_tmp[659410]) tag[131380] followThis[131385]))
        (131482 'move' _iterator[131473](131480 call _getIterator call_tmp[659417]))
        Defer
        {
          {
            (131499 call _freeIterator _iterator[131473])
          }
        }
        { scopeless type
          (131488 'move' _indexOfInterest[131472](131485 call iteratorIndex _iterator[131473]))
        }
        ForLoop[131474]
        {
          unknown i[131492] "index var" "insert auto destroy"
          (480283 'end of statement')
          (131494 'move' i[131492] _indexOfInterest[131472])
          (480284 'end of statement' i[131492])
          unknown yret[518166] "YVV" "temp"
          (518169 'move' yret[518166](518168 'addr of' i[131492]))
          (518171 yield yret[518166])
          (480286 'end of statement' i[131492])
          label _continueLabel[131477]
          _indexOfInterest[131472]
          _iterator[131473]
        }
        label _breakLabel[131478]
      }
    }
    (518157 return ret[518155])
  }
  where {
    (131398 call == tag[131380] follower[449])
  }
  function _array[133594](?).numElements[131517](arg _mt[133754]:_MT[238], arg this[133752]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518175] "RVV" "temp"
    unknown call_tmp[659422] "expr temp" "maybe param" "maybe type" "temp"
    (659425 'move' call_tmp[659422](131554 call + "'array.numElements' is deprecated - " "please use 'array.size' instead"))
    (131557 call compilerWarning call_tmp[659422])
    (480288 'end of statement')
    unknown call_tmp[659429] "expr temp" "maybe param" "maybe type" "temp"
    (659432 'move' call_tmp[659429](384274 call size _mt[243] this[133752]))
    (518180 'move' ret[518175](518179 'deref' call_tmp[659429]))
    (518177 return ret[518175])
  }
  function _array[133594](?).size[131567](arg _mt[133758]:_MT[238], arg this[133756]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518184] "RVV" "temp"
    unknown call_tmp[659436] "expr temp" "maybe param" "maybe type" "temp"
    (659439 'move' call_tmp[659436](359967 call _value _mt[243] this[133756]))
    unknown call_tmp[659443] "expr temp" "maybe param" "maybe type" "temp"
    (659446 'move' call_tmp[659443](131570 call dom _mt[243] call_tmp[659436]))
    unknown call_tmp[659450] "expr temp" "maybe param" "maybe type" "temp"
    (659453 'move' call_tmp[659450](131573 call dsiNumIndices _mt[243] call_tmp[659443]))
    (518189 'move' ret[518184](518188 'deref' call_tmp[659450]))
    (518186 return ret[518184])
  }
  function _array[133594](?).chpl_checkArrArgDoms[131587](arg _mt[133762]:_MT[238], arg this[133760]:_array[133594](?), arg formalDom[131584]:_domain[125908](?), param arg runtimeChecks[131590]:bool[10]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[659457] "expr temp" "maybe param" "maybe type" "temp"
    (659460 'move' call_tmp[659457](131594 call rank _mt[243] formalDom[131584]))
    unknown call_tmp[659464] "expr temp" "maybe param" "maybe type" "temp"
    (659467 'move' call_tmp[659464](131598 call _dom _mt[243] this[133760]))
    unknown call_tmp[659471] "expr temp" "maybe param" "maybe type" "temp"
    (659474 'move' call_tmp[659471](131601 call rank _mt[243] call_tmp[659464]))
    unknown call_tmp[659476] "expr temp" "maybe param" "maybe type" "temp"
    (659479 'move' call_tmp[659476](131604 call != call_tmp[659457] call_tmp[659471]))
    unknown call_tmp[659481] "expr temp" "maybe param" "maybe type" "temp"
    (659484 'move' call_tmp[659481](131669 call _cond_test call_tmp[659476]))
    if call_tmp[659481]
    {
      unknown call_tmp[659488] "expr temp" "maybe param" "maybe type" "temp"
      (659491 'move' call_tmp[659488](131625 call rank _mt[243] formalDom[131584]))
      unknown call_tmp[659493] "expr temp" "maybe param" "maybe type" "temp"
      (659496 'move' call_tmp[659493](131629 call _cast string[26] call_tmp[659488]))
      unknown call_tmp[659498] "expr temp" "maybe param" "maybe type" "temp"
      (659501 'move' call_tmp[659498](131631 call + "Rank mismatch passing array argument: expected " call_tmp[659493]))
      unknown call_tmp[659503] "expr temp" "maybe param" "maybe type" "temp"
      (659506 'move' call_tmp[659503](131650 call + call_tmp[659498] " but got "))
      unknown call_tmp[659510] "expr temp" "maybe param" "maybe type" "temp"
      (659513 'move' call_tmp[659510](131653 call _dom _mt[243] this[133760]))
      unknown call_tmp[659517] "expr temp" "maybe param" "maybe type" "temp"
      (659520 'move' call_tmp[659517](131656 call rank _mt[243] call_tmp[659510]))
      unknown call_tmp[659522] "expr temp" "maybe param" "maybe type" "temp"
      (659525 'move' call_tmp[659522](131660 call _cast string[26] call_tmp[659517]))
      unknown call_tmp[659527] "expr temp" "maybe param" "maybe type" "temp"
      (659530 'move' call_tmp[659527](131662 call + call_tmp[659503] call_tmp[659522]))
      (131667 call compilerError call_tmp[659527](errorDepth = 2))
    }
    { scopeless type
      unknown call_type_tmp[492245] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659534] "expr temp" "maybe param" "maybe type" "temp"
      (659537 'move' call_tmp[659534](131676 call dist _mt[243] formalDom[131584]))
      unknown call_tmp[659541] "expr temp" "maybe param" "maybe type" "temp"
      (659544 'move' call_tmp[659541](131679 call _value _mt[243] call_tmp[659534]))
      (492249 'move' call_type_tmp[492245](131682 'typeof' call_tmp[659541]))
    }
    unknown call_tmp[659546] "expr temp" "maybe param" "maybe type" "temp"
    (659549 'move' call_tmp[659546](131685 call != call_type_tmp[492245] unmanaged DefaultDist[415487]))
    unknown call_tmp[659551] "expr temp" "maybe param" "maybe type" "temp"
    (659554 'move' call_tmp[659551](131813 call _cond_test call_tmp[659546]))
    if call_tmp[659551]
    {
      { scopeless type
        unknown call_type_tmp[492251] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659558] "expr temp" "maybe param" "maybe type" "temp"
        (659561 'move' call_tmp[659558](131690 call _dom _mt[243] this[133760]))
        (492255 'move' call_type_tmp[492251](131693 'typeof' call_tmp[659558]))
      }
      unknown call_tmp[659563] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (659566 'move' call_tmp[659563](131688 'typeof' formalDom[131584]))
      unknown call_tmp[659568] "expr temp" "maybe param" "maybe type" "temp"
      (659571 'move' call_tmp[659568](131694 call != call_tmp[659563] call_type_tmp[492251]))
      unknown call_tmp[659573] "expr temp" "maybe param" "maybe type" "temp"
      (659576 'move' call_tmp[659573](131719 call _cond_test call_tmp[659568]))
      if call_tmp[659573]
      {
        (131717 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      unknown tmp[425599] "maybe param" "temp"
      (425610 'move' tmp[425599] runtimeChecks[131590])
      unknown call_tmp[659578] "expr temp" "maybe param" "maybe type" "temp"
      (659581 'move' call_tmp[659578](425612 call _cond_invalid tmp[425599]))
      if call_tmp[659578]
      {
        (425615 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[566423] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[566424] "maybe param" "temp"
      unknown call_tmp[659583] "expr temp" "maybe param" "maybe type" "temp"
      (659586 'move' call_tmp[659583](425600 call isTrue tmp[425599]))
      (566429 'move' tmp[566424](566427 call _cond_test call_tmp[659583]))
      if tmp[566424]
      {
        unknown tmp[566431] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[659590] "expr temp" "maybe param" "maybe type" "temp"
        (659593 'move' call_tmp[659590](131727 call dist _mt[243] formalDom[131584]))
        unknown call_tmp[659597] "expr temp" "maybe param" "maybe type" "temp"
        (659600 'move' call_tmp[659597](131731 call _dom _mt[243] this[133760]))
        unknown call_tmp[659604] "expr temp" "maybe param" "maybe type" "temp"
        (659607 'move' call_tmp[659604](131734 call dist _mt[243] call_tmp[659597]))
        unknown call_tmp[659609] "expr temp" "maybe param" "maybe type" "temp"
        (659612 'move' call_tmp[659609](131737 call != call_tmp[659590] call_tmp[659604]))
        (566433 'move' tmp[566431](425603 call isTrue call_tmp[659609]))
        (566438 'move' tmp[566423](566435 '_paramFoldLogical' tmp[566424] tmp[566431]))
      }
      {
        (566443 'move' tmp[566423](566440 '_paramFoldLogical' tmp[566424] 0))
      }
      unknown call_tmp[659614] "expr temp" "maybe param" "maybe type" "temp"
      (659617 'move' call_tmp[659614](131808 call _cond_test tmp[566423]))
      if call_tmp[659614]
      {
        unknown call_tmp[659621] "expr temp" "maybe param" "maybe type" "temp"
        (659624 'move' call_tmp[659621](131778 call dist _mt[243] formalDom[131584]))
        unknown call_tmp[659628] "expr temp" "maybe param" "maybe type" "temp"
        (659631 'move' call_tmp[659628](131800 call _dom _mt[243] this[133760]))
        unknown call_tmp[659635] "expr temp" "maybe param" "maybe type" "temp"
        (659638 'move' call_tmp[659635](131803 call dist _mt[243] call_tmp[659628]))
        (131806 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: " call_tmp[659621] "\n" "  Actual domain map is: " call_tmp[659635])
      }
    }
    unknown tmp[425620] "maybe param" "temp"
    (425631 'move' tmp[425620] runtimeChecks[131590])
    unknown call_tmp[659640] "expr temp" "maybe param" "maybe type" "temp"
    (659643 'move' call_tmp[659640](425633 call _cond_invalid tmp[425620]))
    if call_tmp[659640]
    {
      (425636 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566450] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566451] "maybe param" "temp"
    unknown call_tmp[659645] "expr temp" "maybe param" "maybe type" "temp"
    (659648 'move' call_tmp[659645](425621 call isTrue tmp[425620]))
    (566456 'move' tmp[566451](566454 call _cond_test call_tmp[659645]))
    if tmp[566451]
    {
      unknown tmp[566458] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659652] "expr temp" "maybe param" "maybe type" "temp"
      (659655 'move' call_tmp[659652](131820 call _dom _mt[243] this[133760]))
      unknown call_tmp[659657] "expr temp" "maybe param" "maybe type" "temp"
      (659660 'move' call_tmp[659657](131823 call != formalDom[131584] call_tmp[659652]))
      (566460 'move' tmp[566458](425624 call isTrue call_tmp[659657]))
      (566465 'move' tmp[566450](566462 '_paramFoldLogical' tmp[566451] tmp[566458]))
    }
    {
      (566470 'move' tmp[566450](566467 '_paramFoldLogical' tmp[566451] 0))
    }
    unknown call_tmp[659662] "expr temp" "maybe param" "maybe type" "temp"
    (659665 'move' call_tmp[659662](131888 call _cond_test tmp[566450]))
    if call_tmp[659662]
    {
      unknown call_tmp[659669] "expr temp" "maybe param" "maybe type" "temp"
      (659672 'move' call_tmp[659669](131883 call _dom _mt[243] this[133760]))
      (131886 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom[131584] "\n" "  Actual domain is: " call_tmp[659669])
    }
    (518191 return _void[55])
  }
  function _array[133594](?).reindex[131901](arg _mt[133766]:_MT[238], arg this[133764]:_array[133594](?), arg newDomain[131898]:_domain[125908](?)) : _unknown[51] "inline" "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518195] "RVV" "temp"
    unknown call_tmp[659678] "expr temp" "maybe param" "maybe type" "temp"
    (659681 'move' call_tmp[659678](131922 call(131918 call (partial) dims _mt[243] newDomain[131898])))
    unknown call_tmp[659683] "expr temp" "maybe param" "maybe type" "temp"
    (659686 'move' call_tmp[659683](131925 call(384287 call (partial) reindex _mt[243] this[133764])(131923 'expand_tuple' call_tmp[659678])))
    (518200 'move' ret[518195](518199 'deref' call_tmp[659683]))
    (518197 return ret[518195])
  }
  where {
    unknown tmp[425641] "maybe param" "temp"
    unknown call_tmp[659690] "expr temp" "maybe param" "maybe type" "temp"
    (659693 'move' call_tmp[659690](131905 call _dom _mt[243] this[133764]))
    (425652 'move' tmp[425641](131909 call isRectangularDom call_tmp[659690]))
    unknown call_tmp[659695] "expr temp" "maybe param" "maybe type" "temp"
    (659698 'move' call_tmp[659695](425654 call _cond_invalid tmp[425641]))
    if call_tmp[659695]
    {
      (425657 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566477] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566478] "maybe param" "temp"
    unknown call_tmp[659700] "expr temp" "maybe param" "maybe type" "temp"
    (659703 'move' call_tmp[659700](425642 call isTrue tmp[425641]))
    (566483 'move' tmp[566478](566481 call _cond_test call_tmp[659700]))
    if tmp[566478]
    {
      unknown tmp[566485] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659705] "expr temp" "maybe param" "maybe type" "temp"
      (659708 'move' call_tmp[659705](131913 call isRectangularDom newDomain[131898]))
      (566487 'move' tmp[566485](425645 call isTrue call_tmp[659705]))
      (566492 'move' tmp[566477](566489 '_paramFoldLogical' tmp[566478] tmp[566485]))
    }
    {
      (566497 'move' tmp[566477](566494 '_paramFoldLogical' tmp[566478] 0))
    }
    (748367 call chpl_statementLevelSymbol tmp[566477])
  }
  function _array[133594](?).reindex[131938](arg _mt[133770]:_MT[238], arg this[133768]:_array[133594](?), arg newDims[131935]:_any[178](?) ...) : _unknown[51] "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518204] "RVV" "temp"
    {
      unknown i[131992] "dead at end of block" "insert auto destroy"
      (543054 'init var' i[131992] 0)
      (480298 'end of statement')
      unknown tmp[131993] "maybe param" "temp"
      unknown call_tmp[659712] "expr temp" "maybe param" "maybe type" "temp"
      (659715 'move' call_tmp[659712](131949 call size _mt[243] newDims[131935]))
      unknown call_tmp[659717] "expr temp" "maybe param" "maybe type" "temp"
      (659720 'move' call_tmp[659717](131953 call - call_tmp[659712] 1))
      (132005 'move' tmp[131993](132003 call chpl_compute_low_param_loop_bound 0 call_tmp[659717]))
      unknown tmp[131994] "maybe param" "temp"
      unknown call_tmp[659724] "expr temp" "maybe param" "maybe type" "temp"
      (659727 'move' call_tmp[659724](132012 call size _mt[243] newDims[131935]))
      unknown call_tmp[659729] "expr temp" "maybe param" "maybe type" "temp"
      (659732 'move' call_tmp[659729](132010 call - call_tmp[659724] 1))
      (132018 'move' tmp[131994](132016 call chpl_compute_high_param_loop_bound 0 call_tmp[659729]))
      unknown tmp[131995] "maybe param" "temp"
      (132021 'move' tmp[131995] 1)
      ParamForLoop[132023]
      { i[131992] tmp[131993] tmp[131994] tmp[131995]
        unknown call_tmp[659734] "expr temp" "maybe param" "maybe type" "temp"
        (659737 'move' call_tmp[659734](131961 call newDims[131935] i[131992]))
        unknown call_tmp[659739] "expr temp" "maybe param" "maybe type" "temp"
        (659742 'move' call_tmp[659739](131963 call isRange call_tmp[659734]))
        unknown call_tmp[659744] "expr temp" "maybe param" "maybe type" "temp"
        (659747 'move' call_tmp[659744](131964 call ! call_tmp[659739]))
        unknown call_tmp[659749] "expr temp" "maybe param" "maybe type" "temp"
        (659752 'move' call_tmp[659749](131987 call _cond_test call_tmp[659744]))
        if call_tmp[659749]
        {
          (131985 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[131997]
      label _breakLabel[131996]
    }
    unknown call_tmp[659756] "expr temp" "maybe param" "maybe type" "temp"
    (659759 'move' call_tmp[659756](132034 call rank _mt[243] this[133768]))
    unknown call_tmp[659763] "expr temp" "maybe param" "maybe type" "temp"
    (659766 'move' call_tmp[659763](132038 call size _mt[243] newDims[131935]))
    unknown call_tmp[659768] "expr temp" "maybe param" "maybe type" "temp"
    (659771 'move' call_tmp[659768](132041 call != call_tmp[659756] call_tmp[659763]))
    unknown call_tmp[659773] "expr temp" "maybe param" "maybe type" "temp"
    (659776 'move' call_tmp[659773](132101 call _cond_test call_tmp[659768]))
    if call_tmp[659773]
    {
      unknown call_tmp[659780] "expr temp" "maybe param" "maybe type" "temp"
      (659783 'move' call_tmp[659780](132062 call rank _mt[243] this[133768]))
      unknown call_tmp[659785] "expr temp" "maybe param" "maybe type" "temp"
      (659788 'move' call_tmp[659785](132066 call _cast string[26] call_tmp[659780]))
      unknown call_tmp[659790] "expr temp" "maybe param" "maybe type" "temp"
      (659793 'move' call_tmp[659790](132068 call + "rank mismatch: cannot reindex() from " call_tmp[659785]))
      unknown call_tmp[659795] "expr temp" "maybe param" "maybe type" "temp"
      (659798 'move' call_tmp[659795](132087 call + call_tmp[659790] " dimension(s) to "))
      unknown call_tmp[659802] "expr temp" "maybe param" "maybe type" "temp"
      (659805 'move' call_tmp[659802](132090 call size _mt[243] newDims[131935]))
      unknown call_tmp[659807] "expr temp" "maybe param" "maybe type" "temp"
      (659810 'move' call_tmp[659807](132094 call _cast string[26] call_tmp[659802]))
      unknown call_tmp[659812] "expr temp" "maybe param" "maybe type" "temp"
      (659815 'move' call_tmp[659812](132096 call + call_tmp[659795] call_tmp[659807]))
      (132099 call compilerError call_tmp[659812])
    }
    {
      unknown i[132179] "dead at end of block" "insert auto destroy"
      (543056 'init var' i[132179] 0)
      (480301 'end of statement')
      unknown tmp[132180] "maybe param" "temp"
      unknown call_tmp[659819] "expr temp" "maybe param" "maybe type" "temp"
      (659822 'move' call_tmp[659819](384293 call rank _mt[243] this[133768]))
      unknown call_tmp[659824] "expr temp" "maybe param" "maybe type" "temp"
      (659827 'move' call_tmp[659824](132109 call - call_tmp[659819] 1))
      (132192 'move' tmp[132180](132190 call chpl_compute_low_param_loop_bound 0 call_tmp[659824]))
      unknown tmp[132181] "maybe param" "temp"
      unknown call_tmp[659831] "expr temp" "maybe param" "maybe type" "temp"
      (659834 'move' call_tmp[659831](384301 call rank _mt[243] this[133768]))
      unknown call_tmp[659836] "expr temp" "maybe param" "maybe type" "temp"
      (659839 'move' call_tmp[659836](132197 call - call_tmp[659831] 1))
      (132202 'move' tmp[132181](132200 call chpl_compute_high_param_loop_bound 0 call_tmp[659836]))
      unknown tmp[132182] "maybe param" "temp"
      (132205 'move' tmp[132182] 1)
      ParamForLoop[132207]
      { i[132179] tmp[132180] tmp[132181] tmp[132182]
        unknown call_tmp[659841] "expr temp" "maybe param" "maybe type" "temp"
        (659844 'move' call_tmp[659841](132116 call newDims[131935] i[132179]))
        unknown call_tmp[659848] "expr temp" "maybe param" "maybe type" "temp"
        (659851 'move' call_tmp[659848](132117 call size _mt[243] call_tmp[659841]))
        unknown call_tmp[659855] "expr temp" "maybe param" "maybe type" "temp"
        (659858 'move' call_tmp[659855](359992 call _value _mt[243] this[133768]))
        unknown call_tmp[659862] "expr temp" "maybe param" "maybe type" "temp"
        (659865 'move' call_tmp[659862](132121 call dom _mt[243] call_tmp[659855]))
        unknown call_tmp[659869] "expr temp" "maybe param" "maybe type" "temp"
        (659872 'move' call_tmp[659869](132129 call(132124 call (partial) dsiDim _mt[243] call_tmp[659862]) i[132179]))
        unknown call_tmp[659876] "expr temp" "maybe param" "maybe type" "temp"
        (659879 'move' call_tmp[659876](132130 call size _mt[243] call_tmp[659869]))
        unknown call_tmp[659881] "expr temp" "maybe param" "maybe type" "temp"
        (659884 'move' call_tmp[659881](132133 call != call_tmp[659848] call_tmp[659876]))
        unknown call_tmp[659886] "expr temp" "maybe param" "maybe type" "temp"
        (659889 'move' call_tmp[659886](132174 call _cond_test call_tmp[659881]))
        if call_tmp[659886]
        {
          (132172 call halt "extent in dimension " i[132179] " does not match actual")
          (480302 'end of statement' i[132179])
        }
      }
      label _unused_continueLabel[132184]
      label _breakLabel[132183]
    }
    unknown call_tmp[659893] "expr temp" "maybe param" "maybe type" "temp"
    (659896 'move' call_tmp[659893](132217 call _value _mt[243] this[133768]))
    unknown call_tmp[659900] "maybe param" "maybe type" "temp"
    (659903 'move' call_tmp[659900](132220 call dom _mt[243] call_tmp[659893]))
    const thisDomClass[132223] "dead at end of block" "const" "insert auto destroy"
    (543058 'init var' thisDomClass[132223] call_tmp[659900])
    (132226 'end of statement')
    unknown call_tmp[659907] "expr temp" "maybe param" "maybe type" "temp"
    (659910 'move' call_tmp[659907](132234 call pid _mt[243] thisDomClass[132223]))
    unknown call_tmp[659912] "maybe param" "maybe type" "temp"
    (659915 'move' call_tmp[659912](132238 call _build_tuple thisDomClass[132223] call_tmp[659907]))
    const tmp[132240] "dead at end of block" "const" "insert auto destroy" "temp"
    (543060 'init var' tmp[132240] call_tmp[659912])
    (132247 call _check_tuple_var_decl tmp[132240] 2)
    (480304 'end of statement')
    unknown call_tmp[659917] "maybe param" "maybe type" "temp"
    (659920 'move' call_tmp[659917](132241 call tmp[132240] 0))
    const dom[132227] "dead at end of block" "const" "insert auto destroy"
    (543062 'init var' dom[132227] call_tmp[659917])
    unknown call_tmp[659922] "maybe param" "maybe type" "temp"
    (659925 'move' call_tmp[659922](132244 call tmp[132240] 1))
    const dompid[132229] "dead at end of block" "const" "insert auto destroy"
    (543064 'init var' dompid[132229] call_tmp[659922])
    (132252 'end of statement')
    unknown call_tmp[659927] "maybe param" "maybe type" "temp"
    (659930 'move' call_tmp[659927](132256 call chpl__buildDomainExpr(132254 'expand_tuple' newDims[131935])))
    const updom[132258] "dead at end of block" "const" "no auto destroy"
    (543066 'init var' updom[132258] call_tmp[659927])
    (132261 'end of statement')
    unknown call_tmp[659934] "expr temp" "maybe param" "maybe type" "temp"
    (659937 'move' call_tmp[659934](132267 call _dom _mt[243] this[133768]))
    unknown call_tmp[659941] "expr temp" "maybe param" "maybe type" "temp"
    (659944 'move' call_tmp[659941](132270 call dist _mt[243] call_tmp[659934]))
    unknown call_tmp[659948] "expr temp" "maybe param" "maybe type" "temp"
    (659951 'move' call_tmp[659948](132273 call _pid _mt[243] call_tmp[659941]))
    unknown call_tmp[659955] "expr temp" "maybe param" "maybe type" "temp"
    (659958 'move' call_tmp[659955](132279 call _dom _mt[243] this[133768]))
    unknown call_tmp[659962] "expr temp" "maybe param" "maybe type" "temp"
    (659965 'move' call_tmp[659962](132282 call dist _mt[243] call_tmp[659955]))
    unknown call_tmp[659969] "expr temp" "maybe param" "maybe type" "temp"
    (659972 'move' call_tmp[659969](132285 call _instance _mt[243] call_tmp[659962]))
    unknown call_tmp[659976] "expr temp" "maybe param" "maybe type" "temp"
    (659979 'move' call_tmp[659976](132290 call _value _mt[243] updom[132258]))
    unknown call_tmp[659981] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659984 'move' call_tmp[659981](747945 'new' ArrayViewReindexDist[384307](?)(downDistPid = call_tmp[659948])(downDistInst = call_tmp[659969])(updom = call_tmp[659976])(downdomPid = dompid[132229])(downdomInst = dom[132227])(_chpl_manager = unmanaged[220](?))))
    const redist[132299] "dead at end of block" "const" "insert auto destroy"
    (543068 'init var' redist[132299] call_tmp[659981])
    (132302 'end of statement')
    unknown call_tmp[659986] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659989 'move' call_tmp[659986](747946 'new' _distribution[118973](?) redist[132299]))
    const redistRec[132308] "dead at end of block" "const" "insert auto destroy"
    (543070 'init var' redistRec[132308] call_tmp[659986])
    (132311 'end of statement')
    unknown call_tmp[659993] "expr temp" "maybe param" "maybe type" "temp"
    (659996 'move' call_tmp[659993](384317 call rank _mt[243] this[133768]))
    unknown call_tmp[660000] "expr temp" "maybe param" "maybe type" "temp"
    (660003 'move' call_tmp[660000](132318 call idxType _mt[243] updom[132258]))
    unknown call_tmp[660007] "expr temp" "maybe param" "maybe type" "temp"
    (660010 'move' call_tmp[660007](132322 call stridable _mt[243] updom[132258]))
    unknown call_tmp[660014] "expr temp" "maybe param" "maybe type" "temp"
    (660017 'move' call_tmp[660014](132330 call(132326 call (partial) dims _mt[243] updom[132258])))
    unknown call_tmp[660019] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (660022 'move' call_tmp[660019](747947 'new' _domain[125908](?) redistRec[132308] call_tmp[659993] call_tmp[660000] call_tmp[660007] call_tmp[660014]))
    const newDom[132332] "dead at end of block" "const" "no auto destroy"
    (543072 'init var' newDom[132332] call_tmp[660019])
    (132335 'end of statement')
    unknown call_tmp[660026] "expr temp" "maybe param" "maybe type" "temp"
    (660029 'move' call_tmp[660026](132337 call _value _mt[243] newDom[132332]))
    unknown call_tmp[660033] "expr temp" "maybe param" "maybe type" "temp"
    (660036 'move' call_tmp[660033](132340 call _free_when_no_arrs _mt[243] call_tmp[660026]))
    (132344 call = call_tmp[660033] 1)
    (480313 'end of statement' newDom[132332])
    unknown call_tmp[660040] "expr temp" "maybe param" "maybe type" "temp"
    (660043 'move' call_tmp[660040](132353 call _value _mt[243] this[133768]))
    unknown call_tmp[660047] "expr temp" "maybe param" "maybe type" "temp"
    (660050 'move' call_tmp[660047](132357 call _pid _mt[243] this[133768]))
    unknown call_tmp[660052] "maybe param" "maybe type" "temp"
    (660055 'move' call_tmp[660052](132361 call _build_tuple call_tmp[660040] call_tmp[660047]))
    const tmp[132363] "dead at end of block" "const" "insert auto destroy" "temp"
    (543074 'init var' tmp[132363] call_tmp[660052])
    (132370 call _check_tuple_var_decl tmp[132363] 2)
    (480315 'end of statement')
    unknown call_tmp[660057] "maybe param" "maybe type" "temp"
    (660060 'move' call_tmp[660057](132364 call tmp[132363] 0))
    const arr[132347] "dead at end of block" "const" "insert auto destroy"
    (543076 'init var' arr[132347] call_tmp[660057])
    unknown call_tmp[660062] "maybe param" "maybe type" "temp"
    (660065 'move' call_tmp[660062](132367 call tmp[132363] 1))
    const arrpid[132349] "dead at end of block" "const" "insert auto destroy"
    (543078 'init var' arrpid[132349] call_tmp[660062])
    (132375 'end of statement')
    unknown call_tmp[660069] "expr temp" "maybe param" "maybe type" "temp"
    (660072 'move' call_tmp[660069](132381 call eltType _mt[243] this[133768]))
    unknown call_tmp[660076] "expr temp" "maybe param" "maybe type" "temp"
    (660079 'move' call_tmp[660076](132387 call _pid _mt[243] newDom[132332]))
    unknown call_tmp[660083] "expr temp" "maybe param" "maybe type" "temp"
    (660086 'move' call_tmp[660083](132392 call _instance _mt[243] newDom[132332]))
    unknown call_tmp[660088] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (660091 'move' call_tmp[660088](747948 'new' ArrayViewReindexArr[384321](?)(eltType = call_tmp[660069])(_DomPid = call_tmp[660076])(dom = call_tmp[660083])(_ArrPid = arrpid[132349])(_ArrInstance = arr[132347])(_chpl_manager = unmanaged[220](?))))
    unknown x[132401] "dead at end of block" "insert auto destroy"
    (543080 'init var' x[132401] call_tmp[660088])
    (132404 'end of statement' updom[132258] dompid[132229] dom[132227] redist[132299] redistRec[132308] updom[132258] updom[132258] updom[132258] newDom[132332] newDom[132332] arrpid[132349] arr[132347])
    unknown call_tmp[660095] "expr temp" "maybe param" "maybe type" "temp"
    (660098 'move' call_tmp[660095](132406 call _value _mt[243] newDom[132332]))
    (132416 call(132409 call (partial) add_arr _mt[243] call_tmp[660095]) x[132401](locking = 0))
    (480320 'end of statement' newDom[132332] x[132401])
    unknown call_tmp[660102] "expr temp" "maybe param" "maybe type" "temp"
    (660105 'move' call_tmp[660102](132421 call _newArray x[132401]))
    (518209 'move' ret[518204](518208 'deref' call_tmp[660102]))
    gotoReturn _end_reindex[518202] _end_reindex[518202]
    (480323 'end of statement' x[132401])
    label _end_reindex[518202]
    (518206 return ret[518204])
  }
  where {
    unknown call_tmp[660109] "expr temp" "maybe param" "maybe type" "temp"
    (660112 'move' call_tmp[660109](131942 call _dom _mt[243] this[133768]))
    (131946 call isRectangularDom call_tmp[660109])
  }
  function _array[133594](?).reindex[132433](arg _mt[133774]:_MT[238], arg this[133772]:_array[133594](?), arg d[132430]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns aliasing array" "no return value for void"
  {
    (132454 call compilerError "Reindexing non-rectangular arrays is not permitted.")
    (518213 return _void[55])
  }
  function _array[133594](?).writeThis[132463](arg _mt[133778]:_MT[238], arg this[133776]:_array[133594](?), arg f[132461]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660116] "expr temp" "maybe param" "maybe type" "temp"
    (660119 'move' call_tmp[660116](360011 call _value _mt[243] this[133776]))
    (132471 call(132466 call (partial) dsiSerialWrite _mt[243] call_tmp[660116]) f[132461])
    (518215 return _void[55])
  }
  function _array[133594](?).readThis[132480](arg _mt[133782]:_MT[238], arg this[133780]:_array[133594](?), arg f[132478]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660125] "expr temp" "maybe param" "maybe type" "temp"
    (660128 'move' call_tmp[660125](360015 call _value _mt[243] this[133780]))
    (132488 call(132483 call (partial) dsiSerialRead _mt[243] call_tmp[660125]) f[132478])
    (518217 return _void[55])
  }
  function _array[133594](?).IRV[132495](arg _mt[133786]:_MT[238], arg this[133784]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens" "no return value for void"
  {
    (132522 call compilerError "only sparse arrays have an IRV")
    (518219 return _void[55])
  }
  where {
    unknown call_tmp[660132] "expr temp" "maybe param" "maybe type" "temp"
    (660135 'move' call_tmp[660132](132500 call isSparseArr this[133784]))
    (132501 call ! call_tmp[660132])
  }
  function _array[133594](?).IRV[132530](arg _mt[133790]:_MT[238], arg this[133788]:_array[133594](?)) ref : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[518223] "RVV" "temp"
    unknown call_tmp[660139] "expr temp" "maybe param" "maybe type" "temp"
    (660142 'move' call_tmp[660139](360019 call _value _mt[243] this[133788]))
    unknown call_tmp[660146] "expr temp" "maybe param" "maybe type" "temp"
    (660149 'move' call_tmp[660146](132539 call IRV _mt[243] call_tmp[660139]))
    (518228 'move' ret[518223](518227 'addr of' call_tmp[660146]))
    (518225 return ret[518223])
  }
  where {
    (132535 call isSparseArr this[133788])
  }
  function _array[133594](?).sorted[132559](arg _mt[133794]:_MT[238], arg this[133792]:_array[133594](?), arg comparator[132555]:_any[178](?) :
  (748879 call chpl_defaultComparator) =
  (132554 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518232] "RVV" "temp"
    unknown call_tmp[660153] "expr temp" "maybe param" "maybe type" "temp"
    (660156 'move' call_tmp[660153](384334 call _value _mt[243] this[133792]))
    unknown call_tmp[660158] "expr temp" "maybe param" "maybe type" "temp"
    (660161 'move' call_tmp[660158](132583 call canResolveMethod module=[255] Reflection[224903] call_tmp[660153] "dsiSorted" comparator[132555]))
    unknown call_tmp[660163] "expr temp" "maybe param" "maybe type" "temp"
    (660166 'move' call_tmp[660163](132726 call _cond_test call_tmp[660158]))
    if call_tmp[660163]
    {
      {
        unknown _indexOfInterest[132596] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132597] "expr temp" "temp"
        unknown call_tmp[660170] "expr temp" "maybe param" "maybe type" "temp"
        (660173 'move' call_tmp[660170](360029 call _value _mt[243] this[133792]))
        unknown call_tmp[660177] "expr temp" "maybe param" "maybe type" "temp"
        (660180 'move' call_tmp[660177](132591 call(132586 call (partial) dsiSorted _mt[243] call_tmp[660170]) comparator[132555]))
        (132606 'move' _iterator[132597](132604 call _getIterator call_tmp[660177]))
        Defer
        {
          {
            (132623 call _freeIterator _iterator[132597])
          }
        }
        { scopeless type
          (132612 'move' _indexOfInterest[132596](132609 call iteratorIndex _iterator[132597]))
        }
        ForLoop[132598]
        {
          unknown i[132616] "index var" "insert auto destroy"
          (480331 'end of statement')
          (132618 'move' i[132616] _indexOfInterest[132596])
          (480332 'end of statement' i[132616])
          {
            unknown yret[518236] "YVV" "temp"
            (518239 'move' yret[518236](518238 'deref' i[132616]))
            (518241 yield yret[518236])
            (480334 'end of statement' i[132616])
          }
          label _continueLabel[132601]
          _indexOfInterest[132596]
          _iterator[132597]
        }
        label _breakLabel[132602]
      }
    }
    {
      unknown call_tmp[660184] "expr temp" "maybe param" "maybe type" "temp"
      (660187 'move' call_tmp[660184](384341 call _value _mt[243] this[133792]))
      unknown call_tmp[660189] "expr temp" "maybe param" "maybe type" "temp"
      (660192 'move' call_tmp[660189](132638 call canResolveMethod module=[255] Reflection[224903] call_tmp[660184] "dsiSorted"))
      unknown call_tmp[660194] "expr temp" "maybe param" "maybe type" "temp"
      (660197 'move' call_tmp[660194](132722 call _cond_test call_tmp[660189]))
      if call_tmp[660194]
      {
        { scopeless type
          unknown call_type_tmp[492257] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[660201] "expr temp" "maybe param" "maybe type" "temp"
          (660204 'move' call_tmp[660201](384345 call _value _mt[243] this[133792]))
          (492261 'move' call_type_tmp[492257](132641 'typeof' call_tmp[660201]))
        }
        unknown call_tmp[660206] "expr temp" "maybe param" "maybe type" "temp"
        (660209 'move' call_tmp[660206](132643 call _cast string[26] call_type_tmp[492257]))
        unknown call_tmp[660211] "expr temp" "maybe param" "maybe type" "temp"
        (660214 'move' call_tmp[660211](132662 call + call_tmp[660206] " does not support dsiSorted(comparator)"))
        (132665 call compilerError call_tmp[660211])
      }
      {
        unknown copy[132673] "dead at end of block" "insert auto destroy"
        (543082 'init var' copy[132673] this[133792])
        (132676 'end of statement')
        (132682 call sort copy[132673](comparator = comparator[132555]))
        (480337 'end of statement' copy[132673])
        {
          unknown _indexOfInterest[132689] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[132690] "expr temp" "temp"
          (132699 'move' _iterator[132690](132697 call _getIterator copy[132673]))
          Defer
          {
            {
              (132715 call _freeIterator _iterator[132690])
            }
          }
          { scopeless type
            (132704 'move' _indexOfInterest[132689](132701 call iteratorIndex _iterator[132690]))
          }
          ForLoop[132691]
          {
            unknown ind[132708] "index var" "insert auto destroy"
            (480340 'end of statement')
            (132710 'move' ind[132708] _indexOfInterest[132689])
            (480341 'end of statement' ind[132708])
            unknown yret[518243] "YVV" "temp"
            (518246 'move' yret[518243](518245 'deref' ind[132708]))
            (518248 yield yret[518243])
            (480343 'end of statement' ind[132708])
            label _continueLabel[132694]
            _indexOfInterest[132689]
            _iterator[132690]
          }
          label _breakLabel[132695]
        }
        (355165 'used modules list'(132669 'use' Sort[267989]))
      }
      (360033 'referenced modules list' Reflection[224903])
    }
    (518234 return ret[518232])
    (360023 'referenced modules list' Reflection[224903])
  }
  function _array[133594](?).displayRepresentation[132736](arg _mt[133798]:_MT[238], arg this[133796]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660218] "expr temp" "maybe param" "maybe type" "temp"
    (660221 'move' call_tmp[660218](360039 call _value _mt[243] this[133796]))
    (132743 call(132739 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[660218]))
    (518250 return _void[55])
  }
  function _array[133594](?).targetLocales[132750](arg _mt[133802]:_MT[238], arg this[133800]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518254] "RVV" "temp"
    unknown call_tmp[660227] "expr temp" "maybe param" "maybe type" "temp"
    (660230 'move' call_tmp[660227](360043 call _value _mt[243] this[133800]))
    unknown call_tmp[660234] "expr temp" "maybe param" "maybe type" "temp"
    (660237 'move' call_tmp[660234](132757 call(132753 call (partial) dsiTargetLocales _mt[243] call_tmp[660227])))
    (518259 'move' ret[518254](518258 'deref' call_tmp[660234]))
    (518256 return ret[518254])
  }
  function _array[133594](?).hasSingleLocalSubdomain[132765](arg _mt[133806]:_MT[238], arg this[133804]:_array[133594](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518263] "RVV" "param" "temp"
    unknown call_tmp[660241] "expr temp" "maybe param" "maybe type" "temp"
    (660244 'move' call_tmp[660241](360047 call _value _mt[243] this[133804]))
    unknown call_tmp[660248] "expr temp" "maybe param" "maybe type" "temp"
    (660251 'move' call_tmp[660248](132772 call(132768 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660241])))
    (518268 'move' ret[518263](518267 'deref' call_tmp[660248]))
    (518265 return ret[518263])
  }
  function _array[133594](?).localSubdomain[132786](arg _mt[133810]:_MT[238], arg this[133808]:_array[133594](?), arg loc[132782]:locale[28] =
  (384353 call here[90438])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518272] "RVV" "temp"
    unknown call_tmp[660255] "expr temp" "maybe param" "maybe type" "temp"
    (660258 'move' call_tmp[660255](360051 call _value _mt[243] this[133808]))
    unknown call_tmp[660262] "expr temp" "maybe param" "maybe type" "temp"
    (660265 'move' call_tmp[660262](132793 call(132789 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660255])))
    unknown call_tmp[660267] "expr temp" "maybe param" "maybe type" "temp"
    (660270 'move' call_tmp[660267](132794 call ! call_tmp[660262]))
    unknown call_tmp[660272] "expr temp" "maybe param" "maybe type" "temp"
    (660275 'move' call_tmp[660272](132801 call _cond_test call_tmp[660267]))
    if call_tmp[660272]
    {
      (132799 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[660279] "expr temp" "maybe param" "maybe type" "temp"
    (660282 'move' call_tmp[660279](360055 call _value _mt[243] this[133808]))
    unknown call_tmp[660286] "expr temp" "maybe param" "maybe type" "temp"
    (660289 'move' call_tmp[660286](132813 call(132808 call (partial) dsiLocalSubdomain _mt[243] call_tmp[660279]) loc[132782]))
    (518277 'move' ret[518272](518276 'deref' call_tmp[660286]))
    (518274 return ret[518272])
  }
  function _array[133594](?).localSubdomains[132826](arg _mt[133814]:_MT[238], arg this[133812]:_array[133594](?), arg loc[132822]:locale[28] =
  (384356 call here[90438])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518281] "RVV" "temp"
    unknown call_tmp[660293] "expr temp" "maybe param" "maybe type" "temp"
    (660296 'move' call_tmp[660293](360059 call _value _mt[243] this[133812]))
    unknown call_tmp[660300] "expr temp" "maybe param" "maybe type" "temp"
    (660303 'move' call_tmp[660300](132833 call(132829 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660293])))
    unknown call_tmp[660305] "expr temp" "maybe param" "maybe type" "temp"
    (660308 'move' call_tmp[660305](132887 call _cond_test call_tmp[660300]))
    if call_tmp[660305]
    {
      unknown yret[518285] "YVV" "temp"
      unknown call_tmp[660312] "expr temp" "maybe param" "maybe type" "temp"
      (660315 'move' call_tmp[660312](132837 call(384359 call (partial) localSubdomain _mt[243] this[133812]) loc[132822]))
      (518288 'move' yret[518285](518287 'deref' call_tmp[660312]))
      (518290 yield yret[518285])
    }
    {
      {
        unknown _indexOfInterest[132852] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132853] "expr temp" "temp"
        unknown call_tmp[660319] "expr temp" "maybe param" "maybe type" "temp"
        (660322 'move' call_tmp[660319](360063 call _value _mt[243] this[133812]))
        unknown call_tmp[660326] "expr temp" "maybe param" "maybe type" "temp"
        (660329 'move' call_tmp[660326](132848 call(132843 call (partial) dsiLocalSubdomains _mt[243] call_tmp[660319]) loc[132822]))
        (132862 'move' _iterator[132853](132860 call _getIterator call_tmp[660326]))
        Defer
        {
          {
            (132879 call _freeIterator _iterator[132853])
          }
        }
        { scopeless type
          (132868 'move' _indexOfInterest[132852](132865 call iteratorIndex _iterator[132853]))
        }
        ForLoop[132854]
        {
          unknown d[132872] "index var" "insert auto destroy"
          (480352 'end of statement')
          (132874 'move' d[132872] _indexOfInterest[132852])
          (480353 'end of statement' d[132872])
          unknown yret[518292] "YVV" "temp"
          (518295 'move' yret[518292](518294 'deref' d[132872]))
          (518297 yield yret[518292])
          (480355 'end of statement' d[132872])
          label _continueLabel[132857]
          _indexOfInterest[132852]
          _iterator[132853]
        }
        label _breakLabel[132858]
      }
    }
    (518283 return ret[518281])
  }
  function _array[133594](?).chpl__isDense1DArray[132896](arg _mt[133818]:_MT[238], arg this[133816]:_array[133594](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518301] "RVV" "param" "temp"
    unknown tmp[425662] "maybe param" "temp"
    unknown tmp[425683] "maybe param" "temp"
    (425694 'move' tmp[425683](132901 call isRectangularArr this[133816]))
    unknown call_tmp[660331] "expr temp" "maybe param" "maybe type" "temp"
    (660334 'move' call_tmp[660331](425696 call _cond_invalid tmp[425683]))
    if call_tmp[660331]
    {
      (425699 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566504] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566505] "maybe param" "temp"
    unknown call_tmp[660336] "expr temp" "maybe param" "maybe type" "temp"
    (660339 'move' call_tmp[660336](425684 call isTrue tmp[425683]))
    (566510 'move' tmp[566505](566508 call _cond_test call_tmp[660336]))
    if tmp[566505]
    {
      unknown tmp[566512] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660343] "expr temp" "maybe param" "maybe type" "temp"
      (660346 'move' call_tmp[660343](132903 call rank _mt[243] this[133816]))
      unknown call_tmp[660348] "expr temp" "maybe param" "maybe type" "temp"
      (660351 'move' call_tmp[660348](132907 call == call_tmp[660343] 1))
      (566514 'move' tmp[566512](425687 call isTrue call_tmp[660348]))
      (566519 'move' tmp[566504](566516 '_paramFoldLogical' tmp[566505] tmp[566512]))
    }
    {
      (566524 'move' tmp[566504](566521 '_paramFoldLogical' tmp[566505] 0))
    }
    (425673 'move' tmp[425662] tmp[566504])
    unknown call_tmp[660353] "expr temp" "maybe param" "maybe type" "temp"
    (660356 'move' call_tmp[660353](425675 call _cond_invalid tmp[425662]))
    if call_tmp[660353]
    {
      (425678 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566531] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566532] "maybe param" "temp"
    unknown call_tmp[660358] "expr temp" "maybe param" "maybe type" "temp"
    (660361 'move' call_tmp[660358](425663 call isTrue tmp[425662]))
    (566537 'move' tmp[566532](566535 call _cond_test call_tmp[660358]))
    if tmp[566532]
    {
      unknown tmp[566539] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660365] "expr temp" "maybe param" "maybe type" "temp"
      (660368 'move' call_tmp[660365](132912 call _value _mt[243] this[133816]))
      unknown call_tmp[660372] "expr temp" "maybe param" "maybe type" "temp"
      (660375 'move' call_tmp[660372](132915 call stridable _mt[243] call_tmp[660365]))
      unknown call_tmp[660377] "expr temp" "maybe param" "maybe type" "temp"
      (660380 'move' call_tmp[660377](132918 call ! call_tmp[660372]))
      (566541 'move' tmp[566539](425666 call isTrue call_tmp[660377]))
      (566546 'move' tmp[566531](566543 '_paramFoldLogical' tmp[566532] tmp[566539]))
    }
    {
      (566551 'move' tmp[566531](566548 '_paramFoldLogical' tmp[566532] 0))
    }
    (518306 'move' ret[518301](518305 'deref' tmp[566531]))
    (518303 return ret[518301])
  }
  function _array[133594](?).chpl__assertSingleArrayDomain[132933](arg _mt[133822]:_MT[238], arg this[133820]:_array[133594](?), arg fnName[132930]:string[26]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660384] "expr temp" "maybe param" "maybe type" "temp"
    (660387 'move' call_tmp[660384](132936 call _dom _mt[243] this[133820]))
    unknown call_tmp[660391] "expr temp" "maybe param" "maybe type" "temp"
    (660394 'move' call_tmp[660391](132939 call _value _mt[243] call_tmp[660384]))
    unknown call_tmp[660398] "expr temp" "maybe param" "maybe type" "temp"
    (660401 'move' call_tmp[660398](132942 call _arrs _mt[243] call_tmp[660391]))
    unknown call_tmp[660405] "expr temp" "maybe param" "maybe type" "temp"
    (660408 'move' call_tmp[660405](132945 call size _mt[243] call_tmp[660398]))
    unknown call_tmp[660410] "expr temp" "maybe param" "maybe type" "temp"
    (660413 'move' call_tmp[660410](132949 call != call_tmp[660405] 1))
    unknown call_tmp[660415] "expr temp" "maybe param" "maybe type" "temp"
    (660418 'move' call_tmp[660415](132994 call _cond_test call_tmp[660410]))
    if call_tmp[660415]
    {
      unknown call_tmp[660420] "expr temp" "maybe param" "maybe type" "temp"
      (660423 'move' call_tmp[660420](132970 call + "cannot call " fnName[132930]))
      unknown call_tmp[660425] "expr temp" "maybe param" "maybe type" "temp"
      (660428 'move' call_tmp[660425](132989 call + call_tmp[660420] " on an array defined over a domain with multiple arrays"))
      (132992 call halt call_tmp[660425])
    }
    (518308 return _void[55])
  }
  function _array[133594](?).isEmpty[133004](arg _mt[133826]:_MT[238], arg this[133824]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518312] "RVV" "temp"
    unknown call_tmp[660432] "expr temp" "maybe param" "maybe type" "temp"
    (660435 'move' call_tmp[660432](133008 call size _mt[243] this[133824]))
    unknown call_tmp[660437] "expr temp" "maybe param" "maybe type" "temp"
    (660440 'move' call_tmp[660437](133012 call == call_tmp[660432] 0))
    (518318 'move' ret[518312](518317 'coerce' call_tmp[660437] bool[10]))
    (518314 return ret[518312])
  }
  { scopeless type
    bool[10]
  }
  function _array[133594](?).head[133022](arg _mt[133830]:_MT[238], arg this[133828]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518322] "RVV" "temp"
    unknown call_tmp[660444] "expr temp" "maybe param" "maybe type" "temp"
    (660447 'move' call_tmp[660444](133033 call _dom _mt[243] this[133828]))
    unknown call_tmp[660451] "expr temp" "maybe param" "maybe type" "temp"
    (660454 'move' call_tmp[660451](133036 call alignedLow _mt[243] call_tmp[660444]))
    unknown call_tmp[660456] "expr temp" "maybe param" "maybe type" "temp"
    (660459 'move' call_tmp[660456](133040 call this[133828] call_tmp[660451]))
    unknown call_tmp[660463] "expr temp" "maybe param" "maybe type" "temp"
    (660466 'move' call_tmp[660463](518329 call _value _mt[243] this[133828]))
    unknown call_tmp[660470] "expr temp" "maybe param" "maybe type" "temp"
    (660473 'move' call_tmp[660470](518327 call eltType _mt[243] call_tmp[660463]))
    (518334 'move' ret[518322](518333 'coerce' call_tmp[660456] call_tmp[660470]))
    (518324 return ret[518322])
  }
  { scopeless type
    unknown call_tmp[660477] "expr temp" "maybe param" "maybe type" "temp"
    (660480 'move' call_tmp[660477](133025 call _value _mt[243] this[133828]))
    (133028 call eltType _mt[243] call_tmp[660477])
  }
  function _array[133594](?).tail[133049](arg _mt[133834]:_MT[238], arg this[133832]:_array[133594](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518338] "RVV" "temp"
    unknown call_tmp[660486] "expr temp" "maybe param" "maybe type" "temp"
    (660489 'move' call_tmp[660486](133060 call _dom _mt[243] this[133832]))
    unknown call_tmp[660493] "expr temp" "maybe param" "maybe type" "temp"
    (660496 'move' call_tmp[660493](133063 call alignedHigh _mt[243] call_tmp[660486]))
    unknown call_tmp[660498] "expr temp" "maybe param" "maybe type" "temp"
    (660501 'move' call_tmp[660498](133067 call this[133832] call_tmp[660493]))
    unknown call_tmp[660505] "expr temp" "maybe param" "maybe type" "temp"
    (660508 'move' call_tmp[660505](518345 call _value _mt[243] this[133832]))
    unknown call_tmp[660512] "expr temp" "maybe param" "maybe type" "temp"
    (660515 'move' call_tmp[660512](518343 call eltType _mt[243] call_tmp[660505]))
    (518350 'move' ret[518338](518349 'coerce' call_tmp[660498] call_tmp[660512]))
    (518340 return ret[518338])
  }
  { scopeless type
    unknown call_tmp[660519] "expr temp" "maybe param" "maybe type" "temp"
    (660522 'move' call_tmp[660519](133052 call _value _mt[243] this[133832]))
    (133055 call eltType _mt[243] call_tmp[660519])
  }
  function _array[133594](?).back[133076](arg _mt[133838]:_MT[238], arg this[133836]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518354] "RVV" "temp"
    unknown tmp[425704] "maybe param" "temp"
    unknown call_tmp[660526] "expr temp" "maybe param" "maybe type" "temp"
    (660529 'move' call_tmp[660526](133081 call isRectangularArr this[133836]))
    (425715 'move' tmp[425704](133082 call ! call_tmp[660526]))
    unknown call_tmp[660531] "expr temp" "maybe param" "maybe type" "temp"
    (660534 'move' call_tmp[660531](425717 call _cond_invalid tmp[425704]))
    if call_tmp[660531]
    {
      (425720 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566558] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566559] "maybe param" "temp"
    unknown call_tmp[660536] "expr temp" "maybe param" "maybe type" "temp"
    (660539 'move' call_tmp[660536](425705 call isTrue tmp[425704]))
    (566564 'move' tmp[566559](566562 call _cond_test call_tmp[660536]))
    if tmp[566559]
    {
      (566569 'move' tmp[566558](566566 '_paramFoldLogical' tmp[566559] 1))
    }
    {
      unknown tmp[566571] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660543] "expr temp" "maybe param" "maybe type" "temp"
      (660546 'move' call_tmp[660543](133085 call rank _mt[243] this[133836]))
      unknown call_tmp[660548] "expr temp" "maybe param" "maybe type" "temp"
      (660551 'move' call_tmp[660548](133089 call != call_tmp[660543] 1))
      (566573 'move' tmp[566571](425709 call isTrue call_tmp[660548]))
      (566578 'move' tmp[566558](566575 '_paramFoldLogical' tmp[566559] tmp[566571]))
    }
    unknown call_tmp[660553] "expr temp" "maybe param" "maybe type" "temp"
    (660556 'move' call_tmp[660553](133114 call _cond_test tmp[566558]))
    if call_tmp[660553]
    {
      (133112 call compilerError "back() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425725] "maybe param" "temp"
    (425736 'move' tmp[425725] 1)
    unknown call_tmp[660558] "expr temp" "maybe param" "maybe type" "temp"
    (660561 'move' call_tmp[660558](425738 call _cond_invalid tmp[425725]))
    if call_tmp[660558]
    {
      (425741 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566585] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566586] "maybe param" "temp"
    unknown call_tmp[660563] "expr temp" "maybe param" "maybe type" "temp"
    (660566 'move' call_tmp[660563](425726 call isTrue tmp[425725]))
    (566591 'move' tmp[566586](566589 call _cond_test call_tmp[660563]))
    if tmp[566586]
    {
      unknown tmp[566593] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660570] "expr temp" "maybe param" "maybe type" "temp"
      (660573 'move' call_tmp[660570](133123 call(384372 call (partial) isEmpty _mt[243] this[133836])))
      (566595 'move' tmp[566593](425729 call isTrue call_tmp[660570]))
      (566600 'move' tmp[566585](566597 '_paramFoldLogical' tmp[566586] tmp[566593]))
    }
    {
      (566605 'move' tmp[566585](566602 '_paramFoldLogical' tmp[566586] 0))
    }
    unknown call_tmp[660575] "expr temp" "maybe param" "maybe type" "temp"
    (660578 'move' call_tmp[660575](133147 call _cond_test tmp[566585]))
    if call_tmp[660575]
    {
      (133145 call halt "back called on an empty array")
    }
    unknown call_tmp[660582] "expr temp" "maybe param" "maybe type" "temp"
    (660585 'move' call_tmp[660582](133154 call _dom _mt[243] this[133836]))
    unknown call_tmp[660589] "expr temp" "maybe param" "maybe type" "temp"
    (660592 'move' call_tmp[660589](133157 call high _mt[243] call_tmp[660582]))
    unknown call_tmp[660594] "expr temp" "maybe param" "maybe type" "temp"
    (660597 'move' call_tmp[660594](133161 call this[133836] call_tmp[660589]))
    (518359 'move' ret[518354](518358 'deref' call_tmp[660594]))
    (518356 return ret[518354])
  }
  function _array[133594](?).front[133168](arg _mt[133842]:_MT[238], arg this[133840]:_array[133594](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518363] "RVV" "temp"
    unknown tmp[425746] "maybe param" "temp"
    unknown call_tmp[660599] "expr temp" "maybe param" "maybe type" "temp"
    (660602 'move' call_tmp[660599](133173 call isRectangularArr this[133840]))
    (425757 'move' tmp[425746](133174 call ! call_tmp[660599]))
    unknown call_tmp[660604] "expr temp" "maybe param" "maybe type" "temp"
    (660607 'move' call_tmp[660604](425759 call _cond_invalid tmp[425746]))
    if call_tmp[660604]
    {
      (425762 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566612] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566613] "maybe param" "temp"
    unknown call_tmp[660609] "expr temp" "maybe param" "maybe type" "temp"
    (660612 'move' call_tmp[660609](425747 call isTrue tmp[425746]))
    (566618 'move' tmp[566613](566616 call _cond_test call_tmp[660609]))
    if tmp[566613]
    {
      (566623 'move' tmp[566612](566620 '_paramFoldLogical' tmp[566613] 1))
    }
    {
      unknown tmp[566625] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660616] "expr temp" "maybe param" "maybe type" "temp"
      (660619 'move' call_tmp[660616](133177 call rank _mt[243] this[133840]))
      unknown call_tmp[660621] "expr temp" "maybe param" "maybe type" "temp"
      (660624 'move' call_tmp[660621](133181 call != call_tmp[660616] 1))
      (566627 'move' tmp[566625](425751 call isTrue call_tmp[660621]))
      (566632 'move' tmp[566612](566629 '_paramFoldLogical' tmp[566613] tmp[566625]))
    }
    unknown call_tmp[660626] "expr temp" "maybe param" "maybe type" "temp"
    (660629 'move' call_tmp[660626](133206 call _cond_test tmp[566612]))
    if call_tmp[660626]
    {
      (133204 call compilerError "front() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425767] "maybe param" "temp"
    (425778 'move' tmp[425767] 1)
    unknown call_tmp[660631] "expr temp" "maybe param" "maybe type" "temp"
    (660634 'move' call_tmp[660631](425780 call _cond_invalid tmp[425767]))
    if call_tmp[660631]
    {
      (425783 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566639] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566640] "maybe param" "temp"
    unknown call_tmp[660636] "expr temp" "maybe param" "maybe type" "temp"
    (660639 'move' call_tmp[660636](425768 call isTrue tmp[425767]))
    (566645 'move' tmp[566640](566643 call _cond_test call_tmp[660636]))
    if tmp[566640]
    {
      unknown tmp[566647] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660643] "expr temp" "maybe param" "maybe type" "temp"
      (660646 'move' call_tmp[660643](133215 call(384379 call (partial) isEmpty _mt[243] this[133840])))
      (566649 'move' tmp[566647](425771 call isTrue call_tmp[660643]))
      (566654 'move' tmp[566639](566651 '_paramFoldLogical' tmp[566640] tmp[566647]))
    }
    {
      (566659 'move' tmp[566639](566656 '_paramFoldLogical' tmp[566640] 0))
    }
    unknown call_tmp[660648] "expr temp" "maybe param" "maybe type" "temp"
    (660651 'move' call_tmp[660648](133239 call _cond_test tmp[566639]))
    if call_tmp[660648]
    {
      (133237 call halt "front called on an empty array")
    }
    unknown call_tmp[660655] "expr temp" "maybe param" "maybe type" "temp"
    (660658 'move' call_tmp[660655](133246 call _dom _mt[243] this[133840]))
    unknown call_tmp[660662] "expr temp" "maybe param" "maybe type" "temp"
    (660665 'move' call_tmp[660662](133249 call low _mt[243] call_tmp[660655]))
    unknown call_tmp[660667] "expr temp" "maybe param" "maybe type" "temp"
    (660670 'move' call_tmp[660667](133253 call this[133840] call_tmp[660662]))
    (518368 'move' ret[518363](518367 'deref' call_tmp[660667]))
    (518365 return ret[518363])
  }
  function _array[133594](?).reverse[133260](arg _mt[133846]:_MT[238], arg this[133844]:_array[133594](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660674] "expr temp" "maybe param" "maybe type" "temp"
    (660677 'move' call_tmp[660674](133264 call(384386 call (partial) chpl__isDense1DArray _mt[243] this[133844])))
    unknown call_tmp[660679] "expr temp" "maybe param" "maybe type" "temp"
    (660682 'move' call_tmp[660679](133265 call ! call_tmp[660674]))
    unknown call_tmp[660684] "expr temp" "maybe param" "maybe type" "temp"
    (660687 'move' call_tmp[660684](133288 call _cond_test call_tmp[660679]))
    if call_tmp[660684]
    {
      (133286 call compilerError "reverse() is only supported on dense 1D arrays")
    }
    unknown call_tmp[660691] "expr temp" "maybe param" "maybe type" "temp"
    (660694 'move' call_tmp[660691](133295 call _dom _mt[243] this[133844]))
    unknown call_tmp[660698] "maybe param" "maybe type" "temp"
    (660701 'move' call_tmp[660698](133298 call low _mt[243] call_tmp[660691]))
    const lo[133301] "dead at end of block" "const" "insert auto destroy"
    (543084 'init var' lo[133301] call_tmp[660698])
    unknown call_tmp[660705] "expr temp" "maybe param" "maybe type" "temp"
    (660708 'move' call_tmp[660705](133305 call _dom _mt[243] this[133844]))
    unknown call_tmp[660712] "expr temp" "maybe param" "maybe type" "temp"
    (660715 'move' call_tmp[660712](133308 call size _mt[243] call_tmp[660705]))
    unknown call_tmp[660717] "maybe param" "maybe type" "temp"
    (660720 'move' call_tmp[660717](133312 call / call_tmp[660712] 2))
    const mid[133314] "dead at end of block" "const" "insert auto destroy"
    (543086 'init var' mid[133314] call_tmp[660717])
    unknown call_tmp[660724] "expr temp" "maybe param" "maybe type" "temp"
    (660727 'move' call_tmp[660724](133318 call _dom _mt[243] this[133844]))
    unknown call_tmp[660731] "maybe param" "maybe type" "temp"
    (660734 'move' call_tmp[660731](133321 call high _mt[243] call_tmp[660724]))
    const hi[133324] "dead at end of block" "const" "insert auto destroy"
    (543088 'init var' hi[133324] call_tmp[660731])
    (133327 'end of statement')
    {
      unknown _indexOfInterest[133353] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133354] "expr temp" "temp"
      unknown call_tmp[660736] "expr temp" "maybe param" "maybe type" "temp"
      (660739 'move' call_tmp[660736](133370 call chpl_direct_counted_range_iter 0 mid[133314]))
      (133363 'move' _iterator[133354](133361 call _getIterator call_tmp[660736]))
      Defer
      {
        {
          (133386 call _freeIterator _iterator[133354])
        }
      }
      { scopeless type
        (133375 'move' _indexOfInterest[133353](133372 call iteratorIndex _iterator[133354]))
      }
      ForLoop[133355]
      {
        unknown i[133379] "index var" "insert auto destroy"
        (480376 'end of statement')
        (133381 'move' i[133379] _indexOfInterest[133353])
        (480377 'end of statement' i[133379])
        {
          unknown call_tmp[660741] "expr temp" "maybe param" "maybe type" "temp"
          (660744 'move' call_tmp[660741](133338 call + lo[133301] i[133379]))
          unknown call_tmp[660746] "expr temp" "maybe param" "maybe type" "temp"
          (660749 'move' call_tmp[660746](133341 call this[133844] call_tmp[660741]))
          unknown call_tmp[660751] "expr temp" "maybe param" "maybe type" "temp"
          (660754 'move' call_tmp[660751](133345 call - hi[133324] i[133379]))
          unknown call_tmp[660756] "expr temp" "maybe param" "maybe type" "temp"
          (660759 'move' call_tmp[660756](133348 call this[133844] call_tmp[660751]))
          (133349 call <=> call_tmp[660746] call_tmp[660756])
          (480379 'end of statement' lo[133301] i[133379] hi[133324] i[133379])
        }
        label _continueLabel[133358]
        _indexOfInterest[133353]
        _iterator[133354]
      }
      label _breakLabel[133359]
    }
    (518370 return _void[55])
  }
  function _array[133594](?).find[133404](arg _mt[133850]:_MT[238], arg this[133848]:_array[133594](?), arg val[133401] :
  (133398 call eltType _mt[243] this[133848])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518374] "RVV" "temp"
    {
      unknown _indexOfInterest[133442] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133443] "expr temp" "temp"
      unknown call_tmp[660765] "expr temp" "maybe param" "maybe type" "temp"
      (660768 'move' call_tmp[660765](133419 call _dom _mt[243] this[133848]))
      (133452 'move' _iterator[133443](133450 call _getIterator call_tmp[660765]))
      Defer
      {
        {
          (133469 call _freeIterator _iterator[133443])
        }
      }
      { scopeless type
        (133458 'move' _indexOfInterest[133442](133455 call iteratorIndex _iterator[133443]))
      }
      ForLoop[133444]
      {
        unknown i[133462] "index var" "insert auto destroy"
        (480385 'end of statement')
        (133464 'move' i[133462] _indexOfInterest[133442])
        (480386 'end of statement' i[133462])
        {
          unknown call_tmp[660770] "expr temp" "maybe param" "maybe type" "temp"
          (660773 'move' call_tmp[660770](133425 call this[133848] i[133462]))
          unknown call_tmp[660775] "expr temp" "maybe param" "maybe type" "temp"
          (660778 'move' call_tmp[660775](133427 call == call_tmp[660770] val[133401]))
          unknown call_tmp[660780] "expr temp" "maybe param" "maybe type" "temp"
          (660783 'move' call_tmp[660780](133436 call _cond_test call_tmp[660775]))
          if call_tmp[660780]
          {
            unknown call_tmp[660785] "expr temp" "maybe param" "maybe type" "temp"
            (660788 'move' call_tmp[660785](133432 call _build_tuple 1 i[133462]))
            unknown call_tmp[660792] "expr temp" "maybe param" "maybe type" "temp"
            (660795 'move' call_tmp[660792](518384 call _dom _mt[243] this[133848]))
            unknown call_tmp[660797] "expr temp" "maybe param" "maybe type" "temp"
            (660800 'move' call_tmp[660797](518382 call chpl__buildIndexType call_tmp[660792]))
            unknown call_tmp[660802] "expr temp" "maybe param" "maybe type" "temp"
            (660805 'move' call_tmp[660802](518379 call _build_tuple bool[10] call_tmp[660797]))
            (518388 'move' ret[518374](518387 'coerce' call_tmp[660785] call_tmp[660802]))
            gotoReturn _end_find[518372] _end_find[518372]
            (480388 'end of statement' i[133462])
          }
        }
        label _continueLabel[133447]
        _indexOfInterest[133442]
        _iterator[133443]
      }
      label _breakLabel[133448]
    }
    unknown arbInd[133484] "dead at end of block" "insert auto destroy"
    unknown call_tmp[660809] "expr temp" "maybe param" "maybe type" "temp"
    (660812 'move' call_tmp[660809](133478 call _dom _mt[243] this[133848]))
    unknown call_tmp[660814] "expr temp" "maybe param" "maybe type" "temp"
    (660817 'move' call_tmp[660814](133482 call chpl__buildIndexType call_tmp[660809]))
    (543090 'default init var' arbInd[133484] call_tmp[660814])
    (133487 'end of statement')
    unknown call_tmp[660819] "expr temp" "maybe param" "maybe type" "temp"
    (660822 'move' call_tmp[660819](133491 call _build_tuple 0 arbInd[133484]))
    unknown call_tmp[660826] "expr temp" "maybe param" "maybe type" "temp"
    (660829 'move' call_tmp[660826](518398 call _dom _mt[243] this[133848]))
    unknown call_tmp[660831] "expr temp" "maybe param" "maybe type" "temp"
    (660834 'move' call_tmp[660831](518396 call chpl__buildIndexType call_tmp[660826]))
    unknown call_tmp[660836] "expr temp" "maybe param" "maybe type" "temp"
    (660839 'move' call_tmp[660836](518393 call _build_tuple bool[10] call_tmp[660831]))
    (518402 'move' ret[518374](518401 'coerce' call_tmp[660819] call_tmp[660836]))
    gotoReturn _end_find[518372] _end_find[518372]
    (480390 'end of statement' arbInd[133484])
    label _end_find[518372]
    (518376 return ret[518374])
  }
  { scopeless type
    unknown call_tmp[660843] "expr temp" "maybe param" "maybe type" "temp"
    (660846 'move' call_tmp[660843](133408 call _dom _mt[243] this[133848]))
    unknown call_tmp[660848] "expr temp" "maybe param" "maybe type" "temp"
    (660851 'move' call_tmp[660848](133412 call chpl__buildIndexType call_tmp[660843]))
    (133415 call _build_tuple bool[10] call_tmp[660848])
  }
  function _array[133594](?).count[133507](arg _mt[133854]:_MT[238], arg this[133852]:_array[133594](?), arg val[133504] :
  (133501 call eltType _mt[243] this[133852])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518408] "RVV" "temp"
    unknown call_tmp[660855] "expr temp" "maybe param" "maybe type" "temp"
    (660858 'move' call_tmp[660855](133513 call == this[133852] val[133504]))
    unknown call_tmp[660860] "expr temp" "maybe param" "maybe type" "temp"
    (660863 'move' call_tmp[660860](133515 'reduce' SumReduceScanOp[376415](?) call_tmp[660855] 0))
    (518414 'move' ret[518408](518413 'coerce' call_tmp[660860] int(64)[13]))
    (518410 return ret[518408])
  }
  { scopeless type
    int(64)[13]
  }
  function _array[133594](?).shape[133525](arg _mt[133858]:_MT[238], arg this[133856]:_array[133594](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518418] "RVV" "temp"
    unknown call_tmp[660867] "expr temp" "maybe param" "maybe type" "temp"
    (660870 'move' call_tmp[660867](133528 call _dom _mt[243] this[133856]))
    unknown call_tmp[660874] "expr temp" "maybe param" "maybe type" "temp"
    (660877 'move' call_tmp[660874](133533 call shape _mt[243] call_tmp[660867]))
    (518423 'move' ret[518418](518422 'deref' call_tmp[660874]))
    (518420 return ret[518418])
  }
  function _array[133594](?)._scan[133545](arg _mt[133862]:_MT[238], arg this[133860]:_array[133594](?), arg op[133543]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518427] "RVV" "temp"
    unknown call_tmp[660881] "expr temp" "maybe param" "maybe type" "temp"
    (660884 'move' call_tmp[660881](360095 call _value _mt[243] this[133860]))
    unknown call_tmp[660890] "expr temp" "maybe param" "maybe type" "temp"
    (660893 'move' call_tmp[660890](133583 call _dom _mt[243] this[133860]))
    unknown call_tmp[660895] "expr temp" "maybe param" "maybe type" "temp"
    (660898 'move' call_tmp[660895](133586 call(133577 call (partial) doiScan _mt[243] call_tmp[660881]) op[133543] call_tmp[660890]))
    (518432 'move' ret[518427](518431 'deref' call_tmp[660895]))
    (518429 return ret[518427])
  }
  where {
    unknown call_tmp[660902] "expr temp" "maybe param" "maybe type" "temp"
    (660905 'move' call_tmp[660902](384405 call _value _mt[243] this[133860]))
    unknown call_tmp[660909] "expr temp" "maybe param" "maybe type" "temp"
    (660912 'move' call_tmp[660909](133572 call _dom _mt[243] this[133860]))
    (133575 call canResolveMethod module=[255] Reflection[224903] call_tmp[660902] "doiScan" op[133543] call_tmp[660909])
    (360088 'referenced modules list' Reflection[224903])
  }
  function _array[133594](?)._pid[799995](arg _mt[799997]:_MT[238], ref arg this[799999]:_array[133594](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[800009] "RVV" "temp"
    unknown call_tmp[800016] "expr temp" "maybe param" "maybe type" "temp"
    (800019 'move' call_tmp[800016](800003 '.' this[799999] c"_pid"))
    (800014 'move' ret[800009](800013 'addr of' call_tmp[800016]))
    (800011 return ret[800009])
  }
  function _array[133594](?)._instance[800021](arg _mt[800023]:_MT[238], ref arg this[800025]:_array[133594](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[800035] "RVV" "temp"
    unknown call_tmp[800042] "expr temp" "maybe param" "maybe type" "temp"
    (800045 'move' call_tmp[800042](800029 '.' this[800025] c"_instance"))
    (800040 'move' ret[800035](800039 'addr of' call_tmp[800042]))
    (800037 return ret[800035])
  }
  function _array[133594](?)._unowned[800047](arg _mt[800049]:_MT[238], ref arg this[800051]:_array[133594](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[800061] "RVV" "temp"
    unknown call_tmp[800068] "expr temp" "maybe param" "maybe type" "temp"
    (800071 'move' call_tmp[800068](800055 '.' this[800051] c"_unowned"))
    (800066 'move' ret[800061](800065 'addr of' call_tmp[800068]))
    (800063 return ret[800061])
  }
  function _array[133594](?).init[800073](arg _mt[800075]:_MT[238], ref arg this[800076]:_array[133594](?), in arg _pid[800079]:int(64)[13] =
  _typeDefaultT[250], in arg _instance[800092]:_any[178](?), in arg _unowned[800101]:bool[10] =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (800115 'init field' this[800076] c"_pid" _pid[800079])
    (800118 'init field' this[800076] c"_instance" _instance[800092])
    (800124 'end of statement')
    (800121 'init field' this[800076] c"_unowned" _unowned[800101])
    (800126 return _void[55])
  }
  function _array[133594](?).init=[800128](arg _mt[800131]:_MT[238], ref arg this[800132]:_array[133594](?), arg other[800135] :
  (800134 'typeof' this[800132])) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[800203] "maybe param" "maybe type" "temp"
    (800206 'move' call_tmp[800203](800144 call _pid _mt[243] other[800135]))
    unknown tmp[800170] "temp"
    (800173 'init var' tmp[800170] call_tmp[800203] int(64)[13])
    (800175 'init field' this[800132] c"_pid" tmp[800170])
    (800196 'end of statement')
    unknown call_tmp[800210] "maybe param" "maybe type" "temp"
    (800213 'move' call_tmp[800210](800154 call _instance _mt[243] other[800135]))
    unknown tmp[800179] "temp"
    (800181 'init var' tmp[800179] call_tmp[800210])
    (800183 'init field' this[800132] c"_instance" tmp[800179])
    (800197 'end of statement')
    unknown call_tmp[800217] "maybe param" "maybe type" "temp"
    (800220 'move' call_tmp[800217](800164 call _unowned _mt[243] other[800135]))
    unknown tmp[800187] "temp"
    (800190 'init var' tmp[800187] call_tmp[800217] bool[10])
    (800192 'init field' this[800132] c"_unowned" tmp[800187])
    (800198 'end of statement')
    (800199 return _void[55])
  }
  type _array[133594](?) val _pid[128421]:int(64)[13] int(64)[13] unknown _instance[128425] "alias scope from this" "owned" val _unowned[128430]:bool[10] bool[10] forwarding ( )
  function _do_destroy_arr[133871](arg _unowned[133868]:bool[10], arg _instance[133873]:_any[178](?), arg deinitElts[133876] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[660914] "expr temp" "maybe param" "maybe type" "temp"
    (660917 'move' call_tmp[660914](133880 call ! _unowned[133868]))
    unknown call_tmp[660919] "expr temp" "maybe param" "maybe type" "temp"
    (660922 'move' call_tmp[660919](134119 call _cond_test call_tmp[660914]))
    if call_tmp[660919]
    {
      const tmp[134095] "const" "temp"
      unknown call_tmp[660924] "expr temp" "maybe param" "maybe type" "temp"
      (660927 'move' call_tmp[660924](134092 '_wide_get_locale' _instance[133873]))
      (134097 'move' tmp[134095](134093 'deref' call_tmp[660924]))
      (935208 call on_fn[935204] tmp[134095])
      function on_fn[935204](const in arg dummy_locale_arg[935206]:chpl_localeID_t[209352]) : void[4] "on"
      {
        {
          unknown call_tmp[660931] "expr temp" "maybe param" "maybe type" "temp"
          (660934 'move' call_tmp[660931](133888 call(133884 call (partial) isSliceArrayView _mt[243] _instance[133873])))
          unknown call_tmp[660936] "maybe param" "maybe type" "temp"
          (660939 'move' call_tmp[660936](133889 call ! call_tmp[660931]))
          unknown arrIsInList[133891] "dead at end of block" "param"
          (543092 'init var' arrIsInList[133891] call_tmp[660936])
          (133894 'end of statement')
          unknown call_tmp[660943] "maybe param" "maybe type" "temp"
          (660946 'move' call_tmp[660943](133907 call(133902 call (partial) remove _mt[243] _instance[133873]) arrIsInList[133891]))
          unknown tmp[133908] "dead at end of block" "insert auto destroy" "temp"
          (543094 'init var' tmp[133908] call_tmp[660943])
          (133915 call _check_tuple_var_decl tmp[133908] 2)
          (480395 'end of statement')
          unknown call_tmp[660948] "maybe param" "maybe type" "temp"
          (660951 'move' call_tmp[660948](133909 call tmp[133908] 0))
          unknown arrToFree[133896] "dead at end of block" "insert auto destroy"
          (543096 'init var' arrToFree[133896] call_tmp[660948])
          unknown call_tmp[660953] "maybe param" "maybe type" "temp"
          (660956 'move' call_tmp[660953](133912 call tmp[133908] 1))
          unknown domToRemove[133898] "dead at end of block" "insert auto destroy"
          (543098 'init var' domToRemove[133898] call_tmp[660953])
          (133920 'end of statement')
          unknown domToFree[133925] "dead at end of block" "insert auto destroy"
          (543100 'init var' domToFree[133925] nil[44] unmanaged BaseDom?[415508])
          (133928 'end of statement')
          unknown distToRemove[133933] "dead at end of block" "insert auto destroy"
          (543102 'init var' distToRemove[133933] nil[44] unmanaged BaseDist?[415502])
          (133936 'end of statement')
          unknown distToFree[133941] "dead at end of block" "insert auto destroy"
          (543104 'init var' distToFree[133941] nil[44] unmanaged BaseDist?[415502])
          (133944 'end of statement')
          unknown domIsPrivatized[133946] "dead at end of block" "insert auto destroy"
          (543106 'init var' domIsPrivatized[133946] 0)
          (133949 'end of statement')
          const instanceDom[133951] "dead at end of block" "const" "insert auto destroy"
          (543108 'init var' instanceDom[133951] domToRemove[133898])
          (133954 'end of statement')
          unknown call_tmp[660958] "expr temp" "maybe param" "maybe type" "temp"
          (660961 'move' call_tmp[660958](133957 call != domToRemove[133898] nil[44]))
          unknown call_tmp[660963] "expr temp" "maybe param" "maybe type" "temp"
          (660966 'move' call_tmp[660963](133992 call _cond_test call_tmp[660958]))
          if call_tmp[660963]
          {
            unknown tmp[492263] "expr temp" "maybe param" "maybe type" "temp"
            unknown tmp[492288] "maybe param" "temp"
            (492291 'move' tmp[492288](492289 'addr of' domToFree[133925]))
            unknown tmp[492299] "maybe param" "temp"
            (492302 'move' tmp[492299](492300 'addr of' distToRemove[133933]))
            unknown call_tmp[660968] "expr temp" "maybe param" "maybe type" "temp"
            (660971 'move' call_tmp[660968](133965 call postfix! domToRemove[133898]))
            (492264 'move' tmp[492263](133971 call(133967 call (partial) remove _mt[243] call_tmp[660968])))
            { scopeless
              unknown call_tmp[660977] "expr temp" "maybe param" "maybe type" "temp"
              (660980 'move' call_tmp[660977](492270 call size _mt[243] tmp[492263]))
              unknown call_tmp[660982] "expr temp" "maybe param" "maybe type" "temp"
              (660985 'move' call_tmp[660982](492273 call != 2 call_tmp[660977]))
              unknown call_tmp[660987] "expr temp" "maybe param" "maybe type" "temp"
              (660990 'move' call_tmp[660987](492280 call _cond_test call_tmp[660982]))
              if call_tmp[660987]
              {
                (492276 call compilerError "tuple size must match the number of grouped variables" 0)
              }
            }
            unknown call_tmp[660992] "expr temp" "maybe param" "maybe type" "temp"
            (660995 'move' call_tmp[660992](492286 call tmp[492263] 0))
            (492293 call = tmp[492288] call_tmp[660992])
            unknown call_tmp[660997] "expr temp" "maybe param" "maybe type" "temp"
            (661000 'move' call_tmp[660997](492297 call tmp[492263] 1))
            (492304 call = tmp[492299] call_tmp[660997])
            (480397 'end of statement' domToFree[133925] distToRemove[133933] domToRemove[133898])
            unknown tmp[425788] "maybe param" "temp"
            (425799 'move' tmp[425788] 1)
            unknown call_tmp[661002] "expr temp" "maybe param" "maybe type" "temp"
            (661005 'move' call_tmp[661002](425801 call _cond_invalid tmp[425788]))
            if call_tmp[661002]
            {
              (425804 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566666] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566667] "maybe param" "temp"
            unknown call_tmp[661007] "expr temp" "maybe param" "maybe type" "temp"
            (661010 'move' call_tmp[661007](425789 call isTrue tmp[425788]))
            (566672 'move' tmp[566667](566670 call _cond_test call_tmp[661007]))
            if tmp[566667]
            {
              unknown tmp[566674] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[661012] "expr temp" "maybe param" "maybe type" "temp"
              (661015 'move' call_tmp[661012](133979 call postfix! domToRemove[133898]))
              unknown call_tmp[661019] "expr temp" "maybe param" "maybe type" "temp"
              (661022 'move' call_tmp[661019](133981 call pid _mt[243] call_tmp[661012]))
              unknown call_tmp[661024] "expr temp" "maybe param" "maybe type" "temp"
              (661027 'move' call_tmp[661024](133985 call != call_tmp[661019] nullPid[113718]))
              (566676 'move' tmp[566674](425792 call isTrue call_tmp[661024]))
              (566681 'move' tmp[566666](566678 '_paramFoldLogical' tmp[566667] tmp[566674]))
            }
            {
              (566686 'move' tmp[566666](566683 '_paramFoldLogical' tmp[566667] 0))
            }
            (133989 call = domIsPrivatized[133946] tmp[566666])
            (480402 'end of statement' domIsPrivatized[133946] domToRemove[133898])
          }
          unknown distIsPrivatized[133997] "dead at end of block" "insert auto destroy"
          (543110 'init var' distIsPrivatized[133997] 0)
          (134000 'end of statement' domToRemove[133898])
          unknown call_tmp[661029] "expr temp" "maybe param" "maybe type" "temp"
          (661032 'move' call_tmp[661029](134003 call != distToRemove[133933] nil[44]))
          unknown call_tmp[661034] "expr temp" "maybe param" "maybe type" "temp"
          (661037 'move' call_tmp[661034](134034 call _cond_test call_tmp[661029]))
          if call_tmp[661034]
          {
            unknown call_tmp[661039] "expr temp" "maybe param" "maybe type" "temp"
            (661042 'move' call_tmp[661039](134007 call postfix! distToRemove[133933]))
            unknown call_tmp[661046] "expr temp" "maybe param" "maybe type" "temp"
            (661049 'move' call_tmp[661046](134013 call(134009 call (partial) remove _mt[243] call_tmp[661039])))
            (134014 call = distToFree[133941] call_tmp[661046])
            (480405 'end of statement' distToFree[133941] distToRemove[133933])
            unknown tmp[425809] "maybe param" "temp"
            (425820 'move' tmp[425809] 1)
            unknown call_tmp[661051] "expr temp" "maybe param" "maybe type" "temp"
            (661054 'move' call_tmp[661051](425822 call _cond_invalid tmp[425809]))
            if call_tmp[661051]
            {
              (425825 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566693] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566694] "maybe param" "temp"
            unknown call_tmp[661056] "expr temp" "maybe param" "maybe type" "temp"
            (661059 'move' call_tmp[661056](425810 call isTrue tmp[425809]))
            (566699 'move' tmp[566694](566697 call _cond_test call_tmp[661056]))
            if tmp[566694]
            {
              unknown tmp[566701] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[661061] "expr temp" "maybe param" "maybe type" "temp"
              (661064 'move' call_tmp[661061](134021 call postfix! distToRemove[133933]))
              unknown call_tmp[661068] "expr temp" "maybe param" "maybe type" "temp"
              (661071 'move' call_tmp[661068](134023 call pid _mt[243] call_tmp[661061]))
              unknown call_tmp[661073] "expr temp" "maybe param" "maybe type" "temp"
              (661076 'move' call_tmp[661073](134027 call != call_tmp[661068] nullPid[113718]))
              (566703 'move' tmp[566701](425813 call isTrue call_tmp[661073]))
              (566708 'move' tmp[566693](566705 '_paramFoldLogical' tmp[566694] tmp[566701]))
            }
            {
              (566713 'move' tmp[566693](566710 '_paramFoldLogical' tmp[566694] 0))
            }
            (134031 call = distIsPrivatized[133997] tmp[566693])
            (480409 'end of statement' distIsPrivatized[133997] distToRemove[133933])
          }
          unknown call_tmp[661078] "expr temp" "maybe param" "maybe type" "temp"
          (661081 'move' call_tmp[661078](134040 call != arrToFree[133896] nil[44]))
          unknown call_tmp[661083] "expr temp" "maybe param" "maybe type" "temp"
          (661086 'move' call_tmp[661083](134053 call _cond_test call_tmp[661078]))
          if call_tmp[661083]
          {
            unknown call_tmp[661088] "expr temp" "maybe param" "maybe type" "temp"
            (661091 'move' call_tmp[661088](134048 call _isPrivatized _instance[133873]))
            (134051 call _delete_arr _instance[133873] call_tmp[661088](deinitElts = deinitElts[133876]))
          }
          unknown call_tmp[661093] "expr temp" "maybe param" "maybe type" "temp"
          (661096 'move' call_tmp[661093](134060 call != domToFree[133925] nil[44]))
          unknown call_tmp[661098] "expr temp" "maybe param" "maybe type" "temp"
          (661101 'move' call_tmp[661098](134070 call _cond_test call_tmp[661093]))
          if call_tmp[661098]
          {
            unknown call_tmp[661103] "expr temp" "maybe param" "maybe type" "temp"
            (661106 'move' call_tmp[661103](134064 call postfix! instanceDom[133951]))
            (134068 call _delete_dom call_tmp[661103] domIsPrivatized[133946])
            (480413 'end of statement' instanceDom[133951] domIsPrivatized[133946])
          }
          unknown call_tmp[661108] "expr temp" "maybe param" "maybe type" "temp"
          (661111 'move' call_tmp[661108](134077 call != distToFree[133941] nil[44]))
          unknown call_tmp[661113] "expr temp" "maybe param" "maybe type" "temp"
          (661116 'move' call_tmp[661113](134087 call _cond_test call_tmp[661108]))
          if call_tmp[661113]
          {
            unknown call_tmp[661118] "expr temp" "maybe param" "maybe type" "temp"
            (661121 'move' call_tmp[661118](134081 call postfix! distToFree[133941]))
            (134085 call _delete_dist call_tmp[661118] distIsPrivatized[133997])
            (480416 'end of statement' distToFree[133941] distIsPrivatized[133997])
          }
        }
        (935211 return _void[55])
      }
      {
      }
    }
    {
      unknown call_tmp[661123] "expr temp" "maybe param" "maybe type" "temp"
      (661126 'move' call_tmp[661123](134107 call chpl__isArrayView _instance[133873]))
      unknown call_tmp[661128] "expr temp" "maybe param" "maybe type" "temp"
      (661131 'move' call_tmp[661128](134114 call _cond_test call_tmp[661123]))
      if call_tmp[661128]
      {
        (134110 call chpl__delete _instance[133873])
      }
    }
    (518434 return _void[55])
  }
  function _do_destroy_array[134132](arg array[134129]:_array[133594](?), arg deinitElts[134135] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[661135] "expr temp" "maybe param" "maybe type" "temp"
    (661138 'move' call_tmp[661135](134140 call _unowned _mt[243] array[134129]))
    unknown call_tmp[661142] "expr temp" "maybe param" "maybe type" "temp"
    (661145 'move' call_tmp[661142](134145 call _instance _mt[243] array[134129]))
    (134149 call _do_destroy_arr call_tmp[661135] call_tmp[661142] deinitElts[134135])
    (518436 return _void[55])
  }
  function _deinitElementsIsParallel[134158](arg eltType[134156]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518440] "RVV" "param" "temp"
    (518445 'move' ret[518440](518444 'deref' 0))
    (518442 return ret[518440])
  }
  function _deinitElements[134172](arg array[134169]:_array[133594](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[661149] "expr temp" "maybe param" "maybe type" "temp"
    (661152 'move' call_tmp[661149](134177 call eltType _mt[243] array[134169]))
    unknown call_tmp[661154] "maybe param" "maybe type" "temp"
    (661157 'move' call_tmp[661154](134180 'needs auto destroy' call_tmp[661149]))
    unknown needsDestroy[134181] "dead at end of block" "param"
    (543112 'init var' needsDestroy[134181] call_tmp[661154])
    (134184 'end of statement')
    unknown call_tmp[661159] "expr temp" "maybe param" "maybe type" "temp"
    (661162 'move' call_tmp[661159](134255 call _cond_test needsDestroy[134181]))
    if call_tmp[661159]
    {
      unknown call_tmp[661166] "expr temp" "maybe param" "maybe type" "temp"
      (661169 'move' call_tmp[661166](134189 call eltType _mt[243] array[134169]))
      unknown call_tmp[661171] "expr temp" "maybe param" "maybe type" "temp"
      (661174 'move' call_tmp[661171](134193 call _deinitElementsIsParallel call_tmp[661166]))
      unknown call_tmp[661176] "expr temp" "maybe param" "maybe type" "temp"
      (661179 'move' call_tmp[661176](134250 call _cond_test call_tmp[661171]))
      if call_tmp[661176]
      {
        Forall {
          induction variables:
            
            unknown elt[134203] "index var" "insert auto destroy"
          iterated expressions:
            array[134169]
          shadow variables:
          other variables
            forall body
          {
            (134199 call chpl__autoDestroy elt[134203])
            (480422 'end of statement' elt[134203])
          }
        }
      }
      {
        {
          unknown _indexOfInterest[134216] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[134217] "expr temp" "temp"
          (134226 'move' _iterator[134217](134224 call _getIterator array[134169]))
          Defer
          {
            {
              (134242 call _freeIterator _iterator[134217])
            }
          }
          { scopeless type
            (134231 'move' _indexOfInterest[134216](134228 call iteratorIndex _iterator[134217]))
          }
          ForLoop[134218]
          {
            unknown elt[134235] "index var" "insert auto destroy"
            (480425 'end of statement')
            (134237 'move' elt[134235] _indexOfInterest[134216])
            (480426 'end of statement' elt[134235])
            {
              (134213 call chpl__autoDestroy elt[134235])
              (480428 'end of statement' elt[134235])
            }
            label _continueLabel[134221]
            _indexOfInterest[134216]
            _iterator[134217]
          }
          label _breakLabel[134222]
        }
      }
    }
    unknown call_tmp[661183] "expr temp" "maybe param" "maybe type" "temp"
    (661186 'move' call_tmp[661183](134260 call _instance _mt[243] array[134169]))
    (134269 call(134265 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[661183]))
    (518447 return _void[55])
  }
  function _array[133594](?).equals[134280](arg _mt[134285]:_MT[238], arg this[134282]:_array[133594](?) :
  _array[133594](?), arg that[134277]:_array[133594](?)) : _unknown[51] "method"
  {
    unknown ret[518451] "RVV" "temp"
    unknown call_tmp[661192] "expr temp" "maybe param" "maybe type" "temp"
    (661195 'move' call_tmp[661192](134289 call _value _mt[243] this[134282]))
    unknown call_tmp[661199] "expr temp" "maybe param" "maybe type" "temp"
    (661202 'move' call_tmp[661199](134293 call _value _mt[243] that[134277]))
    unknown call_tmp[661204] "expr temp" "maybe param" "maybe type" "temp"
    (661207 'move' call_tmp[661204](134296 call == call_tmp[661192] call_tmp[661199]))
    unknown call_tmp[661209] "expr temp" "maybe param" "maybe type" "temp"
    (661212 'move' call_tmp[661209](134301 call _cond_test call_tmp[661204]))
    if call_tmp[661209]
    {
      (518457 'move' ret[518451](518456 'coerce' 1 bool[10]))
      gotoReturn _end_equals[518449] _end_equals[518449]
    }
    unknown call_tmp[661216] "expr temp" "maybe param" "maybe type" "temp"
    (661219 'move' call_tmp[661216](134308 call rank _mt[243] this[134282]))
    unknown call_tmp[661223] "expr temp" "maybe param" "maybe type" "temp"
    (661226 'move' call_tmp[661223](134312 call rank _mt[243] that[134277]))
    unknown call_tmp[661228] "expr temp" "maybe param" "maybe type" "temp"
    (661231 'move' call_tmp[661228](134315 call != call_tmp[661216] call_tmp[661223]))
    unknown call_tmp[661233] "expr temp" "maybe param" "maybe type" "temp"
    (661236 'move' call_tmp[661233](134320 call _cond_test call_tmp[661228]))
    if call_tmp[661233]
    {
      (518463 'move' ret[518451](518462 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518449] _end_equals[518449]
    }
    unknown call_tmp[661240] "expr temp" "maybe param" "maybe type" "temp"
    (661243 'move' call_tmp[661240](134326 call size _mt[243] this[134282]))
    unknown call_tmp[661247] "expr temp" "maybe param" "maybe type" "temp"
    (661250 'move' call_tmp[661247](134330 call size _mt[243] that[134277]))
    unknown call_tmp[661252] "expr temp" "maybe param" "maybe type" "temp"
    (661255 'move' call_tmp[661252](134333 call != call_tmp[661240] call_tmp[661247]))
    unknown call_tmp[661257] "expr temp" "maybe param" "maybe type" "temp"
    (661260 'move' call_tmp[661257](134338 call _cond_test call_tmp[661252]))
    if call_tmp[661257]
    {
      (518469 'move' ret[518451](518468 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518449] _end_equals[518449]
    }
    unknown tmp[425830] "maybe param" "temp"
    unknown call_tmp[661264] "expr temp" "maybe param" "maybe type" "temp"
    (661267 'move' call_tmp[661264](134345 call _dom _mt[243] this[134282]))
    (425841 'move' tmp[425830](134349 call isRectangularDom call_tmp[661264]))
    unknown call_tmp[661269] "expr temp" "maybe param" "maybe type" "temp"
    (661272 'move' call_tmp[661269](425843 call _cond_invalid tmp[425830]))
    if call_tmp[661269]
    {
      (425846 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566720] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566721] "maybe param" "temp"
    unknown call_tmp[661274] "expr temp" "maybe param" "maybe type" "temp"
    (661277 'move' call_tmp[661274](425831 call isTrue tmp[425830]))
    (566726 'move' tmp[566721](566724 call _cond_test call_tmp[661274]))
    if tmp[566721]
    {
      unknown tmp[566728] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661281] "expr temp" "maybe param" "maybe type" "temp"
      (661284 'move' call_tmp[661281](134352 call _dom _mt[243] that[134277]))
      unknown call_tmp[661286] "expr temp" "maybe param" "maybe type" "temp"
      (661289 'move' call_tmp[661286](134356 call isRectangularDom call_tmp[661281]))
      (566730 'move' tmp[566728](425834 call isTrue call_tmp[661286]))
      (566735 'move' tmp[566720](566732 '_paramFoldLogical' tmp[566721] tmp[566728]))
    }
    {
      (566740 'move' tmp[566720](566737 '_paramFoldLogical' tmp[566721] 0))
    }
    unknown call_tmp[661291] "expr temp" "maybe param" "maybe type" "temp"
    (661294 'move' call_tmp[661291](134449 call _cond_test tmp[566720]))
    if call_tmp[661291]
    {
      {
        unknown _indexOfInterest[134405] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[134406] "expr temp" "temp"
        unknown call_tmp[661298] "expr temp" "maybe param" "maybe type" "temp"
        (661301 'move' call_tmp[661298](134421 call rank _mt[243] this[134282]))
        unknown call_tmp[661303] "expr temp" "maybe param" "maybe type" "temp"
        (661306 'move' call_tmp[661303](134425 call chpl_direct_counted_range_iter 0 call_tmp[661298]))
        (134415 'move' _iterator[134406](134413 call _getIterator call_tmp[661303]))
        Defer
        {
          {
            (134441 call _freeIterator _iterator[134406])
          }
        }
        { scopeless type
          (134430 'move' _indexOfInterest[134405](134427 call iteratorIndex _iterator[134406]))
        }
        ForLoop[134407]
        {
          unknown d[134434] "index var" "insert auto destroy"
          (480436 'end of statement')
          (134436 'move' d[134434] _indexOfInterest[134405])
          (480437 'end of statement' d[134434])
          unknown call_tmp[661310] "expr temp" "maybe param" "maybe type" "temp"
          (661313 'move' call_tmp[661310](134370 call _dom _mt[243] this[134282]))
          unknown call_tmp[661317] "expr temp" "maybe param" "maybe type" "temp"
          (661320 'move' call_tmp[661317](134378 call(134373 call (partial) dim _mt[243] call_tmp[661310]) d[134434]))
          unknown call_tmp[661324] "expr temp" "maybe param" "maybe type" "temp"
          (661327 'move' call_tmp[661324](134379 call size _mt[243] call_tmp[661317]))
          unknown call_tmp[661331] "expr temp" "maybe param" "maybe type" "temp"
          (661334 'move' call_tmp[661331](134383 call _dom _mt[243] that[134277]))
          unknown call_tmp[661338] "expr temp" "maybe param" "maybe type" "temp"
          (661341 'move' call_tmp[661338](134391 call(134386 call (partial) dim _mt[243] call_tmp[661331]) d[134434]))
          unknown call_tmp[661345] "expr temp" "maybe param" "maybe type" "temp"
          (661348 'move' call_tmp[661345](134392 call size _mt[243] call_tmp[661338]))
          unknown call_tmp[661350] "expr temp" "maybe param" "maybe type" "temp"
          (661353 'move' call_tmp[661350](134395 call != call_tmp[661324] call_tmp[661345]))
          unknown call_tmp[661355] "expr temp" "maybe param" "maybe type" "temp"
          (661358 'move' call_tmp[661355](134400 call _cond_test call_tmp[661350]))
          if call_tmp[661355]
          {
            (518475 'move' ret[518451](518474 'coerce' 0 bool[10]))
            gotoReturn _end_equals[518449] _end_equals[518449]
          }
          label _continueLabel[134410]
          _indexOfInterest[134405]
          _iterator[134406]
        }
        label _breakLabel[134411]
      }
    }
    unknown call_tmp[661362] "expr temp" "maybe param" "maybe type" "temp"
    (661365 'move' call_tmp[661362](134455 call eltType _mt[243] this[134282]))
    unknown call_tmp[661367] "expr temp" "maybe param" "maybe type" "temp"
    (661370 'move' call_tmp[661367](134459 call isArrayType call_tmp[661362]))
    unknown call_tmp[661372] "expr temp" "maybe param" "maybe type" "temp"
    (661375 'move' call_tmp[661372](134525 call _cond_test call_tmp[661367]))
    if call_tmp[661372]
    {
      unknown ret[134461] "dead at end of block" "insert auto destroy"
      (543114 'init var' ret[134461] 1)
      (134464 'end of statement')
      Forall {
        induction variables:
          
          unknown thisArr[134506] "index var" "insert auto destroy"
          
          unknown thatArr[134508] "index var" "insert auto destroy"
        iterated expressions:
          this[134282]
          that[134277]
        shadow variables:
          ret[134477] 'reduce' intent outer var ret[134461]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown tmp[134494] "temp"
          (134497 'move' tmp[134494](134496 'addr of' ret[134477]))
          unknown tmp[425851] "maybe param" "temp"
          (425862 'move' tmp[425851] tmp[134494])
          unknown call_tmp[661377] "expr temp" "maybe param" "maybe type" "temp"
          (661380 'move' call_tmp[661377](425864 call _cond_invalid tmp[425851]))
          if call_tmp[661377]
          {
            (425867 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[566747] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[566748] "maybe param" "temp"
          unknown call_tmp[661382] "expr temp" "maybe param" "maybe type" "temp"
          (661385 'move' call_tmp[661382](425852 call isTrue tmp[425851]))
          (566753 'move' tmp[566748](566751 call _cond_test call_tmp[661382]))
          if tmp[566748]
          {
            unknown tmp[566755] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[661389] "expr temp" "maybe param" "maybe type" "temp"
            (661392 'move' call_tmp[661389](134492 call(134487 call (partial) equals _mt[243] thisArr[134506]) thatArr[134508]))
            (566757 'move' tmp[566755](425855 call isTrue call_tmp[661389]))
            (566762 'move' tmp[566747](566759 '_paramFoldLogical' tmp[566748] tmp[566755]))
          }
          {
            (566767 'move' tmp[566747](566764 '_paramFoldLogical' tmp[566748] 0))
          }
          (134502 call = tmp[134494] tmp[566747])
          (480441 'end of statement' thisArr[134506] thatArr[134508])
        }
      }
      (518481 'move' ret[518451](518480 'coerce' ret[134461] bool[10]))
      gotoReturn _end_equals[518449] _end_equals[518449]
      (480444 'end of statement' ret[134461])
    }
    {
      unknown call_tmp[661394] "expr temp" "maybe param" "maybe type" "temp"
      (661397 'move' call_tmp[661394](134518 call == this[134282] that[134277]))
      unknown call_tmp[661399] "expr temp" "maybe param" "maybe type" "temp"
      (661402 'move' call_tmp[661399](134520 'reduce' LogicalAndReduceScanOp[376662](?) call_tmp[661394] 0))
      (518487 'move' ret[518451](518486 'coerce' call_tmp[661399] bool[10]))
      gotoReturn _end_equals[518449] _end_equals[518449]
    }
    label _end_equals[518449]
    (518453 return ret[518451])
  }
  { scopeless type
    bool[10]
  }
  function _cast[134538](arg t[134535]:_array[133594](?), param arg arg[134540]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown ret[518493] "RVV" "temp"
    unknown result[134543] "dead at end of block" "insert auto destroy"
    (543116 'default init var' result[134543] t[134535])
    (134546 'end of statement')
    (134552 call chpl__transferArray result[134543] arg[134540])
    (480447 'end of statement' result[134543])
    (518498 'move' ret[518493](518497 'deref' result[134543]))
    gotoReturn _end__cast[518491] _end__cast[518491]
    (480449 'end of statement' result[134543])
    label _end__cast[518491]
    (518495 return ret[518493])
  }
  function _cast[134565](arg t[134562]:string[26], arg x[134570]:_array[133594](?)) : _unknown[51] "no doc"
  {
    unknown ret[518504] "RVV" "temp"
    unknown call_tmp[661404] "expr temp" "maybe param" "maybe type" "temp"
    (661407 'move' call_tmp[661404](134580 call stringify x[134570]))
    (518509 'move' ret[518504](518508 'deref' call_tmp[661404]))
    (518506 return ret[518504])
    (355167 'used modules list'(134574 'use' IO[230912]))
  }
  function isDmapType[134589](arg t[134587]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518531] "RVV" "param" "temp"
    function isDmapHelp[134597](arg t[134594]:_distribution[118973](?)) param : _unknown[51]
    {
      unknown ret[518513] "RVV" "param" "temp"
      (518518 'move' ret[518513](518517 'deref' 1))
      (518515 return ret[518513])
    }
    function isDmapHelp[134610](arg t[134608]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518522] "RVV" "param" "temp"
      (518527 'move' ret[518522](518526 'deref' 0))
      (518524 return ret[518522])
    }
    unknown call_tmp[661409] "expr temp" "maybe param" "maybe type" "temp"
    (661412 'move' call_tmp[661409](134621 call isDmapHelp t[134587]))
    (518536 'move' ret[518531](518535 'deref' call_tmp[661409]))
    (518533 return ret[518531])
  }
  function isDmapValue[134632](arg e[134629]:_distribution[118973](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518540] "RVV" "param" "temp"
    (518545 'move' ret[518540](518544 'deref' 1))
    (518542 return ret[518540])
  }
  function isDmapValue[134644](arg e[134642]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518549] "RVV" "param" "temp"
    (518554 'move' ret[518549](518553 'deref' 0))
    (518551 return ret[518549])
  }
  function isDomainType[134656](arg t[134654]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518558] "RVV" "param" "temp"
    unknown call_tmp[661414] "expr temp" "maybe param" "maybe type" "temp"
    (661417 'move' call_tmp[661414](354341 'is_subtype' _domain[125908](?) t[134654]))
    (518563 'move' ret[518558](518562 'deref' call_tmp[661414]))
    (518560 return ret[518558])
  }
  function isDomainValue[134674](arg e[134671]:_domain[125908](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518567] "RVV" "param" "temp"
    (518572 'move' ret[518567](518571 'deref' 1))
    (518569 return ret[518567])
  }
  function isDomainValue[134686](arg e[134684]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518576] "RVV" "param" "temp"
    (518581 'move' ret[518576](518580 'deref' 0))
    (518578 return ret[518576])
  }
  function isArrayType[134698](arg t[134696]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518585] "RVV" "param" "temp"
    unknown call_tmp[661419] "expr temp" "maybe param" "maybe type" "temp"
    (661422 'move' call_tmp[661419](354342 'is_subtype' _array[133594](?) t[134696]))
    (518590 'move' ret[518585](518589 'deref' call_tmp[661419]))
    (518587 return ret[518585])
  }
  function isArrayValue[134718](arg e[134715]:_array[133594](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518594] "RVV" "param" "temp"
    (518599 'move' ret[518594](518598 'deref' 1))
    (518596 return ret[518594])
  }
  function isArrayValue[134730](arg e[134728]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518603] "RVV" "param" "temp"
    (518608 'move' ret[518603](518607 'deref' 0))
    (518605 return ret[518603])
  }
  function -[134744](arg a[134741]:_domain[125908](?), arg b[134747]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518612] "RVV" "temp"
    unknown newDom[134764] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661424] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661427 'move' call_tmp[661424](134763 'typeof' a[134741]))
    (543118 'default init var' newDom[134764] call_tmp[661424])
    (134767 'end of statement')
    {
      unknown call_tmp[661429] "maybe param" "maybe type" "temp"
      (661432 'move' call_tmp[661429](134811 'task_get_serial'))
      unknown tmp[134810] "dead at end of block" "insert auto destroy" "temp"
      (543120 'init var' tmp[134810] call_tmp[661429])
      unknown call_tmp[661436] "expr temp" "maybe param" "maybe type" "temp"
      (661439 'move' call_tmp[661436](134770 call _value _mt[243] newDom[134764]))
      unknown call_tmp[661443] "expr temp" "maybe param" "maybe type" "temp"
      (661446 'move' call_tmp[661443](134773 call parSafe _mt[243] call_tmp[661436]))
      unknown call_tmp[661448] "expr temp" "maybe param" "maybe type" "temp"
      (661451 'move' call_tmp[661448](134776 call ! call_tmp[661443]))
      unknown call_tmp[661453] "expr temp" "maybe param" "maybe type" "temp"
      (661456 'move' call_tmp[661453](134807 call _cond_test call_tmp[661448]))
      if call_tmp[661453]
      {
        (134813 'task_set_serial' 1)
      }
      Defer
      {
        {
          (134817 'task_set_serial' tmp[134810])
        }
      }
      Forall {
        induction variables:
          
          unknown e[134803] "index var" "insert auto destroy"
        iterated expressions:
          a[134741]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[661460] "expr temp" "maybe param" "maybe type" "temp"
          (661463 'move' call_tmp[661460](134786 call(134781 call (partial) contains _mt[243] b[134747]) e[134803]))
          unknown call_tmp[661465] "expr temp" "maybe param" "maybe type" "temp"
          (661468 'move' call_tmp[661465](134787 call ! call_tmp[661460]))
          unknown call_tmp[661470] "expr temp" "maybe param" "maybe type" "temp"
          (661473 'move' call_tmp[661470](134797 call _cond_test call_tmp[661465]))
          if call_tmp[661470]
          {
            (134795 call(134790 call (partial) add _mt[243] newDom[134764]) e[134803])
            (480465 'end of statement' newDom[134764] e[134803])
          }
        }
      }
    }
    (518617 'move' ret[518612](518616 'deref' newDom[134764]))
    gotoReturn _end_-[518610] _end_-[518610]
    (480468 'end of statement' newDom[134764])
    label _end_-[518610]
    (518614 return ret[518612])
  }
  where {
    unknown tmp[425872] "maybe param" "temp"
    unknown call_tmp[661477] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661480 'move' call_tmp[661477](134751 'typeof' a[134741]))
    unknown call_tmp[661482] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661485 'move' call_tmp[661482](134753 'typeof' b[134747]))
    (425883 'move' tmp[425872](134754 call == call_tmp[661477] call_tmp[661482]))
    unknown call_tmp[661487] "expr temp" "maybe param" "maybe type" "temp"
    (661490 'move' call_tmp[661487](425885 call _cond_invalid tmp[425872]))
    if call_tmp[661487]
    {
      (425888 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566774] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566775] "maybe param" "temp"
    unknown call_tmp[661492] "expr temp" "maybe param" "maybe type" "temp"
    (661495 'move' call_tmp[661492](425873 call isTrue tmp[425872]))
    (566780 'move' tmp[566775](566778 call _cond_test call_tmp[661492]))
    if tmp[566775]
    {
      unknown tmp[566782] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661497] "expr temp" "maybe param" "maybe type" "temp"
      (661500 'move' call_tmp[661497](134759 call isAssociativeDom a[134741]))
      (566784 'move' tmp[566782](425876 call isTrue call_tmp[661497]))
      (566789 'move' tmp[566774](566786 '_paramFoldLogical' tmp[566775] tmp[566782]))
    }
    {
      (566794 'move' tmp[566774](566791 '_paramFoldLogical' tmp[566775] 0))
    }
    (748369 call chpl_statementLevelSymbol tmp[566774])
  }
  function -=[134833](ref arg a[134830]:_domain[125908](?), arg b[134836]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134873] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134874] "expr temp" "temp"
      (134883 'move' _iterator[134874](134881 call _getIterator b[134836]))
      Defer
      {
        {
          (134899 call _freeIterator _iterator[134874])
        }
      }
      { scopeless type
        (134888 'move' _indexOfInterest[134873](134885 call iteratorIndex _iterator[134874]))
      }
      ForLoop[134875]
      {
        unknown e[134892] "index var" "insert auto destroy"
        (480471 'end of statement')
        (134894 'move' e[134892] _indexOfInterest[134873])
        (480472 'end of statement' e[134892])
        unknown call_tmp[661504] "expr temp" "maybe param" "maybe type" "temp"
        (661507 'move' call_tmp[661504](134859 call(134854 call (partial) contains _mt[243] a[134830]) e[134892]))
        unknown call_tmp[661509] "expr temp" "maybe param" "maybe type" "temp"
        (661512 'move' call_tmp[661509](134868 call _cond_test call_tmp[661504]))
        if call_tmp[661509]
        {
          (134866 call(134861 call (partial) remove _mt[243] a[134830]) e[134892])
          (480474 'end of statement' e[134892])
        }
        label _continueLabel[134878]
        _indexOfInterest[134873]
        _iterator[134874]
      }
      label _breakLabel[134879]
    }
    (518621 return _void[55])
  }
  where {
    unknown tmp[425893] "maybe param" "temp"
    unknown call_tmp[661516] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661519 'move' call_tmp[661516](134840 'typeof' a[134830]))
    unknown call_tmp[661521] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661524 'move' call_tmp[661521](134842 'typeof' b[134836]))
    (425904 'move' tmp[425893](134843 call == call_tmp[661516] call_tmp[661521]))
    unknown call_tmp[661526] "expr temp" "maybe param" "maybe type" "temp"
    (661529 'move' call_tmp[661526](425906 call _cond_invalid tmp[425893]))
    if call_tmp[661526]
    {
      (425909 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566801] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566802] "maybe param" "temp"
    unknown call_tmp[661531] "expr temp" "maybe param" "maybe type" "temp"
    (661534 'move' call_tmp[661531](425894 call isTrue tmp[425893]))
    (566807 'move' tmp[566802](566805 call _cond_test call_tmp[661531]))
    if tmp[566802]
    {
      unknown tmp[566809] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661536] "expr temp" "maybe param" "maybe type" "temp"
      (661539 'move' call_tmp[661536](134848 call isAssociativeDom a[134830]))
      (566811 'move' tmp[566809](425897 call isTrue call_tmp[661536]))
      (566816 'move' tmp[566801](566813 '_paramFoldLogical' tmp[566802] tmp[566809]))
    }
    {
      (566821 'move' tmp[566801](566818 '_paramFoldLogical' tmp[566802] 0))
    }
    (748371 call chpl_statementLevelSymbol tmp[566801])
  }
  function |[134916](arg a[134913]:_domain[125908](?), arg b[134919]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518625] "RVV" "temp"
    unknown call_tmp[661541] "expr temp" "maybe param" "maybe type" "temp"
    (661544 'move' call_tmp[661541](134936 call + a[134913] b[134919]))
    (518630 'move' ret[518625](518629 'deref' call_tmp[661541]))
    (518627 return ret[518625])
  }
  where {
    unknown tmp[425914] "maybe param" "temp"
    unknown call_tmp[661546] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661549 'move' call_tmp[661546](134923 'typeof' a[134913]))
    unknown call_tmp[661551] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661554 'move' call_tmp[661551](134925 'typeof' b[134919]))
    (425925 'move' tmp[425914](134926 call == call_tmp[661546] call_tmp[661551]))
    unknown call_tmp[661556] "expr temp" "maybe param" "maybe type" "temp"
    (661559 'move' call_tmp[661556](425927 call _cond_invalid tmp[425914]))
    if call_tmp[661556]
    {
      (425930 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566828] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566829] "maybe param" "temp"
    unknown call_tmp[661561] "expr temp" "maybe param" "maybe type" "temp"
    (661564 'move' call_tmp[661561](425915 call isTrue tmp[425914]))
    (566834 'move' tmp[566829](566832 call _cond_test call_tmp[661561]))
    if tmp[566829]
    {
      unknown tmp[566836] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661566] "expr temp" "maybe param" "maybe type" "temp"
      (661569 'move' call_tmp[661566](134931 call isAssociativeDom a[134913]))
      (566838 'move' tmp[566836](425918 call isTrue call_tmp[661566]))
      (566843 'move' tmp[566828](566840 '_paramFoldLogical' tmp[566829] tmp[566836]))
    }
    {
      (566848 'move' tmp[566828](566845 '_paramFoldLogical' tmp[566829] 0))
    }
    (748373 call chpl_statementLevelSymbol tmp[566828])
  }
  function |=[134950](ref arg a[134947]:_domain[125908](?), arg b[134953]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134978] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134979] "expr temp" "temp"
      (134988 'move' _iterator[134979](134986 call _getIterator b[134953]))
      Defer
      {
        {
          (135004 call _freeIterator _iterator[134979])
        }
      }
      { scopeless type
        (134993 'move' _indexOfInterest[134978](134990 call iteratorIndex _iterator[134979]))
      }
      ForLoop[134980]
      {
        unknown e[134997] "index var" "insert auto destroy"
        (480478 'end of statement')
        (134999 'move' e[134997] _indexOfInterest[134978])
        (480479 'end of statement' e[134997])
        (134976 call(134971 call (partial) add _mt[243] a[134947]) e[134997])
        (480481 'end of statement' e[134997])
        label _continueLabel[134983]
        _indexOfInterest[134978]
        _iterator[134979]
      }
      label _breakLabel[134984]
    }
    (518632 return _void[55])
  }
  where {
    unknown tmp[425935] "maybe param" "temp"
    unknown call_tmp[661573] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661576 'move' call_tmp[661573](134957 'typeof' a[134947]))
    unknown call_tmp[661578] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661581 'move' call_tmp[661578](134959 'typeof' b[134953]))
    (425946 'move' tmp[425935](134960 call == call_tmp[661573] call_tmp[661578]))
    unknown call_tmp[661583] "expr temp" "maybe param" "maybe type" "temp"
    (661586 'move' call_tmp[661583](425948 call _cond_invalid tmp[425935]))
    if call_tmp[661583]
    {
      (425951 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566855] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566856] "maybe param" "temp"
    unknown call_tmp[661588] "expr temp" "maybe param" "maybe type" "temp"
    (661591 'move' call_tmp[661588](425936 call isTrue tmp[425935]))
    (566861 'move' tmp[566856](566859 call _cond_test call_tmp[661588]))
    if tmp[566856]
    {
      unknown tmp[566863] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661593] "expr temp" "maybe param" "maybe type" "temp"
      (661596 'move' call_tmp[661593](134965 call isAssociativeDom a[134947]))
      (566865 'move' tmp[566863](425939 call isTrue call_tmp[661593]))
      (566870 'move' tmp[566855](566867 '_paramFoldLogical' tmp[566856] tmp[566863]))
    }
    {
      (566875 'move' tmp[566855](566872 '_paramFoldLogical' tmp[566856] 0))
    }
    (748375 call chpl_statementLevelSymbol tmp[566855])
  }
  function +=[135021](ref arg a[135018]:_domain[125908](?), arg b[135024]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (135041 call |= a[135018] b[135024])
    (518634 return _void[55])
  }
  where {
    unknown tmp[425956] "maybe param" "temp"
    unknown call_tmp[661598] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661601 'move' call_tmp[661598](135028 'typeof' a[135018]))
    unknown call_tmp[661603] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661606 'move' call_tmp[661603](135030 'typeof' b[135024]))
    (425967 'move' tmp[425956](135031 call == call_tmp[661598] call_tmp[661603]))
    unknown call_tmp[661608] "expr temp" "maybe param" "maybe type" "temp"
    (661611 'move' call_tmp[661608](425969 call _cond_invalid tmp[425956]))
    if call_tmp[661608]
    {
      (425972 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566882] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566883] "maybe param" "temp"
    unknown call_tmp[661613] "expr temp" "maybe param" "maybe type" "temp"
    (661616 'move' call_tmp[661613](425957 call isTrue tmp[425956]))
    (566888 'move' tmp[566883](566886 call _cond_test call_tmp[661613]))
    if tmp[566883]
    {
      unknown tmp[566890] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661618] "expr temp" "maybe param" "maybe type" "temp"
      (661621 'move' call_tmp[661618](135036 call isAssociativeDom a[135018]))
      (566892 'move' tmp[566890](425960 call isTrue call_tmp[661618]))
      (566897 'move' tmp[566882](566894 '_paramFoldLogical' tmp[566883] tmp[566890]))
    }
    {
      (566902 'move' tmp[566882](566899 '_paramFoldLogical' tmp[566883] 0))
    }
    (748377 call chpl_statementLevelSymbol tmp[566882])
  }
  function &[135054](arg a[135051]:_domain[125908](?), arg b[135057]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518638] "RVV" "temp"
    unknown newDom[135074] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661623] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661626 'move' call_tmp[661623](135073 'typeof' a[135051]))
    (543122 'default init var' newDom[135074] call_tmp[661623])
    (135077 'end of statement')
    {
      unknown call_tmp[661628] "maybe param" "maybe type" "temp"
      (661631 'move' call_tmp[661628](135122 'task_get_serial'))
      unknown tmp[135121] "dead at end of block" "insert auto destroy" "temp"
      (543124 'init var' tmp[135121] call_tmp[661628])
      unknown call_tmp[661635] "expr temp" "maybe param" "maybe type" "temp"
      (661638 'move' call_tmp[661635](135080 call _value _mt[243] newDom[135074]))
      unknown call_tmp[661642] "expr temp" "maybe param" "maybe type" "temp"
      (661645 'move' call_tmp[661642](135083 call parSafe _mt[243] call_tmp[661635]))
      unknown call_tmp[661647] "expr temp" "maybe param" "maybe type" "temp"
      (661650 'move' call_tmp[661647](135086 call ! call_tmp[661642]))
      unknown call_tmp[661652] "expr temp" "maybe param" "maybe type" "temp"
      (661655 'move' call_tmp[661652](135118 call _cond_test call_tmp[661647]))
      if call_tmp[661652]
      {
        (135124 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135128 'task_set_serial' tmp[135121])
        }
      }
      Forall {
        induction variables:
          
          unknown k[135114] "index var" "insert auto destroy"
        iterated expressions:
          a[135051]
        shadow variables:
          newDom[135091] 'ref' intent outer var newDom[135074]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown call_tmp[661659] "expr temp" "maybe param" "maybe type" "temp"
          (661662 'move' call_tmp[661659](135102 call(135097 call (partial) contains _mt[243] b[135057]) k[135114]))
          unknown call_tmp[661664] "expr temp" "maybe param" "maybe type" "temp"
          (661667 'move' call_tmp[661664](135108 call _cond_test call_tmp[661659]))
          if call_tmp[661664]
          {
            (135105 call += newDom[135091] k[135114])
            (480486 'end of statement' newDom[135091] k[135114])
          }
        }
      }
    }
    (518643 'move' ret[518638](518642 'deref' newDom[135074]))
    gotoReturn _end_&[518636] _end_&[518636]
    (480489 'end of statement' newDom[135074])
    label _end_&[518636]
    (518640 return ret[518638])
  }
  where {
    unknown tmp[425977] "maybe param" "temp"
    unknown call_tmp[661669] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661672 'move' call_tmp[661669](135061 'typeof' a[135051]))
    unknown call_tmp[661674] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661677 'move' call_tmp[661674](135063 'typeof' b[135057]))
    (425988 'move' tmp[425977](135064 call == call_tmp[661669] call_tmp[661674]))
    unknown call_tmp[661679] "expr temp" "maybe param" "maybe type" "temp"
    (661682 'move' call_tmp[661679](425990 call _cond_invalid tmp[425977]))
    if call_tmp[661679]
    {
      (425993 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566909] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566910] "maybe param" "temp"
    unknown call_tmp[661684] "expr temp" "maybe param" "maybe type" "temp"
    (661687 'move' call_tmp[661684](425978 call isTrue tmp[425977]))
    (566915 'move' tmp[566910](566913 call _cond_test call_tmp[661684]))
    if tmp[566910]
    {
      unknown tmp[566917] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661689] "expr temp" "maybe param" "maybe type" "temp"
      (661692 'move' call_tmp[661689](135069 call isAssociativeDom a[135051]))
      (566919 'move' tmp[566917](425981 call isTrue call_tmp[661689]))
      (566924 'move' tmp[566909](566921 '_paramFoldLogical' tmp[566910] tmp[566917]))
    }
    {
      (566929 'move' tmp[566909](566926 '_paramFoldLogical' tmp[566910] 0))
    }
    (748379 call chpl_statementLevelSymbol tmp[566909])
  }
  function &=[135144](ref arg a[135141]:_domain[125908](?), arg b[135147]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown removeSet[135170] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661696] "expr temp" "maybe param" "maybe type" "temp"
    (661699 'move' call_tmp[661696](135163 call idxType _mt[243] a[135141]))
    unknown call_tmp[661701] "expr temp" "maybe param" "maybe type" "temp"
    (661704 'move' call_tmp[661701](135168 call chpl__buildDomainRuntimeType defaultDist[94053] call_tmp[661696]))
    (543126 'default init var' removeSet[135170] call_tmp[661701])
    (135173 'end of statement')
    {
      unknown _indexOfInterest[135196] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135197] "expr temp" "temp"
      (135206 'move' _iterator[135197](135204 call _getIterator a[135141]))
      Defer
      {
        {
          (135222 call _freeIterator _iterator[135197])
        }
      }
      { scopeless type
        (135211 'move' _indexOfInterest[135196](135208 call iteratorIndex _iterator[135197]))
      }
      ForLoop[135198]
      {
        unknown e[135215] "index var" "insert auto destroy"
        (480492 'end of statement')
        (135217 'move' e[135215] _indexOfInterest[135196])
        (480493 'end of statement' e[135215])
        unknown call_tmp[661708] "expr temp" "maybe param" "maybe type" "temp"
        (661711 'move' call_tmp[661708](135183 call(135178 call (partial) contains _mt[243] b[135147]) e[135215]))
        unknown call_tmp[661713] "expr temp" "maybe param" "maybe type" "temp"
        (661716 'move' call_tmp[661713](135184 call ! call_tmp[661708]))
        unknown call_tmp[661718] "expr temp" "maybe param" "maybe type" "temp"
        (661721 'move' call_tmp[661718](135191 call _cond_test call_tmp[661713]))
        if call_tmp[661718]
        {
          (135188 call += removeSet[135170] e[135215])
          (480495 'end of statement' removeSet[135170] e[135215])
        }
        label _continueLabel[135201]
        _indexOfInterest[135196]
        _iterator[135197]
      }
      label _breakLabel[135202]
    }
    {
      unknown _indexOfInterest[135239] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135240] "expr temp" "temp"
      (135249 'move' _iterator[135240](135247 call _getIterator removeSet[135170]))
      Defer
      {
        {
          (135265 call _freeIterator _iterator[135240])
        }
      }
      { scopeless type
        (135254 'move' _indexOfInterest[135239](135251 call iteratorIndex _iterator[135240]))
      }
      ForLoop[135241]
      {
        unknown e[135258] "index var" "insert auto destroy"
        (480499 'end of statement')
        (135260 'move' e[135258] _indexOfInterest[135239])
        (480500 'end of statement' e[135258])
        (135237 call(135232 call (partial) remove _mt[243] a[135141]) e[135258])
        (480502 'end of statement' e[135258])
        label _continueLabel[135244]
        _indexOfInterest[135239]
        _iterator[135240]
      }
      label _breakLabel[135245]
    }
    (518647 return _void[55])
  }
  where {
    unknown tmp[425998] "maybe param" "temp"
    unknown call_tmp[661725] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661728 'move' call_tmp[661725](135151 'typeof' a[135141]))
    unknown call_tmp[661730] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661733 'move' call_tmp[661730](135153 'typeof' b[135147]))
    (426009 'move' tmp[425998](135154 call == call_tmp[661725] call_tmp[661730]))
    unknown call_tmp[661735] "expr temp" "maybe param" "maybe type" "temp"
    (661738 'move' call_tmp[661735](426011 call _cond_invalid tmp[425998]))
    if call_tmp[661735]
    {
      (426014 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566936] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566937] "maybe param" "temp"
    unknown call_tmp[661740] "expr temp" "maybe param" "maybe type" "temp"
    (661743 'move' call_tmp[661740](425999 call isTrue tmp[425998]))
    (566942 'move' tmp[566937](566940 call _cond_test call_tmp[661740]))
    if tmp[566937]
    {
      unknown tmp[566944] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661745] "expr temp" "maybe param" "maybe type" "temp"
      (661748 'move' call_tmp[661745](135159 call isAssociativeDom a[135141]))
      (566946 'move' tmp[566944](426002 call isTrue call_tmp[661745]))
      (566951 'move' tmp[566936](566948 '_paramFoldLogical' tmp[566937] tmp[566944]))
    }
    {
      (566956 'move' tmp[566936](566953 '_paramFoldLogical' tmp[566937] 0))
    }
    (748381 call chpl_statementLevelSymbol tmp[566936])
  }
  function ^[135281](arg a[135278]:_domain[125908](?), arg b[135284]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[518651] "RVV" "temp"
    unknown newDom[135301] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661750] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661753 'move' call_tmp[661750](135300 'typeof' a[135278]))
    (543128 'default init var' newDom[135301] call_tmp[661750])
    (135304 'end of statement')
    {
      unknown call_tmp[661755] "maybe param" "maybe type" "temp"
      (661758 'move' call_tmp[661755](135378 'task_get_serial'))
      unknown tmp[135377] "dead at end of block" "insert auto destroy" "temp"
      (543130 'init var' tmp[135377] call_tmp[661755])
      unknown call_tmp[661762] "expr temp" "maybe param" "maybe type" "temp"
      (661765 'move' call_tmp[661762](135307 call _value _mt[243] newDom[135301]))
      unknown call_tmp[661769] "expr temp" "maybe param" "maybe type" "temp"
      (661772 'move' call_tmp[661769](135310 call parSafe _mt[243] call_tmp[661762]))
      unknown call_tmp[661774] "expr temp" "maybe param" "maybe type" "temp"
      (661777 'move' call_tmp[661774](135313 call ! call_tmp[661769]))
      unknown call_tmp[661779] "expr temp" "maybe param" "maybe type" "temp"
      (661782 'move' call_tmp[661779](135374 call _cond_test call_tmp[661774]))
      if call_tmp[661779]
      {
        (135380 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135384 'task_set_serial' tmp[135377])
        }
      }
      {
        Forall {
          induction variables:
            
            unknown k[135340] "index var" "insert auto destroy"
          iterated expressions:
            a[135278]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661786] "expr temp" "maybe param" "maybe type" "temp"
            (661789 'move' call_tmp[661786](135323 call(135318 call (partial) contains _mt[243] b[135284]) k[135340]))
            unknown call_tmp[661791] "expr temp" "maybe param" "maybe type" "temp"
            (661794 'move' call_tmp[661791](135324 call ! call_tmp[661786]))
            unknown call_tmp[661796] "expr temp" "maybe param" "maybe type" "temp"
            (661799 'move' call_tmp[661796](135334 call _cond_test call_tmp[661791]))
            if call_tmp[661796]
            {
              (135332 call(135327 call (partial) add _mt[243] newDom[135301]) k[135340])
              (480506 'end of statement' newDom[135301] k[135340])
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135370] "index var" "insert auto destroy"
          iterated expressions:
            b[135284]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661805] "expr temp" "maybe param" "maybe type" "temp"
            (661808 'move' call_tmp[661805](135353 call(135348 call (partial) contains _mt[243] a[135278]) k[135370]))
            unknown call_tmp[661810] "expr temp" "maybe param" "maybe type" "temp"
            (661813 'move' call_tmp[661810](135354 call ! call_tmp[661805]))
            unknown call_tmp[661815] "expr temp" "maybe param" "maybe type" "temp"
            (661818 'move' call_tmp[661815](135364 call _cond_test call_tmp[661810]))
            if call_tmp[661815]
            {
              (135362 call(135357 call (partial) add _mt[243] newDom[135301]) k[135370])
              (480509 'end of statement' newDom[135301] k[135370])
            }
          }
        }
      }
    }
    (518656 'move' ret[518651](518655 'deref' newDom[135301]))
    gotoReturn _end_^[518649] _end_^[518649]
    (480512 'end of statement' newDom[135301])
    label _end_^[518649]
    (518653 return ret[518651])
  }
  where {
    unknown tmp[426019] "maybe param" "temp"
    unknown call_tmp[661822] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661825 'move' call_tmp[661822](135288 'typeof' a[135278]))
    unknown call_tmp[661827] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661830 'move' call_tmp[661827](135290 'typeof' b[135284]))
    (426030 'move' tmp[426019](135291 call == call_tmp[661822] call_tmp[661827]))
    unknown call_tmp[661832] "expr temp" "maybe param" "maybe type" "temp"
    (661835 'move' call_tmp[661832](426032 call _cond_invalid tmp[426019]))
    if call_tmp[661832]
    {
      (426035 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566963] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566964] "maybe param" "temp"
    unknown call_tmp[661837] "expr temp" "maybe param" "maybe type" "temp"
    (661840 'move' call_tmp[661837](426020 call isTrue tmp[426019]))
    (566969 'move' tmp[566964](566967 call _cond_test call_tmp[661837]))
    if tmp[566964]
    {
      unknown tmp[566971] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661842] "expr temp" "maybe param" "maybe type" "temp"
      (661845 'move' call_tmp[661842](135296 call isAssociativeDom a[135278]))
      (566973 'move' tmp[566971](426023 call isTrue call_tmp[661842]))
      (566978 'move' tmp[566963](566975 '_paramFoldLogical' tmp[566964] tmp[566971]))
    }
    {
      (566983 'move' tmp[566963](566980 '_paramFoldLogical' tmp[566964] 0))
    }
    (748383 call chpl_statementLevelSymbol tmp[566963])
  }
  function ^=[135400](ref arg a[135397]:_domain[125908](?), arg b[135403]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135449] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135450] "expr temp" "temp"
      (135459 'move' _iterator[135450](135457 call _getIterator b[135403]))
      Defer
      {
        {
          (135475 call _freeIterator _iterator[135450])
        }
      }
      { scopeless type
        (135464 'move' _indexOfInterest[135449](135461 call iteratorIndex _iterator[135450]))
      }
      ForLoop[135451]
      {
        unknown e[135468] "index var" "insert auto destroy"
        (480515 'end of statement')
        (135470 'move' e[135468] _indexOfInterest[135449])
        (480516 'end of statement' e[135468])
        unknown call_tmp[661849] "expr temp" "maybe param" "maybe type" "temp"
        (661852 'move' call_tmp[661849](135426 call(135421 call (partial) contains _mt[243] a[135397]) e[135468]))
        unknown call_tmp[661854] "expr temp" "maybe param" "maybe type" "temp"
        (661857 'move' call_tmp[661854](135443 call _cond_test call_tmp[661849]))
        if call_tmp[661854]
        {
          (135433 call(135428 call (partial) remove _mt[243] a[135397]) e[135468])
          (480518 'end of statement' e[135468])
        }
        {
          (135441 call(135436 call (partial) add _mt[243] a[135397]) e[135468])
          (480520 'end of statement' e[135468])
        }
        label _continueLabel[135454]
        _indexOfInterest[135449]
        _iterator[135450]
      }
      label _breakLabel[135455]
    }
    (518660 return _void[55])
  }
  where {
    unknown tmp[426040] "maybe param" "temp"
    unknown call_tmp[661863] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661866 'move' call_tmp[661863](135407 'typeof' a[135397]))
    unknown call_tmp[661868] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661871 'move' call_tmp[661868](135409 'typeof' b[135403]))
    (426051 'move' tmp[426040](135410 call == call_tmp[661863] call_tmp[661868]))
    unknown call_tmp[661873] "expr temp" "maybe param" "maybe type" "temp"
    (661876 'move' call_tmp[661873](426053 call _cond_invalid tmp[426040]))
    if call_tmp[661873]
    {
      (426056 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566990] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566991] "maybe param" "temp"
    unknown call_tmp[661878] "expr temp" "maybe param" "maybe type" "temp"
    (661881 'move' call_tmp[661878](426041 call isTrue tmp[426040]))
    (566996 'move' tmp[566991](566994 call _cond_test call_tmp[661878]))
    if tmp[566991]
    {
      unknown tmp[566998] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661883] "expr temp" "maybe param" "maybe type" "temp"
      (661886 'move' call_tmp[661883](135415 call isAssociativeDom a[135397]))
      (567000 'move' tmp[566998](426044 call isTrue call_tmp[661883]))
      (567005 'move' tmp[566990](567002 '_paramFoldLogical' tmp[566991] tmp[566998]))
    }
    {
      (567010 'move' tmp[566990](567007 '_paramFoldLogical' tmp[566991] 0))
    }
    (748385 call chpl_statementLevelSymbol tmp[566990])
  }
  function +=[135492](ref arg sd[135489]:_domain[125908](?), arg inds[135501]:_array[133594](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[661890] "expr temp" "maybe param" "maybe type" "temp"
    (661893 'move' call_tmp[661890](135509 call size _mt[243] inds[135501]))
    unknown call_tmp[661895] "expr temp" "maybe param" "maybe type" "temp"
    (661898 'move' call_tmp[661895](135513 call == call_tmp[661890] 0))
    unknown call_tmp[661900] "expr temp" "maybe param" "maybe type" "temp"
    (661903 'move' call_tmp[661900](135517 call _cond_test call_tmp[661895]))
    if call_tmp[661900]
    {
      gotoReturn _end_+=[518662] _end_+=[518662]
    }
    unknown call_tmp[661907] "expr temp" "maybe param" "maybe type" "temp"
    (661910 'move' call_tmp[661907](135524 call _value _mt[243] sd[135489]))
    (135532 call(135527 call (partial) dsiBulkAdd _mt[243] call_tmp[661907]) inds[135501])
    label _end_+=[518662]
    (518664 return _void[55])
  }
  where {
    unknown call_tmp[661914] "expr temp" "maybe param" "maybe type" "temp"
    (661917 'move' call_tmp[661914](135507 call isSparseDom sd[135489]))
    unknown call_tmp[661919] "expr temp" "maybe param" "maybe type" "temp"
    (661922 'move' call_tmp[661919](135496 call chpl__buildIndexType sd[135489]))
    unknown call_tmp[661926] "expr temp" "maybe param" "maybe type" "temp"
    (661929 'move' call_tmp[661926](461472 call eltType _mt[243] inds[135501]))
    unknown call_tmp[661931] "expr temp" "maybe param" "maybe type" "temp"
    (661934 'move' call_tmp[661931](461476 call == call_tmp[661919] call_tmp[661926]))
    (461470 call & call_tmp[661914] call_tmp[661931])
  }
  function +=[135543](ref arg sd[135540]:_domain[125908](?), arg d[135546]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[661938] "expr temp" "maybe param" "maybe type" "temp"
    (661941 'move' call_tmp[661938](135578 call size _mt[243] d[135546]))
    unknown call_tmp[661943] "expr temp" "maybe param" "maybe type" "temp"
    (661946 'move' call_tmp[661943](135582 call == call_tmp[661938] 0))
    unknown call_tmp[661948] "expr temp" "maybe param" "maybe type" "temp"
    (661951 'move' call_tmp[661948](135586 call _cond_test call_tmp[661943]))
    if call_tmp[661948]
    {
      gotoReturn _end_+=[518668] _end_+=[518668]
    }
    unknown call_tmp[661955] "maybe param" "maybe type" "temp"
    (661958 'move' call_tmp[661955](135593 call size _mt[243] d[135546]))
    const indCount[135596] "dead at end of block" "const" "insert auto destroy"
    (543132 'init var' indCount[135596] call_tmp[661955])
    (135599 'end of statement')
    unknown arr[135618] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661960] "expr temp" "maybe param" "maybe type" "temp"
    (661963 'move' call_tmp[661960](135601 call chpl_build_low_bounded_range 0))
    unknown call_tmp[661965] "expr temp" "maybe param" "maybe type" "temp"
    (661968 'move' call_tmp[661965](135604 call # call_tmp[661960] indCount[135596]))
    unknown call_tmp[661970] "expr temp" "maybe param" "maybe type" "temp"
    (661973 'move' call_tmp[661970](135607 call chpl__buildDomainExpr call_tmp[661965]))
    unknown call_tmp[661975] "expr temp" "maybe param" "maybe type" "temp"
    (661978 'move' call_tmp[661975](135614 call chpl__ensureDomainExpr call_tmp[661970]))
    unknown call_tmp[661980] "expr temp" "maybe param" "maybe type" "temp"
    (661983 'move' call_tmp[661980](135612 call chpl__buildIndexType sd[135540]))
    unknown call_tmp[661985] "expr temp" "maybe param" "maybe type" "temp"
    (661988 'move' call_tmp[661985](135616 call chpl__buildArrayRuntimeType call_tmp[661975] call_tmp[661980]))
    (543134 'default init var' arr[135618] call_tmp[661985])
    (135621 'end of statement')
    {
      unknown _indexOfInterest[135641] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135642] "expr temp" "temp"
      unknown call_tmp[661990] "expr temp" "maybe param" "maybe type" "temp"
      (661993 'move' call_tmp[661990](135651 call _getIterator d[135546]))
      unknown call_tmp[661995] "expr temp" "maybe param" "maybe type" "temp"
      (661998 'move' call_tmp[661995](135654 call chpl_build_low_bounded_range 0))
      unknown call_tmp[662000] "expr temp" "maybe param" "maybe type" "temp"
      (662003 'move' call_tmp[662000](135656 call _getIterator call_tmp[661995]))
      (135659 'move' _iterator[135642](135632 call _build_tuple call_tmp[661990] call_tmp[662000]))
      Defer
      {
        {
          (135689 call _freeIterator _iterator[135642])
        }
      }
      { scopeless type
        (135664 'move' _indexOfInterest[135641](135661 call iteratorIndex _iterator[135642]))
      }
      ForLoop[135643]
      {
        (135669 call _check_tuple_var_decl _indexOfInterest[135641] 2)
        (480527 'end of statement')
        unknown i[135675] "index var" "insert auto destroy"
        (480528 'end of statement')
        (135677 'move' i[135675](135673 call _indexOfInterest[135641] 0))
        (480529 'end of statement' i[135675])
        unknown j[135682] "index var" "insert auto destroy"
        (480531 'end of statement')
        (135684 'move' j[135682](135680 call _indexOfInterest[135641] 1))
        (480532 'end of statement' j[135682])
        unknown call_tmp[662005] "expr temp" "maybe param" "maybe type" "temp"
        (662008 'move' call_tmp[662005](135636 call arr[135618] j[135682]))
        (135638 call = call_tmp[662005] i[135675])
        (480534 'end of statement' arr[135618] j[135682] i[135675])
        label _continueLabel[135646]
        _indexOfInterest[135641]
        _iterator[135642]
      }
      label _breakLabel[135647]
    }
    unknown rowSorted[135697] "dead at end of block" "insert auto destroy"
    (543136 'init var' rowSorted[135697] 0)
    (135700 'end of statement' indCount[135596])
    unknown call_tmp[662012] "expr temp" "maybe param" "maybe type" "temp"
    (662015 'move' call_tmp[662012](135702 call _value _mt[243] sd[135540]))
    (135713 call(135705 call (partial) dsiBulkAdd _mt[243] call_tmp[662012]) arr[135618] rowSorted[135697] 1 0)
    (480538 'end of statement' arr[135618] rowSorted[135697])
    label _end_+=[518668]
    (518670 return _void[55])
  }
  where {
    unknown tmp[426061] "maybe param" "temp"
    unknown tmp[426082] "maybe param" "temp"
    (426093 'move' tmp[426082](135552 call isSparseDom sd[135540]))
    unknown call_tmp[662019] "expr temp" "maybe param" "maybe type" "temp"
    (662022 'move' call_tmp[662019](426095 call _cond_invalid tmp[426082]))
    if call_tmp[662019]
    {
      (426098 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567017] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567018] "maybe param" "temp"
    unknown call_tmp[662024] "expr temp" "maybe param" "maybe type" "temp"
    (662027 'move' call_tmp[662024](426083 call isTrue tmp[426082]))
    (567023 'move' tmp[567018](567021 call _cond_test call_tmp[662024]))
    if tmp[567018]
    {
      unknown tmp[567025] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662031] "expr temp" "maybe param" "maybe type" "temp"
      (662034 'move' call_tmp[662031](135554 call rank _mt[243] d[135546]))
      unknown call_tmp[662038] "expr temp" "maybe param" "maybe type" "temp"
      (662041 'move' call_tmp[662038](135558 call rank _mt[243] sd[135540]))
      unknown call_tmp[662043] "expr temp" "maybe param" "maybe type" "temp"
      (662046 'move' call_tmp[662043](135561 call == call_tmp[662031] call_tmp[662038]))
      (567027 'move' tmp[567025](426086 call isTrue call_tmp[662043]))
      (567032 'move' tmp[567017](567029 '_paramFoldLogical' tmp[567018] tmp[567025]))
    }
    {
      (567037 'move' tmp[567017](567034 '_paramFoldLogical' tmp[567018] 0))
    }
    (426072 'move' tmp[426061] tmp[567017])
    unknown call_tmp[662048] "expr temp" "maybe param" "maybe type" "temp"
    (662051 'move' call_tmp[662048](426074 call _cond_invalid tmp[426061]))
    if call_tmp[662048]
    {
      (426077 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567044] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567045] "maybe param" "temp"
    unknown call_tmp[662053] "expr temp" "maybe param" "maybe type" "temp"
    (662056 'move' call_tmp[662053](426062 call isTrue tmp[426061]))
    (567050 'move' tmp[567045](567048 call _cond_test call_tmp[662053]))
    if tmp[567045]
    {
      unknown tmp[567052] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662060] "expr temp" "maybe param" "maybe type" "temp"
      (662063 'move' call_tmp[662060](135566 call idxType _mt[243] sd[135540]))
      unknown call_tmp[662067] "expr temp" "maybe param" "maybe type" "temp"
      (662070 'move' call_tmp[662067](135570 call idxType _mt[243] d[135546]))
      unknown call_tmp[662072] "expr temp" "maybe param" "maybe type" "temp"
      (662075 'move' call_tmp[662072](135573 call == call_tmp[662060] call_tmp[662067]))
      (567054 'move' tmp[567052](426065 call isTrue call_tmp[662072]))
      (567059 'move' tmp[567044](567056 '_paramFoldLogical' tmp[567045] tmp[567052]))
    }
    {
      (567064 'move' tmp[567044](567061 '_paramFoldLogical' tmp[567045] 0))
    }
    (748387 call chpl_statementLevelSymbol tmp[567044])
  }
  function -=[135724](ref arg sd[135721]:_domain[125908](?), arg inds[135733]:_array[133594](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135747] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135748] "expr temp" "temp"
      (135757 'move' _iterator[135748](135755 call _getIterator inds[135733]))
      Defer
      {
        {
          (135773 call _freeIterator _iterator[135748])
        }
      }
      { scopeless type
        (135762 'move' _indexOfInterest[135747](135759 call iteratorIndex _iterator[135748]))
      }
      ForLoop[135749]
      {
        unknown ind[135766] "index var" "insert auto destroy"
        (480542 'end of statement')
        (135768 'move' ind[135766] _indexOfInterest[135747])
        (480543 'end of statement' ind[135766])
        (135744 call -= sd[135721] ind[135766])
        (480545 'end of statement' ind[135766])
        label _continueLabel[135752]
        _indexOfInterest[135747]
        _iterator[135748]
      }
      label _breakLabel[135753]
    }
    (518674 return _void[55])
  }
  where {
    unknown call_tmp[662077] "expr temp" "maybe param" "maybe type" "temp"
    (662080 'move' call_tmp[662077](135739 call isSparseDom sd[135721]))
    unknown call_tmp[662082] "expr temp" "maybe param" "maybe type" "temp"
    (662085 'move' call_tmp[662082](135728 call chpl__buildIndexType sd[135721]))
    unknown call_tmp[662089] "expr temp" "maybe param" "maybe type" "temp"
    (662092 'move' call_tmp[662089](461482 call eltType _mt[243] inds[135733]))
    unknown call_tmp[662094] "expr temp" "maybe param" "maybe type" "temp"
    (662097 'move' call_tmp[662094](461486 call == call_tmp[662082] call_tmp[662089]))
    (461480 call & call_tmp[662077] call_tmp[662094])
  }
  function -=[135790](ref arg sd[135787]:_domain[125908](?), arg d[135793]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135831] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135832] "expr temp" "temp"
      (135841 'move' _iterator[135832](135839 call _getIterator d[135793]))
      Defer
      {
        {
          (135857 call _freeIterator _iterator[135832])
        }
      }
      { scopeless type
        (135846 'move' _indexOfInterest[135831](135843 call iteratorIndex _iterator[135832]))
      }
      ForLoop[135833]
      {
        unknown ind[135850] "index var" "insert auto destroy"
        (480548 'end of statement')
        (135852 'move' ind[135850] _indexOfInterest[135831])
        (480549 'end of statement' ind[135850])
        (135828 call -= sd[135787] ind[135850])
        (480551 'end of statement' ind[135850])
        label _continueLabel[135836]
        _indexOfInterest[135831]
        _iterator[135832]
      }
      label _breakLabel[135837]
    }
    (518676 return _void[55])
  }
  where {
    unknown tmp[426103] "maybe param" "temp"
    unknown tmp[426124] "maybe param" "temp"
    (426135 'move' tmp[426124](135799 call isSparseDom sd[135787]))
    unknown call_tmp[662099] "expr temp" "maybe param" "maybe type" "temp"
    (662102 'move' call_tmp[662099](426137 call _cond_invalid tmp[426124]))
    if call_tmp[662099]
    {
      (426140 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567071] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567072] "maybe param" "temp"
    unknown call_tmp[662104] "expr temp" "maybe param" "maybe type" "temp"
    (662107 'move' call_tmp[662104](426125 call isTrue tmp[426124]))
    (567077 'move' tmp[567072](567075 call _cond_test call_tmp[662104]))
    if tmp[567072]
    {
      unknown tmp[567079] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662111] "expr temp" "maybe param" "maybe type" "temp"
      (662114 'move' call_tmp[662111](135801 call rank _mt[243] d[135793]))
      unknown call_tmp[662118] "expr temp" "maybe param" "maybe type" "temp"
      (662121 'move' call_tmp[662118](135805 call rank _mt[243] sd[135787]))
      unknown call_tmp[662123] "expr temp" "maybe param" "maybe type" "temp"
      (662126 'move' call_tmp[662123](135808 call == call_tmp[662111] call_tmp[662118]))
      (567081 'move' tmp[567079](426128 call isTrue call_tmp[662123]))
      (567086 'move' tmp[567071](567083 '_paramFoldLogical' tmp[567072] tmp[567079]))
    }
    {
      (567091 'move' tmp[567071](567088 '_paramFoldLogical' tmp[567072] 0))
    }
    (426114 'move' tmp[426103] tmp[567071])
    unknown call_tmp[662128] "expr temp" "maybe param" "maybe type" "temp"
    (662131 'move' call_tmp[662128](426116 call _cond_invalid tmp[426103]))
    if call_tmp[662128]
    {
      (426119 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567098] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567099] "maybe param" "temp"
    unknown call_tmp[662133] "expr temp" "maybe param" "maybe type" "temp"
    (662136 'move' call_tmp[662133](426104 call isTrue tmp[426103]))
    (567104 'move' tmp[567099](567102 call _cond_test call_tmp[662133]))
    if tmp[567099]
    {
      unknown tmp[567106] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662140] "expr temp" "maybe param" "maybe type" "temp"
      (662143 'move' call_tmp[662140](135813 call idxType _mt[243] sd[135787]))
      unknown call_tmp[662147] "expr temp" "maybe param" "maybe type" "temp"
      (662150 'move' call_tmp[662147](135817 call idxType _mt[243] d[135793]))
      unknown call_tmp[662152] "expr temp" "maybe param" "maybe type" "temp"
      (662155 'move' call_tmp[662152](135820 call == call_tmp[662140] call_tmp[662147]))
      (567108 'move' tmp[567106](426107 call isTrue call_tmp[662152]))
      (567113 'move' tmp[567098](567110 '_paramFoldLogical' tmp[567099] tmp[567106]))
    }
    {
      (567118 'move' tmp[567098](567115 '_paramFoldLogical' tmp[567099] 0))
    }
    (748389 call chpl_statementLevelSymbol tmp[567098])
  }
  function isCollapsedDimension[135884](arg r[135881]:range[64319](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518680] "RVV" "param" "temp"
    (518685 'move' ret[518680](518684 'deref' 0))
    (518682 return ret[518680])
  }
  function isCollapsedDimension[135896](arg r[135894]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518689] "RVV" "param" "temp"
    (518694 'move' ret[518689](518693 'deref' 1))
    (518691 return ret[518689])
  }
  function chpl__anyStridable[135908](arg ranges[135906]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518698] "RVV" "param" "temp"
    {
      unknown i[135935] "dead at end of block" "insert auto destroy"
      (543138 'init var' i[135935] 0)
      (480555 'end of statement')
      unknown tmp[135936] "maybe param" "temp"
      unknown call_tmp[662159] "expr temp" "maybe param" "maybe type" "temp"
      (662162 'move' call_tmp[662159](135912 call size _mt[243] ranges[135906]))
      unknown call_tmp[662164] "expr temp" "maybe param" "maybe type" "temp"
      (662167 'move' call_tmp[662164](135916 call - call_tmp[662159] 1))
      (135948 'move' tmp[135936](135946 call chpl_compute_low_param_loop_bound 0 call_tmp[662164]))
      unknown tmp[135937] "maybe param" "temp"
      unknown call_tmp[662171] "expr temp" "maybe param" "maybe type" "temp"
      (662174 'move' call_tmp[662171](135955 call size _mt[243] ranges[135906]))
      unknown call_tmp[662176] "expr temp" "maybe param" "maybe type" "temp"
      (662179 'move' call_tmp[662176](135953 call - call_tmp[662171] 1))
      (135961 'move' tmp[135937](135959 call chpl_compute_high_param_loop_bound 0 call_tmp[662176]))
      unknown tmp[135938] "maybe param" "temp"
      (135964 'move' tmp[135938] 1)
      ParamForLoop[135966]
      { i[135935] tmp[135936] tmp[135937] tmp[135938]
        unknown call_tmp[662181] "expr temp" "maybe param" "maybe type" "temp"
        (662184 'move' call_tmp[662181](135923 call ranges[135906] i[135935]))
        unknown call_tmp[662188] "expr temp" "maybe param" "maybe type" "temp"
        (662191 'move' call_tmp[662188](135924 call stridable _mt[243] call_tmp[662181]))
        unknown call_tmp[662193] "expr temp" "maybe param" "maybe type" "temp"
        (662196 'move' call_tmp[662193](135930 call _cond_test call_tmp[662188]))
        if call_tmp[662193]
        {
          (518703 'move' ret[518698](518702 'deref' 1))
          gotoReturn _end_chpl__anyStridable[518696] _end_chpl__anyStridable[518696]
        }
      }
      label _unused_continueLabel[135940]
      label _breakLabel[135939]
    }
    (518708 'move' ret[518698](518707 'deref' 0))
    label _end_chpl__anyStridable[518696]
    (518700 return ret[518698])
  }
  function chpl__anyRankChangeStridable[135985](arg args[135983]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518712] "RVV" "param" "temp"
    {
      unknown i[136024] "dead at end of block" "insert auto destroy"
      (543140 'init var' i[136024] 0)
      (480558 'end of statement')
      unknown tmp[136025] "maybe param" "temp"
      unknown call_tmp[662200] "expr temp" "maybe param" "maybe type" "temp"
      (662203 'move' call_tmp[662200](135989 call size _mt[243] args[135983]))
      unknown call_tmp[662205] "expr temp" "maybe param" "maybe type" "temp"
      (662208 'move' call_tmp[662205](135993 call - call_tmp[662200] 1))
      (136037 'move' tmp[136025](136035 call chpl_compute_low_param_loop_bound 0 call_tmp[662205]))
      unknown tmp[136026] "maybe param" "temp"
      unknown call_tmp[662212] "expr temp" "maybe param" "maybe type" "temp"
      (662215 'move' call_tmp[662212](136044 call size _mt[243] args[135983]))
      unknown call_tmp[662217] "expr temp" "maybe param" "maybe type" "temp"
      (662220 'move' call_tmp[662217](136042 call - call_tmp[662212] 1))
      (136050 'move' tmp[136026](136048 call chpl_compute_high_param_loop_bound 0 call_tmp[662217]))
      unknown tmp[136027] "maybe param" "temp"
      (136053 'move' tmp[136027] 1)
      ParamForLoop[136055]
      { i[136024] tmp[136025] tmp[136026] tmp[136027]
        unknown call_tmp[662222] "expr temp" "maybe param" "maybe type" "temp"
        (662225 'move' call_tmp[662222](136001 call args[135983] i[136024]))
        unknown call_tmp[662227] "expr temp" "maybe param" "maybe type" "temp"
        (662230 'move' call_tmp[662227](136003 call isRangeValue call_tmp[662222]))
        unknown call_tmp[662232] "expr temp" "maybe param" "maybe type" "temp"
        (662235 'move' call_tmp[662232](136019 call _cond_test call_tmp[662227]))
        if call_tmp[662232]
        {
          unknown call_tmp[662237] "expr temp" "maybe param" "maybe type" "temp"
          (662240 'move' call_tmp[662237](136007 call args[135983] i[136024]))
          unknown call_tmp[662244] "expr temp" "maybe param" "maybe type" "temp"
          (662247 'move' call_tmp[662244](136008 call stridable _mt[243] call_tmp[662237]))
          unknown call_tmp[662249] "expr temp" "maybe param" "maybe type" "temp"
          (662252 'move' call_tmp[662249](136014 call _cond_test call_tmp[662244]))
          if call_tmp[662249]
          {
            (518717 'move' ret[518712](518716 'deref' 1))
            gotoReturn _end_chpl__anyRankChangeStridable[518710] _end_chpl__anyRankChangeStridable[518710]
          }
        }
      }
      label _unused_continueLabel[136029]
      label _breakLabel[136028]
    }
    (518722 'move' ret[518712](518721 'deref' 0))
    label _end_chpl__anyRankChangeStridable[518710]
    (518714 return ret[518712])
  }
  function chpl__countRanges[136074](arg arg[136072]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518726] "RVV" "param" "temp"
    unknown call_tmp[662254] "expr temp" "maybe param" "maybe type" "temp"
    (662257 'move' call_tmp[662254](136079 call isRangeValue arg[136072]))
    unknown call_tmp[662259] "expr temp" "maybe param" "maybe type" "temp"
    (662262 'move' call_tmp[662259](136081 call _cast int(64)[13] call_tmp[662254]))
    (518731 'move' ret[518726](518730 'deref' call_tmp[662259]))
    (518728 return ret[518726])
  }
  function chpl__countRanges[136092](arg arg[136090]:_any[178](?), arg args[136095]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[518735] "RVV" "param" "temp"
    unknown call_tmp[662264] "expr temp" "maybe param" "maybe type" "temp"
    (662267 'move' call_tmp[662264](136101 call chpl__countRanges arg[136090]))
    unknown call_tmp[662269] "expr temp" "maybe param" "maybe type" "temp"
    (662272 'move' call_tmp[662269](136106 call chpl__countRanges(136104 'expand_tuple' args[136095])))
    unknown call_tmp[662274] "expr temp" "maybe param" "maybe type" "temp"
    (662277 'move' call_tmp[662274](136107 call + call_tmp[662264] call_tmp[662269]))
    (518740 'move' ret[518735](518739 'deref' call_tmp[662274]))
    (518737 return ret[518735])
  }
  function _validRankChangeArgs[136118](arg args[136116]:_any[178](?), arg idxType[136120]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518813] "RVV" "param" "temp"
    function _validRankChangeArg[136126](arg idxType[136124]:_any[178](?), arg r[136132]:range[64319](?)) param : _unknown[51]
    {
      unknown ret[518744] "RVV" "param" "temp"
      (518749 'move' ret[518744](518748 'deref' 1))
      (518746 return ret[518744])
    }
    function _validRankChangeArg[136146](arg idxType[136144]:_any[178](?), arg i[136149] :
    idxType[136144]) param : _unknown[51]
    {
      unknown ret[518753] "RVV" "param" "temp"
      (518758 'move' ret[518753](518757 'deref' 1))
      (518755 return ret[518753])
    }
    function _validRankChangeArg[136162](arg idxType[136160]:_any[178](?), arg x[136164]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518762] "RVV" "param" "temp"
      (518767 'move' ret[518762](518766 'deref' 0))
      (518764 return ret[518762])
    }
    function allValid[136174]() param : _unknown[51]
    {
      unknown ret[518771] "RVV" "param" "temp"
      {
        unknown dim[136205] "dead at end of block" "insert auto destroy"
        (543142 'init var' dim[136205] 0)
        (480566 'end of statement')
        unknown tmp[136206] "maybe param" "temp"
        unknown call_tmp[662281] "expr temp" "maybe param" "maybe type" "temp"
        (662284 'move' call_tmp[662281](136178 call size _mt[243] args[136116]))
        unknown call_tmp[662286] "expr temp" "maybe param" "maybe type" "temp"
        (662289 'move' call_tmp[662286](136182 call - call_tmp[662281] 1))
        (136218 'move' tmp[136206](136216 call chpl_compute_low_param_loop_bound 0 call_tmp[662286]))
        unknown tmp[136207] "maybe param" "temp"
        unknown call_tmp[662293] "expr temp" "maybe param" "maybe type" "temp"
        (662296 'move' call_tmp[662293](136225 call size _mt[243] args[136116]))
        unknown call_tmp[662298] "expr temp" "maybe param" "maybe type" "temp"
        (662301 'move' call_tmp[662298](136223 call - call_tmp[662293] 1))
        (136231 'move' tmp[136207](136229 call chpl_compute_high_param_loop_bound 0 call_tmp[662298]))
        unknown tmp[136208] "maybe param" "temp"
        (136234 'move' tmp[136208] 1)
        ParamForLoop[136236]
        { dim[136205] tmp[136206] tmp[136207] tmp[136208]
          {
            unknown call_tmp[662303] "expr temp" "maybe param" "maybe type" "temp"
            (662306 'move' call_tmp[662303](136192 call args[136116] dim[136205]))
            unknown call_tmp[662308] "expr temp" "maybe param" "maybe type" "temp"
            (662311 'move' call_tmp[662308](136193 call _validRankChangeArg idxType[136120] call_tmp[662303]))
            unknown call_tmp[662313] "expr temp" "maybe param" "maybe type" "temp"
            (662316 'move' call_tmp[662313](136194 call ! call_tmp[662308]))
            unknown call_tmp[662318] "expr temp" "maybe param" "maybe type" "temp"
            (662321 'move' call_tmp[662318](136199 call _cond_test call_tmp[662313]))
            if call_tmp[662318]
            {
              (518776 'move' ret[518771](518775 'deref' 0))
              gotoReturn _end_allValid[518769] _end_allValid[518769]
            }
          }
        }
        label _unused_continueLabel[136210]
        label _breakLabel[136209]
      }
      (518781 'move' ret[518771](518780 'deref' 1))
      label _end_allValid[518769]
      (518773 return ret[518771])
    }
    function oneRange[136253]() param : _unknown[51]
    {
      unknown ret[518785] "RVV" "param" "temp"
      {
        unknown dim[136281] "dead at end of block" "insert auto destroy"
        (543144 'init var' dim[136281] 0)
        (480569 'end of statement')
        unknown tmp[136282] "maybe param" "temp"
        unknown call_tmp[662325] "expr temp" "maybe param" "maybe type" "temp"
        (662328 'move' call_tmp[662325](136257 call size _mt[243] args[136116]))
        unknown call_tmp[662330] "expr temp" "maybe param" "maybe type" "temp"
        (662333 'move' call_tmp[662330](136261 call - call_tmp[662325] 1))
        (136294 'move' tmp[136282](136292 call chpl_compute_low_param_loop_bound 0 call_tmp[662330]))
        unknown tmp[136283] "maybe param" "temp"
        unknown call_tmp[662337] "expr temp" "maybe param" "maybe type" "temp"
        (662340 'move' call_tmp[662337](136301 call size _mt[243] args[136116]))
        unknown call_tmp[662342] "expr temp" "maybe param" "maybe type" "temp"
        (662345 'move' call_tmp[662342](136299 call - call_tmp[662337] 1))
        (136307 'move' tmp[136283](136305 call chpl_compute_high_param_loop_bound 0 call_tmp[662342]))
        unknown tmp[136284] "maybe param" "temp"
        (136310 'move' tmp[136284] 1)
        ParamForLoop[136312]
        { dim[136281] tmp[136282] tmp[136283] tmp[136284]
          {
            unknown call_tmp[662347] "expr temp" "maybe param" "maybe type" "temp"
            (662350 'move' call_tmp[662347](136269 call args[136116] dim[136281]))
            unknown call_tmp[662352] "expr temp" "maybe param" "maybe type" "temp"
            (662355 'move' call_tmp[662352](136271 call isRange call_tmp[662347]))
            unknown call_tmp[662357] "expr temp" "maybe param" "maybe type" "temp"
            (662360 'move' call_tmp[662357](136275 call _cond_test call_tmp[662352]))
            if call_tmp[662357]
            {
              (518790 'move' ret[518785](518789 'deref' 1))
              gotoReturn _end_oneRange[518783] _end_oneRange[518783]
            }
          }
        }
        label _unused_continueLabel[136286]
        label _breakLabel[136285]
      }
      (518795 'move' ret[518785](518794 'deref' 0))
      label _end_oneRange[518783]
      (518787 return ret[518785])
    }
    function oneNonRange[136329]() param : _unknown[51]
    {
      unknown ret[518799] "RVV" "param" "temp"
      {
        unknown dim[136359] "dead at end of block" "insert auto destroy"
        (543146 'init var' dim[136359] 0)
        (480572 'end of statement')
        unknown tmp[136360] "maybe param" "temp"
        unknown call_tmp[662364] "expr temp" "maybe param" "maybe type" "temp"
        (662367 'move' call_tmp[662364](136333 call size _mt[243] args[136116]))
        unknown call_tmp[662369] "expr temp" "maybe param" "maybe type" "temp"
        (662372 'move' call_tmp[662369](136337 call - call_tmp[662364] 1))
        (136372 'move' tmp[136360](136370 call chpl_compute_low_param_loop_bound 0 call_tmp[662369]))
        unknown tmp[136361] "maybe param" "temp"
        unknown call_tmp[662376] "expr temp" "maybe param" "maybe type" "temp"
        (662379 'move' call_tmp[662376](136379 call size _mt[243] args[136116]))
        unknown call_tmp[662381] "expr temp" "maybe param" "maybe type" "temp"
        (662384 'move' call_tmp[662381](136377 call - call_tmp[662376] 1))
        (136385 'move' tmp[136361](136383 call chpl_compute_high_param_loop_bound 0 call_tmp[662381]))
        unknown tmp[136362] "maybe param" "temp"
        (136388 'move' tmp[136362] 1)
        ParamForLoop[136390]
        { dim[136359] tmp[136360] tmp[136361] tmp[136362]
          {
            unknown call_tmp[662386] "expr temp" "maybe param" "maybe type" "temp"
            (662389 'move' call_tmp[662386](136345 call args[136116] dim[136359]))
            unknown call_tmp[662391] "expr temp" "maybe param" "maybe type" "temp"
            (662394 'move' call_tmp[662391](136347 call isRange call_tmp[662386]))
            unknown call_tmp[662396] "expr temp" "maybe param" "maybe type" "temp"
            (662399 'move' call_tmp[662396](136348 call ! call_tmp[662391]))
            unknown call_tmp[662401] "expr temp" "maybe param" "maybe type" "temp"
            (662404 'move' call_tmp[662401](136353 call _cond_test call_tmp[662396]))
            if call_tmp[662401]
            {
              (518804 'move' ret[518799](518803 'deref' 1))
              gotoReturn _end_oneNonRange[518797] _end_oneNonRange[518797]
            }
          }
        }
        label _unused_continueLabel[136364]
        label _breakLabel[136363]
      }
      (518809 'move' ret[518799](518808 'deref' 0))
      label _end_oneNonRange[518797]
      (518801 return ret[518799])
    }
    unknown tmp[426145] "maybe param" "temp"
    unknown tmp[426166] "maybe param" "temp"
    (426177 'move' tmp[426166](136407 call allValid))
    unknown call_tmp[662406] "expr temp" "maybe param" "maybe type" "temp"
    (662409 'move' call_tmp[662406](426179 call _cond_invalid tmp[426166]))
    if call_tmp[662406]
    {
      (426182 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567125] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567126] "maybe param" "temp"
    unknown call_tmp[662411] "expr temp" "maybe param" "maybe type" "temp"
    (662414 'move' call_tmp[662411](426167 call isTrue tmp[426166]))
    (567131 'move' tmp[567126](567129 call _cond_test call_tmp[662411]))
    if tmp[567126]
    {
      unknown tmp[567133] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662416] "expr temp" "maybe param" "maybe type" "temp"
      (662419 'move' call_tmp[662416](136410 call oneRange))
      (567135 'move' tmp[567133](426170 call isTrue call_tmp[662416]))
      (567140 'move' tmp[567125](567137 '_paramFoldLogical' tmp[567126] tmp[567133]))
    }
    {
      (567145 'move' tmp[567125](567142 '_paramFoldLogical' tmp[567126] 0))
    }
    (426156 'move' tmp[426145] tmp[567125])
    unknown call_tmp[662421] "expr temp" "maybe param" "maybe type" "temp"
    (662424 'move' call_tmp[662421](426158 call _cond_invalid tmp[426145]))
    if call_tmp[662421]
    {
      (426161 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567152] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567153] "maybe param" "temp"
    unknown call_tmp[662426] "expr temp" "maybe param" "maybe type" "temp"
    (662429 'move' call_tmp[662426](426146 call isTrue tmp[426145]))
    (567158 'move' tmp[567153](567156 call _cond_test call_tmp[662426]))
    if tmp[567153]
    {
      unknown tmp[567160] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662431] "expr temp" "maybe param" "maybe type" "temp"
      (662434 'move' call_tmp[662431](136415 call oneNonRange))
      (567162 'move' tmp[567160](426149 call isTrue call_tmp[662431]))
      (567167 'move' tmp[567152](567164 '_paramFoldLogical' tmp[567153] tmp[567160]))
    }
    {
      (567172 'move' tmp[567152](567169 '_paramFoldLogical' tmp[567153] 0))
    }
    (518818 'move' ret[518813](518817 'deref' tmp[567152]))
    (518815 return ret[518813])
  }
  function =[136428](ref arg a[136425]:_distribution[118973](?), arg b[136431]:_distribution[118973](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662438] "expr temp" "maybe param" "maybe type" "temp"
    (662441 'move' call_tmp[662438](136435 call _value _mt[243] a[136425]))
    unknown call_tmp[662443] "expr temp" "maybe param" "maybe type" "temp"
    (662446 'move' call_tmp[662443](136439 call == call_tmp[662438] nil[44]))
    unknown call_tmp[662448] "expr temp" "maybe param" "maybe type" "temp"
    (662451 'move' call_tmp[662448](136588 call _cond_test call_tmp[662443]))
    if call_tmp[662448]
    {
      unknown call_tmp[662455] "expr temp" "maybe param" "maybe type" "temp"
      (662458 'move' call_tmp[662455](136450 call(136446 call (partial) clone _mt[243] b[136431])))
      (136453 'move' a[136425](136452 call chpl__autoCopy call_tmp[662455]))
    }
    {
      unknown call_tmp[662462] "expr temp" "maybe param" "maybe type" "temp"
      (662465 'move' call_tmp[662462](136457 call _value _mt[243] a[136425]))
      unknown call_tmp[662469] "expr temp" "maybe param" "maybe type" "temp"
      (662472 'move' call_tmp[662469](136462 call _doms _mt[243] call_tmp[662462]))
      unknown call_tmp[662476] "expr temp" "maybe param" "maybe type" "temp"
      (662479 'move' call_tmp[662476](136465 call size _mt[243] call_tmp[662469]))
      unknown call_tmp[662481] "expr temp" "maybe param" "maybe type" "temp"
      (662484 'move' call_tmp[662481](136469 call == call_tmp[662476] 0))
      unknown call_tmp[662486] "expr temp" "maybe param" "maybe type" "temp"
      (662489 'move' call_tmp[662486](136584 call _cond_test call_tmp[662481]))
      if call_tmp[662486]
      {
        { scopeless type
          unknown call_type_tmp[492307] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662493] "expr temp" "maybe param" "maybe type" "temp"
          (662496 'move' call_tmp[662493](136472 call _value _mt[243] a[136425]))
          (492311 'move' call_type_tmp[492307](136475 'typeof' call_tmp[662493]))
        }
        { scopeless type
          unknown call_type_tmp[492313] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662500] "expr temp" "maybe param" "maybe type" "temp"
          (662503 'move' call_tmp[662500](136477 call _value _mt[243] b[136431]))
          (492317 'move' call_type_tmp[492313](136480 'typeof' call_tmp[662500]))
        }
        unknown call_tmp[662505] "expr temp" "maybe param" "maybe type" "temp"
        (662508 'move' call_tmp[662505](136481 call != call_type_tmp[492307] call_type_tmp[492313]))
        unknown call_tmp[662510] "expr temp" "maybe param" "maybe type" "temp"
        (662513 'move' call_tmp[662510](136504 call _cond_test call_tmp[662505]))
        if call_tmp[662510]
        {
          (136502 call compilerError "type mismatch in distribution assignment")
        }
        unknown call_tmp[662517] "expr temp" "maybe param" "maybe type" "temp"
        (662520 'move' call_tmp[662517](136511 call _value _mt[243] a[136425]))
        unknown call_tmp[662524] "expr temp" "maybe param" "maybe type" "temp"
        (662527 'move' call_tmp[662524](136515 call _value _mt[243] b[136431]))
        unknown call_tmp[662529] "expr temp" "maybe param" "maybe type" "temp"
        (662532 'move' call_tmp[662529](136518 call == call_tmp[662517] call_tmp[662524]))
        unknown call_tmp[662534] "expr temp" "maybe param" "maybe type" "temp"
        (662537 'move' call_tmp[662534](136537 call _cond_test call_tmp[662529]))
        if call_tmp[662534]
        {
        }
        {
          unknown call_tmp[662541] "expr temp" "maybe param" "maybe type" "temp"
          (662544 'move' call_tmp[662541](136522 call _value _mt[243] a[136425]))
          unknown call_tmp[662550] "expr temp" "maybe param" "maybe type" "temp"
          (662553 'move' call_tmp[662550](136531 call _value _mt[243] b[136431]))
          (136535 call(136527 call (partial) dsiAssign _mt[243] call_tmp[662541]) call_tmp[662550])
        }
        unknown call_tmp[662557] "expr temp" "maybe param" "maybe type" "temp"
        (662560 'move' call_tmp[662557](136544 call _instance _mt[243] a[136425]))
        unknown call_tmp[662562] "expr temp" "maybe param" "maybe type" "temp"
        (662565 'move' call_tmp[662562](136548 call _isPrivatized call_tmp[662557]))
        unknown call_tmp[662567] "expr temp" "maybe param" "maybe type" "temp"
        (662570 'move' call_tmp[662567](136557 call _cond_test call_tmp[662562]))
        if call_tmp[662567]
        {
          unknown call_tmp[662574] "expr temp" "maybe param" "maybe type" "temp"
          (662577 'move' call_tmp[662574](136551 call _value _mt[243] a[136425]))
          (136555 call _reprivatize call_tmp[662574])
        }
      }
      {
        (136581 call halt "assignment to distributions with declared domains is not yet supported")
      }
    }
    (518820 return _void[55])
  }
  function =[136602](ref arg a[136599]:_domain[125908](?), arg b[136605]:_domain[125908](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662581] "expr temp" "maybe param" "maybe type" "temp"
    (662584 'move' call_tmp[662581](136609 call rank _mt[243] a[136599]))
    unknown call_tmp[662588] "expr temp" "maybe param" "maybe type" "temp"
    (662591 'move' call_tmp[662588](136613 call rank _mt[243] b[136605]))
    unknown call_tmp[662593] "expr temp" "maybe param" "maybe type" "temp"
    (662596 'move' call_tmp[662593](136616 call != call_tmp[662581] call_tmp[662588]))
    unknown call_tmp[662598] "expr temp" "maybe param" "maybe type" "temp"
    (662601 'move' call_tmp[662598](136639 call _cond_test call_tmp[662593]))
    if call_tmp[662598]
    {
      (136637 call compilerError "rank mismatch in domain assignment")
    }
    unknown call_tmp[662605] "expr temp" "maybe param" "maybe type" "temp"
    (662608 'move' call_tmp[662605](136646 call idxType _mt[243] a[136599]))
    unknown call_tmp[662612] "expr temp" "maybe param" "maybe type" "temp"
    (662615 'move' call_tmp[662612](136650 call idxType _mt[243] b[136605]))
    unknown call_tmp[662617] "expr temp" "maybe param" "maybe type" "temp"
    (662620 'move' call_tmp[662617](136653 call != call_tmp[662605] call_tmp[662612]))
    unknown call_tmp[662622] "expr temp" "maybe param" "maybe type" "temp"
    (662625 'move' call_tmp[662622](136676 call _cond_test call_tmp[662617]))
    if call_tmp[662622]
    {
      (136674 call compilerError "index type mismatch in domain assignment")
    }
    unknown tmp[426208] "maybe param" "temp"
    (426219 'move' tmp[426208](136684 call isRectangularDom a[136599]))
    unknown call_tmp[662627] "expr temp" "maybe param" "maybe type" "temp"
    (662630 'move' call_tmp[662627](426221 call _cond_invalid tmp[426208]))
    if call_tmp[662627]
    {
      (426224 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567179] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567180] "maybe param" "temp"
    unknown call_tmp[662632] "expr temp" "maybe param" "maybe type" "temp"
    (662635 'move' call_tmp[662632](426209 call isTrue tmp[426208]))
    (567185 'move' tmp[567180](567183 call _cond_test call_tmp[662632]))
    if tmp[567180]
    {
      unknown tmp[567187] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662637] "expr temp" "maybe param" "maybe type" "temp"
      (662640 'move' call_tmp[662637](136688 call isRectangularDom b[136605]))
      (567189 'move' tmp[567187](426212 call isTrue call_tmp[662637]))
      (567194 'move' tmp[567179](567191 '_paramFoldLogical' tmp[567180] tmp[567187]))
    }
    {
      (567199 'move' tmp[567179](567196 '_paramFoldLogical' tmp[567180] 0))
    }
    unknown call_tmp[662642] "expr temp" "maybe param" "maybe type" "temp"
    (662645 'move' call_tmp[662642](136731 call _cond_test tmp[567179]))
    if call_tmp[662642]
    {
      unknown tmp[426187] "maybe param" "temp"
      unknown call_tmp[662649] "expr temp" "maybe param" "maybe type" "temp"
      (662652 'move' call_tmp[662649](136692 call stridable _mt[243] a[136599]))
      (426198 'move' tmp[426187](136695 call ! call_tmp[662649]))
      unknown call_tmp[662654] "expr temp" "maybe param" "maybe type" "temp"
      (662657 'move' call_tmp[662654](426200 call _cond_invalid tmp[426187]))
      if call_tmp[662654]
      {
        (426203 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567206] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567207] "maybe param" "temp"
      unknown call_tmp[662659] "expr temp" "maybe param" "maybe type" "temp"
      (662662 'move' call_tmp[662659](426188 call isTrue tmp[426187]))
      (567212 'move' tmp[567207](567210 call _cond_test call_tmp[662659]))
      if tmp[567207]
      {
        unknown tmp[567214] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[662666] "expr temp" "maybe param" "maybe type" "temp"
        (662669 'move' call_tmp[662666](136698 call stridable _mt[243] b[136605]))
        (567216 'move' tmp[567214](426191 call isTrue call_tmp[662666]))
        (567221 'move' tmp[567206](567218 '_paramFoldLogical' tmp[567207] tmp[567214]))
      }
      {
        (567226 'move' tmp[567206](567223 '_paramFoldLogical' tmp[567207] 0))
      }
      unknown call_tmp[662671] "expr temp" "maybe param" "maybe type" "temp"
      (662674 'move' call_tmp[662671](136726 call _cond_test tmp[567206]))
      if call_tmp[662671]
      {
        (136724 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
      }
    }
    unknown call_tmp[662678] "expr temp" "maybe param" "maybe type" "temp"
    (662681 'move' call_tmp[662678](136737 call _instance _mt[243] a[136599]))
    (136747 call(136740 call (partial) dsiAssignDomain _mt[243] call_tmp[662678]) b[136605](lhsPrivate = 0))
    (480588 'end of statement')
    unknown call_tmp[662687] "expr temp" "maybe param" "maybe type" "temp"
    (662690 'move' call_tmp[662687](136751 call _instance _mt[243] a[136599]))
    unknown call_tmp[662692] "expr temp" "maybe param" "maybe type" "temp"
    (662695 'move' call_tmp[662692](136755 call _isPrivatized call_tmp[662687]))
    unknown call_tmp[662697] "expr temp" "maybe param" "maybe type" "temp"
    (662700 'move' call_tmp[662697](136765 call _cond_test call_tmp[662692]))
    if call_tmp[662697]
    {
      unknown call_tmp[662704] "expr temp" "maybe param" "maybe type" "temp"
      (662707 'move' call_tmp[662704](136758 call _instance _mt[243] a[136599]))
      (136762 call _reprivatize call_tmp[662704])
    }
    (518822 return _void[55])
  }
  function chpl__isLegalRectTupDomAssign[136775](arg d[136773]:_any[178](?), arg t[136777]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518862] "RVV" "param" "temp"
    function isRangeTuple[136783](arg a[136781]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518844] "RVV" "param" "temp"
      function peelArgs[136789](arg first[136787]:_any[178](?), arg rest[136792]:_any[178](?) ...) param : _unknown[51]
      {
        unknown ret[518826] "RVV" "param" "temp"
        unknown tmp[567287] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567288] "maybe param" "temp"
        unknown call_tmp[662711] "expr temp" "maybe param" "maybe type" "temp"
        (662714 'move' call_tmp[662711](136796 call size _mt[243] rest[136792]))
        unknown call_tmp[662716] "expr temp" "maybe param" "maybe type" "temp"
        (662719 'move' call_tmp[662716](136800 call > call_tmp[662711] 1))
        (567293 'move' tmp[567288](567291 call _cond_test call_tmp[662716]))
        if tmp[567288]
        {
          unknown tmp[426229] "maybe param" "temp"
          (426240 'move' tmp[426229](136805 call isRange first[136787]))
          unknown call_tmp[662721] "expr temp" "maybe param" "maybe type" "temp"
          (662724 'move' call_tmp[662721](426242 call _cond_invalid tmp[426229]))
          if call_tmp[662721]
          {
            (426245 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567233] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567234] "maybe param" "temp"
          unknown call_tmp[662726] "expr temp" "maybe param" "maybe type" "temp"
          (662729 'move' call_tmp[662726](426230 call isTrue tmp[426229]))
          (567239 'move' tmp[567234](567237 call _cond_test call_tmp[662726]))
          if tmp[567234]
          {
            unknown tmp[567241] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662731] "expr temp" "maybe param" "maybe type" "temp"
            (662734 'move' call_tmp[662731](136810 call peelArgs(136808 'expand_tuple' rest[136792])))
            (567243 'move' tmp[567241](426233 call isTrue call_tmp[662731]))
            (567248 'move' tmp[567233](567245 '_paramFoldLogical' tmp[567234] tmp[567241]))
          }
          {
            (567253 'move' tmp[567233](567250 '_paramFoldLogical' tmp[567234] 0))
          }
          (567298 'move' tmp[567287](567295 '_paramFoldLogical' tmp[567288] tmp[567233]))
        }
        {
          unknown tmp[426250] "maybe param" "temp"
          (426261 'move' tmp[426250](136816 call isRange first[136787]))
          unknown call_tmp[662736] "expr temp" "maybe param" "maybe type" "temp"
          (662739 'move' call_tmp[662736](426263 call _cond_invalid tmp[426250]))
          if call_tmp[662736]
          {
            (426266 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567260] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567261] "maybe param" "temp"
          unknown call_tmp[662741] "expr temp" "maybe param" "maybe type" "temp"
          (662744 'move' call_tmp[662741](426251 call isTrue tmp[426250]))
          (567266 'move' tmp[567261](567264 call _cond_test call_tmp[662741]))
          if tmp[567261]
          {
            unknown tmp[567268] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662746] "expr temp" "maybe param" "maybe type" "temp"
            (662749 'move' call_tmp[662746](136821 call rest[136792] 0))
            unknown call_tmp[662751] "expr temp" "maybe param" "maybe type" "temp"
            (662754 'move' call_tmp[662751](136823 call isRange call_tmp[662746]))
            (567270 'move' tmp[567268](426254 call isTrue call_tmp[662751]))
            (567275 'move' tmp[567260](567272 '_paramFoldLogical' tmp[567261] tmp[567268]))
          }
          {
            (567280 'move' tmp[567260](567277 '_paramFoldLogical' tmp[567261] 0))
          }
          (567303 'move' tmp[567287](567300 '_paramFoldLogical' tmp[567288] tmp[567260]))
        }
        (518831 'move' ret[518826](518830 'deref' tmp[567287]))
        (518828 return ret[518826])
      }
      function peelArgs[136839](arg first[136837]:_any[178](?)) param : _unknown[51]
      {
        unknown ret[518835] "RVV" "param" "temp"
        unknown call_tmp[662756] "expr temp" "maybe param" "maybe type" "temp"
        (662759 'move' call_tmp[662756](136844 call isRange first[136837]))
        (518840 'move' ret[518835](518839 'deref' call_tmp[662756]))
        (518837 return ret[518835])
      }
      unknown tmp[567310] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567311] "maybe param" "temp"
      unknown call_tmp[662761] "expr temp" "maybe param" "maybe type" "temp"
      (662764 'move' call_tmp[662761](136853 call isTuple a[136781]))
      unknown call_tmp[662766] "expr temp" "maybe param" "maybe type" "temp"
      (662769 'move' call_tmp[662766](136854 call ! call_tmp[662761]))
      (567316 'move' tmp[567311](567314 call _cond_test call_tmp[662766]))
      if tmp[567311]
      {
        (567321 'move' tmp[567310](567318 '_paramFoldLogical' tmp[567311] 0))
      }
      {
        unknown tmp[567323] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (567325 'move' tmp[567323](136861 call peelArgs(136859 'expand_tuple' a[136781])))
        (567330 'move' tmp[567310](567327 '_paramFoldLogical' tmp[567311] tmp[567323]))
      }
      (518849 'move' ret[518844](518848 'deref' tmp[567310]))
      (518846 return ret[518844])
    }
    function strideSafe[136874](arg d[136872]:_any[178](?), arg rt[136876]:_any[178](?), param arg dim[136880]:int(64)[13] =
    0) param : _unknown[51]
    {
      unknown ret[518853] "RVV" "param" "temp"
      unknown tmp[567418] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567419] "maybe param" "temp"
      unknown call_tmp[662773] "expr temp" "maybe param" "maybe type" "temp"
      (662776 'move' call_tmp[662773](136886 call rank _mt[243] d[136872]))
      unknown call_tmp[662778] "expr temp" "maybe param" "maybe type" "temp"
      (662781 'move' call_tmp[662778](136890 call - call_tmp[662773] 1))
      unknown call_tmp[662783] "expr temp" "maybe param" "maybe type" "temp"
      (662786 'move' call_tmp[662783](136892 call == dim[136880] call_tmp[662778]))
      (567424 'move' tmp[567419](567422 call _cond_test call_tmp[662783]))
      if tmp[567419]
      {
        unknown tmp[426271] "maybe param" "temp"
        unknown call_tmp[662790] "expr temp" "maybe param" "maybe type" "temp"
        (662793 'move' call_tmp[662790](136900 call(136895 call (partial) dim _mt[243] d[136872]) dim[136880]))
        (426282 'move' tmp[426271](136901 call stridable _mt[243] call_tmp[662790]))
        unknown call_tmp[662797] "expr temp" "maybe param" "maybe type" "temp"
        (662800 'move' call_tmp[662797](426284 call _cond_invalid tmp[426271]))
        if call_tmp[662797]
        {
          (426287 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567337] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567338] "maybe param" "temp"
        unknown call_tmp[662802] "expr temp" "maybe param" "maybe type" "temp"
        (662805 'move' call_tmp[662802](426272 call isTrue tmp[426271]))
        (567343 'move' tmp[567338](567341 call _cond_test call_tmp[662802]))
        if tmp[567338]
        {
          (567348 'move' tmp[567337](567345 '_paramFoldLogical' tmp[567338] 1))
        }
        {
          unknown tmp[567350] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662807] "expr temp" "maybe param" "maybe type" "temp"
          (662810 'move' call_tmp[662807](136907 call rt[136876] dim[136880]))
          unknown call_tmp[662814] "expr temp" "maybe param" "maybe type" "temp"
          (662817 'move' call_tmp[662814](136908 call stridable _mt[243] call_tmp[662807]))
          unknown call_tmp[662819] "expr temp" "maybe param" "maybe type" "temp"
          (662822 'move' call_tmp[662819](136911 call ! call_tmp[662814]))
          (567352 'move' tmp[567350](426276 call isTrue call_tmp[662819]))
          (567357 'move' tmp[567337](567354 '_paramFoldLogical' tmp[567338] tmp[567350]))
        }
        (567429 'move' tmp[567418](567426 '_paramFoldLogical' tmp[567419] tmp[567337]))
      }
      {
        unknown tmp[426292] "maybe param" "temp"
        unknown tmp[426313] "maybe param" "temp"
        unknown call_tmp[662826] "expr temp" "maybe param" "maybe type" "temp"
        (662829 'move' call_tmp[662826](136921 call(136916 call (partial) dim _mt[243] d[136872]) dim[136880]))
        (426324 'move' tmp[426313](136922 call stridable _mt[243] call_tmp[662826]))
        unknown call_tmp[662833] "expr temp" "maybe param" "maybe type" "temp"
        (662836 'move' call_tmp[662833](426326 call _cond_invalid tmp[426313]))
        if call_tmp[662833]
        {
          (426329 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567364] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567365] "maybe param" "temp"
        unknown call_tmp[662838] "expr temp" "maybe param" "maybe type" "temp"
        (662841 'move' call_tmp[662838](426314 call isTrue tmp[426313]))
        (567370 'move' tmp[567365](567368 call _cond_test call_tmp[662838]))
        if tmp[567365]
        {
          (567375 'move' tmp[567364](567372 '_paramFoldLogical' tmp[567365] 1))
        }
        {
          unknown tmp[567377] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662843] "expr temp" "maybe param" "maybe type" "temp"
          (662846 'move' call_tmp[662843](136928 call rt[136876] dim[136880]))
          unknown call_tmp[662850] "expr temp" "maybe param" "maybe type" "temp"
          (662853 'move' call_tmp[662850](136929 call stridable _mt[243] call_tmp[662843]))
          unknown call_tmp[662855] "expr temp" "maybe param" "maybe type" "temp"
          (662858 'move' call_tmp[662855](136932 call ! call_tmp[662850]))
          (567379 'move' tmp[567377](426318 call isTrue call_tmp[662855]))
          (567384 'move' tmp[567364](567381 '_paramFoldLogical' tmp[567365] tmp[567377]))
        }
        (426303 'move' tmp[426292] tmp[567364])
        unknown call_tmp[662860] "expr temp" "maybe param" "maybe type" "temp"
        (662863 'move' call_tmp[662860](426305 call _cond_invalid tmp[426292]))
        if call_tmp[662860]
        {
          (426308 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567391] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567392] "maybe param" "temp"
        unknown call_tmp[662865] "expr temp" "maybe param" "maybe type" "temp"
        (662868 'move' call_tmp[662865](426293 call isTrue tmp[426292]))
        (567397 'move' tmp[567392](567395 call _cond_test call_tmp[662865]))
        if tmp[567392]
        {
          unknown tmp[567399] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662870] "expr temp" "maybe param" "maybe type" "temp"
          (662873 'move' call_tmp[662870](136942 call + dim[136880] 1))
          unknown call_tmp[662875] "expr temp" "maybe param" "maybe type" "temp"
          (662878 'move' call_tmp[662875](136944 call strideSafe d[136872] rt[136876] call_tmp[662870]))
          (567401 'move' tmp[567399](426296 call isTrue call_tmp[662875]))
          (567406 'move' tmp[567391](567403 '_paramFoldLogical' tmp[567392] tmp[567399]))
        }
        {
          (567411 'move' tmp[567391](567408 '_paramFoldLogical' tmp[567392] 0))
        }
        (567434 'move' tmp[567418](567431 '_paramFoldLogical' tmp[567419] tmp[567391]))
      }
      (518858 'move' ret[518853](518857 'deref' tmp[567418]))
      (518855 return ret[518853])
    }
    unknown tmp[426334] "maybe param" "temp"
    unknown tmp[426355] "maybe param" "temp"
    (426366 'move' tmp[426355](136958 call isRangeTuple t[136777]))
    unknown call_tmp[662880] "expr temp" "maybe param" "maybe type" "temp"
    (662883 'move' call_tmp[662880](426368 call _cond_invalid tmp[426355]))
    if call_tmp[662880]
    {
      (426371 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567441] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567442] "maybe param" "temp"
    unknown call_tmp[662885] "expr temp" "maybe param" "maybe type" "temp"
    (662888 'move' call_tmp[662885](426356 call isTrue tmp[426355]))
    (567447 'move' tmp[567442](567445 call _cond_test call_tmp[662885]))
    if tmp[567442]
    {
      unknown tmp[567449] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662892] "expr temp" "maybe param" "maybe type" "temp"
      (662895 'move' call_tmp[662892](136960 call rank _mt[243] d[136773]))
      unknown call_tmp[662899] "expr temp" "maybe param" "maybe type" "temp"
      (662902 'move' call_tmp[662899](136964 call size _mt[243] t[136777]))
      unknown call_tmp[662904] "expr temp" "maybe param" "maybe type" "temp"
      (662907 'move' call_tmp[662904](136967 call == call_tmp[662892] call_tmp[662899]))
      (567451 'move' tmp[567449](426359 call isTrue call_tmp[662904]))
      (567456 'move' tmp[567441](567453 '_paramFoldLogical' tmp[567442] tmp[567449]))
    }
    {
      (567461 'move' tmp[567441](567458 '_paramFoldLogical' tmp[567442] 0))
    }
    (426345 'move' tmp[426334] tmp[567441])
    unknown call_tmp[662909] "expr temp" "maybe param" "maybe type" "temp"
    (662912 'move' call_tmp[662909](426347 call _cond_invalid tmp[426334]))
    if call_tmp[662909]
    {
      (426350 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567468] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567469] "maybe param" "temp"
    unknown call_tmp[662914] "expr temp" "maybe param" "maybe type" "temp"
    (662917 'move' call_tmp[662914](426335 call isTrue tmp[426334]))
    (567474 'move' tmp[567469](567472 call _cond_test call_tmp[662914]))
    if tmp[567469]
    {
      unknown tmp[567476] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662919] "expr temp" "maybe param" "maybe type" "temp"
      (662922 'move' call_tmp[662919](136975 call strideSafe d[136773] t[136777]))
      (567478 'move' tmp[567476](426338 call isTrue call_tmp[662919]))
      (567483 'move' tmp[567468](567480 '_paramFoldLogical' tmp[567469] tmp[567476]))
    }
    {
      (567488 'move' tmp[567468](567485 '_paramFoldLogical' tmp[567469] 0))
    }
    (518867 'move' ret[518862](518866 'deref' tmp[567468]))
    (518864 return ret[518862])
  }
  function =[136988](ref arg a[136985]:_domain[125908](?), arg b[136991]:_tuple[56202](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662924] "expr temp" "maybe param" "maybe type" "temp"
    (662927 'move' call_tmp[662924](136998 call chpl__isLegalRectTupDomAssign a[136985] b[136991]))
    unknown call_tmp[662929] "expr temp" "maybe param" "maybe type" "temp"
    (662932 'move' call_tmp[662929](137082 call _cond_test call_tmp[662924]))
    if call_tmp[662929]
    {
      unknown call_tmp[662934] "expr temp" "maybe param" "maybe type" "temp"
      (662937 'move' call_tmp[662934](137003 call chpl__buildDomainExpr(137001 'expand_tuple' b[136991])))
      (137005 call = a[136985] call_tmp[662934])
    }
    {
      (137014 call(137010 call (partial) clear _mt[243] a[136985]))
      (480598 'end of statement')
      {
        unknown _indexOfInterest[137039] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[137040] "expr temp" "temp"
        unknown call_tmp[662943] "expr temp" "maybe param" "maybe type" "temp"
        (662946 'move' call_tmp[662943](137055 call size _mt[243] b[136991]))
        unknown call_tmp[662948] "expr temp" "maybe param" "maybe type" "temp"
        (662951 'move' call_tmp[662948](137059 call chpl_direct_counted_range_iter 0 call_tmp[662943]))
        (137049 'move' _iterator[137040](137047 call _getIterator call_tmp[662948]))
        Defer
        {
          {
            (137075 call _freeIterator _iterator[137040])
          }
        }
        { scopeless type
          (137064 'move' _indexOfInterest[137039](137061 call iteratorIndex _iterator[137040]))
        }
        ForLoop[137041]
        {
          unknown ind[137068] "index var" "insert auto destroy"
          (480600 'end of statement')
          (137070 'move' ind[137068] _indexOfInterest[137039])
          (480601 'end of statement' ind[137068])
          {
            unknown call_tmp[662955] "expr temp" "maybe param" "maybe type" "temp"
            (662958 'move' call_tmp[662955](137034 call b[136991] ind[137068]))
            (137036 call(137028 call (partial) add _mt[243] a[136985]) call_tmp[662955])
            (480603 'end of statement' ind[137068])
          }
          label _continueLabel[137044]
          _indexOfInterest[137039]
          _iterator[137040]
        }
        label _breakLabel[137045]
      }
    }
    (518869 return _void[55])
  }
  function =[137095](ref arg d[137092]:_domain[125908](?), arg r[137101]:range[64319](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662960] "expr temp" "maybe param" "maybe type" "temp"
    (662963 'move' call_tmp[662960](137107 call chpl__buildDomainExpr r[137101]))
    (137109 call = d[137092] call_tmp[662960])
    (518871 return _void[55])
  }
  function =[137121](ref arg a[137118]:_domain[125908](?), arg b[137123]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662965] "expr temp" "maybe param" "maybe type" "temp"
    (662968 'move' call_tmp[662965](137128 call isRectangularDom a[137118]))
    unknown call_tmp[662970] "expr temp" "maybe param" "maybe type" "temp"
    (662973 'move' call_tmp[662970](137150 call _cond_test call_tmp[662965]))
    if call_tmp[662970]
    {
      (137148 call compilerError "Illegal assignment to a rectangular domain")
    }
    (137161 call(137157 call (partial) clear _mt[243] a[137118]))
    (480607 'end of statement')
    {
      unknown _indexOfInterest[137174] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137175] "expr temp" "temp"
      (137184 'move' _iterator[137175](137182 call _getIterator b[137123]))
      Defer
      {
        {
          (137200 call _freeIterator _iterator[137175])
        }
      }
      { scopeless type
        (137189 'move' _indexOfInterest[137174](137186 call iteratorIndex _iterator[137175]))
      }
      ForLoop[137176]
      {
        unknown ind[137193] "index var" "insert auto destroy"
        (480609 'end of statement')
        (137195 'move' ind[137193] _indexOfInterest[137174])
        (480610 'end of statement' ind[137193])
        {
          (137171 call(137166 call (partial) add _mt[243] a[137118]) ind[137193])
          (480612 'end of statement' ind[137193])
        }
        label _continueLabel[137179]
        _indexOfInterest[137174]
        _iterator[137175]
      }
      label _breakLabel[137180]
    }
    (518873 return _void[55])
  }
  function chpl__serializeAssignment[137217](arg a[137214]:_array[133594](?), arg b[137219]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518877] "RVV" "param" "temp"
    unknown tmp[426376] "maybe param" "temp"
    unknown call_tmp[662981] "expr temp" "maybe param" "maybe type" "temp"
    (662984 'move' call_tmp[662981](137222 call rank _mt[243] a[137214]))
    (426387 'move' tmp[426376](137226 call != call_tmp[662981] 1))
    unknown call_tmp[662986] "expr temp" "maybe param" "maybe type" "temp"
    (662989 'move' call_tmp[662986](426389 call _cond_invalid tmp[426376]))
    if call_tmp[662986]
    {
      (426392 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567495] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567496] "maybe param" "temp"
    unknown call_tmp[662991] "expr temp" "maybe param" "maybe type" "temp"
    (662994 'move' call_tmp[662991](426377 call isTrue tmp[426376]))
    (567501 'move' tmp[567496](567499 call _cond_test call_tmp[662991]))
    if tmp[567496]
    {
      unknown tmp[567503] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662996] "expr temp" "maybe param" "maybe type" "temp"
      (662999 'move' call_tmp[662996](137231 call isRange b[137219]))
      (567505 'move' tmp[567503](426380 call isTrue call_tmp[662996]))
      (567510 'move' tmp[567495](567507 '_paramFoldLogical' tmp[567496] tmp[567503]))
    }
    {
      (567515 'move' tmp[567495](567512 '_paramFoldLogical' tmp[567496] 0))
    }
    unknown call_tmp[663001] "expr temp" "maybe param" "maybe type" "temp"
    (663004 'move' call_tmp[663001](137237 call _cond_test tmp[567495]))
    if call_tmp[663001]
    {
      (518882 'move' ret[518877](518881 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518875] _end_chpl__serializeAssignment[518875]
    }
    unknown tmp[426397] "maybe param" "temp"
    unknown tmp[426418] "maybe param" "temp"
    unknown tmp[426439] "maybe param" "temp"
    unknown call_tmp[663006] "expr temp" "maybe param" "maybe type" "temp"
    (663009 'move' call_tmp[663006](137246 call isRectangularArr a[137214]))
    (426450 'move' tmp[426439](137247 call ! call_tmp[663006]))
    unknown call_tmp[663011] "expr temp" "maybe param" "maybe type" "temp"
    (663014 'move' call_tmp[663011](426452 call _cond_invalid tmp[426439]))
    if call_tmp[663011]
    {
      (426455 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567522] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567523] "maybe param" "temp"
    unknown call_tmp[663016] "expr temp" "maybe param" "maybe type" "temp"
    (663019 'move' call_tmp[663016](426440 call isTrue tmp[426439]))
    (567528 'move' tmp[567523](567526 call _cond_test call_tmp[663016]))
    if tmp[567523]
    {
      unknown tmp[567530] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663021] "expr temp" "maybe param" "maybe type" "temp"
      (663024 'move' call_tmp[663021](137252 call isAssociativeArr a[137214]))
      unknown call_tmp[663026] "expr temp" "maybe param" "maybe type" "temp"
      (663029 'move' call_tmp[663026](137253 call ! call_tmp[663021]))
      (567532 'move' tmp[567530](426443 call isTrue call_tmp[663026]))
      (567537 'move' tmp[567522](567534 '_paramFoldLogical' tmp[567523] tmp[567530]))
    }
    {
      (567542 'move' tmp[567522](567539 '_paramFoldLogical' tmp[567523] 0))
    }
    (426429 'move' tmp[426418] tmp[567522])
    unknown call_tmp[663031] "expr temp" "maybe param" "maybe type" "temp"
    (663034 'move' call_tmp[663031](426431 call _cond_invalid tmp[426418]))
    if call_tmp[663031]
    {
      (426434 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567549] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567550] "maybe param" "temp"
    unknown call_tmp[663036] "expr temp" "maybe param" "maybe type" "temp"
    (663039 'move' call_tmp[663036](426419 call isTrue tmp[426418]))
    (567555 'move' tmp[567550](567553 call _cond_test call_tmp[663036]))
    if tmp[567550]
    {
      unknown tmp[567557] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663041] "expr temp" "maybe param" "maybe type" "temp"
      (663044 'move' call_tmp[663041](137260 call isSparseArr a[137214]))
      unknown call_tmp[663046] "expr temp" "maybe param" "maybe type" "temp"
      (663049 'move' call_tmp[663046](137261 call ! call_tmp[663041]))
      (567559 'move' tmp[567557](426422 call isTrue call_tmp[663046]))
      (567564 'move' tmp[567549](567561 '_paramFoldLogical' tmp[567550] tmp[567557]))
    }
    {
      (567569 'move' tmp[567549](567566 '_paramFoldLogical' tmp[567550] 0))
    }
    (426408 'move' tmp[426397] tmp[567549])
    unknown call_tmp[663051] "expr temp" "maybe param" "maybe type" "temp"
    (663054 'move' call_tmp[663051](426410 call _cond_invalid tmp[426397]))
    if call_tmp[663051]
    {
      (426413 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567657] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567658] "maybe param" "temp"
    unknown call_tmp[663056] "expr temp" "maybe param" "maybe type" "temp"
    (663059 'move' call_tmp[663056](426398 call isTrue tmp[426397]))
    (567663 'move' tmp[567658](567661 call _cond_test call_tmp[663056]))
    if tmp[567658]
    {
      (567668 'move' tmp[567657](567665 '_paramFoldLogical' tmp[567658] 1))
    }
    {
      unknown tmp[426460] "maybe param" "temp"
      unknown tmp[426481] "maybe param" "temp"
      unknown tmp[426502] "maybe param" "temp"
      (426513 'move' tmp[426502](137268 call isArray b[137219]))
      unknown call_tmp[663061] "expr temp" "maybe param" "maybe type" "temp"
      (663064 'move' call_tmp[663061](426515 call _cond_invalid tmp[426502]))
      if call_tmp[663061]
      {
        (426518 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567576] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567577] "maybe param" "temp"
      unknown call_tmp[663066] "expr temp" "maybe param" "maybe type" "temp"
      (663069 'move' call_tmp[663066](426503 call isTrue tmp[426502]))
      (567582 'move' tmp[567577](567580 call _cond_test call_tmp[663066]))
      if tmp[567577]
      {
        unknown tmp[567584] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663071] "expr temp" "maybe param" "maybe type" "temp"
        (663074 'move' call_tmp[663071](137272 call isRectangularArr b[137219]))
        unknown call_tmp[663076] "expr temp" "maybe param" "maybe type" "temp"
        (663079 'move' call_tmp[663076](137273 call ! call_tmp[663071]))
        (567586 'move' tmp[567584](426506 call isTrue call_tmp[663076]))
        (567591 'move' tmp[567576](567588 '_paramFoldLogical' tmp[567577] tmp[567584]))
      }
      {
        (567596 'move' tmp[567576](567593 '_paramFoldLogical' tmp[567577] 0))
      }
      (426492 'move' tmp[426481] tmp[567576])
      unknown call_tmp[663081] "expr temp" "maybe param" "maybe type" "temp"
      (663084 'move' call_tmp[663081](426494 call _cond_invalid tmp[426481]))
      if call_tmp[663081]
      {
        (426497 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567603] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567604] "maybe param" "temp"
      unknown call_tmp[663086] "expr temp" "maybe param" "maybe type" "temp"
      (663089 'move' call_tmp[663086](426482 call isTrue tmp[426481]))
      (567609 'move' tmp[567604](567607 call _cond_test call_tmp[663086]))
      if tmp[567604]
      {
        unknown tmp[567611] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663091] "expr temp" "maybe param" "maybe type" "temp"
        (663094 'move' call_tmp[663091](137280 call isAssociativeArr b[137219]))
        unknown call_tmp[663096] "expr temp" "maybe param" "maybe type" "temp"
        (663099 'move' call_tmp[663096](137281 call ! call_tmp[663091]))
        (567613 'move' tmp[567611](426485 call isTrue call_tmp[663096]))
        (567618 'move' tmp[567603](567615 '_paramFoldLogical' tmp[567604] tmp[567611]))
      }
      {
        (567623 'move' tmp[567603](567620 '_paramFoldLogical' tmp[567604] 0))
      }
      (426471 'move' tmp[426460] tmp[567603])
      unknown call_tmp[663101] "expr temp" "maybe param" "maybe type" "temp"
      (663104 'move' call_tmp[663101](426473 call _cond_invalid tmp[426460]))
      if call_tmp[663101]
      {
        (426476 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567630] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567631] "maybe param" "temp"
      unknown call_tmp[663106] "expr temp" "maybe param" "maybe type" "temp"
      (663109 'move' call_tmp[663106](426461 call isTrue tmp[426460]))
      (567636 'move' tmp[567631](567634 call _cond_test call_tmp[663106]))
      if tmp[567631]
      {
        unknown tmp[567638] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663111] "expr temp" "maybe param" "maybe type" "temp"
        (663114 'move' call_tmp[663111](137288 call isSparseArr b[137219]))
        unknown call_tmp[663116] "expr temp" "maybe param" "maybe type" "temp"
        (663119 'move' call_tmp[663116](137289 call ! call_tmp[663111]))
        (567640 'move' tmp[567638](426464 call isTrue call_tmp[663116]))
        (567645 'move' tmp[567630](567642 '_paramFoldLogical' tmp[567631] tmp[567638]))
      }
      {
        (567650 'move' tmp[567630](567647 '_paramFoldLogical' tmp[567631] 0))
      }
      unknown tmp[567670] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (567672 'move' tmp[567670](426402 call isTrue tmp[567630]))
      (567677 'move' tmp[567657](567674 '_paramFoldLogical' tmp[567658] tmp[567670]))
    }
    unknown call_tmp[663121] "expr temp" "maybe param" "maybe type" "temp"
    (663124 'move' call_tmp[663121](137298 call _cond_test tmp[567657]))
    if call_tmp[663121]
    {
      (518887 'move' ret[518877](518886 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518875] _end_chpl__serializeAssignment[518875]
    }
    (518892 'move' ret[518877](518891 'deref' 0))
    label _end_chpl__serializeAssignment[518875]
    (518879 return ret[518877])
  }
  function chpl__compatibleForBulkTransfer[137316](arg a[137313]:_array[133594](?), arg b[137321]:_array[133594](?), param arg kind[137325]:_tElt[137999]) param : _unknown[51]
  {
    unknown ret[518896] "RVV" "param" "temp"
    unknown call_tmp[663126] "expr temp" "maybe param" "maybe type" "temp"
    (663129 'move' call_tmp[663126](137329 call ! useBulkTransfer[113728]))
    unknown call_tmp[663131] "expr temp" "maybe param" "maybe type" "temp"
    (663134 'move' call_tmp[663131](137334 call _cond_test call_tmp[663126]))
    if call_tmp[663131]
    {
      (518901 'move' ret[518896](518900 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518894] _end_chpl__compatibleForBulkTransfer[518894]
    }
    unknown call_tmp[663138] "expr temp" "maybe param" "maybe type" "temp"
    (663141 'move' call_tmp[663138](137341 call eltType _mt[243] a[137313]))
    unknown call_tmp[663145] "expr temp" "maybe param" "maybe type" "temp"
    (663148 'move' call_tmp[663145](137345 call eltType _mt[243] b[137321]))
    unknown call_tmp[663150] "expr temp" "maybe param" "maybe type" "temp"
    (663153 'move' call_tmp[663150](137348 call != call_tmp[663138] call_tmp[663145]))
    unknown call_tmp[663155] "expr temp" "maybe param" "maybe type" "temp"
    (663158 'move' call_tmp[663155](137353 call _cond_test call_tmp[663150]))
    if call_tmp[663155]
    {
      (518906 'move' ret[518896](518905 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518894] _end_chpl__compatibleForBulkTransfer[518894]
    }
    unknown call_tmp[663160] "expr temp" "maybe param" "maybe type" "temp"
    (663163 'move' call_tmp[663160](137363 call == kind[137325] move[137993]))
    unknown call_tmp[663165] "expr temp" "maybe param" "maybe type" "temp"
    (663168 'move' call_tmp[663165](137368 call _cond_test call_tmp[663160]))
    if call_tmp[663165]
    {
      (518911 'move' ret[518896](518910 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518894] _end_chpl__compatibleForBulkTransfer[518894]
    }
    unknown tmp[426523] "maybe param" "temp"
    (426534 'move' tmp[426523](137380 call == kind[137325] initCopy[137995]))
    unknown call_tmp[663170] "expr temp" "maybe param" "maybe type" "temp"
    (663173 'move' call_tmp[663170](426536 call _cond_invalid tmp[426523]))
    if call_tmp[663170]
    {
      (426539 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567684] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567685] "maybe param" "temp"
    unknown call_tmp[663175] "expr temp" "maybe param" "maybe type" "temp"
    (663178 'move' call_tmp[663175](426524 call isTrue tmp[426523]))
    (567690 'move' tmp[567685](567688 call _cond_test call_tmp[663175]))
    if tmp[567685]
    {
      unknown tmp[567692] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663182] "expr temp" "maybe param" "maybe type" "temp"
      (663185 'move' call_tmp[663182](137384 call eltType _mt[243] a[137313]))
      unknown call_tmp[663187] "expr temp" "maybe param" "maybe type" "temp"
      (663190 'move' call_tmp[663187](137388 call isConstCopyableType call_tmp[663182]))
      (567694 'move' tmp[567692](426527 call isTrue call_tmp[663187]))
      (567699 'move' tmp[567684](567696 '_paramFoldLogical' tmp[567685] tmp[567692]))
    }
    {
      (567704 'move' tmp[567684](567701 '_paramFoldLogical' tmp[567685] 0))
    }
    unknown call_tmp[663192] "expr temp" "maybe param" "maybe type" "temp"
    (663195 'move' call_tmp[663192](137394 call _cond_test tmp[567684]))
    if call_tmp[663192]
    {
      (518916 'move' ret[518896](518915 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518894] _end_chpl__compatibleForBulkTransfer[518894]
    }
    unknown call_tmp[663199] "expr temp" "maybe param" "maybe type" "temp"
    (663202 'move' call_tmp[663199](137401 call eltType _mt[243] a[137313]))
    unknown call_tmp[663204] "expr temp" "maybe param" "maybe type" "temp"
    (663207 'move' call_tmp[663204](137405 call chpl__supportedDataTypeForBulkTransfer call_tmp[663199]))
    unknown call_tmp[663209] "expr temp" "maybe param" "maybe type" "temp"
    (663212 'move' call_tmp[663209](137406 call ! call_tmp[663204]))
    unknown call_tmp[663214] "expr temp" "maybe param" "maybe type" "temp"
    (663217 'move' call_tmp[663214](137411 call _cond_test call_tmp[663209]))
    if call_tmp[663214]
    {
      (518921 'move' ret[518896](518920 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518894] _end_chpl__compatibleForBulkTransfer[518894]
    }
    (518926 'move' ret[518896](518925 'deref' 1))
    label _end_chpl__compatibleForBulkTransfer[518894]
    (518898 return ret[518896])
  }
  function chpl__supportedDataTypeForBulkTransfer[137425](arg t[137423]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518930] "RVV" "param" "temp"
    unknown tmp[426565] "maybe param" "temp"
    (426576 'move' tmp[426565](354345 'is_subtype' borrowed[211](?) t[137423]))
    unknown call_tmp[663219] "expr temp" "maybe param" "maybe type" "temp"
    (663222 'move' call_tmp[663219](426578 call _cond_invalid tmp[426565]))
    if call_tmp[663219]
    {
      (426581 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567711] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567712] "maybe param" "temp"
    unknown call_tmp[663224] "expr temp" "maybe param" "maybe type" "temp"
    (663227 'move' call_tmp[663224](426566 call isTrue tmp[426565]))
    (567717 'move' tmp[567712](567715 call _cond_test call_tmp[663224]))
    if tmp[567712]
    {
      (567722 'move' tmp[567711](567719 '_paramFoldLogical' tmp[567712] 1))
    }
    {
      unknown tmp[567724] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663229] "expr temp" "maybe param" "maybe type" "temp"
      (663232 'move' call_tmp[663229](354346 'is_subtype' unmanaged[220](?) t[137423]))
      (567726 'move' tmp[567724](426570 call isTrue call_tmp[663229]))
      (567731 'move' tmp[567711](567728 '_paramFoldLogical' tmp[567712] tmp[567724]))
    }
    unknown call_tmp[663234] "expr temp" "maybe param" "maybe type" "temp"
    (663237 'move' call_tmp[663234](137489 call _cond_test tmp[567711]))
    if call_tmp[663234]
    {
      (518935 'move' ret[518930](518934 'deref' 0))
      gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518928] _end_chpl__supportedDataTypeForBulkTransfer[518928]
    }
    {
      unknown tmp[426544] "maybe param" "temp"
      (426555 'move' tmp[426544](137446 call isRecordType t[137423]))
      unknown call_tmp[663239] "expr temp" "maybe param" "maybe type" "temp"
      (663242 'move' call_tmp[663239](426557 call _cond_invalid tmp[426544]))
      if call_tmp[663239]
      {
        (426560 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[567738] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567739] "maybe param" "temp"
      unknown call_tmp[663244] "expr temp" "maybe param" "maybe type" "temp"
      (663247 'move' call_tmp[663244](426545 call isTrue tmp[426544]))
      (567744 'move' tmp[567739](567742 call _cond_test call_tmp[663244]))
      if tmp[567739]
      {
        (567749 'move' tmp[567738](567746 '_paramFoldLogical' tmp[567739] 1))
      }
      {
        unknown tmp[567751] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663249] "expr temp" "maybe param" "maybe type" "temp"
        (663252 'move' call_tmp[663249](137450 call isTupleType t[137423]))
        (567753 'move' tmp[567751](426549 call isTrue call_tmp[663249]))
        (567758 'move' tmp[567738](567755 '_paramFoldLogical' tmp[567739] tmp[567751]))
      }
      unknown call_tmp[663254] "expr temp" "maybe param" "maybe type" "temp"
      (663257 'move' call_tmp[663254](137484 call _cond_test tmp[567738]))
      if call_tmp[663254]
      {
        unknown call_tmp[663259] "expr temp" "maybe param" "maybe type" "temp"
        (663262 'move' call_tmp[663259](137456 call isPODType t[137423]))
        (518940 'move' ret[518930](518939 'deref' call_tmp[663259]))
        gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518928] _end_chpl__supportedDataTypeForBulkTransfer[518928]
      }
      {
        unknown call_tmp[663264] "expr temp" "maybe param" "maybe type" "temp"
        (663267 'move' call_tmp[663264](137463 call isUnionType t[137423]))
        unknown call_tmp[663269] "expr temp" "maybe param" "maybe type" "temp"
        (663272 'move' call_tmp[663269](137480 call _cond_test call_tmp[663264]))
        if call_tmp[663269]
        {
          (518945 'move' ret[518930](518944 'deref' 0))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518928] _end_chpl__supportedDataTypeForBulkTransfer[518928]
        }
        {
          unknown x[137469] "dead at end of block" "insert auto destroy" "unsafe"
          (543148 'default init var' x[137469] t[137423])
          (137472 'end of statement')
          unknown call_tmp[663274] "expr temp" "maybe param" "maybe type" "temp"
          (663277 'move' call_tmp[663274](137477 call chpl__supportedDataTypeForBulkTransfer x[137469]))
          (518950 'move' ret[518930](518949 'deref' call_tmp[663274]))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518928] _end_chpl__supportedDataTypeForBulkTransfer[518928]
          (480633 'end of statement' x[137469])
        }
      }
    }
    label _end_chpl__supportedDataTypeForBulkTransfer[518928]
    (518932 return ret[518930])
  }
  function chpl__supportedDataTypeForBulkTransfer[137503](arg x[137500]:string[26]) param : _unknown[51]
  {
    unknown ret[518956] "RVV" "param" "temp"
    (518961 'move' ret[518956](518960 'deref' 0))
    (518958 return ret[518956])
  }
  function chpl__supportedDataTypeForBulkTransfer[137517](arg x[137514]:bytes[24]) param : _unknown[51]
  {
    unknown ret[518965] "RVV" "param" "temp"
    (518970 'move' ret[518965](518969 'deref' 0))
    (518967 return ret[518965])
  }
  function chpl__supportedDataTypeForBulkTransfer[137531](arg x[137528]:_syncvar[84947](?)) param : _unknown[51]
  {
    unknown ret[518974] "RVV" "param" "temp"
    (518979 'move' ret[518974](518978 'deref' 0))
    (518976 return ret[518974])
  }
  function chpl__supportedDataTypeForBulkTransfer[137545](arg x[137542]:_singlevar[87256](?)) param : _unknown[51]
  {
    unknown ret[518983] "RVV" "param" "temp"
    (518988 'move' ret[518983](518987 'deref' 0))
    (518985 return ret[518983])
  }
  function chpl__supportedDataTypeForBulkTransfer[137559](arg x[137556]:_domain[125908](?)) param : _unknown[51]
  {
    unknown ret[518992] "RVV" "param" "temp"
    (518997 'move' ret[518992](518996 'deref' 0))
    (518994 return ret[518992])
  }
  function chpl__supportedDataTypeForBulkTransfer[137575](arg x[137572]:_array[133594](?)) param : _unknown[51]
  {
    unknown ret[519001] "RVV" "param" "temp"
    (519006 'move' ret[519001](519005 'deref' 0))
    (519003 return ret[519001])
  }
  function chpl__supportedDataTypeForBulkTransfer[137589](arg x[137586]:_distribution[118973](?)) param : _unknown[51]
  {
    unknown ret[519010] "RVV" "param" "temp"
    (519015 'move' ret[519010](519014 'deref' 1))
    (519012 return ret[519010])
  }
  function chpl__supportedDataTypeForBulkTransfer[137603](arg x[137600]:locale[28]) param : _unknown[51]
  {
    unknown ret[519019] "RVV" "param" "temp"
    (519024 'move' ret[519019](519023 'deref' 1))
    (519021 return ret[519019])
  }
  function chpl__supportedDataTypeForBulkTransfer[137617](arg x[137614]:chpl_anycomplex[184](?)) param : _unknown[51]
  {
    unknown ret[519028] "RVV" "param" "temp"
    (519033 'move' ret[519028](519032 'deref' 1))
    (519030 return ret[519028])
  }
  function chpl__supportedDataTypeForBulkTransfer[137632](arg x[137629]:object[22]) param : _unknown[51]
  {
    unknown ret[519037] "RVV" "param" "temp"
    (519042 'move' ret[519037](519041 'deref' 0))
    (519039 return ret[519037])
  }
  function chpl__supportedDataTypeForBulkTransfer[137644](arg x[137642]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[519046] "RVV" "param" "temp"
    (519051 'move' ret[519046](519050 'deref' 1))
    (519048 return ret[519046])
  }
  function checkArrayShapesUponAssignment[137660](arg a[137657]:_array[133594](?), arg b[137665]:_array[133594](?)) : _unknown[51] "no doc" "no return value for void"
  {
    unknown tmp[426586] "maybe param" "temp"
    (426597 'move' tmp[426586](137671 call isRectangularArr a[137657]))
    unknown call_tmp[663279] "expr temp" "maybe param" "maybe type" "temp"
    (663282 'move' call_tmp[663279](426599 call _cond_invalid tmp[426586]))
    if call_tmp[663279]
    {
      (426602 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567765] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567766] "maybe param" "temp"
    unknown call_tmp[663284] "expr temp" "maybe param" "maybe type" "temp"
    (663287 'move' call_tmp[663284](426587 call isTrue tmp[426586]))
    (567771 'move' tmp[567766](567769 call _cond_test call_tmp[663284]))
    if tmp[567766]
    {
      unknown tmp[567773] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663289] "expr temp" "maybe param" "maybe type" "temp"
      (663292 'move' call_tmp[663289](137675 call isRectangularArr b[137665]))
      (567775 'move' tmp[567773](426590 call isTrue call_tmp[663289]))
      (567780 'move' tmp[567765](567777 '_paramFoldLogical' tmp[567766] tmp[567773]))
    }
    {
      (567785 'move' tmp[567765](567782 '_paramFoldLogical' tmp[567766] 0))
    }
    unknown call_tmp[663294] "expr temp" "maybe param" "maybe type" "temp"
    (663297 'move' call_tmp[663294](137851 call _cond_test tmp[567765]))
    if call_tmp[663294]
    {
      unknown call_tmp[663301] "expr temp" "maybe param" "maybe type" "temp"
      (663304 'move' call_tmp[663301](137679 call _value _mt[243] a[137657]))
      unknown call_tmp[663308] "expr temp" "maybe param" "maybe type" "temp"
      (663311 'move' call_tmp[663308](137682 call dom _mt[243] call_tmp[663301]))
      unknown call_tmp[663315] "maybe param" "maybe type" "temp"
      (663318 'move' call_tmp[663315](137689 call(137685 call (partial) dsiDims _mt[243] call_tmp[663308])))
      const aDims[137690] "dead at end of block" "const" "insert auto destroy"
      (543150 'init var' aDims[137690] call_tmp[663315])
      unknown call_tmp[663322] "expr temp" "maybe param" "maybe type" "temp"
      (663325 'move' call_tmp[663322](137694 call _value _mt[243] b[137665]))
      unknown call_tmp[663329] "expr temp" "maybe param" "maybe type" "temp"
      (663332 'move' call_tmp[663329](137697 call dom _mt[243] call_tmp[663322]))
      unknown call_tmp[663336] "maybe param" "maybe type" "temp"
      (663339 'move' call_tmp[663336](137704 call(137700 call (partial) dsiDims _mt[243] call_tmp[663329])))
      const bDims[137705] "dead at end of block" "const" "insert auto destroy"
      (543152 'init var' bDims[137705] call_tmp[663336])
      (137708 'end of statement')
      unknown call_tmp[663343] "expr temp" "maybe param" "maybe type" "temp"
      (663346 'move' call_tmp[663343](137712 call size _mt[243] aDims[137690]))
      unknown call_tmp[663350] "expr temp" "maybe param" "maybe type" "temp"
      (663353 'move' call_tmp[663350](137716 call size _mt[243] bDims[137705]))
      unknown call_tmp[663355] "expr temp" "maybe param" "maybe type" "temp"
      (663358 'move' call_tmp[663355](137719 call == call_tmp[663343] call_tmp[663350]))
      (137722 call compilerAssert call_tmp[663355])
      (480647 'end of statement' aDims[137690] bDims[137705])
      {
        unknown i[137810] "dead at end of block" "insert auto destroy"
        (543154 'init var' i[137810] 0)
        (480650 'end of statement')
        unknown tmp[137811] "maybe param" "temp"
        unknown call_tmp[663362] "expr temp" "maybe param" "maybe type" "temp"
        (663365 'move' call_tmp[663362](137726 call size _mt[243] aDims[137690]))
        unknown call_tmp[663367] "expr temp" "maybe param" "maybe type" "temp"
        (663370 'move' call_tmp[663367](137730 call - call_tmp[663362] 1))
        (137823 'move' tmp[137811](137821 call chpl_compute_low_param_loop_bound 0 call_tmp[663367]))
        unknown tmp[137812] "maybe param" "temp"
        unknown call_tmp[663374] "expr temp" "maybe param" "maybe type" "temp"
        (663377 'move' call_tmp[663374](137830 call size _mt[243] aDims[137690]))
        unknown call_tmp[663379] "expr temp" "maybe param" "maybe type" "temp"
        (663382 'move' call_tmp[663379](137828 call - call_tmp[663374] 1))
        (137836 'move' tmp[137812](137834 call chpl_compute_high_param_loop_bound 0 call_tmp[663379]))
        unknown tmp[137813] "maybe param" "temp"
        (137839 'move' tmp[137813] 1)
        ParamForLoop[137841]
        { i[137810] tmp[137811] tmp[137812] tmp[137813]
          {
            unknown call_tmp[663384] "expr temp" "maybe param" "maybe type" "temp"
            (663387 'move' call_tmp[663384](137737 call aDims[137690] i[137810]))
            unknown call_tmp[663391] "expr temp" "maybe param" "maybe type" "temp"
            (663394 'move' call_tmp[663391](137738 call size _mt[243] call_tmp[663384]))
            unknown call_tmp[663396] "expr temp" "maybe param" "maybe type" "temp"
            (663399 'move' call_tmp[663396](137744 call bDims[137705] i[137810]))
            unknown call_tmp[663403] "expr temp" "maybe param" "maybe type" "temp"
            (663406 'move' call_tmp[663403](137745 call size _mt[243] call_tmp[663396]))
            unknown call_tmp[663408] "expr temp" "maybe param" "maybe type" "temp"
            (663411 'move' call_tmp[663408](137748 call != call_tmp[663391] call_tmp[663403]))
            unknown call_tmp[663413] "expr temp" "maybe param" "maybe type" "temp"
            (663416 'move' call_tmp[663413](137804 call _cond_test call_tmp[663408]))
            if call_tmp[663413]
            {
              unknown call_tmp[663418] "expr temp" "maybe param" "maybe type" "temp"
              (663421 'move' call_tmp[663418](137774 call aDims[137690] i[137810]))
              unknown call_tmp[663425] "expr temp" "maybe param" "maybe type" "temp"
              (663428 'move' call_tmp[663425](137775 call size _mt[243] call_tmp[663418]))
              unknown call_tmp[663430] "expr temp" "maybe param" "maybe type" "temp"
              (663433 'move' call_tmp[663430](137798 call bDims[137705] i[137810]))
              unknown call_tmp[663437] "expr temp" "maybe param" "maybe type" "temp"
              (663440 'move' call_tmp[663437](137799 call size _mt[243] call_tmp[663430]))
              (137802 call halt "assigning between arrays of different shapes in dimension " i[137810] ": " call_tmp[663425] " vs. " call_tmp[663437])
              (480651 'end of statement' i[137810] aDims[137690] i[137810] bDims[137705] i[137810])
            }
          }
        }
        label _unused_continueLabel[137815]
        label _breakLabel[137814]
      }
    }
    {
    }
    (519053 return _void[55])
  }
  function =[137866](ref arg a[137863]:_array[133594](?), arg b[137871]:_array[133594](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[663444] "expr temp" "maybe param" "maybe type" "temp"
    (663447 'move' call_tmp[663444](137875 call rank _mt[243] a[137863]))
    unknown call_tmp[663451] "expr temp" "maybe param" "maybe type" "temp"
    (663454 'move' call_tmp[663451](137879 call rank _mt[243] b[137871]))
    unknown call_tmp[663456] "expr temp" "maybe param" "maybe type" "temp"
    (663459 'move' call_tmp[663456](137882 call != call_tmp[663444] call_tmp[663451]))
    unknown call_tmp[663461] "expr temp" "maybe param" "maybe type" "temp"
    (663464 'move' call_tmp[663461](137905 call _cond_test call_tmp[663456]))
    if call_tmp[663461]
    {
      (137903 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[663468] "expr temp" "maybe param" "maybe type" "temp"
    (663471 'move' call_tmp[663468](137912 call _value _mt[243] b[137871]))
    unknown call_tmp[663473] "expr temp" "maybe param" "maybe type" "temp"
    (663476 'move' call_tmp[663473](137916 call == call_tmp[663468] nil[44]))
    unknown call_tmp[663478] "expr temp" "maybe param" "maybe type" "temp"
    (663481 'move' call_tmp[663478](137920 call _cond_test call_tmp[663473]))
    if call_tmp[663478]
    {
      gotoReturn _end_=[519055] _end_=[519055]
    }
    unknown call_tmp[663485] "expr temp" "maybe param" "maybe type" "temp"
    (663488 'move' call_tmp[663485](137926 call _value _mt[243] a[137863]))
    unknown call_tmp[663492] "expr temp" "maybe param" "maybe type" "temp"
    (663495 'move' call_tmp[663492](137930 call _value _mt[243] b[137871]))
    unknown call_tmp[663497] "expr temp" "maybe param" "maybe type" "temp"
    (663500 'move' call_tmp[663497](137933 call == call_tmp[663485] call_tmp[663492]))
    unknown call_tmp[663502] "expr temp" "maybe param" "maybe type" "temp"
    (663505 'move' call_tmp[663502](137938 call _cond_test call_tmp[663497]))
    if call_tmp[663502]
    {
      gotoReturn _end_=[519055] _end_=[519055]
    }
    unknown tmp[426607] "maybe param" "temp"
    unknown call_tmp[663509] "expr temp" "maybe param" "maybe type" "temp"
    (663512 'move' call_tmp[663509](137943 call size _mt[243] a[137863]))
    (426618 'move' tmp[426607](137947 call == call_tmp[663509] 0))
    unknown call_tmp[663514] "expr temp" "maybe param" "maybe type" "temp"
    (663517 'move' call_tmp[663514](426620 call _cond_invalid tmp[426607]))
    if call_tmp[663514]
    {
      (426623 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567792] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567793] "maybe param" "temp"
    unknown call_tmp[663519] "expr temp" "maybe param" "maybe type" "temp"
    (663522 'move' call_tmp[663519](426608 call isTrue tmp[426607]))
    (567798 'move' tmp[567793](567796 call _cond_test call_tmp[663519]))
    if tmp[567793]
    {
      unknown tmp[567800] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663526] "expr temp" "maybe param" "maybe type" "temp"
      (663529 'move' call_tmp[663526](137950 call size _mt[243] b[137871]))
      unknown call_tmp[663531] "expr temp" "maybe param" "maybe type" "temp"
      (663534 'move' call_tmp[663531](137954 call == call_tmp[663526] 0))
      (567802 'move' tmp[567800](426611 call isTrue call_tmp[663531]))
      (567807 'move' tmp[567792](567804 '_paramFoldLogical' tmp[567793] tmp[567800]))
    }
    {
      (567812 'move' tmp[567792](567809 '_paramFoldLogical' tmp[567793] 0))
    }
    unknown call_tmp[663536] "expr temp" "maybe param" "maybe type" "temp"
    (663539 'move' call_tmp[663536](137960 call _cond_test tmp[567792]))
    if call_tmp[663536]
    {
      gotoReturn _end_=[519055] _end_=[519055]
    }
    unknown call_tmp[663541] "expr temp" "maybe param" "maybe type" "temp"
    (663544 'move' call_tmp[663541](137972 call _cond_test 1))
    if call_tmp[663541]
    {
      (137970 call checkArrayShapesUponAssignment a[137863] b[137871])
    }
    (137988 call chpl__uncheckedArrayTransfer a[137863] b[137871](kind = assign[137997]))
    label _end_=[519055]
    (519057 return _void[55])
  }
  type _tElt[137999] def move[137993]:_tElt[137999] def initCopy[137995]:_tElt[137999] def assign[137997]:_tElt[137999]
  function needsInitWorkaround[138006](arg t[138004]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[519067] "RVV" "param" "temp"
    unknown tmp[426628] "maybe param" "temp"
    unknown tmp[426649] "maybe param" "temp"
    (426660 'move' tmp[426649](354350 'is_subtype' _array[133594](?) t[138004]))
    unknown call_tmp[663546] "expr temp" "maybe param" "maybe type" "temp"
    (663549 'move' call_tmp[663546](426662 call _cond_invalid tmp[426649]))
    if call_tmp[663546]
    {
      (426665 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567819] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567820] "maybe param" "temp"
    unknown call_tmp[663551] "expr temp" "maybe param" "maybe type" "temp"
    (663554 'move' call_tmp[663551](426650 call isTrue tmp[426649]))
    (567825 'move' tmp[567820](567823 call _cond_test call_tmp[663551]))
    if tmp[567820]
    {
      (567830 'move' tmp[567819](567827 '_paramFoldLogical' tmp[567820] 1))
    }
    {
      unknown tmp[567832] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663556] "expr temp" "maybe param" "maybe type" "temp"
      (663559 'move' call_tmp[663556](354351 'is_subtype' _domain[125908](?) t[138004]))
      (567834 'move' tmp[567832](426654 call isTrue call_tmp[663556]))
      (567839 'move' tmp[567819](567836 '_paramFoldLogical' tmp[567820] tmp[567832]))
    }
    (426639 'move' tmp[426628] tmp[567819])
    unknown call_tmp[663561] "expr temp" "maybe param" "maybe type" "temp"
    (663564 'move' call_tmp[663561](426641 call _cond_invalid tmp[426628]))
    if call_tmp[663561]
    {
      (426644 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567846] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567847] "maybe param" "temp"
    unknown call_tmp[663566] "expr temp" "maybe param" "maybe type" "temp"
    (663569 'move' call_tmp[663566](426629 call isTrue tmp[426628]))
    (567852 'move' tmp[567847](567850 call _cond_test call_tmp[663566]))
    if tmp[567847]
    {
      (567857 'move' tmp[567846](567854 '_paramFoldLogical' tmp[567847] 1))
    }
    {
      unknown tmp[567859] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663571] "expr temp" "maybe param" "maybe type" "temp"
      (663574 'move' call_tmp[663571](354352 'is_subtype' _distribution[118973](?) t[138004]))
      (567861 'move' tmp[567859](426633 call isTrue call_tmp[663571]))
      (567866 'move' tmp[567846](567863 '_paramFoldLogical' tmp[567847] tmp[567859]))
    }
    (519072 'move' ret[519067](519071 'deref' tmp[567846]))
    (519069 return ret[519067])
  }
  function initCopyAfterTransfer[138040](ref arg a[138037]:_array[133594](?)) : _unknown[51] "private" "ignore transfer errors" "no return value for void"
  {
    unknown call_tmp[663578] "expr temp" "maybe param" "maybe type" "temp"
    (663581 'move' call_tmp[663578](138044 call eltType _mt[243] a[138037]))
    unknown call_tmp[663583] "expr temp" "maybe param" "maybe type" "temp"
    (663586 'move' call_tmp[663583](138048 call needsInitWorkaround call_tmp[663578]))
    unknown call_tmp[663588] "expr temp" "maybe param" "maybe type" "temp"
    (663591 'move' call_tmp[663588](138108 call _cond_test call_tmp[663583]))
    if call_tmp[663588]
    {
      unknown call_tmp[663595] "expr temp" "maybe param" "maybe type" "temp"
      (663598 'move' call_tmp[663595](415693 call _dom _mt[243] a[138037]))
      unknown call_tmp[663600] "maybe param" "maybe type" "temp"
      (663603 'move' call_tmp[663600](415689 call chpl__staticAutoLocalCheck a[138037] call_tmp[663595]))
      unknown chpl__staticAutoLocalCheckSym[415688] "dead at end of block" "param"
      (543156 'init var' chpl__staticAutoLocalCheckSym[415688] call_tmp[663600])
      (480667 'end of statement')
      if chpl__staticAutoLocalCheckSym[415688]
      {
        unknown call_tmp[663607] "expr temp" "maybe param" "maybe type" "temp"
        (663610 'move' call_tmp[663607](138051 call _dom _mt[243] a[138037]))
        Forall {
          induction variables:
            
            unknown ai[138079] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663607]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138058] "dead at end of block" "ref var"
            unknown call_tmp[663612] "expr temp" "maybe param" "maybe type" "temp"
            (663615 'move' call_tmp[663612](415699 'may be local access' a[138037] ai[138079] chpl__staticAutoLocalCheckSym[415688] 1))
            (543159 'move' aa[138058](543158 'addr of' call_tmp[663612]))
            (138061 'end of statement')
            unknown call_tmp[663619] "maybe param" "maybe type" "temp"
            (663622 'move' call_tmp[663619](138064 call eltType _mt[243] a[138037]))
            unknown copy[138068] "dead at end of block" "no auto destroy"
            (543161 'init var' copy[138068] aa[138058] call_tmp[663619])
            (138071 'end of statement' ai[138079] aa[138058])
            (138076 '=' aa[138058] copy[138068])
            (480670 'end of statement' aa[138058] copy[138068])
          }
        }
      }
      {
        unknown call_tmp[663626] "expr temp" "maybe param" "maybe type" "temp"
        (663629 'move' call_tmp[663626](415685 call _dom _mt[243] a[138037]))
        Forall {
          induction variables:
            
            unknown ai[415682] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663626]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415664] "dead at end of block" "ref var"
            unknown call_tmp[663631] "expr temp" "maybe param" "maybe type" "temp"
            (663634 'move' call_tmp[663631](415666 call a[138037] ai[415682]))
            (543164 'move' aa[415664](543163 'addr of' call_tmp[663631]))
            (415669 'end of statement')
            unknown call_tmp[663638] "maybe param" "maybe type" "temp"
            (663641 'move' call_tmp[663638](415673 call eltType _mt[243] a[138037]))
            unknown copy[415670] "dead at end of block" "no auto destroy"
            (543166 'init var' copy[415670] aa[415664] call_tmp[663638])
            (415677 'end of statement' ai[415682] aa[415664])
            (415678 '=' aa[415664] copy[415670])
            (480675 'end of statement' aa[415664] copy[415670])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138103] "index var" "insert auto destroy"
        iterated expressions:
          a[138037]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663645] "maybe param" "maybe type" "temp"
          (663648 'move' call_tmp[663645](138087 call eltType _mt[243] a[138037]))
          unknown copy[138091] "dead at end of block" "no auto destroy"
          (543168 'init var' copy[138091] aa[138103] call_tmp[663645])
          (138094 'end of statement' aa[138103])
          (138100 '=' aa[138103] copy[138091])
          (480679 'end of statement' aa[138103] copy[138091])
        }
      }
    }
    (519074 return _void[55])
  }
  function fixRuntimeType[138119](arg eltType[138117]:_any[178](?), ref arg elt[138121]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown runtimeTypesDiffer[138124] "dead at end of block" "insert auto destroy"
    (543170 'init var' runtimeTypesDiffer[138124] 0)
    (138127 'end of statement')
    unknown tmp[426670] "maybe param" "temp"
    (426681 'move' tmp[426670](354353 'is_subtype' _array[133594](?) eltType[138117]))
    unknown call_tmp[663650] "expr temp" "maybe param" "maybe type" "temp"
    (663653 'move' call_tmp[663650](426683 call _cond_invalid tmp[426670]))
    if call_tmp[663650]
    {
      (426686 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567873] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567874] "maybe param" "temp"
    unknown call_tmp[663655] "expr temp" "maybe param" "maybe type" "temp"
    (663658 'move' call_tmp[663655](426671 call isTrue tmp[426670]))
    (567879 'move' tmp[567874](567877 call _cond_test call_tmp[663655]))
    if tmp[567874]
    {
      (567884 'move' tmp[567873](567881 '_paramFoldLogical' tmp[567874] 1))
    }
    {
      unknown tmp[567886] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663660] "expr temp" "maybe param" "maybe type" "temp"
      (663663 'move' call_tmp[663660](354354 'is_subtype' _domain[125908](?) eltType[138117]))
      (567888 'move' tmp[567886](426675 call isTrue call_tmp[663660]))
      (567893 'move' tmp[567873](567890 '_paramFoldLogical' tmp[567874] tmp[567886]))
    }
    unknown call_tmp[663665] "expr temp" "maybe param" "maybe type" "temp"
    (663668 'move' call_tmp[663665](138257 call _cond_test tmp[567873]))
    if call_tmp[663665]
    {
      unknown call_tmp[663670] "expr temp" "maybe param" "maybe type" "temp"
      (663673 'move' call_tmp[663670](354355 'is_subtype' _array[133594](?) eltType[138117]))
      unknown call_tmp[663675] "expr temp" "maybe param" "maybe type" "temp"
      (663678 'move' call_tmp[663675](138183 call _cond_test call_tmp[663670]))
      if call_tmp[663675]
      {
        const lhsDomain[138150] "dead at end of block" "const" "ref var"
        unknown call_tmp[663680] "expr temp" "maybe param" "maybe type" "temp"
        (663683 'move' call_tmp[663680](138149 call chpl__domainFromArrayRuntimeType eltType[138117]))
        (543173 'move' lhsDomain[138150](543172 'addr of' call_tmp[663680]))
        (138153 'end of statement')
        const rhsDomain[138159] "dead at end of block" "const" "ref var"
        unknown call_tmp[663687] "expr temp" "maybe param" "maybe type" "temp"
        (663690 'move' call_tmp[663687](138156 call _dom _mt[243] elt[138121]))
        (543176 'move' rhsDomain[138159](543175 'addr of' call_tmp[663687]))
        (138162 'end of statement')
        unknown call_tmp[663694] "expr temp" "maybe param" "maybe type" "temp"
        (663697 'move' call_tmp[663694](138164 call _instance _mt[243] lhsDomain[138150]))
        unknown call_tmp[663701] "expr temp" "maybe param" "maybe type" "temp"
        (663704 'move' call_tmp[663701](138168 call _instance _mt[243] rhsDomain[138159]))
        unknown call_tmp[663706] "expr temp" "maybe param" "maybe type" "temp"
        (663709 'move' call_tmp[663706](138171 call != call_tmp[663694] call_tmp[663701]))
        unknown call_tmp[663711] "expr temp" "maybe param" "maybe type" "temp"
        (663714 'move' call_tmp[663711](138179 call _cond_test call_tmp[663706]))
        if call_tmp[663711]
        {
          (138175 call = runtimeTypesDiffer[138124] 1)
          (480683 'end of statement' runtimeTypesDiffer[138124])
        }
      }
      unknown call_tmp[663716] "expr temp" "maybe param" "maybe type" "temp"
      (663719 'move' call_tmp[663716](354356 'is_subtype' _domain[125908](?) eltType[138117]))
      unknown call_tmp[663721] "expr temp" "maybe param" "maybe type" "temp"
      (663724 'move' call_tmp[663721](138230 call _cond_test call_tmp[663716]))
      if call_tmp[663721]
      {
        const lhsDist[138197] "dead at end of block" "const" "ref var"
        unknown call_tmp[663726] "expr temp" "maybe param" "maybe type" "temp"
        (663729 'move' call_tmp[663726](138196 call chpl__distributionFromDomainRuntimeType eltType[138117]))
        (543179 'move' lhsDist[138197](543178 'addr of' call_tmp[663726]))
        (138200 'end of statement')
        const rhsDist[138206] "dead at end of block" "const" "ref var"
        unknown call_tmp[663733] "expr temp" "maybe param" "maybe type" "temp"
        (663736 'move' call_tmp[663733](138203 call dist _mt[243] elt[138121]))
        (543182 'move' rhsDist[138206](543181 'addr of' call_tmp[663733]))
        (138209 'end of statement')
        unknown call_tmp[663740] "expr temp" "maybe param" "maybe type" "temp"
        (663743 'move' call_tmp[663740](138211 call _instance _mt[243] lhsDist[138197]))
        unknown call_tmp[663747] "expr temp" "maybe param" "maybe type" "temp"
        (663750 'move' call_tmp[663747](138215 call _instance _mt[243] rhsDist[138206]))
        unknown call_tmp[663752] "expr temp" "maybe param" "maybe type" "temp"
        (663755 'move' call_tmp[663752](138218 call != call_tmp[663740] call_tmp[663747]))
        unknown call_tmp[663757] "expr temp" "maybe param" "maybe type" "temp"
        (663760 'move' call_tmp[663757](138226 call _cond_test call_tmp[663752]))
        if call_tmp[663757]
        {
          (138222 call = runtimeTypesDiffer[138124] 1)
          (480685 'end of statement' runtimeTypesDiffer[138124])
        }
      }
      unknown call_tmp[663762] "expr temp" "maybe param" "maybe type" "temp"
      (663765 'move' call_tmp[663762](138253 call _cond_test runtimeTypesDiffer[138124]))
      if call_tmp[663762]
      {
        unknown copy[138237] "dead at end of block" "no auto destroy"
        (543184 'init var' copy[138237] elt[138121] eltType[138117])
        (138240 'end of statement')
        (138245 call chpl__autoDestroy elt[138121])
        (480687 'end of statement')
        (138251 '=' elt[138121] copy[138237])
        (480688 'end of statement' copy[138237])
      }
    }
    (519076 return _void[55])
  }
  function fixEltRuntimeTypesAfterTransfer[138271](ref arg a[138268]:_array[133594](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[663769] "expr temp" "maybe param" "maybe type" "temp"
    (663772 'move' call_tmp[663769](138275 call eltType _mt[243] a[138268]))
    unknown call_tmp[663774] "expr temp" "maybe param" "maybe type" "temp"
    (663777 'move' call_tmp[663774](138279 call needsInitWorkaround call_tmp[663769]))
    unknown call_tmp[663779] "expr temp" "maybe param" "maybe type" "temp"
    (663782 'move' call_tmp[663779](138327 call _cond_test call_tmp[663774]))
    if call_tmp[663779]
    {
      unknown call_tmp[663786] "expr temp" "maybe param" "maybe type" "temp"
      (663789 'move' call_tmp[663786](415732 call _dom _mt[243] a[138268]))
      unknown call_tmp[663791] "maybe param" "maybe type" "temp"
      (663794 'move' call_tmp[663791](415728 call chpl__staticAutoLocalCheck a[138268] call_tmp[663786]))
      unknown chpl__staticAutoLocalCheckSym[415727] "dead at end of block" "param"
      (543186 'init var' chpl__staticAutoLocalCheckSym[415727] call_tmp[663791])
      (480690 'end of statement')
      if chpl__staticAutoLocalCheckSym[415727]
      {
        unknown call_tmp[663798] "expr temp" "maybe param" "maybe type" "temp"
        (663801 'move' call_tmp[663798](138282 call _dom _mt[243] a[138268]))
        Forall {
          induction variables:
            
            unknown ai[138304] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663798]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138289] "dead at end of block" "ref var"
            unknown call_tmp[663803] "expr temp" "maybe param" "maybe type" "temp"
            (663806 'move' call_tmp[663803](415738 'may be local access' a[138268] ai[138304] chpl__staticAutoLocalCheckSym[415727] 1))
            (543189 'move' aa[138289](543188 'addr of' call_tmp[663803]))
            (138292 'end of statement' ai[138304])
            unknown call_tmp[663810] "expr temp" "maybe param" "maybe type" "temp"
            (663813 'move' call_tmp[663810](138296 call eltType _mt[243] a[138268]))
            (138301 call fixRuntimeType call_tmp[663810] aa[138289])
            (480692 'end of statement' aa[138289])
          }
        }
      }
      {
        unknown call_tmp[663817] "expr temp" "maybe param" "maybe type" "temp"
        (663820 'move' call_tmp[663817](415724 call _dom _mt[243] a[138268]))
        Forall {
          induction variables:
            
            unknown ai[415721] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663817]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415707] "dead at end of block" "ref var"
            unknown call_tmp[663822] "expr temp" "maybe param" "maybe type" "temp"
            (663825 'move' call_tmp[663822](415709 call a[138268] ai[415721]))
            (543192 'move' aa[415707](543191 'addr of' call_tmp[663822]))
            (415712 'end of statement' ai[415721])
            unknown call_tmp[663829] "expr temp" "maybe param" "maybe type" "temp"
            (663832 'move' call_tmp[663829](415716 call eltType _mt[243] a[138268]))
            (415714 call fixRuntimeType call_tmp[663829] aa[415707])
            (480695 'end of statement' aa[415707])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138322] "index var" "insert auto destroy"
        iterated expressions:
          a[138268]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663836] "expr temp" "maybe param" "maybe type" "temp"
          (663839 'move' call_tmp[663836](138313 call eltType _mt[243] a[138268]))
          (138318 call fixRuntimeType call_tmp[663836] aa[138322])
          (480697 'end of statement' aa[138322])
        }
      }
    }
    (519078 return _void[55])
  }
  function chpl__uncheckedArrayTransfer[138342](ref arg a[138339]:_array[133594](?), arg b[138347]:_array[133594](?), param arg kind[138350]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown done[138353] "dead at end of block" "insert auto destroy"
    (543194 'init var' done[138353] 0)
    (138356 'end of statement')
    unknown call_tmp[663841] "expr temp" "maybe param" "maybe type" "temp"
    (663844 'move' call_tmp[663841](138362 call chpl__serializeAssignment a[138339] b[138347]))
    unknown call_tmp[663846] "expr temp" "maybe param" "maybe type" "temp"
    (663849 'move' call_tmp[663846](138363 call ! call_tmp[663841]))
    unknown call_tmp[663851] "expr temp" "maybe param" "maybe type" "temp"
    (663854 'move' call_tmp[663851](138479 call _cond_test call_tmp[663846]))
    if call_tmp[663851]
    {
      unknown call_tmp[663856] "expr temp" "maybe param" "maybe type" "temp"
      (663859 'move' call_tmp[663856](138370 call chpl__compatibleForBulkTransfer a[138339] b[138347] kind[138350]))
      unknown call_tmp[663861] "expr temp" "maybe param" "maybe type" "temp"
      (663864 'move' call_tmp[663861](138401 call _cond_test call_tmp[663856]))
      if call_tmp[663861]
      {
        unknown call_tmp[663866] "expr temp" "maybe param" "maybe type" "temp"
        (663869 'move' call_tmp[663866](138376 call chpl__bulkTransferArray a[138339] b[138347]))
        (138377 call = done[138353] call_tmp[663866])
        (480699 'end of statement' done[138353])
      }
      {
        unknown call_tmp[663871] "expr temp" "maybe param" "maybe type" "temp"
        (663874 'move' call_tmp[663871](138386 call chpl__compatibleForWidePtrBulkTransfer a[138339] b[138347] kind[138350]))
        unknown call_tmp[663876] "expr temp" "maybe param" "maybe type" "temp"
        (663879 'move' call_tmp[663876](138397 call _cond_test call_tmp[663871]))
        if call_tmp[663876]
        {
          unknown call_tmp[663881] "expr temp" "maybe param" "maybe type" "temp"
          (663884 'move' call_tmp[663881](138392 call chpl__bulkTransferPtrArray a[138339] b[138347]))
          (138393 call = done[138353] call_tmp[663881])
          (480701 'end of statement' done[138353])
        }
      }
      unknown call_tmp[663886] "expr temp" "maybe param" "maybe type" "temp"
      (663889 'move' call_tmp[663886](138475 call _cond_test done[138353]))
      if call_tmp[663886]
      {
        unknown tmp[426733] "maybe param" "temp"
        (426744 'move' tmp[426733](138413 call == kind[138350] initCopy[137995]))
        unknown call_tmp[663891] "expr temp" "maybe param" "maybe type" "temp"
        (663894 'move' call_tmp[663891](426746 call _cond_invalid tmp[426733]))
        if call_tmp[663891]
        {
          (426749 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567900] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567901] "maybe param" "temp"
        unknown call_tmp[663896] "expr temp" "maybe param" "maybe type" "temp"
        (663899 'move' call_tmp[663896](426734 call isTrue tmp[426733]))
        (567906 'move' tmp[567901](567904 call _cond_test call_tmp[663896]))
        if tmp[567901]
        {
          unknown tmp[567908] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[663903] "expr temp" "maybe param" "maybe type" "temp"
          (663906 'move' call_tmp[663903](138417 call eltType _mt[243] a[138339]))
          unknown call_tmp[663908] "expr temp" "maybe param" "maybe type" "temp"
          (663911 'move' call_tmp[663908](138421 call isPODType call_tmp[663903]))
          unknown call_tmp[663913] "expr temp" "maybe param" "maybe type" "temp"
          (663916 'move' call_tmp[663913](138422 call ! call_tmp[663908]))
          (567910 'move' tmp[567908](426737 call isTrue call_tmp[663913]))
          (567915 'move' tmp[567900](567912 '_paramFoldLogical' tmp[567901] tmp[567908]))
        }
        {
          (567920 'move' tmp[567900](567917 '_paramFoldLogical' tmp[567901] 0))
        }
        unknown call_tmp[663918] "expr temp" "maybe param" "maybe type" "temp"
        (663921 'move' call_tmp[663918](138469 call _cond_test tmp[567900]))
        if call_tmp[663918]
        {
          (138429 call initCopyAfterTransfer a[138339])
        }
        {
          unknown tmp[426691] "maybe param" "temp"
          (426702 'move' tmp[426691](138437 call == kind[138350] move[137993]))
          unknown call_tmp[663923] "expr temp" "maybe param" "maybe type" "temp"
          (663926 'move' call_tmp[663923](426704 call _cond_invalid tmp[426691]))
          if call_tmp[663923]
          {
            (426707 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567954] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[567955] "maybe param" "temp"
          unknown call_tmp[663928] "expr temp" "maybe param" "maybe type" "temp"
          (663931 'move' call_tmp[663928](426692 call isTrue tmp[426691]))
          (567960 'move' tmp[567955](567958 call _cond_test call_tmp[663928]))
          if tmp[567955]
          {
            unknown tmp[426712] "maybe param" "temp"
            unknown call_tmp[663935] "expr temp" "maybe param" "maybe type" "temp"
            (663938 'move' call_tmp[663935](138441 call eltType _mt[243] a[138339]))
            (426723 'move' tmp[426712](354357 'is_subtype' _array[133594](?) call_tmp[663935]))
            unknown call_tmp[663940] "expr temp" "maybe param" "maybe type" "temp"
            (663943 'move' call_tmp[663940](426725 call _cond_invalid tmp[426712]))
            if call_tmp[663940]
            {
              (426728 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[567927] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[567928] "maybe param" "temp"
            unknown call_tmp[663945] "expr temp" "maybe param" "maybe type" "temp"
            (663948 'move' call_tmp[663945](426713 call isTrue tmp[426712]))
            (567933 'move' tmp[567928](567931 call _cond_test call_tmp[663945]))
            if tmp[567928]
            {
              (567938 'move' tmp[567927](567935 '_paramFoldLogical' tmp[567928] 1))
            }
            {
              unknown tmp[567940] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[663952] "expr temp" "maybe param" "maybe type" "temp"
              (663955 'move' call_tmp[663952](138449 call eltType _mt[243] a[138339]))
              unknown call_tmp[663957] "expr temp" "maybe param" "maybe type" "temp"
              (663960 'move' call_tmp[663957](354358 'is_subtype' _domain[125908](?) call_tmp[663952]))
              (567942 'move' tmp[567940](426717 call isTrue call_tmp[663957]))
              (567947 'move' tmp[567927](567944 '_paramFoldLogical' tmp[567928] tmp[567940]))
            }
            unknown tmp[567962] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (567964 'move' tmp[567962](426695 call isTrue tmp[567927]))
            (567969 'move' tmp[567954](567966 '_paramFoldLogical' tmp[567955] tmp[567962]))
          }
          {
            (567974 'move' tmp[567954](567971 '_paramFoldLogical' tmp[567955] 0))
          }
          unknown call_tmp[663962] "expr temp" "maybe param" "maybe type" "temp"
          (663965 'move' call_tmp[663962](138465 call _cond_test tmp[567954]))
          if call_tmp[663962]
          {
            (138462 call fixEltRuntimeTypesAfterTransfer a[138339])
          }
        }
      }
    }
    unknown call_tmp[663967] "expr temp" "maybe param" "maybe type" "temp"
    (663970 'move' call_tmp[663967](138484 call ! done[138353]))
    unknown call_tmp[663972] "expr temp" "maybe param" "maybe type" "temp"
    (663975 'move' call_tmp[663972](138494 call _cond_test call_tmp[663967]))
    if call_tmp[663972]
    {
      (138491 call chpl__transferArray a[138339] b[138347] kind[138350])
    }
    (519080 return _void[55])
  }
  function chpl__compatibleForWidePtrBulkTransfer[138504](arg a[138502]:_any[178](?), arg b[138506]:_any[178](?), param arg kind[138512] :
  assign[137997] =
  assign[137997]) param : _unknown[51]
  {
    unknown ret[519084] "RVV" "param" "temp"
    unknown call_tmp[663977] "expr temp" "maybe param" "maybe type" "temp"
    (663980 'move' call_tmp[663977](138516 call ! useBulkPtrTransfer[113738]))
    unknown call_tmp[663982] "expr temp" "maybe param" "maybe type" "temp"
    (663985 'move' call_tmp[663982](138521 call _cond_test call_tmp[663977]))
    if call_tmp[663982]
    {
      (519089 'move' ret[519084](519088 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519082] _end_chpl__compatibleForWidePtrBulkTransfer[519082]
    }
    unknown tmp[426754] "maybe param" "temp"
    unknown call_tmp[663989] "expr temp" "maybe param" "maybe type" "temp"
    (663992 'move' call_tmp[663989](138528 call _value _mt[243] a[138502]))
    (426765 'move' tmp[426754](138535 call(138531 call (partial) isDefaultRectangular _mt[243] call_tmp[663989])))
    unknown call_tmp[663996] "expr temp" "maybe param" "maybe type" "temp"
    (663999 'move' call_tmp[663996](426767 call _cond_invalid tmp[426754]))
    if call_tmp[663996]
    {
      (426770 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567981] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567982] "maybe param" "temp"
    unknown call_tmp[664001] "expr temp" "maybe param" "maybe type" "temp"
    (664004 'move' call_tmp[664001](426755 call isTrue tmp[426754]))
    (567987 'move' tmp[567982](567985 call _cond_test call_tmp[664001]))
    if tmp[567982]
    {
      unknown tmp[567989] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[664008] "expr temp" "maybe param" "maybe type" "temp"
      (664011 'move' call_tmp[664008](138537 call _value _mt[243] b[138506]))
      unknown call_tmp[664015] "expr temp" "maybe param" "maybe type" "temp"
      (664018 'move' call_tmp[664015](138544 call(138540 call (partial) isDefaultRectangular _mt[243] call_tmp[664008])))
      (567991 'move' tmp[567989](426758 call isTrue call_tmp[664015]))
      (567996 'move' tmp[567981](567993 '_paramFoldLogical' tmp[567982] tmp[567989]))
    }
    {
      (568001 'move' tmp[567981](567998 '_paramFoldLogical' tmp[567982] 0))
    }
    unknown call_tmp[664020] "expr temp" "maybe param" "maybe type" "temp"
    (664023 'move' call_tmp[664020](138547 call ! tmp[567981]))
    unknown call_tmp[664025] "expr temp" "maybe param" "maybe type" "temp"
    (664028 'move' call_tmp[664025](138552 call _cond_test call_tmp[664020]))
    if call_tmp[664025]
    {
      (519094 'move' ret[519084](519093 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519082] _end_chpl__compatibleForWidePtrBulkTransfer[519082]
    }
    unknown call_tmp[664032] "expr temp" "maybe param" "maybe type" "temp"
    (664035 'move' call_tmp[664032](138558 call eltType _mt[243] a[138502]))
    unknown call_tmp[664039] "expr temp" "maybe param" "maybe type" "temp"
    (664042 'move' call_tmp[664039](138562 call eltType _mt[243] b[138506]))
    unknown call_tmp[664044] "expr temp" "maybe param" "maybe type" "temp"
    (664047 'move' call_tmp[664044](138565 call != call_tmp[664032] call_tmp[664039]))
    unknown call_tmp[664049] "expr temp" "maybe param" "maybe type" "temp"
    (664052 'move' call_tmp[664049](138570 call _cond_test call_tmp[664044]))
    if call_tmp[664049]
    {
      (519099 'move' ret[519084](519098 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519082] _end_chpl__compatibleForWidePtrBulkTransfer[519082]
    }
    unknown call_tmp[664056] "expr temp" "maybe param" "maybe type" "temp"
    (664059 'move' call_tmp[664056](138577 call eltType _mt[243] a[138502]))
    unknown call_tmp[664061] "expr temp" "maybe param" "maybe type" "temp"
    (664064 'move' call_tmp[664061](138581 call isClass call_tmp[664056]))
    unknown call_tmp[664066] "expr temp" "maybe param" "maybe type" "temp"
    (664069 'move' call_tmp[664066](138582 call ! call_tmp[664061]))
    unknown call_tmp[664071] "expr temp" "maybe param" "maybe type" "temp"
    (664074 'move' call_tmp[664071](138587 call _cond_test call_tmp[664066]))
    if call_tmp[664071]
    {
      (519104 'move' ret[519084](519103 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519082] _end_chpl__compatibleForWidePtrBulkTransfer[519082]
    }
    unknown call_tmp[664078] "expr temp" "maybe param" "maybe type" "temp"
    (664081 'move' call_tmp[664078](138594 call eltType _mt[243] a[138502]))
    unknown call_tmp[664083] "expr temp" "maybe param" "maybe type" "temp"
    (664086 'move' call_tmp[664083](138598 call isOwnedClass call_tmp[664078]))
    unknown call_tmp[664088] "expr temp" "maybe param" "maybe type" "temp"
    (664091 'move' call_tmp[664088](138602 call _cond_test call_tmp[664083]))
    if call_tmp[664088]
    {
      (519109 'move' ret[519084](519108 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519082] _end_chpl__compatibleForWidePtrBulkTransfer[519082]
    }
    unknown call_tmp[664095] "expr temp" "maybe param" "maybe type" "temp"
    (664098 'move' call_tmp[664095](138609 call eltType _mt[243] a[138502]))
    unknown call_tmp[664100] "expr temp" "maybe param" "maybe type" "temp"
    (664103 'move' call_tmp[664100](138613 call isSharedClass call_tmp[664095]))
    unknown call_tmp[664105] "expr temp" "maybe param" "maybe type" "temp"
    (664108 'move' call_tmp[664105](138617 call _cond_test call_tmp[664100]))
    if call_tmp[664105]
    {
      (519114 'move' ret[519084](519113 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519082] _end_chpl__compatibleForWidePtrBulkTransfer[519082]
    }
    (519119 'move' ret[519084](519118 'deref' 1))
    label _end_chpl__compatibleForWidePtrBulkTransfer[519082]
    (519086 return ret[519084])
  }
  function chpl__bulkTransferPtrArray[138635](ref arg a[138632]:_array[133594](?), arg b[138640]:_array[133594](?)) : _unknown[51] "inline"
  {
    unknown ret[519123] "RVV" "temp"
    unknown call_tmp[664112] "maybe param" "maybe type" "temp"
    (664115 'move' call_tmp[664112](138644 call _dom _mt[243] a[138632]))
    const aDom[138647] "dead at end of block" "const" "insert auto destroy"
    (543196 'init var' aDom[138647] call_tmp[664112])
    (138650 'end of statement')
    unknown call_tmp[664119] "maybe param" "maybe type" "temp"
    (664122 'move' call_tmp[664119](138653 call _dom _mt[243] b[138640]))
    const bDom[138656] "dead at end of block" "const" "insert auto destroy"
    (543198 'init var' bDom[138656] call_tmp[664119])
    (138659 'end of statement')
    unknown call_tmp[664124] "expr temp" "maybe param" "maybe type" "temp"
    (664127 'move' call_tmp[664124](138662 call != aDom[138647] bDom[138656]))
    unknown call_tmp[664129] "expr temp" "maybe param" "maybe type" "temp"
    (664132 'move' call_tmp[664129](138667 call _cond_test call_tmp[664124]))
    if call_tmp[664129]
    {
      (519128 'move' ret[519123](519127 'deref' 0))
      gotoReturn _end_chpl__bulkTransferPtrArray[519121] _end_chpl__bulkTransferPtrArray[519121]
    }
    unknown call_tmp[664136] "expr temp" "maybe param" "maybe type" "temp"
    (664139 'move' call_tmp[664136](138692 call low _mt[243] aDom[138647]))
    unknown call_tmp[664141] "expr temp" "maybe param" "maybe type" "temp"
    (664144 'move' call_tmp[664141](138696 call a[138632] call_tmp[664136]))
    unknown call_tmp[664146] "expr temp" "maybe param" "maybe type" "temp"
    (664149 'move' call_tmp[664146](138697 'is wide pointer' call_tmp[664141]))
    unknown call_tmp[664151] "expr temp" "maybe param" "maybe type" "temp"
    (664154 'move' call_tmp[664151](138708 call _cond_test call_tmp[664146]))
    if call_tmp[664151]
    {
      unknown call_tmp[664156] "expr temp" "maybe param" "maybe type" "temp"
      (664159 'move' call_tmp[664156](138704 call chpl__bulkTransferArray a[138632] aDom[138647] b[138640] bDom[138656]))
      (519133 'move' ret[519123](519132 'deref' call_tmp[664156]))
      gotoReturn _end_chpl__bulkTransferPtrArray[519121] _end_chpl__bulkTransferPtrArray[519121]
      (480717 'end of statement' aDom[138647] bDom[138656])
    }
    (519138 'move' ret[519123](519137 'deref' 0))
    label _end_chpl__bulkTransferPtrArray[519121]
    (519125 return ret[519123])
  }
  function chpl__bulkTransferArray[138727](ref arg a[138724]:_array[133594](?), arg b[138734]:_array[133594](?)) : _unknown[51] "inline"
  {
    unknown ret[519142] "RVV" "temp"
    unknown call_tmp[664163] "expr temp" "maybe param" "maybe type" "temp"
    (664166 'move' call_tmp[664163](461548 call _dom _mt[243] a[138724]))
    unknown call_tmp[664170] "expr temp" "maybe param" "maybe type" "temp"
    (664173 'move' call_tmp[664170](461554 call _dom _mt[243] b[138734]))
    unknown call_tmp[664175] "expr temp" "maybe param" "maybe type" "temp"
    (664178 'move' call_tmp[664175](138743 call chpl__bulkTransferArray a[138724] call_tmp[664163] b[138734] call_tmp[664170]))
    (519147 'move' ret[519142](519146 'deref' call_tmp[664175]))
    (519144 return ret[519142])
  }
  function chpl__bulkTransferArray[138757](ref arg a[138754]:_array[133594](?), arg AD[138760]:_domain[125908](?), const  ref arg b[138766]:_array[133594](?), arg BD[138770]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[519151] "RVV" "temp"
    unknown call_tmp[664182] "expr temp" "maybe param" "maybe type" "temp"
    (664185 'move' call_tmp[664182](138775 call _value _mt[243] a[138754]))
    unknown call_tmp[664189] "expr temp" "maybe param" "maybe type" "temp"
    (664192 'move' call_tmp[664189](138781 call _value _mt[243] b[138766]))
    unknown call_tmp[664194] "expr temp" "maybe param" "maybe type" "temp"
    (664197 'move' call_tmp[664194](138785 call chpl__bulkTransferArray call_tmp[664182] AD[138760] call_tmp[664189] BD[138770]))
    (519156 'move' ret[519151](519155 'deref' call_tmp[664194]))
    (519153 return ret[519151])
  }
  function chpl__bulkTransferArray[138795](arg destClass[138793]:_any[178](?), arg destDom[138798]:_domain[125908](?), arg srcClass[138801]:_any[178](?), arg srcDom[138804]:_domain[125908](?)) : _unknown[51] "inline"
  {
    unknown ret[519162] "RVV" "temp"
    unknown success[138808] "dead at end of block" "insert auto destroy"
    (543200 'init var' success[138808] 0)
    (138811 'end of statement')
    function bulkTransferDebug[138819](arg msg[138816]:string[26]) : _unknown[51] "inline" "no return value for void"
    {
      unknown call_tmp[664199] "expr temp" "maybe param" "maybe type" "temp"
      (664202 'move' call_tmp[664199](138844 call _cond_test debugBulkTransfer[113723]))
      if call_tmp[664199]
      {
        (138842 call chpl_debug_writeln "proc =(a:[],b:[]): " msg[138816])
      }
      (519158 return _void[55])
    }
    (138871 call bulkTransferDebug "in chpl__bulkTransferArray")
    (480724 'end of statement')
    unknown call_tmp[664204] "expr temp" "maybe param" "maybe type" "temp"
    (664207 'move' call_tmp[664204](138899 call canResolveMethod module=[255] Reflection[224903] destClass[138793] "doiBulkTransferFromKnown" destDom[138798] srcClass[138801] srcDom[138804]))
    unknown call_tmp[664209] "expr temp" "maybe param" "maybe type" "temp"
    (664212 'move' call_tmp[664209](139135 call _cond_test call_tmp[664204]))
    if call_tmp[664209]
    {
      (138919 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (480725 'end of statement')
      unknown call_tmp[664216] "expr temp" "maybe param" "maybe type" "temp"
      (664219 'move' call_tmp[664216](138931 call(138924 call (partial) doiBulkTransferFromKnown _mt[243] destClass[138793]) destDom[138798] srcClass[138801] srcDom[138804]))
      (138932 call = success[138808] call_tmp[664216])
      (480726 'end of statement' success[138808])
    }
    {
      unknown call_tmp[664221] "expr temp" "maybe param" "maybe type" "temp"
      (664224 'move' call_tmp[664221](138961 call canResolveMethod module=[255] Reflection[224903] srcClass[138801] "doiBulkTransferToKnown" srcDom[138804] destClass[138793] destDom[138798]))
      unknown call_tmp[664226] "expr temp" "maybe param" "maybe type" "temp"
      (664229 'move' call_tmp[664226](139130 call _cond_test call_tmp[664221]))
      if call_tmp[664226]
      {
        (138981 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (480728 'end of statement')
        unknown call_tmp[664233] "expr temp" "maybe param" "maybe type" "temp"
        (664236 'move' call_tmp[664233](138993 call(138986 call (partial) doiBulkTransferToKnown _mt[243] srcClass[138801]) srcDom[138804] destClass[138793] destDom[138798]))
        (138994 call = success[138808] call_tmp[664233])
        (480729 'end of statement' success[138808])
      }
      {
        unknown call_tmp[664238] "expr temp" "maybe param" "maybe type" "temp"
        (664241 'move' call_tmp[664238](139023 call canResolveMethod module=[255] Reflection[224903] destClass[138793] "doiBulkTransferFromAny" destDom[138798] srcClass[138801] srcDom[138804]))
        unknown call_tmp[664243] "expr temp" "maybe param" "maybe type" "temp"
        (664246 'move' call_tmp[664243](139125 call _cond_test call_tmp[664238]))
        if call_tmp[664243]
        {
          (139043 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (480731 'end of statement')
          unknown call_tmp[664250] "expr temp" "maybe param" "maybe type" "temp"
          (664253 'move' call_tmp[664250](139055 call(139048 call (partial) doiBulkTransferFromAny _mt[243] destClass[138793]) destDom[138798] srcClass[138801] srcDom[138804]))
          (139056 call = success[138808] call_tmp[664250])
          (480732 'end of statement' success[138808])
        }
        {
          unknown call_tmp[664255] "expr temp" "maybe param" "maybe type" "temp"
          (664258 'move' call_tmp[664255](139085 call canResolveMethod module=[255] Reflection[224903] srcClass[138801] "doiBulkTransferToAny" srcDom[138804] destClass[138793] destDom[138798]))
          unknown call_tmp[664260] "expr temp" "maybe param" "maybe type" "temp"
          (664263 'move' call_tmp[664260](139121 call _cond_test call_tmp[664255]))
          if call_tmp[664260]
          {
            (139105 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (480734 'end of statement')
            unknown call_tmp[664267] "expr temp" "maybe param" "maybe type" "temp"
            (664270 'move' call_tmp[664267](139117 call(139110 call (partial) doiBulkTransferToAny _mt[243] srcClass[138801]) srcDom[138804] destClass[138793] destDom[138798]))
            (139118 call = success[138808] call_tmp[664267])
            (480735 'end of statement' success[138808])
          }
          (360267 'referenced modules list' Reflection[224903])
        }
        (360260 'referenced modules list' Reflection[224903])
      }
      (360253 'referenced modules list' Reflection[224903])
    }
    unknown call_tmp[664272] "expr temp" "maybe param" "maybe type" "temp"
    (664275 'move' call_tmp[664272](139183 call _cond_test success[138808]))
    if call_tmp[664272]
    {
      (139160 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (139181 call bulkTransferDebug "bulk transfer did not happen")
    }
    (519167 'move' ret[519162](519166 'deref' success[138808]))
    gotoReturn _end_chpl__bulkTransferArray[519160] _end_chpl__bulkTransferArray[519160]
    (480739 'end of statement' success[138808])
    label _end_chpl__bulkTransferArray[519160]
    (519164 return ret[519162])
    (360246 'referenced modules list' Reflection[224903])
  }
  function chpl__transferArray[139202](ref arg a[139199]:_array[133594](?), const  ref arg b[139204]:_any[178](?), param arg kind[139210] :
  assign[137997] =
  assign[137997]) : _unknown[51] "inline" "ignore transfer errors" "find user line" "no return value for void"
  {
    unknown tmp[426796] "maybe param" "temp"
    unknown call_tmp[664279] "expr temp" "maybe param" "maybe type" "temp"
    (664282 'move' call_tmp[664279](139220 call eltType _mt[243] a[139199]))
    unknown call_tmp[664284] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (664287 'move' call_tmp[664284](139224 'typeof' b[139204]))
    (426807 'move' tmp[426796](139225 call == call_tmp[664279] call_tmp[664284]))
    unknown call_tmp[664289] "expr temp" "maybe param" "maybe type" "temp"
    (664292 'move' call_tmp[664289](426809 call _cond_invalid tmp[426796]))
    if call_tmp[664289]
    {
      (426812 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568035] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568036] "maybe param" "temp"
    unknown call_tmp[664294] "expr temp" "maybe param" "maybe type" "temp"
    (664297 'move' call_tmp[664294](426797 call isTrue tmp[426796]))
    (568041 'move' tmp[568036](568039 call _cond_test call_tmp[664294]))
    if tmp[568036]
    {
      (568046 'move' tmp[568035](568043 '_paramFoldLogical' tmp[568036] 1))
    }
    {
      unknown tmp[426817] "maybe param" "temp"
      unknown call_tmp[664301] "expr temp" "maybe param" "maybe type" "temp"
      (664304 'move' call_tmp[664301](139229 call eltType _mt[243] a[139199]))
      (426828 'move' tmp[426817](139233 call _isPrimitiveType call_tmp[664301]))
      unknown call_tmp[664306] "expr temp" "maybe param" "maybe type" "temp"
      (664309 'move' call_tmp[664306](426830 call _cond_invalid tmp[426817]))
      if call_tmp[664306]
      {
        (426833 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[568008] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568009] "maybe param" "temp"
      unknown call_tmp[664311] "expr temp" "maybe param" "maybe type" "temp"
      (664314 'move' call_tmp[664311](426818 call isTrue tmp[426817]))
      (568014 'move' tmp[568009](568012 call _cond_test call_tmp[664311]))
      if tmp[568009]
      {
        unknown tmp[568016] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664316] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (664319 'move' call_tmp[664316](139236 'typeof' b[139204]))
        unknown call_tmp[664321] "expr temp" "maybe param" "maybe type" "temp"
        (664324 'move' call_tmp[664321](139238 call _isPrimitiveType call_tmp[664316]))
        (568018 'move' tmp[568016](426821 call isTrue call_tmp[664321]))
        (568023 'move' tmp[568008](568020 '_paramFoldLogical' tmp[568009] tmp[568016]))
      }
      {
        (568028 'move' tmp[568008](568025 '_paramFoldLogical' tmp[568009] 0))
      }
      unknown tmp[568048] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568050 'move' tmp[568048](426801 call isTrue tmp[568008]))
      (568055 'move' tmp[568035](568052 '_paramFoldLogical' tmp[568036] tmp[568048]))
    }
    unknown call_tmp[664326] "expr temp" "maybe param" "maybe type" "temp"
    (664329 'move' call_tmp[664326](140133 call _cond_test tmp[568035]))
    if call_tmp[664326]
    {
      unknown tmp[426775] "maybe param" "temp"
      (426786 'move' tmp[426775](139248 call == kind[139210] move[137993]))
      unknown call_tmp[664331] "expr temp" "maybe param" "maybe type" "temp"
      (664334 'move' call_tmp[664331](426788 call _cond_invalid tmp[426775]))
      if call_tmp[664331]
      {
        (426791 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[568062] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568063] "maybe param" "temp"
      unknown call_tmp[664336] "expr temp" "maybe param" "maybe type" "temp"
      (664339 'move' call_tmp[664336](426776 call isTrue tmp[426775]))
      (568068 'move' tmp[568063](568066 call _cond_test call_tmp[664336]))
      if tmp[568063]
      {
        (568073 'move' tmp[568062](568070 '_paramFoldLogical' tmp[568063] 1))
      }
      {
        unknown tmp[568075] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664341] "expr temp" "maybe param" "maybe type" "temp"
        (664344 'move' call_tmp[664341](139255 call == kind[139210] initCopy[137995]))
        (568077 'move' tmp[568075](426780 call isTrue call_tmp[664341]))
        (568082 'move' tmp[568062](568079 '_paramFoldLogical' tmp[568063] tmp[568075]))
      }
      unknown call_tmp[664346] "expr temp" "maybe param" "maybe type" "temp"
      (664349 'move' call_tmp[664346](139373 call _cond_test tmp[568062]))
      if call_tmp[664346]
      {
        unknown call_tmp[664353] "expr temp" "maybe param" "maybe type" "temp"
        (664356 'move' call_tmp[664353](139261 call eltType _mt[243] a[139199]))
        unknown call_tmp[664358] "expr temp" "maybe param" "maybe type" "temp"
        (664361 'move' call_tmp[664358](139265 call needsInitWorkaround call_tmp[664353]))
        unknown call_tmp[664363] "expr temp" "maybe param" "maybe type" "temp"
        (664366 'move' call_tmp[664363](139337 call _cond_test call_tmp[664358]))
        if call_tmp[664363]
        {
          unknown call_tmp[664370] "expr temp" "maybe param" "maybe type" "temp"
          (664373 'move' call_tmp[664370](415782 call _dom _mt[243] a[139199]))
          unknown call_tmp[664375] "maybe param" "maybe type" "temp"
          (664378 'move' call_tmp[664375](415778 call chpl__staticAutoLocalCheck a[139199] call_tmp[664370]))
          unknown chpl__staticAutoLocalCheckSym[415777] "dead at end of block" "param"
          (543202 'init var' chpl__staticAutoLocalCheckSym[415777] call_tmp[664375])
          (480743 'end of statement')
          if chpl__staticAutoLocalCheckSym[415777]
          {
            unknown call_tmp[664382] "expr temp" "maybe param" "maybe type" "temp"
            (664385 'move' call_tmp[664382](139268 call _dom _mt[243] a[139199]))
            Forall {
              induction variables:
                
                unknown ai[139302] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664382]
              shadow variables:
                b[139272] 'in' intent outer var b[139204]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[139281] "dead at end of block" "ref var"
                unknown call_tmp[664387] "expr temp" "maybe param" "maybe type" "temp"
                (664390 'move' call_tmp[664387](415788 'may be local access' a[139199] ai[139302] chpl__staticAutoLocalCheckSym[415777] 1))
                (543205 'move' aa[139281](543204 'addr of' call_tmp[664387]))
                (139284 'end of statement')
                unknown call_tmp[664394] "maybe param" "maybe type" "temp"
                (664397 'move' call_tmp[664394](139287 call eltType _mt[243] a[139199]))
                unknown copy[139291] "dead at end of block" "no auto destroy"
                (543207 'init var' copy[139291] b[139272] call_tmp[664394])
                (139294 'end of statement' ai[139302] b[139272])
                (139299 '=' aa[139281] copy[139291])
                (480746 'end of statement' aa[139281] copy[139291])
              }
            }
          }
          {
            unknown call_tmp[664401] "expr temp" "maybe param" "maybe type" "temp"
            (664404 'move' call_tmp[664401](415767 call _dom _mt[243] a[139199]))
            Forall {
              induction variables:
                
                unknown ai[415764] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664401]
              shadow variables:
                b[415771] 'in' intent outer var b[139204]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[415746] "dead at end of block" "ref var"
                unknown call_tmp[664406] "expr temp" "maybe param" "maybe type" "temp"
                (664409 'move' call_tmp[664406](415748 call a[139199] ai[415764]))
                (543210 'move' aa[415746](543209 'addr of' call_tmp[664406]))
                (415751 'end of statement')
                unknown call_tmp[664413] "maybe param" "maybe type" "temp"
                (664416 'move' call_tmp[664413](415755 call eltType _mt[243] a[139199]))
                unknown copy[415752] "dead at end of block" "no auto destroy"
                (543212 'init var' copy[415752] b[415771] call_tmp[664413])
                (415759 'end of statement' ai[415764] b[415771])
                (415760 '=' aa[415746] copy[415752])
                (480751 'end of statement' aa[415746] copy[415752])
              }
            }
          }
        }
        {
          Forall {
            induction variables:
              
              unknown aa[139332] "index var" "insert auto destroy"
            iterated expressions:
              a[139199]
            shadow variables:
              b[139310] 'in' intent outer var b[139204]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown call_tmp[664420] "maybe param" "maybe type" "temp"
              (664423 'move' call_tmp[664420](139316 call eltType _mt[243] a[139199]))
              unknown copy[139320] "dead at end of block" "no auto destroy"
              (543214 'init var' copy[139320] b[139310] call_tmp[664420])
              (139323 'end of statement' b[139310])
              (139329 '=' aa[139332] copy[139320])
              (480755 'end of statement' aa[139332] copy[139320])
            }
          }
        }
      }
      {
        unknown call_tmp[664425] "expr temp" "maybe param" "maybe type" "temp"
        (664428 'move' call_tmp[664425](139347 call == kind[139210] assign[137997]))
        unknown call_tmp[664430] "expr temp" "maybe param" "maybe type" "temp"
        (664433 'move' call_tmp[664430](139369 call _cond_test call_tmp[664425]))
        if call_tmp[664430]
        {
          Forall {
            induction variables:
              
              unknown aa[139364] "index var" "insert auto destroy"
            iterated expressions:
              a[139199]
            shadow variables:
              b[139352] 'in' intent outer var b[139204]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              (139359 call = aa[139364] b[139352])
              (480758 'end of statement' aa[139364] b[139352])
            }
          }
        }
      }
    }
    {
      unknown call_tmp[664435] "expr temp" "maybe param" "maybe type" "temp"
      (664438 'move' call_tmp[664435](139383 call chpl__serializeAssignment a[139199] b[139204]))
      unknown call_tmp[664440] "expr temp" "maybe param" "maybe type" "temp"
      (664443 'move' call_tmp[664440](140129 call _cond_test call_tmp[664435]))
      if call_tmp[664440]
      {
        unknown call_tmp[664445] "expr temp" "maybe param" "maybe type" "temp"
        (664448 'move' call_tmp[664445](139389 call == kind[139210] move[137993]))
        unknown call_tmp[664450] "expr temp" "maybe param" "maybe type" "temp"
        (664453 'move' call_tmp[664450](139870 call _cond_test call_tmp[664445]))
        if call_tmp[664450]
        {
          unknown call_tmp[664457] "expr temp" "maybe param" "maybe type" "temp"
          (664460 'move' call_tmp[664457](139393 call eltType _mt[243] a[139199]))
          unknown call_tmp[664462] "expr temp" "maybe param" "maybe type" "temp"
          (664465 'move' call_tmp[664462](139397 call needsInitWorkaround call_tmp[664457]))
          unknown call_tmp[664467] "expr temp" "maybe param" "maybe type" "temp"
          (664470 'move' call_tmp[664467](139591 call _cond_test call_tmp[664462]))
          if call_tmp[664467]
          {
            {
              unknown _indexOfInterest[139453] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139454] "expr temp" "temp"
              unknown call_tmp[664474] "expr temp" "maybe param" "maybe type" "temp"
              (664477 'move' call_tmp[664474](139463 call _dom _mt[243] a[139199]))
              unknown call_tmp[664479] "expr temp" "maybe param" "maybe type" "temp"
              (664482 'move' call_tmp[664479](139466 call _getIterator call_tmp[664474]))
              unknown call_tmp[664484] "expr temp" "maybe param" "maybe type" "temp"
              (664487 'move' call_tmp[664484](139470 call _getIterator b[139204]))
              (139472 'move' _iterator[139454](139409 call _build_tuple call_tmp[664479] call_tmp[664484]))
              Defer
              {
                {
                  (139502 call _freeIterator _iterator[139454])
                }
              }
              { scopeless type
                (139477 'move' _indexOfInterest[139453](139474 call iteratorIndex _iterator[139454]))
              }
              ForLoop[139455]
              {
                (139482 call _check_tuple_var_decl _indexOfInterest[139453] 2)
                (480762 'end of statement')
                unknown ai[139488] "index var" "insert auto destroy"
                (480763 'end of statement')
                (139490 'move' ai[139488](139486 call _indexOfInterest[139453] 0))
                (480764 'end of statement' ai[139488])
                unknown bb[139495] "index var" "insert auto destroy"
                (480766 'end of statement')
                (139497 'move' bb[139495](139493 call _indexOfInterest[139453] 1))
                (480767 'end of statement' bb[139495])
                {
                  unknown aa[139414] "dead at end of block" "ref var"
                  unknown call_tmp[664489] "expr temp" "maybe param" "maybe type" "temp"
                  (664492 'move' call_tmp[664489](139413 call a[139199] ai[139488]))
                  (543217 'move' aa[139414](543216 'addr of' call_tmp[664489]))
                  (139417 'end of statement' ai[139488])
                  unknown call_tmp[664494] "expr temp" "maybe param" "maybe type" "temp"
                  (664497 'move' call_tmp[664494](139441 'steal' bb[139495]))
                  (139442 '=' aa[139414] call_tmp[664494])
                  (480770 'end of statement' aa[139414] bb[139495])
                  unknown call_tmp[664501] "expr temp" "maybe param" "maybe type" "temp"
                  (664504 'move' call_tmp[664501](139446 call eltType _mt[243] a[139199]))
                  (139451 call fixRuntimeType call_tmp[664501] aa[139414])
                  (480773 'end of statement' aa[139414])
                }
                label _continueLabel[139458]
                _indexOfInterest[139453]
                _iterator[139454]
              }
              label _breakLabel[139459]
            }
          }
          {
            {
              unknown _indexOfInterest[139538] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139539] "expr temp" "temp"
              unknown call_tmp[664506] "expr temp" "maybe param" "maybe type" "temp"
              (664509 'move' call_tmp[664506](139548 call _getIterator a[139199]))
              unknown call_tmp[664511] "expr temp" "maybe param" "maybe type" "temp"
              (664514 'move' call_tmp[664511](139551 call _getIterator b[139204]))
              (139553 'move' _iterator[139539](139518 call _build_tuple call_tmp[664506] call_tmp[664511]))
              Defer
              {
                {
                  (139583 call _freeIterator _iterator[139539])
                }
              }
              { scopeless type
                (139558 'move' _indexOfInterest[139538](139555 call iteratorIndex _iterator[139539]))
              }
              ForLoop[139540]
              {
                (139563 call _check_tuple_var_decl _indexOfInterest[139538] 2)
                (480776 'end of statement')
                unknown aa[139569] "index var" "insert auto destroy"
                (480777 'end of statement')
                (139571 'move' aa[139569](139567 call _indexOfInterest[139538] 0))
                (480778 'end of statement' aa[139569])
                unknown bb[139576] "index var" "insert auto destroy"
                (480780 'end of statement')
                (139578 'move' bb[139576](139574 call _indexOfInterest[139538] 1))
                (480781 'end of statement' bb[139576])
                {
                  unknown call_tmp[664516] "expr temp" "maybe param" "maybe type" "temp"
                  (664519 'move' call_tmp[664516](139525 'steal' bb[139576]))
                  (139526 '=' aa[139569] call_tmp[664516])
                  (480783 'end of statement' aa[139569] bb[139576])
                  unknown call_tmp[664523] "expr temp" "maybe param" "maybe type" "temp"
                  (664526 'move' call_tmp[664523](139531 call eltType _mt[243] a[139199]))
                  (139536 call fixRuntimeType call_tmp[664523] aa[139569])
                  (480786 'end of statement' aa[139569])
                }
                label _continueLabel[139543]
                _indexOfInterest[139538]
                _iterator[139539]
              }
              label _breakLabel[139544]
            }
          }
        }
        {
          unknown call_tmp[664528] "expr temp" "maybe param" "maybe type" "temp"
          (664531 'move' call_tmp[664528](139601 call == kind[139210] initCopy[137995]))
          unknown call_tmp[664533] "expr temp" "maybe param" "maybe type" "temp"
          (664536 'move' call_tmp[664533](139865 call _cond_test call_tmp[664528]))
          if call_tmp[664533]
          {
            unknown call_tmp[664540] "expr temp" "maybe param" "maybe type" "temp"
            (664543 'move' call_tmp[664540](139605 call eltType _mt[243] a[139199]))
            unknown call_tmp[664545] "expr temp" "maybe param" "maybe type" "temp"
            (664548 'move' call_tmp[664545](139609 call needsInitWorkaround call_tmp[664540]))
            unknown call_tmp[664550] "expr temp" "maybe param" "maybe type" "temp"
            (664553 'move' call_tmp[664550](139781 call _cond_test call_tmp[664545]))
            if call_tmp[664550]
            {
              {
                unknown _indexOfInterest[139646] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139647] "expr temp" "temp"
                unknown call_tmp[664557] "expr temp" "maybe param" "maybe type" "temp"
                (664560 'move' call_tmp[664557](139656 call _dom _mt[243] a[139199]))
                unknown call_tmp[664562] "expr temp" "maybe param" "maybe type" "temp"
                (664565 'move' call_tmp[664562](139659 call _getIterator call_tmp[664557]))
                unknown call_tmp[664567] "expr temp" "maybe param" "maybe type" "temp"
                (664570 'move' call_tmp[664567](139663 call _getIterator b[139204]))
                (139665 'move' _iterator[139647](139621 call _build_tuple call_tmp[664562] call_tmp[664567]))
                Defer
                {
                  {
                    (139695 call _freeIterator _iterator[139647])
                  }
                }
                { scopeless type
                  (139670 'move' _indexOfInterest[139646](139667 call iteratorIndex _iterator[139647]))
                }
                ForLoop[139648]
                {
                  (139675 call _check_tuple_var_decl _indexOfInterest[139646] 2)
                  (480789 'end of statement')
                  unknown ai[139681] "index var" "insert auto destroy"
                  (480790 'end of statement')
                  (139683 'move' ai[139681](139679 call _indexOfInterest[139646] 0))
                  (480791 'end of statement' ai[139681])
                  unknown bb[139688] "index var" "insert auto destroy"
                  (480793 'end of statement')
                  (139690 'move' bb[139688](139686 call _indexOfInterest[139646] 1))
                  (480794 'end of statement' bb[139688])
                  {
                    unknown aa[139626] "dead at end of block" "ref var"
                    unknown call_tmp[664572] "expr temp" "maybe param" "maybe type" "temp"
                    (664575 'move' call_tmp[664572](139625 call a[139199] ai[139681]))
                    (543220 'move' aa[139626](543219 'addr of' call_tmp[664572]))
                    (139629 'end of statement')
                    unknown call_tmp[664579] "maybe param" "maybe type" "temp"
                    (664582 'move' call_tmp[664579](139632 call eltType _mt[243] a[139199]))
                    unknown copy[139636] "dead at end of block" "no auto destroy"
                    (543222 'init var' copy[139636] b[139204] call_tmp[664579])
                    (139639 'end of statement' ai[139681])
                    (139644 '=' aa[139626] copy[139636])
                    (480797 'end of statement' aa[139626] copy[139636])
                  }
                  label _continueLabel[139651]
                  _indexOfInterest[139646]
                  _iterator[139647]
                }
                label _breakLabel[139652]
              }
            }
            {
              {
                unknown _indexOfInterest[139728] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139729] "expr temp" "temp"
                unknown call_tmp[664584] "expr temp" "maybe param" "maybe type" "temp"
                (664587 'move' call_tmp[664584](139738 call _getIterator a[139199]))
                unknown call_tmp[664589] "expr temp" "maybe param" "maybe type" "temp"
                (664592 'move' call_tmp[664589](139741 call _getIterator b[139204]))
                (139743 'move' _iterator[139729](139711 call _build_tuple call_tmp[664584] call_tmp[664589]))
                Defer
                {
                  {
                    (139773 call _freeIterator _iterator[139729])
                  }
                }
                { scopeless type
                  (139748 'move' _indexOfInterest[139728](139745 call iteratorIndex _iterator[139729]))
                }
                ForLoop[139730]
                {
                  (139753 call _check_tuple_var_decl _indexOfInterest[139728] 2)
                  (480801 'end of statement')
                  unknown aa[139759] "index var" "insert auto destroy"
                  (480802 'end of statement')
                  (139761 'move' aa[139759](139757 call _indexOfInterest[139728] 0))
                  (480803 'end of statement' aa[139759])
                  unknown bb[139766] "index var" "insert auto destroy"
                  (480805 'end of statement')
                  (139768 'move' bb[139766](139764 call _indexOfInterest[139728] 1))
                  (480806 'end of statement' bb[139766])
                  {
                    unknown call_tmp[664596] "maybe param" "maybe type" "temp"
                    (664599 'move' call_tmp[664596](139713 call eltType _mt[243] a[139199]))
                    unknown copy[139717] "dead at end of block" "no auto destroy"
                    (543224 'init var' copy[139717] b[139204] call_tmp[664596])
                    (139720 'end of statement')
                    (139726 '=' aa[139759] copy[139717])
                    (480808 'end of statement' aa[139759] copy[139717])
                  }
                  label _continueLabel[139733]
                  _indexOfInterest[139728]
                  _iterator[139729]
                }
                label _breakLabel[139734]
              }
            }
          }
          {
            unknown call_tmp[664601] "expr temp" "maybe param" "maybe type" "temp"
            (664604 'move' call_tmp[664601](139791 call == kind[139210] assign[137997]))
            unknown call_tmp[664606] "expr temp" "maybe param" "maybe type" "temp"
            (664609 'move' call_tmp[664606](139861 call _cond_test call_tmp[664601]))
            if call_tmp[664606]
            {
              {
                unknown _indexOfInterest[139808] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139809] "expr temp" "temp"
                unknown call_tmp[664611] "expr temp" "maybe param" "maybe type" "temp"
                (664614 'move' call_tmp[664611](139818 call _getIterator a[139199]))
                unknown call_tmp[664616] "expr temp" "maybe param" "maybe type" "temp"
                (664619 'move' call_tmp[664616](139821 call _getIterator b[139204]))
                (139823 'move' _iterator[139809](139801 call _build_tuple call_tmp[664611] call_tmp[664616]))
                Defer
                {
                  {
                    (139853 call _freeIterator _iterator[139809])
                  }
                }
                { scopeless type
                  (139828 'move' _indexOfInterest[139808](139825 call iteratorIndex _iterator[139809]))
                }
                ForLoop[139810]
                {
                  (139833 call _check_tuple_var_decl _indexOfInterest[139808] 2)
                  (480812 'end of statement')
                  unknown aa[139839] "index var" "insert auto destroy"
                  (480813 'end of statement')
                  (139841 'move' aa[139839](139837 call _indexOfInterest[139808] 0))
                  (480814 'end of statement' aa[139839])
                  unknown bb[139846] "index var" "insert auto destroy"
                  (480816 'end of statement')
                  (139848 'move' bb[139846](139844 call _indexOfInterest[139808] 1))
                  (480817 'end of statement' bb[139846])
                  {
                    (139804 call = aa[139839] bb[139846])
                    (480819 'end of statement' aa[139839] bb[139846])
                  }
                  label _continueLabel[139813]
                  _indexOfInterest[139808]
                  _iterator[139809]
                }
                label _breakLabel[139814]
              }
            }
          }
        }
      }
      {
        unknown call_tmp[664621] "expr temp" "maybe param" "maybe type" "temp"
        (664624 'move' call_tmp[664621](139881 call == kind[139210] move[137993]))
        unknown call_tmp[664626] "expr temp" "maybe param" "maybe type" "temp"
        (664629 'move' call_tmp[664626](140123 call _cond_test call_tmp[664621]))
        if call_tmp[664626]
        {
          unknown call_tmp[664633] "expr temp" "maybe param" "maybe type" "temp"
          (664636 'move' call_tmp[664633](139885 call eltType _mt[243] a[139199]))
          unknown call_tmp[664638] "expr temp" "maybe param" "maybe type" "temp"
          (664641 'move' call_tmp[664638](139889 call needsInitWorkaround call_tmp[664633]))
          unknown call_tmp[664643] "expr temp" "maybe param" "maybe type" "temp"
          (664646 'move' call_tmp[664643](139977 call _cond_test call_tmp[664638]))
          if call_tmp[664643]
          {
            unknown call_tmp[664650] "expr temp" "maybe param" "maybe type" "temp"
            (664653 'move' call_tmp[664650](415829 call _dom _mt[243] a[139199]))
            unknown call_tmp[664655] "maybe param" "maybe type" "temp"
            (664658 'move' call_tmp[664655](415825 call chpl__staticAutoLocalCheck a[139199] call_tmp[664650]))
            unknown chpl__staticAutoLocalCheckSym[415824] "dead at end of block" "param"
            (543226 'init var' chpl__staticAutoLocalCheckSym[415824] call_tmp[664655])
            (480822 'end of statement')
            if chpl__staticAutoLocalCheckSym[415824]
            {
              unknown call_tmp[664662] "expr temp" "maybe param" "maybe type" "temp"
              (664665 'move' call_tmp[664662](139897 call _dom _mt[243] a[139199]))
              Forall {
                induction variables:
                  
                  unknown ai[139932] "index var" "insert auto destroy"
                  
                  unknown bb[139934] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664662]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[139907] "dead at end of block" "ref var"
                    unknown call_tmp[664667] "expr temp" "maybe param" "maybe type" "temp"
                    (664670 'move' call_tmp[664667](415835 'may be local access' a[139199] ai[139932] chpl__staticAutoLocalCheckSym[415824] 1))
                    (543229 'move' aa[139907](543228 'addr of' call_tmp[664667]))
                    (139910 'end of statement' ai[139932])
                    unknown call_tmp[664672] "expr temp" "maybe param" "maybe type" "temp"
                    (664675 'move' call_tmp[664672](139918 'steal' bb[139934]))
                    (139919 '=' aa[139907] call_tmp[664672])
                    (480824 'end of statement' aa[139907] bb[139934])
                    unknown call_tmp[664679] "expr temp" "maybe param" "maybe type" "temp"
                    (664682 'move' call_tmp[664679](139923 call eltType _mt[243] a[139199]))
                    (139928 call fixRuntimeType call_tmp[664679] aa[139907])
                    (480827 'end of statement' aa[139907])
                  }
                }
              }
            }
            {
              unknown call_tmp[664686] "expr temp" "maybe param" "maybe type" "temp"
              (664689 'move' call_tmp[664686](415820 call _dom _mt[243] a[139199]))
              Forall {
                induction variables:
                  
                  unknown ai[415815] "index var" "insert auto destroy"
                  
                  unknown bb[415817] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664686]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[415797] "dead at end of block" "ref var"
                    unknown call_tmp[664691] "expr temp" "maybe param" "maybe type" "temp"
                    (664694 'move' call_tmp[664691](415799 call a[139199] ai[415815]))
                    (543232 'move' aa[415797](543231 'addr of' call_tmp[664691]))
                    (415802 'end of statement' ai[415815])
                    unknown call_tmp[664696] "expr temp" "maybe param" "maybe type" "temp"
                    (664699 'move' call_tmp[664696](415805 'steal' bb[415817]))
                    (415803 '=' aa[415797] call_tmp[664696])
                    (480830 'end of statement' aa[415797] bb[415817])
                    unknown call_tmp[664703] "expr temp" "maybe param" "maybe type" "temp"
                    (664706 'move' call_tmp[664703](415810 call eltType _mt[243] a[139199]))
                    (415808 call fixRuntimeType call_tmp[664703] aa[415797])
                    (480833 'end of statement' aa[415797])
                  }
                }
              }
            }
          }
          {
            Forall {
              induction variables:
                
                unknown aa[139970] "index var" "insert auto destroy"
                
                unknown bb[139972] "index var" "insert auto destroy"
              iterated expressions:
                a[139199]
                b[139204]
              shadow variables:
              other variables
                forall body
              {
                {
                  unknown call_tmp[664708] "expr temp" "maybe param" "maybe type" "temp"
                  (664711 'move' call_tmp[664708](139955 'steal' bb[139972]))
                  (139956 '=' aa[139970] call_tmp[664708])
                  (480835 'end of statement' aa[139970] bb[139972])
                  unknown call_tmp[664715] "expr temp" "maybe param" "maybe type" "temp"
                  (664718 'move' call_tmp[664715](139961 call eltType _mt[243] a[139199]))
                  (139966 call fixRuntimeType call_tmp[664715] aa[139970])
                  (480838 'end of statement' aa[139970])
                }
              }
            }
          }
        }
        {
          unknown call_tmp[664720] "expr temp" "maybe param" "maybe type" "temp"
          (664723 'move' call_tmp[664720](139987 call == kind[139210] initCopy[137995]))
          unknown call_tmp[664725] "expr temp" "maybe param" "maybe type" "temp"
          (664728 'move' call_tmp[664725](140118 call _cond_test call_tmp[664720]))
          if call_tmp[664725]
          {
            unknown call_tmp[664732] "expr temp" "maybe param" "maybe type" "temp"
            (664735 'move' call_tmp[664732](139991 call eltType _mt[243] a[139199]))
            unknown call_tmp[664737] "expr temp" "maybe param" "maybe type" "temp"
            (664740 'move' call_tmp[664737](139995 call needsInitWorkaround call_tmp[664732]))
            unknown call_tmp[664742] "expr temp" "maybe param" "maybe type" "temp"
            (664745 'move' call_tmp[664742](140077 call _cond_test call_tmp[664737]))
            if call_tmp[664742]
            {
              unknown call_tmp[664749] "expr temp" "maybe param" "maybe type" "temp"
              (664752 'move' call_tmp[664749](415876 call _dom _mt[243] a[139199]))
              unknown call_tmp[664754] "maybe param" "maybe type" "temp"
              (664757 'move' call_tmp[664754](415872 call chpl__staticAutoLocalCheck a[139199] call_tmp[664749]))
              unknown chpl__staticAutoLocalCheckSym[415871] "dead at end of block" "param"
              (543234 'init var' chpl__staticAutoLocalCheckSym[415871] call_tmp[664754])
              (480840 'end of statement')
              if chpl__staticAutoLocalCheckSym[415871]
              {
                unknown call_tmp[664761] "expr temp" "maybe param" "maybe type" "temp"
                (664764 'move' call_tmp[664761](140003 call _dom _mt[243] a[139199]))
                Forall {
                  induction variables:
                    
                    unknown ai[140035] "index var" "insert auto destroy"
                    
                    unknown bb[140037] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664761]
                    b[139204]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[140013] "dead at end of block" "ref var"
                      unknown call_tmp[664766] "expr temp" "maybe param" "maybe type" "temp"
                      (664769 'move' call_tmp[664766](415882 'may be local access' a[139199] ai[140035] chpl__staticAutoLocalCheckSym[415871] 1))
                      (543237 'move' aa[140013](543236 'addr of' call_tmp[664766]))
                      (140016 'end of statement')
                      unknown call_tmp[664773] "maybe param" "maybe type" "temp"
                      (664776 'move' call_tmp[664773](140019 call eltType _mt[243] a[139199]))
                      unknown copy[140023] "dead at end of block" "no auto destroy"
                      (543239 'init var' copy[140023] bb[140037] call_tmp[664773])
                      (140026 'end of statement' ai[140035] bb[140037])
                      (140031 '=' aa[140013] copy[140023])
                      (480843 'end of statement' aa[140013] copy[140023])
                    }
                  }
                }
              }
              {
                unknown call_tmp[664780] "expr temp" "maybe param" "maybe type" "temp"
                (664783 'move' call_tmp[664780](415867 call _dom _mt[243] a[139199]))
                Forall {
                  induction variables:
                    
                    unknown ai[415862] "index var" "insert auto destroy"
                    
                    unknown bb[415864] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664780]
                    b[139204]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[415844] "dead at end of block" "ref var"
                      unknown call_tmp[664785] "expr temp" "maybe param" "maybe type" "temp"
                      (664788 'move' call_tmp[664785](415846 call a[139199] ai[415862]))
                      (543242 'move' aa[415844](543241 'addr of' call_tmp[664785]))
                      (415849 'end of statement')
                      unknown call_tmp[664792] "maybe param" "maybe type" "temp"
                      (664795 'move' call_tmp[664792](415853 call eltType _mt[243] a[139199]))
                      unknown copy[415850] "dead at end of block" "no auto destroy"
                      (543244 'init var' copy[415850] bb[415864] call_tmp[664792])
                      (415857 'end of statement' ai[415862] bb[415864])
                      (415858 '=' aa[415844] copy[415850])
                      (480848 'end of statement' aa[415844] copy[415850])
                    }
                  }
                }
              }
            }
            {
              Forall {
                induction variables:
                  
                  unknown aa[140070] "index var" "insert auto destroy"
                  
                  unknown bb[140072] "index var" "insert auto destroy"
                iterated expressions:
                  a[139199]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown call_tmp[664799] "maybe param" "maybe type" "temp"
                    (664802 'move' call_tmp[664799](140053 call eltType _mt[243] a[139199]))
                    unknown copy[140057] "dead at end of block" "no auto destroy"
                    (543246 'init var' copy[140057] bb[140072] call_tmp[664799])
                    (140060 'end of statement' bb[140072])
                    (140066 '=' aa[140070] copy[140057])
                    (480852 'end of statement' aa[140070] copy[140057])
                  }
                }
              }
            }
          }
          {
            unknown call_tmp[664804] "expr temp" "maybe param" "maybe type" "temp"
            (664807 'move' call_tmp[664804](140087 call == kind[139210] assign[137997]))
            unknown call_tmp[664809] "expr temp" "maybe param" "maybe type" "temp"
            (664812 'move' call_tmp[664809](140114 call _cond_test call_tmp[664804]))
            if call_tmp[664809]
            {
              Forall {
                induction variables:
                  
                  unknown aa[140107] "index var" "insert auto destroy"
                  
                  unknown bb[140109] "index var" "insert auto destroy"
                iterated expressions:
                  a[139199]
                  b[139204]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    (140101 call = aa[140107] bb[140109])
                    (480855 'end of statement' aa[140107] bb[140109])
                  }
                }
              }
            }
          }
        }
      }
    }
    (519171 return _void[55])
  }
  {
    (139217 call <=(139214 'lifetime_of' a[139199])(139216 'lifetime_of' b[139204]))
  }
  function chpl__transferArray[140150](ref arg a[140147]:_array[133594](?), param arg b[140152]:_any[178](?), param arg kind[140158] :
  assign[137997] =
  assign[137997]) : _unknown[51] "inline" "find user line" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown aa[140169] "index var" "insert auto destroy"
      iterated expressions:
        a[140147]
      shadow variables:
      other variables
        forall body
      {
        (140165 call = aa[140169] b[140152])
        (480858 'end of statement' aa[140169])
      }
    }
    (519173 return _void[55])
  }
  function =[140184](ref arg a[140181]:_array[133594](?), arg b[140187]:_domain[125908](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664816] "expr temp" "maybe param" "maybe type" "temp"
    (664819 'move' call_tmp[664816](140191 call rank _mt[243] a[140181]))
    unknown call_tmp[664823] "expr temp" "maybe param" "maybe type" "temp"
    (664826 'move' call_tmp[664823](140195 call rank _mt[243] b[140187]))
    unknown call_tmp[664828] "expr temp" "maybe param" "maybe type" "temp"
    (664831 'move' call_tmp[664828](140198 call != call_tmp[664816] call_tmp[664823]))
    unknown call_tmp[664833] "expr temp" "maybe param" "maybe type" "temp"
    (664836 'move' call_tmp[664833](140205 call _cond_test call_tmp[664828]))
    if call_tmp[664833]
    {
      (140203 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[426838] "maybe param" "temp"
    (426849 'move' tmp[426838](140214 call isAssociativeDom b[140187]))
    unknown call_tmp[664838] "expr temp" "maybe param" "maybe type" "temp"
    (664841 'move' call_tmp[664838](426851 call _cond_invalid tmp[426838]))
    if call_tmp[664838]
    {
      (426854 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568089] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568090] "maybe param" "temp"
    unknown call_tmp[664843] "expr temp" "maybe param" "maybe type" "temp"
    (664846 'move' call_tmp[664843](426839 call isTrue tmp[426838]))
    (568095 'move' tmp[568090](568093 call _cond_test call_tmp[664843]))
    if tmp[568090]
    {
      unknown tmp[568097] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[664848] "expr temp" "maybe param" "maybe type" "temp"
      (664851 'move' call_tmp[664848](140218 call isRectangularArr a[140181]))
      (568099 'move' tmp[568097](426842 call isTrue call_tmp[664848]))
      (568104 'move' tmp[568089](568101 '_paramFoldLogical' tmp[568090] tmp[568097]))
    }
    {
      (568109 'move' tmp[568089](568106 '_paramFoldLogical' tmp[568090] 0))
    }
    unknown call_tmp[664853] "expr temp" "maybe param" "maybe type" "temp"
    (664856 'move' call_tmp[664853](140242 call _cond_test tmp[568089]))
    if call_tmp[664853]
    {
      (140240 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    (140251 call chpl__transferArray a[140181] b[140187])
    (519175 return _void[55])
  }
  function =[140263](arg a[140260]:_array[133594](?), arg b[140269]:range[64319](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664860] "expr temp" "maybe param" "maybe type" "temp"
    (664863 'move' call_tmp[664860](140273 call rank _mt[243] a[140260]))
    unknown call_tmp[664865] "expr temp" "maybe param" "maybe type" "temp"
    (664868 'move' call_tmp[664865](140277 call == call_tmp[664860] 1))
    unknown call_tmp[664870] "expr temp" "maybe param" "maybe type" "temp"
    (664873 'move' call_tmp[664870](140306 call _cond_test call_tmp[664865]))
    if call_tmp[664870]
    {
      (140283 call chpl__transferArray a[140260] b[140269])
    }
    {
      (140304 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (519177 return _void[55])
  }
  function =[140323](ref arg a[140320]:_array[133594](?), arg b[140325]:_any[178](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    (140331 call chpl__transferArray a[140320] b[140325])
    (519179 return _void[55])
  }
  function helpInitArrFromTuple[140340](ref arg j[140338]:_any[178](?), param arg rank[140343]:int(64)[13], ref arg a[140349]:_array[133594](?), arg b[140353]:_tuple[56202](?), param arg kind[140357]:_tElt[137999]) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[664877] "expr temp" "maybe param" "maybe type" "temp"
    (664880 'move' call_tmp[664877](140367 call _dom _mt[243] a[140349]))
    unknown idxType[140386] "dead at end of block" "insert auto destroy" "type variable"(140370 call idxType _mt[243] call_tmp[664877])
    unknown call_tmp[664886] "expr temp" "maybe param" "maybe type" "temp"
    (664889 'move' call_tmp[664886](543251 call _dom _mt[243] a[140349]))
    (543255 'move' idxType[140386](543249 call idxType _mt[243] call_tmp[664886]))
    unknown call_tmp[664895] "expr temp" "maybe param" "maybe type" "temp"
    (664898 'move' call_tmp[664895](140375 call _dom _mt[243] a[140349]))
    unknown call_tmp[664902] "expr temp" "maybe param" "maybe type" "temp"
    (664905 'move' call_tmp[664902](140378 call intIdxType _mt[243] call_tmp[664895]))
    unknown strType[140383] "dead at end of block" "insert auto destroy" "type variable"(140382 call chpl__signedType call_tmp[664902])
    unknown call_tmp[664909] "expr temp" "maybe param" "maybe type" "temp"
    (664912 'move' call_tmp[664909](543262 call _dom _mt[243] a[140349]))
    unknown call_tmp[664916] "expr temp" "maybe param" "maybe type" "temp"
    (664919 'move' call_tmp[664916](543260 call intIdxType _mt[243] call_tmp[664909]))
    (543266 'move' strType[140383](543258 call chpl__signedType call_tmp[664916]))
    unknown call_tmp[664923] "expr temp" "maybe param" "maybe type" "temp"
    (664926 'move' call_tmp[664923](140391 call _dom _mt[243] a[140349]))
    unknown call_tmp[664932] "expr temp" "maybe param" "maybe type" "temp"
    (664935 'move' call_tmp[664932](140398 call rank _mt[243] a[140349]))
    unknown call_tmp[664937] "expr temp" "maybe param" "maybe type" "temp"
    (664940 'move' call_tmp[664937](140402 call - call_tmp[664932] rank[140343]))
    unknown call_tmp[664942] "expr temp" "maybe param" "maybe type" "temp"
    (664945 'move' call_tmp[664942](140405 call(140394 call (partial) dim _mt[243] call_tmp[664923]) call_tmp[664937]))
    unknown call_tmp[664949] "maybe param" "maybe type" "temp"
    (664952 'move' call_tmp[664949](140406 call stride _mt[243] call_tmp[664942]))
    const stride[140409] "dead at end of block" "const" "insert auto destroy"
    (543268 'init var' stride[140409] call_tmp[664949])
    unknown call_tmp[664956] "expr temp" "maybe param" "maybe type" "temp"
    (664959 'move' call_tmp[664956](140413 call _dom _mt[243] a[140349]))
    unknown call_tmp[664965] "expr temp" "maybe param" "maybe type" "temp"
    (664968 'move' call_tmp[664965](140420 call rank _mt[243] a[140349]))
    unknown call_tmp[664970] "expr temp" "maybe param" "maybe type" "temp"
    (664973 'move' call_tmp[664970](140424 call - call_tmp[664965] rank[140343]))
    unknown call_tmp[664975] "expr temp" "maybe param" "maybe type" "temp"
    (664978 'move' call_tmp[664975](140427 call(140416 call (partial) dim _mt[243] call_tmp[664956]) call_tmp[664970]))
    unknown call_tmp[664982] "maybe param" "maybe type" "temp"
    (664985 'move' call_tmp[664982](140428 call firstAsInt _mt[243] call_tmp[664975]))
    const start[140431] "dead at end of block" "const" "insert auto destroy"
    (543270 'init var' start[140431] call_tmp[664982])
    (140434 'end of statement')
    unknown call_tmp[664987] "expr temp" "maybe param" "maybe type" "temp"
    (664990 'move' call_tmp[664987](140437 call == rank[140343] 1))
    unknown call_tmp[664992] "expr temp" "maybe param" "maybe type" "temp"
    (664995 'move' call_tmp[664992](140729 call _cond_test call_tmp[664987]))
    if call_tmp[664992]
    {
      {
        unknown i[140594] "dead at end of block" "insert auto destroy"
        (543272 'init var' i[140594] 0)
        (480867 'end of statement')
        unknown tmp[140595] "maybe param" "temp"
        unknown call_tmp[664999] "expr temp" "maybe param" "maybe type" "temp"
        (665002 'move' call_tmp[664999](140441 call size _mt[243] b[140353]))
        unknown call_tmp[665004] "expr temp" "maybe param" "maybe type" "temp"
        (665007 'move' call_tmp[665004](140445 call - call_tmp[664999] 1))
        (140607 'move' tmp[140595](140605 call chpl_compute_low_param_loop_bound 0 call_tmp[665004]))
        unknown tmp[140596] "maybe param" "temp"
        unknown call_tmp[665011] "expr temp" "maybe param" "maybe type" "temp"
        (665014 'move' call_tmp[665011](140614 call size _mt[243] b[140353]))
        unknown call_tmp[665016] "expr temp" "maybe param" "maybe type" "temp"
        (665019 'move' call_tmp[665016](140612 call - call_tmp[665011] 1))
        (140620 'move' tmp[140596](140618 call chpl_compute_high_param_loop_bound 0 call_tmp[665016]))
        unknown tmp[140597] "maybe param" "temp"
        (140623 'move' tmp[140597] 1)
        ParamForLoop[140625]
        { i[140594] tmp[140595] tmp[140596] tmp[140597]
          {
            unknown call_tmp[665023] "expr temp" "maybe param" "maybe type" "temp"
            (665026 'move' call_tmp[665023](140451 call rank _mt[243] a[140349]))
            unknown call_tmp[665028] "expr temp" "maybe param" "maybe type" "temp"
            (665031 'move' call_tmp[665028](140455 call - call_tmp[665023] rank[140343]))
            unknown call_tmp[665033] "expr temp" "maybe param" "maybe type" "temp"
            (665036 'move' call_tmp[665033](140458 call j[140338] call_tmp[665028]))
            unknown call_tmp[665038] "expr temp" "maybe param" "maybe type" "temp"
            (665041 'move' call_tmp[665038](140464 call _cast strType[140383] start[140431]))
            unknown call_tmp[665043] "expr temp" "maybe param" "maybe type" "temp"
            (665046 'move' call_tmp[665043](140468 call * i[140594] stride[140409]))
            unknown call_tmp[665048] "expr temp" "maybe param" "maybe type" "temp"
            (665051 'move' call_tmp[665048](140470 call + call_tmp[665038] call_tmp[665043]))
            unknown call_tmp[665053] "expr temp" "maybe param" "maybe type" "temp"
            (665056 'move' call_tmp[665053](140472 call chpl__intToIdx idxType[140386] call_tmp[665048]))
            (140473 call = call_tmp[665033] call_tmp[665053])
            (480868 'end of statement' idxType[140386] strType[140383] start[140431] i[140594] stride[140409])
            unknown dst[140481] "dead at end of block" "ref var"
            unknown call_tmp[665058] "expr temp" "maybe param" "maybe type" "temp"
            (665061 'move' call_tmp[665058](140480 call a[140349] j[140338]))
            (543275 'move' dst[140481](543274 'addr of' call_tmp[665058]))
            (140484 'end of statement')
            const src[140489] "dead at end of block" "const" "ref var"
            unknown call_tmp[665063] "expr temp" "maybe param" "maybe type" "temp"
            (665066 'move' call_tmp[665063](140488 call b[140353] i[140594]))
            (543278 'move' src[140489](543277 'addr of' call_tmp[665063]))
            (140492 'end of statement' i[140594])
            unknown call_tmp[665068] "expr temp" "maybe param" "maybe type" "temp"
            (665071 'move' call_tmp[665068](140498 call == kind[140357] move[137993]))
            unknown call_tmp[665073] "expr temp" "maybe param" "maybe type" "temp"
            (665076 'move' call_tmp[665073](140589 call _cond_test call_tmp[665068]))
            if call_tmp[665073]
            {
              unknown call_tmp[665078] "expr temp" "maybe param" "maybe type" "temp"
              (665081 'move' call_tmp[665078](140503 call isArray dst[140481]))
              unknown call_tmp[665083] "expr temp" "maybe param" "maybe type" "temp"
              (665086 'move' call_tmp[665083](140539 call _cond_test call_tmp[665078]))
              if call_tmp[665083]
              {
                unknown call_tmp[665090] "expr temp" "maybe param" "maybe type" "temp"
                (665093 'move' call_tmp[665090](140506 call eltType _mt[243] a[140349]))
                unknown call_tmp[665095] "maybe param" "maybe type" "temp"
                (665098 'move' call_tmp[665095](140511 call chpl__coerceMove call_tmp[665090] src[140489]))
                unknown newArr[140512] "dead at end of block" "no auto destroy" "no copy"
                (543280 'init var' newArr[140512] call_tmp[665095])
                (140515 'end of statement' src[140489])
                (140521 '=' dst[140481] newArr[140512])
                (480876 'end of statement' dst[140481] newArr[140512])
              }
              {
                (140527 '=' dst[140481] src[140489])
                (480879 'end of statement' dst[140481] src[140489])
                unknown call_tmp[665102] "expr temp" "maybe param" "maybe type" "temp"
                (665105 'move' call_tmp[665102](140532 call eltType _mt[243] a[140349]))
                (140537 call fixRuntimeType call_tmp[665102] dst[140481])
                (480882 'end of statement' dst[140481])
              }
            }
            {
              unknown call_tmp[665107] "expr temp" "maybe param" "maybe type" "temp"
              (665110 'move' call_tmp[665107](140549 call == kind[140357] initCopy[137995]))
              unknown call_tmp[665112] "expr temp" "maybe param" "maybe type" "temp"
              (665115 'move' call_tmp[665112](140584 call _cond_test call_tmp[665107]))
              if call_tmp[665112]
              {
                unknown call_tmp[665119] "maybe param" "maybe type" "temp"
                (665122 'move' call_tmp[665119](140552 call eltType _mt[243] a[140349]))
                unknown copy[140556] "dead at end of block" "no auto destroy"
                (543282 'init var' copy[140556] src[140489] call_tmp[665119])
                (140559 'end of statement' src[140489])
                (140565 '=' dst[140481] copy[140556])
                (480885 'end of statement' dst[140481] copy[140556])
              }
              {
                unknown call_tmp[665124] "expr temp" "maybe param" "maybe type" "temp"
                (665127 'move' call_tmp[665124](140572 call == kind[140357] assign[137997]))
                unknown call_tmp[665129] "expr temp" "maybe param" "maybe type" "temp"
                (665132 'move' call_tmp[665129](140580 call _cond_test call_tmp[665124]))
                if call_tmp[665129]
                {
                  (140576 call = dst[140481] src[140489])
                  (480888 'end of statement' dst[140481] src[140489])
                }
              }
            }
          }
        }
        label _unused_continueLabel[140599]
        label _breakLabel[140598]
      }
    }
    {
      {
        unknown i[140688] "dead at end of block" "insert auto destroy"
        (543284 'init var' i[140688] 0)
        (480891 'end of statement')
        unknown tmp[140689] "maybe param" "temp"
        unknown call_tmp[665136] "expr temp" "maybe param" "maybe type" "temp"
        (665139 'move' call_tmp[665136](140637 call size _mt[243] b[140353]))
        unknown call_tmp[665141] "expr temp" "maybe param" "maybe type" "temp"
        (665144 'move' call_tmp[665141](140641 call - call_tmp[665136] 1))
        (140701 'move' tmp[140689](140699 call chpl_compute_low_param_loop_bound 0 call_tmp[665141]))
        unknown tmp[140690] "maybe param" "temp"
        unknown call_tmp[665148] "expr temp" "maybe param" "maybe type" "temp"
        (665151 'move' call_tmp[665148](140708 call size _mt[243] b[140353]))
        unknown call_tmp[665153] "expr temp" "maybe param" "maybe type" "temp"
        (665156 'move' call_tmp[665153](140706 call - call_tmp[665148] 1))
        (140714 'move' tmp[140690](140712 call chpl_compute_high_param_loop_bound 0 call_tmp[665153]))
        unknown tmp[140691] "maybe param" "temp"
        (140717 'move' tmp[140691] 1)
        ParamForLoop[140719]
        { i[140688] tmp[140689] tmp[140690] tmp[140691]
          {
            unknown call_tmp[665160] "expr temp" "maybe param" "maybe type" "temp"
            (665163 'move' call_tmp[665160](140647 call rank _mt[243] a[140349]))
            unknown call_tmp[665165] "expr temp" "maybe param" "maybe type" "temp"
            (665168 'move' call_tmp[665165](140651 call - call_tmp[665160] rank[140343]))
            unknown call_tmp[665170] "expr temp" "maybe param" "maybe type" "temp"
            (665173 'move' call_tmp[665170](140654 call j[140338] call_tmp[665165]))
            unknown call_tmp[665175] "expr temp" "maybe param" "maybe type" "temp"
            (665178 'move' call_tmp[665175](140660 call _cast strType[140383] start[140431]))
            unknown call_tmp[665180] "expr temp" "maybe param" "maybe type" "temp"
            (665183 'move' call_tmp[665180](140664 call * i[140688] stride[140409]))
            unknown call_tmp[665185] "expr temp" "maybe param" "maybe type" "temp"
            (665188 'move' call_tmp[665185](140666 call + call_tmp[665175] call_tmp[665180]))
            unknown call_tmp[665190] "expr temp" "maybe param" "maybe type" "temp"
            (665193 'move' call_tmp[665190](140668 call chpl__intToIdx idxType[140386] call_tmp[665185]))
            (140669 call = call_tmp[665170] call_tmp[665190])
            (480892 'end of statement' idxType[140386] strType[140383] start[140431] i[140688] stride[140409])
            unknown call_tmp[665195] "expr temp" "maybe param" "maybe type" "temp"
            (665198 'move' call_tmp[665195](140678 call - rank[140343] 1))
            unknown call_tmp[665200] "expr temp" "maybe param" "maybe type" "temp"
            (665203 'move' call_tmp[665200](140684 call b[140353] i[140688]))
            (140686 call helpInitArrFromTuple j[140338] call_tmp[665195] a[140349] call_tmp[665200] kind[140357])
            (480898 'end of statement' i[140688])
          }
        }
        label _unused_continueLabel[140693]
        label _breakLabel[140692]
      }
    }
    (519181 return _void[55])
  }
  {
    (140364 call <(140361 'lifetime_of' a[140349])(140363 'lifetime_of' b[140353]))
  }
  function initArrFromTuple[140744](ref arg a[140741]:_array[133594](?), arg b[140747]:_tuple[56202](?), param arg kind[140751]:_tElt[137999]) : _unknown[51] "private" "no return value for void"
  {
    unknown j[140767] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665207] "expr temp" "maybe param" "maybe type" "temp"
    (665210 'move' call_tmp[665207](140755 call rank _mt[243] a[140741]))
    unknown call_tmp[665214] "expr temp" "maybe param" "maybe type" "temp"
    (665217 'move' call_tmp[665214](140759 call _dom _mt[243] a[140741]))
    unknown call_tmp[665221] "expr temp" "maybe param" "maybe type" "temp"
    (665224 'move' call_tmp[665221](140762 call idxType _mt[243] call_tmp[665214]))
    unknown call_tmp[665226] "expr temp" "maybe param" "maybe type" "temp"
    (665229 'move' call_tmp[665226](140765 call * call_tmp[665207] call_tmp[665221]))
    (543286 'default init var' j[140767] call_tmp[665226])
    (140770 'end of statement')
    unknown call_tmp[665233] "expr temp" "maybe param" "maybe type" "temp"
    (665236 'move' call_tmp[665233](140776 call rank _mt[243] a[140741]))
    (140782 call helpInitArrFromTuple j[140767] call_tmp[665233] a[140741] b[140747] kind[140751])
    (480900 'end of statement' j[140767])
    (519183 return _void[55])
  }
  function =[140794](ref arg a[140791]:_array[133594](?), arg b[140797]:_tuple[56202](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (140812 call initArrFromTuple a[140791] b[140797] assign[137997])
    (519185 return _void[55])
  }
  where {
    (140803 call isRectangularArr a[140791])
  }
  function _desync[140824](arg t[140821]:_syncvar[84947](?)) type : _unknown[51]
  {
    unknown ret[519189] "RVV" "temp" "type variable"
    unknown x[140827] "dead at end of block" "insert auto destroy"
    (543288 'default init var' x[140827] t[140821])
    (140830 'end of statement')
    unknown call_tmp[665240] "expr temp" "maybe param" "maybe type" "temp"
    (665243 'move' call_tmp[665240](140833 call valType _mt[243] x[140827]))
    (519194 'move' ret[519189](519193 'deref' call_tmp[665240]))
    gotoReturn _end__desync[519187] _end__desync[519187]
    (480903 'end of statement' x[140827])
    label _end__desync[519187]
    (519191 return ret[519189])
  }
  function _desync[140846](arg t[140843]:_singlevar[87256](?)) type : _unknown[51]
  {
    unknown ret[519200] "RVV" "temp" "type variable"
    unknown x[140849] "dead at end of block" "insert auto destroy"
    (543290 'default init var' x[140849] t[140843])
    (140852 'end of statement')
    unknown call_tmp[665247] "expr temp" "maybe param" "maybe type" "temp"
    (665250 'move' call_tmp[665247](140855 call valType _mt[243] x[140849]))
    (519205 'move' ret[519200](519204 'deref' call_tmp[665247]))
    gotoReturn _end__desync[519198] _end__desync[519198]
    (480905 'end of statement' x[140849])
    label _end__desync[519198]
    (519202 return ret[519200])
  }
  function _desync[140866](arg t[140864]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[519211] "RVV" "temp" "type variable"
    (519216 'move' ret[519211](519215 'deref' t[140864]))
    (519213 return ret[519211])
  }
  function desyncEltType[140880](arg t[140877]:_array[133594](?)) type : _unknown[51] "private"
  {
    unknown ret[519220] "RVV" "temp" "type variable"
    unknown eltType[140886] "dead at end of block" "insert auto destroy" "type variable"(140885 call chpl__eltTypeFromArrayRuntimeType t[140877])
    (543295 'move' eltType[140886](543293 call chpl__eltTypeFromArrayRuntimeType t[140877]))
    (480908 'end of statement')
    unknown call_tmp[665252] "expr temp" "maybe param" "maybe type" "temp"
    (665255 'move' call_tmp[665252](140893 call _desync eltType[140886]))
    (519225 'move' ret[519220](519224 'deref' call_tmp[665252]))
    gotoReturn _end_desyncEltType[519218] _end_desyncEltType[519218]
    (480909 'end of statement' eltType[140886])
    label _end_desyncEltType[519218]
    (519222 return ret[519220])
  }
  function =[140906](ref arg a[140903]:_array[133594](?), arg b[140915] :
  unknown call_tmp[665259] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140926] "index var" "insert auto destroy"
      iterated expressions:
        a[140903]
      shadow variables:
      other variables
        forall body
      {
        (140922 call = e[140926] b[140915])
        (480911 'end of statement' e[140926])
      }
    }
    (519229 return _void[55])
  }
  function +=[140941](arg a[140938]:_array[133594](?), arg b[140950] :
  unknown call_tmp[665266] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140961] "index var" "insert auto destroy"
      iterated expressions:
        a[140938]
      shadow variables:
      other variables
        forall body
      {
        (140957 call += e[140961] b[140950])
        (480913 'end of statement' e[140961])
      }
    }
    (519231 return _void[55])
  }
  function -=[140976](arg a[140973]:_array[133594](?), arg b[140985] :
  unknown call_tmp[665273] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140996] "index var" "insert auto destroy"
      iterated expressions:
        a[140973]
      shadow variables:
      other variables
        forall body
      {
        (140992 call -= e[140996] b[140985])
        (480915 'end of statement' e[140996])
      }
    }
    (519233 return _void[55])
  }
  function *=[141011](arg a[141008]:_array[133594](?), arg b[141020] :
  unknown call_tmp[665280] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141031] "index var" "insert auto destroy"
      iterated expressions:
        a[141008]
      shadow variables:
      other variables
        forall body
      {
        (141027 call *= e[141031] b[141020])
        (480917 'end of statement' e[141031])
      }
    }
    (519235 return _void[55])
  }
  function /=[141046](arg a[141043]:_array[133594](?), arg b[141055] :
  unknown call_tmp[665287] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141066] "index var" "insert auto destroy"
      iterated expressions:
        a[141043]
      shadow variables:
      other variables
        forall body
      {
        (141062 call /= e[141066] b[141055])
        (480919 'end of statement' e[141066])
      }
    }
    (519237 return _void[55])
  }
  function %=[141081](arg a[141078]:_array[133594](?), arg b[141090] :
  unknown call_tmp[665294] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141101] "index var" "insert auto destroy"
      iterated expressions:
        a[141078]
      shadow variables:
      other variables
        forall body
      {
        (141097 call %= e[141101] b[141090])
        (480921 'end of statement' e[141101])
      }
    }
    (519239 return _void[55])
  }
  function **=[141116](arg a[141113]:_array[133594](?), arg b[141125] :
  unknown call_tmp[665301] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141136] "index var" "insert auto destroy"
      iterated expressions:
        a[141113]
      shadow variables:
      other variables
        forall body
      {
        (141132 call **= e[141136] b[141125])
        (480923 'end of statement' e[141136])
      }
    }
    (519241 return _void[55])
  }
  function &=[141151](arg a[141148]:_array[133594](?), arg b[141160] :
  unknown call_tmp[665308] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141171] "index var" "insert auto destroy"
      iterated expressions:
        a[141148]
      shadow variables:
      other variables
        forall body
      {
        (141167 call &= e[141171] b[141160])
        (480925 'end of statement' e[141171])
      }
    }
    (519243 return _void[55])
  }
  function |=[141186](arg a[141183]:_array[133594](?), arg b[141195] :
  unknown call_tmp[665315] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141206] "index var" "insert auto destroy"
      iterated expressions:
        a[141183]
      shadow variables:
      other variables
        forall body
      {
        (141202 call |= e[141206] b[141195])
        (480927 'end of statement' e[141206])
      }
    }
    (519245 return _void[55])
  }
  function ^=[141221](arg a[141218]:_array[133594](?), arg b[141230] :
  unknown call_tmp[665322] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141241] "index var" "insert auto destroy"
      iterated expressions:
        a[141218]
      shadow variables:
      other variables
        forall body
      {
        (141237 call ^= e[141241] b[141230])
        (480929 'end of statement' e[141241])
      }
    }
    (519247 return _void[55])
  }
  function >>=[141256](arg a[141253]:_array[133594](?), arg b[141265] :
  unknown call_tmp[665329] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141276] "index var" "insert auto destroy"
      iterated expressions:
        a[141253]
      shadow variables:
      other variables
        forall body
      {
        (141272 call >>= e[141276] b[141265])
        (480931 'end of statement' e[141276])
      }
    }
    (519249 return _void[55])
  }
  function <<=[141291](arg a[141288]:_array[133594](?), arg b[141300] :
  unknown call_tmp[665336] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141311] "index var" "insert auto destroy"
      iterated expressions:
        a[141288]
      shadow variables:
      other variables
        forall body
      {
        (141307 call <<= e[141311] b[141300])
        (480933 'end of statement' e[141311])
      }
    }
    (519251 return _void[55])
  }
  function chpl_by[141324](arg a[141321]:_domain[125908](?), arg b[141326]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519255] "RVV" "temp"
    unknown r[141349] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665343] "expr temp" "maybe param" "maybe type" "temp"
    (665346 'move' call_tmp[665343](141329 call rank _mt[243] a[141321]))
    unknown call_tmp[665350] "expr temp" "maybe param" "maybe type" "temp"
    (665353 'move' call_tmp[665350](141334 call _value _mt[243] a[141321]))
    unknown call_tmp[665357] "expr temp" "maybe param" "maybe type" "temp"
    (665360 'move' call_tmp[665357](141337 call idxType _mt[243] call_tmp[665350]))
    unknown call_tmp[665362] "expr temp" "maybe param" "maybe type" "temp"
    (665365 'move' call_tmp[665362](141346 call range[64319](?) call_tmp[665357] bounded[64208] 1))
    unknown call_tmp[665367] "expr temp" "maybe param" "maybe type" "temp"
    (665370 'move' call_tmp[665367](141347 call * call_tmp[665343] call_tmp[665362]))
    (543297 'default init var' r[141349] call_tmp[665367])
    (141352 'end of statement')
    unknown call_tmp[665374] "expr temp" "maybe param" "maybe type" "temp"
    (665377 'move' call_tmp[665374](141356 call rank _mt[243] a[141321]))
    unknown call_tmp[665379] "maybe param" "maybe type" "temp"
    (665382 'move' call_tmp[665379](141363 call _makeIndexTuple call_tmp[665374] b[141326](expand = 1)))
    unknown t[141364] "dead at end of block" "insert auto destroy"
    (543299 'init var' t[141364] call_tmp[665379])
    (141367 'end of statement')
    {
      unknown i[141398] "dead at end of block" "insert auto destroy"
      (543301 'init var' i[141398] 0)
      (480935 'end of statement')
      unknown tmp[141399] "maybe param" "temp"
      unknown call_tmp[665386] "expr temp" "maybe param" "maybe type" "temp"
      (665389 'move' call_tmp[665386](141370 call rank _mt[243] a[141321]))
      unknown call_tmp[665391] "expr temp" "maybe param" "maybe type" "temp"
      (665394 'move' call_tmp[665391](141374 call - call_tmp[665386] 1))
      (141411 'move' tmp[141399](141409 call chpl_compute_low_param_loop_bound 0 call_tmp[665391]))
      unknown tmp[141400] "maybe param" "temp"
      unknown call_tmp[665398] "expr temp" "maybe param" "maybe type" "temp"
      (665401 'move' call_tmp[665398](141418 call rank _mt[243] a[141321]))
      unknown call_tmp[665403] "expr temp" "maybe param" "maybe type" "temp"
      (665406 'move' call_tmp[665403](141416 call - call_tmp[665398] 1))
      (141424 'move' tmp[141400](141422 call chpl_compute_high_param_loop_bound 0 call_tmp[665403]))
      unknown tmp[141401] "maybe param" "temp"
      (141427 'move' tmp[141401] 1)
      ParamForLoop[141429]
      { i[141398] tmp[141399] tmp[141400] tmp[141401]
        unknown call_tmp[665408] "expr temp" "maybe param" "maybe type" "temp"
        (665411 'move' call_tmp[665408](141381 call r[141349] i[141398]))
        unknown call_tmp[665415] "expr temp" "maybe param" "maybe type" "temp"
        (665418 'move' call_tmp[665415](141388 call(141383 call (partial) dim _mt[243] a[141321]) i[141398]))
        unknown call_tmp[665420] "expr temp" "maybe param" "maybe type" "temp"
        (665423 'move' call_tmp[665420](141392 call t[141364] i[141398]))
        unknown call_tmp[665425] "expr temp" "maybe param" "maybe type" "temp"
        (665428 'move' call_tmp[665425](141393 call chpl_by call_tmp[665415] call_tmp[665420]))
        (141395 call = call_tmp[665408] call_tmp[665425])
        (480936 'end of statement' r[141349] i[141398] i[141398] t[141364] i[141398])
      }
      label _unused_continueLabel[141403]
      label _breakLabel[141402]
    }
    unknown call_tmp[665432] "expr temp" "maybe param" "maybe type" "temp"
    (665435 'move' call_tmp[665432](141441 call dist _mt[243] a[141321]))
    unknown call_tmp[665439] "expr temp" "maybe param" "maybe type" "temp"
    (665442 'move' call_tmp[665439](141446 call rank _mt[243] a[141321]))
    unknown call_tmp[665446] "expr temp" "maybe param" "maybe type" "temp"
    (665449 'move' call_tmp[665446](141450 call _value _mt[243] a[141321]))
    unknown call_tmp[665453] "expr temp" "maybe param" "maybe type" "temp"
    (665456 'move' call_tmp[665453](141453 call idxType _mt[243] call_tmp[665446]))
    unknown call_tmp[665458] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665461 'move' call_tmp[665458](747949 'new' _domain[125908](?) call_tmp[665432] call_tmp[665439] call_tmp[665453] 1 r[141349]))
    (519260 'move' ret[519255](519259 'deref' call_tmp[665458]))
    gotoReturn _end_chpl_by[519253] _end_chpl_by[519253]
    (480942 'end of statement' r[141349])
    label _end_chpl_by[519253]
    (519257 return ret[519255])
  }
  function chpl_align[141469](arg a[141466]:_domain[125908](?), arg b[141471]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519266] "RVV" "temp"
    unknown r[141497] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665465] "expr temp" "maybe param" "maybe type" "temp"
    (665468 'move' call_tmp[665465](141474 call rank _mt[243] a[141466]))
    unknown call_tmp[665472] "expr temp" "maybe param" "maybe type" "temp"
    (665475 'move' call_tmp[665472](141479 call _value _mt[243] a[141466]))
    unknown call_tmp[665479] "expr temp" "maybe param" "maybe type" "temp"
    (665482 'move' call_tmp[665479](141482 call idxType _mt[243] call_tmp[665472]))
    unknown call_tmp[665486] "expr temp" "maybe param" "maybe type" "temp"
    (665489 'move' call_tmp[665486](141491 call stridable _mt[243] a[141466]))
    unknown call_tmp[665491] "expr temp" "maybe param" "maybe type" "temp"
    (665494 'move' call_tmp[665491](141494 call range[64319](?) call_tmp[665479] bounded[64208] call_tmp[665486]))
    unknown call_tmp[665496] "expr temp" "maybe param" "maybe type" "temp"
    (665499 'move' call_tmp[665496](141495 call * call_tmp[665465] call_tmp[665491]))
    (543303 'default init var' r[141497] call_tmp[665496])
    (141500 'end of statement')
    unknown call_tmp[665503] "expr temp" "maybe param" "maybe type" "temp"
    (665506 'move' call_tmp[665503](141504 call rank _mt[243] a[141466]))
    unknown call_tmp[665508] "maybe param" "maybe type" "temp"
    (665511 'move' call_tmp[665508](141511 call _makeIndexTuple call_tmp[665503] b[141471](expand = 1)))
    unknown t[141512] "dead at end of block" "insert auto destroy"
    (543305 'init var' t[141512] call_tmp[665508])
    (141515 'end of statement')
    {
      unknown i[141546] "dead at end of block" "insert auto destroy"
      (543307 'init var' i[141546] 0)
      (480944 'end of statement')
      unknown tmp[141547] "maybe param" "temp"
      unknown call_tmp[665515] "expr temp" "maybe param" "maybe type" "temp"
      (665518 'move' call_tmp[665515](141518 call rank _mt[243] a[141466]))
      unknown call_tmp[665520] "expr temp" "maybe param" "maybe type" "temp"
      (665523 'move' call_tmp[665520](141522 call - call_tmp[665515] 1))
      (141559 'move' tmp[141547](141557 call chpl_compute_low_param_loop_bound 0 call_tmp[665520]))
      unknown tmp[141548] "maybe param" "temp"
      unknown call_tmp[665527] "expr temp" "maybe param" "maybe type" "temp"
      (665530 'move' call_tmp[665527](141566 call rank _mt[243] a[141466]))
      unknown call_tmp[665532] "expr temp" "maybe param" "maybe type" "temp"
      (665535 'move' call_tmp[665532](141564 call - call_tmp[665527] 1))
      (141572 'move' tmp[141548](141570 call chpl_compute_high_param_loop_bound 0 call_tmp[665532]))
      unknown tmp[141549] "maybe param" "temp"
      (141575 'move' tmp[141549] 1)
      ParamForLoop[141577]
      { i[141546] tmp[141547] tmp[141548] tmp[141549]
        unknown call_tmp[665537] "expr temp" "maybe param" "maybe type" "temp"
        (665540 'move' call_tmp[665537](141529 call r[141497] i[141546]))
        unknown call_tmp[665544] "expr temp" "maybe param" "maybe type" "temp"
        (665547 'move' call_tmp[665544](141536 call(141531 call (partial) dim _mt[243] a[141466]) i[141546]))
        unknown call_tmp[665549] "expr temp" "maybe param" "maybe type" "temp"
        (665552 'move' call_tmp[665549](141540 call t[141512] i[141546]))
        unknown call_tmp[665554] "expr temp" "maybe param" "maybe type" "temp"
        (665557 'move' call_tmp[665554](141541 call chpl_align call_tmp[665544] call_tmp[665549]))
        (141543 call = call_tmp[665537] call_tmp[665554])
        (480945 'end of statement' r[141497] i[141546] i[141546] t[141512] i[141546])
      }
      label _unused_continueLabel[141551]
      label _breakLabel[141550]
    }
    unknown call_tmp[665561] "expr temp" "maybe param" "maybe type" "temp"
    (665564 'move' call_tmp[665561](141589 call dist _mt[243] a[141466]))
    unknown call_tmp[665568] "expr temp" "maybe param" "maybe type" "temp"
    (665571 'move' call_tmp[665568](141594 call rank _mt[243] a[141466]))
    unknown call_tmp[665575] "expr temp" "maybe param" "maybe type" "temp"
    (665578 'move' call_tmp[665575](141598 call _value _mt[243] a[141466]))
    unknown call_tmp[665582] "expr temp" "maybe param" "maybe type" "temp"
    (665585 'move' call_tmp[665582](141601 call idxType _mt[243] call_tmp[665575]))
    unknown call_tmp[665589] "expr temp" "maybe param" "maybe type" "temp"
    (665592 'move' call_tmp[665589](141605 call stridable _mt[243] a[141466]))
    unknown call_tmp[665594] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665597 'move' call_tmp[665594](747950 'new' _domain[125908](?) call_tmp[665561] call_tmp[665568] call_tmp[665582] call_tmp[665589] r[141497]))
    (519271 'move' ret[519266](519270 'deref' call_tmp[665594]))
    gotoReturn _end_chpl_align[519264] _end_chpl_align[519264]
    (480951 'end of statement' r[141497])
    label _end_chpl_align[519264]
    (519268 return ret[519266])
  }
  function <=>[141624](arg x[141621]:_array[133594](?), arg y[141631]:_array[133594](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown hasSwapped[141636] "dead at end of block" "insert auto destroy"
    (543309 'init var' hasSwapped[141636] 0 bool[10])
    (141639 'end of statement')
    unknown tmp[426859] "maybe param" "temp"
    unknown tmp[426880] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492319] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665601] "expr temp" "maybe param" "maybe type" "temp"
      (665604 'move' call_tmp[665601](141642 call _value _mt[243] x[141621]))
      (492323 'move' call_type_tmp[492319](141645 'typeof' call_tmp[665601]))
    }
    { scopeless type
      unknown call_type_tmp[492325] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665608] "expr temp" "maybe param" "maybe type" "temp"
      (665611 'move' call_tmp[665608](141647 call _value _mt[243] y[141631]))
      (492329 'move' call_type_tmp[492325](141650 'typeof' call_tmp[665608]))
    }
    (426891 'move' tmp[426880](141651 call == call_type_tmp[492319] call_type_tmp[492325]))
    unknown call_tmp[665613] "expr temp" "maybe param" "maybe type" "temp"
    (665616 'move' call_tmp[665613](426893 call _cond_invalid tmp[426880]))
    if call_tmp[665613]
    {
      (426896 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568116] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568117] "maybe param" "temp"
    unknown call_tmp[665618] "expr temp" "maybe param" "maybe type" "temp"
    (665621 'move' call_tmp[665618](426881 call isTrue tmp[426880]))
    (568122 'move' tmp[568117](568120 call _cond_test call_tmp[665618]))
    if tmp[568117]
    {
      unknown tmp[568124] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665625] "expr temp" "maybe param" "maybe type" "temp"
      (665628 'move' call_tmp[665625](141655 call _value _mt[243] x[141621]))
      unknown call_tmp[665630] "expr temp" "maybe param" "maybe type" "temp"
      (665633 'move' call_tmp[665630](141659 call chpl__isArrayView call_tmp[665625]))
      unknown call_tmp[665635] "expr temp" "maybe param" "maybe type" "temp"
      (665638 'move' call_tmp[665635](141660 call ! call_tmp[665630]))
      (568126 'move' tmp[568124](426884 call isTrue call_tmp[665635]))
      (568131 'move' tmp[568116](568128 '_paramFoldLogical' tmp[568117] tmp[568124]))
    }
    {
      (568136 'move' tmp[568116](568133 '_paramFoldLogical' tmp[568117] 0))
    }
    (426870 'move' tmp[426859] tmp[568116])
    unknown call_tmp[665640] "expr temp" "maybe param" "maybe type" "temp"
    (665643 'move' call_tmp[665640](426872 call _cond_invalid tmp[426859]))
    if call_tmp[665640]
    {
      (426875 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568143] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568144] "maybe param" "temp"
    unknown call_tmp[665645] "expr temp" "maybe param" "maybe type" "temp"
    (665648 'move' call_tmp[665645](426860 call isTrue tmp[426859]))
    (568149 'move' tmp[568144](568147 call _cond_test call_tmp[665645]))
    if tmp[568144]
    {
      unknown tmp[568151] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665652] "expr temp" "maybe param" "maybe type" "temp"
      (665655 'move' call_tmp[665652](141669 call _value _mt[243] x[141621]))
      unknown call_tmp[665659] "expr temp" "maybe param" "maybe type" "temp"
      (665662 'move' call_tmp[665659](141691 call _value _mt[243] y[141631]))
      unknown call_tmp[665664] "expr temp" "maybe param" "maybe type" "temp"
      (665667 'move' call_tmp[665664](141694 call canResolveMethod module=[255] Reflection[224903] call_tmp[665652] "doiSwap" call_tmp[665659]))
      (568153 'move' tmp[568151](426863 call isTrue call_tmp[665664]))
      (568158 'move' tmp[568143](568155 '_paramFoldLogical' tmp[568144] tmp[568151]))
    }
    {
      (568163 'move' tmp[568143](568160 '_paramFoldLogical' tmp[568144] 0))
    }
    unknown call_tmp[665669] "expr temp" "maybe param" "maybe type" "temp"
    (665672 'move' call_tmp[665669](141726 call _cond_test tmp[568143]))
    if call_tmp[665669]
    {
      unknown call_tmp[665676] "expr temp" "maybe param" "maybe type" "temp"
      (665679 'move' call_tmp[665676](461611 call _dom _mt[243] x[141621]))
      unknown call_tmp[665683] "expr temp" "maybe param" "maybe type" "temp"
      (665686 'move' call_tmp[665683](461617 call _dom _mt[243] y[141631]))
      unknown call_tmp[665688] "expr temp" "maybe param" "maybe type" "temp"
      (665691 'move' call_tmp[665688](141699 call == call_tmp[665676] call_tmp[665683]))
      unknown call_tmp[665693] "expr temp" "maybe param" "maybe type" "temp"
      (665696 'move' call_tmp[665693](141721 call _cond_test call_tmp[665688]))
      if call_tmp[665693]
      {
        unknown call_tmp[665700] "expr temp" "maybe param" "maybe type" "temp"
        (665703 'move' call_tmp[665700](141702 call _value _mt[243] x[141621]))
        unknown call_tmp[665709] "expr temp" "maybe param" "maybe type" "temp"
        (665712 'move' call_tmp[665709](141709 call _value _mt[243] y[141631]))
        (141713 call(141705 call (partial) doiSwap _mt[243] call_tmp[665700]) call_tmp[665709])
        (480955 'end of statement')
        (141718 call = hasSwapped[141636] 1)
        (480956 'end of statement' hasSwapped[141636])
      }
    }
    unknown call_tmp[665714] "expr temp" "maybe param" "maybe type" "temp"
    (665717 'move' call_tmp[665714](141731 call ! hasSwapped[141636]))
    unknown call_tmp[665719] "expr temp" "maybe param" "maybe type" "temp"
    (665722 'move' call_tmp[665719](141755 call _cond_test call_tmp[665714]))
    if call_tmp[665719]
    {
      Forall {
        induction variables:
          
          unknown a[141748] "index var" "insert auto destroy"
          
          unknown b[141750] "index var" "insert auto destroy"
        iterated expressions:
          x[141621]
          y[141631]
        shadow variables:
        other variables
          forall body
        {
          (141744 call <=> a[141748] b[141750])
          (480958 'end of statement' a[141748] b[141750])
        }
      }
    }
    (519275 return _void[55])
    (360371 'referenced modules list' Reflection[224903])
  }
  function reshape[141769](arg A[141766]:_array[133594](?), arg D[141772]:_domain[125908](?)) : _unknown[51]
  {
    unknown ret[519279] "RVV" "temp"
    unknown call_tmp[665724] "expr temp" "maybe param" "maybe type" "temp"
    (665727 'move' call_tmp[665724](141778 call isRectangularDom D[141772]))
    unknown call_tmp[665729] "expr temp" "maybe param" "maybe type" "temp"
    (665732 'move' call_tmp[665729](141779 call ! call_tmp[665724]))
    unknown call_tmp[665734] "expr temp" "maybe param" "maybe type" "temp"
    (665737 'move' call_tmp[665734](141807 call _cond_test call_tmp[665729]))
    if call_tmp[665734]
    {
      unknown call_tmp[665739] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665742 'move' call_tmp[665739](141801 'typeof' D[141772]))
      unknown call_tmp[665744] "expr temp" "maybe param" "maybe type" "temp"
      (665747 'move' call_tmp[665744](141803 call _cast string[26] call_tmp[665739]))
      (141805 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665744])
    }
    unknown call_tmp[665751] "expr temp" "maybe param" "maybe type" "temp"
    (665754 'move' call_tmp[665751](141814 call size _mt[243] A[141766]))
    unknown call_tmp[665758] "expr temp" "maybe param" "maybe type" "temp"
    (665761 'move' call_tmp[665758](141818 call size _mt[243] D[141772]))
    unknown call_tmp[665763] "expr temp" "maybe param" "maybe type" "temp"
    (665766 'move' call_tmp[665763](141821 call != call_tmp[665751] call_tmp[665758]))
    unknown call_tmp[665768] "expr temp" "maybe param" "maybe type" "temp"
    (665771 'move' call_tmp[665768](141886 call _cond_test call_tmp[665763]))
    if call_tmp[665768]
    {
      unknown call_tmp[665775] "expr temp" "maybe param" "maybe type" "temp"
      (665778 'move' call_tmp[665775](141843 call size _mt[243] A[141766]))
      unknown call_tmp[665782] "expr temp" "maybe param" "maybe type" "temp"
      (665785 'move' call_tmp[665782](141864 call size _mt[243] D[141772]))
      (141884 call halt "reshape(A,D) is invoked when A has " call_tmp[665775] " elements, but D has " call_tmp[665782] " indices")
    }
    unknown B[141918] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter6[582758](arg iterator[582760]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582821] "RVV" "temp"
      {
        unknown _indexOfInterest[582765] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582766] "expr temp" "temp"
        (582775 'move' _iterator[582766](582773 call _getIteratorZip iterator[582760]))
        Defer
        {
          {
            (582801 call _freeIterator _iterator[582766])
          }
        }
        { scopeless type
          (582780 'move' _indexOfInterest[582765](582777 call iteratorIndex _iterator[582766]))
        }
        ForLoop[582767] for-expr
        {
          unknown a[141916] "index var" "insert auto destroy" "no doc"
          (582810 'end of statement')
          unknown i[141914] "index var" "insert auto destroy" "no doc"
          (582811 'end of statement')
          (582785 call _check_tuple_var_decl _indexOfInterest[582765] 2)
          (582812 'end of statement')
          (582791 'move' i[141914](582789 call _indexOfInterest[582765] 0))
          (582813 'end of statement' i[141914])
          (582796 'move' a[141916](582794 call _indexOfInterest[582765] 1))
          (582815 'end of statement' a[141916])
          {
            {
              unknown yret[582825] "YVV" "temp"
              (582828 'move' yret[582825](582827 'deref' a[141916]))
              (582830 yield yret[582825])
              (582817 'end of statement' a[141916])
            }
          }
          label _continueLabel[582770]
          _indexOfInterest[582765]
          _iterator[582766]
        }
        label _breakLabel[582771]
      }
      (582823 return ret[582821])
    }
    function chpl__forexpr6[582742](arg iterExpr[582745]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582835] "RVV" "temp"
      unknown _iterator[582749] "expr temp" "maybe ref" "temp"
      (582751 'move' _iterator[582749] iterExpr[582745])
      unknown call_tmp[582842] "expr temp" "maybe param" "maybe type" "temp"
      (582845 'move' call_tmp[582842](582754 call chpl__loopexpr_iter6 _iterator[582749]))
      (582840 'move' ret[582835](582839 'deref' call_tmp[582842]))
      (582837 return ret[582835])
    }
    unknown call_tmp[582847] "expr temp" "maybe param" "maybe type" "temp"
    (582850 'move' call_tmp[582847](141909 call _build_tuple D[141772] A[141766]))
    unknown call_tmp[582852] "maybe param" "maybe type" "temp"
    (582855 'move' call_tmp[582852](582747 call chpl__forexpr6 call_tmp[582847]))
    (582859 'iterator record set shape' call_tmp[582852] D[141772] 1)
    unknown call_tmp[665787] "expr temp" "maybe param" "maybe type" "temp"
    (665790 'move' call_tmp[665787](141897 call chpl__ensureDomainExpr D[141772]))
    unknown call_tmp[665794] "expr temp" "maybe param" "maybe type" "temp"
    (665797 'move' call_tmp[665794](141894 call eltType _mt[243] A[141766]))
    unknown call_tmp[665799] "maybe param" "maybe type" "temp"
    (665802 'move' call_tmp[665799](141899 call chpl__buildArrayRuntimeType call_tmp[665787] call_tmp[665794]))
    (543311 'init var' B[141918] call_tmp[582852] call_tmp[665799])
    (141921 'end of statement')
    (519284 'move' ret[519279](519283 'deref' B[141918]))
    gotoReturn _end_reshape[519277] _end_reshape[519277]
    (480963 'end of statement' B[141918])
    label _end_reshape[519277]
    (519281 return ret[519279])
  }
  function reshape[141933](arg A[141930]:_iteratorRecord[205](?), arg D[141936]:_domain[125908](?)) : _unknown[51] "no doc"
  {
    unknown ret[519290] "RVV" "temp"
    unknown call_tmp[665804] "expr temp" "maybe param" "maybe type" "temp"
    (665807 'move' call_tmp[665804](141942 call isRectangularDom D[141936]))
    unknown call_tmp[665809] "expr temp" "maybe param" "maybe type" "temp"
    (665812 'move' call_tmp[665809](141943 call ! call_tmp[665804]))
    unknown call_tmp[665814] "expr temp" "maybe param" "maybe type" "temp"
    (665817 'move' call_tmp[665814](141955 call _cond_test call_tmp[665809]))
    if call_tmp[665814]
    {
      unknown call_tmp[665819] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665822 'move' call_tmp[665819](141949 'typeof' D[141936]))
      unknown call_tmp[665824] "expr temp" "maybe param" "maybe type" "temp"
      (665827 'move' call_tmp[665824](141951 call _cast string[26] call_tmp[665819]))
      (141953 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665824])
    }
    unknown B[141978] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter7[582877](arg iterator[582879]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582940] "RVV" "temp"
      {
        unknown _indexOfInterest[582884] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582885] "expr temp" "temp"
        (582894 'move' _iterator[582885](582892 call _getIteratorZip iterator[582879]))
        Defer
        {
          {
            (582920 call _freeIterator _iterator[582885])
          }
        }
        { scopeless type
          (582899 'move' _indexOfInterest[582884](582896 call iteratorIndex _iterator[582885]))
        }
        ForLoop[582886] for-expr
        {
          unknown a[141976] "index var" "insert auto destroy" "no doc"
          (582929 'end of statement')
          unknown i[141974] "index var" "insert auto destroy" "no doc"
          (582930 'end of statement')
          (582904 call _check_tuple_var_decl _indexOfInterest[582884] 2)
          (582931 'end of statement')
          (582910 'move' i[141974](582908 call _indexOfInterest[582884] 0))
          (582932 'end of statement' i[141974])
          (582915 'move' a[141976](582913 call _indexOfInterest[582884] 1))
          (582934 'end of statement' a[141976])
          {
            {
              unknown yret[582944] "YVV" "temp"
              (582947 'move' yret[582944](582946 'deref' a[141976]))
              (582949 yield yret[582944])
              (582936 'end of statement' a[141976])
            }
          }
          label _continueLabel[582889]
          _indexOfInterest[582884]
          _iterator[582885]
        }
        label _breakLabel[582890]
      }
      (582942 return ret[582940])
    }
    function chpl__forexpr7[582861](arg iterExpr[582864]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582954] "RVV" "temp"
      unknown _iterator[582868] "expr temp" "maybe ref" "temp"
      (582870 'move' _iterator[582868] iterExpr[582864])
      unknown call_tmp[582961] "expr temp" "maybe param" "maybe type" "temp"
      (582964 'move' call_tmp[582961](582873 call chpl__loopexpr_iter7 _iterator[582868]))
      (582959 'move' ret[582954](582958 'deref' call_tmp[582961]))
      (582956 return ret[582954])
    }
    unknown call_tmp[582966] "expr temp" "maybe param" "maybe type" "temp"
    (582969 'move' call_tmp[582966](141969 call _build_tuple D[141936] A[141930]))
    unknown call_tmp[582971] "maybe param" "maybe type" "temp"
    (582974 'move' call_tmp[582971](582866 call chpl__forexpr7 call_tmp[582966]))
    (582978 'iterator record set shape' call_tmp[582971] D[141936] 1)
    (543313 'init var' B[141978] call_tmp[582971])
    (141981 'end of statement')
    (519295 'move' ret[519290](519294 'deref' B[141978]))
    gotoReturn _end_reshape[519288] _end_reshape[519288]
    (480966 'end of statement' B[141978])
    label _end_reshape[519288]
    (519292 return ret[519290])
  }
  function linearize[141991](arg Xs[141989]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[519301] "RVV" "temp"
    {
      unknown _indexOfInterest[141998] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141999] "expr temp" "temp"
      (142008 'move' _iterator[141999](142006 call _getIterator Xs[141989]))
      Defer
      {
        {
          (142024 call _freeIterator _iterator[141999])
        }
      }
      { scopeless type
        (142013 'move' _indexOfInterest[141998](142010 call iteratorIndex _iterator[141999]))
      }
      ForLoop[142000]
      {
        unknown x[142017] "index var" "insert auto destroy"
        (480969 'end of statement')
        (142019 'move' x[142017] _indexOfInterest[141998])
        (480970 'end of statement' x[142017])
        unknown yret[519305] "YVV" "temp"
        (519308 'move' yret[519305](519307 'deref' x[142017]))
        (519310 yield yret[519305])
        (480972 'end of statement' x[142017])
        label _continueLabel[142003]
        _indexOfInterest[141998]
        _iterator[141999]
      }
      label _breakLabel[142004]
    }
    (519303 return ret[519301])
  }
  function chpl__unalias[142040](arg x[142037]:_domain[125908](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519314] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492331] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665831] "expr temp" "maybe param" "maybe type" "temp"
      (665834 'move' call_tmp[665831](142044 call _instance _mt[243] x[142037]))
      (492335 'move' call_type_tmp[492331](142047 'typeof' call_tmp[665831]))
    }
    { scopeless type
      unknown call_type_tmp[492337] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665838] "expr temp" "maybe param" "maybe type" "temp"
      (665841 'move' call_tmp[665838](142051 call _instance _mt[243] x[142037]))
      (492341 'move' call_type_tmp[492337](142054 'typeof' call_tmp[665838]))
    }
    unknown call_tmp[665843] "expr temp" "maybe param" "maybe type" "temp"
    (665846 'move' call_tmp[665843](142049 call _to_unmanaged call_type_tmp[492331]))
    unknown call_tmp[665848] "expr temp" "maybe param" "maybe type" "temp"
    (665851 'move' call_tmp[665848](142055 call != call_tmp[665843] call_type_tmp[492337]))
    unknown call_tmp[665853] "expr temp" "maybe param" "maybe type" "temp"
    (665856 'move' call_tmp[665853](142062 call _cond_test call_tmp[665848]))
    if call_tmp[665853]
    {
      (142060 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[665860] "expr temp" "maybe param" "maybe type" "temp"
    (665863 'move' call_tmp[665860](142069 call _unowned _mt[243] x[142037]))
    unknown call_tmp[665865] "expr temp" "maybe param" "maybe type" "temp"
    (665868 'move' call_tmp[665865](142090 call _cond_test call_tmp[665860]))
    if call_tmp[665865]
    {
      unknown ret[142073] "dead at end of block" "no auto destroy"
      (543315 'init var' ret[142073] x[142037])
      (142076 'end of statement')
      (519319 'move' ret[519314](519318 'deref' ret[142073]))
      gotoReturn _end_chpl__unalias[519312] _end_chpl__unalias[519312]
      (480975 'end of statement' ret[142073])
    }
    {
      unknown ret[142082] "dead at end of block" "insert auto destroy" "no copy"
      (543317 'init var' ret[142082] x[142037])
      (142085 'end of statement')
      (519324 'move' ret[519314](519323 'deref' ret[142082]))
      gotoReturn _end_chpl__unalias[519312] _end_chpl__unalias[519312]
      (480977 'end of statement' ret[142082])
    }
    label _end_chpl__unalias[519312]
    (519316 return ret[519314])
  }
  function chpl__initCopy[142104](const  ref arg rhs[142101]:_array[133594](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519330] "RVV" "temp"
    unknown call_tmp[665870] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (665873 'move' call_tmp[665870](142108 'typeof' rhs[142101]))
    unknown call_tmp[665875] "maybe param" "maybe type" "temp"
    (665878 'move' call_tmp[665875](142111 call chpl__coerceCopy call_tmp[665870] rhs[142101]))
    unknown lhs[142112] "dead at end of block" "no copy"
    (543319 'init var' lhs[142112] call_tmp[665875])
    (142115 'end of statement')
    (519335 'move' ret[519330](519334 'deref' lhs[142112]))
    gotoReturn _end_chpl__initCopy[519328] _end_chpl__initCopy[519328]
    (480979 'end of statement' lhs[142112])
    label _end_chpl__initCopy[519328]
    (519332 return ret[519330])
  }
  function chpl__autoCopy[142130](arg x[142127]:_array[133594](?)) : _unknown[51] "auto copy fn"
  {
    unknown ret[519341] "RVV" "temp"
    unknown call_tmp[665880] "maybe param" "maybe type" "temp"
    (665883 'move' call_tmp[665880](142135 call chpl__initCopy x[142127]))
    unknown b[142136] "dead at end of block" "insert auto destroy" "no copy"
    (543321 'init var' b[142136] call_tmp[665880])
    (142139 'end of statement')
    (519346 'move' ret[519341](519345 'deref' b[142136]))
    gotoReturn _end_chpl__autoCopy[519339] _end_chpl__autoCopy[519339]
    (480981 'end of statement' b[142136])
    label _end_chpl__autoCopy[519339]
    (519343 return ret[519341])
  }
  function chpl__coerceCopy[142152](arg dstType[142149]:_domain[125908](?), arg rhs[142155]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519352] "RVV" "temp"
    unknown call_tmp[665887] "expr temp" "maybe param" "maybe type" "temp"
    (665890 'move' call_tmp[665887](142159 call dist _mt[243] rhs[142155]))
    unknown call_tmp[665894] "expr temp" "maybe param" "maybe type" "temp"
    (665897 'move' call_tmp[665894](142162 call _value _mt[243] call_tmp[665887]))
    unknown call_tmp[665901] "maybe param" "maybe type" "temp"
    (665904 'move' call_tmp[665901](142171 call(142167 call (partial) dsiIsLayout _mt[243] call_tmp[665894])))
    unknown rhsIsLayout[142172] "dead at end of block" "param"
    (543323 'init var' rhsIsLayout[142172] call_tmp[665901])
    (142175 'end of statement')
    unknown lhs[142178] "dead at end of block" "insert auto destroy"
    (543325 'default init var' lhs[142178] dstType[142149])
    (142181 'end of statement')
    (748199 call chpl_statementLevelSymbol lhs[142178])
    (142186 call = lhs[142178] rhs[142155])
    (480983 'end of statement' lhs[142178])
    unknown tmp[426901] "maybe param" "temp"
    unknown call_tmp[665908] "expr temp" "maybe param" "maybe type" "temp"
    (665911 'move' call_tmp[665908](142190 call dist _mt[243] lhs[142178]))
    unknown call_tmp[665915] "expr temp" "maybe param" "maybe type" "temp"
    (665918 'move' call_tmp[665915](142193 call _value _mt[243] call_tmp[665908]))
    (426912 'move' tmp[426901](142200 call(142196 call (partial) dsiIsLayout _mt[243] call_tmp[665915])))
    unknown call_tmp[665922] "expr temp" "maybe param" "maybe type" "temp"
    (665925 'move' call_tmp[665922](426914 call _cond_invalid tmp[426901]))
    if call_tmp[665922]
    {
      (426917 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568170] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568171] "maybe param" "temp"
    unknown call_tmp[665927] "expr temp" "maybe param" "maybe type" "temp"
    (665930 'move' call_tmp[665927](426902 call isTrue tmp[426901]))
    (568176 'move' tmp[568171](568174 call _cond_test call_tmp[665927]))
    if tmp[568171]
    {
      unknown tmp[568178] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665932] "expr temp" "maybe param" "maybe type" "temp"
      (665935 'move' call_tmp[665932](142202 call ! rhsIsLayout[142172]))
      (568180 'move' tmp[568178](426905 call isTrue call_tmp[665932]))
      (568185 'move' tmp[568170](568182 '_paramFoldLogical' tmp[568171] tmp[568178]))
    }
    {
      (568190 'move' tmp[568170](568187 '_paramFoldLogical' tmp[568171] 0))
    }
    unknown call_tmp[665937] "expr temp" "maybe param" "maybe type" "temp"
    (665940 'move' call_tmp[665937](142229 call _cond_test tmp[568170]))
    if call_tmp[665937]
    {
      (142227 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519357 'move' ret[519352](519356 'deref' lhs[142178]))
    gotoReturn _end_chpl__coerceCopy[519350] _end_chpl__coerceCopy[519350]
    (480987 'end of statement' lhs[142178])
    label _end_chpl__coerceCopy[519350]
    (519354 return ret[519352])
  }
  function chpl__coerceMove[142245](arg dstType[142242]:_domain[125908](?), in arg rhs[142248]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519363] "RVV" "temp"
    unknown call_tmp[665944] "expr temp" "maybe param" "maybe type" "temp"
    (665947 'move' call_tmp[665944](142252 call dist _mt[243] rhs[142248]))
    unknown call_tmp[665951] "expr temp" "maybe param" "maybe type" "temp"
    (665954 'move' call_tmp[665951](142255 call _value _mt[243] call_tmp[665944]))
    unknown call_tmp[665958] "maybe param" "maybe type" "temp"
    (665961 'move' call_tmp[665958](142262 call(142258 call (partial) dsiIsLayout _mt[243] call_tmp[665951])))
    unknown rhsIsLayout[142263] "dead at end of block" "param"
    (543327 'init var' rhsIsLayout[142263] call_tmp[665958])
    (142266 'end of statement')
    unknown lhs[142269] "dead at end of block" "insert auto destroy"
    (543329 'default init var' lhs[142269] dstType[142242])
    (142272 'end of statement')
    (748201 call chpl_statementLevelSymbol lhs[142269])
    (142277 call = lhs[142269] rhs[142248])
    (480989 'end of statement' lhs[142269])
    unknown tmp[426922] "maybe param" "temp"
    unknown call_tmp[665965] "expr temp" "maybe param" "maybe type" "temp"
    (665968 'move' call_tmp[665965](142281 call dist _mt[243] lhs[142269]))
    unknown call_tmp[665972] "expr temp" "maybe param" "maybe type" "temp"
    (665975 'move' call_tmp[665972](142284 call _value _mt[243] call_tmp[665965]))
    (426933 'move' tmp[426922](142291 call(142287 call (partial) dsiIsLayout _mt[243] call_tmp[665972])))
    unknown call_tmp[665979] "expr temp" "maybe param" "maybe type" "temp"
    (665982 'move' call_tmp[665979](426935 call _cond_invalid tmp[426922]))
    if call_tmp[665979]
    {
      (426938 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568197] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568198] "maybe param" "temp"
    unknown call_tmp[665984] "expr temp" "maybe param" "maybe type" "temp"
    (665987 'move' call_tmp[665984](426923 call isTrue tmp[426922]))
    (568203 'move' tmp[568198](568201 call _cond_test call_tmp[665984]))
    if tmp[568198]
    {
      unknown tmp[568205] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665989] "expr temp" "maybe param" "maybe type" "temp"
      (665992 'move' call_tmp[665989](142293 call ! rhsIsLayout[142263]))
      (568207 'move' tmp[568205](426926 call isTrue call_tmp[665989]))
      (568212 'move' tmp[568197](568209 '_paramFoldLogical' tmp[568198] tmp[568205]))
    }
    {
      (568217 'move' tmp[568197](568214 '_paramFoldLogical' tmp[568198] 0))
    }
    unknown call_tmp[665994] "expr temp" "maybe param" "maybe type" "temp"
    (665997 'move' call_tmp[665994](142302 call _cond_test tmp[568197]))
    if call_tmp[665994]
    {
      (142300 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519368 'move' ret[519363](519367 'deref' lhs[142269]))
    gotoReturn _end_chpl__coerceMove[519361] _end_chpl__coerceMove[519361]
    (480993 'end of statement' lhs[142269])
    label _end_chpl__coerceMove[519361]
    (519365 return ret[519363])
  }
  function chpl__coerceCopy[142318](arg dstType[142315]:_domain[125908](?), arg rhs[142321]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519374] "RVV" "temp"
    unknown lhs[142325] "dead at end of block" "insert auto destroy"
    (543331 'default init var' lhs[142325] dstType[142315])
    (142328 'end of statement')
    (748203 call chpl_statementLevelSymbol lhs[142325])
    unknown call_tmp[665999] "expr temp" "maybe param" "maybe type" "temp"
    (666002 'move' call_tmp[665999](142336 call chpl__isLegalRectTupDomAssign lhs[142325] rhs[142321]))
    unknown call_tmp[666004] "expr temp" "maybe param" "maybe type" "temp"
    (666007 'move' call_tmp[666004](142353 call _cond_test call_tmp[665999]))
    if call_tmp[666004]
    {
      unknown call_tmp[666009] "expr temp" "maybe param" "maybe type" "temp"
      (666012 'move' call_tmp[666009](142341 call chpl__buildDomainExpr(142339 'expand_tuple' rhs[142321])))
      (142343 call = lhs[142325] call_tmp[666009])
      (480995 'end of statement' lhs[142325])
    }
    {
      (142349 call = lhs[142325] rhs[142321])
      (480997 'end of statement' lhs[142325])
    }
    (519379 'move' ret[519374](519378 'deref' lhs[142325]))
    gotoReturn _end_chpl__coerceCopy[519372] _end_chpl__coerceCopy[519372]
    (480999 'end of statement' lhs[142325])
    label _end_chpl__coerceCopy[519372]
    (519376 return ret[519374])
  }
  function chpl__coerceMove[142368](arg dstType[142365]:_domain[125908](?), in arg rhs[142371]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519385] "RVV" "temp"
    unknown lhs[142375] "dead at end of block" "insert auto destroy"
    (543333 'default init var' lhs[142375] dstType[142365])
    (142378 'end of statement')
    (748205 call chpl_statementLevelSymbol lhs[142375])
    unknown call_tmp[666014] "expr temp" "maybe param" "maybe type" "temp"
    (666017 'move' call_tmp[666014](142386 call chpl__isLegalRectTupDomAssign lhs[142375] rhs[142371]))
    unknown call_tmp[666019] "expr temp" "maybe param" "maybe type" "temp"
    (666022 'move' call_tmp[666019](142403 call _cond_test call_tmp[666014]))
    if call_tmp[666019]
    {
      unknown call_tmp[666024] "expr temp" "maybe param" "maybe type" "temp"
      (666027 'move' call_tmp[666024](142391 call chpl__buildDomainExpr(142389 'expand_tuple' rhs[142371])))
      (142393 call = lhs[142375] call_tmp[666024])
      (481001 'end of statement' lhs[142375])
    }
    {
      (142399 call = lhs[142375] rhs[142371])
      (481003 'end of statement' lhs[142375])
    }
    (519390 'move' ret[519385](519389 'deref' lhs[142375]))
    gotoReturn _end_chpl__coerceMove[519383] _end_chpl__coerceMove[519383]
    (481005 'end of statement' lhs[142375])
    label _end_chpl__coerceMove[519383]
    (519387 return ret[519385])
  }
  function chpl__coerceCopy[142418](arg dstType[142415]:_domain[125908](?), arg rhs[142424]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519396] "RVV" "temp"
    unknown lhs[142428] "dead at end of block" "insert auto destroy"
    (543335 'default init var' lhs[142428] dstType[142415])
    (142431 'end of statement')
    (748207 call chpl_statementLevelSymbol lhs[142428])
    unknown call_tmp[666029] "expr temp" "maybe param" "maybe type" "temp"
    (666032 'move' call_tmp[666029](142438 call chpl__buildDomainExpr rhs[142424]))
    (142440 call = lhs[142428] call_tmp[666029])
    (481007 'end of statement' lhs[142428])
    (519401 'move' ret[519396](519400 'deref' lhs[142428]))
    gotoReturn _end_chpl__coerceCopy[519394] _end_chpl__coerceCopy[519394]
    (481009 'end of statement' lhs[142428])
    label _end_chpl__coerceCopy[519394]
    (519398 return ret[519396])
  }
  function chpl__coerceMove[142454](arg dstType[142451]:_domain[125908](?), in arg rhs[142460]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519407] "RVV" "temp"
    unknown lhs[142464] "dead at end of block" "insert auto destroy"
    (543337 'default init var' lhs[142464] dstType[142451])
    (142467 'end of statement')
    (748209 call chpl_statementLevelSymbol lhs[142464])
    unknown call_tmp[666034] "expr temp" "maybe param" "maybe type" "temp"
    (666037 'move' call_tmp[666034](142474 call chpl__buildDomainExpr rhs[142460]))
    (142476 call = lhs[142464] call_tmp[666034])
    (481011 'end of statement' lhs[142464])
    (519412 'move' ret[519407](519411 'deref' lhs[142464]))
    gotoReturn _end_chpl__coerceMove[519405] _end_chpl__coerceMove[519405]
    (481013 'end of statement' lhs[142464])
    label _end_chpl__coerceMove[519405]
    (519409 return ret[519407])
  }
  function chpl__coerceCopy[142490](arg dstType[142487]:_domain[125908](?), arg rhs[142493]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519418] "RVV" "temp"
    unknown lhs[142497] "dead at end of block" "insert auto destroy"
    (543339 'default init var' lhs[142497] dstType[142487])
    (142500 'end of statement')
    unknown call_tmp[666039] "expr temp" "maybe param" "maybe type" "temp"
    (666042 'move' call_tmp[666039](142505 call isRectangularDom lhs[142497]))
    unknown call_tmp[666044] "expr temp" "maybe param" "maybe type" "temp"
    (666047 'move' call_tmp[666044](142511 call _cond_test call_tmp[666039]))
    if call_tmp[666044]
    {
      (142509 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142521 call(142517 call (partial) clear _mt[243] lhs[142497]))
    (481016 'end of statement' lhs[142497])
    {
      unknown _indexOfInterest[142534] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142535] "expr temp" "temp"
      (142544 'move' _iterator[142535](142542 call _getIterator rhs[142493]))
      Defer
      {
        {
          (142560 call _freeIterator _iterator[142535])
        }
      }
      { scopeless type
        (142549 'move' _indexOfInterest[142534](142546 call iteratorIndex _iterator[142535]))
      }
      ForLoop[142536]
      {
        unknown ind[142553] "index var" "insert auto destroy"
        (481019 'end of statement')
        (142555 'move' ind[142553] _indexOfInterest[142534])
        (481020 'end of statement' ind[142553])
        {
          (142531 call(142526 call (partial) add _mt[243] lhs[142497]) ind[142553])
          (481022 'end of statement' lhs[142497] ind[142553])
        }
        label _continueLabel[142539]
        _indexOfInterest[142534]
        _iterator[142535]
      }
      label _breakLabel[142540]
    }
    (519423 'move' ret[519418](519422 'deref' lhs[142497]))
    gotoReturn _end_chpl__coerceCopy[519416] _end_chpl__coerceCopy[519416]
    (481025 'end of statement' lhs[142497])
    label _end_chpl__coerceCopy[519416]
    (519420 return ret[519418])
  }
  function chpl__coerceMove[142578](arg dstType[142575]:_domain[125908](?), arg rhs[142581]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519429] "RVV" "temp"
    unknown lhs[142585] "dead at end of block" "insert auto destroy"
    (543341 'default init var' lhs[142585] dstType[142575])
    (142588 'end of statement')
    unknown call_tmp[666053] "expr temp" "maybe param" "maybe type" "temp"
    (666056 'move' call_tmp[666053](142593 call isRectangularDom lhs[142585]))
    unknown call_tmp[666058] "expr temp" "maybe param" "maybe type" "temp"
    (666061 'move' call_tmp[666058](142599 call _cond_test call_tmp[666053]))
    if call_tmp[666058]
    {
      (142597 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142609 call(142605 call (partial) clear _mt[243] lhs[142585]))
    (481028 'end of statement' lhs[142585])
    {
      unknown _indexOfInterest[142622] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142623] "expr temp" "temp"
      (142632 'move' _iterator[142623](142630 call _getIterator rhs[142581]))
      Defer
      {
        {
          (142648 call _freeIterator _iterator[142623])
        }
      }
      { scopeless type
        (142637 'move' _indexOfInterest[142622](142634 call iteratorIndex _iterator[142623]))
      }
      ForLoop[142624]
      {
        unknown ind[142641] "index var" "insert auto destroy"
        (481031 'end of statement')
        (142643 'move' ind[142641] _indexOfInterest[142622])
        (481032 'end of statement' ind[142641])
        {
          (142619 call(142614 call (partial) add _mt[243] lhs[142585]) ind[142641])
          (481034 'end of statement' lhs[142585] ind[142641])
        }
        label _continueLabel[142627]
        _indexOfInterest[142622]
        _iterator[142623]
      }
      label _breakLabel[142628]
    }
    (519434 'move' ret[519429](519433 'deref' lhs[142585]))
    gotoReturn _end_chpl__coerceMove[519427] _end_chpl__coerceMove[519427]
    (481037 'end of statement' lhs[142585])
    label _end_chpl__coerceMove[519427]
    (519431 return ret[519429])
  }
  function chpl__coerceCopy[142666](arg dstType[142663]:_domain[125908](?), arg rhs[142668]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519440] "RVV" "temp"
    unknown lhs[142671] "dead at end of block" "insert auto destroy"
    (543343 'default init var' lhs[142671] dstType[142663])
    (142674 'end of statement')
    unknown call_tmp[666067] "expr temp" "maybe param" "maybe type" "temp"
    (666070 'move' call_tmp[666067](142679 call isRectangularDom lhs[142671]))
    unknown call_tmp[666072] "expr temp" "maybe param" "maybe type" "temp"
    (666075 'move' call_tmp[666072](142685 call _cond_test call_tmp[666067]))
    if call_tmp[666072]
    {
      (142683 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142695 call(142691 call (partial) clear _mt[243] lhs[142671]))
    (481040 'end of statement' lhs[142671])
    {
      unknown _indexOfInterest[142708] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142709] "expr temp" "temp"
      (142718 'move' _iterator[142709](142716 call _getIterator rhs[142668]))
      Defer
      {
        {
          (142734 call _freeIterator _iterator[142709])
        }
      }
      { scopeless type
        (142723 'move' _indexOfInterest[142708](142720 call iteratorIndex _iterator[142709]))
      }
      ForLoop[142710]
      {
        unknown ind[142727] "index var" "insert auto destroy"
        (481043 'end of statement')
        (142729 'move' ind[142727] _indexOfInterest[142708])
        (481044 'end of statement' ind[142727])
        {
          (142705 call(142700 call (partial) add _mt[243] lhs[142671]) ind[142727])
          (481046 'end of statement' lhs[142671] ind[142727])
        }
        label _continueLabel[142713]
        _indexOfInterest[142708]
        _iterator[142709]
      }
      label _breakLabel[142714]
    }
    (519445 'move' ret[519440](519444 'deref' lhs[142671]))
    gotoReturn _end_chpl__coerceCopy[519438] _end_chpl__coerceCopy[519438]
    (481049 'end of statement' lhs[142671])
    label _end_chpl__coerceCopy[519438]
    (519442 return ret[519440])
  }
  function chpl__coerceMove[142752](arg dstType[142749]:_domain[125908](?), in arg rhs[142754]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519451] "RVV" "temp"
    unknown lhs[142757] "dead at end of block" "insert auto destroy"
    (543345 'default init var' lhs[142757] dstType[142749])
    (142760 'end of statement')
    unknown call_tmp[666081] "expr temp" "maybe param" "maybe type" "temp"
    (666084 'move' call_tmp[666081](142765 call isRectangularDom lhs[142757]))
    unknown call_tmp[666086] "expr temp" "maybe param" "maybe type" "temp"
    (666089 'move' call_tmp[666086](142771 call _cond_test call_tmp[666081]))
    if call_tmp[666086]
    {
      (142769 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142781 call(142777 call (partial) clear _mt[243] lhs[142757]))
    (481052 'end of statement' lhs[142757])
    {
      unknown _indexOfInterest[142794] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142795] "expr temp" "temp"
      (142804 'move' _iterator[142795](142802 call _getIterator rhs[142754]))
      Defer
      {
        {
          (142820 call _freeIterator _iterator[142795])
        }
      }
      { scopeless type
        (142809 'move' _indexOfInterest[142794](142806 call iteratorIndex _iterator[142795]))
      }
      ForLoop[142796]
      {
        unknown ind[142813] "index var" "insert auto destroy"
        (481055 'end of statement')
        (142815 'move' ind[142813] _indexOfInterest[142794])
        (481056 'end of statement' ind[142813])
        {
          (142791 call(142786 call (partial) add _mt[243] lhs[142757]) ind[142813])
          (481058 'end of statement' lhs[142757] ind[142813])
        }
        label _continueLabel[142799]
        _indexOfInterest[142794]
        _iterator[142795]
      }
      label _breakLabel[142800]
    }
    (519456 'move' ret[519451](519455 'deref' lhs[142757]))
    gotoReturn _end_chpl__coerceMove[519449] _end_chpl__coerceMove[519449]
    (481061 'end of statement' lhs[142757])
    label _end_chpl__coerceMove[519449]
    (519453 return ret[519451])
  }
  function chpl__coerceCopy[142838](arg dstType[142835]:_array[133594](?), arg rhs[142841]:_array[133594](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519462] "RVV" "temp"
    unknown eltType[142848] "dead at end of block" "insert auto destroy" "type variable"(142847 call chpl__eltTypeFromArrayRuntimeType dstType[142835])
    (543350 'move' eltType[142848](543348 call chpl__eltTypeFromArrayRuntimeType dstType[142835]))
    const dom[142856] "dead at end of block" "const" "ref var"
    unknown call_tmp[666095] "expr temp" "maybe param" "maybe type" "temp"
    (666098 'move' call_tmp[666095](142855 call chpl__domainFromArrayRuntimeType dstType[142835]))
    (543353 'move' dom[142856](543352 'addr of' call_tmp[666095]))
    (142859 'end of statement')
    unknown call_tmp[666102] "maybe param" "maybe type" "temp"
    (666105 'move' call_tmp[666102](142868 call(142861 call (partial) buildArray _mt[243] dom[142856]) eltType[142848](initElts = 0)))
    unknown lhs[142869] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543355 'init var' lhs[142869] call_tmp[666102])
    (142872 'end of statement' dom[142856] eltType[142848])
    unknown call_tmp[666109] "expr temp" "maybe param" "maybe type" "temp"
    (666112 'move' call_tmp[666109](142874 call rank _mt[243] lhs[142869]))
    unknown call_tmp[666116] "expr temp" "maybe param" "maybe type" "temp"
    (666119 'move' call_tmp[666116](142878 call rank _mt[243] rhs[142841]))
    unknown call_tmp[666121] "expr temp" "maybe param" "maybe type" "temp"
    (666124 'move' call_tmp[666121](142881 call != call_tmp[666109] call_tmp[666116]))
    unknown call_tmp[666126] "expr temp" "maybe param" "maybe type" "temp"
    (666129 'move' call_tmp[666126](142888 call _cond_test call_tmp[666121]))
    if call_tmp[666126]
    {
      (142886 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666131] "expr temp" "maybe param" "maybe type" "temp"
    (666134 'move' call_tmp[666131](142896 call isCopyableType eltType[142848]))
    unknown call_tmp[666136] "expr temp" "maybe param" "maybe type" "temp"
    (666139 'move' call_tmp[666136](142897 call ! call_tmp[666131]))
    unknown call_tmp[666141] "expr temp" "maybe param" "maybe type" "temp"
    (666144 'move' call_tmp[666141](142941 call _cond_test call_tmp[666136]))
    if call_tmp[666141]
    {
      unknown call_tmp[666146] "expr temp" "maybe param" "maybe type" "temp"
      (666149 'move' call_tmp[666146](142920 call _cast string[26] eltType[142848]))
      (142939 call compilerError "Cannot copy-initialize array because element type '" call_tmp[666146] "' cannot be copy-initialized")
      (481066 'end of statement' eltType[142848])
    }
    unknown call_tmp[666153] "expr temp" "maybe param" "maybe type" "temp"
    (666156 'move' call_tmp[666153](142947 call _value _mt[243] rhs[142841]))
    unknown call_tmp[666158] "expr temp" "maybe param" "maybe type" "temp"
    (666161 'move' call_tmp[666158](142951 call == call_tmp[666153] nil[44]))
    unknown call_tmp[666163] "expr temp" "maybe param" "maybe type" "temp"
    (666166 'move' call_tmp[666163](143015 call _cond_test call_tmp[666158]))
    if call_tmp[666163]
    {
    }
    {
      unknown call_tmp[666170] "expr temp" "maybe param" "maybe type" "temp"
      (666173 'move' call_tmp[666170](142955 call _value _mt[243] lhs[142869]))
      unknown call_tmp[666177] "expr temp" "maybe param" "maybe type" "temp"
      (666180 'move' call_tmp[666177](142959 call _value _mt[243] rhs[142841]))
      unknown call_tmp[666182] "expr temp" "maybe param" "maybe type" "temp"
      (666185 'move' call_tmp[666182](142962 call == call_tmp[666170] call_tmp[666177]))
      unknown call_tmp[666187] "expr temp" "maybe param" "maybe type" "temp"
      (666190 'move' call_tmp[666187](143010 call _cond_test call_tmp[666182]))
      if call_tmp[666187]
      {
      }
      {
        unknown tmp[426943] "maybe param" "temp"
        unknown call_tmp[666194] "expr temp" "maybe param" "maybe type" "temp"
        (666197 'move' call_tmp[666194](142966 call size _mt[243] lhs[142869]))
        (426954 'move' tmp[426943](142970 call == call_tmp[666194] 0))
        unknown call_tmp[666199] "expr temp" "maybe param" "maybe type" "temp"
        (666202 'move' call_tmp[666199](426956 call _cond_invalid tmp[426943]))
        if call_tmp[666199]
        {
          (426959 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568224] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568225] "maybe param" "temp"
        unknown call_tmp[666204] "expr temp" "maybe param" "maybe type" "temp"
        (666207 'move' call_tmp[666204](426944 call isTrue tmp[426943]))
        (568230 'move' tmp[568225](568228 call _cond_test call_tmp[666204]))
        if tmp[568225]
        {
          unknown tmp[568232] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666211] "expr temp" "maybe param" "maybe type" "temp"
          (666214 'move' call_tmp[666211](142973 call size _mt[243] rhs[142841]))
          unknown call_tmp[666216] "expr temp" "maybe param" "maybe type" "temp"
          (666219 'move' call_tmp[666216](142977 call == call_tmp[666211] 0))
          (568234 'move' tmp[568232](426947 call isTrue call_tmp[666216]))
          (568239 'move' tmp[568224](568236 '_paramFoldLogical' tmp[568225] tmp[568232]))
        }
        {
          (568244 'move' tmp[568224](568241 '_paramFoldLogical' tmp[568225] 0))
        }
        unknown call_tmp[666221] "expr temp" "maybe param" "maybe type" "temp"
        (666224 'move' call_tmp[666221](143006 call _cond_test tmp[568224]))
        if call_tmp[666221]
        {
        }
        {
          unknown call_tmp[666226] "expr temp" "maybe param" "maybe type" "temp"
          (666229 'move' call_tmp[666226](142989 call _cond_test 1))
          if call_tmp[666226]
          {
            (142987 call checkArrayShapesUponAssignment lhs[142869] rhs[142841])
            (481069 'end of statement' lhs[142869])
          }
          (143004 call chpl__uncheckedArrayTransfer lhs[142869] rhs[142841](kind = initCopy[137995]))
          (481071 'end of statement' lhs[142869])
        }
      }
    }
    unknown call_tmp[666233] "expr temp" "maybe param" "maybe type" "temp"
    (666236 'move' call_tmp[666233](143021 call _value _mt[243] lhs[142869]))
    (143030 call(143026 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666233]))
    (481073 'end of statement' lhs[142869])
    (519467 'move' ret[519462](519466 'deref' lhs[142869]))
    gotoReturn _end_chpl__coerceCopy[519460] _end_chpl__coerceCopy[519460]
    (481075 'end of statement' lhs[142869])
    label _end_chpl__coerceCopy[519460]
    (519464 return ret[519462])
  }
  function chpl__coerceMove[143043](arg dstType[143040]:_array[133594](?), in arg rhs[143046]:_array[133594](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519473] "RVV" "temp"
    unknown eltType[143053] "dead at end of block" "insert auto destroy" "type variable"(143052 call chpl__eltTypeFromArrayRuntimeType dstType[143040])
    (543360 'move' eltType[143053](543358 call chpl__eltTypeFromArrayRuntimeType dstType[143040]))
    const dom[143061] "dead at end of block" "const" "ref var"
    unknown call_tmp[666240] "expr temp" "maybe param" "maybe type" "temp"
    (666243 'move' call_tmp[666240](143060 call chpl__domainFromArrayRuntimeType dstType[143040]))
    (543363 'move' dom[143061](543362 'addr of' call_tmp[666240]))
    (143064 'end of statement')
    { scopeless type
      unknown call_type_tmp[492343] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[666247] "expr temp" "maybe param" "maybe type" "temp"
      (666250 'move' call_tmp[666247](143066 call _instance _mt[243] rhs[143046]))
      (492347 'move' call_type_tmp[492343](143069 'typeof' call_tmp[666247]))
    }
    unknown call_tmp[666252] "expr temp" "maybe param" "maybe type" "temp"
    (666255 'move' call_tmp[666252](143073 call chpl__instanceTypeFromArrayRuntimeType dstType[143040]))
    unknown call_tmp[666257] "maybe param" "maybe type" "temp"
    (666260 'move' call_tmp[666257](143074 call != call_type_tmp[492343] call_tmp[666252]))
    unknown typeMismatch[143076] "dead at end of block" "param"
    (543365 'init var' typeMismatch[143076] call_tmp[666257])
    (143079 'end of statement')
    unknown call_tmp[666262] "maybe param" "maybe type" "temp"
    (666265 'move' call_tmp[666262](143081 call ! typeMismatch[143076]))
    unknown moveElts[143083] "dead at end of block" "param"
    (543367 'init var' moveElts[143083] call_tmp[666262])
    (143086 'end of statement')
    unknown tmp[426964] "maybe param" "temp"
    (426975 'move' tmp[426964] moveElts[143083])
    unknown call_tmp[666267] "expr temp" "maybe param" "maybe type" "temp"
    (666270 'move' call_tmp[666267](426977 call _cond_invalid tmp[426964]))
    if call_tmp[666267]
    {
      (426980 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568251] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568252] "maybe param" "temp"
    unknown call_tmp[666272] "expr temp" "maybe param" "maybe type" "temp"
    (666275 'move' call_tmp[666272](426965 call isTrue tmp[426964]))
    (568257 'move' tmp[568252](568255 call _cond_test call_tmp[666272]))
    if tmp[568252]
    {
      unknown tmp[568259] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666279] "expr temp" "maybe param" "maybe type" "temp"
      (666282 'move' call_tmp[666279](143089 call _instance _mt[243] dom[143061]))
      unknown call_tmp[666286] "expr temp" "maybe param" "maybe type" "temp"
      (666289 'move' call_tmp[666286](143093 call _dom _mt[243] rhs[143046]))
      unknown call_tmp[666293] "expr temp" "maybe param" "maybe type" "temp"
      (666296 'move' call_tmp[666293](143096 call _instance _mt[243] call_tmp[666286]))
      unknown call_tmp[666298] "expr temp" "maybe param" "maybe type" "temp"
      (666301 'move' call_tmp[666298](143099 call == call_tmp[666279] call_tmp[666293]))
      (568261 'move' tmp[568259](426968 call isTrue call_tmp[666298]))
      (568266 'move' tmp[568251](568263 '_paramFoldLogical' tmp[568252] tmp[568259]))
    }
    {
      (568271 'move' tmp[568251](568268 '_paramFoldLogical' tmp[568252] 0))
    }
    unknown call_tmp[666303] "expr temp" "maybe param" "maybe type" "temp"
    (666306 'move' call_tmp[666303](143107 call _cond_test tmp[568251]))
    if call_tmp[666303]
    {
      (519478 'move' ret[519473](519477 'deref' rhs[143046]))
      gotoReturn _end_chpl__coerceMove[519471] _end_chpl__coerceMove[519471]
    }
    unknown call_tmp[666310] "maybe param" "maybe type" "temp"
    (666313 'move' call_tmp[666310](143119 call(143112 call (partial) buildArray _mt[243] dom[143061]) eltType[143053](initElts = 0)))
    unknown lhs[143120] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543369 'init var' lhs[143120] call_tmp[666310])
    (143123 'end of statement' dom[143061] eltType[143053])
    unknown call_tmp[666317] "expr temp" "maybe param" "maybe type" "temp"
    (666320 'move' call_tmp[666317](143125 call rank _mt[243] lhs[143120]))
    unknown call_tmp[666324] "expr temp" "maybe param" "maybe type" "temp"
    (666327 'move' call_tmp[666324](143129 call rank _mt[243] rhs[143046]))
    unknown call_tmp[666329] "expr temp" "maybe param" "maybe type" "temp"
    (666332 'move' call_tmp[666329](143132 call != call_tmp[666317] call_tmp[666324]))
    unknown call_tmp[666334] "expr temp" "maybe param" "maybe type" "temp"
    (666337 'move' call_tmp[666334](143139 call _cond_test call_tmp[666329]))
    if call_tmp[666334]
    {
      (143137 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666341] "expr temp" "maybe param" "maybe type" "temp"
    (666344 'move' call_tmp[666341](143145 call _value _mt[243] rhs[143046]))
    unknown call_tmp[666346] "expr temp" "maybe param" "maybe type" "temp"
    (666349 'move' call_tmp[666346](143149 call == call_tmp[666341] nil[44]))
    unknown call_tmp[666351] "expr temp" "maybe param" "maybe type" "temp"
    (666354 'move' call_tmp[666351](143226 call _cond_test call_tmp[666346]))
    if call_tmp[666351]
    {
    }
    {
      unknown call_tmp[666358] "expr temp" "maybe param" "maybe type" "temp"
      (666361 'move' call_tmp[666358](143153 call _value _mt[243] lhs[143120]))
      unknown call_tmp[666365] "expr temp" "maybe param" "maybe type" "temp"
      (666368 'move' call_tmp[666365](143157 call _value _mt[243] rhs[143046]))
      unknown call_tmp[666370] "expr temp" "maybe param" "maybe type" "temp"
      (666373 'move' call_tmp[666370](143160 call == call_tmp[666358] call_tmp[666365]))
      unknown call_tmp[666375] "expr temp" "maybe param" "maybe type" "temp"
      (666378 'move' call_tmp[666375](143221 call _cond_test call_tmp[666370]))
      if call_tmp[666375]
      {
      }
      {
        unknown tmp[426985] "maybe param" "temp"
        unknown call_tmp[666382] "expr temp" "maybe param" "maybe type" "temp"
        (666385 'move' call_tmp[666382](143164 call size _mt[243] lhs[143120]))
        (426996 'move' tmp[426985](143168 call == call_tmp[666382] 0))
        unknown call_tmp[666387] "expr temp" "maybe param" "maybe type" "temp"
        (666390 'move' call_tmp[666387](426998 call _cond_invalid tmp[426985]))
        if call_tmp[666387]
        {
          (427001 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568278] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568279] "maybe param" "temp"
        unknown call_tmp[666392] "expr temp" "maybe param" "maybe type" "temp"
        (666395 'move' call_tmp[666392](426986 call isTrue tmp[426985]))
        (568284 'move' tmp[568279](568282 call _cond_test call_tmp[666392]))
        if tmp[568279]
        {
          unknown tmp[568286] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666399] "expr temp" "maybe param" "maybe type" "temp"
          (666402 'move' call_tmp[666399](143171 call size _mt[243] rhs[143046]))
          unknown call_tmp[666404] "expr temp" "maybe param" "maybe type" "temp"
          (666407 'move' call_tmp[666404](143175 call == call_tmp[666399] 0))
          (568288 'move' tmp[568286](426989 call isTrue call_tmp[666404]))
          (568293 'move' tmp[568278](568290 '_paramFoldLogical' tmp[568279] tmp[568286]))
        }
        {
          (568298 'move' tmp[568278](568295 '_paramFoldLogical' tmp[568279] 0))
        }
        unknown call_tmp[666409] "expr temp" "maybe param" "maybe type" "temp"
        (666412 'move' call_tmp[666409](143217 call _cond_test tmp[568278]))
        if call_tmp[666409]
        {
        }
        {
          unknown call_tmp[666414] "expr temp" "maybe param" "maybe type" "temp"
          (666417 'move' call_tmp[666414](143187 call _cond_test 1))
          if call_tmp[666414]
          {
            (143185 call checkArrayShapesUponAssignment lhs[143120] rhs[143046])
            (481083 'end of statement' lhs[143120])
          }
          unknown kind[143205] "dead at end of block" "param"
          unknown tmp[568305] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568306] "maybe param" "temp"
          (568311 'move' tmp[568306](568309 call _cond_test moveElts[143083]))
          if tmp[568306]
          {
            (568316 'move' tmp[568305](568313 '_paramFoldLogical' tmp[568306] move[137993]))
          }
          {
            (568321 'move' tmp[568305](568318 '_paramFoldLogical' tmp[568306] initCopy[137995]))
          }
          (543371 'init var' kind[143205] tmp[568305])
          (143208 'end of statement')
          (143215 call chpl__uncheckedArrayTransfer lhs[143120] rhs[143046](kind = kind[143205]))
          (481085 'end of statement' lhs[143120])
        }
      }
    }
    unknown call_tmp[666421] "expr temp" "maybe param" "maybe type" "temp"
    (666424 'move' call_tmp[666421](143233 call _unowned _mt[243] rhs[143046]))
    unknown call_tmp[666428] "expr temp" "maybe param" "maybe type" "temp"
    (666431 'move' call_tmp[666428](143238 call _instance _mt[243] rhs[143046]))
    unknown call_tmp[666433] "expr temp" "maybe param" "maybe type" "temp"
    (666436 'move' call_tmp[666433](143242 call ! moveElts[143083]))
    (143245 call _do_destroy_arr call_tmp[666421] call_tmp[666428](deinitElts = call_tmp[666433]))
    (481087 'end of statement')
    unknown call_tmp[666440] "expr temp" "maybe param" "maybe type" "temp"
    (666443 'move' call_tmp[666440](143248 call _value _mt[243] lhs[143120]))
    (143255 call(143251 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666440]))
    (481088 'end of statement' lhs[143120])
    (519483 'move' ret[519473](519482 'deref' lhs[143120]))
    gotoReturn _end_chpl__coerceMove[519471] _end_chpl__coerceMove[519471]
    (481090 'end of statement' lhs[143120])
    label _end_chpl__coerceMove[519471]
    (519475 return ret[519473])
  }
  function chpl__coerceCopy[143268](arg dstType[143265]:_array[133594](?), arg rhs[143271]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519489] "RVV" "temp"
    unknown eltType[143278] "dead at end of block" "insert auto destroy" "type variable"(143277 call chpl__eltTypeFromArrayRuntimeType dstType[143265])
    (543376 'move' eltType[143278](543374 call chpl__eltTypeFromArrayRuntimeType dstType[143265]))
    const dom[143286] "dead at end of block" "const" "ref var"
    unknown call_tmp[666447] "expr temp" "maybe param" "maybe type" "temp"
    (666450 'move' call_tmp[666447](143285 call chpl__domainFromArrayRuntimeType dstType[143265]))
    (543379 'move' dom[143286](543378 'addr of' call_tmp[666447]))
    (143289 'end of statement')
    unknown call_tmp[666454] "maybe param" "maybe type" "temp"
    (666457 'move' call_tmp[666454](143298 call(143291 call (partial) buildArray _mt[243] dom[143286]) eltType[143278](initElts = 0)))
    unknown lhs[143299] "dead at end of block" "insert auto destroy" "no copy"
    (543381 'init var' lhs[143299] call_tmp[666454])
    (143302 'end of statement' dom[143286] eltType[143278])
    unknown call_tmp[666461] "expr temp" "maybe param" "maybe type" "temp"
    (666464 'move' call_tmp[666461](143304 call rank _mt[243] lhs[143299]))
    unknown call_tmp[666468] "expr temp" "maybe param" "maybe type" "temp"
    (666471 'move' call_tmp[666468](143308 call rank _mt[243] rhs[143271]))
    unknown call_tmp[666473] "expr temp" "maybe param" "maybe type" "temp"
    (666476 'move' call_tmp[666473](143311 call != call_tmp[666461] call_tmp[666468]))
    unknown call_tmp[666478] "expr temp" "maybe param" "maybe type" "temp"
    (666481 'move' call_tmp[666478](143318 call _cond_test call_tmp[666473]))
    if call_tmp[666478]
    {
      (143316 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[427006] "maybe param" "temp"
    (427017 'move' tmp[427006](143326 call isAssociativeDom rhs[143271]))
    unknown call_tmp[666483] "expr temp" "maybe param" "maybe type" "temp"
    (666486 'move' call_tmp[666483](427019 call _cond_invalid tmp[427006]))
    if call_tmp[666483]
    {
      (427022 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568328] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568329] "maybe param" "temp"
    unknown call_tmp[666488] "expr temp" "maybe param" "maybe type" "temp"
    (666491 'move' call_tmp[666488](427007 call isTrue tmp[427006]))
    (568334 'move' tmp[568329](568332 call _cond_test call_tmp[666488]))
    if tmp[568329]
    {
      unknown tmp[568336] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666493] "expr temp" "maybe param" "maybe type" "temp"
      (666496 'move' call_tmp[666493](143330 call isRectangularArr lhs[143299]))
      (568338 'move' tmp[568336](427010 call isTrue call_tmp[666493]))
      (568343 'move' tmp[568328](568340 '_paramFoldLogical' tmp[568329] tmp[568336]))
    }
    {
      (568348 'move' tmp[568328](568345 '_paramFoldLogical' tmp[568329] 0))
    }
    unknown call_tmp[666498] "expr temp" "maybe param" "maybe type" "temp"
    (666501 'move' call_tmp[666498](143338 call _cond_test tmp[568328]))
    if call_tmp[666498]
    {
      (143336 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666503] "expr temp" "maybe param" "maybe type" "temp"
    (666506 'move' call_tmp[666503](143346 call isPODType eltType[143278]))
    unknown call_tmp[666508] "expr temp" "maybe param" "maybe type" "temp"
    (666511 'move' call_tmp[666508](143347 call ! call_tmp[666503]))
    unknown call_tmp[666513] "expr temp" "maybe param" "maybe type" "temp"
    (666516 'move' call_tmp[666513](143370 call _cond_test call_tmp[666508]))
    if call_tmp[666513]
    {
      (143368 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143384 call chpl__transferArray lhs[143299] rhs[143271](kind = initCopy[137995]))
    (481098 'end of statement' lhs[143299])
    unknown call_tmp[666520] "expr temp" "maybe param" "maybe type" "temp"
    (666523 'move' call_tmp[666520](143387 call _value _mt[243] lhs[143299]))
    (143394 call(143390 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666520]))
    (481100 'end of statement' lhs[143299])
    (519494 'move' ret[519489](519493 'deref' lhs[143299]))
    gotoReturn _end_chpl__coerceCopy[519487] _end_chpl__coerceCopy[519487]
    (481102 'end of statement' lhs[143299])
    label _end_chpl__coerceCopy[519487]
    (519491 return ret[519489])
  }
  function chpl__coerceMove[143407](arg dstType[143404]:_array[133594](?), in arg rhs[143410]:_domain[125908](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519500] "RVV" "temp"
    unknown eltType[143417] "dead at end of block" "insert auto destroy" "type variable"(143416 call chpl__eltTypeFromArrayRuntimeType dstType[143404])
    (543386 'move' eltType[143417](543384 call chpl__eltTypeFromArrayRuntimeType dstType[143404]))
    const dom[143425] "dead at end of block" "const" "ref var"
    unknown call_tmp[666527] "expr temp" "maybe param" "maybe type" "temp"
    (666530 'move' call_tmp[666527](143424 call chpl__domainFromArrayRuntimeType dstType[143404]))
    (543389 'move' dom[143425](543388 'addr of' call_tmp[666527]))
    (143428 'end of statement')
    unknown call_tmp[666534] "maybe param" "maybe type" "temp"
    (666537 'move' call_tmp[666534](143437 call(143430 call (partial) buildArray _mt[243] dom[143425]) eltType[143417](initElts = 0)))
    unknown lhs[143438] "dead at end of block" "insert auto destroy" "no copy"
    (543391 'init var' lhs[143438] call_tmp[666534])
    (143441 'end of statement' dom[143425] eltType[143417])
    unknown call_tmp[666541] "expr temp" "maybe param" "maybe type" "temp"
    (666544 'move' call_tmp[666541](143443 call rank _mt[243] lhs[143438]))
    unknown call_tmp[666548] "expr temp" "maybe param" "maybe type" "temp"
    (666551 'move' call_tmp[666548](143447 call rank _mt[243] rhs[143410]))
    unknown call_tmp[666553] "expr temp" "maybe param" "maybe type" "temp"
    (666556 'move' call_tmp[666553](143450 call != call_tmp[666541] call_tmp[666548]))
    unknown call_tmp[666558] "expr temp" "maybe param" "maybe type" "temp"
    (666561 'move' call_tmp[666558](143457 call _cond_test call_tmp[666553]))
    if call_tmp[666558]
    {
      (143455 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[427027] "maybe param" "temp"
    (427038 'move' tmp[427027](143465 call isAssociativeDom rhs[143410]))
    unknown call_tmp[666563] "expr temp" "maybe param" "maybe type" "temp"
    (666566 'move' call_tmp[666563](427040 call _cond_invalid tmp[427027]))
    if call_tmp[666563]
    {
      (427043 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568355] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568356] "maybe param" "temp"
    unknown call_tmp[666568] "expr temp" "maybe param" "maybe type" "temp"
    (666571 'move' call_tmp[666568](427028 call isTrue tmp[427027]))
    (568361 'move' tmp[568356](568359 call _cond_test call_tmp[666568]))
    if tmp[568356]
    {
      unknown tmp[568363] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666573] "expr temp" "maybe param" "maybe type" "temp"
      (666576 'move' call_tmp[666573](143469 call isRectangularArr lhs[143438]))
      (568365 'move' tmp[568363](427031 call isTrue call_tmp[666573]))
      (568370 'move' tmp[568355](568367 '_paramFoldLogical' tmp[568356] tmp[568363]))
    }
    {
      (568375 'move' tmp[568355](568372 '_paramFoldLogical' tmp[568356] 0))
    }
    unknown call_tmp[666578] "expr temp" "maybe param" "maybe type" "temp"
    (666581 'move' call_tmp[666578](143477 call _cond_test tmp[568355]))
    if call_tmp[666578]
    {
      (143475 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666583] "expr temp" "maybe param" "maybe type" "temp"
    (666586 'move' call_tmp[666583](143485 call isPODType eltType[143417]))
    unknown call_tmp[666588] "expr temp" "maybe param" "maybe type" "temp"
    (666591 'move' call_tmp[666588](143486 call ! call_tmp[666583]))
    unknown call_tmp[666593] "expr temp" "maybe param" "maybe type" "temp"
    (666596 'move' call_tmp[666593](143493 call _cond_test call_tmp[666588]))
    if call_tmp[666593]
    {
      (143491 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143507 call chpl__transferArray lhs[143438] rhs[143410](kind = initCopy[137995]))
    (481110 'end of statement' lhs[143438])
    unknown call_tmp[666600] "expr temp" "maybe param" "maybe type" "temp"
    (666603 'move' call_tmp[666600](143510 call _value _mt[243] lhs[143438]))
    (143517 call(143513 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666600]))
    (481112 'end of statement' lhs[143438])
    (519505 'move' ret[519500](519504 'deref' lhs[143438]))
    gotoReturn _end_chpl__coerceMove[519498] _end_chpl__coerceMove[519498]
    (481114 'end of statement' lhs[143438])
    label _end_chpl__coerceMove[519498]
    (519502 return ret[519500])
  }
  function chpl__coerceCopy[143530](arg dstType[143527]:_array[133594](?), arg rhs[143536]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519511] "RVV" "temp"
    unknown eltType[143543] "dead at end of block" "insert auto destroy" "type variable"(143542 call chpl__eltTypeFromArrayRuntimeType dstType[143527])
    (543396 'move' eltType[143543](543394 call chpl__eltTypeFromArrayRuntimeType dstType[143527]))
    const dom[143551] "dead at end of block" "const" "ref var"
    unknown call_tmp[666607] "expr temp" "maybe param" "maybe type" "temp"
    (666610 'move' call_tmp[666607](143550 call chpl__domainFromArrayRuntimeType dstType[143527]))
    (543399 'move' dom[143551](543398 'addr of' call_tmp[666607]))
    (143554 'end of statement')
    unknown call_tmp[666614] "maybe param" "maybe type" "temp"
    (666617 'move' call_tmp[666614](143563 call(143556 call (partial) buildArray _mt[243] dom[143551]) eltType[143543](initElts = 0)))
    unknown lhs[143564] "dead at end of block" "insert auto destroy" "no copy"
    (543401 'init var' lhs[143564] call_tmp[666614])
    (143567 'end of statement' dom[143551] eltType[143543])
    unknown call_tmp[666621] "expr temp" "maybe param" "maybe type" "temp"
    (666624 'move' call_tmp[666621](143569 call rank _mt[243] lhs[143564]))
    unknown call_tmp[666626] "expr temp" "maybe param" "maybe type" "temp"
    (666629 'move' call_tmp[666626](143573 call != call_tmp[666621] 1))
    unknown call_tmp[666631] "expr temp" "maybe param" "maybe type" "temp"
    (666634 'move' call_tmp[666631](143580 call _cond_test call_tmp[666626]))
    if call_tmp[666631]
    {
      (143578 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143594 call chpl__transferArray lhs[143564] rhs[143536](kind = initCopy[137995]))
    (481119 'end of statement' lhs[143564])
    unknown call_tmp[666638] "expr temp" "maybe param" "maybe type" "temp"
    (666641 'move' call_tmp[666638](143597 call _value _mt[243] lhs[143564]))
    (143604 call(143600 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666638]))
    (481121 'end of statement' lhs[143564])
    (519516 'move' ret[519511](519515 'deref' lhs[143564]))
    gotoReturn _end_chpl__coerceCopy[519509] _end_chpl__coerceCopy[519509]
    (481123 'end of statement' lhs[143564])
    label _end_chpl__coerceCopy[519509]
    (519513 return ret[519511])
  }
  function chpl__coerceMove[143617](arg dstType[143614]:_array[133594](?), in arg rhs[143623]:range[64319](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519522] "RVV" "temp"
    unknown eltType[143630] "dead at end of block" "insert auto destroy" "type variable"(143629 call chpl__eltTypeFromArrayRuntimeType dstType[143614])
    (543406 'move' eltType[143630](543404 call chpl__eltTypeFromArrayRuntimeType dstType[143614]))
    const dom[143638] "dead at end of block" "const" "ref var"
    unknown call_tmp[666645] "expr temp" "maybe param" "maybe type" "temp"
    (666648 'move' call_tmp[666645](143637 call chpl__domainFromArrayRuntimeType dstType[143614]))
    (543409 'move' dom[143638](543408 'addr of' call_tmp[666645]))
    (143641 'end of statement')
    unknown call_tmp[666652] "maybe param" "maybe type" "temp"
    (666655 'move' call_tmp[666652](143650 call(143643 call (partial) buildArray _mt[243] dom[143638]) eltType[143630](initElts = 0)))
    unknown lhs[143651] "dead at end of block" "insert auto destroy" "no copy"
    (543411 'init var' lhs[143651] call_tmp[666652])
    (143654 'end of statement' dom[143638] eltType[143630])
    unknown call_tmp[666659] "expr temp" "maybe param" "maybe type" "temp"
    (666662 'move' call_tmp[666659](143656 call rank _mt[243] lhs[143651]))
    unknown call_tmp[666664] "expr temp" "maybe param" "maybe type" "temp"
    (666667 'move' call_tmp[666664](143660 call != call_tmp[666659] 1))
    unknown call_tmp[666669] "expr temp" "maybe param" "maybe type" "temp"
    (666672 'move' call_tmp[666669](143667 call _cond_test call_tmp[666664]))
    if call_tmp[666669]
    {
      (143665 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143681 call chpl__transferArray lhs[143651] rhs[143623](kind = initCopy[137995]))
    (481128 'end of statement' lhs[143651])
    unknown call_tmp[666676] "expr temp" "maybe param" "maybe type" "temp"
    (666679 'move' call_tmp[666676](143684 call _value _mt[243] lhs[143651]))
    (143691 call(143687 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666676]))
    (481130 'end of statement' lhs[143651])
    (519527 'move' ret[519522](519526 'deref' lhs[143651]))
    gotoReturn _end_chpl__coerceMove[519520] _end_chpl__coerceMove[519520]
    (481132 'end of statement' lhs[143651])
    label _end_chpl__coerceMove[519520]
    (519524 return ret[519522])
  }
  function chpl__coerceCopy[143704](arg dstType[143701]:_array[133594](?), arg rhs[143707]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519533] "RVV" "temp"
    unknown eltType[143714] "dead at end of block" "insert auto destroy" "type variable"(143713 call chpl__eltTypeFromArrayRuntimeType dstType[143701])
    (543416 'move' eltType[143714](543414 call chpl__eltTypeFromArrayRuntimeType dstType[143701]))
    const dom[143722] "dead at end of block" "const" "ref var"
    unknown call_tmp[666683] "expr temp" "maybe param" "maybe type" "temp"
    (666686 'move' call_tmp[666683](143721 call chpl__domainFromArrayRuntimeType dstType[143701]))
    (543419 'move' dom[143722](543418 'addr of' call_tmp[666683]))
    (143725 'end of statement')
    unknown call_tmp[666690] "maybe param" "maybe type" "temp"
    (666693 'move' call_tmp[666690](143734 call(143727 call (partial) buildArray _mt[243] dom[143722]) eltType[143714](initElts = 0)))
    unknown lhs[143735] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543421 'init var' lhs[143735] call_tmp[666690])
    (143738 'end of statement' dom[143722] eltType[143714])
    unknown call_tmp[666695] "expr temp" "maybe param" "maybe type" "temp"
    (666698 'move' call_tmp[666695](143742 call isRectangularArr lhs[143735]))
    unknown call_tmp[666700] "expr temp" "maybe param" "maybe type" "temp"
    (666703 'move' call_tmp[666700](143743 call ! call_tmp[666695]))
    unknown call_tmp[666705] "expr temp" "maybe param" "maybe type" "temp"
    (666708 'move' call_tmp[666705](143766 call _cond_test call_tmp[666700]))
    if call_tmp[666705]
    {
      (143764 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143779 call initArrFromTuple lhs[143735] rhs[143707] initCopy[137995])
    (481137 'end of statement' lhs[143735])
    unknown call_tmp[666712] "expr temp" "maybe param" "maybe type" "temp"
    (666715 'move' call_tmp[666712](143782 call _value _mt[243] lhs[143735]))
    (143789 call(143785 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666712]))
    (481139 'end of statement' lhs[143735])
    (519538 'move' ret[519533](519537 'deref' lhs[143735]))
    gotoReturn _end_chpl__coerceCopy[519531] _end_chpl__coerceCopy[519531]
    (481141 'end of statement' lhs[143735])
    label _end_chpl__coerceCopy[519531]
    (519535 return ret[519533])
  }
  function chpl__coerceMove[143802](arg dstType[143799]:_array[133594](?), in arg rhs[143805]:_tuple[56202](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519544] "RVV" "temp"
    unknown eltType[143812] "dead at end of block" "insert auto destroy" "type variable"(143811 call chpl__eltTypeFromArrayRuntimeType dstType[143799])
    (543426 'move' eltType[143812](543424 call chpl__eltTypeFromArrayRuntimeType dstType[143799]))
    const dom[143820] "dead at end of block" "const" "ref var"
    unknown call_tmp[666719] "expr temp" "maybe param" "maybe type" "temp"
    (666722 'move' call_tmp[666719](143819 call chpl__domainFromArrayRuntimeType dstType[143799]))
    (543429 'move' dom[143820](543428 'addr of' call_tmp[666719]))
    (143823 'end of statement')
    unknown call_tmp[666726] "maybe param" "maybe type" "temp"
    (666729 'move' call_tmp[666726](143832 call(143825 call (partial) buildArray _mt[243] dom[143820]) eltType[143812](initElts = 0)))
    unknown lhs[143833] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543431 'init var' lhs[143833] call_tmp[666726])
    (143836 'end of statement' dom[143820] eltType[143812])
    unknown call_tmp[666731] "expr temp" "maybe param" "maybe type" "temp"
    (666734 'move' call_tmp[666731](143840 call isRectangularArr lhs[143833]))
    unknown call_tmp[666736] "expr temp" "maybe param" "maybe type" "temp"
    (666739 'move' call_tmp[666736](143841 call ! call_tmp[666731]))
    unknown call_tmp[666741] "expr temp" "maybe param" "maybe type" "temp"
    (666744 'move' call_tmp[666741](143848 call _cond_test call_tmp[666736]))
    if call_tmp[666741]
    {
      (143846 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143861 call initArrFromTuple lhs[143833] rhs[143805] move[137993])
    (481146 'end of statement' lhs[143833])
    unknown call_tmp[666748] "expr temp" "maybe param" "maybe type" "temp"
    (666751 'move' call_tmp[666748](143864 call _value _mt[243] lhs[143833]))
    (143871 call(143867 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666748]))
    (481148 'end of statement' lhs[143833])
    (519549 'move' ret[519544](519548 'deref' lhs[143833]))
    gotoReturn _end_chpl__coerceMove[519542] _end_chpl__coerceMove[519542]
    (481150 'end of statement' lhs[143833])
    label _end_chpl__coerceMove[519542]
    (519546 return ret[519544])
  }
  function chpl__coerceCopy[143884](arg dstType[143881]:_array[133594](?), arg rhs[143890] :
  (143889 call desyncEltType dstType[143881])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519555] "RVV" "temp"
    unknown eltType[143897] "dead at end of block" "insert auto destroy" "type variable"(143896 call chpl__eltTypeFromArrayRuntimeType dstType[143881])
    (543436 'move' eltType[143897](543434 call chpl__eltTypeFromArrayRuntimeType dstType[143881]))
    const dom[143905] "dead at end of block" "const" "ref var"
    unknown call_tmp[666755] "expr temp" "maybe param" "maybe type" "temp"
    (666758 'move' call_tmp[666755](143904 call chpl__domainFromArrayRuntimeType dstType[143881]))
    (543439 'move' dom[143905](543438 'addr of' call_tmp[666755]))
    (143908 'end of statement')
    unknown call_tmp[666762] "maybe param" "maybe type" "temp"
    (666765 'move' call_tmp[666762](143917 call(143910 call (partial) buildArray _mt[243] dom[143905]) eltType[143897](initElts = 0)))
    unknown lhs[143918] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543441 'init var' lhs[143918] call_tmp[666762])
    (143921 'end of statement' dom[143905] eltType[143897])
    Forall {
      induction variables:
        
        unknown e[143947] "index var" "insert auto destroy"
      iterated expressions:
        lhs[143918]
      shadow variables:
        rhs[143925] 'in' intent outer var rhs[143890]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown call_tmp[666769] "maybe param" "maybe type" "temp"
        (666772 'move' call_tmp[666769](143931 call eltType _mt[243] lhs[143918]))
        unknown copy[143935] "dead at end of block" "no auto destroy"
        (543443 'init var' copy[143935] rhs[143925] call_tmp[666769])
        (143938 'end of statement' rhs[143925] lhs[143918])
        (143944 '=' e[143947] copy[143935])
        (481156 'end of statement' e[143947] copy[143935])
      }
    }
    unknown call_tmp[666776] "expr temp" "maybe param" "maybe type" "temp"
    (666779 'move' call_tmp[666776](143952 call _value _mt[243] lhs[143918]))
    (143959 call(143955 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666776]))
    (481159 'end of statement' lhs[143918])
    (519560 'move' ret[519555](519559 'deref' lhs[143918]))
    gotoReturn _end_chpl__coerceCopy[519553] _end_chpl__coerceCopy[519553]
    (481161 'end of statement' lhs[143918])
    label _end_chpl__coerceCopy[519553]
    (519557 return ret[519555])
  }
  function chpl__coerceMove[143972](arg dstType[143969]:_array[133594](?), in arg rhs[143978] :
  (143977 call desyncEltType dstType[143969])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519566] "RVV" "temp"
    unknown eltType[143985] "dead at end of block" "insert auto destroy" "type variable"(143984 call chpl__eltTypeFromArrayRuntimeType dstType[143969])
    (543448 'move' eltType[143985](543446 call chpl__eltTypeFromArrayRuntimeType dstType[143969]))
    const dom[143993] "dead at end of block" "const" "ref var"
    unknown call_tmp[666783] "expr temp" "maybe param" "maybe type" "temp"
    (666786 'move' call_tmp[666783](143992 call chpl__domainFromArrayRuntimeType dstType[143969]))
    (543451 'move' dom[143993](543450 'addr of' call_tmp[666783]))
    (143996 'end of statement')
    unknown call_tmp[666790] "maybe param" "maybe type" "temp"
    (666793 'move' call_tmp[666790](144005 call(143998 call (partial) buildArray _mt[243] dom[143993]) eltType[143985](initElts = 0)))
    unknown lhs[144006] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543453 'init var' lhs[144006] call_tmp[666790])
    (144009 'end of statement' dom[143993] eltType[143985])
    Forall {
      induction variables:
        
        unknown e[144032] "index var" "insert auto destroy"
      iterated expressions:
        lhs[144006]
      shadow variables:
        rhs[144013] 'in' intent outer var rhs[143978]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[144020] "dead at end of block" "no auto destroy"
        (543455 'init var' copy[144020] rhs[144013] eltType[143985])
        (144023 'end of statement' rhs[144013] eltType[143985])
        (144029 '=' e[144032] copy[144020])
        (481167 'end of statement' e[144032] copy[144020])
      }
    }
    unknown call_tmp[666797] "expr temp" "maybe param" "maybe type" "temp"
    (666800 'move' call_tmp[666797](144037 call _value _mt[243] lhs[144006]))
    (144044 call(144040 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666797]))
    (481170 'end of statement' lhs[144006])
    (519571 'move' ret[519566](519570 'deref' lhs[144006]))
    gotoReturn _end_chpl__coerceMove[519564] _end_chpl__coerceMove[519564]
    (481172 'end of statement' lhs[144006])
    label _end_chpl__coerceMove[519564]
    (519568 return ret[519566])
  }
  function chpl__coerceCopy[144057](arg dstType[144054]:_array[133594](?), arg rhs[144060]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519577] "RVV" "temp"
    unknown eltType[144067] "dead at end of block" "insert auto destroy" "type variable"(144066 call chpl__eltTypeFromArrayRuntimeType dstType[144054])
    (543460 'move' eltType[144067](543458 call chpl__eltTypeFromArrayRuntimeType dstType[144054]))
    const dom[144075] "dead at end of block" "const" "ref var"
    unknown call_tmp[666804] "expr temp" "maybe param" "maybe type" "temp"
    (666807 'move' call_tmp[666804](144074 call chpl__domainFromArrayRuntimeType dstType[144054]))
    (543463 'move' dom[144075](543462 'addr of' call_tmp[666804]))
    (144078 'end of statement')
    unknown call_tmp[666811] "maybe param" "maybe type" "temp"
    (666814 'move' call_tmp[666811](144087 call(144080 call (partial) buildArray _mt[243] dom[144075]) eltType[144067](initElts = 0)))
    unknown lhs[144088] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543465 'init var' lhs[144088] call_tmp[666811])
    (144091 'end of statement' dom[144075] eltType[144067])
    (144101 call chpl__transferArray lhs[144088] rhs[144060](kind = initCopy[137995]))
    (481176 'end of statement' lhs[144088])
    unknown call_tmp[666818] "expr temp" "maybe param" "maybe type" "temp"
    (666821 'move' call_tmp[666818](144104 call _value _mt[243] lhs[144088]))
    (144111 call(144107 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666818]))
    (481178 'end of statement' lhs[144088])
    (519582 'move' ret[519577](519581 'deref' lhs[144088]))
    gotoReturn _end_chpl__coerceCopy[519575] _end_chpl__coerceCopy[519575]
    (481180 'end of statement' lhs[144088])
    label _end_chpl__coerceCopy[519575]
    (519579 return ret[519577])
  }
  function chpl__coerceMove[144124](arg dstType[144121]:_array[133594](?), arg rhs[144127]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519588] "RVV" "temp"
    unknown eltType[144134] "dead at end of block" "insert auto destroy" "type variable"(144133 call chpl__eltTypeFromArrayRuntimeType dstType[144121])
    (543470 'move' eltType[144134](543468 call chpl__eltTypeFromArrayRuntimeType dstType[144121]))
    const dom[144142] "dead at end of block" "const" "ref var"
    unknown call_tmp[666825] "expr temp" "maybe param" "maybe type" "temp"
    (666828 'move' call_tmp[666825](144141 call chpl__domainFromArrayRuntimeType dstType[144121]))
    (543473 'move' dom[144142](543472 'addr of' call_tmp[666825]))
    (144145 'end of statement')
    unknown call_tmp[666832] "maybe param" "maybe type" "temp"
    (666835 'move' call_tmp[666832](144154 call(144147 call (partial) buildArray _mt[243] dom[144142]) eltType[144134](initElts = 0)))
    unknown lhs[144155] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543475 'init var' lhs[144155] call_tmp[666832])
    (144158 'end of statement' dom[144142] eltType[144134])
    (144168 call chpl__transferArray lhs[144155] rhs[144127](kind = move[137993]))
    (481184 'end of statement' lhs[144155])
    unknown call_tmp[666839] "expr temp" "maybe param" "maybe type" "temp"
    (666842 'move' call_tmp[666839](144171 call _value _mt[243] lhs[144155]))
    (144178 call(144174 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666839]))
    (481186 'end of statement' lhs[144155])
    (519593 'move' ret[519588](519592 'deref' lhs[144155]))
    gotoReturn _end_chpl__coerceMove[519586] _end_chpl__coerceMove[519586]
    (481188 'end of statement' lhs[144155])
    label _end_chpl__coerceMove[519586]
    (519590 return ret[519588])
  }
  function chpl__coerceCopy[144191](arg dstType[144188]:_array[133594](?), arg rhs[144193]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519599] "RVV" "temp"
    unknown eltType[144199] "dead at end of block" "insert auto destroy" "type variable"(144198 call chpl__eltTypeFromArrayRuntimeType dstType[144188])
    (543480 'move' eltType[144199](543478 call chpl__eltTypeFromArrayRuntimeType dstType[144188]))
    const dom[144207] "dead at end of block" "const" "ref var"
    unknown call_tmp[666846] "expr temp" "maybe param" "maybe type" "temp"
    (666849 'move' call_tmp[666846](144206 call chpl__domainFromArrayRuntimeType dstType[144188]))
    (543483 'move' dom[144207](543482 'addr of' call_tmp[666846]))
    (144210 'end of statement')
    unknown call_tmp[666853] "maybe param" "maybe type" "temp"
    (666856 'move' call_tmp[666853](144219 call(144212 call (partial) buildArray _mt[243] dom[144207]) eltType[144199](initElts = 0)))
    unknown lhs[144220] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543485 'init var' lhs[144220] call_tmp[666853])
    (144223 'end of statement' dom[144207] eltType[144199])
    (144233 call chpl__transferArray lhs[144220] rhs[144193](kind = initCopy[137995]))
    (481192 'end of statement' lhs[144220])
    unknown call_tmp[666860] "expr temp" "maybe param" "maybe type" "temp"
    (666863 'move' call_tmp[666860](144236 call _value _mt[243] lhs[144220]))
    (144243 call(144239 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666860]))
    (481194 'end of statement' lhs[144220])
    (519604 'move' ret[519599](519603 'deref' lhs[144220]))
    gotoReturn _end_chpl__coerceCopy[519597] _end_chpl__coerceCopy[519597]
    (481196 'end of statement' lhs[144220])
    label _end_chpl__coerceCopy[519597]
    (519601 return ret[519599])
  }
  function chpl__coerceMove[144256](arg dstType[144253]:_array[133594](?), in arg rhs[144258]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519610] "RVV" "temp"
    unknown eltType[144264] "dead at end of block" "insert auto destroy" "type variable"(144263 call chpl__eltTypeFromArrayRuntimeType dstType[144253])
    (543490 'move' eltType[144264](543488 call chpl__eltTypeFromArrayRuntimeType dstType[144253]))
    const dom[144272] "dead at end of block" "const" "ref var"
    unknown call_tmp[666867] "expr temp" "maybe param" "maybe type" "temp"
    (666870 'move' call_tmp[666867](144271 call chpl__domainFromArrayRuntimeType dstType[144253]))
    (543493 'move' dom[144272](543492 'addr of' call_tmp[666867]))
    (144275 'end of statement')
    unknown call_tmp[666874] "maybe param" "maybe type" "temp"
    (666877 'move' call_tmp[666874](144284 call(144277 call (partial) buildArray _mt[243] dom[144272]) eltType[144264](initElts = 0)))
    unknown lhs[144285] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543495 'init var' lhs[144285] call_tmp[666874])
    (144288 'end of statement' dom[144272] eltType[144264])
    (144298 call chpl__transferArray lhs[144285] rhs[144258](kind = initCopy[137995]))
    (481200 'end of statement' lhs[144285])
    unknown call_tmp[666881] "expr temp" "maybe param" "maybe type" "temp"
    (666884 'move' call_tmp[666881](144301 call _value _mt[243] lhs[144285]))
    (144308 call(144304 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666881]))
    (481202 'end of statement' lhs[144285])
    (519615 'move' ret[519610](519614 'deref' lhs[144285]))
    gotoReturn _end_chpl__coerceMove[519608] _end_chpl__coerceMove[519608]
    (481204 'end of statement' lhs[144285])
    label _end_chpl__coerceMove[519608]
    (519612 return ret[519610])
  }
  function chpl__unref[144323](arg x[144320]:_array[133594](?)) : _unknown[51] "inline" "no copy return" "unref fn"
  {
    unknown ret[519621] "RVV" "temp"
    unknown ret[144333] "dead at end of block" "no auto destroy"
    (543497 'init var' ret[144333] x[144320])
    (144336 'end of statement')
    (519626 'move' ret[519621](519625 'deref' ret[144333]))
    gotoReturn _end_chpl__unref[519619] _end_chpl__unref[519619]
    (481206 'end of statement' ret[144333])
    label _end_chpl__unref[519619]
    (519623 return ret[519621])
  }
  where {
    unknown call_tmp[666890] "expr temp" "maybe param" "maybe type" "temp"
    (666893 'move' call_tmp[666890](144327 call _value _mt[243] x[144320]))
    (144331 call chpl__isArrayView call_tmp[666890])
  }
  function chpl__unref[144350](arg ir[144347]:_iteratorRecord[205](?)) : _unknown[51] "no copy return" "unref fn"
  {
    unknown ret[519632] "RVV" "temp"
    unknown call_tmp[666895] "maybe param" "maybe type" "temp"
    (666898 'move' call_tmp[666895](144355 call chpl__initCopy ir[144347]))
    unknown toArray[144356] "dead at end of block" "no auto destroy" "no copy"
    (543499 'init var' toArray[144356] call_tmp[666895])
    (144359 'end of statement')
    (519637 'move' ret[519632](519636 'deref' toArray[144356]))
    gotoReturn _end_chpl__unref[519630] _end_chpl__unref[519630]
    (481208 'end of statement' toArray[144356])
    label _end_chpl__unref[519630]
    (519634 return ret[519632])
  }
  function chpl__unref[144374](arg x[144371]:_array[133594](?)) : _unknown[51] "inline" "no copy return"
  {
    unknown ret[519643] "RVV" "temp"
    unknown ret[144377] "dead at end of block" "insert auto destroy" "no copy"
    (543501 'init var' ret[144377] x[144371])
    (144380 'end of statement')
    (519648 'move' ret[519643](519647 'deref' ret[144377]))
    gotoReturn _end_chpl__unref[519641] _end_chpl__unref[519641]
    (481210 'end of statement' ret[144377])
    label _end_chpl__unref[519641]
    (519645 return ret[519643])
  }
  function chpl__unalias[144395](arg x[144392]:_array[133594](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519654] "RVV" "temp"
    unknown tmp[427048] "maybe param" "temp"
    unknown tmp[427069] "maybe param" "temp"
    unknown call_tmp[666902] "expr temp" "maybe param" "maybe type" "temp"
    (666905 'move' call_tmp[666902](144398 call _value _mt[243] x[144392]))
    (427080 'move' tmp[427069](144405 call(144401 call (partial) isSliceArrayView _mt[243] call_tmp[666902])))
    unknown call_tmp[666909] "expr temp" "maybe param" "maybe type" "temp"
    (666912 'move' call_tmp[666909](427082 call _cond_invalid tmp[427069]))
    if call_tmp[666909]
    {
      (427085 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568382] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568383] "maybe param" "temp"
    unknown call_tmp[666914] "expr temp" "maybe param" "maybe type" "temp"
    (666917 'move' call_tmp[666914](427070 call isTrue tmp[427069]))
    (568388 'move' tmp[568383](568386 call _cond_test call_tmp[666914]))
    if tmp[568383]
    {
      (568393 'move' tmp[568382](568390 '_paramFoldLogical' tmp[568383] 1))
    }
    {
      unknown tmp[568395] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666921] "expr temp" "maybe param" "maybe type" "temp"
      (666924 'move' call_tmp[666921](144407 call _value _mt[243] x[144392]))
      unknown call_tmp[666928] "expr temp" "maybe param" "maybe type" "temp"
      (666931 'move' call_tmp[666928](144414 call(144410 call (partial) isRankChangeArrayView _mt[243] call_tmp[666921])))
      (568397 'move' tmp[568395](427074 call isTrue call_tmp[666928]))
      (568402 'move' tmp[568382](568399 '_paramFoldLogical' tmp[568383] tmp[568395]))
    }
    (427059 'move' tmp[427048] tmp[568382])
    unknown call_tmp[666933] "expr temp" "maybe param" "maybe type" "temp"
    (666936 'move' call_tmp[666933](427061 call _cond_invalid tmp[427048]))
    if call_tmp[666933]
    {
      (427064 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown isview[144428] "dead at end of block" "param"
    unknown tmp[568409] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568410] "maybe param" "temp"
    unknown call_tmp[666938] "expr temp" "maybe param" "maybe type" "temp"
    (666941 'move' call_tmp[666938](427049 call isTrue tmp[427048]))
    (568415 'move' tmp[568410](568413 call _cond_test call_tmp[666938]))
    if tmp[568410]
    {
      (568420 'move' tmp[568409](568417 '_paramFoldLogical' tmp[568410] 1))
    }
    {
      unknown tmp[568422] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666945] "expr temp" "maybe param" "maybe type" "temp"
      (666948 'move' call_tmp[666945](144418 call _value _mt[243] x[144392]))
      unknown call_tmp[666952] "expr temp" "maybe param" "maybe type" "temp"
      (666955 'move' call_tmp[666952](144425 call(144421 call (partial) isReindexArrayView _mt[243] call_tmp[666945])))
      (568424 'move' tmp[568422](427053 call isTrue call_tmp[666952]))
      (568429 'move' tmp[568409](568426 '_paramFoldLogical' tmp[568410] tmp[568422]))
    }
    (543503 'init var' isview[144428] tmp[568409])
    (144431 'end of statement')
    unknown call_tmp[666957] "expr temp" "maybe param" "maybe type" "temp"
    (666960 'move' call_tmp[666957](144457 call _cond_test isview[144428]))
    if call_tmp[666957]
    {
      unknown ret[144435] "dead at end of block" "no auto destroy"
      (543505 'init var' ret[144435] x[144392])
      (144438 'end of statement')
      (144443 call chpl__autoDestroy x[144392])
      (481214 'end of statement')
      (519659 'move' ret[519654](519658 'deref' ret[144435]))
      gotoReturn _end_chpl__unalias[519652] _end_chpl__unalias[519652]
      (481215 'end of statement' ret[144435])
    }
    {
      unknown ret[144449] "dead at end of block" "insert auto destroy" "no copy"
      (543507 'init var' ret[144449] x[144392])
      (144452 'end of statement')
      (519664 'move' ret[519654](519663 'deref' ret[144449]))
      gotoReturn _end_chpl__unalias[519652] _end_chpl__unalias[519652]
      (481217 'end of statement' ret[144449])
    }
    label _end_chpl__unalias[519652]
    (519656 return ret[519654])
  }
  function chpl__initCopy[144469](arg ir[144466]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519670] "RVV" "temp"
    unknown call_tmp[666964] "expr temp" "maybe param" "maybe type" "temp"
    (666967 'move' call_tmp[666964](144478 call _shape_ _mt[243] ir[144466]))
    unknown call_tmp[666969] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (666972 'move' call_tmp[666969](747951 'new' _domain[125908](?) call_tmp[666964]))
    unknown shape[144483] "dead at end of block"
    (543509 'init var' shape[144483] call_tmp[666969])
    (144486 'end of statement')
    unknown call_tmp[666976] "expr temp" "maybe param" "maybe type" "temp"
    (666979 'move' call_tmp[666976](144489 call _unowned _mt[243] shape[144483]))
    (144493 call = call_tmp[666976] 1)
    (481219 'end of statement' shape[144483])
    unknown call_tmp[666981] "expr temp" "maybe param" "maybe type" "temp"
    (666984 'move' call_tmp[666981](144500 call chpl__initCopy_shapeHelp shape[144483] ir[144466]))
    (519675 'move' ret[519670](519674 'deref' call_tmp[666981]))
    gotoReturn _end_chpl__initCopy[519668] _end_chpl__initCopy[519668]
    (481221 'end of statement' shape[144483])
    label _end_chpl__initCopy[519668]
    (519672 return ret[519670])
  }
  where {
    (144474 call chpl_iteratorHasDomainShape ir[144466])
  }
  function chpl__initCopy[144512](arg ir[144509]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519681] "RVV" "temp"
    unknown call_tmp[666988] "expr temp" "maybe param" "maybe type" "temp"
    (666991 'move' call_tmp[666988](144527 call _shape_ _mt[243] ir[144509]))
    unknown call_tmp[666993] "maybe param" "maybe type" "temp"
    (666996 'move' call_tmp[666993](144531 call chpl__buildDomainExpr call_tmp[666988]))
    unknown shape[144533] "dead at end of block" "insert auto destroy"
    (543511 'init var' shape[144533] call_tmp[666993])
    (144536 'end of statement')
    unknown call_tmp[666998] "expr temp" "maybe param" "maybe type" "temp"
    (667001 'move' call_tmp[666998](144542 call chpl__initCopy_shapeHelp shape[144533] ir[144509]))
    (519686 'move' ret[519681](519685 'deref' call_tmp[666998]))
    gotoReturn _end_chpl__initCopy[519679] _end_chpl__initCopy[519679]
    (481223 'end of statement' shape[144533])
    label _end_chpl__initCopy[519679]
    (519683 return ret[519681])
  }
  where {
    unknown tmp[427090] "maybe param" "temp"
    (427101 'move' tmp[427090](144517 call chpl_iteratorHasRangeShape ir[144509]))
    unknown call_tmp[667003] "expr temp" "maybe param" "maybe type" "temp"
    (667006 'move' call_tmp[667003](427103 call _cond_invalid tmp[427090]))
    if call_tmp[667003]
    {
      (427106 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568436] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568437] "maybe param" "temp"
    unknown call_tmp[667008] "expr temp" "maybe param" "maybe type" "temp"
    (667011 'move' call_tmp[667008](427091 call isTrue tmp[427090]))
    (568442 'move' tmp[568437](568440 call _cond_test call_tmp[667008]))
    if tmp[568437]
    {
      unknown tmp[568444] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[667013] "expr temp" "maybe param" "maybe type" "temp"
      (667016 'move' call_tmp[667013](144521 call chpl_iteratorFromForExpr ir[144509]))
      unknown call_tmp[667018] "expr temp" "maybe param" "maybe type" "temp"
      (667021 'move' call_tmp[667018](144522 call ! call_tmp[667013]))
      (568446 'move' tmp[568444](427094 call isTrue call_tmp[667018]))
      (568451 'move' tmp[568436](568448 '_paramFoldLogical' tmp[568437] tmp[568444]))
    }
    {
      (568456 'move' tmp[568436](568453 '_paramFoldLogical' tmp[568437] 0))
    }
    (748391 call chpl_statementLevelSymbol tmp[568436])
  }
  function chpl__initCopy_shapeHelp[144554](arg shape[144551]:_domain[125908](?), arg ir[144557]:_iteratorRecord[205](?)) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[519692] "RVV" "temp"
    unknown call_tmp[667025] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667028 'move' call_tmp[667025](144566 'typeof' ir[144557]))
    unknown call_tmp[667030] "expr temp" "maybe param" "maybe type" "temp"
    (667033 'move' call_tmp[667030](144568 call iteratorToArrayElementType call_tmp[667025]))
    unknown call_tmp[667035] "maybe param" "maybe type" "temp"
    (667038 'move' call_tmp[667035](144572 call(144561 call (partial) buildArray _mt[243] shape[144551]) call_tmp[667030](initElts = 0)))
    unknown result[144573] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543513 'init var' result[144573] call_tmp[667035])
    (144576 'end of statement')
    unknown call_tmp[667042] "expr temp" "maybe param" "maybe type" "temp"
    (667045 'move' call_tmp[667042](144580 call eltType _mt[243] result[144573]))
    unknown call_tmp[667047] "expr temp" "maybe param" "maybe type" "temp"
    (667050 'move' call_tmp[667047](144584 call isArray call_tmp[667042]))
    unknown call_tmp[667052] "expr temp" "maybe param" "maybe type" "temp"
    (667055 'move' call_tmp[667052](144608 call _cond_test call_tmp[667047]))
    if call_tmp[667052]
    {
      (144606 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    unknown call_tmp[667057] "expr temp" "maybe param" "maybe type" "temp"
    (667060 'move' call_tmp[667057](144616 call chpl_iteratorFromForExpr ir[144557]))
    unknown call_tmp[667062] "expr temp" "maybe param" "maybe type" "temp"
    (667065 'move' call_tmp[667062](144873 call _cond_test call_tmp[667057]))
    if call_tmp[667062]
    {
      unknown call_tmp[667069] "expr temp" "maybe param" "maybe type" "temp"
      (667072 'move' call_tmp[667069](144619 call eltType _mt[243] result[144573]))
      unknown call_tmp[667074] "expr temp" "maybe param" "maybe type" "temp"
      (667077 'move' call_tmp[667074](144623 call needsInitWorkaround call_tmp[667069]))
      unknown call_tmp[667079] "expr temp" "maybe param" "maybe type" "temp"
      (667082 'move' call_tmp[667079](144787 call _cond_test call_tmp[667074]))
      if call_tmp[667079]
      {
        {
          unknown _indexOfInterest[144656] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144657] "expr temp" "temp"
          unknown call_tmp[667086] "expr temp" "maybe param" "maybe type" "temp"
          (667089 'move' call_tmp[667086](144666 call _dom _mt[243] result[144573]))
          unknown call_tmp[667091] "expr temp" "maybe param" "maybe type" "temp"
          (667094 'move' call_tmp[667091](144669 call _getIterator call_tmp[667086]))
          unknown call_tmp[667096] "expr temp" "maybe param" "maybe type" "temp"
          (667099 'move' call_tmp[667096](144673 call _getIterator ir[144557]))
          (144675 'move' _iterator[144657](144635 call _build_tuple call_tmp[667091] call_tmp[667096]))
          Defer
          {
            {
              (144705 call _freeIterator _iterator[144657])
            }
          }
          { scopeless type
            (144680 'move' _indexOfInterest[144656](144677 call iteratorIndex _iterator[144657]))
          }
          ForLoop[144658]
          {
            (144685 call _check_tuple_var_decl _indexOfInterest[144656] 2)
            (481227 'end of statement')
            unknown ri[144691] "index var" "insert auto destroy"
            (481228 'end of statement')
            (144693 'move' ri[144691](144689 call _indexOfInterest[144656] 0))
            (481229 'end of statement' ri[144691])
            unknown src[144698] "index var" "insert auto destroy"
            (481231 'end of statement')
            (144700 'move' src[144698](144696 call _indexOfInterest[144656] 1))
            (481232 'end of statement' src[144698])
            {
              unknown r[144640] "dead at end of block" "ref var"
              unknown call_tmp[667101] "expr temp" "maybe param" "maybe type" "temp"
              (667104 'move' call_tmp[667101](144639 call result[144573] ri[144691]))
              (543516 'move' r[144640](543515 'addr of' call_tmp[667101]))
              (144643 'end of statement')
              unknown copy[144646] "dead at end of block" "no auto destroy"
              (543518 'init var' copy[144646] src[144698])
              (144649 'end of statement' result[144573] ri[144691] src[144698])
              (144654 '=' r[144640] copy[144646])
              (481237 'end of statement' r[144640] copy[144646])
            }
            label _continueLabel[144661]
            _indexOfInterest[144656]
            _iterator[144657]
          }
          label _breakLabel[144662]
        }
      }
      {
        {
          unknown _indexOfInterest[144734] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144735] "expr temp" "temp"
          unknown call_tmp[667106] "expr temp" "maybe param" "maybe type" "temp"
          (667109 'move' call_tmp[667106](144744 call _getIterator result[144573]))
          unknown call_tmp[667111] "expr temp" "maybe param" "maybe type" "temp"
          (667114 'move' call_tmp[667111](144747 call _getIterator ir[144557]))
          (144749 'move' _iterator[144735](144721 call _build_tuple call_tmp[667106] call_tmp[667111]))
          Defer
          {
            {
              (144779 call _freeIterator _iterator[144735])
            }
          }
          { scopeless type
            (144754 'move' _indexOfInterest[144734](144751 call iteratorIndex _iterator[144735]))
          }
          ForLoop[144736]
          {
            (144759 call _check_tuple_var_decl _indexOfInterest[144734] 2)
            (481241 'end of statement')
            unknown r[144765] "index var" "insert auto destroy"
            (481242 'end of statement')
            (144767 'move' r[144765](144763 call _indexOfInterest[144734] 0))
            (481243 'end of statement' r[144765])
            unknown src[144772] "index var" "insert auto destroy"
            (481245 'end of statement')
            (144774 'move' src[144772](144770 call _indexOfInterest[144734] 1))
            (481246 'end of statement' src[144772])
            {
              unknown copy[144723] "dead at end of block" "no auto destroy"
              (543520 'init var' copy[144723] src[144772])
              (144726 'end of statement' src[144772])
              (144732 '=' r[144765] copy[144723])
              (481249 'end of statement' r[144765] copy[144723])
            }
            label _continueLabel[144739]
            _indexOfInterest[144734]
            _iterator[144735]
          }
          label _breakLabel[144740]
        }
      }
    }
    {
      unknown call_tmp[667118] "expr temp" "maybe param" "maybe type" "temp"
      (667121 'move' call_tmp[667118](144794 call eltType _mt[243] result[144573]))
      unknown call_tmp[667123] "expr temp" "maybe param" "maybe type" "temp"
      (667126 'move' call_tmp[667123](144798 call needsInitWorkaround call_tmp[667118]))
      unknown call_tmp[667128] "expr temp" "maybe param" "maybe type" "temp"
      (667131 'move' call_tmp[667128](144868 call _cond_test call_tmp[667123]))
      if call_tmp[667128]
      {
        unknown call_tmp[667135] "expr temp" "maybe param" "maybe type" "temp"
        (667138 'move' call_tmp[667135](415918 call _dom _mt[243] result[144573]))
        unknown call_tmp[667140] "maybe param" "maybe type" "temp"
        (667143 'move' call_tmp[667140](415914 call chpl__staticAutoLocalCheck result[144573] call_tmp[667135]))
        unknown chpl__staticAutoLocalCheckSym[415913] "dead at end of block" "param"
        (543522 'init var' chpl__staticAutoLocalCheckSym[415913] call_tmp[667140])
        (481252 'end of statement' result[144573] result[144573])
        if chpl__staticAutoLocalCheckSym[415913]
        {
          unknown call_tmp[667147] "expr temp" "maybe param" "maybe type" "temp"
          (667150 'move' call_tmp[667147](144805 call _dom _mt[243] result[144573]))
          Forall {
            induction variables:
              
              unknown ri[144832] "index var" "insert auto destroy"
              
              unknown src[144834] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667147]
              ir[144557]
            shadow variables:
            other variables
              forall body
            {
              unknown r[144815] "dead at end of block" "ref var"
              unknown call_tmp[667152] "expr temp" "maybe param" "maybe type" "temp"
              (667155 'move' call_tmp[667152](415924 'may be local access' result[144573] ri[144832] chpl__staticAutoLocalCheckSym[415913] 1))
              (543525 'move' r[144815](543524 'addr of' call_tmp[667152]))
              (144818 'end of statement')
              unknown copy[144821] "dead at end of block" "no auto destroy"
              (543527 'init var' copy[144821] src[144834])
              (144824 'end of statement' result[144573] ri[144832] src[144834])
              (144829 '=' r[144815] copy[144821])
              (481258 'end of statement' r[144815] copy[144821])
            }
          }
        }
        {
          unknown call_tmp[667159] "expr temp" "maybe param" "maybe type" "temp"
          (667162 'move' call_tmp[667159](415909 call _dom _mt[243] result[144573]))
          Forall {
            induction variables:
              
              unknown ri[415904] "index var" "insert auto destroy"
              
              unknown src[415906] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667159]
              ir[144557]
            shadow variables:
            other variables
              forall body
            {
              unknown r[415890] "dead at end of block" "ref var"
              unknown call_tmp[667164] "expr temp" "maybe param" "maybe type" "temp"
              (667167 'move' call_tmp[667164](415892 call result[144573] ri[415904]))
              (543530 'move' r[415890](543529 'addr of' call_tmp[667164]))
              (415895 'end of statement')
              unknown copy[415896] "dead at end of block" "no auto destroy"
              (543532 'init var' copy[415896] src[415906])
              (415899 'end of statement' result[144573] ri[415904] src[415906])
              (415900 '=' r[415890] copy[415896])
              (481264 'end of statement' r[415890] copy[415896])
            }
          }
        }
      }
      {
        Forall {
          induction variables:
            
            unknown r[144861] "index var" "insert auto destroy"
            
            unknown src[144863] "index var" "insert auto destroy"
          iterated expressions:
            result[144573]
            ir[144557]
          shadow variables:
          other variables
            forall body
          {
            unknown copy[144849] "dead at end of block" "no auto destroy"
            (543534 'init var' copy[144849] src[144863])
            (144852 'end of statement' src[144863])
            (144858 '=' r[144861] copy[144849])
            (481268 'end of statement' r[144861] copy[144849])
          }
        }
      }
    }
    unknown call_tmp[667171] "expr temp" "maybe param" "maybe type" "temp"
    (667174 'move' call_tmp[667171](144878 call _value _mt[243] result[144573]))
    (144885 call(144881 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[667171]))
    (481271 'end of statement' result[144573])
    (519697 'move' ret[519692](519696 'deref' result[144573]))
    gotoReturn _end_chpl__initCopy_shapeHelp[519690] _end_chpl__initCopy_shapeHelp[519690]
    (481273 'end of statement' result[144573])
    label _end_chpl__initCopy_shapeHelp[519690]
    (519694 return ret[519692])
  }
  function chpl__throwErrorUnchecked[144900](in arg e[144897] :
  (144895 call _owned[30](?) Error[167984])) : _unknown[51] throws "unchecked throws" "no return value for void"
  {
    unknown call_tmp[667178] "expr temp" "maybe param" "maybe type" "temp"
    (667181 'move' call_tmp[667178](468082 call chpl_fix_thrown_error e[144897]))
    (144903 'throw' call_tmp[667178])
    (519701 return _void[55])
  }
  function chpl__initCopy[144914](arg ir[144911]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519705] "RVV" "temp"
    unknown call_tmp[667183] "maybe param" "maybe type" "temp"
    (667186 'move' call_tmp[667183](144919 call chpl_iteratorHasRangeShape ir[144911]))
    unknown shapeful[144920] "dead at end of block" "param"
    (543536 'init var' shapeful[144920] call_tmp[667183])
    (144923 'end of statement')
    unknown r[144937] "dead at end of block"
    unknown tmp[568463] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568464] "maybe param" "temp"
    (568469 'move' tmp[568464](568467 call _cond_test shapeful[144920]))
    if tmp[568464]
    {
      unknown tmp[568471] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568473 'move' tmp[568471](144927 call _shape_ _mt[243] ir[144911]))
      (568478 'move' tmp[568463](568475 '_paramFoldLogical' tmp[568464] tmp[568471]))
    }
    {
      unknown tmp[568480] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568482 'move' tmp[568480](144932 call chpl_build_bounded_range 1 0))
      (568487 'move' tmp[568463](568484 '_paramFoldLogical' tmp[568464] tmp[568480]))
    }
    (543538 'init var' r[144937] tmp[568463])
    (144940 'end of statement')
    unknown i[144942] "dead at end of block"
    (543540 'init var' i[144942] 0)
    (144945 'end of statement')
    unknown call_tmp[667192] "expr temp" "maybe param" "maybe type" "temp"
    (667195 'move' call_tmp[667192](144947 call size _mt[243] r[144937]))
    unknown call_tmp[667197] "maybe param" "maybe type" "temp"
    (667200 'move' call_tmp[667197](144951 call _cast size_t[20657] call_tmp[667192]))
    unknown size[144953] "dead at end of block"
    (543542 'init var' size[144953] call_tmp[667197])
    (144956 'end of statement')
    unknown call_tmp[667202] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667205 'move' call_tmp[667202](144959 'typeof' ir[144911]))
    unknown elemType[144962] "dead at end of block" "type variable"(144961 call iteratorToArrayElementType call_tmp[667202])
    unknown call_tmp[667207] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667210 'move' call_tmp[667207](543546 'typeof' ir[144911]))
    (543548 'move' elemType[144962](543545 call iteratorToArrayElementType call_tmp[667207]))
    unknown call_tmp[667212] "maybe param" "maybe type" "temp"
    (667215 'move' call_tmp[667212](144968 call _ddata[11696](?) elemType[144962]))
    unknown data[144970] "dead at end of block"
    (543550 'init var' data[144970] nil[44] call_tmp[667212])
    (144973 'end of statement')
    unknown callPostAlloc[144975] "dead at end of block"
    (543552 'default init var' callPostAlloc[144975] bool[10])
    (144978 'end of statement')
    unknown subloc[144980] "dead at end of block"
    (543554 'init var' subloc[144980] c_sublocid_none[89873])
    (144983 'end of statement')
    unknown call_tmp[667217] "expr temp" "maybe param" "maybe type" "temp"
    (667220 'move' call_tmp[667217](144986 call > size[144953] 0))
    unknown call_tmp[667222] "expr temp" "maybe param" "maybe type" "temp"
    (667225 'move' call_tmp[667222](144999 call _cond_test call_tmp[667217]))
    if call_tmp[667222]
    {
      unknown call_tmp[667227] "expr temp" "maybe param" "maybe type" "temp"
      (667230 'move' call_tmp[667227](144994 call _ddata_allocate_noinit elemType[144962] size[144953] callPostAlloc[144975]))
      (144995 call = data[144970] call_tmp[667227])
      (481278 'end of statement' data[144970] elemType[144962] size[144953] callPostAlloc[144975])
    }
    Try
    {
      {
        {
          unknown _indexOfInterest[145147] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145148] "expr temp" "temp"
          (145157 'move' _iterator[145148](145155 call _getIterator ir[144911]))
          Defer
          {
            {
              (145173 call _freeIterator _iterator[145148])
            }
          }
          { scopeless type
            (145162 'move' _indexOfInterest[145147](145159 call iteratorIndex _iterator[145148]))
          }
          ForLoop[145149]
          {
            unknown elt[145166] "index var" "insert auto destroy"
            (481284 'end of statement')
            (145168 'move' elt[145166] _indexOfInterest[145147])
            (481285 'end of statement' elt[145166])
            {
              unknown call_tmp[667232] "maybe param" "maybe type" "temp"
              (667235 'move' call_tmp[667232](145008 call chpl__initCopy elt[145166]))
              unknown eltCopy[145010] "dead at end of block" "no auto destroy" "no copy"
              (543556 'init var' eltCopy[145010] call_tmp[667232])
              (145013 'end of statement' elt[145166])
              unknown call_tmp[667237] "expr temp" "maybe param" "maybe type" "temp"
              (667240 'move' call_tmp[667237](145017 call >= i[144942] size[144953]))
              unknown call_tmp[667242] "expr temp" "maybe param" "maybe type" "temp"
              (667245 'move' call_tmp[667242](145129 call _cond_test call_tmp[667237]))
              if call_tmp[667242]
              {
                unknown oldSize[145020] "dead at end of block"
                (543558 'init var' oldSize[145020] size[144953])
                (145023 'end of statement')
                unknown oldData[145026] "dead at end of block"
                (543560 'init var' oldData[145026] data[144970])
                (145029 'end of statement' size[144953] data[144970])
                unknown call_tmp[667247] "expr temp" "maybe param" "maybe type" "temp"
                (667250 'move' call_tmp[667247](145032 call == size[144953] 0))
                unknown call_tmp[667252] "expr temp" "maybe param" "maybe type" "temp"
                (667255 'move' call_tmp[667252](145047 call _cond_test call_tmp[667247]))
                if call_tmp[667252]
                {
                  (145036 call = size[144953] 4)
                  (481290 'end of statement' size[144953])
                }
                {
                  unknown call_tmp[667257] "expr temp" "maybe param" "maybe type" "temp"
                  (667260 'move' call_tmp[667257](145042 call * 2 size[144953]))
                  (145044 call = size[144953] call_tmp[667257])
                  (481292 'end of statement' size[144953] size[144953])
                }
                unknown call_tmp[667262] "expr temp" "maybe param" "maybe type" "temp"
                (667265 'move' call_tmp[667262](145059 call _ddata_allocate_noinit elemType[144962] size[144953] callPostAlloc[144975]))
                (145060 call = data[144970] call_tmp[667262])
                (481295 'end of statement' data[144970] elemType[144962] size[144953] callPostAlloc[144975])
                {
                  unknown _indexOfInterest[145083] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[145084] "expr temp" "temp"
                  unknown call_tmp[667267] "expr temp" "maybe param" "maybe type" "temp"
                  (667270 'move' call_tmp[667267](145100 call chpl_direct_counted_range_iter 0 oldSize[145020]))
                  (145093 'move' _iterator[145084](145091 call _getIterator call_tmp[667267]))
                  Defer
                  {
                    {
                      (145116 call _freeIterator _iterator[145084])
                    }
                  }
                  { scopeless type
                    (145105 'move' _indexOfInterest[145083](145102 call iteratorIndex _iterator[145084]))
                  }
                  ForLoop[145085]
                  {
                    unknown i[145109] "index var" "insert auto destroy"
                    (481301 'end of statement')
                    (145111 'move' i[145109] _indexOfInterest[145083])
                    (481302 'end of statement' i[145109])
                    {
                      unknown call_tmp[667272] "expr temp" "maybe param" "maybe type" "temp"
                      (667275 'move' call_tmp[667272](145075 call data[144970] i[145109]))
                      unknown call_tmp[667277] "expr temp" "maybe param" "maybe type" "temp"
                      (667280 'move' call_tmp[667277](145079 call oldData[145026] i[145109]))
                      (145080 '=' call_tmp[667272] call_tmp[667277])
                      (481304 'end of statement' data[144970] i[145109] oldData[145026] i[145109])
                    }
                    label _continueLabel[145088]
                    _indexOfInterest[145083]
                    _iterator[145084]
                  }
                  label _breakLabel[145089]
                }
                (145127 call _ddata_free oldData[145026] oldSize[145020])
                (481309 'end of statement' oldData[145026] oldSize[145020])
              }
              unknown call_tmp[667282] "expr temp" "maybe param" "maybe type" "temp"
              (667285 'move' call_tmp[667282](145138 call data[144970] i[144942]))
              (145140 '=' call_tmp[667282] eltCopy[145010])
              (481312 'end of statement' data[144970] i[144942] eltCopy[145010])
              (145144 call += i[144942] 1)
              (481316 'end of statement' i[144942])
            }
            label _continueLabel[145152]
            _indexOfInterest[145147]
            _iterator[145148]
          }
          label _breakLabel[145153]
        }
      }
    }
    Catch e : Error
    {
      unknown call_tmp[667287] "maybe param" "maybe type" "temp"
      (667290 'move' call_tmp[667287](354363 'current error'))
      unknown tmp[354360] "dead at end of block" "temp"
      (543562 'init var' tmp[354360] call_tmp[667287])
      unknown call_tmp[667292] "expr temp" "maybe param" "maybe type" "temp"
      (667295 'move' call_tmp[667292](354367 'to non nilable class' tmp[354360]))
      unknown call_tmp[667297] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (667300 'move' call_tmp[667297](747952 'new' _owned[30](?) call_tmp[667292]))
      unknown e[354366] "dead at end of block"
      (543564 'init var' e[354366] call_tmp[667297])
      (481318 'end of statement')
      {
        {
          unknown _indexOfInterest[145202] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145203] "expr temp" "temp"
          unknown call_tmp[667302] "expr temp" "maybe param" "maybe type" "temp"
          (667305 'move' call_tmp[667302](145217 call - i[144942] 1))
          unknown call_tmp[667307] "expr temp" "maybe param" "maybe type" "temp"
          (667310 'move' call_tmp[667307](145220 call chpl_direct_range_iter 0 call_tmp[667302] 1))
          (145212 'move' _iterator[145203](145210 call _getIterator call_tmp[667307]))
          Defer
          {
            {
              (145236 call _freeIterator _iterator[145203])
            }
          }
          { scopeless type
            (145225 'move' _indexOfInterest[145202](145222 call iteratorIndex _iterator[145203]))
          }
          ForLoop[145204]
          {
            unknown j[145229] "index var" "insert auto destroy"
            (481320 'end of statement')
            (145231 'move' j[145229] _indexOfInterest[145202])
            (481321 'end of statement' j[145229])
            {
              unknown call_tmp[667312] "expr temp" "maybe param" "maybe type" "temp"
              (667315 'move' call_tmp[667312](145197 call data[144970] j[145229]))
              (145199 call chpl__autoDestroy call_tmp[667312])
              (481323 'end of statement' data[144970] j[145229])
            }
            label _continueLabel[145207]
            _indexOfInterest[145202]
            _iterator[145203]
          }
          label _breakLabel[145208]
        }
        (145248 call _ddata_free data[144970] size[144953])
        (481326 'end of statement' data[144970] size[144953])
        (145253 call chpl__throwErrorUnchecked e[354366])
        (481329 'end of statement' e[354366])
      }
    }
    unknown tmp[427111] "maybe param" "temp"
    (427122 'move' tmp[427111] shapeful[144920])
    unknown call_tmp[667317] "expr temp" "maybe param" "maybe type" "temp"
    (667320 'move' call_tmp[667317](427124 call _cond_invalid tmp[427111]))
    if call_tmp[667317]
    {
      (427127 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568494] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568495] "maybe param" "temp"
    unknown call_tmp[667322] "expr temp" "maybe param" "maybe type" "temp"
    (667325 'move' call_tmp[667322](427112 call isTrue tmp[427111]))
    (568500 'move' tmp[568495](568498 call _cond_test call_tmp[667322]))
    if tmp[568495]
    {
      unknown tmp[568502] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[667329] "expr temp" "maybe param" "maybe type" "temp"
      (667332 'move' call_tmp[667329](145261 call size _mt[243] r[144937]))
      unknown call_tmp[667334] "expr temp" "maybe param" "maybe type" "temp"
      (667337 'move' call_tmp[667334](145264 call < i[144942] call_tmp[667329]))
      (568504 'move' tmp[568502](427115 call isTrue call_tmp[667334]))
      (568509 'move' tmp[568494](568506 '_paramFoldLogical' tmp[568495] tmp[568502]))
    }
    {
      (568514 'move' tmp[568494](568511 '_paramFoldLogical' tmp[568495] 0))
    }
    unknown call_tmp[667339] "expr temp" "maybe param" "maybe type" "temp"
    (667342 'move' call_tmp[667339](145276 call _cond_test tmp[568494]))
    if call_tmp[667339]
    {
      unknown call_tmp[667344] "expr temp" "maybe param" "maybe type" "temp"
      (667347 'move' call_tmp[667344](145271 call # r[144937] i[144942]))
      (145273 call = r[144937] call_tmp[667344])
      (481332 'end of statement' r[144937] r[144937] i[144942])
    }
    unknown call_tmp[667349] "expr temp" "maybe param" "maybe type" "temp"
    (667352 'move' call_tmp[667349](145282 call ! shapeful[144920]))
    unknown call_tmp[667354] "expr temp" "maybe param" "maybe type" "temp"
    (667357 'move' call_tmp[667354](145305 call _cond_test call_tmp[667349]))
    if call_tmp[667354]
    {
      unknown tmp[568521] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568522] "maybe param" "temp"
      unknown call_tmp[667359] "expr temp" "maybe param" "maybe type" "temp"
      (667362 'move' call_tmp[667359](145287 call == i[144942] 0))
      (568527 'move' tmp[568522](568525 call _cond_test call_tmp[667359]))
      if tmp[568522]
      {
        unknown tmp[568529] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (568531 'move' tmp[568529](145291 call chpl_build_bounded_range 1 0))
        (568536 'move' tmp[568521](568533 '_paramFoldLogical' tmp[568522] tmp[568529]))
      }
      {
        unknown tmp[568538] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[667364] "expr temp" "maybe param" "maybe type" "temp"
        (667367 'move' call_tmp[667364](145294 call chpl_build_low_bounded_range capturedIteratorLowBound[115341]))
        (568540 'move' tmp[568538](145297 call # call_tmp[667364] i[144942]))
        (568545 'move' tmp[568521](568542 '_paramFoldLogical' tmp[568522] tmp[568538]))
      }
      (145302 call = r[144937] tmp[568521])
      (481336 'end of statement' r[144937] i[144942] i[144942])
    }
    unknown call_tmp[667369] "maybe param" "maybe type" "temp"
    (667372 'move' call_tmp[667369](145312 call chpl__buildDomainExpr r[144937]))
    unknown D[145314] "dead at end of block" "insert auto destroy"
    (543566 'init var' D[145314] call_tmp[667369])
    (145317 'end of statement' r[144937] elemType[144962] r[144937])
    unknown call_tmp[667374] "expr temp" "maybe param" "maybe type" "temp"
    (667377 'move' call_tmp[667374](145320 call != data[144970] nil[44]))
    unknown call_tmp[667379] "expr temp" "maybe param" "maybe type" "temp"
    (667382 'move' call_tmp[667379](145447 call _cond_test call_tmp[667374]))
    if call_tmp[667379]
    {
      unknown call_tmp[667384] "expr temp" "maybe param" "maybe type" "temp"
      (667387 'move' call_tmp[667384](145329 call _cond_test callPostAlloc[144975]))
      if call_tmp[667384]
      {
        (145327 call _ddata_allocate_postalloc data[144970] size[144953])
        (481341 'end of statement' data[144970] size[144953])
      }
      { scopeless type
        unknown call_type_tmp[492349] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667389] "expr temp" "maybe param" "maybe type" "temp"
        (667392 'move' call_tmp[667389](145344 call data[144970] 0))
        (492353 'move' call_type_tmp[492349](145345 'typeof' call_tmp[667389]))
      }
      unknown call_tmp[667396] "expr temp" "maybe param" "maybe type" "temp"
      (667399 'move' call_tmp[667396](145350 call _cast int(64)[13] size[144953]))
      unknown call_tmp[667401] "maybe param" "maybe type" "temp"
      (667404 'move' call_tmp[667401](145352 call(145338 call (partial) buildArrayWith _mt[243] D[145314]) call_type_tmp[492349] data[144970] call_tmp[667396]))
      unknown A[145353] "dead at end of block"
      (543568 'init var' A[145353] call_tmp[667401])
      (145356 'end of statement' D[145314] data[144970] data[144970] size[144953])
      { scopeless type
        unknown call_type_tmp[492355] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667406] "expr temp" "maybe param" "maybe type" "temp"
        (667409 'move' call_tmp[667406](145366 call data[144970] 0))
        (492359 'move' call_type_tmp[492355](145367 'typeof' call_tmp[667406]))
      }
      unknown call_tmp[667413] "expr temp" "maybe param" "maybe type" "temp"
      (667416 'move' call_tmp[667413](145359 call _value _mt[243] A[145353]))
      (145368 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[667413] call_type_tmp[492355])
      (481348 'end of statement' A[145353] data[144970])
      unknown call_tmp[667420] "expr temp" "maybe param" "maybe type" "temp"
      (667423 'move' call_tmp[667420](145371 call _value _mt[243] A[145353]))
      unknown call_tmp[667427] "expr temp" "maybe param" "maybe type" "temp"
      (667430 'move' call_tmp[667427](145374 call _decEltRefCounts _mt[243] call_tmp[667420]))
      (145378 call = call_tmp[667427] 0)
      (481351 'end of statement' A[145353])
      (145400 'auto destroy runtime type' elemType[144962])
      (481353 'end of statement' elemType[144962])
      (519710 'move' ret[519705](519709 'deref' A[145353]))
      gotoReturn _end_chpl__initCopy[519703] _end_chpl__initCopy[519703]
      (481355 'end of statement' A[145353])
    }
    {
      unknown call_tmp[667432] "expr temp" "maybe param" "maybe type" "temp"
      (667435 'move' call_tmp[667432](145411 call _ddata_allocate_noinit elemType[144962] size[144953] callPostAlloc[144975]))
      (145412 call = data[144970] call_tmp[667432])
      (481357 'end of statement' data[144970] elemType[144962] size[144953] callPostAlloc[144975])
      unknown call_tmp[667437] "expr temp" "maybe param" "maybe type" "temp"
      (667440 'move' call_tmp[667437](145423 call _cond_test callPostAlloc[144975]))
      if call_tmp[667437]
      {
        (145421 call _ddata_allocate_postalloc data[144970] size[144953])
        (481362 'end of statement' data[144970] size[144953])
      }
      unknown call_tmp[667444] "expr temp" "maybe param" "maybe type" "temp"
      (667447 'move' call_tmp[667444](145437 call _cast int(64)[13] size[144953]))
      unknown call_tmp[667449] "maybe param" "maybe type" "temp"
      (667452 'move' call_tmp[667449](145439 call(145429 call (partial) buildArrayWith _mt[243] D[145314]) elemType[144962] data[144970] call_tmp[667444]))
      unknown A[145440] "dead at end of block"
      (543570 'init var' A[145440] call_tmp[667449])
      (145443 'end of statement' D[145314] elemType[144962] data[144970] size[144953])
      (519715 'move' ret[519705](519714 'deref' A[145440]))
      gotoReturn _end_chpl__initCopy[519703] _end_chpl__initCopy[519703]
      (481369 'end of statement' A[145440])
    }
    label _end_chpl__initCopy[519703]
    (519707 return ret[519705])
  }
  (355145 'used modules list'(113680 'use' ChapelBase[307])(113684 'use' ChapelTuple[56188])(113687 'use' ChapelLocale[89847])(113690 'use' ArrayViewSlice[189732])(113693 'use' ArrayViewRankChange[191488])(113696 'use' ArrayViewReindex[196078])(113699 'import' Reflection[224903])(113702 'use' ChapelDebugPrint[188155])(113705 'use' SysCTypes[20943]))
}