AST dump for ChapelArray after pass createTaskFunctions.
Module use list: ChapelBase ChapelTuple ChapelLocale ArrayViewSlice ArrayViewRankChange ArrayViewReindex Reflection ChapelDebugPrint SysCTypes HaltWrappers Sort IO 

{
  function chpl__init_ChapelArray[416039]() : void[4] "insert line file info" "module init"
  {
    unknown call_tmp[648211] "expr temp" "maybe param" "maybe type" "temp"
    (648214 'move' call_tmp[648211](113716 call chpl__processorAtomicType int(64)[13]))
    (542653 'default init var' numPrivateObjects[113717] call_tmp[648211])
    (113720 'end of statement')
    unknown call_tmp[648216] "maybe param" "maybe type" "temp"
    (648219 'move' call_tmp[648216](113722 call - 1))
    (542655 'init var' nullPid[113724] call_tmp[648216])
    (113727 'end of statement')
    (542657 'init var' debugBulkTransfer[113729] 0)
    (113732 'end of statement')
    (542659 'init var' useBulkTransfer[113734] 1)
    (113737 'end of statement')
    (542661 'init var' useBulkTransferStride[113739] 1)
    (113742 'end of statement')
    (542663 'init var' useBulkPtrTransfer[113744] useBulkTransfer[113734])
    (113747 'end of statement')
    (542665 'init var' PODValAccess[113749] 1)
    (113752 'end of statement')
    (542667 'init var' useBulkTransferDist[113754] 0)
    (113757 'end of statement')
    (542669 'init var' arrayAsVecGrowthFactor[113761] 1.5)
    (113764 'end of statement')
    (542671 'init var' debugArrayAsVec[113766] 0)
    (113769 'end of statement')
    (542695 'init var' CHPL_WARN_DOMAIN_LITERAL[115337] "unset")
    (115340 'end of statement')
    (542697 'init var' arrayLiteralLowBound[115342] defaultLowBound[361])
    (115345 'end of statement')
    (542699 'init var' capturedIteratorLowBound[115347] defaultLowBound[361])
    (115350 'end of statement')
    (519737 return _void[55])
  }
  unknown numPrivateObjects[113717] "dead at end of block" "insert auto destroy" "no doc"
  unknown nullPid[113724] "dead at end of block" "no doc" "param"
  unknown debugBulkTransfer[113729] "config" "no doc" "param"
  unknown useBulkTransfer[113734] "config" "no doc" "param"
  unknown useBulkTransferStride[113739] "config" "no doc" "param"
  unknown useBulkPtrTransfer[113744] "config" "no doc" "param"
  unknown PODValAccess[113749] "config" "no doc" "param"
  unknown useBulkTransferDist[113754] "config" "no doc" "param"
  unknown arrayAsVecGrowthFactor[113761] "config" "no doc" "param"
  unknown debugArrayAsVec[113766] "config" "no doc" "param"
  function _isPrivatized[113774](arg value[113772]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[515741] "RVV" "param" "temp"
    unknown tmp[424123] "maybe param" "temp"
    (424134 'move' tmp[424123](113777 call ! 1))
    unknown call_tmp[648221] "expr temp" "maybe param" "maybe type" "temp"
    (648224 'move' call_tmp[648221](424136 call _cond_invalid tmp[424123]))
    if call_tmp[648221]
    {
      (424139 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564264] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564265] "maybe param" "temp"
    unknown call_tmp[648226] "expr temp" "maybe param" "maybe type" "temp"
    (648229 'move' call_tmp[648226](424124 call isTrue tmp[424123]))
    (564270 'move' tmp[564265](564268 call _cond_test call_tmp[648226]))
    if tmp[564265]
    {
      unknown tmp[424144] "maybe param" "temp"
      unknown tmp[424165] "maybe param" "temp"
      (424176 'move' tmp[424165] 0)
      unknown call_tmp[648231] "expr temp" "maybe param" "maybe type" "temp"
      (648234 'move' call_tmp[648231](424178 call _cond_invalid tmp[424165]))
      if call_tmp[648231]
      {
        (424181 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[564210] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564211] "maybe param" "temp"
      unknown call_tmp[648236] "expr temp" "maybe param" "maybe type" "temp"
      (648239 'move' call_tmp[648236](424166 call isTrue tmp[424165]))
      (564216 'move' tmp[564211](564214 call _cond_test call_tmp[648236]))
      if tmp[564211]
      {
        unknown tmp[564218] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648241] "expr temp" "maybe param" "maybe type" "temp"
        (648244 'move' call_tmp[648241](113781 call postfix! value[113772]))
        unknown call_tmp[648248] "expr temp" "maybe param" "maybe type" "temp"
        (648251 'move' call_tmp[648248](113789 call(113785 call (partial) dsiSupportsPrivatization _mt[243] call_tmp[648241])))
        (564220 'move' tmp[564218](424169 call isTrue call_tmp[648248]))
        (564225 'move' tmp[564210](564222 '_paramFoldLogical' tmp[564211] tmp[564218]))
      }
      {
        (564230 'move' tmp[564210](564227 '_paramFoldLogical' tmp[564211] 0))
      }
      (424155 'move' tmp[424144] tmp[564210])
      unknown call_tmp[648253] "expr temp" "maybe param" "maybe type" "temp"
      (648256 'move' call_tmp[648253](424157 call _cond_invalid tmp[424144]))
      if call_tmp[648253]
      {
        (424160 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564237] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564238] "maybe param" "temp"
      unknown call_tmp[648258] "expr temp" "maybe param" "maybe type" "temp"
      (648261 'move' call_tmp[648258](424145 call isTrue tmp[424144]))
      (564243 'move' tmp[564238](564241 call _cond_test call_tmp[648258]))
      if tmp[564238]
      {
        (564248 'move' tmp[564237](564245 '_paramFoldLogical' tmp[564238] 1))
      }
      {
        unknown tmp[564250] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[648263] "expr temp" "maybe param" "maybe type" "temp"
        (648266 'move' call_tmp[648263](113793 call postfix! value[113772]))
        unknown call_tmp[648270] "expr temp" "maybe param" "maybe type" "temp"
        (648273 'move' call_tmp[648270](113801 call(113797 call (partial) dsiRequiresPrivatization _mt[243] call_tmp[648263])))
        (564252 'move' tmp[564250](424149 call isTrue call_tmp[648270]))
        (564257 'move' tmp[564237](564254 '_paramFoldLogical' tmp[564238] tmp[564250]))
      }
      unknown tmp[564272] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564274 'move' tmp[564272](424127 call isTrue tmp[564237]))
      (564279 'move' tmp[564264](564276 '_paramFoldLogical' tmp[564265] tmp[564272]))
    }
    {
      (564284 'move' tmp[564264](564281 '_paramFoldLogical' tmp[564265] 0))
    }
    (515746 'move' ret[515741](515745 'deref' tmp[564264]))
    (515743 return ret[515741])
  }
  function _newPrivatizedClass[113815](arg value[113813]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515752] "RVV" "temp"
    unknown call_tmp[648277] "maybe param" "maybe type" "temp"
    (648280 'move' call_tmp[648277](113826 call(113821 call (partial) fetchAdd _mt[243] numPrivateObjects[113717]) 1))
    const n[113827] "dead at end of block" "const" "insert auto destroy"
    (542673 'init var' n[113827] call_tmp[648277])
    (113830 'end of statement')
    unknown call_tmp[648282] "expr temp" "maybe param" "maybe type" "temp"
    (648285 'move' call_tmp[648282](359081 call here[90439]))
    unknown call_tmp[648289] "maybe param" "maybe type" "temp"
    (648292 'move' call_tmp[648289](113833 call id _mt[243] call_tmp[648282]))
    const hereID[113836] "dead at end of block" "const" "insert auto destroy"
    (542675 'init var' hereID[113836] call_tmp[648289])
    (113839 'end of statement')
    unknown call_tmp[648296] "maybe param" "maybe type" "temp"
    (648299 'move' call_tmp[648296](113847 call(113843 call (partial) dsiGetPrivatizeData _mt[243] value[113813])))
    const privatizeData[113848] "dead at end of block" "const" "insert auto destroy"
    (542677 'init var' privatizeData[113848] call_tmp[648296])
    (113851 'end of statement')
    {
      const tmp[113868] "const" "temp"
      unknown call_tmp[648301] "expr temp" "maybe param" "maybe type" "temp"
      (648304 'move' call_tmp[648301](113855 call Locales[113668] 0))
      unknown call_tmp[648306] "expr temp" "maybe param" "maybe type" "temp"
      (648309 'move' call_tmp[648306](113865 '_wide_get_locale' call_tmp[648301]))
      (113869 'move' tmp[113868](113866 'deref' call_tmp[648306]))
      (113863 call _newPrivatizedClassHelp value[113813] value[113813] n[113827] hereID[113836] privatizeData[113848])
      (479222 'end of statement' n[113827] hereID[113836] privatizeData[113848])
      (113872 'elided on block' 0 tmp[113868])
    }
    function _newPrivatizedClassHelp[113880](arg parentValue[113878]:_any[178](?), arg originalValue[113882]:_any[178](?), arg n[113884]:_any[178](?), arg hereID[113886]:_any[178](?), arg privatizeData[113888]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[113891] "dead at end of block" "insert auto destroy"
      (542679 'init var' newValue[113891] originalValue[113882])
      (113894 'end of statement')
      unknown call_tmp[648311] "expr temp" "maybe param" "maybe type" "temp"
      (648314 'move' call_tmp[648311](359084 call here[90439]))
      unknown call_tmp[648318] "expr temp" "maybe param" "maybe type" "temp"
      (648321 'move' call_tmp[648318](113898 call id _mt[243] call_tmp[648311]))
      unknown call_tmp[648323] "expr temp" "maybe param" "maybe type" "temp"
      (648326 'move' call_tmp[648323](113901 call != hereID[113886] call_tmp[648318]))
      unknown call_tmp[648328] "expr temp" "maybe param" "maybe type" "temp"
      (648331 'move' call_tmp[648328](113964 call _cond_test call_tmp[648323]))
      if call_tmp[648328]
      {
        unknown call_tmp[648335] "expr temp" "maybe param" "maybe type" "temp"
        (648338 'move' call_tmp[648335](113912 call(113907 call (partial) dsiPrivatize _mt[243] parentValue[113878]) privatizeData[113888]))
        (113913 call = newValue[113891] call_tmp[648335])
        (479226 'end of statement' newValue[113891])
        (113937 'chpl_newPrivatizedClass' newValue[113891] n[113884])
        (479228 'end of statement' newValue[113891])
        unknown call_tmp[648342] "expr temp" "maybe param" "maybe type" "temp"
        (648345 'move' call_tmp[648342](113942 call pid _mt[243] newValue[113891]))
        (113946 call = call_tmp[648342] n[113884])
        (479230 'end of statement' newValue[113891])
      }
      {
        (113953 'chpl_newPrivatizedClass' newValue[113891] n[113884])
        (479232 'end of statement' newValue[113891])
        unknown call_tmp[648349] "expr temp" "maybe param" "maybe type" "temp"
        (648352 'move' call_tmp[648349](113957 call pid _mt[243] newValue[113891]))
        (113961 call = call_tmp[648349] n[113884])
        (479234 'end of statement' newValue[113891])
      }
      {
        const _cobeginCount[114051] "const" "end count" "temp"
        (114072 'move' _cobeginCount[114051](114069 call _endCountAlloc 1))
        (114064 call _upEndCount _cobeginCount[114051] 1 2)
        (479236 'end of statement')
        (934190 call cobegin_fn[934188] newValue[113891] n[113884] hereID[113886] privatizeData[113888] originalValue[113882])
        function cobegin_fn[934188](arg newValue[934195], arg n[934198]:_any[178](?), arg hereID[934201]:_any[178](?), arg privatizeData[934204]:_any[178](?), arg originalValue[934207]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648356] "expr temp" "maybe param" "maybe type" "temp"
          (648359 'move' call_tmp[648356](113971 call left _mt[243] chpl_localeTree[155192]))
          unknown call_tmp[648363] "expr temp" "maybe param" "maybe type" "temp"
          (648366 'move' call_tmp[648363](113974 call _instance _mt[243] call_tmp[648356]))
          unknown call_tmp[648368] "expr temp" "maybe param" "maybe type" "temp"
          (648371 'move' call_tmp[648368](113978 call != call_tmp[648363] nil[44]))
          unknown call_tmp[648373] "expr temp" "maybe param" "maybe type" "temp"
          (648376 'move' call_tmp[648373](114004 call _cond_test call_tmp[648368]))
          if call_tmp[648373]
          {
            {
              const tmp[113996] "const" "temp"
              unknown call_tmp[648380] "expr temp" "maybe param" "maybe type" "temp"
              (648383 'move' call_tmp[648380](113981 call left _mt[243] chpl_localeTree[155192]))
              unknown call_tmp[648385] "expr temp" "maybe param" "maybe type" "temp"
              (648388 'move' call_tmp[648385](113993 '_wide_get_locale' call_tmp[648380]))
              (113997 'move' tmp[113996](113994 'deref' call_tmp[648385]))
              (113991 call _newPrivatizedClassHelp newValue[934195] originalValue[934207] n[934198] hereID[934201] privatizeData[934204])
              (479237 'end of statement' newValue[934195])
              (114000 'elided on block' 0 tmp[113996])
            }
          }
          (114054 call _downEndCount _cobeginCount[114051] nil[44])
          (934193 return _void[55])
        }
        {
        }
        (934212 call cobegin_fn[934210] newValue[113891] n[113884] hereID[113886] privatizeData[113888] originalValue[113882])
        function cobegin_fn[934210](arg newValue[934217], arg n[934220]:_any[178](?), arg hereID[934223]:_any[178](?), arg privatizeData[934226]:_any[178](?), arg originalValue[934229]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648392] "expr temp" "maybe param" "maybe type" "temp"
          (648395 'move' call_tmp[648392](114013 call right _mt[243] chpl_localeTree[155192]))
          unknown call_tmp[648399] "expr temp" "maybe param" "maybe type" "temp"
          (648402 'move' call_tmp[648399](114016 call _instance _mt[243] call_tmp[648392]))
          unknown call_tmp[648404] "expr temp" "maybe param" "maybe type" "temp"
          (648407 'move' call_tmp[648404](114020 call != call_tmp[648399] nil[44]))
          unknown call_tmp[648409] "expr temp" "maybe param" "maybe type" "temp"
          (648412 'move' call_tmp[648409](114046 call _cond_test call_tmp[648404]))
          if call_tmp[648409]
          {
            {
              const tmp[114038] "const" "temp"
              unknown call_tmp[648416] "expr temp" "maybe param" "maybe type" "temp"
              (648419 'move' call_tmp[648416](114023 call right _mt[243] chpl_localeTree[155192]))
              unknown call_tmp[648421] "expr temp" "maybe param" "maybe type" "temp"
              (648424 'move' call_tmp[648421](114035 '_wide_get_locale' call_tmp[648416]))
              (114039 'move' tmp[114038](114036 'deref' call_tmp[648421]))
              (114033 call _newPrivatizedClassHelp newValue[934217] originalValue[934229] n[934220] hereID[934223] privatizeData[934226])
              (479240 'end of statement' newValue[934217])
              (114042 'elided on block' 0 tmp[114038])
            }
          }
          (114060 call _downEndCount _cobeginCount[114051] nil[44])
          (934215 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114075 call _endCountFree _cobeginCount[114051])
          }
        }
        (114080 call _waitEndCount _cobeginCount[114051] 1 2)
      }
      (515748 return _void[55])
    }
    (515758 'move' ret[515752](515757 'coerce' n[113827] int(64)[13]))
    gotoReturn _end__newPrivatizedClass[515750] _end__newPrivatizedClass[515750]
    (479245 'end of statement' n[113827])
    label _end__newPrivatizedClass[515750]
    (515754 return ret[515752])
  }
  { scopeless type
    int(64)[13]
  }
  function _freePrivatizedClass[114099](arg pid[114096]:int(64)[13], arg original[114102]:object[367101](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648426] "expr temp" "maybe param" "maybe type" "temp"
    (648429 'move' call_tmp[648426](114108 call == pid[114096] nullPid[113724]))
    unknown call_tmp[648431] "expr temp" "maybe param" "maybe type" "temp"
    (648434 'move' call_tmp[648431](114112 call _cond_test call_tmp[648426]))
    if call_tmp[648431]
    {
      gotoReturn _end__freePrivatizedClass[515766] _end__freePrivatizedClass[515766]
    }
    {
      const tmp[114132] "const" "temp"
      unknown call_tmp[648436] "expr temp" "maybe param" "maybe type" "temp"
      (648439 'move' call_tmp[648436](114121 call Locales[113668] 0))
      unknown call_tmp[648441] "expr temp" "maybe param" "maybe type" "temp"
      (648444 'move' call_tmp[648441](114129 '_wide_get_locale' call_tmp[648436]))
      (114133 'move' tmp[114132](114130 'deref' call_tmp[648441]))
      {
        (114126 call _freePrivatizedClassHelp pid[114096] original[114102])
      }
      (114136 'elided on block' 0 tmp[114132])
    }
    function _freePrivatizedClassHelp[114144](arg pid[114142]:_any[178](?), arg original[114146]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown call_tmp[648446] "maybe param" "maybe type" "temp"
      (648449 'move' call_tmp[648446](114153 call chpl_getPrivatizedCopy unmanaged object[415508] pid[114142]))
      unknown prv[114154] "dead at end of block" "insert auto destroy"
      (542681 'init var' prv[114154] call_tmp[648446])
      (114157 'end of statement')
      unknown call_tmp[648451] "expr temp" "maybe param" "maybe type" "temp"
      (648454 'move' call_tmp[648451](114161 call != prv[114154] original[114146]))
      unknown call_tmp[648456] "expr temp" "maybe param" "maybe type" "temp"
      (648459 'move' call_tmp[648456](114168 call _cond_test call_tmp[648451]))
      if call_tmp[648456]
      {
        (114165 call chpl__delete prv[114154])
        (479249 'end of statement' prv[114154])
      }
      function chpl_clearPrivatizedClass[114179](arg pid[114176]:int(64)[13]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
        (515762 return _void[55])
      }
      (114186 call chpl_clearPrivatizedClass pid[114142])
      (479251 'end of statement')
      {
        const _cobeginCount[114261] "const" "end count" "temp"
        (114282 'move' _cobeginCount[114261](114279 call _endCountAlloc 1))
        (114274 call _upEndCount _cobeginCount[114261] 1 2)
        (479252 'end of statement')
        (934234 call cobegin_fn[934232] pid[114142] original[114146])
        function cobegin_fn[934232](arg pid[934239]:_any[178](?), arg original[934242]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648463] "expr temp" "maybe param" "maybe type" "temp"
          (648466 'move' call_tmp[648463](114189 call left _mt[243] chpl_localeTree[155192]))
          unknown call_tmp[648470] "expr temp" "maybe param" "maybe type" "temp"
          (648473 'move' call_tmp[648470](114192 call _instance _mt[243] call_tmp[648463]))
          unknown call_tmp[648475] "expr temp" "maybe param" "maybe type" "temp"
          (648478 'move' call_tmp[648475](114196 call != call_tmp[648470] nil[44]))
          unknown call_tmp[648480] "expr temp" "maybe param" "maybe type" "temp"
          (648483 'move' call_tmp[648480](114219 call _cond_test call_tmp[648475]))
          if call_tmp[648480]
          {
            {
              const tmp[114211] "const" "temp"
              unknown call_tmp[648487] "expr temp" "maybe param" "maybe type" "temp"
              (648490 'move' call_tmp[648487](114199 call left _mt[243] chpl_localeTree[155192]))
              unknown call_tmp[648492] "expr temp" "maybe param" "maybe type" "temp"
              (648495 'move' call_tmp[648492](114208 '_wide_get_locale' call_tmp[648487]))
              (114212 'move' tmp[114211](114209 'deref' call_tmp[648492]))
              (114206 call _freePrivatizedClassHelp pid[934239] original[934242])
              (114215 'elided on block' 0 tmp[114211])
            }
          }
          (114264 call _downEndCount _cobeginCount[114261] nil[44])
          (934237 return _void[55])
        }
        {
        }
        (934247 call cobegin_fn[934245] pid[114142] original[114146])
        function cobegin_fn[934245](arg pid[934252]:_any[178](?), arg original[934255]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648499] "expr temp" "maybe param" "maybe type" "temp"
          (648502 'move' call_tmp[648499](114226 call right _mt[243] chpl_localeTree[155192]))
          unknown call_tmp[648506] "expr temp" "maybe param" "maybe type" "temp"
          (648509 'move' call_tmp[648506](114229 call _instance _mt[243] call_tmp[648499]))
          unknown call_tmp[648511] "expr temp" "maybe param" "maybe type" "temp"
          (648514 'move' call_tmp[648511](114233 call != call_tmp[648506] nil[44]))
          unknown call_tmp[648516] "expr temp" "maybe param" "maybe type" "temp"
          (648519 'move' call_tmp[648516](114256 call _cond_test call_tmp[648511]))
          if call_tmp[648516]
          {
            {
              const tmp[114248] "const" "temp"
              unknown call_tmp[648523] "expr temp" "maybe param" "maybe type" "temp"
              (648526 'move' call_tmp[648523](114236 call right _mt[243] chpl_localeTree[155192]))
              unknown call_tmp[648528] "expr temp" "maybe param" "maybe type" "temp"
              (648531 'move' call_tmp[648528](114245 '_wide_get_locale' call_tmp[648523]))
              (114249 'move' tmp[114248](114246 'deref' call_tmp[648528]))
              (114243 call _freePrivatizedClassHelp pid[934252] original[934255])
              (114252 'elided on block' 0 tmp[114248])
            }
          }
          (114270 call _downEndCount _cobeginCount[114261] nil[44])
          (934250 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114285 call _endCountFree _cobeginCount[114261])
          }
        }
        (114290 call _waitEndCount _cobeginCount[114261] 1 2)
      }
      (515764 return _void[55])
    }
    label _end__freePrivatizedClass[515766]
    (515768 return _void[55])
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[114304](arg value[114302]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[648535] "maybe param" "maybe type" "temp"
    (648538 'move' call_tmp[648535](114307 call pid _mt[243] value[114302]))
    const pid[114310] "dead at end of block" "const" "insert auto destroy"
    (542683 'init var' pid[114310] call_tmp[648535])
    (114313 'end of statement')
    unknown call_tmp[648540] "expr temp" "maybe param" "maybe type" "temp"
    (648543 'move' call_tmp[648540](359098 call here[90439]))
    unknown call_tmp[648547] "maybe param" "maybe type" "temp"
    (648550 'move' call_tmp[648547](114316 call id _mt[243] call_tmp[648540]))
    const hereID[114319] "dead at end of block" "const" "insert auto destroy"
    (542685 'init var' hereID[114319] call_tmp[648547])
    (114322 'end of statement')
    unknown call_tmp[648554] "maybe param" "maybe type" "temp"
    (648557 'move' call_tmp[648554](114330 call(114326 call (partial) dsiGetReprivatizeData _mt[243] value[114302])))
    const reprivatizeData[114331] "dead at end of block" "const" "insert auto destroy"
    (542687 'init var' reprivatizeData[114331] call_tmp[648554])
    (114334 'end of statement')
    {
      const tmp[114351] "const" "temp"
      unknown call_tmp[648559] "expr temp" "maybe param" "maybe type" "temp"
      (648562 'move' call_tmp[648559](114338 call Locales[113668] 0))
      unknown call_tmp[648564] "expr temp" "maybe param" "maybe type" "temp"
      (648567 'move' call_tmp[648564](114348 '_wide_get_locale' call_tmp[648559]))
      (114352 'move' tmp[114351](114349 'deref' call_tmp[648564]))
      (114346 call _reprivatizeHelp value[114302] value[114302] pid[114310] hereID[114319] reprivatizeData[114331])
      (479259 'end of statement' pid[114310] hereID[114319] reprivatizeData[114331])
      (114355 'elided on block' 0 tmp[114351])
    }
    function _reprivatizeHelp[114363](arg parentValue[114361]:_any[178](?), arg originalValue[114365]:_any[178](?), arg pid[114367]:_any[178](?), arg hereID[114369]:_any[178](?), arg reprivatizeData[114371]:_any[178](?)) : _unknown[51] "no return value for void"
    {
      unknown newValue[114374] "dead at end of block" "insert auto destroy"
      (542689 'init var' newValue[114374] originalValue[114365])
      (114377 'end of statement')
      unknown call_tmp[648569] "expr temp" "maybe param" "maybe type" "temp"
      (648572 'move' call_tmp[648569](359101 call here[90439]))
      unknown call_tmp[648576] "expr temp" "maybe param" "maybe type" "temp"
      (648579 'move' call_tmp[648576](114381 call id _mt[243] call_tmp[648569]))
      unknown call_tmp[648581] "expr temp" "maybe param" "maybe type" "temp"
      (648584 'move' call_tmp[648581](114384 call != hereID[114369] call_tmp[648576]))
      unknown call_tmp[648586] "expr temp" "maybe param" "maybe type" "temp"
      (648589 'move' call_tmp[648586](114408 call _cond_test call_tmp[648581]))
      if call_tmp[648586]
      {
        unknown call_tmp[648591] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (648594 'move' call_tmp[648591](114389 'typeof' newValue[114374]))
        unknown call_tmp[648596] "expr temp" "maybe param" "maybe type" "temp"
        (648599 'move' call_tmp[648596](114392 call chpl_getPrivatizedCopy call_tmp[648591] pid[114367]))
        (114393 call = newValue[114374] call_tmp[648596])
        (479263 'end of statement' newValue[114374] newValue[114374])
        (114406 call(114400 call (partial) dsiReprivatize _mt[243] newValue[114374]) parentValue[114361] reprivatizeData[114371])
        (479266 'end of statement' newValue[114374])
      }
      {
        const _cobeginCount[114491] "const" "end count" "temp"
        (114512 'move' _cobeginCount[114491](114509 call _endCountAlloc 1))
        (114504 call _upEndCount _cobeginCount[114491] 1 2)
        (479268 'end of statement')
        (934260 call cobegin_fn[934258] newValue[114374] pid[114367] hereID[114369] reprivatizeData[114371] originalValue[114365])
        function cobegin_fn[934258](arg newValue[934265], arg pid[934268]:_any[178](?), arg hereID[934271]:_any[178](?), arg reprivatizeData[934274]:_any[178](?), arg originalValue[934277]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648605] "expr temp" "maybe param" "maybe type" "temp"
          (648608 'move' call_tmp[648605](114413 call left _mt[243] chpl_localeTree[155192]))
          unknown call_tmp[648612] "expr temp" "maybe param" "maybe type" "temp"
          (648615 'move' call_tmp[648612](114416 call _instance _mt[243] call_tmp[648605]))
          unknown call_tmp[648617] "expr temp" "maybe param" "maybe type" "temp"
          (648620 'move' call_tmp[648617](114420 call != call_tmp[648612] nil[44]))
          unknown call_tmp[648622] "expr temp" "maybe param" "maybe type" "temp"
          (648625 'move' call_tmp[648622](114446 call _cond_test call_tmp[648617]))
          if call_tmp[648622]
          {
            {
              const tmp[114438] "const" "temp"
              unknown call_tmp[648629] "expr temp" "maybe param" "maybe type" "temp"
              (648632 'move' call_tmp[648629](114423 call left _mt[243] chpl_localeTree[155192]))
              unknown call_tmp[648634] "expr temp" "maybe param" "maybe type" "temp"
              (648637 'move' call_tmp[648634](114435 '_wide_get_locale' call_tmp[648629]))
              (114439 'move' tmp[114438](114436 'deref' call_tmp[648634]))
              (114433 call _reprivatizeHelp newValue[934265] originalValue[934277] pid[934268] hereID[934271] reprivatizeData[934274])
              (479269 'end of statement' newValue[934265])
              (114442 'elided on block' 0 tmp[114438])
            }
          }
          (114494 call _downEndCount _cobeginCount[114491] nil[44])
          (934263 return _void[55])
        }
        {
        }
        (934282 call cobegin_fn[934280] newValue[114374] pid[114367] hereID[114369] reprivatizeData[114371] originalValue[114365])
        function cobegin_fn[934280](arg newValue[934287], arg pid[934290]:_any[178](?), arg hereID[934293]:_any[178](?), arg reprivatizeData[934296]:_any[178](?), arg originalValue[934299]:_any[178](?)) : void[4] "cobegin or coforall"
        {
          unknown call_tmp[648641] "expr temp" "maybe param" "maybe type" "temp"
          (648644 'move' call_tmp[648641](114453 call right _mt[243] chpl_localeTree[155192]))
          unknown call_tmp[648648] "expr temp" "maybe param" "maybe type" "temp"
          (648651 'move' call_tmp[648648](114456 call _instance _mt[243] call_tmp[648641]))
          unknown call_tmp[648653] "expr temp" "maybe param" "maybe type" "temp"
          (648656 'move' call_tmp[648653](114460 call != call_tmp[648648] nil[44]))
          unknown call_tmp[648658] "expr temp" "maybe param" "maybe type" "temp"
          (648661 'move' call_tmp[648658](114486 call _cond_test call_tmp[648653]))
          if call_tmp[648658]
          {
            {
              const tmp[114478] "const" "temp"
              unknown call_tmp[648665] "expr temp" "maybe param" "maybe type" "temp"
              (648668 'move' call_tmp[648665](114463 call right _mt[243] chpl_localeTree[155192]))
              unknown call_tmp[648670] "expr temp" "maybe param" "maybe type" "temp"
              (648673 'move' call_tmp[648670](114475 '_wide_get_locale' call_tmp[648665]))
              (114479 'move' tmp[114478](114476 'deref' call_tmp[648670]))
              (114473 call _reprivatizeHelp newValue[934287] originalValue[934299] pid[934290] hereID[934293] reprivatizeData[934296])
              (479272 'end of statement' newValue[934287])
              (114482 'elided on block' 0 tmp[114478])
            }
          }
          (114500 call _downEndCount _cobeginCount[114491] nil[44])
          (934285 return _void[55])
        }
        {
        }
        Defer
        {
          {
            (114515 call _endCountFree _cobeginCount[114491])
          }
        }
        (114520 call _waitEndCount _cobeginCount[114491] 1 2)
      }
      (515772 return _void[55])
    }
    (515774 return _void[55])
  }
  function _makeIndexTuple[114533](param arg rank[114531]:_any[178](?), arg t[114536]:_tuple[56199](?), param arg expand[114541]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515778] "RVV" "temp"
    (515783 'move' ret[515778](515782 'deref' t[114536]))
    (515780 return ret[515778])
  }
  where {
    unknown call_tmp[648677] "expr temp" "maybe param" "maybe type" "temp"
    (648680 'move' call_tmp[648677](114547 call size _mt[243] t[114536]))
    (114550 call == rank[114531] call_tmp[648677])
  }
  function _makeIndexTuple[114563](param arg rank[114561]:_any[178](?), arg t[114566]:_tuple[56199](?), param arg expand[114571]:bool[10] =
  0) : _unknown[51] "no return value for void"
  {
    (114601 call compilerError "index rank must match domain rank")
    (515785 return _void[55])
  }
  where {
    unknown call_tmp[648684] "expr temp" "maybe param" "maybe type" "temp"
    (648687 'move' call_tmp[648684](114577 call size _mt[243] t[114566]))
    (114580 call != rank[114561] call_tmp[648684])
  }
  function _makeIndexTuple[114611](param arg rank[114609]:_any[178](?), arg val[114614]:integral[199](?), param arg expand[114619]:bool[10] =
  0) : _unknown[51]
  {
    unknown ret[515789] "RVV" "temp"
    unknown tmp[424186] "maybe param" "temp"
    (424197 'move' tmp[424186] expand[114619])
    unknown call_tmp[648689] "expr temp" "maybe param" "maybe type" "temp"
    (648692 'move' call_tmp[648689](424199 call _cond_invalid tmp[424186]))
    if call_tmp[648689]
    {
      (424202 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564291] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564292] "maybe param" "temp"
    unknown call_tmp[648694] "expr temp" "maybe param" "maybe type" "temp"
    (648697 'move' call_tmp[648694](424187 call isTrue tmp[424186]))
    (564297 'move' tmp[564292](564295 call _cond_test call_tmp[648694]))
    if tmp[564292]
    {
      (564302 'move' tmp[564291](564299 '_paramFoldLogical' tmp[564292] 1))
    }
    {
      unknown tmp[564304] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[648699] "expr temp" "maybe param" "maybe type" "temp"
      (648702 'move' call_tmp[648699](114626 call == rank[114609] 1))
      (564306 'move' tmp[564304](424191 call isTrue call_tmp[648699]))
      (564311 'move' tmp[564291](564308 '_paramFoldLogical' tmp[564292] tmp[564304]))
    }
    unknown call_tmp[648704] "expr temp" "maybe param" "maybe type" "temp"
    (648707 'move' call_tmp[648704](114713 call _cond_test tmp[564291]))
    if call_tmp[648704]
    {
      unknown t[114635] "dead at end of block" "insert auto destroy"
      unknown call_tmp[648709] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648712 'move' call_tmp[648709](114632 'typeof' val[114614]))
      unknown call_tmp[648714] "expr temp" "maybe param" "maybe type" "temp"
      (648717 'move' call_tmp[648714](114633 call * rank[114609] call_tmp[648709]))
      (542691 'default init var' t[114635] call_tmp[648714])
      (114638 'end of statement')
      {
        unknown i[114655] "dead at end of block" "insert auto destroy"
        (542693 'init var' i[114655] 0)
        (479280 'end of statement')
        unknown tmp[114656] "maybe param" "temp"
        unknown call_tmp[648719] "expr temp" "maybe param" "maybe type" "temp"
        (648722 'move' call_tmp[648719](114643 call - rank[114609] 1))
        (114668 'move' tmp[114656](114666 call chpl_compute_low_param_loop_bound 0 call_tmp[648719]))
        unknown tmp[114657] "maybe param" "temp"
        unknown call_tmp[648724] "expr temp" "maybe param" "maybe type" "temp"
        (648727 'move' call_tmp[648724](114673 call - rank[114609] 1))
        (114678 'move' tmp[114657](114676 call chpl_compute_high_param_loop_bound 0 call_tmp[648724]))
        unknown tmp[114658] "maybe param" "temp"
        (114681 'move' tmp[114658] 1)
        ParamForLoop[114683]
        { i[114655] tmp[114656] tmp[114657] tmp[114658]
          unknown call_tmp[648729] "expr temp" "maybe param" "maybe type" "temp"
          (648732 'move' call_tmp[648729](114650 call t[114635] i[114655]))
          (114652 call = call_tmp[648729] val[114614])
          (479281 'end of statement' t[114635] i[114655])
        }
        label _unused_continueLabel[114660]
        label _breakLabel[114659]
      }
      (515794 'move' ret[515789](515793 'deref' t[114635]))
      gotoReturn _end__makeIndexTuple[515787] _end__makeIndexTuple[515787]
      (479284 'end of statement' t[114635])
    }
    {
      unknown call_tmp[648734] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (648737 'move' call_tmp[648734](114697 'typeof' val[114614]))
      unknown call_tmp[648739] "expr temp" "maybe param" "maybe type" "temp"
      (648742 'move' call_tmp[648739](114699 call _cast string[26] call_tmp[648734]))
      (114702 call compilerWarning call_tmp[648739])
      (479286 'end of statement')
      (114708 call compilerError "index rank must match domain rank")
      (479287 'end of statement')
      (515799 'move' ret[515789](515798 'deref' val[114614]))
      gotoReturn _end__makeIndexTuple[515787] _end__makeIndexTuple[515787]
    }
    label _end__makeIndexTuple[515787]
    (515791 return ret[515789])
  }
  function _newArray[114724](arg value[114722]:_any[178](?)) : _unknown[51] "no copy return"
  {
    unknown ret[515805] "RVV" "temp"
    unknown call_tmp[648744] "expr temp" "maybe param" "maybe type" "temp"
    (648747 'move' call_tmp[648744](114729 call _isPrivatized value[114722]))
    unknown call_tmp[648749] "expr temp" "maybe param" "maybe type" "temp"
    (648752 'move' call_tmp[648749](114749 call _cond_test call_tmp[648744]))
    if call_tmp[648749]
    {
      unknown call_tmp[648754] "expr temp" "maybe param" "maybe type" "temp"
      (648757 'move' call_tmp[648754](114735 call _newPrivatizedClass value[114722]))
      unknown call_tmp[648759] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648762 'move' call_tmp[648759](747893 'new' _array[133600](?) call_tmp[648754] value[114722]))
      (515810 'move' ret[515805](515809 'deref' call_tmp[648759]))
      gotoReturn _end__newArray[515803] _end__newArray[515803]
    }
    {
      unknown call_tmp[648764] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648767 'move' call_tmp[648764](747894 'new' _array[133600](?) nullPid[113724] value[114722]))
      (515815 'move' ret[515805](515814 'deref' call_tmp[648764]))
      gotoReturn _end__newArray[515803] _end__newArray[515803]
    }
    label _end__newArray[515803]
    (515807 return ret[515805])
  }
  function _getDomain[114762](arg value[114760]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515821] "RVV" "temp"
    unknown call_tmp[648769] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648772 'move' call_tmp[648769](114766 'typeof' value[114760]))
    unknown call_tmp[648774] "expr temp" "maybe param" "maybe type" "temp"
    (648777 'move' call_tmp[648774](114768 call _to_unmanaged call_tmp[648769]))
    unknown call_tmp[648779] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (648782 'move' call_tmp[648779](114770 'typeof' value[114760]))
    unknown call_tmp[648784] "expr temp" "maybe param" "maybe type" "temp"
    (648787 'move' call_tmp[648784](114771 call != call_tmp[648774] call_tmp[648779]))
    unknown call_tmp[648789] "expr temp" "maybe param" "maybe type" "temp"
    (648792 'move' call_tmp[648789](114794 call _cond_test call_tmp[648784]))
    if call_tmp[648789]
    {
      (114792 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[648794] "expr temp" "maybe param" "maybe type" "temp"
    (648797 'move' call_tmp[648794](114803 call _isPrivatized value[114760]))
    unknown call_tmp[648799] "expr temp" "maybe param" "maybe type" "temp"
    (648802 'move' call_tmp[648799](114827 call _cond_test call_tmp[648794]))
    if call_tmp[648799]
    {
      unknown call_tmp[648806] "expr temp" "maybe param" "maybe type" "temp"
      (648809 'move' call_tmp[648806](114807 call pid _mt[243] value[114760]))
      unknown call_tmp[648811] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648814 'move' call_tmp[648811](747895 'new' _domain[125914](?) call_tmp[648806] value[114760](_unowned = 1)))
      (515826 'move' ret[515821](515825 'deref' call_tmp[648811]))
      gotoReturn _end__getDomain[515819] _end__getDomain[515819]
    }
    {
      unknown call_tmp[648816] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648819 'move' call_tmp[648816](747896 'new' _domain[125914](?) nullPid[113724] value[114760](_unowned = 1)))
      (515831 'move' ret[515821](515830 'deref' call_tmp[648816]))
      gotoReturn _end__getDomain[515819] _end__getDomain[515819]
    }
    label _end__getDomain[515819]
    (515823 return ret[515821])
  }
  function _getDistribution[114839](arg value[114837]:_any[178](?)) : _unknown[51]
  {
    unknown ret[515837] "RVV" "temp"
    unknown call_tmp[648821] "expr temp" "maybe param" "maybe type" "temp"
    (648824 'move' call_tmp[648821](114844 call _isPrivatized value[114837]))
    unknown call_tmp[648826] "expr temp" "maybe param" "maybe type" "temp"
    (648829 'move' call_tmp[648826](114868 call _cond_test call_tmp[648821]))
    if call_tmp[648826]
    {
      unknown call_tmp[648833] "expr temp" "maybe param" "maybe type" "temp"
      (648836 'move' call_tmp[648833](114848 call pid _mt[243] value[114837]))
      unknown call_tmp[648838] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648841 'move' call_tmp[648838](747897 'new' _distribution[118979](?) call_tmp[648833] value[114837](_unowned = 1)))
      (515842 'move' ret[515837](515841 'deref' call_tmp[648838]))
      gotoReturn _end__getDistribution[515835] _end__getDistribution[515835]
    }
    {
      unknown call_tmp[648843] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (648846 'move' call_tmp[648843](747898 'new' _distribution[118979](?) nullPid[113724] value[114837](_unowned = 1)))
      (515847 'move' ret[515837](515846 'deref' call_tmp[648843]))
      gotoReturn _end__getDistribution[515835] _end__getDistribution[515835]
    }
    label _end__getDistribution[515835]
    (515839 return ret[515837])
  }
  function chpl__buildDomainRuntimeType[114883](arg dist[114880]:_distribution[118979](?), param arg rank[114886]:int(64)[13], arg idxType[114890]:_any[178](?) =
  int(64)[13], param arg stridable[114895]:bool[10] =
  0) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515853] "RVV" "temp" "type variable"
    unknown call_tmp[648848] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648851 'move' call_tmp[648848](747899 'new' _domain[125914](?) dist[114880] rank[114886] idxType[114890] stridable[114895]))
    (515858 'move' ret[515853](515857 'deref' call_tmp[648848]))
    (515855 return ret[515853])
  }
  function chpl__buildDomainRuntimeType[114918](arg dist[114915]:_distribution[118979](?), arg idxType[114920]:_any[178](?), param arg parSafe[114924]:bool[10] =
  1) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515862] "RVV" "temp" "type variable"
    unknown call_tmp[648853] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648856 'move' call_tmp[648853](747900 'new' _domain[125914](?) dist[114915] idxType[114920] parSafe[114924]))
    (515867 'move' ret[515862](515866 'deref' call_tmp[648853]))
    (515864 return ret[515862])
  }
  function chpl__buildSparseDomainRuntimeType[114946](arg dist[114943]:_distribution[118979](?), arg parentDom[114949]:_domain[125914](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515871] "RVV" "temp" "type variable"
    unknown call_tmp[648858] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648861 'move' call_tmp[648858](747901 'new' _domain[125914](?) dist[114943] parentDom[114949]))
    (515876 'move' ret[515871](515875 'deref' call_tmp[648858]))
    (515873 return ret[515871])
  }
  function chpl__convertRuntimeTypeToValue[114969](arg dist[114966]:_distribution[118979](?), param arg rank[114972]:int(64)[13], arg idxType[114976]:_any[178](?) =
  int(64)[13], param arg stridable[114980]:bool[10], param arg isNoInit[114984]:bool[10]) : _unknown[51]
  {
    unknown ret[515880] "RVV" "temp"
    unknown call_tmp[648863] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648866 'move' call_tmp[648863](747902 'new' _domain[125914](?) dist[114966] rank[114972] idxType[114976] stridable[114980]))
    (515885 'move' ret[515880](515884 'deref' call_tmp[648863]))
    (515882 return ret[515880])
  }
  function chpl__convertRuntimeTypeToValue[115006](arg dist[115003]:_distribution[118979](?), arg idxType[115008]:_any[178](?), param arg parSafe[115011]:bool[10], param arg isNoInit[115015]:bool[10]) : _unknown[51]
  {
    unknown ret[515889] "RVV" "temp"
    unknown call_tmp[648868] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648871 'move' call_tmp[648868](747903 'new' _domain[125914](?) dist[115003] idxType[115008] parSafe[115011]))
    (515894 'move' ret[515889](515893 'deref' call_tmp[648868]))
    (515891 return ret[515889])
  }
  function chpl__convertRuntimeTypeToValue[115036](arg dist[115033]:_distribution[118979](?), arg parentDom[115039]:_domain[125914](?), param arg isNoInit[115043]:bool[10]) : _unknown[51]
  {
    unknown ret[515898] "RVV" "temp"
    unknown call_tmp[648873] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (648876 'move' call_tmp[648873](747904 'new' _domain[125914](?) dist[115033] parentDom[115039]))
    (515903 'move' ret[515898](515902 'deref' call_tmp[648873]))
    (515900 return ret[515898])
  }
  function chpl__convertValueToRuntimeType[115063](arg dom[115060]:_domain[125914](?)) type : _unknown[51]
  {
    unknown ret[515907] "RVV" "temp" "type variable"
    unknown call_tmp[648880] "expr temp" "maybe param" "maybe type" "temp"
    (648883 'move' call_tmp[648880](115076 call dist _mt[243] dom[115060]))
    unknown call_tmp[648887] "expr temp" "maybe param" "maybe type" "temp"
    (648890 'move' call_tmp[648887](115081 call _value _mt[243] dom[115060]))
    unknown call_tmp[648894] "expr temp" "maybe param" "maybe type" "temp"
    (648897 'move' call_tmp[648894](115084 call rank _mt[243] call_tmp[648887]))
    unknown call_tmp[648901] "expr temp" "maybe param" "maybe type" "temp"
    (648904 'move' call_tmp[648901](115088 call _value _mt[243] dom[115060]))
    unknown call_tmp[648908] "expr temp" "maybe param" "maybe type" "temp"
    (648911 'move' call_tmp[648908](115091 call idxType _mt[243] call_tmp[648901]))
    unknown call_tmp[648915] "expr temp" "maybe param" "maybe type" "temp"
    (648918 'move' call_tmp[648915](115095 call _value _mt[243] dom[115060]))
    unknown call_tmp[648922] "expr temp" "maybe param" "maybe type" "temp"
    (648925 'move' call_tmp[648922](115098 call stridable _mt[243] call_tmp[648915]))
    unknown call_tmp[648927] "expr temp" "maybe param" "maybe type" "temp"
    (648930 'move' call_tmp[648927](115101 call chpl__buildDomainRuntimeType call_tmp[648880] call_tmp[648894] call_tmp[648908] call_tmp[648922]))
    (515912 'move' ret[515907](515911 'deref' call_tmp[648927]))
    (515909 return ret[515907])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492107] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648934] "expr temp" "maybe param" "maybe type" "temp"
      (648937 'move' call_tmp[648934](115067 call _value _mt[243] dom[115060]))
      (492111 'move' call_type_tmp[492107](115070 'typeof' call_tmp[648934]))
    }
    (354342 'is_subtype' BaseRectangularDom[382300](?) call_type_tmp[492107])
  }
  function chpl__convertValueToRuntimeType[115114](arg dom[115111]:_domain[125914](?)) type : _unknown[51]
  {
    unknown ret[515916] "RVV" "temp" "type variable"
    unknown call_tmp[648941] "expr temp" "maybe param" "maybe type" "temp"
    (648944 'move' call_tmp[648941](115127 call dist _mt[243] dom[115111]))
    unknown call_tmp[648948] "expr temp" "maybe param" "maybe type" "temp"
    (648951 'move' call_tmp[648948](115132 call _value _mt[243] dom[115111]))
    unknown call_tmp[648955] "expr temp" "maybe param" "maybe type" "temp"
    (648958 'move' call_tmp[648955](115135 call idxType _mt[243] call_tmp[648948]))
    unknown call_tmp[648962] "expr temp" "maybe param" "maybe type" "temp"
    (648965 'move' call_tmp[648962](115139 call _value _mt[243] dom[115111]))
    unknown call_tmp[648969] "expr temp" "maybe param" "maybe type" "temp"
    (648972 'move' call_tmp[648969](115144 call parSafe _mt[243] call_tmp[648962]))
    unknown call_tmp[648974] "expr temp" "maybe param" "maybe type" "temp"
    (648977 'move' call_tmp[648974](115147 call chpl__buildDomainRuntimeType call_tmp[648941] call_tmp[648955] call_tmp[648969]))
    (515921 'move' ret[515916](515920 'deref' call_tmp[648974]))
    (515918 return ret[515916])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492113] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[648981] "expr temp" "maybe param" "maybe type" "temp"
      (648984 'move' call_tmp[648981](115118 call _value _mt[243] dom[115111]))
      (492117 'move' call_type_tmp[492113](115121 'typeof' call_tmp[648981]))
    }
    (354343 'is_subtype' BaseAssociativeDom[382305](?) call_type_tmp[492113])
  }
  function chpl__convertValueToRuntimeType[115160](arg dom[115157]:_domain[125914](?)) type : _unknown[51]
  {
    unknown ret[515925] "RVV" "temp" "type variable"
    unknown call_tmp[648988] "expr temp" "maybe param" "maybe type" "temp"
    (648991 'move' call_tmp[648988](115173 call dist _mt[243] dom[115157]))
    unknown call_tmp[648995] "expr temp" "maybe param" "maybe type" "temp"
    (648998 'move' call_tmp[648995](115178 call _value _mt[243] dom[115157]))
    unknown call_tmp[649002] "expr temp" "maybe param" "maybe type" "temp"
    (649005 'move' call_tmp[649002](115183 call parentDom _mt[243] call_tmp[648995]))
    unknown call_tmp[649007] "expr temp" "maybe param" "maybe type" "temp"
    (649010 'move' call_tmp[649007](115186 call chpl__buildSparseDomainRuntimeType call_tmp[648988] call_tmp[649002]))
    (515930 'move' ret[515925](515929 'deref' call_tmp[649007]))
    (515927 return ret[515925])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492119] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649014] "expr temp" "maybe param" "maybe type" "temp"
      (649017 'move' call_tmp[649014](115164 call _value _mt[243] dom[115157]))
      (492123 'move' call_type_tmp[492119](115167 'typeof' call_tmp[649014]))
    }
    (354344 'is_subtype' BaseSparseDom[382310](?) call_type_tmp[492119])
  }
  function chpl__convertValueToRuntimeType[115199](arg dom[115196]:_domain[125914](?)) type : _unknown[51]
  {
    unknown ret[515934] "RVV" "temp" "type variable"
    (115223 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, or Bas 0)
    (479305 'end of statement')
    (515939 'move' ret[515934](515938 'deref' 0))
    (515936 return ret[515934])
  }
  function chpl__buildArrayRuntimeType[115237](arg dom[115234]:_domain[125914](?), arg eltType[115239]:_any[178](?)) type : _unknown[51] "runtime type init fn"
  {
    unknown ret[515943] "RVV" "temp" "type variable"
    unknown call_tmp[649021] "expr temp" "maybe param" "maybe type" "temp"
    (649024 'move' call_tmp[649021](115250 call(115244 call (partial) buildArray _mt[243] dom[115234]) eltType[115239] 1))
    (515948 'move' ret[515943](515947 'deref' call_tmp[649021]))
    (515945 return ret[515943])
  }
  function chpl__convertRuntimeTypeToValue[115262](arg dom[115259]:_domain[125914](?), arg eltType[115264]:_any[178](?), param arg isNoInit[115267]:bool[10]) : _unknown[51]
  {
    unknown ret[515952] "RVV" "temp"
    unknown call_tmp[649028] "expr temp" "maybe param" "maybe type" "temp"
    (649031 'move' call_tmp[649028](115277 call ! isNoInit[115267]))
    unknown call_tmp[649033] "expr temp" "maybe param" "maybe type" "temp"
    (649036 'move' call_tmp[649033](115279 call(115271 call (partial) buildArray _mt[243] dom[115259]) eltType[115264] call_tmp[649028]))
    (515957 'move' ret[515952](515956 'deref' call_tmp[649033]))
    (515954 return ret[515952])
  }
  function chpl__convertValueToRuntimeType[115293](arg arr[115290]:_array[133600](?)) type : _unknown[51]
  {
    unknown ret[515961] "RVV" "temp" "type variable"
    unknown call_tmp[649040] "expr temp" "maybe param" "maybe type" "temp"
    (649043 'move' call_tmp[649040](115297 call _dom _mt[243] arr[115290]))
    unknown call_tmp[649047] "expr temp" "maybe param" "maybe type" "temp"
    (649050 'move' call_tmp[649047](115302 call eltType _mt[243] arr[115290]))
    unknown call_tmp[649052] "expr temp" "maybe param" "maybe type" "temp"
    (649055 'move' call_tmp[649052](115305 call chpl__buildArrayRuntimeType call_tmp[649040] call_tmp[649047]))
    (515966 'move' ret[515961](515965 'deref' call_tmp[649052]))
    (515963 return ret[515961])
  }
  function _getLiteralType[115315](arg t[115313]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[515970] "RVV" "temp" "type variable"
    unknown call_tmp[649057] "expr temp" "maybe param" "maybe type" "temp"
    (649060 'move' call_tmp[649057](115319 call != t[115313] c_string[19]))
    unknown call_tmp[649062] "expr temp" "maybe param" "maybe type" "temp"
    (649065 'move' call_tmp[649062](115327 call _cond_test call_tmp[649057]))
    if call_tmp[649062]
    {
      (515975 'move' ret[515970](515974 'deref' t[115313]))
      gotoReturn _end__getLiteralType[515968] _end__getLiteralType[515968]
    }
    {
      (515980 'move' ret[515970](515979 'deref' string[26]))
      gotoReturn _end__getLiteralType[515968] _end__getLiteralType[515968]
    }
    label _end__getLiteralType[515968]
    (515972 return ret[515970])
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[115337] "config" "no doc" "param"
  unknown arrayLiteralLowBound[115342] "config" "no doc" "param"
  unknown capturedIteratorLowBound[115347] "config" "no doc" "param"
  function chpl__buildArrayExpr[115358](arg elems[115355]:_any[178](?) ...) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[515986] "RVV" "temp"
    unknown tmp[424207] "maybe param" "temp"
    (424218 'move' tmp[424207](115362 call == CHPL_WARN_DOMAIN_LITERAL[115337] "true"))
    unknown call_tmp[649067] "expr temp" "maybe param" "maybe type" "temp"
    (649070 'move' call_tmp[649067](424220 call _cond_invalid tmp[424207]))
    if call_tmp[649067]
    {
      (424223 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564318] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564319] "maybe param" "temp"
    unknown call_tmp[649072] "expr temp" "maybe param" "maybe type" "temp"
    (649075 'move' call_tmp[649072](424208 call isTrue tmp[424207]))
    (564324 'move' tmp[564319](564322 call _cond_test call_tmp[649072]))
    if tmp[564319]
    {
      unknown tmp[564326] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[649077] "expr temp" "maybe param" "maybe type" "temp"
      (649080 'move' call_tmp[649077](115368 call elems[115355] 0))
      unknown call_tmp[649082] "expr temp" "maybe param" "maybe type" "temp"
      (649085 'move' call_tmp[649082](115370 call isRange call_tmp[649077]))
      (564328 'move' tmp[564326](424211 call isTrue call_tmp[649082]))
      (564333 'move' tmp[564318](564330 '_paramFoldLogical' tmp[564319] tmp[564326]))
    }
    {
      (564338 'move' tmp[564318](564335 '_paramFoldLogical' tmp[564319] 0))
    }
    unknown call_tmp[649087] "expr temp" "maybe param" "maybe type" "temp"
    (649090 'move' call_tmp[649087](115429 call _cond_test tmp[564318]))
    if call_tmp[649087]
    {
      (115426 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    { scopeless type
      unknown call_type_tmp[492125] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649092] "expr temp" "maybe param" "maybe type" "temp"
      (649095 'move' call_tmp[649092](115438 call elems[115355] 0))
      (492129 'move' call_type_tmp[492125](115439 'typeof' call_tmp[649092]))
    }
    unknown elemType[115442] "dead at end of block" "insert auto destroy" "type variable"(115441 call _getLiteralType call_type_tmp[492125])
    (542704 'move' elemType[115442](542702 call _getLiteralType call_type_tmp[492125]))
    unknown A[115457] "dead at end of block" "insert auto destroy" "unsafe"
    unknown call_tmp[649097] "expr temp" "maybe param" "maybe type" "temp"
    (649100 'move' call_tmp[649097](115446 call chpl_build_low_bounded_range arrayLiteralLowBound[115342]))
    unknown call_tmp[649102] "expr temp" "maybe param" "maybe type" "temp"
    (649105 'move' call_tmp[649102](115449 call # call_tmp[649097] k[115353]))
    unknown call_tmp[649107] "expr temp" "maybe param" "maybe type" "temp"
    (649110 'move' call_tmp[649107](115453 call chpl__ensureDomainExpr call_tmp[649102]))
    unknown call_tmp[649112] "expr temp" "maybe param" "maybe type" "temp"
    (649115 'move' call_tmp[649112](115455 call chpl__buildArrayRuntimeType call_tmp[649107] elemType[115442]))
    (542706 'default init var' A[115457] call_tmp[649112])
    (115460 'end of statement' elemType[115442])
    {
      unknown i[115580] "dead at end of block" "insert auto destroy"
      (542708 'init var' i[115580] 0)
      (479315 'end of statement')
      unknown tmp[115581] "maybe param" "temp"
      unknown call_tmp[649117] "expr temp" "maybe param" "maybe type" "temp"
      (649120 'move' call_tmp[649117](115464 call - k[115353] 1))
      (115593 'move' tmp[115581](115591 call chpl_compute_low_param_loop_bound 0 call_tmp[649117]))
      unknown tmp[115582] "maybe param" "temp"
      unknown call_tmp[649122] "expr temp" "maybe param" "maybe type" "temp"
      (649125 'move' call_tmp[649122](115598 call - k[115353] 1))
      (115603 'move' tmp[115582](115601 call chpl_compute_high_param_loop_bound 0 call_tmp[649122]))
      unknown tmp[115583] "maybe param" "temp"
      (115606 'move' tmp[115583] 1)
      ParamForLoop[115608]
      { i[115580] tmp[115581] tmp[115582] tmp[115583]
        {
          { scopeless type
            unknown call_type_tmp[492131] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649127] "expr temp" "maybe param" "maybe type" "temp"
            (649130 'move' call_tmp[649127](115472 call elems[115355] i[115580]))
            (492135 'move' call_type_tmp[492131](115473 'typeof' call_tmp[649127]))
          }
          unknown currType[115476] "dead at end of block" "insert auto destroy" "type variable"(115475 call _getLiteralType call_type_tmp[492131])
          (542713 'move' currType[115476](542711 call _getLiteralType call_type_tmp[492131]))
          (479316 'end of statement' i[115580])
          unknown call_tmp[649132] "expr temp" "maybe param" "maybe type" "temp"
          (649135 'move' call_tmp[649132](115482 call != currType[115476] elemType[115442]))
          unknown call_tmp[649137] "expr temp" "maybe param" "maybe type" "temp"
          (649140 'move' call_tmp[649137](115562 call _cond_test call_tmp[649132]))
          if call_tmp[649137]
          {
            unknown call_tmp[649142] "expr temp" "maybe param" "maybe type" "temp"
            (649145 'move' call_tmp[649142](115504 call _cast string[26] i[115580]))
            unknown call_tmp[649147] "expr temp" "maybe param" "maybe type" "temp"
            (649150 'move' call_tmp[649147](115506 call + "Array literal element " call_tmp[649142]))
            unknown call_tmp[649152] "expr temp" "maybe param" "maybe type" "temp"
            (649155 'move' call_tmp[649152](115525 call + call_tmp[649147] " expected to be of type "))
            unknown call_tmp[649157] "expr temp" "maybe param" "maybe type" "temp"
            (649160 'move' call_tmp[649157](115529 call _cast string[26] elemType[115442]))
            unknown call_tmp[649162] "expr temp" "maybe param" "maybe type" "temp"
            (649165 'move' call_tmp[649162](115531 call + call_tmp[649152] call_tmp[649157]))
            unknown call_tmp[649167] "expr temp" "maybe param" "maybe type" "temp"
            (649170 'move' call_tmp[649167](115550 call + call_tmp[649162] " but is of type "))
            unknown call_tmp[649172] "expr temp" "maybe param" "maybe type" "temp"
            (649175 'move' call_tmp[649172](115554 call _cast string[26] currType[115476]))
            unknown call_tmp[649177] "expr temp" "maybe param" "maybe type" "temp"
            (649180 'move' call_tmp[649177](115556 call + call_tmp[649167] call_tmp[649172]))
            (115559 call compilerError call_tmp[649177])
            (479318 'end of statement' i[115580] elemType[115442] currType[115476])
          }
          unknown call_tmp[649182] "expr temp" "maybe param" "maybe type" "temp"
          (649185 'move' call_tmp[649182](115569 call + i[115580] arrayLiteralLowBound[115342]))
          unknown call_tmp[649187] "expr temp" "maybe param" "maybe type" "temp"
          (649190 'move' call_tmp[649187](115572 call A[115457] call_tmp[649182]))
          unknown call_tmp[649192] "expr temp" "maybe param" "maybe type" "temp"
          (649195 'move' call_tmp[649192](115576 call elems[115355] i[115580]))
          (115577 call = call_tmp[649187] call_tmp[649192])
          (479322 'end of statement' A[115457] i[115580] i[115580])
        }
      }
      label _unused_continueLabel[115585]
      label _breakLabel[115584]
    }
    (515991 'move' ret[515986](515990 'deref' A[115457]))
    gotoReturn _end_chpl__buildArrayExpr[515984] _end_chpl__buildArrayExpr[515984]
    (479326 'end of statement' A[115457])
    label _end_chpl__buildArrayExpr[515984]
    (515988 return ret[515986])
  }
  function chpl__buildAssociativeArrayExpr[115629](arg elems[115626]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[515997] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492137] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649197] "expr temp" "maybe param" "maybe type" "temp"
      (649200 'move' call_tmp[649197](115635 call elems[115626] 0))
      (492141 'move' call_type_tmp[492137](115636 'typeof' call_tmp[649197]))
    }
    unknown keyType[115639] "dead at end of block" "insert auto destroy" "type variable"(115638 call _getLiteralType call_type_tmp[492137])
    (542718 'move' keyType[115639](542716 call _getLiteralType call_type_tmp[492137]))
    { scopeless type
      unknown call_type_tmp[492143] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649202] "expr temp" "maybe param" "maybe type" "temp"
      (649205 'move' call_tmp[649202](115647 call elems[115626] 1))
      (492147 'move' call_type_tmp[492143](115648 'typeof' call_tmp[649202]))
    }
    unknown valType[115651] "dead at end of block" "insert auto destroy" "type variable"(115650 call _getLiteralType call_type_tmp[492143])
    (542723 'move' valType[115651](542721 call _getLiteralType call_type_tmp[492143]))
    unknown D[115659] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649207] "expr temp" "maybe param" "maybe type" "temp"
    (649210 'move' call_tmp[649207](115657 call chpl__buildDomainRuntimeType defaultDist[94058] keyType[115639]))
    (542725 'default init var' D[115659] call_tmp[649207])
    (115662 'end of statement')
    unknown call_tmp[649214] "expr temp" "maybe param" "maybe type" "temp"
    (649217 'move' call_tmp[649214](115671 call / k[115624] 2))
    (115674 call(115666 call (partial) requestCapacity _mt[243] D[115659]) call_tmp[649214])
    (479329 'end of statement' D[115659])
    unknown A[115683] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649219] "expr temp" "maybe param" "maybe type" "temp"
    (649222 'move' call_tmp[649219](115679 call chpl__ensureDomainExpr D[115659]))
    unknown call_tmp[649224] "expr temp" "maybe param" "maybe type" "temp"
    (649227 'move' call_tmp[649224](115681 call chpl__buildArrayRuntimeType call_tmp[649219] valType[115651]))
    (542727 'default init var' A[115683] call_tmp[649224])
    (115686 'end of statement' keyType[115639] D[115659] valType[115651])
    {
      unknown i[115860] "dead at end of block" "insert auto destroy"
      (542729 'init var' i[115860] 0)
      (479333 'end of statement')
      unknown tmp[115861] "maybe param" "temp"
      unknown call_tmp[649229] "expr temp" "maybe param" "maybe type" "temp"
      (649232 'move' call_tmp[649229](115690 call - k[115624] 1))
      (115872 'move' tmp[115861](115870 call chpl_compute_low_param_loop_bound 0 call_tmp[649229]))
      unknown tmp[115862] "maybe param" "temp"
      unknown call_tmp[649234] "expr temp" "maybe param" "maybe type" "temp"
      (649237 'move' call_tmp[649234](115877 call - k[115624] 1))
      (115882 'move' tmp[115862](115880 call chpl_compute_high_param_loop_bound 0 call_tmp[649234]))
      unknown tmp[115863] "maybe param" "temp"
      (115885 'move' tmp[115863] 2)
      ParamForLoop[115887]
      { i[115860] tmp[115861] tmp[115862] tmp[115863]
        {
          unknown call_tmp[649239] "maybe param" "maybe type" "temp"
          (649242 'move' call_tmp[649239](115700 call elems[115626] i[115860]))
          unknown elemKey[115701] "dead at end of block" "insert auto destroy"
          (542731 'init var' elemKey[115701] call_tmp[649239])
          (115704 'end of statement')
          unknown call_tmp[649244] "expr temp" "maybe param" "maybe type" "temp"
          (649247 'move' call_tmp[649244](115709 call + i[115860] 1))
          unknown call_tmp[649249] "maybe param" "maybe type" "temp"
          (649252 'move' call_tmp[649249](115712 call elems[115626] call_tmp[649244]))
          unknown elemVal[115713] "dead at end of block" "insert auto destroy"
          (542733 'init var' elemVal[115713] call_tmp[649249])
          (115716 'end of statement' i[115860] i[115860])
          unknown call_tmp[649254] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649257 'move' call_tmp[649254](115719 'typeof' elemKey[115701]))
          unknown elemKeyType[115722] "dead at end of block" "insert auto destroy" "type variable"(115721 call _getLiteralType call_tmp[649254])
          unknown call_tmp[649259] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649262 'move' call_tmp[649259](542737 'typeof' elemKey[115701]))
          (542739 'move' elemKeyType[115722](542736 call _getLiteralType call_tmp[649259]))
          (479336 'end of statement' elemKey[115701])
          unknown call_tmp[649264] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649267 'move' call_tmp[649264](115727 'typeof' elemVal[115713]))
          unknown elemValType[115730] "dead at end of block" "insert auto destroy" "type variable"(115729 call _getLiteralType call_tmp[649264])
          unknown call_tmp[649269] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (649272 'move' call_tmp[649269](542743 'typeof' elemVal[115713]))
          (542745 'move' elemValType[115730](542742 call _getLiteralType call_tmp[649269]))
          (479338 'end of statement' elemVal[115713])
          unknown call_tmp[649274] "expr temp" "maybe param" "maybe type" "temp"
          (649277 'move' call_tmp[649274](115735 call != elemKeyType[115722] keyType[115639]))
          unknown call_tmp[649279] "expr temp" "maybe param" "maybe type" "temp"
          (649282 'move' call_tmp[649279](115786 call _cond_test call_tmp[649274]))
          if call_tmp[649279]
          {
            unknown call_tmp[649284] "expr temp" "maybe param" "maybe type" "temp"
            (649287 'move' call_tmp[649284](115757 call / i[115860] 2))
            unknown call_tmp[649289] "expr temp" "maybe param" "maybe type" "temp"
            (649292 'move' call_tmp[649289](115760 call _cast string[26] call_tmp[649284]))
            unknown call_tmp[649294] "expr temp" "maybe param" "maybe type" "temp"
            (649297 'move' call_tmp[649294](115762 call + "Associative array key element " call_tmp[649289]))
            unknown call_tmp[649299] "expr temp" "maybe param" "maybe type" "temp"
            (649302 'move' call_tmp[649299](115765 call + call_tmp[649294] " expected to be of type "))
            unknown call_tmp[649304] "expr temp" "maybe param" "maybe type" "temp"
            (649307 'move' call_tmp[649304](115769 call _cast string[26] keyType[115639]))
            unknown call_tmp[649309] "expr temp" "maybe param" "maybe type" "temp"
            (649312 'move' call_tmp[649309](115771 call + call_tmp[649299] call_tmp[649304]))
            unknown call_tmp[649314] "expr temp" "maybe param" "maybe type" "temp"
            (649317 'move' call_tmp[649314](115774 call + call_tmp[649309] " but is of type "))
            unknown call_tmp[649319] "expr temp" "maybe param" "maybe type" "temp"
            (649322 'move' call_tmp[649319](115778 call _cast string[26] elemKeyType[115722]))
            unknown call_tmp[649324] "expr temp" "maybe param" "maybe type" "temp"
            (649327 'move' call_tmp[649324](115780 call + call_tmp[649314] call_tmp[649319]))
            (115783 call compilerError call_tmp[649324])
            (479340 'end of statement' i[115860] keyType[115639] elemKeyType[115722])
          }
          unknown call_tmp[649329] "expr temp" "maybe param" "maybe type" "temp"
          (649332 'move' call_tmp[649329](115792 call != elemValType[115730] valType[115651]))
          unknown call_tmp[649334] "expr temp" "maybe param" "maybe type" "temp"
          (649337 'move' call_tmp[649334](115843 call _cond_test call_tmp[649329]))
          if call_tmp[649334]
          {
            unknown call_tmp[649339] "expr temp" "maybe param" "maybe type" "temp"
            (649342 'move' call_tmp[649339](115814 call / i[115860] 2))
            unknown call_tmp[649344] "expr temp" "maybe param" "maybe type" "temp"
            (649347 'move' call_tmp[649344](115817 call _cast string[26] call_tmp[649339]))
            unknown call_tmp[649349] "expr temp" "maybe param" "maybe type" "temp"
            (649352 'move' call_tmp[649349](115819 call + "Associative array value element " call_tmp[649344]))
            unknown call_tmp[649354] "expr temp" "maybe param" "maybe type" "temp"
            (649357 'move' call_tmp[649354](115822 call + call_tmp[649349] " expected to be of type "))
            unknown call_tmp[649359] "expr temp" "maybe param" "maybe type" "temp"
            (649362 'move' call_tmp[649359](115826 call _cast string[26] valType[115651]))
            unknown call_tmp[649364] "expr temp" "maybe param" "maybe type" "temp"
            (649367 'move' call_tmp[649364](115828 call + call_tmp[649354] call_tmp[649359]))
            unknown call_tmp[649369] "expr temp" "maybe param" "maybe type" "temp"
            (649372 'move' call_tmp[649369](115831 call + call_tmp[649364] " but is of type "))
            unknown call_tmp[649374] "expr temp" "maybe param" "maybe type" "temp"
            (649377 'move' call_tmp[649374](115835 call _cast string[26] elemValType[115730]))
            unknown call_tmp[649379] "expr temp" "maybe param" "maybe type" "temp"
            (649382 'move' call_tmp[649379](115837 call + call_tmp[649369] call_tmp[649374]))
            (115840 call compilerError call_tmp[649379])
            (479344 'end of statement' i[115860] valType[115651] elemValType[115730])
          }
          (115849 call += D[115659] elemKey[115701])
          (479348 'end of statement' D[115659] elemKey[115701])
          unknown call_tmp[649384] "expr temp" "maybe param" "maybe type" "temp"
          (649387 'move' call_tmp[649384](115855 call A[115683] elemKey[115701]))
          (115857 call = call_tmp[649384] elemVal[115713])
          (479351 'end of statement' A[115683] elemKey[115701] elemVal[115713])
        }
      }
      label _unused_continueLabel[115865]
      label _breakLabel[115864]
    }
    (516002 'move' ret[515997](516001 'deref' A[115683]))
    gotoReturn _end_chpl__buildAssociativeArrayExpr[515995] _end_chpl__buildAssociativeArrayExpr[515995]
    (479355 'end of statement' A[115683])
    label _end_chpl__buildAssociativeArrayExpr[515995]
    (515999 return ret[515997])
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[115908](arg arr[115905]:unmanaged BaseArr[415511], arg eltType[115910]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649389] "expr temp" "maybe param" "maybe type" "temp"
    (649392 'move' call_tmp[649389](115915 call isArrayType eltType[115910]))
    unknown call_tmp[649394] "expr temp" "maybe param" "maybe type" "temp"
    (649397 'move' call_tmp[649394](115966 call _cond_test call_tmp[649389]))
    if call_tmp[649394]
    {
      unknown call_tmp[649401] "expr temp" "maybe param" "maybe type" "temp"
      (649404 'move' call_tmp[649401](115919 call _decEltRefCounts _mt[243] arr[115905]))
      (115923 call = call_tmp[649401] 1)
      (479357 'end of statement')
      unknown arrayEltType[115931] "dead at end of block" "insert auto destroy" "type variable"(115930 call chpl__eltTypeFromArrayRuntimeType eltType[115910])
      (542750 'move' arrayEltType[115931](542748 call chpl__eltTypeFromArrayRuntimeType eltType[115910]))
      const dom[115938] "dead at end of block" "const" "ref var"
      unknown call_tmp[649406] "expr temp" "maybe param" "maybe type" "temp"
      (649409 'move' call_tmp[649406](115937 call chpl__domainFromArrayRuntimeType eltType[115910]))
      (542753 'move' dom[115938](542752 'addr of' call_tmp[649406]))
      (115941 'end of statement')
      unknown call_tmp[649413] "maybe param" "maybe type" "temp"
      (649416 'move' call_tmp[649413](115943 call _instance _mt[243] dom[115938]))
      const dv[115946] "dead at end of block" "const" "insert auto destroy"
      (542755 'init var' dv[115946] call_tmp[649413])
      (115949 'end of statement' dom[115938])
      (115958 call(115953 call (partial) add_containing_arr _mt[243] dv[115946]) arr[115905])
      (479359 'end of statement' dv[115946])
      (115964 call chpl_incRefCountsForDomainsInArrayEltTypes arr[115905] arrayEltType[115931])
      (479361 'end of statement' arrayEltType[115931])
    }
    (516006 return _void[55])
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[115980](arg arr[115977]:unmanaged BaseArr[415511], arg eltType[115982]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[649420] "expr temp" "maybe param" "maybe type" "temp"
    (649423 'move' call_tmp[649420](115987 call isArrayType eltType[115982]))
    unknown call_tmp[649425] "expr temp" "maybe param" "maybe type" "temp"
    (649428 'move' call_tmp[649425](116183 call _cond_test call_tmp[649420]))
    if call_tmp[649425]
    {
      unknown call_tmp[649432] "expr temp" "maybe param" "maybe type" "temp"
      (649435 'move' call_tmp[649432](115989 call _decEltRefCounts _mt[243] arr[115977]))
      unknown call_tmp[649437] "expr temp" "maybe param" "maybe type" "temp"
      (649440 'move' call_tmp[649437](115993 call == call_tmp[649432] 0))
      unknown call_tmp[649442] "expr temp" "maybe param" "maybe type" "temp"
      (649445 'move' call_tmp[649442](116016 call _cond_test call_tmp[649437]))
      if call_tmp[649442]
      {
        (116014 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown arrayEltType[116026] "dead at end of block" "insert auto destroy" "type variable"(116025 call chpl__eltTypeFromArrayRuntimeType eltType[115982])
      (542760 'move' arrayEltType[116026](542758 call chpl__eltTypeFromArrayRuntimeType eltType[115982]))
      const dom[116033] "dead at end of block" "const" "ref var"
      unknown call_tmp[649447] "expr temp" "maybe param" "maybe type" "temp"
      (649450 'move' call_tmp[649447](116032 call chpl__domainFromArrayRuntimeType eltType[115982]))
      (542763 'move' dom[116033](542762 'addr of' call_tmp[649447]))
      (116036 'end of statement')
      (116041 call chpl_decRefCountsForDomainsInArrayEltTypes arr[115977] arrayEltType[116026])
      (479364 'end of statement' arrayEltType[116026])
      unknown call_tmp[649454] "expr temp" "maybe param" "maybe type" "temp"
      (649457 'move' call_tmp[649454](116044 call _instance _mt[243] dom[116033]))
      unknown call_tmp[649461] "maybe param" "maybe type" "temp"
      (649464 'move' call_tmp[649461](116054 call(116049 call (partial) remove_containing_arr _mt[243] call_tmp[649454]) arr[115977]))
      unknown removeDom[116055] "dead at end of block" "insert auto destroy"
      (542765 'init var' removeDom[116055] call_tmp[649461])
      (116058 'end of statement' dom[116033])
      unknown call_tmp[649466] "expr temp" "maybe param" "maybe type" "temp"
      (649469 'move' call_tmp[649466](116179 call _cond_test removeDom[116055]))
      if call_tmp[649466]
      {
        {
          const tmp[116170] "const" "temp"
          unknown call_tmp[649473] "expr temp" "maybe param" "maybe type" "temp"
          (649476 'move' call_tmp[649473](116061 call _instance _mt[243] dom[116033]))
          unknown call_tmp[649478] "expr temp" "maybe param" "maybe type" "temp"
          (649481 'move' call_tmp[649478](116167 '_wide_get_locale' call_tmp[649473]))
          (116171 'move' tmp[116170](116168 'deref' call_tmp[649478]))
          {
            unknown call_tmp[649485] "maybe param" "maybe type" "temp"
            (649488 'move' call_tmp[649485](116065 call _instance _mt[243] dom[116033]))
            const inst[116068] "dead at end of block" "const" "insert auto destroy"
            (542767 'init var' inst[116068] call_tmp[649485])
            (116071 'end of statement')
            unknown call_tmp[649492] "maybe param" "maybe type" "temp"
            (649495 'move' call_tmp[649492](116083 call(116079 call (partial) remove _mt[243] inst[116068])))
            unknown tmp[116084] "dead at end of block" "insert auto destroy" "temp"
            (542769 'init var' tmp[116084] call_tmp[649492])
            (116091 call _check_tuple_var_decl tmp[116084] 2)
            (479368 'end of statement')
            unknown call_tmp[649497] "maybe param" "maybe type" "temp"
            (649500 'move' call_tmp[649497](116085 call tmp[116084] 0))
            unknown domToFree[116073] "dead at end of block" "insert auto destroy"
            (542771 'init var' domToFree[116073] call_tmp[649497])
            unknown call_tmp[649502] "maybe param" "maybe type" "temp"
            (649505 'move' call_tmp[649502](116088 call tmp[116084] 1))
            unknown distToRemove[116075] "dead at end of block" "insert auto destroy"
            (542773 'init var' distToRemove[116075] call_tmp[649502])
            (116096 'end of statement')
            unknown distToFree[116101] "dead at end of block" "insert auto destroy"
            (542775 'init var' distToFree[116101] nil[44] unmanaged BaseDist?[415517])
            (116104 'end of statement' dom[116033])
            unknown call_tmp[649507] "expr temp" "maybe param" "maybe type" "temp"
            (649510 'move' call_tmp[649507](116107 call != distToRemove[116075] nil[44]))
            unknown call_tmp[649512] "expr temp" "maybe param" "maybe type" "temp"
            (649515 'move' call_tmp[649512](116122 call _cond_test call_tmp[649507]))
            if call_tmp[649512]
            {
              unknown call_tmp[649517] "expr temp" "maybe param" "maybe type" "temp"
              (649520 'move' call_tmp[649517](116111 call postfix! distToRemove[116075]))
              unknown call_tmp[649524] "expr temp" "maybe param" "maybe type" "temp"
              (649527 'move' call_tmp[649524](116117 call(116113 call (partial) remove _mt[243] call_tmp[649517])))
              (116118 call = distToFree[116101] call_tmp[649524])
              (479369 'end of statement' distToFree[116101] distToRemove[116075])
            }
            unknown call_tmp[649529] "expr temp" "maybe param" "maybe type" "temp"
            (649532 'move' call_tmp[649529](116128 call != domToFree[116073] nil[44]))
            unknown call_tmp[649534] "expr temp" "maybe param" "maybe type" "temp"
            (649537 'move' call_tmp[649534](116139 call _cond_test call_tmp[649529]))
            if call_tmp[649534]
            {
              unknown call_tmp[649539] "expr temp" "maybe param" "maybe type" "temp"
              (649542 'move' call_tmp[649539](116136 call _isPrivatized inst[116068]))
              (116137 call _delete_dom inst[116068] call_tmp[649539])
              (479372 'end of statement' inst[116068] inst[116068])
            }
            unknown call_tmp[649544] "expr temp" "maybe param" "maybe type" "temp"
            (649547 'move' call_tmp[649544](116146 call != distToFree[116101] nil[44]))
            unknown call_tmp[649549] "expr temp" "maybe param" "maybe type" "temp"
            (649552 'move' call_tmp[649549](116162 call _cond_test call_tmp[649544]))
            if call_tmp[649549]
            {
              unknown call_tmp[649554] "expr temp" "maybe param" "maybe type" "temp"
              (649557 'move' call_tmp[649554](116150 call postfix! distToFree[116101]))
              unknown call_tmp[649561] "expr temp" "maybe param" "maybe type" "temp"
              (649564 'move' call_tmp[649561](116155 call dist _mt[243] inst[116068]))
              unknown call_tmp[649566] "expr temp" "maybe param" "maybe type" "temp"
              (649569 'move' call_tmp[649566](116159 call _isPrivatized call_tmp[649561]))
              (116160 call _delete_dist call_tmp[649554] call_tmp[649566])
              (479375 'end of statement' distToFree[116101] inst[116068])
            }
          }
          (116174 'elided on block' 0 tmp[116170])
        }
      }
    }
    (516008 return _void[55])
  }
  function chpl__buildSubDomainType[116196](arg dom[116193]:_domain[125914](?)) type : _unknown[51]
  {
    unknown ret[516012] "RVV" "temp" "type variable"
    unknown call_tmp[649571] "expr temp" "maybe param" "maybe type" "temp"
    (649574 'move' call_tmp[649571](116201 call chpl__convertValueToRuntimeType dom[116193]))
    (516017 'move' ret[516012](516016 'deref' call_tmp[649571]))
    (516014 return ret[516012])
  }
  function chpl__isTupleOfRanges[116211](arg tup[116209]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516021] "RVV" "param" "temp"
    {
      unknown i[116242] "dead at end of block" "insert auto destroy"
      (542777 'init var' i[116242] 0)
      (479379 'end of statement')
      unknown tmp[116243] "maybe param" "temp"
      unknown call_tmp[649578] "expr temp" "maybe param" "maybe type" "temp"
      (649581 'move' call_tmp[649578](116215 call size _mt[243] tup[116209]))
      unknown call_tmp[649583] "expr temp" "maybe param" "maybe type" "temp"
      (649586 'move' call_tmp[649583](116219 call - call_tmp[649578] 1))
      (116255 'move' tmp[116243](116253 call chpl_compute_low_param_loop_bound 0 call_tmp[649583]))
      unknown tmp[116244] "maybe param" "temp"
      unknown call_tmp[649590] "expr temp" "maybe param" "maybe type" "temp"
      (649593 'move' call_tmp[649590](116262 call size _mt[243] tup[116209]))
      unknown call_tmp[649595] "expr temp" "maybe param" "maybe type" "temp"
      (649598 'move' call_tmp[649595](116260 call - call_tmp[649590] 1))
      (116268 'move' tmp[116244](116266 call chpl_compute_high_param_loop_bound 0 call_tmp[649595]))
      unknown tmp[116245] "maybe param" "temp"
      (116271 'move' tmp[116245] 1)
      ParamForLoop[116273]
      { i[116242] tmp[116243] tmp[116244] tmp[116245]
        {
          { scopeless type
            unknown call_type_tmp[492149] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649600] "expr temp" "maybe param" "maybe type" "temp"
            (649603 'move' call_tmp[649600](116227 call tup[116209] i[116242]))
            (492153 'move' call_type_tmp[492149](116228 'typeof' call_tmp[649600]))
          }
          unknown call_tmp[649605] "expr temp" "maybe param" "maybe type" "temp"
          (649608 'move' call_tmp[649605](116230 call isRangeType call_type_tmp[492149]))
          unknown call_tmp[649610] "expr temp" "maybe param" "maybe type" "temp"
          (649613 'move' call_tmp[649610](116231 call ! call_tmp[649605]))
          unknown call_tmp[649615] "expr temp" "maybe param" "maybe type" "temp"
          (649618 'move' call_tmp[649615](116236 call _cond_test call_tmp[649610]))
          if call_tmp[649615]
          {
            (516026 'move' ret[516021](516025 'deref' 0))
            gotoReturn _end_chpl__isTupleOfRanges[516019] _end_chpl__isTupleOfRanges[516019]
          }
        }
      }
      label _unused_continueLabel[116247]
      label _breakLabel[116246]
    }
    (516031 'move' ret[516021](516030 'deref' 1))
    label _end_chpl__isTupleOfRanges[516019]
    (516023 return ret[516021])
  }
  function chpl__buildDomainExpr[116294](arg ranges[116291]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516035] "RVV" "temp"
    unknown call_tmp[649622] "maybe param" "maybe type" "temp"
    (649625 'move' call_tmp[649622](116301 call size _mt[243] ranges[116291]))
    unknown rank[116304] "dead at end of block" "param"
    (542779 'init var' rank[116304] call_tmp[649622])
    (116307 'end of statement')
    {
      unknown i[116358] "dead at end of block" "insert auto destroy"
      (542781 'init var' i[116358] 0)
      (479382 'end of statement')
      unknown tmp[116359] "maybe param" "temp"
      unknown call_tmp[649627] "expr temp" "maybe param" "maybe type" "temp"
      (649630 'move' call_tmp[649627](116312 call - rank[116304] 1))
      (116371 'move' tmp[116359](116369 call chpl_compute_low_param_loop_bound 1 call_tmp[649627]))
      unknown tmp[116360] "maybe param" "temp"
      unknown call_tmp[649632] "expr temp" "maybe param" "maybe type" "temp"
      (649635 'move' call_tmp[649632](116376 call - rank[116304] 1))
      (116381 'move' tmp[116360](116379 call chpl_compute_high_param_loop_bound 1 call_tmp[649632]))
      unknown tmp[116361] "maybe param" "temp"
      (116384 'move' tmp[116361] 1)
      ParamForLoop[116386]
      { i[116358] tmp[116359] tmp[116360] tmp[116361]
        unknown call_tmp[649637] "expr temp" "maybe param" "maybe type" "temp"
        (649640 'move' call_tmp[649637](116319 call ranges[116291] 0))
        unknown call_tmp[649644] "expr temp" "maybe param" "maybe type" "temp"
        (649647 'move' call_tmp[649644](116320 call idxType _mt[243] call_tmp[649637]))
        unknown call_tmp[649649] "expr temp" "maybe param" "maybe type" "temp"
        (649652 'move' call_tmp[649649](116326 call ranges[116291] i[116358]))
        unknown call_tmp[649656] "expr temp" "maybe param" "maybe type" "temp"
        (649659 'move' call_tmp[649656](116327 call idxType _mt[243] call_tmp[649649]))
        unknown call_tmp[649661] "expr temp" "maybe param" "maybe type" "temp"
        (649664 'move' call_tmp[649661](116330 call != call_tmp[649644] call_tmp[649656]))
        unknown call_tmp[649666] "expr temp" "maybe param" "maybe type" "temp"
        (649669 'move' call_tmp[649666](116353 call _cond_test call_tmp[649661]))
        if call_tmp[649666]
        {
          (116351 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[116363]
      label _breakLabel[116362]
    }
    {
      unknown i[116437] "dead at end of block" "insert auto destroy"
      (542783 'init var' i[116437] 0)
      (479384 'end of statement')
      unknown tmp[116438] "maybe param" "temp"
      unknown call_tmp[649671] "expr temp" "maybe param" "maybe type" "temp"
      (649674 'move' call_tmp[649671](116398 call - rank[116304] 1))
      (116450 'move' tmp[116438](116448 call chpl_compute_low_param_loop_bound 0 call_tmp[649671]))
      unknown tmp[116439] "maybe param" "temp"
      unknown call_tmp[649676] "expr temp" "maybe param" "maybe type" "temp"
      (649679 'move' call_tmp[649676](116455 call - rank[116304] 1))
      (116460 'move' tmp[116439](116458 call chpl_compute_high_param_loop_bound 0 call_tmp[649676]))
      unknown tmp[116440] "maybe param" "temp"
      (116463 'move' tmp[116440] 1)
      ParamForLoop[116465]
      { i[116437] tmp[116438] tmp[116439] tmp[116440]
        unknown call_tmp[649681] "expr temp" "maybe param" "maybe type" "temp"
        (649684 'move' call_tmp[649681](116406 call ranges[116291] i[116437]))
        unknown call_tmp[649686] "expr temp" "maybe param" "maybe type" "temp"
        (649689 'move' call_tmp[649686](116408 call isBoundedRange call_tmp[649681]))
        unknown call_tmp[649691] "expr temp" "maybe param" "maybe type" "temp"
        (649694 'move' call_tmp[649691](116409 call ! call_tmp[649686]))
        unknown call_tmp[649696] "expr temp" "maybe param" "maybe type" "temp"
        (649699 'move' call_tmp[649696](116432 call _cond_test call_tmp[649691]))
        if call_tmp[649696]
        {
          (116430 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[116442]
      label _breakLabel[116441]
    }
    unknown d[116490] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649701] "expr temp" "maybe param" "maybe type" "temp"
    (649704 'move' call_tmp[649701](116479 call ranges[116291] 0))
    unknown call_tmp[649708] "expr temp" "maybe param" "maybe type" "temp"
    (649711 'move' call_tmp[649708](116480 call idxType _mt[243] call_tmp[649701]))
    unknown call_tmp[649713] "expr temp" "maybe param" "maybe type" "temp"
    (649716 'move' call_tmp[649713](116486 call chpl__anyStridable ranges[116291]))
    unknown call_tmp[649718] "expr temp" "maybe param" "maybe type" "temp"
    (649721 'move' call_tmp[649718](116488 call chpl__buildDomainRuntimeType defaultDist[94058] rank[116304] call_tmp[649708] call_tmp[649713]))
    (542785 'default init var' d[116490] call_tmp[649718])
    (116493 'end of statement')
    (116502 call(116497 call (partial) setIndices _mt[243] d[116490]) ranges[116291])
    (479386 'end of statement' d[116490])
    (516040 'move' ret[516035](516039 'deref' d[116490]))
    gotoReturn _end_chpl__buildDomainExpr[516033] _end_chpl__buildDomainExpr[516033]
    (479388 'end of statement' d[116490])
    label _end_chpl__buildDomainExpr[516033]
    (516037 return ret[516035])
  }
  where {
    (116299 call chpl__isTupleOfRanges ranges[116291])
  }
  function chpl__buildDomainExpr[116516](arg keys[116513]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516046] "RVV" "temp"
    unknown call_tmp[649727] "maybe param" "maybe type" "temp"
    (649730 'move' call_tmp[649727](116519 call size _mt[243] keys[116513]))
    unknown count[116522] "dead at end of block" "param"
    (542787 'init var' count[116522] call_tmp[649727])
    (116525 'end of statement')
    { scopeless type
      unknown call_type_tmp[492155] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[649732] "expr temp" "maybe param" "maybe type" "temp"
      (649735 'move' call_tmp[649732](116531 call keys[116513] 0))
      (492159 'move' call_type_tmp[492155](116532 'typeof' call_tmp[649732]))
    }
    unknown keyType[116535] "dead at end of block" "insert auto destroy" "type variable"(116534 call _getLiteralType call_type_tmp[492155])
    (542792 'move' keyType[116535](542790 call _getLiteralType call_type_tmp[492155]))
    {
      unknown i[116613] "dead at end of block" "insert auto destroy"
      (542794 'init var' i[116613] 0)
      (479390 'end of statement')
      unknown tmp[116614] "maybe param" "temp"
      unknown call_tmp[649737] "expr temp" "maybe param" "maybe type" "temp"
      (649740 'move' call_tmp[649737](116541 call - count[116522] 1))
      (116626 'move' tmp[116614](116624 call chpl_compute_low_param_loop_bound 1 call_tmp[649737]))
      unknown tmp[116615] "maybe param" "temp"
      unknown call_tmp[649742] "expr temp" "maybe param" "maybe type" "temp"
      (649745 'move' call_tmp[649742](116631 call - count[116522] 1))
      (116636 'move' tmp[116615](116634 call chpl_compute_high_param_loop_bound 1 call_tmp[649742]))
      unknown tmp[116616] "maybe param" "temp"
      (116639 'move' tmp[116616] 1)
      ParamForLoop[116641]
      { i[116613] tmp[116614] tmp[116615] tmp[116616]
        { scopeless type
          unknown call_type_tmp[492161] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[649747] "expr temp" "maybe param" "maybe type" "temp"
          (649750 'move' call_tmp[649747](116550 call keys[116513] i[116613]))
          (492165 'move' call_type_tmp[492161](116551 'typeof' call_tmp[649747]))
        }
        unknown call_tmp[649752] "expr temp" "maybe param" "maybe type" "temp"
        (649755 'move' call_tmp[649752](116553 call _getLiteralType call_type_tmp[492161]))
        unknown call_tmp[649757] "expr temp" "maybe param" "maybe type" "temp"
        (649760 'move' call_tmp[649757](116554 call != keyType[116535] call_tmp[649752]))
        unknown call_tmp[649762] "expr temp" "maybe param" "maybe type" "temp"
        (649765 'move' call_tmp[649762](116609 call _cond_test call_tmp[649757]))
        if call_tmp[649762]
        {
          { scopeless type
            unknown call_type_tmp[492167] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[649767] "expr temp" "maybe param" "maybe type" "temp"
            (649770 'move' call_tmp[649767](116596 call keys[116513] i[116613]))
            (492171 'move' call_type_tmp[492167](116597 'typeof' call_tmp[649767]))
          }
          unknown call_tmp[649772] "expr temp" "maybe param" "maybe type" "temp"
          (649775 'move' call_tmp[649772](116576 call _cast string[26] i[116613]))
          unknown call_tmp[649777] "expr temp" "maybe param" "maybe type" "temp"
          (649780 'move' call_tmp[649777](116578 call + "Associative domain element " call_tmp[649772]))
          unknown call_tmp[649782] "expr temp" "maybe param" "maybe type" "temp"
          (649785 'move' call_tmp[649782](116581 call + call_tmp[649777] " expected to be of type "))
          unknown call_tmp[649787] "expr temp" "maybe param" "maybe type" "temp"
          (649790 'move' call_tmp[649787](116585 call _cast string[26] keyType[116535]))
          unknown call_tmp[649792] "expr temp" "maybe param" "maybe type" "temp"
          (649795 'move' call_tmp[649792](116587 call + call_tmp[649782] call_tmp[649787]))
          unknown call_tmp[649797] "expr temp" "maybe param" "maybe type" "temp"
          (649800 'move' call_tmp[649797](116590 call + call_tmp[649792] " but is of type "))
          unknown call_tmp[649802] "expr temp" "maybe param" "maybe type" "temp"
          (649805 'move' call_tmp[649802](116599 call _getLiteralType call_type_tmp[492167]))
          unknown call_tmp[649807] "expr temp" "maybe param" "maybe type" "temp"
          (649810 'move' call_tmp[649807](116601 call _cast string[26] call_tmp[649802]))
          unknown call_tmp[649812] "expr temp" "maybe param" "maybe type" "temp"
          (649815 'move' call_tmp[649812](116603 call + call_tmp[649797] call_tmp[649807]))
          (116606 call compilerError call_tmp[649812])
          (479391 'end of statement' i[116613] keyType[116535] i[116613])
        }
      }
      label _unused_continueLabel[116618]
      label _breakLabel[116617]
    }
    unknown D[116655] "dead at end of block" "insert auto destroy"
    unknown call_tmp[649817] "expr temp" "maybe param" "maybe type" "temp"
    (649820 'move' call_tmp[649817](116653 call chpl__buildDomainRuntimeType defaultDist[94058] keyType[116535]))
    (542796 'default init var' D[116655] call_tmp[649817])
    (116658 'end of statement' keyType[116535])
    (116665 call(116660 call (partial) requestCapacity _mt[243] D[116655]) count[116522])
    (479396 'end of statement' D[116655])
    {
      unknown i[116682] "dead at end of block" "insert auto destroy"
      (542798 'init var' i[116682] 0)
      (479398 'end of statement')
      unknown tmp[116683] "maybe param" "temp"
      unknown call_tmp[649824] "expr temp" "maybe param" "maybe type" "temp"
      (649827 'move' call_tmp[649824](116670 call - count[116522] 1))
      (116695 'move' tmp[116683](116693 call chpl_compute_low_param_loop_bound 0 call_tmp[649824]))
      unknown tmp[116684] "maybe param" "temp"
      unknown call_tmp[649829] "expr temp" "maybe param" "maybe type" "temp"
      (649832 'move' call_tmp[649829](116700 call - count[116522] 1))
      (116705 'move' tmp[116684](116703 call chpl_compute_high_param_loop_bound 0 call_tmp[649829]))
      unknown tmp[116685] "maybe param" "temp"
      (116708 'move' tmp[116685] 1)
      ParamForLoop[116710]
      { i[116682] tmp[116683] tmp[116684] tmp[116685]
        unknown call_tmp[649834] "expr temp" "maybe param" "maybe type" "temp"
        (649837 'move' call_tmp[649834](116678 call keys[116513] i[116682]))
        (116679 call += D[116655] call_tmp[649834])
        (479399 'end of statement' D[116655] i[116682])
      }
      label _unused_continueLabel[116687]
      label _breakLabel[116686]
    }
    (516051 'move' ret[516046](516050 'deref' D[116655]))
    gotoReturn _end_chpl__buildDomainExpr[516044] _end_chpl__buildDomainExpr[516044]
    (479402 'end of statement' D[116655])
    label _end_chpl__buildDomainExpr[516044]
    (516048 return ret[516046])
  }
  function chpl__ensureDomainExpr[116730](const  ref arg x[116727]:_domain[125914](?)) const ref : _unknown[51]
  {
    unknown ret[516057] "RVV" "temp"
    (516062 'move' ret[516057](516061 'addr of' x[116727]))
    (516059 return ret[516057])
  }
  function chpl__ensureDomainExpr[116744](arg x[116741]:_any[178](?) ...) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[516066] "RVV" "temp"
    unknown call_tmp[649839] "expr temp" "maybe param" "maybe type" "temp"
    (649842 'move' call_tmp[649839](116750 call chpl__buildDomainExpr(116748 'expand_tuple' x[116741])))
    (516071 'move' ret[516066](516070 'deref' call_tmp[649839]))
    (516068 return ret[516066])
  }
  function chpl__ensureDomainExpr[116760](arg t[116758]:_any[178](?)) : _unknown[51] "compiler generated" "last resort" "no return value for void"
  {
    unknown call_tmp[649844] "expr temp" "maybe param" "maybe type" "temp"
    (649847 'move' call_tmp[649844](116783 call _cast string[26] t[116758]))
    (116804 call compilerError "Domain expression was a type ('" call_tmp[649844] "') rather than a domain value or range list as expected")
    (516073 return _void[55])
  }
  function chpl__distributed[116815](arg d[116812]:_distribution[118979](?), arg dom[116818]:_domain[125914](?)) : _unknown[51]
  {
    unknown ret[516077] "RVV" "temp"
    unknown call_tmp[649849] "expr temp" "maybe param" "maybe type" "temp"
    (649852 'move' call_tmp[649849](116824 call isRectangularDom dom[116818]))
    unknown call_tmp[649854] "expr temp" "maybe param" "maybe type" "temp"
    (649857 'move' call_tmp[649854](116882 call _cond_test call_tmp[649849]))
    if call_tmp[649854]
    {
      unknown call_tmp[649861] "expr temp" "maybe param" "maybe type" "temp"
      (649864 'move' call_tmp[649861](116826 call rank _mt[243] dom[116818]))
      unknown call_tmp[649868] "expr temp" "maybe param" "maybe type" "temp"
      (649871 'move' call_tmp[649868](116831 call _value _mt[243] dom[116818]))
      unknown call_tmp[649875] "expr temp" "maybe param" "maybe type" "temp"
      (649878 'move' call_tmp[649875](116834 call idxType _mt[243] call_tmp[649868]))
      unknown call_tmp[649882] "expr temp" "maybe param" "maybe type" "temp"
      (649885 'move' call_tmp[649882](116838 call _value _mt[243] dom[116818]))
      unknown call_tmp[649889] "expr temp" "maybe param" "maybe type" "temp"
      (649892 'move' call_tmp[649889](116841 call stridable _mt[243] call_tmp[649882]))
      unknown call_tmp[649894] "expr temp" "maybe param" "maybe type" "temp"
      (649897 'move' call_tmp[649894](116845 call chpl__buildDomainRuntimeType defaultDist[94058] call_tmp[649861] call_tmp[649875] call_tmp[649889]))
      unknown call_tmp[649899] "maybe param" "maybe type" "temp"
      (649902 'move' call_tmp[649899](116848 call chpl__distributed d[116812] call_tmp[649894]))
      unknown distDom[116851] "dead at end of block" "insert auto destroy"
      (542800 'init var' distDom[116851] dom[116818] call_tmp[649899])
      (116854 'end of statement')
      (516082 'move' ret[516077](516081 'deref' distDom[116851]))
      gotoReturn _end_chpl__distributed[516075] _end_chpl__distributed[516075]
      (479405 'end of statement' distDom[116851])
    }
    {
      unknown call_tmp[649906] "expr temp" "maybe param" "maybe type" "temp"
      (649909 'move' call_tmp[649906](116860 call _value _mt[243] dom[116818]))
      unknown call_tmp[649913] "expr temp" "maybe param" "maybe type" "temp"
      (649916 'move' call_tmp[649913](116863 call idxType _mt[243] call_tmp[649906]))
      unknown call_tmp[649918] "expr temp" "maybe param" "maybe type" "temp"
      (649921 'move' call_tmp[649918](116868 call chpl__buildDomainRuntimeType defaultDist[94058] call_tmp[649913]))
      unknown call_tmp[649923] "maybe param" "maybe type" "temp"
      (649926 'move' call_tmp[649923](116871 call chpl__distributed d[116812] call_tmp[649918]))
      unknown distDom[116874] "dead at end of block" "insert auto destroy"
      (542802 'init var' distDom[116874] dom[116818] call_tmp[649923])
      (116877 'end of statement')
      (516087 'move' ret[516077](516086 'deref' distDom[116874]))
      gotoReturn _end_chpl__distributed[516075] _end_chpl__distributed[516075]
      (479407 'end of statement' distDom[116874])
    }
    label _end_chpl__distributed[516075]
    (516079 return ret[516077])
  }
  function chpl__distributed[116895](arg d[116892]:_distribution[118979](?), arg ranges[116898]:_any[178](?) ...) : _unknown[51]
  {
    unknown ret[516093] "RVV" "temp"
    unknown call_tmp[649928] "expr temp" "maybe param" "maybe type" "temp"
    (649931 'move' call_tmp[649928](116912 call chpl__buildDomainExpr(116910 'expand_tuple' ranges[116898])))
    unknown call_tmp[649933] "expr temp" "maybe param" "maybe type" "temp"
    (649936 'move' call_tmp[649933](116913 call chpl__distributed d[116892] call_tmp[649928]))
    (516098 'move' ret[516093](516097 'deref' call_tmp[649933]))
    (516095 return ret[516093])
  }
  where {
    (116904 call chpl__isTupleOfRanges ranges[116898])
  }
  function chpl__isArrayView[116924](arg arr[116922]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516102] "RVV" "param" "temp"
    const value[116938] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564345] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564346] "maybe param" "temp"
    unknown call_tmp[649938] "expr temp" "maybe param" "maybe type" "temp"
    (649941 'move' call_tmp[649938](116929 call isArray arr[116922]))
    (564351 'move' tmp[564346](564349 call _cond_test call_tmp[649938]))
    if tmp[564346]
    {
      unknown tmp[564353] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564355 'move' tmp[564353](116931 call _value _mt[243] arr[116922]))
      (564360 'move' tmp[564345](564357 '_paramFoldLogical' tmp[564346] tmp[564353]))
    }
    {
      (564365 'move' tmp[564345](564362 '_paramFoldLogical' tmp[564346] arr[116922]))
    }
    (542804 'init var' value[116938] tmp[564345])
    (116941 'end of statement')
    unknown call_tmp[649947] "maybe param" "maybe type" "temp"
    (649950 'move' call_tmp[649947](116948 call(116944 call (partial) isSliceArrayView _mt[243] value[116938])))
    unknown isSlice[116949] "dead at end of block" "param"
    (542806 'init var' isSlice[116949] call_tmp[649947])
    (116952 'end of statement')
    unknown call_tmp[649954] "maybe param" "maybe type" "temp"
    (649957 'move' call_tmp[649954](116958 call(116954 call (partial) isRankChangeArrayView _mt[243] value[116938])))
    unknown isRankChange[116959] "dead at end of block" "param"
    (542808 'init var' isRankChange[116959] call_tmp[649954])
    (116962 'end of statement')
    unknown call_tmp[649961] "maybe param" "maybe type" "temp"
    (649964 'move' call_tmp[649961](116968 call(116964 call (partial) isReindexArrayView _mt[243] value[116938])))
    unknown isReindex[116969] "dead at end of block" "param"
    (542810 'init var' isReindex[116969] call_tmp[649961])
    (116972 'end of statement' value[116938] value[116938] value[116938])
    unknown tmp[424228] "maybe param" "temp"
    unknown tmp[424249] "maybe param" "temp"
    (424260 'move' tmp[424249] isSlice[116949])
    unknown call_tmp[649966] "expr temp" "maybe param" "maybe type" "temp"
    (649969 'move' call_tmp[649966](424262 call _cond_invalid tmp[424249]))
    if call_tmp[649966]
    {
      (424265 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564372] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564373] "maybe param" "temp"
    unknown call_tmp[649971] "expr temp" "maybe param" "maybe type" "temp"
    (649974 'move' call_tmp[649971](424250 call isTrue tmp[424249]))
    (564378 'move' tmp[564373](564376 call _cond_test call_tmp[649971]))
    if tmp[564373]
    {
      (564383 'move' tmp[564372](564380 '_paramFoldLogical' tmp[564373] 1))
    }
    {
      unknown tmp[564385] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564387 'move' tmp[564385](424254 call isTrue isRankChange[116959]))
      (564392 'move' tmp[564372](564389 '_paramFoldLogical' tmp[564373] tmp[564385]))
    }
    (424239 'move' tmp[424228] tmp[564372])
    unknown call_tmp[649976] "expr temp" "maybe param" "maybe type" "temp"
    (649979 'move' call_tmp[649976](424241 call _cond_invalid tmp[424228]))
    if call_tmp[649976]
    {
      (424244 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564399] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564400] "maybe param" "temp"
    unknown call_tmp[649981] "expr temp" "maybe param" "maybe type" "temp"
    (649984 'move' call_tmp[649981](424229 call isTrue tmp[424228]))
    (564405 'move' tmp[564400](564403 call _cond_test call_tmp[649981]))
    if tmp[564400]
    {
      (564410 'move' tmp[564399](564407 '_paramFoldLogical' tmp[564400] 1))
    }
    {
      unknown tmp[564412] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564414 'move' tmp[564412](424233 call isTrue isReindex[116969]))
      (564419 'move' tmp[564399](564416 '_paramFoldLogical' tmp[564400] tmp[564412]))
    }
    (516107 'move' ret[516102](516106 'deref' tmp[564399]))
    (516104 return ret[516102])
  }
  function chpl__getActualArray[116988](arg arr[116986]:_any[178](?)) : _unknown[51]
  {
    unknown ret[516111] "RVV" "temp"
    unknown value[117002] "dead at end of block" "insert auto destroy"
    unknown tmp[564426] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564427] "maybe param" "temp"
    unknown call_tmp[649986] "expr temp" "maybe param" "maybe type" "temp"
    (649989 'move' call_tmp[649986](116993 call isArray arr[116986]))
    (564432 'move' tmp[564427](564430 call _cond_test call_tmp[649986]))
    if tmp[564427]
    {
      unknown tmp[564434] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564436 'move' tmp[564434](116995 call _value _mt[243] arr[116986]))
      (564441 'move' tmp[564426](564438 '_paramFoldLogical' tmp[564427] tmp[564434]))
    }
    {
      (564446 'move' tmp[564426](564443 '_paramFoldLogical' tmp[564427] arr[116986]))
    }
    (542812 'init var' value[117002] tmp[564426])
    (117005 'end of statement')
    unknown ret[117023] "dead at end of block" "insert auto destroy"
    unknown tmp[564453] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564454] "maybe param" "temp"
    unknown call_tmp[649993] "expr temp" "maybe param" "maybe type" "temp"
    (649996 'move' call_tmp[649993](117010 call chpl__isArrayView value[117002]))
    (564459 'move' tmp[564454](564457 call _cond_test call_tmp[649993]))
    if tmp[564454]
    {
      unknown tmp[564461] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564463 'move' tmp[564461](117018 call(117014 call (partial) _getActualArray _mt[243] value[117002])))
      (564468 'move' tmp[564453](564465 '_paramFoldLogical' tmp[564454] tmp[564461]))
    }
    {
      (564473 'move' tmp[564453](564470 '_paramFoldLogical' tmp[564454] value[117002]))
    }
    (542814 'init var' ret[117023] tmp[564453])
    (117026 'end of statement' value[117002] value[117002] value[117002])
    (516116 'move' ret[516111](516115 'deref' ret[117023]))
    gotoReturn _end_chpl__getActualArray[516109] _end_chpl__getActualArray[516109]
    (479419 'end of statement' ret[117023])
    label _end_chpl__getActualArray[516109]
    (516113 return ret[516111])
  }
  function chpl__isDROrDRView[117036](arg arg[117034]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516122] "RVV" "param" "temp"
    unknown tmp[424375] "maybe param" "temp"
    (424386 'move' tmp[424375](117041 call isDomain arg[117034]))
    unknown call_tmp[650000] "expr temp" "maybe param" "maybe type" "temp"
    (650003 'move' call_tmp[650000](424388 call _cond_invalid tmp[424375]))
    if call_tmp[650000]
    {
      (424391 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564480] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564481] "maybe param" "temp"
    unknown call_tmp[650005] "expr temp" "maybe param" "maybe type" "temp"
    (650008 'move' call_tmp[650005](424376 call isTrue tmp[424375]))
    (564486 'move' tmp[564481](564484 call _cond_test call_tmp[650005]))
    if tmp[564481]
    {
      (564491 'move' tmp[564480](564488 '_paramFoldLogical' tmp[564481] 1))
    }
    {
      unknown tmp[564493] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650010] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (650013 'move' call_tmp[650010](117044 'typeof' arg[117034]))
      unknown call_tmp[650015] "expr temp" "maybe param" "maybe type" "temp"
      (650018 'move' call_tmp[650015](354345 'is_subtype' BaseDom[372800](?) call_tmp[650010]))
      (564495 'move' tmp[564493](424380 call isTrue call_tmp[650015]))
      (564500 'move' tmp[564480](564497 '_paramFoldLogical' tmp[564481] tmp[564493]))
    }
    unknown call_tmp[650020] "expr temp" "maybe param" "maybe type" "temp"
    (650023 'move' call_tmp[650020](117192 call _cond_test tmp[564480]))
    if call_tmp[650020]
    {
      const value[117062] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[564507] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564508] "maybe param" "temp"
      unknown call_tmp[650025] "expr temp" "maybe param" "maybe type" "temp"
      (650028 'move' call_tmp[650025](117053 call isDomain arg[117034]))
      (564513 'move' tmp[564508](564511 call _cond_test call_tmp[650025]))
      if tmp[564508]
      {
        unknown tmp[564515] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564517 'move' tmp[564515](117055 call _value _mt[243] arg[117034]))
        (564522 'move' tmp[564507](564519 '_paramFoldLogical' tmp[564508] tmp[564515]))
      }
      {
        (564527 'move' tmp[564507](564524 '_paramFoldLogical' tmp[564508] arg[117034]))
      }
      (542816 'init var' value[117062] tmp[564507])
      (117065 'end of statement')
      unknown call_tmp[650034] "maybe param" "maybe type" "temp"
      (650037 'move' call_tmp[650034](117072 call(117068 call (partial) isDefaultRectangular _mt[243] value[117062])))
      unknown isDR[117073] "dead at end of block" "param"
      (542818 'init var' isDR[117073] call_tmp[650034])
      (117076 'end of statement')
      unknown tmp[424270] "maybe param" "temp"
      (424281 'move' tmp[424270](117080 call chpl__isDomainView value[117062]))
      unknown call_tmp[650039] "expr temp" "maybe param" "maybe type" "temp"
      (650042 'move' call_tmp[650039](424283 call _cond_invalid tmp[424270]))
      if call_tmp[650039]
      {
        (424286 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown isDRView[117092] "dead at end of block" "param"
      unknown tmp[564534] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564535] "maybe param" "temp"
      unknown call_tmp[650044] "expr temp" "maybe param" "maybe type" "temp"
      (650047 'move' call_tmp[650044](424271 call isTrue tmp[424270]))
      (564540 'move' tmp[564535](564538 call _cond_test call_tmp[650044]))
      if tmp[564535]
      {
        unknown tmp[564542] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[650049] "expr temp" "maybe param" "maybe type" "temp"
        (650052 'move' call_tmp[650049](117084 call chpl__getActualDomain value[117062]))
        unknown call_tmp[650056] "expr temp" "maybe param" "maybe type" "temp"
        (650059 'move' call_tmp[650056](117089 call(117085 call (partial) isDefaultRectangular _mt[243] call_tmp[650049])))
        (564544 'move' tmp[564542](424274 call isTrue call_tmp[650056]))
        (564549 'move' tmp[564534](564546 '_paramFoldLogical' tmp[564535] tmp[564542]))
      }
      {
        (564554 'move' tmp[564534](564551 '_paramFoldLogical' tmp[564535] 0))
      }
      (542820 'init var' isDRView[117092] tmp[564534])
      (117095 'end of statement' value[117062] value[117062])
      unknown tmp[424291] "maybe param" "temp"
      (424302 'move' tmp[424291] isDR[117073])
      unknown call_tmp[650061] "expr temp" "maybe param" "maybe type" "temp"
      (650064 'move' call_tmp[650061](424304 call _cond_invalid tmp[424291]))
      if call_tmp[650061]
      {
        (424307 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564561] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564562] "maybe param" "temp"
      unknown call_tmp[650066] "expr temp" "maybe param" "maybe type" "temp"
      (650069 'move' call_tmp[650066](424292 call isTrue tmp[424291]))
      (564567 'move' tmp[564562](564565 call _cond_test call_tmp[650066]))
      if tmp[564562]
      {
        (564572 'move' tmp[564561](564569 '_paramFoldLogical' tmp[564562] 1))
      }
      {
        unknown tmp[564574] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (564576 'move' tmp[564574](424296 call isTrue isDRView[117092]))
        (564581 'move' tmp[564561](564578 '_paramFoldLogical' tmp[564562] tmp[564574]))
      }
      (516127 'move' ret[516122](516126 'deref' tmp[564561]))
      gotoReturn _end_chpl__isDROrDRView[516120] _end_chpl__isDROrDRView[516120]
    }
    {
      unknown tmp[424354] "maybe param" "temp"
      (424365 'move' tmp[424354](117105 call isArray arg[117034]))
      unknown call_tmp[650071] "expr temp" "maybe param" "maybe type" "temp"
      (650074 'move' call_tmp[650071](424367 call _cond_invalid tmp[424354]))
      if call_tmp[650071]
      {
        (424370 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[564588] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[564589] "maybe param" "temp"
      unknown call_tmp[650076] "expr temp" "maybe param" "maybe type" "temp"
      (650079 'move' call_tmp[650076](424355 call isTrue tmp[424354]))
      (564594 'move' tmp[564589](564592 call _cond_test call_tmp[650076]))
      if tmp[564589]
      {
        (564599 'move' tmp[564588](564596 '_paramFoldLogical' tmp[564589] 1))
      }
      {
        unknown tmp[564601] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[650081] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (650084 'move' call_tmp[650081](117108 'typeof' arg[117034]))
        unknown call_tmp[650086] "expr temp" "maybe param" "maybe type" "temp"
        (650089 'move' call_tmp[650086](354346 'is_subtype' BaseArr[382377](?) call_tmp[650081]))
        (564603 'move' tmp[564601](424359 call isTrue call_tmp[650086]))
        (564608 'move' tmp[564588](564605 '_paramFoldLogical' tmp[564589] tmp[564601]))
      }
      unknown call_tmp[650091] "expr temp" "maybe param" "maybe type" "temp"
      (650094 'move' call_tmp[650091](117188 call _cond_test tmp[564588]))
      if call_tmp[650091]
      {
        const value[117126] "dead at end of block" "const" "insert auto destroy"
        unknown tmp[564615] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564616] "maybe param" "temp"
        unknown call_tmp[650096] "expr temp" "maybe param" "maybe type" "temp"
        (650099 'move' call_tmp[650096](117117 call isArray arg[117034]))
        (564621 'move' tmp[564616](564619 call _cond_test call_tmp[650096]))
        if tmp[564616]
        {
          unknown tmp[564623] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564625 'move' tmp[564623](117119 call _value _mt[243] arg[117034]))
          (564630 'move' tmp[564615](564627 '_paramFoldLogical' tmp[564616] tmp[564623]))
        }
        {
          (564635 'move' tmp[564615](564632 '_paramFoldLogical' tmp[564616] arg[117034]))
        }
        (542822 'init var' value[117126] tmp[564615])
        (117129 'end of statement')
        unknown call_tmp[650105] "maybe param" "maybe type" "temp"
        (650108 'move' call_tmp[650105](117136 call(117132 call (partial) isDefaultRectangular _mt[243] value[117126])))
        unknown isDR[117137] "dead at end of block" "param"
        (542824 'init var' isDR[117137] call_tmp[650105])
        (117140 'end of statement')
        unknown tmp[424312] "maybe param" "temp"
        (424323 'move' tmp[424312](117144 call chpl__isArrayView value[117126]))
        unknown call_tmp[650110] "expr temp" "maybe param" "maybe type" "temp"
        (650113 'move' call_tmp[650110](424325 call _cond_invalid tmp[424312]))
        if call_tmp[650110]
        {
          (424328 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown isDRView[117156] "dead at end of block" "param"
        unknown tmp[564642] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564643] "maybe param" "temp"
        unknown call_tmp[650115] "expr temp" "maybe param" "maybe type" "temp"
        (650118 'move' call_tmp[650115](424313 call isTrue tmp[424312]))
        (564648 'move' tmp[564643](564646 call _cond_test call_tmp[650115]))
        if tmp[564643]
        {
          unknown tmp[564650] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[650120] "expr temp" "maybe param" "maybe type" "temp"
          (650123 'move' call_tmp[650120](117148 call chpl__getActualArray value[117126]))
          unknown call_tmp[650127] "expr temp" "maybe param" "maybe type" "temp"
          (650130 'move' call_tmp[650127](117153 call(117149 call (partial) isDefaultRectangular _mt[243] call_tmp[650120])))
          (564652 'move' tmp[564650](424316 call isTrue call_tmp[650127]))
          (564657 'move' tmp[564642](564654 '_paramFoldLogical' tmp[564643] tmp[564650]))
        }
        {
          (564662 'move' tmp[564642](564659 '_paramFoldLogical' tmp[564643] 0))
        }
        (542826 'init var' isDRView[117156] tmp[564642])
        (117159 'end of statement' value[117126] value[117126])
        unknown tmp[424333] "maybe param" "temp"
        (424344 'move' tmp[424333] isDR[117137])
        unknown call_tmp[650132] "expr temp" "maybe param" "maybe type" "temp"
        (650135 'move' call_tmp[650132](424346 call _cond_invalid tmp[424333]))
        if call_tmp[650132]
        {
          (424349 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[564669] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[564670] "maybe param" "temp"
        unknown call_tmp[650137] "expr temp" "maybe param" "maybe type" "temp"
        (650140 'move' call_tmp[650137](424334 call isTrue tmp[424333]))
        (564675 'move' tmp[564670](564673 call _cond_test call_tmp[650137]))
        if tmp[564670]
        {
          (564680 'move' tmp[564669](564677 '_paramFoldLogical' tmp[564670] 1))
        }
        {
          unknown tmp[564682] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (564684 'move' tmp[564682](424338 call isTrue isDRView[117156]))
          (564689 'move' tmp[564669](564686 '_paramFoldLogical' tmp[564670] tmp[564682]))
        }
        (516132 'move' ret[516122](516131 'deref' tmp[564669]))
        gotoReturn _end_chpl__isDROrDRView[516120] _end_chpl__isDROrDRView[516120]
      }
      {
        (117185 call compilerError "Invalid argument for chpl__isDROrDRView")
      }
    }
    label _end_chpl__isDROrDRView[516120]
    (516124 return ret[516122])
  }
  function chpl__isDomainView[117204](arg dom[117202]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516138] "RVV" "param" "temp"
    const value[117218] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[564696] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564697] "maybe param" "temp"
    unknown call_tmp[650142] "expr temp" "maybe param" "maybe type" "temp"
    (650145 'move' call_tmp[650142](117209 call isDomain dom[117202]))
    (564702 'move' tmp[564697](564700 call _cond_test call_tmp[650142]))
    if tmp[564697]
    {
      unknown tmp[564704] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564706 'move' tmp[564704](117211 call _value _mt[243] dom[117202]))
      (564711 'move' tmp[564696](564708 '_paramFoldLogical' tmp[564697] tmp[564704]))
    }
    {
      (564716 'move' tmp[564696](564713 '_paramFoldLogical' tmp[564697] dom[117202]))
    }
    (542828 'init var' value[117218] tmp[564696])
    (117221 'end of statement')
    unknown call_tmp[650151] "maybe param" "maybe type" "temp"
    (650154 'move' call_tmp[650151](117230 call(117226 call (partial) isSliceDomainView _mt[243] value[117218])))
    unknown isSlice[117231] "dead at end of block" "param"
    (542830 'init var' isSlice[117231] call_tmp[650151])
    (117234 'end of statement')
    unknown call_tmp[650158] "maybe param" "maybe type" "temp"
    (650161 'move' call_tmp[650158](117242 call(117238 call (partial) isRankChangeDomainView _mt[243] value[117218])))
    unknown isRankChange[117243] "dead at end of block" "param"
    (542832 'init var' isRankChange[117243] call_tmp[650158])
    (117246 'end of statement')
    unknown call_tmp[650165] "maybe param" "maybe type" "temp"
    (650168 'move' call_tmp[650165](117254 call(117250 call (partial) isReindexDomainView _mt[243] value[117218])))
    unknown isReindex[117255] "dead at end of block" "param"
    (542834 'init var' isReindex[117255] call_tmp[650165])
    (117258 'end of statement' value[117218] value[117218] value[117218])
    unknown tmp[424396] "maybe param" "temp"
    unknown tmp[424417] "maybe param" "temp"
    (424428 'move' tmp[424417] isSlice[117231])
    unknown call_tmp[650170] "expr temp" "maybe param" "maybe type" "temp"
    (650173 'move' call_tmp[650170](424430 call _cond_invalid tmp[424417]))
    if call_tmp[650170]
    {
      (424433 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564723] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564724] "maybe param" "temp"
    unknown call_tmp[650175] "expr temp" "maybe param" "maybe type" "temp"
    (650178 'move' call_tmp[650175](424418 call isTrue tmp[424417]))
    (564729 'move' tmp[564724](564727 call _cond_test call_tmp[650175]))
    if tmp[564724]
    {
      (564734 'move' tmp[564723](564731 '_paramFoldLogical' tmp[564724] 1))
    }
    {
      unknown tmp[564736] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564738 'move' tmp[564736](424422 call isTrue isRankChange[117243]))
      (564743 'move' tmp[564723](564740 '_paramFoldLogical' tmp[564724] tmp[564736]))
    }
    (424407 'move' tmp[424396] tmp[564723])
    unknown call_tmp[650180] "expr temp" "maybe param" "maybe type" "temp"
    (650183 'move' call_tmp[650180](424409 call _cond_invalid tmp[424396]))
    if call_tmp[650180]
    {
      (424412 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564750] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564751] "maybe param" "temp"
    unknown call_tmp[650185] "expr temp" "maybe param" "maybe type" "temp"
    (650188 'move' call_tmp[650185](424397 call isTrue tmp[424396]))
    (564756 'move' tmp[564751](564754 call _cond_test call_tmp[650185]))
    if tmp[564751]
    {
      (564761 'move' tmp[564750](564758 '_paramFoldLogical' tmp[564751] 1))
    }
    {
      unknown tmp[564763] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564765 'move' tmp[564763](424401 call isTrue isReindex[117255]))
      (564770 'move' tmp[564750](564767 '_paramFoldLogical' tmp[564751] tmp[564763]))
    }
    (516143 'move' ret[516138](516142 'deref' tmp[564750]))
    (516140 return ret[516138])
  }
  function chpl__getActualDomain[117274](arg dom[117272]:_any[178](?)) : _unknown[51]
  {
    unknown ret[516147] "RVV" "temp"
    unknown value[117288] "dead at end of block" "insert auto destroy"
    unknown tmp[564777] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564778] "maybe param" "temp"
    unknown call_tmp[650190] "expr temp" "maybe param" "maybe type" "temp"
    (650193 'move' call_tmp[650190](117279 call isDomain dom[117272]))
    (564783 'move' tmp[564778](564781 call _cond_test call_tmp[650190]))
    if tmp[564778]
    {
      unknown tmp[564785] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564787 'move' tmp[564785](117281 call _value _mt[243] dom[117272]))
      (564792 'move' tmp[564777](564789 '_paramFoldLogical' tmp[564778] tmp[564785]))
    }
    {
      (564797 'move' tmp[564777](564794 '_paramFoldLogical' tmp[564778] dom[117272]))
    }
    (542836 'init var' value[117288] tmp[564777])
    (117291 'end of statement')
    unknown ret[117309] "dead at end of block" "insert auto destroy"
    unknown tmp[564804] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564805] "maybe param" "temp"
    unknown call_tmp[650197] "expr temp" "maybe param" "maybe type" "temp"
    (650200 'move' call_tmp[650197](117296 call chpl__isDomainView value[117288]))
    (564810 'move' tmp[564805](564808 call _cond_test call_tmp[650197]))
    if tmp[564805]
    {
      unknown tmp[564812] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564814 'move' tmp[564812](117304 call(117300 call (partial) _getActualDomain _mt[243] value[117288])))
      (564819 'move' tmp[564804](564816 '_paramFoldLogical' tmp[564805] tmp[564812]))
    }
    {
      (564824 'move' tmp[564804](564821 '_paramFoldLogical' tmp[564805] value[117288]))
    }
    (542838 'init var' ret[117309] tmp[564804])
    (117312 'end of statement' value[117288] value[117288] value[117288])
    (516152 'move' ret[516147](516151 'deref' ret[117309]))
    gotoReturn _end_chpl__getActualDomain[516145] _end_chpl__getActualDomain[516145]
    (479443 'end of statement' ret[117309])
    label _end_chpl__getActualDomain[516145]
    (516149 return ret[516147])
  }
  function chpl__isRectangularDomType[117322](arg domainType[117320]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516158] "RVV" "param" "temp"
    unknown dom[117325] "dead at end of block" "insert auto destroy"
    (542840 'default init var' dom[117325] domainType[117320])
    (117328 'end of statement')
    unknown tmp[424438] "maybe param" "temp"
    (424449 'move' tmp[424438](117333 call isDomainType domainType[117320]))
    unknown call_tmp[650204] "expr temp" "maybe param" "maybe type" "temp"
    (650207 'move' call_tmp[650204](424451 call _cond_invalid tmp[424438]))
    if call_tmp[650204]
    {
      (424454 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564831] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564832] "maybe param" "temp"
    unknown call_tmp[650209] "expr temp" "maybe param" "maybe type" "temp"
    (650212 'move' call_tmp[650209](424439 call isTrue tmp[424438]))
    (564837 'move' tmp[564832](564835 call _cond_test call_tmp[650209]))
    if tmp[564832]
    {
      unknown tmp[564839] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650214] "expr temp" "maybe param" "maybe type" "temp"
      (650217 'move' call_tmp[650214](117337 call isRectangularDom dom[117325]))
      (564841 'move' tmp[564839](424442 call isTrue call_tmp[650214]))
      (564846 'move' tmp[564831](564843 '_paramFoldLogical' tmp[564832] tmp[564839]))
    }
    {
      (564851 'move' tmp[564831](564848 '_paramFoldLogical' tmp[564832] 0))
    }
    (516163 'move' ret[516158](516162 'deref' tmp[564831]))
    gotoReturn _end_chpl__isRectangularDomType[516156] _end_chpl__isRectangularDomType[516156]
    (479446 'end of statement' dom[117325])
    label _end_chpl__isRectangularDomType[516156]
    (516160 return ret[516158])
  }
  function chpl__isSparseDomType[117348](arg domainType[117346]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[516169] "RVV" "param" "temp"
    unknown dom[117351] "dead at end of block" "insert auto destroy"
    (542842 'default init var' dom[117351] domainType[117346])
    (117354 'end of statement')
    unknown call_tmp[650219] "expr temp" "maybe param" "maybe type" "temp"
    (650222 'move' call_tmp[650219](117359 call isSparseDom dom[117351]))
    (516174 'move' ret[516169](516173 'deref' call_tmp[650219]))
    gotoReturn _end_chpl__isSparseDomType[516167] _end_chpl__isSparseDomType[516167]
    (479448 'end of statement' dom[117351])
    label _end_chpl__isSparseDomType[516167]
    (516171 return ret[516169])
  }
  function chpl__parentDomainFromDomainRuntimeType[117368](arg domainType[117366]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516180] "RVV" "temp"
    unknown call_tmp[650224] "maybe param" "maybe type" "temp"
    (650227 'move' call_tmp[650224](117404 'get runtime type field' domainType[117366] "parentDom"))
    unknown parentDom[117405] "dead at end of block" "no auto destroy" "no copy"
    (542844 'init var' parentDom[117405] call_tmp[650224])
    (117408 'end of statement')
    unknown call_tmp[650231] "expr temp" "maybe param" "maybe type" "temp"
    (650234 'move' call_tmp[650231](117412 call _value _mt[243] parentDom[117405]))
    unknown call_tmp[650236] "expr temp" "maybe param" "maybe type" "temp"
    (650239 'move' call_tmp[650236](117416 call _getDomain call_tmp[650231]))
    (516185 'move' ret[516180](516184 'deref' call_tmp[650236]))
    gotoReturn _end_chpl__parentDomainFromDomainRuntimeType[516178] _end_chpl__parentDomainFromDomainRuntimeType[516178]
    (479450 'end of statement' parentDom[117405])
    label _end_chpl__parentDomainFromDomainRuntimeType[516178]
    (516182 return ret[516180])
  }
  function chpl__distributed[117427](arg d[117424]:_distribution[118979](?), arg domainType[117429]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516191] "RVV" "temp" "type variable"
    unknown call_tmp[650241] "expr temp" "maybe param" "maybe type" "temp"
    (650244 'move' call_tmp[650241](117434 call isDomainType domainType[117429]))
    unknown call_tmp[650246] "expr temp" "maybe param" "maybe type" "temp"
    (650249 'move' call_tmp[650246](117435 call ! call_tmp[650241]))
    unknown call_tmp[650251] "expr temp" "maybe param" "maybe type" "temp"
    (650254 'move' call_tmp[650251](117462 call _cond_test call_tmp[650246]))
    if call_tmp[650251]
    {
      unknown call_tmp[650256] "expr temp" "maybe param" "maybe type" "temp"
      (650259 'move' call_tmp[650256](117458 call _cast string[26] domainType[117429]))
      (117460 call compilerError "cannot apply 'dmapped' to the non-domain type " call_tmp[650256])
    }
    unknown call_tmp[650261] "expr temp" "maybe param" "maybe type" "temp"
    (650264 'move' call_tmp[650261](117471 call chpl__isRectangularDomType domainType[117429]))
    unknown call_tmp[650266] "expr temp" "maybe param" "maybe type" "temp"
    (650269 'move' call_tmp[650266](117555 call _cond_test call_tmp[650261]))
    if call_tmp[650266]
    {
      unknown dom[117473] "dead at end of block" "insert auto destroy"
      (542846 'default init var' dom[117473] domainType[117429])
      (117476 'end of statement')
      unknown call_tmp[650273] "expr temp" "maybe param" "maybe type" "temp"
      (650276 'move' call_tmp[650273](117482 call _value _mt[243] dom[117473]))
      unknown call_tmp[650280] "expr temp" "maybe param" "maybe type" "temp"
      (650283 'move' call_tmp[650280](117485 call rank _mt[243] call_tmp[650273]))
      unknown call_tmp[650287] "expr temp" "maybe param" "maybe type" "temp"
      (650290 'move' call_tmp[650287](117489 call _value _mt[243] dom[117473]))
      unknown call_tmp[650294] "expr temp" "maybe param" "maybe type" "temp"
      (650297 'move' call_tmp[650294](117492 call idxType _mt[243] call_tmp[650287]))
      unknown call_tmp[650301] "expr temp" "maybe param" "maybe type" "temp"
      (650304 'move' call_tmp[650301](117496 call _value _mt[243] dom[117473]))
      unknown call_tmp[650308] "expr temp" "maybe param" "maybe type" "temp"
      (650311 'move' call_tmp[650308](117499 call stridable _mt[243] call_tmp[650301]))
      unknown call_tmp[650313] "expr temp" "maybe param" "maybe type" "temp"
      (650316 'move' call_tmp[650313](117502 call chpl__buildDomainRuntimeType d[117424] call_tmp[650280] call_tmp[650294] call_tmp[650308]))
      (516196 'move' ret[516191](516195 'deref' call_tmp[650313]))
      gotoReturn _end_chpl__distributed[516189] _end_chpl__distributed[516189]
      (479453 'end of statement' dom[117473] dom[117473] dom[117473])
    }
    {
      unknown call_tmp[650318] "expr temp" "maybe param" "maybe type" "temp"
      (650321 'move' call_tmp[650318](117508 call chpl__isSparseDomType domainType[117429]))
      unknown call_tmp[650323] "expr temp" "maybe param" "maybe type" "temp"
      (650326 'move' call_tmp[650323](117551 call _cond_test call_tmp[650318]))
      if call_tmp[650323]
      {
        const parentDom[117513] "dead at end of block" "const" "ref var"
        unknown call_tmp[650328] "expr temp" "maybe param" "maybe type" "temp"
        (650331 'move' call_tmp[650328](117512 call chpl__parentDomainFromDomainRuntimeType domainType[117429]))
        (542849 'move' parentDom[117513](542848 'addr of' call_tmp[650328]))
        (117516 'end of statement')
        unknown call_tmp[650333] "expr temp" "maybe param" "maybe type" "temp"
        (650336 'move' call_tmp[650333](117522 call chpl__buildSparseDomainRuntimeType d[117424] parentDom[117513]))
        (516201 'move' ret[516191](516200 'deref' call_tmp[650333]))
        gotoReturn _end_chpl__distributed[516189] _end_chpl__distributed[516189]
        (479457 'end of statement' parentDom[117513])
      }
      {
        unknown dom[117526] "dead at end of block" "insert auto destroy"
        (542851 'default init var' dom[117526] domainType[117429])
        (117529 'end of statement')
        unknown call_tmp[650340] "expr temp" "maybe param" "maybe type" "temp"
        (650343 'move' call_tmp[650340](117535 call _value _mt[243] dom[117526]))
        unknown call_tmp[650347] "expr temp" "maybe param" "maybe type" "temp"
        (650350 'move' call_tmp[650347](117538 call idxType _mt[243] call_tmp[650340]))
        unknown call_tmp[650354] "expr temp" "maybe param" "maybe type" "temp"
        (650357 'move' call_tmp[650354](117542 call _value _mt[243] dom[117526]))
        unknown call_tmp[650361] "expr temp" "maybe param" "maybe type" "temp"
        (650364 'move' call_tmp[650361](117545 call parSafe _mt[243] call_tmp[650354]))
        unknown call_tmp[650366] "expr temp" "maybe param" "maybe type" "temp"
        (650369 'move' call_tmp[650366](117548 call chpl__buildDomainRuntimeType d[117424] call_tmp[650347] call_tmp[650361]))
        (516206 'move' ret[516191](516205 'deref' call_tmp[650366]))
        gotoReturn _end_chpl__distributed[516189] _end_chpl__distributed[516189]
        (479459 'end of statement' dom[117526] dom[117526])
      }
    }
    label _end_chpl__distributed[516189]
    (516193 return ret[516191])
  }
  function chpl__distributionFromDomainRuntimeType[117566](arg rtt[117564]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516212] "RVV" "temp"
    unknown call_tmp[650371] "maybe param" "maybe type" "temp"
    (650374 'move' call_tmp[650371](117586 'get runtime type field' rtt[117564] "dist"))
    unknown dist[117587] "dead at end of block" "no auto destroy" "no copy"
    (542853 'init var' dist[117587] call_tmp[650371])
    (117590 'end of statement')
    unknown call_tmp[650378] "expr temp" "maybe param" "maybe type" "temp"
    (650381 'move' call_tmp[650378](117594 call _value _mt[243] dist[117587]))
    unknown call_tmp[650383] "expr temp" "maybe param" "maybe type" "temp"
    (650386 'move' call_tmp[650383](117598 call _getDistribution call_tmp[650378]))
    (516217 'move' ret[516212](516216 'deref' call_tmp[650383]))
    gotoReturn _end_chpl__distributionFromDomainRuntimeType[516210] _end_chpl__distributionFromDomainRuntimeType[516210]
    (479462 'end of statement' dist[117587])
    label _end_chpl__distributionFromDomainRuntimeType[516210]
    (516214 return ret[516212])
  }
  function chpl__domainFromArrayRuntimeType[117607](arg rtt[117605]:_any[178](?)) : _unknown[51] "return not owned"
  {
    unknown ret[516223] "RVV" "temp"
    unknown call_tmp[650388] "maybe param" "maybe type" "temp"
    (650391 'move' call_tmp[650388](117613 'get runtime type field' rtt[117605] "dom"))
    unknown dom[117614] "dead at end of block" "no auto destroy" "no copy"
    (542855 'init var' dom[117614] call_tmp[650388])
    (117617 'end of statement')
    unknown call_tmp[650395] "expr temp" "maybe param" "maybe type" "temp"
    (650398 'move' call_tmp[650395](117621 call _value _mt[243] dom[117614]))
    unknown call_tmp[650400] "expr temp" "maybe param" "maybe type" "temp"
    (650403 'move' call_tmp[650400](117625 call _getDomain call_tmp[650395]))
    (516228 'move' ret[516223](516227 'deref' call_tmp[650400]))
    gotoReturn _end_chpl__domainFromArrayRuntimeType[516221] _end_chpl__domainFromArrayRuntimeType[516221]
    (479464 'end of statement' dom[117614])
    label _end_chpl__domainFromArrayRuntimeType[516221]
    (516225 return ret[516223])
  }
  function chpl__eltTypeFromArrayRuntimeType[117634](arg rtt[117632]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516234] "RVV" "temp" "type variable"
    unknown eltType[117655] "dead at end of block" "no auto destroy" "no copy" "type variable"(117654 'get runtime type field' rtt[117632] "eltType")
    (542860 'move' eltType[117655](542857 'get runtime type field' rtt[117632] "eltType"))
    (479466 'end of statement')
    (516239 'move' ret[516234](516238 'deref' eltType[117655]))
    gotoReturn _end_chpl__eltTypeFromArrayRuntimeType[516232] _end_chpl__eltTypeFromArrayRuntimeType[516232]
    (479467 'end of statement' eltType[117655])
    label _end_chpl__eltTypeFromArrayRuntimeType[516232]
    (516236 return ret[516234])
  }
  function chpl__instanceTypeFromArrayRuntimeType[117668](arg rtt[117666]:_any[178](?)) type : _unknown[51] "ignore runtime type"
  {
    unknown ret[516245] "RVV" "temp" "type variable"
    (117705 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (479469 'end of statement')
    unknown call_tmp[650405] "expr temp" "maybe param" "maybe type" "temp"
    (650408 'move' call_tmp[650405](117712 'static field type' rtt[117666] "_instance"))
    (516250 'move' ret[516245](516249 'deref' call_tmp[650405]))
    (516247 return ret[516245])
  }
  function chpl__buildIndexType[117723](param arg rank[117720]:int(64)[13], arg idxType[117725]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516254] "RVV" "temp" "type variable"
    (516259 'move' ret[516254](516258 'deref' idxType[117725]))
    (516256 return ret[516254])
  }
  where {
    (117729 call == rank[117720] 1)
  }
  function chpl__buildIndexType[117744](param arg rank[117741]:int(64)[13], arg idxType[117746]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516263] "RVV" "temp" "type variable"
    unknown call_tmp[650410] "expr temp" "maybe param" "maybe type" "temp"
    (650413 'move' call_tmp[650410](117754 call * rank[117741] idxType[117746]))
    (516268 'move' ret[516263](516267 'deref' call_tmp[650410]))
    (516265 return ret[516263])
  }
  where {
    (117750 call > rank[117741] 1)
  }
  function chpl__buildIndexType[117768](param arg rank[117765]:int(64)[13]) type : _unknown[51]
  {
    unknown ret[516272] "RVV" "temp" "type variable"
    unknown call_tmp[650415] "expr temp" "maybe param" "maybe type" "temp"
    (650418 'move' call_tmp[650415](117774 call chpl__buildIndexType rank[117765] int(64)[13]))
    (516277 'move' ret[516272](516276 'deref' call_tmp[650415]))
    (516274 return ret[516272])
  }
  function chpl__buildIndexType[117786](arg d[117783]:_domain[125914](?)) type : _unknown[51]
  {
    unknown ret[516281] "RVV" "temp" "type variable"
    unknown call_tmp[650422] "expr temp" "maybe param" "maybe type" "temp"
    (650425 'move' call_tmp[650422](117790 call rank _mt[243] d[117783]))
    unknown call_tmp[650429] "expr temp" "maybe param" "maybe type" "temp"
    (650432 'move' call_tmp[650429](117795 call _value _mt[243] d[117783]))
    unknown call_tmp[650436] "expr temp" "maybe param" "maybe type" "temp"
    (650439 'move' call_tmp[650436](117798 call idxType _mt[243] call_tmp[650429]))
    unknown call_tmp[650441] "expr temp" "maybe param" "maybe type" "temp"
    (650444 'move' call_tmp[650441](117801 call chpl__buildIndexType call_tmp[650422] call_tmp[650436]))
    (516286 'move' ret[516281](516285 'deref' call_tmp[650441]))
    (516283 return ret[516281])
  }
  function isRectangularDom[117813](arg d[117810]:_domain[125914](?)) param : _unknown[51]
  {
    unknown ret[516290] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[492173] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650448] "expr temp" "maybe param" "maybe type" "temp"
      (650451 'move' call_tmp[650448](117818 call _value _mt[243] d[117810]))
      (492177 'move' call_type_tmp[492173](117821 'typeof' call_tmp[650448]))
    }
    unknown call_tmp[650453] "expr temp" "maybe param" "maybe type" "temp"
    (650456 'move' call_tmp[650453](117823 call _to_borrowed call_type_tmp[492173]))
    unknown call_tmp[650458] "expr temp" "maybe param" "maybe type" "temp"
    (650461 'move' call_tmp[650458](354347 'is_subtype' BaseRectangularDom[382300](?) call_tmp[650453]))
    (516295 'move' ret[516290](516294 'deref' call_tmp[650458]))
    (516292 return ret[516290])
  }
  function isRectangularArr[117840](arg a[117837]:_array[133600](?)) param : _unknown[51]
  {
    unknown ret[516299] "RVV" "param" "temp"
    unknown call_tmp[650465] "expr temp" "maybe param" "maybe type" "temp"
    (650468 'move' call_tmp[650465](117844 call _dom _mt[243] a[117837]))
    unknown call_tmp[650470] "expr temp" "maybe param" "maybe type" "temp"
    (650473 'move' call_tmp[650470](117848 call isRectangularDom call_tmp[650465]))
    (516304 'move' ret[516299](516303 'deref' call_tmp[650470]))
    (516301 return ret[516299])
  }
  function isIrregularDom[117860](arg d[117857]:_domain[125914](?)) param : _unknown[51]
  {
    unknown ret[516308] "RVV" "param" "temp"
    unknown tmp[424459] "maybe param" "temp"
    (424470 'move' tmp[424459](117865 call isSparseDom d[117857]))
    unknown call_tmp[650475] "expr temp" "maybe param" "maybe type" "temp"
    (650478 'move' call_tmp[650475](424472 call _cond_invalid tmp[424459]))
    if call_tmp[650475]
    {
      (424475 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564858] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564859] "maybe param" "temp"
    unknown call_tmp[650480] "expr temp" "maybe param" "maybe type" "temp"
    (650483 'move' call_tmp[650480](424460 call isTrue tmp[424459]))
    (564864 'move' tmp[564859](564862 call _cond_test call_tmp[650480]))
    if tmp[564859]
    {
      (564869 'move' tmp[564858](564866 '_paramFoldLogical' tmp[564859] 1))
    }
    {
      unknown tmp[564871] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650485] "expr temp" "maybe param" "maybe type" "temp"
      (650488 'move' call_tmp[650485](117869 call isAssociativeDom d[117857]))
      (564873 'move' tmp[564871](424464 call isTrue call_tmp[650485]))
      (564878 'move' tmp[564858](564875 '_paramFoldLogical' tmp[564859] tmp[564871]))
    }
    (516313 'move' ret[516308](516312 'deref' tmp[564858]))
    (516310 return ret[516308])
  }
  function isIrregularArr[117885](arg a[117882]:_array[133600](?)) param : _unknown[51]
  {
    unknown ret[516317] "RVV" "param" "temp"
    unknown call_tmp[650492] "expr temp" "maybe param" "maybe type" "temp"
    (650495 'move' call_tmp[650492](117889 call _dom _mt[243] a[117882]))
    unknown call_tmp[650497] "expr temp" "maybe param" "maybe type" "temp"
    (650500 'move' call_tmp[650497](117893 call isIrregularDom call_tmp[650492]))
    (516322 'move' ret[516317](516321 'deref' call_tmp[650497]))
    (516319 return ret[516317])
  }
  function isAssociativeDom[117905](arg d[117902]:_domain[125914](?)) param : _unknown[51]
  {
    unknown ret[516344] "RVV" "param" "temp"
    function isAssociativeDomClass[117913](arg dc[117910]:BaseAssociativeDom[382305](?)) param : _unknown[51]
    {
      unknown ret[516326] "RVV" "param" "temp"
      (516331 'move' ret[516326](516330 'deref' 1))
      (516328 return ret[516326])
    }
    function isAssociativeDomClass[117926](arg dc[117924]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516335] "RVV" "param" "temp"
      (516340 'move' ret[516335](516339 'deref' 0))
      (516337 return ret[516335])
    }
    unknown call_tmp[650504] "expr temp" "maybe param" "maybe type" "temp"
    (650507 'move' call_tmp[650504](117937 call _value _mt[243] d[117902]))
    unknown call_tmp[650509] "expr temp" "maybe param" "maybe type" "temp"
    (650512 'move' call_tmp[650509](117941 call _to_borrowed call_tmp[650504]))
    unknown call_tmp[650514] "expr temp" "maybe param" "maybe type" "temp"
    (650517 'move' call_tmp[650514](117943 call isAssociativeDomClass call_tmp[650509]))
    (516349 'move' ret[516344](516348 'deref' call_tmp[650514]))
    (516346 return ret[516344])
  }
  function isAssociativeArr[117956](arg a[117953]:_array[133600](?)) param : _unknown[51]
  {
    unknown ret[516353] "RVV" "param" "temp"
    unknown call_tmp[650521] "expr temp" "maybe param" "maybe type" "temp"
    (650524 'move' call_tmp[650521](117960 call _dom _mt[243] a[117953]))
    unknown call_tmp[650526] "expr temp" "maybe param" "maybe type" "temp"
    (650529 'move' call_tmp[650526](117964 call isAssociativeDom call_tmp[650521]))
    (516358 'move' ret[516353](516357 'deref' call_tmp[650526]))
    (516355 return ret[516353])
  }
  function isSparseDom[117976](arg d[117973]:_domain[125914](?)) param : _unknown[51]
  {
    unknown ret[516380] "RVV" "param" "temp"
    function isSparseDomClass[117984](arg dc[117981]:BaseSparseDom[382310](?)) param : _unknown[51]
    {
      unknown ret[516362] "RVV" "param" "temp"
      (516367 'move' ret[516362](516366 'deref' 1))
      (516364 return ret[516362])
    }
    function isSparseDomClass[117997](arg dc[117995]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[516371] "RVV" "param" "temp"
      (516376 'move' ret[516371](516375 'deref' 0))
      (516373 return ret[516371])
    }
    unknown call_tmp[650533] "expr temp" "maybe param" "maybe type" "temp"
    (650536 'move' call_tmp[650533](118007 call _value _mt[243] d[117973]))
    unknown call_tmp[650538] "expr temp" "maybe param" "maybe type" "temp"
    (650541 'move' call_tmp[650538](118011 call isSparseDomClass call_tmp[650533]))
    (516385 'move' ret[516380](516384 'deref' call_tmp[650538]))
    (516382 return ret[516380])
  }
  function isSparseArr[118024](arg a[118021]:_array[133600](?)) param : _unknown[51]
  {
    unknown ret[516389] "RVV" "param" "temp"
    unknown call_tmp[650545] "expr temp" "maybe param" "maybe type" "temp"
    (650548 'move' call_tmp[650545](118028 call _dom _mt[243] a[118021]))
    unknown call_tmp[650550] "expr temp" "maybe param" "maybe type" "temp"
    (650553 'move' call_tmp[650550](118032 call isSparseDom call_tmp[650545]))
    (516394 'move' ret[516389](516393 'deref' call_tmp[650550]))
    (516391 return ret[516389])
  }
  function chpl__checkDomainsMatch[118046](arg a[118043]:_array[133600](?), arg b[118048]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650555] "expr temp" "maybe param" "maybe type" "temp"
    (650558 'move' call_tmp[650555](118092 call _cond_test 1))
    if call_tmp[650555]
    {
      unknown call_tmp[650562] "expr temp" "maybe param" "maybe type" "temp"
      (650565 'move' call_tmp[650562](118056 call _dom _mt[243] a[118043]))
      unknown call_tmp[650567] "expr temp" "maybe param" "maybe type" "temp"
      (650570 'move' call_tmp[650567](118060 call != call_tmp[650562] b[118048]))
      unknown call_tmp[650572] "expr temp" "maybe param" "maybe type" "temp"
      (650575 'move' call_tmp[650572](118087 call _cond_test call_tmp[650567]))
      if call_tmp[650572]
      {
        (118084 call boundsCheckHalt module=[255] HaltWrappers[209915] "domain mismatch on return")
        (359183 'referenced modules list' HaltWrappers[209915])
      }
    }
    (516396 return _void[55])
    (355169 'used modules list'(118051 'import' HaltWrappers[209915]))
  }
  function chpl__checkDomainsMatch[118104](arg a[118101]:_iteratorRecord[205](?), arg b[118106]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650577] "expr temp" "maybe param" "maybe type" "temp"
    (650580 'move' call_tmp[650577](118139 call _cond_test 1))
    if call_tmp[650577]
    {
      unknown tmp[118114] "dead at end of block" "insert auto destroy"
      (542862 'init var' tmp[118114] a[118101])
      (118117 'end of statement')
      unknown call_tmp[650584] "expr temp" "maybe param" "maybe type" "temp"
      (650587 'move' call_tmp[650584](118120 call _dom _mt[243] tmp[118114]))
      unknown call_tmp[650589] "expr temp" "maybe param" "maybe type" "temp"
      (650592 'move' call_tmp[650589](118124 call != call_tmp[650584] b[118106]))
      unknown call_tmp[650594] "expr temp" "maybe param" "maybe type" "temp"
      (650597 'move' call_tmp[650594](118135 call _cond_test call_tmp[650589]))
      if call_tmp[650594]
      {
        (118132 call boundsCheckHalt module=[255] HaltWrappers[209915] "domain mismatch on return")
        (359190 'referenced modules list' HaltWrappers[209915])
      }
    }
    (516398 return _void[55])
    (355171 'used modules list'(118109 'import' HaltWrappers[209915]))
  }
  function chpl__checkEltTypeMatch[118153](arg a[118150]:_array[133600](?), arg b[118155]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650601] "expr temp" "maybe param" "maybe type" "temp"
    (650604 'move' call_tmp[650601](118158 call eltType _mt[243] a[118150]))
    unknown call_tmp[650606] "expr temp" "maybe param" "maybe type" "temp"
    (650609 'move' call_tmp[650606](118162 call != call_tmp[650601] b[118155]))
    unknown call_tmp[650611] "expr temp" "maybe param" "maybe type" "temp"
    (650614 'move' call_tmp[650611](118198 call _cond_test call_tmp[650606]))
    if call_tmp[650611]
    {
      unknown call_tmp[650618] "expr temp" "maybe param" "maybe type" "temp"
      (650621 'move' call_tmp[650618](118184 call eltType _mt[243] a[118150]))
      unknown call_tmp[650623] "expr temp" "maybe param" "maybe type" "temp"
      (650626 'move' call_tmp[650623](118188 call _cast string[26] call_tmp[650618]))
      unknown call_tmp[650628] "expr temp" "maybe param" "maybe type" "temp"
      (650631 'move' call_tmp[650628](118193 call _cast string[26] b[118155]))
      (118195 call compilerError "array element type mismatch in return from " call_tmp[650623] " to " call_tmp[650628])
    }
    (516400 return _void[55])
  }
  function chpl__checkEltTypeMatch[118211](arg a[118208]:_iteratorRecord[205](?), arg b[118213]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[650633] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650636 'move' call_tmp[650633](118217 'typeof' a[118208]))
    unknown eltType[118220] "dead at end of block" "insert auto destroy" "type variable"(118219 call iteratorToArrayElementType call_tmp[650633])
    unknown call_tmp[650638] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650641 'move' call_tmp[650638](542866 'typeof' a[118208]))
    (542868 'move' eltType[118220](542865 call iteratorToArrayElementType call_tmp[650638]))
    (479491 'end of statement')
    unknown call_tmp[650643] "expr temp" "maybe param" "maybe type" "temp"
    (650646 'move' call_tmp[650643](118226 call != eltType[118220] b[118213]))
    unknown call_tmp[650648] "expr temp" "maybe param" "maybe type" "temp"
    (650651 'move' call_tmp[650648](118243 call _cond_test call_tmp[650643]))
    if call_tmp[650648]
    {
      unknown call_tmp[650653] "expr temp" "maybe param" "maybe type" "temp"
      (650656 'move' call_tmp[650653](118233 call _cast string[26] eltType[118220]))
      unknown call_tmp[650658] "expr temp" "maybe param" "maybe type" "temp"
      (650661 'move' call_tmp[650658](118238 call _cast string[26] b[118213]))
      (118240 call compilerError "array element type mismatch in return from " call_tmp[650653] " to " call_tmp[650658])
      (479492 'end of statement' eltType[118220])
    }
    (516402 return _void[55])
  }
  function dmap[118251].init[799088](arg _mt[799090]:_MT[238], ref arg this[799091]:dmap[118251]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (799095 return _void[55])
  }
  function dmap[118251].init=[799097](arg _mt[799100]:_MT[238], ref arg this[799101]:dmap[118251], arg other[799102]:dmap[118251]) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (799106 return _void[55])
  }
  function dmap[118251].deinit[799108](arg _mt[799110]:_MT[238], arg this[799112]:dmap[118251]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (799120 return _void[55])
  }
  function dmap[118251].writeThis[799122](arg _mt[799126]:_MT[238], arg this[799124]:dmap[118251], arg f[799125]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799131 call writeThisDefaultImpl f[799125] this[799124])
    (799136 return _void[55])
  }
  function dmap[118251].readThis[799138](arg _mt[799142]:_MT[238], arg this[799140]:dmap[118251], arg f[799141]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799146 call readThisDefaultImpl f[799141] this[799140])
    (799152 return _void[55])
  }
  function chpl_fields_are_comparable[799166](arg _arg1[799168]:dmap[118251], arg _arg2[799169]:dmap[118251]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799178]:bool[10] "RVV" "param" "temp"
    (799183 'move' ret[799178](799182 'deref' 1))
    (799180 return ret[799178])
  }
  function ==[799154](arg _arg1[799156]:dmap[118251], arg _arg2[799157]:dmap[118251]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799197]:bool[10] "RVV" "temp"
    (799202 'move' ret[799197](799201 'deref' 1))
    (799199 return ret[799197])
  }
  where {
    unknown call_tmp[799204] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799207 'move' call_tmp[799204](799160 'typeof' _arg1[799156]))
    unknown call_tmp[799209] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799212 'move' call_tmp[799209](799162 'typeof' _arg2[799157]))
    unknown call_tmp[799214] "expr temp" "maybe param" "maybe type" "temp"
    (799217 'move' call_tmp[799214](799164 call == call_tmp[799204] call_tmp[799209]))
    unknown call_tmp[799219] "expr temp" "maybe param" "maybe type" "temp"
    (799222 'move' call_tmp[799219](799185 call chpl_fields_are_comparable[799166] _arg1[799156] _arg2[799157]))
    (799189 '&' call_tmp[799214] call_tmp[799219])
  }
  function chpl_fields_are_comparable[799236](arg _arg1[799238]:dmap[118251], arg _arg2[799239]:dmap[118251]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799248]:bool[10] "RVV" "param" "temp"
    (799253 'move' ret[799248](799252 'deref' 1))
    (799250 return ret[799248])
  }
  function !=[799224](arg _arg1[799226]:dmap[118251], arg _arg2[799227]:dmap[118251]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799267]:bool[10] "RVV" "temp"
    (799272 'move' ret[799267](799271 'deref' 0))
    (799269 return ret[799267])
  }
  where {
    unknown call_tmp[799274] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799277 'move' call_tmp[799274](799230 'typeof' _arg1[799226]))
    unknown call_tmp[799279] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799282 'move' call_tmp[799279](799232 'typeof' _arg2[799227]))
    unknown call_tmp[799284] "expr temp" "maybe param" "maybe type" "temp"
    (799287 'move' call_tmp[799284](799234 call == call_tmp[799274] call_tmp[799279]))
    unknown call_tmp[799289] "expr temp" "maybe param" "maybe type" "temp"
    (799292 'move' call_tmp[799289](799255 call chpl_fields_are_comparable[799236] _arg1[799226] _arg2[799227]))
    (799259 '&' call_tmp[799284] call_tmp[799289])
  }
  function chpl_fields_are_comparable[799306](arg _arg1[799308]:dmap[118251], arg _arg2[799309]:dmap[118251]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799318]:bool[10] "RVV" "param" "temp"
    (799323 'move' ret[799318](799322 'deref' 1))
    (799320 return ret[799318])
  }
  function <[799294](arg _arg1[799296]:dmap[118251], arg _arg2[799297]:dmap[118251]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799337]:bool[10] "RVV" "temp"
    (799342 'move' ret[799337](799341 'deref' 0))
    (799339 return ret[799337])
  }
  where {
    unknown call_tmp[799344] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799347 'move' call_tmp[799344](799300 'typeof' _arg1[799296]))
    unknown call_tmp[799349] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799352 'move' call_tmp[799349](799302 'typeof' _arg2[799297]))
    unknown call_tmp[799354] "expr temp" "maybe param" "maybe type" "temp"
    (799357 'move' call_tmp[799354](799304 call == call_tmp[799344] call_tmp[799349]))
    unknown call_tmp[799359] "expr temp" "maybe param" "maybe type" "temp"
    (799362 'move' call_tmp[799359](799325 call chpl_fields_are_comparable[799306] _arg1[799296] _arg2[799297]))
    (799329 '&' call_tmp[799354] call_tmp[799359])
  }
  function chpl_fields_are_comparable[799376](arg _arg1[799378]:dmap[118251], arg _arg2[799379]:dmap[118251]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799388]:bool[10] "RVV" "param" "temp"
    (799393 'move' ret[799388](799392 'deref' 1))
    (799390 return ret[799388])
  }
  function <=[799364](arg _arg1[799366]:dmap[118251], arg _arg2[799367]:dmap[118251]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799407]:bool[10] "RVV" "temp"
    (799412 'move' ret[799407](799411 'deref' 1))
    (799409 return ret[799407])
  }
  where {
    unknown call_tmp[799414] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799417 'move' call_tmp[799414](799370 'typeof' _arg1[799366]))
    unknown call_tmp[799419] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799422 'move' call_tmp[799419](799372 'typeof' _arg2[799367]))
    unknown call_tmp[799424] "expr temp" "maybe param" "maybe type" "temp"
    (799427 'move' call_tmp[799424](799374 call == call_tmp[799414] call_tmp[799419]))
    unknown call_tmp[799429] "expr temp" "maybe param" "maybe type" "temp"
    (799432 'move' call_tmp[799429](799395 call chpl_fields_are_comparable[799376] _arg1[799366] _arg2[799367]))
    (799399 '&' call_tmp[799424] call_tmp[799429])
  }
  function chpl_fields_are_comparable[799446](arg _arg1[799448]:dmap[118251], arg _arg2[799449]:dmap[118251]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799458]:bool[10] "RVV" "param" "temp"
    (799463 'move' ret[799458](799462 'deref' 1))
    (799460 return ret[799458])
  }
  function >[799434](arg _arg1[799436]:dmap[118251], arg _arg2[799437]:dmap[118251]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799477]:bool[10] "RVV" "temp"
    (799482 'move' ret[799477](799481 'deref' 0))
    (799479 return ret[799477])
  }
  where {
    unknown call_tmp[799484] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799487 'move' call_tmp[799484](799440 'typeof' _arg1[799436]))
    unknown call_tmp[799489] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799492 'move' call_tmp[799489](799442 'typeof' _arg2[799437]))
    unknown call_tmp[799494] "expr temp" "maybe param" "maybe type" "temp"
    (799497 'move' call_tmp[799494](799444 call == call_tmp[799484] call_tmp[799489]))
    unknown call_tmp[799499] "expr temp" "maybe param" "maybe type" "temp"
    (799502 'move' call_tmp[799499](799465 call chpl_fields_are_comparable[799446] _arg1[799436] _arg2[799437]))
    (799469 '&' call_tmp[799494] call_tmp[799499])
  }
  function chpl_fields_are_comparable[799516](arg _arg1[799518]:dmap[118251], arg _arg2[799519]:dmap[118251]) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[799528]:bool[10] "RVV" "param" "temp"
    (799533 'move' ret[799528](799532 'deref' 1))
    (799530 return ret[799528])
  }
  function >=[799504](arg _arg1[799506]:dmap[118251], arg _arg2[799507]:dmap[118251]) : bool[10] "compiler generated" "last resort"
  {
    val ret[799547]:bool[10] "RVV" "temp"
    (799552 'move' ret[799547](799551 'deref' 1))
    (799549 return ret[799547])
  }
  where {
    unknown call_tmp[799554] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799557 'move' call_tmp[799554](799510 'typeof' _arg1[799506]))
    unknown call_tmp[799559] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799562 'move' call_tmp[799559](799512 'typeof' _arg2[799507]))
    unknown call_tmp[799564] "expr temp" "maybe param" "maybe type" "temp"
    (799567 'move' call_tmp[799564](799514 call == call_tmp[799554] call_tmp[799559]))
    unknown call_tmp[799569] "expr temp" "maybe param" "maybe type" "temp"
    (799572 'move' call_tmp[799569](799535 call chpl_fields_are_comparable[799516] _arg1[799506] _arg2[799507]))
    (799539 '&' call_tmp[799564] call_tmp[799569])
  }
  function =[799574](ref arg _arg1[799576]:dmap[118251], const?  ref arg _arg2[799577]:dmap[118251]) : void[4] "assignop" "compiler generated" "last resort"
  {
    (799588 return _void[55])
  }
  where {
    unknown call_tmp[799590] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799593 'move' call_tmp[799590](799580 'typeof' _arg1[799576]))
    unknown call_tmp[799595] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (799598 'move' call_tmp[799595](799582 'typeof' _arg2[799577]))
    (799584 call == call_tmp[799590] call_tmp[799595])
  }
  function chpl__defaultHash[799600](arg r[799602]:dmap[118251]) : _unknown[51] "compiler generated" "inline" "last resort"
  {
    unknown ret[799610] "RVV" "temp"
    (799615 'move' ret[799610](799614 'deref' 0))
    (799612 return ret[799610])
  }
  type dmap[118251]
  function chpl__buildDistType[118258](arg t[118256]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[516406] "RVV" "temp" "type variable"
    unknown x[118273] "dead at end of block" "insert auto destroy"
    unknown call_tmp[650663] "expr temp" "maybe param" "maybe type" "temp"
    (650666 'move' call_tmp[650663](118271 call _to_unmanaged t[118256]))
    unknown call_tmp[650668] "expr temp" "maybe param" "maybe type" "temp"
    (650671 'move' call_tmp[650668](118272 'to nilable class from type' call_tmp[650663]))
    (542870 'default init var' x[118273] call_tmp[650668])
    (118276 'end of statement')
    unknown call_tmp[650673] "expr temp" "maybe param" "maybe type" "temp"
    (650676 'move' call_tmp[650673](118281 call postfix! x[118273]))
    unknown call_tmp[650678] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650681 'move' call_tmp[650678](747905 'new' _distribution[118979](?) call_tmp[650673]))
    unknown y[118285] "dead at end of block" "insert auto destroy"
    (542872 'init var' y[118285] call_tmp[650678])
    (118288 'end of statement' x[118273])
    unknown call_tmp[650683] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (650686 'move' call_tmp[650683](118290 'typeof' y[118285]))
    (516411 'move' ret[516406](516410 'deref' call_tmp[650683]))
    gotoReturn _end_chpl__buildDistType[516404] _end_chpl__buildDistType[516404]
    (479495 'end of statement' y[118285])
    label _end_chpl__buildDistType[516404]
    (516408 return ret[516406])
  }
  where {
    unknown call_tmp[650688] "expr temp" "maybe param" "maybe type" "temp"
    (650691 'move' call_tmp[650688](118264 call _to_borrowed t[118256]))
    (354348 'is_subtype' BaseDist[382395](?) call_tmp[650688])
  }
  function chpl__buildDistType[118300](arg t[118298]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118321 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
    (516415 return _void[55])
  }
  function chpl__buildDistValue[118332](arg x[118329]:unmanaged[220](?)) : _unknown[51]
  {
    unknown ret[516419] "RVV" "temp"
    unknown call_tmp[650693] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650696 'move' call_tmp[650693](747906 'new' _distribution[118979](?) x[118329]))
    (516424 'move' ret[516419](516423 'deref' call_tmp[650693]))
    (516421 return ret[516419])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492179] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650700] "expr temp" "maybe param" "maybe type" "temp"
      (650703 'move' call_tmp[650700](118340 call(118336 call (partial) borrow _mt[243] x[118329])))
      (492183 'move' call_type_tmp[492179](118341 'typeof' call_tmp[650700]))
    }
    (354349 'is_subtype' BaseDist[382395](?) call_type_tmp[492179])
  }
  function chpl__buildDistValue[118362](in arg x[118359]:_owned[30](?)) : _unknown[51]
  {
    unknown ret[516428] "RVV" "temp"
    unknown call_tmp[650707] "expr temp" "maybe param" "maybe type" "temp"
    (650710 'move' call_tmp[650707](118382 call(118378 call (partial) release _mt[243] x[118359])))
    unknown call_tmp[650712] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650715 'move' call_tmp[650712](747907 'new' _distribution[118979](?) call_tmp[650707]))
    (516433 'move' ret[516428](516432 'deref' call_tmp[650712]))
    (516430 return ret[516428])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492185] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[650719] "expr temp" "maybe param" "maybe type" "temp"
      (650722 'move' call_tmp[650719](118370 call(118366 call (partial) borrow _mt[243] x[118359])))
      (492189 'move' call_type_tmp[492185](118371 'typeof' call_tmp[650719]))
    }
    (354350 'is_subtype' BaseDist[382395](?) call_type_tmp[492185])
  }
  function chpl__buildDistValue[118395](arg x[118393]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (118416 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
    (516435 return _void[55])
  }
  function _distribution[118979](?).init[118442](arg _mt[118983]:_MT[238], ref arg this[118981]:_distribution[118979](?), arg _pid[118439]:int(64)[13], arg _instance[118444]:_any[178](?), arg _unowned[118447]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461303] "temp"
    (461306 'init var' tmp[461303] _pid[118439] int(64)[13])
    (461308 'init field' this[118981] c"_pid" tmp[461303])
    (479501 'end of statement')
    unknown tmp[461312] "temp"
    (461314 'init var' tmp[461312] _instance[118444])
    (461316 'init field' this[118981] c"_instance" tmp[461312])
    (479502 'end of statement')
    unknown tmp[461320] "temp"
    (461323 'init var' tmp[461320] _unowned[118447] bool[10])
    (461325 'init field' this[118981] c"_unowned" tmp[461320])
    (479503 'end of statement')
    (516437 return _void[55])
  }
  function _distribution[118979](?).init[118485](arg _mt[118987]:_MT[238], ref arg this[118985]:_distribution[118979](?), arg value[118483]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461329] "temp"
    unknown tmp[564885] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564886] "maybe param" "temp"
    unknown call_tmp[650724] "expr temp" "maybe param" "maybe type" "temp"
    (650727 'move' call_tmp[650724](118494 call _isPrivatized value[118483]))
    (564891 'move' tmp[564886](564889 call _cond_test call_tmp[650724]))
    if tmp[564886]
    {
      unknown tmp[564893] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (564895 'move' tmp[564893](118498 call _newPrivatizedClass value[118483]))
      (564900 'move' tmp[564885](564897 '_paramFoldLogical' tmp[564886] tmp[564893]))
    }
    {
      (564905 'move' tmp[564885](564902 '_paramFoldLogical' tmp[564886] nullPid[113724]))
    }
    (461332 'init var' tmp[461329] tmp[564885] int(64)[13])
    (461334 'init field' this[118985] c"_pid" tmp[461329])
    (479504 'end of statement')
    unknown call_tmp[650729] "maybe param" "maybe type" "temp"
    (650732 'move' call_tmp[650729](118514 call _to_unmanaged value[118483]))
    unknown tmp[461338] "temp"
    (461340 'init var' tmp[461338] call_tmp[650729])
    (461342 'init field' this[118985] c"_instance" tmp[461338])
    (479505 'end of statement')
    val tmp[461347]:bool[10] "temp"
    (461350 'default init var' tmp[461347] bool[10])
    (461352 '.=' this[118985] c"_unowned" tmp[461347])
    (479506 'end of statement')
    (516439 return _void[55])
  }
  function _distribution[118979](?).init=[118526](arg _mt[118991]:_MT[238], ref arg this[118989]:_distribution[118979](?), const  ref arg other[118523]:_distribution[118979](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[650736] "expr temp" "maybe param" "maybe type" "temp"
    (650739 'move' call_tmp[650736](118529 call _value _mt[243] other[118523]))
    unknown call_tmp[650743] "maybe param" "maybe type" "temp"
    (650746 'move' call_tmp[650743](118538 call(118534 call (partial) dsiClone _mt[243] call_tmp[650736])))
    unknown value[118539] "dead at end of block" "insert auto destroy"
    (542874 'init var' value[118539] call_tmp[650743])
    (118542 'end of statement')
    (118550 call(118545 call (partial) init _mt[243] this[118989]) value[118539])
    (479507 'end of statement' value[118539])
    (516441 return _void[55])
  }
  function _distribution[118979](?)._value[118556](arg _mt[118995]:_MT[238], arg this[118993]:_distribution[118979](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516445] "RVV" "temp"
    unknown call_tmp[650752] "expr temp" "maybe param" "maybe type" "temp"
    (650755 'move' call_tmp[650752](382578 call _instance _mt[243] this[118993]))
    unknown call_tmp[650757] "expr temp" "maybe param" "maybe type" "temp"
    (650760 'move' call_tmp[650757](118561 call _isPrivatized call_tmp[650752]))
    unknown call_tmp[650762] "expr temp" "maybe param" "maybe type" "temp"
    (650765 'move' call_tmp[650762](118575 call _cond_test call_tmp[650757]))
    if call_tmp[650762]
    {
      { scopeless type
        unknown call_type_tmp[492191] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[650769] "expr temp" "maybe param" "maybe type" "temp"
        (650772 'move' call_tmp[650769](382583 call _instance _mt[243] this[118993]))
        (492195 'move' call_type_tmp[492191](118564 'typeof' call_tmp[650769]))
      }
      unknown call_tmp[650776] "expr temp" "maybe param" "maybe type" "temp"
      (650779 'move' call_tmp[650776](382588 call _pid _mt[243] this[118993]))
      unknown call_tmp[650781] "expr temp" "maybe param" "maybe type" "temp"
      (650784 'move' call_tmp[650781](118567 call chpl_getPrivatizedCopy call_type_tmp[492191] call_tmp[650776]))
      (516450 'move' ret[516445](516449 'deref' call_tmp[650781]))
      gotoReturn _end__value[516443] _end__value[516443]
    }
    {
      unknown call_tmp[650788] "expr temp" "maybe param" "maybe type" "temp"
      (650791 'move' call_tmp[650788](382593 call _instance _mt[243] this[118993]))
      (516455 'move' ret[516445](516454 'deref' call_tmp[650788]))
      gotoReturn _end__value[516443] _end__value[516443]
    }
    label _end__value[516443]
    (516447 return ret[516445])
  }
  function _distribution[118979](?).chpl_forwarding_expr4__value[118584](arg _mt[118999]:_MT[238], arg this[118997]:_distribution[118979](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516461] "RVV" "temp"
    (516465 'move' ret[516461](382597 call _value _mt[243] this[118997]))
    (516463 return ret[516461])
  }
  function _distribution[118979](?)._do_destroy[118592](arg _mt[119003]:_MT[238], arg this[119001]:_distribution[118979](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown tmp[424480] "maybe param" "temp"
    unknown call_tmp[650797] "expr temp" "maybe param" "maybe type" "temp"
    (650800 'move' call_tmp[650797](382602 call _unowned _mt[243] this[119001]))
    (424491 'move' tmp[424480](118595 call ! call_tmp[650797]))
    unknown call_tmp[650802] "expr temp" "maybe param" "maybe type" "temp"
    (650805 'move' call_tmp[650802](424493 call _cond_invalid tmp[424480]))
    if call_tmp[650802]
    {
      (424496 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564912] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564913] "maybe param" "temp"
    unknown call_tmp[650807] "expr temp" "maybe param" "maybe type" "temp"
    (650810 'move' call_tmp[650807](424481 call isTrue tmp[424480]))
    (564918 'move' tmp[564913](564916 call _cond_test call_tmp[650807]))
    if tmp[564913]
    {
      unknown tmp[564920] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[650814] "expr temp" "maybe param" "maybe type" "temp"
      (650817 'move' call_tmp[650814](359209 call _instance _mt[243] this[119001]))
      unknown call_tmp[650821] "expr temp" "maybe param" "maybe type" "temp"
      (650824 'move' call_tmp[650821](118604 call(118600 call (partial) singleton _mt[243] call_tmp[650814])))
      unknown call_tmp[650826] "expr temp" "maybe param" "maybe type" "temp"
      (650829 'move' call_tmp[650826](118605 call ! call_tmp[650821]))
      (564922 'move' tmp[564920](424484 call isTrue call_tmp[650826]))
      (564927 'move' tmp[564912](564924 '_paramFoldLogical' tmp[564913] tmp[564920]))
    }
    {
      (564932 'move' tmp[564912](564929 '_paramFoldLogical' tmp[564913] 0))
    }
    unknown call_tmp[650831] "expr temp" "maybe param" "maybe type" "temp"
    (650834 'move' call_tmp[650831](118653 call _cond_test tmp[564912]))
    if call_tmp[650831]
    {
      {
        const tmp[118644] "const" "temp"
        unknown call_tmp[650838] "expr temp" "maybe param" "maybe type" "temp"
        (650841 'move' call_tmp[650838](382607 call _instance _mt[243] this[119001]))
        unknown call_tmp[650843] "expr temp" "maybe param" "maybe type" "temp"
        (650846 'move' call_tmp[650843](118641 '_wide_get_locale' call_tmp[650838]))
        (118645 'move' tmp[118644](118642 'deref' call_tmp[650843]))
        {
          unknown call_tmp[650850] "expr temp" "maybe param" "maybe type" "temp"
          (650853 'move' call_tmp[650850](359214 call _instance _mt[243] this[119001]))
          unknown call_tmp[650857] "maybe param" "maybe type" "temp"
          (650860 'move' call_tmp[650857](118615 call(118611 call (partial) remove _mt[243] call_tmp[650850])))
          unknown distToFree[118616] "dead at end of block" "insert auto destroy"
          (542876 'init var' distToFree[118616] call_tmp[650857])
          (118619 'end of statement')
          unknown call_tmp[650862] "expr temp" "maybe param" "maybe type" "temp"
          (650865 'move' call_tmp[650862](118623 call != distToFree[118616] nil[44]))
          unknown call_tmp[650867] "expr temp" "maybe param" "maybe type" "temp"
          (650870 'move' call_tmp[650867](118637 call _cond_test call_tmp[650862]))
          if call_tmp[650867]
          {
            unknown call_tmp[650872] "expr temp" "maybe param" "maybe type" "temp"
            (650875 'move' call_tmp[650872](118627 call postfix! distToFree[118616]))
            unknown call_tmp[650879] "expr temp" "maybe param" "maybe type" "temp"
            (650882 'move' call_tmp[650879](382614 call _instance _mt[243] this[119001]))
            unknown call_tmp[650884] "expr temp" "maybe param" "maybe type" "temp"
            (650887 'move' call_tmp[650884](118633 call _isPrivatized call_tmp[650879]))
            (118634 call _delete_dist call_tmp[650872] call_tmp[650884])
            (479512 'end of statement' distToFree[118616])
          }
        }
        (118648 'elided on block' 0 tmp[118644])
      }
    }
    (516467 return _void[55])
  }
  function _distribution[118979](?).deinit[118662](arg _mt[119007]:_MT[238], arg this[119005]:_distribution[118979](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (118666 call(382620 call (partial) _do_destroy _mt[243] this[119005]))
    (516469 return _void[55])
  }
  function _distribution[118979](?).clone[118673](arg _mt[119011]:_MT[238], arg this[119009]:_distribution[118979](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516473] "RVV" "temp"
    unknown call_tmp[650893] "expr temp" "maybe param" "maybe type" "temp"
    (650896 'move' call_tmp[650893](359218 call _value _mt[243] this[119009]))
    unknown call_tmp[650900] "expr temp" "maybe param" "maybe type" "temp"
    (650903 'move' call_tmp[650900](118682 call(118678 call (partial) dsiClone _mt[243] call_tmp[650893])))
    unknown call_tmp[650905] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (650908 'move' call_tmp[650905](747908 'new' _distribution[118979](?) call_tmp[650900]))
    (516478 'move' ret[516473](516477 'deref' call_tmp[650905]))
    (516475 return ret[516473])
  }
  function _distribution[118979](?).newRectangularDom[118696](arg _mt[119015]:_MT[238], arg this[119013]:_distribution[118979](?), param arg rank[118693]:int(64)[13], arg idxType[118698]:_any[178](?), param arg stridable[118701]:bool[10], arg ranges[118716] :
  unknown call_tmp[650910] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[516482] "RVV" "temp"
    unknown call_tmp[650917] "expr temp" "maybe param" "maybe type" "temp"
    (650920 'move' call_tmp[650917](359223 call _value _mt[243] this[119013]))
    unknown call_tmp[650924] "maybe param" "maybe type" "temp"
    (650927 'move' call_tmp[650924](118730 call(118722 call (partial) dsiNewRectangularDom _mt[243] call_tmp[650917]) rank[118693] idxType[118698] stridable[118701] ranges[118716]))
    unknown x[118731] "dead at end of block" "insert auto destroy"
    (542878 'init var' x[118731] call_tmp[650924])
    (118734 'end of statement')
    unknown call_tmp[650931] "expr temp" "maybe param" "maybe type" "temp"
    (650934 'move' call_tmp[650931](118743 call(118739 call (partial) linksDistribution _mt[243] x[118731])))
    unknown call_tmp[650936] "expr temp" "maybe param" "maybe type" "temp"
    (650939 'move' call_tmp[650936](118755 call _cond_test call_tmp[650931]))
    if call_tmp[650936]
    {
      unknown call_tmp[650943] "expr temp" "maybe param" "maybe type" "temp"
      (650946 'move' call_tmp[650943](359228 call _value _mt[243] this[119013]))
      (118752 call(118747 call (partial) add_dom _mt[243] call_tmp[650943]) x[118731])
      (479516 'end of statement' x[118731])
    }
    (516487 'move' ret[516482](516486 'deref' x[118731]))
    gotoReturn _end_newRectangularDom[516480] _end_newRectangularDom[516480]
    (479518 'end of statement' x[118731])
    label _end_newRectangularDom[516480]
    (516484 return ret[516482])
  }
  function _distribution[118979](?).newRectangularDom[118770](arg _mt[119019]:_MT[238], arg this[119017]:_distribution[118979](?), param arg rank[118767]:int(64)[13], arg idxType[118772]:_any[178](?), param arg stridable[118775]:bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516493] "RVV" "temp"
    unknown ranges[118790] "dead at end of block" "insert auto destroy"
    unknown call_tmp[650950] "expr temp" "maybe param" "maybe type" "temp"
    (650953 'move' call_tmp[650950](118787 call range[64316](?) idxType[118772] bounded[64205] stridable[118775]))
    unknown call_tmp[650955] "expr temp" "maybe param" "maybe type" "temp"
    (650958 'move' call_tmp[650955](118788 call * rank[118767] call_tmp[650950]))
    (542880 'default init var' ranges[118790] call_tmp[650955])
    (118793 'end of statement')
    unknown call_tmp[650962] "expr temp" "maybe param" "maybe type" "temp"
    (650965 'move' call_tmp[650962](118801 call(382639 call (partial) newRectangularDom _mt[243] this[119017]) rank[118767] idxType[118772] stridable[118775] ranges[118790]))
    (516498 'move' ret[516493](516497 'deref' call_tmp[650962]))
    gotoReturn _end_newRectangularDom[516491] _end_newRectangularDom[516491]
    (479520 'end of statement' ranges[118790])
    label _end_newRectangularDom[516491]
    (516495 return ret[516493])
  }
  function _distribution[118979](?).newAssociativeDom[118810](arg _mt[119023]:_MT[238], arg this[119021]:_distribution[118979](?), arg idxType[118808]:_any[178](?), param arg parSafe[118814]:bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    unknown ret[516504] "RVV" "temp"
    unknown call_tmp[650969] "expr temp" "maybe param" "maybe type" "temp"
    (650972 'move' call_tmp[650969](359233 call _value _mt[243] this[119021]))
    unknown call_tmp[650976] "maybe param" "maybe type" "temp"
    (650979 'move' call_tmp[650976](118827 call(118821 call (partial) dsiNewAssociativeDom _mt[243] call_tmp[650969]) idxType[118808] parSafe[118814]))
    unknown x[118828] "dead at end of block" "insert auto destroy"
    (542882 'init var' x[118828] call_tmp[650976])
    (118831 'end of statement')
    unknown call_tmp[650983] "expr temp" "maybe param" "maybe type" "temp"
    (650986 'move' call_tmp[650983](118838 call(118834 call (partial) linksDistribution _mt[243] x[118828])))
    unknown call_tmp[650988] "expr temp" "maybe param" "maybe type" "temp"
    (650991 'move' call_tmp[650988](118848 call _cond_test call_tmp[650983]))
    if call_tmp[650988]
    {
      unknown call_tmp[650995] "expr temp" "maybe param" "maybe type" "temp"
      (650998 'move' call_tmp[650995](359238 call _value _mt[243] this[119021]))
      (118845 call(118840 call (partial) add_dom _mt[243] call_tmp[650995]) x[118828])
      (479522 'end of statement' x[118828])
    }
    (516509 'move' ret[516504](516508 'deref' x[118828]))
    gotoReturn _end_newAssociativeDom[516502] _end_newAssociativeDom[516502]
    (479524 'end of statement' x[118828])
    label _end_newAssociativeDom[516502]
    (516506 return ret[516504])
  }
  function _distribution[118979](?).newSparseDom[118863](arg _mt[119027]:_MT[238], arg this[119025]:_distribution[118979](?), param arg rank[118860]:int(64)[13], arg idxType[118865]:_any[178](?), arg dom[118868]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516515] "RVV" "temp"
    unknown call_tmp[651004] "expr temp" "maybe param" "maybe type" "temp"
    (651007 'move' call_tmp[651004](359242 call _value _mt[243] this[119025]))
    unknown call_tmp[651011] "maybe param" "maybe type" "temp"
    (651014 'move' call_tmp[651011](118881 call(118874 call (partial) dsiNewSparseDom _mt[243] call_tmp[651004]) rank[118860] idxType[118865] dom[118868]))
    unknown x[118882] "dead at end of block" "insert auto destroy"
    (542884 'init var' x[118882] call_tmp[651011])
    (118885 'end of statement')
    unknown call_tmp[651018] "expr temp" "maybe param" "maybe type" "temp"
    (651021 'move' call_tmp[651018](118892 call(118888 call (partial) linksDistribution _mt[243] x[118882])))
    unknown call_tmp[651023] "expr temp" "maybe param" "maybe type" "temp"
    (651026 'move' call_tmp[651023](118902 call _cond_test call_tmp[651018]))
    if call_tmp[651023]
    {
      unknown call_tmp[651030] "expr temp" "maybe param" "maybe type" "temp"
      (651033 'move' call_tmp[651030](359247 call _value _mt[243] this[119025]))
      (118899 call(118894 call (partial) add_dom _mt[243] call_tmp[651030]) x[118882])
      (479526 'end of statement' x[118882])
    }
    (516520 'move' ret[516515](516519 'deref' x[118882]))
    gotoReturn _end_newSparseDom[516513] _end_newSparseDom[516513]
    (479528 'end of statement' x[118882])
    label _end_newSparseDom[516513]
    (516517 return ret[516515])
  }
  function _distribution[118979](?).idxToLocale[118915](arg _mt[119031]:_MT[238], arg this[119029]:_distribution[118979](?), arg ind[118913]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516526] "RVV" "temp"
    unknown call_tmp[651039] "expr temp" "maybe param" "maybe type" "temp"
    (651042 'move' call_tmp[651039](359251 call _value _mt[243] this[119029]))
    unknown call_tmp[651046] "expr temp" "maybe param" "maybe type" "temp"
    (651049 'move' call_tmp[651046](118925 call(118920 call (partial) dsiIndexToLocale _mt[243] call_tmp[651039]) ind[118913]))
    (516531 'move' ret[516526](516530 'deref' call_tmp[651046]))
    (516528 return ret[516526])
  }
  function _distribution[118979](?).readWriteThis[118935](arg _mt[119035]:_MT[238], arg this[119033]:_distribution[118979](?), arg f[118933]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651053] "expr temp" "maybe param" "maybe type" "temp"
    (651056 'move' call_tmp[651053](382659 call _value _mt[243] this[119033]))
    (118939 call <~> f[118933] call_tmp[651053])
    (516533 return _void[55])
  }
  function _distribution[118979](?).displayRepresentation[118947](arg _mt[119039]:_MT[238], arg this[119037]:_distribution[118979](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651060] "expr temp" "maybe param" "maybe type" "temp"
    (651063 'move' call_tmp[651060](359255 call _value _mt[243] this[119037]))
    (118956 call(118952 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[651060]))
    (516535 return _void[55])
  }
  function _distribution[118979](?).targetLocales[118963](arg _mt[119043]:_MT[238], arg this[119041]:_distribution[118979](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516539] "RVV" "temp"
    unknown call_tmp[651069] "expr temp" "maybe param" "maybe type" "temp"
    (651072 'move' call_tmp[651069](359259 call _value _mt[243] this[119041]))
    unknown call_tmp[651076] "expr temp" "maybe param" "maybe type" "temp"
    (651079 'move' call_tmp[651076](118972 call(118968 call (partial) dsiTargetLocales _mt[243] call_tmp[651069])))
    (516544 'move' ret[516539](516543 'deref' call_tmp[651076]))
    (516541 return ret[516539])
  }
  function _distribution[118979](?)._pid[799617](arg _mt[799619]:_MT[238], ref arg this[799621]:_distribution[118979](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799631] "RVV" "temp"
    unknown call_tmp[799638] "expr temp" "maybe param" "maybe type" "temp"
    (799641 'move' call_tmp[799638](799625 '.' this[799621] c"_pid"))
    (799636 'move' ret[799631](799635 'addr of' call_tmp[799638]))
    (799633 return ret[799631])
  }
  function _distribution[118979](?)._instance[799643](arg _mt[799645]:_MT[238], ref arg this[799647]:_distribution[118979](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799657] "RVV" "temp"
    unknown call_tmp[799664] "expr temp" "maybe param" "maybe type" "temp"
    (799667 'move' call_tmp[799664](799651 '.' this[799647] c"_instance"))
    (799662 'move' ret[799657](799661 'addr of' call_tmp[799664]))
    (799659 return ret[799657])
  }
  function _distribution[118979](?)._unowned[799669](arg _mt[799671]:_MT[238], ref arg this[799673]:_distribution[118979](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799683] "RVV" "temp"
    unknown call_tmp[799690] "expr temp" "maybe param" "maybe type" "temp"
    (799693 'move' call_tmp[799690](799677 '.' this[799673] c"_unowned"))
    (799688 'move' ret[799683](799687 'addr of' call_tmp[799690]))
    (799685 return ret[799683])
  }
  function _distribution[118979](?).writeThis[799695](arg _mt[799699]:_MT[238], arg this[799697]:_distribution[118979](?), arg f[799698]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799708 call(799704 call (partial) readWriteThis _mt[243] this[799697]) f[799698])
    (799711 return _void[55])
  }
  function _distribution[118979](?).readThis[799715](arg _mt[799719]:_MT[238], arg this[799717]:_distribution[118979](?), arg f[799718]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (799727 call(799723 call (partial) readWriteThis _mt[243] this[799717]) f[799718])
    (799731 return _void[55])
  }
  function chpl__defaultHash[799735](arg r[799737]:_distribution[118979](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[799768] "RVV" "temp"
    unknown call_tmp[799775] "expr temp" "maybe param" "maybe type" "temp"
    (799778 'move' call_tmp[799775](799754 call _unowned _mt[243] r[799737]))
    unknown call_tmp[799780] "expr temp" "maybe param" "maybe type" "temp"
    (799783 'move' call_tmp[799780](799758 call chpl__defaultHash call_tmp[799775]))
    unknown call_tmp[799785] "expr temp" "maybe param" "maybe type" "temp"
    (799788 'move' call_tmp[799785](799745 call _instance _mt[243] r[799737]))
    unknown call_tmp[799790] "expr temp" "maybe param" "maybe type" "temp"
    (799793 'move' call_tmp[799790](799749 call chpl__defaultHash call_tmp[799785]))
    unknown call_tmp[799795] "expr temp" "maybe param" "maybe type" "temp"
    (799798 'move' call_tmp[799795](799739 call _pid _mt[243] r[799737]))
    unknown call_tmp[799800] "expr temp" "maybe param" "maybe type" "temp"
    (799803 'move' call_tmp[799800](799743 call chpl__defaultHash call_tmp[799795]))
    unknown call_tmp[799805] "expr temp" "maybe param" "maybe type" "temp"
    (799808 'move' call_tmp[799805](799751 call chpl__defaultHashCombine call_tmp[799790] call_tmp[799800] 2))
    unknown call_tmp[799810] "expr temp" "maybe param" "maybe type" "temp"
    (799813 'move' call_tmp[799810](799760 call chpl__defaultHashCombine call_tmp[799780] call_tmp[799805] 3))
    (799773 'move' ret[799768](799772 'deref' call_tmp[799810]))
    (799770 return ret[799768])
  }
  type _distribution[118979](?) val _pid[118423]:int(64)[13] int(64)[13] unknown _instance[118427] "owned" val _unowned[118432]:bool[10] bool[10] forwarding ( )
  function ==[119055](arg d1[119052]:_distribution[118979](?), arg d2[119061]:_distribution[118979](?)) : _unknown[51] "inline"
  {
    unknown ret[516548] "RVV" "temp"
    unknown call_tmp[651083] "expr temp" "maybe param" "maybe type" "temp"
    (651086 'move' call_tmp[651083](119065 call _value _mt[243] d1[119052]))
    unknown call_tmp[651090] "expr temp" "maybe param" "maybe type" "temp"
    (651093 'move' call_tmp[651090](119069 call _value _mt[243] d2[119061]))
    unknown call_tmp[651095] "expr temp" "maybe param" "maybe type" "temp"
    (651098 'move' call_tmp[651095](119072 call == call_tmp[651083] call_tmp[651090]))
    unknown call_tmp[651100] "expr temp" "maybe param" "maybe type" "temp"
    (651103 'move' call_tmp[651100](119077 call _cond_test call_tmp[651095]))
    if call_tmp[651100]
    {
      (516553 'move' ret[516548](516552 'deref' 1))
      gotoReturn _end_==[516546] _end_==[516546]
    }
    unknown call_tmp[651107] "expr temp" "maybe param" "maybe type" "temp"
    (651110 'move' call_tmp[651107](119084 call _value _mt[243] d1[119052]))
    unknown call_tmp[651116] "expr temp" "maybe param" "maybe type" "temp"
    (651119 'move' call_tmp[651116](119093 call _value _mt[243] d2[119061]))
    unknown call_tmp[651121] "expr temp" "maybe param" "maybe type" "temp"
    (651124 'move' call_tmp[651121](119097 call(119089 call (partial) dsiEqualDMaps _mt[243] call_tmp[651107]) call_tmp[651116]))
    (516558 'move' ret[516548](516557 'deref' call_tmp[651121]))
    label _end_==[516546]
    (516550 return ret[516548])
  }
  function !=[119111](arg d1[119108]:_distribution[118979](?), arg d2[119117]:_distribution[118979](?)) : _unknown[51] "inline"
  {
    unknown ret[516562] "RVV" "temp"
    unknown call_tmp[651128] "expr temp" "maybe param" "maybe type" "temp"
    (651131 'move' call_tmp[651128](119121 call _value _mt[243] d1[119108]))
    unknown call_tmp[651135] "expr temp" "maybe param" "maybe type" "temp"
    (651138 'move' call_tmp[651135](119125 call _value _mt[243] d2[119117]))
    unknown call_tmp[651140] "expr temp" "maybe param" "maybe type" "temp"
    (651143 'move' call_tmp[651140](119128 call == call_tmp[651128] call_tmp[651135]))
    unknown call_tmp[651145] "expr temp" "maybe param" "maybe type" "temp"
    (651148 'move' call_tmp[651145](119133 call _cond_test call_tmp[651140]))
    if call_tmp[651145]
    {
      (516567 'move' ret[516562](516566 'deref' 0))
      gotoReturn _end_!=[516560] _end_!=[516560]
    }
    unknown call_tmp[651152] "expr temp" "maybe param" "maybe type" "temp"
    (651155 'move' call_tmp[651152](119140 call _value _mt[243] d1[119108]))
    unknown call_tmp[651161] "expr temp" "maybe param" "maybe type" "temp"
    (651164 'move' call_tmp[651161](119147 call _value _mt[243] d2[119117]))
    unknown call_tmp[651166] "expr temp" "maybe param" "maybe type" "temp"
    (651169 'move' call_tmp[651166](119151 call(119143 call (partial) dsiEqualDMaps _mt[243] call_tmp[651152]) call_tmp[651161]))
    unknown call_tmp[651171] "expr temp" "maybe param" "maybe type" "temp"
    (651174 'move' call_tmp[651171](119152 call ! call_tmp[651166]))
    (516572 'move' ret[516562](516571 'deref' call_tmp[651171]))
    label _end_!=[516560]
    (516564 return ret[516562])
  }
  function chpl_defaultComparator[119160]() : _unknown[51]
  {
    unknown ret[516576] "RVV" "temp"
    (516581 'move' ret[516576](516580 'deref' defaultComparator[267894]))
    (516578 return ret[516576])
    (355173 'used modules list'(119163 'use' Sort[267885]))
  }
  function _domain[125914](?).chpl__promotionType[119188](arg _mt[125918]:_MT[238], arg this[125916]:_domain[125914](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[516585] "RVV" "temp" "type variable"
    unknown call_tmp[651178] "expr temp" "maybe param" "maybe type" "temp"
    (651181 'move' call_tmp[651178](382668 call rank _mt[243] this[125916]))
    unknown call_tmp[651185] "expr temp" "maybe param" "maybe type" "temp"
    (651188 'move' call_tmp[651185](359271 call _value _mt[243] this[125916]))
    unknown call_tmp[651192] "expr temp" "maybe param" "maybe type" "temp"
    (651195 'move' call_tmp[651192](119193 call idxType _mt[243] call_tmp[651185]))
    unknown call_tmp[651197] "expr temp" "maybe param" "maybe type" "temp"
    (651200 'move' call_tmp[651197](119196 call chpl__buildIndexType call_tmp[651178] call_tmp[651192]))
    (516590 'move' ret[516585](516589 'deref' call_tmp[651197]))
    (516587 return ret[516585])
  }
  function _domain[125914](?).init[119209](arg _mt[125922]:_MT[238], ref arg this[125920]:_domain[125914](?), arg _pid[119206]:int(64)[13], arg _instance[119211]:_any[178](?), arg _unowned[119214]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[461384] "temp"
    (461387 'init var' tmp[461384] _pid[119206] int(64)[13])
    (461389 'init field' this[125920] c"_pid" tmp[461384])
    (479540 'end of statement')
    unknown tmp[461393] "temp"
    (461395 'init var' tmp[461393] _instance[119211])
    (461397 'init field' this[125920] c"_instance" tmp[461393])
    (479541 'end of statement')
    unknown tmp[461401] "temp"
    (461404 'init var' tmp[461401] _unowned[119214] bool[10])
    (461406 'init field' this[125920] c"_unowned" tmp[461401])
    (479542 'end of statement')
    (516592 return _void[55])
  }
  function _domain[125914](?).init[119248](arg _mt[125926]:_MT[238], ref arg this[125924]:_domain[125914](?), arg value[119246]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651202] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651205 'move' call_tmp[651202](119252 'typeof' value[119246]))
    unknown call_tmp[651207] "expr temp" "maybe param" "maybe type" "temp"
    (651210 'move' call_tmp[651207](119254 call _to_unmanaged call_tmp[651202]))
    unknown call_tmp[651212] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (651215 'move' call_tmp[651212](119256 'typeof' value[119246]))
    unknown call_tmp[651217] "expr temp" "maybe param" "maybe type" "temp"
    (651220 'move' call_tmp[651217](119257 call != call_tmp[651207] call_tmp[651212]))
    unknown call_tmp[651222] "expr temp" "maybe param" "maybe type" "temp"
    (651225 'move' call_tmp[651222](119264 call _cond_test call_tmp[651217]))
    if call_tmp[651222]
    {
      (119262 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[651227] "expr temp" "maybe param" "maybe type" "temp"
    (651230 'move' call_tmp[651227](119273 call _isPrivatized value[119246]))
    unknown call_tmp[651232] "expr temp" "maybe param" "maybe type" "temp"
    (651235 'move' call_tmp[651232](119319 call _cond_test call_tmp[651227]))
    if call_tmp[651232]
    {
      unknown call_tmp[651239] "expr temp" "maybe param" "maybe type" "temp"
      (651242 'move' call_tmp[651239](119275 call pid _mt[243] value[119246]))
      unknown call_tmp[651244] "expr temp" "maybe param" "maybe type" "temp"
      (651247 'move' call_tmp[651244](119279 call == call_tmp[651239] nullPid[113724]))
      unknown call_tmp[651249] "expr temp" "maybe param" "maybe type" "temp"
      (651252 'move' call_tmp[651249](119305 call _cond_test call_tmp[651244]))
      if call_tmp[651249]
      {
        unknown call_tmp[651254] "maybe param" "maybe type" "temp"
        (651257 'move' call_tmp[651254](119288 call _newPrivatizedClass value[119246]))
        unknown tmp[461410] "temp"
        (461413 'init var' tmp[461410] call_tmp[651254] int(64)[13])
        (461415 'init field' this[125924] c"_pid" tmp[461410])
        (479544 'end of statement')
      }
      {
        unknown call_tmp[651261] "maybe param" "maybe type" "temp"
        (651264 'move' call_tmp[651261](119298 call pid _mt[243] value[119246]))
        unknown tmp[461419] "temp"
        (461422 'init var' tmp[461419] call_tmp[651261] int(64)[13])
        (461424 'init field' this[125924] c"_pid" tmp[461419])
        (479545 'end of statement')
      }
    }
    {
      unknown tmp[461428] "temp"
      (461431 'init var' tmp[461428] nullPid[113724] int(64)[13])
      (461433 'init field' this[125924] c"_pid" tmp[461428])
      (479546 'end of statement')
    }
    unknown tmp[461437] "temp"
    (461439 'init var' tmp[461437] value[119246])
    (461441 'init field' this[125924] c"_instance" tmp[461437])
    (479547 'end of statement')
    val tmp[461446]:bool[10] "temp"
    (461449 'default init var' tmp[461446] bool[10])
    (461451 '.=' this[125924] c"_unowned" tmp[461446])
    (479548 'end of statement')
    (516594 return _void[55])
  }
  function _domain[125914](?).init[119339](arg _mt[125930]:_MT[238], ref arg this[125928]:_domain[125914](?), arg d[119336]:_distribution[118979](?), param arg rank[119342]:int(64)[13], arg idxType[119346]:_any[178](?) =
  int(64)[13], param arg stridable[119351]:bool[10] =
  0) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651270] "expr temp" "maybe param" "maybe type" "temp"
    (651273 'move' call_tmp[651270](119367 call(119360 call (partial) newRectangularDom _mt[243] d[119336]) rank[119342] idxType[119346] stridable[119351]))
    (119369 call(119356 call (partial) init _mt[243] this[125928]) call_tmp[651270])
    (516596 return _void[55])
  }
  function _domain[125914](?).init[119380](arg _mt[125934]:_MT[238], ref arg this[125932]:_domain[125914](?), arg d[119377]:_distribution[118979](?), param arg rank[119383]:int(64)[13], arg idxType[119387]:_any[178](?) =
  int(64)[13], param arg stridable[119392]:bool[10] =
  0, arg ranges[119408] :
  unknown call_tmp[651275] "expr temp" "maybe param" "maybe type" "temp") : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651284] "expr temp" "maybe param" "maybe type" "temp"
    (651287 'move' call_tmp[651284](119424 call(119416 call (partial) newRectangularDom _mt[243] d[119377]) rank[119383] idxType[119387] stridable[119392] ranges[119408]))
    (119426 call(119412 call (partial) init _mt[243] this[125932]) call_tmp[651284])
    (516598 return _void[55])
  }
  function _domain[125914](?).init[119437](arg _mt[125938]:_MT[238], ref arg this[125936]:_domain[125914](?), arg d[119434]:_distribution[118979](?), arg idxType[119439]:_any[178](?), param arg parSafe[119443]:bool[10] =
  1) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651293] "expr temp" "maybe param" "maybe type" "temp"
    (651296 'move' call_tmp[651293](119460 call(119454 call (partial) newAssociativeDom _mt[243] d[119434]) idxType[119439] parSafe[119443]))
    (119462 call(119448 call (partial) init _mt[243] this[125936]) call_tmp[651293])
    (516600 return _void[55])
  }
  function _domain[125914](?).init[119473](arg _mt[125942]:_MT[238], ref arg this[125940]:_domain[125914](?), arg d[119470]:_distribution[118979](?), arg dom[119476]:_domain[125914](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651304] "expr temp" "maybe param" "maybe type" "temp"
    (651307 'move' call_tmp[651304](119490 call rank _mt[243] dom[119476]))
    unknown call_tmp[651311] "expr temp" "maybe param" "maybe type" "temp"
    (651314 'move' call_tmp[651311](119495 call _value _mt[243] dom[119476]))
    unknown call_tmp[651318] "expr temp" "maybe param" "maybe type" "temp"
    (651321 'move' call_tmp[651318](119498 call idxType _mt[243] call_tmp[651311]))
    unknown call_tmp[651323] "expr temp" "maybe param" "maybe type" "temp"
    (651326 'move' call_tmp[651323](119502 call(119486 call (partial) newSparseDom _mt[243] d[119470]) call_tmp[651304] call_tmp[651318] dom[119476]))
    (119504 call(119480 call (partial) init _mt[243] this[125940]) call_tmp[651323])
    (516602 return _void[55])
  }
  function _domain[125914](?).init=[119515](arg _mt[125946]:_MT[238], ref arg this[125944]:_domain[125914](?), const  ref arg other[119512]:_domain[125914](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651332] "expr temp" "maybe param" "maybe type" "temp"
    (651335 'move' call_tmp[651332](119526 call dist _mt[243] other[119512]))
    unknown call_tmp[651339] "expr temp" "maybe param" "maybe type" "temp"
    (651342 'move' call_tmp[651339](119531 call rank _mt[243] other[119512]))
    unknown call_tmp[651346] "expr temp" "maybe param" "maybe type" "temp"
    (651349 'move' call_tmp[651346](119535 call idxType _mt[243] other[119512]))
    unknown call_tmp[651353] "expr temp" "maybe param" "maybe type" "temp"
    (651356 'move' call_tmp[651353](119539 call stridable _mt[243] other[119512]))
    unknown call_tmp[651360] "expr temp" "maybe param" "maybe type" "temp"
    (651363 'move' call_tmp[651360](119547 call(119543 call (partial) dims _mt[243] other[119512])))
    (119548 call(119522 call (partial) init _mt[243] this[125944]) call_tmp[651332] call_tmp[651339] call_tmp[651346] call_tmp[651353] call_tmp[651360])
    (516604 return _void[55])
  }
  where {
    (119520 call isRectangularDom other[119512])
  }
  function _domain[125914](?).init=[119560](arg _mt[125950]:_MT[238], ref arg this[125948]:_domain[125914](?), const  ref arg other[119557]:_domain[125914](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[651365] "expr temp" "maybe param" "maybe type" "temp"
    (651368 'move' call_tmp[651365](119565 call isAssociativeDom other[119557]))
    unknown call_tmp[651370] "expr temp" "maybe param" "maybe type" "temp"
    (651373 'move' call_tmp[651370](119652 call _cond_test call_tmp[651365]))
    if call_tmp[651370]
    {
      unknown call_tmp[651379] "expr temp" "maybe param" "maybe type" "temp"
      (651382 'move' call_tmp[651379](119571 call dist _mt[243] other[119557]))
      unknown call_tmp[651386] "expr temp" "maybe param" "maybe type" "temp"
      (651389 'move' call_tmp[651386](119576 call idxType _mt[243] other[119557]))
      unknown call_tmp[651393] "expr temp" "maybe param" "maybe type" "temp"
      (651396 'move' call_tmp[651393](119580 call parSafe _mt[243] other[119557]))
      (119583 call(119567 call (partial) init _mt[243] this[125948]) call_tmp[651379] call_tmp[651386] call_tmp[651393])
    }
    {
      unknown call_tmp[651398] "expr temp" "maybe param" "maybe type" "temp"
      (651401 'move' call_tmp[651398](119589 call isSparseDom other[119557]))
      unknown call_tmp[651403] "expr temp" "maybe param" "maybe type" "temp"
      (651406 'move' call_tmp[651403](119648 call _cond_test call_tmp[651398]))
      if call_tmp[651403]
      {
        unknown call_tmp[651412] "expr temp" "maybe param" "maybe type" "temp"
        (651415 'move' call_tmp[651412](119595 call dist _mt[243] other[119557]))
        unknown call_tmp[651419] "expr temp" "maybe param" "maybe type" "temp"
        (651422 'move' call_tmp[651419](119600 call parentDom _mt[243] other[119557]))
        (119603 call(119591 call (partial) init _mt[243] this[125948]) call_tmp[651412] call_tmp[651419])
      }
      {
        unknown call_tmp[651424] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651427 'move' call_tmp[651424](119626 'typeof' this[125948]))
        unknown call_tmp[651429] "expr temp" "maybe param" "maybe type" "temp"
        (651432 'move' call_tmp[651429](119628 call _cast string[26] call_tmp[651424]))
        unknown call_tmp[651434] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (651437 'move' call_tmp[651434](119632 'typeof' other[119557]))
        unknown call_tmp[651439] "expr temp" "maybe param" "maybe type" "temp"
        (651442 'move' call_tmp[651439](119634 call _cast string[26] call_tmp[651434]))
        (119637 call compilerError "Cannot initialize '" call_tmp[651429] "' from '" call_tmp[651439] "'")
        (479556 'end of statement')
        (119646 call(119641 call (partial) init _mt[243] this[125948]) nil[44])
      }
    }
    unknown call_tmp[651448] "expr temp" "maybe param" "maybe type" "temp"
    (651451 'move' call_tmp[651448](359310 call _instance _mt[243] this[125948]))
    (119668 call(119661 call (partial) dsiAssignDomain _mt[243] call_tmp[651448]) other[119557](lhsPrivate = 1))
    (516606 return _void[55])
  }
  function _domain[125914](?)._value[119674](arg _mt[125954]:_MT[238], arg this[125952]:_domain[125914](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown ret[516610] "RVV" "temp"
    unknown call_tmp[651457] "expr temp" "maybe param" "maybe type" "temp"
    (651460 'move' call_tmp[651457](382710 call _instance _mt[243] this[125952]))
    unknown call_tmp[651462] "expr temp" "maybe param" "maybe type" "temp"
    (651465 'move' call_tmp[651462](119679 call _isPrivatized call_tmp[651457]))
    unknown call_tmp[651467] "expr temp" "maybe param" "maybe type" "temp"
    (651470 'move' call_tmp[651467](119693 call _cond_test call_tmp[651462]))
    if call_tmp[651467]
    {
      { scopeless type
        unknown call_type_tmp[492197] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[651474] "expr temp" "maybe param" "maybe type" "temp"
        (651477 'move' call_tmp[651474](382715 call _instance _mt[243] this[125952]))
        (492201 'move' call_type_tmp[492197](119682 'typeof' call_tmp[651474]))
      }
      unknown call_tmp[651481] "expr temp" "maybe param" "maybe type" "temp"
      (651484 'move' call_tmp[651481](382720 call _pid _mt[243] this[125952]))
      unknown call_tmp[651486] "expr temp" "maybe param" "maybe type" "temp"
      (651489 'move' call_tmp[651486](119685 call chpl_getPrivatizedCopy call_type_tmp[492197] call_tmp[651481]))
      (516615 'move' ret[516610](516614 'deref' call_tmp[651486]))
      gotoReturn _end__value[516608] _end__value[516608]
    }
    {
      unknown call_tmp[651493] "expr temp" "maybe param" "maybe type" "temp"
      (651496 'move' call_tmp[651493](382725 call _instance _mt[243] this[125952]))
      (516620 'move' ret[516610](516619 'deref' call_tmp[651493]))
      gotoReturn _end__value[516608] _end__value[516608]
    }
    label _end__value[516608]
    (516612 return ret[516610])
  }
  function _domain[125914](?).chpl_forwarding_expr5__value[119703](arg _mt[125958]:_MT[238], arg this[125956]:_domain[125914](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[516626] "RVV" "temp"
    (516630 'move' ret[516626](382729 call _value _mt[243] this[125956]))
    (516628 return ret[516626])
  }
  function _domain[125914](?).chpl__serialize[119711](arg _mt[125962]:_MT[238], arg this[125960]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516634] "RVV" "temp"
    unknown call_tmp[651502] "expr temp" "maybe param" "maybe type" "temp"
    (651505 'move' call_tmp[651502](119723 call _value _mt[243] this[125960]))
    unknown call_tmp[651509] "expr temp" "maybe param" "maybe type" "temp"
    (651512 'move' call_tmp[651509](119732 call(119728 call (partial) chpl__serialize _mt[243] call_tmp[651502])))
    (516639 'move' ret[516634](516638 'deref' call_tmp[651509]))
    (516636 return ret[516634])
  }
  where {
    unknown call_tmp[651516] "expr temp" "maybe param" "maybe type" "temp"
    (651519 'move' call_tmp[651516](119714 call _value _mt[243] this[125960]))
    (119721 call(119717 call (partial) isDefaultRectangular _mt[243] call_tmp[651516]))
  }
  function _domain[125914](?).chpl__deserialize[119743](arg _mt[125966]:_MT[238], arg this[125964]:_domain[125914](?), arg data[119741]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516643] "RVV" "temp"
    unknown valueType[119750] "dead at end of block" "insert auto destroy" "type variable"(119749 'static field type' this[125964] "_instance")
    (542889 'move' valueType[119750](542886 'static field type' this[125964] "_instance"))
    (479562 'end of statement')
    unknown call_tmp[651523] "expr temp" "maybe param" "maybe type" "temp"
    (651526 'move' call_tmp[651523](119759 call _to_borrowed valueType[119750]))
    unknown call_tmp[651530] "expr temp" "maybe param" "maybe type" "temp"
    (651533 'move' call_tmp[651530](119767 call(119762 call (partial) chpl__deserialize _mt[243] call_tmp[651523]) data[119741]))
    unknown call_tmp[651535] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (651538 'move' call_tmp[651535](747909 'new' _domain[125914](?) call_tmp[651530]))
    (516648 'move' ret[516643](516647 'deref' call_tmp[651535]))
    gotoReturn _end_chpl__deserialize[516641] _end_chpl__deserialize[516641]
    (479563 'end of statement' valueType[119750])
    label _end_chpl__deserialize[516641]
    (516645 return ret[516643])
  }
  function _domain[125914](?)._do_destroy[119776](arg _mt[125970]:_MT[238], arg this[125968]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[651542] "expr temp" "maybe param" "maybe type" "temp"
    (651545 'move' call_tmp[651542](382738 call _unowned _mt[243] this[125968]))
    unknown call_tmp[651547] "expr temp" "maybe param" "maybe type" "temp"
    (651550 'move' call_tmp[651547](119779 call ! call_tmp[651542]))
    unknown call_tmp[651552] "expr temp" "maybe param" "maybe type" "temp"
    (651555 'move' call_tmp[651552](119895 call _cond_test call_tmp[651547]))
    if call_tmp[651552]
    {
      {
        const tmp[119885] "const" "temp"
        unknown call_tmp[651559] "expr temp" "maybe param" "maybe type" "temp"
        (651562 'move' call_tmp[651559](382743 call _instance _mt[243] this[125968]))
        unknown call_tmp[651564] "expr temp" "maybe param" "maybe type" "temp"
        (651567 'move' call_tmp[651564](119882 '_wide_get_locale' call_tmp[651559]))
        (119886 'move' tmp[119885](119883 'deref' call_tmp[651564]))
        {
          unknown call_tmp[651571] "maybe param" "maybe type" "temp"
          (651574 'move' call_tmp[651571](382748 call _instance _mt[243] this[125968]))
          const inst[119783] "dead at end of block" "const" "insert auto destroy"
          (542891 'init var' inst[119783] call_tmp[651571])
          (119786 'end of statement')
          unknown call_tmp[651578] "maybe param" "maybe type" "temp"
          (651581 'move' call_tmp[651578](119798 call(119794 call (partial) remove _mt[243] inst[119783])))
          unknown tmp[119799] "dead at end of block" "insert auto destroy" "temp"
          (542893 'init var' tmp[119799] call_tmp[651578])
          (119806 call _check_tuple_var_decl tmp[119799] 2)
          (479565 'end of statement')
          unknown call_tmp[651583] "maybe param" "maybe type" "temp"
          (651586 'move' call_tmp[651583](119800 call tmp[119799] 0))
          unknown domToFree[119788] "dead at end of block" "insert auto destroy"
          (542895 'init var' domToFree[119788] call_tmp[651583])
          unknown call_tmp[651588] "maybe param" "maybe type" "temp"
          (651591 'move' call_tmp[651588](119803 call tmp[119799] 1))
          unknown distToRemove[119790] "dead at end of block" "insert auto destroy"
          (542897 'init var' distToRemove[119790] call_tmp[651588])
          (119811 'end of statement')
          unknown distToFree[119816] "dead at end of block" "insert auto destroy"
          (542899 'init var' distToFree[119816] nil[44] unmanaged BaseDist?[415517])
          (119819 'end of statement')
          unknown call_tmp[651593] "expr temp" "maybe param" "maybe type" "temp"
          (651596 'move' call_tmp[651593](119822 call != distToRemove[119790] nil[44]))
          unknown call_tmp[651598] "expr temp" "maybe param" "maybe type" "temp"
          (651601 'move' call_tmp[651598](119837 call _cond_test call_tmp[651593]))
          if call_tmp[651598]
          {
            unknown call_tmp[651603] "expr temp" "maybe param" "maybe type" "temp"
            (651606 'move' call_tmp[651603](119826 call postfix! distToRemove[119790]))
            unknown call_tmp[651610] "expr temp" "maybe param" "maybe type" "temp"
            (651613 'move' call_tmp[651610](119832 call(119828 call (partial) remove _mt[243] call_tmp[651603])))
            (119833 call = distToFree[119816] call_tmp[651610])
            (479566 'end of statement' distToFree[119816] distToRemove[119790])
          }
          unknown call_tmp[651615] "expr temp" "maybe param" "maybe type" "temp"
          (651618 'move' call_tmp[651615](119843 call != domToFree[119788] nil[44]))
          unknown call_tmp[651620] "expr temp" "maybe param" "maybe type" "temp"
          (651623 'move' call_tmp[651620](119854 call _cond_test call_tmp[651615]))
          if call_tmp[651620]
          {
            unknown call_tmp[651625] "expr temp" "maybe param" "maybe type" "temp"
            (651628 'move' call_tmp[651625](119851 call _isPrivatized inst[119783]))
            (119852 call _delete_dom inst[119783] call_tmp[651625])
            (479569 'end of statement' inst[119783] inst[119783])
          }
          unknown call_tmp[651630] "expr temp" "maybe param" "maybe type" "temp"
          (651633 'move' call_tmp[651630](119861 call != distToFree[119816] nil[44]))
          unknown call_tmp[651635] "expr temp" "maybe param" "maybe type" "temp"
          (651638 'move' call_tmp[651635](119877 call _cond_test call_tmp[651630]))
          if call_tmp[651635]
          {
            unknown call_tmp[651640] "expr temp" "maybe param" "maybe type" "temp"
            (651643 'move' call_tmp[651640](119865 call postfix! distToFree[119816]))
            unknown call_tmp[651647] "expr temp" "maybe param" "maybe type" "temp"
            (651650 'move' call_tmp[651647](119870 call dist _mt[243] inst[119783]))
            unknown call_tmp[651652] "expr temp" "maybe param" "maybe type" "temp"
            (651655 'move' call_tmp[651652](119874 call _isPrivatized call_tmp[651647]))
            (119875 call _delete_dist call_tmp[651640] call_tmp[651652])
            (479572 'end of statement' distToFree[119816] inst[119783])
          }
        }
        (119889 'elided on block' 0 tmp[119885])
      }
    }
    {
    }
    (516652 return _void[55])
  }
  function _domain[125914](?).deinit[119904](arg _mt[125974]:_MT[238], arg this[125972]:_domain[125914](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (119908 call(382761 call (partial) _do_destroy _mt[243] this[125972]))
    (516654 return _void[55])
  }
  function _domain[125914](?).dist[119915](arg _mt[125978]:_MT[238], arg this[125976]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[516658] "RVV" "temp"
    unknown call_tmp[651661] "expr temp" "maybe param" "maybe type" "temp"
    (651664 'move' call_tmp[651661](359318 call _value _mt[243] this[125976]))
    unknown call_tmp[651668] "expr temp" "maybe param" "maybe type" "temp"
    (651671 'move' call_tmp[651668](119919 call dist _mt[243] call_tmp[651661]))
    unknown call_tmp[651673] "expr temp" "maybe param" "maybe type" "temp"
    (651676 'move' call_tmp[651673](119923 call _getDistribution call_tmp[651668]))
    (516663 'move' ret[516658](516662 'deref' call_tmp[651673]))
    (516660 return ret[516658])
  }
  function _domain[125914](?).rank[119931](arg _mt[125982]:_MT[238], arg this[125980]:_domain[125914](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516667] "RVV" "param" "temp"
    unknown tmp[424501] "maybe param" "temp"
    (424512 'move' tmp[424501](119936 call isRectangularDom this[125980]))
    unknown call_tmp[651678] "expr temp" "maybe param" "maybe type" "temp"
    (651681 'move' call_tmp[651678](424514 call _cond_invalid tmp[424501]))
    if call_tmp[651678]
    {
      (424517 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[564939] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564940] "maybe param" "temp"
    unknown call_tmp[651683] "expr temp" "maybe param" "maybe type" "temp"
    (651686 'move' call_tmp[651683](424502 call isTrue tmp[424501]))
    (564945 'move' tmp[564940](564943 call _cond_test call_tmp[651683]))
    if tmp[564940]
    {
      (564950 'move' tmp[564939](564947 '_paramFoldLogical' tmp[564940] 1))
    }
    {
      unknown tmp[564952] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651688] "expr temp" "maybe param" "maybe type" "temp"
      (651691 'move' call_tmp[651688](119940 call isSparseDom this[125980]))
      (564954 'move' tmp[564952](424506 call isTrue call_tmp[651688]))
      (564959 'move' tmp[564939](564956 '_paramFoldLogical' tmp[564940] tmp[564952]))
    }
    unknown call_tmp[651693] "expr temp" "maybe param" "maybe type" "temp"
    (651696 'move' call_tmp[651693](119952 call _cond_test tmp[564939]))
    if call_tmp[651693]
    {
      unknown call_tmp[651700] "expr temp" "maybe param" "maybe type" "temp"
      (651703 'move' call_tmp[651700](359322 call _value _mt[243] this[125980]))
      unknown call_tmp[651707] "expr temp" "maybe param" "maybe type" "temp"
      (651710 'move' call_tmp[651707](119944 call rank _mt[243] call_tmp[651700]))
      (516672 'move' ret[516667](516671 'deref' call_tmp[651707]))
      gotoReturn _end_rank[516665] _end_rank[516665]
    }
    {
      (516677 'move' ret[516667](516676 'deref' 1))
      gotoReturn _end_rank[516665] _end_rank[516665]
    }
    label _end_rank[516665]
    (516669 return ret[516667])
  }
  function _domain[125914](?).idxType[119963](arg _mt[125986]:_MT[238], arg this[125984]:_domain[125914](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516683] "RVV" "temp" "type variable"
    unknown call_tmp[651714] "expr temp" "maybe param" "maybe type" "temp"
    (651717 'move' call_tmp[651714](359326 call _value _mt[243] this[125984]))
    unknown call_tmp[651721] "expr temp" "maybe param" "maybe type" "temp"
    (651724 'move' call_tmp[651721](119966 call idxType _mt[243] call_tmp[651714]))
    (516688 'move' ret[516683](516687 'deref' call_tmp[651721]))
    (516685 return ret[516683])
  }
  function _domain[125914](?).intIdxType[119976](arg _mt[125990]:_MT[238], arg this[125988]:_domain[125914](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516692] "RVV" "temp" "type variable"
    unknown call_tmp[651728] "expr temp" "maybe param" "maybe type" "temp"
    (651731 'move' call_tmp[651728](359330 call _value _mt[243] this[125988]))
    unknown call_tmp[651735] "expr temp" "maybe param" "maybe type" "temp"
    (651738 'move' call_tmp[651735](119980 call idxType _mt[243] call_tmp[651728]))
    unknown call_tmp[651740] "expr temp" "maybe param" "maybe type" "temp"
    (651743 'move' call_tmp[651740](119984 call chpl__idxTypeToIntIdxType call_tmp[651735]))
    (516697 'move' ret[516692](516696 'deref' call_tmp[651740]))
    (516694 return ret[516692])
  }
  function _domain[125914](?).stridable[119992](arg _mt[125994]:_MT[238], arg this[125992]:_domain[125914](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516701] "RVV" "param" "temp"
    unknown call_tmp[651747] "expr temp" "maybe param" "maybe type" "temp"
    (651750 'move' call_tmp[651747](359334 call _value _mt[243] this[125992]))
    unknown call_tmp[651754] "expr temp" "maybe param" "maybe type" "temp"
    (651757 'move' call_tmp[651754](119999 call stridable _mt[243] call_tmp[651747]))
    (516706 'move' ret[516701](516705 'deref' call_tmp[651754]))
    (516703 return ret[516701])
  }
  where {
    (119997 call isRectangularDom this[125992])
  }
  function _domain[125914](?).stridable[120010](arg _mt[125998]:_MT[238], arg this[125996]:_domain[125914](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516710] "RVV" "param" "temp"
    unknown call_tmp[651761] "expr temp" "maybe param" "maybe type" "temp"
    (651764 'move' call_tmp[651761](359338 call _value _mt[243] this[125996]))
    unknown call_tmp[651768] "expr temp" "maybe param" "maybe type" "temp"
    (651771 'move' call_tmp[651768](120017 call parentDom _mt[243] call_tmp[651761]))
    unknown call_tmp[651775] "expr temp" "maybe param" "maybe type" "temp"
    (651778 'move' call_tmp[651775](120020 call stridable _mt[243] call_tmp[651768]))
    (516715 'move' ret[516710](516714 'deref' call_tmp[651775]))
    (516712 return ret[516710])
  }
  where {
    (120015 call isSparseDom this[125996])
  }
  function _domain[125914](?).stridable[120031](arg _mt[126002]:_MT[238], arg this[126000]:_domain[125914](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (120056 call compilerError "associative domains do not support .stridable")
    (516717 return _void[55])
  }
  where {
    (120036 call isAssociativeDom this[126000])
  }
  function _domain[125914](?).these[120064](arg _mt[126006]:_MT[238], arg this[126004]:_domain[125914](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[516721] "RVV" "temp"
    {
      unknown _indexOfInterest[120077] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120078] "expr temp" "temp"
      unknown call_tmp[651782] "expr temp" "maybe param" "maybe type" "temp"
      (651785 'move' call_tmp[651782](359342 call _value _mt[243] this[126004]))
      unknown call_tmp[651789] "expr temp" "maybe param" "maybe type" "temp"
      (651792 'move' call_tmp[651789](120072 call(120068 call (partial) these _mt[243] call_tmp[651782])))
      (120087 'move' _iterator[120078](120085 call _getIterator call_tmp[651789]))
      Defer
      {
        {
          (120104 call _freeIterator _iterator[120078])
        }
      }
      { scopeless type
        (120093 'move' _indexOfInterest[120077](120090 call iteratorIndex _iterator[120078]))
      }
      ForLoop[120079]
      {
        unknown i[120097] "index var" "insert auto destroy"
        (479586 'end of statement')
        (120099 'move' i[120097] _indexOfInterest[120077])
        (479587 'end of statement' i[120097])
        {
          unknown yret[516725] "YVV" "temp"
          (516728 'move' yret[516725](516727 'deref' i[120097]))
          (516730 yield yret[516725])
          (479589 'end of statement' i[120097])
        }
        label _continueLabel[120082]
        _indexOfInterest[120077]
        _iterator[120078]
      }
      label _breakLabel[120083]
    }
    (516723 return ret[516721])
  }
  function _domain[125914](?).these[120120](arg _mt[126010]:_MT[238], arg this[126008]:_domain[125914](?), param arg tag[120117]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516734] "RVV" "temp"
    {
      unknown _indexOfInterest[120179] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120180] "expr temp" "temp"
      unknown call_tmp[651796] "expr temp" "maybe param" "maybe type" "temp"
      (651799 'move' call_tmp[651796](359347 call _value _mt[243] this[126008]))
      unknown call_tmp[651803] "expr temp" "maybe param" "maybe type" "temp"
      (651806 'move' call_tmp[651803](120175 call(120170 call (partial) these _mt[243] call_tmp[651796]) tag[120117]))
      (120189 'move' _iterator[120180](120187 call _getIterator call_tmp[651803]))
      Defer
      {
        {
          (120206 call _freeIterator _iterator[120180])
        }
      }
      { scopeless type
        (120195 'move' _indexOfInterest[120179](120192 call iteratorIndex _iterator[120180]))
      }
      ForLoop[120181]
      {
        unknown i[120199] "index var" "insert auto destroy"
        (479592 'end of statement')
        (120201 'move' i[120199] _indexOfInterest[120179])
        (479593 'end of statement' i[120199])
        unknown yret[516738] "YVV" "temp"
        (516741 'move' yret[516738](516740 'deref' i[120199]))
        (516743 yield yret[516738])
        (479595 'end of statement' i[120199])
        label _continueLabel[120184]
        _indexOfInterest[120179]
        _iterator[120180]
      }
      label _breakLabel[120185]
    }
    (516736 return ret[516734])
  }
  where {
    unknown tmp[424522] "maybe param" "temp"
    (424533 'move' tmp[424522](120127 call == tag[120117] standalone[451]))
    unknown call_tmp[651808] "expr temp" "maybe param" "maybe type" "temp"
    (651811 'move' call_tmp[651808](424535 call _cond_invalid tmp[424522]))
    if call_tmp[651808]
    {
      (424538 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[564966] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564967] "maybe param" "temp"
    unknown call_tmp[651813] "expr temp" "maybe param" "maybe type" "temp"
    (651816 'move' call_tmp[651813](424523 call isTrue tmp[424522]))
    (564972 'move' tmp[564967](564970 call _cond_test call_tmp[651813]))
    if tmp[564967]
    {
      unknown tmp[564974] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651820] "expr temp" "maybe param" "maybe type" "temp"
      (651823 'move' call_tmp[651820](382773 call _value _mt[243] this[126008]))
      unknown call_tmp[651825] "expr temp" "maybe param" "maybe type" "temp"
      (651828 'move' call_tmp[651825](120165 'method call resolves' call_tmp[651820] "these"(tag = tag[120117])))
      (564976 'move' tmp[564974](424526 call isTrue call_tmp[651825]))
      (564981 'move' tmp[564966](564978 '_paramFoldLogical' tmp[564967] tmp[564974]))
    }
    {
      (564986 'move' tmp[564966](564983 '_paramFoldLogical' tmp[564967] 0))
    }
    (748299 call chpl_statementLevelSymbol tmp[564966])
  }
  function _domain[125914](?).these[120223](arg _mt[126014]:_MT[238], arg this[126012]:_domain[125914](?), param arg tag[120220]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516747] "RVV" "temp"
    {
      unknown _indexOfInterest[120243] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120244] "expr temp" "temp"
      unknown call_tmp[651832] "expr temp" "maybe param" "maybe type" "temp"
      (651835 'move' call_tmp[651832](359352 call _value _mt[243] this[126012]))
      unknown call_tmp[651839] "expr temp" "maybe param" "maybe type" "temp"
      (651842 'move' call_tmp[651839](120239 call(120234 call (partial) these _mt[243] call_tmp[651832]) tag[120220]))
      (120253 'move' _iterator[120244](120251 call _getIterator call_tmp[651839]))
      Defer
      {
        {
          (120270 call _freeIterator _iterator[120244])
        }
      }
      { scopeless type
        (120259 'move' _indexOfInterest[120243](120256 call iteratorIndex _iterator[120244]))
      }
      ForLoop[120245]
      {
        unknown followThis[120263] "index var" "insert auto destroy"
        (479598 'end of statement')
        (120265 'move' followThis[120263] _indexOfInterest[120243])
        (479599 'end of statement' followThis[120263])
        unknown yret[516751] "YVV" "temp"
        (516754 'move' yret[516751](516753 'deref' followThis[120263]))
        (516756 yield yret[516751])
        (479601 'end of statement' followThis[120263])
        label _continueLabel[120248]
        _indexOfInterest[120243]
        _iterator[120244]
      }
      label _breakLabel[120249]
    }
    (516749 return ret[516747])
  }
  where {
    (120230 call == tag[120220] leader[447])
  }
  function _domain[125914](?).these[120287](arg _mt[126018]:_MT[238], arg this[126016]:_domain[125914](?), param arg tag[120284]:iterKind[453], arg followThis[120289]:_any[178](?), param arg fast[120293]:bool[10] =
  0) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516760] "RVV" "temp"
    unknown call_tmp[651846] "expr temp" "maybe param" "maybe type" "temp"
    (651849 'move' call_tmp[651846](382786 call _value _mt[243] this[126016]))
    unknown call_tmp[651851] "expr temp" "maybe param" "maybe type" "temp"
    (651854 'move' call_tmp[651851](120313 'method call resolves' call_tmp[651846] "these"(tag = tag[120284]) followThis[120289](fast = fast[120293])))
    unknown call_tmp[651856] "expr temp" "maybe param" "maybe type" "temp"
    (651859 'move' call_tmp[651856](120411 call _cond_test call_tmp[651851]))
    if call_tmp[651856]
    {
      {
        unknown _indexOfInterest[120329] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120330] "expr temp" "temp"
        unknown call_tmp[651863] "expr temp" "maybe param" "maybe type" "temp"
        (651866 'move' call_tmp[651863](359357 call _value _mt[243] this[126016]))
        unknown call_tmp[651870] "expr temp" "maybe param" "maybe type" "temp"
        (651873 'move' call_tmp[651870](120325 call(120316 call (partial) these _mt[243] call_tmp[651863])(tag = tag[120284]) followThis[120289](fast = fast[120293])))
        (120339 'move' _iterator[120330](120337 call _getIterator call_tmp[651870]))
        Defer
        {
          {
            (120356 call _freeIterator _iterator[120330])
          }
        }
        { scopeless type
          (120345 'move' _indexOfInterest[120329](120342 call iteratorIndex _iterator[120330]))
        }
        ForLoop[120331]
        {
          unknown i[120349] "index var" "insert auto destroy"
          (479604 'end of statement')
          (120351 'move' i[120349] _indexOfInterest[120329])
          (479605 'end of statement' i[120349])
          unknown yret[516764] "YVV" "temp"
          (516767 'move' yret[516764](516766 'deref' i[120349]))
          (516769 yield yret[516764])
          (479607 'end of statement' i[120349])
          label _continueLabel[120334]
          _indexOfInterest[120329]
          _iterator[120330]
        }
        label _breakLabel[120335]
      }
    }
    {
      {
        unknown _indexOfInterest[120376] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120377] "expr temp" "temp"
        unknown call_tmp[651877] "expr temp" "maybe param" "maybe type" "temp"
        (651880 'move' call_tmp[651877](359361 call _value _mt[243] this[126016]))
        unknown call_tmp[651884] "expr temp" "maybe param" "maybe type" "temp"
        (651887 'move' call_tmp[651884](120372 call(120366 call (partial) these _mt[243] call_tmp[651877]) tag[120284] followThis[120289]))
        (120386 'move' _iterator[120377](120384 call _getIterator call_tmp[651884]))
        Defer
        {
          {
            (120403 call _freeIterator _iterator[120377])
          }
        }
        { scopeless type
          (120392 'move' _indexOfInterest[120376](120389 call iteratorIndex _iterator[120377]))
        }
        ForLoop[120378]
        {
          unknown i[120396] "index var" "insert auto destroy"
          (479610 'end of statement')
          (120398 'move' i[120396] _indexOfInterest[120376])
          (479611 'end of statement' i[120396])
          unknown yret[516771] "YVV" "temp"
          (516774 'move' yret[516771](516773 'deref' i[120396]))
          (516776 yield yret[516771])
          (479613 'end of statement' i[120396])
          label _continueLabel[120381]
          _indexOfInterest[120376]
          _iterator[120377]
        }
        label _breakLabel[120382]
      }
    }
    (516762 return ret[516760])
  }
  where {
    (120302 call == tag[120284] follower[449])
  }
  function _domain[125914](?).this[120425](arg _mt[126022]:_MT[238], arg this[126020]:_domain[125914](?), arg d[120422]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516780] "RVV" "temp"
    unknown call_tmp[651891] "expr temp" "maybe param" "maybe type" "temp"
    (651894 'move' call_tmp[651891](120428 call rank _mt[243] d[120422]))
    unknown call_tmp[651898] "expr temp" "maybe param" "maybe type" "temp"
    (651901 'move' call_tmp[651898](382801 call rank _mt[243] this[126020]))
    unknown call_tmp[651903] "expr temp" "maybe param" "maybe type" "temp"
    (651906 'move' call_tmp[651903](120432 call == call_tmp[651891] call_tmp[651898]))
    unknown call_tmp[651908] "expr temp" "maybe param" "maybe type" "temp"
    (651911 'move' call_tmp[651908](120467 call _cond_test call_tmp[651903]))
    if call_tmp[651908]
    {
      unknown call_tmp[651915] "expr temp" "maybe param" "maybe type" "temp"
      (651918 'move' call_tmp[651915](120440 call(120436 call (partial) getIndices _mt[243] d[120422])))
      unknown call_tmp[651920] "expr temp" "maybe param" "maybe type" "temp"
      (651923 'move' call_tmp[651920](120443 call this[126020](120441 'expand_tuple' call_tmp[651915])))
      (516785 'move' ret[516780](516784 'deref' call_tmp[651920]))
      gotoReturn _end_this[516778] _end_this[516778]
    }
    {
      (120465 call compilerError "slicing a domain with a domain of a different rank")
    }
    label _end_this[516778]
    (516782 return ret[516780])
  }
  function _domain[125914](?).this[120482](arg _mt[126026]:_MT[238], arg this[126024]:_domain[125914](?), arg ranges[120479]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516791] "RVV" "temp"
    unknown tmp[424543] "maybe param" "temp"
    unknown call_tmp[651929] "expr temp" "maybe param" "maybe type" "temp"
    (651932 'move' call_tmp[651929](359367 call _value _mt[243] this[126024]))
    (424554 'move' tmp[424543](120489 call stridable _mt[243] call_tmp[651929]))
    unknown call_tmp[651936] "expr temp" "maybe param" "maybe type" "temp"
    (651939 'move' call_tmp[651936](424556 call _cond_invalid tmp[424543]))
    if call_tmp[651936]
    {
      (424559 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown stridable[120498] "dead at end of block" "param"
    unknown tmp[564993] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[564994] "maybe param" "temp"
    unknown call_tmp[651941] "expr temp" "maybe param" "maybe type" "temp"
    (651944 'move' call_tmp[651941](424544 call isTrue tmp[424543]))
    (564999 'move' tmp[564994](564997 call _cond_test call_tmp[651941]))
    if tmp[564994]
    {
      (565004 'move' tmp[564993](565001 '_paramFoldLogical' tmp[564994] 1))
    }
    {
      unknown tmp[565006] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[651946] "expr temp" "maybe param" "maybe type" "temp"
      (651949 'move' call_tmp[651946](120495 call chpl__anyStridable ranges[120479]))
      (565008 'move' tmp[565006](424548 call isTrue call_tmp[651946]))
      (565013 'move' tmp[564993](565010 '_paramFoldLogical' tmp[564994] tmp[565006]))
    }
    (542901 'init var' stridable[120498] tmp[564993])
    (120501 'end of statement')
    unknown r[120518] "dead at end of block" "insert auto destroy"
    unknown call_tmp[651953] "expr temp" "maybe param" "maybe type" "temp"
    (651956 'move' call_tmp[651953](382812 call rank _mt[243] this[126024]))
    unknown call_tmp[651960] "expr temp" "maybe param" "maybe type" "temp"
    (651963 'move' call_tmp[651960](359371 call _value _mt[243] this[126024]))
    unknown call_tmp[651967] "expr temp" "maybe param" "maybe type" "temp"
    (651970 'move' call_tmp[651967](120506 call idxType _mt[243] call_tmp[651960]))
    unknown call_tmp[651972] "expr temp" "maybe param" "maybe type" "temp"
    (651975 'move' call_tmp[651972](120515 call range[64316](?) call_tmp[651967] bounded[64205] stridable[120498]))
    unknown call_tmp[651977] "expr temp" "maybe param" "maybe type" "temp"
    (651980 'move' call_tmp[651977](120516 call * call_tmp[651953] call_tmp[651972]))
    (542903 'default init var' r[120518] call_tmp[651977])
    (120521 'end of statement')
    {
      unknown i[120550] "dead at end of block" "insert auto destroy"
      (542905 'init var' i[120550] 0)
      (479618 'end of statement')
      unknown tmp[120551] "maybe param" "temp"
      unknown call_tmp[651984] "expr temp" "maybe param" "maybe type" "temp"
      (651987 'move' call_tmp[651984](382818 call rank _mt[243] this[126024]))
      unknown call_tmp[651989] "expr temp" "maybe param" "maybe type" "temp"
      (651992 'move' call_tmp[651989](120525 call - call_tmp[651984] 1))
      (120563 'move' tmp[120551](120561 call chpl_compute_low_param_loop_bound 0 call_tmp[651989]))
      unknown tmp[120552] "maybe param" "temp"
      unknown call_tmp[651996] "expr temp" "maybe param" "maybe type" "temp"
      (651999 'move' call_tmp[651996](382827 call rank _mt[243] this[126024]))
      unknown call_tmp[652001] "expr temp" "maybe param" "maybe type" "temp"
      (652004 'move' call_tmp[652001](120568 call - call_tmp[651996] 1))
      (120573 'move' tmp[120552](120571 call chpl_compute_high_param_loop_bound 0 call_tmp[652001]))
      unknown tmp[120553] "maybe param" "temp"
      (120576 'move' tmp[120553] 1)
      ParamForLoop[120578]
      { i[120550] tmp[120551] tmp[120552] tmp[120553]
        {
          unknown call_tmp[652006] "expr temp" "maybe param" "maybe type" "temp"
          (652009 'move' call_tmp[652006](120532 call r[120518] i[120550]))
          unknown call_tmp[652013] "expr temp" "maybe param" "maybe type" "temp"
          (652016 'move' call_tmp[652013](359376 call _value _mt[243] this[126024]))
          unknown call_tmp[652020] "expr temp" "maybe param" "maybe type" "temp"
          (652023 'move' call_tmp[652020](120539 call(120534 call (partial) dsiDim _mt[243] call_tmp[652013]) i[120550]))
          unknown call_tmp[652025] "expr temp" "maybe param" "maybe type" "temp"
          (652028 'move' call_tmp[652025](120543 call ranges[120479] i[120550]))
          unknown call_tmp[652030] "expr temp" "maybe param" "maybe type" "temp"
          (652033 'move' call_tmp[652030](120545 call call_tmp[652020] call_tmp[652025]))
          (120546 call = call_tmp[652006] call_tmp[652030])
          (479619 'end of statement' r[120518] i[120550] i[120550] i[120550])
        }
      }
      label _unused_continueLabel[120555]
      label _breakLabel[120554]
    }
    unknown call_tmp[652037] "expr temp" "maybe param" "maybe type" "temp"
    (652040 'move' call_tmp[652037](382832 call dist _mt[243] this[126024]))
    unknown call_tmp[652044] "expr temp" "maybe param" "maybe type" "temp"
    (652047 'move' call_tmp[652044](382836 call rank _mt[243] this[126024]))
    unknown call_tmp[652051] "expr temp" "maybe param" "maybe type" "temp"
    (652054 'move' call_tmp[652051](359380 call _value _mt[243] this[126024]))
    unknown call_tmp[652058] "expr temp" "maybe param" "maybe type" "temp"
    (652061 'move' call_tmp[652058](120593 call idxType _mt[243] call_tmp[652051]))
    unknown call_tmp[652063] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652066 'move' call_tmp[652063](747910 'new' _domain[125914](?) call_tmp[652037] call_tmp[652044] call_tmp[652058] stridable[120498] r[120518]))
    (516796 'move' ret[516791](516795 'deref' call_tmp[652063]))
    gotoReturn _end_this[516789] _end_this[516789]
    (479624 'end of statement' r[120518])
    label _end_this[516789]
    (516793 return ret[516791])
  }
  where {
    (120487 call chpl__isTupleOfRanges ranges[120479])
  }
  function _domain[125914](?).this[120610](arg _mt[126030]:_MT[238], arg this[126028]:_domain[125914](?), arg args[120607]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516802] "RVV" "temp"
    unknown collapsedDim[120624] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652072] "expr temp" "maybe param" "maybe type" "temp"
    (652075 'move' call_tmp[652072](382847 call rank _mt[243] this[126028]))
    unknown call_tmp[652077] "expr temp" "maybe param" "maybe type" "temp"
    (652080 'move' call_tmp[652077](120622 call * call_tmp[652072] bool[10]))
    (542907 'default init var' collapsedDim[120624] call_tmp[652077])
    (120627 'end of statement')
    unknown idx[120633] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652084] "expr temp" "maybe param" "maybe type" "temp"
    (652087 'move' call_tmp[652084](382851 call rank _mt[243] this[126028]))
    unknown call_tmp[652091] "expr temp" "maybe param" "maybe type" "temp"
    (652094 'move' call_tmp[652091](382855 call idxType _mt[243] this[126028]))
    unknown call_tmp[652096] "expr temp" "maybe param" "maybe type" "temp"
    (652099 'move' call_tmp[652096](120631 call * call_tmp[652084] call_tmp[652091]))
    (542909 'default init var' idx[120633] call_tmp[652096])
    (120636 'end of statement')
    unknown call_tmp[652101] "maybe param" "maybe type" "temp"
    (652104 'move' call_tmp[652101](120641 call chpl__countRanges(120639 'expand_tuple' args[120607])))
    unknown uprank[120642] "dead at end of block" "param"
    (542911 'init var' uprank[120642] call_tmp[652101])
    (120645 'end of statement')
    unknown tmp[424564] "maybe param" "temp"
    (424575 'move' tmp[424564](120647 call stridable _mt[243] this[126028]))
    unknown call_tmp[652108] "expr temp" "maybe param" "maybe type" "temp"
    (652111 'move' call_tmp[652108](424577 call _cond_invalid tmp[424564]))
    if call_tmp[652108]
    {
      (424580 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown upstridable[120656] "dead at end of block" "param"
    unknown tmp[565020] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565021] "maybe param" "temp"
    unknown call_tmp[652113] "expr temp" "maybe param" "maybe type" "temp"
    (652116 'move' call_tmp[652113](424565 call isTrue tmp[424564]))
    (565026 'move' tmp[565021](565024 call _cond_test call_tmp[652113]))
    if tmp[565021]
    {
      (565031 'move' tmp[565020](565028 '_paramFoldLogical' tmp[565021] 1))
    }
    {
      unknown tmp[565033] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652118] "expr temp" "maybe param" "maybe type" "temp"
      (652121 'move' call_tmp[652118](120653 call chpl__anyRankChangeStridable args[120607]))
      (565035 'move' tmp[565033](424569 call isTrue call_tmp[652118]))
      (565040 'move' tmp[565020](565037 '_paramFoldLogical' tmp[565021] tmp[565033]))
    }
    (542913 'init var' upstridable[120656] tmp[565020])
    (120659 'end of statement')
    unknown upranges[120673] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652125] "expr temp" "maybe param" "maybe type" "temp"
    (652128 'move' call_tmp[652125](359389 call _value _mt[243] this[126028]))
    unknown call_tmp[652132] "expr temp" "maybe param" "maybe type" "temp"
    (652135 'move' call_tmp[652132](120663 call idxType _mt[243] call_tmp[652125]))
    unknown call_tmp[652137] "expr temp" "maybe param" "maybe type" "temp"
    (652140 'move' call_tmp[652137](120670 call range[64316](?)(idxType = call_tmp[652132])(stridable = upstridable[120656])))
    unknown call_tmp[652142] "expr temp" "maybe param" "maybe type" "temp"
    (652145 'move' call_tmp[652142](120671 call * uprank[120642] call_tmp[652137]))
    (542915 'default init var' upranges[120673] call_tmp[652142])
    (120676 'end of statement')
    unknown updim[120678] "dead at end of block" "insert auto destroy"
    (542917 'init var' updim[120678] 0)
    (120681 'end of statement')
    {
      unknown i[120772] "dead at end of block" "insert auto destroy"
      (542919 'init var' i[120772] 0)
      (479627 'end of statement')
      unknown tmp[120773] "maybe param" "temp"
      unknown call_tmp[652149] "expr temp" "maybe param" "maybe type" "temp"
      (652152 'move' call_tmp[652149](382864 call rank _mt[243] this[126028]))
      unknown call_tmp[652154] "expr temp" "maybe param" "maybe type" "temp"
      (652157 'move' call_tmp[652154](120685 call - call_tmp[652149] 1))
      (120785 'move' tmp[120773](120783 call chpl_compute_low_param_loop_bound 0 call_tmp[652154]))
      unknown tmp[120774] "maybe param" "temp"
      unknown call_tmp[652161] "expr temp" "maybe param" "maybe type" "temp"
      (652164 'move' call_tmp[652161](382891 call rank _mt[243] this[126028]))
      unknown call_tmp[652166] "expr temp" "maybe param" "maybe type" "temp"
      (652169 'move' call_tmp[652166](120790 call - call_tmp[652161] 1))
      (120795 'move' tmp[120774](120793 call chpl_compute_high_param_loop_bound 0 call_tmp[652166]))
      unknown tmp[120775] "maybe param" "temp"
      (120798 'move' tmp[120775] 1)
      ParamForLoop[120800]
      { i[120772] tmp[120773] tmp[120774] tmp[120775]
        {
          unknown call_tmp[652171] "expr temp" "maybe param" "maybe type" "temp"
          (652174 'move' call_tmp[652171](120693 call args[120607] i[120772]))
          unknown call_tmp[652176] "expr temp" "maybe param" "maybe type" "temp"
          (652179 'move' call_tmp[652176](120695 call isRange call_tmp[652171]))
          unknown call_tmp[652181] "expr temp" "maybe param" "maybe type" "temp"
          (652184 'move' call_tmp[652181](120767 call _cond_test call_tmp[652176]))
          if call_tmp[652181]
          {
            unknown call_tmp[652186] "expr temp" "maybe param" "maybe type" "temp"
            (652189 'move' call_tmp[652186](120699 call collapsedDim[120624] i[120772]))
            (120701 call = call_tmp[652186] 0)
            (479628 'end of statement' collapsedDim[120624] i[120772])
            unknown call_tmp[652191] "expr temp" "maybe param" "maybe type" "temp"
            (652194 'move' call_tmp[652191](120708 call idx[120633] i[120772]))
            unknown call_tmp[652198] "expr temp" "maybe param" "maybe type" "temp"
            (652201 'move' call_tmp[652198](120712 call(382874 call (partial) dim _mt[243] this[126028]) i[120772]))
            unknown call_tmp[652205] "expr temp" "maybe param" "maybe type" "temp"
            (652208 'move' call_tmp[652205](120713 call alignedLow _mt[243] call_tmp[652198]))
            (120716 call = call_tmp[652191] call_tmp[652205])
            (479631 'end of statement' idx[120633] i[120772] i[120772])
            unknown call_tmp[652210] "expr temp" "maybe param" "maybe type" "temp"
            (652213 'move' call_tmp[652210](120722 call upranges[120673] updim[120678]))
            unknown call_tmp[652217] "expr temp" "maybe param" "maybe type" "temp"
            (652220 'move' call_tmp[652217](120724 call _value _mt[243] this[126028]))
            unknown call_tmp[652224] "expr temp" "maybe param" "maybe type" "temp"
            (652227 'move' call_tmp[652224](120732 call(120727 call (partial) dsiDim _mt[243] call_tmp[652217]) i[120772]))
            unknown call_tmp[652229] "expr temp" "maybe param" "maybe type" "temp"
            (652232 'move' call_tmp[652229](120736 call args[120607] i[120772]))
            unknown call_tmp[652234] "expr temp" "maybe param" "maybe type" "temp"
            (652237 'move' call_tmp[652234](120738 call call_tmp[652224] call_tmp[652229]))
            (120739 call = call_tmp[652210] call_tmp[652234])
            (479635 'end of statement' upranges[120673] updim[120678] i[120772] i[120772])
            (120744 call += updim[120678] 1)
            (479640 'end of statement' updim[120678])
          }
          {
            unknown call_tmp[652239] "expr temp" "maybe param" "maybe type" "temp"
            (652242 'move' call_tmp[652239](120750 call collapsedDim[120624] i[120772]))
            (120752 call = call_tmp[652239] 1)
            (479642 'end of statement' collapsedDim[120624] i[120772])
            unknown call_tmp[652244] "expr temp" "maybe param" "maybe type" "temp"
            (652247 'move' call_tmp[652244](120759 call idx[120633] i[120772]))
            unknown call_tmp[652249] "expr temp" "maybe param" "maybe type" "temp"
            (652252 'move' call_tmp[652249](120763 call args[120607] i[120772]))
            (120764 call = call_tmp[652244] call_tmp[652249])
            (479645 'end of statement' idx[120633] i[120772] i[120772])
          }
        }
      }
      label _unused_continueLabel[120777]
      label _breakLabel[120776]
    }
    { scopeless type
      unknown call_type_tmp[492203] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652254] "expr temp" "maybe param" "maybe type" "temp"
      (652257 'move' call_tmp[652254](120812 call upranges[120673] 0))
      (492207 'move' call_type_tmp[492203](120813 'typeof' call_tmp[652254]))
    }
    const emptyrange[120814] "dead at end of block" "const" "insert auto destroy"
    (542921 'default init var' emptyrange[120814] call_type_tmp[492203])
    (120817 'end of statement')
    unknown call_tmp[652261] "expr temp" "maybe param" "maybe type" "temp"
    (652264 'move' call_tmp[652261](120821 call(382896 call (partial) contains _mt[243] this[126028]) idx[120633]))
    unknown call_tmp[652266] "expr temp" "maybe param" "maybe type" "temp"
    (652269 'move' call_tmp[652266](120822 call ! call_tmp[652261]))
    unknown call_tmp[652271] "expr temp" "maybe param" "maybe type" "temp"
    (652274 'move' call_tmp[652271](120877 call _cond_test call_tmp[652266]))
    if call_tmp[652271]
    {
      {
        unknown d[120839] "dead at end of block" "insert auto destroy"
        (542923 'init var' d[120839] 0)
        (479650 'end of statement')
        unknown tmp[120840] "maybe param" "temp"
        unknown call_tmp[652276] "expr temp" "maybe param" "maybe type" "temp"
        (652279 'move' call_tmp[652276](120827 call - uprank[120642] 1))
        (120852 'move' tmp[120840](120850 call chpl_compute_low_param_loop_bound 0 call_tmp[652276]))
        unknown tmp[120841] "maybe param" "temp"
        unknown call_tmp[652281] "expr temp" "maybe param" "maybe type" "temp"
        (652284 'move' call_tmp[652281](120857 call - uprank[120642] 1))
        (120862 'move' tmp[120841](120860 call chpl_compute_high_param_loop_bound 0 call_tmp[652281]))
        unknown tmp[120842] "maybe param" "temp"
        (120865 'move' tmp[120842] 1)
        ParamForLoop[120867]
        { d[120839] tmp[120840] tmp[120841] tmp[120842]
          unknown call_tmp[652286] "expr temp" "maybe param" "maybe type" "temp"
          (652289 'move' call_tmp[652286](120834 call upranges[120673] d[120839]))
          (120836 call = call_tmp[652286] emptyrange[120814])
          (479651 'end of statement' upranges[120673] d[120839] emptyrange[120814])
        }
        label _unused_continueLabel[120844]
        label _breakLabel[120843]
      }
    }
    unknown call_tmp[652293] "expr temp" "maybe param" "maybe type" "temp"
    (652296 'move' call_tmp[652293](359394 call dist _mt[243] this[126028]))
    unknown call_tmp[652300] "expr temp" "maybe param" "maybe type" "temp"
    (652303 'move' call_tmp[652300](120886 call _pid _mt[243] call_tmp[652293]))
    unknown call_tmp[652307] "expr temp" "maybe param" "maybe type" "temp"
    (652310 'move' call_tmp[652307](359398 call dist _mt[243] this[126028]))
    unknown call_tmp[652314] "expr temp" "maybe param" "maybe type" "temp"
    (652317 'move' call_tmp[652314](120892 call _instance _mt[243] call_tmp[652307]))
    unknown call_tmp[652319] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652322 'move' call_tmp[652319](747911 'new' ArrayViewRankChangeDist[382906](?)(downDistPid = call_tmp[652300])(downDistInst = call_tmp[652314])(collapsedDim = collapsedDim[120624])(idx = idx[120633])(_chpl_manager = unmanaged[220](?))))
    const rcdist[120901] "dead at end of block" "const" "insert auto destroy"
    (542925 'init var' rcdist[120901] call_tmp[652319])
    (120904 'end of statement')
    unknown call_tmp[652324] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652327 'move' call_tmp[652324](747912 'new' _distribution[118979](?) rcdist[120901]))
    const rcdistRec[120910] "dead at end of block" "const" "insert auto destroy"
    (542927 'init var' rcdistRec[120910] call_tmp[652324])
    (120913 'end of statement' upranges[120673] collapsedDim[120624] idx[120633] rcdist[120901])
    unknown call_tmp[652329] "expr temp" "maybe param" "maybe type" "temp"
    (652332 'move' call_tmp[652329](120922 call upranges[120673] 0))
    unknown call_tmp[652336] "expr temp" "maybe param" "maybe type" "temp"
    (652339 'move' call_tmp[652336](120923 call idxType _mt[243] call_tmp[652329]))
    unknown call_tmp[652341] "expr temp" "maybe param" "maybe type" "temp"
    (652344 'move' call_tmp[652341](120929 call upranges[120673] 0))
    unknown call_tmp[652348] "expr temp" "maybe param" "maybe type" "temp"
    (652351 'move' call_tmp[652348](120930 call stridable _mt[243] call_tmp[652341]))
    unknown call_tmp[652353] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (652356 'move' call_tmp[652353](747913 'new' _domain[125914](?) rcdistRec[120910] uprank[120642] call_tmp[652336] call_tmp[652348] upranges[120673]))
    (516807 'move' ret[516802](516806 'deref' call_tmp[652353]))
    gotoReturn _end_this[516800] _end_this[516800]
    (479658 'end of statement' rcdistRec[120910] upranges[120673] upranges[120673] upranges[120673])
    label _end_this[516800]
    (516804 return ret[516802])
  }
  where {
    unknown call_tmp[652360] "expr temp" "maybe param" "maybe type" "temp"
    (652363 'move' call_tmp[652360](359384 call _value _mt[243] this[126028]))
    unknown call_tmp[652367] "expr temp" "maybe param" "maybe type" "temp"
    (652370 'move' call_tmp[652367](120616 call idxType _mt[243] call_tmp[652360]))
    (120619 call _validRankChangeArgs args[120607] call_tmp[652367])
  }
  function _domain[125914](?).this[120948](arg _mt[126034]:_MT[238], arg this[126032]:_domain[125914](?), arg i[120944]:integral[199](?) ...) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (120969 call compilerError "domain slice requires a range in at least one dimension")
    (516811 return _void[55])
  }
  function _domain[125914](?).this[120981](arg _mt[126038]:_MT[238], arg this[126036]:_domain[125914](?), arg args[120978]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[652376] "expr temp" "maybe param" "maybe type" "temp"
    (652379 'move' call_tmp[652376](382926 call rank _mt[243] this[126036]))
    unknown call_tmp[652381] "expr temp" "maybe param" "maybe type" "temp"
    (652384 'move' call_tmp[652381](120985 call == numArgs[120976] call_tmp[652376]))
    unknown call_tmp[652386] "expr temp" "maybe param" "maybe type" "temp"
    (652389 'move' call_tmp[652386](121032 call _cond_test call_tmp[652381]))
    if call_tmp[652386]
    {
      (121006 call compilerError "invalid argument types for domain slicing")
    }
    {
      (121030 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
    (516813 return _void[55])
  }
  function _domain[125914](?).dims[121042](arg _mt[126042]:_MT[238], arg this[126040]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516817] "RVV" "temp"
    unknown call_tmp[652393] "expr temp" "maybe param" "maybe type" "temp"
    (652396 'move' call_tmp[652393](359402 call _value _mt[243] this[126040]))
    unknown call_tmp[652400] "expr temp" "maybe param" "maybe type" "temp"
    (652403 'move' call_tmp[652400](121049 call(121045 call (partial) dsiDims _mt[243] call_tmp[652393])))
    (516822 'move' ret[516817](516821 'deref' call_tmp[652400]))
    (516819 return ret[516817])
  }
  function _domain[125914](?).dim[121061](arg _mt[126046]:_MT[238], arg this[126044]:_domain[125914](?), arg d[121058]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516826] "RVV" "temp"
    unknown call_tmp[652405] "expr temp" "maybe param" "maybe type" "temp"
    (652408 'move' call_tmp[652405](121141 call _cond_test 1))
    if call_tmp[652405]
    {
      unknown tmp[424585] "maybe param" "temp"
      (424596 'move' tmp[424585](121070 call < d[121058] 0))
      unknown call_tmp[652410] "expr temp" "maybe param" "maybe type" "temp"
      (652413 'move' call_tmp[652410](424598 call _cond_invalid tmp[424585]))
      if call_tmp[652410]
      {
        (424601 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[565047] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565048] "maybe param" "temp"
      unknown call_tmp[652415] "expr temp" "maybe param" "maybe type" "temp"
      (652418 'move' call_tmp[652415](424586 call isTrue tmp[424585]))
      (565053 'move' tmp[565048](565051 call _cond_test call_tmp[652415]))
      if tmp[565048]
      {
        (565058 'move' tmp[565047](565055 '_paramFoldLogical' tmp[565048] 1))
      }
      {
        unknown tmp[565060] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652422] "expr temp" "maybe param" "maybe type" "temp"
        (652425 'move' call_tmp[652422](382933 call rank _mt[243] this[126044]))
        unknown call_tmp[652427] "expr temp" "maybe param" "maybe type" "temp"
        (652430 'move' call_tmp[652427](121074 call >= d[121058] call_tmp[652422]))
        (565062 'move' tmp[565060](424590 call isTrue call_tmp[652427]))
        (565067 'move' tmp[565047](565064 '_paramFoldLogical' tmp[565048] tmp[565060]))
      }
      unknown call_tmp[652432] "expr temp" "maybe param" "maybe type" "temp"
      (652435 'move' call_tmp[652432](121136 call _cond_test tmp[565047]))
      if call_tmp[652432]
      {
        unknown call_tmp[652437] "expr temp" "maybe param" "maybe type" "temp"
        (652440 'move' call_tmp[652437](121101 call _cast string[26] d[121058]))
        unknown call_tmp[652442] "expr temp" "maybe param" "maybe type" "temp"
        (652445 'move' call_tmp[652442](121103 call + "dim(" call_tmp[652437]))
        unknown call_tmp[652447] "expr temp" "maybe param" "maybe type" "temp"
        (652450 'move' call_tmp[652447](121122 call + call_tmp[652442] ") is out-of-bounds; must be 0.."))
        unknown call_tmp[652454] "expr temp" "maybe param" "maybe type" "temp"
        (652457 'move' call_tmp[652454](382938 call rank _mt[243] this[126044]))
        unknown call_tmp[652459] "expr temp" "maybe param" "maybe type" "temp"
        (652462 'move' call_tmp[652459](121126 call - call_tmp[652454] 1))
        unknown call_tmp[652464] "expr temp" "maybe param" "maybe type" "temp"
        (652467 'move' call_tmp[652464](121129 call _cast string[26] call_tmp[652459]))
        unknown call_tmp[652469] "expr temp" "maybe param" "maybe type" "temp"
        (652472 'move' call_tmp[652469](121131 call + call_tmp[652447] call_tmp[652464]))
        (121134 call boundsCheckHalt module=[255] HaltWrappers[209915] call_tmp[652469])
        (359406 'referenced modules list' HaltWrappers[209915])
      }
    }
    unknown call_tmp[652476] "expr temp" "maybe param" "maybe type" "temp"
    (652479 'move' call_tmp[652476](359412 call _value _mt[243] this[126044]))
    unknown call_tmp[652483] "expr temp" "maybe param" "maybe type" "temp"
    (652486 'move' call_tmp[652483](121152 call(121147 call (partial) dsiDim _mt[243] call_tmp[652476]) d[121058]))
    (516831 'move' ret[516826](516830 'deref' call_tmp[652483]))
    (516828 return ret[516826])
    (355175 'used modules list'(121064 'use' HaltWrappers[209915]))
  }
  function _domain[125914](?).dim[121163](arg _mt[126050]:_MT[238], arg this[126048]:_domain[125914](?), param arg d[121160]:int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516835] "RVV" "temp"
    unknown tmp[424606] "maybe param" "temp"
    (424617 'move' tmp[424606](121167 call < d[121160] 0))
    unknown call_tmp[652488] "expr temp" "maybe param" "maybe type" "temp"
    (652491 'move' call_tmp[652488](424619 call _cond_invalid tmp[424606]))
    if call_tmp[652488]
    {
      (424622 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565074] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565075] "maybe param" "temp"
    unknown call_tmp[652493] "expr temp" "maybe param" "maybe type" "temp"
    (652496 'move' call_tmp[652493](424607 call isTrue tmp[424606]))
    (565080 'move' tmp[565075](565078 call _cond_test call_tmp[652493]))
    if tmp[565075]
    {
      (565085 'move' tmp[565074](565082 '_paramFoldLogical' tmp[565075] 1))
    }
    {
      unknown tmp[565087] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652500] "expr temp" "maybe param" "maybe type" "temp"
      (652503 'move' call_tmp[652500](382945 call rank _mt[243] this[126048]))
      unknown call_tmp[652505] "expr temp" "maybe param" "maybe type" "temp"
      (652508 'move' call_tmp[652505](121172 call - call_tmp[652500] 1))
      unknown call_tmp[652510] "expr temp" "maybe param" "maybe type" "temp"
      (652513 'move' call_tmp[652510](121174 call > d[121160] call_tmp[652505]))
      (565089 'move' tmp[565087](424611 call isTrue call_tmp[652510]))
      (565094 'move' tmp[565074](565091 '_paramFoldLogical' tmp[565075] tmp[565087]))
    }
    unknown call_tmp[652515] "expr temp" "maybe param" "maybe type" "temp"
    (652518 'move' call_tmp[652515](121203 call _cond_test tmp[565074]))
    if call_tmp[652515]
    {
      unknown call_tmp[652522] "expr temp" "maybe param" "maybe type" "temp"
      (652525 'move' call_tmp[652522](382949 call rank _mt[243] this[126048]))
      unknown call_tmp[652527] "expr temp" "maybe param" "maybe type" "temp"
      (652530 'move' call_tmp[652527](121199 call - call_tmp[652522] 1))
      (121201 call compilerError "dim() must take a value from 0.." call_tmp[652527])
    }
    unknown call_tmp[652534] "expr temp" "maybe param" "maybe type" "temp"
    (652537 'move' call_tmp[652534](359416 call _value _mt[243] this[126048]))
    unknown call_tmp[652541] "expr temp" "maybe param" "maybe type" "temp"
    (652544 'move' call_tmp[652541](121215 call(121210 call (partial) dsiDim _mt[243] call_tmp[652534]) d[121160]))
    (516840 'move' ret[516835](516839 'deref' call_tmp[652541]))
    (516837 return ret[516835])
  }
  function _domain[125914](?).dimIter[121224](arg _mt[126054]:_MT[238], arg this[126052]:_domain[125914](?), param arg d[121222]:_any[178](?), arg ind[121226]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[516844] "RVV" "temp"
    {
      unknown _indexOfInterest[121242] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121243] "expr temp" "temp"
      unknown call_tmp[652548] "expr temp" "maybe param" "maybe type" "temp"
      (652551 'move' call_tmp[652548](359420 call _value _mt[243] this[126052]))
      unknown call_tmp[652555] "expr temp" "maybe param" "maybe type" "temp"
      (652558 'move' call_tmp[652555](121238 call(121232 call (partial) dimIter _mt[243] call_tmp[652548]) d[121222] ind[121226]))
      (121252 'move' _iterator[121243](121250 call _getIterator call_tmp[652555]))
      Defer
      {
        {
          (121269 call _freeIterator _iterator[121243])
        }
      }
      { scopeless type
        (121258 'move' _indexOfInterest[121242](121255 call iteratorIndex _iterator[121243]))
      }
      ForLoop[121244]
      {
        unknown i[121262] "index var" "insert auto destroy"
        (479674 'end of statement')
        (121264 'move' i[121262] _indexOfInterest[121242])
        (479675 'end of statement' i[121262])
        unknown yret[516848] "YVV" "temp"
        (516851 'move' yret[516848](516850 'deref' i[121262]))
        (516853 yield yret[516848])
        (479677 'end of statement' i[121262])
        label _continueLabel[121247]
        _indexOfInterest[121242]
        _iterator[121243]
      }
      label _breakLabel[121248]
    }
    (516846 return ret[516844])
  }
  function _domain[125914](?).shape[121281](arg _mt[126058]:_MT[238], arg this[126056]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516857] "RVV" "temp"
    unknown s[121303] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652562] "expr temp" "maybe param" "maybe type" "temp"
    (652565 'move' call_tmp[652562](382959 call rank _mt[243] this[126056]))
    unknown call_tmp[652569] "expr temp" "maybe param" "maybe type" "temp"
    (652572 'move' call_tmp[652569](121297 call(382963 call (partial) dim _mt[243] this[126056]) 0))
    unknown call_tmp[652576] "expr temp" "maybe param" "maybe type" "temp"
    (652579 'move' call_tmp[652576](121298 call intIdxType _mt[243] call_tmp[652569]))
    unknown call_tmp[652581] "expr temp" "maybe param" "maybe type" "temp"
    (652584 'move' call_tmp[652581](121301 call * call_tmp[652562] call_tmp[652576]))
    (542929 'default init var' s[121303] call_tmp[652581])
    (121306 'end of statement')
    {
      unknown _indexOfInterest[121338] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121339] "expr temp" "temp"
      unknown call_tmp[652588] "expr temp" "maybe param" "maybe type" "temp"
      (652591 'move' call_tmp[652588](121362 call size _mt[243] s[121303]))
      unknown call_tmp[652593] "expr temp" "maybe param" "maybe type" "temp"
      (652596 'move' call_tmp[652593](121366 call chpl_direct_counted_range_iter 0 call_tmp[652588]))
      unknown call_tmp[652598] "expr temp" "maybe param" "maybe type" "temp"
      (652601 'move' call_tmp[652598](121356 call _getIterator call_tmp[652593]))
      unknown call_tmp[652605] "expr temp" "maybe param" "maybe type" "temp"
      (652608 'move' call_tmp[652605](121369 call(382969 call (partial) dims _mt[243] this[126056])))
      unknown call_tmp[652610] "expr temp" "maybe param" "maybe type" "temp"
      (652613 'move' call_tmp[652610](121370 call _getIterator call_tmp[652605]))
      (121373 'move' _iterator[121339](121326 call _build_tuple call_tmp[652598] call_tmp[652610]))
      Defer
      {
        {
          (121403 call _freeIterator _iterator[121339])
        }
      }
      { scopeless type
        (121378 'move' _indexOfInterest[121338](121375 call iteratorIndex _iterator[121339]))
      }
      ForLoop[121340]
      {
        (121383 call _check_tuple_var_decl _indexOfInterest[121338] 2)
        (479680 'end of statement')
        unknown i[121389] "index var" "insert auto destroy"
        (479681 'end of statement')
        (121391 'move' i[121389](121387 call _indexOfInterest[121338] 0))
        (479682 'end of statement' i[121389])
        unknown r[121396] "index var" "insert auto destroy"
        (479684 'end of statement')
        (121398 'move' r[121396](121394 call _indexOfInterest[121338] 1))
        (479685 'end of statement' r[121396])
        unknown call_tmp[652615] "expr temp" "maybe param" "maybe type" "temp"
        (652618 'move' call_tmp[652615](121330 call s[121303] i[121389]))
        unknown call_tmp[652622] "expr temp" "maybe param" "maybe type" "temp"
        (652625 'move' call_tmp[652622](121332 call size _mt[243] r[121396]))
        (121335 call = call_tmp[652615] call_tmp[652622])
        (479687 'end of statement' s[121303] i[121389] r[121396])
        label _continueLabel[121343]
        _indexOfInterest[121338]
        _iterator[121339]
      }
      label _breakLabel[121344]
    }
    (516862 'move' ret[516857](516861 'deref' s[121303]))
    gotoReturn _end_shape[516855] _end_shape[516855]
    (479691 'end of statement' s[121303])
    label _end_shape[516855]
    (516859 return ret[516857])
  }
  where {
    unknown tmp[424627] "maybe param" "temp"
    (424638 'move' tmp[424627](121286 call isRectangularDom this[126056]))
    unknown call_tmp[652627] "expr temp" "maybe param" "maybe type" "temp"
    (652630 'move' call_tmp[652627](424640 call _cond_invalid tmp[424627]))
    if call_tmp[652627]
    {
      (424643 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565101] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565102] "maybe param" "temp"
    unknown call_tmp[652632] "expr temp" "maybe param" "maybe type" "temp"
    (652635 'move' call_tmp[652632](424628 call isTrue tmp[424627]))
    (565107 'move' tmp[565102](565105 call _cond_test call_tmp[652632]))
    if tmp[565102]
    {
      (565112 'move' tmp[565101](565109 '_paramFoldLogical' tmp[565102] 1))
    }
    {
      unknown tmp[565114] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652637] "expr temp" "maybe param" "maybe type" "temp"
      (652640 'move' call_tmp[652637](121290 call isSparseDom this[126056]))
      (565116 'move' tmp[565114](424632 call isTrue call_tmp[652637]))
      (565121 'move' tmp[565101](565118 '_paramFoldLogical' tmp[565102] tmp[565114]))
    }
    (748301 call chpl_statementLevelSymbol tmp[565101])
  }
  function _domain[125914](?).shape[121418](arg _mt[126062]:_MT[238], arg this[126060]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[516868] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492209] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[652644] "expr temp" "maybe param" "maybe type" "temp"
      (652647 'move' call_tmp[652644](382975 call size _mt[243] this[126060]))
      (492213 'move' call_type_tmp[492209](121425 'typeof' call_tmp[652644]))
    }
    unknown s[121428] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652649] "expr temp" "maybe param" "maybe type" "temp"
    (652652 'move' call_tmp[652649](121426 call _build_tuple call_type_tmp[492209]))
    (542931 'default init var' s[121428] call_tmp[652649])
    (121431 'end of statement')
    unknown call_tmp[652654] "expr temp" "maybe param" "maybe type" "temp"
    (652657 'move' call_tmp[652654](121436 call s[121428] 0))
    unknown call_tmp[652661] "expr temp" "maybe param" "maybe type" "temp"
    (652664 'move' call_tmp[652661](382980 call size _mt[243] this[126060]))
    (121438 call = call_tmp[652654] call_tmp[652661])
    (479693 'end of statement' s[121428])
    (516873 'move' ret[516868](516872 'deref' s[121428]))
    gotoReturn _end_shape[516866] _end_shape[516866]
    (479695 'end of statement' s[121428])
    label _end_shape[516866]
    (516870 return ret[516868])
  }
  where {
    (121423 call isAssociativeDom this[126060])
  }
  function _domain[125914](?).shape[121449](arg _mt[126066]:_MT[238], arg this[126064]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (121470 call compilerError ".shape not supported on this domain")
    (516877 return _void[55])
  }
  function _domain[125914](?).buildArray[121479](arg _mt[126070]:_MT[238], arg this[126068]:_domain[125914](?), arg eltType[121477]:_any[178](?), param arg initElts[121482]:bool[10]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516883] "RVV" "temp"
    unknown call_tmp[652666] "expr temp" "maybe param" "maybe type" "temp"
    (652669 'move' call_tmp[652666](121487 call == eltType[121477] void[4]))
    unknown call_tmp[652671] "expr temp" "maybe param" "maybe type" "temp"
    (652674 'move' call_tmp[652671](121511 call _cond_test call_tmp[652666]))
    if call_tmp[652671]
    {
      (121508 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652676] "expr temp" "maybe param" "maybe type" "temp"
    (652679 'move' call_tmp[652676](121519 call isGenericType eltType[121477]))
    unknown call_tmp[652681] "expr temp" "maybe param" "maybe type" "temp"
    (652684 'move' call_tmp[652681](121679 call _cond_test call_tmp[652676]))
    if call_tmp[652681]
    {
      unknown call_tmp[652686] "expr temp" "maybe param" "maybe type" "temp"
      (652689 'move' call_tmp[652686](121540 call _cast string[26] eltType[121477]))
      unknown call_tmp[652691] "expr temp" "maybe param" "maybe type" "temp"
      (652694 'move' call_tmp[652691](121542 call + "creating an array with element type " call_tmp[652686]))
      (121545 call compilerWarning call_tmp[652691])
      (479699 'end of statement')
      unknown tmp[424648] "maybe param" "temp"
      (424659 'move' tmp[424648](121551 call isClassType eltType[121477]))
      unknown call_tmp[652696] "expr temp" "maybe param" "maybe type" "temp"
      (652699 'move' call_tmp[652696](424661 call _cond_invalid tmp[424648]))
      if call_tmp[652696]
      {
        (424664 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565128] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565129] "maybe param" "temp"
      unknown call_tmp[652701] "expr temp" "maybe param" "maybe type" "temp"
      (652704 'move' call_tmp[652701](424649 call isTrue tmp[424648]))
      (565134 'move' tmp[565129](565132 call _cond_test call_tmp[652701]))
      if tmp[565129]
      {
        unknown tmp[565136] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652706] "expr temp" "maybe param" "maybe type" "temp"
        (652709 'move' call_tmp[652706](121554 'to borrowed class from unknown' eltType[121477]))
        unknown call_tmp[652711] "expr temp" "maybe param" "maybe type" "temp"
        (652714 'move' call_tmp[652711](121556 call isGenericType call_tmp[652706]))
        unknown call_tmp[652716] "expr temp" "maybe param" "maybe type" "temp"
        (652719 'move' call_tmp[652716](121557 call ! call_tmp[652711]))
        (565138 'move' tmp[565136](424652 call isTrue call_tmp[652716]))
        (565143 'move' tmp[565128](565140 '_paramFoldLogical' tmp[565129] tmp[565136]))
      }
      {
        (565148 'move' tmp[565128](565145 '_paramFoldLogical' tmp[565129] 0))
      }
      unknown call_tmp[652721] "expr temp" "maybe param" "maybe type" "temp"
      (652724 'move' call_tmp[652721](121583 call _cond_test tmp[565128]))
      if call_tmp[652721]
      {
        (121580 call compilerWarning "which now means class type with generic management")
      }
      (121606 call compilerError "array element type cannot currently be generic")
    }
    {
      unknown tmp[424669] "maybe param" "temp"
      (424680 'move' tmp[424669](121611 call isSparseDom this[126068]))
      unknown call_tmp[652726] "expr temp" "maybe param" "maybe type" "temp"
      (652729 'move' call_tmp[652726](424682 call _cond_invalid tmp[424669]))
      if call_tmp[652726]
      {
        (424685 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565155] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565156] "maybe param" "temp"
      unknown call_tmp[652731] "expr temp" "maybe param" "maybe type" "temp"
      (652734 'move' call_tmp[652731](424670 call isTrue tmp[424669]))
      (565161 'move' tmp[565156](565159 call _cond_test call_tmp[652731]))
      if tmp[565156]
      {
        unknown tmp[565163] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652736] "expr temp" "maybe param" "maybe type" "temp"
        (652739 'move' call_tmp[652736](121615 call isDefaultInitializable eltType[121477]))
        unknown call_tmp[652741] "expr temp" "maybe param" "maybe type" "temp"
        (652744 'move' call_tmp[652741](121616 call ! call_tmp[652736]))
        (565165 'move' tmp[565163](424673 call isTrue call_tmp[652741]))
        (565170 'move' tmp[565155](565167 '_paramFoldLogical' tmp[565156] tmp[565163]))
      }
      {
        (565175 'move' tmp[565155](565172 '_paramFoldLogical' tmp[565156] 0))
      }
      unknown call_tmp[652746] "expr temp" "maybe param" "maybe type" "temp"
      (652749 'move' call_tmp[652746](121675 call _cond_test tmp[565155]))
      if call_tmp[652746]
      {
        unknown call_tmp[652751] "expr temp" "maybe param" "maybe type" "temp"
        (652754 'move' call_tmp[652751](121623 call isNonNilableClass eltType[121477]))
        unknown call_tmp[652756] "expr temp" "maybe param" "maybe type" "temp"
        (652759 'move' call_tmp[652756](121670 call _cond_test call_tmp[652751]))
        if call_tmp[652756]
        {
          (121643 call compilerError "sparse arrays of non-nilable classes are not currently supported")
        }
        {
          (121667 call compilerError "sparse arrays of non-default-initializable types are not currently supported")
        }
      }
    }
    unknown call_tmp[652761] "expr temp" "maybe param" "maybe type" "temp"
    (652764 'move' call_tmp[652761](121796 call _cond_test 0))
    if call_tmp[652761]
    {
      unknown tmp[424690] "maybe param" "temp"
      (424701 'move' tmp[424690](121688 call isRectangularDom this[126068]))
      unknown call_tmp[652766] "expr temp" "maybe param" "maybe type" "temp"
      (652769 'move' call_tmp[652766](424703 call _cond_invalid tmp[424690]))
      if call_tmp[652766]
      {
        (424706 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565182] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565183] "maybe param" "temp"
      unknown call_tmp[652771] "expr temp" "maybe param" "maybe type" "temp"
      (652774 'move' call_tmp[652771](424691 call isTrue tmp[424690]))
      (565188 'move' tmp[565183](565186 call _cond_test call_tmp[652771]))
      if tmp[565183]
      {
        unknown tmp[565190] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[652778] "expr temp" "maybe param" "maybe type" "temp"
        (652781 'move' call_tmp[652778](121690 call stridable _mt[243] this[126068]))
        (565192 'move' tmp[565190](424694 call isTrue call_tmp[652778]))
        (565197 'move' tmp[565182](565194 '_paramFoldLogical' tmp[565183] tmp[565190]))
      }
      {
        (565202 'move' tmp[565182](565199 '_paramFoldLogical' tmp[565183] 0))
      }
      unknown call_tmp[652783] "expr temp" "maybe param" "maybe type" "temp"
      (652786 'move' call_tmp[652783](121791 call _cond_test tmp[565182]))
      if call_tmp[652783]
      {
        unknown call_tmp[652790] "expr temp" "maybe param" "maybe type" "temp"
        (652793 'move' call_tmp[652790](382995 call rank _mt[243] this[126068]))
        unknown call_tmp[652795] "expr temp" "maybe param" "maybe type" "temp"
        (652798 'move' call_tmp[652795](121697 call == call_tmp[652790] 1))
        unknown call_tmp[652800] "expr temp" "maybe param" "maybe type" "temp"
        (652803 'move' call_tmp[652800](121787 call _cond_test call_tmp[652795]))
        if call_tmp[652800]
        {
          unknown call_tmp[652807] "expr temp" "maybe param" "maybe type" "temp"
          (652810 'move' call_tmp[652807](121700 call stride _mt[243] this[126068]))
          unknown call_tmp[652812] "expr temp" "maybe param" "maybe type" "temp"
          (652815 'move' call_tmp[652812](121704 call < call_tmp[652807] 0))
          unknown call_tmp[652817] "expr temp" "maybe param" "maybe type" "temp"
          (652820 'move' call_tmp[652817](121727 call _cond_test call_tmp[652812]))
          if call_tmp[652817]
          {
            (121725 call warning "arrays with negatively strided dimensions are not particularly stable")
          }
        }
        {
          {
            unknown _indexOfInterest[121752] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[121753] "expr temp" "temp"
            unknown call_tmp[652824] "expr temp" "maybe param" "maybe type" "temp"
            (652827 'move' call_tmp[652824](121735 call stride _mt[243] this[126068]))
            (121762 'move' _iterator[121753](121760 call _getIterator call_tmp[652824]))
            Defer
            {
              {
                (121779 call _freeIterator _iterator[121753])
              }
            }
            { scopeless type
              (121768 'move' _indexOfInterest[121752](121765 call iteratorIndex _iterator[121753]))
            }
            ForLoop[121754]
            {
              unknown s[121772] "index var" "insert auto destroy"
              (479709 'end of statement')
              (121774 'move' s[121772] _indexOfInterest[121752])
              (479710 'end of statement' s[121772])
              unknown call_tmp[652829] "expr temp" "maybe param" "maybe type" "temp"
              (652832 'move' call_tmp[652829](121740 call < s[121772] 0))
              unknown call_tmp[652834] "expr temp" "maybe param" "maybe type" "temp"
              (652837 'move' call_tmp[652834](121747 call _cond_test call_tmp[652829]))
              if call_tmp[652834]
              {
                (121745 call warning "arrays with negatively strided dimensions are not particularly stable")
              }
              label _continueLabel[121757]
              _indexOfInterest[121752]
              _iterator[121753]
            }
            label _breakLabel[121758]
          }
        }
      }
    }
    unknown call_tmp[652841] "expr temp" "maybe param" "maybe type" "temp"
    (652844 'move' call_tmp[652841](359429 call _value _mt[243] this[126068]))
    unknown call_tmp[652848] "maybe param" "maybe type" "temp"
    (652851 'move' call_tmp[652848](121810 call(121804 call (partial) dsiBuildArray _mt[243] call_tmp[652841]) eltType[121477] initElts[121482]))
    unknown x[121811] "dead at end of block" "insert auto destroy"
    (542933 'init var' x[121811] call_tmp[652848])
    (121814 'end of statement')
    function help[121817]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652855] "expr temp" "maybe param" "maybe type" "temp"
      (652858 'move' call_tmp[652855](359433 call _value _mt[243] this[126068]))
      (121827 call(121822 call (partial) add_arr _mt[243] call_tmp[652855]) x[121811])
      (516879 return _void[55])
    }
    (121834 call help)
    (479714 'end of statement')
    unknown call_tmp[652864] "expr temp" "maybe param" "maybe type" "temp"
    (652867 'move' call_tmp[652864](121840 call eltType _mt[243] x[121811]))
    (121843 call chpl_incRefCountsForDomainsInArrayEltTypes x[121811] call_tmp[652864])
    (479715 'end of statement' x[121811] x[121811])
    unknown call_tmp[652869] "expr temp" "maybe param" "maybe type" "temp"
    (652872 'move' call_tmp[652869](121848 call _newArray x[121811]))
    (516888 'move' ret[516883](516887 'deref' call_tmp[652869]))
    gotoReturn _end_buildArray[516881] _end_buildArray[516881]
    (479718 'end of statement' x[121811])
    label _end_buildArray[516881]
    (516885 return ret[516883])
  }
  function _domain[125914](?).buildArrayWith[121857](arg _mt[126074]:_MT[238], arg this[126072]:_domain[125914](?), arg eltType[121855]:_any[178](?), arg data[121863] :
  (121862 call _ddata[11695](?) eltType[121855]), arg allocSize[121867]:int(64)[13]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[516896] "RVV" "temp"
    unknown call_tmp[652874] "expr temp" "maybe param" "maybe type" "temp"
    (652877 'move' call_tmp[652874](121872 call == eltType[121855] void[4]))
    unknown call_tmp[652879] "expr temp" "maybe param" "maybe type" "temp"
    (652882 'move' call_tmp[652879](121880 call _cond_test call_tmp[652874]))
    if call_tmp[652879]
    {
      (121877 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[652886] "expr temp" "maybe param" "maybe type" "temp"
    (652889 'move' call_tmp[652886](359438 call _value _mt[243] this[126072]))
    unknown call_tmp[652893] "maybe param" "maybe type" "temp"
    (652896 'move' call_tmp[652893](121895 call(121888 call (partial) dsiBuildArrayWith _mt[243] call_tmp[652886]) eltType[121855] data[121863] allocSize[121867]))
    unknown x[121896] "dead at end of block" "insert auto destroy"
    (542935 'init var' x[121896] call_tmp[652893])
    (121899 'end of statement')
    function help[121902]() : _unknown[51] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[652900] "expr temp" "maybe param" "maybe type" "temp"
      (652903 'move' call_tmp[652900](359442 call _value _mt[243] this[126072]))
      (121910 call(121905 call (partial) add_arr _mt[243] call_tmp[652900]) x[121896])
      (516892 return _void[55])
    }
    (121917 call help)
    (479722 'end of statement')
    unknown call_tmp[652909] "expr temp" "maybe param" "maybe type" "temp"
    (652912 'move' call_tmp[652909](121923 call eltType _mt[243] x[121896]))
    (121926 call chpl_incRefCountsForDomainsInArrayEltTypes x[121896] call_tmp[652909])
    (479723 'end of statement' x[121896] x[121896])
    unknown call_tmp[652914] "expr temp" "maybe param" "maybe type" "temp"
    (652917 'move' call_tmp[652914](121931 call _newArray x[121896]))
    (516901 'move' ret[516896](516900 'deref' call_tmp[652914]))
    gotoReturn _end_buildArrayWith[516894] _end_buildArrayWith[516894]
    (479726 'end of statement' x[121896])
    label _end_buildArrayWith[516894]
    (516898 return ret[516896])
  }
  function _domain[125914](?).clear[121938](arg _mt[126078]:_MT[238], arg this[126076]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[121946] "dead at end of block" "insert auto destroy"
    unknown call_tmp[652919] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (652922 'move' call_tmp[652919](121945 'typeof' this[126076]))
    (542937 'default init var' emptyDom[121946] call_tmp[652919])
    (121949 'end of statement')
    (121953 call = this[126076] emptyDom[121946])
    (479728 'end of statement' emptyDom[121946])
    (516905 return _void[55])
  }
  where {
    (121943 call isRectangularDom this[126076])
  }
  function _domain[125914](?).clear[121961](arg _mt[126082]:_MT[238], arg this[126080]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[652926] "expr temp" "maybe param" "maybe type" "temp"
    (652929 'move' call_tmp[652926](359447 call _value _mt[243] this[126080]))
    (121970 call(121966 call (partial) dsiClear _mt[243] call_tmp[652926]))
    (516907 return _void[55])
  }
  function _domain[125914](?).add[121979](arg _mt[126086]:_MT[238], arg this[126084]:_domain[125914](?), in arg i[121977]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516911] "RVV" "temp"
    unknown call_tmp[652935] "expr temp" "maybe param" "maybe type" "temp"
    (652938 'move' call_tmp[652935](359451 call _value _mt[243] this[126084]))
    unknown call_tmp[652942] "expr temp" "maybe param" "maybe type" "temp"
    (652945 'move' call_tmp[652942](121989 call(121984 call (partial) dsiAdd _mt[243] call_tmp[652935]) i[121977]))
    (516916 'move' ret[516911](516915 'deref' call_tmp[652942]))
    (516913 return ret[516911])
  }
  function _domain[125914](?).bulkAdd[122007](arg _mt[126090]:_MT[238], arg this[126088]:_domain[125914](?), arg inds[122004]:_array[133600](?), arg dataSorted[122010] :
  0 =
  0, arg isUnique[122014] :
  0 =
  0, arg preserveInds[122018] :
  1 =
  1, arg addOn[122022] :
  nilLocale[89943] =
  nilLocale[89943]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[516920] "RVV" "temp"
    unknown call_tmp[652949] "expr temp" "maybe param" "maybe type" "temp"
    (652952 'move' call_tmp[652949](122039 call size _mt[243] inds[122004]))
    unknown call_tmp[652954] "expr temp" "maybe param" "maybe type" "temp"
    (652957 'move' call_tmp[652954](122043 call == call_tmp[652949] 0))
    unknown call_tmp[652959] "expr temp" "maybe param" "maybe type" "temp"
    (652962 'move' call_tmp[652959](122048 call _cond_test call_tmp[652954]))
    if call_tmp[652959]
    {
      (516925 'move' ret[516920](516924 'deref' 0))
      gotoReturn _end_bulkAdd[516918] _end_bulkAdd[516918]
    }
    unknown call_tmp[652966] "expr temp" "maybe param" "maybe type" "temp"
    (652969 'move' call_tmp[652966](359464 call _value _mt[243] this[126088]))
    unknown call_tmp[652973] "expr temp" "maybe param" "maybe type" "temp"
    (652976 'move' call_tmp[652973](122066 call(122057 call (partial) dsiBulkAdd _mt[243] call_tmp[652966]) inds[122004] dataSorted[122010] isUnique[122014] preserveInds[122018] addOn[122022]))
    (516930 'move' ret[516920](516929 'deref' call_tmp[652973]))
    label _end_bulkAdd[516918]
    (516922 return ret[516920])
  }
  where {
    unknown tmp[424711] "maybe param" "temp"
    (424722 'move' tmp[424711](122028 call isSparseDom this[126088]))
    unknown call_tmp[652978] "expr temp" "maybe param" "maybe type" "temp"
    (652981 'move' call_tmp[652978](424724 call _cond_invalid tmp[424711]))
    if call_tmp[652978]
    {
      (424727 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565209] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565210] "maybe param" "temp"
    unknown call_tmp[652983] "expr temp" "maybe param" "maybe type" "temp"
    (652986 'move' call_tmp[652983](424712 call isTrue tmp[424711]))
    (565215 'move' tmp[565210](565213 call _cond_test call_tmp[652983]))
    if tmp[565210]
    {
      unknown tmp[565217] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[652990] "expr temp" "maybe param" "maybe type" "temp"
      (652993 'move' call_tmp[652990](359459 call _value _mt[243] this[126088]))
      unknown call_tmp[652997] "expr temp" "maybe param" "maybe type" "temp"
      (653000 'move' call_tmp[652997](122030 call rank _mt[243] call_tmp[652990]))
      unknown call_tmp[653002] "expr temp" "maybe param" "maybe type" "temp"
      (653005 'move' call_tmp[653002](122034 call == call_tmp[652997] 1))
      (565219 'move' tmp[565217](424715 call isTrue call_tmp[653002]))
      (565224 'move' tmp[565209](565221 '_paramFoldLogical' tmp[565210] tmp[565217]))
    }
    {
      (565229 'move' tmp[565209](565226 '_paramFoldLogical' tmp[565210] 0))
    }
    unknown call_tmp[653009] "expr temp" "maybe param" "maybe type" "temp"
    (653012 'move' call_tmp[653009](359455 call _value _mt[243] this[126088]))
    unknown call_tmp[653016] "expr temp" "maybe param" "maybe type" "temp"
    (653019 'move' call_tmp[653016](121998 call idxType _mt[243] call_tmp[653009]))
    unknown call_tmp[653023] "expr temp" "maybe param" "maybe type" "temp"
    (653026 'move' call_tmp[653023](461459 call eltType _mt[243] inds[122004]))
    unknown call_tmp[653028] "expr temp" "maybe param" "maybe type" "temp"
    (653031 'move' call_tmp[653028](461463 call == call_tmp[653016] call_tmp[653023]))
    (461457 call & tmp[565209] call_tmp[653028])
  }
  function _domain[125914](?).makeIndexBuffer[122078](arg _mt[126094]:_MT[238], arg this[126092]:_domain[125914](?), arg size[122075]:int(64)[13]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[516934] "RVV" "temp"
    unknown call_tmp[653035] "expr temp" "maybe param" "maybe type" "temp"
    (653038 'move' call_tmp[653035](359468 call _value _mt[243] this[126092]))
    unknown call_tmp[653042] "expr temp" "maybe param" "maybe type" "temp"
    (653045 'move' call_tmp[653042](122088 call(122083 call (partial) dsiMakeIndexBuffer _mt[243] call_tmp[653035]) size[122075]))
    (516939 'move' ret[516934](516938 'deref' call_tmp[653042]))
    (516936 return ret[516934])
  }
  function _domain[125914](?).bulkAdd[122112](arg _mt[126098]:_MT[238], arg this[126096]:_domain[125914](?), arg inds[122109]:_array[133600](?), arg dataSorted[122115] :
  0 =
  0, arg isUnique[122119] :
  0 =
  0, arg preserveInds[122123] :
  1 =
  1, arg addOn[122127] :
  nilLocale[89943] =
  nilLocale[89943]) : _unknown[51] "method" "primary method"
  {
    unknown ret[516943] "RVV" "temp"
    unknown call_tmp[653049] "expr temp" "maybe param" "maybe type" "temp"
    (653052 'move' call_tmp[653049](122144 call size _mt[243] inds[122109]))
    unknown call_tmp[653054] "expr temp" "maybe param" "maybe type" "temp"
    (653057 'move' call_tmp[653054](122148 call == call_tmp[653049] 0))
    unknown call_tmp[653059] "expr temp" "maybe param" "maybe type" "temp"
    (653062 'move' call_tmp[653059](122153 call _cond_test call_tmp[653054]))
    if call_tmp[653059]
    {
      (516948 'move' ret[516943](516947 'deref' 0))
      gotoReturn _end_bulkAdd[516941] _end_bulkAdd[516941]
    }
    unknown call_tmp[653066] "expr temp" "maybe param" "maybe type" "temp"
    (653069 'move' call_tmp[653066](359485 call _value _mt[243] this[126096]))
    unknown call_tmp[653073] "expr temp" "maybe param" "maybe type" "temp"
    (653076 'move' call_tmp[653073](122169 call(122160 call (partial) dsiBulkAdd _mt[243] call_tmp[653066]) inds[122109] dataSorted[122115] isUnique[122119] preserveInds[122123] addOn[122127]))
    (516953 'move' ret[516943](516952 'deref' call_tmp[653073]))
    label _end_bulkAdd[516941]
    (516945 return ret[516943])
  }
  where {
    unknown tmp[424732] "maybe param" "temp"
    (424743 'move' tmp[424732](122133 call isSparseDom this[126096]))
    unknown call_tmp[653078] "expr temp" "maybe param" "maybe type" "temp"
    (653081 'move' call_tmp[653078](424745 call _cond_invalid tmp[424732]))
    if call_tmp[653078]
    {
      (424748 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565236] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565237] "maybe param" "temp"
    unknown call_tmp[653083] "expr temp" "maybe param" "maybe type" "temp"
    (653086 'move' call_tmp[653083](424733 call isTrue tmp[424732]))
    (565242 'move' tmp[565237](565240 call _cond_test call_tmp[653083]))
    if tmp[565237]
    {
      unknown tmp[565244] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653090] "expr temp" "maybe param" "maybe type" "temp"
      (653093 'move' call_tmp[653090](359480 call _value _mt[243] this[126096]))
      unknown call_tmp[653097] "expr temp" "maybe param" "maybe type" "temp"
      (653100 'move' call_tmp[653097](122135 call rank _mt[243] call_tmp[653090]))
      unknown call_tmp[653102] "expr temp" "maybe param" "maybe type" "temp"
      (653105 'move' call_tmp[653102](122139 call > call_tmp[653097] 1))
      (565246 'move' tmp[565244](424736 call isTrue call_tmp[653102]))
      (565251 'move' tmp[565236](565248 '_paramFoldLogical' tmp[565237] tmp[565244]))
    }
    {
      (565256 'move' tmp[565236](565253 '_paramFoldLogical' tmp[565237] 0))
    }
    unknown call_tmp[653109] "expr temp" "maybe param" "maybe type" "temp"
    (653112 'move' call_tmp[653109](359472 call _value _mt[243] this[126096]))
    unknown call_tmp[653116] "expr temp" "maybe param" "maybe type" "temp"
    (653119 'move' call_tmp[653116](122097 call rank _mt[243] call_tmp[653109]))
    unknown call_tmp[653123] "expr temp" "maybe param" "maybe type" "temp"
    (653126 'move' call_tmp[653123](359476 call _value _mt[243] this[126096]))
    unknown call_tmp[653130] "expr temp" "maybe param" "maybe type" "temp"
    (653133 'move' call_tmp[653130](122101 call idxType _mt[243] call_tmp[653123]))
    unknown call_tmp[653135] "expr temp" "maybe param" "maybe type" "temp"
    (653138 'move' call_tmp[653135](122104 call * call_tmp[653116] call_tmp[653130]))
    unknown call_tmp[653142] "expr temp" "maybe param" "maybe type" "temp"
    (653145 'move' call_tmp[653142](461469 call eltType _mt[243] inds[122109]))
    unknown call_tmp[653147] "expr temp" "maybe param" "maybe type" "temp"
    (653150 'move' call_tmp[653147](461473 call == call_tmp[653135] call_tmp[653142]))
    (461467 call & tmp[565236] call_tmp[653147])
  }
  function _domain[125914](?).remove[122179](arg _mt[126102]:_MT[238], arg this[126100]:_domain[125914](?), arg i[122177]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[516957] "RVV" "temp"
    unknown call_tmp[653154] "expr temp" "maybe param" "maybe type" "temp"
    (653157 'move' call_tmp[653154](359489 call _value _mt[243] this[126100]))
    unknown call_tmp[653161] "expr temp" "maybe param" "maybe type" "temp"
    (653164 'move' call_tmp[653161](122189 call(122184 call (partial) dsiRemove _mt[243] call_tmp[653154]) i[122177]))
    (516962 'move' ret[516957](516961 'deref' call_tmp[653161]))
    (516959 return ret[516957])
  }
  function _domain[125914](?).requestCapacity[122199](arg _mt[126106]:_MT[238], arg this[126104]:_domain[125914](?), arg i[122197]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[653166] "expr temp" "maybe param" "maybe type" "temp"
    (653169 'move' call_tmp[653166](122203 call < i[122197] 0))
    unknown call_tmp[653171] "expr temp" "maybe param" "maybe type" "temp"
    (653174 'move' call_tmp[653171](122227 call _cond_test call_tmp[653166]))
    if call_tmp[653171]
    {
      (122224 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    unknown call_tmp[653176] "expr temp" "maybe param" "maybe type" "temp"
    (653179 'move' call_tmp[653176](122235 call isAssociativeDom this[126104]))
    unknown call_tmp[653181] "expr temp" "maybe param" "maybe type" "temp"
    (653184 'move' call_tmp[653181](122236 call ! call_tmp[653176]))
    unknown call_tmp[653186] "expr temp" "maybe param" "maybe type" "temp"
    (653189 'move' call_tmp[653186](122259 call _cond_test call_tmp[653181]))
    if call_tmp[653186]
    {
      (122257 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    unknown call_tmp[653193] "expr temp" "maybe param" "maybe type" "temp"
    (653196 'move' call_tmp[653193](359493 call _value _mt[243] this[126104]))
    (122272 call(122267 call (partial) dsiRequestCapacity _mt[243] call_tmp[653193]) i[122197])
    (516964 return _void[55])
  }
  function _domain[125914](?).size[122278](arg _mt[126110]:_MT[238], arg this[126108]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516968] "RVV" "temp"
    unknown call_tmp[653202] "expr temp" "maybe param" "maybe type" "temp"
    (653205 'move' call_tmp[653202](359497 call _value _mt[243] this[126108]))
    unknown call_tmp[653209] "expr temp" "maybe param" "maybe type" "temp"
    (653212 'move' call_tmp[653209](122281 call dsiNumIndices _mt[243] call_tmp[653202]))
    (516973 'move' ret[516968](516972 'deref' call_tmp[653209]))
    (516970 return ret[516968])
  }
  function _domain[125914](?).numIndices[122291](arg _mt[126114]:_MT[238], arg this[126112]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516977] "RVV" "temp"
    unknown call_tmp[653214] "expr temp" "maybe param" "maybe type" "temp"
    (653217 'move' call_tmp[653214](122328 call + "'domain.numIndices' is deprecated - " "please use 'domain.size' instead"))
    (122331 call compilerWarning call_tmp[653214])
    (479742 'end of statement')
    unknown call_tmp[653221] "expr temp" "maybe param" "maybe type" "temp"
    (653224 'move' call_tmp[653221](383038 call size _mt[243] this[126112]))
    (516982 'move' ret[516977](516981 'deref' call_tmp[653221]))
    (516979 return ret[516977])
  }
  function _domain[125914](?).low[122341](arg _mt[126118]:_MT[238], arg this[126116]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516986] "RVV" "temp"
    unknown call_tmp[653228] "expr temp" "maybe param" "maybe type" "temp"
    (653231 'move' call_tmp[653228](359501 call _value _mt[243] this[126116]))
    unknown call_tmp[653235] "expr temp" "maybe param" "maybe type" "temp"
    (653238 'move' call_tmp[653235](122344 call dsiLow _mt[243] call_tmp[653228]))
    (516991 'move' ret[516986](516990 'deref' call_tmp[653235]))
    (516988 return ret[516986])
  }
  function _domain[125914](?).high[122354](arg _mt[126122]:_MT[238], arg this[126120]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[516995] "RVV" "temp"
    unknown call_tmp[653242] "expr temp" "maybe param" "maybe type" "temp"
    (653245 'move' call_tmp[653242](359505 call _value _mt[243] this[126120]))
    unknown call_tmp[653249] "expr temp" "maybe param" "maybe type" "temp"
    (653252 'move' call_tmp[653249](122359 call dsiHigh _mt[243] call_tmp[653242]))
    (517000 'move' ret[516995](516999 'deref' call_tmp[653249]))
    (516997 return ret[516995])
  }
  function _domain[125914](?).stride[122369](arg _mt[126126]:_MT[238], arg this[126124]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517004] "RVV" "temp"
    unknown call_tmp[653256] "expr temp" "maybe param" "maybe type" "temp"
    (653259 'move' call_tmp[653256](359509 call _value _mt[243] this[126124]))
    unknown call_tmp[653263] "expr temp" "maybe param" "maybe type" "temp"
    (653266 'move' call_tmp[653263](122372 call dsiStride _mt[243] call_tmp[653256]))
    (517009 'move' ret[517004](517008 'deref' call_tmp[653263]))
    (517006 return ret[517004])
  }
  function _domain[125914](?).alignment[122382](arg _mt[126130]:_MT[238], arg this[126128]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517013] "RVV" "temp"
    unknown call_tmp[653270] "expr temp" "maybe param" "maybe type" "temp"
    (653273 'move' call_tmp[653270](359513 call _value _mt[243] this[126128]))
    unknown call_tmp[653277] "expr temp" "maybe param" "maybe type" "temp"
    (653280 'move' call_tmp[653277](122387 call dsiAlignment _mt[243] call_tmp[653270]))
    (517018 'move' ret[517013](517017 'deref' call_tmp[653277]))
    (517015 return ret[517013])
  }
  function _domain[125914](?).first[122397](arg _mt[126134]:_MT[238], arg this[126132]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517022] "RVV" "temp"
    unknown call_tmp[653284] "expr temp" "maybe param" "maybe type" "temp"
    (653287 'move' call_tmp[653284](359517 call _value _mt[243] this[126132]))
    unknown call_tmp[653291] "expr temp" "maybe param" "maybe type" "temp"
    (653294 'move' call_tmp[653291](122402 call dsiFirst _mt[243] call_tmp[653284]))
    (517027 'move' ret[517022](517026 'deref' call_tmp[653291]))
    (517024 return ret[517022])
  }
  function _domain[125914](?).last[122412](arg _mt[126138]:_MT[238], arg this[126136]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517031] "RVV" "temp"
    unknown call_tmp[653298] "expr temp" "maybe param" "maybe type" "temp"
    (653301 'move' call_tmp[653298](359521 call _value _mt[243] this[126136]))
    unknown call_tmp[653305] "expr temp" "maybe param" "maybe type" "temp"
    (653308 'move' call_tmp[653305](122417 call dsiLast _mt[243] call_tmp[653298]))
    (517036 'move' ret[517031](517035 'deref' call_tmp[653305]))
    (517033 return ret[517031])
  }
  function _domain[125914](?).alignedLow[122427](arg _mt[126142]:_MT[238], arg this[126140]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517040] "RVV" "temp"
    unknown call_tmp[653312] "expr temp" "maybe param" "maybe type" "temp"
    (653315 'move' call_tmp[653312](359525 call _value _mt[243] this[126140]))
    unknown call_tmp[653319] "expr temp" "maybe param" "maybe type" "temp"
    (653322 'move' call_tmp[653319](122432 call dsiAlignedLow _mt[243] call_tmp[653312]))
    (517045 'move' ret[517040](517044 'deref' call_tmp[653319]))
    (517042 return ret[517040])
  }
  function _domain[125914](?).alignedHigh[122442](arg _mt[126146]:_MT[238], arg this[126144]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517049] "RVV" "temp"
    unknown call_tmp[653326] "expr temp" "maybe param" "maybe type" "temp"
    (653329 'move' call_tmp[653326](359529 call _value _mt[243] this[126144]))
    unknown call_tmp[653333] "expr temp" "maybe param" "maybe type" "temp"
    (653336 'move' call_tmp[653333](122447 call dsiAlignedHigh _mt[243] call_tmp[653326]))
    (517054 'move' ret[517049](517053 'deref' call_tmp[653333]))
    (517051 return ret[517049])
  }
  function _domain[125914](?).indices[122457](arg _mt[126150]:_MT[238], arg this[126148]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (122478 call compilerError "domains do not support '.indices'")
    (517056 return _void[55])
  }
  function _domain[125914](?).contains[122495](arg _mt[126154]:_MT[238], arg this[126152]:_domain[125914](?), arg i[122492] :
  unknown call_tmp[653340] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517060] "RVV" "temp"
    unknown tmp[424753] "maybe param" "temp"
    (424764 'move' tmp[424753](122500 call isRectangularDom this[126152]))
    unknown call_tmp[653359] "expr temp" "maybe param" "maybe type" "temp"
    (653362 'move' call_tmp[653359](424766 call _cond_invalid tmp[424753]))
    if call_tmp[653359]
    {
      (424769 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565263] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565264] "maybe param" "temp"
    unknown call_tmp[653364] "expr temp" "maybe param" "maybe type" "temp"
    (653367 'move' call_tmp[653364](424754 call isTrue tmp[424753]))
    (565269 'move' tmp[565264](565267 call _cond_test call_tmp[653364]))
    if tmp[565264]
    {
      (565274 'move' tmp[565263](565271 '_paramFoldLogical' tmp[565264] 1))
    }
    {
      unknown tmp[565276] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653369] "expr temp" "maybe param" "maybe type" "temp"
      (653372 'move' call_tmp[653369](122504 call isSparseDom this[126152]))
      (565278 'move' tmp[565276](424758 call isTrue call_tmp[653369]))
      (565283 'move' tmp[565263](565280 '_paramFoldLogical' tmp[565264] tmp[565276]))
    }
    unknown call_tmp[653374] "expr temp" "maybe param" "maybe type" "temp"
    (653377 'move' call_tmp[653374](122532 call _cond_test tmp[565263]))
    if call_tmp[653374]
    {
      unknown call_tmp[653381] "expr temp" "maybe param" "maybe type" "temp"
      (653384 'move' call_tmp[653381](359537 call _value _mt[243] this[126152]))
      unknown call_tmp[653390] "expr temp" "maybe param" "maybe type" "temp"
      (653393 'move' call_tmp[653390](383048 call rank _mt[243] this[126152]))
      unknown call_tmp[653395] "expr temp" "maybe param" "maybe type" "temp"
      (653398 'move' call_tmp[653395](122515 call _makeIndexTuple call_tmp[653390] i[122492]))
      unknown call_tmp[653400] "expr temp" "maybe param" "maybe type" "temp"
      (653403 'move' call_tmp[653400](122517 call(122508 call (partial) dsiMember _mt[243] call_tmp[653381]) call_tmp[653395]))
      (517065 'move' ret[517060](517064 'deref' call_tmp[653400]))
      gotoReturn _end_contains[517058] _end_contains[517058]
    }
    {
      unknown call_tmp[653407] "expr temp" "maybe param" "maybe type" "temp"
      (653410 'move' call_tmp[653407](359541 call _value _mt[243] this[126152]))
      unknown call_tmp[653414] "expr temp" "maybe param" "maybe type" "temp"
      (653417 'move' call_tmp[653414](122527 call i[122492] 0))
      unknown call_tmp[653419] "expr temp" "maybe param" "maybe type" "temp"
      (653422 'move' call_tmp[653419](122529 call(122521 call (partial) dsiMember _mt[243] call_tmp[653407]) call_tmp[653414]))
      (517070 'move' ret[517060](517069 'deref' call_tmp[653419]))
      gotoReturn _end_contains[517058] _end_contains[517058]
    }
    label _end_contains[517058]
    (517062 return ret[517060])
  }
  function _domain[125914](?).contains[122552](arg _mt[126158]:_MT[238], arg this[126156]:_domain[125914](?), arg i[122548] ... :
  unknown call_tmp[653426] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[517076] "RVV" "temp"
    unknown call_tmp[653437] "expr temp" "maybe param" "maybe type" "temp"
    (653440 'move' call_tmp[653437](122557 call(383058 call (partial) contains _mt[243] this[126156]) i[122548]))
    (517081 'move' ret[517076](517080 'deref' call_tmp[653437]))
    (517078 return ret[517076])
  }
  function _domain[125914](?).member[122575](arg _mt[126162]:_MT[238], arg this[126160]:_domain[125914](?), arg i[122572] :
  unknown call_tmp[653444] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    unknown ret[517085] "RVV" "temp"
    unknown call_tmp[653463] "expr temp" "maybe param" "maybe type" "temp"
    (653466 'move' call_tmp[653463](122612 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122615 call compilerWarning call_tmp[653463])
    (479757 'end of statement')
    unknown call_tmp[653470] "expr temp" "maybe param" "maybe type" "temp"
    (653473 'move' call_tmp[653470](122624 call(122619 call (partial) contains _mt[243] this[126160]) i[122572]))
    (517090 'move' ret[517085](517089 'deref' call_tmp[653470]))
    (517087 return ret[517085])
  }
  function _domain[125914](?).member[122640](arg _mt[126166]:_MT[238], arg this[126164]:_domain[125914](?), arg i[122636] ... :
  unknown call_tmp[653477] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[517094] "RVV" "temp"
    unknown call_tmp[653486] "expr temp" "maybe param" "maybe type" "temp"
    (653489 'move' call_tmp[653486](122645 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122648 call compilerWarning call_tmp[653486])
    (479759 'end of statement')
    unknown call_tmp[653493] "expr temp" "maybe param" "maybe type" "temp"
    (653496 'move' call_tmp[653493](122657 call(122652 call (partial) contains _mt[243] this[126164]) i[122636]))
    (517099 'move' ret[517094](517098 'deref' call_tmp[653493]))
    (517096 return ret[517094])
  }
  function _domain[125914](?).isSubset[122668](arg _mt[126170]:_MT[238], arg this[126168]:_domain[125914](?), arg super[122665]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517103] "RVV" "temp"
    unknown tmp[424774] "maybe param" "temp"
    (424785 'move' tmp[424774](122673 call isAssociativeDom this[126168]))
    unknown call_tmp[653498] "expr temp" "maybe param" "maybe type" "temp"
    (653501 'move' call_tmp[653498](424787 call _cond_invalid tmp[424774]))
    if call_tmp[653498]
    {
      (424790 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565290] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565291] "maybe param" "temp"
    unknown call_tmp[653503] "expr temp" "maybe param" "maybe type" "temp"
    (653506 'move' call_tmp[653503](424775 call isTrue tmp[424774]))
    (565296 'move' tmp[565291](565294 call _cond_test call_tmp[653503]))
    if tmp[565291]
    {
      (565301 'move' tmp[565290](565298 '_paramFoldLogical' tmp[565291] 1))
    }
    {
      unknown tmp[565303] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653508] "expr temp" "maybe param" "maybe type" "temp"
      (653511 'move' call_tmp[653508](122677 call isRectangularDom this[126168]))
      (565305 'move' tmp[565303](424779 call isTrue call_tmp[653508]))
      (565310 'move' tmp[565290](565307 '_paramFoldLogical' tmp[565291] tmp[565303]))
    }
    unknown call_tmp[653513] "expr temp" "maybe param" "maybe type" "temp"
    (653516 'move' call_tmp[653513](122680 call ! tmp[565290]))
    unknown call_tmp[653518] "expr temp" "maybe param" "maybe type" "temp"
    (653521 'move' call_tmp[653518](122735 call _cond_test call_tmp[653513]))
    if call_tmp[653518]
    {
      unknown call_tmp[653523] "expr temp" "maybe param" "maybe type" "temp"
      (653526 'move' call_tmp[653523](122685 call isSparseDom this[126168]))
      unknown call_tmp[653528] "expr temp" "maybe param" "maybe type" "temp"
      (653531 'move' call_tmp[653528](122728 call _cond_test call_tmp[653523]))
      if call_tmp[653528]
      {
        (122705 call compilerError "isSubset not supported on sparse domains")
      }
      {
        (122726 call compilerError "isSubset not supported on this domain type")
      }
    }
    unknown call_tmp[653533] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653536 'move' call_tmp[653533](122741 'typeof' super[122665]))
    unknown call_tmp[653538] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653541 'move' call_tmp[653538](122743 'typeof' this[126168]))
    unknown call_tmp[653543] "expr temp" "maybe param" "maybe type" "temp"
    (653546 'move' call_tmp[653543](122744 call != call_tmp[653533] call_tmp[653538]))
    unknown call_tmp[653548] "expr temp" "maybe param" "maybe type" "temp"
    (653551 'move' call_tmp[653548](122852 call _cond_test call_tmp[653543]))
    if call_tmp[653548]
    {
      unknown call_tmp[653553] "expr temp" "maybe param" "maybe type" "temp"
      (653556 'move' call_tmp[653553](122749 call isRectangularDom this[126168]))
      unknown call_tmp[653558] "expr temp" "maybe param" "maybe type" "temp"
      (653561 'move' call_tmp[653558](122847 call _cond_test call_tmp[653553]))
      if call_tmp[653558]
      {
        unknown call_tmp[653565] "expr temp" "maybe param" "maybe type" "temp"
        (653568 'move' call_tmp[653565](122751 call rank _mt[243] super[122665]))
        unknown call_tmp[653572] "expr temp" "maybe param" "maybe type" "temp"
        (653575 'move' call_tmp[653572](122755 call rank _mt[243] this[126168]))
        unknown call_tmp[653577] "expr temp" "maybe param" "maybe type" "temp"
        (653580 'move' call_tmp[653577](122758 call != call_tmp[653565] call_tmp[653572]))
        unknown call_tmp[653582] "expr temp" "maybe param" "maybe type" "temp"
        (653585 'move' call_tmp[653582](122819 call _cond_test call_tmp[653577]))
        if call_tmp[653582]
        {
          (122779 call compilerError "rank mismatch in domain.isSubset()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492215] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653589] "expr temp" "maybe param" "maybe type" "temp"
            (653592 'move' call_tmp[653589](122782 call low _mt[243] super[122665]))
            (492219 'move' call_type_tmp[492215](122785 'typeof' call_tmp[653589]))
          }
          { scopeless type
            unknown call_type_tmp[492221] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653596] "expr temp" "maybe param" "maybe type" "temp"
            (653599 'move' call_tmp[653596](122787 call low _mt[243] this[126168]))
            (492225 'move' call_type_tmp[492221](122790 'typeof' call_tmp[653596]))
          }
          unknown call_tmp[653601] "expr temp" "maybe param" "maybe type" "temp"
          (653604 'move' call_tmp[653601](122791 call != call_type_tmp[492215] call_type_tmp[492221]))
          unknown call_tmp[653606] "expr temp" "maybe param" "maybe type" "temp"
          (653609 'move' call_tmp[653606](122814 call _cond_test call_tmp[653601]))
          if call_tmp[653606]
          {
            (122812 call compilerError "isSubset called with different index types")
          }
        }
      }
      {
        (122845 call compilerError "isSubset called with different associative domain types")
      }
    }
    unknown call_tmp[653611] "expr temp" "maybe param" "maybe type" "temp"
    (653614 'move' call_tmp[653611](122860 call isRectangularDom this[126168]))
    unknown call_tmp[653616] "expr temp" "maybe param" "maybe type" "temp"
    (653619 'move' call_tmp[653616](122983 call _cond_test call_tmp[653611]))
    if call_tmp[653616]
    {
      unknown contains[122862] "dead at end of block" "insert auto destroy"
      (542939 'init var' contains[122862] 1)
      (122865 'end of statement')
      {
        unknown _indexOfInterest[122932] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[122933] "expr temp" "temp"
        unknown call_tmp[653623] "expr temp" "maybe param" "maybe type" "temp"
        (653626 'move' call_tmp[653623](122954 call(122951 call (partial) dims _mt[243] this[126168])))
        unknown call_tmp[653630] "expr temp" "maybe param" "maybe type" "temp"
        (653633 'move' call_tmp[653630](122949 call size _mt[243] call_tmp[653623]))
        unknown call_tmp[653635] "expr temp" "maybe param" "maybe type" "temp"
        (653638 'move' call_tmp[653635](122947 call - call_tmp[653630] 1))
        unknown call_tmp[653640] "expr temp" "maybe param" "maybe type" "temp"
        (653643 'move' call_tmp[653640](122957 call chpl_direct_range_iter 0 call_tmp[653635] 1))
        (122942 'move' _iterator[122933](122940 call _getIterator call_tmp[653640]))
        Defer
        {
          {
            (122973 call _freeIterator _iterator[122933])
          }
        }
        { scopeless type
          (122962 'move' _indexOfInterest[122932](122959 call iteratorIndex _iterator[122933]))
        }
        ForLoop[122934]
        {
          unknown i[122966] "index var" "insert auto destroy"
          (479768 'end of statement')
          (122968 'move' i[122966] _indexOfInterest[122932])
          (479769 'end of statement' i[122966])
          {
            {
              unknown tmp[122908] "temp"
              (122911 'move' tmp[122908](122910 'addr of' contains[122862]))
              unknown tmp[424795] "maybe param" "temp"
              (424806 'move' tmp[424795] tmp[122908])
              unknown call_tmp[653645] "expr temp" "maybe param" "maybe type" "temp"
              (653648 'move' call_tmp[653645](424808 call _cond_invalid tmp[424795]))
              if call_tmp[653645]
              {
                (424811 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565317] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565318] "maybe param" "temp"
              unknown call_tmp[653650] "expr temp" "maybe param" "maybe type" "temp"
              (653653 'move' call_tmp[653650](424796 call isTrue tmp[424795]))
              (565323 'move' tmp[565318](565321 call _cond_test call_tmp[653650]))
              if tmp[565318]
              {
                unknown tmp[565325] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653657] "expr temp" "maybe param" "maybe type" "temp"
                (653660 'move' call_tmp[653657](122889 call(122885 call (partial) dims _mt[243] super[122665])))
                unknown call_tmp[653662] "expr temp" "maybe param" "maybe type" "temp"
                (653665 'move' call_tmp[653662](122892 call call_tmp[653657] i[122966]))
                unknown call_tmp[653671] "expr temp" "maybe param" "maybe type" "temp"
                (653674 'move' call_tmp[653671](122901 call(122897 call (partial) dims _mt[243] this[126168])))
                unknown call_tmp[653676] "expr temp" "maybe param" "maybe type" "temp"
                (653679 'move' call_tmp[653676](122904 call call_tmp[653671] i[122966]))
                unknown call_tmp[653681] "expr temp" "maybe param" "maybe type" "temp"
                (653684 'move' call_tmp[653681](122906 call(122893 call (partial) contains _mt[243] call_tmp[653662]) call_tmp[653676]))
                (565327 'move' tmp[565325](424799 call isTrue call_tmp[653681]))
                (565332 'move' tmp[565317](565329 '_paramFoldLogical' tmp[565318] tmp[565325]))
              }
              {
                (565337 'move' tmp[565317](565334 '_paramFoldLogical' tmp[565318] 0))
              }
              (122916 call = tmp[122908] tmp[565317])
              (479772 'end of statement' i[122966] i[122966])
            }
            unknown call_tmp[653686] "expr temp" "maybe param" "maybe type" "temp"
            (653689 'move' call_tmp[653686](122922 call == contains[122862] 0))
            unknown call_tmp[653691] "expr temp" "maybe param" "maybe type" "temp"
            (653694 'move' call_tmp[653691](122927 call _cond_test call_tmp[653686]))
            if call_tmp[653691]
            {
              break _breakLabel[122938] _breakLabel[122938]
            }
          }
          label _continueLabel[122937]
          _indexOfInterest[122932]
          _iterator[122933]
        }
        label _breakLabel[122938]
      }
      (517108 'move' ret[517103](517107 'deref' contains[122862]))
      gotoReturn _end_isSubset[517101] _end_isSubset[517101]
      (479775 'end of statement' contains[122862])
    }
    function chpl__loopexpr_iter4[582147](arg iterator[582149]:_any[178](?), arg super[582285]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582296] "RVV" "temp"
      {
        unknown _indexOfInterest[582154] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582155] "expr temp" "temp"
        (582164 'move' _iterator[582155](582162 call _getIterator iterator[582149]))
        Defer
        {
          {
            (582178 call _freeIterator _iterator[582155])
          }
        }
        { scopeless type
          (582169 'move' _indexOfInterest[582154](582166 call iteratorIndex _iterator[582155]))
        }
        ForLoop[582156] for-expr
        {
          unknown i[122999] "index var" "insert auto destroy" "no doc"
          (582289 'end of statement')
          (582173 'move' i[122999] _indexOfInterest[582154])
          (582290 'end of statement' i[122999])
          {
            {
              unknown yret[582300] "YVV" "temp"
              unknown call_tmp[582309] "expr temp" "maybe param" "maybe type" "temp"
              (582312 'move' call_tmp[582309](122996 call(122991 call (partial) contains _mt[243] super[582285]) i[122999]))
              (582303 'move' yret[582300](582302 'deref' call_tmp[582309]))
              (582305 yield yret[582300])
              (582292 'end of statement' i[122999])
            }
          }
          label _continueLabel[582159]
          _indexOfInterest[582154]
          _iterator[582155]
        }
        label _breakLabel[582160]
      }
      (582298 return ret[582296])
    }
    function chpl__loopexpr_iter4[582185](param arg tag[582189]:iterKind[453], arg iterator[582192]:_any[178](?), arg super[582213]:_any[178](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582339] "RVV" "temp"
      const _leaderIterator[582204] "const" "expr temp" "temp"
      (582209 'move' _leaderIterator[582204](582206 call _toLeader iterator[582192]))
      (582344 'move' ret[582339](582343 'deref' _leaderIterator[582204]))
      (582341 return ret[582339])
    }
    where {
      unknown tmp[582315] "maybe param" "temp"
      (582326 'move' tmp[582315](582194 call == tag[582189] leader[447]))
      unknown call_tmp[582373] "expr temp" "maybe param" "maybe type" "temp"
      (582376 'move' call_tmp[582373](582328 call _cond_invalid tmp[582315]))
      if call_tmp[582373]
      {
        (582331 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582346] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582347] "maybe param" "temp"
      unknown call_tmp[582378] "expr temp" "maybe param" "maybe type" "temp"
      (582381 'move' call_tmp[582378](582316 call isTrue tmp[582315]))
      (582352 'move' tmp[582347](582350 call _cond_test call_tmp[582378]))
      if tmp[582347]
      {
        unknown tmp[582354] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582383] "expr temp" "maybe param" "maybe type" "temp"
        (582386 'move' call_tmp[582383](582198 'call resolves' "_toLeader" iterator[582192]))
        (582356 'move' tmp[582354](582319 call isTrue call_tmp[582383]))
        (582361 'move' tmp[582346](582358 '_paramFoldLogical' tmp[582347] tmp[582354]))
      }
      {
        (582366 'move' tmp[582346](582363 '_paramFoldLogical' tmp[582347] 0))
      }
      (748463 call chpl_statementLevelSymbol tmp[582346])
    }
    function chpl__loopexpr_iter4[582215](param arg tag[582219]:iterKind[453], arg followThis[582222]:_any[178](?), arg iterator[582224]:_any[178](?), arg super[582283]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582397] "RVV" "temp"
      const _followerIterator[582231] "const" "expr temp" "temp"
      (582237 'move' _followerIterator[582231](582233 call _toFollower iterator[582224] followThis[582222]))
      {
        unknown _indexOfInterest[582252] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582253] "expr temp" "temp"
        (582262 'move' _iterator[582253](582260 call _getIterator _followerIterator[582231]))
        Defer
        {
          {
            (582276 call _freeIterator _iterator[582253])
          }
        }
        { scopeless type
          (582267 'move' _indexOfInterest[582252](582264 call iteratorIndex _iterator[582253]))
        }
        ForLoop[582254] lowered-forall for-expr
        {
          unknown i[582239] "index var" "insert auto destroy" "no doc"
          (582390 'end of statement')
          (582271 'move' i[582239] _indexOfInterest[582252])
          (582391 'end of statement' i[582239])
          {
            {
              unknown yret[582401] "YVV" "temp"
              unknown call_tmp[582410] "expr temp" "maybe param" "maybe type" "temp"
              (582413 'move' call_tmp[582410](582248 call(582245 call (partial) contains _mt[243] super[582283]) i[582239]))
              (582404 'move' yret[582401](582403 'deref' call_tmp[582410]))
              (582406 yield yret[582401])
              (582393 'end of statement' i[582239])
            }
          }
          label _continueLabel[582257]
          _indexOfInterest[582252]
          _iterator[582253]
        }
        label _breakLabel[582258]
      }
      (582399 return ret[582397])
    }
    where {
      (582227 call == tag[582219] follower[449])
    }
    function chpl__forallexpr4[582127](arg iterExpr[582130]:_any[178](?), arg super[582134]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582418] "RVV" "temp"
      unknown _iterator[582137] "expr temp" "maybe ref" "temp"
      (582139 'move' _iterator[582137] iterExpr[582130])
      unknown call_tmp[582425] "expr temp" "maybe param" "maybe type" "temp"
      (582428 'move' call_tmp[582425](582142 call chpl__loopexpr_iter4 _iterator[582137] super[582134]))
      (582423 'move' ret[582418](582422 'deref' call_tmp[582425]))
      (582420 return ret[582418])
    }
    unknown call_tmp[582430] "expr temp" "maybe param" "maybe type" "temp"
    (582433 'move' call_tmp[582430](582132 call chpl__forallexpr4 this[126168] super[122665]))
    (582437 'iterator record set shape' call_tmp[582430] this[126168] 0)
    unknown call_tmp[653696] "expr temp" "maybe param" "maybe type" "temp"
    (653699 'move' call_tmp[653696](123001 'reduce' LogicalAndReduceScanOp[376676](?) call_tmp[582430] 0))
    (517113 'move' ret[517103](517112 'deref' call_tmp[653696]))
    label _end_isSubset[517101]
    (517105 return ret[517103])
  }
  function _domain[125914](?).isSuper[123013](arg _mt[126174]:_MT[238], arg this[126172]:_domain[125914](?), arg sub[123010]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517117] "RVV" "temp"
    unknown tmp[424816] "maybe param" "temp"
    (424827 'move' tmp[424816](123018 call isAssociativeDom this[126172]))
    unknown call_tmp[653701] "expr temp" "maybe param" "maybe type" "temp"
    (653704 'move' call_tmp[653701](424829 call _cond_invalid tmp[424816]))
    if call_tmp[653701]
    {
      (424832 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565344] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565345] "maybe param" "temp"
    unknown call_tmp[653706] "expr temp" "maybe param" "maybe type" "temp"
    (653709 'move' call_tmp[653706](424817 call isTrue tmp[424816]))
    (565350 'move' tmp[565345](565348 call _cond_test call_tmp[653706]))
    if tmp[565345]
    {
      (565355 'move' tmp[565344](565352 '_paramFoldLogical' tmp[565345] 1))
    }
    {
      unknown tmp[565357] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[653711] "expr temp" "maybe param" "maybe type" "temp"
      (653714 'move' call_tmp[653711](123022 call isRectangularDom this[126172]))
      (565359 'move' tmp[565357](424821 call isTrue call_tmp[653711]))
      (565364 'move' tmp[565344](565361 '_paramFoldLogical' tmp[565345] tmp[565357]))
    }
    unknown call_tmp[653716] "expr temp" "maybe param" "maybe type" "temp"
    (653719 'move' call_tmp[653716](123025 call ! tmp[565344]))
    unknown call_tmp[653721] "expr temp" "maybe param" "maybe type" "temp"
    (653724 'move' call_tmp[653721](123082 call _cond_test call_tmp[653716]))
    if call_tmp[653721]
    {
      unknown call_tmp[653726] "expr temp" "maybe param" "maybe type" "temp"
      (653729 'move' call_tmp[653726](123030 call isSparseDom this[126172]))
      unknown call_tmp[653731] "expr temp" "maybe param" "maybe type" "temp"
      (653734 'move' call_tmp[653731](123075 call _cond_test call_tmp[653726]))
      if call_tmp[653731]
      {
        (123050 call compilerError "isSuper not supported on sparse domains")
      }
      {
        unknown call_tmp[653736] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (653739 'move' call_tmp[653736](123072 'typeof' this[126172]))
        (123073 call compilerError "isSuper not supported on the domain type " call_tmp[653736])
      }
    }
    unknown call_tmp[653741] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653744 'move' call_tmp[653741](123088 'typeof' sub[123010]))
    unknown call_tmp[653746] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (653749 'move' call_tmp[653746](123090 'typeof' this[126172]))
    unknown call_tmp[653751] "expr temp" "maybe param" "maybe type" "temp"
    (653754 'move' call_tmp[653751](123091 call != call_tmp[653741] call_tmp[653746]))
    unknown call_tmp[653756] "expr temp" "maybe param" "maybe type" "temp"
    (653759 'move' call_tmp[653756](123199 call _cond_test call_tmp[653751]))
    if call_tmp[653756]
    {
      unknown call_tmp[653761] "expr temp" "maybe param" "maybe type" "temp"
      (653764 'move' call_tmp[653761](123096 call isRectangularDom this[126172]))
      unknown call_tmp[653766] "expr temp" "maybe param" "maybe type" "temp"
      (653769 'move' call_tmp[653766](123194 call _cond_test call_tmp[653761]))
      if call_tmp[653766]
      {
        unknown call_tmp[653773] "expr temp" "maybe param" "maybe type" "temp"
        (653776 'move' call_tmp[653773](123098 call rank _mt[243] sub[123010]))
        unknown call_tmp[653780] "expr temp" "maybe param" "maybe type" "temp"
        (653783 'move' call_tmp[653780](123102 call rank _mt[243] this[126172]))
        unknown call_tmp[653785] "expr temp" "maybe param" "maybe type" "temp"
        (653788 'move' call_tmp[653785](123105 call != call_tmp[653773] call_tmp[653780]))
        unknown call_tmp[653790] "expr temp" "maybe param" "maybe type" "temp"
        (653793 'move' call_tmp[653790](123166 call _cond_test call_tmp[653785]))
        if call_tmp[653790]
        {
          (123126 call compilerError "rank mismatch in domain.isSuper()")
        }
        {
          { scopeless type
            unknown call_type_tmp[492227] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653797] "expr temp" "maybe param" "maybe type" "temp"
            (653800 'move' call_tmp[653797](123129 call low _mt[243] sub[123010]))
            (492231 'move' call_type_tmp[492227](123132 'typeof' call_tmp[653797]))
          }
          { scopeless type
            unknown call_type_tmp[492233] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[653804] "expr temp" "maybe param" "maybe type" "temp"
            (653807 'move' call_tmp[653804](123134 call low _mt[243] this[126172]))
            (492237 'move' call_type_tmp[492233](123137 'typeof' call_tmp[653804]))
          }
          unknown call_tmp[653809] "expr temp" "maybe param" "maybe type" "temp"
          (653812 'move' call_tmp[653809](123138 call != call_type_tmp[492227] call_type_tmp[492233]))
          unknown call_tmp[653814] "expr temp" "maybe param" "maybe type" "temp"
          (653817 'move' call_tmp[653814](123161 call _cond_test call_tmp[653809]))
          if call_tmp[653814]
          {
            (123159 call compilerError "isSuper called with different index types")
          }
        }
      }
      {
        (123192 call compilerError "isSuper called with different associative domain types")
      }
    }
    unknown call_tmp[653819] "expr temp" "maybe param" "maybe type" "temp"
    (653822 'move' call_tmp[653819](123207 call isRectangularDom this[126172]))
    unknown call_tmp[653824] "expr temp" "maybe param" "maybe type" "temp"
    (653827 'move' call_tmp[653824](123330 call _cond_test call_tmp[653819]))
    if call_tmp[653824]
    {
      unknown contains[123209] "dead at end of block" "insert auto destroy"
      (542941 'init var' contains[123209] 1)
      (123212 'end of statement')
      {
        unknown _indexOfInterest[123279] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123280] "expr temp" "temp"
        unknown call_tmp[653831] "expr temp" "maybe param" "maybe type" "temp"
        (653834 'move' call_tmp[653831](123301 call(123298 call (partial) dims _mt[243] this[126172])))
        unknown call_tmp[653838] "expr temp" "maybe param" "maybe type" "temp"
        (653841 'move' call_tmp[653838](123296 call size _mt[243] call_tmp[653831]))
        unknown call_tmp[653843] "expr temp" "maybe param" "maybe type" "temp"
        (653846 'move' call_tmp[653843](123294 call - call_tmp[653838] 1))
        unknown call_tmp[653848] "expr temp" "maybe param" "maybe type" "temp"
        (653851 'move' call_tmp[653848](123304 call chpl_direct_range_iter 0 call_tmp[653843] 1))
        (123289 'move' _iterator[123280](123287 call _getIterator call_tmp[653848]))
        Defer
        {
          {
            (123320 call _freeIterator _iterator[123280])
          }
        }
        { scopeless type
          (123309 'move' _indexOfInterest[123279](123306 call iteratorIndex _iterator[123280]))
        }
        ForLoop[123281]
        {
          unknown i[123313] "index var" "insert auto destroy"
          (479785 'end of statement')
          (123315 'move' i[123313] _indexOfInterest[123279])
          (479786 'end of statement' i[123313])
          {
            {
              unknown tmp[123255] "temp"
              (123258 'move' tmp[123255](123257 'addr of' contains[123209]))
              unknown tmp[424837] "maybe param" "temp"
              (424848 'move' tmp[424837] tmp[123255])
              unknown call_tmp[653853] "expr temp" "maybe param" "maybe type" "temp"
              (653856 'move' call_tmp[653853](424850 call _cond_invalid tmp[424837]))
              if call_tmp[653853]
              {
                (424853 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[565371] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[565372] "maybe param" "temp"
              unknown call_tmp[653858] "expr temp" "maybe param" "maybe type" "temp"
              (653861 'move' call_tmp[653858](424838 call isTrue tmp[424837]))
              (565377 'move' tmp[565372](565375 call _cond_test call_tmp[653858]))
              if tmp[565372]
              {
                unknown tmp[565379] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[653865] "expr temp" "maybe param" "maybe type" "temp"
                (653868 'move' call_tmp[653865](123236 call(123232 call (partial) dims _mt[243] this[126172])))
                unknown call_tmp[653870] "expr temp" "maybe param" "maybe type" "temp"
                (653873 'move' call_tmp[653870](123239 call call_tmp[653865] i[123313]))
                unknown call_tmp[653879] "expr temp" "maybe param" "maybe type" "temp"
                (653882 'move' call_tmp[653879](123248 call(123244 call (partial) dims _mt[243] sub[123010])))
                unknown call_tmp[653884] "expr temp" "maybe param" "maybe type" "temp"
                (653887 'move' call_tmp[653884](123251 call call_tmp[653879] i[123313]))
                unknown call_tmp[653889] "expr temp" "maybe param" "maybe type" "temp"
                (653892 'move' call_tmp[653889](123253 call(123240 call (partial) contains _mt[243] call_tmp[653870]) call_tmp[653884]))
                (565381 'move' tmp[565379](424841 call isTrue call_tmp[653889]))
                (565386 'move' tmp[565371](565383 '_paramFoldLogical' tmp[565372] tmp[565379]))
              }
              {
                (565391 'move' tmp[565371](565388 '_paramFoldLogical' tmp[565372] 0))
              }
              (123263 call = tmp[123255] tmp[565371])
              (479789 'end of statement' i[123313] i[123313])
            }
            unknown call_tmp[653894] "expr temp" "maybe param" "maybe type" "temp"
            (653897 'move' call_tmp[653894](123269 call == contains[123209] 0))
            unknown call_tmp[653899] "expr temp" "maybe param" "maybe type" "temp"
            (653902 'move' call_tmp[653899](123274 call _cond_test call_tmp[653894]))
            if call_tmp[653899]
            {
              break _breakLabel[123285] _breakLabel[123285]
            }
          }
          label _continueLabel[123284]
          _indexOfInterest[123279]
          _iterator[123280]
        }
        label _breakLabel[123285]
      }
      (517122 'move' ret[517117](517121 'deref' contains[123209]))
      gotoReturn _end_isSuper[517115] _end_isSuper[517115]
      (479792 'end of statement' contains[123209])
    }
    function chpl__loopexpr_iter5[582459](arg iterator[582461]:_any[178](?), arg this[582597]:_domain[125914](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582608] "RVV" "temp"
      {
        unknown _indexOfInterest[582466] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582467] "expr temp" "temp"
        (582476 'move' _iterator[582467](582474 call _getIterator iterator[582461]))
        Defer
        {
          {
            (582490 call _freeIterator _iterator[582467])
          }
        }
        { scopeless type
          (582481 'move' _indexOfInterest[582466](582478 call iteratorIndex _iterator[582467]))
        }
        ForLoop[582468] for-expr
        {
          unknown i[123346] "index var" "insert auto destroy" "no doc"
          (582601 'end of statement')
          (582485 'move' i[123346] _indexOfInterest[582466])
          (582602 'end of statement' i[123346])
          {
            {
              unknown yret[582612] "YVV" "temp"
              unknown call_tmp[582621] "expr temp" "maybe param" "maybe type" "temp"
              (582624 'move' call_tmp[582621](123343 call(123338 call (partial) contains _mt[243] this[582597]) i[123346]))
              (582615 'move' yret[582612](582614 'deref' call_tmp[582621]))
              (582617 yield yret[582612])
              (582604 'end of statement' i[123346])
            }
          }
          label _continueLabel[582471]
          _indexOfInterest[582466]
          _iterator[582467]
        }
        label _breakLabel[582472]
      }
      (582610 return ret[582608])
    }
    function chpl__loopexpr_iter5[582497](param arg tag[582501]:iterKind[453], arg iterator[582504]:_any[178](?), arg this[582525]:_domain[125914](?)) : _unknown[51] "fn returns iterator"
    {
      unknown ret[582651] "RVV" "temp"
      const _leaderIterator[582516] "const" "expr temp" "temp"
      (582521 'move' _leaderIterator[582516](582518 call _toLeader iterator[582504]))
      (582656 'move' ret[582651](582655 'deref' _leaderIterator[582516]))
      (582653 return ret[582651])
    }
    where {
      unknown tmp[582627] "maybe param" "temp"
      (582638 'move' tmp[582627](582506 call == tag[582501] leader[447]))
      unknown call_tmp[582685] "expr temp" "maybe param" "maybe type" "temp"
      (582688 'move' call_tmp[582685](582640 call _cond_invalid tmp[582627]))
      if call_tmp[582685]
      {
        (582643 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[582658] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[582659] "maybe param" "temp"
      unknown call_tmp[582690] "expr temp" "maybe param" "maybe type" "temp"
      (582693 'move' call_tmp[582690](582628 call isTrue tmp[582627]))
      (582664 'move' tmp[582659](582662 call _cond_test call_tmp[582690]))
      if tmp[582659]
      {
        unknown tmp[582666] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[582695] "expr temp" "maybe param" "maybe type" "temp"
        (582698 'move' call_tmp[582695](582510 'call resolves' "_toLeader" iterator[582504]))
        (582668 'move' tmp[582666](582631 call isTrue call_tmp[582695]))
        (582673 'move' tmp[582658](582670 '_paramFoldLogical' tmp[582659] tmp[582666]))
      }
      {
        (582678 'move' tmp[582658](582675 '_paramFoldLogical' tmp[582659] 0))
      }
      (748465 call chpl_statementLevelSymbol tmp[582658])
    }
    function chpl__loopexpr_iter5[582527](param arg tag[582531]:iterKind[453], arg followThis[582534]:_any[178](?), arg iterator[582536]:_any[178](?), arg this[582595]:_domain[125914](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582709] "RVV" "temp"
      const _followerIterator[582543] "const" "expr temp" "temp"
      (582549 'move' _followerIterator[582543](582545 call _toFollower iterator[582536] followThis[582534]))
      {
        unknown _indexOfInterest[582564] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582565] "expr temp" "temp"
        (582574 'move' _iterator[582565](582572 call _getIterator _followerIterator[582543]))
        Defer
        {
          {
            (582588 call _freeIterator _iterator[582565])
          }
        }
        { scopeless type
          (582579 'move' _indexOfInterest[582564](582576 call iteratorIndex _iterator[582565]))
        }
        ForLoop[582566] lowered-forall for-expr
        {
          unknown i[582551] "index var" "insert auto destroy" "no doc"
          (582702 'end of statement')
          (582583 'move' i[582551] _indexOfInterest[582564])
          (582703 'end of statement' i[582551])
          {
            {
              unknown yret[582713] "YVV" "temp"
              unknown call_tmp[582722] "expr temp" "maybe param" "maybe type" "temp"
              (582725 'move' call_tmp[582722](582560 call(582557 call (partial) contains _mt[243] this[582595]) i[582551]))
              (582716 'move' yret[582713](582715 'deref' call_tmp[582722]))
              (582718 yield yret[582713])
              (582705 'end of statement' i[582551])
            }
          }
          label _continueLabel[582569]
          _indexOfInterest[582564]
          _iterator[582565]
        }
        label _breakLabel[582570]
      }
      (582711 return ret[582709])
    }
    where {
      (582539 call == tag[582531] follower[449])
    }
    function chpl__forallexpr5[582439](arg iterExpr[582442]:_any[178](?), arg this[582446]:_domain[125914](?)) : _unknown[51] "compiler generated" "compiler nested function" "maybe array type" "fn returns iterator"
    {
      unknown ret[582730] "RVV" "temp"
      unknown _iterator[582449] "expr temp" "maybe ref" "temp"
      (582451 'move' _iterator[582449] iterExpr[582442])
      unknown call_tmp[582737] "expr temp" "maybe param" "maybe type" "temp"
      (582740 'move' call_tmp[582737](582454 call chpl__loopexpr_iter5 _iterator[582449] this[582446]))
      (582735 'move' ret[582730](582734 'deref' call_tmp[582737]))
      (582732 return ret[582730])
    }
    unknown call_tmp[582742] "expr temp" "maybe param" "maybe type" "temp"
    (582745 'move' call_tmp[582742](582444 call chpl__forallexpr5 sub[123010] this[126172]))
    (582749 'iterator record set shape' call_tmp[582742] sub[123010] 0)
    unknown call_tmp[653904] "expr temp" "maybe param" "maybe type" "temp"
    (653907 'move' call_tmp[653904](123348 'reduce' LogicalAndReduceScanOp[376676](?) call_tmp[582742] 0))
    (517127 'move' ret[517117](517126 'deref' call_tmp[653904]))
    label _end_isSuper[517115]
    (517119 return ret[517117])
  }
  function _domain[125914](?).indexOrder[123358](arg _mt[126178]:_MT[238], arg this[126176]:_domain[125914](?), arg i[123356]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517131] "RVV" "temp"
    unknown call_tmp[653911] "expr temp" "maybe param" "maybe type" "temp"
    (653914 'move' call_tmp[653911](359575 call _value _mt[243] this[126176]))
    unknown call_tmp[653920] "expr temp" "maybe param" "maybe type" "temp"
    (653923 'move' call_tmp[653920](383108 call rank _mt[243] this[126176]))
    unknown call_tmp[653925] "expr temp" "maybe param" "maybe type" "temp"
    (653928 'move' call_tmp[653925](123370 call _makeIndexTuple call_tmp[653920] i[123356]))
    unknown call_tmp[653930] "expr temp" "maybe param" "maybe type" "temp"
    (653933 'move' call_tmp[653930](123372 call(123363 call (partial) dsiIndexOrder _mt[243] call_tmp[653911]) call_tmp[653925]))
    (517136 'move' ret[517131](517135 'deref' call_tmp[653930]))
    (517133 return ret[517131])
  }
  function _domain[125914](?).position[123382](arg _mt[126182]:_MT[238], arg this[126180]:_domain[125914](?), arg i[123380]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517140] "RVV" "temp"
    unknown call_tmp[653937] "expr temp" "maybe param" "maybe type" "temp"
    (653940 'move' call_tmp[653937](383113 call rank _mt[243] this[126180]))
    unknown call_tmp[653942] "maybe param" "maybe type" "temp"
    (653945 'move' call_tmp[653942](123388 call _makeIndexTuple call_tmp[653937] i[123380]))
    unknown ind[123389] "dead at end of block" "insert auto destroy"
    (542943 'init var' ind[123389] call_tmp[653942])
    unknown pos[123396] "dead at end of block" "insert auto destroy"
    unknown call_tmp[653949] "expr temp" "maybe param" "maybe type" "temp"
    (653952 'move' call_tmp[653949](383118 call rank _mt[243] this[126180]))
    unknown call_tmp[653956] "expr temp" "maybe param" "maybe type" "temp"
    (653959 'move' call_tmp[653956](383122 call intIdxType _mt[243] this[126180]))
    unknown call_tmp[653961] "expr temp" "maybe param" "maybe type" "temp"
    (653964 'move' call_tmp[653961](123394 call * call_tmp[653949] call_tmp[653956]))
    (542945 'default init var' pos[123396] call_tmp[653961])
    (123399 'end of statement')
    {
      unknown _indexOfInterest[123432] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123433] "expr temp" "temp"
      unknown call_tmp[653968] "expr temp" "maybe param" "maybe type" "temp"
      (653971 'move' call_tmp[653968](383131 call rank _mt[243] this[126180]))
      unknown call_tmp[653973] "expr temp" "maybe param" "maybe type" "temp"
      (653976 'move' call_tmp[653973](123447 call - call_tmp[653968] 1))
      unknown call_tmp[653978] "expr temp" "maybe param" "maybe type" "temp"
      (653981 'move' call_tmp[653978](123450 call chpl_direct_range_iter 0 call_tmp[653973] 1))
      (123442 'move' _iterator[123433](123440 call _getIterator call_tmp[653978]))
      Defer
      {
        {
          (123466 call _freeIterator _iterator[123433])
        }
      }
      { scopeless type
        (123455 'move' _indexOfInterest[123432](123452 call iteratorIndex _iterator[123433]))
      }
      ForLoop[123434]
      {
        unknown d[123459] "index var" "insert auto destroy"
        (479797 'end of statement')
        (123461 'move' d[123459] _indexOfInterest[123432])
        (479798 'end of statement' d[123459])
        unknown call_tmp[653983] "expr temp" "maybe param" "maybe type" "temp"
        (653986 'move' call_tmp[653983](123412 call pos[123396] d[123459]))
        unknown call_tmp[653990] "expr temp" "maybe param" "maybe type" "temp"
        (653993 'move' call_tmp[653990](359579 call _value _mt[243] this[126180]))
        unknown call_tmp[653997] "expr temp" "maybe param" "maybe type" "temp"
        (654000 'move' call_tmp[653997](123419 call(123414 call (partial) dsiDim _mt[243] call_tmp[653990]) d[123459]))
        unknown call_tmp[654004] "expr temp" "maybe param" "maybe type" "temp"
        (654007 'move' call_tmp[654004](123426 call ind[123389] d[123459]))
        unknown call_tmp[654009] "expr temp" "maybe param" "maybe type" "temp"
        (654012 'move' call_tmp[654009](123428 call(123420 call (partial) indexOrder _mt[243] call_tmp[653997]) call_tmp[654004]))
        (123429 call = call_tmp[653983] call_tmp[654009])
        (479800 'end of statement' pos[123396] d[123459] d[123459] ind[123389] d[123459])
        label _continueLabel[123437]
        _indexOfInterest[123432]
        _iterator[123433]
      }
      label _breakLabel[123438]
    }
    (517145 'move' ret[517140](517144 'deref' pos[123396]))
    gotoReturn _end_position[517138] _end_position[517138]
    (479806 'end of statement' pos[123396])
    label _end_position[517138]
    (517142 return ret[517140])
  }
  function _domain[125914](?).expand[123487](arg _mt[126186]:_MT[238], arg this[126184]:_domain[125914](?), arg off[123484] :
  unknown call_tmp[654016] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654028] "expr temp" "maybe param" "maybe type" "temp"
    (654031 'move' call_tmp[654028](123498 call isAssociativeDom this[126184]))
    unknown call_tmp[654033] "expr temp" "maybe param" "maybe type" "temp"
    (654036 'move' call_tmp[654033](123572 call _cond_test call_tmp[654028]))
    if call_tmp[654033]
    {
      (123518 call compilerError "expand not supported on associative domains")
    }
    {
      unknown call_tmp[654038] "expr temp" "maybe param" "maybe type" "temp"
      (654041 'move' call_tmp[654038](123523 call isSparseDom this[126184]))
      unknown call_tmp[654043] "expr temp" "maybe param" "maybe type" "temp"
      (654046 'move' call_tmp[654043](123566 call _cond_test call_tmp[654038]))
      if call_tmp[654043]
      {
        (123543 call compilerError "expand not supported on sparse domains")
      }
      {
        (123564 call compilerError "expand not supported on this domain type")
      }
    }
    (517149 return _void[55])
  }
  where {
    unknown call_tmp[654048] "expr temp" "maybe param" "maybe type" "temp"
    (654051 'move' call_tmp[654048](123492 call isRectangularDom this[126184]))
    (123493 call ! call_tmp[654048])
  }
  function _domain[125914](?).expand[123590](arg _mt[126190]:_MT[238], arg this[126188]:_domain[125914](?), arg off[123586] ... :
  (383147 call intIdxType _mt[243] this[126188])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517153] "RVV" "temp"
    unknown call_tmp[654059] "expr temp" "maybe param" "maybe type" "temp"
    (654062 'move' call_tmp[654059](123595 call(383155 call (partial) expand _mt[243] this[126188]) off[123586]))
    (517158 'move' ret[517153](517157 'deref' call_tmp[654059]))
    (517155 return ret[517153])
  }
  function _domain[125914](?).expand[123610](arg _mt[126194]:_MT[238], arg this[126192]:_domain[125914](?), arg off[123607] :
  unknown call_tmp[654066] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517162] "RVV" "temp"
    unknown call_tmp[654080] "maybe param" "maybe type" "temp"
    (654083 'move' call_tmp[654080](123614 call(383168 call (partial) dims _mt[243] this[126192])))
    unknown ranges[123615] "dead at end of block" "insert auto destroy"
    (542947 'init var' ranges[123615] call_tmp[654080])
    (123618 'end of statement')
    {
      unknown _indexOfInterest[123711] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123712] "expr temp" "temp"
      unknown call_tmp[654087] "expr temp" "maybe param" "maybe type" "temp"
      (654090 'move' call_tmp[654087](383183 call rank _mt[243] this[126192]))
      unknown call_tmp[654092] "expr temp" "maybe param" "maybe type" "temp"
      (654095 'move' call_tmp[654092](123726 call - call_tmp[654087] 1))
      unknown call_tmp[654097] "expr temp" "maybe param" "maybe type" "temp"
      (654100 'move' call_tmp[654097](123729 call chpl_direct_range_iter 0 call_tmp[654092] 1))
      (123721 'move' _iterator[123712](123719 call _getIterator call_tmp[654097]))
      Defer
      {
        {
          (123745 call _freeIterator _iterator[123712])
        }
      }
      { scopeless type
        (123734 'move' _indexOfInterest[123711](123731 call iteratorIndex _iterator[123712]))
      }
      ForLoop[123713]
      {
        unknown i[123738] "index var" "insert auto destroy"
        (479813 'end of statement')
        (123740 'move' i[123738] _indexOfInterest[123711])
        (479814 'end of statement' i[123738])
        {
          unknown call_tmp[654102] "expr temp" "maybe param" "maybe type" "temp"
          (654105 'move' call_tmp[654102](123631 call ranges[123615] i[123738]))
          unknown call_tmp[654107] "expr temp" "maybe param" "maybe type" "temp"
          (654110 'move' call_tmp[654107](123635 call ranges[123615] i[123738]))
          unknown call_tmp[654114] "expr temp" "maybe param" "maybe type" "temp"
          (654117 'move' call_tmp[654114](123644 call off[123607] i[123738]))
          unknown call_tmp[654119] "expr temp" "maybe param" "maybe type" "temp"
          (654122 'move' call_tmp[654119](123646 call(123638 call (partial) expand _mt[243] call_tmp[654107]) call_tmp[654114]))
          (123647 call = call_tmp[654102] call_tmp[654119])
          (479816 'end of statement' ranges[123615] i[123738] ranges[123615] i[123738] i[123738])
          unknown call_tmp[654124] "expr temp" "maybe param" "maybe type" "temp"
          (654127 'move' call_tmp[654124](123654 call ranges[123615] i[123738]))
          unknown call_tmp[654131] "expr temp" "maybe param" "maybe type" "temp"
          (654134 'move' call_tmp[654131](123655 call low _mt[243] call_tmp[654124]))
          unknown call_tmp[654136] "expr temp" "maybe param" "maybe type" "temp"
          (654139 'move' call_tmp[654136](123661 call ranges[123615] i[123738]))
          unknown call_tmp[654143] "expr temp" "maybe param" "maybe type" "temp"
          (654146 'move' call_tmp[654143](123662 call high _mt[243] call_tmp[654136]))
          unknown call_tmp[654148] "expr temp" "maybe param" "maybe type" "temp"
          (654151 'move' call_tmp[654148](123665 call > call_tmp[654131] call_tmp[654143]))
          unknown call_tmp[654153] "expr temp" "maybe param" "maybe type" "temp"
          (654156 'move' call_tmp[654153](123707 call _cond_test call_tmp[654148]))
          if call_tmp[654153]
          {
            (123704 call halt "***Error: Degenerate dimension created in dimension " i[123738] "***")
            (479822 'end of statement' i[123738])
          }
        }
        label _continueLabel[123716]
        _indexOfInterest[123711]
        _iterator[123712]
      }
      label _breakLabel[123717]
    }
    unknown call_tmp[654160] "expr temp" "maybe param" "maybe type" "temp"
    (654163 'move' call_tmp[654160](383188 call dist _mt[243] this[126192]))
    unknown call_tmp[654167] "expr temp" "maybe param" "maybe type" "temp"
    (654170 'move' call_tmp[654167](383192 call rank _mt[243] this[126192]))
    unknown call_tmp[654174] "expr temp" "maybe param" "maybe type" "temp"
    (654177 'move' call_tmp[654174](359583 call _value _mt[243] this[126192]))
    unknown call_tmp[654181] "expr temp" "maybe param" "maybe type" "temp"
    (654184 'move' call_tmp[654181](123758 call idxType _mt[243] call_tmp[654174]))
    unknown call_tmp[654188] "expr temp" "maybe param" "maybe type" "temp"
    (654191 'move' call_tmp[654188](383196 call stridable _mt[243] this[126192]))
    unknown call_tmp[654193] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654196 'move' call_tmp[654193](747914 'new' _domain[125914](?) call_tmp[654160] call_tmp[654167] call_tmp[654181] call_tmp[654188] ranges[123615]))
    (517167 'move' ret[517162](517166 'deref' call_tmp[654193]))
    gotoReturn _end_expand[517160] _end_expand[517160]
    (479824 'end of statement' ranges[123615])
    label _end_expand[517160]
    (517164 return ret[517162])
  }
  function _domain[125914](?).expand[123774](arg _mt[126198]:_MT[238], arg this[126196]:_domain[125914](?), arg off[123771] :
  (383201 call intIdxType _mt[243] this[126196])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517173] "RVV" "temp"
    unknown call_tmp[654202] "maybe param" "maybe type" "temp"
    (654205 'move' call_tmp[654202](123782 call(383209 call (partial) dims _mt[243] this[126196])))
    unknown ranges[123783] "dead at end of block" "insert auto destroy"
    (542949 'init var' ranges[123783] call_tmp[654202])
    (123786 'end of statement')
    {
      unknown _indexOfInterest[123813] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123814] "expr temp" "temp"
      unknown call_tmp[654209] "expr temp" "maybe param" "maybe type" "temp"
      (654212 'move' call_tmp[654209](383221 call rank _mt[243] this[126196]))
      unknown call_tmp[654214] "expr temp" "maybe param" "maybe type" "temp"
      (654217 'move' call_tmp[654214](123828 call - call_tmp[654209] 1))
      unknown call_tmp[654219] "expr temp" "maybe param" "maybe type" "temp"
      (654222 'move' call_tmp[654219](123831 call chpl_direct_range_iter 0 call_tmp[654214] 1))
      (123823 'move' _iterator[123814](123821 call _getIterator call_tmp[654219]))
      Defer
      {
        {
          (123847 call _freeIterator _iterator[123814])
        }
      }
      { scopeless type
        (123836 'move' _indexOfInterest[123813](123833 call iteratorIndex _iterator[123814]))
      }
      ForLoop[123815]
      {
        unknown i[123840] "index var" "insert auto destroy"
        (479827 'end of statement')
        (123842 'move' i[123840] _indexOfInterest[123813])
        (479828 'end of statement' i[123840])
        unknown call_tmp[654224] "expr temp" "maybe param" "maybe type" "temp"
        (654227 'move' call_tmp[654224](123799 call ranges[123783] i[123840]))
        unknown call_tmp[654231] "expr temp" "maybe param" "maybe type" "temp"
        (654234 'move' call_tmp[654231](123803 call(383215 call (partial) dim _mt[243] this[126196]) i[123840]))
        unknown call_tmp[654238] "expr temp" "maybe param" "maybe type" "temp"
        (654241 'move' call_tmp[654238](123809 call(123804 call (partial) expand _mt[243] call_tmp[654231]) off[123771]))
        (123810 call = call_tmp[654224] call_tmp[654238])
        (479830 'end of statement' ranges[123783] i[123840] i[123840])
        label _continueLabel[123818]
        _indexOfInterest[123813]
        _iterator[123814]
      }
      label _breakLabel[123819]
    }
    unknown call_tmp[654245] "expr temp" "maybe param" "maybe type" "temp"
    (654248 'move' call_tmp[654245](383226 call dist _mt[243] this[126196]))
    unknown call_tmp[654252] "expr temp" "maybe param" "maybe type" "temp"
    (654255 'move' call_tmp[654252](383230 call rank _mt[243] this[126196]))
    unknown call_tmp[654259] "expr temp" "maybe param" "maybe type" "temp"
    (654262 'move' call_tmp[654259](359587 call _value _mt[243] this[126196]))
    unknown call_tmp[654266] "expr temp" "maybe param" "maybe type" "temp"
    (654269 'move' call_tmp[654266](123860 call idxType _mt[243] call_tmp[654259]))
    unknown call_tmp[654273] "expr temp" "maybe param" "maybe type" "temp"
    (654276 'move' call_tmp[654273](383234 call stridable _mt[243] this[126196]))
    unknown call_tmp[654278] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654281 'move' call_tmp[654278](747915 'new' _domain[125914](?) call_tmp[654245] call_tmp[654252] call_tmp[654266] call_tmp[654273] ranges[123783]))
    (517178 'move' ret[517173](517177 'deref' call_tmp[654278]))
    gotoReturn _end_expand[517171] _end_expand[517171]
    (479834 'end of statement' ranges[123783])
    label _end_expand[517171]
    (517175 return ret[517173])
  }
  where {
    unknown call_tmp[654285] "expr temp" "maybe param" "maybe type" "temp"
    (654288 'move' call_tmp[654285](383205 call rank _mt[243] this[126196]))
    (123778 call > call_tmp[654285] 1)
  }
  function _domain[125914](?).exterior[123880](arg _mt[126202]:_MT[238], arg this[126200]:_domain[125914](?), arg off[123877] :
  unknown call_tmp[654292] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654304] "expr temp" "maybe param" "maybe type" "temp"
    (654307 'move' call_tmp[654304](123891 call isAssociativeDom this[126200]))
    unknown call_tmp[654309] "expr temp" "maybe param" "maybe type" "temp"
    (654312 'move' call_tmp[654309](123965 call _cond_test call_tmp[654304]))
    if call_tmp[654309]
    {
      (123911 call compilerError "exterior not supported on associative domains")
    }
    {
      unknown call_tmp[654314] "expr temp" "maybe param" "maybe type" "temp"
      (654317 'move' call_tmp[654314](123916 call isSparseDom this[126200]))
      unknown call_tmp[654319] "expr temp" "maybe param" "maybe type" "temp"
      (654322 'move' call_tmp[654319](123959 call _cond_test call_tmp[654314]))
      if call_tmp[654319]
      {
        (123936 call compilerError "exterior not supported on sparse domains")
      }
      {
        (123957 call compilerError "exterior not supported on this domain type")
      }
    }
    (517182 return _void[55])
  }
  where {
    unknown call_tmp[654324] "expr temp" "maybe param" "maybe type" "temp"
    (654327 'move' call_tmp[654324](123885 call isRectangularDom this[126200]))
    (123886 call ! call_tmp[654324])
  }
  function _domain[125914](?).exterior[123983](arg _mt[126206]:_MT[238], arg this[126204]:_domain[125914](?), arg off[123979] ... :
  (383250 call intIdxType _mt[243] this[126204])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517186] "RVV" "temp"
    unknown call_tmp[654335] "expr temp" "maybe param" "maybe type" "temp"
    (654338 'move' call_tmp[654335](123988 call(383258 call (partial) exterior _mt[243] this[126204]) off[123979]))
    (517191 'move' ret[517186](517190 'deref' call_tmp[654335]))
    (517188 return ret[517186])
  }
  function _domain[125914](?).exterior[124003](arg _mt[126210]:_MT[238], arg this[126208]:_domain[125914](?), arg off[124000] :
  unknown call_tmp[654342] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517195] "RVV" "temp"
    unknown call_tmp[654356] "maybe param" "maybe type" "temp"
    (654359 'move' call_tmp[654356](124007 call(383271 call (partial) dims _mt[243] this[126208])))
    unknown ranges[124008] "dead at end of block" "insert auto destroy"
    (542951 'init var' ranges[124008] call_tmp[654356])
    (124011 'end of statement')
    {
      unknown _indexOfInterest[124043] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124044] "expr temp" "temp"
      unknown call_tmp[654363] "expr temp" "maybe param" "maybe type" "temp"
      (654366 'move' call_tmp[654363](383284 call rank _mt[243] this[126208]))
      unknown call_tmp[654368] "expr temp" "maybe param" "maybe type" "temp"
      (654371 'move' call_tmp[654368](124058 call - call_tmp[654363] 1))
      unknown call_tmp[654373] "expr temp" "maybe param" "maybe type" "temp"
      (654376 'move' call_tmp[654373](124061 call chpl_direct_range_iter 0 call_tmp[654368] 1))
      (124053 'move' _iterator[124044](124051 call _getIterator call_tmp[654373]))
      Defer
      {
        {
          (124077 call _freeIterator _iterator[124044])
        }
      }
      { scopeless type
        (124066 'move' _indexOfInterest[124043](124063 call iteratorIndex _iterator[124044]))
      }
      ForLoop[124045]
      {
        unknown i[124070] "index var" "insert auto destroy"
        (479841 'end of statement')
        (124072 'move' i[124070] _indexOfInterest[124043])
        (479842 'end of statement' i[124070])
        unknown call_tmp[654378] "expr temp" "maybe param" "maybe type" "temp"
        (654381 'move' call_tmp[654378](124024 call ranges[124008] i[124070]))
        unknown call_tmp[654385] "expr temp" "maybe param" "maybe type" "temp"
        (654388 'move' call_tmp[654385](124028 call(383277 call (partial) dim _mt[243] this[126208]) i[124070]))
        unknown call_tmp[654392] "expr temp" "maybe param" "maybe type" "temp"
        (654395 'move' call_tmp[654392](124037 call off[124000] i[124070]))
        unknown call_tmp[654397] "expr temp" "maybe param" "maybe type" "temp"
        (654400 'move' call_tmp[654397](124039 call(124031 call (partial) exterior _mt[243] call_tmp[654385]) call_tmp[654392]))
        (124040 call = call_tmp[654378] call_tmp[654397])
        (479844 'end of statement' ranges[124008] i[124070] i[124070] i[124070])
        label _continueLabel[124048]
        _indexOfInterest[124043]
        _iterator[124044]
      }
      label _breakLabel[124049]
    }
    unknown call_tmp[654404] "expr temp" "maybe param" "maybe type" "temp"
    (654407 'move' call_tmp[654404](383289 call dist _mt[243] this[126208]))
    unknown call_tmp[654411] "expr temp" "maybe param" "maybe type" "temp"
    (654414 'move' call_tmp[654411](383293 call rank _mt[243] this[126208]))
    unknown call_tmp[654418] "expr temp" "maybe param" "maybe type" "temp"
    (654421 'move' call_tmp[654418](359591 call _value _mt[243] this[126208]))
    unknown call_tmp[654425] "expr temp" "maybe param" "maybe type" "temp"
    (654428 'move' call_tmp[654425](124090 call idxType _mt[243] call_tmp[654418]))
    unknown call_tmp[654432] "expr temp" "maybe param" "maybe type" "temp"
    (654435 'move' call_tmp[654432](383297 call stridable _mt[243] this[126208]))
    unknown call_tmp[654437] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654440 'move' call_tmp[654437](747916 'new' _domain[125914](?) call_tmp[654404] call_tmp[654411] call_tmp[654425] call_tmp[654432] ranges[124008]))
    (517200 'move' ret[517195](517199 'deref' call_tmp[654437]))
    gotoReturn _end_exterior[517193] _end_exterior[517193]
    (479849 'end of statement' ranges[124008])
    label _end_exterior[517193]
    (517197 return ret[517195])
  }
  function _domain[125914](?).exterior[124106](arg _mt[126214]:_MT[238], arg this[126212]:_domain[125914](?), arg off[124103] :
  (383302 call intIdxType _mt[243] this[126212])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517206] "RVV" "temp"
    unknown offTup[124116] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654446] "expr temp" "maybe param" "maybe type" "temp"
    (654449 'move' call_tmp[654446](383310 call rank _mt[243] this[126212]))
    unknown call_tmp[654453] "expr temp" "maybe param" "maybe type" "temp"
    (654456 'move' call_tmp[654453](383314 call intIdxType _mt[243] this[126212]))
    unknown call_tmp[654458] "expr temp" "maybe param" "maybe type" "temp"
    (654461 'move' call_tmp[654458](124114 call * call_tmp[654446] call_tmp[654453]))
    (542953 'default init var' offTup[124116] call_tmp[654458])
    (124119 'end of statement')
    {
      unknown _indexOfInterest[124137] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124138] "expr temp" "temp"
      unknown call_tmp[654465] "expr temp" "maybe param" "maybe type" "temp"
      (654468 'move' call_tmp[654465](383321 call rank _mt[243] this[126212]))
      unknown call_tmp[654470] "expr temp" "maybe param" "maybe type" "temp"
      (654473 'move' call_tmp[654470](124152 call - call_tmp[654465] 1))
      unknown call_tmp[654475] "expr temp" "maybe param" "maybe type" "temp"
      (654478 'move' call_tmp[654475](124155 call chpl_direct_range_iter 0 call_tmp[654470] 1))
      (124147 'move' _iterator[124138](124145 call _getIterator call_tmp[654475]))
      Defer
      {
        {
          (124171 call _freeIterator _iterator[124138])
        }
      }
      { scopeless type
        (124160 'move' _indexOfInterest[124137](124157 call iteratorIndex _iterator[124138]))
      }
      ForLoop[124139]
      {
        unknown i[124164] "index var" "insert auto destroy"
        (479852 'end of statement')
        (124166 'move' i[124164] _indexOfInterest[124137])
        (479853 'end of statement' i[124164])
        unknown call_tmp[654480] "expr temp" "maybe param" "maybe type" "temp"
        (654483 'move' call_tmp[654480](124132 call offTup[124116] i[124164]))
        (124134 call = call_tmp[654480] off[124103])
        (479855 'end of statement' offTup[124116] i[124164])
        label _continueLabel[124142]
        _indexOfInterest[124137]
        _iterator[124138]
      }
      label _breakLabel[124143]
    }
    unknown call_tmp[654487] "expr temp" "maybe param" "maybe type" "temp"
    (654490 'move' call_tmp[654487](124181 call(383325 call (partial) exterior _mt[243] this[126212]) offTup[124116]))
    (517211 'move' ret[517206](517210 'deref' call_tmp[654487]))
    gotoReturn _end_exterior[517204] _end_exterior[517204]
    (479858 'end of statement' offTup[124116])
    label _end_exterior[517204]
    (517208 return ret[517206])
  }
  where {
    unknown call_tmp[654494] "expr temp" "maybe param" "maybe type" "temp"
    (654497 'move' call_tmp[654494](383306 call rank _mt[243] this[126212]))
    (124110 call != call_tmp[654494] 1)
  }
  function _domain[125914](?).interior[124196](arg _mt[126218]:_MT[238], arg this[126216]:_domain[125914](?), arg off[124193] :
  unknown call_tmp[654501] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654513] "expr temp" "maybe param" "maybe type" "temp"
    (654516 'move' call_tmp[654513](124207 call isAssociativeDom this[126216]))
    unknown call_tmp[654518] "expr temp" "maybe param" "maybe type" "temp"
    (654521 'move' call_tmp[654518](124281 call _cond_test call_tmp[654513]))
    if call_tmp[654518]
    {
      (124227 call compilerError "interior not supported on associative domains")
    }
    {
      unknown call_tmp[654523] "expr temp" "maybe param" "maybe type" "temp"
      (654526 'move' call_tmp[654523](124232 call isSparseDom this[126216]))
      unknown call_tmp[654528] "expr temp" "maybe param" "maybe type" "temp"
      (654531 'move' call_tmp[654528](124275 call _cond_test call_tmp[654523]))
      if call_tmp[654528]
      {
        (124252 call compilerError "interior not supported on sparse domains")
      }
      {
        (124273 call compilerError "interior not supported on this domain type")
      }
    }
    (517215 return _void[55])
  }
  where {
    unknown call_tmp[654533] "expr temp" "maybe param" "maybe type" "temp"
    (654536 'move' call_tmp[654533](124201 call isRectangularDom this[126216]))
    (124202 call ! call_tmp[654533])
  }
  function _domain[125914](?).interior[124299](arg _mt[126222]:_MT[238], arg this[126220]:_domain[125914](?), arg off[124295] ... :
  (383341 call intIdxType _mt[243] this[126220])) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517219] "RVV" "temp"
    unknown call_tmp[654544] "expr temp" "maybe param" "maybe type" "temp"
    (654547 'move' call_tmp[654544](124304 call(383349 call (partial) interior _mt[243] this[126220]) off[124295]))
    (517224 'move' ret[517219](517223 'deref' call_tmp[654544]))
    (517221 return ret[517219])
  }
  function _domain[125914](?).interior[124319](arg _mt[126226]:_MT[238], arg this[126224]:_domain[125914](?), arg off[124316] :
  unknown call_tmp[654551] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517228] "RVV" "temp"
    unknown call_tmp[654565] "maybe param" "maybe type" "temp"
    (654568 'move' call_tmp[654565](124323 call(383362 call (partial) dims _mt[243] this[126224])))
    unknown ranges[124324] "dead at end of block" "insert auto destroy"
    (542955 'init var' ranges[124324] call_tmp[654565])
    (124327 'end of statement')
    {
      unknown _indexOfInterest[124461] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124462] "expr temp" "temp"
      unknown call_tmp[654572] "expr temp" "maybe param" "maybe type" "temp"
      (654575 'move' call_tmp[654572](383400 call rank _mt[243] this[126224]))
      unknown call_tmp[654577] "expr temp" "maybe param" "maybe type" "temp"
      (654580 'move' call_tmp[654577](124476 call - call_tmp[654572] 1))
      unknown call_tmp[654582] "expr temp" "maybe param" "maybe type" "temp"
      (654585 'move' call_tmp[654582](124479 call chpl_direct_range_iter 0 call_tmp[654577] 1))
      (124471 'move' _iterator[124462](124469 call _getIterator call_tmp[654582]))
      Defer
      {
        {
          (124495 call _freeIterator _iterator[124462])
        }
      }
      { scopeless type
        (124484 'move' _indexOfInterest[124461](124481 call iteratorIndex _iterator[124462]))
      }
      ForLoop[124463]
      {
        unknown i[124488] "index var" "insert auto destroy"
        (479865 'end of statement')
        (124490 'move' i[124488] _indexOfInterest[124461])
        (479866 'end of statement' i[124488])
        {
          unknown tmp[424858] "maybe param" "temp"
          unknown tmp[424879] "maybe param" "temp"
          unknown call_tmp[654587] "expr temp" "maybe param" "maybe type" "temp"
          (654590 'move' call_tmp[654587](124340 call off[124316] i[124488]))
          (424890 'move' tmp[424879](124342 call > call_tmp[654587] 0))
          unknown call_tmp[654592] "expr temp" "maybe param" "maybe type" "temp"
          (654595 'move' call_tmp[654592](424892 call _cond_invalid tmp[424879]))
          if call_tmp[654592]
          {
            (424895 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[565398] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565399] "maybe param" "temp"
          unknown call_tmp[654597] "expr temp" "maybe param" "maybe type" "temp"
          (654600 'move' call_tmp[654597](424880 call isTrue tmp[424879]))
          (565404 'move' tmp[565399](565402 call _cond_test call_tmp[654597]))
          if tmp[565399]
          {
            unknown tmp[565406] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[654604] "expr temp" "maybe param" "maybe type" "temp"
            (654607 'move' call_tmp[654604](124347 call(383368 call (partial) dim _mt[243] this[126224]) i[124488]))
            unknown call_tmp[654611] "expr temp" "maybe param" "maybe type" "temp"
            (654614 'move' call_tmp[654611](124348 call _high _mt[243] call_tmp[654604]))
            unknown call_tmp[654616] "expr temp" "maybe param" "maybe type" "temp"
            (654619 'move' call_tmp[654616](124352 call + call_tmp[654611] 1))
            unknown call_tmp[654621] "expr temp" "maybe param" "maybe type" "temp"
            (654624 'move' call_tmp[654621](124357 call off[124316] i[124488]))
            unknown call_tmp[654626] "expr temp" "maybe param" "maybe type" "temp"
            (654629 'move' call_tmp[654626](124358 call - call_tmp[654616] call_tmp[654621]))
            unknown call_tmp[654633] "expr temp" "maybe param" "maybe type" "temp"
            (654636 'move' call_tmp[654633](124363 call(383375 call (partial) dim _mt[243] this[126224]) i[124488]))
            unknown call_tmp[654640] "expr temp" "maybe param" "maybe type" "temp"
            (654643 'move' call_tmp[654640](124364 call _low _mt[243] call_tmp[654633]))
            unknown call_tmp[654645] "expr temp" "maybe param" "maybe type" "temp"
            (654648 'move' call_tmp[654645](124367 call < call_tmp[654626] call_tmp[654640]))
            (565408 'move' tmp[565406](424883 call isTrue call_tmp[654645]))
            (565413 'move' tmp[565398](565410 '_paramFoldLogical' tmp[565399] tmp[565406]))
          }
          {
            (565418 'move' tmp[565398](565415 '_paramFoldLogical' tmp[565399] 0))
          }
          (424869 'move' tmp[424858] tmp[565398])
          unknown call_tmp[654650] "expr temp" "maybe param" "maybe type" "temp"
          (654653 'move' call_tmp[654650](424871 call _cond_invalid tmp[424858]))
          if call_tmp[654650]
          {
            (424874 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[565452] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[565453] "maybe param" "temp"
          unknown call_tmp[654655] "expr temp" "maybe param" "maybe type" "temp"
          (654658 'move' call_tmp[654655](424859 call isTrue tmp[424858]))
          (565458 'move' tmp[565453](565456 call _cond_test call_tmp[654655]))
          if tmp[565453]
          {
            (565463 'move' tmp[565452](565460 '_paramFoldLogical' tmp[565453] 1))
          }
          {
            unknown tmp[424900] "maybe param" "temp"
            unknown call_tmp[654660] "expr temp" "maybe param" "maybe type" "temp"
            (654663 'move' call_tmp[654660](124374 call off[124316] i[124488]))
            (424911 'move' tmp[424900](124376 call < call_tmp[654660] 0))
            unknown call_tmp[654665] "expr temp" "maybe param" "maybe type" "temp"
            (654668 'move' call_tmp[654665](424913 call _cond_invalid tmp[424900]))
            if call_tmp[654665]
            {
              (424916 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[565425] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[565426] "maybe param" "temp"
            unknown call_tmp[654670] "expr temp" "maybe param" "maybe type" "temp"
            (654673 'move' call_tmp[654670](424901 call isTrue tmp[424900]))
            (565431 'move' tmp[565426](565429 call _cond_test call_tmp[654670]))
            if tmp[565426]
            {
              unknown tmp[565433] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[654677] "expr temp" "maybe param" "maybe type" "temp"
              (654680 'move' call_tmp[654677](124381 call(383382 call (partial) dim _mt[243] this[126224]) i[124488]))
              unknown call_tmp[654684] "expr temp" "maybe param" "maybe type" "temp"
              (654687 'move' call_tmp[654684](124382 call _low _mt[243] call_tmp[654677]))
              unknown call_tmp[654689] "expr temp" "maybe param" "maybe type" "temp"
              (654692 'move' call_tmp[654689](124386 call - call_tmp[654684] 1))
              unknown call_tmp[654694] "expr temp" "maybe param" "maybe type" "temp"
              (654697 'move' call_tmp[654694](124391 call off[124316] i[124488]))
              unknown call_tmp[654699] "expr temp" "maybe param" "maybe type" "temp"
              (654702 'move' call_tmp[654699](124392 call - call_tmp[654689] call_tmp[654694]))
              unknown call_tmp[654706] "expr temp" "maybe param" "maybe type" "temp"
              (654709 'move' call_tmp[654706](124397 call(383389 call (partial) dim _mt[243] this[126224]) i[124488]))
              unknown call_tmp[654713] "expr temp" "maybe param" "maybe type" "temp"
              (654716 'move' call_tmp[654713](124398 call _high _mt[243] call_tmp[654706]))
              unknown call_tmp[654718] "expr temp" "maybe param" "maybe type" "temp"
              (654721 'move' call_tmp[654718](124401 call > call_tmp[654699] call_tmp[654713]))
              (565435 'move' tmp[565433](424904 call isTrue call_tmp[654718]))
              (565440 'move' tmp[565425](565437 '_paramFoldLogical' tmp[565426] tmp[565433]))
            }
            {
              (565445 'move' tmp[565425](565442 '_paramFoldLogical' tmp[565426] 0))
            }
            unknown tmp[565465] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (565467 'move' tmp[565465](424863 call isTrue tmp[565425]))
            (565472 'move' tmp[565452](565469 '_paramFoldLogical' tmp[565453] tmp[565465]))
          }
          unknown call_tmp[654723] "expr temp" "maybe param" "maybe type" "temp"
          (654726 'move' call_tmp[654723](124431 call _cond_test tmp[565452]))
          if call_tmp[654723]
          {
            (124428 call halt "***Error: Argument to 'interior' function out of range in dimension " i[124488] "***")
            (479870 'end of statement' i[124488])
          }
          unknown call_tmp[654728] "expr temp" "maybe param" "maybe type" "temp"
          (654731 'move' call_tmp[654728](124439 call ranges[124324] i[124488]))
          unknown call_tmp[654735] "expr temp" "maybe param" "maybe type" "temp"
          (654738 'move' call_tmp[654735](359595 call _value _mt[243] this[126224]))
          unknown call_tmp[654742] "expr temp" "maybe param" "maybe type" "temp"
          (654745 'move' call_tmp[654742](124446 call(124441 call (partial) dsiDim _mt[243] call_tmp[654735]) i[124488]))
          unknown call_tmp[654749] "expr temp" "maybe param" "maybe type" "temp"
          (654752 'move' call_tmp[654749](124455 call off[124316] i[124488]))
          unknown call_tmp[654754] "expr temp" "maybe param" "maybe type" "temp"
          (654757 'move' call_tmp[654754](124457 call(124449 call (partial) interior _mt[243] call_tmp[654742]) call_tmp[654749]))
          (124458 call = call_tmp[654728] call_tmp[654754])
          (479872 'end of statement' ranges[124324] i[124488] i[124488] i[124488])
        }
        label _continueLabel[124466]
        _indexOfInterest[124461]
        _iterator[124462]
      }
      label _breakLabel[124467]
    }
    unknown call_tmp[654761] "expr temp" "maybe param" "maybe type" "temp"
    (654764 'move' call_tmp[654761](383405 call dist _mt[243] this[126224]))
    unknown call_tmp[654768] "expr temp" "maybe param" "maybe type" "temp"
    (654771 'move' call_tmp[654768](383409 call rank _mt[243] this[126224]))
    unknown call_tmp[654775] "expr temp" "maybe param" "maybe type" "temp"
    (654778 'move' call_tmp[654775](359599 call _value _mt[243] this[126224]))
    unknown call_tmp[654782] "expr temp" "maybe param" "maybe type" "temp"
    (654785 'move' call_tmp[654782](124508 call idxType _mt[243] call_tmp[654775]))
    unknown call_tmp[654789] "expr temp" "maybe param" "maybe type" "temp"
    (654792 'move' call_tmp[654789](383413 call stridable _mt[243] this[126224]))
    unknown call_tmp[654794] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (654797 'move' call_tmp[654794](747917 'new' _domain[125914](?) call_tmp[654761] call_tmp[654768] call_tmp[654782] call_tmp[654789] ranges[124324]))
    (517233 'move' ret[517228](517232 'deref' call_tmp[654794]))
    gotoReturn _end_interior[517226] _end_interior[517226]
    (479877 'end of statement' ranges[124324])
    label _end_interior[517226]
    (517230 return ret[517228])
  }
  function _domain[125914](?).interior[124524](arg _mt[126230]:_MT[238], arg this[126228]:_domain[125914](?), arg off[124521] :
  (383418 call intIdxType _mt[243] this[126228])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517239] "RVV" "temp"
    unknown offTup[124534] "dead at end of block" "insert auto destroy"
    unknown call_tmp[654803] "expr temp" "maybe param" "maybe type" "temp"
    (654806 'move' call_tmp[654803](383426 call rank _mt[243] this[126228]))
    unknown call_tmp[654810] "expr temp" "maybe param" "maybe type" "temp"
    (654813 'move' call_tmp[654810](383430 call intIdxType _mt[243] this[126228]))
    unknown call_tmp[654815] "expr temp" "maybe param" "maybe type" "temp"
    (654818 'move' call_tmp[654815](124532 call * call_tmp[654803] call_tmp[654810]))
    (542957 'default init var' offTup[124534] call_tmp[654815])
    (124537 'end of statement')
    {
      unknown _indexOfInterest[124555] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124556] "expr temp" "temp"
      unknown call_tmp[654822] "expr temp" "maybe param" "maybe type" "temp"
      (654825 'move' call_tmp[654822](383437 call rank _mt[243] this[126228]))
      unknown call_tmp[654827] "expr temp" "maybe param" "maybe type" "temp"
      (654830 'move' call_tmp[654827](124570 call - call_tmp[654822] 1))
      unknown call_tmp[654832] "expr temp" "maybe param" "maybe type" "temp"
      (654835 'move' call_tmp[654832](124573 call chpl_direct_range_iter 0 call_tmp[654827] 1))
      (124565 'move' _iterator[124556](124563 call _getIterator call_tmp[654832]))
      Defer
      {
        {
          (124589 call _freeIterator _iterator[124556])
        }
      }
      { scopeless type
        (124578 'move' _indexOfInterest[124555](124575 call iteratorIndex _iterator[124556]))
      }
      ForLoop[124557]
      {
        unknown i[124582] "index var" "insert auto destroy"
        (479880 'end of statement')
        (124584 'move' i[124582] _indexOfInterest[124555])
        (479881 'end of statement' i[124582])
        unknown call_tmp[654837] "expr temp" "maybe param" "maybe type" "temp"
        (654840 'move' call_tmp[654837](124550 call offTup[124534] i[124582]))
        (124552 call = call_tmp[654837] off[124521])
        (479883 'end of statement' offTup[124534] i[124582])
        label _continueLabel[124560]
        _indexOfInterest[124555]
        _iterator[124556]
      }
      label _breakLabel[124561]
    }
    unknown call_tmp[654844] "expr temp" "maybe param" "maybe type" "temp"
    (654847 'move' call_tmp[654844](124599 call(383441 call (partial) interior _mt[243] this[126228]) offTup[124534]))
    (517244 'move' ret[517239](517243 'deref' call_tmp[654844]))
    gotoReturn _end_interior[517237] _end_interior[517237]
    (479886 'end of statement' offTup[124534])
    label _end_interior[517237]
    (517241 return ret[517239])
  }
  where {
    unknown call_tmp[654851] "expr temp" "maybe param" "maybe type" "temp"
    (654854 'move' call_tmp[654851](383422 call rank _mt[243] this[126228]))
    (124528 call != call_tmp[654851] 1)
  }
  function _domain[125914](?).translate[124609](arg _mt[126234]:_MT[238], arg this[126232]:_domain[125914](?), arg off[124607]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[654856] "expr temp" "maybe param" "maybe type" "temp"
    (654859 'move' call_tmp[654856](124620 call isAssociativeDom this[126232]))
    unknown call_tmp[654861] "expr temp" "maybe param" "maybe type" "temp"
    (654864 'move' call_tmp[654861](124694 call _cond_test call_tmp[654856]))
    if call_tmp[654861]
    {
      (124640 call compilerError "translate not supported on associative domains")
    }
    {
      unknown call_tmp[654866] "expr temp" "maybe param" "maybe type" "temp"
      (654869 'move' call_tmp[654866](124645 call isSparseDom this[126232]))
      unknown call_tmp[654871] "expr temp" "maybe param" "maybe type" "temp"
      (654874 'move' call_tmp[654871](124688 call _cond_test call_tmp[654866]))
      if call_tmp[654871]
      {
        (124665 call compilerError "translate not supported on sparse domains")
      }
      {
        (124686 call compilerError "translate not supported on this domain type")
      }
    }
    (517248 return _void[55])
  }
  where {
    unknown call_tmp[654876] "expr temp" "maybe param" "maybe type" "temp"
    (654879 'move' call_tmp[654876](124614 call isRectangularDom this[126232]))
    (124615 call ! call_tmp[654876])
  }
  function _domain[125914](?).translate[124710](arg _mt[126238]:_MT[238], arg this[126236]:_domain[125914](?), arg off[124707]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517252] "RVV" "temp"
    unknown call_tmp[654885] "expr temp" "maybe param" "maybe type" "temp"
    (654888 'move' call_tmp[654885](124715 call(383453 call (partial) translate _mt[243] this[126236]) off[124707]))
    (517257 'move' ret[517252](517256 'deref' call_tmp[654885]))
    (517254 return ret[517252])
  }
  function _domain[125914](?).translate[124725](arg _mt[126242]:_MT[238], arg this[126240]:_domain[125914](?), arg off[124723]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517261] "RVV" "temp"
    unknown call_tmp[654892] "expr temp" "maybe param" "maybe type" "temp"
    (654895 'move' call_tmp[654892](124732 call size _mt[243] off[124723]))
    unknown call_tmp[654899] "expr temp" "maybe param" "maybe type" "temp"
    (654902 'move' call_tmp[654899](383459 call rank _mt[243] this[126240]))
    unknown call_tmp[654904] "expr temp" "maybe param" "maybe type" "temp"
    (654907 'move' call_tmp[654904](124736 call != call_tmp[654892] call_tmp[654899]))
    unknown call_tmp[654909] "expr temp" "maybe param" "maybe type" "temp"
    (654912 'move' call_tmp[654909](124759 call _cond_test call_tmp[654904]))
    if call_tmp[654909]
    {
      (124757 call compilerError "the domain and offset arguments of translate() must be of the same rank")
    }
    unknown call_tmp[654916] "maybe param" "maybe type" "temp"
    (654919 'move' call_tmp[654916](124767 call(383463 call (partial) dims _mt[243] this[126240])))
    unknown ranges[124768] "dead at end of block" "insert auto destroy"
    (542959 'init var' ranges[124768] call_tmp[654916])
    (124771 'end of statement')
    {
      unknown _indexOfInterest[124805] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124806] "expr temp" "temp"
      unknown call_tmp[654923] "expr temp" "maybe param" "maybe type" "temp"
      (654926 'move' call_tmp[654923](383472 call rank _mt[243] this[126240]))
      unknown call_tmp[654928] "expr temp" "maybe param" "maybe type" "temp"
      (654931 'move' call_tmp[654928](124820 call - call_tmp[654923] 1))
      unknown call_tmp[654933] "expr temp" "maybe param" "maybe type" "temp"
      (654936 'move' call_tmp[654933](124823 call chpl_direct_range_iter 0 call_tmp[654928] 1))
      (124815 'move' _iterator[124806](124813 call _getIterator call_tmp[654933]))
      Defer
      {
        {
          (124839 call _freeIterator _iterator[124806])
        }
      }
      { scopeless type
        (124828 'move' _indexOfInterest[124805](124825 call iteratorIndex _iterator[124806]))
      }
      ForLoop[124807]
      {
        unknown i[124832] "index var" "insert auto destroy"
        (479894 'end of statement')
        (124834 'move' i[124832] _indexOfInterest[124805])
        (479895 'end of statement' i[124832])
        unknown call_tmp[654938] "expr temp" "maybe param" "maybe type" "temp"
        (654941 'move' call_tmp[654938](124783 call ranges[124768] i[124832]))
        unknown call_tmp[654945] "expr temp" "maybe param" "maybe type" "temp"
        (654948 'move' call_tmp[654945](359604 call _value _mt[243] this[126240]))
        unknown call_tmp[654952] "expr temp" "maybe param" "maybe type" "temp"
        (654955 'move' call_tmp[654952](124790 call(124785 call (partial) dsiDim _mt[243] call_tmp[654945]) i[124832]))
        unknown call_tmp[654959] "expr temp" "maybe param" "maybe type" "temp"
        (654962 'move' call_tmp[654959](124799 call off[124723] i[124832]))
        unknown call_tmp[654964] "expr temp" "maybe param" "maybe type" "temp"
        (654967 'move' call_tmp[654964](124801 call(124793 call (partial) translate _mt[243] call_tmp[654952]) call_tmp[654959]))
        (124802 call = call_tmp[654938] call_tmp[654964])
        (479897 'end of statement' ranges[124768] i[124832] i[124832] i[124832])
        label _continueLabel[124810]
        _indexOfInterest[124805]
        _iterator[124806]
      }
      label _breakLabel[124811]
    }
    unknown call_tmp[654971] "expr temp" "maybe param" "maybe type" "temp"
    (654974 'move' call_tmp[654971](383477 call dist _mt[243] this[126240]))
    unknown call_tmp[654978] "expr temp" "maybe param" "maybe type" "temp"
    (654981 'move' call_tmp[654978](383481 call rank _mt[243] this[126240]))
    unknown call_tmp[654985] "expr temp" "maybe param" "maybe type" "temp"
    (654988 'move' call_tmp[654985](359608 call _value _mt[243] this[126240]))
    unknown call_tmp[654992] "expr temp" "maybe param" "maybe type" "temp"
    (654995 'move' call_tmp[654992](124852 call idxType _mt[243] call_tmp[654985]))
    unknown call_tmp[654999] "expr temp" "maybe param" "maybe type" "temp"
    (655002 'move' call_tmp[654999](383485 call stridable _mt[243] this[126240]))
    unknown call_tmp[655004] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (655007 'move' call_tmp[655004](747918 'new' _domain[125914](?) call_tmp[654971] call_tmp[654978] call_tmp[654992] call_tmp[654999] ranges[124768]))
    (517266 'move' ret[517261](517265 'deref' call_tmp[655004]))
    gotoReturn _end_translate[517259] _end_translate[517259]
    (479902 'end of statement' ranges[124768])
    label _end_translate[517259]
    (517263 return ret[517261])
  }
  where {
    (124730 call isTuple off[124723])
  }
  function _domain[125914](?).translate[124867](arg _mt[126246]:_MT[238], arg this[126244]:_domain[125914](?), arg off[124865]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517272] "RVV" "temp"
    unknown offTup[124886] "dead at end of block" "insert auto destroy"
    unknown call_tmp[655011] "expr temp" "maybe param" "maybe type" "temp"
    (655014 'move' call_tmp[655011](383495 call rank _mt[243] this[126244]))
    unknown call_tmp[655016] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (655019 'move' call_tmp[655016](124883 'typeof' off[124865]))
    unknown call_tmp[655021] "expr temp" "maybe param" "maybe type" "temp"
    (655024 'move' call_tmp[655021](124884 call * call_tmp[655011] call_tmp[655016]))
    (542961 'default init var' offTup[124886] call_tmp[655021])
    (124889 'end of statement')
    {
      unknown _indexOfInterest[124907] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124908] "expr temp" "temp"
      unknown call_tmp[655028] "expr temp" "maybe param" "maybe type" "temp"
      (655031 'move' call_tmp[655028](383503 call rank _mt[243] this[126244]))
      unknown call_tmp[655033] "expr temp" "maybe param" "maybe type" "temp"
      (655036 'move' call_tmp[655033](124922 call - call_tmp[655028] 1))
      unknown call_tmp[655038] "expr temp" "maybe param" "maybe type" "temp"
      (655041 'move' call_tmp[655038](124925 call chpl_direct_range_iter 0 call_tmp[655033] 1))
      (124917 'move' _iterator[124908](124915 call _getIterator call_tmp[655038]))
      Defer
      {
        {
          (124941 call _freeIterator _iterator[124908])
        }
      }
      { scopeless type
        (124930 'move' _indexOfInterest[124907](124927 call iteratorIndex _iterator[124908]))
      }
      ForLoop[124909]
      {
        unknown i[124934] "index var" "insert auto destroy"
        (479905 'end of statement')
        (124936 'move' i[124934] _indexOfInterest[124907])
        (479906 'end of statement' i[124934])
        unknown call_tmp[655043] "expr temp" "maybe param" "maybe type" "temp"
        (655046 'move' call_tmp[655043](124902 call offTup[124886] i[124934]))
        (124904 call = call_tmp[655043] off[124865])
        (479908 'end of statement' offTup[124886] i[124934])
        label _continueLabel[124912]
        _indexOfInterest[124907]
        _iterator[124908]
      }
      label _breakLabel[124913]
    }
    unknown call_tmp[655050] "expr temp" "maybe param" "maybe type" "temp"
    (655053 'move' call_tmp[655050](124951 call(383507 call (partial) translate _mt[243] this[126244]) offTup[124886]))
    (517277 'move' ret[517272](517276 'deref' call_tmp[655050]))
    gotoReturn _end_translate[517270] _end_translate[517270]
    (479911 'end of statement' offTup[124886])
    label _end_translate[517270]
    (517274 return ret[517272])
  }
  where {
    unknown tmp[424921] "maybe param" "temp"
    unknown call_tmp[655057] "expr temp" "maybe param" "maybe type" "temp"
    (655060 'move' call_tmp[655057](383490 call rank _mt[243] this[126244]))
    (424932 'move' tmp[424921](124871 call != call_tmp[655057] 1))
    unknown call_tmp[655062] "expr temp" "maybe param" "maybe type" "temp"
    (655065 'move' call_tmp[655062](424934 call _cond_invalid tmp[424921]))
    if call_tmp[655062]
    {
      (424937 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565479] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565480] "maybe param" "temp"
    unknown call_tmp[655067] "expr temp" "maybe param" "maybe type" "temp"
    (655070 'move' call_tmp[655067](424922 call isTrue tmp[424921]))
    (565485 'move' tmp[565480](565483 call _cond_test call_tmp[655067]))
    if tmp[565480]
    {
      unknown tmp[565487] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655072] "expr temp" "maybe param" "maybe type" "temp"
      (655075 'move' call_tmp[655072](124876 call isTuple off[124865]))
      unknown call_tmp[655077] "expr temp" "maybe param" "maybe type" "temp"
      (655080 'move' call_tmp[655077](124877 call ! call_tmp[655072]))
      (565489 'move' tmp[565487](424925 call isTrue call_tmp[655077]))
      (565494 'move' tmp[565479](565491 '_paramFoldLogical' tmp[565480] tmp[565487]))
    }
    {
      (565499 'move' tmp[565479](565496 '_paramFoldLogical' tmp[565480] 0))
    }
    (748303 call chpl_statementLevelSymbol tmp[565479])
  }
  function _domain[125914](?).isEmpty[124959](arg _mt[126250]:_MT[238], arg this[126248]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517283] "RVV" "temp"
    unknown call_tmp[655084] "expr temp" "maybe param" "maybe type" "temp"
    (655087 'move' call_tmp[655084](124963 call size _mt[243] this[126248]))
    unknown call_tmp[655089] "expr temp" "maybe param" "maybe type" "temp"
    (655092 'move' call_tmp[655089](124967 call == call_tmp[655084] 0))
    (517289 'move' ret[517283](517288 'coerce' call_tmp[655089] bool[10]))
    (517285 return ret[517283])
  }
  { scopeless type
    bool[10]
  }
  function _domain[125914](?).chpl__unTranslate[124983](arg _mt[126254]:_MT[238], arg this[126252]:_domain[125914](?), arg off[124979]:integral[199](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517293] "RVV" "temp"
    unknown call_tmp[655098] "expr temp" "maybe param" "maybe type" "temp"
    (655101 'move' call_tmp[655098](124988 call(383517 call (partial) chpl__unTranslate _mt[243] this[126252]) off[124979]))
    (517298 'move' ret[517293](517297 'deref' call_tmp[655098]))
    (517295 return ret[517293])
  }
  function _domain[125914](?).chpl__unTranslate[125003](arg _mt[126258]:_MT[238], arg this[126256]:_domain[125914](?), arg off[125000] :
  unknown call_tmp[655105] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method"
  {
    unknown ret[517302] "RVV" "temp"
    unknown call_tmp[655119] "maybe param" "maybe type" "temp"
    (655122 'move' call_tmp[655119](125007 call(383530 call (partial) dims _mt[243] this[126256])))
    unknown ranges[125008] "dead at end of block" "insert auto destroy"
    (542963 'init var' ranges[125008] call_tmp[655119])
    (125011 'end of statement')
    {
      unknown _indexOfInterest[125043] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125044] "expr temp" "temp"
      unknown call_tmp[655126] "expr temp" "maybe param" "maybe type" "temp"
      (655129 'move' call_tmp[655126](383543 call rank _mt[243] this[126256]))
      unknown call_tmp[655131] "expr temp" "maybe param" "maybe type" "temp"
      (655134 'move' call_tmp[655131](125058 call - call_tmp[655126] 1))
      unknown call_tmp[655136] "expr temp" "maybe param" "maybe type" "temp"
      (655139 'move' call_tmp[655136](125061 call chpl_direct_range_iter 0 call_tmp[655131] 1))
      (125053 'move' _iterator[125044](125051 call _getIterator call_tmp[655136]))
      Defer
      {
        {
          (125077 call _freeIterator _iterator[125044])
        }
      }
      { scopeless type
        (125066 'move' _indexOfInterest[125043](125063 call iteratorIndex _iterator[125044]))
      }
      ForLoop[125045]
      {
        unknown i[125070] "index var" "insert auto destroy"
        (479916 'end of statement')
        (125072 'move' i[125070] _indexOfInterest[125043])
        (479917 'end of statement' i[125070])
        unknown call_tmp[655141] "expr temp" "maybe param" "maybe type" "temp"
        (655144 'move' call_tmp[655141](125024 call ranges[125008] i[125070]))
        unknown call_tmp[655148] "expr temp" "maybe param" "maybe type" "temp"
        (655151 'move' call_tmp[655148](125028 call(383536 call (partial) dim _mt[243] this[126256]) i[125070]))
        unknown call_tmp[655155] "expr temp" "maybe param" "maybe type" "temp"
        (655158 'move' call_tmp[655155](125037 call off[125000] i[125070]))
        unknown call_tmp[655160] "expr temp" "maybe param" "maybe type" "temp"
        (655163 'move' call_tmp[655160](125039 call(125031 call (partial) chpl__unTranslate _mt[243] call_tmp[655148]) call_tmp[655155]))
        (125040 call = call_tmp[655141] call_tmp[655160])
        (479919 'end of statement' ranges[125008] i[125070] i[125070] i[125070])
        label _continueLabel[125048]
        _indexOfInterest[125043]
        _iterator[125044]
      }
      label _breakLabel[125049]
    }
    unknown call_tmp[655167] "expr temp" "maybe param" "maybe type" "temp"
    (655170 'move' call_tmp[655167](383548 call dist _mt[243] this[126256]))
    unknown call_tmp[655174] "expr temp" "maybe param" "maybe type" "temp"
    (655177 'move' call_tmp[655174](383552 call rank _mt[243] this[126256]))
    unknown call_tmp[655181] "expr temp" "maybe param" "maybe type" "temp"
    (655184 'move' call_tmp[655181](359613 call _value _mt[243] this[126256]))
    unknown call_tmp[655188] "expr temp" "maybe param" "maybe type" "temp"
    (655191 'move' call_tmp[655188](125090 call idxType _mt[243] call_tmp[655181]))
    unknown call_tmp[655195] "expr temp" "maybe param" "maybe type" "temp"
    (655198 'move' call_tmp[655195](383556 call stridable _mt[243] this[126256]))
    unknown call_tmp[655200] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (655203 'move' call_tmp[655200](747919 'new' _domain[125914](?) call_tmp[655167] call_tmp[655174] call_tmp[655188] call_tmp[655195] ranges[125008]))
    (517307 'move' ret[517302](517306 'deref' call_tmp[655200]))
    gotoReturn _end_chpl__unTranslate[517300] _end_chpl__unTranslate[517300]
    (479924 'end of statement' ranges[125008])
    label _end_chpl__unTranslate[517300]
    (517304 return ret[517302])
  }
  function _domain[125914](?).setIndices[125104](arg _mt[126262]:_MT[238], arg this[126260]:_domain[125914](?), arg x[125102]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655207] "expr temp" "maybe param" "maybe type" "temp"
    (655210 'move' call_tmp[655207](359617 call _value _mt[243] this[126260]))
    (125112 call(125107 call (partial) dsiSetIndices _mt[243] call_tmp[655207]) x[125102])
    (479926 'end of statement')
    unknown call_tmp[655216] "expr temp" "maybe param" "maybe type" "temp"
    (655219 'move' call_tmp[655216](383563 call _instance _mt[243] this[126260]))
    unknown call_tmp[655221] "expr temp" "maybe param" "maybe type" "temp"
    (655224 'move' call_tmp[655221](125118 call _isPrivatized call_tmp[655216]))
    unknown call_tmp[655226] "expr temp" "maybe param" "maybe type" "temp"
    (655229 'move' call_tmp[655226](125125 call _cond_test call_tmp[655221]))
    if call_tmp[655226]
    {
      unknown call_tmp[655233] "expr temp" "maybe param" "maybe type" "temp"
      (655236 'move' call_tmp[655233](383567 call _value _mt[243] this[126260]))
      (125122 call _reprivatize call_tmp[655233])
    }
    (517311 return _void[55])
  }
  function _domain[125914](?).getIndices[125133](arg _mt[126266]:_MT[238], arg this[126264]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517315] "RVV" "temp"
    unknown call_tmp[655240] "expr temp" "maybe param" "maybe type" "temp"
    (655243 'move' call_tmp[655240](359621 call _value _mt[243] this[126264]))
    unknown call_tmp[655247] "expr temp" "maybe param" "maybe type" "temp"
    (655250 'move' call_tmp[655247](125142 call(125138 call (partial) dsiGetIndices _mt[243] call_tmp[655240])))
    (517320 'move' ret[517315](517319 'deref' call_tmp[655247]))
    (517317 return ret[517315])
  }
  function _domain[125914](?).writeThis[125152](arg _mt[126270]:_MT[238], arg this[126268]:_domain[125914](?), arg f[125150]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655254] "expr temp" "maybe param" "maybe type" "temp"
    (655257 'move' call_tmp[655254](359625 call _value _mt[243] this[126268]))
    (125162 call(125157 call (partial) dsiSerialWrite _mt[243] call_tmp[655254]) f[125150])
    (517322 return _void[55])
  }
  function _domain[125914](?).readThis[125171](arg _mt[126274]:_MT[238], arg this[126272]:_domain[125914](?), arg f[125169]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655263] "expr temp" "maybe param" "maybe type" "temp"
    (655266 'move' call_tmp[655263](359629 call _value _mt[243] this[126272]))
    (125181 call(125176 call (partial) dsiSerialRead _mt[243] call_tmp[655263]) f[125169])
    (517324 return _void[55])
  }
  function _domain[125914](?).localSlice[125192](arg _mt[126278]:_MT[238], arg this[126276]:_domain[125914](?), arg r[125189]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[517328] "RVV" "temp"
    unknown call_tmp[655274] "expr temp" "maybe param" "maybe type" "temp"
    (655277 'move' call_tmp[655274](383578 call _value _mt[243] this[126276]))
    unknown call_tmp[655279] "expr temp" "maybe param" "maybe type" "temp"
    (655282 'move' call_tmp[655279](125207 '_wide_get_locale' call_tmp[655274]))
    unknown call_tmp[655284] "expr temp" "maybe param" "maybe type" "temp"
    (655287 'move' call_tmp[655284](125208 call chpl_localeID_to_locale call_tmp[655279]))
    unknown call_tmp[655289] "expr temp" "maybe param" "maybe type" "temp"
    (655292 'move' call_tmp[655289](383581 call here[90439]))
    unknown call_tmp[655294] "expr temp" "maybe param" "maybe type" "temp"
    (655297 'move' call_tmp[655294](125211 call != call_tmp[655284] call_tmp[655289]))
    unknown call_tmp[655299] "expr temp" "maybe param" "maybe type" "temp"
    (655302 'move' call_tmp[655299](125260 call _cond_test call_tmp[655294]))
    if call_tmp[655299]
    {
      unknown call_tmp[655306] "expr temp" "maybe param" "maybe type" "temp"
      (655309 'move' call_tmp[655306](383584 call _value _mt[243] this[126276]))
      unknown call_tmp[655311] "expr temp" "maybe param" "maybe type" "temp"
      (655314 'move' call_tmp[655311](125236 '_wide_get_node' call_tmp[655306]))
      unknown call_tmp[655316] "expr temp" "maybe param" "maybe type" "temp"
      (655319 'move' call_tmp[655316](359636 call here[90439]))
      unknown call_tmp[655323] "expr temp" "maybe param" "maybe type" "temp"
      (655326 'move' call_tmp[655323](125255 call id _mt[243] call_tmp[655316]))
      (125258 call halt "Attempting to take a local slice of a domain on locale " call_tmp[655311] " from locale " call_tmp[655323])
    }
    unknown call_tmp[655328] "expr temp" "maybe param" "maybe type" "temp"
    (655331 'move' call_tmp[655328](125270 call this[126276](125268 'expand_tuple' r[125189])))
    (517333 'move' ret[517328](517332 'deref' call_tmp[655328]))
    (517330 return ret[517328])
  }
  where {
    unknown tmp[424942] "maybe param" "temp"
    (424953 'move' tmp[424942](125197 call chpl__isTupleOfRanges r[125189]))
    unknown call_tmp[655333] "expr temp" "maybe param" "maybe type" "temp"
    (655336 'move' call_tmp[655333](424955 call _cond_invalid tmp[424942]))
    if call_tmp[655333]
    {
      (424958 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565506] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565507] "maybe param" "temp"
    unknown call_tmp[655338] "expr temp" "maybe param" "maybe type" "temp"
    (655341 'move' call_tmp[655338](424943 call isTrue tmp[424942]))
    (565512 'move' tmp[565507](565510 call _cond_test call_tmp[655338]))
    if tmp[565507]
    {
      unknown tmp[565514] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655345] "expr temp" "maybe param" "maybe type" "temp"
      (655348 'move' call_tmp[655345](359633 call _value _mt[243] this[126276]))
      unknown call_tmp[655352] "expr temp" "maybe param" "maybe type" "temp"
      (655355 'move' call_tmp[655352](125203 call(125199 call (partial) isDefaultRectangular _mt[243] call_tmp[655345])))
      (565516 'move' tmp[565514](424946 call isTrue call_tmp[655352]))
      (565521 'move' tmp[565506](565518 '_paramFoldLogical' tmp[565507] tmp[565514]))
    }
    {
      (565526 'move' tmp[565506](565523 '_paramFoldLogical' tmp[565507] 0))
    }
    (748305 call chpl_statementLevelSymbol tmp[565506])
  }
  function _domain[125914](?).localSlice[125282](arg _mt[126282]:_MT[238], arg this[126280]:_domain[125914](?), arg r[125279]:_any[178](?) ...) : _unknown[51] "method" "primary method"
  {
    unknown ret[517337] "RVV" "temp"
    unknown call_tmp[655361] "expr temp" "maybe param" "maybe type" "temp"
    (655364 'move' call_tmp[655361](359643 call _value _mt[243] this[126280]))
    unknown call_tmp[655368] "expr temp" "maybe param" "maybe type" "temp"
    (655371 'move' call_tmp[655368](125307 call chpl__anyStridable r[125279]))
    unknown call_tmp[655373] "expr temp" "maybe param" "maybe type" "temp"
    (655376 'move' call_tmp[655373](125310 call(125301 call (partial) dsiLocalSlice _mt[243] call_tmp[655361]) call_tmp[655368] r[125279]))
    (517342 'move' ret[517337](517341 'deref' call_tmp[655373]))
    (517339 return ret[517337])
  }
  where {
    unknown tmp[424963] "maybe param" "temp"
    (424974 'move' tmp[424963](125287 call chpl__isTupleOfRanges r[125279]))
    unknown call_tmp[655378] "expr temp" "maybe param" "maybe type" "temp"
    (655381 'move' call_tmp[655378](424976 call _cond_invalid tmp[424963]))
    if call_tmp[655378]
    {
      (424979 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565533] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565534] "maybe param" "temp"
    unknown call_tmp[655383] "expr temp" "maybe param" "maybe type" "temp"
    (655386 'move' call_tmp[655383](424964 call isTrue tmp[424963]))
    (565539 'move' tmp[565534](565537 call _cond_test call_tmp[655383]))
    if tmp[565534]
    {
      unknown tmp[565541] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655390] "expr temp" "maybe param" "maybe type" "temp"
      (655393 'move' call_tmp[655390](359639 call _value _mt[243] this[126280]))
      unknown call_tmp[655397] "expr temp" "maybe param" "maybe type" "temp"
      (655400 'move' call_tmp[655397](125293 call(125289 call (partial) isDefaultRectangular _mt[243] call_tmp[655390])))
      unknown call_tmp[655402] "expr temp" "maybe param" "maybe type" "temp"
      (655405 'move' call_tmp[655402](125294 call ! call_tmp[655397]))
      (565543 'move' tmp[565541](424967 call isTrue call_tmp[655402]))
      (565548 'move' tmp[565533](565545 '_paramFoldLogical' tmp[565534] tmp[565541]))
    }
    {
      (565553 'move' tmp[565533](565550 '_paramFoldLogical' tmp[565534] 0))
    }
    (748307 call chpl_statementLevelSymbol tmp[565533])
  }
  function _domain[125914](?).localSlice[125323](arg _mt[126286]:_MT[238], arg this[126284]:_domain[125914](?), arg d[125320]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517346] "RVV" "temp"
    unknown call_tmp[655411] "expr temp" "maybe param" "maybe type" "temp"
    (655414 'move' call_tmp[655411](125331 call(125327 call (partial) getIndices _mt[243] d[125320])))
    unknown call_tmp[655416] "expr temp" "maybe param" "maybe type" "temp"
    (655419 'move' call_tmp[655416](125334 call(383598 call (partial) localSlice _mt[243] this[126284])(125332 'expand_tuple' call_tmp[655411])))
    (517351 'move' ret[517346](517350 'deref' call_tmp[655416]))
    (517348 return ret[517346])
  }
  function _domain[125914](?).sorted[125351](arg _mt[126290]:_MT[238], arg this[126288]:_domain[125914](?), arg comparator[125347]:_any[178](?) :
  (748854 call chpl_defaultComparator) =
  (125346 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517355] "RVV" "temp"
    {
      unknown _indexOfInterest[125367] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125368] "expr temp" "temp"
      unknown call_tmp[655423] "expr temp" "maybe param" "maybe type" "temp"
      (655426 'move' call_tmp[655423](359648 call _value _mt[243] this[126288]))
      unknown call_tmp[655430] "expr temp" "maybe param" "maybe type" "temp"
      (655433 'move' call_tmp[655430](125362 call(125357 call (partial) dsiSorted _mt[243] call_tmp[655423]) comparator[125347]))
      (125377 'move' _iterator[125368](125375 call _getIterator call_tmp[655430]))
      Defer
      {
        {
          (125394 call _freeIterator _iterator[125368])
        }
      }
      { scopeless type
        (125383 'move' _indexOfInterest[125367](125380 call iteratorIndex _iterator[125368]))
      }
      ForLoop[125369]
      {
        unknown i[125387] "index var" "insert auto destroy"
        (479936 'end of statement')
        (125389 'move' i[125387] _indexOfInterest[125367])
        (479937 'end of statement' i[125387])
        {
          unknown yret[517359] "YVV" "temp"
          (517362 'move' yret[517359](517361 'deref' i[125387]))
          (517364 yield yret[517359])
          (479939 'end of statement' i[125387])
        }
        label _continueLabel[125372]
        _indexOfInterest[125367]
        _iterator[125368]
      }
      label _breakLabel[125373]
    }
    (517357 return ret[517355])
  }
  function _domain[125914](?).displayRepresentation[125406](arg _mt[126294]:_MT[238], arg this[126292]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[655437] "expr temp" "maybe param" "maybe type" "temp"
    (655440 'move' call_tmp[655437](359652 call _value _mt[243] this[126292]))
    (125413 call(125409 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[655437]))
    (517366 return _void[55])
  }
  function _domain[125914](?).defaultSparseDist[125420](arg _mt[126298]:_MT[238], arg this[126296]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[517370] "RVV" "temp"
    unknown call_tmp[655446] "expr temp" "maybe param" "maybe type" "temp"
    (655449 'move' call_tmp[655446](359656 call _value _mt[243] this[126296]))
    unknown call_tmp[655453] "expr temp" "maybe param" "maybe type" "temp"
    (655456 'move' call_tmp[655453](125424 call dist _mt[243] call_tmp[655446]))
    unknown call_tmp[655458] "expr temp" "maybe param" "maybe type" "temp"
    (655461 'move' call_tmp[655458](125428 call _getDistribution call_tmp[655453]))
    (517375 'move' ret[517370](517374 'deref' call_tmp[655458]))
    (517372 return ret[517370])
  }
  function _domain[125914](?).safeCast[125440](arg _mt[126302]:_MT[238], arg this[126300]:_domain[125914](?), arg t[125437]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517379] "RVV" "temp"
    const tmpD[125453] "dead at end of block" "const" "insert auto destroy"
    (542965 'default init var' tmpD[125453] t[125437])
    (125456 'end of statement')
    unknown call_tmp[655465] "expr temp" "maybe param" "maybe type" "temp"
    (655468 'move' call_tmp[655465](125459 call rank _mt[243] tmpD[125453]))
    unknown call_tmp[655472] "expr temp" "maybe param" "maybe type" "temp"
    (655475 'move' call_tmp[655472](125463 call rank _mt[243] this[126300]))
    unknown call_tmp[655477] "expr temp" "maybe param" "maybe type" "temp"
    (655480 'move' call_tmp[655477](125466 call != call_tmp[655465] call_tmp[655472]))
    unknown call_tmp[655482] "expr temp" "maybe param" "maybe type" "temp"
    (655485 'move' call_tmp[655482](125489 call _cond_test call_tmp[655477]))
    if call_tmp[655482]
    {
      (125487 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655489] "expr temp" "maybe param" "maybe type" "temp"
    (655492 'move' call_tmp[655489](125495 call idxType _mt[243] tmpD[125453]))
    unknown call_tmp[655496] "expr temp" "maybe param" "maybe type" "temp"
    (655499 'move' call_tmp[655496](125499 call idxType _mt[243] this[126300]))
    unknown call_tmp[655501] "expr temp" "maybe param" "maybe type" "temp"
    (655504 'move' call_tmp[655501](125502 call != call_tmp[655489] call_tmp[655496]))
    unknown call_tmp[655506] "expr temp" "maybe param" "maybe type" "temp"
    (655509 'move' call_tmp[655506](125525 call _cond_test call_tmp[655501]))
    if call_tmp[655506]
    {
      (125523 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655513] "expr temp" "maybe param" "maybe type" "temp"
    (655516 'move' call_tmp[655513](125531 call stridable _mt[243] tmpD[125453]))
    unknown call_tmp[655520] "expr temp" "maybe param" "maybe type" "temp"
    (655523 'move' call_tmp[655520](125535 call stridable _mt[243] this[126300]))
    unknown call_tmp[655525] "expr temp" "maybe param" "maybe type" "temp"
    (655528 'move' call_tmp[655525](125538 call == call_tmp[655513] call_tmp[655520]))
    unknown call_tmp[655530] "expr temp" "maybe param" "maybe type" "temp"
    (655533 'move' call_tmp[655530](125719 call _cond_test call_tmp[655525]))
    if call_tmp[655530]
    {
      (517384 'move' ret[517379](517383 'deref' this[126300]))
      gotoReturn _end_safeCast[517377] _end_safeCast[517377]
    }
    {
      unknown tmp[425005] "maybe param" "temp"
      unknown call_tmp[655537] "expr temp" "maybe param" "maybe type" "temp"
      (655540 'move' call_tmp[655537](125544 call stridable _mt[243] tmpD[125453]))
      (425016 'move' tmp[425005](125547 call ! call_tmp[655537]))
      unknown call_tmp[655542] "expr temp" "maybe param" "maybe type" "temp"
      (655545 'move' call_tmp[655542](425018 call _cond_invalid tmp[425005]))
      if call_tmp[655542]
      {
        (425021 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565560] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565561] "maybe param" "temp"
      unknown call_tmp[655547] "expr temp" "maybe param" "maybe type" "temp"
      (655550 'move' call_tmp[655547](425006 call isTrue tmp[425005]))
      (565566 'move' tmp[565561](565564 call _cond_test call_tmp[655547]))
      if tmp[565561]
      {
        unknown tmp[565568] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655554] "expr temp" "maybe param" "maybe type" "temp"
        (655557 'move' call_tmp[655554](125550 call stridable _mt[243] this[126300]))
        (565570 'move' tmp[565568](425009 call isTrue call_tmp[655554]))
        (565575 'move' tmp[565560](565572 '_paramFoldLogical' tmp[565561] tmp[565568]))
      }
      {
        (565580 'move' tmp[565560](565577 '_paramFoldLogical' tmp[565561] 0))
      }
      unknown call_tmp[655559] "expr temp" "maybe param" "maybe type" "temp"
      (655562 'move' call_tmp[655559](125715 call _cond_test tmp[565560]))
      if call_tmp[655559]
      {
        unknown call_tmp[655566] "maybe param" "maybe type" "temp"
        (655569 'move' call_tmp[655566](125560 call(125556 call (partial) getIndices _mt[243] this[126300])))
        const inds[125561] "dead at end of block" "const" "insert auto destroy"
        (542967 'init var' inds[125561] call_tmp[655566])
        (125564 'end of statement')
        unknown unstridableInds[125578] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655573] "expr temp" "maybe param" "maybe type" "temp"
        (655576 'move' call_tmp[655573](383609 call rank _mt[243] this[126300]))
        unknown call_tmp[655580] "expr temp" "maybe param" "maybe type" "temp"
        (655583 'move' call_tmp[655580](125569 call idxType _mt[243] tmpD[125453]))
        unknown call_tmp[655585] "expr temp" "maybe param" "maybe type" "temp"
        (655588 'move' call_tmp[655585](125575 call range[64316](?) call_tmp[655580](stridable = 0)))
        unknown call_tmp[655590] "expr temp" "maybe param" "maybe type" "temp"
        (655593 'move' call_tmp[655590](125576 call * call_tmp[655573] call_tmp[655585]))
        (542969 'default init var' unstridableInds[125578] call_tmp[655590])
        (125581 'end of statement' tmpD[125453])
        {
          unknown dim[125655] "dead at end of block" "insert auto destroy"
          (542971 'init var' dim[125655] 0)
          (479948 'end of statement')
          unknown tmp[125656] "maybe param" "temp"
          unknown call_tmp[655597] "expr temp" "maybe param" "maybe type" "temp"
          (655600 'move' call_tmp[655597](125584 call size _mt[243] inds[125561]))
          unknown call_tmp[655602] "expr temp" "maybe param" "maybe type" "temp"
          (655605 'move' call_tmp[655602](125588 call - call_tmp[655597] 1))
          (125668 'move' tmp[125656](125666 call chpl_compute_low_param_loop_bound 0 call_tmp[655602]))
          unknown tmp[125657] "maybe param" "temp"
          unknown call_tmp[655609] "expr temp" "maybe param" "maybe type" "temp"
          (655612 'move' call_tmp[655609](125675 call size _mt[243] inds[125561]))
          unknown call_tmp[655614] "expr temp" "maybe param" "maybe type" "temp"
          (655617 'move' call_tmp[655614](125673 call - call_tmp[655609] 1))
          (125681 'move' tmp[125657](125679 call chpl_compute_high_param_loop_bound 0 call_tmp[655614]))
          unknown tmp[125658] "maybe param" "temp"
          (125684 'move' tmp[125658] 1)
          ParamForLoop[125686]
          { dim[125655] tmp[125656] tmp[125657] tmp[125658]
            {
              unknown call_tmp[655619] "expr temp" "maybe param" "maybe type" "temp"
              (655622 'move' call_tmp[655619](125595 call inds[125561] dim[125655]))
              unknown call_tmp[655626] "expr temp" "maybe param" "maybe type" "temp"
              (655629 'move' call_tmp[655626](125596 call stride _mt[243] call_tmp[655619]))
              unknown call_tmp[655631] "expr temp" "maybe param" "maybe type" "temp"
              (655634 'move' call_tmp[655631](125600 call != call_tmp[655626] 1))
              unknown call_tmp[655636] "expr temp" "maybe param" "maybe type" "temp"
              (655639 'move' call_tmp[655636](125624 call _cond_test call_tmp[655631]))
              if call_tmp[655636]
              {
                (125622 call halt "non-stridable domain assigned non-unit stride in dimension " dim[125655])
                (479949 'end of statement' dim[125655])
              }
              unknown call_tmp[655641] "expr temp" "maybe param" "maybe type" "temp"
              (655644 'move' call_tmp[655641](125633 call unstridableInds[125578] dim[125655]))
              unknown call_tmp[655646] "expr temp" "maybe param" "maybe type" "temp"
              (655649 'move' call_tmp[655646](125637 call inds[125561] dim[125655]))
              unknown call_tmp[655655] "expr temp" "maybe param" "maybe type" "temp"
              (655658 'move' call_tmp[655655](125643 call idxType _mt[243] tmpD[125453]))
              unknown call_tmp[655660] "expr temp" "maybe param" "maybe type" "temp"
              (655663 'move' call_tmp[655660](125649 call range[64316](?) call_tmp[655655](stridable = 0)))
              unknown call_tmp[655665] "expr temp" "maybe param" "maybe type" "temp"
              (655668 'move' call_tmp[655665](125651 call(125638 call (partial) safeCast _mt[243] call_tmp[655646]) call_tmp[655660]))
              (125652 call = call_tmp[655641] call_tmp[655665])
              (479951 'end of statement' unstridableInds[125578] dim[125655] inds[125561] dim[125655] tmpD[125453])
            }
          }
          label _unused_continueLabel[125660]
          label _breakLabel[125659]
        }
        (125701 call(125696 call (partial) setIndices _mt[243] tmpD[125453]) unstridableInds[125578])
        (479957 'end of statement' tmpD[125453] unstridableInds[125578])
        (517389 'move' ret[517379](517388 'deref' tmpD[125453]))
        gotoReturn _end_safeCast[517377] _end_safeCast[517377]
        (479960 'end of statement' tmpD[125453])
      }
      {
        (125708 call = tmpD[125453] this[126300])
        (479962 'end of statement' tmpD[125453])
        (517394 'move' ret[517379](517393 'deref' tmpD[125453]))
        gotoReturn _end_safeCast[517377] _end_safeCast[517377]
        (479964 'end of statement' tmpD[125453])
      }
    }
    label _end_safeCast[517377]
    (517381 return ret[517379])
  }
  where {
    unknown tmp[424984] "maybe param" "temp"
    (424995 'move' tmp[424984](125445 call chpl__isRectangularDomType t[125437]))
    unknown call_tmp[655672] "expr temp" "maybe param" "maybe type" "temp"
    (655675 'move' call_tmp[655672](424997 call _cond_invalid tmp[424984]))
    if call_tmp[655672]
    {
      (425000 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565587] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565588] "maybe param" "temp"
    unknown call_tmp[655677] "expr temp" "maybe param" "maybe type" "temp"
    (655680 'move' call_tmp[655677](424985 call isTrue tmp[424984]))
    (565593 'move' tmp[565588](565591 call _cond_test call_tmp[655677]))
    if tmp[565588]
    {
      unknown tmp[565595] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[655682] "expr temp" "maybe param" "maybe type" "temp"
      (655685 'move' call_tmp[655682](125449 call isRectangularDom this[126300]))
      (565597 'move' tmp[565595](424988 call isTrue call_tmp[655682]))
      (565602 'move' tmp[565587](565599 '_paramFoldLogical' tmp[565588] tmp[565595]))
    }
    {
      (565607 'move' tmp[565587](565604 '_paramFoldLogical' tmp[565588] 0))
    }
    (748309 call chpl_statementLevelSymbol tmp[565587])
  }
  function _domain[125914](?).targetLocales[125730](arg _mt[126306]:_MT[238], arg this[126304]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517400] "RVV" "temp"
    unknown call_tmp[655689] "expr temp" "maybe param" "maybe type" "temp"
    (655692 'move' call_tmp[655689](359674 call _value _mt[243] this[126304]))
    unknown call_tmp[655696] "expr temp" "maybe param" "maybe type" "temp"
    (655699 'move' call_tmp[655696](125737 call(125733 call (partial) dsiTargetLocales _mt[243] call_tmp[655689])))
    (517405 'move' ret[517400](517404 'deref' call_tmp[655696]))
    (517402 return ret[517400])
  }
  function _domain[125914](?).hasSingleLocalSubdomain[125745](arg _mt[126310]:_MT[238], arg this[126308]:_domain[125914](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517409] "RVV" "param" "temp"
    unknown call_tmp[655703] "expr temp" "maybe param" "maybe type" "temp"
    (655706 'move' call_tmp[655703](359678 call _value _mt[243] this[126308]))
    unknown call_tmp[655710] "expr temp" "maybe param" "maybe type" "temp"
    (655713 'move' call_tmp[655710](125754 call(125750 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655703])))
    (517414 'move' ret[517409](517413 'deref' call_tmp[655710]))
    (517411 return ret[517409])
  }
  function _domain[125914](?).localSubdomain[125768](arg _mt[126314]:_MT[238], arg this[126312]:_domain[125914](?), arg loc[125764]:locale[28] =
  (383626 call here[90439])) : _unknown[51] "method" "primary method"
  {
    unknown ret[517418] "RVV" "temp"
    unknown call_tmp[655717] "expr temp" "maybe param" "maybe type" "temp"
    (655720 'move' call_tmp[655717](359682 call _value _mt[243] this[126312]))
    unknown call_tmp[655724] "expr temp" "maybe param" "maybe type" "temp"
    (655727 'move' call_tmp[655724](125775 call(125771 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655717])))
    unknown call_tmp[655729] "expr temp" "maybe param" "maybe type" "temp"
    (655732 'move' call_tmp[655729](125776 call ! call_tmp[655724]))
    unknown call_tmp[655734] "expr temp" "maybe param" "maybe type" "temp"
    (655737 'move' call_tmp[655734](125799 call _cond_test call_tmp[655729]))
    if call_tmp[655734]
    {
      (125797 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[655741] "expr temp" "maybe param" "maybe type" "temp"
    (655744 'move' call_tmp[655741](359686 call _value _mt[243] this[126312]))
    unknown call_tmp[655748] "expr temp" "maybe param" "maybe type" "temp"
    (655751 'move' call_tmp[655748](125813 call(125808 call (partial) dsiLocalSubdomain _mt[243] call_tmp[655741]) loc[125764]))
    (517423 'move' ret[517418](517422 'deref' call_tmp[655748]))
    (517420 return ret[517418])
  }
  function _domain[125914](?).localSubdomains[125826](arg _mt[126318]:_MT[238], arg this[126316]:_domain[125914](?), arg loc[125822]:locale[28] =
  (383629 call here[90439])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[517427] "RVV" "temp"
    unknown call_tmp[655755] "expr temp" "maybe param" "maybe type" "temp"
    (655758 'move' call_tmp[655755](359690 call _value _mt[243] this[126316]))
    unknown call_tmp[655762] "expr temp" "maybe param" "maybe type" "temp"
    (655765 'move' call_tmp[655762](125833 call(125829 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[655755])))
    unknown call_tmp[655767] "expr temp" "maybe param" "maybe type" "temp"
    (655770 'move' call_tmp[655767](125889 call _cond_test call_tmp[655762]))
    if call_tmp[655767]
    {
      unknown yret[517431] "YVV" "temp"
      unknown call_tmp[655774] "expr temp" "maybe param" "maybe type" "temp"
      (655777 'move' call_tmp[655774](125837 call(383632 call (partial) localSubdomain _mt[243] this[126316]) loc[125822]))
      (517434 'move' yret[517431](517433 'deref' call_tmp[655774]))
      (517436 yield yret[517431])
    }
    {
      {
        unknown _indexOfInterest[125854] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[125855] "expr temp" "temp"
        unknown call_tmp[655781] "expr temp" "maybe param" "maybe type" "temp"
        (655784 'move' call_tmp[655781](359694 call _value _mt[243] this[126316]))
        unknown call_tmp[655788] "expr temp" "maybe param" "maybe type" "temp"
        (655791 'move' call_tmp[655788](125850 call(125845 call (partial) dsiLocalSubdomains _mt[243] call_tmp[655781]) loc[125822]))
        (125864 'move' _iterator[125855](125862 call _getIterator call_tmp[655788]))
        Defer
        {
          {
            (125881 call _freeIterator _iterator[125855])
          }
        }
        { scopeless type
          (125870 'move' _indexOfInterest[125854](125867 call iteratorIndex _iterator[125855]))
        }
        ForLoop[125856]
        {
          unknown d[125874] "index var" "insert auto destroy"
          (479972 'end of statement')
          (125876 'move' d[125874] _indexOfInterest[125854])
          (479973 'end of statement' d[125874])
          unknown yret[517438] "YVV" "temp"
          (517441 'move' yret[517438](517440 'deref' d[125874]))
          (517443 yield yret[517438])
          (479975 'end of statement' d[125874])
          label _continueLabel[125859]
          _indexOfInterest[125854]
          _iterator[125855]
        }
        label _breakLabel[125860]
      }
    }
    (517429 return ret[517427])
  }
  function _domain[125914](?).supportsAutoLocalAccess[125898](arg _mt[126322]:_MT[238], arg this[126320]:_domain[125914](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[517447] "RVV" "param" "temp"
    unknown call_tmp[655795] "expr temp" "maybe param" "maybe type" "temp"
    (655798 'move' call_tmp[655795](359698 call _value _mt[243] this[126320]))
    unknown call_tmp[655802] "expr temp" "maybe param" "maybe type" "temp"
    (655805 'move' call_tmp[655802](125907 call(125903 call (partial) dsiSupportsAutoLocalAccess _mt[243] call_tmp[655795])))
    (517452 'move' ret[517447](517451 'deref' call_tmp[655802]))
    (517449 return ret[517447])
  }
  function _domain[125914](?)._pid[799815](arg _mt[799817]:_MT[238], ref arg this[799819]:_domain[125914](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799829] "RVV" "temp"
    unknown call_tmp[799836] "expr temp" "maybe param" "maybe type" "temp"
    (799839 'move' call_tmp[799836](799823 '.' this[799819] c"_pid"))
    (799834 'move' ret[799829](799833 'addr of' call_tmp[799836]))
    (799831 return ret[799829])
  }
  function _domain[125914](?)._instance[799841](arg _mt[799843]:_MT[238], ref arg this[799845]:_domain[125914](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799855] "RVV" "temp"
    unknown call_tmp[799862] "expr temp" "maybe param" "maybe type" "temp"
    (799865 'move' call_tmp[799862](799849 '.' this[799845] c"_instance"))
    (799860 'move' ret[799855](799859 'addr of' call_tmp[799862]))
    (799857 return ret[799855])
  }
  function _domain[125914](?)._unowned[799867](arg _mt[799869]:_MT[238], ref arg this[799871]:_domain[125914](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799881] "RVV" "temp"
    unknown call_tmp[799888] "expr temp" "maybe param" "maybe type" "temp"
    (799891 'move' call_tmp[799888](799875 '.' this[799871] c"_unowned"))
    (799886 'move' ret[799881](799885 'addr of' call_tmp[799888]))
    (799883 return ret[799881])
  }
  function chpl__defaultHash[799893](arg r[799895]:_domain[125914](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[799926] "RVV" "temp"
    unknown call_tmp[799933] "expr temp" "maybe param" "maybe type" "temp"
    (799936 'move' call_tmp[799933](799912 call _unowned _mt[243] r[799895]))
    unknown call_tmp[799938] "expr temp" "maybe param" "maybe type" "temp"
    (799941 'move' call_tmp[799938](799916 call chpl__defaultHash call_tmp[799933]))
    unknown call_tmp[799943] "expr temp" "maybe param" "maybe type" "temp"
    (799946 'move' call_tmp[799943](799903 call _instance _mt[243] r[799895]))
    unknown call_tmp[799948] "expr temp" "maybe param" "maybe type" "temp"
    (799951 'move' call_tmp[799948](799907 call chpl__defaultHash call_tmp[799943]))
    unknown call_tmp[799953] "expr temp" "maybe param" "maybe type" "temp"
    (799956 'move' call_tmp[799953](799897 call _pid _mt[243] r[799895]))
    unknown call_tmp[799958] "expr temp" "maybe param" "maybe type" "temp"
    (799961 'move' call_tmp[799958](799901 call chpl__defaultHash call_tmp[799953]))
    unknown call_tmp[799963] "expr temp" "maybe param" "maybe type" "temp"
    (799966 'move' call_tmp[799963](799909 call chpl__defaultHashCombine call_tmp[799948] call_tmp[799958] 2))
    unknown call_tmp[799968] "expr temp" "maybe param" "maybe type" "temp"
    (799971 'move' call_tmp[799968](799918 call chpl__defaultHashCombine call_tmp[799938] call_tmp[799963] 3))
    (799931 'move' ret[799926](799930 'deref' call_tmp[799968]))
    (799928 return ret[799926])
  }
  type _domain[125914](?) val _pid[119173]:int(64)[13] int(64)[13] unknown _instance[119177] "owned" val _unowned[119182]:bool[10] bool[10] forwarding ( )
  function _cast[126331](arg t[126328]:_domain[125914](?), arg d[126334]:_domain[125914](?)) : _unknown[51] "no doc"
  {
    unknown ret[517456] "RVV" "temp"
    const tmpD[126348] "dead at end of block" "const" "insert auto destroy"
    (542973 'default init var' tmpD[126348] t[126328])
    (126351 'end of statement')
    unknown call_tmp[655809] "expr temp" "maybe param" "maybe type" "temp"
    (655812 'move' call_tmp[655809](126354 call rank _mt[243] tmpD[126348]))
    unknown call_tmp[655816] "expr temp" "maybe param" "maybe type" "temp"
    (655819 'move' call_tmp[655816](126358 call rank _mt[243] d[126334]))
    unknown call_tmp[655821] "expr temp" "maybe param" "maybe type" "temp"
    (655824 'move' call_tmp[655821](126361 call != call_tmp[655809] call_tmp[655816]))
    unknown call_tmp[655826] "expr temp" "maybe param" "maybe type" "temp"
    (655829 'move' call_tmp[655826](126368 call _cond_test call_tmp[655821]))
    if call_tmp[655826]
    {
      (126366 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[655833] "expr temp" "maybe param" "maybe type" "temp"
    (655836 'move' call_tmp[655833](126374 call idxType _mt[243] tmpD[126348]))
    unknown call_tmp[655840] "expr temp" "maybe param" "maybe type" "temp"
    (655843 'move' call_tmp[655840](126378 call idxType _mt[243] d[126334]))
    unknown call_tmp[655845] "expr temp" "maybe param" "maybe type" "temp"
    (655848 'move' call_tmp[655845](126381 call != call_tmp[655833] call_tmp[655840]))
    unknown call_tmp[655850] "expr temp" "maybe param" "maybe type" "temp"
    (655853 'move' call_tmp[655850](126388 call _cond_test call_tmp[655845]))
    if call_tmp[655850]
    {
      (126386 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[655857] "expr temp" "maybe param" "maybe type" "temp"
    (655860 'move' call_tmp[655857](126394 call stridable _mt[243] tmpD[126348]))
    unknown call_tmp[655864] "expr temp" "maybe param" "maybe type" "temp"
    (655867 'move' call_tmp[655864](126398 call stridable _mt[243] d[126334]))
    unknown call_tmp[655869] "expr temp" "maybe param" "maybe type" "temp"
    (655872 'move' call_tmp[655869](126401 call == call_tmp[655857] call_tmp[655864]))
    unknown call_tmp[655874] "expr temp" "maybe param" "maybe type" "temp"
    (655877 'move' call_tmp[655874](126545 call _cond_test call_tmp[655869]))
    if call_tmp[655874]
    {
      (517461 'move' ret[517456](517460 'deref' d[126334]))
      gotoReturn _end__cast[517454] _end__cast[517454]
    }
    {
      unknown tmp[425047] "maybe param" "temp"
      unknown call_tmp[655881] "expr temp" "maybe param" "maybe type" "temp"
      (655884 'move' call_tmp[655881](126407 call stridable _mt[243] tmpD[126348]))
      (425058 'move' tmp[425047](126410 call ! call_tmp[655881]))
      unknown call_tmp[655886] "expr temp" "maybe param" "maybe type" "temp"
      (655889 'move' call_tmp[655886](425060 call _cond_invalid tmp[425047]))
      if call_tmp[655886]
      {
        (425063 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565614] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565615] "maybe param" "temp"
      unknown call_tmp[655891] "expr temp" "maybe param" "maybe type" "temp"
      (655894 'move' call_tmp[655891](425048 call isTrue tmp[425047]))
      (565620 'move' tmp[565615](565618 call _cond_test call_tmp[655891]))
      if tmp[565615]
      {
        unknown tmp[565622] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[655898] "expr temp" "maybe param" "maybe type" "temp"
        (655901 'move' call_tmp[655898](126413 call stridable _mt[243] d[126334]))
        (565624 'move' tmp[565622](425051 call isTrue call_tmp[655898]))
        (565629 'move' tmp[565614](565626 '_paramFoldLogical' tmp[565615] tmp[565622]))
      }
      {
        (565634 'move' tmp[565614](565631 '_paramFoldLogical' tmp[565615] 0))
      }
      unknown call_tmp[655903] "expr temp" "maybe param" "maybe type" "temp"
      (655906 'move' call_tmp[655903](126541 call _cond_test tmp[565614]))
      if call_tmp[655903]
      {
        unknown call_tmp[655910] "maybe param" "maybe type" "temp"
        (655913 'move' call_tmp[655910](126423 call(126419 call (partial) getIndices _mt[243] d[126334])))
        unknown inds[126424] "dead at end of block" "insert auto destroy"
        (542975 'init var' inds[126424] call_tmp[655910])
        (126427 'end of statement')
        unknown unstridableInds[126444] "dead at end of block" "insert auto destroy"
        unknown call_tmp[655917] "expr temp" "maybe param" "maybe type" "temp"
        (655920 'move' call_tmp[655917](126430 call rank _mt[243] d[126334]))
        unknown call_tmp[655924] "expr temp" "maybe param" "maybe type" "temp"
        (655927 'move' call_tmp[655924](126435 call idxType _mt[243] tmpD[126348]))
        unknown call_tmp[655929] "expr temp" "maybe param" "maybe type" "temp"
        (655932 'move' call_tmp[655929](126441 call range[64316](?) call_tmp[655924](stridable = 0)))
        unknown call_tmp[655934] "expr temp" "maybe param" "maybe type" "temp"
        (655937 'move' call_tmp[655934](126442 call * call_tmp[655917] call_tmp[655929]))
        (542977 'default init var' unstridableInds[126444] call_tmp[655934])
        (126447 'end of statement' tmpD[126348])
        {
          unknown i[126481] "dead at end of block" "insert auto destroy"
          (542979 'init var' i[126481] 0)
          (479983 'end of statement')
          unknown tmp[126482] "maybe param" "temp"
          unknown call_tmp[655941] "expr temp" "maybe param" "maybe type" "temp"
          (655944 'move' call_tmp[655941](126450 call rank _mt[243] tmpD[126348]))
          unknown call_tmp[655946] "expr temp" "maybe param" "maybe type" "temp"
          (655949 'move' call_tmp[655946](126454 call - call_tmp[655941] 1))
          (126494 'move' tmp[126482](126492 call chpl_compute_low_param_loop_bound 0 call_tmp[655946]))
          unknown tmp[126483] "maybe param" "temp"
          unknown call_tmp[655953] "expr temp" "maybe param" "maybe type" "temp"
          (655956 'move' call_tmp[655953](126501 call rank _mt[243] tmpD[126348]))
          unknown call_tmp[655958] "expr temp" "maybe param" "maybe type" "temp"
          (655961 'move' call_tmp[655958](126499 call - call_tmp[655953] 1))
          (126507 'move' tmp[126483](126505 call chpl_compute_high_param_loop_bound 0 call_tmp[655958]))
          unknown tmp[126484] "maybe param" "temp"
          (126510 'move' tmp[126484] 1)
          ParamForLoop[126512]
          { i[126481] tmp[126482] tmp[126483] tmp[126484]
            {
              unknown call_tmp[655963] "expr temp" "maybe param" "maybe type" "temp"
              (655966 'move' call_tmp[655963](126461 call unstridableInds[126444] i[126481]))
              unknown call_tmp[655970] "expr temp" "maybe param" "maybe type" "temp"
              (655973 'move' call_tmp[655970](126468 call idxType _mt[243] tmpD[126348]))
              unknown call_tmp[655975] "expr temp" "maybe param" "maybe type" "temp"
              (655978 'move' call_tmp[655975](126474 call range[64316](?) call_tmp[655970](stridable = 0)))
              unknown call_tmp[655980] "expr temp" "maybe param" "maybe type" "temp"
              (655983 'move' call_tmp[655980](126465 call inds[126424] i[126481]))
              unknown call_tmp[655985] "expr temp" "maybe param" "maybe type" "temp"
              (655988 'move' call_tmp[655985](126475 call _cast call_tmp[655975] call_tmp[655980]))
              (126477 call = call_tmp[655963] call_tmp[655985])
              (479984 'end of statement' unstridableInds[126444] i[126481] tmpD[126348] inds[126424] i[126481])
            }
          }
          label _unused_continueLabel[126486]
          label _breakLabel[126485]
        }
        (126527 call(126522 call (partial) setIndices _mt[243] tmpD[126348]) unstridableInds[126444])
        (479990 'end of statement' tmpD[126348] unstridableInds[126444])
        (517466 'move' ret[517456](517465 'deref' tmpD[126348]))
        gotoReturn _end__cast[517454] _end__cast[517454]
        (479993 'end of statement' tmpD[126348])
      }
      {
        (126534 call = tmpD[126348] d[126334])
        (479995 'end of statement' tmpD[126348])
        (517471 'move' ret[517456](517470 'deref' tmpD[126348]))
        gotoReturn _end__cast[517454] _end__cast[517454]
        (479997 'end of statement' tmpD[126348])
      }
    }
    label _end__cast[517454]
    (517458 return ret[517456])
  }
  where {
    unknown tmp[425026] "maybe param" "temp"
    (425037 'move' tmp[425026](126340 call chpl__isRectangularDomType t[126328]))
    unknown call_tmp[655992] "expr temp" "maybe param" "maybe type" "temp"
    (655995 'move' call_tmp[655992](425039 call _cond_invalid tmp[425026]))
    if call_tmp[655992]
    {
      (425042 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565641] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565642] "maybe param" "temp"
    unknown call_tmp[655997] "expr temp" "maybe param" "maybe type" "temp"
    (656000 'move' call_tmp[655997](425027 call isTrue tmp[425026]))
    (565647 'move' tmp[565642](565645 call _cond_test call_tmp[655997]))
    if tmp[565642]
    {
      unknown tmp[565649] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656002] "expr temp" "maybe param" "maybe type" "temp"
      (656005 'move' call_tmp[656002](126344 call isRectangularDom d[126334]))
      (565651 'move' tmp[565649](425030 call isTrue call_tmp[656002]))
      (565656 'move' tmp[565641](565653 '_paramFoldLogical' tmp[565642] tmp[565649]))
    }
    {
      (565661 'move' tmp[565641](565658 '_paramFoldLogical' tmp[565642] 0))
    }
    (748311 call chpl_statementLevelSymbol tmp[565641])
  }
  function _cast[126560](arg t[126557]:string[26], arg x[126563]:_domain[125914](?)) : _unknown[51]
  {
    unknown ret[517477] "RVV" "temp"
    unknown call_tmp[656007] "expr temp" "maybe param" "maybe type" "temp"
    (656010 'move' call_tmp[656007](126573 call stringify x[126563]))
    (517482 'move' ret[517477](517481 'deref' call_tmp[656007]))
    (517479 return ret[517477])
    (355177 'used modules list'(126567 'use' IO[230808]))
  }
  function chpl_countDomHelp[126582](arg dom[126580]:_any[178](?), arg counts[126584]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517486] "RVV" "temp"
    unknown call_tmp[656014] "maybe param" "maybe type" "temp"
    (656017 'move' call_tmp[656014](126591 call(126587 call (partial) dims _mt[243] dom[126580])))
    unknown ranges[126592] "dead at end of block" "insert auto destroy"
    (542981 'init var' ranges[126592] call_tmp[656014])
    (126595 'end of statement')
    {
      unknown i[126624] "dead at end of block" "insert auto destroy"
      (542983 'init var' i[126624] 0)
      (480000 'end of statement')
      unknown tmp[126625] "maybe param" "temp"
      unknown call_tmp[656021] "expr temp" "maybe param" "maybe type" "temp"
      (656024 'move' call_tmp[656021](126599 call rank _mt[243] dom[126580]))
      unknown call_tmp[656026] "expr temp" "maybe param" "maybe type" "temp"
      (656029 'move' call_tmp[656026](126603 call - call_tmp[656021] 1))
      (126637 'move' tmp[126625](126635 call chpl_compute_low_param_loop_bound 0 call_tmp[656026]))
      unknown tmp[126626] "maybe param" "temp"
      unknown call_tmp[656033] "expr temp" "maybe param" "maybe type" "temp"
      (656036 'move' call_tmp[656033](126644 call rank _mt[243] dom[126580]))
      unknown call_tmp[656038] "expr temp" "maybe param" "maybe type" "temp"
      (656041 'move' call_tmp[656038](126642 call - call_tmp[656033] 1))
      (126650 'move' tmp[126626](126648 call chpl_compute_high_param_loop_bound 0 call_tmp[656038]))
      unknown tmp[126627] "maybe param" "temp"
      (126653 'move' tmp[126627] 1)
      ParamForLoop[126655]
      { i[126624] tmp[126625] tmp[126626] tmp[126627]
        unknown call_tmp[656043] "expr temp" "maybe param" "maybe type" "temp"
        (656046 'move' call_tmp[656043](126610 call ranges[126592] i[126624]))
        unknown call_tmp[656048] "expr temp" "maybe param" "maybe type" "temp"
        (656051 'move' call_tmp[656048](126614 call ranges[126592] i[126624]))
        unknown call_tmp[656053] "expr temp" "maybe param" "maybe type" "temp"
        (656056 'move' call_tmp[656053](126618 call counts[126584] i[126624]))
        unknown call_tmp[656058] "expr temp" "maybe param" "maybe type" "temp"
        (656061 'move' call_tmp[656058](126619 call # call_tmp[656048] call_tmp[656053]))
        (126621 call = call_tmp[656043] call_tmp[656058])
        (480001 'end of statement' ranges[126592] i[126624] ranges[126592] i[126624] i[126624])
      }
      label _unused_continueLabel[126629]
      label _breakLabel[126628]
    }
    unknown call_tmp[656063] "expr temp" "maybe param" "maybe type" "temp"
    (656066 'move' call_tmp[656063](126668 call dom[126580](126666 'expand_tuple' ranges[126592])))
    (517491 'move' ret[517486](517490 'deref' call_tmp[656063]))
    gotoReturn _end_chpl_countDomHelp[517484] _end_chpl_countDomHelp[517484]
    (480007 'end of statement' ranges[126592])
    label _end_chpl_countDomHelp[517484]
    (517488 return ret[517486])
  }
  function #[126679](arg dom[126676]:_domain[125914](?), arg counts[126682]:integral[199](?)) : _unknown[51]
  {
    unknown ret[517497] "RVV" "temp"
    unknown call_tmp[656068] "expr temp" "maybe param" "maybe type" "temp"
    (656071 'move' call_tmp[656068](126702 call _build_tuple counts[126682]))
    unknown call_tmp[656073] "expr temp" "maybe param" "maybe type" "temp"
    (656076 'move' call_tmp[656073](126704 call chpl_countDomHelp dom[126676] call_tmp[656068]))
    (517502 'move' ret[517497](517501 'deref' call_tmp[656073]))
    (517499 return ret[517497])
  }
  where {
    unknown tmp[425068] "maybe param" "temp"
    (425079 'move' tmp[425068](126688 call isRectangularDom dom[126676]))
    unknown call_tmp[656078] "expr temp" "maybe param" "maybe type" "temp"
    (656081 'move' call_tmp[656078](425081 call _cond_invalid tmp[425068]))
    if call_tmp[656078]
    {
      (425084 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565668] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565669] "maybe param" "temp"
    unknown call_tmp[656083] "expr temp" "maybe param" "maybe type" "temp"
    (656086 'move' call_tmp[656083](425069 call isTrue tmp[425068]))
    (565674 'move' tmp[565669](565672 call _cond_test call_tmp[656083]))
    if tmp[565669]
    {
      unknown tmp[565676] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656090] "expr temp" "maybe param" "maybe type" "temp"
      (656093 'move' call_tmp[656090](126690 call rank _mt[243] dom[126676]))
      unknown call_tmp[656095] "expr temp" "maybe param" "maybe type" "temp"
      (656098 'move' call_tmp[656095](126694 call == call_tmp[656090] 1))
      (565678 'move' tmp[565676](425072 call isTrue call_tmp[656095]))
      (565683 'move' tmp[565668](565680 '_paramFoldLogical' tmp[565669] tmp[565676]))
    }
    {
      (565688 'move' tmp[565668](565685 '_paramFoldLogical' tmp[565669] 0))
    }
    (748313 call chpl_statementLevelSymbol tmp[565668])
  }
  function #[126717](arg dom[126714]:_domain[125914](?), arg counts[126719]:_any[178](?)) : _unknown[51]
  {
    unknown ret[517506] "RVV" "temp"
    unknown call_tmp[656102] "expr temp" "maybe param" "maybe type" "temp"
    (656105 'move' call_tmp[656102](126732 call size _mt[243] counts[126719]))
    unknown call_tmp[656109] "expr temp" "maybe param" "maybe type" "temp"
    (656112 'move' call_tmp[656109](126736 call rank _mt[243] dom[126714]))
    unknown call_tmp[656114] "expr temp" "maybe param" "maybe type" "temp"
    (656117 'move' call_tmp[656114](126739 call != call_tmp[656102] call_tmp[656109]))
    unknown call_tmp[656119] "expr temp" "maybe param" "maybe type" "temp"
    (656122 'move' call_tmp[656119](126762 call _cond_test call_tmp[656114]))
    if call_tmp[656119]
    {
      (126760 call compilerError "the domain and tuple arguments of # must have the same rank")
    }
    unknown call_tmp[656124] "expr temp" "maybe param" "maybe type" "temp"
    (656127 'move' call_tmp[656124](126772 call chpl_countDomHelp dom[126714] counts[126719]))
    (517511 'move' ret[517506](517510 'deref' call_tmp[656124]))
    (517508 return ret[517506])
  }
  where {
    unknown tmp[425089] "maybe param" "temp"
    (425100 'move' tmp[425089](126724 call isRectangularDom dom[126714]))
    unknown call_tmp[656129] "expr temp" "maybe param" "maybe type" "temp"
    (656132 'move' call_tmp[656129](425102 call _cond_invalid tmp[425089]))
    if call_tmp[656129]
    {
      (425105 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565695] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565696] "maybe param" "temp"
    unknown call_tmp[656134] "expr temp" "maybe param" "maybe type" "temp"
    (656137 'move' call_tmp[656134](425090 call isTrue tmp[425089]))
    (565701 'move' tmp[565696](565699 call _cond_test call_tmp[656134]))
    if tmp[565696]
    {
      unknown tmp[565703] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656139] "expr temp" "maybe param" "maybe type" "temp"
      (656142 'move' call_tmp[656139](126728 call isTuple counts[126719]))
      (565705 'move' tmp[565703](425093 call isTrue call_tmp[656139]))
      (565710 'move' tmp[565695](565707 '_paramFoldLogical' tmp[565696] tmp[565703]))
    }
    {
      (565715 'move' tmp[565695](565712 '_paramFoldLogical' tmp[565696] 0))
    }
    (748315 call chpl_statementLevelSymbol tmp[565695])
  }
  function #[126786](arg arr[126783]:_array[133600](?), arg counts[126789]:integral[199](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517515] "RVV" "temp"
    unknown call_tmp[656146] "expr temp" "maybe param" "maybe type" "temp"
    (656149 'move' call_tmp[656146](126807 call _dom _mt[243] arr[126783]))
    unknown call_tmp[656151] "expr temp" "maybe param" "maybe type" "temp"
    (656154 'move' call_tmp[656151](126811 call # call_tmp[656146] counts[126789]))
    unknown call_tmp[656156] "expr temp" "maybe param" "maybe type" "temp"
    (656159 'move' call_tmp[656156](126814 call arr[126783] call_tmp[656151]))
    (517520 'move' ret[517515](517519 'deref' call_tmp[656156]))
    (517517 return ret[517515])
  }
  where {
    unknown tmp[425110] "maybe param" "temp"
    (425121 'move' tmp[425110](126795 call isRectangularArr arr[126783]))
    unknown call_tmp[656161] "expr temp" "maybe param" "maybe type" "temp"
    (656164 'move' call_tmp[656161](425123 call _cond_invalid tmp[425110]))
    if call_tmp[656161]
    {
      (425126 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565722] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565723] "maybe param" "temp"
    unknown call_tmp[656166] "expr temp" "maybe param" "maybe type" "temp"
    (656169 'move' call_tmp[656166](425111 call isTrue tmp[425110]))
    (565728 'move' tmp[565723](565726 call _cond_test call_tmp[656166]))
    if tmp[565723]
    {
      unknown tmp[565730] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656173] "expr temp" "maybe param" "maybe type" "temp"
      (656176 'move' call_tmp[656173](126797 call rank _mt[243] arr[126783]))
      unknown call_tmp[656178] "expr temp" "maybe param" "maybe type" "temp"
      (656181 'move' call_tmp[656178](126801 call == call_tmp[656173] 1))
      (565732 'move' tmp[565730](425114 call isTrue call_tmp[656178]))
      (565737 'move' tmp[565722](565734 '_paramFoldLogical' tmp[565723] tmp[565730]))
    }
    {
      (565742 'move' tmp[565722](565739 '_paramFoldLogical' tmp[565723] 0))
    }
    (748317 call chpl_statementLevelSymbol tmp[565722])
  }
  function #[126829](arg arr[126826]:_array[133600](?), arg counts[126831]:_any[178](?)) : _unknown[51] "fn returns aliasing array"
  {
    unknown ret[517524] "RVV" "temp"
    unknown call_tmp[656185] "expr temp" "maybe param" "maybe type" "temp"
    (656188 'move' call_tmp[656185](126844 call size _mt[243] counts[126831]))
    unknown call_tmp[656192] "expr temp" "maybe param" "maybe type" "temp"
    (656195 'move' call_tmp[656192](126848 call rank _mt[243] arr[126826]))
    unknown call_tmp[656197] "expr temp" "maybe param" "maybe type" "temp"
    (656200 'move' call_tmp[656197](126851 call != call_tmp[656185] call_tmp[656192]))
    unknown call_tmp[656202] "expr temp" "maybe param" "maybe type" "temp"
    (656205 'move' call_tmp[656202](126874 call _cond_test call_tmp[656197]))
    if call_tmp[656202]
    {
      (126872 call compilerError "the domain and array arguments of # must have the same rank")
    }
    unknown call_tmp[656209] "expr temp" "maybe param" "maybe type" "temp"
    (656212 'move' call_tmp[656209](126882 call _dom _mt[243] arr[126826]))
    unknown call_tmp[656214] "expr temp" "maybe param" "maybe type" "temp"
    (656217 'move' call_tmp[656214](126886 call # call_tmp[656209] counts[126831]))
    unknown call_tmp[656219] "expr temp" "maybe param" "maybe type" "temp"
    (656222 'move' call_tmp[656219](126889 call arr[126826] call_tmp[656214]))
    (517529 'move' ret[517524](517528 'deref' call_tmp[656219]))
    (517526 return ret[517524])
  }
  where {
    unknown tmp[425131] "maybe param" "temp"
    (425142 'move' tmp[425131](126836 call isRectangularArr arr[126826]))
    unknown call_tmp[656224] "expr temp" "maybe param" "maybe type" "temp"
    (656227 'move' call_tmp[656224](425144 call _cond_invalid tmp[425131]))
    if call_tmp[656224]
    {
      (425147 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565749] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565750] "maybe param" "temp"
    unknown call_tmp[656229] "expr temp" "maybe param" "maybe type" "temp"
    (656232 'move' call_tmp[656229](425132 call isTrue tmp[425131]))
    (565755 'move' tmp[565750](565753 call _cond_test call_tmp[656229]))
    if tmp[565750]
    {
      unknown tmp[565757] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656234] "expr temp" "maybe param" "maybe type" "temp"
      (656237 'move' call_tmp[656234](126840 call isTuple counts[126831]))
      (565759 'move' tmp[565757](425135 call isTrue call_tmp[656234]))
      (565764 'move' tmp[565749](565761 '_paramFoldLogical' tmp[565750] tmp[565757]))
    }
    {
      (565769 'move' tmp[565749](565766 '_paramFoldLogical' tmp[565750] 0))
    }
    (748319 call chpl_statementLevelSymbol tmp[565749])
  }
  function +[126901](arg d[126898]:_domain[125914](?), arg i[126907] :
  (126905 call chpl__buildIndexType d[126898])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656239] "expr temp" "maybe param" "maybe type" "temp"
    (656242 'move' call_tmp[656239](126913 call isRectangularDom d[126898]))
    unknown call_tmp[656244] "expr temp" "maybe param" "maybe type" "temp"
    (656247 'move' call_tmp[656244](126956 call _cond_test call_tmp[656239]))
    if call_tmp[656244]
    {
      (126933 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126954 call compilerError "Cannot add indices to this domain type")
    }
    (517531 return _void[55])
  }
  function +[126969](arg i[126967]:_any[178](?), arg d[126972]:_domain[125914](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656249] "expr temp" "maybe param" "maybe type" "temp"
    (656252 'move' call_tmp[656249](126987 call isRectangularDom d[126972]))
    unknown call_tmp[656254] "expr temp" "maybe param" "maybe type" "temp"
    (656257 'move' call_tmp[656254](126998 call _cond_test call_tmp[656249]))
    if call_tmp[656254]
    {
      (126991 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (126996 call compilerError "Cannot add indices to this domain type")
    }
    (517533 return _void[55])
  }
  where {
    unknown call_tmp[656259] "expr temp" "maybe param" "maybe type" "temp"
    (656262 'move' call_tmp[656259](126981 call chpl__buildIndexType d[126972]))
    unknown call_tmp[656264] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656267 'move' call_tmp[656264](126977 'typeof' i[126967]))
    (354351 'is_subtype' call_tmp[656259] call_tmp[656264])
  }
  function +[127014](arg d[127011]:_domain[125914](?), arg i[127020] :
  (127018 call chpl__buildIndexType d[127011])) : _unknown[51]
  {
    unknown ret[517537] "RVV" "temp"
    (127033 call(127028 call (partial) add _mt[243] d[127011]) i[127020])
    (480019 'end of statement')
    (517542 'move' ret[517537](517541 'deref' d[127011]))
    (517539 return ret[517537])
  }
  where {
    (127026 call isIrregularDom d[127011])
  }
  function +[127046](arg i[127044]:_any[178](?), arg d[127049]:_domain[125914](?)) : _unknown[51]
  {
    unknown ret[517546] "RVV" "temp"
    (127073 call(127068 call (partial) add _mt[243] d[127049]) i[127044])
    (480021 'end of statement')
    (517551 'move' ret[517546](517550 'deref' d[127049]))
    (517548 return ret[517546])
  }
  where {
    unknown tmp[425152] "maybe param" "temp"
    unknown call_tmp[656273] "expr temp" "maybe param" "maybe type" "temp"
    (656276 'move' call_tmp[656273](127058 call chpl__buildIndexType d[127049]))
    unknown call_tmp[656278] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656281 'move' call_tmp[656278](127054 'typeof' i[127044]))
    (425163 'move' tmp[425152](354352 'is_subtype' call_tmp[656273] call_tmp[656278]))
    unknown call_tmp[656283] "expr temp" "maybe param" "maybe type" "temp"
    (656286 'move' call_tmp[656283](425165 call _cond_invalid tmp[425152]))
    if call_tmp[656283]
    {
      (425168 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565776] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565777] "maybe param" "temp"
    unknown call_tmp[656288] "expr temp" "maybe param" "maybe type" "temp"
    (656291 'move' call_tmp[656288](425153 call isTrue tmp[425152]))
    (565782 'move' tmp[565777](565780 call _cond_test call_tmp[656288]))
    if tmp[565777]
    {
      unknown tmp[565784] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656293] "expr temp" "maybe param" "maybe type" "temp"
      (656296 'move' call_tmp[656293](127064 call isIrregularDom d[127049]))
      (565786 'move' tmp[565784](425156 call isTrue call_tmp[656293]))
      (565791 'move' tmp[565776](565788 '_paramFoldLogical' tmp[565777] tmp[565784]))
    }
    {
      (565796 'move' tmp[565776](565793 '_paramFoldLogical' tmp[565777] 0))
    }
    (748321 call chpl_statementLevelSymbol tmp[565776])
  }
  function +[127088](arg d1[127085]:_domain[125914](?), arg d2[127091]:_domain[125914](?)) : _unknown[51]
  {
    unknown ret[517555] "RVV" "temp"
    unknown d3[127114] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656298] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656301 'move' call_tmp[656298](127113 'typeof' d1[127085]))
    (542985 'default init var' d3[127114] call_tmp[656298])
    (127117 'end of statement')
    {
      unknown _indexOfInterest[127129] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127130] "expr temp" "temp"
      (127139 'move' _iterator[127130](127137 call _getIterator d1[127085]))
      Defer
      {
        {
          (127155 call _freeIterator _iterator[127130])
        }
      }
      { scopeless type
        (127144 'move' _indexOfInterest[127129](127141 call iteratorIndex _iterator[127130]))
      }
      ForLoop[127131]
      {
        unknown e[127148] "index var" "insert auto destroy"
        (480024 'end of statement')
        (127150 'move' e[127148] _indexOfInterest[127129])
        (480025 'end of statement' e[127148])
        (127127 call(127122 call (partial) add _mt[243] d3[127114]) e[127148])
        (480027 'end of statement' d3[127114] e[127148])
        label _continueLabel[127134]
        _indexOfInterest[127129]
        _iterator[127130]
      }
      label _breakLabel[127135]
    }
    {
      unknown _indexOfInterest[127172] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127173] "expr temp" "temp"
      (127182 'move' _iterator[127173](127180 call _getIterator d2[127091]))
      Defer
      {
        {
          (127198 call _freeIterator _iterator[127173])
        }
      }
      { scopeless type
        (127187 'move' _indexOfInterest[127172](127184 call iteratorIndex _iterator[127173]))
      }
      ForLoop[127174]
      {
        unknown e[127191] "index var" "insert auto destroy"
        (480031 'end of statement')
        (127193 'move' e[127191] _indexOfInterest[127172])
        (480032 'end of statement' e[127191])
        (127170 call(127165 call (partial) add _mt[243] d3[127114]) e[127191])
        (480034 'end of statement' d3[127114] e[127191])
        label _continueLabel[127177]
        _indexOfInterest[127172]
        _iterator[127173]
      }
      label _breakLabel[127178]
    }
    (517560 'move' ret[517555](517559 'deref' d3[127114]))
    gotoReturn _end_+[517553] _end_+[517553]
    (480037 'end of statement' d3[127114])
    label _end_+[517553]
    (517557 return ret[517555])
  }
  where {
    unknown tmp[425173] "maybe param" "temp"
    unknown call_tmp[656307] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656310 'move' call_tmp[656307](127095 'typeof' d1[127085]))
    unknown call_tmp[656312] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656315 'move' call_tmp[656312](127097 'typeof' d2[127091]))
    (425184 'move' tmp[425173](127098 call == call_tmp[656307] call_tmp[656312]))
    unknown call_tmp[656317] "expr temp" "maybe param" "maybe type" "temp"
    (656320 'move' call_tmp[656317](425186 call _cond_invalid tmp[425173]))
    if call_tmp[656317]
    {
      (425189 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565830] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565831] "maybe param" "temp"
    unknown call_tmp[656322] "expr temp" "maybe param" "maybe type" "temp"
    (656325 'move' call_tmp[656322](425174 call isTrue tmp[425173]))
    (565836 'move' tmp[565831](565834 call _cond_test call_tmp[656322]))
    if tmp[565831]
    {
      unknown tmp[425194] "maybe param" "temp"
      (425205 'move' tmp[425194](127103 call isIrregularDom d1[127085]))
      unknown call_tmp[656327] "expr temp" "maybe param" "maybe type" "temp"
      (656330 'move' call_tmp[656327](425207 call _cond_invalid tmp[425194]))
      if call_tmp[656327]
      {
        (425210 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[565803] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[565804] "maybe param" "temp"
      unknown call_tmp[656332] "expr temp" "maybe param" "maybe type" "temp"
      (656335 'move' call_tmp[656332](425195 call isTrue tmp[425194]))
      (565809 'move' tmp[565804](565807 call _cond_test call_tmp[656332]))
      if tmp[565804]
      {
        unknown tmp[565811] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[656337] "expr temp" "maybe param" "maybe type" "temp"
        (656340 'move' call_tmp[656337](127107 call isIrregularDom d2[127091]))
        (565813 'move' tmp[565811](425198 call isTrue call_tmp[656337]))
        (565818 'move' tmp[565803](565815 '_paramFoldLogical' tmp[565804] tmp[565811]))
      }
      {
        (565823 'move' tmp[565803](565820 '_paramFoldLogical' tmp[565804] 0))
      }
      unknown tmp[565838] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (565840 'move' tmp[565838](425177 call isTrue tmp[565803]))
      (565845 'move' tmp[565830](565842 '_paramFoldLogical' tmp[565831] tmp[565838]))
    }
    {
      (565850 'move' tmp[565830](565847 '_paramFoldLogical' tmp[565831] 0))
    }
    (748323 call chpl_statementLevelSymbol tmp[565830])
  }
  function +[127217](arg d1[127214]:_domain[125914](?), arg d2[127220]:_domain[125914](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425215] "maybe param" "temp"
    (425226 'move' tmp[425215](127226 call isRectangularDom d1[127214]))
    unknown call_tmp[656342] "expr temp" "maybe param" "maybe type" "temp"
    (656345 'move' call_tmp[656342](425228 call _cond_invalid tmp[425215]))
    if call_tmp[656342]
    {
      (425231 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565857] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565858] "maybe param" "temp"
    unknown call_tmp[656347] "expr temp" "maybe param" "maybe type" "temp"
    (656350 'move' call_tmp[656347](425216 call isTrue tmp[425215]))
    (565863 'move' tmp[565858](565861 call _cond_test call_tmp[656347]))
    if tmp[565858]
    {
      (565868 'move' tmp[565857](565865 '_paramFoldLogical' tmp[565858] 1))
    }
    {
      unknown tmp[565870] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656352] "expr temp" "maybe param" "maybe type" "temp"
      (656355 'move' call_tmp[656352](127230 call isRectangularDom d2[127220]))
      (565872 'move' tmp[565870](425220 call isTrue call_tmp[656352]))
      (565877 'move' tmp[565857](565874 '_paramFoldLogical' tmp[565858] tmp[565870]))
    }
    unknown call_tmp[656357] "expr temp" "maybe param" "maybe type" "temp"
    (656360 'move' call_tmp[656357](127243 call _cond_test tmp[565857]))
    if call_tmp[656357]
    {
      (127236 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (127241 call compilerError "Cannot add indices to this domain type")
    }
    (517564 return _void[55])
  }
  function -[127258](arg d[127255]:_domain[125914](?), arg i[127264] :
  (127262 call chpl__buildIndexType d[127255])) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[656362] "expr temp" "maybe param" "maybe type" "temp"
    (656365 'move' call_tmp[656362](127270 call isRectangularDom d[127255]))
    unknown call_tmp[656367] "expr temp" "maybe param" "maybe type" "temp"
    (656370 'move' call_tmp[656367](127313 call _cond_test call_tmp[656362]))
    if call_tmp[656367]
    {
      (127290 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127311 call compilerError "Cannot remove indices from this domain type")
    }
    (517566 return _void[55])
  }
  function -[127328](arg d[127325]:_domain[125914](?), arg i[127334] :
  (127332 call chpl__buildIndexType d[127325])) : _unknown[51]
  {
    unknown ret[517570] "RVV" "temp"
    (127347 call(127342 call (partial) remove _mt[243] d[127325]) i[127334])
    (480044 'end of statement')
    (517575 'move' ret[517570](517574 'deref' d[127325]))
    (517572 return ret[517570])
  }
  where {
    (127340 call isIrregularDom d[127325])
  }
  function -[127362](arg d1[127359]:_domain[125914](?), arg d2[127365]:_domain[125914](?)) : _unknown[51]
  {
    unknown ret[517579] "RVV" "temp"
    unknown d3[127382] "dead at end of block" "insert auto destroy"
    unknown call_tmp[656374] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656377 'move' call_tmp[656374](127381 'typeof' d1[127359]))
    (542987 'default init var' d3[127382] call_tmp[656374])
    (127385 'end of statement')
    {
      unknown _indexOfInterest[127397] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127398] "expr temp" "temp"
      (127407 'move' _iterator[127398](127405 call _getIterator d1[127359]))
      Defer
      {
        {
          (127423 call _freeIterator _iterator[127398])
        }
      }
      { scopeless type
        (127412 'move' _indexOfInterest[127397](127409 call iteratorIndex _iterator[127398]))
      }
      ForLoop[127399]
      {
        unknown e[127416] "index var" "insert auto destroy"
        (480047 'end of statement')
        (127418 'move' e[127416] _indexOfInterest[127397])
        (480048 'end of statement' e[127416])
        (127395 call(127390 call (partial) add _mt[243] d3[127382]) e[127416])
        (480050 'end of statement' d3[127382] e[127416])
        label _continueLabel[127402]
        _indexOfInterest[127397]
        _iterator[127398]
      }
      label _breakLabel[127403]
    }
    {
      unknown _indexOfInterest[127440] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127441] "expr temp" "temp"
      (127450 'move' _iterator[127441](127448 call _getIterator d2[127365]))
      Defer
      {
        {
          (127466 call _freeIterator _iterator[127441])
        }
      }
      { scopeless type
        (127455 'move' _indexOfInterest[127440](127452 call iteratorIndex _iterator[127441]))
      }
      ForLoop[127442]
      {
        unknown e[127459] "index var" "insert auto destroy"
        (480054 'end of statement')
        (127461 'move' e[127459] _indexOfInterest[127440])
        (480055 'end of statement' e[127459])
        (127438 call(127433 call (partial) remove _mt[243] d3[127382]) e[127459])
        (480057 'end of statement' d3[127382] e[127459])
        label _continueLabel[127445]
        _indexOfInterest[127440]
        _iterator[127441]
      }
      label _breakLabel[127446]
    }
    (517584 'move' ret[517579](517583 'deref' d3[127382]))
    gotoReturn _end_-[517577] _end_-[517577]
    (480060 'end of statement' d3[127382])
    label _end_-[517577]
    (517581 return ret[517579])
  }
  where {
    unknown tmp[425236] "maybe param" "temp"
    unknown call_tmp[656383] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656386 'move' call_tmp[656383](127369 'typeof' d1[127359]))
    unknown call_tmp[656388] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (656391 'move' call_tmp[656388](127371 'typeof' d2[127365]))
    (425247 'move' tmp[425236](127372 call == call_tmp[656383] call_tmp[656388]))
    unknown call_tmp[656393] "expr temp" "maybe param" "maybe type" "temp"
    (656396 'move' call_tmp[656393](425249 call _cond_invalid tmp[425236]))
    if call_tmp[656393]
    {
      (425252 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565884] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565885] "maybe param" "temp"
    unknown call_tmp[656398] "expr temp" "maybe param" "maybe type" "temp"
    (656401 'move' call_tmp[656398](425237 call isTrue tmp[425236]))
    (565890 'move' tmp[565885](565888 call _cond_test call_tmp[656398]))
    if tmp[565885]
    {
      unknown tmp[565892] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656403] "expr temp" "maybe param" "maybe type" "temp"
      (656406 'move' call_tmp[656403](127377 call isSparseDom d1[127359]))
      (565894 'move' tmp[565892](425240 call isTrue call_tmp[656403]))
      (565899 'move' tmp[565884](565896 '_paramFoldLogical' tmp[565885] tmp[565892]))
    }
    {
      (565904 'move' tmp[565884](565901 '_paramFoldLogical' tmp[565885] 0))
    }
    (748325 call chpl_statementLevelSymbol tmp[565884])
  }
  function -[127485](arg d1[127482]:_domain[125914](?), arg d2[127488]:_domain[125914](?)) : _unknown[51] "no return value for void"
  {
    unknown tmp[425257] "maybe param" "temp"
    (425268 'move' tmp[425257](127494 call isRectangularDom d1[127482]))
    unknown call_tmp[656408] "expr temp" "maybe param" "maybe type" "temp"
    (656411 'move' call_tmp[656408](425270 call _cond_invalid tmp[425257]))
    if call_tmp[656408]
    {
      (425273 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[565911] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565912] "maybe param" "temp"
    unknown call_tmp[656413] "expr temp" "maybe param" "maybe type" "temp"
    (656416 'move' call_tmp[656413](425258 call isTrue tmp[425257]))
    (565917 'move' tmp[565912](565915 call _cond_test call_tmp[656413]))
    if tmp[565912]
    {
      (565922 'move' tmp[565911](565919 '_paramFoldLogical' tmp[565912] 1))
    }
    {
      unknown tmp[565924] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656418] "expr temp" "maybe param" "maybe type" "temp"
      (656421 'move' call_tmp[656418](127498 call isRectangularDom d2[127488]))
      (565926 'move' tmp[565924](425262 call isTrue call_tmp[656418]))
      (565931 'move' tmp[565911](565928 '_paramFoldLogical' tmp[565912] tmp[565924]))
    }
    unknown call_tmp[656423] "expr temp" "maybe param" "maybe type" "temp"
    (656426 'move' call_tmp[656423](127511 call _cond_test tmp[565911]))
    if call_tmp[656423]
    {
      (127504 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (127509 call compilerError "Cannot remove indices from this domain type")
    }
    (517588 return _void[55])
  }
  function ==[127526](arg d1[127523]:_domain[125914](?), arg d2[127529]:_domain[125914](?)) : _unknown[51] "inline"
  {
    unknown ret[517592] "RVV" "temp"
    unknown call_tmp[656430] "expr temp" "maybe param" "maybe type" "temp"
    (656433 'move' call_tmp[656430](127543 call _value _mt[243] d1[127523]))
    unknown call_tmp[656437] "expr temp" "maybe param" "maybe type" "temp"
    (656440 'move' call_tmp[656437](127546 call rank _mt[243] call_tmp[656430]))
    unknown call_tmp[656444] "expr temp" "maybe param" "maybe type" "temp"
    (656447 'move' call_tmp[656444](127550 call _value _mt[243] d2[127529]))
    unknown call_tmp[656451] "expr temp" "maybe param" "maybe type" "temp"
    (656454 'move' call_tmp[656451](127553 call rank _mt[243] call_tmp[656444]))
    unknown call_tmp[656456] "expr temp" "maybe param" "maybe type" "temp"
    (656459 'move' call_tmp[656456](127556 call != call_tmp[656437] call_tmp[656451]))
    unknown call_tmp[656461] "expr temp" "maybe param" "maybe type" "temp"
    (656464 'move' call_tmp[656461](127664 call _cond_test call_tmp[656456]))
    if call_tmp[656461]
    {
      (517597 'move' ret[517592](517596 'deref' 0))
      gotoReturn _end_==[517590] _end_==[517590]
    }
    {
      unknown call_tmp[656468] "expr temp" "maybe param" "maybe type" "temp"
      (656471 'move' call_tmp[656468](127563 call _value _mt[243] d1[127523]))
      unknown call_tmp[656475] "expr temp" "maybe param" "maybe type" "temp"
      (656478 'move' call_tmp[656475](127567 call _value _mt[243] d2[127529]))
      unknown call_tmp[656480] "expr temp" "maybe param" "maybe type" "temp"
      (656483 'move' call_tmp[656480](127570 call == call_tmp[656468] call_tmp[656475]))
      unknown call_tmp[656485] "expr temp" "maybe param" "maybe type" "temp"
      (656488 'move' call_tmp[656485](127660 call _cond_test call_tmp[656480]))
      if call_tmp[656485]
      {
        (517602 'move' ret[517592](517601 'deref' 1))
        gotoReturn _end_==[517590] _end_==[517590]
      }
      {
        {
          unknown i[127613] "dead at end of block" "insert auto destroy"
          (542989 'init var' i[127613] 0)
          (480067 'end of statement')
          unknown tmp[127614] "maybe param" "temp"
          unknown call_tmp[656492] "expr temp" "maybe param" "maybe type" "temp"
          (656495 'move' call_tmp[656492](127578 call _value _mt[243] d1[127523]))
          unknown call_tmp[656499] "expr temp" "maybe param" "maybe type" "temp"
          (656502 'move' call_tmp[656499](127581 call rank _mt[243] call_tmp[656492]))
          unknown call_tmp[656504] "expr temp" "maybe param" "maybe type" "temp"
          (656507 'move' call_tmp[656504](127585 call - call_tmp[656499] 1))
          (127626 'move' tmp[127614](127624 call chpl_compute_low_param_loop_bound 0 call_tmp[656504]))
          unknown tmp[127615] "maybe param" "temp"
          unknown call_tmp[656511] "expr temp" "maybe param" "maybe type" "temp"
          (656514 'move' call_tmp[656511](127635 call _value _mt[243] d1[127523]))
          unknown call_tmp[656518] "expr temp" "maybe param" "maybe type" "temp"
          (656521 'move' call_tmp[656518](127633 call rank _mt[243] call_tmp[656511]))
          unknown call_tmp[656523] "expr temp" "maybe param" "maybe type" "temp"
          (656526 'move' call_tmp[656523](127631 call - call_tmp[656518] 1))
          (127642 'move' tmp[127615](127640 call chpl_compute_high_param_loop_bound 0 call_tmp[656523]))
          unknown tmp[127616] "maybe param" "temp"
          (127645 'move' tmp[127616] 1)
          ParamForLoop[127647]
          { i[127613] tmp[127614] tmp[127615] tmp[127616]
            unknown call_tmp[656530] "expr temp" "maybe param" "maybe type" "temp"
            (656533 'move' call_tmp[656530](127595 call(127590 call (partial) dim _mt[243] d1[127523]) i[127613]))
            unknown call_tmp[656537] "expr temp" "maybe param" "maybe type" "temp"
            (656540 'move' call_tmp[656537](127602 call(127597 call (partial) dim _mt[243] d2[127529]) i[127613]))
            unknown call_tmp[656542] "expr temp" "maybe param" "maybe type" "temp"
            (656545 'move' call_tmp[656542](127603 call != call_tmp[656530] call_tmp[656537]))
            unknown call_tmp[656547] "expr temp" "maybe param" "maybe type" "temp"
            (656550 'move' call_tmp[656547](127608 call _cond_test call_tmp[656542]))
            if call_tmp[656547]
            {
              (517607 'move' ret[517592](517606 'deref' 0))
              gotoReturn _end_==[517590] _end_==[517590]
            }
          }
          label _unused_continueLabel[127618]
          label _breakLabel[127617]
        }
        (517612 'move' ret[517592](517611 'deref' 1))
        gotoReturn _end_==[517590] _end_==[517590]
      }
    }
    label _end_==[517590]
    (517594 return ret[517592])
  }
  where {
    unknown tmp[425278] "maybe param" "temp"
    (425289 'move' tmp[425278](127535 call isRectangularDom d1[127523]))
    unknown call_tmp[656552] "expr temp" "maybe param" "maybe type" "temp"
    (656555 'move' call_tmp[656552](425291 call _cond_invalid tmp[425278]))
    if call_tmp[656552]
    {
      (425294 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565938] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565939] "maybe param" "temp"
    unknown call_tmp[656557] "expr temp" "maybe param" "maybe type" "temp"
    (656560 'move' call_tmp[656557](425279 call isTrue tmp[425278]))
    (565944 'move' tmp[565939](565942 call _cond_test call_tmp[656557]))
    if tmp[565939]
    {
      unknown tmp[565946] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656562] "expr temp" "maybe param" "maybe type" "temp"
      (656565 'move' call_tmp[656562](127539 call isRectangularDom d2[127529]))
      (565948 'move' tmp[565946](425282 call isTrue call_tmp[656562]))
      (565953 'move' tmp[565938](565950 '_paramFoldLogical' tmp[565939] tmp[565946]))
    }
    {
      (565958 'move' tmp[565938](565955 '_paramFoldLogical' tmp[565939] 0))
    }
    (748327 call chpl_statementLevelSymbol tmp[565938])
  }
  function !=[127679](arg d1[127676]:_domain[125914](?), arg d2[127682]:_domain[125914](?)) : _unknown[51] "inline"
  {
    unknown ret[517618] "RVV" "temp"
    unknown call_tmp[656569] "expr temp" "maybe param" "maybe type" "temp"
    (656572 'move' call_tmp[656569](127696 call _value _mt[243] d1[127676]))
    unknown call_tmp[656576] "expr temp" "maybe param" "maybe type" "temp"
    (656579 'move' call_tmp[656576](127699 call rank _mt[243] call_tmp[656569]))
    unknown call_tmp[656583] "expr temp" "maybe param" "maybe type" "temp"
    (656586 'move' call_tmp[656583](127703 call _value _mt[243] d2[127682]))
    unknown call_tmp[656590] "expr temp" "maybe param" "maybe type" "temp"
    (656593 'move' call_tmp[656590](127706 call rank _mt[243] call_tmp[656583]))
    unknown call_tmp[656595] "expr temp" "maybe param" "maybe type" "temp"
    (656598 'move' call_tmp[656595](127709 call != call_tmp[656576] call_tmp[656590]))
    unknown call_tmp[656600] "expr temp" "maybe param" "maybe type" "temp"
    (656603 'move' call_tmp[656600](127817 call _cond_test call_tmp[656595]))
    if call_tmp[656600]
    {
      (517623 'move' ret[517618](517622 'deref' 1))
      gotoReturn _end_!=[517616] _end_!=[517616]
    }
    {
      unknown call_tmp[656607] "expr temp" "maybe param" "maybe type" "temp"
      (656610 'move' call_tmp[656607](127716 call _value _mt[243] d1[127676]))
      unknown call_tmp[656614] "expr temp" "maybe param" "maybe type" "temp"
      (656617 'move' call_tmp[656614](127720 call _value _mt[243] d2[127682]))
      unknown call_tmp[656619] "expr temp" "maybe param" "maybe type" "temp"
      (656622 'move' call_tmp[656619](127723 call == call_tmp[656607] call_tmp[656614]))
      unknown call_tmp[656624] "expr temp" "maybe param" "maybe type" "temp"
      (656627 'move' call_tmp[656624](127813 call _cond_test call_tmp[656619]))
      if call_tmp[656624]
      {
        (517628 'move' ret[517618](517627 'deref' 0))
        gotoReturn _end_!=[517616] _end_!=[517616]
      }
      {
        {
          unknown i[127766] "dead at end of block" "insert auto destroy"
          (542991 'init var' i[127766] 0)
          (480072 'end of statement')
          unknown tmp[127767] "maybe param" "temp"
          unknown call_tmp[656631] "expr temp" "maybe param" "maybe type" "temp"
          (656634 'move' call_tmp[656631](127731 call _value _mt[243] d1[127676]))
          unknown call_tmp[656638] "expr temp" "maybe param" "maybe type" "temp"
          (656641 'move' call_tmp[656638](127734 call rank _mt[243] call_tmp[656631]))
          unknown call_tmp[656643] "expr temp" "maybe param" "maybe type" "temp"
          (656646 'move' call_tmp[656643](127738 call - call_tmp[656638] 1))
          (127779 'move' tmp[127767](127777 call chpl_compute_low_param_loop_bound 0 call_tmp[656643]))
          unknown tmp[127768] "maybe param" "temp"
          unknown call_tmp[656650] "expr temp" "maybe param" "maybe type" "temp"
          (656653 'move' call_tmp[656650](127788 call _value _mt[243] d1[127676]))
          unknown call_tmp[656657] "expr temp" "maybe param" "maybe type" "temp"
          (656660 'move' call_tmp[656657](127786 call rank _mt[243] call_tmp[656650]))
          unknown call_tmp[656662] "expr temp" "maybe param" "maybe type" "temp"
          (656665 'move' call_tmp[656662](127784 call - call_tmp[656657] 1))
          (127795 'move' tmp[127768](127793 call chpl_compute_high_param_loop_bound 0 call_tmp[656662]))
          unknown tmp[127769] "maybe param" "temp"
          (127798 'move' tmp[127769] 1)
          ParamForLoop[127800]
          { i[127766] tmp[127767] tmp[127768] tmp[127769]
            unknown call_tmp[656669] "expr temp" "maybe param" "maybe type" "temp"
            (656672 'move' call_tmp[656669](127748 call(127743 call (partial) dim _mt[243] d1[127676]) i[127766]))
            unknown call_tmp[656676] "expr temp" "maybe param" "maybe type" "temp"
            (656679 'move' call_tmp[656676](127755 call(127750 call (partial) dim _mt[243] d2[127682]) i[127766]))
            unknown call_tmp[656681] "expr temp" "maybe param" "maybe type" "temp"
            (656684 'move' call_tmp[656681](127756 call != call_tmp[656669] call_tmp[656676]))
            unknown call_tmp[656686] "expr temp" "maybe param" "maybe type" "temp"
            (656689 'move' call_tmp[656686](127761 call _cond_test call_tmp[656681]))
            if call_tmp[656686]
            {
              (517633 'move' ret[517618](517632 'deref' 1))
              gotoReturn _end_!=[517616] _end_!=[517616]
            }
          }
          label _unused_continueLabel[127771]
          label _breakLabel[127770]
        }
        (517638 'move' ret[517618](517637 'deref' 0))
        gotoReturn _end_!=[517616] _end_!=[517616]
      }
    }
    label _end_!=[517616]
    (517620 return ret[517618])
  }
  where {
    unknown tmp[425299] "maybe param" "temp"
    (425310 'move' tmp[425299](127688 call isRectangularDom d1[127676]))
    unknown call_tmp[656691] "expr temp" "maybe param" "maybe type" "temp"
    (656694 'move' call_tmp[656691](425312 call _cond_invalid tmp[425299]))
    if call_tmp[656691]
    {
      (425315 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565965] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565966] "maybe param" "temp"
    unknown call_tmp[656696] "expr temp" "maybe param" "maybe type" "temp"
    (656699 'move' call_tmp[656696](425300 call isTrue tmp[425299]))
    (565971 'move' tmp[565966](565969 call _cond_test call_tmp[656696]))
    if tmp[565966]
    {
      unknown tmp[565973] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656701] "expr temp" "maybe param" "maybe type" "temp"
      (656704 'move' call_tmp[656701](127692 call isRectangularDom d2[127682]))
      (565975 'move' tmp[565973](425303 call isTrue call_tmp[656701]))
      (565980 'move' tmp[565965](565977 '_paramFoldLogical' tmp[565966] tmp[565973]))
    }
    {
      (565985 'move' tmp[565965](565982 '_paramFoldLogical' tmp[565966] 0))
    }
    (748329 call chpl_statementLevelSymbol tmp[565965])
  }
  function ==[127832](arg d1[127829]:_domain[125914](?), arg d2[127835]:_domain[125914](?)) : _unknown[51] "inline"
  {
    unknown ret[517644] "RVV" "temp"
    unknown call_tmp[656708] "expr temp" "maybe param" "maybe type" "temp"
    (656711 'move' call_tmp[656708](127849 call _value _mt[243] d1[127829]))
    unknown call_tmp[656715] "expr temp" "maybe param" "maybe type" "temp"
    (656718 'move' call_tmp[656715](127853 call _value _mt[243] d2[127835]))
    unknown call_tmp[656720] "expr temp" "maybe param" "maybe type" "temp"
    (656723 'move' call_tmp[656720](127856 call == call_tmp[656708] call_tmp[656715]))
    unknown call_tmp[656725] "expr temp" "maybe param" "maybe type" "temp"
    (656728 'move' call_tmp[656725](127861 call _cond_test call_tmp[656720]))
    if call_tmp[656725]
    {
      (517649 'move' ret[517644](517648 'deref' 1))
      gotoReturn _end_==[517642] _end_==[517642]
    }
    unknown call_tmp[656732] "expr temp" "maybe param" "maybe type" "temp"
    (656735 'move' call_tmp[656732](127868 call size _mt[243] d1[127829]))
    unknown call_tmp[656739] "expr temp" "maybe param" "maybe type" "temp"
    (656742 'move' call_tmp[656739](127872 call size _mt[243] d2[127835]))
    unknown call_tmp[656744] "expr temp" "maybe param" "maybe type" "temp"
    (656747 'move' call_tmp[656744](127875 call != call_tmp[656732] call_tmp[656739]))
    unknown call_tmp[656749] "expr temp" "maybe param" "maybe type" "temp"
    (656752 'move' call_tmp[656749](127880 call _cond_test call_tmp[656744]))
    if call_tmp[656749]
    {
      (517654 'move' ret[517644](517653 'deref' 0))
      gotoReturn _end_==[517642] _end_==[517642]
    }
    {
      unknown _indexOfInterest[127904] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127905] "expr temp" "temp"
      (127914 'move' _iterator[127905](127912 call _getIterator d1[127829]))
      Defer
      {
        {
          (127930 call _freeIterator _iterator[127905])
        }
      }
      { scopeless type
        (127919 'move' _indexOfInterest[127904](127916 call iteratorIndex _iterator[127905]))
      }
      ForLoop[127906]
      {
        unknown idx[127923] "index var" "insert auto destroy"
        (480078 'end of statement')
        (127925 'move' idx[127923] _indexOfInterest[127904])
        (480079 'end of statement' idx[127923])
        unknown call_tmp[656756] "expr temp" "maybe param" "maybe type" "temp"
        (656759 'move' call_tmp[656756](127893 call(127888 call (partial) contains _mt[243] d2[127835]) idx[127923]))
        unknown call_tmp[656761] "expr temp" "maybe param" "maybe type" "temp"
        (656764 'move' call_tmp[656761](127894 call ! call_tmp[656756]))
        unknown call_tmp[656766] "expr temp" "maybe param" "maybe type" "temp"
        (656769 'move' call_tmp[656766](127899 call _cond_test call_tmp[656761]))
        if call_tmp[656766]
        {
          (517659 'move' ret[517644](517658 'deref' 0))
          gotoReturn _end_==[517642] _end_==[517642]
        }
        label _continueLabel[127909]
        _indexOfInterest[127904]
        _iterator[127905]
      }
      label _breakLabel[127910]
    }
    (517664 'move' ret[517644](517663 'deref' 1))
    label _end_==[517642]
    (517646 return ret[517644])
  }
  where {
    unknown tmp[425320] "maybe param" "temp"
    (425331 'move' tmp[425320](127841 call isAssociativeDom d1[127829]))
    unknown call_tmp[656771] "expr temp" "maybe param" "maybe type" "temp"
    (656774 'move' call_tmp[656771](425333 call _cond_invalid tmp[425320]))
    if call_tmp[656771]
    {
      (425336 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[565992] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[565993] "maybe param" "temp"
    unknown call_tmp[656776] "expr temp" "maybe param" "maybe type" "temp"
    (656779 'move' call_tmp[656776](425321 call isTrue tmp[425320]))
    (565998 'move' tmp[565993](565996 call _cond_test call_tmp[656776]))
    if tmp[565993]
    {
      unknown tmp[566000] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656781] "expr temp" "maybe param" "maybe type" "temp"
      (656784 'move' call_tmp[656781](127845 call isAssociativeDom d2[127835]))
      (566002 'move' tmp[566000](425324 call isTrue call_tmp[656781]))
      (566007 'move' tmp[565992](566004 '_paramFoldLogical' tmp[565993] tmp[566000]))
    }
    {
      (566012 'move' tmp[565992](566009 '_paramFoldLogical' tmp[565993] 0))
    }
    (748331 call chpl_statementLevelSymbol tmp[565992])
  }
  function !=[127949](arg d1[127946]:_domain[125914](?), arg d2[127952]:_domain[125914](?)) : _unknown[51] "inline"
  {
    unknown ret[517668] "RVV" "temp"
    unknown call_tmp[656788] "expr temp" "maybe param" "maybe type" "temp"
    (656791 'move' call_tmp[656788](127966 call _value _mt[243] d1[127946]))
    unknown call_tmp[656795] "expr temp" "maybe param" "maybe type" "temp"
    (656798 'move' call_tmp[656795](127970 call _value _mt[243] d2[127952]))
    unknown call_tmp[656800] "expr temp" "maybe param" "maybe type" "temp"
    (656803 'move' call_tmp[656800](127973 call == call_tmp[656788] call_tmp[656795]))
    unknown call_tmp[656805] "expr temp" "maybe param" "maybe type" "temp"
    (656808 'move' call_tmp[656805](127978 call _cond_test call_tmp[656800]))
    if call_tmp[656805]
    {
      (517673 'move' ret[517668](517672 'deref' 0))
      gotoReturn _end_!=[517666] _end_!=[517666]
    }
    unknown call_tmp[656812] "expr temp" "maybe param" "maybe type" "temp"
    (656815 'move' call_tmp[656812](127985 call size _mt[243] d1[127946]))
    unknown call_tmp[656819] "expr temp" "maybe param" "maybe type" "temp"
    (656822 'move' call_tmp[656819](127989 call size _mt[243] d2[127952]))
    unknown call_tmp[656824] "expr temp" "maybe param" "maybe type" "temp"
    (656827 'move' call_tmp[656824](127992 call != call_tmp[656812] call_tmp[656819]))
    unknown call_tmp[656829] "expr temp" "maybe param" "maybe type" "temp"
    (656832 'move' call_tmp[656829](127997 call _cond_test call_tmp[656824]))
    if call_tmp[656829]
    {
      (517678 'move' ret[517668](517677 'deref' 1))
      gotoReturn _end_!=[517666] _end_!=[517666]
    }
    {
      unknown _indexOfInterest[128021] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128022] "expr temp" "temp"
      (128031 'move' _iterator[128022](128029 call _getIterator d1[127946]))
      Defer
      {
        {
          (128047 call _freeIterator _iterator[128022])
        }
      }
      { scopeless type
        (128036 'move' _indexOfInterest[128021](128033 call iteratorIndex _iterator[128022]))
      }
      ForLoop[128023]
      {
        unknown idx[128040] "index var" "insert auto destroy"
        (480086 'end of statement')
        (128042 'move' idx[128040] _indexOfInterest[128021])
        (480087 'end of statement' idx[128040])
        unknown call_tmp[656836] "expr temp" "maybe param" "maybe type" "temp"
        (656839 'move' call_tmp[656836](128010 call(128005 call (partial) contains _mt[243] d2[127952]) idx[128040]))
        unknown call_tmp[656841] "expr temp" "maybe param" "maybe type" "temp"
        (656844 'move' call_tmp[656841](128011 call ! call_tmp[656836]))
        unknown call_tmp[656846] "expr temp" "maybe param" "maybe type" "temp"
        (656849 'move' call_tmp[656846](128016 call _cond_test call_tmp[656841]))
        if call_tmp[656846]
        {
          (517683 'move' ret[517668](517682 'deref' 1))
          gotoReturn _end_!=[517666] _end_!=[517666]
        }
        label _continueLabel[128026]
        _indexOfInterest[128021]
        _iterator[128022]
      }
      label _breakLabel[128027]
    }
    (517688 'move' ret[517668](517687 'deref' 0))
    label _end_!=[517666]
    (517670 return ret[517668])
  }
  where {
    unknown tmp[425341] "maybe param" "temp"
    (425352 'move' tmp[425341](127958 call isAssociativeDom d1[127946]))
    unknown call_tmp[656851] "expr temp" "maybe param" "maybe type" "temp"
    (656854 'move' call_tmp[656851](425354 call _cond_invalid tmp[425341]))
    if call_tmp[656851]
    {
      (425357 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566019] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566020] "maybe param" "temp"
    unknown call_tmp[656856] "expr temp" "maybe param" "maybe type" "temp"
    (656859 'move' call_tmp[656856](425342 call isTrue tmp[425341]))
    (566025 'move' tmp[566020](566023 call _cond_test call_tmp[656856]))
    if tmp[566020]
    {
      unknown tmp[566027] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656861] "expr temp" "maybe param" "maybe type" "temp"
      (656864 'move' call_tmp[656861](127962 call isAssociativeDom d2[127952]))
      (566029 'move' tmp[566027](425345 call isTrue call_tmp[656861]))
      (566034 'move' tmp[566019](566031 '_paramFoldLogical' tmp[566020] tmp[566027]))
    }
    {
      (566039 'move' tmp[566019](566036 '_paramFoldLogical' tmp[566020] 0))
    }
    (748333 call chpl_statementLevelSymbol tmp[566019])
  }
  function ==[128066](arg d1[128063]:_domain[125914](?), arg d2[128069]:_domain[125914](?)) : _unknown[51] "inline"
  {
    unknown ret[517692] "RVV" "temp"
    unknown call_tmp[656868] "expr temp" "maybe param" "maybe type" "temp"
    (656871 'move' call_tmp[656868](128083 call _value _mt[243] d1[128063]))
    unknown call_tmp[656875] "expr temp" "maybe param" "maybe type" "temp"
    (656878 'move' call_tmp[656875](128087 call _value _mt[243] d2[128069]))
    unknown call_tmp[656880] "expr temp" "maybe param" "maybe type" "temp"
    (656883 'move' call_tmp[656880](128090 call == call_tmp[656868] call_tmp[656875]))
    unknown call_tmp[656885] "expr temp" "maybe param" "maybe type" "temp"
    (656888 'move' call_tmp[656885](128095 call _cond_test call_tmp[656880]))
    if call_tmp[656885]
    {
      (517697 'move' ret[517692](517696 'deref' 1))
      gotoReturn _end_==[517690] _end_==[517690]
    }
    unknown call_tmp[656892] "expr temp" "maybe param" "maybe type" "temp"
    (656895 'move' call_tmp[656892](128102 call size _mt[243] d1[128063]))
    unknown call_tmp[656899] "expr temp" "maybe param" "maybe type" "temp"
    (656902 'move' call_tmp[656899](128106 call size _mt[243] d2[128069]))
    unknown call_tmp[656904] "expr temp" "maybe param" "maybe type" "temp"
    (656907 'move' call_tmp[656904](128109 call != call_tmp[656892] call_tmp[656899]))
    unknown call_tmp[656909] "expr temp" "maybe param" "maybe type" "temp"
    (656912 'move' call_tmp[656909](128114 call _cond_test call_tmp[656904]))
    if call_tmp[656909]
    {
      (517702 'move' ret[517692](517701 'deref' 0))
      gotoReturn _end_==[517690] _end_==[517690]
    }
    unknown call_tmp[656916] "expr temp" "maybe param" "maybe type" "temp"
    (656919 'move' call_tmp[656916](128120 call _value _mt[243] d1[128063]))
    unknown call_tmp[656923] "expr temp" "maybe param" "maybe type" "temp"
    (656926 'move' call_tmp[656923](128123 call parentDom _mt[243] call_tmp[656916]))
    unknown call_tmp[656930] "expr temp" "maybe param" "maybe type" "temp"
    (656933 'move' call_tmp[656930](128127 call _value _mt[243] d2[128069]))
    unknown call_tmp[656937] "expr temp" "maybe param" "maybe type" "temp"
    (656940 'move' call_tmp[656937](128130 call parentDom _mt[243] call_tmp[656930]))
    unknown call_tmp[656942] "expr temp" "maybe param" "maybe type" "temp"
    (656945 'move' call_tmp[656942](128133 call != call_tmp[656923] call_tmp[656937]))
    unknown call_tmp[656947] "expr temp" "maybe param" "maybe type" "temp"
    (656950 'move' call_tmp[656947](128138 call _cond_test call_tmp[656942]))
    if call_tmp[656947]
    {
      (517707 'move' ret[517692](517706 'deref' 0))
      gotoReturn _end_==[517690] _end_==[517690]
    }
    {
      unknown _indexOfInterest[128162] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128163] "expr temp" "temp"
      (128172 'move' _iterator[128163](128170 call _getIterator d1[128063]))
      Defer
      {
        {
          (128188 call _freeIterator _iterator[128163])
        }
      }
      { scopeless type
        (128177 'move' _indexOfInterest[128162](128174 call iteratorIndex _iterator[128163]))
      }
      ForLoop[128164]
      {
        unknown idx[128181] "index var" "insert auto destroy"
        (480095 'end of statement')
        (128183 'move' idx[128181] _indexOfInterest[128162])
        (480096 'end of statement' idx[128181])
        unknown call_tmp[656954] "expr temp" "maybe param" "maybe type" "temp"
        (656957 'move' call_tmp[656954](128151 call(128146 call (partial) contains _mt[243] d2[128069]) idx[128181]))
        unknown call_tmp[656959] "expr temp" "maybe param" "maybe type" "temp"
        (656962 'move' call_tmp[656959](128152 call ! call_tmp[656954]))
        unknown call_tmp[656964] "expr temp" "maybe param" "maybe type" "temp"
        (656967 'move' call_tmp[656964](128157 call _cond_test call_tmp[656959]))
        if call_tmp[656964]
        {
          (517712 'move' ret[517692](517711 'deref' 0))
          gotoReturn _end_==[517690] _end_==[517690]
        }
        label _continueLabel[128167]
        _indexOfInterest[128162]
        _iterator[128163]
      }
      label _breakLabel[128168]
    }
    (517717 'move' ret[517692](517716 'deref' 1))
    label _end_==[517690]
    (517694 return ret[517692])
  }
  where {
    unknown tmp[425362] "maybe param" "temp"
    (425373 'move' tmp[425362](128075 call isSparseDom d1[128063]))
    unknown call_tmp[656969] "expr temp" "maybe param" "maybe type" "temp"
    (656972 'move' call_tmp[656969](425375 call _cond_invalid tmp[425362]))
    if call_tmp[656969]
    {
      (425378 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566046] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566047] "maybe param" "temp"
    unknown call_tmp[656974] "expr temp" "maybe param" "maybe type" "temp"
    (656977 'move' call_tmp[656974](425363 call isTrue tmp[425362]))
    (566052 'move' tmp[566047](566050 call _cond_test call_tmp[656974]))
    if tmp[566047]
    {
      unknown tmp[566054] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[656979] "expr temp" "maybe param" "maybe type" "temp"
      (656982 'move' call_tmp[656979](128079 call isSparseDom d2[128069]))
      (566056 'move' tmp[566054](425366 call isTrue call_tmp[656979]))
      (566061 'move' tmp[566046](566058 '_paramFoldLogical' tmp[566047] tmp[566054]))
    }
    {
      (566066 'move' tmp[566046](566063 '_paramFoldLogical' tmp[566047] 0))
    }
    (748335 call chpl_statementLevelSymbol tmp[566046])
  }
  function !=[128207](arg d1[128204]:_domain[125914](?), arg d2[128210]:_domain[125914](?)) : _unknown[51] "inline"
  {
    unknown ret[517721] "RVV" "temp"
    unknown call_tmp[656986] "expr temp" "maybe param" "maybe type" "temp"
    (656989 'move' call_tmp[656986](128224 call _value _mt[243] d1[128204]))
    unknown call_tmp[656993] "expr temp" "maybe param" "maybe type" "temp"
    (656996 'move' call_tmp[656993](128228 call _value _mt[243] d2[128210]))
    unknown call_tmp[656998] "expr temp" "maybe param" "maybe type" "temp"
    (657001 'move' call_tmp[656998](128231 call == call_tmp[656986] call_tmp[656993]))
    unknown call_tmp[657003] "expr temp" "maybe param" "maybe type" "temp"
    (657006 'move' call_tmp[657003](128236 call _cond_test call_tmp[656998]))
    if call_tmp[657003]
    {
      (517726 'move' ret[517721](517725 'deref' 0))
      gotoReturn _end_!=[517719] _end_!=[517719]
    }
    unknown call_tmp[657010] "expr temp" "maybe param" "maybe type" "temp"
    (657013 'move' call_tmp[657010](128243 call size _mt[243] d1[128204]))
    unknown call_tmp[657017] "expr temp" "maybe param" "maybe type" "temp"
    (657020 'move' call_tmp[657017](128247 call size _mt[243] d2[128210]))
    unknown call_tmp[657022] "expr temp" "maybe param" "maybe type" "temp"
    (657025 'move' call_tmp[657022](128250 call != call_tmp[657010] call_tmp[657017]))
    unknown call_tmp[657027] "expr temp" "maybe param" "maybe type" "temp"
    (657030 'move' call_tmp[657027](128255 call _cond_test call_tmp[657022]))
    if call_tmp[657027]
    {
      (517731 'move' ret[517721](517730 'deref' 1))
      gotoReturn _end_!=[517719] _end_!=[517719]
    }
    unknown call_tmp[657034] "expr temp" "maybe param" "maybe type" "temp"
    (657037 'move' call_tmp[657034](128261 call _value _mt[243] d1[128204]))
    unknown call_tmp[657041] "expr temp" "maybe param" "maybe type" "temp"
    (657044 'move' call_tmp[657041](128264 call parentDom _mt[243] call_tmp[657034]))
    unknown call_tmp[657048] "expr temp" "maybe param" "maybe type" "temp"
    (657051 'move' call_tmp[657048](128268 call _value _mt[243] d2[128210]))
    unknown call_tmp[657055] "expr temp" "maybe param" "maybe type" "temp"
    (657058 'move' call_tmp[657055](128271 call parentDom _mt[243] call_tmp[657048]))
    unknown call_tmp[657060] "expr temp" "maybe param" "maybe type" "temp"
    (657063 'move' call_tmp[657060](128274 call != call_tmp[657041] call_tmp[657055]))
    unknown call_tmp[657065] "expr temp" "maybe param" "maybe type" "temp"
    (657068 'move' call_tmp[657065](128279 call _cond_test call_tmp[657060]))
    if call_tmp[657065]
    {
      (517736 'move' ret[517721](517735 'deref' 1))
      gotoReturn _end_!=[517719] _end_!=[517719]
    }
    {
      unknown _indexOfInterest[128303] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128304] "expr temp" "temp"
      (128313 'move' _iterator[128304](128311 call _getIterator d1[128204]))
      Defer
      {
        {
          (128329 call _freeIterator _iterator[128304])
        }
      }
      { scopeless type
        (128318 'move' _indexOfInterest[128303](128315 call iteratorIndex _iterator[128304]))
      }
      ForLoop[128305]
      {
        unknown idx[128322] "index var" "insert auto destroy"
        (480104 'end of statement')
        (128324 'move' idx[128322] _indexOfInterest[128303])
        (480105 'end of statement' idx[128322])
        unknown call_tmp[657072] "expr temp" "maybe param" "maybe type" "temp"
        (657075 'move' call_tmp[657072](128292 call(128287 call (partial) contains _mt[243] d2[128210]) idx[128322]))
        unknown call_tmp[657077] "expr temp" "maybe param" "maybe type" "temp"
        (657080 'move' call_tmp[657077](128293 call ! call_tmp[657072]))
        unknown call_tmp[657082] "expr temp" "maybe param" "maybe type" "temp"
        (657085 'move' call_tmp[657082](128298 call _cond_test call_tmp[657077]))
        if call_tmp[657082]
        {
          (517741 'move' ret[517721](517740 'deref' 1))
          gotoReturn _end_!=[517719] _end_!=[517719]
        }
        label _continueLabel[128308]
        _indexOfInterest[128303]
        _iterator[128304]
      }
      label _breakLabel[128309]
    }
    (517746 'move' ret[517721](517745 'deref' 0))
    label _end_!=[517719]
    (517723 return ret[517721])
  }
  where {
    unknown tmp[425383] "maybe param" "temp"
    (425394 'move' tmp[425383](128216 call isSparseDom d1[128204]))
    unknown call_tmp[657087] "expr temp" "maybe param" "maybe type" "temp"
    (657090 'move' call_tmp[657087](425396 call _cond_invalid tmp[425383]))
    if call_tmp[657087]
    {
      (425399 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566073] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566074] "maybe param" "temp"
    unknown call_tmp[657092] "expr temp" "maybe param" "maybe type" "temp"
    (657095 'move' call_tmp[657092](425384 call isTrue tmp[425383]))
    (566079 'move' tmp[566074](566077 call _cond_test call_tmp[657092]))
    if tmp[566074]
    {
      unknown tmp[566081] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657097] "expr temp" "maybe param" "maybe type" "temp"
      (657100 'move' call_tmp[657097](128220 call isSparseDom d2[128210]))
      (566083 'move' tmp[566081](425387 call isTrue call_tmp[657097]))
      (566088 'move' tmp[566073](566085 '_paramFoldLogical' tmp[566074] tmp[566081]))
    }
    {
      (566093 'move' tmp[566073](566090 '_paramFoldLogical' tmp[566074] 0))
    }
    (748337 call chpl_statementLevelSymbol tmp[566073])
  }
  function ==[128348](arg d1[128345]:_domain[125914](?), arg d2[128351]:_domain[125914](?)) param : _unknown[51] "inline"
  {
    unknown ret[517750] "RVV" "param" "temp"
    (517755 'move' ret[517750](517754 'deref' 0))
    (517752 return ret[517750])
  }
  function !=[128366](arg d1[128363]:_domain[125914](?), arg d2[128369]:_domain[125914](?)) param : _unknown[51] "inline"
  {
    unknown ret[517759] "RVV" "param" "temp"
    (517764 'move' ret[517759](517763 'deref' 1))
    (517761 return ret[517759])
  }
  function shouldReturnRvalueByConstRef[128382](arg t[128380]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517768] "RVV" "param" "temp"
    (517773 'move' ret[517768](517772 'deref' 1))
    (517770 return ret[517768])
  }
  function shouldReturnRvalueByValue[128394](arg t[128392]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[517777] "RVV" "param" "temp"
    unknown call_tmp[657102] "expr temp" "maybe param" "maybe type" "temp"
    (657105 'move' call_tmp[657102](128397 call ! PODValAccess[113749]))
    unknown call_tmp[657107] "expr temp" "maybe param" "maybe type" "temp"
    (657110 'move' call_tmp[657107](128402 call _cond_test call_tmp[657102]))
    if call_tmp[657107]
    {
      (517782 'move' ret[517777](517781 'deref' 0))
      gotoReturn _end_shouldReturnRvalueByValue[517775] _end_shouldReturnRvalueByValue[517775]
    }
    unknown call_tmp[657112] "expr temp" "maybe param" "maybe type" "temp"
    (657115 'move' call_tmp[657112](128411 call isPODType t[128392]))
    unknown call_tmp[657117] "expr temp" "maybe param" "maybe type" "temp"
    (657120 'move' call_tmp[657117](128415 call _cond_test call_tmp[657112]))
    if call_tmp[657117]
    {
      (517787 'move' ret[517777](517786 'deref' 1))
      gotoReturn _end_shouldReturnRvalueByValue[517775] _end_shouldReturnRvalueByValue[517775]
    }
    (517792 'move' ret[517777](517791 'deref' 0))
    label _end_shouldReturnRvalueByValue[517775]
    (517779 return ret[517777])
  }
  function _array[133600](?).chpl__serialize[128442](arg _mt[133604]:_MT[238], arg this[133602]:_array[133600](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[517796] "RVV" "temp"
    unknown call_tmp[657124] "expr temp" "maybe param" "maybe type" "temp"
    (657127 'move' call_tmp[657124](359781 call _instance _mt[243] this[133602]))
    unknown call_tmp[657131] "expr temp" "maybe param" "maybe type" "temp"
    (657134 'move' call_tmp[657131](128457 call(128453 call (partial) chpl__serialize _mt[243] call_tmp[657124])))
    (517801 'move' ret[517796](517800 'deref' call_tmp[657131]))
    (517798 return ret[517796])
  }
  where {
    unknown call_tmp[657138] "expr temp" "maybe param" "maybe type" "temp"
    (657141 'move' call_tmp[657138](359776 call _instance _mt[243] this[133602]))
    (128451 call(128447 call (partial) chpl__rvfMe _mt[243] call_tmp[657138]))
  }
  function _array[133600](?).chpl__deserialize[128468](arg _mt[133608]:_MT[238], arg this[133606]:_array[133600](?), arg data[128466]:_any[178](?)) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[517805] "RVV" "temp"
    unknown call_tmp[657145] "expr temp" "maybe param" "maybe type" "temp"
    (657148 'move' call_tmp[657145](128475 'static field type' this[133606] "_instance"))
    unknown call_tmp[657150] "expr temp" "maybe param" "maybe type" "temp"
    (657153 'move' call_tmp[657150](128477 call _to_borrowed call_tmp[657145]))
    unknown call_tmp[657157] "maybe param" "maybe type" "temp"
    (657160 'move' call_tmp[657157](128483 call(128478 call (partial) chpl__deserialize _mt[243] call_tmp[657150]) data[128466]))
    unknown arrinst[128484] "dead at end of block" "insert auto destroy"
    (542993 'init var' arrinst[128484] call_tmp[657157])
    (128487 'end of statement')
    unknown call_tmp[657162] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (657165 'move' call_tmp[657162](747920 'new' _array[133600](?) nullPid[113724] arrinst[128484](_unowned = 1)))
    (517810 'move' ret[517805](517809 'deref' call_tmp[657162]))
    gotoReturn _end_chpl__deserialize[517803] _end_chpl__deserialize[517803]
    (480116 'end of statement' arrinst[128484])
    label _end_chpl__deserialize[517803]
    (517807 return ret[517805])
  }
  function _array[133600](?).chpl__promotionType[128503](arg _mt[133612]:_MT[238], arg this[133610]:_array[133600](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[517816] "RVV" "temp" "type variable"
    unknown call_tmp[657169] "expr temp" "maybe param" "maybe type" "temp"
    (657172 'move' call_tmp[657169](359785 call _value _mt[243] this[133610]))
    unknown call_tmp[657176] "expr temp" "maybe param" "maybe type" "temp"
    (657179 'move' call_tmp[657176](128506 call eltType _mt[243] call_tmp[657169]))
    (517821 'move' ret[517816](517820 'deref' call_tmp[657176]))
    (517818 return ret[517816])
  }
  function _array[133600](?)._value[128516](arg _mt[133616]:_MT[238], arg this[133614]:_array[133600](?)) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    unknown ret[517825] "RVV" "temp"
    unknown call_tmp[657183] "expr temp" "maybe param" "maybe type" "temp"
    (657186 'move' call_tmp[657183](383789 call _instance _mt[243] this[133614]))
    unknown call_tmp[657188] "expr temp" "maybe param" "maybe type" "temp"
    (657191 'move' call_tmp[657188](128521 call _isPrivatized call_tmp[657183]))
    unknown call_tmp[657193] "expr temp" "maybe param" "maybe type" "temp"
    (657196 'move' call_tmp[657193](128535 call _cond_test call_tmp[657188]))
    if call_tmp[657193]
    {
      { scopeless type
        unknown call_type_tmp[492239] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[657200] "expr temp" "maybe param" "maybe type" "temp"
        (657203 'move' call_tmp[657200](383794 call _instance _mt[243] this[133614]))
        (492243 'move' call_type_tmp[492239](128524 'typeof' call_tmp[657200]))
      }
      unknown call_tmp[657207] "expr temp" "maybe param" "maybe type" "temp"
      (657210 'move' call_tmp[657207](383799 call _pid _mt[243] this[133614]))
      unknown call_tmp[657212] "expr temp" "maybe param" "maybe type" "temp"
      (657215 'move' call_tmp[657212](128527 call chpl_getPrivatizedCopy call_type_tmp[492239] call_tmp[657207]))
      (517830 'move' ret[517825](517829 'deref' call_tmp[657212]))
      gotoReturn _end__value[517823] _end__value[517823]
    }
    {
      unknown call_tmp[657219] "expr temp" "maybe param" "maybe type" "temp"
      (657222 'move' call_tmp[657219](383804 call _instance _mt[243] this[133614]))
      (517835 'move' ret[517825](517834 'deref' call_tmp[657219]))
      gotoReturn _end__value[517823] _end__value[517823]
    }
    label _end__value[517823]
    (517827 return ret[517825])
  }
  function _array[133600](?).chpl_forwarding_expr6__value[128549](arg _mt[133620]:_MT[238], arg this[133618]:_array[133600](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[517841] "RVV" "temp"
    (517845 'move' ret[517841](383808 call _value _mt[243] this[133618]))
    (517843 return ret[517841])
  }
  function _array[133600](?).deinit[128557](arg _mt[133624]:_MT[238], arg this[133622]:_array[133600](?)) : _unknown[51] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (128562 call _do_destroy_array this[133622])
    (517847 return _void[55])
  }
  function _array[133600](?).eltType[128569](arg _mt[133628]:_MT[238], arg this[133626]:_array[133600](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517851] "RVV" "temp" "type variable"
    unknown call_tmp[657228] "expr temp" "maybe param" "maybe type" "temp"
    (657231 'move' call_tmp[657228](359789 call _value _mt[243] this[133626]))
    unknown call_tmp[657235] "expr temp" "maybe param" "maybe type" "temp"
    (657238 'move' call_tmp[657235](128572 call eltType _mt[243] call_tmp[657228]))
    (517856 'move' ret[517851](517855 'deref' call_tmp[657235]))
    (517853 return ret[517851])
  }
  function _array[133600](?).idxType[128582](arg _mt[133632]:_MT[238], arg this[133630]:_array[133600](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517860] "RVV" "temp" "type variable"
    unknown call_tmp[657242] "expr temp" "maybe param" "maybe type" "temp"
    (657245 'move' call_tmp[657242](359793 call _value _mt[243] this[133630]))
    unknown call_tmp[657249] "expr temp" "maybe param" "maybe type" "temp"
    (657252 'move' call_tmp[657249](128585 call idxType _mt[243] call_tmp[657242]))
    (517865 'move' ret[517860](517864 'deref' call_tmp[657249]))
    (517862 return ret[517860])
  }
  function _array[133600](?)._dom[128595](arg _mt[133636]:_MT[238], arg this[133634]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517869] "RVV" "temp"
    unknown call_tmp[657256] "expr temp" "maybe param" "maybe type" "temp"
    (657259 'move' call_tmp[657256](359797 call _value _mt[243] this[133634]))
    unknown call_tmp[657263] "expr temp" "maybe param" "maybe type" "temp"
    (657266 'move' call_tmp[657263](128599 call dom _mt[243] call_tmp[657256]))
    unknown call_tmp[657268] "expr temp" "maybe param" "maybe type" "temp"
    (657271 'move' call_tmp[657268](128603 call _getDomain call_tmp[657263]))
    (517874 'move' ret[517869](517873 'deref' call_tmp[657268]))
    (517871 return ret[517869])
  }
  function _array[133600](?).rank[128611](arg _mt[133640]:_MT[238], arg this[133638]:_array[133600](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[517878] "RVV" "param" "temp"
    unknown call_tmp[657275] "expr temp" "maybe param" "maybe type" "temp"
    (657278 'move' call_tmp[657275](128614 call _dom _mt[243] this[133638]))
    unknown call_tmp[657282] "expr temp" "maybe param" "maybe type" "temp"
    (657285 'move' call_tmp[657282](128617 call rank _mt[243] call_tmp[657275]))
    (517883 'move' ret[517878](517882 'deref' call_tmp[657282]))
    (517880 return ret[517878])
  }
  function _array[133600](?).indices[128627](arg _mt[133644]:_MT[238], arg this[133642]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[517887] "RVV" "temp"
    unknown call_tmp[657289] "expr temp" "maybe param" "maybe type" "temp"
    (657292 'move' call_tmp[657289](383813 call _dom _mt[243] this[133642]))
    (517892 'move' ret[517887](517891 'deref' call_tmp[657289]))
    (517889 return ret[517887])
  }
  function _array[133600](?).checkAccess[128639](arg _mt[133648]:_MT[238], arg this[133646]:_array[133600](?), arg indices[128637]:_any[178](?), arg value[128641]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657294] "expr temp" "maybe param" "maybe type" "temp"
    (657297 'move' call_tmp[657294](128646 call isRectangularArr this[133646]))
    unknown call_tmp[657299] "expr temp" "maybe param" "maybe type" "temp"
    (657302 'move' call_tmp[657299](129162 call _cond_test call_tmp[657294]))
    if call_tmp[657299]
    {
      unknown call_tmp[657306] "expr temp" "maybe param" "maybe type" "temp"
      (657309 'move' call_tmp[657306](128655 call(128650 call (partial) dsiBoundsCheck _mt[243] value[128641]) indices[128637]))
      unknown call_tmp[657311] "expr temp" "maybe param" "maybe type" "temp"
      (657314 'move' call_tmp[657311](128656 call ! call_tmp[657306]))
      unknown call_tmp[657316] "expr temp" "maybe param" "maybe type" "temp"
      (657319 'move' call_tmp[657316](129157 call _cond_test call_tmp[657311]))
      if call_tmp[657316]
      {
        unknown call_tmp[657323] "expr temp" "maybe param" "maybe type" "temp"
        (657326 'move' call_tmp[657323](383819 call rank _mt[243] this[133646]))
        unknown call_tmp[657328] "expr temp" "maybe param" "maybe type" "temp"
        (657331 'move' call_tmp[657328](128660 call == call_tmp[657323] 1))
        unknown call_tmp[657333] "expr temp" "maybe param" "maybe type" "temp"
        (657336 'move' call_tmp[657333](129152 call _cond_test call_tmp[657328]))
        if call_tmp[657333]
        {
          unknown call_tmp[657338] "expr temp" "maybe param" "maybe type" "temp"
          (657341 'move' call_tmp[657338](128701 call indices[128637] 0))
          unknown call_tmp[657345] "expr temp" "maybe param" "maybe type" "temp"
          (657348 'move' call_tmp[657345](128720 call dom _mt[243] value[128641]))
          unknown call_tmp[657352] "expr temp" "maybe param" "maybe type" "temp"
          (657355 'move' call_tmp[657352](128728 call(128723 call (partial) dsiDim _mt[243] call_tmp[657345]) 0))
          (128729 call halt "array index out of bounds\n" "note: index was " call_tmp[657338] " but array bounds are " call_tmp[657352])
        }
        {
          unknown istr[128749] "dead at end of block" "insert auto destroy"
          (542995 'init var' istr[128749] "")
          (128752 'end of statement')
          unknown bstr[128771] "dead at end of block" "insert auto destroy"
          (542997 'init var' bstr[128771] "")
          (128774 'end of statement')
          {
            unknown i[128830] "dead at end of block" "insert auto destroy"
            (542999 'init var' i[128830] 0)
            (480128 'end of statement')
            unknown tmp[128831] "maybe param" "temp"
            unknown call_tmp[657359] "expr temp" "maybe param" "maybe type" "temp"
            (657362 'move' call_tmp[657359](383824 call rank _mt[243] this[133646]))
            unknown call_tmp[657364] "expr temp" "maybe param" "maybe type" "temp"
            (657367 'move' call_tmp[657364](128778 call - call_tmp[657359] 1))
            (128843 'move' tmp[128831](128841 call chpl_compute_low_param_loop_bound 0 call_tmp[657364]))
            unknown tmp[128832] "maybe param" "temp"
            unknown call_tmp[657371] "expr temp" "maybe param" "maybe type" "temp"
            (657374 'move' call_tmp[657371](383836 call rank _mt[243] this[133646]))
            unknown call_tmp[657376] "expr temp" "maybe param" "maybe type" "temp"
            (657379 'move' call_tmp[657376](128848 call - call_tmp[657371] 1))
            (128853 'move' tmp[128832](128851 call chpl_compute_high_param_loop_bound 0 call_tmp[657376]))
            unknown tmp[128833] "maybe param" "temp"
            (128856 'move' tmp[128833] 1)
            ParamForLoop[128858]
            { i[128830] tmp[128831] tmp[128832] tmp[128833]
              {
                unknown call_tmp[657381] "expr temp" "maybe param" "maybe type" "temp"
                (657384 'move' call_tmp[657381](128784 call != i[128830] 0))
                unknown call_tmp[657386] "expr temp" "maybe param" "maybe type" "temp"
                (657389 'move' call_tmp[657386](128797 call _cond_test call_tmp[657381]))
                if call_tmp[657386]
                {
                  (128788 call += istr[128749] ", ")
                  (480129 'end of statement' istr[128749])
                  (128794 call += bstr[128771] ", ")
                  (480131 'end of statement' bstr[128771])
                }
                unknown call_tmp[657391] "expr temp" "maybe param" "maybe type" "temp"
                (657394 'move' call_tmp[657391](128806 call indices[128637] i[128830]))
                unknown call_tmp[657396] "expr temp" "maybe param" "maybe type" "temp"
                (657399 'move' call_tmp[657396](128808 call _cast string[26] call_tmp[657391]))
                (128810 call += istr[128749] call_tmp[657396])
                (480133 'end of statement' istr[128749] i[128830])
                unknown call_tmp[657403] "expr temp" "maybe param" "maybe type" "temp"
                (657406 'move' call_tmp[657403](128815 call dom _mt[243] value[128641]))
                unknown call_tmp[657410] "expr temp" "maybe param" "maybe type" "temp"
                (657413 'move' call_tmp[657410](128823 call(128818 call (partial) dsiDim _mt[243] call_tmp[657403]) i[128830]))
                unknown call_tmp[657415] "expr temp" "maybe param" "maybe type" "temp"
                (657418 'move' call_tmp[657415](128825 call _cast string[26] call_tmp[657410]))
                (128827 call += bstr[128771] call_tmp[657415])
                (480136 'end of statement' bstr[128771] i[128830])
              }
            }
            label _unused_continueLabel[128835]
            label _breakLabel[128834]
          }
          unknown dimstr[128884] "dead at end of block" "insert auto destroy"
          (543001 'init var' dimstr[128884] "")
          (128887 'end of statement')
          {
            unknown i[129038] "dead at end of block" "insert auto destroy"
            (543003 'init var' i[129038] 0)
            (480139 'end of statement')
            unknown tmp[129039] "maybe param" "temp"
            unknown call_tmp[657422] "expr temp" "maybe param" "maybe type" "temp"
            (657425 'move' call_tmp[657422](383840 call rank _mt[243] this[133646]))
            unknown call_tmp[657427] "expr temp" "maybe param" "maybe type" "temp"
            (657430 'move' call_tmp[657427](128891 call - call_tmp[657422] 1))
            (129051 'move' tmp[129039](129049 call chpl_compute_low_param_loop_bound 0 call_tmp[657427]))
            unknown tmp[129040] "maybe param" "temp"
            unknown call_tmp[657434] "expr temp" "maybe param" "maybe type" "temp"
            (657437 'move' call_tmp[657434](383853 call rank _mt[243] this[133646]))
            unknown call_tmp[657439] "expr temp" "maybe param" "maybe type" "temp"
            (657442 'move' call_tmp[657439](129056 call - call_tmp[657434] 1))
            (129061 'move' tmp[129040](129059 call chpl_compute_high_param_loop_bound 0 call_tmp[657439]))
            unknown tmp[129041] "maybe param" "temp"
            (129064 'move' tmp[129041] 1)
            ParamForLoop[129066]
            { i[129038] tmp[129039] tmp[129040] tmp[129041]
              {
                unknown call_tmp[657446] "expr temp" "maybe param" "maybe type" "temp"
                (657449 'move' call_tmp[657446](128896 call dom _mt[243] value[128641]))
                unknown call_tmp[657453] "expr temp" "maybe param" "maybe type" "temp"
                (657456 'move' call_tmp[657453](128904 call(128899 call (partial) dsiDim _mt[243] call_tmp[657446]) i[129038]))
                unknown call_tmp[657460] "expr temp" "maybe param" "maybe type" "temp"
                (657463 'move' call_tmp[657460](128913 call indices[128637] i[129038]))
                unknown call_tmp[657465] "expr temp" "maybe param" "maybe type" "temp"
                (657468 'move' call_tmp[657465](128915 call(128907 call (partial) boundsCheck _mt[243] call_tmp[657453]) call_tmp[657460]))
                unknown call_tmp[657470] "expr temp" "maybe param" "maybe type" "temp"
                (657473 'move' call_tmp[657470](128916 call ! call_tmp[657465]))
                unknown call_tmp[657475] "expr temp" "maybe param" "maybe type" "temp"
                (657478 'move' call_tmp[657475](129033 call _cond_test call_tmp[657470]))
                if call_tmp[657475]
                {
                  unknown call_tmp[657480] "expr temp" "maybe param" "maybe type" "temp"
                  (657483 'move' call_tmp[657480](128936 call == dimstr[128884] ""))
                  unknown call_tmp[657485] "expr temp" "maybe param" "maybe type" "temp"
                  (657488 'move' call_tmp[657485](129028 call _cond_test call_tmp[657480]))
                  if call_tmp[657485]
                  {
                    unknown call_tmp[657490] "expr temp" "maybe param" "maybe type" "temp"
                    (657493 'move' call_tmp[657490](128958 call _cast string[26] i[129038]))
                    unknown call_tmp[657495] "expr temp" "maybe param" "maybe type" "temp"
                    (657498 'move' call_tmp[657495](128960 call + "out of bounds in dimension " call_tmp[657490]))
                    unknown call_tmp[657500] "expr temp" "maybe param" "maybe type" "temp"
                    (657503 'move' call_tmp[657500](128979 call + call_tmp[657495] " because index "))
                    unknown call_tmp[657505] "expr temp" "maybe param" "maybe type" "temp"
                    (657508 'move' call_tmp[657505](128984 call indices[128637] i[129038]))
                    unknown call_tmp[657510] "expr temp" "maybe param" "maybe type" "temp"
                    (657513 'move' call_tmp[657510](128986 call _cast string[26] call_tmp[657505]))
                    unknown call_tmp[657515] "expr temp" "maybe param" "maybe type" "temp"
                    (657518 'move' call_tmp[657515](128988 call + call_tmp[657500] call_tmp[657510]))
                    unknown call_tmp[657520] "expr temp" "maybe param" "maybe type" "temp"
                    (657523 'move' call_tmp[657520](129007 call + call_tmp[657515] " is not in "))
                    unknown call_tmp[657527] "expr temp" "maybe param" "maybe type" "temp"
                    (657530 'move' call_tmp[657527](129010 call dom _mt[243] value[128641]))
                    unknown call_tmp[657534] "expr temp" "maybe param" "maybe type" "temp"
                    (657537 'move' call_tmp[657534](129018 call(129013 call (partial) dsiDim _mt[243] call_tmp[657527]) i[129038]))
                    unknown call_tmp[657539] "expr temp" "maybe param" "maybe type" "temp"
                    (657542 'move' call_tmp[657539](129020 call _cast string[26] call_tmp[657534]))
                    unknown call_tmp[657544] "expr temp" "maybe param" "maybe type" "temp"
                    (657547 'move' call_tmp[657544](129022 call + call_tmp[657520] call_tmp[657539]))
                    (129024 call = dimstr[128884] call_tmp[657544])
                    (480140 'end of statement' dimstr[128884] i[129038] i[129038] i[129038])
                  }
                }
              }
            }
            label _unused_continueLabel[129043]
            label _breakLabel[129042]
          }
          (129150 call halt "array index out of bounds\n" "note: index was (" istr[128749] ") " "but array bounds are (" bstr[128771] ")\n" "note: " dimstr[128884])
          (480145 'end of statement' istr[128749] bstr[128771] dimstr[128884])
        }
      }
    }
    (517894 return _void[55])
  }
  function _array[133600](?).checkSlice[129175](arg _mt[133652]:_MT[238], arg this[133650]:_array[133600](?), arg d[129172]:_domain[125914](?), arg value[129177]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657553] "expr temp" "maybe param" "maybe type" "temp"
    (657556 'move' call_tmp[657553](129185 call(129181 call (partial) dsiDims _mt[243] d[129172])))
    (129190 call(383863 call (partial) checkSlice _mt[243] this[133650])(129186 'expand_tuple' call_tmp[657553])(value = value[129177]))
    (517896 return _void[55])
  }
  function _array[133600](?).checkSlice[129201](arg _mt[133656]:_MT[238], arg this[133654]:_array[133600](?), arg ranges[129198]:_any[178](?) ..., arg value[129203]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[657560] "expr temp" "maybe param" "maybe type" "temp"
    (657563 'move' call_tmp[657560](129212 call isRectangularArr this[133654]))
    unknown call_tmp[657565] "expr temp" "maybe param" "maybe type" "temp"
    (657568 'move' call_tmp[657565](129705 call _cond_test call_tmp[657560]))
    if call_tmp[657565]
    {
      unknown ok[129214] "dead at end of block" "insert auto destroy"
      (543005 'init var' ok[129214] 1)
      (129217 'end of statement')
      {
        unknown i[129259] "dead at end of block" "insert auto destroy"
        (543007 'init var' i[129259] 0)
        (480150 'end of statement')
        unknown tmp[129260] "maybe param" "temp"
        unknown call_tmp[657572] "expr temp" "maybe param" "maybe type" "temp"
        (657575 'move' call_tmp[657572](383874 call rank _mt[243] this[133654]))
        unknown call_tmp[657577] "expr temp" "maybe param" "maybe type" "temp"
        (657580 'move' call_tmp[657577](129222 call - call_tmp[657572] 1))
        (129272 'move' tmp[129260](129270 call chpl_compute_low_param_loop_bound 0 call_tmp[657577]))
        unknown tmp[129261] "maybe param" "temp"
        unknown call_tmp[657584] "expr temp" "maybe param" "maybe type" "temp"
        (657587 'move' call_tmp[657584](383882 call rank _mt[243] this[133654]))
        unknown call_tmp[657589] "expr temp" "maybe param" "maybe type" "temp"
        (657592 'move' call_tmp[657589](129277 call - call_tmp[657584] 1))
        (129282 'move' tmp[129261](129280 call chpl_compute_high_param_loop_bound 0 call_tmp[657589]))
        unknown tmp[129262] "maybe param" "temp"
        (129285 'move' tmp[129262] 1)
        ParamForLoop[129287]
        { i[129259] tmp[129260] tmp[129261] tmp[129262]
          {
            {
              unknown tmp[129247] "temp"
              (129250 'move' tmp[129247](129249 'addr of' ok[129214]))
              unknown tmp[425404] "maybe param" "temp"
              (425415 'move' tmp[425404] tmp[129247])
              unknown call_tmp[657594] "expr temp" "maybe param" "maybe type" "temp"
              (657597 'move' call_tmp[657594](425417 call _cond_invalid tmp[425404]))
              if call_tmp[657594]
              {
                (425420 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[566100] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[566101] "maybe param" "temp"
              unknown call_tmp[657599] "expr temp" "maybe param" "maybe type" "temp"
              (657602 'move' call_tmp[657599](425405 call isTrue tmp[425404]))
              (566106 'move' tmp[566101](566104 call _cond_test call_tmp[657599]))
              if tmp[566101]
              {
                unknown tmp[566108] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[657606] "expr temp" "maybe param" "maybe type" "temp"
                (657609 'move' call_tmp[657606](129228 call dom _mt[243] value[129203]))
                unknown call_tmp[657613] "expr temp" "maybe param" "maybe type" "temp"
                (657616 'move' call_tmp[657613](129236 call(129231 call (partial) dsiDim _mt[243] call_tmp[657606]) i[129259]))
                unknown call_tmp[657620] "expr temp" "maybe param" "maybe type" "temp"
                (657623 'move' call_tmp[657620](129243 call ranges[129198] i[129259]))
                unknown call_tmp[657625] "expr temp" "maybe param" "maybe type" "temp"
                (657628 'move' call_tmp[657625](129245 call(129237 call (partial) boundsCheck _mt[243] call_tmp[657613]) call_tmp[657620]))
                (566110 'move' tmp[566108](425408 call isTrue call_tmp[657625]))
                (566115 'move' tmp[566100](566112 '_paramFoldLogical' tmp[566101] tmp[566108]))
              }
              {
                (566120 'move' tmp[566100](566117 '_paramFoldLogical' tmp[566101] 0))
              }
              (129255 call = tmp[129247] tmp[566100])
              (480152 'end of statement' i[129259] i[129259])
            }
          }
        }
        label _unused_continueLabel[129264]
        label _breakLabel[129263]
      }
      unknown call_tmp[657630] "expr temp" "maybe param" "maybe type" "temp"
      (657633 'move' call_tmp[657630](129298 call == ok[129214] 0))
      unknown call_tmp[657635] "expr temp" "maybe param" "maybe type" "temp"
      (657638 'move' call_tmp[657635](129701 call _cond_test call_tmp[657630]))
      if call_tmp[657635]
      {
        unknown call_tmp[657642] "expr temp" "maybe param" "maybe type" "temp"
        (657645 'move' call_tmp[657642](383887 call rank _mt[243] this[133654]))
        unknown call_tmp[657647] "expr temp" "maybe param" "maybe type" "temp"
        (657650 'move' call_tmp[657647](129302 call == call_tmp[657642] 1))
        unknown call_tmp[657652] "expr temp" "maybe param" "maybe type" "temp"
        (657655 'move' call_tmp[657652](129696 call _cond_test call_tmp[657647]))
        if call_tmp[657652]
        {
          unknown call_tmp[657657] "expr temp" "maybe param" "maybe type" "temp"
          (657660 'move' call_tmp[657657](129343 call ranges[129198] 0))
          unknown call_tmp[657664] "expr temp" "maybe param" "maybe type" "temp"
          (657667 'move' call_tmp[657664](129346 call dom _mt[243] value[129203]))
          unknown call_tmp[657671] "expr temp" "maybe param" "maybe type" "temp"
          (657674 'move' call_tmp[657671](129354 call(129349 call (partial) dsiDim _mt[243] call_tmp[657664]) 0))
          (129355 call halt "array slice out of bounds\n" "note: slice index was " call_tmp[657657] " but array bounds are " call_tmp[657671])
        }
        {
          unknown istr[129375] "dead at end of block" "insert auto destroy"
          (543009 'init var' istr[129375] "")
          (129378 'end of statement')
          unknown bstr[129397] "dead at end of block" "insert auto destroy"
          (543011 'init var' bstr[129397] "")
          (129400 'end of statement')
          {
            unknown i[129456] "dead at end of block" "insert auto destroy"
            (543013 'init var' i[129456] 0)
            (480156 'end of statement')
            unknown tmp[129457] "maybe param" "temp"
            unknown call_tmp[657678] "expr temp" "maybe param" "maybe type" "temp"
            (657681 'move' call_tmp[657678](383892 call rank _mt[243] this[133654]))
            unknown call_tmp[657683] "expr temp" "maybe param" "maybe type" "temp"
            (657686 'move' call_tmp[657683](129404 call - call_tmp[657678] 1))
            (129469 'move' tmp[129457](129467 call chpl_compute_low_param_loop_bound 0 call_tmp[657683]))
            unknown tmp[129458] "maybe param" "temp"
            unknown call_tmp[657690] "expr temp" "maybe param" "maybe type" "temp"
            (657693 'move' call_tmp[657690](383904 call rank _mt[243] this[133654]))
            unknown call_tmp[657695] "expr temp" "maybe param" "maybe type" "temp"
            (657698 'move' call_tmp[657695](129474 call - call_tmp[657690] 1))
            (129479 'move' tmp[129458](129477 call chpl_compute_high_param_loop_bound 0 call_tmp[657695]))
            unknown tmp[129459] "maybe param" "temp"
            (129482 'move' tmp[129459] 1)
            ParamForLoop[129484]
            { i[129456] tmp[129457] tmp[129458] tmp[129459]
              {
                unknown call_tmp[657700] "expr temp" "maybe param" "maybe type" "temp"
                (657703 'move' call_tmp[657700](129410 call != i[129456] 0))
                unknown call_tmp[657705] "expr temp" "maybe param" "maybe type" "temp"
                (657708 'move' call_tmp[657705](129423 call _cond_test call_tmp[657700]))
                if call_tmp[657705]
                {
                  (129414 call += istr[129375] ", ")
                  (480157 'end of statement' istr[129375])
                  (129420 call += bstr[129397] ", ")
                  (480159 'end of statement' bstr[129397])
                }
                unknown call_tmp[657710] "expr temp" "maybe param" "maybe type" "temp"
                (657713 'move' call_tmp[657710](129432 call ranges[129198] i[129456]))
                unknown call_tmp[657715] "expr temp" "maybe param" "maybe type" "temp"
                (657718 'move' call_tmp[657715](129434 call _cast string[26] call_tmp[657710]))
                (129436 call += istr[129375] call_tmp[657715])
                (480161 'end of statement' istr[129375] i[129456])
                unknown call_tmp[657722] "expr temp" "maybe param" "maybe type" "temp"
                (657725 'move' call_tmp[657722](129441 call dom _mt[243] value[129203]))
                unknown call_tmp[657729] "expr temp" "maybe param" "maybe type" "temp"
                (657732 'move' call_tmp[657729](129449 call(129444 call (partial) dsiDim _mt[243] call_tmp[657722]) i[129456]))
                unknown call_tmp[657734] "expr temp" "maybe param" "maybe type" "temp"
                (657737 'move' call_tmp[657734](129451 call _cast string[26] call_tmp[657729]))
                (129453 call += bstr[129397] call_tmp[657734])
                (480164 'end of statement' bstr[129397] i[129456])
              }
            }
            label _unused_continueLabel[129461]
            label _breakLabel[129460]
          }
          unknown dimstr[129510] "dead at end of block" "insert auto destroy"
          (543015 'init var' dimstr[129510] "")
          (129513 'end of statement')
          {
            unknown i[129630] "dead at end of block" "insert auto destroy"
            (543017 'init var' i[129630] 0)
            (480167 'end of statement')
            unknown tmp[129631] "maybe param" "temp"
            unknown call_tmp[657741] "expr temp" "maybe param" "maybe type" "temp"
            (657744 'move' call_tmp[657741](383908 call rank _mt[243] this[133654]))
            unknown call_tmp[657746] "expr temp" "maybe param" "maybe type" "temp"
            (657749 'move' call_tmp[657746](129517 call - call_tmp[657741] 1))
            (129643 'move' tmp[129631](129641 call chpl_compute_low_param_loop_bound 0 call_tmp[657746]))
            unknown tmp[129632] "maybe param" "temp"
            unknown call_tmp[657753] "expr temp" "maybe param" "maybe type" "temp"
            (657756 'move' call_tmp[657753](383921 call rank _mt[243] this[133654]))
            unknown call_tmp[657758] "expr temp" "maybe param" "maybe type" "temp"
            (657761 'move' call_tmp[657758](129648 call - call_tmp[657753] 1))
            (129653 'move' tmp[129632](129651 call chpl_compute_high_param_loop_bound 0 call_tmp[657758]))
            unknown tmp[129633] "maybe param" "temp"
            (129656 'move' tmp[129633] 1)
            ParamForLoop[129658]
            { i[129630] tmp[129631] tmp[129632] tmp[129633]
              {
                unknown call_tmp[657765] "expr temp" "maybe param" "maybe type" "temp"
                (657768 'move' call_tmp[657765](129522 call dom _mt[243] value[129203]))
                unknown call_tmp[657772] "expr temp" "maybe param" "maybe type" "temp"
                (657775 'move' call_tmp[657772](129530 call(129525 call (partial) dsiDim _mt[243] call_tmp[657765]) i[129630]))
                unknown call_tmp[657779] "expr temp" "maybe param" "maybe type" "temp"
                (657782 'move' call_tmp[657779](129537 call ranges[129198] i[129630]))
                unknown call_tmp[657784] "expr temp" "maybe param" "maybe type" "temp"
                (657787 'move' call_tmp[657784](129539 call(129531 call (partial) boundsCheck _mt[243] call_tmp[657772]) call_tmp[657779]))
                unknown call_tmp[657789] "expr temp" "maybe param" "maybe type" "temp"
                (657792 'move' call_tmp[657789](129540 call ! call_tmp[657784]))
                unknown call_tmp[657794] "expr temp" "maybe param" "maybe type" "temp"
                (657797 'move' call_tmp[657794](129625 call _cond_test call_tmp[657789]))
                if call_tmp[657794]
                {
                  unknown call_tmp[657799] "expr temp" "maybe param" "maybe type" "temp"
                  (657802 'move' call_tmp[657799](129560 call == dimstr[129510] ""))
                  unknown call_tmp[657804] "expr temp" "maybe param" "maybe type" "temp"
                  (657807 'move' call_tmp[657804](129620 call _cond_test call_tmp[657799]))
                  if call_tmp[657804]
                  {
                    unknown call_tmp[657809] "expr temp" "maybe param" "maybe type" "temp"
                    (657812 'move' call_tmp[657809](129566 call _cast string[26] i[129630]))
                    unknown call_tmp[657814] "expr temp" "maybe param" "maybe type" "temp"
                    (657817 'move' call_tmp[657814](129568 call + "out of bounds in dimension " call_tmp[657809]))
                    unknown call_tmp[657819] "expr temp" "maybe param" "maybe type" "temp"
                    (657822 'move' call_tmp[657819](129587 call + call_tmp[657814] " because slice index "))
                    unknown call_tmp[657824] "expr temp" "maybe param" "maybe type" "temp"
                    (657827 'move' call_tmp[657824](129592 call ranges[129198] i[129630]))
                    unknown call_tmp[657829] "expr temp" "maybe param" "maybe type" "temp"
                    (657832 'move' call_tmp[657829](129594 call _cast string[26] call_tmp[657824]))
                    unknown call_tmp[657834] "expr temp" "maybe param" "maybe type" "temp"
                    (657837 'move' call_tmp[657834](129596 call + call_tmp[657819] call_tmp[657829]))
                    unknown call_tmp[657839] "expr temp" "maybe param" "maybe type" "temp"
                    (657842 'move' call_tmp[657839](129599 call + call_tmp[657834] " is not in "))
                    unknown call_tmp[657846] "expr temp" "maybe param" "maybe type" "temp"
                    (657849 'move' call_tmp[657846](129602 call dom _mt[243] value[129203]))
                    unknown call_tmp[657853] "expr temp" "maybe param" "maybe type" "temp"
                    (657856 'move' call_tmp[657853](129610 call(129605 call (partial) dsiDim _mt[243] call_tmp[657846]) i[129630]))
                    unknown call_tmp[657858] "expr temp" "maybe param" "maybe type" "temp"
                    (657861 'move' call_tmp[657858](129612 call _cast string[26] call_tmp[657853]))
                    unknown call_tmp[657863] "expr temp" "maybe param" "maybe type" "temp"
                    (657866 'move' call_tmp[657863](129614 call + call_tmp[657839] call_tmp[657858]))
                    (129616 call = dimstr[129510] call_tmp[657863])
                    (480168 'end of statement' dimstr[129510] i[129630] i[129630] i[129630])
                  }
                }
              }
            }
            label _unused_continueLabel[129635]
            label _breakLabel[129634]
          }
          (129694 call halt "array slice out of bounds\n" "note: slice index was (" istr[129375] ") " "but array bounds are (" bstr[129397] ")\n" "note: " dimstr[129510])
          (480173 'end of statement' istr[129375] bstr[129397] dimstr[129510])
        }
      }
    }
    (517898 return _void[55])
  }
  where {
    (129208 call chpl__isTupleOfRanges ranges[129198])
  }
  function _array[133600](?).this[129728](arg _mt[133660]:_MT[238], ref arg this[133658]:_array[133600](?), arg i[129725] :
  unknown call_tmp[657870] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[517902] "RVV" "temp"
    unknown call_tmp[657898] "maybe param" "maybe type" "temp"
    (657901 'move' call_tmp[657898](383932 call _value _mt[243] this[133658]))
    const value[129731] "dead at end of block" "const" "insert auto destroy"
    (543019 'init var' value[129731] call_tmp[657898])
    (129734 'end of statement')
    unknown call_tmp[657903] "expr temp" "maybe param" "maybe type" "temp"
    (657906 'move' call_tmp[657903](129744 call _cond_test 1))
    if call_tmp[657903]
    {
      (129742 call(383939 call (partial) checkAccess _mt[243] this[133658]) i[129725](value = value[129731]))
      (480177 'end of statement' value[129731])
    }
    unknown tmp[425425] "maybe param" "temp"
    (425436 'move' tmp[425425](129752 call isRectangularArr this[133658]))
    unknown call_tmp[657910] "expr temp" "maybe param" "maybe type" "temp"
    (657913 'move' call_tmp[657910](425438 call _cond_invalid tmp[425425]))
    if call_tmp[657910]
    {
      (425441 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566127] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566128] "maybe param" "temp"
    unknown call_tmp[657915] "expr temp" "maybe param" "maybe type" "temp"
    (657918 'move' call_tmp[657915](425426 call isTrue tmp[425425]))
    (566133 'move' tmp[566128](566131 call _cond_test call_tmp[657915]))
    if tmp[566128]
    {
      (566138 'move' tmp[566127](566135 '_paramFoldLogical' tmp[566128] 1))
    }
    {
      unknown tmp[566140] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[657920] "expr temp" "maybe param" "maybe type" "temp"
      (657923 'move' call_tmp[657920](129756 call isSparseArr this[133658]))
      (566142 'move' tmp[566140](425430 call isTrue call_tmp[657920]))
      (566147 'move' tmp[566127](566144 '_paramFoldLogical' tmp[566128] tmp[566140]))
    }
    unknown call_tmp[657925] "expr temp" "maybe param" "maybe type" "temp"
    (657928 'move' call_tmp[657925](129780 call _cond_test tmp[566127]))
    if call_tmp[657925]
    {
      unknown call_tmp[657932] "expr temp" "maybe param" "maybe type" "temp"
      (657935 'move' call_tmp[657932](129765 call(129760 call (partial) dsiAccess _mt[243] value[129731]) i[129725]))
      (517907 'move' ret[517902](517906 'addr of' call_tmp[657932]))
      gotoReturn _end_this[517900] _end_this[517900]
      (480180 'end of statement' value[129731])
    }
    {
      unknown call_tmp[657939] "expr temp" "maybe param" "maybe type" "temp"
      (657942 'move' call_tmp[657939](129775 call i[129725] 0))
      unknown call_tmp[657944] "expr temp" "maybe param" "maybe type" "temp"
      (657947 'move' call_tmp[657944](129777 call(129769 call (partial) dsiAccess _mt[243] value[129731]) call_tmp[657939]))
      (517912 'move' ret[517902](517911 'addr of' call_tmp[657944]))
      gotoReturn _end_this[517900] _end_this[517900]
      (480182 'end of statement' value[129731])
    }
    label _end_this[517900]
    (517904 return ret[517902])
  }
  function _array[133600](?).this[129803](arg _mt[133664]:_MT[238], const arg this[133662]:_array[133600](?), arg i[129800] :
  unknown call_tmp[657951] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517918] "RVV" "temp"
    unknown call_tmp[657979] "maybe param" "maybe type" "temp"
    (657982 'move' call_tmp[657979](383953 call _value _mt[243] this[133662]))
    const value[129813] "dead at end of block" "const" "insert auto destroy"
    (543021 'init var' value[129813] call_tmp[657979])
    (129816 'end of statement')
    unknown call_tmp[657984] "expr temp" "maybe param" "maybe type" "temp"
    (657987 'move' call_tmp[657984](129826 call _cond_test 1))
    if call_tmp[657984]
    {
      (129824 call(383958 call (partial) checkAccess _mt[243] this[133662]) i[129800](value = value[129813]))
      (480184 'end of statement' value[129813])
    }
    unknown tmp[425446] "maybe param" "temp"
    (425457 'move' tmp[425446](129834 call isRectangularArr this[133662]))
    unknown call_tmp[657991] "expr temp" "maybe param" "maybe type" "temp"
    (657994 'move' call_tmp[657991](425459 call _cond_invalid tmp[425446]))
    if call_tmp[657991]
    {
      (425462 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566154] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566155] "maybe param" "temp"
    unknown call_tmp[657996] "expr temp" "maybe param" "maybe type" "temp"
    (657999 'move' call_tmp[657996](425447 call isTrue tmp[425446]))
    (566160 'move' tmp[566155](566158 call _cond_test call_tmp[657996]))
    if tmp[566155]
    {
      (566165 'move' tmp[566154](566162 '_paramFoldLogical' tmp[566155] 1))
    }
    {
      unknown tmp[566167] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658001] "expr temp" "maybe param" "maybe type" "temp"
      (658004 'move' call_tmp[658001](129838 call isSparseArr this[133662]))
      (566169 'move' tmp[566167](425451 call isTrue call_tmp[658001]))
      (566174 'move' tmp[566154](566171 '_paramFoldLogical' tmp[566155] tmp[566167]))
    }
    unknown call_tmp[658006] "expr temp" "maybe param" "maybe type" "temp"
    (658009 'move' call_tmp[658006](129862 call _cond_test tmp[566154]))
    if call_tmp[658006]
    {
      unknown call_tmp[658013] "expr temp" "maybe param" "maybe type" "temp"
      (658016 'move' call_tmp[658013](129847 call(129842 call (partial) dsiAccess _mt[243] value[129813]) i[129800]))
      (517923 'move' ret[517918](517922 'deref' call_tmp[658013]))
      gotoReturn _end_this[517916] _end_this[517916]
      (480187 'end of statement' value[129813])
    }
    {
      unknown call_tmp[658020] "expr temp" "maybe param" "maybe type" "temp"
      (658023 'move' call_tmp[658020](129857 call i[129800] 0))
      unknown call_tmp[658025] "expr temp" "maybe param" "maybe type" "temp"
      (658028 'move' call_tmp[658025](129859 call(129851 call (partial) dsiAccess _mt[243] value[129813]) call_tmp[658020]))
      (517928 'move' ret[517918](517927 'deref' call_tmp[658025]))
      gotoReturn _end_this[517916] _end_this[517916]
      (480189 'end of statement' value[129813])
    }
    label _end_this[517916]
    (517920 return ret[517918])
  }
  where {
    unknown call_tmp[658032] "expr temp" "maybe param" "maybe type" "temp"
    (658035 'move' call_tmp[658032](359823 call _value _mt[243] this[133662]))
    unknown call_tmp[658039] "expr temp" "maybe param" "maybe type" "temp"
    (658042 'move' call_tmp[658039](129807 call eltType _mt[243] call_tmp[658032]))
    (129811 call shouldReturnRvalueByValue call_tmp[658039])
  }
  function _array[133600](?).this[129886](arg _mt[133668]:_MT[238], const arg this[133666]:_array[133600](?), arg i[129883] :
  unknown call_tmp[658046] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517934] "RVV" "temp"
    unknown call_tmp[658074] "maybe param" "maybe type" "temp"
    (658077 'move' call_tmp[658074](383972 call _value _mt[243] this[133666]))
    const value[129896] "dead at end of block" "const" "insert auto destroy"
    (543023 'init var' value[129896] call_tmp[658074])
    (129899 'end of statement')
    unknown call_tmp[658079] "expr temp" "maybe param" "maybe type" "temp"
    (658082 'move' call_tmp[658079](129909 call _cond_test 1))
    if call_tmp[658079]
    {
      (129907 call(383977 call (partial) checkAccess _mt[243] this[133666]) i[129883](value = value[129896]))
      (480191 'end of statement' value[129896])
    }
    unknown tmp[425467] "maybe param" "temp"
    (425478 'move' tmp[425467](129917 call isRectangularArr this[133666]))
    unknown call_tmp[658086] "expr temp" "maybe param" "maybe type" "temp"
    (658089 'move' call_tmp[658086](425480 call _cond_invalid tmp[425467]))
    if call_tmp[658086]
    {
      (425483 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566181] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566182] "maybe param" "temp"
    unknown call_tmp[658091] "expr temp" "maybe param" "maybe type" "temp"
    (658094 'move' call_tmp[658091](425468 call isTrue tmp[425467]))
    (566187 'move' tmp[566182](566185 call _cond_test call_tmp[658091]))
    if tmp[566182]
    {
      (566192 'move' tmp[566181](566189 '_paramFoldLogical' tmp[566182] 1))
    }
    {
      unknown tmp[566194] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658096] "expr temp" "maybe param" "maybe type" "temp"
      (658099 'move' call_tmp[658096](129921 call isSparseArr this[133666]))
      (566196 'move' tmp[566194](425472 call isTrue call_tmp[658096]))
      (566201 'move' tmp[566181](566198 '_paramFoldLogical' tmp[566182] tmp[566194]))
    }
    unknown call_tmp[658101] "expr temp" "maybe param" "maybe type" "temp"
    (658104 'move' call_tmp[658101](129945 call _cond_test tmp[566181]))
    if call_tmp[658101]
    {
      unknown call_tmp[658108] "expr temp" "maybe param" "maybe type" "temp"
      (658111 'move' call_tmp[658108](129930 call(129925 call (partial) dsiAccess _mt[243] value[129896]) i[129883]))
      (517939 'move' ret[517934](517938 'addr of' call_tmp[658108]))
      gotoReturn _end_this[517932] _end_this[517932]
      (480194 'end of statement' value[129896])
    }
    {
      unknown call_tmp[658115] "expr temp" "maybe param" "maybe type" "temp"
      (658118 'move' call_tmp[658115](129940 call i[129883] 0))
      unknown call_tmp[658120] "expr temp" "maybe param" "maybe type" "temp"
      (658123 'move' call_tmp[658120](129942 call(129934 call (partial) dsiAccess _mt[243] value[129896]) call_tmp[658115]))
      (517944 'move' ret[517934](517943 'addr of' call_tmp[658120]))
      gotoReturn _end_this[517932] _end_this[517932]
      (480196 'end of statement' value[129896])
    }
    label _end_this[517932]
    (517936 return ret[517934])
  }
  where {
    unknown call_tmp[658127] "expr temp" "maybe param" "maybe type" "temp"
    (658130 'move' call_tmp[658127](359833 call _value _mt[243] this[133666]))
    unknown call_tmp[658134] "expr temp" "maybe param" "maybe type" "temp"
    (658137 'move' call_tmp[658134](129890 call eltType _mt[243] call_tmp[658127]))
    (129894 call shouldReturnRvalueByConstRef call_tmp[658134])
  }
  function _array[133600](?).this[129968](arg _mt[133672]:_MT[238], ref arg this[133670]:_array[133600](?), arg i[129964] ... :
  unknown call_tmp[658141] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[517950] "RVV" "temp"
    unknown call_tmp[658157] "expr temp" "maybe param" "maybe type" "temp"
    (658160 'move' call_tmp[658157](129973 call this[133670] i[129964]))
    (517955 'move' ret[517950](517954 'addr of' call_tmp[658157]))
    (517952 return ret[517950])
  }
  function _array[133600](?).this[129993](arg _mt[133676]:_MT[238], const arg this[133674]:_array[133600](?), arg i[129989] ... :
  unknown call_tmp[658164] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517959] "RVV" "temp"
    unknown call_tmp[658180] "expr temp" "maybe param" "maybe type" "temp"
    (658183 'move' call_tmp[658180](130005 call this[133674] i[129989]))
    (517964 'move' ret[517959](517963 'deref' call_tmp[658180]))
    (517961 return ret[517959])
  }
  where {
    unknown call_tmp[658187] "expr temp" "maybe param" "maybe type" "temp"
    (658190 'move' call_tmp[658187](359847 call _value _mt[243] this[133674]))
    unknown call_tmp[658194] "expr temp" "maybe param" "maybe type" "temp"
    (658197 'move' call_tmp[658194](129997 call eltType _mt[243] call_tmp[658187]))
    (130001 call shouldReturnRvalueByValue call_tmp[658194])
  }
  function _array[133600](?).this[130026](arg _mt[133680]:_MT[238], const arg this[133678]:_array[133600](?), arg i[130022] ... :
  unknown call_tmp[658201] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517968] "RVV" "temp"
    unknown call_tmp[658217] "expr temp" "maybe param" "maybe type" "temp"
    (658220 'move' call_tmp[658217](130038 call this[133678] i[130022]))
    (517973 'move' ret[517968](517972 'addr of' call_tmp[658217]))
    (517970 return ret[517968])
  }
  where {
    unknown call_tmp[658224] "expr temp" "maybe param" "maybe type" "temp"
    (658227 'move' call_tmp[658224](359855 call _value _mt[243] this[133678]))
    unknown call_tmp[658231] "expr temp" "maybe param" "maybe type" "temp"
    (658234 'move' call_tmp[658231](130030 call eltType _mt[243] call_tmp[658224]))
    (130034 call shouldReturnRvalueByConstRef call_tmp[658231])
  }
  function _array[133600](?).localAccess[130060](arg _mt[133684]:_MT[238], ref arg this[133682]:_array[133600](?), arg i[130057] :
  unknown call_tmp[658238] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[517977] "RVV" "temp"
    unknown call_tmp[658266] "maybe param" "maybe type" "temp"
    (658269 'move' call_tmp[658266](384009 call _value _mt[243] this[133682]))
    const value[130063] "dead at end of block" "const" "insert auto destroy"
    (543025 'init var' value[130063] call_tmp[658266])
    (130066 'end of statement')
    unknown call_tmp[658271] "expr temp" "maybe param" "maybe type" "temp"
    (658274 'move' call_tmp[658271](130076 call _cond_test 1))
    if call_tmp[658271]
    {
      (130074 call(384014 call (partial) checkAccess _mt[243] this[133682]) i[130057](value = value[130063]))
      (480201 'end of statement' value[130063])
    }
    unknown tmp[425488] "maybe param" "temp"
    (425499 'move' tmp[425488](130084 call isRectangularArr this[133682]))
    unknown call_tmp[658278] "expr temp" "maybe param" "maybe type" "temp"
    (658281 'move' call_tmp[658278](425501 call _cond_invalid tmp[425488]))
    if call_tmp[658278]
    {
      (425504 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566208] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566209] "maybe param" "temp"
    unknown call_tmp[658283] "expr temp" "maybe param" "maybe type" "temp"
    (658286 'move' call_tmp[658283](425489 call isTrue tmp[425488]))
    (566214 'move' tmp[566209](566212 call _cond_test call_tmp[658283]))
    if tmp[566209]
    {
      (566219 'move' tmp[566208](566216 '_paramFoldLogical' tmp[566209] 1))
    }
    {
      unknown tmp[566221] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658288] "expr temp" "maybe param" "maybe type" "temp"
      (658291 'move' call_tmp[658288](130088 call isSparseArr this[133682]))
      (566223 'move' tmp[566221](425493 call isTrue call_tmp[658288]))
      (566228 'move' tmp[566208](566225 '_paramFoldLogical' tmp[566209] tmp[566221]))
    }
    unknown call_tmp[658293] "expr temp" "maybe param" "maybe type" "temp"
    (658296 'move' call_tmp[658293](130114 call _cond_test tmp[566208]))
    if call_tmp[658293]
    {
      unknown call_tmp[658300] "expr temp" "maybe param" "maybe type" "temp"
      (658303 'move' call_tmp[658300](130099 call(130094 call (partial) dsiLocalAccess _mt[243] value[130063]) i[130057]))
      (517982 'move' ret[517977](517981 'addr of' call_tmp[658300]))
      gotoReturn _end_localAccess[517975] _end_localAccess[517975]
      (480204 'end of statement' value[130063])
    }
    {
      unknown call_tmp[658307] "expr temp" "maybe param" "maybe type" "temp"
      (658310 'move' call_tmp[658307](130109 call i[130057] 0))
      unknown call_tmp[658312] "expr temp" "maybe param" "maybe type" "temp"
      (658315 'move' call_tmp[658312](130111 call(130103 call (partial) dsiLocalAccess _mt[243] value[130063]) call_tmp[658307]))
      (517987 'move' ret[517977](517986 'addr of' call_tmp[658312]))
      gotoReturn _end_localAccess[517975] _end_localAccess[517975]
      (480206 'end of statement' value[130063])
    }
    label _end_localAccess[517975]
    (517979 return ret[517977])
  }
  function _array[133600](?).localAccess[130137](arg _mt[133688]:_MT[238], const arg this[133686]:_array[133600](?), arg i[130134] :
  unknown call_tmp[658319] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[517993] "RVV" "temp"
    unknown call_tmp[658347] "maybe param" "maybe type" "temp"
    (658350 'move' call_tmp[658347](384028 call _value _mt[243] this[133686]))
    const value[130147] "dead at end of block" "const" "insert auto destroy"
    (543027 'init var' value[130147] call_tmp[658347])
    (130150 'end of statement')
    unknown call_tmp[658352] "expr temp" "maybe param" "maybe type" "temp"
    (658355 'move' call_tmp[658352](130160 call _cond_test 1))
    if call_tmp[658352]
    {
      (130158 call(384033 call (partial) checkAccess _mt[243] this[133686]) i[130134](value = value[130147]))
      (480208 'end of statement' value[130147])
    }
    unknown tmp[425509] "maybe param" "temp"
    (425520 'move' tmp[425509](130168 call isRectangularArr this[133686]))
    unknown call_tmp[658359] "expr temp" "maybe param" "maybe type" "temp"
    (658362 'move' call_tmp[658359](425522 call _cond_invalid tmp[425509]))
    if call_tmp[658359]
    {
      (425525 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566235] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566236] "maybe param" "temp"
    unknown call_tmp[658364] "expr temp" "maybe param" "maybe type" "temp"
    (658367 'move' call_tmp[658364](425510 call isTrue tmp[425509]))
    (566241 'move' tmp[566236](566239 call _cond_test call_tmp[658364]))
    if tmp[566236]
    {
      (566246 'move' tmp[566235](566243 '_paramFoldLogical' tmp[566236] 1))
    }
    {
      unknown tmp[566248] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658369] "expr temp" "maybe param" "maybe type" "temp"
      (658372 'move' call_tmp[658369](130172 call isSparseArr this[133686]))
      (566250 'move' tmp[566248](425514 call isTrue call_tmp[658369]))
      (566255 'move' tmp[566235](566252 '_paramFoldLogical' tmp[566236] tmp[566248]))
    }
    unknown call_tmp[658374] "expr temp" "maybe param" "maybe type" "temp"
    (658377 'move' call_tmp[658374](130196 call _cond_test tmp[566235]))
    if call_tmp[658374]
    {
      unknown call_tmp[658381] "expr temp" "maybe param" "maybe type" "temp"
      (658384 'move' call_tmp[658381](130181 call(130176 call (partial) dsiLocalAccess _mt[243] value[130147]) i[130134]))
      (517998 'move' ret[517993](517997 'deref' call_tmp[658381]))
      gotoReturn _end_localAccess[517991] _end_localAccess[517991]
      (480211 'end of statement' value[130147])
    }
    {
      unknown call_tmp[658388] "expr temp" "maybe param" "maybe type" "temp"
      (658391 'move' call_tmp[658388](130191 call i[130134] 0))
      unknown call_tmp[658393] "expr temp" "maybe param" "maybe type" "temp"
      (658396 'move' call_tmp[658393](130193 call(130185 call (partial) dsiLocalAccess _mt[243] value[130147]) call_tmp[658388]))
      (518003 'move' ret[517993](518002 'deref' call_tmp[658393]))
      gotoReturn _end_localAccess[517991] _end_localAccess[517991]
      (480213 'end of statement' value[130147])
    }
    label _end_localAccess[517991]
    (517995 return ret[517993])
  }
  where {
    unknown call_tmp[658400] "expr temp" "maybe param" "maybe type" "temp"
    (658403 'move' call_tmp[658400](359869 call _value _mt[243] this[133686]))
    unknown call_tmp[658407] "expr temp" "maybe param" "maybe type" "temp"
    (658410 'move' call_tmp[658407](130141 call eltType _mt[243] call_tmp[658400]))
    (130145 call shouldReturnRvalueByValue call_tmp[658407])
  }
  function _array[133600](?).localAccess[130220](arg _mt[133692]:_MT[238], const arg this[133690]:_array[133600](?), arg i[130217] :
  unknown call_tmp[658414] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518009] "RVV" "temp"
    unknown call_tmp[658442] "maybe param" "maybe type" "temp"
    (658445 'move' call_tmp[658442](384047 call _value _mt[243] this[133690]))
    const value[130230] "dead at end of block" "const" "insert auto destroy"
    (543029 'init var' value[130230] call_tmp[658442])
    (130233 'end of statement')
    unknown call_tmp[658447] "expr temp" "maybe param" "maybe type" "temp"
    (658450 'move' call_tmp[658447](130243 call _cond_test 1))
    if call_tmp[658447]
    {
      (130241 call(384052 call (partial) checkAccess _mt[243] this[133690]) i[130217](value = value[130230]))
      (480215 'end of statement' value[130230])
    }
    unknown tmp[425530] "maybe param" "temp"
    (425541 'move' tmp[425530](130251 call isRectangularArr this[133690]))
    unknown call_tmp[658454] "expr temp" "maybe param" "maybe type" "temp"
    (658457 'move' call_tmp[658454](425543 call _cond_invalid tmp[425530]))
    if call_tmp[658454]
    {
      (425546 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566262] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566263] "maybe param" "temp"
    unknown call_tmp[658459] "expr temp" "maybe param" "maybe type" "temp"
    (658462 'move' call_tmp[658459](425531 call isTrue tmp[425530]))
    (566268 'move' tmp[566263](566266 call _cond_test call_tmp[658459]))
    if tmp[566263]
    {
      (566273 'move' tmp[566262](566270 '_paramFoldLogical' tmp[566263] 1))
    }
    {
      unknown tmp[566275] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658464] "expr temp" "maybe param" "maybe type" "temp"
      (658467 'move' call_tmp[658464](130255 call isSparseArr this[133690]))
      (566277 'move' tmp[566275](425535 call isTrue call_tmp[658464]))
      (566282 'move' tmp[566262](566279 '_paramFoldLogical' tmp[566263] tmp[566275]))
    }
    unknown call_tmp[658469] "expr temp" "maybe param" "maybe type" "temp"
    (658472 'move' call_tmp[658469](130279 call _cond_test tmp[566262]))
    if call_tmp[658469]
    {
      unknown call_tmp[658476] "expr temp" "maybe param" "maybe type" "temp"
      (658479 'move' call_tmp[658476](130264 call(130259 call (partial) dsiLocalAccess _mt[243] value[130230]) i[130217]))
      (518014 'move' ret[518009](518013 'addr of' call_tmp[658476]))
      gotoReturn _end_localAccess[518007] _end_localAccess[518007]
      (480218 'end of statement' value[130230])
    }
    {
      unknown call_tmp[658483] "expr temp" "maybe param" "maybe type" "temp"
      (658486 'move' call_tmp[658483](130274 call i[130217] 0))
      unknown call_tmp[658488] "expr temp" "maybe param" "maybe type" "temp"
      (658491 'move' call_tmp[658488](130276 call(130268 call (partial) dsiLocalAccess _mt[243] value[130230]) call_tmp[658483]))
      (518019 'move' ret[518009](518018 'addr of' call_tmp[658488]))
      gotoReturn _end_localAccess[518007] _end_localAccess[518007]
      (480220 'end of statement' value[130230])
    }
    label _end_localAccess[518007]
    (518011 return ret[518009])
  }
  where {
    unknown call_tmp[658495] "expr temp" "maybe param" "maybe type" "temp"
    (658498 'move' call_tmp[658495](359879 call _value _mt[243] this[133690]))
    unknown call_tmp[658502] "expr temp" "maybe param" "maybe type" "temp"
    (658505 'move' call_tmp[658502](130224 call eltType _mt[243] call_tmp[658495]))
    (130228 call shouldReturnRvalueByConstRef call_tmp[658502])
  }
  function _array[133600](?).localAccess[130302](arg _mt[133696]:_MT[238], ref arg this[133694]:_array[133600](?), arg i[130298] ... :
  unknown call_tmp[658509] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[518025] "RVV" "temp"
    unknown call_tmp[658527] "expr temp" "maybe param" "maybe type" "temp"
    (658530 'move' call_tmp[658527](130307 call(384068 call (partial) localAccess _mt[243] this[133694]) i[130298]))
    (518030 'move' ret[518025](518029 'addr of' call_tmp[658527]))
    (518027 return ret[518025])
  }
  function _array[133600](?).localAccess[130327](arg _mt[133700]:_MT[238], const arg this[133698]:_array[133600](?), arg i[130323] ... :
  unknown call_tmp[658534] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518034] "RVV" "temp"
    unknown call_tmp[658552] "expr temp" "maybe param" "maybe type" "temp"
    (658555 'move' call_tmp[658552](130339 call(384077 call (partial) localAccess _mt[243] this[133698]) i[130323]))
    (518039 'move' ret[518034](518038 'deref' call_tmp[658552]))
    (518036 return ret[518034])
  }
  where {
    unknown call_tmp[658559] "expr temp" "maybe param" "maybe type" "temp"
    (658562 'move' call_tmp[658559](359893 call _value _mt[243] this[133698]))
    unknown call_tmp[658566] "expr temp" "maybe param" "maybe type" "temp"
    (658569 'move' call_tmp[658566](130331 call eltType _mt[243] call_tmp[658559]))
    (130335 call shouldReturnRvalueByValue call_tmp[658566])
  }
  function _array[133600](?).localAccess[130360](arg _mt[133704]:_MT[238], const arg this[133702]:_array[133600](?), arg i[130356] ... :
  unknown call_tmp[658573] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[518043] "RVV" "temp"
    unknown call_tmp[658591] "expr temp" "maybe param" "maybe type" "temp"
    (658594 'move' call_tmp[658591](130372 call(384086 call (partial) localAccess _mt[243] this[133702]) i[130356]))
    (518048 'move' ret[518043](518047 'addr of' call_tmp[658591]))
    (518045 return ret[518043])
  }
  where {
    unknown call_tmp[658598] "expr temp" "maybe param" "maybe type" "temp"
    (658601 'move' call_tmp[658598](359901 call _value _mt[243] this[133702]))
    unknown call_tmp[658605] "expr temp" "maybe param" "maybe type" "temp"
    (658608 'move' call_tmp[658605](130364 call eltType _mt[243] call_tmp[658598]))
    (130368 call shouldReturnRvalueByConstRef call_tmp[658605])
  }
  function _array[133600](?).this[130385](arg _mt[133708]:_MT[238], arg this[133706]:_array[133600](?), arg d[130382]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518052] "RVV" "temp"
    unknown call_tmp[658612] "expr temp" "maybe param" "maybe type" "temp"
    (658615 'move' call_tmp[658612](130388 call rank _mt[243] d[130382]))
    unknown call_tmp[658619] "expr temp" "maybe param" "maybe type" "temp"
    (658622 'move' call_tmp[658619](384092 call rank _mt[243] this[133706]))
    unknown call_tmp[658624] "expr temp" "maybe param" "maybe type" "temp"
    (658627 'move' call_tmp[658624](130392 call != call_tmp[658612] call_tmp[658619]))
    unknown call_tmp[658629] "expr temp" "maybe param" "maybe type" "temp"
    (658632 'move' call_tmp[658629](130415 call _cond_test call_tmp[658624]))
    if call_tmp[658629]
    {
      (130413 call compilerError "slicing an array with a domain of a different rank")
    }
    unknown call_tmp[658634] "expr temp" "maybe param" "maybe type" "temp"
    (658637 'move' call_tmp[658634](130428 call _cond_test 1))
    if call_tmp[658634]
    {
      unknown call_tmp[658643] "expr temp" "maybe param" "maybe type" "temp"
      (658646 'move' call_tmp[658643](384102 call _value _mt[243] this[133706]))
      (130426 call(384097 call (partial) checkSlice _mt[243] this[133706]) d[130382] call_tmp[658643])
    }
    const tmp[130477] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566289] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566290] "maybe param" "temp"
    unknown call_tmp[658650] "expr temp" "maybe param" "maybe type" "temp"
    (658653 'move' call_tmp[658650](359906 call _value _mt[243] this[133706]))
    unknown call_tmp[658657] "expr temp" "maybe param" "maybe type" "temp"
    (658660 'move' call_tmp[658657](130443 call(130439 call (partial) isSliceArrayView _mt[243] call_tmp[658650])))
    (566295 'move' tmp[566290](566293 call _cond_test call_tmp[658657]))
    if tmp[566290]
    {
      unknown tmp[566297] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658664] "expr temp" "maybe param" "maybe type" "temp"
      (658667 'move' call_tmp[658664](130445 call _value _mt[243] this[133706]))
      unknown call_tmp[658671] "expr temp" "maybe param" "maybe type" "temp"
      (658674 'move' call_tmp[658671](130448 call arr _mt[243] call_tmp[658664]))
      unknown call_tmp[658678] "expr temp" "maybe param" "maybe type" "temp"
      (658681 'move' call_tmp[658678](130452 call _value _mt[243] this[133706]))
      unknown call_tmp[658685] "expr temp" "maybe param" "maybe type" "temp"
      (658688 'move' call_tmp[658685](130457 call _ArrPid _mt[243] call_tmp[658678]))
      (566299 'move' tmp[566297](130461 call _build_tuple call_tmp[658671] call_tmp[658685]))
      (566304 'move' tmp[566289](566301 '_paramFoldLogical' tmp[566290] tmp[566297]))
    }
    {
      unknown tmp[566306] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658692] "expr temp" "maybe param" "maybe type" "temp"
      (658695 'move' call_tmp[658692](130464 call _value _mt[243] this[133706]))
      unknown call_tmp[658699] "expr temp" "maybe param" "maybe type" "temp"
      (658702 'move' call_tmp[658699](130468 call _pid _mt[243] this[133706]))
      (566308 'move' tmp[566306](130472 call _build_tuple call_tmp[658692] call_tmp[658699]))
      (566313 'move' tmp[566289](566310 '_paramFoldLogical' tmp[566290] tmp[566306]))
    }
    (543031 'init var' tmp[130477] tmp[566289])
    (130484 call _check_tuple_var_decl tmp[130477] 2)
    (480227 'end of statement')
    unknown call_tmp[658704] "maybe param" "maybe type" "temp"
    (658707 'move' call_tmp[658704](130478 call tmp[130477] 0))
    const arr[130433] "dead at end of block" "const" "insert auto destroy"
    (543033 'init var' arr[130433] call_tmp[658704])
    unknown call_tmp[658709] "maybe param" "maybe type" "temp"
    (658712 'move' call_tmp[658709](130481 call tmp[130477] 1))
    const arrpid[130435] "dead at end of block" "const" "insert auto destroy"
    (543035 'init var' arrpid[130435] call_tmp[658709])
    (130489 'end of statement')
    unknown call_tmp[658716] "expr temp" "maybe param" "maybe type" "temp"
    (658719 'move' call_tmp[658716](130495 call eltType _mt[243] this[133706]))
    unknown call_tmp[658723] "expr temp" "maybe param" "maybe type" "temp"
    (658726 'move' call_tmp[658723](130501 call _pid _mt[243] d[130382]))
    unknown call_tmp[658730] "expr temp" "maybe param" "maybe type" "temp"
    (658733 'move' call_tmp[658730](130506 call _instance _mt[243] d[130382]))
    unknown call_tmp[658735] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658738 'move' call_tmp[658735](747921 'new' ArrayViewSliceArr[384106](?)(eltType = call_tmp[658716])(_DomPid = call_tmp[658723])(dom = call_tmp[658730])(_ArrPid = arrpid[130435])(_ArrInstance = arr[130433])(_chpl_manager = unmanaged[220](?))))
    unknown a[130515] "dead at end of block" "insert auto destroy"
    (543037 'init var' a[130515] call_tmp[658735])
    (130518 'end of statement' arrpid[130435] arr[130433])
    unknown call_tmp[658742] "expr temp" "maybe param" "maybe type" "temp"
    (658745 'move' call_tmp[658742](130520 call _value _mt[243] d[130382]))
    (130532 call(130523 call (partial) add_arr _mt[243] call_tmp[658742]) a[130515](locking = 1)(addToList = 0))
    (480230 'end of statement' a[130515])
    unknown call_tmp[658749] "expr temp" "maybe param" "maybe type" "temp"
    (658752 'move' call_tmp[658749](130537 call _newArray a[130515]))
    (518057 'move' ret[518052](518056 'deref' call_tmp[658749]))
    gotoReturn _end_this[518050] _end_this[518050]
    (480232 'end of statement' a[130515])
    label _end_this[518050]
    (518054 return ret[518052])
  }
  function _array[133600](?).this[130548](arg _mt[133712]:_MT[238], arg this[133710]:_array[133600](?), arg ranges[130545]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518063] "RVV" "temp"
    unknown call_tmp[658756] "expr temp" "maybe param" "maybe type" "temp"
    (658759 'move' call_tmp[658756](130563 call _cond_test 1))
    if call_tmp[658756]
    {
      unknown call_tmp[658765] "expr temp" "maybe param" "maybe type" "temp"
      (658768 'move' call_tmp[658765](384125 call _value _mt[243] this[133710]))
      (130561 call(384120 call (partial) checkSlice _mt[243] this[133710])(130557 'expand_tuple' ranges[130545])(value = call_tmp[658765]))
    }
    unknown call_tmp[658772] "maybe param" "maybe type" "temp"
    (658775 'move' call_tmp[658772](130573 call(384129 call (partial) _dom _mt[243] this[133710])(130571 'expand_tuple' ranges[130545])))
    unknown d[130574] "dead at end of block" "no auto destroy"
    (543039 'init var' d[130574] call_tmp[658772])
    (130577 'end of statement')
    unknown call_tmp[658779] "expr temp" "maybe param" "maybe type" "temp"
    (658782 'move' call_tmp[658779](130579 call _value _mt[243] d[130574]))
    unknown call_tmp[658786] "expr temp" "maybe param" "maybe type" "temp"
    (658789 'move' call_tmp[658786](130584 call _free_when_no_arrs _mt[243] call_tmp[658779]))
    (130588 call = call_tmp[658786] 1)
    (480235 'end of statement' d[130574])
    const tmp[130633] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[566320] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566321] "maybe param" "temp"
    unknown call_tmp[658793] "expr temp" "maybe param" "maybe type" "temp"
    (658796 'move' call_tmp[658793](359919 call _value _mt[243] this[133710]))
    unknown call_tmp[658800] "expr temp" "maybe param" "maybe type" "temp"
    (658803 'move' call_tmp[658800](130601 call(130597 call (partial) isSliceArrayView _mt[243] call_tmp[658793])))
    (566326 'move' tmp[566321](566324 call _cond_test call_tmp[658800]))
    if tmp[566321]
    {
      unknown tmp[566328] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658807] "expr temp" "maybe param" "maybe type" "temp"
      (658810 'move' call_tmp[658807](130603 call _value _mt[243] this[133710]))
      unknown call_tmp[658814] "expr temp" "maybe param" "maybe type" "temp"
      (658817 'move' call_tmp[658814](130606 call arr _mt[243] call_tmp[658807]))
      unknown call_tmp[658821] "expr temp" "maybe param" "maybe type" "temp"
      (658824 'move' call_tmp[658821](130610 call _value _mt[243] this[133710]))
      unknown call_tmp[658828] "expr temp" "maybe param" "maybe type" "temp"
      (658831 'move' call_tmp[658828](130613 call _ArrPid _mt[243] call_tmp[658821]))
      (566330 'move' tmp[566328](130617 call _build_tuple call_tmp[658814] call_tmp[658828]))
      (566335 'move' tmp[566320](566332 '_paramFoldLogical' tmp[566321] tmp[566328]))
    }
    {
      unknown tmp[566337] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[658835] "expr temp" "maybe param" "maybe type" "temp"
      (658838 'move' call_tmp[658835](130620 call _value _mt[243] this[133710]))
      unknown call_tmp[658842] "expr temp" "maybe param" "maybe type" "temp"
      (658845 'move' call_tmp[658842](130624 call _pid _mt[243] this[133710]))
      (566339 'move' tmp[566337](130628 call _build_tuple call_tmp[658835] call_tmp[658842]))
      (566344 'move' tmp[566320](566341 '_paramFoldLogical' tmp[566321] tmp[566337]))
    }
    (543041 'init var' tmp[130633] tmp[566320])
    (130640 call _check_tuple_var_decl tmp[130633] 2)
    (480237 'end of statement')
    unknown call_tmp[658847] "maybe param" "maybe type" "temp"
    (658850 'move' call_tmp[658847](130634 call tmp[130633] 0))
    const arr[130591] "dead at end of block" "const" "insert auto destroy"
    (543043 'init var' arr[130591] call_tmp[658847])
    unknown call_tmp[658852] "maybe param" "maybe type" "temp"
    (658855 'move' call_tmp[658852](130637 call tmp[130633] 1))
    const arrpid[130593] "dead at end of block" "const" "insert auto destroy"
    (543045 'init var' arrpid[130593] call_tmp[658852])
    (130645 'end of statement')
    unknown call_tmp[658859] "expr temp" "maybe param" "maybe type" "temp"
    (658862 'move' call_tmp[658859](130651 call eltType _mt[243] this[133710]))
    unknown call_tmp[658866] "expr temp" "maybe param" "maybe type" "temp"
    (658869 'move' call_tmp[658866](130657 call _pid _mt[243] d[130574]))
    unknown call_tmp[658873] "expr temp" "maybe param" "maybe type" "temp"
    (658876 'move' call_tmp[658873](130662 call _instance _mt[243] d[130574]))
    unknown call_tmp[658878] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658881 'move' call_tmp[658878](747922 'new' ArrayViewSliceArr[384106](?)(eltType = call_tmp[658859])(_DomPid = call_tmp[658866])(dom = call_tmp[658873])(_ArrPid = arrpid[130593])(_ArrInstance = arr[130591])(_chpl_manager = unmanaged[220](?))))
    unknown a[130671] "dead at end of block" "insert auto destroy"
    (543047 'init var' a[130671] call_tmp[658878])
    (130674 'end of statement' d[130574] d[130574] arrpid[130593] arr[130591])
    unknown call_tmp[658885] "expr temp" "maybe param" "maybe type" "temp"
    (658888 'move' call_tmp[658885](130676 call _value _mt[243] d[130574]))
    (130688 call(130679 call (partial) add_arr _mt[243] call_tmp[658885]) a[130671](locking = 0)(addToList = 0))
    (480242 'end of statement' d[130574] a[130671])
    unknown call_tmp[658892] "expr temp" "maybe param" "maybe type" "temp"
    (658895 'move' call_tmp[658892](130693 call _newArray a[130671]))
    (518068 'move' ret[518063](518067 'deref' call_tmp[658892]))
    gotoReturn _end_this[518061] _end_this[518061]
    (480245 'end of statement' a[130671])
    label _end_this[518061]
    (518065 return ret[518063])
  }
  where {
    (130553 call chpl__isTupleOfRanges ranges[130545])
  }
  function _array[133600](?).this[130705](arg _mt[133716]:_MT[238], arg this[133714]:_array[133600](?), arg args[130702]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518074] "RVV" "temp"
    unknown call_tmp[658899] "expr temp" "maybe param" "maybe type" "temp"
    (658902 'move' call_tmp[658899](130724 call _cond_test 1))
    if call_tmp[658899]
    {
      (130722 call(384147 call (partial) checkRankChange _mt[243] this[133714]) args[130702])
    }
    unknown call_tmp[658908] "maybe param" "maybe type" "temp"
    (658911 'move' call_tmp[658908](130737 call(130731 call (partial) _dom _mt[243] this[133714])(130735 'expand_tuple' args[130702])))
    const rcdom[130738] "dead at end of block" "const" "insert auto destroy"
    (543049 'init var' rcdom[130738] call_tmp[658908])
    (130741 'end of statement')
    unknown call_tmp[658915] "expr temp" "maybe param" "maybe type" "temp"
    (658918 'move' call_tmp[658915](130748 call _value _mt[243] this[133714]))
    unknown call_tmp[658922] "expr temp" "maybe param" "maybe type" "temp"
    (658925 'move' call_tmp[658922](130752 call _pid _mt[243] this[133714]))
    unknown call_tmp[658927] "maybe param" "maybe type" "temp"
    (658930 'move' call_tmp[658927](130756 call _build_tuple call_tmp[658915] call_tmp[658922]))
    const tmp[130758] "dead at end of block" "const" "insert auto destroy" "temp"
    (543051 'init var' tmp[130758] call_tmp[658927])
    (130765 call _check_tuple_var_decl tmp[130758] 2)
    (480248 'end of statement')
    unknown call_tmp[658932] "maybe param" "maybe type" "temp"
    (658935 'move' call_tmp[658932](130759 call tmp[130758] 0))
    const arr[130742] "dead at end of block" "const" "insert auto destroy"
    (543053 'init var' arr[130742] call_tmp[658932])
    unknown call_tmp[658937] "maybe param" "maybe type" "temp"
    (658940 'move' call_tmp[658937](130762 call tmp[130758] 1))
    const arrpid[130744] "dead at end of block" "const" "insert auto destroy"
    (543055 'init var' arrpid[130744] call_tmp[658937])
    (130770 'end of statement')
    unknown call_tmp[658944] "expr temp" "maybe param" "maybe type" "temp"
    (658947 'move' call_tmp[658944](130776 call eltType _mt[243] this[133714]))
    unknown call_tmp[658951] "expr temp" "maybe param" "maybe type" "temp"
    (658954 'move' call_tmp[658951](130782 call _pid _mt[243] rcdom[130738]))
    unknown call_tmp[658958] "expr temp" "maybe param" "maybe type" "temp"
    (658961 'move' call_tmp[658958](130787 call _instance _mt[243] rcdom[130738]))
    unknown call_tmp[658965] "expr temp" "maybe param" "maybe type" "temp"
    (658968 'move' call_tmp[658965](130796 call _value _mt[243] rcdom[130738]))
    unknown call_tmp[658972] "expr temp" "maybe param" "maybe type" "temp"
    (658975 'move' call_tmp[658972](130799 call collapsedDim _mt[243] call_tmp[658965]))
    unknown call_tmp[658979] "expr temp" "maybe param" "maybe type" "temp"
    (658982 'move' call_tmp[658979](130804 call _value _mt[243] rcdom[130738]))
    unknown call_tmp[658986] "expr temp" "maybe param" "maybe type" "temp"
    (658989 'move' call_tmp[658986](130807 call idx _mt[243] call_tmp[658979]))
    unknown call_tmp[658991] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (658994 'move' call_tmp[658991](747923 'new' ArrayViewRankChangeArr[384153](?)(eltType = call_tmp[658944])(_DomPid = call_tmp[658951])(dom = call_tmp[658958])(_ArrPid = arrpid[130744])(_ArrInstance = arr[130742])(collapsedDim = call_tmp[658972])(idx = call_tmp[658986])(_chpl_manager = unmanaged[220](?))))
    unknown a[130812] "dead at end of block" "insert auto destroy"
    (543057 'init var' a[130812] call_tmp[658991])
    (130815 'end of statement' rcdom[130738] rcdom[130738] arrpid[130744] arr[130742] rcdom[130738] rcdom[130738])
    unknown call_tmp[658998] "expr temp" "maybe param" "maybe type" "temp"
    (659001 'move' call_tmp[658998](130817 call _value _mt[243] rcdom[130738]))
    (130827 call(130820 call (partial) add_arr _mt[243] call_tmp[658998]) a[130812](locking = 0))
    (480255 'end of statement' rcdom[130738] a[130812])
    unknown call_tmp[659005] "expr temp" "maybe param" "maybe type" "temp"
    (659008 'move' call_tmp[659005](130832 call _newArray a[130812]))
    (518079 'move' ret[518074](518078 'deref' call_tmp[659005]))
    gotoReturn _end_this[518072] _end_this[518072]
    (480258 'end of statement' a[130812])
    label _end_this[518072]
    (518076 return ret[518074])
  }
  where {
    unknown call_tmp[659012] "expr temp" "maybe param" "maybe type" "temp"
    (659015 'move' call_tmp[659012](359931 call _value _mt[243] this[133714]))
    unknown call_tmp[659019] "expr temp" "maybe param" "maybe type" "temp"
    (659022 'move' call_tmp[659019](130711 call dom _mt[243] call_tmp[659012]))
    unknown call_tmp[659026] "expr temp" "maybe param" "maybe type" "temp"
    (659029 'move' call_tmp[659026](130714 call idxType _mt[243] call_tmp[659019]))
    (130717 call _validRankChangeArgs args[130702] call_tmp[659026])
  }
  function _array[133600](?).checkRankChange[130842](arg _mt[133720]:_MT[238], arg this[133718]:_array[133600](?), arg args[130840]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[130923] "dead at end of block" "insert auto destroy"
      (543059 'init var' i[130923] 0)
      (480260 'end of statement')
      unknown tmp[130924] "maybe param" "temp"
      unknown call_tmp[659033] "expr temp" "maybe param" "maybe type" "temp"
      (659036 'move' call_tmp[659033](130846 call size _mt[243] args[130840]))
      unknown call_tmp[659038] "expr temp" "maybe param" "maybe type" "temp"
      (659041 'move' call_tmp[659038](130850 call - call_tmp[659033] 1))
      (130936 'move' tmp[130924](130934 call chpl_compute_low_param_loop_bound 0 call_tmp[659038]))
      unknown tmp[130925] "maybe param" "temp"
      unknown call_tmp[659045] "expr temp" "maybe param" "maybe type" "temp"
      (659048 'move' call_tmp[659045](130943 call size _mt[243] args[130840]))
      unknown call_tmp[659050] "expr temp" "maybe param" "maybe type" "temp"
      (659053 'move' call_tmp[659050](130941 call - call_tmp[659045] 1))
      (130949 'move' tmp[130925](130947 call chpl_compute_high_param_loop_bound 0 call_tmp[659050]))
      unknown tmp[130926] "maybe param" "temp"
      (130952 'move' tmp[130926] 1)
      ParamForLoop[130954]
      { i[130923] tmp[130924] tmp[130925] tmp[130926]
        unknown call_tmp[659057] "expr temp" "maybe param" "maybe type" "temp"
        (659060 'move' call_tmp[659057](359945 call _value _mt[243] this[133718]))
        unknown call_tmp[659064] "expr temp" "maybe param" "maybe type" "temp"
        (659067 'move' call_tmp[659064](130855 call dom _mt[243] call_tmp[659057]))
        unknown call_tmp[659071] "expr temp" "maybe param" "maybe type" "temp"
        (659074 'move' call_tmp[659071](130863 call(130858 call (partial) dsiDim _mt[243] call_tmp[659064]) i[130923]))
        unknown call_tmp[659078] "expr temp" "maybe param" "maybe type" "temp"
        (659081 'move' call_tmp[659078](130870 call args[130840] i[130923]))
        unknown call_tmp[659083] "expr temp" "maybe param" "maybe type" "temp"
        (659086 'move' call_tmp[659083](130872 call(130864 call (partial) boundsCheck _mt[243] call_tmp[659071]) call_tmp[659078]))
        unknown call_tmp[659088] "expr temp" "maybe param" "maybe type" "temp"
        (659091 'move' call_tmp[659088](130873 call ! call_tmp[659083]))
        unknown call_tmp[659093] "expr temp" "maybe param" "maybe type" "temp"
        (659096 'move' call_tmp[659093](130918 call _cond_test call_tmp[659088]))
        if call_tmp[659093]
        {
          unknown call_tmp[659098] "expr temp" "maybe param" "maybe type" "temp"
          (659101 'move' call_tmp[659098](130915 call args[130840] i[130923]))
          (130916 call halt "array slice out of bounds in dimension " i[130923] ": " call_tmp[659098])
          (480261 'end of statement' i[130923] i[130923])
        }
      }
      label _unused_continueLabel[130928]
      label _breakLabel[130927]
    }
    (518083 return _void[55])
  }
  function _array[133600](?).localSlice[130972](arg _mt[133724]:_MT[238], arg this[133722]:_array[133600](?), arg r[130969]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518087] "RVV" "temp"
    unknown call_tmp[659105] "expr temp" "maybe param" "maybe type" "temp"
    (659108 'move' call_tmp[659105](130995 call _cond_test 1))
    if call_tmp[659105]
    {
      unknown call_tmp[659114] "expr temp" "maybe param" "maybe type" "temp"
      (659117 'move' call_tmp[659114](384183 call _value _mt[243] this[133722]))
      (130993 call(384178 call (partial) checkSlice _mt[243] this[133722])(130989 'expand_tuple' r[130969])(value = call_tmp[659114]))
    }
    unknown call_tmp[659121] "maybe param" "maybe type" "temp"
    (659124 'move' call_tmp[659121](131005 call(384187 call (partial) _dom _mt[243] this[133722])(131003 'expand_tuple' r[130969])))
    unknown dom[131006] "dead at end of block" "insert auto destroy"
    (543061 'init var' dom[131006] call_tmp[659121])
    (131009 'end of statement')
    unknown call_tmp[659128] "expr temp" "maybe param" "maybe type" "temp"
    (659131 'move' call_tmp[659128](131013 call(384194 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133722]) dom[131006]))
    (518092 'move' ret[518087](518091 'deref' call_tmp[659128]))
    gotoReturn _end_localSlice[518085] _end_localSlice[518085]
    (480265 'end of statement' dom[131006])
    label _end_localSlice[518085]
    (518089 return ret[518087])
  }
  where {
    unknown tmp[425551] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492245] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659135] "expr temp" "maybe param" "maybe type" "temp"
      (659138 'move' call_tmp[659135](384171 call _value _mt[243] this[133722]))
      (492249 'move' call_type_tmp[492245](130976 'typeof' call_tmp[659135]))
    }
    (425562 'move' tmp[425551](354353 'is_subtype' DefaultRectangularArr[379750](?) call_type_tmp[492245]))
    unknown call_tmp[659140] "expr temp" "maybe param" "maybe type" "temp"
    (659143 'move' call_tmp[659140](425564 call _cond_invalid tmp[425551]))
    if call_tmp[659140]
    {
      (425567 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566351] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566352] "maybe param" "temp"
    unknown call_tmp[659145] "expr temp" "maybe param" "maybe type" "temp"
    (659148 'move' call_tmp[659145](425552 call isTrue tmp[425551]))
    (566357 'move' tmp[566352](566355 call _cond_test call_tmp[659145]))
    if tmp[566352]
    {
      unknown tmp[566359] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659150] "expr temp" "maybe param" "maybe type" "temp"
      (659153 'move' call_tmp[659150](130983 call chpl__isTupleOfRanges r[130969]))
      (566361 'move' tmp[566359](425555 call isTrue call_tmp[659150]))
      (566366 'move' tmp[566351](566363 '_paramFoldLogical' tmp[566352] tmp[566359]))
    }
    {
      (566371 'move' tmp[566351](566368 '_paramFoldLogical' tmp[566352] 0))
    }
    (748339 call chpl_statementLevelSymbol tmp[566351])
  }
  function _array[133600](?).localSlice[131025](arg _mt[133728]:_MT[238], arg this[133726]:_array[133600](?), arg d[131022]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518098] "RVV" "temp"
    unknown call_tmp[659155] "expr temp" "maybe param" "maybe type" "temp"
    (659158 'move' call_tmp[659155](131047 call _cond_test 1))
    if call_tmp[659155]
    {
      unknown call_tmp[659164] "expr temp" "maybe param" "maybe type" "temp"
      (659167 'move' call_tmp[659164](131040 call(131036 call (partial) getIndices _mt[243] d[131022])))
      unknown call_tmp[659171] "expr temp" "maybe param" "maybe type" "temp"
      (659174 'move' call_tmp[659171](384210 call _value _mt[243] this[133726]))
      (131045 call(384206 call (partial) checkSlice _mt[243] this[133726])(131041 'expand_tuple' call_tmp[659164])(value = call_tmp[659171]))
    }
    unknown call_tmp[659178] "expr temp" "maybe param" "maybe type" "temp"
    (659181 'move' call_tmp[659178](131056 call(384214 call (partial) chpl__localSliceDefaultArithArrHelp _mt[243] this[133726]) d[131022]))
    (518103 'move' ret[518098](518102 'deref' call_tmp[659178]))
    (518100 return ret[518098])
  }
  where {
    { scopeless type
      unknown call_type_tmp[492251] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659185] "expr temp" "maybe param" "maybe type" "temp"
      (659188 'move' call_tmp[659185](384200 call _value _mt[243] this[133726]))
      (492255 'move' call_type_tmp[492251](131029 'typeof' call_tmp[659185]))
    }
    (354354 'is_subtype' DefaultRectangularArr[379750](?) call_type_tmp[492251])
  }
  function _array[133600](?).chpl__localSliceDefaultArithArrHelp[131068](arg _mt[133732]:_MT[238], arg this[133730]:_array[133600](?), arg d[131065]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no copy return"
  {
    unknown ret[518107] "RVV" "temp"
    unknown call_tmp[659192] "expr temp" "maybe param" "maybe type" "temp"
    (659195 'move' call_tmp[659192](384220 call _value _mt[243] this[133730]))
    unknown call_tmp[659197] "expr temp" "maybe param" "maybe type" "temp"
    (659200 'move' call_tmp[659197](131071 '_wide_get_locale' call_tmp[659192]))
    unknown call_tmp[659202] "expr temp" "maybe param" "maybe type" "temp"
    (659205 'move' call_tmp[659202](131072 call chpl_localeID_to_locale call_tmp[659197]))
    unknown call_tmp[659207] "expr temp" "maybe param" "maybe type" "temp"
    (659210 'move' call_tmp[659207](384223 call here[90439]))
    unknown call_tmp[659212] "expr temp" "maybe param" "maybe type" "temp"
    (659215 'move' call_tmp[659212](131075 call != call_tmp[659202] call_tmp[659207]))
    unknown call_tmp[659217] "expr temp" "maybe param" "maybe type" "temp"
    (659220 'move' call_tmp[659217](131108 call _cond_test call_tmp[659212]))
    if call_tmp[659217]
    {
      unknown call_tmp[659224] "expr temp" "maybe param" "maybe type" "temp"
      (659227 'move' call_tmp[659224](384226 call _value _mt[243] this[133730]))
      unknown call_tmp[659229] "expr temp" "maybe param" "maybe type" "temp"
      (659232 'move' call_tmp[659229](131100 '_wide_get_node' call_tmp[659224]))
      unknown call_tmp[659234] "expr temp" "maybe param" "maybe type" "temp"
      (659237 'move' call_tmp[659234](359950 call here[90439]))
      unknown call_tmp[659241] "expr temp" "maybe param" "maybe type" "temp"
      (659244 'move' call_tmp[659241](131103 call id _mt[243] call_tmp[659234]))
      (131106 call halt "Attempting to take a local slice of an array on locale " call_tmp[659229] " from locale " call_tmp[659241])
    }
    unknown call_tmp[659246] "expr temp" "maybe param" "maybe type" "temp"
    (659249 'move' call_tmp[659246](131117 call this[133730] d[131065]))
    (518112 'move' ret[518107](518111 'deref' call_tmp[659246]))
    (518109 return ret[518107])
  }
  function _array[133600](?).localSlice[131128](arg _mt[133736]:_MT[238], arg this[133734]:_array[133600](?), arg r[131125]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518116] "RVV" "temp"
    unknown call_tmp[659253] "expr temp" "maybe param" "maybe type" "temp"
    (659256 'move' call_tmp[659253](131153 call _cond_test 1))
    if call_tmp[659253]
    {
      unknown call_tmp[659262] "expr temp" "maybe param" "maybe type" "temp"
      (659265 'move' call_tmp[659262](384248 call _value _mt[243] this[133734]))
      (131151 call(384243 call (partial) checkSlice _mt[243] this[133734])(131147 'expand_tuple' r[131125])(value = call_tmp[659262]))
    }
    unknown call_tmp[659269] "expr temp" "maybe param" "maybe type" "temp"
    (659272 'move' call_tmp[659269](359953 call _value _mt[243] this[133734]))
    unknown call_tmp[659276] "expr temp" "maybe param" "maybe type" "temp"
    (659279 'move' call_tmp[659276](131165 call(131160 call (partial) dsiLocalSlice _mt[243] call_tmp[659269]) r[131125]))
    (518121 'move' ret[518116](518120 'deref' call_tmp[659276]))
    (518118 return ret[518116])
  }
  where {
    unknown tmp[425572] "maybe param" "temp"
    (425583 'move' tmp[425572](131133 call chpl__isTupleOfRanges r[131125]))
    unknown call_tmp[659281] "expr temp" "maybe param" "maybe type" "temp"
    (659284 'move' call_tmp[659281](425585 call _cond_invalid tmp[425572]))
    if call_tmp[659281]
    {
      (425588 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566378] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566379] "maybe param" "temp"
    unknown call_tmp[659286] "expr temp" "maybe param" "maybe type" "temp"
    (659289 'move' call_tmp[659286](425573 call isTrue tmp[425572]))
    (566384 'move' tmp[566379](566382 call _cond_test call_tmp[659286]))
    if tmp[566379]
    {
      { scopeless type
        unknown call_type_tmp[492257] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659293] "expr temp" "maybe param" "maybe type" "temp"
        (659296 'move' call_tmp[659293](384237 call _value _mt[243] this[133734]))
        (492261 'move' call_type_tmp[492257](131136 'typeof' call_tmp[659293]))
      }
      unknown tmp[566386] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659298] "expr temp" "maybe param" "maybe type" "temp"
      (659301 'move' call_tmp[659298](354355 'is_subtype' DefaultRectangularArr[379750](?) call_type_tmp[492257]))
      unknown call_tmp[659303] "expr temp" "maybe param" "maybe type" "temp"
      (659306 'move' call_tmp[659303](131140 call ! call_tmp[659298]))
      (566388 'move' tmp[566386](425576 call isTrue call_tmp[659303]))
      (566393 'move' tmp[566378](566390 '_paramFoldLogical' tmp[566379] tmp[566386]))
    }
    {
      (566398 'move' tmp[566378](566395 '_paramFoldLogical' tmp[566379] 0))
    }
    (748341 call chpl_statementLevelSymbol tmp[566378])
  }
  function _array[133600](?).localSlice[131177](arg _mt[133740]:_MT[238], arg this[133738]:_array[133600](?), arg d[131174]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[518125] "RVV" "temp"
    unknown call_tmp[659312] "expr temp" "maybe param" "maybe type" "temp"
    (659315 'move' call_tmp[659312](131185 call(131181 call (partial) getIndices _mt[243] d[131174])))
    unknown call_tmp[659317] "expr temp" "maybe param" "maybe type" "temp"
    (659320 'move' call_tmp[659317](131188 call(384254 call (partial) localSlice _mt[243] this[133738])(131186 'expand_tuple' call_tmp[659312])))
    (518130 'move' ret[518125](518129 'deref' call_tmp[659317]))
    (518127 return ret[518125])
  }
  function _array[133600](?).these[131196](arg _mt[133744]:_MT[238], arg this[133742]:_array[133600](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    unknown ret[518134] "RVV" "temp"
    {
      unknown _indexOfInterest[131209] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131210] "expr temp" "temp"
      unknown call_tmp[659324] "expr temp" "maybe param" "maybe type" "temp"
      (659327 'move' call_tmp[659324](359958 call _value _mt[243] this[133742]))
      unknown call_tmp[659331] "expr temp" "maybe param" "maybe type" "temp"
      (659334 'move' call_tmp[659331](131204 call(131200 call (partial) these _mt[243] call_tmp[659324])))
      (131219 'move' _iterator[131210](131217 call _getIterator call_tmp[659331]))
      Defer
      {
        {
          (131236 call _freeIterator _iterator[131210])
        }
      }
      { scopeless type
        (131225 'move' _indexOfInterest[131209](131222 call iteratorIndex _iterator[131210]))
      }
      ForLoop[131211]
      {
        unknown i[131229] "index var" "insert auto destroy"
        (480275 'end of statement')
        (131231 'move' i[131229] _indexOfInterest[131209])
        (480276 'end of statement' i[131229])
        {
          unknown yret[518138] "YVV" "temp"
          (518141 'move' yret[518138](518140 'addr of' i[131229]))
          (518143 yield yret[518138])
          (480278 'end of statement' i[131229])
        }
        label _continueLabel[131214]
        _indexOfInterest[131209]
        _iterator[131210]
      }
      label _breakLabel[131215]
    }
    (518136 return ret[518134])
  }
  function _array[133600](?).these[131252](arg _mt[133748]:_MT[238], arg this[133746]:_array[133600](?), param arg tag[131249]:iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[518147] "RVV" "temp"
    {
      unknown _indexOfInterest[131281] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131282] "expr temp" "temp"
      unknown call_tmp[659338] "expr temp" "maybe param" "maybe type" "temp"
      (659341 'move' call_tmp[659338](359963 call _value _mt[243] this[133746]))
      unknown call_tmp[659345] "expr temp" "maybe param" "maybe type" "temp"
      (659348 'move' call_tmp[659345](131277 call(131272 call (partial) these _mt[243] call_tmp[659338]) tag[131249]))
      (131291 'move' _iterator[131282](131289 call _getIterator call_tmp[659345]))
      Defer
      {
        {
          (131308 call _freeIterator _iterator[131282])
        }
      }
      { scopeless type
        (131297 'move' _indexOfInterest[131281](131294 call iteratorIndex _iterator[131282]))
      }
      ForLoop[131283]
      {
        unknown i[131301] "index var" "insert auto destroy"
        (480281 'end of statement')
        (131303 'move' i[131301] _indexOfInterest[131281])
        (480282 'end of statement' i[131301])
        unknown yret[518151] "YVV" "temp"
        (518154 'move' yret[518151](518153 'addr of' i[131301]))
        (518156 yield yret[518151])
        (480284 'end of statement' i[131301])
        label _continueLabel[131286]
        _indexOfInterest[131281]
        _iterator[131282]
      }
      label _breakLabel[131287]
    }
    (518149 return ret[518147])
  }
  where {
    unknown tmp[425593] "maybe param" "temp"
    (425604 'move' tmp[425593](131259 call == tag[131249] standalone[451]))
    unknown call_tmp[659350] "expr temp" "maybe param" "maybe type" "temp"
    (659353 'move' call_tmp[659350](425606 call _cond_invalid tmp[425593]))
    if call_tmp[659350]
    {
      (425609 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566405] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566406] "maybe param" "temp"
    unknown call_tmp[659355] "expr temp" "maybe param" "maybe type" "temp"
    (659358 'move' call_tmp[659355](425594 call isTrue tmp[425593]))
    (566411 'move' tmp[566406](566409 call _cond_test call_tmp[659355]))
    if tmp[566406]
    {
      unknown tmp[566413] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659362] "expr temp" "maybe param" "maybe type" "temp"
      (659365 'move' call_tmp[659362](384261 call _value _mt[243] this[133746]))
      unknown call_tmp[659367] "expr temp" "maybe param" "maybe type" "temp"
      (659370 'move' call_tmp[659367](131267 'method call resolves' call_tmp[659362] "these"(tag = tag[131249])))
      (566415 'move' tmp[566413](425597 call isTrue call_tmp[659367]))
      (566420 'move' tmp[566405](566417 '_paramFoldLogical' tmp[566406] tmp[566413]))
    }
    {
      (566425 'move' tmp[566405](566422 '_paramFoldLogical' tmp[566406] 0))
    }
    (748343 call chpl_statementLevelSymbol tmp[566405])
  }
  function _array[133600](?).these[131325](arg _mt[133752]:_MT[238], arg this[133750]:_array[133600](?), param arg tag[131322]:iterKind[453]) : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[518160] "RVV" "temp"
    {
      unknown _indexOfInterest[131345] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131346] "expr temp" "temp"
      unknown call_tmp[659374] "expr temp" "maybe param" "maybe type" "temp"
      (659377 'move' call_tmp[659374](359968 call _value _mt[243] this[133750]))
      unknown call_tmp[659381] "expr temp" "maybe param" "maybe type" "temp"
      (659384 'move' call_tmp[659381](131341 call(131336 call (partial) these _mt[243] call_tmp[659374]) tag[131322]))
      (131355 'move' _iterator[131346](131353 call _getIterator call_tmp[659381]))
      Defer
      {
        {
          (131372 call _freeIterator _iterator[131346])
        }
      }
      { scopeless type
        (131361 'move' _indexOfInterest[131345](131358 call iteratorIndex _iterator[131346]))
      }
      ForLoop[131347]
      {
        unknown followThis[131365] "index var" "insert auto destroy"
        (480287 'end of statement')
        (131367 'move' followThis[131365] _indexOfInterest[131345])
        (480288 'end of statement' followThis[131365])
        unknown yret[518164] "YVV" "temp"
        (518167 'move' yret[518164](518166 'deref' followThis[131365]))
        (518169 yield yret[518164])
        (480290 'end of statement' followThis[131365])
        label _continueLabel[131350]
        _indexOfInterest[131345]
        _iterator[131346]
      }
      label _breakLabel[131351]
    }
    (518162 return ret[518160])
  }
  where {
    (131332 call == tag[131322] leader[447])
  }
  function _array[133600](?).these[131389](arg _mt[133756]:_MT[238], arg this[133754]:_array[133600](?), param arg tag[131386]:iterKind[453], arg followThis[131391]:_any[178](?), param arg fast[131395]:bool[10] =
  0) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[518173] "RVV" "temp"
    unknown call_tmp[659388] "expr temp" "maybe param" "maybe type" "temp"
    (659391 'move' call_tmp[659388](384274 call _value _mt[243] this[133754]))
    unknown call_tmp[659393] "expr temp" "maybe param" "maybe type" "temp"
    (659396 'move' call_tmp[659393](131415 'method call resolves' call_tmp[659388] "these"(tag = tag[131386]) followThis[131391](fast = fast[131395])))
    unknown call_tmp[659398] "expr temp" "maybe param" "maybe type" "temp"
    (659401 'move' call_tmp[659398](131513 call _cond_test call_tmp[659393]))
    if call_tmp[659398]
    {
      {
        unknown _indexOfInterest[131431] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131432] "expr temp" "temp"
        unknown call_tmp[659405] "expr temp" "maybe param" "maybe type" "temp"
        (659408 'move' call_tmp[659405](359973 call _value _mt[243] this[133754]))
        unknown call_tmp[659412] "expr temp" "maybe param" "maybe type" "temp"
        (659415 'move' call_tmp[659412](131427 call(131418 call (partial) these _mt[243] call_tmp[659405])(tag = tag[131386]) followThis[131391](fast = fast[131395])))
        (131441 'move' _iterator[131432](131439 call _getIterator call_tmp[659412]))
        Defer
        {
          {
            (131458 call _freeIterator _iterator[131432])
          }
        }
        { scopeless type
          (131447 'move' _indexOfInterest[131431](131444 call iteratorIndex _iterator[131432]))
        }
        ForLoop[131433]
        {
          unknown i[131451] "index var" "insert auto destroy"
          (480293 'end of statement')
          (131453 'move' i[131451] _indexOfInterest[131431])
          (480294 'end of statement' i[131451])
          unknown yret[518177] "YVV" "temp"
          (518180 'move' yret[518177](518179 'addr of' i[131451]))
          (518182 yield yret[518177])
          (480296 'end of statement' i[131451])
          label _continueLabel[131436]
          _indexOfInterest[131431]
          _iterator[131432]
        }
        label _breakLabel[131437]
      }
    }
    {
      {
        unknown _indexOfInterest[131478] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131479] "expr temp" "temp"
        unknown call_tmp[659419] "expr temp" "maybe param" "maybe type" "temp"
        (659422 'move' call_tmp[659419](359977 call _value _mt[243] this[133754]))
        unknown call_tmp[659426] "expr temp" "maybe param" "maybe type" "temp"
        (659429 'move' call_tmp[659426](131474 call(131468 call (partial) these _mt[243] call_tmp[659419]) tag[131386] followThis[131391]))
        (131488 'move' _iterator[131479](131486 call _getIterator call_tmp[659426]))
        Defer
        {
          {
            (131505 call _freeIterator _iterator[131479])
          }
        }
        { scopeless type
          (131494 'move' _indexOfInterest[131478](131491 call iteratorIndex _iterator[131479]))
        }
        ForLoop[131480]
        {
          unknown i[131498] "index var" "insert auto destroy"
          (480299 'end of statement')
          (131500 'move' i[131498] _indexOfInterest[131478])
          (480300 'end of statement' i[131498])
          unknown yret[518184] "YVV" "temp"
          (518187 'move' yret[518184](518186 'addr of' i[131498]))
          (518189 yield yret[518184])
          (480302 'end of statement' i[131498])
          label _continueLabel[131483]
          _indexOfInterest[131478]
          _iterator[131479]
        }
        label _breakLabel[131484]
      }
    }
    (518175 return ret[518173])
  }
  where {
    (131404 call == tag[131386] follower[449])
  }
  function _array[133600](?).numElements[131523](arg _mt[133760]:_MT[238], arg this[133758]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518193] "RVV" "temp"
    unknown call_tmp[659431] "expr temp" "maybe param" "maybe type" "temp"
    (659434 'move' call_tmp[659431](131560 call + "'array.numElements' is deprecated - " "please use 'array.size' instead"))
    (131563 call compilerWarning call_tmp[659431])
    (480304 'end of statement')
    unknown call_tmp[659438] "expr temp" "maybe param" "maybe type" "temp"
    (659441 'move' call_tmp[659438](384288 call size _mt[243] this[133758]))
    (518198 'move' ret[518193](518197 'deref' call_tmp[659438]))
    (518195 return ret[518193])
  }
  function _array[133600](?).size[131573](arg _mt[133764]:_MT[238], arg this[133762]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518202] "RVV" "temp"
    unknown call_tmp[659445] "expr temp" "maybe param" "maybe type" "temp"
    (659448 'move' call_tmp[659445](359981 call _value _mt[243] this[133762]))
    unknown call_tmp[659452] "expr temp" "maybe param" "maybe type" "temp"
    (659455 'move' call_tmp[659452](131576 call dom _mt[243] call_tmp[659445]))
    unknown call_tmp[659459] "expr temp" "maybe param" "maybe type" "temp"
    (659462 'move' call_tmp[659459](131579 call dsiNumIndices _mt[243] call_tmp[659452]))
    (518207 'move' ret[518202](518206 'deref' call_tmp[659459]))
    (518204 return ret[518202])
  }
  function _array[133600](?).chpl_checkArrArgDoms[131593](arg _mt[133768]:_MT[238], arg this[133766]:_array[133600](?), arg formalDom[131590]:_domain[125914](?), param arg runtimeChecks[131596]:bool[10]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[659466] "expr temp" "maybe param" "maybe type" "temp"
    (659469 'move' call_tmp[659466](131600 call rank _mt[243] formalDom[131590]))
    unknown call_tmp[659473] "expr temp" "maybe param" "maybe type" "temp"
    (659476 'move' call_tmp[659473](131604 call _dom _mt[243] this[133766]))
    unknown call_tmp[659480] "expr temp" "maybe param" "maybe type" "temp"
    (659483 'move' call_tmp[659480](131607 call rank _mt[243] call_tmp[659473]))
    unknown call_tmp[659485] "expr temp" "maybe param" "maybe type" "temp"
    (659488 'move' call_tmp[659485](131610 call != call_tmp[659466] call_tmp[659480]))
    unknown call_tmp[659490] "expr temp" "maybe param" "maybe type" "temp"
    (659493 'move' call_tmp[659490](131675 call _cond_test call_tmp[659485]))
    if call_tmp[659490]
    {
      unknown call_tmp[659497] "expr temp" "maybe param" "maybe type" "temp"
      (659500 'move' call_tmp[659497](131631 call rank _mt[243] formalDom[131590]))
      unknown call_tmp[659502] "expr temp" "maybe param" "maybe type" "temp"
      (659505 'move' call_tmp[659502](131635 call _cast string[26] call_tmp[659497]))
      unknown call_tmp[659507] "expr temp" "maybe param" "maybe type" "temp"
      (659510 'move' call_tmp[659507](131637 call + "Rank mismatch passing array argument: expected " call_tmp[659502]))
      unknown call_tmp[659512] "expr temp" "maybe param" "maybe type" "temp"
      (659515 'move' call_tmp[659512](131656 call + call_tmp[659507] " but got "))
      unknown call_tmp[659519] "expr temp" "maybe param" "maybe type" "temp"
      (659522 'move' call_tmp[659519](131659 call _dom _mt[243] this[133766]))
      unknown call_tmp[659526] "expr temp" "maybe param" "maybe type" "temp"
      (659529 'move' call_tmp[659526](131662 call rank _mt[243] call_tmp[659519]))
      unknown call_tmp[659531] "expr temp" "maybe param" "maybe type" "temp"
      (659534 'move' call_tmp[659531](131666 call _cast string[26] call_tmp[659526]))
      unknown call_tmp[659536] "expr temp" "maybe param" "maybe type" "temp"
      (659539 'move' call_tmp[659536](131668 call + call_tmp[659512] call_tmp[659531]))
      (131673 call compilerError call_tmp[659536](errorDepth = 2))
    }
    { scopeless type
      unknown call_type_tmp[492263] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[659543] "expr temp" "maybe param" "maybe type" "temp"
      (659546 'move' call_tmp[659543](131682 call dist _mt[243] formalDom[131590]))
      unknown call_tmp[659550] "expr temp" "maybe param" "maybe type" "temp"
      (659553 'move' call_tmp[659550](131685 call _value _mt[243] call_tmp[659543]))
      (492267 'move' call_type_tmp[492263](131688 'typeof' call_tmp[659550]))
    }
    unknown call_tmp[659555] "expr temp" "maybe param" "maybe type" "temp"
    (659558 'move' call_tmp[659555](131691 call != call_type_tmp[492263] unmanaged DefaultDist[415502]))
    unknown call_tmp[659560] "expr temp" "maybe param" "maybe type" "temp"
    (659563 'move' call_tmp[659560](131819 call _cond_test call_tmp[659555]))
    if call_tmp[659560]
    {
      { scopeless type
        unknown call_type_tmp[492269] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[659567] "expr temp" "maybe param" "maybe type" "temp"
        (659570 'move' call_tmp[659567](131696 call _dom _mt[243] this[133766]))
        (492273 'move' call_type_tmp[492269](131699 'typeof' call_tmp[659567]))
      }
      unknown call_tmp[659572] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (659575 'move' call_tmp[659572](131694 'typeof' formalDom[131590]))
      unknown call_tmp[659577] "expr temp" "maybe param" "maybe type" "temp"
      (659580 'move' call_tmp[659577](131700 call != call_tmp[659572] call_type_tmp[492269]))
      unknown call_tmp[659582] "expr temp" "maybe param" "maybe type" "temp"
      (659585 'move' call_tmp[659582](131725 call _cond_test call_tmp[659577]))
      if call_tmp[659582]
      {
        (131723 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      unknown tmp[425614] "maybe param" "temp"
      (425625 'move' tmp[425614] runtimeChecks[131596])
      unknown call_tmp[659587] "expr temp" "maybe param" "maybe type" "temp"
      (659590 'move' call_tmp[659587](425627 call _cond_invalid tmp[425614]))
      if call_tmp[659587]
      {
        (425630 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[566432] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[566433] "maybe param" "temp"
      unknown call_tmp[659592] "expr temp" "maybe param" "maybe type" "temp"
      (659595 'move' call_tmp[659592](425615 call isTrue tmp[425614]))
      (566438 'move' tmp[566433](566436 call _cond_test call_tmp[659592]))
      if tmp[566433]
      {
        unknown tmp[566440] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[659599] "expr temp" "maybe param" "maybe type" "temp"
        (659602 'move' call_tmp[659599](131733 call dist _mt[243] formalDom[131590]))
        unknown call_tmp[659606] "expr temp" "maybe param" "maybe type" "temp"
        (659609 'move' call_tmp[659606](131737 call _dom _mt[243] this[133766]))
        unknown call_tmp[659613] "expr temp" "maybe param" "maybe type" "temp"
        (659616 'move' call_tmp[659613](131740 call dist _mt[243] call_tmp[659606]))
        unknown call_tmp[659618] "expr temp" "maybe param" "maybe type" "temp"
        (659621 'move' call_tmp[659618](131743 call != call_tmp[659599] call_tmp[659613]))
        (566442 'move' tmp[566440](425618 call isTrue call_tmp[659618]))
        (566447 'move' tmp[566432](566444 '_paramFoldLogical' tmp[566433] tmp[566440]))
      }
      {
        (566452 'move' tmp[566432](566449 '_paramFoldLogical' tmp[566433] 0))
      }
      unknown call_tmp[659623] "expr temp" "maybe param" "maybe type" "temp"
      (659626 'move' call_tmp[659623](131814 call _cond_test tmp[566432]))
      if call_tmp[659623]
      {
        unknown call_tmp[659630] "expr temp" "maybe param" "maybe type" "temp"
        (659633 'move' call_tmp[659630](131784 call dist _mt[243] formalDom[131590]))
        unknown call_tmp[659637] "expr temp" "maybe param" "maybe type" "temp"
        (659640 'move' call_tmp[659637](131806 call _dom _mt[243] this[133766]))
        unknown call_tmp[659644] "expr temp" "maybe param" "maybe type" "temp"
        (659647 'move' call_tmp[659644](131809 call dist _mt[243] call_tmp[659637]))
        (131812 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: " call_tmp[659630] "\n" "  Actual domain map is: " call_tmp[659644])
      }
    }
    unknown tmp[425635] "maybe param" "temp"
    (425646 'move' tmp[425635] runtimeChecks[131596])
    unknown call_tmp[659649] "expr temp" "maybe param" "maybe type" "temp"
    (659652 'move' call_tmp[659649](425648 call _cond_invalid tmp[425635]))
    if call_tmp[659649]
    {
      (425651 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566459] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566460] "maybe param" "temp"
    unknown call_tmp[659654] "expr temp" "maybe param" "maybe type" "temp"
    (659657 'move' call_tmp[659654](425636 call isTrue tmp[425635]))
    (566465 'move' tmp[566460](566463 call _cond_test call_tmp[659654]))
    if tmp[566460]
    {
      unknown tmp[566467] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659661] "expr temp" "maybe param" "maybe type" "temp"
      (659664 'move' call_tmp[659661](131826 call _dom _mt[243] this[133766]))
      unknown call_tmp[659666] "expr temp" "maybe param" "maybe type" "temp"
      (659669 'move' call_tmp[659666](131829 call != formalDom[131590] call_tmp[659661]))
      (566469 'move' tmp[566467](425639 call isTrue call_tmp[659666]))
      (566474 'move' tmp[566459](566471 '_paramFoldLogical' tmp[566460] tmp[566467]))
    }
    {
      (566479 'move' tmp[566459](566476 '_paramFoldLogical' tmp[566460] 0))
    }
    unknown call_tmp[659671] "expr temp" "maybe param" "maybe type" "temp"
    (659674 'move' call_tmp[659671](131894 call _cond_test tmp[566459]))
    if call_tmp[659671]
    {
      unknown call_tmp[659678] "expr temp" "maybe param" "maybe type" "temp"
      (659681 'move' call_tmp[659678](131889 call _dom _mt[243] this[133766]))
      (131892 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom[131590] "\n" "  Actual domain is: " call_tmp[659678])
    }
    (518209 return _void[55])
  }
  function _array[133600](?).reindex[131907](arg _mt[133772]:_MT[238], arg this[133770]:_array[133600](?), arg newDomain[131904]:_domain[125914](?)) : _unknown[51] "inline" "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518213] "RVV" "temp"
    unknown call_tmp[659687] "expr temp" "maybe param" "maybe type" "temp"
    (659690 'move' call_tmp[659687](131928 call(131924 call (partial) dims _mt[243] newDomain[131904])))
    unknown call_tmp[659692] "expr temp" "maybe param" "maybe type" "temp"
    (659695 'move' call_tmp[659692](131931 call(384301 call (partial) reindex _mt[243] this[133770])(131929 'expand_tuple' call_tmp[659687])))
    (518218 'move' ret[518213](518217 'deref' call_tmp[659692]))
    (518215 return ret[518213])
  }
  where {
    unknown tmp[425656] "maybe param" "temp"
    unknown call_tmp[659699] "expr temp" "maybe param" "maybe type" "temp"
    (659702 'move' call_tmp[659699](131911 call _dom _mt[243] this[133770]))
    (425667 'move' tmp[425656](131915 call isRectangularDom call_tmp[659699]))
    unknown call_tmp[659704] "expr temp" "maybe param" "maybe type" "temp"
    (659707 'move' call_tmp[659704](425669 call _cond_invalid tmp[425656]))
    if call_tmp[659704]
    {
      (425672 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566486] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566487] "maybe param" "temp"
    unknown call_tmp[659709] "expr temp" "maybe param" "maybe type" "temp"
    (659712 'move' call_tmp[659709](425657 call isTrue tmp[425656]))
    (566492 'move' tmp[566487](566490 call _cond_test call_tmp[659709]))
    if tmp[566487]
    {
      unknown tmp[566494] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[659714] "expr temp" "maybe param" "maybe type" "temp"
      (659717 'move' call_tmp[659714](131919 call isRectangularDom newDomain[131904]))
      (566496 'move' tmp[566494](425660 call isTrue call_tmp[659714]))
      (566501 'move' tmp[566486](566498 '_paramFoldLogical' tmp[566487] tmp[566494]))
    }
    {
      (566506 'move' tmp[566486](566503 '_paramFoldLogical' tmp[566487] 0))
    }
    (748345 call chpl_statementLevelSymbol tmp[566486])
  }
  function _array[133600](?).reindex[131944](arg _mt[133776]:_MT[238], arg this[133774]:_array[133600](?), arg newDims[131941]:_any[178](?) ...) : _unknown[51] "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[518222] "RVV" "temp"
    {
      unknown i[131998] "dead at end of block" "insert auto destroy"
      (543063 'init var' i[131998] 0)
      (480314 'end of statement')
      unknown tmp[131999] "maybe param" "temp"
      unknown call_tmp[659721] "expr temp" "maybe param" "maybe type" "temp"
      (659724 'move' call_tmp[659721](131955 call size _mt[243] newDims[131941]))
      unknown call_tmp[659726] "expr temp" "maybe param" "maybe type" "temp"
      (659729 'move' call_tmp[659726](131959 call - call_tmp[659721] 1))
      (132011 'move' tmp[131999](132009 call chpl_compute_low_param_loop_bound 0 call_tmp[659726]))
      unknown tmp[132000] "maybe param" "temp"
      unknown call_tmp[659733] "expr temp" "maybe param" "maybe type" "temp"
      (659736 'move' call_tmp[659733](132018 call size _mt[243] newDims[131941]))
      unknown call_tmp[659738] "expr temp" "maybe param" "maybe type" "temp"
      (659741 'move' call_tmp[659738](132016 call - call_tmp[659733] 1))
      (132024 'move' tmp[132000](132022 call chpl_compute_high_param_loop_bound 0 call_tmp[659738]))
      unknown tmp[132001] "maybe param" "temp"
      (132027 'move' tmp[132001] 1)
      ParamForLoop[132029]
      { i[131998] tmp[131999] tmp[132000] tmp[132001]
        unknown call_tmp[659743] "expr temp" "maybe param" "maybe type" "temp"
        (659746 'move' call_tmp[659743](131967 call newDims[131941] i[131998]))
        unknown call_tmp[659748] "expr temp" "maybe param" "maybe type" "temp"
        (659751 'move' call_tmp[659748](131969 call isRange call_tmp[659743]))
        unknown call_tmp[659753] "expr temp" "maybe param" "maybe type" "temp"
        (659756 'move' call_tmp[659753](131970 call ! call_tmp[659748]))
        unknown call_tmp[659758] "expr temp" "maybe param" "maybe type" "temp"
        (659761 'move' call_tmp[659758](131993 call _cond_test call_tmp[659753]))
        if call_tmp[659758]
        {
          (131991 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[132003]
      label _breakLabel[132002]
    }
    unknown call_tmp[659765] "expr temp" "maybe param" "maybe type" "temp"
    (659768 'move' call_tmp[659765](132040 call rank _mt[243] this[133774]))
    unknown call_tmp[659772] "expr temp" "maybe param" "maybe type" "temp"
    (659775 'move' call_tmp[659772](132044 call size _mt[243] newDims[131941]))
    unknown call_tmp[659777] "expr temp" "maybe param" "maybe type" "temp"
    (659780 'move' call_tmp[659777](132047 call != call_tmp[659765] call_tmp[659772]))
    unknown call_tmp[659782] "expr temp" "maybe param" "maybe type" "temp"
    (659785 'move' call_tmp[659782](132107 call _cond_test call_tmp[659777]))
    if call_tmp[659782]
    {
      unknown call_tmp[659789] "expr temp" "maybe param" "maybe type" "temp"
      (659792 'move' call_tmp[659789](132068 call rank _mt[243] this[133774]))
      unknown call_tmp[659794] "expr temp" "maybe param" "maybe type" "temp"
      (659797 'move' call_tmp[659794](132072 call _cast string[26] call_tmp[659789]))
      unknown call_tmp[659799] "expr temp" "maybe param" "maybe type" "temp"
      (659802 'move' call_tmp[659799](132074 call + "rank mismatch: cannot reindex() from " call_tmp[659794]))
      unknown call_tmp[659804] "expr temp" "maybe param" "maybe type" "temp"
      (659807 'move' call_tmp[659804](132093 call + call_tmp[659799] " dimension(s) to "))
      unknown call_tmp[659811] "expr temp" "maybe param" "maybe type" "temp"
      (659814 'move' call_tmp[659811](132096 call size _mt[243] newDims[131941]))
      unknown call_tmp[659816] "expr temp" "maybe param" "maybe type" "temp"
      (659819 'move' call_tmp[659816](132100 call _cast string[26] call_tmp[659811]))
      unknown call_tmp[659821] "expr temp" "maybe param" "maybe type" "temp"
      (659824 'move' call_tmp[659821](132102 call + call_tmp[659804] call_tmp[659816]))
      (132105 call compilerError call_tmp[659821])
    }
    {
      unknown i[132185] "dead at end of block" "insert auto destroy"
      (543065 'init var' i[132185] 0)
      (480317 'end of statement')
      unknown tmp[132186] "maybe param" "temp"
      unknown call_tmp[659828] "expr temp" "maybe param" "maybe type" "temp"
      (659831 'move' call_tmp[659828](384307 call rank _mt[243] this[133774]))
      unknown call_tmp[659833] "expr temp" "maybe param" "maybe type" "temp"
      (659836 'move' call_tmp[659833](132115 call - call_tmp[659828] 1))
      (132198 'move' tmp[132186](132196 call chpl_compute_low_param_loop_bound 0 call_tmp[659833]))
      unknown tmp[132187] "maybe param" "temp"
      unknown call_tmp[659840] "expr temp" "maybe param" "maybe type" "temp"
      (659843 'move' call_tmp[659840](384315 call rank _mt[243] this[133774]))
      unknown call_tmp[659845] "expr temp" "maybe param" "maybe type" "temp"
      (659848 'move' call_tmp[659845](132203 call - call_tmp[659840] 1))
      (132208 'move' tmp[132187](132206 call chpl_compute_high_param_loop_bound 0 call_tmp[659845]))
      unknown tmp[132188] "maybe param" "temp"
      (132211 'move' tmp[132188] 1)
      ParamForLoop[132213]
      { i[132185] tmp[132186] tmp[132187] tmp[132188]
        unknown call_tmp[659850] "expr temp" "maybe param" "maybe type" "temp"
        (659853 'move' call_tmp[659850](132122 call newDims[131941] i[132185]))
        unknown call_tmp[659857] "expr temp" "maybe param" "maybe type" "temp"
        (659860 'move' call_tmp[659857](132123 call size _mt[243] call_tmp[659850]))
        unknown call_tmp[659864] "expr temp" "maybe param" "maybe type" "temp"
        (659867 'move' call_tmp[659864](360006 call _value _mt[243] this[133774]))
        unknown call_tmp[659871] "expr temp" "maybe param" "maybe type" "temp"
        (659874 'move' call_tmp[659871](132127 call dom _mt[243] call_tmp[659864]))
        unknown call_tmp[659878] "expr temp" "maybe param" "maybe type" "temp"
        (659881 'move' call_tmp[659878](132135 call(132130 call (partial) dsiDim _mt[243] call_tmp[659871]) i[132185]))
        unknown call_tmp[659885] "expr temp" "maybe param" "maybe type" "temp"
        (659888 'move' call_tmp[659885](132136 call size _mt[243] call_tmp[659878]))
        unknown call_tmp[659890] "expr temp" "maybe param" "maybe type" "temp"
        (659893 'move' call_tmp[659890](132139 call != call_tmp[659857] call_tmp[659885]))
        unknown call_tmp[659895] "expr temp" "maybe param" "maybe type" "temp"
        (659898 'move' call_tmp[659895](132180 call _cond_test call_tmp[659890]))
        if call_tmp[659895]
        {
          (132178 call halt "extent in dimension " i[132185] " does not match actual")
          (480318 'end of statement' i[132185])
        }
      }
      label _unused_continueLabel[132190]
      label _breakLabel[132189]
    }
    unknown call_tmp[659902] "expr temp" "maybe param" "maybe type" "temp"
    (659905 'move' call_tmp[659902](132223 call _value _mt[243] this[133774]))
    unknown call_tmp[659909] "maybe param" "maybe type" "temp"
    (659912 'move' call_tmp[659909](132226 call dom _mt[243] call_tmp[659902]))
    const thisDomClass[132229] "dead at end of block" "const" "insert auto destroy"
    (543067 'init var' thisDomClass[132229] call_tmp[659909])
    (132232 'end of statement')
    unknown call_tmp[659916] "expr temp" "maybe param" "maybe type" "temp"
    (659919 'move' call_tmp[659916](132240 call pid _mt[243] thisDomClass[132229]))
    unknown call_tmp[659921] "maybe param" "maybe type" "temp"
    (659924 'move' call_tmp[659921](132244 call _build_tuple thisDomClass[132229] call_tmp[659916]))
    const tmp[132246] "dead at end of block" "const" "insert auto destroy" "temp"
    (543069 'init var' tmp[132246] call_tmp[659921])
    (132253 call _check_tuple_var_decl tmp[132246] 2)
    (480320 'end of statement')
    unknown call_tmp[659926] "maybe param" "maybe type" "temp"
    (659929 'move' call_tmp[659926](132247 call tmp[132246] 0))
    const dom[132233] "dead at end of block" "const" "insert auto destroy"
    (543071 'init var' dom[132233] call_tmp[659926])
    unknown call_tmp[659931] "maybe param" "maybe type" "temp"
    (659934 'move' call_tmp[659931](132250 call tmp[132246] 1))
    const dompid[132235] "dead at end of block" "const" "insert auto destroy"
    (543073 'init var' dompid[132235] call_tmp[659931])
    (132258 'end of statement')
    unknown call_tmp[659936] "maybe param" "maybe type" "temp"
    (659939 'move' call_tmp[659936](132262 call chpl__buildDomainExpr(132260 'expand_tuple' newDims[131941])))
    const updom[132264] "dead at end of block" "const" "no auto destroy"
    (543075 'init var' updom[132264] call_tmp[659936])
    (132267 'end of statement')
    unknown call_tmp[659943] "expr temp" "maybe param" "maybe type" "temp"
    (659946 'move' call_tmp[659943](132273 call _dom _mt[243] this[133774]))
    unknown call_tmp[659950] "expr temp" "maybe param" "maybe type" "temp"
    (659953 'move' call_tmp[659950](132276 call dist _mt[243] call_tmp[659943]))
    unknown call_tmp[659957] "expr temp" "maybe param" "maybe type" "temp"
    (659960 'move' call_tmp[659957](132279 call _pid _mt[243] call_tmp[659950]))
    unknown call_tmp[659964] "expr temp" "maybe param" "maybe type" "temp"
    (659967 'move' call_tmp[659964](132285 call _dom _mt[243] this[133774]))
    unknown call_tmp[659971] "expr temp" "maybe param" "maybe type" "temp"
    (659974 'move' call_tmp[659971](132288 call dist _mt[243] call_tmp[659964]))
    unknown call_tmp[659978] "expr temp" "maybe param" "maybe type" "temp"
    (659981 'move' call_tmp[659978](132291 call _instance _mt[243] call_tmp[659971]))
    unknown call_tmp[659985] "expr temp" "maybe param" "maybe type" "temp"
    (659988 'move' call_tmp[659985](132296 call _value _mt[243] updom[132264]))
    unknown call_tmp[659990] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659993 'move' call_tmp[659990](747924 'new' ArrayViewReindexDist[384321](?)(downDistPid = call_tmp[659957])(downDistInst = call_tmp[659978])(updom = call_tmp[659985])(downdomPid = dompid[132235])(downdomInst = dom[132233])(_chpl_manager = unmanaged[220](?))))
    const redist[132305] "dead at end of block" "const" "insert auto destroy"
    (543077 'init var' redist[132305] call_tmp[659990])
    (132308 'end of statement')
    unknown call_tmp[659995] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (659998 'move' call_tmp[659995](747925 'new' _distribution[118979](?) redist[132305]))
    const redistRec[132314] "dead at end of block" "const" "insert auto destroy"
    (543079 'init var' redistRec[132314] call_tmp[659995])
    (132317 'end of statement')
    unknown call_tmp[660002] "expr temp" "maybe param" "maybe type" "temp"
    (660005 'move' call_tmp[660002](384331 call rank _mt[243] this[133774]))
    unknown call_tmp[660009] "expr temp" "maybe param" "maybe type" "temp"
    (660012 'move' call_tmp[660009](132324 call idxType _mt[243] updom[132264]))
    unknown call_tmp[660016] "expr temp" "maybe param" "maybe type" "temp"
    (660019 'move' call_tmp[660016](132328 call stridable _mt[243] updom[132264]))
    unknown call_tmp[660023] "expr temp" "maybe param" "maybe type" "temp"
    (660026 'move' call_tmp[660023](132336 call(132332 call (partial) dims _mt[243] updom[132264])))
    unknown call_tmp[660028] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (660031 'move' call_tmp[660028](747926 'new' _domain[125914](?) redistRec[132314] call_tmp[660002] call_tmp[660009] call_tmp[660016] call_tmp[660023]))
    const newDom[132338] "dead at end of block" "const" "no auto destroy"
    (543081 'init var' newDom[132338] call_tmp[660028])
    (132341 'end of statement')
    unknown call_tmp[660035] "expr temp" "maybe param" "maybe type" "temp"
    (660038 'move' call_tmp[660035](132343 call _value _mt[243] newDom[132338]))
    unknown call_tmp[660042] "expr temp" "maybe param" "maybe type" "temp"
    (660045 'move' call_tmp[660042](132346 call _free_when_no_arrs _mt[243] call_tmp[660035]))
    (132350 call = call_tmp[660042] 1)
    (480329 'end of statement' newDom[132338])
    unknown call_tmp[660049] "expr temp" "maybe param" "maybe type" "temp"
    (660052 'move' call_tmp[660049](132359 call _value _mt[243] this[133774]))
    unknown call_tmp[660056] "expr temp" "maybe param" "maybe type" "temp"
    (660059 'move' call_tmp[660056](132363 call _pid _mt[243] this[133774]))
    unknown call_tmp[660061] "maybe param" "maybe type" "temp"
    (660064 'move' call_tmp[660061](132367 call _build_tuple call_tmp[660049] call_tmp[660056]))
    const tmp[132369] "dead at end of block" "const" "insert auto destroy" "temp"
    (543083 'init var' tmp[132369] call_tmp[660061])
    (132376 call _check_tuple_var_decl tmp[132369] 2)
    (480331 'end of statement')
    unknown call_tmp[660066] "maybe param" "maybe type" "temp"
    (660069 'move' call_tmp[660066](132370 call tmp[132369] 0))
    const arr[132353] "dead at end of block" "const" "insert auto destroy"
    (543085 'init var' arr[132353] call_tmp[660066])
    unknown call_tmp[660071] "maybe param" "maybe type" "temp"
    (660074 'move' call_tmp[660071](132373 call tmp[132369] 1))
    const arrpid[132355] "dead at end of block" "const" "insert auto destroy"
    (543087 'init var' arrpid[132355] call_tmp[660071])
    (132381 'end of statement')
    unknown call_tmp[660078] "expr temp" "maybe param" "maybe type" "temp"
    (660081 'move' call_tmp[660078](132387 call eltType _mt[243] this[133774]))
    unknown call_tmp[660085] "expr temp" "maybe param" "maybe type" "temp"
    (660088 'move' call_tmp[660085](132393 call _pid _mt[243] newDom[132338]))
    unknown call_tmp[660092] "expr temp" "maybe param" "maybe type" "temp"
    (660095 'move' call_tmp[660092](132398 call _instance _mt[243] newDom[132338]))
    unknown call_tmp[660097] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (660100 'move' call_tmp[660097](747927 'new' ArrayViewReindexArr[384335](?)(eltType = call_tmp[660078])(_DomPid = call_tmp[660085])(dom = call_tmp[660092])(_ArrPid = arrpid[132355])(_ArrInstance = arr[132353])(_chpl_manager = unmanaged[220](?))))
    unknown x[132407] "dead at end of block" "insert auto destroy"
    (543089 'init var' x[132407] call_tmp[660097])
    (132410 'end of statement' updom[132264] dompid[132235] dom[132233] redist[132305] redistRec[132314] updom[132264] updom[132264] updom[132264] newDom[132338] newDom[132338] arrpid[132355] arr[132353])
    unknown call_tmp[660104] "expr temp" "maybe param" "maybe type" "temp"
    (660107 'move' call_tmp[660104](132412 call _value _mt[243] newDom[132338]))
    (132422 call(132415 call (partial) add_arr _mt[243] call_tmp[660104]) x[132407](locking = 0))
    (480336 'end of statement' newDom[132338] x[132407])
    unknown call_tmp[660111] "expr temp" "maybe param" "maybe type" "temp"
    (660114 'move' call_tmp[660111](132427 call _newArray x[132407]))
    (518227 'move' ret[518222](518226 'deref' call_tmp[660111]))
    gotoReturn _end_reindex[518220] _end_reindex[518220]
    (480339 'end of statement' x[132407])
    label _end_reindex[518220]
    (518224 return ret[518222])
  }
  where {
    unknown call_tmp[660118] "expr temp" "maybe param" "maybe type" "temp"
    (660121 'move' call_tmp[660118](131948 call _dom _mt[243] this[133774]))
    (131952 call isRectangularDom call_tmp[660118])
  }
  function _array[133600](?).reindex[132439](arg _mt[133780]:_MT[238], arg this[133778]:_array[133600](?), arg d[132436]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns aliasing array" "no return value for void"
  {
    (132460 call compilerError "Reindexing non-rectangular arrays is not permitted.")
    (518231 return _void[55])
  }
  function _array[133600](?).writeThis[132469](arg _mt[133784]:_MT[238], arg this[133782]:_array[133600](?), arg f[132467]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660125] "expr temp" "maybe param" "maybe type" "temp"
    (660128 'move' call_tmp[660125](360025 call _value _mt[243] this[133782]))
    (132477 call(132472 call (partial) dsiSerialWrite _mt[243] call_tmp[660125]) f[132467])
    (518233 return _void[55])
  }
  function _array[133600](?).readThis[132486](arg _mt[133788]:_MT[238], arg this[133786]:_array[133600](?), arg f[132484]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660134] "expr temp" "maybe param" "maybe type" "temp"
    (660137 'move' call_tmp[660134](360029 call _value _mt[243] this[133786]))
    (132494 call(132489 call (partial) dsiSerialRead _mt[243] call_tmp[660134]) f[132484])
    (518235 return _void[55])
  }
  function _array[133600](?).IRV[132501](arg _mt[133792]:_MT[238], arg this[133790]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens" "no return value for void"
  {
    (132528 call compilerError "only sparse arrays have an IRV")
    (518237 return _void[55])
  }
  where {
    unknown call_tmp[660141] "expr temp" "maybe param" "maybe type" "temp"
    (660144 'move' call_tmp[660141](132506 call isSparseArr this[133790]))
    (132507 call ! call_tmp[660141])
  }
  function _array[133600](?).IRV[132536](arg _mt[133796]:_MT[238], arg this[133794]:_array[133600](?)) ref : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[518241] "RVV" "temp"
    unknown call_tmp[660148] "expr temp" "maybe param" "maybe type" "temp"
    (660151 'move' call_tmp[660148](360033 call _value _mt[243] this[133794]))
    unknown call_tmp[660155] "expr temp" "maybe param" "maybe type" "temp"
    (660158 'move' call_tmp[660155](132545 call IRV _mt[243] call_tmp[660148]))
    (518246 'move' ret[518241](518245 'addr of' call_tmp[660155]))
    (518243 return ret[518241])
  }
  where {
    (132541 call isSparseArr this[133794])
  }
  function _array[133600](?).sorted[132565](arg _mt[133800]:_MT[238], arg this[133798]:_array[133600](?), arg comparator[132561]:_any[178](?) :
  (748857 call chpl_defaultComparator) =
  (132560 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518250] "RVV" "temp"
    unknown call_tmp[660162] "expr temp" "maybe param" "maybe type" "temp"
    (660165 'move' call_tmp[660162](384348 call _value _mt[243] this[133798]))
    unknown call_tmp[660167] "expr temp" "maybe param" "maybe type" "temp"
    (660170 'move' call_tmp[660167](132589 call canResolveMethod module=[255] Reflection[224799] call_tmp[660162] "dsiSorted" comparator[132561]))
    unknown call_tmp[660172] "expr temp" "maybe param" "maybe type" "temp"
    (660175 'move' call_tmp[660172](132732 call _cond_test call_tmp[660167]))
    if call_tmp[660172]
    {
      {
        unknown _indexOfInterest[132602] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132603] "expr temp" "temp"
        unknown call_tmp[660179] "expr temp" "maybe param" "maybe type" "temp"
        (660182 'move' call_tmp[660179](360043 call _value _mt[243] this[133798]))
        unknown call_tmp[660186] "expr temp" "maybe param" "maybe type" "temp"
        (660189 'move' call_tmp[660186](132597 call(132592 call (partial) dsiSorted _mt[243] call_tmp[660179]) comparator[132561]))
        (132612 'move' _iterator[132603](132610 call _getIterator call_tmp[660186]))
        Defer
        {
          {
            (132629 call _freeIterator _iterator[132603])
          }
        }
        { scopeless type
          (132618 'move' _indexOfInterest[132602](132615 call iteratorIndex _iterator[132603]))
        }
        ForLoop[132604]
        {
          unknown i[132622] "index var" "insert auto destroy"
          (480347 'end of statement')
          (132624 'move' i[132622] _indexOfInterest[132602])
          (480348 'end of statement' i[132622])
          {
            unknown yret[518254] "YVV" "temp"
            (518257 'move' yret[518254](518256 'deref' i[132622]))
            (518259 yield yret[518254])
            (480350 'end of statement' i[132622])
          }
          label _continueLabel[132607]
          _indexOfInterest[132602]
          _iterator[132603]
        }
        label _breakLabel[132608]
      }
    }
    {
      unknown call_tmp[660193] "expr temp" "maybe param" "maybe type" "temp"
      (660196 'move' call_tmp[660193](384355 call _value _mt[243] this[133798]))
      unknown call_tmp[660198] "expr temp" "maybe param" "maybe type" "temp"
      (660201 'move' call_tmp[660198](132644 call canResolveMethod module=[255] Reflection[224799] call_tmp[660193] "dsiSorted"))
      unknown call_tmp[660203] "expr temp" "maybe param" "maybe type" "temp"
      (660206 'move' call_tmp[660203](132728 call _cond_test call_tmp[660198]))
      if call_tmp[660203]
      {
        { scopeless type
          unknown call_type_tmp[492275] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[660210] "expr temp" "maybe param" "maybe type" "temp"
          (660213 'move' call_tmp[660210](384359 call _value _mt[243] this[133798]))
          (492279 'move' call_type_tmp[492275](132647 'typeof' call_tmp[660210]))
        }
        unknown call_tmp[660215] "expr temp" "maybe param" "maybe type" "temp"
        (660218 'move' call_tmp[660215](132649 call _cast string[26] call_type_tmp[492275]))
        unknown call_tmp[660220] "expr temp" "maybe param" "maybe type" "temp"
        (660223 'move' call_tmp[660220](132668 call + call_tmp[660215] " does not support dsiSorted(comparator)"))
        (132671 call compilerError call_tmp[660220])
      }
      {
        unknown copy[132679] "dead at end of block" "insert auto destroy"
        (543091 'init var' copy[132679] this[133798])
        (132682 'end of statement')
        (132688 call sort copy[132679](comparator = comparator[132561]))
        (480353 'end of statement' copy[132679])
        {
          unknown _indexOfInterest[132695] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[132696] "expr temp" "temp"
          (132705 'move' _iterator[132696](132703 call _getIterator copy[132679]))
          Defer
          {
            {
              (132721 call _freeIterator _iterator[132696])
            }
          }
          { scopeless type
            (132710 'move' _indexOfInterest[132695](132707 call iteratorIndex _iterator[132696]))
          }
          ForLoop[132697]
          {
            unknown ind[132714] "index var" "insert auto destroy"
            (480356 'end of statement')
            (132716 'move' ind[132714] _indexOfInterest[132695])
            (480357 'end of statement' ind[132714])
            unknown yret[518261] "YVV" "temp"
            (518264 'move' yret[518261](518263 'deref' ind[132714]))
            (518266 yield yret[518261])
            (480359 'end of statement' ind[132714])
            label _continueLabel[132700]
            _indexOfInterest[132695]
            _iterator[132696]
          }
          label _breakLabel[132701]
        }
        (355179 'used modules list'(132675 'use' Sort[267885]))
      }
      (360047 'referenced modules list' Reflection[224799])
    }
    (518252 return ret[518250])
    (360037 'referenced modules list' Reflection[224799])
  }
  function _array[133600](?).displayRepresentation[132742](arg _mt[133804]:_MT[238], arg this[133802]:_array[133600](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[660227] "expr temp" "maybe param" "maybe type" "temp"
    (660230 'move' call_tmp[660227](360053 call _value _mt[243] this[133802]))
    (132749 call(132745 call (partial) dsiDisplayRepresentation _mt[243] call_tmp[660227]))
    (518268 return _void[55])
  }
  function _array[133600](?).targetLocales[132756](arg _mt[133808]:_MT[238], arg this[133806]:_array[133600](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518272] "RVV" "temp"
    unknown call_tmp[660236] "expr temp" "maybe param" "maybe type" "temp"
    (660239 'move' call_tmp[660236](360057 call _value _mt[243] this[133806]))
    unknown call_tmp[660243] "expr temp" "maybe param" "maybe type" "temp"
    (660246 'move' call_tmp[660243](132763 call(132759 call (partial) dsiTargetLocales _mt[243] call_tmp[660236])))
    (518277 'move' ret[518272](518276 'deref' call_tmp[660243]))
    (518274 return ret[518272])
  }
  function _array[133600](?).hasSingleLocalSubdomain[132771](arg _mt[133812]:_MT[238], arg this[133810]:_array[133600](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518281] "RVV" "param" "temp"
    unknown call_tmp[660250] "expr temp" "maybe param" "maybe type" "temp"
    (660253 'move' call_tmp[660250](360061 call _value _mt[243] this[133810]))
    unknown call_tmp[660257] "expr temp" "maybe param" "maybe type" "temp"
    (660260 'move' call_tmp[660257](132778 call(132774 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660250])))
    (518286 'move' ret[518281](518285 'deref' call_tmp[660257]))
    (518283 return ret[518281])
  }
  function _array[133600](?).localSubdomain[132792](arg _mt[133816]:_MT[238], arg this[133814]:_array[133600](?), arg loc[132788]:locale[28] =
  (384367 call here[90439])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518290] "RVV" "temp"
    unknown call_tmp[660264] "expr temp" "maybe param" "maybe type" "temp"
    (660267 'move' call_tmp[660264](360065 call _value _mt[243] this[133814]))
    unknown call_tmp[660271] "expr temp" "maybe param" "maybe type" "temp"
    (660274 'move' call_tmp[660271](132799 call(132795 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660264])))
    unknown call_tmp[660276] "expr temp" "maybe param" "maybe type" "temp"
    (660279 'move' call_tmp[660276](132800 call ! call_tmp[660271]))
    unknown call_tmp[660281] "expr temp" "maybe param" "maybe type" "temp"
    (660284 'move' call_tmp[660281](132807 call _cond_test call_tmp[660276]))
    if call_tmp[660281]
    {
      (132805 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[660288] "expr temp" "maybe param" "maybe type" "temp"
    (660291 'move' call_tmp[660288](360069 call _value _mt[243] this[133814]))
    unknown call_tmp[660295] "expr temp" "maybe param" "maybe type" "temp"
    (660298 'move' call_tmp[660295](132819 call(132814 call (partial) dsiLocalSubdomain _mt[243] call_tmp[660288]) loc[132788]))
    (518295 'move' ret[518290](518294 'deref' call_tmp[660295]))
    (518292 return ret[518290])
  }
  function _array[133600](?).localSubdomains[132832](arg _mt[133820]:_MT[238], arg this[133818]:_array[133600](?), arg loc[132828]:locale[28] =
  (384370 call here[90439])) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[518299] "RVV" "temp"
    unknown call_tmp[660302] "expr temp" "maybe param" "maybe type" "temp"
    (660305 'move' call_tmp[660302](360073 call _value _mt[243] this[133818]))
    unknown call_tmp[660309] "expr temp" "maybe param" "maybe type" "temp"
    (660312 'move' call_tmp[660309](132839 call(132835 call (partial) dsiHasSingleLocalSubdomain _mt[243] call_tmp[660302])))
    unknown call_tmp[660314] "expr temp" "maybe param" "maybe type" "temp"
    (660317 'move' call_tmp[660314](132893 call _cond_test call_tmp[660309]))
    if call_tmp[660314]
    {
      unknown yret[518303] "YVV" "temp"
      unknown call_tmp[660321] "expr temp" "maybe param" "maybe type" "temp"
      (660324 'move' call_tmp[660321](132843 call(384373 call (partial) localSubdomain _mt[243] this[133818]) loc[132828]))
      (518306 'move' yret[518303](518305 'deref' call_tmp[660321]))
      (518308 yield yret[518303])
    }
    {
      {
        unknown _indexOfInterest[132858] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132859] "expr temp" "temp"
        unknown call_tmp[660328] "expr temp" "maybe param" "maybe type" "temp"
        (660331 'move' call_tmp[660328](360077 call _value _mt[243] this[133818]))
        unknown call_tmp[660335] "expr temp" "maybe param" "maybe type" "temp"
        (660338 'move' call_tmp[660335](132854 call(132849 call (partial) dsiLocalSubdomains _mt[243] call_tmp[660328]) loc[132828]))
        (132868 'move' _iterator[132859](132866 call _getIterator call_tmp[660335]))
        Defer
        {
          {
            (132885 call _freeIterator _iterator[132859])
          }
        }
        { scopeless type
          (132874 'move' _indexOfInterest[132858](132871 call iteratorIndex _iterator[132859]))
        }
        ForLoop[132860]
        {
          unknown d[132878] "index var" "insert auto destroy"
          (480368 'end of statement')
          (132880 'move' d[132878] _indexOfInterest[132858])
          (480369 'end of statement' d[132878])
          unknown yret[518310] "YVV" "temp"
          (518313 'move' yret[518310](518312 'deref' d[132878]))
          (518315 yield yret[518310])
          (480371 'end of statement' d[132878])
          label _continueLabel[132863]
          _indexOfInterest[132858]
          _iterator[132859]
        }
        label _breakLabel[132864]
      }
    }
    (518301 return ret[518299])
  }
  function _array[133600](?).chpl__isDense1DArray[132902](arg _mt[133824]:_MT[238], arg this[133822]:_array[133600](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[518319] "RVV" "param" "temp"
    unknown tmp[425677] "maybe param" "temp"
    unknown tmp[425698] "maybe param" "temp"
    (425709 'move' tmp[425698](132907 call isRectangularArr this[133822]))
    unknown call_tmp[660340] "expr temp" "maybe param" "maybe type" "temp"
    (660343 'move' call_tmp[660340](425711 call _cond_invalid tmp[425698]))
    if call_tmp[660340]
    {
      (425714 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566513] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566514] "maybe param" "temp"
    unknown call_tmp[660345] "expr temp" "maybe param" "maybe type" "temp"
    (660348 'move' call_tmp[660345](425699 call isTrue tmp[425698]))
    (566519 'move' tmp[566514](566517 call _cond_test call_tmp[660345]))
    if tmp[566514]
    {
      unknown tmp[566521] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660352] "expr temp" "maybe param" "maybe type" "temp"
      (660355 'move' call_tmp[660352](132909 call rank _mt[243] this[133822]))
      unknown call_tmp[660357] "expr temp" "maybe param" "maybe type" "temp"
      (660360 'move' call_tmp[660357](132913 call == call_tmp[660352] 1))
      (566523 'move' tmp[566521](425702 call isTrue call_tmp[660357]))
      (566528 'move' tmp[566513](566525 '_paramFoldLogical' tmp[566514] tmp[566521]))
    }
    {
      (566533 'move' tmp[566513](566530 '_paramFoldLogical' tmp[566514] 0))
    }
    (425688 'move' tmp[425677] tmp[566513])
    unknown call_tmp[660362] "expr temp" "maybe param" "maybe type" "temp"
    (660365 'move' call_tmp[660362](425690 call _cond_invalid tmp[425677]))
    if call_tmp[660362]
    {
      (425693 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566540] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566541] "maybe param" "temp"
    unknown call_tmp[660367] "expr temp" "maybe param" "maybe type" "temp"
    (660370 'move' call_tmp[660367](425678 call isTrue tmp[425677]))
    (566546 'move' tmp[566541](566544 call _cond_test call_tmp[660367]))
    if tmp[566541]
    {
      unknown tmp[566548] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660374] "expr temp" "maybe param" "maybe type" "temp"
      (660377 'move' call_tmp[660374](132918 call _value _mt[243] this[133822]))
      unknown call_tmp[660381] "expr temp" "maybe param" "maybe type" "temp"
      (660384 'move' call_tmp[660381](132921 call stridable _mt[243] call_tmp[660374]))
      unknown call_tmp[660386] "expr temp" "maybe param" "maybe type" "temp"
      (660389 'move' call_tmp[660386](132924 call ! call_tmp[660381]))
      (566550 'move' tmp[566548](425681 call isTrue call_tmp[660386]))
      (566555 'move' tmp[566540](566552 '_paramFoldLogical' tmp[566541] tmp[566548]))
    }
    {
      (566560 'move' tmp[566540](566557 '_paramFoldLogical' tmp[566541] 0))
    }
    (518324 'move' ret[518319](518323 'deref' tmp[566540]))
    (518321 return ret[518319])
  }
  function _array[133600](?).chpl__assertSingleArrayDomain[132939](arg _mt[133828]:_MT[238], arg this[133826]:_array[133600](?), arg fnName[132936]:string[26]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660393] "expr temp" "maybe param" "maybe type" "temp"
    (660396 'move' call_tmp[660393](132942 call _dom _mt[243] this[133826]))
    unknown call_tmp[660400] "expr temp" "maybe param" "maybe type" "temp"
    (660403 'move' call_tmp[660400](132945 call _value _mt[243] call_tmp[660393]))
    unknown call_tmp[660407] "expr temp" "maybe param" "maybe type" "temp"
    (660410 'move' call_tmp[660407](132948 call _arrs _mt[243] call_tmp[660400]))
    unknown call_tmp[660414] "expr temp" "maybe param" "maybe type" "temp"
    (660417 'move' call_tmp[660414](132951 call size _mt[243] call_tmp[660407]))
    unknown call_tmp[660419] "expr temp" "maybe param" "maybe type" "temp"
    (660422 'move' call_tmp[660419](132955 call != call_tmp[660414] 1))
    unknown call_tmp[660424] "expr temp" "maybe param" "maybe type" "temp"
    (660427 'move' call_tmp[660424](133000 call _cond_test call_tmp[660419]))
    if call_tmp[660424]
    {
      unknown call_tmp[660429] "expr temp" "maybe param" "maybe type" "temp"
      (660432 'move' call_tmp[660429](132976 call + "cannot call " fnName[132936]))
      unknown call_tmp[660434] "expr temp" "maybe param" "maybe type" "temp"
      (660437 'move' call_tmp[660434](132995 call + call_tmp[660429] " on an array defined over a domain with multiple arrays"))
      (132998 call halt call_tmp[660434])
    }
    (518326 return _void[55])
  }
  function _array[133600](?).isEmpty[133010](arg _mt[133832]:_MT[238], arg this[133830]:_array[133600](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518330] "RVV" "temp"
    unknown call_tmp[660441] "expr temp" "maybe param" "maybe type" "temp"
    (660444 'move' call_tmp[660441](133014 call size _mt[243] this[133830]))
    unknown call_tmp[660446] "expr temp" "maybe param" "maybe type" "temp"
    (660449 'move' call_tmp[660446](133018 call == call_tmp[660441] 0))
    (518336 'move' ret[518330](518335 'coerce' call_tmp[660446] bool[10]))
    (518332 return ret[518330])
  }
  { scopeless type
    bool[10]
  }
  function _array[133600](?).head[133028](arg _mt[133836]:_MT[238], arg this[133834]:_array[133600](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518340] "RVV" "temp"
    unknown call_tmp[660453] "expr temp" "maybe param" "maybe type" "temp"
    (660456 'move' call_tmp[660453](133039 call _dom _mt[243] this[133834]))
    unknown call_tmp[660460] "expr temp" "maybe param" "maybe type" "temp"
    (660463 'move' call_tmp[660460](133042 call alignedLow _mt[243] call_tmp[660453]))
    unknown call_tmp[660465] "expr temp" "maybe param" "maybe type" "temp"
    (660468 'move' call_tmp[660465](133046 call this[133834] call_tmp[660460]))
    unknown call_tmp[660472] "expr temp" "maybe param" "maybe type" "temp"
    (660475 'move' call_tmp[660472](518347 call _value _mt[243] this[133834]))
    unknown call_tmp[660479] "expr temp" "maybe param" "maybe type" "temp"
    (660482 'move' call_tmp[660479](518345 call eltType _mt[243] call_tmp[660472]))
    (518352 'move' ret[518340](518351 'coerce' call_tmp[660465] call_tmp[660479]))
    (518342 return ret[518340])
  }
  { scopeless type
    unknown call_tmp[660486] "expr temp" "maybe param" "maybe type" "temp"
    (660489 'move' call_tmp[660486](133031 call _value _mt[243] this[133834]))
    (133034 call eltType _mt[243] call_tmp[660486])
  }
  function _array[133600](?).tail[133055](arg _mt[133840]:_MT[238], arg this[133838]:_array[133600](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518356] "RVV" "temp"
    unknown call_tmp[660495] "expr temp" "maybe param" "maybe type" "temp"
    (660498 'move' call_tmp[660495](133066 call _dom _mt[243] this[133838]))
    unknown call_tmp[660502] "expr temp" "maybe param" "maybe type" "temp"
    (660505 'move' call_tmp[660502](133069 call alignedHigh _mt[243] call_tmp[660495]))
    unknown call_tmp[660507] "expr temp" "maybe param" "maybe type" "temp"
    (660510 'move' call_tmp[660507](133073 call this[133838] call_tmp[660502]))
    unknown call_tmp[660514] "expr temp" "maybe param" "maybe type" "temp"
    (660517 'move' call_tmp[660514](518363 call _value _mt[243] this[133838]))
    unknown call_tmp[660521] "expr temp" "maybe param" "maybe type" "temp"
    (660524 'move' call_tmp[660521](518361 call eltType _mt[243] call_tmp[660514]))
    (518368 'move' ret[518356](518367 'coerce' call_tmp[660507] call_tmp[660521]))
    (518358 return ret[518356])
  }
  { scopeless type
    unknown call_tmp[660528] "expr temp" "maybe param" "maybe type" "temp"
    (660531 'move' call_tmp[660528](133058 call _value _mt[243] this[133838]))
    (133061 call eltType _mt[243] call_tmp[660528])
  }
  function _array[133600](?).back[133082](arg _mt[133844]:_MT[238], arg this[133842]:_array[133600](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518372] "RVV" "temp"
    unknown tmp[425719] "maybe param" "temp"
    unknown call_tmp[660535] "expr temp" "maybe param" "maybe type" "temp"
    (660538 'move' call_tmp[660535](133087 call isRectangularArr this[133842]))
    (425730 'move' tmp[425719](133088 call ! call_tmp[660535]))
    unknown call_tmp[660540] "expr temp" "maybe param" "maybe type" "temp"
    (660543 'move' call_tmp[660540](425732 call _cond_invalid tmp[425719]))
    if call_tmp[660540]
    {
      (425735 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566567] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566568] "maybe param" "temp"
    unknown call_tmp[660545] "expr temp" "maybe param" "maybe type" "temp"
    (660548 'move' call_tmp[660545](425720 call isTrue tmp[425719]))
    (566573 'move' tmp[566568](566571 call _cond_test call_tmp[660545]))
    if tmp[566568]
    {
      (566578 'move' tmp[566567](566575 '_paramFoldLogical' tmp[566568] 1))
    }
    {
      unknown tmp[566580] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660552] "expr temp" "maybe param" "maybe type" "temp"
      (660555 'move' call_tmp[660552](133091 call rank _mt[243] this[133842]))
      unknown call_tmp[660557] "expr temp" "maybe param" "maybe type" "temp"
      (660560 'move' call_tmp[660557](133095 call != call_tmp[660552] 1))
      (566582 'move' tmp[566580](425724 call isTrue call_tmp[660557]))
      (566587 'move' tmp[566567](566584 '_paramFoldLogical' tmp[566568] tmp[566580]))
    }
    unknown call_tmp[660562] "expr temp" "maybe param" "maybe type" "temp"
    (660565 'move' call_tmp[660562](133120 call _cond_test tmp[566567]))
    if call_tmp[660562]
    {
      (133118 call compilerError "back() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425740] "maybe param" "temp"
    (425751 'move' tmp[425740] 1)
    unknown call_tmp[660567] "expr temp" "maybe param" "maybe type" "temp"
    (660570 'move' call_tmp[660567](425753 call _cond_invalid tmp[425740]))
    if call_tmp[660567]
    {
      (425756 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566594] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566595] "maybe param" "temp"
    unknown call_tmp[660572] "expr temp" "maybe param" "maybe type" "temp"
    (660575 'move' call_tmp[660572](425741 call isTrue tmp[425740]))
    (566600 'move' tmp[566595](566598 call _cond_test call_tmp[660572]))
    if tmp[566595]
    {
      unknown tmp[566602] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660579] "expr temp" "maybe param" "maybe type" "temp"
      (660582 'move' call_tmp[660579](133129 call(384386 call (partial) isEmpty _mt[243] this[133842])))
      (566604 'move' tmp[566602](425744 call isTrue call_tmp[660579]))
      (566609 'move' tmp[566594](566606 '_paramFoldLogical' tmp[566595] tmp[566602]))
    }
    {
      (566614 'move' tmp[566594](566611 '_paramFoldLogical' tmp[566595] 0))
    }
    unknown call_tmp[660584] "expr temp" "maybe param" "maybe type" "temp"
    (660587 'move' call_tmp[660584](133153 call _cond_test tmp[566594]))
    if call_tmp[660584]
    {
      (133151 call halt "back called on an empty array")
    }
    unknown call_tmp[660591] "expr temp" "maybe param" "maybe type" "temp"
    (660594 'move' call_tmp[660591](133160 call _dom _mt[243] this[133842]))
    unknown call_tmp[660598] "expr temp" "maybe param" "maybe type" "temp"
    (660601 'move' call_tmp[660598](133163 call high _mt[243] call_tmp[660591]))
    unknown call_tmp[660603] "expr temp" "maybe param" "maybe type" "temp"
    (660606 'move' call_tmp[660603](133167 call this[133842] call_tmp[660598]))
    (518377 'move' ret[518372](518376 'deref' call_tmp[660603]))
    (518374 return ret[518372])
  }
  function _array[133600](?).front[133174](arg _mt[133848]:_MT[238], arg this[133846]:_array[133600](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[518381] "RVV" "temp"
    unknown tmp[425761] "maybe param" "temp"
    unknown call_tmp[660608] "expr temp" "maybe param" "maybe type" "temp"
    (660611 'move' call_tmp[660608](133179 call isRectangularArr this[133846]))
    (425772 'move' tmp[425761](133180 call ! call_tmp[660608]))
    unknown call_tmp[660613] "expr temp" "maybe param" "maybe type" "temp"
    (660616 'move' call_tmp[660613](425774 call _cond_invalid tmp[425761]))
    if call_tmp[660613]
    {
      (425777 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[566621] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566622] "maybe param" "temp"
    unknown call_tmp[660618] "expr temp" "maybe param" "maybe type" "temp"
    (660621 'move' call_tmp[660618](425762 call isTrue tmp[425761]))
    (566627 'move' tmp[566622](566625 call _cond_test call_tmp[660618]))
    if tmp[566622]
    {
      (566632 'move' tmp[566621](566629 '_paramFoldLogical' tmp[566622] 1))
    }
    {
      unknown tmp[566634] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660625] "expr temp" "maybe param" "maybe type" "temp"
      (660628 'move' call_tmp[660625](133183 call rank _mt[243] this[133846]))
      unknown call_tmp[660630] "expr temp" "maybe param" "maybe type" "temp"
      (660633 'move' call_tmp[660630](133187 call != call_tmp[660625] 1))
      (566636 'move' tmp[566634](425766 call isTrue call_tmp[660630]))
      (566641 'move' tmp[566621](566638 '_paramFoldLogical' tmp[566622] tmp[566634]))
    }
    unknown call_tmp[660635] "expr temp" "maybe param" "maybe type" "temp"
    (660638 'move' call_tmp[660635](133212 call _cond_test tmp[566621]))
    if call_tmp[660635]
    {
      (133210 call compilerError "front() is only supported on 1D rectangular arrays")
    }
    unknown tmp[425782] "maybe param" "temp"
    (425793 'move' tmp[425782] 1)
    unknown call_tmp[660640] "expr temp" "maybe param" "maybe type" "temp"
    (660643 'move' call_tmp[660640](425795 call _cond_invalid tmp[425782]))
    if call_tmp[660640]
    {
      (425798 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566648] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566649] "maybe param" "temp"
    unknown call_tmp[660645] "expr temp" "maybe param" "maybe type" "temp"
    (660648 'move' call_tmp[660645](425783 call isTrue tmp[425782]))
    (566654 'move' tmp[566649](566652 call _cond_test call_tmp[660645]))
    if tmp[566649]
    {
      unknown tmp[566656] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[660652] "expr temp" "maybe param" "maybe type" "temp"
      (660655 'move' call_tmp[660652](133221 call(384393 call (partial) isEmpty _mt[243] this[133846])))
      (566658 'move' tmp[566656](425786 call isTrue call_tmp[660652]))
      (566663 'move' tmp[566648](566660 '_paramFoldLogical' tmp[566649] tmp[566656]))
    }
    {
      (566668 'move' tmp[566648](566665 '_paramFoldLogical' tmp[566649] 0))
    }
    unknown call_tmp[660657] "expr temp" "maybe param" "maybe type" "temp"
    (660660 'move' call_tmp[660657](133245 call _cond_test tmp[566648]))
    if call_tmp[660657]
    {
      (133243 call halt "front called on an empty array")
    }
    unknown call_tmp[660664] "expr temp" "maybe param" "maybe type" "temp"
    (660667 'move' call_tmp[660664](133252 call _dom _mt[243] this[133846]))
    unknown call_tmp[660671] "expr temp" "maybe param" "maybe type" "temp"
    (660674 'move' call_tmp[660671](133255 call low _mt[243] call_tmp[660664]))
    unknown call_tmp[660676] "expr temp" "maybe param" "maybe type" "temp"
    (660679 'move' call_tmp[660676](133259 call this[133846] call_tmp[660671]))
    (518386 'move' ret[518381](518385 'deref' call_tmp[660676]))
    (518383 return ret[518381])
  }
  function _array[133600](?).reverse[133266](arg _mt[133852]:_MT[238], arg this[133850]:_array[133600](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[660683] "expr temp" "maybe param" "maybe type" "temp"
    (660686 'move' call_tmp[660683](133270 call(384400 call (partial) chpl__isDense1DArray _mt[243] this[133850])))
    unknown call_tmp[660688] "expr temp" "maybe param" "maybe type" "temp"
    (660691 'move' call_tmp[660688](133271 call ! call_tmp[660683]))
    unknown call_tmp[660693] "expr temp" "maybe param" "maybe type" "temp"
    (660696 'move' call_tmp[660693](133294 call _cond_test call_tmp[660688]))
    if call_tmp[660693]
    {
      (133292 call compilerError "reverse() is only supported on dense 1D arrays")
    }
    unknown call_tmp[660700] "expr temp" "maybe param" "maybe type" "temp"
    (660703 'move' call_tmp[660700](133301 call _dom _mt[243] this[133850]))
    unknown call_tmp[660707] "maybe param" "maybe type" "temp"
    (660710 'move' call_tmp[660707](133304 call low _mt[243] call_tmp[660700]))
    const lo[133307] "dead at end of block" "const" "insert auto destroy"
    (543093 'init var' lo[133307] call_tmp[660707])
    unknown call_tmp[660714] "expr temp" "maybe param" "maybe type" "temp"
    (660717 'move' call_tmp[660714](133311 call _dom _mt[243] this[133850]))
    unknown call_tmp[660721] "expr temp" "maybe param" "maybe type" "temp"
    (660724 'move' call_tmp[660721](133314 call size _mt[243] call_tmp[660714]))
    unknown call_tmp[660726] "maybe param" "maybe type" "temp"
    (660729 'move' call_tmp[660726](133318 call / call_tmp[660721] 2))
    const mid[133320] "dead at end of block" "const" "insert auto destroy"
    (543095 'init var' mid[133320] call_tmp[660726])
    unknown call_tmp[660733] "expr temp" "maybe param" "maybe type" "temp"
    (660736 'move' call_tmp[660733](133324 call _dom _mt[243] this[133850]))
    unknown call_tmp[660740] "maybe param" "maybe type" "temp"
    (660743 'move' call_tmp[660740](133327 call high _mt[243] call_tmp[660733]))
    const hi[133330] "dead at end of block" "const" "insert auto destroy"
    (543097 'init var' hi[133330] call_tmp[660740])
    (133333 'end of statement')
    {
      unknown _indexOfInterest[133359] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133360] "expr temp" "temp"
      unknown call_tmp[660745] "expr temp" "maybe param" "maybe type" "temp"
      (660748 'move' call_tmp[660745](133376 call chpl_direct_counted_range_iter 0 mid[133320]))
      (133369 'move' _iterator[133360](133367 call _getIterator call_tmp[660745]))
      Defer
      {
        {
          (133392 call _freeIterator _iterator[133360])
        }
      }
      { scopeless type
        (133381 'move' _indexOfInterest[133359](133378 call iteratorIndex _iterator[133360]))
      }
      ForLoop[133361]
      {
        unknown i[133385] "index var" "insert auto destroy"
        (480392 'end of statement')
        (133387 'move' i[133385] _indexOfInterest[133359])
        (480393 'end of statement' i[133385])
        {
          unknown call_tmp[660750] "expr temp" "maybe param" "maybe type" "temp"
          (660753 'move' call_tmp[660750](133344 call + lo[133307] i[133385]))
          unknown call_tmp[660755] "expr temp" "maybe param" "maybe type" "temp"
          (660758 'move' call_tmp[660755](133347 call this[133850] call_tmp[660750]))
          unknown call_tmp[660760] "expr temp" "maybe param" "maybe type" "temp"
          (660763 'move' call_tmp[660760](133351 call - hi[133330] i[133385]))
          unknown call_tmp[660765] "expr temp" "maybe param" "maybe type" "temp"
          (660768 'move' call_tmp[660765](133354 call this[133850] call_tmp[660760]))
          (133355 call <=> call_tmp[660755] call_tmp[660765])
          (480395 'end of statement' lo[133307] i[133385] hi[133330] i[133385])
        }
        label _continueLabel[133364]
        _indexOfInterest[133359]
        _iterator[133360]
      }
      label _breakLabel[133365]
    }
    (518388 return _void[55])
  }
  function _array[133600](?).find[133410](arg _mt[133856]:_MT[238], arg this[133854]:_array[133600](?), arg val[133407] :
  (133404 call eltType _mt[243] this[133854])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518392] "RVV" "temp"
    {
      unknown _indexOfInterest[133448] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133449] "expr temp" "temp"
      unknown call_tmp[660774] "expr temp" "maybe param" "maybe type" "temp"
      (660777 'move' call_tmp[660774](133425 call _dom _mt[243] this[133854]))
      (133458 'move' _iterator[133449](133456 call _getIterator call_tmp[660774]))
      Defer
      {
        {
          (133475 call _freeIterator _iterator[133449])
        }
      }
      { scopeless type
        (133464 'move' _indexOfInterest[133448](133461 call iteratorIndex _iterator[133449]))
      }
      ForLoop[133450]
      {
        unknown i[133468] "index var" "insert auto destroy"
        (480401 'end of statement')
        (133470 'move' i[133468] _indexOfInterest[133448])
        (480402 'end of statement' i[133468])
        {
          unknown call_tmp[660779] "expr temp" "maybe param" "maybe type" "temp"
          (660782 'move' call_tmp[660779](133431 call this[133854] i[133468]))
          unknown call_tmp[660784] "expr temp" "maybe param" "maybe type" "temp"
          (660787 'move' call_tmp[660784](133433 call == call_tmp[660779] val[133407]))
          unknown call_tmp[660789] "expr temp" "maybe param" "maybe type" "temp"
          (660792 'move' call_tmp[660789](133442 call _cond_test call_tmp[660784]))
          if call_tmp[660789]
          {
            unknown call_tmp[660794] "expr temp" "maybe param" "maybe type" "temp"
            (660797 'move' call_tmp[660794](133438 call _build_tuple 1 i[133468]))
            unknown call_tmp[660801] "expr temp" "maybe param" "maybe type" "temp"
            (660804 'move' call_tmp[660801](518402 call _dom _mt[243] this[133854]))
            unknown call_tmp[660806] "expr temp" "maybe param" "maybe type" "temp"
            (660809 'move' call_tmp[660806](518400 call chpl__buildIndexType call_tmp[660801]))
            unknown call_tmp[660811] "expr temp" "maybe param" "maybe type" "temp"
            (660814 'move' call_tmp[660811](518397 call _build_tuple bool[10] call_tmp[660806]))
            (518406 'move' ret[518392](518405 'coerce' call_tmp[660794] call_tmp[660811]))
            gotoReturn _end_find[518390] _end_find[518390]
            (480404 'end of statement' i[133468])
          }
        }
        label _continueLabel[133453]
        _indexOfInterest[133448]
        _iterator[133449]
      }
      label _breakLabel[133454]
    }
    unknown arbInd[133490] "dead at end of block" "insert auto destroy"
    unknown call_tmp[660818] "expr temp" "maybe param" "maybe type" "temp"
    (660821 'move' call_tmp[660818](133484 call _dom _mt[243] this[133854]))
    unknown call_tmp[660823] "expr temp" "maybe param" "maybe type" "temp"
    (660826 'move' call_tmp[660823](133488 call chpl__buildIndexType call_tmp[660818]))
    (543099 'default init var' arbInd[133490] call_tmp[660823])
    (133493 'end of statement')
    unknown call_tmp[660828] "expr temp" "maybe param" "maybe type" "temp"
    (660831 'move' call_tmp[660828](133497 call _build_tuple 0 arbInd[133490]))
    unknown call_tmp[660835] "expr temp" "maybe param" "maybe type" "temp"
    (660838 'move' call_tmp[660835](518416 call _dom _mt[243] this[133854]))
    unknown call_tmp[660840] "expr temp" "maybe param" "maybe type" "temp"
    (660843 'move' call_tmp[660840](518414 call chpl__buildIndexType call_tmp[660835]))
    unknown call_tmp[660845] "expr temp" "maybe param" "maybe type" "temp"
    (660848 'move' call_tmp[660845](518411 call _build_tuple bool[10] call_tmp[660840]))
    (518420 'move' ret[518392](518419 'coerce' call_tmp[660828] call_tmp[660845]))
    gotoReturn _end_find[518390] _end_find[518390]
    (480406 'end of statement' arbInd[133490])
    label _end_find[518390]
    (518394 return ret[518392])
  }
  { scopeless type
    unknown call_tmp[660852] "expr temp" "maybe param" "maybe type" "temp"
    (660855 'move' call_tmp[660852](133414 call _dom _mt[243] this[133854]))
    unknown call_tmp[660857] "expr temp" "maybe param" "maybe type" "temp"
    (660860 'move' call_tmp[660857](133418 call chpl__buildIndexType call_tmp[660852]))
    (133421 call _build_tuple bool[10] call_tmp[660857])
  }
  function _array[133600](?).count[133513](arg _mt[133860]:_MT[238], arg this[133858]:_array[133600](?), arg val[133510] :
  (133507 call eltType _mt[243] this[133858])) : _unknown[51] "method" "primary method"
  {
    unknown ret[518426] "RVV" "temp"
    unknown call_tmp[660864] "expr temp" "maybe param" "maybe type" "temp"
    (660867 'move' call_tmp[660864](133519 call == this[133858] val[133510]))
    unknown call_tmp[660869] "expr temp" "maybe param" "maybe type" "temp"
    (660872 'move' call_tmp[660869](133521 'reduce' SumReduceScanOp[376429](?) call_tmp[660864] 0))
    (518432 'move' ret[518426](518431 'coerce' call_tmp[660869] int(64)[13]))
    (518428 return ret[518426])
  }
  { scopeless type
    int(64)[13]
  }
  function _array[133600](?).shape[133531](arg _mt[133864]:_MT[238], arg this[133862]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[518436] "RVV" "temp"
    unknown call_tmp[660876] "expr temp" "maybe param" "maybe type" "temp"
    (660879 'move' call_tmp[660876](133534 call _dom _mt[243] this[133862]))
    unknown call_tmp[660883] "expr temp" "maybe param" "maybe type" "temp"
    (660886 'move' call_tmp[660883](133539 call shape _mt[243] call_tmp[660876]))
    (518441 'move' ret[518436](518440 'deref' call_tmp[660883]))
    (518438 return ret[518436])
  }
  function _array[133600](?)._scan[133551](arg _mt[133868]:_MT[238], arg this[133866]:_array[133600](?), arg op[133549]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown ret[518445] "RVV" "temp"
    unknown call_tmp[660890] "expr temp" "maybe param" "maybe type" "temp"
    (660893 'move' call_tmp[660890](360109 call _value _mt[243] this[133866]))
    unknown call_tmp[660899] "expr temp" "maybe param" "maybe type" "temp"
    (660902 'move' call_tmp[660899](133589 call _dom _mt[243] this[133866]))
    unknown call_tmp[660904] "expr temp" "maybe param" "maybe type" "temp"
    (660907 'move' call_tmp[660904](133592 call(133583 call (partial) doiScan _mt[243] call_tmp[660890]) op[133549] call_tmp[660899]))
    (518450 'move' ret[518445](518449 'deref' call_tmp[660904]))
    (518447 return ret[518445])
  }
  where {
    unknown call_tmp[660911] "expr temp" "maybe param" "maybe type" "temp"
    (660914 'move' call_tmp[660911](384419 call _value _mt[243] this[133866]))
    unknown call_tmp[660918] "expr temp" "maybe param" "maybe type" "temp"
    (660921 'move' call_tmp[660918](133578 call _dom _mt[243] this[133866]))
    (133581 call canResolveMethod module=[255] Reflection[224799] call_tmp[660911] "doiScan" op[133549] call_tmp[660918])
    (360102 'referenced modules list' Reflection[224799])
  }
  function _array[133600](?)._pid[799973](arg _mt[799975]:_MT[238], ref arg this[799977]:_array[133600](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[799987] "RVV" "temp"
    unknown call_tmp[799994] "expr temp" "maybe param" "maybe type" "temp"
    (799997 'move' call_tmp[799994](799981 '.' this[799977] c"_pid"))
    (799992 'move' ret[799987](799991 'addr of' call_tmp[799994]))
    (799989 return ret[799987])
  }
  function _array[133600](?)._instance[799999](arg _mt[800001]:_MT[238], ref arg this[800003]:_array[133600](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[800013] "RVV" "temp"
    unknown call_tmp[800020] "expr temp" "maybe param" "maybe type" "temp"
    (800023 'move' call_tmp[800020](800007 '.' this[800003] c"_instance"))
    (800018 'move' ret[800013](800017 'addr of' call_tmp[800020]))
    (800015 return ret[800013])
  }
  function _array[133600](?)._unowned[800025](arg _mt[800027]:_MT[238], ref arg this[800029]:_array[133600](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[800039] "RVV" "temp"
    unknown call_tmp[800046] "expr temp" "maybe param" "maybe type" "temp"
    (800049 'move' call_tmp[800046](800033 '.' this[800029] c"_unowned"))
    (800044 'move' ret[800039](800043 'addr of' call_tmp[800046]))
    (800041 return ret[800039])
  }
  function _array[133600](?).init[800051](arg _mt[800053]:_MT[238], ref arg this[800054]:_array[133600](?), in arg _pid[800057]:int(64)[13] =
  _typeDefaultT[250], in arg _instance[800070]:_any[178](?), in arg _unowned[800079]:bool[10] =
  _typeDefaultT[250]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    (800093 'init field' this[800054] c"_pid" _pid[800057])
    (800096 'init field' this[800054] c"_instance" _instance[800070])
    (800102 'end of statement')
    (800099 'init field' this[800054] c"_unowned" _unowned[800079])
    (800104 return _void[55])
  }
  function _array[133600](?).init=[800106](arg _mt[800109]:_MT[238], ref arg this[800110]:_array[133600](?), arg other[800113] :
  (800112 'typeof' this[800110])) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown call_tmp[800181] "maybe param" "maybe type" "temp"
    (800184 'move' call_tmp[800181](800122 call _pid _mt[243] other[800113]))
    unknown tmp[800148] "temp"
    (800151 'init var' tmp[800148] call_tmp[800181] int(64)[13])
    (800153 'init field' this[800110] c"_pid" tmp[800148])
    (800174 'end of statement')
    unknown call_tmp[800188] "maybe param" "maybe type" "temp"
    (800191 'move' call_tmp[800188](800132 call _instance _mt[243] other[800113]))
    unknown tmp[800157] "temp"
    (800159 'init var' tmp[800157] call_tmp[800188])
    (800161 'init field' this[800110] c"_instance" tmp[800157])
    (800175 'end of statement')
    unknown call_tmp[800195] "maybe param" "maybe type" "temp"
    (800198 'move' call_tmp[800195](800142 call _unowned _mt[243] other[800113]))
    unknown tmp[800165] "temp"
    (800168 'init var' tmp[800165] call_tmp[800195] bool[10])
    (800170 'init field' this[800110] c"_unowned" tmp[800165])
    (800176 'end of statement')
    (800177 return _void[55])
  }
  type _array[133600](?) val _pid[128427]:int(64)[13] int(64)[13] unknown _instance[128431] "alias scope from this" "owned" val _unowned[128436]:bool[10] bool[10] forwarding ( )
  function _do_destroy_arr[133877](arg _unowned[133874]:bool[10], arg _instance[133879]:_any[178](?), arg deinitElts[133882] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[660923] "expr temp" "maybe param" "maybe type" "temp"
    (660926 'move' call_tmp[660923](133886 call ! _unowned[133874]))
    unknown call_tmp[660928] "expr temp" "maybe param" "maybe type" "temp"
    (660931 'move' call_tmp[660928](134125 call _cond_test call_tmp[660923]))
    if call_tmp[660928]
    {
      {
        const tmp[134101] "const" "temp"
        unknown call_tmp[660933] "expr temp" "maybe param" "maybe type" "temp"
        (660936 'move' call_tmp[660933](134098 '_wide_get_locale' _instance[133879]))
        (134102 'move' tmp[134101](134099 'deref' call_tmp[660933]))
        {
          unknown call_tmp[660940] "expr temp" "maybe param" "maybe type" "temp"
          (660943 'move' call_tmp[660940](133894 call(133890 call (partial) isSliceArrayView _mt[243] _instance[133879])))
          unknown call_tmp[660945] "maybe param" "maybe type" "temp"
          (660948 'move' call_tmp[660945](133895 call ! call_tmp[660940]))
          unknown arrIsInList[133897] "dead at end of block" "param"
          (543101 'init var' arrIsInList[133897] call_tmp[660945])
          (133900 'end of statement')
          unknown call_tmp[660952] "maybe param" "maybe type" "temp"
          (660955 'move' call_tmp[660952](133913 call(133908 call (partial) remove _mt[243] _instance[133879]) arrIsInList[133897]))
          unknown tmp[133914] "dead at end of block" "insert auto destroy" "temp"
          (543103 'init var' tmp[133914] call_tmp[660952])
          (133921 call _check_tuple_var_decl tmp[133914] 2)
          (480411 'end of statement')
          unknown call_tmp[660957] "maybe param" "maybe type" "temp"
          (660960 'move' call_tmp[660957](133915 call tmp[133914] 0))
          unknown arrToFree[133902] "dead at end of block" "insert auto destroy"
          (543105 'init var' arrToFree[133902] call_tmp[660957])
          unknown call_tmp[660962] "maybe param" "maybe type" "temp"
          (660965 'move' call_tmp[660962](133918 call tmp[133914] 1))
          unknown domToRemove[133904] "dead at end of block" "insert auto destroy"
          (543107 'init var' domToRemove[133904] call_tmp[660962])
          (133926 'end of statement')
          unknown domToFree[133931] "dead at end of block" "insert auto destroy"
          (543109 'init var' domToFree[133931] nil[44] unmanaged BaseDom?[415523])
          (133934 'end of statement')
          unknown distToRemove[133939] "dead at end of block" "insert auto destroy"
          (543111 'init var' distToRemove[133939] nil[44] unmanaged BaseDist?[415517])
          (133942 'end of statement')
          unknown distToFree[133947] "dead at end of block" "insert auto destroy"
          (543113 'init var' distToFree[133947] nil[44] unmanaged BaseDist?[415517])
          (133950 'end of statement')
          unknown domIsPrivatized[133952] "dead at end of block" "insert auto destroy"
          (543115 'init var' domIsPrivatized[133952] 0)
          (133955 'end of statement')
          const instanceDom[133957] "dead at end of block" "const" "insert auto destroy"
          (543117 'init var' instanceDom[133957] domToRemove[133904])
          (133960 'end of statement')
          unknown call_tmp[660967] "expr temp" "maybe param" "maybe type" "temp"
          (660970 'move' call_tmp[660967](133963 call != domToRemove[133904] nil[44]))
          unknown call_tmp[660972] "expr temp" "maybe param" "maybe type" "temp"
          (660975 'move' call_tmp[660972](133998 call _cond_test call_tmp[660967]))
          if call_tmp[660972]
          {
            unknown tmp[492281] "expr temp" "maybe param" "maybe type" "temp"
            unknown tmp[492306] "maybe param" "temp"
            (492309 'move' tmp[492306](492307 'addr of' domToFree[133931]))
            unknown tmp[492317] "maybe param" "temp"
            (492320 'move' tmp[492317](492318 'addr of' distToRemove[133939]))
            unknown call_tmp[660977] "expr temp" "maybe param" "maybe type" "temp"
            (660980 'move' call_tmp[660977](133971 call postfix! domToRemove[133904]))
            (492282 'move' tmp[492281](133977 call(133973 call (partial) remove _mt[243] call_tmp[660977])))
            { scopeless
              unknown call_tmp[660986] "expr temp" "maybe param" "maybe type" "temp"
              (660989 'move' call_tmp[660986](492288 call size _mt[243] tmp[492281]))
              unknown call_tmp[660991] "expr temp" "maybe param" "maybe type" "temp"
              (660994 'move' call_tmp[660991](492291 call != 2 call_tmp[660986]))
              unknown call_tmp[660996] "expr temp" "maybe param" "maybe type" "temp"
              (660999 'move' call_tmp[660996](492298 call _cond_test call_tmp[660991]))
              if call_tmp[660996]
              {
                (492294 call compilerError "tuple size must match the number of grouped variables" 0)
              }
            }
            unknown call_tmp[661001] "expr temp" "maybe param" "maybe type" "temp"
            (661004 'move' call_tmp[661001](492304 call tmp[492281] 0))
            (492311 call = tmp[492306] call_tmp[661001])
            unknown call_tmp[661006] "expr temp" "maybe param" "maybe type" "temp"
            (661009 'move' call_tmp[661006](492315 call tmp[492281] 1))
            (492322 call = tmp[492317] call_tmp[661006])
            (480413 'end of statement' domToFree[133931] distToRemove[133939] domToRemove[133904])
            unknown tmp[425803] "maybe param" "temp"
            (425814 'move' tmp[425803] 0)
            unknown call_tmp[661011] "expr temp" "maybe param" "maybe type" "temp"
            (661014 'move' call_tmp[661011](425816 call _cond_invalid tmp[425803]))
            if call_tmp[661011]
            {
              (425819 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566675] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566676] "maybe param" "temp"
            unknown call_tmp[661016] "expr temp" "maybe param" "maybe type" "temp"
            (661019 'move' call_tmp[661016](425804 call isTrue tmp[425803]))
            (566681 'move' tmp[566676](566679 call _cond_test call_tmp[661016]))
            if tmp[566676]
            {
              unknown tmp[566683] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[661021] "expr temp" "maybe param" "maybe type" "temp"
              (661024 'move' call_tmp[661021](133985 call postfix! domToRemove[133904]))
              unknown call_tmp[661028] "expr temp" "maybe param" "maybe type" "temp"
              (661031 'move' call_tmp[661028](133987 call pid _mt[243] call_tmp[661021]))
              unknown call_tmp[661033] "expr temp" "maybe param" "maybe type" "temp"
              (661036 'move' call_tmp[661033](133991 call != call_tmp[661028] nullPid[113724]))
              (566685 'move' tmp[566683](425807 call isTrue call_tmp[661033]))
              (566690 'move' tmp[566675](566687 '_paramFoldLogical' tmp[566676] tmp[566683]))
            }
            {
              (566695 'move' tmp[566675](566692 '_paramFoldLogical' tmp[566676] 0))
            }
            (133995 call = domIsPrivatized[133952] tmp[566675])
            (480418 'end of statement' domIsPrivatized[133952] domToRemove[133904])
          }
          unknown distIsPrivatized[134003] "dead at end of block" "insert auto destroy"
          (543119 'init var' distIsPrivatized[134003] 0)
          (134006 'end of statement' domToRemove[133904])
          unknown call_tmp[661038] "expr temp" "maybe param" "maybe type" "temp"
          (661041 'move' call_tmp[661038](134009 call != distToRemove[133939] nil[44]))
          unknown call_tmp[661043] "expr temp" "maybe param" "maybe type" "temp"
          (661046 'move' call_tmp[661043](134040 call _cond_test call_tmp[661038]))
          if call_tmp[661043]
          {
            unknown call_tmp[661048] "expr temp" "maybe param" "maybe type" "temp"
            (661051 'move' call_tmp[661048](134013 call postfix! distToRemove[133939]))
            unknown call_tmp[661055] "expr temp" "maybe param" "maybe type" "temp"
            (661058 'move' call_tmp[661055](134019 call(134015 call (partial) remove _mt[243] call_tmp[661048])))
            (134020 call = distToFree[133947] call_tmp[661055])
            (480421 'end of statement' distToFree[133947] distToRemove[133939])
            unknown tmp[425824] "maybe param" "temp"
            (425835 'move' tmp[425824] 0)
            unknown call_tmp[661060] "expr temp" "maybe param" "maybe type" "temp"
            (661063 'move' call_tmp[661060](425837 call _cond_invalid tmp[425824]))
            if call_tmp[661060]
            {
              (425840 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[566702] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[566703] "maybe param" "temp"
            unknown call_tmp[661065] "expr temp" "maybe param" "maybe type" "temp"
            (661068 'move' call_tmp[661065](425825 call isTrue tmp[425824]))
            (566708 'move' tmp[566703](566706 call _cond_test call_tmp[661065]))
            if tmp[566703]
            {
              unknown tmp[566710] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[661070] "expr temp" "maybe param" "maybe type" "temp"
              (661073 'move' call_tmp[661070](134027 call postfix! distToRemove[133939]))
              unknown call_tmp[661077] "expr temp" "maybe param" "maybe type" "temp"
              (661080 'move' call_tmp[661077](134029 call pid _mt[243] call_tmp[661070]))
              unknown call_tmp[661082] "expr temp" "maybe param" "maybe type" "temp"
              (661085 'move' call_tmp[661082](134033 call != call_tmp[661077] nullPid[113724]))
              (566712 'move' tmp[566710](425828 call isTrue call_tmp[661082]))
              (566717 'move' tmp[566702](566714 '_paramFoldLogical' tmp[566703] tmp[566710]))
            }
            {
              (566722 'move' tmp[566702](566719 '_paramFoldLogical' tmp[566703] 0))
            }
            (134037 call = distIsPrivatized[134003] tmp[566702])
            (480425 'end of statement' distIsPrivatized[134003] distToRemove[133939])
          }
          unknown call_tmp[661087] "expr temp" "maybe param" "maybe type" "temp"
          (661090 'move' call_tmp[661087](134046 call != arrToFree[133902] nil[44]))
          unknown call_tmp[661092] "expr temp" "maybe param" "maybe type" "temp"
          (661095 'move' call_tmp[661092](134059 call _cond_test call_tmp[661087]))
          if call_tmp[661092]
          {
            unknown call_tmp[661097] "expr temp" "maybe param" "maybe type" "temp"
            (661100 'move' call_tmp[661097](134054 call _isPrivatized _instance[133879]))
            (134057 call _delete_arr _instance[133879] call_tmp[661097](deinitElts = deinitElts[133882]))
          }
          unknown call_tmp[661102] "expr temp" "maybe param" "maybe type" "temp"
          (661105 'move' call_tmp[661102](134066 call != domToFree[133931] nil[44]))
          unknown call_tmp[661107] "expr temp" "maybe param" "maybe type" "temp"
          (661110 'move' call_tmp[661107](134076 call _cond_test call_tmp[661102]))
          if call_tmp[661107]
          {
            unknown call_tmp[661112] "expr temp" "maybe param" "maybe type" "temp"
            (661115 'move' call_tmp[661112](134070 call postfix! instanceDom[133957]))
            (134074 call _delete_dom call_tmp[661112] domIsPrivatized[133952])
            (480429 'end of statement' instanceDom[133957] domIsPrivatized[133952])
          }
          unknown call_tmp[661117] "expr temp" "maybe param" "maybe type" "temp"
          (661120 'move' call_tmp[661117](134083 call != distToFree[133947] nil[44]))
          unknown call_tmp[661122] "expr temp" "maybe param" "maybe type" "temp"
          (661125 'move' call_tmp[661122](134093 call _cond_test call_tmp[661117]))
          if call_tmp[661122]
          {
            unknown call_tmp[661127] "expr temp" "maybe param" "maybe type" "temp"
            (661130 'move' call_tmp[661127](134087 call postfix! distToFree[133947]))
            (134091 call _delete_dist call_tmp[661127] distIsPrivatized[134003])
            (480432 'end of statement' distToFree[133947] distIsPrivatized[134003])
          }
        }
        (134105 'elided on block' 0 tmp[134101])
      }
    }
    {
      unknown call_tmp[661132] "expr temp" "maybe param" "maybe type" "temp"
      (661135 'move' call_tmp[661132](134113 call chpl__isArrayView _instance[133879]))
      unknown call_tmp[661137] "expr temp" "maybe param" "maybe type" "temp"
      (661140 'move' call_tmp[661137](134120 call _cond_test call_tmp[661132]))
      if call_tmp[661137]
      {
        (134116 call chpl__delete _instance[133879])
      }
    }
    (518452 return _void[55])
  }
  function _do_destroy_array[134138](arg array[134135]:_array[133600](?), arg deinitElts[134141] :
  1 =
  1) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[661144] "expr temp" "maybe param" "maybe type" "temp"
    (661147 'move' call_tmp[661144](134146 call _unowned _mt[243] array[134135]))
    unknown call_tmp[661151] "expr temp" "maybe param" "maybe type" "temp"
    (661154 'move' call_tmp[661151](134151 call _instance _mt[243] array[134135]))
    (134155 call _do_destroy_arr call_tmp[661144] call_tmp[661151] deinitElts[134141])
    (518454 return _void[55])
  }
  function _deinitElementsIsParallel[134164](arg eltType[134162]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518458] "RVV" "param" "temp"
    (518463 'move' ret[518458](518462 'deref' 0))
    (518460 return ret[518458])
  }
  function _deinitElements[134178](arg array[134175]:_array[133600](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[661158] "expr temp" "maybe param" "maybe type" "temp"
    (661161 'move' call_tmp[661158](134183 call eltType _mt[243] array[134175]))
    unknown call_tmp[661163] "maybe param" "maybe type" "temp"
    (661166 'move' call_tmp[661163](134186 'needs auto destroy' call_tmp[661158]))
    unknown needsDestroy[134187] "dead at end of block" "param"
    (543121 'init var' needsDestroy[134187] call_tmp[661163])
    (134190 'end of statement')
    unknown call_tmp[661168] "expr temp" "maybe param" "maybe type" "temp"
    (661171 'move' call_tmp[661168](134260 call _cond_test needsDestroy[134187]))
    if call_tmp[661168]
    {
      unknown call_tmp[661175] "expr temp" "maybe param" "maybe type" "temp"
      (661178 'move' call_tmp[661175](134195 call eltType _mt[243] array[134175]))
      unknown call_tmp[661180] "expr temp" "maybe param" "maybe type" "temp"
      (661183 'move' call_tmp[661180](134199 call _deinitElementsIsParallel call_tmp[661175]))
      unknown call_tmp[661185] "expr temp" "maybe param" "maybe type" "temp"
      (661188 'move' call_tmp[661185](134255 call _cond_test call_tmp[661180]))
      if call_tmp[661185]
      {
        Forall {
          induction variables:
            
            unknown elt[134209] "index var" "insert auto destroy"
          iterated expressions:
            array[134175]
          shadow variables:
          other variables
            forall body
          {
            (134205 call chpl__autoDestroy elt[134209])
            (480438 'end of statement' elt[134209])
          }
        }
      }
      {
        {
          unknown _indexOfInterest[134221] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[134222] "expr temp" "temp"
          (134231 'move' _iterator[134222](134229 call _getIterator array[134175]))
          Defer
          {
            {
              (134247 call _freeIterator _iterator[134222])
            }
          }
          { scopeless type
            (134236 'move' _indexOfInterest[134221](134233 call iteratorIndex _iterator[134222]))
          }
          ForLoop[134223]
          {
            unknown elt[134240] "index var" "insert auto destroy"
            (480441 'end of statement')
            (134242 'move' elt[134240] _indexOfInterest[134221])
            (480442 'end of statement' elt[134240])
            {
              (134218 call chpl__autoDestroy elt[134240])
              (480444 'end of statement' elt[134240])
            }
            label _continueLabel[134226]
            _indexOfInterest[134221]
            _iterator[134222]
          }
          label _breakLabel[134227]
        }
      }
    }
    unknown call_tmp[661192] "expr temp" "maybe param" "maybe type" "temp"
    (661195 'move' call_tmp[661192](134265 call _instance _mt[243] array[134175]))
    (134274 call(134270 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[661192]))
    (518465 return _void[55])
  }
  function _array[133600](?).equals[134285](arg _mt[134290]:_MT[238], arg this[134287]:_array[133600](?) :
  _array[133600](?), arg that[134282]:_array[133600](?)) : _unknown[51] "method"
  {
    unknown ret[518469] "RVV" "temp"
    unknown call_tmp[661201] "expr temp" "maybe param" "maybe type" "temp"
    (661204 'move' call_tmp[661201](134294 call _value _mt[243] this[134287]))
    unknown call_tmp[661208] "expr temp" "maybe param" "maybe type" "temp"
    (661211 'move' call_tmp[661208](134298 call _value _mt[243] that[134282]))
    unknown call_tmp[661213] "expr temp" "maybe param" "maybe type" "temp"
    (661216 'move' call_tmp[661213](134301 call == call_tmp[661201] call_tmp[661208]))
    unknown call_tmp[661218] "expr temp" "maybe param" "maybe type" "temp"
    (661221 'move' call_tmp[661218](134306 call _cond_test call_tmp[661213]))
    if call_tmp[661218]
    {
      (518475 'move' ret[518469](518474 'coerce' 1 bool[10]))
      gotoReturn _end_equals[518467] _end_equals[518467]
    }
    unknown call_tmp[661225] "expr temp" "maybe param" "maybe type" "temp"
    (661228 'move' call_tmp[661225](134313 call rank _mt[243] this[134287]))
    unknown call_tmp[661232] "expr temp" "maybe param" "maybe type" "temp"
    (661235 'move' call_tmp[661232](134317 call rank _mt[243] that[134282]))
    unknown call_tmp[661237] "expr temp" "maybe param" "maybe type" "temp"
    (661240 'move' call_tmp[661237](134320 call != call_tmp[661225] call_tmp[661232]))
    unknown call_tmp[661242] "expr temp" "maybe param" "maybe type" "temp"
    (661245 'move' call_tmp[661242](134325 call _cond_test call_tmp[661237]))
    if call_tmp[661242]
    {
      (518481 'move' ret[518469](518480 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518467] _end_equals[518467]
    }
    unknown call_tmp[661249] "expr temp" "maybe param" "maybe type" "temp"
    (661252 'move' call_tmp[661249](134331 call size _mt[243] this[134287]))
    unknown call_tmp[661256] "expr temp" "maybe param" "maybe type" "temp"
    (661259 'move' call_tmp[661256](134335 call size _mt[243] that[134282]))
    unknown call_tmp[661261] "expr temp" "maybe param" "maybe type" "temp"
    (661264 'move' call_tmp[661261](134338 call != call_tmp[661249] call_tmp[661256]))
    unknown call_tmp[661266] "expr temp" "maybe param" "maybe type" "temp"
    (661269 'move' call_tmp[661266](134343 call _cond_test call_tmp[661261]))
    if call_tmp[661266]
    {
      (518487 'move' ret[518469](518486 'coerce' 0 bool[10]))
      gotoReturn _end_equals[518467] _end_equals[518467]
    }
    unknown tmp[425845] "maybe param" "temp"
    unknown call_tmp[661273] "expr temp" "maybe param" "maybe type" "temp"
    (661276 'move' call_tmp[661273](134350 call _dom _mt[243] this[134287]))
    (425856 'move' tmp[425845](134354 call isRectangularDom call_tmp[661273]))
    unknown call_tmp[661278] "expr temp" "maybe param" "maybe type" "temp"
    (661281 'move' call_tmp[661278](425858 call _cond_invalid tmp[425845]))
    if call_tmp[661278]
    {
      (425861 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566729] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566730] "maybe param" "temp"
    unknown call_tmp[661283] "expr temp" "maybe param" "maybe type" "temp"
    (661286 'move' call_tmp[661283](425846 call isTrue tmp[425845]))
    (566735 'move' tmp[566730](566733 call _cond_test call_tmp[661283]))
    if tmp[566730]
    {
      unknown tmp[566737] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661290] "expr temp" "maybe param" "maybe type" "temp"
      (661293 'move' call_tmp[661290](134357 call _dom _mt[243] that[134282]))
      unknown call_tmp[661295] "expr temp" "maybe param" "maybe type" "temp"
      (661298 'move' call_tmp[661295](134361 call isRectangularDom call_tmp[661290]))
      (566739 'move' tmp[566737](425849 call isTrue call_tmp[661295]))
      (566744 'move' tmp[566729](566741 '_paramFoldLogical' tmp[566730] tmp[566737]))
    }
    {
      (566749 'move' tmp[566729](566746 '_paramFoldLogical' tmp[566730] 0))
    }
    unknown call_tmp[661300] "expr temp" "maybe param" "maybe type" "temp"
    (661303 'move' call_tmp[661300](134454 call _cond_test tmp[566729]))
    if call_tmp[661300]
    {
      {
        unknown _indexOfInterest[134410] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[134411] "expr temp" "temp"
        unknown call_tmp[661307] "expr temp" "maybe param" "maybe type" "temp"
        (661310 'move' call_tmp[661307](134426 call rank _mt[243] this[134287]))
        unknown call_tmp[661312] "expr temp" "maybe param" "maybe type" "temp"
        (661315 'move' call_tmp[661312](134430 call chpl_direct_counted_range_iter 0 call_tmp[661307]))
        (134420 'move' _iterator[134411](134418 call _getIterator call_tmp[661312]))
        Defer
        {
          {
            (134446 call _freeIterator _iterator[134411])
          }
        }
        { scopeless type
          (134435 'move' _indexOfInterest[134410](134432 call iteratorIndex _iterator[134411]))
        }
        ForLoop[134412]
        {
          unknown d[134439] "index var" "insert auto destroy"
          (480452 'end of statement')
          (134441 'move' d[134439] _indexOfInterest[134410])
          (480453 'end of statement' d[134439])
          unknown call_tmp[661319] "expr temp" "maybe param" "maybe type" "temp"
          (661322 'move' call_tmp[661319](134375 call _dom _mt[243] this[134287]))
          unknown call_tmp[661326] "expr temp" "maybe param" "maybe type" "temp"
          (661329 'move' call_tmp[661326](134383 call(134378 call (partial) dim _mt[243] call_tmp[661319]) d[134439]))
          unknown call_tmp[661333] "expr temp" "maybe param" "maybe type" "temp"
          (661336 'move' call_tmp[661333](134384 call size _mt[243] call_tmp[661326]))
          unknown call_tmp[661340] "expr temp" "maybe param" "maybe type" "temp"
          (661343 'move' call_tmp[661340](134388 call _dom _mt[243] that[134282]))
          unknown call_tmp[661347] "expr temp" "maybe param" "maybe type" "temp"
          (661350 'move' call_tmp[661347](134396 call(134391 call (partial) dim _mt[243] call_tmp[661340]) d[134439]))
          unknown call_tmp[661354] "expr temp" "maybe param" "maybe type" "temp"
          (661357 'move' call_tmp[661354](134397 call size _mt[243] call_tmp[661347]))
          unknown call_tmp[661359] "expr temp" "maybe param" "maybe type" "temp"
          (661362 'move' call_tmp[661359](134400 call != call_tmp[661333] call_tmp[661354]))
          unknown call_tmp[661364] "expr temp" "maybe param" "maybe type" "temp"
          (661367 'move' call_tmp[661364](134405 call _cond_test call_tmp[661359]))
          if call_tmp[661364]
          {
            (518493 'move' ret[518469](518492 'coerce' 0 bool[10]))
            gotoReturn _end_equals[518467] _end_equals[518467]
          }
          label _continueLabel[134415]
          _indexOfInterest[134410]
          _iterator[134411]
        }
        label _breakLabel[134416]
      }
    }
    unknown call_tmp[661371] "expr temp" "maybe param" "maybe type" "temp"
    (661374 'move' call_tmp[661371](134460 call eltType _mt[243] this[134287]))
    unknown call_tmp[661376] "expr temp" "maybe param" "maybe type" "temp"
    (661379 'move' call_tmp[661376](134464 call isArrayType call_tmp[661371]))
    unknown call_tmp[661381] "expr temp" "maybe param" "maybe type" "temp"
    (661384 'move' call_tmp[661381](134529 call _cond_test call_tmp[661376]))
    if call_tmp[661381]
    {
      unknown ret[134466] "dead at end of block" "insert auto destroy"
      (543123 'init var' ret[134466] 1)
      (134469 'end of statement')
      Forall {
        induction variables:
          
          unknown thisArr[134511] "index var" "insert auto destroy"
          
          unknown thatArr[134513] "index var" "insert auto destroy"
        iterated expressions:
          this[134287]
          that[134282]
        shadow variables:
          ret[134482] 'reduce' intent outer var ret[134466]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown tmp[134499] "temp"
          (134502 'move' tmp[134499](134501 'addr of' ret[134482]))
          unknown tmp[425866] "maybe param" "temp"
          (425877 'move' tmp[425866] tmp[134499])
          unknown call_tmp[661386] "expr temp" "maybe param" "maybe type" "temp"
          (661389 'move' call_tmp[661386](425879 call _cond_invalid tmp[425866]))
          if call_tmp[661386]
          {
            (425882 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[566756] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[566757] "maybe param" "temp"
          unknown call_tmp[661391] "expr temp" "maybe param" "maybe type" "temp"
          (661394 'move' call_tmp[661391](425867 call isTrue tmp[425866]))
          (566762 'move' tmp[566757](566760 call _cond_test call_tmp[661391]))
          if tmp[566757]
          {
            unknown tmp[566764] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[661398] "expr temp" "maybe param" "maybe type" "temp"
            (661401 'move' call_tmp[661398](134497 call(134492 call (partial) equals _mt[243] thisArr[134511]) thatArr[134513]))
            (566766 'move' tmp[566764](425870 call isTrue call_tmp[661398]))
            (566771 'move' tmp[566756](566768 '_paramFoldLogical' tmp[566757] tmp[566764]))
          }
          {
            (566776 'move' tmp[566756](566773 '_paramFoldLogical' tmp[566757] 0))
          }
          (134507 call = tmp[134499] tmp[566756])
          (480457 'end of statement' thisArr[134511] thatArr[134513])
        }
      }
      (518499 'move' ret[518469](518498 'coerce' ret[134466] bool[10]))
      gotoReturn _end_equals[518467] _end_equals[518467]
      (480460 'end of statement' ret[134466])
    }
    {
      unknown call_tmp[661403] "expr temp" "maybe param" "maybe type" "temp"
      (661406 'move' call_tmp[661403](134522 call == this[134287] that[134282]))
      unknown call_tmp[661408] "expr temp" "maybe param" "maybe type" "temp"
      (661411 'move' call_tmp[661408](134524 'reduce' LogicalAndReduceScanOp[376676](?) call_tmp[661403] 0))
      (518505 'move' ret[518469](518504 'coerce' call_tmp[661408] bool[10]))
      gotoReturn _end_equals[518467] _end_equals[518467]
    }
    label _end_equals[518467]
    (518471 return ret[518469])
  }
  { scopeless type
    bool[10]
  }
  function _cast[134542](arg t[134539]:_array[133600](?), param arg arg[134544]:_any[178](?)) : _unknown[51] "no doc"
  {
    unknown ret[518511] "RVV" "temp"
    unknown result[134547] "dead at end of block" "insert auto destroy"
    (543125 'default init var' result[134547] t[134539])
    (134550 'end of statement')
    (134556 call chpl__transferArray result[134547] arg[134544])
    (480463 'end of statement' result[134547])
    (518516 'move' ret[518511](518515 'deref' result[134547]))
    gotoReturn _end__cast[518509] _end__cast[518509]
    (480465 'end of statement' result[134547])
    label _end__cast[518509]
    (518513 return ret[518511])
  }
  function _cast[134569](arg t[134566]:string[26], arg x[134574]:_array[133600](?)) : _unknown[51] "no doc"
  {
    unknown ret[518522] "RVV" "temp"
    unknown call_tmp[661413] "expr temp" "maybe param" "maybe type" "temp"
    (661416 'move' call_tmp[661413](134584 call stringify x[134574]))
    (518527 'move' ret[518522](518526 'deref' call_tmp[661413]))
    (518524 return ret[518522])
    (355181 'used modules list'(134578 'use' IO[230808]))
  }
  function isDmapType[134593](arg t[134591]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518549] "RVV" "param" "temp"
    function isDmapHelp[134601](arg t[134598]:_distribution[118979](?)) param : _unknown[51]
    {
      unknown ret[518531] "RVV" "param" "temp"
      (518536 'move' ret[518531](518535 'deref' 1))
      (518533 return ret[518531])
    }
    function isDmapHelp[134614](arg t[134612]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518540] "RVV" "param" "temp"
      (518545 'move' ret[518540](518544 'deref' 0))
      (518542 return ret[518540])
    }
    unknown call_tmp[661418] "expr temp" "maybe param" "maybe type" "temp"
    (661421 'move' call_tmp[661418](134625 call isDmapHelp t[134591]))
    (518554 'move' ret[518549](518553 'deref' call_tmp[661418]))
    (518551 return ret[518549])
  }
  function isDmapValue[134636](arg e[134633]:_distribution[118979](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518558] "RVV" "param" "temp"
    (518563 'move' ret[518558](518562 'deref' 1))
    (518560 return ret[518558])
  }
  function isDmapValue[134648](arg e[134646]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518567] "RVV" "param" "temp"
    (518572 'move' ret[518567](518571 'deref' 0))
    (518569 return ret[518567])
  }
  function isDomainType[134660](arg t[134658]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518576] "RVV" "param" "temp"
    unknown call_tmp[661423] "expr temp" "maybe param" "maybe type" "temp"
    (661426 'move' call_tmp[661423](354356 'is_subtype' _domain[125914](?) t[134658]))
    (518581 'move' ret[518576](518580 'deref' call_tmp[661423]))
    (518578 return ret[518576])
  }
  function isDomainValue[134678](arg e[134675]:_domain[125914](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518585] "RVV" "param" "temp"
    (518590 'move' ret[518585](518589 'deref' 1))
    (518587 return ret[518585])
  }
  function isDomainValue[134690](arg e[134688]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518594] "RVV" "param" "temp"
    (518599 'move' ret[518594](518598 'deref' 0))
    (518596 return ret[518594])
  }
  function isArrayType[134702](arg t[134700]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518603] "RVV" "param" "temp"
    unknown call_tmp[661428] "expr temp" "maybe param" "maybe type" "temp"
    (661431 'move' call_tmp[661428](354357 'is_subtype' _array[133600](?) t[134700]))
    (518608 'move' ret[518603](518607 'deref' call_tmp[661428]))
    (518605 return ret[518603])
  }
  function isArrayValue[134722](arg e[134719]:_array[133600](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518612] "RVV" "param" "temp"
    (518617 'move' ret[518612](518616 'deref' 1))
    (518614 return ret[518612])
  }
  function isArrayValue[134734](arg e[134732]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518621] "RVV" "param" "temp"
    (518626 'move' ret[518621](518625 'deref' 0))
    (518623 return ret[518621])
  }
  function -[134748](arg a[134745]:_domain[125914](?), arg b[134751]:_domain[125914](?)) : _unknown[51]
  {
    unknown ret[518630] "RVV" "temp"
    unknown newDom[134768] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661433] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661436 'move' call_tmp[661433](134767 'typeof' a[134745]))
    (543127 'default init var' newDom[134768] call_tmp[661433])
    (134771 'end of statement')
    {
      unknown call_tmp[661438] "maybe param" "maybe type" "temp"
      (661441 'move' call_tmp[661438](134814 'task_get_serial'))
      unknown tmp[134813] "dead at end of block" "insert auto destroy" "temp"
      (543129 'init var' tmp[134813] call_tmp[661438])
      unknown call_tmp[661445] "expr temp" "maybe param" "maybe type" "temp"
      (661448 'move' call_tmp[661445](134774 call _value _mt[243] newDom[134768]))
      unknown call_tmp[661452] "expr temp" "maybe param" "maybe type" "temp"
      (661455 'move' call_tmp[661452](134777 call parSafe _mt[243] call_tmp[661445]))
      unknown call_tmp[661457] "expr temp" "maybe param" "maybe type" "temp"
      (661460 'move' call_tmp[661457](134780 call ! call_tmp[661452]))
      unknown call_tmp[661462] "expr temp" "maybe param" "maybe type" "temp"
      (661465 'move' call_tmp[661462](134810 call _cond_test call_tmp[661457]))
      if call_tmp[661462]
      {
        (134816 'task_set_serial' 1)
      }
      Defer
      {
        {
          (134820 'task_set_serial' tmp[134813])
        }
      }
      Forall {
        induction variables:
          
          unknown e[134807] "index var" "insert auto destroy"
        iterated expressions:
          a[134745]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[661469] "expr temp" "maybe param" "maybe type" "temp"
          (661472 'move' call_tmp[661469](134790 call(134785 call (partial) contains _mt[243] b[134751]) e[134807]))
          unknown call_tmp[661474] "expr temp" "maybe param" "maybe type" "temp"
          (661477 'move' call_tmp[661474](134791 call ! call_tmp[661469]))
          unknown call_tmp[661479] "expr temp" "maybe param" "maybe type" "temp"
          (661482 'move' call_tmp[661479](134801 call _cond_test call_tmp[661474]))
          if call_tmp[661479]
          {
            (134799 call(134794 call (partial) add _mt[243] newDom[134768]) e[134807])
            (480481 'end of statement' newDom[134768] e[134807])
          }
        }
      }
    }
    (518635 'move' ret[518630](518634 'deref' newDom[134768]))
    gotoReturn _end_-[518628] _end_-[518628]
    (480484 'end of statement' newDom[134768])
    label _end_-[518628]
    (518632 return ret[518630])
  }
  where {
    unknown tmp[425887] "maybe param" "temp"
    unknown call_tmp[661486] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661489 'move' call_tmp[661486](134755 'typeof' a[134745]))
    unknown call_tmp[661491] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661494 'move' call_tmp[661491](134757 'typeof' b[134751]))
    (425898 'move' tmp[425887](134758 call == call_tmp[661486] call_tmp[661491]))
    unknown call_tmp[661496] "expr temp" "maybe param" "maybe type" "temp"
    (661499 'move' call_tmp[661496](425900 call _cond_invalid tmp[425887]))
    if call_tmp[661496]
    {
      (425903 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566783] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566784] "maybe param" "temp"
    unknown call_tmp[661501] "expr temp" "maybe param" "maybe type" "temp"
    (661504 'move' call_tmp[661501](425888 call isTrue tmp[425887]))
    (566789 'move' tmp[566784](566787 call _cond_test call_tmp[661501]))
    if tmp[566784]
    {
      unknown tmp[566791] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661506] "expr temp" "maybe param" "maybe type" "temp"
      (661509 'move' call_tmp[661506](134763 call isAssociativeDom a[134745]))
      (566793 'move' tmp[566791](425891 call isTrue call_tmp[661506]))
      (566798 'move' tmp[566783](566795 '_paramFoldLogical' tmp[566784] tmp[566791]))
    }
    {
      (566803 'move' tmp[566783](566800 '_paramFoldLogical' tmp[566784] 0))
    }
    (748347 call chpl_statementLevelSymbol tmp[566783])
  }
  function -=[134836](ref arg a[134833]:_domain[125914](?), arg b[134839]:_domain[125914](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134876] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134877] "expr temp" "temp"
      (134886 'move' _iterator[134877](134884 call _getIterator b[134839]))
      Defer
      {
        {
          (134902 call _freeIterator _iterator[134877])
        }
      }
      { scopeless type
        (134891 'move' _indexOfInterest[134876](134888 call iteratorIndex _iterator[134877]))
      }
      ForLoop[134878]
      {
        unknown e[134895] "index var" "insert auto destroy"
        (480487 'end of statement')
        (134897 'move' e[134895] _indexOfInterest[134876])
        (480488 'end of statement' e[134895])
        unknown call_tmp[661513] "expr temp" "maybe param" "maybe type" "temp"
        (661516 'move' call_tmp[661513](134862 call(134857 call (partial) contains _mt[243] a[134833]) e[134895]))
        unknown call_tmp[661518] "expr temp" "maybe param" "maybe type" "temp"
        (661521 'move' call_tmp[661518](134871 call _cond_test call_tmp[661513]))
        if call_tmp[661518]
        {
          (134869 call(134864 call (partial) remove _mt[243] a[134833]) e[134895])
          (480490 'end of statement' e[134895])
        }
        label _continueLabel[134881]
        _indexOfInterest[134876]
        _iterator[134877]
      }
      label _breakLabel[134882]
    }
    (518639 return _void[55])
  }
  where {
    unknown tmp[425908] "maybe param" "temp"
    unknown call_tmp[661525] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661528 'move' call_tmp[661525](134843 'typeof' a[134833]))
    unknown call_tmp[661530] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661533 'move' call_tmp[661530](134845 'typeof' b[134839]))
    (425919 'move' tmp[425908](134846 call == call_tmp[661525] call_tmp[661530]))
    unknown call_tmp[661535] "expr temp" "maybe param" "maybe type" "temp"
    (661538 'move' call_tmp[661535](425921 call _cond_invalid tmp[425908]))
    if call_tmp[661535]
    {
      (425924 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566810] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566811] "maybe param" "temp"
    unknown call_tmp[661540] "expr temp" "maybe param" "maybe type" "temp"
    (661543 'move' call_tmp[661540](425909 call isTrue tmp[425908]))
    (566816 'move' tmp[566811](566814 call _cond_test call_tmp[661540]))
    if tmp[566811]
    {
      unknown tmp[566818] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661545] "expr temp" "maybe param" "maybe type" "temp"
      (661548 'move' call_tmp[661545](134851 call isAssociativeDom a[134833]))
      (566820 'move' tmp[566818](425912 call isTrue call_tmp[661545]))
      (566825 'move' tmp[566810](566822 '_paramFoldLogical' tmp[566811] tmp[566818]))
    }
    {
      (566830 'move' tmp[566810](566827 '_paramFoldLogical' tmp[566811] 0))
    }
    (748349 call chpl_statementLevelSymbol tmp[566810])
  }
  function |[134919](arg a[134916]:_domain[125914](?), arg b[134922]:_domain[125914](?)) : _unknown[51]
  {
    unknown ret[518643] "RVV" "temp"
    unknown call_tmp[661550] "expr temp" "maybe param" "maybe type" "temp"
    (661553 'move' call_tmp[661550](134939 call + a[134916] b[134922]))
    (518648 'move' ret[518643](518647 'deref' call_tmp[661550]))
    (518645 return ret[518643])
  }
  where {
    unknown tmp[425929] "maybe param" "temp"
    unknown call_tmp[661555] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661558 'move' call_tmp[661555](134926 'typeof' a[134916]))
    unknown call_tmp[661560] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661563 'move' call_tmp[661560](134928 'typeof' b[134922]))
    (425940 'move' tmp[425929](134929 call == call_tmp[661555] call_tmp[661560]))
    unknown call_tmp[661565] "expr temp" "maybe param" "maybe type" "temp"
    (661568 'move' call_tmp[661565](425942 call _cond_invalid tmp[425929]))
    if call_tmp[661565]
    {
      (425945 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566837] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566838] "maybe param" "temp"
    unknown call_tmp[661570] "expr temp" "maybe param" "maybe type" "temp"
    (661573 'move' call_tmp[661570](425930 call isTrue tmp[425929]))
    (566843 'move' tmp[566838](566841 call _cond_test call_tmp[661570]))
    if tmp[566838]
    {
      unknown tmp[566845] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661575] "expr temp" "maybe param" "maybe type" "temp"
      (661578 'move' call_tmp[661575](134934 call isAssociativeDom a[134916]))
      (566847 'move' tmp[566845](425933 call isTrue call_tmp[661575]))
      (566852 'move' tmp[566837](566849 '_paramFoldLogical' tmp[566838] tmp[566845]))
    }
    {
      (566857 'move' tmp[566837](566854 '_paramFoldLogical' tmp[566838] 0))
    }
    (748351 call chpl_statementLevelSymbol tmp[566837])
  }
  function |=[134953](ref arg a[134950]:_domain[125914](?), arg b[134956]:_domain[125914](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[134981] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134982] "expr temp" "temp"
      (134991 'move' _iterator[134982](134989 call _getIterator b[134956]))
      Defer
      {
        {
          (135007 call _freeIterator _iterator[134982])
        }
      }
      { scopeless type
        (134996 'move' _indexOfInterest[134981](134993 call iteratorIndex _iterator[134982]))
      }
      ForLoop[134983]
      {
        unknown e[135000] "index var" "insert auto destroy"
        (480494 'end of statement')
        (135002 'move' e[135000] _indexOfInterest[134981])
        (480495 'end of statement' e[135000])
        (134979 call(134974 call (partial) add _mt[243] a[134950]) e[135000])
        (480497 'end of statement' e[135000])
        label _continueLabel[134986]
        _indexOfInterest[134981]
        _iterator[134982]
      }
      label _breakLabel[134987]
    }
    (518650 return _void[55])
  }
  where {
    unknown tmp[425950] "maybe param" "temp"
    unknown call_tmp[661582] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661585 'move' call_tmp[661582](134960 'typeof' a[134950]))
    unknown call_tmp[661587] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661590 'move' call_tmp[661587](134962 'typeof' b[134956]))
    (425961 'move' tmp[425950](134963 call == call_tmp[661582] call_tmp[661587]))
    unknown call_tmp[661592] "expr temp" "maybe param" "maybe type" "temp"
    (661595 'move' call_tmp[661592](425963 call _cond_invalid tmp[425950]))
    if call_tmp[661592]
    {
      (425966 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566864] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566865] "maybe param" "temp"
    unknown call_tmp[661597] "expr temp" "maybe param" "maybe type" "temp"
    (661600 'move' call_tmp[661597](425951 call isTrue tmp[425950]))
    (566870 'move' tmp[566865](566868 call _cond_test call_tmp[661597]))
    if tmp[566865]
    {
      unknown tmp[566872] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661602] "expr temp" "maybe param" "maybe type" "temp"
      (661605 'move' call_tmp[661602](134968 call isAssociativeDom a[134950]))
      (566874 'move' tmp[566872](425954 call isTrue call_tmp[661602]))
      (566879 'move' tmp[566864](566876 '_paramFoldLogical' tmp[566865] tmp[566872]))
    }
    {
      (566884 'move' tmp[566864](566881 '_paramFoldLogical' tmp[566865] 0))
    }
    (748353 call chpl_statementLevelSymbol tmp[566864])
  }
  function +=[135024](ref arg a[135021]:_domain[125914](?), arg b[135027]:_domain[125914](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (135044 call |= a[135021] b[135027])
    (518652 return _void[55])
  }
  where {
    unknown tmp[425971] "maybe param" "temp"
    unknown call_tmp[661607] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661610 'move' call_tmp[661607](135031 'typeof' a[135021]))
    unknown call_tmp[661612] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661615 'move' call_tmp[661612](135033 'typeof' b[135027]))
    (425982 'move' tmp[425971](135034 call == call_tmp[661607] call_tmp[661612]))
    unknown call_tmp[661617] "expr temp" "maybe param" "maybe type" "temp"
    (661620 'move' call_tmp[661617](425984 call _cond_invalid tmp[425971]))
    if call_tmp[661617]
    {
      (425987 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566891] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566892] "maybe param" "temp"
    unknown call_tmp[661622] "expr temp" "maybe param" "maybe type" "temp"
    (661625 'move' call_tmp[661622](425972 call isTrue tmp[425971]))
    (566897 'move' tmp[566892](566895 call _cond_test call_tmp[661622]))
    if tmp[566892]
    {
      unknown tmp[566899] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661627] "expr temp" "maybe param" "maybe type" "temp"
      (661630 'move' call_tmp[661627](135039 call isAssociativeDom a[135021]))
      (566901 'move' tmp[566899](425975 call isTrue call_tmp[661627]))
      (566906 'move' tmp[566891](566903 '_paramFoldLogical' tmp[566892] tmp[566899]))
    }
    {
      (566911 'move' tmp[566891](566908 '_paramFoldLogical' tmp[566892] 0))
    }
    (748355 call chpl_statementLevelSymbol tmp[566891])
  }
  function &[135057](arg a[135054]:_domain[125914](?), arg b[135060]:_domain[125914](?)) : _unknown[51]
  {
    unknown ret[518656] "RVV" "temp"
    unknown newDom[135077] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661632] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661635 'move' call_tmp[661632](135076 'typeof' a[135054]))
    (543131 'default init var' newDom[135077] call_tmp[661632])
    (135080 'end of statement')
    {
      unknown call_tmp[661637] "maybe param" "maybe type" "temp"
      (661640 'move' call_tmp[661637](135124 'task_get_serial'))
      unknown tmp[135123] "dead at end of block" "insert auto destroy" "temp"
      (543133 'init var' tmp[135123] call_tmp[661637])
      unknown call_tmp[661644] "expr temp" "maybe param" "maybe type" "temp"
      (661647 'move' call_tmp[661644](135083 call _value _mt[243] newDom[135077]))
      unknown call_tmp[661651] "expr temp" "maybe param" "maybe type" "temp"
      (661654 'move' call_tmp[661651](135086 call parSafe _mt[243] call_tmp[661644]))
      unknown call_tmp[661656] "expr temp" "maybe param" "maybe type" "temp"
      (661659 'move' call_tmp[661656](135089 call ! call_tmp[661651]))
      unknown call_tmp[661661] "expr temp" "maybe param" "maybe type" "temp"
      (661664 'move' call_tmp[661661](135120 call _cond_test call_tmp[661656]))
      if call_tmp[661661]
      {
        (135126 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135130 'task_set_serial' tmp[135123])
        }
      }
      Forall {
        induction variables:
          
          unknown k[135117] "index var" "insert auto destroy"
        iterated expressions:
          a[135054]
        shadow variables:
          newDom[135094] 'ref' intent outer var newDom[135077]
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown call_tmp[661668] "expr temp" "maybe param" "maybe type" "temp"
          (661671 'move' call_tmp[661668](135105 call(135100 call (partial) contains _mt[243] b[135060]) k[135117]))
          unknown call_tmp[661673] "expr temp" "maybe param" "maybe type" "temp"
          (661676 'move' call_tmp[661673](135111 call _cond_test call_tmp[661668]))
          if call_tmp[661673]
          {
            (135108 call += newDom[135094] k[135117])
            (480502 'end of statement' newDom[135094] k[135117])
          }
        }
      }
    }
    (518661 'move' ret[518656](518660 'deref' newDom[135077]))
    gotoReturn _end_&[518654] _end_&[518654]
    (480505 'end of statement' newDom[135077])
    label _end_&[518654]
    (518658 return ret[518656])
  }
  where {
    unknown tmp[425992] "maybe param" "temp"
    unknown call_tmp[661678] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661681 'move' call_tmp[661678](135064 'typeof' a[135054]))
    unknown call_tmp[661683] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661686 'move' call_tmp[661683](135066 'typeof' b[135060]))
    (426003 'move' tmp[425992](135067 call == call_tmp[661678] call_tmp[661683]))
    unknown call_tmp[661688] "expr temp" "maybe param" "maybe type" "temp"
    (661691 'move' call_tmp[661688](426005 call _cond_invalid tmp[425992]))
    if call_tmp[661688]
    {
      (426008 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566918] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566919] "maybe param" "temp"
    unknown call_tmp[661693] "expr temp" "maybe param" "maybe type" "temp"
    (661696 'move' call_tmp[661693](425993 call isTrue tmp[425992]))
    (566924 'move' tmp[566919](566922 call _cond_test call_tmp[661693]))
    if tmp[566919]
    {
      unknown tmp[566926] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661698] "expr temp" "maybe param" "maybe type" "temp"
      (661701 'move' call_tmp[661698](135072 call isAssociativeDom a[135054]))
      (566928 'move' tmp[566926](425996 call isTrue call_tmp[661698]))
      (566933 'move' tmp[566918](566930 '_paramFoldLogical' tmp[566919] tmp[566926]))
    }
    {
      (566938 'move' tmp[566918](566935 '_paramFoldLogical' tmp[566919] 0))
    }
    (748357 call chpl_statementLevelSymbol tmp[566918])
  }
  function &=[135146](ref arg a[135143]:_domain[125914](?), arg b[135149]:_domain[125914](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown removeSet[135172] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661705] "expr temp" "maybe param" "maybe type" "temp"
    (661708 'move' call_tmp[661705](135165 call idxType _mt[243] a[135143]))
    unknown call_tmp[661710] "expr temp" "maybe param" "maybe type" "temp"
    (661713 'move' call_tmp[661710](135170 call chpl__buildDomainRuntimeType defaultDist[94058] call_tmp[661705]))
    (543135 'default init var' removeSet[135172] call_tmp[661710])
    (135175 'end of statement')
    {
      unknown _indexOfInterest[135198] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135199] "expr temp" "temp"
      (135208 'move' _iterator[135199](135206 call _getIterator a[135143]))
      Defer
      {
        {
          (135224 call _freeIterator _iterator[135199])
        }
      }
      { scopeless type
        (135213 'move' _indexOfInterest[135198](135210 call iteratorIndex _iterator[135199]))
      }
      ForLoop[135200]
      {
        unknown e[135217] "index var" "insert auto destroy"
        (480508 'end of statement')
        (135219 'move' e[135217] _indexOfInterest[135198])
        (480509 'end of statement' e[135217])
        unknown call_tmp[661717] "expr temp" "maybe param" "maybe type" "temp"
        (661720 'move' call_tmp[661717](135185 call(135180 call (partial) contains _mt[243] b[135149]) e[135217]))
        unknown call_tmp[661722] "expr temp" "maybe param" "maybe type" "temp"
        (661725 'move' call_tmp[661722](135186 call ! call_tmp[661717]))
        unknown call_tmp[661727] "expr temp" "maybe param" "maybe type" "temp"
        (661730 'move' call_tmp[661727](135193 call _cond_test call_tmp[661722]))
        if call_tmp[661727]
        {
          (135190 call += removeSet[135172] e[135217])
          (480511 'end of statement' removeSet[135172] e[135217])
        }
        label _continueLabel[135203]
        _indexOfInterest[135198]
        _iterator[135199]
      }
      label _breakLabel[135204]
    }
    {
      unknown _indexOfInterest[135241] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135242] "expr temp" "temp"
      (135251 'move' _iterator[135242](135249 call _getIterator removeSet[135172]))
      Defer
      {
        {
          (135267 call _freeIterator _iterator[135242])
        }
      }
      { scopeless type
        (135256 'move' _indexOfInterest[135241](135253 call iteratorIndex _iterator[135242]))
      }
      ForLoop[135243]
      {
        unknown e[135260] "index var" "insert auto destroy"
        (480515 'end of statement')
        (135262 'move' e[135260] _indexOfInterest[135241])
        (480516 'end of statement' e[135260])
        (135239 call(135234 call (partial) remove _mt[243] a[135143]) e[135260])
        (480518 'end of statement' e[135260])
        label _continueLabel[135246]
        _indexOfInterest[135241]
        _iterator[135242]
      }
      label _breakLabel[135247]
    }
    (518665 return _void[55])
  }
  where {
    unknown tmp[426013] "maybe param" "temp"
    unknown call_tmp[661734] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661737 'move' call_tmp[661734](135153 'typeof' a[135143]))
    unknown call_tmp[661739] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661742 'move' call_tmp[661739](135155 'typeof' b[135149]))
    (426024 'move' tmp[426013](135156 call == call_tmp[661734] call_tmp[661739]))
    unknown call_tmp[661744] "expr temp" "maybe param" "maybe type" "temp"
    (661747 'move' call_tmp[661744](426026 call _cond_invalid tmp[426013]))
    if call_tmp[661744]
    {
      (426029 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566945] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566946] "maybe param" "temp"
    unknown call_tmp[661749] "expr temp" "maybe param" "maybe type" "temp"
    (661752 'move' call_tmp[661749](426014 call isTrue tmp[426013]))
    (566951 'move' tmp[566946](566949 call _cond_test call_tmp[661749]))
    if tmp[566946]
    {
      unknown tmp[566953] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661754] "expr temp" "maybe param" "maybe type" "temp"
      (661757 'move' call_tmp[661754](135161 call isAssociativeDom a[135143]))
      (566955 'move' tmp[566953](426017 call isTrue call_tmp[661754]))
      (566960 'move' tmp[566945](566957 '_paramFoldLogical' tmp[566946] tmp[566953]))
    }
    {
      (566965 'move' tmp[566945](566962 '_paramFoldLogical' tmp[566946] 0))
    }
    (748359 call chpl_statementLevelSymbol tmp[566945])
  }
  function ^[135283](arg a[135280]:_domain[125914](?), arg b[135286]:_domain[125914](?)) : _unknown[51]
  {
    unknown ret[518669] "RVV" "temp"
    unknown newDom[135303] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661759] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661762 'move' call_tmp[661759](135302 'typeof' a[135280]))
    (543137 'default init var' newDom[135303] call_tmp[661759])
    (135306 'end of statement')
    {
      unknown call_tmp[661764] "maybe param" "maybe type" "temp"
      (661767 'move' call_tmp[661764](135378 'task_get_serial'))
      unknown tmp[135377] "dead at end of block" "insert auto destroy" "temp"
      (543139 'init var' tmp[135377] call_tmp[661764])
      unknown call_tmp[661771] "expr temp" "maybe param" "maybe type" "temp"
      (661774 'move' call_tmp[661771](135309 call _value _mt[243] newDom[135303]))
      unknown call_tmp[661778] "expr temp" "maybe param" "maybe type" "temp"
      (661781 'move' call_tmp[661778](135312 call parSafe _mt[243] call_tmp[661771]))
      unknown call_tmp[661783] "expr temp" "maybe param" "maybe type" "temp"
      (661786 'move' call_tmp[661783](135315 call ! call_tmp[661778]))
      unknown call_tmp[661788] "expr temp" "maybe param" "maybe type" "temp"
      (661791 'move' call_tmp[661788](135374 call _cond_test call_tmp[661783]))
      if call_tmp[661788]
      {
        (135380 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135384 'task_set_serial' tmp[135377])
        }
      }
      {
        Forall {
          induction variables:
            
            unknown k[135342] "index var" "insert auto destroy"
          iterated expressions:
            a[135280]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661795] "expr temp" "maybe param" "maybe type" "temp"
            (661798 'move' call_tmp[661795](135325 call(135320 call (partial) contains _mt[243] b[135286]) k[135342]))
            unknown call_tmp[661800] "expr temp" "maybe param" "maybe type" "temp"
            (661803 'move' call_tmp[661800](135326 call ! call_tmp[661795]))
            unknown call_tmp[661805] "expr temp" "maybe param" "maybe type" "temp"
            (661808 'move' call_tmp[661805](135336 call _cond_test call_tmp[661800]))
            if call_tmp[661805]
            {
              (135334 call(135329 call (partial) add _mt[243] newDom[135303]) k[135342])
              (480522 'end of statement' newDom[135303] k[135342])
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135371] "index var" "insert auto destroy"
          iterated expressions:
            b[135286]
          shadow variables:
          other variables
            forall body
          {
            unknown call_tmp[661814] "expr temp" "maybe param" "maybe type" "temp"
            (661817 'move' call_tmp[661814](135354 call(135349 call (partial) contains _mt[243] a[135280]) k[135371]))
            unknown call_tmp[661819] "expr temp" "maybe param" "maybe type" "temp"
            (661822 'move' call_tmp[661819](135355 call ! call_tmp[661814]))
            unknown call_tmp[661824] "expr temp" "maybe param" "maybe type" "temp"
            (661827 'move' call_tmp[661824](135365 call _cond_test call_tmp[661819]))
            if call_tmp[661824]
            {
              (135363 call(135358 call (partial) add _mt[243] newDom[135303]) k[135371])
              (480525 'end of statement' newDom[135303] k[135371])
            }
          }
        }
      }
    }
    (518674 'move' ret[518669](518673 'deref' newDom[135303]))
    gotoReturn _end_^[518667] _end_^[518667]
    (480528 'end of statement' newDom[135303])
    label _end_^[518667]
    (518671 return ret[518669])
  }
  where {
    unknown tmp[426034] "maybe param" "temp"
    unknown call_tmp[661831] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661834 'move' call_tmp[661831](135290 'typeof' a[135280]))
    unknown call_tmp[661836] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661839 'move' call_tmp[661836](135292 'typeof' b[135286]))
    (426045 'move' tmp[426034](135293 call == call_tmp[661831] call_tmp[661836]))
    unknown call_tmp[661841] "expr temp" "maybe param" "maybe type" "temp"
    (661844 'move' call_tmp[661841](426047 call _cond_invalid tmp[426034]))
    if call_tmp[661841]
    {
      (426050 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566972] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[566973] "maybe param" "temp"
    unknown call_tmp[661846] "expr temp" "maybe param" "maybe type" "temp"
    (661849 'move' call_tmp[661846](426035 call isTrue tmp[426034]))
    (566978 'move' tmp[566973](566976 call _cond_test call_tmp[661846]))
    if tmp[566973]
    {
      unknown tmp[566980] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661851] "expr temp" "maybe param" "maybe type" "temp"
      (661854 'move' call_tmp[661851](135298 call isAssociativeDom a[135280]))
      (566982 'move' tmp[566980](426038 call isTrue call_tmp[661851]))
      (566987 'move' tmp[566972](566984 '_paramFoldLogical' tmp[566973] tmp[566980]))
    }
    {
      (566992 'move' tmp[566972](566989 '_paramFoldLogical' tmp[566973] 0))
    }
    (748361 call chpl_statementLevelSymbol tmp[566972])
  }
  function ^=[135400](ref arg a[135397]:_domain[125914](?), arg b[135403]:_domain[125914](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135449] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135450] "expr temp" "temp"
      (135459 'move' _iterator[135450](135457 call _getIterator b[135403]))
      Defer
      {
        {
          (135475 call _freeIterator _iterator[135450])
        }
      }
      { scopeless type
        (135464 'move' _indexOfInterest[135449](135461 call iteratorIndex _iterator[135450]))
      }
      ForLoop[135451]
      {
        unknown e[135468] "index var" "insert auto destroy"
        (480531 'end of statement')
        (135470 'move' e[135468] _indexOfInterest[135449])
        (480532 'end of statement' e[135468])
        unknown call_tmp[661858] "expr temp" "maybe param" "maybe type" "temp"
        (661861 'move' call_tmp[661858](135426 call(135421 call (partial) contains _mt[243] a[135397]) e[135468]))
        unknown call_tmp[661863] "expr temp" "maybe param" "maybe type" "temp"
        (661866 'move' call_tmp[661863](135443 call _cond_test call_tmp[661858]))
        if call_tmp[661863]
        {
          (135433 call(135428 call (partial) remove _mt[243] a[135397]) e[135468])
          (480534 'end of statement' e[135468])
        }
        {
          (135441 call(135436 call (partial) add _mt[243] a[135397]) e[135468])
          (480536 'end of statement' e[135468])
        }
        label _continueLabel[135454]
        _indexOfInterest[135449]
        _iterator[135450]
      }
      label _breakLabel[135455]
    }
    (518678 return _void[55])
  }
  where {
    unknown tmp[426055] "maybe param" "temp"
    unknown call_tmp[661872] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661875 'move' call_tmp[661872](135407 'typeof' a[135397]))
    unknown call_tmp[661877] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (661880 'move' call_tmp[661877](135409 'typeof' b[135403]))
    (426066 'move' tmp[426055](135410 call == call_tmp[661872] call_tmp[661877]))
    unknown call_tmp[661882] "expr temp" "maybe param" "maybe type" "temp"
    (661885 'move' call_tmp[661882](426068 call _cond_invalid tmp[426055]))
    if call_tmp[661882]
    {
      (426071 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[566999] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567000] "maybe param" "temp"
    unknown call_tmp[661887] "expr temp" "maybe param" "maybe type" "temp"
    (661890 'move' call_tmp[661887](426056 call isTrue tmp[426055]))
    (567005 'move' tmp[567000](567003 call _cond_test call_tmp[661887]))
    if tmp[567000]
    {
      unknown tmp[567007] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[661892] "expr temp" "maybe param" "maybe type" "temp"
      (661895 'move' call_tmp[661892](135415 call isAssociativeDom a[135397]))
      (567009 'move' tmp[567007](426059 call isTrue call_tmp[661892]))
      (567014 'move' tmp[566999](567011 '_paramFoldLogical' tmp[567000] tmp[567007]))
    }
    {
      (567019 'move' tmp[566999](567016 '_paramFoldLogical' tmp[567000] 0))
    }
    (748363 call chpl_statementLevelSymbol tmp[566999])
  }
  function +=[135492](ref arg sd[135489]:_domain[125914](?), arg inds[135501]:_array[133600](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[661899] "expr temp" "maybe param" "maybe type" "temp"
    (661902 'move' call_tmp[661899](135509 call size _mt[243] inds[135501]))
    unknown call_tmp[661904] "expr temp" "maybe param" "maybe type" "temp"
    (661907 'move' call_tmp[661904](135513 call == call_tmp[661899] 0))
    unknown call_tmp[661909] "expr temp" "maybe param" "maybe type" "temp"
    (661912 'move' call_tmp[661909](135517 call _cond_test call_tmp[661904]))
    if call_tmp[661909]
    {
      gotoReturn _end_+=[518680] _end_+=[518680]
    }
    unknown call_tmp[661916] "expr temp" "maybe param" "maybe type" "temp"
    (661919 'move' call_tmp[661916](135524 call _value _mt[243] sd[135489]))
    (135532 call(135527 call (partial) dsiBulkAdd _mt[243] call_tmp[661916]) inds[135501])
    label _end_+=[518680]
    (518682 return _void[55])
  }
  where {
    unknown call_tmp[661923] "expr temp" "maybe param" "maybe type" "temp"
    (661926 'move' call_tmp[661923](135507 call isSparseDom sd[135489]))
    unknown call_tmp[661928] "expr temp" "maybe param" "maybe type" "temp"
    (661931 'move' call_tmp[661928](135496 call chpl__buildIndexType sd[135489]))
    unknown call_tmp[661935] "expr temp" "maybe param" "maybe type" "temp"
    (661938 'move' call_tmp[661935](461487 call eltType _mt[243] inds[135501]))
    unknown call_tmp[661940] "expr temp" "maybe param" "maybe type" "temp"
    (661943 'move' call_tmp[661940](461491 call == call_tmp[661928] call_tmp[661935]))
    (461485 call & call_tmp[661923] call_tmp[661940])
  }
  function +=[135543](ref arg sd[135540]:_domain[125914](?), arg d[135546]:_domain[125914](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[661947] "expr temp" "maybe param" "maybe type" "temp"
    (661950 'move' call_tmp[661947](135578 call size _mt[243] d[135546]))
    unknown call_tmp[661952] "expr temp" "maybe param" "maybe type" "temp"
    (661955 'move' call_tmp[661952](135582 call == call_tmp[661947] 0))
    unknown call_tmp[661957] "expr temp" "maybe param" "maybe type" "temp"
    (661960 'move' call_tmp[661957](135586 call _cond_test call_tmp[661952]))
    if call_tmp[661957]
    {
      gotoReturn _end_+=[518686] _end_+=[518686]
    }
    unknown call_tmp[661964] "maybe param" "maybe type" "temp"
    (661967 'move' call_tmp[661964](135593 call size _mt[243] d[135546]))
    const indCount[135596] "dead at end of block" "const" "insert auto destroy"
    (543141 'init var' indCount[135596] call_tmp[661964])
    (135599 'end of statement')
    unknown arr[135618] "dead at end of block" "insert auto destroy"
    unknown call_tmp[661969] "expr temp" "maybe param" "maybe type" "temp"
    (661972 'move' call_tmp[661969](135601 call chpl_build_low_bounded_range 0))
    unknown call_tmp[661974] "expr temp" "maybe param" "maybe type" "temp"
    (661977 'move' call_tmp[661974](135604 call # call_tmp[661969] indCount[135596]))
    unknown call_tmp[661979] "expr temp" "maybe param" "maybe type" "temp"
    (661982 'move' call_tmp[661979](135607 call chpl__buildDomainExpr call_tmp[661974]))
    unknown call_tmp[661984] "expr temp" "maybe param" "maybe type" "temp"
    (661987 'move' call_tmp[661984](135614 call chpl__ensureDomainExpr call_tmp[661979]))
    unknown call_tmp[661989] "expr temp" "maybe param" "maybe type" "temp"
    (661992 'move' call_tmp[661989](135612 call chpl__buildIndexType sd[135540]))
    unknown call_tmp[661994] "expr temp" "maybe param" "maybe type" "temp"
    (661997 'move' call_tmp[661994](135616 call chpl__buildArrayRuntimeType call_tmp[661984] call_tmp[661989]))
    (543143 'default init var' arr[135618] call_tmp[661994])
    (135621 'end of statement')
    {
      unknown _indexOfInterest[135641] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135642] "expr temp" "temp"
      unknown call_tmp[661999] "expr temp" "maybe param" "maybe type" "temp"
      (662002 'move' call_tmp[661999](135651 call _getIterator d[135546]))
      unknown call_tmp[662004] "expr temp" "maybe param" "maybe type" "temp"
      (662007 'move' call_tmp[662004](135654 call chpl_build_low_bounded_range 0))
      unknown call_tmp[662009] "expr temp" "maybe param" "maybe type" "temp"
      (662012 'move' call_tmp[662009](135656 call _getIterator call_tmp[662004]))
      (135659 'move' _iterator[135642](135632 call _build_tuple call_tmp[661999] call_tmp[662009]))
      Defer
      {
        {
          (135689 call _freeIterator _iterator[135642])
        }
      }
      { scopeless type
        (135664 'move' _indexOfInterest[135641](135661 call iteratorIndex _iterator[135642]))
      }
      ForLoop[135643]
      {
        (135669 call _check_tuple_var_decl _indexOfInterest[135641] 2)
        (480543 'end of statement')
        unknown i[135675] "index var" "insert auto destroy"
        (480544 'end of statement')
        (135677 'move' i[135675](135673 call _indexOfInterest[135641] 0))
        (480545 'end of statement' i[135675])
        unknown j[135682] "index var" "insert auto destroy"
        (480547 'end of statement')
        (135684 'move' j[135682](135680 call _indexOfInterest[135641] 1))
        (480548 'end of statement' j[135682])
        unknown call_tmp[662014] "expr temp" "maybe param" "maybe type" "temp"
        (662017 'move' call_tmp[662014](135636 call arr[135618] j[135682]))
        (135638 call = call_tmp[662014] i[135675])
        (480550 'end of statement' arr[135618] j[135682] i[135675])
        label _continueLabel[135646]
        _indexOfInterest[135641]
        _iterator[135642]
      }
      label _breakLabel[135647]
    }
    unknown rowSorted[135697] "dead at end of block" "insert auto destroy"
    (543145 'init var' rowSorted[135697] 0)
    (135700 'end of statement' indCount[135596])
    unknown call_tmp[662021] "expr temp" "maybe param" "maybe type" "temp"
    (662024 'move' call_tmp[662021](135702 call _value _mt[243] sd[135540]))
    (135713 call(135705 call (partial) dsiBulkAdd _mt[243] call_tmp[662021]) arr[135618] rowSorted[135697] 1 0)
    (480554 'end of statement' arr[135618] rowSorted[135697])
    label _end_+=[518686]
    (518688 return _void[55])
  }
  where {
    unknown tmp[426076] "maybe param" "temp"
    unknown tmp[426097] "maybe param" "temp"
    (426108 'move' tmp[426097](135552 call isSparseDom sd[135540]))
    unknown call_tmp[662028] "expr temp" "maybe param" "maybe type" "temp"
    (662031 'move' call_tmp[662028](426110 call _cond_invalid tmp[426097]))
    if call_tmp[662028]
    {
      (426113 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567026] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567027] "maybe param" "temp"
    unknown call_tmp[662033] "expr temp" "maybe param" "maybe type" "temp"
    (662036 'move' call_tmp[662033](426098 call isTrue tmp[426097]))
    (567032 'move' tmp[567027](567030 call _cond_test call_tmp[662033]))
    if tmp[567027]
    {
      unknown tmp[567034] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662040] "expr temp" "maybe param" "maybe type" "temp"
      (662043 'move' call_tmp[662040](135554 call rank _mt[243] d[135546]))
      unknown call_tmp[662047] "expr temp" "maybe param" "maybe type" "temp"
      (662050 'move' call_tmp[662047](135558 call rank _mt[243] sd[135540]))
      unknown call_tmp[662052] "expr temp" "maybe param" "maybe type" "temp"
      (662055 'move' call_tmp[662052](135561 call == call_tmp[662040] call_tmp[662047]))
      (567036 'move' tmp[567034](426101 call isTrue call_tmp[662052]))
      (567041 'move' tmp[567026](567038 '_paramFoldLogical' tmp[567027] tmp[567034]))
    }
    {
      (567046 'move' tmp[567026](567043 '_paramFoldLogical' tmp[567027] 0))
    }
    (426087 'move' tmp[426076] tmp[567026])
    unknown call_tmp[662057] "expr temp" "maybe param" "maybe type" "temp"
    (662060 'move' call_tmp[662057](426089 call _cond_invalid tmp[426076]))
    if call_tmp[662057]
    {
      (426092 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567053] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567054] "maybe param" "temp"
    unknown call_tmp[662062] "expr temp" "maybe param" "maybe type" "temp"
    (662065 'move' call_tmp[662062](426077 call isTrue tmp[426076]))
    (567059 'move' tmp[567054](567057 call _cond_test call_tmp[662062]))
    if tmp[567054]
    {
      unknown tmp[567061] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662069] "expr temp" "maybe param" "maybe type" "temp"
      (662072 'move' call_tmp[662069](135566 call idxType _mt[243] sd[135540]))
      unknown call_tmp[662076] "expr temp" "maybe param" "maybe type" "temp"
      (662079 'move' call_tmp[662076](135570 call idxType _mt[243] d[135546]))
      unknown call_tmp[662081] "expr temp" "maybe param" "maybe type" "temp"
      (662084 'move' call_tmp[662081](135573 call == call_tmp[662069] call_tmp[662076]))
      (567063 'move' tmp[567061](426080 call isTrue call_tmp[662081]))
      (567068 'move' tmp[567053](567065 '_paramFoldLogical' tmp[567054] tmp[567061]))
    }
    {
      (567073 'move' tmp[567053](567070 '_paramFoldLogical' tmp[567054] 0))
    }
    (748365 call chpl_statementLevelSymbol tmp[567053])
  }
  function -=[135724](ref arg sd[135721]:_domain[125914](?), arg inds[135733]:_array[133600](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135747] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135748] "expr temp" "temp"
      (135757 'move' _iterator[135748](135755 call _getIterator inds[135733]))
      Defer
      {
        {
          (135773 call _freeIterator _iterator[135748])
        }
      }
      { scopeless type
        (135762 'move' _indexOfInterest[135747](135759 call iteratorIndex _iterator[135748]))
      }
      ForLoop[135749]
      {
        unknown ind[135766] "index var" "insert auto destroy"
        (480558 'end of statement')
        (135768 'move' ind[135766] _indexOfInterest[135747])
        (480559 'end of statement' ind[135766])
        (135744 call -= sd[135721] ind[135766])
        (480561 'end of statement' ind[135766])
        label _continueLabel[135752]
        _indexOfInterest[135747]
        _iterator[135748]
      }
      label _breakLabel[135753]
    }
    (518692 return _void[55])
  }
  where {
    unknown call_tmp[662086] "expr temp" "maybe param" "maybe type" "temp"
    (662089 'move' call_tmp[662086](135739 call isSparseDom sd[135721]))
    unknown call_tmp[662091] "expr temp" "maybe param" "maybe type" "temp"
    (662094 'move' call_tmp[662091](135728 call chpl__buildIndexType sd[135721]))
    unknown call_tmp[662098] "expr temp" "maybe param" "maybe type" "temp"
    (662101 'move' call_tmp[662098](461497 call eltType _mt[243] inds[135733]))
    unknown call_tmp[662103] "expr temp" "maybe param" "maybe type" "temp"
    (662106 'move' call_tmp[662103](461501 call == call_tmp[662091] call_tmp[662098]))
    (461495 call & call_tmp[662086] call_tmp[662103])
  }
  function -=[135790](ref arg sd[135787]:_domain[125914](?), arg d[135793]:_domain[125914](?)) : _unknown[51] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135831] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135832] "expr temp" "temp"
      (135841 'move' _iterator[135832](135839 call _getIterator d[135793]))
      Defer
      {
        {
          (135857 call _freeIterator _iterator[135832])
        }
      }
      { scopeless type
        (135846 'move' _indexOfInterest[135831](135843 call iteratorIndex _iterator[135832]))
      }
      ForLoop[135833]
      {
        unknown ind[135850] "index var" "insert auto destroy"
        (480564 'end of statement')
        (135852 'move' ind[135850] _indexOfInterest[135831])
        (480565 'end of statement' ind[135850])
        (135828 call -= sd[135787] ind[135850])
        (480567 'end of statement' ind[135850])
        label _continueLabel[135836]
        _indexOfInterest[135831]
        _iterator[135832]
      }
      label _breakLabel[135837]
    }
    (518694 return _void[55])
  }
  where {
    unknown tmp[426118] "maybe param" "temp"
    unknown tmp[426139] "maybe param" "temp"
    (426150 'move' tmp[426139](135799 call isSparseDom sd[135787]))
    unknown call_tmp[662108] "expr temp" "maybe param" "maybe type" "temp"
    (662111 'move' call_tmp[662108](426152 call _cond_invalid tmp[426139]))
    if call_tmp[662108]
    {
      (426155 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567080] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567081] "maybe param" "temp"
    unknown call_tmp[662113] "expr temp" "maybe param" "maybe type" "temp"
    (662116 'move' call_tmp[662113](426140 call isTrue tmp[426139]))
    (567086 'move' tmp[567081](567084 call _cond_test call_tmp[662113]))
    if tmp[567081]
    {
      unknown tmp[567088] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662120] "expr temp" "maybe param" "maybe type" "temp"
      (662123 'move' call_tmp[662120](135801 call rank _mt[243] d[135793]))
      unknown call_tmp[662127] "expr temp" "maybe param" "maybe type" "temp"
      (662130 'move' call_tmp[662127](135805 call rank _mt[243] sd[135787]))
      unknown call_tmp[662132] "expr temp" "maybe param" "maybe type" "temp"
      (662135 'move' call_tmp[662132](135808 call == call_tmp[662120] call_tmp[662127]))
      (567090 'move' tmp[567088](426143 call isTrue call_tmp[662132]))
      (567095 'move' tmp[567080](567092 '_paramFoldLogical' tmp[567081] tmp[567088]))
    }
    {
      (567100 'move' tmp[567080](567097 '_paramFoldLogical' tmp[567081] 0))
    }
    (426129 'move' tmp[426118] tmp[567080])
    unknown call_tmp[662137] "expr temp" "maybe param" "maybe type" "temp"
    (662140 'move' call_tmp[662137](426131 call _cond_invalid tmp[426118]))
    if call_tmp[662137]
    {
      (426134 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567107] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567108] "maybe param" "temp"
    unknown call_tmp[662142] "expr temp" "maybe param" "maybe type" "temp"
    (662145 'move' call_tmp[662142](426119 call isTrue tmp[426118]))
    (567113 'move' tmp[567108](567111 call _cond_test call_tmp[662142]))
    if tmp[567108]
    {
      unknown tmp[567115] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662149] "expr temp" "maybe param" "maybe type" "temp"
      (662152 'move' call_tmp[662149](135813 call idxType _mt[243] sd[135787]))
      unknown call_tmp[662156] "expr temp" "maybe param" "maybe type" "temp"
      (662159 'move' call_tmp[662156](135817 call idxType _mt[243] d[135793]))
      unknown call_tmp[662161] "expr temp" "maybe param" "maybe type" "temp"
      (662164 'move' call_tmp[662161](135820 call == call_tmp[662149] call_tmp[662156]))
      (567117 'move' tmp[567115](426122 call isTrue call_tmp[662161]))
      (567122 'move' tmp[567107](567119 '_paramFoldLogical' tmp[567108] tmp[567115]))
    }
    {
      (567127 'move' tmp[567107](567124 '_paramFoldLogical' tmp[567108] 0))
    }
    (748367 call chpl_statementLevelSymbol tmp[567107])
  }
  function isCollapsedDimension[135884](arg r[135881]:range[64316](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518698] "RVV" "param" "temp"
    (518703 'move' ret[518698](518702 'deref' 0))
    (518700 return ret[518698])
  }
  function isCollapsedDimension[135896](arg r[135894]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[518707] "RVV" "param" "temp"
    (518712 'move' ret[518707](518711 'deref' 1))
    (518709 return ret[518707])
  }
  function chpl__anyStridable[135908](arg ranges[135906]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518716] "RVV" "param" "temp"
    {
      unknown i[135935] "dead at end of block" "insert auto destroy"
      (543147 'init var' i[135935] 0)
      (480571 'end of statement')
      unknown tmp[135936] "maybe param" "temp"
      unknown call_tmp[662168] "expr temp" "maybe param" "maybe type" "temp"
      (662171 'move' call_tmp[662168](135912 call size _mt[243] ranges[135906]))
      unknown call_tmp[662173] "expr temp" "maybe param" "maybe type" "temp"
      (662176 'move' call_tmp[662173](135916 call - call_tmp[662168] 1))
      (135948 'move' tmp[135936](135946 call chpl_compute_low_param_loop_bound 0 call_tmp[662173]))
      unknown tmp[135937] "maybe param" "temp"
      unknown call_tmp[662180] "expr temp" "maybe param" "maybe type" "temp"
      (662183 'move' call_tmp[662180](135955 call size _mt[243] ranges[135906]))
      unknown call_tmp[662185] "expr temp" "maybe param" "maybe type" "temp"
      (662188 'move' call_tmp[662185](135953 call - call_tmp[662180] 1))
      (135961 'move' tmp[135937](135959 call chpl_compute_high_param_loop_bound 0 call_tmp[662185]))
      unknown tmp[135938] "maybe param" "temp"
      (135964 'move' tmp[135938] 1)
      ParamForLoop[135966]
      { i[135935] tmp[135936] tmp[135937] tmp[135938]
        unknown call_tmp[662190] "expr temp" "maybe param" "maybe type" "temp"
        (662193 'move' call_tmp[662190](135923 call ranges[135906] i[135935]))
        unknown call_tmp[662197] "expr temp" "maybe param" "maybe type" "temp"
        (662200 'move' call_tmp[662197](135924 call stridable _mt[243] call_tmp[662190]))
        unknown call_tmp[662202] "expr temp" "maybe param" "maybe type" "temp"
        (662205 'move' call_tmp[662202](135930 call _cond_test call_tmp[662197]))
        if call_tmp[662202]
        {
          (518721 'move' ret[518716](518720 'deref' 1))
          gotoReturn _end_chpl__anyStridable[518714] _end_chpl__anyStridable[518714]
        }
      }
      label _unused_continueLabel[135940]
      label _breakLabel[135939]
    }
    (518726 'move' ret[518716](518725 'deref' 0))
    label _end_chpl__anyStridable[518714]
    (518718 return ret[518716])
  }
  function chpl__anyRankChangeStridable[135985](arg args[135983]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518730] "RVV" "param" "temp"
    {
      unknown i[136024] "dead at end of block" "insert auto destroy"
      (543149 'init var' i[136024] 0)
      (480574 'end of statement')
      unknown tmp[136025] "maybe param" "temp"
      unknown call_tmp[662209] "expr temp" "maybe param" "maybe type" "temp"
      (662212 'move' call_tmp[662209](135989 call size _mt[243] args[135983]))
      unknown call_tmp[662214] "expr temp" "maybe param" "maybe type" "temp"
      (662217 'move' call_tmp[662214](135993 call - call_tmp[662209] 1))
      (136037 'move' tmp[136025](136035 call chpl_compute_low_param_loop_bound 0 call_tmp[662214]))
      unknown tmp[136026] "maybe param" "temp"
      unknown call_tmp[662221] "expr temp" "maybe param" "maybe type" "temp"
      (662224 'move' call_tmp[662221](136044 call size _mt[243] args[135983]))
      unknown call_tmp[662226] "expr temp" "maybe param" "maybe type" "temp"
      (662229 'move' call_tmp[662226](136042 call - call_tmp[662221] 1))
      (136050 'move' tmp[136026](136048 call chpl_compute_high_param_loop_bound 0 call_tmp[662226]))
      unknown tmp[136027] "maybe param" "temp"
      (136053 'move' tmp[136027] 1)
      ParamForLoop[136055]
      { i[136024] tmp[136025] tmp[136026] tmp[136027]
        unknown call_tmp[662231] "expr temp" "maybe param" "maybe type" "temp"
        (662234 'move' call_tmp[662231](136001 call args[135983] i[136024]))
        unknown call_tmp[662236] "expr temp" "maybe param" "maybe type" "temp"
        (662239 'move' call_tmp[662236](136003 call isRangeValue call_tmp[662231]))
        unknown call_tmp[662241] "expr temp" "maybe param" "maybe type" "temp"
        (662244 'move' call_tmp[662241](136019 call _cond_test call_tmp[662236]))
        if call_tmp[662241]
        {
          unknown call_tmp[662246] "expr temp" "maybe param" "maybe type" "temp"
          (662249 'move' call_tmp[662246](136007 call args[135983] i[136024]))
          unknown call_tmp[662253] "expr temp" "maybe param" "maybe type" "temp"
          (662256 'move' call_tmp[662253](136008 call stridable _mt[243] call_tmp[662246]))
          unknown call_tmp[662258] "expr temp" "maybe param" "maybe type" "temp"
          (662261 'move' call_tmp[662258](136014 call _cond_test call_tmp[662253]))
          if call_tmp[662258]
          {
            (518735 'move' ret[518730](518734 'deref' 1))
            gotoReturn _end_chpl__anyRankChangeStridable[518728] _end_chpl__anyRankChangeStridable[518728]
          }
        }
      }
      label _unused_continueLabel[136029]
      label _breakLabel[136028]
    }
    (518740 'move' ret[518730](518739 'deref' 0))
    label _end_chpl__anyRankChangeStridable[518728]
    (518732 return ret[518730])
  }
  function chpl__countRanges[136074](arg arg[136072]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518744] "RVV" "param" "temp"
    unknown call_tmp[662263] "expr temp" "maybe param" "maybe type" "temp"
    (662266 'move' call_tmp[662263](136079 call isRangeValue arg[136072]))
    unknown call_tmp[662268] "expr temp" "maybe param" "maybe type" "temp"
    (662271 'move' call_tmp[662268](136081 call _cast int(64)[13] call_tmp[662263]))
    (518749 'move' ret[518744](518748 'deref' call_tmp[662268]))
    (518746 return ret[518744])
  }
  function chpl__countRanges[136092](arg arg[136090]:_any[178](?), arg args[136095]:_any[178](?) ...) param : _unknown[51]
  {
    unknown ret[518753] "RVV" "param" "temp"
    unknown call_tmp[662273] "expr temp" "maybe param" "maybe type" "temp"
    (662276 'move' call_tmp[662273](136101 call chpl__countRanges arg[136090]))
    unknown call_tmp[662278] "expr temp" "maybe param" "maybe type" "temp"
    (662281 'move' call_tmp[662278](136106 call chpl__countRanges(136104 'expand_tuple' args[136095])))
    unknown call_tmp[662283] "expr temp" "maybe param" "maybe type" "temp"
    (662286 'move' call_tmp[662283](136107 call + call_tmp[662273] call_tmp[662278]))
    (518758 'move' ret[518753](518757 'deref' call_tmp[662283]))
    (518755 return ret[518753])
  }
  function _validRankChangeArgs[136118](arg args[136116]:_any[178](?), arg idxType[136120]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518831] "RVV" "param" "temp"
    function _validRankChangeArg[136126](arg idxType[136124]:_any[178](?), arg r[136132]:range[64316](?)) param : _unknown[51]
    {
      unknown ret[518762] "RVV" "param" "temp"
      (518767 'move' ret[518762](518766 'deref' 1))
      (518764 return ret[518762])
    }
    function _validRankChangeArg[136146](arg idxType[136144]:_any[178](?), arg i[136149] :
    idxType[136144]) param : _unknown[51]
    {
      unknown ret[518771] "RVV" "param" "temp"
      (518776 'move' ret[518771](518775 'deref' 1))
      (518773 return ret[518771])
    }
    function _validRankChangeArg[136162](arg idxType[136160]:_any[178](?), arg x[136164]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518780] "RVV" "param" "temp"
      (518785 'move' ret[518780](518784 'deref' 0))
      (518782 return ret[518780])
    }
    function allValid[136174]() param : _unknown[51]
    {
      unknown ret[518789] "RVV" "param" "temp"
      {
        unknown dim[136205] "dead at end of block" "insert auto destroy"
        (543151 'init var' dim[136205] 0)
        (480582 'end of statement')
        unknown tmp[136206] "maybe param" "temp"
        unknown call_tmp[662290] "expr temp" "maybe param" "maybe type" "temp"
        (662293 'move' call_tmp[662290](136178 call size _mt[243] args[136116]))
        unknown call_tmp[662295] "expr temp" "maybe param" "maybe type" "temp"
        (662298 'move' call_tmp[662295](136182 call - call_tmp[662290] 1))
        (136218 'move' tmp[136206](136216 call chpl_compute_low_param_loop_bound 0 call_tmp[662295]))
        unknown tmp[136207] "maybe param" "temp"
        unknown call_tmp[662302] "expr temp" "maybe param" "maybe type" "temp"
        (662305 'move' call_tmp[662302](136225 call size _mt[243] args[136116]))
        unknown call_tmp[662307] "expr temp" "maybe param" "maybe type" "temp"
        (662310 'move' call_tmp[662307](136223 call - call_tmp[662302] 1))
        (136231 'move' tmp[136207](136229 call chpl_compute_high_param_loop_bound 0 call_tmp[662307]))
        unknown tmp[136208] "maybe param" "temp"
        (136234 'move' tmp[136208] 1)
        ParamForLoop[136236]
        { dim[136205] tmp[136206] tmp[136207] tmp[136208]
          {
            unknown call_tmp[662312] "expr temp" "maybe param" "maybe type" "temp"
            (662315 'move' call_tmp[662312](136192 call args[136116] dim[136205]))
            unknown call_tmp[662317] "expr temp" "maybe param" "maybe type" "temp"
            (662320 'move' call_tmp[662317](136193 call _validRankChangeArg idxType[136120] call_tmp[662312]))
            unknown call_tmp[662322] "expr temp" "maybe param" "maybe type" "temp"
            (662325 'move' call_tmp[662322](136194 call ! call_tmp[662317]))
            unknown call_tmp[662327] "expr temp" "maybe param" "maybe type" "temp"
            (662330 'move' call_tmp[662327](136199 call _cond_test call_tmp[662322]))
            if call_tmp[662327]
            {
              (518794 'move' ret[518789](518793 'deref' 0))
              gotoReturn _end_allValid[518787] _end_allValid[518787]
            }
          }
        }
        label _unused_continueLabel[136210]
        label _breakLabel[136209]
      }
      (518799 'move' ret[518789](518798 'deref' 1))
      label _end_allValid[518787]
      (518791 return ret[518789])
    }
    function oneRange[136253]() param : _unknown[51]
    {
      unknown ret[518803] "RVV" "param" "temp"
      {
        unknown dim[136281] "dead at end of block" "insert auto destroy"
        (543153 'init var' dim[136281] 0)
        (480585 'end of statement')
        unknown tmp[136282] "maybe param" "temp"
        unknown call_tmp[662334] "expr temp" "maybe param" "maybe type" "temp"
        (662337 'move' call_tmp[662334](136257 call size _mt[243] args[136116]))
        unknown call_tmp[662339] "expr temp" "maybe param" "maybe type" "temp"
        (662342 'move' call_tmp[662339](136261 call - call_tmp[662334] 1))
        (136294 'move' tmp[136282](136292 call chpl_compute_low_param_loop_bound 0 call_tmp[662339]))
        unknown tmp[136283] "maybe param" "temp"
        unknown call_tmp[662346] "expr temp" "maybe param" "maybe type" "temp"
        (662349 'move' call_tmp[662346](136301 call size _mt[243] args[136116]))
        unknown call_tmp[662351] "expr temp" "maybe param" "maybe type" "temp"
        (662354 'move' call_tmp[662351](136299 call - call_tmp[662346] 1))
        (136307 'move' tmp[136283](136305 call chpl_compute_high_param_loop_bound 0 call_tmp[662351]))
        unknown tmp[136284] "maybe param" "temp"
        (136310 'move' tmp[136284] 1)
        ParamForLoop[136312]
        { dim[136281] tmp[136282] tmp[136283] tmp[136284]
          {
            unknown call_tmp[662356] "expr temp" "maybe param" "maybe type" "temp"
            (662359 'move' call_tmp[662356](136269 call args[136116] dim[136281]))
            unknown call_tmp[662361] "expr temp" "maybe param" "maybe type" "temp"
            (662364 'move' call_tmp[662361](136271 call isRange call_tmp[662356]))
            unknown call_tmp[662366] "expr temp" "maybe param" "maybe type" "temp"
            (662369 'move' call_tmp[662366](136275 call _cond_test call_tmp[662361]))
            if call_tmp[662366]
            {
              (518808 'move' ret[518803](518807 'deref' 1))
              gotoReturn _end_oneRange[518801] _end_oneRange[518801]
            }
          }
        }
        label _unused_continueLabel[136286]
        label _breakLabel[136285]
      }
      (518813 'move' ret[518803](518812 'deref' 0))
      label _end_oneRange[518801]
      (518805 return ret[518803])
    }
    function oneNonRange[136329]() param : _unknown[51]
    {
      unknown ret[518817] "RVV" "param" "temp"
      {
        unknown dim[136359] "dead at end of block" "insert auto destroy"
        (543155 'init var' dim[136359] 0)
        (480588 'end of statement')
        unknown tmp[136360] "maybe param" "temp"
        unknown call_tmp[662373] "expr temp" "maybe param" "maybe type" "temp"
        (662376 'move' call_tmp[662373](136333 call size _mt[243] args[136116]))
        unknown call_tmp[662378] "expr temp" "maybe param" "maybe type" "temp"
        (662381 'move' call_tmp[662378](136337 call - call_tmp[662373] 1))
        (136372 'move' tmp[136360](136370 call chpl_compute_low_param_loop_bound 0 call_tmp[662378]))
        unknown tmp[136361] "maybe param" "temp"
        unknown call_tmp[662385] "expr temp" "maybe param" "maybe type" "temp"
        (662388 'move' call_tmp[662385](136379 call size _mt[243] args[136116]))
        unknown call_tmp[662390] "expr temp" "maybe param" "maybe type" "temp"
        (662393 'move' call_tmp[662390](136377 call - call_tmp[662385] 1))
        (136385 'move' tmp[136361](136383 call chpl_compute_high_param_loop_bound 0 call_tmp[662390]))
        unknown tmp[136362] "maybe param" "temp"
        (136388 'move' tmp[136362] 1)
        ParamForLoop[136390]
        { dim[136359] tmp[136360] tmp[136361] tmp[136362]
          {
            unknown call_tmp[662395] "expr temp" "maybe param" "maybe type" "temp"
            (662398 'move' call_tmp[662395](136345 call args[136116] dim[136359]))
            unknown call_tmp[662400] "expr temp" "maybe param" "maybe type" "temp"
            (662403 'move' call_tmp[662400](136347 call isRange call_tmp[662395]))
            unknown call_tmp[662405] "expr temp" "maybe param" "maybe type" "temp"
            (662408 'move' call_tmp[662405](136348 call ! call_tmp[662400]))
            unknown call_tmp[662410] "expr temp" "maybe param" "maybe type" "temp"
            (662413 'move' call_tmp[662410](136353 call _cond_test call_tmp[662405]))
            if call_tmp[662410]
            {
              (518822 'move' ret[518817](518821 'deref' 1))
              gotoReturn _end_oneNonRange[518815] _end_oneNonRange[518815]
            }
          }
        }
        label _unused_continueLabel[136364]
        label _breakLabel[136363]
      }
      (518827 'move' ret[518817](518826 'deref' 0))
      label _end_oneNonRange[518815]
      (518819 return ret[518817])
    }
    unknown tmp[426160] "maybe param" "temp"
    unknown tmp[426181] "maybe param" "temp"
    (426192 'move' tmp[426181](136407 call allValid))
    unknown call_tmp[662415] "expr temp" "maybe param" "maybe type" "temp"
    (662418 'move' call_tmp[662415](426194 call _cond_invalid tmp[426181]))
    if call_tmp[662415]
    {
      (426197 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567134] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567135] "maybe param" "temp"
    unknown call_tmp[662420] "expr temp" "maybe param" "maybe type" "temp"
    (662423 'move' call_tmp[662420](426182 call isTrue tmp[426181]))
    (567140 'move' tmp[567135](567138 call _cond_test call_tmp[662420]))
    if tmp[567135]
    {
      unknown tmp[567142] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662425] "expr temp" "maybe param" "maybe type" "temp"
      (662428 'move' call_tmp[662425](136410 call oneRange))
      (567144 'move' tmp[567142](426185 call isTrue call_tmp[662425]))
      (567149 'move' tmp[567134](567146 '_paramFoldLogical' tmp[567135] tmp[567142]))
    }
    {
      (567154 'move' tmp[567134](567151 '_paramFoldLogical' tmp[567135] 0))
    }
    (426171 'move' tmp[426160] tmp[567134])
    unknown call_tmp[662430] "expr temp" "maybe param" "maybe type" "temp"
    (662433 'move' call_tmp[662430](426173 call _cond_invalid tmp[426160]))
    if call_tmp[662430]
    {
      (426176 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567161] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567162] "maybe param" "temp"
    unknown call_tmp[662435] "expr temp" "maybe param" "maybe type" "temp"
    (662438 'move' call_tmp[662435](426161 call isTrue tmp[426160]))
    (567167 'move' tmp[567162](567165 call _cond_test call_tmp[662435]))
    if tmp[567162]
    {
      unknown tmp[567169] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662440] "expr temp" "maybe param" "maybe type" "temp"
      (662443 'move' call_tmp[662440](136415 call oneNonRange))
      (567171 'move' tmp[567169](426164 call isTrue call_tmp[662440]))
      (567176 'move' tmp[567161](567173 '_paramFoldLogical' tmp[567162] tmp[567169]))
    }
    {
      (567181 'move' tmp[567161](567178 '_paramFoldLogical' tmp[567162] 0))
    }
    (518836 'move' ret[518831](518835 'deref' tmp[567161]))
    (518833 return ret[518831])
  }
  function =[136428](ref arg a[136425]:_distribution[118979](?), arg b[136431]:_distribution[118979](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662447] "expr temp" "maybe param" "maybe type" "temp"
    (662450 'move' call_tmp[662447](136435 call _value _mt[243] a[136425]))
    unknown call_tmp[662452] "expr temp" "maybe param" "maybe type" "temp"
    (662455 'move' call_tmp[662452](136439 call == call_tmp[662447] nil[44]))
    unknown call_tmp[662457] "expr temp" "maybe param" "maybe type" "temp"
    (662460 'move' call_tmp[662457](136588 call _cond_test call_tmp[662452]))
    if call_tmp[662457]
    {
      unknown call_tmp[662464] "expr temp" "maybe param" "maybe type" "temp"
      (662467 'move' call_tmp[662464](136450 call(136446 call (partial) clone _mt[243] b[136431])))
      (136453 'move' a[136425](136452 call chpl__autoCopy call_tmp[662464]))
    }
    {
      unknown call_tmp[662471] "expr temp" "maybe param" "maybe type" "temp"
      (662474 'move' call_tmp[662471](136457 call _value _mt[243] a[136425]))
      unknown call_tmp[662478] "expr temp" "maybe param" "maybe type" "temp"
      (662481 'move' call_tmp[662478](136462 call _doms _mt[243] call_tmp[662471]))
      unknown call_tmp[662485] "expr temp" "maybe param" "maybe type" "temp"
      (662488 'move' call_tmp[662485](136465 call size _mt[243] call_tmp[662478]))
      unknown call_tmp[662490] "expr temp" "maybe param" "maybe type" "temp"
      (662493 'move' call_tmp[662490](136469 call == call_tmp[662485] 0))
      unknown call_tmp[662495] "expr temp" "maybe param" "maybe type" "temp"
      (662498 'move' call_tmp[662495](136584 call _cond_test call_tmp[662490]))
      if call_tmp[662495]
      {
        { scopeless type
          unknown call_type_tmp[492325] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662502] "expr temp" "maybe param" "maybe type" "temp"
          (662505 'move' call_tmp[662502](136472 call _value _mt[243] a[136425]))
          (492329 'move' call_type_tmp[492325](136475 'typeof' call_tmp[662502]))
        }
        { scopeless type
          unknown call_type_tmp[492331] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[662509] "expr temp" "maybe param" "maybe type" "temp"
          (662512 'move' call_tmp[662509](136477 call _value _mt[243] b[136431]))
          (492335 'move' call_type_tmp[492331](136480 'typeof' call_tmp[662509]))
        }
        unknown call_tmp[662514] "expr temp" "maybe param" "maybe type" "temp"
        (662517 'move' call_tmp[662514](136481 call != call_type_tmp[492325] call_type_tmp[492331]))
        unknown call_tmp[662519] "expr temp" "maybe param" "maybe type" "temp"
        (662522 'move' call_tmp[662519](136504 call _cond_test call_tmp[662514]))
        if call_tmp[662519]
        {
          (136502 call compilerError "type mismatch in distribution assignment")
        }
        unknown call_tmp[662526] "expr temp" "maybe param" "maybe type" "temp"
        (662529 'move' call_tmp[662526](136511 call _value _mt[243] a[136425]))
        unknown call_tmp[662533] "expr temp" "maybe param" "maybe type" "temp"
        (662536 'move' call_tmp[662533](136515 call _value _mt[243] b[136431]))
        unknown call_tmp[662538] "expr temp" "maybe param" "maybe type" "temp"
        (662541 'move' call_tmp[662538](136518 call == call_tmp[662526] call_tmp[662533]))
        unknown call_tmp[662543] "expr temp" "maybe param" "maybe type" "temp"
        (662546 'move' call_tmp[662543](136537 call _cond_test call_tmp[662538]))
        if call_tmp[662543]
        {
        }
        {
          unknown call_tmp[662550] "expr temp" "maybe param" "maybe type" "temp"
          (662553 'move' call_tmp[662550](136522 call _value _mt[243] a[136425]))
          unknown call_tmp[662559] "expr temp" "maybe param" "maybe type" "temp"
          (662562 'move' call_tmp[662559](136531 call _value _mt[243] b[136431]))
          (136535 call(136527 call (partial) dsiAssign _mt[243] call_tmp[662550]) call_tmp[662559])
        }
        unknown call_tmp[662566] "expr temp" "maybe param" "maybe type" "temp"
        (662569 'move' call_tmp[662566](136544 call _instance _mt[243] a[136425]))
        unknown call_tmp[662571] "expr temp" "maybe param" "maybe type" "temp"
        (662574 'move' call_tmp[662571](136548 call _isPrivatized call_tmp[662566]))
        unknown call_tmp[662576] "expr temp" "maybe param" "maybe type" "temp"
        (662579 'move' call_tmp[662576](136557 call _cond_test call_tmp[662571]))
        if call_tmp[662576]
        {
          unknown call_tmp[662583] "expr temp" "maybe param" "maybe type" "temp"
          (662586 'move' call_tmp[662583](136551 call _value _mt[243] a[136425]))
          (136555 call _reprivatize call_tmp[662583])
        }
      }
      {
        (136581 call halt "assignment to distributions with declared domains is not yet supported")
      }
    }
    (518838 return _void[55])
  }
  function =[136602](ref arg a[136599]:_domain[125914](?), arg b[136605]:_domain[125914](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662590] "expr temp" "maybe param" "maybe type" "temp"
    (662593 'move' call_tmp[662590](136609 call rank _mt[243] a[136599]))
    unknown call_tmp[662597] "expr temp" "maybe param" "maybe type" "temp"
    (662600 'move' call_tmp[662597](136613 call rank _mt[243] b[136605]))
    unknown call_tmp[662602] "expr temp" "maybe param" "maybe type" "temp"
    (662605 'move' call_tmp[662602](136616 call != call_tmp[662590] call_tmp[662597]))
    unknown call_tmp[662607] "expr temp" "maybe param" "maybe type" "temp"
    (662610 'move' call_tmp[662607](136639 call _cond_test call_tmp[662602]))
    if call_tmp[662607]
    {
      (136637 call compilerError "rank mismatch in domain assignment")
    }
    unknown call_tmp[662614] "expr temp" "maybe param" "maybe type" "temp"
    (662617 'move' call_tmp[662614](136646 call idxType _mt[243] a[136599]))
    unknown call_tmp[662621] "expr temp" "maybe param" "maybe type" "temp"
    (662624 'move' call_tmp[662621](136650 call idxType _mt[243] b[136605]))
    unknown call_tmp[662626] "expr temp" "maybe param" "maybe type" "temp"
    (662629 'move' call_tmp[662626](136653 call != call_tmp[662614] call_tmp[662621]))
    unknown call_tmp[662631] "expr temp" "maybe param" "maybe type" "temp"
    (662634 'move' call_tmp[662631](136676 call _cond_test call_tmp[662626]))
    if call_tmp[662631]
    {
      (136674 call compilerError "index type mismatch in domain assignment")
    }
    unknown tmp[426223] "maybe param" "temp"
    (426234 'move' tmp[426223](136684 call isRectangularDom a[136599]))
    unknown call_tmp[662636] "expr temp" "maybe param" "maybe type" "temp"
    (662639 'move' call_tmp[662636](426236 call _cond_invalid tmp[426223]))
    if call_tmp[662636]
    {
      (426239 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567188] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567189] "maybe param" "temp"
    unknown call_tmp[662641] "expr temp" "maybe param" "maybe type" "temp"
    (662644 'move' call_tmp[662641](426224 call isTrue tmp[426223]))
    (567194 'move' tmp[567189](567192 call _cond_test call_tmp[662641]))
    if tmp[567189]
    {
      unknown tmp[567196] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662646] "expr temp" "maybe param" "maybe type" "temp"
      (662649 'move' call_tmp[662646](136688 call isRectangularDom b[136605]))
      (567198 'move' tmp[567196](426227 call isTrue call_tmp[662646]))
      (567203 'move' tmp[567188](567200 '_paramFoldLogical' tmp[567189] tmp[567196]))
    }
    {
      (567208 'move' tmp[567188](567205 '_paramFoldLogical' tmp[567189] 0))
    }
    unknown call_tmp[662651] "expr temp" "maybe param" "maybe type" "temp"
    (662654 'move' call_tmp[662651](136731 call _cond_test tmp[567188]))
    if call_tmp[662651]
    {
      unknown tmp[426202] "maybe param" "temp"
      unknown call_tmp[662658] "expr temp" "maybe param" "maybe type" "temp"
      (662661 'move' call_tmp[662658](136692 call stridable _mt[243] a[136599]))
      (426213 'move' tmp[426202](136695 call ! call_tmp[662658]))
      unknown call_tmp[662663] "expr temp" "maybe param" "maybe type" "temp"
      (662666 'move' call_tmp[662663](426215 call _cond_invalid tmp[426202]))
      if call_tmp[662663]
      {
        (426218 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567215] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567216] "maybe param" "temp"
      unknown call_tmp[662668] "expr temp" "maybe param" "maybe type" "temp"
      (662671 'move' call_tmp[662668](426203 call isTrue tmp[426202]))
      (567221 'move' tmp[567216](567219 call _cond_test call_tmp[662668]))
      if tmp[567216]
      {
        unknown tmp[567223] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[662675] "expr temp" "maybe param" "maybe type" "temp"
        (662678 'move' call_tmp[662675](136698 call stridable _mt[243] b[136605]))
        (567225 'move' tmp[567223](426206 call isTrue call_tmp[662675]))
        (567230 'move' tmp[567215](567227 '_paramFoldLogical' tmp[567216] tmp[567223]))
      }
      {
        (567235 'move' tmp[567215](567232 '_paramFoldLogical' tmp[567216] 0))
      }
      unknown call_tmp[662680] "expr temp" "maybe param" "maybe type" "temp"
      (662683 'move' call_tmp[662680](136726 call _cond_test tmp[567215]))
      if call_tmp[662680]
      {
        (136724 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
      }
    }
    unknown call_tmp[662687] "expr temp" "maybe param" "maybe type" "temp"
    (662690 'move' call_tmp[662687](136737 call _instance _mt[243] a[136599]))
    (136747 call(136740 call (partial) dsiAssignDomain _mt[243] call_tmp[662687]) b[136605](lhsPrivate = 0))
    (480604 'end of statement')
    unknown call_tmp[662696] "expr temp" "maybe param" "maybe type" "temp"
    (662699 'move' call_tmp[662696](136751 call _instance _mt[243] a[136599]))
    unknown call_tmp[662701] "expr temp" "maybe param" "maybe type" "temp"
    (662704 'move' call_tmp[662701](136755 call _isPrivatized call_tmp[662696]))
    unknown call_tmp[662706] "expr temp" "maybe param" "maybe type" "temp"
    (662709 'move' call_tmp[662706](136765 call _cond_test call_tmp[662701]))
    if call_tmp[662706]
    {
      unknown call_tmp[662713] "expr temp" "maybe param" "maybe type" "temp"
      (662716 'move' call_tmp[662713](136758 call _instance _mt[243] a[136599]))
      (136762 call _reprivatize call_tmp[662713])
    }
    (518840 return _void[55])
  }
  function chpl__isLegalRectTupDomAssign[136775](arg d[136773]:_any[178](?), arg t[136777]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518880] "RVV" "param" "temp"
    function isRangeTuple[136783](arg a[136781]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[518862] "RVV" "param" "temp"
      function peelArgs[136789](arg first[136787]:_any[178](?), arg rest[136792]:_any[178](?) ...) param : _unknown[51]
      {
        unknown ret[518844] "RVV" "param" "temp"
        unknown tmp[567296] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567297] "maybe param" "temp"
        unknown call_tmp[662720] "expr temp" "maybe param" "maybe type" "temp"
        (662723 'move' call_tmp[662720](136796 call size _mt[243] rest[136792]))
        unknown call_tmp[662725] "expr temp" "maybe param" "maybe type" "temp"
        (662728 'move' call_tmp[662725](136800 call > call_tmp[662720] 1))
        (567302 'move' tmp[567297](567300 call _cond_test call_tmp[662725]))
        if tmp[567297]
        {
          unknown tmp[426244] "maybe param" "temp"
          (426255 'move' tmp[426244](136805 call isRange first[136787]))
          unknown call_tmp[662730] "expr temp" "maybe param" "maybe type" "temp"
          (662733 'move' call_tmp[662730](426257 call _cond_invalid tmp[426244]))
          if call_tmp[662730]
          {
            (426260 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567242] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567243] "maybe param" "temp"
          unknown call_tmp[662735] "expr temp" "maybe param" "maybe type" "temp"
          (662738 'move' call_tmp[662735](426245 call isTrue tmp[426244]))
          (567248 'move' tmp[567243](567246 call _cond_test call_tmp[662735]))
          if tmp[567243]
          {
            unknown tmp[567250] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662740] "expr temp" "maybe param" "maybe type" "temp"
            (662743 'move' call_tmp[662740](136810 call peelArgs(136808 'expand_tuple' rest[136792])))
            (567252 'move' tmp[567250](426248 call isTrue call_tmp[662740]))
            (567257 'move' tmp[567242](567254 '_paramFoldLogical' tmp[567243] tmp[567250]))
          }
          {
            (567262 'move' tmp[567242](567259 '_paramFoldLogical' tmp[567243] 0))
          }
          (567307 'move' tmp[567296](567304 '_paramFoldLogical' tmp[567297] tmp[567242]))
        }
        {
          unknown tmp[426265] "maybe param" "temp"
          (426276 'move' tmp[426265](136816 call isRange first[136787]))
          unknown call_tmp[662745] "expr temp" "maybe param" "maybe type" "temp"
          (662748 'move' call_tmp[662745](426278 call _cond_invalid tmp[426265]))
          if call_tmp[662745]
          {
            (426281 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567269] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[567270] "maybe param" "temp"
          unknown call_tmp[662750] "expr temp" "maybe param" "maybe type" "temp"
          (662753 'move' call_tmp[662750](426266 call isTrue tmp[426265]))
          (567275 'move' tmp[567270](567273 call _cond_test call_tmp[662750]))
          if tmp[567270]
          {
            unknown tmp[567277] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[662755] "expr temp" "maybe param" "maybe type" "temp"
            (662758 'move' call_tmp[662755](136821 call rest[136792] 0))
            unknown call_tmp[662760] "expr temp" "maybe param" "maybe type" "temp"
            (662763 'move' call_tmp[662760](136823 call isRange call_tmp[662755]))
            (567279 'move' tmp[567277](426269 call isTrue call_tmp[662760]))
            (567284 'move' tmp[567269](567281 '_paramFoldLogical' tmp[567270] tmp[567277]))
          }
          {
            (567289 'move' tmp[567269](567286 '_paramFoldLogical' tmp[567270] 0))
          }
          (567312 'move' tmp[567296](567309 '_paramFoldLogical' tmp[567297] tmp[567269]))
        }
        (518849 'move' ret[518844](518848 'deref' tmp[567296]))
        (518846 return ret[518844])
      }
      function peelArgs[136839](arg first[136837]:_any[178](?)) param : _unknown[51]
      {
        unknown ret[518853] "RVV" "param" "temp"
        unknown call_tmp[662765] "expr temp" "maybe param" "maybe type" "temp"
        (662768 'move' call_tmp[662765](136844 call isRange first[136837]))
        (518858 'move' ret[518853](518857 'deref' call_tmp[662765]))
        (518855 return ret[518853])
      }
      unknown tmp[567319] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567320] "maybe param" "temp"
      unknown call_tmp[662770] "expr temp" "maybe param" "maybe type" "temp"
      (662773 'move' call_tmp[662770](136853 call isTuple a[136781]))
      unknown call_tmp[662775] "expr temp" "maybe param" "maybe type" "temp"
      (662778 'move' call_tmp[662775](136854 call ! call_tmp[662770]))
      (567325 'move' tmp[567320](567323 call _cond_test call_tmp[662775]))
      if tmp[567320]
      {
        (567330 'move' tmp[567319](567327 '_paramFoldLogical' tmp[567320] 0))
      }
      {
        unknown tmp[567332] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (567334 'move' tmp[567332](136861 call peelArgs(136859 'expand_tuple' a[136781])))
        (567339 'move' tmp[567319](567336 '_paramFoldLogical' tmp[567320] tmp[567332]))
      }
      (518867 'move' ret[518862](518866 'deref' tmp[567319]))
      (518864 return ret[518862])
    }
    function strideSafe[136874](arg d[136872]:_any[178](?), arg rt[136876]:_any[178](?), param arg dim[136880]:int(64)[13] =
    0) param : _unknown[51]
    {
      unknown ret[518871] "RVV" "param" "temp"
      unknown tmp[567427] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567428] "maybe param" "temp"
      unknown call_tmp[662782] "expr temp" "maybe param" "maybe type" "temp"
      (662785 'move' call_tmp[662782](136886 call rank _mt[243] d[136872]))
      unknown call_tmp[662787] "expr temp" "maybe param" "maybe type" "temp"
      (662790 'move' call_tmp[662787](136890 call - call_tmp[662782] 1))
      unknown call_tmp[662792] "expr temp" "maybe param" "maybe type" "temp"
      (662795 'move' call_tmp[662792](136892 call == dim[136880] call_tmp[662787]))
      (567433 'move' tmp[567428](567431 call _cond_test call_tmp[662792]))
      if tmp[567428]
      {
        unknown tmp[426286] "maybe param" "temp"
        unknown call_tmp[662799] "expr temp" "maybe param" "maybe type" "temp"
        (662802 'move' call_tmp[662799](136900 call(136895 call (partial) dim _mt[243] d[136872]) dim[136880]))
        (426297 'move' tmp[426286](136901 call stridable _mt[243] call_tmp[662799]))
        unknown call_tmp[662806] "expr temp" "maybe param" "maybe type" "temp"
        (662809 'move' call_tmp[662806](426299 call _cond_invalid tmp[426286]))
        if call_tmp[662806]
        {
          (426302 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567346] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567347] "maybe param" "temp"
        unknown call_tmp[662811] "expr temp" "maybe param" "maybe type" "temp"
        (662814 'move' call_tmp[662811](426287 call isTrue tmp[426286]))
        (567352 'move' tmp[567347](567350 call _cond_test call_tmp[662811]))
        if tmp[567347]
        {
          (567357 'move' tmp[567346](567354 '_paramFoldLogical' tmp[567347] 1))
        }
        {
          unknown tmp[567359] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662816] "expr temp" "maybe param" "maybe type" "temp"
          (662819 'move' call_tmp[662816](136907 call rt[136876] dim[136880]))
          unknown call_tmp[662823] "expr temp" "maybe param" "maybe type" "temp"
          (662826 'move' call_tmp[662823](136908 call stridable _mt[243] call_tmp[662816]))
          unknown call_tmp[662828] "expr temp" "maybe param" "maybe type" "temp"
          (662831 'move' call_tmp[662828](136911 call ! call_tmp[662823]))
          (567361 'move' tmp[567359](426291 call isTrue call_tmp[662828]))
          (567366 'move' tmp[567346](567363 '_paramFoldLogical' tmp[567347] tmp[567359]))
        }
        (567438 'move' tmp[567427](567435 '_paramFoldLogical' tmp[567428] tmp[567346]))
      }
      {
        unknown tmp[426307] "maybe param" "temp"
        unknown tmp[426328] "maybe param" "temp"
        unknown call_tmp[662835] "expr temp" "maybe param" "maybe type" "temp"
        (662838 'move' call_tmp[662835](136921 call(136916 call (partial) dim _mt[243] d[136872]) dim[136880]))
        (426339 'move' tmp[426328](136922 call stridable _mt[243] call_tmp[662835]))
        unknown call_tmp[662842] "expr temp" "maybe param" "maybe type" "temp"
        (662845 'move' call_tmp[662842](426341 call _cond_invalid tmp[426328]))
        if call_tmp[662842]
        {
          (426344 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[567373] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567374] "maybe param" "temp"
        unknown call_tmp[662847] "expr temp" "maybe param" "maybe type" "temp"
        (662850 'move' call_tmp[662847](426329 call isTrue tmp[426328]))
        (567379 'move' tmp[567374](567377 call _cond_test call_tmp[662847]))
        if tmp[567374]
        {
          (567384 'move' tmp[567373](567381 '_paramFoldLogical' tmp[567374] 1))
        }
        {
          unknown tmp[567386] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662852] "expr temp" "maybe param" "maybe type" "temp"
          (662855 'move' call_tmp[662852](136928 call rt[136876] dim[136880]))
          unknown call_tmp[662859] "expr temp" "maybe param" "maybe type" "temp"
          (662862 'move' call_tmp[662859](136929 call stridable _mt[243] call_tmp[662852]))
          unknown call_tmp[662864] "expr temp" "maybe param" "maybe type" "temp"
          (662867 'move' call_tmp[662864](136932 call ! call_tmp[662859]))
          (567388 'move' tmp[567386](426333 call isTrue call_tmp[662864]))
          (567393 'move' tmp[567373](567390 '_paramFoldLogical' tmp[567374] tmp[567386]))
        }
        (426318 'move' tmp[426307] tmp[567373])
        unknown call_tmp[662869] "expr temp" "maybe param" "maybe type" "temp"
        (662872 'move' call_tmp[662869](426320 call _cond_invalid tmp[426307]))
        if call_tmp[662869]
        {
          (426323 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567400] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[567401] "maybe param" "temp"
        unknown call_tmp[662874] "expr temp" "maybe param" "maybe type" "temp"
        (662877 'move' call_tmp[662874](426308 call isTrue tmp[426307]))
        (567406 'move' tmp[567401](567404 call _cond_test call_tmp[662874]))
        if tmp[567401]
        {
          unknown tmp[567408] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[662879] "expr temp" "maybe param" "maybe type" "temp"
          (662882 'move' call_tmp[662879](136942 call + dim[136880] 1))
          unknown call_tmp[662884] "expr temp" "maybe param" "maybe type" "temp"
          (662887 'move' call_tmp[662884](136944 call strideSafe d[136872] rt[136876] call_tmp[662879]))
          (567410 'move' tmp[567408](426311 call isTrue call_tmp[662884]))
          (567415 'move' tmp[567400](567412 '_paramFoldLogical' tmp[567401] tmp[567408]))
        }
        {
          (567420 'move' tmp[567400](567417 '_paramFoldLogical' tmp[567401] 0))
        }
        (567443 'move' tmp[567427](567440 '_paramFoldLogical' tmp[567428] tmp[567400]))
      }
      (518876 'move' ret[518871](518875 'deref' tmp[567427]))
      (518873 return ret[518871])
    }
    unknown tmp[426349] "maybe param" "temp"
    unknown tmp[426370] "maybe param" "temp"
    (426381 'move' tmp[426370](136958 call isRangeTuple t[136777]))
    unknown call_tmp[662889] "expr temp" "maybe param" "maybe type" "temp"
    (662892 'move' call_tmp[662889](426383 call _cond_invalid tmp[426370]))
    if call_tmp[662889]
    {
      (426386 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567450] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567451] "maybe param" "temp"
    unknown call_tmp[662894] "expr temp" "maybe param" "maybe type" "temp"
    (662897 'move' call_tmp[662894](426371 call isTrue tmp[426370]))
    (567456 'move' tmp[567451](567454 call _cond_test call_tmp[662894]))
    if tmp[567451]
    {
      unknown tmp[567458] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662901] "expr temp" "maybe param" "maybe type" "temp"
      (662904 'move' call_tmp[662901](136960 call rank _mt[243] d[136773]))
      unknown call_tmp[662908] "expr temp" "maybe param" "maybe type" "temp"
      (662911 'move' call_tmp[662908](136964 call size _mt[243] t[136777]))
      unknown call_tmp[662913] "expr temp" "maybe param" "maybe type" "temp"
      (662916 'move' call_tmp[662913](136967 call == call_tmp[662901] call_tmp[662908]))
      (567460 'move' tmp[567458](426374 call isTrue call_tmp[662913]))
      (567465 'move' tmp[567450](567462 '_paramFoldLogical' tmp[567451] tmp[567458]))
    }
    {
      (567470 'move' tmp[567450](567467 '_paramFoldLogical' tmp[567451] 0))
    }
    (426360 'move' tmp[426349] tmp[567450])
    unknown call_tmp[662918] "expr temp" "maybe param" "maybe type" "temp"
    (662921 'move' call_tmp[662918](426362 call _cond_invalid tmp[426349]))
    if call_tmp[662918]
    {
      (426365 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567477] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567478] "maybe param" "temp"
    unknown call_tmp[662923] "expr temp" "maybe param" "maybe type" "temp"
    (662926 'move' call_tmp[662923](426350 call isTrue tmp[426349]))
    (567483 'move' tmp[567478](567481 call _cond_test call_tmp[662923]))
    if tmp[567478]
    {
      unknown tmp[567485] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[662928] "expr temp" "maybe param" "maybe type" "temp"
      (662931 'move' call_tmp[662928](136975 call strideSafe d[136773] t[136777]))
      (567487 'move' tmp[567485](426353 call isTrue call_tmp[662928]))
      (567492 'move' tmp[567477](567489 '_paramFoldLogical' tmp[567478] tmp[567485]))
    }
    {
      (567497 'move' tmp[567477](567494 '_paramFoldLogical' tmp[567478] 0))
    }
    (518885 'move' ret[518880](518884 'deref' tmp[567477]))
    (518882 return ret[518880])
  }
  function =[136988](ref arg a[136985]:_domain[125914](?), arg b[136991]:_tuple[56199](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662933] "expr temp" "maybe param" "maybe type" "temp"
    (662936 'move' call_tmp[662933](136998 call chpl__isLegalRectTupDomAssign a[136985] b[136991]))
    unknown call_tmp[662938] "expr temp" "maybe param" "maybe type" "temp"
    (662941 'move' call_tmp[662938](137082 call _cond_test call_tmp[662933]))
    if call_tmp[662938]
    {
      unknown call_tmp[662943] "expr temp" "maybe param" "maybe type" "temp"
      (662946 'move' call_tmp[662943](137003 call chpl__buildDomainExpr(137001 'expand_tuple' b[136991])))
      (137005 call = a[136985] call_tmp[662943])
    }
    {
      (137014 call(137010 call (partial) clear _mt[243] a[136985]))
      (480614 'end of statement')
      {
        unknown _indexOfInterest[137039] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[137040] "expr temp" "temp"
        unknown call_tmp[662952] "expr temp" "maybe param" "maybe type" "temp"
        (662955 'move' call_tmp[662952](137055 call size _mt[243] b[136991]))
        unknown call_tmp[662957] "expr temp" "maybe param" "maybe type" "temp"
        (662960 'move' call_tmp[662957](137059 call chpl_direct_counted_range_iter 0 call_tmp[662952]))
        (137049 'move' _iterator[137040](137047 call _getIterator call_tmp[662957]))
        Defer
        {
          {
            (137075 call _freeIterator _iterator[137040])
          }
        }
        { scopeless type
          (137064 'move' _indexOfInterest[137039](137061 call iteratorIndex _iterator[137040]))
        }
        ForLoop[137041]
        {
          unknown ind[137068] "index var" "insert auto destroy"
          (480616 'end of statement')
          (137070 'move' ind[137068] _indexOfInterest[137039])
          (480617 'end of statement' ind[137068])
          {
            unknown call_tmp[662964] "expr temp" "maybe param" "maybe type" "temp"
            (662967 'move' call_tmp[662964](137034 call b[136991] ind[137068]))
            (137036 call(137028 call (partial) add _mt[243] a[136985]) call_tmp[662964])
            (480619 'end of statement' ind[137068])
          }
          label _continueLabel[137044]
          _indexOfInterest[137039]
          _iterator[137040]
        }
        label _breakLabel[137045]
      }
    }
    (518887 return _void[55])
  }
  function =[137095](ref arg d[137092]:_domain[125914](?), arg r[137101]:range[64316](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662969] "expr temp" "maybe param" "maybe type" "temp"
    (662972 'move' call_tmp[662969](137107 call chpl__buildDomainExpr r[137101]))
    (137109 call = d[137092] call_tmp[662969])
    (518889 return _void[55])
  }
  function =[137121](ref arg a[137118]:_domain[125914](?), arg b[137123]:_any[178](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown call_tmp[662974] "expr temp" "maybe param" "maybe type" "temp"
    (662977 'move' call_tmp[662974](137128 call isRectangularDom a[137118]))
    unknown call_tmp[662979] "expr temp" "maybe param" "maybe type" "temp"
    (662982 'move' call_tmp[662979](137150 call _cond_test call_tmp[662974]))
    if call_tmp[662979]
    {
      (137148 call compilerError "Illegal assignment to a rectangular domain")
    }
    (137161 call(137157 call (partial) clear _mt[243] a[137118]))
    (480623 'end of statement')
    {
      unknown _indexOfInterest[137174] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137175] "expr temp" "temp"
      (137184 'move' _iterator[137175](137182 call _getIterator b[137123]))
      Defer
      {
        {
          (137200 call _freeIterator _iterator[137175])
        }
      }
      { scopeless type
        (137189 'move' _indexOfInterest[137174](137186 call iteratorIndex _iterator[137175]))
      }
      ForLoop[137176]
      {
        unknown ind[137193] "index var" "insert auto destroy"
        (480625 'end of statement')
        (137195 'move' ind[137193] _indexOfInterest[137174])
        (480626 'end of statement' ind[137193])
        {
          (137171 call(137166 call (partial) add _mt[243] a[137118]) ind[137193])
          (480628 'end of statement' ind[137193])
        }
        label _continueLabel[137179]
        _indexOfInterest[137174]
        _iterator[137175]
      }
      label _breakLabel[137180]
    }
    (518891 return _void[55])
  }
  function chpl__serializeAssignment[137217](arg a[137214]:_array[133600](?), arg b[137219]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518895] "RVV" "param" "temp"
    unknown tmp[426391] "maybe param" "temp"
    unknown call_tmp[662990] "expr temp" "maybe param" "maybe type" "temp"
    (662993 'move' call_tmp[662990](137222 call rank _mt[243] a[137214]))
    (426402 'move' tmp[426391](137226 call != call_tmp[662990] 1))
    unknown call_tmp[662995] "expr temp" "maybe param" "maybe type" "temp"
    (662998 'move' call_tmp[662995](426404 call _cond_invalid tmp[426391]))
    if call_tmp[662995]
    {
      (426407 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567504] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567505] "maybe param" "temp"
    unknown call_tmp[663000] "expr temp" "maybe param" "maybe type" "temp"
    (663003 'move' call_tmp[663000](426392 call isTrue tmp[426391]))
    (567510 'move' tmp[567505](567508 call _cond_test call_tmp[663000]))
    if tmp[567505]
    {
      unknown tmp[567512] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663005] "expr temp" "maybe param" "maybe type" "temp"
      (663008 'move' call_tmp[663005](137231 call isRange b[137219]))
      (567514 'move' tmp[567512](426395 call isTrue call_tmp[663005]))
      (567519 'move' tmp[567504](567516 '_paramFoldLogical' tmp[567505] tmp[567512]))
    }
    {
      (567524 'move' tmp[567504](567521 '_paramFoldLogical' tmp[567505] 0))
    }
    unknown call_tmp[663010] "expr temp" "maybe param" "maybe type" "temp"
    (663013 'move' call_tmp[663010](137237 call _cond_test tmp[567504]))
    if call_tmp[663010]
    {
      (518900 'move' ret[518895](518899 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518893] _end_chpl__serializeAssignment[518893]
    }
    unknown tmp[426412] "maybe param" "temp"
    unknown tmp[426433] "maybe param" "temp"
    unknown tmp[426454] "maybe param" "temp"
    unknown call_tmp[663015] "expr temp" "maybe param" "maybe type" "temp"
    (663018 'move' call_tmp[663015](137246 call isRectangularArr a[137214]))
    (426465 'move' tmp[426454](137247 call ! call_tmp[663015]))
    unknown call_tmp[663020] "expr temp" "maybe param" "maybe type" "temp"
    (663023 'move' call_tmp[663020](426467 call _cond_invalid tmp[426454]))
    if call_tmp[663020]
    {
      (426470 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567531] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567532] "maybe param" "temp"
    unknown call_tmp[663025] "expr temp" "maybe param" "maybe type" "temp"
    (663028 'move' call_tmp[663025](426455 call isTrue tmp[426454]))
    (567537 'move' tmp[567532](567535 call _cond_test call_tmp[663025]))
    if tmp[567532]
    {
      unknown tmp[567539] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663030] "expr temp" "maybe param" "maybe type" "temp"
      (663033 'move' call_tmp[663030](137252 call isAssociativeArr a[137214]))
      unknown call_tmp[663035] "expr temp" "maybe param" "maybe type" "temp"
      (663038 'move' call_tmp[663035](137253 call ! call_tmp[663030]))
      (567541 'move' tmp[567539](426458 call isTrue call_tmp[663035]))
      (567546 'move' tmp[567531](567543 '_paramFoldLogical' tmp[567532] tmp[567539]))
    }
    {
      (567551 'move' tmp[567531](567548 '_paramFoldLogical' tmp[567532] 0))
    }
    (426444 'move' tmp[426433] tmp[567531])
    unknown call_tmp[663040] "expr temp" "maybe param" "maybe type" "temp"
    (663043 'move' call_tmp[663040](426446 call _cond_invalid tmp[426433]))
    if call_tmp[663040]
    {
      (426449 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567558] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567559] "maybe param" "temp"
    unknown call_tmp[663045] "expr temp" "maybe param" "maybe type" "temp"
    (663048 'move' call_tmp[663045](426434 call isTrue tmp[426433]))
    (567564 'move' tmp[567559](567562 call _cond_test call_tmp[663045]))
    if tmp[567559]
    {
      unknown tmp[567566] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663050] "expr temp" "maybe param" "maybe type" "temp"
      (663053 'move' call_tmp[663050](137260 call isSparseArr a[137214]))
      unknown call_tmp[663055] "expr temp" "maybe param" "maybe type" "temp"
      (663058 'move' call_tmp[663055](137261 call ! call_tmp[663050]))
      (567568 'move' tmp[567566](426437 call isTrue call_tmp[663055]))
      (567573 'move' tmp[567558](567570 '_paramFoldLogical' tmp[567559] tmp[567566]))
    }
    {
      (567578 'move' tmp[567558](567575 '_paramFoldLogical' tmp[567559] 0))
    }
    (426423 'move' tmp[426412] tmp[567558])
    unknown call_tmp[663060] "expr temp" "maybe param" "maybe type" "temp"
    (663063 'move' call_tmp[663060](426425 call _cond_invalid tmp[426412]))
    if call_tmp[663060]
    {
      (426428 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567666] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567667] "maybe param" "temp"
    unknown call_tmp[663065] "expr temp" "maybe param" "maybe type" "temp"
    (663068 'move' call_tmp[663065](426413 call isTrue tmp[426412]))
    (567672 'move' tmp[567667](567670 call _cond_test call_tmp[663065]))
    if tmp[567667]
    {
      (567677 'move' tmp[567666](567674 '_paramFoldLogical' tmp[567667] 1))
    }
    {
      unknown tmp[426475] "maybe param" "temp"
      unknown tmp[426496] "maybe param" "temp"
      unknown tmp[426517] "maybe param" "temp"
      (426528 'move' tmp[426517](137268 call isArray b[137219]))
      unknown call_tmp[663070] "expr temp" "maybe param" "maybe type" "temp"
      (663073 'move' call_tmp[663070](426530 call _cond_invalid tmp[426517]))
      if call_tmp[663070]
      {
        (426533 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567585] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567586] "maybe param" "temp"
      unknown call_tmp[663075] "expr temp" "maybe param" "maybe type" "temp"
      (663078 'move' call_tmp[663075](426518 call isTrue tmp[426517]))
      (567591 'move' tmp[567586](567589 call _cond_test call_tmp[663075]))
      if tmp[567586]
      {
        unknown tmp[567593] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663080] "expr temp" "maybe param" "maybe type" "temp"
        (663083 'move' call_tmp[663080](137272 call isRectangularArr b[137219]))
        unknown call_tmp[663085] "expr temp" "maybe param" "maybe type" "temp"
        (663088 'move' call_tmp[663085](137273 call ! call_tmp[663080]))
        (567595 'move' tmp[567593](426521 call isTrue call_tmp[663085]))
        (567600 'move' tmp[567585](567597 '_paramFoldLogical' tmp[567586] tmp[567593]))
      }
      {
        (567605 'move' tmp[567585](567602 '_paramFoldLogical' tmp[567586] 0))
      }
      (426507 'move' tmp[426496] tmp[567585])
      unknown call_tmp[663090] "expr temp" "maybe param" "maybe type" "temp"
      (663093 'move' call_tmp[663090](426509 call _cond_invalid tmp[426496]))
      if call_tmp[663090]
      {
        (426512 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567612] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567613] "maybe param" "temp"
      unknown call_tmp[663095] "expr temp" "maybe param" "maybe type" "temp"
      (663098 'move' call_tmp[663095](426497 call isTrue tmp[426496]))
      (567618 'move' tmp[567613](567616 call _cond_test call_tmp[663095]))
      if tmp[567613]
      {
        unknown tmp[567620] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663100] "expr temp" "maybe param" "maybe type" "temp"
        (663103 'move' call_tmp[663100](137280 call isAssociativeArr b[137219]))
        unknown call_tmp[663105] "expr temp" "maybe param" "maybe type" "temp"
        (663108 'move' call_tmp[663105](137281 call ! call_tmp[663100]))
        (567622 'move' tmp[567620](426500 call isTrue call_tmp[663105]))
        (567627 'move' tmp[567612](567624 '_paramFoldLogical' tmp[567613] tmp[567620]))
      }
      {
        (567632 'move' tmp[567612](567629 '_paramFoldLogical' tmp[567613] 0))
      }
      (426486 'move' tmp[426475] tmp[567612])
      unknown call_tmp[663110] "expr temp" "maybe param" "maybe type" "temp"
      (663113 'move' call_tmp[663110](426488 call _cond_invalid tmp[426475]))
      if call_tmp[663110]
      {
        (426491 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[567639] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567640] "maybe param" "temp"
      unknown call_tmp[663115] "expr temp" "maybe param" "maybe type" "temp"
      (663118 'move' call_tmp[663115](426476 call isTrue tmp[426475]))
      (567645 'move' tmp[567640](567643 call _cond_test call_tmp[663115]))
      if tmp[567640]
      {
        unknown tmp[567647] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663120] "expr temp" "maybe param" "maybe type" "temp"
        (663123 'move' call_tmp[663120](137288 call isSparseArr b[137219]))
        unknown call_tmp[663125] "expr temp" "maybe param" "maybe type" "temp"
        (663128 'move' call_tmp[663125](137289 call ! call_tmp[663120]))
        (567649 'move' tmp[567647](426479 call isTrue call_tmp[663125]))
        (567654 'move' tmp[567639](567651 '_paramFoldLogical' tmp[567640] tmp[567647]))
      }
      {
        (567659 'move' tmp[567639](567656 '_paramFoldLogical' tmp[567640] 0))
      }
      unknown tmp[567679] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (567681 'move' tmp[567679](426417 call isTrue tmp[567639]))
      (567686 'move' tmp[567666](567683 '_paramFoldLogical' tmp[567667] tmp[567679]))
    }
    unknown call_tmp[663130] "expr temp" "maybe param" "maybe type" "temp"
    (663133 'move' call_tmp[663130](137298 call _cond_test tmp[567666]))
    if call_tmp[663130]
    {
      (518905 'move' ret[518895](518904 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[518893] _end_chpl__serializeAssignment[518893]
    }
    (518910 'move' ret[518895](518909 'deref' 0))
    label _end_chpl__serializeAssignment[518893]
    (518897 return ret[518895])
  }
  function chpl__compatibleForBulkTransfer[137316](arg a[137313]:_array[133600](?), arg b[137321]:_array[133600](?), param arg kind[137325]:_tElt[137999]) param : _unknown[51]
  {
    unknown ret[518914] "RVV" "param" "temp"
    unknown call_tmp[663135] "expr temp" "maybe param" "maybe type" "temp"
    (663138 'move' call_tmp[663135](137329 call ! useBulkTransfer[113734]))
    unknown call_tmp[663140] "expr temp" "maybe param" "maybe type" "temp"
    (663143 'move' call_tmp[663140](137334 call _cond_test call_tmp[663135]))
    if call_tmp[663140]
    {
      (518919 'move' ret[518914](518918 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518912] _end_chpl__compatibleForBulkTransfer[518912]
    }
    unknown call_tmp[663147] "expr temp" "maybe param" "maybe type" "temp"
    (663150 'move' call_tmp[663147](137341 call eltType _mt[243] a[137313]))
    unknown call_tmp[663154] "expr temp" "maybe param" "maybe type" "temp"
    (663157 'move' call_tmp[663154](137345 call eltType _mt[243] b[137321]))
    unknown call_tmp[663159] "expr temp" "maybe param" "maybe type" "temp"
    (663162 'move' call_tmp[663159](137348 call != call_tmp[663147] call_tmp[663154]))
    unknown call_tmp[663164] "expr temp" "maybe param" "maybe type" "temp"
    (663167 'move' call_tmp[663164](137353 call _cond_test call_tmp[663159]))
    if call_tmp[663164]
    {
      (518924 'move' ret[518914](518923 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518912] _end_chpl__compatibleForBulkTransfer[518912]
    }
    unknown call_tmp[663169] "expr temp" "maybe param" "maybe type" "temp"
    (663172 'move' call_tmp[663169](137363 call == kind[137325] move[137993]))
    unknown call_tmp[663174] "expr temp" "maybe param" "maybe type" "temp"
    (663177 'move' call_tmp[663174](137368 call _cond_test call_tmp[663169]))
    if call_tmp[663174]
    {
      (518929 'move' ret[518914](518928 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518912] _end_chpl__compatibleForBulkTransfer[518912]
    }
    unknown tmp[426538] "maybe param" "temp"
    (426549 'move' tmp[426538](137380 call == kind[137325] initCopy[137995]))
    unknown call_tmp[663179] "expr temp" "maybe param" "maybe type" "temp"
    (663182 'move' call_tmp[663179](426551 call _cond_invalid tmp[426538]))
    if call_tmp[663179]
    {
      (426554 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567693] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567694] "maybe param" "temp"
    unknown call_tmp[663184] "expr temp" "maybe param" "maybe type" "temp"
    (663187 'move' call_tmp[663184](426539 call isTrue tmp[426538]))
    (567699 'move' tmp[567694](567697 call _cond_test call_tmp[663184]))
    if tmp[567694]
    {
      unknown tmp[567701] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663191] "expr temp" "maybe param" "maybe type" "temp"
      (663194 'move' call_tmp[663191](137384 call eltType _mt[243] a[137313]))
      unknown call_tmp[663196] "expr temp" "maybe param" "maybe type" "temp"
      (663199 'move' call_tmp[663196](137388 call isConstCopyableType call_tmp[663191]))
      (567703 'move' tmp[567701](426542 call isTrue call_tmp[663196]))
      (567708 'move' tmp[567693](567705 '_paramFoldLogical' tmp[567694] tmp[567701]))
    }
    {
      (567713 'move' tmp[567693](567710 '_paramFoldLogical' tmp[567694] 0))
    }
    unknown call_tmp[663201] "expr temp" "maybe param" "maybe type" "temp"
    (663204 'move' call_tmp[663201](137394 call _cond_test tmp[567693]))
    if call_tmp[663201]
    {
      (518934 'move' ret[518914](518933 'deref' 1))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518912] _end_chpl__compatibleForBulkTransfer[518912]
    }
    unknown call_tmp[663208] "expr temp" "maybe param" "maybe type" "temp"
    (663211 'move' call_tmp[663208](137401 call eltType _mt[243] a[137313]))
    unknown call_tmp[663213] "expr temp" "maybe param" "maybe type" "temp"
    (663216 'move' call_tmp[663213](137405 call chpl__supportedDataTypeForBulkTransfer call_tmp[663208]))
    unknown call_tmp[663218] "expr temp" "maybe param" "maybe type" "temp"
    (663221 'move' call_tmp[663218](137406 call ! call_tmp[663213]))
    unknown call_tmp[663223] "expr temp" "maybe param" "maybe type" "temp"
    (663226 'move' call_tmp[663223](137411 call _cond_test call_tmp[663218]))
    if call_tmp[663223]
    {
      (518939 'move' ret[518914](518938 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[518912] _end_chpl__compatibleForBulkTransfer[518912]
    }
    (518944 'move' ret[518914](518943 'deref' 1))
    label _end_chpl__compatibleForBulkTransfer[518912]
    (518916 return ret[518914])
  }
  function chpl__supportedDataTypeForBulkTransfer[137425](arg t[137423]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[518948] "RVV" "param" "temp"
    unknown tmp[426580] "maybe param" "temp"
    (426591 'move' tmp[426580](354360 'is_subtype' borrowed[211](?) t[137423]))
    unknown call_tmp[663228] "expr temp" "maybe param" "maybe type" "temp"
    (663231 'move' call_tmp[663228](426593 call _cond_invalid tmp[426580]))
    if call_tmp[663228]
    {
      (426596 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567720] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567721] "maybe param" "temp"
    unknown call_tmp[663233] "expr temp" "maybe param" "maybe type" "temp"
    (663236 'move' call_tmp[663233](426581 call isTrue tmp[426580]))
    (567726 'move' tmp[567721](567724 call _cond_test call_tmp[663233]))
    if tmp[567721]
    {
      (567731 'move' tmp[567720](567728 '_paramFoldLogical' tmp[567721] 1))
    }
    {
      unknown tmp[567733] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663238] "expr temp" "maybe param" "maybe type" "temp"
      (663241 'move' call_tmp[663238](354361 'is_subtype' unmanaged[220](?) t[137423]))
      (567735 'move' tmp[567733](426585 call isTrue call_tmp[663238]))
      (567740 'move' tmp[567720](567737 '_paramFoldLogical' tmp[567721] tmp[567733]))
    }
    unknown call_tmp[663243] "expr temp" "maybe param" "maybe type" "temp"
    (663246 'move' call_tmp[663243](137489 call _cond_test tmp[567720]))
    if call_tmp[663243]
    {
      (518953 'move' ret[518948](518952 'deref' 0))
      gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518946] _end_chpl__supportedDataTypeForBulkTransfer[518946]
    }
    {
      unknown tmp[426559] "maybe param" "temp"
      (426570 'move' tmp[426559](137446 call isRecordType t[137423]))
      unknown call_tmp[663248] "expr temp" "maybe param" "maybe type" "temp"
      (663251 'move' call_tmp[663248](426572 call _cond_invalid tmp[426559]))
      if call_tmp[663248]
      {
        (426575 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[567747] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[567748] "maybe param" "temp"
      unknown call_tmp[663253] "expr temp" "maybe param" "maybe type" "temp"
      (663256 'move' call_tmp[663253](426560 call isTrue tmp[426559]))
      (567753 'move' tmp[567748](567751 call _cond_test call_tmp[663253]))
      if tmp[567748]
      {
        (567758 'move' tmp[567747](567755 '_paramFoldLogical' tmp[567748] 1))
      }
      {
        unknown tmp[567760] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[663258] "expr temp" "maybe param" "maybe type" "temp"
        (663261 'move' call_tmp[663258](137450 call isTupleType t[137423]))
        (567762 'move' tmp[567760](426564 call isTrue call_tmp[663258]))
        (567767 'move' tmp[567747](567764 '_paramFoldLogical' tmp[567748] tmp[567760]))
      }
      unknown call_tmp[663263] "expr temp" "maybe param" "maybe type" "temp"
      (663266 'move' call_tmp[663263](137484 call _cond_test tmp[567747]))
      if call_tmp[663263]
      {
        unknown call_tmp[663268] "expr temp" "maybe param" "maybe type" "temp"
        (663271 'move' call_tmp[663268](137456 call isPODType t[137423]))
        (518958 'move' ret[518948](518957 'deref' call_tmp[663268]))
        gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518946] _end_chpl__supportedDataTypeForBulkTransfer[518946]
      }
      {
        unknown call_tmp[663273] "expr temp" "maybe param" "maybe type" "temp"
        (663276 'move' call_tmp[663273](137463 call isUnionType t[137423]))
        unknown call_tmp[663278] "expr temp" "maybe param" "maybe type" "temp"
        (663281 'move' call_tmp[663278](137480 call _cond_test call_tmp[663273]))
        if call_tmp[663278]
        {
          (518963 'move' ret[518948](518962 'deref' 0))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518946] _end_chpl__supportedDataTypeForBulkTransfer[518946]
        }
        {
          unknown x[137469] "dead at end of block" "insert auto destroy" "unsafe"
          (543157 'default init var' x[137469] t[137423])
          (137472 'end of statement')
          unknown call_tmp[663283] "expr temp" "maybe param" "maybe type" "temp"
          (663286 'move' call_tmp[663283](137477 call chpl__supportedDataTypeForBulkTransfer x[137469]))
          (518968 'move' ret[518948](518967 'deref' call_tmp[663283]))
          gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[518946] _end_chpl__supportedDataTypeForBulkTransfer[518946]
          (480649 'end of statement' x[137469])
        }
      }
    }
    label _end_chpl__supportedDataTypeForBulkTransfer[518946]
    (518950 return ret[518948])
  }
  function chpl__supportedDataTypeForBulkTransfer[137503](arg x[137500]:string[26]) param : _unknown[51]
  {
    unknown ret[518974] "RVV" "param" "temp"
    (518979 'move' ret[518974](518978 'deref' 0))
    (518976 return ret[518974])
  }
  function chpl__supportedDataTypeForBulkTransfer[137517](arg x[137514]:bytes[24]) param : _unknown[51]
  {
    unknown ret[518983] "RVV" "param" "temp"
    (518988 'move' ret[518983](518987 'deref' 0))
    (518985 return ret[518983])
  }
  function chpl__supportedDataTypeForBulkTransfer[137531](arg x[137528]:_syncvar[84948](?)) param : _unknown[51]
  {
    unknown ret[518992] "RVV" "param" "temp"
    (518997 'move' ret[518992](518996 'deref' 0))
    (518994 return ret[518992])
  }
  function chpl__supportedDataTypeForBulkTransfer[137545](arg x[137542]:_singlevar[87257](?)) param : _unknown[51]
  {
    unknown ret[519001] "RVV" "param" "temp"
    (519006 'move' ret[519001](519005 'deref' 0))
    (519003 return ret[519001])
  }
  function chpl__supportedDataTypeForBulkTransfer[137559](arg x[137556]:_domain[125914](?)) param : _unknown[51]
  {
    unknown ret[519010] "RVV" "param" "temp"
    (519015 'move' ret[519010](519014 'deref' 0))
    (519012 return ret[519010])
  }
  function chpl__supportedDataTypeForBulkTransfer[137575](arg x[137572]:_array[133600](?)) param : _unknown[51]
  {
    unknown ret[519019] "RVV" "param" "temp"
    (519024 'move' ret[519019](519023 'deref' 0))
    (519021 return ret[519019])
  }
  function chpl__supportedDataTypeForBulkTransfer[137589](arg x[137586]:_distribution[118979](?)) param : _unknown[51]
  {
    unknown ret[519028] "RVV" "param" "temp"
    (519033 'move' ret[519028](519032 'deref' 1))
    (519030 return ret[519028])
  }
  function chpl__supportedDataTypeForBulkTransfer[137603](arg x[137600]:locale[28]) param : _unknown[51]
  {
    unknown ret[519037] "RVV" "param" "temp"
    (519042 'move' ret[519037](519041 'deref' 1))
    (519039 return ret[519037])
  }
  function chpl__supportedDataTypeForBulkTransfer[137617](arg x[137614]:chpl_anycomplex[184](?)) param : _unknown[51]
  {
    unknown ret[519046] "RVV" "param" "temp"
    (519051 'move' ret[519046](519050 'deref' 1))
    (519048 return ret[519046])
  }
  function chpl__supportedDataTypeForBulkTransfer[137632](arg x[137629]:object[22]) param : _unknown[51]
  {
    unknown ret[519055] "RVV" "param" "temp"
    (519060 'move' ret[519055](519059 'deref' 0))
    (519057 return ret[519055])
  }
  function chpl__supportedDataTypeForBulkTransfer[137644](arg x[137642]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[519064] "RVV" "param" "temp"
    (519069 'move' ret[519064](519068 'deref' 1))
    (519066 return ret[519064])
  }
  function checkArrayShapesUponAssignment[137660](arg a[137657]:_array[133600](?), arg b[137665]:_array[133600](?)) : _unknown[51] "no doc" "no return value for void"
  {
    unknown tmp[426601] "maybe param" "temp"
    (426612 'move' tmp[426601](137671 call isRectangularArr a[137657]))
    unknown call_tmp[663288] "expr temp" "maybe param" "maybe type" "temp"
    (663291 'move' call_tmp[663288](426614 call _cond_invalid tmp[426601]))
    if call_tmp[663288]
    {
      (426617 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567774] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567775] "maybe param" "temp"
    unknown call_tmp[663293] "expr temp" "maybe param" "maybe type" "temp"
    (663296 'move' call_tmp[663293](426602 call isTrue tmp[426601]))
    (567780 'move' tmp[567775](567778 call _cond_test call_tmp[663293]))
    if tmp[567775]
    {
      unknown tmp[567782] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663298] "expr temp" "maybe param" "maybe type" "temp"
      (663301 'move' call_tmp[663298](137675 call isRectangularArr b[137665]))
      (567784 'move' tmp[567782](426605 call isTrue call_tmp[663298]))
      (567789 'move' tmp[567774](567786 '_paramFoldLogical' tmp[567775] tmp[567782]))
    }
    {
      (567794 'move' tmp[567774](567791 '_paramFoldLogical' tmp[567775] 0))
    }
    unknown call_tmp[663303] "expr temp" "maybe param" "maybe type" "temp"
    (663306 'move' call_tmp[663303](137851 call _cond_test tmp[567774]))
    if call_tmp[663303]
    {
      unknown call_tmp[663310] "expr temp" "maybe param" "maybe type" "temp"
      (663313 'move' call_tmp[663310](137679 call _value _mt[243] a[137657]))
      unknown call_tmp[663317] "expr temp" "maybe param" "maybe type" "temp"
      (663320 'move' call_tmp[663317](137682 call dom _mt[243] call_tmp[663310]))
      unknown call_tmp[663324] "maybe param" "maybe type" "temp"
      (663327 'move' call_tmp[663324](137689 call(137685 call (partial) dsiDims _mt[243] call_tmp[663317])))
      const aDims[137690] "dead at end of block" "const" "insert auto destroy"
      (543159 'init var' aDims[137690] call_tmp[663324])
      unknown call_tmp[663331] "expr temp" "maybe param" "maybe type" "temp"
      (663334 'move' call_tmp[663331](137694 call _value _mt[243] b[137665]))
      unknown call_tmp[663338] "expr temp" "maybe param" "maybe type" "temp"
      (663341 'move' call_tmp[663338](137697 call dom _mt[243] call_tmp[663331]))
      unknown call_tmp[663345] "maybe param" "maybe type" "temp"
      (663348 'move' call_tmp[663345](137704 call(137700 call (partial) dsiDims _mt[243] call_tmp[663338])))
      const bDims[137705] "dead at end of block" "const" "insert auto destroy"
      (543161 'init var' bDims[137705] call_tmp[663345])
      (137708 'end of statement')
      unknown call_tmp[663352] "expr temp" "maybe param" "maybe type" "temp"
      (663355 'move' call_tmp[663352](137712 call size _mt[243] aDims[137690]))
      unknown call_tmp[663359] "expr temp" "maybe param" "maybe type" "temp"
      (663362 'move' call_tmp[663359](137716 call size _mt[243] bDims[137705]))
      unknown call_tmp[663364] "expr temp" "maybe param" "maybe type" "temp"
      (663367 'move' call_tmp[663364](137719 call == call_tmp[663352] call_tmp[663359]))
      (137722 call compilerAssert call_tmp[663364])
      (480663 'end of statement' aDims[137690] bDims[137705])
      {
        unknown i[137810] "dead at end of block" "insert auto destroy"
        (543163 'init var' i[137810] 0)
        (480666 'end of statement')
        unknown tmp[137811] "maybe param" "temp"
        unknown call_tmp[663371] "expr temp" "maybe param" "maybe type" "temp"
        (663374 'move' call_tmp[663371](137726 call size _mt[243] aDims[137690]))
        unknown call_tmp[663376] "expr temp" "maybe param" "maybe type" "temp"
        (663379 'move' call_tmp[663376](137730 call - call_tmp[663371] 1))
        (137823 'move' tmp[137811](137821 call chpl_compute_low_param_loop_bound 0 call_tmp[663376]))
        unknown tmp[137812] "maybe param" "temp"
        unknown call_tmp[663383] "expr temp" "maybe param" "maybe type" "temp"
        (663386 'move' call_tmp[663383](137830 call size _mt[243] aDims[137690]))
        unknown call_tmp[663388] "expr temp" "maybe param" "maybe type" "temp"
        (663391 'move' call_tmp[663388](137828 call - call_tmp[663383] 1))
        (137836 'move' tmp[137812](137834 call chpl_compute_high_param_loop_bound 0 call_tmp[663388]))
        unknown tmp[137813] "maybe param" "temp"
        (137839 'move' tmp[137813] 1)
        ParamForLoop[137841]
        { i[137810] tmp[137811] tmp[137812] tmp[137813]
          {
            unknown call_tmp[663393] "expr temp" "maybe param" "maybe type" "temp"
            (663396 'move' call_tmp[663393](137737 call aDims[137690] i[137810]))
            unknown call_tmp[663400] "expr temp" "maybe param" "maybe type" "temp"
            (663403 'move' call_tmp[663400](137738 call size _mt[243] call_tmp[663393]))
            unknown call_tmp[663405] "expr temp" "maybe param" "maybe type" "temp"
            (663408 'move' call_tmp[663405](137744 call bDims[137705] i[137810]))
            unknown call_tmp[663412] "expr temp" "maybe param" "maybe type" "temp"
            (663415 'move' call_tmp[663412](137745 call size _mt[243] call_tmp[663405]))
            unknown call_tmp[663417] "expr temp" "maybe param" "maybe type" "temp"
            (663420 'move' call_tmp[663417](137748 call != call_tmp[663400] call_tmp[663412]))
            unknown call_tmp[663422] "expr temp" "maybe param" "maybe type" "temp"
            (663425 'move' call_tmp[663422](137804 call _cond_test call_tmp[663417]))
            if call_tmp[663422]
            {
              unknown call_tmp[663427] "expr temp" "maybe param" "maybe type" "temp"
              (663430 'move' call_tmp[663427](137774 call aDims[137690] i[137810]))
              unknown call_tmp[663434] "expr temp" "maybe param" "maybe type" "temp"
              (663437 'move' call_tmp[663434](137775 call size _mt[243] call_tmp[663427]))
              unknown call_tmp[663439] "expr temp" "maybe param" "maybe type" "temp"
              (663442 'move' call_tmp[663439](137798 call bDims[137705] i[137810]))
              unknown call_tmp[663446] "expr temp" "maybe param" "maybe type" "temp"
              (663449 'move' call_tmp[663446](137799 call size _mt[243] call_tmp[663439]))
              (137802 call halt "assigning between arrays of different shapes in dimension " i[137810] ": " call_tmp[663434] " vs. " call_tmp[663446])
              (480667 'end of statement' i[137810] aDims[137690] i[137810] bDims[137705] i[137810])
            }
          }
        }
        label _unused_continueLabel[137815]
        label _breakLabel[137814]
      }
    }
    {
    }
    (519071 return _void[55])
  }
  function =[137866](ref arg a[137863]:_array[133600](?), arg b[137871]:_array[133600](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[663453] "expr temp" "maybe param" "maybe type" "temp"
    (663456 'move' call_tmp[663453](137875 call rank _mt[243] a[137863]))
    unknown call_tmp[663460] "expr temp" "maybe param" "maybe type" "temp"
    (663463 'move' call_tmp[663460](137879 call rank _mt[243] b[137871]))
    unknown call_tmp[663465] "expr temp" "maybe param" "maybe type" "temp"
    (663468 'move' call_tmp[663465](137882 call != call_tmp[663453] call_tmp[663460]))
    unknown call_tmp[663470] "expr temp" "maybe param" "maybe type" "temp"
    (663473 'move' call_tmp[663470](137905 call _cond_test call_tmp[663465]))
    if call_tmp[663470]
    {
      (137903 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[663477] "expr temp" "maybe param" "maybe type" "temp"
    (663480 'move' call_tmp[663477](137912 call _value _mt[243] b[137871]))
    unknown call_tmp[663482] "expr temp" "maybe param" "maybe type" "temp"
    (663485 'move' call_tmp[663482](137916 call == call_tmp[663477] nil[44]))
    unknown call_tmp[663487] "expr temp" "maybe param" "maybe type" "temp"
    (663490 'move' call_tmp[663487](137920 call _cond_test call_tmp[663482]))
    if call_tmp[663487]
    {
      gotoReturn _end_=[519073] _end_=[519073]
    }
    unknown call_tmp[663494] "expr temp" "maybe param" "maybe type" "temp"
    (663497 'move' call_tmp[663494](137926 call _value _mt[243] a[137863]))
    unknown call_tmp[663501] "expr temp" "maybe param" "maybe type" "temp"
    (663504 'move' call_tmp[663501](137930 call _value _mt[243] b[137871]))
    unknown call_tmp[663506] "expr temp" "maybe param" "maybe type" "temp"
    (663509 'move' call_tmp[663506](137933 call == call_tmp[663494] call_tmp[663501]))
    unknown call_tmp[663511] "expr temp" "maybe param" "maybe type" "temp"
    (663514 'move' call_tmp[663511](137938 call _cond_test call_tmp[663506]))
    if call_tmp[663511]
    {
      gotoReturn _end_=[519073] _end_=[519073]
    }
    unknown tmp[426622] "maybe param" "temp"
    unknown call_tmp[663518] "expr temp" "maybe param" "maybe type" "temp"
    (663521 'move' call_tmp[663518](137943 call size _mt[243] a[137863]))
    (426633 'move' tmp[426622](137947 call == call_tmp[663518] 0))
    unknown call_tmp[663523] "expr temp" "maybe param" "maybe type" "temp"
    (663526 'move' call_tmp[663523](426635 call _cond_invalid tmp[426622]))
    if call_tmp[663523]
    {
      (426638 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567801] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567802] "maybe param" "temp"
    unknown call_tmp[663528] "expr temp" "maybe param" "maybe type" "temp"
    (663531 'move' call_tmp[663528](426623 call isTrue tmp[426622]))
    (567807 'move' tmp[567802](567805 call _cond_test call_tmp[663528]))
    if tmp[567802]
    {
      unknown tmp[567809] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663535] "expr temp" "maybe param" "maybe type" "temp"
      (663538 'move' call_tmp[663535](137950 call size _mt[243] b[137871]))
      unknown call_tmp[663540] "expr temp" "maybe param" "maybe type" "temp"
      (663543 'move' call_tmp[663540](137954 call == call_tmp[663535] 0))
      (567811 'move' tmp[567809](426626 call isTrue call_tmp[663540]))
      (567816 'move' tmp[567801](567813 '_paramFoldLogical' tmp[567802] tmp[567809]))
    }
    {
      (567821 'move' tmp[567801](567818 '_paramFoldLogical' tmp[567802] 0))
    }
    unknown call_tmp[663545] "expr temp" "maybe param" "maybe type" "temp"
    (663548 'move' call_tmp[663545](137960 call _cond_test tmp[567801]))
    if call_tmp[663545]
    {
      gotoReturn _end_=[519073] _end_=[519073]
    }
    unknown call_tmp[663550] "expr temp" "maybe param" "maybe type" "temp"
    (663553 'move' call_tmp[663550](137972 call _cond_test 1))
    if call_tmp[663550]
    {
      (137970 call checkArrayShapesUponAssignment a[137863] b[137871])
    }
    (137988 call chpl__uncheckedArrayTransfer a[137863] b[137871](kind = assign[137997]))
    label _end_=[519073]
    (519075 return _void[55])
  }
  type _tElt[137999] def move[137993]:_tElt[137999] def initCopy[137995]:_tElt[137999] def assign[137997]:_tElt[137999]
  function needsInitWorkaround[138006](arg t[138004]:_any[178](?)) param : _unknown[51] "private"
  {
    unknown ret[519085] "RVV" "param" "temp"
    unknown tmp[426643] "maybe param" "temp"
    unknown tmp[426664] "maybe param" "temp"
    (426675 'move' tmp[426664](354365 'is_subtype' _array[133600](?) t[138004]))
    unknown call_tmp[663555] "expr temp" "maybe param" "maybe type" "temp"
    (663558 'move' call_tmp[663555](426677 call _cond_invalid tmp[426664]))
    if call_tmp[663555]
    {
      (426680 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567828] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567829] "maybe param" "temp"
    unknown call_tmp[663560] "expr temp" "maybe param" "maybe type" "temp"
    (663563 'move' call_tmp[663560](426665 call isTrue tmp[426664]))
    (567834 'move' tmp[567829](567832 call _cond_test call_tmp[663560]))
    if tmp[567829]
    {
      (567839 'move' tmp[567828](567836 '_paramFoldLogical' tmp[567829] 1))
    }
    {
      unknown tmp[567841] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663565] "expr temp" "maybe param" "maybe type" "temp"
      (663568 'move' call_tmp[663565](354366 'is_subtype' _domain[125914](?) t[138004]))
      (567843 'move' tmp[567841](426669 call isTrue call_tmp[663565]))
      (567848 'move' tmp[567828](567845 '_paramFoldLogical' tmp[567829] tmp[567841]))
    }
    (426654 'move' tmp[426643] tmp[567828])
    unknown call_tmp[663570] "expr temp" "maybe param" "maybe type" "temp"
    (663573 'move' call_tmp[663570](426656 call _cond_invalid tmp[426643]))
    if call_tmp[663570]
    {
      (426659 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567855] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567856] "maybe param" "temp"
    unknown call_tmp[663575] "expr temp" "maybe param" "maybe type" "temp"
    (663578 'move' call_tmp[663575](426644 call isTrue tmp[426643]))
    (567861 'move' tmp[567856](567859 call _cond_test call_tmp[663575]))
    if tmp[567856]
    {
      (567866 'move' tmp[567855](567863 '_paramFoldLogical' tmp[567856] 1))
    }
    {
      unknown tmp[567868] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663580] "expr temp" "maybe param" "maybe type" "temp"
      (663583 'move' call_tmp[663580](354367 'is_subtype' _distribution[118979](?) t[138004]))
      (567870 'move' tmp[567868](426648 call isTrue call_tmp[663580]))
      (567875 'move' tmp[567855](567872 '_paramFoldLogical' tmp[567856] tmp[567868]))
    }
    (519090 'move' ret[519085](519089 'deref' tmp[567855]))
    (519087 return ret[519085])
  }
  function initCopyAfterTransfer[138040](ref arg a[138037]:_array[133600](?)) : _unknown[51] "private" "ignore transfer errors" "no return value for void"
  {
    unknown call_tmp[663587] "expr temp" "maybe param" "maybe type" "temp"
    (663590 'move' call_tmp[663587](138044 call eltType _mt[243] a[138037]))
    unknown call_tmp[663592] "expr temp" "maybe param" "maybe type" "temp"
    (663595 'move' call_tmp[663592](138048 call needsInitWorkaround call_tmp[663587]))
    unknown call_tmp[663597] "expr temp" "maybe param" "maybe type" "temp"
    (663600 'move' call_tmp[663597](138106 call _cond_test call_tmp[663592]))
    if call_tmp[663597]
    {
      unknown call_tmp[663604] "expr temp" "maybe param" "maybe type" "temp"
      (663607 'move' call_tmp[663604](415708 call _dom _mt[243] a[138037]))
      unknown call_tmp[663609] "maybe param" "maybe type" "temp"
      (663612 'move' call_tmp[663609](415704 call chpl__staticAutoLocalCheck a[138037] call_tmp[663604]))
      unknown chpl__staticAutoLocalCheckSym[415703] "dead at end of block" "param"
      (543165 'init var' chpl__staticAutoLocalCheckSym[415703] call_tmp[663609])
      (480683 'end of statement')
      if chpl__staticAutoLocalCheckSym[415703]
      {
        unknown call_tmp[663616] "expr temp" "maybe param" "maybe type" "temp"
        (663619 'move' call_tmp[663616](138051 call _dom _mt[243] a[138037]))
        Forall {
          induction variables:
            
            unknown ai[138079] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663616]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138058] "dead at end of block" "ref var"
            unknown call_tmp[663621] "expr temp" "maybe param" "maybe type" "temp"
            (663624 'move' call_tmp[663621](415714 'may be local access' a[138037] ai[138079] chpl__staticAutoLocalCheckSym[415703] 1))
            (543168 'move' aa[138058](543167 'addr of' call_tmp[663621]))
            (138061 'end of statement')
            unknown call_tmp[663628] "maybe param" "maybe type" "temp"
            (663631 'move' call_tmp[663628](138064 call eltType _mt[243] a[138037]))
            unknown copy[138068] "dead at end of block" "no auto destroy"
            (543170 'init var' copy[138068] aa[138058] call_tmp[663628])
            (138071 'end of statement' ai[138079] aa[138058])
            (138076 '=' aa[138058] copy[138068])
            (480686 'end of statement' aa[138058] copy[138068])
          }
        }
      }
      {
        unknown call_tmp[663635] "expr temp" "maybe param" "maybe type" "temp"
        (663638 'move' call_tmp[663635](415700 call _dom _mt[243] a[138037]))
        Forall {
          induction variables:
            
            unknown ai[415697] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663635]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415679] "dead at end of block" "ref var"
            unknown call_tmp[663640] "expr temp" "maybe param" "maybe type" "temp"
            (663643 'move' call_tmp[663640](415681 call a[138037] ai[415697]))
            (543173 'move' aa[415679](543172 'addr of' call_tmp[663640]))
            (415684 'end of statement')
            unknown call_tmp[663647] "maybe param" "maybe type" "temp"
            (663650 'move' call_tmp[663647](415688 call eltType _mt[243] a[138037]))
            unknown copy[415685] "dead at end of block" "no auto destroy"
            (543175 'init var' copy[415685] aa[415679] call_tmp[663647])
            (415692 'end of statement' ai[415697] aa[415679])
            (415693 '=' aa[415679] copy[415685])
            (480691 'end of statement' aa[415679] copy[415685])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138102] "index var" "insert auto destroy"
        iterated expressions:
          a[138037]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663654] "maybe param" "maybe type" "temp"
          (663657 'move' call_tmp[663654](138086 call eltType _mt[243] a[138037]))
          unknown copy[138090] "dead at end of block" "no auto destroy"
          (543177 'init var' copy[138090] aa[138102] call_tmp[663654])
          (138093 'end of statement' aa[138102])
          (138099 '=' aa[138102] copy[138090])
          (480695 'end of statement' aa[138102] copy[138090])
        }
      }
    }
    (519092 return _void[55])
  }
  function fixRuntimeType[138117](arg eltType[138115]:_any[178](?), ref arg elt[138119]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown runtimeTypesDiffer[138122] "dead at end of block" "insert auto destroy"
    (543179 'init var' runtimeTypesDiffer[138122] 0)
    (138125 'end of statement')
    unknown tmp[426685] "maybe param" "temp"
    (426696 'move' tmp[426685](354368 'is_subtype' _array[133600](?) eltType[138115]))
    unknown call_tmp[663659] "expr temp" "maybe param" "maybe type" "temp"
    (663662 'move' call_tmp[663659](426698 call _cond_invalid tmp[426685]))
    if call_tmp[663659]
    {
      (426701 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[567882] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567883] "maybe param" "temp"
    unknown call_tmp[663664] "expr temp" "maybe param" "maybe type" "temp"
    (663667 'move' call_tmp[663664](426686 call isTrue tmp[426685]))
    (567888 'move' tmp[567883](567886 call _cond_test call_tmp[663664]))
    if tmp[567883]
    {
      (567893 'move' tmp[567882](567890 '_paramFoldLogical' tmp[567883] 1))
    }
    {
      unknown tmp[567895] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[663669] "expr temp" "maybe param" "maybe type" "temp"
      (663672 'move' call_tmp[663669](354369 'is_subtype' _domain[125914](?) eltType[138115]))
      (567897 'move' tmp[567895](426690 call isTrue call_tmp[663669]))
      (567902 'move' tmp[567882](567899 '_paramFoldLogical' tmp[567883] tmp[567895]))
    }
    unknown call_tmp[663674] "expr temp" "maybe param" "maybe type" "temp"
    (663677 'move' call_tmp[663674](138255 call _cond_test tmp[567882]))
    if call_tmp[663674]
    {
      unknown call_tmp[663679] "expr temp" "maybe param" "maybe type" "temp"
      (663682 'move' call_tmp[663679](354370 'is_subtype' _array[133600](?) eltType[138115]))
      unknown call_tmp[663684] "expr temp" "maybe param" "maybe type" "temp"
      (663687 'move' call_tmp[663684](138181 call _cond_test call_tmp[663679]))
      if call_tmp[663684]
      {
        const lhsDomain[138148] "dead at end of block" "const" "ref var"
        unknown call_tmp[663689] "expr temp" "maybe param" "maybe type" "temp"
        (663692 'move' call_tmp[663689](138147 call chpl__domainFromArrayRuntimeType eltType[138115]))
        (543182 'move' lhsDomain[138148](543181 'addr of' call_tmp[663689]))
        (138151 'end of statement')
        const rhsDomain[138157] "dead at end of block" "const" "ref var"
        unknown call_tmp[663696] "expr temp" "maybe param" "maybe type" "temp"
        (663699 'move' call_tmp[663696](138154 call _dom _mt[243] elt[138119]))
        (543185 'move' rhsDomain[138157](543184 'addr of' call_tmp[663696]))
        (138160 'end of statement')
        unknown call_tmp[663703] "expr temp" "maybe param" "maybe type" "temp"
        (663706 'move' call_tmp[663703](138162 call _instance _mt[243] lhsDomain[138148]))
        unknown call_tmp[663710] "expr temp" "maybe param" "maybe type" "temp"
        (663713 'move' call_tmp[663710](138166 call _instance _mt[243] rhsDomain[138157]))
        unknown call_tmp[663715] "expr temp" "maybe param" "maybe type" "temp"
        (663718 'move' call_tmp[663715](138169 call != call_tmp[663703] call_tmp[663710]))
        unknown call_tmp[663720] "expr temp" "maybe param" "maybe type" "temp"
        (663723 'move' call_tmp[663720](138177 call _cond_test call_tmp[663715]))
        if call_tmp[663720]
        {
          (138173 call = runtimeTypesDiffer[138122] 1)
          (480699 'end of statement' runtimeTypesDiffer[138122])
        }
      }
      unknown call_tmp[663725] "expr temp" "maybe param" "maybe type" "temp"
      (663728 'move' call_tmp[663725](354371 'is_subtype' _domain[125914](?) eltType[138115]))
      unknown call_tmp[663730] "expr temp" "maybe param" "maybe type" "temp"
      (663733 'move' call_tmp[663730](138228 call _cond_test call_tmp[663725]))
      if call_tmp[663730]
      {
        const lhsDist[138195] "dead at end of block" "const" "ref var"
        unknown call_tmp[663735] "expr temp" "maybe param" "maybe type" "temp"
        (663738 'move' call_tmp[663735](138194 call chpl__distributionFromDomainRuntimeType eltType[138115]))
        (543188 'move' lhsDist[138195](543187 'addr of' call_tmp[663735]))
        (138198 'end of statement')
        const rhsDist[138204] "dead at end of block" "const" "ref var"
        unknown call_tmp[663742] "expr temp" "maybe param" "maybe type" "temp"
        (663745 'move' call_tmp[663742](138201 call dist _mt[243] elt[138119]))
        (543191 'move' rhsDist[138204](543190 'addr of' call_tmp[663742]))
        (138207 'end of statement')
        unknown call_tmp[663749] "expr temp" "maybe param" "maybe type" "temp"
        (663752 'move' call_tmp[663749](138209 call _instance _mt[243] lhsDist[138195]))
        unknown call_tmp[663756] "expr temp" "maybe param" "maybe type" "temp"
        (663759 'move' call_tmp[663756](138213 call _instance _mt[243] rhsDist[138204]))
        unknown call_tmp[663761] "expr temp" "maybe param" "maybe type" "temp"
        (663764 'move' call_tmp[663761](138216 call != call_tmp[663749] call_tmp[663756]))
        unknown call_tmp[663766] "expr temp" "maybe param" "maybe type" "temp"
        (663769 'move' call_tmp[663766](138224 call _cond_test call_tmp[663761]))
        if call_tmp[663766]
        {
          (138220 call = runtimeTypesDiffer[138122] 1)
          (480701 'end of statement' runtimeTypesDiffer[138122])
        }
      }
      unknown call_tmp[663771] "expr temp" "maybe param" "maybe type" "temp"
      (663774 'move' call_tmp[663771](138251 call _cond_test runtimeTypesDiffer[138122]))
      if call_tmp[663771]
      {
        unknown copy[138235] "dead at end of block" "no auto destroy"
        (543193 'init var' copy[138235] elt[138119] eltType[138115])
        (138238 'end of statement')
        (138243 call chpl__autoDestroy elt[138119])
        (480703 'end of statement')
        (138249 '=' elt[138119] copy[138235])
        (480704 'end of statement' copy[138235])
      }
    }
    (519094 return _void[55])
  }
  function fixEltRuntimeTypesAfterTransfer[138269](ref arg a[138266]:_array[133600](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[663778] "expr temp" "maybe param" "maybe type" "temp"
    (663781 'move' call_tmp[663778](138273 call eltType _mt[243] a[138266]))
    unknown call_tmp[663783] "expr temp" "maybe param" "maybe type" "temp"
    (663786 'move' call_tmp[663783](138277 call needsInitWorkaround call_tmp[663778]))
    unknown call_tmp[663788] "expr temp" "maybe param" "maybe type" "temp"
    (663791 'move' call_tmp[663788](138323 call _cond_test call_tmp[663783]))
    if call_tmp[663788]
    {
      unknown call_tmp[663795] "expr temp" "maybe param" "maybe type" "temp"
      (663798 'move' call_tmp[663795](415747 call _dom _mt[243] a[138266]))
      unknown call_tmp[663800] "maybe param" "maybe type" "temp"
      (663803 'move' call_tmp[663800](415743 call chpl__staticAutoLocalCheck a[138266] call_tmp[663795]))
      unknown chpl__staticAutoLocalCheckSym[415742] "dead at end of block" "param"
      (543195 'init var' chpl__staticAutoLocalCheckSym[415742] call_tmp[663800])
      (480706 'end of statement')
      if chpl__staticAutoLocalCheckSym[415742]
      {
        unknown call_tmp[663807] "expr temp" "maybe param" "maybe type" "temp"
        (663810 'move' call_tmp[663807](138280 call _dom _mt[243] a[138266]))
        Forall {
          induction variables:
            
            unknown ai[138302] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663807]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[138287] "dead at end of block" "ref var"
            unknown call_tmp[663812] "expr temp" "maybe param" "maybe type" "temp"
            (663815 'move' call_tmp[663812](415753 'may be local access' a[138266] ai[138302] chpl__staticAutoLocalCheckSym[415742] 1))
            (543198 'move' aa[138287](543197 'addr of' call_tmp[663812]))
            (138290 'end of statement' ai[138302])
            unknown call_tmp[663819] "expr temp" "maybe param" "maybe type" "temp"
            (663822 'move' call_tmp[663819](138294 call eltType _mt[243] a[138266]))
            (138299 call fixRuntimeType call_tmp[663819] aa[138287])
            (480708 'end of statement' aa[138287])
          }
        }
      }
      {
        unknown call_tmp[663826] "expr temp" "maybe param" "maybe type" "temp"
        (663829 'move' call_tmp[663826](415739 call _dom _mt[243] a[138266]))
        Forall {
          induction variables:
            
            unknown ai[415736] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[663826]
          shadow variables:
          other variables
            forall body
          {
            unknown aa[415722] "dead at end of block" "ref var"
            unknown call_tmp[663831] "expr temp" "maybe param" "maybe type" "temp"
            (663834 'move' call_tmp[663831](415724 call a[138266] ai[415736]))
            (543201 'move' aa[415722](543200 'addr of' call_tmp[663831]))
            (415727 'end of statement' ai[415736])
            unknown call_tmp[663838] "expr temp" "maybe param" "maybe type" "temp"
            (663841 'move' call_tmp[663838](415731 call eltType _mt[243] a[138266]))
            (415729 call fixRuntimeType call_tmp[663838] aa[415722])
            (480711 'end of statement' aa[415722])
          }
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138319] "index var" "insert auto destroy"
        iterated expressions:
          a[138266]
        shadow variables:
        other variables
          forall body
        {
          unknown call_tmp[663845] "expr temp" "maybe param" "maybe type" "temp"
          (663848 'move' call_tmp[663845](138310 call eltType _mt[243] a[138266]))
          (138315 call fixRuntimeType call_tmp[663845] aa[138319])
          (480713 'end of statement' aa[138319])
        }
      }
    }
    (519096 return _void[55])
  }
  function chpl__uncheckedArrayTransfer[138338](ref arg a[138335]:_array[133600](?), arg b[138343]:_array[133600](?), param arg kind[138346]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown done[138349] "dead at end of block" "insert auto destroy"
    (543203 'init var' done[138349] 0)
    (138352 'end of statement')
    unknown call_tmp[663850] "expr temp" "maybe param" "maybe type" "temp"
    (663853 'move' call_tmp[663850](138358 call chpl__serializeAssignment a[138335] b[138343]))
    unknown call_tmp[663855] "expr temp" "maybe param" "maybe type" "temp"
    (663858 'move' call_tmp[663855](138359 call ! call_tmp[663850]))
    unknown call_tmp[663860] "expr temp" "maybe param" "maybe type" "temp"
    (663863 'move' call_tmp[663860](138475 call _cond_test call_tmp[663855]))
    if call_tmp[663860]
    {
      unknown call_tmp[663865] "expr temp" "maybe param" "maybe type" "temp"
      (663868 'move' call_tmp[663865](138366 call chpl__compatibleForBulkTransfer a[138335] b[138343] kind[138346]))
      unknown call_tmp[663870] "expr temp" "maybe param" "maybe type" "temp"
      (663873 'move' call_tmp[663870](138397 call _cond_test call_tmp[663865]))
      if call_tmp[663870]
      {
        unknown call_tmp[663875] "expr temp" "maybe param" "maybe type" "temp"
        (663878 'move' call_tmp[663875](138372 call chpl__bulkTransferArray a[138335] b[138343]))
        (138373 call = done[138349] call_tmp[663875])
        (480715 'end of statement' done[138349])
      }
      {
        unknown call_tmp[663880] "expr temp" "maybe param" "maybe type" "temp"
        (663883 'move' call_tmp[663880](138382 call chpl__compatibleForWidePtrBulkTransfer a[138335] b[138343] kind[138346]))
        unknown call_tmp[663885] "expr temp" "maybe param" "maybe type" "temp"
        (663888 'move' call_tmp[663885](138393 call _cond_test call_tmp[663880]))
        if call_tmp[663885]
        {
          unknown call_tmp[663890] "expr temp" "maybe param" "maybe type" "temp"
          (663893 'move' call_tmp[663890](138388 call chpl__bulkTransferPtrArray a[138335] b[138343]))
          (138389 call = done[138349] call_tmp[663890])
          (480717 'end of statement' done[138349])
        }
      }
      unknown call_tmp[663895] "expr temp" "maybe param" "maybe type" "temp"
      (663898 'move' call_tmp[663895](138471 call _cond_test done[138349]))
      if call_tmp[663895]
      {
        unknown tmp[426748] "maybe param" "temp"
        (426759 'move' tmp[426748](138409 call == kind[138346] initCopy[137995]))
        unknown call_tmp[663900] "expr temp" "maybe param" "maybe type" "temp"
        (663903 'move' call_tmp[663900](426761 call _cond_invalid tmp[426748]))
        if call_tmp[663900]
        {
          (426764 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[567909] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[567910] "maybe param" "temp"
        unknown call_tmp[663905] "expr temp" "maybe param" "maybe type" "temp"
        (663908 'move' call_tmp[663905](426749 call isTrue tmp[426748]))
        (567915 'move' tmp[567910](567913 call _cond_test call_tmp[663905]))
        if tmp[567910]
        {
          unknown tmp[567917] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[663912] "expr temp" "maybe param" "maybe type" "temp"
          (663915 'move' call_tmp[663912](138413 call eltType _mt[243] a[138335]))
          unknown call_tmp[663917] "expr temp" "maybe param" "maybe type" "temp"
          (663920 'move' call_tmp[663917](138417 call isPODType call_tmp[663912]))
          unknown call_tmp[663922] "expr temp" "maybe param" "maybe type" "temp"
          (663925 'move' call_tmp[663922](138418 call ! call_tmp[663917]))
          (567919 'move' tmp[567917](426752 call isTrue call_tmp[663922]))
          (567924 'move' tmp[567909](567921 '_paramFoldLogical' tmp[567910] tmp[567917]))
        }
        {
          (567929 'move' tmp[567909](567926 '_paramFoldLogical' tmp[567910] 0))
        }
        unknown call_tmp[663927] "expr temp" "maybe param" "maybe type" "temp"
        (663930 'move' call_tmp[663927](138465 call _cond_test tmp[567909]))
        if call_tmp[663927]
        {
          (138425 call initCopyAfterTransfer a[138335])
        }
        {
          unknown tmp[426706] "maybe param" "temp"
          (426717 'move' tmp[426706](138433 call == kind[138346] move[137993]))
          unknown call_tmp[663932] "expr temp" "maybe param" "maybe type" "temp"
          (663935 'move' call_tmp[663932](426719 call _cond_invalid tmp[426706]))
          if call_tmp[663932]
          {
            (426722 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[567963] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[567964] "maybe param" "temp"
          unknown call_tmp[663937] "expr temp" "maybe param" "maybe type" "temp"
          (663940 'move' call_tmp[663937](426707 call isTrue tmp[426706]))
          (567969 'move' tmp[567964](567967 call _cond_test call_tmp[663937]))
          if tmp[567964]
          {
            unknown tmp[426727] "maybe param" "temp"
            unknown call_tmp[663944] "expr temp" "maybe param" "maybe type" "temp"
            (663947 'move' call_tmp[663944](138437 call eltType _mt[243] a[138335]))
            (426738 'move' tmp[426727](354372 'is_subtype' _array[133600](?) call_tmp[663944]))
            unknown call_tmp[663949] "expr temp" "maybe param" "maybe type" "temp"
            (663952 'move' call_tmp[663949](426740 call _cond_invalid tmp[426727]))
            if call_tmp[663949]
            {
              (426743 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[567936] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[567937] "maybe param" "temp"
            unknown call_tmp[663954] "expr temp" "maybe param" "maybe type" "temp"
            (663957 'move' call_tmp[663954](426728 call isTrue tmp[426727]))
            (567942 'move' tmp[567937](567940 call _cond_test call_tmp[663954]))
            if tmp[567937]
            {
              (567947 'move' tmp[567936](567944 '_paramFoldLogical' tmp[567937] 1))
            }
            {
              unknown tmp[567949] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[663961] "expr temp" "maybe param" "maybe type" "temp"
              (663964 'move' call_tmp[663961](138445 call eltType _mt[243] a[138335]))
              unknown call_tmp[663966] "expr temp" "maybe param" "maybe type" "temp"
              (663969 'move' call_tmp[663966](354373 'is_subtype' _domain[125914](?) call_tmp[663961]))
              (567951 'move' tmp[567949](426732 call isTrue call_tmp[663966]))
              (567956 'move' tmp[567936](567953 '_paramFoldLogical' tmp[567937] tmp[567949]))
            }
            unknown tmp[567971] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (567973 'move' tmp[567971](426710 call isTrue tmp[567936]))
            (567978 'move' tmp[567963](567975 '_paramFoldLogical' tmp[567964] tmp[567971]))
          }
          {
            (567983 'move' tmp[567963](567980 '_paramFoldLogical' tmp[567964] 0))
          }
          unknown call_tmp[663971] "expr temp" "maybe param" "maybe type" "temp"
          (663974 'move' call_tmp[663971](138461 call _cond_test tmp[567963]))
          if call_tmp[663971]
          {
            (138458 call fixEltRuntimeTypesAfterTransfer a[138335])
          }
        }
      }
    }
    unknown call_tmp[663976] "expr temp" "maybe param" "maybe type" "temp"
    (663979 'move' call_tmp[663976](138480 call ! done[138349]))
    unknown call_tmp[663981] "expr temp" "maybe param" "maybe type" "temp"
    (663984 'move' call_tmp[663981](138490 call _cond_test call_tmp[663976]))
    if call_tmp[663981]
    {
      (138487 call chpl__transferArray a[138335] b[138343] kind[138346])
    }
    (519098 return _void[55])
  }
  function chpl__compatibleForWidePtrBulkTransfer[138500](arg a[138498]:_any[178](?), arg b[138502]:_any[178](?), param arg kind[138508] :
  assign[137997] =
  assign[137997]) param : _unknown[51]
  {
    unknown ret[519102] "RVV" "param" "temp"
    unknown call_tmp[663986] "expr temp" "maybe param" "maybe type" "temp"
    (663989 'move' call_tmp[663986](138512 call ! useBulkPtrTransfer[113744]))
    unknown call_tmp[663991] "expr temp" "maybe param" "maybe type" "temp"
    (663994 'move' call_tmp[663991](138517 call _cond_test call_tmp[663986]))
    if call_tmp[663991]
    {
      (519107 'move' ret[519102](519106 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519100] _end_chpl__compatibleForWidePtrBulkTransfer[519100]
    }
    unknown tmp[426769] "maybe param" "temp"
    unknown call_tmp[663998] "expr temp" "maybe param" "maybe type" "temp"
    (664001 'move' call_tmp[663998](138524 call _value _mt[243] a[138498]))
    (426780 'move' tmp[426769](138531 call(138527 call (partial) isDefaultRectangular _mt[243] call_tmp[663998])))
    unknown call_tmp[664005] "expr temp" "maybe param" "maybe type" "temp"
    (664008 'move' call_tmp[664005](426782 call _cond_invalid tmp[426769]))
    if call_tmp[664005]
    {
      (426785 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[567990] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[567991] "maybe param" "temp"
    unknown call_tmp[664010] "expr temp" "maybe param" "maybe type" "temp"
    (664013 'move' call_tmp[664010](426770 call isTrue tmp[426769]))
    (567996 'move' tmp[567991](567994 call _cond_test call_tmp[664010]))
    if tmp[567991]
    {
      unknown tmp[567998] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[664017] "expr temp" "maybe param" "maybe type" "temp"
      (664020 'move' call_tmp[664017](138533 call _value _mt[243] b[138502]))
      unknown call_tmp[664024] "expr temp" "maybe param" "maybe type" "temp"
      (664027 'move' call_tmp[664024](138540 call(138536 call (partial) isDefaultRectangular _mt[243] call_tmp[664017])))
      (568000 'move' tmp[567998](426773 call isTrue call_tmp[664024]))
      (568005 'move' tmp[567990](568002 '_paramFoldLogical' tmp[567991] tmp[567998]))
    }
    {
      (568010 'move' tmp[567990](568007 '_paramFoldLogical' tmp[567991] 0))
    }
    unknown call_tmp[664029] "expr temp" "maybe param" "maybe type" "temp"
    (664032 'move' call_tmp[664029](138543 call ! tmp[567990]))
    unknown call_tmp[664034] "expr temp" "maybe param" "maybe type" "temp"
    (664037 'move' call_tmp[664034](138548 call _cond_test call_tmp[664029]))
    if call_tmp[664034]
    {
      (519112 'move' ret[519102](519111 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519100] _end_chpl__compatibleForWidePtrBulkTransfer[519100]
    }
    unknown call_tmp[664041] "expr temp" "maybe param" "maybe type" "temp"
    (664044 'move' call_tmp[664041](138554 call eltType _mt[243] a[138498]))
    unknown call_tmp[664048] "expr temp" "maybe param" "maybe type" "temp"
    (664051 'move' call_tmp[664048](138558 call eltType _mt[243] b[138502]))
    unknown call_tmp[664053] "expr temp" "maybe param" "maybe type" "temp"
    (664056 'move' call_tmp[664053](138561 call != call_tmp[664041] call_tmp[664048]))
    unknown call_tmp[664058] "expr temp" "maybe param" "maybe type" "temp"
    (664061 'move' call_tmp[664058](138566 call _cond_test call_tmp[664053]))
    if call_tmp[664058]
    {
      (519117 'move' ret[519102](519116 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519100] _end_chpl__compatibleForWidePtrBulkTransfer[519100]
    }
    unknown call_tmp[664065] "expr temp" "maybe param" "maybe type" "temp"
    (664068 'move' call_tmp[664065](138573 call eltType _mt[243] a[138498]))
    unknown call_tmp[664070] "expr temp" "maybe param" "maybe type" "temp"
    (664073 'move' call_tmp[664070](138577 call isClass call_tmp[664065]))
    unknown call_tmp[664075] "expr temp" "maybe param" "maybe type" "temp"
    (664078 'move' call_tmp[664075](138578 call ! call_tmp[664070]))
    unknown call_tmp[664080] "expr temp" "maybe param" "maybe type" "temp"
    (664083 'move' call_tmp[664080](138583 call _cond_test call_tmp[664075]))
    if call_tmp[664080]
    {
      (519122 'move' ret[519102](519121 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519100] _end_chpl__compatibleForWidePtrBulkTransfer[519100]
    }
    unknown call_tmp[664087] "expr temp" "maybe param" "maybe type" "temp"
    (664090 'move' call_tmp[664087](138590 call eltType _mt[243] a[138498]))
    unknown call_tmp[664092] "expr temp" "maybe param" "maybe type" "temp"
    (664095 'move' call_tmp[664092](138594 call isOwnedClass call_tmp[664087]))
    unknown call_tmp[664097] "expr temp" "maybe param" "maybe type" "temp"
    (664100 'move' call_tmp[664097](138598 call _cond_test call_tmp[664092]))
    if call_tmp[664097]
    {
      (519127 'move' ret[519102](519126 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519100] _end_chpl__compatibleForWidePtrBulkTransfer[519100]
    }
    unknown call_tmp[664104] "expr temp" "maybe param" "maybe type" "temp"
    (664107 'move' call_tmp[664104](138605 call eltType _mt[243] a[138498]))
    unknown call_tmp[664109] "expr temp" "maybe param" "maybe type" "temp"
    (664112 'move' call_tmp[664109](138609 call isSharedClass call_tmp[664104]))
    unknown call_tmp[664114] "expr temp" "maybe param" "maybe type" "temp"
    (664117 'move' call_tmp[664114](138613 call _cond_test call_tmp[664109]))
    if call_tmp[664114]
    {
      (519132 'move' ret[519102](519131 'deref' 0))
      gotoReturn _end_chpl__compatibleForWidePtrBulkTransfer[519100] _end_chpl__compatibleForWidePtrBulkTransfer[519100]
    }
    (519137 'move' ret[519102](519136 'deref' 1))
    label _end_chpl__compatibleForWidePtrBulkTransfer[519100]
    (519104 return ret[519102])
  }
  function chpl__bulkTransferPtrArray[138631](ref arg a[138628]:_array[133600](?), arg b[138636]:_array[133600](?)) : _unknown[51] "inline"
  {
    unknown ret[519141] "RVV" "temp"
    unknown call_tmp[664121] "maybe param" "maybe type" "temp"
    (664124 'move' call_tmp[664121](138640 call _dom _mt[243] a[138628]))
    const aDom[138643] "dead at end of block" "const" "insert auto destroy"
    (543205 'init var' aDom[138643] call_tmp[664121])
    (138646 'end of statement')
    unknown call_tmp[664128] "maybe param" "maybe type" "temp"
    (664131 'move' call_tmp[664128](138649 call _dom _mt[243] b[138636]))
    const bDom[138652] "dead at end of block" "const" "insert auto destroy"
    (543207 'init var' bDom[138652] call_tmp[664128])
    (138655 'end of statement')
    unknown call_tmp[664133] "expr temp" "maybe param" "maybe type" "temp"
    (664136 'move' call_tmp[664133](138658 call != aDom[138643] bDom[138652]))
    unknown call_tmp[664138] "expr temp" "maybe param" "maybe type" "temp"
    (664141 'move' call_tmp[664138](138663 call _cond_test call_tmp[664133]))
    if call_tmp[664138]
    {
      (519146 'move' ret[519141](519145 'deref' 0))
      gotoReturn _end_chpl__bulkTransferPtrArray[519139] _end_chpl__bulkTransferPtrArray[519139]
    }
    unknown call_tmp[664145] "expr temp" "maybe param" "maybe type" "temp"
    (664148 'move' call_tmp[664145](138688 call low _mt[243] aDom[138643]))
    unknown call_tmp[664150] "expr temp" "maybe param" "maybe type" "temp"
    (664153 'move' call_tmp[664150](138692 call a[138628] call_tmp[664145]))
    unknown call_tmp[664155] "expr temp" "maybe param" "maybe type" "temp"
    (664158 'move' call_tmp[664155](138693 'is wide pointer' call_tmp[664150]))
    unknown call_tmp[664160] "expr temp" "maybe param" "maybe type" "temp"
    (664163 'move' call_tmp[664160](138704 call _cond_test call_tmp[664155]))
    if call_tmp[664160]
    {
      unknown call_tmp[664165] "expr temp" "maybe param" "maybe type" "temp"
      (664168 'move' call_tmp[664165](138700 call chpl__bulkTransferArray a[138628] aDom[138643] b[138636] bDom[138652]))
      (519151 'move' ret[519141](519150 'deref' call_tmp[664165]))
      gotoReturn _end_chpl__bulkTransferPtrArray[519139] _end_chpl__bulkTransferPtrArray[519139]
      (480733 'end of statement' aDom[138643] bDom[138652])
    }
    (519156 'move' ret[519141](519155 'deref' 0))
    label _end_chpl__bulkTransferPtrArray[519139]
    (519143 return ret[519141])
  }
  function chpl__bulkTransferArray[138723](ref arg a[138720]:_array[133600](?), arg b[138730]:_array[133600](?)) : _unknown[51] "inline"
  {
    unknown ret[519160] "RVV" "temp"
    unknown call_tmp[664172] "expr temp" "maybe param" "maybe type" "temp"
    (664175 'move' call_tmp[664172](461563 call _dom _mt[243] a[138720]))
    unknown call_tmp[664179] "expr temp" "maybe param" "maybe type" "temp"
    (664182 'move' call_tmp[664179](461569 call _dom _mt[243] b[138730]))
    unknown call_tmp[664184] "expr temp" "maybe param" "maybe type" "temp"
    (664187 'move' call_tmp[664184](138739 call chpl__bulkTransferArray a[138720] call_tmp[664172] b[138730] call_tmp[664179]))
    (519165 'move' ret[519160](519164 'deref' call_tmp[664184]))
    (519162 return ret[519160])
  }
  function chpl__bulkTransferArray[138753](ref arg a[138750]:_array[133600](?), arg AD[138756]:_domain[125914](?), const  ref arg b[138762]:_array[133600](?), arg BD[138766]:_domain[125914](?)) : _unknown[51] "inline"
  {
    unknown ret[519169] "RVV" "temp"
    unknown call_tmp[664191] "expr temp" "maybe param" "maybe type" "temp"
    (664194 'move' call_tmp[664191](138771 call _value _mt[243] a[138750]))
    unknown call_tmp[664198] "expr temp" "maybe param" "maybe type" "temp"
    (664201 'move' call_tmp[664198](138777 call _value _mt[243] b[138762]))
    unknown call_tmp[664203] "expr temp" "maybe param" "maybe type" "temp"
    (664206 'move' call_tmp[664203](138781 call chpl__bulkTransferArray call_tmp[664191] AD[138756] call_tmp[664198] BD[138766]))
    (519174 'move' ret[519169](519173 'deref' call_tmp[664203]))
    (519171 return ret[519169])
  }
  function chpl__bulkTransferArray[138791](arg destClass[138789]:_any[178](?), arg destDom[138794]:_domain[125914](?), arg srcClass[138797]:_any[178](?), arg srcDom[138800]:_domain[125914](?)) : _unknown[51] "inline"
  {
    unknown ret[519180] "RVV" "temp"
    unknown success[138804] "dead at end of block" "insert auto destroy"
    (543209 'init var' success[138804] 0)
    (138807 'end of statement')
    function bulkTransferDebug[138815](arg msg[138812]:string[26]) : _unknown[51] "inline" "no return value for void"
    {
      unknown call_tmp[664208] "expr temp" "maybe param" "maybe type" "temp"
      (664211 'move' call_tmp[664208](138840 call _cond_test debugBulkTransfer[113729]))
      if call_tmp[664208]
      {
        (138838 call chpl_debug_writeln "proc =(a:[],b:[]): " msg[138812])
      }
      (519176 return _void[55])
    }
    (138867 call bulkTransferDebug "in chpl__bulkTransferArray")
    (480740 'end of statement')
    unknown call_tmp[664213] "expr temp" "maybe param" "maybe type" "temp"
    (664216 'move' call_tmp[664213](138895 call canResolveMethod module=[255] Reflection[224799] destClass[138789] "doiBulkTransferFromKnown" destDom[138794] srcClass[138797] srcDom[138800]))
    unknown call_tmp[664218] "expr temp" "maybe param" "maybe type" "temp"
    (664221 'move' call_tmp[664218](139131 call _cond_test call_tmp[664213]))
    if call_tmp[664218]
    {
      (138915 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (480741 'end of statement')
      unknown call_tmp[664225] "expr temp" "maybe param" "maybe type" "temp"
      (664228 'move' call_tmp[664225](138927 call(138920 call (partial) doiBulkTransferFromKnown _mt[243] destClass[138789]) destDom[138794] srcClass[138797] srcDom[138800]))
      (138928 call = success[138804] call_tmp[664225])
      (480742 'end of statement' success[138804])
    }
    {
      unknown call_tmp[664230] "expr temp" "maybe param" "maybe type" "temp"
      (664233 'move' call_tmp[664230](138957 call canResolveMethod module=[255] Reflection[224799] srcClass[138797] "doiBulkTransferToKnown" srcDom[138800] destClass[138789] destDom[138794]))
      unknown call_tmp[664235] "expr temp" "maybe param" "maybe type" "temp"
      (664238 'move' call_tmp[664235](139126 call _cond_test call_tmp[664230]))
      if call_tmp[664235]
      {
        (138977 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (480744 'end of statement')
        unknown call_tmp[664242] "expr temp" "maybe param" "maybe type" "temp"
        (664245 'move' call_tmp[664242](138989 call(138982 call (partial) doiBulkTransferToKnown _mt[243] srcClass[138797]) srcDom[138800] destClass[138789] destDom[138794]))
        (138990 call = success[138804] call_tmp[664242])
        (480745 'end of statement' success[138804])
      }
      {
        unknown call_tmp[664247] "expr temp" "maybe param" "maybe type" "temp"
        (664250 'move' call_tmp[664247](139019 call canResolveMethod module=[255] Reflection[224799] destClass[138789] "doiBulkTransferFromAny" destDom[138794] srcClass[138797] srcDom[138800]))
        unknown call_tmp[664252] "expr temp" "maybe param" "maybe type" "temp"
        (664255 'move' call_tmp[664252](139121 call _cond_test call_tmp[664247]))
        if call_tmp[664252]
        {
          (139039 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (480747 'end of statement')
          unknown call_tmp[664259] "expr temp" "maybe param" "maybe type" "temp"
          (664262 'move' call_tmp[664259](139051 call(139044 call (partial) doiBulkTransferFromAny _mt[243] destClass[138789]) destDom[138794] srcClass[138797] srcDom[138800]))
          (139052 call = success[138804] call_tmp[664259])
          (480748 'end of statement' success[138804])
        }
        {
          unknown call_tmp[664264] "expr temp" "maybe param" "maybe type" "temp"
          (664267 'move' call_tmp[664264](139081 call canResolveMethod module=[255] Reflection[224799] srcClass[138797] "doiBulkTransferToAny" srcDom[138800] destClass[138789] destDom[138794]))
          unknown call_tmp[664269] "expr temp" "maybe param" "maybe type" "temp"
          (664272 'move' call_tmp[664269](139117 call _cond_test call_tmp[664264]))
          if call_tmp[664269]
          {
            (139101 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (480750 'end of statement')
            unknown call_tmp[664276] "expr temp" "maybe param" "maybe type" "temp"
            (664279 'move' call_tmp[664276](139113 call(139106 call (partial) doiBulkTransferToAny _mt[243] srcClass[138797]) srcDom[138800] destClass[138789] destDom[138794]))
            (139114 call = success[138804] call_tmp[664276])
            (480751 'end of statement' success[138804])
          }
          (360281 'referenced modules list' Reflection[224799])
        }
        (360274 'referenced modules list' Reflection[224799])
      }
      (360267 'referenced modules list' Reflection[224799])
    }
    unknown call_tmp[664281] "expr temp" "maybe param" "maybe type" "temp"
    (664284 'move' call_tmp[664281](139179 call _cond_test success[138804]))
    if call_tmp[664281]
    {
      (139156 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (139177 call bulkTransferDebug "bulk transfer did not happen")
    }
    (519185 'move' ret[519180](519184 'deref' success[138804]))
    gotoReturn _end_chpl__bulkTransferArray[519178] _end_chpl__bulkTransferArray[519178]
    (480755 'end of statement' success[138804])
    label _end_chpl__bulkTransferArray[519178]
    (519182 return ret[519180])
    (360260 'referenced modules list' Reflection[224799])
  }
  function chpl__transferArray[139198](ref arg a[139195]:_array[133600](?), const  ref arg b[139200]:_any[178](?), param arg kind[139206] :
  assign[137997] =
  assign[137997]) : _unknown[51] "inline" "ignore transfer errors" "find user line" "no return value for void"
  {
    unknown tmp[426811] "maybe param" "temp"
    unknown call_tmp[664288] "expr temp" "maybe param" "maybe type" "temp"
    (664291 'move' call_tmp[664288](139216 call eltType _mt[243] a[139195]))
    unknown call_tmp[664293] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (664296 'move' call_tmp[664293](139220 'typeof' b[139200]))
    (426822 'move' tmp[426811](139221 call == call_tmp[664288] call_tmp[664293]))
    unknown call_tmp[664298] "expr temp" "maybe param" "maybe type" "temp"
    (664301 'move' call_tmp[664298](426824 call _cond_invalid tmp[426811]))
    if call_tmp[664298]
    {
      (426827 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568044] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568045] "maybe param" "temp"
    unknown call_tmp[664303] "expr temp" "maybe param" "maybe type" "temp"
    (664306 'move' call_tmp[664303](426812 call isTrue tmp[426811]))
    (568050 'move' tmp[568045](568048 call _cond_test call_tmp[664303]))
    if tmp[568045]
    {
      (568055 'move' tmp[568044](568052 '_paramFoldLogical' tmp[568045] 1))
    }
    {
      unknown tmp[426832] "maybe param" "temp"
      unknown call_tmp[664310] "expr temp" "maybe param" "maybe type" "temp"
      (664313 'move' call_tmp[664310](139225 call eltType _mt[243] a[139195]))
      (426843 'move' tmp[426832](139229 call _isPrimitiveType call_tmp[664310]))
      unknown call_tmp[664315] "expr temp" "maybe param" "maybe type" "temp"
      (664318 'move' call_tmp[664315](426845 call _cond_invalid tmp[426832]))
      if call_tmp[664315]
      {
        (426848 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[568017] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568018] "maybe param" "temp"
      unknown call_tmp[664320] "expr temp" "maybe param" "maybe type" "temp"
      (664323 'move' call_tmp[664320](426833 call isTrue tmp[426832]))
      (568023 'move' tmp[568018](568021 call _cond_test call_tmp[664320]))
      if tmp[568018]
      {
        unknown tmp[568025] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664325] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (664328 'move' call_tmp[664325](139232 'typeof' b[139200]))
        unknown call_tmp[664330] "expr temp" "maybe param" "maybe type" "temp"
        (664333 'move' call_tmp[664330](139234 call _isPrimitiveType call_tmp[664325]))
        (568027 'move' tmp[568025](426836 call isTrue call_tmp[664330]))
        (568032 'move' tmp[568017](568029 '_paramFoldLogical' tmp[568018] tmp[568025]))
      }
      {
        (568037 'move' tmp[568017](568034 '_paramFoldLogical' tmp[568018] 0))
      }
      unknown tmp[568057] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568059 'move' tmp[568057](426816 call isTrue tmp[568017]))
      (568064 'move' tmp[568044](568061 '_paramFoldLogical' tmp[568045] tmp[568057]))
    }
    unknown call_tmp[664335] "expr temp" "maybe param" "maybe type" "temp"
    (664338 'move' call_tmp[664335](140121 call _cond_test tmp[568044]))
    if call_tmp[664335]
    {
      unknown tmp[426790] "maybe param" "temp"
      (426801 'move' tmp[426790](139244 call == kind[139206] move[137993]))
      unknown call_tmp[664340] "expr temp" "maybe param" "maybe type" "temp"
      (664343 'move' call_tmp[664340](426803 call _cond_invalid tmp[426790]))
      if call_tmp[664340]
      {
        (426806 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[568071] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568072] "maybe param" "temp"
      unknown call_tmp[664345] "expr temp" "maybe param" "maybe type" "temp"
      (664348 'move' call_tmp[664345](426791 call isTrue tmp[426790]))
      (568077 'move' tmp[568072](568075 call _cond_test call_tmp[664345]))
      if tmp[568072]
      {
        (568082 'move' tmp[568071](568079 '_paramFoldLogical' tmp[568072] 1))
      }
      {
        unknown tmp[568084] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[664350] "expr temp" "maybe param" "maybe type" "temp"
        (664353 'move' call_tmp[664350](139251 call == kind[139206] initCopy[137995]))
        (568086 'move' tmp[568084](426795 call isTrue call_tmp[664350]))
        (568091 'move' tmp[568071](568088 '_paramFoldLogical' tmp[568072] tmp[568084]))
      }
      unknown call_tmp[664355] "expr temp" "maybe param" "maybe type" "temp"
      (664358 'move' call_tmp[664355](139366 call _cond_test tmp[568071]))
      if call_tmp[664355]
      {
        unknown call_tmp[664362] "expr temp" "maybe param" "maybe type" "temp"
        (664365 'move' call_tmp[664362](139257 call eltType _mt[243] a[139195]))
        unknown call_tmp[664367] "expr temp" "maybe param" "maybe type" "temp"
        (664370 'move' call_tmp[664367](139261 call needsInitWorkaround call_tmp[664362]))
        unknown call_tmp[664372] "expr temp" "maybe param" "maybe type" "temp"
        (664375 'move' call_tmp[664372](139331 call _cond_test call_tmp[664367]))
        if call_tmp[664372]
        {
          unknown call_tmp[664379] "expr temp" "maybe param" "maybe type" "temp"
          (664382 'move' call_tmp[664379](415797 call _dom _mt[243] a[139195]))
          unknown call_tmp[664384] "maybe param" "maybe type" "temp"
          (664387 'move' call_tmp[664384](415793 call chpl__staticAutoLocalCheck a[139195] call_tmp[664379]))
          unknown chpl__staticAutoLocalCheckSym[415792] "dead at end of block" "param"
          (543211 'init var' chpl__staticAutoLocalCheckSym[415792] call_tmp[664384])
          (480759 'end of statement')
          if chpl__staticAutoLocalCheckSym[415792]
          {
            unknown call_tmp[664391] "expr temp" "maybe param" "maybe type" "temp"
            (664394 'move' call_tmp[664391](139264 call _dom _mt[243] a[139195]))
            Forall {
              induction variables:
                
                unknown ai[139298] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664391]
              shadow variables:
                b[139268] 'in' intent outer var b[139200]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[139277] "dead at end of block" "ref var"
                unknown call_tmp[664396] "expr temp" "maybe param" "maybe type" "temp"
                (664399 'move' call_tmp[664396](415803 'may be local access' a[139195] ai[139298] chpl__staticAutoLocalCheckSym[415792] 1))
                (543214 'move' aa[139277](543213 'addr of' call_tmp[664396]))
                (139280 'end of statement')
                unknown call_tmp[664403] "maybe param" "maybe type" "temp"
                (664406 'move' call_tmp[664403](139283 call eltType _mt[243] a[139195]))
                unknown copy[139287] "dead at end of block" "no auto destroy"
                (543216 'init var' copy[139287] b[139268] call_tmp[664403])
                (139290 'end of statement' ai[139298] b[139268])
                (139295 '=' aa[139277] copy[139287])
                (480762 'end of statement' aa[139277] copy[139287])
              }
            }
          }
          {
            unknown call_tmp[664410] "expr temp" "maybe param" "maybe type" "temp"
            (664413 'move' call_tmp[664410](415782 call _dom _mt[243] a[139195]))
            Forall {
              induction variables:
                
                unknown ai[415779] "index var" "insert auto destroy"
              iterated expressions:
                call_tmp[664410]
              shadow variables:
                b[415786] 'in' intent outer var b[139200]
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                unknown aa[415761] "dead at end of block" "ref var"
                unknown call_tmp[664415] "expr temp" "maybe param" "maybe type" "temp"
                (664418 'move' call_tmp[664415](415763 call a[139195] ai[415779]))
                (543219 'move' aa[415761](543218 'addr of' call_tmp[664415]))
                (415766 'end of statement')
                unknown call_tmp[664422] "maybe param" "maybe type" "temp"
                (664425 'move' call_tmp[664422](415770 call eltType _mt[243] a[139195]))
                unknown copy[415767] "dead at end of block" "no auto destroy"
                (543221 'init var' copy[415767] b[415786] call_tmp[664422])
                (415774 'end of statement' ai[415779] b[415786])
                (415775 '=' aa[415761] copy[415767])
                (480767 'end of statement' aa[415761] copy[415767])
              }
            }
          }
        }
        {
          Forall {
            induction variables:
              
              unknown aa[139327] "index var" "insert auto destroy"
            iterated expressions:
              a[139195]
            shadow variables:
              b[139305] 'in' intent outer var b[139200]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              unknown call_tmp[664429] "maybe param" "maybe type" "temp"
              (664432 'move' call_tmp[664429](139311 call eltType _mt[243] a[139195]))
              unknown copy[139315] "dead at end of block" "no auto destroy"
              (543223 'init var' copy[139315] b[139305] call_tmp[664429])
              (139318 'end of statement' b[139305])
              (139324 '=' aa[139327] copy[139315])
              (480771 'end of statement' aa[139327] copy[139315])
            }
          }
        }
      }
      {
        unknown call_tmp[664434] "expr temp" "maybe param" "maybe type" "temp"
        (664437 'move' call_tmp[664434](139341 call == kind[139206] assign[137997]))
        unknown call_tmp[664439] "expr temp" "maybe param" "maybe type" "temp"
        (664442 'move' call_tmp[664439](139362 call _cond_test call_tmp[664434]))
        if call_tmp[664439]
        {
          Forall {
            induction variables:
              
              unknown aa[139358] "index var" "insert auto destroy"
            iterated expressions:
              a[139195]
            shadow variables:
              b[139346] 'in' intent outer var b[139200]
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              (139353 call = aa[139358] b[139346])
              (480774 'end of statement' aa[139358] b[139346])
            }
          }
        }
      }
    }
    {
      unknown call_tmp[664444] "expr temp" "maybe param" "maybe type" "temp"
      (664447 'move' call_tmp[664444](139376 call chpl__serializeAssignment a[139195] b[139200]))
      unknown call_tmp[664449] "expr temp" "maybe param" "maybe type" "temp"
      (664452 'move' call_tmp[664449](140117 call _cond_test call_tmp[664444]))
      if call_tmp[664449]
      {
        unknown call_tmp[664454] "expr temp" "maybe param" "maybe type" "temp"
        (664457 'move' call_tmp[664454](139382 call == kind[139206] move[137993]))
        unknown call_tmp[664459] "expr temp" "maybe param" "maybe type" "temp"
        (664462 'move' call_tmp[664459](139863 call _cond_test call_tmp[664454]))
        if call_tmp[664459]
        {
          unknown call_tmp[664466] "expr temp" "maybe param" "maybe type" "temp"
          (664469 'move' call_tmp[664466](139386 call eltType _mt[243] a[139195]))
          unknown call_tmp[664471] "expr temp" "maybe param" "maybe type" "temp"
          (664474 'move' call_tmp[664471](139390 call needsInitWorkaround call_tmp[664466]))
          unknown call_tmp[664476] "expr temp" "maybe param" "maybe type" "temp"
          (664479 'move' call_tmp[664476](139584 call _cond_test call_tmp[664471]))
          if call_tmp[664476]
          {
            {
              unknown _indexOfInterest[139446] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139447] "expr temp" "temp"
              unknown call_tmp[664483] "expr temp" "maybe param" "maybe type" "temp"
              (664486 'move' call_tmp[664483](139456 call _dom _mt[243] a[139195]))
              unknown call_tmp[664488] "expr temp" "maybe param" "maybe type" "temp"
              (664491 'move' call_tmp[664488](139459 call _getIterator call_tmp[664483]))
              unknown call_tmp[664493] "expr temp" "maybe param" "maybe type" "temp"
              (664496 'move' call_tmp[664493](139463 call _getIterator b[139200]))
              (139465 'move' _iterator[139447](139402 call _build_tuple call_tmp[664488] call_tmp[664493]))
              Defer
              {
                {
                  (139495 call _freeIterator _iterator[139447])
                }
              }
              { scopeless type
                (139470 'move' _indexOfInterest[139446](139467 call iteratorIndex _iterator[139447]))
              }
              ForLoop[139448]
              {
                (139475 call _check_tuple_var_decl _indexOfInterest[139446] 2)
                (480778 'end of statement')
                unknown ai[139481] "index var" "insert auto destroy"
                (480779 'end of statement')
                (139483 'move' ai[139481](139479 call _indexOfInterest[139446] 0))
                (480780 'end of statement' ai[139481])
                unknown bb[139488] "index var" "insert auto destroy"
                (480782 'end of statement')
                (139490 'move' bb[139488](139486 call _indexOfInterest[139446] 1))
                (480783 'end of statement' bb[139488])
                {
                  unknown aa[139407] "dead at end of block" "ref var"
                  unknown call_tmp[664498] "expr temp" "maybe param" "maybe type" "temp"
                  (664501 'move' call_tmp[664498](139406 call a[139195] ai[139481]))
                  (543226 'move' aa[139407](543225 'addr of' call_tmp[664498]))
                  (139410 'end of statement' ai[139481])
                  unknown call_tmp[664503] "expr temp" "maybe param" "maybe type" "temp"
                  (664506 'move' call_tmp[664503](139434 'steal' bb[139488]))
                  (139435 '=' aa[139407] call_tmp[664503])
                  (480786 'end of statement' aa[139407] bb[139488])
                  unknown call_tmp[664510] "expr temp" "maybe param" "maybe type" "temp"
                  (664513 'move' call_tmp[664510](139439 call eltType _mt[243] a[139195]))
                  (139444 call fixRuntimeType call_tmp[664510] aa[139407])
                  (480789 'end of statement' aa[139407])
                }
                label _continueLabel[139451]
                _indexOfInterest[139446]
                _iterator[139447]
              }
              label _breakLabel[139452]
            }
          }
          {
            {
              unknown _indexOfInterest[139531] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[139532] "expr temp" "temp"
              unknown call_tmp[664515] "expr temp" "maybe param" "maybe type" "temp"
              (664518 'move' call_tmp[664515](139541 call _getIterator a[139195]))
              unknown call_tmp[664520] "expr temp" "maybe param" "maybe type" "temp"
              (664523 'move' call_tmp[664520](139544 call _getIterator b[139200]))
              (139546 'move' _iterator[139532](139511 call _build_tuple call_tmp[664515] call_tmp[664520]))
              Defer
              {
                {
                  (139576 call _freeIterator _iterator[139532])
                }
              }
              { scopeless type
                (139551 'move' _indexOfInterest[139531](139548 call iteratorIndex _iterator[139532]))
              }
              ForLoop[139533]
              {
                (139556 call _check_tuple_var_decl _indexOfInterest[139531] 2)
                (480792 'end of statement')
                unknown aa[139562] "index var" "insert auto destroy"
                (480793 'end of statement')
                (139564 'move' aa[139562](139560 call _indexOfInterest[139531] 0))
                (480794 'end of statement' aa[139562])
                unknown bb[139569] "index var" "insert auto destroy"
                (480796 'end of statement')
                (139571 'move' bb[139569](139567 call _indexOfInterest[139531] 1))
                (480797 'end of statement' bb[139569])
                {
                  unknown call_tmp[664525] "expr temp" "maybe param" "maybe type" "temp"
                  (664528 'move' call_tmp[664525](139518 'steal' bb[139569]))
                  (139519 '=' aa[139562] call_tmp[664525])
                  (480799 'end of statement' aa[139562] bb[139569])
                  unknown call_tmp[664532] "expr temp" "maybe param" "maybe type" "temp"
                  (664535 'move' call_tmp[664532](139524 call eltType _mt[243] a[139195]))
                  (139529 call fixRuntimeType call_tmp[664532] aa[139562])
                  (480802 'end of statement' aa[139562])
                }
                label _continueLabel[139536]
                _indexOfInterest[139531]
                _iterator[139532]
              }
              label _breakLabel[139537]
            }
          }
        }
        {
          unknown call_tmp[664537] "expr temp" "maybe param" "maybe type" "temp"
          (664540 'move' call_tmp[664537](139594 call == kind[139206] initCopy[137995]))
          unknown call_tmp[664542] "expr temp" "maybe param" "maybe type" "temp"
          (664545 'move' call_tmp[664542](139858 call _cond_test call_tmp[664537]))
          if call_tmp[664542]
          {
            unknown call_tmp[664549] "expr temp" "maybe param" "maybe type" "temp"
            (664552 'move' call_tmp[664549](139598 call eltType _mt[243] a[139195]))
            unknown call_tmp[664554] "expr temp" "maybe param" "maybe type" "temp"
            (664557 'move' call_tmp[664554](139602 call needsInitWorkaround call_tmp[664549]))
            unknown call_tmp[664559] "expr temp" "maybe param" "maybe type" "temp"
            (664562 'move' call_tmp[664559](139774 call _cond_test call_tmp[664554]))
            if call_tmp[664559]
            {
              {
                unknown _indexOfInterest[139639] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139640] "expr temp" "temp"
                unknown call_tmp[664566] "expr temp" "maybe param" "maybe type" "temp"
                (664569 'move' call_tmp[664566](139649 call _dom _mt[243] a[139195]))
                unknown call_tmp[664571] "expr temp" "maybe param" "maybe type" "temp"
                (664574 'move' call_tmp[664571](139652 call _getIterator call_tmp[664566]))
                unknown call_tmp[664576] "expr temp" "maybe param" "maybe type" "temp"
                (664579 'move' call_tmp[664576](139656 call _getIterator b[139200]))
                (139658 'move' _iterator[139640](139614 call _build_tuple call_tmp[664571] call_tmp[664576]))
                Defer
                {
                  {
                    (139688 call _freeIterator _iterator[139640])
                  }
                }
                { scopeless type
                  (139663 'move' _indexOfInterest[139639](139660 call iteratorIndex _iterator[139640]))
                }
                ForLoop[139641]
                {
                  (139668 call _check_tuple_var_decl _indexOfInterest[139639] 2)
                  (480805 'end of statement')
                  unknown ai[139674] "index var" "insert auto destroy"
                  (480806 'end of statement')
                  (139676 'move' ai[139674](139672 call _indexOfInterest[139639] 0))
                  (480807 'end of statement' ai[139674])
                  unknown bb[139681] "index var" "insert auto destroy"
                  (480809 'end of statement')
                  (139683 'move' bb[139681](139679 call _indexOfInterest[139639] 1))
                  (480810 'end of statement' bb[139681])
                  {
                    unknown aa[139619] "dead at end of block" "ref var"
                    unknown call_tmp[664581] "expr temp" "maybe param" "maybe type" "temp"
                    (664584 'move' call_tmp[664581](139618 call a[139195] ai[139674]))
                    (543229 'move' aa[139619](543228 'addr of' call_tmp[664581]))
                    (139622 'end of statement')
                    unknown call_tmp[664588] "maybe param" "maybe type" "temp"
                    (664591 'move' call_tmp[664588](139625 call eltType _mt[243] a[139195]))
                    unknown copy[139629] "dead at end of block" "no auto destroy"
                    (543231 'init var' copy[139629] b[139200] call_tmp[664588])
                    (139632 'end of statement' ai[139674])
                    (139637 '=' aa[139619] copy[139629])
                    (480813 'end of statement' aa[139619] copy[139629])
                  }
                  label _continueLabel[139644]
                  _indexOfInterest[139639]
                  _iterator[139640]
                }
                label _breakLabel[139645]
              }
            }
            {
              {
                unknown _indexOfInterest[139721] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139722] "expr temp" "temp"
                unknown call_tmp[664593] "expr temp" "maybe param" "maybe type" "temp"
                (664596 'move' call_tmp[664593](139731 call _getIterator a[139195]))
                unknown call_tmp[664598] "expr temp" "maybe param" "maybe type" "temp"
                (664601 'move' call_tmp[664598](139734 call _getIterator b[139200]))
                (139736 'move' _iterator[139722](139704 call _build_tuple call_tmp[664593] call_tmp[664598]))
                Defer
                {
                  {
                    (139766 call _freeIterator _iterator[139722])
                  }
                }
                { scopeless type
                  (139741 'move' _indexOfInterest[139721](139738 call iteratorIndex _iterator[139722]))
                }
                ForLoop[139723]
                {
                  (139746 call _check_tuple_var_decl _indexOfInterest[139721] 2)
                  (480817 'end of statement')
                  unknown aa[139752] "index var" "insert auto destroy"
                  (480818 'end of statement')
                  (139754 'move' aa[139752](139750 call _indexOfInterest[139721] 0))
                  (480819 'end of statement' aa[139752])
                  unknown bb[139759] "index var" "insert auto destroy"
                  (480821 'end of statement')
                  (139761 'move' bb[139759](139757 call _indexOfInterest[139721] 1))
                  (480822 'end of statement' bb[139759])
                  {
                    unknown call_tmp[664605] "maybe param" "maybe type" "temp"
                    (664608 'move' call_tmp[664605](139706 call eltType _mt[243] a[139195]))
                    unknown copy[139710] "dead at end of block" "no auto destroy"
                    (543233 'init var' copy[139710] b[139200] call_tmp[664605])
                    (139713 'end of statement')
                    (139719 '=' aa[139752] copy[139710])
                    (480824 'end of statement' aa[139752] copy[139710])
                  }
                  label _continueLabel[139726]
                  _indexOfInterest[139721]
                  _iterator[139722]
                }
                label _breakLabel[139727]
              }
            }
          }
          {
            unknown call_tmp[664610] "expr temp" "maybe param" "maybe type" "temp"
            (664613 'move' call_tmp[664610](139784 call == kind[139206] assign[137997]))
            unknown call_tmp[664615] "expr temp" "maybe param" "maybe type" "temp"
            (664618 'move' call_tmp[664615](139854 call _cond_test call_tmp[664610]))
            if call_tmp[664615]
            {
              {
                unknown _indexOfInterest[139801] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139802] "expr temp" "temp"
                unknown call_tmp[664620] "expr temp" "maybe param" "maybe type" "temp"
                (664623 'move' call_tmp[664620](139811 call _getIterator a[139195]))
                unknown call_tmp[664625] "expr temp" "maybe param" "maybe type" "temp"
                (664628 'move' call_tmp[664625](139814 call _getIterator b[139200]))
                (139816 'move' _iterator[139802](139794 call _build_tuple call_tmp[664620] call_tmp[664625]))
                Defer
                {
                  {
                    (139846 call _freeIterator _iterator[139802])
                  }
                }
                { scopeless type
                  (139821 'move' _indexOfInterest[139801](139818 call iteratorIndex _iterator[139802]))
                }
                ForLoop[139803]
                {
                  (139826 call _check_tuple_var_decl _indexOfInterest[139801] 2)
                  (480828 'end of statement')
                  unknown aa[139832] "index var" "insert auto destroy"
                  (480829 'end of statement')
                  (139834 'move' aa[139832](139830 call _indexOfInterest[139801] 0))
                  (480830 'end of statement' aa[139832])
                  unknown bb[139839] "index var" "insert auto destroy"
                  (480832 'end of statement')
                  (139841 'move' bb[139839](139837 call _indexOfInterest[139801] 1))
                  (480833 'end of statement' bb[139839])
                  {
                    (139797 call = aa[139832] bb[139839])
                    (480835 'end of statement' aa[139832] bb[139839])
                  }
                  label _continueLabel[139806]
                  _indexOfInterest[139801]
                  _iterator[139802]
                }
                label _breakLabel[139807]
              }
            }
          }
        }
      }
      {
        unknown call_tmp[664630] "expr temp" "maybe param" "maybe type" "temp"
        (664633 'move' call_tmp[664630](139874 call == kind[139206] move[137993]))
        unknown call_tmp[664635] "expr temp" "maybe param" "maybe type" "temp"
        (664638 'move' call_tmp[664635](140111 call _cond_test call_tmp[664630]))
        if call_tmp[664635]
        {
          unknown call_tmp[664642] "expr temp" "maybe param" "maybe type" "temp"
          (664645 'move' call_tmp[664642](139878 call eltType _mt[243] a[139195]))
          unknown call_tmp[664647] "expr temp" "maybe param" "maybe type" "temp"
          (664650 'move' call_tmp[664647](139882 call needsInitWorkaround call_tmp[664642]))
          unknown call_tmp[664652] "expr temp" "maybe param" "maybe type" "temp"
          (664655 'move' call_tmp[664652](139968 call _cond_test call_tmp[664647]))
          if call_tmp[664652]
          {
            unknown call_tmp[664659] "expr temp" "maybe param" "maybe type" "temp"
            (664662 'move' call_tmp[664659](415844 call _dom _mt[243] a[139195]))
            unknown call_tmp[664664] "maybe param" "maybe type" "temp"
            (664667 'move' call_tmp[664664](415840 call chpl__staticAutoLocalCheck a[139195] call_tmp[664659]))
            unknown chpl__staticAutoLocalCheckSym[415839] "dead at end of block" "param"
            (543235 'init var' chpl__staticAutoLocalCheckSym[415839] call_tmp[664664])
            (480838 'end of statement')
            if chpl__staticAutoLocalCheckSym[415839]
            {
              unknown call_tmp[664671] "expr temp" "maybe param" "maybe type" "temp"
              (664674 'move' call_tmp[664671](139890 call _dom _mt[243] a[139195]))
              Forall {
                induction variables:
                  
                  unknown ai[139925] "index var" "insert auto destroy"
                  
                  unknown bb[139927] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664671]
                  b[139200]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[139900] "dead at end of block" "ref var"
                    unknown call_tmp[664676] "expr temp" "maybe param" "maybe type" "temp"
                    (664679 'move' call_tmp[664676](415850 'may be local access' a[139195] ai[139925] chpl__staticAutoLocalCheckSym[415839] 1))
                    (543238 'move' aa[139900](543237 'addr of' call_tmp[664676]))
                    (139903 'end of statement' ai[139925])
                    unknown call_tmp[664681] "expr temp" "maybe param" "maybe type" "temp"
                    (664684 'move' call_tmp[664681](139911 'steal' bb[139927]))
                    (139912 '=' aa[139900] call_tmp[664681])
                    (480840 'end of statement' aa[139900] bb[139927])
                    unknown call_tmp[664688] "expr temp" "maybe param" "maybe type" "temp"
                    (664691 'move' call_tmp[664688](139916 call eltType _mt[243] a[139195]))
                    (139921 call fixRuntimeType call_tmp[664688] aa[139900])
                    (480843 'end of statement' aa[139900])
                  }
                }
              }
            }
            {
              unknown call_tmp[664695] "expr temp" "maybe param" "maybe type" "temp"
              (664698 'move' call_tmp[664695](415835 call _dom _mt[243] a[139195]))
              Forall {
                induction variables:
                  
                  unknown ai[415830] "index var" "insert auto destroy"
                  
                  unknown bb[415832] "index var" "insert auto destroy"
                iterated expressions:
                  call_tmp[664695]
                  b[139200]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown aa[415812] "dead at end of block" "ref var"
                    unknown call_tmp[664700] "expr temp" "maybe param" "maybe type" "temp"
                    (664703 'move' call_tmp[664700](415814 call a[139195] ai[415830]))
                    (543241 'move' aa[415812](543240 'addr of' call_tmp[664700]))
                    (415817 'end of statement' ai[415830])
                    unknown call_tmp[664705] "expr temp" "maybe param" "maybe type" "temp"
                    (664708 'move' call_tmp[664705](415820 'steal' bb[415832]))
                    (415818 '=' aa[415812] call_tmp[664705])
                    (480846 'end of statement' aa[415812] bb[415832])
                    unknown call_tmp[664712] "expr temp" "maybe param" "maybe type" "temp"
                    (664715 'move' call_tmp[664712](415825 call eltType _mt[243] a[139195]))
                    (415823 call fixRuntimeType call_tmp[664712] aa[415812])
                    (480849 'end of statement' aa[415812])
                  }
                }
              }
            }
          }
          {
            Forall {
              induction variables:
                
                unknown aa[139962] "index var" "insert auto destroy"
                
                unknown bb[139964] "index var" "insert auto destroy"
              iterated expressions:
                a[139195]
                b[139200]
              shadow variables:
              other variables
                forall body
              {
                {
                  unknown call_tmp[664717] "expr temp" "maybe param" "maybe type" "temp"
                  (664720 'move' call_tmp[664717](139947 'steal' bb[139964]))
                  (139948 '=' aa[139962] call_tmp[664717])
                  (480851 'end of statement' aa[139962] bb[139964])
                  unknown call_tmp[664724] "expr temp" "maybe param" "maybe type" "temp"
                  (664727 'move' call_tmp[664724](139953 call eltType _mt[243] a[139195]))
                  (139958 call fixRuntimeType call_tmp[664724] aa[139962])
                  (480854 'end of statement' aa[139962])
                }
              }
            }
          }
        }
        {
          unknown call_tmp[664729] "expr temp" "maybe param" "maybe type" "temp"
          (664732 'move' call_tmp[664729](139978 call == kind[139206] initCopy[137995]))
          unknown call_tmp[664734] "expr temp" "maybe param" "maybe type" "temp"
          (664737 'move' call_tmp[664734](140106 call _cond_test call_tmp[664729]))
          if call_tmp[664734]
          {
            unknown call_tmp[664741] "expr temp" "maybe param" "maybe type" "temp"
            (664744 'move' call_tmp[664741](139982 call eltType _mt[243] a[139195]))
            unknown call_tmp[664746] "expr temp" "maybe param" "maybe type" "temp"
            (664749 'move' call_tmp[664746](139986 call needsInitWorkaround call_tmp[664741]))
            unknown call_tmp[664751] "expr temp" "maybe param" "maybe type" "temp"
            (664754 'move' call_tmp[664751](140066 call _cond_test call_tmp[664746]))
            if call_tmp[664751]
            {
              unknown call_tmp[664758] "expr temp" "maybe param" "maybe type" "temp"
              (664761 'move' call_tmp[664758](415891 call _dom _mt[243] a[139195]))
              unknown call_tmp[664763] "maybe param" "maybe type" "temp"
              (664766 'move' call_tmp[664763](415887 call chpl__staticAutoLocalCheck a[139195] call_tmp[664758]))
              unknown chpl__staticAutoLocalCheckSym[415886] "dead at end of block" "param"
              (543243 'init var' chpl__staticAutoLocalCheckSym[415886] call_tmp[664763])
              (480856 'end of statement')
              if chpl__staticAutoLocalCheckSym[415886]
              {
                unknown call_tmp[664770] "expr temp" "maybe param" "maybe type" "temp"
                (664773 'move' call_tmp[664770](139994 call _dom _mt[243] a[139195]))
                Forall {
                  induction variables:
                    
                    unknown ai[140026] "index var" "insert auto destroy"
                    
                    unknown bb[140028] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664770]
                    b[139200]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[140004] "dead at end of block" "ref var"
                      unknown call_tmp[664775] "expr temp" "maybe param" "maybe type" "temp"
                      (664778 'move' call_tmp[664775](415897 'may be local access' a[139195] ai[140026] chpl__staticAutoLocalCheckSym[415886] 1))
                      (543246 'move' aa[140004](543245 'addr of' call_tmp[664775]))
                      (140007 'end of statement')
                      unknown call_tmp[664782] "maybe param" "maybe type" "temp"
                      (664785 'move' call_tmp[664782](140010 call eltType _mt[243] a[139195]))
                      unknown copy[140014] "dead at end of block" "no auto destroy"
                      (543248 'init var' copy[140014] bb[140028] call_tmp[664782])
                      (140017 'end of statement' ai[140026] bb[140028])
                      (140022 '=' aa[140004] copy[140014])
                      (480859 'end of statement' aa[140004] copy[140014])
                    }
                  }
                }
              }
              {
                unknown call_tmp[664789] "expr temp" "maybe param" "maybe type" "temp"
                (664792 'move' call_tmp[664789](415882 call _dom _mt[243] a[139195]))
                Forall {
                  induction variables:
                    
                    unknown ai[415877] "index var" "insert auto destroy"
                    
                    unknown bb[415879] "index var" "insert auto destroy"
                  iterated expressions:
                    call_tmp[664789]
                    b[139200]
                  shadow variables:
                  other variables
                    forall body
                  {
                    {
                      unknown aa[415859] "dead at end of block" "ref var"
                      unknown call_tmp[664794] "expr temp" "maybe param" "maybe type" "temp"
                      (664797 'move' call_tmp[664794](415861 call a[139195] ai[415877]))
                      (543251 'move' aa[415859](543250 'addr of' call_tmp[664794]))
                      (415864 'end of statement')
                      unknown call_tmp[664801] "maybe param" "maybe type" "temp"
                      (664804 'move' call_tmp[664801](415868 call eltType _mt[243] a[139195]))
                      unknown copy[415865] "dead at end of block" "no auto destroy"
                      (543253 'init var' copy[415865] bb[415879] call_tmp[664801])
                      (415872 'end of statement' ai[415877] bb[415879])
                      (415873 '=' aa[415859] copy[415865])
                      (480864 'end of statement' aa[415859] copy[415865])
                    }
                  }
                }
              }
            }
            {
              Forall {
                induction variables:
                  
                  unknown aa[140060] "index var" "insert auto destroy"
                  
                  unknown bb[140062] "index var" "insert auto destroy"
                iterated expressions:
                  a[139195]
                  b[139200]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    unknown call_tmp[664808] "maybe param" "maybe type" "temp"
                    (664811 'move' call_tmp[664808](140043 call eltType _mt[243] a[139195]))
                    unknown copy[140047] "dead at end of block" "no auto destroy"
                    (543255 'init var' copy[140047] bb[140062] call_tmp[664808])
                    (140050 'end of statement' bb[140062])
                    (140056 '=' aa[140060] copy[140047])
                    (480868 'end of statement' aa[140060] copy[140047])
                  }
                }
              }
            }
          }
          {
            unknown call_tmp[664813] "expr temp" "maybe param" "maybe type" "temp"
            (664816 'move' call_tmp[664813](140076 call == kind[139206] assign[137997]))
            unknown call_tmp[664818] "expr temp" "maybe param" "maybe type" "temp"
            (664821 'move' call_tmp[664818](140102 call _cond_test call_tmp[664813]))
            if call_tmp[664818]
            {
              Forall {
                induction variables:
                  
                  unknown aa[140096] "index var" "insert auto destroy"
                  
                  unknown bb[140098] "index var" "insert auto destroy"
                iterated expressions:
                  a[139195]
                  b[139200]
                shadow variables:
                other variables
                  forall body
                {
                  {
                    (140090 call = aa[140096] bb[140098])
                    (480871 'end of statement' aa[140096] bb[140098])
                  }
                }
              }
            }
          }
        }
      }
    }
    (519189 return _void[55])
  }
  {
    (139213 call <=(139210 'lifetime_of' a[139195])(139212 'lifetime_of' b[139200]))
  }
  function chpl__transferArray[140138](ref arg a[140135]:_array[133600](?), param arg b[140140]:_any[178](?), param arg kind[140146] :
  assign[137997] =
  assign[137997]) : _unknown[51] "inline" "find user line" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown aa[140157] "index var" "insert auto destroy"
      iterated expressions:
        a[140135]
      shadow variables:
      other variables
        forall body
      {
        (140153 call = aa[140157] b[140140])
        (480874 'end of statement' aa[140157])
      }
    }
    (519191 return _void[55])
  }
  function =[140171](ref arg a[140168]:_array[133600](?), arg b[140174]:_domain[125914](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664825] "expr temp" "maybe param" "maybe type" "temp"
    (664828 'move' call_tmp[664825](140178 call rank _mt[243] a[140168]))
    unknown call_tmp[664832] "expr temp" "maybe param" "maybe type" "temp"
    (664835 'move' call_tmp[664832](140182 call rank _mt[243] b[140174]))
    unknown call_tmp[664837] "expr temp" "maybe param" "maybe type" "temp"
    (664840 'move' call_tmp[664837](140185 call != call_tmp[664825] call_tmp[664832]))
    unknown call_tmp[664842] "expr temp" "maybe param" "maybe type" "temp"
    (664845 'move' call_tmp[664842](140192 call _cond_test call_tmp[664837]))
    if call_tmp[664842]
    {
      (140190 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[426853] "maybe param" "temp"
    (426864 'move' tmp[426853](140201 call isAssociativeDom b[140174]))
    unknown call_tmp[664847] "expr temp" "maybe param" "maybe type" "temp"
    (664850 'move' call_tmp[664847](426866 call _cond_invalid tmp[426853]))
    if call_tmp[664847]
    {
      (426869 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568098] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568099] "maybe param" "temp"
    unknown call_tmp[664852] "expr temp" "maybe param" "maybe type" "temp"
    (664855 'move' call_tmp[664852](426854 call isTrue tmp[426853]))
    (568104 'move' tmp[568099](568102 call _cond_test call_tmp[664852]))
    if tmp[568099]
    {
      unknown tmp[568106] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[664857] "expr temp" "maybe param" "maybe type" "temp"
      (664860 'move' call_tmp[664857](140205 call isRectangularArr a[140168]))
      (568108 'move' tmp[568106](426857 call isTrue call_tmp[664857]))
      (568113 'move' tmp[568098](568110 '_paramFoldLogical' tmp[568099] tmp[568106]))
    }
    {
      (568118 'move' tmp[568098](568115 '_paramFoldLogical' tmp[568099] 0))
    }
    unknown call_tmp[664862] "expr temp" "maybe param" "maybe type" "temp"
    (664865 'move' call_tmp[664862](140229 call _cond_test tmp[568098]))
    if call_tmp[664862]
    {
      (140227 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    (140238 call chpl__transferArray a[140168] b[140174])
    (519193 return _void[55])
  }
  function =[140250](arg a[140247]:_array[133600](?), arg b[140256]:range[64316](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[664869] "expr temp" "maybe param" "maybe type" "temp"
    (664872 'move' call_tmp[664869](140260 call rank _mt[243] a[140247]))
    unknown call_tmp[664874] "expr temp" "maybe param" "maybe type" "temp"
    (664877 'move' call_tmp[664874](140264 call == call_tmp[664869] 1))
    unknown call_tmp[664879] "expr temp" "maybe param" "maybe type" "temp"
    (664882 'move' call_tmp[664879](140293 call _cond_test call_tmp[664874]))
    if call_tmp[664879]
    {
      (140270 call chpl__transferArray a[140247] b[140256])
    }
    {
      (140291 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (519195 return _void[55])
  }
  function =[140310](ref arg a[140307]:_array[133600](?), arg b[140312]:_any[178](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    (140318 call chpl__transferArray a[140307] b[140312])
    (519197 return _void[55])
  }
  function helpInitArrFromTuple[140327](ref arg j[140325]:_any[178](?), param arg rank[140330]:int(64)[13], ref arg a[140336]:_array[133600](?), arg b[140340]:_tuple[56199](?), param arg kind[140344]:_tElt[137999]) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[664886] "expr temp" "maybe param" "maybe type" "temp"
    (664889 'move' call_tmp[664886](140354 call _dom _mt[243] a[140336]))
    unknown idxType[140373] "dead at end of block" "insert auto destroy" "type variable"(140357 call idxType _mt[243] call_tmp[664886])
    unknown call_tmp[664895] "expr temp" "maybe param" "maybe type" "temp"
    (664898 'move' call_tmp[664895](543260 call _dom _mt[243] a[140336]))
    (543264 'move' idxType[140373](543258 call idxType _mt[243] call_tmp[664895]))
    unknown call_tmp[664904] "expr temp" "maybe param" "maybe type" "temp"
    (664907 'move' call_tmp[664904](140362 call _dom _mt[243] a[140336]))
    unknown call_tmp[664911] "expr temp" "maybe param" "maybe type" "temp"
    (664914 'move' call_tmp[664911](140365 call intIdxType _mt[243] call_tmp[664904]))
    unknown strType[140370] "dead at end of block" "insert auto destroy" "type variable"(140369 call chpl__signedType call_tmp[664911])
    unknown call_tmp[664918] "expr temp" "maybe param" "maybe type" "temp"
    (664921 'move' call_tmp[664918](543271 call _dom _mt[243] a[140336]))
    unknown call_tmp[664925] "expr temp" "maybe param" "maybe type" "temp"
    (664928 'move' call_tmp[664925](543269 call intIdxType _mt[243] call_tmp[664918]))
    (543275 'move' strType[140370](543267 call chpl__signedType call_tmp[664925]))
    unknown call_tmp[664932] "expr temp" "maybe param" "maybe type" "temp"
    (664935 'move' call_tmp[664932](140378 call _dom _mt[243] a[140336]))
    unknown call_tmp[664941] "expr temp" "maybe param" "maybe type" "temp"
    (664944 'move' call_tmp[664941](140385 call rank _mt[243] a[140336]))
    unknown call_tmp[664946] "expr temp" "maybe param" "maybe type" "temp"
    (664949 'move' call_tmp[664946](140389 call - call_tmp[664941] rank[140330]))
    unknown call_tmp[664951] "expr temp" "maybe param" "maybe type" "temp"
    (664954 'move' call_tmp[664951](140392 call(140381 call (partial) dim _mt[243] call_tmp[664932]) call_tmp[664946]))
    unknown call_tmp[664958] "maybe param" "maybe type" "temp"
    (664961 'move' call_tmp[664958](140393 call stride _mt[243] call_tmp[664951]))
    const stride[140396] "dead at end of block" "const" "insert auto destroy"
    (543277 'init var' stride[140396] call_tmp[664958])
    unknown call_tmp[664965] "expr temp" "maybe param" "maybe type" "temp"
    (664968 'move' call_tmp[664965](140400 call _dom _mt[243] a[140336]))
    unknown call_tmp[664974] "expr temp" "maybe param" "maybe type" "temp"
    (664977 'move' call_tmp[664974](140407 call rank _mt[243] a[140336]))
    unknown call_tmp[664979] "expr temp" "maybe param" "maybe type" "temp"
    (664982 'move' call_tmp[664979](140411 call - call_tmp[664974] rank[140330]))
    unknown call_tmp[664984] "expr temp" "maybe param" "maybe type" "temp"
    (664987 'move' call_tmp[664984](140414 call(140403 call (partial) dim _mt[243] call_tmp[664965]) call_tmp[664979]))
    unknown call_tmp[664991] "maybe param" "maybe type" "temp"
    (664994 'move' call_tmp[664991](140415 call firstAsInt _mt[243] call_tmp[664984]))
    const start[140418] "dead at end of block" "const" "insert auto destroy"
    (543279 'init var' start[140418] call_tmp[664991])
    (140421 'end of statement')
    unknown call_tmp[664996] "expr temp" "maybe param" "maybe type" "temp"
    (664999 'move' call_tmp[664996](140424 call == rank[140330] 1))
    unknown call_tmp[665001] "expr temp" "maybe param" "maybe type" "temp"
    (665004 'move' call_tmp[665001](140716 call _cond_test call_tmp[664996]))
    if call_tmp[665001]
    {
      {
        unknown i[140581] "dead at end of block" "insert auto destroy"
        (543281 'init var' i[140581] 0)
        (480883 'end of statement')
        unknown tmp[140582] "maybe param" "temp"
        unknown call_tmp[665008] "expr temp" "maybe param" "maybe type" "temp"
        (665011 'move' call_tmp[665008](140428 call size _mt[243] b[140340]))
        unknown call_tmp[665013] "expr temp" "maybe param" "maybe type" "temp"
        (665016 'move' call_tmp[665013](140432 call - call_tmp[665008] 1))
        (140594 'move' tmp[140582](140592 call chpl_compute_low_param_loop_bound 0 call_tmp[665013]))
        unknown tmp[140583] "maybe param" "temp"
        unknown call_tmp[665020] "expr temp" "maybe param" "maybe type" "temp"
        (665023 'move' call_tmp[665020](140601 call size _mt[243] b[140340]))
        unknown call_tmp[665025] "expr temp" "maybe param" "maybe type" "temp"
        (665028 'move' call_tmp[665025](140599 call - call_tmp[665020] 1))
        (140607 'move' tmp[140583](140605 call chpl_compute_high_param_loop_bound 0 call_tmp[665025]))
        unknown tmp[140584] "maybe param" "temp"
        (140610 'move' tmp[140584] 1)
        ParamForLoop[140612]
        { i[140581] tmp[140582] tmp[140583] tmp[140584]
          {
            unknown call_tmp[665032] "expr temp" "maybe param" "maybe type" "temp"
            (665035 'move' call_tmp[665032](140438 call rank _mt[243] a[140336]))
            unknown call_tmp[665037] "expr temp" "maybe param" "maybe type" "temp"
            (665040 'move' call_tmp[665037](140442 call - call_tmp[665032] rank[140330]))
            unknown call_tmp[665042] "expr temp" "maybe param" "maybe type" "temp"
            (665045 'move' call_tmp[665042](140445 call j[140325] call_tmp[665037]))
            unknown call_tmp[665047] "expr temp" "maybe param" "maybe type" "temp"
            (665050 'move' call_tmp[665047](140451 call _cast strType[140370] start[140418]))
            unknown call_tmp[665052] "expr temp" "maybe param" "maybe type" "temp"
            (665055 'move' call_tmp[665052](140455 call * i[140581] stride[140396]))
            unknown call_tmp[665057] "expr temp" "maybe param" "maybe type" "temp"
            (665060 'move' call_tmp[665057](140457 call + call_tmp[665047] call_tmp[665052]))
            unknown call_tmp[665062] "expr temp" "maybe param" "maybe type" "temp"
            (665065 'move' call_tmp[665062](140459 call chpl__intToIdx idxType[140373] call_tmp[665057]))
            (140460 call = call_tmp[665042] call_tmp[665062])
            (480884 'end of statement' idxType[140373] strType[140370] start[140418] i[140581] stride[140396])
            unknown dst[140468] "dead at end of block" "ref var"
            unknown call_tmp[665067] "expr temp" "maybe param" "maybe type" "temp"
            (665070 'move' call_tmp[665067](140467 call a[140336] j[140325]))
            (543284 'move' dst[140468](543283 'addr of' call_tmp[665067]))
            (140471 'end of statement')
            const src[140476] "dead at end of block" "const" "ref var"
            unknown call_tmp[665072] "expr temp" "maybe param" "maybe type" "temp"
            (665075 'move' call_tmp[665072](140475 call b[140340] i[140581]))
            (543287 'move' src[140476](543286 'addr of' call_tmp[665072]))
            (140479 'end of statement' i[140581])
            unknown call_tmp[665077] "expr temp" "maybe param" "maybe type" "temp"
            (665080 'move' call_tmp[665077](140485 call == kind[140344] move[137993]))
            unknown call_tmp[665082] "expr temp" "maybe param" "maybe type" "temp"
            (665085 'move' call_tmp[665082](140576 call _cond_test call_tmp[665077]))
            if call_tmp[665082]
            {
              unknown call_tmp[665087] "expr temp" "maybe param" "maybe type" "temp"
              (665090 'move' call_tmp[665087](140490 call isArray dst[140468]))
              unknown call_tmp[665092] "expr temp" "maybe param" "maybe type" "temp"
              (665095 'move' call_tmp[665092](140526 call _cond_test call_tmp[665087]))
              if call_tmp[665092]
              {
                unknown call_tmp[665099] "expr temp" "maybe param" "maybe type" "temp"
                (665102 'move' call_tmp[665099](140493 call eltType _mt[243] a[140336]))
                unknown call_tmp[665104] "maybe param" "maybe type" "temp"
                (665107 'move' call_tmp[665104](140498 call chpl__coerceMove call_tmp[665099] src[140476]))
                unknown newArr[140499] "dead at end of block" "no auto destroy" "no copy"
                (543289 'init var' newArr[140499] call_tmp[665104])
                (140502 'end of statement' src[140476])
                (140508 '=' dst[140468] newArr[140499])
                (480892 'end of statement' dst[140468] newArr[140499])
              }
              {
                (140514 '=' dst[140468] src[140476])
                (480895 'end of statement' dst[140468] src[140476])
                unknown call_tmp[665111] "expr temp" "maybe param" "maybe type" "temp"
                (665114 'move' call_tmp[665111](140519 call eltType _mt[243] a[140336]))
                (140524 call fixRuntimeType call_tmp[665111] dst[140468])
                (480898 'end of statement' dst[140468])
              }
            }
            {
              unknown call_tmp[665116] "expr temp" "maybe param" "maybe type" "temp"
              (665119 'move' call_tmp[665116](140536 call == kind[140344] initCopy[137995]))
              unknown call_tmp[665121] "expr temp" "maybe param" "maybe type" "temp"
              (665124 'move' call_tmp[665121](140571 call _cond_test call_tmp[665116]))
              if call_tmp[665121]
              {
                unknown call_tmp[665128] "maybe param" "maybe type" "temp"
                (665131 'move' call_tmp[665128](140539 call eltType _mt[243] a[140336]))
                unknown copy[140543] "dead at end of block" "no auto destroy"
                (543291 'init var' copy[140543] src[140476] call_tmp[665128])
                (140546 'end of statement' src[140476])
                (140552 '=' dst[140468] copy[140543])
                (480901 'end of statement' dst[140468] copy[140543])
              }
              {
                unknown call_tmp[665133] "expr temp" "maybe param" "maybe type" "temp"
                (665136 'move' call_tmp[665133](140559 call == kind[140344] assign[137997]))
                unknown call_tmp[665138] "expr temp" "maybe param" "maybe type" "temp"
                (665141 'move' call_tmp[665138](140567 call _cond_test call_tmp[665133]))
                if call_tmp[665138]
                {
                  (140563 call = dst[140468] src[140476])
                  (480904 'end of statement' dst[140468] src[140476])
                }
              }
            }
          }
        }
        label _unused_continueLabel[140586]
        label _breakLabel[140585]
      }
    }
    {
      {
        unknown i[140675] "dead at end of block" "insert auto destroy"
        (543293 'init var' i[140675] 0)
        (480907 'end of statement')
        unknown tmp[140676] "maybe param" "temp"
        unknown call_tmp[665145] "expr temp" "maybe param" "maybe type" "temp"
        (665148 'move' call_tmp[665145](140624 call size _mt[243] b[140340]))
        unknown call_tmp[665150] "expr temp" "maybe param" "maybe type" "temp"
        (665153 'move' call_tmp[665150](140628 call - call_tmp[665145] 1))
        (140688 'move' tmp[140676](140686 call chpl_compute_low_param_loop_bound 0 call_tmp[665150]))
        unknown tmp[140677] "maybe param" "temp"
        unknown call_tmp[665157] "expr temp" "maybe param" "maybe type" "temp"
        (665160 'move' call_tmp[665157](140695 call size _mt[243] b[140340]))
        unknown call_tmp[665162] "expr temp" "maybe param" "maybe type" "temp"
        (665165 'move' call_tmp[665162](140693 call - call_tmp[665157] 1))
        (140701 'move' tmp[140677](140699 call chpl_compute_high_param_loop_bound 0 call_tmp[665162]))
        unknown tmp[140678] "maybe param" "temp"
        (140704 'move' tmp[140678] 1)
        ParamForLoop[140706]
        { i[140675] tmp[140676] tmp[140677] tmp[140678]
          {
            unknown call_tmp[665169] "expr temp" "maybe param" "maybe type" "temp"
            (665172 'move' call_tmp[665169](140634 call rank _mt[243] a[140336]))
            unknown call_tmp[665174] "expr temp" "maybe param" "maybe type" "temp"
            (665177 'move' call_tmp[665174](140638 call - call_tmp[665169] rank[140330]))
            unknown call_tmp[665179] "expr temp" "maybe param" "maybe type" "temp"
            (665182 'move' call_tmp[665179](140641 call j[140325] call_tmp[665174]))
            unknown call_tmp[665184] "expr temp" "maybe param" "maybe type" "temp"
            (665187 'move' call_tmp[665184](140647 call _cast strType[140370] start[140418]))
            unknown call_tmp[665189] "expr temp" "maybe param" "maybe type" "temp"
            (665192 'move' call_tmp[665189](140651 call * i[140675] stride[140396]))
            unknown call_tmp[665194] "expr temp" "maybe param" "maybe type" "temp"
            (665197 'move' call_tmp[665194](140653 call + call_tmp[665184] call_tmp[665189]))
            unknown call_tmp[665199] "expr temp" "maybe param" "maybe type" "temp"
            (665202 'move' call_tmp[665199](140655 call chpl__intToIdx idxType[140373] call_tmp[665194]))
            (140656 call = call_tmp[665179] call_tmp[665199])
            (480908 'end of statement' idxType[140373] strType[140370] start[140418] i[140675] stride[140396])
            unknown call_tmp[665204] "expr temp" "maybe param" "maybe type" "temp"
            (665207 'move' call_tmp[665204](140665 call - rank[140330] 1))
            unknown call_tmp[665209] "expr temp" "maybe param" "maybe type" "temp"
            (665212 'move' call_tmp[665209](140671 call b[140340] i[140675]))
            (140673 call helpInitArrFromTuple j[140325] call_tmp[665204] a[140336] call_tmp[665209] kind[140344])
            (480914 'end of statement' i[140675])
          }
        }
        label _unused_continueLabel[140680]
        label _breakLabel[140679]
      }
    }
    (519199 return _void[55])
  }
  {
    (140351 call <(140348 'lifetime_of' a[140336])(140350 'lifetime_of' b[140340]))
  }
  function initArrFromTuple[140731](ref arg a[140728]:_array[133600](?), arg b[140734]:_tuple[56199](?), param arg kind[140738]:_tElt[137999]) : _unknown[51] "private" "no return value for void"
  {
    unknown j[140754] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665216] "expr temp" "maybe param" "maybe type" "temp"
    (665219 'move' call_tmp[665216](140742 call rank _mt[243] a[140728]))
    unknown call_tmp[665223] "expr temp" "maybe param" "maybe type" "temp"
    (665226 'move' call_tmp[665223](140746 call _dom _mt[243] a[140728]))
    unknown call_tmp[665230] "expr temp" "maybe param" "maybe type" "temp"
    (665233 'move' call_tmp[665230](140749 call idxType _mt[243] call_tmp[665223]))
    unknown call_tmp[665235] "expr temp" "maybe param" "maybe type" "temp"
    (665238 'move' call_tmp[665235](140752 call * call_tmp[665216] call_tmp[665230]))
    (543295 'default init var' j[140754] call_tmp[665235])
    (140757 'end of statement')
    unknown call_tmp[665242] "expr temp" "maybe param" "maybe type" "temp"
    (665245 'move' call_tmp[665242](140763 call rank _mt[243] a[140728]))
    (140769 call helpInitArrFromTuple j[140754] call_tmp[665242] a[140728] b[140734] kind[140738])
    (480916 'end of statement' j[140754])
    (519201 return _void[55])
  }
  function =[140781](ref arg a[140778]:_array[133600](?), arg b[140784]:_tuple[56199](?)) : _unknown[51] "assignop" "no return value for void"
  {
    (140799 call initArrFromTuple a[140778] b[140784] assign[137997])
    (519203 return _void[55])
  }
  where {
    (140790 call isRectangularArr a[140778])
  }
  function _desync[140811](arg t[140808]:_syncvar[84948](?)) type : _unknown[51]
  {
    unknown ret[519207] "RVV" "temp" "type variable"
    unknown x[140814] "dead at end of block" "insert auto destroy"
    (543297 'default init var' x[140814] t[140808])
    (140817 'end of statement')
    unknown call_tmp[665249] "expr temp" "maybe param" "maybe type" "temp"
    (665252 'move' call_tmp[665249](140820 call valType _mt[243] x[140814]))
    (519212 'move' ret[519207](519211 'deref' call_tmp[665249]))
    gotoReturn _end__desync[519205] _end__desync[519205]
    (480919 'end of statement' x[140814])
    label _end__desync[519205]
    (519209 return ret[519207])
  }
  function _desync[140833](arg t[140830]:_singlevar[87257](?)) type : _unknown[51]
  {
    unknown ret[519218] "RVV" "temp" "type variable"
    unknown x[140836] "dead at end of block" "insert auto destroy"
    (543299 'default init var' x[140836] t[140830])
    (140839 'end of statement')
    unknown call_tmp[665256] "expr temp" "maybe param" "maybe type" "temp"
    (665259 'move' call_tmp[665256](140842 call valType _mt[243] x[140836]))
    (519223 'move' ret[519218](519222 'deref' call_tmp[665256]))
    gotoReturn _end__desync[519216] _end__desync[519216]
    (480921 'end of statement' x[140836])
    label _end__desync[519216]
    (519220 return ret[519218])
  }
  function _desync[140853](arg t[140851]:_any[178](?)) type : _unknown[51]
  {
    unknown ret[519229] "RVV" "temp" "type variable"
    (519234 'move' ret[519229](519233 'deref' t[140851]))
    (519231 return ret[519229])
  }
  function desyncEltType[140867](arg t[140864]:_array[133600](?)) type : _unknown[51] "private"
  {
    unknown ret[519238] "RVV" "temp" "type variable"
    unknown eltType[140873] "dead at end of block" "insert auto destroy" "type variable"(140872 call chpl__eltTypeFromArrayRuntimeType t[140864])
    (543304 'move' eltType[140873](543302 call chpl__eltTypeFromArrayRuntimeType t[140864]))
    (480924 'end of statement')
    unknown call_tmp[665261] "expr temp" "maybe param" "maybe type" "temp"
    (665264 'move' call_tmp[665261](140880 call _desync eltType[140873]))
    (519243 'move' ret[519238](519242 'deref' call_tmp[665261]))
    gotoReturn _end_desyncEltType[519236] _end_desyncEltType[519236]
    (480925 'end of statement' eltType[140873])
    label _end_desyncEltType[519236]
    (519240 return ret[519238])
  }
  function =[140893](ref arg a[140890]:_array[133600](?), arg b[140902] :
  unknown call_tmp[665268] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140913] "index var" "insert auto destroy"
      iterated expressions:
        a[140890]
      shadow variables:
      other variables
        forall body
      {
        (140909 call = e[140913] b[140902])
        (480927 'end of statement' e[140913])
      }
    }
    (519247 return _void[55])
  }
  function +=[140927](arg a[140924]:_array[133600](?), arg b[140936] :
  unknown call_tmp[665275] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140947] "index var" "insert auto destroy"
      iterated expressions:
        a[140924]
      shadow variables:
      other variables
        forall body
      {
        (140943 call += e[140947] b[140936])
        (480929 'end of statement' e[140947])
      }
    }
    (519249 return _void[55])
  }
  function -=[140961](arg a[140958]:_array[133600](?), arg b[140970] :
  unknown call_tmp[665282] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140981] "index var" "insert auto destroy"
      iterated expressions:
        a[140958]
      shadow variables:
      other variables
        forall body
      {
        (140977 call -= e[140981] b[140970])
        (480931 'end of statement' e[140981])
      }
    }
    (519251 return _void[55])
  }
  function *=[140995](arg a[140992]:_array[133600](?), arg b[141004] :
  unknown call_tmp[665289] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141015] "index var" "insert auto destroy"
      iterated expressions:
        a[140992]
      shadow variables:
      other variables
        forall body
      {
        (141011 call *= e[141015] b[141004])
        (480933 'end of statement' e[141015])
      }
    }
    (519253 return _void[55])
  }
  function /=[141029](arg a[141026]:_array[133600](?), arg b[141038] :
  unknown call_tmp[665296] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141049] "index var" "insert auto destroy"
      iterated expressions:
        a[141026]
      shadow variables:
      other variables
        forall body
      {
        (141045 call /= e[141049] b[141038])
        (480935 'end of statement' e[141049])
      }
    }
    (519255 return _void[55])
  }
  function %=[141063](arg a[141060]:_array[133600](?), arg b[141072] :
  unknown call_tmp[665303] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141083] "index var" "insert auto destroy"
      iterated expressions:
        a[141060]
      shadow variables:
      other variables
        forall body
      {
        (141079 call %= e[141083] b[141072])
        (480937 'end of statement' e[141083])
      }
    }
    (519257 return _void[55])
  }
  function **=[141097](arg a[141094]:_array[133600](?), arg b[141106] :
  unknown call_tmp[665310] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141117] "index var" "insert auto destroy"
      iterated expressions:
        a[141094]
      shadow variables:
      other variables
        forall body
      {
        (141113 call **= e[141117] b[141106])
        (480939 'end of statement' e[141117])
      }
    }
    (519259 return _void[55])
  }
  function &=[141131](arg a[141128]:_array[133600](?), arg b[141140] :
  unknown call_tmp[665317] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141151] "index var" "insert auto destroy"
      iterated expressions:
        a[141128]
      shadow variables:
      other variables
        forall body
      {
        (141147 call &= e[141151] b[141140])
        (480941 'end of statement' e[141151])
      }
    }
    (519261 return _void[55])
  }
  function |=[141165](arg a[141162]:_array[133600](?), arg b[141174] :
  unknown call_tmp[665324] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141185] "index var" "insert auto destroy"
      iterated expressions:
        a[141162]
      shadow variables:
      other variables
        forall body
      {
        (141181 call |= e[141185] b[141174])
        (480943 'end of statement' e[141185])
      }
    }
    (519263 return _void[55])
  }
  function ^=[141199](arg a[141196]:_array[133600](?), arg b[141208] :
  unknown call_tmp[665331] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141219] "index var" "insert auto destroy"
      iterated expressions:
        a[141196]
      shadow variables:
      other variables
        forall body
      {
        (141215 call ^= e[141219] b[141208])
        (480945 'end of statement' e[141219])
      }
    }
    (519265 return _void[55])
  }
  function >>=[141233](arg a[141230]:_array[133600](?), arg b[141242] :
  unknown call_tmp[665338] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141253] "index var" "insert auto destroy"
      iterated expressions:
        a[141230]
      shadow variables:
      other variables
        forall body
      {
        (141249 call >>= e[141253] b[141242])
        (480947 'end of statement' e[141253])
      }
    }
    (519267 return _void[55])
  }
  function <<=[141267](arg a[141264]:_array[133600](?), arg b[141276] :
  unknown call_tmp[665345] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[141287] "index var" "insert auto destroy"
      iterated expressions:
        a[141264]
      shadow variables:
      other variables
        forall body
      {
        (141283 call <<= e[141287] b[141276])
        (480949 'end of statement' e[141287])
      }
    }
    (519269 return _void[55])
  }
  function chpl_by[141299](arg a[141296]:_domain[125914](?), arg b[141301]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519273] "RVV" "temp"
    unknown r[141324] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665352] "expr temp" "maybe param" "maybe type" "temp"
    (665355 'move' call_tmp[665352](141304 call rank _mt[243] a[141296]))
    unknown call_tmp[665359] "expr temp" "maybe param" "maybe type" "temp"
    (665362 'move' call_tmp[665359](141309 call _value _mt[243] a[141296]))
    unknown call_tmp[665366] "expr temp" "maybe param" "maybe type" "temp"
    (665369 'move' call_tmp[665366](141312 call idxType _mt[243] call_tmp[665359]))
    unknown call_tmp[665371] "expr temp" "maybe param" "maybe type" "temp"
    (665374 'move' call_tmp[665371](141321 call range[64316](?) call_tmp[665366] bounded[64205] 1))
    unknown call_tmp[665376] "expr temp" "maybe param" "maybe type" "temp"
    (665379 'move' call_tmp[665376](141322 call * call_tmp[665352] call_tmp[665371]))
    (543306 'default init var' r[141324] call_tmp[665376])
    (141327 'end of statement')
    unknown call_tmp[665383] "expr temp" "maybe param" "maybe type" "temp"
    (665386 'move' call_tmp[665383](141331 call rank _mt[243] a[141296]))
    unknown call_tmp[665388] "maybe param" "maybe type" "temp"
    (665391 'move' call_tmp[665388](141338 call _makeIndexTuple call_tmp[665383] b[141301](expand = 1)))
    unknown t[141339] "dead at end of block" "insert auto destroy"
    (543308 'init var' t[141339] call_tmp[665388])
    (141342 'end of statement')
    {
      unknown i[141373] "dead at end of block" "insert auto destroy"
      (543310 'init var' i[141373] 0)
      (480951 'end of statement')
      unknown tmp[141374] "maybe param" "temp"
      unknown call_tmp[665395] "expr temp" "maybe param" "maybe type" "temp"
      (665398 'move' call_tmp[665395](141345 call rank _mt[243] a[141296]))
      unknown call_tmp[665400] "expr temp" "maybe param" "maybe type" "temp"
      (665403 'move' call_tmp[665400](141349 call - call_tmp[665395] 1))
      (141386 'move' tmp[141374](141384 call chpl_compute_low_param_loop_bound 0 call_tmp[665400]))
      unknown tmp[141375] "maybe param" "temp"
      unknown call_tmp[665407] "expr temp" "maybe param" "maybe type" "temp"
      (665410 'move' call_tmp[665407](141393 call rank _mt[243] a[141296]))
      unknown call_tmp[665412] "expr temp" "maybe param" "maybe type" "temp"
      (665415 'move' call_tmp[665412](141391 call - call_tmp[665407] 1))
      (141399 'move' tmp[141375](141397 call chpl_compute_high_param_loop_bound 0 call_tmp[665412]))
      unknown tmp[141376] "maybe param" "temp"
      (141402 'move' tmp[141376] 1)
      ParamForLoop[141404]
      { i[141373] tmp[141374] tmp[141375] tmp[141376]
        unknown call_tmp[665417] "expr temp" "maybe param" "maybe type" "temp"
        (665420 'move' call_tmp[665417](141356 call r[141324] i[141373]))
        unknown call_tmp[665424] "expr temp" "maybe param" "maybe type" "temp"
        (665427 'move' call_tmp[665424](141363 call(141358 call (partial) dim _mt[243] a[141296]) i[141373]))
        unknown call_tmp[665429] "expr temp" "maybe param" "maybe type" "temp"
        (665432 'move' call_tmp[665429](141367 call t[141339] i[141373]))
        unknown call_tmp[665434] "expr temp" "maybe param" "maybe type" "temp"
        (665437 'move' call_tmp[665434](141368 call chpl_by call_tmp[665424] call_tmp[665429]))
        (141370 call = call_tmp[665417] call_tmp[665434])
        (480952 'end of statement' r[141324] i[141373] i[141373] t[141339] i[141373])
      }
      label _unused_continueLabel[141378]
      label _breakLabel[141377]
    }
    unknown call_tmp[665441] "expr temp" "maybe param" "maybe type" "temp"
    (665444 'move' call_tmp[665441](141416 call dist _mt[243] a[141296]))
    unknown call_tmp[665448] "expr temp" "maybe param" "maybe type" "temp"
    (665451 'move' call_tmp[665448](141421 call rank _mt[243] a[141296]))
    unknown call_tmp[665455] "expr temp" "maybe param" "maybe type" "temp"
    (665458 'move' call_tmp[665455](141425 call _value _mt[243] a[141296]))
    unknown call_tmp[665462] "expr temp" "maybe param" "maybe type" "temp"
    (665465 'move' call_tmp[665462](141428 call idxType _mt[243] call_tmp[665455]))
    unknown call_tmp[665467] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665470 'move' call_tmp[665467](747928 'new' _domain[125914](?) call_tmp[665441] call_tmp[665448] call_tmp[665462] 1 r[141324]))
    (519278 'move' ret[519273](519277 'deref' call_tmp[665467]))
    gotoReturn _end_chpl_by[519271] _end_chpl_by[519271]
    (480958 'end of statement' r[141324])
    label _end_chpl_by[519271]
    (519275 return ret[519273])
  }
  function chpl_align[141444](arg a[141441]:_domain[125914](?), arg b[141446]:_any[178](?)) : _unknown[51]
  {
    unknown ret[519284] "RVV" "temp"
    unknown r[141472] "dead at end of block" "insert auto destroy"
    unknown call_tmp[665474] "expr temp" "maybe param" "maybe type" "temp"
    (665477 'move' call_tmp[665474](141449 call rank _mt[243] a[141441]))
    unknown call_tmp[665481] "expr temp" "maybe param" "maybe type" "temp"
    (665484 'move' call_tmp[665481](141454 call _value _mt[243] a[141441]))
    unknown call_tmp[665488] "expr temp" "maybe param" "maybe type" "temp"
    (665491 'move' call_tmp[665488](141457 call idxType _mt[243] call_tmp[665481]))
    unknown call_tmp[665495] "expr temp" "maybe param" "maybe type" "temp"
    (665498 'move' call_tmp[665495](141466 call stridable _mt[243] a[141441]))
    unknown call_tmp[665500] "expr temp" "maybe param" "maybe type" "temp"
    (665503 'move' call_tmp[665500](141469 call range[64316](?) call_tmp[665488] bounded[64205] call_tmp[665495]))
    unknown call_tmp[665505] "expr temp" "maybe param" "maybe type" "temp"
    (665508 'move' call_tmp[665505](141470 call * call_tmp[665474] call_tmp[665500]))
    (543312 'default init var' r[141472] call_tmp[665505])
    (141475 'end of statement')
    unknown call_tmp[665512] "expr temp" "maybe param" "maybe type" "temp"
    (665515 'move' call_tmp[665512](141479 call rank _mt[243] a[141441]))
    unknown call_tmp[665517] "maybe param" "maybe type" "temp"
    (665520 'move' call_tmp[665517](141486 call _makeIndexTuple call_tmp[665512] b[141446](expand = 1)))
    unknown t[141487] "dead at end of block" "insert auto destroy"
    (543314 'init var' t[141487] call_tmp[665517])
    (141490 'end of statement')
    {
      unknown i[141521] "dead at end of block" "insert auto destroy"
      (543316 'init var' i[141521] 0)
      (480960 'end of statement')
      unknown tmp[141522] "maybe param" "temp"
      unknown call_tmp[665524] "expr temp" "maybe param" "maybe type" "temp"
      (665527 'move' call_tmp[665524](141493 call rank _mt[243] a[141441]))
      unknown call_tmp[665529] "expr temp" "maybe param" "maybe type" "temp"
      (665532 'move' call_tmp[665529](141497 call - call_tmp[665524] 1))
      (141534 'move' tmp[141522](141532 call chpl_compute_low_param_loop_bound 0 call_tmp[665529]))
      unknown tmp[141523] "maybe param" "temp"
      unknown call_tmp[665536] "expr temp" "maybe param" "maybe type" "temp"
      (665539 'move' call_tmp[665536](141541 call rank _mt[243] a[141441]))
      unknown call_tmp[665541] "expr temp" "maybe param" "maybe type" "temp"
      (665544 'move' call_tmp[665541](141539 call - call_tmp[665536] 1))
      (141547 'move' tmp[141523](141545 call chpl_compute_high_param_loop_bound 0 call_tmp[665541]))
      unknown tmp[141524] "maybe param" "temp"
      (141550 'move' tmp[141524] 1)
      ParamForLoop[141552]
      { i[141521] tmp[141522] tmp[141523] tmp[141524]
        unknown call_tmp[665546] "expr temp" "maybe param" "maybe type" "temp"
        (665549 'move' call_tmp[665546](141504 call r[141472] i[141521]))
        unknown call_tmp[665553] "expr temp" "maybe param" "maybe type" "temp"
        (665556 'move' call_tmp[665553](141511 call(141506 call (partial) dim _mt[243] a[141441]) i[141521]))
        unknown call_tmp[665558] "expr temp" "maybe param" "maybe type" "temp"
        (665561 'move' call_tmp[665558](141515 call t[141487] i[141521]))
        unknown call_tmp[665563] "expr temp" "maybe param" "maybe type" "temp"
        (665566 'move' call_tmp[665563](141516 call chpl_align call_tmp[665553] call_tmp[665558]))
        (141518 call = call_tmp[665546] call_tmp[665563])
        (480961 'end of statement' r[141472] i[141521] i[141521] t[141487] i[141521])
      }
      label _unused_continueLabel[141526]
      label _breakLabel[141525]
    }
    unknown call_tmp[665570] "expr temp" "maybe param" "maybe type" "temp"
    (665573 'move' call_tmp[665570](141564 call dist _mt[243] a[141441]))
    unknown call_tmp[665577] "expr temp" "maybe param" "maybe type" "temp"
    (665580 'move' call_tmp[665577](141569 call rank _mt[243] a[141441]))
    unknown call_tmp[665584] "expr temp" "maybe param" "maybe type" "temp"
    (665587 'move' call_tmp[665584](141573 call _value _mt[243] a[141441]))
    unknown call_tmp[665591] "expr temp" "maybe param" "maybe type" "temp"
    (665594 'move' call_tmp[665591](141576 call idxType _mt[243] call_tmp[665584]))
    unknown call_tmp[665598] "expr temp" "maybe param" "maybe type" "temp"
    (665601 'move' call_tmp[665598](141580 call stridable _mt[243] a[141441]))
    unknown call_tmp[665603] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (665606 'move' call_tmp[665603](747929 'new' _domain[125914](?) call_tmp[665570] call_tmp[665577] call_tmp[665591] call_tmp[665598] r[141472]))
    (519289 'move' ret[519284](519288 'deref' call_tmp[665603]))
    gotoReturn _end_chpl_align[519282] _end_chpl_align[519282]
    (480967 'end of statement' r[141472])
    label _end_chpl_align[519282]
    (519286 return ret[519284])
  }
  function <=>[141599](arg x[141596]:_array[133600](?), arg y[141606]:_array[133600](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown hasSwapped[141611] "dead at end of block" "insert auto destroy"
    (543318 'init var' hasSwapped[141611] 0 bool[10])
    (141614 'end of statement')
    unknown tmp[426874] "maybe param" "temp"
    unknown tmp[426895] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[492337] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665610] "expr temp" "maybe param" "maybe type" "temp"
      (665613 'move' call_tmp[665610](141617 call _value _mt[243] x[141596]))
      (492341 'move' call_type_tmp[492337](141620 'typeof' call_tmp[665610]))
    }
    { scopeless type
      unknown call_type_tmp[492343] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665617] "expr temp" "maybe param" "maybe type" "temp"
      (665620 'move' call_tmp[665617](141622 call _value _mt[243] y[141606]))
      (492347 'move' call_type_tmp[492343](141625 'typeof' call_tmp[665617]))
    }
    (426906 'move' tmp[426895](141626 call == call_type_tmp[492337] call_type_tmp[492343]))
    unknown call_tmp[665622] "expr temp" "maybe param" "maybe type" "temp"
    (665625 'move' call_tmp[665622](426908 call _cond_invalid tmp[426895]))
    if call_tmp[665622]
    {
      (426911 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568125] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568126] "maybe param" "temp"
    unknown call_tmp[665627] "expr temp" "maybe param" "maybe type" "temp"
    (665630 'move' call_tmp[665627](426896 call isTrue tmp[426895]))
    (568131 'move' tmp[568126](568129 call _cond_test call_tmp[665627]))
    if tmp[568126]
    {
      unknown tmp[568133] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665634] "expr temp" "maybe param" "maybe type" "temp"
      (665637 'move' call_tmp[665634](141630 call _value _mt[243] x[141596]))
      unknown call_tmp[665639] "expr temp" "maybe param" "maybe type" "temp"
      (665642 'move' call_tmp[665639](141634 call chpl__isArrayView call_tmp[665634]))
      unknown call_tmp[665644] "expr temp" "maybe param" "maybe type" "temp"
      (665647 'move' call_tmp[665644](141635 call ! call_tmp[665639]))
      (568135 'move' tmp[568133](426899 call isTrue call_tmp[665644]))
      (568140 'move' tmp[568125](568137 '_paramFoldLogical' tmp[568126] tmp[568133]))
    }
    {
      (568145 'move' tmp[568125](568142 '_paramFoldLogical' tmp[568126] 0))
    }
    (426885 'move' tmp[426874] tmp[568125])
    unknown call_tmp[665649] "expr temp" "maybe param" "maybe type" "temp"
    (665652 'move' call_tmp[665649](426887 call _cond_invalid tmp[426874]))
    if call_tmp[665649]
    {
      (426890 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568152] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568153] "maybe param" "temp"
    unknown call_tmp[665654] "expr temp" "maybe param" "maybe type" "temp"
    (665657 'move' call_tmp[665654](426875 call isTrue tmp[426874]))
    (568158 'move' tmp[568153](568156 call _cond_test call_tmp[665654]))
    if tmp[568153]
    {
      unknown tmp[568160] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665661] "expr temp" "maybe param" "maybe type" "temp"
      (665664 'move' call_tmp[665661](141644 call _value _mt[243] x[141596]))
      unknown call_tmp[665668] "expr temp" "maybe param" "maybe type" "temp"
      (665671 'move' call_tmp[665668](141666 call _value _mt[243] y[141606]))
      unknown call_tmp[665673] "expr temp" "maybe param" "maybe type" "temp"
      (665676 'move' call_tmp[665673](141669 call canResolveMethod module=[255] Reflection[224799] call_tmp[665661] "doiSwap" call_tmp[665668]))
      (568162 'move' tmp[568160](426878 call isTrue call_tmp[665673]))
      (568167 'move' tmp[568152](568164 '_paramFoldLogical' tmp[568153] tmp[568160]))
    }
    {
      (568172 'move' tmp[568152](568169 '_paramFoldLogical' tmp[568153] 0))
    }
    unknown call_tmp[665678] "expr temp" "maybe param" "maybe type" "temp"
    (665681 'move' call_tmp[665678](141701 call _cond_test tmp[568152]))
    if call_tmp[665678]
    {
      unknown call_tmp[665685] "expr temp" "maybe param" "maybe type" "temp"
      (665688 'move' call_tmp[665685](461626 call _dom _mt[243] x[141596]))
      unknown call_tmp[665692] "expr temp" "maybe param" "maybe type" "temp"
      (665695 'move' call_tmp[665692](461632 call _dom _mt[243] y[141606]))
      unknown call_tmp[665697] "expr temp" "maybe param" "maybe type" "temp"
      (665700 'move' call_tmp[665697](141674 call == call_tmp[665685] call_tmp[665692]))
      unknown call_tmp[665702] "expr temp" "maybe param" "maybe type" "temp"
      (665705 'move' call_tmp[665702](141696 call _cond_test call_tmp[665697]))
      if call_tmp[665702]
      {
        unknown call_tmp[665709] "expr temp" "maybe param" "maybe type" "temp"
        (665712 'move' call_tmp[665709](141677 call _value _mt[243] x[141596]))
        unknown call_tmp[665718] "expr temp" "maybe param" "maybe type" "temp"
        (665721 'move' call_tmp[665718](141684 call _value _mt[243] y[141606]))
        (141688 call(141680 call (partial) doiSwap _mt[243] call_tmp[665709]) call_tmp[665718])
        (480971 'end of statement')
        (141693 call = hasSwapped[141611] 1)
        (480972 'end of statement' hasSwapped[141611])
      }
    }
    unknown call_tmp[665723] "expr temp" "maybe param" "maybe type" "temp"
    (665726 'move' call_tmp[665723](141706 call ! hasSwapped[141611]))
    unknown call_tmp[665728] "expr temp" "maybe param" "maybe type" "temp"
    (665731 'move' call_tmp[665728](141729 call _cond_test call_tmp[665723]))
    if call_tmp[665728]
    {
      Forall {
        induction variables:
          
          unknown a[141723] "index var" "insert auto destroy"
          
          unknown b[141725] "index var" "insert auto destroy"
        iterated expressions:
          x[141596]
          y[141606]
        shadow variables:
        other variables
          forall body
        {
          (141719 call <=> a[141723] b[141725])
          (480974 'end of statement' a[141723] b[141725])
        }
      }
    }
    (519293 return _void[55])
    (360385 'referenced modules list' Reflection[224799])
  }
  function reshape[141743](arg A[141740]:_array[133600](?), arg D[141746]:_domain[125914](?)) : _unknown[51]
  {
    unknown ret[519297] "RVV" "temp"
    unknown call_tmp[665733] "expr temp" "maybe param" "maybe type" "temp"
    (665736 'move' call_tmp[665733](141752 call isRectangularDom D[141746]))
    unknown call_tmp[665738] "expr temp" "maybe param" "maybe type" "temp"
    (665741 'move' call_tmp[665738](141753 call ! call_tmp[665733]))
    unknown call_tmp[665743] "expr temp" "maybe param" "maybe type" "temp"
    (665746 'move' call_tmp[665743](141781 call _cond_test call_tmp[665738]))
    if call_tmp[665743]
    {
      unknown call_tmp[665748] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665751 'move' call_tmp[665748](141775 'typeof' D[141746]))
      unknown call_tmp[665753] "expr temp" "maybe param" "maybe type" "temp"
      (665756 'move' call_tmp[665753](141777 call _cast string[26] call_tmp[665748]))
      (141779 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665753])
    }
    unknown call_tmp[665760] "expr temp" "maybe param" "maybe type" "temp"
    (665763 'move' call_tmp[665760](141788 call size _mt[243] A[141740]))
    unknown call_tmp[665767] "expr temp" "maybe param" "maybe type" "temp"
    (665770 'move' call_tmp[665767](141792 call size _mt[243] D[141746]))
    unknown call_tmp[665772] "expr temp" "maybe param" "maybe type" "temp"
    (665775 'move' call_tmp[665772](141795 call != call_tmp[665760] call_tmp[665767]))
    unknown call_tmp[665777] "expr temp" "maybe param" "maybe type" "temp"
    (665780 'move' call_tmp[665777](141860 call _cond_test call_tmp[665772]))
    if call_tmp[665777]
    {
      unknown call_tmp[665784] "expr temp" "maybe param" "maybe type" "temp"
      (665787 'move' call_tmp[665784](141817 call size _mt[243] A[141740]))
      unknown call_tmp[665791] "expr temp" "maybe param" "maybe type" "temp"
      (665794 'move' call_tmp[665791](141838 call size _mt[243] D[141746]))
      (141858 call halt "reshape(A,D) is invoked when A has " call_tmp[665784] " elements, but D has " call_tmp[665791] " indices")
    }
    unknown B[141892] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter6[582767](arg iterator[582769]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582830] "RVV" "temp"
      {
        unknown _indexOfInterest[582774] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582775] "expr temp" "temp"
        (582784 'move' _iterator[582775](582782 call _getIteratorZip iterator[582769]))
        Defer
        {
          {
            (582810 call _freeIterator _iterator[582775])
          }
        }
        { scopeless type
          (582789 'move' _indexOfInterest[582774](582786 call iteratorIndex _iterator[582775]))
        }
        ForLoop[582776] for-expr
        {
          unknown a[141890] "index var" "insert auto destroy" "no doc"
          (582819 'end of statement')
          unknown i[141888] "index var" "insert auto destroy" "no doc"
          (582820 'end of statement')
          (582794 call _check_tuple_var_decl _indexOfInterest[582774] 2)
          (582821 'end of statement')
          (582800 'move' i[141888](582798 call _indexOfInterest[582774] 0))
          (582822 'end of statement' i[141888])
          (582805 'move' a[141890](582803 call _indexOfInterest[582774] 1))
          (582824 'end of statement' a[141890])
          {
            {
              unknown yret[582834] "YVV" "temp"
              (582837 'move' yret[582834](582836 'deref' a[141890]))
              (582839 yield yret[582834])
              (582826 'end of statement' a[141890])
            }
          }
          label _continueLabel[582779]
          _indexOfInterest[582774]
          _iterator[582775]
        }
        label _breakLabel[582780]
      }
      (582832 return ret[582830])
    }
    function chpl__forexpr6[582751](arg iterExpr[582754]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582844] "RVV" "temp"
      unknown _iterator[582758] "expr temp" "maybe ref" "temp"
      (582760 'move' _iterator[582758] iterExpr[582754])
      unknown call_tmp[582851] "expr temp" "maybe param" "maybe type" "temp"
      (582854 'move' call_tmp[582851](582763 call chpl__loopexpr_iter6 _iterator[582758]))
      (582849 'move' ret[582844](582848 'deref' call_tmp[582851]))
      (582846 return ret[582844])
    }
    unknown call_tmp[582856] "expr temp" "maybe param" "maybe type" "temp"
    (582859 'move' call_tmp[582856](141883 call _build_tuple D[141746] A[141740]))
    unknown call_tmp[582861] "maybe param" "maybe type" "temp"
    (582864 'move' call_tmp[582861](582756 call chpl__forexpr6 call_tmp[582856]))
    (582868 'iterator record set shape' call_tmp[582861] D[141746] 1)
    unknown call_tmp[665796] "expr temp" "maybe param" "maybe type" "temp"
    (665799 'move' call_tmp[665796](141871 call chpl__ensureDomainExpr D[141746]))
    unknown call_tmp[665803] "expr temp" "maybe param" "maybe type" "temp"
    (665806 'move' call_tmp[665803](141868 call eltType _mt[243] A[141740]))
    unknown call_tmp[665808] "maybe param" "maybe type" "temp"
    (665811 'move' call_tmp[665808](141873 call chpl__buildArrayRuntimeType call_tmp[665796] call_tmp[665803]))
    (543320 'init var' B[141892] call_tmp[582861] call_tmp[665808])
    (141895 'end of statement')
    (519302 'move' ret[519297](519301 'deref' B[141892]))
    gotoReturn _end_reshape[519295] _end_reshape[519295]
    (480979 'end of statement' B[141892])
    label _end_reshape[519295]
    (519299 return ret[519297])
  }
  function reshape[141907](arg A[141904]:_iteratorRecord[205](?), arg D[141910]:_domain[125914](?)) : _unknown[51] "no doc"
  {
    unknown ret[519308] "RVV" "temp"
    unknown call_tmp[665813] "expr temp" "maybe param" "maybe type" "temp"
    (665816 'move' call_tmp[665813](141916 call isRectangularDom D[141910]))
    unknown call_tmp[665818] "expr temp" "maybe param" "maybe type" "temp"
    (665821 'move' call_tmp[665818](141917 call ! call_tmp[665813]))
    unknown call_tmp[665823] "expr temp" "maybe param" "maybe type" "temp"
    (665826 'move' call_tmp[665823](141929 call _cond_test call_tmp[665818]))
    if call_tmp[665823]
    {
      unknown call_tmp[665828] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (665831 'move' call_tmp[665828](141923 'typeof' D[141910]))
      unknown call_tmp[665833] "expr temp" "maybe param" "maybe type" "temp"
      (665836 'move' call_tmp[665833](141925 call _cast string[26] call_tmp[665828]))
      (141927 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[665833])
    }
    unknown B[141952] "dead at end of block" "insert auto destroy"
    function chpl__loopexpr_iter7[582886](arg iterator[582888]:_any[178](?)) : _unknown[51] "iterator fn"
    {
      unknown ret[582949] "RVV" "temp"
      {
        unknown _indexOfInterest[582893] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[582894] "expr temp" "temp"
        (582903 'move' _iterator[582894](582901 call _getIteratorZip iterator[582888]))
        Defer
        {
          {
            (582929 call _freeIterator _iterator[582894])
          }
        }
        { scopeless type
          (582908 'move' _indexOfInterest[582893](582905 call iteratorIndex _iterator[582894]))
        }
        ForLoop[582895] for-expr
        {
          unknown a[141950] "index var" "insert auto destroy" "no doc"
          (582938 'end of statement')
          unknown i[141948] "index var" "insert auto destroy" "no doc"
          (582939 'end of statement')
          (582913 call _check_tuple_var_decl _indexOfInterest[582893] 2)
          (582940 'end of statement')
          (582919 'move' i[141948](582917 call _indexOfInterest[582893] 0))
          (582941 'end of statement' i[141948])
          (582924 'move' a[141950](582922 call _indexOfInterest[582893] 1))
          (582943 'end of statement' a[141950])
          {
            {
              unknown yret[582953] "YVV" "temp"
              (582956 'move' yret[582953](582955 'deref' a[141950]))
              (582958 yield yret[582953])
              (582945 'end of statement' a[141950])
            }
          }
          label _continueLabel[582898]
          _indexOfInterest[582893]
          _iterator[582894]
        }
        label _breakLabel[582899]
      }
      (582951 return ret[582949])
    }
    function chpl__forexpr7[582870](arg iterExpr[582873]:_any[178](?)) : _unknown[51] "compiler generated" "compiler nested function" "fn returns iterator"
    {
      unknown ret[582963] "RVV" "temp"
      unknown _iterator[582877] "expr temp" "maybe ref" "temp"
      (582879 'move' _iterator[582877] iterExpr[582873])
      unknown call_tmp[582970] "expr temp" "maybe param" "maybe type" "temp"
      (582973 'move' call_tmp[582970](582882 call chpl__loopexpr_iter7 _iterator[582877]))
      (582968 'move' ret[582963](582967 'deref' call_tmp[582970]))
      (582965 return ret[582963])
    }
    unknown call_tmp[582975] "expr temp" "maybe param" "maybe type" "temp"
    (582978 'move' call_tmp[582975](141943 call _build_tuple D[141910] A[141904]))
    unknown call_tmp[582980] "maybe param" "maybe type" "temp"
    (582983 'move' call_tmp[582980](582875 call chpl__forexpr7 call_tmp[582975]))
    (582987 'iterator record set shape' call_tmp[582980] D[141910] 1)
    (543322 'init var' B[141952] call_tmp[582980])
    (141955 'end of statement')
    (519313 'move' ret[519308](519312 'deref' B[141952]))
    gotoReturn _end_reshape[519306] _end_reshape[519306]
    (480982 'end of statement' B[141952])
    label _end_reshape[519306]
    (519310 return ret[519308])
  }
  function linearize[141965](arg Xs[141963]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[519319] "RVV" "temp"
    {
      unknown _indexOfInterest[141972] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141973] "expr temp" "temp"
      (141982 'move' _iterator[141973](141980 call _getIterator Xs[141963]))
      Defer
      {
        {
          (141998 call _freeIterator _iterator[141973])
        }
      }
      { scopeless type
        (141987 'move' _indexOfInterest[141972](141984 call iteratorIndex _iterator[141973]))
      }
      ForLoop[141974]
      {
        unknown x[141991] "index var" "insert auto destroy"
        (480985 'end of statement')
        (141993 'move' x[141991] _indexOfInterest[141972])
        (480986 'end of statement' x[141991])
        unknown yret[519323] "YVV" "temp"
        (519326 'move' yret[519323](519325 'deref' x[141991]))
        (519328 yield yret[519323])
        (480988 'end of statement' x[141991])
        label _continueLabel[141977]
        _indexOfInterest[141972]
        _iterator[141973]
      }
      label _breakLabel[141978]
    }
    (519321 return ret[519319])
  }
  function chpl__unalias[142014](arg x[142011]:_domain[125914](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519332] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[492349] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665840] "expr temp" "maybe param" "maybe type" "temp"
      (665843 'move' call_tmp[665840](142018 call _instance _mt[243] x[142011]))
      (492353 'move' call_type_tmp[492349](142021 'typeof' call_tmp[665840]))
    }
    { scopeless type
      unknown call_type_tmp[492355] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[665847] "expr temp" "maybe param" "maybe type" "temp"
      (665850 'move' call_tmp[665847](142025 call _instance _mt[243] x[142011]))
      (492359 'move' call_type_tmp[492355](142028 'typeof' call_tmp[665847]))
    }
    unknown call_tmp[665852] "expr temp" "maybe param" "maybe type" "temp"
    (665855 'move' call_tmp[665852](142023 call _to_unmanaged call_type_tmp[492349]))
    unknown call_tmp[665857] "expr temp" "maybe param" "maybe type" "temp"
    (665860 'move' call_tmp[665857](142029 call != call_tmp[665852] call_type_tmp[492355]))
    unknown call_tmp[665862] "expr temp" "maybe param" "maybe type" "temp"
    (665865 'move' call_tmp[665862](142036 call _cond_test call_tmp[665857]))
    if call_tmp[665862]
    {
      (142034 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[665869] "expr temp" "maybe param" "maybe type" "temp"
    (665872 'move' call_tmp[665869](142043 call _unowned _mt[243] x[142011]))
    unknown call_tmp[665874] "expr temp" "maybe param" "maybe type" "temp"
    (665877 'move' call_tmp[665874](142064 call _cond_test call_tmp[665869]))
    if call_tmp[665874]
    {
      unknown ret[142047] "dead at end of block" "no auto destroy"
      (543324 'init var' ret[142047] x[142011])
      (142050 'end of statement')
      (519337 'move' ret[519332](519336 'deref' ret[142047]))
      gotoReturn _end_chpl__unalias[519330] _end_chpl__unalias[519330]
      (480991 'end of statement' ret[142047])
    }
    {
      unknown ret[142056] "dead at end of block" "insert auto destroy" "no copy"
      (543326 'init var' ret[142056] x[142011])
      (142059 'end of statement')
      (519342 'move' ret[519332](519341 'deref' ret[142056]))
      gotoReturn _end_chpl__unalias[519330] _end_chpl__unalias[519330]
      (480993 'end of statement' ret[142056])
    }
    label _end_chpl__unalias[519330]
    (519334 return ret[519332])
  }
  function chpl__initCopy[142078](const  ref arg rhs[142075]:_array[133600](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519348] "RVV" "temp"
    unknown call_tmp[665879] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (665882 'move' call_tmp[665879](142082 'typeof' rhs[142075]))
    unknown call_tmp[665884] "maybe param" "maybe type" "temp"
    (665887 'move' call_tmp[665884](142085 call chpl__coerceCopy call_tmp[665879] rhs[142075]))
    unknown lhs[142086] "dead at end of block" "no copy"
    (543328 'init var' lhs[142086] call_tmp[665884])
    (142089 'end of statement')
    (519353 'move' ret[519348](519352 'deref' lhs[142086]))
    gotoReturn _end_chpl__initCopy[519346] _end_chpl__initCopy[519346]
    (480995 'end of statement' lhs[142086])
    label _end_chpl__initCopy[519346]
    (519350 return ret[519348])
  }
  function chpl__autoCopy[142104](arg x[142101]:_array[133600](?)) : _unknown[51] "auto copy fn"
  {
    unknown ret[519359] "RVV" "temp"
    unknown call_tmp[665889] "maybe param" "maybe type" "temp"
    (665892 'move' call_tmp[665889](142109 call chpl__initCopy x[142101]))
    unknown b[142110] "dead at end of block" "insert auto destroy" "no copy"
    (543330 'init var' b[142110] call_tmp[665889])
    (142113 'end of statement')
    (519364 'move' ret[519359](519363 'deref' b[142110]))
    gotoReturn _end_chpl__autoCopy[519357] _end_chpl__autoCopy[519357]
    (480997 'end of statement' b[142110])
    label _end_chpl__autoCopy[519357]
    (519361 return ret[519359])
  }
  function chpl__coerceCopy[142126](arg dstType[142123]:_domain[125914](?), arg rhs[142129]:_domain[125914](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519370] "RVV" "temp"
    unknown call_tmp[665896] "expr temp" "maybe param" "maybe type" "temp"
    (665899 'move' call_tmp[665896](142133 call dist _mt[243] rhs[142129]))
    unknown call_tmp[665903] "expr temp" "maybe param" "maybe type" "temp"
    (665906 'move' call_tmp[665903](142136 call _value _mt[243] call_tmp[665896]))
    unknown call_tmp[665910] "maybe param" "maybe type" "temp"
    (665913 'move' call_tmp[665910](142145 call(142141 call (partial) dsiIsLayout _mt[243] call_tmp[665903])))
    unknown rhsIsLayout[142146] "dead at end of block" "param"
    (543332 'init var' rhsIsLayout[142146] call_tmp[665910])
    (142149 'end of statement')
    unknown lhs[142152] "dead at end of block" "insert auto destroy"
    (543334 'default init var' lhs[142152] dstType[142123])
    (142155 'end of statement')
    (748177 call chpl_statementLevelSymbol lhs[142152])
    (142160 call = lhs[142152] rhs[142129])
    (480999 'end of statement' lhs[142152])
    unknown tmp[426916] "maybe param" "temp"
    unknown call_tmp[665917] "expr temp" "maybe param" "maybe type" "temp"
    (665920 'move' call_tmp[665917](142164 call dist _mt[243] lhs[142152]))
    unknown call_tmp[665924] "expr temp" "maybe param" "maybe type" "temp"
    (665927 'move' call_tmp[665924](142167 call _value _mt[243] call_tmp[665917]))
    (426927 'move' tmp[426916](142174 call(142170 call (partial) dsiIsLayout _mt[243] call_tmp[665924])))
    unknown call_tmp[665931] "expr temp" "maybe param" "maybe type" "temp"
    (665934 'move' call_tmp[665931](426929 call _cond_invalid tmp[426916]))
    if call_tmp[665931]
    {
      (426932 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568179] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568180] "maybe param" "temp"
    unknown call_tmp[665936] "expr temp" "maybe param" "maybe type" "temp"
    (665939 'move' call_tmp[665936](426917 call isTrue tmp[426916]))
    (568185 'move' tmp[568180](568183 call _cond_test call_tmp[665936]))
    if tmp[568180]
    {
      unknown tmp[568187] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665941] "expr temp" "maybe param" "maybe type" "temp"
      (665944 'move' call_tmp[665941](142176 call ! rhsIsLayout[142146]))
      (568189 'move' tmp[568187](426920 call isTrue call_tmp[665941]))
      (568194 'move' tmp[568179](568191 '_paramFoldLogical' tmp[568180] tmp[568187]))
    }
    {
      (568199 'move' tmp[568179](568196 '_paramFoldLogical' tmp[568180] 0))
    }
    unknown call_tmp[665946] "expr temp" "maybe param" "maybe type" "temp"
    (665949 'move' call_tmp[665946](142203 call _cond_test tmp[568179]))
    if call_tmp[665946]
    {
      (142201 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519375 'move' ret[519370](519374 'deref' lhs[142152]))
    gotoReturn _end_chpl__coerceCopy[519368] _end_chpl__coerceCopy[519368]
    (481003 'end of statement' lhs[142152])
    label _end_chpl__coerceCopy[519368]
    (519372 return ret[519370])
  }
  function chpl__coerceMove[142219](arg dstType[142216]:_domain[125914](?), in arg rhs[142222]:_domain[125914](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519381] "RVV" "temp"
    unknown call_tmp[665953] "expr temp" "maybe param" "maybe type" "temp"
    (665956 'move' call_tmp[665953](142226 call dist _mt[243] rhs[142222]))
    unknown call_tmp[665960] "expr temp" "maybe param" "maybe type" "temp"
    (665963 'move' call_tmp[665960](142229 call _value _mt[243] call_tmp[665953]))
    unknown call_tmp[665967] "maybe param" "maybe type" "temp"
    (665970 'move' call_tmp[665967](142236 call(142232 call (partial) dsiIsLayout _mt[243] call_tmp[665960])))
    unknown rhsIsLayout[142237] "dead at end of block" "param"
    (543336 'init var' rhsIsLayout[142237] call_tmp[665967])
    (142240 'end of statement')
    unknown lhs[142243] "dead at end of block" "insert auto destroy"
    (543338 'default init var' lhs[142243] dstType[142216])
    (142246 'end of statement')
    (748179 call chpl_statementLevelSymbol lhs[142243])
    (142251 call = lhs[142243] rhs[142222])
    (481005 'end of statement' lhs[142243])
    unknown tmp[426937] "maybe param" "temp"
    unknown call_tmp[665974] "expr temp" "maybe param" "maybe type" "temp"
    (665977 'move' call_tmp[665974](142255 call dist _mt[243] lhs[142243]))
    unknown call_tmp[665981] "expr temp" "maybe param" "maybe type" "temp"
    (665984 'move' call_tmp[665981](142258 call _value _mt[243] call_tmp[665974]))
    (426948 'move' tmp[426937](142265 call(142261 call (partial) dsiIsLayout _mt[243] call_tmp[665981])))
    unknown call_tmp[665988] "expr temp" "maybe param" "maybe type" "temp"
    (665991 'move' call_tmp[665988](426950 call _cond_invalid tmp[426937]))
    if call_tmp[665988]
    {
      (426953 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568206] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568207] "maybe param" "temp"
    unknown call_tmp[665993] "expr temp" "maybe param" "maybe type" "temp"
    (665996 'move' call_tmp[665993](426938 call isTrue tmp[426937]))
    (568212 'move' tmp[568207](568210 call _cond_test call_tmp[665993]))
    if tmp[568207]
    {
      unknown tmp[568214] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[665998] "expr temp" "maybe param" "maybe type" "temp"
      (666001 'move' call_tmp[665998](142267 call ! rhsIsLayout[142237]))
      (568216 'move' tmp[568214](426941 call isTrue call_tmp[665998]))
      (568221 'move' tmp[568206](568218 '_paramFoldLogical' tmp[568207] tmp[568214]))
    }
    {
      (568226 'move' tmp[568206](568223 '_paramFoldLogical' tmp[568207] 0))
    }
    unknown call_tmp[666003] "expr temp" "maybe param" "maybe type" "temp"
    (666006 'move' call_tmp[666003](142276 call _cond_test tmp[568206]))
    if call_tmp[666003]
    {
      (142274 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (519386 'move' ret[519381](519385 'deref' lhs[142243]))
    gotoReturn _end_chpl__coerceMove[519379] _end_chpl__coerceMove[519379]
    (481009 'end of statement' lhs[142243])
    label _end_chpl__coerceMove[519379]
    (519383 return ret[519381])
  }
  function chpl__coerceCopy[142292](arg dstType[142289]:_domain[125914](?), arg rhs[142295]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519392] "RVV" "temp"
    unknown lhs[142299] "dead at end of block" "insert auto destroy"
    (543340 'default init var' lhs[142299] dstType[142289])
    (142302 'end of statement')
    (748181 call chpl_statementLevelSymbol lhs[142299])
    unknown call_tmp[666008] "expr temp" "maybe param" "maybe type" "temp"
    (666011 'move' call_tmp[666008](142310 call chpl__isLegalRectTupDomAssign lhs[142299] rhs[142295]))
    unknown call_tmp[666013] "expr temp" "maybe param" "maybe type" "temp"
    (666016 'move' call_tmp[666013](142327 call _cond_test call_tmp[666008]))
    if call_tmp[666013]
    {
      unknown call_tmp[666018] "expr temp" "maybe param" "maybe type" "temp"
      (666021 'move' call_tmp[666018](142315 call chpl__buildDomainExpr(142313 'expand_tuple' rhs[142295])))
      (142317 call = lhs[142299] call_tmp[666018])
      (481011 'end of statement' lhs[142299])
    }
    {
      (142323 call = lhs[142299] rhs[142295])
      (481013 'end of statement' lhs[142299])
    }
    (519397 'move' ret[519392](519396 'deref' lhs[142299]))
    gotoReturn _end_chpl__coerceCopy[519390] _end_chpl__coerceCopy[519390]
    (481015 'end of statement' lhs[142299])
    label _end_chpl__coerceCopy[519390]
    (519394 return ret[519392])
  }
  function chpl__coerceMove[142342](arg dstType[142339]:_domain[125914](?), in arg rhs[142345]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519403] "RVV" "temp"
    unknown lhs[142349] "dead at end of block" "insert auto destroy"
    (543342 'default init var' lhs[142349] dstType[142339])
    (142352 'end of statement')
    (748183 call chpl_statementLevelSymbol lhs[142349])
    unknown call_tmp[666023] "expr temp" "maybe param" "maybe type" "temp"
    (666026 'move' call_tmp[666023](142360 call chpl__isLegalRectTupDomAssign lhs[142349] rhs[142345]))
    unknown call_tmp[666028] "expr temp" "maybe param" "maybe type" "temp"
    (666031 'move' call_tmp[666028](142377 call _cond_test call_tmp[666023]))
    if call_tmp[666028]
    {
      unknown call_tmp[666033] "expr temp" "maybe param" "maybe type" "temp"
      (666036 'move' call_tmp[666033](142365 call chpl__buildDomainExpr(142363 'expand_tuple' rhs[142345])))
      (142367 call = lhs[142349] call_tmp[666033])
      (481017 'end of statement' lhs[142349])
    }
    {
      (142373 call = lhs[142349] rhs[142345])
      (481019 'end of statement' lhs[142349])
    }
    (519408 'move' ret[519403](519407 'deref' lhs[142349]))
    gotoReturn _end_chpl__coerceMove[519401] _end_chpl__coerceMove[519401]
    (481021 'end of statement' lhs[142349])
    label _end_chpl__coerceMove[519401]
    (519405 return ret[519403])
  }
  function chpl__coerceCopy[142392](arg dstType[142389]:_domain[125914](?), arg rhs[142398]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519414] "RVV" "temp"
    unknown lhs[142402] "dead at end of block" "insert auto destroy"
    (543344 'default init var' lhs[142402] dstType[142389])
    (142405 'end of statement')
    (748185 call chpl_statementLevelSymbol lhs[142402])
    unknown call_tmp[666038] "expr temp" "maybe param" "maybe type" "temp"
    (666041 'move' call_tmp[666038](142412 call chpl__buildDomainExpr rhs[142398]))
    (142414 call = lhs[142402] call_tmp[666038])
    (481023 'end of statement' lhs[142402])
    (519419 'move' ret[519414](519418 'deref' lhs[142402]))
    gotoReturn _end_chpl__coerceCopy[519412] _end_chpl__coerceCopy[519412]
    (481025 'end of statement' lhs[142402])
    label _end_chpl__coerceCopy[519412]
    (519416 return ret[519414])
  }
  function chpl__coerceMove[142428](arg dstType[142425]:_domain[125914](?), in arg rhs[142434]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519425] "RVV" "temp"
    unknown lhs[142438] "dead at end of block" "insert auto destroy"
    (543346 'default init var' lhs[142438] dstType[142425])
    (142441 'end of statement')
    (748187 call chpl_statementLevelSymbol lhs[142438])
    unknown call_tmp[666043] "expr temp" "maybe param" "maybe type" "temp"
    (666046 'move' call_tmp[666043](142448 call chpl__buildDomainExpr rhs[142434]))
    (142450 call = lhs[142438] call_tmp[666043])
    (481027 'end of statement' lhs[142438])
    (519430 'move' ret[519425](519429 'deref' lhs[142438]))
    gotoReturn _end_chpl__coerceMove[519423] _end_chpl__coerceMove[519423]
    (481029 'end of statement' lhs[142438])
    label _end_chpl__coerceMove[519423]
    (519427 return ret[519425])
  }
  function chpl__coerceCopy[142464](arg dstType[142461]:_domain[125914](?), arg rhs[142467]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519436] "RVV" "temp"
    unknown lhs[142471] "dead at end of block" "insert auto destroy"
    (543348 'default init var' lhs[142471] dstType[142461])
    (142474 'end of statement')
    unknown call_tmp[666048] "expr temp" "maybe param" "maybe type" "temp"
    (666051 'move' call_tmp[666048](142479 call isRectangularDom lhs[142471]))
    unknown call_tmp[666053] "expr temp" "maybe param" "maybe type" "temp"
    (666056 'move' call_tmp[666053](142485 call _cond_test call_tmp[666048]))
    if call_tmp[666053]
    {
      (142483 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142495 call(142491 call (partial) clear _mt[243] lhs[142471]))
    (481032 'end of statement' lhs[142471])
    {
      unknown _indexOfInterest[142508] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142509] "expr temp" "temp"
      (142518 'move' _iterator[142509](142516 call _getIterator rhs[142467]))
      Defer
      {
        {
          (142534 call _freeIterator _iterator[142509])
        }
      }
      { scopeless type
        (142523 'move' _indexOfInterest[142508](142520 call iteratorIndex _iterator[142509]))
      }
      ForLoop[142510]
      {
        unknown ind[142527] "index var" "insert auto destroy"
        (481035 'end of statement')
        (142529 'move' ind[142527] _indexOfInterest[142508])
        (481036 'end of statement' ind[142527])
        {
          (142505 call(142500 call (partial) add _mt[243] lhs[142471]) ind[142527])
          (481038 'end of statement' lhs[142471] ind[142527])
        }
        label _continueLabel[142513]
        _indexOfInterest[142508]
        _iterator[142509]
      }
      label _breakLabel[142514]
    }
    (519441 'move' ret[519436](519440 'deref' lhs[142471]))
    gotoReturn _end_chpl__coerceCopy[519434] _end_chpl__coerceCopy[519434]
    (481041 'end of statement' lhs[142471])
    label _end_chpl__coerceCopy[519434]
    (519438 return ret[519436])
  }
  function chpl__coerceMove[142552](arg dstType[142549]:_domain[125914](?), arg rhs[142555]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519447] "RVV" "temp"
    unknown lhs[142559] "dead at end of block" "insert auto destroy"
    (543350 'default init var' lhs[142559] dstType[142549])
    (142562 'end of statement')
    unknown call_tmp[666062] "expr temp" "maybe param" "maybe type" "temp"
    (666065 'move' call_tmp[666062](142567 call isRectangularDom lhs[142559]))
    unknown call_tmp[666067] "expr temp" "maybe param" "maybe type" "temp"
    (666070 'move' call_tmp[666067](142573 call _cond_test call_tmp[666062]))
    if call_tmp[666067]
    {
      (142571 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142583 call(142579 call (partial) clear _mt[243] lhs[142559]))
    (481044 'end of statement' lhs[142559])
    {
      unknown _indexOfInterest[142596] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142597] "expr temp" "temp"
      (142606 'move' _iterator[142597](142604 call _getIterator rhs[142555]))
      Defer
      {
        {
          (142622 call _freeIterator _iterator[142597])
        }
      }
      { scopeless type
        (142611 'move' _indexOfInterest[142596](142608 call iteratorIndex _iterator[142597]))
      }
      ForLoop[142598]
      {
        unknown ind[142615] "index var" "insert auto destroy"
        (481047 'end of statement')
        (142617 'move' ind[142615] _indexOfInterest[142596])
        (481048 'end of statement' ind[142615])
        {
          (142593 call(142588 call (partial) add _mt[243] lhs[142559]) ind[142615])
          (481050 'end of statement' lhs[142559] ind[142615])
        }
        label _continueLabel[142601]
        _indexOfInterest[142596]
        _iterator[142597]
      }
      label _breakLabel[142602]
    }
    (519452 'move' ret[519447](519451 'deref' lhs[142559]))
    gotoReturn _end_chpl__coerceMove[519445] _end_chpl__coerceMove[519445]
    (481053 'end of statement' lhs[142559])
    label _end_chpl__coerceMove[519445]
    (519449 return ret[519447])
  }
  function chpl__coerceCopy[142640](arg dstType[142637]:_domain[125914](?), arg rhs[142642]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519458] "RVV" "temp"
    unknown lhs[142645] "dead at end of block" "insert auto destroy"
    (543352 'default init var' lhs[142645] dstType[142637])
    (142648 'end of statement')
    unknown call_tmp[666076] "expr temp" "maybe param" "maybe type" "temp"
    (666079 'move' call_tmp[666076](142653 call isRectangularDom lhs[142645]))
    unknown call_tmp[666081] "expr temp" "maybe param" "maybe type" "temp"
    (666084 'move' call_tmp[666081](142659 call _cond_test call_tmp[666076]))
    if call_tmp[666081]
    {
      (142657 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142669 call(142665 call (partial) clear _mt[243] lhs[142645]))
    (481056 'end of statement' lhs[142645])
    {
      unknown _indexOfInterest[142682] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142683] "expr temp" "temp"
      (142692 'move' _iterator[142683](142690 call _getIterator rhs[142642]))
      Defer
      {
        {
          (142708 call _freeIterator _iterator[142683])
        }
      }
      { scopeless type
        (142697 'move' _indexOfInterest[142682](142694 call iteratorIndex _iterator[142683]))
      }
      ForLoop[142684]
      {
        unknown ind[142701] "index var" "insert auto destroy"
        (481059 'end of statement')
        (142703 'move' ind[142701] _indexOfInterest[142682])
        (481060 'end of statement' ind[142701])
        {
          (142679 call(142674 call (partial) add _mt[243] lhs[142645]) ind[142701])
          (481062 'end of statement' lhs[142645] ind[142701])
        }
        label _continueLabel[142687]
        _indexOfInterest[142682]
        _iterator[142683]
      }
      label _breakLabel[142688]
    }
    (519463 'move' ret[519458](519462 'deref' lhs[142645]))
    gotoReturn _end_chpl__coerceCopy[519456] _end_chpl__coerceCopy[519456]
    (481065 'end of statement' lhs[142645])
    label _end_chpl__coerceCopy[519456]
    (519460 return ret[519458])
  }
  function chpl__coerceMove[142726](arg dstType[142723]:_domain[125914](?), in arg rhs[142728]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519469] "RVV" "temp"
    unknown lhs[142731] "dead at end of block" "insert auto destroy"
    (543354 'default init var' lhs[142731] dstType[142723])
    (142734 'end of statement')
    unknown call_tmp[666090] "expr temp" "maybe param" "maybe type" "temp"
    (666093 'move' call_tmp[666090](142739 call isRectangularDom lhs[142731]))
    unknown call_tmp[666095] "expr temp" "maybe param" "maybe type" "temp"
    (666098 'move' call_tmp[666095](142745 call _cond_test call_tmp[666090]))
    if call_tmp[666095]
    {
      (142743 call compilerError "Illegal assignment to a rectangular domain")
    }
    (142755 call(142751 call (partial) clear _mt[243] lhs[142731]))
    (481068 'end of statement' lhs[142731])
    {
      unknown _indexOfInterest[142768] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142769] "expr temp" "temp"
      (142778 'move' _iterator[142769](142776 call _getIterator rhs[142728]))
      Defer
      {
        {
          (142794 call _freeIterator _iterator[142769])
        }
      }
      { scopeless type
        (142783 'move' _indexOfInterest[142768](142780 call iteratorIndex _iterator[142769]))
      }
      ForLoop[142770]
      {
        unknown ind[142787] "index var" "insert auto destroy"
        (481071 'end of statement')
        (142789 'move' ind[142787] _indexOfInterest[142768])
        (481072 'end of statement' ind[142787])
        {
          (142765 call(142760 call (partial) add _mt[243] lhs[142731]) ind[142787])
          (481074 'end of statement' lhs[142731] ind[142787])
        }
        label _continueLabel[142773]
        _indexOfInterest[142768]
        _iterator[142769]
      }
      label _breakLabel[142774]
    }
    (519474 'move' ret[519469](519473 'deref' lhs[142731]))
    gotoReturn _end_chpl__coerceMove[519467] _end_chpl__coerceMove[519467]
    (481077 'end of statement' lhs[142731])
    label _end_chpl__coerceMove[519467]
    (519471 return ret[519469])
  }
  function chpl__coerceCopy[142812](arg dstType[142809]:_array[133600](?), arg rhs[142815]:_array[133600](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519480] "RVV" "temp"
    unknown eltType[142822] "dead at end of block" "insert auto destroy" "type variable"(142821 call chpl__eltTypeFromArrayRuntimeType dstType[142809])
    (543359 'move' eltType[142822](543357 call chpl__eltTypeFromArrayRuntimeType dstType[142809]))
    const dom[142830] "dead at end of block" "const" "ref var"
    unknown call_tmp[666104] "expr temp" "maybe param" "maybe type" "temp"
    (666107 'move' call_tmp[666104](142829 call chpl__domainFromArrayRuntimeType dstType[142809]))
    (543362 'move' dom[142830](543361 'addr of' call_tmp[666104]))
    (142833 'end of statement')
    unknown call_tmp[666111] "maybe param" "maybe type" "temp"
    (666114 'move' call_tmp[666111](142842 call(142835 call (partial) buildArray _mt[243] dom[142830]) eltType[142822](initElts = 0)))
    unknown lhs[142843] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543364 'init var' lhs[142843] call_tmp[666111])
    (142846 'end of statement' dom[142830] eltType[142822])
    unknown call_tmp[666118] "expr temp" "maybe param" "maybe type" "temp"
    (666121 'move' call_tmp[666118](142848 call rank _mt[243] lhs[142843]))
    unknown call_tmp[666125] "expr temp" "maybe param" "maybe type" "temp"
    (666128 'move' call_tmp[666125](142852 call rank _mt[243] rhs[142815]))
    unknown call_tmp[666130] "expr temp" "maybe param" "maybe type" "temp"
    (666133 'move' call_tmp[666130](142855 call != call_tmp[666118] call_tmp[666125]))
    unknown call_tmp[666135] "expr temp" "maybe param" "maybe type" "temp"
    (666138 'move' call_tmp[666135](142862 call _cond_test call_tmp[666130]))
    if call_tmp[666135]
    {
      (142860 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666140] "expr temp" "maybe param" "maybe type" "temp"
    (666143 'move' call_tmp[666140](142870 call isCopyableType eltType[142822]))
    unknown call_tmp[666145] "expr temp" "maybe param" "maybe type" "temp"
    (666148 'move' call_tmp[666145](142871 call ! call_tmp[666140]))
    unknown call_tmp[666150] "expr temp" "maybe param" "maybe type" "temp"
    (666153 'move' call_tmp[666150](142915 call _cond_test call_tmp[666145]))
    if call_tmp[666150]
    {
      unknown call_tmp[666155] "expr temp" "maybe param" "maybe type" "temp"
      (666158 'move' call_tmp[666155](142894 call _cast string[26] eltType[142822]))
      (142913 call compilerError "Cannot copy-initialize array because element type '" call_tmp[666155] "' cannot be copy-initialized")
      (481082 'end of statement' eltType[142822])
    }
    unknown call_tmp[666162] "expr temp" "maybe param" "maybe type" "temp"
    (666165 'move' call_tmp[666162](142921 call _value _mt[243] rhs[142815]))
    unknown call_tmp[666167] "expr temp" "maybe param" "maybe type" "temp"
    (666170 'move' call_tmp[666167](142925 call == call_tmp[666162] nil[44]))
    unknown call_tmp[666172] "expr temp" "maybe param" "maybe type" "temp"
    (666175 'move' call_tmp[666172](142989 call _cond_test call_tmp[666167]))
    if call_tmp[666172]
    {
    }
    {
      unknown call_tmp[666179] "expr temp" "maybe param" "maybe type" "temp"
      (666182 'move' call_tmp[666179](142929 call _value _mt[243] lhs[142843]))
      unknown call_tmp[666186] "expr temp" "maybe param" "maybe type" "temp"
      (666189 'move' call_tmp[666186](142933 call _value _mt[243] rhs[142815]))
      unknown call_tmp[666191] "expr temp" "maybe param" "maybe type" "temp"
      (666194 'move' call_tmp[666191](142936 call == call_tmp[666179] call_tmp[666186]))
      unknown call_tmp[666196] "expr temp" "maybe param" "maybe type" "temp"
      (666199 'move' call_tmp[666196](142984 call _cond_test call_tmp[666191]))
      if call_tmp[666196]
      {
      }
      {
        unknown tmp[426958] "maybe param" "temp"
        unknown call_tmp[666203] "expr temp" "maybe param" "maybe type" "temp"
        (666206 'move' call_tmp[666203](142940 call size _mt[243] lhs[142843]))
        (426969 'move' tmp[426958](142944 call == call_tmp[666203] 0))
        unknown call_tmp[666208] "expr temp" "maybe param" "maybe type" "temp"
        (666211 'move' call_tmp[666208](426971 call _cond_invalid tmp[426958]))
        if call_tmp[666208]
        {
          (426974 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568233] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568234] "maybe param" "temp"
        unknown call_tmp[666213] "expr temp" "maybe param" "maybe type" "temp"
        (666216 'move' call_tmp[666213](426959 call isTrue tmp[426958]))
        (568239 'move' tmp[568234](568237 call _cond_test call_tmp[666213]))
        if tmp[568234]
        {
          unknown tmp[568241] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666220] "expr temp" "maybe param" "maybe type" "temp"
          (666223 'move' call_tmp[666220](142947 call size _mt[243] rhs[142815]))
          unknown call_tmp[666225] "expr temp" "maybe param" "maybe type" "temp"
          (666228 'move' call_tmp[666225](142951 call == call_tmp[666220] 0))
          (568243 'move' tmp[568241](426962 call isTrue call_tmp[666225]))
          (568248 'move' tmp[568233](568245 '_paramFoldLogical' tmp[568234] tmp[568241]))
        }
        {
          (568253 'move' tmp[568233](568250 '_paramFoldLogical' tmp[568234] 0))
        }
        unknown call_tmp[666230] "expr temp" "maybe param" "maybe type" "temp"
        (666233 'move' call_tmp[666230](142980 call _cond_test tmp[568233]))
        if call_tmp[666230]
        {
        }
        {
          unknown call_tmp[666235] "expr temp" "maybe param" "maybe type" "temp"
          (666238 'move' call_tmp[666235](142963 call _cond_test 1))
          if call_tmp[666235]
          {
            (142961 call checkArrayShapesUponAssignment lhs[142843] rhs[142815])
            (481085 'end of statement' lhs[142843])
          }
          (142978 call chpl__uncheckedArrayTransfer lhs[142843] rhs[142815](kind = initCopy[137995]))
          (481087 'end of statement' lhs[142843])
        }
      }
    }
    unknown call_tmp[666242] "expr temp" "maybe param" "maybe type" "temp"
    (666245 'move' call_tmp[666242](142995 call _value _mt[243] lhs[142843]))
    (143004 call(143000 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666242]))
    (481089 'end of statement' lhs[142843])
    (519485 'move' ret[519480](519484 'deref' lhs[142843]))
    gotoReturn _end_chpl__coerceCopy[519478] _end_chpl__coerceCopy[519478]
    (481091 'end of statement' lhs[142843])
    label _end_chpl__coerceCopy[519478]
    (519482 return ret[519480])
  }
  function chpl__coerceMove[143017](arg dstType[143014]:_array[133600](?), in arg rhs[143020]:_array[133600](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519491] "RVV" "temp"
    unknown eltType[143027] "dead at end of block" "insert auto destroy" "type variable"(143026 call chpl__eltTypeFromArrayRuntimeType dstType[143014])
    (543369 'move' eltType[143027](543367 call chpl__eltTypeFromArrayRuntimeType dstType[143014]))
    const dom[143035] "dead at end of block" "const" "ref var"
    unknown call_tmp[666249] "expr temp" "maybe param" "maybe type" "temp"
    (666252 'move' call_tmp[666249](143034 call chpl__domainFromArrayRuntimeType dstType[143014]))
    (543372 'move' dom[143035](543371 'addr of' call_tmp[666249]))
    (143038 'end of statement')
    { scopeless type
      unknown call_type_tmp[492361] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[666256] "expr temp" "maybe param" "maybe type" "temp"
      (666259 'move' call_tmp[666256](143040 call _instance _mt[243] rhs[143020]))
      (492365 'move' call_type_tmp[492361](143043 'typeof' call_tmp[666256]))
    }
    unknown call_tmp[666261] "expr temp" "maybe param" "maybe type" "temp"
    (666264 'move' call_tmp[666261](143047 call chpl__instanceTypeFromArrayRuntimeType dstType[143014]))
    unknown call_tmp[666266] "maybe param" "maybe type" "temp"
    (666269 'move' call_tmp[666266](143048 call != call_type_tmp[492361] call_tmp[666261]))
    unknown typeMismatch[143050] "dead at end of block" "param"
    (543374 'init var' typeMismatch[143050] call_tmp[666266])
    (143053 'end of statement')
    unknown call_tmp[666271] "maybe param" "maybe type" "temp"
    (666274 'move' call_tmp[666271](143055 call ! typeMismatch[143050]))
    unknown moveElts[143057] "dead at end of block" "param"
    (543376 'init var' moveElts[143057] call_tmp[666271])
    (143060 'end of statement')
    unknown tmp[426979] "maybe param" "temp"
    (426990 'move' tmp[426979] moveElts[143057])
    unknown call_tmp[666276] "expr temp" "maybe param" "maybe type" "temp"
    (666279 'move' call_tmp[666276](426992 call _cond_invalid tmp[426979]))
    if call_tmp[666276]
    {
      (426995 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568260] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568261] "maybe param" "temp"
    unknown call_tmp[666281] "expr temp" "maybe param" "maybe type" "temp"
    (666284 'move' call_tmp[666281](426980 call isTrue tmp[426979]))
    (568266 'move' tmp[568261](568264 call _cond_test call_tmp[666281]))
    if tmp[568261]
    {
      unknown tmp[568268] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666288] "expr temp" "maybe param" "maybe type" "temp"
      (666291 'move' call_tmp[666288](143063 call _instance _mt[243] dom[143035]))
      unknown call_tmp[666295] "expr temp" "maybe param" "maybe type" "temp"
      (666298 'move' call_tmp[666295](143067 call _dom _mt[243] rhs[143020]))
      unknown call_tmp[666302] "expr temp" "maybe param" "maybe type" "temp"
      (666305 'move' call_tmp[666302](143070 call _instance _mt[243] call_tmp[666295]))
      unknown call_tmp[666307] "expr temp" "maybe param" "maybe type" "temp"
      (666310 'move' call_tmp[666307](143073 call == call_tmp[666288] call_tmp[666302]))
      (568270 'move' tmp[568268](426983 call isTrue call_tmp[666307]))
      (568275 'move' tmp[568260](568272 '_paramFoldLogical' tmp[568261] tmp[568268]))
    }
    {
      (568280 'move' tmp[568260](568277 '_paramFoldLogical' tmp[568261] 0))
    }
    unknown call_tmp[666312] "expr temp" "maybe param" "maybe type" "temp"
    (666315 'move' call_tmp[666312](143081 call _cond_test tmp[568260]))
    if call_tmp[666312]
    {
      (519496 'move' ret[519491](519495 'deref' rhs[143020]))
      gotoReturn _end_chpl__coerceMove[519489] _end_chpl__coerceMove[519489]
    }
    unknown call_tmp[666319] "maybe param" "maybe type" "temp"
    (666322 'move' call_tmp[666319](143093 call(143086 call (partial) buildArray _mt[243] dom[143035]) eltType[143027](initElts = 0)))
    unknown lhs[143094] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543378 'init var' lhs[143094] call_tmp[666319])
    (143097 'end of statement' dom[143035] eltType[143027])
    unknown call_tmp[666326] "expr temp" "maybe param" "maybe type" "temp"
    (666329 'move' call_tmp[666326](143099 call rank _mt[243] lhs[143094]))
    unknown call_tmp[666333] "expr temp" "maybe param" "maybe type" "temp"
    (666336 'move' call_tmp[666333](143103 call rank _mt[243] rhs[143020]))
    unknown call_tmp[666338] "expr temp" "maybe param" "maybe type" "temp"
    (666341 'move' call_tmp[666338](143106 call != call_tmp[666326] call_tmp[666333]))
    unknown call_tmp[666343] "expr temp" "maybe param" "maybe type" "temp"
    (666346 'move' call_tmp[666343](143113 call _cond_test call_tmp[666338]))
    if call_tmp[666343]
    {
      (143111 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[666350] "expr temp" "maybe param" "maybe type" "temp"
    (666353 'move' call_tmp[666350](143119 call _value _mt[243] rhs[143020]))
    unknown call_tmp[666355] "expr temp" "maybe param" "maybe type" "temp"
    (666358 'move' call_tmp[666355](143123 call == call_tmp[666350] nil[44]))
    unknown call_tmp[666360] "expr temp" "maybe param" "maybe type" "temp"
    (666363 'move' call_tmp[666360](143200 call _cond_test call_tmp[666355]))
    if call_tmp[666360]
    {
    }
    {
      unknown call_tmp[666367] "expr temp" "maybe param" "maybe type" "temp"
      (666370 'move' call_tmp[666367](143127 call _value _mt[243] lhs[143094]))
      unknown call_tmp[666374] "expr temp" "maybe param" "maybe type" "temp"
      (666377 'move' call_tmp[666374](143131 call _value _mt[243] rhs[143020]))
      unknown call_tmp[666379] "expr temp" "maybe param" "maybe type" "temp"
      (666382 'move' call_tmp[666379](143134 call == call_tmp[666367] call_tmp[666374]))
      unknown call_tmp[666384] "expr temp" "maybe param" "maybe type" "temp"
      (666387 'move' call_tmp[666384](143195 call _cond_test call_tmp[666379]))
      if call_tmp[666384]
      {
      }
      {
        unknown tmp[427000] "maybe param" "temp"
        unknown call_tmp[666391] "expr temp" "maybe param" "maybe type" "temp"
        (666394 'move' call_tmp[666391](143138 call size _mt[243] lhs[143094]))
        (427011 'move' tmp[427000](143142 call == call_tmp[666391] 0))
        unknown call_tmp[666396] "expr temp" "maybe param" "maybe type" "temp"
        (666399 'move' call_tmp[666396](427013 call _cond_invalid tmp[427000]))
        if call_tmp[666396]
        {
          (427016 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[568287] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568288] "maybe param" "temp"
        unknown call_tmp[666401] "expr temp" "maybe param" "maybe type" "temp"
        (666404 'move' call_tmp[666401](427001 call isTrue tmp[427000]))
        (568293 'move' tmp[568288](568291 call _cond_test call_tmp[666401]))
        if tmp[568288]
        {
          unknown tmp[568295] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[666408] "expr temp" "maybe param" "maybe type" "temp"
          (666411 'move' call_tmp[666408](143145 call size _mt[243] rhs[143020]))
          unknown call_tmp[666413] "expr temp" "maybe param" "maybe type" "temp"
          (666416 'move' call_tmp[666413](143149 call == call_tmp[666408] 0))
          (568297 'move' tmp[568295](427004 call isTrue call_tmp[666413]))
          (568302 'move' tmp[568287](568299 '_paramFoldLogical' tmp[568288] tmp[568295]))
        }
        {
          (568307 'move' tmp[568287](568304 '_paramFoldLogical' tmp[568288] 0))
        }
        unknown call_tmp[666418] "expr temp" "maybe param" "maybe type" "temp"
        (666421 'move' call_tmp[666418](143191 call _cond_test tmp[568287]))
        if call_tmp[666418]
        {
        }
        {
          unknown call_tmp[666423] "expr temp" "maybe param" "maybe type" "temp"
          (666426 'move' call_tmp[666423](143161 call _cond_test 1))
          if call_tmp[666423]
          {
            (143159 call checkArrayShapesUponAssignment lhs[143094] rhs[143020])
            (481099 'end of statement' lhs[143094])
          }
          unknown kind[143179] "dead at end of block" "param"
          unknown tmp[568314] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568315] "maybe param" "temp"
          (568320 'move' tmp[568315](568318 call _cond_test moveElts[143057]))
          if tmp[568315]
          {
            (568325 'move' tmp[568314](568322 '_paramFoldLogical' tmp[568315] move[137993]))
          }
          {
            (568330 'move' tmp[568314](568327 '_paramFoldLogical' tmp[568315] initCopy[137995]))
          }
          (543380 'init var' kind[143179] tmp[568314])
          (143182 'end of statement')
          (143189 call chpl__uncheckedArrayTransfer lhs[143094] rhs[143020](kind = kind[143179]))
          (481101 'end of statement' lhs[143094])
        }
      }
    }
    unknown call_tmp[666430] "expr temp" "maybe param" "maybe type" "temp"
    (666433 'move' call_tmp[666430](143207 call _unowned _mt[243] rhs[143020]))
    unknown call_tmp[666437] "expr temp" "maybe param" "maybe type" "temp"
    (666440 'move' call_tmp[666437](143212 call _instance _mt[243] rhs[143020]))
    unknown call_tmp[666442] "expr temp" "maybe param" "maybe type" "temp"
    (666445 'move' call_tmp[666442](143216 call ! moveElts[143057]))
    (143219 call _do_destroy_arr call_tmp[666430] call_tmp[666437](deinitElts = call_tmp[666442]))
    (481103 'end of statement')
    unknown call_tmp[666449] "expr temp" "maybe param" "maybe type" "temp"
    (666452 'move' call_tmp[666449](143222 call _value _mt[243] lhs[143094]))
    (143229 call(143225 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666449]))
    (481104 'end of statement' lhs[143094])
    (519501 'move' ret[519491](519500 'deref' lhs[143094]))
    gotoReturn _end_chpl__coerceMove[519489] _end_chpl__coerceMove[519489]
    (481106 'end of statement' lhs[143094])
    label _end_chpl__coerceMove[519489]
    (519493 return ret[519491])
  }
  function chpl__coerceCopy[143242](arg dstType[143239]:_array[133600](?), arg rhs[143245]:_domain[125914](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519507] "RVV" "temp"
    unknown eltType[143252] "dead at end of block" "insert auto destroy" "type variable"(143251 call chpl__eltTypeFromArrayRuntimeType dstType[143239])
    (543385 'move' eltType[143252](543383 call chpl__eltTypeFromArrayRuntimeType dstType[143239]))
    const dom[143260] "dead at end of block" "const" "ref var"
    unknown call_tmp[666456] "expr temp" "maybe param" "maybe type" "temp"
    (666459 'move' call_tmp[666456](143259 call chpl__domainFromArrayRuntimeType dstType[143239]))
    (543388 'move' dom[143260](543387 'addr of' call_tmp[666456]))
    (143263 'end of statement')
    unknown call_tmp[666463] "maybe param" "maybe type" "temp"
    (666466 'move' call_tmp[666463](143272 call(143265 call (partial) buildArray _mt[243] dom[143260]) eltType[143252](initElts = 0)))
    unknown lhs[143273] "dead at end of block" "insert auto destroy" "no copy"
    (543390 'init var' lhs[143273] call_tmp[666463])
    (143276 'end of statement' dom[143260] eltType[143252])
    unknown call_tmp[666470] "expr temp" "maybe param" "maybe type" "temp"
    (666473 'move' call_tmp[666470](143278 call rank _mt[243] lhs[143273]))
    unknown call_tmp[666477] "expr temp" "maybe param" "maybe type" "temp"
    (666480 'move' call_tmp[666477](143282 call rank _mt[243] rhs[143245]))
    unknown call_tmp[666482] "expr temp" "maybe param" "maybe type" "temp"
    (666485 'move' call_tmp[666482](143285 call != call_tmp[666470] call_tmp[666477]))
    unknown call_tmp[666487] "expr temp" "maybe param" "maybe type" "temp"
    (666490 'move' call_tmp[666487](143292 call _cond_test call_tmp[666482]))
    if call_tmp[666487]
    {
      (143290 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[427021] "maybe param" "temp"
    (427032 'move' tmp[427021](143300 call isAssociativeDom rhs[143245]))
    unknown call_tmp[666492] "expr temp" "maybe param" "maybe type" "temp"
    (666495 'move' call_tmp[666492](427034 call _cond_invalid tmp[427021]))
    if call_tmp[666492]
    {
      (427037 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568337] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568338] "maybe param" "temp"
    unknown call_tmp[666497] "expr temp" "maybe param" "maybe type" "temp"
    (666500 'move' call_tmp[666497](427022 call isTrue tmp[427021]))
    (568343 'move' tmp[568338](568341 call _cond_test call_tmp[666497]))
    if tmp[568338]
    {
      unknown tmp[568345] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666502] "expr temp" "maybe param" "maybe type" "temp"
      (666505 'move' call_tmp[666502](143304 call isRectangularArr lhs[143273]))
      (568347 'move' tmp[568345](427025 call isTrue call_tmp[666502]))
      (568352 'move' tmp[568337](568349 '_paramFoldLogical' tmp[568338] tmp[568345]))
    }
    {
      (568357 'move' tmp[568337](568354 '_paramFoldLogical' tmp[568338] 0))
    }
    unknown call_tmp[666507] "expr temp" "maybe param" "maybe type" "temp"
    (666510 'move' call_tmp[666507](143312 call _cond_test tmp[568337]))
    if call_tmp[666507]
    {
      (143310 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666512] "expr temp" "maybe param" "maybe type" "temp"
    (666515 'move' call_tmp[666512](143320 call isPODType eltType[143252]))
    unknown call_tmp[666517] "expr temp" "maybe param" "maybe type" "temp"
    (666520 'move' call_tmp[666517](143321 call ! call_tmp[666512]))
    unknown call_tmp[666522] "expr temp" "maybe param" "maybe type" "temp"
    (666525 'move' call_tmp[666522](143344 call _cond_test call_tmp[666517]))
    if call_tmp[666522]
    {
      (143342 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143358 call chpl__transferArray lhs[143273] rhs[143245](kind = initCopy[137995]))
    (481114 'end of statement' lhs[143273])
    unknown call_tmp[666529] "expr temp" "maybe param" "maybe type" "temp"
    (666532 'move' call_tmp[666529](143361 call _value _mt[243] lhs[143273]))
    (143368 call(143364 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666529]))
    (481116 'end of statement' lhs[143273])
    (519512 'move' ret[519507](519511 'deref' lhs[143273]))
    gotoReturn _end_chpl__coerceCopy[519505] _end_chpl__coerceCopy[519505]
    (481118 'end of statement' lhs[143273])
    label _end_chpl__coerceCopy[519505]
    (519509 return ret[519507])
  }
  function chpl__coerceMove[143381](arg dstType[143378]:_array[133600](?), in arg rhs[143384]:_domain[125914](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519518] "RVV" "temp"
    unknown eltType[143391] "dead at end of block" "insert auto destroy" "type variable"(143390 call chpl__eltTypeFromArrayRuntimeType dstType[143378])
    (543395 'move' eltType[143391](543393 call chpl__eltTypeFromArrayRuntimeType dstType[143378]))
    const dom[143399] "dead at end of block" "const" "ref var"
    unknown call_tmp[666536] "expr temp" "maybe param" "maybe type" "temp"
    (666539 'move' call_tmp[666536](143398 call chpl__domainFromArrayRuntimeType dstType[143378]))
    (543398 'move' dom[143399](543397 'addr of' call_tmp[666536]))
    (143402 'end of statement')
    unknown call_tmp[666543] "maybe param" "maybe type" "temp"
    (666546 'move' call_tmp[666543](143411 call(143404 call (partial) buildArray _mt[243] dom[143399]) eltType[143391](initElts = 0)))
    unknown lhs[143412] "dead at end of block" "insert auto destroy" "no copy"
    (543400 'init var' lhs[143412] call_tmp[666543])
    (143415 'end of statement' dom[143399] eltType[143391])
    unknown call_tmp[666550] "expr temp" "maybe param" "maybe type" "temp"
    (666553 'move' call_tmp[666550](143417 call rank _mt[243] lhs[143412]))
    unknown call_tmp[666557] "expr temp" "maybe param" "maybe type" "temp"
    (666560 'move' call_tmp[666557](143421 call rank _mt[243] rhs[143384]))
    unknown call_tmp[666562] "expr temp" "maybe param" "maybe type" "temp"
    (666565 'move' call_tmp[666562](143424 call != call_tmp[666550] call_tmp[666557]))
    unknown call_tmp[666567] "expr temp" "maybe param" "maybe type" "temp"
    (666570 'move' call_tmp[666567](143431 call _cond_test call_tmp[666562]))
    if call_tmp[666567]
    {
      (143429 call compilerError "rank mismatch in array assignment")
    }
    unknown tmp[427042] "maybe param" "temp"
    (427053 'move' tmp[427042](143439 call isAssociativeDom rhs[143384]))
    unknown call_tmp[666572] "expr temp" "maybe param" "maybe type" "temp"
    (666575 'move' call_tmp[666572](427055 call _cond_invalid tmp[427042]))
    if call_tmp[666572]
    {
      (427058 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568364] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568365] "maybe param" "temp"
    unknown call_tmp[666577] "expr temp" "maybe param" "maybe type" "temp"
    (666580 'move' call_tmp[666577](427043 call isTrue tmp[427042]))
    (568370 'move' tmp[568365](568368 call _cond_test call_tmp[666577]))
    if tmp[568365]
    {
      unknown tmp[568372] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666582] "expr temp" "maybe param" "maybe type" "temp"
      (666585 'move' call_tmp[666582](143443 call isRectangularArr lhs[143412]))
      (568374 'move' tmp[568372](427046 call isTrue call_tmp[666582]))
      (568379 'move' tmp[568364](568376 '_paramFoldLogical' tmp[568365] tmp[568372]))
    }
    {
      (568384 'move' tmp[568364](568381 '_paramFoldLogical' tmp[568365] 0))
    }
    unknown call_tmp[666587] "expr temp" "maybe param" "maybe type" "temp"
    (666590 'move' call_tmp[666587](143451 call _cond_test tmp[568364]))
    if call_tmp[666587]
    {
      (143449 call compilerError "cannot assign to rectangular arrays from associative domains")
    }
    unknown call_tmp[666592] "expr temp" "maybe param" "maybe type" "temp"
    (666595 'move' call_tmp[666592](143459 call isPODType eltType[143391]))
    unknown call_tmp[666597] "expr temp" "maybe param" "maybe type" "temp"
    (666600 'move' call_tmp[666597](143460 call ! call_tmp[666592]))
    unknown call_tmp[666602] "expr temp" "maybe param" "maybe type" "temp"
    (666605 'move' call_tmp[666602](143467 call _cond_test call_tmp[666597]))
    if call_tmp[666602]
    {
      (143465 call compilerError "cannot assign to array from domain of non-POD indices")
    }
    (143481 call chpl__transferArray lhs[143412] rhs[143384](kind = initCopy[137995]))
    (481126 'end of statement' lhs[143412])
    unknown call_tmp[666609] "expr temp" "maybe param" "maybe type" "temp"
    (666612 'move' call_tmp[666609](143484 call _value _mt[243] lhs[143412]))
    (143491 call(143487 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666609]))
    (481128 'end of statement' lhs[143412])
    (519523 'move' ret[519518](519522 'deref' lhs[143412]))
    gotoReturn _end_chpl__coerceMove[519516] _end_chpl__coerceMove[519516]
    (481130 'end of statement' lhs[143412])
    label _end_chpl__coerceMove[519516]
    (519520 return ret[519518])
  }
  function chpl__coerceCopy[143504](arg dstType[143501]:_array[133600](?), arg rhs[143510]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519529] "RVV" "temp"
    unknown eltType[143517] "dead at end of block" "insert auto destroy" "type variable"(143516 call chpl__eltTypeFromArrayRuntimeType dstType[143501])
    (543405 'move' eltType[143517](543403 call chpl__eltTypeFromArrayRuntimeType dstType[143501]))
    const dom[143525] "dead at end of block" "const" "ref var"
    unknown call_tmp[666616] "expr temp" "maybe param" "maybe type" "temp"
    (666619 'move' call_tmp[666616](143524 call chpl__domainFromArrayRuntimeType dstType[143501]))
    (543408 'move' dom[143525](543407 'addr of' call_tmp[666616]))
    (143528 'end of statement')
    unknown call_tmp[666623] "maybe param" "maybe type" "temp"
    (666626 'move' call_tmp[666623](143537 call(143530 call (partial) buildArray _mt[243] dom[143525]) eltType[143517](initElts = 0)))
    unknown lhs[143538] "dead at end of block" "insert auto destroy" "no copy"
    (543410 'init var' lhs[143538] call_tmp[666623])
    (143541 'end of statement' dom[143525] eltType[143517])
    unknown call_tmp[666630] "expr temp" "maybe param" "maybe type" "temp"
    (666633 'move' call_tmp[666630](143543 call rank _mt[243] lhs[143538]))
    unknown call_tmp[666635] "expr temp" "maybe param" "maybe type" "temp"
    (666638 'move' call_tmp[666635](143547 call != call_tmp[666630] 1))
    unknown call_tmp[666640] "expr temp" "maybe param" "maybe type" "temp"
    (666643 'move' call_tmp[666640](143554 call _cond_test call_tmp[666635]))
    if call_tmp[666640]
    {
      (143552 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143568 call chpl__transferArray lhs[143538] rhs[143510](kind = initCopy[137995]))
    (481135 'end of statement' lhs[143538])
    unknown call_tmp[666647] "expr temp" "maybe param" "maybe type" "temp"
    (666650 'move' call_tmp[666647](143571 call _value _mt[243] lhs[143538]))
    (143578 call(143574 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666647]))
    (481137 'end of statement' lhs[143538])
    (519534 'move' ret[519529](519533 'deref' lhs[143538]))
    gotoReturn _end_chpl__coerceCopy[519527] _end_chpl__coerceCopy[519527]
    (481139 'end of statement' lhs[143538])
    label _end_chpl__coerceCopy[519527]
    (519531 return ret[519529])
  }
  function chpl__coerceMove[143591](arg dstType[143588]:_array[133600](?), in arg rhs[143597]:range[64316](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519540] "RVV" "temp"
    unknown eltType[143604] "dead at end of block" "insert auto destroy" "type variable"(143603 call chpl__eltTypeFromArrayRuntimeType dstType[143588])
    (543415 'move' eltType[143604](543413 call chpl__eltTypeFromArrayRuntimeType dstType[143588]))
    const dom[143612] "dead at end of block" "const" "ref var"
    unknown call_tmp[666654] "expr temp" "maybe param" "maybe type" "temp"
    (666657 'move' call_tmp[666654](143611 call chpl__domainFromArrayRuntimeType dstType[143588]))
    (543418 'move' dom[143612](543417 'addr of' call_tmp[666654]))
    (143615 'end of statement')
    unknown call_tmp[666661] "maybe param" "maybe type" "temp"
    (666664 'move' call_tmp[666661](143624 call(143617 call (partial) buildArray _mt[243] dom[143612]) eltType[143604](initElts = 0)))
    unknown lhs[143625] "dead at end of block" "insert auto destroy" "no copy"
    (543420 'init var' lhs[143625] call_tmp[666661])
    (143628 'end of statement' dom[143612] eltType[143604])
    unknown call_tmp[666668] "expr temp" "maybe param" "maybe type" "temp"
    (666671 'move' call_tmp[666668](143630 call rank _mt[243] lhs[143625]))
    unknown call_tmp[666673] "expr temp" "maybe param" "maybe type" "temp"
    (666676 'move' call_tmp[666673](143634 call != call_tmp[666668] 1))
    unknown call_tmp[666678] "expr temp" "maybe param" "maybe type" "temp"
    (666681 'move' call_tmp[666678](143641 call _cond_test call_tmp[666673]))
    if call_tmp[666678]
    {
      (143639 call compilerError "cannot assign from ranges to multidimensional arrays")
    }
    (143655 call chpl__transferArray lhs[143625] rhs[143597](kind = initCopy[137995]))
    (481144 'end of statement' lhs[143625])
    unknown call_tmp[666685] "expr temp" "maybe param" "maybe type" "temp"
    (666688 'move' call_tmp[666685](143658 call _value _mt[243] lhs[143625]))
    (143665 call(143661 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666685]))
    (481146 'end of statement' lhs[143625])
    (519545 'move' ret[519540](519544 'deref' lhs[143625]))
    gotoReturn _end_chpl__coerceMove[519538] _end_chpl__coerceMove[519538]
    (481148 'end of statement' lhs[143625])
    label _end_chpl__coerceMove[519538]
    (519542 return ret[519540])
  }
  function chpl__coerceCopy[143678](arg dstType[143675]:_array[133600](?), arg rhs[143681]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519551] "RVV" "temp"
    unknown eltType[143688] "dead at end of block" "insert auto destroy" "type variable"(143687 call chpl__eltTypeFromArrayRuntimeType dstType[143675])
    (543425 'move' eltType[143688](543423 call chpl__eltTypeFromArrayRuntimeType dstType[143675]))
    const dom[143696] "dead at end of block" "const" "ref var"
    unknown call_tmp[666692] "expr temp" "maybe param" "maybe type" "temp"
    (666695 'move' call_tmp[666692](143695 call chpl__domainFromArrayRuntimeType dstType[143675]))
    (543428 'move' dom[143696](543427 'addr of' call_tmp[666692]))
    (143699 'end of statement')
    unknown call_tmp[666699] "maybe param" "maybe type" "temp"
    (666702 'move' call_tmp[666699](143708 call(143701 call (partial) buildArray _mt[243] dom[143696]) eltType[143688](initElts = 0)))
    unknown lhs[143709] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543430 'init var' lhs[143709] call_tmp[666699])
    (143712 'end of statement' dom[143696] eltType[143688])
    unknown call_tmp[666704] "expr temp" "maybe param" "maybe type" "temp"
    (666707 'move' call_tmp[666704](143716 call isRectangularArr lhs[143709]))
    unknown call_tmp[666709] "expr temp" "maybe param" "maybe type" "temp"
    (666712 'move' call_tmp[666709](143717 call ! call_tmp[666704]))
    unknown call_tmp[666714] "expr temp" "maybe param" "maybe type" "temp"
    (666717 'move' call_tmp[666714](143740 call _cond_test call_tmp[666709]))
    if call_tmp[666714]
    {
      (143738 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143753 call initArrFromTuple lhs[143709] rhs[143681] initCopy[137995])
    (481153 'end of statement' lhs[143709])
    unknown call_tmp[666721] "expr temp" "maybe param" "maybe type" "temp"
    (666724 'move' call_tmp[666721](143756 call _value _mt[243] lhs[143709]))
    (143763 call(143759 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666721]))
    (481155 'end of statement' lhs[143709])
    (519556 'move' ret[519551](519555 'deref' lhs[143709]))
    gotoReturn _end_chpl__coerceCopy[519549] _end_chpl__coerceCopy[519549]
    (481157 'end of statement' lhs[143709])
    label _end_chpl__coerceCopy[519549]
    (519553 return ret[519551])
  }
  function chpl__coerceMove[143776](arg dstType[143773]:_array[133600](?), in arg rhs[143779]:_tuple[56199](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519562] "RVV" "temp"
    unknown eltType[143786] "dead at end of block" "insert auto destroy" "type variable"(143785 call chpl__eltTypeFromArrayRuntimeType dstType[143773])
    (543435 'move' eltType[143786](543433 call chpl__eltTypeFromArrayRuntimeType dstType[143773]))
    const dom[143794] "dead at end of block" "const" "ref var"
    unknown call_tmp[666728] "expr temp" "maybe param" "maybe type" "temp"
    (666731 'move' call_tmp[666728](143793 call chpl__domainFromArrayRuntimeType dstType[143773]))
    (543438 'move' dom[143794](543437 'addr of' call_tmp[666728]))
    (143797 'end of statement')
    unknown call_tmp[666735] "maybe param" "maybe type" "temp"
    (666738 'move' call_tmp[666735](143806 call(143799 call (partial) buildArray _mt[243] dom[143794]) eltType[143786](initElts = 0)))
    unknown lhs[143807] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543440 'init var' lhs[143807] call_tmp[666735])
    (143810 'end of statement' dom[143794] eltType[143786])
    unknown call_tmp[666740] "expr temp" "maybe param" "maybe type" "temp"
    (666743 'move' call_tmp[666740](143814 call isRectangularArr lhs[143807]))
    unknown call_tmp[666745] "expr temp" "maybe param" "maybe type" "temp"
    (666748 'move' call_tmp[666745](143815 call ! call_tmp[666740]))
    unknown call_tmp[666750] "expr temp" "maybe param" "maybe type" "temp"
    (666753 'move' call_tmp[666750](143822 call _cond_test call_tmp[666745]))
    if call_tmp[666750]
    {
      (143820 call compilerError "Cannot assign from tuple to non-rectangular array")
    }
    (143835 call initArrFromTuple lhs[143807] rhs[143779] move[137993])
    (481162 'end of statement' lhs[143807])
    unknown call_tmp[666757] "expr temp" "maybe param" "maybe type" "temp"
    (666760 'move' call_tmp[666757](143838 call _value _mt[243] lhs[143807]))
    (143845 call(143841 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666757]))
    (481164 'end of statement' lhs[143807])
    (519567 'move' ret[519562](519566 'deref' lhs[143807]))
    gotoReturn _end_chpl__coerceMove[519560] _end_chpl__coerceMove[519560]
    (481166 'end of statement' lhs[143807])
    label _end_chpl__coerceMove[519560]
    (519564 return ret[519562])
  }
  function chpl__coerceCopy[143858](arg dstType[143855]:_array[133600](?), arg rhs[143864] :
  (143863 call desyncEltType dstType[143855])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519573] "RVV" "temp"
    unknown eltType[143871] "dead at end of block" "insert auto destroy" "type variable"(143870 call chpl__eltTypeFromArrayRuntimeType dstType[143855])
    (543445 'move' eltType[143871](543443 call chpl__eltTypeFromArrayRuntimeType dstType[143855]))
    const dom[143879] "dead at end of block" "const" "ref var"
    unknown call_tmp[666764] "expr temp" "maybe param" "maybe type" "temp"
    (666767 'move' call_tmp[666764](143878 call chpl__domainFromArrayRuntimeType dstType[143855]))
    (543448 'move' dom[143879](543447 'addr of' call_tmp[666764]))
    (143882 'end of statement')
    unknown call_tmp[666771] "maybe param" "maybe type" "temp"
    (666774 'move' call_tmp[666771](143891 call(143884 call (partial) buildArray _mt[243] dom[143879]) eltType[143871](initElts = 0)))
    unknown lhs[143892] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543450 'init var' lhs[143892] call_tmp[666771])
    (143895 'end of statement' dom[143879] eltType[143871])
    Forall {
      induction variables:
        
        unknown e[143921] "index var" "insert auto destroy"
      iterated expressions:
        lhs[143892]
      shadow variables:
        rhs[143899] 'in' intent outer var rhs[143864]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown call_tmp[666778] "maybe param" "maybe type" "temp"
        (666781 'move' call_tmp[666778](143905 call eltType _mt[243] lhs[143892]))
        unknown copy[143909] "dead at end of block" "no auto destroy"
        (543452 'init var' copy[143909] rhs[143899] call_tmp[666778])
        (143912 'end of statement' rhs[143899] lhs[143892])
        (143918 '=' e[143921] copy[143909])
        (481172 'end of statement' e[143921] copy[143909])
      }
    }
    unknown call_tmp[666785] "expr temp" "maybe param" "maybe type" "temp"
    (666788 'move' call_tmp[666785](143925 call _value _mt[243] lhs[143892]))
    (143932 call(143928 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666785]))
    (481175 'end of statement' lhs[143892])
    (519578 'move' ret[519573](519577 'deref' lhs[143892]))
    gotoReturn _end_chpl__coerceCopy[519571] _end_chpl__coerceCopy[519571]
    (481177 'end of statement' lhs[143892])
    label _end_chpl__coerceCopy[519571]
    (519575 return ret[519573])
  }
  function chpl__coerceMove[143945](arg dstType[143942]:_array[133600](?), in arg rhs[143951] :
  (143950 call desyncEltType dstType[143942])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519584] "RVV" "temp"
    unknown eltType[143958] "dead at end of block" "insert auto destroy" "type variable"(143957 call chpl__eltTypeFromArrayRuntimeType dstType[143942])
    (543457 'move' eltType[143958](543455 call chpl__eltTypeFromArrayRuntimeType dstType[143942]))
    const dom[143966] "dead at end of block" "const" "ref var"
    unknown call_tmp[666792] "expr temp" "maybe param" "maybe type" "temp"
    (666795 'move' call_tmp[666792](143965 call chpl__domainFromArrayRuntimeType dstType[143942]))
    (543460 'move' dom[143966](543459 'addr of' call_tmp[666792]))
    (143969 'end of statement')
    unknown call_tmp[666799] "maybe param" "maybe type" "temp"
    (666802 'move' call_tmp[666799](143978 call(143971 call (partial) buildArray _mt[243] dom[143966]) eltType[143958](initElts = 0)))
    unknown lhs[143979] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543462 'init var' lhs[143979] call_tmp[666799])
    (143982 'end of statement' dom[143966] eltType[143958])
    Forall {
      induction variables:
        
        unknown e[144005] "index var" "insert auto destroy"
      iterated expressions:
        lhs[143979]
      shadow variables:
        rhs[143986] 'in' intent outer var rhs[143951]
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        unknown copy[143993] "dead at end of block" "no auto destroy"
        (543464 'init var' copy[143993] rhs[143986] eltType[143958])
        (143996 'end of statement' rhs[143986] eltType[143958])
        (144002 '=' e[144005] copy[143993])
        (481183 'end of statement' e[144005] copy[143993])
      }
    }
    unknown call_tmp[666806] "expr temp" "maybe param" "maybe type" "temp"
    (666809 'move' call_tmp[666806](144009 call _value _mt[243] lhs[143979]))
    (144016 call(144012 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666806]))
    (481186 'end of statement' lhs[143979])
    (519589 'move' ret[519584](519588 'deref' lhs[143979]))
    gotoReturn _end_chpl__coerceMove[519582] _end_chpl__coerceMove[519582]
    (481188 'end of statement' lhs[143979])
    label _end_chpl__coerceMove[519582]
    (519586 return ret[519584])
  }
  function chpl__coerceCopy[144029](arg dstType[144026]:_array[133600](?), arg rhs[144032]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519595] "RVV" "temp"
    unknown eltType[144039] "dead at end of block" "insert auto destroy" "type variable"(144038 call chpl__eltTypeFromArrayRuntimeType dstType[144026])
    (543469 'move' eltType[144039](543467 call chpl__eltTypeFromArrayRuntimeType dstType[144026]))
    const dom[144047] "dead at end of block" "const" "ref var"
    unknown call_tmp[666813] "expr temp" "maybe param" "maybe type" "temp"
    (666816 'move' call_tmp[666813](144046 call chpl__domainFromArrayRuntimeType dstType[144026]))
    (543472 'move' dom[144047](543471 'addr of' call_tmp[666813]))
    (144050 'end of statement')
    unknown call_tmp[666820] "maybe param" "maybe type" "temp"
    (666823 'move' call_tmp[666820](144059 call(144052 call (partial) buildArray _mt[243] dom[144047]) eltType[144039](initElts = 0)))
    unknown lhs[144060] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543474 'init var' lhs[144060] call_tmp[666820])
    (144063 'end of statement' dom[144047] eltType[144039])
    (144073 call chpl__transferArray lhs[144060] rhs[144032](kind = initCopy[137995]))
    (481192 'end of statement' lhs[144060])
    unknown call_tmp[666827] "expr temp" "maybe param" "maybe type" "temp"
    (666830 'move' call_tmp[666827](144076 call _value _mt[243] lhs[144060]))
    (144083 call(144079 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666827]))
    (481194 'end of statement' lhs[144060])
    (519600 'move' ret[519595](519599 'deref' lhs[144060]))
    gotoReturn _end_chpl__coerceCopy[519593] _end_chpl__coerceCopy[519593]
    (481196 'end of statement' lhs[144060])
    label _end_chpl__coerceCopy[519593]
    (519597 return ret[519595])
  }
  function chpl__coerceMove[144096](arg dstType[144093]:_array[133600](?), arg rhs[144099]:_iteratorRecord[205](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519606] "RVV" "temp"
    unknown eltType[144106] "dead at end of block" "insert auto destroy" "type variable"(144105 call chpl__eltTypeFromArrayRuntimeType dstType[144093])
    (543479 'move' eltType[144106](543477 call chpl__eltTypeFromArrayRuntimeType dstType[144093]))
    const dom[144114] "dead at end of block" "const" "ref var"
    unknown call_tmp[666834] "expr temp" "maybe param" "maybe type" "temp"
    (666837 'move' call_tmp[666834](144113 call chpl__domainFromArrayRuntimeType dstType[144093]))
    (543482 'move' dom[144114](543481 'addr of' call_tmp[666834]))
    (144117 'end of statement')
    unknown call_tmp[666841] "maybe param" "maybe type" "temp"
    (666844 'move' call_tmp[666841](144126 call(144119 call (partial) buildArray _mt[243] dom[144114]) eltType[144106](initElts = 0)))
    unknown lhs[144127] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543484 'init var' lhs[144127] call_tmp[666841])
    (144130 'end of statement' dom[144114] eltType[144106])
    (144140 call chpl__transferArray lhs[144127] rhs[144099](kind = move[137993]))
    (481200 'end of statement' lhs[144127])
    unknown call_tmp[666848] "expr temp" "maybe param" "maybe type" "temp"
    (666851 'move' call_tmp[666848](144143 call _value _mt[243] lhs[144127]))
    (144150 call(144146 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666848]))
    (481202 'end of statement' lhs[144127])
    (519611 'move' ret[519606](519610 'deref' lhs[144127]))
    gotoReturn _end_chpl__coerceMove[519604] _end_chpl__coerceMove[519604]
    (481204 'end of statement' lhs[144127])
    label _end_chpl__coerceMove[519604]
    (519608 return ret[519606])
  }
  function chpl__coerceCopy[144163](arg dstType[144160]:_array[133600](?), arg rhs[144165]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519617] "RVV" "temp"
    unknown eltType[144171] "dead at end of block" "insert auto destroy" "type variable"(144170 call chpl__eltTypeFromArrayRuntimeType dstType[144160])
    (543489 'move' eltType[144171](543487 call chpl__eltTypeFromArrayRuntimeType dstType[144160]))
    const dom[144179] "dead at end of block" "const" "ref var"
    unknown call_tmp[666855] "expr temp" "maybe param" "maybe type" "temp"
    (666858 'move' call_tmp[666855](144178 call chpl__domainFromArrayRuntimeType dstType[144160]))
    (543492 'move' dom[144179](543491 'addr of' call_tmp[666855]))
    (144182 'end of statement')
    unknown call_tmp[666862] "maybe param" "maybe type" "temp"
    (666865 'move' call_tmp[666862](144191 call(144184 call (partial) buildArray _mt[243] dom[144179]) eltType[144171](initElts = 0)))
    unknown lhs[144192] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543494 'init var' lhs[144192] call_tmp[666862])
    (144195 'end of statement' dom[144179] eltType[144171])
    (144205 call chpl__transferArray lhs[144192] rhs[144165](kind = initCopy[137995]))
    (481208 'end of statement' lhs[144192])
    unknown call_tmp[666869] "expr temp" "maybe param" "maybe type" "temp"
    (666872 'move' call_tmp[666869](144208 call _value _mt[243] lhs[144192]))
    (144215 call(144211 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666869]))
    (481210 'end of statement' lhs[144192])
    (519622 'move' ret[519617](519621 'deref' lhs[144192]))
    gotoReturn _end_chpl__coerceCopy[519615] _end_chpl__coerceCopy[519615]
    (481212 'end of statement' lhs[144192])
    label _end_chpl__coerceCopy[519615]
    (519619 return ret[519617])
  }
  function chpl__coerceMove[144228](arg dstType[144225]:_array[133600](?), in arg rhs[144230]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown ret[519628] "RVV" "temp"
    unknown eltType[144236] "dead at end of block" "insert auto destroy" "type variable"(144235 call chpl__eltTypeFromArrayRuntimeType dstType[144225])
    (543499 'move' eltType[144236](543497 call chpl__eltTypeFromArrayRuntimeType dstType[144225]))
    const dom[144244] "dead at end of block" "const" "ref var"
    unknown call_tmp[666876] "expr temp" "maybe param" "maybe type" "temp"
    (666879 'move' call_tmp[666876](144243 call chpl__domainFromArrayRuntimeType dstType[144225]))
    (543502 'move' dom[144244](543501 'addr of' call_tmp[666876]))
    (144247 'end of statement')
    unknown call_tmp[666883] "maybe param" "maybe type" "temp"
    (666886 'move' call_tmp[666883](144256 call(144249 call (partial) buildArray _mt[243] dom[144244]) eltType[144236](initElts = 0)))
    unknown lhs[144257] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543504 'init var' lhs[144257] call_tmp[666883])
    (144260 'end of statement' dom[144244] eltType[144236])
    (144270 call chpl__transferArray lhs[144257] rhs[144230](kind = initCopy[137995]))
    (481216 'end of statement' lhs[144257])
    unknown call_tmp[666890] "expr temp" "maybe param" "maybe type" "temp"
    (666893 'move' call_tmp[666890](144273 call _value _mt[243] lhs[144257]))
    (144280 call(144276 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[666890]))
    (481218 'end of statement' lhs[144257])
    (519633 'move' ret[519628](519632 'deref' lhs[144257]))
    gotoReturn _end_chpl__coerceMove[519626] _end_chpl__coerceMove[519626]
    (481220 'end of statement' lhs[144257])
    label _end_chpl__coerceMove[519626]
    (519630 return ret[519628])
  }
  function chpl__unref[144295](arg x[144292]:_array[133600](?)) : _unknown[51] "inline" "no copy return" "unref fn"
  {
    unknown ret[519639] "RVV" "temp"
    unknown ret[144305] "dead at end of block" "no auto destroy"
    (543506 'init var' ret[144305] x[144292])
    (144308 'end of statement')
    (519644 'move' ret[519639](519643 'deref' ret[144305]))
    gotoReturn _end_chpl__unref[519637] _end_chpl__unref[519637]
    (481222 'end of statement' ret[144305])
    label _end_chpl__unref[519637]
    (519641 return ret[519639])
  }
  where {
    unknown call_tmp[666899] "expr temp" "maybe param" "maybe type" "temp"
    (666902 'move' call_tmp[666899](144299 call _value _mt[243] x[144292]))
    (144303 call chpl__isArrayView call_tmp[666899])
  }
  function chpl__unref[144322](arg ir[144319]:_iteratorRecord[205](?)) : _unknown[51] "no copy return" "unref fn"
  {
    unknown ret[519650] "RVV" "temp"
    unknown call_tmp[666904] "maybe param" "maybe type" "temp"
    (666907 'move' call_tmp[666904](144327 call chpl__initCopy ir[144319]))
    unknown toArray[144328] "dead at end of block" "no auto destroy" "no copy"
    (543508 'init var' toArray[144328] call_tmp[666904])
    (144331 'end of statement')
    (519655 'move' ret[519650](519654 'deref' toArray[144328]))
    gotoReturn _end_chpl__unref[519648] _end_chpl__unref[519648]
    (481224 'end of statement' toArray[144328])
    label _end_chpl__unref[519648]
    (519652 return ret[519650])
  }
  function chpl__unref[144346](arg x[144343]:_array[133600](?)) : _unknown[51] "inline" "no copy return"
  {
    unknown ret[519661] "RVV" "temp"
    unknown ret[144349] "dead at end of block" "insert auto destroy" "no copy"
    (543510 'init var' ret[144349] x[144343])
    (144352 'end of statement')
    (519666 'move' ret[519661](519665 'deref' ret[144349]))
    gotoReturn _end_chpl__unref[519659] _end_chpl__unref[519659]
    (481226 'end of statement' ret[144349])
    label _end_chpl__unref[519659]
    (519663 return ret[519661])
  }
  function chpl__unalias[144367](arg x[144364]:_array[133600](?)) : _unknown[51] "inline" "unalias fn"
  {
    unknown ret[519672] "RVV" "temp"
    unknown tmp[427063] "maybe param" "temp"
    unknown tmp[427084] "maybe param" "temp"
    unknown call_tmp[666911] "expr temp" "maybe param" "maybe type" "temp"
    (666914 'move' call_tmp[666911](144370 call _value _mt[243] x[144364]))
    (427095 'move' tmp[427084](144377 call(144373 call (partial) isSliceArrayView _mt[243] call_tmp[666911])))
    unknown call_tmp[666918] "expr temp" "maybe param" "maybe type" "temp"
    (666921 'move' call_tmp[666918](427097 call _cond_invalid tmp[427084]))
    if call_tmp[666918]
    {
      (427100 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568391] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568392] "maybe param" "temp"
    unknown call_tmp[666923] "expr temp" "maybe param" "maybe type" "temp"
    (666926 'move' call_tmp[666923](427085 call isTrue tmp[427084]))
    (568397 'move' tmp[568392](568395 call _cond_test call_tmp[666923]))
    if tmp[568392]
    {
      (568402 'move' tmp[568391](568399 '_paramFoldLogical' tmp[568392] 1))
    }
    {
      unknown tmp[568404] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666930] "expr temp" "maybe param" "maybe type" "temp"
      (666933 'move' call_tmp[666930](144379 call _value _mt[243] x[144364]))
      unknown call_tmp[666937] "expr temp" "maybe param" "maybe type" "temp"
      (666940 'move' call_tmp[666937](144386 call(144382 call (partial) isRankChangeArrayView _mt[243] call_tmp[666930])))
      (568406 'move' tmp[568404](427089 call isTrue call_tmp[666937]))
      (568411 'move' tmp[568391](568408 '_paramFoldLogical' tmp[568392] tmp[568404]))
    }
    (427074 'move' tmp[427063] tmp[568391])
    unknown call_tmp[666942] "expr temp" "maybe param" "maybe type" "temp"
    (666945 'move' call_tmp[666942](427076 call _cond_invalid tmp[427063]))
    if call_tmp[666942]
    {
      (427079 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown isview[144400] "dead at end of block" "param"
    unknown tmp[568418] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568419] "maybe param" "temp"
    unknown call_tmp[666947] "expr temp" "maybe param" "maybe type" "temp"
    (666950 'move' call_tmp[666947](427064 call isTrue tmp[427063]))
    (568424 'move' tmp[568419](568422 call _cond_test call_tmp[666947]))
    if tmp[568419]
    {
      (568429 'move' tmp[568418](568426 '_paramFoldLogical' tmp[568419] 1))
    }
    {
      unknown tmp[568431] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[666954] "expr temp" "maybe param" "maybe type" "temp"
      (666957 'move' call_tmp[666954](144390 call _value _mt[243] x[144364]))
      unknown call_tmp[666961] "expr temp" "maybe param" "maybe type" "temp"
      (666964 'move' call_tmp[666961](144397 call(144393 call (partial) isReindexArrayView _mt[243] call_tmp[666954])))
      (568433 'move' tmp[568431](427068 call isTrue call_tmp[666961]))
      (568438 'move' tmp[568418](568435 '_paramFoldLogical' tmp[568419] tmp[568431]))
    }
    (543512 'init var' isview[144400] tmp[568418])
    (144403 'end of statement')
    unknown call_tmp[666966] "expr temp" "maybe param" "maybe type" "temp"
    (666969 'move' call_tmp[666966](144429 call _cond_test isview[144400]))
    if call_tmp[666966]
    {
      unknown ret[144407] "dead at end of block" "no auto destroy"
      (543514 'init var' ret[144407] x[144364])
      (144410 'end of statement')
      (144415 call chpl__autoDestroy x[144364])
      (481230 'end of statement')
      (519677 'move' ret[519672](519676 'deref' ret[144407]))
      gotoReturn _end_chpl__unalias[519670] _end_chpl__unalias[519670]
      (481231 'end of statement' ret[144407])
    }
    {
      unknown ret[144421] "dead at end of block" "insert auto destroy" "no copy"
      (543516 'init var' ret[144421] x[144364])
      (144424 'end of statement')
      (519682 'move' ret[519672](519681 'deref' ret[144421]))
      gotoReturn _end_chpl__unalias[519670] _end_chpl__unalias[519670]
      (481233 'end of statement' ret[144421])
    }
    label _end_chpl__unalias[519670]
    (519674 return ret[519672])
  }
  function chpl__initCopy[144441](arg ir[144438]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519688] "RVV" "temp"
    unknown call_tmp[666973] "expr temp" "maybe param" "maybe type" "temp"
    (666976 'move' call_tmp[666973](144450 call _shape_ _mt[243] ir[144438]))
    unknown call_tmp[666978] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (666981 'move' call_tmp[666978](747930 'new' _domain[125914](?) call_tmp[666973]))
    unknown shape[144455] "dead at end of block"
    (543518 'init var' shape[144455] call_tmp[666978])
    (144458 'end of statement')
    unknown call_tmp[666985] "expr temp" "maybe param" "maybe type" "temp"
    (666988 'move' call_tmp[666985](144461 call _unowned _mt[243] shape[144455]))
    (144465 call = call_tmp[666985] 1)
    (481235 'end of statement' shape[144455])
    unknown call_tmp[666990] "expr temp" "maybe param" "maybe type" "temp"
    (666993 'move' call_tmp[666990](144472 call chpl__initCopy_shapeHelp shape[144455] ir[144438]))
    (519693 'move' ret[519688](519692 'deref' call_tmp[666990]))
    gotoReturn _end_chpl__initCopy[519686] _end_chpl__initCopy[519686]
    (481237 'end of statement' shape[144455])
    label _end_chpl__initCopy[519686]
    (519690 return ret[519688])
  }
  where {
    (144446 call chpl_iteratorHasDomainShape ir[144438])
  }
  function chpl__initCopy[144484](arg ir[144481]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519699] "RVV" "temp"
    unknown call_tmp[666997] "expr temp" "maybe param" "maybe type" "temp"
    (667000 'move' call_tmp[666997](144499 call _shape_ _mt[243] ir[144481]))
    unknown call_tmp[667002] "maybe param" "maybe type" "temp"
    (667005 'move' call_tmp[667002](144503 call chpl__buildDomainExpr call_tmp[666997]))
    unknown shape[144505] "dead at end of block" "insert auto destroy"
    (543520 'init var' shape[144505] call_tmp[667002])
    (144508 'end of statement')
    unknown call_tmp[667007] "expr temp" "maybe param" "maybe type" "temp"
    (667010 'move' call_tmp[667007](144514 call chpl__initCopy_shapeHelp shape[144505] ir[144481]))
    (519704 'move' ret[519699](519703 'deref' call_tmp[667007]))
    gotoReturn _end_chpl__initCopy[519697] _end_chpl__initCopy[519697]
    (481239 'end of statement' shape[144505])
    label _end_chpl__initCopy[519697]
    (519701 return ret[519699])
  }
  where {
    unknown tmp[427105] "maybe param" "temp"
    (427116 'move' tmp[427105](144489 call chpl_iteratorHasRangeShape ir[144481]))
    unknown call_tmp[667012] "expr temp" "maybe param" "maybe type" "temp"
    (667015 'move' call_tmp[667012](427118 call _cond_invalid tmp[427105]))
    if call_tmp[667012]
    {
      (427121 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568445] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568446] "maybe param" "temp"
    unknown call_tmp[667017] "expr temp" "maybe param" "maybe type" "temp"
    (667020 'move' call_tmp[667017](427106 call isTrue tmp[427105]))
    (568451 'move' tmp[568446](568449 call _cond_test call_tmp[667017]))
    if tmp[568446]
    {
      unknown tmp[568453] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[667022] "expr temp" "maybe param" "maybe type" "temp"
      (667025 'move' call_tmp[667022](144493 call chpl_iteratorFromForExpr ir[144481]))
      unknown call_tmp[667027] "expr temp" "maybe param" "maybe type" "temp"
      (667030 'move' call_tmp[667027](144494 call ! call_tmp[667022]))
      (568455 'move' tmp[568453](427109 call isTrue call_tmp[667027]))
      (568460 'move' tmp[568445](568457 '_paramFoldLogical' tmp[568446] tmp[568453]))
    }
    {
      (568465 'move' tmp[568445](568462 '_paramFoldLogical' tmp[568446] 0))
    }
    (748369 call chpl_statementLevelSymbol tmp[568445])
  }
  function chpl__initCopy_shapeHelp[144526](arg shape[144523]:_domain[125914](?), arg ir[144529]:_iteratorRecord[205](?)) : _unknown[51] "ignore transfer errors"
  {
    unknown ret[519710] "RVV" "temp"
    unknown call_tmp[667034] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667037 'move' call_tmp[667034](144538 'typeof' ir[144529]))
    unknown call_tmp[667039] "expr temp" "maybe param" "maybe type" "temp"
    (667042 'move' call_tmp[667039](144540 call iteratorToArrayElementType call_tmp[667034]))
    unknown call_tmp[667044] "maybe param" "maybe type" "temp"
    (667047 'move' call_tmp[667044](144544 call(144533 call (partial) buildArray _mt[243] shape[144523]) call_tmp[667039](initElts = 0)))
    unknown result[144545] "dead at end of block" "insert auto destroy" "no copy" "unsafe"
    (543522 'init var' result[144545] call_tmp[667044])
    (144548 'end of statement')
    unknown call_tmp[667051] "expr temp" "maybe param" "maybe type" "temp"
    (667054 'move' call_tmp[667051](144552 call eltType _mt[243] result[144545]))
    unknown call_tmp[667056] "expr temp" "maybe param" "maybe type" "temp"
    (667059 'move' call_tmp[667056](144556 call isArray call_tmp[667051]))
    unknown call_tmp[667061] "expr temp" "maybe param" "maybe type" "temp"
    (667064 'move' call_tmp[667061](144580 call _cond_test call_tmp[667056]))
    if call_tmp[667061]
    {
      (144578 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    unknown call_tmp[667066] "expr temp" "maybe param" "maybe type" "temp"
    (667069 'move' call_tmp[667066](144588 call chpl_iteratorFromForExpr ir[144529]))
    unknown call_tmp[667071] "expr temp" "maybe param" "maybe type" "temp"
    (667074 'move' call_tmp[667071](144843 call _cond_test call_tmp[667066]))
    if call_tmp[667071]
    {
      unknown call_tmp[667078] "expr temp" "maybe param" "maybe type" "temp"
      (667081 'move' call_tmp[667078](144591 call eltType _mt[243] result[144545]))
      unknown call_tmp[667083] "expr temp" "maybe param" "maybe type" "temp"
      (667086 'move' call_tmp[667083](144595 call needsInitWorkaround call_tmp[667078]))
      unknown call_tmp[667088] "expr temp" "maybe param" "maybe type" "temp"
      (667091 'move' call_tmp[667088](144759 call _cond_test call_tmp[667083]))
      if call_tmp[667088]
      {
        {
          unknown _indexOfInterest[144628] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144629] "expr temp" "temp"
          unknown call_tmp[667095] "expr temp" "maybe param" "maybe type" "temp"
          (667098 'move' call_tmp[667095](144638 call _dom _mt[243] result[144545]))
          unknown call_tmp[667100] "expr temp" "maybe param" "maybe type" "temp"
          (667103 'move' call_tmp[667100](144641 call _getIterator call_tmp[667095]))
          unknown call_tmp[667105] "expr temp" "maybe param" "maybe type" "temp"
          (667108 'move' call_tmp[667105](144645 call _getIterator ir[144529]))
          (144647 'move' _iterator[144629](144607 call _build_tuple call_tmp[667100] call_tmp[667105]))
          Defer
          {
            {
              (144677 call _freeIterator _iterator[144629])
            }
          }
          { scopeless type
            (144652 'move' _indexOfInterest[144628](144649 call iteratorIndex _iterator[144629]))
          }
          ForLoop[144630]
          {
            (144657 call _check_tuple_var_decl _indexOfInterest[144628] 2)
            (481243 'end of statement')
            unknown ri[144663] "index var" "insert auto destroy"
            (481244 'end of statement')
            (144665 'move' ri[144663](144661 call _indexOfInterest[144628] 0))
            (481245 'end of statement' ri[144663])
            unknown src[144670] "index var" "insert auto destroy"
            (481247 'end of statement')
            (144672 'move' src[144670](144668 call _indexOfInterest[144628] 1))
            (481248 'end of statement' src[144670])
            {
              unknown r[144612] "dead at end of block" "ref var"
              unknown call_tmp[667110] "expr temp" "maybe param" "maybe type" "temp"
              (667113 'move' call_tmp[667110](144611 call result[144545] ri[144663]))
              (543525 'move' r[144612](543524 'addr of' call_tmp[667110]))
              (144615 'end of statement')
              unknown copy[144618] "dead at end of block" "no auto destroy"
              (543527 'init var' copy[144618] src[144670])
              (144621 'end of statement' result[144545] ri[144663] src[144670])
              (144626 '=' r[144612] copy[144618])
              (481253 'end of statement' r[144612] copy[144618])
            }
            label _continueLabel[144633]
            _indexOfInterest[144628]
            _iterator[144629]
          }
          label _breakLabel[144634]
        }
      }
      {
        {
          unknown _indexOfInterest[144706] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144707] "expr temp" "temp"
          unknown call_tmp[667115] "expr temp" "maybe param" "maybe type" "temp"
          (667118 'move' call_tmp[667115](144716 call _getIterator result[144545]))
          unknown call_tmp[667120] "expr temp" "maybe param" "maybe type" "temp"
          (667123 'move' call_tmp[667120](144719 call _getIterator ir[144529]))
          (144721 'move' _iterator[144707](144693 call _build_tuple call_tmp[667115] call_tmp[667120]))
          Defer
          {
            {
              (144751 call _freeIterator _iterator[144707])
            }
          }
          { scopeless type
            (144726 'move' _indexOfInterest[144706](144723 call iteratorIndex _iterator[144707]))
          }
          ForLoop[144708]
          {
            (144731 call _check_tuple_var_decl _indexOfInterest[144706] 2)
            (481257 'end of statement')
            unknown r[144737] "index var" "insert auto destroy"
            (481258 'end of statement')
            (144739 'move' r[144737](144735 call _indexOfInterest[144706] 0))
            (481259 'end of statement' r[144737])
            unknown src[144744] "index var" "insert auto destroy"
            (481261 'end of statement')
            (144746 'move' src[144744](144742 call _indexOfInterest[144706] 1))
            (481262 'end of statement' src[144744])
            {
              unknown copy[144695] "dead at end of block" "no auto destroy"
              (543529 'init var' copy[144695] src[144744])
              (144698 'end of statement' src[144744])
              (144704 '=' r[144737] copy[144695])
              (481265 'end of statement' r[144737] copy[144695])
            }
            label _continueLabel[144711]
            _indexOfInterest[144706]
            _iterator[144707]
          }
          label _breakLabel[144712]
        }
      }
    }
    {
      unknown call_tmp[667127] "expr temp" "maybe param" "maybe type" "temp"
      (667130 'move' call_tmp[667127](144766 call eltType _mt[243] result[144545]))
      unknown call_tmp[667132] "expr temp" "maybe param" "maybe type" "temp"
      (667135 'move' call_tmp[667132](144770 call needsInitWorkaround call_tmp[667127]))
      unknown call_tmp[667137] "expr temp" "maybe param" "maybe type" "temp"
      (667140 'move' call_tmp[667137](144838 call _cond_test call_tmp[667132]))
      if call_tmp[667137]
      {
        unknown call_tmp[667144] "expr temp" "maybe param" "maybe type" "temp"
        (667147 'move' call_tmp[667144](415933 call _dom _mt[243] result[144545]))
        unknown call_tmp[667149] "maybe param" "maybe type" "temp"
        (667152 'move' call_tmp[667149](415929 call chpl__staticAutoLocalCheck result[144545] call_tmp[667144]))
        unknown chpl__staticAutoLocalCheckSym[415928] "dead at end of block" "param"
        (543531 'init var' chpl__staticAutoLocalCheckSym[415928] call_tmp[667149])
        (481268 'end of statement' result[144545] result[144545])
        if chpl__staticAutoLocalCheckSym[415928]
        {
          unknown call_tmp[667156] "expr temp" "maybe param" "maybe type" "temp"
          (667159 'move' call_tmp[667156](144777 call _dom _mt[243] result[144545]))
          Forall {
            induction variables:
              
              unknown ri[144804] "index var" "insert auto destroy"
              
              unknown src[144806] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667156]
              ir[144529]
            shadow variables:
            other variables
              forall body
            {
              unknown r[144787] "dead at end of block" "ref var"
              unknown call_tmp[667161] "expr temp" "maybe param" "maybe type" "temp"
              (667164 'move' call_tmp[667161](415939 'may be local access' result[144545] ri[144804] chpl__staticAutoLocalCheckSym[415928] 1))
              (543534 'move' r[144787](543533 'addr of' call_tmp[667161]))
              (144790 'end of statement')
              unknown copy[144793] "dead at end of block" "no auto destroy"
              (543536 'init var' copy[144793] src[144806])
              (144796 'end of statement' result[144545] ri[144804] src[144806])
              (144801 '=' r[144787] copy[144793])
              (481274 'end of statement' r[144787] copy[144793])
            }
          }
        }
        {
          unknown call_tmp[667168] "expr temp" "maybe param" "maybe type" "temp"
          (667171 'move' call_tmp[667168](415924 call _dom _mt[243] result[144545]))
          Forall {
            induction variables:
              
              unknown ri[415919] "index var" "insert auto destroy"
              
              unknown src[415921] "index var" "insert auto destroy"
            iterated expressions:
              call_tmp[667168]
              ir[144529]
            shadow variables:
            other variables
              forall body
            {
              unknown r[415905] "dead at end of block" "ref var"
              unknown call_tmp[667173] "expr temp" "maybe param" "maybe type" "temp"
              (667176 'move' call_tmp[667173](415907 call result[144545] ri[415919]))
              (543539 'move' r[415905](543538 'addr of' call_tmp[667173]))
              (415910 'end of statement')
              unknown copy[415911] "dead at end of block" "no auto destroy"
              (543541 'init var' copy[415911] src[415921])
              (415914 'end of statement' result[144545] ri[415919] src[415921])
              (415915 '=' r[415905] copy[415911])
              (481280 'end of statement' r[415905] copy[415911])
            }
          }
        }
      }
      {
        Forall {
          induction variables:
            
            unknown r[144832] "index var" "insert auto destroy"
            
            unknown src[144834] "index var" "insert auto destroy"
          iterated expressions:
            result[144545]
            ir[144529]
          shadow variables:
          other variables
            forall body
          {
            unknown copy[144820] "dead at end of block" "no auto destroy"
            (543543 'init var' copy[144820] src[144834])
            (144823 'end of statement' src[144834])
            (144829 '=' r[144832] copy[144820])
            (481284 'end of statement' r[144832] copy[144820])
          }
        }
      }
    }
    unknown call_tmp[667180] "expr temp" "maybe param" "maybe type" "temp"
    (667183 'move' call_tmp[667180](144848 call _value _mt[243] result[144545]))
    (144855 call(144851 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[667180]))
    (481287 'end of statement' result[144545])
    (519715 'move' ret[519710](519714 'deref' result[144545]))
    gotoReturn _end_chpl__initCopy_shapeHelp[519708] _end_chpl__initCopy_shapeHelp[519708]
    (481289 'end of statement' result[144545])
    label _end_chpl__initCopy_shapeHelp[519708]
    (519712 return ret[519710])
  }
  function chpl__throwErrorUnchecked[144870](in arg e[144867] :
  (144865 call _owned[30](?) Error[167942])) : _unknown[51] throws "unchecked throws" "no return value for void"
  {
    unknown call_tmp[667187] "expr temp" "maybe param" "maybe type" "temp"
    (667190 'move' call_tmp[667187](468097 call chpl_fix_thrown_error e[144867]))
    (144873 'throw' call_tmp[667187])
    (519719 return _void[55])
  }
  function chpl__initCopy[144884](arg ir[144881]:_iteratorRecord[205](?)) : _unknown[51] "init copy fn"
  {
    unknown ret[519723] "RVV" "temp"
    unknown call_tmp[667192] "maybe param" "maybe type" "temp"
    (667195 'move' call_tmp[667192](144889 call chpl_iteratorHasRangeShape ir[144881]))
    unknown shapeful[144890] "dead at end of block" "param"
    (543545 'init var' shapeful[144890] call_tmp[667192])
    (144893 'end of statement')
    unknown r[144907] "dead at end of block"
    unknown tmp[568472] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568473] "maybe param" "temp"
    (568478 'move' tmp[568473](568476 call _cond_test shapeful[144890]))
    if tmp[568473]
    {
      unknown tmp[568480] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568482 'move' tmp[568480](144897 call _shape_ _mt[243] ir[144881]))
      (568487 'move' tmp[568472](568484 '_paramFoldLogical' tmp[568473] tmp[568480]))
    }
    {
      unknown tmp[568489] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568491 'move' tmp[568489](144902 call chpl_build_bounded_range 1 0))
      (568496 'move' tmp[568472](568493 '_paramFoldLogical' tmp[568473] tmp[568489]))
    }
    (543547 'init var' r[144907] tmp[568472])
    (144910 'end of statement')
    unknown i[144912] "dead at end of block"
    (543549 'init var' i[144912] 0)
    (144915 'end of statement')
    unknown call_tmp[667201] "expr temp" "maybe param" "maybe type" "temp"
    (667204 'move' call_tmp[667201](144917 call size _mt[243] r[144907]))
    unknown call_tmp[667206] "maybe param" "maybe type" "temp"
    (667209 'move' call_tmp[667206](144921 call _cast size_t[20654] call_tmp[667201]))
    unknown size[144923] "dead at end of block"
    (543551 'init var' size[144923] call_tmp[667206])
    (144926 'end of statement')
    unknown call_tmp[667211] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667214 'move' call_tmp[667211](144929 'typeof' ir[144881]))
    unknown elemType[144932] "dead at end of block" "type variable"(144931 call iteratorToArrayElementType call_tmp[667211])
    unknown call_tmp[667216] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (667219 'move' call_tmp[667216](543555 'typeof' ir[144881]))
    (543557 'move' elemType[144932](543554 call iteratorToArrayElementType call_tmp[667216]))
    unknown call_tmp[667221] "maybe param" "maybe type" "temp"
    (667224 'move' call_tmp[667221](144938 call _ddata[11695](?) elemType[144932]))
    unknown data[144940] "dead at end of block"
    (543559 'init var' data[144940] nil[44] call_tmp[667221])
    (144943 'end of statement')
    unknown callPostAlloc[144945] "dead at end of block"
    (543561 'default init var' callPostAlloc[144945] bool[10])
    (144948 'end of statement')
    unknown subloc[144950] "dead at end of block"
    (543563 'init var' subloc[144950] c_sublocid_none[89874])
    (144953 'end of statement')
    unknown call_tmp[667226] "expr temp" "maybe param" "maybe type" "temp"
    (667229 'move' call_tmp[667226](144956 call > size[144923] 0))
    unknown call_tmp[667231] "expr temp" "maybe param" "maybe type" "temp"
    (667234 'move' call_tmp[667231](144969 call _cond_test call_tmp[667226]))
    if call_tmp[667231]
    {
      unknown call_tmp[667236] "expr temp" "maybe param" "maybe type" "temp"
      (667239 'move' call_tmp[667236](144964 call _ddata_allocate_noinit elemType[144932] size[144923] callPostAlloc[144945]))
      (144965 call = data[144940] call_tmp[667236])
      (481294 'end of statement' data[144940] elemType[144932] size[144923] callPostAlloc[144945])
    }
    Try
    {
      {
        {
          unknown _indexOfInterest[145117] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145118] "expr temp" "temp"
          (145127 'move' _iterator[145118](145125 call _getIterator ir[144881]))
          Defer
          {
            {
              (145143 call _freeIterator _iterator[145118])
            }
          }
          { scopeless type
            (145132 'move' _indexOfInterest[145117](145129 call iteratorIndex _iterator[145118]))
          }
          ForLoop[145119]
          {
            unknown elt[145136] "index var" "insert auto destroy"
            (481300 'end of statement')
            (145138 'move' elt[145136] _indexOfInterest[145117])
            (481301 'end of statement' elt[145136])
            {
              unknown call_tmp[667241] "maybe param" "maybe type" "temp"
              (667244 'move' call_tmp[667241](144978 call chpl__initCopy elt[145136]))
              unknown eltCopy[144980] "dead at end of block" "no auto destroy" "no copy"
              (543565 'init var' eltCopy[144980] call_tmp[667241])
              (144983 'end of statement' elt[145136])
              unknown call_tmp[667246] "expr temp" "maybe param" "maybe type" "temp"
              (667249 'move' call_tmp[667246](144987 call >= i[144912] size[144923]))
              unknown call_tmp[667251] "expr temp" "maybe param" "maybe type" "temp"
              (667254 'move' call_tmp[667251](145099 call _cond_test call_tmp[667246]))
              if call_tmp[667251]
              {
                unknown oldSize[144990] "dead at end of block"
                (543567 'init var' oldSize[144990] size[144923])
                (144993 'end of statement')
                unknown oldData[144996] "dead at end of block"
                (543569 'init var' oldData[144996] data[144940])
                (144999 'end of statement' size[144923] data[144940])
                unknown call_tmp[667256] "expr temp" "maybe param" "maybe type" "temp"
                (667259 'move' call_tmp[667256](145002 call == size[144923] 0))
                unknown call_tmp[667261] "expr temp" "maybe param" "maybe type" "temp"
                (667264 'move' call_tmp[667261](145017 call _cond_test call_tmp[667256]))
                if call_tmp[667261]
                {
                  (145006 call = size[144923] 4)
                  (481306 'end of statement' size[144923])
                }
                {
                  unknown call_tmp[667266] "expr temp" "maybe param" "maybe type" "temp"
                  (667269 'move' call_tmp[667266](145012 call * 2 size[144923]))
                  (145014 call = size[144923] call_tmp[667266])
                  (481308 'end of statement' size[144923] size[144923])
                }
                unknown call_tmp[667271] "expr temp" "maybe param" "maybe type" "temp"
                (667274 'move' call_tmp[667271](145029 call _ddata_allocate_noinit elemType[144932] size[144923] callPostAlloc[144945]))
                (145030 call = data[144940] call_tmp[667271])
                (481311 'end of statement' data[144940] elemType[144932] size[144923] callPostAlloc[144945])
                {
                  unknown _indexOfInterest[145053] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[145054] "expr temp" "temp"
                  unknown call_tmp[667276] "expr temp" "maybe param" "maybe type" "temp"
                  (667279 'move' call_tmp[667276](145070 call chpl_direct_counted_range_iter 0 oldSize[144990]))
                  (145063 'move' _iterator[145054](145061 call _getIterator call_tmp[667276]))
                  Defer
                  {
                    {
                      (145086 call _freeIterator _iterator[145054])
                    }
                  }
                  { scopeless type
                    (145075 'move' _indexOfInterest[145053](145072 call iteratorIndex _iterator[145054]))
                  }
                  ForLoop[145055]
                  {
                    unknown i[145079] "index var" "insert auto destroy"
                    (481317 'end of statement')
                    (145081 'move' i[145079] _indexOfInterest[145053])
                    (481318 'end of statement' i[145079])
                    {
                      unknown call_tmp[667281] "expr temp" "maybe param" "maybe type" "temp"
                      (667284 'move' call_tmp[667281](145045 call data[144940] i[145079]))
                      unknown call_tmp[667286] "expr temp" "maybe param" "maybe type" "temp"
                      (667289 'move' call_tmp[667286](145049 call oldData[144996] i[145079]))
                      (145050 '=' call_tmp[667281] call_tmp[667286])
                      (481320 'end of statement' data[144940] i[145079] oldData[144996] i[145079])
                    }
                    label _continueLabel[145058]
                    _indexOfInterest[145053]
                    _iterator[145054]
                  }
                  label _breakLabel[145059]
                }
                (145097 call _ddata_free oldData[144996] oldSize[144990])
                (481325 'end of statement' oldData[144996] oldSize[144990])
              }
              unknown call_tmp[667291] "expr temp" "maybe param" "maybe type" "temp"
              (667294 'move' call_tmp[667291](145108 call data[144940] i[144912]))
              (145110 '=' call_tmp[667291] eltCopy[144980])
              (481328 'end of statement' data[144940] i[144912] eltCopy[144980])
              (145114 call += i[144912] 1)
              (481332 'end of statement' i[144912])
            }
            label _continueLabel[145122]
            _indexOfInterest[145117]
            _iterator[145118]
          }
          label _breakLabel[145123]
        }
      }
    }
    Catch e : Error
    {
      unknown call_tmp[667296] "maybe param" "maybe type" "temp"
      (667299 'move' call_tmp[667296](354378 'current error'))
      unknown tmp[354375] "dead at end of block" "temp"
      (543571 'init var' tmp[354375] call_tmp[667296])
      unknown call_tmp[667301] "expr temp" "maybe param" "maybe type" "temp"
      (667304 'move' call_tmp[667301](354382 'to non nilable class' tmp[354375]))
      unknown call_tmp[667306] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (667309 'move' call_tmp[667306](747931 'new' _owned[30](?) call_tmp[667301]))
      unknown e[354381] "dead at end of block"
      (543573 'init var' e[354381] call_tmp[667306])
      (481334 'end of statement')
      {
        {
          unknown _indexOfInterest[145172] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145173] "expr temp" "temp"
          unknown call_tmp[667311] "expr temp" "maybe param" "maybe type" "temp"
          (667314 'move' call_tmp[667311](145187 call - i[144912] 1))
          unknown call_tmp[667316] "expr temp" "maybe param" "maybe type" "temp"
          (667319 'move' call_tmp[667316](145190 call chpl_direct_range_iter 0 call_tmp[667311] 1))
          (145182 'move' _iterator[145173](145180 call _getIterator call_tmp[667316]))
          Defer
          {
            {
              (145206 call _freeIterator _iterator[145173])
            }
          }
          { scopeless type
            (145195 'move' _indexOfInterest[145172](145192 call iteratorIndex _iterator[145173]))
          }
          ForLoop[145174]
          {
            unknown j[145199] "index var" "insert auto destroy"
            (481336 'end of statement')
            (145201 'move' j[145199] _indexOfInterest[145172])
            (481337 'end of statement' j[145199])
            {
              unknown call_tmp[667321] "expr temp" "maybe param" "maybe type" "temp"
              (667324 'move' call_tmp[667321](145167 call data[144940] j[145199]))
              (145169 call chpl__autoDestroy call_tmp[667321])
              (481339 'end of statement' data[144940] j[145199])
            }
            label _continueLabel[145177]
            _indexOfInterest[145172]
            _iterator[145173]
          }
          label _breakLabel[145178]
        }
        (145218 call _ddata_free data[144940] size[144923])
        (481342 'end of statement' data[144940] size[144923])
        (145223 call chpl__throwErrorUnchecked e[354381])
        (481345 'end of statement' e[354381])
      }
    }
    unknown tmp[427126] "maybe param" "temp"
    (427137 'move' tmp[427126] shapeful[144890])
    unknown call_tmp[667326] "expr temp" "maybe param" "maybe type" "temp"
    (667329 'move' call_tmp[667326](427139 call _cond_invalid tmp[427126]))
    if call_tmp[667326]
    {
      (427142 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568503] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568504] "maybe param" "temp"
    unknown call_tmp[667331] "expr temp" "maybe param" "maybe type" "temp"
    (667334 'move' call_tmp[667331](427127 call isTrue tmp[427126]))
    (568509 'move' tmp[568504](568507 call _cond_test call_tmp[667331]))
    if tmp[568504]
    {
      unknown tmp[568511] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[667338] "expr temp" "maybe param" "maybe type" "temp"
      (667341 'move' call_tmp[667338](145231 call size _mt[243] r[144907]))
      unknown call_tmp[667343] "expr temp" "maybe param" "maybe type" "temp"
      (667346 'move' call_tmp[667343](145234 call < i[144912] call_tmp[667338]))
      (568513 'move' tmp[568511](427130 call isTrue call_tmp[667343]))
      (568518 'move' tmp[568503](568515 '_paramFoldLogical' tmp[568504] tmp[568511]))
    }
    {
      (568523 'move' tmp[568503](568520 '_paramFoldLogical' tmp[568504] 0))
    }
    unknown call_tmp[667348] "expr temp" "maybe param" "maybe type" "temp"
    (667351 'move' call_tmp[667348](145246 call _cond_test tmp[568503]))
    if call_tmp[667348]
    {
      unknown call_tmp[667353] "expr temp" "maybe param" "maybe type" "temp"
      (667356 'move' call_tmp[667353](145241 call # r[144907] i[144912]))
      (145243 call = r[144907] call_tmp[667353])
      (481348 'end of statement' r[144907] r[144907] i[144912])
    }
    unknown call_tmp[667358] "expr temp" "maybe param" "maybe type" "temp"
    (667361 'move' call_tmp[667358](145252 call ! shapeful[144890]))
    unknown call_tmp[667363] "expr temp" "maybe param" "maybe type" "temp"
    (667366 'move' call_tmp[667363](145275 call _cond_test call_tmp[667358]))
    if call_tmp[667363]
    {
      unknown tmp[568530] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568531] "maybe param" "temp"
      unknown call_tmp[667368] "expr temp" "maybe param" "maybe type" "temp"
      (667371 'move' call_tmp[667368](145257 call == i[144912] 0))
      (568536 'move' tmp[568531](568534 call _cond_test call_tmp[667368]))
      if tmp[568531]
      {
        unknown tmp[568538] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (568540 'move' tmp[568538](145261 call chpl_build_bounded_range 1 0))
        (568545 'move' tmp[568530](568542 '_paramFoldLogical' tmp[568531] tmp[568538]))
      }
      {
        unknown tmp[568547] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[667373] "expr temp" "maybe param" "maybe type" "temp"
        (667376 'move' call_tmp[667373](145264 call chpl_build_low_bounded_range capturedIteratorLowBound[115347]))
        (568549 'move' tmp[568547](145267 call # call_tmp[667373] i[144912]))
        (568554 'move' tmp[568530](568551 '_paramFoldLogical' tmp[568531] tmp[568547]))
      }
      (145272 call = r[144907] tmp[568530])
      (481352 'end of statement' r[144907] i[144912] i[144912])
    }
    unknown call_tmp[667378] "maybe param" "maybe type" "temp"
    (667381 'move' call_tmp[667378](145282 call chpl__buildDomainExpr r[144907]))
    unknown D[145284] "dead at end of block" "insert auto destroy"
    (543575 'init var' D[145284] call_tmp[667378])
    (145287 'end of statement' r[144907] elemType[144932] r[144907])
    unknown call_tmp[667383] "expr temp" "maybe param" "maybe type" "temp"
    (667386 'move' call_tmp[667383](145290 call != data[144940] nil[44]))
    unknown call_tmp[667388] "expr temp" "maybe param" "maybe type" "temp"
    (667391 'move' call_tmp[667388](145417 call _cond_test call_tmp[667383]))
    if call_tmp[667388]
    {
      unknown call_tmp[667393] "expr temp" "maybe param" "maybe type" "temp"
      (667396 'move' call_tmp[667393](145299 call _cond_test callPostAlloc[144945]))
      if call_tmp[667393]
      {
        (145297 call _ddata_allocate_postalloc data[144940] size[144923])
        (481357 'end of statement' data[144940] size[144923])
      }
      { scopeless type
        unknown call_type_tmp[492367] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667398] "expr temp" "maybe param" "maybe type" "temp"
        (667401 'move' call_tmp[667398](145314 call data[144940] 0))
        (492371 'move' call_type_tmp[492367](145315 'typeof' call_tmp[667398]))
      }
      unknown call_tmp[667405] "expr temp" "maybe param" "maybe type" "temp"
      (667408 'move' call_tmp[667405](145320 call _cast int(64)[13] size[144923]))
      unknown call_tmp[667410] "maybe param" "maybe type" "temp"
      (667413 'move' call_tmp[667410](145322 call(145308 call (partial) buildArrayWith _mt[243] D[145284]) call_type_tmp[492367] data[144940] call_tmp[667405]))
      unknown A[145323] "dead at end of block"
      (543577 'init var' A[145323] call_tmp[667410])
      (145326 'end of statement' D[145284] data[144940] data[144940] size[144923])
      { scopeless type
        unknown call_type_tmp[492373] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[667415] "expr temp" "maybe param" "maybe type" "temp"
        (667418 'move' call_tmp[667415](145336 call data[144940] 0))
        (492377 'move' call_type_tmp[492373](145337 'typeof' call_tmp[667415]))
      }
      unknown call_tmp[667422] "expr temp" "maybe param" "maybe type" "temp"
      (667425 'move' call_tmp[667422](145329 call _value _mt[243] A[145323]))
      (145338 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[667422] call_type_tmp[492373])
      (481364 'end of statement' A[145323] data[144940])
      unknown call_tmp[667429] "expr temp" "maybe param" "maybe type" "temp"
      (667432 'move' call_tmp[667429](145341 call _value _mt[243] A[145323]))
      unknown call_tmp[667436] "expr temp" "maybe param" "maybe type" "temp"
      (667439 'move' call_tmp[667436](145344 call _decEltRefCounts _mt[243] call_tmp[667429]))
      (145348 call = call_tmp[667436] 0)
      (481367 'end of statement' A[145323])
      (145370 'auto destroy runtime type' elemType[144932])
      (481369 'end of statement' elemType[144932])
      (519728 'move' ret[519723](519727 'deref' A[145323]))
      gotoReturn _end_chpl__initCopy[519721] _end_chpl__initCopy[519721]
      (481371 'end of statement' A[145323])
    }
    {
      unknown call_tmp[667441] "expr temp" "maybe param" "maybe type" "temp"
      (667444 'move' call_tmp[667441](145381 call _ddata_allocate_noinit elemType[144932] size[144923] callPostAlloc[144945]))
      (145382 call = data[144940] call_tmp[667441])
      (481373 'end of statement' data[144940] elemType[144932] size[144923] callPostAlloc[144945])
      unknown call_tmp[667446] "expr temp" "maybe param" "maybe type" "temp"
      (667449 'move' call_tmp[667446](145393 call _cond_test callPostAlloc[144945]))
      if call_tmp[667446]
      {
        (145391 call _ddata_allocate_postalloc data[144940] size[144923])
        (481378 'end of statement' data[144940] size[144923])
      }
      unknown call_tmp[667453] "expr temp" "maybe param" "maybe type" "temp"
      (667456 'move' call_tmp[667453](145407 call _cast int(64)[13] size[144923]))
      unknown call_tmp[667458] "maybe param" "maybe type" "temp"
      (667461 'move' call_tmp[667458](145409 call(145399 call (partial) buildArrayWith _mt[243] D[145284]) elemType[144932] data[144940] call_tmp[667453]))
      unknown A[145410] "dead at end of block"
      (543579 'init var' A[145410] call_tmp[667458])
      (145413 'end of statement' D[145284] elemType[144932] data[144940] size[144923])
      (519733 'move' ret[519723](519732 'deref' A[145410]))
      gotoReturn _end_chpl__initCopy[519721] _end_chpl__initCopy[519721]
      (481385 'end of statement' A[145410])
    }
    label _end_chpl__initCopy[519721]
    (519725 return ret[519723])
  }
  (355159 'used modules list'(113686 'use' ChapelBase[307])(113690 'use' ChapelTuple[56185])(113693 'use' ChapelLocale[89848])(113696 'use' ArrayViewSlice[189698])(113699 'use' ArrayViewRankChange[191453])(113702 'use' ArrayViewReindex[196040])(113705 'import' Reflection[224799])(113708 'use' ChapelDebugPrint[188121])(113711 'use' SysCTypes[20940]))
}