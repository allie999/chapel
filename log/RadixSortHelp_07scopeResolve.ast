AST dump for RadixSortHelp after pass scopeResolve.
Module use list: ChapelStandard Sort Reflection 

{
  unknown RADIX_BITS[275998] "param" 8
  (276001 'end of statement')
  unknown classifyUnrollFactor[276003] "param" 7
  (276006 'end of statement')
  function binForRecordKeyPart[276011](arg a[276009]:_any[178](?), arg criterion[276013]:_any[178](?), arg startbit[276016] :
  int(64)[13]) : _unknown[51] "inline"
  {
    const testRet[276028] "const"(276027 'typeof'(276026 call(276020 call . criterion[276013] c"keyPart") a[276009] 1))
    (276031 'end of statement')
    const testPart[276037] "const"(276036 call testRet[276028] 1)
    (276040 'end of statement')
    unknown bitsPerPart[276046] "param"(276045 call numBits(276043 'typeof' testPart[276037]))
    (276049 'end of statement')
    unknown bitsPerPartModRadixBits[276054] "param"(276052 call % bitsPerPart[276046] RADIX_BITS[275998])
    (276057 'end of statement')
    if(276083 call _cond_test(276060 call != bitsPerPartModRadixBits[276054] 0))
    {
      (276081 call compilerError "part size must be a multiple of radix bits")
    }
    const whichpart[276092] "const"(276090 call / startbit[276016] bitsPerPart[276046])
    (276095 'end of statement')
    const bitsinpart[276100] "const"(276098 call % startbit[276016] bitsPerPart[276046])
    (276103 'end of statement')
    const tmp[276117] "const" "temp"(276116 call(276110 call . criterion[276013] c"keyPart") a[276009] whichpart[276092])
    (276124 call _check_tuple_var_decl tmp[276117] 2)
    const section[276104] "const"(276118 call tmp[276117] 0)
    const part[276106] "const"(276121 call tmp[276117] 1)
    (276129 'end of statement')
    unknown ubits[276137](276135 call _cast(276134 call uint(64)[115] bitsPerPart[276046]) part[276106])
    (276140 'end of statement')
    if(276167 call _cond_test(276144 call isInt part[276106]))
    {
      const one[276148] "const" 1(276146 'typeof' ubits[276137])
      (276151 'end of statement')
      (276164 call = ubits[276137](276162 call ^ ubits[276137](276160 call << one[276148](276158 call - bitsPerPart[276046] 1))))
    }
    unknown mask[276179] "param"(276177 call -(276174 call << 1 RADIX_BITS[275998]) 1) uint(64)[115]
    (276182 'end of statement')
    const ubin[276196] "const"(276194 call &(276191 call >> ubits[276137](276189 call -(276186 call - bitsPerPart[276046] bitsinpart[276100]) RADIX_BITS[275998])) mask[276179])
    (276199 'end of statement')
    if(276247 call _cond_test(276202 call == section[276104] 0))
    {
      (276215 return(276213 call _build_tuple(276209 call +(276206 call _cast int(64)[13] ubin[276196]) 1) ubits[276137]))
    }
    {
      if(276241 call _cond_test(276219 call < section[276104] 0))
      {
        (276226 return(276224 call _build_tuple 0 ubits[276137]))
      }
      {
        (276239 return(276237 call _build_tuple(276233 call +(276230 call << 1 RADIX_BITS[275998]) 1) ubits[276137]))
      }
    }
  }
  function binForRecord[276259](arg a[276257]:_any[178](?), arg criterion[276261]:_any[178](?), arg startbit[276264] :
  int(64)[13]) : _unknown[51] "inline"
  {
    if(276357 call _cond_test(276273 call canResolveMethod criterion[276261] "keyPart" a[276257] 0))
    {
      (276280 return(276279 call binForRecordKeyPart a[276257] criterion[276261] startbit[276264]))
    }
    {
      if(276353 call _cond_test(276288 call canResolveMethod criterion[276261] "key" a[276257]))
      {
        (276301 return(276300 call binForRecordKeyPart(276296 call(276291 call . criterion[276261] c"key") a[276257]) defaultComparator[267889] startbit[276264]))
      }
      {
        (276350 call compilerError "Bad comparator for radix sort "(276326 call _cast string[26](276324 'typeof' criterion[276261])) " with eltType "(276348 call _cast string[26](276346 'typeof' a[276257])))
      }
    }
  }
  function fixedWidth[276369](arg eltTy[276367]:_any[178](?)) param : _unknown[51]
  {
    if(276399 call _cond_test(276391 call ||(276385 call ||(276379 call ||(276374 call isUintType eltTy[276367])(276378 call isIntType eltTy[276367]))(276384 call isRealType eltTy[276367]))(276390 call isImagType eltTy[276367])))
    {
      (276397 return(276396 call numBits eltTy[276367]))
    }
    if(276431 call _cond_test(276408 call isHomogeneousTuple eltTy[276367]))
    {
      unknown tmp[276410] eltTy[276367]
      (276413 'end of statement')
      (276429 return(276427 call *(276416 call . tmp[276410] c"size")(276426 call numBits(276424 'typeof'(276423 call tmp[276410] 0)))))
    }
    (276438 return(276436 call - 1))
  }
  function msbRadixSortParamLastStartBit[276450](arg Data[276447] :
  (276444 call chpl__buildArrayRuntimeType nil[44]), arg comparator[276452]:_any[178](?)) param : _unknown[51]
  {
    const element[276464] "const" "ref var"(276463 call Data[276447](276459 call .(276456 call . Data[276447] c"_dom") c"low"))
    (276467 'end of statement')
    if(276538 call _cond_test(276482 call &&(276472 call ==(276470 'typeof' comparator[276452]) DefaultComparator[290449])(276480 call >(276478 call fixedWidth(276476 'typeof' element[276464])) 0)))
    {
      (276492 return(276490 call -(276488 call fixedWidth(276486 'typeof' element[276464])) RADIX_BITS[275998]))
    }
    {
      if(276534 call _cond_test(276500 call canResolveMethod comparator[276452] "key" element[276464]))
      {
        unknown keyType[276509] "type variable"(276508 'typeof'(276507 call(276502 call . comparator[276452] c"key") element[276464]))
        if(276529 call _cond_test(276518 call >(276516 call fixedWidth keyType[276509]) 0))
        {
          (276527 return(276525 call -(276523 call fixedWidth keyType[276509]) RADIX_BITS[275998]))
        }
      }
    }
    (276546 return(276544 call - 1))
  }
  function radixSortClz[276554](arg val[276552]:_any[178](?)) : _unknown[51]
  {
    unknown nBits[276561] "param"(276560 call numBits(276558 'typeof' val[276552]))
    (276564 'end of statement')
    if(276574 call _cond_test(276568 call == val[276552] 0))
    {
      (276571 return nBits[276561])
    }
    unknown cur[276579] val[276552]
    (276582 'end of statement')
    unknown one[276588](276586 call _cast(276585 'typeof' val[276552]) 1)
    (276591 'end of statement')
    unknown hi[276599](276597 call << one[276588](276595 call - nBits[276561] 1))
    (276602 'end of statement')
    unknown n[276604] 0
    (276607 'end of statement')
    {
      unknown tmp[276626] "temp"
      (276656 'move' tmp[276626](276648 call _cond_test(276650 call ==(276652 call & cur[276579] hi[276599]) 0)))
      WhileDo[276631]
      {
        {
          (276617 call += n[276604] 1)
          (276623 call <<= cur[276579] 1)
        }
        label _continueLabel[276629]
        (276643 'move' tmp[276626](276635 call _cond_test(276637 call ==(276639 call & cur[276579] hi[276599]) 0)))
        tmp[276626]
      }
      label _breakLabel[276630]
    }
    (276660 return n[276604])
  }
  function findDataStartBit[276670](arg startbit[276667] :
  int(64)[13], arg min_ubits[276672]:_any[178](?), arg max_ubits[276674]:_any[178](?)) : _unknown[51]
  {
    unknown xor[276681](276679 call ^ min_ubits[276672] max_ubits[276674])
    (276684 'end of statement')
    unknown bitsPerPart[276691] "param"(276690 call numBits(276688 'typeof' min_ubits[276672]))
    (276694 'end of statement')
    const bitsinpart[276699] "const"(276697 call % startbit[276667] bitsPerPart[276691])
    (276702 'end of statement')
    (276705 call <<= xor[276681] bitsinpart[276699])
    (276710 call >>= xor[276681] bitsinpart[276699])
    unknown new_start[276717](276716 call radixSortClz xor[276681])
    (276720 'end of statement')
    unknown new_digit[276725](276723 call / new_start[276717] RADIX_BITS[275998])
    (276728 'end of statement')
    unknown new_start_bit_rounded[276733](276731 call * new_digit[276725] RADIX_BITS[275998])
    (276736 'end of statement')
    (276741 return(276739 call _cast int(64)[13] new_start_bit_rounded[276733]))
  }
  { scopeless type
    int(64)[13]
  }
  function checkSorted[276752](arg start_n[276749] :
  int(64)[13], arg end_n[276755] :
  int(64)[13], arg A[276761] :
  (276758 call chpl__buildArrayRuntimeType nil[44]), arg criterion[276764]:_any[178](?), arg startbit[276767] =
  0) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    {
      unknown _indexOfInterest[276936] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[276937] "expr temp" "temp"
      (276946 'move' _iterator[276937](276944 call _getIterator(276954 call chpl_direct_range_iter(276950 call + start_n[276749] 1) end_n[276755] 1)))
      Defer
      {
        {
          (276970 call _freeIterator _iterator[276937])
        }
      }
      { scopeless type
        (276959 'move' _indexOfInterest[276936](276956 call iteratorIndex _iterator[276937]))
      }
      ForLoop[276938]
      {
        unknown i[276963] "index var" "insert auto destroy"
        (276965 'move' i[276963] _indexOfInterest[276936])
        {
          unknown cmp[276793](276792 call chpl_compare(276785 call A[276761](276782 call - i[276963] 1))(276790 call A[276761] i[276963]) criterion[276764])
          (276796 'end of statement')
          if(276932 call _cond_test(276800 call > cmp[276793] 0))
          {
            (276903 call writeln "Error: not sorted properly at i=" i[276963] " A[i-1]="(276845 call A[276761](276842 call - i[276963] 1)) " A[i]="(276866 call A[276761] i[276963]) " in start=" start_n[276749] " end=" end_n[276755])
            (276909 call writeln A[276761])
            (276930 call halt "failed checkSorted")
          }
        }
        label _continueLabel[276941]
        _indexOfInterest[276936]
        _iterator[276937]
      }
      label _breakLabel[276942]
    }
  }
  function RadixBucketizer[277268].getNumBuckets[276983](arg _mt[277272]:_MT[238], arg this[277270]:RadixBucketizer[277268]) : _unknown[51] "method" "primary method"
  {
    (276992 return(276990 call +(276987 call << 1 RADIX_BITS[275998]) 2))
  }
  function RadixBucketizer[277268].getBinsToRecursivelySort[276999](arg _mt[277276]:_MT[238], arg this[277274]:RadixBucketizer[277268]) : _unknown[51] "method" "primary method"
  {
    (277008 return(277006 call chpl_build_bounded_range 1(277004 call << 1 RADIX_BITS[275998])))
  }
  function RadixBucketizer[277268].getNextStartBit[277019](arg _mt[277280]:_MT[238], arg this[277278]:RadixBucketizer[277268], arg start_bit[277016] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (277025 return(277023 call + start_bit[277016] 8))
  }
  function RadixBucketizer[277268].bucketForRecord[277034](arg _mt[277284]:_MT[238], arg this[277282]:RadixBucketizer[277268], arg a[277032]:_any[178](?), arg criterion[277036]:_any[178](?), arg startbit[277038]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    const tmp[277051] "const" "temp"(277050 call binForRecord a[277032] criterion[277036] startbit[277038])
    (277055 call _check_tuple_var_decl tmp[277051] 2)
    const bin[277040] "const"(277052 call tmp[277051] 0)
    (277060 'end of statement')
    (277063 return bin[277040])
  }
  function RadixBucketizer[277268].classify[277071](arg _mt[277288]:_MT[238], arg this[277286]:RadixBucketizer[277268], arg A[277069]:_any[178](?), arg start_n[277073]:_any[178](?), arg end_n[277075]:_any[178](?), arg criterion[277077]:_any[178](?), arg startbit[277079]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown cur[277082] start_n[277073]
    (277085 'end of statement')
    {
      unknown tmp[277174] "temp"
      (277210 'move' tmp[277174](277199 call _cond_test(277201 call <= cur[277082](277204 call - end_n[277075](277207 call - classifyUnrollFactor[276003] 1)))))
      WhileDo[277179]
      {
        {
          {
            unknown _indexOfInterest[277127] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[277128] "expr temp" "temp"
            (277137 'move' _iterator[277128](277135 call _getIterator(277145 call chpl_direct_range_iter 0(277142 call - classifyUnrollFactor[276003] 1) 1)))
            Defer
            {
              {
                (277161 call _freeIterator _iterator[277128])
              }
            }
            { scopeless type
              (277150 'move' _indexOfInterest[277127](277147 call iteratorIndex _iterator[277128]))
            }
            ForLoop[277129]
            {
              unknown j[277154] "index var" "insert auto destroy"
              (277156 'move' j[277154] _indexOfInterest[277127])
              {
                (277124 yield(277122 call _build_tuple(277107 call + cur[277082] j[277154])(277120 call(402471 call . this[277286] c"bucketForRecord")(277116 call A[277069](277113 call + cur[277082] j[277154])) criterion[277077] startbit[277079])))
              }
              label _continueLabel[277132]
              _indexOfInterest[277127]
              _iterator[277128]
            }
            label _breakLabel[277133]
          }
          (277171 call += cur[277082] classifyUnrollFactor[276003])
        }
        label _continueLabel[277177]
        (277194 'move' tmp[277174](277183 call _cond_test(277185 call <= cur[277082](277188 call - end_n[277075](277191 call - classifyUnrollFactor[276003] 1)))))
        tmp[277174]
      }
      label _breakLabel[277178]
    }
    {
      unknown tmp[277238] "temp"
      (277262 'move' tmp[277238](277257 call _cond_test(277259 call <= cur[277082] end_n[277075])))
      WhileDo[277243]
      {
        {
          (277230 yield(277228 call _build_tuple cur[277082](277226 call(402490 call . this[277286] c"bucketForRecord")(277222 call A[277069] cur[277082]) criterion[277077] startbit[277079])))
          (277235 call += cur[277082] 1)
        }
        label _continueLabel[277241]
        (277252 'move' tmp[277238](277247 call _cond_test(277249 call <= cur[277082] end_n[277075])))
        tmp[277238]
      }
      label _breakLabel[277242]
    }
  }
  type RadixBucketizer[277268]
  (355279 'used modules list'(352950 'use' ChapelStandard[20264])(275988 'use' Sort[267880])(275995 'import' Reflection[224794].{canResolveMethod}))
}