AST dump for RadixSortHelp after pass scopeResolve.
Module use list: ChapelStandard Sort Reflection 

{
  unknown RADIX_BITS[276003] "param" 8
  (276006 'end of statement')
  unknown classifyUnrollFactor[276008] "param" 7
  (276011 'end of statement')
  function binForRecordKeyPart[276016](arg a[276014]:_any[178](?), arg criterion[276018]:_any[178](?), arg startbit[276021] :
  int(64)[13]) : _unknown[51] "inline"
  {
    const testRet[276033] "const"(276032 'typeof'(276031 call(276025 call . criterion[276018] c"keyPart") a[276014] 1))
    (276036 'end of statement')
    const testPart[276042] "const"(276041 call testRet[276033] 1)
    (276045 'end of statement')
    unknown bitsPerPart[276051] "param"(276050 call numBits(276048 'typeof' testPart[276042]))
    (276054 'end of statement')
    unknown bitsPerPartModRadixBits[276059] "param"(276057 call % bitsPerPart[276051] RADIX_BITS[276003])
    (276062 'end of statement')
    if(276088 call _cond_test(276065 call != bitsPerPartModRadixBits[276059] 0))
    {
      (276086 call compilerError "part size must be a multiple of radix bits")
    }
    const whichpart[276097] "const"(276095 call / startbit[276021] bitsPerPart[276051])
    (276100 'end of statement')
    const bitsinpart[276105] "const"(276103 call % startbit[276021] bitsPerPart[276051])
    (276108 'end of statement')
    const tmp[276122] "const" "temp"(276121 call(276115 call . criterion[276018] c"keyPart") a[276014] whichpart[276097])
    (276129 call _check_tuple_var_decl tmp[276122] 2)
    const section[276109] "const"(276123 call tmp[276122] 0)
    const part[276111] "const"(276126 call tmp[276122] 1)
    (276134 'end of statement')
    unknown ubits[276142](276140 call _cast(276139 call uint(64)[115] bitsPerPart[276051]) part[276111])
    (276145 'end of statement')
    if(276172 call _cond_test(276149 call isInt part[276111]))
    {
      const one[276153] "const" 1(276151 'typeof' ubits[276142])
      (276156 'end of statement')
      (276169 call = ubits[276142](276167 call ^ ubits[276142](276165 call << one[276153](276163 call - bitsPerPart[276051] 1))))
    }
    unknown mask[276184] "param"(276182 call -(276179 call << 1 RADIX_BITS[276003]) 1) uint(64)[115]
    (276187 'end of statement')
    const ubin[276201] "const"(276199 call &(276196 call >> ubits[276142](276194 call -(276191 call - bitsPerPart[276051] bitsinpart[276105]) RADIX_BITS[276003])) mask[276184])
    (276204 'end of statement')
    if(276252 call _cond_test(276207 call == section[276109] 0))
    {
      (276220 return(276218 call _build_tuple(276214 call +(276211 call _cast int(64)[13] ubin[276201]) 1) ubits[276142]))
    }
    {
      if(276246 call _cond_test(276224 call < section[276109] 0))
      {
        (276231 return(276229 call _build_tuple 0 ubits[276142]))
      }
      {
        (276244 return(276242 call _build_tuple(276238 call +(276235 call << 1 RADIX_BITS[276003]) 1) ubits[276142]))
      }
    }
  }
  function binForRecord[276264](arg a[276262]:_any[178](?), arg criterion[276266]:_any[178](?), arg startbit[276269] :
  int(64)[13]) : _unknown[51] "inline"
  {
    if(276362 call _cond_test(276278 call canResolveMethod criterion[276266] "keyPart" a[276262] 0))
    {
      (276285 return(276284 call binForRecordKeyPart a[276262] criterion[276266] startbit[276269]))
    }
    {
      if(276358 call _cond_test(276293 call canResolveMethod criterion[276266] "key" a[276262]))
      {
        (276306 return(276305 call binForRecordKeyPart(276301 call(276296 call . criterion[276266] c"key") a[276262]) defaultComparator[267894] startbit[276269]))
      }
      {
        (276355 call compilerError "Bad comparator for radix sort "(276331 call _cast string[26](276329 'typeof' criterion[276266])) " with eltType "(276353 call _cast string[26](276351 'typeof' a[276262])))
      }
    }
  }
  function fixedWidth[276374](arg eltTy[276372]:_any[178](?)) param : _unknown[51]
  {
    if(276404 call _cond_test(276396 call ||(276390 call ||(276384 call ||(276379 call isUintType eltTy[276372])(276383 call isIntType eltTy[276372]))(276389 call isRealType eltTy[276372]))(276395 call isImagType eltTy[276372])))
    {
      (276402 return(276401 call numBits eltTy[276372]))
    }
    if(276436 call _cond_test(276413 call isHomogeneousTuple eltTy[276372]))
    {
      unknown tmp[276415] eltTy[276372]
      (276418 'end of statement')
      (276434 return(276432 call *(276421 call . tmp[276415] c"size")(276431 call numBits(276429 'typeof'(276428 call tmp[276415] 0)))))
    }
    (276443 return(276441 call - 1))
  }
  function msbRadixSortParamLastStartBit[276455](arg Data[276452] :
  (276449 call chpl__buildArrayRuntimeType nil[44]), arg comparator[276457]:_any[178](?)) param : _unknown[51]
  {
    const element[276469] "const" "ref var"(276468 call Data[276452](276464 call .(276461 call . Data[276452] c"_dom") c"low"))
    (276472 'end of statement')
    if(276543 call _cond_test(276487 call &&(276477 call ==(276475 'typeof' comparator[276457]) DefaultComparator[290466])(276485 call >(276483 call fixedWidth(276481 'typeof' element[276469])) 0)))
    {
      (276497 return(276495 call -(276493 call fixedWidth(276491 'typeof' element[276469])) RADIX_BITS[276003]))
    }
    {
      if(276539 call _cond_test(276505 call canResolveMethod comparator[276457] "key" element[276469]))
      {
        unknown keyType[276514] "type variable"(276513 'typeof'(276512 call(276507 call . comparator[276457] c"key") element[276469]))
        if(276534 call _cond_test(276523 call >(276521 call fixedWidth keyType[276514]) 0))
        {
          (276532 return(276530 call -(276528 call fixedWidth keyType[276514]) RADIX_BITS[276003]))
        }
      }
    }
    (276551 return(276549 call - 1))
  }
  function radixSortClz[276559](arg val[276557]:_any[178](?)) : _unknown[51]
  {
    unknown nBits[276566] "param"(276565 call numBits(276563 'typeof' val[276557]))
    (276569 'end of statement')
    if(276579 call _cond_test(276573 call == val[276557] 0))
    {
      (276576 return nBits[276566])
    }
    unknown cur[276584] val[276557]
    (276587 'end of statement')
    unknown one[276593](276591 call _cast(276590 'typeof' val[276557]) 1)
    (276596 'end of statement')
    unknown hi[276604](276602 call << one[276593](276600 call - nBits[276566] 1))
    (276607 'end of statement')
    unknown n[276609] 0
    (276612 'end of statement')
    {
      unknown tmp[276631] "temp"
      (276661 'move' tmp[276631](276653 call _cond_test(276655 call ==(276657 call & cur[276584] hi[276604]) 0)))
      WhileDo[276636]
      {
        {
          (276622 call += n[276609] 1)
          (276628 call <<= cur[276584] 1)
        }
        label _continueLabel[276634]
        (276648 'move' tmp[276631](276640 call _cond_test(276642 call ==(276644 call & cur[276584] hi[276604]) 0)))
        tmp[276631]
      }
      label _breakLabel[276635]
    }
    (276665 return n[276609])
  }
  function findDataStartBit[276675](arg startbit[276672] :
  int(64)[13], arg min_ubits[276677]:_any[178](?), arg max_ubits[276679]:_any[178](?)) : _unknown[51]
  {
    unknown xor[276686](276684 call ^ min_ubits[276677] max_ubits[276679])
    (276689 'end of statement')
    unknown bitsPerPart[276696] "param"(276695 call numBits(276693 'typeof' min_ubits[276677]))
    (276699 'end of statement')
    const bitsinpart[276704] "const"(276702 call % startbit[276672] bitsPerPart[276696])
    (276707 'end of statement')
    (276710 call <<= xor[276686] bitsinpart[276704])
    (276715 call >>= xor[276686] bitsinpart[276704])
    unknown new_start[276722](276721 call radixSortClz xor[276686])
    (276725 'end of statement')
    unknown new_digit[276730](276728 call / new_start[276722] RADIX_BITS[276003])
    (276733 'end of statement')
    unknown new_start_bit_rounded[276738](276736 call * new_digit[276730] RADIX_BITS[276003])
    (276741 'end of statement')
    (276746 return(276744 call _cast int(64)[13] new_start_bit_rounded[276738]))
  }
  { scopeless type
    int(64)[13]
  }
  function checkSorted[276757](arg start_n[276754] :
  int(64)[13], arg end_n[276760] :
  int(64)[13], arg A[276766] :
  (276763 call chpl__buildArrayRuntimeType nil[44]), arg criterion[276769]:_any[178](?), arg startbit[276772] =
  0) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    {
      unknown _indexOfInterest[276941] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[276942] "expr temp" "temp"
      (276951 'move' _iterator[276942](276949 call _getIterator(276959 call chpl_direct_range_iter(276955 call + start_n[276754] 1) end_n[276760] 1)))
      Defer
      {
        {
          (276975 call _freeIterator _iterator[276942])
        }
      }
      { scopeless type
        (276964 'move' _indexOfInterest[276941](276961 call iteratorIndex _iterator[276942]))
      }
      ForLoop[276943]
      {
        unknown i[276968] "index var" "insert auto destroy"
        (276970 'move' i[276968] _indexOfInterest[276941])
        {
          unknown cmp[276798](276797 call chpl_compare(276790 call A[276766](276787 call - i[276968] 1))(276795 call A[276766] i[276968]) criterion[276769])
          (276801 'end of statement')
          if(276937 call _cond_test(276805 call > cmp[276798] 0))
          {
            (276908 call writeln "Error: not sorted properly at i=" i[276968] " A[i-1]="(276850 call A[276766](276847 call - i[276968] 1)) " A[i]="(276871 call A[276766] i[276968]) " in start=" start_n[276754] " end=" end_n[276760])
            (276914 call writeln A[276766])
            (276935 call halt "failed checkSorted")
          }
        }
        label _continueLabel[276946]
        _indexOfInterest[276941]
        _iterator[276942]
      }
      label _breakLabel[276947]
    }
  }
  function RadixBucketizer[277273].getNumBuckets[276988](arg _mt[277277]:_MT[238], arg this[277275]:RadixBucketizer[277273]) : _unknown[51] "method" "primary method"
  {
    (276997 return(276995 call +(276992 call << 1 RADIX_BITS[276003]) 2))
  }
  function RadixBucketizer[277273].getBinsToRecursivelySort[277004](arg _mt[277281]:_MT[238], arg this[277279]:RadixBucketizer[277273]) : _unknown[51] "method" "primary method"
  {
    (277013 return(277011 call chpl_build_bounded_range 1(277009 call << 1 RADIX_BITS[276003])))
  }
  function RadixBucketizer[277273].getNextStartBit[277024](arg _mt[277285]:_MT[238], arg this[277283]:RadixBucketizer[277273], arg start_bit[277021] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (277030 return(277028 call + start_bit[277021] 8))
  }
  function RadixBucketizer[277273].bucketForRecord[277039](arg _mt[277289]:_MT[238], arg this[277287]:RadixBucketizer[277273], arg a[277037]:_any[178](?), arg criterion[277041]:_any[178](?), arg startbit[277043]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    const tmp[277056] "const" "temp"(277055 call binForRecord a[277037] criterion[277041] startbit[277043])
    (277060 call _check_tuple_var_decl tmp[277056] 2)
    const bin[277045] "const"(277057 call tmp[277056] 0)
    (277065 'end of statement')
    (277068 return bin[277045])
  }
  function RadixBucketizer[277273].classify[277076](arg _mt[277293]:_MT[238], arg this[277291]:RadixBucketizer[277273], arg A[277074]:_any[178](?), arg start_n[277078]:_any[178](?), arg end_n[277080]:_any[178](?), arg criterion[277082]:_any[178](?), arg startbit[277084]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown cur[277087] start_n[277078]
    (277090 'end of statement')
    {
      unknown tmp[277179] "temp"
      (277215 'move' tmp[277179](277204 call _cond_test(277206 call <= cur[277087](277209 call - end_n[277080](277212 call - classifyUnrollFactor[276008] 1)))))
      WhileDo[277184]
      {
        {
          {
            unknown _indexOfInterest[277132] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[277133] "expr temp" "temp"
            (277142 'move' _iterator[277133](277140 call _getIterator(277150 call chpl_direct_range_iter 0(277147 call - classifyUnrollFactor[276008] 1) 1)))
            Defer
            {
              {
                (277166 call _freeIterator _iterator[277133])
              }
            }
            { scopeless type
              (277155 'move' _indexOfInterest[277132](277152 call iteratorIndex _iterator[277133]))
            }
            ForLoop[277134]
            {
              unknown j[277159] "index var" "insert auto destroy"
              (277161 'move' j[277159] _indexOfInterest[277132])
              {
                (277129 yield(277127 call _build_tuple(277112 call + cur[277087] j[277159])(277125 call(402618 call . this[277291] c"bucketForRecord")(277121 call A[277074](277118 call + cur[277087] j[277159])) criterion[277082] startbit[277084])))
              }
              label _continueLabel[277137]
              _indexOfInterest[277132]
              _iterator[277133]
            }
            label _breakLabel[277138]
          }
          (277176 call += cur[277087] classifyUnrollFactor[276008])
        }
        label _continueLabel[277182]
        (277199 'move' tmp[277179](277188 call _cond_test(277190 call <= cur[277087](277193 call - end_n[277080](277196 call - classifyUnrollFactor[276008] 1)))))
        tmp[277179]
      }
      label _breakLabel[277183]
    }
    {
      unknown tmp[277243] "temp"
      (277267 'move' tmp[277243](277262 call _cond_test(277264 call <= cur[277087] end_n[277080])))
      WhileDo[277248]
      {
        {
          (277235 yield(277233 call _build_tuple cur[277087](277231 call(402637 call . this[277291] c"bucketForRecord")(277227 call A[277074] cur[277087]) criterion[277082] startbit[277084])))
          (277240 call += cur[277087] 1)
        }
        label _continueLabel[277246]
        (277257 'move' tmp[277243](277252 call _cond_test(277254 call <= cur[277087] end_n[277080])))
        tmp[277243]
      }
      label _breakLabel[277247]
    }
  }
  type RadixBucketizer[277273]
  (355424 'used modules list'(353095 'use' ChapelStandard[20264])(275993 'use' Sort[267885])(276000 'import' Reflection[224799].{canResolveMethod}))
}