AST dump for QuickSort after pass flattenClasses.
Module use list: ChapelStandard Sort ShallowCopy InsertionSort 

{
  function partition[271981](arg Data[271978] :
  (271976 call chpl__buildArrayRuntimeType unknown Dom[271971] unknown eltType[271974]), arg lo[271984] :
  int(64)[13], arg pivIdx[271988] :
  int(64)[13], arg hi[271992] :
  int(64)[13], arg comparator[271995]:_any[178](?)) : _unknown[51]
  {
    unknown a[271998] lo[271984]
    (272001 'end of statement')
    unknown b[272004] lo[271984]
    (272007 'end of statement')
    unknown c[272009] hi[271992]
    (272012 'end of statement')
    unknown d[272014] hi[271992]
    (272017 'end of statement')
    if(272039 call _cond_test(272020 call != lo[271984] pivIdx[271988]))
    {
      (272037 call shallowSwap module=[255] ShallowCopy[277298](272031 call Data[271978] lo[271984])(272036 call Data[271978] pivIdx[271988]))
      (364257 'referenced modules list' ShallowCopy[277298])
    }
    (272046 call += a[271998] 1)
    (272051 call += b[272004] 1)
    unknown piv[272065] "no auto destroy"(272064 call shallowCopyInit module=[255] ShallowCopy[277298](272062 call Data[271978] lo[271984])) eltType[271974]
    (272068 'end of statement')
    {
      unknown tmp[272299] "temp"
      (272317 'move' tmp[272299](272315 call _cond_test 1))
      WhileDo[272304]
      {
        {
          {
            unknown tmp[272143] "temp"
            (272167 'move' tmp[272143](272162 call _cond_test(272164 call <= b[272004] c[272009])))
            WhileDo[272148]
            {
              {
                unknown cmp[272083](272082 call chpl_compare(272078 call Data[271978] b[272004]) piv[272065] comparator[271995])
                (272086 'end of statement')
                if(272095 call _cond_test(272090 call > cmp[272083] 0))
                {
                  break _breakLabel[272147] _breakLabel[272147]
                }
                if(272134 call _cond_test(272102 call == cmp[272083] 0))
                {
                  if(272124 call _cond_test(272106 call != a[271998] b[272004]))
                  {
                    (272121 call shallowSwap module=[255] ShallowCopy[277298](272115 call Data[271978] a[271998])(272120 call Data[271978] b[272004]))
                    (364269 'referenced modules list' ShallowCopy[277298])
                  }
                  (272131 call += a[271998] 1)
                }
                (272140 call += b[272004] 1)
              }
              label _continueLabel[272146]
              (272157 'move' tmp[272143](272152 call _cond_test(272154 call <= b[272004] c[272009])))
              tmp[272143]
            }
            label _breakLabel[272147]
          }
          {
            unknown tmp[272235] "temp"
            (272259 'move' tmp[272235](272254 call _cond_test(272256 call >= c[272009] b[272004])))
            WhileDo[272240]
            {
              {
                unknown cmp[272184](272183 call chpl_compare(272179 call Data[271978] c[272009]) piv[272065] comparator[271995])
                (272187 'end of statement')
                if(272196 call _cond_test(272191 call < cmp[272184] 0))
                {
                  break _breakLabel[272239] _breakLabel[272239]
                }
                if(272226 call _cond_test(272203 call == cmp[272184] 0))
                {
                  (272218 call shallowSwap module=[255] ShallowCopy[277298](272212 call Data[271978] d[272014])(272217 call Data[271978] c[272009]))
                  (272223 call -= d[272014] 1)
                  (364275 'referenced modules list' ShallowCopy[277298])
                }
                (272232 call -= c[272009] 1)
              }
              label _continueLabel[272238]
              (272249 'move' tmp[272235](272244 call _cond_test(272246 call >= c[272009] b[272004])))
              tmp[272235]
            }
            label _breakLabel[272239]
          }
          if(272269 call _cond_test(272264 call > b[272004] c[272009]))
          {
            break _breakLabel[272303] _breakLabel[272303]
          }
          (272287 call shallowSwap module=[255] ShallowCopy[277298](272281 call Data[271978] b[272004])(272286 call Data[271978] c[272009]))
          (272291 call += b[272004] 1)
          (272296 call -= c[272009] 1)
          (364281 'referenced modules list' ShallowCopy[277298])
        }
        label _continueLabel[272302]
        (272310 'move' tmp[272299](272308 call _cond_test 1))
        tmp[272299]
      }
      label _breakLabel[272303]
    }
    (272330 call shallowCopy module=[255] ShallowCopy[277298](272327 call Data[271978] lo[271984]) piv[272065])
    unknown s[272332] int(64)[13]
    unknown l[272335](272345 'typeof' s[272332])
    unknown h[272339](272343 'typeof' l[272335])
    (272346 'end of statement')
    (272359 call = s[272332](272358 call min(272351 call - a[271998] lo[271984])(272356 call - b[272004] a[271998])))
    (272364 call = l[272335] lo[271984])
    (272372 call = h[272339](272370 call - b[272004] s[272332]))
    {
      unknown tmp[272410] "temp"
      (272434 'move' tmp[272410](272429 call _cond_test(272431 call > s[272332] 0)))
      WhileDo[272415]
      {
        {
          (272392 call shallowSwap module=[255] ShallowCopy[277298](272386 call Data[271978] l[272335])(272391 call Data[271978] h[272339]))
          (272397 call += l[272335] 1)
          (272402 call += h[272339] 1)
          (272407 call -= s[272332] 1)
          (364292 'referenced modules list' ShallowCopy[277298])
        }
        label _continueLabel[272413]
        (272424 'move' tmp[272410](272419 call _cond_test(272421 call > s[272332] 0)))
        tmp[272410]
      }
      label _breakLabel[272414]
    }
    unknown n[272441](272439 call + hi[271992] 1)
    (272444 'end of statement')
    (272457 call = s[272332](272456 call min(272449 call - d[272014] c[272009])(272454 call - hi[271992] d[272014])))
    (272462 call = l[272335] b[272004])
    (272470 call = h[272339](272468 call - n[272441] s[272332]))
    {
      unknown tmp[272508] "temp"
      (272532 'move' tmp[272508](272527 call _cond_test(272529 call > s[272332] 0)))
      WhileDo[272513]
      {
        {
          (272490 call shallowSwap module=[255] ShallowCopy[277298](272484 call Data[271978] l[272335])(272489 call Data[271978] h[272339]))
          (272495 call += l[272335] 1)
          (272500 call += h[272339] 1)
          (272505 call -= s[272332] 1)
          (364298 'referenced modules list' ShallowCopy[277298])
        }
        label _continueLabel[272511]
        (272522 'move' tmp[272508](272517 call _cond_test(272519 call > s[272332] 0)))
        tmp[272508]
      }
      label _breakLabel[272512]
    }
    unknown eqStart[272542](272540 call +(272537 call - b[272004] a[271998]) lo[271984])
    (272545 'end of statement')
    unknown eqEnd[272553](272551 call - hi[271992](272549 call - d[272014] c[272009]))
    (272556 'end of statement')
    (272562 return(272560 call _build_tuple eqStart[272542] eqEnd[272553]))
    (364263 'referenced modules list' ShallowCopy[277298] ShallowCopy[277298])
  }
  function order3[272578](arg Data[272575] :
  (272573 call chpl__buildArrayRuntimeType unknown Dom[272568] unknown eltType[272571]), arg lo[272581] :
  int(64)[13], arg mid[272585] :
  int(64)[13], arg hi[272589] :
  int(64)[13], arg comparator[272592]:_any[178](?)) : _unknown[51]
  {
    if(272714 call _cond_test(272608 call <(272606 call chpl_compare(272599 call Data[272575] lo[272581])(272604 call Data[272575] mid[272585]) comparator[272592]) 0))
    {
      if(272656 call _cond_test(272623 call <(272621 call chpl_compare(272614 call Data[272575] hi[272589])(272619 call Data[272575] lo[272581]) comparator[272592]) 0))
      {
        (272626 return lo[272581])
      }
      {
        if(272652 call _cond_test(272642 call <(272640 call chpl_compare(272633 call Data[272575] mid[272585])(272638 call Data[272575] hi[272589]) comparator[272592]) 0))
        {
          (272645 return mid[272585])
        }
        {
          (272649 return hi[272589])
        }
      }
    }
    {
      if(272708 call _cond_test(272675 call <(272673 call chpl_compare(272666 call Data[272575] lo[272581])(272671 call Data[272575] hi[272589]) comparator[272592]) 0))
      {
        (272678 return lo[272581])
      }
      {
        if(272704 call _cond_test(272694 call <(272692 call chpl_compare(272685 call Data[272575] hi[272589])(272690 call Data[272575] mid[272585]) comparator[272592]) 0))
        {
          (272697 return mid[272585])
        }
        {
          (272701 return hi[272589])
        }
      }
    }
  }
  { scopeless type
    int(64)[13]
  }
  function quickSort[272734](arg Data[272731] :
  (272729 call chpl__buildArrayRuntimeType unknown Dom[272724] unknown eltType[272727]), arg minlen[272737] =
  16, arg comparator[272743] :
  unknown rec[272740] =
  defaultComparator[267894]) : _unknown[51] "no return value for void"
  {
    (272751 call chpl_check_comparator comparator[272743] eltType[272727])
    if(272783 call _cond_test(272759 call !=(272755 call . Dom[272724] c"rank") 1))
    {
      (272780 call compilerError "quickSort() requires 1-D array")
    }
    if(272848 call _cond_test(272798 call &&(272788 call . Dom[272724] c"stridable")(272796 call !=(272792 call . Dom[272724] c"stride") 1)))
    {
      unknown reindexed[272820] "ref var"(272819 call(272803 call . Data[272731] c"reindex")(272816 call #(272810 call chpl_build_low_bounded_range(272807 call . Dom[272724] c"alignedLow"))(272813 call . Dom[272724] c"size")))
      (272823 'end of statement')
      (272837 call assert(272834 call ==(272830 call .(272827 call . reindexed[272820] c"_dom") c"stride") 1))
      (272844 call quickSortImpl reindexed[272820] minlen[272737] comparator[272743])
      (272846 return _void[55])
    }
    (272861 call assert(272858 call ==(272854 call . Dom[272724] c"stride") 1))
    (272868 call quickSortImpl Data[272731] minlen[272737] comparator[272743])
  }
  function quickSortImpl[272884](arg Data[272881] :
  (272879 call chpl__buildArrayRuntimeType unknown Dom[272874] unknown eltType[272877]), arg minlen[272887] =
  16, arg comparator[272893] :
  unknown rec[272890] =
  defaultComparator[267894], arg start[272902] :
  int(64)[13] =
  (272899 call . Dom[272874] c"low"), arg end[272911] :
  int(64)[13] =
  (272908 call . Dom[272874] c"high")) : _unknown[51] "no return value for void"
  {
    const lo[272923] "const" start[272902]
    const hi[272927] "const" end[272911]
    const mid[272943] "const"(272941 call + lo[272923](272939 call /(272936 call +(272933 call - hi[272927] lo[272923]) 1) 2))
    (272946 'end of statement')
    unknown piv[272948] mid[272943]
    (272951 'end of statement')
    if(272987 call _cond_test(272957 call <(272954 call - hi[272927] lo[272923]) 0))
    {
      (272971 call insertionSortMoveElts module=[255] InsertionSort[270009] Data[272881](comparator = comparator[272893]) lo[272923] hi[272927])
      (272974 return _void[55])
      (364314 'referenced modules list' InsertionSort[270009])
    }
    {
      if(272983 call _cond_test(272978 call <= hi[272927] lo[272923]))
      {
        (272980 return _void[55])
      }
    }
    if(273079 call _cond_test(272997 call <(272994 call - hi[272927] lo[272923]) 100))
    {
      (273008 call = piv[272948](273007 call order3 Data[272881] lo[272923] mid[272943] hi[272927] comparator[272893]))
    }
    {
      const medLo[273026] "const"(273025 call order3 Data[272881] lo[272923](273018 call + lo[272923] 1)(273022 call + lo[272923] 2) comparator[272893])
      (273029 'end of statement')
      const medMid[273045] "const"(273044 call order3 Data[272881](273036 call - mid[272943] 1) mid[272943](273041 call + mid[272943] 1) comparator[272893])
      (273048 'end of statement')
      const medHi[273063] "const"(273062 call order3 Data[272881](273054 call - hi[272927] 2)(273058 call - hi[272927] 1) hi[272927] comparator[272893])
      (273066 'end of statement')
      (273076 call = piv[272948](273075 call order3 Data[272881] medLo[273026] medMid[273045] medHi[273063] comparator[272893]))
    }
    unknown tmp[273096] "temp"(273095 call partition Data[272881] lo[272923] piv[272948] hi[272927] comparator[272893])
    (273103 call _check_tuple_var_decl tmp[273096] 2)
    unknown eqStart[273083](273097 call tmp[273096] 0)
    unknown eqEnd[273085](273100 call tmp[273096] 1)
    (273108 'end of statement')
    if(273188 call _cond_test(273116 call <(273111 call - hi[272927] lo[272923]) 300))
    {
      (273128 call quickSortImpl Data[272881] minlen[272887] comparator[272893] lo[272923](273126 call - eqStart[273083] 1))
      (273141 call quickSortImpl Data[272881] minlen[272887] comparator[272893](273138 call + eqEnd[273085] 1) hi[272927])
    }
    {
      Forall {
        induction variables:
          
          unknown i[273184] "index var" "insert auto destroy"
        iterated expressions:
          (273146 call chpl_build_bounded_range 1 2)
        shadow variables:
        other variables
          forall body
        {
          if(273176 call _cond_test(273150 call == i[273184] 1))
          {
            (273162 call quickSortImpl Data[272881] minlen[272887] comparator[272893] lo[272923](273160 call - eqStart[273083] 1))
          }
          {
            (273174 call quickSortImpl Data[272881] minlen[272887] comparator[272893](273171 call + eqEnd[273085] 1) hi[272927])
          }
        }
      }
    }
    (355410 'used modules list'(272919 'import' InsertionSort[270009]))
  }
  (355406 'used modules list'(353087 'use' ChapelStandard[20264])(271958 'use' Sort[267885])(271967 'use' ShallowCopy[277298]))
}