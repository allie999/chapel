AST dump for QuickSort after pass flattenClasses.
Module use list: ChapelStandard Sort ShallowCopy InsertionSort 

{
  function partition[272086](arg Data[272083] :
  (272081 call chpl__buildArrayRuntimeType unknown Dom[272076] unknown eltType[272079]), arg lo[272089] :
  int(64)[13], arg pivIdx[272093] :
  int(64)[13], arg hi[272097] :
  int(64)[13], arg comparator[272100]:_any[178](?)) : _unknown[51]
  {
    unknown a[272103] lo[272089]
    (272106 'end of statement')
    unknown b[272109] lo[272089]
    (272112 'end of statement')
    unknown c[272114] hi[272097]
    (272117 'end of statement')
    unknown d[272119] hi[272097]
    (272122 'end of statement')
    if(272144 call _cond_test(272125 call != lo[272089] pivIdx[272093]))
    {
      (272142 call shallowSwap module=[255] ShallowCopy[277404](272136 call Data[272083] lo[272089])(272141 call Data[272083] pivIdx[272093]))
      (364243 'referenced modules list' ShallowCopy[277404])
    }
    (272151 call += a[272103] 1)
    (272156 call += b[272109] 1)
    unknown piv[272170] "no auto destroy"(272169 call shallowCopyInit module=[255] ShallowCopy[277404](272167 call Data[272083] lo[272089])) eltType[272079]
    (272173 'end of statement')
    {
      unknown tmp[272404] "temp"
      (272422 'move' tmp[272404](272420 call _cond_test 1))
      WhileDo[272409]
      {
        {
          {
            unknown tmp[272248] "temp"
            (272272 'move' tmp[272248](272267 call _cond_test(272269 call <= b[272109] c[272114])))
            WhileDo[272253]
            {
              {
                unknown cmp[272188](272187 call chpl_compare(272183 call Data[272083] b[272109]) piv[272170] comparator[272100])
                (272191 'end of statement')
                if(272200 call _cond_test(272195 call > cmp[272188] 0))
                {
                  break _breakLabel[272252] _breakLabel[272252]
                }
                if(272239 call _cond_test(272207 call == cmp[272188] 0))
                {
                  if(272229 call _cond_test(272211 call != a[272103] b[272109]))
                  {
                    (272226 call shallowSwap module=[255] ShallowCopy[277404](272220 call Data[272083] a[272103])(272225 call Data[272083] b[272109]))
                    (364255 'referenced modules list' ShallowCopy[277404])
                  }
                  (272236 call += a[272103] 1)
                }
                (272245 call += b[272109] 1)
              }
              label _continueLabel[272251]
              (272262 'move' tmp[272248](272257 call _cond_test(272259 call <= b[272109] c[272114])))
              tmp[272248]
            }
            label _breakLabel[272252]
          }
          {
            unknown tmp[272340] "temp"
            (272364 'move' tmp[272340](272359 call _cond_test(272361 call >= c[272114] b[272109])))
            WhileDo[272345]
            {
              {
                unknown cmp[272289](272288 call chpl_compare(272284 call Data[272083] c[272114]) piv[272170] comparator[272100])
                (272292 'end of statement')
                if(272301 call _cond_test(272296 call < cmp[272289] 0))
                {
                  break _breakLabel[272344] _breakLabel[272344]
                }
                if(272331 call _cond_test(272308 call == cmp[272289] 0))
                {
                  (272323 call shallowSwap module=[255] ShallowCopy[277404](272317 call Data[272083] d[272119])(272322 call Data[272083] c[272114]))
                  (272328 call -= d[272119] 1)
                  (364261 'referenced modules list' ShallowCopy[277404])
                }
                (272337 call -= c[272114] 1)
              }
              label _continueLabel[272343]
              (272354 'move' tmp[272340](272349 call _cond_test(272351 call >= c[272114] b[272109])))
              tmp[272340]
            }
            label _breakLabel[272344]
          }
          if(272374 call _cond_test(272369 call > b[272109] c[272114]))
          {
            break _breakLabel[272408] _breakLabel[272408]
          }
          (272392 call shallowSwap module=[255] ShallowCopy[277404](272386 call Data[272083] b[272109])(272391 call Data[272083] c[272114]))
          (272396 call += b[272109] 1)
          (272401 call -= c[272114] 1)
          (364267 'referenced modules list' ShallowCopy[277404])
        }
        label _continueLabel[272407]
        (272415 'move' tmp[272404](272413 call _cond_test 1))
        tmp[272404]
      }
      label _breakLabel[272408]
    }
    (272435 call shallowCopy module=[255] ShallowCopy[277404](272432 call Data[272083] lo[272089]) piv[272170])
    unknown s[272437] int(64)[13]
    unknown l[272440](272450 'typeof' s[272437])
    unknown h[272444](272448 'typeof' l[272440])
    (272451 'end of statement')
    (272464 call = s[272437](272463 call min(272456 call - a[272103] lo[272089])(272461 call - b[272109] a[272103])))
    (272469 call = l[272440] lo[272089])
    (272477 call = h[272444](272475 call - b[272109] s[272437]))
    {
      unknown tmp[272515] "temp"
      (272539 'move' tmp[272515](272534 call _cond_test(272536 call > s[272437] 0)))
      WhileDo[272520]
      {
        {
          (272497 call shallowSwap module=[255] ShallowCopy[277404](272491 call Data[272083] l[272440])(272496 call Data[272083] h[272444]))
          (272502 call += l[272440] 1)
          (272507 call += h[272444] 1)
          (272512 call -= s[272437] 1)
          (364278 'referenced modules list' ShallowCopy[277404])
        }
        label _continueLabel[272518]
        (272529 'move' tmp[272515](272524 call _cond_test(272526 call > s[272437] 0)))
        tmp[272515]
      }
      label _breakLabel[272519]
    }
    unknown n[272546](272544 call + hi[272097] 1)
    (272549 'end of statement')
    (272562 call = s[272437](272561 call min(272554 call - d[272119] c[272114])(272559 call - hi[272097] d[272119])))
    (272567 call = l[272440] b[272109])
    (272575 call = h[272444](272573 call - n[272546] s[272437]))
    {
      unknown tmp[272613] "temp"
      (272637 'move' tmp[272613](272632 call _cond_test(272634 call > s[272437] 0)))
      WhileDo[272618]
      {
        {
          (272595 call shallowSwap module=[255] ShallowCopy[277404](272589 call Data[272083] l[272440])(272594 call Data[272083] h[272444]))
          (272600 call += l[272440] 1)
          (272605 call += h[272444] 1)
          (272610 call -= s[272437] 1)
          (364284 'referenced modules list' ShallowCopy[277404])
        }
        label _continueLabel[272616]
        (272627 'move' tmp[272613](272622 call _cond_test(272624 call > s[272437] 0)))
        tmp[272613]
      }
      label _breakLabel[272617]
    }
    unknown eqStart[272647](272645 call +(272642 call - b[272109] a[272103]) lo[272089])
    (272650 'end of statement')
    unknown eqEnd[272658](272656 call - hi[272097](272654 call - d[272119] c[272114]))
    (272661 'end of statement')
    (272667 return(272665 call _build_tuple eqStart[272647] eqEnd[272658]))
    (364249 'referenced modules list' ShallowCopy[277404] ShallowCopy[277404])
  }
  function order3[272683](arg Data[272680] :
  (272678 call chpl__buildArrayRuntimeType unknown Dom[272673] unknown eltType[272676]), arg lo[272686] :
  int(64)[13], arg mid[272690] :
  int(64)[13], arg hi[272694] :
  int(64)[13], arg comparator[272697]:_any[178](?)) : _unknown[51]
  {
    if(272819 call _cond_test(272713 call <(272711 call chpl_compare(272704 call Data[272680] lo[272686])(272709 call Data[272680] mid[272690]) comparator[272697]) 0))
    {
      if(272761 call _cond_test(272728 call <(272726 call chpl_compare(272719 call Data[272680] hi[272694])(272724 call Data[272680] lo[272686]) comparator[272697]) 0))
      {
        (272731 return lo[272686])
      }
      {
        if(272757 call _cond_test(272747 call <(272745 call chpl_compare(272738 call Data[272680] mid[272690])(272743 call Data[272680] hi[272694]) comparator[272697]) 0))
        {
          (272750 return mid[272690])
        }
        {
          (272754 return hi[272694])
        }
      }
    }
    {
      if(272813 call _cond_test(272780 call <(272778 call chpl_compare(272771 call Data[272680] lo[272686])(272776 call Data[272680] hi[272694]) comparator[272697]) 0))
      {
        (272783 return lo[272686])
      }
      {
        if(272809 call _cond_test(272799 call <(272797 call chpl_compare(272790 call Data[272680] hi[272694])(272795 call Data[272680] mid[272690]) comparator[272697]) 0))
        {
          (272802 return mid[272690])
        }
        {
          (272806 return hi[272694])
        }
      }
    }
  }
  { scopeless type
    int(64)[13]
  }
  function quickSort[272839](arg Data[272836] :
  (272834 call chpl__buildArrayRuntimeType unknown Dom[272829] unknown eltType[272832]), arg minlen[272842] =
  16, arg comparator[272848] :
  unknown rec[272845] =
  defaultComparator[267998]) : _unknown[51] "no return value for void"
  {
    (272856 call chpl_check_comparator comparator[272848] eltType[272832])
    if(272888 call _cond_test(272864 call !=(272860 call . Dom[272829] c"rank") 1))
    {
      (272885 call compilerError "quickSort() requires 1-D array")
    }
    if(272953 call _cond_test(272903 call &&(272893 call . Dom[272829] c"stridable")(272901 call !=(272897 call . Dom[272829] c"stride") 1)))
    {
      unknown reindexed[272925] "ref var"(272924 call(272908 call . Data[272836] c"reindex")(272921 call #(272915 call chpl_build_low_bounded_range(272912 call . Dom[272829] c"alignedLow"))(272918 call . Dom[272829] c"size")))
      (272928 'end of statement')
      (272942 call assert(272939 call ==(272935 call .(272932 call . reindexed[272925] c"_dom") c"stride") 1))
      (272949 call quickSortImpl reindexed[272925] minlen[272842] comparator[272848])
      (272951 return _void[55])
    }
    (272966 call assert(272963 call ==(272959 call . Dom[272829] c"stride") 1))
    (272973 call quickSortImpl Data[272836] minlen[272842] comparator[272848])
  }
  function quickSortImpl[272989](arg Data[272986] :
  (272984 call chpl__buildArrayRuntimeType unknown Dom[272979] unknown eltType[272982]), arg minlen[272992] =
  16, arg comparator[272998] :
  unknown rec[272995] =
  defaultComparator[267998], arg start[273007] :
  int(64)[13] =
  (273004 call . Dom[272979] c"low"), arg end[273016] :
  int(64)[13] =
  (273013 call . Dom[272979] c"high")) : _unknown[51] "no return value for void"
  {
    const lo[273028] "const" start[273007]
    const hi[273032] "const" end[273016]
    const mid[273048] "const"(273046 call + lo[273028](273044 call /(273041 call +(273038 call - hi[273032] lo[273028]) 1) 2))
    (273051 'end of statement')
    unknown piv[273053] mid[273048]
    (273056 'end of statement')
    if(273092 call _cond_test(273062 call <(273059 call - hi[273032] lo[273028]) 0))
    {
      (273076 call insertionSortMoveElts module=[255] InsertionSort[270114] Data[272986](comparator = comparator[272998]) lo[273028] hi[273032])
      (273079 return _void[55])
      (364300 'referenced modules list' InsertionSort[270114])
    }
    {
      if(273088 call _cond_test(273083 call <= hi[273032] lo[273028]))
      {
        (273085 return _void[55])
      }
    }
    if(273184 call _cond_test(273102 call <(273099 call - hi[273032] lo[273028]) 100))
    {
      (273113 call = piv[273053](273112 call order3 Data[272986] lo[273028] mid[273048] hi[273032] comparator[272998]))
    }
    {
      const medLo[273131] "const"(273130 call order3 Data[272986] lo[273028](273123 call + lo[273028] 1)(273127 call + lo[273028] 2) comparator[272998])
      (273134 'end of statement')
      const medMid[273150] "const"(273149 call order3 Data[272986](273141 call - mid[273048] 1) mid[273048](273146 call + mid[273048] 1) comparator[272998])
      (273153 'end of statement')
      const medHi[273168] "const"(273167 call order3 Data[272986](273159 call - hi[273032] 2)(273163 call - hi[273032] 1) hi[273032] comparator[272998])
      (273171 'end of statement')
      (273181 call = piv[273053](273180 call order3 Data[272986] medLo[273131] medMid[273150] medHi[273168] comparator[272998]))
    }
    unknown tmp[273201] "temp"(273200 call partition Data[272986] lo[273028] piv[273053] hi[273032] comparator[272998])
    (273208 call _check_tuple_var_decl tmp[273201] 2)
    unknown eqStart[273188](273202 call tmp[273201] 0)
    unknown eqEnd[273190](273205 call tmp[273201] 1)
    (273213 'end of statement')
    if(273294 call _cond_test(273221 call <(273216 call - hi[273032] lo[273028]) 300))
    {
      (273233 call quickSortImpl Data[272986] minlen[272992] comparator[272998] lo[273028](273231 call - eqStart[273188] 1))
      (273246 call quickSortImpl Data[272986] minlen[272992] comparator[272998](273243 call + eqEnd[273190] 1) hi[273032])
    }
    {
      Forall {
        induction variables:
          
          unknown i[273289] "index var" "insert auto destroy"
        iterated expressions:
          (273251 call chpl_build_bounded_range 1 2)
        shadow variables:
        other variables
          forall body
        {
          if(273281 call _cond_test(273255 call == i[273289] 1))
          {
            (273267 call quickSortImpl Data[272986] minlen[272992] comparator[272998] lo[273028](273265 call - eqStart[273188] 1))
          }
          {
            (273279 call quickSortImpl Data[272986] minlen[272992] comparator[272998](273276 call + eqEnd[273190] 1) hi[273032])
          }
        }
      }
    }
    (355396 'used modules list'(273024 'import' InsertionSort[270114]))
  }
  (355392 'used modules list'(353072 'use' ChapelStandard[20267])(272063 'use' Sort[267989])(272072 'use' ShallowCopy[277404]))
}