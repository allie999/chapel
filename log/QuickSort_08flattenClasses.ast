AST dump for QuickSort after pass flattenClasses.
Module use list: ChapelStandard Sort ShallowCopy InsertionSort 

{
  function partition[272084](arg Data[272081] :
  (272079 call chpl__buildArrayRuntimeType unknown Dom[272074] unknown eltType[272077]), arg lo[272087] :
  int(64)[13], arg pivIdx[272091] :
  int(64)[13], arg hi[272095] :
  int(64)[13], arg comparator[272098]:_any[178](?)) : _unknown[51]
  {
    unknown a[272101] lo[272087]
    (272104 'end of statement')
    unknown b[272107] lo[272087]
    (272110 'end of statement')
    unknown c[272112] hi[272095]
    (272115 'end of statement')
    unknown d[272117] hi[272095]
    (272120 'end of statement')
    if(272142 call _cond_test(272123 call != lo[272087] pivIdx[272091]))
    {
      (272140 call shallowSwap module=[255] ShallowCopy[277402](272134 call Data[272081] lo[272087])(272139 call Data[272081] pivIdx[272091]))
      (364240 'referenced modules list' ShallowCopy[277402])
    }
    (272149 call += a[272101] 1)
    (272154 call += b[272107] 1)
    unknown piv[272168] "no auto destroy"(272167 call shallowCopyInit module=[255] ShallowCopy[277402](272165 call Data[272081] lo[272087])) eltType[272077]
    (272171 'end of statement')
    {
      unknown tmp[272402] "temp"
      (272420 'move' tmp[272402](272418 call _cond_test 1))
      WhileDo[272407]
      {
        {
          {
            unknown tmp[272246] "temp"
            (272270 'move' tmp[272246](272265 call _cond_test(272267 call <= b[272107] c[272112])))
            WhileDo[272251]
            {
              {
                unknown cmp[272186](272185 call chpl_compare(272181 call Data[272081] b[272107]) piv[272168] comparator[272098])
                (272189 'end of statement')
                if(272198 call _cond_test(272193 call > cmp[272186] 0))
                {
                  break _breakLabel[272250] _breakLabel[272250]
                }
                if(272237 call _cond_test(272205 call == cmp[272186] 0))
                {
                  if(272227 call _cond_test(272209 call != a[272101] b[272107]))
                  {
                    (272224 call shallowSwap module=[255] ShallowCopy[277402](272218 call Data[272081] a[272101])(272223 call Data[272081] b[272107]))
                    (364252 'referenced modules list' ShallowCopy[277402])
                  }
                  (272234 call += a[272101] 1)
                }
                (272243 call += b[272107] 1)
              }
              label _continueLabel[272249]
              (272260 'move' tmp[272246](272255 call _cond_test(272257 call <= b[272107] c[272112])))
              tmp[272246]
            }
            label _breakLabel[272250]
          }
          {
            unknown tmp[272338] "temp"
            (272362 'move' tmp[272338](272357 call _cond_test(272359 call >= c[272112] b[272107])))
            WhileDo[272343]
            {
              {
                unknown cmp[272287](272286 call chpl_compare(272282 call Data[272081] c[272112]) piv[272168] comparator[272098])
                (272290 'end of statement')
                if(272299 call _cond_test(272294 call < cmp[272287] 0))
                {
                  break _breakLabel[272342] _breakLabel[272342]
                }
                if(272329 call _cond_test(272306 call == cmp[272287] 0))
                {
                  (272321 call shallowSwap module=[255] ShallowCopy[277402](272315 call Data[272081] d[272117])(272320 call Data[272081] c[272112]))
                  (272326 call -= d[272117] 1)
                  (364258 'referenced modules list' ShallowCopy[277402])
                }
                (272335 call -= c[272112] 1)
              }
              label _continueLabel[272341]
              (272352 'move' tmp[272338](272347 call _cond_test(272349 call >= c[272112] b[272107])))
              tmp[272338]
            }
            label _breakLabel[272342]
          }
          if(272372 call _cond_test(272367 call > b[272107] c[272112]))
          {
            break _breakLabel[272406] _breakLabel[272406]
          }
          (272390 call shallowSwap module=[255] ShallowCopy[277402](272384 call Data[272081] b[272107])(272389 call Data[272081] c[272112]))
          (272394 call += b[272107] 1)
          (272399 call -= c[272112] 1)
          (364264 'referenced modules list' ShallowCopy[277402])
        }
        label _continueLabel[272405]
        (272413 'move' tmp[272402](272411 call _cond_test 1))
        tmp[272402]
      }
      label _breakLabel[272406]
    }
    (272433 call shallowCopy module=[255] ShallowCopy[277402](272430 call Data[272081] lo[272087]) piv[272168])
    unknown s[272435] int(64)[13]
    unknown l[272438](272448 'typeof' s[272435])
    unknown h[272442](272446 'typeof' l[272438])
    (272449 'end of statement')
    (272462 call = s[272435](272461 call min(272454 call - a[272101] lo[272087])(272459 call - b[272107] a[272101])))
    (272467 call = l[272438] lo[272087])
    (272475 call = h[272442](272473 call - b[272107] s[272435]))
    {
      unknown tmp[272513] "temp"
      (272537 'move' tmp[272513](272532 call _cond_test(272534 call > s[272435] 0)))
      WhileDo[272518]
      {
        {
          (272495 call shallowSwap module=[255] ShallowCopy[277402](272489 call Data[272081] l[272438])(272494 call Data[272081] h[272442]))
          (272500 call += l[272438] 1)
          (272505 call += h[272442] 1)
          (272510 call -= s[272435] 1)
          (364275 'referenced modules list' ShallowCopy[277402])
        }
        label _continueLabel[272516]
        (272527 'move' tmp[272513](272522 call _cond_test(272524 call > s[272435] 0)))
        tmp[272513]
      }
      label _breakLabel[272517]
    }
    unknown n[272544](272542 call + hi[272095] 1)
    (272547 'end of statement')
    (272560 call = s[272435](272559 call min(272552 call - d[272117] c[272112])(272557 call - hi[272095] d[272117])))
    (272565 call = l[272438] b[272107])
    (272573 call = h[272442](272571 call - n[272544] s[272435]))
    {
      unknown tmp[272611] "temp"
      (272635 'move' tmp[272611](272630 call _cond_test(272632 call > s[272435] 0)))
      WhileDo[272616]
      {
        {
          (272593 call shallowSwap module=[255] ShallowCopy[277402](272587 call Data[272081] l[272438])(272592 call Data[272081] h[272442]))
          (272598 call += l[272438] 1)
          (272603 call += h[272442] 1)
          (272608 call -= s[272435] 1)
          (364281 'referenced modules list' ShallowCopy[277402])
        }
        label _continueLabel[272614]
        (272625 'move' tmp[272611](272620 call _cond_test(272622 call > s[272435] 0)))
        tmp[272611]
      }
      label _breakLabel[272615]
    }
    unknown eqStart[272645](272643 call +(272640 call - b[272107] a[272101]) lo[272087])
    (272648 'end of statement')
    unknown eqEnd[272656](272654 call - hi[272095](272652 call - d[272117] c[272112]))
    (272659 'end of statement')
    (272665 return(272663 call _build_tuple eqStart[272645] eqEnd[272656]))
    (364246 'referenced modules list' ShallowCopy[277402] ShallowCopy[277402])
  }
  function order3[272681](arg Data[272678] :
  (272676 call chpl__buildArrayRuntimeType unknown Dom[272671] unknown eltType[272674]), arg lo[272684] :
  int(64)[13], arg mid[272688] :
  int(64)[13], arg hi[272692] :
  int(64)[13], arg comparator[272695]:_any[178](?)) : _unknown[51]
  {
    if(272817 call _cond_test(272711 call <(272709 call chpl_compare(272702 call Data[272678] lo[272684])(272707 call Data[272678] mid[272688]) comparator[272695]) 0))
    {
      if(272759 call _cond_test(272726 call <(272724 call chpl_compare(272717 call Data[272678] hi[272692])(272722 call Data[272678] lo[272684]) comparator[272695]) 0))
      {
        (272729 return lo[272684])
      }
      {
        if(272755 call _cond_test(272745 call <(272743 call chpl_compare(272736 call Data[272678] mid[272688])(272741 call Data[272678] hi[272692]) comparator[272695]) 0))
        {
          (272748 return mid[272688])
        }
        {
          (272752 return hi[272692])
        }
      }
    }
    {
      if(272811 call _cond_test(272778 call <(272776 call chpl_compare(272769 call Data[272678] lo[272684])(272774 call Data[272678] hi[272692]) comparator[272695]) 0))
      {
        (272781 return lo[272684])
      }
      {
        if(272807 call _cond_test(272797 call <(272795 call chpl_compare(272788 call Data[272678] hi[272692])(272793 call Data[272678] mid[272688]) comparator[272695]) 0))
        {
          (272800 return mid[272688])
        }
        {
          (272804 return hi[272692])
        }
      }
    }
  }
  { scopeless type
    int(64)[13]
  }
  function quickSort[272837](arg Data[272834] :
  (272832 call chpl__buildArrayRuntimeType unknown Dom[272827] unknown eltType[272830]), arg minlen[272840] =
  16, arg comparator[272846] :
  unknown rec[272843] =
  defaultComparator[267996]) : _unknown[51] "no return value for void"
  {
    (272854 call chpl_check_comparator comparator[272846] eltType[272830])
    if(272886 call _cond_test(272862 call !=(272858 call . Dom[272827] c"rank") 1))
    {
      (272883 call compilerError "quickSort() requires 1-D array")
    }
    if(272951 call _cond_test(272901 call &&(272891 call . Dom[272827] c"stridable")(272899 call !=(272895 call . Dom[272827] c"stride") 1)))
    {
      unknown reindexed[272923] "ref var"(272922 call(272906 call . Data[272834] c"reindex")(272919 call #(272913 call chpl_build_low_bounded_range(272910 call . Dom[272827] c"alignedLow"))(272916 call . Dom[272827] c"size")))
      (272926 'end of statement')
      (272940 call assert(272937 call ==(272933 call .(272930 call . reindexed[272923] c"_dom") c"stride") 1))
      (272947 call quickSortImpl reindexed[272923] minlen[272840] comparator[272846])
      (272949 return _void[55])
    }
    (272964 call assert(272961 call ==(272957 call . Dom[272827] c"stride") 1))
    (272971 call quickSortImpl Data[272834] minlen[272840] comparator[272846])
  }
  function quickSortImpl[272987](arg Data[272984] :
  (272982 call chpl__buildArrayRuntimeType unknown Dom[272977] unknown eltType[272980]), arg minlen[272990] =
  16, arg comparator[272996] :
  unknown rec[272993] =
  defaultComparator[267996], arg start[273005] :
  int(64)[13] =
  (273002 call . Dom[272977] c"low"), arg end[273014] :
  int(64)[13] =
  (273011 call . Dom[272977] c"high")) : _unknown[51] "no return value for void"
  {
    const lo[273026] "const" start[273005]
    const hi[273030] "const" end[273014]
    const mid[273046] "const"(273044 call + lo[273026](273042 call /(273039 call +(273036 call - hi[273030] lo[273026]) 1) 2))
    (273049 'end of statement')
    unknown piv[273051] mid[273046]
    (273054 'end of statement')
    if(273090 call _cond_test(273060 call <(273057 call - hi[273030] lo[273026]) 0))
    {
      (273074 call insertionSortMoveElts module=[255] InsertionSort[270112] Data[272984](comparator = comparator[272996]) lo[273026] hi[273030])
      (273077 return _void[55])
      (364297 'referenced modules list' InsertionSort[270112])
    }
    {
      if(273086 call _cond_test(273081 call <= hi[273030] lo[273026]))
      {
        (273083 return _void[55])
      }
    }
    if(273182 call _cond_test(273100 call <(273097 call - hi[273030] lo[273026]) 100))
    {
      (273111 call = piv[273051](273110 call order3 Data[272984] lo[273026] mid[273046] hi[273030] comparator[272996]))
    }
    {
      const medLo[273129] "const"(273128 call order3 Data[272984] lo[273026](273121 call + lo[273026] 1)(273125 call + lo[273026] 2) comparator[272996])
      (273132 'end of statement')
      const medMid[273148] "const"(273147 call order3 Data[272984](273139 call - mid[273046] 1) mid[273046](273144 call + mid[273046] 1) comparator[272996])
      (273151 'end of statement')
      const medHi[273166] "const"(273165 call order3 Data[272984](273157 call - hi[273030] 2)(273161 call - hi[273030] 1) hi[273030] comparator[272996])
      (273169 'end of statement')
      (273179 call = piv[273051](273178 call order3 Data[272984] medLo[273129] medMid[273148] medHi[273166] comparator[272996]))
    }
    unknown tmp[273199] "temp"(273198 call partition Data[272984] lo[273026] piv[273051] hi[273030] comparator[272996])
    (273206 call _check_tuple_var_decl tmp[273199] 2)
    unknown eqStart[273186](273200 call tmp[273199] 0)
    unknown eqEnd[273188](273203 call tmp[273199] 1)
    (273211 'end of statement')
    if(273292 call _cond_test(273219 call <(273214 call - hi[273030] lo[273026]) 300))
    {
      (273231 call quickSortImpl Data[272984] minlen[272990] comparator[272996] lo[273026](273229 call - eqStart[273186] 1))
      (273244 call quickSortImpl Data[272984] minlen[272990] comparator[272996](273241 call + eqEnd[273188] 1) hi[273030])
    }
    {
      Forall {
        induction variables:
          
          unknown i[273287] "index var" "insert auto destroy"
        iterated expressions:
          (273249 call chpl_build_bounded_range 1 2)
        shadow variables:
        other variables
          forall body
        {
          if(273279 call _cond_test(273253 call == i[273287] 1))
          {
            (273265 call quickSortImpl Data[272984] minlen[272990] comparator[272996] lo[273026](273263 call - eqStart[273186] 1))
          }
          {
            (273277 call quickSortImpl Data[272984] minlen[272990] comparator[272996](273274 call + eqEnd[273188] 1) hi[273030])
          }
        }
      }
    }
    (355393 'used modules list'(273022 'import' InsertionSort[270112]))
  }
  (355389 'used modules list'(353070 'use' ChapelStandard[20267])(272061 'use' Sort[267987])(272070 'use' ShallowCopy[277402]))
}