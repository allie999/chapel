AST dump for QuickSort after pass flattenClasses.
Module use list: ChapelStandard Sort ShallowCopy InsertionSort 

{
  function partition[271976](arg Data[271973] :
  (271971 call chpl__buildArrayRuntimeType unknown Dom[271966] unknown eltType[271969]), arg lo[271979] :
  int(64)[13], arg pivIdx[271983] :
  int(64)[13], arg hi[271987] :
  int(64)[13], arg comparator[271990]:_any[178](?)) : _unknown[51]
  {
    unknown a[271993] lo[271979]
    (271996 'end of statement')
    unknown b[271999] lo[271979]
    (272002 'end of statement')
    unknown c[272004] hi[271987]
    (272007 'end of statement')
    unknown d[272009] hi[271987]
    (272012 'end of statement')
    if(272034 call _cond_test(272015 call != lo[271979] pivIdx[271983]))
    {
      (272032 call shallowSwap module=[255] ShallowCopy[277293](272026 call Data[271973] lo[271979])(272031 call Data[271973] pivIdx[271983]))
      (364112 'referenced modules list' ShallowCopy[277293])
    }
    (272041 call += a[271993] 1)
    (272046 call += b[271999] 1)
    unknown piv[272060] "no auto destroy"(272059 call shallowCopyInit module=[255] ShallowCopy[277293](272057 call Data[271973] lo[271979])) eltType[271969]
    (272063 'end of statement')
    {
      unknown tmp[272294] "temp"
      (272312 'move' tmp[272294](272310 call _cond_test 1))
      WhileDo[272299]
      {
        {
          {
            unknown tmp[272138] "temp"
            (272162 'move' tmp[272138](272157 call _cond_test(272159 call <= b[271999] c[272004])))
            WhileDo[272143]
            {
              {
                unknown cmp[272078](272077 call chpl_compare(272073 call Data[271973] b[271999]) piv[272060] comparator[271990])
                (272081 'end of statement')
                if(272090 call _cond_test(272085 call > cmp[272078] 0))
                {
                  break _breakLabel[272142] _breakLabel[272142]
                }
                if(272129 call _cond_test(272097 call == cmp[272078] 0))
                {
                  if(272119 call _cond_test(272101 call != a[271993] b[271999]))
                  {
                    (272116 call shallowSwap module=[255] ShallowCopy[277293](272110 call Data[271973] a[271993])(272115 call Data[271973] b[271999]))
                    (364124 'referenced modules list' ShallowCopy[277293])
                  }
                  (272126 call += a[271993] 1)
                }
                (272135 call += b[271999] 1)
              }
              label _continueLabel[272141]
              (272152 'move' tmp[272138](272147 call _cond_test(272149 call <= b[271999] c[272004])))
              tmp[272138]
            }
            label _breakLabel[272142]
          }
          {
            unknown tmp[272230] "temp"
            (272254 'move' tmp[272230](272249 call _cond_test(272251 call >= c[272004] b[271999])))
            WhileDo[272235]
            {
              {
                unknown cmp[272179](272178 call chpl_compare(272174 call Data[271973] c[272004]) piv[272060] comparator[271990])
                (272182 'end of statement')
                if(272191 call _cond_test(272186 call < cmp[272179] 0))
                {
                  break _breakLabel[272234] _breakLabel[272234]
                }
                if(272221 call _cond_test(272198 call == cmp[272179] 0))
                {
                  (272213 call shallowSwap module=[255] ShallowCopy[277293](272207 call Data[271973] d[272009])(272212 call Data[271973] c[272004]))
                  (272218 call -= d[272009] 1)
                  (364130 'referenced modules list' ShallowCopy[277293])
                }
                (272227 call -= c[272004] 1)
              }
              label _continueLabel[272233]
              (272244 'move' tmp[272230](272239 call _cond_test(272241 call >= c[272004] b[271999])))
              tmp[272230]
            }
            label _breakLabel[272234]
          }
          if(272264 call _cond_test(272259 call > b[271999] c[272004]))
          {
            break _breakLabel[272298] _breakLabel[272298]
          }
          (272282 call shallowSwap module=[255] ShallowCopy[277293](272276 call Data[271973] b[271999])(272281 call Data[271973] c[272004]))
          (272286 call += b[271999] 1)
          (272291 call -= c[272004] 1)
          (364136 'referenced modules list' ShallowCopy[277293])
        }
        label _continueLabel[272297]
        (272305 'move' tmp[272294](272303 call _cond_test 1))
        tmp[272294]
      }
      label _breakLabel[272298]
    }
    (272325 call shallowCopy module=[255] ShallowCopy[277293](272322 call Data[271973] lo[271979]) piv[272060])
    unknown s[272327] int(64)[13]
    unknown l[272330](272340 'typeof' s[272327])
    unknown h[272334](272338 'typeof' l[272330])
    (272341 'end of statement')
    (272354 call = s[272327](272353 call min(272346 call - a[271993] lo[271979])(272351 call - b[271999] a[271993])))
    (272359 call = l[272330] lo[271979])
    (272367 call = h[272334](272365 call - b[271999] s[272327]))
    {
      unknown tmp[272405] "temp"
      (272429 'move' tmp[272405](272424 call _cond_test(272426 call > s[272327] 0)))
      WhileDo[272410]
      {
        {
          (272387 call shallowSwap module=[255] ShallowCopy[277293](272381 call Data[271973] l[272330])(272386 call Data[271973] h[272334]))
          (272392 call += l[272330] 1)
          (272397 call += h[272334] 1)
          (272402 call -= s[272327] 1)
          (364147 'referenced modules list' ShallowCopy[277293])
        }
        label _continueLabel[272408]
        (272419 'move' tmp[272405](272414 call _cond_test(272416 call > s[272327] 0)))
        tmp[272405]
      }
      label _breakLabel[272409]
    }
    unknown n[272436](272434 call + hi[271987] 1)
    (272439 'end of statement')
    (272452 call = s[272327](272451 call min(272444 call - d[272009] c[272004])(272449 call - hi[271987] d[272009])))
    (272457 call = l[272330] b[271999])
    (272465 call = h[272334](272463 call - n[272436] s[272327]))
    {
      unknown tmp[272503] "temp"
      (272527 'move' tmp[272503](272522 call _cond_test(272524 call > s[272327] 0)))
      WhileDo[272508]
      {
        {
          (272485 call shallowSwap module=[255] ShallowCopy[277293](272479 call Data[271973] l[272330])(272484 call Data[271973] h[272334]))
          (272490 call += l[272330] 1)
          (272495 call += h[272334] 1)
          (272500 call -= s[272327] 1)
          (364153 'referenced modules list' ShallowCopy[277293])
        }
        label _continueLabel[272506]
        (272517 'move' tmp[272503](272512 call _cond_test(272514 call > s[272327] 0)))
        tmp[272503]
      }
      label _breakLabel[272507]
    }
    unknown eqStart[272537](272535 call +(272532 call - b[271999] a[271993]) lo[271979])
    (272540 'end of statement')
    unknown eqEnd[272548](272546 call - hi[271987](272544 call - d[272009] c[272004]))
    (272551 'end of statement')
    (272557 return(272555 call _build_tuple eqStart[272537] eqEnd[272548]))
    (364118 'referenced modules list' ShallowCopy[277293] ShallowCopy[277293])
  }
  function order3[272573](arg Data[272570] :
  (272568 call chpl__buildArrayRuntimeType unknown Dom[272563] unknown eltType[272566]), arg lo[272576] :
  int(64)[13], arg mid[272580] :
  int(64)[13], arg hi[272584] :
  int(64)[13], arg comparator[272587]:_any[178](?)) : _unknown[51]
  {
    if(272709 call _cond_test(272603 call <(272601 call chpl_compare(272594 call Data[272570] lo[272576])(272599 call Data[272570] mid[272580]) comparator[272587]) 0))
    {
      if(272651 call _cond_test(272618 call <(272616 call chpl_compare(272609 call Data[272570] hi[272584])(272614 call Data[272570] lo[272576]) comparator[272587]) 0))
      {
        (272621 return lo[272576])
      }
      {
        if(272647 call _cond_test(272637 call <(272635 call chpl_compare(272628 call Data[272570] mid[272580])(272633 call Data[272570] hi[272584]) comparator[272587]) 0))
        {
          (272640 return mid[272580])
        }
        {
          (272644 return hi[272584])
        }
      }
    }
    {
      if(272703 call _cond_test(272670 call <(272668 call chpl_compare(272661 call Data[272570] lo[272576])(272666 call Data[272570] hi[272584]) comparator[272587]) 0))
      {
        (272673 return lo[272576])
      }
      {
        if(272699 call _cond_test(272689 call <(272687 call chpl_compare(272680 call Data[272570] hi[272584])(272685 call Data[272570] mid[272580]) comparator[272587]) 0))
        {
          (272692 return mid[272580])
        }
        {
          (272696 return hi[272584])
        }
      }
    }
  }
  { scopeless type
    int(64)[13]
  }
  function quickSort[272729](arg Data[272726] :
  (272724 call chpl__buildArrayRuntimeType unknown Dom[272719] unknown eltType[272722]), arg minlen[272732] =
  16, arg comparator[272738] :
  unknown rec[272735] =
  defaultComparator[267889]) : _unknown[51] "no return value for void"
  {
    (272746 call chpl_check_comparator comparator[272738] eltType[272722])
    if(272778 call _cond_test(272754 call !=(272750 call . Dom[272719] c"rank") 1))
    {
      (272775 call compilerError "quickSort() requires 1-D array")
    }
    if(272843 call _cond_test(272793 call &&(272783 call . Dom[272719] c"stridable")(272791 call !=(272787 call . Dom[272719] c"stride") 1)))
    {
      unknown reindexed[272815] "ref var"(272814 call(272798 call . Data[272726] c"reindex")(272811 call #(272805 call chpl_build_low_bounded_range(272802 call . Dom[272719] c"alignedLow"))(272808 call . Dom[272719] c"size")))
      (272818 'end of statement')
      (272832 call assert(272829 call ==(272825 call .(272822 call . reindexed[272815] c"_dom") c"stride") 1))
      (272839 call quickSortImpl reindexed[272815] minlen[272732] comparator[272738])
      (272841 return _void[55])
    }
    (272856 call assert(272853 call ==(272849 call . Dom[272719] c"stride") 1))
    (272863 call quickSortImpl Data[272726] minlen[272732] comparator[272738])
  }
  function quickSortImpl[272879](arg Data[272876] :
  (272874 call chpl__buildArrayRuntimeType unknown Dom[272869] unknown eltType[272872]), arg minlen[272882] =
  16, arg comparator[272888] :
  unknown rec[272885] =
  defaultComparator[267889], arg start[272897] :
  int(64)[13] =
  (272894 call . Dom[272869] c"low"), arg end[272906] :
  int(64)[13] =
  (272903 call . Dom[272869] c"high")) : _unknown[51] "no return value for void"
  {
    const lo[272918] "const" start[272897]
    const hi[272922] "const" end[272906]
    const mid[272938] "const"(272936 call + lo[272918](272934 call /(272931 call +(272928 call - hi[272922] lo[272918]) 1) 2))
    (272941 'end of statement')
    unknown piv[272943] mid[272938]
    (272946 'end of statement')
    if(272982 call _cond_test(272952 call <(272949 call - hi[272922] lo[272918]) 0))
    {
      (272966 call insertionSortMoveElts module=[255] InsertionSort[270004] Data[272876](comparator = comparator[272888]) lo[272918] hi[272922])
      (272969 return _void[55])
      (364169 'referenced modules list' InsertionSort[270004])
    }
    {
      if(272978 call _cond_test(272973 call <= hi[272922] lo[272918]))
      {
        (272975 return _void[55])
      }
    }
    if(273074 call _cond_test(272992 call <(272989 call - hi[272922] lo[272918]) 100))
    {
      (273003 call = piv[272943](273002 call order3 Data[272876] lo[272918] mid[272938] hi[272922] comparator[272888]))
    }
    {
      const medLo[273021] "const"(273020 call order3 Data[272876] lo[272918](273013 call + lo[272918] 1)(273017 call + lo[272918] 2) comparator[272888])
      (273024 'end of statement')
      const medMid[273040] "const"(273039 call order3 Data[272876](273031 call - mid[272938] 1) mid[272938](273036 call + mid[272938] 1) comparator[272888])
      (273043 'end of statement')
      const medHi[273058] "const"(273057 call order3 Data[272876](273049 call - hi[272922] 2)(273053 call - hi[272922] 1) hi[272922] comparator[272888])
      (273061 'end of statement')
      (273071 call = piv[272943](273070 call order3 Data[272876] medLo[273021] medMid[273040] medHi[273058] comparator[272888]))
    }
    unknown tmp[273091] "temp"(273090 call partition Data[272876] lo[272918] piv[272943] hi[272922] comparator[272888])
    (273098 call _check_tuple_var_decl tmp[273091] 2)
    unknown eqStart[273078](273092 call tmp[273091] 0)
    unknown eqEnd[273080](273095 call tmp[273091] 1)
    (273103 'end of statement')
    if(273183 call _cond_test(273111 call <(273106 call - hi[272922] lo[272918]) 300))
    {
      (273123 call quickSortImpl Data[272876] minlen[272882] comparator[272888] lo[272918](273121 call - eqStart[273078] 1))
      (273136 call quickSortImpl Data[272876] minlen[272882] comparator[272888](273133 call + eqEnd[273080] 1) hi[272922])
    }
    {
      Forall {
        induction variables:
          
          unknown i[273179] "index var" "insert auto destroy"
        iterated expressions:
          (273141 call chpl_build_bounded_range 1 2)
        shadow variables:
        other variables
          forall body
        {
          if(273171 call _cond_test(273145 call == i[273179] 1))
          {
            (273157 call quickSortImpl Data[272876] minlen[272882] comparator[272888] lo[272918](273155 call - eqStart[273078] 1))
          }
          {
            (273169 call quickSortImpl Data[272876] minlen[272882] comparator[272888](273166 call + eqEnd[273080] 1) hi[272922])
          }
        }
      }
    }
    (355265 'used modules list'(272914 'import' InsertionSort[270004]))
  }
  (355261 'used modules list'(352942 'use' ChapelStandard[20264])(271953 'use' Sort[267880])(271962 'use' ShallowCopy[277293]))
}