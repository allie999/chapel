AST dump for ChapelLocale after pass expandExternArrayCalls.
Module use list: 

{
  (89846 'use' LocaleModel)
  (89850 'import' HaltWrappers)
  (89853 'use' SysCTypes)
  unknown chpl_nodeID_t[89859] "no doc" "type variable"(89858 call int[13] 32)
  unknown chpl_sublocID_t[89866] "no doc" "type variable"(89865 call int[13] 32)
  { scopeless
    const c_sublocid_none[89870] "const" "extern" "no doc" chpl_sublocID_t
    (89873 'end of statement')
  }
  { scopeless
    const c_sublocid_any[89875] "const" "extern" "no doc" chpl_sublocID_t
    (89878 'end of statement')
  }
  { scopeless
    const c_sublocid_all[89880] "const" "extern" "no doc" chpl_sublocID_t
    (89883 'end of statement')
  }
  function chpl_isActualSublocID[89890](arg subloc[89887] :
  chpl_sublocID_t) : _unknown[51] "inline" "no doc"
  {
    { scopeless
      (89908 return(89906 call &&(89900 call &&(89894 call != subloc c_sublocid_none)(89898 call != subloc c_sublocid_any))(89904 call != subloc c_sublocid_all)))
    }
  }
  type localeKind[89924] def regular[89914]:localeKind[89924] def any[89916]:localeKind[89924] def nilLocale[89918]:localeKind[89924] def dummy[89920]:localeKind[89924] def default[89922]:localeKind[89924]
  {
  }
  { scopeless
    const nilLocale[89939] "const" "locale private" "no doc"(89929 'new'(89938 call locale[28](89934 call . localeKind c"nilLocale")))
    (89942 'end of statement')
  }
  { scopeless
    unknown defaultLocale[89953] "locale private" "no doc"(89943 'new'(89952 call locale[28](89948 call . localeKind c"default")))
    (89956 'end of statement')
  }
  { scopeless
    unknown dummyLocale[89967] "no doc"(89957 'new'(89966 call locale[28](89962 call . localeKind c"dummy")))
    (89970 'end of statement')
  }
  type locale[28] unknown _instance[89975](89974 'to unmanaged class from unknown'(89973 'to nilable class from type' BaseLocale)) function locale[28]._value[89981](arg _mt[90370]:_MT[238], arg this[90368]:locale[28]) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (89986 return(89984 call postfix! _instance))
  } function locale[28].chpl_forwarding_expr3__value[89992](arg _mt[90374]:_MT[238], arg this[90372]:locale[28]) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (89994 return _value)
  } function locale[28].init[90000](arg _mt[90378]:_MT[238], arg this[90376]:locale[28]) : _unknown[51] "method" "primary method"
  {
    if(90024 call _cond_test rootLocaleInitialized)
    {
      (90011 call =(90004 call . this c"_instance")(90008 call . defaultLocale c"_instance"))
    }
    {
      (90020 call =(90016 call . this c"_instance") nil[44])
    }
  } function locale[28].init[90037](arg _mt[90382]:_MT[238], arg this[90380]:locale[28], arg _instance[90034] :
  BaseLocale) : _unknown[51] "method" "primary method"
  {
    (90047 call =(90040 call . this c"_instance")(90046 call _to_unmanaged _instance))
  } function locale[28].init[90057](arg _mt[90386]:_MT[238], arg this[90384]:locale[28], param arg kind[90055]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(90152 call _cond_test(90066 call == kind(90063 call . localeKind c"regular")))
    {
      { scopeless
        (90104 call compilerError "locale.init(kind) can not be used to create " "a regular locale instance")
      }
    }
    {
      { scopeless
        if(90146 call _cond_test(90111 call == kind(90108 call . localeKind c"dummy")))
        {
          { scopeless
            (90123 call =(90114 call . this c"_instance")(90119 'new'(_chpl_manager = unmanaged[220](?))(90122 call DummyLocale)))
          }
        }
        {
          { scopeless
            if(90141 call _cond_test(90131 call == kind(90128 call . localeKind c"default")))
            {
              { scopeless
                (90138 call =(90134 call . this c"_instance") nil[44])
              }
            }
          }
        }
      }
    }
  } function locale[28].init=[90167](arg _mt[90390]:_MT[238], arg this[90388]:locale[28], arg other[90164] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    (90177 call =(90170 call . this c"_instance")(90174 call . other c"_instance"))
  } function locale[28].deinit[90185](arg _mt[90394]:_MT[238], arg this[90392]:locale[28]) : _unknown[51] "destructor" "method" "primary method"
  {
  } function locale[28].localeid[90192](arg _mt[90398]:_MT[238], arg this[90396]:locale[28]) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (90203 return(90200 call .(90195 call . this c"_value") c"localeid"))
  } function locale[28].chpl_id[90210](arg _mt[90402]:_MT[238], arg this[90400]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90223 return(90222 call(90218 call .(90213 call . this c"_value") c"chpl_id")))
  } function locale[28].chpl_localeid[90230](arg _mt[90406]:_MT[238], arg this[90404]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90243 return(90242 call(90238 call .(90233 call . this c"_value") c"chpl_localeid")))
  } function locale[28].chpl_name[90250](arg _mt[90410]:_MT[238], arg this[90408]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90263 return(90262 call(90258 call .(90253 call . this c"_value") c"chpl_name")))
  } function locale[28].defaultMemory[90270](arg _mt[90414]:_MT[238], arg this[90412]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90283 return(90282 call(90278 call .(90273 call . this c"_value") c"defaultMemory")))
  } function locale[28].largeMemory[90290](arg _mt[90418]:_MT[238], arg this[90416]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90303 return(90302 call(90298 call .(90293 call . this c"_value") c"largeMemory")))
  } function locale[28].lowLatencyMemory[90310](arg _mt[90422]:_MT[238], arg this[90420]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90323 return(90322 call(90318 call .(90313 call . this c"_value") c"lowLatencyMemory")))
  } function locale[28].highBandwidthMemory[90330](arg _mt[90426]:_MT[238], arg this[90424]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90343 return(90342 call(90338 call .(90333 call . this c"_value") c"highBandwidthMemory")))
  } function locale[28].getChildCount[90350](arg _mt[90430]:_MT[238], arg this[90428]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90361 return(90360 call(90356 call .(90353 call . this c"_value") c"getChildCount")))
  } forwarding ( )
  function here[90435]() : _unknown[51] "inline" "no parens"
  {
    (90441 return(90440 call chpl_localeID_to_locale here_id))
  }
  function _unknown[51].hostname[90449](arg _mt[90454]:_MT[238], arg this[90451] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    (90475 call writeln "in locale.hostname line 212")
    (90487 return(90484 call .(90479 call . this c"_value") c"hostname"))
  }
  function _unknown[51].name[90494](arg _mt[90499]:_MT[238], arg this[90496] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    (90510 return(90507 call .(90502 call . this c"_value") c"name"))
  }
  function _unknown[51].id[90518](arg _mt[90523]:_MT[238], arg this[90520] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    (90534 return(90531 call .(90526 call . this c"_value") c"id"))
  }
  function _unknown[51].maxTaskPar[90542](arg _mt[90547]:_MT[238], arg this[90544] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    (90556 return(90553 call .(90550 call . this c"_value") c"maxTaskPar"))
  }
  function _unknown[51].numPUs[90570](arg _mt[90581]:_MT[238], arg this[90578] :
  locale[28], arg logical[90566] :
  bool[10] =
  0, arg accessible[90574] :
  bool[10] =
  1) : _unknown[51] "inline" "method"
  {
    (90596 return(90595 call(90589 call .(90584 call . this c"_value") c"numPUs") logical accessible))
  }
  function _unknown[51].callStackSize[90604](arg _mt[90609]:_MT[238], arg this[90606] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    (90620 return(90617 call .(90612 call . this c"_value") c"callStackSize"))
  }
  function =[90631](ref arg l1[90628] :
  locale[28], const  ref arg l2[90634] :
  locale[28]) : _unknown[51] "assignop" "no doc"
  {
    (90645 call =(90638 call . l1 c"_instance")(90642 call . l2 c"_instance"))
  }
  type BaseLocale[91201] function BaseLocale[91201].init[90654](arg _mt[91205]:_MT[238], arg this[91203]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
  } function BaseLocale[91201].init[90665](arg _mt[91209]:_MT[238], arg this[91207]:BaseLocale[91201], arg parent[90662] :
  locale[28]) : _unknown[51] "method" "primary method" "no doc"
  {
    (90674 call =(90670 call . this c"parent") parent)
  } const parent[90681] "const" "no doc" nilLocale unknown nPUsLogAcc[90686] "no doc" int[13] unknown nPUsLogAll[90691] "no doc" int[13] unknown nPUsPhysAcc[90696] "no doc" int[13] unknown nPUsPhysAll[90701] "no doc" int[13] function BaseLocale[91201].numPUs[90713](arg _mt[91213]:_MT[238], arg this[91211]:BaseLocale[91201], arg logical[90709] :
  bool[10] =
  0, arg accessible[90717] :
  bool[10] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      (90737 return(90734 IfExpr  logical then
      { scopeless(90725 IfExpr  accessible then
        { scopeless
          nPUsLogAcc
        } else
        { scopeless
          nPUsLogAll
        } )
      } else
      { scopeless(90731 IfExpr  accessible then
        { scopeless
          nPUsPhysAcc
        } else
        { scopeless
          nPUsPhysAll
        } )
      } ))
    }
  } unknown maxTaskPar[90743] int[13] unknown callStackSize[90748] size_t function BaseLocale[91201].id[90754](arg _mt[91217]:_MT[238], arg this[91215]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (90780 return(90779 call chpl_nodeFromLocaleID(90777 '_wide_get_locale' this)))
    }
  }
  { scopeless type
    int[13]
  } function BaseLocale[91201].localeid[90788](arg _mt[91221]:_MT[238], arg this[91219]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    { scopeless
      (90795 return(90794 '_wide_get_locale' this))
    }
  }
  { scopeless type
    chpl_localeID_t
  } function BaseLocale[91201].hostname[90803](arg _mt[91225]:_MT[238], arg this[91223]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no parens"
  {
    function chpl_nodeName[90808]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      c_string
    }
    { scopeless
      unknown hname[90816] string[26]
      (90819 'end of statement')
    }
    { scopeless
      const tmp[90839] "const" "temp"
      (90841 'move' tmp[90839](90837 'deref'(90836 '_wide_get_locale' this)))
      {
        {
          Try!
          {
            {
              (90828 call = hname(90827 call createStringWithNewBuffer(90825 call chpl_nodeName)))
            }
          }
        }
        (90844 'on block' 0 tmp[90839])
      }
    }
    (90848 return hname)
  }
  { scopeless type
    string[26]
  } function BaseLocale[91201].writeThis[90857](arg _mt[91229]:_MT[238], arg this[91227]:BaseLocale[91201], arg f[90855]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides"
  {
    (90866 call(90862 call . HaltWrappers c"pureVirtualMethodHalt"))
  } function BaseLocale[91201].name[90873](arg _mt[91233]:_MT[238], arg this[91231]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (90881 return(90879 call _cast string[26](90877 call chpl_name)))
    }
  } unknown runningTaskCounter[90890] "no doc"(90889 call chpl__processorAtomicType int[13]) function BaseLocale[91201].runningTaskCntSet[90900](arg _mt[91237]:_MT[238], arg this[91235]:BaseLocale[91201], arg val[90897] :
  int[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (90912 call(90903 call . runningTaskCounter c"write") val(90909 call . memoryOrder c"relaxed"))
  } function BaseLocale[91201].runningTaskCntAdd[90923](arg _mt[91241]:_MT[238], arg this[91239]:BaseLocale[91201], arg val[90920] :
  int[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (90935 call(90926 call . runningTaskCounter c"add") val(90932 call . memoryOrder c"relaxed"))
  } function BaseLocale[91201].runningTaskCntSub[90946](arg _mt[91245]:_MT[238], arg this[91243]:BaseLocale[91201], arg val[90943] :
  int[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (90958 call(90949 call . runningTaskCounter c"sub") val(90955 call . memoryOrder c"relaxed"))
  } function BaseLocale[91201].runningTaskCnt[90965](arg _mt[91249]:_MT[238], arg this[91247]:BaseLocale[91201]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    { scopeless
      unknown rtc[90977](90976 call(90968 call . runningTaskCounter c"read")(90972 call . memoryOrder c"relaxed"))
      (90980 'end of statement')
    }
    (90991 return(90988 IfExpr (90984 call <= rtc 0) then
    { scopeless
      1
    } else
    { scopeless
      rtc
    } ))
  } function BaseLocale[91201].chpl_id[90997](arg _mt[91253]:_MT[238], arg this[91251]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91005 call(91001 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91011 return(91009 call - 1))
  }
  { scopeless type
    int[13]
  } function BaseLocale[91201].chpl_localeid[91018](arg _mt[91257]:_MT[238], arg this[91255]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91026 call(91022 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91039 return(91038 call chpl_buildLocaleID(91034 call -(91032 call _cast chpl_nodeID_t 1)) c_sublocid_none))
  }
  { scopeless type
    chpl_localeID_t
  } function BaseLocale[91201].chpl_name[91046](arg _mt[91261]:_MT[238], arg this[91259]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91054 call(91050 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91074 return "")
  }
  { scopeless type
    string[26]
  } function BaseLocale[91201].defaultMemory[91081](arg _mt[91265]:_MT[238], arg this[91263]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91089 call(91085 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  } function BaseLocale[91201].largeMemory[91097](arg _mt[91269]:_MT[238], arg this[91267]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91105 call(91101 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  } function BaseLocale[91201].lowLatencyMemory[91113](arg _mt[91273]:_MT[238], arg this[91271]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91121 call(91117 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  } function BaseLocale[91201].highBandwidthMemory[91129](arg _mt[91277]:_MT[238], arg this[91275]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91137 call(91133 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  } function BaseLocale[91201].getChildCount[91145](arg _mt[91281]:_MT[238], arg this[91279]:BaseLocale[91201]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91153 call(91149 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91157 return 0)
  }
  { scopeless type
    int[13]
  } function BaseLocale[91201].addChild[91168](arg _mt[91285]:_MT[238], arg this[91283]:BaseLocale[91201], arg loc[91165] :
  locale[28]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91175 call(91171 call . HaltWrappers c"pureVirtualMethodHalt"))
  } function BaseLocale[91201].getChild[91186](arg _mt[91289]:_MT[238], arg this[91287]:BaseLocale[91201], arg idx[91183] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91194 call(91190 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  }
  type DummyLocale[91438] function DummyLocale[91438].init[91297](arg _mt[91442]:_MT[238], arg this[91440]:DummyLocale[91438]) : _unknown[51] "method" "primary method"
  {
    (91305 call(91300 call . super c"init") nilLocale)
  } function DummyLocale[91438].chpl_id[91312](arg _mt[91446]:_MT[238], arg this[91444]:DummyLocale[91438]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91318 return(91316 call - 1))
  }
  { scopeless type
    int[13]
  } function DummyLocale[91438].chpl_localeid[91326](arg _mt[91450]:_MT[238], arg this[91448]:DummyLocale[91438]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91339 return(91338 call chpl_buildLocaleID(91334 call -(91332 call _cast chpl_nodeID_t 1)) c_sublocid_none))
  }
  { scopeless type
    chpl_localeID_t
  } function DummyLocale[91438].chpl_name[91347](arg _mt[91454]:_MT[238], arg this[91452]:DummyLocale[91438]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91367 return "dummy-locale")
  }
  { scopeless type
    string[26]
  } function DummyLocale[91438].getChildCount[91375](arg _mt[91458]:_MT[238], arg this[91456]:DummyLocale[91438]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91379 return 0)
  }
  { scopeless type
    int[13]
  } function DummyLocale[91438].getChild[91391](arg _mt[91462]:_MT[238], arg this[91460]:DummyLocale[91438], arg idx[91388] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91399 return(91394 'new'(91398 call locale[28] this)))
  }
  { scopeless type
    locale[28]
  } function DummyLocale[91438].addChild[91411](arg _mt[91466]:_MT[238], arg this[91464]:DummyLocale[91438], arg loc[91408] :
  locale[28]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91432 call halt "addChild on DummyLocale")
  } BaseLocale
  type AbstractLocaleModel[91499] function AbstractLocaleModel[91499].init[91478](arg _mt[91503]:_MT[238], arg this[91501]:AbstractLocaleModel[91499], arg parent_loc[91475] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    (91486 call(91481 call . super c"init") parent_loc)
  } function AbstractLocaleModel[91499].init[91493](arg _mt[91507]:_MT[238], arg this[91505]:AbstractLocaleModel[91499]) : _unknown[51] "method" "primary method"
  {
  } BaseLocale
  { scopeless
    unknown rootLocale[91511] "locale private" "no doc" nilLocale
    (91514 'end of statement')
  }
  { scopeless
    unknown replicateRootLocale[91516] "config" "no doc" "param" 1
    (91519 'end of statement')
  }
  { scopeless
    unknown origRootLocale[91521] "no doc" nilLocale
    (91524 'end of statement')
  }
  type AbstractRootLocale[92009] function AbstractRootLocale[92009].init[91530](arg _mt[92013]:_MT[238], arg this[92011]:AbstractRootLocale[92009]) : _unknown[51] "method" "primary method"
  {
  } function AbstractRootLocale[92009].init[91541](arg _mt[92017]:_MT[238], arg this[92015]:AbstractRootLocale[92009], arg parent_loc[91538] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    (91549 call(91544 call . super c"init") parent_loc)
  } function AbstractRootLocale[92009].getDefaultLocaleSpace[91556](arg _mt[92021]:_MT[238], arg this[92019]:AbstractRootLocale[92009]) const ref : _unknown[51] "method" "primary method"
  {
    (91563 call(91559 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91567 return chpl_emptyLocaleSpace)
  } function AbstractRootLocale[92009].getDefaultLocaleArray[91573](arg _mt[92025]:_MT[238], arg this[92023]:AbstractRootLocale[92009]) const ref : _unknown[51] "method" "primary method"
  {
    (91580 call(91576 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91584 return chpl_emptyLocales)
  } function AbstractRootLocale[92009].localeIDtoLocale[91594](arg _mt[92029]:_MT[238], arg this[92027]:AbstractRootLocale[92009], arg id[91591] :
  chpl_localeID_t) : _unknown[51] "method" "primary method"
  {
    (91602 call(91598 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  } function AbstractRootLocale[92009].chpl_initOnLocales[91610](arg _mt[92033]:_MT[238], arg this[92031]:AbstractRootLocale[92009]) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(91637 call _cond_test(91614 call > numLocales 1))
    {
      { scopeless
        (91635 call halt "The locales must be initialized in parallel")
      }
    }
    {
      unknown _indexOfInterest[91676] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[91677] "expr temp" "temp"
      (91686 'move' _iterator[91677](91684 call _getIterator(91661 call(91657 call .(91653 call postfix!(91651 call _cast(91650 'to borrowed class from unknown'(91649 'to nilable class from type' RootLocale))(91645 call . origRootLocale c"_instance"))) c"getDefaultLocaleSpace"))))
      Defer
      {
        {
          (91703 call _freeIterator _iterator[91677])
        }
      }
      { scopeless type
        (91692 'move' _indexOfInterest[91676](91689 call iteratorIndex _iterator[91677]))
      }
      ForLoop[91678]
      {
        unknown locIdx[91696] "index var" "insert auto destroy"
        (91698 'move' locIdx[91696] _indexOfInterest[91676])
        {
          (91663 yield locIdx)
          (91668 call = rootLocale origRootLocale)
          (91673 call = rootLocaleInitialized 1)
        }
        label _continueLabel[91681]
        _indexOfInterest[91676]
        _iterator[91677]
      }
      label _breakLabel[91682]
    }
  } function AbstractRootLocale[92009].chpl_initOnLocales[91718](arg _mt[92037]:_MT[238], arg this[92035]:AbstractRootLocale[92009], param arg tag[91715] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown b[91728] localesBarrier
      (91731 'end of statement')
    }
    { scopeless
      unknown flags[91750](91748 call chpl__buildArrayRuntimeType(91746 call chpl__ensureDomainExpr(91740 call #(91734 call chpl_build_low_bounded_range 1)(91738 call - numLocales 1)))(91745 'to unmanaged class from unknown'(91744 'to nilable class from type' localesSignal)))
      (91753 'end of statement')
    }
    {
      unknown tmpIter[91815] "expr temp" "maybe ref" "no copy" "temp"
      (91818 'move' tmpIter[91815](91759 call #(91756 call chpl_build_low_bounded_range 0) numLocales))
      unknown isRngDomArr[91986] "maybe param" "temp"
      (92001 'move' isRngDomArr[91986](91999 call ||(91988 call isBoundedRange tmpIter[91815])(91997 call ||(91991 call isDomain tmpIter[91815])(91994 call isArray tmpIter[91815]))))
      if isRngDomArr[91986]
      {
        const _coforallCount[91858] "const" "end count" "temp"
        (91923 'move' _coforallCount[91858](91920 call _endCountAlloc 0))
        unknown numTasks[91859] "temp"
        (91907 'move' numTasks[91859](91903 call . tmpIter[91815] c"size"))
        (91898 call _upEndCount _coforallCount[91858] 0 numTasks[91859])
        unknown _indexOfInterest[91865] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[91866] "expr temp" "temp"
        (91875 'move' _iterator[91866](91873 call _getIterator tmpIter[91815]))
        Defer
        {
          {
            (91891 call _freeIterator _iterator[91866])
          }
        }
        { scopeless type
          (91880 'move' _indexOfInterest[91865](91877 call iteratorIndex _iterator[91866]))
        }
        ForLoop[91867]
        {
          unknown locIdx[91884] "coforall index var" "index var" "insert auto destroy"
          (91886 'move' locIdx[91884] _indexOfInterest[91865])
          { scopeless
            { scopeless
              const tmp[91821] "const" "temp"
              (91823 'move' tmp[91821](91825 'deref'(91826 'chpl_on_locale_num'(91828 call chpl_buildLocaleID(91830 call _cast chpl_nodeID_t locIdx) c_sublocid_any))))
              {
                {
                  (91840 call chpl_defaultDistInitPrivate)
                  (91841 yield locIdx)
                  (91847 call(91844 call . b c"wait") locIdx flags)
                  (91851 call chpl_rootLocaleInitPrivate locIdx)
                  (91854 call chpl_defaultLocaleInitPrivate)
                  (91856 call warmupRuntime)
                }
                (91860 call _downEndCount _coforallCount[91858] nil[44])
                (91835 'coforall on block' 0 tmp[91821])
              }
            }
          }
          label _continueLabel[91870]
          _indexOfInterest[91865]
          _iterator[91866]
        }
        label _breakLabel[91871]
        Defer
        {
          {
            (91910 call _endCountFree _coforallCount[91858])
          }
        }
        (91915 call _waitEndCount _coforallCount[91858] 0 numTasks[91859])
      }
      {
        const _coforallCount[91927] "const" "end count" "temp"
        (91983 'move' _coforallCount[91927](91980 call _endCountAlloc 0))
        unknown _indexOfInterest[91934] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[91935] "expr temp" "temp"
        (91944 'move' _iterator[91935](91942 call _getIterator tmpIter[91815]))
        Defer
        {
          {
            (91960 call _freeIterator _iterator[91935])
          }
        }
        { scopeless type
          (91949 'move' _indexOfInterest[91934](91946 call iteratorIndex _iterator[91935]))
        }
        ForLoop[91936]
        {
          unknown locIdx[91953] "coforall index var" "index var" "insert auto destroy"
          (91955 'move' locIdx[91953] _indexOfInterest[91934])
          (91967 call _upEndCount _coforallCount[91927] 0)
          { scopeless
            { scopeless
              const tmp[91806] "const" "temp"
              (91808 'move' tmp[91806](91804 'deref'(91771 'chpl_on_locale_num'(91770 call chpl_buildLocaleID(91766 call _cast chpl_nodeID_t locIdx) c_sublocid_any))))
              {
                {
                  (91774 call chpl_defaultDistInitPrivate)
                  (91778 yield locIdx)
                  (91789 call(91783 call . b c"wait") locIdx flags)
                  (91794 call chpl_rootLocaleInitPrivate locIdx)
                  (91798 call chpl_defaultLocaleInitPrivate)
                  (91802 call warmupRuntime)
                }
                (91929 call _downEndCount _coforallCount[91927] nil[44])
                (91811 'coforall on block' 0 tmp[91806])
              }
            }
          }
          label _continueLabel[91939]
          _indexOfInterest[91934]
          _iterator[91935]
        }
        label _breakLabel[91940]
        Defer
        {
          {
            (91971 call _endCountFree _coforallCount[91927])
          }
        }
        (91976 call _waitEndCount _coforallCount[91927] 0)
      }
    }
  }
  where {
    (91725 call == tag(91722 call . iterKind c"standalone"))
  } BaseLocale
  function warmupRuntime[92042]() : _unknown[51] "private"
  {
    function chpl_task_getFixedNumThreads[92046]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (92051 call uint[115] 32)
    }
    {
      unknown tmpIter[92088] "expr temp" "maybe ref" "no copy" "temp"
      (92091 'move' tmpIter[92088](92063 call #(92058 call chpl_build_low_bounded_range 0)(92062 call chpl_task_getFixedNumThreads)))
      unknown isRngDomArr[92245] "maybe param" "temp"
      (92260 'move' isRngDomArr[92245](92258 call ||(92247 call isBoundedRange tmpIter[92088])(92256 call ||(92250 call isDomain tmpIter[92088])(92253 call isArray tmpIter[92088]))))
      if isRngDomArr[92245]
      {
        const _coforallCount[92112] "const" "end count" "temp"
        (92181 'move' _coforallCount[92112](92178 call _endCountAlloc 1))
        unknown numTasks[92113] "temp"
        (92165 'move' numTasks[92113](92161 call . tmpIter[92088] c"size"))
        (92156 call _upEndCount _coforallCount[92112] 1 numTasks[92113])
        (92153 call chpl_resetTaskSpawn numTasks[92113])
        unknown _indexOfInterest[92120] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92121] "expr temp" "temp"
        (92130 'move' _iterator[92121](92128 call _getIterator tmpIter[92088]))
        Defer
        {
          {
            (92146 call _freeIterator _iterator[92121])
          }
        }
        { scopeless type
          (92135 'move' _indexOfInterest[92120](92132 call iteratorIndex _iterator[92121]))
        }
        ForLoop[92122]
        {
          unknown i[92139] "coforall index var" "index var" "insert auto destroy"
          (92141 'move' i[92139] _indexOfInterest[92120])
          {
            {
              { scopeless
                unknown p[92095](92097 call c_malloc int[13] 1)
                (92101 'end of statement')
              }
              (92103 call =(92105 call p 0) i)
              (92109 call c_free p)
            }
            (92115 call _downEndCount _coforallCount[92112] nil[44])
            (92114 'coforall loop')
          }
          label _continueLabel[92125]
          _indexOfInterest[92120]
          _iterator[92121]
        }
        label _breakLabel[92126]
        Defer
        {
          {
            (92168 call _endCountFree _coforallCount[92112])
          }
        }
        (92173 call _waitEndCount _coforallCount[92112] 1 numTasks[92113])
      }
      {
        const _coforallCount[92185] "const" "end count" "temp"
        (92242 'move' _coforallCount[92185](92239 call _endCountAlloc 1))
        unknown _indexOfInterest[92193] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92194] "expr temp" "temp"
        (92203 'move' _iterator[92194](92201 call _getIterator tmpIter[92088]))
        Defer
        {
          {
            (92219 call _freeIterator _iterator[92194])
          }
        }
        { scopeless type
          (92208 'move' _indexOfInterest[92193](92205 call iteratorIndex _iterator[92194]))
        }
        ForLoop[92195]
        {
          unknown i[92212] "coforall index var" "index var" "insert auto destroy"
          (92214 'move' i[92212] _indexOfInterest[92193])
          (92226 call _upEndCount _coforallCount[92185] 1)
          {
            {
              { scopeless
                unknown p[92070](92069 call c_malloc int[13] 1)
                (92073 'end of statement')
              }
              (92080 call =(92078 call p 0) i)
              (92086 call c_free p)
            }
            (92188 call _downEndCount _coforallCount[92185] nil[44])
            (92187 'coforall loop')
          }
          label _continueLabel[92198]
          _indexOfInterest[92193]
          _iterator[92194]
        }
        label _breakLabel[92199]
        Defer
        {
          {
            (92230 call _endCountFree _coforallCount[92185])
          }
        }
        (92235 call _waitEndCount _coforallCount[92185] 1)
      }
    }
  }
  type localesSignal[92275] unknown s[92270](92268 call chpl__atomicType bool[10])
  type localesBarrier[92483] function localesBarrier[92483].wait[92283](arg _mt[92487]:_MT[238], arg this[92485]:localesBarrier[92483], arg locIdx[92281]:_any[178](?), arg flags[92285]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(92475 call _cond_test(92289 call == locIdx 0))
    {
      {
        unknown tmp[92367] "temp"
        (92385 'move' tmp[92367](92383 call _cond_test 1))
        WhileDo[92372]
        {
          {
            (92294 call atomicFence)
            { scopeless
              unknown count[92298] 0
              (92301 'end of statement')
            }
            {
              unknown _indexOfInterest[92315] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[92316] "expr temp" "temp"
              (92325 'move' _iterator[92316](92323 call _getIterator flags))
              Defer
              {
                {
                  (92341 call _freeIterator _iterator[92316])
                }
              }
              { scopeless type
                (92330 'move' _indexOfInterest[92315](92327 call iteratorIndex _iterator[92316]))
              }
              ForLoop[92317]
              {
                unknown f[92334] "index var" "insert auto destroy"
                (92336 'move' f[92334] _indexOfInterest[92315])
                { scopeless
                  if(92310 call _cond_test f)
                  {
                    { scopeless
                      (92307 call += count 1)
                    }
                  }
                }
                label _continueLabel[92320]
                _indexOfInterest[92315]
                _iterator[92316]
              }
              label _breakLabel[92321]
            }
            if(92358 call _cond_test(92353 call == count(92351 call - numLocales 1)))
            {
              { scopeless
                break nil[44]
              }
            }
            (92365 call chpl_task_yield)
          }
          label _continueLabel[92370]
          (92378 'move' tmp[92367](92376 call _cond_test 1))
          tmp[92367]
        }
        label _breakLabel[92371]
      }
      {
        unknown _indexOfInterest[92407] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92408] "expr temp" "temp"
        (92417 'move' _iterator[92408](92415 call _getIterator flags))
        Defer
        {
          {
            (92433 call _freeIterator _iterator[92408])
          }
        }
        { scopeless type
          (92422 'move' _indexOfInterest[92407](92419 call iteratorIndex _iterator[92408]))
        }
        ForLoop[92409]
        {
          unknown f[92426] "index var" "insert auto destroy"
          (92428 'move' f[92426] _indexOfInterest[92407])
          { scopeless
            (92405 call(92401 call .(92396 call .(92392 call postfix! f) c"s") c"testAndSet"))
          }
          label _continueLabel[92412]
          _indexOfInterest[92407]
          _iterator[92408]
        }
        label _breakLabel[92413]
      }
    }
    {
      { scopeless
        unknown f[92446](92442 'new'(_chpl_manager = unmanaged[220](?))(92445 call localesSignal))
        (92449 'end of statement')
      }
      (92456 call =(92454 call flags locIdx) f)
      (92468 call(92463 call .(92460 call . f c"s") c"waitFor") 1)
      (92472 call chpl__delete f)
    }
  }
  function chpl_init_rootLocale[92492]() : _unknown[51] "no doc"
  {
    if(92522 call _cond_test(92499 call &&(92496 call > numLocales 1) _local))
    {
      { scopeless
        (92520 call halt "Cannot run a program compiled with --local in more than 1 locale")
      }
    }
    (92538 call =(92529 call . origRootLocale c"_instance")(92534 'new'(_chpl_manager = unmanaged[220](?))(92537 call RootLocale)))
    (92558 call(92554 call .(92550 call postfix!(92548 call _cast(92547 'to borrowed class from unknown'(92546 'to nilable class from type' RootLocale))(92542 call . origRootLocale c"_instance"))) c"setup"))
  }
  function chpl_defaultLocaleInitPrivate[92564]() : _unknown[51] "inline" "no doc"
  {
    { scopeless
      const rl[92584] "const" "no auto destroy" "no copy" "ref var"(92583 call(92579 call .(92575 call postfix!(92573 call _cast(92572 'to borrowed class from unknown'(92571 'to nilable class from type' RootLocale))(92567 call . rootLocale c"_instance"))) c"getDefaultLocaleArray"))
      (92587 'end of statement')
    }
    (92600 call =(92590 call . defaultLocale c"_instance")(92597 call .(92596 call rl 0) c"_instance"))
  }
  function chpl_rootLocaleInitPrivate[92609](arg locIdx[92607]:_any[178](?)) : _unknown[51] "no doc"
  {
    (92613 call = rootLocale origRootLocale)
    if(92727 call _cond_test(92622 call && replicateRootLocale(92620 call != locIdx 0)))
    {
      { scopeless
        unknown newRootLocale[92630](92626 'new'(_chpl_manager = unmanaged[220](?))(92629 call RootLocale))
        (92633 'end of statement')
      }
      { scopeless
        const origLocales[92651] "const" "no auto destroy" "no copy" "ref var"(92650 call(92646 call .(92644 call postfix!(92642 call _cast(92641 'to borrowed class from unknown'(92640 'to nilable class from type' RootLocale))(92636 call . origRootLocale c"_instance"))) c"getDefaultLocaleArray"))
        (92654 'end of statement')
      }
      { scopeless
        unknown origRL[92664](92661 call .(92656 call . origLocales c"_value") c"theData")
        (92667 'end of statement')
      }
      { scopeless
        unknown newRL[92680](92677 call .(92674 call .(92673 call(92669 call . newRootLocale c"getDefaultLocaleArray")) c"_value") c"theData")
        (92683 'end of statement')
      }
      (92717 'chpl_comm_array_get'(92706 'array_get' newRL 0) 0(92712 'array_get' origRL 0)(92715 call _cast size_t numLocales))
      (92724 call =(92720 call . rootLocale c"_instance") newRootLocale)
    }
    if(92778 call _cond_test(92733 call != locIdx 0))
    {
      { scopeless
        const tmp[92751] "const" "no auto destroy" "ref var"(92750 call(92746 call .(92744 call postfix!(92742 call _cast(92741 'to borrowed class from unknown'(92740 'to nilable class from type' RootLocale))(92736 call . rootLocale c"_instance"))) c"getDefaultLocaleArray"))
        (92754 'end of statement')
      }
      (92776 'move' Locales tmp)
    }
    (92784 call = rootLocaleInitialized 1)
  }
  function chpl_task_getRequestedSubloc[92791]() : _unknown[51] "extern" "local args" "no fn body" "no doc" "fn synchronization free"
  {
  }
  { scopeless type
    chpl_sublocID_t
  }
  function chpl_getLocaleID[92803](ref arg localeID[92800] :
  chpl_localeID_t) : _unknown[51] "export" "insert line file info" "local args" "no doc"
  {
    (92807 call = localeID here_id)
  }
  function here_id[92815]() : _unknown[51] "inline" "no doc" "no parens"
  {
    if(92834 call _cond_test localeModelHasSublocales)
    {
      { scopeless
        (92825 return(92824 call chpl_rt_buildLocaleID chpl_nodeID(92823 call chpl_task_getRequestedSubloc)))
      }
    }
    {
      { scopeless
        (92832 return(92831 call chpl_rt_buildLocaleID chpl_nodeID c_sublocid_any))
      }
    }
  }
  function chpl_localeID_to_locale[92849](arg id[92846] :
  chpl_localeID_t) : _unknown[51] "no doc" "fn returns infinite lifetime"
  {
    if(92909 call _cond_test(92857 call !=(92853 call . rootLocale c"_instance") nil[44]))
    {
      { scopeless
        (92878 return(92877 call(92872 call .(92868 call postfix!(92866 call _cast(92865 'to borrowed class from unknown'(92864 'to nilable class from type' AbstractRootLocale))(92860 call . rootLocale c"_instance"))) c"localeIDtoLocale") id))
      }
    }
    {
      if(92901 call _cond_test(92885 call ==(92881 call . dummyLocale c"_instance") nil[44]))
      {
        (92897 call =(92888 call . dummyLocale c"_instance")(92893 'new'(_chpl_manager = unmanaged[220](?))(92896 call DummyLocale)))
      }
      (92907 return dummyLocale)
    }
  }
  { scopeless type
    locale[28]
  }
  type chpl_privateObject_t[92925] unknown obj[92920] c_void_ptr
  { scopeless
    unknown chpl_privateObjects[92932] "extern" "no doc"(92931 call c_ptr chpl_privateObject_t)
    (92935 'end of statement')
  }
  function chpl_getPrivatizedCopy[92940](arg objectType[92938]:_any[178](?), arg objectPid[92943] :
  int[13]) : _unknown[51] "inline" "no doc" "fn returns infinite lifetime"
  {
    (92960 return(92959 'cast' objectType(92956 call .(92953 call chpl_privateObjects objectPid) c"obj")))
  }
  { scopeless type
    objectType
  }
  function _unknown[51].totalThreads[92969](arg _mt[92974]:_MT[238], arg this[92971] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    { scopeless
      unknown totalThreads[92977] int[13]
      (92980 'end of statement')
    }
    function chpl_task_getNumThreads[92984]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (92989 call uint[115] 32)
    }
    { scopeless
      const tmp[93004] "const" "temp"
      (93006 'move' tmp[93004](93002 'deref'(93001 '_wide_get_locale' this)))
      {
        { scopeless
          (92998 call = totalThreads(92997 call chpl_task_getNumThreads))
        }
        (93009 'on block' 0 tmp[93004])
      }
    }
    (93013 return totalThreads)
  }
  function _unknown[51].idleThreads[93020](arg _mt[93025]:_MT[238], arg this[93022] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    { scopeless
      unknown idleThreads[93028] int[13]
      (93031 'end of statement')
    }
    function chpl_task_getNumIdleThreads[93035]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (93040 call uint[115] 32)
    }
    { scopeless
      const tmp[93055] "const" "temp"
      (93057 'move' tmp[93055](93053 'deref'(93052 '_wide_get_locale' this)))
      {
        { scopeless
          (93049 call = idleThreads(93048 call chpl_task_getNumIdleThreads))
        }
        (93060 'on block' 0 tmp[93055])
      }
    }
    (93064 return idleThreads)
  }
  function _unknown[51].queuedTasks[93071](arg _mt[93076]:_MT[238], arg this[93073] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    { scopeless
      unknown queuedTasks[93079] int[13]
      (93082 'end of statement')
    }
    function chpl_task_getNumQueuedTasks[93086]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (93091 call uint[115] 32)
    }
    { scopeless
      const tmp[93106] "const" "temp"
      (93108 'move' tmp[93106](93104 'deref'(93103 '_wide_get_locale' this)))
      {
        { scopeless
          (93100 call = queuedTasks(93099 call chpl_task_getNumQueuedTasks))
        }
        (93111 'on block' 0 tmp[93106])
      }
    }
    (93115 return queuedTasks)
  }
  function _unknown[51].runningTasks[93122](arg _mt[93127]:_MT[238], arg this[93124] :
  locale[28]) : _unknown[51] "method" "no doc" "fn synchronization free"
  {
    (93137 return(93136 call(93132 call . this c"runningTaskCnt")))
  }
  function _unknown[51].blockedTasks[93145](arg _mt[93150]:_MT[238], arg this[93147] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    { scopeless
      unknown blockedTasks[93153] int[13]
      (93156 'end of statement')
    }
    function chpl_task_getNumBlockedTasks[93160]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (93165 call int[13] 32)
    }
    { scopeless
      const tmp[93180] "const" "temp"
      (93182 'move' tmp[93180](93178 'deref'(93177 '_wide_get_locale' this)))
      {
        { scopeless
          (93174 call = blockedTasks(93173 call chpl_task_getNumBlockedTasks))
        }
        (93185 'on block' 0 tmp[93180])
      }
    }
    (93189 return blockedTasks)
  }
  function chpl_taskRunningCntInc[93195]() : _unknown[51] "export" "insert line file info" "inc running task" "local args" "no doc"
  {
    if(93207 call _cond_test rootLocaleInitialized)
    {
      (93204 call(93199 call . here c"runningTaskCntAdd") 1)
    }
  }
  function chpl_taskRunningCntDec[93216]() : _unknown[51] "export" "insert line file info" "dec running task" "local args" "no doc"
  {
    if(93228 call _cond_test rootLocaleInitialized)
    {
      (93225 call(93220 call . here c"runningTaskCntSub") 1)
    }
  }
  function chpl_taskRunningCntReset[93237]() : _unknown[51] "export" "insert line file info" "local args" "no doc"
  {
    (93247 call(93242 call . here c"runningTaskCntSet") 0)
  }
  function deinit[93254]() : _unknown[51] "destructor" "no doc"
  {
    (93261 call chpl__delete(93257 call . origRootLocale c"_instance"))
    (93270 call chpl__delete(93266 call . dummyLocale c"_instance"))
  }
}