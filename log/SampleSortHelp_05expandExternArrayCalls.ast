AST dump for SampleSortHelp after pass expandExternArrayCalls.
Module use list: 

{
  (353145 'use' ChapelStandard)
  (273988 'use' Sort)
  { scopeless
    unknown maxLogBuckets[273992] "param" 8
    (273995 'end of statement')
  }
  { scopeless
    unknown classifyUnrollFactor[273997] "param" 7
    (274000 'end of statement')
  }
  { scopeless
    const equalBucketThreshold[274002] "const" 5
    (274005 'end of statement')
  }
  { scopeless
    const maxInline[274007] "const" 16
    (274010 'end of statement')
  }
  { scopeless
    const oversampleFactor[274014] "const" 0.2
    (274017 'end of statement')
  }
  function log2int[274024](arg n[274021] :
  int[13]) : _unknown[51]
  {
    if(274033 call _cond_test(274028 call <= n 0))
    {
      { scopeless
        (274031 return 0)
      }
    }
    (274043 return(274042 call log2 n))
  }
  function computeLogBucketSize[274053](arg n[274050] :
  int[13]) : _unknown[51]
  {
    { scopeless
      const LogBuckets[274056] "const" 8
      (274059 'end of statement')
    }
    { scopeless
      const BaseCaseSize[274062] "const" 16
      (274065 'end of statement')
    }
    { scopeless
      const BaseCaseMultiplier[274067] "const" 16
      (274070 'end of statement')
    }
    { scopeless
      const SingleLevelThreshold[274075] "const"(274073 call * maxInline LogBuckets)
      (274078 'end of statement')
    }
    { scopeless
      const TwoLevelThreshold[274083] "const"(274081 call * SingleLevelThreshold LogBuckets)
      (274086 'end of statement')
    }
    { scopeless
      unknown ret[274088] 0
      (274091 'end of statement')
    }
    if(274146 call _cond_test(274094 call <= n SingleLevelThreshold))
    {
      (274107 call = ret(274106 call log2int(274103 call /(274100 call / n maxInline) 2)))
    }
    {
      { scopeless
        if(274142 call _cond_test(274113 call <= n TwoLevelThreshold))
        {
          (274132 call = ret(274130 call /(274127 call +(274125 call log2int(274122 call /(274119 call / n maxInline) 2)) 1) 2))
        }
        {
          (274138 call = ret maxLogBuckets)
        }
      }
    }
    (274157 call = ret(274156 call max 1 ret))
    (274166 call = ret(274165 call min maxLogBuckets ret))
    (274170 return ret)
  }
  function chooseSampleStep[274180](arg n[274177] :
  int[13], arg logNumBuckets[274183] :
  int[13]) : _unknown[51]
  {
    { scopeless
      unknown oversample[274197](274196 call min 1.0(274194 call * oversampleFactor(274193 call log2int n)))
      (274200 'end of statement')
    }
    { scopeless
      unknown step[274210](274209 call max 1(274207 call _cast int[13] oversample))
      (274213 'end of statement')
    }
    (274215 return step)
  }
  type SampleBucketizer[275616](?) unknown eltType[274220] "type variable" unknown storage[274231](274230 call c_array eltType(274228 call << 1 maxLogBuckets)) unknown sortedStorage[274243](274242 call c_array eltType(274240 call << 1 maxLogBuckets)) unknown logBuckets[274248] int[13] unknown numBuckets[274253] int[13] unknown equalBuckets[274258] bool[10] function SampleBucketizer[275616](?).writeThis[274266](arg _mt[275620]:_MT[238], arg this[275618]:SampleBucketizer[275616](?), arg ch[274264]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    (274286 call <~> ch "SampleBucketizer(")
    (274311 call <~>(274308 call <~> ch "\n logBuckets=") logBuckets)
    (274335 call <~>(274332 call <~> ch "\n numBuckets=") numBuckets)
    (274359 call <~>(274356 call <~> ch "\n equalBuckets=") equalBuckets)
    (274380 call <~> ch "\n storage=")
    {
      unknown _indexOfInterest[274422] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274423] "expr temp" "temp"
      (274432 'move' _iterator[274423](274430 call _getIterator(274437 call chpl_direct_range_iter 0 numBuckets 1)))
      Defer
      {
        {
          (274453 call _freeIterator _iterator[274423])
        }
      }
      { scopeless type
        (274442 'move' _indexOfInterest[274422](274439 call iteratorIndex _iterator[274423]))
      }
      ForLoop[274424]
      {
        unknown i[274446] "index var" "insert auto destroy"
        (274448 'move' i[274446] _indexOfInterest[274422])
        {
          (274418 call <~> ch(274417 'try!-expr'(274416 call(274408 call . " %xt" c"format")(274414 call storage i))))
        }
        label _continueLabel[274427]
        _indexOfInterest[274422]
        _iterator[274423]
      }
      label _breakLabel[274428]
    }
    (274478 call <~> ch "\n sortedStorage=")
    {
      unknown _indexOfInterest[274502] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274503] "expr temp" "temp"
      (274512 'move' _iterator[274503](274510 call _getIterator(274517 call chpl_direct_range_iter 0 numBuckets 1)))
      Defer
      {
        {
          (274533 call _freeIterator _iterator[274503])
        }
      }
      { scopeless type
        (274522 'move' _indexOfInterest[274502](274519 call iteratorIndex _iterator[274503]))
      }
      ForLoop[274504]
      {
        unknown i[274526] "index var" "insert auto destroy"
        (274528 'move' i[274526] _indexOfInterest[274502])
        {
          (274498 call <~> ch(274497 'try!-expr'(274496 call(274488 call . " %xt" c"format")(274494 call sortedStorage i))))
        }
        label _continueLabel[274507]
        _indexOfInterest[274502]
        _iterator[274503]
      }
      label _breakLabel[274508]
    }
    (274542 call <~> ch ")\n")
  } function SampleBucketizer[275616](?).getNumBuckets[274549](arg _mt[275624]:_MT[238], arg this[275622]:SampleBucketizer[275616](?)) : _unknown[51] "method" "primary method"
  {
    (274561 return(274559 call * numBuckets(274557 call + 1(274555 call _cast int[13] equalBuckets))))
  } function SampleBucketizer[275616](?).getBinsToRecursivelySort[274568](arg _mt[275628]:_MT[238], arg this[275626]:SampleBucketizer[275616](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown r[274575](274574 call range(stridable = 1))
      (274578 'end of statement')
    }
    if(274612 call _cond_test equalBuckets)
    {
      (274594 call = r(274592 call chpl_by(274589 call chpl_build_bounded_range 0(274587 call -(274585 call getNumBuckets) 1)) 2))
    }
    {
      (274608 call = r(274606 call chpl_build_bounded_range 0(274604 call -(274602 call getNumBuckets) 1)))
    }
    (274617 return r)
  } function SampleBucketizer[275616](?).getNextStartBit[274627](arg _mt[275632]:_MT[238], arg this[275630]:SampleBucketizer[275616](?), arg start_bit[274624] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (274630 return start_bit)
  } function SampleBucketizer[275616](?).build[274641](arg _mt[275636]:_MT[238], arg this[275634]:SampleBucketizer[275616](?), arg logBuckets[274638] :
  int[13], arg equalBuckets[274644] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (274654 call =(274650 call . this c"logBuckets") logBuckets)
    (274668 call =(274661 call . this c"numBuckets")(274666 call << 1 logBuckets))
    (274678 call =(274674 call . this c"equalBuckets") equalBuckets)
    { scopeless
      unknown numSplitters[274688](274686 call -(274682 call . this c"numBuckets") 1)
      (274691 'end of statement')
    }
    (274703 call =(274695 call sortedStorage numSplitters)(274702 call sortedStorage(274699 call - numSplitters 1)))
    (274711 call build 0 numSplitters 1)
  } function SampleBucketizer[275616](?).build[274721](arg _mt[275640]:_MT[238], arg this[275638]:SampleBucketizer[275616](?), arg left[274718] :
  int[13], arg right[274724] :
  int[13], arg pos[274728] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown mid[274741](274739 call + left(274737 call /(274734 call - right left) 2))
      (274744 'end of statement')
    }
    (274754 call =(274749 call storage pos)(274753 call sortedStorage mid))
    if(274788 call _cond_test(274762 call <(274759 call * 2 pos) numBuckets))
    {
      (274772 call build left mid(274770 call * 2 pos))
      (274786 call build mid right(274784 call +(274781 call * 2 pos) 1))
    }
  } function SampleBucketizer[275616](?).splitter[274800](arg _mt[275644]:_MT[238], arg this[275642]:SampleBucketizer[275616](?), arg i[274797] :
  int[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (274807 return(274806 call storage i))
  }
  { scopeless type
    eltType
  } function SampleBucketizer[275616](?).sortedSplitter[274819](arg _mt[275648]:_MT[238], arg this[275646]:SampleBucketizer[275616](?), arg i[274816] :
  int[13]) const ref : _unknown[51] "inline" "method" "primary method"
  {
    (274826 return(274825 call sortedStorage i))
  }
  { scopeless type
    eltType
  } function SampleBucketizer[275616](?).bucketForRecord[274836](arg _mt[275652]:_MT[238], arg this[275650]:SampleBucketizer[275616](?), arg a[274834]:_any[178](?), arg criterion[274838]:_any[178](?), arg startbit[274840]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown bk[274843] 1
      (274846 'end of statement')
    }
    {
      unknown _indexOfInterest[274881] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274882] "expr temp" "temp"
      (274891 'move' _iterator[274882](274889 call _getIterator(274898 call chpl_direct_counted_range_iter 0 logBuckets)))
      Defer
      {
        {
          (274914 call _freeIterator _iterator[274882])
        }
      }
      { scopeless type
        (274903 'move' _indexOfInterest[274881](274900 call iteratorIndex _iterator[274882]))
      }
      ForLoop[274883]
      {
        unknown lg[274907] "index var" "insert auto destroy"
        (274909 'move' lg[274907] _indexOfInterest[274881])
        {
          (274877 call = bk(274875 call +(274858 call * 2 bk)(274873 call _cast int[13](274870 call <(274868 call chpl_compare(274864 call splitter bk) a criterion) 0))))
        }
        label _continueLabel[274886]
        _indexOfInterest[274881]
        _iterator[274882]
      }
      label _breakLabel[274887]
    }
    if(274951 call _cond_test equalBuckets)
    {
      (274947 call = bk(274945 call +(274925 call * 2 bk)(274943 call _cast int[13](274940 call ==(274938 call chpl_compare a(274936 call sortedSplitter(274933 call - bk numBuckets)) criterion) 0))))
    }
    (274967 return(274965 call - bk(274962 IfExpr  equalBuckets then
    { scopeless
      (274959 call * 2 numBuckets)
    } else
    { scopeless
      numBuckets
    } )))
  } function SampleBucketizer[275616](?).classify[274975](arg _mt[275656]:_MT[238], arg this[275654]:SampleBucketizer[275616](?), arg A[274973]:_any[178](?), arg start_n[274977]:_any[178](?), arg end_n[274979]:_any[178](?), arg criterion[274981]:_any[178](?), arg startbit[274983]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      const paramEqualBuckets[274986] "const" equalBuckets
      (274989 'end of statement')
    }
    { scopeless
      const paramLogBuckets[274992] "const" logBuckets
      (274995 'end of statement')
    }
    { scopeless
      const paramNumBuckets[275006] "const"(275004 call << 1(275002 call + paramLogBuckets(275000 call _cast int[13] paramEqualBuckets)))
      (275009 'end of statement')
    }
    { scopeless
      unknown b[275015](275014 call c_array int[13] classifyUnrollFactor)
      (275018 'end of statement')
    }
    { scopeless
      unknown cur[275020] start_n
      (275023 'end of statement')
    }
    {
      unknown tmp[275406] "temp"
      (275442 'move' tmp[275406](275431 call _cond_test(275433 call <= cur(275436 call - end_n(275439 call - classifyUnrollFactor 1)))))
      WhileDo[275411]
      {
        {
          {
            unknown _indexOfInterest[275051] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[275052] "expr temp" "temp"
            (275061 'move' _iterator[275052](275059 call _getIterator(275069 call chpl_direct_range_iter 0(275066 call - classifyUnrollFactor 1) 1)))
            Defer
            {
              {
                (275085 call _freeIterator _iterator[275052])
              }
            }
            { scopeless type
              (275074 'move' _indexOfInterest[275051](275071 call iteratorIndex _iterator[275052]))
            }
            ForLoop[275053]
            {
              unknown i[275078] "index var" "insert auto destroy"
              (275080 'move' i[275078] _indexOfInterest[275051])
              {
                (275047 call =(275045 call b i) 1)
              }
              label _continueLabel[275056]
              _indexOfInterest[275051]
              _iterator[275052]
            }
            label _breakLabel[275057]
          }
          {
            unknown _indexOfInterest[275192] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[275193] "expr temp" "temp"
            (275202 'move' _iterator[275193](275200 call _getIterator(275210 call chpl_direct_range_iter 0(275207 call - paramLogBuckets 1) 1)))
            Defer
            {
              {
                (275226 call _freeIterator _iterator[275193])
              }
            }
            { scopeless type
              (275215 'move' _indexOfInterest[275192](275212 call iteratorIndex _iterator[275193]))
            }
            ForLoop[275194]
            {
              unknown lg[275219] "index var" "insert auto destroy"
              (275221 'move' lg[275219] _indexOfInterest[275192])
              {
                {
                  unknown _indexOfInterest[275150] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[275151] "expr temp" "temp"
                  (275160 'move' _iterator[275151](275158 call _getIterator(275168 call chpl_direct_range_iter 0(275165 call - classifyUnrollFactor 1) 1)))
                  Defer
                  {
                    {
                      (275184 call _freeIterator _iterator[275151])
                    }
                  }
                  { scopeless type
                    (275173 'move' _indexOfInterest[275150](275170 call iteratorIndex _iterator[275151]))
                  }
                  ForLoop[275152]
                  {
                    unknown i[275177] "index var" "insert auto destroy"
                    (275179 'move' i[275177] _indexOfInterest[275150])
                    {
                      (275146 call =(275112 call b i)(275144 call +(275118 call * 2(275117 call b i))(275142 call _cast int[13](275139 call <(275137 call chpl_compare(275127 call splitter(275125 call b i))(275135 call A(275132 call + cur i)) criterion) 0))))
                    }
                    label _continueLabel[275155]
                    _indexOfInterest[275150]
                    _iterator[275151]
                  }
                  label _breakLabel[275156]
                }
              }
              label _continueLabel[275197]
              _indexOfInterest[275192]
              _iterator[275193]
            }
            label _breakLabel[275198]
          }
          if(275331 call _cond_test paramEqualBuckets)
          {
            {
              unknown _indexOfInterest[275289] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[275290] "expr temp" "temp"
              (275299 'move' _iterator[275290](275297 call _getIterator(275307 call chpl_direct_range_iter 0(275304 call - classifyUnrollFactor 1) 1)))
              Defer
              {
                {
                  (275323 call _freeIterator _iterator[275290])
                }
              }
              { scopeless type
                (275312 'move' _indexOfInterest[275289](275309 call iteratorIndex _iterator[275290]))
              }
              ForLoop[275291]
              {
                unknown i[275316] "index var" "insert auto destroy"
                (275318 'move' i[275316] _indexOfInterest[275289])
                {
                  (275285 call =(275245 call b i)(275283 call +(275251 call * 2(275250 call b i))(275281 call _cast int[13](275278 call ==(275276 call chpl_compare(275260 call A(275257 call + cur i))(275274 call sortedSplitter(275271 call -(275266 call b i)(275269 call / paramNumBuckets 2))) criterion) 0))))
                }
                label _continueLabel[275294]
                _indexOfInterest[275289]
                _iterator[275290]
              }
              label _breakLabel[275295]
            }
          }
          {
            unknown _indexOfInterest[275360] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[275361] "expr temp" "temp"
            (275370 'move' _iterator[275361](275368 call _getIterator(275378 call chpl_direct_range_iter 0(275375 call - classifyUnrollFactor 1) 1)))
            Defer
            {
              {
                (275394 call _freeIterator _iterator[275361])
              }
            }
            { scopeless type
              (275383 'move' _indexOfInterest[275360](275380 call iteratorIndex _iterator[275361]))
            }
            ForLoop[275362]
            {
              unknown i[275387] "index var" "insert auto destroy"
              (275389 'move' i[275387] _indexOfInterest[275360])
              {
                (275357 yield(275355 call _build_tuple(275345 call + cur i)(275352 call -(275350 call b i) paramNumBuckets)))
              }
              label _continueLabel[275365]
              _indexOfInterest[275360]
              _iterator[275361]
            }
            label _breakLabel[275366]
          }
          (275403 call += cur classifyUnrollFactor)
        }
        label _continueLabel[275409]
        (275426 'move' tmp[275406](275415 call _cond_test(275417 call <= cur(275420 call - end_n(275423 call - classifyUnrollFactor 1)))))
        tmp[275406]
      }
      label _breakLabel[275410]
    }
    {
      unknown tmp[275586] "temp"
      (275610 'move' tmp[275586](275605 call _cond_test(275607 call <= cur end_n)))
      WhileDo[275591]
      {
        {
          { scopeless
            unknown bk[275450] 1
            (275453 'end of statement')
          }
          {
            unknown _indexOfInterest[275491] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[275492] "expr temp" "temp"
            (275501 'move' _iterator[275492](275499 call _getIterator(275508 call chpl_direct_counted_range_iter 0 paramLogBuckets)))
            Defer
            {
              {
                (275524 call _freeIterator _iterator[275492])
              }
            }
            { scopeless type
              (275513 'move' _indexOfInterest[275491](275510 call iteratorIndex _iterator[275492]))
            }
            ForLoop[275493]
            {
              unknown lg[275517] "index var" "insert auto destroy"
              (275519 'move' lg[275517] _indexOfInterest[275491])
              {
                (275487 call = bk(275485 call +(275465 call * 2 bk)(275483 call _cast int[13](275480 call <(275478 call chpl_compare(275471 call splitter bk)(275476 call A cur) criterion) 0))))
              }
              label _continueLabel[275496]
              _indexOfInterest[275491]
              _iterator[275492]
            }
            label _breakLabel[275497]
          }
          if(275567 call _cond_test paramEqualBuckets)
          {
            (275563 call = bk(275561 call +(275535 call * 2 bk)(275559 call _cast int[13](275556 call ==(275554 call chpl_compare(275541 call A cur)(275552 call sortedSplitter(275549 call - bk(275547 call / paramNumBuckets 2))) criterion) 0))))
          }
          (275579 yield(275577 call _build_tuple cur(275574 call - bk paramNumBuckets)))
          (275583 call += cur 1)
        }
        label _continueLabel[275589]
        (275600 'move' tmp[275586](275595 call _cond_test(275597 call <= cur end_n)))
        tmp[275586]
      }
      label _breakLabel[275590]
    }
  }
  function createSplittersFromSample[275663](arg A[275661]:_any[178](?), ref arg splitterBucketizer[275666] :
  SampleBucketizer, arg criterion[275669]:_any[178](?), arg start_n[275672] :
  int[13], arg sampleSize[275676] :
  int[13], arg sampleStep[275680] :
  int[13], in arg numBuckets[275684] :
  int[13], arg forceEqualBuckets[275689] :
  ?[260] =
  none[57]) : _unknown[51]
  {
    { scopeless
      unknown splitters[275699] "ref var"(275696 call . splitterBucketizer c"sortedStorage")
      (275702 'end of statement')
    }
    { scopeless
      unknown arrayIndex[275711](275709 call -(275706 call + start_n sampleStep) 1)
      (275714 'end of statement')
    }
    { scopeless
      unknown splitterIndex[275716] 0
      (275719 'end of statement')
    }
    (275728 call =(275723 call splitters splitterIndex)(275727 call A arrayIndex))
    {
      unknown _indexOfInterest[275781] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[275782] "expr temp" "temp"
      (275791 'move' _iterator[275782](275789 call _getIterator(275799 call chpl_direct_range_iter 2(275796 call - numBuckets 1) 1)))
      Defer
      {
        {
          (275815 call _freeIterator _iterator[275782])
        }
      }
      { scopeless type
        (275804 'move' _indexOfInterest[275781](275801 call iteratorIndex _iterator[275782]))
      }
      ForLoop[275783]
      {
        unknown i[275808] "index var" "insert auto destroy"
        (275810 'move' i[275808] _indexOfInterest[275781])
        {
          (275741 call += arrayIndex sampleStep)
          if(275777 call _cond_test(275758 call !=(275756 call chpl_compare(275749 call splitters splitterIndex)(275754 call A arrayIndex) criterion) 0))
          {
            (275762 call += splitterIndex 1)
            (275774 call =(275769 call splitters splitterIndex)(275773 call A arrayIndex))
          }
        }
        label _continueLabel[275786]
        _indexOfInterest[275781]
        _iterator[275782]
      }
      label _breakLabel[275787]
    }
    { scopeless
      unknown uniqueSplitters[275826](275824 call + 1 splitterIndex)
      (275829 'end of statement')
    }
    { scopeless
      unknown myUseEqualBuckets[275840](275838 call >=(275835 call -(275832 call - numBuckets 1) uniqueSplitters) equalBucketThreshold)
      (275843 'end of statement')
    }
    if(275863 call _cond_test(275855 call <(275849 call + 1(275847 call * 2 uniqueSplitters))(275853 call << 1 maxLogBuckets)))
    {
      (275859 call = myUseEqualBuckets 1)
    }
    if(275877 call _cond_test(275870 call !=(275868 'typeof' forceEqualBuckets) nothing[7]))
    {
      { scopeless
        (275874 call = myUseEqualBuckets forceEqualBuckets)
      }
    }
    { scopeless
      unknown logBuckets[275889](275887 call +(275885 call log2 uniqueSplitters) 1)
      (275892 'end of statement')
    }
    (275898 call = numBuckets(275896 call << 1 logBuckets))
    {
      unknown _indexOfInterest[275929] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[275930] "expr temp" "temp"
      (275939 'move' _iterator[275930](275937 call _getIterator(275950 call chpl_direct_range_iter(275943 call + uniqueSplitters 1)(275947 call - numBuckets 1) 1)))
      Defer
      {
        {
          (275966 call _freeIterator _iterator[275930])
        }
      }
      { scopeless type
        (275955 'move' _indexOfInterest[275929](275952 call iteratorIndex _iterator[275930]))
      }
      ForLoop[275931]
      {
        unknown i[275959] "index var" "insert auto destroy"
        (275961 'move' i[275959] _indexOfInterest[275929])
        {
          (275914 call += splitterIndex 1)
          (275926 call =(275921 call splitters splitterIndex)(275925 call A arrayIndex))
        }
        label _continueLabel[275934]
        _indexOfInterest[275929]
        _iterator[275930]
      }
      label _breakLabel[275935]
    }
    (275982 call(275976 call . splitterBucketizer c"build") logBuckets myUseEqualBuckets)
  }
  function putRandomSampleAtArrayStart[275992](in arg start_n[275989] :
  int[13], arg end_n[275995] :
  int[13], arg A[276001] :
  (275998 call chpl__buildArrayRuntimeType nil[44]), in arg numSamples[276005] :
  int[13], arg seed[276009] =
  1) : _unknown[51]
  {
    (276013 'use' Random)
    (276020 'import'(276017 call . Sort c"ShallowCopy"))
    { scopeless
      unknown Tmp[276035](276033 call chpl__buildArrayRuntimeType(276031 call chpl__ensureDomainExpr(276024 call chpl_build_bounded_range 1 1))(276028 call . A c"eltType"))
      (276038 'end of statement')
    }
    { scopeless
      unknown randNums[276048](276047 call createRandomStream(seed = seed)(eltType = int[13])(parSafe = 0))
      (276051 'end of statement')
    }
    {
      unknown tmp[276133] "temp"
      (276157 'move' tmp[276133](276152 call _cond_test(276154 call > numSamples 0)))
      WhileDo[276138]
      {
        {
          (276058 call -= numSamples 1)
          { scopeless
            unknown offset[276072](276071 call(276065 call . randNums c"getNext") start_n end_n)
            (276075 'end of statement')
          }
          if(276124 call _cond_test(276078 call != offset start_n))
          {
            { scopeless
              unknown tmp[276084](276081 call . A c"eltType")
              (276087 'end of statement')
            }
            (276099 call(276090 call . ShallowCopy c"shallowCopy") Tmp 1 A start_n 1)
            (276110 call(276102 call . ShallowCopy c"shallowCopy") A start_n offset 1)
            (276122 call(276113 call . ShallowCopy c"shallowCopy") A offset Tmp 1 1)
          }
          (276130 call += start_n 1)
        }
        label _continueLabel[276136]
        (276147 'move' tmp[276133](276142 call _cond_test(276144 call > numSamples 0)))
        tmp[276133]
      }
      label _breakLabel[276137]
    }
  }
}