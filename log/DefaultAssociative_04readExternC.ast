AST dump for DefaultAssociative after pass readExternC.
Module use list: 

{
  (156241 'use' DSIUtil)
  { scopeless
    (156248 'use' ChapelDistribution)
    (156250 'use' ChapelRange)
    (156251 'use' SysBasic)
    (156252 'use' ChapelArray)
  }
  { scopeless
    (156256 'use' ChapelBase)
    (156258 'use' ChapelLocks)
    (156259 'use' IO)
  }
  { scopeless
    (156262 'use' ChapelHashing)
    (156264 'use' ChapelHashtable)
  }
  (156266 'use' SysError)
  { scopeless
    unknown debugDefaultAssoc[156269] "config" "param" 0
    (156272 'end of statement')
  }
  { scopeless
    unknown debugAssocDataPar[156274] "config" "param" 0
    (156277 'end of statement')
  }
  type DefaultAssociativeDomRehashHelper[156476] unknown dom[156283](156282 'to unmanaged class from unknown' DefaultAssociativeDom) function DefaultAssociativeDomRehashHelper[156476].startRehash[156293](arg _mt[156480]:_MT[238], arg this[156478]:DefaultAssociativeDomRehashHelper[156476], arg newSize[156290] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    {
      unknown _indexOfInterest[156311] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156312] "expr temp" "temp"
      (156321 'move' _iterator[156312](156319 call _getIterator(156297 call . dom c"_arrs")))
      Defer
      {
        {
          (156338 call _freeIterator _iterator[156312])
        }
      }
      { scopeless type
        (156327 'move' _indexOfInterest[156311](156324 call iteratorIndex _iterator[156312]))
      }
      ForLoop[156313]
      {
        unknown arr[156331] "index var" "insert auto destroy"
        (156333 'move' arr[156331] _indexOfInterest[156311])
        {
          (156308 call(156303 call . arr c"_startRehash") newSize)
        }
        label _continueLabel[156316]
        _indexOfInterest[156311]
        _iterator[156312]
      }
      label _breakLabel[156317]
    }
  } function DefaultAssociativeDomRehashHelper[156476].moveElementDuringRehash[156354](arg _mt[156484]:_MT[238], arg this[156482]:DefaultAssociativeDomRehashHelper[156476], arg oldSlot[156351] :
  int[13], arg newSlot[156357] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    {
      unknown _indexOfInterest[156377] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156378] "expr temp" "temp"
      (156387 'move' _iterator[156378](156385 call _getIterator(156362 call . dom c"_arrs")))
      Defer
      {
        {
          (156404 call _freeIterator _iterator[156378])
        }
      }
      { scopeless type
        (156393 'move' _indexOfInterest[156377](156390 call iteratorIndex _iterator[156378]))
      }
      ForLoop[156379]
      {
        unknown arr[156397] "index var" "insert auto destroy"
        (156399 'move' arr[156397] _indexOfInterest[156377])
        {
          (156374 call(156368 call . arr c"_moveElementDuringRehash") oldSlot newSlot)
        }
        label _continueLabel[156382]
        _indexOfInterest[156377]
        _iterator[156378]
      }
      label _breakLabel[156383]
    }
  } function DefaultAssociativeDomRehashHelper[156476].finishRehash[156420](arg _mt[156488]:_MT[238], arg this[156486]:DefaultAssociativeDomRehashHelper[156476], arg oldSize[156417] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    {
      unknown _indexOfInterest[156438] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156439] "expr temp" "temp"
      (156448 'move' _iterator[156439](156446 call _getIterator(156424 call . dom c"_arrs")))
      Defer
      {
        {
          (156465 call _freeIterator _iterator[156439])
        }
      }
      { scopeless type
        (156454 'move' _indexOfInterest[156438](156451 call iteratorIndex _iterator[156439]))
      }
      ForLoop[156440]
      {
        unknown arr[156458] "index var" "insert auto destroy"
        (156460 'move' arr[156458] _indexOfInterest[156438])
        {
          (156435 call(156430 call . arr c"_finishRehash") oldSize)
        }
        label _continueLabel[156443]
        _indexOfInterest[156438]
        _iterator[156439]
      }
      label _breakLabel[156444]
    }
  } chpl__rehashHelpers
  type DefaultAssociativeDom[158860](?) unknown idxType[156494] "type variable" unknown parSafe[156498] "param" bool[10] unknown dist[156504](156503 'to unmanaged class from unknown' DefaultDist) unknown numEntries[156512](156511 call chpl__processorAtomicType int[13]) unknown tableLock[156522](156519 IfExpr  parSafe then
  { scopeless
    chpl_LocalSpinlock
  } else
  { scopeless
    nothing[7]
  } ) unknown table[156531](156530 call chpl__hashtable idxType nothing[7]) function DefaultAssociativeDom[158860](?).lockTable[156537](arg _mt[158864]:_MT[238], arg this[158862]:DefaultAssociativeDom[158860](?)) : _unknown[51] "inline" "method" "primary method"
  {
    if(156547 call _cond_test parSafe)
    {
      { scopeless
        (156545 call(156541 call . tableLock c"lock"))
      }
    }
  } function DefaultAssociativeDom[158860](?).unlockTable[156557](arg _mt[158868]:_MT[238], arg this[158866]:DefaultAssociativeDom[158860](?)) : _unknown[51] "inline" "method" "primary method"
  {
    if(156567 call _cond_test parSafe)
    {
      { scopeless
        (156565 call(156561 call . tableLock c"unlock"))
      }
    }
  } function DefaultAssociativeDom[158860](?).linksDistribution[156577](arg _mt[158872]:_MT[238], arg this[158870]:DefaultAssociativeDom[158860](?)) param : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (156580 return 0)
    }
  } function DefaultAssociativeDom[158860](?).dsiLinksDistribution[156587](arg _mt[158876]:_MT[238], arg this[158874]:DefaultAssociativeDom[158860](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (156590 return 0)
    }
  } function DefaultAssociativeDom[158860](?).init[156599](arg _mt[158880]:_MT[238], arg this[158878]:DefaultAssociativeDom[158860](?), arg idxType[156597]:_any[178](?), param arg parSafe[156602] :
  bool[10], arg dist[156607] :
  (156606 'to unmanaged class from unknown' DefaultDist)) : _unknown[51] "method" "primary method"
  {
    if(156659 call _cond_test(156614 call !(156613 call chpl__validDefaultAssocDomIdxType idxType)))
    {
      { scopeless
        (156657 call compilerError "Default Associative domains with idxType="(156637 call _cast string[26] idxType) " are not allowed" 2)
      }
    }
    (156670 call =(156666 call . this c"idxType") idxType)
    (156678 call =(156674 call . this c"parSafe") parSafe)
    (156686 call =(156682 call . this c"dist") dist)
    (156701 call =(156692 call . this c"table")(156695 'new'(156700 call chpl__hashtable idxType nothing[7])))
    (156709 call(156705 call . this c"complete"))
    (156729 call =(156717 call .(156712 call . this c"table") c"rehashHelpers")(156720 'new'(156728 call DefaultAssociativeDomRehashHelper(156725 call _cast(156724 'to unmanaged class from unknown' class[232](?)) this))))
  } function DefaultAssociativeDom[158860](?).deinit[156736](arg _mt[158884]:_MT[238], arg this[158882]:DefaultAssociativeDom[158860](?)) : _unknown[51] "destructor" "method" "primary method"
  {
  } function DefaultAssociativeDom[158860](?).dsiBuildArray[156745](arg _mt[158888]:_MT[238], arg this[158886]:DefaultAssociativeDom[158860](?), arg eltType[156743]:_any[178](?), param arg initElts[156748] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (156770 return(156753 'new'(_chpl_manager = unmanaged[220](?))(156769 call DefaultAssociativeArr(eltType = eltType)(idxType = idxType)(parSafeDom = parSafe)(dom =(156765 call _to_unmanaged this))(initElts = initElts))))
  } function DefaultAssociativeDom[158860](?).dsiSerialReadWrite[156779](arg _mt[158892]:_MT[238], arg this[158890]:DefaultAssociativeDom[158860](?), arg f[156777]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    { scopeless
      unknown binary[156787](156786 call(156782 call . f c"binary"))
      (156790 'end of statement')
    }
    if(157128 call _cond_test(156793 call . f c"writing"))
    {
      if(156936 call _cond_test binary)
      {
        { scopeless
          unknown numIndices[156799] dsiNumIndices int[13]
          (156802 'end of statement')
        }
        (156806 call <~> f numIndices)
        {
          unknown _indexOfInterest[156817] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156818] "expr temp" "temp"
          (156827 'move' _iterator[156818](156825 call _getIterator this))
          Defer
          {
            {
              (156843 call _freeIterator _iterator[156818])
            }
          }
          { scopeless type
            (156832 'move' _indexOfInterest[156817](156829 call iteratorIndex _iterator[156818]))
          }
          ForLoop[156819]
          {
            unknown idx[156836] "index var" "insert auto destroy"
            (156838 'move' idx[156836] _indexOfInterest[156817])
            {
              (156813 call <~> f idx)
            }
            label _continueLabel[156822]
            _indexOfInterest[156817]
            _iterator[156818]
          }
          label _breakLabel[156823]
        }
      }
      {
        { scopeless
          unknown first[156851] 1
          (156854 'end of statement')
        }
        (156862 call <~> f(156857 'new'(156861 call ioLiteral "{")))
        {
          unknown _indexOfInterest[156894] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156895] "expr temp" "temp"
          (156904 'move' _iterator[156895](156902 call _getIterator this))
          Defer
          {
            {
              (156920 call _freeIterator _iterator[156895])
            }
          }
          { scopeless type
            (156909 'move' _indexOfInterest[156894](156906 call iteratorIndex _iterator[156895]))
          }
          ForLoop[156896]
          {
            unknown idx[156913] "index var" "insert auto destroy"
            (156915 'move' idx[156913] _indexOfInterest[156894])
            {
              if(156882 call _cond_test first)
              {
                { scopeless
                  (156870 call = first 0)
                }
              }
              {
                { scopeless
                  (156879 call <~> f(156874 'new'(156878 call ioLiteral ", ")))
                }
              }
              (156891 call <~> f idx)
            }
            label _continueLabel[156899]
            _indexOfInterest[156894]
            _iterator[156895]
          }
          label _breakLabel[156900]
        }
        (156933 call <~> f(156928 'new'(156932 call ioLiteral "}")))
      }
    }
    {
      (156943 call dsiClear)
      if(157124 call _cond_test binary)
      {
        { scopeless
          unknown numIndices[156948] int[13]
          (156951 'end of statement')
        }
        (156955 call <~> f numIndices)
        {
          unknown _indexOfInterest[156979] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156980] "expr temp" "temp"
          (156989 'move' _iterator[156980](156987 call _getIterator(156994 call chpl_direct_range_iter 1 numIndices 1)))
          Defer
          {
            {
              (157010 call _freeIterator _iterator[156980])
            }
          }
          { scopeless type
            (156999 'move' _indexOfInterest[156979](156996 call iteratorIndex _iterator[156980]))
          }
          ForLoop[156981]
          {
            unknown i[157003] "index var" "insert auto destroy"
            (157005 'move' i[157003] _indexOfInterest[156979])
            {
              { scopeless
                unknown idx[156964] idxType
                (156967 'end of statement')
              }
              (156971 call <~> f idx)
              (156977 call dsiAdd idx)
            }
            label _continueLabel[156984]
            _indexOfInterest[156979]
            _iterator[156980]
          }
          label _breakLabel[156985]
        }
      }
      {
        (157023 call <~> f(157018 'new'(157022 call ioLiteral "{")))
        { scopeless
          unknown first[157028] 1
          (157031 'end of statement')
        }
        { scopeless
          unknown comma[157038](157032 'new'(157037 call ioLiteral "," 1))
          (157041 'end of statement')
        }
        { scopeless
          unknown end[157047](157042 'new'(157046 call ioLiteral "}"))
          (157050 'end of statement')
        }
        {
          unknown tmp[157103] "temp"
          (157121 'move' tmp[157103](157119 call _cond_test 1))
          WhileDo[157108]
          {
            {
              Try
              {
                {
                  (157054 call <~> f end)
                  break nil[44]
                }
              }
              Catch err : BadFormatError
              {
              }
              if(157078 call _cond_test(157071 call ! first))
              {
                { scopeless
                  (157075 call <~> f comma)
                }
              }
              (157085 call = first 0)
              { scopeless
                unknown idx[157089] idxType
                (157092 'end of statement')
              }
              (157095 call <~> f idx)
              (157101 call dsiAdd idx)
            }
            label _continueLabel[157106]
            (157114 'move' tmp[157103](157112 call _cond_test 1))
            tmp[157103]
          }
          label _breakLabel[157107]
        }
      }
    }
  } function DefaultAssociativeDom[158860](?).dsiSerialWrite[157138](arg _mt[158896]:_MT[238], arg this[158894]:DefaultAssociativeDom[158860](?), arg f[157136]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    (157146 call(157141 call . this c"dsiSerialReadWrite") f)
  } function DefaultAssociativeDom[158860](?).dsiSerialRead[157155](arg _mt[158900]:_MT[238], arg this[158898]:DefaultAssociativeDom[158860](?), arg f[157153]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    (157163 call(157158 call . this c"dsiSerialReadWrite") f)
  } function DefaultAssociativeDom[158860](?).dsiAssignDomain[157174](arg _mt[158904]:_MT[238], arg this[158902]:DefaultAssociativeDom[158860](?), arg rhs[157171] :
  _domain, arg lhsPrivate[157177] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (157184 call chpl_assignDomainWithIndsIterSafeForRemoving this rhs)
  } function DefaultAssociativeDom[158860](?).dsiNumIndices[157191](arg _mt[158908]:_MT[238], arg this[158906]:DefaultAssociativeDom[158860](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (157199 return(157198 call(157194 call . numEntries c"read")))
  } function DefaultAssociativeDom[158860](?).dsiIndsIterSafeForRemoving[157206](arg _mt[158912]:_MT[238], arg this[158910]:DefaultAssociativeDom[158860](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (157215 call =(157211 call . table c"postponeResize") 1)
    {
      unknown _indexOfInterest[157229] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157230] "expr temp" "temp"
      (157239 'move' _iterator[157230](157237 call _getIterator(157225 call(157221 call . this c"these"))))
      Defer
      {
        {
          (157256 call _freeIterator _iterator[157230])
        }
      }
      { scopeless type
        (157245 'move' _indexOfInterest[157229](157242 call iteratorIndex _iterator[157230]))
      }
      ForLoop[157231]
      {
        unknown i[157249] "index var" "insert auto destroy"
        (157251 'move' i[157249] _indexOfInterest[157229])
        { scopeless
          (157227 yield i)
        }
        label _continueLabel[157234]
        _indexOfInterest[157229]
        _iterator[157230]
      }
      label _breakLabel[157235]
    }
    {
      const tmp[157296] "const" "temp"
      (157297 'move' tmp[157296](157294 'deref'(157293 '_wide_get_locale' this)))
      {
        (157269 call =(157265 call . table c"postponeResize") 0)
        (157275 call lockTable)
        Defer
        {
          {
            (157279 call unlockTable)
          }
        }
        (157291 call(157287 call . table c"maybeShrinkAfterRemove"))
      }
      (157300 'elided on block' 0 tmp[157296])
    }
  } function DefaultAssociativeDom[158860](?)._isSlotFull[157312](arg _mt[158916]:_MT[238], arg this[158914]:DefaultAssociativeDom[158860](?), arg slot[157309] :
  int[13]) : _unknown[51] "inline" "method" "primary method"
  {
    (157327 return(157326 call(157322 call .(157321 call(157316 call . table c"table") slot) c"isFull")))
  }
  { scopeless type
    bool[10]
  } function DefaultAssociativeDom[158860](?).these[157335](arg _mt[158920]:_MT[238], arg this[158918]:DefaultAssociativeDom[158860](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[157385] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157386] "expr temp" "temp"
      (157395 'move' _iterator[157386](157393 call _getIterator(157345 call(157341 call . table c"allSlots"))))
      Defer
      {
        {
          (157412 call _freeIterator _iterator[157386])
        }
      }
      { scopeless type
        (157401 'move' _indexOfInterest[157385](157398 call iteratorIndex _iterator[157386]))
      }
      ForLoop[157387]
      {
        unknown slot[157405] "index var" "insert auto destroy"
        (157407 'move' slot[157405] _indexOfInterest[157385])
        {
          { scopeless
            unknown aSlot[157353] "ref var"(157352 call(157347 call . table c"table") slot)
            (157356 'end of statement')
          }
          if(157381 call _cond_test(157370 call ==(157361 call . aSlot c"status")(157367 call . chpl__hash_status c"full")))
          {
            (157378 yield(157375 call . aSlot c"key"))
          }
        }
        label _continueLabel[157390]
        _indexOfInterest[157385]
        _iterator[157386]
      }
      label _breakLabel[157391]
    }
  } function DefaultAssociativeDom[158860](?).these[157428](arg _mt[158924]:_MT[238], arg this[158922]:DefaultAssociativeDom[158860](?), param arg tag[157425] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(157460 call _cond_test debugDefaultAssoc)
    {
      (157457 call writeln "*** In associative domain standalone iterator")
    }
    {
      unknown _indexOfInterest[157507] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157508] "expr temp" "temp"
      (157517 'move' _iterator[157508](157515 call _getIterator(157473 call(157467 call . table c"allSlots")(tag = tag))))
      Defer
      {
        {
          (157534 call _freeIterator _iterator[157508])
        }
      }
      { scopeless type
        (157523 'move' _indexOfInterest[157507](157520 call iteratorIndex _iterator[157508]))
      }
      ForLoop[157509]
      {
        unknown slot[157527] "index var" "insert auto destroy"
        (157529 'move' slot[157527] _indexOfInterest[157507])
        {
          { scopeless
            unknown aSlot[157481] "ref var"(157480 call(157475 call . table c"table") slot)
            (157484 'end of statement')
          }
          if(157503 call _cond_test(157494 call ==(157487 call . aSlot c"status")(157491 call . chpl__hash_status c"full")))
          {
            (157500 yield(157497 call . aSlot c"key"))
          }
        }
        label _continueLabel[157512]
        _indexOfInterest[157507]
        _iterator[157508]
      }
      label _breakLabel[157513]
    }
  }
  where {
    (157435 call == tag(157432 call . iterKind c"standalone"))
  } function DefaultAssociativeDom[158860](?).these[157550](arg _mt[158928]:_MT[238], arg this[158926]:DefaultAssociativeDom[158860](?), param arg tag[157547] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(157581 call _cond_test debugDefaultAssoc)
    {
      { scopeless
        (157579 call writeln "*** In associative domain leader iterator")
      }
    }
    {
      unknown _indexOfInterest[157603] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157604] "expr temp" "temp"
      (157613 'move' _iterator[157604](157611 call _getIterator(157595 call(157589 call . table c"allSlots")(tag = tag))))
      Defer
      {
        {
          (157630 call _freeIterator _iterator[157604])
        }
      }
      { scopeless type
        (157619 'move' _indexOfInterest[157603](157616 call iteratorIndex _iterator[157604]))
      }
      ForLoop[157605]
      {
        unknown chunk[157623] "index var" "insert auto destroy"
        (157625 'move' chunk[157623] _indexOfInterest[157603])
        { scopeless
          (157601 yield(157599 call _build_tuple chunk this))
        }
        label _continueLabel[157608]
        _indexOfInterest[157603]
        _iterator[157604]
      }
      label _breakLabel[157609]
    }
  }
  where {
    (157557 call == tag(157554 call . iterKind c"leader"))
  } function DefaultAssociativeDom[158860](?).these[157646](arg _mt[158932]:_MT[238], arg this[158930]:DefaultAssociativeDom[158860](?), param arg tag[157643] :
  iterKind, arg followThis[157648]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown tmp[157663] "temp" followThis
      (157670 call _check_tuple_var_decl tmp[157663] 2)
      unknown chunk[157657](157664 call tmp[157663] 0)
      unknown followThisDom[157659](157667 call tmp[157663] 1)
      (157675 'end of statement')
    }
    if(157699 call _cond_test debugDefaultAssoc)
    {
      { scopeless
        (157697 call writeln "In associative domain follower code")
      }
    }
    { scopeless
      const sameDom[157708] "const"(157706 call == followThisDom this)
      (157711 'end of statement')
    }
    if(157751 call _cond_test(157713 call ! sameDom))
    {
      { scopeless
        if(157746 call _cond_test(157723 call !=(157716 call . followThisDom c"dsiNumIndices")(157720 call . this c"dsiNumIndices")))
        {
          { scopeless
            (157744 call halt "zippered associative domains do not match")
          }
        }
      }
    }
    { scopeless
      const otherTable[157763] "const"(157760 call .(157757 call . followThisDom c"table") c"table")
      (157766 'end of statement')
    }
    {
      unknown _indexOfInterest[157862] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157863] "expr temp" "temp"
      (157872 'move' _iterator[157863](157870 call _getIterator chunk))
      Defer
      {
        {
          (157888 call _freeIterator _iterator[157863])
        }
      }
      { scopeless type
        (157877 'move' _indexOfInterest[157862](157874 call iteratorIndex _iterator[157863]))
      }
      ForLoop[157864]
      {
        unknown slot[157881] "index var" "insert auto destroy"
        (157883 'move' slot[157881] _indexOfInterest[157862])
        {
          { scopeless
            const aSlot[157773] "const" "ref var"(157772 call otherTable slot)
            (157776 'end of statement')
          }
          if(157858 call _cond_test(157783 call(157779 call . aSlot c"isFull")))
          {
            { scopeless
              unknown idx[157785] slot
              (157788 'end of statement')
            }
            if(157842 call _cond_test(157791 call ! sameDom))
            {
              { scopeless
                const tmp[157810] "const" "temp"(157809 call(157801 call . table c"findFullSlot")(157805 call . aSlot c"key"))
                (157817 call _check_tuple_var_decl tmp[157810] 2)
                const match[157793] "const"(157811 call tmp[157810] 0)
                const loc[157795] "const"(157814 call tmp[157810] 1)
                (157822 'end of statement')
              }
              if(157832 call _cond_test(157825 call ! match))
              {
                { scopeless
                  (157830 call halt "zippered associative domains do not match")
                }
              }
              (157839 call = idx loc)
            }
            (157856 yield(157853 call .(157852 call(157847 call . table c"table") idx) c"key"))
          }
        }
        label _continueLabel[157867]
        _indexOfInterest[157862]
        _iterator[157863]
      }
      label _breakLabel[157868]
    }
  }
  where {
    (157655 call == tag(157652 call . iterKind c"follower"))
  } function DefaultAssociativeDom[158860](?).dsiMyDist[157900](arg _mt[158936]:_MT[238], arg this[158934]:DefaultAssociativeDom[158860](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (157905 return dist)
  }
  { scopeless type
    (157903 'to unmanaged class from unknown' BaseDist)
  } function DefaultAssociativeDom[158860](?).dsiClear[157913](arg _mt[158940]:_MT[238], arg this[158938]:DefaultAssociativeDom[158860](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    {
      const tmp[158092] "const" "temp"
      (158093 'move' tmp[158092](158090 'deref'(158089 '_wide_get_locale' this)))
      {
        (157918 call lockTable)
        {
          unknown _indexOfInterest[158036] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[158037] "expr temp" "temp"
          (158046 'move' _iterator[158037](158044 call _getIterator(157927 call(157923 call . table c"allSlots"))))
          Defer
          {
            {
              (158063 call _freeIterator _iterator[158037])
            }
          }
          { scopeless type
            (158052 'move' _indexOfInterest[158036](158049 call iteratorIndex _iterator[158037]))
          }
          ForLoop[158038]
          {
            unknown slot[158056] "index var" "insert auto destroy"
            (158058 'move' slot[158056] _indexOfInterest[158036])
            {
              { scopeless
                unknown aSlot[157935] "ref var"(157934 call(157929 call . table c"table") slot)
                (157938 'end of statement')
              }
              if(158015 call _cond_test(157945 call(157941 call . aSlot c"isFull")))
              {
                { scopeless
                  unknown tmpKey[157947] idxType
                  (157950 'end of statement')
                }
                { scopeless
                  unknown tmpVal[157953] nothing[7]
                  (157956 'end of statement')
                }
                (157967 call(157960 call . table c"clearSlot") aSlot tmpKey tmpVal)
                {
                  unknown _indexOfInterest[157982] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[157983] "expr temp" "temp"
                  (157992 'move' _iterator[157983](157990 call _getIterator _arrs))
                  Defer
                  {
                    {
                      (158008 call _freeIterator _iterator[157983])
                    }
                  }
                  { scopeless type
                    (157997 'move' _indexOfInterest[157982](157994 call iteratorIndex _iterator[157983]))
                  }
                  ForLoop[157984]
                  {
                    unknown arr[158001] "index var" "insert auto destroy"
                    (158003 'move' arr[158001] _indexOfInterest[157982])
                    {
                      (157979 call(157974 call . arr c"_deinitSlot") slot)
                    }
                    label _continueLabel[157987]
                    _indexOfInterest[157982]
                    _iterator[157983]
                  }
                  label _breakLabel[157988]
                }
              }
              (158033 call =(158026 call .(158025 call(158020 call . table c"table") slot) c"status")(158030 call . chpl__hash_status c"empty"))
            }
            label _continueLabel[158041]
            _indexOfInterest[158036]
            _iterator[158037]
          }
          label _breakLabel[158042]
        }
        (158076 call(158071 call . numEntries c"write") 0)
        (158083 call(158079 call . table c"maybeShrinkAfterRemove"))
        (158087 call unlockTable)
      }
      (158096 'elided on block' 0 tmp[158092])
    }
  } function DefaultAssociativeDom[158860](?).dsiMember[158109](arg _mt[158944]:_MT[238], arg this[158942]:DefaultAssociativeDom[158860](?), arg idx[158106] :
  idxType) : _unknown[51] "method" "primary method"
  {
    (158114 call lockTable)
    Defer
    {
      {
        (158119 call unlockTable)
      }
    }
    { scopeless
      unknown tmp[158136] "temp"(158135 call(158130 call . table c"findFullSlot") idx)
      (158143 call _check_tuple_var_decl tmp[158136] 2)
      unknown foundFullSlot[158124](158137 call tmp[158136] 0)
      unknown slotNum[158126](158140 call tmp[158136] 1)
      (158148 'end of statement')
    }
    (158150 return foundFullSlot)
  }
  { scopeless type
    bool[10]
  } function DefaultAssociativeDom[158860](?).dsiAdd[158159](arg _mt[158948]:_MT[238], arg this[158946]:DefaultAssociativeDom[158860](?), in arg idx[158157]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      const numInds[158168] "const"(158167 call(158164 call _addWrapper idx) 1)
      (158171 'end of statement')
    }
    (158174 return numInds)
  } function DefaultAssociativeDom[158860](?)._addWrapper[158184](arg _mt[158952]:_MT[238], arg this[158950]:DefaultAssociativeDom[158860](?), in arg idx[158181] :
  idxType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown slotNum[158189](158187 call - 1)
      (158192 'end of statement')
    }
    { scopeless
      unknown retVal[158195] 0
      (158198 'end of statement')
    }
    {
      const tmp[158227] "const" "temp"
      (158228 'move' tmp[158227](158225 'deref'(158224 '_wide_get_locale' this)))
      {
        (158202 call lockTable)
        Defer
        {
          {
            (158207 call unlockTable)
          }
        }
        (158221 call =(158215 call _build_tuple slotNum retVal)(158220 call _add idx))
      }
      (158231 'elided on block' 0 tmp[158227])
    }
    (158240 return(158238 call _build_tuple slotNum retVal))
  } function DefaultAssociativeDom[158860](?)._add[158250](arg _mt[158956]:_MT[238], arg this[158954]:DefaultAssociativeDom[158860](?), in arg idx[158247] :
  idxType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown foundFullSlot[158253] 0
      (158256 'end of statement')
    }
    { scopeless
      unknown slotNum[158261](158259 call - 1)
      (158264 'end of statement')
    }
    (158279 call =(158268 call _build_tuple foundFullSlot slotNum)(158278 call(158273 call . table c"findAvailableSlot") idx))
    if(158365 call _cond_test foundFullSlot)
    {
      (158288 return(158286 call _build_tuple slotNum 0))
    }
    {
      (158301 call(158294 call . table c"fillSlot") slotNum idx none[57])
      (158310 call(158305 call . numEntries c"add") 1)
      {
        unknown _indexOfInterest[158325] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[158326] "expr temp" "temp"
        (158335 'move' _iterator[158326](158333 call _getIterator _arrs))
        Defer
        {
          {
            (158351 call _freeIterator _iterator[158326])
          }
        }
        { scopeless type
          (158340 'move' _indexOfInterest[158325](158337 call iteratorIndex _iterator[158326]))
        }
        ForLoop[158327]
        {
          unknown arr[158344] "index var" "insert auto destroy"
          (158346 'move' arr[158344] _indexOfInterest[158325])
          {
            (158322 call(158317 call . arr c"_defaultInitSlot") slotNum)
          }
          label _continueLabel[158330]
          _indexOfInterest[158325]
          _iterator[158326]
        }
        label _breakLabel[158331]
      }
      (158363 return(158361 call _build_tuple slotNum 1))
    }
  } function DefaultAssociativeDom[158860](?).dsiRemove[158377](arg _mt[158960]:_MT[238], arg this[158958]:DefaultAssociativeDom[158860](?), arg idx[158374] :
  idxType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown retval[158380] int[13]
      (158383 'end of statement')
    }
    {
      const tmp[158522] "const" "temp"
      (158523 'move' tmp[158522](158520 'deref'(158519 '_wide_get_locale' this)))
      {
        (158388 call lockTable)
        Defer
        {
          {
            (158393 call unlockTable)
          }
        }
        { scopeless
          const tmp[158410] "const" "temp"(158409 call(158404 call . table c"findFullSlot") idx)
          (158417 call _check_tuple_var_decl tmp[158410] 2)
          const foundSlot[158398] "const"(158411 call tmp[158410] 0)
          const slotNum[158400] "const"(158414 call tmp[158410] 1)
          (158422 'end of statement')
        }
        if(158508 call _cond_test foundSlot)
        {
          { scopeless
            unknown tmpIdx[158425] idxType
            (158428 'end of statement')
          }
          { scopeless
            unknown tmpVal[158431] nothing[7]
            (158434 'end of statement')
          }
          (158443 call(158436 call . table c"clearSlot") slotNum tmpIdx tmpVal)
          (158451 call(158446 call . numEntries c"sub") 1)
          {
            unknown _indexOfInterest[158464] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[158465] "expr temp" "temp"
            (158474 'move' _iterator[158465](158472 call _getIterator _arrs))
            Defer
            {
              {
                (158490 call _freeIterator _iterator[158465])
              }
            }
            { scopeless type
              (158479 'move' _indexOfInterest[158464](158476 call iteratorIndex _iterator[158465]))
            }
            ForLoop[158466]
            {
              unknown arr[158483] "index var" "insert auto destroy"
              (158485 'move' arr[158483] _indexOfInterest[158464])
              {
                (158461 call(158456 call . arr c"_deinitSlot") slotNum)
              }
              label _continueLabel[158469]
              _indexOfInterest[158464]
              _iterator[158465]
            }
            label _breakLabel[158470]
          }
          (158499 call = retval 1)
        }
        {
          (158504 call = retval 0)
        }
        (158517 call(158513 call . table c"maybeShrinkAfterRemove"))
      }
      (158526 'elided on block' 0 tmp[158522])
    }
    (158531 return retval)
  } function DefaultAssociativeDom[158860](?).dsiRequestCapacity[158541](arg _mt[158964]:_MT[238], arg this[158962]:DefaultAssociativeDom[158860](?), arg numKeys[158538] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    {
      const tmp[158629] "const" "temp"
      (158630 'move' tmp[158629](158627 'deref'(158626 '_wide_get_locale' this)))
      {
        { scopeless
          unknown entries[158550](158549 call(158545 call . numEntries c"read"))
          (158553 'end of statement')
        }
        if(158622 call _cond_test(158557 call < entries numKeys))
        {
          (158561 call lockTable)
          Defer
          {
            {
              (158566 call unlockTable)
            }
          }
          (158577 call(158572 call . table c"requestCapacity") numKeys)
        }
        {
          (158619 call warning "Requested capacity (" numKeys ") " "is less than current size (" entries ")")
        }
      }
      (158633 'elided on block' 0 tmp[158629])
    }
  } function DefaultAssociativeDom[158860](?).dsiSorted[158644](arg _mt[158968]:_MT[238], arg this[158966]:DefaultAssociativeDom[158860](?), arg comparator[158642]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (158647 'use' Sort)
    { scopeless
      unknown tableCopy[158685](158681 for  slot  in (158670 call _fullSlots) do
      {
        (158678 call .(158677 call(158672 call . table c"table") slot) c"key")
      } )(158665 call chpl__buildArrayRuntimeType(158663 call chpl__ensureDomainExpr(158659 call #(158651 call chpl_build_low_bounded_range 0)(158658 call(158654 call . numEntries c"read")))) idxType)
      (158688 'end of statement')
    }
    (158694 call sort tableCopy(comparator = comparator))
    {
      unknown _indexOfInterest[158701] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158702] "expr temp" "temp"
      (158711 'move' _iterator[158702](158709 call _getIterator tableCopy))
      Defer
      {
        {
          (158727 call _freeIterator _iterator[158702])
        }
      }
      { scopeless type
        (158716 'move' _indexOfInterest[158701](158713 call iteratorIndex _iterator[158702]))
      }
      ForLoop[158703]
      {
        unknown ind[158720] "index var" "insert auto destroy"
        (158722 'move' ind[158720] _indexOfInterest[158701])
        { scopeless
          (158699 yield ind)
        }
        label _continueLabel[158706]
        _indexOfInterest[158701]
        _iterator[158702]
      }
      label _breakLabel[158707]
    }
  } function DefaultAssociativeDom[158860](?)._fullSlots[158738](arg _mt[158972]:_MT[238], arg this[158970]:DefaultAssociativeDom[158860](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[158765] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158766] "expr temp" "temp"
      (158775 'move' _iterator[158766](158773 call _getIterator(158746 call(158742 call . table c"allSlots"))))
      Defer
      {
        {
          (158792 call _freeIterator _iterator[158766])
        }
      }
      { scopeless type
        (158781 'move' _indexOfInterest[158765](158778 call iteratorIndex _iterator[158766]))
      }
      ForLoop[158767]
      {
        unknown slot[158785] "index var" "insert auto destroy"
        (158787 'move' slot[158785] _indexOfInterest[158765])
        {
          if(158760 call _cond_test(158755 call(158750 call . table c"isSlotFull") slot))
          {
            (158757 yield slot)
          }
        }
        label _continueLabel[158770]
        _indexOfInterest[158765]
        _iterator[158766]
      }
      label _breakLabel[158771]
    }
  } function DefaultAssociativeDom[158860](?).dsiHasSingleLocalSubdomain[158804](arg _mt[158976]:_MT[238], arg this[158974]:DefaultAssociativeDom[158860](?)) param : _unknown[51] "method" "primary method"
  {
    { scopeless
      (158807 return 1)
    }
  } function DefaultAssociativeDom[158860](?).dsiLocalSubdomain[158818](arg _mt[158980]:_MT[238], arg this[158978]:DefaultAssociativeDom[158860](?), arg loc[158815] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(158852 call _cond_test(158825 call ==(158822 call chpl_localeID_to_locale(158821 '_wide_get_locale' this)) loc))
    {
      (158834 return(158833 call _getDomain(158831 call _to_unmanaged this)))
    }
    {
      { scopeless
        unknown a[158844](158842 call chpl__buildDomainRuntimeType defaultDist idxType(parSafe = parSafe))
        (158847 'end of statement')
      }
      (158850 return a)
    }
  } BaseAssociativeDom
  type DefaultAssociativeArr[161422](?) unknown idxType[158986] "type variable" unknown parSafeDom[158990] "param" bool[10] unknown dom[159001](159000 'to unmanaged class from unknown'(158999 call DefaultAssociativeDom idxType(parSafe = parSafeDom))) unknown dataSize[159006] int[13] unknown data[159014](159013 call _ddata eltType) unknown tmpData[159022](159021 call _ddata eltType) unknown eltsNeedDeinit[159027] 1 function DefaultAssociativeArr[161422](?).init[159035](arg _mt[161426]:_MT[238], arg this[161424]:DefaultAssociativeArr[161422](?), arg eltType[159033]:_any[178](?), arg idxType[159037]:_any[178](?), param arg parSafeDom[159039]:_any[178](?), arg dom[159048] :
  (159047 'to unmanaged class from unknown'(159046 call DefaultAssociativeDom idxType(parSafe = parSafeDom))), param arg initElts[159051]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (159060 call(159054 call . super c"init")(eltType = eltType))
    (159068 call =(159064 call . this c"idxType") idxType)
    (159078 call =(159074 call . this c"parSafeDom") parSafeDom)
    (159086 call =(159082 call . this c"dom") dom)
    { scopeless
      unknown tableSize[159098](159095 call .(159090 call . dom c"table") c"tableSize")
      (159101 'end of statement')
    }
    (159119 call =(159103 call . this c"data")(159118 call(159112 call .(159107 call . dom c"table") c"allocateData") tableSize eltType))
    (159129 call =(159125 call . this c"tmpData") nil[44])
    (159139 call =(159135 call . this c"eltsNeedDeinit") initElts)
    (159147 call(159143 call . this c"complete"))
    if(159286 call _cond_test initElts)
    {
      if(159280 call _cond_test(159156 call isNonNilableClass(159152 call . this c"eltType")))
      {
        { scopeless
          unknown msg[159218] "param"(159216 call +(159197 call +(159191 call + "Cannot default initialize associative array because" " element type ")(159195 call _cast string[26] eltType)) " is a non-nilable class")
          (159221 'end of statement')
        }
        (159226 call compilerError msg)
      }
      {
        { scopeless
          if(159276 call _cond_test(159235 call !(159234 call isDefaultInitializable(159230 call . this c"eltType"))))
          {
            { scopeless
              unknown msg[159266] "param"(159264 call +(159245 call +(159239 call + "Cannot default initialize associative array because" " element type ")(159243 call _cast string[26] eltType)) " cannot be default initialized")
              (159269 'end of statement')
            }
            (159274 call compilerError msg)
          }
        }
      }
    }
    if(159461 call _cond_test initElts)
    {
      { scopeless
        unknown initMethod[159296](159295 call init_elts_method tableSize eltType)
        (159299 'end of statement')
      }
      {
        unknown tmp[159436] "expr temp" "maybe param" "maybe type" "temp"
        (159438 'move' tmp[159436] initMethod)
        if(159443 call _cond_test(159440 call == tmp[159436](159304 call . ArrayInit c"noInit")))
        {
        }
        {
          if(159449 call _cond_test(159446 call == tmp[159436](159312 call . ArrayInit c"serialInit")))
          {
            {
              unknown _indexOfInterest[159348] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[159349] "expr temp" "temp"
              (159358 'move' _iterator[159349](159356 call _getIterator(159325 call(159321 call .(159318 call . dom c"table") c"allSlots"))))
              Defer
              {
                {
                  (159375 call _freeIterator _iterator[159349])
                }
              }
              { scopeless type
                (159364 'move' _indexOfInterest[159348](159361 call iteratorIndex _iterator[159349]))
              }
              ForLoop[159350]
              {
                unknown slot[159368] "index var" "insert auto destroy"
                (159370 'move' slot[159368] _indexOfInterest[159348])
                {
                  if(159343 call _cond_test(159334 call(159329 call . dom c"_isSlotFull") slot))
                  {
                    (159340 call _doDefaultInitSlot slot(inAdd = 0))
                  }
                }
                label _continueLabel[159353]
                _indexOfInterest[159348]
                _iterator[159349]
              }
              label _breakLabel[159354]
            }
          }
          {
            if(159456 call _cond_test(159453 call == tmp[159436](159386 call . ArrayInit c"parallelInit")))
            {
              Forall {
                induction variables:
                  
                  unknown slot[159421] "index var" "insert auto destroy"
                iterated expressions:
                  (159399 call(159395 call .(159392 call . dom c"table") c"allSlots"))
                shadow variables:
                other variables
                  forall body
                {
                  if(159415 call _cond_test(159406 call(159401 call . dom c"_isSlotFull") slot))
                  {
                    (159412 call _doDefaultInitSlot slot(inAdd = 0))
                  }
                }
              }
            }
            {
              (159430 call halt "ArrayInit.heuristicInit should have been made concrete")
            }
          }
        }
      }
    }
  } function DefaultAssociativeArr[161422](?).deinit[159469](arg _mt[161430]:_MT[238], arg this[161428]:DefaultAssociativeArr[161422](?)) : _unknown[51] "destructor" "method" "primary method"
  {
    (159481 call _ddata_free data(159478 call .(159475 call . dom c"table") c"tableSize"))
  } function DefaultAssociativeArr[161422](?).dsiGetBaseDom[159488](arg _mt[161434]:_MT[238], arg this[161432]:DefaultAssociativeArr[161422](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      (159491 return dom)
    }
  } function DefaultAssociativeArr[161422](?).dsiAccess[159502](arg _mt[161438]:_MT[238], arg this[161436]:DefaultAssociativeArr[161422](?), arg idx[159499] :
  idxType) ref : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown tmp[159519] "temp"(159518 call(159513 call .(159510 call . dom c"table") c"findFullSlot") idx)
      (159526 call _check_tuple_var_decl tmp[159519] 2)
      unknown found[159504](159520 call tmp[159519] 0)
      unknown slotNum[159506](159523 call tmp[159519] 1)
      (159531 'end of statement')
    }
    if(159564 call _cond_test found)
    {
      (159538 return(159537 call data slotNum))
    }
    {
      (159561 call halt "array index out of bounds: " idx)
    }
  } function DefaultAssociativeArr[161422](?).dsiAccess[159576](arg _mt[161442]:_MT[238], arg this[161440]:DefaultAssociativeArr[161422](?), arg idx[159573] :
  idxType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown tmp[159597] "temp"(159596 call(159591 call .(159588 call . dom c"table") c"findFullSlot") idx)
      (159604 call _check_tuple_var_decl tmp[159597] 2)
      unknown found[159582](159598 call tmp[159597] 0)
      unknown slotNum[159584](159601 call tmp[159597] 1)
      (159609 'end of statement')
    }
    if(159632 call _cond_test found)
    {
      (159616 return(159615 call data slotNum))
    }
    {
      (159623 call halt "array index out of bounds: " idx)
      (159630 return(159629 call data 0))
    }
  }
  where {
    (159581 call shouldReturnRvalueByValue eltType)
  } function DefaultAssociativeArr[161422](?).dsiAccess[159645](arg _mt[161446]:_MT[238], arg this[161444]:DefaultAssociativeArr[161422](?), arg idx[159642] :
  idxType) const ref : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown tmp[159666] "temp"(159665 call(159660 call .(159657 call . dom c"table") c"findFullSlot") idx)
      (159673 call _check_tuple_var_decl tmp[159666] 2)
      unknown found[159651](159667 call tmp[159666] 0)
      unknown slotNum[159653](159670 call tmp[159666] 1)
      (159678 'end of statement')
    }
    if(159701 call _cond_test found)
    {
      (159685 return(159684 call data slotNum))
    }
    {
      (159692 call halt "array index out of bounds: " idx)
      (159699 return(159698 call data 0))
    }
  }
  where {
    (159650 call shouldReturnRvalueByConstRef eltType)
  } function DefaultAssociativeArr[161422](?).dsiLocalAccess[159712](arg _mt[161450]:_MT[238], arg this[161448]:DefaultAssociativeArr[161422](?), arg i[159710]:_any[178](?)) ref : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      (159718 return(159717 call dsiAccess i))
    }
  } function DefaultAssociativeArr[161422](?).dsiLocalAccess[159727](arg _mt[161454]:_MT[238], arg this[161452]:DefaultAssociativeArr[161422](?), arg i[159725]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      (159737 return(159736 call dsiAccess i))
    }
  }
  where {
    (159732 call shouldReturnRvalueByValue eltType)
  } function DefaultAssociativeArr[161422](?).dsiLocalAccess[159747](arg _mt[161458]:_MT[238], arg this[161456]:DefaultAssociativeArr[161422](?), arg i[159745]:_any[178](?)) const ref : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      (159757 return(159756 call dsiAccess i))
    }
  }
  where {
    (159752 call shouldReturnRvalueByConstRef eltType)
  } function DefaultAssociativeArr[161422](?).these[159765](arg _mt[161462]:_MT[238], arg this[161460]:DefaultAssociativeArr[161422](?)) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[159796] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159797] "expr temp" "temp"
      (159806 'move' _iterator[159797](159804 call _getIterator(159776 call(159772 call .(159769 call . dom c"table") c"allSlots"))))
      Defer
      {
        {
          (159823 call _freeIterator _iterator[159797])
        }
      }
      { scopeless type
        (159812 'move' _indexOfInterest[159796](159809 call iteratorIndex _iterator[159797]))
      }
      ForLoop[159798]
      {
        unknown slot[159816] "index var" "insert auto destroy"
        (159818 'move' slot[159816] _indexOfInterest[159796])
        {
          if(159791 call _cond_test(159783 call(159778 call . dom c"_isSlotFull") slot))
          {
            (159788 yield(159787 call data slot))
          }
        }
        label _continueLabel[159801]
        _indexOfInterest[159796]
        _iterator[159797]
      }
      label _breakLabel[159802]
    }
  } function DefaultAssociativeArr[161422](?).these[159839](arg _mt[161466]:_MT[238], arg this[161464]:DefaultAssociativeArr[161422](?), param arg tag[159836] :
  iterKind) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(159871 call _cond_test debugDefaultAssoc)
    {
      (159868 call writeln "*** In associative array standalone iterator")
    }
    {
      unknown _indexOfInterest[159907] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159908] "expr temp" "temp"
      (159917 'move' _iterator[159908](159915 call _getIterator(159887 call(159881 call .(159878 call . dom c"table") c"allSlots")(tag = tag))))
      Defer
      {
        {
          (159934 call _freeIterator _iterator[159908])
        }
      }
      { scopeless type
        (159923 'move' _indexOfInterest[159907](159920 call iteratorIndex _iterator[159908]))
      }
      ForLoop[159909]
      {
        unknown slot[159927] "index var" "insert auto destroy"
        (159929 'move' slot[159927] _indexOfInterest[159907])
        {
          if(159902 call _cond_test(159894 call(159889 call . dom c"_isSlotFull") slot))
          {
            (159899 yield(159898 call data slot))
          }
        }
        label _continueLabel[159912]
        _indexOfInterest[159907]
        _iterator[159908]
      }
      label _breakLabel[159913]
    }
  }
  where {
    (159846 call == tag(159843 call . iterKind c"standalone"))
  } function DefaultAssociativeArr[161422](?).these[159950](arg _mt[161470]:_MT[238], arg this[161468]:DefaultAssociativeArr[161422](?), param arg tag[159947] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[159970] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159971] "expr temp" "temp"
      (159980 'move' _iterator[159971](159978 call _getIterator(159966 call(159961 call . dom c"these") tag)))
      Defer
      {
        {
          (159997 call _freeIterator _iterator[159971])
        }
      }
      { scopeless type
        (159986 'move' _indexOfInterest[159970](159983 call iteratorIndex _iterator[159971]))
      }
      ForLoop[159972]
      {
        unknown followThis[159990] "index var" "insert auto destroy"
        (159992 'move' followThis[159990] _indexOfInterest[159970])
        { scopeless
          (159968 yield followThis)
        }
        label _continueLabel[159975]
        _indexOfInterest[159970]
        _iterator[159971]
      }
      label _breakLabel[159976]
    }
  }
  where {
    (159957 call == tag(159954 call . iterKind c"leader"))
  } function DefaultAssociativeArr[161422](?).these[160014](arg _mt[161474]:_MT[238], arg this[161472]:DefaultAssociativeArr[161422](?), param arg tag[160011] :
  iterKind, arg followThis[160016]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown tmp[160031] "temp" followThis
      (160038 call _check_tuple_var_decl tmp[160031] 2)
      unknown chunk[160025](160032 call tmp[160031] 0)
      unknown followThisDom[160027](160035 call tmp[160031] 1)
      (160043 'end of statement')
    }
    if(160068 call _cond_test debugDefaultAssoc)
    {
      { scopeless
        (160066 call writeln "In array follower code: Following " chunk)
      }
    }
    { scopeless
      const sameDom[160080] "const"(160078 call == followThisDom(160075 call . this c"dom"))
      (160083 'end of statement')
    }
    if(160126 call _cond_test(160085 call ! sameDom))
    {
      { scopeless
        if(160121 call _cond_test(160098 call !=(160088 call . followThisDom c"dsiNumIndices")(160095 call .(160092 call . this c"dom") c"dsiNumIndices")))
        {
          { scopeless
            (160119 call halt "zippered associative array does not match the iterated domain")
          }
        }
      }
    }
    { scopeless
      const otherTable[160138] "const"(160135 call .(160132 call . followThisDom c"table") c"table")
      (160141 'end of statement')
    }
    {
      unknown _indexOfInterest[160232] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160233] "expr temp" "temp"
      (160242 'move' _iterator[160233](160240 call _getIterator chunk))
      Defer
      {
        {
          (160258 call _freeIterator _iterator[160233])
        }
      }
      { scopeless type
        (160247 'move' _indexOfInterest[160232](160244 call iteratorIndex _iterator[160233]))
      }
      ForLoop[160234]
      {
        unknown slot[160251] "index var" "insert auto destroy"
        (160253 'move' slot[160251] _indexOfInterest[160232])
        {
          { scopeless
            const aSlot[160148] "const" "ref var"(160147 call otherTable slot)
            (160151 'end of statement')
          }
          if(160228 call _cond_test(160158 call(160154 call . aSlot c"isFull")))
          {
            { scopeless
              unknown idx[160160] slot
              (160163 'end of statement')
            }
            if(160218 call _cond_test(160166 call ! sameDom))
            {
              { scopeless
                const tmp[160186] "const" "temp"(160185 call(160177 call .(160174 call . dom c"table") c"findFullSlot")(160181 call . aSlot c"key"))
                (160193 call _check_tuple_var_decl tmp[160186] 2)
                const match[160168] "const"(160187 call tmp[160186] 0)
                const loc[160170] "const"(160190 call tmp[160186] 1)
                (160198 'end of statement')
              }
              if(160208 call _cond_test(160201 call ! match))
              {
                { scopeless
                  (160206 call halt "zippered associative array does not match the iterated domain")
                }
              }
              (160215 call = idx loc)
            }
            (160226 yield(160225 call data idx))
          }
        }
        label _continueLabel[160237]
        _indexOfInterest[160232]
        _iterator[160233]
      }
      label _breakLabel[160238]
    }
  }
  where {
    (160023 call == tag(160020 call . iterKind c"follower"))
  } function DefaultAssociativeArr[161422](?).dsiSerialReadWrite[160272](arg _mt[161478]:_MT[238], arg this[161476]:DefaultAssociativeArr[161422](?), arg f[160270]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    { scopeless
      unknown binary[160280](160279 call(160275 call . f c"binary"))
      (160283 'end of statement')
    }
    { scopeless
      unknown arrayStyle[160292](160291 call(160286 call . f c"styleElement") QIO_STYLE_ELEMENT_ARRAY)
      (160295 'end of statement')
    }
    { scopeless
      unknown isspace[160305](160303 call &&(160298 call == arrayStyle QIO_ARRAY_FORMAT_SPACE)(160301 call ! binary))
      (160308 'end of statement')
    }
    { scopeless
      unknown isjson[160318](160316 call &&(160311 call == arrayStyle QIO_ARRAY_FORMAT_JSON)(160314 call ! binary))
      (160321 'end of statement')
    }
    { scopeless
      unknown ischpl[160331](160329 call &&(160324 call == arrayStyle QIO_ARRAY_FORMAT_CHPL)(160327 call ! binary))
      (160334 'end of statement')
    }
    if(160357 call _cond_test(160342 call &&(160339 call !(160336 call . f c"writing")) ischpl))
    {
      (160352 call(160347 call . this c"readChapelStyleAssocArray") f)
      (160355 return)
    }
    if(160374 call _cond_test(160363 call || isjson ischpl))
    {
      { scopeless
        (160371 call <~> f(160366 'new'(160370 call ioLiteral "[")))
      }
    }
    { scopeless
      unknown first[160380] 1
      (160383 'end of statement')
    }
    {
      unknown _indexOfInterest[160490] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160491] "expr temp" "temp"
      (160509 'move' _iterator[160491](160395 call _build_tuple(160503 call _getIterator(160500 call . this c"dom"))(160507 call _getIterator this)))
      Defer
      {
        {
          (160539 call _freeIterator _iterator[160491])
        }
      }
      { scopeless type
        (160514 'move' _indexOfInterest[160490](160511 call iteratorIndex _iterator[160491]))
      }
      ForLoop[160492]
      {
        (160519 call _check_tuple_var_decl _indexOfInterest[160490] 2)
        unknown key[160525] "index var" "insert auto destroy"
        (160527 'move' key[160525](160523 call _indexOfInterest[160490] 0))
        unknown val[160532] "index var" "insert auto destroy"
        (160534 'move' val[160532](160530 call _indexOfInterest[160490] 1))
        {
          if(160436 call _cond_test first)
          {
            { scopeless
              (160399 call = first 0)
            }
          }
          {
            { scopeless
              if(160430 call _cond_test isspace)
              {
                { scopeless
                  (160409 call <~> f(160404 'new'(160408 call ioLiteral " ")))
                }
              }
              {
                { scopeless
                  if(160425 call _cond_test(160414 call || isjson ischpl))
                  {
                    { scopeless
                      (160422 call <~> f(160417 'new'(160421 call ioLiteral ", ")))
                    }
                  }
                }
              }
            }
          }
          if(160481 call _cond_test(160448 call &&(160444 call . f c"writing") ischpl))
          {
            (160452 call <~> f key)
            (160478 call <~> f(160457 'new'(160477 call ioLiteral " => ")))
          }
          (160487 call <~> f val)
        }
        label _continueLabel[160495]
        _indexOfInterest[160490]
        _iterator[160491]
      }
      label _breakLabel[160496]
    }
    if(160559 call _cond_test(160548 call || isjson ischpl))
    {
      { scopeless
        (160556 call <~> f(160551 'new'(160555 call ioLiteral "]")))
      }
    }
  } function DefaultAssociativeArr[161422](?).readChapelStyleAssocArray[160570](arg _mt[161482]:_MT[238], arg this[161480]:DefaultAssociativeArr[161422](?), arg f[160568]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    { scopeless
      const openBracket[160577] "const"(160572 'new'(160576 call ioLiteral "["))
      (160580 'end of statement')
    }
    { scopeless
      const closedBracket[160587] "const"(160582 'new'(160586 call ioLiteral "]"))
      (160590 'end of statement')
    }
    { scopeless
      unknown first[160592] 1
      (160595 'end of statement')
    }
    { scopeless
      unknown readEnd[160597] 0
      (160600 'end of statement')
    }
    (160603 call <~> f openBracket)
    {
      unknown tmp[160706] "temp"
      (160724 'move' tmp[160706](160722 call _cond_test 1))
      WhileDo[160711]
      {
        {
          if(160658 call _cond_test first)
          {
            (160610 call = first 0)
            Try
            {
              {
                (160616 call <~> f closedBracket)
                (160622 call = readEnd 1)
                break nil[44]
              }
            }
            Catch err : BadFormatError
            {
            }
          }
          {
            Try
            {
              {
                (160642 call <~> f(160637 'new'(160641 call ioLiteral ",")))
              }
            }
            Catch err : BadFormatError
            {
              break nil[44]
            }
          }
          { scopeless
            unknown key[160664] idxType
            (160667 'end of statement')
          }
          (160670 call <~> f key)
          (160695 call <~> f(160674 'new'(160694 call ioLiteral "=>")))
          (160703 call <~> f(160702 call dsiAccess key))
        }
        label _continueLabel[160709]
        (160717 'move' tmp[160706](160715 call _cond_test 1))
        tmp[160706]
      }
      label _breakLabel[160710]
    }
    if(160735 call _cond_test(160728 call ! readEnd))
    {
      { scopeless
        (160732 call <~> f closedBracket)
      }
    }
  } function DefaultAssociativeArr[161422](?).dsiSerialWrite[160746](arg _mt[161486]:_MT[238], arg this[161484]:DefaultAssociativeArr[161422](?), arg f[160744]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    (160754 call(160749 call . this c"dsiSerialReadWrite") f)
  } function DefaultAssociativeArr[161422](?).dsiSerialRead[160763](arg _mt[161490]:_MT[238], arg this[161488]:DefaultAssociativeArr[161422](?), arg f[160761]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    (160771 call(160766 call . this c"dsiSerialReadWrite") f)
  } function DefaultAssociativeArr[161422](?).dsiSorted[160780](arg _mt[161494]:_MT[238], arg this[161492]:DefaultAssociativeArr[161422](?), arg comparator[160778]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    (160783 'use' Sort)
    { scopeless
      unknown tableCopy[160818](160814 for  slot  in (160809 call(160805 call . dom c"_fullSlots")) do
      {
        (160813 call data slot)
      } )(160799 call chpl__buildArrayRuntimeType(160797 call chpl__ensureDomainExpr(160793 call #(160787 call chpl_build_low_bounded_range 0)(160790 call . dom c"dsiNumIndices"))) eltType)
      (160821 'end of statement')
    }
    (160827 call sort tableCopy(comparator = comparator))
    {
      unknown _indexOfInterest[160834] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160835] "expr temp" "temp"
      (160844 'move' _iterator[160835](160842 call _getIterator tableCopy))
      Defer
      {
        {
          (160860 call _freeIterator _iterator[160835])
        }
      }
      { scopeless type
        (160849 'move' _indexOfInterest[160834](160846 call iteratorIndex _iterator[160835]))
      }
      ForLoop[160836]
      {
        unknown elem[160853] "index var" "insert auto destroy"
        (160855 'move' elem[160853] _indexOfInterest[160834])
        { scopeless
          (160832 yield elem)
        }
        label _continueLabel[160839]
        _indexOfInterest[160834]
        _iterator[160835]
      }
      label _breakLabel[160840]
    }
  } function DefaultAssociativeArr[161422](?)._doDefaultInitSlot[160875](arg _mt[161498]:_MT[238], arg this[161496]:DefaultAssociativeArr[161422](?), arg slot[160872] :
  int[13], arg inAdd[160878] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    if(160995 call _cond_test(160885 call !(160884 call isDefaultInitializable eltType)))
    {
      if(160970 call _cond_test inAdd)
      {
        (160926 call halt(160923 call + "Can't resize domains whose arrays' elements don't " "have default values"))
      }
      {
        (160967 call halt(160964 call + "Can't default initialize associative arrays whose " "elements have no default value"))
      }
    }
    {
      { scopeless
        unknown initval[160976] "no auto destroy" eltType
        (160979 'end of statement')
      }
      { scopeless
        unknown dst[160985] "ref var"(160984 call data slot)
        (160988 'end of statement')
      }
      (160993 '=' dst initval)
    }
  } function DefaultAssociativeArr[161422](?)._defaultInitSlot[161008](arg _mt[161502]:_MT[238], arg this[161500]:DefaultAssociativeArr[161422](?), arg slot[161005] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (161015 call _doDefaultInitSlot slot(inAdd = 1))
  } function DefaultAssociativeArr[161422](?)._deinitSlot[161026](arg _mt[161506]:_MT[238], arg this[161504]:DefaultAssociativeArr[161422](?), arg slot[161023] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (161034 call _deinitElement(161032 call data slot))
  } function DefaultAssociativeArr[161422](?)._elementNeedsDeinit[161041](arg _mt[161510]:_MT[238], arg this[161508]:DefaultAssociativeArr[161422](?)) param : _unknown[51] "method" "primary method"
  {
    (161047 return(161046 'needs auto destroy' eltType))
  } function DefaultAssociativeArr[161422](?)._deinitElement[161058](arg _mt[161514]:_MT[238], arg this[161512]:DefaultAssociativeArr[161422](?), ref arg elt[161055] :
  eltType) : _unknown[51] "method" "primary method"
  {
    if(161069 call _cond_test(161062 call _elementNeedsDeinit))
    {
      (161066 call chpl__autoDestroy elt)
    }
  } function DefaultAssociativeArr[161422](?)._startRehash[161082](arg _mt[161518]:_MT[238], arg this[161516]:DefaultAssociativeArr[161422](?), arg newSize[161079] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (161086 call = tmpData data)
    (161102 call = data(161101 call(161095 call .(161092 call . dom c"table") c"allocateData") newSize eltType))
  } function DefaultAssociativeArr[161422](?)._finishRehash[161113](arg _mt[161522]:_MT[238], arg this[161520]:DefaultAssociativeArr[161422](?), arg oldSize[161110] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (161119 call _ddata_free tmpData oldSize)
    (161124 call = tmpData nil[44])
  } function DefaultAssociativeArr[161422](?)._moveElementDuringRehash[161135](arg _mt[161526]:_MT[238], arg this[161524]:DefaultAssociativeArr[161422](?), arg oldslot[161132] :
  int[13], arg newslot[161138] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    { scopeless
      const src[161145] "const" "ref var"(161144 call tmpData oldslot)
      (161148 'end of statement')
    }
    { scopeless
      unknown dst[161154] "ref var"(161153 call data newslot)
      (161157 'end of statement')
    }
    (161162 '=' dst src)
  } function DefaultAssociativeArr[161422](?).dsiTargetLocales[161168](arg _mt[161530]:_MT[238], arg this[161528]:DefaultAssociativeArr[161422](?)) : _unknown[51] "method" "primary method"
  {
    (161177 return(161175 call chpl__buildArrayExpr(161172 call chpl_localeID_to_locale(161171 '_wide_get_locale' this))))
  } function DefaultAssociativeArr[161422](?).dsiHasSingleLocalSubdomain[161184](arg _mt[161534]:_MT[238], arg this[161532]:DefaultAssociativeArr[161422](?)) param : _unknown[51] "method" "primary method"
  {
    { scopeless
      (161187 return 1)
    }
  } function DefaultAssociativeArr[161422](?).dsiLocalSubdomain[161198](arg _mt[161538]:_MT[238], arg this[161536]:DefaultAssociativeArr[161422](?), arg loc[161195] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    if(161235 call _cond_test(161205 call ==(161202 call chpl_localeID_to_locale(161201 '_wide_get_locale' this)) loc))
    {
      (161211 return(161210 call _getDomain dom))
    }
    {
      { scopeless
        unknown a[161227](161225 call chpl__buildDomainRuntimeType defaultDist(161215 call . dom c"idxType")(parSafe =(161220 call . dom c"parSafe")))
        (161230 'end of statement')
      }
      (161233 return a)
    }
  } function DefaultAssociativeArr[161422](?).dsiElementInitializationComplete[161244](arg _mt[161542]:_MT[238], arg this[161540]:DefaultAssociativeArr[161422](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (161251 call =(161247 call . this c"eltsNeedDeinit") 1)
  } function DefaultAssociativeArr[161422](?).dsiElementDeinitializationComplete[161259](arg _mt[161546]:_MT[238], arg this[161544]:DefaultAssociativeArr[161422](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (161266 call =(161262 call . this c"eltsNeedDeinit") 0)
  } function DefaultAssociativeArr[161422](?).dsiDestroyArr[161278](arg _mt[161550]:_MT[238], arg this[161548]:DefaultAssociativeArr[161422](?), arg deinitElts[161275] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(161406 call _cond_test(161285 call && deinitElts(161282 call . this c"eltsNeedDeinit")))
    {
      if(161401 call _cond_test(161289 call _elementNeedsDeinit))
      {
        if(161396 call _cond_test(161293 call _deinitElementsIsParallel eltType))
        {
          Forall {
            induction variables:
              
              unknown slot[161326] "index var" "insert auto destroy"
            iterated expressions:
              (161303 call(161299 call .(161296 call . dom c"table") c"allSlots"))
            shadow variables:
            other variables
              forall body
            {
              if(161320 call _cond_test(161310 call(161305 call . dom c"_isSlotFull") slot))
              {
                (161317 call _deinitElement(161315 call data slot))
              }
            }
          }
        }
        {
          {
            unknown _indexOfInterest[161361] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[161362] "expr temp" "temp"
            (161371 'move' _iterator[161362](161369 call _getIterator(161339 call(161335 call .(161332 call . dom c"table") c"allSlots"))))
            Defer
            {
              {
                (161388 call _freeIterator _iterator[161362])
              }
            }
            { scopeless type
              (161377 'move' _indexOfInterest[161361](161374 call iteratorIndex _iterator[161362]))
            }
            ForLoop[161363]
            {
              unknown slot[161381] "index var" "insert auto destroy"
              (161383 'move' slot[161381] _indexOfInterest[161361])
              {
                if(161356 call _cond_test(161346 call(161341 call . dom c"_isSlotFull") slot))
                {
                  (161353 call _deinitElement(161351 call data slot))
                }
              }
              label _continueLabel[161366]
              _indexOfInterest[161361]
              _iterator[161362]
            }
            label _breakLabel[161367]
          }
        }
      }
    }
    (161416 call =(161412 call . this c"eltsNeedDeinit") 0)
  } AbsBaseArr
}