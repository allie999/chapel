AST dump for MergeSort after pass scopeResolve.
Module use list: ChapelStandard Sort InsertionSort 

{ function mergeSort[271212](arg Data[271209] :(271207 call chpl__buildArrayRuntimeType unknown Dom[271202] unknown eltType[271205]), arg minlen[271215] = 16, arg comparator[271221] : unknown rec[271218] = defaultComparator[267977]) : _unknown[51] "no return value for void"
  {(271229 call chpl_check_comparator comparator[271221] eltType[271205])
    if(271261 call _cond_test(271237 call !=(271233 call . Dom[271202] c"rank") 1))
    {(271258 call compilerError "mergeSort() requires 1-D array")
    } unknown Scratch[271267](271266 'typeof' Data[271209])(271270 'end of statement')(271286 call _MergeSort Data[271209] Scratch[271267](271276 call . Dom[271202] c"alignedLow")(271280 call . Dom[271202] c"alignedHigh") minlen[271215] comparator[271221] 0)
  } function _MergeSort[271300](arg Data[271297] :(271295 call chpl__buildArrayRuntimeType unknown Dom[271292]), arg Scratch[271305] :(271302 call chpl__buildArrayRuntimeType nil[44]), arg lo[271309] : int(64)[13], arg hi[271313] : int(64)[13], arg minlen[271317] = 16, arg comparator[271323] : unknown rec[271320] = defaultComparator[267977], arg depth[271328] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  { const stride[271362] "const"(271359 IfExpr (271348 call . Dom[271292] c"stridable") then
    { scopeless(271357 call abs(271353 call . Dom[271292] c"stride"))
    } else
    { scopeless 1
    } ) const size[271372] "const"(271370 call /(271367 call - hi[271313] lo[271309]) stride[271362]) const mid[271385] "const"(271383 call + lo[271309](271381 call *(271378 call / size[271372] 2) stride[271362]))(271388 'end of statement')
    if(271499 call _cond_test(271415 call ||(271394 call <(271391 call + size[271372] 1) minlen[271317])(271413 call &&(271401 call ==(271398 call & depth[271328] 1) 0)(271411 call <(271405 call + size[271372] 1)(271409 call * 2 minlen[271317])))))
    {(271429 call insertionSort module=[255] InsertionSort[270092] Data[271297](comparator = comparator[271323]) lo[271309] hi[271313])
      if(271493 call _cond_test(271434 call & depth[271328] 1))
      {
        if(271486 call _cond_test(271437 call . Dom[271292] c"stridable"))
        {(271466 call =(271452 call Scratch[271305](271449 call chpl_by(271443 call chpl_build_bounded_range lo[271309] hi[271313])(271446 call . Dom[271292] c"stride")))(271465 call Data[271297](271462 call chpl_by(271456 call chpl_build_bounded_range lo[271309] hi[271313])(271459 call . Dom[271292] c"stride"))))
        }
        {(271483 call =(271475 call Scratch[271305](271472 call chpl_build_bounded_range lo[271309] hi[271313]))(271482 call Data[271297](271479 call chpl_build_bounded_range lo[271309] hi[271313])))
        }
      }(271497 return _void[55])(364181 'referenced modules list' InsertionSort[270092])
    }
    if(271620 call _cond_test(271517 call <(271508 call(271504 call .(364189 call here[90435]) c"runningTasks"))(271516 call(271510 call .(364191 call here[90435]) c"numPUs")(logical = 1))))
    {
      { const _cobeginCount[271553] "const" "end count" "temp"(271574 'move' _cobeginCount[271553](271571 call _endCountAlloc 1))(271566 call _upEndCount _cobeginCount[271553] 1 2)
        {
          {(271531 call _MergeSort Data[271297] Scratch[271305] lo[271309] mid[271385] minlen[271317] comparator[271323](271529 call + depth[271328] 1))
          }(271556 call _downEndCount _cobeginCount[271553] nil[44])(271555 'cobegin block')
        }
        {
          {(271550 call _MergeSort Data[271297] Scratch[271305](271541 call + mid[271385] stride[271362]) hi[271313] minlen[271317] comparator[271323](271548 call + depth[271328] 1))
          }(271562 call _downEndCount _cobeginCount[271553] nil[44])(271561 'cobegin block')
        }
        Defer
        {
          {(271577 call _endCountFree _cobeginCount[271553])
          }
        }(271582 call _waitEndCount _cobeginCount[271553] 1 2)
      }
    }
    {(271600 call _MergeSort Data[271297] Scratch[271305] lo[271309] mid[271385] minlen[271317] comparator[271323](271598 call + depth[271328] 1))(271618 call _MergeSort Data[271297] Scratch[271305](271609 call + mid[271385] stride[271362]) hi[271313] minlen[271317] comparator[271323](271616 call + depth[271328] 1))
    }
    if(271653 call _cond_test(271629 call ==(271626 call & depth[271328] 1) 0))
    {(271639 call _Merge Data[271297] Scratch[271305] lo[271309] mid[271385] hi[271313] comparator[271323])
    }
    {(271650 call _Merge Scratch[271305] Data[271297] lo[271309] mid[271385] hi[271313] comparator[271323])
    }(355347 'used modules list'(271344 'import' InsertionSort[270092]))
  }
  {(271336 call ==(271332 call . Dom[271292] c"rank") 1)
  } function _Merge[271672](arg Dst[271669] :(271667 call chpl__buildArrayRuntimeType unknown Dom[271662] unknown eltType[271665]), arg Src[271677] :(271674 call chpl__buildArrayRuntimeType nil[44]), arg lo[271681] : int(64)[13], arg mid[271685] : int(64)[13], arg hi[271689] : int(64)[13], arg comparator[271695] : unknown rec[271692] = defaultComparator[267977]) : _unknown[51] "private" "no return value for void"
  { const stride[271714] "const"(271711 IfExpr (271700 call . Dom[271662] c"stridable") then
    { scopeless(271709 call abs(271705 call . Dom[271662] c"stride"))
    } else
    { scopeless 1
    } )(271717 'end of statement') const a1range[271737] "const"(271734 IfExpr (271720 call . Dom[271662] c"stridable") then
    { scopeless(271728 call chpl_by(271725 call chpl_build_bounded_range lo[271681] mid[271685]) stride[271714])
    } else
    { scopeless(271732 call chpl_build_bounded_range lo[271681] mid[271685])
    } )(271740 'end of statement') const a1max[271742] "const" mid[271685](271745 'end of statement') const a2range[271770] "const"(271767 IfExpr (271747 call . Dom[271662] c"stridable") then
    { scopeless(271758 call chpl_by(271755 call chpl_build_bounded_range(271752 call + mid[271685] stride[271714]) hi[271689]) stride[271714])
    } else
    { scopeless(271765 call chpl_build_bounded_range(271762 call + mid[271685] 1) hi[271689])
    } )(271773 'end of statement') const a2max[271775] "const" hi[271689](271778 'end of statement') unknown A1[271783] "ref var"(271782 call Src[271677] a1range[271737])(271786 'end of statement') unknown A2[271791] "ref var"(271790 call Src[271677] a2range[271770])(271794 'end of statement') unknown a1[271799](271796 call . a1range[271737] c"first")(271802 'end of statement') unknown a2[271807](271804 call . a2range[271770] c"first")(271810 'end of statement') unknown i[271812] lo[271681](271815 'end of statement')
    { unknown tmp[271890] "temp"(271926 'move' tmp[271890](271915 call _cond_test(271917 call &&(271919 call <= a1[271799] a1max[271742])(271923 call <= a2[271807] a2max[271775]))))
      WhileDo[271895]
      {
        {
          if(271885 call _cond_test(271839 call <=(271837 call chpl_compare(271830 call A1[271783] a1[271799])(271835 call A2[271791] a2[271807]) comparator[271695]) 0))
          {(271849 call =(271844 call Dst[271669] i[271812])(271848 call A1[271783] a1[271799]))(271855 call += a1[271799] stride[271714])(271860 call += i[271812] stride[271714])
          }
          {(271871 call =(271866 call Dst[271669] i[271812])(271870 call A2[271791] a2[271807]))(271877 call += a2[271807] stride[271714])(271882 call += i[271812] stride[271714])
          }
        } label _continueLabel[271893](271910 'move' tmp[271890](271899 call _cond_test(271901 call &&(271903 call <= a1[271799] a1max[271742])(271907 call <= a2[271807] a2max[271775])))) tmp[271890]
      } label _breakLabel[271894]
    }
    { unknown tmp[271955] "temp"(271979 'move' tmp[271955](271974 call _cond_test(271976 call <= a1[271799] a1max[271742])))
      WhileDo[271960]
      {
        {(271941 call =(271936 call Dst[271669] i[271812])(271940 call A1[271783] a1[271799]))(271947 call += a1[271799] stride[271714])(271952 call += i[271812] stride[271714])
        } label _continueLabel[271958](271969 'move' tmp[271955](271964 call _cond_test(271966 call <= a1[271799] a1max[271742]))) tmp[271955]
      } label _breakLabel[271959]
    }
    { unknown tmp[272008] "temp"(272032 'move' tmp[272008](272027 call _cond_test(272029 call <= a2[271807] a2max[271775])))
      WhileDo[272013]
      {
        {(271994 call =(271989 call Dst[271669] i[271812])(271993 call A2[271791] a2[271807]))(272000 call += a2[271807] stride[271714])(272005 call += i[271812] stride[271714])
        } label _continueLabel[272011](272022 'move' tmp[272008](272017 call _cond_test(272019 call <= a2[271807] a2max[271775]))) tmp[272008]
      } label _breakLabel[272012]
    }
  }(355344 'used modules list'(353028 'use' ChapelStandard[20264])(271197 'use' Sort[267968]))
}