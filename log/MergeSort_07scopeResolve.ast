AST dump for MergeSort after pass scopeResolve.
Module use list: ChapelStandard Sort InsertionSort 

{ function mergeSort[271301](arg Data[271298] :(271296 call chpl__buildArrayRuntimeType unknown Dom[271291] unknown eltType[271294]), arg minlen[271304] = 16, arg comparator[271310] : unknown rec[271307] = defaultComparator[268065]) : _unknown[51] "no return value for void"
  {(271318 call chpl_check_comparator comparator[271310] eltType[271294])
    if(271350 call _cond_test(271326 call !=(271322 call . Dom[271291] c"rank") 1))
    {(271347 call compilerError "mergeSort() requires 1-D array")
    } unknown Scratch[271356](271355 'typeof' Data[271298])(271359 'end of statement')(271375 call _MergeSort Data[271298] Scratch[271356](271365 call . Dom[271291] c"alignedLow")(271369 call . Dom[271291] c"alignedHigh") minlen[271304] comparator[271310] 0)
  } function _MergeSort[271389](arg Data[271386] :(271384 call chpl__buildArrayRuntimeType unknown Dom[271381]), arg Scratch[271394] :(271391 call chpl__buildArrayRuntimeType nil[44]), arg lo[271398] : int(64)[13], arg hi[271402] : int(64)[13], arg minlen[271406] = 16, arg comparator[271412] : unknown rec[271409] = defaultComparator[268065], arg depth[271417] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  { const stride[271451] "const"(271448 IfExpr (271437 call . Dom[271381] c"stridable") then
    { scopeless(271446 call abs(271442 call . Dom[271381] c"stride"))
    } else
    { scopeless 1
    } ) const size[271461] "const"(271459 call /(271456 call - hi[271402] lo[271398]) stride[271451]) const mid[271474] "const"(271472 call + lo[271398](271470 call *(271467 call / size[271461] 2) stride[271451]))(271477 'end of statement')
    if(271588 call _cond_test(271504 call ||(271483 call <(271480 call + size[271461] 1) minlen[271406])(271502 call &&(271490 call ==(271487 call & depth[271417] 1) 0)(271500 call <(271494 call + size[271461] 1)(271498 call * 2 minlen[271406])))))
    {(271518 call insertionSort module=[255] InsertionSort[270181] Data[271386](comparator = comparator[271412]) lo[271398] hi[271402])
      if(271582 call _cond_test(271523 call & depth[271417] 1))
      {
        if(271575 call _cond_test(271526 call . Dom[271381] c"stridable"))
        {(271555 call =(271541 call Scratch[271394](271538 call chpl_by(271532 call chpl_build_bounded_range lo[271398] hi[271402])(271535 call . Dom[271381] c"stride")))(271554 call Data[271386](271551 call chpl_by(271545 call chpl_build_bounded_range lo[271398] hi[271402])(271548 call . Dom[271381] c"stride"))))
        }
        {(271572 call =(271564 call Scratch[271394](271561 call chpl_build_bounded_range lo[271398] hi[271402]))(271571 call Data[271386](271568 call chpl_build_bounded_range lo[271398] hi[271402])))
        }
      }(271586 return _void[55])(364292 'referenced modules list' InsertionSort[270181])
    }
    if(271709 call _cond_test(271606 call <(271597 call(271593 call .(364300 call here[90438]) c"runningTasks"))(271605 call(271599 call .(364302 call here[90438]) c"numPUs")(logical = 1))))
    {
      { const _cobeginCount[271642] "const" "end count" "temp"(271663 'move' _cobeginCount[271642](271660 call _endCountAlloc 1))(271655 call _upEndCount _cobeginCount[271642] 1 2)
        {
          {(271620 call _MergeSort Data[271386] Scratch[271394] lo[271398] mid[271474] minlen[271406] comparator[271412](271618 call + depth[271417] 1))
          }(271645 call _downEndCount _cobeginCount[271642] nil[44])(271644 'cobegin block')
        }
        {
          {(271639 call _MergeSort Data[271386] Scratch[271394](271630 call + mid[271474] stride[271451]) hi[271402] minlen[271406] comparator[271412](271637 call + depth[271417] 1))
          }(271651 call _downEndCount _cobeginCount[271642] nil[44])(271650 'cobegin block')
        }
        Defer
        {
          {(271666 call _endCountFree _cobeginCount[271642])
          }
        }(271671 call _waitEndCount _cobeginCount[271642] 1 2)
      }
    }
    {(271689 call _MergeSort Data[271386] Scratch[271394] lo[271398] mid[271474] minlen[271406] comparator[271412](271687 call + depth[271417] 1))(271707 call _MergeSort Data[271386] Scratch[271394](271698 call + mid[271474] stride[271451]) hi[271402] minlen[271406] comparator[271412](271705 call + depth[271417] 1))
    }
    if(271742 call _cond_test(271718 call ==(271715 call & depth[271417] 1) 0))
    {(271728 call _Merge Data[271386] Scratch[271394] lo[271398] mid[271474] hi[271402] comparator[271412])
    }
    {(271739 call _Merge Scratch[271394] Data[271386] lo[271398] mid[271474] hi[271402] comparator[271412])
    }(355458 'used modules list'(271433 'import' InsertionSort[270181]))
  }
  {(271425 call ==(271421 call . Dom[271381] c"rank") 1)
  } function _Merge[271761](arg Dst[271758] :(271756 call chpl__buildArrayRuntimeType unknown Dom[271751] unknown eltType[271754]), arg Src[271766] :(271763 call chpl__buildArrayRuntimeType nil[44]), arg lo[271770] : int(64)[13], arg mid[271774] : int(64)[13], arg hi[271778] : int(64)[13], arg comparator[271784] : unknown rec[271781] = defaultComparator[268065]) : _unknown[51] "private" "no return value for void"
  { const stride[271803] "const"(271800 IfExpr (271789 call . Dom[271751] c"stridable") then
    { scopeless(271798 call abs(271794 call . Dom[271751] c"stride"))
    } else
    { scopeless 1
    } )(271806 'end of statement') const a1range[271826] "const"(271823 IfExpr (271809 call . Dom[271751] c"stridable") then
    { scopeless(271817 call chpl_by(271814 call chpl_build_bounded_range lo[271770] mid[271774]) stride[271803])
    } else
    { scopeless(271821 call chpl_build_bounded_range lo[271770] mid[271774])
    } )(271829 'end of statement') const a1max[271831] "const" mid[271774](271834 'end of statement') const a2range[271859] "const"(271856 IfExpr (271836 call . Dom[271751] c"stridable") then
    { scopeless(271847 call chpl_by(271844 call chpl_build_bounded_range(271841 call + mid[271774] stride[271803]) hi[271778]) stride[271803])
    } else
    { scopeless(271854 call chpl_build_bounded_range(271851 call + mid[271774] 1) hi[271778])
    } )(271862 'end of statement') const a2max[271864] "const" hi[271778](271867 'end of statement') unknown A1[271872] "ref var"(271871 call Src[271766] a1range[271826])(271875 'end of statement') unknown A2[271880] "ref var"(271879 call Src[271766] a2range[271859])(271883 'end of statement') unknown a1[271888](271885 call . a1range[271826] c"first")(271891 'end of statement') unknown a2[271896](271893 call . a2range[271859] c"first")(271899 'end of statement') unknown i[271901] lo[271770](271904 'end of statement')
    { unknown tmp[271979] "temp"(272015 'move' tmp[271979](272004 call _cond_test(272006 call &&(272008 call <= a1[271888] a1max[271831])(272012 call <= a2[271896] a2max[271864]))))
      WhileDo[271984]
      {
        {
          if(271974 call _cond_test(271928 call <=(271926 call chpl_compare(271919 call A1[271872] a1[271888])(271924 call A2[271880] a2[271896]) comparator[271784]) 0))
          {(271938 call =(271933 call Dst[271758] i[271901])(271937 call A1[271872] a1[271888]))(271944 call += a1[271888] stride[271803])(271949 call += i[271901] stride[271803])
          }
          {(271960 call =(271955 call Dst[271758] i[271901])(271959 call A2[271880] a2[271896]))(271966 call += a2[271896] stride[271803])(271971 call += i[271901] stride[271803])
          }
        } label _continueLabel[271982](271999 'move' tmp[271979](271988 call _cond_test(271990 call &&(271992 call <= a1[271888] a1max[271831])(271996 call <= a2[271896] a2max[271864])))) tmp[271979]
      } label _breakLabel[271983]
    }
    { unknown tmp[272044] "temp"(272068 'move' tmp[272044](272063 call _cond_test(272065 call <= a1[271888] a1max[271831])))
      WhileDo[272049]
      {
        {(272030 call =(272025 call Dst[271758] i[271901])(272029 call A1[271872] a1[271888]))(272036 call += a1[271888] stride[271803])(272041 call += i[271901] stride[271803])
        } label _continueLabel[272047](272058 'move' tmp[272044](272053 call _cond_test(272055 call <= a1[271888] a1max[271831]))) tmp[272044]
      } label _breakLabel[272048]
    }
    { unknown tmp[272097] "temp"(272121 'move' tmp[272097](272116 call _cond_test(272118 call <= a2[271896] a2max[271864])))
      WhileDo[272102]
      {
        {(272083 call =(272078 call Dst[271758] i[271901])(272082 call A2[271880] a2[271896]))(272089 call += a2[271896] stride[271803])(272094 call += i[271901] stride[271803])
        } label _continueLabel[272100](272111 'move' tmp[272097](272106 call _cond_test(272108 call <= a2[271896] a2max[271864]))) tmp[272097]
      } label _breakLabel[272101]
    }
  }(355455 'used modules list'(353137 'use' ChapelStandard[20267])(271286 'use' Sort[268056]))
}