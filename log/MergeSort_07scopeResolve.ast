AST dump for MergeSort after pass scopeResolve.
Module use list: ChapelStandard Sort InsertionSort 

{ function mergeSort[271232](arg Data[271229] :(271227 call chpl__buildArrayRuntimeType unknown Dom[271222] unknown eltType[271225]), arg minlen[271235] = 16, arg comparator[271241] : unknown rec[271238] = defaultComparator[267996]) : _unknown[51] "no return value for void"
  {(271249 call chpl_check_comparator comparator[271241] eltType[271225])
    if(271281 call _cond_test(271257 call !=(271253 call . Dom[271222] c"rank") 1))
    {(271278 call compilerError "mergeSort() requires 1-D array")
    } unknown Scratch[271287](271286 'typeof' Data[271229])(271290 'end of statement')(271306 call _MergeSort Data[271229] Scratch[271287](271296 call . Dom[271222] c"alignedLow")(271300 call . Dom[271222] c"alignedHigh") minlen[271235] comparator[271241] 0)
  } function _MergeSort[271320](arg Data[271317] :(271315 call chpl__buildArrayRuntimeType unknown Dom[271312]), arg Scratch[271325] :(271322 call chpl__buildArrayRuntimeType nil[44]), arg lo[271329] : int(64)[13], arg hi[271333] : int(64)[13], arg minlen[271337] = 16, arg comparator[271343] : unknown rec[271340] = defaultComparator[267996], arg depth[271348] : int(64)[13]) : _unknown[51] "private" "no return value for void"
  { const stride[271382] "const"(271379 IfExpr (271368 call . Dom[271312] c"stridable") then
    { scopeless(271377 call abs(271373 call . Dom[271312] c"stride"))
    } else
    { scopeless 1
    } ) const size[271392] "const"(271390 call /(271387 call - hi[271333] lo[271329]) stride[271382]) const mid[271405] "const"(271403 call + lo[271329](271401 call *(271398 call / size[271392] 2) stride[271382]))(271408 'end of statement')
    if(271519 call _cond_test(271435 call ||(271414 call <(271411 call + size[271392] 1) minlen[271337])(271433 call &&(271421 call ==(271418 call & depth[271348] 1) 0)(271431 call <(271425 call + size[271392] 1)(271429 call * 2 minlen[271337])))))
    {(271449 call insertionSort module=[255] InsertionSort[270112] Data[271317](comparator = comparator[271343]) lo[271329] hi[271333])
      if(271513 call _cond_test(271454 call & depth[271348] 1))
      {
        if(271506 call _cond_test(271457 call . Dom[271312] c"stridable"))
        {(271486 call =(271472 call Scratch[271325](271469 call chpl_by(271463 call chpl_build_bounded_range lo[271329] hi[271333])(271466 call . Dom[271312] c"stride")))(271485 call Data[271317](271482 call chpl_by(271476 call chpl_build_bounded_range lo[271329] hi[271333])(271479 call . Dom[271312] c"stride"))))
        }
        {(271503 call =(271495 call Scratch[271325](271492 call chpl_build_bounded_range lo[271329] hi[271333]))(271502 call Data[271317](271499 call chpl_build_bounded_range lo[271329] hi[271333])))
        }
      }(271517 return _void[55])(364221 'referenced modules list' InsertionSort[270112])
    }
    if(271640 call _cond_test(271537 call <(271528 call(271524 call .(364229 call here[90438]) c"runningTasks"))(271536 call(271530 call .(364231 call here[90438]) c"numPUs")(logical = 1))))
    {
      { const _cobeginCount[271573] "const" "end count" "temp"(271594 'move' _cobeginCount[271573](271591 call _endCountAlloc 1))(271586 call _upEndCount _cobeginCount[271573] 1 2)
        {
          {(271551 call _MergeSort Data[271317] Scratch[271325] lo[271329] mid[271405] minlen[271337] comparator[271343](271549 call + depth[271348] 1))
          }(271576 call _downEndCount _cobeginCount[271573] nil[44])(271575 'cobegin block')
        }
        {
          {(271570 call _MergeSort Data[271317] Scratch[271325](271561 call + mid[271405] stride[271382]) hi[271333] minlen[271337] comparator[271343](271568 call + depth[271348] 1))
          }(271582 call _downEndCount _cobeginCount[271573] nil[44])(271581 'cobegin block')
        }
        Defer
        {
          {(271597 call _endCountFree _cobeginCount[271573])
          }
        }(271602 call _waitEndCount _cobeginCount[271573] 1 2)
      }
    }
    {(271620 call _MergeSort Data[271317] Scratch[271325] lo[271329] mid[271405] minlen[271337] comparator[271343](271618 call + depth[271348] 1))(271638 call _MergeSort Data[271317] Scratch[271325](271629 call + mid[271405] stride[271382]) hi[271333] minlen[271337] comparator[271343](271636 call + depth[271348] 1))
    }
    if(271673 call _cond_test(271649 call ==(271646 call & depth[271348] 1) 0))
    {(271659 call _Merge Data[271317] Scratch[271325] lo[271329] mid[271405] hi[271333] comparator[271343])
    }
    {(271670 call _Merge Scratch[271325] Data[271317] lo[271329] mid[271405] hi[271333] comparator[271343])
    }(355387 'used modules list'(271364 'import' InsertionSort[270112]))
  }
  {(271356 call ==(271352 call . Dom[271312] c"rank") 1)
  } function _Merge[271692](arg Dst[271689] :(271687 call chpl__buildArrayRuntimeType unknown Dom[271682] unknown eltType[271685]), arg Src[271697] :(271694 call chpl__buildArrayRuntimeType nil[44]), arg lo[271701] : int(64)[13], arg mid[271705] : int(64)[13], arg hi[271709] : int(64)[13], arg comparator[271715] : unknown rec[271712] = defaultComparator[267996]) : _unknown[51] "private" "no return value for void"
  { const stride[271734] "const"(271731 IfExpr (271720 call . Dom[271682] c"stridable") then
    { scopeless(271729 call abs(271725 call . Dom[271682] c"stride"))
    } else
    { scopeless 1
    } )(271737 'end of statement') const a1range[271757] "const"(271754 IfExpr (271740 call . Dom[271682] c"stridable") then
    { scopeless(271748 call chpl_by(271745 call chpl_build_bounded_range lo[271701] mid[271705]) stride[271734])
    } else
    { scopeless(271752 call chpl_build_bounded_range lo[271701] mid[271705])
    } )(271760 'end of statement') const a1max[271762] "const" mid[271705](271765 'end of statement') const a2range[271790] "const"(271787 IfExpr (271767 call . Dom[271682] c"stridable") then
    { scopeless(271778 call chpl_by(271775 call chpl_build_bounded_range(271772 call + mid[271705] stride[271734]) hi[271709]) stride[271734])
    } else
    { scopeless(271785 call chpl_build_bounded_range(271782 call + mid[271705] 1) hi[271709])
    } )(271793 'end of statement') const a2max[271795] "const" hi[271709](271798 'end of statement') unknown A1[271803] "ref var"(271802 call Src[271697] a1range[271757])(271806 'end of statement') unknown A2[271811] "ref var"(271810 call Src[271697] a2range[271790])(271814 'end of statement') unknown a1[271819](271816 call . a1range[271757] c"first")(271822 'end of statement') unknown a2[271827](271824 call . a2range[271790] c"first")(271830 'end of statement') unknown i[271832] lo[271701](271835 'end of statement')
    { unknown tmp[271910] "temp"(271946 'move' tmp[271910](271935 call _cond_test(271937 call &&(271939 call <= a1[271819] a1max[271762])(271943 call <= a2[271827] a2max[271795]))))
      WhileDo[271915]
      {
        {
          if(271905 call _cond_test(271859 call <=(271857 call chpl_compare(271850 call A1[271803] a1[271819])(271855 call A2[271811] a2[271827]) comparator[271715]) 0))
          {(271869 call =(271864 call Dst[271689] i[271832])(271868 call A1[271803] a1[271819]))(271875 call += a1[271819] stride[271734])(271880 call += i[271832] stride[271734])
          }
          {(271891 call =(271886 call Dst[271689] i[271832])(271890 call A2[271811] a2[271827]))(271897 call += a2[271827] stride[271734])(271902 call += i[271832] stride[271734])
          }
        } label _continueLabel[271913](271930 'move' tmp[271910](271919 call _cond_test(271921 call &&(271923 call <= a1[271819] a1max[271762])(271927 call <= a2[271827] a2max[271795])))) tmp[271910]
      } label _breakLabel[271914]
    }
    { unknown tmp[271975] "temp"(271999 'move' tmp[271975](271994 call _cond_test(271996 call <= a1[271819] a1max[271762])))
      WhileDo[271980]
      {
        {(271961 call =(271956 call Dst[271689] i[271832])(271960 call A1[271803] a1[271819]))(271967 call += a1[271819] stride[271734])(271972 call += i[271832] stride[271734])
        } label _continueLabel[271978](271989 'move' tmp[271975](271984 call _cond_test(271986 call <= a1[271819] a1max[271762]))) tmp[271975]
      } label _breakLabel[271979]
    }
    { unknown tmp[272028] "temp"(272052 'move' tmp[272028](272047 call _cond_test(272049 call <= a2[271827] a2max[271795])))
      WhileDo[272033]
      {
        {(272014 call =(272009 call Dst[271689] i[271832])(272013 call A2[271811] a2[271827]))(272020 call += a2[271827] stride[271734])(272025 call += i[271832] stride[271734])
        } label _continueLabel[272031](272042 'move' tmp[272028](272037 call _cond_test(272039 call <= a2[271827] a2max[271795]))) tmp[272028]
      } label _breakLabel[272032]
    }
  }(355384 'used modules list'(353068 'use' ChapelStandard[20267])(271217 'use' Sort[267987]))
}