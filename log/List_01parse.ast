AST dump for List after pass parse.
Module use list: 

{
  (353060 'use' ChapelStandard)
  (298218 'import' ChapelLocks)
  (298222 'use' HaltWrappers)
  (298225 'use' Sort)
  { scopeless
    const _initialCapacity[298228] "const" "no doc" "private" 8
    (298231 'end of statement')
  }
  { scopeless
    const _initialArrayCapacity[298233] "const" "no doc" "private" 16
    (298236 'end of statement')
  }
  { scopeless
    unknown _sanityChecks[298238] "no doc" "param" "private" 0
    (298241 'end of statement')
  }
  function _sanity[298248](arg expr[298245] :
  bool[10]) : _unknown[51] "inline" "private"
  {
    if(298256 call _cond_test _sanityChecks)
    {
      { scopeless
        (298254 call assert expr)
      }
    }
  }
  unknown _lockType[298270] "no doc" "type variable"(298267 call . ChapelLocks c"chpl_LocalSpinlock")
  type _LockWrapper[298311] unknown lock$[298278](298274 'new'(298277 call _lockType)) function _LockWrapper[298311].lock[298284](arg _mt[298315]:_MT[238], arg this[298313]:_LockWrapper[298311]) : _unknown[51] "inline" "method" "primary method"
  {
    (298291 call(298287 call . lock$ c"lock"))
  } function _LockWrapper[298311].unlock[298298](arg _mt[298319]:_MT[238], arg this[298317]:_LockWrapper[298311]) : _unknown[51] "inline" "method" "primary method"
  {
    (298305 call(298301 call . lock$ c"unlock"))
  }
  function _checkType[298326](arg eltType[298324]:_any[178](?)) : _unknown[51] "no doc"
  {
    if(298404 call _cond_test(298331 call isGenericType eltType))
    {
      (298357 call compilerWarning(298354 call + "creating a list with element type "(298352 call _cast string[26] eltType)))
      if(298379 call _cond_test(298371 call &&(298363 call isClassType eltType)(298369 call !(298368 call isGenericType(298366 'to borrowed class from unknown' eltType)))))
      {
        (298376 call compilerWarning "which now means class type with generic management")
      }
      (298402 call compilerError "list element type cannot currently be generic")
    }
  }
  function _dummyFieldType[298415](arg t[298413]:_any[178](?)) type : _unknown[51] "no doc"
  {
    if(298430 call _cond_test(298420 call isBorrowedClass t))
    {
      (298423 return(298422 'to nilable class from type' t))
    }
    {
      (298427 return nothing[7])
    }
  }
  (298438 'use' IO)
  type list[304193](?) unknown eltType[298441] "type variable" unknown parSafe[298445] "param" 0 unknown _size[298450] "no doc" 0 unknown _lock$[298463] "no doc"(298460 IfExpr  parSafe then
  { scopeless
    (298455 'new'(298458 call _LockWrapper))
  } else
  { scopeless
    none[57]
  } ) unknown _arrays[298475] "no doc" nil[44](298473 call _ddata(298471 call _ddata eltType)) unknown _arrayCapacity[298480] "no doc" 0 unknown _totalCapacity[298485] "no doc" 0 unknown _dummyFieldToForceBorrowChecking[298493] "no doc"(298492 call _dummyFieldType eltType) function list[304193](?).init[298501](arg _mt[304197]:_MT[238], arg this[304195]:list[304193](?), arg eltType[298499]:_any[178](?), param arg parSafe[298504] =
  0) : _unknown[51] "method" "primary method"
  {
    (298510 call _checkType eltType)
    (298518 call =(298514 call . this c"eltType") eltType)
    (298526 call =(298522 call . this c"parSafe") parSafe)
    (298534 call(298530 call . this c"complete"))
    (298543 call(298539 call . this c"_firstTimeInitializeArrays"))
  } function list[304193](?).init[298557](arg _mt[304201]:_MT[238], arg this[304199]:list[304193](?), arg other[298554] :
  (298553 call list unknown t[298550]), param arg parSafe[298560] =
  0) : _unknown[51] "method" "primary method"
  {
    if(298613 call _cond_test(298571 call !(298570 call isCopyableType(298566 call .(298565 'typeof' this) c"eltType"))))
    {
      { scopeless
        (298611 call compilerError(298608 call + "Cannot copy list with element type that " "cannot be copied"))
      }
    }
    (298624 call =(298620 call . this c"eltType") t)
    (298632 call =(298628 call . this c"parSafe") parSafe)
    (298640 call(298636 call . this c"complete"))
    (298645 call _commonInitFromIterable other)
  } function list[304193](?).init[298661](arg _mt[304205]:_MT[238], arg this[304203]:list[304193](?), arg other[298658] :
  (298656 call chpl__buildArrayRuntimeType unknown d[298651] unknown t[298654]), param arg parSafe[298664] =
  0) : _unknown[51] "method" "primary method"
  {
    (298670 call _checkType t)
    if(298719 call _cond_test(298677 call !(298676 call isCopyableType t)))
    {
      { scopeless
        (298717 call compilerError(298714 call + "Cannot construct list from array with element " "type that cannot be copied"))
      }
    }
    (298729 call =(298725 call . this c"eltType") t)
    (298737 call =(298733 call . this c"parSafe") parSafe)
    (298745 call(298741 call . this c"complete"))
    (298750 call _commonInitFromIterable other)
  } function list[304193](?).init[298764](arg _mt[304209]:_MT[238], arg this[304207]:list[304193](?), arg other[298761] :
  (298760 call range unknown t[298757]), param arg parSafe[298767] =
  0) : _unknown[51] "method" "primary method"
  {
    (298773 call _checkType t)
    (298781 call =(298777 call . this c"eltType") t)
    (298789 call =(298785 call . this c"parSafe") parSafe)
    if(298868 call _cond_test(298796 call !(298795 call isBoundedRange other)))
    {
      { scopeless
        unknown e[298803] "param"(298801 call _cast string[26](298799 'typeof' this))
        (298806 'end of statement')
      }
      { scopeless
        unknown f[298813] "param"(298811 call _cast string[26](298809 'typeof' other))
        (298816 'end of statement')
      }
      { scopeless
        unknown msg[298859] "param"(298857 call +(298854 call +(298835 call + "Cannot init " e) " from unbounded ") f)
        (298862 'end of statement')
      }
      (298866 call compilerError msg)
    }
    (298877 call(298873 call . this c"complete"))
    (298882 call _commonInitFromIterable other)
  } function list[304193](?).init=[298901](arg _mt[304213]:_MT[238], arg this[304211]:list[304193](?), arg other[298898] :
  (298897 call list(298891 call .(298890 'typeof' this) c"eltType") unknown p[298895])) : _unknown[51] "method" "primary method"
  {
    if(298921 call _cond_test(298911 call !(298910 call isCopyableType(298906 call .(298905 'typeof' this) c"eltType"))))
    {
      { scopeless
        (298919 call compilerError(298916 call + "Cannot copy list with element type that " "cannot be copied"))
      }
    }
    (298936 call =(298928 call . this c"eltType")(298933 call .(298932 'typeof' this) c"eltType"))
    (298948 call =(298940 call . this c"parSafe")(298945 call .(298944 'typeof' this) c"parSafe"))
    (298956 call(298952 call . this c"complete"))
    (298961 call _commonInitFromIterable other)
  } function list[304193](?).init=[298980](arg _mt[304217]:_MT[238], arg this[304215]:list[304193](?), arg other[298977] :
  (298975 call chpl__buildArrayRuntimeType unknown d[298967](298972 call .(298971 'typeof' this) c"eltType"))) : _unknown[51] "method" "primary method"
  {
    if(299032 call _cond_test(298990 call !(298989 call isCopyableType(298985 call .(298984 'typeof' this) c"eltType"))))
    {
      { scopeless
        (299030 call compilerError(299027 call + "Cannot copy list from array with element type " "that cannot be copied"))
      }
    }
    (299047 call =(299039 call . this c"eltType")(299044 call .(299043 'typeof' this) c"eltType"))
    (299059 call =(299051 call . this c"parSafe")(299056 call .(299055 'typeof' this) c"parSafe"))
    (299067 call(299063 call . this c"complete"))
    (299072 call _commonInitFromIterable other)
  } function list[304193](?).init=[299093](arg _mt[304221]:_MT[238], arg this[304219]:list[304193](?), arg other[299090] :
  (299089 call range(299081 call .(299080 'typeof' this) c"eltType") unknown b[299085] unknown d[299087])) : _unknown[51] "method" "primary method"
  {
    (299104 call =(299096 call . this c"eltType")(299101 call .(299100 'typeof' this) c"eltType"))
    (299117 call =(299109 call . this c"parSafe")(299114 call .(299113 'typeof' this) c"parSafe"))
    if(299164 call _cond_test(299124 call !(299123 call isBoundedRange other)))
    {
      { scopeless
        unknown e[299131] "param"(299129 call _cast string[26](299127 'typeof' this))
        (299134 'end of statement')
      }
      { scopeless
        unknown f[299141] "param"(299139 call _cast string[26](299137 'typeof' other))
        (299144 'end of statement')
      }
      { scopeless
        unknown msg[299155] "param"(299153 call +(299150 call +(299147 call + "Cannot init " e) " from unbounded ") f)
        (299158 'end of statement')
      }
      (299162 call compilerError msg)
    }
    (299173 call(299169 call . this c"complete"))
    (299178 call _commonInitFromIterable other)
  } function list[304193](?)._commonInitFromIterable[299186](arg _mt[304225]:_MT[238], arg this[304223]:list[304193](?), arg iterable[299184]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (299199 call(299195 call . this c"_firstTimeInitializeArrays"))
    {
      unknown _indexOfInterest[299209] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[299210] "expr temp" "temp"
      (299219 'move' _iterator[299210](299217 call _getIterator iterable))
      Defer
      {
        {
          (299235 call _freeIterator _iterator[299210])
        }
      }
      { scopeless type
        (299224 'move' _indexOfInterest[299209](299221 call iteratorIndex _iterator[299210]))
      }
      ForLoop[299211]
      {
        unknown x[299228] "index var" "insert auto destroy"
        (299230 'move' x[299228] _indexOfInterest[299209])
        { scopeless
          (299207 call append x)
        }
        label _continueLabel[299214]
        _indexOfInterest[299209]
        _iterator[299210]
      }
      label _breakLabel[299215]
    }
  }
  {
    (299192 call <(299189 'lifetime_of' this)(299191 'lifetime_of' iterable))
  } function list[304193](?)._firstTimeInitializeArrays[299247](arg _mt[304229]:_MT[238], arg this[304227]:list[304193](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (299255 call _sanity(299252 call == _arrays nil[44]))
    (299264 call _sanity(299261 call == _totalCapacity 0))
    (299272 call _sanity(299269 call == _size 0))
    (299279 call = _arrays(299278 call _makeBlockArray _initialArrayCapacity))
    (299284 call = _arrayCapacity _initialArrayCapacity)
    (299295 call =(299290 call _arrays 0)(299294 call _makeArray _initialCapacity))
    (299300 call = _totalCapacity _initialCapacity)
  } function list[304193](?).deinit[299307](arg _mt[304233]:_MT[238], arg this[304231]:list[304193](?)) : _unknown[51] "destructor" "inline" "method" "primary method" "no doc"
  {
    (299311 call _fireAllDestructors)
    (299316 call _freeAllArrays)
    (299324 call _sanity(299321 call == _totalCapacity 0))
    (299332 call _sanity(299329 call == _size 0))
    (299340 call _sanity(299337 call == _arrays nil[44]))
  } function list[304193](?)._destroy[299350](arg _mt[304237]:_MT[238], arg this[304235]:list[304193](?), ref arg item[299347] :
  eltType) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (299355 call chpl__autoDestroy item)
  } function list[304193](?)._move[299367](arg _mt[304241]:_MT[238], arg this[304239]:list[304193](?), ref arg src[299364] :
  unknown t[299362], ref arg dst[299370] :
  t) : _unknown[51] "inline" "method" "primary method" "no doc" "unsafe"
  {
    (299383 '=' dst src)
  }
  {
    (299377 call ==(299374 'lifetime_of' src)(299376 'lifetime_of' dst))
  } function list[304193](?)._getArrayCapacity[299395](arg _mt[304245]:_MT[238], arg this[304243]:list[304193](?), arg array[299392] :
  int[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    { scopeless
      const exp[299405] "const"(299403 call + array(299402 call log2 _initialCapacity))
      (299408 'end of statement')
    }
    { scopeless
      const result[299414] "const"(299412 call ** 2 exp)
      (299417 'end of statement')
    }
    (299419 return result)
  }
  { scopeless type
    int[13]
  } function list[304193](?)._getArrayIdx[299430](arg _mt[304249]:_MT[238], arg this[304247]:list[304193](?), arg zpos[299427] :
  int[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    { scopeless
      const adj[299437] "const"(299435 call + zpos _initialCapacity)
      (299440 'end of statement')
    }
    { scopeless
      const result[299452] "const"(299450 call -(299445 call log2 adj)(299449 call log2 _initialCapacity))
      (299455 'end of statement')
    }
    (299457 return result)
  }
  { scopeless type
    int[13]
  } function list[304193](?)._getLastArrayIdx[299464](arg _mt[304253]:_MT[238], arg this[304251]:list[304193](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    { scopeless
      const result[299474] "const"(299473 call _getArrayIdx(299470 call - _size 1))
      (299477 'end of statement')
    }
    (299485 call _sanity(299482 call >= result 0))
    (299488 return result)
  }
  { scopeless type
    int[13]
  } function list[304193](?)._getItemIdx[299499](arg _mt[304257]:_MT[238], arg this[304255]:list[304193](?), arg zpos[299496] :
  int[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    { scopeless
      const adj[299506] "const"(299504 call + zpos _initialCapacity)
      (299509 'end of statement')
    }
    { scopeless
      const result[299521] "const"(299519 call ^ adj(299517 call << 1(299516 call log2 adj)))
      (299524 'end of statement')
    }
    (299526 return result)
  }
  { scopeless type
    int[13]
  } function list[304193](?)._getRef[299537](arg _mt[304261]:_MT[238], const  ref arg this[304259]:list[304193](?), arg idx[299534] :
  int[13]) ref : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (299551 call _sanity(299548 call &&(299542 call >= idx 0)(299546 call < idx _totalCapacity)))
    { scopeless
      const arrayIdx[299558] "const"(299557 call _getArrayIdx idx)
      (299561 'end of statement')
    }
    { scopeless
      const itemIdx[299566] "const"(299565 call _getItemIdx idx)
      (299569 'end of statement')
    }
    { scopeless
      const array[299574] "const"(299573 call _arrays arrayIdx)
      (299577 'end of statement')
    }
    (299584 call _sanity(299581 call != array nil[44]))
    { scopeless
      unknown result[299590] "ref var"(299589 call array itemIdx)
      (299593 'end of statement')
    }
    (299595 return result)
  } function list[304193](?)._enter[299601](arg _mt[304265]:_MT[238], arg this[304263]:list[304193](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(299611 call _cond_test parSafe)
    {
      { scopeless
        (299609 call(299605 call . _lock$ c"lock"))
      }
    }
  } function list[304193](?)._leave[299621](arg _mt[304269]:_MT[238], arg this[304267]:list[304193](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    if(299631 call _cond_test parSafe)
    {
      { scopeless
        (299629 call(299625 call . _lock$ c"unlock"))
      }
    }
  } function list[304193](?)._withinBounds[299645](arg _mt[304273]:_MT[238], const arg this[304271]:list[304193](?), arg idx[299642] :
  int[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (299658 return(299656 call &&(299650 call >= idx 0)(299654 call < idx _size)))
  }
  { scopeless type
    bool[10]
  } function list[304193](?)._boundsCheckLeaveOnThrow[299670](arg _mt[304277]:_MT[238], const arg this[304275]:list[304193](?), arg i[299667] :
  int[13], arg umsg[299690] :
  string[26] =
  "") : _unknown[51] throws "inline" "method" "primary method" "no doc"
  {
    if(299765 call _cond_test(299698 call !(299697 call _withinBounds i)))
    {
      (299702 call _leave)
      { scopeless
        const msg[299752] "const"(299749 IfExpr (299723 call != umsg "") then
        { scopeless
          umsg
        } else
        { scopeless
          (299747 call + "Index out of bounds: "(299745 call _cast string[26] i))
        } )
        (299755 'end of statement')
      }
      (299763 'throw'(299758 'new'(_chpl_manager = _owned[30](?))(299762 call IllegalArgumentError msg)))
    }
  } function list[304193](?)._makeBlockArray[299778](arg _mt[304281]:_MT[238], arg this[304279]:list[304193](?), arg size[299775] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (299788 return(299787 call _ddata_allocate(299784 call _ddata eltType) size))
  } function list[304193](?)._freeBlockArray[299805](arg _mt[304285]:_MT[238], arg this[304283]:list[304193](?), arg data[299802] :
  (299801 call _ddata(299799 call _ddata eltType)), arg size[299808] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (299815 call _ddata_free data size)
  } function list[304193](?)._makeArray[299826](arg _mt[304289]:_MT[238], arg this[304287]:list[304193](?), arg size[299823] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (299835 return(299834 call _ddata_allocate eltType size(initElts = 0)))
  } function list[304193](?)._freeArray[299849](arg _mt[304293]:_MT[238], arg this[304291]:list[304193](?), arg data[299846] :
  (299845 call _ddata eltType), arg size[299852] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (299859 call _ddata_free data size)
  } function list[304193](?)._maybeAcquireMem[299870](arg _mt[304297]:_MT[238], arg this[304295]:list[304193](?), arg amount[299867] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      const remaining[299876] "const"(299874 call - _totalCapacity _size)
      (299879 'end of statement')
    }
    (299887 call _sanity(299884 call >= remaining 0))
    if(299895 call _cond_test(299891 call >= remaining amount))
    {
      { scopeless
        (299893 return)
      }
    }
    { scopeless
      unknown lastArrayIdx[299911](299908 IfExpr (299902 call == _size 0) then
      { scopeless
        0
      } else
      { scopeless
        (299907 call _getLastArrayIdx)
      } )
      (299914 'end of statement')
    }
    { scopeless
      unknown req[299919](299917 call - amount remaining)
      (299922 'end of statement')
    }
    {
      unknown tmp[300122] "temp"
      (300146 'move' tmp[300122](300141 call _cond_test(300143 call > req 0)))
      WhileDo[300127]
      {
        {
          if(300032 call _cond_test(299932 call >= lastArrayIdx(299930 call - _arrayCapacity 1)))
          {
            { scopeless
              const tmp[300024] "const" "temp"
              (300026 'move' tmp[300024](300022 'deref'(300021 '_wide_get_locale' this)))
              {
                {
                  { scopeless
                    unknown _narrays[299942](299941 call _makeBlockArray(299938 call * _arrayCapacity 2))
                    (299945 'end of statement')
                  }
                  {
                    unknown _indexOfInterest[299965] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[299966] "expr temp" "temp"
                    (299975 'move' _iterator[299966](299973 call _getIterator(299982 call chpl_direct_counted_range_iter 0 _arrayCapacity)))
                    Defer
                    {
                      {
                        (299998 call _freeIterator _iterator[299966])
                      }
                    }
                    { scopeless type
                      (299987 'move' _indexOfInterest[299965](299984 call iteratorIndex _iterator[299966]))
                    }
                    ForLoop[299967]
                    {
                      unknown i[299991] "index var" "insert auto destroy"
                      (299993 'move' i[299991] _indexOfInterest[299965])
                      { scopeless
                        (299962 call =(299957 call _narrays i)(299961 call _arrays i))
                      }
                      label _continueLabel[299970]
                      _indexOfInterest[299965]
                      _iterator[299966]
                    }
                    label _breakLabel[299971]
                  }
                  (300009 call _freeBlockArray _arrays _arrayCapacity)
                  (300013 call = _arrays _narrays)
                  (300018 call *= _arrayCapacity 2)
                }
                (300029 'on block' 0 tmp[300024])
              }
            }
          }
          { scopeless
            const tmp[300114] "const" "temp"
            (300116 'move' tmp[300114](300112 'deref'(300111 '_wide_get_locale' this)))
            {
              {
                { scopeless
                  const oldLast[300043] "const"(300042 call _arrays lastArrayIdx)
                  (300046 'end of statement')
                }
                { scopeless
                  const oldLastCapacity[300052] "const"(300051 call _getArrayCapacity lastArrayIdx)
                  (300055 'end of statement')
                }
                (300058 call += lastArrayIdx 1)
                { scopeless
                  unknown newLast[300065] "ref var"(300064 call _arrays lastArrayIdx)
                  (300068 'end of statement')
                }
                { scopeless
                  const newLastCapacity[300073] "const"(300071 call * oldLastCapacity 2)
                  (300076 'end of statement')
                }
                (300083 call _sanity(300080 call != oldLast nil[44]))
                (300091 call _sanity(300088 call == newLast nil[44]))
                (300098 call = newLast(300097 call _makeArray newLastCapacity))
                (300103 call += _totalCapacity newLastCapacity)
                (300108 call -= req newLastCapacity)
              }
              (300119 'on block' 0 tmp[300114])
            }
          }
        }
        label _continueLabel[300125]
        (300136 'move' tmp[300122](300131 call _cond_test(300133 call > req 0)))
        tmp[300122]
      }
      label _breakLabel[300126]
    }
    (300149 return)
  } function list[304193](?)._maybeReleaseMem[300159](arg _mt[304301]:_MT[238], arg this[304299]:list[304193](?), arg amount[300156] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    if(300167 call _cond_test(300163 call <= _totalCapacity _initialCapacity))
    {
      { scopeless
        (300165 return)
      }
    }
    { scopeless
      const lastArrayIdx[300176] "const"(300175 call _getLastArrayIdx)
      (300179 'end of statement')
    }
    (300186 call _sanity(300183 call != lastArrayIdx 0))
    { scopeless
      const lastArrayCapacity[300192] "const"(300191 call _getArrayCapacity lastArrayIdx)
      (300195 'end of statement')
    }
    { scopeless
      const threshold[300200] "const"(300198 call - _totalCapacity lastArrayCapacity)
      (300203 'end of statement')
    }
    { scopeless
      const nsize[300208] "const"(300206 call - _size amount)
      (300211 'end of statement')
    }
    if(300218 call _cond_test(300214 call > nsize threshold))
    {
      { scopeless
        (300216 return)
      }
    }
    { scopeless
      unknown array[300227] "ref var"(300226 call _arrays lastArrayIdx)
      (300230 'end of statement')
    }
    (300237 call _sanity(300234 call != array nil[44]))
    (300243 call _freeArray array lastArrayCapacity)
    (300247 call -= _totalCapacity lastArrayCapacity)
    (300252 call = array nil[44])
  } function list[304193](?)._expand[300263](arg _mt[304305]:_MT[238], ref arg this[304303]:list[304193](?), arg idx[300260] :
  int[13], arg shift[300267] :
  int[13] =
  1) : _unknown[51] "method" "primary method" "no doc"
  {
    (300277 call _sanity(300275 call _withinBounds idx))
    if(300286 call _cond_test(300282 call <= shift 0))
    {
      { scopeless
        (300284 return)
      }
    }
    { scopeless
      const tmp[300390] "const" "temp"
      (300392 'move' tmp[300390](300388 'deref'(300387 '_wide_get_locale' this)))
      {
        {
          (300295 call _maybeAcquireMem shift)
          {
            unknown _indexOfInterest[300337] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[300338] "expr temp" "temp"
            (300347 'move' _iterator[300338](300345 call _getIterator(300364 call chpl_direct_range_iter idx(300361 call - _size 1)(300357 call - 1))))
            Defer
            {
              {
                (300380 call _freeIterator _iterator[300338])
              }
            }
            { scopeless type
              (300369 'move' _indexOfInterest[300337](300366 call iteratorIndex _iterator[300338]))
            }
            ForLoop[300339]
            {
              unknown i[300373] "index var" "insert auto destroy"
              (300375 'move' i[300373] _indexOfInterest[300337])
              {
                { scopeless
                  unknown src[300315] "ref var"(300314 call _getRef i)
                  (300318 'end of statement')
                }
                { scopeless
                  unknown dst[300327] "ref var"(300326 call _getRef(300323 call + i shift))
                  (300330 'end of statement')
                }
                (300335 call _move src dst)
              }
              label _continueLabel[300342]
              _indexOfInterest[300337]
              _iterator[300338]
            }
            label _breakLabel[300343]
          }
        }
        (300395 'on block' 0 tmp[300390])
      }
    }
    (300398 return)
  } function list[304193](?)._collapse[300408](arg _mt[304309]:_MT[238], ref arg this[304307]:list[304193](?), arg idx[300405] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (300416 call _sanity(300414 call _withinBounds idx))
    if(300446 call _cond_test(300424 call == idx(300422 call - _size 1)))
    {
      { scopeless
        const tmp[300435] "const" "temp"
        (300437 'move' tmp[300435](300433 'deref'(300432 '_wide_get_locale' this)))
        {
          { scopeless
            (300430 call _maybeReleaseMem 1)
          }
          (300440 'on block' 0 tmp[300435])
        }
      }
      (300444 return)
    }
    { scopeless
      const tmp[300535] "const" "temp"
      (300537 'move' tmp[300535](300533 'deref'(300532 '_wide_get_locale' this)))
      {
        {
          {
            unknown _indexOfInterest[300485] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[300486] "expr temp" "temp"
            (300495 'move' _iterator[300486](300493 call _getIterator(300503 call chpl_direct_range_iter idx(300500 call - _size 2) 1)))
            Defer
            {
              {
                (300519 call _freeIterator _iterator[300486])
              }
            }
            { scopeless type
              (300508 'move' _indexOfInterest[300485](300505 call iteratorIndex _iterator[300486]))
            }
            ForLoop[300487]
            {
              unknown i[300512] "index var" "insert auto destroy"
              (300514 'move' i[300512] _indexOfInterest[300485])
              {
                { scopeless
                  unknown src[300466] "ref var"(300465 call _getRef(300462 call + i 1))
                  (300469 'end of statement')
                }
                { scopeless
                  unknown dst[300475] "ref var"(300474 call _getRef i)
                  (300478 'end of statement')
                }
                (300483 call _move src dst)
              }
              label _continueLabel[300490]
              _indexOfInterest[300485]
              _iterator[300486]
            }
            label _breakLabel[300491]
          }
          (300530 call _maybeReleaseMem 1)
        }
        (300540 'on block' 0 tmp[300535])
      }
    }
    (300543 return)
  } function list[304193](?)._appendByRef[300553](arg _mt[304313]:_MT[238], ref arg this[304311]:list[304193](?), ref arg x[300550] :
  eltType) : _unknown[51] "method" "primary method" "no doc"
  {
    (300558 call _maybeAcquireMem 1)
    { scopeless
      unknown src[300562] "ref var" x
      (300565 'end of statement')
    }
    { scopeless
      unknown dst[300570] "ref var"(300569 call _getRef _size)
      (300573 'end of statement')
    }
    (300578 call _move src dst)
    (300582 call += _size 1)
  } function list[304193](?).append[300596](arg _mt[304317]:_MT[238], ref arg this[304315]:list[304193](?), in arg x[300593] :
  (300590 call . this c"eltType")) : _unknown[51] "method" "primary method"
  {
    (300606 call _enter)
    (300612 call _appendByRef x)
    (300616 call _leave)
  }
  {
    (300602 call <(300599 'lifetime_of' this)(300601 'lifetime_of' x))
  } function list[304193](?).contains[300627](arg _mt[304321]:_MT[238], const arg this[304319]:list[304193](?), arg x[300624] :
  eltType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[300631] 0
      (300634 'end of statement')
    }
    { scopeless
      const tmp[300701] "const" "temp"
      (300703 'move' tmp[300701](300699 'deref'(300698 '_wide_get_locale' this)))
      {
        {
          (300639 call _enter)
          {
            unknown _indexOfInterest[300661] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[300662] "expr temp" "temp"
            (300671 'move' _iterator[300662](300669 call _getIterator this))
            Defer
            {
              {
                (300687 call _freeIterator _iterator[300662])
              }
            }
            { scopeless type
              (300676 'move' _indexOfInterest[300661](300673 call iteratorIndex _iterator[300662]))
            }
            ForLoop[300663]
            {
              unknown item[300680] "index var" "insert auto destroy"
              (300682 'move' item[300680] _indexOfInterest[300661])
              { scopeless
                if(300657 call _cond_test(300646 call == item x))
                {
                  (300650 call = result 1)
                  break nil[44]
                }
              }
              label _continueLabel[300666]
              _indexOfInterest[300661]
              _iterator[300662]
            }
            label _breakLabel[300667]
          }
          (300696 call _leave)
        }
        (300706 'on block' 0 tmp[300701])
      }
    }
    (300710 return result)
  }
  { scopeless type
    bool[10]
  } function list[304193](?).first[300717](arg _mt[304325]:_MT[238], ref arg this[304323]:list[304193](?)) ref : _unknown[51] "method" "primary method"
  {
    (300721 call _enter)
    if(300757 call _cond_test(300729 call && boundsChecking(300727 call == _size 0)))
    {
      (300733 call _leave)
      (300755 call boundsCheckHalt "Called \"list.first\" on an empty list.")
    }
    { scopeless
      unknown result[300765] "ref var"(300764 call _getRef 0)
      (300768 'end of statement')
    }
    (300771 call _leave)
    (300774 return result)
  } function list[304193](?).last[300780](arg _mt[304329]:_MT[238], ref arg this[304327]:list[304193](?)) ref : _unknown[51] "method" "primary method"
  {
    (300784 call _enter)
    if(300820 call _cond_test(300792 call && boundsChecking(300790 call == _size 0)))
    {
      (300796 call _leave)
      (300818 call boundsCheckHalt "Called \"list.last\" on an empty list.")
    }
    { scopeless
      unknown result[300831] "ref var"(300830 call _getRef(300827 call - _size 1))
      (300834 'end of statement')
    }
    (300837 call _leave)
    (300840 return result)
  } function list[304193](?)._extendGeneric[300848](arg _mt[304333]:_MT[238], ref arg this[304331]:list[304193](?), arg collection[300846]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    { scopeless
      const tmp[300901] "const" "temp"
      (300903 'move' tmp[300901](300899 'deref'(300898 '_wide_get_locale' this)))
      {
        {
          {
            unknown _indexOfInterest[300864] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[300865] "expr temp" "temp"
            (300874 'move' _iterator[300865](300872 call _getIterator collection))
            Defer
            {
              {
                (300890 call _freeIterator _iterator[300865])
              }
            }
            { scopeless type
              (300879 'move' _indexOfInterest[300864](300876 call iteratorIndex _iterator[300865]))
            }
            ForLoop[300866]
            {
              unknown item[300883] "index var" "insert auto destroy"
              (300885 'move' item[300883] _indexOfInterest[300864])
              {
                { scopeless
                  unknown cpy[300854] "no auto destroy" item
                  (300857 'end of statement')
                }
                (300862 call _appendByRef cpy)
              }
              label _continueLabel[300869]
              _indexOfInterest[300864]
              _iterator[300865]
            }
            label _breakLabel[300870]
          }
        }
        (300906 'on block' 0 tmp[300901])
      }
    }
  } function list[304193](?).extend[300923](arg _mt[304337]:_MT[238], ref arg this[304335]:list[304193](?), arg other[300920] :
  (300919 call list eltType unknown p[300917])) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmp[300949] "const" "temp"
      (300951 'move' tmp[300949](300947 'deref'(300946 '_wide_get_locale' this)))
      {
        {
          (300934 call _enter)
          (300940 call _extendGeneric other)
          (300944 call _leave)
        }
        (300954 'on block' 0 tmp[300949])
      }
    }
  }
  {
    (300929 call <(300926 'lifetime_of' this)(300928 'lifetime_of' other))
  } function list[304193](?).extend[300972](arg _mt[304341]:_MT[238], ref arg this[304339]:list[304193](?), arg other[300969] :
  (300967 call chpl__buildArrayRuntimeType unknown d[300963] eltType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmp[300998] "const" "temp"
      (301000 'move' tmp[300998](300996 'deref'(300995 '_wide_get_locale' this)))
      {
        {
          (300983 call _enter)
          (300989 call _extendGeneric other)
          (300993 call _leave)
        }
        (301003 'on block' 0 tmp[300998])
      }
    }
  }
  {
    (300978 call <(300975 'lifetime_of' this)(300977 'lifetime_of' other))
  } function list[304193](?).extend[301023](arg _mt[304345]:_MT[238], ref arg this[304343]:list[304193](?), arg other[301020] :
  (301019 call range eltType unknown b[301015] unknown d[301017])) : _unknown[51] "method" "primary method"
  {
    if(301107 call _cond_test(301035 call !(301034 call isBoundedRange other)))
    {
      { scopeless
        unknown e[301042] "param"(301040 call _cast string[26](301038 'typeof' this))
        (301045 'end of statement')
      }
      { scopeless
        unknown f[301052] "param"(301050 call _cast string[26](301048 'typeof' other))
        (301055 'end of statement')
      }
      { scopeless
        unknown msg[301098] "param"(301096 call +(301093 call +(301074 call + "Cannot extend " e) " with unbounded ") f)
        (301101 'end of statement')
      }
      (301105 call compilerError msg)
    }
    { scopeless
      const tmp[301130] "const" "temp"
      (301132 'move' tmp[301130](301128 'deref'(301127 '_wide_get_locale' this)))
      {
        {
          (301115 call _enter)
          (301121 call _extendGeneric other)
          (301125 call _leave)
        }
        (301135 'on block' 0 tmp[301130])
      }
    }
  }
  {
    (301029 call <(301026 'lifetime_of' this)(301028 'lifetime_of' other))
  } function list[304193](?).insert[301147](arg _mt[304349]:_MT[238], ref arg this[304347]:list[304193](?), arg idx[301144] :
  int[13], in arg x[301150] :
  eltType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[301161] 0
      (301164 'end of statement')
    }
    { scopeless
      const tmp[301242] "const" "temp"
      (301244 'move' tmp[301242](301240 'deref'(301239 '_wide_get_locale' this)))
      {
        {
          (301169 call _enter)
          if(301230 call _cond_test(301174 call == idx _size))
          {
            (301179 call _appendByRef x)
            (301184 call = result 1)
          }
          {
            { scopeless
              if(301226 call _cond_test(301190 call _withinBounds idx))
              {
                (301194 call _expand idx)
                { scopeless
                  unknown src[301198] "ref var" x
                  (301201 'end of statement')
                }
                { scopeless
                  unknown dst[301206] "ref var"(301205 call _getRef idx)
                  (301209 'end of statement')
                }
                (301214 call _move src dst)
                (301218 call += _size 1)
                (301223 call = result 1)
              }
            }
          }
          (301237 call _leave)
        }
        (301247 'on block' 0 tmp[301242])
      }
    }
    if(301258 call _cond_test(301251 call ! result))
    {
      { scopeless
        (301256 call _destroy x)
      }
    }
    (301264 return result)
  }
  {
    (301158 call <(301155 'lifetime_of' this)(301157 'lifetime_of' x))
  }
  { scopeless type
    bool[10]
  } function list[304193](?)._insertGenericKnownSize[301276](arg _mt[304353]:_MT[238], ref arg this[304351]:list[304193](?), arg idx[301273] :
  int[13], arg items[301278]:_any[178](?), arg size[301281] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      unknown result[301286] 0
      (301289 'end of statement')
    }
    (301297 call _sanity(301294 call >= size 0))
    if(301306 call _cond_test(301301 call == size 0))
    {
      { scopeless
        (301304 return 1)
      }
    }
    { scopeless
      const tmp[301431] "const" "temp"
      (301433 'move' tmp[301431](301429 'deref'(301428 '_wide_get_locale' this)))
      {
        {
          if(301422 call _cond_test(301314 call == idx _size))
          {
            (301319 call _extendGeneric items)
            (301324 call = result 1)
          }
          {
            { scopeless
              if(301418 call _cond_test(301330 call _withinBounds idx))
              {
                (301335 call _expand idx size)
                { scopeless
                  unknown i[301339] idx
                  (301342 'end of statement')
                }
                {
                  unknown _indexOfInterest[301380] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[301381] "expr temp" "temp"
                  (301390 'move' _iterator[301381](301388 call _getIterator items))
                  Defer
                  {
                    {
                      (301406 call _freeIterator _iterator[301381])
                    }
                  }
                  { scopeless type
                    (301395 'move' _indexOfInterest[301380](301392 call iteratorIndex _iterator[301381]))
                  }
                  ForLoop[301382]
                  {
                    unknown x[301399] "index var" "insert auto destroy"
                    (301401 'move' x[301399] _indexOfInterest[301380])
                    {
                      { scopeless
                        unknown cpy[301346] "no auto destroy" x
                        (301349 'end of statement')
                      }
                      { scopeless
                        unknown src[301352] "ref var" cpy
                        (301355 'end of statement')
                      }
                      { scopeless
                        unknown dst[301360] "ref var"(301359 call _getRef i)
                        (301363 'end of statement')
                      }
                      (301368 call _move src dst)
                      (301372 call += _size 1)
                      (301377 call += i 1)
                    }
                    label _continueLabel[301385]
                    _indexOfInterest[301380]
                    _iterator[301381]
                  }
                  label _breakLabel[301386]
                }
                (301415 call = result 1)
              }
            }
          }
        }
        (301436 'on block' 0 tmp[301431])
      }
    }
    (301440 return result)
  }
  { scopeless type
    bool[10]
  } function list[304193](?).insert[301451](arg _mt[304357]:_MT[238], ref arg this[304355]:list[304193](?), arg idx[301448] :
  int[13], arg arr[301459] :
  (301457 call chpl__buildArrayRuntimeType unknown d[301453] eltType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[301470] 0
      (301473 'end of statement')
    }
    { scopeless
      const tmp[301501] "const" "temp"
      (301503 'move' tmp[301501](301499 'deref'(301498 '_wide_get_locale' this)))
      {
        {
          (301478 call _enter)
          (301491 call = result(301490 call _insertGenericKnownSize idx arr(301487 call . arr c"size")))
          (301496 call _leave)
        }
        (301506 'on block' 0 tmp[301501])
      }
    }
    (301510 return result)
  }
  {
    (301467 call <(301464 'lifetime_of' this)(301466 'lifetime_of' arr))
  }
  { scopeless type
    bool[10]
  } function list[304193](?).insert[301522](arg _mt[304361]:_MT[238], ref arg this[304359]:list[304193](?), arg idx[301519] :
  int[13], arg lst[301528] :
  (301527 call list eltType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[301539] 0
      (301542 'end of statement')
    }
    { scopeless
      const size[301548] "const"(301545 call . lst c"size")
      (301551 'end of statement')
    }
    { scopeless
      const tmp[301575] "const" "temp"
      (301577 'move' tmp[301575](301573 'deref'(301572 '_wide_get_locale' this)))
      {
        {
          (301555 call _enter)
          (301565 call = result(301564 call _insertGenericKnownSize idx lst size))
          (301570 call _leave)
        }
        (301580 'on block' 0 tmp[301575])
      }
    }
    (301584 return result)
  }
  {
    (301536 call <(301533 'lifetime_of' this)(301535 'lifetime_of' lst))
  }
  { scopeless type
    bool[10]
  } function list[304193](?).remove[301596](arg _mt[304365]:_MT[238], ref arg this[304363]:list[304193](?), arg x[301593] :
  eltType, arg count[301600] :
  int[13] =
  1) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[301606] 0
      (301609 'end of statement')
    }
    { scopeless
      const tmp[301846] "const" "temp"
      (301848 'move' tmp[301846](301844 'deref'(301843 '_wide_get_locale' this)))
      {
        {
          { scopeless
            unknown src_i[301612] int[13]
            unknown dst_i[301616](301620 'typeof' src_i)
            (301621 'end of statement')
          }
          { scopeless
            unknown removed[301624] 0
            (301627 'end of statement')
          }
          (301630 call = src_i 0)
          (301635 call _enter)
          {
            unknown tmp[301677] "temp"
            (301701 'move' tmp[301677](301696 call _cond_test(301698 call < dst_i _size)))
            WhileDo[301682]
            {
              {
                { scopeless
                  unknown dst[301645] "ref var"(301644 call _getRef dst_i)
                  (301648 'end of statement')
                }
                if(301668 call _cond_test(301652 call == dst x))
                {
                  (301657 call _destroy dst)
                  (301662 call += removed 1)
                  break nil[44]
                }
                (301674 call += dst_i 1)
              }
              label _continueLabel[301680]
              (301691 'move' tmp[301677](301686 call _cond_test(301688 call < dst_i _size)))
              tmp[301677]
            }
            label _breakLabel[301681]
          }
          (301709 call = src_i(301707 call + dst_i 1))
          {
            unknown tmp[301788] "temp"
            (301812 'move' tmp[301788](301807 call _cond_test(301809 call < src_i _size)))
            WhileDo[301793]
            {
              {
                { scopeless
                  unknown src[301720] "ref var"(301719 call _getRef src_i)
                  (301723 'end of statement')
                }
                if(301760 call _cond_test(301739 call &&(301733 call ||(301727 call == count 0)(301731 call < removed count))(301737 call == src x)))
                {
                  (301744 call _destroy src)
                  (301749 call += src_i 1)
                  (301754 call += removed 1)
                  continue nil[44]
                }
                { scopeless
                  unknown dst[301768] "ref var"(301767 call _getRef dst_i)
                  (301771 'end of statement')
                }
                (301776 call _move src dst)
                (301780 call += src_i 1)
                (301785 call += dst_i 1)
              }
              label _continueLabel[301791]
              (301802 'move' tmp[301788](301797 call _cond_test(301799 call < src_i _size)))
              tmp[301788]
            }
            label _breakLabel[301792]
          }
          if(301830 call _cond_test removed)
          {
            (301819 call _maybeReleaseMem removed)
            (301827 call = _size(301825 call - _size removed))
          }
          (301836 call _leave)
          (301840 call = result removed)
        }
        (301851 'on block' 0 tmp[301846])
      }
    }
    (301855 return result)
  }
  { scopeless type
    int[13]
  } function list[304193](?)._popAtIndex[301866](arg _mt[304369]:_MT[238], ref arg this[304367]:list[304193](?), arg idx[301863] :
  int[13], arg unlockBeforeHalt[301869] =
  1) : _unknown[51] "method" "primary method" "no doc"
  {
    if(301912 call _cond_test(301878 call && boundsChecking(301876 call <= _size 0)))
    {
      if(301885 call _cond_test unlockBeforeHalt)
      {
        { scopeless
          (301883 call _leave)
        }
      }
      (301910 call boundsCheckHalt "Called \"list.pop\" on an empty list.")
    }
    if(301969 call _cond_test(301924 call && boundsChecking(301922 call !(301921 call _withinBounds idx))))
    {
      if(301931 call _cond_test unlockBeforeHalt)
      {
        { scopeless
          (301929 call _leave)
        }
      }
      { scopeless
        const msg[301960] "const"(301958 call + "Index for \"list.pop\" out of bounds: "(301956 call _cast string[26] idx))
        (301963 'end of statement')
      }
      (301967 call boundsCheckHalt msg)
    }
    { scopeless
      unknown item[301977] "ref var"(301976 call _getRef idx)
      (301980 'end of statement')
    }
    { scopeless
      unknown result[301982] "no init" eltType
      (301985 'end of statement')
    }
    (301990 call _move item result)
    (301995 call _collapse idx)
    (301999 call -= _size 1)
    (302003 return result)
  }
  { scopeless type
    eltType
  } function list[304193](?).pop[302010](arg _mt[304373]:_MT[238], ref arg this[304371]:list[304193](?)) : _unknown[51] "method" "primary method"
  {
    (302015 call _enter)
    { scopeless
      unknown result[302025](302024 call _popAtIndex(302021 call - _size 1))
      (302028 'end of statement')
    }
    (302031 call _leave)
    (302034 return result)
  }
  { scopeless type
    eltType
  } function list[304193](?).pop[302045](arg _mt[304377]:_MT[238], ref arg this[304375]:list[304193](?), arg idx[302042] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (302050 call _enter)
    { scopeless
      unknown result[302057](302056 call _popAtIndex idx)
      (302060 'end of statement')
    }
    (302063 call _leave)
    (302066 return result)
  }
  { scopeless type
    eltType
  } function list[304193](?)._fireAllDestructors[302073](arg _mt[304381]:_MT[238], arg this[304379]:list[304193](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      const tmp[302146] "const" "temp"
      (302148 'move' tmp[302146](302144 'deref'(302143 '_wide_get_locale' this)))
      {
        {
          {
            unknown _indexOfInterest[302097] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[302098] "expr temp" "temp"
            (302107 'move' _iterator[302098](302105 call _getIterator(302114 call chpl_direct_counted_range_iter 0 _size)))
            Defer
            {
              {
                (302130 call _freeIterator _iterator[302098])
              }
            }
            { scopeless type
              (302119 'move' _indexOfInterest[302097](302116 call iteratorIndex _iterator[302098]))
            }
            ForLoop[302099]
            {
              unknown i[302123] "index var" "insert auto destroy"
              (302125 'move' i[302123] _indexOfInterest[302097])
              {
                { scopeless
                  unknown item[302087] "ref var"(302086 call _getRef i)
                  (302090 'end of statement')
                }
                (302095 call _destroy item)
              }
              label _continueLabel[302102]
              _indexOfInterest[302097]
              _iterator[302098]
            }
            label _breakLabel[302103]
          }
          (302140 call = _size 0)
        }
        (302151 'on block' 0 tmp[302146])
      }
    }
    (302155 return)
  } function list[304193](?)._freeAllArrays[302161](arg _mt[304385]:_MT[238], arg this[304383]:list[304193](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(302169 call _cond_test(302165 call == _arrays nil[44]))
    {
      { scopeless
        (302167 return)
      }
    }
    (302181 call _sanity(302178 call != _totalCapacity 0))
    (302189 call _sanity(302186 call != _arrayCapacity 0))
    { scopeless
      const tmp[302312] "const" "temp"
      (302314 'move' tmp[302312](302310 'deref'(302309 '_wide_get_locale' this)))
      {
        {
          {
            unknown _indexOfInterest[302244] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[302245] "expr temp" "temp"
            (302254 'move' _iterator[302245](302252 call _getIterator(302261 call chpl_direct_counted_range_iter 0 _arrayCapacity)))
            Defer
            {
              {
                (302277 call _freeIterator _iterator[302245])
              }
            }
            { scopeless type
              (302266 'move' _indexOfInterest[302244](302263 call iteratorIndex _iterator[302245]))
            }
            ForLoop[302246]
            {
              unknown i[302270] "index var" "insert auto destroy"
              (302272 'move' i[302270] _indexOfInterest[302244])
              {
                { scopeless
                  unknown array[302203] "ref var"(302202 call _arrays i)
                  (302206 'end of statement')
                }
                if(302215 call _cond_test(302210 call == array nil[44]))
                {
                  { scopeless
                    continue nil[44]
                  }
                }
                { scopeless
                  const capacity[302224] "const"(302223 call _getArrayCapacity i)
                  (302227 'end of statement')
                }
                (302230 call -= _totalCapacity capacity)
                (302237 call _freeArray array capacity)
                (302241 call = array nil[44])
              }
              label _continueLabel[302249]
              _indexOfInterest[302244]
              _iterator[302245]
            }
            label _breakLabel[302250]
          }
          (302291 call _sanity(302288 call == _totalCapacity 0))
          (302297 call _freeBlockArray _arrays _arrayCapacity)
          (302301 call = _arrays nil[44])
          (302306 call = _size 0)
        }
        (302317 'on block' 0 tmp[302312])
      }
    }
    (302320 return)
  } function list[304193](?).clear[302326](arg _mt[304389]:_MT[238], ref arg this[304387]:list[304193](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmp[302377] "const" "temp"
      (302379 'move' tmp[302377](302375 'deref'(302374 '_wide_get_locale' this)))
      {
        {
          (302331 call _enter)
          (302336 call _fireAllDestructors)
          (302340 call _freeAllArrays)
          (302348 call _sanity(302345 call == _totalCapacity 0))
          (302356 call _sanity(302353 call == _size 0))
          (302364 call _sanity(302361 call == _arrays nil[44]))
          (302368 call _firstTimeInitializeArrays)
          (302372 call _leave)
        }
        (302382 'on block' 0 tmp[302377])
      }
    }
  } function list[304193](?).indexOf[302394](arg _mt[304393]:_MT[238], const arg this[304391]:list[304193](?), arg x[302391] :
  eltType, arg start[302398] :
  int[13] =
  0, arg end[302406] :
  int[13] =
  (302404 call - 1)) : _unknown[51] "method" "primary method"
  {
    if(302522 call _cond_test boundsChecking)
    {
      { scopeless
        const msg[302429] "const" " index for \"list.indexOf\" out of bounds: "
        (302432 'end of statement')
      }
      if(302476 call _cond_test(302444 call &&(302436 call >= end 0)(302442 call !(302441 call _withinBounds end))))
      {
        { scopeless
          (302474 call boundsCheckHalt(302471 call +(302465 call + "End" msg)(302469 call _cast string[26] end)))
        }
      }
      if(302517 call _cond_test(302485 call !(302484 call _withinBounds start)))
      {
        { scopeless
          (302515 call boundsCheckHalt(302512 call +(302506 call + "Start" msg)(302510 call _cast string[26] start)))
        }
      }
    }
    { scopeless
      unknown error[302530] "param"(302528 call - 1)
      (302533 'end of statement')
    }
    if(302547 call _cond_test(302542 call &&(302536 call >= end 0)(302540 call < end start)))
    {
      { scopeless
        (302545 return error)
      }
    }
    { scopeless
      unknown result[302553] error
      (302556 'end of statement')
    }
    { scopeless
      const tmp[302649] "const" "temp"
      (302651 'move' tmp[302649](302647 'deref'(302646 '_wide_get_locale' this)))
      {
        {
          (302560 call _enter)
          { scopeless
            const stop[302575] "const"(302572 IfExpr (302565 call < end 0) then
            { scopeless
              (302569 call - _size 1)
            } else
            { scopeless
              end
            } )
            (302578 'end of statement')
          }
          {
            unknown _indexOfInterest[302604] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[302605] "expr temp" "temp"
            (302614 'move' _iterator[302605](302612 call _getIterator(302619 call chpl_direct_range_iter start stop 1)))
            Defer
            {
              {
                (302635 call _freeIterator _iterator[302605])
              }
            }
            { scopeless type
              (302624 'move' _indexOfInterest[302604](302621 call iteratorIndex _iterator[302605]))
            }
            ForLoop[302606]
            {
              unknown i[302628] "index var" "insert auto destroy"
              (302630 'move' i[302628] _indexOfInterest[302604])
              { scopeless
                if(302600 call _cond_test(302589 call == x(302588 call _getRef i)))
                {
                  (302593 call = result i)
                  break nil[44]
                }
              }
              label _continueLabel[302609]
              _indexOfInterest[302604]
              _iterator[302605]
            }
            label _breakLabel[302610]
          }
          (302644 call _leave)
        }
        (302654 'on block' 0 tmp[302649])
      }
    }
    (302658 return result)
  }
  { scopeless type
    int[13]
  } function list[304193](?).count[302669](arg _mt[304397]:_MT[238], const arg this[304395]:list[304193](?), arg x[302666] :
  eltType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown result[302673] 0
      (302676 'end of statement')
    }
    { scopeless
      const tmp[302750] "const" "temp"
      (302752 'move' tmp[302750](302748 'deref'(302747 '_wide_get_locale' this)))
      {
        {
          (302681 call _enter)
          { scopeless
            unknown count[302685] 0
            (302688 'end of statement')
          }
          {
            unknown _indexOfInterest[302705] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[302706] "expr temp" "temp"
            (302715 'move' _iterator[302706](302713 call _getIterator this))
            Defer
            {
              {
                (302731 call _freeIterator _iterator[302706])
              }
            }
            { scopeless type
              (302720 'move' _indexOfInterest[302705](302717 call iteratorIndex _iterator[302706]))
            }
            ForLoop[302707]
            {
              unknown item[302724] "index var" "insert auto destroy"
              (302726 'move' item[302724] _indexOfInterest[302705])
              { scopeless
                if(302700 call _cond_test(302693 call == x item))
                {
                  { scopeless
                    (302697 call += count 1)
                  }
                }
              }
              label _continueLabel[302710]
              _indexOfInterest[302705]
              _iterator[302706]
            }
            label _breakLabel[302711]
          }
          (302740 call = result count)
          (302745 call _leave)
        }
        (302755 'on block' 0 tmp[302750])
      }
    }
    (302759 return result)
  }
  { scopeless type
    int[13]
  } function list[304193](?).sort[302776](arg _mt[304401]:_MT[238], ref arg this[304399]:list[304193](?), arg comparator[302772] :
  unknown rec[302766] =
  (302769 call . Sort c"defaultComparator")) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmp[302902] "const" "temp"
      (302904 'move' tmp[302902](302900 'deref'(302899 '_wide_get_locale' this)))
      {
        {
          (302781 call _enter)
          if(302891 call _cond_test(302786 call > _size 1))
          {
            { scopeless
              unknown arr[302800](302798 call chpl__buildArrayRuntimeType(302796 call chpl__ensureDomainExpr(302792 call #(302789 call chpl_build_low_bounded_range 0) _size)) eltType)
              (302803 'end of statement')
            }
            {
              unknown _indexOfInterest[302823] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[302824] "expr temp" "temp"
              (302833 'move' _iterator[302824](302831 call _getIterator(302840 call chpl_direct_counted_range_iter 0 _size)))
              Defer
              {
                {
                  (302856 call _freeIterator _iterator[302824])
                }
              }
              { scopeless type
                (302845 'move' _indexOfInterest[302823](302842 call iteratorIndex _iterator[302824]))
              }
              ForLoop[302825]
              {
                unknown i[302849] "index var" "insert auto destroy"
                (302851 'move' i[302849] _indexOfInterest[302823])
                { scopeless
                  (302820 call =(302815 call arr i)(302819 call this i))
                }
                label _continueLabel[302828]
                _indexOfInterest[302823]
                _iterator[302824]
              }
              label _breakLabel[302829]
            }
            (302872 call(302866 call . Sort c"sort") arr comparator)
            (302876 call _fireAllDestructors)
            (302880 call _freeAllArrays)
            (302884 call _firstTimeInitializeArrays)
            (302889 call _extendGeneric arr)
          }
          (302897 call _leave)
        }
        (302907 'on block' 0 tmp[302902])
      }
    }
    (302911 return)
  } function list[304193](?).this[302921](arg _mt[304405]:_MT[238], ref arg this[304403]:list[304193](?), arg i[302918] :
  int[13]) ref : _unknown[51] "method" "primary method"
  {
    if(302965 call _cond_test(302930 call && boundsChecking(302928 call !(302927 call _withinBounds i))))
    {
      { scopeless
        const msg[302955] "const"(302953 call + "Invalid list index: "(302951 call _cast string[26] i))
        (302958 'end of statement')
      }
      (302963 call boundsCheckHalt msg)
    }
    { scopeless
      unknown result[302974] "ref var"(302973 call _getRef i)
      (302977 'end of statement')
    }
    (302979 return result)
  } function list[304193](?).this[302989](arg _mt[304409]:_MT[238], const  ref arg this[304407]:list[304193](?), arg i[302986] :
  int[13]) const ref : _unknown[51] "method" "primary method"
  {
    if(303017 call _cond_test(302998 call && boundsChecking(302996 call !(302995 call _withinBounds i))))
    {
      { scopeless
        const msg[303007] "const"(303005 call + "Invalid list index: "(303003 call _cast string[26] i))
        (303010 'end of statement')
      }
      (303015 call halt msg)
    }
    { scopeless
      const result[303026] "const" "ref var"(303025 call _getRef i)
      (303029 'end of statement')
    }
    (303031 return result)
  } function list[304193](?).these[303037](arg _mt[304413]:_MT[238], arg this[304411]:list[304193](?)) ref : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[303058] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303059] "expr temp" "temp"
      (303068 'move' _iterator[303059](303066 call _getIterator(303075 call chpl_direct_counted_range_iter 0 _size)))
      Defer
      {
        {
          (303091 call _freeIterator _iterator[303059])
        }
      }
      { scopeless type
        (303080 'move' _indexOfInterest[303058](303077 call iteratorIndex _iterator[303059]))
      }
      ForLoop[303060]
      {
        unknown i[303084] "index var" "insert auto destroy"
        (303086 'move' i[303084] _indexOfInterest[303058])
        {
          { scopeless
            unknown result[303050] "ref var"(303049 call _getRef i)
            (303053 'end of statement')
          }
          (303056 yield result)
        }
        label _continueLabel[303063]
        _indexOfInterest[303058]
        _iterator[303059]
      }
      label _breakLabel[303064]
    }
  } function list[304193](?).these[303107](arg _mt[304417]:_MT[238], arg this[304415]:list[304193](?), param arg tag[303104] :
  iterKind) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    { scopeless
      const osz[303117] "const" _size
      (303120 'end of statement')
    }
    { scopeless
      const minChunkSize[303123] "const" 64
      (303126 'end of statement')
    }
    { scopeless
      const hasOneChunk[303131] "const"(303129 call <= osz minChunkSize)
      (303134 'end of statement')
    }
    { scopeless
      const numTasks[303144] "const"(303141 IfExpr  hasOneChunk then
      { scopeless
        1
      } else
      { scopeless
        (303138 call . here c"maxTaskPar")
      } )
      (303147 'end of statement')
    }
    { scopeless
      const chunkSize[303158] "const"(303156 call _cast int[13](303154 call floor(303151 call / osz numTasks)))
      (303161 'end of statement')
    }
    { scopeless
      const trailing[303169] "const"(303167 call - osz(303165 call * chunkSize numTasks))
      (303172 'end of statement')
    }
    {
      unknown tmpIter[303236] "expr temp" "maybe ref" "no copy" "temp"
      (303239 'move' tmpIter[303236](303178 call #(303175 call chpl_build_low_bounded_range 0) numTasks))
      unknown isRngDomArr[303425] "maybe param" "temp"
      (303440 'move' isRngDomArr[303425](303438 call ||(303427 call isBoundedRange tmpIter[303236])(303436 call ||(303430 call isDomain tmpIter[303236])(303433 call isArray tmpIter[303236]))))
      if isRngDomArr[303425]
      {
        const _coforallCount[303292] "const" "end count" "temp"
        (303361 'move' _coforallCount[303292](303358 call _endCountAlloc 1))
        unknown numTasks[303293] "temp"
        (303345 'move' numTasks[303293](303341 call . tmpIter[303236] c"size"))
        (303336 call _upEndCount _coforallCount[303292] 1 numTasks[303293])
        (303333 call chpl_resetTaskSpawn numTasks[303293])
        unknown _indexOfInterest[303300] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303301] "expr temp" "temp"
        (303310 'move' _iterator[303301](303308 call _getIterator tmpIter[303236]))
        Defer
        {
          {
            (303326 call _freeIterator _iterator[303301])
          }
        }
        { scopeless type
          (303315 'move' _indexOfInterest[303300](303312 call iteratorIndex _iterator[303301]))
        }
        ForLoop[303302]
        {
          unknown tid[303319] "coforall index var" "index var" "insert auto destroy"
          (303321 'move' tid[303319] _indexOfInterest[303300])
          {
            {
              { scopeless
                unknown chunk[303243](303245 call _computeChunk tid chunkSize trailing)
                (303250 'end of statement')
              }
              {
                unknown _indexOfInterest[303252] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[303254] "expr temp" "temp"
                (303256 'move' _iterator[303254](303259 call _getIterator(303261 call chunk 0)))
                Defer
                {
                  {
                    (303265 call _freeIterator _iterator[303254])
                  }
                }
                { scopeless type
                  (303269 'move' _indexOfInterest[303252](303272 call iteratorIndex _iterator[303254]))
                }
                ForLoop[303274]
                {
                  unknown i[303277] "index var" "insert auto destroy"
                  (303279 'move' i[303277] _indexOfInterest[303252])
                  { scopeless
                    (303283 yield(303285 call this i))
                  }
                  label _continueLabel[303287]
                  _indexOfInterest[303252]
                  _iterator[303254]
                }
                label _breakLabel[303289]
              }
            }
            (303295 call _downEndCount _coforallCount[303292] nil[44])
            (303294 'coforall loop')
          }
          label _continueLabel[303305]
          _indexOfInterest[303300]
          _iterator[303301]
        }
        label _breakLabel[303306]
        Defer
        {
          {
            (303348 call _endCountFree _coforallCount[303292])
          }
        }
        (303353 call _waitEndCount _coforallCount[303292] 1 numTasks[303293])
      }
      {
        const _coforallCount[303365] "const" "end count" "temp"
        (303422 'move' _coforallCount[303365](303419 call _endCountAlloc 1))
        unknown _indexOfInterest[303373] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303374] "expr temp" "temp"
        (303383 'move' _iterator[303374](303381 call _getIterator tmpIter[303236]))
        Defer
        {
          {
            (303399 call _freeIterator _iterator[303374])
          }
        }
        { scopeless type
          (303388 'move' _indexOfInterest[303373](303385 call iteratorIndex _iterator[303374]))
        }
        ForLoop[303375]
        {
          unknown tid[303392] "coforall index var" "index var" "insert auto destroy"
          (303394 'move' tid[303392] _indexOfInterest[303373])
          (303406 call _upEndCount _coforallCount[303365] 1)
          {
            {
              { scopeless
                unknown chunk[303186](303185 call _computeChunk tid chunkSize trailing)
                (303189 'end of statement')
              }
              {
                unknown _indexOfInterest[303202] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[303203] "expr temp" "temp"
                (303212 'move' _iterator[303203](303210 call _getIterator(303195 call chunk 0)))
                Defer
                {
                  {
                    (303229 call _freeIterator _iterator[303203])
                  }
                }
                { scopeless type
                  (303218 'move' _indexOfInterest[303202](303215 call iteratorIndex _iterator[303203]))
                }
                ForLoop[303204]
                {
                  unknown i[303222] "index var" "insert auto destroy"
                  (303224 'move' i[303222] _indexOfInterest[303202])
                  { scopeless
                    (303200 yield(303199 call this i))
                  }
                  label _continueLabel[303207]
                  _indexOfInterest[303202]
                  _iterator[303203]
                }
                label _breakLabel[303208]
              }
            }
            (303368 call _downEndCount _coforallCount[303365] nil[44])
            (303367 'coforall loop')
          }
          label _continueLabel[303378]
          _indexOfInterest[303373]
          _iterator[303374]
        }
        label _breakLabel[303379]
        Defer
        {
          {
            (303410 call _endCountFree _coforallCount[303365])
          }
        }
        (303415 call _waitEndCount _coforallCount[303365] 1)
      }
    }
  }
  where {
    (303114 call == tag(303111 call . iterKind c"standalone"))
  } function list[304193](?)._computeChunk[303451](arg _mt[304421]:_MT[238], arg this[304419]:list[304193](?), arg tid[303449]:_any[178](?), arg chunkSize[303453]:_any[178](?), arg trailing[303455]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      unknown lo[303457] 0
      unknown hi[303461] lo
      (303465 'end of statement')
    }
    if(303511 call _cond_test(303469 call <= tid 0))
    {
      (303473 call = lo 0)
      (303485 call = hi(303483 call -(303480 call + chunkSize trailing) 1))
    }
    {
      (303496 call = lo(303494 call +(303491 call * chunkSize tid) trailing))
      (303508 call = hi(303506 call -(303503 call + lo chunkSize) 1))
    }
    (303521 return(303519 call _build_tuple(303517 call chpl_build_bounded_range lo hi)))
  } function list[304193](?).these[303529](arg _mt[304425]:_MT[238], arg this[304423]:list[304193](?), param arg tag[303527]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    { scopeless
      const osz[303539] "const" _size
      (303542 'end of statement')
    }
    { scopeless
      const minChunkSize[303545] "const" 32
      (303548 'end of statement')
    }
    { scopeless
      const hasOneChunk[303553] "const"(303551 call <= osz minChunkSize)
      (303556 'end of statement')
    }
    { scopeless
      const numTasks[303563] "const"(303560 IfExpr  hasOneChunk then
      { scopeless
        1
      } else
      { scopeless
        dataParTasksPerLocale
      } )
      (303566 'end of statement')
    }
    { scopeless
      const chunkSize[303577] "const"(303575 call _cast int[13](303573 call floor(303570 call / osz numTasks)))
      (303580 'end of statement')
    }
    { scopeless
      const trailing[303588] "const"(303586 call - osz(303584 call * chunkSize numTasks))
      (303591 'end of statement')
    }
    {
      unknown tmpIter[303613] "expr temp" "maybe ref" "no copy" "temp"
      (303616 'move' tmpIter[303613](303597 call #(303594 call chpl_build_low_bounded_range 0) numTasks))
      unknown isRngDomArr[303764] "maybe param" "temp"
      (303779 'move' isRngDomArr[303764](303777 call ||(303766 call isBoundedRange tmpIter[303613])(303775 call ||(303769 call isDomain tmpIter[303613])(303772 call isArray tmpIter[303613]))))
      if isRngDomArr[303764]
      {
        const _coforallCount[303631] "const" "end count" "temp"
        (303700 'move' _coforallCount[303631](303697 call _endCountAlloc 1))
        unknown numTasks[303632] "temp"
        (303684 'move' numTasks[303632](303680 call . tmpIter[303613] c"size"))
        (303675 call _upEndCount _coforallCount[303631] 1 numTasks[303632])
        (303672 call chpl_resetTaskSpawn numTasks[303632])
        unknown _indexOfInterest[303639] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303640] "expr temp" "temp"
        (303649 'move' _iterator[303640](303647 call _getIterator tmpIter[303613]))
        Defer
        {
          {
            (303665 call _freeIterator _iterator[303640])
          }
        }
        { scopeless type
          (303654 'move' _indexOfInterest[303639](303651 call iteratorIndex _iterator[303640]))
        }
        ForLoop[303641]
        {
          unknown tid[303658] "coforall index var" "index var" "insert auto destroy"
          (303660 'move' tid[303658] _indexOfInterest[303639])
          {
            {
              { scopeless
                unknown chunk[303620](303622 call _computeChunk tid chunkSize trailing)
                (303627 'end of statement')
              }
              (303628 yield chunk)
            }
            (303634 call _downEndCount _coforallCount[303631] nil[44])
            (303633 'coforall loop')
          }
          label _continueLabel[303644]
          _indexOfInterest[303639]
          _iterator[303640]
        }
        label _breakLabel[303645]
        Defer
        {
          {
            (303687 call _endCountFree _coforallCount[303631])
          }
        }
        (303692 call _waitEndCount _coforallCount[303631] 1 numTasks[303632])
      }
      {
        const _coforallCount[303704] "const" "end count" "temp"
        (303761 'move' _coforallCount[303704](303758 call _endCountAlloc 1))
        unknown _indexOfInterest[303712] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303713] "expr temp" "temp"
        (303722 'move' _iterator[303713](303720 call _getIterator tmpIter[303613]))
        Defer
        {
          {
            (303738 call _freeIterator _iterator[303713])
          }
        }
        { scopeless type
          (303727 'move' _indexOfInterest[303712](303724 call iteratorIndex _iterator[303713]))
        }
        ForLoop[303714]
        {
          unknown tid[303731] "coforall index var" "index var" "insert auto destroy"
          (303733 'move' tid[303731] _indexOfInterest[303712])
          (303745 call _upEndCount _coforallCount[303704] 1)
          {
            {
              { scopeless
                unknown chunk[303605](303604 call _computeChunk tid chunkSize trailing)
                (303608 'end of statement')
              }
              (303611 yield chunk)
            }
            (303707 call _downEndCount _coforallCount[303704] nil[44])
            (303706 'coforall loop')
          }
          label _continueLabel[303717]
          _indexOfInterest[303712]
          _iterator[303713]
        }
        label _breakLabel[303718]
        Defer
        {
          {
            (303749 call _endCountFree _coforallCount[303704])
          }
        }
        (303754 call _waitEndCount _coforallCount[303704] 1)
      }
    }
  }
  where {
    (303536 call == tag(303533 call . iterKind c"leader"))
  } function list[304193](?).these[303790](arg _mt[304429]:_MT[238], arg this[304427]:list[304193](?), param arg tag[303788]:_any[178](?), arg followThis[303792]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    {
      unknown _indexOfInterest[303812] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303813] "expr temp" "temp"
      (303822 'move' _iterator[303813](303820 call _getIterator(303805 call followThis 0)))
      Defer
      {
        {
          (303839 call _freeIterator _iterator[303813])
        }
      }
      { scopeless type
        (303828 'move' _indexOfInterest[303812](303825 call iteratorIndex _iterator[303813]))
      }
      ForLoop[303814]
      {
        unknown i[303832] "index var" "insert auto destroy"
        (303834 'move' i[303832] _indexOfInterest[303812])
        { scopeless
          (303810 yield(303809 call this i))
        }
        label _continueLabel[303817]
        _indexOfInterest[303812]
        _iterator[303813]
      }
      label _breakLabel[303818]
    }
  }
  where {
    (303799 call == tag(303796 call . iterKind c"follower"))
  } function list[304193](?).readWriteThis[303856](arg _mt[304433]:_MT[238], arg this[304431]:list[304193](?), arg ch[303853] :
  channel) : _unknown[51] throws "method" "primary method"
  {
    (303860 call _enter)
    (303865 call <~> ch "[")
    {
      unknown _indexOfInterest[303887] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303888] "expr temp" "temp"
      (303897 'move' _iterator[303888](303895 call _getIterator(303905 call chpl_direct_range_iter 0(303902 call - _size 2) 1)))
      Defer
      {
        {
          (303921 call _freeIterator _iterator[303888])
        }
      }
      { scopeless type
        (303910 'move' _indexOfInterest[303887](303907 call iteratorIndex _iterator[303888]))
      }
      ForLoop[303889]
      {
        unknown i[303914] "index var" "insert auto destroy"
        (303916 'move' i[303914] _indexOfInterest[303887])
        { scopeless
          (303884 call <~>(303881 call <~> ch(303880 call _getRef i)) ", ")
        }
        label _continueLabel[303892]
        _indexOfInterest[303887]
        _iterator[303888]
      }
      label _breakLabel[303893]
    }
    if(303943 call _cond_test(303930 call > _size 0))
    {
      { scopeless
        (303940 call <~> ch(303939 call _getRef(303936 call - _size 1)))
      }
    }
    (303950 call <~> ch "]")
    (303955 call _leave)
  } function list[304193](?).isEmpty[303961](arg _mt[304437]:_MT[238], const arg this[304435]:list[304193](?)) : _unknown[51] "method" "primary method"
  {
    (303966 call _enter)
    { scopeless
      unknown result[303973](303971 call == _size 0)
      (303976 'end of statement')
    }
    (303979 call _leave)
    (303982 return result)
  }
  { scopeless type
    bool[10]
  } function list[304193](?).size[303989](arg _mt[304441]:_MT[238], const arg this[304439]:list[304193](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    { scopeless
      unknown result[303992] 0
      (303995 'end of statement')
    }
    { scopeless
      const tmp[304015] "const" "temp"
      (304017 'move' tmp[304015](304013 'deref'(304012 '_wide_get_locale' this)))
      {
        {
          (304000 call _enter)
          (304005 call = result _size)
          (304010 call _leave)
        }
        (304020 'on block' 0 tmp[304015])
      }
    }
    (304024 return result)
  } function list[304193](?).indices[304030](arg _mt[304445]:_MT[238], arg this[304443]:list[304193](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (304042 return(304040 call chpl_build_bounded_range 0(304038 call -(304034 call . this c"size") 1)))
  } function list[304193](?).toArray[304049](arg _mt[304449]:_MT[238], const arg this[304447]:list[304193](?)) : _unknown[51] "method" "primary method"
  {
    if(304107 call _cond_test(304063 call &&(304058 call isNonNilableClass eltType)(304062 call isOwnedClass eltType)))
    {
      { scopeless
        (304105 call compilerError "toArray() method is not available on a 'list'" " with elements of a non-nilable owned type, here: "(304103 call _cast string[26] eltType))
      }
    }
    { scopeless
      unknown result[304125] "unsafe"(304123 call chpl__buildArrayRuntimeType(304121 call chpl__ensureDomainExpr(304117 call #(304114 call chpl_build_low_bounded_range 0) _size)) eltType)
      (304128 'end of statement')
    }
    { scopeless
      const tmp[304178] "const" "temp"
      (304180 'move' tmp[304178](304176 'deref'(304175 '_wide_get_locale' this)))
      {
        {
          (304132 call _enter)
          { scopeless
            unknown tmp[304162](304158 forall  i  in (304152 call #(304149 call chpl_build_low_bounded_range 0) _size) do
            {
              (304157 call _getRef i)
            } )(304145 call chpl__buildArrayRuntimeType(304143 call chpl__ensureDomainExpr(304139 call #(304136 call chpl_build_low_bounded_range 0) _size)) eltType)
            (304165 'end of statement')
          }
          (304168 call = result tmp)
          (304173 call _leave)
        }
        (304183 'on block' 0 tmp[304178])
      }
    }
    (304187 return result)
  }
  { scopeless type
    (304052 call chpl__buildArrayRuntimeType nil[44] eltType)
  }
  function =[304463](ref arg lhs[304460] :
  (304459 call list unknown t[304455] ?[260]), arg rhs[304470] :
  (304469 call list t ?[260])) : _unknown[51] "assignop"
  {
    (304478 call(304474 call . lhs c"clear"))
    (304489 call(304484 call . lhs c"extend") rhs)
  }
  function ==[304504](arg a[304501] :
  (304500 call list unknown t[304496] ?[260]), arg b[304511] :
  (304510 call list t ?[260])) : _unknown[51]
  {
    if(304528 call _cond_test(304523 call !=(304516 call . a c"size")(304520 call . b c"size")))
    {
      { scopeless
        (304526 return 0)
      }
    }
    {
      unknown _indexOfInterest[304562] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[304563] "expr temp" "temp"
      (304572 'move' _iterator[304563](304570 call _getIterator(304582 call chpl_direct_counted_range_iter 0(304578 call . a c"size"))))
      Defer
      {
        {
          (304598 call _freeIterator _iterator[304563])
        }
      }
      { scopeless type
        (304587 'move' _indexOfInterest[304562](304584 call iteratorIndex _iterator[304563]))
      }
      ForLoop[304564]
      {
        unknown i[304591] "index var" "insert auto destroy"
        (304593 'move' i[304591] _indexOfInterest[304562])
        { scopeless
          if(304557 call _cond_test(304552 call !=(304547 call a i)(304551 call b i)))
          {
            { scopeless
              (304555 return 0)
            }
          }
        }
        label _continueLabel[304567]
        _indexOfInterest[304562]
        _iterator[304563]
      }
      label _breakLabel[304568]
    }
    (304606 return 1)
  }
  { scopeless type
    bool[10]
  }
  function !=[304622](arg a[304619] :
  (304618 call list unknown t[304614] ?[260]), arg b[304629] :
  (304628 call list t ?[260])) : _unknown[51]
  {
    (304639 return(304637 call !(304635 call == a b)))
  }
  { scopeless type
    bool[10]
  }
}