AST dump for SparseBlockDist after pass cleanup.
Module use list: 

{
  (353120 'use' ChapelStandard)
  (341925 'use' DSIUtil)
  (341928 'use' ChapelUtil)
  (341931 'use' BlockDist)
  (341934 'use' RangeChunk)
  (341937 'use' HaltWrappers)
  (341940 'use' LayoutCS)
  unknown debugSparseBlockDist[341943] "config" "param" 0
  (341946 'end of statement')
  unknown debugSparseBlockDistBulkTransfer[341948] "config" "param" 0
  (341951 'end of statement')
  function TargetLocaleComparator[342068](?).key[341984](arg _mt[342072]:_MT[238], arg this[342070]:TargetLocaleComparator[342068](?), arg a[341981] :
  (341979 call chpl__buildIndexType rank idxType)) : _unknown[51] "method" "primary method"
  {
    if(342060 call _cond_test(341988 call == rank 2))
    {
      if(342039 call _cond_test(341997 call == sparseLayoutType(341996 'to unmanaged class from unknown'(341995 call CS(compressRows = 0)))))
      {
        (342017 return(342015 call _build_tuple(342005 call(342000 call . dist c"targetLocsIdx") a)(342009 call a 1)(342014 call a 0)))
      }
      {
        (342037 return(342035 call _build_tuple(342025 call(342020 call . dist c"targetLocsIdx") a)(342029 call a 0)(342034 call a 1)))
      }
    }
    {
      (342057 return(342055 call _build_tuple(342052 call(342047 call . dist c"targetLocsIdx") a) a))
    }
  }
  type TargetLocaleComparator[342068](?) unknown rank[341953] "param" unknown idxType[341957] "type variable" unknown sparseLayoutType[341960] "type variable" unknown dist[341970](341969 'to unmanaged class from unknown'(341968 call Block rank idxType sparseLayoutType))
  function SparseBlockDom[344897](?).setup[342149](arg _mt[344901]:_MT[238], arg this[344899]:SparseBlockDom[344897](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown thisid[342156](342155 '_wide_get_node' this)
    (342159 'end of statement')
    if(342477 call _cond_test(342172 call ==(342170 call locDoms(342166 call .(342163 call . dist c"targetLocDom") c"low")) nil[44]))
    {
      {
        unknown tmpIter[342244] "expr temp" "maybe ref" "no copy" "temp"
        (342247 'move' tmpIter[342244](342176 call . dist c"targetLocDom"))
        unknown isRngDomArr[342435] "maybe param" "temp"
        (342450 'move' isRngDomArr[342435](342448 call ||(342437 call isBoundedRange tmpIter[342244])(342446 call ||(342440 call isDomain tmpIter[342244])(342443 call isArray tmpIter[342244]))))
        if isRngDomArr[342435]
        {
          const _coforallCount[342307] "const" "end count" "temp"
          (342372 'move' _coforallCount[342307](342369 call _endCountAlloc 0))
          unknown numTasks[342308] "temp"
          (342356 'move' numTasks[342308](342352 call . tmpIter[342244] c"size"))
          (342347 call _upEndCount _coforallCount[342307] 0 numTasks[342308])
          unknown _indexOfInterest[342314] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[342315] "expr temp" "temp"
          (342324 'move' _iterator[342315](342322 call _getIterator tmpIter[342244]))
          Defer
          {
            {
              (342340 call _freeIterator _iterator[342315])
            }
          }
          { scopeless type
            (342329 'move' _indexOfInterest[342314](342326 call iteratorIndex _iterator[342315]))
          }
          ForLoop[342316]
          {
            unknown localeIdx[342333] "coforall index var" "index var" "insert auto destroy"
            (342335 'move' localeIdx[342333] _indexOfInterest[342314])
            const tmp[342250] "const" "temp"
            (342252 'move' tmp[342250](342254 'deref'(342255 '_wide_get_locale'(342260 call(342257 call . dist c"targetLocales") localeIdx))))
            {
              {
                (342268 call =(342270 call locDoms localeIdx)(342272 'new'(_chpl_manager = unmanaged[220](?))(342276 call LocSparseBlockDom rank idxType stridable sparseLayoutType(342285 call(342282 call . dist c"getChunk") whole localeIdx))))
                if(342289 call _cond_test(342291 call == thisid(342294 call . here c"id")))
                {
                  (342300 call = myLocDom(342303 call locDoms localeIdx))
                }
              }
              (342309 call _downEndCount _coforallCount[342307] nil[44])
              (342263 'coforall on block' 0 tmp[342250])
            }
            label _continueLabel[342319]
            _indexOfInterest[342314]
            _iterator[342315]
          }
          label _breakLabel[342320]
          Defer
          {
            {
              (342359 call _endCountFree _coforallCount[342307])
            }
          }
          (342364 call _waitEndCount _coforallCount[342307] 0 numTasks[342308])
        }
        {
          const _coforallCount[342376] "const" "end count" "temp"
          (342432 'move' _coforallCount[342376](342429 call _endCountAlloc 0))
          unknown _indexOfInterest[342383] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[342384] "expr temp" "temp"
          (342393 'move' _iterator[342384](342391 call _getIterator tmpIter[342244]))
          Defer
          {
            {
              (342409 call _freeIterator _iterator[342384])
            }
          }
          { scopeless type
            (342398 'move' _indexOfInterest[342383](342395 call iteratorIndex _iterator[342384]))
          }
          ForLoop[342385]
          {
            unknown localeIdx[342402] "coforall index var" "index var" "insert auto destroy"
            (342404 'move' localeIdx[342402] _indexOfInterest[342383])
            (342416 call _upEndCount _coforallCount[342376] 0)
            const tmp[342235] "const" "temp"
            (342237 'move' tmp[342235](342233 'deref'(342232 '_wide_get_locale'(342185 call(342180 call . dist c"targetLocales") localeIdx))))
            {
              {
                (342208 call =(342189 call locDoms localeIdx)(342192 'new'(_chpl_manager = unmanaged[220](?))(342207 call LocSparseBlockDom rank idxType stridable sparseLayoutType(342206 call(342200 call . dist c"getChunk") whole localeIdx))))
                if(342227 call _cond_test(342217 call == thisid(342214 call . here c"id")))
                {
                  (342224 call = myLocDom(342223 call locDoms localeIdx))
                }
              }
              (342378 call _downEndCount _coforallCount[342376] nil[44])
              (342240 'coforall on block' 0 tmp[342235])
            }
            label _continueLabel[342388]
            _indexOfInterest[342383]
            _iterator[342384]
          }
          label _breakLabel[342389]
          Defer
          {
            {
              (342420 call _endCountFree _coforallCount[342376])
            }
          }
          (342425 call _waitEndCount _coforallCount[342376] 0)
        }
      }
    }
    {
      (342474 call halt "Don't know how to reallocate yet")
    }
  }
  function SparseBlockDom[344897](?).dsiDestroyDom[342485](arg _mt[344905]:_MT[238], arg this[344903]:SparseBlockDom[344897](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[342516] "expr temp" "maybe ref" "no copy" "temp"
      (342519 'move' tmpIter[342516](342489 call . dist c"targetLocDom"))
      unknown isRngDomArr[342670] "maybe param" "temp"
      (342685 'move' isRngDomArr[342670](342683 call ||(342672 call isBoundedRange tmpIter[342516])(342681 call ||(342675 call isDomain tmpIter[342516])(342678 call isArray tmpIter[342516]))))
      if isRngDomArr[342670]
      {
        const _coforallCount[342542] "const" "end count" "temp"
        (342607 'move' _coforallCount[342542](342604 call _endCountAlloc 0))
        unknown numTasks[342543] "temp"
        (342591 'move' numTasks[342543](342587 call . tmpIter[342516] c"size"))
        (342582 call _upEndCount _coforallCount[342542] 0 numTasks[342543])
        unknown _indexOfInterest[342549] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[342550] "expr temp" "temp"
        (342559 'move' _iterator[342550](342557 call _getIterator tmpIter[342516]))
        Defer
        {
          {
            (342575 call _freeIterator _iterator[342550])
          }
        }
        { scopeless type
          (342564 'move' _indexOfInterest[342549](342561 call iteratorIndex _iterator[342550]))
        }
        ForLoop[342551]
        {
          unknown localeIdx[342568] "coforall index var" "index var" "insert auto destroy"
          (342570 'move' localeIdx[342568] _indexOfInterest[342549])
          const tmp[342522] "const" "temp"
          (342524 'move' tmp[342522](342526 'deref'(342527 '_wide_get_locale'(342529 call locDoms localeIdx))))
          {
            (342537 call chpl__delete(342539 call locDoms localeIdx))
            (342544 call _downEndCount _coforallCount[342542] nil[44])
            (342532 'coforall on block' 0 tmp[342522])
          }
          label _continueLabel[342554]
          _indexOfInterest[342549]
          _iterator[342550]
        }
        label _breakLabel[342555]
        Defer
        {
          {
            (342594 call _endCountFree _coforallCount[342542])
          }
        }
        (342599 call _waitEndCount _coforallCount[342542] 0 numTasks[342543])
      }
      {
        const _coforallCount[342611] "const" "end count" "temp"
        (342667 'move' _coforallCount[342611](342664 call _endCountAlloc 0))
        unknown _indexOfInterest[342618] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[342619] "expr temp" "temp"
        (342628 'move' _iterator[342619](342626 call _getIterator tmpIter[342516]))
        Defer
        {
          {
            (342644 call _freeIterator _iterator[342619])
          }
        }
        { scopeless type
          (342633 'move' _indexOfInterest[342618](342630 call iteratorIndex _iterator[342619]))
        }
        ForLoop[342620]
        {
          unknown localeIdx[342637] "coforall index var" "index var" "insert auto destroy"
          (342639 'move' localeIdx[342637] _indexOfInterest[342618])
          (342651 call _upEndCount _coforallCount[342611] 0)
          const tmp[342507] "const" "temp"
          (342509 'move' tmp[342507](342505 'deref'(342504 '_wide_get_locale'(342495 call locDoms localeIdx))))
          {
            (342501 call chpl__delete(342499 call locDoms localeIdx))
            (342613 call _downEndCount _coforallCount[342611] nil[44])
            (342512 'coforall on block' 0 tmp[342507])
          }
          label _continueLabel[342623]
          _indexOfInterest[342618]
          _iterator[342619]
        }
        label _breakLabel[342624]
        Defer
        {
          {
            (342655 call _endCountFree _coforallCount[342611])
          }
        }
        (342660 call _waitEndCount _coforallCount[342611] 0)
      }
    }
  }
  function SparseBlockDom[344897](?).getNNZ[342694](arg _mt[344909]:_MT[238], arg this[344907]:SparseBlockDom[344897](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (342717 return(342715 'reduce' SumReduceScanOp(342711 [  ld  in  locDoms ]
    {
      (342708 call .(342705 call .(342701 call postfix! ld) c"mySparseBlock") c"size")
    } ) 0))
  }
  function SparseBlockDom[344897](?).dsiAdd[342731](arg _mt[344913]:_MT[238], arg this[344911]:SparseBlockDom[344897](?), arg ind[342728] :
  (342726 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    unknown _retval[342734] 0
    (342737 'end of statement')
    const tmp[342772] "const" "temp"
    (342774 'move' tmp[342772](342770 'deref'(342769 '_wide_get_locale'(342745 call(342740 call . dist c"dsiIndexToLocale") ind))))
    {
      {
        (342765 call = _retval(342764 call(342759 call .(342757 call postfix!(342756 call locDoms(342754 call(342749 call . dist c"targetLocsIdx") ind))) c"dsiAdd") ind))
      }
      (342777 'on block' 0 tmp[342772])
    }
    (342781 return _retval)
  }
  function SparseBlockDom[344897](?).dsiAdd[342791](arg _mt[344917]:_MT[238], arg this[344915]:SparseBlockDom[344897](?), arg ind[342788] :
  idxType) : _unknown[51] "method" "primary method"
  {
    (342806 return(342805 call dsiAdd(342802 call _build_tuple ind)))
  }
  where {
    (342798 call ==(342794 call . this c"rank") 1)
  }
  function SparseBlockDom[344897](?).dsiFirst[342814](arg _mt[344921]:_MT[238], arg this[344919]:SparseBlockDom[344897](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (342835 return(342833 'reduce' MinReduceScanOp(342829 [  l  in  locDoms ]
    {
      (342826 call .(342823 call .(342821 call postfix! l) c"mySparseBlock") c"first")
    } ) 0))
  }
  function SparseBlockDom[344897](?).dsiLast[342842](arg _mt[344925]:_MT[238], arg this[344923]:SparseBlockDom[344897](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (342863 return(342861 'reduce' MaxReduceScanOp(342857 [  l  in  locDoms ]
    {
      (342854 call .(342851 call .(342849 call postfix! l) c"mySparseBlock") c"last")
    } ) 0))
  }
  function SparseBlockDom[344897](?).bulkAdd_help[342883](arg _mt[344929]:_MT[238], arg this[344927]:SparseBlockDom[344897](?), arg inds[342880] :
  (342878 call chpl__buildArrayRuntimeType unknown indsDom[342870](342876 call chpl__buildIndexType rank idxType)), arg dataSorted[342886] =
  0, arg isUnique[342890] =
  0, arg addOn[342894] =
  nilLocale) : _unknown[51] "method" "primary method" "method overrides"
  {
    (342898 'use' Sort)
    (342902 'use' Search)
    if(342983 call _cond_test(342906 call != addOn nilLocale))
    {
      unknown retval[342909] 0
      (342912 'end of statement')
      const tmp[342972] "const" "temp"
      (342974 'move' tmp[342972](342970 'deref'(342969 '_wide_get_locale' addOn)))
      {
        {
          if(342964 call _cond_test(342920 call ==(342917 call chpl_localeID_to_locale(342916 '_wide_get_locale' inds)) here))
          {
            (342929 call = retval(342928 call bulkAddHere_help inds dataSorted isUnique))
          }
          {
            unknown _local_inds[342944](342942 call chpl__buildArrayRuntimeType(342940 call chpl__ensureDomainExpr indsDom)(342938 call chpl__buildIndexType rank idxType))
            (342947 'end of statement')
            (342951 call = _local_inds inds)
            (342961 call = retval(342960 call bulkAddHere_help _local_inds dataSorted isUnique))
          }
        }
        (342977 'on block' 0 tmp[342972])
      }
      (342981 return retval)
    }
    unknown comp[342999](342987 'new'(342998 call TargetLocaleComparator(rank = rank)(idxType = idxType)(sparseLayoutType = sparseLayoutType)(dist = dist)))
    (343002 'end of statement')
    if(343013 call _cond_test(343004 call ! dataSorted))
    {
      (343011 call sort inds(comparator = comp))
    }
    unknown localeRanges[343028](343026 call chpl__buildArrayRuntimeType(343024 call chpl__ensureDomainExpr(343019 call . dist c"targetLocDom")) range)
    (343031 'end of statement')
    const tmp[343239] "const" "temp"
    (343241 'move' tmp[343239](343237 'deref'(343236 '_wide_get_locale' inds)))
    {
      {
        {
          unknown _indexOfInterest[343201] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[343202] "expr temp" "temp"
          (343211 'move' _iterator[343202](343209 call _getIterator(343035 call . dist c"targetLocDom")))
          Defer
          {
            {
              (343228 call _freeIterator _iterator[343202])
            }
          }
          { scopeless type
            (343217 'move' _indexOfInterest[343201](343214 call iteratorIndex _iterator[343202]))
          }
          ForLoop[343203]
          {
            unknown l[343221] "index var" "insert auto destroy"
            (343223 'move' l[343221] _indexOfInterest[343201])
            {
              const blockval[343050] "const"(343047 call .(343044 call .(343042 call postfix!(343041 call locDoms l)) c"mySparseBlock") c"_value")
              (343053 'end of statement')
              const _first[343062] "const"(343059 call .(343056 call . blockval c"parentDom") c"first")
              (343065 'end of statement')
              const _last[343073] "const"(343070 call .(343067 call . blockval c"parentDom") c"last")
              (343076 'end of statement')
              unknown tmp[343088] "temp"(343087 call binarySearch inds _first comp)
              (343095 call _check_tuple_var_decl tmp[343088] 2)
              unknown foundFirst[343077](343089 call tmp[343088] 0)
              unknown locFirst[343079](343092 call tmp[343088] 1)
              (343100 'end of statement')
              unknown tmp[343112] "temp"(343111 call binarySearch inds _last comp)
              (343119 call _check_tuple_var_decl tmp[343112] 2)
              unknown foundLast[343101](343113 call tmp[343112] 0)
              unknown locLast[343103](343116 call tmp[343112] 1)
              (343124 'end of statement')
              if(343133 call _cond_test(343126 call ! foundLast))
              {
                (343130 call -= locLast 1)
              }
              if(343159 call _cond_test(343146 call ==(343142 call .(343139 call . dist c"targetLocDom") c"first") l))
              {
                (343156 call = locFirst(343153 call .(343150 call . inds c"_dom") c"first"))
              }
              if(343185 call _cond_test(343172 call ==(343168 call .(343165 call . dist c"targetLocDom") c"last") l))
              {
                (343182 call = locLast(343179 call .(343176 call . inds c"_dom") c"last"))
              }
              (343198 call =(343193 call localeRanges l)(343196 call chpl_build_bounded_range locFirst locLast))
            }
            label _continueLabel[343206]
            _indexOfInterest[343201]
            _iterator[343202]
          }
          label _breakLabel[343207]
        }
      }
      (343244 'on block' 0 tmp[343239])
    }
    unknown _totalAdded[343250](343248 call chpl__atomicType int[13])
    (343253 'end of statement')
    {
      unknown tmpIter[343317] "expr temp" "maybe ref" "no copy" "temp"
      (343320 'move' tmpIter[343317](343256 call . dist c"targetLocDom"))
      unknown isRngDomArr[343500] "maybe param" "temp"
      (343515 'move' isRngDomArr[343500](343513 call ||(343502 call isBoundedRange tmpIter[343317])(343511 call ||(343505 call isDomain tmpIter[343317])(343508 call isArray tmpIter[343317]))))
      if isRngDomArr[343500]
      {
        const _coforallCount[343372] "const" "end count" "temp"
        (343437 'move' _coforallCount[343372](343434 call _endCountAlloc 0))
        unknown numTasks[343373] "temp"
        (343421 'move' numTasks[343373](343417 call . tmpIter[343317] c"size"))
        (343412 call _upEndCount _coforallCount[343372] 0 numTasks[343373])
        unknown _indexOfInterest[343379] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[343380] "expr temp" "temp"
        (343389 'move' _iterator[343380](343387 call _getIterator tmpIter[343317]))
        Defer
        {
          {
            (343405 call _freeIterator _iterator[343380])
          }
        }
        { scopeless type
          (343394 'move' _indexOfInterest[343379](343391 call iteratorIndex _iterator[343380]))
        }
        ForLoop[343381]
        {
          unknown l[343398] "coforall index var" "index var" "insert auto destroy"
          (343400 'move' l[343398] _indexOfInterest[343379])
          const tmp[343323] "const" "temp"
          (343325 'move' tmp[343323](343327 'deref'(343328 '_wide_get_locale'(343333 call(343330 call . dist c"targetLocales") l))))
          {
            {
              const _retval[343341] "const"(343353 call(343343 call .(343345 call .(343347 call postfix!(343349 call locDoms l)) c"mySparseBlock") c"bulkAdd")(343355 call inds(343357 call localeRanges l))(dataSorted = 1)(isUnique = 0))
              (343364 'end of statement')
              (343369 call(343366 call . _totalAdded c"add") _retval)
            }
            (343374 call _downEndCount _coforallCount[343372] nil[44])
            (343336 'coforall on block' 0 tmp[343323])
          }
          label _continueLabel[343384]
          _indexOfInterest[343379]
          _iterator[343380]
        }
        label _breakLabel[343385]
        Defer
        {
          {
            (343424 call _endCountFree _coforallCount[343372])
          }
        }
        (343429 call _waitEndCount _coforallCount[343372] 0 numTasks[343373])
      }
      {
        const _coforallCount[343441] "const" "end count" "temp"
        (343497 'move' _coforallCount[343441](343494 call _endCountAlloc 0))
        unknown _indexOfInterest[343448] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[343449] "expr temp" "temp"
        (343458 'move' _iterator[343449](343456 call _getIterator tmpIter[343317]))
        Defer
        {
          {
            (343474 call _freeIterator _iterator[343449])
          }
        }
        { scopeless type
          (343463 'move' _indexOfInterest[343448](343460 call iteratorIndex _iterator[343449]))
        }
        ForLoop[343450]
        {
          unknown l[343467] "coforall index var" "index var" "insert auto destroy"
          (343469 'move' l[343467] _indexOfInterest[343448])
          (343481 call _upEndCount _coforallCount[343441] 0)
          const tmp[343309] "const" "temp"
          (343311 'move' tmp[343309](343307 'deref'(343306 '_wide_get_locale'(343265 call(343260 call . dist c"targetLocales") l))))
          {
            {
              const _retval[343293] "const"(343292 call(343277 call .(343272 call .(343270 call postfix!(343269 call locDoms l)) c"mySparseBlock") c"bulkAdd")(343286 call inds(343284 call localeRanges l))(dataSorted = 1)(isUnique = 0))
              (343296 'end of statement')
              (343304 call(343299 call . _totalAdded c"add") _retval)
            }
            (343443 call _downEndCount _coforallCount[343441] nil[44])
            (343314 'coforall on block' 0 tmp[343309])
          }
          label _continueLabel[343453]
          _indexOfInterest[343448]
          _iterator[343449]
        }
        label _breakLabel[343454]
        Defer
        {
          {
            (343485 call _endCountFree _coforallCount[343441])
          }
        }
        (343490 call _waitEndCount _coforallCount[343441] 0)
      }
    }
    const _retval[343525] "const"(343524 call(343520 call . _totalAdded c"read"))
    (343528 'end of statement')
    (343530 return _retval)
  }
  function SparseBlockDom[344897](?).bulkAddHere_help[343547](arg _mt[344933]:_MT[238], arg this[344931]:SparseBlockDom[344897](?), arg inds[343544] :
  (343541 call chpl__buildArrayRuntimeType nil[44](343539 call chpl__buildIndexType rank idxType)), arg dataSorted[343550] =
  0, arg isUnique[343554] =
  0) : _unknown[51] "method" "primary method"
  {
    const _retval[343573] "const"(343572 call(343563 call .(343560 call .(343558 call postfix! myLocDom) c"mySparseBlock") c"bulkAdd") inds(dataSorted = 1)(isUnique = 0))
    (343576 'end of statement')
    (343579 return _retval)
  }
  function SparseBlockDom[344897](?).dsiSerialWrite[343587](arg _mt[344937]:_MT[238], arg this[344935]:SparseBlockDom[344897](?), arg f[343585]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(343688 call _cond_test(343591 call == rank 1))
    {
      (343595 call <~> f "{")
      {
        unknown _indexOfInterest[343628] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[343629] "expr temp" "temp"
        (343638 'move' _iterator[343629](343636 call _getIterator locDoms))
        Defer
        {
          {
            (343654 call _freeIterator _iterator[343629])
          }
        }
        { scopeless type
          (343643 'move' _indexOfInterest[343628](343640 call iteratorIndex _iterator[343629]))
        }
        ForLoop[343630]
        {
          unknown locdom[343647] "index var" "insert auto destroy"
          (343649 'move' locdom[343647] _indexOfInterest[343628])
          {
            if(343623 call _cond_test(343604 call .(343602 call postfix! locdom) c"dsiNumIndices"))
            {
              (343609 call <~> f " ")
              (343621 call(343616 call .(343614 call postfix! locdom) c"dsiSerialWrite") f)
            }
          }
          label _continueLabel[343633]
          _indexOfInterest[343628]
          _iterator[343629]
        }
        label _breakLabel[343634]
      }
      (343663 call <~> f "}")
    }
    {
      (343685 call compilerError "Can't write out multidimensional sparse distributed domains yet")
    }
  }
  function SparseBlockDom[344897](?).dsiBuildArray[343699](arg _mt[344941]:_MT[238], arg this[344939]:SparseBlockDom[344897](?), arg eltType[343697]:_any[178](?), param arg initElts[343702] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    unknown arr[343726](343707 'new'(_chpl_manager = unmanaged[220](?))(343725 call SparseBlockArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(sparseLayoutType = sparseLayoutType)(dom =(343723 call _to_unmanaged this))))
    (343729 'end of statement')
    (343737 call(343732 call . arr c"setup") initElts)
    (343740 return arr)
  }
  function SparseBlockDom[344897](?).getLocDom[343748](arg _mt[344945]:_MT[238], arg this[344943]:SparseBlockDom[344897](?), arg localeIdx[343746]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (343756 return(343754 call postfix!(343753 call locDoms localeIdx)))
  }
  function SparseBlockDom[344897](?).these[343763](arg _mt[344949]:_MT[238], arg this[344947]:SparseBlockDom[344897](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[343816] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[343817] "expr temp" "temp"
      (343826 'move' _iterator[343817](343824 call _getIterator locDoms))
      Defer
      {
        {
          (343842 call _freeIterator _iterator[343817])
        }
      }
      { scopeless type
        (343831 'move' _indexOfInterest[343816](343828 call iteratorIndex _iterator[343817]))
      }
      ForLoop[343818]
      {
        unknown locDom[343835] "index var" "insert auto destroy"
        (343837 'move' locDom[343835] _indexOfInterest[343816])
        {
          unknown _indexOfInterest[343782] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[343783] "expr temp" "temp"
          (343792 'move' _iterator[343783](343790 call _getIterator(343778 call(343774 call .(343771 call .(343769 call postfix! locDom) c"mySparseBlock") c"these"))))
          Defer
          {
            {
              (343809 call _freeIterator _iterator[343783])
            }
          }
          { scopeless type
            (343798 'move' _indexOfInterest[343782](343795 call iteratorIndex _iterator[343783]))
          }
          ForLoop[343784]
          {
            unknown x[343802] "index var" "insert auto destroy"
            (343804 'move' x[343802] _indexOfInterest[343782])
            (343780 yield x)
            label _continueLabel[343787]
            _indexOfInterest[343782]
            _iterator[343783]
          }
          label _breakLabel[343788]
        }
        label _continueLabel[343821]
        _indexOfInterest[343816]
        _iterator[343817]
      }
      label _breakLabel[343822]
    }
  }
  function SparseBlockDom[344897](?).these[343858](arg _mt[344953]:_MT[238], arg this[344951]:SparseBlockDom[344897](?), param arg tag[343855] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown tmpIter[343949] "expr temp" "maybe ref" "no copy" "temp"
      (343952 'move' tmpIter[343949](343878 call _build_tuple locDoms(343875 call . dist c"targetLocDom")))
      unknown isRngDomArr[344173] "maybe param" "temp"
      (344188 'move' isRngDomArr[344173](344186 call ||(344175 call isBoundedRange tmpIter[343949])(344184 call ||(344178 call isDomain tmpIter[343949])(344181 call isArray tmpIter[343949]))))
      if isRngDomArr[344173]
      {
        const _coforallCount[344017] "const" "end count" "temp"
        (344096 'move' _coforallCount[344017](344093 call _endCountAlloc 0))
        unknown numTasks[344018] "temp"
        (344080 'move' numTasks[344018](344076 call . tmpIter[343949] c"size"))
        (344071 call _upEndCount _coforallCount[344017] 0 numTasks[344018])
        unknown _indexOfInterest[344024] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[344025] "expr temp" "temp"
        (344034 'move' _iterator[344025](344032 call _getIteratorZip tmpIter[343949]))
        Defer
        {
          {
            (344064 call _freeIterator _iterator[344025])
          }
        }
        { scopeless type
          (344039 'move' _indexOfInterest[344024](344036 call iteratorIndex _iterator[344025]))
        }
        ForLoop[344026]
        {
          (344044 call _check_tuple_var_decl _indexOfInterest[344024] 2)
          unknown locDom[344050] "coforall index var" "index var" "insert auto destroy"
          (344052 'move' locDom[344050](344048 call _indexOfInterest[344024] 0))
          unknown localeIndex[344057] "coforall index var" "index var" "insert auto destroy"
          (344059 'move' localeIndex[344057](344055 call _indexOfInterest[344024] 1))
          const tmp[343955] "const" "temp"
          (343957 'move' tmp[343955](343959 'deref'(343960 '_wide_get_locale' locDom)))
          {
            {
              {
                unknown _indexOfInterest[343968] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[343970] "expr temp" "temp"
                (343972 'move' _iterator[343970](343975 call _getIterator(343985 call(343977 call .(343979 call .(343981 call postfix! locDom) c"mySparseBlock") c"these") tag)))
                Defer
                {
                  {
                    (343989 call _freeIterator _iterator[343970])
                  }
                }
                { scopeless type
                  (343993 'move' _indexOfInterest[343968](343996 call iteratorIndex _iterator[343970]))
                }
                ForLoop[343998]
                {
                  unknown followThis[344001] "index var" "insert auto destroy"
                  (344003 'move' followThis[344001] _indexOfInterest[343968])
                  {
                    (344007 yield(344009 call _build_tuple followThis localeIndex))
                  }
                  label _continueLabel[344012]
                  _indexOfInterest[343968]
                  _iterator[343970]
                }
                label _breakLabel[344014]
              }
            }
            (344019 call _downEndCount _coforallCount[344017] nil[44])
            (343963 'coforall on block' 0 tmp[343955])
          }
          label _continueLabel[344029]
          _indexOfInterest[344024]
          _iterator[344025]
        }
        label _breakLabel[344030]
        Defer
        {
          {
            (344083 call _endCountFree _coforallCount[344017])
          }
        }
        (344088 call _waitEndCount _coforallCount[344017] 0 numTasks[344018])
      }
      {
        const _coforallCount[344100] "const" "end count" "temp"
        (344170 'move' _coforallCount[344100](344167 call _endCountAlloc 0))
        unknown _indexOfInterest[344107] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[344108] "expr temp" "temp"
        (344117 'move' _iterator[344108](344115 call _getIteratorZip tmpIter[343949]))
        Defer
        {
          {
            (344147 call _freeIterator _iterator[344108])
          }
        }
        { scopeless type
          (344122 'move' _indexOfInterest[344107](344119 call iteratorIndex _iterator[344108]))
        }
        ForLoop[344109]
        {
          (344127 call _check_tuple_var_decl _indexOfInterest[344107] 2)
          unknown locDom[344133] "coforall index var" "index var" "insert auto destroy"
          (344135 'move' locDom[344133](344131 call _indexOfInterest[344107] 0))
          unknown localeIndex[344140] "coforall index var" "index var" "insert auto destroy"
          (344142 'move' localeIndex[344140](344138 call _indexOfInterest[344107] 1))
          (344154 call _upEndCount _coforallCount[344100] 0)
          const tmp[343939] "const" "temp"
          (343941 'move' tmp[343939](343937 'deref'(343936 '_wide_get_locale' locDom)))
          {
            {
              {
                unknown _indexOfInterest[343901] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[343902] "expr temp" "temp"
                (343911 'move' _iterator[343902](343909 call _getIterator(343892 call(343887 call .(343884 call .(343882 call postfix! locDom) c"mySparseBlock") c"these") tag)))
                Defer
                {
                  {
                    (343928 call _freeIterator _iterator[343902])
                  }
                }
                { scopeless type
                  (343917 'move' _indexOfInterest[343901](343914 call iteratorIndex _iterator[343902]))
                }
                ForLoop[343903]
                {
                  unknown followThis[343921] "index var" "insert auto destroy"
                  (343923 'move' followThis[343921] _indexOfInterest[343901])
                  {
                    (343898 yield(343896 call _build_tuple followThis localeIndex))
                  }
                  label _continueLabel[343906]
                  _indexOfInterest[343901]
                  _iterator[343902]
                }
                label _breakLabel[343907]
              }
            }
            (344102 call _downEndCount _coforallCount[344100] nil[44])
            (343944 'coforall on block' 0 tmp[343939])
          }
          label _continueLabel[344112]
          _indexOfInterest[344107]
          _iterator[344108]
        }
        label _breakLabel[344113]
        Defer
        {
          {
            (344158 call _endCountFree _coforallCount[344100])
          }
        }
        (344163 call _waitEndCount _coforallCount[344100] 0)
      }
    }
  }
  where {
    (343865 call == tag(343862 call . iterKind c"leader"))
  }
  function SparseBlockDom[344897](?).these[344202](arg _mt[344957]:_MT[238], arg this[344955]:SparseBlockDom[344897](?), param arg tag[344199] :
  iterKind, arg followThis[344204]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[344219] "temp" followThis
    (344226 call _check_tuple_var_decl tmp[344219] 2)
    unknown locFollowThis[344213](344220 call tmp[344219] 0)
    unknown localeIndex[344215](344223 call tmp[344219] 1)
    (344231 'end of statement')
    {
      unknown _indexOfInterest[344248] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[344249] "expr temp" "temp"
      (344258 'move' _iterator[344249](344256 call _getIterator(344244 call(344238 call .(344237 call locFollowThis 0) c"these") tag locFollowThis)))
      Defer
      {
        {
          (344275 call _freeIterator _iterator[344249])
        }
      }
      { scopeless type
        (344264 'move' _indexOfInterest[344248](344261 call iteratorIndex _iterator[344249]))
      }
      ForLoop[344250]
      {
        unknown i[344268] "index var" "insert auto destroy"
        (344270 'move' i[344268] _indexOfInterest[344248])
        (344246 yield i)
        label _continueLabel[344253]
        _indexOfInterest[344248]
        _iterator[344249]
      }
      label _breakLabel[344254]
    }
  }
  where {
    (344211 call == tag(344208 call . iterKind c"follower"))
  }
  function SparseBlockDom[344897](?).these[344291](arg _mt[344961]:_MT[238], arg this[344959]:SparseBlockDom[344897](?), param arg tag[344288] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown tmpIter[344356] "expr temp" "maybe ref" "no copy" "temp"
      (344359 'move' tmpIter[344356] locDoms)
      unknown isRngDomArr[344515] "maybe param" "temp"
      (344530 'move' isRngDomArr[344515](344528 call ||(344517 call isBoundedRange tmpIter[344356])(344526 call ||(344520 call isDomain tmpIter[344356])(344523 call isArray tmpIter[344356]))))
      if isRngDomArr[344515]
      {
        const _coforallCount[344387] "const" "end count" "temp"
        (344452 'move' _coforallCount[344387](344449 call _endCountAlloc 0))
        unknown numTasks[344388] "temp"
        (344436 'move' numTasks[344388](344432 call . tmpIter[344356] c"size"))
        (344427 call _upEndCount _coforallCount[344387] 0 numTasks[344388])
        unknown _indexOfInterest[344394] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[344395] "expr temp" "temp"
        (344404 'move' _iterator[344395](344402 call _getIterator tmpIter[344356]))
        Defer
        {
          {
            (344420 call _freeIterator _iterator[344395])
          }
        }
        { scopeless type
          (344409 'move' _indexOfInterest[344394](344406 call iteratorIndex _iterator[344395]))
        }
        ForLoop[344396]
        {
          unknown locDom[344413] "coforall index var" "index var" "insert auto destroy"
          (344415 'move' locDom[344413] _indexOfInterest[344394])
          const tmp[344362] "const" "temp"
          (344364 'move' tmp[344362](344366 'deref'(344367 '_wide_get_locale' locDom)))
          {
            {
              Forall {
                induction variables:
                  
                  unknown i[344378] "index var" "insert auto destroy"
                iterated expressions:
                  (344381 call .(344383 call postfix! locDom) c"mySparseBlock")
                shadow variables:
                other variables
                  forall body
                {
                  (344375 yield i)
                }
              }
            }
            (344389 call _downEndCount _coforallCount[344387] nil[44])
            (344370 'coforall on block' 0 tmp[344362])
          }
          label _continueLabel[344399]
          _indexOfInterest[344394]
          _iterator[344395]
        }
        label _breakLabel[344400]
        Defer
        {
          {
            (344439 call _endCountFree _coforallCount[344387])
          }
        }
        (344444 call _waitEndCount _coforallCount[344387] 0 numTasks[344388])
      }
      {
        const _coforallCount[344456] "const" "end count" "temp"
        (344512 'move' _coforallCount[344456](344509 call _endCountAlloc 0))
        unknown _indexOfInterest[344463] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[344464] "expr temp" "temp"
        (344473 'move' _iterator[344464](344471 call _getIterator tmpIter[344356]))
        Defer
        {
          {
            (344489 call _freeIterator _iterator[344464])
          }
        }
        { scopeless type
          (344478 'move' _indexOfInterest[344463](344475 call iteratorIndex _iterator[344464]))
        }
        ForLoop[344465]
        {
          unknown locDom[344482] "coforall index var" "index var" "insert auto destroy"
          (344484 'move' locDom[344482] _indexOfInterest[344463])
          (344496 call _upEndCount _coforallCount[344456] 0)
          const tmp[344347] "const" "temp"
          (344349 'move' tmp[344347](344345 'deref'(344344 '_wide_get_locale' locDom)))
          {
            {
              Forall {
                induction variables:
                  
                  unknown i[344339] "index var" "insert auto destroy"
                iterated expressions:
                  (344331 call .(344329 call postfix! locDom) c"mySparseBlock")
                shadow variables:
                other variables
                  forall body
                {
                  (344335 yield i)
                }
              }
            }
            (344458 call _downEndCount _coforallCount[344456] nil[44])
            (344352 'coforall on block' 0 tmp[344347])
          }
          label _continueLabel[344468]
          _indexOfInterest[344463]
          _iterator[344464]
        }
        label _breakLabel[344469]
        Defer
        {
          {
            (344500 call _endCountFree _coforallCount[344456])
          }
        }
        (344505 call _waitEndCount _coforallCount[344456] 0)
      }
    }
  }
  where {
    (344322 call &&(344298 call == tag(344295 call . iterKind c"standalone"))(344321 'method call resolves'(344316 call .(344313 call .(344311 call postfix!(344310 call locDoms(344308 call createTuple rank int[13] 0))) c"mySparseBlock") c"_value") "these" tag))
  }
  function SparseBlockDom[344897](?).dsiMember[344542](arg _mt[344965]:_MT[238], arg this[344963]:SparseBlockDom[344897](?), arg ind[344540]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown _retval[344547] 0 bool[10]
    (344550 'end of statement')
    const tmp[344585] "const" "temp"
    (344587 'move' tmp[344585](344583 'deref'(344582 '_wide_get_locale'(344558 call(344553 call . dist c"dsiIndexToLocale") ind))))
    {
      {
        (344578 call = _retval(344577 call(344572 call .(344570 call postfix!(344569 call locDoms(344567 call(344562 call . dist c"targetLocsIdx") ind))) c"dsiMember") ind))
      }
      (344590 'on block' 0 tmp[344585])
    }
    (344594 return _retval)
  }
  { scopeless type
    bool[10]
  }
  function SparseBlockDom[344897](?).dsiClear[344601](arg _mt[344969]:_MT[238], arg this[344967]:SparseBlockDom[344897](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[344626] "expr temp" "maybe ref" "no copy" "temp"
      (344629 'move' tmpIter[344626] locDoms)
      unknown isRngDomArr[344780] "maybe param" "temp"
      (344795 'move' isRngDomArr[344780](344793 call ||(344782 call isBoundedRange tmpIter[344626])(344791 call ||(344785 call isDomain tmpIter[344626])(344788 call isArray tmpIter[344626]))))
      if isRngDomArr[344780]
      {
        const _coforallCount[344652] "const" "end count" "temp"
        (344717 'move' _coforallCount[344652](344714 call _endCountAlloc 0))
        unknown numTasks[344653] "temp"
        (344701 'move' numTasks[344653](344697 call . tmpIter[344626] c"size"))
        (344692 call _upEndCount _coforallCount[344652] 0 numTasks[344653])
        unknown _indexOfInterest[344659] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[344660] "expr temp" "temp"
        (344669 'move' _iterator[344660](344667 call _getIterator tmpIter[344626]))
        Defer
        {
          {
            (344685 call _freeIterator _iterator[344660])
          }
        }
        { scopeless type
          (344674 'move' _indexOfInterest[344659](344671 call iteratorIndex _iterator[344660]))
        }
        ForLoop[344661]
        {
          unknown locDom[344678] "coforall index var" "index var" "insert auto destroy"
          (344680 'move' locDom[344678] _indexOfInterest[344659])
          const tmp[344632] "const" "temp"
          (344634 'move' tmp[344632](344636 'deref'(344637 '_wide_get_locale' locDom)))
          {
            (344650 call(344645 call .(344647 call postfix! locDom) c"dsiClear"))
            (344654 call _downEndCount _coforallCount[344652] nil[44])
            (344640 'coforall on block' 0 tmp[344632])
          }
          label _continueLabel[344664]
          _indexOfInterest[344659]
          _iterator[344660]
        }
        label _breakLabel[344665]
        Defer
        {
          {
            (344704 call _endCountFree _coforallCount[344652])
          }
        }
        (344709 call _waitEndCount _coforallCount[344652] 0 numTasks[344653])
      }
      {
        const _coforallCount[344721] "const" "end count" "temp"
        (344777 'move' _coforallCount[344721](344774 call _endCountAlloc 0))
        unknown _indexOfInterest[344728] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[344729] "expr temp" "temp"
        (344738 'move' _iterator[344729](344736 call _getIterator tmpIter[344626]))
        Defer
        {
          {
            (344754 call _freeIterator _iterator[344729])
          }
        }
        { scopeless type
          (344743 'move' _indexOfInterest[344728](344740 call iteratorIndex _iterator[344729]))
        }
        ForLoop[344730]
        {
          unknown locDom[344747] "coforall index var" "index var" "insert auto destroy"
          (344749 'move' locDom[344747] _indexOfInterest[344728])
          (344761 call _upEndCount _coforallCount[344721] 0)
          const tmp[344618] "const" "temp"
          (344620 'move' tmp[344618](344616 'deref'(344615 '_wide_get_locale' locDom)))
          {
            (344613 call(344609 call .(344607 call postfix! locDom) c"dsiClear"))
            (344723 call _downEndCount _coforallCount[344721] nil[44])
            (344623 'coforall on block' 0 tmp[344618])
          }
          label _continueLabel[344733]
          _indexOfInterest[344728]
          _iterator[344729]
        }
        label _breakLabel[344734]
        Defer
        {
          {
            (344765 call _endCountFree _coforallCount[344721])
          }
        }
        (344770 call _waitEndCount _coforallCount[344721] 0)
      }
    }
  }
  function SparseBlockDom[344897](?).dsiMyDist[344804](arg _mt[344973]:_MT[238], arg this[344971]:SparseBlockDom[344897](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (344807 return dist)
  }
  function SparseBlockDom[344897](?).dsiAssignDomain[344818](arg _mt[344977]:_MT[238], arg this[344975]:SparseBlockDom[344897](?), arg rhs[344815] :
  _domain, arg lhsPrivate[344821] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(344848 call _cond_test(344825 call ! lhsPrivate))
    {
      (344846 call halt "SparseBlock domain assignment not yet supported")
    }
    {
      unknown _indexOfInterest[344861] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[344862] "expr temp" "temp"
      (344871 'move' _iterator[344862](344869 call _getIterator rhs))
      Defer
      {
        {
          (344887 call _freeIterator _iterator[344862])
        }
      }
      { scopeless type
        (344876 'move' _indexOfInterest[344861](344873 call iteratorIndex _iterator[344862]))
      }
      ForLoop[344863]
      {
        unknown i[344880] "index var" "insert auto destroy"
        (344882 'move' i[344880] _indexOfInterest[344861])
        (344859 call dsiAdd i)
        label _continueLabel[344866]
        _indexOfInterest[344861]
        _iterator[344862]
      }
      label _breakLabel[344867]
    }
  }
  type SparseBlockDom[344897](?) unknown sparseLayoutType[342078] "type variable" unknown stridable[342083] "param" 0 bool[10] const dist[342094] "const"(342093 'to unmanaged class from unknown'(342092 call Block rank idxType sparseLayoutType)) unknown whole[342108](342106 call chpl__buildDomainRuntimeType defaultDist(rank = rank)(idxType = idxType)(stridable = stridable)) unknown locDoms[342130](342128 call chpl__buildArrayRuntimeType(342126 call chpl__ensureDomainExpr(342113 call . dist c"targetLocDom"))(342125 'to unmanaged class from unknown'(342124 'to nilable class from type'(342123 call LocSparseBlockDom rank idxType stridable sparseLayoutType)))) unknown myLocDom[342143](342142 'to unmanaged class from unknown'(342141 'to nilable class from type'(342140 call LocSparseBlockDom rank idxType stridable sparseLayoutType))) BaseSparseDomImpl
  function getDefaultSparseDist[344984](arg sparseLayoutType[344982]:_any[178](?)) : _unknown[51] "private"
  {
    if(345009 call _cond_test(354974 'is_subtype' DefaultDist(344990 call _to_nonnil sparseLayoutType)))
    {
      (344995 return defaultDist)
    }
    {
      (345006 return(344998 'new'(345005 call dmap(345000 'new'(345003 call sparseLayoutType)))))
    }
  }
  function LocSparseBlockDom[345166](?).dsiAdd[345079](arg _mt[345170]:_MT[238], arg this[345168]:LocSparseBlockDom[345166](?), arg ind[345076] :
  (345074 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (345088 return(345087 call(345082 call . mySparseBlock c"add") ind))
  }
  function LocSparseBlockDom[345166](?).dsiMember[345102](arg _mt[345174]:_MT[238], arg this[345172]:LocSparseBlockDom[345166](?), arg ind[345099] :
  (345097 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    (345111 return(345110 call(345105 call . mySparseBlock c"contains") ind))
  }
  function LocSparseBlockDom[345166](?).dsiClear[345118](arg _mt[345178]:_MT[238], arg this[345176]:LocSparseBlockDom[345166](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (345125 call(345121 call . mySparseBlock c"clear"))
  }
  function LocSparseBlockDom[345166](?).dsiSerialWrite[345134](arg _mt[345182]:_MT[238], arg this[345180]:LocSparseBlockDom[345166](?), arg w[345132]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (345147 call(345140 call .(345137 call . mySparseBlock c"_value") c"dsiSerialWrite") w(printBrackets = 0))
  }
  function LocSparseBlockDom[345166](?).dsiNumIndices[345154](arg _mt[345186]:_MT[238], arg this[345184]:LocSparseBlockDom[345166](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (345160 return(345157 call . mySparseBlock c"size"))
  }
  type LocSparseBlockDom[345166](?) unknown rank[345018] "param" int[13] unknown idxType[345022] "type variable" unknown stridable[345026] "param" bool[10] unknown sparseLayoutType[345030] "type variable" unknown parentDom[345040](345038 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable) unknown sparseDist[345048](345047 call getDefaultSparseDist sparseLayoutType) unknown mySparseBlock[345066](345064 call chpl__distributed sparseDist(345061 call chpl__buildSparseDomainRuntimeType(345058 call . parentDom c"defaultSparseDist") parentDom))
  function SparseBlockArr[347225](?).init[345250](arg _mt[347229]:_MT[238], arg this[347227]:SparseBlockArr[347225](?), arg eltType[345248]:_any[178](?), param arg rank[345252]:_any[178](?), arg idxType[345254]:_any[178](?), param arg stridable[345256]:_any[178](?), arg sparseLayoutType[345258]:_any[178](?), arg dom[345260]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (345275 call(345263 call . super c"init")(eltType = eltType)(rank = rank)(idxType = idxType)(dom = dom))
    (345283 call =(345279 call . this c"stridable") stridable)
    (345291 call =(345287 call . this c"sparseLayoutType") sparseLayoutType)
    (345307 call =(345297 call . this c"locArrDom")(345304 call .(345301 call . dom c"dist") c"targetLocDom"))
  }
  function SparseBlockArr[347225](?).setup[345316](arg _mt[347233]:_MT[238], arg this[347231]:SparseBlockArr[347225](?), param arg initElts[345314]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown thisid[345323](345322 '_wide_get_node' this)
    (345326 'end of statement')
    {
      unknown tmpIter[345411] "expr temp" "maybe ref" "no copy" "temp"
      (345414 'move' tmpIter[345411](345333 call .(345330 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[345612] "maybe param" "temp"
      (345627 'move' isRngDomArr[345612](345625 call ||(345614 call isBoundedRange tmpIter[345411])(345623 call ||(345617 call isDomain tmpIter[345411])(345620 call isArray tmpIter[345411]))))
      if isRngDomArr[345612]
      {
        const _coforallCount[345484] "const" "end count" "temp"
        (345549 'move' _coforallCount[345484](345546 call _endCountAlloc 0))
        unknown numTasks[345485] "temp"
        (345533 'move' numTasks[345485](345529 call . tmpIter[345411] c"size"))
        (345524 call _upEndCount _coforallCount[345484] 0 numTasks[345485])
        unknown _indexOfInterest[345491] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[345492] "expr temp" "temp"
        (345501 'move' _iterator[345492](345499 call _getIterator tmpIter[345411]))
        Defer
        {
          {
            (345517 call _freeIterator _iterator[345492])
          }
        }
        { scopeless type
          (345506 'move' _indexOfInterest[345491](345503 call iteratorIndex _iterator[345492]))
        }
        ForLoop[345493]
        {
          unknown localeIdx[345510] "coforall index var" "index var" "insert auto destroy"
          (345512 'move' localeIdx[345510] _indexOfInterest[345491])
          const tmp[345417] "const" "temp"
          (345419 'move' tmp[345417](345421 'deref'(345422 '_wide_get_locale'(345430 call(345424 call .(345426 call . dom c"dist") c"targetLocales") localeIdx))))
          {
            {
              const locDom[345438] "const"(345443 call(345440 call . dom c"getLocDom") localeIdx)
              (345446 'end of statement')
              (345448 call =(345450 call locArr localeIdx)(345452 'new'(_chpl_manager = unmanaged[220](?))(345456 call LocSparseBlockArr eltType rank idxType stridable sparseLayoutType locDom(initElts = initElts))))
              if(345466 call _cond_test(345468 call == thisid(345471 call . here c"id")))
              {
                (345477 call = myLocArr(345480 call locArr localeIdx))
              }
            }
            (345486 call _downEndCount _coforallCount[345484] nil[44])
            (345433 'coforall on block' 0 tmp[345417])
          }
          label _continueLabel[345496]
          _indexOfInterest[345491]
          _iterator[345492]
        }
        label _breakLabel[345497]
        Defer
        {
          {
            (345536 call _endCountFree _coforallCount[345484])
          }
        }
        (345541 call _waitEndCount _coforallCount[345484] 0 numTasks[345485])
      }
      {
        const _coforallCount[345553] "const" "end count" "temp"
        (345609 'move' _coforallCount[345553](345606 call _endCountAlloc 0))
        unknown _indexOfInterest[345560] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[345561] "expr temp" "temp"
        (345570 'move' _iterator[345561](345568 call _getIterator tmpIter[345411]))
        Defer
        {
          {
            (345586 call _freeIterator _iterator[345561])
          }
        }
        { scopeless type
          (345575 'move' _indexOfInterest[345560](345572 call iteratorIndex _iterator[345561]))
        }
        ForLoop[345562]
        {
          unknown localeIdx[345579] "coforall index var" "index var" "insert auto destroy"
          (345581 'move' localeIdx[345579] _indexOfInterest[345560])
          (345593 call _upEndCount _coforallCount[345553] 0)
          const tmp[345402] "const" "temp"
          (345404 'move' tmp[345402](345400 'deref'(345399 '_wide_get_locale'(345345 call(345340 call .(345337 call . dom c"dist") c"targetLocales") localeIdx))))
          {
            {
              const locDom[345353] "const"(345352 call(345347 call . dom c"getLocDom") localeIdx)
              (345356 'end of statement')
              (345376 call =(345361 call locArr localeIdx)(345364 'new'(_chpl_manager = unmanaged[220](?))(345375 call LocSparseBlockArr eltType rank idxType stridable sparseLayoutType locDom(initElts = initElts))))
              if(345394 call _cond_test(345384 call == thisid(345381 call . here c"id")))
              {
                (345391 call = myLocArr(345390 call locArr localeIdx))
              }
            }
            (345555 call _downEndCount _coforallCount[345553] nil[44])
            (345407 'coforall on block' 0 tmp[345402])
          }
          label _continueLabel[345565]
          _indexOfInterest[345560]
          _iterator[345561]
        }
        label _breakLabel[345566]
        Defer
        {
          {
            (345597 call _endCountFree _coforallCount[345553])
          }
        }
        (345602 call _waitEndCount _coforallCount[345553] 0)
      }
    }
  }
  function SparseBlockArr[347225](?).dsiElementInitializationComplete[345635](arg _mt[347237]:_MT[238], arg this[347235]:SparseBlockArr[347225](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[345677] "expr temp" "maybe ref" "no copy" "temp"
      (345680 'move' tmpIter[345677](345642 call .(345639 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[345838] "maybe param" "temp"
      (345853 'move' isRngDomArr[345838](345851 call ||(345840 call isBoundedRange tmpIter[345677])(345849 call ||(345843 call isDomain tmpIter[345677])(345846 call isArray tmpIter[345677]))))
      if isRngDomArr[345838]
      {
        const _coforallCount[345710] "const" "end count" "temp"
        (345775 'move' _coforallCount[345710](345772 call _endCountAlloc 0))
        unknown numTasks[345711] "temp"
        (345759 'move' numTasks[345711](345755 call . tmpIter[345677] c"size"))
        (345750 call _upEndCount _coforallCount[345710] 0 numTasks[345711])
        unknown _indexOfInterest[345717] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[345718] "expr temp" "temp"
        (345727 'move' _iterator[345718](345725 call _getIterator tmpIter[345677]))
        Defer
        {
          {
            (345743 call _freeIterator _iterator[345718])
          }
        }
        { scopeless type
          (345732 'move' _indexOfInterest[345717](345729 call iteratorIndex _iterator[345718]))
        }
        ForLoop[345719]
        {
          unknown localeIdx[345736] "coforall index var" "index var" "insert auto destroy"
          (345738 'move' localeIdx[345736] _indexOfInterest[345717])
          const tmp[345683] "const" "temp"
          (345685 'move' tmp[345683](345687 'deref'(345688 '_wide_get_locale'(345690 call locArr localeIdx))))
          {
            {
              (345708 call(345698 call .(345700 call .(345702 call postfix!(345704 call locArr localeIdx)) c"myElems") c"dsiElementInitializationComplete"))
            }
            (345712 call _downEndCount _coforallCount[345710] nil[44])
            (345693 'coforall on block' 0 tmp[345683])
          }
          label _continueLabel[345722]
          _indexOfInterest[345717]
          _iterator[345718]
        }
        label _breakLabel[345723]
        Defer
        {
          {
            (345762 call _endCountFree _coforallCount[345710])
          }
        }
        (345767 call _waitEndCount _coforallCount[345710] 0 numTasks[345711])
      }
      {
        const _coforallCount[345779] "const" "end count" "temp"
        (345835 'move' _coforallCount[345779](345832 call _endCountAlloc 0))
        unknown _indexOfInterest[345786] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[345787] "expr temp" "temp"
        (345796 'move' _iterator[345787](345794 call _getIterator tmpIter[345677]))
        Defer
        {
          {
            (345812 call _freeIterator _iterator[345787])
          }
        }
        { scopeless type
          (345801 'move' _indexOfInterest[345786](345798 call iteratorIndex _iterator[345787]))
        }
        ForLoop[345788]
        {
          unknown localeIdx[345805] "coforall index var" "index var" "insert auto destroy"
          (345807 'move' localeIdx[345805] _indexOfInterest[345786])
          (345819 call _upEndCount _coforallCount[345779] 0)
          const tmp[345668] "const" "temp"
          (345670 'move' tmp[345668](345666 'deref'(345665 '_wide_get_locale'(345648 call locArr localeIdx))))
          {
            {
              (345662 call(345658 call .(345655 call .(345653 call postfix!(345652 call locArr localeIdx)) c"myElems") c"dsiElementInitializationComplete"))
            }
            (345781 call _downEndCount _coforallCount[345779] nil[44])
            (345673 'coforall on block' 0 tmp[345668])
          }
          label _continueLabel[345791]
          _indexOfInterest[345786]
          _iterator[345787]
        }
        label _breakLabel[345792]
        Defer
        {
          {
            (345823 call _endCountFree _coforallCount[345779])
          }
        }
        (345828 call _waitEndCount _coforallCount[345779] 0)
      }
    }
  }
  function SparseBlockArr[347225](?).dsiElementDeinitializationComplete[345862](arg _mt[347241]:_MT[238], arg this[347239]:SparseBlockArr[347225](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[345904] "expr temp" "maybe ref" "no copy" "temp"
      (345907 'move' tmpIter[345904](345869 call .(345866 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[346065] "maybe param" "temp"
      (346080 'move' isRngDomArr[346065](346078 call ||(346067 call isBoundedRange tmpIter[345904])(346076 call ||(346070 call isDomain tmpIter[345904])(346073 call isArray tmpIter[345904]))))
      if isRngDomArr[346065]
      {
        const _coforallCount[345937] "const" "end count" "temp"
        (346002 'move' _coforallCount[345937](345999 call _endCountAlloc 0))
        unknown numTasks[345938] "temp"
        (345986 'move' numTasks[345938](345982 call . tmpIter[345904] c"size"))
        (345977 call _upEndCount _coforallCount[345937] 0 numTasks[345938])
        unknown _indexOfInterest[345944] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[345945] "expr temp" "temp"
        (345954 'move' _iterator[345945](345952 call _getIterator tmpIter[345904]))
        Defer
        {
          {
            (345970 call _freeIterator _iterator[345945])
          }
        }
        { scopeless type
          (345959 'move' _indexOfInterest[345944](345956 call iteratorIndex _iterator[345945]))
        }
        ForLoop[345946]
        {
          unknown localeIdx[345963] "coforall index var" "index var" "insert auto destroy"
          (345965 'move' localeIdx[345963] _indexOfInterest[345944])
          const tmp[345910] "const" "temp"
          (345912 'move' tmp[345910](345914 'deref'(345915 '_wide_get_locale'(345917 call locArr localeIdx))))
          {
            {
              (345935 call(345925 call .(345927 call .(345929 call postfix!(345931 call locArr localeIdx)) c"myElems") c"dsiElementDeinitializationComplete"))
            }
            (345939 call _downEndCount _coforallCount[345937] nil[44])
            (345920 'coforall on block' 0 tmp[345910])
          }
          label _continueLabel[345949]
          _indexOfInterest[345944]
          _iterator[345945]
        }
        label _breakLabel[345950]
        Defer
        {
          {
            (345989 call _endCountFree _coforallCount[345937])
          }
        }
        (345994 call _waitEndCount _coforallCount[345937] 0 numTasks[345938])
      }
      {
        const _coforallCount[346006] "const" "end count" "temp"
        (346062 'move' _coforallCount[346006](346059 call _endCountAlloc 0))
        unknown _indexOfInterest[346013] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[346014] "expr temp" "temp"
        (346023 'move' _iterator[346014](346021 call _getIterator tmpIter[345904]))
        Defer
        {
          {
            (346039 call _freeIterator _iterator[346014])
          }
        }
        { scopeless type
          (346028 'move' _indexOfInterest[346013](346025 call iteratorIndex _iterator[346014]))
        }
        ForLoop[346015]
        {
          unknown localeIdx[346032] "coforall index var" "index var" "insert auto destroy"
          (346034 'move' localeIdx[346032] _indexOfInterest[346013])
          (346046 call _upEndCount _coforallCount[346006] 0)
          const tmp[345895] "const" "temp"
          (345897 'move' tmp[345895](345893 'deref'(345892 '_wide_get_locale'(345875 call locArr localeIdx))))
          {
            {
              (345889 call(345885 call .(345882 call .(345880 call postfix!(345879 call locArr localeIdx)) c"myElems") c"dsiElementDeinitializationComplete"))
            }
            (346008 call _downEndCount _coforallCount[346006] nil[44])
            (345900 'coforall on block' 0 tmp[345895])
          }
          label _continueLabel[346018]
          _indexOfInterest[346013]
          _iterator[346014]
        }
        label _breakLabel[346019]
        Defer
        {
          {
            (346050 call _endCountFree _coforallCount[346006])
          }
        }
        (346055 call _waitEndCount _coforallCount[346006] 0)
      }
    }
  }
  function SparseBlockArr[347225](?).dsiDestroyArr[346093](arg _mt[347245]:_MT[238], arg this[347243]:SparseBlockArr[347225](?), arg deinitElts[346090] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[346161] "expr temp" "maybe ref" "no copy" "temp"
      (346164 'move' tmpIter[346161](346100 call .(346097 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[346344] "maybe param" "temp"
      (346359 'move' isRngDomArr[346344](346357 call ||(346346 call isBoundedRange tmpIter[346161])(346355 call ||(346349 call isDomain tmpIter[346161])(346352 call isArray tmpIter[346161]))))
      if isRngDomArr[346344]
      {
        const _coforallCount[346216] "const" "end count" "temp"
        (346281 'move' _coforallCount[346216](346278 call _endCountAlloc 0))
        unknown numTasks[346217] "temp"
        (346265 'move' numTasks[346217](346261 call . tmpIter[346161] c"size"))
        (346256 call _upEndCount _coforallCount[346216] 0 numTasks[346217])
        unknown _indexOfInterest[346223] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[346224] "expr temp" "temp"
        (346233 'move' _iterator[346224](346231 call _getIterator tmpIter[346161]))
        Defer
        {
          {
            (346249 call _freeIterator _iterator[346224])
          }
        }
        { scopeless type
          (346238 'move' _indexOfInterest[346223](346235 call iteratorIndex _iterator[346224]))
        }
        ForLoop[346225]
        {
          unknown localeIdx[346242] "coforall index var" "index var" "insert auto destroy"
          (346244 'move' localeIdx[346242] _indexOfInterest[346223])
          const tmp[346167] "const" "temp"
          (346169 'move' tmp[346167](346171 'deref'(346172 '_wide_get_locale'(346174 call locArr localeIdx))))
          {
            {
              unknown arr[346182](346184 call locArr localeIdx)
              (346187 'end of statement')
              if(346189 call _cond_test deinitElts)
              {
                (346194 call _deinitElements(346196 call .(346198 call postfix! arr) c"myElems"))
              }
              (346211 call(346203 call .(346205 call .(346207 call postfix! arr) c"myElems") c"dsiElementDeinitializationComplete"))
              (346213 call chpl__delete arr)
            }
            (346218 call _downEndCount _coforallCount[346216] nil[44])
            (346177 'coforall on block' 0 tmp[346167])
          }
          label _continueLabel[346228]
          _indexOfInterest[346223]
          _iterator[346224]
        }
        label _breakLabel[346229]
        Defer
        {
          {
            (346268 call _endCountFree _coforallCount[346216])
          }
        }
        (346273 call _waitEndCount _coforallCount[346216] 0 numTasks[346217])
      }
      {
        const _coforallCount[346285] "const" "end count" "temp"
        (346341 'move' _coforallCount[346285](346338 call _endCountAlloc 0))
        unknown _indexOfInterest[346292] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[346293] "expr temp" "temp"
        (346302 'move' _iterator[346293](346300 call _getIterator tmpIter[346161]))
        Defer
        {
          {
            (346318 call _freeIterator _iterator[346293])
          }
        }
        { scopeless type
          (346307 'move' _indexOfInterest[346292](346304 call iteratorIndex _iterator[346293]))
        }
        ForLoop[346294]
        {
          unknown localeIdx[346311] "coforall index var" "index var" "insert auto destroy"
          (346313 'move' localeIdx[346311] _indexOfInterest[346292])
          (346325 call _upEndCount _coforallCount[346285] 0)
          const tmp[346152] "const" "temp"
          (346154 'move' tmp[346152](346150 'deref'(346149 '_wide_get_locale'(346106 call locArr localeIdx))))
          {
            {
              unknown arr[346111](346110 call locArr localeIdx)
              (346114 'end of statement')
              if(346127 call _cond_test deinitElts)
              {
                (346125 call _deinitElements(346121 call .(346119 call postfix! arr) c"myElems"))
              }
              (346142 call(346138 call .(346135 call .(346133 call postfix! arr) c"myElems") c"dsiElementDeinitializationComplete"))
              (346146 call chpl__delete arr)
            }
            (346287 call _downEndCount _coforallCount[346285] nil[44])
            (346157 'coforall on block' 0 tmp[346152])
          }
          label _continueLabel[346297]
          _indexOfInterest[346292]
          _iterator[346293]
        }
        label _breakLabel[346298]
        Defer
        {
          {
            (346329 call _endCountFree _coforallCount[346285])
          }
        }
        (346334 call _waitEndCount _coforallCount[346285] 0)
      }
    }
  }
  function SparseBlockArr[347225](?).these[346368](arg _mt[347249]:_MT[238], arg this[347247]:SparseBlockArr[347225](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[346451] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[346452] "expr temp" "temp"
      (346461 'move' _iterator[346452](346459 call _getIterator(346375 call .(346372 call . dom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (346478 call _freeIterator _iterator[346452])
        }
      }
      { scopeless type
        (346467 'move' _indexOfInterest[346451](346464 call iteratorIndex _iterator[346452]))
      }
      ForLoop[346453]
      {
        unknown locI[346471] "index var" "insert auto destroy"
        (346473 'move' locI[346471] _indexOfInterest[346451])
        {
          unknown locDom[346387](346385 call postfix!(346384 call(346379 call . dom c"locDoms") locI))
          (346390 'end of statement')
          unknown locArrI[346398](346396 call postfix!(346395 call locArr locI))
          (346401 'end of statement')
          {
            unknown _indexOfInterest[346417] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[346418] "expr temp" "temp"
            (346427 'move' _iterator[346418](346425 call _getIterator(346404 call . locDom c"mySparseBlock")))
            Defer
            {
              {
                (346444 call _freeIterator _iterator[346418])
              }
            }
            { scopeless type
              (346433 'move' _indexOfInterest[346417](346430 call iteratorIndex _iterator[346418]))
            }
            ForLoop[346419]
            {
              unknown x[346437] "index var" "insert auto destroy"
              (346439 'move' x[346437] _indexOfInterest[346417])
              {
                (346414 yield(346413 call(346408 call . locArrI c"myElems") x))
              }
              label _continueLabel[346422]
              _indexOfInterest[346417]
              _iterator[346418]
            }
            label _breakLabel[346423]
          }
        }
        label _continueLabel[346456]
        _indexOfInterest[346451]
        _iterator[346452]
      }
      label _breakLabel[346457]
    }
  }
  function SparseBlockArr[347225](?).these[346494](arg _mt[347253]:_MT[238], arg this[347251]:SparseBlockArr[347225](?), param arg tag[346491] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[346514] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[346515] "expr temp" "temp"
      (346524 'move' _iterator[346515](346522 call _getIterator(346510 call(346505 call . dom c"these") tag)))
      Defer
      {
        {
          (346541 call _freeIterator _iterator[346515])
        }
      }
      { scopeless type
        (346530 'move' _indexOfInterest[346514](346527 call iteratorIndex _iterator[346515]))
      }
      ForLoop[346516]
      {
        unknown followThis[346534] "index var" "insert auto destroy"
        (346536 'move' followThis[346534] _indexOfInterest[346514])
        (346512 yield followThis)
        label _continueLabel[346519]
        _indexOfInterest[346514]
        _iterator[346515]
      }
      label _breakLabel[346520]
    }
  }
  where {
    (346501 call == tag(346498 call . iterKind c"leader"))
  }
  function SparseBlockArr[347225](?).these[346558](arg _mt[347257]:_MT[238], arg this[347255]:SparseBlockArr[347225](?), param arg tag[346555] :
  iterKind, arg followThis[346560]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown tmp[346575] "temp" followThis
    (346582 call _check_tuple_var_decl tmp[346575] 2)
    unknown locFollowThis[346569](346576 call tmp[346575] 0)
    unknown localeIndex[346571](346579 call tmp[346575] 1)
    (346587 'end of statement')
    {
      unknown _indexOfInterest[346616] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[346617] "expr temp" "temp"
      (346626 'move' _iterator[346617](346624 call _getIterator(346600 call(346594 call .(346593 call locFollowThis 0) c"these") tag locFollowThis)))
      Defer
      {
        {
          (346643 call _freeIterator _iterator[346617])
        }
      }
      { scopeless type
        (346632 'move' _indexOfInterest[346616](346629 call iteratorIndex _iterator[346617]))
      }
      ForLoop[346618]
      {
        unknown i[346636] "index var" "insert auto destroy"
        (346638 'move' i[346636] _indexOfInterest[346616])
        {
          (346613 yield(346612 call(346607 call .(346605 call postfix!(346604 call locArr localeIndex)) c"dsiAccess") i))
        }
        label _continueLabel[346621]
        _indexOfInterest[346616]
        _iterator[346617]
      }
      label _breakLabel[346622]
    }
  }
  where {
    (346567 call == tag(346564 call . iterKind c"follower"))
  }
  function SparseBlockArr[347225](?).these[346659](arg _mt[347261]:_MT[238], arg this[347259]:SparseBlockArr[347225](?), param arg tag[346656] :
  iterKind) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown tmpIter[346721] "expr temp" "maybe ref" "no copy" "temp"
      (346724 'move' tmpIter[346721] locArr)
      unknown isRngDomArr[346880] "maybe param" "temp"
      (346895 'move' isRngDomArr[346880](346893 call ||(346882 call isBoundedRange tmpIter[346721])(346891 call ||(346885 call isDomain tmpIter[346721])(346888 call isArray tmpIter[346721]))))
      if isRngDomArr[346880]
      {
        const _coforallCount[346752] "const" "end count" "temp"
        (346817 'move' _coforallCount[346752](346814 call _endCountAlloc 0))
        unknown numTasks[346753] "temp"
        (346801 'move' numTasks[346753](346797 call . tmpIter[346721] c"size"))
        (346792 call _upEndCount _coforallCount[346752] 0 numTasks[346753])
        unknown _indexOfInterest[346759] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[346760] "expr temp" "temp"
        (346769 'move' _iterator[346760](346767 call _getIterator tmpIter[346721]))
        Defer
        {
          {
            (346785 call _freeIterator _iterator[346760])
          }
        }
        { scopeless type
          (346774 'move' _indexOfInterest[346759](346771 call iteratorIndex _iterator[346760]))
        }
        ForLoop[346761]
        {
          unknown locA[346778] "coforall index var" "index var" "insert auto destroy"
          (346780 'move' locA[346778] _indexOfInterest[346759])
          const tmp[346727] "const" "temp"
          (346729 'move' tmp[346727](346731 'deref'(346732 '_wide_get_locale' locA)))
          {
            {
              Forall {
                induction variables:
                  
                  unknown i[346743] "index var" "insert auto destroy"
                iterated expressions:
                  (346746 call .(346748 call postfix! locA) c"myElems")
                shadow variables:
                other variables
                  forall body
                {
                  (346740 yield i)
                }
              }
            }
            (346754 call _downEndCount _coforallCount[346752] nil[44])
            (346735 'coforall on block' 0 tmp[346727])
          }
          label _continueLabel[346764]
          _indexOfInterest[346759]
          _iterator[346760]
        }
        label _breakLabel[346765]
        Defer
        {
          {
            (346804 call _endCountFree _coforallCount[346752])
          }
        }
        (346809 call _waitEndCount _coforallCount[346752] 0 numTasks[346753])
      }
      {
        const _coforallCount[346821] "const" "end count" "temp"
        (346877 'move' _coforallCount[346821](346874 call _endCountAlloc 0))
        unknown _indexOfInterest[346828] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[346829] "expr temp" "temp"
        (346838 'move' _iterator[346829](346836 call _getIterator tmpIter[346721]))
        Defer
        {
          {
            (346854 call _freeIterator _iterator[346829])
          }
        }
        { scopeless type
          (346843 'move' _indexOfInterest[346828](346840 call iteratorIndex _iterator[346829]))
        }
        ForLoop[346830]
        {
          unknown locA[346847] "coforall index var" "index var" "insert auto destroy"
          (346849 'move' locA[346847] _indexOfInterest[346828])
          (346861 call _upEndCount _coforallCount[346821] 0)
          const tmp[346713] "const" "temp"
          (346715 'move' tmp[346713](346711 'deref'(346710 '_wide_get_locale' locA)))
          {
            {
              Forall {
                induction variables:
                  
                  unknown i[346705] "index var" "insert auto destroy"
                iterated expressions:
                  (346697 call .(346695 call postfix! locA) c"myElems")
                shadow variables:
                other variables
                  forall body
                {
                  (346701 yield i)
                }
              }
            }
            (346823 call _downEndCount _coforallCount[346821] nil[44])
            (346718 'coforall on block' 0 tmp[346713])
          }
          label _continueLabel[346833]
          _indexOfInterest[346828]
          _iterator[346829]
        }
        label _breakLabel[346834]
        Defer
        {
          {
            (346865 call _endCountFree _coforallCount[346821])
          }
        }
        (346870 call _waitEndCount _coforallCount[346821] 0)
      }
    }
  }
  where {
    (346688 call &&(346666 call == tag(346663 call . iterKind c"standalone"))(346687 'method call resolves'(346682 call .(346679 call .(346677 call postfix!(346676 call locArr(346672 call . locArrDom c"low"))) c"myElems") c"_value") "these" tag))
  }
  function SparseBlockArr[347225](?).dsiAccess[346912](arg _mt[347265]:_MT[238], arg this[347263]:SparseBlockArr[347225](?), arg i[346909] :
  (346907 call * rank idxType)) ref : _unknown[51] "method" "primary method"
  {
    {
      {
        if(346947 call _cond_test(346933 call &&(346916 call != myLocArr nil[44])(346932 call(346927 call .(346924 call .(346921 call .(346919 call postfix! myLocArr) c"locDom") c"parentDom") c"contains") i)))
        {
          (346944 return(346943 call(346938 call .(346936 call postfix! myLocArr) c"dsiAccess") i))
        }
      }
      (346954 'local block')
    }
    (346977 return(346976 call(346971 call .(346969 call postfix!(346968 call locArr(346966 call(346961 call .(346958 call . dom c"dist") c"targetLocsIdx") i))) c"dsiAccess") i))
  }
  function SparseBlockArr[347225](?).dsiAccess[346990](arg _mt[347269]:_MT[238], arg this[347267]:SparseBlockArr[347225](?), arg i[346987] :
  (346985 call * rank idxType)) : _unknown[51] "method" "primary method"
  {
    {
      {
        if(347029 call _cond_test(347015 call &&(346998 call != myLocArr nil[44])(347014 call(347009 call .(347006 call .(347003 call .(347001 call postfix! myLocArr) c"locDom") c"parentDom") c"contains") i)))
        {
          (347026 return(347025 call(347020 call .(347018 call postfix! myLocArr) c"dsiAccess") i))
        }
      }
      (347036 'local block')
    }
    (347059 return(347058 call(347053 call .(347051 call postfix!(347050 call locArr(347048 call(347043 call .(347040 call . dom c"dist") c"targetLocsIdx") i))) c"dsiAccess") i))
  }
  where {
    (346995 call shouldReturnRvalueByValue eltType)
  }
  function SparseBlockArr[347225](?).dsiAccess[347073](arg _mt[347273]:_MT[238], arg this[347271]:SparseBlockArr[347225](?), arg i[347070] :
  (347068 call * rank idxType)) const ref : _unknown[51] "method" "primary method"
  {
    {
      {
        if(347112 call _cond_test(347098 call &&(347081 call != myLocArr nil[44])(347097 call(347092 call .(347089 call .(347086 call .(347084 call postfix! myLocArr) c"locDom") c"parentDom") c"contains") i)))
        {
          (347109 return(347108 call(347103 call .(347101 call postfix! myLocArr) c"dsiAccess") i))
        }
      }
      (347119 'local block')
    }
    (347142 return(347141 call(347136 call .(347134 call postfix!(347133 call locArr(347131 call(347126 call .(347123 call . dom c"dist") c"targetLocsIdx") i))) c"dsiAccess") i))
  }
  where {
    (347078 call shouldReturnRvalueByConstRef eltType)
  }
  function SparseBlockArr[347225](?).dsiAccess[347155](arg _mt[347277]:_MT[238], arg this[347275]:SparseBlockArr[347225](?), arg i[347151] ... :
  idxType) ref : _unknown[51] "method" "primary method"
  {
    (347161 return(347160 call dsiAccess i))
  }
  function SparseBlockArr[347225](?).dsiAccess[347174](arg _mt[347281]:_MT[238], arg this[347279]:SparseBlockArr[347225](?), arg i[347170] ... :
  idxType) : _unknown[51] "method" "primary method"
  {
    (347184 return(347183 call dsiAccess i))
  }
  where {
    (347179 call shouldReturnRvalueByValue eltType)
  }
  function SparseBlockArr[347225](?).dsiAccess[347198](arg _mt[347285]:_MT[238], arg this[347283]:SparseBlockArr[347225](?), arg i[347194] ... :
  idxType) const ref : _unknown[51] "method" "primary method"
  {
    (347208 return(347207 call dsiAccess i))
  }
  where {
    (347203 call shouldReturnRvalueByConstRef eltType)
  }
  function SparseBlockArr[347225](?).dsiGetBaseDom[347216](arg _mt[347289]:_MT[238], arg this[347287]:SparseBlockArr[347225](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (347219 return dom)
  }
  type SparseBlockArr[347225](?) unknown stridable[345193] "param" bool[10] unknown sparseLayoutType[345199] "type variable"(345198 'to unmanaged class from unknown' DefaultDist) unknown locArrDom[345208](345206 call chpl__buildDomainRuntimeType defaultDist rank idxType) unknown locArr[345228](345226 call chpl__buildArrayRuntimeType(345224 call chpl__ensureDomainExpr locArrDom)(345223 'to unmanaged class from unknown'(345222 'to nilable class from type'(345221 call LocSparseBlockArr eltType rank idxType stridable sparseLayoutType)))) unknown myLocArr[345242](345241 'to unmanaged class from unknown'(345240 'to nilable class from type'(345239 call LocSparseBlockArr eltType rank idxType stridable sparseLayoutType))) BaseSparseArr
  function LocSparseBlockArr[347534](?).init[347342](arg _mt[347538]:_MT[238], arg this[347536]:LocSparseBlockArr[347534](?), arg eltType[347340]:_any[178](?), param arg rank[347345] :
  int[13], arg idxType[347348]:_any[178](?), param arg stridable[347351] :
  bool[10], arg sparseLayoutType[347354]:_any[178](?), const arg locDom[347364] :
  (347363 'to unmanaged class from unknown'(347362 call LocSparseBlockDom rank idxType stridable sparseLayoutType)), param arg initElts[347368] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (347376 call =(347372 call . this c"eltType") eltType)
    (347385 call =(347381 call . this c"rank") rank)
    (347393 call =(347389 call . this c"idxType") idxType)
    (347401 call =(347397 call . this c"stridable") stridable)
    (347409 call =(347405 call . this c"sparseLayoutType") sparseLayoutType)
    (347417 call =(347413 call . this c"locDom") locDom)
    (347436 call =(347421 call . this c"myElems")(347435 call(347428 call .(347425 call . locDom c"mySparseBlock") c"buildArray") eltType(initElts = initElts)))
  }
  function LocSparseBlockArr[347534](?).deinit[347443](arg _mt[347542]:_MT[238], arg this[347540]:LocSparseBlockArr[347534](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function LocSparseBlockArr[347534](?).dsiAccess[347452](arg _mt[347546]:_MT[238], arg this[347544]:LocSparseBlockArr[347534](?), arg i[347450]:_any[178](?)) ref : _unknown[51] "method" "primary method"
  {
    (347458 return(347457 call myElems i))
  }
  function LocSparseBlockArr[347534](?).dsiAccess[347467](arg _mt[347550]:_MT[238], arg this[347548]:LocSparseBlockArr[347534](?), arg i[347465]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (347477 return(347476 call myElems i))
  }
  where {
    (347472 call shouldReturnRvalueByValue eltType)
  }
  function LocSparseBlockArr[347534](?).dsiAccess[347487](arg _mt[347554]:_MT[238], arg this[347552]:LocSparseBlockArr[347534](?), arg i[347485]:_any[178](?)) const ref : _unknown[51] "method" "primary method"
  {
    (347497 return(347496 call myElems i))
  }
  where {
    (347492 call shouldReturnRvalueByConstRef eltType)
  }
  function LocSparseBlockArr[347534](?).writeThis[347507](arg _mt[347558]:_MT[238], arg this[347556]:LocSparseBlockArr[347534](?), arg f[347505]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {
    (347528 call halt "LocSparseBlockArr.writeThis() is not implemented / should not be needed")
  }
  type LocSparseBlockArr[347534](?) unknown eltType[347293] "type variable" unknown rank[347297] "param" int[13] unknown idxType[347301] "type variable" unknown stridable[347305] "param" bool[10] unknown sparseLayoutType[347309] "type variable" const locDom[347320] "const"(347319 'to unmanaged class from unknown'(347318 call LocSparseBlockDom rank idxType stridable sparseLayoutType)) unknown myElems[347334] "local field" "unsafe"(347332 call chpl__buildArrayRuntimeType(347330 call chpl__ensureDomainExpr(347325 call . locDom c"mySparseBlock")) eltType)
  function _unknown[51].dsiSerialWrite[347566](arg _mt[347571]:_MT[238], arg this[347568] :
  SparseBlockArr, arg f[347564]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(347675 call _cond_test(347575 call == rank 1))
    {
      (347579 call <~> f "[")
      {
        unknown _indexOfInterest[347615] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[347616] "expr temp" "temp"
        (347625 'move' _iterator[347616](347623 call _getIterator locArr))
        Defer
        {
          {
            (347641 call _freeIterator _iterator[347616])
          }
        }
        { scopeless type
          (347630 'move' _indexOfInterest[347615](347627 call iteratorIndex _iterator[347616]))
        }
        ForLoop[347617]
        {
          unknown locarr[347634] "index var" "insert auto destroy"
          (347636 'move' locarr[347634] _indexOfInterest[347615])
          {
            if(347610 call _cond_test(347591 call .(347588 call .(347586 call postfix! locarr) c"locDom") c"dsiNumIndices"))
            {
              (347596 call <~> f " ")
              (347608 call(347603 call .(347601 call postfix! locarr) c"dsiSerialWrite") f)
            }
          }
          label _continueLabel[347620]
          _indexOfInterest[347615]
          _iterator[347616]
        }
        label _breakLabel[347621]
      }
      (347650 call <~> f "]")
    }
    {
      (347672 call compilerError "Can't write out multidimensional sparse distributed arrays yet")
    }
  }
  function _unknown[51].dsiSerialWrite[347687](arg _mt[347692]:_MT[238], arg this[347689] :
  LocSparseBlockArr, arg f[347685]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (347703 call(347698 call .(347695 call . myElems c"_value") c"dsiSerialWrite") f)
  }
  function _unknown[51].dsiSupportsPrivatization[347711](arg _mt[347716]:_MT[238], arg this[347713] :
  SparseBlockDom) param : _unknown[51] "method" "method overrides"
  {
    (347719 return 1)
  }
  function _unknown[51].dsiGetPrivatizeData[347727](arg _mt[347732]:_MT[238], arg this[347729] :
  SparseBlockDom) : _unknown[51] "method"
  {
    (347747 return(347745 call _build_tuple(347735 call . dist c"pid")(347743 call(347739 call . whole c"dims"))))
  }
  function _unknown[51].dsiPrivatize[347757](arg _mt[347762]:_MT[238], arg this[347759] :
  SparseBlockDom, arg privatizeData[347755]:_any[178](?)) : _unknown[51] "method"
  {
    unknown privdist[347773](347772 call chpl_getPrivatizedCopy(347766 'typeof' dist)(347771 call privatizeData 0))
    (347776 'end of statement')
    unknown c[347801](347780 'new'(_chpl_manager = unmanaged[220](?))(347800 call SparseBlockDom(rank = rank)(idxType = idxType)(sparseLayoutType = sparseLayoutType)(stridable =(347790 call . parentDom c"stridable"))(dist = privdist)(whole = whole)(parentDom = parentDom)))
    (347804 'end of statement')
    {
      unknown _indexOfInterest[347866] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[347867] "expr temp" "temp"
      (347876 'move' _iterator[347867](347874 call _getIterator(347810 call .(347807 call . c c"dist") c"targetLocDom")))
      Defer
      {
        {
          (347893 call _freeIterator _iterator[347867])
        }
      }
      { scopeless type
        (347882 'move' _indexOfInterest[347866](347879 call iteratorIndex _iterator[347867]))
      }
      ForLoop[347868]
      {
        unknown i[347886] "index var" "insert auto destroy"
        (347888 'move' i[347886] _indexOfInterest[347866])
        {
          (347824 call =(347819 call(347814 call . c c"locDoms") i)(347823 call locDoms i))
          if(347861 call _cond_test(347843 call ==(347838 '_wide_get_node'(347834 call(347829 call . c c"locDoms") i))(347840 call . here c"id")))
          {
            (347858 call =(347848 call . c c"myLocDom")(347857 call(347852 call . c c"locDoms") i))
          }
        }
        label _continueLabel[347871]
        _indexOfInterest[347866]
        _iterator[347867]
      }
      label _breakLabel[347872]
    }
    (347912 call =(347901 call . c c"whole")(347910 call chpl__buildDomainExpr(347908 'expand_tuple'(347907 call privatizeData 1))))
    (347916 return c)
  }
  function _unknown[51].dsiGetReprivatizeData[347923](arg _mt[347928]:_MT[238], arg this[347925] :
  SparseBlockDom) : _unknown[51] "method"
  {
    (347936 return(347935 call(347931 call . whole c"dims")))
  }
  function _unknown[51].dsiReprivatize[347946](arg _mt[347953]:_MT[238], arg this[347950] :
  SparseBlockDom, arg other[347944]:_any[178](?), arg reprivatizeData[347948]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[347974] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[347975] "expr temp" "temp"
      (347984 'move' _iterator[347975](347982 call _getIterator(347957 call . dist c"targetLocDom")))
      Defer
      {
        {
          (348001 call _freeIterator _iterator[347975])
        }
      }
      { scopeless type
        (347990 'move' _indexOfInterest[347974](347987 call iteratorIndex _iterator[347975]))
      }
      ForLoop[347976]
      {
        unknown i[347994] "index var" "insert auto destroy"
        (347996 'move' i[347994] _indexOfInterest[347974])
        (347971 call =(347963 call locDoms i)(347970 call(347965 call . other c"locDoms") i))
        label _continueLabel[347979]
        _indexOfInterest[347974]
        _iterator[347975]
      }
      label _breakLabel[347980]
    }
    (348015 call = whole(348013 call chpl__buildDomainExpr(348011 'expand_tuple' reprivatizeData)))
  }
  function _unknown[51].dsiSupportsPrivatization[348023](arg _mt[348028]:_MT[238], arg this[348025] :
  SparseBlockArr) param : _unknown[51] "method" "method overrides"
  {
    (348031 return 1)
  }
  function _unknown[51].dsiGetPrivatizeData[348039](arg _mt[348044]:_MT[238], arg this[348041] :
  SparseBlockArr) : _unknown[51] "method"
  {
    (348050 return(348047 call . dom c"pid"))
  }
  function _unknown[51].dsiPrivatize[348060](arg _mt[348065]:_MT[238], arg this[348062] :
  SparseBlockArr, arg privatizeData[348058]:_any[178](?)) : _unknown[51] "method"
  {
    unknown privdom[348073](348072 call chpl_getPrivatizedCopy(348069 'typeof' dom) privatizeData)
    (348076 'end of statement')
    unknown c[348096](348080 'new'(_chpl_manager = unmanaged[220](?))(348095 call SparseBlockArr(sparseLayoutType = sparseLayoutType)(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(dom = privdom)))
    (348099 'end of statement')
    {
      unknown _indexOfInterest[348164] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[348165] "expr temp" "temp"
      (348174 'move' _iterator[348165](348172 call _getIterator(348108 call .(348105 call .(348102 call . c c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {
          (348191 call _freeIterator _iterator[348165])
        }
      }
      { scopeless type
        (348180 'move' _indexOfInterest[348164](348177 call iteratorIndex _iterator[348165]))
      }
      ForLoop[348166]
      {
        unknown localeIdx[348184] "index var" "insert auto destroy"
        (348186 'move' localeIdx[348184] _indexOfInterest[348164])
        {
          (348122 call =(348117 call(348112 call . c c"locArr") localeIdx)(348121 call locArr localeIdx))
          if(348159 call _cond_test(348143 call ==(348138 '_wide_get_node'(348133 call postfix!(348132 call(348127 call . c c"locArr") localeIdx)))(348140 call . here c"id")))
          {
            (348156 call =(348146 call . c c"myLocArr")(348155 call(348150 call . c c"locArr") localeIdx))
          }
        }
        label _continueLabel[348169]
        _indexOfInterest[348164]
        _iterator[348165]
      }
      label _breakLabel[348170]
    }
    (348199 return c)
  }
  function _unknown[51].numRemoteElems[348208](arg _mt[348215]:_MT[238], arg this[348212] :
  SparseBlockDom, arg rlo[348206]:_any[178](?), arg rid[348210]:_any[178](?)) : _unknown[51] "method"
  {
    unknown blo[348217](348221 call . dist c"idxType")
    unknown bhi[348224](348228 'typeof' blo)
    (348229 'end of statement')
    if(348357 call _cond_test(348251 call == rid(348249 call -(348245 call .(348244 call(348236 call .(348233 call . dist c"targetLocDom") c"dim")(348241 call - rank 1)) c"size") 1)))
    {
      (348267 call = bhi(348264 call .(348263 call(348255 call . whole c"dim")(348260 call - rank 1)) c"high"))
    }
    {
      (348354 call = bhi(348352 call -(348349 call +(348284 call .(348283 call(348275 call .(348272 call . dist c"boundingBox") c"dim")(348280 call - rank 1)) c"low")(348348 call intCeilXDivByY(348329 call *(348323 call +(348320 call -(348301 call .(348300 call(348292 call .(348289 call . dist c"boundingBox") c"dim")(348297 call - rank 1)) c"high")(348317 call .(348316 call(348308 call .(348305 call . dist c"boundingBox") c"dim")(348313 call - rank 1)) c"low")) 1)(348327 call + rid 1))(348345 call .(348344 call(348336 call .(348333 call . dist c"targetLocDom") c"dim")(348341 call - rank 1)) c"size"))) 1))
    }
    (348370 return(348368 call +(348365 call - bhi rlo) 1))
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[348377](arg _mt[348382]:_MT[238], arg this[348379] :
  SparseBlockDom) param : _unknown[51] "method"
  {
    (348385 return 1)
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[348393](arg _mt[348398]:_MT[238], arg this[348395] :
  SparseBlockArr) param : _unknown[51] "method"
  {
    (348401 return 1)
  }
  function _unknown[51].dsiLocalSubdomain[348413](arg _mt[348418]:_MT[238], arg this[348415] :
  SparseBlockDom, arg loc[348410] :
  locale[28]) : _unknown[51] "method"
  {
    if(348462 call _cond_test(348422 call != loc here))
    {
      (348460 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    }
    const tmp[348483] "const" "temp"(348482 call(348477 call .(348474 call . dist c"targetLocales") c"find") here)
    (348490 call _check_tuple_var_decl tmp[348483] 2)
    const found[348468] "const"(348484 call tmp[348483] 0)
    const targetIdx[348470] "const"(348487 call tmp[348483] 1)
    (348495 'end of statement')
    (348505 return(348502 call .(348500 call postfix!(348499 call locDoms targetIdx)) c"mySparseBlock"))
  }
  function _unknown[51].dsiLocalSubdomain[348516](arg _mt[348521]:_MT[238], arg this[348518] :
  SparseBlockArr, arg loc[348513] :
  locale[28]) : _unknown[51] "method"
  {
    if(348533 call _cond_test(348525 call != loc here))
    {
      (348531 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    }
    (348548 return(348545 call .(348542 call .(348540 call postfix! myLocArr) c"locDom") c"mySparseBlock"))
  }
}