AST dump for ChapelTuple after pass parse.
Module use list: 

{
  { scopeless
    (56188 'use' ChapelStandard)
    (56190 'use' DSIUtil)
  }
  type _tuple[56199](?) unknown size[56194] "param" int[13]
  function chpl__init_tuple[56208](param arg size[56205] :
  int[13]) : _unknown[51] "tuple init fn" "inline"
  {
  }
  function _build_tuple[56219](arg t[56216]:_any[178](?) ...) type : _unknown[51] "build tuple" "build tuple type" "inline"
  {
  }
  function _build_tuple[56230](arg x[56227]:_any[178](?) ...) : _unknown[51] "build tuple" "inline"
  {
    (56233 return x)
  }
  function _build_tuple_noref[56244](arg t[56241]:_any[178](?) ...) type : _unknown[51] "do not allow ref" "build tuple" "build tuple type" "inline"
  {
  }
  function _build_tuple_always_allow_ref[56255](arg x[56252]:_any[178](?) ...) : _unknown[51] "allow ref" "build tuple" "inline" "suppress lvalue error"
  {
    { scopeless
      (56258 return x)
    }
  }
  function chpl__unref[56267](arg t[56265]:_any[178](?)) type : _unknown[51] "inline"
  {
    if(56283 call _cond_test(56272 call isTupleType t))
    {
      { scopeless
        (56278 return(56277 call _build_tuple_noref(56275 'expand_tuple' t)))
      }
    }
    {
      { scopeless
        (56281 return t)
      }
    }
  }
  function *[56298](param arg p[56295] :
  int[13], arg t[56300]:_any[178](?)) type : _unknown[51] "build tuple" "build tuple type" "star tuple"
  {
  }
  function *[56311](param arg p[56308] :
  uint[115], arg t[56313]:_any[178](?)) type : _unknown[51] "no doc"
  {
    if(56371 call _cond_test(56320 call > p(56319 call max int[13])))
    {
      { scopeless
        (56369 call compilerError(56366 call +(56347 call + "Tuples of size >"(56345 call _cast string[26](56343 call max int[13]))) " are not currently supported"))
      }
    }
    { scopeless
      unknown pAsInt[56381] "param"(56379 call _cast int[13] p)
      (56384 'end of statement')
    }
    (56389 return(56387 call * pAsInt t))
  }
  function *[56399](param arg p[56396] :
  bool[10], arg t[56401]:_any[178](?)) type : _unknown[51] "last resort" "no doc"
  {
    (56422 call compilerError "Tuple types cannot be defined using boolean sizes")
  }
  function *[56433](arg p[56430] :
  bool[10], arg t[56435]:_any[178](?)) type : _unknown[51] "last resort" "no doc"
  {
    (56440 call compilerError "Tuple types cannot be defined using boolean sizes")
  }
  function _build_star_tuple_noref[56451](param arg p[56448] :
  int[13], arg t[56453]:_any[178](?)) type : _unknown[51] "do not allow ref" "build tuple" "build tuple type" "star tuple"
  {
  }
  function *[56462](arg t[56460]:_any[178](?), param arg p[56465] :
  int[13]) : _unknown[51] "last resort"
  {
    (56489 call compilerError "<type>*<param int> not supported.  If you're trying to specify a homogeneous tuple type, use <param int>*<type>.")
  }
  function *[56500](arg p[56497] :
  integral, arg t[56502]:_any[178](?)) type : _unknown[51] "last resort"
  {
    (56523 call compilerError "tuple size must be known at compile-time")
  }
  function chpl__tuplify[56532](arg x[56530]:_any[178](?)) : _unknown[51] "inline"
  {
    if(56546 call _cond_test(56537 call isTuple x))
    {
      { scopeless
        (56539 return x)
      }
    }
    {
      { scopeless
        (56544 return(56542 call _build_tuple x))
      }
    }
  }
  function isTupleValue[56561](arg x[56558] :
  _tuple) param : _unknown[51] "no doc"
  {
    { scopeless
      (56564 return 1)
    }
  }
  function isTupleValue[56573](arg x[56571]:_any[178](?)) param : _unknown[51] "no doc"
  {
    { scopeless
      (56576 return 0)
    }
  }
  function isHomogeneousTupleValue[56585](arg x[56583]:_any[178](?)) param : _unknown[51] "no doc"
  {
    { scopeless
      (56607 return(56606 'is star tuple type' x))
    }
  }
  function _check_tuple_var_decl[56618](arg x[56615] :
  _tuple, param arg p[56620]:_any[178](?)) param : _unknown[51] "no doc"
  {
    if(56711 call _cond_test(56627 call == p(56624 call . x c"size")))
    {
      (56630 return 1)
    }
    {
      (56705 call compilerError(56702 call +(56683 call +(56677 call +(56658 call + "tuple size ("(56656 call _cast string[26](56652 call . x c"size"))) ") must match the number of grouped variables (")(56681 call _cast string[26] p)) ")"))
      (56709 return 0)
    }
  }
  function _check_tuple_var_decl[56722](arg x[56720]:_any[178](?), param arg p[56724]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (56745 call compilerError "illegal tuple variable declaration with non-tuple initializer")
    (56749 return 0)
  }
  function isTupleType[56757](arg t[56755]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      (56779 return(56778 'is tuple type' t))
    }
  }
  function isHomogeneousTupleType[56788](arg t[56786]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      (56794 return(56793 'is star tuple type' t))
    }
  }
  function =[56805](ref arg x[56802] :
  _tuple, arg y[56808] :
  _tuple) : _unknown[51] "assignop" "compiler generated" "inline" "last resort"
  {
    {
      unknown i[56842] 0
      unknown tmp[56843] "maybe param" "temp"
      (56855 'move' tmp[56843](56853 call chpl_compute_low_param_loop_bound 0(56827 call -(56823 call . x c"size") 1)))
      unknown tmp[56844] "maybe param" "temp"
      (56868 'move' tmp[56844](56866 call chpl_compute_high_param_loop_bound 0(56860 call -(56862 call . x c"size") 1)))
      unknown tmp[56845] "maybe param" "temp"
      (56871 'move' tmp[56845] 1)
      ParamForLoop[56873]
      { i[56842] tmp[56843] tmp[56844] tmp[56845]
        { scopeless
          (56839 call =(56834 call x i)(56838 call y i))
        }
      }
      label _unused_continueLabel[56847]
      label _breakLabel[56846]
    }
  }
  where {
    (56819 call ==(56812 call . x c"size")(56816 call . y c"size"))
  }
  function _unknown[51].this[56893](arg _mt[56898]:_MT[238], arg this[56895] :
  _tuple, arg i[56890] :
  integral) ref : _unknown[51] "method" "no doc" "reference to const when const this" "star tuple accessor"
  {
    if(56929 call _cond_test(56904 call !(56903 call isHomogeneousTuple this)))
    {
      { scopeless
        (56927 call compilerError "invalid access of non-homogeneous tuple by runtime value")
      }
    }
    if(56976 call _cond_test boundsChecking)
    {
      { scopeless
        if(56971 call _cond_test(56947 call ||(56938 call < i 0)(56945 call > i(56943 call - size 1))))
        {
          { scopeless
            (56969 call halt "tuple access out of bounds: " i)
          }
        }
      }
    }
    (57002 return(57001 'get svec member' this i))
  }
  { scopeless
    unknown CHPL_WARN_TUPLE_ITERATION[57023] "config" "no doc" "param" "unset"
    (57026 'end of statement')
  }
  function _unknown[51].these[57030](arg _mt[57035]:_MT[238], arg this[57032] :
  _tuple) ref : _unknown[51] "iterator fn" "method" "no doc" "reference to const when const this"
  {
    if(57064 call _cond_test(57041 call !(57040 call isHomogeneousTuple this)))
    {
      { scopeless
        (57062 call compilerError "Heterogeneous tuples don't support this style of loop yet")
      }
    }
    if(57113 call _cond_test(57088 call == CHPL_WARN_TUPLE_ITERATION "true"))
    {
      { scopeless
        (57111 call compilerWarning "Iterating over tuples. If you intended to use zippered iteration, add the new keyword 'zip' before the tuple of iteratable exp)
      }
    }
    {
      unknown _indexOfInterest[57135] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57136] "expr temp" "temp"
      (57145 'move' _iterator[57136](57143 call _getIterator(57155 call chpl_direct_counted_range_iter 0(57151 call . this c"size"))))
      Defer
      {
        {
          (57171 call _freeIterator _iterator[57136])
        }
      }
      { scopeless type
        (57160 'move' _indexOfInterest[57135](57157 call iteratorIndex _iterator[57136]))
      }
      ForLoop[57137]
      {
        unknown i[57164] "index var" "insert auto destroy"
        (57166 'move' i[57164] _indexOfInterest[57135])
        {
          (57132 yield(57131 call this i))
        }
        label _continueLabel[57140]
        _indexOfInterest[57135]
        _iterator[57136]
      }
      label _breakLabel[57141]
    }
  }
  function _unknown[51].these[57187](arg _mt[57192]:_MT[238], arg this[57189] :
  _tuple, param arg tag[57184] :
  iterKind) ref : _unknown[51] "iterator fn" "method" "no doc" "reference to const when const this"
  {
    { scopeless
      const numTasks[57213] "const"(57210 IfExpr (57203 call == dataParTasksPerLocale 0) then
      { scopeless
        (57206 call . here c"maxTaskPar")
      } else
      { scopeless
        dataParTasksPerLocale
      } )
      (57216 'end of statement')
    }
    { scopeless
      const ignoreRunning[57219] "const" dataParIgnoreRunningTasks
      (57222 'end of statement')
    }
    { scopeless
      const minIndicesPerTask[57224] "const" dataParMinGranularity
      (57227 'end of statement')
    }
    { scopeless
      const length[57232] "const"(57229 call . this c"size")
      (57235 'end of statement')
    }
    { scopeless
      const myRange[57244] "const"(57242 call _build_tuple(57240 call #(57237 call chpl_build_low_bounded_range 0) length))
      (57247 'end of statement')
    }
    { scopeless
      unknown tmp[57260] "temp"(57259 call _computeChunkStuff numTasks ignoreRunning minIndicesPerTask myRange)
      (57264 call _check_tuple_var_decl tmp[57260] 2)
      unknown numChunks[57248](57261 call tmp[57260] 0)
      (57269 'end of statement')
    }
    if(57516 call _cond_test(57272 call == numChunks 1))
    {
      (57275 yield myRange)
    }
    {
      {
        unknown tmpIter[57322] "expr temp" "maybe ref" "no copy" "temp"
        (57325 'move' tmpIter[57322](57283 call #(57280 call chpl_build_low_bounded_range 0) numChunks))
        unknown isRngDomArr[57496] "maybe param" "temp"
        (57511 'move' isRngDomArr[57496](57509 call ||(57498 call isBoundedRange tmpIter[57322])(57507 call ||(57501 call isDomain tmpIter[57322])(57504 call isArray tmpIter[57322]))))
        if isRngDomArr[57496]
        {
          const _coforallCount[57363] "const" "end count" "temp"
          (57432 'move' _coforallCount[57363](57429 call _endCountAlloc 1))
          unknown numTasks[57364] "temp"
          (57416 'move' numTasks[57364](57412 call . tmpIter[57322] c"size"))
          (57407 call _upEndCount _coforallCount[57363] 1 numTasks[57364])
          (57404 call chpl_resetTaskSpawn numTasks[57364])
          unknown _indexOfInterest[57371] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[57372] "expr temp" "temp"
          (57381 'move' _iterator[57372](57379 call _getIterator tmpIter[57322]))
          Defer
          {
            {
              (57397 call _freeIterator _iterator[57372])
            }
          }
          { scopeless type
            (57386 'move' _indexOfInterest[57371](57383 call iteratorIndex _iterator[57372]))
          }
          ForLoop[57373]
          {
            unknown chunk[57390] "coforall index var" "index var" "insert auto destroy"
            (57392 'move' chunk[57390] _indexOfInterest[57371])
            {
              {
                { scopeless
                  const tmp[57329] "const" "temp"(57331 call _computeBlock length numChunks chunk(57336 call - length 1))
                  (57341 call _check_tuple_var_decl tmp[57329] 2)
                  const lo[57344] "const"(57346 call tmp[57329] 0)
                  const hi[57349] "const"(57351 call tmp[57329] 1)
                  (57354 'end of statement')
                }
                (57355 yield(57357 call _build_tuple(57359 call chpl_build_bounded_range lo hi)))
              }
              (57366 call _downEndCount _coforallCount[57363] nil[44])
              (57365 'coforall loop')
            }
            label _continueLabel[57376]
            _indexOfInterest[57371]
            _iterator[57372]
          }
          label _breakLabel[57377]
          Defer
          {
            {
              (57419 call _endCountFree _coforallCount[57363])
            }
          }
          (57424 call _waitEndCount _coforallCount[57363] 1 numTasks[57364])
        }
        {
          const _coforallCount[57436] "const" "end count" "temp"
          (57493 'move' _coforallCount[57436](57490 call _endCountAlloc 1))
          unknown _indexOfInterest[57444] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[57445] "expr temp" "temp"
          (57454 'move' _iterator[57445](57452 call _getIterator tmpIter[57322]))
          Defer
          {
            {
              (57470 call _freeIterator _iterator[57445])
            }
          }
          { scopeless type
            (57459 'move' _indexOfInterest[57444](57456 call iteratorIndex _iterator[57445]))
          }
          ForLoop[57446]
          {
            unknown chunk[57463] "coforall index var" "index var" "insert auto destroy"
            (57465 'move' chunk[57463] _indexOfInterest[57444])
            (57477 call _upEndCount _coforallCount[57436] 1)
            {
              {
                { scopeless
                  const tmp[57300] "const" "temp"(57299 call _computeBlock length numChunks chunk(57297 call - length 1))
                  (57307 call _check_tuple_var_decl tmp[57300] 2)
                  const lo[57285] "const"(57301 call tmp[57300] 0)
                  const hi[57287] "const"(57304 call tmp[57300] 1)
                  (57312 'end of statement')
                }
                (57320 yield(57318 call _build_tuple(57316 call chpl_build_bounded_range lo hi)))
              }
              (57439 call _downEndCount _coforallCount[57436] nil[44])
              (57438 'coforall loop')
            }
            label _continueLabel[57449]
            _indexOfInterest[57444]
            _iterator[57445]
          }
          label _breakLabel[57450]
          Defer
          {
            {
              (57481 call _endCountFree _coforallCount[57436])
            }
          }
          (57486 call _waitEndCount _coforallCount[57436] 1)
        }
      }
    }
  }
  where {
    (57199 call == tag(57196 call . iterKind c"leader"))
  }
  function _unknown[51].these[57530](arg _mt[57539]:_MT[238], arg this[57536] :
  _tuple, param arg tag[57527] :
  iterKind, arg followThis[57533] :
  _tuple) ref : _unknown[51] "iterator fn" "method" "no doc" "reference to const when const this"
  {
    if(57576 call _cond_test(57553 call !=(57549 call . followThis c"size") 1))
    {
      { scopeless
        (57574 call compilerError "Tuple zipped with incompatible iterator expression.")
      }
    }
    { scopeless
      unknown fThis[57586](57585 call followThis 0)
      (57589 'end of statement')
    }
    {
      unknown _indexOfInterest[57599] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57600] "expr temp" "temp"
      (57609 'move' _iterator[57600](57607 call _getIterator fThis))
      Defer
      {
        {
          (57625 call _freeIterator _iterator[57600])
        }
      }
      { scopeless type
        (57614 'move' _indexOfInterest[57599](57611 call iteratorIndex _iterator[57600]))
      }
      ForLoop[57601]
      {
        unknown i[57618] "index var" "insert auto destroy"
        (57620 'move' i[57618] _indexOfInterest[57599])
        {
          (57596 yield(57595 call this i))
        }
        label _continueLabel[57604]
        _indexOfInterest[57599]
        _iterator[57600]
      }
      label _breakLabel[57605]
    }
  }
  where {
    (57546 call == tag(57543 call . iterKind c"follower"))
  }
  function _unknown[51].indices[57638](arg _mt[57643]:_MT[238], arg this[57640] :
  _tuple) : _unknown[51] "method" "no parens"
  {
    (57655 return(57653 call chpl_build_bounded_range 0(57651 call -(57647 call . this c"size") 1)))
  }
  function _cast[57669](arg t[57666] :
  (57665 call complex[140] 64), arg x[57676] :
  (57674 call _build_tuple ?[260] ?[260])) : _unknown[51] "inline"
  {
    function _chpl_complex64[57688](arg re[57685] :
    (57684 call real[16] 32), arg im[57694] :
    (57693 call real[16] 32)) : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (57700 call complex[140] 64)
    }
    (57728 return(57727 call _chpl_complex64(57714 call _cast(57713 call real[16] 32)(57709 call x 0))(57725 call _cast(57724 call real[16] 32)(57720 call x 1))))
  }
  function _cast[57741](arg t[57738] :
  (57737 call complex[140] 128), arg x[57748] :
  (57746 call _build_tuple ?[260] ?[260])) : _unknown[51] "inline"
  {
    function _chpl_complex128[57760](arg re[57757] :
    (57756 call real[16] 64), arg im[57766] :
    (57765 call real[16] 64)) : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (57772 call complex[140] 128)
    }
    (57800 return(57799 call _chpl_complex128(57786 call _cast(57785 call real[16] 64)(57781 call x 0))(57797 call _cast(57796 call real[16] 64)(57792 call x 1))))
  }
  function _cast[57810](arg t[57807] :
  _tuple, arg x[57813] :
  _tuple) : _unknown[51] "inline" "tuple cast fn" "unsafe"
  {
  }
  function chpl__tupleRest[57825](arg t[57822] :
  _tuple) : _unknown[51] "inline"
  {
    function chpl__tupleRestHelper[57831](arg first[57829]:_any[178](?), arg rest[57834]:_any[178](?) ...) : _unknown[51] "inline"
    {
      { scopeless
        (57838 return rest)
      }
    }
    (57849 return(57848 call chpl__tupleRestHelper(57846 'expand_tuple' t)))
  }
  function +[57859](arg a[57856] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[57863](57862 'typeof' a)
      (57866 'end of statement')
    }
    {
      unknown d[57891] 0
      unknown tmp[57892] "maybe param" "temp"
      (57904 'move' tmp[57892](57902 call chpl_compute_low_param_loop_bound 0(57874 call -(57870 call . a c"size") 1)))
      unknown tmp[57893] "maybe param" "temp"
      (57917 'move' tmp[57893](57915 call chpl_compute_high_param_loop_bound 0(57909 call -(57911 call . a c"size") 1)))
      unknown tmp[57894] "maybe param" "temp"
      (57920 'move' tmp[57894] 1)
      ParamForLoop[57922]
      { d[57891] tmp[57892] tmp[57893] tmp[57894]
        { scopeless
          (57888 call =(57881 call result d)(57886 call +(57885 call a d)))
        }
      }
      label _unused_continueLabel[57896]
      label _breakLabel[57895]
    }
    (57932 return result)
  }
  function -[57942](arg a[57939] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[57946](57945 'typeof' a)
      (57949 'end of statement')
    }
    {
      unknown d[57974] 0
      unknown tmp[57975] "maybe param" "temp"
      (57987 'move' tmp[57975](57985 call chpl_compute_low_param_loop_bound 0(57957 call -(57953 call . a c"size") 1)))
      unknown tmp[57976] "maybe param" "temp"
      (58000 'move' tmp[57976](57998 call chpl_compute_high_param_loop_bound 0(57992 call -(57994 call . a c"size") 1)))
      unknown tmp[57977] "maybe param" "temp"
      (58003 'move' tmp[57977] 1)
      ParamForLoop[58005]
      { d[57974] tmp[57975] tmp[57976] tmp[57977]
        { scopeless
          (57971 call =(57964 call result d)(57969 call -(57968 call a d)))
        }
      }
      label _unused_continueLabel[57979]
      label _breakLabel[57978]
    }
    (58015 return result)
  }
  function ~[58025](arg a[58022] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[58029](58028 'typeof' a)
      (58032 'end of statement')
    }
    {
      unknown d[58057] 0
      unknown tmp[58058] "maybe param" "temp"
      (58070 'move' tmp[58058](58068 call chpl_compute_low_param_loop_bound 0(58040 call -(58036 call . a c"size") 1)))
      unknown tmp[58059] "maybe param" "temp"
      (58083 'move' tmp[58059](58081 call chpl_compute_high_param_loop_bound 0(58075 call -(58077 call . a c"size") 1)))
      unknown tmp[58060] "maybe param" "temp"
      (58086 'move' tmp[58060] 1)
      ParamForLoop[58088]
      { d[58057] tmp[58058] tmp[58059] tmp[58060]
        { scopeless
          (58054 call =(58047 call result d)(58052 call ~(58051 call a d)))
        }
      }
      label _unused_continueLabel[58062]
      label _breakLabel[58061]
    }
    (58098 return result)
  }
  function ![58108](arg a[58105] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[58112](58111 'typeof' a)
      (58115 'end of statement')
    }
    {
      unknown d[58140] 0
      unknown tmp[58141] "maybe param" "temp"
      (58153 'move' tmp[58141](58151 call chpl_compute_low_param_loop_bound 0(58123 call -(58119 call . a c"size") 1)))
      unknown tmp[58142] "maybe param" "temp"
      (58166 'move' tmp[58142](58164 call chpl_compute_high_param_loop_bound 0(58158 call -(58160 call . a c"size") 1)))
      unknown tmp[58143] "maybe param" "temp"
      (58169 'move' tmp[58143] 1)
      ParamForLoop[58171]
      { d[58140] tmp[58141] tmp[58142] tmp[58143]
        { scopeless
          (58137 call =(58130 call result d)(58135 call !(58134 call a d)))
        }
      }
      label _unused_continueLabel[58145]
      label _breakLabel[58144]
    }
    (58181 return result)
  }
  function max[58189](arg t[58187]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown result[58197] t
      (58200 'end of statement')
    }
    {
      unknown i[58227] 0
      unknown tmp[58228] "maybe param" "temp"
      (58240 'move' tmp[58228](58238 call chpl_compute_low_param_loop_bound 0(58208 call -(58204 call . result c"size") 1)))
      unknown tmp[58229] "maybe param" "temp"
      (58253 'move' tmp[58229](58251 call chpl_compute_high_param_loop_bound 0(58245 call -(58247 call . result c"size") 1)))
      unknown tmp[58230] "maybe param" "temp"
      (58256 'move' tmp[58230] 1)
      ParamForLoop[58258]
      { i[58227] tmp[58228] tmp[58229] tmp[58230]
        {
          (58223 call =(58215 call result i)(58222 call max(58220 call t i)))
        }
      }
      label _unused_continueLabel[58232]
      label _breakLabel[58231]
    }
    (58268 return result)
  }
  where {
    (58195 call isTupleType t)
  }
  { scopeless type
    t
  }
  function min[58278](arg t[58276]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown result[58286] t
      (58289 'end of statement')
    }
    {
      unknown i[58316] 0
      unknown tmp[58317] "maybe param" "temp"
      (58329 'move' tmp[58317](58327 call chpl_compute_low_param_loop_bound 0(58297 call -(58293 call . result c"size") 1)))
      unknown tmp[58318] "maybe param" "temp"
      (58342 'move' tmp[58318](58340 call chpl_compute_high_param_loop_bound 0(58334 call -(58336 call . result c"size") 1)))
      unknown tmp[58319] "maybe param" "temp"
      (58345 'move' tmp[58319] 1)
      ParamForLoop[58347]
      { i[58316] tmp[58317] tmp[58318] tmp[58319]
        {
          (58312 call =(58304 call result i)(58311 call min(58309 call t i)))
        }
      }
      label _unused_continueLabel[58321]
      label _breakLabel[58320]
    }
    (58357 return result)
  }
  where {
    (58284 call isTupleType t)
  }
  { scopeless type
    t
  }
  function chpl_TwoHomogTuples[58367](arg t1[58365]:_any[178](?), arg t2[58369]:_any[178](?)) param : _unknown[51]
  {
    (58381 return(58379 call &&(58374 call isHomogeneousTuple t1)(58378 call isHomogeneousTuple t2)))
  }
  function +[58392](arg a[58389] :
  _tuple, arg b[58395] :
  _tuple) : _unknown[51] "inline"
  {
    if(58434 call _cond_test(58411 call !=(58404 call . a c"size")(58408 call . b c"size")))
    {
      { scopeless
        (58432 call compilerError "tuple operands to + have different sizes")
      }
    }
    { scopeless
      unknown result[58457](58455 call *(58441 call . a c"size")(58454 'typeof'(58452 call +(58447 call a 0)(58451 call b 0))))
      (58460 'end of statement')
    }
    {
      unknown d[58488] 0
      unknown tmp[58489] "maybe param" "temp"
      (58501 'move' tmp[58489](58499 call chpl_compute_low_param_loop_bound 0(58467 call -(58463 call . a c"size") 1)))
      unknown tmp[58490] "maybe param" "temp"
      (58514 'move' tmp[58490](58512 call chpl_compute_high_param_loop_bound 0(58506 call -(58508 call . a c"size") 1)))
      unknown tmp[58491] "maybe param" "temp"
      (58517 'move' tmp[58491] 1)
      ParamForLoop[58519]
      { d[58488] tmp[58489] tmp[58490] tmp[58491]
        { scopeless
          (58485 call =(58474 call result d)(58483 call +(58478 call a d)(58482 call b d)))
        }
      }
      label _unused_continueLabel[58493]
      label _breakLabel[58492]
    }
    (58529 return result)
  }
  where {
    (58402 call chpl_TwoHomogTuples a b)
  }
  function +[58540](arg a[58537] :
  _tuple, arg b[58543] :
  _tuple) : _unknown[51] "inline"
  {
    if(58561 call _cond_test(58554 call !=(58547 call . a c"size")(58551 call . b c"size")))
    {
      { scopeless
        (58559 call compilerError "tuple operands to + have different sizes")
      }
    }
    if(58614 call _cond_test(58572 call ==(58568 call . a c"size") 1))
    {
      { scopeless
        (58586 return(58584 call _build_tuple(58582 call +(58577 call a 0)(58581 call b 0))))
      }
    }
    {
      { scopeless
        (58612 return(58610 call _build_tuple(58596 call +(58591 call a 0)(58595 call b 0))(58608 'expand_tuple'(58606 call +(58601 call chpl__tupleRest a)(58605 call chpl__tupleRest b)))))
      }
    }
  }
  function -[58628](arg a[58625] :
  _tuple, arg b[58631] :
  _tuple) : _unknown[51] "inline"
  {
    if(58670 call _cond_test(58647 call !=(58640 call . a c"size")(58644 call . b c"size")))
    {
      { scopeless
        (58668 call compilerError "tuple operands to - have different sizes")
      }
    }
    { scopeless
      unknown result[58693](58691 call *(58677 call . a c"size")(58690 'typeof'(58688 call -(58683 call a 0)(58687 call b 0))))
      (58696 'end of statement')
    }
    {
      unknown d[58724] 0
      unknown tmp[58725] "maybe param" "temp"
      (58737 'move' tmp[58725](58735 call chpl_compute_low_param_loop_bound 0(58703 call -(58699 call . a c"size") 1)))
      unknown tmp[58726] "maybe param" "temp"
      (58750 'move' tmp[58726](58748 call chpl_compute_high_param_loop_bound 0(58742 call -(58744 call . a c"size") 1)))
      unknown tmp[58727] "maybe param" "temp"
      (58753 'move' tmp[58727] 1)
      ParamForLoop[58755]
      { d[58724] tmp[58725] tmp[58726] tmp[58727]
        { scopeless
          (58721 call =(58710 call result d)(58719 call -(58714 call a d)(58718 call b d)))
        }
      }
      label _unused_continueLabel[58729]
      label _breakLabel[58728]
    }
    (58765 return result)
  }
  where {
    (58638 call chpl_TwoHomogTuples a b)
  }
  function -[58776](arg a[58773] :
  _tuple, arg b[58779] :
  _tuple) : _unknown[51] "inline"
  {
    if(58797 call _cond_test(58790 call !=(58783 call . a c"size")(58787 call . b c"size")))
    {
      { scopeless
        (58795 call compilerError "tuple operands to - have different sizes")
      }
    }
    if(58850 call _cond_test(58808 call ==(58804 call . a c"size") 1))
    {
      { scopeless
        (58822 return(58820 call _build_tuple(58818 call -(58813 call a 0)(58817 call b 0))))
      }
    }
    {
      { scopeless
        (58848 return(58846 call _build_tuple(58832 call -(58827 call a 0)(58831 call b 0))(58844 'expand_tuple'(58842 call -(58837 call chpl__tupleRest a)(58841 call chpl__tupleRest b)))))
      }
    }
  }
  function *[58864](arg a[58861] :
  _tuple, arg b[58867] :
  _tuple) : _unknown[51] "inline"
  {
    if(58906 call _cond_test(58883 call !=(58876 call . a c"size")(58880 call . b c"size")))
    {
      { scopeless
        (58904 call compilerError "tuple operands to * have different sizes")
      }
    }
    { scopeless
      unknown result[58929](58927 call *(58913 call . a c"size")(58926 'typeof'(58924 call *(58919 call a 0)(58923 call b 0))))
      (58932 'end of statement')
    }
    {
      unknown d[58960] 0
      unknown tmp[58961] "maybe param" "temp"
      (58973 'move' tmp[58961](58971 call chpl_compute_low_param_loop_bound 0(58939 call -(58935 call . a c"size") 1)))
      unknown tmp[58962] "maybe param" "temp"
      (58986 'move' tmp[58962](58984 call chpl_compute_high_param_loop_bound 0(58978 call -(58980 call . a c"size") 1)))
      unknown tmp[58963] "maybe param" "temp"
      (58989 'move' tmp[58963] 1)
      ParamForLoop[58991]
      { d[58960] tmp[58961] tmp[58962] tmp[58963]
        { scopeless
          (58957 call =(58946 call result d)(58955 call *(58950 call a d)(58954 call b d)))
        }
      }
      label _unused_continueLabel[58965]
      label _breakLabel[58964]
    }
    (59001 return result)
  }
  where {
    (58874 call chpl_TwoHomogTuples a b)
  }
  function *[59012](arg a[59009] :
  _tuple, arg b[59015] :
  _tuple) : _unknown[51] "inline"
  {
    if(59033 call _cond_test(59026 call !=(59019 call . a c"size")(59023 call . b c"size")))
    {
      { scopeless
        (59031 call compilerError "tuple operands to * have different sizes")
      }
    }
    if(59086 call _cond_test(59044 call ==(59040 call . a c"size") 1))
    {
      { scopeless
        (59058 return(59056 call _build_tuple(59054 call *(59049 call a 0)(59053 call b 0))))
      }
    }
    {
      { scopeless
        (59084 return(59082 call _build_tuple(59068 call *(59063 call a 0)(59067 call b 0))(59080 'expand_tuple'(59078 call *(59073 call chpl__tupleRest a)(59077 call chpl__tupleRest b)))))
      }
    }
  }
  function /[59100](arg a[59097] :
  _tuple, arg b[59103] :
  _tuple) : _unknown[51] "inline"
  {
    if(59142 call _cond_test(59119 call !=(59112 call . a c"size")(59116 call . b c"size")))
    {
      { scopeless
        (59140 call compilerError "tuple operands to / have different sizes")
      }
    }
    { scopeless
      unknown result[59165](59163 call *(59149 call . a c"size")(59162 'typeof'(59160 call /(59155 call a 0)(59159 call b 0))))
      (59168 'end of statement')
    }
    {
      unknown d[59196] 0
      unknown tmp[59197] "maybe param" "temp"
      (59209 'move' tmp[59197](59207 call chpl_compute_low_param_loop_bound 0(59175 call -(59171 call . a c"size") 1)))
      unknown tmp[59198] "maybe param" "temp"
      (59222 'move' tmp[59198](59220 call chpl_compute_high_param_loop_bound 0(59214 call -(59216 call . a c"size") 1)))
      unknown tmp[59199] "maybe param" "temp"
      (59225 'move' tmp[59199] 1)
      ParamForLoop[59227]
      { d[59196] tmp[59197] tmp[59198] tmp[59199]
        { scopeless
          (59193 call =(59182 call result d)(59191 call /(59186 call a d)(59190 call b d)))
        }
      }
      label _unused_continueLabel[59201]
      label _breakLabel[59200]
    }
    (59237 return result)
  }
  where {
    (59110 call chpl_TwoHomogTuples a b)
  }
  function /[59248](arg a[59245] :
  _tuple, arg b[59251] :
  _tuple) : _unknown[51] "inline"
  {
    if(59269 call _cond_test(59262 call !=(59255 call . a c"size")(59259 call . b c"size")))
    {
      { scopeless
        (59267 call compilerError "tuple operands to / have different sizes")
      }
    }
    if(59322 call _cond_test(59280 call ==(59276 call . a c"size") 1))
    {
      { scopeless
        (59294 return(59292 call _build_tuple(59290 call /(59285 call a 0)(59289 call b 0))))
      }
    }
    {
      { scopeless
        (59320 return(59318 call _build_tuple(59304 call /(59299 call a 0)(59303 call b 0))(59316 'expand_tuple'(59314 call /(59309 call chpl__tupleRest a)(59313 call chpl__tupleRest b)))))
      }
    }
  }
  function %[59336](arg a[59333] :
  _tuple, arg b[59339] :
  _tuple) : _unknown[51] "inline"
  {
    if(59378 call _cond_test(59355 call !=(59348 call . a c"size")(59352 call . b c"size")))
    {
      { scopeless
        (59376 call compilerError "tuple operands to % have different sizes")
      }
    }
    { scopeless
      unknown result[59401](59399 call *(59385 call . a c"size")(59398 'typeof'(59396 call %(59391 call a 0)(59395 call b 0))))
      (59404 'end of statement')
    }
    {
      unknown d[59432] 0
      unknown tmp[59433] "maybe param" "temp"
      (59445 'move' tmp[59433](59443 call chpl_compute_low_param_loop_bound 0(59411 call -(59407 call . a c"size") 1)))
      unknown tmp[59434] "maybe param" "temp"
      (59458 'move' tmp[59434](59456 call chpl_compute_high_param_loop_bound 0(59450 call -(59452 call . a c"size") 1)))
      unknown tmp[59435] "maybe param" "temp"
      (59461 'move' tmp[59435] 1)
      ParamForLoop[59463]
      { d[59432] tmp[59433] tmp[59434] tmp[59435]
        { scopeless
          (59429 call =(59418 call result d)(59427 call %(59422 call a d)(59426 call b d)))
        }
      }
      label _unused_continueLabel[59437]
      label _breakLabel[59436]
    }
    (59473 return result)
  }
  where {
    (59346 call chpl_TwoHomogTuples a b)
  }
  function %[59484](arg a[59481] :
  _tuple, arg b[59487] :
  _tuple) : _unknown[51] "inline"
  {
    if(59505 call _cond_test(59498 call !=(59491 call . a c"size")(59495 call . b c"size")))
    {
      { scopeless
        (59503 call compilerError "tuple operands to % have different sizes")
      }
    }
    if(59558 call _cond_test(59516 call ==(59512 call . a c"size") 1))
    {
      { scopeless
        (59530 return(59528 call _build_tuple(59526 call %(59521 call a 0)(59525 call b 0))))
      }
    }
    {
      { scopeless
        (59556 return(59554 call _build_tuple(59540 call %(59535 call a 0)(59539 call b 0))(59552 'expand_tuple'(59550 call %(59545 call chpl__tupleRest a)(59549 call chpl__tupleRest b)))))
      }
    }
  }
  function **[59572](arg a[59569] :
  _tuple, arg b[59575] :
  _tuple) : _unknown[51] "inline"
  {
    if(59614 call _cond_test(59591 call !=(59584 call . a c"size")(59588 call . b c"size")))
    {
      { scopeless
        (59612 call compilerError "tuple operands to ** have different sizes")
      }
    }
    { scopeless
      unknown result[59637](59635 call *(59621 call . a c"size")(59634 'typeof'(59632 call **(59627 call a 0)(59631 call b 0))))
      (59640 'end of statement')
    }
    {
      unknown d[59668] 0
      unknown tmp[59669] "maybe param" "temp"
      (59681 'move' tmp[59669](59679 call chpl_compute_low_param_loop_bound 0(59647 call -(59643 call . a c"size") 1)))
      unknown tmp[59670] "maybe param" "temp"
      (59694 'move' tmp[59670](59692 call chpl_compute_high_param_loop_bound 0(59686 call -(59688 call . a c"size") 1)))
      unknown tmp[59671] "maybe param" "temp"
      (59697 'move' tmp[59671] 1)
      ParamForLoop[59699]
      { d[59668] tmp[59669] tmp[59670] tmp[59671]
        { scopeless
          (59665 call =(59654 call result d)(59663 call **(59658 call a d)(59662 call b d)))
        }
      }
      label _unused_continueLabel[59673]
      label _breakLabel[59672]
    }
    (59709 return result)
  }
  where {
    (59582 call chpl_TwoHomogTuples a b)
  }
  function **[59720](arg a[59717] :
  _tuple, arg b[59723] :
  _tuple) : _unknown[51] "inline"
  {
    if(59741 call _cond_test(59734 call !=(59727 call . a c"size")(59731 call . b c"size")))
    {
      { scopeless
        (59739 call compilerError "tuple operands to ** have different sizes")
      }
    }
    if(59794 call _cond_test(59752 call ==(59748 call . a c"size") 1))
    {
      { scopeless
        (59766 return(59764 call _build_tuple(59762 call **(59757 call a 0)(59761 call b 0))))
      }
    }
    {
      { scopeless
        (59792 return(59790 call _build_tuple(59776 call **(59771 call a 0)(59775 call b 0))(59788 'expand_tuple'(59786 call **(59781 call chpl__tupleRest a)(59785 call chpl__tupleRest b)))))
      }
    }
  }
  function &[59808](arg a[59805] :
  _tuple, arg b[59811] :
  _tuple) : _unknown[51] "inline"
  {
    if(59850 call _cond_test(59827 call !=(59820 call . a c"size")(59824 call . b c"size")))
    {
      { scopeless
        (59848 call compilerError "tuple operands to & have different sizes")
      }
    }
    { scopeless
      unknown result[59873](59871 call *(59857 call . a c"size")(59870 'typeof'(59868 call &(59863 call a 0)(59867 call b 0))))
      (59876 'end of statement')
    }
    {
      unknown d[59904] 0
      unknown tmp[59905] "maybe param" "temp"
      (59917 'move' tmp[59905](59915 call chpl_compute_low_param_loop_bound 0(59883 call -(59879 call . a c"size") 1)))
      unknown tmp[59906] "maybe param" "temp"
      (59930 'move' tmp[59906](59928 call chpl_compute_high_param_loop_bound 0(59922 call -(59924 call . a c"size") 1)))
      unknown tmp[59907] "maybe param" "temp"
      (59933 'move' tmp[59907] 1)
      ParamForLoop[59935]
      { d[59904] tmp[59905] tmp[59906] tmp[59907]
        { scopeless
          (59901 call =(59890 call result d)(59899 call &(59894 call a d)(59898 call b d)))
        }
      }
      label _unused_continueLabel[59909]
      label _breakLabel[59908]
    }
    (59945 return result)
  }
  where {
    (59818 call chpl_TwoHomogTuples a b)
  }
  function &[59956](arg a[59953] :
  _tuple, arg b[59959] :
  _tuple) : _unknown[51] "inline"
  {
    if(59977 call _cond_test(59970 call !=(59963 call . a c"size")(59967 call . b c"size")))
    {
      { scopeless
        (59975 call compilerError "tuple operands to & have different sizes")
      }
    }
    if(60030 call _cond_test(59988 call ==(59984 call . a c"size") 1))
    {
      { scopeless
        (60002 return(60000 call _build_tuple(59998 call &(59993 call a 0)(59997 call b 0))))
      }
    }
    {
      { scopeless
        (60028 return(60026 call _build_tuple(60012 call &(60007 call a 0)(60011 call b 0))(60024 'expand_tuple'(60022 call &(60017 call chpl__tupleRest a)(60021 call chpl__tupleRest b)))))
      }
    }
  }
  function |[60044](arg a[60041] :
  _tuple, arg b[60047] :
  _tuple) : _unknown[51] "inline"
  {
    if(60086 call _cond_test(60063 call !=(60056 call . a c"size")(60060 call . b c"size")))
    {
      { scopeless
        (60084 call compilerError "tuple operands to | have different sizes")
      }
    }
    { scopeless
      unknown result[60109](60107 call *(60093 call . a c"size")(60106 'typeof'(60104 call |(60099 call a 0)(60103 call b 0))))
      (60112 'end of statement')
    }
    {
      unknown d[60140] 0
      unknown tmp[60141] "maybe param" "temp"
      (60153 'move' tmp[60141](60151 call chpl_compute_low_param_loop_bound 0(60119 call -(60115 call . a c"size") 1)))
      unknown tmp[60142] "maybe param" "temp"
      (60166 'move' tmp[60142](60164 call chpl_compute_high_param_loop_bound 0(60158 call -(60160 call . a c"size") 1)))
      unknown tmp[60143] "maybe param" "temp"
      (60169 'move' tmp[60143] 1)
      ParamForLoop[60171]
      { d[60140] tmp[60141] tmp[60142] tmp[60143]
        { scopeless
          (60137 call =(60126 call result d)(60135 call |(60130 call a d)(60134 call b d)))
        }
      }
      label _unused_continueLabel[60145]
      label _breakLabel[60144]
    }
    (60181 return result)
  }
  where {
    (60054 call chpl_TwoHomogTuples a b)
  }
  function |[60192](arg a[60189] :
  _tuple, arg b[60195] :
  _tuple) : _unknown[51] "inline"
  {
    if(60213 call _cond_test(60206 call !=(60199 call . a c"size")(60203 call . b c"size")))
    {
      { scopeless
        (60211 call compilerError "tuple operands to | have different sizes")
      }
    }
    if(60266 call _cond_test(60224 call ==(60220 call . a c"size") 1))
    {
      { scopeless
        (60238 return(60236 call _build_tuple(60234 call |(60229 call a 0)(60233 call b 0))))
      }
    }
    {
      { scopeless
        (60264 return(60262 call _build_tuple(60248 call |(60243 call a 0)(60247 call b 0))(60260 'expand_tuple'(60258 call |(60253 call chpl__tupleRest a)(60257 call chpl__tupleRest b)))))
      }
    }
  }
  function ^[60280](arg a[60277] :
  _tuple, arg b[60283] :
  _tuple) : _unknown[51] "inline"
  {
    if(60322 call _cond_test(60299 call !=(60292 call . a c"size")(60296 call . b c"size")))
    {
      { scopeless
        (60320 call compilerError "tuple operands to ^ have different sizes")
      }
    }
    { scopeless
      unknown result[60345](60343 call *(60329 call . a c"size")(60342 'typeof'(60340 call ^(60335 call a 0)(60339 call b 0))))
      (60348 'end of statement')
    }
    {
      unknown d[60376] 0
      unknown tmp[60377] "maybe param" "temp"
      (60389 'move' tmp[60377](60387 call chpl_compute_low_param_loop_bound 0(60355 call -(60351 call . a c"size") 1)))
      unknown tmp[60378] "maybe param" "temp"
      (60402 'move' tmp[60378](60400 call chpl_compute_high_param_loop_bound 0(60394 call -(60396 call . a c"size") 1)))
      unknown tmp[60379] "maybe param" "temp"
      (60405 'move' tmp[60379] 1)
      ParamForLoop[60407]
      { d[60376] tmp[60377] tmp[60378] tmp[60379]
        { scopeless
          (60373 call =(60362 call result d)(60371 call ^(60366 call a d)(60370 call b d)))
        }
      }
      label _unused_continueLabel[60381]
      label _breakLabel[60380]
    }
    (60417 return result)
  }
  where {
    (60290 call chpl_TwoHomogTuples a b)
  }
  function ^[60428](arg a[60425] :
  _tuple, arg b[60431] :
  _tuple) : _unknown[51] "inline"
  {
    if(60449 call _cond_test(60442 call !=(60435 call . a c"size")(60439 call . b c"size")))
    {
      { scopeless
        (60447 call compilerError "tuple operands to ^ have different sizes")
      }
    }
    if(60502 call _cond_test(60460 call ==(60456 call . a c"size") 1))
    {
      { scopeless
        (60474 return(60472 call _build_tuple(60470 call ^(60465 call a 0)(60469 call b 0))))
      }
    }
    {
      { scopeless
        (60500 return(60498 call _build_tuple(60484 call ^(60479 call a 0)(60483 call b 0))(60496 'expand_tuple'(60494 call ^(60489 call chpl__tupleRest a)(60493 call chpl__tupleRest b)))))
      }
    }
  }
  function <<[60516](arg a[60513] :
  _tuple, arg b[60519] :
  _tuple) : _unknown[51] "inline"
  {
    if(60558 call _cond_test(60535 call !=(60528 call . a c"size")(60532 call . b c"size")))
    {
      { scopeless
        (60556 call compilerError "tuple operands to << have different sizes")
      }
    }
    { scopeless
      unknown result[60581](60579 call *(60565 call . a c"size")(60578 'typeof'(60576 call <<(60571 call a 0)(60575 call b 0))))
      (60584 'end of statement')
    }
    {
      unknown d[60612] 0
      unknown tmp[60613] "maybe param" "temp"
      (60625 'move' tmp[60613](60623 call chpl_compute_low_param_loop_bound 0(60591 call -(60587 call . a c"size") 1)))
      unknown tmp[60614] "maybe param" "temp"
      (60638 'move' tmp[60614](60636 call chpl_compute_high_param_loop_bound 0(60630 call -(60632 call . a c"size") 1)))
      unknown tmp[60615] "maybe param" "temp"
      (60641 'move' tmp[60615] 1)
      ParamForLoop[60643]
      { d[60612] tmp[60613] tmp[60614] tmp[60615]
        { scopeless
          (60609 call =(60598 call result d)(60607 call <<(60602 call a d)(60606 call b d)))
        }
      }
      label _unused_continueLabel[60617]
      label _breakLabel[60616]
    }
    (60653 return result)
  }
  where {
    (60526 call chpl_TwoHomogTuples a b)
  }
  function <<[60664](arg a[60661] :
  _tuple, arg b[60667] :
  _tuple) : _unknown[51] "inline"
  {
    if(60685 call _cond_test(60678 call !=(60671 call . a c"size")(60675 call . b c"size")))
    {
      { scopeless
        (60683 call compilerError "tuple operands to << have different sizes")
      }
    }
    if(60738 call _cond_test(60696 call ==(60692 call . a c"size") 1))
    {
      { scopeless
        (60710 return(60708 call _build_tuple(60706 call <<(60701 call a 0)(60705 call b 0))))
      }
    }
    {
      { scopeless
        (60736 return(60734 call _build_tuple(60720 call <<(60715 call a 0)(60719 call b 0))(60732 'expand_tuple'(60730 call <<(60725 call chpl__tupleRest a)(60729 call chpl__tupleRest b)))))
      }
    }
  }
  function >>[60752](arg a[60749] :
  _tuple, arg b[60755] :
  _tuple) : _unknown[51] "inline"
  {
    if(60794 call _cond_test(60771 call !=(60764 call . a c"size")(60768 call . b c"size")))
    {
      { scopeless
        (60792 call compilerError "tuple operands to >> have different sizes")
      }
    }
    { scopeless
      unknown result[60817](60815 call *(60801 call . a c"size")(60814 'typeof'(60812 call >>(60807 call a 0)(60811 call b 0))))
      (60820 'end of statement')
    }
    {
      unknown d[60848] 0
      unknown tmp[60849] "maybe param" "temp"
      (60861 'move' tmp[60849](60859 call chpl_compute_low_param_loop_bound 0(60827 call -(60823 call . a c"size") 1)))
      unknown tmp[60850] "maybe param" "temp"
      (60874 'move' tmp[60850](60872 call chpl_compute_high_param_loop_bound 0(60866 call -(60868 call . a c"size") 1)))
      unknown tmp[60851] "maybe param" "temp"
      (60877 'move' tmp[60851] 1)
      ParamForLoop[60879]
      { d[60848] tmp[60849] tmp[60850] tmp[60851]
        { scopeless
          (60845 call =(60834 call result d)(60843 call >>(60838 call a d)(60842 call b d)))
        }
      }
      label _unused_continueLabel[60853]
      label _breakLabel[60852]
    }
    (60889 return result)
  }
  where {
    (60762 call chpl_TwoHomogTuples a b)
  }
  function >>[60900](arg a[60897] :
  _tuple, arg b[60903] :
  _tuple) : _unknown[51] "inline"
  {
    if(60921 call _cond_test(60914 call !=(60907 call . a c"size")(60911 call . b c"size")))
    {
      { scopeless
        (60919 call compilerError "tuple operands to >> have different sizes")
      }
    }
    if(60974 call _cond_test(60932 call ==(60928 call . a c"size") 1))
    {
      { scopeless
        (60946 return(60944 call _build_tuple(60942 call >>(60937 call a 0)(60941 call b 0))))
      }
    }
    {
      { scopeless
        (60972 return(60970 call _build_tuple(60956 call >>(60951 call a 0)(60955 call b 0))(60968 'expand_tuple'(60966 call >>(60961 call chpl__tupleRest a)(60965 call chpl__tupleRest b)))))
      }
    }
  }
  function >[60988](arg a[60985] :
  _tuple, arg b[60991] :
  _tuple) : _unknown[51] "inline"
  {
    if(61025 call _cond_test(61002 call !=(60995 call . a c"size")(60999 call . b c"size")))
    {
      { scopeless
        (61023 call compilerError "tuple operands to > have different sizes")
      }
    }
    {
      unknown i[61078] 0
      unknown tmp[61079] "maybe param" "temp"
      (61091 'move' tmp[61079](61089 call chpl_compute_low_param_loop_bound 0(61037 call -(61033 call . a c"size") 1)))
      unknown tmp[61080] "maybe param" "temp"
      (61104 'move' tmp[61080](61102 call chpl_compute_high_param_loop_bound 0(61096 call -(61098 call . a c"size") 1)))
      unknown tmp[61081] "maybe param" "temp"
      (61107 'move' tmp[61081] 1)
      ParamForLoop[61109]
      { i[61078] tmp[61079] tmp[61080] tmp[61081]
        { scopeless
          if(61072 call _cond_test(61049 call >(61044 call a i)(61048 call b i)))
          {
            { scopeless
              (61052 return 1)
            }
          }
          {
            { scopeless
              if(61067 call _cond_test(61062 call <(61057 call a i)(61061 call b i)))
              {
                { scopeless
                  (61065 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[61083]
      label _breakLabel[61082]
    }
    (61119 return 0)
  }
  function >=[61129](arg a[61126] :
  _tuple, arg b[61132] :
  _tuple) : _unknown[51] "inline"
  {
    if(61166 call _cond_test(61143 call !=(61136 call . a c"size")(61140 call . b c"size")))
    {
      { scopeless
        (61164 call compilerError "tuple operands to >= have different sizes")
      }
    }
    {
      unknown i[61219] 0
      unknown tmp[61220] "maybe param" "temp"
      (61232 'move' tmp[61220](61230 call chpl_compute_low_param_loop_bound 0(61178 call -(61174 call . a c"size") 1)))
      unknown tmp[61221] "maybe param" "temp"
      (61245 'move' tmp[61221](61243 call chpl_compute_high_param_loop_bound 0(61237 call -(61239 call . a c"size") 1)))
      unknown tmp[61222] "maybe param" "temp"
      (61248 'move' tmp[61222] 1)
      ParamForLoop[61250]
      { i[61219] tmp[61220] tmp[61221] tmp[61222]
        { scopeless
          if(61213 call _cond_test(61190 call >(61185 call a i)(61189 call b i)))
          {
            { scopeless
              (61193 return 1)
            }
          }
          {
            { scopeless
              if(61208 call _cond_test(61203 call <(61198 call a i)(61202 call b i)))
              {
                { scopeless
                  (61206 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[61224]
      label _breakLabel[61223]
    }
    (61260 return 1)
  }
  function <[61270](arg a[61267] :
  _tuple, arg b[61273] :
  _tuple) : _unknown[51] "inline"
  {
    if(61307 call _cond_test(61284 call !=(61277 call . a c"size")(61281 call . b c"size")))
    {
      { scopeless
        (61305 call compilerError "tuple operands to < have different sizes")
      }
    }
    {
      unknown i[61360] 0
      unknown tmp[61361] "maybe param" "temp"
      (61373 'move' tmp[61361](61371 call chpl_compute_low_param_loop_bound 0(61319 call -(61315 call . a c"size") 1)))
      unknown tmp[61362] "maybe param" "temp"
      (61386 'move' tmp[61362](61384 call chpl_compute_high_param_loop_bound 0(61378 call -(61380 call . a c"size") 1)))
      unknown tmp[61363] "maybe param" "temp"
      (61389 'move' tmp[61363] 1)
      ParamForLoop[61391]
      { i[61360] tmp[61361] tmp[61362] tmp[61363]
        { scopeless
          if(61354 call _cond_test(61331 call <(61326 call a i)(61330 call b i)))
          {
            { scopeless
              (61334 return 1)
            }
          }
          {
            { scopeless
              if(61349 call _cond_test(61344 call >(61339 call a i)(61343 call b i)))
              {
                { scopeless
                  (61347 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[61365]
      label _breakLabel[61364]
    }
    (61401 return 0)
  }
  function <=[61411](arg a[61408] :
  _tuple, arg b[61414] :
  _tuple) : _unknown[51] "inline"
  {
    if(61448 call _cond_test(61425 call !=(61418 call . a c"size")(61422 call . b c"size")))
    {
      { scopeless
        (61446 call compilerError "tuple operands to <= have different sizes")
      }
    }
    {
      unknown i[61501] 0
      unknown tmp[61502] "maybe param" "temp"
      (61514 'move' tmp[61502](61512 call chpl_compute_low_param_loop_bound 0(61460 call -(61456 call . a c"size") 1)))
      unknown tmp[61503] "maybe param" "temp"
      (61527 'move' tmp[61503](61525 call chpl_compute_high_param_loop_bound 0(61519 call -(61521 call . a c"size") 1)))
      unknown tmp[61504] "maybe param" "temp"
      (61530 'move' tmp[61504] 1)
      ParamForLoop[61532]
      { i[61501] tmp[61502] tmp[61503] tmp[61504]
        { scopeless
          if(61495 call _cond_test(61472 call <(61467 call a i)(61471 call b i)))
          {
            { scopeless
              (61475 return 1)
            }
          }
          {
            { scopeless
              if(61490 call _cond_test(61485 call >(61480 call a i)(61484 call b i)))
              {
                { scopeless
                  (61488 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[61506]
      label _breakLabel[61505]
    }
    (61542 return 1)
  }
  function ==[61552](arg a[61549] :
  _tuple, arg b[61555] :
  _tuple) : _unknown[51] "inline"
  {
    if(61641 call _cond_test(61566 call !=(61559 call . a c"size")(61563 call . b c"size")))
    {
      (61569 return 0)
    }
    {
      {
        unknown i[61600] 0
        unknown tmp[61601] "maybe param" "temp"
        (61613 'move' tmp[61601](61611 call chpl_compute_low_param_loop_bound 0(61578 call -(61574 call . a c"size") 1)))
        unknown tmp[61602] "maybe param" "temp"
        (61626 'move' tmp[61602](61624 call chpl_compute_high_param_loop_bound 0(61618 call -(61620 call . a c"size") 1)))
        unknown tmp[61603] "maybe param" "temp"
        (61629 'move' tmp[61603] 1)
        ParamForLoop[61631]
        { i[61600] tmp[61601] tmp[61602] tmp[61603]
          { scopeless
            if(61595 call _cond_test(61590 call !=(61585 call a i)(61589 call b i)))
            {
              { scopeless
                (61593 return 0)
              }
            }
          }
        }
        label _unused_continueLabel[61605]
        label _breakLabel[61604]
      }
    }
    (61647 return 1)
  }
  function !=[61657](arg a[61654] :
  _tuple, arg b[61660] :
  _tuple) : _unknown[51] "inline"
  {
    if(61746 call _cond_test(61671 call !=(61664 call . a c"size")(61668 call . b c"size")))
    {
      (61674 return 1)
    }
    {
      {
        unknown i[61705] 0
        unknown tmp[61706] "maybe param" "temp"
        (61718 'move' tmp[61706](61716 call chpl_compute_low_param_loop_bound 0(61683 call -(61679 call . a c"size") 1)))
        unknown tmp[61707] "maybe param" "temp"
        (61731 'move' tmp[61707](61729 call chpl_compute_high_param_loop_bound 0(61723 call -(61725 call . a c"size") 1)))
        unknown tmp[61708] "maybe param" "temp"
        (61734 'move' tmp[61708] 1)
        ParamForLoop[61736]
        { i[61705] tmp[61706] tmp[61707] tmp[61708]
          { scopeless
            if(61700 call _cond_test(61695 call !=(61690 call a i)(61694 call b i)))
            {
              { scopeless
                (61698 return 1)
              }
            }
          }
        }
        label _unused_continueLabel[61710]
        label _breakLabel[61709]
      }
    }
    (61752 return 0)
  }
  function +[61762](arg x[61759] :
  _tuple, arg y[61769] :
  (61768 'typeof'(61767 call x 0))) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[61787](61785 call *(61777 call . x c"size")(61784 'typeof'(61783 call x 0)))
      (61790 'end of statement')
    }
    {
      unknown d[61816] 0
      unknown tmp[61817] "maybe param" "temp"
      (61829 'move' tmp[61817](61827 call chpl_compute_low_param_loop_bound 0(61798 call -(61794 call . x c"size") 1)))
      unknown tmp[61818] "maybe param" "temp"
      (61842 'move' tmp[61818](61840 call chpl_compute_high_param_loop_bound 0(61834 call -(61836 call . x c"size") 1)))
      unknown tmp[61819] "maybe param" "temp"
      (61845 'move' tmp[61819] 1)
      ParamForLoop[61847]
      { d[61816] tmp[61817] tmp[61818] tmp[61819]
        { scopeless
          (61813 call =(61805 call result d)(61811 call +(61809 call x d) y))
        }
      }
      label _unused_continueLabel[61821]
      label _breakLabel[61820]
    }
    (61857 return result)
  }
  where {
    (61775 call isHomogeneousTuple x)
  }
  function +[61869](arg x[61866] :
  unknown t[61864], arg y[61872] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[61901](61899 call *(61891 call . y c"size")(61898 'typeof'(61897 call y 0)))
      (61904 'end of statement')
    }
    {
      unknown d[61930] 0
      unknown tmp[61931] "maybe param" "temp"
      (61943 'move' tmp[61931](61941 call chpl_compute_low_param_loop_bound 0(61912 call -(61908 call . y c"size") 1)))
      unknown tmp[61932] "maybe param" "temp"
      (61956 'move' tmp[61932](61954 call chpl_compute_high_param_loop_bound 0(61948 call -(61950 call . y c"size") 1)))
      unknown tmp[61933] "maybe param" "temp"
      (61959 'move' tmp[61933] 1)
      ParamForLoop[61961]
      { d[61930] tmp[61931] tmp[61932] tmp[61933]
        { scopeless
          (61927 call =(61919 call result d)(61925 call + x(61924 call y d)))
        }
      }
      label _unused_continueLabel[61935]
      label _breakLabel[61934]
    }
    (61971 return result)
  }
  where {
    (61888 call &&(61878 call isHomogeneousTuple y)(61887 call isSubtype t(61886 'typeof'(61885 call y 0))))
  }
  function -[61982](arg x[61979] :
  _tuple, arg y[61989] :
  (61988 'typeof'(61987 call x 0))) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[62007](62005 call *(61997 call . x c"size")(62004 'typeof'(62003 call x 0)))
      (62010 'end of statement')
    }
    {
      unknown d[62036] 0
      unknown tmp[62037] "maybe param" "temp"
      (62049 'move' tmp[62037](62047 call chpl_compute_low_param_loop_bound 0(62018 call -(62014 call . x c"size") 1)))
      unknown tmp[62038] "maybe param" "temp"
      (62062 'move' tmp[62038](62060 call chpl_compute_high_param_loop_bound 0(62054 call -(62056 call . x c"size") 1)))
      unknown tmp[62039] "maybe param" "temp"
      (62065 'move' tmp[62039] 1)
      ParamForLoop[62067]
      { d[62036] tmp[62037] tmp[62038] tmp[62039]
        { scopeless
          (62033 call =(62025 call result d)(62031 call -(62029 call x d) y))
        }
      }
      label _unused_continueLabel[62041]
      label _breakLabel[62040]
    }
    (62077 return result)
  }
  where {
    (61995 call isHomogeneousTuple x)
  }
  function -[62089](arg x[62086] :
  unknown t[62084], arg y[62092] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[62121](62119 call *(62111 call . y c"size")(62118 'typeof'(62117 call y 0)))
      (62124 'end of statement')
    }
    {
      unknown d[62150] 0
      unknown tmp[62151] "maybe param" "temp"
      (62163 'move' tmp[62151](62161 call chpl_compute_low_param_loop_bound 0(62132 call -(62128 call . y c"size") 1)))
      unknown tmp[62152] "maybe param" "temp"
      (62176 'move' tmp[62152](62174 call chpl_compute_high_param_loop_bound 0(62168 call -(62170 call . y c"size") 1)))
      unknown tmp[62153] "maybe param" "temp"
      (62179 'move' tmp[62153] 1)
      ParamForLoop[62181]
      { d[62150] tmp[62151] tmp[62152] tmp[62153]
        { scopeless
          (62147 call =(62139 call result d)(62145 call - x(62144 call y d)))
        }
      }
      label _unused_continueLabel[62155]
      label _breakLabel[62154]
    }
    (62191 return result)
  }
  where {
    (62108 call &&(62098 call isHomogeneousTuple y)(62107 call isSubtype t(62106 'typeof'(62105 call y 0))))
  }
  function *[62202](arg x[62199] :
  _tuple, arg y[62209] :
  (62208 'typeof'(62207 call x 0))) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[62227](62225 call *(62217 call . x c"size")(62224 'typeof'(62223 call x 0)))
      (62230 'end of statement')
    }
    {
      unknown d[62256] 0
      unknown tmp[62257] "maybe param" "temp"
      (62269 'move' tmp[62257](62267 call chpl_compute_low_param_loop_bound 0(62238 call -(62234 call . x c"size") 1)))
      unknown tmp[62258] "maybe param" "temp"
      (62282 'move' tmp[62258](62280 call chpl_compute_high_param_loop_bound 0(62274 call -(62276 call . x c"size") 1)))
      unknown tmp[62259] "maybe param" "temp"
      (62285 'move' tmp[62259] 1)
      ParamForLoop[62287]
      { d[62256] tmp[62257] tmp[62258] tmp[62259]
        { scopeless
          (62253 call =(62245 call result d)(62251 call *(62249 call x d) y))
        }
      }
      label _unused_continueLabel[62261]
      label _breakLabel[62260]
    }
    (62297 return result)
  }
  where {
    (62215 call isHomogeneousTuple x)
  }
  function *[62309](arg x[62306] :
  unknown t[62304], arg y[62312] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[62341](62339 call *(62331 call . y c"size")(62338 'typeof'(62337 call y 0)))
      (62344 'end of statement')
    }
    {
      unknown d[62370] 0
      unknown tmp[62371] "maybe param" "temp"
      (62383 'move' tmp[62371](62381 call chpl_compute_low_param_loop_bound 0(62352 call -(62348 call . y c"size") 1)))
      unknown tmp[62372] "maybe param" "temp"
      (62396 'move' tmp[62372](62394 call chpl_compute_high_param_loop_bound 0(62388 call -(62390 call . y c"size") 1)))
      unknown tmp[62373] "maybe param" "temp"
      (62399 'move' tmp[62373] 1)
      ParamForLoop[62401]
      { d[62370] tmp[62371] tmp[62372] tmp[62373]
        { scopeless
          (62367 call =(62359 call result d)(62365 call * x(62364 call y d)))
        }
      }
      label _unused_continueLabel[62375]
      label _breakLabel[62374]
    }
    (62411 return result)
  }
  where {
    (62328 call &&(62318 call isHomogeneousTuple y)(62327 call isSubtype t(62326 'typeof'(62325 call y 0))))
  }
  function /[62422](arg x[62419] :
  _tuple, arg y[62429] :
  (62428 'typeof'(62427 call x 0))) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[62447](62445 call *(62437 call . x c"size")(62444 'typeof'(62443 call x 0)))
      (62450 'end of statement')
    }
    {
      unknown d[62476] 0
      unknown tmp[62477] "maybe param" "temp"
      (62489 'move' tmp[62477](62487 call chpl_compute_low_param_loop_bound 0(62458 call -(62454 call . x c"size") 1)))
      unknown tmp[62478] "maybe param" "temp"
      (62502 'move' tmp[62478](62500 call chpl_compute_high_param_loop_bound 0(62494 call -(62496 call . x c"size") 1)))
      unknown tmp[62479] "maybe param" "temp"
      (62505 'move' tmp[62479] 1)
      ParamForLoop[62507]
      { d[62476] tmp[62477] tmp[62478] tmp[62479]
        { scopeless
          (62473 call =(62465 call result d)(62471 call /(62469 call x d) y))
        }
      }
      label _unused_continueLabel[62481]
      label _breakLabel[62480]
    }
    (62517 return result)
  }
  where {
    (62435 call isHomogeneousTuple x)
  }
  function /[62529](arg x[62526] :
  unknown t[62524], arg y[62532] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[62561](62559 call *(62551 call . y c"size")(62558 'typeof'(62557 call y 0)))
      (62564 'end of statement')
    }
    {
      unknown d[62590] 0
      unknown tmp[62591] "maybe param" "temp"
      (62603 'move' tmp[62591](62601 call chpl_compute_low_param_loop_bound 0(62572 call -(62568 call . y c"size") 1)))
      unknown tmp[62592] "maybe param" "temp"
      (62616 'move' tmp[62592](62614 call chpl_compute_high_param_loop_bound 0(62608 call -(62610 call . y c"size") 1)))
      unknown tmp[62593] "maybe param" "temp"
      (62619 'move' tmp[62593] 1)
      ParamForLoop[62621]
      { d[62590] tmp[62591] tmp[62592] tmp[62593]
        { scopeless
          (62587 call =(62579 call result d)(62585 call / x(62584 call y d)))
        }
      }
      label _unused_continueLabel[62595]
      label _breakLabel[62594]
    }
    (62631 return result)
  }
  where {
    (62548 call &&(62538 call isHomogeneousTuple y)(62547 call isSubtype t(62546 'typeof'(62545 call y 0))))
  }
  function %[62642](arg x[62639] :
  _tuple, arg y[62649] :
  (62648 'typeof'(62647 call x 0))) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[62667](62665 call *(62657 call . x c"size")(62664 'typeof'(62663 call x 0)))
      (62670 'end of statement')
    }
    {
      unknown d[62696] 0
      unknown tmp[62697] "maybe param" "temp"
      (62709 'move' tmp[62697](62707 call chpl_compute_low_param_loop_bound 0(62678 call -(62674 call . x c"size") 1)))
      unknown tmp[62698] "maybe param" "temp"
      (62722 'move' tmp[62698](62720 call chpl_compute_high_param_loop_bound 0(62714 call -(62716 call . x c"size") 1)))
      unknown tmp[62699] "maybe param" "temp"
      (62725 'move' tmp[62699] 1)
      ParamForLoop[62727]
      { d[62696] tmp[62697] tmp[62698] tmp[62699]
        { scopeless
          (62693 call =(62685 call result d)(62691 call %(62689 call x d) y))
        }
      }
      label _unused_continueLabel[62701]
      label _breakLabel[62700]
    }
    (62737 return result)
  }
  where {
    (62655 call isHomogeneousTuple x)
  }
  function %[62749](arg x[62746] :
  unknown t[62744], arg y[62752] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[62781](62779 call *(62771 call . y c"size")(62778 'typeof'(62777 call y 0)))
      (62784 'end of statement')
    }
    {
      unknown d[62810] 0
      unknown tmp[62811] "maybe param" "temp"
      (62823 'move' tmp[62811](62821 call chpl_compute_low_param_loop_bound 0(62792 call -(62788 call . y c"size") 1)))
      unknown tmp[62812] "maybe param" "temp"
      (62836 'move' tmp[62812](62834 call chpl_compute_high_param_loop_bound 0(62828 call -(62830 call . y c"size") 1)))
      unknown tmp[62813] "maybe param" "temp"
      (62839 'move' tmp[62813] 1)
      ParamForLoop[62841]
      { d[62810] tmp[62811] tmp[62812] tmp[62813]
        { scopeless
          (62807 call =(62799 call result d)(62805 call % x(62804 call y d)))
        }
      }
      label _unused_continueLabel[62815]
      label _breakLabel[62814]
    }
    (62851 return result)
  }
  where {
    (62768 call &&(62758 call isHomogeneousTuple y)(62767 call isSubtype t(62766 'typeof'(62765 call y 0))))
  }
  function **[62862](arg x[62859] :
  _tuple, arg y[62869] :
  (62868 'typeof'(62867 call x 0))) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[62887](62885 call *(62877 call . x c"size")(62884 'typeof'(62883 call x 0)))
      (62890 'end of statement')
    }
    {
      unknown d[62916] 0
      unknown tmp[62917] "maybe param" "temp"
      (62929 'move' tmp[62917](62927 call chpl_compute_low_param_loop_bound 0(62898 call -(62894 call . x c"size") 1)))
      unknown tmp[62918] "maybe param" "temp"
      (62942 'move' tmp[62918](62940 call chpl_compute_high_param_loop_bound 0(62934 call -(62936 call . x c"size") 1)))
      unknown tmp[62919] "maybe param" "temp"
      (62945 'move' tmp[62919] 1)
      ParamForLoop[62947]
      { d[62916] tmp[62917] tmp[62918] tmp[62919]
        { scopeless
          (62913 call =(62905 call result d)(62911 call **(62909 call x d) y))
        }
      }
      label _unused_continueLabel[62921]
      label _breakLabel[62920]
    }
    (62957 return result)
  }
  where {
    (62875 call isHomogeneousTuple x)
  }
  function **[62969](arg x[62966] :
  unknown t[62964], arg y[62972] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[63001](62999 call *(62991 call . y c"size")(62998 'typeof'(62997 call y 0)))
      (63004 'end of statement')
    }
    {
      unknown d[63030] 0
      unknown tmp[63031] "maybe param" "temp"
      (63043 'move' tmp[63031](63041 call chpl_compute_low_param_loop_bound 0(63012 call -(63008 call . y c"size") 1)))
      unknown tmp[63032] "maybe param" "temp"
      (63056 'move' tmp[63032](63054 call chpl_compute_high_param_loop_bound 0(63048 call -(63050 call . y c"size") 1)))
      unknown tmp[63033] "maybe param" "temp"
      (63059 'move' tmp[63033] 1)
      ParamForLoop[63061]
      { d[63030] tmp[63031] tmp[63032] tmp[63033]
        { scopeless
          (63027 call =(63019 call result d)(63025 call ** x(63024 call y d)))
        }
      }
      label _unused_continueLabel[63035]
      label _breakLabel[63034]
    }
    (63071 return result)
  }
  where {
    (62988 call &&(62978 call isHomogeneousTuple y)(62987 call isSubtype t(62986 'typeof'(62985 call y 0))))
  }
  function &[63082](arg x[63079] :
  _tuple, arg y[63089] :
  (63088 'typeof'(63087 call x 0))) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[63107](63105 call *(63097 call . x c"size")(63104 'typeof'(63103 call x 0)))
      (63110 'end of statement')
    }
    {
      unknown d[63136] 0
      unknown tmp[63137] "maybe param" "temp"
      (63149 'move' tmp[63137](63147 call chpl_compute_low_param_loop_bound 0(63118 call -(63114 call . x c"size") 1)))
      unknown tmp[63138] "maybe param" "temp"
      (63162 'move' tmp[63138](63160 call chpl_compute_high_param_loop_bound 0(63154 call -(63156 call . x c"size") 1)))
      unknown tmp[63139] "maybe param" "temp"
      (63165 'move' tmp[63139] 1)
      ParamForLoop[63167]
      { d[63136] tmp[63137] tmp[63138] tmp[63139]
        { scopeless
          (63133 call =(63125 call result d)(63131 call &(63129 call x d) y))
        }
      }
      label _unused_continueLabel[63141]
      label _breakLabel[63140]
    }
    (63177 return result)
  }
  where {
    (63095 call isHomogeneousTuple x)
  }
  function &[63189](arg x[63186] :
  unknown t[63184], arg y[63192] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[63221](63219 call *(63211 call . y c"size")(63218 'typeof'(63217 call y 0)))
      (63224 'end of statement')
    }
    {
      unknown d[63250] 0
      unknown tmp[63251] "maybe param" "temp"
      (63263 'move' tmp[63251](63261 call chpl_compute_low_param_loop_bound 0(63232 call -(63228 call . y c"size") 1)))
      unknown tmp[63252] "maybe param" "temp"
      (63276 'move' tmp[63252](63274 call chpl_compute_high_param_loop_bound 0(63268 call -(63270 call . y c"size") 1)))
      unknown tmp[63253] "maybe param" "temp"
      (63279 'move' tmp[63253] 1)
      ParamForLoop[63281]
      { d[63250] tmp[63251] tmp[63252] tmp[63253]
        { scopeless
          (63247 call =(63239 call result d)(63245 call & x(63244 call y d)))
        }
      }
      label _unused_continueLabel[63255]
      label _breakLabel[63254]
    }
    (63291 return result)
  }
  where {
    (63208 call &&(63198 call isHomogeneousTuple y)(63207 call isSubtype t(63206 'typeof'(63205 call y 0))))
  }
  function |[63302](arg x[63299] :
  _tuple, arg y[63309] :
  (63308 'typeof'(63307 call x 0))) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[63327](63325 call *(63317 call . x c"size")(63324 'typeof'(63323 call x 0)))
      (63330 'end of statement')
    }
    {
      unknown d[63356] 0
      unknown tmp[63357] "maybe param" "temp"
      (63369 'move' tmp[63357](63367 call chpl_compute_low_param_loop_bound 0(63338 call -(63334 call . x c"size") 1)))
      unknown tmp[63358] "maybe param" "temp"
      (63382 'move' tmp[63358](63380 call chpl_compute_high_param_loop_bound 0(63374 call -(63376 call . x c"size") 1)))
      unknown tmp[63359] "maybe param" "temp"
      (63385 'move' tmp[63359] 1)
      ParamForLoop[63387]
      { d[63356] tmp[63357] tmp[63358] tmp[63359]
        { scopeless
          (63353 call =(63345 call result d)(63351 call |(63349 call x d) y))
        }
      }
      label _unused_continueLabel[63361]
      label _breakLabel[63360]
    }
    (63397 return result)
  }
  where {
    (63315 call isHomogeneousTuple x)
  }
  function |[63409](arg x[63406] :
  unknown t[63404], arg y[63412] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[63441](63439 call *(63431 call . y c"size")(63438 'typeof'(63437 call y 0)))
      (63444 'end of statement')
    }
    {
      unknown d[63470] 0
      unknown tmp[63471] "maybe param" "temp"
      (63483 'move' tmp[63471](63481 call chpl_compute_low_param_loop_bound 0(63452 call -(63448 call . y c"size") 1)))
      unknown tmp[63472] "maybe param" "temp"
      (63496 'move' tmp[63472](63494 call chpl_compute_high_param_loop_bound 0(63488 call -(63490 call . y c"size") 1)))
      unknown tmp[63473] "maybe param" "temp"
      (63499 'move' tmp[63473] 1)
      ParamForLoop[63501]
      { d[63470] tmp[63471] tmp[63472] tmp[63473]
        { scopeless
          (63467 call =(63459 call result d)(63465 call | x(63464 call y d)))
        }
      }
      label _unused_continueLabel[63475]
      label _breakLabel[63474]
    }
    (63511 return result)
  }
  where {
    (63428 call &&(63418 call isHomogeneousTuple y)(63427 call isSubtype t(63426 'typeof'(63425 call y 0))))
  }
  function ^[63522](arg x[63519] :
  _tuple, arg y[63529] :
  (63528 'typeof'(63527 call x 0))) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[63547](63545 call *(63537 call . x c"size")(63544 'typeof'(63543 call x 0)))
      (63550 'end of statement')
    }
    {
      unknown d[63576] 0
      unknown tmp[63577] "maybe param" "temp"
      (63589 'move' tmp[63577](63587 call chpl_compute_low_param_loop_bound 0(63558 call -(63554 call . x c"size") 1)))
      unknown tmp[63578] "maybe param" "temp"
      (63602 'move' tmp[63578](63600 call chpl_compute_high_param_loop_bound 0(63594 call -(63596 call . x c"size") 1)))
      unknown tmp[63579] "maybe param" "temp"
      (63605 'move' tmp[63579] 1)
      ParamForLoop[63607]
      { d[63576] tmp[63577] tmp[63578] tmp[63579]
        { scopeless
          (63573 call =(63565 call result d)(63571 call ^(63569 call x d) y))
        }
      }
      label _unused_continueLabel[63581]
      label _breakLabel[63580]
    }
    (63617 return result)
  }
  where {
    (63535 call isHomogeneousTuple x)
  }
  function ^[63629](arg x[63626] :
  unknown t[63624], arg y[63632] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[63661](63659 call *(63651 call . y c"size")(63658 'typeof'(63657 call y 0)))
      (63664 'end of statement')
    }
    {
      unknown d[63690] 0
      unknown tmp[63691] "maybe param" "temp"
      (63703 'move' tmp[63691](63701 call chpl_compute_low_param_loop_bound 0(63672 call -(63668 call . y c"size") 1)))
      unknown tmp[63692] "maybe param" "temp"
      (63716 'move' tmp[63692](63714 call chpl_compute_high_param_loop_bound 0(63708 call -(63710 call . y c"size") 1)))
      unknown tmp[63693] "maybe param" "temp"
      (63719 'move' tmp[63693] 1)
      ParamForLoop[63721]
      { d[63690] tmp[63691] tmp[63692] tmp[63693]
        { scopeless
          (63687 call =(63679 call result d)(63685 call ^ x(63684 call y d)))
        }
      }
      label _unused_continueLabel[63695]
      label _breakLabel[63694]
    }
    (63731 return result)
  }
  where {
    (63648 call &&(63638 call isHomogeneousTuple y)(63647 call isSubtype t(63646 'typeof'(63645 call y 0))))
  }
  function <<[63742](arg x[63739] :
  _tuple, arg y[63749] :
  (63748 'typeof'(63747 call x 0))) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[63767](63765 call *(63757 call . x c"size")(63764 'typeof'(63763 call x 0)))
      (63770 'end of statement')
    }
    {
      unknown d[63796] 0
      unknown tmp[63797] "maybe param" "temp"
      (63809 'move' tmp[63797](63807 call chpl_compute_low_param_loop_bound 0(63778 call -(63774 call . x c"size") 1)))
      unknown tmp[63798] "maybe param" "temp"
      (63822 'move' tmp[63798](63820 call chpl_compute_high_param_loop_bound 0(63814 call -(63816 call . x c"size") 1)))
      unknown tmp[63799] "maybe param" "temp"
      (63825 'move' tmp[63799] 1)
      ParamForLoop[63827]
      { d[63796] tmp[63797] tmp[63798] tmp[63799]
        { scopeless
          (63793 call =(63785 call result d)(63791 call <<(63789 call x d) y))
        }
      }
      label _unused_continueLabel[63801]
      label _breakLabel[63800]
    }
    (63837 return result)
  }
  where {
    (63755 call isHomogeneousTuple x)
  }
  function <<[63849](arg x[63846] :
  unknown t[63844], arg y[63852] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[63881](63879 call *(63871 call . y c"size")(63878 'typeof'(63877 call y 0)))
      (63884 'end of statement')
    }
    {
      unknown d[63910] 0
      unknown tmp[63911] "maybe param" "temp"
      (63923 'move' tmp[63911](63921 call chpl_compute_low_param_loop_bound 0(63892 call -(63888 call . y c"size") 1)))
      unknown tmp[63912] "maybe param" "temp"
      (63936 'move' tmp[63912](63934 call chpl_compute_high_param_loop_bound 0(63928 call -(63930 call . y c"size") 1)))
      unknown tmp[63913] "maybe param" "temp"
      (63939 'move' tmp[63913] 1)
      ParamForLoop[63941]
      { d[63910] tmp[63911] tmp[63912] tmp[63913]
        { scopeless
          (63907 call =(63899 call result d)(63905 call << x(63904 call y d)))
        }
      }
      label _unused_continueLabel[63915]
      label _breakLabel[63914]
    }
    (63951 return result)
  }
  where {
    (63868 call &&(63858 call isHomogeneousTuple y)(63867 call isSubtype t(63866 'typeof'(63865 call y 0))))
  }
  function >>[63962](arg x[63959] :
  _tuple, arg y[63969] :
  (63968 'typeof'(63967 call x 0))) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[63987](63985 call *(63977 call . x c"size")(63984 'typeof'(63983 call x 0)))
      (63990 'end of statement')
    }
    {
      unknown d[64016] 0
      unknown tmp[64017] "maybe param" "temp"
      (64029 'move' tmp[64017](64027 call chpl_compute_low_param_loop_bound 0(63998 call -(63994 call . x c"size") 1)))
      unknown tmp[64018] "maybe param" "temp"
      (64042 'move' tmp[64018](64040 call chpl_compute_high_param_loop_bound 0(64034 call -(64036 call . x c"size") 1)))
      unknown tmp[64019] "maybe param" "temp"
      (64045 'move' tmp[64019] 1)
      ParamForLoop[64047]
      { d[64016] tmp[64017] tmp[64018] tmp[64019]
        { scopeless
          (64013 call =(64005 call result d)(64011 call >>(64009 call x d) y))
        }
      }
      label _unused_continueLabel[64021]
      label _breakLabel[64020]
    }
    (64057 return result)
  }
  where {
    (63975 call isHomogeneousTuple x)
  }
  function >>[64069](arg x[64066] :
  unknown t[64064], arg y[64072] :
  _tuple) : _unknown[51] "inline"
  {
    { scopeless
      unknown result[64101](64099 call *(64091 call . y c"size")(64098 'typeof'(64097 call y 0)))
      (64104 'end of statement')
    }
    {
      unknown d[64130] 0
      unknown tmp[64131] "maybe param" "temp"
      (64143 'move' tmp[64131](64141 call chpl_compute_low_param_loop_bound 0(64112 call -(64108 call . y c"size") 1)))
      unknown tmp[64132] "maybe param" "temp"
      (64156 'move' tmp[64132](64154 call chpl_compute_high_param_loop_bound 0(64148 call -(64150 call . y c"size") 1)))
      unknown tmp[64133] "maybe param" "temp"
      (64159 'move' tmp[64133] 1)
      ParamForLoop[64161]
      { d[64130] tmp[64131] tmp[64132] tmp[64133]
        { scopeless
          (64127 call =(64119 call result d)(64125 call >> x(64124 call y d)))
        }
      }
      label _unused_continueLabel[64135]
      label _breakLabel[64134]
    }
    (64171 return result)
  }
  where {
    (64088 call &&(64078 call isHomogeneousTuple y)(64087 call isSubtype t(64086 'typeof'(64085 call y 0))))
  }
}