AST dump for Reflection after pass expandExternArrayCalls.
Module use list: 

{
  (353115 'use' ChapelStandard)
  function checkQueryT[224975](arg t[224973]:_any[178](?)) type : _unknown[51] "private"
  {
    if(225033 call _cond_test(224980 call isClassType t))
    {
      { scopeless
        (224986 return(224984 call _cast(224983 'to borrowed class from unknown' class[232](?)) t))
      }
    }
    {
      { scopeless
        if(225027 call _cond_test(224996 call ||(224991 call isRecordType t)(224995 call isUnionType t)))
        {
          { scopeless
            (224999 return t)
          }
        }
        {
          { scopeless
            (225025 call compilerError(225004 call _cast string[26] t) " is not a class, record, or union type" 2)
          }
        }
      }
    }
  }
  function numFields[225047](arg t[225045]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      (225057 return(225056 'num fields'(225055 call checkQueryT t)))
    }
  }
  { scopeless type
    int[13]
  }
  function getFieldName[225067](arg t[225065]:_any[178](?), param arg i[225070] :
  int[13]) param : _unknown[51]
  {
    { scopeless
      (225085 return(225084 'field num to name'(225079 call checkQueryT t)(225082 call + i 1)))
    }
  }
  { scopeless type
    string[26]
  }
  function getField[225098](const  ref arg x[225095] :
  unknown t[225093], param arg i[225101] :
  int[13]) param : _unknown[51]
  {
    (225138 return(225137 'field by num' x(225135 call + i 1)))
  }
  where {
    (225128 call &&(225115 call &&(225106 call >= i 0)(225113 call < i(225112 call numFields t)))(225127 call isParam(225125 'field by num' x(225123 call + i 1))))
  }
  function getField[225151](const  ref arg x[225148] :
  unknown t[225146], param arg i[225154] :
  int[13]) type : _unknown[51]
  {
    (225191 return(225190 'field by num' x(225188 call + i 1)))
  }
  where {
    (225181 call &&(225168 call &&(225159 call >= i 0)(225166 call < i(225165 call numFields t)))(225180 call isType(225178 'field by num' x(225176 call + i 1))))
  }
  function getField[225204](const  ref arg x[225201] :
  unknown t[225199], param arg i[225207] :
  int[13]) const ref : _unknown[51] "inline" "unsafe"
  {
    { scopeless
      (225218 return(225217 'field by num' x(225215 call + i 1)))
    }
  }
  function getField[225230](const  ref arg x[225227] :
  unknown t[225225], param arg s[225233] :
  string[26]) param : _unknown[51]
  {
    (225269 return(225268 call getField x(225267 call getFieldIndex t s)))
  }
  where {
    (225258 call &&(225244 call !=(225240 call getFieldIndex t s)(225242 call - 1))(225257 call isParam(225255 call getField x(225254 call getFieldIndex t s))))
  }
  function getField[225282](const  ref arg x[225279] :
  unknown t[225277], param arg s[225285] :
  string[26]) type : _unknown[51]
  {
    (225321 return(225320 call getField x(225319 call getFieldIndex t s)))
  }
  where {
    (225310 call &&(225296 call !=(225292 call getFieldIndex t s)(225294 call - 1))(225309 call isType(225307 call getField x(225306 call getFieldIndex t s))))
  }
  function getField[225334](const  ref arg x[225331] :
  unknown t[225329], param arg s[225337] :
  string[26]) const ref : _unknown[51] "inline" "unsafe"
  {
    { scopeless
      unknown i[225361] "param"(225360 'field name to num' t s)
      (225364 'end of statement')
    }
    if(225413 call _cond_test(225368 call == i 0))
    {
      { scopeless
        (225411 call compilerError "field " s " not found in "(225409 call _cast string[26] t))
      }
    }
    (225423 return(225422 'field by num' x i))
  }
  function isImplementedWithRecords[225431](arg t[225429]:_any[178](?)) param : _unknown[51] "no doc"
  {
    { scopeless
      (225443 return(225441 call ||(225436 call isRangeType t)(225440 call isStringType t)))
    }
  }
  function numImplementationFields[225452](arg t[225450]:_any[178](?)) param : _unknown[51] "no doc"
  {
    { scopeless
      (225463 return(225462 'num fields' t))
    }
  }
  where {
    (225458 call isImplementedWithRecords t)
  }
  { scopeless type
    int[13]
  }
  function getImplementationField[225477](const  ref arg x[225474] :
  unknown t[225472], param arg i[225480] :
  int[13]) type : _unknown[51] "no doc"
  {
    { scopeless
      (225502 return(225501 'field by num' x i))
    }
  }
  where {
    (225495 call &&(225486 call isImplementedWithRecords t)(225494 call isType(225492 'field by num' x i)))
  }
  function getImplementationField[225515](const  ref arg x[225512] :
  unknown t[225510], param arg i[225518] :
  int[13]) param : _unknown[51] "no doc"
  {
    { scopeless
      (225540 return(225539 'field by num' x i))
    }
  }
  where {
    (225533 call &&(225524 call isImplementedWithRecords t)(225532 call isParam(225530 'field by num' x i)))
  }
  function getImplementationField[225553](const  ref arg x[225550] :
  unknown t[225548], param arg i[225556] :
  int[13]) const ref : _unknown[51] "no doc" "unsafe"
  {
    if(225607 call _cond_test(225563 call !(225562 call isImplementedWithRecords t)))
    {
      { scopeless
        (225605 call compilerError "an argument of the type "(225586 call _cast string[26] t) " is not valid for getImplementationField()")
      }
    }
    (225618 return(225617 'field by num' x i))
  }
  function getFieldRef[225629](ref arg x[225626] :
  unknown t[225624], param arg i[225632] :
  int[13]) ref : _unknown[51] "inline" "unsafe"
  {
    { scopeless
      (225643 return(225642 'field by num' x(225640 call + i 1)))
    }
  }
  function getFieldRef[225655](ref arg x[225652] :
  unknown t[225650], param arg s[225658] :
  string[26]) ref : _unknown[51] "unsafe"
  {
    { scopeless
      unknown i[225666] "param"(225665 'field name to num' t s)
      (225669 'end of statement')
    }
    if(225686 call _cond_test(225673 call == i 0))
    {
      { scopeless
        (225684 call compilerError "field " s " not found in "(225682 call _cast string[26] t))
      }
    }
    (225696 return(225695 'field by num' x i))
  }
  function getFieldIndex[225704](arg t[225702]:_any[178](?), param arg s[225707] :
  string[26]) param : _unknown[51]
  {
    { scopeless
      (225722 return(225720 call -(225718 'field name to num'(225716 call checkQueryT t) s) 1))
    }
  }
  { scopeless type
    int[13]
  }
  function hasField[225732](arg t[225730]:_any[178](?), param arg s[225735] :
  string[26]) param : _unknown[51]
  {
    { scopeless
      (225747 return(225745 call >=(225743 call getFieldIndex t s) 0))
    }
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225757](arg t[225755]:_any[178](?), param arg i[225760] :
  int[13]) param : _unknown[51]
  {
    (225795 return(225794 'is bound'(225785 call checkQueryT t)(225793 call getFieldName(225790 call checkQueryT t) i)))
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[225805](arg t[225803]:_any[178](?), param arg s[225808] :
  string[26]) param : _unknown[51]
  {
    (225820 return(225819 'is bound'(225817 call checkQueryT t) s))
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225832](param arg fname[225829] :
  string[26]) param : _unknown[51]
  {
    { scopeless
      (225855 return(225854 'call and fn resolves' fname))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolve[225867](param arg fname[225864] :
  string[26], arg args[225870]:_any[178](?) ...) param : _unknown[51]
  {
    { scopeless
      (225880 return(225879 'call and fn resolves' fname(225878 'expand_tuple' args)))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225890](arg obj[225888]:_any[178](?), param arg fname[225893] :
  string[26]) param : _unknown[51]
  {
    { scopeless
      (225918 return(225917 'method call and fn resolves' obj fname))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[225928](arg obj[225926]:_any[178](?), param arg fname[225931] :
  string[26], arg args[225935]:_any[178](?) ...) param : _unknown[51]
  {
    { scopeless
      (225946 return(225945 'method call and fn resolves' obj fname(225944 'expand_tuple' args)))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225956](arg t[225954]:_any[178](?), param arg fname[225959] :
  string[26]) param : _unknown[51]
  {
    { scopeless
      (225968 return(225967 'method call and fn resolves' t fname))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[225978](arg t[225976]:_any[178](?), param arg fname[225981] :
  string[26], arg args[225985]:_any[178](?) ...) param : _unknown[51]
  {
    { scopeless
      (225996 return(225995 'method call and fn resolves' t fname(225994 'expand_tuple' args)))
    }
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[226004]() param : _unknown[51] "get line number"
  {
  }
  { scopeless type
    int[13]
  }
  function getFileName[226013]() param : _unknown[51] "get file name"
  {
  }
  { scopeless type
    string[26]
  }
  function getRoutineName[226022]() param : _unknown[51] "get function name"
  {
  }
  { scopeless type
    string[26]
  }
  function getModuleName[226031]() param : _unknown[51] "get module name"
  {
  }
  { scopeless type
    string[26]
  }
}