AST dump for ChapelUtil after pass scopeResolve.
Module use list: ChapelStandard 

{
  function safeAdd[166976](arg a[166973] :
  unknown t[166971], arg b[166979] :
  t[166971]) : _unknown[51]
  {
    if(166993 call _cond_test(166986 call !(166985 call isIntegralType t[166971])))
    {
      (166991 call compilerError "Values must be of integral type.")
    }
    if(167075 call _cond_test(167001 call < a[166973] 0))
    {
      if(167034 call _cond_test(167005 call >= b[166979] 0))
      {
        (167008 return 1)
      }
      {
        if(167029 call _cond_test(167019 call < b[166979](167017 call -(167015 call min t[166971]) a[166973])))
        {
          (167022 return 0)
        }
        {
          (167026 return 1)
        }
      }
    }
    {
      if(167070 call _cond_test(167041 call <= b[166979] 0))
      {
        (167044 return 1)
      }
      {
        if(167065 call _cond_test(167055 call > b[166979](167053 call -(167051 call max t[166971]) a[166973])))
        {
          (167058 return 0)
        }
        {
          (167062 return 1)
        }
      }
    }
  }
  function safeSub[167088](arg a[167085] :
  unknown t[167083], arg b[167091] :
  t[167083]) : _unknown[51]
  {
    if(167105 call _cond_test(167098 call !(167097 call isIntegralType t[167083])))
    {
      (167103 call compilerError "Values must be of integral type.")
    }
    if(167249 call _cond_test(167113 call < a[167085] 0))
    {
      if(167187 call _cond_test(167117 call <= b[167091] 0))
      {
        (167120 return 1)
      }
      {
        if(167182 call _cond_test(167131 call > b[167091](167129 call +(167127 call max t[167083]) a[167085])))
        {
          if(167170 call _cond_test(167143 call safeAdd(167139 call +(167137 call max t[167083]) a[167085]) 1))
          {
            if(167165 call _cond_test(167155 call > b[167091](167153 call +(167150 call +(167148 call max t[167083]) a[167085]) 1)))
            {
              (167158 return 0)
            }
            {
              (167162 return 1)
            }
          }
          (167176 return 0)
        }
        {
          (167179 return 1)
        }
      }
    }
    {
      if(167244 call _cond_test(167194 call >= b[167091] 0))
      {
        if(167212 call _cond_test(167199 call isUintType t[167083]))
        {
          if(167207 call _cond_test(167202 call > b[167091] a[167085]))
          {
            (167205 return 0)
          }
        }
        (167219 return 1)
      }
      {
        if(167239 call _cond_test(167229 call <= b[167091](167227 call +(167225 call min t[167083]) a[167085])))
        {
          (167232 return 0)
        }
        {
          (167236 return 1)
        }
      }
    }
  }
  function safeMul[167262](arg a[167259] :
  unknown t[167257], arg b[167265] :
  t[167257]) : _unknown[51]
  {
    if(167279 call _cond_test(167272 call !(167271 call isIntegralType t[167257])))
    {
      (167277 call compilerError "Values must be of integral type.")
    }
    if(167389 call _cond_test(167287 call > a[167259] 0))
    {
      if(167331 call _cond_test(167291 call > b[167265] 0))
      {
        if(167306 call _cond_test(167301 call > a[167259](167299 call /(167297 call max t[167257]) b[167265])))
        {
          (167304 return 0)
        }
      }
      {
        if(167325 call _cond_test(167320 call < b[167265](167318 call /(167316 call min t[167257]) a[167259])))
        {
          (167323 return 0)
        }
      }
    }
    {
      if(167384 call _cond_test(167338 call > b[167265] 0))
      {
        if(167353 call _cond_test(167348 call < a[167259](167346 call /(167344 call min t[167257]) b[167265])))
        {
          (167351 return 0)
        }
      }
      {
        if(167378 call _cond_test(167373 call &&(167361 call != a[167259] 0)(167371 call < b[167265](167369 call /(167367 call max t[167257]) a[167259]))))
        {
          (167376 return 0)
        }
      }
    }
    (167394 return 1)
  }
  type chpl_main_argument[167416] unknown argc[167403](167402 call int(64)[13] 64) unknown return_value[167411](167410 call int(64)[13] 32)
  function chpl_convert_args[167425](arg arg[167422] :
  chpl_main_argument[167416]) : _unknown[51]
  {
    unknown local_arg[167428] arg[167422]
    (167431 'end of statement')
    function chpl_get_argument_i[167439](ref arg args[167436] :
    chpl_main_argument[167416], arg i[167445] :
    (167444 call int(64)[13] 32)) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_string[19]
    }
    unknown array[167469] "no auto destroy"(167467 call chpl__buildArrayRuntimeType(167465 call chpl__ensureDomainExpr(167461 call #(167453 call chpl_build_low_bounded_range 0)(167458 call . local_arg[167428] c"argc"))) string[26])
    (167472 'end of statement')
    {
      unknown _indexOfInterest[167509] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[167510] "expr temp" "temp"
      (167519 'move' _iterator[167510](167517 call _getIterator(167529 call chpl_direct_counted_range_iter 0(167525 call . arg[167422] c"argc"))))
      Defer
      {
        {
          (167545 call _freeIterator _iterator[167510])
        }
      }
      { scopeless type
        (167534 'move' _indexOfInterest[167509](167531 call iteratorIndex _iterator[167510]))
      }
      ForLoop[167511]
      {
        unknown i[167538] "index var" "insert auto destroy"
        (167540 'move' i[167538] _indexOfInterest[167509])
        {
          Try!
          {
            {
              (167501 call =(167486 call array[167469] i[167538])(167500 call createStringWithNewBuffer(167498 call chpl_get_argument_i local_arg[167428](167496 call _cast(167495 call int(64)[13] 32) i[167538]))))
            }
          }
        }
        label _continueLabel[167514]
        _indexOfInterest[167509]
        _iterator[167510]
      }
      label _breakLabel[167515]
    }
    (167553 return array[167469])
  }
  function chpl_get_mli_connection[167563](arg arg[167560] :
  chpl_main_argument[167416]) : _unknown[51]
  {
    unknown local_arg[167566] arg[167560]
    (167569 'end of statement')
    function chpl_get_argument_i[167577](ref arg args[167574] :
    chpl_main_argument[167416], arg i[167583] :
    (167582 call int(64)[13] 32)) : _unknown[51] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_string[19]
    }
    unknown flag[167608](167607 call chpl_get_argument_i local_arg[167566](167605 call _cast(167604 call int(64)[13] 32)(167599 call -(167595 call . local_arg[167566] c"argc") 2))) c_string[19]
    (167611 'end of statement')
    if(167681 call _cond_test(167630 call != flag[167608] "--chpl-mli-socket-loc"))
    {
      Try!
      {
        {
          (167676 call halt(167673 call +(167667 call + "chpl_get_mli_connection called with unexpected arguments, missing " "'--chpl-mli-socket-loc <connection>', instead got ")(167672 call createStringWithNewBuffer flag[167608])))
        }
      }
    }
    unknown result[167703](167702 call chpl_get_argument_i local_arg[167566](167700 call _cast(167699 call int(64)[13] 32)(167694 call -(167690 call . local_arg[167566] c"argc") 1))) c_string[19]
    (167706 'end of statement')
    (167708 return result[167703])
  }
  function chpl_rt_preUserCodeHook[167714]() : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
  }
  function chpl_rt_postUserCodeHook[167720]() : void[4] "extern" "local args" "no fn body" "no return value for void"
  {
  }
  unknown printModuleDeinitOrder[167725] "config" "param" 0
  (167728 'end of statement')
  function chpl_addModule[167735](arg moduleName[167732] :
  c_string[19], arg deinitFun[167738] :
  c_fn_ptr[152]) : _unknown[51] "no return value for void"
  {
    (167751 call = chpl_moduleDeinitFuns[19840](167744 'new'(_chpl_manager = unmanaged[220](?))(167750 call chpl_ModuleDeinit[368781](?) moduleName[167732] deinitFun[167738] chpl_moduleDeinitFuns[19840])))
  }
  function chpl_deinitModules[167759]() : _unknown[51] "export" "local args" "no return value for void"
  {
    function printf[167767](arg fmt[167764] :
    c_string[19]) : void[4] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    function printf[167778](arg fmt[167775] :
    c_string[19], arg arg[167781] :
    c_string[19]) : void[4] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    function chpl_execute_module_deinit[167792](arg deinitFun[167789] :
    c_fn_ptr[152]) : void[4] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    if(167804 call _cond_test printModuleDeinitOrder[167725])
    {
      (167802 call printf c"Deinitializing Modules:\n")
    }
    unknown prev[167810] chpl_moduleDeinitFuns[19840]
    (167813 'end of statement')
    {
      unknown tmp[167867] "temp"
      (167885 'move' tmp[167867](167883 call _cond_test prev[167810]))
      WhileDo[167872]
      {
        {
          const curr[167818] "const"(167816 call postfix! prev[167810])
          (167821 'end of statement')
          if(167837 call _cond_test printModuleDeinitOrder[167725])
          {
            (167835 call printf c"  %s\n"(167832 call . curr[167818] c"moduleName"))
          }
          (167850 call chpl_execute_module_deinit(167846 call . curr[167818] c"deinitFun"))
          (167859 call = prev[167810](167856 call . curr[167818] c"prevModule"))
          (167864 call chpl__delete curr[167818])
        }
        label _continueLabel[167870]
        (167878 'move' tmp[167867](167876 call _cond_test prev[167810]))
        tmp[167867]
      }
      label _breakLabel[167871]
    }
    (167890 call = chpl_moduleDeinitFuns[19840] nil[44])
  }
  (355217 'used modules list'(166966 'use' ChapelStandard[20267]))
}