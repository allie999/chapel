AST dump for ChapelDistribution after pass flattenClasses.
Module use list: ChapelArray ChapelRange ChapelLocks ChapelHashtable Sort 

{
  function BaseDist[145968].deinit[145498](arg _mt[145972]:_MT[238], arg this[145970]:BaseDist[145968]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseDist[145968].remove[145505](arg _mt[145976]:_MT[238], arg this[145974]:BaseDist[145968]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown free_dist[145511] 0
    (145514 'end of statement')
    if(145591 call _cond_test(145518 call(385415 call . this[145974] c"dsiTrackDomains")))
    {
      const tmp[145576] "const" "temp"
      (145578 'move' tmp[145576](145574 'deref'(145573 '_wide_get_locale' this[145974])))
      {
        {
          unknown dom_count[145523](145521 call - 1)
          (145526 'end of statement')
          {
            {
              (145533 call(145529 call .(360492 call . this[145974] c"_domsLock") c"lock"))
              (145538 call =(385423 call . this[145974] c"_free_when_no_doms") 1)
              (145546 call = dom_count[145523](145543 call .(360497 call . this[145974] c"_doms") c"size"))
              (145554 call(145550 call .(360502 call . this[145974] c"_domsLock") c"unlock"))
            }
            (145558 'local block')
          }
          if(145568 call _cond_test(145561 call == dom_count[145523] 0))
          {
            (145565 call = free_dist[145511] 1)
          }
        }
        (145581 'on block' 0 tmp[145576])
      }
    }
    {
      (145587 call = free_dist[145511] 1)
    }
    if(145605 call _cond_test free_dist[145511])
    {
      (145600 return(145599 call _to_unmanaged this[145974]))
    }
    {
      (145603 return nil[44])
    }
  }
  { scopeless type
    unmanaged BaseDist?[415502]
  }
  function BaseDist[145968].remove_dom[145621](arg _mt[145980]:_MT[238], arg this[145978]:BaseDist[145968], arg x[145618] :
  unmanaged BaseDom[415448]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown count[145627](145625 call - 1)
    (145630 'end of statement')
    const tmp[145696] "const" "temp"
    (145698 'move' tmp[145696](145694 'deref'(145693 '_wide_get_locale' this[145978])))
    {
      {
        unknown cnt[145636](145634 call - 1)
        (145639 'end of statement')
        {
          {
            (145646 call(145642 call .(360507 call . this[145978] c"_domsLock") c"lock"))
            (145655 call(145650 call .(360512 call . this[145978] c"_doms") c"remove") x[145618])
            (145662 call = cnt[145636](145659 call .(360517 call . this[145978] c"_doms") c"size"))
            if(145673 call _cond_test(145666 call !(385438 call . this[145978] c"_free_when_no_doms")))
            {
              (145670 call += cnt[145636] 1)
            }
            (145683 call(145679 call .(360522 call . this[145978] c"_domsLock") c"unlock"))
          }
          (145687 'local block')
        }
        (145690 call = count[145627] cnt[145636])
      }
      (145701 'on block' 0 tmp[145696])
    }
    (145708 return(145706 call == count[145627] 0))
  }
  { scopeless type
    bool[10]
  }
  function BaseDist[145968].add_dom[145720](arg _mt[145984]:_MT[238], arg this[145982]:BaseDist[145968], arg x[145717] :
  unmanaged BaseDom[415448]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[145749] "const" "temp"
    (145751 'move' tmp[145749](145747 'deref'(145746 '_wide_get_locale' this[145982])))
    {
      {
        (145728 call(145724 call .(360527 call . this[145982] c"_domsLock") c"lock"))
        (145737 call(145732 call .(360532 call . this[145982] c"_doms") c"add") x[145717])
        (145744 call(145740 call .(360537 call . this[145982] c"_domsLock") c"unlock"))
      }
      (145754 'on block' 0 tmp[145749])
    }
  }
  function BaseDist[145968].dsiNewRectangularDom[145766](arg _mt[145988]:_MT[238], arg this[145986]:BaseDist[145968], param arg rank[145763] :
  int(64)[13], arg idxType[145768]:_any[178](?), param arg stridable[145771] :
  bool[10], arg inds[145774]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145795 call compilerError "rectangular domains not supported by this distribution")
  }
  function BaseDist[145968].dsiNewAssociativeDom[145804](arg _mt[145992]:_MT[238], arg this[145990]:BaseDist[145968], arg idxType[145802]:_any[178](?), param arg parSafe[145807] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145829 call compilerError "associative domains not supported by this distribution")
  }
  function BaseDist[145968].dsiNewSparseDom[145840](arg _mt[145996]:_MT[238], arg this[145994]:BaseDist[145968], param arg rank[145837] :
  int(64)[13], arg idxType[145842]:_any[178](?), arg dom[145845] :
  _domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145867 call compilerError "sparse domains not supported by this distribution")
  }
  function BaseDist[145968].dsiSupportsPrivatization[145874](arg _mt[146000]:_MT[238], arg this[145998]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    (145877 return 0)
  }
  function BaseDist[145968].dsiRequiresPrivatization[145884](arg _mt[146004]:_MT[238], arg this[146002]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    (145887 return 0)
  }
  function BaseDist[145968].dsiDestroyDist[145894](arg _mt[146008]:_MT[238], arg this[146006]:BaseDist[145968]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function BaseDist[145968].dsiDisplayRepresentation[145901](arg _mt[146012]:_MT[238], arg this[146010]:BaseDist[145968]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145922 call writeln "<no way to display representation>")
  }
  function BaseDist[145968].trackDomains[145929](arg _mt[146016]:_MT[238], arg this[146014]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    (145932 return 1)
  }
  function BaseDist[145968].dsiTrackDomains[145939](arg _mt[146020]:_MT[238], arg this[146018]:BaseDist[145968]) : _unknown[51] "method" "primary method"
  {
    (145942 return 1)
  }
  function BaseDist[145968].singleton[145949](arg _mt[146024]:_MT[238], arg this[146022]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    (145952 return 0)
  }
  function BaseDist[145968].dsiIsLayout[145959](arg _mt[146028]:_MT[238], arg this[146026]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    (145962 return 0)
  }
  type BaseDist[145968] val super[355695]:object[22] "super class" unknown _doms[145476](145475 call chpl__simpleSet[204962](?) unmanaged BaseDom[415448]) unknown _domsLock[145481] chpl_LocalSpinlock[187432] unknown _free_when_no_doms[145486] bool[10] unknown pid[145492] nullPid[113718] int(64)[13]
  type unmanaged BaseDist[415511]
  type unmanaged BaseDist?[415502]
  type BaseDist?[415499](?)
  type BaseDist[382381](?)
  function BaseDom[146767].init[146064](arg _mt[146771]:_MT[238], arg this[146769]:BaseDom[146767]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function BaseDom[146767].deinit[146071](arg _mt[146775]:_MT[238], arg this[146773]:BaseDom[146767]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseDom[146767].dsiMyDist[146078](arg _mt[146779]:_MT[238], arg this[146777]:BaseDom[146767]) : _unknown[51] "method" "primary method"
  {
    (146101 call halt "internal error: dsiMyDist is not implemented")
    unknown ret[146106] "unsafe" unmanaged BaseDist[415511]
    (146109 'end of statement')
    (146111 return ret[146106])
  }
  { scopeless type
    unmanaged BaseDist[415511]
  }
  function BaseDom[146767].remove[146118](arg _mt[146783]:_MT[238], arg this[146781]:BaseDom[146767]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    (146146 call assert(146143 call ==(146139 call(146135 call .(146132 call(385461 call . this[146781] c"dsiMyDist")) c"dsiTrackDomains"))(146142 call(385467 call . this[146781] c"dsiLinksDistribution"))))
    unknown ret_dom[146153] nil[44] unmanaged BaseDom?[415508]
    (146156 'end of statement')
    unknown ret_dist[146161] nil[44] unmanaged BaseDist?[415502]
    (146164 'end of statement')
    unknown dist[146168](146167 call(385473 call . this[146781] c"dsiMyDist"))
    (146171 'end of statement')
    unknown free_dom[146173] 0
    (146176 'end of statement')
    unknown remove_dist[146178] 0
    (146181 'end of statement')
    const tmp[146266] "const" "temp"
    (146268 'move' tmp[146266](146264 'deref'(146263 '_wide_get_locale' this[146781])))
    {
      {
        unknown arr_count[146184] 0
        (146187 'end of statement')
        {
          {
            (146194 call(146190 call .(360544 call . this[146781] c"_arrsLock") c"lock"))
            (146202 call = arr_count[146184](146199 call .(360549 call . this[146781] c"_arrs") c"size"))
            (146207 call += arr_count[146184](385483 call . this[146781] c"_arrs_containing_dom"))
            (146212 call =(385488 call . this[146781] c"_free_when_no_arrs") 1)
            (146220 call(146216 call .(360554 call . this[146781] c"_arrsLock") c"unlock"))
          }
          (146224 'local block')
        }
        if(146259 call _cond_test(146227 call == arr_count[146184] 0))
        {
          (146231 call = free_dom[146173] 1)
          if(146255 call _cond_test(146237 call(385494 call . this[146781] c"dsiLinksDistribution")))
          {
            (146251 call = remove_dist[146178](146250 call(146242 call . dist[146168] c"remove_dom")(146248 call _to_unmanaged this[146781])))
          }
        }
      }
      (146271 'on block' 0 tmp[146266])
    }
    if(146283 call _cond_test free_dom[146173])
    {
      (146280 call = ret_dom[146153](146279 call _to_unmanaged this[146781]))
    }
    if(146294 call _cond_test remove_dist[146178])
    {
      (146291 call = ret_dist[146161] dist[146168])
    }
    (146304 return(146302 call _build_tuple ret_dom[146153] ret_dist[146161]))
  }
  { scopeless type
    (146127 call _build_tuple unmanaged BaseDom?[415508] unmanaged BaseDist?[415502])
  }
  function BaseDom[146767].remove_arr[146316](arg _mt[146787]:_MT[238], arg this[146785]:BaseDom[146767], arg x[146313] :
  unmanaged BaseArr[415496], param arg rmFromList[146319] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown count[146326](146324 call - 1)
    (146329 'end of statement')
    const tmp[146412] "const" "temp"
    (146414 'move' tmp[146412](146410 'deref'(146409 '_wide_get_locale' this[146785])))
    {
      {
        unknown cnt[146335](146333 call - 1)
        (146338 'end of statement')
        {
          {
            (146345 call(146341 call .(360560 call . this[146785] c"_arrsLock") c"lock"))
            if(146362 call _cond_test rmFromList[146319])
            {
              (146355 call(146350 call .(360565 call . this[146785] c"_arrs") c"remove") x[146313])
            }
            {
              (146359 call -=(385513 call . this[146785] c"_arrs_containing_dom") 1)
            }
            (146373 call = cnt[146335](146370 call .(360570 call . this[146785] c"_arrs") c"size"))
            (146378 call += cnt[146335](385520 call . this[146785] c"_arrs_containing_dom"))
            if(146389 call _cond_test(146382 call !(385525 call . this[146785] c"_free_when_no_arrs")))
            {
              (146386 call += cnt[146335] 1)
            }
            (146399 call(146395 call .(360575 call . this[146785] c"_arrsLock") c"unlock"))
          }
          (146403 'local block')
        }
        (146406 call = count[146326] cnt[146335])
      }
      (146417 'on block' 0 tmp[146412])
    }
    (146424 return(146422 call == count[146326] 0))
  }
  { scopeless type
    bool[10]
  }
  function BaseDom[146767].add_arr[146436](arg _mt[146791]:_MT[238], arg this[146789]:BaseDom[146767], arg x[146433] :
  unmanaged BaseArr[415496], param arg locking[146439] =
  1, param arg addToList[146443] =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146497] "const" "temp"
    (146499 'move' tmp[146497](146495 'deref'(146494 '_wide_get_locale' this[146789])))
    {
      {
        if(146455 call _cond_test locking[146439])
        {
          (146453 call(146449 call .(360580 call . this[146789] c"_arrsLock") c"lock"))
        }
        if(146475 call _cond_test addToList[146443])
        {
          (146468 call(146463 call .(360585 call . this[146789] c"_arrs") c"add") x[146433])
        }
        {
          (146472 call +=(385539 call . this[146789] c"_arrs_containing_dom") 1)
        }
        if(146489 call _cond_test locking[146439])
        {
          (146487 call(146483 call .(360590 call . this[146789] c"_arrsLock") c"unlock"))
        }
      }
      (146502 'on block' 0 tmp[146497])
    }
  }
  function BaseDom[146767].remove_containing_arr[146515](arg _mt[146795]:_MT[238], arg this[146793]:BaseDom[146767], arg x[146512] :
  unmanaged BaseArr[415496]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown count[146520](146518 call - 1)
    (146523 'end of statement')
    const tmp[146587] "const" "temp"
    (146589 'move' tmp[146587](146585 'deref'(146584 '_wide_get_locale' this[146793])))
    {
      {
        unknown cnt[146529](146527 call - 1)
        (146532 'end of statement')
        (146539 call(146535 call .(360595 call . this[146793] c"_arrsLock") c"lock"))
        (146543 call -=(385547 call . this[146793] c"_arrs_containing_dom") 1)
        (146551 call = cnt[146529](146548 call .(360600 call . this[146793] c"_arrs") c"size"))
        (146556 call += cnt[146529](385554 call . this[146793] c"_arrs_containing_dom"))
        if(146567 call _cond_test(146560 call !(385559 call . this[146793] c"_free_when_no_arrs")))
        {
          (146564 call += cnt[146529] 1)
        }
        (146577 call(146573 call .(360605 call . this[146793] c"_arrsLock") c"unlock"))
        (146581 call = count[146520] cnt[146529])
      }
      (146592 'on block' 0 tmp[146587])
    }
    (146599 return(146597 call == count[146520] 0))
  }
  function BaseDom[146767].add_containing_arr[146610](arg _mt[146799]:_MT[238], arg this[146797]:BaseDom[146767], arg x[146607] :
  unmanaged BaseArr[415496]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146636] "const" "temp"
    (146638 'move' tmp[146636](146634 'deref'(146633 '_wide_get_locale' this[146797])))
    {
      {
        (146618 call(146614 call .(360610 call . this[146797] c"_arrsLock") c"lock"))
        (146623 call +=(385570 call . this[146797] c"_arrs_containing_dom") 1)
        (146631 call(146627 call .(360615 call . this[146797] c"_arrsLock") c"unlock"))
      }
      (146641 'on block' 0 tmp[146636])
    }
  }
  function BaseDom[146767].dsiSupportsPrivatization[146649](arg _mt[146803]:_MT[238], arg this[146801]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    (146652 return 0)
  }
  function BaseDom[146767].dsiRequiresPrivatization[146659](arg _mt[146807]:_MT[238], arg this[146805]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    (146662 return 0)
  }
  function BaseDom[146767].linksDistribution[146669](arg _mt[146811]:_MT[238], arg this[146809]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    (146672 return 1)
  }
  function BaseDom[146767].dsiLinksDistribution[146679](arg _mt[146815]:_MT[238], arg this[146813]:BaseDom[146767]) : _unknown[51] "method" "primary method"
  {
    (146682 return 1)
  }
  function BaseDom[146767].dsiDestroyDom[146689](arg _mt[146819]:_MT[238], arg this[146817]:BaseDom[146767]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function BaseDom[146767].dsiDisplayRepresentation[146696](arg _mt[146823]:_MT[238], arg this[146821]:BaseDom[146767]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (146701 call writeln "<no way to display representation>")
  }
  function BaseDom[146767].dsiSupportsAutoLocalAccess[146708](arg _mt[146827]:_MT[238], arg this[146825]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    (146711 return 0)
  }
  function BaseDom[415343](?).isDefaultRectangular[146718](arg _mt[146831]:_MT[238], arg this[146829]:BaseDom[415343](?)) param : _unknown[51] "method" "primary method"
  {
    (146721 return 0)
  }
  function BaseDom[146767].isDefaultRectangular[146728](arg _mt[146835]:_MT[238], arg this[146833]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    (146731 return 0)
  }
  function BaseDom[146767].isSliceDomainView[146738](arg _mt[146839]:_MT[238], arg this[146837]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    (146741 return 0)
  }
  function BaseDom[146767].isRankChangeDomainView[146748](arg _mt[146843]:_MT[238], arg this[146841]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    (146751 return 0)
  }
  function BaseDom[146767].isReindexDomainView[146758](arg _mt[146847]:_MT[238], arg this[146845]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    (146761 return 0)
  }
  type BaseDom[146767] val super[355699]:object[22] "super class" unknown _arrs[146037](146036 call chpl__simpleSet[204962](?) unmanaged BaseArr[415496]) unknown _arrs_containing_dom[146042] int(64)[13] unknown _arrsLock[146047] chpl_LocalSpinlock[187432] unknown _free_when_no_arrs[146052] bool[10] unknown pid[146058] nullPid[113718] int(64)[13]
  type unmanaged BaseDom?[415508]
  type BaseDom?[415505](?)
  type unmanaged BaseDom[415448]
  type BaseDom[415343](?)
  type BaseDom[372786](?)
  function BaseRectangularDom[146935](?).getBaseArrType[146868](arg _mt[146939]:_MT[238], arg this[146937]:BaseRectangularDom[146935](?)) type : _unknown[51] "method" "primary method"
  {
    unknown tmp[146882](146872 'new'(_chpl_manager = unmanaged[220](?))(146881 call BaseArrOverRectangularDom[385574](?)(rank =(385579 call . this[146937] c"rank"))(idxType =(385584 call . this[146937] c"idxType"))(stridable =(385589 call . this[146937] c"stridable"))))
    (146885 'end of statement')
    (146889 return(146888 'typeof' tmp[146882]))
  }
  function BaseRectangularDom[146935](?).deinit[146895](arg _mt[146943]:_MT[238], arg this[146941]:BaseRectangularDom[146935](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseRectangularDom[146935](?).dsiAdd[146904](arg _mt[146947]:_MT[238], arg this[146945]:BaseRectangularDom[146935](?), in arg x[146902]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (146909 call compilerError "Cannot add indices to a rectangular domain")
    (146913 return 0)
  }
  function BaseRectangularDom[146935](?).dsiRemove[146921](arg _mt[146951]:_MT[238], arg this[146949]:BaseRectangularDom[146935](?), arg x[146919]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (146926 call compilerError "Cannot remove indices from a rectangular domain")
    (146930 return 0)
  }
  type BaseRectangularDom[146935](?) val super[355701]:BaseDom[146767] "super class" unknown rank[146854] "param" int(64)[13] unknown idxType[146858] "type variable" unknown stridable[146862] "param" bool[10]
  type BaseRectangularDom[382286](?)
  function BaseSparseDomImpl[148004](?).deinit[146970](arg _mt[148008]:_MT[238], arg this[148006]:BaseSparseDomImpl[148004](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseSparseDomImpl[148004](?).dsiBulkAdd[146988](arg _mt[148012]:_MT[238], arg this[148010]:BaseSparseDomImpl[148004](?), arg inds[146985] :
  (146982 call chpl__buildArrayRuntimeType nil[44](146980 call chpl__buildIndexType(385595 call . this[148010] c"rank")(385600 call . this[148010] c"idxType"))), arg dataSorted[146991] =
  0, arg isUnique[146995] =
  0, arg preserveInds[146999] =
  1, arg addOn[147003] =
  nilLocale[89942]) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(147037 call _cond_test(147010 call &&(147007 call ! dataSorted[146991]) preserveInds[146999]))
    {
      unknown _inds[147013] inds[146985]
      (147016 'end of statement')
      (147025 return(147024 call(385610 call . this[148010] c"bulkAdd_help") _inds[147013] dataSorted[146991] isUnique[146995] addOn[147003]))
    }
    {
      (147034 return(147033 call(385618 call . this[148010] c"bulkAdd_help") inds[146985] dataSorted[146991] isUnique[146995] addOn[147003]))
    }
  }
  function BaseSparseDomImpl[148004](?).bulkAdd_help[147059](arg _mt[148016]:_MT[238], arg this[148014]:BaseSparseDomImpl[148004](?), arg inds[147056] :
  (147054 call chpl__buildArrayRuntimeType unknown indsDom[147046](147052 call chpl__buildIndexType(385627 call . this[148014] c"rank")(385632 call . this[148014] c"idxType"))), arg dataSorted[147062] =
  0, arg isUnique[147066] =
  0, arg addOn[147070] =
  nilLocale[89942]) : _unknown[51] "method" "primary method"
  {
    (147092 call halt "Helper function called on the BaseSparseDomImpl")
    (147098 return(147096 call - 1))
  }
  function BaseSparseDomImpl[148004](?)._grow[147108](arg _mt[148020]:_MT[238], arg this[148018]:BaseSparseDomImpl[148004](?), arg size[147105] :
  int(64)[13], arg factor[147111] =
  arrayAsVecGrowthFactor[113755]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const oldNNZDomSize[147118] "const"(147115 call .(360620 call . this[148018] c"nnzDom") c"size")
    (147121 'end of statement')
    if(147160 call _cond_test(147125 call > size[147105] oldNNZDomSize[147118]))
    {
      const _newNNZDomSize[147142] "const"(147139 IfExpr  oldNNZDomSize[147118] then
      { scopeless
        (147136 call _cast int(64)[13](147134 call ceil(147131 call * factor[147111] oldNNZDomSize[147118])))
      } else
      { scopeless
        1
      } )
      (147145 'end of statement')
      (147157 call =(385644 call . this[148018] c"nnzDom")(147155 call chpl__buildDomainExpr(147152 call #(147149 call chpl_build_low_bounded_range 1) _newNNZDomSize[147142])))
    }
  }
  function BaseSparseDomImpl[148004](?)._shrink[147172](arg _mt[148024]:_MT[238], arg this[148022]:BaseSparseDomImpl[148004](?), arg size[147169] :
  int(64)[13], arg factor[147175] =
  arrayAsVecGrowthFactor[113755]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(147246 call _cond_test(147180 call == size[147169] 0))
    {
      (147190 call =(385652 call . this[148022] c"nnzDom")(147188 call chpl__buildDomainExpr(147185 call chpl_build_bounded_range 1 0)))
    }
    {
      const shrinkThreshold[147207] "const"(147205 call _cast int(64)[13](147202 call /(147195 call .(360625 call . this[148022] c"nnzDom") c"size")(147200 call ** factor[147175] 2)))
      (147210 'end of statement')
      if(147242 call _cond_test(147214 call < size[147169] shrinkThreshold[147207]))
      {
        const _newNNZDomSize[147226] "const"(147224 call _cast int(64)[13](147221 call /(147217 call .(360630 call . this[148022] c"nnzDom") c"size") factor[147175]))
        (147229 'end of statement')
        (147239 call =(385661 call . this[148022] c"nnzDom")(147237 call chpl__buildDomainExpr(147234 call chpl_build_bounded_range 1 _newNNZDomSize[147226])))
      }
    }
  }
  function BaseSparseDomImpl[148004](?)._bulkGrow[147255](arg _mt[148028]:_MT[238], arg this[148026]:BaseSparseDomImpl[148004](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const nnz[147260] "const"(147259 call(385668 call . this[148026] c"getNNZ"))
    (147263 'end of statement')
    if(147303 call _cond_test(147270 call > nnz[147260](147267 call .(360635 call . this[148026] c"nnzDom") c"size")))
    {
      const _newNNZDomSize[147287] "const"(147285 call _cast int(64)[13](147283 call exp2(147280 call +(147276 call log2 nnz[147260]) 1.0)))
      (147290 'end of statement')
      (147300 call =(385675 call . this[148026] c"nnzDom")(147298 call chpl__buildDomainExpr(147295 call chpl_build_bounded_range 1 _newNNZDomSize[147287])))
    }
  }
  function BaseSparseDomImpl[148004](?)._countDuplicates[147313](arg _mt[148032]:_MT[238], arg this[148030]:BaseSparseDomImpl[148004](?), arg arr[147311]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown dupCount[147322](147320 call - 1)
    (147325 'end of statement')
    unknown prev[147337](147336 call arr[147311](147332 call .(147329 call . arr[147311] c"_dom") c"low"))
    (147340 'end of statement')
    {
      unknown _indexOfInterest[147366] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147367] "expr temp" "temp"
      (147376 'move' _iterator[147367](147374 call _getIterator arr[147311]))
      Defer
      {
        {
          (147392 call _freeIterator _iterator[147367])
        }
      }
      { scopeless type
        (147381 'move' _indexOfInterest[147366](147378 call iteratorIndex _iterator[147367]))
      }
      ForLoop[147368]
      {
        unknown a[147385] "index var" "insert auto destroy"
        (147387 'move' a[147385] _indexOfInterest[147366])
        {
          if(147357 call _cond_test(147345 call == a[147385] prev[147337]))
          {
            (147349 call += dupCount[147322] 1)
          }
          {
            (147354 call = prev[147337] a[147385])
          }
          {
          }
        }
        label _continueLabel[147371]
        _indexOfInterest[147366]
        _iterator[147367]
      }
      label _breakLabel[147372]
    }
    (147400 return dupCount[147322])
  }
  where {
    (147318 call isArray arr[147311])
  }
  function BaseSparseDomImpl[148004](?).bulkAdd_prepareInds[147409](arg _mt[148036]:_MT[238], arg this[148034]:BaseSparseDomImpl[148004](?), arg inds[147407]:_any[178](?), arg dataSorted[147411]:_any[178](?), arg isUnique[147413]:_any[178](?), arg cmp[147415]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(147431 call _cond_test(147422 call ! dataSorted[147411]))
    {
      (147429 call sort inds[147407](comparator = cmp[147415]))
    }
    if(147645 call _cond_test 1)
    {
      if(147471 call _cond_test(147446 call && dataSorted[147411](147444 call !(147443 call isSorted inds[147407](comparator = cmp[147415])))))
      {
        (147469 call halt "bulkAdd: Data not sorted, call the function with \n              dataSorted=false")
      }
      if(147601 call _cond_test isUnique[147413])
      {
        const indsStart[147485] "const"(147482 call .(147479 call . inds[147407] c"_dom") c"low")
        (147488 'end of statement')
        const indsEnd[147497] "const"(147494 call .(147491 call . inds[147407] c"_dom") c"high")
        (147500 'end of statement')
        unknown lastInd[147505](147504 call inds[147407] indsStart[147485])
        (147508 'end of statement')
        {
          unknown _indexOfInterest[147560] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[147561] "expr temp" "temp"
          (147570 'move' _iterator[147561](147568 call _getIterator(147578 call chpl_direct_range_iter(147574 call + indsStart[147485] 1) indsEnd[147497] 1)))
          Defer
          {
            {
              (147594 call _freeIterator _iterator[147561])
            }
          }
          { scopeless type
            (147583 'move' _indexOfInterest[147560](147580 call iteratorIndex _iterator[147561]))
          }
          ForLoop[147562]
          {
            unknown i[147587] "index var" "insert auto destroy"
            (147589 'move' i[147587] _indexOfInterest[147560])
            {
              if(147553 call _cond_test(147522 call ==(147520 call inds[147407] i[147587]) lastInd[147505]))
              {
                (147543 call halt "bulkAdd: There are duplicates, call the function \n                  with isUnique=false")
              }
              {
                (147550 call = lastInd[147505](147549 call inds[147407] i[147587]))
              }
            }
            label _continueLabel[147565]
            _indexOfInterest[147560]
            _iterator[147561]
          }
          label _breakLabel[147566]
        }
      }
      {
        unknown _indexOfInterest[147612] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147613] "expr temp" "temp"
        (147622 'move' _iterator[147613](147620 call _getIterator inds[147407]))
        Defer
        {
          {
            (147638 call _freeIterator _iterator[147613])
          }
        }
        { scopeless type
          (147627 'move' _indexOfInterest[147612](147624 call iteratorIndex _iterator[147613]))
        }
        ForLoop[147614]
        {
          unknown i[147631] "index var" "insert auto destroy"
          (147633 'move' i[147631] _indexOfInterest[147612])
          (147610 call(385708 call . this[148034] c"boundsCheck") i[147631])
          label _continueLabel[147617]
          _indexOfInterest[147612]
          _iterator[147613]
        }
        label _breakLabel[147618]
      }
    }
    (355174 'used modules list'(147418 'use' Sort[267989]))
  }
  function BaseSparseDomImpl[148004](?).__getActualInsertPts[147655](arg _mt[148040]:_MT[238], arg this[148038]:BaseSparseDomImpl[148004](?), arg d[147653]:_any[178](?), arg inds[147657]:_any[178](?), arg isUnique[147659]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown indivInsertPts[147671](147669 call chpl__buildArrayRuntimeType(147667 call chpl__ensureDomainExpr(147662 call . inds[147657] c"_dom")) int(64)[13])
    (147674 'end of statement')
    unknown actualInsertPts[147686](147684 call chpl__buildArrayRuntimeType(147682 call chpl__ensureDomainExpr(147677 call . inds[147657] c"_dom")) int(64)[13])
    (147689 'end of statement')
    if(147795 call _cond_test(147691 call ! isUnique[147659]))
    {
      unknown lastInd[147706](147704 call +(147702 call inds[147657](147698 call .(147695 call . inds[147657] c"_dom") c"low")) 1)
      (147709 'end of statement')
      {
        unknown _indexOfInterest[147743] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147744] "expr temp" "temp"
        (147758 'move' _iterator[147744](147719 call _build_tuple(147753 call _getIterator inds[147657])(147756 call _getIterator indivInsertPts[147671])))
        Defer
        {
          {
            (147788 call _freeIterator _iterator[147744])
          }
        }
        { scopeless type
          (147763 'move' _indexOfInterest[147743](147760 call iteratorIndex _iterator[147744]))
        }
        ForLoop[147745]
        {
          (147768 call _check_tuple_var_decl _indexOfInterest[147743] 2)
          unknown i[147774] "index var" "insert auto destroy"
          (147776 'move' i[147774](147772 call _indexOfInterest[147743] 0))
          unknown p[147781] "index var" "insert auto destroy"
          (147783 'move' p[147781](147779 call _indexOfInterest[147743] 1))
          {
            if(147736 call _cond_test(147722 call == i[147774] lastInd[147706]))
            {
              (147728 call = p[147781](147726 call - 1))
            }
            {
              (147733 call = lastInd[147706] i[147774])
            }
          }
          label _continueLabel[147748]
          _indexOfInterest[147743]
          _iterator[147744]
        }
        label _breakLabel[147749]
      }
    }
    Forall {
      induction variables:
        
        unknown i[147863] "index var" "insert auto destroy"
        
        unknown p[147865] "index var" "insert auto destroy"
      iterated expressions:
        inds[147657]
        indivInsertPts[147671]
      shadow variables:
      other variables
        forall body
      {
        if(147857 call _cond_test(147815 call || isUnique[147659](147813 call != p[147865](147811 call - 1))))
        {
          const tmp[147831] "const" "temp"(147830 call(147825 call . d[147653] c"find") i[147863])
          (147838 call _check_tuple_var_decl tmp[147831] 2)
          const found[147817] "const"(147832 call tmp[147831] 0)
          const insertPt[147819] "const"(147835 call tmp[147831] 1)
          (147843 'end of statement')
          (147854 call = p[147865](147851 IfExpr  found[147817] then
          { scopeless
            (147848 call - 1)
          } else
          { scopeless
            insertPt[147819]
          } ))
        }
      }
    }
    unknown actualAddCnt[147870] 0
    (147873 'end of statement')
    {
      unknown _indexOfInterest[147914] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147915] "expr temp" "temp"
      (147929 'move' _iterator[147915](147882 call _build_tuple(147924 call _getIterator indivInsertPts[147671])(147927 call _getIterator actualInsertPts[147686])))
      Defer
      {
        {
          (147959 call _freeIterator _iterator[147915])
        }
      }
      { scopeless type
        (147934 'move' _indexOfInterest[147914](147931 call iteratorIndex _iterator[147915]))
      }
      ForLoop[147916]
      {
        (147939 call _check_tuple_var_decl _indexOfInterest[147914] 2)
        unknown ip[147945] "index var" "insert auto destroy"
        (147947 'move' ip[147945](147943 call _indexOfInterest[147914] 0))
        unknown ap[147952] "index var" "insert auto destroy"
        (147954 'move' ap[147952](147950 call _indexOfInterest[147914] 1))
        {
          if(147908 call _cond_test(147887 call != ip[147945](147885 call - 1)))
          {
            (147894 call = ap[147952](147892 call + ip[147945] actualAddCnt[147870]))
            (147900 call += actualAddCnt[147870] 1)
          }
          {
            (147905 call = ap[147952] ip[147945])
          }
        }
        label _continueLabel[147919]
        _indexOfInterest[147914]
        _iterator[147915]
      }
      label _breakLabel[147920]
    }
    (147971 return(147969 call _build_tuple actualInsertPts[147686] actualAddCnt[147870]))
  }
  function BaseSparseDomImpl[148004](?).dsiClear[147977](arg _mt[148044]:_MT[238], arg this[148042]:BaseSparseDomImpl[148004](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (147998 call halt "not implemented")
  }
  type BaseSparseDomImpl[148004](?) val super[355717]:BaseSparseDom[148708](?) "super class" unknown nnzDom[146964](146962 call chpl__buildDomainExpr(146959 call chpl_build_bounded_range 1 0))
  function SparseIndexBuffer[148231](?).init[148102](arg _mt[148235]:_MT[238], arg this[148233]:SparseIndexBuffer[148231](?), arg size[148100]:_any[178](?), param arg rank[148105] :
  int(64)[13], arg obj[148108]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148115 call =(148111 call . this[148233] c"rank") rank[148105])
    (148124 call =(148120 call . this[148233] c"obj") obj[148108])
    (148137 call =(385752 call . this[148233] c"bufDom")(148135 call chpl__buildDomainExpr(148132 call #(148129 call chpl_build_low_bounded_range 0) size[148100])))
  }
  function SparseIndexBuffer[148231](?).deinit[148144](arg _mt[148239]:_MT[238], arg this[148237]:SparseIndexBuffer[148231](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (148148 call(385759 call . this[148237] c"commit"))
  }
  function SparseIndexBuffer[148231](?).add[148159](arg _mt[148243]:_MT[238], arg this[148241]:SparseIndexBuffer[148231](?), arg idx[148156] :
  (385764 call . this[148241] c"idxType")) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148166 call =(148164 call(385769 call . this[148241] c"buf")(385776 call . this[148241] c"cur")) idx[148156])
    (148172 call +=(385782 call . this[148241] c"cur") 1)
    if(148186 call _cond_test(148180 call ==(385787 call . this[148241] c"cur")(148177 call .(360651 call . this[148241] c"buf") c"size")))
    {
      (148184 call(385791 call . this[148241] c"commit"))
    }
  }
  function SparseIndexBuffer[148231](?).commit[148195](arg _mt[148247]:_MT[238], arg this[148245]:SparseIndexBuffer[148231](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(148217 call _cond_test(148199 call >=(385796 call . this[148245] c"cur") 1))
    {
      (148215 call(148202 call .(360656 call . this[148245] c"obj") c"dsiBulkAdd")(148213 call(385801 call . this[148245] c"buf")(148210 call chpl_build_high_bounded_range(148208 call -(385806 call . this[148245] c"cur") 1))))
    }
    (148225 call =(385811 call . this[148245] c"cur") 0)
  }
  type SparseIndexBuffer[148231](?) unknown rank[148049] "param" int(64)[13] unknown obj[148054] BaseSparseDom[382296](?) unknown idxType[148070] "type variable"(148067 IfExpr (148060 call == rank[148049] 1) then
  { scopeless
    int(64)[13]
  } else
  { scopeless
    (148065 call * rank[148049] int(64)[13])
  } ) unknown bufDom[148078](148076 call chpl__buildDomainRuntimeType defaultDist[94053] 1) unknown buf[148089](148087 call chpl__buildArrayRuntimeType(148085 call chpl__ensureDomainExpr bufDom[148078]) idxType[148070]) unknown cur[148094] 0
  function BaseSparseDom[148708](?).getNNZ[148267](arg _mt[148712]:_MT[238], arg this[148710]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148289 call halt "nnz queried on base class")
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148708](?).deinit[148297](arg _mt[148716]:_MT[238], arg this[148714]:BaseSparseDom[148708](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseSparseDom[148708](?).dsiClear[148304](arg _mt[148720]:_MT[238], arg this[148718]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148325 call halt "clear not implemented for this distribution - BaseSparseDom")
  }
  function BaseSparseDom[148708](?).dsiBulkAdd[148343](arg _mt[148724]:_MT[238], arg this[148722]:BaseSparseDom[148708](?), arg inds[148340] :
  (148337 call chpl__buildArrayRuntimeType nil[44](148335 call chpl__buildIndexType(385816 call . this[148722] c"rank")(385821 call . this[148722] c"idxType"))), arg dataSorted[148346] =
  0, arg isUnique[148350] =
  0, arg preserveInds[148354] =
  1, arg addOn[148358] =
  nilLocale[89942]) : _unknown[51] "method" "primary method"
  {
    (148381 call halt "Bulk addition is not supported by this sparse domain")
    (148385 return 0)
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148708](?).boundsCheck[148400](arg _mt[148728]:_MT[238], arg this[148726]:BaseSparseDom[148708](?), arg ind[148397] :
  (148395 call chpl__buildIndexType(385827 call . this[148726] c"rank")(385832 call . this[148726] c"idxType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(148459 call _cond_test 1)
    {
      if(148454 call _cond_test(148411 call !(148410 call(148405 call .(360661 call . this[148726] c"parentDom") c"contains") ind[148397])))
      {
        (148452 call halt "Sparse domain/array index out of bounds: " ind[148397] " (expected to be within "(385840 call . this[148726] c"parentDom") ")")
      }
    }
  }
  { scopeless type
    void[4]
  }
  function BaseSparseDom[148708](?).dsiDim[148474](arg _mt[148732]:_MT[238], arg this[148730]:BaseSparseDom[148708](?), arg d[148471] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (148483 return(148482 call(148477 call .(360666 call . this[148730] c"parentDom") c"dim") d[148471]))
  }
  function BaseSparseDom[148708](?).dsiDims[148490](arg _mt[148736]:_MT[238], arg this[148734]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method"
  {
    (148498 return(148497 call(148493 call .(360671 call . this[148734] c"parentDom") c"dims")))
  }
  function BaseSparseDom[148708](?).dsiNumIndices[148505](arg _mt[148740]:_MT[238], arg this[148738]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148510 return(148509 call(385845 call . this[148738] c"getNNZ")))
  }
  function BaseSparseDom[148708](?).dsiSize[148517](arg _mt[148744]:_MT[238], arg this[148742]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148522 return(148521 call(385849 call . this[148742] c"getNNZ")))
  }
  function BaseSparseDom[148708](?).dsiLow[148529](arg _mt[148748]:_MT[238], arg this[148746]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148535 return(148532 call .(360676 call . this[148746] c"parentDom") c"low"))
  }
  function BaseSparseDom[148708](?).dsiHigh[148542](arg _mt[148752]:_MT[238], arg this[148750]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148548 return(148545 call .(360681 call . this[148750] c"parentDom") c"high"))
  }
  function BaseSparseDom[148708](?).dsiStride[148555](arg _mt[148756]:_MT[238], arg this[148754]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148561 return(148558 call .(360686 call . this[148754] c"parentDom") c"stride"))
  }
  function BaseSparseDom[148708](?).dsiAlignment[148568](arg _mt[148760]:_MT[238], arg this[148758]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148574 return(148571 call .(360691 call . this[148758] c"parentDom") c"alignment"))
  }
  function BaseSparseDom[148708](?).dsiFirst[148581](arg _mt[148764]:_MT[238], arg this[148762]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148602 call halt "dsiFirst is not implemented")
    const _tmp[148609] "const"(148607 call *(385854 call . this[148762] c"rank")(385859 call . this[148762] c"idxType"))
    (148612 'end of statement')
    (148614 return _tmp[148609])
  }
  function BaseSparseDom[148708](?).dsiLast[148620](arg _mt[148768]:_MT[238], arg this[148766]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148641 call halt "dsiLast not implemented")
    const _tmp[148648] "const"(148646 call *(385865 call . this[148766] c"rank")(385870 call . this[148766] c"idxType"))
    (148651 'end of statement')
    (148653 return _tmp[148648])
  }
  function BaseSparseDom[148708](?).dsiAlignedLow[148659](arg _mt[148772]:_MT[238], arg this[148770]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148665 return(148662 call .(360696 call . this[148770] c"parentDom") c"alignedLow"))
  }
  function BaseSparseDom[148708](?).dsiAlignedHigh[148672](arg _mt[148776]:_MT[238], arg this[148774]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148678 return(148675 call .(360701 call . this[148774] c"parentDom") c"alignedHigh"))
  }
  function BaseSparseDom[148708](?).dsiMakeIndexBuffer[148687](arg _mt[148780]:_MT[238], arg this[148778]:BaseSparseDom[148708](?), arg size[148685]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (148702 return(148689 'new'(148701 call SparseIndexBuffer[148231](?)(rank =(148692 call . this[148778] c"rank"))(obj = this[148778])(size = size[148685]))))
  }
  type BaseSparseDom[148708](?) val super[355715]:BaseDom[146767] "super class" unknown rank[148254] "param" int(64)[13] unknown idxType[148258] "type variable" unknown parentDom[148261]
  type BaseSparseDom[382296](?)
  function BaseAssociativeDom[148855].deinit[148788](arg _mt[148859]:_MT[238], arg this[148857]:BaseAssociativeDom[148855]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseAssociativeDom[148855].dsiClear[148795](arg _mt[148863]:_MT[238], arg this[148861]:BaseAssociativeDom[148855]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148816 call halt "clear not implemented for this distribution")
  }
  function BaseAssociativeDom[148855].dsiAdd[148825](arg _mt[148867]:_MT[238], arg this[148865]:BaseAssociativeDom[148855], in arg idx[148823]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (148846 call compilerError "Index addition is not supported by this domain")
    (148850 return 0)
  }
  type BaseAssociativeDom[148855] val super[355719]:BaseDom[146767] "super class"
  type BaseAssociativeDom[382291](?)
  function BaseArr[149584].chpl__rvfMe[148885](arg _mt[149588]:_MT[238], arg this[149586]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    (148888 return 0)
  }
  function BaseArr[149584].isSliceArrayView[148895](arg _mt[149592]:_MT[238], arg this[149590]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    (148898 return 0)
  }
  function BaseArr[149584].isRankChangeArrayView[148905](arg _mt[149596]:_MT[238], arg this[149594]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    (148908 return 0)
  }
  function BaseArr[149584].isReindexArrayView[148915](arg _mt[149600]:_MT[238], arg this[149598]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    (148918 return 0)
  }
  function BaseArr[149584].deinit[148925](arg _mt[149604]:_MT[238], arg this[149602]:BaseArr[149584]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseArr[149584].dsiStaticFastFollowCheck[148934](arg _mt[149608]:_MT[238], arg this[149606]:BaseArr[149584], arg leadType[148932]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    (148937 return 0)
  }
  function BaseArr[149584].dsiGetBaseDom[148944](arg _mt[149612]:_MT[238], arg this[149610]:BaseArr[149584]) : _unknown[51] "method" "primary method"
  {
    (148967 call halt "internal error: dsiGetBaseDom is not implemented")
    unknown ret[148972] "unsafe" unmanaged BaseDom[415448]
    (148975 'end of statement')
    (148977 return ret[148972])
  }
  { scopeless type
    unmanaged BaseDom[415448]
  }
  function BaseArr[149584].remove[148988](arg _mt[149616]:_MT[238], arg this[149614]:BaseArr[149584], param arg rmFromList[148985] :
  bool[10]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret_arr[148991] this[149614]
    (148994 'end of statement')
    unknown ret_dom[149000] nil[44] unmanaged BaseDom?[415508]
    (149003 'end of statement')
    unknown rm_dom[149005] 0
    (149008 'end of statement')
    unknown dom[149012](149011 call(385886 call . this[149614] c"dsiGetBaseDom"))
    (149015 'end of statement')
    (149030 call = rm_dom[149005](149029 call(149020 call . dom[149012] c"remove_arr")(149026 call _to_unmanaged this[149614]) rmFromList[148985]))
    if(149039 call _cond_test rm_dom[149005])
    {
      (149036 call = ret_dom[149000] dom[149012])
    }
    (149049 return(149047 call _build_tuple ret_arr[148991] ret_dom[149000]))
  }
  function BaseArr[149584].dsiElementInitializationComplete[149055](arg _mt[149620]:_MT[238], arg this[149618]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149076 call halt "dsiElementInitializationComplete must be defined")
  }
  function BaseArr[149584].dsiElementDeinitializationComplete[149083](arg _mt[149624]:_MT[238], arg this[149622]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149104 call halt "dsiElementDeinitializationComplete must be defined")
  }
  function BaseArr[149584].dsiDestroyArr[149115](arg _mt[149628]:_MT[238], arg this[149626]:BaseArr[149584], arg deinitElts[149112] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149136 call halt "dsiDestroyArr must be defined")
  }
  function BaseArr[149584].dsiReallocate[149147](arg _mt[149632]:_MT[238], arg this[149630]:BaseArr[149584], arg d[149144] :
  _domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149168 call halt "reallocating not supported for this array type")
  }
  function BaseArr[149584].dsiPostReallocate[149175](arg _mt[149636]:_MT[238], arg this[149634]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function BaseArr[149584]._purge[149186](arg _mt[149640]:_MT[238], arg this[149638]:BaseArr[149584], arg ind[149183] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149207 call halt "purging not supported for this array type")
  }
  function BaseArr[149584]._resize[149218](arg _mt[149644]:_MT[238], arg this[149642]:BaseArr[149584], arg length[149215] :
  int(64)[13], arg old_map[149220]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149241 call halt "resizing not supported for this array type")
  }
  function BaseArr[149584].sparseShiftArray[149250](arg _mt[149648]:_MT[238], arg this[149646]:BaseArr[149584], arg shiftrange[149248]:_any[178](?), arg initrange[149252]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149273 call halt "sparseGrowDomain not supported for non-sparse arrays")
  }
  function BaseArr[149584].sparseShiftArrayBack[149282](arg _mt[149652]:_MT[238], arg this[149650]:BaseArr[149584], arg shiftrange[149280]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149303 call halt "sparseShiftArrayBack not supported for non-sparse arrays")
  }
  function BaseArr[149584].sparseBulkShiftArray[149312](arg _mt[149656]:_MT[238], arg this[149654]:BaseArr[149584], arg shiftMap[149310]:_any[178](?), arg oldnnz[149314]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149335 call halt "sparseBulkShiftArray not supported for non-sparse arrays")
  }
  function BaseArr[149584]._defaultInitSlot[149346](arg _mt[149660]:_MT[238], arg this[149658]:BaseArr[149584], arg slot[149343] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149367 call halt "_defaultInitSlot() not supported for non-associative arrays")
  }
  function BaseArr[149584]._deinitSlot[149378](arg _mt[149664]:_MT[238], arg this[149662]:BaseArr[149584], arg slot[149375] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149399 call halt "_deinitSlot() not supported for non-associative arrays")
  }
  function BaseArr[149584]._startRehash[149410](arg _mt[149668]:_MT[238], arg this[149666]:BaseArr[149584], arg newSize[149407] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149431 call halt "_startRehash() not supported for non-associative arrays")
  }
  function BaseArr[149584]._finishRehash[149442](arg _mt[149672]:_MT[238], arg this[149670]:BaseArr[149584], arg oldSize[149439] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149463 call halt "_finishRehash() not supported for non-associative arrays")
  }
  function BaseArr[149584]._moveElementDuringRehash[149474](arg _mt[149676]:_MT[238], arg this[149674]:BaseArr[149584], arg oldslot[149471] :
  int(64)[13], arg newslot[149477] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149499 call halt "_moveElementDuringRehash() not supported for non-associative arrays")
  }
  function BaseArr[149584].dsiSupportsAlignedFollower[149506](arg _mt[149680]:_MT[238], arg this[149678]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    (149509 return 0)
  }
  function BaseArr[149584].dsiSupportsPrivatization[149516](arg _mt[149684]:_MT[238], arg this[149682]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    (149519 return 0)
  }
  function BaseArr[149584].dsiRequiresPrivatization[149526](arg _mt[149688]:_MT[238], arg this[149686]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    (149529 return 0)
  }
  function BaseArr[149584].dsiDisplayRepresentation[149536](arg _mt[149692]:_MT[238], arg this[149690]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149541 call writeln "<no way to display representation>")
  }
  function BaseArr[415346](?).isDefaultRectangular[149548](arg _mt[149696]:_MT[238], arg this[149694]:BaseArr[415346](?)) param : _unknown[51] "method" "primary method"
  {
    (149551 return 0)
  }
  function BaseArr[149584].isDefaultRectangular[149558](arg _mt[149700]:_MT[238], arg this[149698]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    (149561 return 0)
  }
  function BaseArr[149584].doiCanBulkTransferRankChange[149568](arg _mt[149704]:_MT[238], arg this[149702]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    (149571 return 0)
  }
  function BaseArr[149584].decEltCountsIfNeeded[149578](arg _mt[149708]:_MT[238], arg this[149706]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  type BaseArr[149584] val super[355707]:object[22] "super class" unknown pid[148873] nullPid[113718] int(64)[13] unknown _decEltRefCounts[148879] 0 bool[10]
  type unmanaged BaseArr?[415529]
  type BaseArr?[415526](?)
  type unmanaged BaseArr[415496]
  type BaseArr[415346](?)
  type BaseArr[382363](?)
  function AbsBaseArr[149740](?).decEltCountsIfNeeded[149719](arg _mt[149744]:_MT[238], arg this[149742]:AbsBaseArr[149740](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(149732 call _cond_test(385900 call . this[149742] c"_decEltRefCounts"))
    {
      (149729 call chpl_decRefCountsForDomainsInArrayEltTypes(149726 call _to_unmanaged this[149742])(385906 call . this[149742] c"eltType"))
    }
  }
  type AbsBaseArr[149740](?) val super[355721]:BaseArr[149584] "super class" unknown eltType[149714] "type variable"
  function BaseArrOverRectangularDom[149805](?).dsiReallocate[149780](arg _mt[149809]:_MT[238], arg this[149807]:BaseArrOverRectangularDom[149805](?), arg bounds[149777] :
  (149775 call *(385911 call . this[149807] c"rank")(149774 call range[64319](?)(385917 call . this[149807] c"idxType") bounded[64208](385922 call . this[149807] c"stridable")))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149785 call halt "reallocating not supported for this array type")
  }
  function BaseArrOverRectangularDom[149805](?).dsiPostReallocate[149792](arg _mt[149813]:_MT[238], arg this[149811]:BaseArrOverRectangularDom[149805](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
  }
  function BaseArrOverRectangularDom[149805](?).deinit[149799](arg _mt[149817]:_MT[238], arg this[149815]:BaseArrOverRectangularDom[149805](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  type BaseArrOverRectangularDom[149805](?) val super[355709]:BaseArr[149584] "super class" unknown rank[149751] "param" int(64)[13] unknown idxType[149755] "type variable" unknown stridable[149759] "param" bool[10]
  type BaseArrOverRectangularDom[385574](?)
  function BaseRectangularArr[149856](?).deinit[149828](arg _mt[149860]:_MT[238], arg this[149858]:BaseRectangularArr[149856](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseRectangularArr[149856](?).decEltCountsIfNeeded[149835](arg _mt[149864]:_MT[238], arg this[149862]:BaseRectangularArr[149856](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(149848 call _cond_test(385927 call . this[149862] c"_decEltRefCounts"))
    {
      (149845 call chpl_decRefCountsForDomainsInArrayEltTypes(149842 call _to_unmanaged this[149862])(385933 call . this[149862] c"eltType"))
    }
  }
  type BaseRectangularArr[149856](?) val super[355711]:BaseArrOverRectangularDom[149805](?) "super class" unknown eltType[149823] "type variable"
  function BaseSparseArr[149900](?).dsiGetBaseDom[149884](arg _mt[149904]:_MT[238], arg this[149902]:BaseSparseArr[149900](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (149887 return(385938 call . this[149902] c"dom"))
  }
  function BaseSparseArr[149900](?).deinit[149894](arg _mt[149908]:_MT[238], arg this[149906]:BaseSparseArr[149900](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  type BaseSparseArr[149900](?) val super[355723]:AbsBaseArr[149740](?) "super class" unknown rank[149871] "param" int(64)[13] unknown idxType[149875] "type variable" unknown dom[149878]
  function BaseSparseArrImpl[150571](?).init[149934](arg _mt[150575]:_MT[238], arg this[150573]:BaseSparseArrImpl[150571](?), arg eltType[149932]:_any[178](?), param arg rank[149937] :
  int(64)[13], arg idxType[149940]:_any[178](?), arg dom[149942]:_any[178](?), param arg initElts[149945] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149961 call(149949 call .(360710 call . this[150573] c"super") c"init")(eltType = eltType[149932])(rank = rank[149937])(idxType = idxType[149940])(dom = dom[149942]))
    (149983 call =(149965 call . this[150573] c"data")(149982 call(149975 call .(149972 call .(149969 call . this[150573] c"dom") c"nnzDom") c"buildArray") eltType[149932](initElts = initElts[149945])))
  }
  function BaseSparseArrImpl[150571](?).deinit[149990](arg _mt[150579]:_MT[238], arg this[150577]:BaseSparseArrImpl[150571](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseSparseArrImpl[150571](?).dsiElementInitializationComplete[149997](arg _mt[150583]:_MT[238], arg this[150581]:BaseSparseArrImpl[150571](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (150004 call(150000 call .(360717 call . this[150581] c"data") c"dsiElementInitializationComplete"))
  }
  function BaseSparseArrImpl[150571](?).dsiElementDeinitializationComplete[150011](arg _mt[150587]:_MT[238], arg this[150585]:BaseSparseArrImpl[150571](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (150018 call(150014 call .(360722 call . this[150585] c"data") c"dsiElementDeinitializationComplete"))
  }
  function BaseSparseArrImpl[150571](?).dsiDestroyArr[150029](arg _mt[150591]:_MT[238], arg this[150589]:BaseSparseArrImpl[150571](?), arg deinitElts[150026] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(150037 call _cond_test deinitElts[150026])
    {
      (150035 call _deinitElements(385951 call . this[150589] c"data"))
    }
  }
  function BaseSparseArrImpl[150571](?).IRV[150052](arg _mt[150595]:_MT[238], arg this[150593]:BaseSparseArrImpl[150571](?)) ref : _unknown[51] "method" "primary method" "no parens"
  {
    (150055 return(385959 call . this[150593] c"irv"))
  }
  function BaseSparseArrImpl[150571](?).sparseBulkShiftArray[150064](arg _mt[150599]:_MT[238], arg this[150597]:BaseSparseArrImpl[150571](?), arg shiftMap[150062]:_any[178](?), arg oldnnz[150066]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown newIdx[150069] int(64)[13]
    (150072 'end of statement')
    unknown prevNewIdx[150075] 1
    (150078 'end of statement')
    Forall {
      induction variables:
        
        unknown i[150108] "index var" "insert auto destroy"
      iterated expressions:
        (150097 call chpl_build_bounded_range(150088 call +(150084 call .(150081 call . shiftMap[150062] c"_dom") c"high") 1)(150094 call .(150091 call .(360728 call . this[150597] c"dom") c"nnzDom") c"high"))
      shadow variables:
      other variables
        forall body
      {
        (150104 call =(150102 call(385964 call . this[150597] c"data") i[150108])(385970 call . this[150597] c"irv"))
      }
    }
    {
      unknown _indexOfInterest[150231] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150232] "expr temp" "temp"
      (150290 'move' _iterator[150232](150142 call _build_tuple(150249 call _getIterator(150260 call chpl_direct_range_iter 1 oldnnz[150066](150256 call - 1)))(150276 call _getIterator(150263 call chpl_by(150271 call(150265 call .(150267 call . shiftMap[150062] c"_dom") c"dim") 0)(150274 call - 1)))))
      Defer
      {
        {
          (150320 call _freeIterator _iterator[150232])
        }
      }
      { scopeless type
        (150295 'move' _indexOfInterest[150231](150292 call iteratorIndex _iterator[150232]))
      }
      ForLoop[150233]
      {
        (150300 call _check_tuple_var_decl _indexOfInterest[150231] 2)
        unknown i[150306] "index var" "insert auto destroy"
        (150308 'move' i[150306](150304 call _indexOfInterest[150231] 0))
        unknown _newIdx[150313] "index var" "insert auto destroy"
        (150315 'move' _newIdx[150313](150311 call _indexOfInterest[150231] 1))
        {
          (150148 call = newIdx[150069](150147 call shiftMap[150062] _newIdx[150313]))
          (150160 call =(150155 call(385978 call . this[150597] c"data") newIdx[150069])(150159 call(385984 call . this[150597] c"data") i[150306]))
          {
            unknown _indexOfInterest[150182] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[150183] "expr temp" "temp"
            (150192 'move' _iterator[150183](150190 call _getIterator(150203 call chpl_direct_range_iter(150196 call + newIdx[150069] 1)(150200 call - prevNewIdx[150075] 1) 1)))
            Defer
            {
              {
                (150219 call _freeIterator _iterator[150183])
              }
            }
            { scopeless type
              (150208 'move' _indexOfInterest[150182](150205 call iteratorIndex _iterator[150183]))
            }
            ForLoop[150184]
            {
              unknown emptyIndex[150212] "index var" "insert auto destroy"
              (150214 'move' emptyIndex[150212] _indexOfInterest[150182])
              (150179 call =(150177 call(385990 call . this[150597] c"data") emptyIndex[150212])(385996 call . this[150597] c"irv"))
              label _continueLabel[150187]
              _indexOfInterest[150182]
              _iterator[150183]
            }
            label _breakLabel[150188]
          }
          (150228 call = prevNewIdx[150075] newIdx[150069])
        }
        label _continueLabel[150236]
        _indexOfInterest[150231]
        _iterator[150232]
      }
      label _breakLabel[150237]
    }
    {
      unknown _indexOfInterest[150343] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150344] "expr temp" "temp"
      (150353 'move' _iterator[150344](150351 call _getIterator(150361 call chpl_direct_range_iter 1(150358 call - prevNewIdx[150075] 1) 1)))
      Defer
      {
        {
          (150377 call _freeIterator _iterator[150344])
        }
      }
      { scopeless type
        (150366 'move' _indexOfInterest[150343](150363 call iteratorIndex _iterator[150344]))
      }
      ForLoop[150345]
      {
        unknown i[150370] "index var" "insert auto destroy"
        (150372 'move' i[150370] _indexOfInterest[150343])
        (150340 call =(150338 call(386006 call . this[150597] c"data") i[150370])(386012 call . this[150597] c"irv"))
        label _continueLabel[150348]
        _indexOfInterest[150343]
        _iterator[150344]
      }
      label _breakLabel[150349]
    }
  }
  function BaseSparseArrImpl[150571](?).sparseShiftArray[150390](arg _mt[150603]:_MT[238], arg this[150601]:BaseSparseArrImpl[150571](?), arg shiftrange[150388]:_any[178](?), arg initrange[150392]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150405] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150406] "expr temp" "temp"
      (150415 'move' _iterator[150406](150413 call _getIterator initrange[150392]))
      Defer
      {
        {
          (150431 call _freeIterator _iterator[150406])
        }
      }
      { scopeless type
        (150420 'move' _indexOfInterest[150405](150417 call iteratorIndex _iterator[150406]))
      }
      ForLoop[150407]
      {
        unknown i[150424] "index var" "insert auto destroy"
        (150426 'move' i[150424] _indexOfInterest[150405])
        {
          (150401 call =(150399 call(386019 call . this[150601] c"data") i[150424])(386025 call . this[150601] c"irv"))
        }
        label _continueLabel[150410]
        _indexOfInterest[150405]
        _iterator[150406]
      }
      label _breakLabel[150411]
    }
    {
      unknown _indexOfInterest[150461] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150462] "expr temp" "temp"
      (150471 'move' _iterator[150462](150469 call _getIterator(150444 call chpl_by shiftrange[150388](150442 call - 1))))
      Defer
      {
        {
          (150491 call _freeIterator _iterator[150462])
        }
      }
      { scopeless type
        (150480 'move' _indexOfInterest[150461](150477 call iteratorIndex _iterator[150462]))
      }
      ForLoop[150463]
      {
        unknown i[150484] "index var" "insert auto destroy"
        (150486 'move' i[150484] _indexOfInterest[150461])
        {
          (150457 call =(150452 call(386031 call . this[150601] c"data")(150449 call + i[150484] 1))(150456 call(386037 call . this[150601] c"data") i[150484]))
        }
        label _continueLabel[150466]
        _indexOfInterest[150461]
        _iterator[150462]
      }
      label _breakLabel[150467]
    }
    (150506 call =(150504 call(386043 call . this[150601] c"data")(150500 call . shiftrange[150388] c"low"))(386048 call . this[150601] c"irv"))
  }
  function BaseSparseArrImpl[150571](?).sparseShiftArrayBack[150515](arg _mt[150607]:_MT[238], arg this[150605]:BaseSparseArrImpl[150571](?), arg shiftrange[150513]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150534] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150535] "expr temp" "temp"
      (150544 'move' _iterator[150535](150542 call _getIterator shiftrange[150513]))
      Defer
      {
        {
          (150560 call _freeIterator _iterator[150535])
        }
      }
      { scopeless type
        (150549 'move' _indexOfInterest[150534](150546 call iteratorIndex _iterator[150535]))
      }
      ForLoop[150536]
      {
        unknown i[150553] "index var" "insert auto destroy"
        (150555 'move' i[150553] _indexOfInterest[150534])
        {
          (150530 call =(150522 call(386054 call . this[150605] c"data") i[150553])(150529 call(386060 call . this[150605] c"data")(150526 call + i[150553] 1)))
        }
        label _continueLabel[150539]
        _indexOfInterest[150534]
        _iterator[150535]
      }
      label _breakLabel[150540]
    }
  }
  type BaseSparseArrImpl[150571](?) val super[355725]:BaseSparseArr[149900](?) "super class" unknown data[149926] "local field" "unsafe"(149924 call chpl__buildArrayRuntimeType(149922 call chpl__ensureDomainExpr(149917 call . dom[149878] c"nnzDom")) eltType[149714]) unknown irv[150046] eltType[149714]
  function _delete_dist[150617](arg dist[150614] :
  unmanaged BaseDist[415511], arg privatized[150620] :
  bool[10]) : _unknown[51] "no return value for void"
  {
    (150630 call(150626 call . dist[150614] c"dsiDestroyDist"))
    if(150647 call _cond_test(150635 call && 1 privatized[150620]))
    {
      (150644 call _freePrivatizedClass(150639 call . dist[150614] c"pid") dist[150614])
    }
    (150653 call chpl__delete dist[150614])
  }
  function _delete_dom[150662](arg dom[150660]:_any[178](?), arg privatized[150665] :
  bool[10]) : _unknown[51] "no return value for void"
  {
    (150675 call(150671 call . dom[150660] c"dsiDestroyDom"))
    if(150692 call _cond_test(150680 call && 1 privatized[150665]))
    {
      (150689 call _freePrivatizedClass(150684 call . dom[150660] c"pid") dom[150660])
    }
    (150698 call chpl__delete dom[150660])
  }
  function _delete_arr[150710](arg arr[150707] :
  unmanaged BaseArr[415496], param arg privatized[150713] :
  bool[10], arg deinitElts[150717] =
  1) : _unknown[51] "no return value for void"
  {
    (150729 call(150723 call . arr[150707] c"dsiDestroyArr")(deinitElts = deinitElts[150717]))
    (150739 call(150735 call . arr[150707] c"decEltCountsIfNeeded"))
    if(150755 call _cond_test(150743 call && 1 privatized[150713]))
    {
      (150752 call _freePrivatizedClass(150747 call . arr[150707] c"pid") arr[150707])
    }
    (150761 call chpl__delete arr[150707])
  }
  function chpl_assignDomainWithGetSetIndices[150773](arg lhs[150770] :
  unknown t[150768], arg rhs[150776] :
  _domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown arrType[150795] "type variable"(150794 call(150790 call . lhs[150770] c"getBaseArrType"))
    unknown rank[150803] "param"(150800 call . lhs[150770] c"rank")
    (150806 'end of statement')
    unknown idxType[150811] "type variable"(150808 call . lhs[150770] c"idxType")
    unknown stridable[150818] "param"(150815 call . lhs[150770] c"stridable")
    (150821 'end of statement')
    {
      unknown _indexOfInterest[151021] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151022] "expr temp" "temp"
      (151031 'move' _iterator[151022](151029 call _getIterator(150824 call . lhs[150770] c"_arrs")))
      Defer
      {
        {
          (151048 call _freeIterator _iterator[151022])
        }
      }
      { scopeless type
        (151037 'move' _indexOfInterest[151021](151034 call iteratorIndex _iterator[151022]))
      }
      ForLoop[151023]
      {
        unknown e[151041] "index var" "insert auto destroy"
        (151043 'move' e[151041] _indexOfInterest[151021])
        {
          const tmp[151012] "const" "temp"
          (151014 'move' tmp[151012](151010 'deref'(151009 '_wide_get_locale' e[151041])))
          {
            {
              unknown eCastQ[150833](150831 call _cast(150830 'to nilable class from type' arrType[150795]) e[151041])
              (150836 'end of statement')
              if(150888 call _cond_test(150840 call == eCastQ[150833] nil[44]))
              {
                (150886 call halt "internal error: "(150863 call _cast string[26] t[150768]) " contains an bad array type "(150884 call _cast string[26] arrType[150795]))
              }
              unknown eCast[150896](150894 call postfix! eCastQ[150833])
              (150899 'end of statement')
              unknown inds[150906](150905 call(150901 call . rhs[150776] c"getIndices"))
              (150909 'end of statement')
              unknown tmp[150922](150920 call * rank[150803](150919 call range[64319](?) idxType[150811] bounded[64208] stridable[150818]))
              (150925 'end of statement')
              {
                unknown i[150964] 0
                unknown tmp[150965] "maybe param" "temp"
                (150977 'move' tmp[150965](150975 call chpl_compute_low_param_loop_bound 0(150929 call - rank[150803] 1)))
                unknown tmp[150966] "maybe param" "temp"
                (150987 'move' tmp[150966](150985 call chpl_compute_high_param_loop_bound 0(150982 call - rank[150803] 1)))
                unknown tmp[150967] "maybe param" "temp"
                (150990 'move' tmp[150967] 1)
                ParamForLoop[150992]
                { i[150964] tmp[150965] tmp[150966] tmp[150967]
                  {
                    unknown from[150937](150936 call inds[150906] i[150964])
                    (150940 'end of statement')
                    (150961 call =(150945 call tmp[150922] i[150964])(150960 call(150947 call . from[150937] c"safeCast")(150958 call range[64319](?) idxType[150811] bounded[64208] stridable[150818])))
                  }
                }
                label _unused_continueLabel[150969]
                label _breakLabel[150968]
              }
              (151007 call(151002 call . eCast[150896] c"dsiReallocate") tmp[150922])
            }
            (151017 'on block' 0 tmp[151012])
          }
        }
        label _continueLabel[151026]
        _indexOfInterest[151021]
        _iterator[151022]
      }
      label _breakLabel[151027]
    }
    (151066 call(151056 call . lhs[150770] c"dsiSetIndices")(151064 call(151060 call . rhs[150776] c"getIndices")))
    {
      unknown _indexOfInterest[151109] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151110] "expr temp" "temp"
      (151119 'move' _iterator[151110](151117 call _getIterator(151070 call . lhs[150770] c"_arrs")))
      Defer
      {
        {
          (151136 call _freeIterator _iterator[151110])
        }
      }
      { scopeless type
        (151125 'move' _indexOfInterest[151109](151122 call iteratorIndex _iterator[151110]))
      }
      ForLoop[151111]
      {
        unknown e[151129] "index var" "insert auto destroy"
        (151131 'move' e[151129] _indexOfInterest[151109])
        {
          unknown eCastQ[151078](151076 call _cast(151075 'to nilable class from type' arrType[150795]) e[151129])
          (151081 'end of statement')
          unknown eCast[151086](151084 call postfix! eCastQ[151078])
          (151089 'end of statement')
          const tmp[151101] "const" "temp"
          (151103 'move' tmp[151101](151099 'deref'(151098 '_wide_get_locale' e[151129])))
          {
            (151096 call(151092 call . eCast[151086] c"dsiPostReallocate"))
            (151106 'on block' 0 tmp[151101])
          }
        }
        label _continueLabel[151114]
        _indexOfInterest[151109]
        _iterator[151110]
      }
      label _breakLabel[151115]
    }
    if(151155 call _cond_test(151148 call(151144 call . lhs[150770] c"dsiSupportsPrivatization")))
    {
      (151152 call _reprivatize lhs[150770])
    }
  }
  where {
    (354373 'is_subtype' BaseRectangularDom[382286](?)(150783 call _to_borrowed t[150768]))
  }
  function chpl_assignDomainWithIndsIterSafeForRemoving[151169](arg lhs[151166] :
  unknown t[151164], arg rhs[151172] :
  _domain[125908](?)) : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[151225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151226] "expr temp" "temp"
      (151235 'move' _iterator[151226](151233 call _getIterator(151201 call(151197 call . lhs[151166] c"dsiIndsIterSafeForRemoving"))))
      Defer
      {
        {
          (151252 call _freeIterator _iterator[151226])
        }
      }
      { scopeless type
        (151241 'move' _indexOfInterest[151225](151238 call iteratorIndex _iterator[151226]))
      }
      ForLoop[151227]
      {
        unknown i[151245] "index var" "insert auto destroy"
        (151247 'move' i[151245] _indexOfInterest[151225])
        {
          if(151220 call _cond_test(151209 call !(151208 call(151203 call . rhs[151172] c"contains") i[151245])))
          {
            (151217 call(151212 call . lhs[151166] c"dsiRemove") i[151245])
          }
        }
        label _continueLabel[151230]
        _indexOfInterest[151225]
        _iterator[151226]
      }
      label _breakLabel[151231]
    }
    {
      unknown _indexOfInterest[151285] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151286] "expr temp" "temp"
      (151295 'move' _iterator[151286](151293 call _getIterator rhs[151172]))
      Defer
      {
        {
          (151311 call _freeIterator _iterator[151286])
        }
      }
      { scopeless type
        (151300 'move' _indexOfInterest[151285](151297 call iteratorIndex _iterator[151286]))
      }
      ForLoop[151287]
      {
        unknown i[151304] "index var" "insert auto destroy"
        (151306 'move' i[151304] _indexOfInterest[151285])
        {
          if(151280 call _cond_test(151269 call !(151268 call(151263 call . lhs[151166] c"dsiMember") i[151304])))
          {
            (151277 call(151272 call . lhs[151166] c"dsiAdd") i[151304])
          }
        }
        label _continueLabel[151290]
        _indexOfInterest[151285]
        _iterator[151286]
      }
      label _breakLabel[151291]
    }
  }
  where {
    (151191 call ||(354374 'is_subtype' BaseSparseDom[382296](?)(151179 call _to_borrowed t[151164]))(354375 'is_subtype' BaseAssociativeDom[382291](?)(151187 call _to_borrowed t[151164])))
  }
  (355169 'used modules list'(145460 'use' ChapelArray[113678])(145462 'use' ChapelRange[64183])(145465 'use' ChapelLocks[187302])(145468 'use' ChapelHashtable[200446]))
}