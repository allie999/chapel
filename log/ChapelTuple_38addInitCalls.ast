AST dump for ChapelTuple after pass addInitCalls.
Module use list: ChapelStandard DSIUtil 

{
  function chpl__init_ChapelTuple[415986]() : void[4] "fast on" "insert line file info" "local fn" "module init" "resolved"
  {
    if chpl__init_ChapelTuple_p[2400916]
    {
      goto _exit_chpl__init_ChapelTuple[2400953] _exit_chpl__init_ChapelTuple[2400953]
    }
    val modFormatStr[2400924]:c_string[19] "temp"
    val modStr[2400925]:c_string[19] "temp"
    ref refIndentLevel[2400939]:int(32)[95] "temp"
    (2400932 'move' modFormatStr[2400924] c"%*s\n")
    (2400934 'move' modStr[2400925] c"ChapelTuple")
    (2400937 call printModuleInit[20429] modFormatStr[2400924] modStr[2400925] 11)
    (2400943 'move' refIndentLevel[2400939](2400942 'addr of' moduleInitLevel[20419]))
    (2400946 '+=' refIndentLevel[2400939] 1)
    (2400922 'move' chpl__init_ChapelTuple_p[2400916] 1)
    {
      (2399980 call chpl__init_DSIUtil[416148])
    }
    (2400949 '-=' refIndentLevel[2400939] 1)
    label _endchpl__init_ChapelTuple[2400955]
    label _exit_chpl__init_ChapelTuple[2400953]
    (509015 return _void[55])
  }
  function 57*int(64)[1210504]._local_this[2341107](ref arg this[2341109]:57*int(64)[1210504], const in arg i[2341111]:int(64)[13]) ref : _ref(int(64))[936591] "instantiated generic" "invisible fn" "local fn" "method" "no doc" "reference to const when const this" "resolved" "star tuple accessor"
  {
    const-val local__str_literal_779[2341114]:string[26] "temp"
    (2341116 'move' local__str_literal_779[2341114] "tuple access out of bounds: ")
    const-val call_tmp[2341119]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2341121 'move' call_tmp[2341119](2341123 '<' i[2341111] 0))
    val tmp[2341126]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
    if call_tmp[2341119]
    {
      (2341130 'move' tmp[2341126] 1)
    }
    {
      const-val call_tmp[2341134]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2341136 'move' call_tmp[2341134](2341138 '>' i[2341111] 56))
      (2341141 'move' tmp[2341126] call_tmp[2341134])
    }
    if tmp[2341126]
    {
      (2341148 call _local_halt[2343758] local__str_literal_779[2341114] i[2341111])
    }
    ref call_tmp[2341152]:int(64)[13] "dead after last mention" "maybe param" "temp"
    (2341154 'move' call_tmp[2341152](2341156 'get svec member' this[2341109] i[2341111]))
    (2341159 return call_tmp[2341152])
  }
  function 57*int(64)[1210504].this[1211622](ref arg this[1211628]:57*int(64)[1210504], const in arg i[1211630]:int(64)[13]) ref : _ref(int(64))[936591] "instantiated generic" "invisible fn" "method" "no doc" "reference to const when const this" "resolved" "star tuple accessor"
  {
    const-val local__str_literal_779[2331549]:string[26] "temp"
    (2331550 'move' "tuple access out of bounds: " "tuple access out of bounds: ")
    const-val call_tmp[2079866]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2079868 'move' call_tmp[2079866](2079870 '<' i[1211630] 0))
    val tmp[1211699]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
    if call_tmp[2079866]
    {
      (1211717 'move' tmp[1211699] 1)
    }
    {
      const-val call_tmp[2087961]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2087963 'move' call_tmp[2087961](2087965 '>' i[1211630] 56))
      (1211754 'move' tmp[1211699] call_tmp[2087961])
    }
    if tmp[1211699]
    {
      (1211770 call halt[1212271] "tuple access out of bounds: " i[1211630])
    }
    ref call_tmp[1211775]:int(64)[13] "dead after last mention" "maybe param" "temp"
    (1211777 'move' call_tmp[1211775](1211779 'get svec member' this[1211628] i[1211630]))
    (1211786 return call_tmp[1211775])
  }
  function 1*range(int(64),bounded,false)[1244715].this[1382675](wide-ref arg this[1382681]:1*range(int(64),bounded,false)[1244715], const in arg i[1382683]:int(64)[13]) ref : __wide__ref_range_int64_t_bounded_F[2334773] "instantiated generic" "invisible fn" "method" "no doc" "reference to const when const this" "resolved" "fn synchronization free" "star tuple accessor"
  {
    const-val local__str_literal_779[2332141]:string[26] "temp"
    (2332142 'move' "tuple access out of bounds: " "tuple access out of bounds: ")
    const-val call_tmp[2079916]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2079918 'move' call_tmp[2079916](2079920 '<' i[1382683] 0))
    val tmp[1382752]:bool[10] "dead after last mention" "expr temp" "if-expr result" "insert auto destroy" "temp"
    if call_tmp[2079916]
    {
      (1382770 'move' tmp[1382752] 1)
    }
    {
      const-val call_tmp[2088321]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2088323 'move' call_tmp[2088321](2088325 '>' i[1382683] 0))
      (1382807 'move' tmp[1382752] call_tmp[2088321])
    }
    if tmp[1382752]
    {
      (1382823 call halt[1212271] "tuple access out of bounds: " i[1382683])
    }
    wide-ref call_tmp[1382828]:range(int(64),bounded,false)[1026833] "dead after last mention" "maybe param" "temp"
    (1382830 'move' call_tmp[1382828](1382832 'get svec member' this[1382681] i[1382683]))
    (1382839 return call_tmp[1382828])
  }
  function 1*range(int(64),bounded,false)[1244715].indices[1746061](const  wide-ref arg this[1746067]:1*range(int(64),bounded,false)[1244715], ref arg _retArg[1814604]:range(int(64),bounded,false)[1026833]) : void[4] "fn returns via _retArg" "instantiated generic" "invisible fn" "method" "no parens" "resolved"
  {
    const-val call_tmp[1746093]:range(int(64),bounded,false)[1026833] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val ret_tmp[1805152]:range(int(64),bounded,false)[1026833] "temp"
    (1746098 call chpl_build_bounded_range[455175] 0 0 ret_tmp[1805152])
    (1805155 'move' call_tmp[1746093] ret_tmp[1805152])
    (1814606 '=' _retArg[1814604] call_tmp[1746093])
    (1814608 return _void[55])
  }
  type (c_ptr(uint(8)),int(64))[955227] val x0[955223]:c_ptr(uint(8))[937442] val x1[955225]:int(64)[13]
  type (syserr,int(32),int(32))[964639] val x0[964633]:syserr[223603] val x1[964635]:int(32)[95] val x2[964637]:int(32)[95]
  type 6*string[985070] const-ref x0[985058]:string[26] const-ref x1[985060]:string[26] const-ref x2[985062]:string[26] const-ref x3[985064]:string[26] const-ref x4[985066]:string[26] const-ref x5[985068]:string[26]
  type 6*string[985236] val x0[985224]:string[26] val x1[985226]:string[26] val x2[985228]:string[26] val x3[985230]:string[26] val x4[985232]:string[26] val x5[985234]:string[26]
  type 2*int(64)[1040075] val x0[1040071]:int(64)[13] val x1[1040073]:int(64)[13]
  type 1*byteIndex[1057100] wide-ref x0[1057098]:byteIndex[28173]
  type (range(int(64),bounded,false),int(64))[1084943] val x0[1084939]:range(int(64),bounded,false)[1026833] val x1[1084941]:int(64)[13]
  type (byteIndex,int(64))[1121252] const-ref x0[1121248]:byteIndex[28173] val x1[1121250]:int(64)[13]
  type (int(32),byteIndex,int(64))[1122161] val x0[1122155]:int(32)[95] const-ref x1[1122157]:byteIndex[28173] val x2[1122159]:int(64)[13]
  type (string,codepointIndex,string)[1158574] wide-ref x0[1158568]:string[26] wide-ref x1[1158570]:codepointIndex[28277] wide-ref x2[1158572]:string[26]
  type (string,codepointIndex,string,int(64))[1176539] wide-ref x0[1176531]:string[26] wide-ref x1[1176533]:codepointIndex[28277] wide-ref x2[1176535]:string[26] val x3[1176537]:int(64)[13]
  type 57*int(64)[1210504] val x0[1210390]:int(64)[13] val x1[1210392]:int(64)[13] val x2[1210394]:int(64)[13] val x3[1210396]:int(64)[13] val x4[1210398]:int(64)[13] val x5[1210400]:int(64)[13] val x6[1210402]:int(64)[13] val x7[1210404]:int(64)[13] val x8[1210406]:int(64)[13] val x9[1210408]:int(64)[13] val x10[1210410]:int(64)[13] val x11[1210412]:int(64)[13] val x12[1210414]:int(64)[13] val x13[1210416]:int(64)[13] val x14[1210418]:int(64)[13] val x15[1210420]:int(64)[13] val x16[1210422]:int(64)[13] val x17[1210424]:int(64)[13] val x18[1210426]:int(64)[13] val x19[1210428]:int(64)[13] val x20[1210430]:int(64)[13] val x21[1210432]:int(64)[13] val x22[1210434]:int(64)[13] val x23[1210436]:int(64)[13] val x24[1210438]:int(64)[13] val x25[1210440]:int(64)[13] val x26[1210442]:int(64)[13] val x27[1210444]:int(64)[13] val x28[1210446]:int(64)[13] val x29[1210448]:int(64)[13] val x30[1210450]:int(64)[13] val x31[1210452]:int(64)[13] val x32[1210454]:int(64)[13] val x33[1210456]:int(64)[13] val x34[1210458]:int(64)[13] val x35[1210460]:int(64)[13] val x36[1210462]:int(64)[13] val x37[1210464]:int(64)[13] val x38[1210466]:int(64)[13] val x39[1210468]:int(64)[13] val x40[1210470]:int(64)[13] val x41[1210472]:int(64)[13] val x42[1210474]:int(64)[13] val x43[1210476]:int(64)[13] val x44[1210478]:int(64)[13] val x45[1210480]:int(64)[13] val x46[1210482]:int(64)[13] val x47[1210484]:int(64)[13] val x48[1210486]:int(64)[13] val x49[1210488]:int(64)[13] val x50[1210490]:int(64)[13] val x51[1210492]:int(64)[13] val x52[1210494]:int(64)[13] val x53[1210496]:int(64)[13] val x54[1210498]:int(64)[13] val x55[1210500]:int(64)[13] val x56[1210502]:int(64)[13]
  type 1*range(int(64),bounded,false)[1244715] val x0[1244713]:range(int(64),bounded,false)[1026833]
  type 1*int(64)[1256544] val x0[1256542]:int(64)[13]
  type (bool,int(64))[1265151] val x0[1265147]:bool[10] val x1[1265149]:int(64)[13]
  type (string,ioNewline)[1389119] wide-ref x0[1389115]:string[26] wide-ref x1[1389117]:ioNewline[238720]
  type (real(64),ioNewline)[1398991] val x0[1398987]:real(64)[16] wide-ref x1[1398989]:ioNewline[238720]
  type (BaseArr,unmanaged BaseDom?)[1418084] val x0[1418080]:__wide_BaseArr[2333447] val x1[1418082]:__wide_BaseDom[2333440]
  type (unmanaged BaseDom?,unmanaged BaseDist?)[1418878] val x0[1418874]:__wide_BaseDom[2333440] val x1[1418876]:__wide_BaseDist[2333433]
}