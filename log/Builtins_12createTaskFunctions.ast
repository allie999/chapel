AST dump for Builtins after pass createTaskFunctions.
Module use list: ChapelStandard IO 

{
  function chpl__init_Builtins[416003]() : void[4] "insert line file info" "module init"
  {
    (527749 return _void[55])
  }
  function assert[210257](arg test[210254]:bool[10]) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704673] "expr temp" "maybe param" "maybe type" "temp"
    (704676 'move' call_tmp[704673](210260 call ! test[210254]))
    unknown call_tmp[704678] "expr temp" "maybe param" "maybe type" "temp"
    (704681 'move' call_tmp[704678](210269 call _cond_test call_tmp[704673]))
    if call_tmp[704678]
    {
      (210267 'chpl_error' c"assert failed")
    }
    (527727 return _void[55])
  }
  function assert[210284](arg test[210281]:bool[10], arg args[210288]:_any[178](?) ...) : _unknown[51] "always propagate line file info" "insert line file info" "no return value for void"
  {
    unknown call_tmp[704683] "expr temp" "maybe param" "maybe type" "temp"
    (704686 'move' call_tmp[704683](210297 call ! test[210281]))
    unknown call_tmp[704688] "expr temp" "maybe param" "maybe type" "temp"
    (704691 'move' call_tmp[704688](210338 call _cond_test call_tmp[704683]))
    if call_tmp[704688]
    {
      unknown call_tmp[704693] "expr temp" "maybe param" "maybe type" "temp"
      (704696 'move' call_tmp[704693](210320 call stringify(210318 'expand_tuple' args[210288])))
      unknown call_tmp[704698] "maybe param" "maybe type" "temp"
      (704701 'move' call_tmp[704698](210321 call + "assert failed - " call_tmp[704693]))
      unknown tmpstring[210323] "dead at end of block" "insert auto destroy"
      (545925 'init var' tmpstring[210323] call_tmp[704698])
      (210326 'end of statement')
      unknown call_tmp[704705] "expr temp" "maybe param" "maybe type" "temp"
      (704708 'move' call_tmp[704705](210335 call(210331 call (partial) c_str _mt[243] tmpstring[210323])))
      (210336 'chpl_error' call_tmp[704705])
      (485856 'end of statement' tmpstring[210323])
    }
    (527729 return _void[55])
    (355193 'used modules list'(210293 'use' IO[230803] 'only' stringify))
  }
  function compilerError[210353](param arg msg[210349]:string[26] ..., param arg errorDepth[210356]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210377 'error')
    (527731 return _void[55])
  }
  function compilerError[210391](param arg msg[210387]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210395 'error')
    (527733 return _void[55])
  }
  function compilerWarning[210409](param arg msg[210405]:string[26] ..., param arg errorDepth[210412]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    (210433 'warning')
    (527735 return _void[55])
  }
  function compilerWarning[210447](param arg msg[210443]:string[26] ...) : _unknown[51] "no return value for void"
  {
    (210451 'warning')
    (527737 return _void[55])
  }
  function compilerAssert[210462](param arg test[210459]:bool[10]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704710] "expr temp" "maybe param" "maybe type" "temp"
    (704713 'move' call_tmp[704710](210465 call ! test[210459]))
    unknown call_tmp[704715] "expr temp" "maybe param" "maybe type" "temp"
    (704718 'move' call_tmp[704715](210486 call _cond_test call_tmp[704710]))
    if call_tmp[704715]
    {
      (210484 call compilerError "assert failed")
    }
    (527739 return _void[55])
  }
  function compilerAssert[210500](param arg test[210497]:bool[10], param arg errorDepth[210503]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704720] "expr temp" "maybe param" "maybe type" "temp"
    (704723 'move' call_tmp[704720](210507 call ! test[210497]))
    unknown call_tmp[704725] "expr temp" "maybe param" "maybe type" "temp"
    (704728 'move' call_tmp[704725](210518 call _cond_test call_tmp[704720]))
    if call_tmp[704725]
    {
      unknown call_tmp[704730] "expr temp" "maybe param" "maybe type" "temp"
      (704733 'move' call_tmp[704730](210514 call + errorDepth[210503] 1))
      (210516 call compilerError "assert failed" call_tmp[704730])
    }
    (527741 return _void[55])
  }
  function compilerAssert[210532](param arg test[210529]:bool[10], param arg msg[210537]:string[26] ...) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704735] "expr temp" "maybe param" "maybe type" "temp"
    (704738 'move' call_tmp[704735](210542 call ! test[210529]))
    unknown call_tmp[704740] "expr temp" "maybe param" "maybe type" "temp"
    (704743 'move' call_tmp[704740](210551 call _cond_test call_tmp[704735]))
    if call_tmp[704740]
    {
      (210549 call compilerError "assert failed - "(210548 'expand_tuple' msg[210537]))
    }
    (527743 return _void[55])
  }
  function compilerAssert[210565](param arg test[210562]:bool[10], param arg msg[210570]:string[26] ..., param arg errorDepth[210575]:int(64)[13]) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[704745] "expr temp" "maybe param" "maybe type" "temp"
    (704748 'move' call_tmp[704745](210579 call ! test[210562]))
    unknown call_tmp[704750] "expr temp" "maybe param" "maybe type" "temp"
    (704753 'move' call_tmp[704750](210592 call _cond_test call_tmp[704745]))
    if call_tmp[704750]
    {
      unknown call_tmp[704755] "expr temp" "maybe param" "maybe type" "temp"
      (704758 'move' call_tmp[704755](210588 call + errorDepth[210575] 1))
      (210590 call compilerError "assert failed - "(210585 'expand_tuple' msg[210570]) call_tmp[704755])
    }
    (527745 return _void[55])
  }
  function exit[210608](arg status[210604]:int(64)[13] =
  0) : _unknown[51] "function terminates program" "inline" "no return value for void"
  {
    (210629 'chpl_exit_any' status[210604])
    (527747 return _void[55])
  }
  (355191 'used modules list'(352908 'use' ChapelStandard[20264]))
}