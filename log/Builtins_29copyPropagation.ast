AST dump for Builtins after pass copyPropagation.
Module use list: ChapelStandard IO 

{
  function chpl__init_Builtins[416135]() : void[4] "insert line file info" "module init" "resolved"
  {
    (527895 return _void[55])
  }
  function assert[210365](const in arg test[210362]:bool[10]) : void[4] "always propagate line file info" "insert line file info" "resolved" "fn synchronization free" "no return value for void"
  {
    const-val call_tmp[2175737]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2175739 'move' call_tmp[2175737](2175741 '!' test[210362]))
    if call_tmp[2175737]
    {
      (210375 'chpl_error' c"assert failed")
    }
    (527873 return _void[55])
  }
  function assert[1430742](const in arg test[1430744]:bool[10], const  ref arg _e0_args[1430746]:string[26]) : void[4] "always propagate line file info" "expanded varargs" "insert line file info" "instantiated generic" "invisible fn" "resolved" "no return value for void"
  {
    const-val call_tmp[2176214]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2176216 'move' call_tmp[2176214](2176218 '!' test[1430744]))
    if call_tmp[2176214]
    {
      const-val call_tmp[1430771]:string[26] "dead at end of block" "expr temp" "insert auto destroy" "maybe param" "temp"
      const-val ret_tmp[1872593]:string[26] "temp"
      (1430776 call stringify[1430810] _e0_args[1430746] ret_tmp[1872593])
      (1872596 'move' call_tmp[1430771] ret_tmp[1872593])
      const-val call_tmp[1430778]:string[26] "dead at end of block" "maybe param" "temp"
      const-val ret_tmp[1863856]:string[26] "temp"
      (1430783 call +[38345] "assert failed - " call_tmp[1430771] ret_tmp[1863856])
      (1863859 'move' call_tmp[1430778] ret_tmp[1863856])
      const-val tmpstring[1430786]:string[26] "dead at end of block" "insert auto destroy"
      (1430788 'move' tmpstring[1430786] call_tmp[1430778])
      const-val coerce_tmp[2215677]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2215679 'move' coerce_tmp[2215677](2215681 '.v' tmpstring[1430786] locale_id[30757]))
      const-val call_tmp[2215684]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2215686 'move' call_tmp[2215684](2215688 '!=' coerce_tmp[2215677] chpl_nodeID[208207]))
      if call_tmp[2215684]
      {
        (2215694 call halt[154111] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2215697]:c_ptr(uint(8))[937484] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2215699 'move' coerce_tmp[2215697](2215701 '.v' tmpstring[1430786] buff[30740]))
      const-val call_tmp[2215704]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2215706 'move' call_tmp[2215704](2215708 'cast' c_string[19] coerce_tmp[2215697]))
      (1430801 'chpl_error' call_tmp[2215704])
      ref i_x[2196247]:string[26] "temp"
      (2196251 'move' i_x[2196247](2196249 'set reference' tmpstring[1430786]))
      (2196255 call deinit[30834] i_x[2196247])
      ref i_x[2196259]:string[26] "temp"
      (2196263 'move' i_x[2196259](2196261 'set reference' call_tmp[1430771]))
      (2196267 call deinit[30834] i_x[2196259])
    }
    (1430806 return _void[55])
  }
  function assert[1454284](const in arg test[1454286]:bool[10], const  ref arg _e0_args[1454288]:string[26], const in arg _e1_args[1454290]:uint(64)[115], const  ref arg _e2_args[1454292]:string[26], const in arg _e3_args[1454294]:int(64)[13]) : void[4] "always propagate line file info" "expanded varargs" "insert line file info" "instantiated generic" "invisible fn" "resolved" "no return value for void"
  {
    const-val call_tmp[2176250]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2176252 'move' call_tmp[2176250](2176254 '!' test[1454286]))
    if call_tmp[2176250]
    {
      const-val call_tmp[1454325]:string[26] "dead at end of block" "expr temp" "insert auto destroy" "maybe param" "temp"
      const-val ret_tmp[1872812]:string[26] "temp"
      (1454330 call stringify[1454373] _e0_args[1454288] _e1_args[1454290] _e2_args[1454292] _e3_args[1454294] ret_tmp[1872812])
      (1872815 'move' call_tmp[1454325] ret_tmp[1872812])
      const-val call_tmp[1454335]:string[26] "dead at end of block" "maybe param" "temp"
      const-val ret_tmp[1863862]:string[26] "temp"
      (1454340 call +[38345] "assert failed - " call_tmp[1454325] ret_tmp[1863862])
      (1863865 'move' call_tmp[1454335] ret_tmp[1863862])
      const-val tmpstring[1454343]:string[26] "dead at end of block" "insert auto destroy"
      (1454345 'move' tmpstring[1454343] call_tmp[1454335])
      const-val coerce_tmp[2215720]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2215722 'move' coerce_tmp[2215720](2215724 '.v' tmpstring[1454343] locale_id[30757]))
      const-val call_tmp[2215727]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2215729 'move' call_tmp[2215727](2215731 '!=' coerce_tmp[2215720] chpl_nodeID[208207]))
      if call_tmp[2215727]
      {
        (2215737 call halt[154111] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2215740]:c_ptr(uint(8))[937484] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2215742 'move' coerce_tmp[2215740](2215744 '.v' tmpstring[1454343] buff[30740]))
      const-val call_tmp[2215747]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2215749 'move' call_tmp[2215747](2215751 'cast' c_string[19] coerce_tmp[2215740]))
      (1454358 'chpl_error' call_tmp[2215747])
      ref i_x[2196271]:string[26] "temp"
      (2196275 'move' i_x[2196271](2196273 'set reference' tmpstring[1454343]))
      (2196279 call deinit[30834] i_x[2196271])
      ref i_x[2196283]:string[26] "temp"
      (2196287 'move' i_x[2196283](2196285 'set reference' call_tmp[1454325]))
      (2196291 call deinit[30834] i_x[2196283])
    }
    (1454363 return _void[55])
  }
  function compilerAssert[973951]() : void[4] "instantiated generic" "invisible fn" "resolved" "no return value for void"
  {
    (973979 return _void[55])
  }
}