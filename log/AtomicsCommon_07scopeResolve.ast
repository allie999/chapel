AST dump for AtomicsCommon after pass scopeResolve.
Module use list: ChapelStandard 

{
  function atomic_refcnt[52102].inc[51962](arg _mt[52106]:_MT[238], arg this[52104]:atomic_refcnt[52102], arg cnt[51959] =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(51986 call _cond_test CHPL_CACHE_REMOTE[367])
    {
      (51976 call(51966 call .(357239 call . this[52104] c"_cnt") c"add") cnt[51959](order = relaxed[187010]))
    }
    {
      (51984 call(51979 call .(357245 call . this[52104] c"_cnt") c"add") cnt[51959])
    }
  }
  function atomic_refcnt[52102].dec[51997](arg _mt[52110]:_MT[238], arg this[52108]:atomic_refcnt[52102]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown got[52007](52006 call int(64)[13] 64)
    (52010 'end of statement')
    if(52074 call _cond_test CHPL_CACHE_REMOTE[367])
    {
      (52026 call = got[52007](52025 call(52015 call .(357250 call . this[52108] c"_cnt") c"fetchSub") 1(order = release[187006])))
      if(52046 call _cond_test(52032 call == got[52007] 1))
      {
        (52040 call atomicFence acquire[187008])
        (52044 return 0)
      }
      (52054 return(52052 call - got[52007] 1))
    }
    {
      (52064 call = got[52007](52063 call(52058 call .(357257 call . this[52108] c"_cnt") c"fetchSub") 1))
      (52072 return(52070 call - got[52007] 1))
    }
  }
  { scopeless type
    (52002 call int(64)[13] 64)
  }
  function atomic_refcnt[52102].read[52083](arg _mt[52114]:_MT[238], arg this[52112]:atomic_refcnt[52102]) : _unknown[51] "inline" "method" "primary method"
  {
    (52095 return(52094 call(52090 call .(357262 call . this[52112] c"_cnt") c"read")))
  }
  { scopeless type
    (52088 call int(64)[13] 64)
  }
  type atomic_refcnt[52102] unknown _cnt[51952](51951 call chpl__processorAtomicType int(64)[13])
  (355084 'used modules list'(51944 'use' ChapelStandard[20267]))
}