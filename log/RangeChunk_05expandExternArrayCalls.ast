AST dump for RangeChunk after pass expandExternArrayCalls.
Module use list: 

{
  (353125 'use' ChapelStandard)
  type RemElems[266554] def Thru[266548]:RemElems[266554] def Pack[266550]:RemElems[266554] def Mod[266552]:RemElems[266554]
  (266559 'use' RemElems)
  (266562 'use' BoundedRangeType)
  function chunks[266577](arg r[266574] :
  (266573 call range unknown RT[266567] bounded unknown S[266571]), arg numChunks[266580] :
  integral, arg remPol[266585] :
  RemElems =
  Thru) : _unknown[51] "iterator fn"
  {
    {
      unknown _indexOfInterest[266649] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[266650] "expr temp" "temp"
      (266659 'move' _iterator[266650](266657 call _getIterator(266605 call chunksOrder r numChunks remPol)))
      Defer
      {
        {
          (266690 call _freeIterator _iterator[266650])
        }
      }
      { scopeless type
        (266665 'move' _indexOfInterest[266649](266662 call iteratorIndex _iterator[266650]))
      }
      ForLoop[266651]
      {
        (266670 call _check_tuple_var_decl _indexOfInterest[266649] 2)
        unknown startOrder[266676] "index var" "insert auto destroy"
        (266678 'move' startOrder[266676](266674 call _indexOfInterest[266649] 0))
        unknown endOrder[266683] "index var" "insert auto destroy"
        (266685 'move' endOrder[266683](266681 call _indexOfInterest[266649] 1))
        {
          { scopeless
            const start[266613] "const"(266612 call(266607 call . r c"orderToIndex") startOrder)
            (266616 'end of statement')
          }
          { scopeless
            const end[266625] "const"(266624 call(266619 call . r c"orderToIndex") endOrder)
            (266628 'end of statement')
          }
          (266647 yield(266644 IfExpr  S then
          { scopeless
            (266638 call chpl_by(266632 call chpl_build_bounded_range start end)(266635 call . r c"stride"))
          } else
          { scopeless
            (266642 call chpl_build_bounded_range start end)
          } ))
        }
        label _continueLabel[266654]
        _indexOfInterest[266649]
        _iterator[266650]
      }
      label _breakLabel[266655]
    }
  }
  { scopeless type
    (266594 call range RT bounded S)
  }
  function chunk[266714](arg r[266711] :
  (266710 call range unknown RT[266704] bounded unknown S[266708]), arg numChunks[266717] :
  integral, arg idx[266721] :
  integral, arg remPol[266726] :
  RemElems =
  Thru) : _unknown[51]
  {
    { scopeless
      const tmp[266748] "const" "temp"(266747 call chunkOrder r numChunks idx remPol)
      (266755 call _check_tuple_var_decl tmp[266748] 2)
      const startOrder[266736] "const"(266749 call tmp[266748] 0)
      const endOrder[266738] "const"(266752 call tmp[266748] 1)
      (266760 'end of statement')
    }
    { scopeless
      const start[266769] "const"(266768 call(266763 call . r c"orderToIndex") startOrder)
      (266772 'end of statement')
    }
    { scopeless
      const end[266780] "const"(266779 call(266774 call . r c"orderToIndex") endOrder)
      (266783 'end of statement')
    }
    (266802 return(266799 IfExpr  S then
    { scopeless
      (266793 call chpl_by(266787 call chpl_build_bounded_range start end)(266790 call . r c"stride"))
    } else
    { scopeless
      (266797 call chpl_build_bounded_range start end)
    } ))
  }
  { scopeless type
    (266735 call range RT bounded S)
  }
  function blockCyclicChunks[266824](arg r[266821] :
  (266820 call range unknown t[266810](boundedType =(266814 call . BoundedRangeType c"bounded")) unknown strided[266818]), arg blockSize[266827] :
  integral, arg tid[266831] :
  integral, arg nTasks[266835] :
  integral) : _unknown[51] "iterator fn"
  {
    if(266882 call _cond_test(266840 call >= tid nTasks))
    {
      { scopeless
        (266880 call halt(266877 call + "Parameter tid must be < nTasks " "because blocks are indexed from 0..nTasks-1"))
      }
    }
    if(266913 call _cond_test(266890 call <= blockSize 0))
    {
      { scopeless
        (266911 call halt "blockSize must a positive number")
      }
    }
    if(266943 call _cond_test(266920 call <= nTasks 0))
    {
      { scopeless
        (266941 call halt "nTasks must be a positive number")
      }
    }
    { scopeless
      unknown rangeStride[266952](266949 call . r c"stride")
      (266955 'end of statement')
    }
    { scopeless
      unknown blockStride[266960](266958 call * blockSize rangeStride)
      (266963 'end of statement')
    }
    { scopeless
      unknown low[266968](266965 call . r c"low")
      (266971 'end of statement')
    }
    { scopeless
      unknown high[266976](266973 call . r c"high")
      (266979 'end of statement')
    }
    { scopeless
      unknown firstBlockStart[267001](266999 call +(266992 IfExpr (266982 call > rangeStride 0) then
      { scopeless
        (266985 call . r c"low")
      } else
      { scopeless
        (266989 call . r c"high")
      } )(266997 call * blockStride tid))
      (267004 'end of statement')
    }
    if(267023 call _cond_test(267019 call ||(267010 call > firstBlockStart(267007 call . r c"high"))(267017 call < firstBlockStart(267014 call . r c"low"))))
    {
      { scopeless
        (267021 return)
      }
    }
    { scopeless
      unknown strideToNextBlock[267032](267030 call * blockStride nTasks)
      (267035 'end of statement')
    }
    if(267192 call _cond_test(267038 call > rangeStride 0))
    {
      {
        unknown _indexOfInterest[267073] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267074] "expr temp" "temp"
        (267083 'move' _iterator[267074](267081 call _getIterator(267092 call chpl_direct_range_iter firstBlockStart high strideToNextBlock)))
        Defer
        {
          {
            (267108 call _freeIterator _iterator[267074])
          }
        }
        { scopeless type
          (267097 'move' _indexOfInterest[267073](267094 call iteratorIndex _iterator[267074]))
        }
        ForLoop[267075]
        {
          unknown blockStart[267101] "index var" "insert auto destroy"
          (267103 'move' blockStart[267101] _indexOfInterest[267073])
          {
            { scopeless
              unknown blockEnd[267059](267058 call min high(267056 call -(267053 call + blockStart blockStride) 1))
              (267062 'end of statement')
            }
            (267071 yield(267069 call chpl_by(267066 call chpl_build_bounded_range blockStart blockEnd) rangeStride))
          }
          label _continueLabel[267078]
          _indexOfInterest[267073]
          _iterator[267074]
        }
        label _breakLabel[267079]
      }
    }
    {
      {
        unknown _indexOfInterest[267149] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[267150] "expr temp" "temp"
        (267159 'move' _iterator[267150](267157 call _getIterator(267168 call chpl_direct_range_iter low firstBlockStart strideToNextBlock)))
        Defer
        {
          {
            (267184 call _freeIterator _iterator[267150])
          }
        }
        { scopeless type
          (267173 'move' _indexOfInterest[267149](267170 call iteratorIndex _iterator[267150]))
        }
        ForLoop[267151]
        {
          unknown blockEnd[267177] "index var" "insert auto destroy"
          (267179 'move' blockEnd[267177] _indexOfInterest[267149])
          {
            { scopeless
              unknown blockStart[267135](267134 call max low(267132 call +(267129 call + blockEnd blockStride) 1))
              (267138 'end of statement')
            }
            (267147 yield(267145 call chpl_by(267142 call chpl_build_bounded_range blockStart blockEnd) rangeStride))
          }
          label _continueLabel[267154]
          _indexOfInterest[267149]
          _iterator[267150]
        }
        label _breakLabel[267155]
      }
    }
  }
  function chunksOrder[267210](arg r[267207] :
  (267206 call range unknown RT[267201] bounded ?[260]), arg numChunks[267213] :
  integral, arg remPol[267218] :
  RemElems =
  Thru) : _unknown[51] "iterator fn"
  {
    if(267241 call _cond_test(267237 call ||(267231 call ==(267227 call . r c"size") 0)(267235 call <= numChunks 0)))
    {
      { scopeless
        (267239 return)
      }
    }
    { scopeless
      const nElems[267251] "const"(267248 call . r c"size")
      (267254 'end of statement')
    }
    { scopeless
      unknown nChunks[267263](267261 call _cast RT(267259 call min numChunks nElems))
      (267266 'end of statement')
    }
    { scopeless
      unknown chunkSize[267267] RT
      unknown rem[267271](267275 'typeof' chunkSize)
      (267276 'end of statement')
    }
    {
      unknown tmp[267343] "expr temp" "maybe param" "maybe type" "temp"
      (267345 'move' tmp[267343] remPol)
      if(267350 call _cond_test(267347 call == tmp[267343] Pack))
      {
        (267286 call = chunkSize(267284 call / nElems nChunks))
        if(267312 call _cond_test(267295 call !=(267292 call * chunkSize nChunks) nElems))
        {
          (267299 call += chunkSize 1)
          (267309 call = nChunks(267308 call divceil nElems chunkSize))
        }
      }
      {
        if(267356 call _cond_test(267353 call == tmp[267343] Mod))
        {
          (267325 call = chunkSize(267323 call / nElems nChunks))
          (267337 call = rem(267335 call - nElems(267333 call * chunkSize nChunks)))
        }
      }
    }
    {
      unknown _indexOfInterest[267479] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[267480] "expr temp" "temp"
      (267489 'move' _iterator[267480](267487 call _getIterator(267496 call chpl_direct_counted_range_iter 0 nChunks)))
      Defer
      {
        {
          (267512 call _freeIterator _iterator[267480])
        }
      }
      { scopeless type
        (267501 'move' _indexOfInterest[267479](267498 call iteratorIndex _iterator[267480]))
      }
      ForLoop[267481]
      {
        unknown i[267505] "index var" "insert auto destroy"
        (267507 'move' i[267505] _indexOfInterest[267479])
        {
          { scopeless
            unknown chunk[267372](267370 call * 2 RT)
            (267375 'end of statement')
          }
          {
            unknown tmp[267451] "expr temp" "maybe param" "maybe type" "temp"
            (267453 'move' tmp[267451] remPol)
            if(267458 call _cond_test(267455 call == tmp[267451] Thru))
            {
              { scopeless
                (267388 call = chunk(267387 call chunkOrderThru nElems nChunks i))
              }
            }
            {
              if(267464 call _cond_test(267461 call == tmp[267451] Pack))
              {
                { scopeless
                  (267403 call = chunk(267402 call chunkOrderPack chunkSize nElems i))
                }
              }
              {
                if(267471 call _cond_test(267468 call == tmp[267451] Mod))
                {
                  { scopeless
                    (267420 call = chunk(267419 call chunkOrderMod chunkSize rem nElems nChunks i))
                  }
                }
                {
                  { scopeless
                    (267445 call halt "RangeChunk: unknown RemElems in chunksOrder")
                  }
                }
              }
            }
          }
          (267477 yield chunk)
        }
        label _continueLabel[267484]
        _indexOfInterest[267479]
        _iterator[267480]
      }
      label _breakLabel[267485]
    }
  }
  { scopeless type
    (267224 call * 2 RT)
  }
  function chunkOrder[267534](arg r[267531] :
  (267530 call range unknown RT[267525] bounded ?[260]), arg numChunks[267537] :
  integral, arg idx[267541] :
  integral, arg remPol[267546] :
  RemElems =
  Thru) : _unknown[51]
  {
    if(267592 call _cond_test(267577 call ||(267571 call ||(267565 call ||(267559 call ==(267555 call . r c"size") 0)(267563 call <= numChunks 0))(267569 call < idx 0))(267575 call >= idx numChunks)))
    {
      { scopeless
        (267590 return(267588 call _build_tuple(267581 call _cast RT 1)(267585 call _cast RT 0)))
      }
    }
    { scopeless
      const nElems[267602] "const"(267599 call . r c"size")
      (267605 'end of statement')
    }
    { scopeless
      const nChunks[267614] "const"(267612 call _cast RT(267610 call min numChunks nElems))
      (267617 'end of statement')
    }
    { scopeless
      const i[267622] "const"(267620 call _cast RT idx)
      (267625 'end of statement')
    }
    {
      unknown tmp[267738] "expr temp" "maybe param" "maybe type" "temp"
      (267740 'move' tmp[267738] remPol)
      if(267745 call _cond_test(267742 call == tmp[267738] Thru))
      {
        (267636 return(267635 call chunkOrderThru nElems nChunks i))
      }
      {
        if(267751 call _cond_test(267748 call == tmp[267738] Pack))
        {
          { scopeless
            unknown chunkSize[267647](267645 call / nElems nChunks)
            (267650 'end of statement')
          }
          if(267664 call _cond_test(267657 call !=(267654 call * chunkSize nChunks) nElems))
          {
            { scopeless
              (267661 call += chunkSize 1)
            }
          }
          (267675 return(267674 call chunkOrderPack chunkSize nElems i))
        }
        {
          if(267758 call _cond_test(267755 call == tmp[267738] Mod))
          {
            { scopeless
              const chunkSize[267685] "const"(267683 call / nElems nChunks)
              (267688 'end of statement')
            }
            { scopeless
              const rem[267697] "const"(267695 call - nElems(267693 call * chunkSize nChunks))
              (267700 'end of statement')
            }
            (267709 return(267708 call chunkOrderMod chunkSize rem nElems nChunks i))
          }
          {
            (267732 call halt "RangeChunk: unknown RemElems in chunkOrder")
          }
        }
      }
    }
  }
  { scopeless type
    (267552 call * 2 RT)
  }
  function chunkOrderThru[267773](arg nElems[267770] :
  unknown I[267768], arg nChunks[267776] :
  I, arg i[267780] :
  I) : _unknown[51] "no doc" "private"
  {
    { scopeless
      const m[267792] "const"(267790 call * nElems i)
      (267795 'end of statement')
    }
    { scopeless
      const start[267813] "const"(267810 IfExpr (267799 call == i 0) then
      { scopeless
        (267803 call _cast I 0)
      } else
      { scopeless
        (267809 call divceil m nChunks)
      } )
      (267816 'end of statement')
    }
    { scopeless
      const end[267842] "const"(267839 IfExpr (267822 call == i(267820 call - nChunks 1)) then
      { scopeless
        (267826 call - nElems 1)
      } else
      { scopeless
        (267837 call -(267835 call divceil(267831 call + m nElems) nChunks) 1)
      } )
      (267845 'end of statement')
    }
    (267851 return(267849 call _build_tuple start end))
  }
  { scopeless type
    (267786 call _build_tuple I I)
  }
  function chunkOrderPack[267863](arg chunkSize[267860] :
  unknown I[267858], arg nElems[267866] :
  I, arg i[267870] :
  I) : _unknown[51] "no doc" "private"
  {
    { scopeless
      const start[267882] "const"(267880 call * chunkSize i)
      (267885 'end of statement')
    }
    if(267904 call _cond_test(267889 call >= start nElems))
    {
      { scopeless
        (267902 return(267900 call _build_tuple(267893 call _cast I 1)(267897 call _cast I 0)))
      }
    }
    { scopeless
      unknown end[267916](267914 call -(267911 call + start chunkSize) 1)
      (267919 'end of statement')
    }
    if(267932 call _cond_test(267922 call >= end nElems))
    {
      { scopeless
        (267929 call = end(267927 call - nElems 1))
      }
    }
    (267942 return(267940 call _build_tuple start end))
  }
  { scopeless type
    (267876 call _build_tuple I I)
  }
  function chunkOrderMod[267954](arg chunkSize[267951] :
  unknown I[267949], arg rem[267957] :
  I, arg nElems[267961] :
  I, arg nChunks[267965] :
  I, arg i[267969] :
  I) : _unknown[51] "no doc" "private"
  {
    { scopeless
      unknown start[267977] I
      unknown end[267981](267985 'typeof' start)
      (267986 'end of statement')
    }
    if(268038 call _cond_test(267990 call < i rem))
    {
      (268000 call = start(267998 call * i(267996 call + chunkSize 1)))
      (268009 call = end(268007 call + start chunkSize))
    }
    {
      (268023 call = start(268021 call - nElems(268019 call *(268016 call - nChunks i) chunkSize)))
      (268035 call = end(268033 call -(268030 call + start chunkSize) 1))
    }
    (268047 return(268045 call _build_tuple start end))
  }
  { scopeless type
    (267975 call _build_tuple I I)
  }
}