AST dump for ChapelUtil after pass prune2.
Module use list: ChapelStandard 

{
  function chpl__init_ChapelUtil[416072]() : void[4] "insert line file info" "module init" "resolved"
  {
    (522148 return _void[55])
  }
  function safeAdd[976700](const in arg a[976702]:int(64)[13], const in arg b[976707]:int(64)[13]) : bool[10] "instantiated generic" "invisible fn" "resolved"
  {
    val ret[976709]:bool[10] "dead after last mention" "RVV" "temp"
    const-val call_tmp[2036096]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2036098 'move' call_tmp[2036096](2036100 '<' a[976702] 0))
    if call_tmp[2036096]
    {
      const-val call_tmp[2132369]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2132371 'move' call_tmp[2132369](2132373 '>=' b[976707] 0))
      if call_tmp[2132369]
      {
        (976784 'move' ret[976709] 1)
        gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
      }
      {
        const-val call_tmp[2132429]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2132431 'move' call_tmp[2132429](2132433 '-' -9223372036854775808 a[976702]))
        const-val call_tmp[2046102]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2046104 'move' call_tmp[2046102](2046106 '<' b[976707] call_tmp[2132429]))
        if call_tmp[2046102]
        {
          (976829 'move' ret[976709] 0)
          gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
        }
        {
          (976836 'move' ret[976709] 1)
          gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
        }
      }
    }
    {
      const-val call_tmp[2086044]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2086046 'move' call_tmp[2086044](2086048 '<=' b[976707] 0))
      if call_tmp[2086044]
      {
        (976862 'move' ret[976709] 1)
        gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
      }
      {
        const-val call_tmp[2132459]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
        (2132461 'move' call_tmp[2132459](2132463 '-' 9223372036854775807 a[976702]))
        const-val call_tmp[2042142]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2042144 'move' call_tmp[2042142](2042146 '>' b[976707] call_tmp[2132459]))
        if call_tmp[2042142]
        {
          (976907 'move' ret[976709] 0)
          gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
        }
        {
          (976914 'move' ret[976709] 1)
          gotoReturn _end_safeAdd[976923] _end_safeAdd[976923]
        }
      }
    }
    label _end_safeAdd[976923]
    (976925 return ret[976709])
  }
  type chpl_main_argument[167374] val argc[167361]:int(64)[13] val return_value[167369]:int(32)[95]
  function chpl_rt_preUserCodeHook[167672]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522134 return _void[55])
  }
  function chpl_rt_postUserCodeHook[167678]() : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522136 return _void[55])
  }
  function chpl_addModule[167693](const in arg moduleName[167690]:c_string[19], const in arg deinitFun[167696]:c_fn_ptr[152]) : void[4] "resolved" "no return value for void"
  {
    val new_temp[1380544]:chpl_ModuleDeinit[19824] "dead after last mention" "temp"
    (1380546 'move' new_temp[1380544](1380415 call _new[1380480] moduleName[167690] deinitFun[167696] chpl_moduleDeinitFuns[19837]))
    (2228589 '=' chpl_moduleDeinitFuns[19837] new_temp[1380544])
    (522138 return _void[55])
  }
  function chpl_deinitModules[167717]() : void[4] "export" "local args" "resolved" "no return value for void"
  {
    const-val local__str_literal_129[2277454]:string[26] "temp"
    (2277455 'move' "argument to ! is nil" "argument to ! is nil")
    val prev[167768]:chpl_ModuleDeinit[19824] "dead at end of block" "insert auto destroy"
    (544614 'move' prev[167768] chpl_moduleDeinitFuns[19837])
    val tmp[167825]:bool[10] "dead after last mention" "temp"
    val coerce_tmp[1378853]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (1378858 'move' coerce_tmp[1378853](1378855 'cast' object[22] prev[167768]))
    const-val call_tmp[2035644]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2035646 'move' call_tmp[2035644](2035648 'ptr_neq' coerce_tmp[1378853] nil[44]))
    (167843 'move' tmp[167825] call_tmp[2035644])
    WhileDo[167830] hazard
    {
      val coerce_tmp[2228548]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2228550 'move' coerce_tmp[2228548](2228552 'cast' object[22] prev[167768]))
      const-val call_tmp[2228555]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2228557 'move' call_tmp[2228555](2228559 'ptr_eq' coerce_tmp[2228548] nil[44]))
      if call_tmp[2228555]
      {
        (2228565 call nilCheckHalt[210068] "argument to ! is nil")
      }
      const curr[167776]:chpl_ModuleDeinit[19824] "dead at end of block" "const" "insert auto destroy"
      (544616 'move' curr[167776] prev[167768])
      val coerce_tmp[1379183]:chpl_ModuleDeinit[19824] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1379188 'move' coerce_tmp[1379183] prev[167768])
      const-val coerce_tmp[1379191]:c_fn_ptr[152] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1379195 'move' coerce_tmp[1379191](2268860 '.v' coerce_tmp[1379183] deinitFun[19743]))
      (167808 call chpl_execute_module_deinit[167750] coerce_tmp[1379191])
      val coerce_tmp[1379198]:chpl_ModuleDeinit[19824] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1379203 'move' coerce_tmp[1379198] prev[167768])
      val coerce_tmp[1379269]:chpl_ModuleDeinit[19824] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1379273 'move' coerce_tmp[1379269](2268866 '.v' coerce_tmp[1379198] prevModule[19750]))
      (2228577 '=' prev[167768] coerce_tmp[1379269])
      val coerce_tmp[2228595]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2228597 'move' coerce_tmp[2228595](2228599 'cast' object[22] curr[167776]))
      const-val call_tmp[2228602]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2228604 'move' call_tmp[2228602](2228606 'ptr_neq' coerce_tmp[2228595] nil[44]))
      if call_tmp[2228602]
      {
        const-val call_tmp[2228611]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2228613 'move' call_tmp[2228611](2228615 '_wide_get_addr' curr[167776]))
        (2228618 call chpl_here_free[188093] call_tmp[2228611])
      }
      val coerce_tmp[1380326]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (1380331 'move' coerce_tmp[1380326](1380328 'cast' object[22] coerce_tmp[1379269]))
      const-val call_tmp[2035654]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2035656 'move' call_tmp[2035654](2035658 'ptr_neq' coerce_tmp[1380326] nil[44]))
      (167836 'move' tmp[167825] call_tmp[2035654])
      tmp[167825]
    }
    (2228630 '=' chpl_moduleDeinitFuns[19837](2228632 'cast' chpl_ModuleDeinit[19824] nil[44]))
    (522146 return _void[55])
  }
  function chpl_execute_module_deinit[167750](const in arg deinitFun[167747]:c_fn_ptr[152]) : void[4] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    (522144 return _void[55])
  }
}