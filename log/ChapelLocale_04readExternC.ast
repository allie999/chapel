AST dump for ChapelLocale after pass readExternC.
Module use list: 

{
  (89849 'use' LocaleModel)
  (89853 'import' HaltWrappers)
  (89856 'use' SysCTypes)
  unknown chpl_nodeID_t[89862] "no doc" "type variable"(89861 call int[13] 32)
  unknown chpl_sublocID_t[89869] "no doc" "type variable"(89868 call int[13] 32)
  { scopeless
    const c_sublocid_none[89873] "const" "extern" "no doc" chpl_sublocID_t
    (89876 'end of statement')
  }
  { scopeless
    const c_sublocid_any[89878] "const" "extern" "no doc" chpl_sublocID_t
    (89881 'end of statement')
  }
  { scopeless
    const c_sublocid_all[89883] "const" "extern" "no doc" chpl_sublocID_t
    (89886 'end of statement')
  }
  function chpl_isActualSublocID[89893](arg subloc[89890] :
  chpl_sublocID_t) : _unknown[51] "inline" "no doc"
  {
    { scopeless
      (89911 return(89909 call &&(89903 call &&(89897 call != subloc c_sublocid_none)(89901 call != subloc c_sublocid_any))(89907 call != subloc c_sublocid_all)))
    }
  }
  type localeKind[89927] def regular[89917]:localeKind[89927] def any[89919]:localeKind[89927] def nilLocale[89921]:localeKind[89927] def dummy[89923]:localeKind[89927] def default[89925]:localeKind[89927]
  {
  }
  { scopeless
    const nilLocale[89942] "const" "locale private" "no doc"(89932 'new'(89941 call locale[28](89937 call . localeKind c"nilLocale")))
    (89945 'end of statement')
  }
  { scopeless
    unknown defaultLocale[89956] "locale private" "no doc"(89946 'new'(89955 call locale[28](89951 call . localeKind c"default")))
    (89959 'end of statement')
  }
  { scopeless
    unknown dummyLocale[89970] "no doc"(89960 'new'(89969 call locale[28](89965 call . localeKind c"dummy")))
    (89973 'end of statement')
  }
  type locale[28] unknown _instance[89978](89977 'to unmanaged class from unknown'(89976 'to nilable class from type' BaseLocale)) function locale[28]._value[89984](arg _mt[90373]:_MT[238], arg this[90371]:locale[28]) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (89989 return(89987 call postfix! _instance))
  } function locale[28].chpl_forwarding_expr3__value[89995](arg _mt[90377]:_MT[238], arg this[90375]:locale[28]) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (89997 return _value)
  } function locale[28].init[90003](arg _mt[90381]:_MT[238], arg this[90379]:locale[28]) : _unknown[51] "method" "primary method"
  {
    if(90027 call _cond_test rootLocaleInitialized)
    {
      (90014 call =(90007 call . this c"_instance")(90011 call . defaultLocale c"_instance"))
    }
    {
      (90023 call =(90019 call . this c"_instance") nil[44])
    }
  } function locale[28].init[90040](arg _mt[90385]:_MT[238], arg this[90383]:locale[28], arg _instance[90037] :
  BaseLocale) : _unknown[51] "method" "primary method"
  {
    (90050 call =(90043 call . this c"_instance")(90049 call _to_unmanaged _instance))
  } function locale[28].init[90060](arg _mt[90389]:_MT[238], arg this[90387]:locale[28], param arg kind[90058]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(90155 call _cond_test(90069 call == kind(90066 call . localeKind c"regular")))
    {
      { scopeless
        (90107 call compilerError "locale.init(kind) can not be used to create " "a regular locale instance")
      }
    }
    {
      { scopeless
        if(90149 call _cond_test(90114 call == kind(90111 call . localeKind c"dummy")))
        {
          { scopeless
            (90126 call =(90117 call . this c"_instance")(90122 'new'(_chpl_manager = unmanaged[220](?))(90125 call DummyLocale)))
          }
        }
        {
          { scopeless
            if(90144 call _cond_test(90134 call == kind(90131 call . localeKind c"default")))
            {
              { scopeless
                (90141 call =(90137 call . this c"_instance") nil[44])
              }
            }
          }
        }
      }
    }
  } function locale[28].init=[90170](arg _mt[90393]:_MT[238], arg this[90391]:locale[28], arg other[90167] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    (90180 call =(90173 call . this c"_instance")(90177 call . other c"_instance"))
  } function locale[28].deinit[90188](arg _mt[90397]:_MT[238], arg this[90395]:locale[28]) : _unknown[51] "destructor" "method" "primary method"
  {
  } function locale[28].localeid[90195](arg _mt[90401]:_MT[238], arg this[90399]:locale[28]) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    (90206 return(90203 call .(90198 call . this c"_value") c"localeid"))
  } function locale[28].chpl_id[90213](arg _mt[90405]:_MT[238], arg this[90403]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90226 return(90225 call(90221 call .(90216 call . this c"_value") c"chpl_id")))
  } function locale[28].chpl_localeid[90233](arg _mt[90409]:_MT[238], arg this[90407]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90246 return(90245 call(90241 call .(90236 call . this c"_value") c"chpl_localeid")))
  } function locale[28].chpl_name[90253](arg _mt[90413]:_MT[238], arg this[90411]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90266 return(90265 call(90261 call .(90256 call . this c"_value") c"chpl_name")))
  } function locale[28].defaultMemory[90273](arg _mt[90417]:_MT[238], arg this[90415]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90286 return(90285 call(90281 call .(90276 call . this c"_value") c"defaultMemory")))
  } function locale[28].largeMemory[90293](arg _mt[90421]:_MT[238], arg this[90419]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90306 return(90305 call(90301 call .(90296 call . this c"_value") c"largeMemory")))
  } function locale[28].lowLatencyMemory[90313](arg _mt[90425]:_MT[238], arg this[90423]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90326 return(90325 call(90321 call .(90316 call . this c"_value") c"lowLatencyMemory")))
  } function locale[28].highBandwidthMemory[90333](arg _mt[90429]:_MT[238], arg this[90427]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90346 return(90345 call(90341 call .(90336 call . this c"_value") c"highBandwidthMemory")))
  } function locale[28].getChildCount[90353](arg _mt[90433]:_MT[238], arg this[90431]:locale[28]) : _unknown[51] "inline" "method" "primary method"
  {
    (90364 return(90363 call(90359 call .(90356 call . this c"_value") c"getChildCount")))
  } forwarding ( )
  function here[90438]() : _unknown[51] "inline" "no parens"
  {
    (90444 return(90443 call chpl_localeID_to_locale here_id))
  }
  function _unknown[51].hostname[90452](arg _mt[90457]:_MT[238], arg this[90454] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    (90478 call writeln "in locale.hostname line 212")
    (90490 return(90487 call .(90482 call . this c"_value") c"hostname"))
  }
  function _unknown[51].name[90497](arg _mt[90502]:_MT[238], arg this[90499] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    (90513 return(90510 call .(90505 call . this c"_value") c"name"))
  }
  function _unknown[51].id[90521](arg _mt[90526]:_MT[238], arg this[90523] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    (90537 return(90534 call .(90529 call . this c"_value") c"id"))
  }
  function _unknown[51].maxTaskPar[90545](arg _mt[90550]:_MT[238], arg this[90547] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    (90559 return(90556 call .(90553 call . this c"_value") c"maxTaskPar"))
  }
  function _unknown[51].numPUs[90573](arg _mt[90584]:_MT[238], arg this[90581] :
  locale[28], arg logical[90569] :
  bool[10] =
  0, arg accessible[90577] :
  bool[10] =
  1) : _unknown[51] "inline" "method"
  {
    (90599 return(90598 call(90592 call .(90587 call . this c"_value") c"numPUs") logical accessible))
  }
  function _unknown[51].callStackSize[90607](arg _mt[90612]:_MT[238], arg this[90609] :
  locale[28]) : _unknown[51] "inline" "method" "no parens"
  {
    (90623 return(90620 call .(90615 call . this c"_value") c"callStackSize"))
  }
  function =[90634](ref arg l1[90631] :
  locale[28], const  ref arg l2[90637] :
  locale[28]) : _unknown[51] "assignop" "no doc"
  {
    (90648 call =(90641 call . l1 c"_instance")(90645 call . l2 c"_instance"))
  }
  type BaseLocale[91204] function BaseLocale[91204].init[90657](arg _mt[91208]:_MT[238], arg this[91206]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
  } function BaseLocale[91204].init[90668](arg _mt[91212]:_MT[238], arg this[91210]:BaseLocale[91204], arg parent[90665] :
  locale[28]) : _unknown[51] "method" "primary method" "no doc"
  {
    (90677 call =(90673 call . this c"parent") parent)
  } const parent[90684] "const" "no doc" nilLocale unknown nPUsLogAcc[90689] "no doc" int[13] unknown nPUsLogAll[90694] "no doc" int[13] unknown nPUsPhysAcc[90699] "no doc" int[13] unknown nPUsPhysAll[90704] "no doc" int[13] function BaseLocale[91204].numPUs[90716](arg _mt[91216]:_MT[238], arg this[91214]:BaseLocale[91204], arg logical[90712] :
  bool[10] =
  0, arg accessible[90720] :
  bool[10] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    { scopeless
      (90740 return(90737 IfExpr  logical then
      { scopeless(90728 IfExpr  accessible then
        { scopeless
          nPUsLogAcc
        } else
        { scopeless
          nPUsLogAll
        } )
      } else
      { scopeless(90734 IfExpr  accessible then
        { scopeless
          nPUsPhysAcc
        } else
        { scopeless
          nPUsPhysAll
        } )
      } ))
    }
  } unknown maxTaskPar[90746] int[13] unknown callStackSize[90751] size_t function BaseLocale[91204].id[90757](arg _mt[91220]:_MT[238], arg this[91218]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (90783 return(90782 call chpl_nodeFromLocaleID(90780 '_wide_get_locale' this)))
    }
  }
  { scopeless type
    int[13]
  } function BaseLocale[91204].localeid[90791](arg _mt[91224]:_MT[238], arg this[91222]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    { scopeless
      (90798 return(90797 '_wide_get_locale' this))
    }
  }
  { scopeless type
    chpl_localeID_t
  } function BaseLocale[91204].hostname[90806](arg _mt[91228]:_MT[238], arg this[91226]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no parens"
  {
    function chpl_nodeName[90811]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      c_string
    }
    { scopeless
      unknown hname[90819] string[26]
      (90822 'end of statement')
    }
    { scopeless
      const tmp[90842] "const" "temp"
      (90844 'move' tmp[90842](90840 'deref'(90839 '_wide_get_locale' this)))
      {
        {
          Try!
          {
            {
              (90831 call = hname(90830 call createStringWithNewBuffer(90828 call chpl_nodeName)))
            }
          }
        }
        (90847 'on block' 0 tmp[90842])
      }
    }
    (90851 return hname)
  }
  { scopeless type
    string[26]
  } function BaseLocale[91204].writeThis[90860](arg _mt[91232]:_MT[238], arg this[91230]:BaseLocale[91204], arg f[90858]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides"
  {
    (90869 call(90865 call . HaltWrappers c"pureVirtualMethodHalt"))
  } function BaseLocale[91204].name[90876](arg _mt[91236]:_MT[238], arg this[91234]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (90884 return(90882 call _cast string[26](90880 call chpl_name)))
    }
  } unknown runningTaskCounter[90893] "no doc"(90892 call chpl__processorAtomicType int[13]) function BaseLocale[91204].runningTaskCntSet[90903](arg _mt[91240]:_MT[238], arg this[91238]:BaseLocale[91204], arg val[90900] :
  int[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (90915 call(90906 call . runningTaskCounter c"write") val(90912 call . memoryOrder c"relaxed"))
  } function BaseLocale[91204].runningTaskCntAdd[90926](arg _mt[91244]:_MT[238], arg this[91242]:BaseLocale[91204], arg val[90923] :
  int[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (90938 call(90929 call . runningTaskCounter c"add") val(90935 call . memoryOrder c"relaxed"))
  } function BaseLocale[91204].runningTaskCntSub[90949](arg _mt[91248]:_MT[238], arg this[91246]:BaseLocale[91204], arg val[90946] :
  int[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (90961 call(90952 call . runningTaskCounter c"sub") val(90958 call . memoryOrder c"relaxed"))
  } function BaseLocale[91204].runningTaskCnt[90968](arg _mt[91252]:_MT[238], arg this[91250]:BaseLocale[91204]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    { scopeless
      unknown rtc[90980](90979 call(90971 call . runningTaskCounter c"read")(90975 call . memoryOrder c"relaxed"))
      (90983 'end of statement')
    }
    (90994 return(90991 IfExpr (90987 call <= rtc 0) then
    { scopeless
      1
    } else
    { scopeless
      rtc
    } ))
  } function BaseLocale[91204].chpl_id[91000](arg _mt[91256]:_MT[238], arg this[91254]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91008 call(91004 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91014 return(91012 call - 1))
  }
  { scopeless type
    int[13]
  } function BaseLocale[91204].chpl_localeid[91021](arg _mt[91260]:_MT[238], arg this[91258]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91029 call(91025 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91042 return(91041 call chpl_buildLocaleID(91037 call -(91035 call _cast chpl_nodeID_t 1)) c_sublocid_none))
  }
  { scopeless type
    chpl_localeID_t
  } function BaseLocale[91204].chpl_name[91049](arg _mt[91264]:_MT[238], arg this[91262]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91057 call(91053 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91077 return "")
  }
  { scopeless type
    string[26]
  } function BaseLocale[91204].defaultMemory[91084](arg _mt[91268]:_MT[238], arg this[91266]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91092 call(91088 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  } function BaseLocale[91204].largeMemory[91100](arg _mt[91272]:_MT[238], arg this[91270]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91108 call(91104 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  } function BaseLocale[91204].lowLatencyMemory[91116](arg _mt[91276]:_MT[238], arg this[91274]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91124 call(91120 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  } function BaseLocale[91204].highBandwidthMemory[91132](arg _mt[91280]:_MT[238], arg this[91278]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91140 call(91136 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  } function BaseLocale[91204].getChildCount[91148](arg _mt[91284]:_MT[238], arg this[91282]:BaseLocale[91204]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91156 call(91152 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91160 return 0)
  }
  { scopeless type
    int[13]
  } function BaseLocale[91204].addChild[91171](arg _mt[91288]:_MT[238], arg this[91286]:BaseLocale[91204], arg loc[91168] :
  locale[28]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91178 call(91174 call . HaltWrappers c"pureVirtualMethodHalt"))
  } function BaseLocale[91204].getChild[91189](arg _mt[91292]:_MT[238], arg this[91290]:BaseLocale[91204], arg idx[91186] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (91197 call(91193 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  }
  type DummyLocale[91441] function DummyLocale[91441].init[91300](arg _mt[91445]:_MT[238], arg this[91443]:DummyLocale[91441]) : _unknown[51] "method" "primary method"
  {
    (91308 call(91303 call . super c"init") nilLocale)
  } function DummyLocale[91441].chpl_id[91315](arg _mt[91449]:_MT[238], arg this[91447]:DummyLocale[91441]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91321 return(91319 call - 1))
  }
  { scopeless type
    int[13]
  } function DummyLocale[91441].chpl_localeid[91329](arg _mt[91453]:_MT[238], arg this[91451]:DummyLocale[91441]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91342 return(91341 call chpl_buildLocaleID(91337 call -(91335 call _cast chpl_nodeID_t 1)) c_sublocid_none))
  }
  { scopeless type
    chpl_localeID_t
  } function DummyLocale[91441].chpl_name[91350](arg _mt[91457]:_MT[238], arg this[91455]:DummyLocale[91441]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91370 return "dummy-locale")
  }
  { scopeless type
    string[26]
  } function DummyLocale[91441].getChildCount[91378](arg _mt[91461]:_MT[238], arg this[91459]:DummyLocale[91441]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91382 return 0)
  }
  { scopeless type
    int[13]
  } function DummyLocale[91441].getChild[91394](arg _mt[91465]:_MT[238], arg this[91463]:DummyLocale[91441], arg idx[91391] :
  int[13]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91402 return(91397 'new'(91401 call locale[28] this)))
  }
  { scopeless type
    locale[28]
  } function DummyLocale[91441].addChild[91414](arg _mt[91469]:_MT[238], arg this[91467]:DummyLocale[91441], arg loc[91411] :
  locale[28]) : _unknown[51] "method" "primary method" "method overrides"
  {
    (91435 call halt "addChild on DummyLocale")
  } BaseLocale
  type AbstractLocaleModel[91502] function AbstractLocaleModel[91502].init[91481](arg _mt[91506]:_MT[238], arg this[91504]:AbstractLocaleModel[91502], arg parent_loc[91478] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    (91489 call(91484 call . super c"init") parent_loc)
  } function AbstractLocaleModel[91502].init[91496](arg _mt[91510]:_MT[238], arg this[91508]:AbstractLocaleModel[91502]) : _unknown[51] "method" "primary method"
  {
  } BaseLocale
  { scopeless
    unknown rootLocale[91514] "locale private" "no doc" nilLocale
    (91517 'end of statement')
  }
  { scopeless
    unknown replicateRootLocale[91519] "config" "no doc" "param" 1
    (91522 'end of statement')
  }
  { scopeless
    unknown origRootLocale[91524] "no doc" nilLocale
    (91527 'end of statement')
  }
  type AbstractRootLocale[92012] function AbstractRootLocale[92012].init[91533](arg _mt[92016]:_MT[238], arg this[92014]:AbstractRootLocale[92012]) : _unknown[51] "method" "primary method"
  {
  } function AbstractRootLocale[92012].init[91544](arg _mt[92020]:_MT[238], arg this[92018]:AbstractRootLocale[92012], arg parent_loc[91541] :
  locale[28]) : _unknown[51] "method" "primary method"
  {
    (91552 call(91547 call . super c"init") parent_loc)
  } function AbstractRootLocale[92012].getDefaultLocaleSpace[91559](arg _mt[92024]:_MT[238], arg this[92022]:AbstractRootLocale[92012]) const ref : _unknown[51] "method" "primary method"
  {
    (91566 call(91562 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91570 return chpl_emptyLocaleSpace)
  } function AbstractRootLocale[92012].getDefaultLocaleArray[91576](arg _mt[92028]:_MT[238], arg this[92026]:AbstractRootLocale[92012]) const ref : _unknown[51] "method" "primary method"
  {
    (91583 call(91579 call . HaltWrappers c"pureVirtualMethodHalt"))
    (91587 return chpl_emptyLocales)
  } function AbstractRootLocale[92012].localeIDtoLocale[91597](arg _mt[92032]:_MT[238], arg this[92030]:AbstractRootLocale[92012], arg id[91594] :
  chpl_localeID_t) : _unknown[51] "method" "primary method"
  {
    (91605 call(91601 call . HaltWrappers c"pureVirtualMethodHalt"))
  }
  { scopeless type
    locale[28]
  } function AbstractRootLocale[92012].chpl_initOnLocales[91613](arg _mt[92036]:_MT[238], arg this[92034]:AbstractRootLocale[92012]) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(91640 call _cond_test(91617 call > numLocales 1))
    {
      { scopeless
        (91638 call halt "The locales must be initialized in parallel")
      }
    }
    {
      unknown _indexOfInterest[91679] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[91680] "expr temp" "temp"
      (91689 'move' _iterator[91680](91687 call _getIterator(91664 call(91660 call .(91656 call postfix!(91654 call _cast(91653 'to borrowed class from unknown'(91652 'to nilable class from type' RootLocale))(91648 call . origRootLocale c"_instance"))) c"getDefaultLocaleSpace"))))
      Defer
      {
        {
          (91706 call _freeIterator _iterator[91680])
        }
      }
      { scopeless type
        (91695 'move' _indexOfInterest[91679](91692 call iteratorIndex _iterator[91680]))
      }
      ForLoop[91681]
      {
        unknown locIdx[91699] "index var" "insert auto destroy"
        (91701 'move' locIdx[91699] _indexOfInterest[91679])
        {
          (91666 yield locIdx)
          (91671 call = rootLocale origRootLocale)
          (91676 call = rootLocaleInitialized 1)
        }
        label _continueLabel[91684]
        _indexOfInterest[91679]
        _iterator[91680]
      }
      label _breakLabel[91685]
    }
  } function AbstractRootLocale[92012].chpl_initOnLocales[91721](arg _mt[92040]:_MT[238], arg this[92038]:AbstractRootLocale[92012], param arg tag[91718] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method"
  {
    { scopeless
      unknown b[91731] localesBarrier
      (91734 'end of statement')
    }
    { scopeless
      unknown flags[91753](91751 call chpl__buildArrayRuntimeType(91749 call chpl__ensureDomainExpr(91743 call #(91737 call chpl_build_low_bounded_range 1)(91741 call - numLocales 1)))(91748 'to unmanaged class from unknown'(91747 'to nilable class from type' localesSignal)))
      (91756 'end of statement')
    }
    {
      unknown tmpIter[91818] "expr temp" "maybe ref" "no copy" "temp"
      (91821 'move' tmpIter[91818](91762 call #(91759 call chpl_build_low_bounded_range 0) numLocales))
      unknown isRngDomArr[91989] "maybe param" "temp"
      (92004 'move' isRngDomArr[91989](92002 call ||(91991 call isBoundedRange tmpIter[91818])(92000 call ||(91994 call isDomain tmpIter[91818])(91997 call isArray tmpIter[91818]))))
      if isRngDomArr[91989]
      {
        const _coforallCount[91861] "const" "end count" "temp"
        (91926 'move' _coforallCount[91861](91923 call _endCountAlloc 0))
        unknown numTasks[91862] "temp"
        (91910 'move' numTasks[91862](91906 call . tmpIter[91818] c"size"))
        (91901 call _upEndCount _coforallCount[91861] 0 numTasks[91862])
        unknown _indexOfInterest[91868] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[91869] "expr temp" "temp"
        (91878 'move' _iterator[91869](91876 call _getIterator tmpIter[91818]))
        Defer
        {
          {
            (91894 call _freeIterator _iterator[91869])
          }
        }
        { scopeless type
          (91883 'move' _indexOfInterest[91868](91880 call iteratorIndex _iterator[91869]))
        }
        ForLoop[91870]
        {
          unknown locIdx[91887] "coforall index var" "index var" "insert auto destroy"
          (91889 'move' locIdx[91887] _indexOfInterest[91868])
          { scopeless
            { scopeless
              const tmp[91824] "const" "temp"
              (91826 'move' tmp[91824](91828 'deref'(91829 'chpl_on_locale_num'(91831 call chpl_buildLocaleID(91833 call _cast chpl_nodeID_t locIdx) c_sublocid_any))))
              {
                {
                  (91843 call chpl_defaultDistInitPrivate)
                  (91844 yield locIdx)
                  (91850 call(91847 call . b c"wait") locIdx flags)
                  (91854 call chpl_rootLocaleInitPrivate locIdx)
                  (91857 call chpl_defaultLocaleInitPrivate)
                  (91859 call warmupRuntime)
                }
                (91863 call _downEndCount _coforallCount[91861] nil[44])
                (91838 'coforall on block' 0 tmp[91824])
              }
            }
          }
          label _continueLabel[91873]
          _indexOfInterest[91868]
          _iterator[91869]
        }
        label _breakLabel[91874]
        Defer
        {
          {
            (91913 call _endCountFree _coforallCount[91861])
          }
        }
        (91918 call _waitEndCount _coforallCount[91861] 0 numTasks[91862])
      }
      {
        const _coforallCount[91930] "const" "end count" "temp"
        (91986 'move' _coforallCount[91930](91983 call _endCountAlloc 0))
        unknown _indexOfInterest[91937] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[91938] "expr temp" "temp"
        (91947 'move' _iterator[91938](91945 call _getIterator tmpIter[91818]))
        Defer
        {
          {
            (91963 call _freeIterator _iterator[91938])
          }
        }
        { scopeless type
          (91952 'move' _indexOfInterest[91937](91949 call iteratorIndex _iterator[91938]))
        }
        ForLoop[91939]
        {
          unknown locIdx[91956] "coforall index var" "index var" "insert auto destroy"
          (91958 'move' locIdx[91956] _indexOfInterest[91937])
          (91970 call _upEndCount _coforallCount[91930] 0)
          { scopeless
            { scopeless
              const tmp[91809] "const" "temp"
              (91811 'move' tmp[91809](91807 'deref'(91774 'chpl_on_locale_num'(91773 call chpl_buildLocaleID(91769 call _cast chpl_nodeID_t locIdx) c_sublocid_any))))
              {
                {
                  (91777 call chpl_defaultDistInitPrivate)
                  (91781 yield locIdx)
                  (91792 call(91786 call . b c"wait") locIdx flags)
                  (91797 call chpl_rootLocaleInitPrivate locIdx)
                  (91801 call chpl_defaultLocaleInitPrivate)
                  (91805 call warmupRuntime)
                }
                (91932 call _downEndCount _coforallCount[91930] nil[44])
                (91814 'coforall on block' 0 tmp[91809])
              }
            }
          }
          label _continueLabel[91942]
          _indexOfInterest[91937]
          _iterator[91938]
        }
        label _breakLabel[91943]
        Defer
        {
          {
            (91974 call _endCountFree _coforallCount[91930])
          }
        }
        (91979 call _waitEndCount _coforallCount[91930] 0)
      }
    }
  }
  where {
    (91728 call == tag(91725 call . iterKind c"standalone"))
  } BaseLocale
  function warmupRuntime[92045]() : _unknown[51] "private"
  {
    function chpl_task_getFixedNumThreads[92049]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (92054 call uint[115] 32)
    }
    {
      unknown tmpIter[92091] "expr temp" "maybe ref" "no copy" "temp"
      (92094 'move' tmpIter[92091](92066 call #(92061 call chpl_build_low_bounded_range 0)(92065 call chpl_task_getFixedNumThreads)))
      unknown isRngDomArr[92248] "maybe param" "temp"
      (92263 'move' isRngDomArr[92248](92261 call ||(92250 call isBoundedRange tmpIter[92091])(92259 call ||(92253 call isDomain tmpIter[92091])(92256 call isArray tmpIter[92091]))))
      if isRngDomArr[92248]
      {
        const _coforallCount[92115] "const" "end count" "temp"
        (92184 'move' _coforallCount[92115](92181 call _endCountAlloc 1))
        unknown numTasks[92116] "temp"
        (92168 'move' numTasks[92116](92164 call . tmpIter[92091] c"size"))
        (92159 call _upEndCount _coforallCount[92115] 1 numTasks[92116])
        (92156 call chpl_resetTaskSpawn numTasks[92116])
        unknown _indexOfInterest[92123] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92124] "expr temp" "temp"
        (92133 'move' _iterator[92124](92131 call _getIterator tmpIter[92091]))
        Defer
        {
          {
            (92149 call _freeIterator _iterator[92124])
          }
        }
        { scopeless type
          (92138 'move' _indexOfInterest[92123](92135 call iteratorIndex _iterator[92124]))
        }
        ForLoop[92125]
        {
          unknown i[92142] "coforall index var" "index var" "insert auto destroy"
          (92144 'move' i[92142] _indexOfInterest[92123])
          {
            {
              { scopeless
                unknown p[92098](92100 call c_malloc int[13] 1)
                (92104 'end of statement')
              }
              (92106 call =(92108 call p 0) i)
              (92112 call c_free p)
            }
            (92118 call _downEndCount _coforallCount[92115] nil[44])
            (92117 'coforall loop')
          }
          label _continueLabel[92128]
          _indexOfInterest[92123]
          _iterator[92124]
        }
        label _breakLabel[92129]
        Defer
        {
          {
            (92171 call _endCountFree _coforallCount[92115])
          }
        }
        (92176 call _waitEndCount _coforallCount[92115] 1 numTasks[92116])
      }
      {
        const _coforallCount[92188] "const" "end count" "temp"
        (92245 'move' _coforallCount[92188](92242 call _endCountAlloc 1))
        unknown _indexOfInterest[92196] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92197] "expr temp" "temp"
        (92206 'move' _iterator[92197](92204 call _getIterator tmpIter[92091]))
        Defer
        {
          {
            (92222 call _freeIterator _iterator[92197])
          }
        }
        { scopeless type
          (92211 'move' _indexOfInterest[92196](92208 call iteratorIndex _iterator[92197]))
        }
        ForLoop[92198]
        {
          unknown i[92215] "coforall index var" "index var" "insert auto destroy"
          (92217 'move' i[92215] _indexOfInterest[92196])
          (92229 call _upEndCount _coforallCount[92188] 1)
          {
            {
              { scopeless
                unknown p[92073](92072 call c_malloc int[13] 1)
                (92076 'end of statement')
              }
              (92083 call =(92081 call p 0) i)
              (92089 call c_free p)
            }
            (92191 call _downEndCount _coforallCount[92188] nil[44])
            (92190 'coforall loop')
          }
          label _continueLabel[92201]
          _indexOfInterest[92196]
          _iterator[92197]
        }
        label _breakLabel[92202]
        Defer
        {
          {
            (92233 call _endCountFree _coforallCount[92188])
          }
        }
        (92238 call _waitEndCount _coforallCount[92188] 1)
      }
    }
  }
  type localesSignal[92278] unknown s[92273](92271 call chpl__atomicType bool[10])
  type localesBarrier[92486] function localesBarrier[92486].wait[92286](arg _mt[92490]:_MT[238], arg this[92488]:localesBarrier[92486], arg locIdx[92284]:_any[178](?), arg flags[92288]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(92478 call _cond_test(92292 call == locIdx 0))
    {
      {
        unknown tmp[92370] "temp"
        (92388 'move' tmp[92370](92386 call _cond_test 1))
        WhileDo[92375]
        {
          {
            (92297 call atomicFence)
            { scopeless
              unknown count[92301] 0
              (92304 'end of statement')
            }
            {
              unknown _indexOfInterest[92318] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[92319] "expr temp" "temp"
              (92328 'move' _iterator[92319](92326 call _getIterator flags))
              Defer
              {
                {
                  (92344 call _freeIterator _iterator[92319])
                }
              }
              { scopeless type
                (92333 'move' _indexOfInterest[92318](92330 call iteratorIndex _iterator[92319]))
              }
              ForLoop[92320]
              {
                unknown f[92337] "index var" "insert auto destroy"
                (92339 'move' f[92337] _indexOfInterest[92318])
                { scopeless
                  if(92313 call _cond_test f)
                  {
                    { scopeless
                      (92310 call += count 1)
                    }
                  }
                }
                label _continueLabel[92323]
                _indexOfInterest[92318]
                _iterator[92319]
              }
              label _breakLabel[92324]
            }
            if(92361 call _cond_test(92356 call == count(92354 call - numLocales 1)))
            {
              { scopeless
                break nil[44]
              }
            }
            (92368 call chpl_task_yield)
          }
          label _continueLabel[92373]
          (92381 'move' tmp[92370](92379 call _cond_test 1))
          tmp[92370]
        }
        label _breakLabel[92374]
      }
      {
        unknown _indexOfInterest[92410] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[92411] "expr temp" "temp"
        (92420 'move' _iterator[92411](92418 call _getIterator flags))
        Defer
        {
          {
            (92436 call _freeIterator _iterator[92411])
          }
        }
        { scopeless type
          (92425 'move' _indexOfInterest[92410](92422 call iteratorIndex _iterator[92411]))
        }
        ForLoop[92412]
        {
          unknown f[92429] "index var" "insert auto destroy"
          (92431 'move' f[92429] _indexOfInterest[92410])
          { scopeless
            (92408 call(92404 call .(92399 call .(92395 call postfix! f) c"s") c"testAndSet"))
          }
          label _continueLabel[92415]
          _indexOfInterest[92410]
          _iterator[92411]
        }
        label _breakLabel[92416]
      }
    }
    {
      { scopeless
        unknown f[92449](92445 'new'(_chpl_manager = unmanaged[220](?))(92448 call localesSignal))
        (92452 'end of statement')
      }
      (92459 call =(92457 call flags locIdx) f)
      (92471 call(92466 call .(92463 call . f c"s") c"waitFor") 1)
      (92475 call chpl__delete f)
    }
  }
  function chpl_init_rootLocale[92495]() : _unknown[51] "no doc"
  {
    if(92525 call _cond_test(92502 call &&(92499 call > numLocales 1) _local))
    {
      { scopeless
        (92523 call halt "Cannot run a program compiled with --local in more than 1 locale")
      }
    }
    (92541 call =(92532 call . origRootLocale c"_instance")(92537 'new'(_chpl_manager = unmanaged[220](?))(92540 call RootLocale)))
    (92561 call(92557 call .(92553 call postfix!(92551 call _cast(92550 'to borrowed class from unknown'(92549 'to nilable class from type' RootLocale))(92545 call . origRootLocale c"_instance"))) c"setup"))
  }
  function chpl_defaultLocaleInitPrivate[92567]() : _unknown[51] "inline" "no doc"
  {
    { scopeless
      const rl[92587] "const" "no auto destroy" "no copy" "ref var"(92586 call(92582 call .(92578 call postfix!(92576 call _cast(92575 'to borrowed class from unknown'(92574 'to nilable class from type' RootLocale))(92570 call . rootLocale c"_instance"))) c"getDefaultLocaleArray"))
      (92590 'end of statement')
    }
    (92603 call =(92593 call . defaultLocale c"_instance")(92600 call .(92599 call rl 0) c"_instance"))
  }
  function chpl_rootLocaleInitPrivate[92612](arg locIdx[92610]:_any[178](?)) : _unknown[51] "no doc"
  {
    (92616 call = rootLocale origRootLocale)
    if(92730 call _cond_test(92625 call && replicateRootLocale(92623 call != locIdx 0)))
    {
      { scopeless
        unknown newRootLocale[92633](92629 'new'(_chpl_manager = unmanaged[220](?))(92632 call RootLocale))
        (92636 'end of statement')
      }
      { scopeless
        const origLocales[92654] "const" "no auto destroy" "no copy" "ref var"(92653 call(92649 call .(92647 call postfix!(92645 call _cast(92644 'to borrowed class from unknown'(92643 'to nilable class from type' RootLocale))(92639 call . origRootLocale c"_instance"))) c"getDefaultLocaleArray"))
        (92657 'end of statement')
      }
      { scopeless
        unknown origRL[92667](92664 call .(92659 call . origLocales c"_value") c"theData")
        (92670 'end of statement')
      }
      { scopeless
        unknown newRL[92683](92680 call .(92677 call .(92676 call(92672 call . newRootLocale c"getDefaultLocaleArray")) c"_value") c"theData")
        (92686 'end of statement')
      }
      (92720 'chpl_comm_array_get'(92709 'array_get' newRL 0) 0(92715 'array_get' origRL 0)(92718 call _cast size_t numLocales))
      (92727 call =(92723 call . rootLocale c"_instance") newRootLocale)
    }
    if(92781 call _cond_test(92736 call != locIdx 0))
    {
      { scopeless
        const tmp[92754] "const" "no auto destroy" "ref var"(92753 call(92749 call .(92747 call postfix!(92745 call _cast(92744 'to borrowed class from unknown'(92743 'to nilable class from type' RootLocale))(92739 call . rootLocale c"_instance"))) c"getDefaultLocaleArray"))
        (92757 'end of statement')
      }
      (92779 'move' Locales tmp)
    }
    (92787 call = rootLocaleInitialized 1)
  }
  function chpl_task_getRequestedSubloc[92794]() : _unknown[51] "extern" "local args" "no fn body" "no doc" "fn synchronization free"
  {
  }
  { scopeless type
    chpl_sublocID_t
  }
  function chpl_getLocaleID[92806](ref arg localeID[92803] :
  chpl_localeID_t) : _unknown[51] "export" "insert line file info" "local args" "no doc"
  {
    (92810 call = localeID here_id)
  }
  function here_id[92818]() : _unknown[51] "inline" "no doc" "no parens"
  {
    if(92837 call _cond_test localeModelHasSublocales)
    {
      { scopeless
        (92828 return(92827 call chpl_rt_buildLocaleID chpl_nodeID(92826 call chpl_task_getRequestedSubloc)))
      }
    }
    {
      { scopeless
        (92835 return(92834 call chpl_rt_buildLocaleID chpl_nodeID c_sublocid_any))
      }
    }
  }
  function chpl_localeID_to_locale[92852](arg id[92849] :
  chpl_localeID_t) : _unknown[51] "no doc" "fn returns infinite lifetime"
  {
    if(92912 call _cond_test(92860 call !=(92856 call . rootLocale c"_instance") nil[44]))
    {
      { scopeless
        (92881 return(92880 call(92875 call .(92871 call postfix!(92869 call _cast(92868 'to borrowed class from unknown'(92867 'to nilable class from type' AbstractRootLocale))(92863 call . rootLocale c"_instance"))) c"localeIDtoLocale") id))
      }
    }
    {
      if(92904 call _cond_test(92888 call ==(92884 call . dummyLocale c"_instance") nil[44]))
      {
        (92900 call =(92891 call . dummyLocale c"_instance")(92896 'new'(_chpl_manager = unmanaged[220](?))(92899 call DummyLocale)))
      }
      (92910 return dummyLocale)
    }
  }
  { scopeless type
    locale[28]
  }
  type chpl_privateObject_t[92928] unknown obj[92923] c_void_ptr
  { scopeless
    unknown chpl_privateObjects[92935] "extern" "no doc"(92934 call c_ptr chpl_privateObject_t)
    (92938 'end of statement')
  }
  function chpl_getPrivatizedCopy[92943](arg objectType[92941]:_any[178](?), arg objectPid[92946] :
  int[13]) : _unknown[51] "inline" "no doc" "fn returns infinite lifetime"
  {
    (92963 return(92962 'cast' objectType(92959 call .(92956 call chpl_privateObjects objectPid) c"obj")))
  }
  { scopeless type
    objectType
  }
  function _unknown[51].totalThreads[92972](arg _mt[92977]:_MT[238], arg this[92974] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    { scopeless
      unknown totalThreads[92980] int[13]
      (92983 'end of statement')
    }
    function chpl_task_getNumThreads[92987]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (92992 call uint[115] 32)
    }
    { scopeless
      const tmp[93007] "const" "temp"
      (93009 'move' tmp[93007](93005 'deref'(93004 '_wide_get_locale' this)))
      {
        { scopeless
          (93001 call = totalThreads(93000 call chpl_task_getNumThreads))
        }
        (93012 'on block' 0 tmp[93007])
      }
    }
    (93016 return totalThreads)
  }
  function _unknown[51].idleThreads[93023](arg _mt[93028]:_MT[238], arg this[93025] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    { scopeless
      unknown idleThreads[93031] int[13]
      (93034 'end of statement')
    }
    function chpl_task_getNumIdleThreads[93038]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (93043 call uint[115] 32)
    }
    { scopeless
      const tmp[93058] "const" "temp"
      (93060 'move' tmp[93058](93056 'deref'(93055 '_wide_get_locale' this)))
      {
        { scopeless
          (93052 call = idleThreads(93051 call chpl_task_getNumIdleThreads))
        }
        (93063 'on block' 0 tmp[93058])
      }
    }
    (93067 return idleThreads)
  }
  function _unknown[51].queuedTasks[93074](arg _mt[93079]:_MT[238], arg this[93076] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    { scopeless
      unknown queuedTasks[93082] int[13]
      (93085 'end of statement')
    }
    function chpl_task_getNumQueuedTasks[93089]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (93094 call uint[115] 32)
    }
    { scopeless
      const tmp[93109] "const" "temp"
      (93111 'move' tmp[93109](93107 'deref'(93106 '_wide_get_locale' this)))
      {
        { scopeless
          (93103 call = queuedTasks(93102 call chpl_task_getNumQueuedTasks))
        }
        (93114 'on block' 0 tmp[93109])
      }
    }
    (93118 return queuedTasks)
  }
  function _unknown[51].runningTasks[93125](arg _mt[93130]:_MT[238], arg this[93127] :
  locale[28]) : _unknown[51] "method" "no doc" "fn synchronization free"
  {
    (93140 return(93139 call(93135 call . this c"runningTaskCnt")))
  }
  function _unknown[51].blockedTasks[93148](arg _mt[93153]:_MT[238], arg this[93150] :
  locale[28]) : _unknown[51] "method" "no doc"
  {
    { scopeless
      unknown blockedTasks[93156] int[13]
      (93159 'end of statement')
    }
    function chpl_task_getNumBlockedTasks[93163]() : _unknown[51] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (93168 call int[13] 32)
    }
    { scopeless
      const tmp[93183] "const" "temp"
      (93185 'move' tmp[93183](93181 'deref'(93180 '_wide_get_locale' this)))
      {
        { scopeless
          (93177 call = blockedTasks(93176 call chpl_task_getNumBlockedTasks))
        }
        (93188 'on block' 0 tmp[93183])
      }
    }
    (93192 return blockedTasks)
  }
  function chpl_taskRunningCntInc[93198]() : _unknown[51] "export" "insert line file info" "inc running task" "local args" "no doc"
  {
    if(93210 call _cond_test rootLocaleInitialized)
    {
      (93207 call(93202 call . here c"runningTaskCntAdd") 1)
    }
  }
  function chpl_taskRunningCntDec[93219]() : _unknown[51] "export" "insert line file info" "dec running task" "local args" "no doc"
  {
    if(93231 call _cond_test rootLocaleInitialized)
    {
      (93228 call(93223 call . here c"runningTaskCntSub") 1)
    }
  }
  function chpl_taskRunningCntReset[93240]() : _unknown[51] "export" "insert line file info" "local args" "no doc"
  {
    (93250 call(93245 call . here c"runningTaskCntSet") 0)
  }
  function deinit[93257]() : _unknown[51] "destructor" "no doc"
  {
    (93264 call chpl__delete(93260 call . origRootLocale c"_instance"))
    (93273 call chpl__delete(93269 call . dummyLocale c"_instance"))
  }
}