AST dump for List after pass flattenClasses.
Module use list: ChapelStandard ChapelLocks HaltWrappers Sort IO 

{
  const _initialCapacity[298324] "const" "no doc" "private" 8
  (298327 'end of statement')
  const _initialArrayCapacity[298329] "const" "no doc" "private" 16
  (298332 'end of statement')
  unknown _sanityChecks[298334] "no doc" "param" "private" 0
  (298337 'end of statement')
  function _sanity[298344](arg expr[298341] :
  bool[10]) : _unknown[51] "inline" "private" "no return value for void"
  {
    if(298352 call _cond_test _sanityChecks[298334])
    {
      (298350 call assert expr[298341])
    }
  }
  unknown _lockType[298366] "no doc" "type variable" chpl_LocalSpinlock[187432]
  function _LockWrapper[298407].lock[298380](arg _mt[298411]:_MT[238], arg this[298409]:_LockWrapper[298407]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (298387 call(298383 call .(365011 call . this[298409] c"lock$") c"lock"))
  }
  function _LockWrapper[298407].unlock[298394](arg _mt[298415]:_MT[238], arg this[298413]:_LockWrapper[298407]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (298401 call(298397 call .(365016 call . this[298413] c"lock$") c"unlock"))
  }
  type _LockWrapper[298407] val super[355883]:object[22] "super class" unknown lock$[298374](298370 'new'(298373 call _lockType[298366]))
  type _LockWrapper[405313](?)
  function _checkType[298422](arg eltType[298420]:_any[178](?)) : _unknown[51] "no doc" "no return value for void"
  {
    if(298500 call _cond_test(298427 call isGenericType eltType[298420]))
    {
      (298453 call compilerWarning(298450 call + "creating a list with element type "(298448 call _cast string[26] eltType[298420])))
      if(298475 call _cond_test(298467 call &&(298459 call isClassType eltType[298420])(298465 call !(298464 call isGenericType(298462 'to borrowed class from unknown' eltType[298420])))))
      {
        (298472 call compilerWarning "which now means class type with generic management")
      }
      (298498 call compilerError "list element type cannot currently be generic")
    }
  }
  function _dummyFieldType[298511](arg t[298509]:_any[178](?)) type : _unknown[51] "no doc"
  {
    if(298526 call _cond_test(298516 call isBorrowedClass t[298509]))
    {
      (298519 return(298518 'to nilable class from type' t[298509]))
    }
    {
      (298523 return nothing[7])
    }
  }
  function list[304289](?).init[298597](arg _mt[304293]:_MT[238], arg this[304291]:list[304289](?), arg eltType[298595]:_any[178](?), param arg parSafe[298600] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (298606 call _checkType eltType[298595])
    (298614 call =(298610 call . this[304291] c"eltType") eltType[298595])
    (298622 call =(298618 call . this[304291] c"parSafe") parSafe[298600])
    (298630 call(298626 call . this[304291] c"complete"))
    (298639 call(298635 call . this[304291] c"_firstTimeInitializeArrays"))
  }
  function list[304289](?).init[298653](arg _mt[304297]:_MT[238], arg this[304295]:list[304289](?), arg other[298650] :
  (298649 call list[304289](?) unknown t[298646]), param arg parSafe[298656] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(298709 call _cond_test(298667 call !(298666 call isCopyableType(298662 call .(298661 'typeof' this[304295]) c"eltType"))))
    {
      (298707 call compilerError(298704 call + "Cannot copy list with element type that " "cannot be copied"))
    }
    (298720 call =(298716 call . this[304295] c"eltType") t[298646])
    (298728 call =(298724 call . this[304295] c"parSafe") parSafe[298656])
    (298736 call(298732 call . this[304295] c"complete"))
    (298741 call(405330 call . this[304295] c"_commonInitFromIterable") other[298650])
  }
  function list[304289](?).init[298757](arg _mt[304301]:_MT[238], arg this[304299]:list[304289](?), arg other[298754] :
  (298752 call chpl__buildArrayRuntimeType unknown d[298747] unknown t[298750]), param arg parSafe[298760] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (298766 call _checkType t[298750])
    if(298815 call _cond_test(298773 call !(298772 call isCopyableType t[298750])))
    {
      (298813 call compilerError(298810 call + "Cannot construct list from array with element " "type that cannot be copied"))
    }
    (298825 call =(298821 call . this[304299] c"eltType") t[298750])
    (298833 call =(298829 call . this[304299] c"parSafe") parSafe[298760])
    (298841 call(298837 call . this[304299] c"complete"))
    (298846 call(405339 call . this[304299] c"_commonInitFromIterable") other[298754])
  }
  function list[304289](?).init[298860](arg _mt[304305]:_MT[238], arg this[304303]:list[304289](?), arg other[298857] :
  (298856 call range[64319](?) unknown t[298853]), param arg parSafe[298863] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (298869 call _checkType t[298853])
    (298877 call =(298873 call . this[304303] c"eltType") t[298853])
    (298885 call =(298881 call . this[304303] c"parSafe") parSafe[298863])
    if(298964 call _cond_test(298892 call !(298891 call isBoundedRange other[298857])))
    {
      unknown e[298899] "param"(298897 call _cast string[26](298895 'typeof' this[304303]))
      (298902 'end of statement')
      unknown f[298909] "param"(298907 call _cast string[26](298905 'typeof' other[298857]))
      (298912 'end of statement')
      unknown msg[298955] "param"(298953 call +(298950 call +(298931 call + "Cannot init " e[298899]) " from unbounded ") f[298909])
      (298958 'end of statement')
      (298962 call compilerError msg[298955])
    }
    (298973 call(298969 call . this[304303] c"complete"))
    (298978 call(405354 call . this[304303] c"_commonInitFromIterable") other[298857])
  }
  function list[304289](?).init=[298997](arg _mt[304309]:_MT[238], arg this[304307]:list[304289](?), arg other[298994] :
  (298993 call list[304289](?)(298987 call .(298986 'typeof' this[304307]) c"eltType") unknown p[298991])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(299017 call _cond_test(299007 call !(299006 call isCopyableType(299002 call .(299001 'typeof' this[304307]) c"eltType"))))
    {
      (299015 call compilerError(299012 call + "Cannot copy list with element type that " "cannot be copied"))
    }
    (299032 call =(299024 call . this[304307] c"eltType")(299029 call .(299028 'typeof' this[304307]) c"eltType"))
    (299044 call =(299036 call . this[304307] c"parSafe")(299041 call .(299040 'typeof' this[304307]) c"parSafe"))
    (299052 call(299048 call . this[304307] c"complete"))
    (299057 call(405364 call . this[304307] c"_commonInitFromIterable") other[298994])
  }
  function list[304289](?).init=[299076](arg _mt[304313]:_MT[238], arg this[304311]:list[304289](?), arg other[299073] :
  (299071 call chpl__buildArrayRuntimeType unknown d[299063](299068 call .(299067 'typeof' this[304311]) c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(299128 call _cond_test(299086 call !(299085 call isCopyableType(299081 call .(299080 'typeof' this[304311]) c"eltType"))))
    {
      (299126 call compilerError(299123 call + "Cannot copy list from array with element type " "that cannot be copied"))
    }
    (299143 call =(299135 call . this[304311] c"eltType")(299140 call .(299139 'typeof' this[304311]) c"eltType"))
    (299155 call =(299147 call . this[304311] c"parSafe")(299152 call .(299151 'typeof' this[304311]) c"parSafe"))
    (299163 call(299159 call . this[304311] c"complete"))
    (299168 call(405373 call . this[304311] c"_commonInitFromIterable") other[299073])
  }
  function list[304289](?).init=[299189](arg _mt[304317]:_MT[238], arg this[304315]:list[304289](?), arg other[299186] :
  (299185 call range[64319](?)(299177 call .(299176 'typeof' this[304315]) c"eltType") unknown b[299181] unknown d[299183])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (299200 call =(299192 call . this[304315] c"eltType")(299197 call .(299196 'typeof' this[304315]) c"eltType"))
    (299213 call =(299205 call . this[304315] c"parSafe")(299210 call .(299209 'typeof' this[304315]) c"parSafe"))
    if(299260 call _cond_test(299220 call !(299219 call isBoundedRange other[299186])))
    {
      unknown e[299227] "param"(299225 call _cast string[26](299223 'typeof' this[304315]))
      (299230 'end of statement')
      unknown f[299237] "param"(299235 call _cast string[26](299233 'typeof' other[299186]))
      (299240 'end of statement')
      unknown msg[299251] "param"(299249 call +(299246 call +(299243 call + "Cannot init " e[299227]) " from unbounded ") f[299237])
      (299254 'end of statement')
      (299258 call compilerError msg[299251])
    }
    (299269 call(299265 call . this[304315] c"complete"))
    (299274 call(405388 call . this[304315] c"_commonInitFromIterable") other[299186])
  }
  function list[304289](?)._commonInitFromIterable[299282](arg _mt[304321]:_MT[238], arg this[304319]:list[304289](?), arg iterable[299280]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299295 call(299291 call . this[304319] c"_firstTimeInitializeArrays"))
    {
      unknown _indexOfInterest[299305] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[299306] "expr temp" "temp"
      (299315 'move' _iterator[299306](299313 call _getIterator iterable[299280]))
      Defer
      {
        {
          (299331 call _freeIterator _iterator[299306])
        }
      }
      { scopeless type
        (299320 'move' _indexOfInterest[299305](299317 call iteratorIndex _iterator[299306]))
      }
      ForLoop[299307]
      {
        unknown x[299324] "index var" "insert auto destroy"
        (299326 'move' x[299324] _indexOfInterest[299305])
        (299303 call(405396 call . this[304319] c"append") x[299324])
        label _continueLabel[299310]
        _indexOfInterest[299305]
        _iterator[299306]
      }
      label _breakLabel[299311]
    }
  }
  {
    (299288 call <(299285 'lifetime_of' this[304319])(299287 'lifetime_of' iterable[299280]))
  }
  function list[304289](?)._firstTimeInitializeArrays[299343](arg _mt[304325]:_MT[238], arg this[304323]:list[304289](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299351 call _sanity(299348 call ==(405404 call . this[304323] c"_arrays") nil[44]))
    (299360 call _sanity(299357 call ==(405411 call . this[304323] c"_totalCapacity") 0))
    (299368 call _sanity(299365 call ==(405418 call . this[304323] c"_size") 0))
    (299375 call =(405423 call . this[304323] c"_arrays")(299374 call(405429 call . this[304323] c"_makeBlockArray") _initialArrayCapacity[298329]))
    (299380 call =(405437 call . this[304323] c"_arrayCapacity") _initialArrayCapacity[298329])
    (299391 call =(299386 call(405443 call . this[304323] c"_arrays") 0)(299390 call(405449 call . this[304323] c"_makeArray") _initialCapacity[298324]))
    (299396 call =(405455 call . this[304323] c"_totalCapacity") _initialCapacity[298324])
  }
  function list[304289](?).deinit[299403](arg _mt[304329]:_MT[238], arg this[304327]:list[304289](?)) : _unknown[51] "destructor" "inline" "method" "primary method" "no doc" "no return value for void"
  {
    (299407 call(405462 call . this[304327] c"_fireAllDestructors"))
    (299412 call(405468 call . this[304327] c"_freeAllArrays"))
    (299420 call _sanity(299417 call ==(405473 call . this[304327] c"_totalCapacity") 0))
    (299428 call _sanity(299425 call ==(405478 call . this[304327] c"_size") 0))
    (299436 call _sanity(299433 call ==(405483 call . this[304327] c"_arrays") nil[44]))
  }
  function list[304289](?)._destroy[299446](arg _mt[304333]:_MT[238], arg this[304331]:list[304289](?), ref arg item[299443] :
  (405488 call . this[304331] c"eltType")) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    (299451 call chpl__autoDestroy item[299443])
  }
  function list[304289](?)._move[299463](arg _mt[304337]:_MT[238], arg this[304335]:list[304289](?), ref arg src[299460] :
  unknown t[299458], ref arg dst[299466] :
  t[299458]) : _unknown[51] "inline" "method" "primary method" "no doc" "unsafe" "no return value for void"
  {
    (299479 '=' dst[299466] src[299460])
  }
  {
    (299473 call ==(299470 'lifetime_of' src[299460])(299472 'lifetime_of' dst[299466]))
  }
  function list[304289](?)._getArrayCapacity[299491](arg _mt[304341]:_MT[238], arg this[304339]:list[304289](?), arg array[299488] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const exp[299501] "const"(299499 call + array[299488](299498 call log2 _initialCapacity[298324]))
    (299504 'end of statement')
    const result[299510] "const"(299508 call ** 2 exp[299501])
    (299513 'end of statement')
    (299515 return result[299510])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304289](?)._getArrayIdx[299526](arg _mt[304345]:_MT[238], arg this[304343]:list[304289](?), arg zpos[299523] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const adj[299533] "const"(299531 call + zpos[299523] _initialCapacity[298324])
    (299536 'end of statement')
    const result[299548] "const"(299546 call -(299541 call log2 adj[299533])(299545 call log2 _initialCapacity[298324]))
    (299551 'end of statement')
    (299553 return result[299548])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304289](?)._getLastArrayIdx[299560](arg _mt[304349]:_MT[238], arg this[304347]:list[304289](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const result[299570] "const"(299569 call(405509 call . this[304347] c"_getArrayIdx")(299566 call -(405514 call . this[304347] c"_size") 1))
    (299573 'end of statement')
    (299581 call _sanity(299578 call >= result[299570] 0))
    (299584 return result[299570])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304289](?)._getItemIdx[299595](arg _mt[304353]:_MT[238], arg this[304351]:list[304289](?), arg zpos[299592] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const adj[299602] "const"(299600 call + zpos[299592] _initialCapacity[298324])
    (299605 'end of statement')
    const result[299617] "const"(299615 call ^ adj[299602](299613 call << 1(299612 call log2 adj[299602])))
    (299620 'end of statement')
    (299622 return result[299617])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304289](?)._getRef[299633](arg _mt[304357]:_MT[238], const  ref arg this[304355]:list[304289](?), arg idx[299630] :
  int(64)[13]) ref : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (299647 call _sanity(299644 call &&(299638 call >= idx[299630] 0)(299642 call < idx[299630](405528 call . this[304355] c"_totalCapacity"))))
    const arrayIdx[299654] "const"(299653 call(405532 call . this[304355] c"_getArrayIdx") idx[299630])
    (299657 'end of statement')
    const itemIdx[299662] "const"(299661 call(405539 call . this[304355] c"_getItemIdx") idx[299630])
    (299665 'end of statement')
    const array[299670] "const"(299669 call(405545 call . this[304355] c"_arrays") arrayIdx[299654])
    (299673 'end of statement')
    (299680 call _sanity(299677 call != array[299670] nil[44]))
    unknown result[299686] "ref var"(299685 call array[299670] itemIdx[299662])
    (299689 'end of statement')
    (299691 return result[299686])
  }
  function list[304289](?)._enter[299697](arg _mt[304361]:_MT[238], arg this[304359]:list[304289](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(299707 call _cond_test(405555 call . this[304359] c"parSafe"))
    {
      (299705 call(299701 call .(365046 call . this[304359] c"_lock$") c"lock"))
    }
  }
  function list[304289](?)._leave[299717](arg _mt[304365]:_MT[238], arg this[304363]:list[304289](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(299727 call _cond_test(405560 call . this[304363] c"parSafe"))
    {
      (299725 call(299721 call .(365051 call . this[304363] c"_lock$") c"unlock"))
    }
  }
  function list[304289](?)._withinBounds[299741](arg _mt[304369]:_MT[238], const arg this[304367]:list[304289](?), arg idx[299738] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (299754 return(299752 call &&(299746 call >= idx[299738] 0)(299750 call < idx[299738](405567 call . this[304367] c"_size"))))
  }
  { scopeless type
    bool[10]
  }
  function list[304289](?)._boundsCheckLeaveOnThrow[299766](arg _mt[304373]:_MT[238], const arg this[304371]:list[304289](?), arg i[299763] :
  int(64)[13], arg umsg[299786] :
  string[26] =
  "") : _unknown[51] throws "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(299861 call _cond_test(299794 call !(299793 call(405573 call . this[304371] c"_withinBounds") i[299763])))
    {
      (299798 call(405580 call . this[304371] c"_leave"))
      const msg[299848] "const"(299845 IfExpr (299819 call != umsg[299786] "") then
      { scopeless
        umsg[299786]
      } else
      { scopeless
        (299843 call + "Index out of bounds: "(299841 call _cast string[26] i[299763]))
      } )
      (299851 'end of statement')
      (299859 'throw'(299854 'new'(_chpl_manager = _owned[30](?))(299858 call IllegalArgumentError[388889](?) msg[299848])))
    }
  }
  function list[304289](?)._makeBlockArray[299874](arg _mt[304377]:_MT[238], arg this[304375]:list[304289](?), arg size[299871] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (299884 return(299883 call _ddata_allocate(299880 call _ddata[11696](?)(405591 call . this[304375] c"eltType")) size[299871]))
  }
  function list[304289](?)._freeBlockArray[299901](arg _mt[304381]:_MT[238], arg this[304379]:list[304289](?), arg data[299898] :
  (299897 call _ddata[11696](?)(299895 call _ddata[11696](?)(405599 call . this[304379] c"eltType"))), arg size[299904] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299911 call _ddata_free data[299898] size[299904])
  }
  function list[304289](?)._makeArray[299922](arg _mt[304385]:_MT[238], arg this[304383]:list[304289](?), arg size[299919] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (299931 return(299930 call _ddata_allocate(405606 call . this[304383] c"eltType") size[299919](initElts = 0)))
  }
  function list[304289](?)._freeArray[299945](arg _mt[304389]:_MT[238], arg this[304387]:list[304289](?), arg data[299942] :
  (299941 call _ddata[11696](?)(405613 call . this[304387] c"eltType")), arg size[299948] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299955 call _ddata_free data[299942] size[299948])
  }
  function list[304289](?)._maybeAcquireMem[299966](arg _mt[304393]:_MT[238], arg this[304391]:list[304289](?), arg amount[299963] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    const remaining[299972] "const"(299970 call -(405620 call . this[304391] c"_totalCapacity")(405625 call . this[304391] c"_size"))
    (299975 'end of statement')
    (299983 call _sanity(299980 call >= remaining[299972] 0))
    if(299991 call _cond_test(299987 call >= remaining[299972] amount[299963]))
    {
      (299989 return _void[55])
    }
    unknown lastArrayIdx[300007](300004 IfExpr (299998 call ==(405633 call . this[304391] c"_size") 0) then
    { scopeless
      0
    } else
    { scopeless
      (300003 call(405639 call . this[304391] c"_getLastArrayIdx"))
    } )
    (300010 'end of statement')
    unknown req[300015](300013 call - amount[299963] remaining[299972])
    (300018 'end of statement')
    {
      unknown tmp[300218] "temp"
      (300242 'move' tmp[300218](300237 call _cond_test(300239 call > req[300015] 0)))
      WhileDo[300223]
      {
        {
          if(300128 call _cond_test(300028 call >= lastArrayIdx[300007](300026 call -(405647 call . this[304391] c"_arrayCapacity") 1)))
          {
            const tmp[300120] "const" "temp"
            (300122 'move' tmp[300120](300118 'deref'(300117 '_wide_get_locale' this[304391])))
            {
              {
                unknown _narrays[300038](300037 call(405652 call . this[304391] c"_makeBlockArray")(300034 call *(405657 call . this[304391] c"_arrayCapacity") 2))
                (300041 'end of statement')
                {
                  unknown _indexOfInterest[300061] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[300062] "expr temp" "temp"
                  (300071 'move' _iterator[300062](300069 call _getIterator(300078 call chpl_direct_counted_range_iter 0(405670 call . this[304391] c"_arrayCapacity"))))
                  Defer
                  {
                    {
                      (300094 call _freeIterator _iterator[300062])
                    }
                  }
                  { scopeless type
                    (300083 'move' _indexOfInterest[300061](300080 call iteratorIndex _iterator[300062]))
                  }
                  ForLoop[300063]
                  {
                    unknown i[300087] "index var" "insert auto destroy"
                    (300089 'move' i[300087] _indexOfInterest[300061])
                    (300058 call =(300053 call _narrays[300038] i[300087])(300057 call(405664 call . this[304391] c"_arrays") i[300087]))
                    label _continueLabel[300066]
                    _indexOfInterest[300061]
                    _iterator[300062]
                  }
                  label _breakLabel[300067]
                }
                (300105 call(405676 call . this[304391] c"_freeBlockArray")(405681 call . this[304391] c"_arrays")(405686 call . this[304391] c"_arrayCapacity"))
                (300109 call =(405691 call . this[304391] c"_arrays") _narrays[300038])
                (300114 call *=(405697 call . this[304391] c"_arrayCapacity") 2)
              }
              (300125 'on block' 0 tmp[300120])
            }
          }
          const tmp[300210] "const" "temp"
          (300212 'move' tmp[300210](300208 'deref'(300207 '_wide_get_locale' this[304391])))
          {
            {
              const oldLast[300139] "const"(300138 call(405703 call . this[304391] c"_arrays") lastArrayIdx[300007])
              (300142 'end of statement')
              const oldLastCapacity[300148] "const"(300147 call(405710 call . this[304391] c"_getArrayCapacity") lastArrayIdx[300007])
              (300151 'end of statement')
              (300154 call += lastArrayIdx[300007] 1)
              unknown newLast[300161] "ref var"(300160 call(405717 call . this[304391] c"_arrays") lastArrayIdx[300007])
              (300164 'end of statement')
              const newLastCapacity[300169] "const"(300167 call * oldLastCapacity[300148] 2)
              (300172 'end of statement')
              (300179 call _sanity(300176 call != oldLast[300139] nil[44]))
              (300187 call _sanity(300184 call == newLast[300161] nil[44]))
              (300194 call = newLast[300161](300193 call(405726 call . this[304391] c"_makeArray") newLastCapacity[300169]))
              (300199 call +=(405732 call . this[304391] c"_totalCapacity") newLastCapacity[300169])
              (300204 call -= req[300015] newLastCapacity[300169])
            }
            (300215 'on block' 0 tmp[300210])
          }
        }
        label _continueLabel[300221]
        (300232 'move' tmp[300218](300227 call _cond_test(300229 call > req[300015] 0)))
        tmp[300218]
      }
      label _breakLabel[300222]
    }
    (300245 return _void[55])
  }
  function list[304289](?)._maybeReleaseMem[300255](arg _mt[304397]:_MT[238], arg this[304395]:list[304289](?), arg amount[300252] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(300263 call _cond_test(300259 call <=(405742 call . this[304395] c"_totalCapacity") _initialCapacity[298324]))
    {
      (300261 return _void[55])
    }
    const lastArrayIdx[300272] "const"(300271 call(405747 call . this[304395] c"_getLastArrayIdx"))
    (300275 'end of statement')
    (300282 call _sanity(300279 call != lastArrayIdx[300272] 0))
    const lastArrayCapacity[300288] "const"(300287 call(405752 call . this[304395] c"_getArrayCapacity") lastArrayIdx[300272])
    (300291 'end of statement')
    const threshold[300296] "const"(300294 call -(405758 call . this[304395] c"_totalCapacity") lastArrayCapacity[300288])
    (300299 'end of statement')
    const nsize[300304] "const"(300302 call -(405764 call . this[304395] c"_size") amount[300252])
    (300307 'end of statement')
    if(300314 call _cond_test(300310 call > nsize[300304] threshold[300296]))
    {
      (300312 return _void[55])
    }
    unknown array[300323] "ref var"(300322 call(405772 call . this[304395] c"_arrays") lastArrayIdx[300272])
    (300326 'end of statement')
    (300333 call _sanity(300330 call != array[300323] nil[44]))
    (300339 call(405780 call . this[304395] c"_freeArray") array[300323] lastArrayCapacity[300288])
    (300343 call -=(405787 call . this[304395] c"_totalCapacity") lastArrayCapacity[300288])
    (300348 call = array[300323] nil[44])
  }
  function list[304289](?)._expand[300359](arg _mt[304401]:_MT[238], ref arg this[304399]:list[304289](?), arg idx[300356] :
  int(64)[13], arg shift[300363] :
  int(64)[13] =
  1) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (300373 call _sanity(300371 call(405793 call . this[304399] c"_withinBounds") idx[300356]))
    if(300382 call _cond_test(300378 call <= shift[300363] 0))
    {
      (300380 return _void[55])
    }
    const tmp[300486] "const" "temp"
    (300488 'move' tmp[300486](300484 'deref'(300483 '_wide_get_locale' this[304399])))
    {
      {
        (300391 call(405802 call . this[304399] c"_maybeAcquireMem") shift[300363])
        {
          unknown _indexOfInterest[300433] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300434] "expr temp" "temp"
          (300443 'move' _iterator[300434](300441 call _getIterator(300460 call chpl_direct_range_iter idx[300356](300457 call -(405830 call . this[304399] c"_size") 1)(300453 call - 1))))
          Defer
          {
            {
              (300476 call _freeIterator _iterator[300434])
            }
          }
          { scopeless type
            (300465 'move' _indexOfInterest[300433](300462 call iteratorIndex _iterator[300434]))
          }
          ForLoop[300435]
          {
            unknown i[300469] "index var" "insert auto destroy"
            (300471 'move' i[300469] _indexOfInterest[300433])
            {
              unknown src[300411] "ref var"(300410 call(405809 call . this[304399] c"_getRef") i[300469])
              (300414 'end of statement')
              unknown dst[300423] "ref var"(300422 call(405814 call . this[304399] c"_getRef")(300419 call + i[300469] shift[300363]))
              (300426 'end of statement')
              (300431 call(405822 call . this[304399] c"_move") src[300411] dst[300423])
            }
            label _continueLabel[300438]
            _indexOfInterest[300433]
            _iterator[300434]
          }
          label _breakLabel[300439]
        }
      }
      (300491 'on block' 0 tmp[300486])
    }
    (300494 return _void[55])
  }
  function list[304289](?)._collapse[300504](arg _mt[304405]:_MT[238], ref arg this[304403]:list[304289](?), arg idx[300501] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (300512 call _sanity(300510 call(405834 call . this[304403] c"_withinBounds") idx[300501]))
    if(300542 call _cond_test(300520 call == idx[300501](300518 call -(405841 call . this[304403] c"_size") 1)))
    {
      const tmp[300531] "const" "temp"
      (300533 'move' tmp[300531](300529 'deref'(300528 '_wide_get_locale' this[304403])))
      {
        (300526 call(405848 call . this[304403] c"_maybeReleaseMem") 1)
        (300536 'on block' 0 tmp[300531])
      }
      (300540 return _void[55])
    }
    const tmp[300631] "const" "temp"
    (300633 'move' tmp[300631](300629 'deref'(300628 '_wide_get_locale' this[304403])))
    {
      {
        {
          unknown _indexOfInterest[300581] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300582] "expr temp" "temp"
          (300591 'move' _iterator[300582](300589 call _getIterator(300599 call chpl_direct_range_iter idx[300501](300596 call -(405871 call . this[304403] c"_size") 2) 1)))
          Defer
          {
            {
              (300615 call _freeIterator _iterator[300582])
            }
          }
          { scopeless type
            (300604 'move' _indexOfInterest[300581](300601 call iteratorIndex _iterator[300582]))
          }
          ForLoop[300583]
          {
            unknown i[300608] "index var" "insert auto destroy"
            (300610 'move' i[300608] _indexOfInterest[300581])
            {
              unknown src[300562] "ref var"(300561 call(405853 call . this[304403] c"_getRef")(300558 call + i[300608] 1))
              (300565 'end of statement')
              unknown dst[300571] "ref var"(300570 call(405858 call . this[304403] c"_getRef") i[300608])
              (300574 'end of statement')
              (300579 call(405863 call . this[304403] c"_move") src[300562] dst[300571])
            }
            label _continueLabel[300586]
            _indexOfInterest[300581]
            _iterator[300582]
          }
          label _breakLabel[300587]
        }
        (300626 call(405875 call . this[304403] c"_maybeReleaseMem") 1)
      }
      (300636 'on block' 0 tmp[300631])
    }
    (300639 return _void[55])
  }
  function list[304289](?)._appendByRef[300649](arg _mt[304409]:_MT[238], ref arg this[304407]:list[304289](?), ref arg x[300646] :
  (405880 call . this[304407] c"eltType")) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (300654 call(405884 call . this[304407] c"_maybeAcquireMem") 1)
    unknown src[300658] "ref var" x[300646]
    (300661 'end of statement')
    unknown dst[300666] "ref var"(300665 call(405889 call . this[304407] c"_getRef")(405894 call . this[304407] c"_size"))
    (300669 'end of statement')
    (300674 call(405898 call . this[304407] c"_move") src[300658] dst[300666])
    (300678 call +=(405905 call . this[304407] c"_size") 1)
  }
  function list[304289](?).append[300692](arg _mt[304413]:_MT[238], ref arg this[304411]:list[304289](?), in arg x[300689] :
  (300686 call . this[304411] c"eltType")) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (300702 call(405913 call . this[304411] c"_enter"))
    (300708 call(405919 call . this[304411] c"_appendByRef") x[300689])
    (300712 call(405924 call . this[304411] c"_leave"))
  }
  {
    (300698 call <(300695 'lifetime_of' this[304411])(300697 'lifetime_of' x[300689]))
  }
  function list[304289](?).contains[300723](arg _mt[304417]:_MT[238], const arg this[304415]:list[304289](?), arg x[300720] :
  (405929 call . this[304415] c"eltType")) : _unknown[51] "method" "primary method"
  {
    unknown result[300727] 0
    (300730 'end of statement')
    const tmp[300797] "const" "temp"
    (300799 'move' tmp[300797](300795 'deref'(300794 '_wide_get_locale' this[304415])))
    {
      {
        (300735 call(405934 call . this[304415] c"_enter"))
        {
          unknown _indexOfInterest[300757] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300758] "expr temp" "temp"
          (300767 'move' _iterator[300758](300765 call _getIterator this[304415]))
          Defer
          {
            {
              (300783 call _freeIterator _iterator[300758])
            }
          }
          { scopeless type
            (300772 'move' _indexOfInterest[300757](300769 call iteratorIndex _iterator[300758]))
          }
          ForLoop[300759]
          {
            unknown item[300776] "index var" "insert auto destroy"
            (300778 'move' item[300776] _indexOfInterest[300757])
            if(300753 call _cond_test(300742 call == item[300776] x[300720]))
            {
              (300746 call = result[300727] 1)
              break _breakLabel[300763] _breakLabel[300763]
            }
            label _continueLabel[300762]
            _indexOfInterest[300757]
            _iterator[300758]
          }
          label _breakLabel[300763]
        }
        (300792 call(405942 call . this[304415] c"_leave"))
      }
      (300802 'on block' 0 tmp[300797])
    }
    (300806 return result[300727])
  }
  { scopeless type
    bool[10]
  }
  function list[304289](?).first[300813](arg _mt[304421]:_MT[238], ref arg this[304419]:list[304289](?)) ref : _unknown[51] "method" "primary method"
  {
    (300817 call(405947 call . this[304419] c"_enter"))
    if(300853 call _cond_test(300825 call && 1(300823 call ==(405953 call . this[304419] c"_size") 0)))
    {
      (300829 call(405957 call . this[304419] c"_leave"))
      (300851 call boundsCheckHalt "Called \"list.first\" on an empty list.")
    }
    unknown result[300861] "ref var"(300860 call(405961 call . this[304419] c"_getRef") 0)
    (300864 'end of statement')
    (300867 call(405965 call . this[304419] c"_leave"))
    (300870 return result[300861])
  }
  function list[304289](?).last[300876](arg _mt[304425]:_MT[238], ref arg this[304423]:list[304289](?)) ref : _unknown[51] "method" "primary method"
  {
    (300880 call(405970 call . this[304423] c"_enter"))
    if(300916 call _cond_test(300888 call && 1(300886 call ==(405976 call . this[304423] c"_size") 0)))
    {
      (300892 call(405980 call . this[304423] c"_leave"))
      (300914 call boundsCheckHalt "Called \"list.last\" on an empty list.")
    }
    unknown result[300927] "ref var"(300926 call(405984 call . this[304423] c"_getRef")(300923 call -(405989 call . this[304423] c"_size") 1))
    (300930 'end of statement')
    (300933 call(405993 call . this[304423] c"_leave"))
    (300936 return result[300927])
  }
  function list[304289](?)._extendGeneric[300944](arg _mt[304429]:_MT[238], ref arg this[304427]:list[304289](?), arg collection[300942]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    const tmp[300997] "const" "temp"
    (300999 'move' tmp[300997](300995 'deref'(300994 '_wide_get_locale' this[304427])))
    {
      {
        {
          unknown _indexOfInterest[300960] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300961] "expr temp" "temp"
          (300970 'move' _iterator[300961](300968 call _getIterator collection[300942]))
          Defer
          {
            {
              (300986 call _freeIterator _iterator[300961])
            }
          }
          { scopeless type
            (300975 'move' _indexOfInterest[300960](300972 call iteratorIndex _iterator[300961]))
          }
          ForLoop[300962]
          {
            unknown item[300979] "index var" "insert auto destroy"
            (300981 'move' item[300979] _indexOfInterest[300960])
            {
              unknown cpy[300950] "no auto destroy" item[300979]
              (300953 'end of statement')
              (300958 call(406001 call . this[304427] c"_appendByRef") cpy[300950])
            }
            label _continueLabel[300965]
            _indexOfInterest[300960]
            _iterator[300961]
          }
          label _breakLabel[300966]
        }
      }
      (301002 'on block' 0 tmp[300997])
    }
  }
  function list[304289](?).extend[301019](arg _mt[304433]:_MT[238], ref arg this[304431]:list[304289](?), arg other[301016] :
  (301015 call list[304289](?)(406008 call . this[304431] c"eltType") unknown p[301013])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[301045] "const" "temp"
    (301047 'move' tmp[301045](301043 'deref'(301042 '_wide_get_locale' this[304431])))
    {
      {
        (301030 call(406015 call . this[304431] c"_enter"))
        (301036 call(406021 call . this[304431] c"_extendGeneric") other[301016])
        (301040 call(406026 call . this[304431] c"_leave"))
      }
      (301050 'on block' 0 tmp[301045])
    }
  }
  {
    (301025 call <(301022 'lifetime_of' this[304431])(301024 'lifetime_of' other[301016]))
  }
  function list[304289](?).extend[301068](arg _mt[304437]:_MT[238], ref arg this[304435]:list[304289](?), arg other[301065] :
  (301063 call chpl__buildArrayRuntimeType unknown d[301059](406031 call . this[304435] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[301094] "const" "temp"
    (301096 'move' tmp[301094](301092 'deref'(301091 '_wide_get_locale' this[304435])))
    {
      {
        (301079 call(406038 call . this[304435] c"_enter"))
        (301085 call(406042 call . this[304435] c"_extendGeneric") other[301065])
        (301089 call(406047 call . this[304435] c"_leave"))
      }
      (301099 'on block' 0 tmp[301094])
    }
  }
  {
    (301074 call <(301071 'lifetime_of' this[304435])(301073 'lifetime_of' other[301065]))
  }
  function list[304289](?).extend[301119](arg _mt[304441]:_MT[238], ref arg this[304439]:list[304289](?), arg other[301116] :
  (301115 call range[64319](?)(406053 call . this[304439] c"eltType") unknown b[301111] unknown d[301113])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(301203 call _cond_test(301131 call !(301130 call isBoundedRange other[301116])))
    {
      unknown e[301138] "param"(301136 call _cast string[26](301134 'typeof' this[304439]))
      (301141 'end of statement')
      unknown f[301148] "param"(301146 call _cast string[26](301144 'typeof' other[301116]))
      (301151 'end of statement')
      unknown msg[301194] "param"(301192 call +(301189 call +(301170 call + "Cannot extend " e[301138]) " with unbounded ") f[301148])
      (301197 'end of statement')
      (301201 call compilerError msg[301194])
    }
    const tmp[301226] "const" "temp"
    (301228 'move' tmp[301226](301224 'deref'(301223 '_wide_get_locale' this[304439])))
    {
      {
        (301211 call(406066 call . this[304439] c"_enter"))
        (301217 call(406070 call . this[304439] c"_extendGeneric") other[301116])
        (301221 call(406075 call . this[304439] c"_leave"))
      }
      (301231 'on block' 0 tmp[301226])
    }
  }
  {
    (301125 call <(301122 'lifetime_of' this[304439])(301124 'lifetime_of' other[301116]))
  }
  function list[304289](?).insert[301243](arg _mt[304445]:_MT[238], ref arg this[304443]:list[304289](?), arg idx[301240] :
  int(64)[13], in arg x[301246] :
  (406080 call . this[304443] c"eltType")) : _unknown[51] "method" "primary method"
  {
    unknown result[301257] 0
    (301260 'end of statement')
    const tmp[301338] "const" "temp"
    (301340 'move' tmp[301338](301336 'deref'(301335 '_wide_get_locale' this[304443])))
    {
      {
        (301265 call(406087 call . this[304443] c"_enter"))
        if(301326 call _cond_test(301270 call == idx[301240](406093 call . this[304443] c"_size")))
        {
          (301275 call(406097 call . this[304443] c"_appendByRef") x[301246])
          (301280 call = result[301257] 1)
        }
        {
          if(301322 call _cond_test(301286 call(406103 call . this[304443] c"_withinBounds") idx[301240]))
          {
            (301290 call(406110 call . this[304443] c"_expand") idx[301240])
            unknown src[301294] "ref var" x[301246]
            (301297 'end of statement')
            unknown dst[301302] "ref var"(301301 call(406116 call . this[304443] c"_getRef") idx[301240])
            (301305 'end of statement')
            (301310 call(406121 call . this[304443] c"_move") src[301294] dst[301302])
            (301314 call +=(406128 call . this[304443] c"_size") 1)
            (301319 call = result[301257] 1)
          }
        }
        (301333 call(406133 call . this[304443] c"_leave"))
      }
      (301343 'on block' 0 tmp[301338])
    }
    if(301354 call _cond_test(301347 call ! result[301257]))
    {
      (301352 call(406140 call . this[304443] c"_destroy") x[301246])
    }
    (301360 return result[301257])
  }
  {
    (301254 call <(301251 'lifetime_of' this[304443])(301253 'lifetime_of' x[301246]))
  }
  { scopeless type
    bool[10]
  }
  function list[304289](?)._insertGenericKnownSize[301372](arg _mt[304449]:_MT[238], ref arg this[304447]:list[304289](?), arg idx[301369] :
  int(64)[13], arg items[301374]:_any[178](?), arg size[301377] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown result[301382] 0
    (301385 'end of statement')
    (301393 call _sanity(301390 call >= size[301377] 0))
    if(301402 call _cond_test(301397 call == size[301377] 0))
    {
      (301400 return 1)
    }
    const tmp[301527] "const" "temp"
    (301529 'move' tmp[301527](301525 'deref'(301524 '_wide_get_locale' this[304447])))
    {
      {
        if(301518 call _cond_test(301410 call == idx[301369](406151 call . this[304447] c"_size")))
        {
          (301415 call(406155 call . this[304447] c"_extendGeneric") items[301374])
          (301420 call = result[301382] 1)
        }
        {
          if(301514 call _cond_test(301426 call(406161 call . this[304447] c"_withinBounds") idx[301369]))
          {
            (301431 call(406166 call . this[304447] c"_expand") idx[301369] size[301377])
            unknown i[301435] idx[301369]
            (301438 'end of statement')
            {
              unknown _indexOfInterest[301476] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[301477] "expr temp" "temp"
              (301486 'move' _iterator[301477](301484 call _getIterator items[301374]))
              Defer
              {
                {
                  (301502 call _freeIterator _iterator[301477])
                }
              }
              { scopeless type
                (301491 'move' _indexOfInterest[301476](301488 call iteratorIndex _iterator[301477]))
              }
              ForLoop[301478]
              {
                unknown x[301495] "index var" "insert auto destroy"
                (301497 'move' x[301495] _indexOfInterest[301476])
                {
                  unknown cpy[301442] "no auto destroy" x[301495]
                  (301445 'end of statement')
                  unknown src[301448] "ref var" cpy[301442]
                  (301451 'end of statement')
                  unknown dst[301456] "ref var"(301455 call(406176 call . this[304447] c"_getRef") i[301435])
                  (301459 'end of statement')
                  (301464 call(406181 call . this[304447] c"_move") src[301448] dst[301456])
                  (301468 call +=(406188 call . this[304447] c"_size") 1)
                  (301473 call += i[301435] 1)
                }
                label _continueLabel[301481]
                _indexOfInterest[301476]
                _iterator[301477]
              }
              label _breakLabel[301482]
            }
            (301511 call = result[301382] 1)
          }
        }
      }
      (301532 'on block' 0 tmp[301527])
    }
    (301536 return result[301382])
  }
  { scopeless type
    bool[10]
  }
  function list[304289](?).insert[301547](arg _mt[304453]:_MT[238], ref arg this[304451]:list[304289](?), arg idx[301544] :
  int(64)[13], arg arr[301555] :
  (301553 call chpl__buildArrayRuntimeType unknown d[301549](406196 call . this[304451] c"eltType"))) : _unknown[51] "method" "primary method"
  {
    unknown result[301566] 0
    (301569 'end of statement')
    const tmp[301597] "const" "temp"
    (301599 'move' tmp[301597](301595 'deref'(301594 '_wide_get_locale' this[304451])))
    {
      {
        (301574 call(406203 call . this[304451] c"_enter"))
        (301587 call = result[301566](301586 call(406210 call . this[304451] c"_insertGenericKnownSize") idx[301544] arr[301555](301583 call . arr[301555] c"size")))
        (301592 call(406216 call . this[304451] c"_leave"))
      }
      (301602 'on block' 0 tmp[301597])
    }
    (301606 return result[301566])
  }
  {
    (301563 call <(301560 'lifetime_of' this[304451])(301562 'lifetime_of' arr[301555]))
  }
  { scopeless type
    bool[10]
  }
  function list[304289](?).insert[301618](arg _mt[304457]:_MT[238], ref arg this[304455]:list[304289](?), arg idx[301615] :
  int(64)[13], arg lst[301624] :
  (301623 call list[304289](?)(406223 call . this[304455] c"eltType"))) : _unknown[51] "method" "primary method"
  {
    unknown result[301635] 0
    (301638 'end of statement')
    const size[301644] "const"(301641 call . lst[301624] c"size")
    (301647 'end of statement')
    const tmp[301671] "const" "temp"
    (301673 'move' tmp[301671](301669 'deref'(301668 '_wide_get_locale' this[304455])))
    {
      {
        (301651 call(406230 call . this[304455] c"_enter"))
        (301661 call = result[301635](301660 call(406235 call . this[304455] c"_insertGenericKnownSize") idx[301615] lst[301624] size[301644]))
        (301666 call(406242 call . this[304455] c"_leave"))
      }
      (301676 'on block' 0 tmp[301671])
    }
    (301680 return result[301635])
  }
  {
    (301632 call <(301629 'lifetime_of' this[304455])(301631 'lifetime_of' lst[301624]))
  }
  { scopeless type
    bool[10]
  }
  function list[304289](?).remove[301692](arg _mt[304461]:_MT[238], ref arg this[304459]:list[304289](?), arg x[301689] :
  (406248 call . this[304459] c"eltType"), arg count[301696] :
  int(64)[13] =
  1) : _unknown[51] "method" "primary method"
  {
    unknown result[301702] 0
    (301705 'end of statement')
    const tmp[301942] "const" "temp"
    (301944 'move' tmp[301942](301940 'deref'(301939 '_wide_get_locale' this[304459])))
    {
      {
        unknown src_i[301708] int(64)[13]
        unknown dst_i[301712](301716 'typeof' src_i[301708])
        (301717 'end of statement')
        unknown removed[301720] 0
        (301723 'end of statement')
        (301726 call = src_i[301708] 0)
        (301731 call(406255 call . this[304459] c"_enter"))
        {
          unknown tmp[301773] "temp"
          (301797 'move' tmp[301773](301792 call _cond_test(301794 call < dst_i[301712](406281 call . this[304459] c"_size"))))
          WhileDo[301778]
          {
            {
              unknown dst[301741] "ref var"(301740 call(406259 call . this[304459] c"_getRef") dst_i[301712])
              (301744 'end of statement')
              if(301764 call _cond_test(301748 call == dst[301741] x[301689]))
              {
                (301753 call(406266 call . this[304459] c"_destroy") dst[301741])
                (301758 call += removed[301720] 1)
                break _breakLabel[301777] _breakLabel[301777]
              }
              (301770 call += dst_i[301712] 1)
            }
            label _continueLabel[301776]
            (301787 'move' tmp[301773](301782 call _cond_test(301784 call < dst_i[301712](406275 call . this[304459] c"_size"))))
            tmp[301773]
          }
          label _breakLabel[301777]
        }
        (301805 call = src_i[301708](301803 call + dst_i[301712] 1))
        {
          unknown tmp[301884] "temp"
          (301908 'move' tmp[301884](301903 call _cond_test(301905 call < src_i[301708](406325 call . this[304459] c"_size"))))
          WhileDo[301889]
          {
            {
              unknown src[301816] "ref var"(301815 call(406287 call . this[304459] c"_getRef") src_i[301708])
              (301819 'end of statement')
              if(301856 call _cond_test(301835 call &&(301829 call ||(301823 call == count[301696] 0)(301827 call < removed[301720] count[301696]))(301833 call == src[301816] x[301689])))
              {
                (301840 call(406297 call . this[304459] c"_destroy") src[301816])
                (301845 call += src_i[301708] 1)
                (301850 call += removed[301720] 1)
                continue _continueLabel[301887] _continueLabel[301887]
              }
              unknown dst[301864] "ref var"(301863 call(406304 call . this[304459] c"_getRef") dst_i[301712])
              (301867 'end of statement')
              (301872 call(406309 call . this[304459] c"_move") src[301816] dst[301864])
              (301876 call += src_i[301708] 1)
              (301881 call += dst_i[301712] 1)
            }
            label _continueLabel[301887]
            (301898 'move' tmp[301884](301893 call _cond_test(301895 call < src_i[301708](406319 call . this[304459] c"_size"))))
            tmp[301884]
          }
          label _breakLabel[301888]
        }
        if(301926 call _cond_test removed[301720])
        {
          (301915 call(406330 call . this[304459] c"_maybeReleaseMem") removed[301720])
          (301923 call =(406336 call . this[304459] c"_size")(301921 call -(406341 call . this[304459] c"_size") removed[301720]))
        }
        (301932 call(406346 call . this[304459] c"_leave"))
        (301936 call = result[301702] removed[301720])
      }
      (301947 'on block' 0 tmp[301942])
    }
    (301951 return result[301702])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304289](?)._popAtIndex[301962](arg _mt[304465]:_MT[238], ref arg this[304463]:list[304289](?), arg idx[301959] :
  int(64)[13], arg unlockBeforeHalt[301965] =
  1) : _unknown[51] "method" "primary method" "no doc"
  {
    if(302008 call _cond_test(301974 call && 1(301972 call <=(406360 call . this[304463] c"_size") 0)))
    {
      if(301981 call _cond_test unlockBeforeHalt[301965])
      {
        (301979 call(406365 call . this[304463] c"_leave"))
      }
      (302006 call boundsCheckHalt "Called \"list.pop\" on an empty list.")
    }
    if(302065 call _cond_test(302020 call && 1(302018 call !(302017 call(406370 call . this[304463] c"_withinBounds") idx[301959]))))
    {
      if(302027 call _cond_test unlockBeforeHalt[301965])
      {
        (302025 call(406376 call . this[304463] c"_leave"))
      }
      const msg[302056] "const"(302054 call + "Index for \"list.pop\" out of bounds: "(302052 call _cast string[26] idx[301959]))
      (302059 'end of statement')
      (302063 call boundsCheckHalt msg[302056])
    }
    unknown item[302073] "ref var"(302072 call(406382 call . this[304463] c"_getRef") idx[301959])
    (302076 'end of statement')
    unknown result[302078] "no init"(406388 call . this[304463] c"eltType")
    (302081 'end of statement')
    (302086 call(406392 call . this[304463] c"_move") item[302073] result[302078])
    (302091 call(406400 call . this[304463] c"_collapse") idx[301959])
    (302095 call -=(406406 call . this[304463] c"_size") 1)
    (302099 return result[302078])
  }
  { scopeless type
    (406354 call . this[304463] c"eltType")
  }
  function list[304289](?).pop[302106](arg _mt[304469]:_MT[238], ref arg this[304467]:list[304289](?)) : _unknown[51] "method" "primary method"
  {
    (302111 call(406416 call . this[304467] c"_enter"))
    unknown result[302121](302120 call(406422 call . this[304467] c"_popAtIndex")(302117 call -(406427 call . this[304467] c"_size") 1))
    (302124 'end of statement')
    (302127 call(406431 call . this[304467] c"_leave"))
    (302130 return result[302121])
  }
  { scopeless type
    (406412 call . this[304467] c"eltType")
  }
  function list[304289](?).pop[302141](arg _mt[304473]:_MT[238], ref arg this[304471]:list[304289](?), arg idx[302138] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (302146 call(406441 call . this[304471] c"_enter"))
    unknown result[302153](302152 call(406445 call . this[304471] c"_popAtIndex") idx[302138])
    (302156 'end of statement')
    (302159 call(406450 call . this[304471] c"_leave"))
    (302162 return result[302153])
  }
  { scopeless type
    (406437 call . this[304471] c"eltType")
  }
  function list[304289](?)._fireAllDestructors[302169](arg _mt[304477]:_MT[238], arg this[304475]:list[304289](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    const tmp[302242] "const" "temp"
    (302244 'move' tmp[302242](302240 'deref'(302239 '_wide_get_locale' this[304475])))
    {
      {
        {
          unknown _indexOfInterest[302193] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302194] "expr temp" "temp"
          (302203 'move' _iterator[302194](302201 call _getIterator(302210 call chpl_direct_counted_range_iter 0(406467 call . this[304475] c"_size"))))
          Defer
          {
            {
              (302226 call _freeIterator _iterator[302194])
            }
          }
          { scopeless type
            (302215 'move' _indexOfInterest[302193](302212 call iteratorIndex _iterator[302194]))
          }
          ForLoop[302195]
          {
            unknown i[302219] "index var" "insert auto destroy"
            (302221 'move' i[302219] _indexOfInterest[302193])
            {
              unknown item[302183] "ref var"(302182 call(406456 call . this[304475] c"_getRef") i[302219])
              (302186 'end of statement')
              (302191 call(406461 call . this[304475] c"_destroy") item[302183])
            }
            label _continueLabel[302198]
            _indexOfInterest[302193]
            _iterator[302194]
          }
          label _breakLabel[302199]
        }
        (302236 call =(406472 call . this[304475] c"_size") 0)
      }
      (302247 'on block' 0 tmp[302242])
    }
    (302251 return _void[55])
  }
  function list[304289](?)._freeAllArrays[302257](arg _mt[304481]:_MT[238], arg this[304479]:list[304289](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(302265 call _cond_test(302261 call ==(406477 call . this[304479] c"_arrays") nil[44]))
    {
      (302263 return _void[55])
    }
    (302277 call _sanity(302274 call !=(406482 call . this[304479] c"_totalCapacity") 0))
    (302285 call _sanity(302282 call !=(406487 call . this[304479] c"_arrayCapacity") 0))
    const tmp[302408] "const" "temp"
    (302410 'move' tmp[302408](302406 'deref'(302405 '_wide_get_locale' this[304479])))
    {
      {
        {
          unknown _indexOfInterest[302340] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302341] "expr temp" "temp"
          (302350 'move' _iterator[302341](302348 call _getIterator(302357 call chpl_direct_counted_range_iter 0(406518 call . this[304479] c"_arrayCapacity"))))
          Defer
          {
            {
              (302373 call _freeIterator _iterator[302341])
            }
          }
          { scopeless type
            (302362 'move' _indexOfInterest[302340](302359 call iteratorIndex _iterator[302341]))
          }
          ForLoop[302342]
          {
            unknown i[302366] "index var" "insert auto destroy"
            (302368 'move' i[302366] _indexOfInterest[302340])
            {
              unknown array[302299] "ref var"(302298 call(406493 call . this[304479] c"_arrays") i[302366])
              (302302 'end of statement')
              if(302311 call _cond_test(302306 call == array[302299] nil[44]))
              {
                continue _continueLabel[302345] _continueLabel[302345]
              }
              const capacity[302320] "const"(302319 call(406499 call . this[304479] c"_getArrayCapacity") i[302366])
              (302323 'end of statement')
              (302326 call -=(406505 call . this[304479] c"_totalCapacity") capacity[302320])
              (302333 call(406510 call . this[304479] c"_freeArray") array[302299] capacity[302320])
              (302337 call = array[302299] nil[44])
            }
            label _continueLabel[302345]
            _indexOfInterest[302340]
            _iterator[302341]
          }
          label _breakLabel[302346]
        }
        (302387 call _sanity(302384 call ==(406523 call . this[304479] c"_totalCapacity") 0))
        (302393 call(406527 call . this[304479] c"_freeBlockArray")(406532 call . this[304479] c"_arrays")(406537 call . this[304479] c"_arrayCapacity"))
        (302397 call =(406542 call . this[304479] c"_arrays") nil[44])
        (302402 call =(406547 call . this[304479] c"_size") 0)
      }
      (302413 'on block' 0 tmp[302408])
    }
    (302416 return _void[55])
  }
  function list[304289](?).clear[302422](arg _mt[304485]:_MT[238], ref arg this[304483]:list[304289](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[302473] "const" "temp"
    (302475 'move' tmp[302473](302471 'deref'(302470 '_wide_get_locale' this[304483])))
    {
      {
        (302427 call(406552 call . this[304483] c"_enter"))
        (302432 call(406556 call . this[304483] c"_fireAllDestructors"))
        (302436 call(406560 call . this[304483] c"_freeAllArrays"))
        (302444 call _sanity(302441 call ==(406565 call . this[304483] c"_totalCapacity") 0))
        (302452 call _sanity(302449 call ==(406570 call . this[304483] c"_size") 0))
        (302460 call _sanity(302457 call ==(406575 call . this[304483] c"_arrays") nil[44]))
        (302464 call(406579 call . this[304483] c"_firstTimeInitializeArrays"))
        (302468 call(406583 call . this[304483] c"_leave"))
      }
      (302478 'on block' 0 tmp[302473])
    }
  }
  function list[304289](?).indexOf[302490](arg _mt[304489]:_MT[238], const arg this[304487]:list[304289](?), arg x[302487] :
  (406588 call . this[304487] c"eltType"), arg start[302494] :
  int(64)[13] =
  0, arg end[302502] :
  int(64)[13] =
  (302500 call - 1)) : _unknown[51] "method" "primary method"
  {
    if(302618 call _cond_test 1)
    {
      const msg[302525] "const" " index for \"list.indexOf\" out of bounds: "
      (302528 'end of statement')
      if(302572 call _cond_test(302540 call &&(302532 call >= end[302502] 0)(302538 call !(302537 call(406594 call . this[304487] c"_withinBounds") end[302502]))))
      {
        (302570 call boundsCheckHalt(302567 call +(302561 call + "End" msg[302525])(302565 call _cast string[26] end[302502])))
      }
      if(302613 call _cond_test(302581 call !(302580 call(406601 call . this[304487] c"_withinBounds") start[302494])))
      {
        (302611 call boundsCheckHalt(302608 call +(302602 call + "Start" msg[302525])(302606 call _cast string[26] start[302494])))
      }
    }
    unknown error[302626] "param"(302624 call - 1)
    (302629 'end of statement')
    if(302643 call _cond_test(302638 call &&(302632 call >= end[302502] 0)(302636 call < end[302502] start[302494])))
    {
      (302641 return error[302626])
    }
    unknown result[302649] error[302626]
    (302652 'end of statement')
    const tmp[302745] "const" "temp"
    (302747 'move' tmp[302745](302743 'deref'(302742 '_wide_get_locale' this[304487])))
    {
      {
        (302656 call(406614 call . this[304487] c"_enter"))
        const stop[302671] "const"(302668 IfExpr (302661 call < end[302502] 0) then
        { scopeless
          (302665 call -(406620 call . this[304487] c"_size") 1)
        } else
        { scopeless
          end[302502]
        } )
        (302674 'end of statement')
        {
          unknown _indexOfInterest[302700] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302701] "expr temp" "temp"
          (302710 'move' _iterator[302701](302708 call _getIterator(302715 call chpl_direct_range_iter start[302494] stop[302671] 1)))
          Defer
          {
            {
              (302731 call _freeIterator _iterator[302701])
            }
          }
          { scopeless type
            (302720 'move' _indexOfInterest[302700](302717 call iteratorIndex _iterator[302701]))
          }
          ForLoop[302702]
          {
            unknown i[302724] "index var" "insert auto destroy"
            (302726 'move' i[302724] _indexOfInterest[302700])
            if(302696 call _cond_test(302685 call == x[302487](302684 call(406626 call . this[304487] c"_getRef") i[302724])))
            {
              (302689 call = result[302649] i[302724])
              break _breakLabel[302706] _breakLabel[302706]
            }
            label _continueLabel[302705]
            _indexOfInterest[302700]
            _iterator[302701]
          }
          label _breakLabel[302706]
        }
        (302740 call(406635 call . this[304487] c"_leave"))
      }
      (302750 'on block' 0 tmp[302745])
    }
    (302754 return result[302649])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304289](?).count[302765](arg _mt[304493]:_MT[238], const arg this[304491]:list[304289](?), arg x[302762] :
  (406641 call . this[304491] c"eltType")) : _unknown[51] "method" "primary method"
  {
    unknown result[302769] 0
    (302772 'end of statement')
    const tmp[302846] "const" "temp"
    (302848 'move' tmp[302846](302844 'deref'(302843 '_wide_get_locale' this[304491])))
    {
      {
        (302777 call(406646 call . this[304491] c"_enter"))
        unknown count[302781] 0
        (302784 'end of statement')
        {
          unknown _indexOfInterest[302801] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302802] "expr temp" "temp"
          (302811 'move' _iterator[302802](302809 call _getIterator this[304491]))
          Defer
          {
            {
              (302827 call _freeIterator _iterator[302802])
            }
          }
          { scopeless type
            (302816 'move' _indexOfInterest[302801](302813 call iteratorIndex _iterator[302802]))
          }
          ForLoop[302803]
          {
            unknown item[302820] "index var" "insert auto destroy"
            (302822 'move' item[302820] _indexOfInterest[302801])
            if(302796 call _cond_test(302789 call == x[302762] item[302820]))
            {
              (302793 call += count[302781] 1)
            }
            label _continueLabel[302806]
            _indexOfInterest[302801]
            _iterator[302802]
          }
          label _breakLabel[302807]
        }
        (302836 call = result[302769] count[302781])
        (302841 call(406656 call . this[304491] c"_leave"))
      }
      (302851 'on block' 0 tmp[302846])
    }
    (302855 return result[302769])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304289](?).sort[302872](arg _mt[304497]:_MT[238], ref arg this[304495]:list[304289](?), arg comparator[302868] :
  unknown rec[302862] =
  defaultComparator[268065]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[302998] "const" "temp"
    (303000 'move' tmp[302998](302996 'deref'(302995 '_wide_get_locale' this[304495])))
    {
      {
        (302877 call(406662 call . this[304495] c"_enter"))
        if(302987 call _cond_test(302882 call >(406667 call . this[304495] c"_size") 1))
        {
          unknown arr[302896](302894 call chpl__buildArrayRuntimeType(302892 call chpl__ensureDomainExpr(302888 call #(302885 call chpl_build_low_bounded_range 0)(406672 call . this[304495] c"_size")))(406677 call . this[304495] c"eltType"))
          (302899 'end of statement')
          {
            unknown _indexOfInterest[302919] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[302920] "expr temp" "temp"
            (302929 'move' _iterator[302920](302927 call _getIterator(302936 call chpl_direct_counted_range_iter 0(406686 call . this[304495] c"_size"))))
            Defer
            {
              {
                (302952 call _freeIterator _iterator[302920])
              }
            }
            { scopeless type
              (302941 'move' _indexOfInterest[302919](302938 call iteratorIndex _iterator[302920]))
            }
            ForLoop[302921]
            {
              unknown i[302945] "index var" "insert auto destroy"
              (302947 'move' i[302945] _indexOfInterest[302919])
              (302916 call =(302911 call arr[302896] i[302945])(302915 call this[304495] i[302945]))
              label _continueLabel[302924]
              _indexOfInterest[302919]
              _iterator[302920]
            }
            label _breakLabel[302925]
          }
          (302968 call sort module=[255] Sort[268056] arr[302896] comparator[302868])
          (302972 call(406692 call . this[304495] c"_fireAllDestructors"))
          (302976 call(406696 call . this[304495] c"_freeAllArrays"))
          (302980 call(406700 call . this[304495] c"_firstTimeInitializeArrays"))
          (302985 call(406704 call . this[304495] c"_extendGeneric") arr[302896])
          (365061 'referenced modules list' Sort[268056])
        }
        (302993 call(406709 call . this[304495] c"_leave"))
      }
      (303003 'on block' 0 tmp[302998])
    }
    (303007 return _void[55])
  }
  function list[304289](?).this[303017](arg _mt[304501]:_MT[238], ref arg this[304499]:list[304289](?), arg i[303014] :
  int(64)[13]) ref : _unknown[51] "method" "primary method"
  {
    if(303061 call _cond_test(303026 call && 1(303024 call !(303023 call(406714 call . this[304499] c"_withinBounds") i[303014]))))
    {
      const msg[303051] "const"(303049 call + "Invalid list index: "(303047 call _cast string[26] i[303014]))
      (303054 'end of statement')
      (303059 call boundsCheckHalt msg[303051])
    }
    unknown result[303070] "ref var"(303069 call(406721 call . this[304499] c"_getRef") i[303014])
    (303073 'end of statement')
    (303075 return result[303070])
  }
  function list[304289](?).this[303085](arg _mt[304505]:_MT[238], const  ref arg this[304503]:list[304289](?), arg i[303082] :
  int(64)[13]) const ref : _unknown[51] "method" "primary method"
  {
    if(303113 call _cond_test(303094 call && 1(303092 call !(303091 call(406728 call . this[304503] c"_withinBounds") i[303082]))))
    {
      const msg[303103] "const"(303101 call + "Invalid list index: "(303099 call _cast string[26] i[303082]))
      (303106 'end of statement')
      (303111 call halt msg[303103])
    }
    const result[303122] "const" "ref var"(303121 call(406735 call . this[304503] c"_getRef") i[303082])
    (303125 'end of statement')
    (303127 return result[303122])
  }
  function list[304289](?).these[303133](arg _mt[304509]:_MT[238], arg this[304507]:list[304289](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[303154] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303155] "expr temp" "temp"
      (303164 'move' _iterator[303155](303162 call _getIterator(303171 call chpl_direct_counted_range_iter 0(406748 call . this[304507] c"_size"))))
      Defer
      {
        {
          (303187 call _freeIterator _iterator[303155])
        }
      }
      { scopeless type
        (303176 'move' _indexOfInterest[303154](303173 call iteratorIndex _iterator[303155]))
      }
      ForLoop[303156]
      {
        unknown i[303180] "index var" "insert auto destroy"
        (303182 'move' i[303180] _indexOfInterest[303154])
        {
          unknown result[303146] "ref var"(303145 call(406741 call . this[304507] c"_getRef") i[303180])
          (303149 'end of statement')
          (303152 yield result[303146])
        }
        label _continueLabel[303159]
        _indexOfInterest[303154]
        _iterator[303155]
      }
      label _breakLabel[303160]
    }
  }
  function list[304289](?).these[303203](arg _mt[304513]:_MT[238], arg this[304511]:list[304289](?), param arg tag[303200] :
  iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    const osz[303213] "const"(406755 call . this[304511] c"_size")
    (303216 'end of statement')
    const minChunkSize[303219] "const" 64
    (303222 'end of statement')
    const hasOneChunk[303227] "const"(303225 call <= osz[303213] minChunkSize[303219])
    (303230 'end of statement')
    const numTasks[303240] "const"(303237 IfExpr  hasOneChunk[303227] then
    { scopeless
      1
    } else
    { scopeless
      (303234 call .(365067 call here[90438]) c"maxTaskPar")
    } )
    (303243 'end of statement')
    const chunkSize[303254] "const"(303252 call _cast int(64)[13](303250 call floor(303247 call / osz[303213] numTasks[303240])))
    (303257 'end of statement')
    const trailing[303265] "const"(303263 call - osz[303213](303261 call * chunkSize[303254] numTasks[303240]))
    (303268 'end of statement')
    {
      unknown tmpIter[303332] "expr temp" "maybe ref" "no copy" "temp"
      (303335 'move' tmpIter[303332](303274 call #(303271 call chpl_build_low_bounded_range 0) numTasks[303240]))
      unknown isRngDomArr[303521] "maybe param" "temp"
      (303536 'move' isRngDomArr[303521](303534 call ||(303523 call isBoundedRange tmpIter[303332])(303532 call ||(303526 call isDomain tmpIter[303332])(303529 call isArray tmpIter[303332]))))
      if isRngDomArr[303521]
      {
        const _coforallCount[303388] "const" "end count" "temp"
        (303457 'move' _coforallCount[303388](303454 call _endCountAlloc 1))
        unknown numTasks[303389] "temp"
        (303441 'move' numTasks[303389](303437 call . tmpIter[303332] c"size"))
        (303432 call _upEndCount _coforallCount[303388] 1 numTasks[303389])
        (303429 call chpl_resetTaskSpawn numTasks[303389])
        unknown _indexOfInterest[303396] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303397] "expr temp" "temp"
        (303406 'move' _iterator[303397](303404 call _getIterator tmpIter[303332]))
        Defer
        {
          {
            (303422 call _freeIterator _iterator[303397])
          }
        }
        { scopeless type
          (303411 'move' _indexOfInterest[303396](303408 call iteratorIndex _iterator[303397]))
        }
        ForLoop[303398]
        {
          unknown tid[303415] "coforall index var" "index var" "insert auto destroy"
          (303417 'move' tid[303415] _indexOfInterest[303396])
          {
            {
              unknown chunk[303339](303341 call(406780 call . this[304511] c"_computeChunk") tid[303415] chunkSize[303254] trailing[303265])
              (303346 'end of statement')
              {
                unknown _indexOfInterest[303348] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[303350] "expr temp" "temp"
                (303352 'move' _iterator[303350](303355 call _getIterator(303357 call chunk[303339] 0)))
                Defer
                {
                  {
                    (303361 call _freeIterator _iterator[303350])
                  }
                }
                { scopeless type
                  (303365 'move' _indexOfInterest[303348](303368 call iteratorIndex _iterator[303350]))
                }
                ForLoop[303370]
                {
                  unknown i[303373] "index var" "insert auto destroy"
                  (303375 'move' i[303373] _indexOfInterest[303348])
                  (303379 yield(303381 call this[304511] i[303373]))
                  label _continueLabel[303383]
                  _indexOfInterest[303348]
                  _iterator[303350]
                }
                label _breakLabel[303385]
              }
            }
            (303391 call _downEndCount _coforallCount[303388] nil[44])
            (303390 'coforall loop')
          }
          label _continueLabel[303401]
          _indexOfInterest[303396]
          _iterator[303397]
        }
        label _breakLabel[303402]
        Defer
        {
          {
            (303444 call _endCountFree _coforallCount[303388])
          }
        }
        (303449 call _waitEndCount _coforallCount[303388] 1 numTasks[303389])
      }
      {
        const _coforallCount[303461] "const" "end count" "temp"
        (303518 'move' _coforallCount[303461](303515 call _endCountAlloc 1))
        unknown _indexOfInterest[303469] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303470] "expr temp" "temp"
        (303479 'move' _iterator[303470](303477 call _getIterator tmpIter[303332]))
        Defer
        {
          {
            (303495 call _freeIterator _iterator[303470])
          }
        }
        { scopeless type
          (303484 'move' _indexOfInterest[303469](303481 call iteratorIndex _iterator[303470]))
        }
        ForLoop[303471]
        {
          unknown tid[303488] "coforall index var" "index var" "insert auto destroy"
          (303490 'move' tid[303488] _indexOfInterest[303469])
          (303502 call _upEndCount _coforallCount[303461] 1)
          {
            {
              unknown chunk[303282](303281 call(406770 call . this[304511] c"_computeChunk") tid[303488] chunkSize[303254] trailing[303265])
              (303285 'end of statement')
              {
                unknown _indexOfInterest[303298] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[303299] "expr temp" "temp"
                (303308 'move' _iterator[303299](303306 call _getIterator(303291 call chunk[303282] 0)))
                Defer
                {
                  {
                    (303325 call _freeIterator _iterator[303299])
                  }
                }
                { scopeless type
                  (303314 'move' _indexOfInterest[303298](303311 call iteratorIndex _iterator[303299]))
                }
                ForLoop[303300]
                {
                  unknown i[303318] "index var" "insert auto destroy"
                  (303320 'move' i[303318] _indexOfInterest[303298])
                  (303296 yield(303295 call this[304511] i[303318]))
                  label _continueLabel[303303]
                  _indexOfInterest[303298]
                  _iterator[303299]
                }
                label _breakLabel[303304]
              }
            }
            (303464 call _downEndCount _coforallCount[303461] nil[44])
            (303463 'coforall loop')
          }
          label _continueLabel[303474]
          _indexOfInterest[303469]
          _iterator[303470]
        }
        label _breakLabel[303475]
        Defer
        {
          {
            (303506 call _endCountFree _coforallCount[303461])
          }
        }
        (303511 call _waitEndCount _coforallCount[303461] 1)
      }
    }
  }
  where {
    (303210 call == tag[303200] standalone[451])
  }
  function list[304289](?)._computeChunk[303547](arg _mt[304517]:_MT[238], arg this[304515]:list[304289](?), arg tid[303545]:_any[178](?), arg chunkSize[303549]:_any[178](?), arg trailing[303551]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown lo[303553] 0
    unknown hi[303557] lo[303553]
    (303561 'end of statement')
    if(303607 call _cond_test(303565 call <= tid[303545] 0))
    {
      (303569 call = lo[303553] 0)
      (303581 call = hi[303557](303579 call -(303576 call + chunkSize[303549] trailing[303551]) 1))
    }
    {
      (303592 call = lo[303553](303590 call +(303587 call * chunkSize[303549] tid[303545]) trailing[303551]))
      (303604 call = hi[303557](303602 call -(303599 call + lo[303553] chunkSize[303549]) 1))
    }
    (303617 return(303615 call _build_tuple(303613 call chpl_build_bounded_range lo[303553] hi[303557])))
  }
  function list[304289](?).these[303625](arg _mt[304521]:_MT[238], arg this[304519]:list[304289](?), param arg tag[303623]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    const osz[303635] "const"(406807 call . this[304519] c"_size")
    (303638 'end of statement')
    const minChunkSize[303641] "const" 32
    (303644 'end of statement')
    const hasOneChunk[303649] "const"(303647 call <= osz[303635] minChunkSize[303641])
    (303652 'end of statement')
    const numTasks[303659] "const"(303656 IfExpr  hasOneChunk[303649] then
    { scopeless
      1
    } else
    { scopeless
      dataParTasksPerLocale[93284]
    } )
    (303662 'end of statement')
    const chunkSize[303673] "const"(303671 call _cast int(64)[13](303669 call floor(303666 call / osz[303635] numTasks[303659])))
    (303676 'end of statement')
    const trailing[303684] "const"(303682 call - osz[303635](303680 call * chunkSize[303673] numTasks[303659]))
    (303687 'end of statement')
    {
      unknown tmpIter[303709] "expr temp" "maybe ref" "no copy" "temp"
      (303712 'move' tmpIter[303709](303693 call #(303690 call chpl_build_low_bounded_range 0) numTasks[303659]))
      unknown isRngDomArr[303860] "maybe param" "temp"
      (303875 'move' isRngDomArr[303860](303873 call ||(303862 call isBoundedRange tmpIter[303709])(303871 call ||(303865 call isDomain tmpIter[303709])(303868 call isArray tmpIter[303709]))))
      if isRngDomArr[303860]
      {
        const _coforallCount[303727] "const" "end count" "temp"
        (303796 'move' _coforallCount[303727](303793 call _endCountAlloc 1))
        unknown numTasks[303728] "temp"
        (303780 'move' numTasks[303728](303776 call . tmpIter[303709] c"size"))
        (303771 call _upEndCount _coforallCount[303727] 1 numTasks[303728])
        (303768 call chpl_resetTaskSpawn numTasks[303728])
        unknown _indexOfInterest[303735] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303736] "expr temp" "temp"
        (303745 'move' _iterator[303736](303743 call _getIterator tmpIter[303709]))
        Defer
        {
          {
            (303761 call _freeIterator _iterator[303736])
          }
        }
        { scopeless type
          (303750 'move' _indexOfInterest[303735](303747 call iteratorIndex _iterator[303736]))
        }
        ForLoop[303737]
        {
          unknown tid[303754] "coforall index var" "index var" "insert auto destroy"
          (303756 'move' tid[303754] _indexOfInterest[303735])
          {
            {
              unknown chunk[303716](303718 call(406829 call . this[304519] c"_computeChunk") tid[303754] chunkSize[303673] trailing[303684])
              (303723 'end of statement')
              (303724 yield chunk[303716])
            }
            (303730 call _downEndCount _coforallCount[303727] nil[44])
            (303729 'coforall loop')
          }
          label _continueLabel[303740]
          _indexOfInterest[303735]
          _iterator[303736]
        }
        label _breakLabel[303741]
        Defer
        {
          {
            (303783 call _endCountFree _coforallCount[303727])
          }
        }
        (303788 call _waitEndCount _coforallCount[303727] 1 numTasks[303728])
      }
      {
        const _coforallCount[303800] "const" "end count" "temp"
        (303857 'move' _coforallCount[303800](303854 call _endCountAlloc 1))
        unknown _indexOfInterest[303808] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303809] "expr temp" "temp"
        (303818 'move' _iterator[303809](303816 call _getIterator tmpIter[303709]))
        Defer
        {
          {
            (303834 call _freeIterator _iterator[303809])
          }
        }
        { scopeless type
          (303823 'move' _indexOfInterest[303808](303820 call iteratorIndex _iterator[303809]))
        }
        ForLoop[303810]
        {
          unknown tid[303827] "coforall index var" "index var" "insert auto destroy"
          (303829 'move' tid[303827] _indexOfInterest[303808])
          (303841 call _upEndCount _coforallCount[303800] 1)
          {
            {
              unknown chunk[303701](303700 call(406821 call . this[304519] c"_computeChunk") tid[303827] chunkSize[303673] trailing[303684])
              (303704 'end of statement')
              (303707 yield chunk[303701])
            }
            (303803 call _downEndCount _coforallCount[303800] nil[44])
            (303802 'coforall loop')
          }
          label _continueLabel[303813]
          _indexOfInterest[303808]
          _iterator[303809]
        }
        label _breakLabel[303814]
        Defer
        {
          {
            (303845 call _endCountFree _coforallCount[303800])
          }
        }
        (303850 call _waitEndCount _coforallCount[303800] 1)
      }
    }
  }
  where {
    (303632 call == tag[303623] leader[447])
  }
  function list[304289](?).these[303886](arg _mt[304525]:_MT[238], arg this[304523]:list[304289](?), param arg tag[303884]:_any[178](?), arg followThis[303888]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[303908] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303909] "expr temp" "temp"
      (303918 'move' _iterator[303909](303916 call _getIterator(303901 call followThis[303888] 0)))
      Defer
      {
        {
          (303935 call _freeIterator _iterator[303909])
        }
      }
      { scopeless type
        (303924 'move' _indexOfInterest[303908](303921 call iteratorIndex _iterator[303909]))
      }
      ForLoop[303910]
      {
        unknown i[303928] "index var" "insert auto destroy"
        (303930 'move' i[303928] _indexOfInterest[303908])
        (303906 yield(303905 call this[304523] i[303928]))
        label _continueLabel[303913]
        _indexOfInterest[303908]
        _iterator[303909]
      }
      label _breakLabel[303914]
    }
  }
  where {
    (303895 call == tag[303884] follower[449])
  }
  function list[304289](?).readWriteThis[303952](arg _mt[304529]:_MT[238], arg this[304527]:list[304289](?), arg ch[303949] :
  channel[237818](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (303956 call(406842 call . this[304527] c"_enter"))
    (303961 call <~> ch[303949] "[")
    {
      unknown _indexOfInterest[303983] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303984] "expr temp" "temp"
      (303993 'move' _iterator[303984](303991 call _getIterator(304001 call chpl_direct_range_iter 0(303998 call -(406854 call . this[304527] c"_size") 2) 1)))
      Defer
      {
        {
          (304017 call _freeIterator _iterator[303984])
        }
      }
      { scopeless type
        (304006 'move' _indexOfInterest[303983](304003 call iteratorIndex _iterator[303984]))
      }
      ForLoop[303985]
      {
        unknown i[304010] "index var" "insert auto destroy"
        (304012 'move' i[304010] _indexOfInterest[303983])
        (303980 call <~>(303977 call <~> ch[303949](303976 call(406848 call . this[304527] c"_getRef") i[304010])) ", ")
        label _continueLabel[303988]
        _indexOfInterest[303983]
        _iterator[303984]
      }
      label _breakLabel[303989]
    }
    if(304039 call _cond_test(304026 call >(406859 call . this[304527] c"_size") 0))
    {
      (304036 call <~> ch[303949](304035 call(406864 call . this[304527] c"_getRef")(304032 call -(406869 call . this[304527] c"_size") 1)))
    }
    (304046 call <~> ch[303949] "]")
    (304051 call(406874 call . this[304527] c"_leave"))
  }
  function list[304289](?).isEmpty[304057](arg _mt[304533]:_MT[238], const arg this[304531]:list[304289](?)) : _unknown[51] "method" "primary method"
  {
    (304062 call(406878 call . this[304531] c"_enter"))
    unknown result[304069](304067 call ==(406883 call . this[304531] c"_size") 0)
    (304072 'end of statement')
    (304075 call(406887 call . this[304531] c"_leave"))
    (304078 return result[304069])
  }
  { scopeless type
    bool[10]
  }
  function list[304289](?).size[304085](arg _mt[304537]:_MT[238], const arg this[304535]:list[304289](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown result[304088] 0
    (304091 'end of statement')
    const tmp[304111] "const" "temp"
    (304113 'move' tmp[304111](304109 'deref'(304108 '_wide_get_locale' this[304535])))
    {
      {
        (304096 call(406893 call . this[304535] c"_enter"))
        (304101 call = result[304088](406899 call . this[304535] c"_size"))
        (304106 call(406903 call . this[304535] c"_leave"))
      }
      (304116 'on block' 0 tmp[304111])
    }
    (304120 return result[304088])
  }
  function list[304289](?).indices[304126](arg _mt[304541]:_MT[238], arg this[304539]:list[304289](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (304138 return(304136 call chpl_build_bounded_range 0(304134 call -(304130 call . this[304539] c"size") 1)))
  }
  function list[304289](?).toArray[304145](arg _mt[304545]:_MT[238], const arg this[304543]:list[304289](?)) : _unknown[51] "method" "primary method"
  {
    if(304203 call _cond_test(304159 call &&(304154 call isNonNilableClass(406914 call . this[304543] c"eltType"))(304158 call isOwnedClass(406919 call . this[304543] c"eltType"))))
    {
      (304201 call compilerError "toArray() method is not available on a 'list'" " with elements of a non-nilable owned type, here: "(304199 call _cast string[26](406924 call . this[304543] c"eltType")))
    }
    unknown result[304221] "unsafe"(304219 call chpl__buildArrayRuntimeType(304217 call chpl__ensureDomainExpr(304213 call #(304210 call chpl_build_low_bounded_range 0)(406929 call . this[304543] c"_size")))(406934 call . this[304543] c"eltType"))
    (304224 'end of statement')
    const tmp[304274] "const" "temp"
    (304276 'move' tmp[304274](304272 'deref'(304271 '_wide_get_locale' this[304543])))
    {
      {
        (304228 call(406939 call . this[304543] c"_enter"))
        unknown tmp[304258](304254 forall  i[304256]  in (304248 call #(304245 call chpl_build_low_bounded_range 0)(406955 call . this[304543] c"_size")) do
        {
          (304253 call(406959 call . this[304543] c"_getRef") i[304256])
        } )(304241 call chpl__buildArrayRuntimeType(304239 call chpl__ensureDomainExpr(304235 call #(304232 call chpl_build_low_bounded_range 0)(406944 call . this[304543] c"_size")))(406949 call . this[304543] c"eltType"))
        (304261 'end of statement')
        (304264 call = result[304221] tmp[304258])
        (304269 call(406966 call . this[304543] c"_leave"))
      }
      (304279 'on block' 0 tmp[304274])
    }
    (304283 return result[304221])
  }
  { scopeless type
    (304148 call chpl__buildArrayRuntimeType nil[44](406909 call . this[304543] c"eltType"))
  }
  type list[304289](?) unknown eltType[298537] "type variable" unknown parSafe[298541] "param" 0 unknown _size[298546] "no doc" 0 unknown _lock$[298559] "no doc"(298556 IfExpr  parSafe[298541] then
  { scopeless
    (298551 'new'(298554 call _LockWrapper[405313](?)))
  } else
  { scopeless
    none[57]
  } ) unknown _arrays[298571] "no doc" nil[44](298569 call _ddata[11696](?)(298567 call _ddata[11696](?) eltType[298537])) unknown _arrayCapacity[298576] "no doc" 0 unknown _totalCapacity[298581] "no doc" 0 unknown _dummyFieldToForceBorrowChecking[298589] "no doc"(298588 call _dummyFieldType eltType[298537])
  function =[304559](ref arg lhs[304556] :
  (304555 call list[304289](?) unknown t[304551] ?[260]), arg rhs[304566] :
  (304565 call list[304289](?) t[304551] ?[260])) : _unknown[51] "assignop" "no return value for void"
  {
    (304574 call(304570 call . lhs[304556] c"clear"))
    (304585 call(304580 call . lhs[304556] c"extend") rhs[304566])
  }
  function ==[304600](arg a[304597] :
  (304596 call list[304289](?) unknown t[304592] ?[260]), arg b[304607] :
  (304606 call list[304289](?) t[304592] ?[260])) : _unknown[51]
  {
    if(304624 call _cond_test(304619 call !=(304612 call . a[304597] c"size")(304616 call . b[304607] c"size")))
    {
      (304622 return 0)
    }
    {
      unknown _indexOfInterest[304658] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[304659] "expr temp" "temp"
      (304668 'move' _iterator[304659](304666 call _getIterator(304678 call chpl_direct_counted_range_iter 0(304674 call . a[304597] c"size"))))
      Defer
      {
        {
          (304694 call _freeIterator _iterator[304659])
        }
      }
      { scopeless type
        (304683 'move' _indexOfInterest[304658](304680 call iteratorIndex _iterator[304659]))
      }
      ForLoop[304660]
      {
        unknown i[304687] "index var" "insert auto destroy"
        (304689 'move' i[304687] _indexOfInterest[304658])
        if(304653 call _cond_test(304648 call !=(304643 call a[304597] i[304687])(304647 call b[304607] i[304687])))
        {
          (304651 return 0)
        }
        label _continueLabel[304663]
        _indexOfInterest[304658]
        _iterator[304659]
      }
      label _breakLabel[304664]
    }
    (304702 return 1)
  }
  { scopeless type
    bool[10]
  }
  function !=[304718](arg a[304715] :
  (304714 call list[304289](?) unknown t[304710] ?[260]), arg b[304725] :
  (304724 call list[304289](?) t[304710] ?[260])) : _unknown[51]
  {
    (304735 return(304733 call !(304731 call == a[304715] b[304725])))
  }
  { scopeless type
    bool[10]
  }
  (355622 'used modules list'(353169 'use' ChapelStandard[20267])(298314 'import' ChapelLocks[187302])(298318 'use' HaltWrappers[210085])(298321 'use' Sort[268056])(298534 'use' IO[230979]))
  (365004 'referenced modules list' ChapelLocks[187302] Sort[268056])
}