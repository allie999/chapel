AST dump for List after pass flattenClasses.
Module use list: ChapelStandard ChapelLocks HaltWrappers Sort IO 

{
  const _initialCapacity[298140] "const" "no doc" "private" 8
  (298143 'end of statement')
  const _initialArrayCapacity[298145] "const" "no doc" "private" 16
  (298148 'end of statement')
  unknown _sanityChecks[298150] "no doc" "param" "private" 0
  (298153 'end of statement')
  function _sanity[298160](arg expr[298157] :
  bool[10]) : _unknown[51] "inline" "private" "no return value for void"
  {
    if(298168 call _cond_test _sanityChecks[298150])
    {
      (298166 call assert expr[298157])
    }
  }
  unknown _lockType[298182] "no doc" "type variable" chpl_LocalSpinlock[187386]
  function _LockWrapper[298223].lock[298196](arg _mt[298227]:_MT[238], arg this[298225]:_LockWrapper[298223]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (298203 call(298199 call .(364812 call . this[298225] c"lock$") c"lock"))
  }
  function _LockWrapper[298223].unlock[298210](arg _mt[298231]:_MT[238], arg this[298229]:_LockWrapper[298223]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (298217 call(298213 call .(364817 call . this[298229] c"lock$") c"unlock"))
  }
  type _LockWrapper[298223] val super[355684]:object[22] "super class" unknown lock$[298190](298186 'new'(298189 call _lockType[298182]))
  type _LockWrapper[405108](?)
  function _checkType[298238](arg eltType[298236]:_any[178](?)) : _unknown[51] "no doc" "no return value for void"
  {
    if(298316 call _cond_test(298243 call isGenericType eltType[298236]))
    {
      (298269 call compilerWarning(298266 call + "creating a list with element type "(298264 call _cast string[26] eltType[298236])))
      if(298291 call _cond_test(298283 call &&(298275 call isClassType eltType[298236])(298281 call !(298280 call isGenericType(298278 'to borrowed class from unknown' eltType[298236])))))
      {
        (298288 call compilerWarning "which now means class type with generic management")
      }
      (298314 call compilerError "list element type cannot currently be generic")
    }
  }
  function _dummyFieldType[298327](arg t[298325]:_any[178](?)) type : _unknown[51] "no doc"
  {
    if(298342 call _cond_test(298332 call isBorrowedClass t[298325]))
    {
      (298335 return(298334 'to nilable class from type' t[298325]))
    }
    {
      (298339 return nothing[7])
    }
  }
  function list[304105](?).init[298413](arg _mt[304109]:_MT[238], arg this[304107]:list[304105](?), arg eltType[298411]:_any[178](?), param arg parSafe[298416] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (298422 call _checkType eltType[298411])
    (298430 call =(298426 call . this[304107] c"eltType") eltType[298411])
    (298438 call =(298434 call . this[304107] c"parSafe") parSafe[298416])
    (298446 call(298442 call . this[304107] c"complete"))
    (298455 call(298451 call . this[304107] c"_firstTimeInitializeArrays"))
  }
  function list[304105](?).init[298469](arg _mt[304113]:_MT[238], arg this[304111]:list[304105](?), arg other[298466] :
  (298465 call list[304105](?) unknown t[298462]), param arg parSafe[298472] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(298525 call _cond_test(298483 call !(298482 call isCopyableType(298478 call .(298477 'typeof' this[304111]) c"eltType"))))
    {
      (298523 call compilerError(298520 call + "Cannot copy list with element type that " "cannot be copied"))
    }
    (298536 call =(298532 call . this[304111] c"eltType") t[298462])
    (298544 call =(298540 call . this[304111] c"parSafe") parSafe[298472])
    (298552 call(298548 call . this[304111] c"complete"))
    (298557 call(405125 call . this[304111] c"_commonInitFromIterable") other[298466])
  }
  function list[304105](?).init[298573](arg _mt[304117]:_MT[238], arg this[304115]:list[304105](?), arg other[298570] :
  (298568 call chpl__buildArrayRuntimeType unknown d[298563] unknown t[298566]), param arg parSafe[298576] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (298582 call _checkType t[298566])
    if(298631 call _cond_test(298589 call !(298588 call isCopyableType t[298566])))
    {
      (298629 call compilerError(298626 call + "Cannot construct list from array with element " "type that cannot be copied"))
    }
    (298641 call =(298637 call . this[304115] c"eltType") t[298566])
    (298649 call =(298645 call . this[304115] c"parSafe") parSafe[298576])
    (298657 call(298653 call . this[304115] c"complete"))
    (298662 call(405134 call . this[304115] c"_commonInitFromIterable") other[298570])
  }
  function list[304105](?).init[298676](arg _mt[304121]:_MT[238], arg this[304119]:list[304105](?), arg other[298673] :
  (298672 call range[64316](?) unknown t[298669]), param arg parSafe[298679] =
  0) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (298685 call _checkType t[298669])
    (298693 call =(298689 call . this[304119] c"eltType") t[298669])
    (298701 call =(298697 call . this[304119] c"parSafe") parSafe[298679])
    if(298780 call _cond_test(298708 call !(298707 call isBoundedRange other[298673])))
    {
      unknown e[298715] "param"(298713 call _cast string[26](298711 'typeof' this[304119]))
      (298718 'end of statement')
      unknown f[298725] "param"(298723 call _cast string[26](298721 'typeof' other[298673]))
      (298728 'end of statement')
      unknown msg[298771] "param"(298769 call +(298766 call +(298747 call + "Cannot init " e[298715]) " from unbounded ") f[298725])
      (298774 'end of statement')
      (298778 call compilerError msg[298771])
    }
    (298789 call(298785 call . this[304119] c"complete"))
    (298794 call(405149 call . this[304119] c"_commonInitFromIterable") other[298673])
  }
  function list[304105](?).init=[298813](arg _mt[304125]:_MT[238], arg this[304123]:list[304105](?), arg other[298810] :
  (298809 call list[304105](?)(298803 call .(298802 'typeof' this[304123]) c"eltType") unknown p[298807])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(298833 call _cond_test(298823 call !(298822 call isCopyableType(298818 call .(298817 'typeof' this[304123]) c"eltType"))))
    {
      (298831 call compilerError(298828 call + "Cannot copy list with element type that " "cannot be copied"))
    }
    (298848 call =(298840 call . this[304123] c"eltType")(298845 call .(298844 'typeof' this[304123]) c"eltType"))
    (298860 call =(298852 call . this[304123] c"parSafe")(298857 call .(298856 'typeof' this[304123]) c"parSafe"))
    (298868 call(298864 call . this[304123] c"complete"))
    (298873 call(405159 call . this[304123] c"_commonInitFromIterable") other[298810])
  }
  function list[304105](?).init=[298892](arg _mt[304129]:_MT[238], arg this[304127]:list[304105](?), arg other[298889] :
  (298887 call chpl__buildArrayRuntimeType unknown d[298879](298884 call .(298883 'typeof' this[304127]) c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(298944 call _cond_test(298902 call !(298901 call isCopyableType(298897 call .(298896 'typeof' this[304127]) c"eltType"))))
    {
      (298942 call compilerError(298939 call + "Cannot copy list from array with element type " "that cannot be copied"))
    }
    (298959 call =(298951 call . this[304127] c"eltType")(298956 call .(298955 'typeof' this[304127]) c"eltType"))
    (298971 call =(298963 call . this[304127] c"parSafe")(298968 call .(298967 'typeof' this[304127]) c"parSafe"))
    (298979 call(298975 call . this[304127] c"complete"))
    (298984 call(405168 call . this[304127] c"_commonInitFromIterable") other[298889])
  }
  function list[304105](?).init=[299005](arg _mt[304133]:_MT[238], arg this[304131]:list[304105](?), arg other[299002] :
  (299001 call range[64316](?)(298993 call .(298992 'typeof' this[304131]) c"eltType") unknown b[298997] unknown d[298999])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (299016 call =(299008 call . this[304131] c"eltType")(299013 call .(299012 'typeof' this[304131]) c"eltType"))
    (299029 call =(299021 call . this[304131] c"parSafe")(299026 call .(299025 'typeof' this[304131]) c"parSafe"))
    if(299076 call _cond_test(299036 call !(299035 call isBoundedRange other[299002])))
    {
      unknown e[299043] "param"(299041 call _cast string[26](299039 'typeof' this[304131]))
      (299046 'end of statement')
      unknown f[299053] "param"(299051 call _cast string[26](299049 'typeof' other[299002]))
      (299056 'end of statement')
      unknown msg[299067] "param"(299065 call +(299062 call +(299059 call + "Cannot init " e[299043]) " from unbounded ") f[299053])
      (299070 'end of statement')
      (299074 call compilerError msg[299067])
    }
    (299085 call(299081 call . this[304131] c"complete"))
    (299090 call(405183 call . this[304131] c"_commonInitFromIterable") other[299002])
  }
  function list[304105](?)._commonInitFromIterable[299098](arg _mt[304137]:_MT[238], arg this[304135]:list[304105](?), arg iterable[299096]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299111 call(299107 call . this[304135] c"_firstTimeInitializeArrays"))
    {
      unknown _indexOfInterest[299121] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[299122] "expr temp" "temp"
      (299131 'move' _iterator[299122](299129 call _getIterator iterable[299096]))
      Defer
      {
        {
          (299147 call _freeIterator _iterator[299122])
        }
      }
      { scopeless type
        (299136 'move' _indexOfInterest[299121](299133 call iteratorIndex _iterator[299122]))
      }
      ForLoop[299123]
      {
        unknown x[299140] "index var" "insert auto destroy"
        (299142 'move' x[299140] _indexOfInterest[299121])
        (299119 call(405191 call . this[304135] c"append") x[299140])
        label _continueLabel[299126]
        _indexOfInterest[299121]
        _iterator[299122]
      }
      label _breakLabel[299127]
    }
  }
  {
    (299104 call <(299101 'lifetime_of' this[304135])(299103 'lifetime_of' iterable[299096]))
  }
  function list[304105](?)._firstTimeInitializeArrays[299159](arg _mt[304141]:_MT[238], arg this[304139]:list[304105](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299167 call _sanity(299164 call ==(405199 call . this[304139] c"_arrays") nil[44]))
    (299176 call _sanity(299173 call ==(405206 call . this[304139] c"_totalCapacity") 0))
    (299184 call _sanity(299181 call ==(405213 call . this[304139] c"_size") 0))
    (299191 call =(405218 call . this[304139] c"_arrays")(299190 call(405224 call . this[304139] c"_makeBlockArray") _initialArrayCapacity[298145]))
    (299196 call =(405232 call . this[304139] c"_arrayCapacity") _initialArrayCapacity[298145])
    (299207 call =(299202 call(405238 call . this[304139] c"_arrays") 0)(299206 call(405244 call . this[304139] c"_makeArray") _initialCapacity[298140]))
    (299212 call =(405250 call . this[304139] c"_totalCapacity") _initialCapacity[298140])
  }
  function list[304105](?).deinit[299219](arg _mt[304145]:_MT[238], arg this[304143]:list[304105](?)) : _unknown[51] "destructor" "inline" "method" "primary method" "no doc" "no return value for void"
  {
    (299223 call(405257 call . this[304143] c"_fireAllDestructors"))
    (299228 call(405263 call . this[304143] c"_freeAllArrays"))
    (299236 call _sanity(299233 call ==(405268 call . this[304143] c"_totalCapacity") 0))
    (299244 call _sanity(299241 call ==(405273 call . this[304143] c"_size") 0))
    (299252 call _sanity(299249 call ==(405278 call . this[304143] c"_arrays") nil[44]))
  }
  function list[304105](?)._destroy[299262](arg _mt[304149]:_MT[238], arg this[304147]:list[304105](?), ref arg item[299259] :
  (405283 call . this[304147] c"eltType")) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    (299267 call chpl__autoDestroy item[299259])
  }
  function list[304105](?)._move[299279](arg _mt[304153]:_MT[238], arg this[304151]:list[304105](?), ref arg src[299276] :
  unknown t[299274], ref arg dst[299282] :
  t[299274]) : _unknown[51] "inline" "method" "primary method" "no doc" "unsafe" "no return value for void"
  {
    (299295 '=' dst[299282] src[299276])
  }
  {
    (299289 call ==(299286 'lifetime_of' src[299276])(299288 'lifetime_of' dst[299282]))
  }
  function list[304105](?)._getArrayCapacity[299307](arg _mt[304157]:_MT[238], arg this[304155]:list[304105](?), arg array[299304] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const exp[299317] "const"(299315 call + array[299304](299314 call log2 _initialCapacity[298140]))
    (299320 'end of statement')
    const result[299326] "const"(299324 call ** 2 exp[299317])
    (299329 'end of statement')
    (299331 return result[299326])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304105](?)._getArrayIdx[299342](arg _mt[304161]:_MT[238], arg this[304159]:list[304105](?), arg zpos[299339] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const adj[299349] "const"(299347 call + zpos[299339] _initialCapacity[298140])
    (299352 'end of statement')
    const result[299364] "const"(299362 call -(299357 call log2 adj[299349])(299361 call log2 _initialCapacity[298140]))
    (299367 'end of statement')
    (299369 return result[299364])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304105](?)._getLastArrayIdx[299376](arg _mt[304165]:_MT[238], arg this[304163]:list[304105](?)) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const result[299386] "const"(299385 call(405304 call . this[304163] c"_getArrayIdx")(299382 call -(405309 call . this[304163] c"_size") 1))
    (299389 'end of statement')
    (299397 call _sanity(299394 call >= result[299386] 0))
    (299400 return result[299386])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304105](?)._getItemIdx[299411](arg _mt[304169]:_MT[238], arg this[304167]:list[304105](?), arg zpos[299408] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    const adj[299418] "const"(299416 call + zpos[299408] _initialCapacity[298140])
    (299421 'end of statement')
    const result[299433] "const"(299431 call ^ adj[299418](299429 call << 1(299428 call log2 adj[299418])))
    (299436 'end of statement')
    (299438 return result[299433])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304105](?)._getRef[299449](arg _mt[304173]:_MT[238], const  ref arg this[304171]:list[304105](?), arg idx[299446] :
  int(64)[13]) ref : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (299463 call _sanity(299460 call &&(299454 call >= idx[299446] 0)(299458 call < idx[299446](405323 call . this[304171] c"_totalCapacity"))))
    const arrayIdx[299470] "const"(299469 call(405327 call . this[304171] c"_getArrayIdx") idx[299446])
    (299473 'end of statement')
    const itemIdx[299478] "const"(299477 call(405334 call . this[304171] c"_getItemIdx") idx[299446])
    (299481 'end of statement')
    const array[299486] "const"(299485 call(405340 call . this[304171] c"_arrays") arrayIdx[299470])
    (299489 'end of statement')
    (299496 call _sanity(299493 call != array[299486] nil[44]))
    unknown result[299502] "ref var"(299501 call array[299486] itemIdx[299478])
    (299505 'end of statement')
    (299507 return result[299502])
  }
  function list[304105](?)._enter[299513](arg _mt[304177]:_MT[238], arg this[304175]:list[304105](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(299523 call _cond_test(405350 call . this[304175] c"parSafe"))
    {
      (299521 call(299517 call .(364847 call . this[304175] c"_lock$") c"lock"))
    }
  }
  function list[304105](?)._leave[299533](arg _mt[304181]:_MT[238], arg this[304179]:list[304105](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(299543 call _cond_test(405355 call . this[304179] c"parSafe"))
    {
      (299541 call(299537 call .(364852 call . this[304179] c"_lock$") c"unlock"))
    }
  }
  function list[304105](?)._withinBounds[299557](arg _mt[304185]:_MT[238], const arg this[304183]:list[304105](?), arg idx[299554] :
  int(64)[13]) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (299570 return(299568 call &&(299562 call >= idx[299554] 0)(299566 call < idx[299554](405362 call . this[304183] c"_size"))))
  }
  { scopeless type
    bool[10]
  }
  function list[304105](?)._boundsCheckLeaveOnThrow[299582](arg _mt[304189]:_MT[238], const arg this[304187]:list[304105](?), arg i[299579] :
  int(64)[13], arg umsg[299602] :
  string[26] =
  "") : _unknown[51] throws "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(299677 call _cond_test(299610 call !(299609 call(405368 call . this[304187] c"_withinBounds") i[299579])))
    {
      (299614 call(405375 call . this[304187] c"_leave"))
      const msg[299664] "const"(299661 IfExpr (299635 call != umsg[299602] "") then
      { scopeless
        umsg[299602]
      } else
      { scopeless
        (299659 call + "Index out of bounds: "(299657 call _cast string[26] i[299579]))
      } )
      (299667 'end of statement')
      (299675 'throw'(299670 'new'(_chpl_manager = _owned[30](?))(299674 call IllegalArgumentError[388690](?) msg[299664])))
    }
  }
  function list[304105](?)._makeBlockArray[299690](arg _mt[304193]:_MT[238], arg this[304191]:list[304105](?), arg size[299687] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (299700 return(299699 call _ddata_allocate(299696 call _ddata[11695](?)(405386 call . this[304191] c"eltType")) size[299687]))
  }
  function list[304105](?)._freeBlockArray[299717](arg _mt[304197]:_MT[238], arg this[304195]:list[304105](?), arg data[299714] :
  (299713 call _ddata[11695](?)(299711 call _ddata[11695](?)(405394 call . this[304195] c"eltType"))), arg size[299720] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299727 call _ddata_free data[299714] size[299720])
  }
  function list[304105](?)._makeArray[299738](arg _mt[304201]:_MT[238], arg this[304199]:list[304105](?), arg size[299735] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    (299747 return(299746 call _ddata_allocate(405401 call . this[304199] c"eltType") size[299735](initElts = 0)))
  }
  function list[304105](?)._freeArray[299761](arg _mt[304205]:_MT[238], arg this[304203]:list[304105](?), arg data[299758] :
  (299757 call _ddata[11695](?)(405408 call . this[304203] c"eltType")), arg size[299764] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (299771 call _ddata_free data[299758] size[299764])
  }
  function list[304105](?)._maybeAcquireMem[299782](arg _mt[304209]:_MT[238], arg this[304207]:list[304105](?), arg amount[299779] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    const remaining[299788] "const"(299786 call -(405415 call . this[304207] c"_totalCapacity")(405420 call . this[304207] c"_size"))
    (299791 'end of statement')
    (299799 call _sanity(299796 call >= remaining[299788] 0))
    if(299807 call _cond_test(299803 call >= remaining[299788] amount[299779]))
    {
      (299805 return _void[55])
    }
    unknown lastArrayIdx[299823](299820 IfExpr (299814 call ==(405428 call . this[304207] c"_size") 0) then
    { scopeless
      0
    } else
    { scopeless
      (299819 call(405434 call . this[304207] c"_getLastArrayIdx"))
    } )
    (299826 'end of statement')
    unknown req[299831](299829 call - amount[299779] remaining[299788])
    (299834 'end of statement')
    {
      unknown tmp[300034] "temp"
      (300058 'move' tmp[300034](300053 call _cond_test(300055 call > req[299831] 0)))
      WhileDo[300039]
      {
        {
          if(299944 call _cond_test(299844 call >= lastArrayIdx[299823](299842 call -(405442 call . this[304207] c"_arrayCapacity") 1)))
          {
            const tmp[299936] "const" "temp"
            (299938 'move' tmp[299936](299934 'deref'(299933 '_wide_get_locale' this[304207])))
            {
              {
                unknown _narrays[299854](299853 call(405447 call . this[304207] c"_makeBlockArray")(299850 call *(405452 call . this[304207] c"_arrayCapacity") 2))
                (299857 'end of statement')
                {
                  unknown _indexOfInterest[299877] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[299878] "expr temp" "temp"
                  (299887 'move' _iterator[299878](299885 call _getIterator(299894 call chpl_direct_counted_range_iter 0(405465 call . this[304207] c"_arrayCapacity"))))
                  Defer
                  {
                    {
                      (299910 call _freeIterator _iterator[299878])
                    }
                  }
                  { scopeless type
                    (299899 'move' _indexOfInterest[299877](299896 call iteratorIndex _iterator[299878]))
                  }
                  ForLoop[299879]
                  {
                    unknown i[299903] "index var" "insert auto destroy"
                    (299905 'move' i[299903] _indexOfInterest[299877])
                    (299874 call =(299869 call _narrays[299854] i[299903])(299873 call(405459 call . this[304207] c"_arrays") i[299903]))
                    label _continueLabel[299882]
                    _indexOfInterest[299877]
                    _iterator[299878]
                  }
                  label _breakLabel[299883]
                }
                (299921 call(405471 call . this[304207] c"_freeBlockArray")(405476 call . this[304207] c"_arrays")(405481 call . this[304207] c"_arrayCapacity"))
                (299925 call =(405486 call . this[304207] c"_arrays") _narrays[299854])
                (299930 call *=(405492 call . this[304207] c"_arrayCapacity") 2)
              }
              (299941 'on block' 0 tmp[299936])
            }
          }
          const tmp[300026] "const" "temp"
          (300028 'move' tmp[300026](300024 'deref'(300023 '_wide_get_locale' this[304207])))
          {
            {
              const oldLast[299955] "const"(299954 call(405498 call . this[304207] c"_arrays") lastArrayIdx[299823])
              (299958 'end of statement')
              const oldLastCapacity[299964] "const"(299963 call(405505 call . this[304207] c"_getArrayCapacity") lastArrayIdx[299823])
              (299967 'end of statement')
              (299970 call += lastArrayIdx[299823] 1)
              unknown newLast[299977] "ref var"(299976 call(405512 call . this[304207] c"_arrays") lastArrayIdx[299823])
              (299980 'end of statement')
              const newLastCapacity[299985] "const"(299983 call * oldLastCapacity[299964] 2)
              (299988 'end of statement')
              (299995 call _sanity(299992 call != oldLast[299955] nil[44]))
              (300003 call _sanity(300000 call == newLast[299977] nil[44]))
              (300010 call = newLast[299977](300009 call(405521 call . this[304207] c"_makeArray") newLastCapacity[299985]))
              (300015 call +=(405527 call . this[304207] c"_totalCapacity") newLastCapacity[299985])
              (300020 call -= req[299831] newLastCapacity[299985])
            }
            (300031 'on block' 0 tmp[300026])
          }
        }
        label _continueLabel[300037]
        (300048 'move' tmp[300034](300043 call _cond_test(300045 call > req[299831] 0)))
        tmp[300034]
      }
      label _breakLabel[300038]
    }
    (300061 return _void[55])
  }
  function list[304105](?)._maybeReleaseMem[300071](arg _mt[304213]:_MT[238], arg this[304211]:list[304105](?), arg amount[300068] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(300079 call _cond_test(300075 call <=(405537 call . this[304211] c"_totalCapacity") _initialCapacity[298140]))
    {
      (300077 return _void[55])
    }
    const lastArrayIdx[300088] "const"(300087 call(405542 call . this[304211] c"_getLastArrayIdx"))
    (300091 'end of statement')
    (300098 call _sanity(300095 call != lastArrayIdx[300088] 0))
    const lastArrayCapacity[300104] "const"(300103 call(405547 call . this[304211] c"_getArrayCapacity") lastArrayIdx[300088])
    (300107 'end of statement')
    const threshold[300112] "const"(300110 call -(405553 call . this[304211] c"_totalCapacity") lastArrayCapacity[300104])
    (300115 'end of statement')
    const nsize[300120] "const"(300118 call -(405559 call . this[304211] c"_size") amount[300068])
    (300123 'end of statement')
    if(300130 call _cond_test(300126 call > nsize[300120] threshold[300112]))
    {
      (300128 return _void[55])
    }
    unknown array[300139] "ref var"(300138 call(405567 call . this[304211] c"_arrays") lastArrayIdx[300088])
    (300142 'end of statement')
    (300149 call _sanity(300146 call != array[300139] nil[44]))
    (300155 call(405575 call . this[304211] c"_freeArray") array[300139] lastArrayCapacity[300104])
    (300159 call -=(405582 call . this[304211] c"_totalCapacity") lastArrayCapacity[300104])
    (300164 call = array[300139] nil[44])
  }
  function list[304105](?)._expand[300175](arg _mt[304217]:_MT[238], ref arg this[304215]:list[304105](?), arg idx[300172] :
  int(64)[13], arg shift[300179] :
  int(64)[13] =
  1) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (300189 call _sanity(300187 call(405588 call . this[304215] c"_withinBounds") idx[300172]))
    if(300198 call _cond_test(300194 call <= shift[300179] 0))
    {
      (300196 return _void[55])
    }
    const tmp[300302] "const" "temp"
    (300304 'move' tmp[300302](300300 'deref'(300299 '_wide_get_locale' this[304215])))
    {
      {
        (300207 call(405597 call . this[304215] c"_maybeAcquireMem") shift[300179])
        {
          unknown _indexOfInterest[300249] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300250] "expr temp" "temp"
          (300259 'move' _iterator[300250](300257 call _getIterator(300276 call chpl_direct_range_iter idx[300172](300273 call -(405625 call . this[304215] c"_size") 1)(300269 call - 1))))
          Defer
          {
            {
              (300292 call _freeIterator _iterator[300250])
            }
          }
          { scopeless type
            (300281 'move' _indexOfInterest[300249](300278 call iteratorIndex _iterator[300250]))
          }
          ForLoop[300251]
          {
            unknown i[300285] "index var" "insert auto destroy"
            (300287 'move' i[300285] _indexOfInterest[300249])
            {
              unknown src[300227] "ref var"(300226 call(405604 call . this[304215] c"_getRef") i[300285])
              (300230 'end of statement')
              unknown dst[300239] "ref var"(300238 call(405609 call . this[304215] c"_getRef")(300235 call + i[300285] shift[300179]))
              (300242 'end of statement')
              (300247 call(405617 call . this[304215] c"_move") src[300227] dst[300239])
            }
            label _continueLabel[300254]
            _indexOfInterest[300249]
            _iterator[300250]
          }
          label _breakLabel[300255]
        }
      }
      (300307 'on block' 0 tmp[300302])
    }
    (300310 return _void[55])
  }
  function list[304105](?)._collapse[300320](arg _mt[304221]:_MT[238], ref arg this[304219]:list[304105](?), arg idx[300317] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (300328 call _sanity(300326 call(405629 call . this[304219] c"_withinBounds") idx[300317]))
    if(300358 call _cond_test(300336 call == idx[300317](300334 call -(405636 call . this[304219] c"_size") 1)))
    {
      const tmp[300347] "const" "temp"
      (300349 'move' tmp[300347](300345 'deref'(300344 '_wide_get_locale' this[304219])))
      {
        (300342 call(405643 call . this[304219] c"_maybeReleaseMem") 1)
        (300352 'on block' 0 tmp[300347])
      }
      (300356 return _void[55])
    }
    const tmp[300447] "const" "temp"
    (300449 'move' tmp[300447](300445 'deref'(300444 '_wide_get_locale' this[304219])))
    {
      {
        {
          unknown _indexOfInterest[300397] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300398] "expr temp" "temp"
          (300407 'move' _iterator[300398](300405 call _getIterator(300415 call chpl_direct_range_iter idx[300317](300412 call -(405666 call . this[304219] c"_size") 2) 1)))
          Defer
          {
            {
              (300431 call _freeIterator _iterator[300398])
            }
          }
          { scopeless type
            (300420 'move' _indexOfInterest[300397](300417 call iteratorIndex _iterator[300398]))
          }
          ForLoop[300399]
          {
            unknown i[300424] "index var" "insert auto destroy"
            (300426 'move' i[300424] _indexOfInterest[300397])
            {
              unknown src[300378] "ref var"(300377 call(405648 call . this[304219] c"_getRef")(300374 call + i[300424] 1))
              (300381 'end of statement')
              unknown dst[300387] "ref var"(300386 call(405653 call . this[304219] c"_getRef") i[300424])
              (300390 'end of statement')
              (300395 call(405658 call . this[304219] c"_move") src[300378] dst[300387])
            }
            label _continueLabel[300402]
            _indexOfInterest[300397]
            _iterator[300398]
          }
          label _breakLabel[300403]
        }
        (300442 call(405670 call . this[304219] c"_maybeReleaseMem") 1)
      }
      (300452 'on block' 0 tmp[300447])
    }
    (300455 return _void[55])
  }
  function list[304105](?)._appendByRef[300465](arg _mt[304225]:_MT[238], ref arg this[304223]:list[304105](?), ref arg x[300462] :
  (405675 call . this[304223] c"eltType")) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    (300470 call(405679 call . this[304223] c"_maybeAcquireMem") 1)
    unknown src[300474] "ref var" x[300462]
    (300477 'end of statement')
    unknown dst[300482] "ref var"(300481 call(405684 call . this[304223] c"_getRef")(405689 call . this[304223] c"_size"))
    (300485 'end of statement')
    (300490 call(405693 call . this[304223] c"_move") src[300474] dst[300482])
    (300494 call +=(405700 call . this[304223] c"_size") 1)
  }
  function list[304105](?).append[300508](arg _mt[304229]:_MT[238], ref arg this[304227]:list[304105](?), in arg x[300505] :
  (300502 call . this[304227] c"eltType")) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (300518 call(405708 call . this[304227] c"_enter"))
    (300524 call(405714 call . this[304227] c"_appendByRef") x[300505])
    (300528 call(405719 call . this[304227] c"_leave"))
  }
  {
    (300514 call <(300511 'lifetime_of' this[304227])(300513 'lifetime_of' x[300505]))
  }
  function list[304105](?).contains[300539](arg _mt[304233]:_MT[238], const arg this[304231]:list[304105](?), arg x[300536] :
  (405724 call . this[304231] c"eltType")) : _unknown[51] "method" "primary method"
  {
    unknown result[300543] 0
    (300546 'end of statement')
    const tmp[300613] "const" "temp"
    (300615 'move' tmp[300613](300611 'deref'(300610 '_wide_get_locale' this[304231])))
    {
      {
        (300551 call(405729 call . this[304231] c"_enter"))
        {
          unknown _indexOfInterest[300573] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300574] "expr temp" "temp"
          (300583 'move' _iterator[300574](300581 call _getIterator this[304231]))
          Defer
          {
            {
              (300599 call _freeIterator _iterator[300574])
            }
          }
          { scopeless type
            (300588 'move' _indexOfInterest[300573](300585 call iteratorIndex _iterator[300574]))
          }
          ForLoop[300575]
          {
            unknown item[300592] "index var" "insert auto destroy"
            (300594 'move' item[300592] _indexOfInterest[300573])
            if(300569 call _cond_test(300558 call == item[300592] x[300536]))
            {
              (300562 call = result[300543] 1)
              break _breakLabel[300579] _breakLabel[300579]
            }
            label _continueLabel[300578]
            _indexOfInterest[300573]
            _iterator[300574]
          }
          label _breakLabel[300579]
        }
        (300608 call(405737 call . this[304231] c"_leave"))
      }
      (300618 'on block' 0 tmp[300613])
    }
    (300622 return result[300543])
  }
  { scopeless type
    bool[10]
  }
  function list[304105](?).first[300629](arg _mt[304237]:_MT[238], ref arg this[304235]:list[304105](?)) ref : _unknown[51] "method" "primary method"
  {
    (300633 call(405742 call . this[304235] c"_enter"))
    if(300669 call _cond_test(300641 call && 1(300639 call ==(405748 call . this[304235] c"_size") 0)))
    {
      (300645 call(405752 call . this[304235] c"_leave"))
      (300667 call boundsCheckHalt "Called \"list.first\" on an empty list.")
    }
    unknown result[300677] "ref var"(300676 call(405756 call . this[304235] c"_getRef") 0)
    (300680 'end of statement')
    (300683 call(405760 call . this[304235] c"_leave"))
    (300686 return result[300677])
  }
  function list[304105](?).last[300692](arg _mt[304241]:_MT[238], ref arg this[304239]:list[304105](?)) ref : _unknown[51] "method" "primary method"
  {
    (300696 call(405765 call . this[304239] c"_enter"))
    if(300732 call _cond_test(300704 call && 1(300702 call ==(405771 call . this[304239] c"_size") 0)))
    {
      (300708 call(405775 call . this[304239] c"_leave"))
      (300730 call boundsCheckHalt "Called \"list.last\" on an empty list.")
    }
    unknown result[300743] "ref var"(300742 call(405779 call . this[304239] c"_getRef")(300739 call -(405784 call . this[304239] c"_size") 1))
    (300746 'end of statement')
    (300749 call(405788 call . this[304239] c"_leave"))
    (300752 return result[300743])
  }
  function list[304105](?)._extendGeneric[300760](arg _mt[304245]:_MT[238], ref arg this[304243]:list[304105](?), arg collection[300758]:_any[178](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    const tmp[300813] "const" "temp"
    (300815 'move' tmp[300813](300811 'deref'(300810 '_wide_get_locale' this[304243])))
    {
      {
        {
          unknown _indexOfInterest[300776] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[300777] "expr temp" "temp"
          (300786 'move' _iterator[300777](300784 call _getIterator collection[300758]))
          Defer
          {
            {
              (300802 call _freeIterator _iterator[300777])
            }
          }
          { scopeless type
            (300791 'move' _indexOfInterest[300776](300788 call iteratorIndex _iterator[300777]))
          }
          ForLoop[300778]
          {
            unknown item[300795] "index var" "insert auto destroy"
            (300797 'move' item[300795] _indexOfInterest[300776])
            {
              unknown cpy[300766] "no auto destroy" item[300795]
              (300769 'end of statement')
              (300774 call(405796 call . this[304243] c"_appendByRef") cpy[300766])
            }
            label _continueLabel[300781]
            _indexOfInterest[300776]
            _iterator[300777]
          }
          label _breakLabel[300782]
        }
      }
      (300818 'on block' 0 tmp[300813])
    }
  }
  function list[304105](?).extend[300835](arg _mt[304249]:_MT[238], ref arg this[304247]:list[304105](?), arg other[300832] :
  (300831 call list[304105](?)(405803 call . this[304247] c"eltType") unknown p[300829])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[300861] "const" "temp"
    (300863 'move' tmp[300861](300859 'deref'(300858 '_wide_get_locale' this[304247])))
    {
      {
        (300846 call(405810 call . this[304247] c"_enter"))
        (300852 call(405816 call . this[304247] c"_extendGeneric") other[300832])
        (300856 call(405821 call . this[304247] c"_leave"))
      }
      (300866 'on block' 0 tmp[300861])
    }
  }
  {
    (300841 call <(300838 'lifetime_of' this[304247])(300840 'lifetime_of' other[300832]))
  }
  function list[304105](?).extend[300884](arg _mt[304253]:_MT[238], ref arg this[304251]:list[304105](?), arg other[300881] :
  (300879 call chpl__buildArrayRuntimeType unknown d[300875](405826 call . this[304251] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[300910] "const" "temp"
    (300912 'move' tmp[300910](300908 'deref'(300907 '_wide_get_locale' this[304251])))
    {
      {
        (300895 call(405833 call . this[304251] c"_enter"))
        (300901 call(405837 call . this[304251] c"_extendGeneric") other[300881])
        (300905 call(405842 call . this[304251] c"_leave"))
      }
      (300915 'on block' 0 tmp[300910])
    }
  }
  {
    (300890 call <(300887 'lifetime_of' this[304251])(300889 'lifetime_of' other[300881]))
  }
  function list[304105](?).extend[300935](arg _mt[304257]:_MT[238], ref arg this[304255]:list[304105](?), arg other[300932] :
  (300931 call range[64316](?)(405848 call . this[304255] c"eltType") unknown b[300927] unknown d[300929])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(301019 call _cond_test(300947 call !(300946 call isBoundedRange other[300932])))
    {
      unknown e[300954] "param"(300952 call _cast string[26](300950 'typeof' this[304255]))
      (300957 'end of statement')
      unknown f[300964] "param"(300962 call _cast string[26](300960 'typeof' other[300932]))
      (300967 'end of statement')
      unknown msg[301010] "param"(301008 call +(301005 call +(300986 call + "Cannot extend " e[300954]) " with unbounded ") f[300964])
      (301013 'end of statement')
      (301017 call compilerError msg[301010])
    }
    const tmp[301042] "const" "temp"
    (301044 'move' tmp[301042](301040 'deref'(301039 '_wide_get_locale' this[304255])))
    {
      {
        (301027 call(405861 call . this[304255] c"_enter"))
        (301033 call(405865 call . this[304255] c"_extendGeneric") other[300932])
        (301037 call(405870 call . this[304255] c"_leave"))
      }
      (301047 'on block' 0 tmp[301042])
    }
  }
  {
    (300941 call <(300938 'lifetime_of' this[304255])(300940 'lifetime_of' other[300932]))
  }
  function list[304105](?).insert[301059](arg _mt[304261]:_MT[238], ref arg this[304259]:list[304105](?), arg idx[301056] :
  int(64)[13], in arg x[301062] :
  (405875 call . this[304259] c"eltType")) : _unknown[51] "method" "primary method"
  {
    unknown result[301073] 0
    (301076 'end of statement')
    const tmp[301154] "const" "temp"
    (301156 'move' tmp[301154](301152 'deref'(301151 '_wide_get_locale' this[304259])))
    {
      {
        (301081 call(405882 call . this[304259] c"_enter"))
        if(301142 call _cond_test(301086 call == idx[301056](405888 call . this[304259] c"_size")))
        {
          (301091 call(405892 call . this[304259] c"_appendByRef") x[301062])
          (301096 call = result[301073] 1)
        }
        {
          if(301138 call _cond_test(301102 call(405898 call . this[304259] c"_withinBounds") idx[301056]))
          {
            (301106 call(405905 call . this[304259] c"_expand") idx[301056])
            unknown src[301110] "ref var" x[301062]
            (301113 'end of statement')
            unknown dst[301118] "ref var"(301117 call(405911 call . this[304259] c"_getRef") idx[301056])
            (301121 'end of statement')
            (301126 call(405916 call . this[304259] c"_move") src[301110] dst[301118])
            (301130 call +=(405923 call . this[304259] c"_size") 1)
            (301135 call = result[301073] 1)
          }
        }
        (301149 call(405928 call . this[304259] c"_leave"))
      }
      (301159 'on block' 0 tmp[301154])
    }
    if(301170 call _cond_test(301163 call ! result[301073]))
    {
      (301168 call(405935 call . this[304259] c"_destroy") x[301062])
    }
    (301176 return result[301073])
  }
  {
    (301070 call <(301067 'lifetime_of' this[304259])(301069 'lifetime_of' x[301062]))
  }
  { scopeless type
    bool[10]
  }
  function list[304105](?)._insertGenericKnownSize[301188](arg _mt[304265]:_MT[238], ref arg this[304263]:list[304105](?), arg idx[301185] :
  int(64)[13], arg items[301190]:_any[178](?), arg size[301193] :
  int(64)[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown result[301198] 0
    (301201 'end of statement')
    (301209 call _sanity(301206 call >= size[301193] 0))
    if(301218 call _cond_test(301213 call == size[301193] 0))
    {
      (301216 return 1)
    }
    const tmp[301343] "const" "temp"
    (301345 'move' tmp[301343](301341 'deref'(301340 '_wide_get_locale' this[304263])))
    {
      {
        if(301334 call _cond_test(301226 call == idx[301185](405946 call . this[304263] c"_size")))
        {
          (301231 call(405950 call . this[304263] c"_extendGeneric") items[301190])
          (301236 call = result[301198] 1)
        }
        {
          if(301330 call _cond_test(301242 call(405956 call . this[304263] c"_withinBounds") idx[301185]))
          {
            (301247 call(405961 call . this[304263] c"_expand") idx[301185] size[301193])
            unknown i[301251] idx[301185]
            (301254 'end of statement')
            {
              unknown _indexOfInterest[301292] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[301293] "expr temp" "temp"
              (301302 'move' _iterator[301293](301300 call _getIterator items[301190]))
              Defer
              {
                {
                  (301318 call _freeIterator _iterator[301293])
                }
              }
              { scopeless type
                (301307 'move' _indexOfInterest[301292](301304 call iteratorIndex _iterator[301293]))
              }
              ForLoop[301294]
              {
                unknown x[301311] "index var" "insert auto destroy"
                (301313 'move' x[301311] _indexOfInterest[301292])
                {
                  unknown cpy[301258] "no auto destroy" x[301311]
                  (301261 'end of statement')
                  unknown src[301264] "ref var" cpy[301258]
                  (301267 'end of statement')
                  unknown dst[301272] "ref var"(301271 call(405971 call . this[304263] c"_getRef") i[301251])
                  (301275 'end of statement')
                  (301280 call(405976 call . this[304263] c"_move") src[301264] dst[301272])
                  (301284 call +=(405983 call . this[304263] c"_size") 1)
                  (301289 call += i[301251] 1)
                }
                label _continueLabel[301297]
                _indexOfInterest[301292]
                _iterator[301293]
              }
              label _breakLabel[301298]
            }
            (301327 call = result[301198] 1)
          }
        }
      }
      (301348 'on block' 0 tmp[301343])
    }
    (301352 return result[301198])
  }
  { scopeless type
    bool[10]
  }
  function list[304105](?).insert[301363](arg _mt[304269]:_MT[238], ref arg this[304267]:list[304105](?), arg idx[301360] :
  int(64)[13], arg arr[301371] :
  (301369 call chpl__buildArrayRuntimeType unknown d[301365](405991 call . this[304267] c"eltType"))) : _unknown[51] "method" "primary method"
  {
    unknown result[301382] 0
    (301385 'end of statement')
    const tmp[301413] "const" "temp"
    (301415 'move' tmp[301413](301411 'deref'(301410 '_wide_get_locale' this[304267])))
    {
      {
        (301390 call(405998 call . this[304267] c"_enter"))
        (301403 call = result[301382](301402 call(406005 call . this[304267] c"_insertGenericKnownSize") idx[301360] arr[301371](301399 call . arr[301371] c"size")))
        (301408 call(406011 call . this[304267] c"_leave"))
      }
      (301418 'on block' 0 tmp[301413])
    }
    (301422 return result[301382])
  }
  {
    (301379 call <(301376 'lifetime_of' this[304267])(301378 'lifetime_of' arr[301371]))
  }
  { scopeless type
    bool[10]
  }
  function list[304105](?).insert[301434](arg _mt[304273]:_MT[238], ref arg this[304271]:list[304105](?), arg idx[301431] :
  int(64)[13], arg lst[301440] :
  (301439 call list[304105](?)(406018 call . this[304271] c"eltType"))) : _unknown[51] "method" "primary method"
  {
    unknown result[301451] 0
    (301454 'end of statement')
    const size[301460] "const"(301457 call . lst[301440] c"size")
    (301463 'end of statement')
    const tmp[301487] "const" "temp"
    (301489 'move' tmp[301487](301485 'deref'(301484 '_wide_get_locale' this[304271])))
    {
      {
        (301467 call(406025 call . this[304271] c"_enter"))
        (301477 call = result[301451](301476 call(406030 call . this[304271] c"_insertGenericKnownSize") idx[301431] lst[301440] size[301460]))
        (301482 call(406037 call . this[304271] c"_leave"))
      }
      (301492 'on block' 0 tmp[301487])
    }
    (301496 return result[301451])
  }
  {
    (301448 call <(301445 'lifetime_of' this[304271])(301447 'lifetime_of' lst[301440]))
  }
  { scopeless type
    bool[10]
  }
  function list[304105](?).remove[301508](arg _mt[304277]:_MT[238], ref arg this[304275]:list[304105](?), arg x[301505] :
  (406043 call . this[304275] c"eltType"), arg count[301512] :
  int(64)[13] =
  1) : _unknown[51] "method" "primary method"
  {
    unknown result[301518] 0
    (301521 'end of statement')
    const tmp[301758] "const" "temp"
    (301760 'move' tmp[301758](301756 'deref'(301755 '_wide_get_locale' this[304275])))
    {
      {
        unknown src_i[301524] int(64)[13]
        unknown dst_i[301528](301532 'typeof' src_i[301524])
        (301533 'end of statement')
        unknown removed[301536] 0
        (301539 'end of statement')
        (301542 call = src_i[301524] 0)
        (301547 call(406050 call . this[304275] c"_enter"))
        {
          unknown tmp[301589] "temp"
          (301613 'move' tmp[301589](301608 call _cond_test(301610 call < dst_i[301528](406076 call . this[304275] c"_size"))))
          WhileDo[301594]
          {
            {
              unknown dst[301557] "ref var"(301556 call(406054 call . this[304275] c"_getRef") dst_i[301528])
              (301560 'end of statement')
              if(301580 call _cond_test(301564 call == dst[301557] x[301505]))
              {
                (301569 call(406061 call . this[304275] c"_destroy") dst[301557])
                (301574 call += removed[301536] 1)
                break _breakLabel[301593] _breakLabel[301593]
              }
              (301586 call += dst_i[301528] 1)
            }
            label _continueLabel[301592]
            (301603 'move' tmp[301589](301598 call _cond_test(301600 call < dst_i[301528](406070 call . this[304275] c"_size"))))
            tmp[301589]
          }
          label _breakLabel[301593]
        }
        (301621 call = src_i[301524](301619 call + dst_i[301528] 1))
        {
          unknown tmp[301700] "temp"
          (301724 'move' tmp[301700](301719 call _cond_test(301721 call < src_i[301524](406120 call . this[304275] c"_size"))))
          WhileDo[301705]
          {
            {
              unknown src[301632] "ref var"(301631 call(406082 call . this[304275] c"_getRef") src_i[301524])
              (301635 'end of statement')
              if(301672 call _cond_test(301651 call &&(301645 call ||(301639 call == count[301512] 0)(301643 call < removed[301536] count[301512]))(301649 call == src[301632] x[301505])))
              {
                (301656 call(406092 call . this[304275] c"_destroy") src[301632])
                (301661 call += src_i[301524] 1)
                (301666 call += removed[301536] 1)
                continue _continueLabel[301703] _continueLabel[301703]
              }
              unknown dst[301680] "ref var"(301679 call(406099 call . this[304275] c"_getRef") dst_i[301528])
              (301683 'end of statement')
              (301688 call(406104 call . this[304275] c"_move") src[301632] dst[301680])
              (301692 call += src_i[301524] 1)
              (301697 call += dst_i[301528] 1)
            }
            label _continueLabel[301703]
            (301714 'move' tmp[301700](301709 call _cond_test(301711 call < src_i[301524](406114 call . this[304275] c"_size"))))
            tmp[301700]
          }
          label _breakLabel[301704]
        }
        if(301742 call _cond_test removed[301536])
        {
          (301731 call(406125 call . this[304275] c"_maybeReleaseMem") removed[301536])
          (301739 call =(406131 call . this[304275] c"_size")(301737 call -(406136 call . this[304275] c"_size") removed[301536]))
        }
        (301748 call(406141 call . this[304275] c"_leave"))
        (301752 call = result[301518] removed[301536])
      }
      (301763 'on block' 0 tmp[301758])
    }
    (301767 return result[301518])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304105](?)._popAtIndex[301778](arg _mt[304281]:_MT[238], ref arg this[304279]:list[304105](?), arg idx[301775] :
  int(64)[13], arg unlockBeforeHalt[301781] =
  1) : _unknown[51] "method" "primary method" "no doc"
  {
    if(301824 call _cond_test(301790 call && 1(301788 call <=(406155 call . this[304279] c"_size") 0)))
    {
      if(301797 call _cond_test unlockBeforeHalt[301781])
      {
        (301795 call(406160 call . this[304279] c"_leave"))
      }
      (301822 call boundsCheckHalt "Called \"list.pop\" on an empty list.")
    }
    if(301881 call _cond_test(301836 call && 1(301834 call !(301833 call(406165 call . this[304279] c"_withinBounds") idx[301775]))))
    {
      if(301843 call _cond_test unlockBeforeHalt[301781])
      {
        (301841 call(406171 call . this[304279] c"_leave"))
      }
      const msg[301872] "const"(301870 call + "Index for \"list.pop\" out of bounds: "(301868 call _cast string[26] idx[301775]))
      (301875 'end of statement')
      (301879 call boundsCheckHalt msg[301872])
    }
    unknown item[301889] "ref var"(301888 call(406177 call . this[304279] c"_getRef") idx[301775])
    (301892 'end of statement')
    unknown result[301894] "no init"(406183 call . this[304279] c"eltType")
    (301897 'end of statement')
    (301902 call(406187 call . this[304279] c"_move") item[301889] result[301894])
    (301907 call(406195 call . this[304279] c"_collapse") idx[301775])
    (301911 call -=(406201 call . this[304279] c"_size") 1)
    (301915 return result[301894])
  }
  { scopeless type
    (406149 call . this[304279] c"eltType")
  }
  function list[304105](?).pop[301922](arg _mt[304285]:_MT[238], ref arg this[304283]:list[304105](?)) : _unknown[51] "method" "primary method"
  {
    (301927 call(406211 call . this[304283] c"_enter"))
    unknown result[301937](301936 call(406217 call . this[304283] c"_popAtIndex")(301933 call -(406222 call . this[304283] c"_size") 1))
    (301940 'end of statement')
    (301943 call(406226 call . this[304283] c"_leave"))
    (301946 return result[301937])
  }
  { scopeless type
    (406207 call . this[304283] c"eltType")
  }
  function list[304105](?).pop[301957](arg _mt[304289]:_MT[238], ref arg this[304287]:list[304105](?), arg idx[301954] :
  int(64)[13]) : _unknown[51] "method" "primary method"
  {
    (301962 call(406236 call . this[304287] c"_enter"))
    unknown result[301969](301968 call(406240 call . this[304287] c"_popAtIndex") idx[301954])
    (301972 'end of statement')
    (301975 call(406245 call . this[304287] c"_leave"))
    (301978 return result[301969])
  }
  { scopeless type
    (406232 call . this[304287] c"eltType")
  }
  function list[304105](?)._fireAllDestructors[301985](arg _mt[304293]:_MT[238], arg this[304291]:list[304105](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    const tmp[302058] "const" "temp"
    (302060 'move' tmp[302058](302056 'deref'(302055 '_wide_get_locale' this[304291])))
    {
      {
        {
          unknown _indexOfInterest[302009] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302010] "expr temp" "temp"
          (302019 'move' _iterator[302010](302017 call _getIterator(302026 call chpl_direct_counted_range_iter 0(406262 call . this[304291] c"_size"))))
          Defer
          {
            {
              (302042 call _freeIterator _iterator[302010])
            }
          }
          { scopeless type
            (302031 'move' _indexOfInterest[302009](302028 call iteratorIndex _iterator[302010]))
          }
          ForLoop[302011]
          {
            unknown i[302035] "index var" "insert auto destroy"
            (302037 'move' i[302035] _indexOfInterest[302009])
            {
              unknown item[301999] "ref var"(301998 call(406251 call . this[304291] c"_getRef") i[302035])
              (302002 'end of statement')
              (302007 call(406256 call . this[304291] c"_destroy") item[301999])
            }
            label _continueLabel[302014]
            _indexOfInterest[302009]
            _iterator[302010]
          }
          label _breakLabel[302015]
        }
        (302052 call =(406267 call . this[304291] c"_size") 0)
      }
      (302063 'on block' 0 tmp[302058])
    }
    (302067 return _void[55])
  }
  function list[304105](?)._freeAllArrays[302073](arg _mt[304297]:_MT[238], arg this[304295]:list[304105](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    if(302081 call _cond_test(302077 call ==(406272 call . this[304295] c"_arrays") nil[44]))
    {
      (302079 return _void[55])
    }
    (302093 call _sanity(302090 call !=(406277 call . this[304295] c"_totalCapacity") 0))
    (302101 call _sanity(302098 call !=(406282 call . this[304295] c"_arrayCapacity") 0))
    const tmp[302224] "const" "temp"
    (302226 'move' tmp[302224](302222 'deref'(302221 '_wide_get_locale' this[304295])))
    {
      {
        {
          unknown _indexOfInterest[302156] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302157] "expr temp" "temp"
          (302166 'move' _iterator[302157](302164 call _getIterator(302173 call chpl_direct_counted_range_iter 0(406313 call . this[304295] c"_arrayCapacity"))))
          Defer
          {
            {
              (302189 call _freeIterator _iterator[302157])
            }
          }
          { scopeless type
            (302178 'move' _indexOfInterest[302156](302175 call iteratorIndex _iterator[302157]))
          }
          ForLoop[302158]
          {
            unknown i[302182] "index var" "insert auto destroy"
            (302184 'move' i[302182] _indexOfInterest[302156])
            {
              unknown array[302115] "ref var"(302114 call(406288 call . this[304295] c"_arrays") i[302182])
              (302118 'end of statement')
              if(302127 call _cond_test(302122 call == array[302115] nil[44]))
              {
                continue _continueLabel[302161] _continueLabel[302161]
              }
              const capacity[302136] "const"(302135 call(406294 call . this[304295] c"_getArrayCapacity") i[302182])
              (302139 'end of statement')
              (302142 call -=(406300 call . this[304295] c"_totalCapacity") capacity[302136])
              (302149 call(406305 call . this[304295] c"_freeArray") array[302115] capacity[302136])
              (302153 call = array[302115] nil[44])
            }
            label _continueLabel[302161]
            _indexOfInterest[302156]
            _iterator[302157]
          }
          label _breakLabel[302162]
        }
        (302203 call _sanity(302200 call ==(406318 call . this[304295] c"_totalCapacity") 0))
        (302209 call(406322 call . this[304295] c"_freeBlockArray")(406327 call . this[304295] c"_arrays")(406332 call . this[304295] c"_arrayCapacity"))
        (302213 call =(406337 call . this[304295] c"_arrays") nil[44])
        (302218 call =(406342 call . this[304295] c"_size") 0)
      }
      (302229 'on block' 0 tmp[302224])
    }
    (302232 return _void[55])
  }
  function list[304105](?).clear[302238](arg _mt[304301]:_MT[238], ref arg this[304299]:list[304105](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[302289] "const" "temp"
    (302291 'move' tmp[302289](302287 'deref'(302286 '_wide_get_locale' this[304299])))
    {
      {
        (302243 call(406347 call . this[304299] c"_enter"))
        (302248 call(406351 call . this[304299] c"_fireAllDestructors"))
        (302252 call(406355 call . this[304299] c"_freeAllArrays"))
        (302260 call _sanity(302257 call ==(406360 call . this[304299] c"_totalCapacity") 0))
        (302268 call _sanity(302265 call ==(406365 call . this[304299] c"_size") 0))
        (302276 call _sanity(302273 call ==(406370 call . this[304299] c"_arrays") nil[44]))
        (302280 call(406374 call . this[304299] c"_firstTimeInitializeArrays"))
        (302284 call(406378 call . this[304299] c"_leave"))
      }
      (302294 'on block' 0 tmp[302289])
    }
  }
  function list[304105](?).indexOf[302306](arg _mt[304305]:_MT[238], const arg this[304303]:list[304105](?), arg x[302303] :
  (406383 call . this[304303] c"eltType"), arg start[302310] :
  int(64)[13] =
  0, arg end[302318] :
  int(64)[13] =
  (302316 call - 1)) : _unknown[51] "method" "primary method"
  {
    if(302434 call _cond_test 1)
    {
      const msg[302341] "const" " index for \"list.indexOf\" out of bounds: "
      (302344 'end of statement')
      if(302388 call _cond_test(302356 call &&(302348 call >= end[302318] 0)(302354 call !(302353 call(406389 call . this[304303] c"_withinBounds") end[302318]))))
      {
        (302386 call boundsCheckHalt(302383 call +(302377 call + "End" msg[302341])(302381 call _cast string[26] end[302318])))
      }
      if(302429 call _cond_test(302397 call !(302396 call(406396 call . this[304303] c"_withinBounds") start[302310])))
      {
        (302427 call boundsCheckHalt(302424 call +(302418 call + "Start" msg[302341])(302422 call _cast string[26] start[302310])))
      }
    }
    unknown error[302442] "param"(302440 call - 1)
    (302445 'end of statement')
    if(302459 call _cond_test(302454 call &&(302448 call >= end[302318] 0)(302452 call < end[302318] start[302310])))
    {
      (302457 return error[302442])
    }
    unknown result[302465] error[302442]
    (302468 'end of statement')
    const tmp[302561] "const" "temp"
    (302563 'move' tmp[302561](302559 'deref'(302558 '_wide_get_locale' this[304303])))
    {
      {
        (302472 call(406409 call . this[304303] c"_enter"))
        const stop[302487] "const"(302484 IfExpr (302477 call < end[302318] 0) then
        { scopeless
          (302481 call -(406415 call . this[304303] c"_size") 1)
        } else
        { scopeless
          end[302318]
        } )
        (302490 'end of statement')
        {
          unknown _indexOfInterest[302516] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302517] "expr temp" "temp"
          (302526 'move' _iterator[302517](302524 call _getIterator(302531 call chpl_direct_range_iter start[302310] stop[302487] 1)))
          Defer
          {
            {
              (302547 call _freeIterator _iterator[302517])
            }
          }
          { scopeless type
            (302536 'move' _indexOfInterest[302516](302533 call iteratorIndex _iterator[302517]))
          }
          ForLoop[302518]
          {
            unknown i[302540] "index var" "insert auto destroy"
            (302542 'move' i[302540] _indexOfInterest[302516])
            if(302512 call _cond_test(302501 call == x[302303](302500 call(406421 call . this[304303] c"_getRef") i[302540])))
            {
              (302505 call = result[302465] i[302540])
              break _breakLabel[302522] _breakLabel[302522]
            }
            label _continueLabel[302521]
            _indexOfInterest[302516]
            _iterator[302517]
          }
          label _breakLabel[302522]
        }
        (302556 call(406430 call . this[304303] c"_leave"))
      }
      (302566 'on block' 0 tmp[302561])
    }
    (302570 return result[302465])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304105](?).count[302581](arg _mt[304309]:_MT[238], const arg this[304307]:list[304105](?), arg x[302578] :
  (406436 call . this[304307] c"eltType")) : _unknown[51] "method" "primary method"
  {
    unknown result[302585] 0
    (302588 'end of statement')
    const tmp[302662] "const" "temp"
    (302664 'move' tmp[302662](302660 'deref'(302659 '_wide_get_locale' this[304307])))
    {
      {
        (302593 call(406441 call . this[304307] c"_enter"))
        unknown count[302597] 0
        (302600 'end of statement')
        {
          unknown _indexOfInterest[302617] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[302618] "expr temp" "temp"
          (302627 'move' _iterator[302618](302625 call _getIterator this[304307]))
          Defer
          {
            {
              (302643 call _freeIterator _iterator[302618])
            }
          }
          { scopeless type
            (302632 'move' _indexOfInterest[302617](302629 call iteratorIndex _iterator[302618]))
          }
          ForLoop[302619]
          {
            unknown item[302636] "index var" "insert auto destroy"
            (302638 'move' item[302636] _indexOfInterest[302617])
            if(302612 call _cond_test(302605 call == x[302578] item[302636]))
            {
              (302609 call += count[302597] 1)
            }
            label _continueLabel[302622]
            _indexOfInterest[302617]
            _iterator[302618]
          }
          label _breakLabel[302623]
        }
        (302652 call = result[302585] count[302597])
        (302657 call(406451 call . this[304307] c"_leave"))
      }
      (302667 'on block' 0 tmp[302662])
    }
    (302671 return result[302585])
  }
  { scopeless type
    int(64)[13]
  }
  function list[304105](?).sort[302688](arg _mt[304313]:_MT[238], ref arg this[304311]:list[304105](?), arg comparator[302684] :
  unknown rec[302678] =
  defaultComparator[267889]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    const tmp[302814] "const" "temp"
    (302816 'move' tmp[302814](302812 'deref'(302811 '_wide_get_locale' this[304311])))
    {
      {
        (302693 call(406457 call . this[304311] c"_enter"))
        if(302803 call _cond_test(302698 call >(406462 call . this[304311] c"_size") 1))
        {
          unknown arr[302712](302710 call chpl__buildArrayRuntimeType(302708 call chpl__ensureDomainExpr(302704 call #(302701 call chpl_build_low_bounded_range 0)(406467 call . this[304311] c"_size")))(406472 call . this[304311] c"eltType"))
          (302715 'end of statement')
          {
            unknown _indexOfInterest[302735] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[302736] "expr temp" "temp"
            (302745 'move' _iterator[302736](302743 call _getIterator(302752 call chpl_direct_counted_range_iter 0(406481 call . this[304311] c"_size"))))
            Defer
            {
              {
                (302768 call _freeIterator _iterator[302736])
              }
            }
            { scopeless type
              (302757 'move' _indexOfInterest[302735](302754 call iteratorIndex _iterator[302736]))
            }
            ForLoop[302737]
            {
              unknown i[302761] "index var" "insert auto destroy"
              (302763 'move' i[302761] _indexOfInterest[302735])
              (302732 call =(302727 call arr[302712] i[302761])(302731 call this[304311] i[302761]))
              label _continueLabel[302740]
              _indexOfInterest[302735]
              _iterator[302736]
            }
            label _breakLabel[302741]
          }
          (302784 call sort module=[255] Sort[267880] arr[302712] comparator[302684])
          (302788 call(406487 call . this[304311] c"_fireAllDestructors"))
          (302792 call(406491 call . this[304311] c"_freeAllArrays"))
          (302796 call(406495 call . this[304311] c"_firstTimeInitializeArrays"))
          (302801 call(406499 call . this[304311] c"_extendGeneric") arr[302712])
          (364862 'referenced modules list' Sort[267880])
        }
        (302809 call(406504 call . this[304311] c"_leave"))
      }
      (302819 'on block' 0 tmp[302814])
    }
    (302823 return _void[55])
  }
  function list[304105](?).this[302833](arg _mt[304317]:_MT[238], ref arg this[304315]:list[304105](?), arg i[302830] :
  int(64)[13]) ref : _unknown[51] "method" "primary method"
  {
    if(302877 call _cond_test(302842 call && 1(302840 call !(302839 call(406509 call . this[304315] c"_withinBounds") i[302830]))))
    {
      const msg[302867] "const"(302865 call + "Invalid list index: "(302863 call _cast string[26] i[302830]))
      (302870 'end of statement')
      (302875 call boundsCheckHalt msg[302867])
    }
    unknown result[302886] "ref var"(302885 call(406516 call . this[304315] c"_getRef") i[302830])
    (302889 'end of statement')
    (302891 return result[302886])
  }
  function list[304105](?).this[302901](arg _mt[304321]:_MT[238], const  ref arg this[304319]:list[304105](?), arg i[302898] :
  int(64)[13]) const ref : _unknown[51] "method" "primary method"
  {
    if(302929 call _cond_test(302910 call && 1(302908 call !(302907 call(406523 call . this[304319] c"_withinBounds") i[302898]))))
    {
      const msg[302919] "const"(302917 call + "Invalid list index: "(302915 call _cast string[26] i[302898]))
      (302922 'end of statement')
      (302927 call halt msg[302919])
    }
    const result[302938] "const" "ref var"(302937 call(406530 call . this[304319] c"_getRef") i[302898])
    (302941 'end of statement')
    (302943 return result[302938])
  }
  function list[304105](?).these[302949](arg _mt[304325]:_MT[238], arg this[304323]:list[304105](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[302970] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[302971] "expr temp" "temp"
      (302980 'move' _iterator[302971](302978 call _getIterator(302987 call chpl_direct_counted_range_iter 0(406543 call . this[304323] c"_size"))))
      Defer
      {
        {
          (303003 call _freeIterator _iterator[302971])
        }
      }
      { scopeless type
        (302992 'move' _indexOfInterest[302970](302989 call iteratorIndex _iterator[302971]))
      }
      ForLoop[302972]
      {
        unknown i[302996] "index var" "insert auto destroy"
        (302998 'move' i[302996] _indexOfInterest[302970])
        {
          unknown result[302962] "ref var"(302961 call(406536 call . this[304323] c"_getRef") i[302996])
          (302965 'end of statement')
          (302968 yield result[302962])
        }
        label _continueLabel[302975]
        _indexOfInterest[302970]
        _iterator[302971]
      }
      label _breakLabel[302976]
    }
  }
  function list[304105](?).these[303019](arg _mt[304329]:_MT[238], arg this[304327]:list[304105](?), param arg tag[303016] :
  iterKind[453]) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    const osz[303029] "const"(406550 call . this[304327] c"_size")
    (303032 'end of statement')
    const minChunkSize[303035] "const" 64
    (303038 'end of statement')
    const hasOneChunk[303043] "const"(303041 call <= osz[303029] minChunkSize[303035])
    (303046 'end of statement')
    const numTasks[303056] "const"(303053 IfExpr  hasOneChunk[303043] then
    { scopeless
      1
    } else
    { scopeless
      (303050 call .(364868 call here[90435]) c"maxTaskPar")
    } )
    (303059 'end of statement')
    const chunkSize[303070] "const"(303068 call _cast int(64)[13](303066 call floor(303063 call / osz[303029] numTasks[303056])))
    (303073 'end of statement')
    const trailing[303081] "const"(303079 call - osz[303029](303077 call * chunkSize[303070] numTasks[303056]))
    (303084 'end of statement')
    {
      unknown tmpIter[303148] "expr temp" "maybe ref" "no copy" "temp"
      (303151 'move' tmpIter[303148](303090 call #(303087 call chpl_build_low_bounded_range 0) numTasks[303056]))
      unknown isRngDomArr[303337] "maybe param" "temp"
      (303352 'move' isRngDomArr[303337](303350 call ||(303339 call isBoundedRange tmpIter[303148])(303348 call ||(303342 call isDomain tmpIter[303148])(303345 call isArray tmpIter[303148]))))
      if isRngDomArr[303337]
      {
        const _coforallCount[303204] "const" "end count" "temp"
        (303273 'move' _coforallCount[303204](303270 call _endCountAlloc 1))
        unknown numTasks[303205] "temp"
        (303257 'move' numTasks[303205](303253 call . tmpIter[303148] c"size"))
        (303248 call _upEndCount _coforallCount[303204] 1 numTasks[303205])
        (303245 call chpl_resetTaskSpawn numTasks[303205])
        unknown _indexOfInterest[303212] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303213] "expr temp" "temp"
        (303222 'move' _iterator[303213](303220 call _getIterator tmpIter[303148]))
        Defer
        {
          {
            (303238 call _freeIterator _iterator[303213])
          }
        }
        { scopeless type
          (303227 'move' _indexOfInterest[303212](303224 call iteratorIndex _iterator[303213]))
        }
        ForLoop[303214]
        {
          unknown tid[303231] "coforall index var" "index var" "insert auto destroy"
          (303233 'move' tid[303231] _indexOfInterest[303212])
          {
            {
              unknown chunk[303155](303157 call(406575 call . this[304327] c"_computeChunk") tid[303231] chunkSize[303070] trailing[303081])
              (303162 'end of statement')
              {
                unknown _indexOfInterest[303164] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[303166] "expr temp" "temp"
                (303168 'move' _iterator[303166](303171 call _getIterator(303173 call chunk[303155] 0)))
                Defer
                {
                  {
                    (303177 call _freeIterator _iterator[303166])
                  }
                }
                { scopeless type
                  (303181 'move' _indexOfInterest[303164](303184 call iteratorIndex _iterator[303166]))
                }
                ForLoop[303186]
                {
                  unknown i[303189] "index var" "insert auto destroy"
                  (303191 'move' i[303189] _indexOfInterest[303164])
                  (303195 yield(303197 call this[304327] i[303189]))
                  label _continueLabel[303199]
                  _indexOfInterest[303164]
                  _iterator[303166]
                }
                label _breakLabel[303201]
              }
            }
            (303207 call _downEndCount _coforallCount[303204] nil[44])
            (303206 'coforall loop')
          }
          label _continueLabel[303217]
          _indexOfInterest[303212]
          _iterator[303213]
        }
        label _breakLabel[303218]
        Defer
        {
          {
            (303260 call _endCountFree _coforallCount[303204])
          }
        }
        (303265 call _waitEndCount _coforallCount[303204] 1 numTasks[303205])
      }
      {
        const _coforallCount[303277] "const" "end count" "temp"
        (303334 'move' _coforallCount[303277](303331 call _endCountAlloc 1))
        unknown _indexOfInterest[303285] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303286] "expr temp" "temp"
        (303295 'move' _iterator[303286](303293 call _getIterator tmpIter[303148]))
        Defer
        {
          {
            (303311 call _freeIterator _iterator[303286])
          }
        }
        { scopeless type
          (303300 'move' _indexOfInterest[303285](303297 call iteratorIndex _iterator[303286]))
        }
        ForLoop[303287]
        {
          unknown tid[303304] "coforall index var" "index var" "insert auto destroy"
          (303306 'move' tid[303304] _indexOfInterest[303285])
          (303318 call _upEndCount _coforallCount[303277] 1)
          {
            {
              unknown chunk[303098](303097 call(406565 call . this[304327] c"_computeChunk") tid[303304] chunkSize[303070] trailing[303081])
              (303101 'end of statement')
              {
                unknown _indexOfInterest[303114] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[303115] "expr temp" "temp"
                (303124 'move' _iterator[303115](303122 call _getIterator(303107 call chunk[303098] 0)))
                Defer
                {
                  {
                    (303141 call _freeIterator _iterator[303115])
                  }
                }
                { scopeless type
                  (303130 'move' _indexOfInterest[303114](303127 call iteratorIndex _iterator[303115]))
                }
                ForLoop[303116]
                {
                  unknown i[303134] "index var" "insert auto destroy"
                  (303136 'move' i[303134] _indexOfInterest[303114])
                  (303112 yield(303111 call this[304327] i[303134]))
                  label _continueLabel[303119]
                  _indexOfInterest[303114]
                  _iterator[303115]
                }
                label _breakLabel[303120]
              }
            }
            (303280 call _downEndCount _coforallCount[303277] nil[44])
            (303279 'coforall loop')
          }
          label _continueLabel[303290]
          _indexOfInterest[303285]
          _iterator[303286]
        }
        label _breakLabel[303291]
        Defer
        {
          {
            (303322 call _endCountFree _coforallCount[303277])
          }
        }
        (303327 call _waitEndCount _coforallCount[303277] 1)
      }
    }
  }
  where {
    (303026 call == tag[303016] standalone[451])
  }
  function list[304105](?)._computeChunk[303363](arg _mt[304333]:_MT[238], arg this[304331]:list[304105](?), arg tid[303361]:_any[178](?), arg chunkSize[303365]:_any[178](?), arg trailing[303367]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown lo[303369] 0
    unknown hi[303373] lo[303369]
    (303377 'end of statement')
    if(303423 call _cond_test(303381 call <= tid[303361] 0))
    {
      (303385 call = lo[303369] 0)
      (303397 call = hi[303373](303395 call -(303392 call + chunkSize[303365] trailing[303367]) 1))
    }
    {
      (303408 call = lo[303369](303406 call +(303403 call * chunkSize[303365] tid[303361]) trailing[303367]))
      (303420 call = hi[303373](303418 call -(303415 call + lo[303369] chunkSize[303365]) 1))
    }
    (303433 return(303431 call _build_tuple(303429 call chpl_build_bounded_range lo[303369] hi[303373])))
  }
  function list[304105](?).these[303441](arg _mt[304337]:_MT[238], arg this[304335]:list[304105](?), param arg tag[303439]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    const osz[303451] "const"(406602 call . this[304335] c"_size")
    (303454 'end of statement')
    const minChunkSize[303457] "const" 32
    (303460 'end of statement')
    const hasOneChunk[303465] "const"(303463 call <= osz[303451] minChunkSize[303457])
    (303468 'end of statement')
    const numTasks[303475] "const"(303472 IfExpr  hasOneChunk[303465] then
    { scopeless
      1
    } else
    { scopeless
      dataParTasksPerLocale[93281]
    } )
    (303478 'end of statement')
    const chunkSize[303489] "const"(303487 call _cast int(64)[13](303485 call floor(303482 call / osz[303451] numTasks[303475])))
    (303492 'end of statement')
    const trailing[303500] "const"(303498 call - osz[303451](303496 call * chunkSize[303489] numTasks[303475]))
    (303503 'end of statement')
    {
      unknown tmpIter[303525] "expr temp" "maybe ref" "no copy" "temp"
      (303528 'move' tmpIter[303525](303509 call #(303506 call chpl_build_low_bounded_range 0) numTasks[303475]))
      unknown isRngDomArr[303676] "maybe param" "temp"
      (303691 'move' isRngDomArr[303676](303689 call ||(303678 call isBoundedRange tmpIter[303525])(303687 call ||(303681 call isDomain tmpIter[303525])(303684 call isArray tmpIter[303525]))))
      if isRngDomArr[303676]
      {
        const _coforallCount[303543] "const" "end count" "temp"
        (303612 'move' _coforallCount[303543](303609 call _endCountAlloc 1))
        unknown numTasks[303544] "temp"
        (303596 'move' numTasks[303544](303592 call . tmpIter[303525] c"size"))
        (303587 call _upEndCount _coforallCount[303543] 1 numTasks[303544])
        (303584 call chpl_resetTaskSpawn numTasks[303544])
        unknown _indexOfInterest[303551] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303552] "expr temp" "temp"
        (303561 'move' _iterator[303552](303559 call _getIterator tmpIter[303525]))
        Defer
        {
          {
            (303577 call _freeIterator _iterator[303552])
          }
        }
        { scopeless type
          (303566 'move' _indexOfInterest[303551](303563 call iteratorIndex _iterator[303552]))
        }
        ForLoop[303553]
        {
          unknown tid[303570] "coforall index var" "index var" "insert auto destroy"
          (303572 'move' tid[303570] _indexOfInterest[303551])
          {
            {
              unknown chunk[303532](303534 call(406624 call . this[304335] c"_computeChunk") tid[303570] chunkSize[303489] trailing[303500])
              (303539 'end of statement')
              (303540 yield chunk[303532])
            }
            (303546 call _downEndCount _coforallCount[303543] nil[44])
            (303545 'coforall loop')
          }
          label _continueLabel[303556]
          _indexOfInterest[303551]
          _iterator[303552]
        }
        label _breakLabel[303557]
        Defer
        {
          {
            (303599 call _endCountFree _coforallCount[303543])
          }
        }
        (303604 call _waitEndCount _coforallCount[303543] 1 numTasks[303544])
      }
      {
        const _coforallCount[303616] "const" "end count" "temp"
        (303673 'move' _coforallCount[303616](303670 call _endCountAlloc 1))
        unknown _indexOfInterest[303624] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[303625] "expr temp" "temp"
        (303634 'move' _iterator[303625](303632 call _getIterator tmpIter[303525]))
        Defer
        {
          {
            (303650 call _freeIterator _iterator[303625])
          }
        }
        { scopeless type
          (303639 'move' _indexOfInterest[303624](303636 call iteratorIndex _iterator[303625]))
        }
        ForLoop[303626]
        {
          unknown tid[303643] "coforall index var" "index var" "insert auto destroy"
          (303645 'move' tid[303643] _indexOfInterest[303624])
          (303657 call _upEndCount _coforallCount[303616] 1)
          {
            {
              unknown chunk[303517](303516 call(406616 call . this[304335] c"_computeChunk") tid[303643] chunkSize[303489] trailing[303500])
              (303520 'end of statement')
              (303523 yield chunk[303517])
            }
            (303619 call _downEndCount _coforallCount[303616] nil[44])
            (303618 'coforall loop')
          }
          label _continueLabel[303629]
          _indexOfInterest[303624]
          _iterator[303625]
        }
        label _breakLabel[303630]
        Defer
        {
          {
            (303661 call _endCountFree _coforallCount[303616])
          }
        }
        (303666 call _waitEndCount _coforallCount[303616] 1)
      }
    }
  }
  where {
    (303448 call == tag[303439] leader[447])
  }
  function list[304105](?).these[303702](arg _mt[304341]:_MT[238], arg this[304339]:list[304105](?), param arg tag[303700]:_any[178](?), arg followThis[303704]:_any[178](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[303724] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303725] "expr temp" "temp"
      (303734 'move' _iterator[303725](303732 call _getIterator(303717 call followThis[303704] 0)))
      Defer
      {
        {
          (303751 call _freeIterator _iterator[303725])
        }
      }
      { scopeless type
        (303740 'move' _indexOfInterest[303724](303737 call iteratorIndex _iterator[303725]))
      }
      ForLoop[303726]
      {
        unknown i[303744] "index var" "insert auto destroy"
        (303746 'move' i[303744] _indexOfInterest[303724])
        (303722 yield(303721 call this[304339] i[303744]))
        label _continueLabel[303729]
        _indexOfInterest[303724]
        _iterator[303725]
      }
      label _breakLabel[303730]
    }
  }
  where {
    (303711 call == tag[303700] follower[449])
  }
  function list[304105](?).readWriteThis[303768](arg _mt[304345]:_MT[238], arg this[304343]:list[304105](?), arg ch[303765] :
  channel[237642](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    (303772 call(406637 call . this[304343] c"_enter"))
    (303777 call <~> ch[303765] "[")
    {
      unknown _indexOfInterest[303799] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[303800] "expr temp" "temp"
      (303809 'move' _iterator[303800](303807 call _getIterator(303817 call chpl_direct_range_iter 0(303814 call -(406649 call . this[304343] c"_size") 2) 1)))
      Defer
      {
        {
          (303833 call _freeIterator _iterator[303800])
        }
      }
      { scopeless type
        (303822 'move' _indexOfInterest[303799](303819 call iteratorIndex _iterator[303800]))
      }
      ForLoop[303801]
      {
        unknown i[303826] "index var" "insert auto destroy"
        (303828 'move' i[303826] _indexOfInterest[303799])
        (303796 call <~>(303793 call <~> ch[303765](303792 call(406643 call . this[304343] c"_getRef") i[303826])) ", ")
        label _continueLabel[303804]
        _indexOfInterest[303799]
        _iterator[303800]
      }
      label _breakLabel[303805]
    }
    if(303855 call _cond_test(303842 call >(406654 call . this[304343] c"_size") 0))
    {
      (303852 call <~> ch[303765](303851 call(406659 call . this[304343] c"_getRef")(303848 call -(406664 call . this[304343] c"_size") 1)))
    }
    (303862 call <~> ch[303765] "]")
    (303867 call(406669 call . this[304343] c"_leave"))
  }
  function list[304105](?).isEmpty[303873](arg _mt[304349]:_MT[238], const arg this[304347]:list[304105](?)) : _unknown[51] "method" "primary method"
  {
    (303878 call(406673 call . this[304347] c"_enter"))
    unknown result[303885](303883 call ==(406678 call . this[304347] c"_size") 0)
    (303888 'end of statement')
    (303891 call(406682 call . this[304347] c"_leave"))
    (303894 return result[303885])
  }
  { scopeless type
    bool[10]
  }
  function list[304105](?).size[303901](arg _mt[304353]:_MT[238], const arg this[304351]:list[304105](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    unknown result[303904] 0
    (303907 'end of statement')
    const tmp[303927] "const" "temp"
    (303929 'move' tmp[303927](303925 'deref'(303924 '_wide_get_locale' this[304351])))
    {
      {
        (303912 call(406688 call . this[304351] c"_enter"))
        (303917 call = result[303904](406694 call . this[304351] c"_size"))
        (303922 call(406698 call . this[304351] c"_leave"))
      }
      (303932 'on block' 0 tmp[303927])
    }
    (303936 return result[303904])
  }
  function list[304105](?).indices[303942](arg _mt[304357]:_MT[238], arg this[304355]:list[304105](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (303954 return(303952 call chpl_build_bounded_range 0(303950 call -(303946 call . this[304355] c"size") 1)))
  }
  function list[304105](?).toArray[303961](arg _mt[304361]:_MT[238], const arg this[304359]:list[304105](?)) : _unknown[51] "method" "primary method"
  {
    if(304019 call _cond_test(303975 call &&(303970 call isNonNilableClass(406709 call . this[304359] c"eltType"))(303974 call isOwnedClass(406714 call . this[304359] c"eltType"))))
    {
      (304017 call compilerError "toArray() method is not available on a 'list'" " with elements of a non-nilable owned type, here: "(304015 call _cast string[26](406719 call . this[304359] c"eltType")))
    }
    unknown result[304037] "unsafe"(304035 call chpl__buildArrayRuntimeType(304033 call chpl__ensureDomainExpr(304029 call #(304026 call chpl_build_low_bounded_range 0)(406724 call . this[304359] c"_size")))(406729 call . this[304359] c"eltType"))
    (304040 'end of statement')
    const tmp[304090] "const" "temp"
    (304092 'move' tmp[304090](304088 'deref'(304087 '_wide_get_locale' this[304359])))
    {
      {
        (304044 call(406734 call . this[304359] c"_enter"))
        unknown tmp[304074](304070 forall  i[304072]  in (304064 call #(304061 call chpl_build_low_bounded_range 0)(406750 call . this[304359] c"_size")) do
        {
          (304069 call(406754 call . this[304359] c"_getRef") i[304072])
        } )(304057 call chpl__buildArrayRuntimeType(304055 call chpl__ensureDomainExpr(304051 call #(304048 call chpl_build_low_bounded_range 0)(406739 call . this[304359] c"_size")))(406744 call . this[304359] c"eltType"))
        (304077 'end of statement')
        (304080 call = result[304037] tmp[304074])
        (304085 call(406761 call . this[304359] c"_leave"))
      }
      (304095 'on block' 0 tmp[304090])
    }
    (304099 return result[304037])
  }
  { scopeless type
    (303964 call chpl__buildArrayRuntimeType nil[44](406704 call . this[304359] c"eltType"))
  }
  type list[304105](?) unknown eltType[298353] "type variable" unknown parSafe[298357] "param" 0 unknown _size[298362] "no doc" 0 unknown _lock$[298375] "no doc"(298372 IfExpr  parSafe[298357] then
  { scopeless
    (298367 'new'(298370 call _LockWrapper[405108](?)))
  } else
  { scopeless
    none[57]
  } ) unknown _arrays[298387] "no doc" nil[44](298385 call _ddata[11695](?)(298383 call _ddata[11695](?) eltType[298353])) unknown _arrayCapacity[298392] "no doc" 0 unknown _totalCapacity[298397] "no doc" 0 unknown _dummyFieldToForceBorrowChecking[298405] "no doc"(298404 call _dummyFieldType eltType[298353])
  function =[304375](ref arg lhs[304372] :
  (304371 call list[304105](?) unknown t[304367] ?[260]), arg rhs[304382] :
  (304381 call list[304105](?) t[304367] ?[260])) : _unknown[51] "assignop" "no return value for void"
  {
    (304390 call(304386 call . lhs[304372] c"clear"))
    (304401 call(304396 call . lhs[304372] c"extend") rhs[304382])
  }
  function ==[304416](arg a[304413] :
  (304412 call list[304105](?) unknown t[304408] ?[260]), arg b[304423] :
  (304422 call list[304105](?) t[304408] ?[260])) : _unknown[51]
  {
    if(304440 call _cond_test(304435 call !=(304428 call . a[304413] c"size")(304432 call . b[304423] c"size")))
    {
      (304438 return 0)
    }
    {
      unknown _indexOfInterest[304474] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[304475] "expr temp" "temp"
      (304484 'move' _iterator[304475](304482 call _getIterator(304494 call chpl_direct_counted_range_iter 0(304490 call . a[304413] c"size"))))
      Defer
      {
        {
          (304510 call _freeIterator _iterator[304475])
        }
      }
      { scopeless type
        (304499 'move' _indexOfInterest[304474](304496 call iteratorIndex _iterator[304475]))
      }
      ForLoop[304476]
      {
        unknown i[304503] "index var" "insert auto destroy"
        (304505 'move' i[304503] _indexOfInterest[304474])
        if(304469 call _cond_test(304464 call !=(304459 call a[304413] i[304503])(304463 call b[304423] i[304503])))
        {
          (304467 return 0)
        }
        label _continueLabel[304479]
        _indexOfInterest[304474]
        _iterator[304475]
      }
      label _breakLabel[304480]
    }
    (304518 return 1)
  }
  { scopeless type
    bool[10]
  }
  function !=[304534](arg a[304531] :
  (304530 call list[304105](?) unknown t[304526] ?[260]), arg b[304541] :
  (304540 call list[304105](?) t[304526] ?[260])) : _unknown[51]
  {
    (304551 return(304549 call !(304547 call == a[304531] b[304541])))
  }
  { scopeless type
    bool[10]
  }
  (355423 'used modules list'(352972 'use' ChapelStandard[20264])(298130 'import' ChapelLocks[187256])(298134 'use' HaltWrappers[209910])(298137 'use' Sort[267880])(298350 'use' IO[230803]))
  (364805 'referenced modules list' ChapelLocks[187256] Sort[267880])
}