AST dump for OwnedObject after pass normalize.
Module use list: ChapelStandard HaltWrappers 

{
  function chpl__init_OwnedObject[415967]() : void[4] "insert line file info" "module init"
  {
    (505375 return _void[55])
  }
  function _owned[30](?).chpl_forwarding_expr1[39606](arg _mt[40583]:_MT[238], arg this[40581]:_owned[30](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[505129] "RVV" "temp"
    (505133 'move' ret[505129](39605 call(370419 call (partial) borrow _mt[243] this[40581])))
    (505131 return ret[505129])
  }
  function _owned[30](?).init[39616](arg _mt[40587]:_MT[238], ref arg this[40585]:_owned[30](?), arg chpl_t[39614]:_any[178](?)) : void[4] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[602979] "expr temp" "maybe param" "maybe type" "temp"
    (602982 'move' call_tmp[602979](39621 call isClass chpl_t[39614]))
    unknown call_tmp[602984] "expr temp" "maybe param" "maybe type" "temp"
    (602987 'move' call_tmp[602984](39622 call ! call_tmp[602979]))
    unknown call_tmp[602989] "expr temp" "maybe param" "maybe type" "temp"
    (602992 'move' call_tmp[602989](39645 call _cond_test call_tmp[602984]))
    if call_tmp[602989]
    {
      (39643 call compilerError "owned only works with classes")
    }
    unknown tmp[454097] "temp" "type variable"
    (454099 'move' tmp[454097](39660 call _to_borrowed chpl_t[39614]))
    (454101 'init field' this[40585] c"chpl_t" tmp[454097])
    (474064 'end of statement')
    unknown call_tmp[602994] "expr temp" "maybe param" "maybe type" "temp"
    (602997 'move' call_tmp[602994](454115 '.v' this[40585] c"chpl_t"))
    unknown call_tmp[602999] "maybe param" "maybe type" "temp"
    (603002 'move' call_tmp[602999](454107 'to nilable class' call_tmp[602994]))
    unknown tmp[454105] "temp"
    (454109 'init var' tmp[454105] nil[44] call_tmp[602999])
    (454111 'init field' this[40585] c"chpl_p" tmp[454105])
    (474065 'end of statement')
    (505135 return _void[55])
  }
  function _owned[30](?).init[39682](arg _mt[40591]:_MT[238], ref arg this[40589]:_owned[30](?), arg p[39679]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (39703 call compilerError "cannot initialize owned from a borrow")
    (474066 'end of statement')
    unknown call_tmp[603006] "expr temp" "maybe param" "maybe type" "temp"
    (603009 'move' call_tmp[603006](39715 call _to_unmanaged p[39679]))
    (39717 call(39709 call (partial) init _mt[243] this[40589]) call_tmp[603006])
    (505137 return _void[55])
  }
  function _owned[30](?).init[39727](arg _mt[40595]:_MT[238], ref arg this[40593]:_owned[30](?), arg p[39724]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454118] "temp" "type variable"
    unknown call_tmp[603011] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603014 'move' call_tmp[603011](39735 'typeof' p[39724]))
    (454120 'move' tmp[454118](39737 call _to_borrowed call_tmp[603011]))
    (454122 'init field' this[40593] c"chpl_t" tmp[454118])
    (474068 'end of statement')
    unknown call_tmp[603016] "maybe param" "maybe type" "temp"
    (603019 'move' call_tmp[603016](39749 call _to_borrowed p[39724]))
    unknown call_tmp[603021] "expr temp" "maybe param" "maybe type" "temp"
    (603024 'move' call_tmp[603021](454136 '.v' this[40593] c"chpl_t"))
    unknown call_tmp[603026] "maybe param" "maybe type" "temp"
    (603029 'move' call_tmp[603026](454128 'to nilable class' call_tmp[603021]))
    unknown tmp[454126] "temp"
    (454130 'init var' tmp[454126] call_tmp[603016] call_tmp[603026])
    (454132 'init field' this[40593] c"chpl_p" tmp[454126])
    (474069 'end of statement')
    (505139 return _void[55])
  }
  function _owned[30](?).init[39762](arg _mt[40599]:_MT[238], ref arg this[40597]:_owned[30](?), arg p[39759]:_any[178](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (39793 call compilerError "owned only works with classes")
    (474070 'end of statement')
    unknown tmp[454145] "temp" "type variable"
    (454147 'move' tmp[454145](454139 'typeof' p[39759]))
    (454149 'init field' this[40597] c"chpl_t" tmp[454145])
    (474071 'end of statement')
    unknown call_tmp[603031] "expr temp" "maybe param" "maybe type" "temp"
    (603034 'move' call_tmp[603031](454163 '.v' this[40597] c"chpl_t"))
    unknown call_tmp[603036] "maybe param" "maybe type" "temp"
    (603039 'move' call_tmp[603036](454155 'to nilable class' call_tmp[603031]))
    unknown tmp[454153] "temp"
    (454157 'init var' tmp[454153] p[39759] call_tmp[603036])
    (454159 'init field' this[40597] c"chpl_p" tmp[454153])
    (474072 'end of statement')
    (505141 return _void[55])
  }
  where {
    unknown tmp[418144] "maybe param" "temp"
    unknown tmp[418165] "maybe param" "temp"
    unknown call_tmp[603041] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603044 'move' call_tmp[603041](454141 'typeof' p[39759]))
    unknown call_tmp[603046] "expr temp" "maybe param" "maybe type" "temp"
    (603049 'move' call_tmp[603046](39767 call isClass call_tmp[603041]))
    (418176 'move' tmp[418165](39769 call == call_tmp[603046] 0))
    unknown call_tmp[603051] "expr temp" "maybe param" "maybe type" "temp"
    (603054 'move' call_tmp[603051](418178 call _cond_invalid tmp[418165]))
    if call_tmp[603051]
    {
      (418181 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553928] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553929] "maybe param" "temp"
    unknown call_tmp[603056] "expr temp" "maybe param" "maybe type" "temp"
    (603059 'move' call_tmp[603056](418166 call isTrue tmp[418165]))
    (553934 'move' tmp[553929](553932 call _cond_test call_tmp[603056]))
    if tmp[553929]
    {
      unknown tmp[553936] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603061] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603064 'move' call_tmp[603061](454143 'typeof' p[39759]))
      unknown call_tmp[603066] "expr temp" "maybe param" "maybe type" "temp"
      (603069 'move' call_tmp[603066](354228 'is_subtype' _owned[30](?) call_tmp[603061]))
      unknown call_tmp[603071] "expr temp" "maybe param" "maybe type" "temp"
      (603074 'move' call_tmp[603071](39777 call == call_tmp[603066] 0))
      (553938 'move' tmp[553936](418169 call isTrue call_tmp[603071]))
      (553943 'move' tmp[553928](553940 '_paramFoldLogical' tmp[553929] tmp[553936]))
    }
    {
      (553948 'move' tmp[553928](553945 '_paramFoldLogical' tmp[553929] 0))
    }
    (418155 'move' tmp[418144] tmp[553928])
    unknown call_tmp[603076] "expr temp" "maybe param" "maybe type" "temp"
    (603079 'move' call_tmp[603076](418157 call _cond_invalid tmp[418144]))
    if call_tmp[603076]
    {
      (418160 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553955] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553956] "maybe param" "temp"
    unknown call_tmp[603081] "expr temp" "maybe param" "maybe type" "temp"
    (603084 'move' call_tmp[603081](418145 call isTrue tmp[418144]))
    (553961 'move' tmp[553956](553959 call _cond_test call_tmp[603081]))
    if tmp[553956]
    {
      unknown tmp[553963] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603086] "expr temp" "maybe param" "maybe type" "temp"
      (603089 'move' call_tmp[603086](39784 call isIterator p[39759]))
      unknown call_tmp[603091] "expr temp" "maybe param" "maybe type" "temp"
      (603094 'move' call_tmp[603091](39786 call == call_tmp[603086] 0))
      (553965 'move' tmp[553963](418148 call isTrue call_tmp[603091]))
      (553970 'move' tmp[553955](553967 '_paramFoldLogical' tmp[553956] tmp[553963]))
    }
    {
      (553975 'move' tmp[553955](553972 '_paramFoldLogical' tmp[553956] 0))
    }
    (748237 call chpl_statementLevelSymbol tmp[553955])
  }
  function _owned[30](?).init=[39821](arg _mt[40603]:_MT[238], ref arg this[40601]:_owned[30](?), ref arg src[39818]:_owned[30](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[418186] "maybe param" "temp"
    unknown call_tmp[603096] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603099 'move' call_tmp[603096](39825 'typeof' this[40601]))
    (418197 'move' tmp[418186](39827 call isNonNilableClass call_tmp[603096]))
    unknown call_tmp[603101] "expr temp" "maybe param" "maybe type" "temp"
    (603104 'move' call_tmp[603101](418199 call _cond_invalid tmp[418186]))
    if call_tmp[603101]
    {
      (418202 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553982] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553983] "maybe param" "temp"
    unknown call_tmp[603106] "expr temp" "maybe param" "maybe type" "temp"
    (603109 'move' call_tmp[603106](418187 call isTrue tmp[418186]))
    (553988 'move' tmp[553983](553986 call _cond_test call_tmp[603106]))
    if tmp[553983]
    {
      unknown tmp[553990] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603111] "expr temp" "maybe param" "maybe type" "temp"
      (603114 'move' call_tmp[603111](39831 call isNilableClass src[39818]))
      (553992 'move' tmp[553990](418190 call isTrue call_tmp[603111]))
      (553997 'move' tmp[553982](553994 '_paramFoldLogical' tmp[553983] tmp[553990]))
    }
    {
      (554002 'move' tmp[553982](553999 '_paramFoldLogical' tmp[553983] 0))
    }
    unknown call_tmp[603116] "expr temp" "maybe param" "maybe type" "temp"
    (603119 'move' call_tmp[603116](39857 call _cond_test tmp[553982]))
    if call_tmp[603116]
    {
      (39855 call compilerError "cannot create a non-nilable owned variable from a nilable class instance")
    }
    unknown call_tmp[603121] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603124 'move' call_tmp[603121](39870 'typeof' this[40601]))
    unknown call_tmp[603128] "expr temp" "maybe param" "maybe type" "temp"
    (603131 'move' call_tmp[603128](39871 call chpl_t _mt[243] call_tmp[603121]))
    unknown call_tmp[603135] "expr temp" "maybe param" "maybe type" "temp"
    (603138 'move' call_tmp[603135](39865 call chpl_t _mt[243] src[39818]))
    unknown call_tmp[603140] "expr temp" "maybe param" "maybe type" "temp"
    (603143 'move' call_tmp[603140](354229 'is_coercible' call_tmp[603128] call_tmp[603135]))
    unknown call_tmp[603145] "expr temp" "maybe param" "maybe type" "temp"
    (603148 'move' call_tmp[603145](39876 call == call_tmp[603140] 0))
    unknown call_tmp[603150] "expr temp" "maybe param" "maybe type" "temp"
    (603153 'move' call_tmp[603150](39943 call _cond_test call_tmp[603145]))
    if call_tmp[603150]
    {
      unknown call_tmp[603155] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603158 'move' call_tmp[603155](39898 'typeof' src[39818]))
      unknown call_tmp[603160] "expr temp" "maybe param" "maybe type" "temp"
      (603163 'move' call_tmp[603160](39900 call _cast string[26] call_tmp[603155]))
      unknown call_tmp[603165] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603168 'move' call_tmp[603165](39920 'typeof' this[40601]))
      unknown call_tmp[603170] "expr temp" "maybe param" "maybe type" "temp"
      (603173 'move' call_tmp[603170](39922 call _cast string[26] call_tmp[603165]))
      (39941 call compilerError "cannot coerce '" call_tmp[603160] "' to '" call_tmp[603170] "' in initialization")
    }
    unknown tmp[454166] "temp" "type variable"
    unknown call_tmp[603175] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603178 'move' call_tmp[603175](39953 'typeof' this[40601]))
    (454168 'move' tmp[454166](39954 call chpl_t _mt[243] call_tmp[603175]))
    (454170 'init field' this[40601] c"chpl_t" tmp[454166])
    (474076 'end of statement')
    unknown call_tmp[603184] "maybe param" "maybe type" "temp"
    (603187 'move' call_tmp[603184](39969 call(39965 call (partial) release _mt[243] src[39818])))
    unknown call_tmp[603189] "expr temp" "maybe param" "maybe type" "temp"
    (603192 'move' call_tmp[603189](454184 '.v' this[40601] c"chpl_t"))
    unknown call_tmp[603194] "maybe param" "maybe type" "temp"
    (603197 'move' call_tmp[603194](454176 'to nilable class' call_tmp[603189]))
    unknown tmp[454174] "temp"
    (454178 'init var' tmp[454174] call_tmp[603184] call_tmp[603194])
    (454180 'init field' this[40601] c"chpl_p" tmp[454174])
    (474077 'end of statement')
    (505143 return _void[55])
  }
  function _owned[30](?).init=[39988](arg _mt[40607]:_MT[238], ref arg this[40605]:_owned[30](?), arg src[39985]:_shared[32](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40009 call compilerError "cannot create an owned variable from a shared class instance")
    (474078 'end of statement')
    unknown tmp[454187] "temp" "type variable"
    (454189 'move' tmp[454187] int(64)[13])
    (454191 'init field' this[40605] c"chpl_t" tmp[454187])
    (474079 'end of statement')
    unknown tmp[454196] "temp"
    unknown call_tmp[603199] "expr temp" "maybe param" "maybe type" "temp"
    (603202 'move' call_tmp[603199](454206 '.v' this[40605] c"chpl_t"))
    unknown call_tmp[603204] "expr temp" "maybe param" "maybe type" "temp"
    (603207 'move' call_tmp[603204](454198 'to nilable class' call_tmp[603199]))
    (454200 'default init var' tmp[454196] call_tmp[603204])
    (454202 '.=' this[40605] c"chpl_p" tmp[454196])
    (474080 'end of statement')
    (505145 return _void[55])
  }
  function _owned[30](?).init=[40028](arg _mt[40611]:_MT[238], ref arg this[40609]:_owned[30](?), arg src[40025]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40051 call compilerError "cannot create an owned variable from a borrowed class instance")
    (474081 'end of statement')
    unknown tmp[454209] "temp" "type variable"
    (454211 'move' tmp[454209] int(64)[13])
    (454213 'init field' this[40609] c"chpl_t" tmp[454209])
    (474082 'end of statement')
    unknown tmp[454218] "temp"
    unknown call_tmp[603209] "expr temp" "maybe param" "maybe type" "temp"
    (603212 'move' call_tmp[603209](454228 '.v' this[40609] c"chpl_t"))
    unknown call_tmp[603214] "expr temp" "maybe param" "maybe type" "temp"
    (603217 'move' call_tmp[603214](454220 'to nilable class' call_tmp[603209]))
    (454222 'default init var' tmp[454218] call_tmp[603214])
    (454224 '.=' this[40609] c"chpl_p" tmp[454218])
    (474083 'end of statement')
    (505147 return _void[55])
  }
  function _owned[30](?).init=[40070](arg _mt[40615]:_MT[238], ref arg this[40613]:_owned[30](?), arg src[40067]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40091 call compilerError "cannot create an owned variable from an unmanaged class instance")
    (474084 'end of statement')
    unknown tmp[454231] "temp" "type variable"
    (454233 'move' tmp[454231] int(64)[13])
    (454235 'init field' this[40613] c"chpl_t" tmp[454231])
    (474085 'end of statement')
    unknown tmp[454240] "temp"
    unknown call_tmp[603219] "expr temp" "maybe param" "maybe type" "temp"
    (603222 'move' call_tmp[603219](454250 '.v' this[40613] c"chpl_t"))
    unknown call_tmp[603224] "expr temp" "maybe param" "maybe type" "temp"
    (603227 'move' call_tmp[603224](454242 'to nilable class' call_tmp[603219]))
    (454244 'default init var' tmp[454240] call_tmp[603224])
    (454246 '.=' this[40613] c"chpl_p" tmp[454240])
    (474086 'end of statement')
    (505149 return _void[55])
  }
  function _owned[30](?).init=[40110](arg _mt[40619]:_MT[238], ref arg this[40617]:_owned[30](?), arg src[40107]:_nilType[42]) : void[4] "leaves this nil" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[603231] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603234 'move' call_tmp[603231](40117 'typeof' this[40617]))
    unknown call_tmp[603238] "expr temp" "maybe param" "maybe type" "temp"
    (603241 'move' call_tmp[603238](40118 call chpl_t _mt[243] call_tmp[603231]))
    (40122 call(40113 call (partial) init _mt[243] this[40617]) call_tmp[603238])
    (474087 'end of statement')
    unknown call_tmp[603245] "expr temp" "maybe param" "maybe type" "temp"
    (603248 'move' call_tmp[603245](370445 call chpl_t _mt[243] this[40617]))
    unknown call_tmp[603250] "expr temp" "maybe param" "maybe type" "temp"
    (603253 'move' call_tmp[603250](40128 call isNonNilableClass call_tmp[603245]))
    unknown call_tmp[603255] "expr temp" "maybe param" "maybe type" "temp"
    (603258 'move' call_tmp[603255](40150 call _cond_test call_tmp[603250]))
    if call_tmp[603255]
    {
      (40148 call compilerError "Assigning non-nilable owned to nil")
    }
    (505151 return _void[55])
  }
  function _owned[30](?).init[40163](arg _mt[40623]:_MT[238], ref arg this[40621]:_owned[30](?), ref arg src[40160]:_owned[30](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454253] "temp" "type variable"
    (454255 'move' tmp[454253](40170 call chpl_t _mt[243] src[40160]))
    (454257 'init field' this[40621] c"chpl_t" tmp[454253])
    (474089 'end of statement')
    unknown call_tmp[603264] "maybe param" "maybe type" "temp"
    (603267 'move' call_tmp[603264](40186 call(40182 call (partial) release _mt[243] src[40160])))
    unknown call_tmp[603269] "expr temp" "maybe param" "maybe type" "temp"
    (603272 'move' call_tmp[603269](454271 '.v' this[40621] c"chpl_t"))
    unknown call_tmp[603274] "maybe param" "maybe type" "temp"
    (603277 'move' call_tmp[603274](454263 'to nilable class' call_tmp[603269]))
    unknown tmp[454261] "temp"
    (454265 'init var' tmp[454261] call_tmp[603264] call_tmp[603274])
    (454267 'init field' this[40621] c"chpl_p" tmp[454261])
    (474090 'end of statement')
    (505153 return _void[55])
  }
  function _owned[30](?).create[40196](arg _mt[40627]:_MT[238], arg this[40625]:_owned[30](?), arg source[40194]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[603279] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603282 'move' call_tmp[603279](40218 'typeof' source[40194]))
    unknown call_tmp[603284] "expr temp" "maybe param" "maybe type" "temp"
    (603287 'move' call_tmp[603284](40220 call _cast string[26] call_tmp[603279]))
    (40222 call compilerError "cannot create an 'owned' from " call_tmp[603284])
    (505155 return _void[55])
  }
  function _owned[30](?).create[40233](arg _mt[40631]:_MT[238], arg this[40629]:_owned[30](?), in arg take[40230]:_owned[30](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[505159] "RVV" "temp"
    (505164 'move' ret[505159](505163 'deref' take[40230]))
    (505161 return ret[505159])
  }
  function _owned[30](?).create[40247](arg _mt[40635]:_MT[238], arg this[40633]:_owned[30](?), arg p[40244]:unmanaged[220](?)) : _unknown[51] "inline" "method" "primary method" "unsafe"
  {
    unknown ret[505168] "RVV" "temp"
    unknown result[40254] "dead at end of block" "insert auto destroy"
    unknown call_tmp[603289] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603292 'move' call_tmp[603289](40250 'typeof' p[40244]))
    unknown call_tmp[603294] "expr temp" "maybe param" "maybe type" "temp"
    (603297 'move' call_tmp[603294](40252 call _cast _owned[30](?) call_tmp[603289]))
    (540578 'default init var' result[40254] call_tmp[603294])
    (40257 'end of statement')
    (40267 call(40262 call (partial) retain _mt[243] result[40254]) p[40244])
    (474093 'end of statement' result[40254])
    (505173 'move' ret[505168](505172 'deref' result[40254]))
    gotoReturn _end_create[505166] _end_create[505166]
    (474095 'end of statement' result[40254])
    label _end_create[505166]
    (505170 return ret[505168])
  }
  function _owned[30](?).deinit[40276](arg _mt[40639]:_MT[238], arg this[40637]:_owned[30](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603303] "expr temp" "maybe param" "maybe type" "temp"
    (603306 'move' call_tmp[603303](370458 call chpl_p _mt[243] this[40637]))
    unknown call_tmp[603308] "expr temp" "maybe param" "maybe type" "temp"
    (603311 'move' call_tmp[603308](40281 call isClass call_tmp[603303]))
    unknown call_tmp[603313] "expr temp" "maybe param" "maybe type" "temp"
    (603316 'move' call_tmp[603313](40300 call _cond_test call_tmp[603308]))
    if call_tmp[603313]
    {
      unknown call_tmp[603320] "expr temp" "maybe param" "maybe type" "temp"
      (603323 'move' call_tmp[603320](370463 call chpl_p _mt[243] this[40637]))
      unknown call_tmp[603325] "expr temp" "maybe param" "maybe type" "temp"
      (603328 'move' call_tmp[603325](40284 call != call_tmp[603320] nil[44]))
      unknown call_tmp[603330] "expr temp" "maybe param" "maybe type" "temp"
      (603333 'move' call_tmp[603330](40294 call _cond_test call_tmp[603325]))
      if call_tmp[603330]
      {
        unknown call_tmp[603337] "expr temp" "maybe param" "maybe type" "temp"
        (603340 'move' call_tmp[603337](370468 call chpl_p _mt[243] this[40637]))
        unknown call_tmp[603342] "expr temp" "maybe param" "maybe type" "temp"
        (603345 'move' call_tmp[603342](40289 call _to_unmanaged call_tmp[603337]))
        (40291 call chpl__delete call_tmp[603342])
      }
    }
    (505177 return _void[55])
  }
  function _owned[30](?).clear[40309](arg _mt[40643]:_MT[238], ref arg this[40641]:_owned[30](?)) : _unknown[51] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603349] "expr temp" "maybe param" "maybe type" "temp"
    (603352 'move' call_tmp[603349](370473 call chpl_p _mt[243] this[40641]))
    unknown call_tmp[603354] "expr temp" "maybe param" "maybe type" "temp"
    (603357 'move' call_tmp[603354](40313 call != call_tmp[603349] nil[44]))
    unknown call_tmp[603359] "expr temp" "maybe param" "maybe type" "temp"
    (603362 'move' call_tmp[603359](40329 call _cond_test call_tmp[603354]))
    if call_tmp[603359]
    {
      unknown call_tmp[603366] "expr temp" "maybe param" "maybe type" "temp"
      (603369 'move' call_tmp[603366](370478 call chpl_p _mt[243] this[40641]))
      unknown call_tmp[603371] "expr temp" "maybe param" "maybe type" "temp"
      (603374 'move' call_tmp[603371](40318 call _to_unmanaged call_tmp[603366]))
      (40320 call chpl__delete call_tmp[603371])
      (474098 'end of statement')
      unknown call_tmp[603378] "expr temp" "maybe param" "maybe type" "temp"
      (603381 'move' call_tmp[603378](370483 call chpl_p _mt[243] this[40641]))
      (40326 call = call_tmp[603378] nil[44])
    }
    (505179 return _void[55])
  }
  function _owned[30](?).retain[40342](arg _mt[40647]:_MT[238], ref arg this[40645]:_owned[30](?), arg newPtr[40339]:unmanaged[220](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603385] "expr temp" "maybe param" "maybe type" "temp"
    (603388 'move' call_tmp[603385](370489 call chpl_t _mt[243] this[40645]))
    unknown call_tmp[603390] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603393 'move' call_tmp[603390](40346 'typeof' newPtr[40339]))
    unknown call_tmp[603395] "expr temp" "maybe param" "maybe type" "temp"
    (603398 'move' call_tmp[603395](354230 'is_coercible' call_tmp[603385] call_tmp[603390]))
    unknown call_tmp[603400] "expr temp" "maybe param" "maybe type" "temp"
    (603403 'move' call_tmp[603400](40350 call ! call_tmp[603395]))
    unknown call_tmp[603405] "expr temp" "maybe param" "maybe type" "temp"
    (603408 'move' call_tmp[603405](40446 call _cond_test call_tmp[603400]))
    if call_tmp[603405]
    {
      unknown call_tmp[603410] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603413 'move' call_tmp[603410](40371 'typeof' newPtr[40339]))
      unknown call_tmp[603415] "expr temp" "maybe param" "maybe type" "temp"
      (603418 'move' call_tmp[603415](40373 call _cast string[26] call_tmp[603410]))
      unknown call_tmp[603420] "expr temp" "maybe param" "maybe type" "temp"
      (603423 'move' call_tmp[603420](40375 call + "cannot retain '" call_tmp[603415]))
      unknown call_tmp[603425] "expr temp" "maybe param" "maybe type" "temp"
      (603428 'move' call_tmp[603425](40394 call + call_tmp[603420] "' "))
      unknown call_tmp[603430] "expr temp" "maybe param" "maybe type" "temp"
      (603433 'move' call_tmp[603430](40413 call + call_tmp[603425] "(expected '"))
      unknown call_tmp[603437] "expr temp" "maybe param" "maybe type" "temp"
      (603440 'move' call_tmp[603437](370495 call chpl_t _mt[243] this[40645]))
      unknown call_tmp[603442] "expr temp" "maybe param" "maybe type" "temp"
      (603445 'move' call_tmp[603442](40418 call _to_unmanaged call_tmp[603437]))
      unknown call_tmp[603447] "expr temp" "maybe param" "maybe type" "temp"
      (603450 'move' call_tmp[603447](40420 call _cast string[26] call_tmp[603442]))
      unknown call_tmp[603452] "expr temp" "maybe param" "maybe type" "temp"
      (603455 'move' call_tmp[603452](40422 call + call_tmp[603430] call_tmp[603447]))
      unknown call_tmp[603457] "expr temp" "maybe param" "maybe type" "temp"
      (603460 'move' call_tmp[603457](40441 call + call_tmp[603452] "')"))
      (40444 call compilerError call_tmp[603457])
    }
    unknown call_tmp[603464] "maybe param" "maybe type" "temp"
    (603467 'move' call_tmp[603464](370500 call chpl_p _mt[243] this[40645]))
    unknown oldPtr[40453] "dead at end of block" "insert auto destroy"
    (540580 'init var' oldPtr[40453] call_tmp[603464])
    (40456 'end of statement')
    unknown call_tmp[603471] "expr temp" "maybe param" "maybe type" "temp"
    (603474 'move' call_tmp[603471](370505 call chpl_p _mt[243] this[40645]))
    (40459 call = call_tmp[603471] newPtr[40339])
    (474101 'end of statement')
    unknown call_tmp[603476] "expr temp" "maybe param" "maybe type" "temp"
    (603479 'move' call_tmp[603476](40471 call _cond_test oldPtr[40453]))
    if call_tmp[603476]
    {
      unknown call_tmp[603481] "expr temp" "maybe param" "maybe type" "temp"
      (603484 'move' call_tmp[603481](40466 call _to_unmanaged oldPtr[40453]))
      (40468 call chpl__delete call_tmp[603481])
      (474102 'end of statement' oldPtr[40453])
    }
    (505181 return _void[55])
  }
  function _owned[30](?).release[40480](arg _mt[40651]:_MT[238], ref arg this[40649]:_owned[30](?)) : _unknown[51] "leaves this nil" "nil from this" "method" "primary method"
  {
    unknown ret[505185] "RVV" "temp"
    unknown call_tmp[603488] "maybe param" "maybe type" "temp"
    (603491 'move' call_tmp[603488](370513 call chpl_p _mt[243] this[40649]))
    unknown oldPtr[40483] "dead at end of block" "insert auto destroy"
    (540582 'init var' oldPtr[40483] call_tmp[603488])
    (40486 'end of statement')
    unknown call_tmp[603495] "expr temp" "maybe param" "maybe type" "temp"
    (603498 'move' call_tmp[603495](370518 call chpl_p _mt[243] this[40649]))
    (40490 call = call_tmp[603495] nil[44])
    (474104 'end of statement')
    unknown call_tmp[603502] "expr temp" "maybe param" "maybe type" "temp"
    (603505 'move' call_tmp[603502](370523 call chpl_t _mt[243] this[40649]))
    unknown call_tmp[603507] "expr temp" "maybe param" "maybe type" "temp"
    (603510 'move' call_tmp[603507](40496 call _to_nilable call_tmp[603502]))
    unknown call_tmp[603514] "expr temp" "maybe param" "maybe type" "temp"
    (603517 'move' call_tmp[603514](370528 call chpl_t _mt[243] this[40649]))
    unknown call_tmp[603519] "expr temp" "maybe param" "maybe type" "temp"
    (603522 'move' call_tmp[603519](40498 call == call_tmp[603507] call_tmp[603514]))
    unknown call_tmp[603524] "expr temp" "maybe param" "maybe type" "temp"
    (603527 'move' call_tmp[603524](40516 call _cond_test call_tmp[603519]))
    if call_tmp[603524]
    {
      unknown call_tmp[603529] "expr temp" "maybe param" "maybe type" "temp"
      (603532 'move' call_tmp[603529](40503 call _to_unmanaged oldPtr[40483]))
      (505190 'move' ret[505185](505189 'deref' call_tmp[603529]))
      gotoReturn _end_release[505183] _end_release[505183]
      (474105 'end of statement' oldPtr[40483])
    }
    {
      unknown call_tmp[603534] "expr temp" "maybe param" "maybe type" "temp"
      (603537 'move' call_tmp[603534](40509 call postfix! oldPtr[40483]))
      unknown call_tmp[603539] "expr temp" "maybe param" "maybe type" "temp"
      (603542 'move' call_tmp[603539](40512 call _to_unmanaged call_tmp[603534]))
      (505195 'move' ret[505185](505194 'deref' call_tmp[603539]))
      gotoReturn _end_release[505183] _end_release[505183]
      (474107 'end of statement' oldPtr[40483])
    }
    label _end_release[505183]
    (505187 return ret[505185])
  }
  function _owned[30](?).borrow[40524](arg _mt[40655]:_MT[238], arg this[40653]:_owned[30](?)) : _unknown[51] "nil from this" "method" "primary method"
  {
    unknown ret[505201] "RVV" "temp"
    unknown call_tmp[603546] "expr temp" "maybe param" "maybe type" "temp"
    (603549 'move' call_tmp[603546](370535 call chpl_t _mt[243] this[40653]))
    unknown call_tmp[603551] "expr temp" "maybe param" "maybe type" "temp"
    (603554 'move' call_tmp[603551](40529 call _to_nilable call_tmp[603546]))
    unknown call_tmp[603558] "expr temp" "maybe param" "maybe type" "temp"
    (603561 'move' call_tmp[603558](370540 call chpl_t _mt[243] this[40653]))
    unknown call_tmp[603563] "expr temp" "maybe param" "maybe type" "temp"
    (603566 'move' call_tmp[603563](40531 call == call_tmp[603551] call_tmp[603558]))
    unknown call_tmp[603568] "expr temp" "maybe param" "maybe type" "temp"
    (603571 'move' call_tmp[603568](40543 call _cond_test call_tmp[603563]))
    if call_tmp[603568]
    {
      unknown call_tmp[603575] "expr temp" "maybe param" "maybe type" "temp"
      (603578 'move' call_tmp[603575](370545 call chpl_p _mt[243] this[40653]))
      (505206 'move' ret[505201](505205 'deref' call_tmp[603575]))
      gotoReturn _end_borrow[505199] _end_borrow[505199]
    }
    {
      unknown call_tmp[603582] "expr temp" "maybe param" "maybe type" "temp"
      (603585 'move' call_tmp[603582](370550 call chpl_p _mt[243] this[40653]))
      unknown call_tmp[603587] "expr temp" "maybe param" "maybe type" "temp"
      (603590 'move' call_tmp[603587](40538 call postfix! call_tmp[603582]))
      (505211 'move' ret[505201](505210 'deref' call_tmp[603587]))
      gotoReturn _end_borrow[505199] _end_borrow[505199]
    }
    label _end_borrow[505199]
    (505203 return ret[505201])
  }
  function _owned[30](?).borrow[40552](arg _mt[40659]:_MT[238], arg this[40657]:_owned[30](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[505217] "RVV" "temp" "type variable"
    unknown call_tmp[603594] "expr temp" "maybe param" "maybe type" "temp"
    (603597 'move' call_tmp[603594](370555 call chpl_t _mt[243] this[40657]))
    unknown call_tmp[603599] "expr temp" "maybe param" "maybe type" "temp"
    (603602 'move' call_tmp[603599](40557 call _to_nilable call_tmp[603594]))
    unknown call_tmp[603606] "expr temp" "maybe param" "maybe type" "temp"
    (603609 'move' call_tmp[603606](370560 call chpl_t _mt[243] this[40657]))
    unknown call_tmp[603611] "expr temp" "maybe param" "maybe type" "temp"
    (603614 'move' call_tmp[603611](40559 call == call_tmp[603599] call_tmp[603606]))
    unknown call_tmp[603616] "expr temp" "maybe param" "maybe type" "temp"
    (603619 'move' call_tmp[603616](40572 call _cond_test call_tmp[603611]))
    if call_tmp[603616]
    {
      unknown call_tmp[603623] "expr temp" "maybe param" "maybe type" "temp"
      (603626 'move' call_tmp[603623](370565 call chpl_t _mt[243] this[40657]))
      (505222 'move' ret[505217](505221 'deref' call_tmp[603623]))
      gotoReturn _end_borrow[505215] _end_borrow[505215]
    }
    {
      unknown call_tmp[603630] "expr temp" "maybe param" "maybe type" "temp"
      (603633 'move' call_tmp[603630](370570 call chpl_t _mt[243] this[40657]))
      unknown call_tmp[603635] "expr temp" "maybe param" "maybe type" "temp"
      (603638 'move' call_tmp[603635](40568 call _to_nonnil call_tmp[603630]))
      (505227 'move' ret[505217](505226 'deref' call_tmp[603635]))
      gotoReturn _end_borrow[505215] _end_borrow[505215]
    }
    label _end_borrow[505215]
    (505219 return ret[505217])
  }
  type _owned[30](?) unknown chpl_t[39592] "no doc" "type variable" unknown chpl_p[39599] "no doc" "owned"(39598 'to nilable class' chpl_t[39592]) forwarding ( )
  type owned[415399](?)
  type owned?[415395](?)
  function =[40668](ref arg lhs[40665]:_owned[30](?), ref arg rhs[40671]:_owned[30](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown tmp[418228] "maybe param" "temp"
    unknown call_tmp[603642] "expr temp" "maybe param" "maybe type" "temp"
    (603645 'move' call_tmp[603642](40691 call chpl_p _mt[243] lhs[40665]))
    (418239 'move' tmp[418228](40695 call == call_tmp[603642] nil[44]))
    unknown call_tmp[603647] "expr temp" "maybe param" "maybe type" "temp"
    (603650 'move' call_tmp[603647](418241 call _cond_invalid tmp[418228]))
    if call_tmp[603647]
    {
      (418244 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554009] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554010] "maybe param" "temp"
    unknown call_tmp[603652] "expr temp" "maybe param" "maybe type" "temp"
    (603655 'move' call_tmp[603652](418229 call isTrue tmp[418228]))
    (554015 'move' tmp[554010](554013 call _cond_test call_tmp[603652]))
    if tmp[554010]
    {
      unknown tmp[554017] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603659] "expr temp" "maybe param" "maybe type" "temp"
      (603662 'move' call_tmp[603659](40698 call chpl_p _mt[243] rhs[40671]))
      unknown call_tmp[603664] "expr temp" "maybe param" "maybe type" "temp"
      (603667 'move' call_tmp[603664](40702 call == call_tmp[603659] nil[44]))
      (554019 'move' tmp[554017](418232 call isTrue call_tmp[603664]))
      (554024 'move' tmp[554009](554021 '_paramFoldLogical' tmp[554010] tmp[554017]))
    }
    {
      (554029 'move' tmp[554009](554026 '_paramFoldLogical' tmp[554010] 0))
    }
    unknown call_tmp[603669] "expr temp" "maybe param" "maybe type" "temp"
    (603672 'move' call_tmp[603669](40708 call _cond_test tmp[554009]))
    if call_tmp[603669]
    {
      gotoReturn _end_=[505231] _end_=[505231]
    }
    unknown tmp[418249] "maybe param" "temp"
    (418260 'move' tmp[418249] 1)
    unknown call_tmp[603674] "expr temp" "maybe param" "maybe type" "temp"
    (603677 'move' call_tmp[603674](418262 call _cond_invalid tmp[418249]))
    if call_tmp[603674]
    {
      (418265 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[554036] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554037] "maybe param" "temp"
    unknown call_tmp[603679] "expr temp" "maybe param" "maybe type" "temp"
    (603682 'move' call_tmp[603679](418250 call isTrue tmp[418249]))
    (554042 'move' tmp[554037](554040 call _cond_test call_tmp[603679]))
    if tmp[554037]
    {
      (554047 'move' tmp[554036](554044 '_paramFoldLogical' tmp[554037] 1))
    }
    {
      unknown tmp[554049] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (554051 'move' tmp[554049](418254 call isTrue enablePostfixBangChecks[324]))
      (554056 'move' tmp[554036](554053 '_paramFoldLogical' tmp[554037] tmp[554049]))
    }
    unknown call_tmp[603684] "expr temp" "maybe param" "maybe type" "temp"
    (603687 'move' call_tmp[603684](40766 call _cond_test tmp[554036]))
    if call_tmp[603684]
    {
      unknown call_tmp[603691] "expr temp" "maybe param" "maybe type" "temp"
      (603694 'move' call_tmp[603691](40719 call chpl_t _mt[243] lhs[40665]))
      unknown call_tmp[603696] "expr temp" "maybe param" "maybe type" "temp"
      (603699 'move' call_tmp[603696](40723 call isNonNilableClass call_tmp[603691]))
      unknown call_tmp[603701] "expr temp" "maybe param" "maybe type" "temp"
      (603704 'move' call_tmp[603701](40761 call _cond_test call_tmp[603696]))
      if call_tmp[603701]
      {
        unknown call_tmp[603708] "expr temp" "maybe param" "maybe type" "temp"
        (603711 'move' call_tmp[603708](40725 call chpl_p _mt[243] rhs[40671]))
        unknown call_tmp[603713] "expr temp" "maybe param" "maybe type" "temp"
        (603716 'move' call_tmp[603713](40729 call == call_tmp[603708] nil[44]))
        unknown call_tmp[603718] "expr temp" "maybe param" "maybe type" "temp"
        (603721 'move' call_tmp[603718](40756 call _cond_test call_tmp[603713]))
        if call_tmp[603718]
        {
          (40753 call nilCheckHalt module=[255] HaltWrappers[210018] "assigning nil to non-nilable owned")
          (356939 'referenced modules list' HaltWrappers[210018])
        }
      }
    }
    unknown call_tmp[603727] "expr temp" "maybe param" "maybe type" "temp"
    (603730 'move' call_tmp[603727](40779 call(40775 call (partial) release _mt[243] rhs[40671])))
    (40781 call(40771 call (partial) retain _mt[243] lhs[40665]) call_tmp[603727])
    label _end_=[505231]
    (505233 return _void[55])
    (355067 'used modules list'(40687 'import' HaltWrappers[210018]))
  }
  where {
    unknown tmp[418207] "maybe param" "temp"
    (418218 'move' tmp[418207](40677 call isNonNilableClass lhs[40665]))
    unknown call_tmp[603732] "expr temp" "maybe param" "maybe type" "temp"
    (603735 'move' call_tmp[603732](418220 call _cond_invalid tmp[418207]))
    if call_tmp[603732]
    {
      (418223 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554063] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554064] "maybe param" "temp"
    unknown call_tmp[603737] "expr temp" "maybe param" "maybe type" "temp"
    (603740 'move' call_tmp[603737](418208 call isTrue tmp[418207]))
    (554069 'move' tmp[554064](554067 call _cond_test call_tmp[603737]))
    if tmp[554064]
    {
      unknown tmp[554071] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603742] "expr temp" "maybe param" "maybe type" "temp"
      (603745 'move' call_tmp[603742](40681 call isNilableClass rhs[40671]))
      (554073 'move' tmp[554071](418211 call isTrue call_tmp[603742]))
      (554078 'move' tmp[554063](554075 '_paramFoldLogical' tmp[554064] tmp[554071]))
    }
    {
      (554083 'move' tmp[554063](554080 '_paramFoldLogical' tmp[554064] 0))
    }
    (40684 call ! tmp[554063])
  }
  function =[40792](ref arg lhs[40789]:_owned[30](?), arg rhs[40795]:_nilType[42]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (40811 call(40807 call (partial) clear _mt[243] lhs[40789]))
    (505237 return _void[55])
  }
  where {
    unknown call_tmp[603749] "expr temp" "maybe param" "maybe type" "temp"
    (603752 'move' call_tmp[603749](40801 call isNonNilableClass lhs[40789]))
    (40802 call ! call_tmp[603749])
  }
  function <=>[40823](ref arg lhs[40820]:_owned[30](?), ref arg rhs[40827]:_owned[30](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[603756] "expr temp" "maybe param" "maybe type" "temp"
    (603759 'move' call_tmp[603756](40831 call chpl_p _mt[243] lhs[40820]))
    unknown call_tmp[603763] "expr temp" "maybe param" "maybe type" "temp"
    (603766 'move' call_tmp[603763](40835 call chpl_p _mt[243] rhs[40827]))
    (40838 call <=> call_tmp[603756] call_tmp[603763])
    (505239 return _void[55])
  }
  function chpl__initCopy[40850](ref arg src[40847]:_owned[30](?)) : _unknown[51] "init copy fn" "no doc"
  {
    unknown ret[505243] "RVV" "temp"
    unknown call_tmp[603768] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603771 'move' call_tmp[603768](747795 'new' _owned[30](?) src[40847]))
    unknown ret[40857] "dead at end of block"
    (540584 'init var' ret[40857] call_tmp[603768])
    (40860 'end of statement')
    (505248 'move' ret[505243](505247 'deref' ret[40857]))
    gotoReturn _end_chpl__initCopy[505241] _end_chpl__initCopy[505241]
    (474120 'end of statement' ret[40857])
    label _end_chpl__initCopy[505241]
    (505245 return ret[505243])
  }
  function chpl__autoCopy[40873](ref arg src[40870]:_owned[30](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[505254] "RVV" "temp"
    unknown call_tmp[603773] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603776 'move' call_tmp[603773](747796 'new' _owned[30](?) src[40870]))
    unknown ret[40880] "dead at end of block" "insert auto destroy"
    (540586 'init var' ret[40880] call_tmp[603773])
    (40883 'end of statement')
    (505259 'move' ret[505254](505258 'deref' ret[40880]))
    gotoReturn _end_chpl__autoCopy[505252] _end_chpl__autoCopy[505252]
    (474122 'end of statement' ret[40880])
    label _end_chpl__autoCopy[505252]
    (505256 return ret[505254])
  }
  function chpl__autoDestroy[40896](ref arg x[40893]:_owned[30](?)) : _unknown[51] "auto destroy fn" "no doc" "no return value for void"
  {
    unknown call_tmp[603778] "expr temp" "maybe param" "maybe type" "temp"
    (603781 'move' call_tmp[603778](40903 'deref' x[40893]))
    (40904 'call destructor' call_tmp[603778])
    (505263 return _void[55])
  }
  function _owned[30](?).readWriteThis[40914](arg _mt[40919]:_MT[238], arg this[40916]:_owned[30](?) :
  _owned[30](?), arg f[40912]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    unknown call_tmp[603785] "expr temp" "maybe param" "maybe type" "temp"
    (603788 'move' call_tmp[603785](40923 call chpl_p _mt[243] this[40916]))
    (40926 call <~> f[40912] call_tmp[603785])
    (505265 return _void[55])
  }
  function _cast[40941](arg t[40938]:owned?[415395](?), in arg x[40946]:owned[415399](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505269] "RVV" "temp"
    unknown call_tmp[603792] "expr temp" "maybe param" "maybe type" "temp"
    (603795 'move' call_tmp[603792](40970 call chpl_t _mt[243] t[40938]))
    unknown call_tmp[603797] "expr temp" "maybe param" "maybe type" "temp"
    (603800 'move' call_tmp[603797](40974 call _to_unmanaged call_tmp[603792]))
    unknown call_tmp[603802] "expr temp" "maybe param" "maybe type" "temp"
    (603805 'move' call_tmp[603802](40976 call _to_nilable call_tmp[603797]))
    unknown call_tmp[603809] "expr temp" "maybe param" "maybe type" "temp"
    (603812 'move' call_tmp[603809](40964 call chpl_p _mt[243] x[40946]))
    unknown call_tmp[603814] "maybe param" "maybe type" "temp"
    (603817 'move' call_tmp[603814](40977 call _cast call_tmp[603802] call_tmp[603809]))
    unknown castPtr[40979] "dead at end of block" "insert auto destroy"
    (540588 'init var' castPtr[40979] call_tmp[603814])
    (40982 'end of statement')
    unknown call_tmp[603821] "expr temp" "maybe param" "maybe type" "temp"
    (603824 'move' call_tmp[603821](40985 call chpl_p _mt[243] x[40946]))
    (40989 call = call_tmp[603821] nil[44])
    (474126 'end of statement')
    unknown call_tmp[603826] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603829 'move' call_tmp[603826](747797 'new' _owned[30](?) castPtr[40979]))
    (505274 'move' ret[505269](505273 'deref' call_tmp[603826]))
    gotoReturn _end__cast[505267] _end__cast[505267]
    (474127 'end of statement' castPtr[40979])
    label _end__cast[505267]
    (505271 return ret[505269])
  }
  where {
    unknown call_tmp[603833] "expr temp" "maybe param" "maybe type" "temp"
    (603836 'move' call_tmp[603833](40957 call chpl_t _mt[243] t[40938]))
    unknown call_tmp[603838] "expr temp" "maybe param" "maybe type" "temp"
    (603841 'move' call_tmp[603838](40961 call _to_nonnil call_tmp[603833]))
    unknown call_tmp[603845] "expr temp" "maybe param" "maybe type" "temp"
    (603848 'move' call_tmp[603845](40951 call chpl_t _mt[243] x[40946]))
    (354232 'is_subtype' call_tmp[603838] call_tmp[603845])
  }
  function _cast[41011](arg t[41008]:owned?[415395](?), in arg x[41017]:owned?[415395](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505280] "RVV" "temp"
    unknown call_tmp[603852] "expr temp" "maybe param" "maybe type" "temp"
    (603855 'move' call_tmp[603852](41038 call chpl_t _mt[243] t[41008]))
    unknown call_tmp[603857] "expr temp" "maybe param" "maybe type" "temp"
    (603860 'move' call_tmp[603857](41042 call _to_unmanaged call_tmp[603852]))
    unknown call_tmp[603862] "expr temp" "maybe param" "maybe type" "temp"
    (603865 'move' call_tmp[603862](41044 call _to_nilable call_tmp[603857]))
    unknown call_tmp[603869] "expr temp" "maybe param" "maybe type" "temp"
    (603872 'move' call_tmp[603869](41032 call chpl_p _mt[243] x[41017]))
    unknown call_tmp[603874] "maybe param" "maybe type" "temp"
    (603877 'move' call_tmp[603874](41045 call _cast call_tmp[603862] call_tmp[603869]))
    unknown castPtr[41047] "dead at end of block" "insert auto destroy"
    (540590 'init var' castPtr[41047] call_tmp[603874])
    (41050 'end of statement')
    unknown call_tmp[603881] "expr temp" "maybe param" "maybe type" "temp"
    (603884 'move' call_tmp[603881](41053 call chpl_p _mt[243] x[41017]))
    (41057 call = call_tmp[603881] nil[44])
    (474129 'end of statement')
    unknown call_tmp[603886] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603889 'move' call_tmp[603886](747798 'new' _owned[30](?) castPtr[41047]))
    (505285 'move' ret[505280](505284 'deref' call_tmp[603886]))
    gotoReturn _end__cast[505278] _end__cast[505278]
    (474130 'end of statement' castPtr[41047])
    label _end__cast[505278]
    (505282 return ret[505280])
  }
  where {
    unknown call_tmp[603893] "expr temp" "maybe param" "maybe type" "temp"
    (603896 'move' call_tmp[603893](41027 call chpl_t _mt[243] t[41008]))
    unknown call_tmp[603900] "expr temp" "maybe param" "maybe type" "temp"
    (603903 'move' call_tmp[603900](41022 call chpl_t _mt[243] x[41017]))
    (354233 'is_subtype' call_tmp[603893] call_tmp[603900])
  }
  function _cast[41078](arg t[41075]:owned[415399](?), in arg x[41083]:owned[415399](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505291] "RVV" "temp"
    unknown call_tmp[603907] "expr temp" "maybe param" "maybe type" "temp"
    (603910 'move' call_tmp[603907](41104 call chpl_t _mt[243] t[41075]))
    unknown call_tmp[603912] "expr temp" "maybe param" "maybe type" "temp"
    (603915 'move' call_tmp[603912](41108 call _to_unmanaged call_tmp[603907]))
    unknown call_tmp[603917] "expr temp" "maybe param" "maybe type" "temp"
    (603920 'move' call_tmp[603917](41110 call _to_nilable call_tmp[603912]))
    unknown call_tmp[603924] "expr temp" "maybe param" "maybe type" "temp"
    (603927 'move' call_tmp[603924](41098 call chpl_p _mt[243] x[41083]))
    unknown call_tmp[603929] "maybe param" "maybe type" "temp"
    (603932 'move' call_tmp[603929](41111 call _cast call_tmp[603917] call_tmp[603924]))
    unknown castPtr[41113] "dead at end of block" "insert auto destroy"
    (540592 'init var' castPtr[41113] call_tmp[603929])
    (41116 'end of statement')
    unknown call_tmp[603936] "expr temp" "maybe param" "maybe type" "temp"
    (603939 'move' call_tmp[603936](41119 call chpl_p _mt[243] x[41083]))
    (41123 call = call_tmp[603936] nil[44])
    (474132 'end of statement')
    unknown call_tmp[603941] "expr temp" "maybe param" "maybe type" "temp"
    (603944 'move' call_tmp[603941](41129 call postfix! castPtr[41113]))
    unknown call_tmp[603946] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603949 'move' call_tmp[603946](747799 'new' _owned[30](?) call_tmp[603941]))
    (505296 'move' ret[505291](505295 'deref' call_tmp[603946]))
    gotoReturn _end__cast[505289] _end__cast[505289]
    (474133 'end of statement' castPtr[41113])
    label _end__cast[505289]
    (505293 return ret[505291])
  }
  where {
    unknown call_tmp[603953] "expr temp" "maybe param" "maybe type" "temp"
    (603956 'move' call_tmp[603953](41093 call chpl_t _mt[243] t[41075]))
    unknown call_tmp[603960] "expr temp" "maybe param" "maybe type" "temp"
    (603963 'move' call_tmp[603960](41088 call chpl_t _mt[243] x[41083]))
    (354234 'is_subtype' call_tmp[603953] call_tmp[603960])
  }
  function _cast[41146](arg t[41143]:owned[415399](?), in arg x[41152]:owned?[415395](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505302] "RVV" "temp"
    unknown call_tmp[603967] "expr temp" "maybe param" "maybe type" "temp"
    (603970 'move' call_tmp[603967](41176 call chpl_t _mt[243] t[41143]))
    unknown call_tmp[603972] "expr temp" "maybe param" "maybe type" "temp"
    (603975 'move' call_tmp[603972](41180 call _to_unmanaged call_tmp[603967]))
    unknown call_tmp[603977] "expr temp" "maybe param" "maybe type" "temp"
    (603980 'move' call_tmp[603977](41182 call _to_nilable call_tmp[603972]))
    unknown call_tmp[603984] "expr temp" "maybe param" "maybe type" "temp"
    (603987 'move' call_tmp[603984](41170 call chpl_p _mt[243] x[41152]))
    unknown call_tmp[603989] "maybe param" "maybe type" "temp"
    (603992 'move' call_tmp[603989](41183 call _cast call_tmp[603977] call_tmp[603984]))
    unknown castPtr[41185] "dead at end of block" "insert auto destroy"
    (540594 'init var' castPtr[41185] call_tmp[603989])
    (41188 'end of statement')
    unknown call_tmp[603994] "expr temp" "maybe param" "maybe type" "temp"
    (603997 'move' call_tmp[603994](41192 call == castPtr[41185] nil[44]))
    unknown call_tmp[603999] "expr temp" "maybe param" "maybe type" "temp"
    (604002 'move' call_tmp[603999](41203 call _cond_test call_tmp[603994]))
    if call_tmp[603999]
    {
      unknown call_tmp[604004] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (604007 'move' call_tmp[604004](747800 'new' NilClassError[368328](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[604009] "expr temp" "maybe param" "maybe type" "temp"
      (604012 'move' call_tmp[604009](468072 call chpl_fix_thrown_error call_tmp[604004]))
      (41200 'throw' call_tmp[604009])
    }
    unknown call_tmp[604016] "expr temp" "maybe param" "maybe type" "temp"
    (604019 'move' call_tmp[604016](41208 call chpl_p _mt[243] x[41152]))
    (41212 call = call_tmp[604016] nil[44])
    (474136 'end of statement')
    unknown call_tmp[604021] "expr temp" "maybe param" "maybe type" "temp"
    (604024 'move' call_tmp[604021](41218 call postfix! castPtr[41185]))
    unknown call_tmp[604026] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604029 'move' call_tmp[604026](747801 'new' _owned[30](?) call_tmp[604021]))
    (505307 'move' ret[505302](505306 'deref' call_tmp[604026]))
    gotoReturn _end__cast[505300] _end__cast[505300]
    (474137 'end of statement' castPtr[41185])
    label _end__cast[505300]
    (505304 return ret[505302])
  }
  where {
    unknown call_tmp[604033] "expr temp" "maybe param" "maybe type" "temp"
    (604036 'move' call_tmp[604033](41165 call chpl_t _mt[243] t[41143]))
    unknown call_tmp[604040] "expr temp" "maybe param" "maybe type" "temp"
    (604043 'move' call_tmp[604040](41158 call chpl_t _mt[243] x[41152]))
    unknown call_tmp[604045] "expr temp" "maybe param" "maybe type" "temp"
    (604048 'move' call_tmp[604045](41162 call _to_nonnil call_tmp[604040]))
    (354235 'is_subtype' call_tmp[604033] call_tmp[604045])
  }
  function _cast[41235](arg t[41232]:owned[415399](?), ref arg x[41241]:owned?[415395](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505313] "RVV" "temp"
    unknown call_tmp[604052] "expr temp" "maybe param" "maybe type" "temp"
    (604055 'move' call_tmp[604052](41259 call chpl_p _mt[243] x[41241]))
    unknown call_tmp[604057] "expr temp" "maybe param" "maybe type" "temp"
    (604060 'move' call_tmp[604057](41263 call == call_tmp[604052] nil[44]))
    unknown call_tmp[604062] "expr temp" "maybe param" "maybe type" "temp"
    (604065 'move' call_tmp[604062](41274 call _cond_test call_tmp[604057]))
    if call_tmp[604062]
    {
      unknown call_tmp[604067] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (604070 'move' call_tmp[604067](747802 'new' NilClassError[368328](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[604072] "expr temp" "maybe param" "maybe type" "temp"
      (604075 'move' call_tmp[604072](468074 call chpl_fix_thrown_error call_tmp[604067]))
      (41271 'throw' call_tmp[604072])
    }
    unknown call_tmp[604079] "expr temp" "maybe param" "maybe type" "temp"
    (604082 'move' call_tmp[604079](41286 call chpl_t _mt[243] t[41232]))
    unknown call_tmp[604084] "expr temp" "maybe param" "maybe type" "temp"
    (604087 'move' call_tmp[604084](41290 call _to_unmanaged call_tmp[604079]))
    unknown call_tmp[604089] "expr temp" "maybe param" "maybe type" "temp"
    (604092 'move' call_tmp[604089](41292 call _to_nonnil call_tmp[604084]))
    unknown call_tmp[604096] "expr temp" "maybe param" "maybe type" "temp"
    (604099 'move' call_tmp[604096](41280 call chpl_p _mt[243] x[41241]))
    unknown call_tmp[604101] "maybe param" "maybe type" "temp"
    (604104 'move' call_tmp[604101](41293 call _cast call_tmp[604089] call_tmp[604096]))
    unknown castPtr[41296] "dead at end of block" "insert auto destroy"
    (540596 'init var' castPtr[41296] call_tmp[604101])
    (41299 'end of statement')
    unknown call_tmp[604108] "expr temp" "maybe param" "maybe type" "temp"
    (604111 'move' call_tmp[604108](41301 call chpl_p _mt[243] x[41241]))
    (41305 call = call_tmp[604108] nil[44])
    (474140 'end of statement')
    unknown call_tmp[604113] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604116 'move' call_tmp[604113](747803 'new' _owned[30](?) castPtr[41296]))
    (505318 'move' ret[505313](505317 'deref' call_tmp[604113]))
    gotoReturn _end__cast[505311] _end__cast[505311]
    (474141 'end of statement' castPtr[41296])
    label _end__cast[505311]
    (505315 return ret[505313])
  }
  where {
    unknown call_tmp[604120] "expr temp" "maybe param" "maybe type" "temp"
    (604123 'move' call_tmp[604120](41252 call chpl_t _mt[243] x[41241]))
    unknown call_tmp[604125] "expr temp" "maybe param" "maybe type" "temp"
    (604128 'move' call_tmp[604125](41256 call _to_nonnil call_tmp[604120]))
    unknown call_tmp[604132] "expr temp" "maybe param" "maybe type" "temp"
    (604135 'move' call_tmp[604132](41246 call chpl_t _mt[243] t[41232]))
    (354236 'is_proper_subtype' call_tmp[604125] call_tmp[604132])
  }
  function _cast[41326](arg t[41323]:owned[415399](?), ref arg x[41331]:owned[415399](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505324] "RVV" "temp"
    unknown call_tmp[604139] "expr temp" "maybe param" "maybe type" "temp"
    (604142 'move' call_tmp[604139](41352 call chpl_t _mt[243] t[41323]))
    unknown call_tmp[604144] "expr temp" "maybe param" "maybe type" "temp"
    (604147 'move' call_tmp[604144](41356 call _to_unmanaged call_tmp[604139]))
    unknown call_tmp[604149] "expr temp" "maybe param" "maybe type" "temp"
    (604152 'move' call_tmp[604149](41358 call _to_nonnil call_tmp[604144]))
    unknown call_tmp[604156] "expr temp" "maybe param" "maybe type" "temp"
    (604159 'move' call_tmp[604156](41346 call chpl_p _mt[243] x[41331]))
    unknown call_tmp[604161] "maybe param" "maybe type" "temp"
    (604164 'move' call_tmp[604161](41359 call _cast call_tmp[604149] call_tmp[604156]))
    unknown castPtr[41362] "dead at end of block" "insert auto destroy"
    (540598 'init var' castPtr[41362] call_tmp[604161])
    (41365 'end of statement')
    unknown call_tmp[604168] "expr temp" "maybe param" "maybe type" "temp"
    (604171 'move' call_tmp[604168](41368 call chpl_p _mt[243] x[41331]))
    (41372 call = call_tmp[604168] nil[44])
    (474143 'end of statement')
    unknown call_tmp[604173] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604176 'move' call_tmp[604173](747804 'new' _owned[30](?) castPtr[41362]))
    (505329 'move' ret[505324](505328 'deref' call_tmp[604173]))
    gotoReturn _end__cast[505322] _end__cast[505322]
    (474144 'end of statement' castPtr[41362])
    label _end__cast[505322]
    (505326 return ret[505324])
  }
  where {
    unknown call_tmp[604180] "expr temp" "maybe param" "maybe type" "temp"
    (604183 'move' call_tmp[604180](41341 call chpl_t _mt[243] x[41331]))
    unknown call_tmp[604187] "expr temp" "maybe param" "maybe type" "temp"
    (604190 'move' call_tmp[604187](41336 call chpl_t _mt[243] t[41323]))
    (354237 'is_proper_subtype' call_tmp[604180] call_tmp[604187])
  }
  function _cast[41394](arg t[41391]:owned?[415395](?), ref arg x[41400]:owned?[415395](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505335] "RVV" "temp"
    unknown call_tmp[604194] "expr temp" "maybe param" "maybe type" "temp"
    (604197 'move' call_tmp[604194](41421 call chpl_t _mt[243] t[41391]))
    unknown call_tmp[604199] "expr temp" "maybe param" "maybe type" "temp"
    (604202 'move' call_tmp[604199](41425 call _to_unmanaged call_tmp[604194]))
    unknown call_tmp[604204] "expr temp" "maybe param" "maybe type" "temp"
    (604207 'move' call_tmp[604204](41427 call _to_nilable call_tmp[604199]))
    unknown call_tmp[604211] "expr temp" "maybe param" "maybe type" "temp"
    (604214 'move' call_tmp[604211](41415 call chpl_p _mt[243] x[41400]))
    unknown call_tmp[604216] "maybe param" "maybe type" "temp"
    (604219 'move' call_tmp[604216](41428 call _cast call_tmp[604204] call_tmp[604211]))
    unknown castPtr[41430] "dead at end of block" "insert auto destroy"
    (540600 'init var' castPtr[41430] call_tmp[604216])
    (41433 'end of statement')
    unknown call_tmp[604221] "expr temp" "maybe param" "maybe type" "temp"
    (604224 'move' call_tmp[604221](41437 call != castPtr[41430] nil[44]))
    unknown call_tmp[604226] "expr temp" "maybe param" "maybe type" "temp"
    (604229 'move' call_tmp[604226](41448 call _cond_test call_tmp[604221]))
    if call_tmp[604226]
    {
      unknown call_tmp[604233] "expr temp" "maybe param" "maybe type" "temp"
      (604236 'move' call_tmp[604233](41440 call chpl_p _mt[243] x[41400]))
      (41444 call = call_tmp[604233] nil[44])
    }
    unknown call_tmp[604238] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604241 'move' call_tmp[604238](747805 'new' _owned[30](?) castPtr[41430]))
    (505340 'move' ret[505335](505339 'deref' call_tmp[604238]))
    gotoReturn _end__cast[505333] _end__cast[505333]
    (474147 'end of statement' castPtr[41430])
    label _end__cast[505333]
    (505337 return ret[505335])
  }
  where {
    unknown call_tmp[604245] "expr temp" "maybe param" "maybe type" "temp"
    (604248 'move' call_tmp[604245](41410 call chpl_t _mt[243] x[41400]))
    unknown call_tmp[604252] "expr temp" "maybe param" "maybe type" "temp"
    (604255 'move' call_tmp[604252](41405 call chpl_t _mt[243] t[41391]))
    (354238 'is_proper_subtype' call_tmp[604245] call_tmp[604252])
  }
  function _cast[41471](arg t[41468]:owned?[415395](?), ref arg x[41476]:owned[415399](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505346] "RVV" "temp"
    unknown call_tmp[604259] "expr temp" "maybe param" "maybe type" "temp"
    (604262 'move' call_tmp[604259](41500 call chpl_t _mt[243] t[41468]))
    unknown call_tmp[604264] "expr temp" "maybe param" "maybe type" "temp"
    (604267 'move' call_tmp[604264](41504 call _to_unmanaged call_tmp[604259]))
    unknown call_tmp[604269] "expr temp" "maybe param" "maybe type" "temp"
    (604272 'move' call_tmp[604269](41506 call _to_nilable call_tmp[604264]))
    unknown call_tmp[604276] "expr temp" "maybe param" "maybe type" "temp"
    (604279 'move' call_tmp[604276](41494 call chpl_p _mt[243] x[41476]))
    unknown call_tmp[604281] "maybe param" "maybe type" "temp"
    (604284 'move' call_tmp[604281](41507 call _cast call_tmp[604269] call_tmp[604276]))
    unknown castPtr[41509] "dead at end of block" "insert auto destroy"
    (540602 'init var' castPtr[41509] call_tmp[604281])
    (41512 'end of statement')
    unknown call_tmp[604286] "expr temp" "maybe param" "maybe type" "temp"
    (604289 'move' call_tmp[604286](41516 call != castPtr[41509] nil[44]))
    unknown call_tmp[604291] "expr temp" "maybe param" "maybe type" "temp"
    (604294 'move' call_tmp[604291](41527 call _cond_test call_tmp[604286]))
    if call_tmp[604291]
    {
      unknown call_tmp[604298] "expr temp" "maybe param" "maybe type" "temp"
      (604301 'move' call_tmp[604298](41519 call chpl_p _mt[243] x[41476]))
      (41523 call = call_tmp[604298] nil[44])
    }
    unknown call_tmp[604303] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604306 'move' call_tmp[604303](747806 'new' _owned[30](?) castPtr[41509]))
    (505351 'move' ret[505346](505350 'deref' call_tmp[604303]))
    gotoReturn _end__cast[505344] _end__cast[505344]
    (474150 'end of statement' castPtr[41509])
    label _end__cast[505344]
    (505348 return ret[505346])
  }
  where {
    unknown call_tmp[604310] "expr temp" "maybe param" "maybe type" "temp"
    (604313 'move' call_tmp[604310](41489 call chpl_t _mt[243] x[41476]))
    unknown call_tmp[604317] "expr temp" "maybe param" "maybe type" "temp"
    (604320 'move' call_tmp[604317](41482 call chpl_t _mt[243] t[41468]))
    unknown call_tmp[604322] "expr temp" "maybe param" "maybe type" "temp"
    (604325 'move' call_tmp[604322](41486 call _to_nonnil call_tmp[604317]))
    (354239 'is_proper_subtype' call_tmp[604310] call_tmp[604322])
  }
  function _cast[41547](arg t[41544]:_owned[30](?), arg x[41550]:_nilType[42]) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505357] "RVV" "temp"
    unknown call_tmp[604329] "expr temp" "maybe param" "maybe type" "temp"
    (604332 'move' call_tmp[604329](41555 call chpl_t _mt[243] t[41544]))
    unknown call_tmp[604334] "expr temp" "maybe param" "maybe type" "temp"
    (604337 'move' call_tmp[604334](41559 call isNonNilableClass call_tmp[604329]))
    unknown call_tmp[604339] "expr temp" "maybe param" "maybe type" "temp"
    (604342 'move' call_tmp[604339](41581 call _cond_test call_tmp[604334]))
    if call_tmp[604339]
    {
      (41579 call compilerError "Illegal cast from nil to non-nilable owned type")
    }
    unknown tmp[41588] "dead at end of block" "insert auto destroy"
    (540604 'default init var' tmp[41588] t[41544])
    (41591 'end of statement')
    (505362 'move' ret[505357](505361 'deref' tmp[41588]))
    gotoReturn _end__cast[505355] _end__cast[505355]
    (474153 'end of statement' tmp[41588])
    label _end__cast[505355]
    (505359 return ret[505357])
  }
  function postfix![41603](const  ref arg x[41600]:_owned[30](?)) : _unknown[51] "always propagate line file info" "inline" "no doc"
  {
    unknown ret[505368] "RVV" "temp"
    unknown call_tmp[604344] "expr temp" "maybe param" "maybe type" "temp"
    (604347 'move' call_tmp[604344](41649 call _cond_test 1))
    if call_tmp[604344]
    {
      unknown call_tmp[604351] "expr temp" "maybe param" "maybe type" "temp"
      (604354 'move' call_tmp[604351](41612 call chpl_t _mt[243] x[41600]))
      unknown call_tmp[604356] "expr temp" "maybe param" "maybe type" "temp"
      (604359 'move' call_tmp[604356](41616 call _to_nilable call_tmp[604351]))
      unknown call_tmp[604363] "expr temp" "maybe param" "maybe type" "temp"
      (604366 'move' call_tmp[604363](41618 call chpl_t _mt[243] x[41600]))
      unknown call_tmp[604368] "expr temp" "maybe param" "maybe type" "temp"
      (604371 'move' call_tmp[604368](41621 call == call_tmp[604356] call_tmp[604363]))
      unknown call_tmp[604373] "expr temp" "maybe param" "maybe type" "temp"
      (604376 'move' call_tmp[604373](41644 call _cond_test call_tmp[604368]))
      if call_tmp[604373]
      {
        unknown call_tmp[604380] "expr temp" "maybe param" "maybe type" "temp"
        (604383 'move' call_tmp[604380](41624 call chpl_p _mt[243] x[41600]))
        unknown call_tmp[604385] "expr temp" "maybe param" "maybe type" "temp"
        (604388 'move' call_tmp[604385](41628 call == call_tmp[604380] nil[44]))
        unknown call_tmp[604390] "expr temp" "maybe param" "maybe type" "temp"
        (604393 'move' call_tmp[604390](41639 call _cond_test call_tmp[604385]))
        if call_tmp[604390]
        {
          (41636 call nilCheckHalt module=[255] HaltWrappers[210018] "argument to ! is nil")
          (356996 'referenced modules list' HaltWrappers[210018])
        }
      }
    }
    unknown call_tmp[604397] "expr temp" "maybe param" "maybe type" "temp"
    (604400 'move' call_tmp[604397](41655 call chpl_p _mt[243] x[41600]))
    unknown call_tmp[604402] "expr temp" "maybe param" "maybe type" "temp"
    (604405 'move' call_tmp[604402](41659 call _to_nonnil call_tmp[604397]))
    (505373 'move' ret[505368](505372 'deref' call_tmp[604402]))
    (505370 return ret[505368])
    (355069 'used modules list'(41606 'import' HaltWrappers[210018]))
  }
  (355065 'used modules list'(39588 'use' ChapelStandard[20267]))
}