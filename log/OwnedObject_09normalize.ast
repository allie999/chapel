AST dump for OwnedObject after pass normalize.
Module use list: ChapelStandard HaltWrappers 

{
  function chpl__init_OwnedObject[415835]() : void[4] "insert line file info" "module init"
  {
    (505238 return _void[55])
  }
  function _owned[30](?).chpl_forwarding_expr1[39603](arg _mt[40580]:_MT[238], arg this[40578]:_owned[30](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[504992] "RVV" "temp"
    (504996 'move' ret[504992](39602 call(370288 call (partial) borrow _mt[243] this[40578])))
    (504994 return ret[504992])
  }
  function _owned[30](?).init[39613](arg _mt[40584]:_MT[238], ref arg this[40582]:_owned[30](?), arg chpl_t[39611]:_any[178](?)) : void[4] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[602850] "expr temp" "maybe param" "maybe type" "temp"
    (602853 'move' call_tmp[602850](39618 call isClass chpl_t[39611]))
    unknown call_tmp[602855] "expr temp" "maybe param" "maybe type" "temp"
    (602858 'move' call_tmp[602855](39619 call ! call_tmp[602850]))
    unknown call_tmp[602860] "expr temp" "maybe param" "maybe type" "temp"
    (602863 'move' call_tmp[602860](39642 call _cond_test call_tmp[602855]))
    if call_tmp[602860]
    {
      (39640 call compilerError "owned only works with classes")
    }
    unknown tmp[453965] "temp" "type variable"
    (453967 'move' tmp[453965](39657 call _to_borrowed chpl_t[39611]))
    (453969 'init field' this[40582] c"chpl_t" tmp[453965])
    (473930 'end of statement')
    unknown call_tmp[602865] "expr temp" "maybe param" "maybe type" "temp"
    (602868 'move' call_tmp[602865](453983 '.v' this[40582] c"chpl_t"))
    unknown call_tmp[602870] "maybe param" "maybe type" "temp"
    (602873 'move' call_tmp[602870](453975 'to nilable class' call_tmp[602865]))
    unknown tmp[453973] "temp"
    (453977 'init var' tmp[453973] nil[44] call_tmp[602870])
    (453979 'init field' this[40582] c"chpl_p" tmp[453973])
    (473931 'end of statement')
    (504998 return _void[55])
  }
  function _owned[30](?).init[39679](arg _mt[40588]:_MT[238], ref arg this[40586]:_owned[30](?), arg p[39676]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (39700 call compilerError "cannot initialize owned from a borrow")
    (473932 'end of statement')
    unknown call_tmp[602877] "expr temp" "maybe param" "maybe type" "temp"
    (602880 'move' call_tmp[602877](39712 call _to_unmanaged p[39676]))
    (39714 call(39706 call (partial) init _mt[243] this[40586]) call_tmp[602877])
    (505000 return _void[55])
  }
  function _owned[30](?).init[39724](arg _mt[40592]:_MT[238], ref arg this[40590]:_owned[30](?), arg p[39721]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[453986] "temp" "type variable"
    unknown call_tmp[602882] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602885 'move' call_tmp[602882](39732 'typeof' p[39721]))
    (453988 'move' tmp[453986](39734 call _to_borrowed call_tmp[602882]))
    (453990 'init field' this[40590] c"chpl_t" tmp[453986])
    (473934 'end of statement')
    unknown call_tmp[602887] "maybe param" "maybe type" "temp"
    (602890 'move' call_tmp[602887](39746 call _to_borrowed p[39721]))
    unknown call_tmp[602892] "expr temp" "maybe param" "maybe type" "temp"
    (602895 'move' call_tmp[602892](454004 '.v' this[40590] c"chpl_t"))
    unknown call_tmp[602897] "maybe param" "maybe type" "temp"
    (602900 'move' call_tmp[602897](453996 'to nilable class' call_tmp[602892]))
    unknown tmp[453994] "temp"
    (453998 'init var' tmp[453994] call_tmp[602887] call_tmp[602897])
    (454000 'init field' this[40590] c"chpl_p" tmp[453994])
    (473935 'end of statement')
    (505002 return _void[55])
  }
  function _owned[30](?).init[39759](arg _mt[40596]:_MT[238], ref arg this[40594]:_owned[30](?), arg p[39756]:_any[178](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (39790 call compilerError "owned only works with classes")
    (473936 'end of statement')
    unknown tmp[454013] "temp" "type variable"
    (454015 'move' tmp[454013](454007 'typeof' p[39756]))
    (454017 'init field' this[40594] c"chpl_t" tmp[454013])
    (473937 'end of statement')
    unknown call_tmp[602902] "expr temp" "maybe param" "maybe type" "temp"
    (602905 'move' call_tmp[602902](454031 '.v' this[40594] c"chpl_t"))
    unknown call_tmp[602907] "maybe param" "maybe type" "temp"
    (602910 'move' call_tmp[602907](454023 'to nilable class' call_tmp[602902]))
    unknown tmp[454021] "temp"
    (454025 'init var' tmp[454021] p[39756] call_tmp[602907])
    (454027 'init field' this[40594] c"chpl_p" tmp[454021])
    (473938 'end of statement')
    (505004 return _void[55])
  }
  where {
    unknown tmp[418012] "maybe param" "temp"
    unknown tmp[418033] "maybe param" "temp"
    unknown call_tmp[602912] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602915 'move' call_tmp[602912](454009 'typeof' p[39756]))
    unknown call_tmp[602917] "expr temp" "maybe param" "maybe type" "temp"
    (602920 'move' call_tmp[602917](39764 call isClass call_tmp[602912]))
    (418044 'move' tmp[418033](39766 call == call_tmp[602917] 0))
    unknown call_tmp[602922] "expr temp" "maybe param" "maybe type" "temp"
    (602925 'move' call_tmp[602922](418046 call _cond_invalid tmp[418033]))
    if call_tmp[602922]
    {
      (418049 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553799] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553800] "maybe param" "temp"
    unknown call_tmp[602927] "expr temp" "maybe param" "maybe type" "temp"
    (602930 'move' call_tmp[602927](418034 call isTrue tmp[418033]))
    (553805 'move' tmp[553800](553803 call _cond_test call_tmp[602927]))
    if tmp[553800]
    {
      unknown tmp[553807] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602932] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (602935 'move' call_tmp[602932](454011 'typeof' p[39756]))
      unknown call_tmp[602937] "expr temp" "maybe param" "maybe type" "temp"
      (602940 'move' call_tmp[602937](354098 'is_subtype' _owned[30](?) call_tmp[602932]))
      unknown call_tmp[602942] "expr temp" "maybe param" "maybe type" "temp"
      (602945 'move' call_tmp[602942](39774 call == call_tmp[602937] 0))
      (553809 'move' tmp[553807](418037 call isTrue call_tmp[602942]))
      (553814 'move' tmp[553799](553811 '_paramFoldLogical' tmp[553800] tmp[553807]))
    }
    {
      (553819 'move' tmp[553799](553816 '_paramFoldLogical' tmp[553800] 0))
    }
    (418023 'move' tmp[418012] tmp[553799])
    unknown call_tmp[602947] "expr temp" "maybe param" "maybe type" "temp"
    (602950 'move' call_tmp[602947](418025 call _cond_invalid tmp[418012]))
    if call_tmp[602947]
    {
      (418028 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553826] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553827] "maybe param" "temp"
    unknown call_tmp[602952] "expr temp" "maybe param" "maybe type" "temp"
    (602955 'move' call_tmp[602952](418013 call isTrue tmp[418012]))
    (553832 'move' tmp[553827](553830 call _cond_test call_tmp[602952]))
    if tmp[553827]
    {
      unknown tmp[553834] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602957] "expr temp" "maybe param" "maybe type" "temp"
      (602960 'move' call_tmp[602957](39781 call isIterator p[39756]))
      unknown call_tmp[602962] "expr temp" "maybe param" "maybe type" "temp"
      (602965 'move' call_tmp[602962](39783 call == call_tmp[602957] 0))
      (553836 'move' tmp[553834](418016 call isTrue call_tmp[602962]))
      (553841 'move' tmp[553826](553838 '_paramFoldLogical' tmp[553827] tmp[553834]))
    }
    {
      (553846 'move' tmp[553826](553843 '_paramFoldLogical' tmp[553827] 0))
    }
    (748087 call chpl_statementLevelSymbol tmp[553826])
  }
  function _owned[30](?).init=[39818](arg _mt[40600]:_MT[238], ref arg this[40598]:_owned[30](?), ref arg src[39815]:_owned[30](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[418054] "maybe param" "temp"
    unknown call_tmp[602967] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602970 'move' call_tmp[602967](39822 'typeof' this[40598]))
    (418065 'move' tmp[418054](39824 call isNonNilableClass call_tmp[602967]))
    unknown call_tmp[602972] "expr temp" "maybe param" "maybe type" "temp"
    (602975 'move' call_tmp[602972](418067 call _cond_invalid tmp[418054]))
    if call_tmp[602972]
    {
      (418070 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553853] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553854] "maybe param" "temp"
    unknown call_tmp[602977] "expr temp" "maybe param" "maybe type" "temp"
    (602980 'move' call_tmp[602977](418055 call isTrue tmp[418054]))
    (553859 'move' tmp[553854](553857 call _cond_test call_tmp[602977]))
    if tmp[553854]
    {
      unknown tmp[553861] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602982] "expr temp" "maybe param" "maybe type" "temp"
      (602985 'move' call_tmp[602982](39828 call isNilableClass src[39815]))
      (553863 'move' tmp[553861](418058 call isTrue call_tmp[602982]))
      (553868 'move' tmp[553853](553865 '_paramFoldLogical' tmp[553854] tmp[553861]))
    }
    {
      (553873 'move' tmp[553853](553870 '_paramFoldLogical' tmp[553854] 0))
    }
    unknown call_tmp[602987] "expr temp" "maybe param" "maybe type" "temp"
    (602990 'move' call_tmp[602987](39854 call _cond_test tmp[553853]))
    if call_tmp[602987]
    {
      (39852 call compilerError "cannot create a non-nilable owned variable from a nilable class instance")
    }
    unknown call_tmp[602992] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602995 'move' call_tmp[602992](39867 'typeof' this[40598]))
    unknown call_tmp[602999] "expr temp" "maybe param" "maybe type" "temp"
    (603002 'move' call_tmp[602999](39868 call chpl_t _mt[243] call_tmp[602992]))
    unknown call_tmp[603006] "expr temp" "maybe param" "maybe type" "temp"
    (603009 'move' call_tmp[603006](39862 call chpl_t _mt[243] src[39815]))
    unknown call_tmp[603011] "expr temp" "maybe param" "maybe type" "temp"
    (603014 'move' call_tmp[603011](354099 'is_coercible' call_tmp[602999] call_tmp[603006]))
    unknown call_tmp[603016] "expr temp" "maybe param" "maybe type" "temp"
    (603019 'move' call_tmp[603016](39873 call == call_tmp[603011] 0))
    unknown call_tmp[603021] "expr temp" "maybe param" "maybe type" "temp"
    (603024 'move' call_tmp[603021](39940 call _cond_test call_tmp[603016]))
    if call_tmp[603021]
    {
      unknown call_tmp[603026] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603029 'move' call_tmp[603026](39895 'typeof' src[39815]))
      unknown call_tmp[603031] "expr temp" "maybe param" "maybe type" "temp"
      (603034 'move' call_tmp[603031](39897 call _cast string[26] call_tmp[603026]))
      unknown call_tmp[603036] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603039 'move' call_tmp[603036](39917 'typeof' this[40598]))
      unknown call_tmp[603041] "expr temp" "maybe param" "maybe type" "temp"
      (603044 'move' call_tmp[603041](39919 call _cast string[26] call_tmp[603036]))
      (39938 call compilerError "cannot coerce '" call_tmp[603031] "' to '" call_tmp[603041] "' in initialization")
    }
    unknown tmp[454034] "temp" "type variable"
    unknown call_tmp[603046] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603049 'move' call_tmp[603046](39950 'typeof' this[40598]))
    (454036 'move' tmp[454034](39951 call chpl_t _mt[243] call_tmp[603046]))
    (454038 'init field' this[40598] c"chpl_t" tmp[454034])
    (473942 'end of statement')
    unknown call_tmp[603055] "maybe param" "maybe type" "temp"
    (603058 'move' call_tmp[603055](39966 call(39962 call (partial) release _mt[243] src[39815])))
    unknown call_tmp[603060] "expr temp" "maybe param" "maybe type" "temp"
    (603063 'move' call_tmp[603060](454052 '.v' this[40598] c"chpl_t"))
    unknown call_tmp[603065] "maybe param" "maybe type" "temp"
    (603068 'move' call_tmp[603065](454044 'to nilable class' call_tmp[603060]))
    unknown tmp[454042] "temp"
    (454046 'init var' tmp[454042] call_tmp[603055] call_tmp[603065])
    (454048 'init field' this[40598] c"chpl_p" tmp[454042])
    (473943 'end of statement')
    (505006 return _void[55])
  }
  function _owned[30](?).init=[39985](arg _mt[40604]:_MT[238], ref arg this[40602]:_owned[30](?), arg src[39982]:_shared[32](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40006 call compilerError "cannot create an owned variable from a shared class instance")
    (473944 'end of statement')
    unknown tmp[454055] "temp" "type variable"
    (454057 'move' tmp[454055] int(64)[13])
    (454059 'init field' this[40602] c"chpl_t" tmp[454055])
    (473945 'end of statement')
    unknown tmp[454064] "temp"
    unknown call_tmp[603070] "expr temp" "maybe param" "maybe type" "temp"
    (603073 'move' call_tmp[603070](454074 '.v' this[40602] c"chpl_t"))
    unknown call_tmp[603075] "expr temp" "maybe param" "maybe type" "temp"
    (603078 'move' call_tmp[603075](454066 'to nilable class' call_tmp[603070]))
    (454068 'default init var' tmp[454064] call_tmp[603075])
    (454070 '.=' this[40602] c"chpl_p" tmp[454064])
    (473946 'end of statement')
    (505008 return _void[55])
  }
  function _owned[30](?).init=[40025](arg _mt[40608]:_MT[238], ref arg this[40606]:_owned[30](?), arg src[40022]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40048 call compilerError "cannot create an owned variable from a borrowed class instance")
    (473947 'end of statement')
    unknown tmp[454077] "temp" "type variable"
    (454079 'move' tmp[454077] int(64)[13])
    (454081 'init field' this[40606] c"chpl_t" tmp[454077])
    (473948 'end of statement')
    unknown tmp[454086] "temp"
    unknown call_tmp[603080] "expr temp" "maybe param" "maybe type" "temp"
    (603083 'move' call_tmp[603080](454096 '.v' this[40606] c"chpl_t"))
    unknown call_tmp[603085] "expr temp" "maybe param" "maybe type" "temp"
    (603088 'move' call_tmp[603085](454088 'to nilable class' call_tmp[603080]))
    (454090 'default init var' tmp[454086] call_tmp[603085])
    (454092 '.=' this[40606] c"chpl_p" tmp[454086])
    (473949 'end of statement')
    (505010 return _void[55])
  }
  function _owned[30](?).init=[40067](arg _mt[40612]:_MT[238], ref arg this[40610]:_owned[30](?), arg src[40064]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40088 call compilerError "cannot create an owned variable from an unmanaged class instance")
    (473950 'end of statement')
    unknown tmp[454099] "temp" "type variable"
    (454101 'move' tmp[454099] int(64)[13])
    (454103 'init field' this[40610] c"chpl_t" tmp[454099])
    (473951 'end of statement')
    unknown tmp[454108] "temp"
    unknown call_tmp[603090] "expr temp" "maybe param" "maybe type" "temp"
    (603093 'move' call_tmp[603090](454118 '.v' this[40610] c"chpl_t"))
    unknown call_tmp[603095] "expr temp" "maybe param" "maybe type" "temp"
    (603098 'move' call_tmp[603095](454110 'to nilable class' call_tmp[603090]))
    (454112 'default init var' tmp[454108] call_tmp[603095])
    (454114 '.=' this[40610] c"chpl_p" tmp[454108])
    (473952 'end of statement')
    (505012 return _void[55])
  }
  function _owned[30](?).init=[40107](arg _mt[40616]:_MT[238], ref arg this[40614]:_owned[30](?), arg src[40104]:_nilType[42]) : void[4] "leaves this nil" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[603102] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603105 'move' call_tmp[603102](40114 'typeof' this[40614]))
    unknown call_tmp[603109] "expr temp" "maybe param" "maybe type" "temp"
    (603112 'move' call_tmp[603109](40115 call chpl_t _mt[243] call_tmp[603102]))
    (40119 call(40110 call (partial) init _mt[243] this[40614]) call_tmp[603109])
    (473953 'end of statement')
    unknown call_tmp[603116] "expr temp" "maybe param" "maybe type" "temp"
    (603119 'move' call_tmp[603116](370314 call chpl_t _mt[243] this[40614]))
    unknown call_tmp[603121] "expr temp" "maybe param" "maybe type" "temp"
    (603124 'move' call_tmp[603121](40125 call isNonNilableClass call_tmp[603116]))
    unknown call_tmp[603126] "expr temp" "maybe param" "maybe type" "temp"
    (603129 'move' call_tmp[603126](40147 call _cond_test call_tmp[603121]))
    if call_tmp[603126]
    {
      (40145 call compilerError "Assigning non-nilable owned to nil")
    }
    (505014 return _void[55])
  }
  function _owned[30](?).init[40160](arg _mt[40620]:_MT[238], ref arg this[40618]:_owned[30](?), ref arg src[40157]:_owned[30](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454121] "temp" "type variable"
    (454123 'move' tmp[454121](40167 call chpl_t _mt[243] src[40157]))
    (454125 'init field' this[40618] c"chpl_t" tmp[454121])
    (473955 'end of statement')
    unknown call_tmp[603135] "maybe param" "maybe type" "temp"
    (603138 'move' call_tmp[603135](40183 call(40179 call (partial) release _mt[243] src[40157])))
    unknown call_tmp[603140] "expr temp" "maybe param" "maybe type" "temp"
    (603143 'move' call_tmp[603140](454139 '.v' this[40618] c"chpl_t"))
    unknown call_tmp[603145] "maybe param" "maybe type" "temp"
    (603148 'move' call_tmp[603145](454131 'to nilable class' call_tmp[603140]))
    unknown tmp[454129] "temp"
    (454133 'init var' tmp[454129] call_tmp[603135] call_tmp[603145])
    (454135 'init field' this[40618] c"chpl_p" tmp[454129])
    (473956 'end of statement')
    (505016 return _void[55])
  }
  function _owned[30](?).create[40193](arg _mt[40624]:_MT[238], arg this[40622]:_owned[30](?), arg source[40191]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[603150] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603153 'move' call_tmp[603150](40215 'typeof' source[40191]))
    unknown call_tmp[603155] "expr temp" "maybe param" "maybe type" "temp"
    (603158 'move' call_tmp[603155](40217 call _cast string[26] call_tmp[603150]))
    (40219 call compilerError "cannot create an 'owned' from " call_tmp[603155])
    (505018 return _void[55])
  }
  function _owned[30](?).create[40230](arg _mt[40628]:_MT[238], arg this[40626]:_owned[30](?), in arg take[40227]:_owned[30](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[505022] "RVV" "temp"
    (505027 'move' ret[505022](505026 'deref' take[40227]))
    (505024 return ret[505022])
  }
  function _owned[30](?).create[40244](arg _mt[40632]:_MT[238], arg this[40630]:_owned[30](?), arg p[40241]:unmanaged[220](?)) : _unknown[51] "inline" "method" "primary method" "unsafe"
  {
    unknown ret[505031] "RVV" "temp"
    unknown result[40251] "dead at end of block" "insert auto destroy"
    unknown call_tmp[603160] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603163 'move' call_tmp[603160](40247 'typeof' p[40241]))
    unknown call_tmp[603165] "expr temp" "maybe param" "maybe type" "temp"
    (603168 'move' call_tmp[603165](40249 call _cast _owned[30](?) call_tmp[603160]))
    (540432 'default init var' result[40251] call_tmp[603165])
    (40254 'end of statement')
    (40264 call(40259 call (partial) retain _mt[243] result[40251]) p[40241])
    (473959 'end of statement' result[40251])
    (505036 'move' ret[505031](505035 'deref' result[40251]))
    gotoReturn _end_create[505029] _end_create[505029]
    (473961 'end of statement' result[40251])
    label _end_create[505029]
    (505033 return ret[505031])
  }
  function _owned[30](?).deinit[40273](arg _mt[40636]:_MT[238], arg this[40634]:_owned[30](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603174] "expr temp" "maybe param" "maybe type" "temp"
    (603177 'move' call_tmp[603174](370327 call chpl_p _mt[243] this[40634]))
    unknown call_tmp[603179] "expr temp" "maybe param" "maybe type" "temp"
    (603182 'move' call_tmp[603179](40278 call isClass call_tmp[603174]))
    unknown call_tmp[603184] "expr temp" "maybe param" "maybe type" "temp"
    (603187 'move' call_tmp[603184](40297 call _cond_test call_tmp[603179]))
    if call_tmp[603184]
    {
      unknown call_tmp[603191] "expr temp" "maybe param" "maybe type" "temp"
      (603194 'move' call_tmp[603191](370332 call chpl_p _mt[243] this[40634]))
      unknown call_tmp[603196] "expr temp" "maybe param" "maybe type" "temp"
      (603199 'move' call_tmp[603196](40281 call != call_tmp[603191] nil[44]))
      unknown call_tmp[603201] "expr temp" "maybe param" "maybe type" "temp"
      (603204 'move' call_tmp[603201](40291 call _cond_test call_tmp[603196]))
      if call_tmp[603201]
      {
        unknown call_tmp[603208] "expr temp" "maybe param" "maybe type" "temp"
        (603211 'move' call_tmp[603208](370337 call chpl_p _mt[243] this[40634]))
        unknown call_tmp[603213] "expr temp" "maybe param" "maybe type" "temp"
        (603216 'move' call_tmp[603213](40286 call _to_unmanaged call_tmp[603208]))
        (40288 call chpl__delete call_tmp[603213])
      }
    }
    (505040 return _void[55])
  }
  function _owned[30](?).clear[40306](arg _mt[40640]:_MT[238], ref arg this[40638]:_owned[30](?)) : _unknown[51] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603220] "expr temp" "maybe param" "maybe type" "temp"
    (603223 'move' call_tmp[603220](370342 call chpl_p _mt[243] this[40638]))
    unknown call_tmp[603225] "expr temp" "maybe param" "maybe type" "temp"
    (603228 'move' call_tmp[603225](40310 call != call_tmp[603220] nil[44]))
    unknown call_tmp[603230] "expr temp" "maybe param" "maybe type" "temp"
    (603233 'move' call_tmp[603230](40326 call _cond_test call_tmp[603225]))
    if call_tmp[603230]
    {
      unknown call_tmp[603237] "expr temp" "maybe param" "maybe type" "temp"
      (603240 'move' call_tmp[603237](370347 call chpl_p _mt[243] this[40638]))
      unknown call_tmp[603242] "expr temp" "maybe param" "maybe type" "temp"
      (603245 'move' call_tmp[603242](40315 call _to_unmanaged call_tmp[603237]))
      (40317 call chpl__delete call_tmp[603242])
      (473964 'end of statement')
      unknown call_tmp[603249] "expr temp" "maybe param" "maybe type" "temp"
      (603252 'move' call_tmp[603249](370352 call chpl_p _mt[243] this[40638]))
      (40323 call = call_tmp[603249] nil[44])
    }
    (505042 return _void[55])
  }
  function _owned[30](?).retain[40339](arg _mt[40644]:_MT[238], ref arg this[40642]:_owned[30](?), arg newPtr[40336]:unmanaged[220](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603256] "expr temp" "maybe param" "maybe type" "temp"
    (603259 'move' call_tmp[603256](370358 call chpl_t _mt[243] this[40642]))
    unknown call_tmp[603261] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603264 'move' call_tmp[603261](40343 'typeof' newPtr[40336]))
    unknown call_tmp[603266] "expr temp" "maybe param" "maybe type" "temp"
    (603269 'move' call_tmp[603266](354100 'is_coercible' call_tmp[603256] call_tmp[603261]))
    unknown call_tmp[603271] "expr temp" "maybe param" "maybe type" "temp"
    (603274 'move' call_tmp[603271](40347 call ! call_tmp[603266]))
    unknown call_tmp[603276] "expr temp" "maybe param" "maybe type" "temp"
    (603279 'move' call_tmp[603276](40443 call _cond_test call_tmp[603271]))
    if call_tmp[603276]
    {
      unknown call_tmp[603281] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603284 'move' call_tmp[603281](40368 'typeof' newPtr[40336]))
      unknown call_tmp[603286] "expr temp" "maybe param" "maybe type" "temp"
      (603289 'move' call_tmp[603286](40370 call _cast string[26] call_tmp[603281]))
      unknown call_tmp[603291] "expr temp" "maybe param" "maybe type" "temp"
      (603294 'move' call_tmp[603291](40372 call + "cannot retain '" call_tmp[603286]))
      unknown call_tmp[603296] "expr temp" "maybe param" "maybe type" "temp"
      (603299 'move' call_tmp[603296](40391 call + call_tmp[603291] "' "))
      unknown call_tmp[603301] "expr temp" "maybe param" "maybe type" "temp"
      (603304 'move' call_tmp[603301](40410 call + call_tmp[603296] "(expected '"))
      unknown call_tmp[603308] "expr temp" "maybe param" "maybe type" "temp"
      (603311 'move' call_tmp[603308](370364 call chpl_t _mt[243] this[40642]))
      unknown call_tmp[603313] "expr temp" "maybe param" "maybe type" "temp"
      (603316 'move' call_tmp[603313](40415 call _to_unmanaged call_tmp[603308]))
      unknown call_tmp[603318] "expr temp" "maybe param" "maybe type" "temp"
      (603321 'move' call_tmp[603318](40417 call _cast string[26] call_tmp[603313]))
      unknown call_tmp[603323] "expr temp" "maybe param" "maybe type" "temp"
      (603326 'move' call_tmp[603323](40419 call + call_tmp[603301] call_tmp[603318]))
      unknown call_tmp[603328] "expr temp" "maybe param" "maybe type" "temp"
      (603331 'move' call_tmp[603328](40438 call + call_tmp[603323] "')"))
      (40441 call compilerError call_tmp[603328])
    }
    unknown call_tmp[603335] "maybe param" "maybe type" "temp"
    (603338 'move' call_tmp[603335](370369 call chpl_p _mt[243] this[40642]))
    unknown oldPtr[40450] "dead at end of block" "insert auto destroy"
    (540434 'init var' oldPtr[40450] call_tmp[603335])
    (40453 'end of statement')
    unknown call_tmp[603342] "expr temp" "maybe param" "maybe type" "temp"
    (603345 'move' call_tmp[603342](370374 call chpl_p _mt[243] this[40642]))
    (40456 call = call_tmp[603342] newPtr[40336])
    (473967 'end of statement')
    unknown call_tmp[603347] "expr temp" "maybe param" "maybe type" "temp"
    (603350 'move' call_tmp[603347](40468 call _cond_test oldPtr[40450]))
    if call_tmp[603347]
    {
      unknown call_tmp[603352] "expr temp" "maybe param" "maybe type" "temp"
      (603355 'move' call_tmp[603352](40463 call _to_unmanaged oldPtr[40450]))
      (40465 call chpl__delete call_tmp[603352])
      (473968 'end of statement' oldPtr[40450])
    }
    (505044 return _void[55])
  }
  function _owned[30](?).release[40477](arg _mt[40648]:_MT[238], ref arg this[40646]:_owned[30](?)) : _unknown[51] "leaves this nil" "nil from this" "method" "primary method"
  {
    unknown ret[505048] "RVV" "temp"
    unknown call_tmp[603359] "maybe param" "maybe type" "temp"
    (603362 'move' call_tmp[603359](370382 call chpl_p _mt[243] this[40646]))
    unknown oldPtr[40480] "dead at end of block" "insert auto destroy"
    (540436 'init var' oldPtr[40480] call_tmp[603359])
    (40483 'end of statement')
    unknown call_tmp[603366] "expr temp" "maybe param" "maybe type" "temp"
    (603369 'move' call_tmp[603366](370387 call chpl_p _mt[243] this[40646]))
    (40487 call = call_tmp[603366] nil[44])
    (473970 'end of statement')
    unknown call_tmp[603373] "expr temp" "maybe param" "maybe type" "temp"
    (603376 'move' call_tmp[603373](370392 call chpl_t _mt[243] this[40646]))
    unknown call_tmp[603378] "expr temp" "maybe param" "maybe type" "temp"
    (603381 'move' call_tmp[603378](40493 call _to_nilable call_tmp[603373]))
    unknown call_tmp[603385] "expr temp" "maybe param" "maybe type" "temp"
    (603388 'move' call_tmp[603385](370397 call chpl_t _mt[243] this[40646]))
    unknown call_tmp[603390] "expr temp" "maybe param" "maybe type" "temp"
    (603393 'move' call_tmp[603390](40495 call == call_tmp[603378] call_tmp[603385]))
    unknown call_tmp[603395] "expr temp" "maybe param" "maybe type" "temp"
    (603398 'move' call_tmp[603395](40513 call _cond_test call_tmp[603390]))
    if call_tmp[603395]
    {
      unknown call_tmp[603400] "expr temp" "maybe param" "maybe type" "temp"
      (603403 'move' call_tmp[603400](40500 call _to_unmanaged oldPtr[40480]))
      (505053 'move' ret[505048](505052 'deref' call_tmp[603400]))
      gotoReturn _end_release[505046] _end_release[505046]
      (473971 'end of statement' oldPtr[40480])
    }
    {
      unknown call_tmp[603405] "expr temp" "maybe param" "maybe type" "temp"
      (603408 'move' call_tmp[603405](40506 call postfix! oldPtr[40480]))
      unknown call_tmp[603410] "expr temp" "maybe param" "maybe type" "temp"
      (603413 'move' call_tmp[603410](40509 call _to_unmanaged call_tmp[603405]))
      (505058 'move' ret[505048](505057 'deref' call_tmp[603410]))
      gotoReturn _end_release[505046] _end_release[505046]
      (473973 'end of statement' oldPtr[40480])
    }
    label _end_release[505046]
    (505050 return ret[505048])
  }
  function _owned[30](?).borrow[40521](arg _mt[40652]:_MT[238], arg this[40650]:_owned[30](?)) : _unknown[51] "nil from this" "method" "primary method"
  {
    unknown ret[505064] "RVV" "temp"
    unknown call_tmp[603417] "expr temp" "maybe param" "maybe type" "temp"
    (603420 'move' call_tmp[603417](370404 call chpl_t _mt[243] this[40650]))
    unknown call_tmp[603422] "expr temp" "maybe param" "maybe type" "temp"
    (603425 'move' call_tmp[603422](40526 call _to_nilable call_tmp[603417]))
    unknown call_tmp[603429] "expr temp" "maybe param" "maybe type" "temp"
    (603432 'move' call_tmp[603429](370409 call chpl_t _mt[243] this[40650]))
    unknown call_tmp[603434] "expr temp" "maybe param" "maybe type" "temp"
    (603437 'move' call_tmp[603434](40528 call == call_tmp[603422] call_tmp[603429]))
    unknown call_tmp[603439] "expr temp" "maybe param" "maybe type" "temp"
    (603442 'move' call_tmp[603439](40540 call _cond_test call_tmp[603434]))
    if call_tmp[603439]
    {
      unknown call_tmp[603446] "expr temp" "maybe param" "maybe type" "temp"
      (603449 'move' call_tmp[603446](370414 call chpl_p _mt[243] this[40650]))
      (505069 'move' ret[505064](505068 'deref' call_tmp[603446]))
      gotoReturn _end_borrow[505062] _end_borrow[505062]
    }
    {
      unknown call_tmp[603453] "expr temp" "maybe param" "maybe type" "temp"
      (603456 'move' call_tmp[603453](370419 call chpl_p _mt[243] this[40650]))
      unknown call_tmp[603458] "expr temp" "maybe param" "maybe type" "temp"
      (603461 'move' call_tmp[603458](40535 call postfix! call_tmp[603453]))
      (505074 'move' ret[505064](505073 'deref' call_tmp[603458]))
      gotoReturn _end_borrow[505062] _end_borrow[505062]
    }
    label _end_borrow[505062]
    (505066 return ret[505064])
  }
  function _owned[30](?).borrow[40549](arg _mt[40656]:_MT[238], arg this[40654]:_owned[30](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[505080] "RVV" "temp" "type variable"
    unknown call_tmp[603465] "expr temp" "maybe param" "maybe type" "temp"
    (603468 'move' call_tmp[603465](370424 call chpl_t _mt[243] this[40654]))
    unknown call_tmp[603470] "expr temp" "maybe param" "maybe type" "temp"
    (603473 'move' call_tmp[603470](40554 call _to_nilable call_tmp[603465]))
    unknown call_tmp[603477] "expr temp" "maybe param" "maybe type" "temp"
    (603480 'move' call_tmp[603477](370429 call chpl_t _mt[243] this[40654]))
    unknown call_tmp[603482] "expr temp" "maybe param" "maybe type" "temp"
    (603485 'move' call_tmp[603482](40556 call == call_tmp[603470] call_tmp[603477]))
    unknown call_tmp[603487] "expr temp" "maybe param" "maybe type" "temp"
    (603490 'move' call_tmp[603487](40569 call _cond_test call_tmp[603482]))
    if call_tmp[603487]
    {
      unknown call_tmp[603494] "expr temp" "maybe param" "maybe type" "temp"
      (603497 'move' call_tmp[603494](370434 call chpl_t _mt[243] this[40654]))
      (505085 'move' ret[505080](505084 'deref' call_tmp[603494]))
      gotoReturn _end_borrow[505078] _end_borrow[505078]
    }
    {
      unknown call_tmp[603501] "expr temp" "maybe param" "maybe type" "temp"
      (603504 'move' call_tmp[603501](370439 call chpl_t _mt[243] this[40654]))
      unknown call_tmp[603506] "expr temp" "maybe param" "maybe type" "temp"
      (603509 'move' call_tmp[603506](40565 call _to_nonnil call_tmp[603501]))
      (505090 'move' ret[505080](505089 'deref' call_tmp[603506]))
      gotoReturn _end_borrow[505078] _end_borrow[505078]
    }
    label _end_borrow[505078]
    (505082 return ret[505080])
  }
  type _owned[30](?) unknown chpl_t[39589] "no doc" "type variable" unknown chpl_p[39596] "no doc" "owned"(39595 'to nilable class' chpl_t[39589]) forwarding ( )
  type owned[415267](?)
  type owned?[415263](?)
  function =[40665](ref arg lhs[40662]:_owned[30](?), ref arg rhs[40668]:_owned[30](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown tmp[418096] "maybe param" "temp"
    unknown call_tmp[603513] "expr temp" "maybe param" "maybe type" "temp"
    (603516 'move' call_tmp[603513](40688 call chpl_p _mt[243] lhs[40662]))
    (418107 'move' tmp[418096](40692 call == call_tmp[603513] nil[44]))
    unknown call_tmp[603518] "expr temp" "maybe param" "maybe type" "temp"
    (603521 'move' call_tmp[603518](418109 call _cond_invalid tmp[418096]))
    if call_tmp[603518]
    {
      (418112 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553880] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553881] "maybe param" "temp"
    unknown call_tmp[603523] "expr temp" "maybe param" "maybe type" "temp"
    (603526 'move' call_tmp[603523](418097 call isTrue tmp[418096]))
    (553886 'move' tmp[553881](553884 call _cond_test call_tmp[603523]))
    if tmp[553881]
    {
      unknown tmp[553888] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603530] "expr temp" "maybe param" "maybe type" "temp"
      (603533 'move' call_tmp[603530](40695 call chpl_p _mt[243] rhs[40668]))
      unknown call_tmp[603535] "expr temp" "maybe param" "maybe type" "temp"
      (603538 'move' call_tmp[603535](40699 call == call_tmp[603530] nil[44]))
      (553890 'move' tmp[553888](418100 call isTrue call_tmp[603535]))
      (553895 'move' tmp[553880](553892 '_paramFoldLogical' tmp[553881] tmp[553888]))
    }
    {
      (553900 'move' tmp[553880](553897 '_paramFoldLogical' tmp[553881] 0))
    }
    unknown call_tmp[603540] "expr temp" "maybe param" "maybe type" "temp"
    (603543 'move' call_tmp[603540](40705 call _cond_test tmp[553880]))
    if call_tmp[603540]
    {
      gotoReturn _end_=[505094] _end_=[505094]
    }
    unknown tmp[418117] "maybe param" "temp"
    (418128 'move' tmp[418117] 1)
    unknown call_tmp[603545] "expr temp" "maybe param" "maybe type" "temp"
    (603548 'move' call_tmp[603545](418130 call _cond_invalid tmp[418117]))
    if call_tmp[603545]
    {
      (418133 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[553907] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553908] "maybe param" "temp"
    unknown call_tmp[603550] "expr temp" "maybe param" "maybe type" "temp"
    (603553 'move' call_tmp[603550](418118 call isTrue tmp[418117]))
    (553913 'move' tmp[553908](553911 call _cond_test call_tmp[603550]))
    if tmp[553908]
    {
      (553918 'move' tmp[553907](553915 '_paramFoldLogical' tmp[553908] 1))
    }
    {
      unknown tmp[553920] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (553922 'move' tmp[553920](418122 call isTrue enablePostfixBangChecks[324]))
      (553927 'move' tmp[553907](553924 '_paramFoldLogical' tmp[553908] tmp[553920]))
    }
    unknown call_tmp[603555] "expr temp" "maybe param" "maybe type" "temp"
    (603558 'move' call_tmp[603555](40763 call _cond_test tmp[553907]))
    if call_tmp[603555]
    {
      unknown call_tmp[603562] "expr temp" "maybe param" "maybe type" "temp"
      (603565 'move' call_tmp[603562](40716 call chpl_t _mt[243] lhs[40662]))
      unknown call_tmp[603567] "expr temp" "maybe param" "maybe type" "temp"
      (603570 'move' call_tmp[603567](40720 call isNonNilableClass call_tmp[603562]))
      unknown call_tmp[603572] "expr temp" "maybe param" "maybe type" "temp"
      (603575 'move' call_tmp[603572](40758 call _cond_test call_tmp[603567]))
      if call_tmp[603572]
      {
        unknown call_tmp[603579] "expr temp" "maybe param" "maybe type" "temp"
        (603582 'move' call_tmp[603579](40722 call chpl_p _mt[243] rhs[40668]))
        unknown call_tmp[603584] "expr temp" "maybe param" "maybe type" "temp"
        (603587 'move' call_tmp[603584](40726 call == call_tmp[603579] nil[44]))
        unknown call_tmp[603589] "expr temp" "maybe param" "maybe type" "temp"
        (603592 'move' call_tmp[603589](40753 call _cond_test call_tmp[603584]))
        if call_tmp[603589]
        {
          (40750 call nilCheckHalt module=[255] HaltWrappers[209910] "assigning nil to non-nilable owned")
          (356808 'referenced modules list' HaltWrappers[209910])
        }
      }
    }
    unknown call_tmp[603598] "expr temp" "maybe param" "maybe type" "temp"
    (603601 'move' call_tmp[603598](40776 call(40772 call (partial) release _mt[243] rhs[40668])))
    (40778 call(40768 call (partial) retain _mt[243] lhs[40662]) call_tmp[603598])
    label _end_=[505094]
    (505096 return _void[55])
    (354936 'used modules list'(40684 'import' HaltWrappers[209910]))
  }
  where {
    unknown tmp[418075] "maybe param" "temp"
    (418086 'move' tmp[418075](40674 call isNonNilableClass lhs[40662]))
    unknown call_tmp[603603] "expr temp" "maybe param" "maybe type" "temp"
    (603606 'move' call_tmp[603603](418088 call _cond_invalid tmp[418075]))
    if call_tmp[603603]
    {
      (418091 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553934] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553935] "maybe param" "temp"
    unknown call_tmp[603608] "expr temp" "maybe param" "maybe type" "temp"
    (603611 'move' call_tmp[603608](418076 call isTrue tmp[418075]))
    (553940 'move' tmp[553935](553938 call _cond_test call_tmp[603608]))
    if tmp[553935]
    {
      unknown tmp[553942] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603613] "expr temp" "maybe param" "maybe type" "temp"
      (603616 'move' call_tmp[603613](40678 call isNilableClass rhs[40668]))
      (553944 'move' tmp[553942](418079 call isTrue call_tmp[603613]))
      (553949 'move' tmp[553934](553946 '_paramFoldLogical' tmp[553935] tmp[553942]))
    }
    {
      (553954 'move' tmp[553934](553951 '_paramFoldLogical' tmp[553935] 0))
    }
    (40681 call ! tmp[553934])
  }
  function =[40789](ref arg lhs[40786]:_owned[30](?), arg rhs[40792]:_nilType[42]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (40808 call(40804 call (partial) clear _mt[243] lhs[40786]))
    (505100 return _void[55])
  }
  where {
    unknown call_tmp[603620] "expr temp" "maybe param" "maybe type" "temp"
    (603623 'move' call_tmp[603620](40798 call isNonNilableClass lhs[40786]))
    (40799 call ! call_tmp[603620])
  }
  function <=>[40820](ref arg lhs[40817]:_owned[30](?), ref arg rhs[40824]:_owned[30](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[603627] "expr temp" "maybe param" "maybe type" "temp"
    (603630 'move' call_tmp[603627](40828 call chpl_p _mt[243] lhs[40817]))
    unknown call_tmp[603634] "expr temp" "maybe param" "maybe type" "temp"
    (603637 'move' call_tmp[603634](40832 call chpl_p _mt[243] rhs[40824]))
    (40835 call <=> call_tmp[603627] call_tmp[603634])
    (505102 return _void[55])
  }
  function chpl__initCopy[40847](ref arg src[40844]:_owned[30](?)) : _unknown[51] "init copy fn" "no doc"
  {
    unknown ret[505106] "RVV" "temp"
    unknown call_tmp[603639] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603642 'move' call_tmp[603639](747646 'new' _owned[30](?) src[40844]))
    unknown ret[40854] "dead at end of block"
    (540438 'init var' ret[40854] call_tmp[603639])
    (40857 'end of statement')
    (505111 'move' ret[505106](505110 'deref' ret[40854]))
    gotoReturn _end_chpl__initCopy[505104] _end_chpl__initCopy[505104]
    (473986 'end of statement' ret[40854])
    label _end_chpl__initCopy[505104]
    (505108 return ret[505106])
  }
  function chpl__autoCopy[40870](ref arg src[40867]:_owned[30](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[505117] "RVV" "temp"
    unknown call_tmp[603644] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603647 'move' call_tmp[603644](747647 'new' _owned[30](?) src[40867]))
    unknown ret[40877] "dead at end of block" "insert auto destroy"
    (540440 'init var' ret[40877] call_tmp[603644])
    (40880 'end of statement')
    (505122 'move' ret[505117](505121 'deref' ret[40877]))
    gotoReturn _end_chpl__autoCopy[505115] _end_chpl__autoCopy[505115]
    (473988 'end of statement' ret[40877])
    label _end_chpl__autoCopy[505115]
    (505119 return ret[505117])
  }
  function chpl__autoDestroy[40893](ref arg x[40890]:_owned[30](?)) : _unknown[51] "auto destroy fn" "no doc" "no return value for void"
  {
    unknown call_tmp[603649] "expr temp" "maybe param" "maybe type" "temp"
    (603652 'move' call_tmp[603649](40900 'deref' x[40890]))
    (40901 'call destructor' call_tmp[603649])
    (505126 return _void[55])
  }
  function _owned[30](?).readWriteThis[40911](arg _mt[40916]:_MT[238], arg this[40913]:_owned[30](?) :
  _owned[30](?), arg f[40909]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    unknown call_tmp[603656] "expr temp" "maybe param" "maybe type" "temp"
    (603659 'move' call_tmp[603656](40920 call chpl_p _mt[243] this[40913]))
    (40923 call <~> f[40909] call_tmp[603656])
    (505128 return _void[55])
  }
  function _cast[40938](arg t[40935]:owned?[415263](?), in arg x[40943]:owned[415267](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505132] "RVV" "temp"
    unknown call_tmp[603663] "expr temp" "maybe param" "maybe type" "temp"
    (603666 'move' call_tmp[603663](40967 call chpl_t _mt[243] t[40935]))
    unknown call_tmp[603668] "expr temp" "maybe param" "maybe type" "temp"
    (603671 'move' call_tmp[603668](40971 call _to_unmanaged call_tmp[603663]))
    unknown call_tmp[603673] "expr temp" "maybe param" "maybe type" "temp"
    (603676 'move' call_tmp[603673](40973 call _to_nilable call_tmp[603668]))
    unknown call_tmp[603680] "expr temp" "maybe param" "maybe type" "temp"
    (603683 'move' call_tmp[603680](40961 call chpl_p _mt[243] x[40943]))
    unknown call_tmp[603685] "maybe param" "maybe type" "temp"
    (603688 'move' call_tmp[603685](40974 call _cast call_tmp[603673] call_tmp[603680]))
    unknown castPtr[40976] "dead at end of block" "insert auto destroy"
    (540442 'init var' castPtr[40976] call_tmp[603685])
    (40979 'end of statement')
    unknown call_tmp[603692] "expr temp" "maybe param" "maybe type" "temp"
    (603695 'move' call_tmp[603692](40982 call chpl_p _mt[243] x[40943]))
    (40986 call = call_tmp[603692] nil[44])
    (473992 'end of statement')
    unknown call_tmp[603697] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603700 'move' call_tmp[603697](747648 'new' _owned[30](?) castPtr[40976]))
    (505137 'move' ret[505132](505136 'deref' call_tmp[603697]))
    gotoReturn _end__cast[505130] _end__cast[505130]
    (473993 'end of statement' castPtr[40976])
    label _end__cast[505130]
    (505134 return ret[505132])
  }
  where {
    unknown call_tmp[603704] "expr temp" "maybe param" "maybe type" "temp"
    (603707 'move' call_tmp[603704](40954 call chpl_t _mt[243] t[40935]))
    unknown call_tmp[603709] "expr temp" "maybe param" "maybe type" "temp"
    (603712 'move' call_tmp[603709](40958 call _to_nonnil call_tmp[603704]))
    unknown call_tmp[603716] "expr temp" "maybe param" "maybe type" "temp"
    (603719 'move' call_tmp[603716](40948 call chpl_t _mt[243] x[40943]))
    (354102 'is_subtype' call_tmp[603709] call_tmp[603716])
  }
  function _cast[41008](arg t[41005]:owned?[415263](?), in arg x[41014]:owned?[415263](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505143] "RVV" "temp"
    unknown call_tmp[603723] "expr temp" "maybe param" "maybe type" "temp"
    (603726 'move' call_tmp[603723](41035 call chpl_t _mt[243] t[41005]))
    unknown call_tmp[603728] "expr temp" "maybe param" "maybe type" "temp"
    (603731 'move' call_tmp[603728](41039 call _to_unmanaged call_tmp[603723]))
    unknown call_tmp[603733] "expr temp" "maybe param" "maybe type" "temp"
    (603736 'move' call_tmp[603733](41041 call _to_nilable call_tmp[603728]))
    unknown call_tmp[603740] "expr temp" "maybe param" "maybe type" "temp"
    (603743 'move' call_tmp[603740](41029 call chpl_p _mt[243] x[41014]))
    unknown call_tmp[603745] "maybe param" "maybe type" "temp"
    (603748 'move' call_tmp[603745](41042 call _cast call_tmp[603733] call_tmp[603740]))
    unknown castPtr[41044] "dead at end of block" "insert auto destroy"
    (540444 'init var' castPtr[41044] call_tmp[603745])
    (41047 'end of statement')
    unknown call_tmp[603752] "expr temp" "maybe param" "maybe type" "temp"
    (603755 'move' call_tmp[603752](41050 call chpl_p _mt[243] x[41014]))
    (41054 call = call_tmp[603752] nil[44])
    (473995 'end of statement')
    unknown call_tmp[603757] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603760 'move' call_tmp[603757](747649 'new' _owned[30](?) castPtr[41044]))
    (505148 'move' ret[505143](505147 'deref' call_tmp[603757]))
    gotoReturn _end__cast[505141] _end__cast[505141]
    (473996 'end of statement' castPtr[41044])
    label _end__cast[505141]
    (505145 return ret[505143])
  }
  where {
    unknown call_tmp[603764] "expr temp" "maybe param" "maybe type" "temp"
    (603767 'move' call_tmp[603764](41024 call chpl_t _mt[243] t[41005]))
    unknown call_tmp[603771] "expr temp" "maybe param" "maybe type" "temp"
    (603774 'move' call_tmp[603771](41019 call chpl_t _mt[243] x[41014]))
    (354103 'is_subtype' call_tmp[603764] call_tmp[603771])
  }
  function _cast[41075](arg t[41072]:owned[415267](?), in arg x[41080]:owned[415267](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505154] "RVV" "temp"
    unknown call_tmp[603778] "expr temp" "maybe param" "maybe type" "temp"
    (603781 'move' call_tmp[603778](41101 call chpl_t _mt[243] t[41072]))
    unknown call_tmp[603783] "expr temp" "maybe param" "maybe type" "temp"
    (603786 'move' call_tmp[603783](41105 call _to_unmanaged call_tmp[603778]))
    unknown call_tmp[603788] "expr temp" "maybe param" "maybe type" "temp"
    (603791 'move' call_tmp[603788](41107 call _to_nilable call_tmp[603783]))
    unknown call_tmp[603795] "expr temp" "maybe param" "maybe type" "temp"
    (603798 'move' call_tmp[603795](41095 call chpl_p _mt[243] x[41080]))
    unknown call_tmp[603800] "maybe param" "maybe type" "temp"
    (603803 'move' call_tmp[603800](41108 call _cast call_tmp[603788] call_tmp[603795]))
    unknown castPtr[41110] "dead at end of block" "insert auto destroy"
    (540446 'init var' castPtr[41110] call_tmp[603800])
    (41113 'end of statement')
    unknown call_tmp[603807] "expr temp" "maybe param" "maybe type" "temp"
    (603810 'move' call_tmp[603807](41116 call chpl_p _mt[243] x[41080]))
    (41120 call = call_tmp[603807] nil[44])
    (473998 'end of statement')
    unknown call_tmp[603812] "expr temp" "maybe param" "maybe type" "temp"
    (603815 'move' call_tmp[603812](41126 call postfix! castPtr[41110]))
    unknown call_tmp[603817] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603820 'move' call_tmp[603817](747650 'new' _owned[30](?) call_tmp[603812]))
    (505159 'move' ret[505154](505158 'deref' call_tmp[603817]))
    gotoReturn _end__cast[505152] _end__cast[505152]
    (473999 'end of statement' castPtr[41110])
    label _end__cast[505152]
    (505156 return ret[505154])
  }
  where {
    unknown call_tmp[603824] "expr temp" "maybe param" "maybe type" "temp"
    (603827 'move' call_tmp[603824](41090 call chpl_t _mt[243] t[41072]))
    unknown call_tmp[603831] "expr temp" "maybe param" "maybe type" "temp"
    (603834 'move' call_tmp[603831](41085 call chpl_t _mt[243] x[41080]))
    (354104 'is_subtype' call_tmp[603824] call_tmp[603831])
  }
  function _cast[41143](arg t[41140]:owned[415267](?), in arg x[41149]:owned?[415263](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505165] "RVV" "temp"
    unknown call_tmp[603838] "expr temp" "maybe param" "maybe type" "temp"
    (603841 'move' call_tmp[603838](41173 call chpl_t _mt[243] t[41140]))
    unknown call_tmp[603843] "expr temp" "maybe param" "maybe type" "temp"
    (603846 'move' call_tmp[603843](41177 call _to_unmanaged call_tmp[603838]))
    unknown call_tmp[603848] "expr temp" "maybe param" "maybe type" "temp"
    (603851 'move' call_tmp[603848](41179 call _to_nilable call_tmp[603843]))
    unknown call_tmp[603855] "expr temp" "maybe param" "maybe type" "temp"
    (603858 'move' call_tmp[603855](41167 call chpl_p _mt[243] x[41149]))
    unknown call_tmp[603860] "maybe param" "maybe type" "temp"
    (603863 'move' call_tmp[603860](41180 call _cast call_tmp[603848] call_tmp[603855]))
    unknown castPtr[41182] "dead at end of block" "insert auto destroy"
    (540448 'init var' castPtr[41182] call_tmp[603860])
    (41185 'end of statement')
    unknown call_tmp[603865] "expr temp" "maybe param" "maybe type" "temp"
    (603868 'move' call_tmp[603865](41189 call == castPtr[41182] nil[44]))
    unknown call_tmp[603870] "expr temp" "maybe param" "maybe type" "temp"
    (603873 'move' call_tmp[603870](41200 call _cond_test call_tmp[603865]))
    if call_tmp[603870]
    {
      unknown call_tmp[603875] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (603878 'move' call_tmp[603875](747651 'new' NilClassError[368197](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[603880] "expr temp" "maybe param" "maybe type" "temp"
      (603883 'move' call_tmp[603880](467940 call chpl_fix_thrown_error call_tmp[603875]))
      (41197 'throw' call_tmp[603880])
    }
    unknown call_tmp[603887] "expr temp" "maybe param" "maybe type" "temp"
    (603890 'move' call_tmp[603887](41205 call chpl_p _mt[243] x[41149]))
    (41209 call = call_tmp[603887] nil[44])
    (474002 'end of statement')
    unknown call_tmp[603892] "expr temp" "maybe param" "maybe type" "temp"
    (603895 'move' call_tmp[603892](41215 call postfix! castPtr[41182]))
    unknown call_tmp[603897] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603900 'move' call_tmp[603897](747652 'new' _owned[30](?) call_tmp[603892]))
    (505170 'move' ret[505165](505169 'deref' call_tmp[603897]))
    gotoReturn _end__cast[505163] _end__cast[505163]
    (474003 'end of statement' castPtr[41182])
    label _end__cast[505163]
    (505167 return ret[505165])
  }
  where {
    unknown call_tmp[603904] "expr temp" "maybe param" "maybe type" "temp"
    (603907 'move' call_tmp[603904](41162 call chpl_t _mt[243] t[41140]))
    unknown call_tmp[603911] "expr temp" "maybe param" "maybe type" "temp"
    (603914 'move' call_tmp[603911](41155 call chpl_t _mt[243] x[41149]))
    unknown call_tmp[603916] "expr temp" "maybe param" "maybe type" "temp"
    (603919 'move' call_tmp[603916](41159 call _to_nonnil call_tmp[603911]))
    (354105 'is_subtype' call_tmp[603904] call_tmp[603916])
  }
  function _cast[41232](arg t[41229]:owned[415267](?), ref arg x[41238]:owned?[415263](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505176] "RVV" "temp"
    unknown call_tmp[603923] "expr temp" "maybe param" "maybe type" "temp"
    (603926 'move' call_tmp[603923](41256 call chpl_p _mt[243] x[41238]))
    unknown call_tmp[603928] "expr temp" "maybe param" "maybe type" "temp"
    (603931 'move' call_tmp[603928](41260 call == call_tmp[603923] nil[44]))
    unknown call_tmp[603933] "expr temp" "maybe param" "maybe type" "temp"
    (603936 'move' call_tmp[603933](41271 call _cond_test call_tmp[603928]))
    if call_tmp[603933]
    {
      unknown call_tmp[603938] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (603941 'move' call_tmp[603938](747653 'new' NilClassError[368197](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[603943] "expr temp" "maybe param" "maybe type" "temp"
      (603946 'move' call_tmp[603943](467942 call chpl_fix_thrown_error call_tmp[603938]))
      (41268 'throw' call_tmp[603943])
    }
    unknown call_tmp[603950] "expr temp" "maybe param" "maybe type" "temp"
    (603953 'move' call_tmp[603950](41283 call chpl_t _mt[243] t[41229]))
    unknown call_tmp[603955] "expr temp" "maybe param" "maybe type" "temp"
    (603958 'move' call_tmp[603955](41287 call _to_unmanaged call_tmp[603950]))
    unknown call_tmp[603960] "expr temp" "maybe param" "maybe type" "temp"
    (603963 'move' call_tmp[603960](41289 call _to_nonnil call_tmp[603955]))
    unknown call_tmp[603967] "expr temp" "maybe param" "maybe type" "temp"
    (603970 'move' call_tmp[603967](41277 call chpl_p _mt[243] x[41238]))
    unknown call_tmp[603972] "maybe param" "maybe type" "temp"
    (603975 'move' call_tmp[603972](41290 call _cast call_tmp[603960] call_tmp[603967]))
    unknown castPtr[41293] "dead at end of block" "insert auto destroy"
    (540450 'init var' castPtr[41293] call_tmp[603972])
    (41296 'end of statement')
    unknown call_tmp[603979] "expr temp" "maybe param" "maybe type" "temp"
    (603982 'move' call_tmp[603979](41298 call chpl_p _mt[243] x[41238]))
    (41302 call = call_tmp[603979] nil[44])
    (474006 'end of statement')
    unknown call_tmp[603984] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603987 'move' call_tmp[603984](747654 'new' _owned[30](?) castPtr[41293]))
    (505181 'move' ret[505176](505180 'deref' call_tmp[603984]))
    gotoReturn _end__cast[505174] _end__cast[505174]
    (474007 'end of statement' castPtr[41293])
    label _end__cast[505174]
    (505178 return ret[505176])
  }
  where {
    unknown call_tmp[603991] "expr temp" "maybe param" "maybe type" "temp"
    (603994 'move' call_tmp[603991](41249 call chpl_t _mt[243] x[41238]))
    unknown call_tmp[603996] "expr temp" "maybe param" "maybe type" "temp"
    (603999 'move' call_tmp[603996](41253 call _to_nonnil call_tmp[603991]))
    unknown call_tmp[604003] "expr temp" "maybe param" "maybe type" "temp"
    (604006 'move' call_tmp[604003](41243 call chpl_t _mt[243] t[41229]))
    (354106 'is_proper_subtype' call_tmp[603996] call_tmp[604003])
  }
  function _cast[41323](arg t[41320]:owned[415267](?), ref arg x[41328]:owned[415267](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505187] "RVV" "temp"
    unknown call_tmp[604010] "expr temp" "maybe param" "maybe type" "temp"
    (604013 'move' call_tmp[604010](41349 call chpl_t _mt[243] t[41320]))
    unknown call_tmp[604015] "expr temp" "maybe param" "maybe type" "temp"
    (604018 'move' call_tmp[604015](41353 call _to_unmanaged call_tmp[604010]))
    unknown call_tmp[604020] "expr temp" "maybe param" "maybe type" "temp"
    (604023 'move' call_tmp[604020](41355 call _to_nonnil call_tmp[604015]))
    unknown call_tmp[604027] "expr temp" "maybe param" "maybe type" "temp"
    (604030 'move' call_tmp[604027](41343 call chpl_p _mt[243] x[41328]))
    unknown call_tmp[604032] "maybe param" "maybe type" "temp"
    (604035 'move' call_tmp[604032](41356 call _cast call_tmp[604020] call_tmp[604027]))
    unknown castPtr[41359] "dead at end of block" "insert auto destroy"
    (540452 'init var' castPtr[41359] call_tmp[604032])
    (41362 'end of statement')
    unknown call_tmp[604039] "expr temp" "maybe param" "maybe type" "temp"
    (604042 'move' call_tmp[604039](41365 call chpl_p _mt[243] x[41328]))
    (41369 call = call_tmp[604039] nil[44])
    (474009 'end of statement')
    unknown call_tmp[604044] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604047 'move' call_tmp[604044](747655 'new' _owned[30](?) castPtr[41359]))
    (505192 'move' ret[505187](505191 'deref' call_tmp[604044]))
    gotoReturn _end__cast[505185] _end__cast[505185]
    (474010 'end of statement' castPtr[41359])
    label _end__cast[505185]
    (505189 return ret[505187])
  }
  where {
    unknown call_tmp[604051] "expr temp" "maybe param" "maybe type" "temp"
    (604054 'move' call_tmp[604051](41338 call chpl_t _mt[243] x[41328]))
    unknown call_tmp[604058] "expr temp" "maybe param" "maybe type" "temp"
    (604061 'move' call_tmp[604058](41333 call chpl_t _mt[243] t[41320]))
    (354107 'is_proper_subtype' call_tmp[604051] call_tmp[604058])
  }
  function _cast[41391](arg t[41388]:owned?[415263](?), ref arg x[41397]:owned?[415263](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505198] "RVV" "temp"
    unknown call_tmp[604065] "expr temp" "maybe param" "maybe type" "temp"
    (604068 'move' call_tmp[604065](41418 call chpl_t _mt[243] t[41388]))
    unknown call_tmp[604070] "expr temp" "maybe param" "maybe type" "temp"
    (604073 'move' call_tmp[604070](41422 call _to_unmanaged call_tmp[604065]))
    unknown call_tmp[604075] "expr temp" "maybe param" "maybe type" "temp"
    (604078 'move' call_tmp[604075](41424 call _to_nilable call_tmp[604070]))
    unknown call_tmp[604082] "expr temp" "maybe param" "maybe type" "temp"
    (604085 'move' call_tmp[604082](41412 call chpl_p _mt[243] x[41397]))
    unknown call_tmp[604087] "maybe param" "maybe type" "temp"
    (604090 'move' call_tmp[604087](41425 call _cast call_tmp[604075] call_tmp[604082]))
    unknown castPtr[41427] "dead at end of block" "insert auto destroy"
    (540454 'init var' castPtr[41427] call_tmp[604087])
    (41430 'end of statement')
    unknown call_tmp[604092] "expr temp" "maybe param" "maybe type" "temp"
    (604095 'move' call_tmp[604092](41434 call != castPtr[41427] nil[44]))
    unknown call_tmp[604097] "expr temp" "maybe param" "maybe type" "temp"
    (604100 'move' call_tmp[604097](41445 call _cond_test call_tmp[604092]))
    if call_tmp[604097]
    {
      unknown call_tmp[604104] "expr temp" "maybe param" "maybe type" "temp"
      (604107 'move' call_tmp[604104](41437 call chpl_p _mt[243] x[41397]))
      (41441 call = call_tmp[604104] nil[44])
    }
    unknown call_tmp[604109] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604112 'move' call_tmp[604109](747656 'new' _owned[30](?) castPtr[41427]))
    (505203 'move' ret[505198](505202 'deref' call_tmp[604109]))
    gotoReturn _end__cast[505196] _end__cast[505196]
    (474013 'end of statement' castPtr[41427])
    label _end__cast[505196]
    (505200 return ret[505198])
  }
  where {
    unknown call_tmp[604116] "expr temp" "maybe param" "maybe type" "temp"
    (604119 'move' call_tmp[604116](41407 call chpl_t _mt[243] x[41397]))
    unknown call_tmp[604123] "expr temp" "maybe param" "maybe type" "temp"
    (604126 'move' call_tmp[604123](41402 call chpl_t _mt[243] t[41388]))
    (354108 'is_proper_subtype' call_tmp[604116] call_tmp[604123])
  }
  function _cast[41468](arg t[41465]:owned?[415263](?), ref arg x[41473]:owned[415267](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505209] "RVV" "temp"
    unknown call_tmp[604130] "expr temp" "maybe param" "maybe type" "temp"
    (604133 'move' call_tmp[604130](41497 call chpl_t _mt[243] t[41465]))
    unknown call_tmp[604135] "expr temp" "maybe param" "maybe type" "temp"
    (604138 'move' call_tmp[604135](41501 call _to_unmanaged call_tmp[604130]))
    unknown call_tmp[604140] "expr temp" "maybe param" "maybe type" "temp"
    (604143 'move' call_tmp[604140](41503 call _to_nilable call_tmp[604135]))
    unknown call_tmp[604147] "expr temp" "maybe param" "maybe type" "temp"
    (604150 'move' call_tmp[604147](41491 call chpl_p _mt[243] x[41473]))
    unknown call_tmp[604152] "maybe param" "maybe type" "temp"
    (604155 'move' call_tmp[604152](41504 call _cast call_tmp[604140] call_tmp[604147]))
    unknown castPtr[41506] "dead at end of block" "insert auto destroy"
    (540456 'init var' castPtr[41506] call_tmp[604152])
    (41509 'end of statement')
    unknown call_tmp[604157] "expr temp" "maybe param" "maybe type" "temp"
    (604160 'move' call_tmp[604157](41513 call != castPtr[41506] nil[44]))
    unknown call_tmp[604162] "expr temp" "maybe param" "maybe type" "temp"
    (604165 'move' call_tmp[604162](41524 call _cond_test call_tmp[604157]))
    if call_tmp[604162]
    {
      unknown call_tmp[604169] "expr temp" "maybe param" "maybe type" "temp"
      (604172 'move' call_tmp[604169](41516 call chpl_p _mt[243] x[41473]))
      (41520 call = call_tmp[604169] nil[44])
    }
    unknown call_tmp[604174] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604177 'move' call_tmp[604174](747657 'new' _owned[30](?) castPtr[41506]))
    (505214 'move' ret[505209](505213 'deref' call_tmp[604174]))
    gotoReturn _end__cast[505207] _end__cast[505207]
    (474016 'end of statement' castPtr[41506])
    label _end__cast[505207]
    (505211 return ret[505209])
  }
  where {
    unknown call_tmp[604181] "expr temp" "maybe param" "maybe type" "temp"
    (604184 'move' call_tmp[604181](41486 call chpl_t _mt[243] x[41473]))
    unknown call_tmp[604188] "expr temp" "maybe param" "maybe type" "temp"
    (604191 'move' call_tmp[604188](41479 call chpl_t _mt[243] t[41465]))
    unknown call_tmp[604193] "expr temp" "maybe param" "maybe type" "temp"
    (604196 'move' call_tmp[604193](41483 call _to_nonnil call_tmp[604188]))
    (354109 'is_proper_subtype' call_tmp[604181] call_tmp[604193])
  }
  function _cast[41544](arg t[41541]:_owned[30](?), arg x[41547]:_nilType[42]) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505220] "RVV" "temp"
    unknown call_tmp[604200] "expr temp" "maybe param" "maybe type" "temp"
    (604203 'move' call_tmp[604200](41552 call chpl_t _mt[243] t[41541]))
    unknown call_tmp[604205] "expr temp" "maybe param" "maybe type" "temp"
    (604208 'move' call_tmp[604205](41556 call isNonNilableClass call_tmp[604200]))
    unknown call_tmp[604210] "expr temp" "maybe param" "maybe type" "temp"
    (604213 'move' call_tmp[604210](41578 call _cond_test call_tmp[604205]))
    if call_tmp[604210]
    {
      (41576 call compilerError "Illegal cast from nil to non-nilable owned type")
    }
    unknown tmp[41585] "dead at end of block" "insert auto destroy"
    (540458 'default init var' tmp[41585] t[41541])
    (41588 'end of statement')
    (505225 'move' ret[505220](505224 'deref' tmp[41585]))
    gotoReturn _end__cast[505218] _end__cast[505218]
    (474019 'end of statement' tmp[41585])
    label _end__cast[505218]
    (505222 return ret[505220])
  }
  function postfix![41600](const  ref arg x[41597]:_owned[30](?)) : _unknown[51] "always propagate line file info" "inline" "no doc"
  {
    unknown ret[505231] "RVV" "temp"
    unknown call_tmp[604215] "expr temp" "maybe param" "maybe type" "temp"
    (604218 'move' call_tmp[604215](41646 call _cond_test 1))
    if call_tmp[604215]
    {
      unknown call_tmp[604222] "expr temp" "maybe param" "maybe type" "temp"
      (604225 'move' call_tmp[604222](41609 call chpl_t _mt[243] x[41597]))
      unknown call_tmp[604227] "expr temp" "maybe param" "maybe type" "temp"
      (604230 'move' call_tmp[604227](41613 call _to_nilable call_tmp[604222]))
      unknown call_tmp[604234] "expr temp" "maybe param" "maybe type" "temp"
      (604237 'move' call_tmp[604234](41615 call chpl_t _mt[243] x[41597]))
      unknown call_tmp[604239] "expr temp" "maybe param" "maybe type" "temp"
      (604242 'move' call_tmp[604239](41618 call == call_tmp[604227] call_tmp[604234]))
      unknown call_tmp[604244] "expr temp" "maybe param" "maybe type" "temp"
      (604247 'move' call_tmp[604244](41641 call _cond_test call_tmp[604239]))
      if call_tmp[604244]
      {
        unknown call_tmp[604251] "expr temp" "maybe param" "maybe type" "temp"
        (604254 'move' call_tmp[604251](41621 call chpl_p _mt[243] x[41597]))
        unknown call_tmp[604256] "expr temp" "maybe param" "maybe type" "temp"
        (604259 'move' call_tmp[604256](41625 call == call_tmp[604251] nil[44]))
        unknown call_tmp[604261] "expr temp" "maybe param" "maybe type" "temp"
        (604264 'move' call_tmp[604261](41636 call _cond_test call_tmp[604256]))
        if call_tmp[604261]
        {
          (41633 call nilCheckHalt module=[255] HaltWrappers[209910] "argument to ! is nil")
          (356865 'referenced modules list' HaltWrappers[209910])
        }
      }
    }
    unknown call_tmp[604268] "expr temp" "maybe param" "maybe type" "temp"
    (604271 'move' call_tmp[604268](41652 call chpl_p _mt[243] x[41597]))
    unknown call_tmp[604273] "expr temp" "maybe param" "maybe type" "temp"
    (604276 'move' call_tmp[604273](41656 call _to_nonnil call_tmp[604268]))
    (505236 'move' ret[505231](505235 'deref' call_tmp[604273]))
    (505233 return ret[505231])
    (354938 'used modules list'(41603 'import' HaltWrappers[209910]))
  }
  (354934 'used modules list'(39585 'use' ChapelStandard[20264]))
}