AST dump for ChapelArray after pass expandExternArrayCalls.
Module use list: 

{
  (113686 'use' ChapelBase)
  (113690 'use' ChapelTuple)
  (113693 'use' ChapelLocale)
  (113696 'use' ArrayViewSlice)
  (113699 'use' ArrayViewRankChange)
  (113702 'use' ArrayViewReindex)
  (113705 'import' Reflection)
  (113708 'use' ChapelDebugPrint)
  (113711 'use' SysCTypes)
  { scopeless
    unknown numPrivateObjects[113717] "no doc"(113716 call chpl__processorAtomicType int[13])
    (113720 'end of statement')
  }
  { scopeless
    unknown nullPid[113724] "no doc" "param"(113722 call - 1)
    (113727 'end of statement')
  }
  { scopeless
    unknown debugBulkTransfer[113729] "config" "no doc" "param" 0
    (113732 'end of statement')
  }
  { scopeless
    unknown useBulkTransfer[113734] "config" "no doc" "param" 1
    (113737 'end of statement')
  }
  { scopeless
    unknown useBulkTransferStride[113739] "config" "no doc" "param" 1
    (113742 'end of statement')
  }
  { scopeless
    unknown useBulkPtrTransfer[113744] "config" "no doc" "param" useBulkTransfer
    (113747 'end of statement')
  }
  { scopeless
    unknown PODValAccess[113749] "config" "no doc" "param" 1
    (113752 'end of statement')
  }
  { scopeless
    unknown useBulkTransferDist[113754] "config" "no doc" "param" 0
    (113757 'end of statement')
  }
  { scopeless
    unknown arrayAsVecGrowthFactor[113761] "config" "no doc" "param" 1.5
    (113764 'end of statement')
  }
  { scopeless
    unknown debugArrayAsVec[113766] "config" "no doc" "param" 0
    (113769 'end of statement')
  }
  function _isPrivatized[113774](arg value[113772]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      (113806 return(113804 call &&(113777 call ! _local)(113802 call ||(113790 call && _privatization(113789 call(113785 call .(113781 call postfix! value) c"dsiSupportsPrivatization")))(113801 call(113797 call .(113793 call postfix! value) c"dsiRequiresPrivatization")))))
    }
  }
  function _newPrivatizedClass[113815](arg value[113813]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      const n[113827] "const"(113826 call(113821 call . numPrivateObjects c"fetchAdd") 1)
      (113830 'end of statement')
    }
    { scopeless
      const hereID[113836] "const"(113833 call . here c"id")
      (113839 'end of statement')
    }
    { scopeless
      const privatizeData[113848] "const"(113847 call(113843 call . value c"dsiGetPrivatizeData"))
      (113851 'end of statement')
    }
    {
      const tmp[113868] "const" "temp"
      (113869 'move' tmp[113868](113866 'deref'(113865 '_wide_get_locale'(113855 call Locales 0))))
      { scopeless
        (113863 call _newPrivatizedClassHelp value value n hereID privatizeData)
      }
      (113872 'elided on block' 0 tmp[113868])
    }
    function _newPrivatizedClassHelp[113880](arg parentValue[113878]:_any[178](?), arg originalValue[113882]:_any[178](?), arg n[113884]:_any[178](?), arg hereID[113886]:_any[178](?), arg privatizeData[113888]:_any[178](?)) : _unknown[51]
    {
      { scopeless
        unknown newValue[113891] originalValue
        (113894 'end of statement')
      }
      if(113964 call _cond_test(113901 call != hereID(113898 call . here c"id")))
      {
        (113913 call = newValue(113912 call(113907 call . parentValue c"dsiPrivatize") privatizeData))
        (113937 'chpl_newPrivatizedClass' newValue n)
        (113946 call =(113942 call . newValue c"pid") n)
      }
      {
        (113953 'chpl_newPrivatizedClass' newValue n)
        (113961 call =(113957 call . newValue c"pid") n)
      }
      {
        const _cobeginCount[114051] "const" "end count" "temp"
        (114072 'move' _cobeginCount[114051](114069 call _endCountAlloc 1))
        (114064 call _upEndCount _cobeginCount[114051] 1 2)
        {
          if(114004 call _cond_test(113978 call !=(113974 call .(113971 call . chpl_localeTree c"left") c"_instance") nil[44]))
          {
            { scopeless
              {
                const tmp[113996] "const" "temp"
                (113997 'move' tmp[113996](113994 'deref'(113993 '_wide_get_locale'(113981 call . chpl_localeTree c"left"))))
                { scopeless
                  (113991 call _newPrivatizedClassHelp newValue originalValue n hereID privatizeData)
                }
                (114000 'elided on block' 0 tmp[113996])
              }
            }
          }
          (114054 call _downEndCount _cobeginCount[114051] nil[44])
          (114053 'cobegin block')
        }
        {
          if(114046 call _cond_test(114020 call !=(114016 call .(114013 call . chpl_localeTree c"right") c"_instance") nil[44]))
          {
            { scopeless
              {
                const tmp[114038] "const" "temp"
                (114039 'move' tmp[114038](114036 'deref'(114035 '_wide_get_locale'(114023 call . chpl_localeTree c"right"))))
                { scopeless
                  (114033 call _newPrivatizedClassHelp newValue originalValue n hereID privatizeData)
                }
                (114042 'elided on block' 0 tmp[114038])
              }
            }
          }
          (114060 call _downEndCount _cobeginCount[114051] nil[44])
          (114059 'cobegin block')
        }
        Defer
        {
          {
            (114075 call _endCountFree _cobeginCount[114051])
          }
        }
        (114080 call _waitEndCount _cobeginCount[114051] 1 2)
      }
    }
    (114088 return n)
  }
  { scopeless type
    int[13]
  }
  function _freePrivatizedClass[114099](arg pid[114096] :
  int[13], arg original[114102] :
  object) : _unknown[51]
  {
    if(114112 call _cond_test(114108 call == pid nullPid))
    {
      { scopeless
        (114110 return)
      }
    }
    {
      const tmp[114132] "const" "temp"
      (114133 'move' tmp[114132](114130 'deref'(114129 '_wide_get_locale'(114121 call Locales 0))))
      {
        (114126 call _freePrivatizedClassHelp pid original)
      }
      (114136 'elided on block' 0 tmp[114132])
    }
    function _freePrivatizedClassHelp[114144](arg pid[114142]:_any[178](?), arg original[114146]:_any[178](?)) : _unknown[51]
    {
      { scopeless
        unknown prv[114154](114153 call chpl_getPrivatizedCopy(114150 'to unmanaged class from unknown' object) pid)
        (114157 'end of statement')
      }
      if(114168 call _cond_test(114161 call != prv original))
      {
        { scopeless
          (114165 call chpl__delete prv)
        }
      }
      function chpl_clearPrivatizedClass[114179](arg pid[114176] :
      int[13]) : void[4] "extern" "local args" "no fn body"
      {
      }
      (114186 call chpl_clearPrivatizedClass pid)
      {
        const _cobeginCount[114261] "const" "end count" "temp"
        (114282 'move' _cobeginCount[114261](114279 call _endCountAlloc 1))
        (114274 call _upEndCount _cobeginCount[114261] 1 2)
        {
          if(114219 call _cond_test(114196 call !=(114192 call .(114189 call . chpl_localeTree c"left") c"_instance") nil[44]))
          {
            { scopeless
              {
                const tmp[114211] "const" "temp"
                (114212 'move' tmp[114211](114209 'deref'(114208 '_wide_get_locale'(114199 call . chpl_localeTree c"left"))))
                { scopeless
                  (114206 call _freePrivatizedClassHelp pid original)
                }
                (114215 'elided on block' 0 tmp[114211])
              }
            }
          }
          (114264 call _downEndCount _cobeginCount[114261] nil[44])
          (114263 'cobegin block')
        }
        {
          if(114256 call _cond_test(114233 call !=(114229 call .(114226 call . chpl_localeTree c"right") c"_instance") nil[44]))
          {
            { scopeless
              {
                const tmp[114248] "const" "temp"
                (114249 'move' tmp[114248](114246 'deref'(114245 '_wide_get_locale'(114236 call . chpl_localeTree c"right"))))
                { scopeless
                  (114243 call _freePrivatizedClassHelp pid original)
                }
                (114252 'elided on block' 0 tmp[114248])
              }
            }
          }
          (114270 call _downEndCount _cobeginCount[114261] nil[44])
          (114269 'cobegin block')
        }
        Defer
        {
          {
            (114285 call _endCountFree _cobeginCount[114261])
          }
        }
        (114290 call _waitEndCount _cobeginCount[114261] 1 2)
      }
    }
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[114304](arg value[114302]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      const pid[114310] "const"(114307 call . value c"pid")
      (114313 'end of statement')
    }
    { scopeless
      const hereID[114319] "const"(114316 call . here c"id")
      (114322 'end of statement')
    }
    { scopeless
      const reprivatizeData[114331] "const"(114330 call(114326 call . value c"dsiGetReprivatizeData"))
      (114334 'end of statement')
    }
    {
      const tmp[114351] "const" "temp"
      (114352 'move' tmp[114351](114349 'deref'(114348 '_wide_get_locale'(114338 call Locales 0))))
      { scopeless
        (114346 call _reprivatizeHelp value value pid hereID reprivatizeData)
      }
      (114355 'elided on block' 0 tmp[114351])
    }
    function _reprivatizeHelp[114363](arg parentValue[114361]:_any[178](?), arg originalValue[114365]:_any[178](?), arg pid[114367]:_any[178](?), arg hereID[114369]:_any[178](?), arg reprivatizeData[114371]:_any[178](?)) : _unknown[51]
    {
      { scopeless
        unknown newValue[114374] originalValue
        (114377 'end of statement')
      }
      if(114408 call _cond_test(114384 call != hereID(114381 call . here c"id")))
      {
        (114393 call = newValue(114392 call chpl_getPrivatizedCopy(114389 'typeof' newValue) pid))
        (114406 call(114400 call . newValue c"dsiReprivatize") parentValue reprivatizeData)
      }
      {
        const _cobeginCount[114491] "const" "end count" "temp"
        (114512 'move' _cobeginCount[114491](114509 call _endCountAlloc 1))
        (114504 call _upEndCount _cobeginCount[114491] 1 2)
        {
          if(114446 call _cond_test(114420 call !=(114416 call .(114413 call . chpl_localeTree c"left") c"_instance") nil[44]))
          {
            { scopeless
              {
                const tmp[114438] "const" "temp"
                (114439 'move' tmp[114438](114436 'deref'(114435 '_wide_get_locale'(114423 call . chpl_localeTree c"left"))))
                { scopeless
                  (114433 call _reprivatizeHelp newValue originalValue pid hereID reprivatizeData)
                }
                (114442 'elided on block' 0 tmp[114438])
              }
            }
          }
          (114494 call _downEndCount _cobeginCount[114491] nil[44])
          (114493 'cobegin block')
        }
        {
          if(114486 call _cond_test(114460 call !=(114456 call .(114453 call . chpl_localeTree c"right") c"_instance") nil[44]))
          {
            { scopeless
              {
                const tmp[114478] "const" "temp"
                (114479 'move' tmp[114478](114476 'deref'(114475 '_wide_get_locale'(114463 call . chpl_localeTree c"right"))))
                { scopeless
                  (114473 call _reprivatizeHelp newValue originalValue pid hereID reprivatizeData)
                }
                (114482 'elided on block' 0 tmp[114478])
              }
            }
          }
          (114500 call _downEndCount _cobeginCount[114491] nil[44])
          (114499 'cobegin block')
        }
        Defer
        {
          {
            (114515 call _endCountFree _cobeginCount[114491])
          }
        }
        (114520 call _waitEndCount _cobeginCount[114491] 1 2)
      }
    }
  }
  function _makeIndexTuple[114533](param arg rank[114531]:_any[178](?), arg t[114536] :
  _tuple, param arg expand[114541] :
  bool[10] =
  0) : _unknown[51]
  {
    (114553 return t)
  }
  where {
    (114550 call == rank(114547 call . t c"size"))
  }
  function _makeIndexTuple[114563](param arg rank[114561]:_any[178](?), arg t[114566] :
  _tuple, param arg expand[114571] :
  bool[10] =
  0) : _unknown[51]
  {
    (114601 call compilerError "index rank must match domain rank")
  }
  where {
    (114580 call != rank(114577 call . t c"size"))
  }
  function _makeIndexTuple[114611](param arg rank[114609]:_any[178](?), arg val[114614] :
  integral, param arg expand[114619] :
  bool[10] =
  0) : _unknown[51]
  {
    if(114713 call _cond_test(114628 call || expand(114626 call == rank 1)))
    {
      { scopeless
        unknown t[114635](114633 call * rank(114632 'typeof' val))
        (114638 'end of statement')
      }
      {
        unknown i[114655] 0
        unknown tmp[114656] "maybe param" "temp"
        (114668 'move' tmp[114656](114666 call chpl_compute_low_param_loop_bound 0(114643 call - rank 1)))
        unknown tmp[114657] "maybe param" "temp"
        (114678 'move' tmp[114657](114676 call chpl_compute_high_param_loop_bound 0(114673 call - rank 1)))
        unknown tmp[114658] "maybe param" "temp"
        (114681 'move' tmp[114658] 1)
        ParamForLoop[114683]
        { i[114655] tmp[114656] tmp[114657] tmp[114658]
          { scopeless
            (114652 call =(114650 call t i) val)
          }
        }
        label _unused_continueLabel[114660]
        label _breakLabel[114659]
      }
      (114693 return t)
    }
    {
      (114702 call compilerWarning(114699 call _cast string[26](114697 'typeof' val)))
      (114708 call compilerError "index rank must match domain rank")
      (114711 return val)
    }
  }
  function _newArray[114724](arg value[114722]:_any[178](?)) : _unknown[51] "no copy return"
  {
    if(114749 call _cond_test(114729 call _isPrivatized value))
    {
      { scopeless
        (114739 return(114730 'new'(114738 call _array(114735 call _newPrivatizedClass value) value)))
      }
    }
    {
      { scopeless
        (114747 return(114741 'new'(114746 call _array nullPid value)))
      }
    }
  }
  function _getDomain[114762](arg value[114760]:_any[178](?)) : _unknown[51]
  {
    if(114794 call _cond_test(114771 call !=(114768 call _to_unmanaged(114766 'typeof' value))(114770 'typeof' value)))
    {
      { scopeless
        (114792 call compilerError "Domain on borrow created")
      }
    }
    if(114827 call _cond_test(114803 call _isPrivatized value))
    {
      { scopeless
        (114815 return(114804 'new'(114814 call _domain(114807 call . value c"pid") value(_unowned = 1))))
      }
    }
    {
      { scopeless
        (114825 return(114817 'new'(114824 call _domain nullPid value(_unowned = 1))))
      }
    }
  }
  function _getDistribution[114839](arg value[114837]:_any[178](?)) : _unknown[51]
  {
    if(114868 call _cond_test(114844 call _isPrivatized value))
    {
      { scopeless
        (114856 return(114845 'new'(114855 call _distribution(114848 call . value c"pid") value(_unowned = 1))))
      }
    }
    {
      { scopeless
        (114866 return(114858 'new'(114865 call _distribution nullPid value(_unowned = 1))))
      }
    }
  }
  function chpl__buildDomainRuntimeType[114883](arg dist[114880] :
  _distribution, param arg rank[114886] :
  int[13], arg idxType[114890]:_any[178](?) =
  int[13], param arg stridable[114895] :
  bool[10] =
  0) type : _unknown[51] "runtime type init fn"
  {
    (114907 return(114899 'new'(114906 call _domain dist rank idxType stridable)))
  }
  function chpl__buildDomainRuntimeType[114918](arg dist[114915] :
  _distribution, arg idxType[114920]:_any[178](?), param arg parSafe[114924] :
  bool[10] =
  1) type : _unknown[51] "runtime type init fn"
  {
    (114935 return(114928 'new'(114934 call _domain dist idxType parSafe)))
  }
  function chpl__buildSparseDomainRuntimeType[114946](arg dist[114943] :
  _distribution, arg parentDom[114949] :
  _domain) type : _unknown[51] "runtime type init fn"
  {
    (114958 return(114952 'new'(114957 call _domain dist parentDom)))
  }
  function chpl__convertRuntimeTypeToValue[114969](arg dist[114966] :
  _distribution, param arg rank[114972] :
  int[13], arg idxType[114976]:_any[178](?) =
  int[13], param arg stridable[114980] :
  bool[10], param arg isNoInit[114984] :
  bool[10]) : _unknown[51]
  {
    (114995 return(114987 'new'(114994 call _domain dist rank idxType stridable)))
  }
  function chpl__convertRuntimeTypeToValue[115006](arg dist[115003] :
  _distribution, arg idxType[115008]:_any[178](?), param arg parSafe[115011] :
  bool[10], param arg isNoInit[115015] :
  bool[10]) : _unknown[51]
  {
    (115025 return(115018 'new'(115024 call _domain dist idxType parSafe)))
  }
  function chpl__convertRuntimeTypeToValue[115036](arg dist[115033] :
  _distribution, arg parentDom[115039] :
  _domain, param arg isNoInit[115043] :
  bool[10]) : _unknown[51]
  {
    (115052 return(115046 'new'(115051 call _domain dist parentDom)))
  }
  function chpl__convertValueToRuntimeType[115063](arg dom[115060] :
  _domain) type : _unknown[51]
  {
    (115102 return(115101 call chpl__buildDomainRuntimeType(115076 call . dom c"dist")(115084 call .(115081 call . dom c"_value") c"rank")(115091 call .(115088 call . dom c"_value") c"idxType")(115098 call .(115095 call . dom c"_value") c"stridable")))
  }
  where {
    (115073 call isSubtype(115070 'typeof'(115067 call . dom c"_value")) BaseRectangularDom)
  }
  function chpl__convertValueToRuntimeType[115114](arg dom[115111] :
  _domain) type : _unknown[51]
  {
    (115148 return(115147 call chpl__buildDomainRuntimeType(115127 call . dom c"dist")(115135 call .(115132 call . dom c"_value") c"idxType")(115144 call .(115139 call . dom c"_value") c"parSafe")))
  }
  where {
    (115124 call isSubtype(115121 'typeof'(115118 call . dom c"_value")) BaseAssociativeDom)
  }
  function chpl__convertValueToRuntimeType[115160](arg dom[115157] :
  _domain) type : _unknown[51]
  {
    (115187 return(115186 call chpl__buildSparseDomainRuntimeType(115173 call . dom c"dist")(115183 call .(115178 call . dom c"_value") c"parentDom")))
  }
  where {
    (115170 call isSubtype(115167 'typeof'(115164 call . dom c"_value")) BaseSparseDom)
  }
  function chpl__convertValueToRuntimeType[115199](arg dom[115196] :
  _domain) type : _unknown[51]
  {
    (115223 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, or Bas 0)
    (115227 return 0)
  }
  function chpl__buildArrayRuntimeType[115237](arg dom[115234] :
  _domain, arg eltType[115239]:_any[178](?)) type : _unknown[51] "runtime type init fn"
  {
    (115251 return(115250 call(115244 call . dom c"buildArray") eltType 1))
  }
  function chpl__convertRuntimeTypeToValue[115262](arg dom[115259] :
  _domain, arg eltType[115264]:_any[178](?), param arg isNoInit[115267] :
  bool[10]) : _unknown[51]
  {
    (115280 return(115279 call(115271 call . dom c"buildArray") eltType(115277 call ! isNoInit)))
  }
  function chpl__convertValueToRuntimeType[115293](arg arr[115290] :
  (115287 call chpl__buildArrayRuntimeType nil[44])) type : _unknown[51]
  {
    (115306 return(115305 call chpl__buildArrayRuntimeType(115297 call . arr c"_dom")(115302 call . arr c"eltType")))
  }
  function _getLiteralType[115315](arg t[115313]:_any[178](?)) type : _unknown[51]
  {
    if(115327 call _cond_test(115319 call != t c_string))
    {
      { scopeless
        (115322 return t)
      }
    }
    {
      { scopeless
        (115325 return string[26])
      }
    }
  }
  { scopeless
    unknown CHPL_WARN_DOMAIN_LITERAL[115337] "config" "no doc" "param" "unset"
    (115340 'end of statement')
  }
  { scopeless
    unknown arrayLiteralLowBound[115342] "config" "no doc" "param" defaultLowBound
    (115345 'end of statement')
  }
  { scopeless
    unknown capturedIteratorLowBound[115347] "config" "no doc" "param" defaultLowBound
    (115350 'end of statement')
  }
  function chpl__buildArrayExpr[115358](arg elems[115355]:_any[178](?) ...) : _unknown[51] "ignore transfer errors"
  {
    if(115429 call _cond_test(115371 call &&(115362 call == CHPL_WARN_DOMAIN_LITERAL "true")(115370 call isRange(115368 call elems 0))))
    {
      (115426 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    unknown elemType[115442] "type variable"(115441 call _getLiteralType(115439 'typeof'(115438 call elems 0)))
    { scopeless
      unknown A[115457] "unsafe"(115455 call chpl__buildArrayRuntimeType(115453 call chpl__ensureDomainExpr(115449 call #(115446 call chpl_build_low_bounded_range arrayLiteralLowBound) k)) elemType)
      (115460 'end of statement')
    }
    {
      unknown i[115580] 0
      unknown tmp[115581] "maybe param" "temp"
      (115593 'move' tmp[115581](115591 call chpl_compute_low_param_loop_bound 0(115464 call - k 1)))
      unknown tmp[115582] "maybe param" "temp"
      (115603 'move' tmp[115582](115601 call chpl_compute_high_param_loop_bound 0(115598 call - k 1)))
      unknown tmp[115583] "maybe param" "temp"
      (115606 'move' tmp[115583] 1)
      ParamForLoop[115608]
      { i[115580] tmp[115581] tmp[115582] tmp[115583]
        {
          unknown currType[115476] "type variable"(115475 call _getLiteralType(115473 'typeof'(115472 call elems i)))
          if(115562 call _cond_test(115482 call != currType elemType))
          {
            (115559 call compilerError(115556 call +(115550 call +(115531 call +(115525 call +(115506 call + "Array literal element "(115504 call _cast string[26] i)) " expected to be of type ")(115529 call _cast string[26] elemType)) " but is of type ")(115554 call _cast string[26] currType)))
          }
          (115577 call =(115572 call A(115569 call + i arrayLiteralLowBound))(115576 call elems i))
        }
      }
      label _unused_continueLabel[115585]
      label _breakLabel[115584]
    }
    (115618 return A)
  }
  function chpl__buildAssociativeArrayExpr[115629](arg elems[115626]:_any[178](?) ...) : _unknown[51]
  {
    unknown keyType[115639] "type variable"(115638 call _getLiteralType(115636 'typeof'(115635 call elems 0)))
    unknown valType[115651] "type variable"(115650 call _getLiteralType(115648 'typeof'(115647 call elems 1)))
    { scopeless
      unknown D[115659](115657 call chpl__buildDomainRuntimeType defaultDist keyType)
      (115662 'end of statement')
    }
    (115674 call(115666 call . D c"requestCapacity")(115671 call / k 2))
    { scopeless
      unknown A[115683](115681 call chpl__buildArrayRuntimeType(115679 call chpl__ensureDomainExpr D) valType)
      (115686 'end of statement')
    }
    {
      unknown i[115860] 0
      unknown tmp[115861] "maybe param" "temp"
      (115872 'move' tmp[115861](115870 call chpl_compute_low_param_loop_bound 0(115690 call - k 1)))
      unknown tmp[115862] "maybe param" "temp"
      (115882 'move' tmp[115862](115880 call chpl_compute_high_param_loop_bound 0(115877 call - k 1)))
      unknown tmp[115863] "maybe param" "temp"
      (115885 'move' tmp[115863] 2)
      ParamForLoop[115887]
      { i[115860] tmp[115861] tmp[115862] tmp[115863]
        {
          { scopeless
            unknown elemKey[115701](115700 call elems i)
            (115704 'end of statement')
          }
          { scopeless
            unknown elemVal[115713](115712 call elems(115709 call + i 1))
            (115716 'end of statement')
          }
          unknown elemKeyType[115722] "type variable"(115721 call _getLiteralType(115719 'typeof' elemKey))
          unknown elemValType[115730] "type variable"(115729 call _getLiteralType(115727 'typeof' elemVal))
          if(115786 call _cond_test(115735 call != elemKeyType keyType))
          {
            (115783 call compilerError(115780 call +(115774 call +(115771 call +(115765 call +(115762 call + "Associative array key element "(115760 call _cast string[26](115757 call / i 2))) " expected to be of type ")(115769 call _cast string[26] keyType)) " but is of type ")(115778 call _cast string[26] elemKeyType)))
          }
          if(115843 call _cond_test(115792 call != elemValType valType))
          {
            (115840 call compilerError(115837 call +(115831 call +(115828 call +(115822 call +(115819 call + "Associative array value element "(115817 call _cast string[26](115814 call / i 2))) " expected to be of type ")(115826 call _cast string[26] valType)) " but is of type ")(115835 call _cast string[26] elemValType)))
          }
          (115849 call += D elemKey)
          (115857 call =(115855 call A elemKey) elemVal)
        }
      }
      label _unused_continueLabel[115865]
      label _breakLabel[115864]
    }
    (115897 return A)
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[115908](arg arr[115905] :
  (115904 'to unmanaged class from unknown' BaseArr), arg eltType[115910]:_any[178](?)) : _unknown[51]
  {
    if(115966 call _cond_test(115915 call isArrayType eltType))
    {
      (115923 call =(115919 call . arr c"_decEltRefCounts") 1)
      unknown arrayEltType[115931] "type variable"(115930 call chpl__eltTypeFromArrayRuntimeType eltType)
      { scopeless
        const dom[115938] "const" "ref var"(115937 call chpl__domainFromArrayRuntimeType eltType)
        (115941 'end of statement')
      }
      { scopeless
        const dv[115946] "const"(115943 call . dom c"_instance")
        (115949 'end of statement')
      }
      (115958 call(115953 call . dv c"add_containing_arr") arr)
      (115964 call chpl_incRefCountsForDomainsInArrayEltTypes arr arrayEltType)
    }
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[115980](arg arr[115977] :
  (115976 'to unmanaged class from unknown' BaseArr), arg eltType[115982]:_any[178](?)) : _unknown[51]
  {
    if(116183 call _cond_test(115987 call isArrayType eltType))
    {
      if(116016 call _cond_test(115993 call ==(115989 call . arr c"_decEltRefCounts") 0))
      {
        { scopeless
          (116014 call halt "Decrementing array's elements' ref counts without having incremented first!")
        }
      }
      unknown arrayEltType[116026] "type variable"(116025 call chpl__eltTypeFromArrayRuntimeType eltType)
      { scopeless
        const dom[116033] "const" "ref var"(116032 call chpl__domainFromArrayRuntimeType eltType)
        (116036 'end of statement')
      }
      (116041 call chpl_decRefCountsForDomainsInArrayEltTypes arr arrayEltType)
      { scopeless
        unknown removeDom[116055](116054 call(116049 call .(116044 call . dom c"_instance") c"remove_containing_arr") arr)
        (116058 'end of statement')
      }
      if(116179 call _cond_test removeDom)
      {
        {
          const tmp[116170] "const" "temp"
          (116171 'move' tmp[116170](116168 'deref'(116167 '_wide_get_locale'(116061 call . dom c"_instance"))))
          {
            { scopeless
              const inst[116068] "const"(116065 call . dom c"_instance")
              (116071 'end of statement')
            }
            { scopeless
              unknown tmp[116084] "temp"(116083 call(116079 call . inst c"remove"))
              (116091 call _check_tuple_var_decl tmp[116084] 2)
              unknown domToFree[116073](116085 call tmp[116084] 0)
              unknown distToRemove[116075](116088 call tmp[116084] 1)
              (116096 'end of statement')
            }
            { scopeless
              unknown distToFree[116101] nil[44](116099 'to unmanaged class from unknown'(116098 'to nilable class from type' BaseDist))
              (116104 'end of statement')
            }
            if(116122 call _cond_test(116107 call != distToRemove nil[44]))
            {
              (116118 call = distToFree(116117 call(116113 call .(116111 call postfix! distToRemove) c"remove")))
            }
            if(116139 call _cond_test(116128 call != domToFree nil[44]))
            {
              { scopeless
                (116137 call _delete_dom inst(116136 call _isPrivatized inst))
              }
            }
            if(116162 call _cond_test(116146 call != distToFree nil[44]))
            {
              { scopeless
                (116160 call _delete_dist(116150 call postfix! distToFree)(116159 call _isPrivatized(116155 call . inst c"dist")))
              }
            }
          }
          (116174 'elided on block' 0 tmp[116170])
        }
      }
    }
  }
  function chpl__buildSubDomainType[116196](arg dom[116193] :
  _domain) type : _unknown[51]
  {
    { scopeless
      (116202 return(116201 call chpl__convertValueToRuntimeType dom))
    }
  }
  function chpl__isTupleOfRanges[116211](arg tup[116209]:_any[178](?)) param : _unknown[51]
  {
    {
      unknown i[116242] 0
      unknown tmp[116243] "maybe param" "temp"
      (116255 'move' tmp[116243](116253 call chpl_compute_low_param_loop_bound 0(116219 call -(116215 call . tup c"size") 1)))
      unknown tmp[116244] "maybe param" "temp"
      (116268 'move' tmp[116244](116266 call chpl_compute_high_param_loop_bound 0(116260 call -(116262 call . tup c"size") 1)))
      unknown tmp[116245] "maybe param" "temp"
      (116271 'move' tmp[116245] 1)
      ParamForLoop[116273]
      { i[116242] tmp[116243] tmp[116244] tmp[116245]
        {
          if(116236 call _cond_test(116231 call !(116230 call isRangeType(116228 'typeof'(116227 call tup i)))))
          {
            { scopeless
              (116234 return 0)
            }
          }
        }
      }
      label _unused_continueLabel[116247]
      label _breakLabel[116246]
    }
    (116284 return 1)
  }
  function chpl__buildDomainExpr[116294](arg ranges[116291]:_any[178](?) ...) : _unknown[51]
  {
    { scopeless
      unknown rank[116304] "param"(116301 call . ranges c"size")
      (116307 'end of statement')
    }
    {
      unknown i[116358] 0
      unknown tmp[116359] "maybe param" "temp"
      (116371 'move' tmp[116359](116369 call chpl_compute_low_param_loop_bound 1(116312 call - rank 1)))
      unknown tmp[116360] "maybe param" "temp"
      (116381 'move' tmp[116360](116379 call chpl_compute_high_param_loop_bound 1(116376 call - rank 1)))
      unknown tmp[116361] "maybe param" "temp"
      (116384 'move' tmp[116361] 1)
      ParamForLoop[116386]
      { i[116358] tmp[116359] tmp[116360] tmp[116361]
        { scopeless
          if(116353 call _cond_test(116330 call !=(116320 call .(116319 call ranges 0) c"idxType")(116327 call .(116326 call ranges i) c"idxType")))
          {
            { scopeless
              (116351 call compilerError "idxType varies among domain's dimensions")
            }
          }
        }
      }
      label _unused_continueLabel[116363]
      label _breakLabel[116362]
    }
    {
      unknown i[116437] 0
      unknown tmp[116438] "maybe param" "temp"
      (116450 'move' tmp[116438](116448 call chpl_compute_low_param_loop_bound 0(116398 call - rank 1)))
      unknown tmp[116439] "maybe param" "temp"
      (116460 'move' tmp[116439](116458 call chpl_compute_high_param_loop_bound 0(116455 call - rank 1)))
      unknown tmp[116440] "maybe param" "temp"
      (116463 'move' tmp[116440] 1)
      ParamForLoop[116465]
      { i[116437] tmp[116438] tmp[116439] tmp[116440]
        { scopeless
          if(116432 call _cond_test(116409 call !(116408 call isBoundedRange(116406 call ranges i))))
          {
            { scopeless
              (116430 call compilerError "one of domain's dimensions is not a bounded range")
            }
          }
        }
      }
      label _unused_continueLabel[116442]
      label _breakLabel[116441]
    }
    { scopeless
      unknown d[116490](116488 call chpl__buildDomainRuntimeType defaultDist rank(116480 call .(116479 call ranges 0) c"idxType")(116486 call chpl__anyStridable ranges))
      (116493 'end of statement')
    }
    (116502 call(116497 call . d c"setIndices") ranges)
    (116505 return d)
  }
  where {
    (116299 call chpl__isTupleOfRanges ranges)
  }
  function chpl__buildDomainExpr[116516](arg keys[116513]:_any[178](?) ...) : _unknown[51]
  {
    { scopeless
      unknown count[116522] "param"(116519 call . keys c"size")
      (116525 'end of statement')
    }
    unknown keyType[116535] "type variable"(116534 call _getLiteralType(116532 'typeof'(116531 call keys 0)))
    {
      unknown i[116613] 0
      unknown tmp[116614] "maybe param" "temp"
      (116626 'move' tmp[116614](116624 call chpl_compute_low_param_loop_bound 1(116541 call - count 1)))
      unknown tmp[116615] "maybe param" "temp"
      (116636 'move' tmp[116615](116634 call chpl_compute_high_param_loop_bound 1(116631 call - count 1)))
      unknown tmp[116616] "maybe param" "temp"
      (116639 'move' tmp[116616] 1)
      ParamForLoop[116641]
      { i[116613] tmp[116614] tmp[116615] tmp[116616]
        { scopeless
          if(116609 call _cond_test(116554 call != keyType(116553 call _getLiteralType(116551 'typeof'(116550 call keys i)))))
          {
            (116606 call compilerError(116603 call +(116590 call +(116587 call +(116581 call +(116578 call + "Associative domain element "(116576 call _cast string[26] i)) " expected to be of type ")(116585 call _cast string[26] keyType)) " but is of type ")(116601 call _cast string[26](116599 call _getLiteralType(116597 'typeof'(116596 call keys i))))))
          }
        }
      }
      label _unused_continueLabel[116618]
      label _breakLabel[116617]
    }
    { scopeless
      unknown D[116655](116653 call chpl__buildDomainRuntimeType defaultDist keyType)
      (116658 'end of statement')
    }
    (116665 call(116660 call . D c"requestCapacity") count)
    {
      unknown i[116682] 0
      unknown tmp[116683] "maybe param" "temp"
      (116695 'move' tmp[116683](116693 call chpl_compute_low_param_loop_bound 0(116670 call - count 1)))
      unknown tmp[116684] "maybe param" "temp"
      (116705 'move' tmp[116684](116703 call chpl_compute_high_param_loop_bound 0(116700 call - count 1)))
      unknown tmp[116685] "maybe param" "temp"
      (116708 'move' tmp[116685] 1)
      ParamForLoop[116710]
      { i[116682] tmp[116683] tmp[116684] tmp[116685]
        { scopeless
          (116679 call += D(116678 call keys i))
        }
      }
      label _unused_continueLabel[116687]
      label _breakLabel[116686]
    }
    (116720 return D)
  }
  function chpl__ensureDomainExpr[116730](const  ref arg x[116727] :
  _domain) const ref : _unknown[51]
  {
    (116733 return x)
  }
  function chpl__ensureDomainExpr[116744](arg x[116741]:_any[178](?) ...) : _unknown[51] "compiler generated" "last resort"
  {
    (116751 return(116750 call chpl__buildDomainExpr(116748 'expand_tuple' x)))
  }
  function chpl__ensureDomainExpr[116760](arg t[116758]:_any[178](?)) : _unknown[51] "compiler generated" "last resort"
  {
    (116804 call compilerError "Domain expression was a type ('"(116783 call _cast string[26] t) "') rather than a domain value or range list as expected")
  }
  function chpl__distributed[116815](arg d[116812] :
  _distribution, arg dom[116818] :
  _domain) : _unknown[51]
  {
    if(116882 call _cond_test(116824 call isRectangularDom dom))
    {
      { scopeless
        unknown distDom[116851] dom(116848 call chpl__distributed d(116845 call chpl__buildDomainRuntimeType defaultDist(116826 call . dom c"rank")(116834 call .(116831 call . dom c"_value") c"idxType")(116841 call .(116838 call . dom c"_value") c"stridable")))
        (116854 'end of statement')
      }
      (116857 return distDom)
    }
    {
      { scopeless
        unknown distDom[116874] dom(116871 call chpl__distributed d(116868 call chpl__buildDomainRuntimeType defaultDist(116863 call .(116860 call . dom c"_value") c"idxType")))
        (116877 'end of statement')
      }
      (116880 return distDom)
    }
  }
  function chpl__distributed[116895](arg d[116892] :
  _distribution, arg ranges[116898]:_any[178](?) ...) : _unknown[51]
  {
    (116914 return(116913 call chpl__distributed d(116912 call chpl__buildDomainExpr(116910 'expand_tuple' ranges))))
  }
  where {
    (116904 call chpl__isTupleOfRanges ranges)
  }
  function chpl__isArrayView[116924](arg arr[116922]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      const value[116938] "const"(116935 IfExpr (116929 call isArray arr) then
      { scopeless
        (116931 call . arr c"_value")
      } else
      { scopeless
        arr
      } )
      (116941 'end of statement')
    }
    { scopeless
      unknown isSlice[116949] "param"(116948 call(116944 call . value c"isSliceArrayView"))
      (116952 'end of statement')
    }
    { scopeless
      unknown isRankChange[116959] "param"(116958 call(116954 call . value c"isRankChangeArrayView"))
      (116962 'end of statement')
    }
    { scopeless
      unknown isReindex[116969] "param"(116968 call(116964 call . value c"isReindexArrayView"))
      (116972 'end of statement')
    }
    (116980 return(116978 call ||(116975 call || isSlice isRankChange) isReindex))
  }
  function chpl__getActualArray[116988](arg arr[116986]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown value[117002](116999 IfExpr (116993 call isArray arr) then
      { scopeless
        (116995 call . arr c"_value")
      } else
      { scopeless
        arr
      } )
      (117005 'end of statement')
    }
    { scopeless
      unknown ret[117023](117020 IfExpr (117010 call chpl__isArrayView value) then
      { scopeless
        (117018 call(117014 call . value c"_getActualArray"))
      } else
      { scopeless
        value
      } )
      (117026 'end of statement')
    }
    (117028 return ret)
  }
  function chpl__isDROrDRView[117036](arg arg[117034]:_any[178](?)) param : _unknown[51]
  {
    if(117192 call _cond_test(117048 call ||(117041 call isDomain arg)(117047 call isSubtype(117044 'typeof' arg) BaseDom)))
    {
      { scopeless
        const value[117062] "const"(117059 IfExpr (117053 call isDomain arg) then
        { scopeless
          (117055 call . arg c"_value")
        } else
        { scopeless
          arg
        } )
        (117065 'end of statement')
      }
      { scopeless
        unknown isDR[117073] "param"(117072 call(117068 call . value c"isDefaultRectangular"))
        (117076 'end of statement')
      }
      { scopeless
        unknown isDRView[117092] "param"(117090 call &&(117080 call chpl__isDomainView value)(117089 call(117085 call .(117084 call chpl__getActualDomain value) c"isDefaultRectangular")))
        (117095 'end of statement')
      }
      (117100 return(117098 call || isDR isDRView))
    }
    {
      { scopeless
        if(117188 call _cond_test(117112 call ||(117105 call isArray arg)(117111 call isSubtype(117108 'typeof' arg) BaseArr)))
        {
          { scopeless
            const value[117126] "const"(117123 IfExpr (117117 call isArray arg) then
            { scopeless
              (117119 call . arg c"_value")
            } else
            { scopeless
              arg
            } )
            (117129 'end of statement')
          }
          { scopeless
            unknown isDR[117137] "param"(117136 call(117132 call . value c"isDefaultRectangular"))
            (117140 'end of statement')
          }
          { scopeless
            unknown isDRView[117156] "param"(117154 call &&(117144 call chpl__isArrayView value)(117153 call(117149 call .(117148 call chpl__getActualArray value) c"isDefaultRectangular")))
            (117159 'end of statement')
          }
          (117164 return(117162 call || isDR isDRView))
        }
        {
          (117185 call compilerError "Invalid argument for chpl__isDROrDRView")
        }
      }
    }
  }
  function chpl__isDomainView[117204](arg dom[117202]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      const value[117218] "const"(117215 IfExpr (117209 call isDomain dom) then
      { scopeless
        (117211 call . dom c"_value")
      } else
      { scopeless
        dom
      } )
      (117221 'end of statement')
    }
    { scopeless
      unknown isSlice[117231] "param"(117230 call(117226 call . value c"isSliceDomainView"))
      (117234 'end of statement')
    }
    { scopeless
      unknown isRankChange[117243] "param"(117242 call(117238 call . value c"isRankChangeDomainView"))
      (117246 'end of statement')
    }
    { scopeless
      unknown isReindex[117255] "param"(117254 call(117250 call . value c"isReindexDomainView"))
      (117258 'end of statement')
    }
    (117266 return(117264 call ||(117261 call || isSlice isRankChange) isReindex))
  }
  function chpl__getActualDomain[117274](arg dom[117272]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown value[117288](117285 IfExpr (117279 call isDomain dom) then
      { scopeless
        (117281 call . dom c"_value")
      } else
      { scopeless
        dom
      } )
      (117291 'end of statement')
    }
    { scopeless
      unknown ret[117309](117306 IfExpr (117296 call chpl__isDomainView value) then
      { scopeless
        (117304 call(117300 call . value c"_getActualDomain"))
      } else
      { scopeless
        value
      } )
      (117312 'end of statement')
    }
    (117314 return ret)
  }
  function chpl__isRectangularDomType[117322](arg domainType[117320]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      unknown dom[117325] domainType
      (117328 'end of statement')
    }
    (117340 return(117338 call &&(117333 call isDomainType domainType)(117337 call isRectangularDom dom)))
  }
  function chpl__isSparseDomType[117348](arg domainType[117346]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      unknown dom[117351] domainType
      (117354 'end of statement')
    }
    (117360 return(117359 call isSparseDom dom))
  }
  function chpl__parentDomainFromDomainRuntimeType[117368](arg domainType[117366]:_any[178](?)) : _unknown[51] "return not owned"
  {
    { scopeless
      unknown parentDom[117405] "no auto destroy" "no copy"(117404 'get runtime type field' domainType "parentDom")
      (117408 'end of statement')
    }
    (117417 return(117416 call _getDomain(117412 call . parentDom c"_value")))
  }
  function chpl__distributed[117427](arg d[117424] :
  _distribution, arg domainType[117429]:_any[178](?)) type : _unknown[51]
  {
    if(117462 call _cond_test(117435 call !(117434 call isDomainType domainType)))
    {
      { scopeless
        (117460 call compilerError "cannot apply 'dmapped' to the non-domain type "(117458 call _cast string[26] domainType))
      }
    }
    if(117555 call _cond_test(117471 call chpl__isRectangularDomType domainType))
    {
      { scopeless
        unknown dom[117473] domainType
        (117476 'end of statement')
      }
      (117503 return(117502 call chpl__buildDomainRuntimeType d(117485 call .(117482 call . dom c"_value") c"rank")(117492 call .(117489 call . dom c"_value") c"idxType")(117499 call .(117496 call . dom c"_value") c"stridable")))
    }
    {
      { scopeless
        if(117551 call _cond_test(117508 call chpl__isSparseDomType domainType))
        {
          { scopeless
            const parentDom[117513] "const" "ref var"(117512 call chpl__parentDomainFromDomainRuntimeType domainType)
            (117516 'end of statement')
          }
          (117523 return(117522 call chpl__buildSparseDomainRuntimeType d parentDom))
        }
        {
          { scopeless
            unknown dom[117526] domainType
            (117529 'end of statement')
          }
          (117549 return(117548 call chpl__buildDomainRuntimeType d(117538 call .(117535 call . dom c"_value") c"idxType")(117545 call .(117542 call . dom c"_value") c"parSafe")))
        }
      }
    }
  }
  function chpl__distributionFromDomainRuntimeType[117566](arg rtt[117564]:_any[178](?)) : _unknown[51] "return not owned"
  {
    { scopeless
      unknown dist[117587] "no auto destroy" "no copy"(117586 'get runtime type field' rtt "dist")
      (117590 'end of statement')
    }
    (117599 return(117598 call _getDistribution(117594 call . dist c"_value")))
  }
  function chpl__domainFromArrayRuntimeType[117607](arg rtt[117605]:_any[178](?)) : _unknown[51] "return not owned"
  {
    { scopeless
      unknown dom[117614] "no auto destroy" "no copy"(117613 'get runtime type field' rtt "dom")
      (117617 'end of statement')
    }
    (117626 return(117625 call _getDomain(117621 call . dom c"_value")))
  }
  function chpl__eltTypeFromArrayRuntimeType[117634](arg rtt[117632]:_any[178](?)) type : _unknown[51]
  {
    unknown eltType[117655] "no auto destroy" "no copy" "type variable"(117654 'get runtime type field' rtt "eltType")
    (117660 return eltType)
  }
  function chpl__instanceTypeFromArrayRuntimeType[117668](arg rtt[117666]:_any[178](?)) type : _unknown[51] "ignore runtime type"
  {
    (117705 'chpl_warning' "chpl__instanceTypeFromArrayRuntimeType should not be run")
    (117713 return(117712 'static field type' rtt "_instance"))
  }
  function chpl__buildIndexType[117723](param arg rank[117720] :
  int[13], arg idxType[117725]:_any[178](?)) type : _unknown[51]
  {
    (117732 return idxType)
  }
  where {
    (117729 call == rank 1)
  }
  function chpl__buildIndexType[117744](param arg rank[117741] :
  int[13], arg idxType[117746]:_any[178](?)) type : _unknown[51]
  {
    (117756 return(117754 call * rank idxType))
  }
  where {
    (117750 call > rank 1)
  }
  function chpl__buildIndexType[117768](param arg rank[117765] :
  int[13]) type : _unknown[51]
  {
    { scopeless
      (117775 return(117774 call chpl__buildIndexType rank int[13]))
    }
  }
  function chpl__buildIndexType[117786](arg d[117783] :
  _domain) type : _unknown[51]
  {
    { scopeless
      (117802 return(117801 call chpl__buildIndexType(117790 call . d c"rank")(117798 call .(117795 call . d c"_value") c"idxType")))
    }
  }
  function isRectangularDom[117813](arg d[117810] :
  _domain) param : _unknown[51]
  {
    (117827 return(117826 call isSubtype(117823 call _to_borrowed(117821 'typeof'(117818 call . d c"_value"))) BaseRectangularDom))
  }
  function isRectangularArr[117840](arg a[117837] :
  (117834 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    { scopeless
      (117849 return(117848 call isRectangularDom(117844 call . a c"_dom")))
    }
  }
  function isIrregularDom[117860](arg d[117857] :
  _domain) param : _unknown[51]
  {
    (117872 return(117870 call ||(117865 call isSparseDom d)(117869 call isAssociativeDom d)))
  }
  function isIrregularArr[117885](arg a[117882] :
  (117879 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    { scopeless
      (117894 return(117893 call isIrregularDom(117889 call . a c"_dom")))
    }
  }
  function isAssociativeDom[117905](arg d[117902] :
  _domain) param : _unknown[51]
  {
    function isAssociativeDomClass[117913](arg dc[117910] :
    BaseAssociativeDom) param : _unknown[51]
    {
      { scopeless
        (117916 return 1)
      }
    }
    function isAssociativeDomClass[117926](arg dc[117924]:_any[178](?)) param : _unknown[51]
    {
      { scopeless
        (117929 return 0)
      }
    }
    (117944 return(117943 call isAssociativeDomClass(117941 call _to_borrowed(117937 call . d c"_value"))))
  }
  function isAssociativeArr[117956](arg a[117953] :
  (117950 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    { scopeless
      (117965 return(117964 call isAssociativeDom(117960 call . a c"_dom")))
    }
  }
  function isSparseDom[117976](arg d[117973] :
  _domain) param : _unknown[51]
  {
    function isSparseDomClass[117984](arg dc[117981] :
    BaseSparseDom) param : _unknown[51]
    {
      { scopeless
        (117987 return 1)
      }
    }
    function isSparseDomClass[117997](arg dc[117995]:_any[178](?)) param : _unknown[51]
    {
      { scopeless
        (118000 return 0)
      }
    }
    (118012 return(118011 call isSparseDomClass(118007 call . d c"_value")))
  }
  function isSparseArr[118024](arg a[118021] :
  (118018 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    { scopeless
      (118033 return(118032 call isSparseDom(118028 call . a c"_dom")))
    }
  }
  function chpl__checkDomainsMatch[118046](arg a[118043] :
  (118040 call chpl__buildArrayRuntimeType nil[44]), arg b[118048]:_any[178](?)) : _unknown[51]
  {
    (118051 'import' HaltWrappers)
    if(118092 call _cond_test boundsChecking)
    {
      if(118087 call _cond_test(118060 call !=(118056 call . a c"_dom") b))
      {
        (118084 call(118063 call . HaltWrappers c"boundsCheckHalt") "domain mismatch on return")
      }
    }
  }
  function chpl__checkDomainsMatch[118104](arg a[118101] :
  _iteratorRecord, arg b[118106]:_any[178](?)) : _unknown[51]
  {
    (118109 'import' HaltWrappers)
    if(118139 call _cond_test boundsChecking)
    {
      { scopeless
        unknown tmp[118114] a
        (118117 'end of statement')
      }
      if(118135 call _cond_test(118124 call !=(118120 call . tmp c"_dom") b))
      {
        (118132 call(118127 call . HaltWrappers c"boundsCheckHalt") "domain mismatch on return")
      }
    }
  }
  function chpl__checkEltTypeMatch[118153](arg a[118150] :
  (118147 call chpl__buildArrayRuntimeType nil[44]), arg b[118155]:_any[178](?)) : _unknown[51]
  {
    if(118198 call _cond_test(118162 call !=(118158 call . a c"eltType") b))
    {
      (118195 call compilerError "array element type mismatch in return from "(118188 call _cast string[26](118184 call . a c"eltType")) " to "(118193 call _cast string[26] b))
    }
  }
  function chpl__checkEltTypeMatch[118211](arg a[118208] :
  _iteratorRecord, arg b[118213]:_any[178](?)) : _unknown[51]
  {
    unknown eltType[118220] "type variable"(118219 call iteratorToArrayElementType(118217 'typeof' a))
    if(118243 call _cond_test(118226 call != eltType b))
    {
      (118240 call compilerError "array element type mismatch in return from "(118233 call _cast string[26] eltType) " to "(118238 call _cast string[26] b))
    }
  }
  type dmap[118251]
  function chpl__buildDistType[118258](arg t[118256]:_any[178](?)) type : _unknown[51]
  {
    { scopeless
      unknown x[118273](118272 'to nilable class from type'(118271 call _to_unmanaged t))
      (118276 'end of statement')
    }
    { scopeless
      unknown y[118285](118278 'new'(118284 call _distribution(118281 call postfix! x)))
      (118288 'end of statement')
    }
    (118291 return(118290 'typeof' y))
  }
  where {
    (118267 call isSubtype(118264 call _to_borrowed t) BaseDist)
  }
  function chpl__buildDistType[118300](arg t[118298]:_any[178](?)) : _unknown[51]
  {
    (118321 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
  }
  function chpl__buildDistValue[118332](arg x[118329] :
  unmanaged[220](?)) : _unknown[51]
  {
    (118350 return(118345 'new'(118349 call _distribution x)))
  }
  where {
    (118344 call isSubtype(118341 'typeof'(118340 call(118336 call . x c"borrow"))) BaseDist)
  }
  function chpl__buildDistValue[118362](in arg x[118359] :
  _owned) : _unknown[51]
  {
    (118385 return(118375 'new'(118384 call _distribution(118382 call(118378 call . x c"release")))))
  }
  where {
    (118374 call isSubtype(118371 'typeof'(118370 call(118366 call . x c"borrow"))) BaseDist)
  }
  function chpl__buildDistValue[118395](arg x[118393]:_any[178](?)) : _unknown[51]
  {
    (118416 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
  }
  type _distribution[118979](?) unknown _pid[118423] int[13] unknown _instance[118427] "owned" unknown _unowned[118432] bool[10] function _distribution[118979](?).init[118442](arg _mt[118983]:_MT[238], arg this[118981]:_distribution[118979](?), arg _pid[118439] :
  int[13], arg _instance[118444]:_any[178](?), arg _unowned[118447] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (118457 call =(118453 call . this c"_pid") _pid)
    (118466 call =(118462 call . this c"_instance") _instance)
    (118476 call =(118472 call . this c"_unowned") _unowned)
  } function _distribution[118979](?).init[118485](arg _mt[118987]:_MT[238], arg this[118985]:_distribution[118979](?), arg value[118483]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (118503 call =(118488 call . this c"_pid")(118500 IfExpr (118494 call _isPrivatized value) then
    { scopeless
      (118498 call _newPrivatizedClass value)
    } else
    { scopeless
      nullPid
    } ))
    (118515 call =(118508 call . this c"_instance")(118514 call _to_unmanaged value))
  } function _distribution[118979](?).init=[118526](arg _mt[118991]:_MT[238], arg this[118989]:_distribution[118979](?), const  ref arg other[118523] :
  _distribution) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown value[118539](118538 call(118534 call .(118529 call . other c"_value") c"dsiClone"))
      (118542 'end of statement')
    }
    (118550 call(118545 call . this c"init") value)
  } function _distribution[118979](?)._value[118556](arg _mt[118995]:_MT[238], arg this[118993]:_distribution[118979](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(118575 call _cond_test(118561 call _isPrivatized _instance))
    {
      (118568 return(118567 call chpl_getPrivatizedCopy(118564 'typeof' _instance) _pid))
    }
    {
      (118572 return _instance)
    }
  } function _distribution[118979](?).chpl_forwarding_expr4__value[118584](arg _mt[118999]:_MT[238], arg this[118997]:_distribution[118979](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (118586 return _value)
  } function _distribution[118979](?)._do_destroy[118592](arg _mt[119003]:_MT[238], arg this[119001]:_distribution[118979](?)) : _unknown[51] "inline" "method" "primary method"
  {
    if(118653 call _cond_test(118607 call &&(118595 call ! _unowned)(118605 call !(118604 call(118600 call . _instance c"singleton")))))
    {
      {
        const tmp[118644] "const" "temp"
        (118645 'move' tmp[118644](118642 'deref'(118641 '_wide_get_locale' _instance)))
        {
          { scopeless
            unknown distToFree[118616](118615 call(118611 call . _instance c"remove"))
            (118619 'end of statement')
          }
          if(118637 call _cond_test(118623 call != distToFree nil[44]))
          {
            (118634 call _delete_dist(118627 call postfix! distToFree)(118633 call _isPrivatized _instance))
          }
        }
        (118648 'elided on block' 0 tmp[118644])
      }
    }
  } function _distribution[118979](?).deinit[118662](arg _mt[119007]:_MT[238], arg this[119005]:_distribution[118979](?)) : _unknown[51] "destructor" "method" "primary method"
  {
    (118666 call _do_destroy)
  } function _distribution[118979](?).clone[118673](arg _mt[119011]:_MT[238], arg this[119009]:_distribution[118979](?)) : _unknown[51] "method" "primary method"
  {
    (118685 return(118675 'new'(118684 call _distribution(118682 call(118678 call . _value c"dsiClone")))))
  } function _distribution[118979](?).newRectangularDom[118696](arg _mt[119015]:_MT[238], arg this[119013]:_distribution[118979](?), param arg rank[118693] :
  int[13], arg idxType[118698]:_any[178](?), param arg stridable[118701] :
  bool[10], arg ranges[118716] :
  (118714 call * rank(118713 call range idxType(118709 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown x[118731](118730 call(118722 call . _value c"dsiNewRectangularDom") rank idxType stridable ranges)
      (118734 'end of statement')
    }
    if(118755 call _cond_test(118743 call(118739 call . x c"linksDistribution")))
    {
      (118752 call(118747 call . _value c"add_dom") x)
    }
    (118760 return x)
  } function _distribution[118979](?).newRectangularDom[118770](arg _mt[119019]:_MT[238], arg this[119017]:_distribution[118979](?), param arg rank[118767] :
  int[13], arg idxType[118772]:_any[178](?), param arg stridable[118775] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown ranges[118790](118788 call * rank(118787 call range idxType(118783 call . BoundedRangeType c"bounded") stridable))
      (118793 'end of statement')
    }
    (118802 return(118801 call newRectangularDom rank idxType stridable ranges))
  } function _distribution[118979](?).newAssociativeDom[118810](arg _mt[119023]:_MT[238], arg this[119021]:_distribution[118979](?), arg idxType[118808]:_any[178](?), param arg parSafe[118814] :
  bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown x[118828](118827 call(118821 call . _value c"dsiNewAssociativeDom") idxType parSafe)
      (118831 'end of statement')
    }
    if(118848 call _cond_test(118838 call(118834 call . x c"linksDistribution")))
    {
      (118845 call(118840 call . _value c"add_dom") x)
    }
    (118853 return x)
  } function _distribution[118979](?).newSparseDom[118863](arg _mt[119027]:_MT[238], arg this[119025]:_distribution[118979](?), param arg rank[118860] :
  int[13], arg idxType[118865]:_any[178](?), arg dom[118868] :
  _domain) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown x[118882](118881 call(118874 call . _value c"dsiNewSparseDom") rank idxType dom)
      (118885 'end of statement')
    }
    if(118902 call _cond_test(118892 call(118888 call . x c"linksDistribution")))
    {
      (118899 call(118894 call . _value c"add_dom") x)
    }
    (118907 return x)
  } function _distribution[118979](?).idxToLocale[118915](arg _mt[119031]:_MT[238], arg this[119029]:_distribution[118979](?), arg ind[118913]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (118926 return(118925 call(118920 call . _value c"dsiIndexToLocale") ind))
    }
  } function _distribution[118979](?).readWriteThis[118935](arg _mt[119035]:_MT[238], arg this[119033]:_distribution[118979](?), arg f[118933]:_any[178](?)) : _unknown[51] throws "method" "primary method"
  {
    (118939 call <~> f _value)
  } function _distribution[118979](?).displayRepresentation[118947](arg _mt[119039]:_MT[238], arg this[119037]:_distribution[118979](?)) : _unknown[51] "method" "primary method"
  {
    (118956 call(118952 call . _value c"dsiDisplayRepresentation"))
  } function _distribution[118979](?).targetLocales[118963](arg _mt[119043]:_MT[238], arg this[119041]:_distribution[118979](?)) : _unknown[51] "method" "primary method"
  {
    (118973 return(118972 call(118968 call . _value c"dsiTargetLocales")))
  } forwarding ( )
  function ==[119055](arg d1[119052] :
  (119051 call _distribution ?[260]), arg d2[119061] :
  (119060 call _distribution ?[260])) : _unknown[51] "inline"
  {
    if(119077 call _cond_test(119072 call ==(119065 call . d1 c"_value")(119069 call . d2 c"_value")))
    {
      { scopeless
        (119075 return 1)
      }
    }
    (119098 return(119097 call(119089 call .(119084 call . d1 c"_value") c"dsiEqualDMaps")(119093 call . d2 c"_value")))
  }
  function !=[119111](arg d1[119108] :
  (119107 call _distribution ?[260]), arg d2[119117] :
  (119116 call _distribution ?[260])) : _unknown[51] "inline"
  {
    if(119133 call _cond_test(119128 call ==(119121 call . d1 c"_value")(119125 call . d2 c"_value")))
    {
      { scopeless
        (119131 return 0)
      }
    }
    (119154 return(119152 call !(119151 call(119143 call .(119140 call . d1 c"_value") c"dsiEqualDMaps")(119147 call . d2 c"_value"))))
  }
  function chpl_defaultComparator[119160]() : _unknown[51]
  {
    (119163 'use' Sort)
    (119167 return defaultComparator)
  }
  type _domain[125914](?) unknown _pid[119173] int[13] unknown _instance[119177] "owned" unknown _unowned[119182] bool[10] function _domain[125914](?).chpl__promotionType[119188](arg _mt[125918]:_MT[238], arg this[125916]:_domain[125914](?)) type : _unknown[51] "method" "primary method"
  {
    (119198 return(119196 call chpl__buildIndexType rank(119193 call . _value c"idxType")))
  } function _domain[125914](?).init[119209](arg _mt[125922]:_MT[238], arg this[125920]:_domain[125914](?), arg _pid[119206] :
  int[13], arg _instance[119211]:_any[178](?), arg _unowned[119214] :
  bool[10]) : _unknown[51] "method" "primary method"
  {
    (119222 call =(119218 call . this c"_pid") _pid)
    (119231 call =(119227 call . this c"_instance") _instance)
    (119239 call =(119235 call . this c"_unowned") _unowned)
  } function _domain[125914](?).init[119248](arg _mt[125926]:_MT[238], arg this[125924]:_domain[125914](?), arg value[119246]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(119264 call _cond_test(119257 call !=(119254 call _to_unmanaged(119252 'typeof' value))(119256 'typeof' value)))
    {
      { scopeless
        (119262 call compilerError "Domain on borrow created")
      }
    }
    if(119319 call _cond_test(119273 call _isPrivatized value))
    {
      if(119305 call _cond_test(119279 call ==(119275 call . value c"pid") nullPid))
      {
        (119289 call =(119282 call . this c"_pid")(119288 call _newPrivatizedClass value))
      }
      {
        (119301 call =(119294 call . this c"_pid")(119298 call . value c"pid"))
      }
    }
    {
      (119315 call =(119311 call . this c"_pid") nullPid)
    }
    (119328 call =(119324 call . this c"_instance") value)
  } function _domain[125914](?).init[119339](arg _mt[125930]:_MT[238], arg this[125928]:_domain[125914](?), arg d[119336] :
  _distribution, param arg rank[119342] :
  int[13], arg idxType[119346]:_any[178](?) =
  int[13], param arg stridable[119351] :
  bool[10] =
  0) : _unknown[51] "method" "primary method"
  {
    (119369 call(119356 call . this c"init")(119367 call(119360 call . d c"newRectangularDom") rank idxType stridable))
  } function _domain[125914](?).init[119380](arg _mt[125934]:_MT[238], arg this[125932]:_domain[125914](?), arg d[119377] :
  _distribution, param arg rank[119383] :
  int[13], arg idxType[119387]:_any[178](?) =
  int[13], param arg stridable[119392] :
  bool[10] =
  0, arg ranges[119408] :
  (119406 call * rank(119405 call range idxType(119401 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "primary method"
  {
    (119426 call(119412 call . this c"init")(119424 call(119416 call . d c"newRectangularDom") rank idxType stridable ranges))
  } function _domain[125914](?).init[119437](arg _mt[125938]:_MT[238], arg this[125936]:_domain[125914](?), arg d[119434] :
  _distribution, arg idxType[119439]:_any[178](?), param arg parSafe[119443] :
  bool[10] =
  1) : _unknown[51] "method" "primary method"
  {
    (119462 call(119448 call . this c"init")(119460 call(119454 call . d c"newAssociativeDom") idxType parSafe))
  } function _domain[125914](?).init[119473](arg _mt[125942]:_MT[238], arg this[125940]:_domain[125914](?), arg d[119470] :
  _distribution, arg dom[119476] :
  _domain) : _unknown[51] "method" "primary method"
  {
    (119504 call(119480 call . this c"init")(119502 call(119486 call . d c"newSparseDom")(119490 call . dom c"rank")(119498 call .(119495 call . dom c"_value") c"idxType") dom))
  } function _domain[125914](?).init=[119515](arg _mt[125946]:_MT[238], arg this[125944]:_domain[125914](?), const  ref arg other[119512] :
  _domain) : _unknown[51] "method" "primary method"
  {
    (119548 call(119522 call . this c"init")(119526 call . other c"dist")(119531 call . other c"rank")(119535 call . other c"idxType")(119539 call . other c"stridable")(119547 call(119543 call . other c"dims")))
  }
  where {
    (119520 call isRectangularDom other)
  } function _domain[125914](?).init=[119560](arg _mt[125950]:_MT[238], arg this[125948]:_domain[125914](?), const  ref arg other[119557] :
  _domain) : _unknown[51] "method" "primary method"
  {
    if(119652 call _cond_test(119565 call isAssociativeDom other))
    {
      (119583 call(119567 call . this c"init")(119571 call . other c"dist")(119576 call . other c"idxType")(119580 call . other c"parSafe"))
    }
    {
      { scopeless
        if(119648 call _cond_test(119589 call isSparseDom other))
        {
          (119603 call(119591 call . this c"init")(119595 call . other c"dist")(119600 call . other c"parentDom"))
        }
        {
          (119637 call compilerError "Cannot initialize '"(119628 call _cast string[26](119626 'typeof' this)) "' from '"(119634 call _cast string[26](119632 'typeof' other)) "'")
          (119646 call(119641 call . this c"init") nil[44])
        }
      }
    }
    (119668 call(119661 call . _instance c"dsiAssignDomain") other(lhsPrivate = 1))
  } function _domain[125914](?)._value[119674](arg _mt[125954]:_MT[238], arg this[125952]:_domain[125914](?)) : _unknown[51] "inline" "method" "primary method" "no parens"
  {
    if(119693 call _cond_test(119679 call _isPrivatized _instance))
    {
      (119686 return(119685 call chpl_getPrivatizedCopy(119682 'typeof' _instance) _pid))
    }
    {
      (119690 return _instance)
    }
  } function _domain[125914](?).chpl_forwarding_expr5__value[119703](arg _mt[125958]:_MT[238], arg this[125956]:_domain[125914](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (119705 return _value)
  } function _domain[125914](?).chpl__serialize[119711](arg _mt[125962]:_MT[238], arg this[125960]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (119733 return(119732 call(119728 call .(119723 call . this c"_value") c"chpl__serialize")))
  }
  where {
    (119721 call(119717 call .(119714 call . this c"_value") c"isDefaultRectangular"))
  } function _domain[125914](?).chpl__deserialize[119743](arg _mt[125966]:_MT[238], arg this[125964]:_domain[125914](?), arg data[119741]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    unknown valueType[119750] "type variable"(119749 'static field type' this "_instance")
    (119770 return(119754 'new'(119769 call _domain(119767 call(119762 call .(119759 call _to_borrowed valueType) c"chpl__deserialize") data))))
  } function _domain[125914](?)._do_destroy[119776](arg _mt[125970]:_MT[238], arg this[125968]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(119895 call _cond_test(119779 call ! _unowned))
    {
      {
        const tmp[119885] "const" "temp"
        (119886 'move' tmp[119885](119883 'deref'(119882 '_wide_get_locale' _instance)))
        {
          { scopeless
            const inst[119783] "const" _instance
            (119786 'end of statement')
          }
          { scopeless
            unknown tmp[119799] "temp"(119798 call(119794 call . inst c"remove"))
            (119806 call _check_tuple_var_decl tmp[119799] 2)
            unknown domToFree[119788](119800 call tmp[119799] 0)
            unknown distToRemove[119790](119803 call tmp[119799] 1)
            (119811 'end of statement')
          }
          { scopeless
            unknown distToFree[119816] nil[44](119814 'to unmanaged class from unknown'(119813 'to nilable class from type' BaseDist))
            (119819 'end of statement')
          }
          if(119837 call _cond_test(119822 call != distToRemove nil[44]))
          {
            (119833 call = distToFree(119832 call(119828 call .(119826 call postfix! distToRemove) c"remove")))
          }
          if(119854 call _cond_test(119843 call != domToFree nil[44]))
          {
            { scopeless
              (119852 call _delete_dom inst(119851 call _isPrivatized inst))
            }
          }
          if(119877 call _cond_test(119861 call != distToFree nil[44]))
          {
            { scopeless
              (119875 call _delete_dist(119865 call postfix! distToFree)(119874 call _isPrivatized(119870 call . inst c"dist")))
            }
          }
        }
        (119889 'elided on block' 0 tmp[119885])
      }
    }
    {
    }
  } function _domain[125914](?).deinit[119904](arg _mt[125974]:_MT[238], arg this[125972]:_domain[125914](?)) : _unknown[51] "destructor" "method" "primary method" "no doc"
  {
    (119908 call _do_destroy)
  } function _domain[125914](?).dist[119915](arg _mt[125978]:_MT[238], arg this[125976]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    { scopeless
      (119924 return(119923 call _getDistribution(119919 call . _value c"dist")))
    }
  } function _domain[125914](?).rank[119931](arg _mt[125982]:_MT[238], arg this[125980]:_domain[125914](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    if(119952 call _cond_test(119941 call ||(119936 call isRectangularDom this)(119940 call isSparseDom this)))
    {
      { scopeless
        (119947 return(119944 call . _value c"rank"))
      }
    }
    {
      { scopeless
        (119950 return 1)
      }
    }
  } function _domain[125914](?).idxType[119963](arg _mt[125986]:_MT[238], arg this[125984]:_domain[125914](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (119969 return(119966 call . _value c"idxType"))
  } function _domain[125914](?).intIdxType[119976](arg _mt[125990]:_MT[238], arg this[125988]:_domain[125914](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    (119985 return(119984 call chpl__idxTypeToIntIdxType(119980 call . _value c"idxType")))
  } function _domain[125914](?).stridable[119992](arg _mt[125994]:_MT[238], arg this[125992]:_domain[125914](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    (120002 return(119999 call . _value c"stridable"))
  }
  where {
    (119997 call isRectangularDom this)
  } function _domain[125914](?).stridable[120010](arg _mt[125998]:_MT[238], arg this[125996]:_domain[125914](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (120023 return(120020 call .(120017 call . _value c"parentDom") c"stridable"))
  }
  where {
    (120015 call isSparseDom this)
  } function _domain[125914](?).stridable[120031](arg _mt[126002]:_MT[238], arg this[126000]:_domain[125914](?)) param : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (120056 call compilerError "associative domains do not support .stridable")
  }
  where {
    (120036 call isAssociativeDom this)
  } function _domain[125914](?).these[120064](arg _mt[126006]:_MT[238], arg this[126004]:_domain[125914](?)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[120077] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120078] "expr temp" "temp"
      (120087 'move' _iterator[120078](120085 call _getIterator(120072 call(120068 call . _value c"these"))))
      Defer
      {
        {
          (120104 call _freeIterator _iterator[120078])
        }
      }
      { scopeless type
        (120093 'move' _indexOfInterest[120077](120090 call iteratorIndex _iterator[120078]))
      }
      ForLoop[120079]
      {
        unknown i[120097] "index var" "insert auto destroy"
        (120099 'move' i[120097] _indexOfInterest[120077])
        {
          (120074 yield i)
        }
        label _continueLabel[120082]
        _indexOfInterest[120077]
        _iterator[120078]
      }
      label _breakLabel[120083]
    }
  } function _domain[125914](?).these[120120](arg _mt[126010]:_MT[238], arg this[126008]:_domain[125914](?), param arg tag[120117] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    {
      unknown _indexOfInterest[120179] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120180] "expr temp" "temp"
      (120189 'move' _iterator[120180](120187 call _getIterator(120175 call(120170 call . _value c"these") tag)))
      Defer
      {
        {
          (120206 call _freeIterator _iterator[120180])
        }
      }
      { scopeless type
        (120195 'move' _indexOfInterest[120179](120192 call iteratorIndex _iterator[120180]))
      }
      ForLoop[120181]
      {
        unknown i[120199] "index var" "insert auto destroy"
        (120201 'move' i[120199] _indexOfInterest[120179])
        { scopeless
          (120177 yield i)
        }
        label _continueLabel[120184]
        _indexOfInterest[120179]
        _iterator[120180]
      }
      label _breakLabel[120185]
    }
  }
  where {
    (120166 call &&(120127 call == tag(120124 call . iterKind c"standalone"))(120165 'method call resolves' _value "these"(tag = tag)))
  } function _domain[125914](?).these[120223](arg _mt[126014]:_MT[238], arg this[126012]:_domain[125914](?), param arg tag[120220] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    {
      unknown _indexOfInterest[120243] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120244] "expr temp" "temp"
      (120253 'move' _iterator[120244](120251 call _getIterator(120239 call(120234 call . _value c"these") tag)))
      Defer
      {
        {
          (120270 call _freeIterator _iterator[120244])
        }
      }
      { scopeless type
        (120259 'move' _indexOfInterest[120243](120256 call iteratorIndex _iterator[120244]))
      }
      ForLoop[120245]
      {
        unknown followThis[120263] "index var" "insert auto destroy"
        (120265 'move' followThis[120263] _indexOfInterest[120243])
        { scopeless
          (120241 yield followThis)
        }
        label _continueLabel[120248]
        _indexOfInterest[120243]
        _iterator[120244]
      }
      label _breakLabel[120249]
    }
  }
  where {
    (120230 call == tag(120227 call . iterKind c"leader"))
  } function _domain[125914](?).these[120287](arg _mt[126018]:_MT[238], arg this[126016]:_domain[125914](?), param arg tag[120284] :
  iterKind, arg followThis[120289]:_any[178](?), param arg fast[120293] :
  bool[10] =
  0) : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    if(120411 call _cond_test(120313 'method call resolves' _value "these"(tag = tag) followThis(fast = fast)))
    {
      {
        unknown _indexOfInterest[120329] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120330] "expr temp" "temp"
        (120339 'move' _iterator[120330](120337 call _getIterator(120325 call(120316 call . _value c"these")(tag = tag) followThis(fast = fast))))
        Defer
        {
          {
            (120356 call _freeIterator _iterator[120330])
          }
        }
        { scopeless type
          (120345 'move' _indexOfInterest[120329](120342 call iteratorIndex _iterator[120330]))
        }
        ForLoop[120331]
        {
          unknown i[120349] "index var" "insert auto destroy"
          (120351 'move' i[120349] _indexOfInterest[120329])
          { scopeless
            (120327 yield i)
          }
          label _continueLabel[120334]
          _indexOfInterest[120329]
          _iterator[120330]
        }
        label _breakLabel[120335]
      }
    }
    {
      {
        unknown _indexOfInterest[120376] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120377] "expr temp" "temp"
        (120386 'move' _iterator[120377](120384 call _getIterator(120372 call(120366 call . _value c"these") tag followThis)))
        Defer
        {
          {
            (120403 call _freeIterator _iterator[120377])
          }
        }
        { scopeless type
          (120392 'move' _indexOfInterest[120376](120389 call iteratorIndex _iterator[120377]))
        }
        ForLoop[120378]
        {
          unknown i[120396] "index var" "insert auto destroy"
          (120398 'move' i[120396] _indexOfInterest[120376])
          { scopeless
            (120374 yield i)
          }
          label _continueLabel[120381]
          _indexOfInterest[120376]
          _iterator[120377]
        }
        label _breakLabel[120382]
      }
    }
  }
  where {
    (120302 call == tag(120299 call . iterKind c"follower"))
  } function _domain[125914](?).this[120425](arg _mt[126022]:_MT[238], arg this[126020]:_domain[125914](?), arg d[120422] :
  _domain) : _unknown[51] "method" "primary method" "no doc"
  {
    if(120467 call _cond_test(120432 call ==(120428 call . d c"rank") rank))
    {
      { scopeless
        (120444 return(120443 call this(120441 'expand_tuple'(120440 call(120436 call . d c"getIndices")))))
      }
    }
    {
      { scopeless
        (120465 call compilerError "slicing a domain with a domain of a different rank")
      }
    }
  } function _domain[125914](?).this[120482](arg _mt[126026]:_MT[238], arg this[126024]:_domain[125914](?), arg ranges[120479]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      unknown stridable[120498] "param"(120496 call ||(120489 call . _value c"stridable")(120495 call chpl__anyStridable ranges))
      (120501 'end of statement')
    }
    { scopeless
      unknown r[120518](120516 call * rank(120515 call range(120506 call . _value c"idxType")(120511 call . BoundedRangeType c"bounded") stridable))
      (120521 'end of statement')
    }
    {
      unknown i[120550] 0
      unknown tmp[120551] "maybe param" "temp"
      (120563 'move' tmp[120551](120561 call chpl_compute_low_param_loop_bound 0(120525 call - rank 1)))
      unknown tmp[120552] "maybe param" "temp"
      (120573 'move' tmp[120552](120571 call chpl_compute_high_param_loop_bound 0(120568 call - rank 1)))
      unknown tmp[120553] "maybe param" "temp"
      (120576 'move' tmp[120553] 1)
      ParamForLoop[120578]
      { i[120550] tmp[120551] tmp[120552] tmp[120553]
        {
          (120546 call =(120532 call r i)(120545 call(120539 call(120534 call . _value c"dsiDim") i)(120543 call ranges i)))
        }
      }
      label _unused_continueLabel[120555]
      label _breakLabel[120554]
    }
    (120599 return(120587 'new'(120598 call _domain dist rank(120593 call . _value c"idxType") stridable r)))
  }
  where {
    (120487 call chpl__isTupleOfRanges ranges)
  } function _domain[125914](?).this[120610](arg _mt[126030]:_MT[238], arg this[126028]:_domain[125914](?), arg args[120607]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      unknown collapsedDim[120624](120622 call * rank bool[10])
      (120627 'end of statement')
    }
    { scopeless
      unknown idx[120633](120631 call * rank idxType)
      (120636 'end of statement')
    }
    { scopeless
      unknown uprank[120642] "param"(120641 call chpl__countRanges(120639 'expand_tuple' args))
      (120645 'end of statement')
    }
    { scopeless
      unknown upstridable[120656] "param"(120654 call ||(120647 call . this c"stridable")(120653 call chpl__anyRankChangeStridable args))
      (120659 'end of statement')
    }
    { scopeless
      unknown upranges[120673](120671 call * uprank(120670 call range(idxType =(120663 call . _value c"idxType"))(stridable = upstridable)))
      (120676 'end of statement')
    }
    { scopeless
      unknown updim[120678] 0
      (120681 'end of statement')
    }
    {
      unknown i[120772] 0
      unknown tmp[120773] "maybe param" "temp"
      (120785 'move' tmp[120773](120783 call chpl_compute_low_param_loop_bound 0(120685 call - rank 1)))
      unknown tmp[120774] "maybe param" "temp"
      (120795 'move' tmp[120774](120793 call chpl_compute_high_param_loop_bound 0(120790 call - rank 1)))
      unknown tmp[120775] "maybe param" "temp"
      (120798 'move' tmp[120775] 1)
      ParamForLoop[120800]
      { i[120772] tmp[120773] tmp[120774] tmp[120775]
        {
          if(120767 call _cond_test(120695 call isRange(120693 call args i)))
          {
            (120701 call =(120699 call collapsedDim i) 0)
            (120716 call =(120708 call idx i)(120713 call .(120712 call dim i) c"alignedLow"))
            (120739 call =(120722 call upranges updim)(120738 call(120732 call(120727 call .(120724 call . this c"_value") c"dsiDim") i)(120736 call args i)))
            (120744 call += updim 1)
          }
          {
            (120752 call =(120750 call collapsedDim i) 1)
            (120764 call =(120759 call idx i)(120763 call args i))
          }
        }
      }
      label _unused_continueLabel[120777]
      label _breakLabel[120776]
    }
    { scopeless
      const emptyrange[120814] "const"(120813 'typeof'(120812 call upranges 0))
      (120817 'end of statement')
    }
    if(120877 call _cond_test(120822 call !(120821 call contains idx)))
    {
      {
        unknown d[120839] 0
        unknown tmp[120840] "maybe param" "temp"
        (120852 'move' tmp[120840](120850 call chpl_compute_low_param_loop_bound 0(120827 call - uprank 1)))
        unknown tmp[120841] "maybe param" "temp"
        (120862 'move' tmp[120841](120860 call chpl_compute_high_param_loop_bound 0(120857 call - uprank 1)))
        unknown tmp[120842] "maybe param" "temp"
        (120865 'move' tmp[120842] 1)
        ParamForLoop[120867]
        { d[120839] tmp[120840] tmp[120841] tmp[120842]
          { scopeless
            (120836 call =(120834 call upranges d) emptyrange)
          }
        }
        label _unused_continueLabel[120844]
        label _breakLabel[120843]
      }
    }
    { scopeless
      const rcdist[120901] "const"(120883 'new'(_chpl_manager = unmanaged[220](?))(120900 call ArrayViewRankChangeDist(downDistPid =(120886 call . dist c"_pid"))(downDistInst =(120892 call . dist c"_instance"))(collapsedDim = collapsedDim)(idx = idx)))
      (120904 'end of statement')
    }
    { scopeless
      const rcdistRec[120910] "const"(120905 'new'(120909 call _distribution rcdist))
      (120913 'end of statement')
    }
    (120935 return(120914 'new'(120934 call _domain rcdistRec uprank(120923 call .(120922 call upranges 0) c"idxType")(120930 call .(120929 call upranges 0) c"stridable") upranges)))
  }
  where {
    (120619 call _validRankChangeArgs args(120616 call . _value c"idxType"))
  } function _domain[125914](?).this[120948](arg _mt[126034]:_MT[238], arg this[126032]:_domain[125914](?), arg i[120944] ... :
  integral) : _unknown[51] "method" "primary method"
  {
    (120969 call compilerError "domain slice requires a range in at least one dimension")
  } function _domain[125914](?).this[120981](arg _mt[126038]:_MT[238], arg this[126036]:_domain[125914](?), arg args[120978]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    if(121032 call _cond_test(120985 call == numArgs rank))
    {
      (121006 call compilerError "invalid argument types for domain slicing")
    }
    {
      { scopeless
        (121030 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
      }
    }
  } function _domain[125914](?).dims[121042](arg _mt[126042]:_MT[238], arg this[126040]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (121050 return(121049 call(121045 call . _value c"dsiDims")))
    }
  } function _domain[125914](?).dim[121061](arg _mt[126046]:_MT[238], arg this[126044]:_domain[125914](?), arg d[121058] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (121064 'use' HaltWrappers)
    if(121141 call _cond_test boundsChecking)
    {
      { scopeless
        if(121136 call _cond_test(121076 call ||(121070 call < d 0)(121074 call >= d rank)))
        {
          { scopeless
            (121134 call(121079 call . HaltWrappers c"boundsCheckHalt")(121131 call +(121122 call +(121103 call + "dim("(121101 call _cast string[26] d)) ") is out-of-bounds; must be 0..")(121129 call _cast string[26](121126 call - rank 1))))
          }
        }
      }
    }
    (121153 return(121152 call(121147 call . _value c"dsiDim") d))
  } function _domain[125914](?).dim[121163](arg _mt[126050]:_MT[238], arg this[126048]:_domain[125914](?), param arg d[121160] :
  int[13]) : _unknown[51] "method" "primary method" "no doc"
  {
    if(121203 call _cond_test(121176 call ||(121167 call < d 0)(121174 call > d(121172 call - rank 1))))
    {
      { scopeless
        (121201 call compilerError "dim() must take a value from 0.."(121199 call - rank 1))
      }
    }
    (121216 return(121215 call(121210 call . _value c"dsiDim") d))
  } function _domain[125914](?).dimIter[121224](arg _mt[126054]:_MT[238], arg this[126052]:_domain[125914](?), param arg d[121222]:_any[178](?), arg ind[121226]:_any[178](?)) : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    {
      unknown _indexOfInterest[121242] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121243] "expr temp" "temp"
      (121252 'move' _iterator[121243](121250 call _getIterator(121238 call(121232 call . _value c"dimIter") d ind)))
      Defer
      {
        {
          (121269 call _freeIterator _iterator[121243])
        }
      }
      { scopeless type
        (121258 'move' _indexOfInterest[121242](121255 call iteratorIndex _iterator[121243]))
      }
      ForLoop[121244]
      {
        unknown i[121262] "index var" "insert auto destroy"
        (121264 'move' i[121262] _indexOfInterest[121242])
        { scopeless
          (121240 yield i)
        }
        label _continueLabel[121247]
        _indexOfInterest[121242]
        _iterator[121243]
      }
      label _breakLabel[121248]
    }
  } function _domain[125914](?).shape[121281](arg _mt[126058]:_MT[238], arg this[126056]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      unknown s[121303](121301 call * rank(121298 call .(121297 call dim 0) c"intIdxType"))
      (121306 'end of statement')
    }
    {
      unknown _indexOfInterest[121338] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121339] "expr temp" "temp"
      (121373 'move' _iterator[121339](121326 call _build_tuple(121356 call _getIterator(121366 call chpl_direct_counted_range_iter 0(121362 call . s c"size")))(121370 call _getIterator(121369 call dims))))
      Defer
      {
        {
          (121403 call _freeIterator _iterator[121339])
        }
      }
      { scopeless type
        (121378 'move' _indexOfInterest[121338](121375 call iteratorIndex _iterator[121339]))
      }
      ForLoop[121340]
      {
        (121383 call _check_tuple_var_decl _indexOfInterest[121338] 2)
        unknown i[121389] "index var" "insert auto destroy"
        (121391 'move' i[121389](121387 call _indexOfInterest[121338] 0))
        unknown r[121396] "index var" "insert auto destroy"
        (121398 'move' r[121396](121394 call _indexOfInterest[121338] 1))
        { scopeless
          (121335 call =(121330 call s i)(121332 call . r c"size"))
        }
        label _continueLabel[121343]
        _indexOfInterest[121338]
        _iterator[121339]
      }
      label _breakLabel[121344]
    }
    (121411 return s)
  }
  where {
    (121291 call ||(121286 call isRectangularDom this)(121290 call isSparseDom this))
  } function _domain[125914](?).shape[121418](arg _mt[126062]:_MT[238], arg this[126060]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    { scopeless
      unknown s[121428](121426 call _build_tuple(121425 'typeof' size))
      (121431 'end of statement')
    }
    (121438 call =(121436 call s 0) size)
    (121442 return s)
  }
  where {
    (121423 call isAssociativeDom this)
  } function _domain[125914](?).shape[121449](arg _mt[126066]:_MT[238], arg this[126064]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (121470 call compilerError ".shape not supported on this domain")
  } function _domain[125914](?).buildArray[121479](arg _mt[126070]:_MT[238], arg this[126068]:_domain[125914](?), arg eltType[121477]:_any[178](?), param arg initElts[121482] :
  bool[10]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    if(121511 call _cond_test(121487 call == eltType void[4]))
    {
      (121508 call compilerError "array element type cannot be void")
    }
    if(121679 call _cond_test(121519 call isGenericType eltType))
    {
      (121545 call compilerWarning(121542 call + "creating an array with element type "(121540 call _cast string[26] eltType)))
      if(121583 call _cond_test(121559 call &&(121551 call isClassType eltType)(121557 call !(121556 call isGenericType(121554 'to borrowed class from unknown' eltType)))))
      {
        (121580 call compilerWarning "which now means class type with generic management")
      }
      (121606 call compilerError "array element type cannot currently be generic")
    }
    {
      { scopeless
        if(121675 call _cond_test(121618 call &&(121611 call isSparseDom this)(121616 call !(121615 call isDefaultInitializable eltType))))
        {
          if(121670 call _cond_test(121623 call isNonNilableClass eltType))
          {
            (121643 call compilerError "sparse arrays of non-nilable classes are not currently supported")
          }
          {
            (121667 call compilerError "sparse arrays of non-default-initializable types are not currently supported")
          }
        }
      }
    }
    if(121796 call _cond_test chpl_warnUnstable)
    {
      { scopeless
        if(121791 call _cond_test(121693 call &&(121688 call isRectangularDom this)(121690 call . this c"stridable")))
        {
          { scopeless
            if(121787 call _cond_test(121697 call == rank 1))
            {
              if(121727 call _cond_test(121704 call <(121700 call . this c"stride") 0))
              {
                { scopeless
                  (121725 call warning "arrays with negatively strided dimensions are not particularly stable")
                }
              }
            }
            {
              {
                unknown _indexOfInterest[121752] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[121753] "expr temp" "temp"
                (121762 'move' _iterator[121753](121760 call _getIterator(121735 call . this c"stride")))
                Defer
                {
                  {
                    (121779 call _freeIterator _iterator[121753])
                  }
                }
                { scopeless type
                  (121768 'move' _indexOfInterest[121752](121765 call iteratorIndex _iterator[121753]))
                }
                ForLoop[121754]
                {
                  unknown s[121772] "index var" "insert auto destroy"
                  (121774 'move' s[121772] _indexOfInterest[121752])
                  { scopeless
                    if(121747 call _cond_test(121740 call < s 0))
                    {
                      { scopeless
                        (121745 call warning "arrays with negatively strided dimensions are not particularly stable")
                      }
                    }
                  }
                  label _continueLabel[121757]
                  _indexOfInterest[121752]
                  _iterator[121753]
                }
                label _breakLabel[121758]
              }
            }
          }
        }
      }
    }
    { scopeless
      unknown x[121811](121810 call(121804 call . _value c"dsiBuildArray") eltType initElts)
      (121814 'end of statement')
    }
    function help[121817]() : _unknown[51] "dont disable remote value forwarding"
    {
      (121827 call(121822 call . _value c"add_arr") x)
    }
    (121834 call help)
    (121843 call chpl_incRefCountsForDomainsInArrayEltTypes x(121840 call . x c"eltType"))
    (121849 return(121848 call _newArray x))
  } function _domain[125914](?).buildArrayWith[121857](arg _mt[126074]:_MT[238], arg this[126072]:_domain[125914](?), arg eltType[121855]:_any[178](?), arg data[121863] :
  (121862 call _ddata eltType), arg allocSize[121867] :
  int[13]) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    if(121880 call _cond_test(121872 call == eltType void[4]))
    {
      (121877 call compilerError "array element type cannot be void")
    }
    { scopeless
      unknown x[121896](121895 call(121888 call . _value c"dsiBuildArrayWith") eltType data allocSize)
      (121899 'end of statement')
    }
    function help[121902]() : _unknown[51] "dont disable remote value forwarding"
    {
      (121910 call(121905 call . _value c"add_arr") x)
    }
    (121917 call help)
    (121926 call chpl_incRefCountsForDomainsInArrayEltTypes x(121923 call . x c"eltType"))
    (121932 return(121931 call _newArray x))
  } function _domain[125914](?).clear[121938](arg _mt[126078]:_MT[238], arg this[126076]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown emptyDom[121946](121945 'typeof' this)
      (121949 'end of statement')
    }
    (121953 call = this emptyDom)
  }
  where {
    (121943 call isRectangularDom this)
  } function _domain[125914](?).clear[121961](arg _mt[126082]:_MT[238], arg this[126080]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (121970 call(121966 call . _value c"dsiClear"))
  } function _domain[125914](?).add[121979](arg _mt[126086]:_MT[238], arg this[126084]:_domain[125914](?), in arg i[121977]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (121990 return(121989 call(121984 call . _value c"dsiAdd") i))
  } function _domain[125914](?).bulkAdd[122007](arg _mt[126090]:_MT[238], arg this[126088]:_domain[125914](?), arg inds[122004] :
  (122001 call chpl__buildArrayRuntimeType nil[44](121998 call . _value c"idxType")), arg dataSorted[122010] =
  0, arg isUnique[122014] =
  0, arg preserveInds[122018] =
  1, arg addOn[122022] =
  nilLocale) : _unknown[51] "method" "primary method" "no doc"
  {
    if(122048 call _cond_test(122043 call ==(122039 call . inds c"size") 0))
    {
      { scopeless
        (122046 return 0)
      }
    }
    (122067 return(122066 call(122057 call . _value c"dsiBulkAdd") inds dataSorted isUnique preserveInds addOn))
  }
  where {
    (122036 call &&(122028 call isSparseDom this)(122034 call ==(122030 call . _value c"rank") 1))
  } function _domain[125914](?).makeIndexBuffer[122078](arg _mt[126094]:_MT[238], arg this[126092]:_domain[125914](?), arg size[122075] :
  int[13]) : _unknown[51] "inline" "method" "primary method"
  {
    (122089 return(122088 call(122083 call . _value c"dsiMakeIndexBuffer") size))
  } function _domain[125914](?).bulkAdd[122112](arg _mt[126098]:_MT[238], arg this[126096]:_domain[125914](?), arg inds[122109] :
  (122106 call chpl__buildArrayRuntimeType nil[44](122104 call *(122097 call . _value c"rank")(122101 call . _value c"idxType"))), arg dataSorted[122115] =
  0, arg isUnique[122119] =
  0, arg preserveInds[122123] =
  1, arg addOn[122127] =
  nilLocale) : _unknown[51] "method" "primary method"
  {
    if(122153 call _cond_test(122148 call ==(122144 call . inds c"size") 0))
    {
      { scopeless
        (122151 return 0)
      }
    }
    (122170 return(122169 call(122160 call . _value c"dsiBulkAdd") inds dataSorted isUnique preserveInds addOn))
  }
  where {
    (122141 call &&(122133 call isSparseDom this)(122139 call >(122135 call . _value c"rank") 1))
  } function _domain[125914](?).remove[122179](arg _mt[126102]:_MT[238], arg this[126100]:_domain[125914](?), arg i[122177]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (122190 return(122189 call(122184 call . _value c"dsiRemove") i))
  } function _domain[125914](?).requestCapacity[122199](arg _mt[126106]:_MT[238], arg this[126104]:_domain[125914](?), arg i[122197]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(122227 call _cond_test(122203 call < i 0))
    {
      (122224 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    if(122259 call _cond_test(122236 call !(122235 call isAssociativeDom this)))
    {
      { scopeless
        (122257 call compilerError "domain.requestCapacity only applies to associative domains")
      }
    }
    (122272 call(122267 call . _value c"dsiRequestCapacity") i)
  } function _domain[125914](?).size[122278](arg _mt[126110]:_MT[238], arg this[126108]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (122284 return(122281 call . _value c"dsiNumIndices"))
    }
  } function _domain[125914](?).numIndices[122291](arg _mt[126114]:_MT[238], arg this[126112]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (122331 call compilerWarning(122328 call + "'domain.numIndices' is deprecated - " "please use 'domain.size' instead"))
    (122335 return size)
  } function _domain[125914](?).low[122341](arg _mt[126118]:_MT[238], arg this[126116]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (122347 return(122344 call . _value c"dsiLow"))
    }
  } function _domain[125914](?).high[122354](arg _mt[126122]:_MT[238], arg this[126120]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (122362 return(122359 call . _value c"dsiHigh"))
    }
  } function _domain[125914](?).stride[122369](arg _mt[126126]:_MT[238], arg this[126124]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (122375 return(122372 call . _value c"dsiStride"))
    }
  } function _domain[125914](?).alignment[122382](arg _mt[126130]:_MT[238], arg this[126128]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (122390 return(122387 call . _value c"dsiAlignment"))
    }
  } function _domain[125914](?).first[122397](arg _mt[126134]:_MT[238], arg this[126132]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (122405 return(122402 call . _value c"dsiFirst"))
    }
  } function _domain[125914](?).last[122412](arg _mt[126138]:_MT[238], arg this[126136]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (122420 return(122417 call . _value c"dsiLast"))
    }
  } function _domain[125914](?).alignedLow[122427](arg _mt[126142]:_MT[238], arg this[126140]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (122435 return(122432 call . _value c"dsiAlignedLow"))
    }
  } function _domain[125914](?).alignedHigh[122442](arg _mt[126146]:_MT[238], arg this[126144]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (122450 return(122447 call . _value c"dsiAlignedHigh"))
    }
  } function _domain[125914](?).indices[122457](arg _mt[126150]:_MT[238], arg this[126148]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (122478 call compilerError "domains do not support '.indices'")
  } function _domain[125914](?).contains[122495](arg _mt[126154]:_MT[238], arg this[126152]:_domain[125914](?), arg i[122492] :
  (122490 call * rank(122487 call . _value c"idxType"))) : _unknown[51] "method" "primary method" "no doc"
  {
    if(122532 call _cond_test(122505 call ||(122500 call isRectangularDom this)(122504 call isSparseDom this)))
    {
      { scopeless
        (122518 return(122517 call(122508 call . _value c"dsiMember")(122515 call _makeIndexTuple rank i)))
      }
    }
    {
      { scopeless
        (122530 return(122529 call(122521 call . _value c"dsiMember")(122527 call i 0)))
      }
    }
  } function _domain[125914](?).contains[122552](arg _mt[126158]:_MT[238], arg this[126156]:_domain[125914](?), arg i[122548] ... :
  (122544 call . _value c"idxType")) : _unknown[51] "inline" "method" "primary method"
  {
    (122558 return(122557 call contains i))
  } function _domain[125914](?).member[122575](arg _mt[126162]:_MT[238], arg this[126160]:_domain[125914](?), arg i[122572] :
  (122570 call * rank(122567 call . _value c"idxType"))) : _unknown[51] "inline" "method" "primary method" "no doc"
  {
    (122615 call compilerWarning(122612 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122625 return(122624 call(122619 call . this c"contains") i))
  } function _domain[125914](?).member[122640](arg _mt[126166]:_MT[238], arg this[126164]:_domain[125914](?), arg i[122636] ... :
  (122632 call . _value c"idxType")) : _unknown[51] "inline" "method" "primary method"
  {
    (122648 call compilerWarning(122645 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (122658 return(122657 call(122652 call . this c"contains") i))
  } function _domain[125914](?).isSubset[122668](arg _mt[126170]:_MT[238], arg this[126168]:_domain[125914](?), arg super[122665] :
  _domain) : _unknown[51] "method" "primary method"
  {
    if(122735 call _cond_test(122680 call !(122678 call ||(122673 call isAssociativeDom this)(122677 call isRectangularDom this))))
    {
      if(122728 call _cond_test(122685 call isSparseDom this))
      {
        { scopeless
          (122705 call compilerError "isSubset not supported on sparse domains")
        }
      }
      {
        { scopeless
          (122726 call compilerError "isSubset not supported on this domain type")
        }
      }
    }
    if(122852 call _cond_test(122744 call !=(122741 'typeof' super)(122743 'typeof' this)))
    {
      { scopeless
        if(122847 call _cond_test(122749 call isRectangularDom this))
        {
          if(122819 call _cond_test(122758 call !=(122751 call . super c"rank")(122755 call . this c"rank")))
          {
            { scopeless
              (122779 call compilerError "rank mismatch in domain.isSubset()")
            }
          }
          {
            { scopeless
              if(122814 call _cond_test(122791 call !=(122785 'typeof'(122782 call . super c"low"))(122790 'typeof'(122787 call . this c"low"))))
              {
                { scopeless
                  (122812 call compilerError "isSubset called with different index types")
                }
              }
            }
          }
        }
        {
          { scopeless
            (122845 call compilerError "isSubset called with different associative domain types")
          }
        }
      }
    }
    if(122983 call _cond_test(122860 call isRectangularDom this))
    {
      { scopeless
        unknown contains[122862] 1
        (122865 'end of statement')
      }
      {
        unknown _indexOfInterest[122932] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[122933] "expr temp" "temp"
        (122942 'move' _iterator[122933](122940 call _getIterator(122957 call chpl_direct_range_iter 0(122947 call -(122949 call .(122954 call(122951 call . this c"dims")) c"size") 1) 1)))
        Defer
        {
          {
            (122973 call _freeIterator _iterator[122933])
          }
        }
        { scopeless type
          (122962 'move' _indexOfInterest[122932](122959 call iteratorIndex _iterator[122933]))
        }
        ForLoop[122934]
        {
          unknown i[122966] "index var" "insert auto destroy"
          (122968 'move' i[122966] _indexOfInterest[122932])
          {
            {
              unknown tmp[122908] "temp"
              (122911 'move' tmp[122908](122910 'addr of' contains))
              (122916 call = tmp[122908](122913 call && tmp[122908](122906 call(122893 call .(122892 call(122889 call(122885 call . super c"dims")) i) c"contains")(122904 call(122901 call(122897 call . this c"dims")) i))))
            }
            if(122927 call _cond_test(122922 call == contains 0))
            {
              { scopeless
                break nil[44]
              }
            }
          }
          label _continueLabel[122937]
          _indexOfInterest[122932]
          _iterator[122933]
        }
        label _breakLabel[122938]
      }
      (122981 return contains)
    }
    (123003 return(123001 'reduce' LogicalAndReduceScanOp(122997 forall  i  in  this do
    {
      (122996 call(122991 call . super c"contains") i)
    } ) 0))
  } function _domain[125914](?).isSuper[123013](arg _mt[126174]:_MT[238], arg this[126172]:_domain[125914](?), arg sub[123010] :
  _domain) : _unknown[51] "method" "primary method"
  {
    if(123082 call _cond_test(123025 call !(123023 call ||(123018 call isAssociativeDom this)(123022 call isRectangularDom this))))
    {
      if(123075 call _cond_test(123030 call isSparseDom this))
      {
        { scopeless
          (123050 call compilerError "isSuper not supported on sparse domains")
        }
      }
      {
        { scopeless
          (123073 call compilerError "isSuper not supported on the domain type "(123072 'typeof' this))
        }
      }
    }
    if(123199 call _cond_test(123091 call !=(123088 'typeof' sub)(123090 'typeof' this)))
    {
      { scopeless
        if(123194 call _cond_test(123096 call isRectangularDom this))
        {
          if(123166 call _cond_test(123105 call !=(123098 call . sub c"rank")(123102 call . this c"rank")))
          {
            { scopeless
              (123126 call compilerError "rank mismatch in domain.isSuper()")
            }
          }
          {
            { scopeless
              if(123161 call _cond_test(123138 call !=(123132 'typeof'(123129 call . sub c"low"))(123137 'typeof'(123134 call . this c"low"))))
              {
                { scopeless
                  (123159 call compilerError "isSuper called with different index types")
                }
              }
            }
          }
        }
        {
          { scopeless
            (123192 call compilerError "isSuper called with different associative domain types")
          }
        }
      }
    }
    if(123330 call _cond_test(123207 call isRectangularDom this))
    {
      { scopeless
        unknown contains[123209] 1
        (123212 'end of statement')
      }
      {
        unknown _indexOfInterest[123279] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123280] "expr temp" "temp"
        (123289 'move' _iterator[123280](123287 call _getIterator(123304 call chpl_direct_range_iter 0(123294 call -(123296 call .(123301 call(123298 call . this c"dims")) c"size") 1) 1)))
        Defer
        {
          {
            (123320 call _freeIterator _iterator[123280])
          }
        }
        { scopeless type
          (123309 'move' _indexOfInterest[123279](123306 call iteratorIndex _iterator[123280]))
        }
        ForLoop[123281]
        {
          unknown i[123313] "index var" "insert auto destroy"
          (123315 'move' i[123313] _indexOfInterest[123279])
          {
            {
              unknown tmp[123255] "temp"
              (123258 'move' tmp[123255](123257 'addr of' contains))
              (123263 call = tmp[123255](123260 call && tmp[123255](123253 call(123240 call .(123239 call(123236 call(123232 call . this c"dims")) i) c"contains")(123251 call(123248 call(123244 call . sub c"dims")) i))))
            }
            if(123274 call _cond_test(123269 call == contains 0))
            {
              { scopeless
                break nil[44]
              }
            }
          }
          label _continueLabel[123284]
          _indexOfInterest[123279]
          _iterator[123280]
        }
        label _breakLabel[123285]
      }
      (123328 return contains)
    }
    (123350 return(123348 'reduce' LogicalAndReduceScanOp(123344 forall  i  in  sub do
    {
      (123343 call(123338 call . this c"contains") i)
    } ) 0))
  } function _domain[125914](?).indexOrder[123358](arg _mt[126178]:_MT[238], arg this[126176]:_domain[125914](?), arg i[123356]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      (123373 return(123372 call(123363 call . _value c"dsiIndexOrder")(123370 call _makeIndexTuple rank i)))
    }
  } function _domain[125914](?).position[123382](arg _mt[126182]:_MT[238], arg this[126180]:_domain[125914](?), arg i[123380]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      unknown ind[123389](123388 call _makeIndexTuple rank i)
      unknown pos[123396](123394 call * rank intIdxType)
      (123399 'end of statement')
    }
    {
      unknown _indexOfInterest[123432] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123433] "expr temp" "temp"
      (123442 'move' _iterator[123433](123440 call _getIterator(123450 call chpl_direct_range_iter 0(123447 call - rank 1) 1)))
      Defer
      {
        {
          (123466 call _freeIterator _iterator[123433])
        }
      }
      { scopeless type
        (123455 'move' _indexOfInterest[123432](123452 call iteratorIndex _iterator[123433]))
      }
      ForLoop[123434]
      {
        unknown d[123459] "index var" "insert auto destroy"
        (123461 'move' d[123459] _indexOfInterest[123432])
        { scopeless
          (123429 call =(123412 call pos d)(123428 call(123420 call .(123419 call(123414 call . _value c"dsiDim") d) c"indexOrder")(123426 call ind d)))
        }
        label _continueLabel[123437]
        _indexOfInterest[123432]
        _iterator[123433]
      }
      label _breakLabel[123438]
    }
    (123474 return pos)
  } function _domain[125914](?).expand[123487](arg _mt[126186]:_MT[238], arg this[126184]:_domain[125914](?), arg off[123484] :
  (123482 call * rank intIdxType)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(123572 call _cond_test(123498 call isAssociativeDom this))
    {
      { scopeless
        (123518 call compilerError "expand not supported on associative domains")
      }
    }
    {
      { scopeless
        if(123566 call _cond_test(123523 call isSparseDom this))
        {
          { scopeless
            (123543 call compilerError "expand not supported on sparse domains")
          }
        }
        {
          { scopeless
            (123564 call compilerError "expand not supported on this domain type")
          }
        }
      }
    }
  }
  where {
    (123493 call !(123492 call isRectangularDom this))
  } function _domain[125914](?).expand[123590](arg _mt[126190]:_MT[238], arg this[126188]:_domain[125914](?), arg off[123586] ... :
  intIdxType) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      (123596 return(123595 call expand off))
    }
  } function _domain[125914](?).expand[123610](arg _mt[126194]:_MT[238], arg this[126192]:_domain[125914](?), arg off[123607] :
  (123605 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown ranges[123615](123614 call dims)
      (123618 'end of statement')
    }
    {
      unknown _indexOfInterest[123711] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123712] "expr temp" "temp"
      (123721 'move' _iterator[123712](123719 call _getIterator(123729 call chpl_direct_range_iter 0(123726 call - rank 1) 1)))
      Defer
      {
        {
          (123745 call _freeIterator _iterator[123712])
        }
      }
      { scopeless type
        (123734 'move' _indexOfInterest[123711](123731 call iteratorIndex _iterator[123712]))
      }
      ForLoop[123713]
      {
        unknown i[123738] "index var" "insert auto destroy"
        (123740 'move' i[123738] _indexOfInterest[123711])
        {
          (123647 call =(123631 call ranges i)(123646 call(123638 call .(123635 call ranges i) c"expand")(123644 call off i)))
          if(123707 call _cond_test(123665 call >(123655 call .(123654 call ranges i) c"low")(123662 call .(123661 call ranges i) c"high")))
          {
            (123704 call halt "***Error: Degenerate dimension created in dimension " i "***")
          }
        }
        label _continueLabel[123716]
        _indexOfInterest[123711]
        _iterator[123712]
      }
      label _breakLabel[123717]
    }
    (123764 return(123752 'new'(123763 call _domain dist rank(123758 call . _value c"idxType") stridable ranges)))
  } function _domain[125914](?).expand[123774](arg _mt[126198]:_MT[238], arg this[126196]:_domain[125914](?), arg off[123771] :
  intIdxType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown ranges[123783](123782 call dims)
      (123786 'end of statement')
    }
    {
      unknown _indexOfInterest[123813] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[123814] "expr temp" "temp"
      (123823 'move' _iterator[123814](123821 call _getIterator(123831 call chpl_direct_range_iter 0(123828 call - rank 1) 1)))
      Defer
      {
        {
          (123847 call _freeIterator _iterator[123814])
        }
      }
      { scopeless type
        (123836 'move' _indexOfInterest[123813](123833 call iteratorIndex _iterator[123814]))
      }
      ForLoop[123815]
      {
        unknown i[123840] "index var" "insert auto destroy"
        (123842 'move' i[123840] _indexOfInterest[123813])
        { scopeless
          (123810 call =(123799 call ranges i)(123809 call(123804 call .(123803 call dim i) c"expand") off))
        }
        label _continueLabel[123818]
        _indexOfInterest[123813]
        _iterator[123814]
      }
      label _breakLabel[123819]
    }
    (123866 return(123854 'new'(123865 call _domain dist rank(123860 call . _value c"idxType") stridable ranges)))
  }
  where {
    (123778 call > rank 1)
  } function _domain[125914](?).exterior[123880](arg _mt[126202]:_MT[238], arg this[126200]:_domain[125914](?), arg off[123877] :
  (123875 call * rank intIdxType)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(123965 call _cond_test(123891 call isAssociativeDom this))
    {
      { scopeless
        (123911 call compilerError "exterior not supported on associative domains")
      }
    }
    {
      { scopeless
        if(123959 call _cond_test(123916 call isSparseDom this))
        {
          { scopeless
            (123936 call compilerError "exterior not supported on sparse domains")
          }
        }
        {
          { scopeless
            (123957 call compilerError "exterior not supported on this domain type")
          }
        }
      }
    }
  }
  where {
    (123886 call !(123885 call isRectangularDom this))
  } function _domain[125914](?).exterior[123983](arg _mt[126206]:_MT[238], arg this[126204]:_domain[125914](?), arg off[123979] ... :
  intIdxType) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      (123989 return(123988 call exterior off))
    }
  } function _domain[125914](?).exterior[124003](arg _mt[126210]:_MT[238], arg this[126208]:_domain[125914](?), arg off[124000] :
  (123998 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown ranges[124008](124007 call dims)
      (124011 'end of statement')
    }
    {
      unknown _indexOfInterest[124043] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124044] "expr temp" "temp"
      (124053 'move' _iterator[124044](124051 call _getIterator(124061 call chpl_direct_range_iter 0(124058 call - rank 1) 1)))
      Defer
      {
        {
          (124077 call _freeIterator _iterator[124044])
        }
      }
      { scopeless type
        (124066 'move' _indexOfInterest[124043](124063 call iteratorIndex _iterator[124044]))
      }
      ForLoop[124045]
      {
        unknown i[124070] "index var" "insert auto destroy"
        (124072 'move' i[124070] _indexOfInterest[124043])
        { scopeless
          (124040 call =(124024 call ranges i)(124039 call(124031 call .(124028 call dim i) c"exterior")(124037 call off i)))
        }
        label _continueLabel[124048]
        _indexOfInterest[124043]
        _iterator[124044]
      }
      label _breakLabel[124049]
    }
    (124096 return(124084 'new'(124095 call _domain dist rank(124090 call . _value c"idxType") stridable ranges)))
  } function _domain[125914](?).exterior[124106](arg _mt[126214]:_MT[238], arg this[126212]:_domain[125914](?), arg off[124103] :
  intIdxType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown offTup[124116](124114 call * rank intIdxType)
      (124119 'end of statement')
    }
    {
      unknown _indexOfInterest[124137] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124138] "expr temp" "temp"
      (124147 'move' _iterator[124138](124145 call _getIterator(124155 call chpl_direct_range_iter 0(124152 call - rank 1) 1)))
      Defer
      {
        {
          (124171 call _freeIterator _iterator[124138])
        }
      }
      { scopeless type
        (124160 'move' _indexOfInterest[124137](124157 call iteratorIndex _iterator[124138]))
      }
      ForLoop[124139]
      {
        unknown i[124164] "index var" "insert auto destroy"
        (124166 'move' i[124164] _indexOfInterest[124137])
        { scopeless
          (124134 call =(124132 call offTup i) off)
        }
        label _continueLabel[124142]
        _indexOfInterest[124137]
        _iterator[124138]
      }
      label _breakLabel[124143]
    }
    (124182 return(124181 call exterior offTup))
  }
  where {
    (124110 call != rank 1)
  } function _domain[125914](?).interior[124196](arg _mt[126218]:_MT[238], arg this[126216]:_domain[125914](?), arg off[124193] :
  (124191 call * rank intIdxType)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(124281 call _cond_test(124207 call isAssociativeDom this))
    {
      { scopeless
        (124227 call compilerError "interior not supported on associative domains")
      }
    }
    {
      { scopeless
        if(124275 call _cond_test(124232 call isSparseDom this))
        {
          { scopeless
            (124252 call compilerError "interior not supported on sparse domains")
          }
        }
        {
          { scopeless
            (124273 call compilerError "interior not supported on this domain type")
          }
        }
      }
    }
  }
  where {
    (124202 call !(124201 call isRectangularDom this))
  } function _domain[125914](?).interior[124299](arg _mt[126222]:_MT[238], arg this[126220]:_domain[125914](?), arg off[124295] ... :
  intIdxType) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      (124305 return(124304 call interior off))
    }
  } function _domain[125914](?).interior[124319](arg _mt[126226]:_MT[238], arg this[126224]:_domain[125914](?), arg off[124316] :
  (124314 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown ranges[124324](124323 call dims)
      (124327 'end of statement')
    }
    {
      unknown _indexOfInterest[124461] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124462] "expr temp" "temp"
      (124471 'move' _iterator[124462](124469 call _getIterator(124479 call chpl_direct_range_iter 0(124476 call - rank 1) 1)))
      Defer
      {
        {
          (124495 call _freeIterator _iterator[124462])
        }
      }
      { scopeless type
        (124484 'move' _indexOfInterest[124461](124481 call iteratorIndex _iterator[124462]))
      }
      ForLoop[124463]
      {
        unknown i[124488] "index var" "insert auto destroy"
        (124490 'move' i[124488] _indexOfInterest[124461])
        {
          if(124431 call _cond_test(124405 call ||(124369 call &&(124342 call >(124340 call off i) 0)(124367 call <(124358 call -(124352 call +(124348 call .(124347 call dim i) c"_high") 1)(124357 call off i))(124364 call .(124363 call dim i) c"_low")))(124403 call &&(124376 call <(124374 call off i) 0)(124401 call >(124392 call -(124386 call -(124382 call .(124381 call dim i) c"_low") 1)(124391 call off i))(124398 call .(124397 call dim i) c"_high")))))
          {
            (124428 call halt "***Error: Argument to 'interior' function out of range in dimension " i "***")
          }
          (124458 call =(124439 call ranges i)(124457 call(124449 call .(124446 call(124441 call . _value c"dsiDim") i) c"interior")(124455 call off i)))
        }
        label _continueLabel[124466]
        _indexOfInterest[124461]
        _iterator[124462]
      }
      label _breakLabel[124467]
    }
    (124514 return(124502 'new'(124513 call _domain dist rank(124508 call . _value c"idxType") stridable ranges)))
  } function _domain[125914](?).interior[124524](arg _mt[126230]:_MT[238], arg this[126228]:_domain[125914](?), arg off[124521] :
  intIdxType) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown offTup[124534](124532 call * rank intIdxType)
      (124537 'end of statement')
    }
    {
      unknown _indexOfInterest[124555] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124556] "expr temp" "temp"
      (124565 'move' _iterator[124556](124563 call _getIterator(124573 call chpl_direct_range_iter 0(124570 call - rank 1) 1)))
      Defer
      {
        {
          (124589 call _freeIterator _iterator[124556])
        }
      }
      { scopeless type
        (124578 'move' _indexOfInterest[124555](124575 call iteratorIndex _iterator[124556]))
      }
      ForLoop[124557]
      {
        unknown i[124582] "index var" "insert auto destroy"
        (124584 'move' i[124582] _indexOfInterest[124555])
        { scopeless
          (124552 call =(124550 call offTup i) off)
        }
        label _continueLabel[124560]
        _indexOfInterest[124555]
        _iterator[124556]
      }
      label _breakLabel[124561]
    }
    (124600 return(124599 call interior offTup))
  }
  where {
    (124528 call != rank 1)
  } function _domain[125914](?).translate[124609](arg _mt[126234]:_MT[238], arg this[126232]:_domain[125914](?), arg off[124607]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    if(124694 call _cond_test(124620 call isAssociativeDom this))
    {
      { scopeless
        (124640 call compilerError "translate not supported on associative domains")
      }
    }
    {
      { scopeless
        if(124688 call _cond_test(124645 call isSparseDom this))
        {
          { scopeless
            (124665 call compilerError "translate not supported on sparse domains")
          }
        }
        {
          { scopeless
            (124686 call compilerError "translate not supported on this domain type")
          }
        }
      }
    }
  }
  where {
    (124615 call !(124614 call isRectangularDom this))
  } function _domain[125914](?).translate[124710](arg _mt[126238]:_MT[238], arg this[126236]:_domain[125914](?), arg off[124707]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      (124716 return(124715 call translate off))
    }
  } function _domain[125914](?).translate[124725](arg _mt[126242]:_MT[238], arg this[126240]:_domain[125914](?), arg off[124723]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    if(124759 call _cond_test(124736 call !=(124732 call . off c"size") rank))
    {
      { scopeless
        (124757 call compilerError "the domain and offset arguments of translate() must be of the same rank")
      }
    }
    { scopeless
      unknown ranges[124768](124767 call dims)
      (124771 'end of statement')
    }
    {
      unknown _indexOfInterest[124805] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124806] "expr temp" "temp"
      (124815 'move' _iterator[124806](124813 call _getIterator(124823 call chpl_direct_range_iter 0(124820 call - rank 1) 1)))
      Defer
      {
        {
          (124839 call _freeIterator _iterator[124806])
        }
      }
      { scopeless type
        (124828 'move' _indexOfInterest[124805](124825 call iteratorIndex _iterator[124806]))
      }
      ForLoop[124807]
      {
        unknown i[124832] "index var" "insert auto destroy"
        (124834 'move' i[124832] _indexOfInterest[124805])
        { scopeless
          (124802 call =(124783 call ranges i)(124801 call(124793 call .(124790 call(124785 call . _value c"dsiDim") i) c"translate")(124799 call off i)))
        }
        label _continueLabel[124810]
        _indexOfInterest[124805]
        _iterator[124806]
      }
      label _breakLabel[124811]
    }
    (124858 return(124846 'new'(124857 call _domain dist rank(124852 call . _value c"idxType") stridable ranges)))
  }
  where {
    (124730 call isTuple off)
  } function _domain[125914](?).translate[124867](arg _mt[126246]:_MT[238], arg this[126244]:_domain[125914](?), arg off[124865]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown offTup[124886](124884 call * rank(124883 'typeof' off))
      (124889 'end of statement')
    }
    {
      unknown _indexOfInterest[124907] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124908] "expr temp" "temp"
      (124917 'move' _iterator[124908](124915 call _getIterator(124925 call chpl_direct_range_iter 0(124922 call - rank 1) 1)))
      Defer
      {
        {
          (124941 call _freeIterator _iterator[124908])
        }
      }
      { scopeless type
        (124930 'move' _indexOfInterest[124907](124927 call iteratorIndex _iterator[124908]))
      }
      ForLoop[124909]
      {
        unknown i[124934] "index var" "insert auto destroy"
        (124936 'move' i[124934] _indexOfInterest[124907])
        { scopeless
          (124904 call =(124902 call offTup i) off)
        }
        label _continueLabel[124912]
        _indexOfInterest[124907]
        _iterator[124908]
      }
      label _breakLabel[124913]
    }
    (124952 return(124951 call translate offTup))
  }
  where {
    (124879 call &&(124871 call != rank 1)(124877 call !(124876 call isTuple off)))
  } function _domain[125914](?).isEmpty[124959](arg _mt[126250]:_MT[238], arg this[126248]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    (124969 return(124967 call ==(124963 call . this c"size") 0))
  }
  { scopeless type
    bool[10]
  } function _domain[125914](?).chpl__unTranslate[124983](arg _mt[126254]:_MT[238], arg this[126252]:_domain[125914](?), arg off[124979] ... :
  integral) : _unknown[51] "method" "primary method"
  {
    { scopeless
      (124989 return(124988 call chpl__unTranslate off))
    }
  } function _domain[125914](?).chpl__unTranslate[125003](arg _mt[126258]:_MT[238], arg this[126256]:_domain[125914](?), arg off[125000] :
  (124998 call * rank intIdxType)) : _unknown[51] "method" "primary method"
  {
    { scopeless
      unknown ranges[125008](125007 call dims)
      (125011 'end of statement')
    }
    {
      unknown _indexOfInterest[125043] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125044] "expr temp" "temp"
      (125053 'move' _iterator[125044](125051 call _getIterator(125061 call chpl_direct_range_iter 0(125058 call - rank 1) 1)))
      Defer
      {
        {
          (125077 call _freeIterator _iterator[125044])
        }
      }
      { scopeless type
        (125066 'move' _indexOfInterest[125043](125063 call iteratorIndex _iterator[125044]))
      }
      ForLoop[125045]
      {
        unknown i[125070] "index var" "insert auto destroy"
        (125072 'move' i[125070] _indexOfInterest[125043])
        { scopeless
          (125040 call =(125024 call ranges i)(125039 call(125031 call .(125028 call dim i) c"chpl__unTranslate")(125037 call off i)))
        }
        label _continueLabel[125048]
        _indexOfInterest[125043]
        _iterator[125044]
      }
      label _breakLabel[125049]
    }
    (125096 return(125084 'new'(125095 call _domain dist rank(125090 call . _value c"idxType") stridable ranges)))
  } function _domain[125914](?).setIndices[125104](arg _mt[126262]:_MT[238], arg this[126260]:_domain[125914](?), arg x[125102]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (125112 call(125107 call . _value c"dsiSetIndices") x)
    if(125125 call _cond_test(125118 call _isPrivatized _instance))
    {
      (125122 call _reprivatize _value)
    }
  } function _domain[125914](?).getIndices[125133](arg _mt[126266]:_MT[238], arg this[126264]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    { scopeless
      (125143 return(125142 call(125138 call . _value c"dsiGetIndices")))
    }
  } function _domain[125914](?).writeThis[125152](arg _mt[126270]:_MT[238], arg this[126268]:_domain[125914](?), arg f[125150]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (125162 call(125157 call . _value c"dsiSerialWrite") f)
  } function _domain[125914](?).readThis[125171](arg _mt[126274]:_MT[238], arg this[126272]:_domain[125914](?), arg f[125169]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (125181 call(125176 call . _value c"dsiSerialRead") f)
  } function _domain[125914](?).localSlice[125192](arg _mt[126278]:_MT[238], arg this[126276]:_domain[125914](?), arg r[125189]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc"
  {
    if(125260 call _cond_test(125211 call !=(125208 call chpl_localeID_to_locale(125207 '_wide_get_locale' _value)) here))
    {
      { scopeless
        (125258 call halt "Attempting to take a local slice of a domain on locale "(125236 '_wide_get_node' _value) " from locale "(125255 call . here c"id"))
      }
    }
    (125271 return(125270 call this(125268 'expand_tuple' r)))
  }
  where {
    (125204 call &&(125197 call chpl__isTupleOfRanges r)(125203 call(125199 call . _value c"isDefaultRectangular")))
  } function _domain[125914](?).localSlice[125282](arg _mt[126282]:_MT[238], arg this[126280]:_domain[125914](?), arg r[125279]:_any[178](?) ...) : _unknown[51] "method" "primary method"
  {
    (125311 return(125310 call(125301 call . _value c"dsiLocalSlice")(125307 call chpl__anyStridable r) r))
  }
  where {
    (125296 call &&(125287 call chpl__isTupleOfRanges r)(125294 call !(125293 call(125289 call . _value c"isDefaultRectangular"))))
  } function _domain[125914](?).localSlice[125323](arg _mt[126286]:_MT[238], arg this[126284]:_domain[125914](?), arg d[125320] :
  _domain) : _unknown[51] "method" "primary method"
  {
    (125335 return(125334 call localSlice(125332 'expand_tuple'(125331 call(125327 call . d c"getIndices")))))
  } function _domain[125914](?).sorted[125351](arg _mt[126290]:_MT[238], arg this[126288]:_domain[125914](?), arg comparator[125347] :
  unknown t[125342] =
  (125346 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[125367] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125368] "expr temp" "temp"
      (125377 'move' _iterator[125368](125375 call _getIterator(125362 call(125357 call . _value c"dsiSorted") comparator)))
      Defer
      {
        {
          (125394 call _freeIterator _iterator[125368])
        }
      }
      { scopeless type
        (125383 'move' _indexOfInterest[125367](125380 call iteratorIndex _iterator[125368]))
      }
      ForLoop[125369]
      {
        unknown i[125387] "index var" "insert auto destroy"
        (125389 'move' i[125387] _indexOfInterest[125367])
        {
          (125364 yield i)
        }
        label _continueLabel[125372]
        _indexOfInterest[125367]
        _iterator[125368]
      }
      label _breakLabel[125373]
    }
  } function _domain[125914](?).displayRepresentation[125406](arg _mt[126294]:_MT[238], arg this[126292]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (125413 call(125409 call . _value c"dsiDisplayRepresentation"))
  } function _domain[125914](?).defaultSparseDist[125420](arg _mt[126298]:_MT[238], arg this[126296]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (125429 return(125428 call _getDistribution(125424 call . _value c"dist")))
  } function _domain[125914](?).safeCast[125440](arg _mt[126302]:_MT[238], arg this[126300]:_domain[125914](?), arg t[125437] :
  _domain) : _unknown[51] "method" "primary method"
  {
    { scopeless
      const tmpD[125453] "const" t
      (125456 'end of statement')
    }
    if(125489 call _cond_test(125466 call !=(125459 call . tmpD c"rank")(125463 call . this c"rank")))
    {
      { scopeless
        (125487 call compilerError "rank mismatch in cast")
      }
    }
    if(125525 call _cond_test(125502 call !=(125495 call . tmpD c"idxType")(125499 call . this c"idxType")))
    {
      { scopeless
        (125523 call compilerError "idxType mismatch in cast")
      }
    }
    if(125719 call _cond_test(125538 call ==(125531 call . tmpD c"stridable")(125535 call . this c"stridable")))
    {
      { scopeless
        (125541 return this)
      }
    }
    {
      { scopeless
        if(125715 call _cond_test(125553 call &&(125547 call !(125544 call . tmpD c"stridable"))(125550 call . this c"stridable")))
        {
          { scopeless
            const inds[125561] "const"(125560 call(125556 call . this c"getIndices"))
            (125564 'end of statement')
          }
          { scopeless
            unknown unstridableInds[125578](125576 call * rank(125575 call range(125569 call . tmpD c"idxType")(stridable = 0)))
            (125581 'end of statement')
          }
          {
            unknown dim[125655] 0
            unknown tmp[125656] "maybe param" "temp"
            (125668 'move' tmp[125656](125666 call chpl_compute_low_param_loop_bound 0(125588 call -(125584 call . inds c"size") 1)))
            unknown tmp[125657] "maybe param" "temp"
            (125681 'move' tmp[125657](125679 call chpl_compute_high_param_loop_bound 0(125673 call -(125675 call . inds c"size") 1)))
            unknown tmp[125658] "maybe param" "temp"
            (125684 'move' tmp[125658] 1)
            ParamForLoop[125686]
            { dim[125655] tmp[125656] tmp[125657] tmp[125658]
              {
                if(125624 call _cond_test(125600 call !=(125596 call .(125595 call inds dim) c"stride") 1))
                {
                  { scopeless
                    (125622 call halt "non-stridable domain assigned non-unit stride in dimension " dim)
                  }
                }
                (125652 call =(125633 call unstridableInds dim)(125651 call(125638 call .(125637 call inds dim) c"safeCast")(125649 call range(125643 call . tmpD c"idxType")(stridable = 0))))
              }
            }
            label _unused_continueLabel[125660]
            label _breakLabel[125659]
          }
          (125701 call(125696 call . tmpD c"setIndices") unstridableInds)
          (125704 return tmpD)
        }
        {
          (125708 call = tmpD this)
          (125713 return tmpD)
        }
      }
    }
  }
  where {
    (125450 call &&(125445 call chpl__isRectangularDomType t)(125449 call isRectangularDom this))
  } function _domain[125914](?).targetLocales[125730](arg _mt[126306]:_MT[238], arg this[126304]:_domain[125914](?)) : _unknown[51] "method" "primary method"
  {
    (125738 return(125737 call(125733 call . _value c"dsiTargetLocales")))
  } function _domain[125914](?).hasSingleLocalSubdomain[125745](arg _mt[126310]:_MT[238], arg this[126308]:_domain[125914](?)) param : _unknown[51] "method" "primary method"
  {
    (125755 return(125754 call(125750 call . _value c"dsiHasSingleLocalSubdomain")))
  } function _domain[125914](?).localSubdomain[125768](arg _mt[126314]:_MT[238], arg this[126312]:_domain[125914](?), arg loc[125764] :
  locale[28] =
  here) : _unknown[51] "method" "primary method"
  {
    if(125799 call _cond_test(125776 call !(125775 call(125771 call . _value c"dsiHasSingleLocalSubdomain"))))
    {
      { scopeless
        (125797 call compilerError "Domain's local domain is not a single domain")
      }
    }
    (125814 return(125813 call(125808 call . _value c"dsiLocalSubdomain") loc))
  } function _domain[125914](?).localSubdomains[125826](arg _mt[126318]:_MT[238], arg this[126316]:_domain[125914](?), arg loc[125822] :
  locale[28] =
  here) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(125889 call _cond_test(125833 call(125829 call . _value c"dsiHasSingleLocalSubdomain")))
    {
      (125838 yield(125837 call localSubdomain loc))
    }
    {
      {
        unknown _indexOfInterest[125854] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[125855] "expr temp" "temp"
        (125864 'move' _iterator[125855](125862 call _getIterator(125850 call(125845 call . _value c"dsiLocalSubdomains") loc)))
        Defer
        {
          {
            (125881 call _freeIterator _iterator[125855])
          }
        }
        { scopeless type
          (125870 'move' _indexOfInterest[125854](125867 call iteratorIndex _iterator[125855]))
        }
        ForLoop[125856]
        {
          unknown d[125874] "index var" "insert auto destroy"
          (125876 'move' d[125874] _indexOfInterest[125854])
          { scopeless
            (125852 yield d)
          }
          label _continueLabel[125859]
          _indexOfInterest[125854]
          _iterator[125855]
        }
        label _breakLabel[125860]
      }
    }
  } function _domain[125914](?).supportsAutoLocalAccess[125898](arg _mt[126322]:_MT[238], arg this[126320]:_domain[125914](?)) param : _unknown[51] "method" "primary method"
  {
    (125908 return(125907 call(125903 call . _value c"dsiSupportsAutoLocalAccess")))
  } forwarding ( )
  function _cast[126331](arg t[126328] :
  _domain, arg d[126334] :
  _domain) : _unknown[51] "no doc"
  {
    { scopeless
      const tmpD[126348] "const" t
      (126351 'end of statement')
    }
    if(126368 call _cond_test(126361 call !=(126354 call . tmpD c"rank")(126358 call . d c"rank")))
    {
      { scopeless
        (126366 call compilerError "rank mismatch in cast")
      }
    }
    if(126388 call _cond_test(126381 call !=(126374 call . tmpD c"idxType")(126378 call . d c"idxType")))
    {
      { scopeless
        (126386 call compilerError "idxType mismatch in cast")
      }
    }
    if(126545 call _cond_test(126401 call ==(126394 call . tmpD c"stridable")(126398 call . d c"stridable")))
    {
      { scopeless
        (126404 return d)
      }
    }
    {
      { scopeless
        if(126541 call _cond_test(126416 call &&(126410 call !(126407 call . tmpD c"stridable"))(126413 call . d c"stridable")))
        {
          { scopeless
            unknown inds[126424](126423 call(126419 call . d c"getIndices"))
            (126427 'end of statement')
          }
          { scopeless
            unknown unstridableInds[126444](126442 call *(126430 call . d c"rank")(126441 call range(126435 call . tmpD c"idxType")(stridable = 0)))
            (126447 'end of statement')
          }
          {
            unknown i[126481] 0
            unknown tmp[126482] "maybe param" "temp"
            (126494 'move' tmp[126482](126492 call chpl_compute_low_param_loop_bound 0(126454 call -(126450 call . tmpD c"rank") 1)))
            unknown tmp[126483] "maybe param" "temp"
            (126507 'move' tmp[126483](126505 call chpl_compute_high_param_loop_bound 0(126499 call -(126501 call . tmpD c"rank") 1)))
            unknown tmp[126484] "maybe param" "temp"
            (126510 'move' tmp[126484] 1)
            ParamForLoop[126512]
            { i[126481] tmp[126482] tmp[126483] tmp[126484]
              {
                (126477 call =(126461 call unstridableInds i)(126475 call _cast(126474 call range(126468 call . tmpD c"idxType")(stridable = 0))(126465 call inds i)))
              }
            }
            label _unused_continueLabel[126486]
            label _breakLabel[126485]
          }
          (126527 call(126522 call . tmpD c"setIndices") unstridableInds)
          (126530 return tmpD)
        }
        {
          (126534 call = tmpD d)
          (126539 return tmpD)
        }
      }
    }
  }
  where {
    (126345 call &&(126340 call chpl__isRectangularDomType t)(126344 call isRectangularDom d))
  }
  function _cast[126560](arg t[126557] :
  string[26], arg x[126563] :
  _domain) : _unknown[51]
  {
    (126567 'use' IO)
    (126574 return(126573 call stringify x))
  }
  function chpl_countDomHelp[126582](arg dom[126580]:_any[178](?), arg counts[126584]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown ranges[126592](126591 call(126587 call . dom c"dims"))
      (126595 'end of statement')
    }
    {
      unknown i[126624] 0
      unknown tmp[126625] "maybe param" "temp"
      (126637 'move' tmp[126625](126635 call chpl_compute_low_param_loop_bound 0(126603 call -(126599 call . dom c"rank") 1)))
      unknown tmp[126626] "maybe param" "temp"
      (126650 'move' tmp[126626](126648 call chpl_compute_high_param_loop_bound 0(126642 call -(126644 call . dom c"rank") 1)))
      unknown tmp[126627] "maybe param" "temp"
      (126653 'move' tmp[126627] 1)
      ParamForLoop[126655]
      { i[126624] tmp[126625] tmp[126626] tmp[126627]
        { scopeless
          (126621 call =(126610 call ranges i)(126619 call #(126614 call ranges i)(126618 call counts i)))
        }
      }
      label _unused_continueLabel[126629]
      label _breakLabel[126628]
    }
    (126669 return(126668 call dom(126666 'expand_tuple' ranges)))
  }
  function #[126679](arg dom[126676] :
  _domain, arg counts[126682] :
  integral) : _unknown[51]
  {
    (126705 return(126704 call chpl_countDomHelp dom(126702 call _build_tuple counts)))
  }
  where {
    (126696 call &&(126688 call isRectangularDom dom)(126694 call ==(126690 call . dom c"rank") 1))
  }
  function #[126717](arg dom[126714] :
  _domain, arg counts[126719]:_any[178](?)) : _unknown[51]
  {
    if(126762 call _cond_test(126739 call !=(126732 call . counts c"size")(126736 call . dom c"rank")))
    {
      { scopeless
        (126760 call compilerError "the domain and tuple arguments of # must have the same rank")
      }
    }
    (126773 return(126772 call chpl_countDomHelp dom counts))
  }
  where {
    (126729 call &&(126724 call isRectangularDom dom)(126728 call isTuple counts))
  }
  function #[126786](arg arr[126783] :
  (126780 call chpl__buildArrayRuntimeType nil[44]), arg counts[126789] :
  integral) : _unknown[51] "fn returns aliasing array"
  {
    (126815 return(126814 call arr(126811 call #(126807 call . arr c"_dom") counts)))
  }
  where {
    (126803 call &&(126795 call isRectangularArr arr)(126801 call ==(126797 call . arr c"rank") 1))
  }
  function #[126829](arg arr[126826] :
  (126823 call chpl__buildArrayRuntimeType nil[44]), arg counts[126831]:_any[178](?)) : _unknown[51] "fn returns aliasing array"
  {
    if(126874 call _cond_test(126851 call !=(126844 call . counts c"size")(126848 call . arr c"rank")))
    {
      { scopeless
        (126872 call compilerError "the domain and array arguments of # must have the same rank")
      }
    }
    (126890 return(126889 call arr(126886 call #(126882 call . arr c"_dom") counts)))
  }
  where {
    (126841 call &&(126836 call isRectangularArr arr)(126840 call isTuple counts))
  }
  function +[126901](arg d[126898] :
  _domain, arg i[126907] :
  (126905 call chpl__buildIndexType d)) : _unknown[51]
  {
    if(126956 call _cond_test(126913 call isRectangularDom d))
    {
      { scopeless
        (126933 call compilerError "Cannot add indices to a rectangular domain")
      }
    }
    {
      { scopeless
        (126954 call compilerError "Cannot add indices to this domain type")
      }
    }
  }
  function +[126969](arg i[126967]:_any[178](?), arg d[126972] :
  _domain) : _unknown[51]
  {
    if(126998 call _cond_test(126987 call isRectangularDom d))
    {
      { scopeless
        (126991 call compilerError "Cannot add indices to a rectangular domain")
      }
    }
    {
      { scopeless
        (126996 call compilerError "Cannot add indices to this domain type")
      }
    }
  }
  where {
    (126983 call isSubtype(126977 'typeof' i)(126981 call chpl__buildIndexType d))
  }
  function +[127014](arg d[127011] :
  _domain, arg i[127020] :
  (127018 call chpl__buildIndexType d)) : _unknown[51]
  {
    (127033 call(127028 call . d c"add") i)
    (127037 return d)
  }
  where {
    (127026 call isIrregularDom d)
  }
  function +[127046](arg i[127044]:_any[178](?), arg d[127049] :
  _domain) : _unknown[51]
  {
    (127073 call(127068 call . d c"add") i)
    (127077 return d)
  }
  where {
    (127065 call &&(127060 call isSubtype(127054 'typeof' i)(127058 call chpl__buildIndexType d))(127064 call isIrregularDom d))
  }
  function +[127088](arg d1[127085] :
  _domain, arg d2[127091] :
  _domain) : _unknown[51]
  {
    { scopeless
      unknown d3[127114](127113 'typeof' d1)
      (127117 'end of statement')
    }
    {
      unknown _indexOfInterest[127129] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127130] "expr temp" "temp"
      (127139 'move' _iterator[127130](127137 call _getIterator d1))
      Defer
      {
        {
          (127155 call _freeIterator _iterator[127130])
        }
      }
      { scopeless type
        (127144 'move' _indexOfInterest[127129](127141 call iteratorIndex _iterator[127130]))
      }
      ForLoop[127131]
      {
        unknown e[127148] "index var" "insert auto destroy"
        (127150 'move' e[127148] _indexOfInterest[127129])
        { scopeless
          (127127 call(127122 call . d3 c"add") e)
        }
        label _continueLabel[127134]
        _indexOfInterest[127129]
        _iterator[127130]
      }
      label _breakLabel[127135]
    }
    {
      unknown _indexOfInterest[127172] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127173] "expr temp" "temp"
      (127182 'move' _iterator[127173](127180 call _getIterator d2))
      Defer
      {
        {
          (127198 call _freeIterator _iterator[127173])
        }
      }
      { scopeless type
        (127187 'move' _indexOfInterest[127172](127184 call iteratorIndex _iterator[127173]))
      }
      ForLoop[127174]
      {
        unknown e[127191] "index var" "insert auto destroy"
        (127193 'move' e[127191] _indexOfInterest[127172])
        { scopeless
          (127170 call(127165 call . d3 c"add") e)
        }
        label _continueLabel[127177]
        _indexOfInterest[127172]
        _iterator[127173]
      }
      label _breakLabel[127178]
    }
    (127206 return d3)
  }
  where {
    (127110 call &&(127098 call ==(127095 'typeof' d1)(127097 'typeof' d2))(127108 call &&(127103 call isIrregularDom d1)(127107 call isIrregularDom d2)))
  }
  function +[127217](arg d1[127214] :
  _domain, arg d2[127220] :
  _domain) : _unknown[51]
  {
    if(127243 call _cond_test(127231 call ||(127226 call isRectangularDom d1)(127230 call isRectangularDom d2)))
    {
      { scopeless
        (127236 call compilerError "Cannot add indices to a rectangular domain")
      }
    }
    {
      { scopeless
        (127241 call compilerError "Cannot add indices to this domain type")
      }
    }
  }
  function -[127258](arg d[127255] :
  _domain, arg i[127264] :
  (127262 call chpl__buildIndexType d)) : _unknown[51]
  {
    if(127313 call _cond_test(127270 call isRectangularDom d))
    {
      { scopeless
        (127290 call compilerError "Cannot remove indices from a rectangular domain")
      }
    }
    {
      { scopeless
        (127311 call compilerError "Cannot remove indices from this domain type")
      }
    }
  }
  function -[127328](arg d[127325] :
  _domain, arg i[127334] :
  (127332 call chpl__buildIndexType d)) : _unknown[51]
  {
    (127347 call(127342 call . d c"remove") i)
    (127351 return d)
  }
  where {
    (127340 call isIrregularDom d)
  }
  function -[127362](arg d1[127359] :
  _domain, arg d2[127365] :
  _domain) : _unknown[51]
  {
    { scopeless
      unknown d3[127382](127381 'typeof' d1)
      (127385 'end of statement')
    }
    {
      unknown _indexOfInterest[127397] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127398] "expr temp" "temp"
      (127407 'move' _iterator[127398](127405 call _getIterator d1))
      Defer
      {
        {
          (127423 call _freeIterator _iterator[127398])
        }
      }
      { scopeless type
        (127412 'move' _indexOfInterest[127397](127409 call iteratorIndex _iterator[127398]))
      }
      ForLoop[127399]
      {
        unknown e[127416] "index var" "insert auto destroy"
        (127418 'move' e[127416] _indexOfInterest[127397])
        { scopeless
          (127395 call(127390 call . d3 c"add") e)
        }
        label _continueLabel[127402]
        _indexOfInterest[127397]
        _iterator[127398]
      }
      label _breakLabel[127403]
    }
    {
      unknown _indexOfInterest[127440] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127441] "expr temp" "temp"
      (127450 'move' _iterator[127441](127448 call _getIterator d2))
      Defer
      {
        {
          (127466 call _freeIterator _iterator[127441])
        }
      }
      { scopeless type
        (127455 'move' _indexOfInterest[127440](127452 call iteratorIndex _iterator[127441]))
      }
      ForLoop[127442]
      {
        unknown e[127459] "index var" "insert auto destroy"
        (127461 'move' e[127459] _indexOfInterest[127440])
        { scopeless
          (127438 call(127433 call . d3 c"remove") e)
        }
        label _continueLabel[127445]
        _indexOfInterest[127440]
        _iterator[127441]
      }
      label _breakLabel[127446]
    }
    (127474 return d3)
  }
  where {
    (127378 call &&(127372 call ==(127369 'typeof' d1)(127371 'typeof' d2))(127377 call isSparseDom d1))
  }
  function -[127485](arg d1[127482] :
  _domain, arg d2[127488] :
  _domain) : _unknown[51]
  {
    if(127511 call _cond_test(127499 call ||(127494 call isRectangularDom d1)(127498 call isRectangularDom d2)))
    {
      { scopeless
        (127504 call compilerError "Cannot remove indices from a rectangular domain")
      }
    }
    {
      { scopeless
        (127509 call compilerError "Cannot remove indices from this domain type")
      }
    }
  }
  function ==[127526](arg d1[127523] :
  _domain, arg d2[127529] :
  _domain) : _unknown[51] "inline"
  {
    if(127664 call _cond_test(127556 call !=(127546 call .(127543 call . d1 c"_value") c"rank")(127553 call .(127550 call . d2 c"_value") c"rank")))
    {
      (127559 return 0)
    }
    {
      { scopeless
        if(127660 call _cond_test(127570 call ==(127563 call . d1 c"_value")(127567 call . d2 c"_value")))
        {
          (127573 return 1)
        }
        {
          {
            unknown i[127613] 0
            unknown tmp[127614] "maybe param" "temp"
            (127626 'move' tmp[127614](127624 call chpl_compute_low_param_loop_bound 0(127585 call -(127581 call .(127578 call . d1 c"_value") c"rank") 1)))
            unknown tmp[127615] "maybe param" "temp"
            (127642 'move' tmp[127615](127640 call chpl_compute_high_param_loop_bound 0(127631 call -(127633 call .(127635 call . d1 c"_value") c"rank") 1)))
            unknown tmp[127616] "maybe param" "temp"
            (127645 'move' tmp[127616] 1)
            ParamForLoop[127647]
            { i[127613] tmp[127614] tmp[127615] tmp[127616]
              { scopeless
                if(127608 call _cond_test(127603 call !=(127595 call(127590 call . d1 c"dim") i)(127602 call(127597 call . d2 c"dim") i)))
                {
                  { scopeless
                    (127606 return 0)
                  }
                }
              }
            }
            label _unused_continueLabel[127618]
            label _breakLabel[127617]
          }
          (127658 return 1)
        }
      }
    }
  }
  where {
    (127540 call &&(127535 call isRectangularDom d1)(127539 call isRectangularDom d2))
  }
  function !=[127679](arg d1[127676] :
  _domain, arg d2[127682] :
  _domain) : _unknown[51] "inline"
  {
    if(127817 call _cond_test(127709 call !=(127699 call .(127696 call . d1 c"_value") c"rank")(127706 call .(127703 call . d2 c"_value") c"rank")))
    {
      (127712 return 1)
    }
    {
      { scopeless
        if(127813 call _cond_test(127723 call ==(127716 call . d1 c"_value")(127720 call . d2 c"_value")))
        {
          (127726 return 0)
        }
        {
          {
            unknown i[127766] 0
            unknown tmp[127767] "maybe param" "temp"
            (127779 'move' tmp[127767](127777 call chpl_compute_low_param_loop_bound 0(127738 call -(127734 call .(127731 call . d1 c"_value") c"rank") 1)))
            unknown tmp[127768] "maybe param" "temp"
            (127795 'move' tmp[127768](127793 call chpl_compute_high_param_loop_bound 0(127784 call -(127786 call .(127788 call . d1 c"_value") c"rank") 1)))
            unknown tmp[127769] "maybe param" "temp"
            (127798 'move' tmp[127769] 1)
            ParamForLoop[127800]
            { i[127766] tmp[127767] tmp[127768] tmp[127769]
              { scopeless
                if(127761 call _cond_test(127756 call !=(127748 call(127743 call . d1 c"dim") i)(127755 call(127750 call . d2 c"dim") i)))
                {
                  { scopeless
                    (127759 return 1)
                  }
                }
              }
            }
            label _unused_continueLabel[127771]
            label _breakLabel[127770]
          }
          (127811 return 0)
        }
      }
    }
  }
  where {
    (127693 call &&(127688 call isRectangularDom d1)(127692 call isRectangularDom d2))
  }
  function ==[127832](arg d1[127829] :
  _domain, arg d2[127835] :
  _domain) : _unknown[51] "inline"
  {
    if(127861 call _cond_test(127856 call ==(127849 call . d1 c"_value")(127853 call . d2 c"_value")))
    {
      { scopeless
        (127859 return 1)
      }
    }
    if(127880 call _cond_test(127875 call !=(127868 call . d1 c"size")(127872 call . d2 c"size")))
    {
      { scopeless
        (127878 return 0)
      }
    }
    {
      unknown _indexOfInterest[127904] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127905] "expr temp" "temp"
      (127914 'move' _iterator[127905](127912 call _getIterator d1))
      Defer
      {
        {
          (127930 call _freeIterator _iterator[127905])
        }
      }
      { scopeless type
        (127919 'move' _indexOfInterest[127904](127916 call iteratorIndex _iterator[127905]))
      }
      ForLoop[127906]
      {
        unknown idx[127923] "index var" "insert auto destroy"
        (127925 'move' idx[127923] _indexOfInterest[127904])
        { scopeless
          if(127899 call _cond_test(127894 call !(127893 call(127888 call . d2 c"contains") idx)))
          {
            { scopeless
              (127897 return 0)
            }
          }
        }
        label _continueLabel[127909]
        _indexOfInterest[127904]
        _iterator[127905]
      }
      label _breakLabel[127910]
    }
    (127938 return 1)
  }
  where {
    (127846 call &&(127841 call isAssociativeDom d1)(127845 call isAssociativeDom d2))
  }
  function !=[127949](arg d1[127946] :
  _domain, arg d2[127952] :
  _domain) : _unknown[51] "inline"
  {
    if(127978 call _cond_test(127973 call ==(127966 call . d1 c"_value")(127970 call . d2 c"_value")))
    {
      { scopeless
        (127976 return 0)
      }
    }
    if(127997 call _cond_test(127992 call !=(127985 call . d1 c"size")(127989 call . d2 c"size")))
    {
      { scopeless
        (127995 return 1)
      }
    }
    {
      unknown _indexOfInterest[128021] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128022] "expr temp" "temp"
      (128031 'move' _iterator[128022](128029 call _getIterator d1))
      Defer
      {
        {
          (128047 call _freeIterator _iterator[128022])
        }
      }
      { scopeless type
        (128036 'move' _indexOfInterest[128021](128033 call iteratorIndex _iterator[128022]))
      }
      ForLoop[128023]
      {
        unknown idx[128040] "index var" "insert auto destroy"
        (128042 'move' idx[128040] _indexOfInterest[128021])
        { scopeless
          if(128016 call _cond_test(128011 call !(128010 call(128005 call . d2 c"contains") idx)))
          {
            { scopeless
              (128014 return 1)
            }
          }
        }
        label _continueLabel[128026]
        _indexOfInterest[128021]
        _iterator[128022]
      }
      label _breakLabel[128027]
    }
    (128055 return 0)
  }
  where {
    (127963 call &&(127958 call isAssociativeDom d1)(127962 call isAssociativeDom d2))
  }
  function ==[128066](arg d1[128063] :
  _domain, arg d2[128069] :
  _domain) : _unknown[51] "inline"
  {
    if(128095 call _cond_test(128090 call ==(128083 call . d1 c"_value")(128087 call . d2 c"_value")))
    {
      { scopeless
        (128093 return 1)
      }
    }
    if(128114 call _cond_test(128109 call !=(128102 call . d1 c"size")(128106 call . d2 c"size")))
    {
      { scopeless
        (128112 return 0)
      }
    }
    if(128138 call _cond_test(128133 call !=(128123 call .(128120 call . d1 c"_value") c"parentDom")(128130 call .(128127 call . d2 c"_value") c"parentDom")))
    {
      { scopeless
        (128136 return 0)
      }
    }
    {
      unknown _indexOfInterest[128162] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128163] "expr temp" "temp"
      (128172 'move' _iterator[128163](128170 call _getIterator d1))
      Defer
      {
        {
          (128188 call _freeIterator _iterator[128163])
        }
      }
      { scopeless type
        (128177 'move' _indexOfInterest[128162](128174 call iteratorIndex _iterator[128163]))
      }
      ForLoop[128164]
      {
        unknown idx[128181] "index var" "insert auto destroy"
        (128183 'move' idx[128181] _indexOfInterest[128162])
        { scopeless
          if(128157 call _cond_test(128152 call !(128151 call(128146 call . d2 c"contains") idx)))
          {
            { scopeless
              (128155 return 0)
            }
          }
        }
        label _continueLabel[128167]
        _indexOfInterest[128162]
        _iterator[128163]
      }
      label _breakLabel[128168]
    }
    (128196 return 1)
  }
  where {
    (128080 call &&(128075 call isSparseDom d1)(128079 call isSparseDom d2))
  }
  function !=[128207](arg d1[128204] :
  _domain, arg d2[128210] :
  _domain) : _unknown[51] "inline"
  {
    if(128236 call _cond_test(128231 call ==(128224 call . d1 c"_value")(128228 call . d2 c"_value")))
    {
      { scopeless
        (128234 return 0)
      }
    }
    if(128255 call _cond_test(128250 call !=(128243 call . d1 c"size")(128247 call . d2 c"size")))
    {
      { scopeless
        (128253 return 1)
      }
    }
    if(128279 call _cond_test(128274 call !=(128264 call .(128261 call . d1 c"_value") c"parentDom")(128271 call .(128268 call . d2 c"_value") c"parentDom")))
    {
      { scopeless
        (128277 return 1)
      }
    }
    {
      unknown _indexOfInterest[128303] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[128304] "expr temp" "temp"
      (128313 'move' _iterator[128304](128311 call _getIterator d1))
      Defer
      {
        {
          (128329 call _freeIterator _iterator[128304])
        }
      }
      { scopeless type
        (128318 'move' _indexOfInterest[128303](128315 call iteratorIndex _iterator[128304]))
      }
      ForLoop[128305]
      {
        unknown idx[128322] "index var" "insert auto destroy"
        (128324 'move' idx[128322] _indexOfInterest[128303])
        { scopeless
          if(128298 call _cond_test(128293 call !(128292 call(128287 call . d2 c"contains") idx)))
          {
            { scopeless
              (128296 return 1)
            }
          }
        }
        label _continueLabel[128308]
        _indexOfInterest[128303]
        _iterator[128304]
      }
      label _breakLabel[128309]
    }
    (128337 return 0)
  }
  where {
    (128221 call &&(128216 call isSparseDom d1)(128220 call isSparseDom d2))
  }
  function ==[128348](arg d1[128345] :
  _domain, arg d2[128351] :
  _domain) param : _unknown[51] "inline"
  {
    (128355 return 0)
  }
  function !=[128366](arg d1[128363] :
  _domain, arg d2[128369] :
  _domain) param : _unknown[51] "inline"
  {
    (128373 return 1)
  }
  function shouldReturnRvalueByConstRef[128382](arg t[128380]:_any[178](?)) param : _unknown[51] "no doc"
  {
    (128385 return 1)
  }
  function shouldReturnRvalueByValue[128394](arg t[128392]:_any[178](?)) param : _unknown[51] "no doc"
  {
    if(128402 call _cond_test(128397 call ! PODValAccess))
    {
      { scopeless
        (128400 return 0)
      }
    }
    if(128415 call _cond_test(128411 call isPODType t))
    {
      { scopeless
        (128413 return 1)
      }
    }
    (128421 return 0)
  }
  type _array[133600](?) unknown _pid[128427] int[13] unknown _instance[128431] "alias scope from this" "owned" unknown _unowned[128436] bool[10] function _array[133600](?).chpl__serialize[128442](arg _mt[133604]:_MT[238], arg this[133602]:_array[133600](?)) : _unknown[51] "method" "primary method"
  {
    (128458 return(128457 call(128453 call . _instance c"chpl__serialize")))
  }
  where {
    (128451 call(128447 call . _instance c"chpl__rvfMe"))
  } function _array[133600](?).chpl__deserialize[128468](arg _mt[133608]:_MT[238], arg this[133606]:_array[133600](?), arg data[128466]:_any[178](?)) : _unknown[51] "method" "primary method" "no copy return" "no doc"
  {
    { scopeless
      unknown arrinst[128484](128483 call(128478 call .(128477 call _to_borrowed(128475 'static field type' this "_instance")) c"chpl__deserialize") data)
      (128487 'end of statement')
    }
    (128497 return(128489 'new'(128496 call _array nullPid arrinst(_unowned = 1))))
  } function _array[133600](?).chpl__promotionType[128503](arg _mt[133612]:_MT[238], arg this[133610]:_array[133600](?)) type : _unknown[51] "method" "primary method"
  {
    (128509 return(128506 call . _value c"eltType"))
  } function _array[133600](?)._value[128516](arg _mt[133616]:_MT[238], arg this[133614]:_array[133600](?)) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    if(128535 call _cond_test(128521 call _isPrivatized _instance))
    {
      (128528 return(128527 call chpl_getPrivatizedCopy(128524 'typeof' _instance) _pid))
    }
    {
      (128532 return _instance)
    }
  } function _array[133600](?).chpl_forwarding_expr6__value[128549](arg _mt[133620]:_MT[238], arg this[133618]:_array[133600](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (128551 return _value)
  } function _array[133600](?).deinit[128557](arg _mt[133624]:_MT[238], arg this[133622]:_array[133600](?)) : _unknown[51] "destructor" "method" "primary method" "no doc"
  {
    (128562 call _do_destroy_array this)
  } function _array[133600](?).eltType[128569](arg _mt[133628]:_MT[238], arg this[133626]:_array[133600](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (128575 return(128572 call . _value c"eltType"))
    }
  } function _array[133600](?).idxType[128582](arg _mt[133632]:_MT[238], arg this[133630]:_array[133600](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (128588 return(128585 call . _value c"idxType"))
    }
  } function _array[133600](?)._dom[128595](arg _mt[133636]:_MT[238], arg this[133634]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    { scopeless
      (128604 return(128603 call _getDomain(128599 call . _value c"dom")))
    }
  } function _array[133600](?).rank[128611](arg _mt[133640]:_MT[238], arg this[133638]:_array[133600](?)) param : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (128620 return(128617 call .(128614 call . this c"_dom") c"rank"))
    }
  } function _array[133600](?).indices[128627](arg _mt[133644]:_MT[238], arg this[133642]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens" "return not owned"
  {
    { scopeless
      (128630 return _dom)
    }
  } function _array[133600](?).checkAccess[128639](arg _mt[133648]:_MT[238], arg this[133646]:_array[133600](?), arg indices[128637]:_any[178](?), arg value[128641]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc"
  {
    if(129162 call _cond_test(128646 call isRectangularArr this))
    {
      if(129157 call _cond_test(128656 call !(128655 call(128650 call . value c"dsiBoundsCheck") indices)))
      {
        if(129152 call _cond_test(128660 call == rank 1))
        {
          (128729 call halt "array index out of bounds\n" "note: index was "(128701 call indices 0) " but array bounds are "(128728 call(128723 call .(128720 call . value c"dom") c"dsiDim") 0))
        }
        {
          { scopeless
            unknown istr[128749] ""
            (128752 'end of statement')
          }
          { scopeless
            unknown bstr[128771] ""
            (128774 'end of statement')
          }
          {
            unknown i[128830] 0
            unknown tmp[128831] "maybe param" "temp"
            (128843 'move' tmp[128831](128841 call chpl_compute_low_param_loop_bound 0(128778 call - rank 1)))
            unknown tmp[128832] "maybe param" "temp"
            (128853 'move' tmp[128832](128851 call chpl_compute_high_param_loop_bound 0(128848 call - rank 1)))
            unknown tmp[128833] "maybe param" "temp"
            (128856 'move' tmp[128833] 1)
            ParamForLoop[128858]
            { i[128830] tmp[128831] tmp[128832] tmp[128833]
              {
                if(128797 call _cond_test(128784 call != i 0))
                {
                  (128788 call += istr ", ")
                  (128794 call += bstr ", ")
                }
                (128810 call += istr(128808 call _cast string[26](128806 call indices i)))
                (128827 call += bstr(128825 call _cast string[26](128823 call(128818 call .(128815 call . value c"dom") c"dsiDim") i)))
              }
            }
            label _unused_continueLabel[128835]
            label _breakLabel[128834]
          }
          { scopeless
            unknown dimstr[128884] ""
            (128887 'end of statement')
          }
          {
            unknown i[129038] 0
            unknown tmp[129039] "maybe param" "temp"
            (129051 'move' tmp[129039](129049 call chpl_compute_low_param_loop_bound 0(128891 call - rank 1)))
            unknown tmp[129040] "maybe param" "temp"
            (129061 'move' tmp[129040](129059 call chpl_compute_high_param_loop_bound 0(129056 call - rank 1)))
            unknown tmp[129041] "maybe param" "temp"
            (129064 'move' tmp[129041] 1)
            ParamForLoop[129066]
            { i[129038] tmp[129039] tmp[129040] tmp[129041]
              {
                if(129033 call _cond_test(128916 call !(128915 call(128907 call .(128904 call(128899 call .(128896 call . value c"dom") c"dsiDim") i) c"boundsCheck")(128913 call indices i))))
                {
                  if(129028 call _cond_test(128936 call == dimstr ""))
                  {
                    (129024 call = dimstr(129022 call +(129007 call +(128988 call +(128979 call +(128960 call + "out of bounds in dimension "(128958 call _cast string[26] i)) " because index ")(128986 call _cast string[26](128984 call indices i))) " is not in ")(129020 call _cast string[26](129018 call(129013 call .(129010 call . value c"dom") c"dsiDim") i))))
                  }
                }
              }
            }
            label _unused_continueLabel[129043]
            label _breakLabel[129042]
          }
          (129150 call halt "array index out of bounds\n" "note: index was (" istr ") " "but array bounds are (" bstr ")\n" "note: " dimstr)
        }
      }
    }
  } function _array[133600](?).checkSlice[129175](arg _mt[133652]:_MT[238], arg this[133650]:_array[133600](?), arg d[129172] :
  _domain, arg value[129177]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc"
  {
    (129190 call checkSlice(129186 'expand_tuple'(129185 call(129181 call . d c"dsiDims")))(value = value))
  } function _array[133600](?).checkSlice[129201](arg _mt[133656]:_MT[238], arg this[133654]:_array[133600](?), arg ranges[129198]:_any[178](?) ..., arg value[129203]:_any[178](?)) : _unknown[51] "always propagate line file info" "insert line file info" "method" "primary method" "no doc"
  {
    if(129705 call _cond_test(129212 call isRectangularArr this))
    {
      { scopeless
        unknown ok[129214] 1
        (129217 'end of statement')
      }
      {
        unknown i[129259] 0
        unknown tmp[129260] "maybe param" "temp"
        (129272 'move' tmp[129260](129270 call chpl_compute_low_param_loop_bound 0(129222 call - rank 1)))
        unknown tmp[129261] "maybe param" "temp"
        (129282 'move' tmp[129261](129280 call chpl_compute_high_param_loop_bound 0(129277 call - rank 1)))
        unknown tmp[129262] "maybe param" "temp"
        (129285 'move' tmp[129262] 1)
        ParamForLoop[129287]
        { i[129259] tmp[129260] tmp[129261] tmp[129262]
          {
            {
              unknown tmp[129247] "temp"
              (129250 'move' tmp[129247](129249 'addr of' ok))
              (129255 call = tmp[129247](129252 call && tmp[129247](129245 call(129237 call .(129236 call(129231 call .(129228 call . value c"dom") c"dsiDim") i) c"boundsCheck")(129243 call ranges i))))
            }
          }
        }
        label _unused_continueLabel[129264]
        label _breakLabel[129263]
      }
      if(129701 call _cond_test(129298 call == ok 0))
      {
        if(129696 call _cond_test(129302 call == rank 1))
        {
          (129355 call halt "array slice out of bounds\n" "note: slice index was "(129343 call ranges 0) " but array bounds are "(129354 call(129349 call .(129346 call . value c"dom") c"dsiDim") 0))
        }
        {
          { scopeless
            unknown istr[129375] ""
            (129378 'end of statement')
          }
          { scopeless
            unknown bstr[129397] ""
            (129400 'end of statement')
          }
          {
            unknown i[129456] 0
            unknown tmp[129457] "maybe param" "temp"
            (129469 'move' tmp[129457](129467 call chpl_compute_low_param_loop_bound 0(129404 call - rank 1)))
            unknown tmp[129458] "maybe param" "temp"
            (129479 'move' tmp[129458](129477 call chpl_compute_high_param_loop_bound 0(129474 call - rank 1)))
            unknown tmp[129459] "maybe param" "temp"
            (129482 'move' tmp[129459] 1)
            ParamForLoop[129484]
            { i[129456] tmp[129457] tmp[129458] tmp[129459]
              {
                if(129423 call _cond_test(129410 call != i 0))
                {
                  (129414 call += istr ", ")
                  (129420 call += bstr ", ")
                }
                (129436 call += istr(129434 call _cast string[26](129432 call ranges i)))
                (129453 call += bstr(129451 call _cast string[26](129449 call(129444 call .(129441 call . value c"dom") c"dsiDim") i)))
              }
            }
            label _unused_continueLabel[129461]
            label _breakLabel[129460]
          }
          { scopeless
            unknown dimstr[129510] ""
            (129513 'end of statement')
          }
          {
            unknown i[129630] 0
            unknown tmp[129631] "maybe param" "temp"
            (129643 'move' tmp[129631](129641 call chpl_compute_low_param_loop_bound 0(129517 call - rank 1)))
            unknown tmp[129632] "maybe param" "temp"
            (129653 'move' tmp[129632](129651 call chpl_compute_high_param_loop_bound 0(129648 call - rank 1)))
            unknown tmp[129633] "maybe param" "temp"
            (129656 'move' tmp[129633] 1)
            ParamForLoop[129658]
            { i[129630] tmp[129631] tmp[129632] tmp[129633]
              {
                if(129625 call _cond_test(129540 call !(129539 call(129531 call .(129530 call(129525 call .(129522 call . value c"dom") c"dsiDim") i) c"boundsCheck")(129537 call ranges i))))
                {
                  if(129620 call _cond_test(129560 call == dimstr ""))
                  {
                    (129616 call = dimstr(129614 call +(129599 call +(129596 call +(129587 call +(129568 call + "out of bounds in dimension "(129566 call _cast string[26] i)) " because slice index ")(129594 call _cast string[26](129592 call ranges i))) " is not in ")(129612 call _cast string[26](129610 call(129605 call .(129602 call . value c"dom") c"dsiDim") i))))
                  }
                }
              }
            }
            label _unused_continueLabel[129635]
            label _breakLabel[129634]
          }
          (129694 call halt "array slice out of bounds\n" "note: slice index was (" istr ") " "but array bounds are (" bstr ")\n" "note: " dimstr)
        }
      }
    }
  }
  where {
    (129208 call chpl__isTupleOfRanges ranges)
  } function _array[133600](?).this[129728](arg _mt[133660]:_MT[238], ref arg this[133658]:_array[133600](?), arg i[129725] :
  (129723 call * rank(129720 call .(129717 call . _value c"dom") c"idxType"))) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    { scopeless
      const value[129731] "const" _value
      (129734 'end of statement')
    }
    if(129744 call _cond_test boundsChecking)
    {
      { scopeless
        (129742 call checkAccess i(value = value))
      }
    }
    if(129780 call _cond_test(129757 call ||(129752 call isRectangularArr this)(129756 call isSparseArr this)))
    {
      { scopeless
        (129766 return(129765 call(129760 call . value c"dsiAccess") i))
      }
    }
    {
      { scopeless
        (129778 return(129777 call(129769 call . value c"dsiAccess")(129775 call i 0)))
      }
    }
  } function _array[133600](?).this[129803](arg _mt[133664]:_MT[238], const arg this[133662]:_array[133600](?), arg i[129800] :
  (129798 call * rank(129795 call .(129792 call . _value c"dom") c"idxType"))) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    { scopeless
      const value[129813] "const" _value
      (129816 'end of statement')
    }
    if(129826 call _cond_test boundsChecking)
    {
      { scopeless
        (129824 call checkAccess i(value = value))
      }
    }
    if(129862 call _cond_test(129839 call ||(129834 call isRectangularArr this)(129838 call isSparseArr this)))
    {
      { scopeless
        (129848 return(129847 call(129842 call . value c"dsiAccess") i))
      }
    }
    {
      { scopeless
        (129860 return(129859 call(129851 call . value c"dsiAccess")(129857 call i 0)))
      }
    }
  }
  where {
    (129811 call shouldReturnRvalueByValue(129807 call . _value c"eltType"))
  } function _array[133600](?).this[129886](arg _mt[133668]:_MT[238], const arg this[133666]:_array[133600](?), arg i[129883] :
  (129881 call * rank(129878 call .(129875 call . _value c"dom") c"idxType"))) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    { scopeless
      const value[129896] "const" _value
      (129899 'end of statement')
    }
    if(129909 call _cond_test boundsChecking)
    {
      { scopeless
        (129907 call checkAccess i(value = value))
      }
    }
    if(129945 call _cond_test(129922 call ||(129917 call isRectangularArr this)(129921 call isSparseArr this)))
    {
      { scopeless
        (129931 return(129930 call(129925 call . value c"dsiAccess") i))
      }
    }
    {
      { scopeless
        (129943 return(129942 call(129934 call . value c"dsiAccess")(129940 call i 0)))
      }
    }
  }
  where {
    (129894 call shouldReturnRvalueByConstRef(129890 call . _value c"eltType"))
  } function _array[133600](?).this[129968](arg _mt[133672]:_MT[238], ref arg this[133670]:_array[133600](?), arg i[129964] ... :
  (129960 call .(129957 call . _value c"dom") c"idxType")) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    { scopeless
      (129974 return(129973 call this i))
    }
  } function _array[133600](?).this[129993](arg _mt[133676]:_MT[238], const arg this[133674]:_array[133600](?), arg i[129989] ... :
  (129985 call .(129982 call . _value c"dom") c"idxType")) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    { scopeless
      (130006 return(130005 call this i))
    }
  }
  where {
    (130001 call shouldReturnRvalueByValue(129997 call . _value c"eltType"))
  } function _array[133600](?).this[130026](arg _mt[133680]:_MT[238], const arg this[133678]:_array[133600](?), arg i[130022] ... :
  (130018 call .(130015 call . _value c"dom") c"idxType")) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    { scopeless
      (130039 return(130038 call this i))
    }
  }
  where {
    (130034 call shouldReturnRvalueByConstRef(130030 call . _value c"eltType"))
  } function _array[133600](?).localAccess[130060](arg _mt[133684]:_MT[238], ref arg this[133682]:_array[133600](?), arg i[130057] :
  (130055 call * rank(130052 call .(130049 call . _value c"dom") c"idxType"))) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    { scopeless
      const value[130063] "const" _value
      (130066 'end of statement')
    }
    if(130076 call _cond_test boundsChecking)
    {
      { scopeless
        (130074 call checkAccess i(value = value))
      }
    }
    if(130114 call _cond_test(130089 call ||(130084 call isRectangularArr this)(130088 call isSparseArr this)))
    {
      { scopeless
        (130100 return(130099 call(130094 call . value c"dsiLocalAccess") i))
      }
    }
    {
      { scopeless
        (130112 return(130111 call(130103 call . value c"dsiLocalAccess")(130109 call i 0)))
      }
    }
  } function _array[133600](?).localAccess[130137](arg _mt[133688]:_MT[238], const arg this[133686]:_array[133600](?), arg i[130134] :
  (130132 call * rank(130129 call .(130126 call . _value c"dom") c"idxType"))) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    { scopeless
      const value[130147] "const" _value
      (130150 'end of statement')
    }
    if(130160 call _cond_test boundsChecking)
    {
      { scopeless
        (130158 call checkAccess i(value = value))
      }
    }
    if(130196 call _cond_test(130173 call ||(130168 call isRectangularArr this)(130172 call isSparseArr this)))
    {
      { scopeless
        (130182 return(130181 call(130176 call . value c"dsiLocalAccess") i))
      }
    }
    {
      { scopeless
        (130194 return(130193 call(130185 call . value c"dsiLocalAccess")(130191 call i 0)))
      }
    }
  }
  where {
    (130145 call shouldReturnRvalueByValue(130141 call . _value c"eltType"))
  } function _array[133600](?).localAccess[130220](arg _mt[133692]:_MT[238], const arg this[133690]:_array[133600](?), arg i[130217] :
  (130215 call * rank(130212 call .(130209 call . _value c"dom") c"idxType"))) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    { scopeless
      const value[130230] "const" _value
      (130233 'end of statement')
    }
    if(130243 call _cond_test boundsChecking)
    {
      { scopeless
        (130241 call checkAccess i(value = value))
      }
    }
    if(130279 call _cond_test(130256 call ||(130251 call isRectangularArr this)(130255 call isSparseArr this)))
    {
      { scopeless
        (130265 return(130264 call(130259 call . value c"dsiLocalAccess") i))
      }
    }
    {
      { scopeless
        (130277 return(130276 call(130268 call . value c"dsiLocalAccess")(130274 call i 0)))
      }
    }
  }
  where {
    (130228 call shouldReturnRvalueByConstRef(130224 call . _value c"eltType"))
  } function _array[133600](?).localAccess[130302](arg _mt[133696]:_MT[238], ref arg this[133694]:_array[133600](?), arg i[130298] ... :
  (130294 call .(130291 call . _value c"dom") c"idxType")) ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    { scopeless
      (130308 return(130307 call localAccess i))
    }
  } function _array[133600](?).localAccess[130327](arg _mt[133700]:_MT[238], const arg this[133698]:_array[133600](?), arg i[130323] ... :
  (130319 call .(130316 call . _value c"dom") c"idxType")) : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    { scopeless
      (130340 return(130339 call localAccess i))
    }
  }
  where {
    (130335 call shouldReturnRvalueByValue(130331 call . _value c"eltType"))
  } function _array[133600](?).localAccess[130360](arg _mt[133704]:_MT[238], const arg this[133702]:_array[133600](?), arg i[130356] ... :
  (130352 call .(130349 call . _value c"dom") c"idxType")) const ref : _unknown[51] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    { scopeless
      (130373 return(130372 call localAccess i))
    }
  }
  where {
    (130368 call shouldReturnRvalueByConstRef(130364 call . _value c"eltType"))
  } function _array[133600](?).this[130385](arg _mt[133708]:_MT[238], arg this[133706]:_array[133600](?), arg d[130382] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130415 call _cond_test(130392 call !=(130388 call . d c"rank") rank))
    {
      { scopeless
        (130413 call compilerError "slicing an array with a domain of a different rank")
      }
    }
    if(130428 call _cond_test boundsChecking)
    {
      { scopeless
        (130426 call checkSlice d _value)
      }
    }
    { scopeless
      const tmp[130477] "const" "temp"(130474 IfExpr (130443 call(130439 call . _value c"isSliceArrayView")) then
      { scopeless
        (130461 call _build_tuple(130448 call .(130445 call . this c"_value") c"arr")(130457 call .(130452 call . this c"_value") c"_ArrPid"))
      } else
      { scopeless
        (130472 call _build_tuple(130464 call . this c"_value")(130468 call . this c"_pid"))
      } )
      (130484 call _check_tuple_var_decl tmp[130477] 2)
      const arr[130433] "const"(130478 call tmp[130477] 0)
      const arrpid[130435] "const"(130481 call tmp[130477] 1)
      (130489 'end of statement')
    }
    { scopeless
      unknown a[130515](130492 'new'(_chpl_manager = unmanaged[220](?))(130514 call ArrayViewSliceArr(eltType =(130495 call . this c"eltType"))(_DomPid =(130501 call . d c"_pid"))(dom =(130506 call . d c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)))
      (130518 'end of statement')
    }
    (130532 call(130523 call .(130520 call . d c"_value") c"add_arr") a(locking = 1)(addToList = 0))
    (130538 return(130537 call _newArray a))
  } function _array[133600](?).this[130548](arg _mt[133712]:_MT[238], arg this[133710]:_array[133600](?), arg ranges[130545]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130563 call _cond_test boundsChecking)
    {
      { scopeless
        (130561 call checkSlice(130557 'expand_tuple' ranges)(value = _value))
      }
    }
    { scopeless
      unknown d[130574] "no auto destroy"(130573 call _dom(130571 'expand_tuple' ranges))
      (130577 'end of statement')
    }
    (130588 call =(130584 call .(130579 call . d c"_value") c"_free_when_no_arrs") 1)
    { scopeless
      const tmp[130633] "const" "temp"(130630 IfExpr (130601 call(130597 call . _value c"isSliceArrayView")) then
      { scopeless
        (130617 call _build_tuple(130606 call .(130603 call . this c"_value") c"arr")(130613 call .(130610 call . this c"_value") c"_ArrPid"))
      } else
      { scopeless
        (130628 call _build_tuple(130620 call . this c"_value")(130624 call . this c"_pid"))
      } )
      (130640 call _check_tuple_var_decl tmp[130633] 2)
      const arr[130591] "const"(130634 call tmp[130633] 0)
      const arrpid[130593] "const"(130637 call tmp[130633] 1)
      (130645 'end of statement')
    }
    { scopeless
      unknown a[130671](130648 'new'(_chpl_manager = unmanaged[220](?))(130670 call ArrayViewSliceArr(eltType =(130651 call . this c"eltType"))(_DomPid =(130657 call . d c"_pid"))(dom =(130662 call . d c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)))
      (130674 'end of statement')
    }
    (130688 call(130679 call .(130676 call . d c"_value") c"add_arr") a(locking = 0)(addToList = 0))
    (130694 return(130693 call _newArray a))
  }
  where {
    (130553 call chpl__isTupleOfRanges ranges)
  } function _array[133600](?).this[130705](arg _mt[133716]:_MT[238], arg this[133714]:_array[133600](?), arg args[130702]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130724 call _cond_test boundsChecking)
    {
      { scopeless
        (130722 call checkRankChange args)
      }
    }
    { scopeless
      const rcdom[130738] "const"(130737 call(130731 call . this c"_dom")(130735 'expand_tuple' args))
      (130741 'end of statement')
    }
    { scopeless
      const tmp[130758] "const" "temp"(130756 call _build_tuple(130748 call . this c"_value")(130752 call . this c"_pid"))
      (130765 call _check_tuple_var_decl tmp[130758] 2)
      const arr[130742] "const"(130759 call tmp[130758] 0)
      const arrpid[130744] "const"(130762 call tmp[130758] 1)
      (130770 'end of statement')
    }
    { scopeless
      unknown a[130812](130773 'new'(_chpl_manager = unmanaged[220](?))(130811 call ArrayViewRankChangeArr(eltType =(130776 call . this c"eltType"))(_DomPid =(130782 call . rcdom c"_pid"))(dom =(130787 call . rcdom c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)(collapsedDim =(130799 call .(130796 call . rcdom c"_value") c"collapsedDim"))(idx =(130807 call .(130804 call . rcdom c"_value") c"idx"))))
      (130815 'end of statement')
    }
    (130827 call(130820 call .(130817 call . rcdom c"_value") c"add_arr") a(locking = 0))
    (130833 return(130832 call _newArray a))
  }
  where {
    (130717 call _validRankChangeArgs args(130714 call .(130711 call . _value c"dom") c"idxType"))
  } function _array[133600](?).checkRankChange[130842](arg _mt[133720]:_MT[238], arg this[133718]:_array[133600](?), arg args[130840]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    {
      unknown i[130923] 0
      unknown tmp[130924] "maybe param" "temp"
      (130936 'move' tmp[130924](130934 call chpl_compute_low_param_loop_bound 0(130850 call -(130846 call . args c"size") 1)))
      unknown tmp[130925] "maybe param" "temp"
      (130949 'move' tmp[130925](130947 call chpl_compute_high_param_loop_bound 0(130941 call -(130943 call . args c"size") 1)))
      unknown tmp[130926] "maybe param" "temp"
      (130952 'move' tmp[130926] 1)
      ParamForLoop[130954]
      { i[130923] tmp[130924] tmp[130925] tmp[130926]
        { scopeless
          if(130918 call _cond_test(130873 call !(130872 call(130864 call .(130863 call(130858 call .(130855 call . _value c"dom") c"dsiDim") i) c"boundsCheck")(130870 call args i))))
          {
            { scopeless
              (130916 call halt "array slice out of bounds in dimension " i ": "(130915 call args i))
            }
          }
        }
      }
      label _unused_continueLabel[130928]
      label _breakLabel[130927]
    }
  } function _array[133600](?).localSlice[130972](arg _mt[133724]:_MT[238], arg this[133722]:_array[133600](?), arg r[130969]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(130995 call _cond_test boundsChecking)
    {
      { scopeless
        (130993 call checkSlice(130989 'expand_tuple' r)(value = _value))
      }
    }
    { scopeless
      unknown dom[131006](131005 call _dom(131003 'expand_tuple' r))
      (131009 'end of statement')
    }
    (131014 return(131013 call chpl__localSliceDefaultArithArrHelp dom))
  }
  where {
    (130984 call &&(130979 call isSubtype(130976 'typeof' _value) DefaultRectangularArr)(130983 call chpl__isTupleOfRanges r))
  } function _array[133600](?).localSlice[131025](arg _mt[133728]:_MT[238], arg this[133726]:_array[133600](?), arg d[131022] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(131047 call _cond_test boundsChecking)
    {
      { scopeless
        (131045 call checkSlice(131041 'expand_tuple'(131040 call(131036 call . d c"getIndices")))(value = _value))
      }
    }
    (131057 return(131056 call chpl__localSliceDefaultArithArrHelp d))
  }
  where {
    (131032 call isSubtype(131029 'typeof' _value) DefaultRectangularArr)
  } function _array[133600](?).chpl__localSliceDefaultArithArrHelp[131068](arg _mt[133732]:_MT[238], arg this[133730]:_array[133600](?), arg d[131065] :
  _domain) : _unknown[51] "method" "primary method" "no copy return"
  {
    if(131108 call _cond_test(131075 call !=(131072 call chpl_localeID_to_locale(131071 '_wide_get_locale' _value)) here))
    {
      { scopeless
        (131106 call halt "Attempting to take a local slice of an array on locale "(131100 '_wide_get_node' _value) " from locale "(131103 call . here c"id"))
      }
    }
    (131118 return(131117 call this d))
  } function _array[133600](?).localSlice[131128](arg _mt[133736]:_MT[238], arg this[133734]:_array[133600](?), arg r[131125]:_any[178](?) ...) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(131153 call _cond_test boundsChecking)
    {
      { scopeless
        (131151 call checkSlice(131147 'expand_tuple' r)(value = _value))
      }
    }
    (131166 return(131165 call(131160 call . _value c"dsiLocalSlice") r))
  }
  where {
    (131142 call &&(131133 call chpl__isTupleOfRanges r)(131140 call !(131139 call isSubtype(131136 'typeof' _value) DefaultRectangularArr)))
  } function _array[133600](?).localSlice[131177](arg _mt[133740]:_MT[238], arg this[133738]:_array[133600](?), arg d[131174] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    (131189 return(131188 call localSlice(131186 'expand_tuple'(131185 call(131181 call . d c"getIndices")))))
  } function _array[133600](?).these[131196](arg _mt[133744]:_MT[238], arg this[133742]:_array[133600](?)) ref : _unknown[51] "iterator fn" "method" "primary method" "reference to const when const this"
  {
    {
      unknown _indexOfInterest[131209] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131210] "expr temp" "temp"
      (131219 'move' _iterator[131210](131217 call _getIterator(131204 call(131200 call . _value c"these"))))
      Defer
      {
        {
          (131236 call _freeIterator _iterator[131210])
        }
      }
      { scopeless type
        (131225 'move' _indexOfInterest[131209](131222 call iteratorIndex _iterator[131210]))
      }
      ForLoop[131211]
      {
        unknown i[131229] "index var" "insert auto destroy"
        (131231 'move' i[131229] _indexOfInterest[131209])
        {
          (131206 yield i)
        }
        label _continueLabel[131214]
        _indexOfInterest[131209]
        _iterator[131210]
      }
      label _breakLabel[131215]
    }
  } function _array[133600](?).these[131252](arg _mt[133748]:_MT[238], arg this[133746]:_array[133600](?), param arg tag[131249] :
  iterKind) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this"
  {
    {
      unknown _indexOfInterest[131281] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131282] "expr temp" "temp"
      (131291 'move' _iterator[131282](131289 call _getIterator(131277 call(131272 call . _value c"these") tag)))
      Defer
      {
        {
          (131308 call _freeIterator _iterator[131282])
        }
      }
      { scopeless type
        (131297 'move' _indexOfInterest[131281](131294 call iteratorIndex _iterator[131282]))
      }
      ForLoop[131283]
      {
        unknown i[131301] "index var" "insert auto destroy"
        (131303 'move' i[131301] _indexOfInterest[131281])
        { scopeless
          (131279 yield i)
        }
        label _continueLabel[131286]
        _indexOfInterest[131281]
        _iterator[131282]
      }
      label _breakLabel[131287]
    }
  }
  where {
    (131268 call &&(131259 call == tag(131256 call . iterKind c"standalone"))(131267 'method call resolves' _value "these"(tag = tag)))
  } function _array[133600](?).these[131325](arg _mt[133752]:_MT[238], arg this[133750]:_array[133600](?), param arg tag[131322] :
  iterKind) : _unknown[51] "iterator fn" "method" "primary method" "no doc"
  {
    {
      unknown _indexOfInterest[131345] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131346] "expr temp" "temp"
      (131355 'move' _iterator[131346](131353 call _getIterator(131341 call(131336 call . _value c"these") tag)))
      Defer
      {
        {
          (131372 call _freeIterator _iterator[131346])
        }
      }
      { scopeless type
        (131361 'move' _indexOfInterest[131345](131358 call iteratorIndex _iterator[131346]))
      }
      ForLoop[131347]
      {
        unknown followThis[131365] "index var" "insert auto destroy"
        (131367 'move' followThis[131365] _indexOfInterest[131345])
        { scopeless
          (131343 yield followThis)
        }
        label _continueLabel[131350]
        _indexOfInterest[131345]
        _iterator[131346]
      }
      label _breakLabel[131351]
    }
  }
  where {
    (131332 call == tag(131329 call . iterKind c"leader"))
  } function _array[133600](?).these[131389](arg _mt[133756]:_MT[238], arg this[133754]:_array[133600](?), param arg tag[131386] :
  iterKind, arg followThis[131391]:_any[178](?), param arg fast[131395] :
  bool[10] =
  0) ref : _unknown[51] "iterator fn" "method" "primary method" "no doc" "reference to const when const this"
  {
    if(131513 call _cond_test(131415 'method call resolves' _value "these"(tag = tag) followThis(fast = fast)))
    {
      {
        unknown _indexOfInterest[131431] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131432] "expr temp" "temp"
        (131441 'move' _iterator[131432](131439 call _getIterator(131427 call(131418 call . _value c"these")(tag = tag) followThis(fast = fast))))
        Defer
        {
          {
            (131458 call _freeIterator _iterator[131432])
          }
        }
        { scopeless type
          (131447 'move' _indexOfInterest[131431](131444 call iteratorIndex _iterator[131432]))
        }
        ForLoop[131433]
        {
          unknown i[131451] "index var" "insert auto destroy"
          (131453 'move' i[131451] _indexOfInterest[131431])
          { scopeless
            (131429 yield i)
          }
          label _continueLabel[131436]
          _indexOfInterest[131431]
          _iterator[131432]
        }
        label _breakLabel[131437]
      }
    }
    {
      {
        unknown _indexOfInterest[131478] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[131479] "expr temp" "temp"
        (131488 'move' _iterator[131479](131486 call _getIterator(131474 call(131468 call . _value c"these") tag followThis)))
        Defer
        {
          {
            (131505 call _freeIterator _iterator[131479])
          }
        }
        { scopeless type
          (131494 'move' _indexOfInterest[131478](131491 call iteratorIndex _iterator[131479]))
        }
        ForLoop[131480]
        {
          unknown i[131498] "index var" "insert auto destroy"
          (131500 'move' i[131498] _indexOfInterest[131478])
          { scopeless
            (131476 yield i)
          }
          label _continueLabel[131483]
          _indexOfInterest[131478]
          _iterator[131479]
        }
        label _breakLabel[131484]
      }
    }
  }
  where {
    (131404 call == tag(131401 call . iterKind c"follower"))
  } function _array[133600](?).numElements[131523](arg _mt[133760]:_MT[238], arg this[133758]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (131563 call compilerWarning(131560 call + "'array.numElements' is deprecated - " "please use 'array.size' instead"))
    (131567 return size)
  } function _array[133600](?).size[131573](arg _mt[133764]:_MT[238], arg this[133762]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    { scopeless
      (131582 return(131579 call .(131576 call . _value c"dom") c"dsiNumIndices"))
    }
  } function _array[133600](?).chpl_checkArrArgDoms[131593](arg _mt[133768]:_MT[238], arg this[133766]:_array[133600](?), arg formalDom[131590] :
  _domain, param arg runtimeChecks[131596] :
  bool[10]) : _unknown[51] "inline" "method" "primary method"
  {
    if(131675 call _cond_test(131610 call !=(131600 call . formalDom c"rank")(131607 call .(131604 call . this c"_dom") c"rank")))
    {
      { scopeless
        (131673 call compilerError(131668 call +(131656 call +(131637 call + "Rank mismatch passing array argument: expected "(131635 call _cast string[26](131631 call . formalDom c"rank"))) " but got ")(131666 call _cast string[26](131662 call .(131659 call . this c"_dom") c"rank")))(errorDepth = 2))
      }
    }
    if(131819 call _cond_test(131691 call !=(131688 'typeof'(131685 call .(131682 call . formalDom c"dist") c"_value"))(131690 'to unmanaged class from unknown' DefaultDist)))
    {
      if(131725 call _cond_test(131700 call !=(131694 'typeof' formalDom)(131699 'typeof'(131696 call . this c"_dom"))))
      {
        { scopeless
          (131723 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
        }
      }
      if(131814 call _cond_test(131745 call && runtimeChecks(131743 call !=(131733 call . formalDom c"dist")(131740 call .(131737 call . this c"_dom") c"dist"))))
      {
        { scopeless
          (131812 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: "(131784 call . formalDom c"dist") "\n" "  Actual domain map is: "(131809 call .(131806 call . this c"_dom") c"dist"))
        }
      }
    }
    if(131894 call _cond_test(131831 call && runtimeChecks(131829 call != formalDom(131826 call . this c"_dom"))))
    {
      { scopeless
        (131892 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom "\n" "  Actual domain is: "(131889 call . this c"_dom"))
      }
    }
  } function _array[133600](?).reindex[131907](arg _mt[133772]:_MT[238], arg this[133770]:_array[133600](?), arg newDomain[131904] :
  _domain) : _unknown[51] "inline" "method" "primary method" "fn returns aliasing array"
  {
    { scopeless
      (131932 return(131931 call reindex(131929 'expand_tuple'(131928 call(131924 call . newDomain c"dims")))))
    }
  }
  where {
    (131920 call &&(131915 call isRectangularDom(131911 call . this c"_dom"))(131919 call isRectangularDom newDomain))
  } function _array[133600](?).reindex[131944](arg _mt[133776]:_MT[238], arg this[133774]:_array[133600](?), arg newDims[131941]:_any[178](?) ...) : _unknown[51] "method" "primary method" "fn returns aliasing array"
  {
    {
      unknown i[131998] 0
      unknown tmp[131999] "maybe param" "temp"
      (132011 'move' tmp[131999](132009 call chpl_compute_low_param_loop_bound 0(131959 call -(131955 call . newDims c"size") 1)))
      unknown tmp[132000] "maybe param" "temp"
      (132024 'move' tmp[132000](132022 call chpl_compute_high_param_loop_bound 0(132016 call -(132018 call . newDims c"size") 1)))
      unknown tmp[132001] "maybe param" "temp"
      (132027 'move' tmp[132001] 1)
      ParamForLoop[132029]
      { i[131998] tmp[131999] tmp[132000] tmp[132001]
        { scopeless
          if(131993 call _cond_test(131970 call !(131969 call isRange(131967 call newDims i))))
          {
            { scopeless
              (131991 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
            }
          }
        }
      }
      label _unused_continueLabel[132003]
      label _breakLabel[132002]
    }
    if(132107 call _cond_test(132047 call !=(132040 call . this c"rank")(132044 call . newDims c"size")))
    {
      { scopeless
        (132105 call compilerError(132102 call +(132093 call +(132074 call + "rank mismatch: cannot reindex() from "(132072 call _cast string[26](132068 call . this c"rank"))) " dimension(s) to ")(132100 call _cast string[26](132096 call . newDims c"size"))))
      }
    }
    {
      unknown i[132185] 0
      unknown tmp[132186] "maybe param" "temp"
      (132198 'move' tmp[132186](132196 call chpl_compute_low_param_loop_bound 0(132115 call - rank 1)))
      unknown tmp[132187] "maybe param" "temp"
      (132208 'move' tmp[132187](132206 call chpl_compute_high_param_loop_bound 0(132203 call - rank 1)))
      unknown tmp[132188] "maybe param" "temp"
      (132211 'move' tmp[132188] 1)
      ParamForLoop[132213]
      { i[132185] tmp[132186] tmp[132187] tmp[132188]
        { scopeless
          if(132180 call _cond_test(132139 call !=(132123 call .(132122 call newDims i) c"size")(132136 call .(132135 call(132130 call .(132127 call . _value c"dom") c"dsiDim") i) c"size")))
          {
            { scopeless
              (132178 call halt "extent in dimension " i " does not match actual")
            }
          }
        }
      }
      label _unused_continueLabel[132190]
      label _breakLabel[132189]
    }
    { scopeless
      const thisDomClass[132229] "const"(132226 call .(132223 call . this c"_value") c"dom")
      (132232 'end of statement')
    }
    { scopeless
      const tmp[132246] "const" "temp"(132244 call _build_tuple thisDomClass(132240 call . thisDomClass c"pid"))
      (132253 call _check_tuple_var_decl tmp[132246] 2)
      const dom[132233] "const"(132247 call tmp[132246] 0)
      const dompid[132235] "const"(132250 call tmp[132246] 1)
      (132258 'end of statement')
    }
    { scopeless
      const updom[132264] "const" "no auto destroy"(132262 call chpl__buildDomainExpr(132260 'expand_tuple' newDims))
      (132267 'end of statement')
    }
    { scopeless
      const redist[132305] "const"(132270 'new'(_chpl_manager = unmanaged[220](?))(132304 call ArrayViewReindexDist(downDistPid =(132279 call .(132276 call .(132273 call . this c"_dom") c"dist") c"_pid"))(downDistInst =(132291 call .(132288 call .(132285 call . this c"_dom") c"dist") c"_instance"))(updom =(132296 call . updom c"_value"))(downdomPid = dompid)(downdomInst = dom)))
      (132308 'end of statement')
    }
    { scopeless
      const redistRec[132314] "const"(132309 'new'(132313 call _distribution redist))
      (132317 'end of statement')
    }
    { scopeless
      const newDom[132338] "const" "no auto destroy"(132318 'new'(132337 call _domain redistRec rank(132324 call . updom c"idxType")(132328 call . updom c"stridable")(132336 call(132332 call . updom c"dims"))))
      (132341 'end of statement')
    }
    (132350 call =(132346 call .(132343 call . newDom c"_value") c"_free_when_no_arrs") 1)
    { scopeless
      const tmp[132369] "const" "temp"(132367 call _build_tuple(132359 call . this c"_value")(132363 call . this c"_pid"))
      (132376 call _check_tuple_var_decl tmp[132369] 2)
      const arr[132353] "const"(132370 call tmp[132369] 0)
      const arrpid[132355] "const"(132373 call tmp[132369] 1)
      (132381 'end of statement')
    }
    { scopeless
      unknown x[132407](132384 'new'(_chpl_manager = unmanaged[220](?))(132406 call ArrayViewReindexArr(eltType =(132387 call . this c"eltType"))(_DomPid =(132393 call . newDom c"_pid"))(dom =(132398 call . newDom c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)))
      (132410 'end of statement')
    }
    (132422 call(132415 call .(132412 call . newDom c"_value") c"add_arr") x(locking = 0))
    (132428 return(132427 call _newArray x))
  }
  where {
    (131952 call isRectangularDom(131948 call . this c"_dom"))
  } function _array[133600](?).reindex[132439](arg _mt[133780]:_MT[238], arg this[133778]:_array[133600](?), arg d[132436] :
  _domain) : _unknown[51] "method" "primary method" "no doc" "fn returns aliasing array"
  {
    (132460 call compilerError "Reindexing non-rectangular arrays is not permitted.")
  } function _array[133600](?).writeThis[132469](arg _mt[133784]:_MT[238], arg this[133782]:_array[133600](?), arg f[132467]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (132477 call(132472 call . _value c"dsiSerialWrite") f)
  } function _array[133600](?).readThis[132486](arg _mt[133788]:_MT[238], arg this[133786]:_array[133600](?), arg f[132484]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc"
  {
    (132494 call(132489 call . _value c"dsiSerialRead") f)
  } function _array[133600](?).IRV[132501](arg _mt[133792]:_MT[238], arg this[133790]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (132528 call compilerError "only sparse arrays have an IRV")
  }
  where {
    (132507 call !(132506 call isSparseArr this))
  } function _array[133600](?).IRV[132536](arg _mt[133796]:_MT[238], arg this[133794]:_array[133600](?)) ref : _unknown[51] "method" "primary method" "no doc" "no parens"
  {
    (132548 return(132545 call . _value c"IRV"))
  }
  where {
    (132541 call isSparseArr this)
  } function _array[133600](?).sorted[132565](arg _mt[133800]:_MT[238], arg this[133798]:_array[133600](?), arg comparator[132561] :
  unknown t[132556] =
  (132560 call chpl_defaultComparator)) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(132732 call _cond_test(132589 call(132568 call . Reflection c"canResolveMethod") _value "dsiSorted" comparator))
    {
      {
        unknown _indexOfInterest[132602] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132603] "expr temp" "temp"
        (132612 'move' _iterator[132603](132610 call _getIterator(132597 call(132592 call . _value c"dsiSorted") comparator)))
        Defer
        {
          {
            (132629 call _freeIterator _iterator[132603])
          }
        }
        { scopeless type
          (132618 'move' _indexOfInterest[132602](132615 call iteratorIndex _iterator[132603]))
        }
        ForLoop[132604]
        {
          unknown i[132622] "index var" "insert auto destroy"
          (132624 'move' i[132622] _indexOfInterest[132602])
          {
            (132599 yield i)
          }
          label _continueLabel[132607]
          _indexOfInterest[132602]
          _iterator[132603]
        }
        label _breakLabel[132608]
      }
    }
    {
      { scopeless
        if(132728 call _cond_test(132644 call(132638 call . Reflection c"canResolveMethod") _value "dsiSorted"))
        {
          (132671 call compilerError(132668 call +(132649 call _cast string[26](132647 'typeof' _value)) " does not support dsiSorted(comparator)"))
        }
        {
          (132675 'use' Sort)
          { scopeless
            unknown copy[132679] this
            (132682 'end of statement')
          }
          (132688 call sort copy(comparator = comparator))
          {
            unknown _indexOfInterest[132695] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[132696] "expr temp" "temp"
            (132705 'move' _iterator[132696](132703 call _getIterator copy))
            Defer
            {
              {
                (132721 call _freeIterator _iterator[132696])
              }
            }
            { scopeless type
              (132710 'move' _indexOfInterest[132695](132707 call iteratorIndex _iterator[132696]))
            }
            ForLoop[132697]
            {
              unknown ind[132714] "index var" "insert auto destroy"
              (132716 'move' ind[132714] _indexOfInterest[132695])
              { scopeless
                (132693 yield ind)
              }
              label _continueLabel[132700]
              _indexOfInterest[132695]
              _iterator[132696]
            }
            label _breakLabel[132701]
          }
        }
      }
    }
  } function _array[133600](?).displayRepresentation[132742](arg _mt[133804]:_MT[238], arg this[133802]:_array[133600](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (132749 call(132745 call . _value c"dsiDisplayRepresentation"))
  } function _array[133600](?).targetLocales[132756](arg _mt[133808]:_MT[238], arg this[133806]:_array[133600](?)) : _unknown[51] "method" "primary method"
  {
    (132764 return(132763 call(132759 call . _value c"dsiTargetLocales")))
  } function _array[133600](?).hasSingleLocalSubdomain[132771](arg _mt[133812]:_MT[238], arg this[133810]:_array[133600](?)) param : _unknown[51] "method" "primary method"
  {
    (132779 return(132778 call(132774 call . _value c"dsiHasSingleLocalSubdomain")))
  } function _array[133600](?).localSubdomain[132792](arg _mt[133816]:_MT[238], arg this[133814]:_array[133600](?), arg loc[132788] :
  locale[28] =
  here) : _unknown[51] "method" "primary method"
  {
    if(132807 call _cond_test(132800 call !(132799 call(132795 call . _value c"dsiHasSingleLocalSubdomain"))))
    {
      { scopeless
        (132805 call compilerError "Domain's local domain is not a single domain")
      }
    }
    (132820 return(132819 call(132814 call . _value c"dsiLocalSubdomain") loc))
  } function _array[133600](?).localSubdomains[132832](arg _mt[133820]:_MT[238], arg this[133818]:_array[133600](?), arg loc[132828] :
  locale[28] =
  here) : _unknown[51] "iterator fn" "method" "primary method"
  {
    if(132893 call _cond_test(132839 call(132835 call . _value c"dsiHasSingleLocalSubdomain")))
    {
      (132844 yield(132843 call localSubdomain loc))
    }
    {
      {
        unknown _indexOfInterest[132858] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[132859] "expr temp" "temp"
        (132868 'move' _iterator[132859](132866 call _getIterator(132854 call(132849 call . _value c"dsiLocalSubdomains") loc)))
        Defer
        {
          {
            (132885 call _freeIterator _iterator[132859])
          }
        }
        { scopeless type
          (132874 'move' _indexOfInterest[132858](132871 call iteratorIndex _iterator[132859]))
        }
        ForLoop[132860]
        {
          unknown d[132878] "index var" "insert auto destroy"
          (132880 'move' d[132878] _indexOfInterest[132858])
          { scopeless
            (132856 yield d)
          }
          label _continueLabel[132863]
          _indexOfInterest[132858]
          _iterator[132859]
        }
        label _breakLabel[132864]
      }
    }
  } function _array[133600](?).chpl__isDense1DArray[132902](arg _mt[133824]:_MT[238], arg this[133822]:_array[133600](?)) param : _unknown[51] "method" "primary method"
  {
    (132928 return(132926 call &&(132915 call &&(132907 call isRectangularArr this)(132913 call ==(132909 call . this c"rank") 1))(132924 call !(132921 call .(132918 call . this c"_value") c"stridable"))))
  } function _array[133600](?).chpl__assertSingleArrayDomain[132939](arg _mt[133828]:_MT[238], arg this[133826]:_array[133600](?), arg fnName[132936] :
  string[26]) : _unknown[51] "inline" "method" "primary method"
  {
    if(133000 call _cond_test(132955 call !=(132951 call .(132948 call .(132945 call .(132942 call . this c"_dom") c"_value") c"_arrs") c"size") 1))
    {
      { scopeless
        (132998 call halt(132995 call +(132976 call + "cannot call " fnName) " on an array defined over a domain with multiple arrays"))
      }
    }
  } function _array[133600](?).isEmpty[133010](arg _mt[133832]:_MT[238], arg this[133830]:_array[133600](?)) : _unknown[51] "method" "primary method"
  {
    (133020 return(133018 call ==(133014 call . this c"size") 0))
  }
  { scopeless type
    bool[10]
  } function _array[133600](?).head[133028](arg _mt[133836]:_MT[238], arg this[133834]:_array[133600](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (133047 return(133046 call this(133042 call .(133039 call . this c"_dom") c"alignedLow")))
  }
  { scopeless type
    (133034 call .(133031 call . this c"_value") c"eltType")
  } function _array[133600](?).tail[133055](arg _mt[133840]:_MT[238], arg this[133838]:_array[133600](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (133074 return(133073 call this(133069 call .(133066 call . this c"_dom") c"alignedHigh")))
  }
  { scopeless type
    (133061 call .(133058 call . this c"_value") c"eltType")
  } function _array[133600](?).back[133082](arg _mt[133844]:_MT[238], arg this[133842]:_array[133600](?)) : _unknown[51] "method" "primary method"
  {
    if(133120 call _cond_test(133097 call ||(133088 call !(133087 call isRectangularArr this))(133095 call !=(133091 call . this c"rank") 1)))
    {
      { scopeless
        (133118 call compilerError "back() is only supported on 1D rectangular arrays")
      }
    }
    if(133153 call _cond_test(133130 call && boundsChecking(133129 call isEmpty)))
    {
      { scopeless
        (133151 call halt "back called on an empty array")
      }
    }
    (133168 return(133167 call this(133163 call .(133160 call . this c"_dom") c"high")))
  } function _array[133600](?).front[133174](arg _mt[133848]:_MT[238], arg this[133846]:_array[133600](?)) : _unknown[51] "method" "primary method"
  {
    if(133212 call _cond_test(133189 call ||(133180 call !(133179 call isRectangularArr this))(133187 call !=(133183 call . this c"rank") 1)))
    {
      { scopeless
        (133210 call compilerError "front() is only supported on 1D rectangular arrays")
      }
    }
    if(133245 call _cond_test(133222 call && boundsChecking(133221 call isEmpty)))
    {
      { scopeless
        (133243 call halt "front called on an empty array")
      }
    }
    (133260 return(133259 call this(133255 call .(133252 call . this c"_dom") c"low")))
  } function _array[133600](?).reverse[133266](arg _mt[133852]:_MT[238], arg this[133850]:_array[133600](?)) : _unknown[51] "method" "primary method"
  {
    if(133294 call _cond_test(133271 call !(133270 call chpl__isDense1DArray)))
    {
      { scopeless
        (133292 call compilerError "reverse() is only supported on dense 1D arrays")
      }
    }
    { scopeless
      const lo[133307] "const"(133304 call .(133301 call . this c"_dom") c"low")
      const mid[133320] "const"(133318 call /(133314 call .(133311 call . this c"_dom") c"size") 2)
      const hi[133330] "const"(133327 call .(133324 call . this c"_dom") c"high")
      (133333 'end of statement')
    }
    {
      unknown _indexOfInterest[133359] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133360] "expr temp" "temp"
      (133369 'move' _iterator[133360](133367 call _getIterator(133376 call chpl_direct_counted_range_iter 0 mid)))
      Defer
      {
        {
          (133392 call _freeIterator _iterator[133360])
        }
      }
      { scopeless type
        (133381 'move' _indexOfInterest[133359](133378 call iteratorIndex _iterator[133360]))
      }
      ForLoop[133361]
      {
        unknown i[133385] "index var" "insert auto destroy"
        (133387 'move' i[133385] _indexOfInterest[133359])
        {
          (133355 call <=>(133347 call this(133344 call + lo i))(133354 call this(133351 call - hi i)))
        }
        label _continueLabel[133364]
        _indexOfInterest[133359]
        _iterator[133360]
      }
      label _breakLabel[133365]
    }
  } function _array[133600](?).find[133410](arg _mt[133856]:_MT[238], arg this[133854]:_array[133600](?), arg val[133407] :
  (133404 call . this c"eltType")) : _unknown[51] "method" "primary method"
  {
    {
      unknown _indexOfInterest[133448] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133449] "expr temp" "temp"
      (133458 'move' _iterator[133449](133456 call _getIterator(133425 call . this c"_dom")))
      Defer
      {
        {
          (133475 call _freeIterator _iterator[133449])
        }
      }
      { scopeless type
        (133464 'move' _indexOfInterest[133448](133461 call iteratorIndex _iterator[133449]))
      }
      ForLoop[133450]
      {
        unknown i[133468] "index var" "insert auto destroy"
        (133470 'move' i[133468] _indexOfInterest[133448])
        {
          if(133442 call _cond_test(133433 call ==(133431 call this i) val))
          {
            { scopeless
              (133440 return(133438 call _build_tuple 1 i))
            }
          }
        }
        label _continueLabel[133453]
        _indexOfInterest[133448]
        _iterator[133449]
      }
      label _breakLabel[133454]
    }
    { scopeless
      unknown arbInd[133490](133488 call chpl__buildIndexType(133484 call . this c"_dom"))
      (133493 'end of statement')
    }
    (133499 return(133497 call _build_tuple 0 arbInd))
  }
  { scopeless type
    (133421 call _build_tuple bool[10](133418 call chpl__buildIndexType(133414 call . this c"_dom")))
  } function _array[133600](?).count[133513](arg _mt[133860]:_MT[238], arg this[133858]:_array[133600](?), arg val[133510] :
  (133507 call . this c"eltType")) : _unknown[51] "method" "primary method"
  {
    (133523 return(133521 'reduce' SumReduceScanOp(133519 call == this val) 0))
  }
  { scopeless type
    int[13]
  } function _array[133600](?).shape[133531](arg _mt[133864]:_MT[238], arg this[133862]:_array[133600](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (133542 return(133539 call .(133534 call . this c"_dom") c"shape"))
  } function _array[133600](?)._scan[133551](arg _mt[133868]:_MT[238], arg this[133866]:_array[133600](?), arg op[133549]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {
    (133593 return(133592 call(133583 call . _value c"doiScan") op(133589 call . this c"_dom")))
  }
  where {
    (133581 call(133554 call . Reflection c"canResolveMethod") _value "doiScan" op(133578 call . this c"_dom"))
  } forwarding ( )
  function _do_destroy_arr[133877](arg _unowned[133874] :
  bool[10], arg _instance[133879]:_any[178](?), arg deinitElts[133882] =
  1) : _unknown[51] "inline"
  {
    if(134125 call _cond_test(133886 call ! _unowned))
    {
      {
        const tmp[134101] "const" "temp"
        (134102 'move' tmp[134101](134099 'deref'(134098 '_wide_get_locale' _instance)))
        {
          { scopeless
            unknown arrIsInList[133897] "param"(133895 call !(133894 call(133890 call . _instance c"isSliceArrayView")))
            (133900 'end of statement')
          }
          { scopeless
            unknown tmp[133914] "temp"(133913 call(133908 call . _instance c"remove") arrIsInList)
            (133921 call _check_tuple_var_decl tmp[133914] 2)
            unknown arrToFree[133902](133915 call tmp[133914] 0)
            unknown domToRemove[133904](133918 call tmp[133914] 1)
            (133926 'end of statement')
          }
          { scopeless
            unknown domToFree[133931] nil[44](133929 'to unmanaged class from unknown'(133928 'to nilable class from type' BaseDom))
            (133934 'end of statement')
          }
          { scopeless
            unknown distToRemove[133939] nil[44](133937 'to unmanaged class from unknown'(133936 'to nilable class from type' BaseDist))
            (133942 'end of statement')
          }
          { scopeless
            unknown distToFree[133947] nil[44](133945 'to unmanaged class from unknown'(133944 'to nilable class from type' BaseDist))
            (133950 'end of statement')
          }
          { scopeless
            unknown domIsPrivatized[133952] 0
            (133955 'end of statement')
          }
          { scopeless
            const instanceDom[133957] "const" domToRemove
            (133960 'end of statement')
          }
          if(133998 call _cond_test(133963 call != domToRemove nil[44]))
          {
            (133978 call =(133968 call _build_tuple domToFree distToRemove)(133977 call(133973 call .(133971 call postfix! domToRemove) c"remove")))
            (133995 call = domIsPrivatized(133993 call && _privatization(133991 call !=(133987 call .(133985 call postfix! domToRemove) c"pid") nullPid)))
          }
          { scopeless
            unknown distIsPrivatized[134003] 0
            (134006 'end of statement')
          }
          if(134040 call _cond_test(134009 call != distToRemove nil[44]))
          {
            (134020 call = distToFree(134019 call(134015 call .(134013 call postfix! distToRemove) c"remove")))
            (134037 call = distIsPrivatized(134035 call && _privatization(134033 call !=(134029 call .(134027 call postfix! distToRemove) c"pid") nullPid)))
          }
          if(134059 call _cond_test(134046 call != arrToFree nil[44]))
          {
            { scopeless
              (134057 call _delete_arr _instance(134054 call _isPrivatized _instance)(deinitElts = deinitElts))
            }
          }
          if(134076 call _cond_test(134066 call != domToFree nil[44]))
          {
            { scopeless
              (134074 call _delete_dom(134070 call postfix! instanceDom) domIsPrivatized)
            }
          }
          if(134093 call _cond_test(134083 call != distToFree nil[44]))
          {
            { scopeless
              (134091 call _delete_dist(134087 call postfix! distToFree) distIsPrivatized)
            }
          }
        }
        (134105 'elided on block' 0 tmp[134101])
      }
    }
    {
      if(134120 call _cond_test(134113 call chpl__isArrayView _instance))
      {
        (134116 call chpl__delete _instance)
      }
    }
  }
  function _do_destroy_array[134138](arg array[134135] :
  _array, arg deinitElts[134141] =
  1) : _unknown[51] "inline"
  {
    (134155 call _do_destroy_arr(134146 call . array c"_unowned")(134151 call . array c"_instance") deinitElts)
  }
  function _deinitElementsIsParallel[134164](arg eltType[134162]:_any[178](?)) param : _unknown[51]
  {
    (134167 return 0)
  }
  function _deinitElements[134178](arg array[134175] :
  _array) : _unknown[51]
  {
    { scopeless
      unknown needsDestroy[134187] "param"(134186 'needs auto destroy'(134183 call . array c"eltType"))
      (134190 'end of statement')
    }
    if(134260 call _cond_test needsDestroy)
    {
      if(134255 call _cond_test(134199 call _deinitElementsIsParallel(134195 call . array c"eltType")))
      {
        Forall {
          induction variables:
            
            unknown elt[134209] "index var" "insert auto destroy"
          iterated expressions:
            array
          shadow variables:
          other variables
            forall body
          {
            (134205 call chpl__autoDestroy elt)
          }
        }
      }
      {
        {
          unknown _indexOfInterest[134221] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[134222] "expr temp" "temp"
          (134231 'move' _iterator[134222](134229 call _getIterator array))
          Defer
          {
            {
              (134247 call _freeIterator _iterator[134222])
            }
          }
          { scopeless type
            (134236 'move' _indexOfInterest[134221](134233 call iteratorIndex _iterator[134222]))
          }
          ForLoop[134223]
          {
            unknown elt[134240] "index var" "insert auto destroy"
            (134242 'move' elt[134240] _indexOfInterest[134221])
            {
              (134218 call chpl__autoDestroy elt)
            }
            label _continueLabel[134226]
            _indexOfInterest[134221]
            _iterator[134222]
          }
          label _breakLabel[134227]
        }
      }
    }
    (134274 call(134270 call .(134265 call . array c"_instance") c"dsiElementDeinitializationComplete"))
  }
  function _unknown[51].equals[134285](arg _mt[134290]:_MT[238], arg this[134287] :
  _array, arg that[134282] :
  _array) : _unknown[51] "method"
  {
    if(134306 call _cond_test(134301 call ==(134294 call . this c"_value")(134298 call . that c"_value")))
    {
      { scopeless
        (134304 return 1)
      }
    }
    if(134325 call _cond_test(134320 call !=(134313 call . this c"rank")(134317 call . that c"rank")))
    {
      { scopeless
        (134323 return 0)
      }
    }
    if(134343 call _cond_test(134338 call !=(134331 call . this c"size")(134335 call . that c"size")))
    {
      { scopeless
        (134341 return 0)
      }
    }
    if(134454 call _cond_test(134362 call &&(134354 call isRectangularDom(134350 call . this c"_dom"))(134361 call isRectangularDom(134357 call . that c"_dom"))))
    {
      {
        unknown _indexOfInterest[134410] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[134411] "expr temp" "temp"
        (134420 'move' _iterator[134411](134418 call _getIterator(134430 call chpl_direct_counted_range_iter 0(134426 call . this c"rank"))))
        Defer
        {
          {
            (134446 call _freeIterator _iterator[134411])
          }
        }
        { scopeless type
          (134435 'move' _indexOfInterest[134410](134432 call iteratorIndex _iterator[134411]))
        }
        ForLoop[134412]
        {
          unknown d[134439] "index var" "insert auto destroy"
          (134441 'move' d[134439] _indexOfInterest[134410])
          { scopeless
            if(134405 call _cond_test(134400 call !=(134384 call .(134383 call(134378 call .(134375 call . this c"_dom") c"dim") d) c"size")(134397 call .(134396 call(134391 call .(134388 call . that c"_dom") c"dim") d) c"size")))
            {
              { scopeless
                (134403 return 0)
              }
            }
          }
          label _continueLabel[134415]
          _indexOfInterest[134410]
          _iterator[134411]
        }
        label _breakLabel[134416]
      }
    }
    if(134529 call _cond_test(134464 call isArrayType(134460 call . this c"eltType")))
    {
      { scopeless
        unknown ret[134466] 1
        (134469 'end of statement')
      }
      Forall {
        induction variables:
          
          unknown thisArr[134511] "index var" "insert auto destroy"
          
          unknown thatArr[134513] "index var" "insert auto destroy"
        iterated expressions:
          this
          that
        shadow variables:
          ret[134482] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
        other variables
          forall body
        {
          unknown tmp[134499] "temp"
          (134502 'move' tmp[134499](134501 'addr of' ret))
          (134507 call = tmp[134499](134504 call && tmp[134499](134497 call(134492 call . thisArr c"equals") thatArr)))
        }
      }
      (134517 return ret)
    }
    {
      (134526 return(134524 'reduce' LogicalAndReduceScanOp(134522 call == this that) 0))
    }
  }
  { scopeless type
    bool[10]
  }
  function _cast[134542](arg t[134539] :
  _array, param arg arg[134544]:_any[178](?)) : _unknown[51] "no doc"
  {
    { scopeless
      unknown result[134547] t
      (134550 'end of statement')
    }
    (134556 call chpl__transferArray result arg)
    (134559 return result)
  }
  function _cast[134569](arg t[134566] :
  string[26], arg x[134574] :
  (134571 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "no doc"
  {
    (134578 'use' IO)
    (134585 return(134584 call stringify x))
  }
  function isDmapType[134593](arg t[134591]:_any[178](?)) param : _unknown[51]
  {
    function isDmapHelp[134601](arg t[134598] :
    _distribution) param : _unknown[51]
    {
      { scopeless
        (134604 return 1)
      }
    }
    function isDmapHelp[134614](arg t[134612]:_any[178](?)) param : _unknown[51]
    {
      { scopeless
        (134617 return 0)
      }
    }
    (134626 return(134625 call isDmapHelp t))
  }
  function isDmapValue[134636](arg e[134633] :
  _distribution) param : _unknown[51] "no doc"
  {
    { scopeless
      (134639 return 1)
    }
  }
  function isDmapValue[134648](arg e[134646]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      (134651 return 0)
    }
  }
  function isDomainType[134660](arg t[134658]:_any[178](?)) param : _unknown[51]
  {
    (134667 return(134666 call isSubtype t _domain))
  }
  function isDomainValue[134678](arg e[134675] :
  _domain) param : _unknown[51] "no doc"
  {
    { scopeless
      (134681 return 1)
    }
  }
  function isDomainValue[134690](arg e[134688]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      (134693 return 0)
    }
  }
  function isArrayType[134702](arg t[134700]:_any[178](?)) param : _unknown[51]
  {
    (134709 return(134708 call isSubtype t _array))
  }
  function isArrayValue[134722](arg e[134719] :
  (134716 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51] "no doc"
  {
    { scopeless
      (134725 return 1)
    }
  }
  function isArrayValue[134734](arg e[134732]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      (134737 return 0)
    }
  }
  function -[134748](arg a[134745] :
  _domain, arg b[134751] :
  _domain) : _unknown[51]
  {
    { scopeless
      unknown newDom[134768](134767 'typeof' a)
      (134771 'end of statement')
    }
    {
      unknown tmp[134813] "temp"(134814 'task_get_serial')
      if(134810 call _cond_test(134780 call !(134777 call .(134774 call . newDom c"_value") c"parSafe")))
      {
        (134816 'task_set_serial' 1)
      }
      Defer
      {
        {
          (134820 'task_set_serial' tmp[134813])
        }
      }
      { scopeless
        Forall {
          induction variables:
            
            unknown e[134807] "index var" "insert auto destroy"
          iterated expressions:
            a
          shadow variables:
          other variables
            forall body
          {
            if(134801 call _cond_test(134791 call !(134790 call(134785 call . b c"contains") e)))
            {
              { scopeless
                (134799 call(134794 call . newDom c"add") e)
              }
            }
          }
        }
      }
    }
    (134825 return newDom)
  }
  where {
    (134764 call &&(134758 call ==(134755 'typeof' a)(134757 'typeof' b))(134763 call isAssociativeDom a))
  }
  function -=[134836](ref arg a[134833] :
  _domain, arg b[134839] :
  _domain) : _unknown[51] "assignop"
  {
    {
      unknown _indexOfInterest[134876] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134877] "expr temp" "temp"
      (134886 'move' _iterator[134877](134884 call _getIterator b))
      Defer
      {
        {
          (134902 call _freeIterator _iterator[134877])
        }
      }
      { scopeless type
        (134891 'move' _indexOfInterest[134876](134888 call iteratorIndex _iterator[134877]))
      }
      ForLoop[134878]
      {
        unknown e[134895] "index var" "insert auto destroy"
        (134897 'move' e[134895] _indexOfInterest[134876])
        { scopeless
          if(134871 call _cond_test(134862 call(134857 call . a c"contains") e))
          {
            { scopeless
              (134869 call(134864 call . a c"remove") e)
            }
          }
        }
        label _continueLabel[134881]
        _indexOfInterest[134876]
        _iterator[134877]
      }
      label _breakLabel[134882]
    }
  }
  where {
    (134852 call &&(134846 call ==(134843 'typeof' a)(134845 'typeof' b))(134851 call isAssociativeDom a))
  }
  function |[134919](arg a[134916] :
  _domain, arg b[134922] :
  _domain) : _unknown[51]
  {
    (134941 return(134939 call + a b))
  }
  where {
    (134935 call &&(134929 call ==(134926 'typeof' a)(134928 'typeof' b))(134934 call isAssociativeDom a))
  }
  function |=[134953](ref arg a[134950] :
  _domain, arg b[134956] :
  _domain) : _unknown[51] "assignop"
  {
    {
      unknown _indexOfInterest[134981] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[134982] "expr temp" "temp"
      (134991 'move' _iterator[134982](134989 call _getIterator b))
      Defer
      {
        {
          (135007 call _freeIterator _iterator[134982])
        }
      }
      { scopeless type
        (134996 'move' _indexOfInterest[134981](134993 call iteratorIndex _iterator[134982]))
      }
      ForLoop[134983]
      {
        unknown e[135000] "index var" "insert auto destroy"
        (135002 'move' e[135000] _indexOfInterest[134981])
        { scopeless
          (134979 call(134974 call . a c"add") e)
        }
        label _continueLabel[134986]
        _indexOfInterest[134981]
        _iterator[134982]
      }
      label _breakLabel[134987]
    }
  }
  where {
    (134969 call &&(134963 call ==(134960 'typeof' a)(134962 'typeof' b))(134968 call isAssociativeDom a))
  }
  function +=[135024](ref arg a[135021] :
  _domain, arg b[135027] :
  _domain) : _unknown[51] "assignop"
  {
    (135044 call |= a b)
  }
  where {
    (135040 call &&(135034 call ==(135031 'typeof' a)(135033 'typeof' b))(135039 call isAssociativeDom a))
  }
  function &[135057](arg a[135054] :
  _domain, arg b[135060] :
  _domain) : _unknown[51]
  {
    { scopeless
      unknown newDom[135077](135076 'typeof' a)
      (135080 'end of statement')
    }
    {
      unknown tmp[135123] "temp"(135124 'task_get_serial')
      if(135120 call _cond_test(135089 call !(135086 call .(135083 call . newDom c"_value") c"parSafe")))
      {
        (135126 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135130 'task_set_serial' tmp[135123])
        }
      }
      { scopeless
        Forall {
          induction variables:
            
            unknown k[135117] "index var" "insert auto destroy"
          iterated expressions:
            a
          shadow variables:
            newDom[135094] 'ref' intent
              init block
              {
              }
              deinit block
              {
              }
          other variables
            forall body
          {
            if(135111 call _cond_test(135105 call(135100 call . b c"contains") k))
            {
              { scopeless
                (135108 call += newDom k)
              }
            }
          }
        }
      }
    }
    (135135 return newDom)
  }
  where {
    (135073 call &&(135067 call ==(135064 'typeof' a)(135066 'typeof' b))(135072 call isAssociativeDom a))
  }
  function &=[135146](ref arg a[135143] :
  _domain, arg b[135149] :
  _domain) : _unknown[51] "assignop"
  {
    { scopeless
      unknown removeSet[135172](135170 call chpl__buildDomainRuntimeType defaultDist(135165 call . a c"idxType"))
      (135175 'end of statement')
    }
    {
      unknown _indexOfInterest[135198] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135199] "expr temp" "temp"
      (135208 'move' _iterator[135199](135206 call _getIterator a))
      Defer
      {
        {
          (135224 call _freeIterator _iterator[135199])
        }
      }
      { scopeless type
        (135213 'move' _indexOfInterest[135198](135210 call iteratorIndex _iterator[135199]))
      }
      ForLoop[135200]
      {
        unknown e[135217] "index var" "insert auto destroy"
        (135219 'move' e[135217] _indexOfInterest[135198])
        { scopeless
          if(135193 call _cond_test(135186 call !(135185 call(135180 call . b c"contains") e)))
          {
            { scopeless
              (135190 call += removeSet e)
            }
          }
        }
        label _continueLabel[135203]
        _indexOfInterest[135198]
        _iterator[135199]
      }
      label _breakLabel[135204]
    }
    {
      unknown _indexOfInterest[135241] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135242] "expr temp" "temp"
      (135251 'move' _iterator[135242](135249 call _getIterator removeSet))
      Defer
      {
        {
          (135267 call _freeIterator _iterator[135242])
        }
      }
      { scopeless type
        (135256 'move' _indexOfInterest[135241](135253 call iteratorIndex _iterator[135242]))
      }
      ForLoop[135243]
      {
        unknown e[135260] "index var" "insert auto destroy"
        (135262 'move' e[135260] _indexOfInterest[135241])
        { scopeless
          (135239 call(135234 call . a c"remove") e)
        }
        label _continueLabel[135246]
        _indexOfInterest[135241]
        _iterator[135242]
      }
      label _breakLabel[135247]
    }
  }
  where {
    (135162 call &&(135156 call ==(135153 'typeof' a)(135155 'typeof' b))(135161 call isAssociativeDom a))
  }
  function ^[135283](arg a[135280] :
  _domain, arg b[135286] :
  _domain) : _unknown[51]
  {
    { scopeless
      unknown newDom[135303](135302 'typeof' a)
      (135306 'end of statement')
    }
    {
      unknown tmp[135377] "temp"(135378 'task_get_serial')
      if(135374 call _cond_test(135315 call !(135312 call .(135309 call . newDom c"_value") c"parSafe")))
      {
        (135380 'task_set_serial' 1)
      }
      Defer
      {
        {
          (135384 'task_set_serial' tmp[135377])
        }
      }
      {
        Forall {
          induction variables:
            
            unknown k[135342] "index var" "insert auto destroy"
          iterated expressions:
            a
          shadow variables:
          other variables
            forall body
          {
            if(135336 call _cond_test(135326 call !(135325 call(135320 call . b c"contains") k)))
            {
              { scopeless
                (135334 call(135329 call . newDom c"add") k)
              }
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135371] "index var" "insert auto destroy"
          iterated expressions:
            b
          shadow variables:
          other variables
            forall body
          {
            if(135365 call _cond_test(135355 call !(135354 call(135349 call . a c"contains") k)))
            {
              { scopeless
                (135363 call(135358 call . newDom c"add") k)
              }
            }
          }
        }
      }
    }
    (135389 return newDom)
  }
  where {
    (135299 call &&(135293 call ==(135290 'typeof' a)(135292 'typeof' b))(135298 call isAssociativeDom a))
  }
  function ^=[135400](ref arg a[135397] :
  _domain, arg b[135403] :
  _domain) : _unknown[51] "assignop"
  {
    {
      unknown _indexOfInterest[135449] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135450] "expr temp" "temp"
      (135459 'move' _iterator[135450](135457 call _getIterator b))
      Defer
      {
        {
          (135475 call _freeIterator _iterator[135450])
        }
      }
      { scopeless type
        (135464 'move' _indexOfInterest[135449](135461 call iteratorIndex _iterator[135450]))
      }
      ForLoop[135451]
      {
        unknown e[135468] "index var" "insert auto destroy"
        (135470 'move' e[135468] _indexOfInterest[135449])
        { scopeless
          if(135443 call _cond_test(135426 call(135421 call . a c"contains") e))
          {
            { scopeless
              (135433 call(135428 call . a c"remove") e)
            }
          }
          {
            { scopeless
              (135441 call(135436 call . a c"add") e)
            }
          }
        }
        label _continueLabel[135454]
        _indexOfInterest[135449]
        _iterator[135450]
      }
      label _breakLabel[135455]
    }
  }
  where {
    (135416 call &&(135410 call ==(135407 'typeof' a)(135409 'typeof' b))(135415 call isAssociativeDom a))
  }
  function +=[135492](ref arg sd[135489] :
  _domain, arg inds[135501] :
  (135498 call chpl__buildArrayRuntimeType nil[44](135496 call chpl__buildIndexType sd))) : _unknown[51] "assignop"
  {
    if(135517 call _cond_test(135513 call ==(135509 call . inds c"size") 0))
    {
      { scopeless
        (135515 return)
      }
    }
    (135532 call(135527 call .(135524 call . sd c"_value") c"dsiBulkAdd") inds)
  }
  where {
    (135507 call isSparseDom sd)
  }
  function +=[135543](ref arg sd[135540] :
  _domain, arg d[135546] :
  _domain) : _unknown[51] "assignop"
  {
    if(135586 call _cond_test(135582 call ==(135578 call . d c"size") 0))
    {
      { scopeless
        (135584 return)
      }
    }
    { scopeless
      const indCount[135596] "const"(135593 call . d c"size")
      (135599 'end of statement')
    }
    { scopeless
      unknown arr[135618](135616 call chpl__buildArrayRuntimeType(135614 call chpl__ensureDomainExpr(135607 call chpl__buildDomainExpr(135604 call #(135601 call chpl_build_low_bounded_range 0) indCount)))(135612 call chpl__buildIndexType sd))
      (135621 'end of statement')
    }
    {
      unknown _indexOfInterest[135641] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135642] "expr temp" "temp"
      (135659 'move' _iterator[135642](135632 call _build_tuple(135651 call _getIterator d)(135656 call _getIterator(135654 call chpl_build_low_bounded_range 0))))
      Defer
      {
        {
          (135689 call _freeIterator _iterator[135642])
        }
      }
      { scopeless type
        (135664 'move' _indexOfInterest[135641](135661 call iteratorIndex _iterator[135642]))
      }
      ForLoop[135643]
      {
        (135669 call _check_tuple_var_decl _indexOfInterest[135641] 2)
        unknown i[135675] "index var" "insert auto destroy"
        (135677 'move' i[135675](135673 call _indexOfInterest[135641] 0))
        unknown j[135682] "index var" "insert auto destroy"
        (135684 'move' j[135682](135680 call _indexOfInterest[135641] 1))
        { scopeless
          (135638 call =(135636 call arr j) i)
        }
        label _continueLabel[135646]
        _indexOfInterest[135641]
        _iterator[135642]
      }
      label _breakLabel[135647]
    }
    { scopeless
      unknown rowSorted[135697] 0
      (135700 'end of statement')
    }
    (135713 call(135705 call .(135702 call . sd c"_value") c"dsiBulkAdd") arr rowSorted 1 0)
  }
  where {
    (135575 call &&(135563 call &&(135552 call isSparseDom sd)(135561 call ==(135554 call . d c"rank")(135558 call . sd c"rank")))(135573 call ==(135566 call . sd c"idxType")(135570 call . d c"idxType")))
  }
  function -=[135724](ref arg sd[135721] :
  _domain, arg inds[135733] :
  (135730 call chpl__buildArrayRuntimeType nil[44](135728 call chpl__buildIndexType sd))) : _unknown[51] "assignop"
  {
    {
      unknown _indexOfInterest[135747] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135748] "expr temp" "temp"
      (135757 'move' _iterator[135748](135755 call _getIterator inds))
      Defer
      {
        {
          (135773 call _freeIterator _iterator[135748])
        }
      }
      { scopeless type
        (135762 'move' _indexOfInterest[135747](135759 call iteratorIndex _iterator[135748]))
      }
      ForLoop[135749]
      {
        unknown ind[135766] "index var" "insert auto destroy"
        (135768 'move' ind[135766] _indexOfInterest[135747])
        { scopeless
          (135744 call -= sd ind)
        }
        label _continueLabel[135752]
        _indexOfInterest[135747]
        _iterator[135748]
      }
      label _breakLabel[135753]
    }
  }
  where {
    (135739 call isSparseDom sd)
  }
  function -=[135790](ref arg sd[135787] :
  _domain, arg d[135793] :
  _domain) : _unknown[51] "assignop"
  {
    {
      unknown _indexOfInterest[135831] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135832] "expr temp" "temp"
      (135841 'move' _iterator[135832](135839 call _getIterator d))
      Defer
      {
        {
          (135857 call _freeIterator _iterator[135832])
        }
      }
      { scopeless type
        (135846 'move' _indexOfInterest[135831](135843 call iteratorIndex _iterator[135832]))
      }
      ForLoop[135833]
      {
        unknown ind[135850] "index var" "insert auto destroy"
        (135852 'move' ind[135850] _indexOfInterest[135831])
        { scopeless
          (135828 call -= sd ind)
        }
        label _continueLabel[135836]
        _indexOfInterest[135831]
        _iterator[135832]
      }
      label _breakLabel[135837]
    }
  }
  where {
    (135822 call &&(135810 call &&(135799 call isSparseDom sd)(135808 call ==(135801 call . d c"rank")(135805 call . sd c"rank")))(135820 call ==(135813 call . sd c"idxType")(135817 call . d c"idxType")))
  }
  function isCollapsedDimension[135884](arg r[135881] :
  (135880 call range unknown e[135871] unknown b[135874] unknown s[135876] unknown a[135878])) param : _unknown[51] "no doc"
  {
    { scopeless
      (135887 return 0)
    }
  }
  function isCollapsedDimension[135896](arg r[135894]:_any[178](?)) param : _unknown[51] "no doc"
  {
    { scopeless
      (135899 return 1)
    }
  }
  function chpl__anyStridable[135908](arg ranges[135906]:_any[178](?)) param : _unknown[51]
  {
    {
      unknown i[135935] 0
      unknown tmp[135936] "maybe param" "temp"
      (135948 'move' tmp[135936](135946 call chpl_compute_low_param_loop_bound 0(135916 call -(135912 call . ranges c"size") 1)))
      unknown tmp[135937] "maybe param" "temp"
      (135961 'move' tmp[135937](135959 call chpl_compute_high_param_loop_bound 0(135953 call -(135955 call . ranges c"size") 1)))
      unknown tmp[135938] "maybe param" "temp"
      (135964 'move' tmp[135938] 1)
      ParamForLoop[135966]
      { i[135935] tmp[135936] tmp[135937] tmp[135938]
        { scopeless
          if(135930 call _cond_test(135924 call .(135923 call ranges i) c"stridable"))
          {
            { scopeless
              (135928 return 1)
            }
          }
        }
      }
      label _unused_continueLabel[135940]
      label _breakLabel[135939]
    }
    (135977 return 0)
  }
  function chpl__anyRankChangeStridable[135985](arg args[135983]:_any[178](?)) param : _unknown[51]
  {
    {
      unknown i[136024] 0
      unknown tmp[136025] "maybe param" "temp"
      (136037 'move' tmp[136025](136035 call chpl_compute_low_param_loop_bound 0(135993 call -(135989 call . args c"size") 1)))
      unknown tmp[136026] "maybe param" "temp"
      (136050 'move' tmp[136026](136048 call chpl_compute_high_param_loop_bound 0(136042 call -(136044 call . args c"size") 1)))
      unknown tmp[136027] "maybe param" "temp"
      (136053 'move' tmp[136027] 1)
      ParamForLoop[136055]
      { i[136024] tmp[136025] tmp[136026] tmp[136027]
        { scopeless
          if(136019 call _cond_test(136003 call isRangeValue(136001 call args i)))
          {
            { scopeless
              if(136014 call _cond_test(136008 call .(136007 call args i) c"stridable"))
              {
                { scopeless
                  (136012 return 1)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[136029]
      label _breakLabel[136028]
    }
    (136066 return 0)
  }
  function chpl__countRanges[136074](arg arg[136072]:_any[178](?)) param : _unknown[51]
  {
    (136083 return(136081 call _cast int[13](136079 call isRangeValue arg)))
  }
  function chpl__countRanges[136092](arg arg[136090]:_any[178](?), arg args[136095]:_any[178](?) ...) param : _unknown[51]
  {
    (136109 return(136107 call +(136101 call chpl__countRanges arg)(136106 call chpl__countRanges(136104 'expand_tuple' args))))
  }
  function _validRankChangeArgs[136118](arg args[136116]:_any[178](?), arg idxType[136120]:_any[178](?)) param : _unknown[51]
  {
    function _validRankChangeArg[136126](arg idxType[136124]:_any[178](?), arg r[136132] :
    (136131 call range ?[260])) param : _unknown[51]
    {
      { scopeless
        (136136 return 1)
      }
    }
    function _validRankChangeArg[136146](arg idxType[136144]:_any[178](?), arg i[136149] :
    idxType) param : _unknown[51]
    {
      { scopeless
        (136153 return 1)
      }
    }
    function _validRankChangeArg[136162](arg idxType[136160]:_any[178](?), arg x[136164]:_any[178](?)) param : _unknown[51]
    {
      { scopeless
        (136167 return 0)
      }
    }
    function allValid[136174]() param : _unknown[51]
    {
      {
        unknown dim[136205] 0
        unknown tmp[136206] "maybe param" "temp"
        (136218 'move' tmp[136206](136216 call chpl_compute_low_param_loop_bound 0(136182 call -(136178 call . args c"size") 1)))
        unknown tmp[136207] "maybe param" "temp"
        (136231 'move' tmp[136207](136229 call chpl_compute_high_param_loop_bound 0(136223 call -(136225 call . args c"size") 1)))
        unknown tmp[136208] "maybe param" "temp"
        (136234 'move' tmp[136208] 1)
        ParamForLoop[136236]
        { dim[136205] tmp[136206] tmp[136207] tmp[136208]
          {
            if(136199 call _cond_test(136194 call !(136193 call _validRankChangeArg idxType(136192 call args dim))))
            {
              { scopeless
                (136197 return 0)
              }
            }
          }
        }
        label _unused_continueLabel[136210]
        label _breakLabel[136209]
      }
      (136247 return 1)
    }
    function oneRange[136253]() param : _unknown[51]
    {
      {
        unknown dim[136281] 0
        unknown tmp[136282] "maybe param" "temp"
        (136294 'move' tmp[136282](136292 call chpl_compute_low_param_loop_bound 0(136261 call -(136257 call . args c"size") 1)))
        unknown tmp[136283] "maybe param" "temp"
        (136307 'move' tmp[136283](136305 call chpl_compute_high_param_loop_bound 0(136299 call -(136301 call . args c"size") 1)))
        unknown tmp[136284] "maybe param" "temp"
        (136310 'move' tmp[136284] 1)
        ParamForLoop[136312]
        { dim[136281] tmp[136282] tmp[136283] tmp[136284]
          {
            if(136275 call _cond_test(136271 call isRange(136269 call args dim)))
            {
              { scopeless
                (136273 return 1)
              }
            }
          }
        }
        label _unused_continueLabel[136286]
        label _breakLabel[136285]
      }
      (136323 return 0)
    }
    function oneNonRange[136329]() param : _unknown[51]
    {
      {
        unknown dim[136359] 0
        unknown tmp[136360] "maybe param" "temp"
        (136372 'move' tmp[136360](136370 call chpl_compute_low_param_loop_bound 0(136337 call -(136333 call . args c"size") 1)))
        unknown tmp[136361] "maybe param" "temp"
        (136385 'move' tmp[136361](136383 call chpl_compute_high_param_loop_bound 0(136377 call -(136379 call . args c"size") 1)))
        unknown tmp[136362] "maybe param" "temp"
        (136388 'move' tmp[136362] 1)
        ParamForLoop[136390]
        { dim[136359] tmp[136360] tmp[136361] tmp[136362]
          {
            if(136353 call _cond_test(136348 call !(136347 call isRange(136345 call args dim))))
            {
              { scopeless
                (136351 return 1)
              }
            }
          }
        }
        label _unused_continueLabel[136364]
        label _breakLabel[136363]
      }
      (136401 return 0)
    }
    (136418 return(136416 call &&(136411 call &&(136407 call allValid)(136410 call oneRange))(136415 call oneNonRange)))
  }
  function =[136428](ref arg a[136425] :
  _distribution, arg b[136431] :
  _distribution) : _unknown[51] "assignop"
  {
    if(136588 call _cond_test(136439 call ==(136435 call . a c"_value") nil[44]))
    {
      (136453 'move' a(136452 call chpl__autoCopy(136450 call(136446 call . b c"clone"))))
    }
    {
      { scopeless
        if(136584 call _cond_test(136469 call ==(136465 call .(136462 call .(136457 call . a c"_value") c"_doms") c"size") 0))
        {
          if(136504 call _cond_test(136481 call !=(136475 'typeof'(136472 call . a c"_value"))(136480 'typeof'(136477 call . b c"_value"))))
          {
            { scopeless
              (136502 call compilerError "type mismatch in distribution assignment")
            }
          }
          if(136537 call _cond_test(136518 call ==(136511 call . a c"_value")(136515 call . b c"_value")))
          {
          }
          {
            { scopeless
              (136535 call(136527 call .(136522 call . a c"_value") c"dsiAssign")(136531 call . b c"_value"))
            }
          }
          if(136557 call _cond_test(136548 call _isPrivatized(136544 call . a c"_instance")))
          {
            { scopeless
              (136555 call _reprivatize(136551 call . a c"_value"))
            }
          }
        }
        {
          (136581 call halt "assignment to distributions with declared domains is not yet supported")
        }
      }
    }
  }
  function =[136602](ref arg a[136599] :
  _domain, arg b[136605] :
  _domain) : _unknown[51] "assignop"
  {
    if(136639 call _cond_test(136616 call !=(136609 call . a c"rank")(136613 call . b c"rank")))
    {
      { scopeless
        (136637 call compilerError "rank mismatch in domain assignment")
      }
    }
    if(136676 call _cond_test(136653 call !=(136646 call . a c"idxType")(136650 call . b c"idxType")))
    {
      { scopeless
        (136674 call compilerError "index type mismatch in domain assignment")
      }
    }
    if(136731 call _cond_test(136689 call &&(136684 call isRectangularDom a)(136688 call isRectangularDom b)))
    {
      { scopeless
        if(136726 call _cond_test(136701 call &&(136695 call !(136692 call . a c"stridable"))(136698 call . b c"stridable")))
        {
          { scopeless
            (136724 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
          }
        }
      }
    }
    (136747 call(136740 call .(136737 call . a c"_instance") c"dsiAssignDomain") b(lhsPrivate = 0))
    if(136765 call _cond_test(136755 call _isPrivatized(136751 call . a c"_instance")))
    {
      (136762 call _reprivatize(136758 call . a c"_instance"))
    }
  }
  function chpl__isLegalRectTupDomAssign[136775](arg d[136773]:_any[178](?), arg t[136777]:_any[178](?)) param : _unknown[51]
  {
    function isRangeTuple[136783](arg a[136781]:_any[178](?)) param : _unknown[51]
    {
      function peelArgs[136789](arg first[136787]:_any[178](?), arg rest[136792]:_any[178](?) ...) param : _unknown[51]
      {
        (136829 return(136826 IfExpr (136800 call >(136796 call . rest c"size") 1) then
        { scopeless
          (136811 call &&(136805 call isRange first)(136810 call peelArgs(136808 'expand_tuple' rest)))
        } else
        { scopeless
          (136824 call &&(136816 call isRange first)(136823 call isRange(136821 call rest 0)))
        } ))
      }
      function peelArgs[136839](arg first[136837]:_any[178](?)) param : _unknown[51]
      {
        { scopeless
          (136845 return(136844 call isRange first))
        }
      }
      (136865 return(136862 IfExpr (136854 call !(136853 call isTuple a)) then
      { scopeless
        0
      } else
      { scopeless
        (136861 call peelArgs(136859 'expand_tuple' a))
      } ))
    }
    function strideSafe[136874](arg d[136872]:_any[178](?), arg rt[136876]:_any[178](?), param arg dim[136880] :
    int[13] =
    0) param : _unknown[51]
    {
      (136950 return(136947 IfExpr (136892 call == dim(136890 call -(136886 call . d c"rank") 1)) then
      { scopeless
        (136913 call ||(136901 call .(136900 call(136895 call . d c"dim") dim) c"stridable")(136911 call !(136908 call .(136907 call rt dim) c"stridable")))
      } else
      { scopeless
        (136945 call &&(136934 call ||(136922 call .(136921 call(136916 call . d c"dim") dim) c"stridable")(136932 call !(136929 call .(136928 call rt dim) c"stridable")))(136944 call strideSafe d rt(136942 call + dim 1)))
      } ))
    }
    (136978 return(136976 call &&(136969 call &&(136958 call isRangeTuple t)(136967 call ==(136960 call . d c"rank")(136964 call . t c"size")))(136975 call strideSafe d t)))
  }
  function =[136988](ref arg a[136985] :
  _domain, arg b[136991] :
  _tuple) : _unknown[51] "assignop"
  {
    if(137082 call _cond_test(136998 call chpl__isLegalRectTupDomAssign a b))
    {
      (137005 call = a(137003 call chpl__buildDomainExpr(137001 'expand_tuple' b)))
    }
    {
      (137014 call(137010 call . a c"clear"))
      {
        unknown _indexOfInterest[137039] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[137040] "expr temp" "temp"
        (137049 'move' _iterator[137040](137047 call _getIterator(137059 call chpl_direct_counted_range_iter 0(137055 call . b c"size"))))
        Defer
        {
          {
            (137075 call _freeIterator _iterator[137040])
          }
        }
        { scopeless type
          (137064 'move' _indexOfInterest[137039](137061 call iteratorIndex _iterator[137040]))
        }
        ForLoop[137041]
        {
          unknown ind[137068] "index var" "insert auto destroy"
          (137070 'move' ind[137068] _indexOfInterest[137039])
          {
            (137036 call(137028 call . a c"add")(137034 call b ind))
          }
          label _continueLabel[137044]
          _indexOfInterest[137039]
          _iterator[137040]
        }
        label _breakLabel[137045]
      }
    }
  }
  function =[137095](ref arg d[137092] :
  _domain, arg r[137101] :
  (137100 call range ?[260])) : _unknown[51] "assignop"
  {
    (137109 call = d(137107 call chpl__buildDomainExpr r))
  }
  function =[137121](ref arg a[137118] :
  _domain, arg b[137123]:_any[178](?)) : _unknown[51] "assignop"
  {
    if(137150 call _cond_test(137128 call isRectangularDom a))
    {
      { scopeless
        (137148 call compilerError "Illegal assignment to a rectangular domain")
      }
    }
    (137161 call(137157 call . a c"clear"))
    {
      unknown _indexOfInterest[137174] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137175] "expr temp" "temp"
      (137184 'move' _iterator[137175](137182 call _getIterator b))
      Defer
      {
        {
          (137200 call _freeIterator _iterator[137175])
        }
      }
      { scopeless type
        (137189 'move' _indexOfInterest[137174](137186 call iteratorIndex _iterator[137175]))
      }
      ForLoop[137176]
      {
        unknown ind[137193] "index var" "insert auto destroy"
        (137195 'move' ind[137193] _indexOfInterest[137174])
        {
          (137171 call(137166 call . a c"add") ind)
        }
        label _continueLabel[137179]
        _indexOfInterest[137174]
        _iterator[137175]
      }
      label _breakLabel[137180]
    }
  }
  function chpl__serializeAssignment[137217](arg a[137214] :
  (137211 call chpl__buildArrayRuntimeType nil[44]), arg b[137219]:_any[178](?)) param : _unknown[51]
  {
    if(137237 call _cond_test(137232 call &&(137226 call !=(137222 call . a c"rank") 1)(137231 call isRange b)))
    {
      { scopeless
        (137235 return 1)
      }
    }
    if(137298 call _cond_test(137293 call ||(137263 call &&(137255 call &&(137247 call !(137246 call isRectangularArr a))(137253 call !(137252 call isAssociativeArr a)))(137261 call !(137260 call isSparseArr a)))(137291 call &&(137283 call &&(137275 call &&(137268 call isArray b)(137273 call !(137272 call isRectangularArr b)))(137281 call !(137280 call isAssociativeArr b)))(137289 call !(137288 call isSparseArr b)))))
    {
      { scopeless
        (137296 return 1)
      }
    }
    (137304 return 0)
  }
  function chpl__compatibleForBulkTransfer[137316](arg a[137313] :
  (137310 call chpl__buildArrayRuntimeType nil[44]), arg b[137321] :
  (137318 call chpl__buildArrayRuntimeType nil[44]), param arg kind[137325] :
  _tElt) param : _unknown[51]
  {
    if(137334 call _cond_test(137329 call ! useBulkTransfer))
    {
      { scopeless
        (137332 return 0)
      }
    }
    if(137353 call _cond_test(137348 call !=(137341 call . a c"eltType")(137345 call . b c"eltType")))
    {
      { scopeless
        (137351 return 0)
      }
    }
    if(137368 call _cond_test(137363 call == kind(137360 call . _tElt c"move")))
    {
      { scopeless
        (137366 return 1)
      }
    }
    if(137394 call _cond_test(137389 call &&(137380 call == kind(137377 call . _tElt c"initCopy"))(137388 call isConstCopyableType(137384 call . a c"eltType"))))
    {
      { scopeless
        (137392 return 1)
      }
    }
    if(137411 call _cond_test(137406 call !(137405 call chpl__supportedDataTypeForBulkTransfer(137401 call . a c"eltType"))))
    {
      { scopeless
        (137409 return 0)
      }
    }
    (137417 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137425](arg t[137423]:_any[178](?)) param : _unknown[51]
  {
    if(137489 call _cond_test(137437 call ||(137431 call isSubtype t borrowed[211](?))(137436 call isSubtype t unmanaged[220](?))))
    {
      (137440 return 0)
    }
    {
      { scopeless
        if(137484 call _cond_test(137451 call ||(137446 call isRecordType t)(137450 call isTupleType t)))
        {
          (137457 return(137456 call isPODType t))
        }
        {
          { scopeless
            if(137480 call _cond_test(137463 call isUnionType t))
            {
              (137465 return 0)
            }
            {
              { scopeless
                unknown x[137469] "unsafe" t
                (137472 'end of statement')
              }
              (137478 return(137477 call chpl__supportedDataTypeForBulkTransfer x))
            }
          }
        }
      }
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137503](arg x[137500] :
  string[26]) param : _unknown[51]
  {
    { scopeless
      (137506 return 0)
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137517](arg x[137514] :
  bytes[24]) param : _unknown[51]
  {
    { scopeless
      (137520 return 0)
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137531](arg x[137528] :
  _syncvar) param : _unknown[51]
  {
    { scopeless
      (137534 return 0)
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137545](arg x[137542] :
  _singlevar) param : _unknown[51]
  {
    { scopeless
      (137548 return 0)
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137559](arg x[137556] :
  _domain) param : _unknown[51]
  {
    { scopeless
      (137562 return 0)
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137575](arg x[137572] :
  (137569 call chpl__buildArrayRuntimeType nil[44])) param : _unknown[51]
  {
    { scopeless
      (137578 return 0)
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137589](arg x[137586] :
  _distribution) param : _unknown[51]
  {
    { scopeless
      (137592 return 1)
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137603](arg x[137600] :
  locale[28]) param : _unknown[51]
  {
    { scopeless
      (137606 return 1)
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137617](arg x[137614] :
  chpl_anycomplex) param : _unknown[51]
  {
    { scopeless
      (137620 return 1)
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137632](arg x[137629] :
  (137628 'to borrowed class from unknown' object)) param : _unknown[51]
  {
    { scopeless
      (137635 return 0)
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137644](arg x[137642]:_any[178](?)) param : _unknown[51]
  {
    { scopeless
      (137647 return 1)
    }
  }
  function checkArrayShapesUponAssignment[137660](arg a[137657] :
  (137654 call chpl__buildArrayRuntimeType nil[44]), arg b[137665] :
  (137662 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "no doc"
  {
    if(137851 call _cond_test(137676 call &&(137671 call isRectangularArr a)(137675 call isRectangularArr b)))
    {
      { scopeless
        const aDims[137690] "const"(137689 call(137685 call .(137682 call .(137679 call . a c"_value") c"dom") c"dsiDims"))
        const bDims[137705] "const"(137704 call(137700 call .(137697 call .(137694 call . b c"_value") c"dom") c"dsiDims"))
        (137708 'end of statement')
      }
      (137722 call compilerAssert(137719 call ==(137712 call . aDims c"size")(137716 call . bDims c"size")))
      {
        unknown i[137810] 0
        unknown tmp[137811] "maybe param" "temp"
        (137823 'move' tmp[137811](137821 call chpl_compute_low_param_loop_bound 0(137730 call -(137726 call . aDims c"size") 1)))
        unknown tmp[137812] "maybe param" "temp"
        (137836 'move' tmp[137812](137834 call chpl_compute_high_param_loop_bound 0(137828 call -(137830 call . aDims c"size") 1)))
        unknown tmp[137813] "maybe param" "temp"
        (137839 'move' tmp[137813] 1)
        ParamForLoop[137841]
        { i[137810] tmp[137811] tmp[137812] tmp[137813]
          {
            if(137804 call _cond_test(137748 call !=(137738 call .(137737 call aDims i) c"size")(137745 call .(137744 call bDims i) c"size")))
            {
              { scopeless
                (137802 call halt "assigning between arrays of different shapes in dimension " i ": "(137775 call .(137774 call aDims i) c"size") " vs. "(137799 call .(137798 call bDims i) c"size"))
              }
            }
          }
        }
        label _unused_continueLabel[137815]
        label _breakLabel[137814]
      }
    }
    {
    }
  }
  function =[137866](ref arg a[137863] :
  (137860 call chpl__buildArrayRuntimeType nil[44]), arg b[137871] :
  (137868 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "assignop" "inline"
  {
    if(137905 call _cond_test(137882 call !=(137875 call . a c"rank")(137879 call . b c"rank")))
    {
      { scopeless
        (137903 call compilerError "rank mismatch in array assignment")
      }
    }
    if(137920 call _cond_test(137916 call ==(137912 call . b c"_value") nil[44]))
    {
      { scopeless
        (137918 return)
      }
    }
    if(137938 call _cond_test(137933 call ==(137926 call . a c"_value")(137930 call . b c"_value")))
    {
      (137935 return)
    }
    if(137960 call _cond_test(137956 call &&(137947 call ==(137943 call . a c"size") 0)(137954 call ==(137950 call . b c"size") 0)))
    {
      { scopeless
        (137958 return)
      }
    }
    if(137972 call _cond_test boundsChecking)
    {
      { scopeless
        (137970 call checkArrayShapesUponAssignment a b)
      }
    }
    (137988 call chpl__uncheckedArrayTransfer a b(kind =(137984 call . _tElt c"assign")))
  }
  type _tElt[137999] def move[137993]:_tElt[137999] def initCopy[137995]:_tElt[137999] def assign[137997]:_tElt[137999]
  function needsInitWorkaround[138006](arg t[138004]:_any[178](?)) param : _unknown[51] "private"
  {
    (138027 return(138025 call ||(138018 call ||(138012 call isSubtype t _array)(138017 call isSubtype t _domain))(138024 call isSubtype t _distribution)))
  }
  function initCopyAfterTransfer[138040](ref arg a[138037] :
  (138034 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "private" "ignore transfer errors"
  {
    if(138106 call _cond_test(138048 call needsInitWorkaround(138044 call . a c"eltType")))
    {
      Forall {
        induction variables:
          
          unknown ai[138079] "index var" "insert auto destroy"
        iterated expressions:
          (138051 call . a c"_dom")
        shadow variables:
        other variables
          forall body
        {
          { scopeless
            unknown aa[138058] "ref var"(138057 call a ai)
            (138061 'end of statement')
          }
          { scopeless
            unknown copy[138068] "no auto destroy" aa(138064 call . a c"eltType")
            (138071 'end of statement')
          }
          (138076 '=' aa copy)
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138102] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          { scopeless
            unknown copy[138090] "no auto destroy" aa(138086 call . a c"eltType")
            (138093 'end of statement')
          }
          (138099 '=' aa copy)
        }
      }
    }
  }
  function fixRuntimeType[138117](arg eltType[138115]:_any[178](?), ref arg elt[138119]:_any[178](?)) : _unknown[51] "private"
  {
    { scopeless
      unknown runtimeTypesDiffer[138122] 0
      (138125 'end of statement')
    }
    if(138255 call _cond_test(138137 call ||(138131 call isSubtype eltType _array)(138136 call isSubtype eltType _domain)))
    {
      if(138181 call _cond_test(138143 call isSubtype eltType _array))
      {
        { scopeless
          const lhsDomain[138148] "const" "ref var"(138147 call chpl__domainFromArrayRuntimeType eltType)
          (138151 'end of statement')
        }
        { scopeless
          const rhsDomain[138157] "const" "ref var"(138154 call . elt c"_dom")
          (138160 'end of statement')
        }
        if(138177 call _cond_test(138169 call !=(138162 call . lhsDomain c"_instance")(138166 call . rhsDomain c"_instance")))
        {
          (138173 call = runtimeTypesDiffer 1)
        }
      }
      if(138228 call _cond_test(138190 call isSubtype eltType _domain))
      {
        { scopeless
          const lhsDist[138195] "const" "ref var"(138194 call chpl__distributionFromDomainRuntimeType eltType)
          (138198 'end of statement')
        }
        { scopeless
          const rhsDist[138204] "const" "ref var"(138201 call . elt c"dist")
          (138207 'end of statement')
        }
        if(138224 call _cond_test(138216 call !=(138209 call . lhsDist c"_instance")(138213 call . rhsDist c"_instance")))
        {
          (138220 call = runtimeTypesDiffer 1)
        }
      }
      if(138251 call _cond_test runtimeTypesDiffer)
      {
        { scopeless
          unknown copy[138235] "no auto destroy" elt eltType
          (138238 'end of statement')
        }
        (138243 call chpl__autoDestroy elt)
        (138249 '=' elt copy)
      }
    }
  }
  function fixEltRuntimeTypesAfterTransfer[138269](ref arg a[138266] :
  (138263 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "private"
  {
    if(138323 call _cond_test(138277 call needsInitWorkaround(138273 call . a c"eltType")))
    {
      Forall {
        induction variables:
          
          unknown ai[138302] "index var" "insert auto destroy"
        iterated expressions:
          (138280 call . a c"_dom")
        shadow variables:
        other variables
          forall body
        {
          { scopeless
            unknown aa[138287] "ref var"(138286 call a ai)
            (138290 'end of statement')
          }
          (138299 call fixRuntimeType(138294 call . a c"eltType") aa)
        }
      }
    }
    {
      Forall {
        induction variables:
          
          unknown aa[138319] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        other variables
          forall body
        {
          (138315 call fixRuntimeType(138310 call . a c"eltType") aa)
        }
      }
    }
  }
  function chpl__uncheckedArrayTransfer[138338](ref arg a[138335] :
  (138332 call chpl__buildArrayRuntimeType nil[44]), arg b[138343] :
  (138340 call chpl__buildArrayRuntimeType nil[44]), param arg kind[138346]:_any[178](?)) : _unknown[51] "inline"
  {
    { scopeless
      unknown done[138349] 0
      (138352 'end of statement')
    }
    if(138475 call _cond_test(138359 call !(138358 call chpl__serializeAssignment a b)))
    {
      if(138397 call _cond_test(138366 call chpl__compatibleForBulkTransfer a b kind))
      {
        (138373 call = done(138372 call chpl__bulkTransferArray a b))
      }
      {
        { scopeless
          if(138393 call _cond_test(138382 call chpl__compatibleForWidePtrBulkTransfer a b kind))
          {
            (138389 call = done(138388 call chpl__bulkTransferPtrArray a b))
          }
        }
      }
      if(138471 call _cond_test done)
      {
        if(138465 call _cond_test(138420 call &&(138409 call == kind(138406 call . _tElt c"initCopy"))(138418 call !(138417 call isPODType(138413 call . a c"eltType")))))
        {
          (138425 call initCopyAfterTransfer a)
        }
        {
          { scopeless
            if(138461 call _cond_test(138453 call &&(138433 call == kind(138430 call . _tElt c"move"))(138451 call ||(138442 call isSubtype(138437 call . a c"eltType") _array)(138450 call isSubtype(138445 call . a c"eltType") _domain))))
            {
              (138458 call fixEltRuntimeTypesAfterTransfer a)
            }
          }
        }
      }
    }
    if(138490 call _cond_test(138480 call ! done))
    {
      (138487 call chpl__transferArray a b kind)
    }
  }
  function chpl__compatibleForWidePtrBulkTransfer[138500](arg a[138498]:_any[178](?), arg b[138502]:_any[178](?), param arg kind[138508] =
  (138505 call . _tElt c"assign")) param : _unknown[51]
  {
    if(138517 call _cond_test(138512 call ! useBulkPtrTransfer))
    {
      { scopeless
        (138515 return 0)
      }
    }
    if(138548 call _cond_test(138543 call !(138541 call &&(138531 call(138527 call .(138524 call . a c"_value") c"isDefaultRectangular"))(138540 call(138536 call .(138533 call . b c"_value") c"isDefaultRectangular")))))
    {
      { scopeless
        (138546 return 0)
      }
    }
    if(138566 call _cond_test(138561 call !=(138554 call . a c"eltType")(138558 call . b c"eltType")))
    {
      { scopeless
        (138564 return 0)
      }
    }
    if(138583 call _cond_test(138578 call !(138577 call isClass(138573 call . a c"eltType"))))
    {
      { scopeless
        (138581 return 0)
      }
    }
    if(138598 call _cond_test(138594 call isOwnedClass(138590 call . a c"eltType")))
    {
      { scopeless
        (138596 return 0)
      }
    }
    if(138613 call _cond_test(138609 call isSharedClass(138605 call . a c"eltType")))
    {
      { scopeless
        (138611 return 0)
      }
    }
    (138619 return 1)
  }
  function chpl__bulkTransferPtrArray[138631](ref arg a[138628] :
  (138625 call chpl__buildArrayRuntimeType nil[44]), arg b[138636] :
  (138633 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline"
  {
    { scopeless
      const aDom[138643] "const"(138640 call . a c"_dom")
      (138646 'end of statement')
    }
    { scopeless
      const bDom[138652] "const"(138649 call . b c"_dom")
      (138655 'end of statement')
    }
    if(138663 call _cond_test(138658 call != aDom bDom))
    {
      { scopeless
        (138661 return 0)
      }
    }
    if(138704 call _cond_test(138693 'is wide pointer'(138692 call a(138688 call . aDom c"low"))))
    {
      (138701 return(138700 call chpl__bulkTransferArray a aDom b bDom))
    }
    (138709 return 0)
  }
  function chpl__bulkTransferArray[138723](ref arg a[138720] :
  (138718 call chpl__buildArrayRuntimeType unknown AD[138715]), arg b[138730] :
  (138728 call chpl__buildArrayRuntimeType unknown BD[138725])) : _unknown[51] "inline"
  {
    (138740 return(138739 call chpl__bulkTransferArray a AD b BD))
  }
  function chpl__bulkTransferArray[138753](ref arg a[138750] :
  (138747 call chpl__buildArrayRuntimeType nil[44]), arg AD[138756] :
  _domain, const  ref arg b[138762] :
  (138759 call chpl__buildArrayRuntimeType nil[44]), arg BD[138766] :
  _domain) : _unknown[51] "inline"
  {
    (138782 return(138781 call chpl__bulkTransferArray(138771 call . a c"_value") AD(138777 call . b c"_value") BD))
  }
  function chpl__bulkTransferArray[138791](arg destClass[138789]:_any[178](?), arg destDom[138794] :
  _domain, arg srcClass[138797]:_any[178](?), arg srcDom[138800] :
  _domain) : _unknown[51] "inline"
  {
    { scopeless
      unknown success[138804] 0
      (138807 'end of statement')
    }
    function bulkTransferDebug[138815](arg msg[138812] :
    string[26]) : _unknown[51] "inline"
    {
      if(138840 call _cond_test debugBulkTransfer)
      {
        { scopeless
          (138838 call chpl_debug_writeln "proc =(a:[],b:[]): " msg)
        }
      }
    }
    (138867 call bulkTransferDebug "in chpl__bulkTransferArray")
    if(139131 call _cond_test(138895 call(138870 call . Reflection c"canResolveMethod") destClass "doiBulkTransferFromKnown" destDom srcClass srcDom))
    {
      (138915 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (138928 call = success(138927 call(138920 call . destClass c"doiBulkTransferFromKnown") destDom srcClass srcDom))
    }
    {
      { scopeless
        if(139126 call _cond_test(138957 call(138932 call . Reflection c"canResolveMethod") srcClass "doiBulkTransferToKnown" srcDom destClass destDom))
        {
          (138977 call bulkTransferDebug "attempting doiBulkTransferToKnown")
          (138990 call = success(138989 call(138982 call . srcClass c"doiBulkTransferToKnown") srcDom destClass destDom))
        }
        {
          { scopeless
            if(139121 call _cond_test(139019 call(138994 call . Reflection c"canResolveMethod") destClass "doiBulkTransferFromAny" destDom srcClass srcDom))
            {
              (139039 call bulkTransferDebug "attempting doiBulkTransferFromAny")
              (139052 call = success(139051 call(139044 call . destClass c"doiBulkTransferFromAny") destDom srcClass srcDom))
            }
            {
              { scopeless
                if(139117 call _cond_test(139081 call(139056 call . Reflection c"canResolveMethod") srcClass "doiBulkTransferToAny" srcDom destClass destDom))
                {
                  (139101 call bulkTransferDebug "attempting doiBulkTransferToAny")
                  (139114 call = success(139113 call(139106 call . srcClass c"doiBulkTransferToAny") srcDom destClass destDom))
                }
              }
            }
          }
        }
      }
    }
    if(139179 call _cond_test success)
    {
      { scopeless
        (139156 call bulkTransferDebug "successfully completed bulk transfer")
      }
    }
    {
      { scopeless
        (139177 call bulkTransferDebug "bulk transfer did not happen")
      }
    }
    (139186 return success)
  }
  function chpl__transferArray[139198](ref arg a[139195] :
  (139192 call chpl__buildArrayRuntimeType nil[44]), const  ref arg b[139200]:_any[178](?), param arg kind[139206] =
  (139203 call . _tElt c"assign")) : _unknown[51] "inline" "ignore transfer errors" "find user line"
  {
    if(140121 call _cond_test(139237 call ||(139221 call ==(139216 call . a c"eltType")(139220 'typeof' b))(139235 call &&(139229 call _isPrimitiveType(139225 call . a c"eltType"))(139234 call _isPrimitiveType(139232 'typeof' b)))))
    {
      if(139366 call _cond_test(139253 call ||(139244 call == kind(139241 call . _tElt c"move"))(139251 call == kind(139248 call . _tElt c"initCopy"))))
      {
        if(139331 call _cond_test(139261 call needsInitWorkaround(139257 call . a c"eltType")))
        {
          Forall {
            induction variables:
              
              unknown ai[139298] "index var" "insert auto destroy"
            iterated expressions:
              (139264 call . a c"_dom")
            shadow variables:
              b[139268] 'in' intent
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              { scopeless
                unknown aa[139277] "ref var"(139276 call a ai)
                (139280 'end of statement')
              }
              { scopeless
                unknown copy[139287] "no auto destroy" b(139283 call . a c"eltType")
                (139290 'end of statement')
              }
              (139295 '=' aa copy)
            }
          }
        }
        {
          Forall {
            induction variables:
              
              unknown aa[139327] "index var" "insert auto destroy"
            iterated expressions:
              a
            shadow variables:
              b[139305] 'in' intent
                init block
                {
                }
                deinit block
                {
                }
            other variables
              forall body
            {
              { scopeless
                unknown copy[139315] "no auto destroy" b(139311 call . a c"eltType")
                (139318 'end of statement')
              }
              (139324 '=' aa copy)
            }
          }
        }
      }
      {
        { scopeless
          if(139362 call _cond_test(139341 call == kind(139338 call . _tElt c"assign")))
          {
            Forall {
              induction variables:
                
                unknown aa[139358] "index var" "insert auto destroy"
              iterated expressions:
                a
              shadow variables:
                b[139346] 'in' intent
                  init block
                  {
                  }
                  deinit block
                  {
                  }
              other variables
                forall body
              {
                (139353 call = aa b)
              }
            }
          }
        }
      }
    }
    {
      { scopeless
        if(140117 call _cond_test(139376 call chpl__serializeAssignment a b))
        {
          if(139863 call _cond_test(139382 call == kind(139379 call . _tElt c"move")))
          {
            if(139584 call _cond_test(139390 call needsInitWorkaround(139386 call . a c"eltType")))
            {
              {
                unknown _indexOfInterest[139446] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139447] "expr temp" "temp"
                (139465 'move' _iterator[139447](139402 call _build_tuple(139459 call _getIterator(139456 call . a c"_dom"))(139463 call _getIterator b)))
                Defer
                {
                  {
                    (139495 call _freeIterator _iterator[139447])
                  }
                }
                { scopeless type
                  (139470 'move' _indexOfInterest[139446](139467 call iteratorIndex _iterator[139447]))
                }
                ForLoop[139448]
                {
                  (139475 call _check_tuple_var_decl _indexOfInterest[139446] 2)
                  unknown ai[139481] "index var" "insert auto destroy"
                  (139483 'move' ai[139481](139479 call _indexOfInterest[139446] 0))
                  unknown bb[139488] "index var" "insert auto destroy"
                  (139490 'move' bb[139488](139486 call _indexOfInterest[139446] 1))
                  {
                    { scopeless
                      unknown aa[139407] "ref var"(139406 call a ai)
                      (139410 'end of statement')
                    }
                    (139435 '=' aa(139434 'steal' bb))
                    (139444 call fixRuntimeType(139439 call . a c"eltType") aa)
                  }
                  label _continueLabel[139451]
                  _indexOfInterest[139446]
                  _iterator[139447]
                }
                label _breakLabel[139452]
              }
            }
            {
              {
                unknown _indexOfInterest[139531] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[139532] "expr temp" "temp"
                (139546 'move' _iterator[139532](139511 call _build_tuple(139541 call _getIterator a)(139544 call _getIterator b)))
                Defer
                {
                  {
                    (139576 call _freeIterator _iterator[139532])
                  }
                }
                { scopeless type
                  (139551 'move' _indexOfInterest[139531](139548 call iteratorIndex _iterator[139532]))
                }
                ForLoop[139533]
                {
                  (139556 call _check_tuple_var_decl _indexOfInterest[139531] 2)
                  unknown aa[139562] "index var" "insert auto destroy"
                  (139564 'move' aa[139562](139560 call _indexOfInterest[139531] 0))
                  unknown bb[139569] "index var" "insert auto destroy"
                  (139571 'move' bb[139569](139567 call _indexOfInterest[139531] 1))
                  {
                    (139519 '=' aa(139518 'steal' bb))
                    (139529 call fixRuntimeType(139524 call . a c"eltType") aa)
                  }
                  label _continueLabel[139536]
                  _indexOfInterest[139531]
                  _iterator[139532]
                }
                label _breakLabel[139537]
              }
            }
          }
          {
            { scopeless
              if(139858 call _cond_test(139594 call == kind(139591 call . _tElt c"initCopy")))
              {
                if(139774 call _cond_test(139602 call needsInitWorkaround(139598 call . a c"eltType")))
                {
                  {
                    unknown _indexOfInterest[139639] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[139640] "expr temp" "temp"
                    (139658 'move' _iterator[139640](139614 call _build_tuple(139652 call _getIterator(139649 call . a c"_dom"))(139656 call _getIterator b)))
                    Defer
                    {
                      {
                        (139688 call _freeIterator _iterator[139640])
                      }
                    }
                    { scopeless type
                      (139663 'move' _indexOfInterest[139639](139660 call iteratorIndex _iterator[139640]))
                    }
                    ForLoop[139641]
                    {
                      (139668 call _check_tuple_var_decl _indexOfInterest[139639] 2)
                      unknown ai[139674] "index var" "insert auto destroy"
                      (139676 'move' ai[139674](139672 call _indexOfInterest[139639] 0))
                      unknown bb[139681] "index var" "insert auto destroy"
                      (139683 'move' bb[139681](139679 call _indexOfInterest[139639] 1))
                      {
                        { scopeless
                          unknown aa[139619] "ref var"(139618 call a ai)
                          (139622 'end of statement')
                        }
                        { scopeless
                          unknown copy[139629] "no auto destroy" b(139625 call . a c"eltType")
                          (139632 'end of statement')
                        }
                        (139637 '=' aa copy)
                      }
                      label _continueLabel[139644]
                      _indexOfInterest[139639]
                      _iterator[139640]
                    }
                    label _breakLabel[139645]
                  }
                }
                {
                  {
                    unknown _indexOfInterest[139721] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[139722] "expr temp" "temp"
                    (139736 'move' _iterator[139722](139704 call _build_tuple(139731 call _getIterator a)(139734 call _getIterator b)))
                    Defer
                    {
                      {
                        (139766 call _freeIterator _iterator[139722])
                      }
                    }
                    { scopeless type
                      (139741 'move' _indexOfInterest[139721](139738 call iteratorIndex _iterator[139722]))
                    }
                    ForLoop[139723]
                    {
                      (139746 call _check_tuple_var_decl _indexOfInterest[139721] 2)
                      unknown aa[139752] "index var" "insert auto destroy"
                      (139754 'move' aa[139752](139750 call _indexOfInterest[139721] 0))
                      unknown bb[139759] "index var" "insert auto destroy"
                      (139761 'move' bb[139759](139757 call _indexOfInterest[139721] 1))
                      {
                        { scopeless
                          unknown copy[139710] "no auto destroy" b(139706 call . a c"eltType")
                          (139713 'end of statement')
                        }
                        (139719 '=' aa copy)
                      }
                      label _continueLabel[139726]
                      _indexOfInterest[139721]
                      _iterator[139722]
                    }
                    label _breakLabel[139727]
                  }
                }
              }
              {
                { scopeless
                  if(139854 call _cond_test(139784 call == kind(139781 call . _tElt c"assign")))
                  {
                    {
                      unknown _indexOfInterest[139801] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[139802] "expr temp" "temp"
                      (139816 'move' _iterator[139802](139794 call _build_tuple(139811 call _getIterator a)(139814 call _getIterator b)))
                      Defer
                      {
                        {
                          (139846 call _freeIterator _iterator[139802])
                        }
                      }
                      { scopeless type
                        (139821 'move' _indexOfInterest[139801](139818 call iteratorIndex _iterator[139802]))
                      }
                      ForLoop[139803]
                      {
                        (139826 call _check_tuple_var_decl _indexOfInterest[139801] 2)
                        unknown aa[139832] "index var" "insert auto destroy"
                        (139834 'move' aa[139832](139830 call _indexOfInterest[139801] 0))
                        unknown bb[139839] "index var" "insert auto destroy"
                        (139841 'move' bb[139839](139837 call _indexOfInterest[139801] 1))
                        {
                          (139797 call = aa bb)
                        }
                        label _continueLabel[139806]
                        _indexOfInterest[139801]
                        _iterator[139802]
                      }
                      label _breakLabel[139807]
                    }
                  }
                }
              }
            }
          }
        }
        {
          if(140111 call _cond_test(139874 call == kind(139871 call . _tElt c"move")))
          {
            if(139968 call _cond_test(139882 call needsInitWorkaround(139878 call . a c"eltType")))
            {
              Forall {
                induction variables:
                  
                  unknown ai[139925] "index var" "insert auto destroy"
                  
                  unknown bb[139927] "index var" "insert auto destroy"
                iterated expressions:
                  (139890 call . a c"_dom")
                  b
                shadow variables:
                other variables
                  forall body
                {
                  {
                    { scopeless
                      unknown aa[139900] "ref var"(139899 call a ai)
                      (139903 'end of statement')
                    }
                    (139912 '=' aa(139911 'steal' bb))
                    (139921 call fixRuntimeType(139916 call . a c"eltType") aa)
                  }
                }
              }
            }
            {
              Forall {
                induction variables:
                  
                  unknown aa[139962] "index var" "insert auto destroy"
                  
                  unknown bb[139964] "index var" "insert auto destroy"
                iterated expressions:
                  a
                  b
                shadow variables:
                other variables
                  forall body
                {
                  {
                    (139948 '=' aa(139947 'steal' bb))
                    (139958 call fixRuntimeType(139953 call . a c"eltType") aa)
                  }
                }
              }
            }
          }
          {
            { scopeless
              if(140106 call _cond_test(139978 call == kind(139975 call . _tElt c"initCopy")))
              {
                if(140066 call _cond_test(139986 call needsInitWorkaround(139982 call . a c"eltType")))
                {
                  Forall {
                    induction variables:
                      
                      unknown ai[140026] "index var" "insert auto destroy"
                      
                      unknown bb[140028] "index var" "insert auto destroy"
                    iterated expressions:
                      (139994 call . a c"_dom")
                      b
                    shadow variables:
                    other variables
                      forall body
                    {
                      {
                        { scopeless
                          unknown aa[140004] "ref var"(140003 call a ai)
                          (140007 'end of statement')
                        }
                        { scopeless
                          unknown copy[140014] "no auto destroy" bb(140010 call . a c"eltType")
                          (140017 'end of statement')
                        }
                        (140022 '=' aa copy)
                      }
                    }
                  }
                }
                {
                  Forall {
                    induction variables:
                      
                      unknown aa[140060] "index var" "insert auto destroy"
                      
                      unknown bb[140062] "index var" "insert auto destroy"
                    iterated expressions:
                      a
                      b
                    shadow variables:
                    other variables
                      forall body
                    {
                      {
                        { scopeless
                          unknown copy[140047] "no auto destroy" bb(140043 call . a c"eltType")
                          (140050 'end of statement')
                        }
                        (140056 '=' aa copy)
                      }
                    }
                  }
                }
              }
              {
                { scopeless
                  if(140102 call _cond_test(140076 call == kind(140073 call . _tElt c"assign")))
                  {
                    Forall {
                      induction variables:
                        
                        unknown aa[140096] "index var" "insert auto destroy"
                        
                        unknown bb[140098] "index var" "insert auto destroy"
                      iterated expressions:
                        a
                        b
                      shadow variables:
                      other variables
                        forall body
                      {
                        {
                          (140090 call = aa bb)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  {
    (139213 call <=(139210 'lifetime_of' a)(139212 'lifetime_of' b))
  }
  function chpl__transferArray[140138](ref arg a[140135] :
  (140132 call chpl__buildArrayRuntimeType nil[44]), param arg b[140140]:_any[178](?), param arg kind[140146] =
  (140143 call . _tElt c"assign")) : _unknown[51] "inline" "find user line"
  {
    Forall {
      induction variables:
        
        unknown aa[140157] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140153 call = aa b)
      }
    }
  }
  function =[140171](ref arg a[140168] :
  (140165 call chpl__buildArrayRuntimeType nil[44]), arg b[140174] :
  _domain) : _unknown[51] "assignop" "inline"
  {
    if(140192 call _cond_test(140185 call !=(140178 call . a c"rank")(140182 call . b c"rank")))
    {
      { scopeless
        (140190 call compilerError "rank mismatch in array assignment")
      }
    }
    if(140229 call _cond_test(140206 call &&(140201 call isAssociativeDom b)(140205 call isRectangularArr a)))
    {
      { scopeless
        (140227 call compilerError "cannot assign to rectangular arrays from associative domains")
      }
    }
    (140238 call chpl__transferArray a b)
  }
  function =[140250](arg a[140247] :
  (140244 call chpl__buildArrayRuntimeType nil[44]), arg b[140256] :
  (140255 call range ?[260])) : _unknown[51] "assignop" "inline"
  {
    if(140293 call _cond_test(140264 call ==(140260 call . a c"rank") 1))
    {
      { scopeless
        (140270 call chpl__transferArray a b)
      }
    }
    {
      { scopeless
        (140291 call compilerError "cannot assign from ranges to multidimensional arrays")
      }
    }
  }
  function =[140310](ref arg a[140307] :
  (140304 call chpl__buildArrayRuntimeType nil[44]), arg b[140312]:_any[178](?)) : _unknown[51] "assignop" "inline"
  {
    (140318 call chpl__transferArray a b)
  }
  function helpInitArrFromTuple[140327](ref arg j[140325]:_any[178](?), param arg rank[140330] :
  int[13], ref arg a[140336] :
  (140333 call chpl__buildArrayRuntimeType nil[44]), arg b[140340] :
  _tuple, param arg kind[140344] :
  _tElt) : _unknown[51] "private"
  {
    { scopeless
      unknown idxType[140373] "type variable"(140357 call .(140354 call . a c"_dom") c"idxType")
      unknown strType[140370] "type variable"(140369 call chpl__signedType(140365 call .(140362 call . a c"_dom") c"intIdxType"))
    }
    { scopeless
      const stride[140396] "const"(140393 call .(140392 call(140381 call .(140378 call . a c"_dom") c"dim")(140389 call -(140385 call . a c"rank") rank)) c"stride")
      const start[140418] "const"(140415 call .(140414 call(140403 call .(140400 call . a c"_dom") c"dim")(140411 call -(140407 call . a c"rank") rank)) c"firstAsInt")
      (140421 'end of statement')
    }
    if(140716 call _cond_test(140424 call == rank 1))
    {
      {
        unknown i[140581] 0
        unknown tmp[140582] "maybe param" "temp"
        (140594 'move' tmp[140582](140592 call chpl_compute_low_param_loop_bound 0(140432 call -(140428 call . b c"size") 1)))
        unknown tmp[140583] "maybe param" "temp"
        (140607 'move' tmp[140583](140605 call chpl_compute_high_param_loop_bound 0(140599 call -(140601 call . b c"size") 1)))
        unknown tmp[140584] "maybe param" "temp"
        (140610 'move' tmp[140584] 1)
        ParamForLoop[140612]
        { i[140581] tmp[140582] tmp[140583] tmp[140584]
          {
            (140460 call =(140445 call j(140442 call -(140438 call . a c"rank") rank))(140459 call chpl__intToIdx idxType(140457 call +(140451 call _cast strType start)(140455 call * i stride))))
            { scopeless
              unknown dst[140468] "ref var"(140467 call a j)
              (140471 'end of statement')
            }
            { scopeless
              const src[140476] "const" "ref var"(140475 call b i)
              (140479 'end of statement')
            }
            if(140576 call _cond_test(140485 call == kind(140482 call . _tElt c"move")))
            {
              if(140526 call _cond_test(140490 call isArray dst))
              {
                { scopeless
                  unknown newArr[140499] "no auto destroy" "no copy"(140498 call chpl__coerceMove(140493 call . a c"eltType") src)
                  (140502 'end of statement')
                }
                (140508 '=' dst newArr)
              }
              {
                (140514 '=' dst src)
                (140524 call fixRuntimeType(140519 call . a c"eltType") dst)
              }
            }
            {
              { scopeless
                if(140571 call _cond_test(140536 call == kind(140533 call . _tElt c"initCopy")))
                {
                  { scopeless
                    unknown copy[140543] "no auto destroy" src(140539 call . a c"eltType")
                    (140546 'end of statement')
                  }
                  (140552 '=' dst copy)
                }
                {
                  { scopeless
                    if(140567 call _cond_test(140559 call == kind(140556 call . _tElt c"assign")))
                    {
                      (140563 call = dst src)
                    }
                  }
                }
              }
            }
          }
        }
        label _unused_continueLabel[140586]
        label _breakLabel[140585]
      }
    }
    {
      {
        unknown i[140675] 0
        unknown tmp[140676] "maybe param" "temp"
        (140688 'move' tmp[140676](140686 call chpl_compute_low_param_loop_bound 0(140628 call -(140624 call . b c"size") 1)))
        unknown tmp[140677] "maybe param" "temp"
        (140701 'move' tmp[140677](140699 call chpl_compute_high_param_loop_bound 0(140693 call -(140695 call . b c"size") 1)))
        unknown tmp[140678] "maybe param" "temp"
        (140704 'move' tmp[140678] 1)
        ParamForLoop[140706]
        { i[140675] tmp[140676] tmp[140677] tmp[140678]
          {
            (140656 call =(140641 call j(140638 call -(140634 call . a c"rank") rank))(140655 call chpl__intToIdx idxType(140653 call +(140647 call _cast strType start)(140651 call * i stride))))
            (140673 call helpInitArrFromTuple j(140665 call - rank 1) a(140671 call b i) kind)
          }
        }
        label _unused_continueLabel[140680]
        label _breakLabel[140679]
      }
    }
  }
  {
    (140351 call <(140348 'lifetime_of' a)(140350 'lifetime_of' b))
  }
  function initArrFromTuple[140731](ref arg a[140728] :
  (140725 call chpl__buildArrayRuntimeType nil[44]), arg b[140734] :
  _tuple, param arg kind[140738] :
  _tElt) : _unknown[51] "private"
  {
    { scopeless
      unknown j[140754](140752 call *(140742 call . a c"rank")(140749 call .(140746 call . a c"_dom") c"idxType"))
      (140757 'end of statement')
    }
    (140769 call helpInitArrFromTuple j(140763 call . a c"rank") a b kind)
  }
  function =[140781](ref arg a[140778] :
  (140775 call chpl__buildArrayRuntimeType nil[44]), arg b[140784] :
  _tuple) : _unknown[51] "assignop"
  {
    (140799 call initArrFromTuple a b(140796 call . _tElt c"assign"))
  }
  where {
    (140790 call isRectangularArr a)
  }
  function _desync[140811](arg t[140808] :
  _syncvar) type : _unknown[51]
  {
    { scopeless
      unknown x[140814] t
      (140817 'end of statement')
    }
    (140823 return(140820 call . x c"valType"))
  }
  function _desync[140833](arg t[140830] :
  _singlevar) type : _unknown[51]
  {
    { scopeless
      unknown x[140836] t
      (140839 'end of statement')
    }
    (140845 return(140842 call . x c"valType"))
  }
  function _desync[140853](arg t[140851]:_any[178](?)) type : _unknown[51]
  {
    (140856 return t)
  }
  function desyncEltType[140867](arg t[140864] :
  _array) type : _unknown[51] "private"
  {
    unknown eltType[140873] "type variable"(140872 call chpl__eltTypeFromArrayRuntimeType t)
    (140881 return(140880 call _desync eltType))
  }
  function =[140893](ref arg a[140890] :
  (140887 call chpl__buildArrayRuntimeType nil[44]), arg b[140902] :
  (140901 call _desync(140897 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[140913] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140909 call = e b)
      }
    }
  }
  function +=[140927](arg a[140924] :
  (140921 call chpl__buildArrayRuntimeType nil[44]), arg b[140936] :
  (140935 call _desync(140931 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[140947] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140943 call += e b)
      }
    }
  }
  function -=[140961](arg a[140958] :
  (140955 call chpl__buildArrayRuntimeType nil[44]), arg b[140970] :
  (140969 call _desync(140965 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[140981] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (140977 call -= e b)
      }
    }
  }
  function *=[140995](arg a[140992] :
  (140989 call chpl__buildArrayRuntimeType nil[44]), arg b[141004] :
  (141003 call _desync(140999 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[141015] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141011 call *= e b)
      }
    }
  }
  function /=[141029](arg a[141026] :
  (141023 call chpl__buildArrayRuntimeType nil[44]), arg b[141038] :
  (141037 call _desync(141033 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[141049] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141045 call /= e b)
      }
    }
  }
  function %=[141063](arg a[141060] :
  (141057 call chpl__buildArrayRuntimeType nil[44]), arg b[141072] :
  (141071 call _desync(141067 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[141083] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141079 call %= e b)
      }
    }
  }
  function **=[141097](arg a[141094] :
  (141091 call chpl__buildArrayRuntimeType nil[44]), arg b[141106] :
  (141105 call _desync(141101 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[141117] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141113 call **= e b)
      }
    }
  }
  function &=[141131](arg a[141128] :
  (141125 call chpl__buildArrayRuntimeType nil[44]), arg b[141140] :
  (141139 call _desync(141135 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[141151] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141147 call &= e b)
      }
    }
  }
  function |=[141165](arg a[141162] :
  (141159 call chpl__buildArrayRuntimeType nil[44]), arg b[141174] :
  (141173 call _desync(141169 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[141185] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141181 call |= e b)
      }
    }
  }
  function ^=[141199](arg a[141196] :
  (141193 call chpl__buildArrayRuntimeType nil[44]), arg b[141208] :
  (141207 call _desync(141203 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[141219] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141215 call ^= e b)
      }
    }
  }
  function >>=[141233](arg a[141230] :
  (141227 call chpl__buildArrayRuntimeType nil[44]), arg b[141242] :
  (141241 call _desync(141237 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[141253] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141249 call >>= e b)
      }
    }
  }
  function <<=[141267](arg a[141264] :
  (141261 call chpl__buildArrayRuntimeType nil[44]), arg b[141276] :
  (141275 call _desync(141271 call . a c"eltType"))) : _unknown[51] "assignop"
  {
    Forall {
      induction variables:
        
        unknown e[141287] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      other variables
        forall body
      {
        (141283 call <<= e b)
      }
    }
  }
  function chpl_by[141299](arg a[141296] :
  _domain, arg b[141301]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown r[141324](141322 call *(141304 call . a c"rank")(141321 call range(141312 call .(141309 call . a c"_value") c"idxType")(141317 call . BoundedRangeType c"bounded") 1))
      (141327 'end of statement')
    }
    { scopeless
      unknown t[141339](141338 call _makeIndexTuple(141331 call . a c"rank") b(expand = 1))
      (141342 'end of statement')
    }
    {
      unknown i[141373] 0
      unknown tmp[141374] "maybe param" "temp"
      (141386 'move' tmp[141374](141384 call chpl_compute_low_param_loop_bound 0(141349 call -(141345 call . a c"rank") 1)))
      unknown tmp[141375] "maybe param" "temp"
      (141399 'move' tmp[141375](141397 call chpl_compute_high_param_loop_bound 0(141391 call -(141393 call . a c"rank") 1)))
      unknown tmp[141376] "maybe param" "temp"
      (141402 'move' tmp[141376] 1)
      ParamForLoop[141404]
      { i[141373] tmp[141374] tmp[141375] tmp[141376]
        { scopeless
          (141370 call =(141356 call r i)(141368 call chpl_by(141363 call(141358 call . a c"dim") i)(141367 call t i)))
        }
      }
      label _unused_continueLabel[141378]
      label _breakLabel[141377]
    }
    (141434 return(141413 'new'(141433 call _domain(141416 call . a c"dist")(141421 call . a c"rank")(141428 call .(141425 call . a c"_value") c"idxType") 1 r)))
  }
  function chpl_align[141444](arg a[141441] :
  _domain, arg b[141446]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown r[141472](141470 call *(141449 call . a c"rank")(141469 call range(141457 call .(141454 call . a c"_value") c"idxType")(141462 call . BoundedRangeType c"bounded")(141466 call . a c"stridable")))
      (141475 'end of statement')
    }
    { scopeless
      unknown t[141487](141486 call _makeIndexTuple(141479 call . a c"rank") b(expand = 1))
      (141490 'end of statement')
    }
    {
      unknown i[141521] 0
      unknown tmp[141522] "maybe param" "temp"
      (141534 'move' tmp[141522](141532 call chpl_compute_low_param_loop_bound 0(141497 call -(141493 call . a c"rank") 1)))
      unknown tmp[141523] "maybe param" "temp"
      (141547 'move' tmp[141523](141545 call chpl_compute_high_param_loop_bound 0(141539 call -(141541 call . a c"rank") 1)))
      unknown tmp[141524] "maybe param" "temp"
      (141550 'move' tmp[141524] 1)
      ParamForLoop[141552]
      { i[141521] tmp[141522] tmp[141523] tmp[141524]
        { scopeless
          (141518 call =(141504 call r i)(141516 call chpl_align(141511 call(141506 call . a c"dim") i)(141515 call t i)))
        }
      }
      label _unused_continueLabel[141526]
      label _breakLabel[141525]
    }
    (141585 return(141561 'new'(141584 call _domain(141564 call . a c"dist")(141569 call . a c"rank")(141576 call .(141573 call . a c"_value") c"idxType")(141580 call . a c"stridable") r)))
  }
  function <=>[141599](arg x[141596] :
  (141594 call chpl__buildArrayRuntimeType unknown xD[141591]), arg y[141606] :
  (141604 call chpl__buildArrayRuntimeType unknown yD[141601])) : _unknown[51] "inline"
  {
    { scopeless
      unknown hasSwapped[141611] 0 bool[10]
      (141614 'end of statement')
    }
    if(141701 call _cond_test(141670 call &&(141637 call &&(141626 call ==(141620 'typeof'(141617 call . x c"_value"))(141625 'typeof'(141622 call . y c"_value")))(141635 call !(141634 call chpl__isArrayView(141630 call . x c"_value"))))(141669 call(141640 call . Reflection c"canResolveMethod")(141644 call . x c"_value") "doiSwap"(141666 call . y c"_value"))))
    {
      if(141696 call _cond_test(141674 call == xD yD))
      {
        (141688 call(141680 call .(141677 call . x c"_value") c"doiSwap")(141684 call . y c"_value"))
        (141693 call = hasSwapped 1)
      }
    }
    if(141729 call _cond_test(141706 call ! hasSwapped))
    {
      Forall {
        induction variables:
          
          unknown a[141723] "index var" "insert auto destroy"
          
          unknown b[141725] "index var" "insert auto destroy"
        iterated expressions:
          x
          y
        shadow variables:
        other variables
          forall body
        {
          (141719 call <=> a b)
        }
      }
    }
  }
  function reshape[141743](arg A[141740] :
  (141737 call chpl__buildArrayRuntimeType nil[44]), arg D[141746] :
  _domain) : _unknown[51]
  {
    if(141781 call _cond_test(141753 call !(141752 call isRectangularDom D)))
    {
      { scopeless
        (141779 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(141777 call _cast string[26](141775 'typeof' D)))
      }
    }
    if(141860 call _cond_test(141795 call !=(141788 call . A c"size")(141792 call . D c"size")))
    {
      { scopeless
        (141858 call halt "reshape(A,D) is invoked when A has "(141817 call . A c"size") " elements, but D has "(141838 call . D c"size") " indices")
      }
    }
    { scopeless
      unknown B[141892](141886 for (141878 call _build_tuple i a)  in  zip(141883 call _build_tuple D A) do
      {
        a
      } )(141873 call chpl__buildArrayRuntimeType(141871 call chpl__ensureDomainExpr D)(141868 call . A c"eltType"))
      (141895 'end of statement')
    }
    (141897 return B)
  }
  function reshape[141907](arg A[141904] :
  _iteratorRecord, arg D[141910] :
  _domain) : _unknown[51] "no doc"
  {
    if(141929 call _cond_test(141917 call !(141916 call isRectangularDom D)))
    {
      { scopeless
        (141927 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(141925 call _cast string[26](141923 'typeof' D)))
      }
    }
    { scopeless
      unknown B[141952](141946 for (141938 call _build_tuple i a)  in  zip(141943 call _build_tuple D A) do
      {
        a
      } )
      (141955 'end of statement')
    }
    (141957 return B)
  }
  function linearize[141965](arg Xs[141963]:_any[178](?)) : _unknown[51] "iterator fn" "no doc"
  {
    {
      unknown _indexOfInterest[141972] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141973] "expr temp" "temp"
      (141982 'move' _iterator[141973](141980 call _getIterator Xs))
      Defer
      {
        {
          (141998 call _freeIterator _iterator[141973])
        }
      }
      { scopeless type
        (141987 'move' _indexOfInterest[141972](141984 call iteratorIndex _iterator[141973]))
      }
      ForLoop[141974]
      {
        unknown x[141991] "index var" "insert auto destroy"
        (141993 'move' x[141991] _indexOfInterest[141972])
        { scopeless
          (141970 yield x)
        }
        label _continueLabel[141977]
        _indexOfInterest[141972]
        _iterator[141973]
      }
      label _breakLabel[141978]
    }
  }
  function chpl__unalias[142014](arg x[142011] :
  _domain) : _unknown[51] "inline" "unalias fn"
  {
    if(142036 call _cond_test(142029 call !=(142023 call _to_unmanaged(142021 'typeof'(142018 call . x c"_instance")))(142028 'typeof'(142025 call . x c"_instance"))))
    {
      { scopeless
        (142034 call compilerError "Domain on borrow created")
      }
    }
    if(142064 call _cond_test(142043 call . x c"_unowned"))
    {
      { scopeless
        unknown ret[142047] "no auto destroy" x
        (142050 'end of statement')
      }
      (142053 return ret)
    }
    {
      { scopeless
        unknown ret[142056] "no copy" x
        (142059 'end of statement')
      }
      (142062 return ret)
    }
  }
  function chpl__initCopy[142078](const  ref arg rhs[142075] :
  (142072 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "init copy fn"
  {
    { scopeless
      unknown lhs[142086] "no copy"(142085 call chpl__coerceCopy(142082 'typeof' rhs) rhs)
      (142089 'end of statement')
    }
    (142092 return lhs)
  }
  function chpl__autoCopy[142104](arg x[142101] :
  (142098 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "auto copy fn"
  {
    { scopeless
      unknown b[142110] "no copy"(142109 call chpl__initCopy x)
      (142113 'end of statement')
    }
    (142116 return b)
  }
  function chpl__coerceCopy[142126](arg dstType[142123] :
  _domain, arg rhs[142129] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    { scopeless
      unknown rhsIsLayout[142146] "param"(142145 call(142141 call .(142136 call .(142133 call . rhs c"dist") c"_value") c"dsiIsLayout"))
      (142149 'end of statement')
    }
    { scopeless
      unknown lhs[142152] dstType
      (142155 'end of statement')
    }
    lhs
    (142160 call = lhs rhs)
    if(142203 call _cond_test(142178 call &&(142174 call(142170 call .(142167 call .(142164 call . lhs c"dist") c"_value") c"dsiIsLayout"))(142176 call ! rhsIsLayout)))
    {
      { scopeless
        (142201 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
      }
    }
    (142209 return lhs)
  }
  function chpl__coerceMove[142219](arg dstType[142216] :
  _domain, in arg rhs[142222] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    { scopeless
      unknown rhsIsLayout[142237] "param"(142236 call(142232 call .(142229 call .(142226 call . rhs c"dist") c"_value") c"dsiIsLayout"))
      (142240 'end of statement')
    }
    { scopeless
      unknown lhs[142243] dstType
      (142246 'end of statement')
    }
    lhs
    (142251 call = lhs rhs)
    if(142276 call _cond_test(142269 call &&(142265 call(142261 call .(142258 call .(142255 call . lhs c"dist") c"_value") c"dsiIsLayout"))(142267 call ! rhsIsLayout)))
    {
      { scopeless
        (142274 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
      }
    }
    (142282 return lhs)
  }
  function chpl__coerceCopy[142292](arg dstType[142289] :
  _domain, arg rhs[142295] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    { scopeless
      unknown lhs[142299] dstType
      (142302 'end of statement')
    }
    lhs
    if(142327 call _cond_test(142310 call chpl__isLegalRectTupDomAssign lhs rhs))
    {
      (142317 call = lhs(142315 call chpl__buildDomainExpr(142313 'expand_tuple' rhs)))
    }
    {
      (142323 call = lhs rhs)
    }
    (142332 return lhs)
  }
  function chpl__coerceMove[142342](arg dstType[142339] :
  _domain, in arg rhs[142345] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    { scopeless
      unknown lhs[142349] dstType
      (142352 'end of statement')
    }
    lhs
    if(142377 call _cond_test(142360 call chpl__isLegalRectTupDomAssign lhs rhs))
    {
      (142367 call = lhs(142365 call chpl__buildDomainExpr(142363 'expand_tuple' rhs)))
    }
    {
      (142373 call = lhs rhs)
    }
    (142382 return lhs)
  }
  function chpl__coerceCopy[142392](arg dstType[142389] :
  _domain, arg rhs[142398] :
  (142397 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    { scopeless
      unknown lhs[142402] dstType
      (142405 'end of statement')
    }
    lhs
    (142414 call = lhs(142412 call chpl__buildDomainExpr rhs))
    (142418 return lhs)
  }
  function chpl__coerceMove[142428](arg dstType[142425] :
  _domain, in arg rhs[142434] :
  (142433 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    { scopeless
      unknown lhs[142438] dstType
      (142441 'end of statement')
    }
    lhs
    (142450 call = lhs(142448 call chpl__buildDomainExpr rhs))
    (142454 return lhs)
  }
  function chpl__coerceCopy[142464](arg dstType[142461] :
  _domain, arg rhs[142467] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    { scopeless
      unknown lhs[142471] dstType
      (142474 'end of statement')
    }
    if(142485 call _cond_test(142479 call isRectangularDom lhs))
    {
      { scopeless
        (142483 call compilerError "Illegal assignment to a rectangular domain")
      }
    }
    (142495 call(142491 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142508] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142509] "expr temp" "temp"
      (142518 'move' _iterator[142509](142516 call _getIterator rhs))
      Defer
      {
        {
          (142534 call _freeIterator _iterator[142509])
        }
      }
      { scopeless type
        (142523 'move' _indexOfInterest[142508](142520 call iteratorIndex _iterator[142509]))
      }
      ForLoop[142510]
      {
        unknown ind[142527] "index var" "insert auto destroy"
        (142529 'move' ind[142527] _indexOfInterest[142508])
        {
          (142505 call(142500 call . lhs c"add") ind)
        }
        label _continueLabel[142513]
        _indexOfInterest[142508]
        _iterator[142509]
      }
      label _breakLabel[142514]
    }
    (142542 return lhs)
  }
  function chpl__coerceMove[142552](arg dstType[142549] :
  _domain, arg rhs[142555] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    { scopeless
      unknown lhs[142559] dstType
      (142562 'end of statement')
    }
    if(142573 call _cond_test(142567 call isRectangularDom lhs))
    {
      { scopeless
        (142571 call compilerError "Illegal assignment to a rectangular domain")
      }
    }
    (142583 call(142579 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142596] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142597] "expr temp" "temp"
      (142606 'move' _iterator[142597](142604 call _getIterator rhs))
      Defer
      {
        {
          (142622 call _freeIterator _iterator[142597])
        }
      }
      { scopeless type
        (142611 'move' _indexOfInterest[142596](142608 call iteratorIndex _iterator[142597]))
      }
      ForLoop[142598]
      {
        unknown ind[142615] "index var" "insert auto destroy"
        (142617 'move' ind[142615] _indexOfInterest[142596])
        {
          (142593 call(142588 call . lhs c"add") ind)
        }
        label _continueLabel[142601]
        _indexOfInterest[142596]
        _iterator[142597]
      }
      label _breakLabel[142602]
    }
    (142630 return lhs)
  }
  function chpl__coerceCopy[142640](arg dstType[142637] :
  _domain, arg rhs[142642]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    { scopeless
      unknown lhs[142645] dstType
      (142648 'end of statement')
    }
    if(142659 call _cond_test(142653 call isRectangularDom lhs))
    {
      { scopeless
        (142657 call compilerError "Illegal assignment to a rectangular domain")
      }
    }
    (142669 call(142665 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142682] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142683] "expr temp" "temp"
      (142692 'move' _iterator[142683](142690 call _getIterator rhs))
      Defer
      {
        {
          (142708 call _freeIterator _iterator[142683])
        }
      }
      { scopeless type
        (142697 'move' _indexOfInterest[142682](142694 call iteratorIndex _iterator[142683]))
      }
      ForLoop[142684]
      {
        unknown ind[142701] "index var" "insert auto destroy"
        (142703 'move' ind[142701] _indexOfInterest[142682])
        {
          (142679 call(142674 call . lhs c"add") ind)
        }
        label _continueLabel[142687]
        _indexOfInterest[142682]
        _iterator[142683]
      }
      label _breakLabel[142688]
    }
    (142716 return lhs)
  }
  function chpl__coerceMove[142726](arg dstType[142723] :
  _domain, in arg rhs[142728]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    { scopeless
      unknown lhs[142731] dstType
      (142734 'end of statement')
    }
    if(142745 call _cond_test(142739 call isRectangularDom lhs))
    {
      { scopeless
        (142743 call compilerError "Illegal assignment to a rectangular domain")
      }
    }
    (142755 call(142751 call . lhs c"clear"))
    {
      unknown _indexOfInterest[142768] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142769] "expr temp" "temp"
      (142778 'move' _iterator[142769](142776 call _getIterator rhs))
      Defer
      {
        {
          (142794 call _freeIterator _iterator[142769])
        }
      }
      { scopeless type
        (142783 'move' _indexOfInterest[142768](142780 call iteratorIndex _iterator[142769]))
      }
      ForLoop[142770]
      {
        unknown ind[142787] "index var" "insert auto destroy"
        (142789 'move' ind[142787] _indexOfInterest[142768])
        {
          (142765 call(142760 call . lhs c"add") ind)
        }
        label _continueLabel[142773]
        _indexOfInterest[142768]
        _iterator[142769]
      }
      label _breakLabel[142774]
    }
    (142802 return lhs)
  }
  function chpl__coerceCopy[142812](arg dstType[142809] :
  _array, arg rhs[142815] :
  _array) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[142822] "type variable"(142821 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[142830] "const" "ref var"(142829 call chpl__domainFromArrayRuntimeType dstType)
      (142833 'end of statement')
    }
    { scopeless
      unknown lhs[142843] "no copy" "unsafe"(142842 call(142835 call . dom c"buildArray") eltType(initElts = 0))
      (142846 'end of statement')
    }
    if(142862 call _cond_test(142855 call !=(142848 call . lhs c"rank")(142852 call . rhs c"rank")))
    {
      { scopeless
        (142860 call compilerError "rank mismatch in array assignment")
      }
    }
    if(142915 call _cond_test(142871 call !(142870 call isCopyableType eltType)))
    {
      { scopeless
        (142913 call compilerError "Cannot copy-initialize array because element type '"(142894 call _cast string[26] eltType) "' cannot be copy-initialized")
      }
    }
    if(142989 call _cond_test(142925 call ==(142921 call . rhs c"_value") nil[44]))
    {
    }
    {
      { scopeless
        if(142984 call _cond_test(142936 call ==(142929 call . lhs c"_value")(142933 call . rhs c"_value")))
        {
        }
        {
          { scopeless
            if(142980 call _cond_test(142953 call &&(142944 call ==(142940 call . lhs c"size") 0)(142951 call ==(142947 call . rhs c"size") 0)))
            {
            }
            {
              if(142963 call _cond_test boundsChecking)
              {
                { scopeless
                  (142961 call checkArrayShapesUponAssignment lhs rhs)
                }
              }
              (142978 call chpl__uncheckedArrayTransfer lhs rhs(kind =(142974 call . _tElt c"initCopy")))
            }
          }
        }
      }
    }
    (143004 call(143000 call .(142995 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143007 return lhs)
  }
  function chpl__coerceMove[143017](arg dstType[143014] :
  _array, in arg rhs[143020] :
  _array) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143027] "type variable"(143026 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[143035] "const" "ref var"(143034 call chpl__domainFromArrayRuntimeType dstType)
      (143038 'end of statement')
    }
    { scopeless
      unknown typeMismatch[143050] "param"(143048 call !=(143043 'typeof'(143040 call . rhs c"_instance"))(143047 call chpl__instanceTypeFromArrayRuntimeType dstType))
      (143053 'end of statement')
    }
    { scopeless
      unknown moveElts[143057] "param"(143055 call ! typeMismatch)
      (143060 'end of statement')
    }
    if(143081 call _cond_test(143075 call && moveElts(143073 call ==(143063 call . dom c"_instance")(143070 call .(143067 call . rhs c"_dom") c"_instance"))))
    {
      (143078 return rhs)
    }
    { scopeless
      unknown lhs[143094] "no copy" "unsafe"(143093 call(143086 call . dom c"buildArray") eltType(initElts = 0))
      (143097 'end of statement')
    }
    if(143113 call _cond_test(143106 call !=(143099 call . lhs c"rank")(143103 call . rhs c"rank")))
    {
      { scopeless
        (143111 call compilerError "rank mismatch in array assignment")
      }
    }
    if(143200 call _cond_test(143123 call ==(143119 call . rhs c"_value") nil[44]))
    {
    }
    {
      { scopeless
        if(143195 call _cond_test(143134 call ==(143127 call . lhs c"_value")(143131 call . rhs c"_value")))
        {
        }
        {
          { scopeless
            if(143191 call _cond_test(143151 call &&(143142 call ==(143138 call . lhs c"size") 0)(143149 call ==(143145 call . rhs c"size") 0)))
            {
            }
            {
              if(143161 call _cond_test boundsChecking)
              {
                { scopeless
                  (143159 call checkArrayShapesUponAssignment lhs rhs)
                }
              }
              { scopeless
                unknown kind[143179] "param"(143176 IfExpr  moveElts then
                { scopeless
                  (143169 call . _tElt c"move")
                } else
                { scopeless
                  (143173 call . _tElt c"initCopy")
                } )
                (143182 'end of statement')
              }
              (143189 call chpl__uncheckedArrayTransfer lhs rhs(kind = kind))
            }
          }
        }
      }
    }
    (143219 call _do_destroy_arr(143207 call . rhs c"_unowned")(143212 call . rhs c"_instance")(deinitElts =(143216 call ! moveElts)))
    (143229 call(143225 call .(143222 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143232 return lhs)
  }
  function chpl__coerceCopy[143242](arg dstType[143239] :
  _array, arg rhs[143245] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143252] "type variable"(143251 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[143260] "const" "ref var"(143259 call chpl__domainFromArrayRuntimeType dstType)
      (143263 'end of statement')
    }
    { scopeless
      unknown lhs[143273] "no copy"(143272 call(143265 call . dom c"buildArray") eltType(initElts = 0))
      (143276 'end of statement')
    }
    if(143292 call _cond_test(143285 call !=(143278 call . lhs c"rank")(143282 call . rhs c"rank")))
    {
      { scopeless
        (143290 call compilerError "rank mismatch in array assignment")
      }
    }
    if(143312 call _cond_test(143305 call &&(143300 call isAssociativeDom rhs)(143304 call isRectangularArr lhs)))
    {
      { scopeless
        (143310 call compilerError "cannot assign to rectangular arrays from associative domains")
      }
    }
    if(143344 call _cond_test(143321 call !(143320 call isPODType eltType)))
    {
      { scopeless
        (143342 call compilerError "cannot assign to array from domain of non-POD indices")
      }
    }
    (143358 call chpl__transferArray lhs rhs(kind =(143354 call . _tElt c"initCopy")))
    (143368 call(143364 call .(143361 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143371 return lhs)
  }
  function chpl__coerceMove[143381](arg dstType[143378] :
  _array, in arg rhs[143384] :
  _domain) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143391] "type variable"(143390 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[143399] "const" "ref var"(143398 call chpl__domainFromArrayRuntimeType dstType)
      (143402 'end of statement')
    }
    { scopeless
      unknown lhs[143412] "no copy"(143411 call(143404 call . dom c"buildArray") eltType(initElts = 0))
      (143415 'end of statement')
    }
    if(143431 call _cond_test(143424 call !=(143417 call . lhs c"rank")(143421 call . rhs c"rank")))
    {
      { scopeless
        (143429 call compilerError "rank mismatch in array assignment")
      }
    }
    if(143451 call _cond_test(143444 call &&(143439 call isAssociativeDom rhs)(143443 call isRectangularArr lhs)))
    {
      { scopeless
        (143449 call compilerError "cannot assign to rectangular arrays from associative domains")
      }
    }
    if(143467 call _cond_test(143460 call !(143459 call isPODType eltType)))
    {
      { scopeless
        (143465 call compilerError "cannot assign to array from domain of non-POD indices")
      }
    }
    (143481 call chpl__transferArray lhs rhs(kind =(143477 call . _tElt c"initCopy")))
    (143491 call(143487 call .(143484 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143494 return lhs)
  }
  function chpl__coerceCopy[143504](arg dstType[143501] :
  _array, arg rhs[143510] :
  (143509 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143517] "type variable"(143516 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[143525] "const" "ref var"(143524 call chpl__domainFromArrayRuntimeType dstType)
      (143528 'end of statement')
    }
    { scopeless
      unknown lhs[143538] "no copy"(143537 call(143530 call . dom c"buildArray") eltType(initElts = 0))
      (143541 'end of statement')
    }
    if(143554 call _cond_test(143547 call !=(143543 call . lhs c"rank") 1))
    {
      { scopeless
        (143552 call compilerError "cannot assign from ranges to multidimensional arrays")
      }
    }
    (143568 call chpl__transferArray lhs rhs(kind =(143564 call . _tElt c"initCopy")))
    (143578 call(143574 call .(143571 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143581 return lhs)
  }
  function chpl__coerceMove[143591](arg dstType[143588] :
  _array, in arg rhs[143597] :
  (143596 call range ?[260])) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143604] "type variable"(143603 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[143612] "const" "ref var"(143611 call chpl__domainFromArrayRuntimeType dstType)
      (143615 'end of statement')
    }
    { scopeless
      unknown lhs[143625] "no copy"(143624 call(143617 call . dom c"buildArray") eltType(initElts = 0))
      (143628 'end of statement')
    }
    if(143641 call _cond_test(143634 call !=(143630 call . lhs c"rank") 1))
    {
      { scopeless
        (143639 call compilerError "cannot assign from ranges to multidimensional arrays")
      }
    }
    (143655 call chpl__transferArray lhs rhs(kind =(143651 call . _tElt c"initCopy")))
    (143665 call(143661 call .(143658 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143668 return lhs)
  }
  function chpl__coerceCopy[143678](arg dstType[143675] :
  _array, arg rhs[143681] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143688] "type variable"(143687 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[143696] "const" "ref var"(143695 call chpl__domainFromArrayRuntimeType dstType)
      (143699 'end of statement')
    }
    { scopeless
      unknown lhs[143709] "no copy" "unsafe"(143708 call(143701 call . dom c"buildArray") eltType(initElts = 0))
      (143712 'end of statement')
    }
    if(143740 call _cond_test(143717 call !(143716 call isRectangularArr lhs)))
    {
      { scopeless
        (143738 call compilerError "Cannot assign from tuple to non-rectangular array")
      }
    }
    (143753 call initArrFromTuple lhs rhs(143750 call . _tElt c"initCopy"))
    (143763 call(143759 call .(143756 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143766 return lhs)
  }
  function chpl__coerceMove[143776](arg dstType[143773] :
  _array, in arg rhs[143779] :
  _tuple) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143786] "type variable"(143785 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[143794] "const" "ref var"(143793 call chpl__domainFromArrayRuntimeType dstType)
      (143797 'end of statement')
    }
    { scopeless
      unknown lhs[143807] "no copy" "unsafe"(143806 call(143799 call . dom c"buildArray") eltType(initElts = 0))
      (143810 'end of statement')
    }
    if(143822 call _cond_test(143815 call !(143814 call isRectangularArr lhs)))
    {
      { scopeless
        (143820 call compilerError "Cannot assign from tuple to non-rectangular array")
      }
    }
    (143835 call initArrFromTuple lhs rhs(143832 call . _tElt c"move"))
    (143845 call(143841 call .(143838 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143848 return lhs)
  }
  function chpl__coerceCopy[143858](arg dstType[143855] :
  _array, arg rhs[143864] :
  (143863 call desyncEltType dstType)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143871] "type variable"(143870 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[143879] "const" "ref var"(143878 call chpl__domainFromArrayRuntimeType dstType)
      (143882 'end of statement')
    }
    { scopeless
      unknown lhs[143892] "no copy" "unsafe"(143891 call(143884 call . dom c"buildArray") eltType(initElts = 0))
      (143895 'end of statement')
    }
    Forall {
      induction variables:
        
        unknown e[143921] "index var" "insert auto destroy"
      iterated expressions:
        lhs
      shadow variables:
        rhs[143899] 'in' intent
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        { scopeless
          unknown copy[143909] "no auto destroy" rhs(143905 call . lhs c"eltType")
          (143912 'end of statement')
        }
        (143918 '=' e copy)
      }
    }
    (143932 call(143928 call .(143925 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (143935 return lhs)
  }
  function chpl__coerceMove[143945](arg dstType[143942] :
  _array, in arg rhs[143951] :
  (143950 call desyncEltType dstType)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[143958] "type variable"(143957 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[143966] "const" "ref var"(143965 call chpl__domainFromArrayRuntimeType dstType)
      (143969 'end of statement')
    }
    { scopeless
      unknown lhs[143979] "no copy" "unsafe"(143978 call(143971 call . dom c"buildArray") eltType(initElts = 0))
      (143982 'end of statement')
    }
    Forall {
      induction variables:
        
        unknown e[144005] "index var" "insert auto destroy"
      iterated expressions:
        lhs
      shadow variables:
        rhs[143986] 'in' intent
          init block
          {
          }
          deinit block
          {
          }
      other variables
        forall body
      {
        { scopeless
          unknown copy[143993] "no auto destroy" rhs eltType
          (143996 'end of statement')
        }
        (144002 '=' e copy)
      }
    }
    (144016 call(144012 call .(144009 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144019 return lhs)
  }
  function chpl__coerceCopy[144029](arg dstType[144026] :
  _array, arg rhs[144032] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144039] "type variable"(144038 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[144047] "const" "ref var"(144046 call chpl__domainFromArrayRuntimeType dstType)
      (144050 'end of statement')
    }
    { scopeless
      unknown lhs[144060] "no copy" "unsafe"(144059 call(144052 call . dom c"buildArray") eltType(initElts = 0))
      (144063 'end of statement')
    }
    (144073 call chpl__transferArray lhs rhs(kind =(144069 call . _tElt c"initCopy")))
    (144083 call(144079 call .(144076 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144086 return lhs)
  }
  function chpl__coerceMove[144096](arg dstType[144093] :
  _array, arg rhs[144099] :
  _iteratorRecord) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144106] "type variable"(144105 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[144114] "const" "ref var"(144113 call chpl__domainFromArrayRuntimeType dstType)
      (144117 'end of statement')
    }
    { scopeless
      unknown lhs[144127] "no copy" "unsafe"(144126 call(144119 call . dom c"buildArray") eltType(initElts = 0))
      (144130 'end of statement')
    }
    (144140 call chpl__transferArray lhs rhs(kind =(144136 call . _tElt c"move")))
    (144150 call(144146 call .(144143 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144153 return lhs)
  }
  function chpl__coerceCopy[144163](arg dstType[144160] :
  _array, arg rhs[144165]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144171] "type variable"(144170 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[144179] "const" "ref var"(144178 call chpl__domainFromArrayRuntimeType dstType)
      (144182 'end of statement')
    }
    { scopeless
      unknown lhs[144192] "no copy" "unsafe"(144191 call(144184 call . dom c"buildArray") eltType(initElts = 0))
      (144195 'end of statement')
    }
    (144205 call chpl__transferArray lhs rhs(kind =(144201 call . _tElt c"initCopy")))
    (144215 call(144211 call .(144208 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144218 return lhs)
  }
  function chpl__coerceMove[144228](arg dstType[144225] :
  _array, in arg rhs[144230]:_any[178](?)) : _unknown[51] "coerce fn" "find user line"
  {
    unknown eltType[144236] "type variable"(144235 call chpl__eltTypeFromArrayRuntimeType dstType)
    { scopeless
      const dom[144244] "const" "ref var"(144243 call chpl__domainFromArrayRuntimeType dstType)
      (144247 'end of statement')
    }
    { scopeless
      unknown lhs[144257] "no copy" "unsafe"(144256 call(144249 call . dom c"buildArray") eltType(initElts = 0))
      (144260 'end of statement')
    }
    (144270 call chpl__transferArray lhs rhs(kind =(144266 call . _tElt c"initCopy")))
    (144280 call(144276 call .(144273 call . lhs c"_value") c"dsiElementInitializationComplete"))
    (144283 return lhs)
  }
  function chpl__unref[144295](arg x[144292] :
  (144289 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline" "no copy return" "unref fn"
  {
    { scopeless
      unknown ret[144305] "no auto destroy" x
      (144308 'end of statement')
    }
    (144311 return ret)
  }
  where {
    (144303 call chpl__isArrayView(144299 call . x c"_value"))
  }
  function chpl__unref[144322](arg ir[144319] :
  _iteratorRecord) : _unknown[51] "no copy return" "unref fn"
  {
    { scopeless
      unknown toArray[144328] "no auto destroy" "no copy"(144327 call chpl__initCopy ir)
      (144331 'end of statement')
    }
    (144334 return toArray)
  }
  function chpl__unref[144346](arg x[144343] :
  (144340 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline" "no copy return"
  {
    { scopeless
      unknown ret[144349] "no copy" x
      (144352 'end of statement')
    }
    (144355 return ret)
  }
  function chpl__unalias[144367](arg x[144364] :
  (144361 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "inline" "unalias fn"
  {
    { scopeless
      unknown isview[144400] "param"(144398 call ||(144387 call ||(144377 call(144373 call .(144370 call . x c"_value") c"isSliceArrayView"))(144386 call(144382 call .(144379 call . x c"_value") c"isRankChangeArrayView")))(144397 call(144393 call .(144390 call . x c"_value") c"isReindexArrayView")))
      (144403 'end of statement')
    }
    if(144429 call _cond_test isview)
    {
      { scopeless
        unknown ret[144407] "no auto destroy" x
        (144410 'end of statement')
      }
      (144415 call chpl__autoDestroy x)
      (144418 return ret)
    }
    {
      { scopeless
        unknown ret[144421] "no copy" x
        (144424 'end of statement')
      }
      (144427 return ret)
    }
  }
  function chpl__initCopy[144441](arg ir[144438] :
  _iteratorRecord) : _unknown[51] "init copy fn"
  {
    { scopeless
      unknown shape[144455](144447 'new'(144454 call _domain(144450 call . ir c"_shape_")))
      (144458 'end of statement')
    }
    (144465 call =(144461 call . shape c"_unowned") 1)
    (144473 return(144472 call chpl__initCopy_shapeHelp shape ir))
  }
  where {
    (144446 call chpl_iteratorHasDomainShape ir)
  }
  function chpl__initCopy[144484](arg ir[144481] :
  _iteratorRecord) : _unknown[51] "init copy fn"
  {
    { scopeless
      unknown shape[144505] "insert auto destroy"(144503 call chpl__buildDomainExpr(144499 call . ir c"_shape_"))
      (144508 'end of statement')
    }
    (144515 return(144514 call chpl__initCopy_shapeHelp shape ir))
  }
  where {
    (144496 call &&(144489 call chpl_iteratorHasRangeShape ir)(144494 call !(144493 call chpl_iteratorFromForExpr ir)))
  }
  function chpl__initCopy_shapeHelp[144526](arg shape[144523] :
  _domain, arg ir[144529] :
  _iteratorRecord) : _unknown[51] "ignore transfer errors"
  {
    { scopeless
      unknown result[144545] "no copy" "unsafe"(144544 call(144533 call . shape c"buildArray")(144540 call iteratorToArrayElementType(144538 'typeof' ir))(initElts = 0))
      (144548 'end of statement')
    }
    if(144580 call _cond_test(144556 call isArray(144552 call . result c"eltType")))
    {
      { scopeless
        (144578 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
      }
    }
    if(144843 call _cond_test(144588 call chpl_iteratorFromForExpr ir))
    {
      if(144759 call _cond_test(144595 call needsInitWorkaround(144591 call . result c"eltType")))
      {
        {
          unknown _indexOfInterest[144628] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144629] "expr temp" "temp"
          (144647 'move' _iterator[144629](144607 call _build_tuple(144641 call _getIterator(144638 call . result c"_dom"))(144645 call _getIterator ir)))
          Defer
          {
            {
              (144677 call _freeIterator _iterator[144629])
            }
          }
          { scopeless type
            (144652 'move' _indexOfInterest[144628](144649 call iteratorIndex _iterator[144629]))
          }
          ForLoop[144630]
          {
            (144657 call _check_tuple_var_decl _indexOfInterest[144628] 2)
            unknown ri[144663] "index var" "insert auto destroy"
            (144665 'move' ri[144663](144661 call _indexOfInterest[144628] 0))
            unknown src[144670] "index var" "insert auto destroy"
            (144672 'move' src[144670](144668 call _indexOfInterest[144628] 1))
            {
              { scopeless
                unknown r[144612] "ref var"(144611 call result ri)
                (144615 'end of statement')
              }
              { scopeless
                unknown copy[144618] "no auto destroy" src
                (144621 'end of statement')
              }
              (144626 '=' r copy)
            }
            label _continueLabel[144633]
            _indexOfInterest[144628]
            _iterator[144629]
          }
          label _breakLabel[144634]
        }
      }
      {
        {
          unknown _indexOfInterest[144706] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144707] "expr temp" "temp"
          (144721 'move' _iterator[144707](144693 call _build_tuple(144716 call _getIterator result)(144719 call _getIterator ir)))
          Defer
          {
            {
              (144751 call _freeIterator _iterator[144707])
            }
          }
          { scopeless type
            (144726 'move' _indexOfInterest[144706](144723 call iteratorIndex _iterator[144707]))
          }
          ForLoop[144708]
          {
            (144731 call _check_tuple_var_decl _indexOfInterest[144706] 2)
            unknown r[144737] "index var" "insert auto destroy"
            (144739 'move' r[144737](144735 call _indexOfInterest[144706] 0))
            unknown src[144744] "index var" "insert auto destroy"
            (144746 'move' src[144744](144742 call _indexOfInterest[144706] 1))
            {
              { scopeless
                unknown copy[144695] "no auto destroy" src
                (144698 'end of statement')
              }
              (144704 '=' r copy)
            }
            label _continueLabel[144711]
            _indexOfInterest[144706]
            _iterator[144707]
          }
          label _breakLabel[144712]
        }
      }
    }
    {
      if(144838 call _cond_test(144770 call needsInitWorkaround(144766 call . result c"eltType")))
      {
        Forall {
          induction variables:
            
            unknown ri[144804] "index var" "insert auto destroy"
            
            unknown src[144806] "index var" "insert auto destroy"
          iterated expressions:
            (144777 call . result c"_dom")
            ir
          shadow variables:
          other variables
            forall body
          {
            { scopeless
              unknown r[144787] "ref var"(144786 call result ri)
              (144790 'end of statement')
            }
            { scopeless
              unknown copy[144793] "no auto destroy" src
              (144796 'end of statement')
            }
            (144801 '=' r copy)
          }
        }
      }
      {
        Forall {
          induction variables:
            
            unknown r[144832] "index var" "insert auto destroy"
            
            unknown src[144834] "index var" "insert auto destroy"
          iterated expressions:
            result
            ir
          shadow variables:
          other variables
            forall body
          {
            { scopeless
              unknown copy[144820] "no auto destroy" src
              (144823 'end of statement')
            }
            (144829 '=' r copy)
          }
        }
      }
    }
    (144855 call(144851 call .(144848 call . result c"_value") c"dsiElementInitializationComplete"))
    (144858 return result)
  }
  function chpl__throwErrorUnchecked[144870](in arg e[144867] :
  (144865 call _owned Error)) : _unknown[51] throws "unchecked throws"
  {
    (144873 'throw' e)
  }
  function chpl__initCopy[144884](arg ir[144881] :
  _iteratorRecord) : _unknown[51] "init copy fn"
  {
    { scopeless
      unknown shapeful[144890] "param"(144889 call chpl_iteratorHasRangeShape ir)
      (144893 'end of statement')
    }
    { scopeless
      unknown r[144907](144904 IfExpr  shapeful then
      { scopeless
        (144897 call . ir c"_shape_")
      } else
      { scopeless
        (144902 call chpl_build_bounded_range 1 0)
      } )
      (144910 'end of statement')
    }
    { scopeless
      unknown i[144912] 0
      (144915 'end of statement')
    }
    { scopeless
      unknown size[144923](144921 call _cast size_t(144917 call . r c"size"))
      (144926 'end of statement')
    }
    unknown elemType[144932] "type variable"(144931 call iteratorToArrayElementType(144929 'typeof' ir))
    { scopeless
      unknown data[144940] nil[44](144938 call _ddata elemType)
      (144943 'end of statement')
    }
    { scopeless
      unknown callPostAlloc[144945] bool[10]
      (144948 'end of statement')
    }
    { scopeless
      unknown subloc[144950] c_sublocid_none
      (144953 'end of statement')
    }
    if(144969 call _cond_test(144956 call > size 0))
    {
      (144965 call = data(144964 call _ddata_allocate_noinit elemType size callPostAlloc))
    }
    Try
    {
      {
        {
          unknown _indexOfInterest[145117] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[145118] "expr temp" "temp"
          (145127 'move' _iterator[145118](145125 call _getIterator ir))
          Defer
          {
            {
              (145143 call _freeIterator _iterator[145118])
            }
          }
          { scopeless type
            (145132 'move' _indexOfInterest[145117](145129 call iteratorIndex _iterator[145118]))
          }
          ForLoop[145119]
          {
            unknown elt[145136] "index var" "insert auto destroy"
            (145138 'move' elt[145136] _indexOfInterest[145117])
            {
              { scopeless
                unknown eltCopy[144980] "no auto destroy" "no copy"(144979 'try-expr'(144978 call chpl__initCopy elt))
                (144983 'end of statement')
              }
              if(145099 call _cond_test(144987 call >= i size))
              {
                { scopeless
                  unknown oldSize[144990] size
                  (144993 'end of statement')
                }
                { scopeless
                  unknown oldData[144996] data
                  (144999 'end of statement')
                }
                if(145017 call _cond_test(145002 call == size 0))
                {
                  { scopeless
                    (145006 call = size 4)
                  }
                }
                {
                  { scopeless
                    (145014 call = size(145012 call * 2 size))
                  }
                }
                (145030 call = data(145029 call _ddata_allocate_noinit elemType size callPostAlloc))
                {
                  unknown _indexOfInterest[145053] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[145054] "expr temp" "temp"
                  (145063 'move' _iterator[145054](145061 call _getIterator(145070 call chpl_direct_counted_range_iter 0 oldSize)))
                  Defer
                  {
                    {
                      (145086 call _freeIterator _iterator[145054])
                    }
                  }
                  { scopeless type
                    (145075 'move' _indexOfInterest[145053](145072 call iteratorIndex _iterator[145054]))
                  }
                  ForLoop[145055]
                  {
                    unknown i[145079] "index var" "insert auto destroy"
                    (145081 'move' i[145079] _indexOfInterest[145053])
                    {
                      (145050 '='(145045 call data i)(145049 call oldData i))
                    }
                    label _continueLabel[145058]
                    _indexOfInterest[145053]
                    _iterator[145054]
                  }
                  label _breakLabel[145059]
                }
                (145097 call _ddata_free oldData oldSize)
              }
              (145110 '='(145108 call data i) eltCopy)
              (145114 call += i 1)
            }
            label _continueLabel[145122]
            _indexOfInterest[145117]
            _iterator[145118]
          }
          label _breakLabel[145123]
        }
      }
    }
    Catch e : Error
    {
      {
        unknown _indexOfInterest[145172] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[145173] "expr temp" "temp"
        (145182 'move' _iterator[145173](145180 call _getIterator(145190 call chpl_direct_range_iter 0(145187 call - i 1) 1)))
        Defer
        {
          {
            (145206 call _freeIterator _iterator[145173])
          }
        }
        { scopeless type
          (145195 'move' _indexOfInterest[145172](145192 call iteratorIndex _iterator[145173]))
        }
        ForLoop[145174]
        {
          unknown j[145199] "index var" "insert auto destroy"
          (145201 'move' j[145199] _indexOfInterest[145172])
          {
            (145169 call chpl__autoDestroy(145167 call data j))
          }
          label _continueLabel[145177]
          _indexOfInterest[145172]
          _iterator[145173]
        }
        label _breakLabel[145178]
      }
      (145218 call _ddata_free data size)
      (145223 call chpl__throwErrorUnchecked e)
    }
    if(145246 call _cond_test(145236 call && shapeful(145234 call < i(145231 call . r c"size"))))
    {
      { scopeless
        (145243 call = r(145241 call # r i))
      }
    }
    if(145275 call _cond_test(145252 call ! shapeful))
    {
      { scopeless
        (145272 call = r(145269 IfExpr (145257 call == i 0) then
        { scopeless
          (145261 call chpl_build_bounded_range 1 0)
        } else
        { scopeless
          (145267 call #(145264 call chpl_build_low_bounded_range capturedIteratorLowBound) i)
        } ))
      }
    }
    { scopeless
      unknown D[145284] "insert auto destroy"(145282 call chpl__buildDomainExpr r)
      (145287 'end of statement')
    }
    if(145417 call _cond_test(145290 call != data nil[44]))
    {
      if(145299 call _cond_test callPostAlloc)
      {
        { scopeless
          (145297 call _ddata_allocate_postalloc data size)
        }
      }
      { scopeless
        unknown A[145323](145322 call(145308 call . D c"buildArrayWith")(145315 'typeof'(145314 call data 0)) data(145320 call _cast int[13] size))
        (145326 'end of statement')
      }
      (145338 call chpl_decRefCountsForDomainsInArrayEltTypes(145329 call . A c"_value")(145337 'typeof'(145336 call data 0)))
      (145348 call =(145344 call .(145341 call . A c"_value") c"_decEltRefCounts") 0)
      (145370 'auto destroy runtime type' elemType)
      (145373 return A)
    }
    {
      (145382 call = data(145381 call _ddata_allocate_noinit elemType size callPostAlloc))
      if(145393 call _cond_test callPostAlloc)
      {
        { scopeless
          (145391 call _ddata_allocate_postalloc data size)
        }
      }
      { scopeless
        unknown A[145410](145409 call(145399 call . D c"buildArrayWith") elemType data(145407 call _cast int[13] size))
        (145413 'end of statement')
      }
      (145415 return A)
    }
  }
}