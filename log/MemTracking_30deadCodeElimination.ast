AST dump for MemTracking after pass deadCodeElimination.
Module use list: ChapelStandard SysCTypes 

{
  function chpl__init_MemTracking[416049]() : void[4] "insert line file info" "module init" "resolved"
  {
    const-val call_tmp[678466]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678469 'move' call_tmp[678466](544308 call chpl_config_has_value[334] c"memTrack" c"Built-in"))
    const-val call_tmp[2078317]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2078319 'move' call_tmp[2078317](2078321 '!' call_tmp[678466]))
    if call_tmp[2078317]
    {
      (544327 'move' tmp[544299] 0)
    }
    {
      const-val call_tmp[678481]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678484 'move' call_tmp[678481](544318 call chpl_config_get_value[350] c"memTrack" c"Built-in"))
      (544323 'move' tmp[544299](544321 call _command_line_cast[1353834] call_tmp[678481]))
    }
    (544301 'move' memTrack[166657] tmp[544299])
    (2050441 '_private_broadcast' memTrack[166657])
    const-val call_tmp[678486]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678489 'move' call_tmp[678486](544338 call chpl_config_has_value[334] c"memStats" c"Built-in"))
    const-val call_tmp[2078326]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2078328 'move' call_tmp[2078326](2078330 '!' call_tmp[678486]))
    if call_tmp[2078326]
    {
      (544357 'move' tmp[544329] 0)
    }
    {
      const-val call_tmp[678501]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678504 'move' call_tmp[678501](544348 call chpl_config_get_value[350] c"memStats" c"Built-in"))
      (544353 'move' tmp[544329](544351 call _command_line_cast[1353877] call_tmp[678501]))
    }
    (544331 'move' memStats[166662] tmp[544329])
    (2050443 '_private_broadcast' memStats[166662])
    const-val call_tmp[678506]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678509 'move' call_tmp[678506](544368 call chpl_config_has_value[334] c"memLeaksByType" c"Built-in"))
    const-val call_tmp[2078335]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2078337 'move' call_tmp[2078335](2078339 '!' call_tmp[678506]))
    if call_tmp[2078335]
    {
      (544387 'move' tmp[544359] 0)
    }
    {
      const-val call_tmp[678521]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678524 'move' call_tmp[678521](544378 call chpl_config_get_value[350] c"memLeaksByType" c"Built-in"))
      (544383 'move' tmp[544359](544381 call _command_line_cast[1353920] call_tmp[678521]))
    }
    (544361 'move' memLeaksByType[166667] tmp[544359])
    (2050445 '_private_broadcast' memLeaksByType[166667])
    const-val call_tmp[678526]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678529 'move' call_tmp[678526](544398 call chpl_config_has_value[334] c"memLeaks" c"Built-in"))
    const-val call_tmp[2078344]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2078346 'move' call_tmp[2078344](2078348 '!' call_tmp[678526]))
    if call_tmp[2078344]
    {
      (544417 'move' tmp[544389] 0)
    }
    {
      const-val call_tmp[678541]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678544 'move' call_tmp[678541](544408 call chpl_config_get_value[350] c"memLeaks" c"Built-in"))
      (544413 'move' tmp[544389](544411 call _command_line_cast[1353963] call_tmp[678541]))
    }
    (544391 'move' memLeaks[166672] tmp[544389])
    (2050447 '_private_broadcast' memLeaks[166672])
    const-val call_tmp[678546]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678549 'move' call_tmp[678546](544428 call chpl_config_has_value[334] c"memMax" c"Built-in"))
    const-val call_tmp[2078353]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2078355 'move' call_tmp[2078353](2078357 '!' call_tmp[678546]))
    if call_tmp[2078353]
    {
      const-val init_coerce_tmp[1354005]:uint(64)[115] "dead at end of block" "temp"
      (1354008 'move' init_coerce_tmp[1354005](1356784 'cast' uint(64)[115] 0))
      (544447 'move' tmp[544419] init_coerce_tmp[1354005])
    }
    {
      const-val call_tmp[678561]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678564 'move' call_tmp[678561](544438 call chpl_config_get_value[350] c"memMax" c"Built-in"))
      (544443 'move' tmp[544419](544441 call _command_line_cast[1354014] call_tmp[678561]))
    }
    (544421 'move' memMax[166677] tmp[544419])
    (2050449 '_private_broadcast' memMax[166677])
    const-val call_tmp[678566]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678569 'move' call_tmp[678566](544458 call chpl_config_has_value[334] c"memThreshold" c"Built-in"))
    const-val call_tmp[2078362]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2078364 'move' call_tmp[2078362](2078366 '!' call_tmp[678566]))
    if call_tmp[2078362]
    {
      const-val init_coerce_tmp[1356339]:uint(64)[115] "dead at end of block" "temp"
      (1356342 'move' init_coerce_tmp[1356339](1356788 'cast' uint(64)[115] 0))
      (544477 'move' tmp[544449] init_coerce_tmp[1356339])
    }
    {
      const-val call_tmp[678581]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678584 'move' call_tmp[678581](544468 call chpl_config_get_value[350] c"memThreshold" c"Built-in"))
      (544473 'move' tmp[544449](544471 call _command_line_cast[1356348] call_tmp[678581]))
    }
    (544451 'move' memThreshold[166682] tmp[544449])
    (2050451 '_private_broadcast' memThreshold[166682])
    const-val call_tmp[678586]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678589 'move' call_tmp[678586](544488 call chpl_config_has_value[334] c"memLog" c"Built-in"))
    const-val call_tmp[2078371]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2078373 'move' call_tmp[2078371](2078375 '!' call_tmp[678586]))
    if call_tmp[2078371]
    {
      (1356792 call init[30763] tmp[544479])
    }
    {
      const-val call_tmp[678601]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678604 'move' call_tmp[678601](544498 call chpl_config_get_value[350] c"memLog" c"Built-in"))
      const-val ret_tmp[1811258]:string[26] "temp"
      (544501 call _command_line_cast[1356392] call_tmp[678601] ret_tmp[1811258])
      (1811261 'move' tmp[544479] ret_tmp[1811258])
    }
    (544481 'move' memLog[166686] tmp[544479])
    (2050453 '_private_broadcast' memLog[166686])
    const-val call_tmp[678606]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678609 'move' call_tmp[678606](544518 call chpl_config_has_value[334] c"memLeaksLog" c"Built-in"))
    const-val call_tmp[2078380]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2078382 'move' call_tmp[2078380](2078384 '!' call_tmp[678606]))
    if call_tmp[2078380]
    {
      (1356797 call init[30763] tmp[544509])
    }
    {
      const-val call_tmp[678621]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678624 'move' call_tmp[678621](544528 call chpl_config_get_value[350] c"memLeaksLog" c"Built-in"))
      const-val ret_tmp[1811294]:string[26] "temp"
      (544531 call _command_line_cast[1356698] call_tmp[678621] ret_tmp[1811294])
      (1811297 'move' tmp[544509] ret_tmp[1811294])
    }
    (544511 'move' memLeaksLog[166691] tmp[544509])
    (2050455 '_private_broadcast' memLeaksLog[166691])
    const-val call_tmp[678626]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (678629 'move' call_tmp[678626](544548 call chpl_config_has_value[334] c"memLeaksByDesc" c"Built-in"))
    const-val call_tmp[2078389]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2078391 'move' call_tmp[2078389](2078393 '!' call_tmp[678626]))
    if call_tmp[2078389]
    {
      (1356802 call init[30763] tmp[544539])
    }
    {
      const-val call_tmp[678641]:c_string[19] "dead at end of block" "expr temp" "maybe param" "temp"
      (678644 'move' call_tmp[678641](544558 call chpl_config_get_value[350] c"memLeaksByDesc" c"Built-in"))
      const-val ret_tmp[1811306]:string[26] "temp"
      (544561 call _command_line_cast[1356742] call_tmp[678641] ret_tmp[1811306])
      (1811309 'move' tmp[544539] ret_tmp[1811306])
    }
    (544541 'move' memLeaksByDesc[166696] tmp[544539])
    (2050457 '_private_broadcast' memLeaksByDesc[166696])
    (678651 'move' call_tmp[678648] memMax[166677])
    (544569 'move' cMemMax[166707] call_tmp[678648])
    (2050459 '_private_broadcast' cMemMax[166707])
    (678658 'move' call_tmp[678655] memThreshold[166682])
    (544571 'move' cMemThreshold[166717] call_tmp[678655])
    (2050461 '_private_broadcast' cMemThreshold[166717])
    (521959 return _void[55])
  }
  const-val memTrack[166657]:bool[10] "config" "const" "insert auto destroy"
  const-val memStats[166662]:bool[10] "config" "const" "insert auto destroy"
  const-val memLeaksByType[166667]:bool[10] "config" "const" "insert auto destroy"
  const-val memLeaks[166672]:bool[10] "config" "const" "insert auto destroy"
  const-val memMax[166677]:uint(64)[115] "config" "const" "insert auto destroy"
  const-val memThreshold[166682]:uint(64)[115] "config" "const" "insert auto destroy"
  const-val memLog[166686]:string[26] "config" "const" "insert auto destroy"
  const-val memLeaksLog[166691]:string[26] "config" "const" "insert auto destroy" "no auto destroy"
  const-val memLeaksByDesc[166696]:string[26] "config" "const" "insert auto destroy" "no auto destroy"
  const-val cMemMax[166707]:uint(64)[115] "dead at end of block" "const" "insert auto destroy"
  const-val cMemThreshold[166717]:uint(64)[115] "dead at end of block" "const" "insert auto destroy"
  function chpl_memTracking_returnConfigVals[166727](ref arg ret_memTrack[166724]:bool[10], ref arg ret_memStats[166730]:bool[10], ref arg ret_memLeaksByType[166734]:bool[10], ref arg ret_memLeaksByDesc[166738]:c_string[19], ref arg ret_memLeaks[166742]:bool[10], ref arg ret_memMax[166746]:uint(64)[115], ref arg ret_memThreshold[166750]:uint(64)[115], ref arg ret_memLog[166754]:c_string[19], ref arg ret_memLeaksLog[166758]:c_string[19]) : void[4] "export" "local args" "resolved" "no return value for void"
  {
    (2098353 '=' ret_memTrack[166724] memTrack[166657])
    (2098359 '=' ret_memStats[166730] memStats[166662])
    (2098365 '=' ret_memLeaksByType[166734] memLeaksByType[166667])
    (2098371 '=' ret_memLeaks[166742] memLeaks[166672])
    (2173617 '=' ret_memMax[166746] cMemMax[166707])
    (2173623 '=' ret_memThreshold[166750] cMemThreshold[166717])
    const-val call_tmp[678660]:locale[28] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val call_tmp[2130185]:chpl_localeID_t[209352] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val call_tmp[2130187]:chpl_localeID_t[209352] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    (2130189 'move' call_tmp[2130187](2130192 call chpl_rt_buildLocaleID[209430] chpl_nodeID[208207] c_sublocid_any[89878]))
    (2130195 'move' call_tmp[2130185] call_tmp[2130187])
    const-val call_tmp[2130198]:locale[28] "dead after last mention" "expr temp" "insert auto destroy" "maybe param" "temp"
    const-val ret_tmp[2130200]:locale[28] "temp"
    (2130203 call chpl_localeID_to_locale[92852] call_tmp[2130185] ret_tmp[2130200])
    (2130206 'move' call_tmp[2130198] ret_tmp[2130200])
    (1803845 'move' call_tmp[678660] call_tmp[2130198])
    val coerce_tmp[2131553]:BaseLocale[91204] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (2131555 'move' coerce_tmp[2131553](2131557 '.v' call_tmp[678660] _instance[89978]))
    val coerce_tmp[2131560]:object[22] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
    (2131562 'move' coerce_tmp[2131560](2131564 'cast' object[22] coerce_tmp[2131553]))
    const-val call_tmp[2131567]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2131569 'move' call_tmp[2131567](2131571 'ptr_eq' coerce_tmp[2131560] nil[44]))
    if call_tmp[2131567]
    {
      (2131577 call nilCheckHalt[210169] "argument to ! is nil")
    }
    const-val call_tmp[2131580]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
    (2131582 'move' call_tmp[2131580](2131585 call id[90757] coerce_tmp[2131553]))
    const-val call_tmp[2079279]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2079281 'move' call_tmp[2079279](2079283 '!=' call_tmp[2131580] 0))
    if call_tmp[2079279]
    {
      ref i_this[2109414]:string[26] "temp"
      (2109418 'move' i_this[2109414](2109416 'set reference' memLeaksByDesc[166696]))
      const-val coerce_tmp[2109423]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2109425 'move' coerce_tmp[2109423](2109427 '.v' memLeaksByDesc[166696] cachedNumCodepoints[30734]))
      (2109433 'noop')
      const-val call_tmp[2109434]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2109436 'move' call_tmp[2109434](2109439 call countNumCodepoints[181380] i_this[2109414]))
      const-val call_tmp[2109441]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2109443 'move' call_tmp[2109441](2109445 '!=' coerce_tmp[2109423] call_tmp[2109434]))
      if call_tmp[2109441]
      {
        (2109451 call halt[154111] "Encountered corrupt string metadata")
      }
      const-val call_tmp[2079294]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2079296 'move' call_tmp[2079294](2079298 '!=' coerce_tmp[2109423] 0))
      if call_tmp[2079294]
      {
        val local_memLeaksByDesc[166807]:string[26] "dead at end of block" "insert auto destroy"
        (544573 call init=[30774] local_memLeaksByDesc[166807] memLeaksByDesc[166696])
        (2319961 '.=' local_memLeaksByDesc[166807] isOwned[30746] 0)
        const-val coerce_tmp[2115000]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2115002 'move' coerce_tmp[2115000](2115004 '.v' local_memLeaksByDesc[166807] locale_id[30757]))
        const-val call_tmp[2115007]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2115009 'move' call_tmp[2115007](2115011 '!=' coerce_tmp[2115000] chpl_nodeID[208207]))
        if call_tmp[2115007]
        {
          (2115017 call halt[154111] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2115020]:c_ptr(uint(8))[937442] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2115022 'move' coerce_tmp[2115020](2115024 '.v' local_memLeaksByDesc[166807] buff[30740]))
        const-val call_tmp[2115027]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2115029 'move' call_tmp[2115027](2115031 'cast' c_string[19] coerce_tmp[2115020]))
        (2083426 '=' ret_memLeaksByDesc[166738] call_tmp[2115027])
        ref i_x[2092971]:string[26] "temp"
        (2092975 'move' i_x[2092971](2092973 'set reference' local_memLeaksByDesc[166807]))
        (2092979 call deinit[30834] i_x[2092971])
      }
      {
        const-val call_tmp[2083554]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2083556 'move' call_tmp[2083554](2083558 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2083561]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2083563 'move' call_tmp[2083561](2083565 'cast' c_string[19] call_tmp[2083554]))
        (2083568 '=' ret_memLeaksByDesc[166738] call_tmp[2083561])
      }
      ref i_this[2109456]:string[26] "temp"
      (2109460 'move' i_this[2109456](2109458 'set reference' memLog[166686]))
      const-val coerce_tmp[2109465]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2109467 'move' coerce_tmp[2109465](2109469 '.v' memLog[166686] cachedNumCodepoints[30734]))
      (2109475 'noop')
      const-val call_tmp[2109476]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2109478 'move' call_tmp[2109476](2109481 call countNumCodepoints[181380] i_this[2109456]))
      const-val call_tmp[2109483]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2109485 'move' call_tmp[2109483](2109487 '!=' coerce_tmp[2109465] call_tmp[2109476]))
      if call_tmp[2109483]
      {
        (2109493 call halt[154111] "Encountered corrupt string metadata")
      }
      const-val call_tmp[2079309]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2079311 'move' call_tmp[2079309](2079313 '!=' coerce_tmp[2109465] 0))
      if call_tmp[2079309]
      {
        val local_memLog[166849]:string[26] "dead at end of block" "insert auto destroy"
        (544575 call init=[30774] local_memLog[166849] memLog[166686])
        (2319971 '.=' local_memLog[166849] isOwned[30746] 0)
        const-val coerce_tmp[2115043]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2115045 'move' coerce_tmp[2115043](2115047 '.v' local_memLog[166849] locale_id[30757]))
        const-val call_tmp[2115050]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2115052 'move' call_tmp[2115050](2115054 '!=' coerce_tmp[2115043] chpl_nodeID[208207]))
        if call_tmp[2115050]
        {
          (2115060 call halt[154111] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2115063]:c_ptr(uint(8))[937442] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2115065 'move' coerce_tmp[2115063](2115067 '.v' local_memLog[166849] buff[30740]))
        const-val call_tmp[2115070]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2115072 'move' call_tmp[2115070](2115074 'cast' c_string[19] coerce_tmp[2115063]))
        (2083438 '=' ret_memLog[166754] call_tmp[2115070])
        ref i_x[2092983]:string[26] "temp"
        (2092987 'move' i_x[2092983](2092985 'set reference' local_memLog[166849]))
        (2092991 call deinit[30834] i_x[2092983])
      }
      {
        const-val call_tmp[2083574]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2083576 'move' call_tmp[2083574](2083578 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2083581]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2083583 'move' call_tmp[2083581](2083585 'cast' c_string[19] call_tmp[2083574]))
        (2083588 '=' ret_memLog[166754] call_tmp[2083581])
      }
      ref i_this[2109498]:string[26] "temp"
      (2109502 'move' i_this[2109498](2109500 'set reference' memLeaksLog[166691]))
      const-val coerce_tmp[2109507]:int(64)[13] "dead at end of block" "coerce temp" "insert auto destroy" "maybe copy elided" "temp"
      (2109509 'move' coerce_tmp[2109507](2109511 '.v' memLeaksLog[166691] cachedNumCodepoints[30734]))
      (2109517 'noop')
      const-val call_tmp[2109518]:int(64)[13] "dead after last mention" "expr temp" "maybe param" "temp"
      (2109520 'move' call_tmp[2109518](2109523 call countNumCodepoints[181380] i_this[2109498]))
      const-val call_tmp[2109525]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2109527 'move' call_tmp[2109525](2109529 '!=' coerce_tmp[2109507] call_tmp[2109518]))
      if call_tmp[2109525]
      {
        (2109535 call halt[154111] "Encountered corrupt string metadata")
      }
      const-val call_tmp[2079324]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2079326 'move' call_tmp[2079324](2079328 '!=' coerce_tmp[2109507] 0))
      if call_tmp[2079324]
      {
        val local_memLeaksLog[166890]:string[26] "dead at end of block" "insert auto destroy"
        (544577 call init=[30774] local_memLeaksLog[166890] memLeaksLog[166691])
        (2319981 '.=' local_memLeaksLog[166890] isOwned[30746] 0)
        const-val coerce_tmp[2115086]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2115088 'move' coerce_tmp[2115086](2115090 '.v' local_memLeaksLog[166890] locale_id[30757]))
        const-val call_tmp[2115093]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
        (2115095 'move' call_tmp[2115093](2115097 '!=' coerce_tmp[2115086] chpl_nodeID[208207]))
        if call_tmp[2115093]
        {
          (2115103 call halt[154111] "Cannot call .c_str() on a remote string")
        }
        val coerce_tmp[2115106]:c_ptr(uint(8))[937442] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
        (2115108 'move' coerce_tmp[2115106](2115110 '.v' local_memLeaksLog[166890] buff[30740]))
        const-val call_tmp[2115113]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2115115 'move' call_tmp[2115113](2115117 'cast' c_string[19] coerce_tmp[2115106]))
        (2083444 '=' ret_memLeaksLog[166758] call_tmp[2115113])
        ref i_x[2092995]:string[26] "temp"
        (2092999 'move' i_x[2092995](2092997 'set reference' local_memLeaksLog[166890]))
        (2093003 call deinit[30834] i_x[2092995])
      }
      {
        const-val call_tmp[2083594]:c_void_ptr[149] "dead after last mention" "expr temp" "maybe param" "temp"
        (2083596 'move' call_tmp[2083594](2083598 'cast' c_void_ptr[149] nil[44]))
        const-val call_tmp[2083601]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
        (2083603 'move' call_tmp[2083601](2083605 'cast' c_string[19] call_tmp[2083594]))
        (2083608 '=' ret_memLeaksLog[166758] call_tmp[2083601])
      }
    }
    {
      const-val coerce_tmp[2115129]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2115131 'move' coerce_tmp[2115129](2115133 '.v' memLeaksByDesc[166696] locale_id[30757]))
      const-val call_tmp[2115136]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2115138 'move' call_tmp[2115136](2115140 '!=' coerce_tmp[2115129] chpl_nodeID[208207]))
      if call_tmp[2115136]
      {
        (2115146 call halt[154111] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2115149]:c_ptr(uint(8))[937442] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2115151 'move' coerce_tmp[2115149](2115153 '.v' memLeaksByDesc[166696] buff[30740]))
      const-val call_tmp[2115156]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2115158 'move' call_tmp[2115156](2115160 'cast' c_string[19] coerce_tmp[2115149]))
      (2083450 '=' ret_memLeaksByDesc[166738] call_tmp[2115156])
      const-val coerce_tmp[2115172]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2115174 'move' coerce_tmp[2115172](2115176 '.v' memLog[166686] locale_id[30757]))
      const-val call_tmp[2115179]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2115181 'move' call_tmp[2115179](2115183 '!=' coerce_tmp[2115172] chpl_nodeID[208207]))
      if call_tmp[2115179]
      {
        (2115189 call halt[154111] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2115192]:c_ptr(uint(8))[937442] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2115194 'move' coerce_tmp[2115192](2115196 '.v' memLog[166686] buff[30740]))
      const-val call_tmp[2115199]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2115201 'move' call_tmp[2115199](2115203 'cast' c_string[19] coerce_tmp[2115192]))
      (2083456 '=' ret_memLog[166754] call_tmp[2115199])
      const-val coerce_tmp[2115215]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2115217 'move' coerce_tmp[2115215](2115219 '.v' memLeaksLog[166691] locale_id[30757]))
      const-val call_tmp[2115222]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2115224 'move' call_tmp[2115222](2115226 '!=' coerce_tmp[2115215] chpl_nodeID[208207]))
      if call_tmp[2115222]
      {
        (2115232 call halt[154111] "Cannot call .c_str() on a remote string")
      }
      val coerce_tmp[2115235]:c_ptr(uint(8))[937442] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      (2115237 'move' coerce_tmp[2115235](2115239 '.v' memLeaksLog[166691] buff[30740]))
      const-val call_tmp[2115242]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2115244 'move' call_tmp[2115242](2115246 'cast' c_string[19] coerce_tmp[2115235]))
      (2083462 '=' ret_memLeaksLog[166758] call_tmp[2115242])
    }
    ref i_x[2224785]:locale[28] "temp"
    (2224789 'move' i_x[2224785](2224787 'set reference' call_tmp[678660]))
    (2224793 call deinit[90188] i_x[2224785])
    (521957 return _void[55])
  }
  val tmp[544299]:bool[10] "dead at end of block" "temp"
  val tmp[544329]:bool[10] "dead at end of block" "temp"
  val tmp[544359]:bool[10] "dead at end of block" "temp"
  val tmp[544389]:bool[10] "dead at end of block" "temp"
  val tmp[544419]:uint(64)[115] "dead at end of block" "temp"
  val tmp[544449]:uint(64)[115] "dead at end of block" "temp"
  val tmp[544479]:string[26] "dead at end of block" "temp"
  val tmp[544509]:string[26] "dead at end of block" "temp"
  val tmp[544539]:string[26] "dead at end of block" "temp"
  const-val call_tmp[678648]:uint(64)[115] "dead at end of block" "maybe param" "temp"
  const-val call_tmp[678655]:uint(64)[115] "dead at end of block" "maybe param" "temp"
  function chpl__deinit_MemTracking[1824909]() : void[4] "resolved"
  {
    label _endchpl__deinit_MemTracking[1824915]
    ref i_x[2096331]:string[26] "temp"
    (2096335 'move' i_x[2096331](2096333 'set reference' memLog[166686]))
    (2096339 call deinit[30834] i_x[2096331])
    (1824912 return _void[55])
  }
}