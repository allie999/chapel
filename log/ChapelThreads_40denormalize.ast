AST dump for ChapelThreads after pass denormalize.
Module use list: 

{
  function chpl__init_ChapelThreads[415988](const in arg _ln[2601546]:int(64)[13], in arg _fn[2601548]:int(32)[95]) : void[4] "insert line file info" "module init" "resolved"
  {
    if chpl__init_ChapelThreads_p[2590842]
    {
      goto _exit_chpl__init_ChapelThreads[2590879] _exit_chpl__init_ChapelThreads[2590879]
    }
    ref refIndentLevel[2590865]:int(32)[95] "temp"
    (2590863 call printModuleInit[20429] c"%*s\n" c"ChapelThreads" 13 _ln[2601546] _fn[2601548])
    (2590869 'move' refIndentLevel[2590865](2590868 'addr of' moduleInitLevel[20419]))
    (2590872 '+=' refIndentLevel[2590865] 1)
    (2590848 'move' chpl__init_ChapelThreads_p[2590842] 1)
    (611276 'move' call_tmp[611273](56179 call chpl_task_getenvNumThreadsPerLocale[56166]))
    (982090 'move' init_coerce_tmp[982087](982093 'cast' int(64)[13] call_tmp[611273] _ln[2601546] _fn[2601548]))
    (540836 'move' numThreadsPerLocale[56180] init_coerce_tmp[982087])
    (2146789 '_private_broadcast' numThreadsPerLocale[56180])
    (2590875 '-=' refIndentLevel[2590865] 1)
    label _exit_chpl__init_ChapelThreads[2590879]
    (508018 return _void[55])
  }
  function chpl_task_getenvNumThreadsPerLocale[56166]() : int(32)[95] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    val ret[508014]:int(32)[95] "RVV" "temp"
    (508016 return ret[508014])
  }
  const-val numThreadsPerLocale[56180]:int(64)[13] "dead at end of block" "const" "insert auto destroy"
  const-val call_tmp[611273]:int(32)[95] "dead at end of block" "insert auto destroy" "maybe param" "temp"
  const-val init_coerce_tmp[982087]:int(64)[13] "dead at end of block" "temp"
}