AST dump for ChapelThreads after pass denormalize.
Module use list: 

{
  function chpl__init_ChapelThreads[415983](const in arg _ln[2410488]:int(64)[13], in arg _fn[2410490]:int(32)[95]) : void[4] "insert line file info" "module init" "resolved"
  {
    if chpl__init_ChapelThreads_p[2400870]
    {
      goto _exit_chpl__init_ChapelThreads[2400907] _exit_chpl__init_ChapelThreads[2400907]
    }
    ref refIndentLevel[2400893]:int(32)[95] "temp"
    (2400891 call printModuleInit[20429] c"%*s\n" c"ChapelThreads" 13 _ln[2410488] _fn[2410490])
    (2400897 'move' refIndentLevel[2400893](2400896 'addr of' moduleInitLevel[20419]))
    (2400900 '+=' refIndentLevel[2400893] 1)
    (2400876 'move' chpl__init_ChapelThreads_p[2400870] 1)
    (611260 'move' call_tmp[611257](56179 call chpl_task_getenvNumThreadsPerLocale[56166]))
    (982048 'move' init_coerce_tmp[982045](982051 'cast' int(64)[13] call_tmp[611257] _ln[2410488] _fn[2410490]))
    (540822 'move' numThreadsPerLocale[56180] init_coerce_tmp[982045])
    (2050427 '_private_broadcast' numThreadsPerLocale[56180])
    (2400903 '-=' refIndentLevel[2400893] 1)
    label _exit_chpl__init_ChapelThreads[2400907]
    (508013 return _void[55])
  }
  function chpl_task_getenvNumThreadsPerLocale[56166]() : int(32)[95] "extern" "local args" "no fn body" "resolved" "no return value for void"
  {
    val ret[508009]:int(32)[95] "RVV" "temp"
    (508011 return ret[508009])
  }
  const-val numThreadsPerLocale[56180]:int(64)[13] "dead at end of block" "const" "insert auto destroy"
  const-val call_tmp[611257]:int(32)[95] "dead at end of block" "insert auto destroy" "maybe param" "temp"
  const-val init_coerce_tmp[982045]:int(64)[13] "dead at end of block" "temp"
}