AST dump for Builtins after pass insertLineNumbers.
Module use list: ChapelStandard IO 

{
  function chpl__init_Builtins[416092](const in arg _ln[2476722]:int(64)[13], in arg _fn[2476724]:int(32)[95]) : void[4] "fast on" "insert line file info" "local fn" "module init" "resolved"
  {
    if chpl__init_Builtins_p[2452174]
    {
      goto _exit_chpl__init_Builtins[2452211] _exit_chpl__init_Builtins[2452211]
    }
    val modFormatStr[2452182]:c_string[19] "temp"
    val modStr[2452183]:c_string[19] "temp"
    ref refIndentLevel[2452197]:int(32)[95] "temp"
    (2452190 'move' modFormatStr[2452182] c"%*s\n")
    (2452192 'move' modStr[2452183] c"Builtins")
    (2452195 call printModuleInit[20426] modFormatStr[2452182] modStr[2452183] 8 _ln[2476722] _fn[2476724])
    (2452201 'move' refIndentLevel[2452197](2452200 'addr of' moduleInitLevel[20416]))
    (2452204 '+=' refIndentLevel[2452197] 1)
    (2452180 'move' chpl__init_Builtins_p[2452174] 1)
    {
      (2449905 call chpl__init_IO[416113] _ln[2476722] _fn[2476724])
    }
    (2452207 '-=' refIndentLevel[2452197] 1)
    label _endchpl__init_Builtins[2452213]
    label _exit_chpl__init_Builtins[2452211]
    (527840 return _void[55])
  }
  function _local_assert[2410596](const in arg test[2410598]:bool[10], const in arg _ln[2467606]:int(64)[13], in arg _fn[2467608]:int(32)[95]) : void[4] "always propagate line file info" "insert line file info" "local fn" "resolved" "fn synchronization free" "no return value for void"
  {
    const-val call_tmp[2410601]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2410603 'move' call_tmp[2410601](2410605 '!' test[2410598]))
    if call_tmp[2410601]
    {
      (2410609 'chpl_error' c"assert failed" _ln[2467606] _fn[2467608])
    }
    (2410612 return _void[55])
  }
  function assert[210345](const in arg test[210342]:bool[10], const in arg _ln[2460266]:int(64)[13], in arg _fn[2460268]:int(32)[95]) : void[4] "always propagate line file info" "insert line file info" "resolved" "fn synchronization free" "no return value for void"
  {
    const-val call_tmp[2114095]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114097 'move' call_tmp[2114095](2114099 '!' test[210342]))
    if call_tmp[2114095]
    {
      (210355 'chpl_error' c"assert failed" _ln[2460266] _fn[2460268])
    }
    (527818 return _void[55])
  }
  function assert[1402715](const in arg test[1402717]:bool[10], const  ref arg _e0_args[1402719]:string[26], const  ref arg _e1_args[1402721]:string[26], const  ref arg _e2_args[1402723]:string[26], const in arg _ln[2461594]:int(64)[13], in arg _fn[2461596]:int(32)[95]) : void[4] "always propagate line file info" "expanded varargs" "insert line file info" "instantiated generic" "invisible fn" "resolved" "no return value for void"
  {
    const-val local__str_literal_4795[2379714]:string[26] "temp"
    (2379715 'move' "Cannot call .c_str() on a remote string" "Cannot call .c_str() on a remote string")
    const-val local__str_literal_2727[2379708]:string[26] "temp"
    (2379709 'move' "assert failed - " "assert failed - ")
    const-val call_tmp[2114554]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
    (2114556 'move' call_tmp[2114554](2114558 '!' test[1402717]))
    if call_tmp[2114554]
    {
      const-val call_tmp[1402752]:string[26] "dead at end of block" "expr temp" "insert auto destroy" "maybe param" "temp"
      const-val ret_tmp[1838350]:string[26] "temp"
      (1402757 call stringify[1402793] _e0_args[1402719] _e1_args[1402721] _e2_args[1402723] ret_tmp[1838350] _ln[2461594] _fn[2461596])
      (1838353 'move' call_tmp[1402752] ret_tmp[1838350])
      const-val call_tmp[1402761]:string[26] "dead at end of block" "maybe param" "temp"
      const-val ret_tmp[1830307]:string[26] "temp"
      wide-ref tmp[2417210]:string[26] "temp"
      (2417214 'move' tmp[2417210](2417212 'set reference' call_tmp[1402752]))
      (1402766 call +[38342] "assert failed - " tmp[2417210] ret_tmp[1830307] _ln[2461594] _fn[2461596])
      (1830310 'move' call_tmp[1402761] ret_tmp[1830307])
      const-val tmpstring[1402769]:string[26] "dead at end of block" "insert auto destroy"
      (1402771 'move' tmpstring[1402769] call_tmp[1402761])
      const-val coerce_tmp[2151870]:int(32)[95] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      val tmp[2428088]:int(32)[95] "temp"
      (2151872 'move' tmp[2428088](2151874 '.v' tmpstring[1402769] locale_id[30754]))
      (2428091 'move' coerce_tmp[2151870] tmp[2428088])
      const-val call_tmp[2151877]:bool[10] "dead after last mention" "expr temp" "maybe param" "temp"
      (2151879 'move' call_tmp[2151877](2151881 '!=' coerce_tmp[2151870] chpl_nodeID[208152]))
      if call_tmp[2151877]
      {
        (2151887 call halt[154067] "Cannot call .c_str() on a remote string" _ln[2461594] _fn[2461596])
      }
      val coerce_tmp[2151890]:c_ptr(uint(8))[937423] "dead after last mention" "coerce temp" "insert auto destroy" "temp"
      val tmp[2428094]:c_ptr(uint(8))[937423] "temp"
      (2151892 'move' tmp[2428094](2151894 '.v' tmpstring[1402769] buff[30737]))
      (2428097 'move' coerce_tmp[2151890] tmp[2428094])
      const-val call_tmp[2151897]:c_string[19] "dead after last mention" "expr temp" "maybe param" "temp"
      (2151899 'move' call_tmp[2151897](2151901 'cast' c_string[19] coerce_tmp[2151890] _ln[2461594] _fn[2461596]))
      (1402784 'chpl_error' call_tmp[2151897] _ln[2461594] _fn[2461596])
      ref i_x[2132877]:string[26] "temp"
      (2132881 'move' i_x[2132877](2132879 'set reference' tmpstring[1402769]))
      wide-ref tmp[2426082]:string[26] "temp"
      (2426085 'move' tmp[2426082] i_x[2132877])
      (2132885 call deinit[30831] tmp[2426082] _ln[2461594] _fn[2461596])
      ref i_x[2132889]:string[26] "temp"
      (2132893 'move' i_x[2132889](2132891 'set reference' call_tmp[1402752]))
      wide-ref tmp[2426088]:string[26] "temp"
      (2426091 'move' tmp[2426088] i_x[2132889])
      (2132897 call deinit[30831] tmp[2426088] _ln[2461594] _fn[2461596])
    }
    (1402789 return _void[55])
  }
}