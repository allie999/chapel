AST dump for BlockDist after pass cleanup.
Module use list: 

{
  (353129 'use' ChapelStandard)
  (316459 'use' DSIUtil)
  (316462 'use' ChapelUtil)
  (316465 'use' CommDiagnostics)
  (316468 'use' ChapelLocks)
  (316471 'use' ChapelDebugPrint)
  (316474 'use' LayoutCS)
  (316477 'use' SparseBlockDist)
  unknown debugBlockDist[316480] "config" "param" 0
  (316483 'end of statement')
  unknown debugBlockDistBulkTransfer[316485] "config" "param" 0
  (316488 'end of statement')
  const disableAliasedBulkTransfer[316490] "config" "const" 1
  (316493 'end of statement')
  unknown disableBlockDistBulkTransfer[316495] "config" "param" 0
  (316498 'end of statement')
  unknown sanityCheckDistribution[316500] "config" "param" 0
  (316503 'end of statement')
  unknown testFastFollowerOptimization[316505] "config" "param" 0
  (316508 'end of statement')
  unknown disableBlockLazyRAD[316510] "config" "param" defaultDisableLazyRADOpt
  (316513 'end of statement')
  type Block[316593](?) unknown rank[316518] "param" int[13] unknown idxType[316523] "type variable" int[13] unknown boundingBox[316532](316530 call chpl__buildDomainRuntimeType defaultDist rank idxType) unknown targetLocDom[316541](316539 call chpl__buildDomainRuntimeType defaultDist rank) unknown targetLocales[316552](316550 call chpl__buildArrayRuntimeType(316548 call chpl__ensureDomainExpr targetLocDom) locale[28]) unknown locDist[316568](316566 call chpl__buildArrayRuntimeType(316564 call chpl__ensureDomainExpr targetLocDom)(316563 'to unmanaged class from unknown'(316562 call LocBlock rank idxType))) unknown dataParTasksPerLocale[316573] int[13] unknown dataParIgnoreRunningTasks[316578] bool[10] unknown dataParMinGranularity[316583] int[13] unknown sparseLayoutType[316589] "type variable"(316588 'to unmanaged class from unknown' DefaultDist) BaseDist
  type LocBlock[316616](?) unknown rank[316598] "param" int[13] unknown idxType[316602] "type variable" const myChunk[316611] "const"(316609 call chpl__buildDomainRuntimeType defaultDist rank idxType)
  type BlockDom[316673](?) unknown sparseLayoutType[316622] "type variable" const dist[316632] "const"(316631 'to unmanaged class from unknown'(316630 call Block rank idxType sparseLayoutType)) unknown locDoms[316654](316652 call chpl__buildArrayRuntimeType(316650 call chpl__ensureDomainExpr(316639 call . dist c"targetLocDom"))(316649 'to unmanaged class from unknown'(316648 call LocBlockDom rank idxType stridable))) unknown whole[316668](316666 call chpl__buildDomainRuntimeType defaultDist(rank = rank)(idxType = idxType)(stridable = stridable)) BaseRectangularDom
  type LocBlockDom[316702](?) unknown rank[316678] "param" int[13] unknown idxType[316682] "type variable" unknown stridable[316686] "param" bool[10] unknown myBlock[316697](316695 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  type BlockArr[316778](?) unknown sparseLayoutType[316708] "type variable" unknown doRADOpt[316713] defaultDoRADOpt bool[10] unknown dom[316725](316724 'to unmanaged class from unknown'(316723 call BlockDom rank idxType stridable sparseLayoutType)) unknown locArr[316749](316747 call chpl__buildArrayRuntimeType(316745 call chpl__ensureDomainExpr(316733 call .(316730 call . dom c"dist") c"targetLocDom"))(316744 'to unmanaged class from unknown'(316743 call LocBlockArr eltType rank idxType stridable))) unknown myLocArr[316762] "local field"(316761 'to unmanaged class from unknown'(316760 'to nilable class from type'(316759 call LocBlockArr eltType rank idxType stridable))) const SENTINEL[316773] "const"(316772 call max(316769 call * rank idxType)) BaseRectangularArr
  function LocBlockArr[316994](?).init[316847](arg _mt[316998]:_MT[238], arg this[316996]:LocBlockArr[316994](?), arg eltType[316845]:_any[178](?), param arg rank[316850] :
  int[13], arg idxType[316853]:_any[178](?), param arg stridable[316856] :
  bool[10], const arg locDom[316866] :
  (316865 'to unmanaged class from unknown'(316864 call LocBlockDom rank idxType stridable)), param arg initElts[316870] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (316878 call =(316874 call . this c"eltType") eltType)
    (316887 call =(316883 call . this c"rank") rank)
    (316895 call =(316891 call . this c"idxType") idxType)
    (316903 call =(316899 call . this c"stridable") stridable)
    (316913 call =(316909 call . this c"locDom") locDom)
    (316937 call =(316919 call . this c"myElems")(316936 call(316929 call .(316926 call .(316923 call . this c"locDom") c"myBlock") c"buildArray") eltType(initElts = initElts)))
  }
  function LocBlockArr[316994](?).writeThis[316946](arg _mt[317002]:_MT[238], arg this[317000]:LocBlockArr[316994](?), arg f[316944]:_any[178](?)) : _unknown[51] throws "method" "primary method" "method overrides" "no return value for void"
  {
    (316967 call halt "LocBlockArr.writeThis() is not implemented / should not be needed")
  }
  function LocBlockArr[316994](?).deinit[316974](arg _mt[317006]:_MT[238], arg this[317004]:LocBlockArr[316994](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    if(316985 call _cond_test(316978 call != locRAD nil[44]))
    {
      (316982 call chpl__delete locRAD)
    }
  }
  type LocBlockArr[316994](?) unknown eltType[316782] "type variable" unknown rank[316786] "param" int[13] unknown idxType[316790] "type variable" unknown stridable[316794] "param" bool[10] const locDom[316805] "const"(316804 'to unmanaged class from unknown'(316803 call LocBlockDom rank idxType stridable)) unknown locRAD[316818](316817 'to unmanaged class from unknown'(316816 'to nilable class from type'(316815 call LocRADCache eltType rank idxType stridable))) unknown myElems[316834] "local field" "unsafe"(316832 call chpl__buildArrayRuntimeType(316830 call chpl__ensureDomainExpr(316825 call . locDom c"myBlock")) eltType) unknown locRADLock[316839] chpl_LocalSpinlock
  function _unknown[51].init[317016](arg _mt[317067]:_MT[238], arg this[317064] :
  Block, arg boundingBox[317013] :
  _domain, arg targetLocales[317023] :
  (317019 call chpl__buildArrayRuntimeType nil[44] locale[28]) =
  Locales, arg dataParTasksPerLocale[317030] =
  (317029 call getDataParTasksPerLocale), arg dataParIgnoreRunningTasks[317036] =
  (317035 call getDataParIgnoreRunningTasks), arg dataParMinGranularity[317042] =
  (317041 call getDataParMinGranularity), param arg rank[317049] =
  (317046 call . boundingBox c"rank"), arg idxType[317056]:_any[178](?) =
  (317053 call . boundingBox c"idxType"), arg sparseLayoutType[317061]:_any[178](?) =
  (317060 'to unmanaged class from unknown' DefaultDist)) : _unknown[51] "method" "no return value for void"
  {
    (317074 call =(317070 call . this c"rank") rank)
    (317083 call =(317079 call . this c"idxType") idxType)
    if(317114 call _cond_test(317091 call != rank(317088 call . boundingBox c"rank")))
    {
      (317112 call compilerError "specified Block rank != rank of specified bounding box")
    }
    if(317147 call _cond_test(317124 call != idxType(317121 call . boundingBox c"idxType")))
    {
      (317145 call compilerError "specified Block index type != index type of specified bounding box")
    }
    if(317183 call _cond_test(317160 call &&(317154 call != rank 2)(317159 call isCSType sparseLayoutType)))
    {
      (317181 call compilerError "CS layout is only supported for 2 dimensional domains")
    }
    if(317216 call _cond_test(317193 call ==(317189 call . boundingBox c"size") 0))
    {
      (317214 call halt "Block() requires a non-empty boundingBox")
    }
    (317238 call =(317224 call . this c"boundingBox")(317236 call _cast(317234 call chpl__buildDomainRuntimeType defaultDist rank idxType(stridable = 0)) boundingBox))
    const ranges[317246] "const"(317245 call setupTargetLocRanges rank targetLocales)
    (317249 'end of statement')
    (317259 call =(317251 call . this c"targetLocDom")(317257 call chpl__buildDomainExpr(317255 'expand_tuple' ranges)))
    (317274 call =(317263 call . this c"targetLocales")(317273 call reshape targetLocales(317270 call . this c"targetLocDom")))
    const dummyLB[317287] "const"(317279 'new'(_chpl_manager = unmanaged[220](?))(317286 call LocBlock rank idxType(dummy = 1)))
    (317290 'end of statement')
    unknown locDistTemp[317304] dummyLB(317301 call chpl__buildArrayRuntimeType(317299 call chpl__ensureDomainExpr targetLocDom)(317298 'to unmanaged class from unknown'(317297 call LocBlock rank idxType)))
    (317307 'end of statement')
    {
      unknown tmpIter[317346] "expr temp" "maybe ref" "no copy" "temp"
      (317349 'move' tmpIter[317346] targetLocDom)
      unknown isRngDomArr[317517] "maybe param" "temp"
      (317532 'move' isRngDomArr[317517](317530 call ||(317519 call isBoundedRange tmpIter[317346])(317528 call ||(317522 call isDomain tmpIter[317346])(317525 call isArray tmpIter[317346]))))
      if isRngDomArr[317517]
      {
        const _coforallCount[317384] "const" "end count" "temp"
        (317453 'move' _coforallCount[317384](317450 call _endCountAlloc 1))
        unknown numTasks[317385] "temp"
        (317437 'move' numTasks[317385](317433 call . tmpIter[317346] c"size"))
        (317428 call _upEndCount _coforallCount[317384] 1 numTasks[317385])
        (317425 call chpl_resetTaskSpawn numTasks[317385])
        unknown _indexOfInterest[317392] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317393] "expr temp" "temp"
        (317402 'move' _iterator[317393](317400 call _getIterator tmpIter[317346]))
        Defer
        {
          {
            (317418 call _freeIterator _iterator[317393])
          }
        }
        { scopeless type
          (317407 'move' _indexOfInterest[317392](317404 call iteratorIndex _iterator[317393]))
        }
        ForLoop[317394]
        {
          unknown locid[317411] "coforall index var" "index var" "insert auto destroy"
          (317413 'move' locid[317411] _indexOfInterest[317392])
          {
            {
              const tmp[317355] "const" "temp"
              (317357 'move' tmp[317355](317359 'deref'(317360 '_wide_get_locale'(317365 call(317362 call . this c"targetLocales") locid))))
              (317369 call =(317371 call locDistTemp locid)(317373 'new'(_chpl_manager = unmanaged[220](?))(317377 call LocBlock rank idxType locid boundingBox targetLocDom)))
              (317352 'elided on block' 0 tmp[317355])
            }
            (317387 call _downEndCount _coforallCount[317384] nil[44])
            (317386 'coforall loop')
          }
          label _continueLabel[317397]
          _indexOfInterest[317392]
          _iterator[317393]
        }
        label _breakLabel[317398]
        Defer
        {
          {
            (317440 call _endCountFree _coforallCount[317384])
          }
        }
        (317445 call _waitEndCount _coforallCount[317384] 1 numTasks[317385])
      }
      {
        const _coforallCount[317457] "const" "end count" "temp"
        (317514 'move' _coforallCount[317457](317511 call _endCountAlloc 1))
        unknown _indexOfInterest[317465] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317466] "expr temp" "temp"
        (317475 'move' _iterator[317466](317473 call _getIterator tmpIter[317346]))
        Defer
        {
          {
            (317491 call _freeIterator _iterator[317466])
          }
        }
        { scopeless type
          (317480 'move' _indexOfInterest[317465](317477 call iteratorIndex _iterator[317466]))
        }
        ForLoop[317467]
        {
          unknown locid[317484] "coforall index var" "index var" "insert auto destroy"
          (317486 'move' locid[317484] _indexOfInterest[317465])
          (317498 call _upEndCount _coforallCount[317457] 1)
          {
            {
              const tmp[317338] "const" "temp"
              (317339 'move' tmp[317338](317336 'deref'(317335 '_wide_get_locale'(317316 call(317311 call . this c"targetLocales") locid))))
              (317332 call =(317320 call locDistTemp locid)(317323 'new'(_chpl_manager = unmanaged[220](?))(317331 call LocBlock rank idxType locid boundingBox targetLocDom)))
              (317342 'elided on block' 0 tmp[317338])
            }
            (317460 call _downEndCount _coforallCount[317457] nil[44])
            (317459 'coforall loop')
          }
          label _continueLabel[317470]
          _indexOfInterest[317465]
          _iterator[317466]
        }
        label _breakLabel[317471]
        Defer
        {
          {
            (317502 call _endCountFree _coforallCount[317457])
          }
        }
        (317507 call _waitEndCount _coforallCount[317457] 1)
      }
    }
    (317538 call chpl__delete dummyLB)
    (317548 call =(317544 call . this c"locDist") locDistTemp)
    (317569 call =(317554 call . this c"dataParTasksPerLocale")(317566 IfExpr (317559 call == dataParTasksPerLocale 0) then
    { scopeless
      (317562 call . here c"maxTaskPar")
    } else
    { scopeless
      dataParTasksPerLocale
    } ))
    (317579 call =(317575 call . this c"dataParIgnoreRunningTasks") dataParIgnoreRunningTasks)
    (317589 call =(317585 call . this c"dataParMinGranularity") dataParMinGranularity)
    (317602 call =(317595 call . this c"sparseLayoutType")(317601 call _to_unmanaged sparseLayoutType))
    (317610 call(317606 call . this c"complete"))
    if(317639 call _cond_test debugBlockDist)
    {
      (317632 call writeln "Creating new Block distribution:")
      (317637 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiAssign[317653](arg _mt[317658]:_MT[238], arg this[317655] :
  Block, arg other[317650] :
  (317649 'typeof' this)) : _unknown[51] "method" "no return value for void"
  {
    {
      unknown tmpIter[317685] "expr temp" "maybe ref" "no copy" "temp"
      (317688 'move' tmpIter[317685] targetLocDom)
      unknown isRngDomArr[317843] "maybe param" "temp"
      (317858 'move' isRngDomArr[317843](317856 call ||(317845 call isBoundedRange tmpIter[317685])(317854 call ||(317848 call isDomain tmpIter[317685])(317851 call isArray tmpIter[317685]))))
      if isRngDomArr[317843]
      {
        const _coforallCount[317710] "const" "end count" "temp"
        (317779 'move' _coforallCount[317710](317776 call _endCountAlloc 1))
        unknown numTasks[317711] "temp"
        (317763 'move' numTasks[317711](317759 call . tmpIter[317685] c"size"))
        (317754 call _upEndCount _coforallCount[317710] 1 numTasks[317711])
        (317751 call chpl_resetTaskSpawn numTasks[317711])
        unknown _indexOfInterest[317718] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317719] "expr temp" "temp"
        (317728 'move' _iterator[317719](317726 call _getIterator tmpIter[317685]))
        Defer
        {
          {
            (317744 call _freeIterator _iterator[317719])
          }
        }
        { scopeless type
          (317733 'move' _indexOfInterest[317718](317730 call iteratorIndex _iterator[317719]))
        }
        ForLoop[317720]
        {
          unknown locid[317737] "coforall index var" "index var" "insert auto destroy"
          (317739 'move' locid[317737] _indexOfInterest[317718])
          {
            {
              const tmp[317694] "const" "temp"
              (317696 'move' tmp[317694](317698 'deref'(317699 '_wide_get_locale'(317701 call targetLocales locid))))
              (317705 call chpl__delete(317707 call locDist locid))
              (317691 'elided on block' 0 tmp[317694])
            }
            (317713 call _downEndCount _coforallCount[317710] nil[44])
            (317712 'coforall loop')
          }
          label _continueLabel[317723]
          _indexOfInterest[317718]
          _iterator[317719]
        }
        label _breakLabel[317724]
        Defer
        {
          {
            (317766 call _endCountFree _coforallCount[317710])
          }
        }
        (317771 call _waitEndCount _coforallCount[317710] 1 numTasks[317711])
      }
      {
        const _coforallCount[317783] "const" "end count" "temp"
        (317840 'move' _coforallCount[317783](317837 call _endCountAlloc 1))
        unknown _indexOfInterest[317791] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317792] "expr temp" "temp"
        (317801 'move' _iterator[317792](317799 call _getIterator tmpIter[317685]))
        Defer
        {
          {
            (317817 call _freeIterator _iterator[317792])
          }
        }
        { scopeless type
          (317806 'move' _indexOfInterest[317791](317803 call iteratorIndex _iterator[317792]))
        }
        ForLoop[317793]
        {
          unknown locid[317810] "coforall index var" "index var" "insert auto destroy"
          (317812 'move' locid[317810] _indexOfInterest[317791])
          (317824 call _upEndCount _coforallCount[317783] 1)
          {
            {
              const tmp[317677] "const" "temp"
              (317678 'move' tmp[317677](317675 'deref'(317674 '_wide_get_locale'(317665 call targetLocales locid))))
              (317671 call chpl__delete(317669 call locDist locid))
              (317681 'elided on block' 0 tmp[317677])
            }
            (317786 call _downEndCount _coforallCount[317783] nil[44])
            (317785 'coforall loop')
          }
          label _continueLabel[317796]
          _indexOfInterest[317791]
          _iterator[317792]
        }
        label _breakLabel[317797]
        Defer
        {
          {
            (317828 call _endCountFree _coforallCount[317783])
          }
        }
        (317833 call _waitEndCount _coforallCount[317783] 1)
      }
    }
    (317868 call = boundingBox(317865 call . other c"boundingBox"))
    (317876 call = targetLocDom(317873 call . other c"targetLocDom"))
    (317884 call = targetLocales(317881 call . other c"targetLocales"))
    (317892 call = dataParTasksPerLocale(317889 call . other c"dataParTasksPerLocale"))
    (317900 call = dataParIgnoreRunningTasks(317897 call . other c"dataParIgnoreRunningTasks"))
    (317908 call = dataParMinGranularity(317905 call . other c"dataParMinGranularity"))
    {
      unknown tmpIter[317946] "expr temp" "maybe ref" "no copy" "temp"
      (317949 'move' tmpIter[317946] targetLocDom)
      unknown isRngDomArr[318114] "maybe param" "temp"
      (318129 'move' isRngDomArr[318114](318127 call ||(318116 call isBoundedRange tmpIter[317946])(318125 call ||(318119 call isDomain tmpIter[317946])(318122 call isArray tmpIter[317946]))))
      if isRngDomArr[318114]
      {
        const _coforallCount[317981] "const" "end count" "temp"
        (318050 'move' _coforallCount[317981](318047 call _endCountAlloc 1))
        unknown numTasks[317982] "temp"
        (318034 'move' numTasks[317982](318030 call . tmpIter[317946] c"size"))
        (318025 call _upEndCount _coforallCount[317981] 1 numTasks[317982])
        (318022 call chpl_resetTaskSpawn numTasks[317982])
        unknown _indexOfInterest[317989] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[317990] "expr temp" "temp"
        (317999 'move' _iterator[317990](317997 call _getIterator tmpIter[317946]))
        Defer
        {
          {
            (318015 call _freeIterator _iterator[317990])
          }
        }
        { scopeless type
          (318004 'move' _indexOfInterest[317989](318001 call iteratorIndex _iterator[317990]))
        }
        ForLoop[317991]
        {
          unknown locid[318008] "coforall index var" "index var" "insert auto destroy"
          (318010 'move' locid[318008] _indexOfInterest[317989])
          {
            {
              const tmp[317955] "const" "temp"
              (317957 'move' tmp[317955](317959 'deref'(317960 '_wide_get_locale'(317962 call targetLocales locid))))
              (317966 call =(317968 call locDist locid)(317970 'new'(_chpl_manager = unmanaged[220](?))(317974 call LocBlock rank idxType locid boundingBox targetLocDom)))
              (317952 'elided on block' 0 tmp[317955])
            }
            (317984 call _downEndCount _coforallCount[317981] nil[44])
            (317983 'coforall loop')
          }
          label _continueLabel[317994]
          _indexOfInterest[317989]
          _iterator[317990]
        }
        label _breakLabel[317995]
        Defer
        {
          {
            (318037 call _endCountFree _coforallCount[317981])
          }
        }
        (318042 call _waitEndCount _coforallCount[317981] 1 numTasks[317982])
      }
      {
        const _coforallCount[318054] "const" "end count" "temp"
        (318111 'move' _coforallCount[318054](318108 call _endCountAlloc 1))
        unknown _indexOfInterest[318062] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318063] "expr temp" "temp"
        (318072 'move' _iterator[318063](318070 call _getIterator tmpIter[317946]))
        Defer
        {
          {
            (318088 call _freeIterator _iterator[318063])
          }
        }
        { scopeless type
          (318077 'move' _indexOfInterest[318062](318074 call iteratorIndex _iterator[318063]))
        }
        ForLoop[318064]
        {
          unknown locid[318081] "coforall index var" "index var" "insert auto destroy"
          (318083 'move' locid[318081] _indexOfInterest[318062])
          (318095 call _upEndCount _coforallCount[318054] 1)
          {
            {
              const tmp[317938] "const" "temp"
              (317939 'move' tmp[317938](317936 'deref'(317935 '_wide_get_locale'(317916 call targetLocales locid))))
              (317932 call =(317920 call locDist locid)(317923 'new'(_chpl_manager = unmanaged[220](?))(317931 call LocBlock rank idxType locid boundingBox targetLocDom)))
              (317942 'elided on block' 0 tmp[317938])
            }
            (318057 call _downEndCount _coforallCount[318054] nil[44])
            (318056 'coforall loop')
          }
          label _continueLabel[318067]
          _indexOfInterest[318062]
          _iterator[318063]
        }
        label _breakLabel[318068]
        Defer
        {
          {
            (318099 call _endCountFree _coforallCount[318054])
          }
        }
        (318104 call _waitEndCount _coforallCount[318054] 1)
      }
    }
  }
  function _unknown[51].dsiEqualDMaps[318145](arg _mt[318150]:_MT[238], arg this[318147] :
  Block, arg that[318142] :
  (318141 call Block ?[260])) : _unknown[51] "method"
  {
    (318189 return(318187 call &&(318172 call &&(318160 call ==(318153 call . this c"rank")(318157 call . that c"rank"))(318170 call ==(318163 call . this c"boundingBox")(318167 call . that c"boundingBox")))(318186 call(318178 call .(318175 call . this c"targetLocales") c"equals")(318182 call . that c"targetLocales"))))
  }
  function _unknown[51].dsiEqualDMaps[318199](arg _mt[318204]:_MT[238], arg this[318201] :
  Block, arg that[318197]:_any[178](?)) param : _unknown[51] "method"
  {
    (318207 return 0)
  }
  function _unknown[51].dsiClone[318215](arg _mt[318220]:_MT[238], arg this[318217] :
  Block) : _unknown[51] "method"
  {
    (318236 return(318224 'new'(_chpl_manager = unmanaged[220](?))(318235 call Block boundingBox targetLocales dataParTasksPerLocale dataParIgnoreRunningTasks dataParMinGranularity rank idxType sparseLayoutType)))
  }
  function _unknown[51].dsiDestroyDist[318244](arg _mt[318249]:_MT[238], arg this[318246] :
  Block) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[318271] "expr temp" "maybe ref" "no copy" "temp"
      (318274 'move' tmpIter[318271] locDist)
      unknown isRngDomArr[318425] "maybe param" "temp"
      (318440 'move' isRngDomArr[318425](318438 call ||(318427 call isBoundedRange tmpIter[318271])(318436 call ||(318430 call isDomain tmpIter[318271])(318433 call isArray tmpIter[318271]))))
      if isRngDomArr[318425]
      {
        const _coforallCount[318292] "const" "end count" "temp"
        (318361 'move' _coforallCount[318292](318358 call _endCountAlloc 1))
        unknown numTasks[318293] "temp"
        (318345 'move' numTasks[318293](318341 call . tmpIter[318271] c"size"))
        (318336 call _upEndCount _coforallCount[318292] 1 numTasks[318293])
        (318333 call chpl_resetTaskSpawn numTasks[318293])
        unknown _indexOfInterest[318300] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318301] "expr temp" "temp"
        (318310 'move' _iterator[318301](318308 call _getIterator tmpIter[318271]))
        Defer
        {
          {
            (318326 call _freeIterator _iterator[318301])
          }
        }
        { scopeless type
          (318315 'move' _indexOfInterest[318300](318312 call iteratorIndex _iterator[318301]))
        }
        ForLoop[318302]
        {
          unknown ld[318319] "coforall index var" "index var" "insert auto destroy"
          (318321 'move' ld[318319] _indexOfInterest[318300])
          {
            {
              const tmp[318280] "const" "temp"
              (318282 'move' tmp[318280](318284 'deref'(318285 '_wide_get_locale' ld)))
              (318289 call chpl__delete ld)
              (318277 'elided on block' 0 tmp[318280])
            }
            (318295 call _downEndCount _coforallCount[318292] nil[44])
            (318294 'coforall loop')
          }
          label _continueLabel[318305]
          _indexOfInterest[318300]
          _iterator[318301]
        }
        label _breakLabel[318306]
        Defer
        {
          {
            (318348 call _endCountFree _coforallCount[318292])
          }
        }
        (318353 call _waitEndCount _coforallCount[318292] 1 numTasks[318293])
      }
      {
        const _coforallCount[318365] "const" "end count" "temp"
        (318422 'move' _coforallCount[318365](318419 call _endCountAlloc 1))
        unknown _indexOfInterest[318373] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318374] "expr temp" "temp"
        (318383 'move' _iterator[318374](318381 call _getIterator tmpIter[318271]))
        Defer
        {
          {
            (318399 call _freeIterator _iterator[318374])
          }
        }
        { scopeless type
          (318388 'move' _indexOfInterest[318373](318385 call iteratorIndex _iterator[318374]))
        }
        ForLoop[318375]
        {
          unknown ld[318392] "coforall index var" "index var" "insert auto destroy"
          (318394 'move' ld[318392] _indexOfInterest[318373])
          (318406 call _upEndCount _coforallCount[318365] 1)
          {
            {
              const tmp[318262] "const" "temp"
              (318263 'move' tmp[318262](318260 'deref'(318259 '_wide_get_locale' ld)))
              (318256 call chpl__delete ld)
              (318266 'elided on block' 0 tmp[318262])
            }
            (318368 call _downEndCount _coforallCount[318365] nil[44])
            (318367 'coforall loop')
          }
          label _continueLabel[318378]
          _indexOfInterest[318373]
          _iterator[318374]
        }
        label _breakLabel[318379]
        Defer
        {
          {
            (318410 call _endCountFree _coforallCount[318365])
          }
        }
        (318415 call _waitEndCount _coforallCount[318365] 1)
      }
    }
  }
  function _unknown[51].dsiDisplayRepresentation[318450](arg _mt[318455]:_MT[238], arg this[318452] :
  Block) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    (318477 call writeln "boundingBox = " boundingBox)
    (318500 call writeln "targetLocDom = " targetLocDom)
    (318531 call writeln "targetLocales = "(318527 for  tl  in  targetLocales do
    {
      (318524 call . tl c"id")
    } ))
    (318553 call writeln "dataParTasksPerLocale = " dataParTasksPerLocale)
    (318575 call writeln "dataParIgnoreRunningTasks = " dataParIgnoreRunningTasks)
    (318597 call writeln "dataParMinGranularity = " dataParMinGranularity)
    {
      unknown _indexOfInterest[318649] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[318650] "expr temp" "temp"
      (318659 'move' _iterator[318650](318657 call _getIterator targetLocDom))
      Defer
      {
        {
          (318675 call _freeIterator _iterator[318650])
        }
      }
      { scopeless type
        (318664 'move' _indexOfInterest[318649](318661 call iteratorIndex _iterator[318650]))
      }
      ForLoop[318651]
      {
        unknown tli[318668] "index var" "insert auto destroy"
        (318670 'move' tli[318668] _indexOfInterest[318649])
        (318647 call writeln "locDist[" tli "].myChunk = "(318644 call .(318641 call locDist tli) c"myChunk"))
        label _continueLabel[318654]
        _indexOfInterest[318649]
        _iterator[318650]
      }
      label _breakLabel[318655]
    }
  }
  function _unknown[51].dsiNewRectangularDom[318691](arg _mt[318704]:_MT[238], arg this[318701] :
  Block, param arg rank[318688] :
  int[13], arg idxType[318693]:_any[178](?), param arg stridable[318696] :
  bool[10], arg inds[318699]:_any[178](?)) : _unknown[51] "method" "method overrides"
  {
    if(318734 call _cond_test(318711 call != idxType(318708 call . this c"idxType")))
    {
      (318732 call compilerError "Block domain index type does not match distribution's")
    }
    if(318768 call _cond_test(318745 call != rank(318742 call . this c"rank")))
    {
      (318766 call compilerError "Block domain rank does not match distribution's")
    }
    const whole[318780] "const"(318779 call createWholeDomainForInds rank idxType stridable inds)
    (318783 'end of statement')
    const dummyLBD[318793] "const"(318786 'new'(_chpl_manager = unmanaged[220](?))(318792 call LocBlockDom rank idxType stridable))
    (318796 'end of statement')
    unknown locDomsTemp[318814] dummyLBD(318811 call chpl__buildArrayRuntimeType(318809 call chpl__ensureDomainExpr(318798 call . this c"targetLocDom"))(318808 'to unmanaged class from unknown'(318807 call LocBlockDom rank idxType stridable)))
    (318817 'end of statement')
    {
      unknown tmpIter[318865] "expr temp" "maybe ref" "no copy" "temp"
      (318868 'move' tmpIter[318865](318820 call . this c"targetLocDom"))
      unknown isRngDomArr[319041] "maybe param" "temp"
      (319056 'move' isRngDomArr[319041](319054 call ||(319043 call isBoundedRange tmpIter[318865])(319052 call ||(319046 call isDomain tmpIter[318865])(319049 call isArray tmpIter[318865]))))
      if isRngDomArr[319041]
      {
        const _coforallCount[318908] "const" "end count" "temp"
        (318977 'move' _coforallCount[318908](318974 call _endCountAlloc 1))
        unknown numTasks[318909] "temp"
        (318961 'move' numTasks[318909](318957 call . tmpIter[318865] c"size"))
        (318952 call _upEndCount _coforallCount[318908] 1 numTasks[318909])
        (318949 call chpl_resetTaskSpawn numTasks[318909])
        unknown _indexOfInterest[318916] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318917] "expr temp" "temp"
        (318926 'move' _iterator[318917](318924 call _getIterator tmpIter[318865]))
        Defer
        {
          {
            (318942 call _freeIterator _iterator[318917])
          }
        }
        { scopeless type
          (318931 'move' _indexOfInterest[318916](318928 call iteratorIndex _iterator[318917]))
        }
        ForLoop[318918]
        {
          unknown localeIdx[318935] "coforall index var" "index var" "insert auto destroy"
          (318937 'move' localeIdx[318935] _indexOfInterest[318916])
          {
            {
              const tmp[318874] "const" "temp"
              (318876 'move' tmp[318874](318878 'deref'(318879 '_wide_get_locale'(318884 call(318881 call . this c"targetLocales") localeIdx))))
              (318888 call =(318890 call locDomsTemp localeIdx)(318892 'new'(_chpl_manager = unmanaged[220](?))(318896 call LocBlockDom rank idxType stridable(318904 call(318901 call . this c"getChunk") whole localeIdx))))
              (318871 'elided on block' 0 tmp[318874])
            }
            (318911 call _downEndCount _coforallCount[318908] nil[44])
            (318910 'coforall loop')
          }
          label _continueLabel[318921]
          _indexOfInterest[318916]
          _iterator[318917]
        }
        label _breakLabel[318922]
        Defer
        {
          {
            (318964 call _endCountFree _coforallCount[318908])
          }
        }
        (318969 call _waitEndCount _coforallCount[318908] 1 numTasks[318909])
      }
      {
        const _coforallCount[318981] "const" "end count" "temp"
        (319038 'move' _coforallCount[318981](319035 call _endCountAlloc 1))
        unknown _indexOfInterest[318989] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[318990] "expr temp" "temp"
        (318999 'move' _iterator[318990](318997 call _getIterator tmpIter[318865]))
        Defer
        {
          {
            (319015 call _freeIterator _iterator[318990])
          }
        }
        { scopeless type
          (319004 'move' _indexOfInterest[318989](319001 call iteratorIndex _iterator[318990]))
        }
        ForLoop[318991]
        {
          unknown localeIdx[319008] "coforall index var" "index var" "insert auto destroy"
          (319010 'move' localeIdx[319008] _indexOfInterest[318989])
          (319022 call _upEndCount _coforallCount[318981] 1)
          {
            {
              const tmp[318857] "const" "temp"
              (318858 'move' tmp[318857](318855 'deref'(318854 '_wide_get_locale'(318829 call(318824 call . this c"targetLocales") localeIdx))))
              (318851 call =(318833 call locDomsTemp localeIdx)(318836 'new'(_chpl_manager = unmanaged[220](?))(318850 call LocBlockDom rank idxType stridable(318849 call(318843 call . this c"getChunk") whole localeIdx))))
              (318861 'elided on block' 0 tmp[318857])
            }
            (318984 call _downEndCount _coforallCount[318981] nil[44])
            (318983 'coforall loop')
          }
          label _continueLabel[318994]
          _indexOfInterest[318989]
          _iterator[318990]
        }
        label _breakLabel[318995]
        Defer
        {
          {
            (319026 call _endCountFree _coforallCount[318981])
          }
        }
        (319031 call _waitEndCount _coforallCount[318981] 1)
      }
    }
    (319062 call chpl__delete dummyLBD)
    unknown dom[319081](319067 'new'(_chpl_manager = unmanaged[220](?))(319080 call BlockDom rank idxType stridable sparseLayoutType(319076 call _cast unmanaged[220](?) this) locDomsTemp whole))
    (319084 'end of statement')
    if(319115 call _cond_test debugBlockDist)
    {
      (319105 call writeln "Creating new Block domain:")
      (319113 call(319109 call . dom c"dsiDisplayRepresentation"))
    }
    (319120 return dom)
  }
  function _unknown[51].dsiNewSparseDom[319131](arg _mt[319142]:_MT[238], arg this[319139] :
  Block, param arg rank[319128] :
  int[13], arg idxType[319133]:_any[178](?), arg dom[319136] :
  _domain) : _unknown[51] "method" "method overrides"
  {
    unknown ret[319178](319146 'new'(_chpl_manager = unmanaged[220](?))(319177 call SparseBlockDom(rank = rank)(idxType = idxType)(sparseLayoutType = sparseLayoutType)(stridable =(319156 call . dom c"stridable"))(dist =(319163 call _to_unmanaged this))(whole =(319171 call .(319166 call . dom c"_value") c"whole"))(parentDom = dom)))
    (319181 'end of statement')
    (319188 call(319184 call . ret c"setup"))
    (319191 return ret)
  }
  function _unknown[51].writeThis[319200](arg _mt[319205]:_MT[238], arg this[319202] :
  Block, arg x[319198]:_any[178](?)) : _unknown[51] throws "method" "no return value for void"
  {
    (319228 call <~>(319225 call <~> x "Block") "\n")
    (319253 call <~>(319250 call <~> x "-------") "\n")
    (319280 call <~>(319277 call <~>(319274 call <~> x "distributes: ") boundingBox) "\n")
    (319307 call <~>(319304 call <~>(319301 call <~> x "across locales: ") targetLocales) "\n")
    (319334 call <~>(319331 call <~>(319328 call <~> x "indexed via: ") targetLocDom) "\n")
    (319358 call <~>(319355 call <~> x "resulting in: ") "\n")
    {
      unknown _indexOfInterest[319447] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[319448] "expr temp" "temp"
      (319457 'move' _iterator[319448](319455 call _getIterator targetLocDom))
      Defer
      {
        {
          (319473 call _freeIterator _iterator[319448])
        }
      }
      { scopeless type
        (319462 'move' _indexOfInterest[319447](319459 call iteratorIndex _iterator[319448]))
      }
      ForLoop[319449]
      {
        unknown locid[319466] "index var" "insert auto destroy"
        (319468 'move' locid[319466] _indexOfInterest[319447])
        (319444 call <~>(319441 call <~>(319432 call <~>(319413 call <~>(319403 call <~>(319384 call <~>(319381 call <~> x "  [") locid) "] locale ")(319412 '_wide_get_node'(319408 call locDist locid))) " owns chunk: ")(319438 call .(319437 call locDist locid) c"myChunk")) "\n")
        label _continueLabel[319452]
        _indexOfInterest[319447]
        _iterator[319448]
      }
      label _breakLabel[319453]
    }
  }
  function _unknown[51].dsiIndexToLocale[319489](arg _mt[319494]:_MT[238], arg this[319491] :
  Block, arg ind[319486] :
  idxType) : _unknown[51] "method"
  {
    (319507 return(319506 call targetLocales(319504 call targetLocsIdx ind)))
  }
  where {
    (319498 call == rank 1)
  }
  function _unknown[51].dsiIndexToLocale[319523](arg _mt[319528]:_MT[238], arg this[319525] :
  Block, arg ind[319520] :
  (319518 call * rank idxType)) : _unknown[51] "method"
  {
    (319537 return(319536 call targetLocales(319534 call targetLocsIdx ind)))
  }
  function _unknown[51].getChunk[319547](arg _mt[319554]:_MT[238], arg this[319551] :
  Block, arg inds[319545]:_any[178](?), arg locid[319549]:_any[178](?)) : _unknown[51] "method"
  {
    const chunk[319572] "const"(319571 call(319560 call .(319559 call locDist locid) c"myChunk")(319569 'expand_tuple'(319568 call(319564 call . inds c"getIndices"))))
    (319575 'end of statement')
    if(319696 call _cond_test sanityCheckDistribution)
    {
      if(319692 call _cond_test(319583 call >(319579 call . chunk c"size") 0))
      {
        if(319649 call _cond_test(319593 call !=(319591 call targetLocsIdx(319587 call . chunk c"low")) locid))
        {
          (319647 call writeln "["(319599 call . here c"id") "] "(319620 call . chunk c"low") " is in my chunk but maps to "(319646 call targetLocsIdx(319642 call . chunk c"low")))
        }
        if(319687 call _cond_test(319663 call !=(319661 call targetLocsIdx(319657 call . chunk c"high")) locid))
        {
          (319685 call writeln "["(319669 call . here c"id") "] "(319674 call . chunk c"high") " is in my chunk but maps to "(319684 call targetLocsIdx(319680 call . chunk c"high")))
        }
      }
    }
    (319702 return chunk)
  }
  function _unknown[51].targetLocsIdx[319713](arg _mt[319718]:_MT[238], arg this[319715] :
  Block, arg ind[319710] :
  idxType) : _unknown[51] "method"
  {
    (319730 return(319729 call targetLocsIdx(319726 call _build_tuple ind)))
  }
  where {
    (319722 call == rank 1)
  }
  function _unknown[51].targetLocsIdx[319746](arg _mt[319751]:_MT[238], arg this[319748] :
  Block, arg ind[319743] :
  (319741 call * rank idxType)) : _unknown[51] "method"
  {
    unknown result[319757](319755 call * rank int[13])
    (319760 'end of statement')
    {
      unknown i[319845] 0
      unknown tmp[319846] "maybe param" "temp"
      (319858 'move' tmp[319846](319856 call chpl_compute_low_param_loop_bound 0(319765 call - rank 1)))
      unknown tmp[319847] "maybe param" "temp"
      (319868 'move' tmp[319847](319866 call chpl_compute_high_param_loop_bound 0(319863 call - rank 1)))
      unknown tmp[319848] "maybe param" "temp"
      (319871 'move' tmp[319848] 1)
      ParamForLoop[319873]
      { i[319845] tmp[319846] tmp[319847] tmp[319848]
        (319842 call =(319772 call result i)(319841 call max 0(319840 call min(319791 call _cast int[13](319788 call -(319784 call .(319783 call(319778 call . targetLocDom c"dim") i) c"size") 1))(319838 call _cast int[13](319835 call /(319823 call *(319808 call -(319797 call ind i)(319805 call .(319804 call(319799 call . boundingBox c"dim") i) c"low"))(319821 call _cast idxType(319817 call .(319816 call(319811 call . targetLocDom c"dim") i) c"size")))(319832 call .(319831 call(319826 call . boundingBox c"dim") i) c"size"))))))
      }
      label _unused_continueLabel[319850]
      label _breakLabel[319849]
    }
    (319894 return(319891 IfExpr (319884 call == rank 1) then
    { scopeless
      (319889 call result 0)
    } else
    { scopeless
      result
    } ))
  }
  function _unknown[51].activeTargetLocales[319907](arg _mt[319912]:_MT[238], arg this[319909] :
  Block, const arg space[319903] :
  _domain =
  boundingBox) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    const locSpace[319924] "const"(319922 call chpl__buildDomainExpr(319920 'expand_tuple'(319919 call(319915 call . space c"dims"))))
    (319927 'end of statement')
    const low[319939] "const"(319938 call chpl__tuplify(319936 call targetLocsIdx(319932 call . locSpace c"first")))
    (319942 'end of statement')
    const high[319953] "const"(319952 call chpl__tuplify(319950 call targetLocsIdx(319946 call . locSpace c"last")))
    (319956 'end of statement')
    unknown dims[319968](319966 call * rank(319965 call range(319963 'typeof'(319962 call low 0))))
    (319971 'end of statement')
    {
      unknown i[319997] 0
      unknown tmp[319998] "maybe param" "temp"
      (320010 'move' tmp[319998](320008 call chpl_compute_low_param_loop_bound 0(319975 call - rank 1)))
      unknown tmp[319999] "maybe param" "temp"
      (320020 'move' tmp[319999](320018 call chpl_compute_high_param_loop_bound 0(320015 call - rank 1)))
      unknown tmp[320000] "maybe param" "temp"
      (320023 'move' tmp[320000] 1)
      ParamForLoop[320025]
      { i[319997] tmp[319998] tmp[319999] tmp[320000]
        {
          (319993 call =(319982 call dims i)(319991 call chpl_build_bounded_range(319986 call low i)(319990 call high i)))
        }
      }
      label _unused_continueLabel[320002]
      label _breakLabel[320001]
    }
    {
      unknown _indexOfInterest[320070] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320071] "expr temp" "temp"
      (320080 'move' _iterator[320071](320078 call _getIterator(320038 call chpl__buildDomainExpr(320036 'expand_tuple' dims))))
      Defer
      {
        {
          (320097 call _freeIterator _iterator[320071])
        }
      }
      { scopeless type
        (320086 'move' _indexOfInterest[320070](320083 call iteratorIndex _iterator[320071]))
      }
      ForLoop[320072]
      {
        unknown i[320090] "index var" "insert auto destroy"
        (320092 'move' i[320090] _indexOfInterest[320070])
        {
          const chunk[320046] "const"(320045 call chpl__computeBlock i targetLocDom boundingBox)
          (320049 'end of statement')
          if(320065 call _cond_test(320060 call >(320056 call .(320055 call locSpace(320053 'expand_tuple' chunk)) c"size") 0))
          {
            (320063 yield i)
          }
        }
        label _continueLabel[320075]
        _indexOfInterest[320070]
        _iterator[320071]
      }
      label _breakLabel[320076]
    }
  }
  function chpl__computeBlock[320110](arg locid[320108]:_any[178](?), arg targetLocBox[320112]:_any[178](?), arg boundingBox[320114]:_any[178](?)) : _unknown[51]
  {
    unknown rank[320120] "param"(320117 call . targetLocBox c"rank")
    (320123 'end of statement')
    unknown idxType[320135] "type variable"(320132 call .(320131 call(320128 call chpl__tuplify boundingBox) 0) c"idxType")
    unknown inds[320145](320143 call * rank(320142 call range idxType))
    (320148 'end of statement')
    {
      unknown i[320260] 0
      unknown tmp[320261] "maybe param" "temp"
      (320273 'move' tmp[320261](320271 call chpl_compute_low_param_loop_bound 0(320152 call - rank 1)))
      unknown tmp[320262] "maybe param" "temp"
      (320283 'move' tmp[320262](320281 call chpl_compute_high_param_loop_bound 0(320278 call - rank 1)))
      unknown tmp[320263] "maybe param" "temp"
      (320286 'move' tmp[320263] 1)
      ParamForLoop[320288]
      { i[320260] tmp[320261] tmp[320262] tmp[320263]
        {
          const lo[320166] "const"(320163 call .(320162 call(320157 call . boundingBox c"dim") i) c"low")
          (320169 'end of statement')
          const hi[320181] "const"(320178 call .(320177 call(320172 call . boundingBox c"dim") i) c"high")
          (320184 'end of statement')
          const numelems[320192] "const"(320190 call +(320187 call - hi lo) 1)
          (320195 'end of statement')
          const numlocs[320206] "const"(320203 call .(320202 call(320197 call . targetLocBox c"dim") i) c"size")
          (320209 'end of statement')
          const tmp[320236] "const" "temp"(320235 call _computeBlock numelems numlocs(320225 call(320222 call chpl__tuplify locid) i)(320229 call max idxType)(320233 call min idxType) lo)
          (320243 call _check_tuple_var_decl tmp[320236] 2)
          const blo[320210] "const"(320237 call tmp[320236] 0)
          const bhi[320212] "const"(320240 call tmp[320236] 1)
          (320248 'end of statement')
          (320257 call =(320252 call inds i)(320255 call chpl_build_bounded_range blo bhi))
        }
      }
      label _unused_continueLabel[320265]
      label _breakLabel[320264]
    }
    (320298 return inds)
  }
  function _unknown[51].init[320309](arg _mt[320328]:_MT[238], arg this[320325] :
  LocBlock, param arg rank[320306] :
  int[13], arg idxType[320311]:_any[178](?), arg locid[320313]:_any[178](?), arg boundingBox[320315]:_any[178](?), arg targetLocDom[320322] :
  (320320 call chpl__buildDomainRuntimeType defaultDist rank)) : _unknown[51] "method" "no return value for void"
  {
    (320335 call =(320331 call . this c"rank") rank)
    (320344 call =(320340 call . this c"idxType") idxType)
    const inds[320356] "const"(320355 call chpl__computeBlock(320351 call chpl__tuplify locid) targetLocDom boundingBox)
    (320359 'end of statement')
    (320366 call = myChunk(320364 call chpl__buildDomainExpr(320362 'expand_tuple' inds)))
  }
  function _unknown[51].init[320376](arg _mt[320387]:_MT[238], arg this[320384] :
  LocBlock, param arg rank[320374]:_any[178](?), arg idxType[320378]:_any[178](?), param arg dummy[320381] :
  bool[10]) : _unknown[51] "method" "no return value for void"
  {
    (320395 call =(320391 call . this c"rank") rank)
    (320404 call =(320400 call . this c"idxType") idxType)
  }
  where {
    dummy
  }
  function _unknown[51].dsiMyDist[320413](arg _mt[320418]:_MT[238], arg this[320415] :
  BlockDom) : _unknown[51] "method" "method overrides"
  {
    (320421 return dist)
  }
  function _unknown[51].dsiDisplayRepresentation[320429](arg _mt[320434]:_MT[238], arg this[320431] :
  BlockDom) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    (320456 call writeln "whole = " whole)
    {
      unknown _indexOfInterest[320510] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320511] "expr temp" "temp"
      (320520 'move' _iterator[320511](320518 call _getIterator(320461 call . dist c"targetLocDom")))
      Defer
      {
        {
          (320537 call _freeIterator _iterator[320511])
        }
      }
      { scopeless type
        (320526 'move' _indexOfInterest[320510](320523 call iteratorIndex _iterator[320511]))
      }
      ForLoop[320512]
      {
        unknown tli[320530] "index var" "insert auto destroy"
        (320532 'move' tli[320530] _indexOfInterest[320510])
        (320508 call writeln "locDoms[" tli "].myBlock = "(320505 call .(320504 call locDoms tli) c"myBlock"))
        label _continueLabel[320515]
        _indexOfInterest[320510]
        _iterator[320511]
      }
      label _breakLabel[320516]
    }
  }
  function _unknown[51].dsiDims[320549](arg _mt[320554]:_MT[238], arg this[320551] :
  BlockDom) : _unknown[51] "method"
  {
    (320562 return(320561 call(320557 call . whole c"dims")))
  }
  function _unknown[51].dsiDim[320574](arg _mt[320579]:_MT[238], arg this[320576] :
  BlockDom, arg d[320571] :
  int[13]) : _unknown[51] "method"
  {
    (320588 return(320587 call(320582 call . whole c"dim") d))
  }
  function _unknown[51].getLocDom[320598](arg _mt[320603]:_MT[238], arg this[320600] :
  BlockDom, arg localeIdx[320596]:_any[178](?)) : _unknown[51] "method"
  {
    (320609 return(320608 call locDoms localeIdx))
  }
  function _matchArgsShape[320618](arg rangeType[320616]:_any[178](?), arg scalarType[320620]:_any[178](?), arg args[320622]:_any[178](?)) type : _unknown[51]
  {
    function helper[320630](param arg i[320627] :
    int[13]) type : _unknown[51]
    {
      if(320705 call _cond_test(320637 call == i(320634 call . args c"size")))
      {
        if(320656 call _cond_test(320645 call isCollapsedDimension(320643 call args i)))
        {
          (320649 return(320647 call _build_tuple scalarType))
        }
        {
          (320654 return(320652 call _build_tuple rangeType))
        }
      }
      {
        if(320698 call _cond_test(320669 call isCollapsedDimension(320667 call args i)))
        {
          (320682 return(320680 call _build_tuple scalarType(320678 'expand_tuple'(320677 call helper(320674 call + i 1)))))
        }
        {
          (320696 return(320694 call _build_tuple rangeType(320692 'expand_tuple'(320691 call helper(320688 call + i 1)))))
        }
      }
    }
    (320717 return(320716 call helper 0))
  }
  function _unknown[51].these[320724](arg _mt[320729]:_MT[238], arg this[320726] :
  BlockDom) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[320736] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[320737] "expr temp" "temp"
      (320746 'move' _iterator[320737](320744 call _getIterator whole))
      Defer
      {
        {
          (320762 call _freeIterator _iterator[320737])
        }
      }
      { scopeless type
        (320751 'move' _indexOfInterest[320736](320748 call iteratorIndex _iterator[320737]))
      }
      ForLoop[320738]
      {
        unknown i[320755] "index var" "insert auto destroy"
        (320757 'move' i[320755] _indexOfInterest[320736])
        (320734 yield i)
        label _continueLabel[320741]
        _indexOfInterest[320736]
        _iterator[320737]
      }
      label _breakLabel[320742]
    }
  }
  function _unknown[51].these[320779](arg _mt[320784]:_MT[238], arg this[320781] :
  BlockDom, param arg tag[320776] :
  iterKind) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    const maxTasks[320797] "const"(320794 call . dist c"dataParTasksPerLocale")
    (320800 'end of statement')
    const ignoreRunning[320806] "const"(320803 call . dist c"dataParIgnoreRunningTasks")
    (320809 'end of statement')
    const minSize[320814] "const"(320811 call . dist c"dataParMinGranularity")
    (320817 'end of statement')
    const wholeLow[320822] "const"(320819 call . whole c"low")
    (320825 'end of statement')
    const hereId[320830] "const"(320827 call . here c"id")
    (320833 'end of statement')
    const hereIgnoreRunning[320848] "const"(320845 IfExpr (320841 call ==(320839 call(320835 call . here c"runningTasks")) 1) then
    { scopeless
      1
    } else
    { scopeless
      ignoreRunning
    } )
    (320851 'end of statement')
    {
      unknown tmpIter[321088] "expr temp" "maybe ref" "no copy" "temp"
      (321091 'move' tmpIter[321088] locDoms)
      unknown isRngDomArr[321428] "maybe param" "temp"
      (321443 'move' isRngDomArr[321428](321441 call ||(321430 call isBoundedRange tmpIter[321088])(321439 call ||(321433 call isDomain tmpIter[321088])(321436 call isArray tmpIter[321088]))))
      if isRngDomArr[321428]
      {
        const _coforallCount[321295] "const" "end count" "temp"
        (321364 'move' _coforallCount[321295](321361 call _endCountAlloc 1))
        unknown numTasks[321296] "temp"
        (321348 'move' numTasks[321296](321344 call . tmpIter[321088] c"size"))
        (321339 call _upEndCount _coforallCount[321295] 1 numTasks[321296])
        (321336 call chpl_resetTaskSpawn numTasks[321296])
        unknown _indexOfInterest[321303] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[321304] "expr temp" "temp"
        (321313 'move' _iterator[321304](321311 call _getIterator tmpIter[321088]))
        Defer
        {
          {
            (321329 call _freeIterator _iterator[321304])
          }
        }
        { scopeless type
          (321318 'move' _indexOfInterest[321303](321315 call iteratorIndex _iterator[321304]))
        }
        ForLoop[321305]
        {
          unknown locDom[321322] "coforall index var" "index var" "insert auto destroy"
          (321324 'move' locDom[321322] _indexOfInterest[321303])
          {
            {
              const tmp[321097] "const" "temp"
              (321099 'move' tmp[321097](321101 'deref'(321102 '_wide_get_locale' locDom)))
              {
                const myIgnoreRunning[321106] "const"(321118 IfExpr (321108 call ==(321110 call . here c"id") hereId) then
                { scopeless
                  hereIgnoreRunning
                } else
                { scopeless
                  ignoreRunning
                } )
                (321120 'end of statement')
                unknown strType[321121] "type variable"(321123 call chpl__signedType idxType)
                const tmpBlock[321127] "const"(321135 call(321129 call .(321131 call . locDom c"myBlock") c"chpl__unTranslate") wholeLow)
                (321138 'end of statement')
                unknown locOffset[321140](321142 call * rank idxType)
                (321146 'end of statement')
                {
                  unknown i[321148] 0
                  unknown tmp[321151] "maybe param" "temp"
                  (321153 'move' tmp[321151](321156 call chpl_compute_low_param_loop_bound 0(321159 call -(321161 call . tmpBlock c"rank") 1)))
                  unknown tmp[321165] "maybe param" "temp"
                  (321167 'move' tmp[321165](321170 call chpl_compute_high_param_loop_bound 0(321173 call -(321175 call . tmpBlock c"rank") 1)))
                  unknown tmp[321179] "maybe param" "temp"
                  (321181 'move' tmp[321179] 1)
                  ParamForLoop[321184]
                  { i[321148] tmp[321151] tmp[321165] tmp[321179]
                    {
                      const stride[321192] "const"(321194 call .(321199 call(321196 call . tmpBlock c"dim") i) c"stride")
                      (321203 'end of statement')
                      if(321205 call _cond_test(321207 call &&(321209 call < stride 0)(321213 call != strType idxType)))
                      {
                        (321219 call halt "negative stride not supported with unsigned idxType")
                      }
                      (321223 call =(321225 call locOffset i)(321228 call /(321230 call .(321235 call(321232 call . tmpBlock c"dim") i) c"first")(321239 call _cast idxType stride)))
                    }
                  }
                  label _unused_continueLabel[321242]
                  label _breakLabel[321244]
                }
                {
                  unknown _indexOfInterest[321247] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[321249] "expr temp" "temp"
                  (321251 'move' _iterator[321249](321254 call _getIterator(321259 call(321256 call . tmpBlock c"these")(321261 call . iterKind c"leader") maxTasks myIgnoreRunning minSize locOffset)))
                  Defer
                  {
                    {
                      (321270 call _freeIterator _iterator[321249])
                    }
                  }
                  { scopeless type
                    (321274 'move' _indexOfInterest[321247](321277 call iteratorIndex _iterator[321249]))
                  }
                  ForLoop[321279]
                  {
                    unknown followThis[321282] "index var" "insert auto destroy"
                    (321284 'move' followThis[321282] _indexOfInterest[321247])
                    (321288 yield followThis)
                    label _continueLabel[321290]
                    _indexOfInterest[321247]
                    _iterator[321249]
                  }
                  label _breakLabel[321292]
                }
              }
              (321094 'elided on block' 0 tmp[321097])
            }
            (321298 call _downEndCount _coforallCount[321295] nil[44])
            (321297 'coforall loop')
          }
          label _continueLabel[321308]
          _indexOfInterest[321303]
          _iterator[321304]
        }
        label _breakLabel[321309]
        Defer
        {
          {
            (321351 call _endCountFree _coforallCount[321295])
          }
        }
        (321356 call _waitEndCount _coforallCount[321295] 1 numTasks[321296])
      }
      {
        const _coforallCount[321368] "const" "end count" "temp"
        (321425 'move' _coforallCount[321368](321422 call _endCountAlloc 1))
        unknown _indexOfInterest[321376] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[321377] "expr temp" "temp"
        (321386 'move' _iterator[321377](321384 call _getIterator tmpIter[321088]))
        Defer
        {
          {
            (321402 call _freeIterator _iterator[321377])
          }
        }
        { scopeless type
          (321391 'move' _indexOfInterest[321376](321388 call iteratorIndex _iterator[321377]))
        }
        ForLoop[321378]
        {
          unknown locDom[321395] "coforall index var" "index var" "insert auto destroy"
          (321397 'move' locDom[321395] _indexOfInterest[321376])
          (321409 call _upEndCount _coforallCount[321368] 1)
          {
            {
              const tmp[321080] "const" "temp"
              (321081 'move' tmp[321080](321078 'deref'(321077 '_wide_get_locale' locDom)))
              {
                const myIgnoreRunning[320867] "const"(320864 IfExpr (320860 call ==(320856 call . here c"id") hereId) then
                { scopeless
                  hereIgnoreRunning
                } else
                { scopeless
                  ignoreRunning
                } )
                (320870 'end of statement')
                unknown strType[320876] "type variable"(320875 call chpl__signedType idxType)
                const tmpBlock[320889] "const"(320888 call(320883 call .(320880 call . locDom c"myBlock") c"chpl__unTranslate") wholeLow)
                (320892 'end of statement')
                unknown locOffset[320897](320895 call * rank idxType)
                (320900 'end of statement')
                {
                  unknown i[320985] 0
                  unknown tmp[320986] "maybe param" "temp"
                  (320998 'move' tmp[320986](320996 call chpl_compute_low_param_loop_bound 0(320907 call -(320903 call . tmpBlock c"rank") 1)))
                  unknown tmp[320987] "maybe param" "temp"
                  (321011 'move' tmp[320987](321009 call chpl_compute_high_param_loop_bound 0(321003 call -(321005 call . tmpBlock c"rank") 1)))
                  unknown tmp[320988] "maybe param" "temp"
                  (321014 'move' tmp[320988] 1)
                  ParamForLoop[321016]
                  { i[320985] tmp[320986] tmp[320987] tmp[320988]
                    {
                      const stride[320921] "const"(320918 call .(320917 call(320912 call . tmpBlock c"dim") i) c"stride")
                      (320924 'end of statement')
                      if(320957 call _cond_test(320934 call &&(320928 call < stride 0)(320932 call != strType idxType)))
                      {
                        (320955 call halt "negative stride not supported with unsigned idxType")
                      }
                      (320982 call =(320965 call locOffset i)(320980 call /(320973 call .(320972 call(320967 call . tmpBlock c"dim") i) c"first")(320978 call _cast idxType stride)))
                    }
                  }
                  label _unused_continueLabel[320990]
                  label _breakLabel[320989]
                }
                {
                  unknown _indexOfInterest[321043] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[321044] "expr temp" "temp"
                  (321053 'move' _iterator[321044](321051 call _getIterator(321039 call(321027 call . tmpBlock c"these")(321031 call . iterKind c"leader") maxTasks myIgnoreRunning minSize locOffset)))
                  Defer
                  {
                    {
                      (321070 call _freeIterator _iterator[321044])
                    }
                  }
                  { scopeless type
                    (321059 'move' _indexOfInterest[321043](321056 call iteratorIndex _iterator[321044]))
                  }
                  ForLoop[321045]
                  {
                    unknown followThis[321063] "index var" "insert auto destroy"
                    (321065 'move' followThis[321063] _indexOfInterest[321043])
                    (321041 yield followThis)
                    label _continueLabel[321048]
                    _indexOfInterest[321043]
                    _iterator[321044]
                  }
                  label _breakLabel[321049]
                }
              }
              (321084 'elided on block' 0 tmp[321080])
            }
            (321371 call _downEndCount _coforallCount[321368] nil[44])
            (321370 'coforall loop')
          }
          label _continueLabel[321381]
          _indexOfInterest[321376]
          _iterator[321377]
        }
        label _breakLabel[321382]
        Defer
        {
          {
            (321413 call _endCountFree _coforallCount[321368])
          }
        }
        (321418 call _waitEndCount _coforallCount[321368] 1)
      }
    }
  }
  where {
    (320791 call == tag(320788 call . iterKind c"leader"))
  }
  function _unknown[51].these[321457](arg _mt[321464]:_MT[238], arg this[321461] :
  BlockDom, param arg tag[321454] :
  iterKind, arg followThis[321459]:_any[178](?)) : _unknown[51] "iterator fn" "method"
  {
    function anyStridable[321477](arg rangeTuple[321475]:_any[178](?), param arg i[321481] :
    int[13] =
    0) param : _unknown[51]
    {
      (321522 return(321519 IfExpr (321493 call == i(321491 call -(321487 call . rangeTuple c"size") 1)) then
      { scopeless
        (321499 call .(321498 call rangeTuple i) c"stridable")
      } else
      { scopeless
        (321517 call ||(321506 call .(321505 call rangeTuple i) c"stridable")(321516 call anyStridable rangeTuple(321514 call + i 1)))
      } ))
    }
    if(321551 call _cond_test chpl__testParFlag)
    {
      (321549 call chpl__testParWriteln "Block domain follower invoked on " followThis)
    }
    unknown t[321571](321569 call * rank(321568 call range idxType(stridable =(321565 call || stridable(321564 call anyStridable followThis)))))
    (321574 'end of statement')
    unknown strType[321579] "type variable"(321578 call chpl__signedType idxType)
    {
      unknown i[321698] 0
      unknown tmp[321699] "maybe param" "temp"
      (321711 'move' tmp[321699](321709 call chpl_compute_low_param_loop_bound 0(321585 call - rank 1)))
      unknown tmp[321700] "maybe param" "temp"
      (321721 'move' tmp[321700](321719 call chpl_compute_high_param_loop_bound 0(321716 call - rank 1)))
      unknown tmp[321701] "maybe param" "temp"
      (321724 'move' tmp[321701] 1)
      ParamForLoop[321726]
      { i[321698] tmp[321699] tmp[321700] tmp[321701]
        {
          unknown stride[321602](321600 call _cast strType(321596 call .(321595 call(321590 call . whole c"dim") i) c"stride"))
          (321605 'end of statement')
          unknown low[321623](321621 call _cast idxType(321618 call * stride(321616 call _cast strType(321612 call .(321611 call followThis i) c"low"))))
          (321626 'end of statement')
          unknown high[321643](321641 call _cast idxType(321638 call * stride(321636 call _cast strType(321632 call .(321631 call followThis i) c"high"))))
          (321646 'end of statement')
          (321695 call =(321650 call t i)(321694 call(321685 call .(321683 call chpl_by(321671 call +(321659 call chpl_by(321653 call chpl_build_bounded_range low high)(321657 call _cast strType stride))(321668 call .(321667 call(321662 call . whole c"dim") i) c"alignedLow"))(321681 call _cast strType(321677 call .(321676 call followThis i) c"stride"))) c"safeCast")(321692 'typeof'(321691 call t i))))
        }
      }
      label _unused_continueLabel[321703]
      label _breakLabel[321702]
    }
    {
      unknown _indexOfInterest[321745] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[321746] "expr temp" "temp"
      (321755 'move' _iterator[321746](321753 call _getIterator(321739 call chpl__buildDomainExpr(321737 'expand_tuple' t))))
      Defer
      {
        {
          (321772 call _freeIterator _iterator[321746])
        }
      }
      { scopeless type
        (321761 'move' _indexOfInterest[321745](321758 call iteratorIndex _iterator[321746]))
      }
      ForLoop[321747]
      {
        unknown i[321765] "index var" "insert auto destroy"
        (321767 'move' i[321765] _indexOfInterest[321745])
        {
          (321742 yield i)
        }
        label _continueLabel[321750]
        _indexOfInterest[321745]
        _iterator[321746]
      }
      label _breakLabel[321751]
    }
  }
  where {
    (321471 call == tag(321468 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialWrite[321787](arg _mt[321792]:_MT[238], arg this[321789] :
  BlockDom, arg x[321785]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (321796 call <~> x whole)
  }
  function _unknown[51].dsiBuildArray[321807](arg _mt[321816]:_MT[238], arg this[321813] :
  BlockDom, arg eltType[321805]:_any[178](?), param arg initElts[321810] :
  bool[10]) : _unknown[51] "method"
  {
    const dom[321819] "const" this
    (321822 'end of statement')
    const creationLocale[321828] "const"(321825 call . here c"id")
    (321831 'end of statement')
    const dummyLBD[321841] "const"(321834 'new'(_chpl_manager = unmanaged[220](?))(321840 call LocBlockDom rank idxType stridable))
    (321844 'end of statement')
    const dummyLBA[321857] "const"(321847 'new'(_chpl_manager = unmanaged[220](?))(321856 call LocBlockArr eltType rank idxType stridable dummyLBD 0))
    (321860 'end of statement')
    unknown locArrTemp[321882] dummyLBA(321879 call chpl__buildArrayRuntimeType(321877 call chpl__ensureDomainExpr(321865 call .(321862 call . dom c"dist") c"targetLocDom"))(321876 'to unmanaged class from unknown'(321875 call LocBlockArr eltType rank idxType stridable)))
    (321885 'end of statement')
    unknown myLocArrTemp[321895](321894 'to unmanaged class from unknown'(321893 'to nilable class from type'(321892 call LocBlockArr eltType rank idxType stridable)))
    (321898 'end of statement')
    {
      unknown tmpIter[321988] "expr temp" "maybe ref" "no copy" "temp"
      (321991 'move' tmpIter[321988](321904 call .(321901 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[322193] "maybe param" "temp"
      (322208 'move' isRngDomArr[322193](322206 call ||(322195 call isBoundedRange tmpIter[321988])(322204 call ||(322198 call isDomain tmpIter[321988])(322201 call isArray tmpIter[321988]))))
      if isRngDomArr[322193]
      {
        const _coforallCount[322060] "const" "end count" "temp"
        (322129 'move' _coforallCount[322060](322126 call _endCountAlloc 1))
        unknown numTasks[322061] "temp"
        (322113 'move' numTasks[322061](322109 call . tmpIter[321988] c"size"))
        (322104 call _upEndCount _coforallCount[322060] 1 numTasks[322061])
        (322101 call chpl_resetTaskSpawn numTasks[322061])
        unknown _indexOfInterest[322068] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322069] "expr temp" "temp"
        (322078 'move' _iterator[322069](322076 call _getIterator tmpIter[321988]))
        Defer
        {
          {
            (322094 call _freeIterator _iterator[322069])
          }
        }
        { scopeless type
          (322083 'move' _indexOfInterest[322068](322080 call iteratorIndex _iterator[322069]))
        }
        ForLoop[322070]
        {
          unknown localeIdx[322087] "coforall index var" "index var" "insert auto destroy"
          (322089 'move' localeIdx[322087] _indexOfInterest[322068])
          {
            {
              const tmp[322000] "const" "temp"
              (322002 'move' tmp[322000](322004 'deref'(322005 '_wide_get_locale'(322013 call(322007 call .(322009 call . dom c"dist") c"targetLocales") localeIdx))))
              {
                const LBA[322017] "const"(322018 'new'(_chpl_manager = unmanaged[220](?))(322022 call LocBlockArr eltType rank idxType stridable(322031 call(322028 call . dom c"getLocDom") localeIdx)(initElts = initElts)))
                (322036 'end of statement')
                (322038 call =(322040 call locArrTemp localeIdx) LBA)
                if(322044 call _cond_test(322046 call ==(322048 call . here c"id") creationLocale))
                {
                  (322055 call = myLocArrTemp LBA)
                }
              }
              (321997 'elided on block' 0 tmp[322000])
            }
            (322063 call _downEndCount _coforallCount[322060] nil[44])
            (322062 'coforall loop')
            (321993 'actuals list' tiMarkRef[294] myLocArrTemp)
          }
          label _continueLabel[322073]
          _indexOfInterest[322068]
          _iterator[322069]
        }
        label _breakLabel[322074]
        Defer
        {
          {
            (322116 call _endCountFree _coforallCount[322060])
          }
        }
        (322121 call _waitEndCount _coforallCount[322060] 1 numTasks[322061])
      }
      {
        const _coforallCount[322133] "const" "end count" "temp"
        (322190 'move' _coforallCount[322133](322187 call _endCountAlloc 1))
        unknown _indexOfInterest[322141] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322142] "expr temp" "temp"
        (322151 'move' _iterator[322142](322149 call _getIterator tmpIter[321988]))
        Defer
        {
          {
            (322167 call _freeIterator _iterator[322142])
          }
        }
        { scopeless type
          (322156 'move' _indexOfInterest[322141](322153 call iteratorIndex _iterator[322142]))
        }
        ForLoop[322143]
        {
          unknown localeIdx[322160] "coforall index var" "index var" "insert auto destroy"
          (322162 'move' localeIdx[322160] _indexOfInterest[322141])
          (322174 call _upEndCount _coforallCount[322133] 1)
          {
            {
              const tmp[321979] "const" "temp"
              (321980 'move' tmp[321979](321977 'deref'(321976 '_wide_get_locale'(321924 call(321919 call .(321916 call . dom c"dist") c"targetLocales") localeIdx))))
              {
                const LBA[321946] "const"(321927 'new'(_chpl_manager = unmanaged[220](?))(321945 call LocBlockArr eltType rank idxType stridable(321942 call(321937 call . dom c"getLocDom") localeIdx)(initElts = initElts)))
                (321949 'end of statement')
                (321956 call =(321954 call locArrTemp localeIdx) LBA)
                if(321971 call _cond_test(321964 call ==(321960 call . here c"id") creationLocale))
                {
                  (321968 call = myLocArrTemp LBA)
                }
              }
              (321983 'elided on block' 0 tmp[321979])
            }
            (322136 call _downEndCount _coforallCount[322133] nil[44])
            (322135 'coforall loop')
            (321912 'actuals list' tiMarkRef[294] myLocArrTemp)
          }
          label _continueLabel[322146]
          _indexOfInterest[322141]
          _iterator[322142]
        }
        label _breakLabel[322147]
        Defer
        {
          {
            (322178 call _endCountFree _coforallCount[322133])
          }
        }
        (322183 call _waitEndCount _coforallCount[322133] 1)
      }
    }
    (322215 call chpl__delete dummyLBA dummyLBD)
    unknown arr[322243](322220 'new'(_chpl_manager = unmanaged[220](?))(322242 call BlockArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(sparseLayoutType = sparseLayoutType)(dom =(322236 call _to_unmanaged dom))(locArr = locArrTemp)(myLocArr = myLocArrTemp)))
    (322246 'end of statement')
    if(322265 call _cond_test(322254 call &&(322250 call . arr c"doRADOpt") disableBlockLazyRAD))
    {
      (322263 call(322259 call . arr c"setupRADOpt"))
    }
    (322271 return arr)
  }
  function _unknown[51].dsiNumIndices[322278](arg _mt[322283]:_MT[238], arg this[322280] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    (322289 return(322286 call . whole c"size"))
  }
  function _unknown[51].dsiLow[322297](arg _mt[322302]:_MT[238], arg this[322299] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    (322308 return(322305 call . whole c"low"))
  }
  function _unknown[51].dsiHigh[322316](arg _mt[322321]:_MT[238], arg this[322318] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    (322327 return(322324 call . whole c"high"))
  }
  function _unknown[51].dsiStride[322335](arg _mt[322340]:_MT[238], arg this[322337] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    (322346 return(322343 call . whole c"stride"))
  }
  function _unknown[51].dsiAlignedLow[322354](arg _mt[322359]:_MT[238], arg this[322356] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    (322365 return(322362 call . whole c"alignedLow"))
  }
  function _unknown[51].dsiAlignedHigh[322373](arg _mt[322378]:_MT[238], arg this[322375] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    (322384 return(322381 call . whole c"alignedHigh"))
  }
  function _unknown[51].dsiAlignment[322392](arg _mt[322397]:_MT[238], arg this[322394] :
  BlockDom) : _unknown[51] "method" "no parens"
  {
    (322403 return(322400 call . whole c"alignment"))
  }
  function _unknown[51].dsiSetIndices[322415](arg _mt[322420]:_MT[238], arg this[322417] :
  BlockDom, arg x[322412] :
  _domain) : _unknown[51] "method" "no return value for void"
  {
    if(322434 call _cond_test(322427 call !=(322423 call . x c"rank") rank))
    {
      (322432 call compilerError "rank mismatch in domain assignment")
    }
    if(322455 call _cond_test(322448 call !=(322444 call .(322441 call . x c"_value") c"idxType") idxType))
    {
      (322453 call compilerError "index type mismatch in domain assignment")
    }
    (322462 call = whole x)
    (322467 call setup)
    if(322496 call _cond_test debugBlockDist)
    {
      (322489 call writeln "Setting indices of Block domain:")
      (322494 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiSetIndices[322507](arg _mt[322512]:_MT[238], arg this[322509] :
  BlockDom, arg x[322505]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    if(322526 call _cond_test(322519 call !=(322515 call . x c"size") rank))
    {
      (322524 call compilerError "rank mismatch in domain assignment")
    }
    if(322547 call _cond_test(322540 call !=(322536 call .(322535 call x 0) c"idxType") idxType))
    {
      (322545 call compilerError "index type mismatch in domain assignment")
    }
    (322558 call(322553 call . whole c"setIndices") x)
    (322562 call setup)
    if(322575 call _cond_test debugBlockDist)
    {
      (322568 call writeln "Setting indices of Block domain:")
      (322573 call dsiDisplayRepresentation)
    }
  }
  function _unknown[51].dsiGetIndices[322584](arg _mt[322589]:_MT[238], arg this[322586] :
  BlockDom) : _unknown[51] "method"
  {
    (322597 return(322596 call(322592 call . whole c"getIndices")))
  }
  function _unknown[51].dsiAssignDomain[322609](arg _mt[322618]:_MT[238], arg this[322615] :
  BlockDom, arg rhs[322606] :
  _domain, arg lhsPrivate[322612] :
  bool[10]) : _unknown[51] "method" "no return value for void"
  {
    (322624 call chpl_assignDomainWithGetSetIndices this rhs)
  }
  function _unknown[51].dsiLocalSlice[322636](arg _mt[322643]:_MT[238], arg this[322640] :
  BlockDom, param arg stridable[322633] :
  bool[10], arg ranges[322638]:_any[178](?)) : _unknown[51] "method"
  {
    (322650 return(322649 call whole(322647 'expand_tuple' ranges)))
  }
  function _unknown[51].setup[322658](arg _mt[322663]:_MT[238], arg this[322660] :
  BlockDom) : _unknown[51] "method" "no return value for void"
  {
    {
      unknown tmpIter[322707] "expr temp" "maybe ref" "no copy" "temp"
      (322710 'move' tmpIter[322707](322667 call . dist c"targetLocDom"))
      unknown isRngDomArr[322878] "maybe param" "temp"
      (322893 'move' isRngDomArr[322878](322891 call ||(322880 call isBoundedRange tmpIter[322707])(322889 call ||(322883 call isDomain tmpIter[322707])(322886 call isArray tmpIter[322707]))))
      if isRngDomArr[322878]
      {
        const _coforallCount[322745] "const" "end count" "temp"
        (322814 'move' _coforallCount[322745](322811 call _endCountAlloc 1))
        unknown numTasks[322746] "temp"
        (322798 'move' numTasks[322746](322794 call . tmpIter[322707] c"size"))
        (322789 call _upEndCount _coforallCount[322745] 1 numTasks[322746])
        (322786 call chpl_resetTaskSpawn numTasks[322746])
        unknown _indexOfInterest[322753] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322754] "expr temp" "temp"
        (322763 'move' _iterator[322754](322761 call _getIterator tmpIter[322707]))
        Defer
        {
          {
            (322779 call _freeIterator _iterator[322754])
          }
        }
        { scopeless type
          (322768 'move' _indexOfInterest[322753](322765 call iteratorIndex _iterator[322754]))
        }
        ForLoop[322755]
        {
          unknown localeIdx[322772] "coforall index var" "index var" "insert auto destroy"
          (322774 'move' localeIdx[322772] _indexOfInterest[322753])
          {
            {
              const tmp[322716] "const" "temp"
              (322718 'move' tmp[322716](322720 'deref'(322721 '_wide_get_locale'(322726 call(322723 call . dist c"targetLocales") localeIdx))))
              (322730 call =(322732 call .(322734 call locDoms localeIdx) c"myBlock")(322741 call(322738 call . dist c"getChunk") whole localeIdx))
              (322713 'elided on block' 0 tmp[322716])
            }
            (322748 call _downEndCount _coforallCount[322745] nil[44])
            (322747 'coforall loop')
          }
          label _continueLabel[322758]
          _indexOfInterest[322753]
          _iterator[322754]
        }
        label _breakLabel[322759]
        Defer
        {
          {
            (322801 call _endCountFree _coforallCount[322745])
          }
        }
        (322806 call _waitEndCount _coforallCount[322745] 1 numTasks[322746])
      }
      {
        const _coforallCount[322818] "const" "end count" "temp"
        (322875 'move' _coforallCount[322818](322872 call _endCountAlloc 1))
        unknown _indexOfInterest[322826] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322827] "expr temp" "temp"
        (322836 'move' _iterator[322827](322834 call _getIterator tmpIter[322707]))
        Defer
        {
          {
            (322852 call _freeIterator _iterator[322827])
          }
        }
        { scopeless type
          (322841 'move' _indexOfInterest[322826](322838 call iteratorIndex _iterator[322827]))
        }
        ForLoop[322828]
        {
          unknown localeIdx[322845] "coforall index var" "index var" "insert auto destroy"
          (322847 'move' localeIdx[322845] _indexOfInterest[322826])
          (322859 call _upEndCount _coforallCount[322818] 1)
          {
            {
              const tmp[322698] "const" "temp"
              (322699 'move' tmp[322698](322696 'deref'(322695 '_wide_get_locale'(322676 call(322671 call . dist c"targetLocales") localeIdx))))
              (322692 call =(322681 call .(322680 call locDoms localeIdx) c"myBlock")(322691 call(322685 call . dist c"getChunk") whole localeIdx))
              (322702 'elided on block' 0 tmp[322698])
            }
            (322821 call _downEndCount _coforallCount[322818] nil[44])
            (322820 'coforall loop')
          }
          label _continueLabel[322831]
          _indexOfInterest[322826]
          _iterator[322827]
        }
        label _breakLabel[322832]
        Defer
        {
          {
            (322863 call _endCountFree _coforallCount[322818])
          }
        }
        (322868 call _waitEndCount _coforallCount[322818] 1)
      }
    }
  }
  function _unknown[51].dsiDestroyDom[322903](arg _mt[322908]:_MT[238], arg this[322905] :
  BlockDom) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[322939] "expr temp" "maybe ref" "no copy" "temp"
      (322942 'move' tmpIter[322939](322912 call . dist c"targetLocDom"))
      unknown isRngDomArr[323097] "maybe param" "temp"
      (323112 'move' isRngDomArr[323097](323110 call ||(323099 call isBoundedRange tmpIter[322939])(323108 call ||(323102 call isDomain tmpIter[322939])(323105 call isArray tmpIter[322939]))))
      if isRngDomArr[323097]
      {
        const _coforallCount[322964] "const" "end count" "temp"
        (323033 'move' _coforallCount[322964](323030 call _endCountAlloc 1))
        unknown numTasks[322965] "temp"
        (323017 'move' numTasks[322965](323013 call . tmpIter[322939] c"size"))
        (323008 call _upEndCount _coforallCount[322964] 1 numTasks[322965])
        (323005 call chpl_resetTaskSpawn numTasks[322965])
        unknown _indexOfInterest[322972] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[322973] "expr temp" "temp"
        (322982 'move' _iterator[322973](322980 call _getIterator tmpIter[322939]))
        Defer
        {
          {
            (322998 call _freeIterator _iterator[322973])
          }
        }
        { scopeless type
          (322987 'move' _indexOfInterest[322972](322984 call iteratorIndex _iterator[322973]))
        }
        ForLoop[322974]
        {
          unknown localeIdx[322991] "coforall index var" "index var" "insert auto destroy"
          (322993 'move' localeIdx[322991] _indexOfInterest[322972])
          {
            {
              const tmp[322948] "const" "temp"
              (322950 'move' tmp[322948](322952 'deref'(322953 '_wide_get_locale'(322955 call locDoms localeIdx))))
              (322959 call chpl__delete(322961 call locDoms localeIdx))
              (322945 'elided on block' 0 tmp[322948])
            }
            (322967 call _downEndCount _coforallCount[322964] nil[44])
            (322966 'coforall loop')
          }
          label _continueLabel[322977]
          _indexOfInterest[322972]
          _iterator[322973]
        }
        label _breakLabel[322978]
        Defer
        {
          {
            (323020 call _endCountFree _coforallCount[322964])
          }
        }
        (323025 call _waitEndCount _coforallCount[322964] 1 numTasks[322965])
      }
      {
        const _coforallCount[323037] "const" "end count" "temp"
        (323094 'move' _coforallCount[323037](323091 call _endCountAlloc 1))
        unknown _indexOfInterest[323045] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323046] "expr temp" "temp"
        (323055 'move' _iterator[323046](323053 call _getIterator tmpIter[322939]))
        Defer
        {
          {
            (323071 call _freeIterator _iterator[323046])
          }
        }
        { scopeless type
          (323060 'move' _indexOfInterest[323045](323057 call iteratorIndex _iterator[323046]))
        }
        ForLoop[323047]
        {
          unknown localeIdx[323064] "coforall index var" "index var" "insert auto destroy"
          (323066 'move' localeIdx[323064] _indexOfInterest[323045])
          (323078 call _upEndCount _coforallCount[323037] 1)
          {
            {
              const tmp[322930] "const" "temp"
              (322931 'move' tmp[322930](322928 'deref'(322927 '_wide_get_locale'(322918 call locDoms localeIdx))))
              (322924 call chpl__delete(322922 call locDoms localeIdx))
              (322934 'elided on block' 0 tmp[322930])
            }
            (323040 call _downEndCount _coforallCount[323037] nil[44])
            (323039 'coforall loop')
          }
          label _continueLabel[323050]
          _indexOfInterest[323045]
          _iterator[323046]
        }
        label _breakLabel[323051]
        Defer
        {
          {
            (323082 call _endCountFree _coforallCount[323037])
          }
        }
        (323087 call _waitEndCount _coforallCount[323037] 1)
      }
    }
  }
  function _unknown[51].dsiMember[323124](arg _mt[323129]:_MT[238], arg this[323126] :
  BlockDom, arg i[323122]:_any[178](?)) : _unknown[51] "method"
  {
    (323138 return(323137 call(323132 call . whole c"contains") i))
  }
  function _unknown[51].dsiIndexOrder[323148](arg _mt[323153]:_MT[238], arg this[323150] :
  BlockDom, arg i[323146]:_any[178](?)) : _unknown[51] "method"
  {
    (323162 return(323161 call(323156 call . whole c"indexOrder") i))
  }
  function _unknown[51].contains[323172](arg _mt[323177]:_MT[238], arg this[323174] :
  LocBlockDom, arg i[323170]:_any[178](?)) : _unknown[51] "method"
  {
    (323186 return(323185 call(323180 call . myBlock c"contains") i))
  }
  function _unknown[51].dsiDisplayRepresentation[323194](arg _mt[323199]:_MT[238], arg this[323196] :
  BlockArr) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[323307] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[323308] "expr temp" "temp"
      (323317 'move' _iterator[323308](323315 call _getIterator(323206 call .(323203 call . dom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (323334 call _freeIterator _iterator[323308])
        }
      }
      { scopeless type
        (323323 'move' _indexOfInterest[323307](323320 call iteratorIndex _iterator[323308]))
      }
      ForLoop[323309]
      {
        unknown tli[323327] "index var" "insert auto destroy"
        (323329 'move' tli[323327] _indexOfInterest[323307])
        {
          (323259 call writeln "locArr[" tli "].myElems = "(323255 for  e  in (323251 call .(323250 call locArr tli) c"myElems") do
          {
            e
          } ))
          if(323302 call _cond_test doRADOpt)
          {
            (323300 call writeln "locArr[" tli "].locRAD = "(323297 call .(323293 call postfix!(323290 call .(323287 call locArr tli) c"locRAD")) c"RAD"))
          }
        }
        label _continueLabel[323312]
        _indexOfInterest[323307]
        _iterator[323308]
      }
      label _breakLabel[323313]
    }
  }
  function _unknown[51].dsiGetBaseDom[323347](arg _mt[323352]:_MT[238], arg this[323349] :
  BlockArr) : _unknown[51] "method" "method overrides"
  {
    (323355 return dom)
  }
  function _unknown[51].setupRADOpt[323363](arg _mt[323368]:_MT[238], arg this[323365] :
  BlockArr) : _unknown[51] "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[323549] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[323550] "expr temp" "temp"
      (323559 'move' _iterator[323550](323557 call _getIterator(323375 call .(323372 call . dom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (323576 call _freeIterator _iterator[323550])
        }
      }
      { scopeless type
        (323565 'move' _indexOfInterest[323549](323562 call iteratorIndex _iterator[323550]))
      }
      ForLoop[323551]
      {
        unknown localeIdx[323569] "index var" "insert auto destroy"
        (323571 'move' localeIdx[323569] _indexOfInterest[323549])
        {
          {
            const tmp[323540] "const" "temp"
            (323541 'move' tmp[323540](323538 'deref'(323537 '_wide_get_locale'(323387 call(323382 call .(323379 call . dom c"dist") c"targetLocales") localeIdx))))
            {
              const myLocArr[323392] "const"(323391 call locArr localeIdx)
              (323395 'end of statement')
              if(323421 call _cond_test(323402 call !=(323398 call . myLocArr c"locRAD") nil[44]))
              {
                (323409 call chpl__delete(323405 call . myLocArr c"locRAD"))
                (323418 call =(323414 call . myLocArr c"locRAD") nil[44])
              }
              if(323533 call _cond_test disableBlockLazyRAD)
              {
                (323447 call =(323427 call . myLocArr c"locRAD")(323432 'new'(_chpl_manager = unmanaged[220](?))(323446 call LocRADCache eltType rank idxType stridable(323443 call .(323440 call . dom c"dist") c"targetLocDom"))))
                {
                  unknown _indexOfInterest[323499] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[323500] "expr temp" "temp"
                  (323509 'move' _iterator[323500](323507 call _getIterator(323456 call .(323453 call . dom c"dist") c"targetLocDom")))
                  Defer
                  {
                    {
                      (323526 call _freeIterator _iterator[323500])
                    }
                  }
                  { scopeless type
                    (323515 'move' _indexOfInterest[323499](323512 call iteratorIndex _iterator[323500]))
                  }
                  ForLoop[323501]
                  {
                    unknown l[323519] "index var" "insert auto destroy"
                    (323521 'move' l[323519] _indexOfInterest[323499])
                    {
                      if(323494 call _cond_test(323461 call != l localeIdx))
                      {
                        (323490 call =(323474 call(323469 call .(323467 call postfix!(323464 call . myLocArr c"locRAD")) c"RAD") l)(323489 call(323485 call .(323482 call .(323479 call .(323478 call locArr l) c"myElems") c"_value") c"dsiGetRAD")))
                      }
                    }
                    label _continueLabel[323504]
                    _indexOfInterest[323499]
                    _iterator[323500]
                  }
                  label _breakLabel[323505]
                }
              }
            }
            (323544 'elided on block' 0 tmp[323540])
          }
        }
        label _continueLabel[323554]
        _indexOfInterest[323549]
        _iterator[323550]
      }
      label _breakLabel[323555]
    }
  }
  function _unknown[51].dsiElementInitializationComplete[323589](arg _mt[323594]:_MT[238], arg this[323591] :
  BlockArr) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[323634] "expr temp" "maybe ref" "no copy" "temp"
      (323637 'move' tmpIter[323634](323601 call .(323598 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[323797] "maybe param" "temp"
      (323812 'move' isRngDomArr[323797](323810 call ||(323799 call isBoundedRange tmpIter[323634])(323808 call ||(323802 call isDomain tmpIter[323634])(323805 call isArray tmpIter[323634]))))
      if isRngDomArr[323797]
      {
        const _coforallCount[323664] "const" "end count" "temp"
        (323733 'move' _coforallCount[323664](323730 call _endCountAlloc 1))
        unknown numTasks[323665] "temp"
        (323717 'move' numTasks[323665](323713 call . tmpIter[323634] c"size"))
        (323708 call _upEndCount _coforallCount[323664] 1 numTasks[323665])
        (323705 call chpl_resetTaskSpawn numTasks[323665])
        unknown _indexOfInterest[323672] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323673] "expr temp" "temp"
        (323682 'move' _iterator[323673](323680 call _getIterator tmpIter[323634]))
        Defer
        {
          {
            (323698 call _freeIterator _iterator[323673])
          }
        }
        { scopeless type
          (323687 'move' _indexOfInterest[323672](323684 call iteratorIndex _iterator[323673]))
        }
        ForLoop[323674]
        {
          unknown localeIdx[323691] "coforall index var" "index var" "insert auto destroy"
          (323693 'move' localeIdx[323691] _indexOfInterest[323672])
          {
            {
              const tmp[323643] "const" "temp"
              (323645 'move' tmp[323643](323647 'deref'(323648 '_wide_get_locale'(323650 call locArr localeIdx))))
              {
                (323662 call(323654 call .(323656 call .(323658 call locArr localeIdx) c"myElems") c"dsiElementInitializationComplete"))
              }
              (323640 'elided on block' 0 tmp[323643])
            }
            (323667 call _downEndCount _coforallCount[323664] nil[44])
            (323666 'coforall loop')
          }
          label _continueLabel[323677]
          _indexOfInterest[323672]
          _iterator[323673]
        }
        label _breakLabel[323678]
        Defer
        {
          {
            (323720 call _endCountFree _coforallCount[323664])
          }
        }
        (323725 call _waitEndCount _coforallCount[323664] 1 numTasks[323665])
      }
      {
        const _coforallCount[323737] "const" "end count" "temp"
        (323794 'move' _coforallCount[323737](323791 call _endCountAlloc 1))
        unknown _indexOfInterest[323745] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323746] "expr temp" "temp"
        (323755 'move' _iterator[323746](323753 call _getIterator tmpIter[323634]))
        Defer
        {
          {
            (323771 call _freeIterator _iterator[323746])
          }
        }
        { scopeless type
          (323760 'move' _indexOfInterest[323745](323757 call iteratorIndex _iterator[323746]))
        }
        ForLoop[323747]
        {
          unknown localeIdx[323764] "coforall index var" "index var" "insert auto destroy"
          (323766 'move' localeIdx[323764] _indexOfInterest[323745])
          (323778 call _upEndCount _coforallCount[323737] 1)
          {
            {
              const tmp[323625] "const" "temp"
              (323626 'move' tmp[323625](323623 'deref'(323622 '_wide_get_locale'(323607 call locArr localeIdx))))
              {
                (323619 call(323615 call .(323612 call .(323611 call locArr localeIdx) c"myElems") c"dsiElementInitializationComplete"))
              }
              (323629 'elided on block' 0 tmp[323625])
            }
            (323740 call _downEndCount _coforallCount[323737] nil[44])
            (323739 'coforall loop')
          }
          label _continueLabel[323750]
          _indexOfInterest[323745]
          _iterator[323746]
        }
        label _breakLabel[323751]
        Defer
        {
          {
            (323782 call _endCountFree _coforallCount[323737])
          }
        }
        (323787 call _waitEndCount _coforallCount[323737] 1)
      }
    }
  }
  function _unknown[51].dsiElementDeinitializationComplete[323822](arg _mt[323827]:_MT[238], arg this[323824] :
  BlockArr) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[323867] "expr temp" "maybe ref" "no copy" "temp"
      (323870 'move' tmpIter[323867](323834 call .(323831 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[324030] "maybe param" "temp"
      (324045 'move' isRngDomArr[324030](324043 call ||(324032 call isBoundedRange tmpIter[323867])(324041 call ||(324035 call isDomain tmpIter[323867])(324038 call isArray tmpIter[323867]))))
      if isRngDomArr[324030]
      {
        const _coforallCount[323897] "const" "end count" "temp"
        (323966 'move' _coforallCount[323897](323963 call _endCountAlloc 1))
        unknown numTasks[323898] "temp"
        (323950 'move' numTasks[323898](323946 call . tmpIter[323867] c"size"))
        (323941 call _upEndCount _coforallCount[323897] 1 numTasks[323898])
        (323938 call chpl_resetTaskSpawn numTasks[323898])
        unknown _indexOfInterest[323905] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323906] "expr temp" "temp"
        (323915 'move' _iterator[323906](323913 call _getIterator tmpIter[323867]))
        Defer
        {
          {
            (323931 call _freeIterator _iterator[323906])
          }
        }
        { scopeless type
          (323920 'move' _indexOfInterest[323905](323917 call iteratorIndex _iterator[323906]))
        }
        ForLoop[323907]
        {
          unknown localeIdx[323924] "coforall index var" "index var" "insert auto destroy"
          (323926 'move' localeIdx[323924] _indexOfInterest[323905])
          {
            {
              const tmp[323876] "const" "temp"
              (323878 'move' tmp[323876](323880 'deref'(323881 '_wide_get_locale'(323883 call locArr localeIdx))))
              {
                (323895 call(323887 call .(323889 call .(323891 call locArr localeIdx) c"myElems") c"dsiElementDeinitializationComplete"))
              }
              (323873 'elided on block' 0 tmp[323876])
            }
            (323900 call _downEndCount _coforallCount[323897] nil[44])
            (323899 'coforall loop')
          }
          label _continueLabel[323910]
          _indexOfInterest[323905]
          _iterator[323906]
        }
        label _breakLabel[323911]
        Defer
        {
          {
            (323953 call _endCountFree _coforallCount[323897])
          }
        }
        (323958 call _waitEndCount _coforallCount[323897] 1 numTasks[323898])
      }
      {
        const _coforallCount[323970] "const" "end count" "temp"
        (324027 'move' _coforallCount[323970](324024 call _endCountAlloc 1))
        unknown _indexOfInterest[323978] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[323979] "expr temp" "temp"
        (323988 'move' _iterator[323979](323986 call _getIterator tmpIter[323867]))
        Defer
        {
          {
            (324004 call _freeIterator _iterator[323979])
          }
        }
        { scopeless type
          (323993 'move' _indexOfInterest[323978](323990 call iteratorIndex _iterator[323979]))
        }
        ForLoop[323980]
        {
          unknown localeIdx[323997] "coforall index var" "index var" "insert auto destroy"
          (323999 'move' localeIdx[323997] _indexOfInterest[323978])
          (324011 call _upEndCount _coforallCount[323970] 1)
          {
            {
              const tmp[323858] "const" "temp"
              (323859 'move' tmp[323858](323856 'deref'(323855 '_wide_get_locale'(323840 call locArr localeIdx))))
              {
                (323852 call(323848 call .(323845 call .(323844 call locArr localeIdx) c"myElems") c"dsiElementDeinitializationComplete"))
              }
              (323862 'elided on block' 0 tmp[323858])
            }
            (323973 call _downEndCount _coforallCount[323970] nil[44])
            (323972 'coforall loop')
          }
          label _continueLabel[323983]
          _indexOfInterest[323978]
          _iterator[323979]
        }
        label _breakLabel[323984]
        Defer
        {
          {
            (324015 call _endCountFree _coforallCount[323970])
          }
        }
        (324020 call _waitEndCount _coforallCount[323970] 1)
      }
    }
  }
  function _unknown[51].dsiDestroyArr[324059](arg _mt[324064]:_MT[238], arg this[324061] :
  BlockArr, arg deinitElts[324056] :
  bool[10]) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    {
      unknown tmpIter[324128] "expr temp" "maybe ref" "no copy" "temp"
      (324131 'move' tmpIter[324128](324071 call .(324068 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[324311] "maybe param" "temp"
      (324326 'move' isRngDomArr[324311](324324 call ||(324313 call isBoundedRange tmpIter[324128])(324322 call ||(324316 call isDomain tmpIter[324128])(324319 call isArray tmpIter[324128]))))
      if isRngDomArr[324311]
      {
        const _coforallCount[324178] "const" "end count" "temp"
        (324247 'move' _coforallCount[324178](324244 call _endCountAlloc 1))
        unknown numTasks[324179] "temp"
        (324231 'move' numTasks[324179](324227 call . tmpIter[324128] c"size"))
        (324222 call _upEndCount _coforallCount[324178] 1 numTasks[324179])
        (324219 call chpl_resetTaskSpawn numTasks[324179])
        unknown _indexOfInterest[324186] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324187] "expr temp" "temp"
        (324196 'move' _iterator[324187](324194 call _getIterator tmpIter[324128]))
        Defer
        {
          {
            (324212 call _freeIterator _iterator[324187])
          }
        }
        { scopeless type
          (324201 'move' _indexOfInterest[324186](324198 call iteratorIndex _iterator[324187]))
        }
        ForLoop[324188]
        {
          unknown localeIdx[324205] "coforall index var" "index var" "insert auto destroy"
          (324207 'move' localeIdx[324205] _indexOfInterest[324186])
          {
            {
              const tmp[324137] "const" "temp"
              (324139 'move' tmp[324137](324141 'deref'(324142 '_wide_get_locale'(324144 call locArr localeIdx))))
              {
                unknown arr[324148](324150 call locArr localeIdx)
                (324153 'end of statement')
                if(324155 call _cond_test deinitElts)
                {
                  (324160 call _deinitElements(324162 call . arr c"myElems"))
                }
                (324173 call(324167 call .(324169 call . arr c"myElems") c"dsiElementDeinitializationComplete"))
                (324175 call chpl__delete arr)
              }
              (324134 'elided on block' 0 tmp[324137])
            }
            (324181 call _downEndCount _coforallCount[324178] nil[44])
            (324180 'coforall loop')
          }
          label _continueLabel[324191]
          _indexOfInterest[324186]
          _iterator[324187]
        }
        label _breakLabel[324192]
        Defer
        {
          {
            (324234 call _endCountFree _coforallCount[324178])
          }
        }
        (324239 call _waitEndCount _coforallCount[324178] 1 numTasks[324179])
      }
      {
        const _coforallCount[324251] "const" "end count" "temp"
        (324308 'move' _coforallCount[324251](324305 call _endCountAlloc 1))
        unknown _indexOfInterest[324259] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[324260] "expr temp" "temp"
        (324269 'move' _iterator[324260](324267 call _getIterator tmpIter[324128]))
        Defer
        {
          {
            (324285 call _freeIterator _iterator[324260])
          }
        }
        { scopeless type
          (324274 'move' _indexOfInterest[324259](324271 call iteratorIndex _iterator[324260]))
        }
        ForLoop[324261]
        {
          unknown localeIdx[324278] "coforall index var" "index var" "insert auto destroy"
          (324280 'move' localeIdx[324278] _indexOfInterest[324259])
          (324292 call _upEndCount _coforallCount[324251] 1)
          {
            {
              const tmp[324119] "const" "temp"
              (324120 'move' tmp[324119](324117 'deref'(324116 '_wide_get_locale'(324077 call locArr localeIdx))))
              {
                unknown arr[324082](324081 call locArr localeIdx)
                (324085 'end of statement')
                if(324096 call _cond_test deinitElts)
                {
                  (324094 call _deinitElements(324090 call . arr c"myElems"))
                }
                (324109 call(324105 call .(324102 call . arr c"myElems") c"dsiElementDeinitializationComplete"))
                (324113 call chpl__delete arr)
              }
              (324123 'elided on block' 0 tmp[324119])
            }
            (324254 call _downEndCount _coforallCount[324251] nil[44])
            (324253 'coforall loop')
          }
          label _continueLabel[324264]
          _indexOfInterest[324259]
          _iterator[324260]
        }
        label _breakLabel[324265]
        Defer
        {
          {
            (324296 call _endCountFree _coforallCount[324251])
          }
        }
        (324301 call _waitEndCount _coforallCount[324251] 1)
      }
    }
  }
  function _unknown[51].dsiLocalAccess[324343](arg _mt[324348]:_MT[238], arg this[324345] :
  BlockArr, arg i[324340] :
  (324338 call * rank idxType)) ref : _unknown[51] "inline" "method"
  {
    (324362 return(324361 call(324356 call .(324353 call _to_nonnil myLocArr) c"this") i))
  }
  function _unknown[51].dsiAccess[324377](arg _mt[324382]:_MT[238], arg this[324379] :
  BlockArr, const in arg idx[324374] :
  (324372 call * rank idxType)) ref : _unknown[51] "inline" "method"
  {
    {
      if(324415 call _cond_test(324401 call &&(324386 call != myLocArr nil[44])(324400 call(324395 call .(324392 call .(324391 call _to_nonnil myLocArr) c"locDom") c"contains") idx)))
      {
        (324413 return(324412 call(324407 call .(324406 call _to_nonnil myLocArr) c"this") idx))
      }
    }
    (324427 return(324426 call nonLocalAccess idx))
  }
  function _unknown[51].dsiBoundsCheck[324441](arg _mt[324446]:_MT[238], arg this[324443] :
  BlockArr, arg i[324438] :
  (324436 call * rank idxType)) : _unknown[51] "inline" "method"
  {
    (324455 return(324454 call(324449 call . dom c"dsiMember") i))
  }
  function _unknown[51].nonLocalAccess[324470](arg _mt[324475]:_MT[238], arg this[324472] :
  BlockArr, arg i[324467] :
  (324465 call * rank idxType)) ref : _unknown[51] "method" "fn unordered safe"
  {
    if(324763 call _cond_test doRADOpt)
    {
      if(324758 call _cond_test(324481 call . this c"myLocArr"))
      {
        const myLocArr[324491] "const"(324490 call _to_nonnil(324486 call . this c"myLocArr"))
        (324494 'end of statement')
        unknown rlocIdx[324508](324507 call(324502 call .(324497 call . dom c"dist") c"targetLocsIdx") i)
        (324511 'end of statement')
        if(324694 call _cond_test(324513 call ! disableBlockLazyRAD))
        {
          if(324597 call _cond_test(324520 call ==(324516 call . myLocArr c"locRAD") nil[44]))
          {
            (324532 call(324528 call .(324525 call . myLocArr c"locRADLock") c"lock"))
            if(324583 call _cond_test(324540 call ==(324536 call . myLocArr c"locRAD") nil[44]))
            {
              unknown tempLocRAD[324559](324544 'new'(_chpl_manager = unmanaged[220](?))(324558 call LocRADCache eltType rank idxType stridable(324555 call .(324552 call . dom c"dist") c"targetLocDom")))
              (324562 'end of statement')
              (324572 call =(324568 call .(324565 call . tempLocRAD c"RAD") c"blk") SENTINEL)
              (324580 call =(324576 call . myLocArr c"locRAD") tempLocRAD)
            }
            (324595 call(324591 call .(324588 call . myLocArr c"locRADLock") c"unlock"))
          }
          const locRAD[324609] "const"(324608 call _to_nonnil(324604 call . myLocArr c"locRAD"))
          (324612 'end of statement')
          if(324690 call _cond_test(324624 call ==(324620 call .(324619 call(324614 call . locRAD c"RAD") rlocIdx) c"blk") SENTINEL))
          {
            (324634 call(324629 call . locRAD c"lockRAD") rlocIdx)
            if(324676 call _cond_test(324648 call ==(324644 call .(324643 call(324638 call . locRAD c"RAD") rlocIdx) c"blk") SENTINEL))
            {
              (324672 call =(324656 call(324651 call . locRAD c"RAD") rlocIdx)(324671 call(324667 call .(324664 call .(324661 call .(324660 call locArr rlocIdx) c"myElems") c"_value") c"dsiGetRAD")))
            }
            (324688 call(324683 call . locRAD c"unlockRAD") rlocIdx)
          }
        }
        unknown myLocRAD[324702] "no auto destroy" "no copy"(324699 call . myLocArr c"locRAD")
        (324705 'end of statement')
        unknown radata[324713] "no auto destroy" "no copy"(324710 call .(324709 call _to_nonnil myLocRAD) c"RAD")
        (324716 'end of statement')
        if(324754 call _cond_test(324725 call !=(324721 call .(324720 call radata rlocIdx) c"shiftedData") nil[44]))
        {
          unknown dataIdx[324737](324736 call(324731 call .(324730 call radata rlocIdx) c"getDataIndex") i)
          (324740 'end of statement')
          (324752 return(324751 call(324746 call .(324745 call radata rlocIdx) c"getDataElem") dataIdx))
        }
      }
    }
    (324784 return(324783 call(324780 call locArr(324778 call(324773 call .(324770 call . dom c"dist") c"targetLocsIdx") i)) i))
  }
  function _unknown[51].dsiAccess[324797](arg _mt[324802]:_MT[238], arg this[324799] :
  BlockArr, arg i[324793] ... :
  idxType) ref : _unknown[51] "method"
  {
    (324808 return(324807 call dsiAccess i))
  }
  function _unknown[51].these[324816](arg _mt[324821]:_MT[238], arg this[324818] :
  BlockArr) ref : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[324831] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[324832] "expr temp" "temp"
      (324841 'move' _iterator[324832](324839 call _getIterator dom))
      Defer
      {
        {
          (324857 call _freeIterator _iterator[324832])
        }
      }
      { scopeless type
        (324846 'move' _indexOfInterest[324831](324843 call iteratorIndex _iterator[324832]))
      }
      ForLoop[324833]
      {
        unknown i[324850] "index var" "insert auto destroy"
        (324852 'move' i[324850] _indexOfInterest[324831])
        (324829 yield(324828 call dsiAccess i))
        label _continueLabel[324836]
        _indexOfInterest[324831]
        _iterator[324832]
      }
      label _breakLabel[324837]
    }
  }
  function _unknown[51].these[324874](arg _mt[324879]:_MT[238], arg this[324876] :
  BlockArr, param arg tag[324871] :
  iterKind) : _unknown[51] "iterator fn" "method" "no return value for void"
  {
    {
      unknown _indexOfInterest[324899] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[324900] "expr temp" "temp"
      (324909 'move' _iterator[324900](324907 call _getIterator(324895 call(324890 call . dom c"these") tag)))
      Defer
      {
        {
          (324926 call _freeIterator _iterator[324900])
        }
      }
      { scopeless type
        (324915 'move' _indexOfInterest[324899](324912 call iteratorIndex _iterator[324900]))
      }
      ForLoop[324901]
      {
        unknown followThis[324919] "index var" "insert auto destroy"
        (324921 'move' followThis[324919] _indexOfInterest[324899])
        (324897 yield followThis)
        label _continueLabel[324904]
        _indexOfInterest[324899]
        _iterator[324900]
      }
      label _breakLabel[324905]
    }
  }
  where {
    (324886 call == tag(324883 call . iterKind c"leader"))
  }
  function _unknown[51].dsiStaticFastFollowCheck[324942](arg _mt[324947]:_MT[238], arg this[324944] :
  BlockArr, arg leadType[324940]:_any[178](?)) param : _unknown[51] "method" "method overrides"
  {
    if(325000 call _cond_test(354988 'is_subtype' BlockArr leadType))
    {
      unknown x[324956](324955 'to nilable class from type' leadType)
      (324959 'end of statement')
      (324981 return(324979 call ==(324970 call _to_borrowed(324968 'typeof'(324965 call .(324963 call postfix! x) c"dom")))(324978 call _to_borrowed(324976 'typeof'(324973 call . this c"dom")))))
    }
    {
      (324997 return(324995 call ==(324986 call _to_borrowed leadType)(324994 call _to_borrowed(324992 'typeof'(324989 call . this c"dom")))))
    }
  }
  function _unknown[51].dsiDynamicFastFollowCheck[325016](arg _mt[325021]:_MT[238], arg this[325018] :
  BlockArr, arg lead[325013] :
  (325010 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method"
  {
    (325033 return(325032 call(325024 call . this c"dsiDynamicFastFollowCheck")(325028 call . lead c"_dom")))
  }
  function _unknown[51].dsiDynamicFastFollowCheck[325045](arg _mt[325050]:_MT[238], arg this[325047] :
  BlockArr, arg lead[325042] :
  _domain) : _unknown[51] "method"
  {
    (325086 return(325084 call &&(325067 call(325056 call .(325053 call . lead c"dist") c"dsiEqualDMaps")(325063 call .(325060 call . this c"dom") c"dist"))(325082 call ==(325072 call .(325069 call . lead c"_value") c"whole")(325079 call .(325076 call . this c"dom") c"whole"))))
  }
  function _unknown[51].these[325098](arg _mt[325111]:_MT[238], arg this[325108] :
  BlockArr, param arg tag[325095] :
  iterKind, arg followThis[325100]:_any[178](?), param arg fast[325104] :
  bool[10] =
  0) ref : _unknown[51] "iterator fn" "method"
  {
    function anyStridable[325124](arg rangeTuple[325122]:_any[178](?), param arg i[325128] :
    int[13] =
    0) param : _unknown[51]
    {
      (325169 return(325166 IfExpr (325140 call == i(325138 call -(325134 call . rangeTuple c"size") 1)) then
      { scopeless
        (325146 call .(325145 call rangeTuple i) c"stridable")
      } else
      { scopeless
        (325164 call ||(325153 call .(325152 call rangeTuple i) c"stridable")(325163 call anyStridable rangeTuple(325161 call + i 1)))
      } ))
    }
    if(325228 call _cond_test chpl__testParFlag)
    {
      if(325221 call _cond_test fast)
      {
        (325197 call chpl__testParWriteln "Block array fast follower invoked on " followThis)
      }
      {
        (325219 call chpl__testParWriteln "Block array non-fast follower invoked on " followThis)
      }
    }
    if(325292 call _cond_test testFastFollowerOptimization)
    {
      (325290 call writeln(325287 call +(325267 IfExpr  fast then
      { scopeless
        "fast"
      } else
      { scopeless
        "regular"
      } ) " follower invoked for Block array"))
    }
    unknown myFollowThis[325313](325311 call * rank(325310 call range(idxType = idxType)(stridable =(325307 call || stridable(325306 call anyStridable followThis)))))
    (325316 'end of statement')
    unknown lowIdx[325321](325319 call * rank idxType)
    (325324 'end of statement')
    {
      unknown i[325452] 0
      unknown tmp[325453] "maybe param" "temp"
      (325465 'move' tmp[325453](325463 call chpl_compute_low_param_loop_bound 0(325328 call - rank 1)))
      unknown tmp[325454] "maybe param" "temp"
      (325475 'move' tmp[325454](325473 call chpl_compute_high_param_loop_bound 0(325470 call - rank 1)))
      unknown tmp[325455] "maybe param" "temp"
      (325478 'move' tmp[325455] 1)
      ParamForLoop[325480]
      { i[325452] tmp[325453] tmp[325454] tmp[325455]
        {
          unknown stride[325345](325342 call .(325341 call(325336 call .(325333 call . dom c"whole") c"dim") i) c"stride")
          (325348 'end of statement')
          unknown low[325366](325364 call *(325354 call .(325353 call followThis i) c"low")(325362 call _cast idxType(325360 call abs stride)))
          (325369 'end of statement')
          unknown high[325386](325384 call *(325374 call .(325373 call followThis i) c"high")(325382 call _cast idxType(325380 call abs stride)))
          (325389 'end of statement')
          (325435 call =(325393 call myFollowThis i)(325434 call(325425 call .(325423 call chpl_by(325414 call +(325399 call chpl_by(325396 call chpl_build_bounded_range low high) stride)(325411 call .(325410 call(325405 call .(325402 call . dom c"whole") c"dim") i) c"alignedLow"))(325420 call .(325419 call followThis i) c"stride")) c"safeCast")(325432 'typeof'(325431 call myFollowThis i))))
          (325449 call =(325441 call lowIdx i)(325446 call .(325445 call myFollowThis i) c"low"))
        }
      }
      label _unused_continueLabel[325457]
      label _breakLabel[325456]
    }
    const myFollowThisDom[325494] "const"(325492 call chpl__buildDomainExpr(325490 'expand_tuple' myFollowThis))
    (325497 'end of statement')
    if(325651 call _cond_test fast)
    {
      unknown arrSection[325512](325511 call locArr(325509 call(325504 call .(325501 call . dom c"dist") c"targetLocsIdx") lowIdx))
      (325515 'end of statement')
      if(325536 call _cond_test(325526 call !=(325521 '_wide_get_node' arrSection)(325523 call . here c"id")))
      {
        (325533 call = arrSection(325532 call _to_nonnil myLocArr))
      }
      {
        const narrowArrSection[325550] "const"(325548 call _cast(325547 'to nilable class from type'(325546 'typeof' arrSection))(325544 '_wide_get_addr' arrSection))
        (325553 'end of statement')
        unknown myElems[325562] "ref var"(325559 call .(325558 call _to_nonnil narrowArrSection) c"myElems")
        (325565 'end of statement')
        {
          unknown _indexOfInterest[325574] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[325575] "expr temp" "temp"
          (325584 'move' _iterator[325575](325582 call _getIterator myFollowThisDom))
          Defer
          {
            {
              (325600 call _freeIterator _iterator[325575])
            }
          }
          { scopeless type
            (325589 'move' _indexOfInterest[325574](325586 call iteratorIndex _iterator[325575]))
          }
          ForLoop[325576]
          {
            unknown i[325593] "index var" "insert auto destroy"
            (325595 'move' i[325593] _indexOfInterest[325574])
            (325572 yield(325571 call myElems i))
            label _continueLabel[325579]
            _indexOfInterest[325574]
            _iterator[325575]
          }
          label _breakLabel[325580]
        }
      }
    }
    {
      {
        unknown _indexOfInterest[325617] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[325618] "expr temp" "temp"
        (325627 'move' _iterator[325618](325625 call _getIterator myFollowThisDom))
        Defer
        {
          {
            (325643 call _freeIterator _iterator[325618])
          }
        }
        { scopeless type
          (325632 'move' _indexOfInterest[325617](325629 call iteratorIndex _iterator[325618]))
        }
        ForLoop[325619]
        {
          unknown i[325636] "index var" "insert auto destroy"
          (325638 'move' i[325636] _indexOfInterest[325617])
          {
            (325614 yield(325613 call dsiAccess i))
          }
          label _continueLabel[325622]
          _indexOfInterest[325617]
          _iterator[325618]
        }
        label _breakLabel[325623]
      }
    }
  }
  where {
    (325118 call == tag(325115 call . iterKind c"follower"))
  }
  function _unknown[51].dsiSerialRead[325663](arg _mt[325668]:_MT[238], arg this[325665] :
  BlockArr, arg f[325661]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (325674 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[51].dsiSerialWrite[325684](arg _mt[325689]:_MT[238], arg this[325686] :
  BlockArr, arg f[325682]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (325695 call chpl_serialReadWriteRectangular f this)
  }
  function _unknown[51].dsiLocalSlice[325705](arg _mt[325710]:_MT[238], arg this[325707] :
  BlockArr, arg ranges[325703]:_any[178](?)) : _unknown[51] "method" "no copy return"
  {
    unknown low[325716](325714 call * rank idxType)
    (325719 'end of statement')
    {
      unknown i[325743] 0
      unknown tmp[325744] "maybe param" "temp"
      (325756 'move' tmp[325744](325754 call chpl_compute_low_param_loop_bound 0(325724 call - rank 1)))
      unknown tmp[325745] "maybe param" "temp"
      (325766 'move' tmp[325745](325764 call chpl_compute_high_param_loop_bound 0(325761 call - rank 1)))
      unknown tmp[325746] "maybe param" "temp"
      (325769 'move' tmp[325746] 1)
      ParamForLoop[325771]
      { i[325743] tmp[325744] tmp[325745] tmp[325746]
        {
          (325739 call =(325731 call low i)(325736 call .(325735 call ranges i) c"alignedLow"))
        }
      }
      label _unused_continueLabel[325748]
      label _breakLabel[325747]
    }
    (325800 return(325799 call(325793 call .(325792 call locArr(325790 call(325785 call .(325782 call . dom c"dist") c"targetLocsIdx") low)) c"myElems")(325797 'expand_tuple' ranges)))
  }
  function _extendTuple[325808](arg t[325806]:_any[178](?), arg idx[325811] :
  _tuple, arg args[325814]:_any[178](?)) : _unknown[51]
  {
    unknown tup[325823](325821 call *(325817 call . args c"size") t)
    (325826 'end of statement')
    unknown j[325830] 1 int[13]
    (325833 'end of statement')
    {
      unknown i[325885] 0
      unknown tmp[325886] "maybe param" "temp"
      (325898 'move' tmp[325886](325896 call chpl_compute_low_param_loop_bound 0(325840 call -(325836 call . args c"size") 1)))
      unknown tmp[325887] "maybe param" "temp"
      (325911 'move' tmp[325887](325909 call chpl_compute_high_param_loop_bound 0(325903 call -(325905 call . args c"size") 1)))
      unknown tmp[325888] "maybe param" "temp"
      (325914 'move' tmp[325888] 1)
      ParamForLoop[325916]
      { i[325885] tmp[325886] tmp[325887] tmp[325888]
        {
          if(325879 call _cond_test(325850 call isCollapsedDimension(325848 call args i)))
          {
            (325859 call =(325854 call tup i)(325858 call args i))
          }
          {
            (325870 call =(325865 call tup i)(325869 call idx j))
            (325876 call += j 1)
          }
        }
      }
      label _unused_continueLabel[325890]
      label _breakLabel[325889]
    }
    (325926 return tup)
  }
  function _extendTuple[325934](arg t[325932]:_any[178](?), arg idx[325936]:_any[178](?), arg args[325938]:_any[178](?)) : _unknown[51]
  {
    unknown tup[325947](325945 call *(325941 call . args c"size") t)
    (325950 'end of statement')
    unknown idxTup[325955](325953 call _build_tuple idx)
    (325958 'end of statement')
    unknown j[325961] 1 int[13]
    (325964 'end of statement')
    {
      unknown i[326016] 0
      unknown tmp[326017] "maybe param" "temp"
      (326029 'move' tmp[326017](326027 call chpl_compute_low_param_loop_bound 0(325971 call -(325967 call . args c"size") 1)))
      unknown tmp[326018] "maybe param" "temp"
      (326042 'move' tmp[326018](326040 call chpl_compute_high_param_loop_bound 0(326034 call -(326036 call . args c"size") 1)))
      unknown tmp[326019] "maybe param" "temp"
      (326045 'move' tmp[326019] 1)
      ParamForLoop[326047]
      { i[326016] tmp[326017] tmp[326018] tmp[326019]
        {
          if(326010 call _cond_test(325981 call isCollapsedDimension(325979 call args i)))
          {
            (325990 call =(325985 call tup i)(325989 call args i))
          }
          {
            (326001 call =(325996 call tup i)(326000 call idxTup j))
            (326007 call += j 1)
          }
        }
      }
      label _unused_continueLabel[326021]
      label _breakLabel[326020]
    }
    (326057 return tup)
  }
  function _unknown[51].dsiReallocate[326079](arg _mt[326084]:_MT[238], arg this[326081] :
  BlockArr, arg bounds[326076] :
  (326074 call * rank(326073 call range idxType(326069 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "method overrides" "no return value for void"
  {
  }
  function _unknown[51].dsiPostReallocate[326092](arg _mt[326097]:_MT[238], arg this[326094] :
  BlockArr) : _unknown[51] "method" "method overrides" "no return value for void"
  {
    if(326104 call _cond_test doRADOpt)
    {
      (326102 call setupRADOpt)
    }
  }
  function _unknown[51].setRADOpt[326119](arg _mt[326124]:_MT[238], arg this[326121] :
  BlockArr, arg val[326116] =
  1) : _unknown[51] "method" "no return value for void"
  {
    (326128 call = doRADOpt val)
    if(326137 call _cond_test doRADOpt)
    {
      (326135 call setupRADOpt)
    }
  }
  function _unknown[51].this[326149](arg _mt[326154]:_MT[238], arg this[326151] :
  LocBlockArr, arg i[326147]:_any[178](?)) ref : _unknown[51] "inline" "method"
  {
    (326160 return(326159 call myElems i))
  }
  function _unknown[51].dsiSupportsAutoLocalAccess[326168](arg _mt[326173]:_MT[238], arg this[326170] :
  BlockDom) param : _unknown[51] "method" "method overrides"
  {
    (326176 return 1)
  }
  function _unknown[51].init[326188](arg _mt[326216]:_MT[238], arg this[326213] :
  Block, arg other[326185] :
  Block, arg privateData[326190]:_any[178](?), param arg rank[326196] =
  (326193 call . other c"rank"), arg idxType[326203]:_any[178](?) =
  (326200 call . other c"idxType"), arg sparseLayoutType[326210]:_any[178](?) =
  (326207 call . other c"sparseLayoutType")) : _unknown[51] "method" "no return value for void"
  {
    (326223 call =(326219 call . this c"rank") rank)
    (326232 call =(326228 call . this c"idxType") idxType)
    (326244 call = boundingBox(326242 call chpl__buildDomainExpr(326240 'expand_tuple'(326239 call privateData 0))))
    (326256 call = targetLocDom(326254 call chpl__buildDomainExpr(326252 'expand_tuple'(326251 call privateData 1))))
    (326264 call = targetLocales(326261 call . other c"targetLocales"))
    (326272 call = locDist(326269 call . other c"locDist"))
    (326280 call = dataParTasksPerLocale(326279 call privateData 2))
    (326288 call = dataParIgnoreRunningTasks(326287 call privateData 3))
    (326296 call = dataParMinGranularity(326295 call privateData 4))
    (326304 call =(326300 call . this c"sparseLayoutType") sparseLayoutType)
  }
  function _unknown[51].dsiSupportsPrivatization[326312](arg _mt[326317]:_MT[238], arg this[326314] :
  Block) param : _unknown[51] "method" "method overrides"
  {
    (326320 return 1)
  }
  function _unknown[51].dsiGetPrivatizeData[326328](arg _mt[326333]:_MT[238], arg this[326330] :
  Block) : _unknown[51] "method"
  {
    (326353 return(326351 call _build_tuple(326340 call(326336 call . boundingBox c"dims"))(326346 call(326342 call . targetLocDom c"dims")) dataParTasksPerLocale dataParIgnoreRunningTasks dataParMinGranularity))
  }
  function _unknown[51].dsiPrivatize[326363](arg _mt[326368]:_MT[238], arg this[326365] :
  Block, arg privatizeData[326361]:_any[178](?)) : _unknown[51] "method"
  {
    (326381 return(326372 'new'(_chpl_manager = unmanaged[220](?))(326380 call Block(326377 call _to_unmanaged this) privatizeData)))
  }
  function _unknown[51].dsiGetReprivatizeData[326389](arg _mt[326394]:_MT[238], arg this[326391] :
  Block) : _unknown[51] "method"
  {
    (326402 return(326401 call(326397 call . boundingBox c"dims")))
  }
  function _unknown[51].dsiReprivatize[326412](arg _mt[326419]:_MT[238], arg this[326416] :
  Block, arg other[326410]:_any[178](?), arg reprivatizeData[326414]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (326427 call = boundingBox(326425 call chpl__buildDomainExpr(326423 'expand_tuple' reprivatizeData)))
    (326436 call = targetLocDom(326433 call . other c"targetLocDom"))
    (326444 call = targetLocales(326441 call . other c"targetLocales"))
    (326452 call = locDist(326449 call . other c"locDist"))
    (326460 call = dataParTasksPerLocale(326457 call . other c"dataParTasksPerLocale"))
    (326468 call = dataParIgnoreRunningTasks(326465 call . other c"dataParIgnoreRunningTasks"))
    (326476 call = dataParMinGranularity(326473 call . other c"dataParMinGranularity"))
  }
  function _unknown[51].chpl__serialize[326484](arg _mt[326489]:_MT[238], arg this[326486] :
  BlockDom) : _unknown[51] "method"
  {
    (326492 return pid)
  }
  function _unknown[51].chpl__deserialize[326502](arg _mt[326507]:_MT[238], arg this[326504] :
  BlockDom, arg data[326500]:_any[178](?)) : _unknown[51] "method"
  {
    (326537 return(326536 call chpl_getPrivatizedCopy(326533 'to unmanaged class from unknown'(326532 call BlockDom(rank =(326512 call . this c"rank"))(idxType =(326518 call . this c"idxType"))(stridable =(326523 call . this c"stridable"))(sparseLayoutType =(326528 call . this c"sparseLayoutType")))) data))
  }
  function _unknown[51].dsiSupportsPrivatization[326545](arg _mt[326550]:_MT[238], arg this[326547] :
  BlockDom) param : _unknown[51] "method" "method overrides"
  {
    (326553 return 1)
  }
  type BlockDomPrvData[326572](?) unknown distpid[326559] unknown dims[326563] unknown locdoms[326567]
  function _unknown[51].dsiGetPrivatizeData[326578](arg _mt[326583]:_MT[238], arg this[326580] :
  BlockDom) : _unknown[51] "method"
  {
    (326600 return(326585 'new'(326599 call BlockDomPrvData(326588 call . dist c"pid")(326597 call(326593 call . whole c"dims")) locDoms)))
  }
  function _unknown[51].dsiPrivatize[326610](arg _mt[326615]:_MT[238], arg this[326612] :
  BlockDom, arg privatizeData[326608]:_any[178](?)) : _unknown[51] "method"
  {
    unknown privdist[326628](326627 call chpl_getPrivatizedCopy(326619 'typeof' dist)(326624 call . privatizeData c"distpid"))
    (326631 'end of statement')
    unknown locDomsTemp[326655](326652 call . privatizeData c"locdoms")(326647 call chpl__buildArrayRuntimeType(326645 call chpl__ensureDomainExpr(326634 call . privdist c"targetLocDom"))(326644 'to unmanaged class from unknown'(326643 call LocBlockDom rank idxType stridable)))
    (326658 'end of statement')
    const c[326682] "const"(326661 'new'(_chpl_manager = unmanaged[220](?))(326681 call BlockDom rank idxType stridable(326668 call . privdist c"sparseLayoutType") privdist locDomsTemp(326679 call chpl__buildDomainExpr(326677 'expand_tuple'(326674 call . privatizeData c"dims")))))
    (326685 'end of statement')
    (326687 return c)
  }
  function _unknown[51].dsiGetReprivatizeData[326694](arg _mt[326699]:_MT[238], arg this[326696] :
  BlockDom) : _unknown[51] "method"
  {
    (326707 return(326706 call(326702 call . whole c"dims")))
  }
  function _unknown[51].dsiReprivatize[326717](arg _mt[326724]:_MT[238], arg this[326721] :
  BlockDom, arg other[326715]:_any[178](?), arg reprivatizeData[326719]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    (326733 call = locDoms(326730 call . other c"locDoms"))
    (326743 call = whole(326741 call chpl__buildDomainExpr(326739 'expand_tuple' reprivatizeData)))
  }
  function _unknown[51].chpl__serialize[326751](arg _mt[326756]:_MT[238], arg this[326753] :
  BlockArr) : _unknown[51] "method"
  {
    (326759 return pid)
  }
  function _unknown[51].chpl__deserialize[326769](arg _mt[326774]:_MT[238], arg this[326771] :
  BlockArr, arg data[326767]:_any[178](?)) : _unknown[51] "method"
  {
    (326809 return(326808 call chpl_getPrivatizedCopy(326805 'to unmanaged class from unknown'(326804 call BlockArr(rank =(326779 call . this c"rank"))(idxType =(326785 call . this c"idxType"))(stridable =(326790 call . this c"stridable"))(eltType =(326795 call . this c"eltType"))(sparseLayoutType =(326800 call . this c"sparseLayoutType")))) data))
  }
  function _unknown[51].dsiSupportsPrivatization[326817](arg _mt[326822]:_MT[238], arg this[326819] :
  BlockArr) param : _unknown[51] "method" "method overrides"
  {
    (326825 return 1)
  }
  type BlockArrPrvData[326840](?) unknown dompid[326831] unknown locarr[326835]
  function _unknown[51].dsiGetPrivatizeData[326846](arg _mt[326851]:_MT[238], arg this[326848] :
  BlockArr) : _unknown[51] "method"
  {
    (326862 return(326853 'new'(326861 call BlockArrPrvData(326856 call . dom c"pid") locArr)))
  }
  function _unknown[51].dsiPrivatize[326872](arg _mt[326877]:_MT[238], arg this[326874] :
  BlockArr, arg privatizeData[326870]:_any[178](?)) : _unknown[51] "method"
  {
    unknown privdom[326890](326889 call chpl_getPrivatizedCopy(326881 'typeof' dom)(326886 call . privatizeData c"dompid"))
    (326893 'end of statement')
    unknown locArrTemp[326921](326918 call . privatizeData c"locarr")(326913 call chpl__buildArrayRuntimeType(326911 call chpl__ensureDomainExpr(326899 call .(326896 call . privdom c"dist") c"targetLocDom"))(326910 'to unmanaged class from unknown'(326909 call LocBlockArr eltType rank idxType stridable)))
    (326924 'end of statement')
    unknown myLocArrTemp[326934](326933 'to unmanaged class from unknown'(326932 'to nilable class from type'(326931 call LocBlockArr eltType rank idxType stridable)))
    (326937 'end of statement')
    {
      unknown _indexOfInterest[326973] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[326974] "expr temp" "temp"
      (326983 'move' _iterator[326974](326981 call _getIterator(326943 call .(326940 call . privdom c"dist") c"targetLocDom")))
      Defer
      {
        {
          (327000 call _freeIterator _iterator[326974])
        }
      }
      { scopeless type
        (326989 'move' _indexOfInterest[326973](326986 call iteratorIndex _iterator[326974]))
      }
      ForLoop[326975]
      {
        unknown localeIdx[326993] "index var" "insert auto destroy"
        (326995 'move' localeIdx[326993] _indexOfInterest[326973])
        if(326968 call _cond_test(326958 call ==(326953 '_wide_get_node'(326949 call locArrTemp localeIdx))(326955 call . here c"id")))
        {
          (326965 call = myLocArrTemp(326964 call locArrTemp localeIdx))
        }
        label _continueLabel[326978]
        _indexOfInterest[326973]
        _iterator[326974]
      }
      label _breakLabel[326979]
    }
    const c[327029] "const"(327009 'new'(_chpl_manager = unmanaged[220](?))(327028 call BlockArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(sparseLayoutType = sparseLayoutType)(dom = privdom)(locArr = locArrTemp)(myLocArr = myLocArrTemp)))
    (327032 'end of statement')
    (327034 return c)
  }
  function _unknown[51].dsiTargetLocales[327041](arg _mt[327046]:_MT[238], arg this[327043] :
  BlockArr) : _unknown[51] "method"
  {
    (327055 return(327052 call .(327049 call . dom c"dist") c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[327063](arg _mt[327068]:_MT[238], arg this[327065] :
  BlockDom) : _unknown[51] "method"
  {
    (327074 return(327071 call . dist c"targetLocales"))
  }
  function _unknown[51].dsiTargetLocales[327082](arg _mt[327087]:_MT[238], arg this[327084] :
  Block) : _unknown[51] "method"
  {
    (327090 return targetLocales)
  }
  function _unknown[51].chpl__locToLocIdx[327102](arg _mt[327107]:_MT[238], arg this[327104] :
  Block, arg loc[327099] :
  locale[28]) : _unknown[51] "method"
  {
    {
      unknown _indexOfInterest[327130] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[327131] "expr temp" "temp"
      (327140 'move' _iterator[327131](327138 call _getIterator targetLocDom))
      Defer
      {
        {
          (327156 call _freeIterator _iterator[327131])
        }
      }
      { scopeless type
        (327145 'move' _indexOfInterest[327130](327142 call iteratorIndex _iterator[327131]))
      }
      ForLoop[327132]
      {
        unknown locIdx[327149] "index var" "insert auto destroy"
        (327151 'move' locIdx[327149] _indexOfInterest[327130])
        if(327125 call _cond_test(327116 call ==(327114 call targetLocales locIdx) loc))
        {
          (327123 return(327121 call _build_tuple 1 locIdx))
        }
        label _continueLabel[327135]
        _indexOfInterest[327130]
        _iterator[327131]
      }
      label _breakLabel[327136]
    }
    (327172 return(327170 call _build_tuple 0(327166 call . targetLocDom c"first")))
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[327179](arg _mt[327184]:_MT[238], arg this[327181] :
  BlockArr) param : _unknown[51] "method"
  {
    (327187 return 1)
  }
  function _unknown[51].dsiHasSingleLocalSubdomain[327195](arg _mt[327200]:_MT[238], arg this[327197] :
  BlockDom) param : _unknown[51] "method"
  {
    (327203 return 1)
  }
  function _unknown[51].dsiLocalSubdomain[327215](arg _mt[327220]:_MT[238], arg this[327217] :
  BlockArr, arg loc[327212] :
  locale[28]) : _unknown[51] "method"
  {
    if(327272 call _cond_test(327224 call == loc here))
    {
      if(327242 call _cond_test(327228 call != myLocArr nil[44]))
      {
        (327240 return(327237 call .(327234 call .(327233 call _to_nonnil myLocArr) c"locDom") c"myBlock"))
      }
      unknown d[327255](327253 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
      (327258 'end of statement')
      (327260 return d)
    }
    {
      (327269 return(327268 call(327263 call . dom c"dsiLocalSubdomain") loc))
    }
  }
  function _unknown[51].dsiLocalSubdomain[327286](arg _mt[327291]:_MT[238], arg this[327288] :
  BlockDom, arg loc[327283] :
  locale[28]) : _unknown[51] "method"
  {
    const tmp[327307] "const" "temp"(327306 call(327301 call . dist c"chpl__locToLocIdx") loc)
    (327314 call _check_tuple_var_decl tmp[327307] 2)
    const gotit[327293] "const"(327308 call tmp[327307] 0)
    const locid[327295] "const"(327311 call tmp[327307] 1)
    (327319 'end of statement')
    if(327361 call _cond_test gotit)
    {
      unknown inds[327334](327333 call chpl__computeBlock locid(327326 call . dist c"targetLocDom")(327330 call . dist c"boundingBox"))
      (327337 'end of statement')
      (327344 return(327343 call whole(327341 'expand_tuple' inds)))
    }
    {
      unknown d[327353](327351 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
      (327356 'end of statement')
      (327359 return d)
    }
  }
  function _unknown[51].numRemoteElems[327372](arg _mt[327381]:_MT[238], arg this[327378] :
  BlockDom, arg viewDom[327370]:_any[178](?), arg rlo[327374]:_any[178](?), arg rid[327376]:_any[178](?)) : _unknown[51] "method"
  {
    unknown blo[327383](327387 call . dist c"idxType")
    unknown bhi[327390](327394 'typeof' blo)
    (327395 'end of statement')
    if(327533 call _cond_test(327417 call == rid(327415 call -(327411 call .(327410 call(327402 call .(327399 call . dist c"targetLocDom") c"dim")(327407 call - rank 1)) c"size") 1)))
    {
      (327433 call = bhi(327430 call .(327429 call(327421 call . viewDom c"dim")(327426 call - rank 1)) c"high"))
    }
    {
      (327529 call = bhi(327527 call -(327521 call +(327450 call .(327449 call(327441 call .(327438 call . dist c"boundingBox") c"dim")(327446 call - rank 1)) c"low")(327520 call intCeilXDivByY(327498 call *(327489 call +(327486 call -(327467 call .(327466 call(327458 call .(327455 call . dist c"boundingBox") c"dim")(327463 call - rank 1)) c"high")(327483 call .(327482 call(327474 call .(327471 call . dist c"boundingBox") c"dim")(327479 call - rank 1)) c"low")) 1)(327496 call _cast idxType(327493 call + rid 1)))(327518 call _cast idxType(327514 call .(327513 call(327505 call .(327502 call . dist c"targetLocDom") c"dim")(327510 call - rank 1)) c"size"))))(327525 call _cast idxType 1)))
    }
    (327548 return(327546 call - bhi(327544 call _cast idxType(327541 call - rlo 1))))
  }
  function canDoAnyToBlock[327556](arg Dest[327554]:_any[178](?), arg destDom[327558]:_any[178](?), arg Src[327560]:_any[178](?), arg srcDom[327562]:_any[178](?)) param : _unknown[51] "private"
  {
    if(327589 call _cond_test(327584 call &&(327572 call ==(327570 call(327566 call . Src c"doiCanBulkTransferRankChange")) 0)(327582 call !=(327575 call . Dest c"rank")(327579 call . Src c"rank"))))
    {
      (327587 return 0)
    }
    (327596 'use' Reflection)
    if(327635 call _cond_test(327629 call !(327628 call canResolveMethod Src "doiBulkTransferToKnown" srcDom(327624 call .(327621 call .(327620 call(327606 call . Dest c"locArr")(327616 call .(327613 call .(327610 call . Dest c"locArr") c"_dom") c"first")) c"myElems") c"_value") destDom)))
    {
      (327632 return 0)
    }
    (327642 return(327640 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferToKnown[327652](arg _mt[327663]:_MT[238], arg this[327660] :
  BlockArr, arg srcDom[327650]:_any[178](?), arg destClass[327655] :
  BlockArr, arg destDom[327658]:_any[178](?)) : _unknown[51] "method"
  {
    (327695 call _doSimpleBlockTransfer destClass destDom this srcDom)
    (327699 return 1)
  }
  where {
    (327687 call &&(327682 call &&(327672 call ==(327667 call . this c"sparseLayoutType")(327671 'to unmanaged class from unknown' DefaultDist))(327680 call ==(327675 call . destClass c"sparseLayoutType")(327679 'to unmanaged class from unknown' DefaultDist)))(327685 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferFromKnown[327710](arg _mt[327721]:_MT[238], arg this[327718] :
  BlockArr, arg destDom[327708]:_any[178](?), arg srcClass[327713] :
  BlockArr, arg srcDom[327716]:_any[178](?)) : _unknown[51] "method"
  {
    (327753 call _doSimpleBlockTransfer this destDom srcClass srcDom)
    (327757 return 1)
  }
  where {
    (327745 call &&(327740 call &&(327730 call ==(327725 call . this c"sparseLayoutType")(327729 'to unmanaged class from unknown' DefaultDist))(327738 call ==(327733 call . srcClass c"sparseLayoutType")(327737 'to unmanaged class from unknown' DefaultDist)))(327743 call ! disableBlockDistBulkTransfer))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiSwap[327768](arg _mt[327773]:_MT[238], arg this[327770] :
  BlockArr, arg arr[327766]:_any[178](?)) : _unknown[51] "method" "no return value for void"
  {
    {
      unknown tmpIter[327827] "expr temp" "maybe ref" "no copy" "temp"
      (327830 'move' tmpIter[327827](327789 call _build_tuple(327781 call . this c"locArr")(327786 call . arr c"locArr")))
      unknown isRngDomArr[328026] "maybe param" "temp"
      (328041 'move' isRngDomArr[328026](328039 call ||(328028 call isBoundedRange tmpIter[327827])(328037 call ||(328031 call isDomain tmpIter[327827])(328034 call isArray tmpIter[327827]))))
      if isRngDomArr[328026]
      {
        const _coforallCount[327865] "const" "end count" "temp"
        (327948 'move' _coforallCount[327865](327945 call _endCountAlloc 1))
        unknown numTasks[327866] "temp"
        (327932 'move' numTasks[327866](327928 call . tmpIter[327827] c"size"))
        (327923 call _upEndCount _coforallCount[327865] 1 numTasks[327866])
        (327920 call chpl_resetTaskSpawn numTasks[327866])
        unknown _indexOfInterest[327873] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327874] "expr temp" "temp"
        (327883 'move' _iterator[327874](327881 call _getIteratorZip tmpIter[327827]))
        Defer
        {
          {
            (327913 call _freeIterator _iterator[327874])
          }
        }
        { scopeless type
          (327888 'move' _indexOfInterest[327873](327885 call iteratorIndex _iterator[327874]))
        }
        ForLoop[327875]
        {
          (327893 call _check_tuple_var_decl _indexOfInterest[327873] 2)
          unknown locarr1[327899] "coforall index var" "index var" "insert auto destroy"
          (327901 'move' locarr1[327899](327897 call _indexOfInterest[327873] 0))
          unknown locarr2[327906] "coforall index var" "index var" "insert auto destroy"
          (327908 'move' locarr2[327906](327904 call _indexOfInterest[327873] 1))
          {
            {
              const tmp[327836] "const" "temp"
              (327838 'move' tmp[327836](327840 'deref'(327841 '_wide_get_locale' locarr1)))
              {
                (327845 call <=>(327847 call . locarr1 c"myElems")(327851 call . locarr2 c"myElems"))
                (327855 call <=>(327857 call . locarr1 c"locRAD")(327861 call . locarr2 c"locRAD"))
              }
              (327833 'elided on block' 0 tmp[327836])
            }
            (327868 call _downEndCount _coforallCount[327865] nil[44])
            (327867 'coforall loop')
          }
          label _continueLabel[327878]
          _indexOfInterest[327873]
          _iterator[327874]
        }
        label _breakLabel[327879]
        Defer
        {
          {
            (327935 call _endCountFree _coforallCount[327865])
          }
        }
        (327940 call _waitEndCount _coforallCount[327865] 1 numTasks[327866])
      }
      {
        const _coforallCount[327952] "const" "end count" "temp"
        (328023 'move' _coforallCount[327952](328020 call _endCountAlloc 1))
        unknown _indexOfInterest[327960] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327961] "expr temp" "temp"
        (327970 'move' _iterator[327961](327968 call _getIteratorZip tmpIter[327827]))
        Defer
        {
          {
            (328000 call _freeIterator _iterator[327961])
          }
        }
        { scopeless type
          (327975 'move' _indexOfInterest[327960](327972 call iteratorIndex _iterator[327961]))
        }
        ForLoop[327962]
        {
          (327980 call _check_tuple_var_decl _indexOfInterest[327960] 2)
          unknown locarr1[327986] "coforall index var" "index var" "insert auto destroy"
          (327988 'move' locarr1[327986](327984 call _indexOfInterest[327960] 0))
          unknown locarr2[327993] "coforall index var" "index var" "insert auto destroy"
          (327995 'move' locarr2[327993](327991 call _indexOfInterest[327960] 1))
          (328007 call _upEndCount _coforallCount[327952] 1)
          {
            {
              const tmp[327817] "const" "temp"
              (327818 'move' tmp[327817](327815 'deref'(327814 '_wide_get_locale' locarr1)))
              {
                (327799 call <=>(327792 call . locarr1 c"myElems")(327796 call . locarr2 c"myElems"))
                (327811 call <=>(327804 call . locarr1 c"locRAD")(327808 call . locarr2 c"locRAD"))
              }
              (327821 'elided on block' 0 tmp[327817])
            }
            (327955 call _downEndCount _coforallCount[327952] nil[44])
            (327954 'coforall loop')
          }
          label _continueLabel[327965]
          _indexOfInterest[327960]
          _iterator[327961]
        }
        label _breakLabel[327966]
        Defer
        {
          {
            (328011 call _endCountFree _coforallCount[327952])
          }
        }
        (328016 call _waitEndCount _coforallCount[327952] 1)
      }
    }
  }
  function _doSimpleBlockTransfer[328052](arg Dest[328050]:_any[178](?), arg destDom[328054]:_any[178](?), arg Src[328056]:_any[178](?), arg srcDom[328058]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    if(328102 call _cond_test debugBlockDistBulkTransfer)
    {
      (328100 call writeln "In Block=Block Bulk Transfer: Dest[" destDom "] = Src[" srcDom "]")
    }
    const DestPID[328112] "const"(328109 call . Dest c"pid")
    (328115 'end of statement')
    const SrcPID[328120] "const"(328117 call . Src c"pid")
    (328123 'end of statement')
    {
      unknown tmpIter[328379] "expr temp" "maybe ref" "no copy" "temp"
      (328382 'move' tmpIter[328379](328139 call(328134 call .(328129 call .(328126 call . Dest c"dom") c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[328718] "maybe param" "temp"
      (328733 'move' isRngDomArr[328718](328731 call ||(328720 call isBoundedRange tmpIter[328379])(328729 call ||(328723 call isDomain tmpIter[328379])(328726 call isArray tmpIter[328379]))))
      if isRngDomArr[328718]
      {
        const _coforallCount[328585] "const" "end count" "temp"
        (328654 'move' _coforallCount[328585](328651 call _endCountAlloc 1))
        unknown numTasks[328586] "temp"
        (328638 'move' numTasks[328586](328634 call . tmpIter[328379] c"size"))
        (328629 call _upEndCount _coforallCount[328585] 1 numTasks[328586])
        (328626 call chpl_resetTaskSpawn numTasks[328586])
        unknown _indexOfInterest[328593] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328594] "expr temp" "temp"
        (328603 'move' _iterator[328594](328601 call _getIterator tmpIter[328379]))
        Defer
        {
          {
            (328619 call _freeIterator _iterator[328594])
          }
        }
        { scopeless type
          (328608 'move' _indexOfInterest[328593](328605 call iteratorIndex _iterator[328594]))
        }
        ForLoop[328595]
        {
          unknown i[328612] "coforall index var" "index var" "insert auto destroy"
          (328614 'move' i[328612] _indexOfInterest[328593])
          {
            {
              const tmp[328388] "const" "temp"
              (328390 'move' tmp[328388](328392 'deref'(328393 '_wide_get_locale'(328404 call(328395 call .(328397 call .(328399 call . Dest c"dom") c"dist") c"targetLocales") i))))
              {
                const dst[328408] "const"(328418 IfExpr  _privatization then
                { scopeless
                  (328412 call chpl_getPrivatizedCopy(328413 'typeof' Dest) DestPID)
                } else
                { scopeless
                  Dest
                } )
                (328420 'end of statement')
                const src[328422] "const"(328432 IfExpr  _privatization then
                { scopeless
                  (328426 call chpl_getPrivatizedCopy(328427 'typeof' Src) SrcPID)
                } else
                { scopeless
                  Src
                } )
                (328434 'end of statement')
                const localDestBlock[328436] "const"(328449 call(328438 call .(328446 call(328440 call .(328442 call . dst c"dom") c"locDoms") i) c"myBlock") destDom)
                (328452 'end of statement')
                (328454 call assert(328456 call >(328458 call . localDestBlock c"size") 0))
                const corSrcBlock[328463] "const"(328465 call bulkCommTranslateDomain localDestBlock destDom srcDom)
                (328470 'end of statement')
                if(328472 call _cond_test debugBlockDistBulkTransfer)
                {
                  (328477 call writeln "  Dest[" localDestBlock "] = Src[" corSrcBlock "]")
                }
                {
                  unknown _indexOfInterest[328485] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[328487] "expr temp" "temp"
                  (328489 'move' _iterator[328487](328492 call _getIterator(328503 call(328494 call .(328496 call .(328498 call . src c"dom") c"dist") c"activeTargetLocales") corSrcBlock)))
                  Defer
                  {
                    {
                      (328507 call _freeIterator _iterator[328487])
                    }
                  }
                  { scopeless type
                    (328511 'move' _indexOfInterest[328485](328514 call iteratorIndex _iterator[328487]))
                  }
                  ForLoop[328516]
                  {
                    unknown srcLoc[328519] "index var" "insert auto destroy"
                    (328521 'move' srcLoc[328519] _indexOfInterest[328485])
                    {
                      const localSrcChunk[328526] "const"(328528 call corSrcBlock(328530 call .(328538 call(328532 call .(328534 call . src c"dom") c"locDoms") srcLoc) c"myBlock"))
                      (328542 'end of statement')
                      const localDestChunk[328544] "const"(328546 call bulkCommTranslateDomain localSrcChunk corSrcBlock localDestBlock)
                      (328551 'end of statement')
                      (328553 call chpl__bulkTransferArray(328555 call .(328557 call .(328562 call(328559 call . dst c"locArr") i) c"myElems") c"_value") localDestChunk(328568 call .(328570 call .(328575 call(328572 call . src c"locArr") srcLoc) c"myElems") c"_value") localSrcChunk)
                    }
                    label _continueLabel[328580]
                    _indexOfInterest[328485]
                    _iterator[328487]
                  }
                  label _breakLabel[328582]
                }
              }
              (328385 'elided on block' 0 tmp[328388])
            }
            (328588 call _downEndCount _coforallCount[328585] nil[44])
            (328587 'coforall loop')
          }
          label _continueLabel[328598]
          _indexOfInterest[328593]
          _iterator[328594]
        }
        label _breakLabel[328599]
        Defer
        {
          {
            (328641 call _endCountFree _coforallCount[328585])
          }
        }
        (328646 call _waitEndCount _coforallCount[328585] 1 numTasks[328586])
      }
      {
        const _coforallCount[328658] "const" "end count" "temp"
        (328715 'move' _coforallCount[328658](328712 call _endCountAlloc 1))
        unknown _indexOfInterest[328666] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[328667] "expr temp" "temp"
        (328676 'move' _iterator[328667](328674 call _getIterator tmpIter[328379]))
        Defer
        {
          {
            (328692 call _freeIterator _iterator[328667])
          }
        }
        { scopeless type
          (328681 'move' _indexOfInterest[328666](328678 call iteratorIndex _iterator[328667]))
        }
        ForLoop[328668]
        {
          unknown i[328685] "coforall index var" "index var" "insert auto destroy"
          (328687 'move' i[328685] _indexOfInterest[328666])
          (328699 call _upEndCount _coforallCount[328658] 1)
          {
            {
              const tmp[328370] "const" "temp"
              (328371 'move' tmp[328370](328368 'deref'(328367 '_wide_get_locale'(328152 call(328147 call .(328144 call .(328141 call . Dest c"dom") c"dist") c"targetLocales") i))))
              {
                const dst[328164] "const"(328161 IfExpr  _privatization then
                { scopeless
                  (328159 call chpl_getPrivatizedCopy(328156 'typeof' Dest) DestPID)
                } else
                { scopeless
                  Dest
                } )
                (328167 'end of statement')
                const src[328180] "const"(328177 IfExpr  _privatization then
                { scopeless
                  (328175 call chpl_getPrivatizedCopy(328172 'typeof' Src) SrcPID)
                } else
                { scopeless
                  Src
                } )
                (328183 'end of statement')
                const localDestBlock[328200] "const"(328199 call(328194 call .(328193 call(328188 call .(328185 call . dst c"dom") c"locDoms") i) c"myBlock") destDom)
                (328203 'end of statement')
                (328213 call assert(328210 call >(328206 call . localDestBlock c"size") 0))
                const corSrcBlock[328221] "const"(328220 call bulkCommTranslateDomain localDestBlock destDom srcDom)
                (328224 'end of statement')
                if(328251 call _cond_test debugBlockDistBulkTransfer)
                {
                  (328249 call writeln "  Dest[" localDestBlock "] = Src[" corSrcBlock "]")
                }
                {
                  unknown _indexOfInterest[328333] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[328334] "expr temp" "temp"
                  (328343 'move' _iterator[328334](328341 call _getIterator(328269 call(328264 call .(328261 call .(328258 call . src c"dom") c"dist") c"activeTargetLocales") corSrcBlock)))
                  Defer
                  {
                    {
                      (328360 call _freeIterator _iterator[328334])
                    }
                  }
                  { scopeless type
                    (328349 'move' _indexOfInterest[328333](328346 call iteratorIndex _iterator[328334]))
                  }
                  ForLoop[328335]
                  {
                    unknown srcLoc[328353] "index var" "insert auto destroy"
                    (328355 'move' srcLoc[328353] _indexOfInterest[328333])
                    {
                      const localSrcChunk[328286] "const"(328285 call corSrcBlock(328281 call .(328280 call(328275 call .(328272 call . src c"dom") c"locDoms") srcLoc) c"myBlock"))
                      (328289 'end of statement')
                      const localDestChunk[328297] "const"(328296 call bulkCommTranslateDomain localSrcChunk corSrcBlock localDestBlock)
                      (328300 'end of statement')
                      (328331 call chpl__bulkTransferArray(328312 call .(328309 call .(328308 call(328303 call . dst c"locArr") i) c"myElems") c"_value") localDestChunk(328327 call .(328324 call .(328323 call(328318 call . src c"locArr") srcLoc) c"myElems") c"_value") localSrcChunk)
                    }
                    label _continueLabel[328338]
                    _indexOfInterest[328333]
                    _iterator[328334]
                  }
                  label _breakLabel[328339]
                }
              }
              (328374 'elided on block' 0 tmp[328370])
            }
            (328661 call _downEndCount _coforallCount[328658] nil[44])
            (328660 'coforall loop')
          }
          label _continueLabel[328671]
          _indexOfInterest[328666]
          _iterator[328667]
        }
        label _breakLabel[328672]
        Defer
        {
          {
            (328703 call _endCountFree _coforallCount[328658])
          }
        }
        (328708 call _waitEndCount _coforallCount[328658] 1)
      }
    }
  }
  function _unknown[51].doiBulkTransferFromAny[328744](arg _mt[328753]:_MT[238], arg this[328750] :
  BlockArr, arg destDom[328742]:_any[178](?), arg Src[328746]:_any[178](?), arg srcDom[328748]:_any[178](?)) : _unknown[51] "method"
  {
    if(328785 call _cond_test debugBlockDistBulkTransfer)
    {
      (328783 call writeln "In BlockDist.doiBulkTransferFromAny")
    }
    {
      unknown tmpIter[328939] "expr temp" "maybe ref" "no copy" "temp"
      (328942 'move' tmpIter[328939](328801 call(328796 call .(328793 call . dom c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[329171] "maybe param" "temp"
      (329186 'move' isRngDomArr[329171](329184 call ||(329173 call isBoundedRange tmpIter[328939])(329182 call ||(329176 call isDomain tmpIter[328939])(329179 call isArray tmpIter[328939]))))
      if isRngDomArr[329171]
      {
        const _coforallCount[329038] "const" "end count" "temp"
        (329107 'move' _coforallCount[329038](329104 call _endCountAlloc 1))
        unknown numTasks[329039] "temp"
        (329091 'move' numTasks[329039](329087 call . tmpIter[328939] c"size"))
        (329082 call _upEndCount _coforallCount[329038] 1 numTasks[329039])
        (329079 call chpl_resetTaskSpawn numTasks[329039])
        unknown _indexOfInterest[329046] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329047] "expr temp" "temp"
        (329056 'move' _iterator[329047](329054 call _getIterator tmpIter[328939]))
        Defer
        {
          {
            (329072 call _freeIterator _iterator[329047])
          }
        }
        { scopeless type
          (329061 'move' _indexOfInterest[329046](329058 call iteratorIndex _iterator[329047]))
        }
        ForLoop[329048]
        {
          unknown j[329065] "coforall index var" "index var" "insert auto destroy"
          (329067 'move' j[329065] _indexOfInterest[329046])
          {
            {
              const tmp[328948] "const" "temp"
              (328950 'move' tmp[328948](328952 'deref'(328953 '_wide_get_locale'(328961 call(328955 call .(328957 call . dom c"dist") c"targetLocales") j))))
              {
                const Dest[328965] "const"(328975 IfExpr  _privatization then
                { scopeless
                  (328969 call chpl_getPrivatizedCopy(328970 'typeof' this) pid)
                } else
                { scopeless
                  this
                } )
                (328977 'end of statement')
                const inters[328979] "const"(328992 call(328981 call .(328989 call(328983 call .(328985 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                (328995 'end of statement')
                const srcChunk[328997] "const"(328999 call bulkCommTranslateDomain inters destDom srcDom)
                (329004 'end of statement')
                if(329006 call _cond_test debugBlockDistBulkTransfer)
                {
                  (329011 call writeln "Dest.locArr[" j "][" inters "] = Src[" srcDom "]")
                }
                (329021 call chpl__bulkTransferArray(329023 call .(329025 call .(329030 call(329027 call . Dest c"locArr") j) c"myElems") c"_value") inters Src srcChunk)
              }
              (328945 'elided on block' 0 tmp[328948])
            }
            (329041 call _downEndCount _coforallCount[329038] nil[44])
            (329040 'coforall loop')
          }
          label _continueLabel[329051]
          _indexOfInterest[329046]
          _iterator[329047]
        }
        label _breakLabel[329052]
        Defer
        {
          {
            (329094 call _endCountFree _coforallCount[329038])
          }
        }
        (329099 call _waitEndCount _coforallCount[329038] 1 numTasks[329039])
      }
      {
        const _coforallCount[329111] "const" "end count" "temp"
        (329168 'move' _coforallCount[329111](329165 call _endCountAlloc 1))
        unknown _indexOfInterest[329119] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329120] "expr temp" "temp"
        (329129 'move' _iterator[329120](329127 call _getIterator tmpIter[328939]))
        Defer
        {
          {
            (329145 call _freeIterator _iterator[329120])
          }
        }
        { scopeless type
          (329134 'move' _indexOfInterest[329119](329131 call iteratorIndex _iterator[329120]))
        }
        ForLoop[329121]
        {
          unknown j[329138] "coforall index var" "index var" "insert auto destroy"
          (329140 'move' j[329138] _indexOfInterest[329119])
          (329152 call _upEndCount _coforallCount[329111] 1)
          {
            {
              const tmp[328930] "const" "temp"
              (328931 'move' tmp[328930](328928 'deref'(328927 '_wide_get_locale'(328811 call(328806 call .(328803 call . dom c"dist") c"targetLocales") j))))
              {
                const Dest[328823] "const"(328820 IfExpr  _privatization then
                { scopeless
                  (328818 call chpl_getPrivatizedCopy(328815 'typeof' this) pid)
                } else
                { scopeless
                  this
                } )
                (328826 'end of statement')
                const inters[328844] "const"(328843 call(328838 call .(328837 call(328832 call .(328829 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                (328847 'end of statement')
                const srcChunk[328854] "const"(328853 call bulkCommTranslateDomain inters destDom srcDom)
                (328857 'end of statement')
                if(328902 call _cond_test debugBlockDistBulkTransfer)
                {
                  (328900 call writeln "Dest.locArr[" j "][" inters "] = Src[" srcDom "]")
                }
                (328925 call chpl__bulkTransferArray(328918 call .(328915 call .(328914 call(328909 call . Dest c"locArr") j) c"myElems") c"_value") inters Src srcChunk)
              }
              (328934 'elided on block' 0 tmp[328930])
            }
            (329114 call _downEndCount _coforallCount[329111] nil[44])
            (329113 'coforall loop')
          }
          label _continueLabel[329124]
          _indexOfInterest[329119]
          _iterator[329120]
        }
        label _breakLabel[329125]
        Defer
        {
          {
            (329156 call _endCountFree _coforallCount[329111])
          }
        }
        (329161 call _waitEndCount _coforallCount[329111] 1)
      }
    }
    (329191 return 1)
  }
  where {
    (328762 call canDoAnyToBlock this destDom Src srcDom)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferToKnown[329202](arg _mt[329213]:_MT[238], arg this[329210] :
  BlockArr, arg srcDom[329200]:_any[178](?), arg Dest[329205] :
  DefaultRectangularArr, arg destDom[329208]:_any[178](?)) : _unknown[51] "method"
  {
    if(329241 call _cond_test debugBlockDistBulkTransfer)
    {
      (329239 call writeln "In BlockDist.doiBulkTransferToKnown(DefaultRectangular)")
    }
    {
      unknown tmpIter[329398] "expr temp" "maybe ref" "no copy" "temp"
      (329401 'move' tmpIter[329398](329257 call(329252 call .(329249 call . dom c"dist") c"activeTargetLocales") srcDom))
      unknown isRngDomArr[329633] "maybe param" "temp"
      (329648 'move' isRngDomArr[329633](329646 call ||(329635 call isBoundedRange tmpIter[329398])(329644 call ||(329638 call isDomain tmpIter[329398])(329641 call isArray tmpIter[329398]))))
      if isRngDomArr[329633]
      {
        const _coforallCount[329500] "const" "end count" "temp"
        (329569 'move' _coforallCount[329500](329566 call _endCountAlloc 1))
        unknown numTasks[329501] "temp"
        (329553 'move' numTasks[329501](329549 call . tmpIter[329398] c"size"))
        (329544 call _upEndCount _coforallCount[329500] 1 numTasks[329501])
        (329541 call chpl_resetTaskSpawn numTasks[329501])
        unknown _indexOfInterest[329508] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329509] "expr temp" "temp"
        (329518 'move' _iterator[329509](329516 call _getIterator tmpIter[329398]))
        Defer
        {
          {
            (329534 call _freeIterator _iterator[329509])
          }
        }
        { scopeless type
          (329523 'move' _indexOfInterest[329508](329520 call iteratorIndex _iterator[329509]))
        }
        ForLoop[329510]
        {
          unknown j[329527] "coforall index var" "index var" "insert auto destroy"
          (329529 'move' j[329527] _indexOfInterest[329508])
          {
            {
              const tmp[329407] "const" "temp"
              (329409 'move' tmp[329407](329411 'deref'(329412 '_wide_get_locale'(329420 call(329414 call .(329416 call . dom c"dist") c"targetLocales") j))))
              {
                const Src[329424] "const"(329434 IfExpr  _privatization then
                { scopeless
                  (329428 call chpl_getPrivatizedCopy(329429 'typeof' this) pid)
                } else
                { scopeless
                  this
                } )
                (329436 'end of statement')
                const inters[329438] "const"(329451 call(329440 call .(329448 call(329442 call .(329444 call . Src c"dom") c"locDoms") j) c"myBlock") srcDom)
                (329454 'end of statement')
                const destChunk[329456] "const"(329458 call bulkCommTranslateDomain inters srcDom destDom)
                (329463 'end of statement')
                if(329465 call _cond_test debugBlockDistBulkTransfer)
                {
                  (329470 call writeln "  A[" destChunk "] = B[" inters "]")
                }
                const elemActual[329478] "const"(329480 call .(329482 call .(329487 call(329484 call . Src c"locArr") j) c"myElems") c"_value")
                (329492 'end of statement')
                (329494 call chpl__bulkTransferArray Dest destChunk elemActual inters)
              }
              (329404 'elided on block' 0 tmp[329407])
            }
            (329503 call _downEndCount _coforallCount[329500] nil[44])
            (329502 'coforall loop')
          }
          label _continueLabel[329513]
          _indexOfInterest[329508]
          _iterator[329509]
        }
        label _breakLabel[329514]
        Defer
        {
          {
            (329556 call _endCountFree _coforallCount[329500])
          }
        }
        (329561 call _waitEndCount _coforallCount[329500] 1 numTasks[329501])
      }
      {
        const _coforallCount[329573] "const" "end count" "temp"
        (329630 'move' _coforallCount[329573](329627 call _endCountAlloc 1))
        unknown _indexOfInterest[329581] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329582] "expr temp" "temp"
        (329591 'move' _iterator[329582](329589 call _getIterator tmpIter[329398]))
        Defer
        {
          {
            (329607 call _freeIterator _iterator[329582])
          }
        }
        { scopeless type
          (329596 'move' _indexOfInterest[329581](329593 call iteratorIndex _iterator[329582]))
        }
        ForLoop[329583]
        {
          unknown j[329600] "coforall index var" "index var" "insert auto destroy"
          (329602 'move' j[329600] _indexOfInterest[329581])
          (329614 call _upEndCount _coforallCount[329573] 1)
          {
            {
              const tmp[329389] "const" "temp"
              (329390 'move' tmp[329389](329387 'deref'(329386 '_wide_get_locale'(329267 call(329262 call .(329259 call . dom c"dist") c"targetLocales") j))))
              {
                const Src[329279] "const"(329276 IfExpr  _privatization then
                { scopeless
                  (329274 call chpl_getPrivatizedCopy(329271 'typeof' this) pid)
                } else
                { scopeless
                  this
                } )
                (329282 'end of statement')
                const inters[329300] "const"(329299 call(329294 call .(329293 call(329288 call .(329285 call . Src c"dom") c"locDoms") j) c"myBlock") srcDom)
                (329303 'end of statement')
                const destChunk[329310] "const"(329309 call bulkCommTranslateDomain inters srcDom destDom)
                (329313 'end of statement')
                if(329356 call _cond_test debugBlockDistBulkTransfer)
                {
                  (329354 call writeln "  A[" destChunk "] = B[" inters "]")
                }
                const elemActual[329374] "const"(329371 call .(329368 call .(329367 call(329362 call . Src c"locArr") j) c"myElems") c"_value")
                (329377 'end of statement')
                (329384 call chpl__bulkTransferArray Dest destChunk elemActual inters)
              }
              (329393 'elided on block' 0 tmp[329389])
            }
            (329576 call _downEndCount _coforallCount[329573] nil[44])
            (329575 'coforall loop')
          }
          label _continueLabel[329586]
          _indexOfInterest[329581]
          _iterator[329582]
        }
        label _breakLabel[329587]
        Defer
        {
          {
            (329618 call _endCountFree _coforallCount[329573])
          }
        }
        (329623 call _waitEndCount _coforallCount[329573] 1)
      }
    }
    (329653 return 1)
  }
  where {
    (329217 call ! disableBlockDistBulkTransfer)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiBulkTransferFromKnown[329664](arg _mt[329675]:_MT[238], arg this[329672] :
  BlockArr, arg destDom[329662]:_any[178](?), arg Src[329667] :
  DefaultRectangularArr, arg srcDom[329670]:_any[178](?)) : _unknown[51] "method"
  {
    if(329703 call _cond_test debugBlockDistBulkTransfer)
    {
      (329701 call writeln "In BlockArr.doiBulkTransferFromKnown(DefaultRectangular)")
    }
    {
      unknown tmpIter[329839] "expr temp" "maybe ref" "no copy" "temp"
      (329842 'move' tmpIter[329839](329719 call(329714 call .(329711 call . dom c"dist") c"activeTargetLocales") destDom))
      unknown isRngDomArr[330083] "maybe param" "temp"
      (330098 'move' isRngDomArr[330083](330096 call ||(330085 call isBoundedRange tmpIter[329839])(330094 call ||(330088 call isDomain tmpIter[329839])(330091 call isArray tmpIter[329839]))))
      if isRngDomArr[330083]
      {
        const _coforallCount[329950] "const" "end count" "temp"
        (330019 'move' _coforallCount[329950](330016 call _endCountAlloc 1))
        unknown numTasks[329951] "temp"
        (330003 'move' numTasks[329951](329999 call . tmpIter[329839] c"size"))
        (329994 call _upEndCount _coforallCount[329950] 1 numTasks[329951])
        (329991 call chpl_resetTaskSpawn numTasks[329951])
        unknown _indexOfInterest[329958] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[329959] "expr temp" "temp"
        (329968 'move' _iterator[329959](329966 call _getIterator tmpIter[329839]))
        Defer
        {
          {
            (329984 call _freeIterator _iterator[329959])
          }
        }
        { scopeless type
          (329973 'move' _indexOfInterest[329958](329970 call iteratorIndex _iterator[329959]))
        }
        ForLoop[329960]
        {
          unknown j[329977] "coforall index var" "index var" "insert auto destroy"
          (329979 'move' j[329977] _indexOfInterest[329958])
          {
            {
              const tmp[329848] "const" "temp"
              (329850 'move' tmp[329848](329852 'deref'(329853 '_wide_get_locale'(329861 call(329855 call .(329857 call . dom c"dist") c"targetLocales") j))))
              {
                const Dest[329865] "const"(329875 IfExpr  _privatization then
                { scopeless
                  (329869 call chpl_getPrivatizedCopy(329870 'typeof' this) pid)
                } else
                { scopeless
                  this
                } )
                (329877 'end of statement')
                const inters[329879] "const"(329892 call(329881 call .(329889 call(329883 call .(329885 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                (329895 'end of statement')
                (329897 call assert(329899 call >(329901 call . inters c"size") 0))
                const srcChunk[329906] "const"(329908 call bulkCommTranslateDomain inters destDom srcDom)
                (329913 'end of statement')
                if(329915 call _cond_test debugBlockDistBulkTransfer)
                {
                  (329920 call writeln "  A[" inters "] = B[" srcChunk "]")
                }
                const elemActual[329928] "const"(329930 call .(329932 call .(329937 call(329934 call . Dest c"locArr") j) c"myElems") c"_value")
                (329942 'end of statement')
                (329944 call chpl__bulkTransferArray elemActual inters Src srcChunk)
              }
              (329845 'elided on block' 0 tmp[329848])
            }
            (329953 call _downEndCount _coforallCount[329950] nil[44])
            (329952 'coforall loop')
          }
          label _continueLabel[329963]
          _indexOfInterest[329958]
          _iterator[329959]
        }
        label _breakLabel[329964]
        Defer
        {
          {
            (330006 call _endCountFree _coforallCount[329950])
          }
        }
        (330011 call _waitEndCount _coforallCount[329950] 1 numTasks[329951])
      }
      {
        const _coforallCount[330023] "const" "end count" "temp"
        (330080 'move' _coforallCount[330023](330077 call _endCountAlloc 1))
        unknown _indexOfInterest[330031] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[330032] "expr temp" "temp"
        (330041 'move' _iterator[330032](330039 call _getIterator tmpIter[329839]))
        Defer
        {
          {
            (330057 call _freeIterator _iterator[330032])
          }
        }
        { scopeless type
          (330046 'move' _indexOfInterest[330031](330043 call iteratorIndex _iterator[330032]))
        }
        ForLoop[330033]
        {
          unknown j[330050] "coforall index var" "index var" "insert auto destroy"
          (330052 'move' j[330050] _indexOfInterest[330031])
          (330064 call _upEndCount _coforallCount[330023] 1)
          {
            {
              const tmp[329830] "const" "temp"
              (329831 'move' tmp[329830](329828 'deref'(329827 '_wide_get_locale'(329729 call(329724 call .(329721 call . dom c"dist") c"targetLocales") j))))
              {
                const Dest[329741] "const"(329738 IfExpr  _privatization then
                { scopeless
                  (329736 call chpl_getPrivatizedCopy(329733 'typeof' this) pid)
                } else
                { scopeless
                  this
                } )
                (329744 'end of statement')
                const inters[329762] "const"(329761 call(329756 call .(329755 call(329750 call .(329747 call . Dest c"dom") c"locDoms") j) c"myBlock") destDom)
                (329765 'end of statement')
                (329775 call assert(329772 call >(329768 call . inters c"size") 0))
                const srcChunk[329783] "const"(329782 call bulkCommTranslateDomain inters destDom srcDom)
                (329786 'end of statement')
                if(329797 call _cond_test debugBlockDistBulkTransfer)
                {
                  (329795 call writeln "  A[" inters "] = B[" srcChunk "]")
                }
                const elemActual[329815] "const"(329812 call .(329809 call .(329808 call(329803 call . Dest c"locArr") j) c"myElems") c"_value")
                (329818 'end of statement')
                (329825 call chpl__bulkTransferArray elemActual inters Src srcChunk)
              }
              (329834 'elided on block' 0 tmp[329830])
            }
            (330026 call _downEndCount _coforallCount[330023] nil[44])
            (330025 'coforall loop')
          }
          label _continueLabel[330036]
          _indexOfInterest[330031]
          _iterator[330032]
        }
        label _breakLabel[330037]
        Defer
        {
          {
            (330068 call _endCountFree _coforallCount[330023])
          }
        }
        (330073 call _waitEndCount _coforallCount[330023] 1)
      }
    }
    (330103 return 1)
  }
  where {
    (329679 call ! disableBlockDistBulkTransfer)
  }
  { scopeless type
    bool[10]
  }
  function _unknown[51].doiCanBulkTransferRankChange[330112](arg _mt[330117]:_MT[238], arg this[330114] :
  BlockArr) param : _unknown[51] "method" "method overrides"
  {
    (330120 return 1)
  }
  unknown debugBlockScan[330126] "config" "param" 0
  (330129 'end of statement')
  function _unknown[51].doiScan[330135](arg _mt[330142]:_MT[238], arg this[330139] :
  BlockArr, arg op[330133]:_any[178](?), arg dom[330137]:_any[178](?)) : _unknown[51] "method"
  {
    unknown resType[330161] "type variable"(330160 'typeof'(330159 call(330155 call . op c"generate")))
    unknown res[330172](330170 call chpl__buildArrayRuntimeType(330168 call chpl__ensureDomainExpr dom) resType)
    (330175 'end of statement')
    (330177 'use' ReplicatedDist)
    unknown targetLocs[330185] "ref var"(330184 call(330180 call . this c"dsiTargetLocales"))
    (330188 'end of statement')
    const elemPerLocDom[330202] "const"(330200 call chpl__distributed(330199 call Replicated targetLocs)(330194 call chpl__buildDomainExpr(330191 call chpl_build_bounded_range 1 1)))
    (330205 'end of statement')
    unknown elemPerLoc[330213](330211 call chpl__buildArrayRuntimeType(330209 call chpl__ensureDomainExpr elemPerLocDom) resType)
    (330216 'end of statement')
    unknown inputReady$[330226](330224 call chpl__buildArrayRuntimeType(330222 call chpl__ensureDomainExpr elemPerLocDom)(330220 call _syncvar bool[10]))
    (330229 'end of statement')
    unknown outputReady$[330239](330237 call chpl__buildArrayRuntimeType(330235 call chpl__ensureDomainExpr elemPerLocDom)(330233 call _syncvar bool[10]))
    (330242 'end of statement')
    {
      unknown tmpIter[330682] "expr temp" "maybe ref" "no copy" "temp"
      (330685 'move' tmpIter[330682](330248 call .(330245 call . dom c"dist") c"targetLocDom"))
      unknown isRngDomArr[331171] "maybe param" "temp"
      (331186 'move' isRngDomArr[331171](331184 call ||(331173 call isBoundedRange tmpIter[330682])(331182 call ||(331176 call isDomain tmpIter[330682])(331179 call isArray tmpIter[330682]))))
      if isRngDomArr[331171]
      {
        const _coforallCount[331038] "const" "end count" "temp"
        (331107 'move' _coforallCount[331038](331104 call _endCountAlloc 1))
        unknown numTasks[331039] "temp"
        (331091 'move' numTasks[331039](331087 call . tmpIter[330682] c"size"))
        (331082 call _upEndCount _coforallCount[331038] 1 numTasks[331039])
        (331079 call chpl_resetTaskSpawn numTasks[331039])
        unknown _indexOfInterest[331046] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[331047] "expr temp" "temp"
        (331056 'move' _iterator[331047](331054 call _getIterator tmpIter[330682]))
        Defer
        {
          {
            (331072 call _freeIterator _iterator[331047])
          }
        }
        { scopeless type
          (331061 'move' _indexOfInterest[331046](331058 call iteratorIndex _iterator[331047]))
        }
        ForLoop[331048]
        {
          unknown locid[331065] "coforall index var" "index var" "insert auto destroy"
          (331067 'move' locid[331065] _indexOfInterest[331046])
          {
            {
              const tmp[330691] "const" "temp"
              (330693 'move' tmp[330691](330695 'deref'(330696 '_wide_get_locale'(330698 call targetLocs locid))))
              {
                const myop[330702] "const"(330707 call(330704 call . op c"clone"))
                (330709 'end of statement')
                unknown myLocArrDesc[330711] "ref var"(330713 call locArr locid)
                (330716 'end of statement')
                unknown myLocArr[330718] "ref var"(330720 call . myLocArrDesc c"myElems")
                (330724 'end of statement')
                const myLocDom[330726] "const" "ref var"(330728 call . myLocArr c"_dom")
                (330732 'end of statement')
                unknown tmp[330734] "temp"(330742 call(330736 call .(330738 call . myLocArr c"_value") c"chpl__preScan") myop res(330746 call myLocDom dom))
                (330750 call _check_tuple_var_decl tmp[330734] 4)
                unknown numTasks[330753](330755 call tmp[330734] 0)
                unknown rngs[330758](330760 call tmp[330734] 1)
                unknown state[330763](330765 call tmp[330734] 2)
                unknown tot[330768](330770 call tmp[330734] 3)
                (330773 'end of statement')
                if(330775 call _cond_test debugBlockScan)
                {
                  (330780 call writeln locid ": "(330784 call _build_tuple numTasks rngs state tot))
                }
                (330791 call =(330793 call elemPerLoc 1) tot)
                (330797 call =(330799 call inputReady$ 1) 1)
                if(330803 call _cond_test(330805 call == locid(330808 call .(330810 call .(330812 call . dom c"dist") c"targetLocDom") c"low")))
                {
                  const metaop[330819] "const"(330824 call(330821 call . op c"clone"))
                  (330826 'end of statement')
                  unknown next[330828](330830 call . metaop c"identity") resType
                  (330835 'end of statement')
                  {
                    unknown _indexOfInterest[330837] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[330839] "expr temp" "temp"
                    (330841 'move' _iterator[330839](330844 call _getIterator(330846 call .(330848 call . dom c"dist") c"targetLocDom")))
                    Defer
                    {
                      {
                        (330854 call _freeIterator _iterator[330839])
                      }
                    }
                    { scopeless type
                      (330858 'move' _indexOfInterest[330837](330861 call iteratorIndex _iterator[330839]))
                    }
                    ForLoop[330863]
                    {
                      unknown locid[330866] "index var" "insert auto destroy"
                      (330868 'move' locid[330866] _indexOfInterest[330837])
                      {
                        const targetloc[330873] "const"(330875 call targetLocs locid)
                        (330878 'end of statement')
                        const locready[330880] "const"(330887 call(330885 call(330882 call . inputReady$ c"replicand") targetloc) 1)
                        (330890 'end of statement')
                        unknown locVal[330892] "ref var"(330899 call(330897 call(330894 call . elemPerLoc c"replicand") targetloc) 1)
                        (330902 'end of statement')
                        (330904 call <=> locVal next)
                        (330908 call =(330915 call(330913 call(330910 call . outputReady$ c"replicand") targetloc) 1) 1)
                        (330922 call(330919 call . metaop c"accumulateOntoState") next locVal)
                      }
                      label _continueLabel[330925]
                      _indexOfInterest[330837]
                      _iterator[330839]
                    }
                    label _breakLabel[330927]
                  }
                  (330930 call chpl__delete metaop)
                }
                const resready[330934] "const"(330936 call outputReady$ 1)
                (330939 'end of statement')
                const myadjust[330941] "const"(330943 call elemPerLoc 1)
                (330946 'end of statement')
                if(330948 call _cond_test debugBlockScan)
                {
                  (330953 call writeln locid ": myadjust = " myadjust)
                }
                {
                  unknown _indexOfInterest[330959] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[330961] "expr temp" "temp"
                  (330963 'move' _iterator[330961](330966 call _getIterator state))
                  Defer
                  {
                    {
                      (330970 call _freeIterator _iterator[330961])
                    }
                  }
                  { scopeless type
                    (330974 'move' _indexOfInterest[330959](330977 call iteratorIndex _iterator[330961]))
                  }
                  ForLoop[330979]
                  {
                    unknown s[330982] "index var" "insert auto destroy"
                    (330984 'move' s[330982] _indexOfInterest[330959])
                    (330992 call(330989 call . myop c"accumulateOntoState") s myadjust)
                    label _continueLabel[330995]
                    _indexOfInterest[330959]
                    _iterator[330961]
                  }
                  label _breakLabel[330997]
                }
                if(331000 call _cond_test debugBlockScan)
                {
                  (331005 call writeln locid ": state = " state)
                }
                (331017 call(331011 call .(331013 call . myLocArr c"_value") c"chpl__postScan") op res numTasks rngs state)
                if(331024 call _cond_test debugBlockScan)
                {
                  (331029 call writeln locid ": " myLocArr)
                }
                (331035 call chpl__delete myop)
              }
              (330688 'elided on block' 0 tmp[330691])
            }
            (331041 call _downEndCount _coforallCount[331038] nil[44])
            (331040 'coforall loop')
          }
          label _continueLabel[331051]
          _indexOfInterest[331046]
          _iterator[331047]
        }
        label _breakLabel[331052]
        Defer
        {
          {
            (331094 call _endCountFree _coforallCount[331038])
          }
        }
        (331099 call _waitEndCount _coforallCount[331038] 1 numTasks[331039])
      }
      {
        const _coforallCount[331111] "const" "end count" "temp"
        (331168 'move' _coforallCount[331111](331165 call _endCountAlloc 1))
        unknown _indexOfInterest[331119] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[331120] "expr temp" "temp"
        (331129 'move' _iterator[331120](331127 call _getIterator tmpIter[330682]))
        Defer
        {
          {
            (331145 call _freeIterator _iterator[331120])
          }
        }
        { scopeless type
          (331134 'move' _indexOfInterest[331119](331131 call iteratorIndex _iterator[331120]))
        }
        ForLoop[331121]
        {
          unknown locid[331138] "coforall index var" "index var" "insert auto destroy"
          (331140 'move' locid[331138] _indexOfInterest[331119])
          (331152 call _upEndCount _coforallCount[331111] 1)
          {
            {
              const tmp[330673] "const" "temp"
              (330674 'move' tmp[330673](330671 'deref'(330670 '_wide_get_locale'(330254 call targetLocs locid))))
              {
                const myop[330261] "const"(330260 call(330256 call . op c"clone"))
                (330264 'end of statement')
                unknown myLocArrDesc[330270] "ref var"(330269 call locArr locid)
                (330273 'end of statement')
                unknown myLocArr[330278] "ref var"(330275 call . myLocArrDesc c"myElems")
                (330281 'end of statement')
                const myLocDom[330286] "const" "ref var"(330283 call . myLocArr c"_dom")
                (330289 'end of statement')
                unknown tmp[330314] "temp"(330313 call(330303 call .(330300 call . myLocArr c"_value") c"chpl__preScan") myop res(330312 call myLocDom dom))
                (330327 call _check_tuple_var_decl tmp[330314] 4)
                unknown numTasks[330290](330315 call tmp[330314] 0)
                unknown rngs[330292](330318 call tmp[330314] 1)
                unknown state[330294](330321 call tmp[330314] 2)
                unknown tot[330296](330324 call tmp[330314] 3)
                (330332 'end of statement')
                if(330347 call _cond_test debugBlockScan)
                {
                  (330345 call writeln locid ": "(330343 call _build_tuple numTasks rngs state tot))
                }
                (330357 call =(330355 call elemPerLoc 1) tot)
                (330365 call =(330363 call inputReady$ 1) 1)
                if(330515 call _cond_test(330379 call == locid(330376 call .(330373 call .(330370 call . dom c"dist") c"targetLocDom") c"low")))
                {
                  const metaop[330387] "const"(330386 call(330382 call . op c"clone"))
                  (330390 'end of statement')
                  unknown next[330397](330394 call . metaop c"identity") resType
                  (330400 'end of statement')
                  {
                    unknown _indexOfInterest[330476] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[330477] "expr temp" "temp"
                    (330486 'move' _iterator[330477](330484 call _getIterator(330406 call .(330403 call . dom c"dist") c"targetLocDom")))
                    Defer
                    {
                      {
                        (330503 call _freeIterator _iterator[330477])
                      }
                    }
                    { scopeless type
                      (330492 'move' _indexOfInterest[330476](330489 call iteratorIndex _iterator[330477]))
                    }
                    ForLoop[330478]
                    {
                      unknown locid[330496] "index var" "insert auto destroy"
                      (330498 'move' locid[330496] _indexOfInterest[330476])
                      {
                        const targetloc[330413] "const"(330412 call targetLocs locid)
                        (330416 'end of statement')
                        const locready[330430] "const"(330429 call(330426 call(330421 call . inputReady$ c"replicand") targetloc) 1)
                        (330433 'end of statement')
                        unknown locVal[330444] "ref var"(330443 call(330440 call(330435 call . elemPerLoc c"replicand") targetloc) 1)
                        (330447 'end of statement')
                        (330450 call <=> locVal next)
                        (330464 call =(330462 call(330459 call(330454 call . outputReady$ c"replicand") targetloc) 1) 1)
                        (330474 call(330468 call . metaop c"accumulateOntoState") next locVal)
                      }
                      label _continueLabel[330481]
                      _indexOfInterest[330476]
                      _iterator[330477]
                    }
                    label _breakLabel[330482]
                  }
                  (330512 call chpl__delete metaop)
                }
                const resready[330523] "const"(330522 call outputReady$ 1)
                (330526 'end of statement')
                const myadjust[330531] "const"(330530 call elemPerLoc 1)
                (330534 'end of statement')
                if(330559 call _cond_test debugBlockScan)
                {
                  (330557 call writeln locid ": myadjust = " myadjust)
                }
                {
                  unknown _indexOfInterest[330575] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[330576] "expr temp" "temp"
                  (330585 'move' _iterator[330576](330583 call _getIterator state))
                  Defer
                  {
                    {
                      (330601 call _freeIterator _iterator[330576])
                    }
                  }
                  { scopeless type
                    (330590 'move' _indexOfInterest[330575](330587 call iteratorIndex _iterator[330576]))
                  }
                  ForLoop[330577]
                  {
                    unknown s[330594] "index var" "insert auto destroy"
                    (330596 'move' s[330594] _indexOfInterest[330575])
                    (330573 call(330567 call . myop c"accumulateOntoState") s myadjust)
                    label _continueLabel[330580]
                    _indexOfInterest[330575]
                    _iterator[330576]
                  }
                  label _breakLabel[330581]
                }
                if(330632 call _cond_test debugBlockScan)
                {
                  (330630 call writeln locid ": state = " state)
                }
                (330650 call(330641 call .(330638 call . myLocArr c"_value") c"chpl__postScan") op res numTasks rngs state)
                if(330660 call _cond_test debugBlockScan)
                {
                  (330658 call writeln locid ": " myLocArr)
                }
                (330667 call chpl__delete myop)
              }
              (330677 'elided on block' 0 tmp[330673])
            }
            (331114 call _downEndCount _coforallCount[331111] nil[44])
            (331113 'coforall loop')
          }
          label _continueLabel[331124]
          _indexOfInterest[331119]
          _iterator[331120]
        }
        label _breakLabel[331125]
        Defer
        {
          {
            (331156 call _endCountFree _coforallCount[331111])
          }
        }
        (331161 call _waitEndCount _coforallCount[331111] 1)
      }
    }
    (331192 call chpl__delete op)
    (331196 return res)
  }
  where {
    (330152 call &&(330146 call == rank 1)(330151 call chpl__scanStateResTypesMatch op))
  }
  function newBlockDom[331207](arg dom[331204] :
  _domain) : _unknown[51]
  {
    (331216 return(331214 call chpl__distributed(331213 call Block dom) dom))
  }
  function newBlockArr[331227](arg dom[331224] :
  _domain, arg eltType[331229]:_any[178](?)) : _unknown[51]
  {
    unknown D[331235](331234 call newBlockDom dom)
    (331238 'end of statement')
    unknown A[331247](331245 call chpl__buildArrayRuntimeType(331243 call chpl__ensureDomainExpr D) eltType)
    (331250 'end of statement')
    (331252 return A)
  }
  function newBlockDom[331264](arg rng[331260] ... :
  range) : _unknown[51]
  {
    (331274 return(331273 call newBlockDom(331270 call chpl__buildDomainExpr(331268 'expand_tuple' rng))))
  }
  function newBlockArr[331287](arg rng[331283] ... :
  range, arg eltType[331289]:_any[178](?)) : _unknown[51]
  {
    (331300 return(331299 call newBlockArr(331295 call chpl__buildDomainExpr(331293 'expand_tuple' rng)) eltType))
  }
}