AST dump for Random after pass scopeResolve.
Module use list: ChapelStandard RandomSupport NPBRandom PCGRandom Set Search Sort 

{ type RNG[304771] def PCG[304766]:RNG[304771] 1 def NPB[304769]:RNG[304771] 2 unknown defaultRNG[304780] "param" PCG[304766](304783 'end of statement') unknown RandomStream[304796] "type variable"(304793 IfExpr (304789 call == defaultRNG[304780] PCG[304766]) then
  { scopeless PCGRandomStream[406988](?)
  } else
  { scopeless NPBRandomStream[406992](?)
  } ) function isSupportedNumericType[304803](arg t[304801]:_any[178](?)) param : _unknown[51] "private"
  {(304815 return(304813 call ||(304808 call isNumericType t[304801])(304812 call isBoolType t[304801])))
  } function fillRandom[304828](arg arr[304825] :(304822 call chpl__buildArrayRuntimeType nil[44]), arg seed[304840] :(304833 call int(64)[13] 64) =(304837 call . SeedGenerator[307628] c"oddCurrentTime"), param arg algorithm[304845] = defaultRNG[304780]) : _unknown[51] "no return value for void"
  { unknown randNums[304869](304868 call createRandomStream(seed = seed[304840])(eltType =(304860 call . arr[304825] c"eltType"))(parSafe = 0)(algorithm = algorithm[304845]))(304872 'end of statement')(304882 call(304877 call . randNums[304869] c"fillRandom") arr[304825])
  }
  {(304854 call isSupportedNumericType(304850 call . arr[304825] c"eltType"))
  } function fillRandom[304895](arg arr[304892] :(304889 call chpl__buildArrayRuntimeType nil[44]), arg seed[304905] :(304900 call int(64)[13] 64) =(304902 call . SeedGenerator[307628] c"oddCurrentTime"), param arg algorithm[304910] = defaultRNG[304780]) : _unknown[51] "no doc" "no return value for void"
  {(304932 call compilerError "Random.fillRandom is only defined for numeric arrays")
  } function shuffle[304945](arg arr[304942] :(304939 call chpl__buildArrayRuntimeType nil[44]), arg seed[304955] :(304950 call int(64)[13] 64) =(304952 call . SeedGenerator[307628] c"oddCurrentTime"), param arg algorithm[304963] = PCG[304766]) : _unknown[51] "no return value for void"
  { unknown randNums[304983](304982 call createRandomStream(seed = seed[304955])(eltType =(304974 call .(304971 call . arr[304942] c"_dom") c"idxType"))(parSafe = 0)(algorithm = algorithm[304963]))(304986 'end of statement')(304994 call(304989 call . randNums[304983] c"shuffle") arr[304942])
  } function permutation[305006](arg arr[305003] :(305000 call chpl__buildArrayRuntimeType nil[44]), arg seed[305016] :(305011 call int(64)[13] 64) =(305013 call . SeedGenerator[307628] c"oddCurrentTime"), param arg algorithm[305024] = PCG[304766]) : _unknown[51] "no return value for void"
  { unknown randNums[305041](305040 call createRandomStream(seed = seed[305016])(eltType =(305032 call . arr[305003] c"eltType"))(parSafe = 0)(algorithm = algorithm[305024]))(305044 'end of statement')(305054 call(305049 call . randNums[305041] c"permutation") arr[305003])
  } function makeRandomStream[305062](arg eltType[305060]:_any[178](?), arg seed[305072] :(305067 call int(64)[13] 64) =(305069 call . SeedGenerator[307628] c"oddCurrentTime"), param arg parSafe[305078] : bool[10] = 1, param arg algorithm[305083] = defaultRNG[304780]) : _unknown[51] "no doc"
  {(305124 call compilerWarning(305121 call + "makeRandomStream is deprecated - " "please use createRandomStream instead"))(305134 return(305133 call createRandomStream eltType[305060] seed[305072] parSafe[305078] algorithm[305083]))
  } function createRandomStream[305142](arg eltType[305140]:_any[178](?), arg seed[305152] :(305147 call int(64)[13] 64) =(305149 call . SeedGenerator[307628] c"oddCurrentTime"), param arg parSafe[305158] : bool[10] = 1, param arg algorithm[305163] = defaultRNG[304780]) : _unknown[51]
  {
    if(305237 call _cond_test(305171 call == algorithm[305163] PCG[304766]))
    {(305185 return(305175 'new'(_chpl_manager = _owned[30](?))(305184 call PCGRandomStream[406988](?)(seed = seed[305152])(parSafe = parSafe[305158])(eltType = eltType[305140]))))
    }
    {
      if(305231 call _cond_test(305194 call == algorithm[305163] NPB[304769]))
      {(305208 return(305198 'new'(_chpl_manager = _owned[30](?))(305207 call NPBRandomStream[406992](?)(seed = seed[305152])(parSafe = parSafe[305158])(eltType = eltType[305140]))))
      }
      {(305229 call compilerError "Unknown random number generator")
      }
    }
  } function _choice[305250](arg stream[305248]:_any[178](?), arg X[305253] : _domain[125908](?), arg size[305258] : unknown sizeType[305256], arg replace[305262] : bool[10], arg prob[305267] : unknown probType[305265]) : _unknown[51] throws "no doc"
  {
    if(305299 call _cond_test(305275 call !=(305271 call . X[305253] c"rank") 1))
    {(305296 call compilerError "choice() argument x must be 1 dimensional")
    }
    if(305337 call _cond_test(305309 call <(305305 call . X[305253] c"size") 1))
    {(305334 'throw'(305313 'new'(_chpl_manager = _owned[30](?))(305333 call IllegalArgumentError[388889](?) "choice() x.size must be greater than 0")))
    }
    if(305497 call _cond_test(305345 call !(305344 call isNothingType probType[305265])))
    {
      if(305374 call _cond_test(305351 call !(305350 call isArrayType probType[305265])))
      {(305372 call compilerError "choice() prob must be an array")
      }
      if(305419 call _cond_test(305396 call !(305394 call ||(305386 call isIntegralType(305382 call . prob[305267] c"eltType"))(305393 call isRealType(305389 call . prob[305267] c"eltType")))))
      {(305417 call compilerError "choice() prob.eltType must be real or integral")
      }
      if(305453 call _cond_test(305429 call !=(305425 call . prob[305267] c"rank") 1))
      {(305450 call compilerError "choice() prob array must be 1 dimensional")
      }
      if(305493 call _cond_test(305465 call !=(305458 call . prob[305267] c"size")(305462 call . X[305253] c"size")))
      {(305490 'throw'(305469 'new'(_chpl_manager = _owned[30](?))(305489 call IllegalArgumentError[388889](?) "choice() x.size must be equal to prob.size")))
      }
    }
    if(305691 call _cond_test(305505 call !(305504 call isNothingType sizeType[305256])))
    {
      if(305685 call _cond_test(305510 call isIntegralType sizeType[305256]))
      {
        if(305540 call _cond_test(305513 call <= size[305258] 0))
        {(305538 'throw'(305517 'new'(_chpl_manager = _owned[30](?))(305537 call IllegalArgumentError[388889](?) "choice() size must be greater than 0")))
        }
        if(305583 call _cond_test(305556 call &&(305547 call ! replace[305262])(305554 call > size[305258](305551 call . X[305253] c"size"))))
        {(305581 'throw'(305560 'new'(_chpl_manager = _owned[30](?))(305580 call IllegalArgumentError[388889](?) "choice() size must be smaller than x.size when replace=false")))
        }
      }
      {
        if(305681 call _cond_test(305591 call isDomainType sizeType[305256]))
        {
          if(305624 call _cond_test(305597 call <=(305593 call . size[305258] c"size") 0))
          {(305622 'throw'(305601 'new'(_chpl_manager = _owned[30](?))(305621 call IllegalArgumentError[388889](?) "choice() size domain can not be empty")))
          }
          if(305654 call _cond_test(305643 call &&(305631 call ! replace[305262])(305641 call >(305634 call . size[305258] c"size")(305638 call . X[305253] c"size"))))
          {(305652 'throw'(305647 'new'(_chpl_manager = _owned[30](?))(305651 call IllegalArgumentError[388889](?) "choice() size must be smaller than x.size when replace=false")))
          }
        }
        {(305678 call compilerError "choice() size must be integral or domain")
        }
      }
    }
    if(305720 call _cond_test(305698 call isNothingType probType[305265]))
    {(305706 return(305705 call _choiceUniform stream[305248] X[305253] size[305258] replace[305262]))
    }
    {(305717 return(305716 call _choiceProbabilities stream[305248] X[305253] size[305258] replace[305262] prob[305267]))
    }
  } function _choiceUniform[305730](arg stream[305728]:_any[178](?), arg X[305733] : _domain[125908](?), arg size[305738] : unknown sizeType[305736], arg replace[305742] : bool[10]) : _unknown[51] throws "no doc"
  { const low[305749] "const"(305746 call . X[305733] c"alignedLow") const stride[305759] "const"(305758 call abs(305754 call . X[305733] c"stride"))(305762 'end of statement')
    if(306220 call _cond_test(305767 call isNothingType sizeType[305736]))
    { unknown randVal[305784](305783 call(305769 call . stream[305728] c"getNext")(resultType = int(64)[13]) 0(305781 call -(305777 call . X[305733] c"size") 1))(305787 'end of statement') unknown randIdx[305802](305801 call(305796 call .(305795 call(305790 call . X[305733] c"dim") 0) c"orderToIndex") randVal[305784])(305805 'end of statement')(305807 return randIdx[305802])
    }
    { unknown m[305810] 1(305813 'end of statement')
      if(305827 call _cond_test(305818 call isDomainType sizeType[305736]))
      {(305824 call = m[305810](305821 call . size[305738] c"size"))
      } unknown numElements[305871](305868 IfExpr (305835 call isDomainType sizeType[305736]) then
      { scopeless m[305810]
      } else
      { scopeless(305865 IfExpr (305840 call isIntegralType sizeType[305736]) then
        { scopeless(305843 call _cast int(64)[13] size[305738])
        } else
        { scopeless(305864 call compilerError "choice() size type must be integral or tuple of ranges")
        } )
      } )(305874 'end of statement') unknown samples[305888](305886 call chpl__buildArrayRuntimeType(305884 call chpl__ensureDomainExpr(305880 call chpl_build_bounded_range 0(305878 call - numElements[305871] 1))) int(64)[13])(305891 'end of statement')
      if(306187 call _cond_test replace[305742])
      {
        { unknown _indexOfInterest[305938] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[305939] "expr temp" "temp"(305948 'move' _iterator[305939](305946 call _getIterator samples[305888]))
          Defer
          {
            {(305964 call _freeIterator _iterator[305939])
            }
          }
          { scopeless type(305953 'move' _indexOfInterest[305938](305950 call iteratorIndex _iterator[305939]))
          }
          ForLoop[305940]
          { unknown sample[305957] "index var" "insert auto destroy"(305959 'move' sample[305957] _indexOfInterest[305938])
            { unknown randVal[305911](305910 call(305896 call . stream[305728] c"getNext")(resultType = int(64)[13]) 0(305908 call -(305904 call . X[305733] c"size") 1))(305914 'end of statement') unknown randIdx[305929](305928 call(305923 call .(305922 call(305917 call . X[305733] c"dim") 0) c"orderToIndex") randVal[305911])(305932 'end of statement')(305935 call = sample[305957] randIdx[305929])
            } label _continueLabel[305943] _indexOfInterest[305938] _iterator[305939]
          } label _breakLabel[305944]
        }
      }
      {
        if(306182 call _cond_test(305980 call < numElements[305871](305979 call log2(305975 call . X[305733] c"size"))))
        { unknown indices[305986](305985 call set[333266](?) int(64)[13])(305989 'end of statement') unknown i[305993] 0 int(64)[13](305996 'end of statement')
          { unknown tmp[306074] "temp"(306098 'move' tmp[306074](306093 call _cond_test(306095 call < i[305993] numElements[305871])))
            WhileDo[306079]
            {
              { unknown randVal[306017](306016 call(306002 call . stream[305728] c"getNext")(resultType = int(64)[13]) 0(306014 call -(306010 call . X[305733] c"size") 1))(306020 'end of statement')
                if(306070 call _cond_test(306029 call !(306028 call(306023 call . indices[305986] c"contains") randVal[306017])))
                { unknown randIdx[306044](306043 call(306038 call .(306037 call(306032 call . X[305733] c"dim") 0) c"orderToIndex") randVal[306017])(306047 'end of statement')(306054 call =(306052 call samples[305888] i[305993]) randIdx[306044])(306063 call(306058 call . indices[305986] c"add") randVal[306017])(306067 call += i[305993] 1)
                }
              } label _continueLabel[306077](306088 'move' tmp[306074](306083 call _cond_test(306085 call < i[305993] numElements[305871]))) tmp[306074]
            } label _breakLabel[306078]
          }
        }
        { unknown indices[306109] X[305733](306106 call chpl__buildArrayRuntimeType(306104 call chpl__ensureDomainExpr X[305733]) int(64)[13])(306112 'end of statement')(306117 call shuffle indices[306109])
          { unknown _indexOfInterest[306148] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[306149] "expr temp" "temp"(306158 'move' _iterator[306149](306156 call _getIterator(306121 call . samples[305888] c"_dom")))
            Defer
            {
              {(306175 call _freeIterator _iterator[306149])
              }
            }
            { scopeless type(306164 'move' _indexOfInterest[306148](306161 call iteratorIndex _iterator[306149]))
            }
            ForLoop[306150]
            { unknown i[306168] "index var" "insert auto destroy"(306170 'move' i[306168] _indexOfInterest[306148])
              {(306144 call =(306127 call samples[305888] i[306168])(306143 call indices[306109](306141 call(306136 call .(306135 call(306130 call . X[305733] c"dim") 0) c"orderToIndex") i[306168])))
              } label _continueLabel[306153] _indexOfInterest[306148] _iterator[306149]
            } label _breakLabel[306154]
          }
        }
      }
      if(306215 call _cond_test(306194 call isIntegralType sizeType[305736]))
      {(306196 return samples[305888])
      }
      {
        if(306211 call _cond_test(306202 call isDomainType sizeType[305736]))
        {(306208 return(306207 call reshape samples[305888] size[305738]))
        }
      }
    }
  } function _choiceProbabilities[306230](arg stream[306228]:_any[178](?), arg X[306233] : _domain[125908](?), arg size[306238] : unknown sizeType[306236], arg replace[306241]:_any[178](?), arg prob[306245] : unknown probType[306243]) : _unknown[51] throws "no doc"
  {
    if(306275 call _cond_test(306263 call !=(306256 call . prob[306245] c"size")(306260 call . X[306233] c"size")))
    {(306272 'throw'(306267 'new'(_chpl_manager = _owned[30](?))(306271 call IllegalArgumentError[388889](?) "choice() x.size must be equal to prob.size")))
    }
    if(306311 call _cond_test(306284 call ==(306280 call . prob[306245] c"size") 0))
    {(306309 'throw'(306288 'new'(_chpl_manager = _owned[30](?))(306308 call IllegalArgumentError[388889](?) "choice() prob array cannot be empty")))
    } const low[306320] "const"(306317 call . X[306233] c"alignedLow") const stride[306330] "const"(306329 call abs(306325 call . X[306233] c"stride"))(306333 'end of statement') unknown P[306350] "ref var"(306349 call(306335 call . prob[306245] c"reindex")(306346 call chpl_build_bounded_range 0(306344 call -(306340 call . X[306233] c"size") 1)))(306353 'end of statement') function chpl__scan7[306356](arg chpl_toScan[306358]:_any[178](?)) : _unknown[51] "compiler nested function" "ReduceScanOp" "fn returns iterator"
    { unknown chpl_eltType[306360] "maybe type" "temp"
      { scopeless type(306364 'move' chpl_eltType[306360](306366 'typeof'(306368 call chpl__initCopy(306370 call iteratorIndex(306372 call _getIterator chpl_toScan[306358])))))
      } const tmp[306361] "const" "temp"(306381 'move' tmp[306361](306380 'new'(306379 call SumReduceScanOp[376483](?)(eltType = chpl_eltType[306360])(_chpl_manager = unmanaged[220](?)))))(306383 return(306385 call chpl__scanIterator tmp[306361] chpl_toScan[306358]))
    } unknown cumulativeArr[306393](306391 call _cast real(64)[16](306389 call chpl__scan7 P[306350]))(306396 'end of statement')
    if(306433 call _cond_test(306406 call !(306405 call isSorted module=[255] Sort[268056] cumulativeArr[306393])))
    {(306431 'throw'(306410 'new'(_chpl_manager = _owned[30](?))(306430 call IllegalArgumentError[388889](?) "choice() prob array cannot contain negative values")))
    }
    if(306476 call _cond_test(306449 call <=(306447 call cumulativeArr[306393](306443 call .(306440 call . P[306350] c"_dom") c"last")) 0))
    {(306474 'throw'(306453 'new'(_chpl_manager = _owned[30](?))(306473 call IllegalArgumentError[388889](?) "choice() prob array requires a value greater than 0")))
    } unknown total[306491](306490 call cumulativeArr[306393](306486 call .(306483 call . P[306350] c"_dom") c"last"))(306494 'end of statement')(306497 call /= cumulativeArr[306393] total[306491])
    if(307048 call _cond_test(306503 call isNothingType sizeType[306236]))
    { unknown randNum[306512](306511 call(306505 call . stream[306228] c"getNext")(resultType = real(64)[16]))(306515 'end of statement') unknown tmp[306532] "temp"(306531 call binarySearch module=[255] Search[291329] cumulativeArr[306393] randNum[306512])(306539 call _check_tuple_var_decl tmp[306532] 2) unknown found[306517](306533 call tmp[306532] 0) unknown idx[306519](306536 call tmp[306532] 1)(306544 'end of statement')(306558 return(306557 call(306552 call .(306551 call(306546 call . X[306233] c"dim") 0) c"orderToIndex") idx[306519]))(365142 'referenced modules list' Search[291329])
    }
    { unknown m[306561] 1(306564 'end of statement')
      if(306578 call _cond_test(306569 call isDomainType sizeType[306236]))
      {(306575 call = m[306561](306572 call . size[306238] c"size"))
      } unknown numElements[306606](306603 IfExpr (306586 call isDomainType sizeType[306236]) then
      { scopeless m[306561]
      } else
      { scopeless(306600 IfExpr (306591 call isIntegralType sizeType[306236]) then
        { scopeless(306594 call _cast int(64)[13] size[306238])
        } else
        { scopeless(306599 call compilerError "choice() size type must be integral or tuple of ranges")
        } )
      } )(306609 'end of statement') unknown samples[306623](306621 call chpl__buildArrayRuntimeType(306619 call chpl__ensureDomainExpr(306615 call chpl_build_bounded_range 0(306613 call - numElements[306606] 1))) int(64)[13])(306626 'end of statement')
      if(307015 call _cond_test replace[306241])
      {
        { unknown _indexOfInterest[306686] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[306687] "expr temp" "temp"(306696 'move' _iterator[306687](306694 call _getIterator samples[306623]))
          Defer
          {
            {(306712 call _freeIterator _iterator[306687])
            }
          }
          { scopeless type(306701 'move' _indexOfInterest[306686](306698 call iteratorIndex _iterator[306687]))
          }
          ForLoop[306688]
          { unknown sample[306705] "index var" "insert auto destroy"(306707 'move' sample[306705] _indexOfInterest[306686])
            { unknown randNum[306638](306637 call(306631 call . stream[306228] c"getNext")(resultType = real(64)[16]))(306641 'end of statement') unknown tmp[306656] "temp"(306655 call binarySearch module=[255] Search[291329] cumulativeArr[306393] randNum[306638])(306663 call _check_tuple_var_decl tmp[306656] 2) unknown found[306643](306657 call tmp[306656] 0) unknown idx[306645](306660 call tmp[306656] 1)(306668 'end of statement')(306683 call = sample[306705](306682 call(306677 call .(306676 call(306671 call . X[306233] c"dim") 0) c"orderToIndex") idx[306645]))(365151 'referenced modules list' Search[291329])
            } label _continueLabel[306691] _indexOfInterest[306686] _iterator[306687]
          } label _breakLabel[306692]
        }
      }
      { unknown indicesChosen[306725](306723 call chpl__buildDomainRuntimeType defaultDist[94053] int(64)[13])(306728 'end of statement') unknown i[306731] 0(306734 'end of statement')
        { unknown tmp[306976] "temp"(307012 'move' tmp[306976](307001 call _cond_test(307003 call <(307005 call . indicesChosen[306725] c"size")(307009 call . samples[306623] c"size"))))
          WhileDo[306981]
          {
            {
              if(306815 call _cond_test(306750 call >(306746 call . indicesChosen[306725] c"size") 0))
              { function chpl__scan8[306755](arg chpl_toScan[306757]:_any[178](?)) : _unknown[51] "compiler nested function" "ReduceScanOp" "fn returns iterator"
                { unknown chpl_eltType[306759] "maybe type" "temp"
                  { scopeless type(306763 'move' chpl_eltType[306759](306765 'typeof'(306767 call chpl__initCopy(306769 call iteratorIndex(306771 call _getIterator chpl_toScan[306757])))))
                  } const tmp[306760] "const" "temp"(306780 'move' tmp[306760](306779 'new'(306778 call SumReduceScanOp[376483](?)(eltType = chpl_eltType[306759])(_chpl_manager = unmanaged[220](?)))))(306782 return(306784 call chpl__scanIterator tmp[306760] chpl_toScan[306757]))
                }(306792 call = cumulativeArr[306393](306790 call _cast real(64)[16](306788 call chpl__scan8 P[306350])))(306807 call = total[306491](306806 call cumulativeArr[306393](306802 call .(306799 call . P[306350] c"_dom") c"last")))(306812 call /= cumulativeArr[306393] total[306491])
              } unknown remainingSamples[306830](306828 call -(306821 call . samples[306623] c"size")(306825 call . indicesChosen[306725] c"size"))(306833 'end of statement')
              { unknown _indexOfInterest[306942] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[306943] "expr temp" "temp"(306952 'move' _iterator[306943](306950 call _getIterator(306860 call(306838 call . stream[306228] c"iterate")(306855 call chpl__buildDomainExpr(306852 call chpl_build_bounded_range 1(306850 call -(306843 call . samples[306623] c"size")(306847 call . indicesChosen[306725] c"size"))))(resultType = real(64)[16]))))
                Defer
                {
                  {(306969 call _freeIterator _iterator[306943])
                  }
                }
                { scopeless type(306958 'move' _indexOfInterest[306942](306955 call iteratorIndex _iterator[306943]))
                }
                ForLoop[306944]
                { unknown randNum[306962] "index var" "insert auto destroy"(306964 'move' randNum[306962] _indexOfInterest[306942])
                  { unknown tmp[306874] "temp"(306873 call binarySearch module=[255] Search[291329] cumulativeArr[306393] randNum[306962])(306881 call _check_tuple_var_decl tmp[306874] 2) unknown found[306861](306875 call tmp[306874] 0) unknown indexChosen[306863](306878 call tmp[306874] 1)(306886 'end of statement')
                    if(306930 call _cond_test(306895 call !(306894 call(306889 call . indicesChosen[306725] c"contains") indexChosen[306863])))
                    {(306899 call += indicesChosen[306725] indexChosen[306863])(306920 call =(306906 call samples[306623] i[306731])(306919 call(306914 call .(306913 call(306908 call . X[306233] c"dim") 0) c"orderToIndex") indexChosen[306863]))
                      {
                      }(306927 call += i[306731] 1)
                    }(306939 call =(306937 call P[306350] indexChosen[306863]) 0)(365165 'referenced modules list' Search[291329])
                  } label _continueLabel[306947] _indexOfInterest[306942] _iterator[306943]
                } label _breakLabel[306948]
              }
            } label _continueLabel[306979](306996 'move' tmp[306976](306985 call _cond_test(306987 call <(306989 call . indicesChosen[306725] c"size")(306993 call . samples[306623] c"size")))) tmp[306976]
          } label _breakLabel[306980]
        }
      }
      if(307043 call _cond_test(307022 call isIntegralType sizeType[306236]))
      {(307024 return samples[306623])
      }
      {
        if(307039 call _cond_test(307030 call isDomainType sizeType[306236]))
        {(307036 return(307035 call reshape samples[306623] size[306238]))
        }
      }
    }(355634 'used modules list'(306249 'import' Search[291329])(306253 'import' Sort[268056]))(365133 'referenced modules list' Sort[268056])
  } function RandomStreamInterface[307489](?).getNext[307078](arg _mt[307493]:_MT[238], arg this[307491]:RandomStreamInterface[307489](?)) : _unknown[51] "method" "primary method"
  {(307100 call compilerError "RandomStreamInterface.getNext called") unknown x[307104](407151 call . this[307491] c"eltType")(307107 'end of statement')(307109 return x[307104])
  }
  { scopeless type(407146 call . this[307491] c"eltType")
  } function RandomStreamInterface[307489](?).skipToNth[307120](arg _mt[307497]:_MT[238], arg this[307495]:RandomStreamInterface[307489](?), arg n[307117] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307141 call compilerError "RandomStreamInterface.skipToNth called")
  } function RandomStreamInterface[307489](?).getNth[307152](arg _mt[307501]:_MT[238], arg this[307499]:RandomStreamInterface[307489](?), arg n[307149] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307174 call compilerError "RandomStreamInterface.getNth called")
  }
  { scopeless type(407159 call . this[307499] c"eltType")
  } function RandomStreamInterface[307489](?).fillRandom[307189](arg _mt[307505]:_MT[238], arg this[307503]:RandomStreamInterface[307489](?), arg arr[307186] :(307183 call chpl__buildArrayRuntimeType nil[44](407164 call . this[307503] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {(307210 call compilerError "RandomStreamInterface.fillRandom called")
  } function RandomStreamInterface[307489](?).fillRandom[307223](arg _mt[307509]:_MT[238], arg this[307507]:RandomStreamInterface[307489](?), arg arr[307220] :(307217 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(307228 call compilerError "RandomStreamInterface.fillRandom called")
  } function RandomStreamInterface[307489](?).choice[307241](arg _mt[307513]:_MT[238], arg this[307511]:RandomStreamInterface[307489](?), arg x[307238] :(307235 call chpl__buildArrayRuntimeType nil[44]), arg size[307246] : unknown sizeType[307243] = none[57], arg replace[307251] = 1, arg prob[307257] : unknown probType[307254] = none[57]) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307280 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307489](?).choice[307295](arg _mt[307517]:_MT[238], arg this[307515]:RandomStreamInterface[307489](?), arg x[307292] :(307291 call range[64319](?)(stridable = ?[260])), arg size[307300] : unknown sizeType[307297] = none[57], arg replace[307305] = 1, arg prob[307311] : unknown probType[307308] = none[57]) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307318 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307489](?).choice[307329](arg _mt[307521]:_MT[238], arg this[307519]:RandomStreamInterface[307489](?), arg x[307326] : _domain[125908](?), arg size[307334] : unknown sizeType[307331] = none[57], arg replace[307339] = 1, arg prob[307345] : unknown probType[307342] = none[57]) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307352 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307489](?).iterate[307363](arg _mt[307525]:_MT[238], arg this[307523]:RandomStreamInterface[307489](?), arg D[307360] : _domain[125908](?), arg resultType[307366]:_any[178](?) =(407172 call . this[307523] c"eltType")) : _unknown[51] "method" "primary method" "no return value for void"
  {(307388 call compilerError "RandomStreamInterface.iterate called")
  } function RandomStreamInterface[307489](?).writeThis[307397](arg _mt[307529]:_MT[238], arg this[307527]:RandomStreamInterface[307489](?), arg f[307395]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(307417 call <~> f[307395] "RandomStreamInterface(eltType=")(307426 call <~> f[307395](307424 call _cast string[26](407179 call . this[307527] c"eltType")))(307447 call <~> f[307395] ", parSafe=")(307452 call <~> f[307395](407186 call . this[307527] c"parSafe"))(307473 call <~> f[307395] ", seed=")(307478 call <~> f[307395](407193 call . this[307527] c"seed"))(307483 call <~> f[307395] ")")
  } type RandomStreamInterface[307489](?) val super[355885]:object[22] "super class" unknown eltType[307059] "type variable"(307058 call real(64)[16] 64) unknown parSafe[307064] "param" 1 bool[10] const seed[307072] "const"(307071 call int(64)[13] 64)(355628 'used modules list'(353171 'use' ChapelStandard[20267])(304747 'use' RandomSupport[307532])(304751 'use' NPBRandom[314480])(304754 'use' PCGRandom[307642])(304762 'import' Set[331407].{set}))
}