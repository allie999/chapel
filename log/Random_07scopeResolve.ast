AST dump for Random after pass scopeResolve.
Module use list: ChapelStandard RandomSupport NPBRandom PCGRandom Set Search Sort 

{ type RNG[304704] def PCG[304699]:RNG[304704] 1 def NPB[304702]:RNG[304704] 2 unknown defaultRNG[304713] "param" PCG[304699](304716 'end of statement') unknown RandomStream[304729] "type variable"(304726 IfExpr (304722 call == defaultRNG[304713] PCG[304699]) then
  { scopeless PCGRandomStream[406915](?)
  } else
  { scopeless NPBRandomStream[406919](?)
  } ) function isSupportedNumericType[304736](arg t[304734]:_any[178](?)) param : _unknown[51] "private"
  {(304748 return(304746 call ||(304741 call isNumericType t[304734])(304745 call isBoolType t[304734])))
  } function fillRandom[304761](arg arr[304758] :(304755 call chpl__buildArrayRuntimeType nil[44]), arg seed[304773] :(304766 call int(64)[13] 64) =(304770 call . SeedGenerator[307561] c"oddCurrentTime"), param arg algorithm[304778] = defaultRNG[304713]) : _unknown[51] "no return value for void"
  { unknown randNums[304802](304801 call createRandomStream(seed = seed[304773])(eltType =(304793 call . arr[304758] c"eltType"))(parSafe = 0)(algorithm = algorithm[304778]))(304805 'end of statement')(304815 call(304810 call . randNums[304802] c"fillRandom") arr[304758])
  }
  {(304787 call isSupportedNumericType(304783 call . arr[304758] c"eltType"))
  } function fillRandom[304828](arg arr[304825] :(304822 call chpl__buildArrayRuntimeType nil[44]), arg seed[304838] :(304833 call int(64)[13] 64) =(304835 call . SeedGenerator[307561] c"oddCurrentTime"), param arg algorithm[304843] = defaultRNG[304713]) : _unknown[51] "no doc" "no return value for void"
  {(304865 call compilerError "Random.fillRandom is only defined for numeric arrays")
  } function shuffle[304878](arg arr[304875] :(304872 call chpl__buildArrayRuntimeType nil[44]), arg seed[304888] :(304883 call int(64)[13] 64) =(304885 call . SeedGenerator[307561] c"oddCurrentTime"), param arg algorithm[304896] = PCG[304699]) : _unknown[51] "no return value for void"
  { unknown randNums[304916](304915 call createRandomStream(seed = seed[304888])(eltType =(304907 call .(304904 call . arr[304875] c"_dom") c"idxType"))(parSafe = 0)(algorithm = algorithm[304896]))(304919 'end of statement')(304927 call(304922 call . randNums[304916] c"shuffle") arr[304875])
  } function permutation[304939](arg arr[304936] :(304933 call chpl__buildArrayRuntimeType nil[44]), arg seed[304949] :(304944 call int(64)[13] 64) =(304946 call . SeedGenerator[307561] c"oddCurrentTime"), param arg algorithm[304957] = PCG[304699]) : _unknown[51] "no return value for void"
  { unknown randNums[304974](304973 call createRandomStream(seed = seed[304949])(eltType =(304965 call . arr[304936] c"eltType"))(parSafe = 0)(algorithm = algorithm[304957]))(304977 'end of statement')(304987 call(304982 call . randNums[304974] c"permutation") arr[304936])
  } function makeRandomStream[304995](arg eltType[304993]:_any[178](?), arg seed[305005] :(305000 call int(64)[13] 64) =(305002 call . SeedGenerator[307561] c"oddCurrentTime"), param arg parSafe[305011] : bool[10] = 1, param arg algorithm[305016] = defaultRNG[304713]) : _unknown[51] "no doc"
  {(305057 call compilerWarning(305054 call + "makeRandomStream is deprecated - " "please use createRandomStream instead"))(305067 return(305066 call createRandomStream eltType[304993] seed[305005] parSafe[305011] algorithm[305016]))
  } function createRandomStream[305075](arg eltType[305073]:_any[178](?), arg seed[305085] :(305080 call int(64)[13] 64) =(305082 call . SeedGenerator[307561] c"oddCurrentTime"), param arg parSafe[305091] : bool[10] = 1, param arg algorithm[305096] = defaultRNG[304713]) : _unknown[51]
  {
    if(305170 call _cond_test(305104 call == algorithm[305096] PCG[304699]))
    {(305118 return(305108 'new'(_chpl_manager = _owned[30](?))(305117 call PCGRandomStream[406915](?)(seed = seed[305085])(parSafe = parSafe[305091])(eltType = eltType[305073]))))
    }
    {
      if(305164 call _cond_test(305127 call == algorithm[305096] NPB[304702]))
      {(305141 return(305131 'new'(_chpl_manager = _owned[30](?))(305140 call NPBRandomStream[406919](?)(seed = seed[305085])(parSafe = parSafe[305091])(eltType = eltType[305073]))))
      }
      {(305162 call compilerError "Unknown random number generator")
      }
    }
  } function _choice[305183](arg stream[305181]:_any[178](?), arg X[305186] : _domain[125908](?), arg size[305191] : unknown sizeType[305189], arg replace[305195] : bool[10], arg prob[305200] : unknown probType[305198]) : _unknown[51] throws "no doc"
  {
    if(305232 call _cond_test(305208 call !=(305204 call . X[305186] c"rank") 1))
    {(305229 call compilerError "choice() argument x must be 1 dimensional")
    }
    if(305270 call _cond_test(305242 call <(305238 call . X[305186] c"size") 1))
    {(305267 'throw'(305246 'new'(_chpl_manager = _owned[30](?))(305266 call IllegalArgumentError[388821](?) "choice() x.size must be greater than 0")))
    }
    if(305430 call _cond_test(305278 call !(305277 call isNothingType probType[305198])))
    {
      if(305307 call _cond_test(305284 call !(305283 call isArrayType probType[305198])))
      {(305305 call compilerError "choice() prob must be an array")
      }
      if(305352 call _cond_test(305329 call !(305327 call ||(305319 call isIntegralType(305315 call . prob[305200] c"eltType"))(305326 call isRealType(305322 call . prob[305200] c"eltType")))))
      {(305350 call compilerError "choice() prob.eltType must be real or integral")
      }
      if(305386 call _cond_test(305362 call !=(305358 call . prob[305200] c"rank") 1))
      {(305383 call compilerError "choice() prob array must be 1 dimensional")
      }
      if(305426 call _cond_test(305398 call !=(305391 call . prob[305200] c"size")(305395 call . X[305186] c"size")))
      {(305423 'throw'(305402 'new'(_chpl_manager = _owned[30](?))(305422 call IllegalArgumentError[388821](?) "choice() x.size must be equal to prob.size")))
      }
    }
    if(305624 call _cond_test(305438 call !(305437 call isNothingType sizeType[305189])))
    {
      if(305618 call _cond_test(305443 call isIntegralType sizeType[305189]))
      {
        if(305473 call _cond_test(305446 call <= size[305191] 0))
        {(305471 'throw'(305450 'new'(_chpl_manager = _owned[30](?))(305470 call IllegalArgumentError[388821](?) "choice() size must be greater than 0")))
        }
        if(305516 call _cond_test(305489 call &&(305480 call ! replace[305195])(305487 call > size[305191](305484 call . X[305186] c"size"))))
        {(305514 'throw'(305493 'new'(_chpl_manager = _owned[30](?))(305513 call IllegalArgumentError[388821](?) "choice() size must be smaller than x.size when replace=false")))
        }
      }
      {
        if(305614 call _cond_test(305524 call isDomainType sizeType[305189]))
        {
          if(305557 call _cond_test(305530 call <=(305526 call . size[305191] c"size") 0))
          {(305555 'throw'(305534 'new'(_chpl_manager = _owned[30](?))(305554 call IllegalArgumentError[388821](?) "choice() size domain can not be empty")))
          }
          if(305587 call _cond_test(305576 call &&(305564 call ! replace[305195])(305574 call >(305567 call . size[305191] c"size")(305571 call . X[305186] c"size"))))
          {(305585 'throw'(305580 'new'(_chpl_manager = _owned[30](?))(305584 call IllegalArgumentError[388821](?) "choice() size must be smaller than x.size when replace=false")))
          }
        }
        {(305611 call compilerError "choice() size must be integral or domain")
        }
      }
    }
    if(305653 call _cond_test(305631 call isNothingType probType[305198]))
    {(305639 return(305638 call _choiceUniform stream[305181] X[305186] size[305191] replace[305195]))
    }
    {(305650 return(305649 call _choiceProbabilities stream[305181] X[305186] size[305191] replace[305195] prob[305200]))
    }
  } function _choiceUniform[305663](arg stream[305661]:_any[178](?), arg X[305666] : _domain[125908](?), arg size[305671] : unknown sizeType[305669], arg replace[305675] : bool[10]) : _unknown[51] throws "no doc"
  { const low[305682] "const"(305679 call . X[305666] c"alignedLow") const stride[305692] "const"(305691 call abs(305687 call . X[305666] c"stride"))(305695 'end of statement')
    if(306153 call _cond_test(305700 call isNothingType sizeType[305669]))
    { unknown randVal[305717](305716 call(305702 call . stream[305661] c"getNext")(resultType = int(64)[13]) 0(305714 call -(305710 call . X[305666] c"size") 1))(305720 'end of statement') unknown randIdx[305735](305734 call(305729 call .(305728 call(305723 call . X[305666] c"dim") 0) c"orderToIndex") randVal[305717])(305738 'end of statement')(305740 return randIdx[305735])
    }
    { unknown m[305743] 1(305746 'end of statement')
      if(305760 call _cond_test(305751 call isDomainType sizeType[305669]))
      {(305757 call = m[305743](305754 call . size[305671] c"size"))
      } unknown numElements[305804](305801 IfExpr (305768 call isDomainType sizeType[305669]) then
      { scopeless m[305743]
      } else
      { scopeless(305798 IfExpr (305773 call isIntegralType sizeType[305669]) then
        { scopeless(305776 call _cast int(64)[13] size[305671])
        } else
        { scopeless(305797 call compilerError "choice() size type must be integral or tuple of ranges")
        } )
      } )(305807 'end of statement') unknown samples[305821](305819 call chpl__buildArrayRuntimeType(305817 call chpl__ensureDomainExpr(305813 call chpl_build_bounded_range 0(305811 call - numElements[305804] 1))) int(64)[13])(305824 'end of statement')
      if(306120 call _cond_test replace[305675])
      {
        { unknown _indexOfInterest[305871] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[305872] "expr temp" "temp"(305881 'move' _iterator[305872](305879 call _getIterator samples[305821]))
          Defer
          {
            {(305897 call _freeIterator _iterator[305872])
            }
          }
          { scopeless type(305886 'move' _indexOfInterest[305871](305883 call iteratorIndex _iterator[305872]))
          }
          ForLoop[305873]
          { unknown sample[305890] "index var" "insert auto destroy"(305892 'move' sample[305890] _indexOfInterest[305871])
            { unknown randVal[305844](305843 call(305829 call . stream[305661] c"getNext")(resultType = int(64)[13]) 0(305841 call -(305837 call . X[305666] c"size") 1))(305847 'end of statement') unknown randIdx[305862](305861 call(305856 call .(305855 call(305850 call . X[305666] c"dim") 0) c"orderToIndex") randVal[305844])(305865 'end of statement')(305868 call = sample[305890] randIdx[305862])
            } label _continueLabel[305876] _indexOfInterest[305871] _iterator[305872]
          } label _breakLabel[305877]
        }
      }
      {
        if(306115 call _cond_test(305913 call < numElements[305804](305912 call log2(305908 call . X[305666] c"size"))))
        { unknown indices[305919](305918 call set[333199](?) int(64)[13])(305922 'end of statement') unknown i[305926] 0 int(64)[13](305929 'end of statement')
          { unknown tmp[306007] "temp"(306031 'move' tmp[306007](306026 call _cond_test(306028 call < i[305926] numElements[305804])))
            WhileDo[306012]
            {
              { unknown randVal[305950](305949 call(305935 call . stream[305661] c"getNext")(resultType = int(64)[13]) 0(305947 call -(305943 call . X[305666] c"size") 1))(305953 'end of statement')
                if(306003 call _cond_test(305962 call !(305961 call(305956 call . indices[305919] c"contains") randVal[305950])))
                { unknown randIdx[305977](305976 call(305971 call .(305970 call(305965 call . X[305666] c"dim") 0) c"orderToIndex") randVal[305950])(305980 'end of statement')(305987 call =(305985 call samples[305821] i[305926]) randIdx[305977])(305996 call(305991 call . indices[305919] c"add") randVal[305950])(306000 call += i[305926] 1)
                }
              } label _continueLabel[306010](306021 'move' tmp[306007](306016 call _cond_test(306018 call < i[305926] numElements[305804]))) tmp[306007]
            } label _breakLabel[306011]
          }
        }
        { unknown indices[306042] X[305666](306039 call chpl__buildArrayRuntimeType(306037 call chpl__ensureDomainExpr X[305666]) int(64)[13])(306045 'end of statement')(306050 call shuffle indices[306042])
          { unknown _indexOfInterest[306081] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[306082] "expr temp" "temp"(306091 'move' _iterator[306082](306089 call _getIterator(306054 call . samples[305821] c"_dom")))
            Defer
            {
              {(306108 call _freeIterator _iterator[306082])
              }
            }
            { scopeless type(306097 'move' _indexOfInterest[306081](306094 call iteratorIndex _iterator[306082]))
            }
            ForLoop[306083]
            { unknown i[306101] "index var" "insert auto destroy"(306103 'move' i[306101] _indexOfInterest[306081])
              {(306077 call =(306060 call samples[305821] i[306101])(306076 call indices[306042](306074 call(306069 call .(306068 call(306063 call . X[305666] c"dim") 0) c"orderToIndex") i[306101])))
              } label _continueLabel[306086] _indexOfInterest[306081] _iterator[306082]
            } label _breakLabel[306087]
          }
        }
      }
      if(306148 call _cond_test(306127 call isIntegralType sizeType[305669]))
      {(306129 return samples[305821])
      }
      {
        if(306144 call _cond_test(306135 call isDomainType sizeType[305669]))
        {(306141 return(306140 call reshape samples[305821] size[305671]))
        }
      }
    }
  } function _choiceProbabilities[306163](arg stream[306161]:_any[178](?), arg X[306166] : _domain[125908](?), arg size[306171] : unknown sizeType[306169], arg replace[306174]:_any[178](?), arg prob[306178] : unknown probType[306176]) : _unknown[51] throws "no doc"
  {
    if(306208 call _cond_test(306196 call !=(306189 call . prob[306178] c"size")(306193 call . X[306166] c"size")))
    {(306205 'throw'(306200 'new'(_chpl_manager = _owned[30](?))(306204 call IllegalArgumentError[388821](?) "choice() x.size must be equal to prob.size")))
    }
    if(306244 call _cond_test(306217 call ==(306213 call . prob[306178] c"size") 0))
    {(306242 'throw'(306221 'new'(_chpl_manager = _owned[30](?))(306241 call IllegalArgumentError[388821](?) "choice() prob array cannot be empty")))
    } const low[306253] "const"(306250 call . X[306166] c"alignedLow") const stride[306263] "const"(306262 call abs(306258 call . X[306166] c"stride"))(306266 'end of statement') unknown P[306283] "ref var"(306282 call(306268 call . prob[306178] c"reindex")(306279 call chpl_build_bounded_range 0(306277 call -(306273 call . X[306166] c"size") 1)))(306286 'end of statement') function chpl__scan6[306289](arg chpl_toScan[306291]:_any[178](?)) : _unknown[51] "compiler nested function" "ReduceScanOp" "fn returns iterator"
    { unknown chpl_eltType[306293] "maybe type" "temp"
      { scopeless type(306297 'move' chpl_eltType[306293](306299 'typeof'(306301 call chpl__initCopy(306303 call iteratorIndex(306305 call _getIterator chpl_toScan[306291])))))
      } const tmp[306294] "const" "temp"(306314 'move' tmp[306294](306313 'new'(306312 call SumReduceScanOp[376415](?)(eltType = chpl_eltType[306293])(_chpl_manager = unmanaged[220](?)))))(306316 return(306318 call chpl__scanIterator tmp[306294] chpl_toScan[306291]))
    } unknown cumulativeArr[306326](306324 call _cast real(64)[16](306322 call chpl__scan6 P[306283]))(306329 'end of statement')
    if(306366 call _cond_test(306339 call !(306338 call isSorted module=[255] Sort[267989] cumulativeArr[306326])))
    {(306364 'throw'(306343 'new'(_chpl_manager = _owned[30](?))(306363 call IllegalArgumentError[388821](?) "choice() prob array cannot contain negative values")))
    }
    if(306409 call _cond_test(306382 call <=(306380 call cumulativeArr[306326](306376 call .(306373 call . P[306283] c"_dom") c"last")) 0))
    {(306407 'throw'(306386 'new'(_chpl_manager = _owned[30](?))(306406 call IllegalArgumentError[388821](?) "choice() prob array requires a value greater than 0")))
    } unknown total[306424](306423 call cumulativeArr[306326](306419 call .(306416 call . P[306283] c"_dom") c"last"))(306427 'end of statement')(306430 call /= cumulativeArr[306326] total[306424])
    if(306981 call _cond_test(306436 call isNothingType sizeType[306169]))
    { unknown randNum[306445](306444 call(306438 call . stream[306161] c"getNext")(resultType = real(64)[16]))(306448 'end of statement') unknown tmp[306465] "temp"(306464 call binarySearch module=[255] Search[291262] cumulativeArr[306326] randNum[306445])(306472 call _check_tuple_var_decl tmp[306465] 2) unknown found[306450](306466 call tmp[306465] 0) unknown idx[306452](306469 call tmp[306465] 1)(306477 'end of statement')(306491 return(306490 call(306485 call .(306484 call(306479 call . X[306166] c"dim") 0) c"orderToIndex") idx[306452]))(365074 'referenced modules list' Search[291262])
    }
    { unknown m[306494] 1(306497 'end of statement')
      if(306511 call _cond_test(306502 call isDomainType sizeType[306169]))
      {(306508 call = m[306494](306505 call . size[306171] c"size"))
      } unknown numElements[306539](306536 IfExpr (306519 call isDomainType sizeType[306169]) then
      { scopeless m[306494]
      } else
      { scopeless(306533 IfExpr (306524 call isIntegralType sizeType[306169]) then
        { scopeless(306527 call _cast int(64)[13] size[306171])
        } else
        { scopeless(306532 call compilerError "choice() size type must be integral or tuple of ranges")
        } )
      } )(306542 'end of statement') unknown samples[306556](306554 call chpl__buildArrayRuntimeType(306552 call chpl__ensureDomainExpr(306548 call chpl_build_bounded_range 0(306546 call - numElements[306539] 1))) int(64)[13])(306559 'end of statement')
      if(306948 call _cond_test replace[306174])
      {
        { unknown _indexOfInterest[306619] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[306620] "expr temp" "temp"(306629 'move' _iterator[306620](306627 call _getIterator samples[306556]))
          Defer
          {
            {(306645 call _freeIterator _iterator[306620])
            }
          }
          { scopeless type(306634 'move' _indexOfInterest[306619](306631 call iteratorIndex _iterator[306620]))
          }
          ForLoop[306621]
          { unknown sample[306638] "index var" "insert auto destroy"(306640 'move' sample[306638] _indexOfInterest[306619])
            { unknown randNum[306571](306570 call(306564 call . stream[306161] c"getNext")(resultType = real(64)[16]))(306574 'end of statement') unknown tmp[306589] "temp"(306588 call binarySearch module=[255] Search[291262] cumulativeArr[306326] randNum[306571])(306596 call _check_tuple_var_decl tmp[306589] 2) unknown found[306576](306590 call tmp[306589] 0) unknown idx[306578](306593 call tmp[306589] 1)(306601 'end of statement')(306616 call = sample[306638](306615 call(306610 call .(306609 call(306604 call . X[306166] c"dim") 0) c"orderToIndex") idx[306578]))(365083 'referenced modules list' Search[291262])
            } label _continueLabel[306624] _indexOfInterest[306619] _iterator[306620]
          } label _breakLabel[306625]
        }
      }
      { unknown indicesChosen[306658](306656 call chpl__buildDomainRuntimeType defaultDist[94053] int(64)[13])(306661 'end of statement') unknown i[306664] 0(306667 'end of statement')
        { unknown tmp[306909] "temp"(306945 'move' tmp[306909](306934 call _cond_test(306936 call <(306938 call . indicesChosen[306658] c"size")(306942 call . samples[306556] c"size"))))
          WhileDo[306914]
          {
            {
              if(306748 call _cond_test(306683 call >(306679 call . indicesChosen[306658] c"size") 0))
              { function chpl__scan7[306688](arg chpl_toScan[306690]:_any[178](?)) : _unknown[51] "compiler nested function" "ReduceScanOp" "fn returns iterator"
                { unknown chpl_eltType[306692] "maybe type" "temp"
                  { scopeless type(306696 'move' chpl_eltType[306692](306698 'typeof'(306700 call chpl__initCopy(306702 call iteratorIndex(306704 call _getIterator chpl_toScan[306690])))))
                  } const tmp[306693] "const" "temp"(306713 'move' tmp[306693](306712 'new'(306711 call SumReduceScanOp[376415](?)(eltType = chpl_eltType[306692])(_chpl_manager = unmanaged[220](?)))))(306715 return(306717 call chpl__scanIterator tmp[306693] chpl_toScan[306690]))
                }(306725 call = cumulativeArr[306326](306723 call _cast real(64)[16](306721 call chpl__scan7 P[306283])))(306740 call = total[306424](306739 call cumulativeArr[306326](306735 call .(306732 call . P[306283] c"_dom") c"last")))(306745 call /= cumulativeArr[306326] total[306424])
              } unknown remainingSamples[306763](306761 call -(306754 call . samples[306556] c"size")(306758 call . indicesChosen[306658] c"size"))(306766 'end of statement')
              { unknown _indexOfInterest[306875] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[306876] "expr temp" "temp"(306885 'move' _iterator[306876](306883 call _getIterator(306793 call(306771 call . stream[306161] c"iterate")(306788 call chpl__buildDomainExpr(306785 call chpl_build_bounded_range 1(306783 call -(306776 call . samples[306556] c"size")(306780 call . indicesChosen[306658] c"size"))))(resultType = real(64)[16]))))
                Defer
                {
                  {(306902 call _freeIterator _iterator[306876])
                  }
                }
                { scopeless type(306891 'move' _indexOfInterest[306875](306888 call iteratorIndex _iterator[306876]))
                }
                ForLoop[306877]
                { unknown randNum[306895] "index var" "insert auto destroy"(306897 'move' randNum[306895] _indexOfInterest[306875])
                  { unknown tmp[306807] "temp"(306806 call binarySearch module=[255] Search[291262] cumulativeArr[306326] randNum[306895])(306814 call _check_tuple_var_decl tmp[306807] 2) unknown found[306794](306808 call tmp[306807] 0) unknown indexChosen[306796](306811 call tmp[306807] 1)(306819 'end of statement')
                    if(306863 call _cond_test(306828 call !(306827 call(306822 call . indicesChosen[306658] c"contains") indexChosen[306796])))
                    {(306832 call += indicesChosen[306658] indexChosen[306796])(306853 call =(306839 call samples[306556] i[306664])(306852 call(306847 call .(306846 call(306841 call . X[306166] c"dim") 0) c"orderToIndex") indexChosen[306796]))
                      {
                      }(306860 call += i[306664] 1)
                    }(306872 call =(306870 call P[306283] indexChosen[306796]) 0)(365097 'referenced modules list' Search[291262])
                  } label _continueLabel[306880] _indexOfInterest[306875] _iterator[306876]
                } label _breakLabel[306881]
              }
            } label _continueLabel[306912](306929 'move' tmp[306909](306918 call _cond_test(306920 call <(306922 call . indicesChosen[306658] c"size")(306926 call . samples[306556] c"size")))) tmp[306909]
          } label _breakLabel[306913]
        }
      }
      if(306976 call _cond_test(306955 call isIntegralType sizeType[306169]))
      {(306957 return samples[306556])
      }
      {
        if(306972 call _cond_test(306963 call isDomainType sizeType[306169]))
        {(306969 return(306968 call reshape samples[306556] size[306171]))
        }
      }
    }(355566 'used modules list'(306182 'import' Search[291262])(306186 'import' Sort[267989]))(365065 'referenced modules list' Sort[267989])
  } function RandomStreamInterface[307422](?).getNext[307011](arg _mt[307426]:_MT[238], arg this[307424]:RandomStreamInterface[307422](?)) : _unknown[51] "method" "primary method"
  {(307033 call compilerError "RandomStreamInterface.getNext called") unknown x[307037](407078 call . this[307424] c"eltType")(307040 'end of statement')(307042 return x[307037])
  }
  { scopeless type(407073 call . this[307424] c"eltType")
  } function RandomStreamInterface[307422](?).skipToNth[307053](arg _mt[307430]:_MT[238], arg this[307428]:RandomStreamInterface[307422](?), arg n[307050] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307074 call compilerError "RandomStreamInterface.skipToNth called")
  } function RandomStreamInterface[307422](?).getNth[307085](arg _mt[307434]:_MT[238], arg this[307432]:RandomStreamInterface[307422](?), arg n[307082] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307107 call compilerError "RandomStreamInterface.getNth called")
  }
  { scopeless type(407086 call . this[307432] c"eltType")
  } function RandomStreamInterface[307422](?).fillRandom[307122](arg _mt[307438]:_MT[238], arg this[307436]:RandomStreamInterface[307422](?), arg arr[307119] :(307116 call chpl__buildArrayRuntimeType nil[44](407091 call . this[307436] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {(307143 call compilerError "RandomStreamInterface.fillRandom called")
  } function RandomStreamInterface[307422](?).fillRandom[307156](arg _mt[307442]:_MT[238], arg this[307440]:RandomStreamInterface[307422](?), arg arr[307153] :(307150 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(307161 call compilerError "RandomStreamInterface.fillRandom called")
  } function RandomStreamInterface[307422](?).choice[307174](arg _mt[307446]:_MT[238], arg this[307444]:RandomStreamInterface[307422](?), arg x[307171] :(307168 call chpl__buildArrayRuntimeType nil[44]), arg size[307179] : unknown sizeType[307176] = none[57], arg replace[307184] = 1, arg prob[307190] : unknown probType[307187] = none[57]) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307213 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307422](?).choice[307228](arg _mt[307450]:_MT[238], arg this[307448]:RandomStreamInterface[307422](?), arg x[307225] :(307224 call range[64319](?)(stridable = ?[260])), arg size[307233] : unknown sizeType[307230] = none[57], arg replace[307238] = 1, arg prob[307244] : unknown probType[307241] = none[57]) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307251 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307422](?).choice[307262](arg _mt[307454]:_MT[238], arg this[307452]:RandomStreamInterface[307422](?), arg x[307259] : _domain[125908](?), arg size[307267] : unknown sizeType[307264] = none[57], arg replace[307272] = 1, arg prob[307278] : unknown probType[307275] = none[57]) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307285 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307422](?).iterate[307296](arg _mt[307458]:_MT[238], arg this[307456]:RandomStreamInterface[307422](?), arg D[307293] : _domain[125908](?), arg resultType[307299]:_any[178](?) =(407099 call . this[307456] c"eltType")) : _unknown[51] "method" "primary method" "no return value for void"
  {(307321 call compilerError "RandomStreamInterface.iterate called")
  } function RandomStreamInterface[307422](?).writeThis[307330](arg _mt[307462]:_MT[238], arg this[307460]:RandomStreamInterface[307422](?), arg f[307328]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(307350 call <~> f[307328] "RandomStreamInterface(eltType=")(307359 call <~> f[307328](307357 call _cast string[26](407106 call . this[307460] c"eltType")))(307380 call <~> f[307328] ", parSafe=")(307385 call <~> f[307328](407113 call . this[307460] c"parSafe"))(307406 call <~> f[307328] ", seed=")(307411 call <~> f[307328](407120 call . this[307460] c"seed"))(307416 call <~> f[307328] ")")
  } type RandomStreamInterface[307422](?) val super[355817]:object[22] "super class" unknown eltType[306992] "type variable"(306991 call real(64)[16] 64) unknown parSafe[306997] "param" 1 bool[10] const seed[307005] "const"(307004 call int(64)[13] 64)(355560 'used modules list'(353104 'use' ChapelStandard[20267])(304680 'use' RandomSupport[307465])(304684 'use' NPBRandom[314413])(304687 'use' PCGRandom[307575])(304695 'import' Set[331340].{set}))
}