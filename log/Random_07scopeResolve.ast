AST dump for Random after pass scopeResolve.
Module use list: ChapelStandard RandomSupport NPBRandom PCGRandom Set Search Sort 

{ type RNG[304675] def PCG[304670]:RNG[304675] 1 def NPB[304673]:RNG[304675] 2 unknown defaultRNG[304684] "param" PCG[304670](304687 'end of statement') unknown RandomStream[304700] "type variable"(304697 IfExpr (304693 call == defaultRNG[304684] PCG[304670]) then
  { scopeless PCGRandomStream[406872](?)
  } else
  { scopeless NPBRandomStream[406876](?)
  } ) function isSupportedNumericType[304707](arg t[304705]:_any[178](?)) param : _unknown[51] "private"
  {(304719 return(304717 call ||(304712 call isNumericType t[304705])(304716 call isBoolType t[304705])))
  } function fillRandom[304732](arg arr[304729] :(304726 call chpl__buildArrayRuntimeType nil[44]), arg seed[304744] :(304737 call int(64)[13] 64) =(304741 call . SeedGenerator[307532] c"oddCurrentTime"), param arg algorithm[304749] = defaultRNG[304684]) : _unknown[51] "no return value for void"
  { unknown randNums[304773](304772 call createRandomStream(seed = seed[304744])(eltType =(304764 call . arr[304729] c"eltType"))(parSafe = 0)(algorithm = algorithm[304749]))(304776 'end of statement')(304786 call(304781 call . randNums[304773] c"fillRandom") arr[304729])
  }
  {(304758 call isSupportedNumericType(304754 call . arr[304729] c"eltType"))
  } function fillRandom[304799](arg arr[304796] :(304793 call chpl__buildArrayRuntimeType nil[44]), arg seed[304809] :(304804 call int(64)[13] 64) =(304806 call . SeedGenerator[307532] c"oddCurrentTime"), param arg algorithm[304814] = defaultRNG[304684]) : _unknown[51] "no doc" "no return value for void"
  {(304836 call compilerError "Random.fillRandom is only defined for numeric arrays")
  } function shuffle[304849](arg arr[304846] :(304843 call chpl__buildArrayRuntimeType nil[44]), arg seed[304859] :(304854 call int(64)[13] 64) =(304856 call . SeedGenerator[307532] c"oddCurrentTime"), param arg algorithm[304867] = PCG[304670]) : _unknown[51] "no return value for void"
  { unknown randNums[304887](304886 call createRandomStream(seed = seed[304859])(eltType =(304878 call .(304875 call . arr[304846] c"_dom") c"idxType"))(parSafe = 0)(algorithm = algorithm[304867]))(304890 'end of statement')(304898 call(304893 call . randNums[304887] c"shuffle") arr[304846])
  } function permutation[304910](arg arr[304907] :(304904 call chpl__buildArrayRuntimeType nil[44]), arg seed[304920] :(304915 call int(64)[13] 64) =(304917 call . SeedGenerator[307532] c"oddCurrentTime"), param arg algorithm[304928] = PCG[304670]) : _unknown[51] "no return value for void"
  { unknown randNums[304945](304944 call createRandomStream(seed = seed[304920])(eltType =(304936 call . arr[304907] c"eltType"))(parSafe = 0)(algorithm = algorithm[304928]))(304948 'end of statement')(304958 call(304953 call . randNums[304945] c"permutation") arr[304907])
  } function makeRandomStream[304966](arg eltType[304964]:_any[178](?), arg seed[304976] :(304971 call int(64)[13] 64) =(304973 call . SeedGenerator[307532] c"oddCurrentTime"), param arg parSafe[304982] : bool[10] = 1, param arg algorithm[304987] = defaultRNG[304684]) : _unknown[51] "no doc"
  {(305028 call compilerWarning(305025 call + "makeRandomStream is deprecated - " "please use createRandomStream instead"))(305038 return(305037 call createRandomStream eltType[304964] seed[304976] parSafe[304982] algorithm[304987]))
  } function createRandomStream[305046](arg eltType[305044]:_any[178](?), arg seed[305056] :(305051 call int(64)[13] 64) =(305053 call . SeedGenerator[307532] c"oddCurrentTime"), param arg parSafe[305062] : bool[10] = 1, param arg algorithm[305067] = defaultRNG[304684]) : _unknown[51]
  {
    if(305141 call _cond_test(305075 call == algorithm[305067] PCG[304670]))
    {(305089 return(305079 'new'(_chpl_manager = _owned[30](?))(305088 call PCGRandomStream[406872](?)(seed = seed[305056])(parSafe = parSafe[305062])(eltType = eltType[305044]))))
    }
    {
      if(305135 call _cond_test(305098 call == algorithm[305067] NPB[304673]))
      {(305112 return(305102 'new'(_chpl_manager = _owned[30](?))(305111 call NPBRandomStream[406876](?)(seed = seed[305056])(parSafe = parSafe[305062])(eltType = eltType[305044]))))
      }
      {(305133 call compilerError "Unknown random number generator")
      }
    }
  } function _choice[305154](arg stream[305152]:_any[178](?), arg X[305157] : _domain[125902](?), arg size[305162] : unknown sizeType[305160], arg replace[305166] : bool[10], arg prob[305171] : unknown probType[305169]) : _unknown[51] throws "no doc"
  {
    if(305203 call _cond_test(305179 call !=(305175 call . X[305157] c"rank") 1))
    {(305200 call compilerError "choice() argument x must be 1 dimensional")
    }
    if(305241 call _cond_test(305213 call <(305209 call . X[305157] c"size") 1))
    {(305238 'throw'(305217 'new'(_chpl_manager = _owned[30](?))(305237 call IllegalArgumentError[388778](?) "choice() x.size must be greater than 0")))
    }
    if(305401 call _cond_test(305249 call !(305248 call isNothingType probType[305169])))
    {
      if(305278 call _cond_test(305255 call !(305254 call isArrayType probType[305169])))
      {(305276 call compilerError "choice() prob must be an array")
      }
      if(305323 call _cond_test(305300 call !(305298 call ||(305290 call isIntegralType(305286 call . prob[305171] c"eltType"))(305297 call isRealType(305293 call . prob[305171] c"eltType")))))
      {(305321 call compilerError "choice() prob.eltType must be real or integral")
      }
      if(305357 call _cond_test(305333 call !=(305329 call . prob[305171] c"rank") 1))
      {(305354 call compilerError "choice() prob array must be 1 dimensional")
      }
      if(305397 call _cond_test(305369 call !=(305362 call . prob[305171] c"size")(305366 call . X[305157] c"size")))
      {(305394 'throw'(305373 'new'(_chpl_manager = _owned[30](?))(305393 call IllegalArgumentError[388778](?) "choice() x.size must be equal to prob.size")))
      }
    }
    if(305595 call _cond_test(305409 call !(305408 call isNothingType sizeType[305160])))
    {
      if(305589 call _cond_test(305414 call isIntegralType sizeType[305160]))
      {
        if(305444 call _cond_test(305417 call <= size[305162] 0))
        {(305442 'throw'(305421 'new'(_chpl_manager = _owned[30](?))(305441 call IllegalArgumentError[388778](?) "choice() size must be greater than 0")))
        }
        if(305487 call _cond_test(305460 call &&(305451 call ! replace[305166])(305458 call > size[305162](305455 call . X[305157] c"size"))))
        {(305485 'throw'(305464 'new'(_chpl_manager = _owned[30](?))(305484 call IllegalArgumentError[388778](?) "choice() size must be smaller than x.size when replace=false")))
        }
      }
      {
        if(305585 call _cond_test(305495 call isDomainType sizeType[305160]))
        {
          if(305528 call _cond_test(305501 call <=(305497 call . size[305162] c"size") 0))
          {(305526 'throw'(305505 'new'(_chpl_manager = _owned[30](?))(305525 call IllegalArgumentError[388778](?) "choice() size domain can not be empty")))
          }
          if(305558 call _cond_test(305547 call &&(305535 call ! replace[305166])(305545 call >(305538 call . size[305162] c"size")(305542 call . X[305157] c"size"))))
          {(305556 'throw'(305551 'new'(_chpl_manager = _owned[30](?))(305555 call IllegalArgumentError[388778](?) "choice() size must be smaller than x.size when replace=false")))
          }
        }
        {(305582 call compilerError "choice() size must be integral or domain")
        }
      }
    }
    if(305624 call _cond_test(305602 call isNothingType probType[305169]))
    {(305610 return(305609 call _choiceUniform stream[305152] X[305157] size[305162] replace[305166]))
    }
    {(305621 return(305620 call _choiceProbabilities stream[305152] X[305157] size[305162] replace[305166] prob[305171]))
    }
  } function _choiceUniform[305634](arg stream[305632]:_any[178](?), arg X[305637] : _domain[125902](?), arg size[305642] : unknown sizeType[305640], arg replace[305646] : bool[10]) : _unknown[51] throws "no doc"
  { const low[305653] "const"(305650 call . X[305637] c"alignedLow") const stride[305663] "const"(305662 call abs(305658 call . X[305637] c"stride"))(305666 'end of statement')
    if(306124 call _cond_test(305671 call isNothingType sizeType[305640]))
    { unknown randVal[305688](305687 call(305673 call . stream[305632] c"getNext")(resultType = int(64)[13]) 0(305685 call -(305681 call . X[305637] c"size") 1))(305691 'end of statement') unknown randIdx[305706](305705 call(305700 call .(305699 call(305694 call . X[305637] c"dim") 0) c"orderToIndex") randVal[305688])(305709 'end of statement')(305711 return randIdx[305706])
    }
    { unknown m[305714] 1(305717 'end of statement')
      if(305731 call _cond_test(305722 call isDomainType sizeType[305640]))
      {(305728 call = m[305714](305725 call . size[305642] c"size"))
      } unknown numElements[305775](305772 IfExpr (305739 call isDomainType sizeType[305640]) then
      { scopeless m[305714]
      } else
      { scopeless(305769 IfExpr (305744 call isIntegralType sizeType[305640]) then
        { scopeless(305747 call _cast int(64)[13] size[305642])
        } else
        { scopeless(305768 call compilerError "choice() size type must be integral or tuple of ranges")
        } )
      } )(305778 'end of statement') unknown samples[305792](305790 call chpl__buildArrayRuntimeType(305788 call chpl__ensureDomainExpr(305784 call chpl_build_bounded_range 0(305782 call - numElements[305775] 1))) int(64)[13])(305795 'end of statement')
      if(306091 call _cond_test replace[305646])
      {
        { unknown _indexOfInterest[305842] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[305843] "expr temp" "temp"(305852 'move' _iterator[305843](305850 call _getIterator samples[305792]))
          Defer
          {
            {(305868 call _freeIterator _iterator[305843])
            }
          }
          { scopeless type(305857 'move' _indexOfInterest[305842](305854 call iteratorIndex _iterator[305843]))
          }
          ForLoop[305844]
          { unknown sample[305861] "index var" "insert auto destroy"(305863 'move' sample[305861] _indexOfInterest[305842])
            { unknown randVal[305815](305814 call(305800 call . stream[305632] c"getNext")(resultType = int(64)[13]) 0(305812 call -(305808 call . X[305637] c"size") 1))(305818 'end of statement') unknown randIdx[305833](305832 call(305827 call .(305826 call(305821 call . X[305637] c"dim") 0) c"orderToIndex") randVal[305815])(305836 'end of statement')(305839 call = sample[305861] randIdx[305833])
            } label _continueLabel[305847] _indexOfInterest[305842] _iterator[305843]
          } label _breakLabel[305848]
        }
      }
      {
        if(306086 call _cond_test(305884 call < numElements[305775](305883 call log2(305879 call . X[305637] c"size"))))
        { unknown indices[305890](305889 call set[333168](?) int(64)[13])(305893 'end of statement') unknown i[305897] 0 int(64)[13](305900 'end of statement')
          { unknown tmp[305978] "temp"(306002 'move' tmp[305978](305997 call _cond_test(305999 call < i[305897] numElements[305775])))
            WhileDo[305983]
            {
              { unknown randVal[305921](305920 call(305906 call . stream[305632] c"getNext")(resultType = int(64)[13]) 0(305918 call -(305914 call . X[305637] c"size") 1))(305924 'end of statement')
                if(305974 call _cond_test(305933 call !(305932 call(305927 call . indices[305890] c"contains") randVal[305921])))
                { unknown randIdx[305948](305947 call(305942 call .(305941 call(305936 call . X[305637] c"dim") 0) c"orderToIndex") randVal[305921])(305951 'end of statement')(305958 call =(305956 call samples[305792] i[305897]) randIdx[305948])(305967 call(305962 call . indices[305890] c"add") randVal[305921])(305971 call += i[305897] 1)
                }
              } label _continueLabel[305981](305992 'move' tmp[305978](305987 call _cond_test(305989 call < i[305897] numElements[305775]))) tmp[305978]
            } label _breakLabel[305982]
          }
        }
        { unknown indices[306013] X[305637](306010 call chpl__buildArrayRuntimeType(306008 call chpl__ensureDomainExpr X[305637]) int(64)[13])(306016 'end of statement')(306021 call shuffle indices[306013])
          { unknown _indexOfInterest[306052] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[306053] "expr temp" "temp"(306062 'move' _iterator[306053](306060 call _getIterator(306025 call . samples[305792] c"_dom")))
            Defer
            {
              {(306079 call _freeIterator _iterator[306053])
              }
            }
            { scopeless type(306068 'move' _indexOfInterest[306052](306065 call iteratorIndex _iterator[306053]))
            }
            ForLoop[306054]
            { unknown i[306072] "index var" "insert auto destroy"(306074 'move' i[306072] _indexOfInterest[306052])
              {(306048 call =(306031 call samples[305792] i[306072])(306047 call indices[306013](306045 call(306040 call .(306039 call(306034 call . X[305637] c"dim") 0) c"orderToIndex") i[306072])))
              } label _continueLabel[306057] _indexOfInterest[306052] _iterator[306053]
            } label _breakLabel[306058]
          }
        }
      }
      if(306119 call _cond_test(306098 call isIntegralType sizeType[305640]))
      {(306100 return samples[305792])
      }
      {
        if(306115 call _cond_test(306106 call isDomainType sizeType[305640]))
        {(306112 return(306111 call reshape samples[305792] size[305642]))
        }
      }
    }
  } function _choiceProbabilities[306134](arg stream[306132]:_any[178](?), arg X[306137] : _domain[125902](?), arg size[306142] : unknown sizeType[306140], arg replace[306145]:_any[178](?), arg prob[306149] : unknown probType[306147]) : _unknown[51] throws "no doc"
  {
    if(306179 call _cond_test(306167 call !=(306160 call . prob[306149] c"size")(306164 call . X[306137] c"size")))
    {(306176 'throw'(306171 'new'(_chpl_manager = _owned[30](?))(306175 call IllegalArgumentError[388778](?) "choice() x.size must be equal to prob.size")))
    }
    if(306215 call _cond_test(306188 call ==(306184 call . prob[306149] c"size") 0))
    {(306213 'throw'(306192 'new'(_chpl_manager = _owned[30](?))(306212 call IllegalArgumentError[388778](?) "choice() prob array cannot be empty")))
    } const low[306224] "const"(306221 call . X[306137] c"alignedLow") const stride[306234] "const"(306233 call abs(306229 call . X[306137] c"stride"))(306237 'end of statement') unknown P[306254] "ref var"(306253 call(306239 call . prob[306149] c"reindex")(306250 call chpl_build_bounded_range 0(306248 call -(306244 call . X[306137] c"size") 1)))(306257 'end of statement') function chpl__scan7[306260](arg chpl_toScan[306262]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
    { unknown chpl_eltType[306264] "maybe type" "temp"
      { scopeless type(306268 'move' chpl_eltType[306264](306270 'typeof'(306272 call chpl__initCopy(306274 call iteratorIndex(306276 call _getIterator chpl_toScan[306262])))))
      } const tmp[306265] "const" "temp"(306285 'move' tmp[306265](306284 'new'(306283 call SumReduceScanOp[376372](?)(eltType = chpl_eltType[306264])(_chpl_manager = unmanaged[220](?)))))(306287 return(306289 call chpl__scanIterator tmp[306265] chpl_toScan[306262]))
    } unknown cumulativeArr[306297](306295 call _cast real(64)[16](306293 call chpl__scan7 P[306254]))(306300 'end of statement')
    if(306337 call _cond_test(306310 call !(306309 call isSorted module=[255] Sort[267968] cumulativeArr[306297])))
    {(306335 'throw'(306314 'new'(_chpl_manager = _owned[30](?))(306334 call IllegalArgumentError[388778](?) "choice() prob array cannot contain negative values")))
    }
    if(306380 call _cond_test(306353 call <=(306351 call cumulativeArr[306297](306347 call .(306344 call . P[306254] c"_dom") c"last")) 0))
    {(306378 'throw'(306357 'new'(_chpl_manager = _owned[30](?))(306377 call IllegalArgumentError[388778](?) "choice() prob array requires a value greater than 0")))
    } unknown total[306395](306394 call cumulativeArr[306297](306390 call .(306387 call . P[306254] c"_dom") c"last"))(306398 'end of statement')(306401 call /= cumulativeArr[306297] total[306395])
    if(306952 call _cond_test(306407 call isNothingType sizeType[306140]))
    { unknown randNum[306416](306415 call(306409 call . stream[306132] c"getNext")(resultType = real(64)[16]))(306419 'end of statement') unknown tmp[306436] "temp"(306435 call binarySearch module=[255] Search[291233] cumulativeArr[306297] randNum[306416])(306443 call _check_tuple_var_decl tmp[306436] 2) unknown found[306421](306437 call tmp[306436] 0) unknown idx[306423](306440 call tmp[306436] 1)(306448 'end of statement')(306462 return(306461 call(306456 call .(306455 call(306450 call . X[306137] c"dim") 0) c"orderToIndex") idx[306423]))(365031 'referenced modules list' Search[291233])
    }
    { unknown m[306465] 1(306468 'end of statement')
      if(306482 call _cond_test(306473 call isDomainType sizeType[306140]))
      {(306479 call = m[306465](306476 call . size[306142] c"size"))
      } unknown numElements[306510](306507 IfExpr (306490 call isDomainType sizeType[306140]) then
      { scopeless m[306465]
      } else
      { scopeless(306504 IfExpr (306495 call isIntegralType sizeType[306140]) then
        { scopeless(306498 call _cast int(64)[13] size[306142])
        } else
        { scopeless(306503 call compilerError "choice() size type must be integral or tuple of ranges")
        } )
      } )(306513 'end of statement') unknown samples[306527](306525 call chpl__buildArrayRuntimeType(306523 call chpl__ensureDomainExpr(306519 call chpl_build_bounded_range 0(306517 call - numElements[306510] 1))) int(64)[13])(306530 'end of statement')
      if(306919 call _cond_test replace[306145])
      {
        { unknown _indexOfInterest[306590] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[306591] "expr temp" "temp"(306600 'move' _iterator[306591](306598 call _getIterator samples[306527]))
          Defer
          {
            {(306616 call _freeIterator _iterator[306591])
            }
          }
          { scopeless type(306605 'move' _indexOfInterest[306590](306602 call iteratorIndex _iterator[306591]))
          }
          ForLoop[306592]
          { unknown sample[306609] "index var" "insert auto destroy"(306611 'move' sample[306609] _indexOfInterest[306590])
            { unknown randNum[306542](306541 call(306535 call . stream[306132] c"getNext")(resultType = real(64)[16]))(306545 'end of statement') unknown tmp[306560] "temp"(306559 call binarySearch module=[255] Search[291233] cumulativeArr[306297] randNum[306542])(306567 call _check_tuple_var_decl tmp[306560] 2) unknown found[306547](306561 call tmp[306560] 0) unknown idx[306549](306564 call tmp[306560] 1)(306572 'end of statement')(306587 call = sample[306609](306586 call(306581 call .(306580 call(306575 call . X[306137] c"dim") 0) c"orderToIndex") idx[306549]))(365040 'referenced modules list' Search[291233])
            } label _continueLabel[306595] _indexOfInterest[306590] _iterator[306591]
          } label _breakLabel[306596]
        }
      }
      { unknown indicesChosen[306629](306627 call chpl__buildDomainRuntimeType defaultDist[94050] int(64)[13])(306632 'end of statement') unknown i[306635] 0(306638 'end of statement')
        { unknown tmp[306880] "temp"(306916 'move' tmp[306880](306905 call _cond_test(306907 call <(306909 call . indicesChosen[306629] c"size")(306913 call . samples[306527] c"size"))))
          WhileDo[306885]
          {
            {
              if(306719 call _cond_test(306654 call >(306650 call . indicesChosen[306629] c"size") 0))
              { function chpl__scan8[306659](arg chpl_toScan[306661]:_any[178](?)) : _unknown[51] "compiler nested function" "fn returns iterator"
                { unknown chpl_eltType[306663] "maybe type" "temp"
                  { scopeless type(306667 'move' chpl_eltType[306663](306669 'typeof'(306671 call chpl__initCopy(306673 call iteratorIndex(306675 call _getIterator chpl_toScan[306661])))))
                  } const tmp[306664] "const" "temp"(306684 'move' tmp[306664](306683 'new'(306682 call SumReduceScanOp[376372](?)(eltType = chpl_eltType[306663])(_chpl_manager = unmanaged[220](?)))))(306686 return(306688 call chpl__scanIterator tmp[306664] chpl_toScan[306661]))
                }(306696 call = cumulativeArr[306297](306694 call _cast real(64)[16](306692 call chpl__scan8 P[306254])))(306711 call = total[306395](306710 call cumulativeArr[306297](306706 call .(306703 call . P[306254] c"_dom") c"last")))(306716 call /= cumulativeArr[306297] total[306395])
              } unknown remainingSamples[306734](306732 call -(306725 call . samples[306527] c"size")(306729 call . indicesChosen[306629] c"size"))(306737 'end of statement')
              { unknown _indexOfInterest[306846] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[306847] "expr temp" "temp"(306856 'move' _iterator[306847](306854 call _getIterator(306764 call(306742 call . stream[306132] c"iterate")(306759 call chpl__buildDomainExpr(306756 call chpl_build_bounded_range 1(306754 call -(306747 call . samples[306527] c"size")(306751 call . indicesChosen[306629] c"size"))))(resultType = real(64)[16]))))
                Defer
                {
                  {(306873 call _freeIterator _iterator[306847])
                  }
                }
                { scopeless type(306862 'move' _indexOfInterest[306846](306859 call iteratorIndex _iterator[306847]))
                }
                ForLoop[306848]
                { unknown randNum[306866] "index var" "insert auto destroy"(306868 'move' randNum[306866] _indexOfInterest[306846])
                  { unknown tmp[306778] "temp"(306777 call binarySearch module=[255] Search[291233] cumulativeArr[306297] randNum[306866])(306785 call _check_tuple_var_decl tmp[306778] 2) unknown found[306765](306779 call tmp[306778] 0) unknown indexChosen[306767](306782 call tmp[306778] 1)(306790 'end of statement')
                    if(306834 call _cond_test(306799 call !(306798 call(306793 call . indicesChosen[306629] c"contains") indexChosen[306767])))
                    {(306803 call += indicesChosen[306629] indexChosen[306767])(306824 call =(306810 call samples[306527] i[306635])(306823 call(306818 call .(306817 call(306812 call . X[306137] c"dim") 0) c"orderToIndex") indexChosen[306767]))
                      {
                      }(306831 call += i[306635] 1)
                    }(306843 call =(306841 call P[306254] indexChosen[306767]) 0)(365054 'referenced modules list' Search[291233])
                  } label _continueLabel[306851] _indexOfInterest[306846] _iterator[306847]
                } label _breakLabel[306852]
              }
            } label _continueLabel[306883](306900 'move' tmp[306880](306889 call _cond_test(306891 call <(306893 call . indicesChosen[306629] c"size")(306897 call . samples[306527] c"size")))) tmp[306880]
          } label _breakLabel[306884]
        }
      }
      if(306947 call _cond_test(306926 call isIntegralType sizeType[306140]))
      {(306928 return samples[306527])
      }
      {
        if(306943 call _cond_test(306934 call isDomainType sizeType[306140]))
        {(306940 return(306939 call reshape samples[306527] size[306142]))
        }
      }
    }(355523 'used modules list'(306153 'import' Search[291233])(306157 'import' Sort[267968]))(365022 'referenced modules list' Sort[267968])
  } function RandomStreamInterface[307393](?).getNext[306982](arg _mt[307397]:_MT[238], arg this[307395]:RandomStreamInterface[307393](?)) : _unknown[51] "method" "primary method"
  {(307004 call compilerError "RandomStreamInterface.getNext called") unknown x[307008](407035 call . this[307395] c"eltType")(307011 'end of statement')(307013 return x[307008])
  }
  { scopeless type(407030 call . this[307395] c"eltType")
  } function RandomStreamInterface[307393](?).skipToNth[307024](arg _mt[307401]:_MT[238], arg this[307399]:RandomStreamInterface[307393](?), arg n[307021] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307045 call compilerError "RandomStreamInterface.skipToNth called")
  } function RandomStreamInterface[307393](?).getNth[307056](arg _mt[307405]:_MT[238], arg this[307403]:RandomStreamInterface[307393](?), arg n[307053] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307078 call compilerError "RandomStreamInterface.getNth called")
  }
  { scopeless type(407043 call . this[307403] c"eltType")
  } function RandomStreamInterface[307393](?).fillRandom[307093](arg _mt[307409]:_MT[238], arg this[307407]:RandomStreamInterface[307393](?), arg arr[307090] :(307087 call chpl__buildArrayRuntimeType nil[44](407048 call . this[307407] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {(307114 call compilerError "RandomStreamInterface.fillRandom called")
  } function RandomStreamInterface[307393](?).fillRandom[307127](arg _mt[307413]:_MT[238], arg this[307411]:RandomStreamInterface[307393](?), arg arr[307124] :(307121 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(307132 call compilerError "RandomStreamInterface.fillRandom called")
  } function RandomStreamInterface[307393](?).choice[307145](arg _mt[307417]:_MT[238], arg this[307415]:RandomStreamInterface[307393](?), arg x[307142] :(307139 call chpl__buildArrayRuntimeType nil[44]), arg size[307150] : unknown sizeType[307147] = none[57], arg replace[307155] = 1, arg prob[307161] : unknown probType[307158] = none[57]) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307184 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307393](?).choice[307199](arg _mt[307421]:_MT[238], arg this[307419]:RandomStreamInterface[307393](?), arg x[307196] :(307195 call range[64316](?)(stridable = ?[260])), arg size[307204] : unknown sizeType[307201] = none[57], arg replace[307209] = 1, arg prob[307215] : unknown probType[307212] = none[57]) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307222 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307393](?).choice[307233](arg _mt[307425]:_MT[238], arg this[307423]:RandomStreamInterface[307393](?), arg x[307230] : _domain[125902](?), arg size[307238] : unknown sizeType[307235] = none[57], arg replace[307243] = 1, arg prob[307249] : unknown probType[307246] = none[57]) : _unknown[51] throws "method" "primary method" "no return value for void"
  {(307256 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[307393](?).iterate[307267](arg _mt[307429]:_MT[238], arg this[307427]:RandomStreamInterface[307393](?), arg D[307264] : _domain[125902](?), arg resultType[307270]:_any[178](?) =(407056 call . this[307427] c"eltType")) : _unknown[51] "method" "primary method" "no return value for void"
  {(307292 call compilerError "RandomStreamInterface.iterate called")
  } function RandomStreamInterface[307393](?).writeThis[307301](arg _mt[307433]:_MT[238], arg this[307431]:RandomStreamInterface[307393](?), arg f[307299]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "no return value for void"
  {(307321 call <~> f[307299] "RandomStreamInterface(eltType=")(307330 call <~> f[307299](307328 call _cast string[26](407063 call . this[307431] c"eltType")))(307351 call <~> f[307299] ", parSafe=")(307356 call <~> f[307299](407070 call . this[307431] c"parSafe"))(307377 call <~> f[307299] ", seed=")(307382 call <~> f[307299](407077 call . this[307431] c"seed"))(307387 call <~> f[307299] ")")
  } type RandomStreamInterface[307393](?) val super[355774]:object[22] "super class" unknown eltType[306963] "type variable"(306962 call real(64)[16] 64) unknown parSafe[306968] "param" 1 bool[10] const seed[306976] "const"(306975 call int(64)[13] 64)(355517 'used modules list'(353062 'use' ChapelStandard[20264])(304651 'use' RandomSupport[307436])(304655 'use' NPBRandom[314383])(304658 'use' PCGRandom[307546])(304666 'import' Set[331309].{set}))
}