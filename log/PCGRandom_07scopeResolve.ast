AST dump for PCGRandom after pass scopeResolve.
Module use list: ChapelStandard RandomSupport Random PCGRandomLib ChapelLocks HaltWrappers DSIUtil 

{ function numGenerators[307596](arg t[307594]:_any[178](?)) param : _unknown[51] "private"
  {
    if(307617 call _cond_test(307601 call isBoolType t[307594]))
    {(307603 return 1)
    }
    {(307615 return(307613 call /(307610 call +(307608 call numBits t[307594]) 31) 32))
    }
  } function PCGRandomStream[309151](?).init[307648](arg _mt[309155]:_MT[238], arg this[309153]:PCGRandomStream[309151](?), arg eltType[307646]:_any[178](?), arg seed[307660] :(307653 call int(64)[13] 64) =(307657 call . SeedGenerator[307559] c"currentTime"), param arg parSafe[307666] : bool[10] = 1) : _unknown[51] "method" "primary method" "no return value for void"
  {(307675 call =(307671 call . this[309153] c"eltType") eltType[307646])(307686 call =(307682 call . this[309153] c"seed") seed[307660])(307694 call =(307690 call . this[309153] c"parSafe") parSafe[307666])(307702 call(307698 call . this[309153] c"complete"))
    { unknown i[307746] 0 unknown tmp[307747] "maybe param" "temp"(307759 'move' tmp[307747](307757 call chpl_compute_low_param_loop_bound 0(307710 call -(307708 call numGenerators eltType[307646]) 1))) unknown tmp[307748] "maybe param" "temp"(307771 'move' tmp[307748](307769 call chpl_compute_high_param_loop_bound 0(307764 call -(307766 call numGenerators eltType[307646]) 1))) unknown tmp[307749] "maybe param" "temp"(307774 'move' tmp[307749] 1)
      ParamForLoop[307776]
      { i[307746] tmp[307747] tmp[307748] tmp[307749]
        { unknown inc[307721] "param"(307720 call pcg_getvalid_inc(307717 call + i[307746] 1))(307724 'end of statement')(307744 call(307732 call .(307729 call(407135 call . this[309153] c"PCGRandomStreamPrivate_rngs") i[307746]) c"srandom")(307740 call _cast(307739 call uint(64)[115] 64) seed[307660]) inc[307721])
        }
      } label _unused_continueLabel[307751] label _breakLabel[307750]
    }(307787 call =(407146 call . this[309153] c"PCGRandomStreamPrivate_count") 1)
  } function PCGRandomStream[309151](?).PCGRandomStreamPrivate_getNext_noLock[307796](arg _mt[309159]:_MT[238], arg this[309157]:PCGRandomStream[309151](?), arg resultType[307794]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {(307800 call +=(407151 call . this[309157] c"PCGRandomStreamPrivate_count") 1)(307809 return(307808 call randlc resultType[307794](407157 call . this[309157] c"PCGRandomStreamPrivate_rngs")))
  } function PCGRandomStream[309151](?).PCGRandomStreamPrivate_getNext_noLock[307817](arg _mt[309163]:_MT[238], arg this[309161]:PCGRandomStream[309151](?), arg resultType[307815]:_any[178](?), arg min[307820] : resultType[307815], arg max[307824] : resultType[307815]) : _unknown[51] "method" "primary method" "no doc"
  {(307829 call +=(407164 call . this[309161] c"PCGRandomStreamPrivate_count") 1)(307845 return(307844 call randlc_bounded resultType[307815](407170 call . this[309161] c"PCGRandomStreamPrivate_rngs")(407175 call . this[309161] c"seed")(307840 call -(407180 call . this[309161] c"PCGRandomStreamPrivate_count") 1) min[307820] max[307824]))
  } function PCGRandomStream[309151](?).PCGRandomStreamPrivate_skipToNth_noLock[307855](arg _mt[309167]:_MT[238], arg this[309165]:PCGRandomStream[309151](?), in arg n[307852] : integral[199](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(307862 call =(407188 call . this[309165] c"PCGRandomStreamPrivate_count")(307860 call + n[307852] 1))(307876 call =(407194 call . this[309165] c"PCGRandomStreamPrivate_rngs")(307875 call randlc_skipto(407199 call . this[309165] c"eltType")(407204 call . this[309165] c"seed")(307873 call + n[307852] 1)))
  } function PCGRandomStream[309151](?).getNext[307887](arg _mt[309171]:_MT[238], arg this[309169]:PCGRandomStream[309151](?), arg resultType[307884]:_any[178](?) =(407210 call . this[309169] c"eltType")) : _unknown[51] "method" "primary method"
  {(307892 call(407217 call . this[309169] c"_lock")) const result[307899] "const"(307898 call(407223 call . this[309169] c"PCGRandomStreamPrivate_getNext_noLock") resultType[307884])(307902 'end of statement')(307905 call(407230 call . this[309169] c"_unlock"))(307908 return result[307899])
  }
  { scopeless type resultType[307884]
  } function PCGRandomStream[309151](?).getNext[307919](arg _mt[309175]:_MT[238], arg this[309173]:PCGRandomStream[309151](?), arg min[307916] :(407236 call . this[309173] c"eltType"), arg max[307922] :(407241 call . this[309173] c"eltType")) : _unknown[51] "method" "primary method"
  {(307932 call(407250 call . this[309173] c"_lock"))
    if(307983 call _cond_test(307939 call && 1(307937 call > min[307916] max[307922])))
    {(307981 call boundsCheckHalt module=[255] HaltWrappers[210016](307978 call +(307975 call +(307969 call +(307966 call + "Cannot generate random numbers within empty range: ["(307964 call _cast string[26] min[307916])) ", ")(307973 call _cast string[26] max[307922])) "]"))(365113 'referenced modules list' HaltWrappers[210016])
    } const result[307994] "const"(307993 call(407259 call . this[309173] c"PCGRandomStreamPrivate_getNext_noLock")(407264 call . this[309173] c"eltType") min[307916] max[307922])(307997 'end of statement')(308000 call(407270 call . this[309173] c"_unlock"))(308003 return result[307994])(355578 'used modules list'(307927 'use' HaltWrappers[210016]))
  }
  { scopeless type(407246 call . this[309173] c"eltType")
  } function PCGRandomStream[309151](?).getNext[308012](arg _mt[309179]:_MT[238], arg this[309177]:PCGRandomStream[309151](?), arg resultType[308010]:_any[178](?), arg min[308015] : resultType[308010], arg max[308019] : resultType[308010]) : _unknown[51] "method" "primary method"
  {(308029 call(407278 call . this[309177] c"_lock"))
    if(308064 call _cond_test(308036 call && 1(308034 call > min[308015] max[308019])))
    {(308062 call boundsCheckHalt module=[255] HaltWrappers[210016](308059 call +(308056 call +(308050 call +(308047 call + "Cannot generate random numbers within empty range: ["(308045 call _cast string[26] min[308015])) ", ")(308054 call _cast string[26] max[308019])) "]"))(365119 'referenced modules list' HaltWrappers[210016])
    } const result[308075] "const"(308074 call(407287 call . this[309177] c"PCGRandomStreamPrivate_getNext_noLock") resultType[308010] min[308015] max[308019])(308078 'end of statement')(308081 call(407294 call . this[309177] c"_unlock"))(308084 return result[308075])(355580 'used modules list'(308024 'use' HaltWrappers[210016]))
  }
  { scopeless type resultType[308010]
  } function PCGRandomStream[309151](?).skipToNth[308095](arg _mt[309183]:_MT[238], arg this[309181]:PCGRandomStream[309151](?), arg n[308092] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    if(308132 call _cond_test(308099 call < n[308092] 0))
    {(308130 'throw'(308103 'new'(_chpl_manager = _owned[30](?))(308129 call IllegalArgumentError[388818](?)(308126 call + "PCGRandomStream.skipToNth(n) called with negative 'n' value "(308124 call _cast string[26] n[308092])))))
    }(308140 call(407303 call . this[309181] c"_lock"))(308145 call(407309 call . this[309181] c"PCGRandomStreamPrivate_skipToNth_noLock") n[308092])(308149 call(407314 call . this[309181] c"_unlock"))
  } function PCGRandomStream[309151](?).getNth[308159](arg _mt[309187]:_MT[238], arg this[309185]:PCGRandomStream[309151](?), arg n[308156] : integral[199](?)) : _unknown[51] throws "method" "primary method"
  {
    if(308197 call _cond_test(308164 call < n[308156] 0))
    {(308195 'throw'(308168 'new'(_chpl_manager = _owned[30](?))(308194 call IllegalArgumentError[388818](?)(308191 call + "PCGRandomStream.getNth(n) called with negative 'n' value "(308189 call _cast string[26] n[308156])))))
    }(308205 call(407327 call . this[309185] c"_lock"))(308210 call(407331 call . this[309185] c"PCGRandomStreamPrivate_skipToNth_noLock") n[308156]) const result[308216] "const"(308215 call(407336 call . this[309185] c"PCGRandomStreamPrivate_getNext_noLock")(407341 call . this[309185] c"eltType"))(308219 'end of statement')(308222 call(407345 call . this[309185] c"_unlock"))(308225 return result[308216])
  }
  { scopeless type(407320 call . this[309185] c"eltType")
  } function PCGRandomStream[309151](?).fillRandom[308239](arg _mt[309191]:_MT[238], arg this[309189]:PCGRandomStream[309151](?), arg arr[308236] :(308233 call chpl__buildArrayRuntimeType nil[44](407351 call . this[309189] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    Forall {
      induction variables:
        unknown x[308266] "index var" "insert auto destroy"
        unknown r[308268] "index var" "insert auto destroy"
      iterated expressions:
        arr[308236]
        (308258 call(407356 call . this[309189] c"iterate")(308250 call . arr[308236] c"_dom")(308255 call . arr[308236] c"eltType"))
      shadow variables:
      other variables
        forall body
      {(308262 call = x[308266] r[308268])
      }
    }
  } function PCGRandomStream[309151](?).choice[308285](arg _mt[309195]:_MT[238], arg this[309193]:PCGRandomStream[309151](?), arg x[308282] :(308280 call chpl__buildArrayRuntimeType unknown dom[308277]), arg size[308290] : unknown sizeType[308287] = none[57], arg replace[308295] = 1, arg prob[308301] : unknown probType[308298] = none[57]) : _unknown[51] throws "method" "primary method"
  { unknown idx[308316](308315 call _choice this[309193] dom[308277](size = size[308290])(replace = replace[308295])(prob = prob[308301]))(308319 'end of statement')(308325 return(308324 call x[308282] idx[308316]))
  } function PCGRandomStream[309151](?).choice[308339](arg _mt[309199]:_MT[238], arg this[309197]:PCGRandomStream[309151](?), arg x[308336] :(308335 call range[64319](?)(stridable = ?[260])), arg size[308344] : unknown sizeType[308341] = none[57], arg replace[308349] = 1, arg prob[308355] : unknown probType[308352] = none[57]) : _unknown[51] throws "method" "primary method"
  { unknown dom[308366](308364 call chpl__buildDomainRuntimeType defaultDist[94053] 1(stridable = 1))(308369 'end of statement')
    if(308423 call _cond_test(308375 call !(308374 call isBoundedRange x[308336])))
    {(308400 'throw'(308379 'new'(_chpl_manager = _owned[30](?))(308399 call IllegalArgumentError[388818](?) "input range must be bounded")))(308411 call = dom[308366](308409 call chpl__buildDomainExpr(308406 call chpl_build_bounded_range 1 2)))
    }
    {(308419 call = dom[308366](308417 call chpl__buildDomainExpr x[308336]))
    }(308438 return(308437 call _choice this[309197] dom[308366](size = size[308344])(replace = replace[308349])(prob = prob[308355])))
  } function PCGRandomStream[309151](?).choice[308448](arg _mt[309203]:_MT[238], arg this[309201]:PCGRandomStream[309151](?), arg x[308445] : _domain[125908](?), arg size[308453] : unknown sizeType[308450] = none[57], arg replace[308458] = 1, arg prob[308464] : unknown probType[308461] = none[57]) : _unknown[51] throws "method" "primary method"
  {(308479 return(308478 call _choice this[309201] x[308445](size = size[308453])(replace = replace[308458])(prob = prob[308464])))
  } function PCGRandomStream[309151](?).shuffle[308496](arg _mt[309207]:_MT[238], arg this[309205]:PCGRandomStream[309151](?), arg arr[308493] :(308491 call chpl__buildArrayRuntimeType unknown D[308486] unknown eltType[308489])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(308526 call _cond_test(308503 call !=(308499 call . D[308486] c"rank") 1))
    {(308524 call compilerError "Shuffle requires 1-D array")
    } const low[308536] "const"(308533 call . D[308486] c"alignedLow") const stride[308546] "const"(308545 call abs(308541 call . D[308486] c"stride"))(308549 'end of statement')(308552 call(407387 call . this[309205] c"_lock"))
    { unknown _indexOfInterest[308631] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[308632] "expr temp" "temp"(308641 'move' _iterator[308632](308639 call _getIterator(308567 call chpl_by(308562 call #(308556 call chpl_build_low_bounded_range 0)(308559 call . D[308486] c"size"))(308565 call - 1))))
      Defer
      {
        {(308669 call _freeIterator _iterator[308632])
        }
      }
      { scopeless type(308658 'move' _indexOfInterest[308631](308655 call iteratorIndex _iterator[308632]))
      }
      ForLoop[308633]
      { unknown i[308662] "index var" "insert auto destroy"(308664 'move' i[308662] _indexOfInterest[308631])
        { unknown k[308581](308580 call randlc_bounded(308571 call . D[308486] c"idxType")(407392 call . this[309205] c"PCGRandomStreamPrivate_rngs")(407397 call . this[309205] c"seed")(407402 call . this[309205] c"PCGRandomStreamPrivate_count") 0 i[308662])(308584 'end of statement') unknown j[308587] i[308662](308590 'end of statement')
          if(308606 call _cond_test(308593 call > stride[308546] 1))
          {(308597 call *= k[308581] stride[308546])(308603 call *= j[308587] stride[308546])
          }(308612 call += k[308581] low[308536])(308617 call += j[308587] low[308536])(308628 call <=>(308623 call arr[308493] k[308581])(308627 call arr[308493] j[308587]))
        } label _continueLabel[308636] _indexOfInterest[308631] _iterator[308632]
      } label _breakLabel[308637]
    }(308681 call +=(407422 call . this[309205] c"PCGRandomStreamPrivate_count")(308678 call . D[308486] c"size"))(308686 call(407426 call . this[309205] c"_unlock"))
  } function PCGRandomStream[309151](?).permutation[308699](arg _mt[309211]:_MT[238], arg this[309209]:PCGRandomStream[309151](?), arg arr[308696] :(308693 call chpl__buildArrayRuntimeType nil[44](407431 call . this[309209] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown low[308714](308711 call .(308710 call(308705 call .(308702 call . arr[308696] c"_dom") c"dim") 0) c"low")(308717 'end of statement') unknown high[308732](308729 call .(308728 call(308723 call .(308720 call . arr[308696] c"_dom") c"dim") 0) c"high")(308735 'end of statement')
    if(308767 call _cond_test(308744 call !=(308740 call .(308737 call . arr[308696] c"_dom") c"rank") 1))
    {(308765 call compilerError "Permutation requires 1-D array")
    }(308774 call(407435 call . this[309209] c"_lock"))
    { unknown _indexOfInterest[308820] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[308821] "expr temp" "temp"(308830 'move' _iterator[308821](308828 call _getIterator(308835 call chpl_direct_range_iter low[308714] high[308732] 1)))
      Defer
      {
        {(308851 call _freeIterator _iterator[308821])
        }
      }
      { scopeless type(308840 'move' _indexOfInterest[308820](308837 call iteratorIndex _iterator[308821]))
      }
      ForLoop[308822]
      { unknown i[308844] "index var" "insert auto destroy"(308846 'move' i[308844] _indexOfInterest[308820])
        { unknown j[308796](308795 call randlc_bounded(308786 call .(308783 call . arr[308696] c"_dom") c"idxType")(407440 call . this[309209] c"PCGRandomStreamPrivate_rngs")(407445 call . this[309209] c"seed")(407450 call . this[309209] c"PCGRandomStreamPrivate_count") low[308714] i[308844])(308799 'end of statement')(308809 call =(308804 call arr[308696] i[308844])(308808 call arr[308696] j[308796]))(308817 call =(308815 call arr[308696] j[308796]) i[308844])
        } label _continueLabel[308825] _indexOfInterest[308820] _iterator[308821]
      } label _breakLabel[308826]
    }(308863 call +=(407466 call . this[309209] c"PCGRandomStreamPrivate_count")(308861 call - high[308732] low[308714]))(308868 call(407472 call . this[309209] c"_unlock"))
  } function PCGRandomStream[309151](?).fillRandom[308880](arg _mt[309215]:_MT[238], arg this[309213]:PCGRandomStream[309151](?), arg arr[308877] :(308874 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(308926 call compilerError "PCGRandomStream(eltType="(308903 call _cast string[26](407477 call . this[309213] c"eltType")) ") can only be used to fill arrays of "(308924 call _cast string[26](407482 call . this[309213] c"eltType")))
  } function PCGRandomStream[309151](?).iterate[308937](arg _mt[309219]:_MT[238], arg this[309217]:PCGRandomStream[309151](?), arg D[308934] : _domain[125908](?), arg resultType[308940]:_any[178](?) =(407488 call . this[309217] c"eltType")) : _unknown[51] "method" "primary method" "fn returns iterator"
  {(308945 call(407492 call . this[309217] c"_lock")) const start[308949] "const"(407497 call . this[309217] c"PCGRandomStreamPrivate_count")(308952 'end of statement')(308967 call +=(407502 call . this[309217] c"PCGRandomStreamPrivate_count")(308966 call(308958 call .(308955 call . D[308934] c"size") c"safeCast")(308964 call int(64)[13] 64)))(308976 call(407506 call . this[309217] c"PCGRandomStreamPrivate_skipToNth_noLock")(308973 call -(407511 call . this[309217] c"PCGRandomStreamPrivate_count") 1))(308980 call(407515 call . this[309217] c"_unlock"))(308989 return(308988 call PCGRandomPrivate_iterate resultType[308940] D[308934](407522 call . this[309217] c"seed") start[308949]))
  } function PCGRandomStream[309151](?).iterate[308999](arg _mt[309223]:_MT[238], arg this[309221]:PCGRandomStream[309151](?), arg D[308996] : _domain[125908](?), arg resultType[309002]:_any[178](?) =(407529 call . this[309221] c"eltType"), param arg tag[309005]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  { const start[309015] "const"(407535 call . this[309221] c"PCGRandomStreamPrivate_count")(309018 'end of statement')(309028 return(309027 call PCGRandomPrivate_iterate resultType[309002] D[308996](407542 call . this[309221] c"seed") start[309015] tag[309005]))
  }
  {(309012 call == tag[309005] leader[447])
  } function PCGRandomStream[309151](?).writeThis[309037](arg _mt[309227]:_MT[238], arg this[309225]:PCGRandomStream[309151](?), arg f[309035]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides" "no return value for void"
  {(309041 call <~> f[309035] "PCGRandomStream(eltType=")(309050 call <~> f[309035](309048 call _cast string[26](407551 call . this[309225] c"eltType")))(309055 call <~> f[309035] ", parSafe=")(309060 call <~> f[309035](407558 call . this[309225] c"parSafe"))(309065 call <~> f[309035] ", seed=")(309070 call <~> f[309035](407565 call . this[309225] c"seed"))(309075 call <~> f[309035] ")")
  } function PCGRandomStream[309151](?)._lock[309092](arg _mt[309231]:_MT[238], arg this[309229]:PCGRandomStream[309151](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(309102 call _cond_test(407573 call . this[309229] c"parSafe"))
    {(309100 call(309096 call .(365142 call . this[309229] c"_l") c"lock"))
    }
  } function PCGRandomStream[309151](?)._unlock[309112](arg _mt[309235]:_MT[238], arg this[309233]:PCGRandomStream[309151](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(309122 call _cond_test(407578 call . this[309233] c"parSafe"))
    {(309120 call(309116 call .(365147 call . this[309233] c"_l") c"unlock"))
    }
  } type PCGRandomStream[309151](?) val super[355816]:object[22] "super class" unknown eltType[307627] "type variable" const seed[307634] "const"(307633 call int(64)[13] 64) unknown parSafe[307640] "param" 1 bool[10] unknown _l[309086] "no doc"(309083 IfExpr  parSafe[307640] then
  { scopeless chpl_LocalSpinlock[187432]
  } else
  { scopeless nothing[7]
  } ) unknown PCGRandomStreamPrivate_rngs[309137] "no doc"(309135 call *(309133 call numGenerators eltType[307627]) pcg_setseq_64_xsh_rr_32_rng[312787]) unknown PCGRandomStreamPrivate_count[309146] "no doc" 1(309144 call int(64)[13] 64) type PCGRandomStream[406910](?) function randToReal64[309247](arg x[309244] :(309243 call uint(64)[115] 64)) : _unknown[51] "inline" "private"
  {(309266 return(309265 call ldexp(309259 call _cast(309258 call real(64)[16] 64) x[309244])(309263 call - 64)))
  }
  { scopeless type(309252 call real(64)[16] 64)
  } function randToReal64[309281](arg x[309278] :(309277 call uint(64)[115] 64), arg min[309287] :(309286 call real(64)[16] 64), arg max[309294] :(309293 call real(64)[16] 64)) : _unknown[51] "inline" "private"
  { unknown normalized[309305](309304 call randToReal64 x[309278])(309308 'end of statement')(309320 return(309318 call +(309315 call *(309312 call - max[309294] min[309287]) normalized[309305]) min[309287]))
  }
  { scopeless type(309300 call real(64)[16] 64)
  } function randToReal32[309334](arg x[309331] :(309330 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {(309349 return(309348 call ldexp(309342 call _cast(309341 call real(64)[16] 32) x[309331])(309346 call - 32)))
  } function randToReal32[309363](arg x[309360] :(309359 call uint(64)[115] 32), arg min[309369] :(309368 call real(64)[16] 32), arg max[309376] :(309375 call real(64)[16] 32)) : _unknown[51] "inline" "private"
  { unknown normalized[309387](309386 call randToReal32 x[309360])(309390 'end of statement')(309402 return(309400 call +(309397 call *(309394 call - max[309376] min[309369]) normalized[309387]) min[309369]))
  }
  { scopeless type(309382 call real(64)[16] 32)
  } function rand32_1[309411](ref arg states[309409]:_any[178](?)) : _unknown[51] "inline" "private"
  {(309432 return(309431 call(309423 call .(309420 call states[309409] 0) c"random")(309429 call pcg_getvalid_inc 1)))
  }
  { scopeless type(309416 call uint(64)[115] 32)
  } function rand32_2[309442](ref arg states[309440]:_any[178](?)) : _unknown[51] "inline" "private"
  {(309461 return(309460 call(309452 call .(309451 call states[309440] 1) c"random")(309458 call pcg_getvalid_inc 2)))
  }
  { scopeless type(309447 call uint(64)[115] 32)
  } function boundedrand32_1[309471](ref arg states[309469]:_any[178](?), arg seed[309477] :(309476 call int(64)[13] 64), arg count[309484] :(309483 call int(64)[13] 64), arg bound[309491] :(309490 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309554 call _cond_test(309506 call == bound[309491](309505 call max(309503 call uint(64)[115] 32))))
    {(309512 return(309511 call rand32_1 states[309469]))
    }
    {(309552 return(309551 call(309520 call .(309517 call states[309469] 0) c"bounded_random_vary_inc")(309526 call pcg_getvalid_inc 1)(309530 call + bound[309491] 1)(309537 call _cast(309536 call uint(64)[115] 64) seed[309477])(309547 call _cast(309546 call uint(64)[115] 64)(309541 call - count[309484] 1)) 101 4))
    }
  }
  { scopeless type(309497 call uint(64)[115] 32)
  } function boundedrand32_2[309568](ref arg states[309566]:_any[178](?), arg seed[309574] :(309573 call int(64)[13] 64), arg count[309581] :(309580 call int(64)[13] 64), arg bound[309588] :(309587 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309651 call _cond_test(309603 call == bound[309588](309602 call max(309600 call uint(64)[115] 32))))
    {(309609 return(309608 call rand32_2 states[309566]))
    }
    {(309649 return(309648 call(309615 call .(309614 call states[309566] 1) c"bounded_random_vary_inc")(309621 call pcg_getvalid_inc 2)(309625 call + bound[309588] 1)(309632 call _cast(309631 call uint(64)[115] 64) seed[309574])(309642 call _cast(309641 call uint(64)[115] 64)(309636 call - count[309581] 1)) 102 4))
    }
  }
  { scopeless type(309594 call uint(64)[115] 32)
  } function rand64_1[309665](ref arg states[309663]:_any[178](?)) : _unknown[51] "inline" "private"
  { unknown ret[309676] 0(309674 call uint(64)[115] 64)(309679 'end of statement')(309695 call |= ret[309676](309694 call(309686 call .(309685 call states[309663] 0) c"random")(309692 call pcg_getvalid_inc 1)))(309700 call <<= ret[309676] 32)(309717 call |= ret[309676](309716 call(309708 call .(309707 call states[309663] 1) c"random")(309714 call pcg_getvalid_inc 2)))(309721 return ret[309676])
  }
  { scopeless type(309670 call uint(64)[115] 64)
  } function rand64_2[309730](ref arg states[309728]:_any[178](?)) : _unknown[51] "inline" "private"
  { unknown ret[309741] 0(309739 call uint(64)[115] 64)(309744 'end of statement')(309760 call |= ret[309741](309759 call(309751 call .(309750 call states[309728] 2) c"random")(309757 call pcg_getvalid_inc 3)))(309765 call <<= ret[309741] 32)(309782 call |= ret[309741](309781 call(309773 call .(309772 call states[309728] 3) c"random")(309779 call pcg_getvalid_inc 4)))(309786 return ret[309741])
  }
  { scopeless type(309735 call uint(64)[115] 64)
  } function boundedrand64_1[309795](ref arg states[309793]:_any[178](?), arg seed[309801] :(309800 call int(64)[13] 64), arg count[309808] :(309807 call int(64)[13] 64), arg bound[309812] : uint(64)[115]) : _unknown[51] "private"
  {
    if(309922 call _cond_test(309827 call > bound[309812](309825 call _cast uint(64)[115](309823 call max(309821 call uint(64)[115] 32)))))
    { unknown toprand[309833](309831 call _cast uint(64)[115] 0)(309836 'end of statement') unknown botrand[309842](309840 call _cast uint(64)[115] 0)(309845 'end of statement')(309863 call = toprand[309833](309862 call boundedrand32_1 states[309793] seed[309801] count[309808](309860 call _cast(309859 call uint(64)[115] 32)(309854 call >> bound[309812] 32))))(309889 call = botrand[309842](309888 call boundedrand32_2 states[309793] seed[309801] count[309808](309886 call _cast(309885 call uint(64)[115] 32)(309880 call & bound[309812](309879 call max(309877 call uint(64)[115] 32))))))(309899 return(309897 call |(309894 call << toprand[309833] 32) botrand[309842]))
    }
    {(309904 call rand32_1 states[309793])(309920 return(309919 call boundedrand32_2 states[309793] seed[309801] count[309808](309917 call _cast(309916 call uint(64)[115] 32) bound[309812])))
    }
  }
  { scopeless type uint(64)[115]
  } function checkSufficientBitsAndAdvanceOthers[309934](arg resultType[309932]:_any[178](?), ref arg states[309936]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  { unknown numGenForResultType[309942] "param"(309941 call numGenerators resultType[309932])(309945 'end of statement') unknown numGen[309951] "param"(309948 call . states[309936] c"size")(309954 'end of statement')
    if(310061 call _cond_test(309957 call > numGenForResultType[309942] numGen[309951]))
    {(310059 call compilerError(310056 call +(310037 call +(310028 call +(310009 call +(310000 call +(309981 call + "PCGRandomStream cannot produce "(309979 call _cast string[26] resultType[309932])) " (requiring ")(310007 call _cast string[26](310004 call * 32 numGenForResultType[309942]))) " bits) from a stream configured for ")(310035 call _cast string[26](310032 call * 32 numGen[309951]))) " bits of output"))
    }
    { unknown _indexOfInterest[310095] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[310096] "expr temp" "temp"(310105 'move' _iterator[310096](310103 call _getIterator(310113 call chpl_direct_range_iter(310109 call + numGenForResultType[309942] 1) numGen[309951] 1)))
      Defer
      {
        {(310129 call _freeIterator _iterator[310096])
        }
      }
      { scopeless type(310118 'move' _indexOfInterest[310095](310115 call iteratorIndex _iterator[310096]))
      }
      ForLoop[310097]
      { unknown i[310122] "index var" "insert auto destroy"(310124 'move' i[310122] _indexOfInterest[310095])
        {(310092 call(310081 call .(310080 call states[309936](310077 call - i[310122] 1)) c"random")(310090 call pcg_getvalid_inc(310087 call _cast uint(64)[115] i[310122])))
        } label _continueLabel[310100] _indexOfInterest[310095] _iterator[310096]
      } label _breakLabel[310101]
    }
  } function randlc[310142](arg resultType[310140]:_any[178](?), ref arg states[310144]:_any[178](?)) : _unknown[51] "inline" "private"
  {(310150 call checkSufficientBitsAndAdvanceOthers resultType[310140] states[310144])
    if(310469 call _cond_test(310158 call == resultType[310140](310157 call complex(128)[140] 128)))
    {(310183 return(310181 call _cast(310180 call complex(128)[140] 128)(310175 call _build_tuple(310166 call randToReal64(310164 call rand64_1 states[310144]))(310173 call randToReal64(310171 call rand64_2 states[310144])))))
    }
    {
      if(310464 call _cond_test(310191 call == resultType[310140](310190 call complex(128)[140] 64)))
      {(310216 return(310214 call _cast(310213 call complex(128)[140] 64)(310208 call _build_tuple(310199 call randToReal32(310197 call rand32_1 states[310144]))(310206 call randToReal32(310204 call rand32_2 states[310144])))))
      }
      {
        if(310459 call _cond_test(310224 call == resultType[310140](310223 call imag(64)[130] 64)))
        {(310236 return(310235 call _r2i(310233 call randToReal64(310231 call rand64_1 states[310144]))))
        }
        {
          if(310454 call _cond_test(310244 call == resultType[310140](310243 call imag(64)[130] 32)))
          {(310256 return(310255 call _r2i(310253 call randToReal32(310251 call rand32_1 states[310144]))))
          }
          {
            if(310449 call _cond_test(310264 call == resultType[310140](310263 call real(64)[16] 64)))
            {(310273 return(310272 call randToReal64(310270 call rand64_1 states[310144])))
            }
            {
              if(310444 call _cond_test(310281 call == resultType[310140](310280 call real(64)[16] 32)))
              {(310290 return(310289 call randToReal32(310287 call rand32_1 states[310144])))
              }
              {
                if(310439 call _cond_test(310307 call ||(310298 call == resultType[310140](310297 call uint(64)[115] 64))(310305 call == resultType[310140](310304 call int(64)[13] 64))))
                {(310316 return(310314 call _cast resultType[310140](310312 call rand64_1 states[310144])))
                }
                {
                  if(310434 call _cond_test(310333 call ||(310324 call == resultType[310140](310323 call uint(64)[115] 32))(310331 call == resultType[310140](310330 call int(64)[13] 32))))
                  {(310342 return(310340 call _cast resultType[310140](310338 call rand32_1 states[310144])))
                  }
                  {
                    if(310429 call _cond_test(310359 call ||(310350 call == resultType[310140](310349 call uint(64)[115] 16))(310357 call == resultType[310140](310356 call int(64)[13] 16))))
                    {(310371 return(310369 call _cast resultType[310140](310366 call >>(310364 call rand32_1 states[310144]) 16)))
                    }
                    {
                      if(310424 call _cond_test(310388 call ||(310379 call == resultType[310140](310378 call uint(64)[115] 8))(310386 call == resultType[310140](310385 call int(64)[13] 8))))
                      {(310400 return(310398 call _cast resultType[310140](310395 call >>(310393 call rand32_1 states[310144]) 24)))
                      }
                      {
                        if(310420 call _cond_test(310406 call isBoolType resultType[310140]))
                        {(310417 return(310415 call !=(310412 call >>(310410 call rand32_1 states[310144]) 31) 0))
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } function randlc_bounded[310480](arg resultType[310478]:_any[178](?), ref arg states[310482]:_any[178](?), arg seed[310488] :(310487 call int(64)[13] 64), arg count[310495] :(310494 call int(64)[13] 64), arg min[310498]:_any[178](?), arg max[310500]:_any[178](?)) : _unknown[51] "inline" "private"
  {(310506 call checkSufficientBitsAndAdvanceOthers resultType[310478] states[310482])
    if(310967 call _cond_test(310514 call == resultType[310478](310513 call complex(128)[140] 128)))
    {(310555 return(310553 call _cast(310552 call complex(128)[140] 128)(310547 call _build_tuple(310530 call randToReal64(310520 call rand64_1 states[310482])(310523 call . min[310498] c"re")(310527 call . max[310500] c"re"))(310545 call randToReal64(310535 call rand64_2 states[310482])(310538 call . min[310498] c"im")(310542 call . max[310500] c"im")))))
    }
    {
      if(310962 call _cond_test(310563 call == resultType[310478](310562 call complex(128)[140] 64)))
      {(310604 return(310602 call _cast(310601 call complex(128)[140] 64)(310596 call _build_tuple(310579 call randToReal32(310569 call rand32_1 states[310482])(310572 call . min[310498] c"re")(310576 call . max[310500] c"re"))(310594 call randToReal32(310584 call rand32_2 states[310482])(310587 call . min[310498] c"im")(310591 call . max[310500] c"im")))))
      }
      {
        if(310957 call _cond_test(310612 call == resultType[310478](310611 call imag(64)[130] 64)))
        {(310632 return(310631 call _r2i(310629 call randToReal64(310619 call rand64_1 states[310482])(310624 call _i2r min[310498])(310628 call _i2r max[310500]))))
        }
        {
          if(310952 call _cond_test(310640 call == resultType[310478](310639 call imag(64)[130] 32)))
          {(310660 return(310659 call _r2i(310657 call randToReal32(310647 call rand32_1 states[310482])(310652 call _i2r min[310498])(310656 call _i2r max[310500]))))
          }
          {
            if(310947 call _cond_test(310668 call == resultType[310478](310667 call real(64)[16] 64)))
            {(310679 return(310678 call randToReal64(310674 call rand64_1 states[310482]) min[310498] max[310500]))
            }
            {
              if(310942 call _cond_test(310687 call == resultType[310478](310686 call real(64)[16] 32)))
              {(310698 return(310697 call randToReal32(310693 call rand32_1 states[310482]) min[310498] max[310500]))
              }
              {
                if(310937 call _cond_test(310715 call ||(310706 call == resultType[310478](310705 call uint(64)[115] 64))(310713 call == resultType[310478](310712 call int(64)[13] 64))))
                {(310745 return(310743 call _cast resultType[310478](310740 call +(310732 call boundedrand64_1 states[310482] seed[310488] count[310495](310730 call _cast(310729 call uint(64)[115] 64)(310724 call - max[310500] min[310498])))(310738 call _cast(310737 call uint(64)[115] 64) min[310498]))))
                }
                {
                  if(310932 call _cond_test(310762 call ||(310753 call == resultType[310478](310752 call uint(64)[115] 32))(310760 call == resultType[310478](310759 call int(64)[13] 32))))
                  {(310792 return(310790 call _cast resultType[310478](310787 call +(310779 call boundedrand32_1 states[310482] seed[310488] count[310495](310777 call _cast(310776 call uint(64)[115] 32)(310771 call - max[310500] min[310498])))(310785 call _cast(310784 call uint(64)[115] 32) min[310498]))))
                  }
                  {
                    if(310927 call _cond_test(310809 call ||(310800 call == resultType[310478](310799 call uint(64)[115] 16))(310807 call == resultType[310478](310806 call int(64)[13] 16))))
                    {(310839 return(310837 call _cast resultType[310478](310834 call +(310826 call boundedrand32_1 states[310482] seed[310488] count[310495](310824 call _cast(310823 call uint(64)[115] 32)(310818 call - max[310500] min[310498])))(310832 call _cast(310831 call uint(64)[115] 32) min[310498]))))
                    }
                    {
                      if(310922 call _cond_test(310856 call ||(310847 call == resultType[310478](310846 call uint(64)[115] 8))(310854 call == resultType[310478](310853 call int(64)[13] 8))))
                      {(310886 return(310884 call _cast resultType[310478](310881 call +(310873 call boundedrand32_1 states[310482] seed[310488] count[310495](310871 call _cast(310870 call uint(64)[115] 32)(310865 call - max[310500] min[310498])))(310879 call _cast(310878 call uint(64)[115] 32) min[310498]))))
                      }
                      {
                        if(310918 call _cond_test(310892 call isBoolType resultType[310478]))
                        {(310912 call compilerError "bounded rand with boolean type")(310916 return 0)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } function randlc_skipto[310978](arg resultType[310976]:_any[178](?), arg seed[310984] :(310983 call int(64)[13] 64), arg n[310988] : integral[199](?)) : _unknown[51] "private"
  { unknown states[310998](310996 call *(310994 call numGenerators resultType[310976]) pcg_setseq_64_xsh_rr_32_rng[312787])(311001 'end of statement')
    { unknown i[311064] 0 unknown tmp[311065] "maybe param" "temp"(311077 'move' tmp[311065](311075 call chpl_compute_low_param_loop_bound 0(311009 call -(311005 call . states[310998] c"size") 1))) unknown tmp[311066] "maybe param" "temp"(311090 'move' tmp[311066](311088 call chpl_compute_high_param_loop_bound 0(311082 call -(311084 call . states[310998] c"size") 1))) unknown tmp[311067] "maybe param" "temp"(311093 'move' tmp[311067] 1)
      ParamForLoop[311095]
      { i[311064] tmp[311065] tmp[311066] tmp[311067]
        { unknown inc[311020] "param"(311019 call pcg_getvalid_inc(311016 call + i[311064] 1))(311023 'end of statement')(311041 call(311029 call .(311028 call states[310998] i[311064]) c"srandom")(311037 call _cast(311036 call uint(64)[115] 64) seed[310984]) inc[311020])(311062 call(311047 call .(311046 call states[310998] i[311064]) c"advance") inc[311020](311060 call _cast(311059 call uint(64)[115] 64)(311054 call - n[310988] 1)))
        }
      } label _unused_continueLabel[311069] label _breakLabel[311068]
    }(311105 return states[310998])
  } function outer[311113](arg ranges[311111]:_any[178](?), param arg dim[311117] : int(64)[13] = 0) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(311285 call _cond_test(311129 call ==(311123 call + dim[311117] 2)(311126 call . ranges[311111] c"size")))
    {
      { unknown _indexOfInterest[311141] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311142] "expr temp" "temp"(311151 'move' _iterator[311142](311149 call _getIterator(311135 call ranges[311111] dim[311117])))
        Defer
        {
          {(311168 call _freeIterator _iterator[311142])
          }
        }
        { scopeless type(311157 'move' _indexOfInterest[311141](311154 call iteratorIndex _iterator[311142]))
        }
        ForLoop[311143]
        { unknown i[311161] "index var" "insert auto destroy"(311163 'move' i[311161] _indexOfInterest[311141])(311139 yield(311137 call _build_tuple i[311161])) label _continueLabel[311146] _indexOfInterest[311141] _iterator[311142]
        } label _breakLabel[311147]
      }
    }
    {
      if(311281 call _cond_test(311184 call <(311178 call + dim[311117] 2)(311181 call . ranges[311111] c"size")))
      {
        { unknown _indexOfInterest[311242] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311243] "expr temp" "temp"(311252 'move' _iterator[311243](311250 call _getIterator(311190 call ranges[311111] dim[311117])))
          Defer
          {
            {(311269 call _freeIterator _iterator[311243])
            }
          }
          { scopeless type(311258 'move' _indexOfInterest[311242](311255 call iteratorIndex _iterator[311243]))
          }
          ForLoop[311244]
          { unknown i[311262] "index var" "insert auto destroy"(311264 'move' i[311262] _indexOfInterest[311242])
            { unknown _indexOfInterest[311208] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311209] "expr temp" "temp"(311218 'move' _iterator[311209](311216 call _getIterator(311199 call outer ranges[311111](311197 call + dim[311117] 1))))
              Defer
              {
                {(311235 call _freeIterator _iterator[311209])
                }
              }
              { scopeless type(311224 'move' _indexOfInterest[311208](311221 call iteratorIndex _iterator[311209]))
              }
              ForLoop[311210]
              { unknown j[311228] "index var" "insert auto destroy"(311230 'move' j[311228] _indexOfInterest[311208])(311206 yield(311204 call _build_tuple i[311262](311202 'expand_tuple' j[311228]))) label _continueLabel[311213] _indexOfInterest[311208] _iterator[311209]
              } label _breakLabel[311214]
            } label _continueLabel[311247] _indexOfInterest[311242] _iterator[311243]
          } label _breakLabel[311248]
        }
      }
      {(311278 yield 0)
      }
    }
  } function PCGRandomPrivate_iterate[311297](arg resultType[311295]:_any[178](?), arg D[311300] : _domain[125908](?), arg seed[311307] :(311306 call int(64)[13] 64), arg start[311314] :(311313 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown cursor[311323](311322 call randlc_skipto resultType[311295] seed[311307] start[311314])(311326 'end of statement')
    { unknown _indexOfInterest[311337] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311338] "expr temp" "temp"(311347 'move' _iterator[311338](311345 call _getIterator D[311300]))
      Defer
      {
        {(311363 call _freeIterator _iterator[311338])
        }
      }
      { scopeless type(311352 'move' _indexOfInterest[311337](311349 call iteratorIndex _iterator[311338]))
      }
      ForLoop[311339]
      { unknown i[311356] "index var" "insert auto destroy"(311358 'move' i[311356] _indexOfInterest[311337])(311335 yield(311334 call randlc resultType[311295] cursor[311323])) label _continueLabel[311342] _indexOfInterest[311337] _iterator[311338]
      } label _breakLabel[311343]
    }
  } function PCGRandomPrivate_iterate[311376](arg resultType[311374]:_any[178](?), arg D[311379] : _domain[125908](?), arg seed[311386] :(311385 call int(64)[13] 64), arg start[311393] :(311392 call int(64)[13] 64), param arg tag[311397] : iterKind[453]) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    { unknown _indexOfInterest[311422] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311423] "expr temp" "temp"(311432 'move' _iterator[311423](311430 call _getIterator(311418 call(311409 call . D[311379] c"these")(tag = leader[447]))))
      Defer
      {
        {(311449 call _freeIterator _iterator[311423])
        }
      }
      { scopeless type(311438 'move' _indexOfInterest[311422](311435 call iteratorIndex _iterator[311423]))
      }
      ForLoop[311424]
      { unknown block[311442] "index var" "insert auto destroy"(311444 'move' block[311442] _indexOfInterest[311422])(311420 yield block[311442]) label _continueLabel[311427] _indexOfInterest[311422] _iterator[311423]
      } label _breakLabel[311428]
    }
  }
  {(311405 call == tag[311397] leader[447])
  } function PCGRandomPrivate_iterate[311464](arg resultType[311462]:_any[178](?), arg D[311467] : _domain[125908](?), arg seed[311474] :(311473 call int(64)[13] 64), arg start[311481] :(311480 call int(64)[13] 64), param arg tag[311485] : iterKind[453], arg followThis[311488]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown multiplier[311502] "param" 1(311505 'end of statement') const ZD[311510] "const"(311509 call computeZeroBasedDomain D[311467])(311513 'end of statement') const innerRange[311524] "const"(311523 call followThis[311488](311520 call -(311516 call . ZD[311510] c"rank") 1))(311527 'end of statement')
    { unknown _indexOfInterest[311758] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311759] "expr temp" "temp"(311768 'move' _iterator[311759](311766 call _getIterator(311532 call outer followThis[311488])))
      Defer
      {
        {(311785 call _freeIterator _iterator[311759])
        }
      }
      { scopeless type(311774 'move' _indexOfInterest[311758](311771 call iteratorIndex _iterator[311759]))
      }
      ForLoop[311760]
      { unknown outer[311778] "index var" "insert auto destroy"(311780 'move' outer[311778] _indexOfInterest[311758])
        { unknown myStart[311534] start[311481](311537 'end of statement')
          if(311603 call _cond_test(311544 call >(311540 call . ZD[311510] c"rank") 1))
          {(311574 call += myStart[311534](311572 call * multiplier[311502](311571 call(311563 call .(311562 call(311549 call . ZD[311510] c"indexOrder")(311559 call _build_tuple(311553 'expand_tuple' outer[311778])(311555 call . innerRange[311524] c"low"))) c"safeCast")(311569 call int(64)[13] 64))))
          }
          {(311600 call += myStart[311534](311598 call * multiplier[311502](311597 call(311589 call .(311588 call(311580 call . ZD[311510] c"indexOrder")(311584 call . innerRange[311524] c"low")) c"safeCast")(311595 call int(64)[13] 64))))
          }
          if(311754 call _cond_test(311613 call !(311610 call . innerRange[311524] c"stridable")))
          { unknown cursor[311621](311620 call randlc_skipto resultType[311462] seed[311474] myStart[311534])(311624 'end of statement')
            { unknown _indexOfInterest[311635] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311636] "expr temp" "temp"(311645 'move' _iterator[311636](311643 call _getIterator innerRange[311524]))
              Defer
              {
                {(311661 call _freeIterator _iterator[311636])
                }
              }
              { scopeless type(311650 'move' _indexOfInterest[311635](311647 call iteratorIndex _iterator[311636]))
              }
              ForLoop[311637]
              { unknown i[311654] "index var" "insert auto destroy"(311656 'move' i[311654] _indexOfInterest[311635])(311633 yield(311632 call randlc resultType[311462] cursor[311621])) label _continueLabel[311640] _indexOfInterest[311635] _iterator[311636]
              } label _breakLabel[311641]
            }
          }
          {(311682 call -= myStart[311534](311681 call(311673 call .(311670 call . innerRange[311524] c"low") c"safeCast")(311679 call int(64)[13] 64)))
            { unknown _indexOfInterest[311721] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311722] "expr temp" "temp"(311731 'move' _iterator[311722](311729 call _getIterator innerRange[311524]))
              Defer
              {
                {(311747 call _freeIterator _iterator[311722])
                }
              }
              { scopeless type(311736 'move' _indexOfInterest[311721](311733 call iteratorIndex _iterator[311722]))
              }
              ForLoop[311723]
              { unknown i[311740] "index var" "insert auto destroy"(311742 'move' i[311740] _indexOfInterest[311721])
                { unknown cursor[311709](311708 call randlc_skipto resultType[311462] seed[311474](311706 call + myStart[311534](311704 call *(311702 call(311694 call . i[311740] c"safeCast")(311700 call int(64)[13] 64)) multiplier[311502])))(311712 'end of statement')(311719 yield(311718 call randlc resultType[311462] cursor[311709]))
                } label _continueLabel[311726] _indexOfInterest[311721] _iterator[311722]
              } label _breakLabel[311727]
            }
          }
        } label _continueLabel[311763] _indexOfInterest[311758] _iterator[311759]
      } label _breakLabel[311764]
    }(355582 'used modules list'(311498 'use' DSIUtil[230907]))
  }
  {(311495 call == tag[311485] follower[449])
  }(355572 'used modules list'(353106 'use' ChapelStandard[20267])(307580 'use' RandomSupport[307463])(307584 'use' Random[304676])(307587 'use' PCGRandomLib[311797])(307590 'use' ChapelLocks[187302]))
}