AST dump for PCGRandom after pass scopeResolve.
Module use list: ChapelStandard RandomSupport Random PCGRandomLib ChapelLocks HaltWrappers DSIUtil 

{ function numGenerators[307481](arg t[307479]:_any[178](?)) param : _unknown[51] "private"
  {
    if(307502 call _cond_test(307486 call isBoolType t[307479]))
    {(307488 return 1)
    }
    {(307500 return(307498 call /(307495 call +(307493 call numBits t[307479]) 31) 32))
    }
  } function PCGRandomStream[309035](?).init[307533](arg _mt[309039]:_MT[238], arg this[309037]:PCGRandomStream[309035](?), arg eltType[307531]:_any[178](?), arg seed[307545] :(307538 call int(64)[13] 64) =(307542 call . SeedGenerator[307444] c"currentTime"), param arg parSafe[307551] : bool[10] = 1) : _unknown[51] "method" "primary method" "no return value for void"
  {(307560 call =(307556 call . this[309037] c"eltType") eltType[307531])(307571 call =(307567 call . this[309037] c"seed") seed[307545])(307579 call =(307575 call . this[309037] c"parSafe") parSafe[307551])(307587 call(307583 call . this[309037] c"complete"))
    { unknown i[307631] 0 unknown tmp[307632] "maybe param" "temp"(307644 'move' tmp[307632](307642 call chpl_compute_low_param_loop_bound 0(307595 call -(307593 call numGenerators eltType[307531]) 1))) unknown tmp[307633] "maybe param" "temp"(307656 'move' tmp[307633](307654 call chpl_compute_high_param_loop_bound 0(307649 call -(307651 call numGenerators eltType[307531]) 1))) unknown tmp[307634] "maybe param" "temp"(307659 'move' tmp[307634] 1)
      ParamForLoop[307661]
      { i[307631] tmp[307632] tmp[307633] tmp[307634]
        { unknown inc[307606] "param"(307605 call pcg_getvalid_inc(307602 call + i[307631] 1))(307609 'end of statement')(307629 call(307617 call .(307614 call(407008 call . this[309037] c"PCGRandomStreamPrivate_rngs") i[307631]) c"srandom")(307625 call _cast(307624 call uint(64)[115] 64) seed[307545]) inc[307606])
        }
      } label _unused_continueLabel[307636] label _breakLabel[307635]
    }(307672 call =(407019 call . this[309037] c"PCGRandomStreamPrivate_count") 1)
  } function PCGRandomStream[309035](?).PCGRandomStreamPrivate_getNext_noLock[307681](arg _mt[309043]:_MT[238], arg this[309041]:PCGRandomStream[309035](?), arg resultType[307679]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {(307685 call +=(407024 call . this[309041] c"PCGRandomStreamPrivate_count") 1)(307694 return(307693 call randlc resultType[307679](407030 call . this[309041] c"PCGRandomStreamPrivate_rngs")))
  } function PCGRandomStream[309035](?).PCGRandomStreamPrivate_getNext_noLock[307702](arg _mt[309047]:_MT[238], arg this[309045]:PCGRandomStream[309035](?), arg resultType[307700]:_any[178](?), arg min[307705] : resultType[307700], arg max[307709] : resultType[307700]) : _unknown[51] "method" "primary method" "no doc"
  {(307714 call +=(407037 call . this[309045] c"PCGRandomStreamPrivate_count") 1)(307730 return(307729 call randlc_bounded resultType[307700](407043 call . this[309045] c"PCGRandomStreamPrivate_rngs")(407048 call . this[309045] c"seed")(307725 call -(407053 call . this[309045] c"PCGRandomStreamPrivate_count") 1) min[307705] max[307709]))
  } function PCGRandomStream[309035](?).PCGRandomStreamPrivate_skipToNth_noLock[307740](arg _mt[309051]:_MT[238], arg this[309049]:PCGRandomStream[309035](?), in arg n[307737] : integral[199](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(307747 call =(407061 call . this[309049] c"PCGRandomStreamPrivate_count")(307745 call + n[307737] 1))(307761 call =(407067 call . this[309049] c"PCGRandomStreamPrivate_rngs")(307760 call randlc_skipto(407072 call . this[309049] c"eltType")(407077 call . this[309049] c"seed")(307758 call + n[307737] 1)))
  } function PCGRandomStream[309035](?).getNext[307772](arg _mt[309055]:_MT[238], arg this[309053]:PCGRandomStream[309035](?), arg resultType[307769]:_any[178](?) =(407083 call . this[309053] c"eltType")) : _unknown[51] "method" "primary method"
  {(307777 call(407090 call . this[309053] c"_lock")) const result[307784] "const"(307783 call(407096 call . this[309053] c"PCGRandomStreamPrivate_getNext_noLock") resultType[307769])(307787 'end of statement')(307790 call(407103 call . this[309053] c"_unlock"))(307793 return result[307784])
  }
  { scopeless type resultType[307769]
  } function PCGRandomStream[309035](?).getNext[307804](arg _mt[309059]:_MT[238], arg this[309057]:PCGRandomStream[309035](?), arg min[307801] :(407109 call . this[309057] c"eltType"), arg max[307807] :(407114 call . this[309057] c"eltType")) : _unknown[51] "method" "primary method"
  {(307817 call(407123 call . this[309057] c"_lock"))
    if(307868 call _cond_test(307824 call && 1(307822 call > min[307801] max[307807])))
    {(307866 call boundsCheckHalt module=[255] HaltWrappers[209910](307863 call +(307860 call +(307854 call +(307851 call + "Cannot generate random numbers within empty range: ["(307849 call _cast string[26] min[307801])) ", ")(307858 call _cast string[26] max[307807])) "]"))(364985 'referenced modules list' HaltWrappers[209910])
    } const result[307879] "const"(307878 call(407132 call . this[309057] c"PCGRandomStreamPrivate_getNext_noLock")(407137 call . this[309057] c"eltType") min[307801] max[307807])(307882 'end of statement')(307885 call(407143 call . this[309057] c"_unlock"))(307888 return result[307879])(355450 'used modules list'(307812 'use' HaltWrappers[209910]))
  }
  { scopeless type(407119 call . this[309057] c"eltType")
  } function PCGRandomStream[309035](?).getNext[307897](arg _mt[309063]:_MT[238], arg this[309061]:PCGRandomStream[309035](?), arg resultType[307895]:_any[178](?), arg min[307900] : resultType[307895], arg max[307904] : resultType[307895]) : _unknown[51] "method" "primary method"
  {(307914 call(407151 call . this[309061] c"_lock"))
    if(307949 call _cond_test(307921 call && 1(307919 call > min[307900] max[307904])))
    {(307947 call boundsCheckHalt module=[255] HaltWrappers[209910](307944 call +(307941 call +(307935 call +(307932 call + "Cannot generate random numbers within empty range: ["(307930 call _cast string[26] min[307900])) ", ")(307939 call _cast string[26] max[307904])) "]"))(364991 'referenced modules list' HaltWrappers[209910])
    } const result[307960] "const"(307959 call(407160 call . this[309061] c"PCGRandomStreamPrivate_getNext_noLock") resultType[307895] min[307900] max[307904])(307963 'end of statement')(307966 call(407167 call . this[309061] c"_unlock"))(307969 return result[307960])(355452 'used modules list'(307909 'use' HaltWrappers[209910]))
  }
  { scopeless type resultType[307895]
  } function PCGRandomStream[309035](?).skipToNth[307980](arg _mt[309067]:_MT[238], arg this[309065]:PCGRandomStream[309035](?), arg n[307977] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    if(308017 call _cond_test(307984 call < n[307977] 0))
    {(308015 'throw'(307988 'new'(_chpl_manager = _owned[30](?))(308014 call IllegalArgumentError[388690](?)(308011 call + "PCGRandomStream.skipToNth(n) called with negative 'n' value "(308009 call _cast string[26] n[307977])))))
    }(308025 call(407176 call . this[309065] c"_lock"))(308030 call(407182 call . this[309065] c"PCGRandomStreamPrivate_skipToNth_noLock") n[307977])(308034 call(407187 call . this[309065] c"_unlock"))
  } function PCGRandomStream[309035](?).getNth[308044](arg _mt[309071]:_MT[238], arg this[309069]:PCGRandomStream[309035](?), arg n[308041] : integral[199](?)) : _unknown[51] throws "method" "primary method"
  {
    if(308082 call _cond_test(308049 call < n[308041] 0))
    {(308080 'throw'(308053 'new'(_chpl_manager = _owned[30](?))(308079 call IllegalArgumentError[388690](?)(308076 call + "PCGRandomStream.getNth(n) called with negative 'n' value "(308074 call _cast string[26] n[308041])))))
    }(308090 call(407200 call . this[309069] c"_lock"))(308095 call(407204 call . this[309069] c"PCGRandomStreamPrivate_skipToNth_noLock") n[308041]) const result[308101] "const"(308100 call(407209 call . this[309069] c"PCGRandomStreamPrivate_getNext_noLock")(407214 call . this[309069] c"eltType"))(308104 'end of statement')(308107 call(407218 call . this[309069] c"_unlock"))(308110 return result[308101])
  }
  { scopeless type(407193 call . this[309069] c"eltType")
  } function PCGRandomStream[309035](?).fillRandom[308124](arg _mt[309075]:_MT[238], arg this[309073]:PCGRandomStream[309035](?), arg arr[308121] :(308118 call chpl__buildArrayRuntimeType nil[44](407224 call . this[309073] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    Forall {
      induction variables:
        unknown x[308151] "index var" "insert auto destroy"
        unknown r[308153] "index var" "insert auto destroy"
      iterated expressions:
        arr[308121]
        (308143 call(407229 call . this[309073] c"iterate")(308135 call . arr[308121] c"_dom")(308140 call . arr[308121] c"eltType"))
      shadow variables:
      other variables
        forall body
      {(308147 call = x[308151] r[308153])
      }
    }
  } function PCGRandomStream[309035](?).choice[308169](arg _mt[309079]:_MT[238], arg this[309077]:PCGRandomStream[309035](?), arg x[308166] :(308164 call chpl__buildArrayRuntimeType unknown dom[308161]), arg size[308174] : unknown sizeType[308171] = none[57], arg replace[308179] = 1, arg prob[308185] : unknown probType[308182] = none[57]) : _unknown[51] throws "method" "primary method"
  { unknown idx[308200](308199 call _choice this[309077] dom[308161](size = size[308174])(replace = replace[308179])(prob = prob[308185]))(308203 'end of statement')(308209 return(308208 call x[308166] idx[308200]))
  } function PCGRandomStream[309035](?).choice[308223](arg _mt[309083]:_MT[238], arg this[309081]:PCGRandomStream[309035](?), arg x[308220] :(308219 call range[64316](?)(stridable = ?[260])), arg size[308228] : unknown sizeType[308225] = none[57], arg replace[308233] = 1, arg prob[308239] : unknown probType[308236] = none[57]) : _unknown[51] throws "method" "primary method"
  { unknown dom[308250](308248 call chpl__buildDomainRuntimeType defaultDist[94050] 1(stridable = 1))(308253 'end of statement')
    if(308307 call _cond_test(308259 call !(308258 call isBoundedRange x[308220])))
    {(308284 'throw'(308263 'new'(_chpl_manager = _owned[30](?))(308283 call IllegalArgumentError[388690](?) "input range must be bounded")))(308295 call = dom[308250](308293 call chpl__buildDomainExpr(308290 call chpl_build_bounded_range 1 2)))
    }
    {(308303 call = dom[308250](308301 call chpl__buildDomainExpr x[308220]))
    }(308322 return(308321 call _choice this[309081] dom[308250](size = size[308228])(replace = replace[308233])(prob = prob[308239])))
  } function PCGRandomStream[309035](?).choice[308332](arg _mt[309087]:_MT[238], arg this[309085]:PCGRandomStream[309035](?), arg x[308329] : _domain[125902](?), arg size[308337] : unknown sizeType[308334] = none[57], arg replace[308342] = 1, arg prob[308348] : unknown probType[308345] = none[57]) : _unknown[51] throws "method" "primary method"
  {(308363 return(308362 call _choice this[309085] x[308329](size = size[308337])(replace = replace[308342])(prob = prob[308348])))
  } function PCGRandomStream[309035](?).shuffle[308380](arg _mt[309091]:_MT[238], arg this[309089]:PCGRandomStream[309035](?), arg arr[308377] :(308375 call chpl__buildArrayRuntimeType unknown D[308370] unknown eltType[308373])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(308410 call _cond_test(308387 call !=(308383 call . D[308370] c"rank") 1))
    {(308408 call compilerError "Shuffle requires 1-D array")
    } const low[308420] "const"(308417 call . D[308370] c"alignedLow") const stride[308430] "const"(308429 call abs(308425 call . D[308370] c"stride"))(308433 'end of statement')(308436 call(407260 call . this[309089] c"_lock"))
    { unknown _indexOfInterest[308515] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[308516] "expr temp" "temp"(308525 'move' _iterator[308516](308523 call _getIterator(308451 call chpl_by(308446 call #(308440 call chpl_build_low_bounded_range 0)(308443 call . D[308370] c"size"))(308449 call - 1))))
      Defer
      {
        {(308553 call _freeIterator _iterator[308516])
        }
      }
      { scopeless type(308542 'move' _indexOfInterest[308515](308539 call iteratorIndex _iterator[308516]))
      }
      ForLoop[308517]
      { unknown i[308546] "index var" "insert auto destroy"(308548 'move' i[308546] _indexOfInterest[308515])
        { unknown k[308465](308464 call randlc_bounded(308455 call . D[308370] c"idxType")(407265 call . this[309089] c"PCGRandomStreamPrivate_rngs")(407270 call . this[309089] c"seed")(407275 call . this[309089] c"PCGRandomStreamPrivate_count") 0 i[308546])(308468 'end of statement') unknown j[308471] i[308546](308474 'end of statement')
          if(308490 call _cond_test(308477 call > stride[308430] 1))
          {(308481 call *= k[308465] stride[308430])(308487 call *= j[308471] stride[308430])
          }(308496 call += k[308465] low[308420])(308501 call += j[308471] low[308420])(308512 call <=>(308507 call arr[308377] k[308465])(308511 call arr[308377] j[308471]))
        } label _continueLabel[308520] _indexOfInterest[308515] _iterator[308516]
      } label _breakLabel[308521]
    }(308565 call +=(407295 call . this[309089] c"PCGRandomStreamPrivate_count")(308562 call . D[308370] c"size"))(308570 call(407299 call . this[309089] c"_unlock"))
  } function PCGRandomStream[309035](?).permutation[308583](arg _mt[309095]:_MT[238], arg this[309093]:PCGRandomStream[309035](?), arg arr[308580] :(308577 call chpl__buildArrayRuntimeType nil[44](407304 call . this[309093] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown low[308598](308595 call .(308594 call(308589 call .(308586 call . arr[308580] c"_dom") c"dim") 0) c"low")(308601 'end of statement') unknown high[308616](308613 call .(308612 call(308607 call .(308604 call . arr[308580] c"_dom") c"dim") 0) c"high")(308619 'end of statement')
    if(308651 call _cond_test(308628 call !=(308624 call .(308621 call . arr[308580] c"_dom") c"rank") 1))
    {(308649 call compilerError "Permutation requires 1-D array")
    }(308658 call(407308 call . this[309093] c"_lock"))
    { unknown _indexOfInterest[308704] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[308705] "expr temp" "temp"(308714 'move' _iterator[308705](308712 call _getIterator(308719 call chpl_direct_range_iter low[308598] high[308616] 1)))
      Defer
      {
        {(308735 call _freeIterator _iterator[308705])
        }
      }
      { scopeless type(308724 'move' _indexOfInterest[308704](308721 call iteratorIndex _iterator[308705]))
      }
      ForLoop[308706]
      { unknown i[308728] "index var" "insert auto destroy"(308730 'move' i[308728] _indexOfInterest[308704])
        { unknown j[308680](308679 call randlc_bounded(308670 call .(308667 call . arr[308580] c"_dom") c"idxType")(407313 call . this[309093] c"PCGRandomStreamPrivate_rngs")(407318 call . this[309093] c"seed")(407323 call . this[309093] c"PCGRandomStreamPrivate_count") low[308598] i[308728])(308683 'end of statement')(308693 call =(308688 call arr[308580] i[308728])(308692 call arr[308580] j[308680]))(308701 call =(308699 call arr[308580] j[308680]) i[308728])
        } label _continueLabel[308709] _indexOfInterest[308704] _iterator[308705]
      } label _breakLabel[308710]
    }(308747 call +=(407339 call . this[309093] c"PCGRandomStreamPrivate_count")(308745 call - high[308616] low[308598]))(308752 call(407345 call . this[309093] c"_unlock"))
  } function PCGRandomStream[309035](?).fillRandom[308764](arg _mt[309099]:_MT[238], arg this[309097]:PCGRandomStream[309035](?), arg arr[308761] :(308758 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(308810 call compilerError "PCGRandomStream(eltType="(308787 call _cast string[26](407350 call . this[309097] c"eltType")) ") can only be used to fill arrays of "(308808 call _cast string[26](407355 call . this[309097] c"eltType")))
  } function PCGRandomStream[309035](?).iterate[308821](arg _mt[309103]:_MT[238], arg this[309101]:PCGRandomStream[309035](?), arg D[308818] : _domain[125902](?), arg resultType[308824]:_any[178](?) =(407361 call . this[309101] c"eltType")) : _unknown[51] "method" "primary method" "fn returns iterator"
  {(308829 call(407365 call . this[309101] c"_lock")) const start[308833] "const"(407370 call . this[309101] c"PCGRandomStreamPrivate_count")(308836 'end of statement')(308851 call +=(407375 call . this[309101] c"PCGRandomStreamPrivate_count")(308850 call(308842 call .(308839 call . D[308818] c"size") c"safeCast")(308848 call int(64)[13] 64)))(308860 call(407379 call . this[309101] c"PCGRandomStreamPrivate_skipToNth_noLock")(308857 call -(407384 call . this[309101] c"PCGRandomStreamPrivate_count") 1))(308864 call(407388 call . this[309101] c"_unlock"))(308873 return(308872 call PCGRandomPrivate_iterate resultType[308824] D[308818](407395 call . this[309101] c"seed") start[308833]))
  } function PCGRandomStream[309035](?).iterate[308883](arg _mt[309107]:_MT[238], arg this[309105]:PCGRandomStream[309035](?), arg D[308880] : _domain[125902](?), arg resultType[308886]:_any[178](?) =(407402 call . this[309105] c"eltType"), param arg tag[308889]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  { const start[308899] "const"(407408 call . this[309105] c"PCGRandomStreamPrivate_count")(308902 'end of statement')(308912 return(308911 call PCGRandomPrivate_iterate resultType[308886] D[308880](407415 call . this[309105] c"seed") start[308899] tag[308889]))
  }
  {(308896 call == tag[308889] leader[447])
  } function PCGRandomStream[309035](?).writeThis[308921](arg _mt[309111]:_MT[238], arg this[309109]:PCGRandomStream[309035](?), arg f[308919]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides" "no return value for void"
  {(308925 call <~> f[308919] "PCGRandomStream(eltType=")(308934 call <~> f[308919](308932 call _cast string[26](407424 call . this[309109] c"eltType")))(308939 call <~> f[308919] ", parSafe=")(308944 call <~> f[308919](407431 call . this[309109] c"parSafe"))(308949 call <~> f[308919] ", seed=")(308954 call <~> f[308919](407438 call . this[309109] c"seed"))(308959 call <~> f[308919] ")")
  } function PCGRandomStream[309035](?)._lock[308976](arg _mt[309115]:_MT[238], arg this[309113]:PCGRandomStream[309035](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(308986 call _cond_test(407446 call . this[309113] c"parSafe"))
    {(308984 call(308980 call .(365014 call . this[309113] c"_l") c"lock"))
    }
  } function PCGRandomStream[309035](?)._unlock[308996](arg _mt[309119]:_MT[238], arg this[309117]:PCGRandomStream[309035](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(309006 call _cond_test(407451 call . this[309117] c"parSafe"))
    {(309004 call(309000 call .(365019 call . this[309117] c"_l") c"unlock"))
    }
  } type PCGRandomStream[309035](?) val super[355688]:object[22] "super class" unknown eltType[307512] "type variable" const seed[307519] "const"(307518 call int(64)[13] 64) unknown parSafe[307525] "param" 1 bool[10] unknown _l[308970] "no doc"(308967 IfExpr  parSafe[307525] then
  { scopeless chpl_LocalSpinlock[187386]
  } else
  { scopeless nothing[7]
  } ) unknown PCGRandomStreamPrivate_rngs[309021] "no doc"(309019 call *(309017 call numGenerators eltType[307512]) pcg_setseq_64_xsh_rr_32_rng[312671]) unknown PCGRandomStreamPrivate_count[309030] "no doc" 1(309028 call int(64)[13] 64) type PCGRandomStream[406783](?) function randToReal64[309131](arg x[309128] :(309127 call uint(64)[115] 64)) : _unknown[51] "inline" "private"
  {(309150 return(309149 call ldexp(309143 call _cast(309142 call real(64)[16] 64) x[309128])(309147 call - 64)))
  }
  { scopeless type(309136 call real(64)[16] 64)
  } function randToReal64[309165](arg x[309162] :(309161 call uint(64)[115] 64), arg min[309171] :(309170 call real(64)[16] 64), arg max[309178] :(309177 call real(64)[16] 64)) : _unknown[51] "inline" "private"
  { unknown normalized[309189](309188 call randToReal64 x[309162])(309192 'end of statement')(309204 return(309202 call +(309199 call *(309196 call - max[309178] min[309171]) normalized[309189]) min[309171]))
  }
  { scopeless type(309184 call real(64)[16] 64)
  } function randToReal32[309218](arg x[309215] :(309214 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {(309233 return(309232 call ldexp(309226 call _cast(309225 call real(64)[16] 32) x[309215])(309230 call - 32)))
  } function randToReal32[309247](arg x[309244] :(309243 call uint(64)[115] 32), arg min[309253] :(309252 call real(64)[16] 32), arg max[309260] :(309259 call real(64)[16] 32)) : _unknown[51] "inline" "private"
  { unknown normalized[309271](309270 call randToReal32 x[309244])(309274 'end of statement')(309286 return(309284 call +(309281 call *(309278 call - max[309260] min[309253]) normalized[309271]) min[309253]))
  }
  { scopeless type(309266 call real(64)[16] 32)
  } function rand32_1[309295](ref arg states[309293]:_any[178](?)) : _unknown[51] "inline" "private"
  {(309316 return(309315 call(309307 call .(309304 call states[309293] 0) c"random")(309313 call pcg_getvalid_inc 1)))
  }
  { scopeless type(309300 call uint(64)[115] 32)
  } function rand32_2[309326](ref arg states[309324]:_any[178](?)) : _unknown[51] "inline" "private"
  {(309345 return(309344 call(309336 call .(309335 call states[309324] 1) c"random")(309342 call pcg_getvalid_inc 2)))
  }
  { scopeless type(309331 call uint(64)[115] 32)
  } function boundedrand32_1[309355](ref arg states[309353]:_any[178](?), arg seed[309361] :(309360 call int(64)[13] 64), arg count[309368] :(309367 call int(64)[13] 64), arg bound[309375] :(309374 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309438 call _cond_test(309390 call == bound[309375](309389 call max(309387 call uint(64)[115] 32))))
    {(309396 return(309395 call rand32_1 states[309353]))
    }
    {(309436 return(309435 call(309404 call .(309401 call states[309353] 0) c"bounded_random_vary_inc")(309410 call pcg_getvalid_inc 1)(309414 call + bound[309375] 1)(309421 call _cast(309420 call uint(64)[115] 64) seed[309361])(309431 call _cast(309430 call uint(64)[115] 64)(309425 call - count[309368] 1)) 101 4))
    }
  }
  { scopeless type(309381 call uint(64)[115] 32)
  } function boundedrand32_2[309452](ref arg states[309450]:_any[178](?), arg seed[309458] :(309457 call int(64)[13] 64), arg count[309465] :(309464 call int(64)[13] 64), arg bound[309472] :(309471 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309535 call _cond_test(309487 call == bound[309472](309486 call max(309484 call uint(64)[115] 32))))
    {(309493 return(309492 call rand32_2 states[309450]))
    }
    {(309533 return(309532 call(309499 call .(309498 call states[309450] 1) c"bounded_random_vary_inc")(309505 call pcg_getvalid_inc 2)(309509 call + bound[309472] 1)(309516 call _cast(309515 call uint(64)[115] 64) seed[309458])(309526 call _cast(309525 call uint(64)[115] 64)(309520 call - count[309465] 1)) 102 4))
    }
  }
  { scopeless type(309478 call uint(64)[115] 32)
  } function rand64_1[309549](ref arg states[309547]:_any[178](?)) : _unknown[51] "inline" "private"
  { unknown ret[309560] 0(309558 call uint(64)[115] 64)(309563 'end of statement')(309579 call |= ret[309560](309578 call(309570 call .(309569 call states[309547] 0) c"random")(309576 call pcg_getvalid_inc 1)))(309584 call <<= ret[309560] 32)(309601 call |= ret[309560](309600 call(309592 call .(309591 call states[309547] 1) c"random")(309598 call pcg_getvalid_inc 2)))(309605 return ret[309560])
  }
  { scopeless type(309554 call uint(64)[115] 64)
  } function rand64_2[309614](ref arg states[309612]:_any[178](?)) : _unknown[51] "inline" "private"
  { unknown ret[309625] 0(309623 call uint(64)[115] 64)(309628 'end of statement')(309644 call |= ret[309625](309643 call(309635 call .(309634 call states[309612] 2) c"random")(309641 call pcg_getvalid_inc 3)))(309649 call <<= ret[309625] 32)(309666 call |= ret[309625](309665 call(309657 call .(309656 call states[309612] 3) c"random")(309663 call pcg_getvalid_inc 4)))(309670 return ret[309625])
  }
  { scopeless type(309619 call uint(64)[115] 64)
  } function boundedrand64_1[309679](ref arg states[309677]:_any[178](?), arg seed[309685] :(309684 call int(64)[13] 64), arg count[309692] :(309691 call int(64)[13] 64), arg bound[309696] : uint(64)[115]) : _unknown[51] "private"
  {
    if(309806 call _cond_test(309711 call > bound[309696](309709 call _cast uint(64)[115](309707 call max(309705 call uint(64)[115] 32)))))
    { unknown toprand[309717](309715 call _cast uint(64)[115] 0)(309720 'end of statement') unknown botrand[309726](309724 call _cast uint(64)[115] 0)(309729 'end of statement')(309747 call = toprand[309717](309746 call boundedrand32_1 states[309677] seed[309685] count[309692](309744 call _cast(309743 call uint(64)[115] 32)(309738 call >> bound[309696] 32))))(309773 call = botrand[309726](309772 call boundedrand32_2 states[309677] seed[309685] count[309692](309770 call _cast(309769 call uint(64)[115] 32)(309764 call & bound[309696](309763 call max(309761 call uint(64)[115] 32))))))(309783 return(309781 call |(309778 call << toprand[309717] 32) botrand[309726]))
    }
    {(309788 call rand32_1 states[309677])(309804 return(309803 call boundedrand32_2 states[309677] seed[309685] count[309692](309801 call _cast(309800 call uint(64)[115] 32) bound[309696])))
    }
  }
  { scopeless type uint(64)[115]
  } function checkSufficientBitsAndAdvanceOthers[309818](arg resultType[309816]:_any[178](?), ref arg states[309820]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  { unknown numGenForResultType[309826] "param"(309825 call numGenerators resultType[309816])(309829 'end of statement') unknown numGen[309835] "param"(309832 call . states[309820] c"size")(309838 'end of statement')
    if(309945 call _cond_test(309841 call > numGenForResultType[309826] numGen[309835]))
    {(309943 call compilerError(309940 call +(309921 call +(309912 call +(309893 call +(309884 call +(309865 call + "PCGRandomStream cannot produce "(309863 call _cast string[26] resultType[309816])) " (requiring ")(309891 call _cast string[26](309888 call * 32 numGenForResultType[309826]))) " bits) from a stream configured for ")(309919 call _cast string[26](309916 call * 32 numGen[309835]))) " bits of output"))
    }
    { unknown _indexOfInterest[309979] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[309980] "expr temp" "temp"(309989 'move' _iterator[309980](309987 call _getIterator(309997 call chpl_direct_range_iter(309993 call + numGenForResultType[309826] 1) numGen[309835] 1)))
      Defer
      {
        {(310013 call _freeIterator _iterator[309980])
        }
      }
      { scopeless type(310002 'move' _indexOfInterest[309979](309999 call iteratorIndex _iterator[309980]))
      }
      ForLoop[309981]
      { unknown i[310006] "index var" "insert auto destroy"(310008 'move' i[310006] _indexOfInterest[309979])
        {(309976 call(309965 call .(309964 call states[309820](309961 call - i[310006] 1)) c"random")(309974 call pcg_getvalid_inc(309971 call _cast uint(64)[115] i[310006])))
        } label _continueLabel[309984] _indexOfInterest[309979] _iterator[309980]
      } label _breakLabel[309985]
    }
  } function randlc[310026](arg resultType[310024]:_any[178](?), ref arg states[310028]:_any[178](?)) : _unknown[51] "inline" "private"
  {(310034 call checkSufficientBitsAndAdvanceOthers resultType[310024] states[310028])
    if(310353 call _cond_test(310042 call == resultType[310024](310041 call complex(128)[140] 128)))
    {(310067 return(310065 call _cast(310064 call complex(128)[140] 128)(310059 call _build_tuple(310050 call randToReal64(310048 call rand64_1 states[310028]))(310057 call randToReal64(310055 call rand64_2 states[310028])))))
    }
    {
      if(310348 call _cond_test(310075 call == resultType[310024](310074 call complex(128)[140] 64)))
      {(310100 return(310098 call _cast(310097 call complex(128)[140] 64)(310092 call _build_tuple(310083 call randToReal32(310081 call rand32_1 states[310028]))(310090 call randToReal32(310088 call rand32_2 states[310028])))))
      }
      {
        if(310343 call _cond_test(310108 call == resultType[310024](310107 call imag(64)[130] 64)))
        {(310120 return(310119 call _r2i(310117 call randToReal64(310115 call rand64_1 states[310028]))))
        }
        {
          if(310338 call _cond_test(310128 call == resultType[310024](310127 call imag(64)[130] 32)))
          {(310140 return(310139 call _r2i(310137 call randToReal32(310135 call rand32_1 states[310028]))))
          }
          {
            if(310333 call _cond_test(310148 call == resultType[310024](310147 call real(64)[16] 64)))
            {(310157 return(310156 call randToReal64(310154 call rand64_1 states[310028])))
            }
            {
              if(310328 call _cond_test(310165 call == resultType[310024](310164 call real(64)[16] 32)))
              {(310174 return(310173 call randToReal32(310171 call rand32_1 states[310028])))
              }
              {
                if(310323 call _cond_test(310191 call ||(310182 call == resultType[310024](310181 call uint(64)[115] 64))(310189 call == resultType[310024](310188 call int(64)[13] 64))))
                {(310200 return(310198 call _cast resultType[310024](310196 call rand64_1 states[310028])))
                }
                {
                  if(310318 call _cond_test(310217 call ||(310208 call == resultType[310024](310207 call uint(64)[115] 32))(310215 call == resultType[310024](310214 call int(64)[13] 32))))
                  {(310226 return(310224 call _cast resultType[310024](310222 call rand32_1 states[310028])))
                  }
                  {
                    if(310313 call _cond_test(310243 call ||(310234 call == resultType[310024](310233 call uint(64)[115] 16))(310241 call == resultType[310024](310240 call int(64)[13] 16))))
                    {(310255 return(310253 call _cast resultType[310024](310250 call >>(310248 call rand32_1 states[310028]) 16)))
                    }
                    {
                      if(310308 call _cond_test(310272 call ||(310263 call == resultType[310024](310262 call uint(64)[115] 8))(310270 call == resultType[310024](310269 call int(64)[13] 8))))
                      {(310284 return(310282 call _cast resultType[310024](310279 call >>(310277 call rand32_1 states[310028]) 24)))
                      }
                      {
                        if(310304 call _cond_test(310290 call isBoolType resultType[310024]))
                        {(310301 return(310299 call !=(310296 call >>(310294 call rand32_1 states[310028]) 31) 0))
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } function randlc_bounded[310364](arg resultType[310362]:_any[178](?), ref arg states[310366]:_any[178](?), arg seed[310372] :(310371 call int(64)[13] 64), arg count[310379] :(310378 call int(64)[13] 64), arg min[310382]:_any[178](?), arg max[310384]:_any[178](?)) : _unknown[51] "inline" "private"
  {(310390 call checkSufficientBitsAndAdvanceOthers resultType[310362] states[310366])
    if(310851 call _cond_test(310398 call == resultType[310362](310397 call complex(128)[140] 128)))
    {(310439 return(310437 call _cast(310436 call complex(128)[140] 128)(310431 call _build_tuple(310414 call randToReal64(310404 call rand64_1 states[310366])(310407 call . min[310382] c"re")(310411 call . max[310384] c"re"))(310429 call randToReal64(310419 call rand64_2 states[310366])(310422 call . min[310382] c"im")(310426 call . max[310384] c"im")))))
    }
    {
      if(310846 call _cond_test(310447 call == resultType[310362](310446 call complex(128)[140] 64)))
      {(310488 return(310486 call _cast(310485 call complex(128)[140] 64)(310480 call _build_tuple(310463 call randToReal32(310453 call rand32_1 states[310366])(310456 call . min[310382] c"re")(310460 call . max[310384] c"re"))(310478 call randToReal32(310468 call rand32_2 states[310366])(310471 call . min[310382] c"im")(310475 call . max[310384] c"im")))))
      }
      {
        if(310841 call _cond_test(310496 call == resultType[310362](310495 call imag(64)[130] 64)))
        {(310516 return(310515 call _r2i(310513 call randToReal64(310503 call rand64_1 states[310366])(310508 call _i2r min[310382])(310512 call _i2r max[310384]))))
        }
        {
          if(310836 call _cond_test(310524 call == resultType[310362](310523 call imag(64)[130] 32)))
          {(310544 return(310543 call _r2i(310541 call randToReal32(310531 call rand32_1 states[310366])(310536 call _i2r min[310382])(310540 call _i2r max[310384]))))
          }
          {
            if(310831 call _cond_test(310552 call == resultType[310362](310551 call real(64)[16] 64)))
            {(310563 return(310562 call randToReal64(310558 call rand64_1 states[310366]) min[310382] max[310384]))
            }
            {
              if(310826 call _cond_test(310571 call == resultType[310362](310570 call real(64)[16] 32)))
              {(310582 return(310581 call randToReal32(310577 call rand32_1 states[310366]) min[310382] max[310384]))
              }
              {
                if(310821 call _cond_test(310599 call ||(310590 call == resultType[310362](310589 call uint(64)[115] 64))(310597 call == resultType[310362](310596 call int(64)[13] 64))))
                {(310629 return(310627 call _cast resultType[310362](310624 call +(310616 call boundedrand64_1 states[310366] seed[310372] count[310379](310614 call _cast(310613 call uint(64)[115] 64)(310608 call - max[310384] min[310382])))(310622 call _cast(310621 call uint(64)[115] 64) min[310382]))))
                }
                {
                  if(310816 call _cond_test(310646 call ||(310637 call == resultType[310362](310636 call uint(64)[115] 32))(310644 call == resultType[310362](310643 call int(64)[13] 32))))
                  {(310676 return(310674 call _cast resultType[310362](310671 call +(310663 call boundedrand32_1 states[310366] seed[310372] count[310379](310661 call _cast(310660 call uint(64)[115] 32)(310655 call - max[310384] min[310382])))(310669 call _cast(310668 call uint(64)[115] 32) min[310382]))))
                  }
                  {
                    if(310811 call _cond_test(310693 call ||(310684 call == resultType[310362](310683 call uint(64)[115] 16))(310691 call == resultType[310362](310690 call int(64)[13] 16))))
                    {(310723 return(310721 call _cast resultType[310362](310718 call +(310710 call boundedrand32_1 states[310366] seed[310372] count[310379](310708 call _cast(310707 call uint(64)[115] 32)(310702 call - max[310384] min[310382])))(310716 call _cast(310715 call uint(64)[115] 32) min[310382]))))
                    }
                    {
                      if(310806 call _cond_test(310740 call ||(310731 call == resultType[310362](310730 call uint(64)[115] 8))(310738 call == resultType[310362](310737 call int(64)[13] 8))))
                      {(310770 return(310768 call _cast resultType[310362](310765 call +(310757 call boundedrand32_1 states[310366] seed[310372] count[310379](310755 call _cast(310754 call uint(64)[115] 32)(310749 call - max[310384] min[310382])))(310763 call _cast(310762 call uint(64)[115] 32) min[310382]))))
                      }
                      {
                        if(310802 call _cond_test(310776 call isBoolType resultType[310362]))
                        {(310796 call compilerError "bounded rand with boolean type")(310800 return 0)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } function randlc_skipto[310862](arg resultType[310860]:_any[178](?), arg seed[310868] :(310867 call int(64)[13] 64), arg n[310872] : integral[199](?)) : _unknown[51] "private"
  { unknown states[310882](310880 call *(310878 call numGenerators resultType[310860]) pcg_setseq_64_xsh_rr_32_rng[312671])(310885 'end of statement')
    { unknown i[310948] 0 unknown tmp[310949] "maybe param" "temp"(310961 'move' tmp[310949](310959 call chpl_compute_low_param_loop_bound 0(310893 call -(310889 call . states[310882] c"size") 1))) unknown tmp[310950] "maybe param" "temp"(310974 'move' tmp[310950](310972 call chpl_compute_high_param_loop_bound 0(310966 call -(310968 call . states[310882] c"size") 1))) unknown tmp[310951] "maybe param" "temp"(310977 'move' tmp[310951] 1)
      ParamForLoop[310979]
      { i[310948] tmp[310949] tmp[310950] tmp[310951]
        { unknown inc[310904] "param"(310903 call pcg_getvalid_inc(310900 call + i[310948] 1))(310907 'end of statement')(310925 call(310913 call .(310912 call states[310882] i[310948]) c"srandom")(310921 call _cast(310920 call uint(64)[115] 64) seed[310868]) inc[310904])(310946 call(310931 call .(310930 call states[310882] i[310948]) c"advance") inc[310904](310944 call _cast(310943 call uint(64)[115] 64)(310938 call - n[310872] 1)))
        }
      } label _unused_continueLabel[310953] label _breakLabel[310952]
    }(310989 return states[310882])
  } function outer[310997](arg ranges[310995]:_any[178](?), param arg dim[311001] : int(64)[13] = 0) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(311169 call _cond_test(311013 call ==(311007 call + dim[311001] 2)(311010 call . ranges[310995] c"size")))
    {
      { unknown _indexOfInterest[311025] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311026] "expr temp" "temp"(311035 'move' _iterator[311026](311033 call _getIterator(311019 call ranges[310995] dim[311001])))
        Defer
        {
          {(311052 call _freeIterator _iterator[311026])
          }
        }
        { scopeless type(311041 'move' _indexOfInterest[311025](311038 call iteratorIndex _iterator[311026]))
        }
        ForLoop[311027]
        { unknown i[311045] "index var" "insert auto destroy"(311047 'move' i[311045] _indexOfInterest[311025])(311023 yield(311021 call _build_tuple i[311045])) label _continueLabel[311030] _indexOfInterest[311025] _iterator[311026]
        } label _breakLabel[311031]
      }
    }
    {
      if(311165 call _cond_test(311068 call <(311062 call + dim[311001] 2)(311065 call . ranges[310995] c"size")))
      {
        { unknown _indexOfInterest[311126] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311127] "expr temp" "temp"(311136 'move' _iterator[311127](311134 call _getIterator(311074 call ranges[310995] dim[311001])))
          Defer
          {
            {(311153 call _freeIterator _iterator[311127])
            }
          }
          { scopeless type(311142 'move' _indexOfInterest[311126](311139 call iteratorIndex _iterator[311127]))
          }
          ForLoop[311128]
          { unknown i[311146] "index var" "insert auto destroy"(311148 'move' i[311146] _indexOfInterest[311126])
            { unknown _indexOfInterest[311092] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311093] "expr temp" "temp"(311102 'move' _iterator[311093](311100 call _getIterator(311083 call outer ranges[310995](311081 call + dim[311001] 1))))
              Defer
              {
                {(311119 call _freeIterator _iterator[311093])
                }
              }
              { scopeless type(311108 'move' _indexOfInterest[311092](311105 call iteratorIndex _iterator[311093]))
              }
              ForLoop[311094]
              { unknown j[311112] "index var" "insert auto destroy"(311114 'move' j[311112] _indexOfInterest[311092])(311090 yield(311088 call _build_tuple i[311146](311086 'expand_tuple' j[311112]))) label _continueLabel[311097] _indexOfInterest[311092] _iterator[311093]
              } label _breakLabel[311098]
            } label _continueLabel[311131] _indexOfInterest[311126] _iterator[311127]
          } label _breakLabel[311132]
        }
      }
      {(311162 yield 0)
      }
    }
  } function PCGRandomPrivate_iterate[311181](arg resultType[311179]:_any[178](?), arg D[311184] : _domain[125902](?), arg seed[311191] :(311190 call int(64)[13] 64), arg start[311198] :(311197 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown cursor[311207](311206 call randlc_skipto resultType[311179] seed[311191] start[311198])(311210 'end of statement')
    { unknown _indexOfInterest[311221] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311222] "expr temp" "temp"(311231 'move' _iterator[311222](311229 call _getIterator D[311184]))
      Defer
      {
        {(311247 call _freeIterator _iterator[311222])
        }
      }
      { scopeless type(311236 'move' _indexOfInterest[311221](311233 call iteratorIndex _iterator[311222]))
      }
      ForLoop[311223]
      { unknown i[311240] "index var" "insert auto destroy"(311242 'move' i[311240] _indexOfInterest[311221])(311219 yield(311218 call randlc resultType[311179] cursor[311207])) label _continueLabel[311226] _indexOfInterest[311221] _iterator[311222]
      } label _breakLabel[311227]
    }
  } function PCGRandomPrivate_iterate[311260](arg resultType[311258]:_any[178](?), arg D[311263] : _domain[125902](?), arg seed[311270] :(311269 call int(64)[13] 64), arg start[311277] :(311276 call int(64)[13] 64), param arg tag[311281] : iterKind[453]) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    { unknown _indexOfInterest[311306] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311307] "expr temp" "temp"(311316 'move' _iterator[311307](311314 call _getIterator(311302 call(311293 call . D[311263] c"these")(tag = leader[447]))))
      Defer
      {
        {(311333 call _freeIterator _iterator[311307])
        }
      }
      { scopeless type(311322 'move' _indexOfInterest[311306](311319 call iteratorIndex _iterator[311307]))
      }
      ForLoop[311308]
      { unknown block[311326] "index var" "insert auto destroy"(311328 'move' block[311326] _indexOfInterest[311306])(311304 yield block[311326]) label _continueLabel[311311] _indexOfInterest[311306] _iterator[311307]
      } label _breakLabel[311312]
    }
  }
  {(311289 call == tag[311281] leader[447])
  } function PCGRandomPrivate_iterate[311348](arg resultType[311346]:_any[178](?), arg D[311351] : _domain[125902](?), arg seed[311358] :(311357 call int(64)[13] 64), arg start[311365] :(311364 call int(64)[13] 64), param arg tag[311369] : iterKind[453], arg followThis[311372]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown multiplier[311386] "param" 1(311389 'end of statement') const ZD[311394] "const"(311393 call computeZeroBasedDomain D[311351])(311397 'end of statement') const innerRange[311408] "const"(311407 call followThis[311372](311404 call -(311400 call . ZD[311394] c"rank") 1))(311411 'end of statement')
    { unknown _indexOfInterest[311642] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311643] "expr temp" "temp"(311652 'move' _iterator[311643](311650 call _getIterator(311416 call outer followThis[311372])))
      Defer
      {
        {(311669 call _freeIterator _iterator[311643])
        }
      }
      { scopeless type(311658 'move' _indexOfInterest[311642](311655 call iteratorIndex _iterator[311643]))
      }
      ForLoop[311644]
      { unknown outer[311662] "index var" "insert auto destroy"(311664 'move' outer[311662] _indexOfInterest[311642])
        { unknown myStart[311418] start[311365](311421 'end of statement')
          if(311487 call _cond_test(311428 call >(311424 call . ZD[311394] c"rank") 1))
          {(311458 call += myStart[311418](311456 call * multiplier[311386](311455 call(311447 call .(311446 call(311433 call . ZD[311394] c"indexOrder")(311443 call _build_tuple(311437 'expand_tuple' outer[311662])(311439 call . innerRange[311408] c"low"))) c"safeCast")(311453 call int(64)[13] 64))))
          }
          {(311484 call += myStart[311418](311482 call * multiplier[311386](311481 call(311473 call .(311472 call(311464 call . ZD[311394] c"indexOrder")(311468 call . innerRange[311408] c"low")) c"safeCast")(311479 call int(64)[13] 64))))
          }
          if(311638 call _cond_test(311497 call !(311494 call . innerRange[311408] c"stridable")))
          { unknown cursor[311505](311504 call randlc_skipto resultType[311346] seed[311358] myStart[311418])(311508 'end of statement')
            { unknown _indexOfInterest[311519] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311520] "expr temp" "temp"(311529 'move' _iterator[311520](311527 call _getIterator innerRange[311408]))
              Defer
              {
                {(311545 call _freeIterator _iterator[311520])
                }
              }
              { scopeless type(311534 'move' _indexOfInterest[311519](311531 call iteratorIndex _iterator[311520]))
              }
              ForLoop[311521]
              { unknown i[311538] "index var" "insert auto destroy"(311540 'move' i[311538] _indexOfInterest[311519])(311517 yield(311516 call randlc resultType[311346] cursor[311505])) label _continueLabel[311524] _indexOfInterest[311519] _iterator[311520]
              } label _breakLabel[311525]
            }
          }
          {(311566 call -= myStart[311418](311565 call(311557 call .(311554 call . innerRange[311408] c"low") c"safeCast")(311563 call int(64)[13] 64)))
            { unknown _indexOfInterest[311605] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311606] "expr temp" "temp"(311615 'move' _iterator[311606](311613 call _getIterator innerRange[311408]))
              Defer
              {
                {(311631 call _freeIterator _iterator[311606])
                }
              }
              { scopeless type(311620 'move' _indexOfInterest[311605](311617 call iteratorIndex _iterator[311606]))
              }
              ForLoop[311607]
              { unknown i[311624] "index var" "insert auto destroy"(311626 'move' i[311624] _indexOfInterest[311605])
                { unknown cursor[311593](311592 call randlc_skipto resultType[311346] seed[311358](311590 call + myStart[311418](311588 call *(311586 call(311578 call . i[311624] c"safeCast")(311584 call int(64)[13] 64)) multiplier[311386])))(311596 'end of statement')(311603 yield(311602 call randlc resultType[311346] cursor[311593]))
                } label _continueLabel[311610] _indexOfInterest[311605] _iterator[311606]
              } label _breakLabel[311611]
            }
          }
        } label _continueLabel[311647] _indexOfInterest[311642] _iterator[311643]
      } label _breakLabel[311648]
    }(355454 'used modules list'(311382 'use' DSIUtil[230800]))
  }
  {(311379 call == tag[311369] follower[449])
  }(355444 'used modules list'(352978 'use' ChapelStandard[20264])(307465 'use' RandomSupport[307348])(307469 'use' Random[304561])(307472 'use' PCGRandomLib[311681])(307475 'use' ChapelLocks[187256]))
}