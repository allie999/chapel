AST dump for PCGRandom after pass scopeResolve.
Module use list: ChapelStandard RandomSupport Random PCGRandomLib ChapelLocks HaltWrappers DSIUtil 

{ function numGenerators[307569](arg t[307567]:_any[178](?)) param : _unknown[51] "private"
  {
    if(307590 call _cond_test(307574 call isBoolType t[307567]))
    {(307576 return 1)
    }
    {(307588 return(307586 call /(307583 call +(307581 call numBits t[307567]) 31) 32))
    }
  } function PCGRandomStream[309123](?).init[307621](arg _mt[309127]:_MT[238], arg this[309125]:PCGRandomStream[309123](?), arg eltType[307619]:_any[178](?), arg seed[307633] :(307626 call int(64)[13] 64) =(307630 call . SeedGenerator[307532] c"currentTime"), param arg parSafe[307639] : bool[10] = 1) : _unknown[51] "method" "primary method" "no return value for void"
  {(307648 call =(307644 call . this[309125] c"eltType") eltType[307619])(307659 call =(307655 call . this[309125] c"seed") seed[307633])(307667 call =(307663 call . this[309125] c"parSafe") parSafe[307639])(307675 call(307671 call . this[309125] c"complete"))
    { unknown i[307719] 0 unknown tmp[307720] "maybe param" "temp"(307732 'move' tmp[307720](307730 call chpl_compute_low_param_loop_bound 0(307683 call -(307681 call numGenerators eltType[307619]) 1))) unknown tmp[307721] "maybe param" "temp"(307744 'move' tmp[307721](307742 call chpl_compute_high_param_loop_bound 0(307737 call -(307739 call numGenerators eltType[307619]) 1))) unknown tmp[307722] "maybe param" "temp"(307747 'move' tmp[307722] 1)
      ParamForLoop[307749]
      { i[307719] tmp[307720] tmp[307721] tmp[307722]
        { unknown inc[307694] "param"(307693 call pcg_getvalid_inc(307690 call + i[307719] 1))(307697 'end of statement')(307717 call(307705 call .(307702 call(407097 call . this[309125] c"PCGRandomStreamPrivate_rngs") i[307719]) c"srandom")(307713 call _cast(307712 call uint(64)[115] 64) seed[307633]) inc[307694])
        }
      } label _unused_continueLabel[307724] label _breakLabel[307723]
    }(307760 call =(407108 call . this[309125] c"PCGRandomStreamPrivate_count") 1)
  } function PCGRandomStream[309123](?).PCGRandomStreamPrivate_getNext_noLock[307769](arg _mt[309131]:_MT[238], arg this[309129]:PCGRandomStream[309123](?), arg resultType[307767]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc"
  {(307773 call +=(407113 call . this[309129] c"PCGRandomStreamPrivate_count") 1)(307782 return(307781 call randlc resultType[307767](407119 call . this[309129] c"PCGRandomStreamPrivate_rngs")))
  } function PCGRandomStream[309123](?).PCGRandomStreamPrivate_getNext_noLock[307790](arg _mt[309135]:_MT[238], arg this[309133]:PCGRandomStream[309123](?), arg resultType[307788]:_any[178](?), arg min[307793] : resultType[307788], arg max[307797] : resultType[307788]) : _unknown[51] "method" "primary method" "no doc"
  {(307802 call +=(407126 call . this[309133] c"PCGRandomStreamPrivate_count") 1)(307818 return(307817 call randlc_bounded resultType[307788](407132 call . this[309133] c"PCGRandomStreamPrivate_rngs")(407137 call . this[309133] c"seed")(307813 call -(407142 call . this[309133] c"PCGRandomStreamPrivate_count") 1) min[307793] max[307797]))
  } function PCGRandomStream[309123](?).PCGRandomStreamPrivate_skipToNth_noLock[307828](arg _mt[309139]:_MT[238], arg this[309137]:PCGRandomStream[309123](?), in arg n[307825] : integral[199](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(307835 call =(407150 call . this[309137] c"PCGRandomStreamPrivate_count")(307833 call + n[307825] 1))(307849 call =(407156 call . this[309137] c"PCGRandomStreamPrivate_rngs")(307848 call randlc_skipto(407161 call . this[309137] c"eltType")(407166 call . this[309137] c"seed")(307846 call + n[307825] 1)))
  } function PCGRandomStream[309123](?).getNext[307860](arg _mt[309143]:_MT[238], arg this[309141]:PCGRandomStream[309123](?), arg resultType[307857]:_any[178](?) =(407172 call . this[309141] c"eltType")) : _unknown[51] "method" "primary method"
  {(307865 call(407179 call . this[309141] c"_lock")) const result[307872] "const"(307871 call(407185 call . this[309141] c"PCGRandomStreamPrivate_getNext_noLock") resultType[307857])(307875 'end of statement')(307878 call(407192 call . this[309141] c"_unlock"))(307881 return result[307872])
  }
  { scopeless type resultType[307857]
  } function PCGRandomStream[309123](?).getNext[307892](arg _mt[309147]:_MT[238], arg this[309145]:PCGRandomStream[309123](?), arg min[307889] :(407198 call . this[309145] c"eltType"), arg max[307895] :(407203 call . this[309145] c"eltType")) : _unknown[51] "method" "primary method"
  {(307905 call(407212 call . this[309145] c"_lock"))
    if(307956 call _cond_test(307912 call && 1(307910 call > min[307889] max[307895])))
    {(307954 call boundsCheckHalt module=[255] HaltWrappers[209998](307951 call +(307948 call +(307942 call +(307939 call + "Cannot generate random numbers within empty range: ["(307937 call _cast string[26] min[307889])) ", ")(307946 call _cast string[26] max[307895])) "]"))(365073 'referenced modules list' HaltWrappers[209998])
    } const result[307967] "const"(307966 call(407221 call . this[309145] c"PCGRandomStreamPrivate_getNext_noLock")(407226 call . this[309145] c"eltType") min[307889] max[307895])(307970 'end of statement')(307973 call(407232 call . this[309145] c"_unlock"))(307976 return result[307967])(355538 'used modules list'(307900 'use' HaltWrappers[209998]))
  }
  { scopeless type(407208 call . this[309145] c"eltType")
  } function PCGRandomStream[309123](?).getNext[307985](arg _mt[309151]:_MT[238], arg this[309149]:PCGRandomStream[309123](?), arg resultType[307983]:_any[178](?), arg min[307988] : resultType[307983], arg max[307992] : resultType[307983]) : _unknown[51] "method" "primary method"
  {(308002 call(407240 call . this[309149] c"_lock"))
    if(308037 call _cond_test(308009 call && 1(308007 call > min[307988] max[307992])))
    {(308035 call boundsCheckHalt module=[255] HaltWrappers[209998](308032 call +(308029 call +(308023 call +(308020 call + "Cannot generate random numbers within empty range: ["(308018 call _cast string[26] min[307988])) ", ")(308027 call _cast string[26] max[307992])) "]"))(365079 'referenced modules list' HaltWrappers[209998])
    } const result[308048] "const"(308047 call(407249 call . this[309149] c"PCGRandomStreamPrivate_getNext_noLock") resultType[307983] min[307988] max[307992])(308051 'end of statement')(308054 call(407256 call . this[309149] c"_unlock"))(308057 return result[308048])(355540 'used modules list'(307997 'use' HaltWrappers[209998]))
  }
  { scopeless type resultType[307983]
  } function PCGRandomStream[309123](?).skipToNth[308068](arg _mt[309155]:_MT[238], arg this[309153]:PCGRandomStream[309123](?), arg n[308065] : integral[199](?)) : _unknown[51] throws "method" "primary method" "no return value for void"
  {
    if(308105 call _cond_test(308072 call < n[308065] 0))
    {(308103 'throw'(308076 'new'(_chpl_manager = _owned[30](?))(308102 call IllegalArgumentError[388778](?)(308099 call + "PCGRandomStream.skipToNth(n) called with negative 'n' value "(308097 call _cast string[26] n[308065])))))
    }(308113 call(407265 call . this[309153] c"_lock"))(308118 call(407271 call . this[309153] c"PCGRandomStreamPrivate_skipToNth_noLock") n[308065])(308122 call(407276 call . this[309153] c"_unlock"))
  } function PCGRandomStream[309123](?).getNth[308132](arg _mt[309159]:_MT[238], arg this[309157]:PCGRandomStream[309123](?), arg n[308129] : integral[199](?)) : _unknown[51] throws "method" "primary method"
  {
    if(308170 call _cond_test(308137 call < n[308129] 0))
    {(308168 'throw'(308141 'new'(_chpl_manager = _owned[30](?))(308167 call IllegalArgumentError[388778](?)(308164 call + "PCGRandomStream.getNth(n) called with negative 'n' value "(308162 call _cast string[26] n[308129])))))
    }(308178 call(407289 call . this[309157] c"_lock"))(308183 call(407293 call . this[309157] c"PCGRandomStreamPrivate_skipToNth_noLock") n[308129]) const result[308189] "const"(308188 call(407298 call . this[309157] c"PCGRandomStreamPrivate_getNext_noLock")(407303 call . this[309157] c"eltType"))(308192 'end of statement')(308195 call(407307 call . this[309157] c"_unlock"))(308198 return result[308189])
  }
  { scopeless type(407282 call . this[309157] c"eltType")
  } function PCGRandomStream[309123](?).fillRandom[308212](arg _mt[309163]:_MT[238], arg this[309161]:PCGRandomStream[309123](?), arg arr[308209] :(308206 call chpl__buildArrayRuntimeType nil[44](407313 call . this[309161] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    Forall {
      induction variables:
        unknown x[308239] "index var" "insert auto destroy"
        unknown r[308241] "index var" "insert auto destroy"
      iterated expressions:
        arr[308209]
        (308231 call(407318 call . this[309161] c"iterate")(308223 call . arr[308209] c"_dom")(308228 call . arr[308209] c"eltType"))
      shadow variables:
      other variables
        forall body
      {(308235 call = x[308239] r[308241])
      }
    }
  } function PCGRandomStream[309123](?).choice[308257](arg _mt[309167]:_MT[238], arg this[309165]:PCGRandomStream[309123](?), arg x[308254] :(308252 call chpl__buildArrayRuntimeType unknown dom[308249]), arg size[308262] : unknown sizeType[308259] = none[57], arg replace[308267] = 1, arg prob[308273] : unknown probType[308270] = none[57]) : _unknown[51] throws "method" "primary method"
  { unknown idx[308288](308287 call _choice this[309165] dom[308249](size = size[308262])(replace = replace[308267])(prob = prob[308273]))(308291 'end of statement')(308297 return(308296 call x[308254] idx[308288]))
  } function PCGRandomStream[309123](?).choice[308311](arg _mt[309171]:_MT[238], arg this[309169]:PCGRandomStream[309123](?), arg x[308308] :(308307 call range[64316](?)(stridable = ?[260])), arg size[308316] : unknown sizeType[308313] = none[57], arg replace[308321] = 1, arg prob[308327] : unknown probType[308324] = none[57]) : _unknown[51] throws "method" "primary method"
  { unknown dom[308338](308336 call chpl__buildDomainRuntimeType defaultDist[94050] 1(stridable = 1))(308341 'end of statement')
    if(308395 call _cond_test(308347 call !(308346 call isBoundedRange x[308308])))
    {(308372 'throw'(308351 'new'(_chpl_manager = _owned[30](?))(308371 call IllegalArgumentError[388778](?) "input range must be bounded")))(308383 call = dom[308338](308381 call chpl__buildDomainExpr(308378 call chpl_build_bounded_range 1 2)))
    }
    {(308391 call = dom[308338](308389 call chpl__buildDomainExpr x[308308]))
    }(308410 return(308409 call _choice this[309169] dom[308338](size = size[308316])(replace = replace[308321])(prob = prob[308327])))
  } function PCGRandomStream[309123](?).choice[308420](arg _mt[309175]:_MT[238], arg this[309173]:PCGRandomStream[309123](?), arg x[308417] : _domain[125902](?), arg size[308425] : unknown sizeType[308422] = none[57], arg replace[308430] = 1, arg prob[308436] : unknown probType[308433] = none[57]) : _unknown[51] throws "method" "primary method"
  {(308451 return(308450 call _choice this[309173] x[308417](size = size[308425])(replace = replace[308430])(prob = prob[308436])))
  } function PCGRandomStream[309123](?).shuffle[308468](arg _mt[309179]:_MT[238], arg this[309177]:PCGRandomStream[309123](?), arg arr[308465] :(308463 call chpl__buildArrayRuntimeType unknown D[308458] unknown eltType[308461])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(308498 call _cond_test(308475 call !=(308471 call . D[308458] c"rank") 1))
    {(308496 call compilerError "Shuffle requires 1-D array")
    } const low[308508] "const"(308505 call . D[308458] c"alignedLow") const stride[308518] "const"(308517 call abs(308513 call . D[308458] c"stride"))(308521 'end of statement')(308524 call(407349 call . this[309177] c"_lock"))
    { unknown _indexOfInterest[308603] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[308604] "expr temp" "temp"(308613 'move' _iterator[308604](308611 call _getIterator(308539 call chpl_by(308534 call #(308528 call chpl_build_low_bounded_range 0)(308531 call . D[308458] c"size"))(308537 call - 1))))
      Defer
      {
        {(308641 call _freeIterator _iterator[308604])
        }
      }
      { scopeless type(308630 'move' _indexOfInterest[308603](308627 call iteratorIndex _iterator[308604]))
      }
      ForLoop[308605]
      { unknown i[308634] "index var" "insert auto destroy"(308636 'move' i[308634] _indexOfInterest[308603])
        { unknown k[308553](308552 call randlc_bounded(308543 call . D[308458] c"idxType")(407354 call . this[309177] c"PCGRandomStreamPrivate_rngs")(407359 call . this[309177] c"seed")(407364 call . this[309177] c"PCGRandomStreamPrivate_count") 0 i[308634])(308556 'end of statement') unknown j[308559] i[308634](308562 'end of statement')
          if(308578 call _cond_test(308565 call > stride[308518] 1))
          {(308569 call *= k[308553] stride[308518])(308575 call *= j[308559] stride[308518])
          }(308584 call += k[308553] low[308508])(308589 call += j[308559] low[308508])(308600 call <=>(308595 call arr[308465] k[308553])(308599 call arr[308465] j[308559]))
        } label _continueLabel[308608] _indexOfInterest[308603] _iterator[308604]
      } label _breakLabel[308609]
    }(308653 call +=(407384 call . this[309177] c"PCGRandomStreamPrivate_count")(308650 call . D[308458] c"size"))(308658 call(407388 call . this[309177] c"_unlock"))
  } function PCGRandomStream[309123](?).permutation[308671](arg _mt[309183]:_MT[238], arg this[309181]:PCGRandomStream[309123](?), arg arr[308668] :(308665 call chpl__buildArrayRuntimeType nil[44](407393 call . this[309181] c"eltType"))) : _unknown[51] "method" "primary method" "no return value for void"
  { unknown low[308686](308683 call .(308682 call(308677 call .(308674 call . arr[308668] c"_dom") c"dim") 0) c"low")(308689 'end of statement') unknown high[308704](308701 call .(308700 call(308695 call .(308692 call . arr[308668] c"_dom") c"dim") 0) c"high")(308707 'end of statement')
    if(308739 call _cond_test(308716 call !=(308712 call .(308709 call . arr[308668] c"_dom") c"rank") 1))
    {(308737 call compilerError "Permutation requires 1-D array")
    }(308746 call(407397 call . this[309181] c"_lock"))
    { unknown _indexOfInterest[308792] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[308793] "expr temp" "temp"(308802 'move' _iterator[308793](308800 call _getIterator(308807 call chpl_direct_range_iter low[308686] high[308704] 1)))
      Defer
      {
        {(308823 call _freeIterator _iterator[308793])
        }
      }
      { scopeless type(308812 'move' _indexOfInterest[308792](308809 call iteratorIndex _iterator[308793]))
      }
      ForLoop[308794]
      { unknown i[308816] "index var" "insert auto destroy"(308818 'move' i[308816] _indexOfInterest[308792])
        { unknown j[308768](308767 call randlc_bounded(308758 call .(308755 call . arr[308668] c"_dom") c"idxType")(407402 call . this[309181] c"PCGRandomStreamPrivate_rngs")(407407 call . this[309181] c"seed")(407412 call . this[309181] c"PCGRandomStreamPrivate_count") low[308686] i[308816])(308771 'end of statement')(308781 call =(308776 call arr[308668] i[308816])(308780 call arr[308668] j[308768]))(308789 call =(308787 call arr[308668] j[308768]) i[308816])
        } label _continueLabel[308797] _indexOfInterest[308792] _iterator[308793]
      } label _breakLabel[308798]
    }(308835 call +=(407428 call . this[309181] c"PCGRandomStreamPrivate_count")(308833 call - high[308704] low[308686]))(308840 call(407434 call . this[309181] c"_unlock"))
  } function PCGRandomStream[309123](?).fillRandom[308852](arg _mt[309187]:_MT[238], arg this[309185]:PCGRandomStream[309123](?), arg arr[308849] :(308846 call chpl__buildArrayRuntimeType nil[44])) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {(308898 call compilerError "PCGRandomStream(eltType="(308875 call _cast string[26](407439 call . this[309185] c"eltType")) ") can only be used to fill arrays of "(308896 call _cast string[26](407444 call . this[309185] c"eltType")))
  } function PCGRandomStream[309123](?).iterate[308909](arg _mt[309191]:_MT[238], arg this[309189]:PCGRandomStream[309123](?), arg D[308906] : _domain[125902](?), arg resultType[308912]:_any[178](?) =(407450 call . this[309189] c"eltType")) : _unknown[51] "method" "primary method" "fn returns iterator"
  {(308917 call(407454 call . this[309189] c"_lock")) const start[308921] "const"(407459 call . this[309189] c"PCGRandomStreamPrivate_count")(308924 'end of statement')(308939 call +=(407464 call . this[309189] c"PCGRandomStreamPrivate_count")(308938 call(308930 call .(308927 call . D[308906] c"size") c"safeCast")(308936 call int(64)[13] 64)))(308948 call(407468 call . this[309189] c"PCGRandomStreamPrivate_skipToNth_noLock")(308945 call -(407473 call . this[309189] c"PCGRandomStreamPrivate_count") 1))(308952 call(407477 call . this[309189] c"_unlock"))(308961 return(308960 call PCGRandomPrivate_iterate resultType[308912] D[308906](407484 call . this[309189] c"seed") start[308921]))
  } function PCGRandomStream[309123](?).iterate[308971](arg _mt[309195]:_MT[238], arg this[309193]:PCGRandomStream[309123](?), arg D[308968] : _domain[125902](?), arg resultType[308974]:_any[178](?) =(407491 call . this[309193] c"eltType"), param arg tag[308977]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "fn returns iterator"
  { const start[308987] "const"(407497 call . this[309193] c"PCGRandomStreamPrivate_count")(308990 'end of statement')(309000 return(308999 call PCGRandomPrivate_iterate resultType[308974] D[308968](407504 call . this[309193] c"seed") start[308987] tag[308977]))
  }
  {(308984 call == tag[308977] leader[447])
  } function PCGRandomStream[309123](?).writeThis[309009](arg _mt[309199]:_MT[238], arg this[309197]:PCGRandomStream[309123](?), arg f[309007]:_any[178](?)) : _unknown[51] throws "method" "primary method" "no doc" "method overrides" "no return value for void"
  {(309013 call <~> f[309007] "PCGRandomStream(eltType=")(309022 call <~> f[309007](309020 call _cast string[26](407513 call . this[309197] c"eltType")))(309027 call <~> f[309007] ", parSafe=")(309032 call <~> f[309007](407520 call . this[309197] c"parSafe"))(309037 call <~> f[309007] ", seed=")(309042 call <~> f[309007](407527 call . this[309197] c"seed"))(309047 call <~> f[309007] ")")
  } function PCGRandomStream[309123](?)._lock[309064](arg _mt[309203]:_MT[238], arg this[309201]:PCGRandomStream[309123](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(309074 call _cond_test(407535 call . this[309201] c"parSafe"))
    {(309072 call(309068 call .(365102 call . this[309201] c"_l") c"lock"))
    }
  } function PCGRandomStream[309123](?)._unlock[309084](arg _mt[309207]:_MT[238], arg this[309205]:PCGRandomStream[309123](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    if(309094 call _cond_test(407540 call . this[309205] c"parSafe"))
    {(309092 call(309088 call .(365107 call . this[309205] c"_l") c"unlock"))
    }
  } type PCGRandomStream[309123](?) val super[355776]:object[22] "super class" unknown eltType[307600] "type variable" const seed[307607] "const"(307606 call int(64)[13] 64) unknown parSafe[307613] "param" 1 bool[10] unknown _l[309058] "no doc"(309055 IfExpr  parSafe[307613] then
  { scopeless chpl_LocalSpinlock[187386]
  } else
  { scopeless nothing[7]
  } ) unknown PCGRandomStreamPrivate_rngs[309109] "no doc"(309107 call *(309105 call numGenerators eltType[307600]) pcg_setseq_64_xsh_rr_32_rng[312759]) unknown PCGRandomStreamPrivate_count[309118] "no doc" 1(309116 call int(64)[13] 64) type PCGRandomStream[406872](?) function randToReal64[309219](arg x[309216] :(309215 call uint(64)[115] 64)) : _unknown[51] "inline" "private"
  {(309238 return(309237 call ldexp(309231 call _cast(309230 call real(64)[16] 64) x[309216])(309235 call - 64)))
  }
  { scopeless type(309224 call real(64)[16] 64)
  } function randToReal64[309253](arg x[309250] :(309249 call uint(64)[115] 64), arg min[309259] :(309258 call real(64)[16] 64), arg max[309266] :(309265 call real(64)[16] 64)) : _unknown[51] "inline" "private"
  { unknown normalized[309277](309276 call randToReal64 x[309250])(309280 'end of statement')(309292 return(309290 call +(309287 call *(309284 call - max[309266] min[309259]) normalized[309277]) min[309259]))
  }
  { scopeless type(309272 call real(64)[16] 64)
  } function randToReal32[309306](arg x[309303] :(309302 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {(309321 return(309320 call ldexp(309314 call _cast(309313 call real(64)[16] 32) x[309303])(309318 call - 32)))
  } function randToReal32[309335](arg x[309332] :(309331 call uint(64)[115] 32), arg min[309341] :(309340 call real(64)[16] 32), arg max[309348] :(309347 call real(64)[16] 32)) : _unknown[51] "inline" "private"
  { unknown normalized[309359](309358 call randToReal32 x[309332])(309362 'end of statement')(309374 return(309372 call +(309369 call *(309366 call - max[309348] min[309341]) normalized[309359]) min[309341]))
  }
  { scopeless type(309354 call real(64)[16] 32)
  } function rand32_1[309383](ref arg states[309381]:_any[178](?)) : _unknown[51] "inline" "private"
  {(309404 return(309403 call(309395 call .(309392 call states[309381] 0) c"random")(309401 call pcg_getvalid_inc 1)))
  }
  { scopeless type(309388 call uint(64)[115] 32)
  } function rand32_2[309414](ref arg states[309412]:_any[178](?)) : _unknown[51] "inline" "private"
  {(309433 return(309432 call(309424 call .(309423 call states[309412] 1) c"random")(309430 call pcg_getvalid_inc 2)))
  }
  { scopeless type(309419 call uint(64)[115] 32)
  } function boundedrand32_1[309443](ref arg states[309441]:_any[178](?), arg seed[309449] :(309448 call int(64)[13] 64), arg count[309456] :(309455 call int(64)[13] 64), arg bound[309463] :(309462 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309526 call _cond_test(309478 call == bound[309463](309477 call max(309475 call uint(64)[115] 32))))
    {(309484 return(309483 call rand32_1 states[309441]))
    }
    {(309524 return(309523 call(309492 call .(309489 call states[309441] 0) c"bounded_random_vary_inc")(309498 call pcg_getvalid_inc 1)(309502 call + bound[309463] 1)(309509 call _cast(309508 call uint(64)[115] 64) seed[309449])(309519 call _cast(309518 call uint(64)[115] 64)(309513 call - count[309456] 1)) 101 4))
    }
  }
  { scopeless type(309469 call uint(64)[115] 32)
  } function boundedrand32_2[309540](ref arg states[309538]:_any[178](?), arg seed[309546] :(309545 call int(64)[13] 64), arg count[309553] :(309552 call int(64)[13] 64), arg bound[309560] :(309559 call uint(64)[115] 32)) : _unknown[51] "inline" "private"
  {
    if(309623 call _cond_test(309575 call == bound[309560](309574 call max(309572 call uint(64)[115] 32))))
    {(309581 return(309580 call rand32_2 states[309538]))
    }
    {(309621 return(309620 call(309587 call .(309586 call states[309538] 1) c"bounded_random_vary_inc")(309593 call pcg_getvalid_inc 2)(309597 call + bound[309560] 1)(309604 call _cast(309603 call uint(64)[115] 64) seed[309546])(309614 call _cast(309613 call uint(64)[115] 64)(309608 call - count[309553] 1)) 102 4))
    }
  }
  { scopeless type(309566 call uint(64)[115] 32)
  } function rand64_1[309637](ref arg states[309635]:_any[178](?)) : _unknown[51] "inline" "private"
  { unknown ret[309648] 0(309646 call uint(64)[115] 64)(309651 'end of statement')(309667 call |= ret[309648](309666 call(309658 call .(309657 call states[309635] 0) c"random")(309664 call pcg_getvalid_inc 1)))(309672 call <<= ret[309648] 32)(309689 call |= ret[309648](309688 call(309680 call .(309679 call states[309635] 1) c"random")(309686 call pcg_getvalid_inc 2)))(309693 return ret[309648])
  }
  { scopeless type(309642 call uint(64)[115] 64)
  } function rand64_2[309702](ref arg states[309700]:_any[178](?)) : _unknown[51] "inline" "private"
  { unknown ret[309713] 0(309711 call uint(64)[115] 64)(309716 'end of statement')(309732 call |= ret[309713](309731 call(309723 call .(309722 call states[309700] 2) c"random")(309729 call pcg_getvalid_inc 3)))(309737 call <<= ret[309713] 32)(309754 call |= ret[309713](309753 call(309745 call .(309744 call states[309700] 3) c"random")(309751 call pcg_getvalid_inc 4)))(309758 return ret[309713])
  }
  { scopeless type(309707 call uint(64)[115] 64)
  } function boundedrand64_1[309767](ref arg states[309765]:_any[178](?), arg seed[309773] :(309772 call int(64)[13] 64), arg count[309780] :(309779 call int(64)[13] 64), arg bound[309784] : uint(64)[115]) : _unknown[51] "private"
  {
    if(309894 call _cond_test(309799 call > bound[309784](309797 call _cast uint(64)[115](309795 call max(309793 call uint(64)[115] 32)))))
    { unknown toprand[309805](309803 call _cast uint(64)[115] 0)(309808 'end of statement') unknown botrand[309814](309812 call _cast uint(64)[115] 0)(309817 'end of statement')(309835 call = toprand[309805](309834 call boundedrand32_1 states[309765] seed[309773] count[309780](309832 call _cast(309831 call uint(64)[115] 32)(309826 call >> bound[309784] 32))))(309861 call = botrand[309814](309860 call boundedrand32_2 states[309765] seed[309773] count[309780](309858 call _cast(309857 call uint(64)[115] 32)(309852 call & bound[309784](309851 call max(309849 call uint(64)[115] 32))))))(309871 return(309869 call |(309866 call << toprand[309805] 32) botrand[309814]))
    }
    {(309876 call rand32_1 states[309765])(309892 return(309891 call boundedrand32_2 states[309765] seed[309773] count[309780](309889 call _cast(309888 call uint(64)[115] 32) bound[309784])))
    }
  }
  { scopeless type uint(64)[115]
  } function checkSufficientBitsAndAdvanceOthers[309906](arg resultType[309904]:_any[178](?), ref arg states[309908]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  { unknown numGenForResultType[309914] "param"(309913 call numGenerators resultType[309904])(309917 'end of statement') unknown numGen[309923] "param"(309920 call . states[309908] c"size")(309926 'end of statement')
    if(310033 call _cond_test(309929 call > numGenForResultType[309914] numGen[309923]))
    {(310031 call compilerError(310028 call +(310009 call +(310000 call +(309981 call +(309972 call +(309953 call + "PCGRandomStream cannot produce "(309951 call _cast string[26] resultType[309904])) " (requiring ")(309979 call _cast string[26](309976 call * 32 numGenForResultType[309914]))) " bits) from a stream configured for ")(310007 call _cast string[26](310004 call * 32 numGen[309923]))) " bits of output"))
    }
    { unknown _indexOfInterest[310067] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[310068] "expr temp" "temp"(310077 'move' _iterator[310068](310075 call _getIterator(310085 call chpl_direct_range_iter(310081 call + numGenForResultType[309914] 1) numGen[309923] 1)))
      Defer
      {
        {(310101 call _freeIterator _iterator[310068])
        }
      }
      { scopeless type(310090 'move' _indexOfInterest[310067](310087 call iteratorIndex _iterator[310068]))
      }
      ForLoop[310069]
      { unknown i[310094] "index var" "insert auto destroy"(310096 'move' i[310094] _indexOfInterest[310067])
        {(310064 call(310053 call .(310052 call states[309908](310049 call - i[310094] 1)) c"random")(310062 call pcg_getvalid_inc(310059 call _cast uint(64)[115] i[310094])))
        } label _continueLabel[310072] _indexOfInterest[310067] _iterator[310068]
      } label _breakLabel[310073]
    }
  } function randlc[310114](arg resultType[310112]:_any[178](?), ref arg states[310116]:_any[178](?)) : _unknown[51] "inline" "private"
  {(310122 call checkSufficientBitsAndAdvanceOthers resultType[310112] states[310116])
    if(310441 call _cond_test(310130 call == resultType[310112](310129 call complex(128)[140] 128)))
    {(310155 return(310153 call _cast(310152 call complex(128)[140] 128)(310147 call _build_tuple(310138 call randToReal64(310136 call rand64_1 states[310116]))(310145 call randToReal64(310143 call rand64_2 states[310116])))))
    }
    {
      if(310436 call _cond_test(310163 call == resultType[310112](310162 call complex(128)[140] 64)))
      {(310188 return(310186 call _cast(310185 call complex(128)[140] 64)(310180 call _build_tuple(310171 call randToReal32(310169 call rand32_1 states[310116]))(310178 call randToReal32(310176 call rand32_2 states[310116])))))
      }
      {
        if(310431 call _cond_test(310196 call == resultType[310112](310195 call imag(64)[130] 64)))
        {(310208 return(310207 call _r2i(310205 call randToReal64(310203 call rand64_1 states[310116]))))
        }
        {
          if(310426 call _cond_test(310216 call == resultType[310112](310215 call imag(64)[130] 32)))
          {(310228 return(310227 call _r2i(310225 call randToReal32(310223 call rand32_1 states[310116]))))
          }
          {
            if(310421 call _cond_test(310236 call == resultType[310112](310235 call real(64)[16] 64)))
            {(310245 return(310244 call randToReal64(310242 call rand64_1 states[310116])))
            }
            {
              if(310416 call _cond_test(310253 call == resultType[310112](310252 call real(64)[16] 32)))
              {(310262 return(310261 call randToReal32(310259 call rand32_1 states[310116])))
              }
              {
                if(310411 call _cond_test(310279 call ||(310270 call == resultType[310112](310269 call uint(64)[115] 64))(310277 call == resultType[310112](310276 call int(64)[13] 64))))
                {(310288 return(310286 call _cast resultType[310112](310284 call rand64_1 states[310116])))
                }
                {
                  if(310406 call _cond_test(310305 call ||(310296 call == resultType[310112](310295 call uint(64)[115] 32))(310303 call == resultType[310112](310302 call int(64)[13] 32))))
                  {(310314 return(310312 call _cast resultType[310112](310310 call rand32_1 states[310116])))
                  }
                  {
                    if(310401 call _cond_test(310331 call ||(310322 call == resultType[310112](310321 call uint(64)[115] 16))(310329 call == resultType[310112](310328 call int(64)[13] 16))))
                    {(310343 return(310341 call _cast resultType[310112](310338 call >>(310336 call rand32_1 states[310116]) 16)))
                    }
                    {
                      if(310396 call _cond_test(310360 call ||(310351 call == resultType[310112](310350 call uint(64)[115] 8))(310358 call == resultType[310112](310357 call int(64)[13] 8))))
                      {(310372 return(310370 call _cast resultType[310112](310367 call >>(310365 call rand32_1 states[310116]) 24)))
                      }
                      {
                        if(310392 call _cond_test(310378 call isBoolType resultType[310112]))
                        {(310389 return(310387 call !=(310384 call >>(310382 call rand32_1 states[310116]) 31) 0))
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } function randlc_bounded[310452](arg resultType[310450]:_any[178](?), ref arg states[310454]:_any[178](?), arg seed[310460] :(310459 call int(64)[13] 64), arg count[310467] :(310466 call int(64)[13] 64), arg min[310470]:_any[178](?), arg max[310472]:_any[178](?)) : _unknown[51] "inline" "private"
  {(310478 call checkSufficientBitsAndAdvanceOthers resultType[310450] states[310454])
    if(310939 call _cond_test(310486 call == resultType[310450](310485 call complex(128)[140] 128)))
    {(310527 return(310525 call _cast(310524 call complex(128)[140] 128)(310519 call _build_tuple(310502 call randToReal64(310492 call rand64_1 states[310454])(310495 call . min[310470] c"re")(310499 call . max[310472] c"re"))(310517 call randToReal64(310507 call rand64_2 states[310454])(310510 call . min[310470] c"im")(310514 call . max[310472] c"im")))))
    }
    {
      if(310934 call _cond_test(310535 call == resultType[310450](310534 call complex(128)[140] 64)))
      {(310576 return(310574 call _cast(310573 call complex(128)[140] 64)(310568 call _build_tuple(310551 call randToReal32(310541 call rand32_1 states[310454])(310544 call . min[310470] c"re")(310548 call . max[310472] c"re"))(310566 call randToReal32(310556 call rand32_2 states[310454])(310559 call . min[310470] c"im")(310563 call . max[310472] c"im")))))
      }
      {
        if(310929 call _cond_test(310584 call == resultType[310450](310583 call imag(64)[130] 64)))
        {(310604 return(310603 call _r2i(310601 call randToReal64(310591 call rand64_1 states[310454])(310596 call _i2r min[310470])(310600 call _i2r max[310472]))))
        }
        {
          if(310924 call _cond_test(310612 call == resultType[310450](310611 call imag(64)[130] 32)))
          {(310632 return(310631 call _r2i(310629 call randToReal32(310619 call rand32_1 states[310454])(310624 call _i2r min[310470])(310628 call _i2r max[310472]))))
          }
          {
            if(310919 call _cond_test(310640 call == resultType[310450](310639 call real(64)[16] 64)))
            {(310651 return(310650 call randToReal64(310646 call rand64_1 states[310454]) min[310470] max[310472]))
            }
            {
              if(310914 call _cond_test(310659 call == resultType[310450](310658 call real(64)[16] 32)))
              {(310670 return(310669 call randToReal32(310665 call rand32_1 states[310454]) min[310470] max[310472]))
              }
              {
                if(310909 call _cond_test(310687 call ||(310678 call == resultType[310450](310677 call uint(64)[115] 64))(310685 call == resultType[310450](310684 call int(64)[13] 64))))
                {(310717 return(310715 call _cast resultType[310450](310712 call +(310704 call boundedrand64_1 states[310454] seed[310460] count[310467](310702 call _cast(310701 call uint(64)[115] 64)(310696 call - max[310472] min[310470])))(310710 call _cast(310709 call uint(64)[115] 64) min[310470]))))
                }
                {
                  if(310904 call _cond_test(310734 call ||(310725 call == resultType[310450](310724 call uint(64)[115] 32))(310732 call == resultType[310450](310731 call int(64)[13] 32))))
                  {(310764 return(310762 call _cast resultType[310450](310759 call +(310751 call boundedrand32_1 states[310454] seed[310460] count[310467](310749 call _cast(310748 call uint(64)[115] 32)(310743 call - max[310472] min[310470])))(310757 call _cast(310756 call uint(64)[115] 32) min[310470]))))
                  }
                  {
                    if(310899 call _cond_test(310781 call ||(310772 call == resultType[310450](310771 call uint(64)[115] 16))(310779 call == resultType[310450](310778 call int(64)[13] 16))))
                    {(310811 return(310809 call _cast resultType[310450](310806 call +(310798 call boundedrand32_1 states[310454] seed[310460] count[310467](310796 call _cast(310795 call uint(64)[115] 32)(310790 call - max[310472] min[310470])))(310804 call _cast(310803 call uint(64)[115] 32) min[310470]))))
                    }
                    {
                      if(310894 call _cond_test(310828 call ||(310819 call == resultType[310450](310818 call uint(64)[115] 8))(310826 call == resultType[310450](310825 call int(64)[13] 8))))
                      {(310858 return(310856 call _cast resultType[310450](310853 call +(310845 call boundedrand32_1 states[310454] seed[310460] count[310467](310843 call _cast(310842 call uint(64)[115] 32)(310837 call - max[310472] min[310470])))(310851 call _cast(310850 call uint(64)[115] 32) min[310470]))))
                      }
                      {
                        if(310890 call _cond_test(310864 call isBoolType resultType[310450]))
                        {(310884 call compilerError "bounded rand with boolean type")(310888 return 0)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } function randlc_skipto[310950](arg resultType[310948]:_any[178](?), arg seed[310956] :(310955 call int(64)[13] 64), arg n[310960] : integral[199](?)) : _unknown[51] "private"
  { unknown states[310970](310968 call *(310966 call numGenerators resultType[310948]) pcg_setseq_64_xsh_rr_32_rng[312759])(310973 'end of statement')
    { unknown i[311036] 0 unknown tmp[311037] "maybe param" "temp"(311049 'move' tmp[311037](311047 call chpl_compute_low_param_loop_bound 0(310981 call -(310977 call . states[310970] c"size") 1))) unknown tmp[311038] "maybe param" "temp"(311062 'move' tmp[311038](311060 call chpl_compute_high_param_loop_bound 0(311054 call -(311056 call . states[310970] c"size") 1))) unknown tmp[311039] "maybe param" "temp"(311065 'move' tmp[311039] 1)
      ParamForLoop[311067]
      { i[311036] tmp[311037] tmp[311038] tmp[311039]
        { unknown inc[310992] "param"(310991 call pcg_getvalid_inc(310988 call + i[311036] 1))(310995 'end of statement')(311013 call(311001 call .(311000 call states[310970] i[311036]) c"srandom")(311009 call _cast(311008 call uint(64)[115] 64) seed[310956]) inc[310992])(311034 call(311019 call .(311018 call states[310970] i[311036]) c"advance") inc[310992](311032 call _cast(311031 call uint(64)[115] 64)(311026 call - n[310960] 1)))
        }
      } label _unused_continueLabel[311041] label _breakLabel[311040]
    }(311077 return states[310970])
  } function outer[311085](arg ranges[311083]:_any[178](?), param arg dim[311089] : int(64)[13] = 0) : _unknown[51] "iterator fn" "private" "no return value for void"
  {
    if(311257 call _cond_test(311101 call ==(311095 call + dim[311089] 2)(311098 call . ranges[311083] c"size")))
    {
      { unknown _indexOfInterest[311113] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311114] "expr temp" "temp"(311123 'move' _iterator[311114](311121 call _getIterator(311107 call ranges[311083] dim[311089])))
        Defer
        {
          {(311140 call _freeIterator _iterator[311114])
          }
        }
        { scopeless type(311129 'move' _indexOfInterest[311113](311126 call iteratorIndex _iterator[311114]))
        }
        ForLoop[311115]
        { unknown i[311133] "index var" "insert auto destroy"(311135 'move' i[311133] _indexOfInterest[311113])(311111 yield(311109 call _build_tuple i[311133])) label _continueLabel[311118] _indexOfInterest[311113] _iterator[311114]
        } label _breakLabel[311119]
      }
    }
    {
      if(311253 call _cond_test(311156 call <(311150 call + dim[311089] 2)(311153 call . ranges[311083] c"size")))
      {
        { unknown _indexOfInterest[311214] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311215] "expr temp" "temp"(311224 'move' _iterator[311215](311222 call _getIterator(311162 call ranges[311083] dim[311089])))
          Defer
          {
            {(311241 call _freeIterator _iterator[311215])
            }
          }
          { scopeless type(311230 'move' _indexOfInterest[311214](311227 call iteratorIndex _iterator[311215]))
          }
          ForLoop[311216]
          { unknown i[311234] "index var" "insert auto destroy"(311236 'move' i[311234] _indexOfInterest[311214])
            { unknown _indexOfInterest[311180] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311181] "expr temp" "temp"(311190 'move' _iterator[311181](311188 call _getIterator(311171 call outer ranges[311083](311169 call + dim[311089] 1))))
              Defer
              {
                {(311207 call _freeIterator _iterator[311181])
                }
              }
              { scopeless type(311196 'move' _indexOfInterest[311180](311193 call iteratorIndex _iterator[311181]))
              }
              ForLoop[311182]
              { unknown j[311200] "index var" "insert auto destroy"(311202 'move' j[311200] _indexOfInterest[311180])(311178 yield(311176 call _build_tuple i[311234](311174 'expand_tuple' j[311200]))) label _continueLabel[311185] _indexOfInterest[311180] _iterator[311181]
              } label _breakLabel[311186]
            } label _continueLabel[311219] _indexOfInterest[311214] _iterator[311215]
          } label _breakLabel[311220]
        }
      }
      {(311250 yield 0)
      }
    }
  } function PCGRandomPrivate_iterate[311269](arg resultType[311267]:_any[178](?), arg D[311272] : _domain[125902](?), arg seed[311279] :(311278 call int(64)[13] 64), arg start[311286] :(311285 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown cursor[311295](311294 call randlc_skipto resultType[311267] seed[311279] start[311286])(311298 'end of statement')
    { unknown _indexOfInterest[311309] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311310] "expr temp" "temp"(311319 'move' _iterator[311310](311317 call _getIterator D[311272]))
      Defer
      {
        {(311335 call _freeIterator _iterator[311310])
        }
      }
      { scopeless type(311324 'move' _indexOfInterest[311309](311321 call iteratorIndex _iterator[311310]))
      }
      ForLoop[311311]
      { unknown i[311328] "index var" "insert auto destroy"(311330 'move' i[311328] _indexOfInterest[311309])(311307 yield(311306 call randlc resultType[311267] cursor[311295])) label _continueLabel[311314] _indexOfInterest[311309] _iterator[311310]
      } label _breakLabel[311315]
    }
  } function PCGRandomPrivate_iterate[311348](arg resultType[311346]:_any[178](?), arg D[311351] : _domain[125902](?), arg seed[311358] :(311357 call int(64)[13] 64), arg start[311365] :(311364 call int(64)[13] 64), param arg tag[311369] : iterKind[453]) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  {
    { unknown _indexOfInterest[311394] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311395] "expr temp" "temp"(311404 'move' _iterator[311395](311402 call _getIterator(311390 call(311381 call . D[311351] c"these")(tag = leader[447]))))
      Defer
      {
        {(311421 call _freeIterator _iterator[311395])
        }
      }
      { scopeless type(311410 'move' _indexOfInterest[311394](311407 call iteratorIndex _iterator[311395]))
      }
      ForLoop[311396]
      { unknown block[311414] "index var" "insert auto destroy"(311416 'move' block[311414] _indexOfInterest[311394])(311392 yield block[311414]) label _continueLabel[311399] _indexOfInterest[311394] _iterator[311395]
      } label _breakLabel[311400]
    }
  }
  {(311377 call == tag[311369] leader[447])
  } function PCGRandomPrivate_iterate[311436](arg resultType[311434]:_any[178](?), arg D[311439] : _domain[125902](?), arg seed[311446] :(311445 call int(64)[13] 64), arg start[311453] :(311452 call int(64)[13] 64), param arg tag[311457] : iterKind[453], arg followThis[311460]:_any[178](?)) : _unknown[51] "iterator fn" "no doc" "no return value for void"
  { unknown multiplier[311474] "param" 1(311477 'end of statement') const ZD[311482] "const"(311481 call computeZeroBasedDomain D[311439])(311485 'end of statement') const innerRange[311496] "const"(311495 call followThis[311460](311492 call -(311488 call . ZD[311482] c"rank") 1))(311499 'end of statement')
    { unknown _indexOfInterest[311730] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311731] "expr temp" "temp"(311740 'move' _iterator[311731](311738 call _getIterator(311504 call outer followThis[311460])))
      Defer
      {
        {(311757 call _freeIterator _iterator[311731])
        }
      }
      { scopeless type(311746 'move' _indexOfInterest[311730](311743 call iteratorIndex _iterator[311731]))
      }
      ForLoop[311732]
      { unknown outer[311750] "index var" "insert auto destroy"(311752 'move' outer[311750] _indexOfInterest[311730])
        { unknown myStart[311506] start[311453](311509 'end of statement')
          if(311575 call _cond_test(311516 call >(311512 call . ZD[311482] c"rank") 1))
          {(311546 call += myStart[311506](311544 call * multiplier[311474](311543 call(311535 call .(311534 call(311521 call . ZD[311482] c"indexOrder")(311531 call _build_tuple(311525 'expand_tuple' outer[311750])(311527 call . innerRange[311496] c"low"))) c"safeCast")(311541 call int(64)[13] 64))))
          }
          {(311572 call += myStart[311506](311570 call * multiplier[311474](311569 call(311561 call .(311560 call(311552 call . ZD[311482] c"indexOrder")(311556 call . innerRange[311496] c"low")) c"safeCast")(311567 call int(64)[13] 64))))
          }
          if(311726 call _cond_test(311585 call !(311582 call . innerRange[311496] c"stridable")))
          { unknown cursor[311593](311592 call randlc_skipto resultType[311434] seed[311446] myStart[311506])(311596 'end of statement')
            { unknown _indexOfInterest[311607] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311608] "expr temp" "temp"(311617 'move' _iterator[311608](311615 call _getIterator innerRange[311496]))
              Defer
              {
                {(311633 call _freeIterator _iterator[311608])
                }
              }
              { scopeless type(311622 'move' _indexOfInterest[311607](311619 call iteratorIndex _iterator[311608]))
              }
              ForLoop[311609]
              { unknown i[311626] "index var" "insert auto destroy"(311628 'move' i[311626] _indexOfInterest[311607])(311605 yield(311604 call randlc resultType[311434] cursor[311593])) label _continueLabel[311612] _indexOfInterest[311607] _iterator[311608]
              } label _breakLabel[311613]
            }
          }
          {(311654 call -= myStart[311506](311653 call(311645 call .(311642 call . innerRange[311496] c"low") c"safeCast")(311651 call int(64)[13] 64)))
            { unknown _indexOfInterest[311693] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[311694] "expr temp" "temp"(311703 'move' _iterator[311694](311701 call _getIterator innerRange[311496]))
              Defer
              {
                {(311719 call _freeIterator _iterator[311694])
                }
              }
              { scopeless type(311708 'move' _indexOfInterest[311693](311705 call iteratorIndex _iterator[311694]))
              }
              ForLoop[311695]
              { unknown i[311712] "index var" "insert auto destroy"(311714 'move' i[311712] _indexOfInterest[311693])
                { unknown cursor[311681](311680 call randlc_skipto resultType[311434] seed[311446](311678 call + myStart[311506](311676 call *(311674 call(311666 call . i[311712] c"safeCast")(311672 call int(64)[13] 64)) multiplier[311474])))(311684 'end of statement')(311691 yield(311690 call randlc resultType[311434] cursor[311681]))
                } label _continueLabel[311698] _indexOfInterest[311693] _iterator[311694]
              } label _breakLabel[311699]
            }
          }
        } label _continueLabel[311735] _indexOfInterest[311730] _iterator[311731]
      } label _breakLabel[311736]
    }(355542 'used modules list'(311470 'use' DSIUtil[230888]))
  }
  {(311467 call == tag[311457] follower[449])
  }(355532 'used modules list'(353066 'use' ChapelStandard[20264])(307553 'use' RandomSupport[307436])(307557 'use' Random[304649])(307560 'use' PCGRandomLib[311769])(307563 'use' ChapelLocks[187256]))
}