AST dump for ChapelHashing after pass createTaskFunctions.
Module use list: ChapelBase Reflection 

{
  function chpl__init_ChapelHashing[415996]() : void[4] "insert line file info" "module init"
  {
    (520865 return _void[55])
  }
  function chpl__defaultHashWrapper[155374](arg x[155372]:_any[178](?)) : _unknown[51]
  {
    unknown ret[520666] "RVV" "temp"
    unknown call_tmp[672252] "maybe param" "maybe type" "temp"
    (672255 'move' call_tmp[672252](155380 call chpl__defaultHash x[155372]))
    const hash[155381] "dead at end of block" "const" "insert auto destroy"
    (543935 'init var' hash[155381] call_tmp[672252])
    (155384 'end of statement')
    unknown call_tmp[672257] "expr temp" "maybe param" "maybe type" "temp"
    (672260 'move' call_tmp[672257](155390 call max int(64)[13]))
    unknown call_tmp[672262] "expr temp" "maybe param" "maybe type" "temp"
    (672265 'move' call_tmp[672262](155391 call & hash[155381] call_tmp[672257]))
    unknown call_tmp[672267] "expr temp" "maybe param" "maybe type" "temp"
    (672270 'move' call_tmp[672267](155394 call _cast int(64)[13] call_tmp[672262]))
    (520672 'move' ret[520666](520671 'coerce' call_tmp[672267] int(64)[13]))
    gotoReturn _end_chpl__defaultHashWrapper[520664] _end_chpl__defaultHashWrapper[520664]
    (481993 'end of statement' hash[155381])
    label _end_chpl__defaultHashWrapper[520664]
    (520668 return ret[520666])
  }
  { scopeless type
    int(64)[13]
  }
  function _gen_key[155407](arg i[155404]:uint(64)[115]) : _unknown[51]
  {
    unknown ret[520678] "RVV" "temp"
    unknown key[155411] "dead at end of block" "insert auto destroy"
    (543937 'init var' key[155411] i[155404])
    (155414 'end of statement')
    unknown call_tmp[672272] "expr temp" "maybe param" "maybe type" "temp"
    (672275 'move' call_tmp[672272](155418 call ~ key[155411]))
    unknown call_tmp[672277] "expr temp" "maybe param" "maybe type" "temp"
    (672280 'move' call_tmp[672277](155422 call << key[155411] 21))
    unknown call_tmp[672282] "expr temp" "maybe param" "maybe type" "temp"
    (672285 'move' call_tmp[672282](155424 call + call_tmp[672272] call_tmp[672277]))
    (155426 call = key[155411] call_tmp[672282])
    (481995 'end of statement' key[155411] key[155411] key[155411])
    unknown call_tmp[672287] "expr temp" "maybe param" "maybe type" "temp"
    (672290 'move' call_tmp[672287](155433 call >> key[155411] 24))
    unknown call_tmp[672292] "expr temp" "maybe param" "maybe type" "temp"
    (672295 'move' call_tmp[672292](155435 call ^ key[155411] call_tmp[672287]))
    (155437 call = key[155411] call_tmp[672292])
    (481999 'end of statement' key[155411] key[155411] key[155411])
    unknown call_tmp[672297] "expr temp" "maybe param" "maybe type" "temp"
    (672300 'move' call_tmp[672297](155444 call << key[155411] 3))
    unknown call_tmp[672302] "expr temp" "maybe param" "maybe type" "temp"
    (672305 'move' call_tmp[672302](155446 call + key[155411] call_tmp[672297]))
    unknown call_tmp[672307] "expr temp" "maybe param" "maybe type" "temp"
    (672310 'move' call_tmp[672307](155450 call << key[155411] 8))
    unknown call_tmp[672312] "expr temp" "maybe param" "maybe type" "temp"
    (672315 'move' call_tmp[672312](155452 call + call_tmp[672302] call_tmp[672307]))
    (155454 call = key[155411] call_tmp[672312])
    (482003 'end of statement' key[155411] key[155411] key[155411] key[155411])
    unknown call_tmp[672317] "expr temp" "maybe param" "maybe type" "temp"
    (672320 'move' call_tmp[672317](155461 call >> key[155411] 14))
    unknown call_tmp[672322] "expr temp" "maybe param" "maybe type" "temp"
    (672325 'move' call_tmp[672322](155463 call ^ key[155411] call_tmp[672317]))
    (155465 call = key[155411] call_tmp[672322])
    (482008 'end of statement' key[155411] key[155411] key[155411])
    unknown call_tmp[672327] "expr temp" "maybe param" "maybe type" "temp"
    (672330 'move' call_tmp[672327](155472 call << key[155411] 2))
    unknown call_tmp[672332] "expr temp" "maybe param" "maybe type" "temp"
    (672335 'move' call_tmp[672332](155474 call + key[155411] call_tmp[672327]))
    unknown call_tmp[672337] "expr temp" "maybe param" "maybe type" "temp"
    (672340 'move' call_tmp[672337](155478 call << key[155411] 4))
    unknown call_tmp[672342] "expr temp" "maybe param" "maybe type" "temp"
    (672345 'move' call_tmp[672342](155480 call + call_tmp[672332] call_tmp[672337]))
    (155482 call = key[155411] call_tmp[672342])
    (482012 'end of statement' key[155411] key[155411] key[155411] key[155411])
    unknown call_tmp[672347] "expr temp" "maybe param" "maybe type" "temp"
    (672350 'move' call_tmp[672347](155489 call >> key[155411] 28))
    unknown call_tmp[672352] "expr temp" "maybe param" "maybe type" "temp"
    (672355 'move' call_tmp[672352](155491 call ^ key[155411] call_tmp[672347]))
    (155493 call = key[155411] call_tmp[672352])
    (482017 'end of statement' key[155411] key[155411] key[155411])
    unknown call_tmp[672357] "expr temp" "maybe param" "maybe type" "temp"
    (672360 'move' call_tmp[672357](155500 call << key[155411] 31))
    unknown call_tmp[672362] "expr temp" "maybe param" "maybe type" "temp"
    (672365 'move' call_tmp[672362](155502 call + key[155411] call_tmp[672357]))
    (155504 call = key[155411] call_tmp[672362])
    (482021 'end of statement' key[155411] key[155411] key[155411])
    (520684 'move' ret[520678](520683 'coerce' key[155411] uint(64)[115]))
    gotoReturn _end__gen_key[520676] _end__gen_key[520676]
    (482025 'end of statement' key[155411])
    label _end__gen_key[520676]
    (520680 return ret[520678])
  }
  { scopeless type
    uint(64)[115]
  }
  function _gen_key[155519](arg i[155516]:int(64)[13]) : _unknown[51]
  {
    unknown ret[520690] "RVV" "temp"
    unknown call_tmp[672367] "expr temp" "maybe param" "maybe type" "temp"
    (672370 'move' call_tmp[672367](155525 call _cast uint(64)[115] i[155516]))
    unknown call_tmp[672372] "expr temp" "maybe param" "maybe type" "temp"
    (672375 'move' call_tmp[672372](155528 call _gen_key call_tmp[672367]))
    (520696 'move' ret[520690](520695 'coerce' call_tmp[672372] uint(64)[115]))
    (520692 return ret[520690])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHashCombine[155541](arg a[155538]:uint(64)[115], arg b[155544]:uint(64)[115], arg fieldnum[155548]:int(64)[13]) : _unknown[51] "inline"
  {
    unknown ret[520706] "RVV" "temp"
    function chpl_bitops_rotl_64[155561](arg x[155558] :
    (155557 call uint(64)[115] 64), arg n[155567] :
    (155566 call uint(64)[115] 64)) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[520700] "RVV" "temp"
      (520702 return ret[520700])
    }
    { scopeless type
      (155573 call uint(64)[115] 64)
    }
    unknown call_tmp[672377] "expr temp" "maybe param" "maybe type" "temp"
    (672380 'move' call_tmp[672377](155581 call + 17 fieldnum[155548]))
    unknown call_tmp[672382] "maybe param" "maybe type" "temp"
    (672385 'move' call_tmp[672382](155584 call _cast uint(64)[115] call_tmp[672377]))
    unknown n[155586] "dead at end of block" "insert auto destroy"
    (543939 'init var' n[155586] call_tmp[672382] uint(64)[115])
    (155589 'end of statement')
    unknown call_tmp[672387] "expr temp" "maybe param" "maybe type" "temp"
    (672390 'move' call_tmp[672387](155596 call chpl_bitops_rotl_64 b[155544] n[155586]))
    unknown call_tmp[672392] "expr temp" "maybe param" "maybe type" "temp"
    (672395 'move' call_tmp[672392](155597 call ^ a[155538] call_tmp[672387]))
    unknown call_tmp[672397] "expr temp" "maybe param" "maybe type" "temp"
    (672400 'move' call_tmp[672397](155600 call _gen_key call_tmp[672392]))
    (520712 'move' ret[520706](520711 'coerce' call_tmp[672397] uint(64)[115]))
    gotoReturn _end_chpl__defaultHashCombine[520704] _end_chpl__defaultHashCombine[520704]
    (482028 'end of statement' n[155586])
    label _end_chpl__defaultHashCombine[520704]
    (520708 return ret[520706])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155612](arg b[155609]:bool[10]) : _unknown[51] "inline"
  {
    unknown ret[520718] "RVV" "temp"
    unknown call_tmp[672402] "expr temp" "maybe param" "maybe type" "temp"
    (672405 'move' call_tmp[672402](155622 call _cond_test b[155609]))
    if call_tmp[672402]
    {
      (520724 'move' ret[520718](520723 'coerce' 0 uint(64)[115]))
      gotoReturn _end_chpl__defaultHash[520716] _end_chpl__defaultHash[520716]
    }
    {
      (520730 'move' ret[520718](520729 'coerce' 1 uint(64)[115]))
      gotoReturn _end_chpl__defaultHash[520716] _end_chpl__defaultHash[520716]
    }
    label _end_chpl__defaultHash[520716]
    (520720 return ret[520718])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155641](arg i[155638] :
  (155637 call int(64)[13] 64)) : _unknown[51] "inline"
  {
    unknown ret[520736] "RVV" "temp"
    unknown call_tmp[672407] "expr temp" "maybe param" "maybe type" "temp"
    (672410 'move' call_tmp[672407](155647 call _gen_key i[155638]))
    (520742 'move' ret[520736](520741 'coerce' call_tmp[672407] uint(64)[115]))
    (520738 return ret[520736])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155663](arg u[155660] :
  (155659 call uint(64)[115] 64)) : _unknown[51] "inline"
  {
    unknown ret[520746] "RVV" "temp"
    unknown call_tmp[672412] "expr temp" "maybe param" "maybe type" "temp"
    (672415 'move' call_tmp[672412](155669 call _gen_key u[155660]))
    (520752 'move' ret[520746](520751 'coerce' call_tmp[672412] uint(64)[115]))
    (520748 return ret[520746])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155680](arg e[155678]:_any[178](?)) : _unknown[51] "inline"
  {
    unknown ret[520756] "RVV" "temp"
    unknown call_tmp[672417] "expr temp" "maybe param" "maybe type" "temp"
    (672420 'move' call_tmp[672417](155690 call chpl__enumToOrder e[155678]))
    unknown call_tmp[672422] "expr temp" "maybe param" "maybe type" "temp"
    (672425 'move' call_tmp[672422](155692 call _gen_key call_tmp[672417]))
    (520761 'move' ret[520756](520760 'deref' call_tmp[672422]))
    (520758 return ret[520756])
  }
  where {
    (155685 call isEnum e[155678])
  }
  function chpl__defaultHash[155705](arg f[155702]:real(64)[16]) : _unknown[51] "inline"
  {
    unknown ret[520765] "RVV" "temp"
    unknown call_tmp[672427] "expr temp" "maybe param" "maybe type" "temp"
    (672430 'move' call_tmp[672427](155728 'real2int' f[155702]))
    unknown call_tmp[672432] "expr temp" "maybe param" "maybe type" "temp"
    (672435 'move' call_tmp[672432](155730 call _gen_key call_tmp[672427]))
    (520771 'move' ret[520765](520770 'coerce' call_tmp[672432] uint(64)[115]))
    (520767 return ret[520765])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155743](arg c[155740]:complex(128)[140]) : _unknown[51] "inline"
  {
    unknown ret[520775] "RVV" "temp"
    unknown call_tmp[672439] "expr temp" "maybe param" "maybe type" "temp"
    (672442 'move' call_tmp[672439](155750 call re _mt[243] c[155740]))
    unknown call_tmp[672444] "expr temp" "maybe param" "maybe type" "temp"
    (672447 'move' call_tmp[672444](155753 'real2int' call_tmp[672439]))
    unknown call_tmp[672451] "expr temp" "maybe param" "maybe type" "temp"
    (672454 'move' call_tmp[672451](155757 call im _mt[243] c[155740]))
    unknown call_tmp[672456] "expr temp" "maybe param" "maybe type" "temp"
    (672459 'move' call_tmp[672456](155760 'real2int' call_tmp[672451]))
    unknown call_tmp[672461] "expr temp" "maybe param" "maybe type" "temp"
    (672464 'move' call_tmp[672461](155761 call ^ call_tmp[672444] call_tmp[672456]))
    unknown call_tmp[672466] "expr temp" "maybe param" "maybe type" "temp"
    (672469 'move' call_tmp[672466](155764 call _gen_key call_tmp[672461]))
    (520781 'move' ret[520775](520780 'coerce' call_tmp[672466] uint(64)[115]))
    (520777 return ret[520775])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155777](arg a[155774]:imag(64)[130]) : _unknown[51] "inline"
  {
    unknown ret[520785] "RVV" "temp"
    unknown call_tmp[672471] "expr temp" "maybe param" "maybe type" "temp"
    (672474 'move' call_tmp[672471](155786 call _i2r a[155774]))
    unknown call_tmp[672476] "expr temp" "maybe param" "maybe type" "temp"
    (672479 'move' call_tmp[672476](155787 'real2int' call_tmp[672471]))
    unknown call_tmp[672481] "expr temp" "maybe param" "maybe type" "temp"
    (672484 'move' call_tmp[672481](155789 call _gen_key call_tmp[672476]))
    (520791 'move' ret[520785](520790 'coerce' call_tmp[672481] uint(64)[115]))
    (520787 return ret[520785])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155802](arg u[155799]:chpl_taskID_t[163]) : _unknown[51] "inline"
  {
    unknown ret[520795] "RVV" "temp"
    unknown call_tmp[672486] "expr temp" "maybe param" "maybe type" "temp"
    (672489 'move' call_tmp[672486](155810 call int(64)[13] 64))
    unknown call_tmp[672491] "expr temp" "maybe param" "maybe type" "temp"
    (672494 'move' call_tmp[672491](155811 call _cast call_tmp[672486] u[155799]))
    unknown call_tmp[672496] "expr temp" "maybe param" "maybe type" "temp"
    (672499 'move' call_tmp[672496](155814 call _gen_key call_tmp[672491]))
    (520801 'move' ret[520795](520800 'coerce' call_tmp[672496] uint(64)[115]))
    (520797 return ret[520795])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155829](arg l[155826]:_array[133588](?)) : _unknown[51] "inline"
  {
    unknown ret[520805] "RVV" "temp"
    unknown hash[155834] "dead at end of block" "insert auto destroy"
    (543941 'init var' hash[155834] 0 uint(64)[115])
    (155837 'end of statement')
    unknown i[155840] "dead at end of block" "insert auto destroy"
    (543943 'init var' i[155840] 1)
    (155843 'end of statement')
    {
      unknown _indexOfInterest[155865] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[155866] "expr temp" "temp"
      (155875 'move' _iterator[155866](155873 call _getIterator l[155826]))
      Defer
      {
        {
          (155891 call _freeIterator _iterator[155866])
        }
      }
      { scopeless type
        (155880 'move' _indexOfInterest[155865](155877 call iteratorIndex _iterator[155866]))
      }
      ForLoop[155867]
      {
        unknown obj[155884] "index var" "insert auto destroy"
        (482040 'end of statement')
        (155886 'move' obj[155884] _indexOfInterest[155865])
        (482041 'end of statement' obj[155884])
        {
          unknown call_tmp[672501] "expr temp" "maybe param" "maybe type" "temp"
          (672504 'move' call_tmp[672501](155851 call chpl__defaultHash obj[155884]))
          unknown call_tmp[672506] "expr temp" "maybe param" "maybe type" "temp"
          (672509 'move' call_tmp[672506](155855 call chpl__defaultHashCombine call_tmp[672501] hash[155834] i[155840]))
          (155856 call = hash[155834] call_tmp[672506])
          (482043 'end of statement' hash[155834] obj[155884] hash[155834] i[155840])
          (155862 call += i[155840] 1)
          (482048 'end of statement' i[155840])
        }
        label _continueLabel[155870]
        _indexOfInterest[155865]
        _iterator[155866]
      }
      label _breakLabel[155871]
    }
    (520811 'move' ret[520805](520810 'coerce' hash[155834] uint(64)[115]))
    gotoReturn _end_chpl__defaultHash[520803] _end_chpl__defaultHash[520803]
    (482050 'end of statement' hash[155834])
    label _end_chpl__defaultHash[520803]
    (520807 return ret[520805])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155912](arg o[155909]:borrowed object?[415337]) : _unknown[51] "inline"
  {
    unknown ret[520817] "RVV" "temp"
    unknown call_tmp[672511] "expr temp" "maybe param" "maybe type" "temp"
    (672514 'move' call_tmp[672511](155935 'object2int' o[155909]))
    unknown call_tmp[672516] "expr temp" "maybe param" "maybe type" "temp"
    (672519 'move' call_tmp[672516](155937 call _gen_key call_tmp[672511]))
    (520823 'move' ret[520817](520822 'coerce' call_tmp[672516] uint(64)[115]))
    (520819 return ret[520817])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155950](arg l[155947]:locale[28]) : _unknown[51] "inline"
  {
    unknown ret[520827] "RVV" "temp"
    unknown call_tmp[672523] "expr temp" "maybe param" "maybe type" "temp"
    (672526 'move' call_tmp[672523](155957 call _value _mt[243] l[155947]))
    unknown call_tmp[672528] "expr temp" "maybe param" "maybe type" "temp"
    (672531 'move' call_tmp[672528](155960 'object2int' call_tmp[672523]))
    unknown call_tmp[672533] "expr temp" "maybe param" "maybe type" "temp"
    (672536 'move' call_tmp[672533](155962 call _gen_key call_tmp[672528]))
    (520833 'move' ret[520827](520832 'coerce' call_tmp[672533] uint(64)[115]))
    (520829 return ret[520827])
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__defaultHash[155975](arg r[155972]:range[64316](?)) : _unknown[51] "inline"
  {
    unknown ret[520837] "RVV" "temp"
    unknown ret[155983] "dead at end of block" "insert auto destroy"
    (543945 'default init var' ret[155983] uint(64)[115])
    (155986 'end of statement')
    {
      unknown i[156081] "dead at end of block" "insert auto destroy"
      (543947 'init var' i[156081] 0)
      (482054 'end of statement')
      unknown tmp[156082] "maybe param" "temp"
      unknown call_tmp[672538] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (672541 'move' call_tmp[672538](155990 'typeof' r[155972]))
      unknown call_tmp[672543] "expr temp" "maybe param" "maybe type" "temp"
      (672546 'move' call_tmp[672543](155992 call numImplementationFields call_tmp[672538]))
      (156094 'move' tmp[156082](156092 call chpl_compute_low_param_loop_bound 1 call_tmp[672543]))
      unknown tmp[156083] "maybe param" "temp"
      unknown call_tmp[672548] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (672551 'move' call_tmp[672548](156100 'typeof' r[155972]))
      unknown call_tmp[672553] "expr temp" "maybe param" "maybe type" "temp"
      (672556 'move' call_tmp[672553](156099 call numImplementationFields call_tmp[672548]))
      (156104 'move' tmp[156083](156102 call chpl_compute_high_param_loop_bound 1 call_tmp[672553]))
      unknown tmp[156084] "maybe param" "temp"
      (156107 'move' tmp[156084] 1)
      ParamForLoop[156109]
      { i[156081] tmp[156082] tmp[156083] tmp[156084]
        {
          unknown tmp[427593] "maybe param" "temp"
          unknown tmp[427614] "maybe param" "temp"
          unknown call_tmp[672558] "expr temp" "maybe param" "maybe type" "temp"
          (672561 'move' call_tmp[672558](156000 call getImplementationField r[155972] i[156081]))
          unknown call_tmp[672563] "expr temp" "maybe param" "maybe type" "temp"
          (672566 'move' call_tmp[672563](156002 call isParam call_tmp[672558]))
          (427625 'move' tmp[427614](156004 call == call_tmp[672563] 0))
          unknown call_tmp[672568] "expr temp" "maybe param" "maybe type" "temp"
          (672571 'move' call_tmp[672568](427627 call _cond_invalid tmp[427614]))
          if call_tmp[672568]
          {
            (427630 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[569404] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[569405] "maybe param" "temp"
          unknown call_tmp[672573] "expr temp" "maybe param" "maybe type" "temp"
          (672576 'move' call_tmp[672573](427615 call isTrue tmp[427614]))
          (569410 'move' tmp[569405](569408 call _cond_test call_tmp[672573]))
          if tmp[569405]
          {
            unknown tmp[569412] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[672578] "expr temp" "maybe param" "maybe type" "temp"
            (672581 'move' call_tmp[672578](156011 call getImplementationField r[155972] i[156081]))
            unknown call_tmp[672583] "expr temp" "maybe param" "maybe type" "temp"
            (672586 'move' call_tmp[672583](156013 call isType call_tmp[672578]))
            unknown call_tmp[672588] "expr temp" "maybe param" "maybe type" "temp"
            (672591 'move' call_tmp[672588](156015 call == call_tmp[672583] 0))
            (569414 'move' tmp[569412](427618 call isTrue call_tmp[672588]))
            (569419 'move' tmp[569404](569416 '_paramFoldLogical' tmp[569405] tmp[569412]))
          }
          {
            (569424 'move' tmp[569404](569421 '_paramFoldLogical' tmp[569405] 0))
          }
          (427604 'move' tmp[427593] tmp[569404])
          unknown call_tmp[672593] "expr temp" "maybe param" "maybe type" "temp"
          (672596 'move' call_tmp[672593](427606 call _cond_invalid tmp[427593]))
          if call_tmp[672593]
          {
            (427609 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[569431] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[569432] "maybe param" "temp"
          unknown call_tmp[672598] "expr temp" "maybe param" "maybe type" "temp"
          (672601 'move' call_tmp[672598](427594 call isTrue tmp[427593]))
          (569437 'move' tmp[569432](569435 call _cond_test call_tmp[672598]))
          if tmp[569432]
          {
            { scopeless type
              unknown call_type_tmp[492345] "expr temp" "maybe type" "temp" "type variable"
              unknown call_tmp[672603] "expr temp" "maybe param" "maybe type" "temp"
              (672606 'move' call_tmp[672603](156024 call getImplementationField r[155972] i[156081]))
              (492349 'move' call_type_tmp[492345](156025 'typeof' call_tmp[672603]))
            }
            unknown tmp[569439] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[672608] "expr temp" "maybe param" "maybe type" "temp"
            (672611 'move' call_tmp[672608](156027 call isNothingType call_type_tmp[492345]))
            unknown call_tmp[672613] "expr temp" "maybe param" "maybe type" "temp"
            (672616 'move' call_tmp[672613](156029 call == call_tmp[672608] 0))
            (569441 'move' tmp[569439](427597 call isTrue call_tmp[672613]))
            (569446 'move' tmp[569431](569443 '_paramFoldLogical' tmp[569432] tmp[569439]))
          }
          {
            (569451 'move' tmp[569431](569448 '_paramFoldLogical' tmp[569432] 0))
          }
          unknown call_tmp[672618] "expr temp" "maybe param" "maybe type" "temp"
          (672621 'move' call_tmp[672618](156076 call _cond_test tmp[569431]))
          if call_tmp[672618]
          {
            const field[156038] "dead at end of block" "const" "ref var"
            unknown call_tmp[672623] "expr temp" "maybe param" "maybe type" "temp"
            (672626 'move' call_tmp[672623](156037 call getImplementationField r[155972] i[156081]))
            (543950 'move' field[156038](543949 'addr of' call_tmp[672623]))
            (156041 'end of statement')
            unknown call_tmp[672628] "maybe param" "maybe type" "temp"
            (672631 'move' call_tmp[672628](156046 call chpl__defaultHash field[156038]))
            const fieldHash[156047] "dead at end of block" "const" "insert auto destroy"
            (543952 'init var' fieldHash[156047] call_tmp[672628])
            (156050 'end of statement' i[156081] field[156038])
            unknown call_tmp[672633] "expr temp" "maybe param" "maybe type" "temp"
            (672636 'move' call_tmp[672633](156053 call == i[156081] 1))
            unknown call_tmp[672638] "expr temp" "maybe param" "maybe type" "temp"
            (672641 'move' call_tmp[672638](156070 call _cond_test call_tmp[672633]))
            if call_tmp[672638]
            {
              (156057 call = ret[155983] fieldHash[156047])
              (482059 'end of statement' ret[155983] fieldHash[156047])
            }
            {
              unknown call_tmp[672643] "expr temp" "maybe param" "maybe type" "temp"
              (672646 'move' call_tmp[672643](156066 call chpl__defaultHashCombine fieldHash[156047] ret[155983] i[156081]))
              (156067 call = ret[155983] call_tmp[672643])
              (482062 'end of statement' ret[155983] fieldHash[156047] ret[155983] i[156081])
            }
          }
        }
      }
      label _unused_continueLabel[156086]
      label _breakLabel[156085]
    }
    (520843 'move' ret[520837](520842 'coerce' ret[155983] uint(64)[115]))
    gotoReturn _end_chpl__defaultHash[520835] _end_chpl__defaultHash[520835]
    (482067 'end of statement' ret[155983])
    label _end_chpl__defaultHash[520835]
    (520839 return ret[520837])
    (355143 'used modules list'(155979 'use' Reflection[224882]))
  }
  { scopeless type
    uint(64)[115]
  }
  function chpl__validDefaultAssocDomIdxType[156128](arg idxType[156126]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[520849] "RVV" "param" "temp"
    (520854 'move' ret[520849](520853 'deref' 0))
    (520851 return ret[520849])
  }
  function chpl__validDefaultAssocDomIdxType[156140](arg idxType[156138]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[520858] "RVV" "param" "temp"
    (520863 'move' ret[520858](520862 'deref' 1))
    (520860 return ret[520858])
  }
  where {
    unknown tmp[427635] "maybe param" "temp"
    unknown tmp[427656] "maybe param" "temp"
    unknown tmp[427677] "maybe param" "temp"
    unknown tmp[427698] "maybe param" "temp"
    unknown tmp[427719] "maybe param" "temp"
    unknown tmp[427740] "maybe param" "temp"
    unknown tmp[427761] "maybe param" "temp"
    unknown tmp[427782] "maybe param" "temp"
    unknown tmp[427803] "maybe param" "temp"
    unknown tmp[427824] "maybe param" "temp"
    unknown tmp[427845] "maybe param" "temp"
    unknown tmp[427866] "maybe param" "temp"
    unknown tmp[427887] "maybe param" "temp"
    (427898 'move' tmp[427887](156145 call isBoolType idxType[156138]))
    unknown call_tmp[672648] "expr temp" "maybe param" "maybe type" "temp"
    (672651 'move' call_tmp[672648](427900 call _cond_invalid tmp[427887]))
    if call_tmp[672648]
    {
      (427903 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569458] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569459] "maybe param" "temp"
    unknown call_tmp[672653] "expr temp" "maybe param" "maybe type" "temp"
    (672656 'move' call_tmp[672653](427888 call isTrue tmp[427887]))
    (569464 'move' tmp[569459](569462 call _cond_test call_tmp[672653]))
    if tmp[569459]
    {
      (569469 'move' tmp[569458](569466 '_paramFoldLogical' tmp[569459] 1))
    }
    {
      unknown tmp[569471] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672658] "expr temp" "maybe param" "maybe type" "temp"
      (672661 'move' call_tmp[672658](156149 call isIntType idxType[156138]))
      (569473 'move' tmp[569471](427892 call isTrue call_tmp[672658]))
      (569478 'move' tmp[569458](569475 '_paramFoldLogical' tmp[569459] tmp[569471]))
    }
    (427877 'move' tmp[427866] tmp[569458])
    unknown call_tmp[672663] "expr temp" "maybe param" "maybe type" "temp"
    (672666 'move' call_tmp[672663](427879 call _cond_invalid tmp[427866]))
    if call_tmp[672663]
    {
      (427882 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569485] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569486] "maybe param" "temp"
    unknown call_tmp[672668] "expr temp" "maybe param" "maybe type" "temp"
    (672671 'move' call_tmp[672668](427867 call isTrue tmp[427866]))
    (569491 'move' tmp[569486](569489 call _cond_test call_tmp[672668]))
    if tmp[569486]
    {
      (569496 'move' tmp[569485](569493 '_paramFoldLogical' tmp[569486] 1))
    }
    {
      unknown tmp[569498] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672673] "expr temp" "maybe param" "maybe type" "temp"
      (672676 'move' call_tmp[672673](156155 call isUintType idxType[156138]))
      (569500 'move' tmp[569498](427871 call isTrue call_tmp[672673]))
      (569505 'move' tmp[569485](569502 '_paramFoldLogical' tmp[569486] tmp[569498]))
    }
    (427856 'move' tmp[427845] tmp[569485])
    unknown call_tmp[672678] "expr temp" "maybe param" "maybe type" "temp"
    (672681 'move' call_tmp[672678](427858 call _cond_invalid tmp[427845]))
    if call_tmp[672678]
    {
      (427861 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569512] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569513] "maybe param" "temp"
    unknown call_tmp[672683] "expr temp" "maybe param" "maybe type" "temp"
    (672686 'move' call_tmp[672683](427846 call isTrue tmp[427845]))
    (569518 'move' tmp[569513](569516 call _cond_test call_tmp[672683]))
    if tmp[569513]
    {
      (569523 'move' tmp[569512](569520 '_paramFoldLogical' tmp[569513] 1))
    }
    {
      unknown tmp[569525] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672688] "expr temp" "maybe param" "maybe type" "temp"
      (672691 'move' call_tmp[672688](156161 call isRealType idxType[156138]))
      (569527 'move' tmp[569525](427850 call isTrue call_tmp[672688]))
      (569532 'move' tmp[569512](569529 '_paramFoldLogical' tmp[569513] tmp[569525]))
    }
    (427835 'move' tmp[427824] tmp[569512])
    unknown call_tmp[672693] "expr temp" "maybe param" "maybe type" "temp"
    (672696 'move' call_tmp[672693](427837 call _cond_invalid tmp[427824]))
    if call_tmp[672693]
    {
      (427840 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569539] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569540] "maybe param" "temp"
    unknown call_tmp[672698] "expr temp" "maybe param" "maybe type" "temp"
    (672701 'move' call_tmp[672698](427825 call isTrue tmp[427824]))
    (569545 'move' tmp[569540](569543 call _cond_test call_tmp[672698]))
    if tmp[569540]
    {
      (569550 'move' tmp[569539](569547 '_paramFoldLogical' tmp[569540] 1))
    }
    {
      unknown tmp[569552] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672703] "expr temp" "maybe param" "maybe type" "temp"
      (672706 'move' call_tmp[672703](156167 call isImagType idxType[156138]))
      (569554 'move' tmp[569552](427829 call isTrue call_tmp[672703]))
      (569559 'move' tmp[569539](569556 '_paramFoldLogical' tmp[569540] tmp[569552]))
    }
    (427814 'move' tmp[427803] tmp[569539])
    unknown call_tmp[672708] "expr temp" "maybe param" "maybe type" "temp"
    (672711 'move' call_tmp[672708](427816 call _cond_invalid tmp[427803]))
    if call_tmp[672708]
    {
      (427819 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569566] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569567] "maybe param" "temp"
    unknown call_tmp[672713] "expr temp" "maybe param" "maybe type" "temp"
    (672716 'move' call_tmp[672713](427804 call isTrue tmp[427803]))
    (569572 'move' tmp[569567](569570 call _cond_test call_tmp[672713]))
    if tmp[569567]
    {
      (569577 'move' tmp[569566](569574 '_paramFoldLogical' tmp[569567] 1))
    }
    {
      unknown tmp[569579] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672718] "expr temp" "maybe param" "maybe type" "temp"
      (672721 'move' call_tmp[672718](156173 call isComplexType idxType[156138]))
      (569581 'move' tmp[569579](427808 call isTrue call_tmp[672718]))
      (569586 'move' tmp[569566](569583 '_paramFoldLogical' tmp[569567] tmp[569579]))
    }
    (427793 'move' tmp[427782] tmp[569566])
    unknown call_tmp[672723] "expr temp" "maybe param" "maybe type" "temp"
    (672726 'move' call_tmp[672723](427795 call _cond_invalid tmp[427782]))
    if call_tmp[672723]
    {
      (427798 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569593] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569594] "maybe param" "temp"
    unknown call_tmp[672728] "expr temp" "maybe param" "maybe type" "temp"
    (672731 'move' call_tmp[672728](427783 call isTrue tmp[427782]))
    (569599 'move' tmp[569594](569597 call _cond_test call_tmp[672728]))
    if tmp[569594]
    {
      (569604 'move' tmp[569593](569601 '_paramFoldLogical' tmp[569594] 1))
    }
    {
      unknown tmp[569606] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672733] "expr temp" "maybe param" "maybe type" "temp"
      (672736 'move' call_tmp[672733](156178 call == idxType[156138] chpl_taskID_t[163]))
      (569608 'move' tmp[569606](427787 call isTrue call_tmp[672733]))
      (569613 'move' tmp[569593](569610 '_paramFoldLogical' tmp[569594] tmp[569606]))
    }
    (427772 'move' tmp[427761] tmp[569593])
    unknown call_tmp[672738] "expr temp" "maybe param" "maybe type" "temp"
    (672741 'move' call_tmp[672738](427774 call _cond_invalid tmp[427761]))
    if call_tmp[672738]
    {
      (427777 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569620] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569621] "maybe param" "temp"
    unknown call_tmp[672743] "expr temp" "maybe param" "maybe type" "temp"
    (672746 'move' call_tmp[672743](427762 call isTrue tmp[427761]))
    (569626 'move' tmp[569621](569624 call _cond_test call_tmp[672743]))
    if tmp[569621]
    {
      (569631 'move' tmp[569620](569628 '_paramFoldLogical' tmp[569621] 1))
    }
    {
      unknown tmp[569633] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672748] "expr temp" "maybe param" "maybe type" "temp"
      (672751 'move' call_tmp[672748](156184 call == idxType[156138] string[26]))
      (569635 'move' tmp[569633](427766 call isTrue call_tmp[672748]))
      (569640 'move' tmp[569620](569637 '_paramFoldLogical' tmp[569621] tmp[569633]))
    }
    (427751 'move' tmp[427740] tmp[569620])
    unknown call_tmp[672753] "expr temp" "maybe param" "maybe type" "temp"
    (672756 'move' call_tmp[672753](427753 call _cond_invalid tmp[427740]))
    if call_tmp[672753]
    {
      (427756 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569647] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569648] "maybe param" "temp"
    unknown call_tmp[672758] "expr temp" "maybe param" "maybe type" "temp"
    (672761 'move' call_tmp[672758](427741 call isTrue tmp[427740]))
    (569653 'move' tmp[569648](569651 call _cond_test call_tmp[672758]))
    if tmp[569648]
    {
      (569658 'move' tmp[569647](569655 '_paramFoldLogical' tmp[569648] 1))
    }
    {
      unknown tmp[569660] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672763] "expr temp" "maybe param" "maybe type" "temp"
      (672766 'move' call_tmp[672763](156190 call == idxType[156138] bytes[24]))
      (569662 'move' tmp[569660](427745 call isTrue call_tmp[672763]))
      (569667 'move' tmp[569647](569664 '_paramFoldLogical' tmp[569648] tmp[569660]))
    }
    (427730 'move' tmp[427719] tmp[569647])
    unknown call_tmp[672768] "expr temp" "maybe param" "maybe type" "temp"
    (672771 'move' call_tmp[672768](427732 call _cond_invalid tmp[427719]))
    if call_tmp[672768]
    {
      (427735 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569674] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569675] "maybe param" "temp"
    unknown call_tmp[672773] "expr temp" "maybe param" "maybe type" "temp"
    (672776 'move' call_tmp[672773](427720 call isTrue tmp[427719]))
    (569680 'move' tmp[569675](569678 call _cond_test call_tmp[672773]))
    if tmp[569675]
    {
      (569685 'move' tmp[569674](569682 '_paramFoldLogical' tmp[569675] 1))
    }
    {
      unknown tmp[569687] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672778] "expr temp" "maybe param" "maybe type" "temp"
      (672781 'move' call_tmp[672778](156196 call == idxType[156138] c_string[19]))
      (569689 'move' tmp[569687](427724 call isTrue call_tmp[672778]))
      (569694 'move' tmp[569674](569691 '_paramFoldLogical' tmp[569675] tmp[569687]))
    }
    (427709 'move' tmp[427698] tmp[569674])
    unknown call_tmp[672783] "expr temp" "maybe param" "maybe type" "temp"
    (672786 'move' call_tmp[672783](427711 call _cond_invalid tmp[427698]))
    if call_tmp[672783]
    {
      (427714 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569701] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569702] "maybe param" "temp"
    unknown call_tmp[672788] "expr temp" "maybe param" "maybe type" "temp"
    (672791 'move' call_tmp[672788](427699 call isTrue tmp[427698]))
    (569707 'move' tmp[569702](569705 call _cond_test call_tmp[672788]))
    if tmp[569702]
    {
      (569712 'move' tmp[569701](569709 '_paramFoldLogical' tmp[569702] 1))
    }
    {
      unknown tmp[569714] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672793] "expr temp" "maybe param" "maybe type" "temp"
      (672796 'move' call_tmp[672793](156203 call isClassType idxType[156138]))
      (569716 'move' tmp[569714](427703 call isTrue call_tmp[672793]))
      (569721 'move' tmp[569701](569718 '_paramFoldLogical' tmp[569702] tmp[569714]))
    }
    (427688 'move' tmp[427677] tmp[569701])
    unknown call_tmp[672798] "expr temp" "maybe param" "maybe type" "temp"
    (672801 'move' call_tmp[672798](427690 call _cond_invalid tmp[427677]))
    if call_tmp[672798]
    {
      (427693 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569728] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569729] "maybe param" "temp"
    unknown call_tmp[672803] "expr temp" "maybe param" "maybe type" "temp"
    (672806 'move' call_tmp[672803](427678 call isTrue tmp[427677]))
    (569734 'move' tmp[569729](569732 call _cond_test call_tmp[672803]))
    if tmp[569729]
    {
      (569739 'move' tmp[569728](569736 '_paramFoldLogical' tmp[569729] 1))
    }
    {
      unknown tmp[569741] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672808] "expr temp" "maybe param" "maybe type" "temp"
      (672811 'move' call_tmp[672808](156209 call isEnumType idxType[156138]))
      (569743 'move' tmp[569741](427682 call isTrue call_tmp[672808]))
      (569748 'move' tmp[569728](569745 '_paramFoldLogical' tmp[569729] tmp[569741]))
    }
    (427667 'move' tmp[427656] tmp[569728])
    unknown call_tmp[672813] "expr temp" "maybe param" "maybe type" "temp"
    (672816 'move' call_tmp[672813](427669 call _cond_invalid tmp[427656]))
    if call_tmp[672813]
    {
      (427672 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569755] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569756] "maybe param" "temp"
    unknown call_tmp[672818] "expr temp" "maybe param" "maybe type" "temp"
    (672821 'move' call_tmp[672818](427657 call isTrue tmp[427656]))
    (569761 'move' tmp[569756](569759 call _cond_test call_tmp[672818]))
    if tmp[569756]
    {
      (569766 'move' tmp[569755](569763 '_paramFoldLogical' tmp[569756] 1))
    }
    {
      unknown tmp[569768] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672823] "expr temp" "maybe param" "maybe type" "temp"
      (672826 'move' call_tmp[672823](156215 call isTupleType idxType[156138]))
      (569770 'move' tmp[569768](427661 call isTrue call_tmp[672823]))
      (569775 'move' tmp[569755](569772 '_paramFoldLogical' tmp[569756] tmp[569768]))
    }
    (427646 'move' tmp[427635] tmp[569755])
    unknown call_tmp[672828] "expr temp" "maybe param" "maybe type" "temp"
    (672831 'move' call_tmp[672828](427648 call _cond_invalid tmp[427635]))
    if call_tmp[672828]
    {
      (427651 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[569782] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[569783] "maybe param" "temp"
    unknown call_tmp[672833] "expr temp" "maybe param" "maybe type" "temp"
    (672836 'move' call_tmp[672833](427636 call isTrue tmp[427635]))
    (569788 'move' tmp[569783](569786 call _cond_test call_tmp[672833]))
    if tmp[569783]
    {
      (569793 'move' tmp[569782](569790 '_paramFoldLogical' tmp[569783] 1))
    }
    {
      unknown tmp[569795] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[672838] "expr temp" "maybe param" "maybe type" "temp"
      (672841 'move' call_tmp[672838](156221 call isRecordType idxType[156138]))
      (569797 'move' tmp[569795](427640 call isTrue call_tmp[672838]))
      (569802 'move' tmp[569782](569799 '_paramFoldLogical' tmp[569783] tmp[569795]))
    }
    (748340 call chpl_statementLevelSymbol tmp[569782])
  }
  (355141 'used modules list'(155367 'use' ChapelBase[307]))
}