AST dump for AtomicsCommon after pass resolve.
Module use list: ChapelStandard 

{
  function chpl__init_AtomicsCommon[415939]() : void[4] "insert line file info" "module init" "resolved"
  {
    (506858 return _void[55])
  }
  function _ref(atomic_refcnt)[967460]._cnt[765375](ref arg this[765379]:_ref(atomic_refcnt)[967460]) ref : _ref(AtomicT(int(64)))[940143] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this" "resolved"
  {
    ref ret[765389]:_ref(AtomicT(int(64)))[940143] "dead after last mention" "RVV" "temp"
    ref call_tmp[765396]:_ref(AtomicT(int(64)))[940143] "dead after last mention" "maybe param" "temp"
    (765399 'move' call_tmp[765396](765383 '.' this[765379] _cnt[51949]))
    (765394 'move' ret[765389] call_tmp[765396])
    (765391 return ret[765389])
  }
  function _ref(atomic_refcnt)[967460].init=[765429](ref arg this[765433]:_ref(atomic_refcnt)[967460], arg other[765434]:atomic_refcnt[52099]) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method" "resolved" "suppress lvalue error"
  {
    ref call_tmp[765464]:_ref(AtomicT(int(64)))[940143] "dead after last mention" "insert auto destroy" "maybe param" "reference to a const" "temp"
    (765467 'move' call_tmp[765464](765442 call _cnt[765375] other[765434]))
    unknown call_tmp[765469]:AtomicT(int(64))[940134] "dead after last mention" "maybe param" "temp" "type variable"
    unknown tmp[765448]:AtomicT(int(64))[940134] "dead after last mention" "temp"
    (765453 call init=[1462657] tmp[765448] call_tmp[765464])
    (765455 '.=' this[765433] _cnt[51949] tmp[765448])
    (765459 'end of statement')
    (765460 return _void[55])
  }
  function _ref(atomic_refcnt)[967460].deinit[765474](arg this[765478]:_ref(atomic_refcnt)[967460]) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method" "resolved"
  {
    (765486 return _void[55])
  }
  type atomic_refcnt[52099] unknown _cnt[51949]:AtomicT(int(64))[940134]
}