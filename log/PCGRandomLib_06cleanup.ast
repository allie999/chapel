AST dump for PCGRandomLib after pass cleanup.
Module use list: 

{
  (353125 'use' ChapelStandard)
  unknown PCG_DEFAULT_MULTIPLIER_8[311702] "param" "private" 141
  (311705 'end of statement')
  unknown PCG_DEFAULT_MULTIPLIER_16[311710] "param" "private" 12829
  (311713 'end of statement')
  unknown PCG_DEFAULT_MULTIPLIER_32[311717] "param" "private" 747796405
  (311720 'end of statement')
  unknown PCG_DEFAULT_MULTIPLIER_64[311724] "param" "private" 6364136223846793005
  (311727 'end of statement')
  function pcg_setseq_8_step_r[311737](ref arg state[311734] :
  (311733 call uint[115] 8), arg inc[311743] :
  (311742 call uint[115] 8)) : _unknown[51] "inline" "private" "no return value for void"
  {
    (311754 call = state(311752 call +(311749 call * state PCG_DEFAULT_MULTIPLIER_8) inc))
  }
  function pcg_setseq_16_step_r[311769](ref arg state[311766] :
  (311765 call uint[115] 16), arg inc[311775] :
  (311774 call uint[115] 16)) : _unknown[51] "inline" "private" "no return value for void"
  {
    (311786 call = state(311784 call +(311781 call * state PCG_DEFAULT_MULTIPLIER_16) inc))
  }
  function pcg_setseq_32_step_r[311801](ref arg state[311798] :
  (311797 call uint[115] 32), arg inc[311807] :
  (311806 call uint[115] 32)) : _unknown[51] "inline" "private" "no return value for void"
  {
    (311818 call = state(311816 call +(311813 call * state PCG_DEFAULT_MULTIPLIER_32) inc))
  }
  function pcg_setseq_64_step_r[311833](ref arg state[311830] :
  (311829 call uint[115] 64), arg inc[311839] :
  (311838 call uint[115] 64)) : _unknown[51] "inline" "private" "no return value for void"
  {
    (311850 call = state(311848 call +(311845 call * state PCG_DEFAULT_MULTIPLIER_64) inc))
  }
  function pcg_rotr_32[311865](arg value[311862] :
  (311861 call uint[115] 32), arg rot[311871] :
  (311870 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    function chpl_bitops_rotr_32[311887](arg x[311884] :
    (311883 call uint[115] 32), arg n[311893] :
    (311892 call uint[115] 32)) : _unknown[51] "extern" "local args" "no fn body" "no return value for void"
    {
    }
    { scopeless type
      (311899 call uint[115] 32)
    }
    unknown ret[311909](311908 call chpl_bitops_rotr_32 value rot)
    (311912 'end of statement')
    (311914 return ret)
  }
  { scopeless type
    (311877 call uint[115] 32)
  }
  function pcg_output_xsh_rr_64_32[311928](arg state[311925] :
  (311924 call uint[115] 64)) : _unknown[51] "inline" "private"
  {
    const xorshifted[311954] "const"(311952 call _cast(311951 call uint[115] 32)(311946 call >>(311943 call ^(311940 call >> state 18) state) 27))(311937 call uint[115] 32)
    (311957 'end of statement')
    const rot[311973] "const"(311971 call _cast(311970 call uint[115] 32)(311965 call >> state 59))(311962 call uint[115] 32)
    (311976 'end of statement')
    const ret[311982] "const"(311981 call pcg_rotr_32 xorshifted rot)
    (311985 'end of statement')
    (311987 return ret)
  }
  { scopeless type
    (311933 call uint[115] 32)
  }
  function pcg_output_rxs_m_xs_8_8[312001](arg state[311998] :
  (311997 call uint[115] 8)) : _unknown[51] "inline" "private"
  {
    const word[312029] "const"(312027 call *(312022 call ^(312019 call >> state(312017 call +(312014 call >> state 6) 2)) state) 217)(312010 call uint[115] 8)
    (312032 'end of statement')
    (312041 return(312039 call ^(312036 call >> word 6) word))
  }
  { scopeless type
    (312006 call uint[115] 8)
  }
  function pcg_output_rxs_m_xs_16_16[312055](arg state[312052] :
  (312051 call uint[115] 16)) : _unknown[51] "inline" "private"
  {
    const word[312083] "const"(312081 call *(312076 call ^(312073 call >> state(312071 call +(312068 call >> state 13) 3)) state) 62169)(312064 call uint[115] 16)
    (312086 'end of statement')
    (312095 return(312093 call ^(312090 call >> word 11) word))
  }
  { scopeless type
    (312060 call uint[115] 16)
  }
  function pcg_output_rxs_m_xs_32_32[312109](arg state[312106] :
  (312105 call uint[115] 32)) : _unknown[51] "inline" "private"
  {
    const word[312137] "const"(312135 call *(312130 call ^(312127 call >> state(312125 call +(312122 call >> state 28) 4)) state) 277803737)(312118 call uint[115] 32)
    (312140 'end of statement')
    (312149 return(312147 call ^(312144 call >> word 22) word))
  }
  { scopeless type
    (312114 call uint[115] 32)
  }
  function pcg_output_rxs_m_xs_64_64[312163](arg state[312160] :
  (312159 call uint[115] 64)) : _unknown[51] "inline" "private"
  {
    const word[312191] "const"(312189 call *(312184 call ^(312181 call >> state(312179 call +(312176 call >> state 59) 5)) state) 12605985483714917081)(312172 call uint[115] 64)
    (312194 'end of statement')
    (312203 return(312201 call ^(312198 call >> word 43) word))
  }
  { scopeless type
    (312168 call uint[115] 64)
  }
  function pcg_setseq_64_xsh_rr_32_rng[312688].srandom[312226](arg _mt[312692]:_MT[238], arg this[312690]:pcg_setseq_64_xsh_rr_32_rng[312688], arg seed[312223] :
  (312222 call uint[115] 64), arg inc[312232] :
  (312231 call uint[115] 64)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (312240 call = state(312238 call + inc seed))
    (312248 call pcg_setseq_64_step_r state inc)
  }
  function pcg_setseq_64_xsh_rr_32_rng[312688].random[312261](arg _mt[312696]:_MT[238], arg this[312694]:pcg_setseq_64_xsh_rr_32_rng[312688], arg inc[312258] :
  (312257 call uint[115] 64)) : _unknown[51] "inline" "method" "primary method"
  {
    const oldstate[312272] "const" state(312270 call uint[115] 64)
    (312275 'end of statement')
    (312281 call pcg_setseq_64_step_r state inc)
    (312287 return(312286 call pcg_output_xsh_rr_64_32 oldstate))
  }
  { scopeless type
    (312266 call uint[115] 32)
  }
  function pcg_setseq_64_xsh_rr_32_rng[312688].bounded_random[312301](arg _mt[312700]:_MT[238], arg this[312698]:pcg_setseq_64_xsh_rr_32_rng[312688], arg inc[312298] :
  (312297 call uint[115] 64), arg bound[312307] :
  (312306 call uint[115] 32)) : _unknown[51] "inline" "method" "primary method"
  {
    const negbound[312329] "const"(312327 call _cast(312326 call uint[115] 32)(312321 call -(312319 call _cast(312318 call int[13] 32) bound)))(312313 call uint[115] 32)
    (312332 'end of statement')
    const threshold[312342] "const"(312340 call % negbound bound)(312337 call uint[115] 32)
    (312345 'end of statement')
    unknown tmprng[312347] pcg_setseq_64_xsh_rr_32_rng
    (312350 'end of statement')
    unknown tmpinc[312355](312354 call uint[115] 64)
    (312358 'end of statement')
    unknown r[312363](312362 call uint[115] 32)
    (312366 'end of statement')
    {
      unknown tmp[312392] "temp"
      (312410 'move' tmp[312392](312408 call _cond_test 1))
      WhileDo[312397]
      {
        {
          (312373 call = r(312372 call random inc))
          if(312387 call _cond_test(312379 call >= r threshold))
          {
            (312385 return(312383 call % r bound))
          }
        }
        label _continueLabel[312395]
        (312403 'move' tmp[312392](312401 call _cond_test 1))
        tmp[312392]
      }
      label _breakLabel[312396]
    }
    (312414 return 0)
  }
  function pcg_setseq_64_xsh_rr_32_rng[312688].bounded_random_vary_inc[312427](arg _mt[312704]:_MT[238], arg this[312702]:pcg_setseq_64_xsh_rr_32_rng[312688], arg inc[312424] :
  (312423 call uint[115] 64), arg bound[312433] :
  (312432 call uint[115] 32), arg seed[312440] :
  (312439 call uint[115] 64), arg skip[312447] :
  (312446 call uint[115] 64), arg next_inc[312454] :
  (312453 call uint[115] 64), arg inc_increment[312461] :
  (312460 call uint[115] 64)) : _unknown[51] "inline" "method" "primary method"
  {
    const negbound[312483] "const"(312481 call _cast(312480 call uint[115] 32)(312475 call -(312473 call _cast(312472 call int[13] 32) bound)))(312467 call uint[115] 32)
    (312486 'end of statement')
    const threshold[312496] "const"(312494 call % negbound bound)(312491 call uint[115] 32)
    (312499 'end of statement')
    unknown r[312504](312503 call uint[115] 32)
    (312507 'end of statement')
    (312513 call = r(312512 call random inc))
    if(312526 call _cond_test(312518 call >= r threshold))
    {
      (312524 return(312522 call % r bound))
    }
    unknown newinc[312535](312534 call uint[115] 64)
    (312538 'end of statement')
    {
      unknown _indexOfInterest[312612] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[312613] "expr temp" "temp"
      (312622 'move' _iterator[312613](312620 call _getIterator(312544 call chpl_by(312541 call chpl_build_low_bounded_range next_inc) inc_increment)))
      Defer
      {
        {
          (312642 call _freeIterator _iterator[312613])
        }
      }
      { scopeless type
        (312631 'move' _indexOfInterest[312612](312628 call iteratorIndex _iterator[312613]))
      }
      ForLoop[312614]
      {
        unknown newinc[312635] "index var" "insert auto destroy"
        (312637 'move' newinc[312635] _indexOfInterest[312612])
        {
          unknown tmprng[312547] pcg_setseq_64_xsh_rr_32_rng
          (312550 'end of statement')
          unknown tmpinc[312556](312555 call uint[115] 64)
          (312559 'end of statement')
          (312565 call = tmpinc(312564 call pcg_getvalid_inc newinc))
          (312575 call(312569 call . tmprng c"srandom") seed tmpinc)
          (312584 call(312578 call . tmprng c"advance") tmpinc skip)
          (312594 call = r(312593 call(312588 call . tmprng c"random") tmpinc))
          if(312607 call _cond_test(312599 call >= r threshold))
          {
            (312605 return(312603 call % r bound))
          }
        }
        label _continueLabel[312617]
        _indexOfInterest[312612]
        _iterator[312613]
      }
      label _breakLabel[312618]
    }
    (312650 return 0)
  }
  function pcg_setseq_64_xsh_rr_32_rng[312688].advance[312663](arg _mt[312708]:_MT[238], arg this[312706]:pcg_setseq_64_xsh_rr_32_rng[312688], arg inc[312660] :
  (312659 call uint[115] 64), arg delta[312669] :
  (312668 call uint[115] 64)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (312681 call = state(312680 call pcg_advance_lcg 64 state delta PCG_DEFAULT_MULTIPLIER_64 inc))
  }
  type pcg_setseq_64_xsh_rr_32_rng[312688] unknown state[312213](312212 call uint[115] 64)
  function pcg_setseq_64_rxs_m_xs_64_rng[312829].srandom[312729](arg _mt[312833]:_MT[238], arg this[312831]:pcg_setseq_64_rxs_m_xs_64_rng[312829], arg seed[312726] :
  (312725 call uint[115] 64), arg inc[312735] :
  (312734 call uint[115] 64)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (312743 call = state(312741 call + inc seed))
    (312751 call pcg_setseq_64_step_r state inc)
  }
  function pcg_setseq_64_rxs_m_xs_64_rng[312829].random[312764](arg _mt[312837]:_MT[238], arg this[312835]:pcg_setseq_64_rxs_m_xs_64_rng[312829], arg inc[312761] :
  (312760 call uint[115] 64)) : _unknown[51] "inline" "method" "primary method"
  {
    const oldstate[312775] "const" state(312773 call uint[115] 64)
    (312778 'end of statement')
    (312784 call pcg_setseq_64_step_r state inc)
    (312790 return(312789 call pcg_output_rxs_m_xs_64_64 oldstate))
  }
  { scopeless type
    (312769 call uint[115] 64)
  }
  function pcg_setseq_64_rxs_m_xs_64_rng[312829].advance[312804](arg _mt[312841]:_MT[238], arg this[312839]:pcg_setseq_64_rxs_m_xs_64_rng[312829], arg inc[312801] :
  (312800 call uint[115] 64), arg delta[312810] :
  (312809 call uint[115] 64)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (312822 call = state(312821 call pcg_advance_lcg 64 state delta PCG_DEFAULT_MULTIPLIER_64 inc))
  }
  type pcg_setseq_64_rxs_m_xs_64_rng[312829] unknown state[312716](312715 call uint[115] 64)
  function pcg_setseq_32_rxs_m_xs_32_rng[312962].srandom[312862](arg _mt[312966]:_MT[238], arg this[312964]:pcg_setseq_32_rxs_m_xs_32_rng[312962], arg seed[312859] :
  (312858 call uint[115] 32), arg inc[312868] :
  (312867 call uint[115] 32)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (312876 call = state(312874 call + inc seed))
    (312884 call pcg_setseq_32_step_r state inc)
  }
  function pcg_setseq_32_rxs_m_xs_32_rng[312962].random[312897](arg _mt[312970]:_MT[238], arg this[312968]:pcg_setseq_32_rxs_m_xs_32_rng[312962], arg inc[312894] :
  (312893 call uint[115] 32)) : _unknown[51] "inline" "method" "primary method"
  {
    const oldstate[312908] "const" state(312906 call uint[115] 32)
    (312911 'end of statement')
    (312917 call pcg_setseq_32_step_r state inc)
    (312923 return(312922 call pcg_output_rxs_m_xs_32_32 oldstate))
  }
  { scopeless type
    (312902 call uint[115] 32)
  }
  function pcg_setseq_32_rxs_m_xs_32_rng[312962].advance[312937](arg _mt[312974]:_MT[238], arg this[312972]:pcg_setseq_32_rxs_m_xs_32_rng[312962], arg inc[312934] :
  (312933 call uint[115] 32), arg delta[312943] :
  (312942 call uint[115] 32)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (312955 call = state(312954 call pcg_advance_lcg 32 state delta PCG_DEFAULT_MULTIPLIER_32 inc))
  }
  type pcg_setseq_32_rxs_m_xs_32_rng[312962] unknown state[312849](312848 call uint[115] 32)
  function pcg_setseq_16_rxs_m_xs_16_rng[313095].srandom[312995](arg _mt[313099]:_MT[238], arg this[313097]:pcg_setseq_16_rxs_m_xs_16_rng[313095], arg seed[312992] :
  (312991 call uint[115] 16), arg inc[313001] :
  (313000 call uint[115] 16)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (313009 call = state(313007 call + inc seed))
    (313017 call pcg_setseq_16_step_r state inc)
  }
  function pcg_setseq_16_rxs_m_xs_16_rng[313095].random[313030](arg _mt[313103]:_MT[238], arg this[313101]:pcg_setseq_16_rxs_m_xs_16_rng[313095], arg inc[313027] :
  (313026 call uint[115] 16)) : _unknown[51] "inline" "method" "primary method"
  {
    const oldstate[313041] "const" state(313039 call uint[115] 16)
    (313044 'end of statement')
    (313050 call pcg_setseq_16_step_r state inc)
    (313056 return(313055 call pcg_output_rxs_m_xs_16_16 oldstate))
  }
  { scopeless type
    (313035 call uint[115] 16)
  }
  function pcg_setseq_16_rxs_m_xs_16_rng[313095].advance[313070](arg _mt[313107]:_MT[238], arg this[313105]:pcg_setseq_16_rxs_m_xs_16_rng[313095], arg inc[313067] :
  (313066 call uint[115] 16), arg delta[313076] :
  (313075 call uint[115] 16)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (313088 call = state(313087 call pcg_advance_lcg 16 state delta PCG_DEFAULT_MULTIPLIER_16 inc))
  }
  type pcg_setseq_16_rxs_m_xs_16_rng[313095] unknown state[312982](312981 call uint[115] 16)
  function pcg_setseq_8_rxs_m_xs_8_rng[313228].srandom[313128](arg _mt[313232]:_MT[238], arg this[313230]:pcg_setseq_8_rxs_m_xs_8_rng[313228], arg seed[313125] :
  (313124 call uint[115] 8), arg inc[313134] :
  (313133 call uint[115] 8)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (313142 call = state(313140 call + inc seed))
    (313150 call pcg_setseq_8_step_r state inc)
  }
  function pcg_setseq_8_rxs_m_xs_8_rng[313228].random[313163](arg _mt[313236]:_MT[238], arg this[313234]:pcg_setseq_8_rxs_m_xs_8_rng[313228], arg inc[313160] :
  (313159 call uint[115] 8)) : _unknown[51] "inline" "method" "primary method"
  {
    const oldstate[313174] "const" state(313172 call uint[115] 8)
    (313177 'end of statement')
    (313183 call pcg_setseq_8_step_r state inc)
    (313189 return(313188 call pcg_output_rxs_m_xs_8_8 oldstate))
  }
  { scopeless type
    (313168 call uint[115] 8)
  }
  function pcg_setseq_8_rxs_m_xs_8_rng[313228].advance[313203](arg _mt[313240]:_MT[238], arg this[313238]:pcg_setseq_8_rxs_m_xs_8_rng[313228], arg inc[313200] :
  (313199 call uint[115] 8), arg delta[313209] :
  (313208 call uint[115] 8)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (313221 call = state(313220 call pcg_advance_lcg 8 state delta PCG_DEFAULT_MULTIPLIER_8 inc))
  }
  type pcg_setseq_8_rxs_m_xs_8_rng[313228] unknown state[313115](313114 call uint[115] 8)
  function uint_with_bits[313247](param arg nbits[313245]:_any[178](?)) type : _unknown[51] "private"
  {
    if(313297 call _cond_test(313251 call <= nbits 8))
    {
      (313257 return(313256 call uint[115] 8))
    }
    {
      if(313291 call _cond_test(313261 call <= nbits 16))
      {
        (313267 return(313266 call uint[115] 16))
      }
      {
        if(313285 call _cond_test(313271 call <= nbits 32))
        {
          (313277 return(313276 call uint[115] 32))
        }
        {
          (313283 return(313282 call uint[115] 64))
        }
      }
    }
  }
  function normalize[313312](arg nbits[313309] :
  int[13], arg x[313315] :
  uint[115]) : _unknown[51] "inline" "private"
  {
    unknown oldx[313319] x
    (313322 'end of statement')
    unknown shiftamt[313328](313326 call - 64 nbits)
    (313331 'end of statement')
    (313334 call <<= oldx shiftamt)
    (313341 return(313339 call >> oldx shiftamt))
  }
  function pcg_output_rxs_m_xs_N_mine[313351](arg nbits[313348] :
  int[13], arg state_in[313353]:_any[178](?)) : _unknown[51] "private"
  {
    if(313362 call _cond_test(313357 call < nbits 8))
    {
      (313360 return state_in)
    }
    if(313384 call _cond_test(313370 call == nbits 8))
    {
      (313382 return(313381 call pcg_output_rxs_m_xs_8_8(313378 call _cast(313377 call uint[115] 8) state_in)))
    }
    if(313405 call _cond_test(313391 call == nbits 16))
    {
      (313403 return(313402 call pcg_output_rxs_m_xs_16_16(313399 call _cast(313398 call uint[115] 16) state_in)))
    }
    if(313426 call _cond_test(313412 call == nbits 32))
    {
      (313424 return(313423 call pcg_output_rxs_m_xs_32_32(313420 call _cast(313419 call uint[115] 32) state_in)))
    }
    if(313447 call _cond_test(313433 call == nbits 64))
    {
      (313445 return(313444 call pcg_output_rxs_m_xs_64_64(313441 call _cast(313440 call uint[115] 64) state_in)))
    }
    {
      unknown shiftamt[313456](313454 call - nbits 4)
      (313459 'end of statement')
      unknown state[313465](313463 call _cast uint[115] state_in)
      (313468 'end of statement')
      unknown word[313486](313484 call *(313481 call ^(313478 call >> state(313476 call +(313473 call >> state shiftamt) 2)) state) 217) uint[115]
      (313489 'end of statement')
      (313496 call = word(313495 call normalize nbits word))
      (313506 return(313504 call ^(313501 call >> word shiftamt) word))
    }
  }
  function pcg_setseq_N_rxs_m_xs_N_rng[314090](?).mask_state[313522](arg _mt[314094]:_MT[238], arg this[314092]:pcg_setseq_N_rxs_m_xs_N_rng[314090](?)) : _unknown[51] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    (313530 call = state(313529 call normalize N state))
  }
  function pcg_setseq_N_rxs_m_xs_N_rng[314090](?).srandom[313542](arg _mt[314098]:_MT[238], arg this[314096]:pcg_setseq_N_rxs_m_xs_N_rng[314090](?), arg seed[313539] :
  uint[115], arg inc[313545] :
  uint[115]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    (313553 call = state(313551 call + inc seed))
    if(313681 call _cond_test(313559 call <= N 8))
    {
      unknown tmpstate[313568](313566 call _cast(313565 call uint[115] 8) state)
      (313571 'end of statement')
      (313583 call pcg_setseq_8_step_r tmpstate(313581 call _cast(313580 call uint[115] 8) inc))
      (313587 call = state tmpstate)
    }
    {
      if(313676 call _cond_test(313592 call <= N 16))
      {
        unknown tmpstate[313601](313599 call _cast(313598 call uint[115] 16) state)
        (313604 'end of statement')
        (313616 call pcg_setseq_16_step_r tmpstate(313614 call _cast(313613 call uint[115] 16) inc))
        (313620 call = state tmpstate)
      }
      {
        if(313671 call _cond_test(313625 call <= N 32))
        {
          unknown tmpstate[313634](313632 call _cast(313631 call uint[115] 32) state)
          (313637 'end of statement')
          (313649 call pcg_setseq_32_step_r tmpstate(313647 call _cast(313646 call uint[115] 32) inc))
          (313653 call = state tmpstate)
        }
        {
          if(313667 call _cond_test(313658 call <= N 64))
          {
            (313664 call pcg_setseq_64_step_r state inc)
          }
        }
      }
    }
    (313688 call mask_state)
  }
  function pcg_setseq_N_rxs_m_xs_N_rng[314090](?).random[313698](arg _mt[314102]:_MT[238], arg this[314100]:pcg_setseq_N_rxs_m_xs_N_rng[314090](?), arg inc[313695] :
  uint[115]) : _unknown[51] "inline" "method" "primary method"
  {
    if(313905 call _cond_test(313703 call <= N 8))
    {
      unknown tmpstate[313712](313710 call _cast(313709 call uint[115] 8) state)
      (313715 'end of statement')
      unknown oldstate[313718] tmpstate
      (313721 'end of statement')
      (313732 call pcg_setseq_8_step_r tmpstate(313730 call _cast(313729 call uint[115] 8) inc))
      (313736 call = state tmpstate)
      (313741 call mask_state)
      (313752 return(313751 call normalize N(313750 call pcg_output_rxs_m_xs_N_mine N oldstate)))
    }
    {
      if(313900 call _cond_test(313756 call <= N 16))
      {
        unknown tmpstate[313765](313763 call _cast(313762 call uint[115] 16) state)
        (313768 'end of statement')
        unknown oldstate[313771] tmpstate
        (313774 'end of statement')
        (313785 call pcg_setseq_16_step_r tmpstate(313783 call _cast(313782 call uint[115] 16) inc))
        (313789 call = state tmpstate)
        (313794 call mask_state)
        (313805 return(313804 call normalize N(313803 call pcg_output_rxs_m_xs_N_mine N oldstate)))
      }
      {
        if(313895 call _cond_test(313809 call <= N 32))
        {
          unknown tmpstate[313818](313816 call _cast(313815 call uint[115] 32) state)
          (313821 'end of statement')
          unknown oldstate[313824] tmpstate
          (313827 'end of statement')
          (313838 call pcg_setseq_32_step_r tmpstate(313836 call _cast(313835 call uint[115] 32) inc))
          (313842 call = state tmpstate)
          (313847 call mask_state)
          (313858 return(313857 call normalize N(313856 call pcg_output_rxs_m_xs_N_mine N oldstate)))
        }
        {
          if(313891 call _cond_test(313862 call <= N 64))
          {
            unknown oldstate[313865] state
            (313868 'end of statement')
            (313874 call pcg_setseq_64_step_r state inc)
            (313878 call mask_state)
            (313889 return(313888 call normalize N(313887 call pcg_output_rxs_m_xs_N_mine N oldstate)))
          }
        }
      }
    }
    (313912 return 0)
  }
  { scopeless type
    uint[115]
  }
  function pcg_setseq_N_rxs_m_xs_N_rng[314090](?).advance[313923](arg _mt[314106]:_MT[238], arg this[314104]:pcg_setseq_N_rxs_m_xs_N_rng[314090](?), arg inc[313920] :
  uint[115], arg delta[313926] :
  uint[115]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(314081 call _cond_test(313931 call <= N 8))
    {
      (313960 call = state(313959 call pcg_advance_lcg 8(313942 call _cast(313941 call uint[115] 8) state)(313949 call _cast(313948 call uint[115] 8) delta) PCG_DEFAULT_MULTIPLIER_8(313957 call _cast(313956 call uint[115] 8) inc)))
      (313966 call mask_state)
    }
    {
      if(314076 call _cond_test(313970 call <= N 16))
      {
        (313999 call = state(313998 call pcg_advance_lcg 16(313981 call _cast(313980 call uint[115] 16) state)(313988 call _cast(313987 call uint[115] 16) delta) PCG_DEFAULT_MULTIPLIER_16(313996 call _cast(313995 call uint[115] 16) inc)))
        (314005 call mask_state)
      }
      {
        if(314071 call _cond_test(314009 call <= N 32))
        {
          (314038 call = state(314037 call pcg_advance_lcg 32(314020 call _cast(314019 call uint[115] 32) state)(314027 call _cast(314026 call uint[115] 32) delta) PCG_DEFAULT_MULTIPLIER_32(314035 call _cast(314034 call uint[115] 32) inc)))
          (314044 call mask_state)
        }
        {
          if(314067 call _cond_test(314048 call <= N 64))
          {
            (314059 call = state(314058 call pcg_advance_lcg 64 state delta PCG_DEFAULT_MULTIPLIER_64 inc))
            (314065 call mask_state)
          }
        }
      }
    }
  }
  type pcg_setseq_N_rxs_m_xs_N_rng[314090](?) const N[313511] "const" unknown state[313516] uint[115]
  function pcg_getvalid_inc[314118](arg initseq[314115] :
  (314114 call uint[115] 64)) : _unknown[51] "inline"
  {
    (314131 return(314129 call |(314126 call << initseq 1) 1))
  }
  { scopeless type
    (314123 call uint[115] 64)
  }
  function pcg_getvalid_inc[314146](param arg initseq[314143] :
  (314142 call uint[115] 64)) param : _unknown[51] "inline" "no doc"
  {
    (314155 return(314153 call |(314150 call << initseq 1) 1))
  }
  function pcg_advance_lcg[314164](param arg bits[314162]:_any[178](?), arg state[314170] :
  (314169 call uint_with_bits bits), in arg delta[314177] :
  (314176 call uint_with_bits bits), in arg cur_mult[314184] :
  (314183 call uint_with_bits bits), in arg cur_plus[314191] :
  (314190 call uint_with_bits bits)) : _unknown[51] "private"
  {
    unknown acc_mult[314203] 1(314201 call uint_with_bits bits)
    (314206 'end of statement')
    unknown acc_plus[314213] 0(314211 call uint_with_bits bits)
    (314216 'end of statement')
    {
      unknown tmp[314271] "temp"
      (314295 'move' tmp[314271](314290 call _cond_test(314292 call > delta 0)))
      WhileDo[314276]
      {
        {
          if(314245 call _cond_test(314226 call !=(314223 call & delta 1) 0))
          {
            (314230 call *= acc_mult cur_mult)
            (314242 call = acc_plus(314240 call +(314237 call * acc_plus cur_mult) cur_plus))
          }
          (314258 call = cur_plus(314256 call *(314253 call + cur_mult 1) cur_plus))
          (314263 call *= cur_mult cur_mult)
          (314268 call /= delta 2)
        }
        label _continueLabel[314274]
        (314285 'move' tmp[314271](314280 call _cond_test(314282 call > delta 0)))
        tmp[314271]
      }
      label _breakLabel[314275]
    }
    (314305 return(314303 call +(314300 call * acc_mult state) acc_plus))
  }
  { scopeless type
    (314197 call uint_with_bits bits)
  }
}