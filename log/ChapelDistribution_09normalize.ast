AST dump for ChapelDistribution after pass normalize.
Module use list: ChapelArray ChapelRange ChapelLocks ChapelHashtable Sort 

{
  function chpl__init_ChapelDistribution[416042]() : void[4] "insert line file info" "module init"
  {
    (520463 return _void[55])
  }
  function BaseDist[145934].deinit[145468](arg _mt[145938]:_MT[238], arg this[145936]:BaseDist[145934]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519739 return _void[55])
  }
  function BaseDist[145934].remove[145475](arg _mt[145942]:_MT[238], arg this[145940]:BaseDist[145934]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519743] "RVV" "temp"
    unknown free_dist[145481] "dead at end of block" "insert auto destroy"
    (543581 'init var' free_dist[145481] 0)
    (145484 'end of statement')
    unknown call_tmp[667465] "expr temp" "maybe param" "maybe type" "temp"
    (667468 'move' call_tmp[667465](145488 call(385429 call (partial) dsiTrackDomains _mt[243] this[145940])))
    unknown call_tmp[667470] "expr temp" "maybe param" "maybe type" "temp"
    (667473 'move' call_tmp[667470](145559 call _cond_test call_tmp[667465]))
    if call_tmp[667470]
    {
      {
        const tmp[145544] "const" "temp"
        unknown call_tmp[667475] "expr temp" "maybe param" "maybe type" "temp"
        (667478 'move' call_tmp[667475](145541 '_wide_get_locale' this[145940]))
        (145545 'move' tmp[145544](145542 'deref' call_tmp[667475]))
        {
          unknown call_tmp[667480] "maybe param" "maybe type" "temp"
          (667483 'move' call_tmp[667480](145491 call - 1))
          unknown dom_count[145493] "dead at end of block" "insert auto destroy"
          (543583 'init var' dom_count[145493] call_tmp[667480])
          (145496 'end of statement')
          {
            unknown call_tmp[667487] "expr temp" "maybe param" "maybe type" "temp"
            (667490 'move' call_tmp[667487](360506 call _domsLock _mt[243] this[145940]))
            (145503 call(145499 call (partial) lock _mt[243] call_tmp[667487]))
            (481387 'end of statement')
            unknown call_tmp[667496] "expr temp" "maybe param" "maybe type" "temp"
            (667499 'move' call_tmp[667496](385437 call _free_when_no_doms _mt[243] this[145940]))
            (145508 call = call_tmp[667496] 1)
            (481388 'end of statement')
            unknown call_tmp[667503] "expr temp" "maybe param" "maybe type" "temp"
            (667506 'move' call_tmp[667503](360511 call _doms _mt[243] this[145940]))
            unknown call_tmp[667510] "expr temp" "maybe param" "maybe type" "temp"
            (667513 'move' call_tmp[667510](145513 call size _mt[243] call_tmp[667503]))
            (145516 call = dom_count[145493] call_tmp[667510])
            (481389 'end of statement' dom_count[145493])
            unknown call_tmp[667517] "expr temp" "maybe param" "maybe type" "temp"
            (667520 'move' call_tmp[667517](360516 call _domsLock _mt[243] this[145940]))
            (145524 call(145520 call (partial) unlock _mt[243] call_tmp[667517]))
          }
          unknown call_tmp[667524] "expr temp" "maybe param" "maybe type" "temp"
          (667527 'move' call_tmp[667524](145529 call == dom_count[145493] 0))
          unknown call_tmp[667529] "expr temp" "maybe param" "maybe type" "temp"
          (667532 'move' call_tmp[667529](145536 call _cond_test call_tmp[667524]))
          if call_tmp[667529]
          {
            (145533 call = free_dist[145481] 1)
            (481392 'end of statement' free_dist[145481])
          }
        }
        (145548 'elided on block' 0 tmp[145544])
      }
    }
    {
      (145555 call = free_dist[145481] 1)
      (481394 'end of statement' free_dist[145481])
    }
    unknown call_tmp[667534] "expr temp" "maybe param" "maybe type" "temp"
    (667537 'move' call_tmp[667534](145573 call _cond_test free_dist[145481]))
    if call_tmp[667534]
    {
      unknown call_tmp[667539] "expr temp" "maybe param" "maybe type" "temp"
      (667542 'move' call_tmp[667539](145567 call _to_unmanaged this[145940]))
      (519749 'move' ret[519743](519748 'coerce' call_tmp[667539] unmanaged BaseDist?[415517]))
      gotoReturn _end_remove[519741] _end_remove[519741]
    }
    {
      (519755 'move' ret[519743](519754 'coerce' nil[44] unmanaged BaseDist?[415517]))
      gotoReturn _end_remove[519741] _end_remove[519741]
    }
    label _end_remove[519741]
    (519745 return ret[519743])
  }
  { scopeless type
    unmanaged BaseDist?[415517]
  }
  function BaseDist[145934].remove_dom[145589](arg _mt[145946]:_MT[238], arg this[145944]:BaseDist[145934], arg x[145586]:unmanaged BaseDom[415463]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519761] "RVV" "temp"
    unknown call_tmp[667544] "maybe param" "maybe type" "temp"
    (667547 'move' call_tmp[667544](145593 call - 1))
    unknown count[145595] "dead at end of block" "insert auto destroy"
    (543585 'init var' count[145595] call_tmp[667544])
    (145598 'end of statement')
    {
      const tmp[145662] "const" "temp"
      unknown call_tmp[667549] "expr temp" "maybe param" "maybe type" "temp"
      (667552 'move' call_tmp[667549](145659 '_wide_get_locale' this[145944]))
      (145663 'move' tmp[145662](145660 'deref' call_tmp[667549]))
      {
        unknown call_tmp[667554] "maybe param" "maybe type" "temp"
        (667557 'move' call_tmp[667554](145602 call - 1))
        unknown cnt[145604] "dead at end of block" "insert auto destroy"
        (543587 'init var' cnt[145604] call_tmp[667554])
        (145607 'end of statement')
        {
          unknown call_tmp[667561] "expr temp" "maybe param" "maybe type" "temp"
          (667564 'move' call_tmp[667561](360521 call _domsLock _mt[243] this[145944]))
          (145614 call(145610 call (partial) lock _mt[243] call_tmp[667561]))
          (481398 'end of statement')
          unknown call_tmp[667570] "expr temp" "maybe param" "maybe type" "temp"
          (667573 'move' call_tmp[667570](360526 call _doms _mt[243] this[145944]))
          (145623 call(145618 call (partial) remove _mt[243] call_tmp[667570]) x[145586])
          (481399 'end of statement')
          unknown call_tmp[667579] "expr temp" "maybe param" "maybe type" "temp"
          (667582 'move' call_tmp[667579](360531 call _doms _mt[243] this[145944]))
          unknown call_tmp[667586] "expr temp" "maybe param" "maybe type" "temp"
          (667589 'move' call_tmp[667586](145627 call size _mt[243] call_tmp[667579]))
          (145630 call = cnt[145604] call_tmp[667586])
          (481400 'end of statement' cnt[145604])
          unknown call_tmp[667593] "expr temp" "maybe param" "maybe type" "temp"
          (667596 'move' call_tmp[667593](385452 call _free_when_no_doms _mt[243] this[145944]))
          unknown call_tmp[667598] "expr temp" "maybe param" "maybe type" "temp"
          (667601 'move' call_tmp[667598](145634 call ! call_tmp[667593]))
          unknown call_tmp[667603] "expr temp" "maybe param" "maybe type" "temp"
          (667606 'move' call_tmp[667603](145641 call _cond_test call_tmp[667598]))
          if call_tmp[667603]
          {
            (145638 call += cnt[145604] 1)
            (481402 'end of statement' cnt[145604])
          }
          unknown call_tmp[667610] "expr temp" "maybe param" "maybe type" "temp"
          (667613 'move' call_tmp[667610](360536 call _domsLock _mt[243] this[145944]))
          (145651 call(145647 call (partial) unlock _mt[243] call_tmp[667610]))
        }
        (145656 call = count[145595] cnt[145604])
        (481405 'end of statement' count[145595] cnt[145604])
      }
      (145666 'elided on block' 0 tmp[145662])
    }
    unknown call_tmp[667617] "expr temp" "maybe param" "maybe type" "temp"
    (667620 'move' call_tmp[667617](145672 call == count[145595] 0))
    (519767 'move' ret[519761](519766 'coerce' call_tmp[667617] bool[10]))
    gotoReturn _end_remove_dom[519759] _end_remove_dom[519759]
    (481408 'end of statement' count[145595])
    label _end_remove_dom[519759]
    (519763 return ret[519761])
  }
  { scopeless type
    bool[10]
  }
  function BaseDist[145934].add_dom[145686](arg _mt[145950]:_MT[238], arg this[145948]:BaseDist[145934], arg x[145683]:unmanaged BaseDom[415463]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    {
      const tmp[145715] "const" "temp"
      unknown call_tmp[667622] "expr temp" "maybe param" "maybe type" "temp"
      (667625 'move' call_tmp[667622](145712 '_wide_get_locale' this[145948]))
      (145716 'move' tmp[145715](145713 'deref' call_tmp[667622]))
      {
        unknown call_tmp[667629] "expr temp" "maybe param" "maybe type" "temp"
        (667632 'move' call_tmp[667629](360541 call _domsLock _mt[243] this[145948]))
        (145694 call(145690 call (partial) lock _mt[243] call_tmp[667629]))
        (481410 'end of statement')
        unknown call_tmp[667638] "expr temp" "maybe param" "maybe type" "temp"
        (667641 'move' call_tmp[667638](360546 call _doms _mt[243] this[145948]))
        (145703 call(145698 call (partial) add _mt[243] call_tmp[667638]) x[145683])
        (481411 'end of statement')
        unknown call_tmp[667647] "expr temp" "maybe param" "maybe type" "temp"
        (667650 'move' call_tmp[667647](360551 call _domsLock _mt[243] this[145948]))
        (145710 call(145706 call (partial) unlock _mt[243] call_tmp[667647]))
      }
      (145719 'elided on block' 0 tmp[145715])
    }
    (519771 return _void[55])
  }
  function BaseDist[145934].dsiNewRectangularDom[145732](arg _mt[145954]:_MT[238], arg this[145952]:BaseDist[145934], param arg rank[145729]:int(64)[13], arg idxType[145734]:_any[178](?), param arg stridable[145737]:bool[10], arg inds[145740]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145761 call compilerError "rectangular domains not supported by this distribution")
    (519773 return _void[55])
  }
  function BaseDist[145934].dsiNewAssociativeDom[145770](arg _mt[145958]:_MT[238], arg this[145956]:BaseDist[145934], arg idxType[145768]:_any[178](?), param arg parSafe[145773]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145795 call compilerError "associative domains not supported by this distribution")
    (519775 return _void[55])
  }
  function BaseDist[145934].dsiNewSparseDom[145806](arg _mt[145962]:_MT[238], arg this[145960]:BaseDist[145934], param arg rank[145803]:int(64)[13], arg idxType[145808]:_any[178](?), arg dom[145811]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145833 call compilerError "sparse domains not supported by this distribution")
    (519777 return _void[55])
  }
  function BaseDist[145934].dsiSupportsPrivatization[145840](arg _mt[145966]:_MT[238], arg this[145964]:BaseDist[145934]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519781] "RVV" "param" "temp"
    (519786 'move' ret[519781](519785 'deref' 0))
    (519783 return ret[519781])
  }
  function BaseDist[145934].dsiRequiresPrivatization[145850](arg _mt[145970]:_MT[238], arg this[145968]:BaseDist[145934]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519790] "RVV" "param" "temp"
    (519795 'move' ret[519790](519794 'deref' 0))
    (519792 return ret[519790])
  }
  function BaseDist[145934].dsiDestroyDist[145860](arg _mt[145974]:_MT[238], arg this[145972]:BaseDist[145934]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519797 return _void[55])
  }
  function BaseDist[145934].dsiDisplayRepresentation[145867](arg _mt[145978]:_MT[238], arg this[145976]:BaseDist[145934]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145888 call writeln "<no way to display representation>")
    (519799 return _void[55])
  }
  function BaseDist[145934].trackDomains[145895](arg _mt[145982]:_MT[238], arg this[145980]:BaseDist[145934]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519803] "RVV" "param" "temp"
    (519808 'move' ret[519803](519807 'deref' 1))
    (519805 return ret[519803])
  }
  function BaseDist[145934].dsiTrackDomains[145905](arg _mt[145986]:_MT[238], arg this[145984]:BaseDist[145934]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519812] "RVV" "temp"
    (519817 'move' ret[519812](519816 'deref' 1))
    (519814 return ret[519812])
  }
  function BaseDist[145934].singleton[145915](arg _mt[145990]:_MT[238], arg this[145988]:BaseDist[145934]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519821] "RVV" "param" "temp"
    (519826 'move' ret[519821](519825 'deref' 0))
    (519823 return ret[519821])
  }
  function BaseDist[145934].dsiIsLayout[145925](arg _mt[145994]:_MT[238], arg this[145992]:BaseDist[145934]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519830] "RVV" "param" "temp"
    (519835 'move' ret[519830](519834 'deref' 0))
    (519832 return ret[519830])
  }
  type BaseDist[145934] val super[355709]:object[22] "super class" unknown _doms[145446](145445 call chpl__simpleSet[204919](?) unmanaged BaseDom[415463]) val _domsLock[145451]:chpl_LocalSpinlock[187398] chpl_LocalSpinlock[187398] val _free_when_no_doms[145456]:bool[10] bool[10] val pid[145462]:int(64)[13] nullPid[113724] int(64)[13]
  type unmanaged BaseDist[415526]
  type unmanaged BaseDist?[415517]
  type BaseDist?[415514](?)
  type BaseDist[382395](?)
  function BaseDom[146729].init[146030](arg _mt[146733]:_MT[238], arg this[146731]:BaseDom[146729]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461745] "temporary of super field" "temp"
    (461753 'move' super_tmp[461745](461746 '.v' this[146731] c"super"))
    (461749 call init _mt[243] super_tmp[461745])
    (481423 'end of statement')
    unknown tmp[461680] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492379] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[667654] "expr temp" "maybe param" "maybe type" "temp"
      (667657 'move' call_tmp[667654](461682 '.v' this[146731] c"super"))
      (492383 'move' call_type_tmp[492379](461685 'typeof' call_tmp[667654]))
    }
    (461686 'move' tmp[461680] call_type_tmp[492379])
    unknown call_tmp[667659] "maybe param" "maybe type" "temp"
    (667662 'move' call_tmp[667659](461691 'cast' tmp[461680] this[146731]))
    unknown chpl__thisAsParent[461688] "dead at end of block" "insert auto destroy" "temp"
    (543589 'init var' chpl__thisAsParent[461688] call_tmp[667659] tmp[461680])
    (461694 'setcid' chpl__thisAsParent[461688])
    (481424 'end of statement')
    unknown tmp[461697] "temp"
    unknown call_tmp[667664] "expr temp" "maybe param" "maybe type" "temp"
    (667667 'move' call_tmp[667664](461700 call chpl__simpleSet[204919](?) unmanaged BaseArr[415511]))
    (461702 'default init var' tmp[461697] call_tmp[667664])
    (461704 '.=' this[146731] c"_arrs" tmp[461697])
    (481425 'end of statement')
    val tmp[461708]:int(64)[13] "temp"
    (461711 'default init var' tmp[461708] int(64)[13])
    (461713 '.=' this[146731] c"_arrs_containing_dom" tmp[461708])
    (481426 'end of statement')
    val tmp[461717]:chpl_LocalSpinlock[187398] "temp"
    (461720 'default init var' tmp[461717] chpl_LocalSpinlock[187398])
    (461722 '.=' this[146731] c"_arrsLock" tmp[461717])
    (481427 'end of statement')
    val tmp[461726]:bool[10] "temp"
    (461729 'default init var' tmp[461726] bool[10])
    (461731 '.=' this[146731] c"_free_when_no_arrs" tmp[461726])
    (481428 'end of statement')
    unknown tmp[461736] "temp"
    (461739 'init var' tmp[461736] nullPid[113724] int(64)[13])
    (461741 'init field' this[146731] c"pid" tmp[461736])
    (481429 'end of statement')
    (461756 'setcid' this[146731])
    (519837 return _void[55])
  }
  function BaseDom[146729].deinit[146037](arg _mt[146737]:_MT[238], arg this[146735]:BaseDom[146729]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519839 return _void[55])
  }
  function BaseDom[146729].dsiMyDist[146044](arg _mt[146741]:_MT[238], arg this[146739]:BaseDom[146729]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519843] "RVV" "temp"
    (146067 call halt "internal error: dsiMyDist is not implemented")
    (481431 'end of statement')
    unknown ret[146072] "dead at end of block" "insert auto destroy" "unsafe"
    (543591 'default init var' ret[146072] unmanaged BaseDist[415526])
    (146075 'end of statement')
    (519849 'move' ret[519843](519848 'coerce' ret[146072] unmanaged BaseDist[415526]))
    gotoReturn _end_dsiMyDist[519841] _end_dsiMyDist[519841]
    (481432 'end of statement' ret[146072])
    label _end_dsiMyDist[519841]
    (519845 return ret[519843])
  }
  { scopeless type
    unmanaged BaseDist[415526]
  }
  function BaseDom[146729].remove[146084](arg _mt[146745]:_MT[238], arg this[146743]:BaseDom[146729]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519855] "RVV" "temp"
    unknown call_tmp[667671] "expr temp" "maybe param" "maybe type" "temp"
    (667674 'move' call_tmp[667671](146098 call(385475 call (partial) dsiMyDist _mt[243] this[146743])))
    unknown call_tmp[667678] "expr temp" "maybe param" "maybe type" "temp"
    (667681 'move' call_tmp[667678](146105 call(146101 call (partial) dsiTrackDomains _mt[243] call_tmp[667671])))
    unknown call_tmp[667685] "expr temp" "maybe param" "maybe type" "temp"
    (667688 'move' call_tmp[667685](146108 call(385481 call (partial) dsiLinksDistribution _mt[243] this[146743])))
    unknown call_tmp[667690] "expr temp" "maybe param" "maybe type" "temp"
    (667693 'move' call_tmp[667690](146109 call == call_tmp[667678] call_tmp[667685]))
    (146112 call assert call_tmp[667690])
    (481434 'end of statement')
    unknown ret_dom[146119] "dead at end of block" "insert auto destroy"
    (543593 'init var' ret_dom[146119] nil[44] unmanaged BaseDom?[415523])
    (146122 'end of statement')
    unknown ret_dist[146127] "dead at end of block" "insert auto destroy"
    (543595 'init var' ret_dist[146127] nil[44] unmanaged BaseDist?[415517])
    (146130 'end of statement')
    unknown call_tmp[667697] "maybe param" "maybe type" "temp"
    (667700 'move' call_tmp[667697](146133 call(385487 call (partial) dsiMyDist _mt[243] this[146743])))
    unknown dist[146134] "dead at end of block" "insert auto destroy"
    (543597 'init var' dist[146134] call_tmp[667697])
    (146137 'end of statement')
    unknown free_dom[146139] "dead at end of block" "insert auto destroy"
    (543599 'init var' free_dom[146139] 0)
    (146142 'end of statement')
    unknown remove_dist[146144] "dead at end of block" "insert auto destroy"
    (543601 'init var' remove_dist[146144] 0)
    (146147 'end of statement')
    {
      const tmp[146230] "const" "temp"
      unknown call_tmp[667702] "expr temp" "maybe param" "maybe type" "temp"
      (667705 'move' call_tmp[667702](146227 '_wide_get_locale' this[146743]))
      (146231 'move' tmp[146230](146228 'deref' call_tmp[667702]))
      {
        unknown arr_count[146150] "dead at end of block" "insert auto destroy"
        (543603 'init var' arr_count[146150] 0)
        (146153 'end of statement')
        {
          unknown call_tmp[667709] "expr temp" "maybe param" "maybe type" "temp"
          (667712 'move' call_tmp[667709](360558 call _arrsLock _mt[243] this[146743]))
          (146160 call(146156 call (partial) lock _mt[243] call_tmp[667709]))
          (481435 'end of statement')
          unknown call_tmp[667718] "expr temp" "maybe param" "maybe type" "temp"
          (667721 'move' call_tmp[667718](360563 call _arrs _mt[243] this[146743]))
          unknown call_tmp[667725] "expr temp" "maybe param" "maybe type" "temp"
          (667728 'move' call_tmp[667725](146165 call size _mt[243] call_tmp[667718]))
          (146168 call = arr_count[146150] call_tmp[667725])
          (481436 'end of statement' arr_count[146150])
          unknown call_tmp[667732] "expr temp" "maybe param" "maybe type" "temp"
          (667735 'move' call_tmp[667732](385497 call _arrs_containing_dom _mt[243] this[146743]))
          (146173 call += arr_count[146150] call_tmp[667732])
          (481438 'end of statement' arr_count[146150])
          unknown call_tmp[667739] "expr temp" "maybe param" "maybe type" "temp"
          (667742 'move' call_tmp[667739](385502 call _free_when_no_arrs _mt[243] this[146743]))
          (146178 call = call_tmp[667739] 1)
          (481440 'end of statement')
          unknown call_tmp[667746] "expr temp" "maybe param" "maybe type" "temp"
          (667749 'move' call_tmp[667746](360568 call _arrsLock _mt[243] this[146743]))
          (146186 call(146182 call (partial) unlock _mt[243] call_tmp[667746]))
        }
        unknown call_tmp[667753] "expr temp" "maybe param" "maybe type" "temp"
        (667756 'move' call_tmp[667753](146191 call == arr_count[146150] 0))
        unknown call_tmp[667758] "expr temp" "maybe param" "maybe type" "temp"
        (667761 'move' call_tmp[667758](146223 call _cond_test call_tmp[667753]))
        if call_tmp[667758]
        {
          (146195 call = free_dom[146139] 1)
          (481442 'end of statement' free_dom[146139])
          unknown call_tmp[667765] "expr temp" "maybe param" "maybe type" "temp"
          (667768 'move' call_tmp[667765](146201 call(385508 call (partial) dsiLinksDistribution _mt[243] this[146743])))
          unknown call_tmp[667770] "expr temp" "maybe param" "maybe type" "temp"
          (667773 'move' call_tmp[667770](146219 call _cond_test call_tmp[667765]))
          if call_tmp[667770]
          {
            unknown call_tmp[667777] "expr temp" "maybe param" "maybe type" "temp"
            (667780 'move' call_tmp[667777](146212 call _to_unmanaged this[146743]))
            unknown call_tmp[667782] "expr temp" "maybe param" "maybe type" "temp"
            (667785 'move' call_tmp[667782](146214 call(146206 call (partial) remove_dom _mt[243] dist[146134]) call_tmp[667777]))
            (146215 call = remove_dist[146144] call_tmp[667782])
            (481444 'end of statement' remove_dist[146144] dist[146134])
          }
        }
      }
      (146234 'elided on block' 0 tmp[146230])
    }
    unknown call_tmp[667787] "expr temp" "maybe param" "maybe type" "temp"
    (667790 'move' call_tmp[667787](146247 call _cond_test free_dom[146139]))
    if call_tmp[667787]
    {
      unknown call_tmp[667792] "expr temp" "maybe param" "maybe type" "temp"
      (667795 'move' call_tmp[667792](146243 call _to_unmanaged this[146743]))
      (146244 call = ret_dom[146119] call_tmp[667792])
      (481447 'end of statement' ret_dom[146119])
    }
    unknown call_tmp[667797] "expr temp" "maybe param" "maybe type" "temp"
    (667800 'move' call_tmp[667797](146258 call _cond_test remove_dist[146144]))
    if call_tmp[667797]
    {
      (146255 call = ret_dist[146127] dist[146134])
      (481449 'end of statement' ret_dist[146127] dist[146134])
    }
    unknown call_tmp[667802] "expr temp" "maybe param" "maybe type" "temp"
    (667805 'move' call_tmp[667802](146266 call _build_tuple ret_dom[146119] ret_dist[146127]))
    unknown call_tmp[667807] "expr temp" "maybe param" "maybe type" "temp"
    (667810 'move' call_tmp[667807](519860 call _build_tuple unmanaged BaseDom?[415523] unmanaged BaseDist?[415517]))
    (519864 'move' ret[519855](519863 'coerce' call_tmp[667802] call_tmp[667807]))
    gotoReturn _end_remove[519853] _end_remove[519853]
    (481452 'end of statement' ret_dom[146119] ret_dist[146127])
    label _end_remove[519853]
    (519857 return ret[519855])
  }
  { scopeless type
    (146093 call _build_tuple unmanaged BaseDom?[415523] unmanaged BaseDist?[415517])
  }
  function BaseDom[146729].remove_arr[146280](arg _mt[146749]:_MT[238], arg this[146747]:BaseDom[146729], arg x[146277]:unmanaged BaseArr[415511], param arg rmFromList[146283] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519870] "RVV" "temp"
    unknown call_tmp[667812] "maybe param" "maybe type" "temp"
    (667815 'move' call_tmp[667812](146288 call - 1))
    unknown count[146290] "dead at end of block" "insert auto destroy"
    (543605 'init var' count[146290] call_tmp[667812])
    (146293 'end of statement')
    {
      const tmp[146374] "const" "temp"
      unknown call_tmp[667817] "expr temp" "maybe param" "maybe type" "temp"
      (667820 'move' call_tmp[667817](146371 '_wide_get_locale' this[146747]))
      (146375 'move' tmp[146374](146372 'deref' call_tmp[667817]))
      {
        unknown call_tmp[667822] "maybe param" "maybe type" "temp"
        (667825 'move' call_tmp[667822](146297 call - 1))
        unknown cnt[146299] "dead at end of block" "insert auto destroy"
        (543607 'init var' cnt[146299] call_tmp[667822])
        (146302 'end of statement')
        {
          unknown call_tmp[667829] "expr temp" "maybe param" "maybe type" "temp"
          (667832 'move' call_tmp[667829](360574 call _arrsLock _mt[243] this[146747]))
          (146309 call(146305 call (partial) lock _mt[243] call_tmp[667829]))
          (481455 'end of statement')
          unknown call_tmp[667836] "expr temp" "maybe param" "maybe type" "temp"
          (667839 'move' call_tmp[667836](146326 call _cond_test rmFromList[146283]))
          if call_tmp[667836]
          {
            unknown call_tmp[667843] "expr temp" "maybe param" "maybe type" "temp"
            (667846 'move' call_tmp[667843](360579 call _arrs _mt[243] this[146747]))
            (146319 call(146314 call (partial) remove _mt[243] call_tmp[667843]) x[146277])
          }
          {
            unknown call_tmp[667852] "expr temp" "maybe param" "maybe type" "temp"
            (667855 'move' call_tmp[667852](385527 call _arrs_containing_dom _mt[243] this[146747]))
            (146323 call -= call_tmp[667852] 1)
          }
          unknown call_tmp[667859] "expr temp" "maybe param" "maybe type" "temp"
          (667862 'move' call_tmp[667859](360584 call _arrs _mt[243] this[146747]))
          unknown call_tmp[667866] "expr temp" "maybe param" "maybe type" "temp"
          (667869 'move' call_tmp[667866](146334 call size _mt[243] call_tmp[667859]))
          (146337 call = cnt[146299] call_tmp[667866])
          (481458 'end of statement' cnt[146299])
          unknown call_tmp[667873] "expr temp" "maybe param" "maybe type" "temp"
          (667876 'move' call_tmp[667873](385534 call _arrs_containing_dom _mt[243] this[146747]))
          (146342 call += cnt[146299] call_tmp[667873])
          (481460 'end of statement' cnt[146299])
          unknown call_tmp[667880] "expr temp" "maybe param" "maybe type" "temp"
          (667883 'move' call_tmp[667880](385539 call _free_when_no_arrs _mt[243] this[146747]))
          unknown call_tmp[667885] "expr temp" "maybe param" "maybe type" "temp"
          (667888 'move' call_tmp[667885](146346 call ! call_tmp[667880]))
          unknown call_tmp[667890] "expr temp" "maybe param" "maybe type" "temp"
          (667893 'move' call_tmp[667890](146353 call _cond_test call_tmp[667885]))
          if call_tmp[667890]
          {
            (146350 call += cnt[146299] 1)
            (481462 'end of statement' cnt[146299])
          }
          unknown call_tmp[667897] "expr temp" "maybe param" "maybe type" "temp"
          (667900 'move' call_tmp[667897](360589 call _arrsLock _mt[243] this[146747]))
          (146363 call(146359 call (partial) unlock _mt[243] call_tmp[667897]))
        }
        (146368 call = count[146290] cnt[146299])
        (481465 'end of statement' count[146290] cnt[146299])
      }
      (146378 'elided on block' 0 tmp[146374])
    }
    unknown call_tmp[667904] "expr temp" "maybe param" "maybe type" "temp"
    (667907 'move' call_tmp[667904](146384 call == count[146290] 0))
    (519876 'move' ret[519870](519875 'coerce' call_tmp[667904] bool[10]))
    gotoReturn _end_remove_arr[519868] _end_remove_arr[519868]
    (481468 'end of statement' count[146290])
    label _end_remove_arr[519868]
    (519872 return ret[519870])
  }
  { scopeless type
    bool[10]
  }
  function BaseDom[146729].add_arr[146398](arg _mt[146753]:_MT[238], arg this[146751]:BaseDom[146729], arg x[146395]:unmanaged BaseArr[415511], param arg locking[146401] :
  1 =
  1, param arg addToList[146405] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    {
      const tmp[146459] "const" "temp"
      unknown call_tmp[667909] "expr temp" "maybe param" "maybe type" "temp"
      (667912 'move' call_tmp[667909](146456 '_wide_get_locale' this[146751]))
      (146460 'move' tmp[146459](146457 'deref' call_tmp[667909]))
      {
        unknown call_tmp[667914] "expr temp" "maybe param" "maybe type" "temp"
        (667917 'move' call_tmp[667914](146417 call _cond_test locking[146401]))
        if call_tmp[667914]
        {
          unknown call_tmp[667921] "expr temp" "maybe param" "maybe type" "temp"
          (667924 'move' call_tmp[667921](360594 call _arrsLock _mt[243] this[146751]))
          (146415 call(146411 call (partial) lock _mt[243] call_tmp[667921]))
        }
        unknown call_tmp[667928] "expr temp" "maybe param" "maybe type" "temp"
        (667931 'move' call_tmp[667928](146437 call _cond_test addToList[146405]))
        if call_tmp[667928]
        {
          unknown call_tmp[667935] "expr temp" "maybe param" "maybe type" "temp"
          (667938 'move' call_tmp[667935](360599 call _arrs _mt[243] this[146751]))
          (146430 call(146425 call (partial) add _mt[243] call_tmp[667935]) x[146395])
        }
        {
          unknown call_tmp[667944] "expr temp" "maybe param" "maybe type" "temp"
          (667947 'move' call_tmp[667944](385553 call _arrs_containing_dom _mt[243] this[146751]))
          (146434 call += call_tmp[667944] 1)
        }
        unknown call_tmp[667949] "expr temp" "maybe param" "maybe type" "temp"
        (667952 'move' call_tmp[667949](146451 call _cond_test locking[146401]))
        if call_tmp[667949]
        {
          unknown call_tmp[667956] "expr temp" "maybe param" "maybe type" "temp"
          (667959 'move' call_tmp[667956](360604 call _arrsLock _mt[243] this[146751]))
          (146449 call(146445 call (partial) unlock _mt[243] call_tmp[667956]))
        }
      }
      (146463 'elided on block' 0 tmp[146459])
    }
    (519880 return _void[55])
  }
  function BaseDom[146729].remove_containing_arr[146477](arg _mt[146757]:_MT[238], arg this[146755]:BaseDom[146729], arg x[146474]:unmanaged BaseArr[415511]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519884] "RVV" "temp"
    unknown call_tmp[667963] "maybe param" "maybe type" "temp"
    (667966 'move' call_tmp[667963](146480 call - 1))
    unknown count[146482] "dead at end of block" "insert auto destroy"
    (543609 'init var' count[146482] call_tmp[667963])
    (146485 'end of statement')
    {
      const tmp[146549] "const" "temp"
      unknown call_tmp[667968] "expr temp" "maybe param" "maybe type" "temp"
      (667971 'move' call_tmp[667968](146546 '_wide_get_locale' this[146755]))
      (146550 'move' tmp[146549](146547 'deref' call_tmp[667968]))
      {
        unknown call_tmp[667973] "maybe param" "maybe type" "temp"
        (667976 'move' call_tmp[667973](146489 call - 1))
        unknown cnt[146491] "dead at end of block" "insert auto destroy"
        (543611 'init var' cnt[146491] call_tmp[667973])
        (146494 'end of statement')
        unknown call_tmp[667980] "expr temp" "maybe param" "maybe type" "temp"
        (667983 'move' call_tmp[667980](360609 call _arrsLock _mt[243] this[146755]))
        (146501 call(146497 call (partial) lock _mt[243] call_tmp[667980]))
        (481474 'end of statement')
        unknown call_tmp[667989] "expr temp" "maybe param" "maybe type" "temp"
        (667992 'move' call_tmp[667989](385561 call _arrs_containing_dom _mt[243] this[146755]))
        (146505 call -= call_tmp[667989] 1)
        (481475 'end of statement')
        unknown call_tmp[667996] "expr temp" "maybe param" "maybe type" "temp"
        (667999 'move' call_tmp[667996](360614 call _arrs _mt[243] this[146755]))
        unknown call_tmp[668003] "expr temp" "maybe param" "maybe type" "temp"
        (668006 'move' call_tmp[668003](146510 call size _mt[243] call_tmp[667996]))
        (146513 call = cnt[146491] call_tmp[668003])
        (481476 'end of statement' cnt[146491])
        unknown call_tmp[668010] "expr temp" "maybe param" "maybe type" "temp"
        (668013 'move' call_tmp[668010](385568 call _arrs_containing_dom _mt[243] this[146755]))
        (146518 call += cnt[146491] call_tmp[668010])
        (481478 'end of statement' cnt[146491])
        unknown call_tmp[668017] "expr temp" "maybe param" "maybe type" "temp"
        (668020 'move' call_tmp[668017](385573 call _free_when_no_arrs _mt[243] this[146755]))
        unknown call_tmp[668022] "expr temp" "maybe param" "maybe type" "temp"
        (668025 'move' call_tmp[668022](146522 call ! call_tmp[668017]))
        unknown call_tmp[668027] "expr temp" "maybe param" "maybe type" "temp"
        (668030 'move' call_tmp[668027](146529 call _cond_test call_tmp[668022]))
        if call_tmp[668027]
        {
          (146526 call += cnt[146491] 1)
          (481480 'end of statement' cnt[146491])
        }
        unknown call_tmp[668034] "expr temp" "maybe param" "maybe type" "temp"
        (668037 'move' call_tmp[668034](360619 call _arrsLock _mt[243] this[146755]))
        (146539 call(146535 call (partial) unlock _mt[243] call_tmp[668034]))
        (481482 'end of statement')
        (146543 call = count[146482] cnt[146491])
        (481483 'end of statement' count[146482] cnt[146491])
      }
      (146553 'elided on block' 0 tmp[146549])
    }
    unknown call_tmp[668041] "expr temp" "maybe param" "maybe type" "temp"
    (668044 'move' call_tmp[668041](146559 call == count[146482] 0))
    (519889 'move' ret[519884](519888 'deref' call_tmp[668041]))
    gotoReturn _end_remove_containing_arr[519882] _end_remove_containing_arr[519882]
    (481486 'end of statement' count[146482])
    label _end_remove_containing_arr[519882]
    (519886 return ret[519884])
  }
  function BaseDom[146729].add_containing_arr[146572](arg _mt[146761]:_MT[238], arg this[146759]:BaseDom[146729], arg x[146569]:unmanaged BaseArr[415511]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    {
      const tmp[146598] "const" "temp"
      unknown call_tmp[668046] "expr temp" "maybe param" "maybe type" "temp"
      (668049 'move' call_tmp[668046](146595 '_wide_get_locale' this[146759]))
      (146599 'move' tmp[146598](146596 'deref' call_tmp[668046]))
      {
        unknown call_tmp[668053] "expr temp" "maybe param" "maybe type" "temp"
        (668056 'move' call_tmp[668053](360624 call _arrsLock _mt[243] this[146759]))
        (146580 call(146576 call (partial) lock _mt[243] call_tmp[668053]))
        (481488 'end of statement')
        unknown call_tmp[668062] "expr temp" "maybe param" "maybe type" "temp"
        (668065 'move' call_tmp[668062](385584 call _arrs_containing_dom _mt[243] this[146759]))
        (146585 call += call_tmp[668062] 1)
        (481489 'end of statement')
        unknown call_tmp[668069] "expr temp" "maybe param" "maybe type" "temp"
        (668072 'move' call_tmp[668069](360629 call _arrsLock _mt[243] this[146759]))
        (146593 call(146589 call (partial) unlock _mt[243] call_tmp[668069]))
      }
      (146602 'elided on block' 0 tmp[146598])
    }
    (519893 return _void[55])
  }
  function BaseDom[146729].dsiSupportsPrivatization[146611](arg _mt[146765]:_MT[238], arg this[146763]:BaseDom[146729]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519897] "RVV" "param" "temp"
    (519902 'move' ret[519897](519901 'deref' 0))
    (519899 return ret[519897])
  }
  function BaseDom[146729].dsiRequiresPrivatization[146621](arg _mt[146769]:_MT[238], arg this[146767]:BaseDom[146729]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519906] "RVV" "param" "temp"
    (519911 'move' ret[519906](519910 'deref' 0))
    (519908 return ret[519906])
  }
  function BaseDom[146729].linksDistribution[146631](arg _mt[146773]:_MT[238], arg this[146771]:BaseDom[146729]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519915] "RVV" "param" "temp"
    (519920 'move' ret[519915](519919 'deref' 1))
    (519917 return ret[519915])
  }
  function BaseDom[146729].dsiLinksDistribution[146641](arg _mt[146777]:_MT[238], arg this[146775]:BaseDom[146729]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519924] "RVV" "temp"
    (519929 'move' ret[519924](519928 'deref' 1))
    (519926 return ret[519924])
  }
  function BaseDom[146729].dsiDestroyDom[146651](arg _mt[146781]:_MT[238], arg this[146779]:BaseDom[146729]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519931 return _void[55])
  }
  function BaseDom[146729].dsiDisplayRepresentation[146658](arg _mt[146785]:_MT[238], arg this[146783]:BaseDom[146729]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (146663 call writeln "<no way to display representation>")
    (519933 return _void[55])
  }
  function BaseDom[146729].dsiSupportsAutoLocalAccess[146670](arg _mt[146789]:_MT[238], arg this[146787]:BaseDom[146729]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519937] "RVV" "param" "temp"
    (519942 'move' ret[519937](519941 'deref' 0))
    (519939 return ret[519937])
  }
  function BaseDom[415358](?).isDefaultRectangular[146680](arg _mt[146793]:_MT[238], arg this[146791]:BaseDom[415358](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519946] "RVV" "param" "temp"
    (519951 'move' ret[519946](519950 'deref' 0))
    (519948 return ret[519946])
  }
  function BaseDom[146729].isDefaultRectangular[146690](arg _mt[146797]:_MT[238], arg this[146795]:BaseDom[146729]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519955] "RVV" "param" "temp"
    (519960 'move' ret[519955](519959 'deref' 0))
    (519957 return ret[519955])
  }
  function BaseDom[146729].isSliceDomainView[146700](arg _mt[146801]:_MT[238], arg this[146799]:BaseDom[146729]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519964] "RVV" "param" "temp"
    (519969 'move' ret[519964](519968 'deref' 0))
    (519966 return ret[519964])
  }
  function BaseDom[146729].isRankChangeDomainView[146710](arg _mt[146805]:_MT[238], arg this[146803]:BaseDom[146729]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519973] "RVV" "param" "temp"
    (519978 'move' ret[519973](519977 'deref' 0))
    (519975 return ret[519973])
  }
  function BaseDom[146729].isReindexDomainView[146720](arg _mt[146809]:_MT[238], arg this[146807]:BaseDom[146729]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519982] "RVV" "param" "temp"
    (519987 'move' ret[519982](519986 'deref' 0))
    (519984 return ret[519982])
  }
  type BaseDom[146729] val super[355713]:object[22] "super class" unknown _arrs[146003](146002 call chpl__simpleSet[204919](?) unmanaged BaseArr[415511]) val _arrs_containing_dom[146008]:int(64)[13] int(64)[13] val _arrsLock[146013]:chpl_LocalSpinlock[187398] chpl_LocalSpinlock[187398] val _free_when_no_arrs[146018]:bool[10] bool[10] val pid[146024]:int(64)[13] nullPid[113724] int(64)[13]
  type unmanaged BaseDom?[415523]
  type BaseDom?[415520](?)
  type unmanaged BaseDom[415463]
  type BaseDom[415358](?)
  type BaseDom[372800](?)
  function BaseRectangularDom[146897](?).getBaseArrType[146830](arg _mt[146901]:_MT[238], arg this[146899]:BaseRectangularDom[146897](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[519991] "RVV" "temp" "type variable"
    unknown call_tmp[668078] "expr temp" "maybe param" "maybe type" "temp"
    (668081 'move' call_tmp[668078](385593 call rank _mt[243] this[146899]))
    unknown call_tmp[668085] "expr temp" "maybe param" "maybe type" "temp"
    (668088 'move' call_tmp[668085](385598 call idxType _mt[243] this[146899]))
    unknown call_tmp[668092] "expr temp" "maybe param" "maybe type" "temp"
    (668095 'move' call_tmp[668092](385603 call stridable _mt[243] this[146899]))
    unknown call_tmp[668097] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (668100 'move' call_tmp[668097](747932 'new' BaseArrOverRectangularDom[385588](?)(rank = call_tmp[668078])(idxType = call_tmp[668085])(stridable = call_tmp[668092])(_chpl_manager = unmanaged[220](?))))
    unknown tmp[146844] "dead at end of block" "insert auto destroy"
    (543613 'init var' tmp[146844] call_tmp[668097])
    (146847 'end of statement')
    unknown call_tmp[668102] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (668105 'move' call_tmp[668102](146850 'typeof' tmp[146844]))
    (519996 'move' ret[519991](519995 'deref' call_tmp[668102]))
    gotoReturn _end_getBaseArrType[519989] _end_getBaseArrType[519989]
    (481502 'end of statement' tmp[146844])
    label _end_getBaseArrType[519989]
    (519993 return ret[519991])
  }
  function BaseRectangularDom[146897](?).deinit[146857](arg _mt[146905]:_MT[238], arg this[146903]:BaseRectangularDom[146897](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520000 return _void[55])
  }
  function BaseRectangularDom[146897](?).dsiAdd[146866](arg _mt[146909]:_MT[238], arg this[146907]:BaseRectangularDom[146897](?), in arg x[146864]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520004] "RVV" "temp"
    (146871 call compilerError "Cannot add indices to a rectangular domain")
    (481504 'end of statement')
    (520009 'move' ret[520004](520008 'deref' 0))
    (520006 return ret[520004])
  }
  function BaseRectangularDom[146897](?).dsiRemove[146883](arg _mt[146913]:_MT[238], arg this[146911]:BaseRectangularDom[146897](?), arg x[146881]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520013] "RVV" "temp"
    (146888 call compilerError "Cannot remove indices from a rectangular domain")
    (481506 'end of statement')
    (520018 'move' ret[520013](520017 'deref' 0))
    (520015 return ret[520013])
  }
  type BaseRectangularDom[146897](?) val super[355715]:BaseDom[146729] "super class" unknown rank[146816] "param" int(64)[13] unknown idxType[146820] "type variable" unknown stridable[146824] "param" bool[10]
  type BaseRectangularDom[382300](?)
  function BaseSparseDomImpl[147965](?).deinit[146932](arg _mt[147969]:_MT[238], arg this[147967]:BaseSparseDomImpl[147965](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520020 return _void[55])
  }
  function BaseSparseDomImpl[147965](?).dsiBulkAdd[146950](arg _mt[147973]:_MT[238], arg this[147971]:BaseSparseDomImpl[147965](?), arg inds[146947]:_array[133600](?), arg dataSorted[146953] :
  0 =
  0, arg isUnique[146957] :
  0 =
  0, arg preserveInds[146961] :
  1 =
  1, arg addOn[146965] :
  nilLocale[89943] =
  nilLocale[89943]) : _unknown[51] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[520024] "RVV" "temp"
    unknown tmp[427147] "maybe param" "temp"
    (427158 'move' tmp[427147](146969 call ! dataSorted[146953]))
    unknown call_tmp[668107] "expr temp" "maybe param" "maybe type" "temp"
    (668110 'move' call_tmp[668107](427160 call _cond_invalid tmp[427147]))
    if call_tmp[668107]
    {
      (427163 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568561] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568562] "maybe param" "temp"
    unknown call_tmp[668112] "expr temp" "maybe param" "maybe type" "temp"
    (668115 'move' call_tmp[668112](427148 call isTrue tmp[427147]))
    (568567 'move' tmp[568562](568565 call _cond_test call_tmp[668112]))
    if tmp[568562]
    {
      unknown tmp[568569] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568571 'move' tmp[568569](427151 call isTrue preserveInds[146961]))
      (568576 'move' tmp[568561](568573 '_paramFoldLogical' tmp[568562] tmp[568569]))
    }
    {
      (568581 'move' tmp[568561](568578 '_paramFoldLogical' tmp[568562] 0))
    }
    unknown call_tmp[668117] "expr temp" "maybe param" "maybe type" "temp"
    (668120 'move' call_tmp[668117](146999 call _cond_test tmp[568561]))
    if call_tmp[668117]
    {
      unknown _inds[146975] "dead at end of block" "insert auto destroy"
      (543615 'init var' _inds[146975] inds[146947])
      (146978 'end of statement')
      unknown call_tmp[668124] "expr temp" "maybe param" "maybe type" "temp"
      (668127 'move' call_tmp[668124](146986 call(385624 call (partial) bulkAdd_help _mt[243] this[147971]) _inds[146975] dataSorted[146953] isUnique[146957] addOn[146965]))
      (520029 'move' ret[520024](520028 'deref' call_tmp[668124]))
      gotoReturn _end_dsiBulkAdd[520022] _end_dsiBulkAdd[520022]
      (481509 'end of statement' _inds[146975])
    }
    {
      unknown call_tmp[668131] "expr temp" "maybe param" "maybe type" "temp"
      (668134 'move' call_tmp[668131](146995 call(385632 call (partial) bulkAdd_help _mt[243] this[147971]) inds[146947] dataSorted[146953] isUnique[146957] addOn[146965]))
      (520034 'move' ret[520024](520033 'deref' call_tmp[668131]))
      gotoReturn _end_dsiBulkAdd[520022] _end_dsiBulkAdd[520022]
    }
    label _end_dsiBulkAdd[520022]
    (520026 return ret[520024])
  }
  where {
    unknown call_tmp[668138] "expr temp" "maybe param" "maybe type" "temp"
    (668141 'move' call_tmp[668138](385609 call rank _mt[243] this[147971]))
    unknown call_tmp[668145] "expr temp" "maybe param" "maybe type" "temp"
    (668148 'move' call_tmp[668145](385614 call idxType _mt[243] this[147971]))
    unknown call_tmp[668150] "expr temp" "maybe param" "maybe type" "temp"
    (668153 'move' call_tmp[668150](146942 call chpl__buildIndexType call_tmp[668138] call_tmp[668145]))
    unknown call_tmp[668157] "expr temp" "maybe param" "maybe type" "temp"
    (668160 'move' call_tmp[668157](461764 call eltType _mt[243] inds[146947]))
    unknown call_tmp[668162] "expr temp" "maybe param" "maybe type" "temp"
    (668165 'move' call_tmp[668162](461768 call == call_tmp[668150] call_tmp[668157]))
    (461762 call & 1 call_tmp[668162])
  }
  function BaseSparseDomImpl[147965](?).bulkAdd_help[147021](arg _mt[147977]:_MT[238], arg this[147975]:BaseSparseDomImpl[147965](?), arg inds[147018]:_array[133600](?), arg dataSorted[147024] :
  0 =
  0, arg isUnique[147028] :
  0 =
  0, arg addOn[147032] :
  nilLocale[89943] =
  nilLocale[89943]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[520040] "RVV" "temp"
    (147054 call halt "Helper function called on the BaseSparseDomImpl")
    (481512 'end of statement')
    unknown call_tmp[668167] "expr temp" "maybe param" "maybe type" "temp"
    (668170 'move' call_tmp[668167](147058 call - 1))
    (520045 'move' ret[520040](520044 'deref' call_tmp[668167]))
    (520042 return ret[520040])
  }
  where {
    unknown call_tmp[668174] "expr temp" "maybe param" "maybe type" "temp"
    (668177 'move' call_tmp[668174](385641 call rank _mt[243] this[147975]))
    unknown call_tmp[668181] "expr temp" "maybe param" "maybe type" "temp"
    (668184 'move' call_tmp[668181](385646 call idxType _mt[243] this[147975]))
    unknown call_tmp[668186] "expr temp" "maybe param" "maybe type" "temp"
    (668189 'move' call_tmp[668186](147014 call chpl__buildIndexType call_tmp[668174] call_tmp[668181]))
    unknown call_tmp[668193] "expr temp" "maybe param" "maybe type" "temp"
    (668196 'move' call_tmp[668193](461776 call eltType _mt[243] inds[147018]))
    unknown call_tmp[668198] "expr temp" "maybe param" "maybe type" "temp"
    (668201 'move' call_tmp[668198](461780 call == call_tmp[668186] call_tmp[668193]))
    (461774 call & 1 call_tmp[668198])
  }
  function BaseSparseDomImpl[147965](?)._grow[147070](arg _mt[147981]:_MT[238], arg this[147979]:BaseSparseDomImpl[147965](?), arg size[147067]:int(64)[13], arg factor[147073] :
  arrayAsVecGrowthFactor[113761] =
  arrayAsVecGrowthFactor[113761]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668205] "expr temp" "maybe param" "maybe type" "temp"
    (668208 'move' call_tmp[668205](360634 call nnzDom _mt[243] this[147979]))
    unknown call_tmp[668212] "maybe param" "maybe type" "temp"
    (668215 'move' call_tmp[668212](147077 call size _mt[243] call_tmp[668205]))
    const oldNNZDomSize[147080] "dead at end of block" "const" "insert auto destroy"
    (543617 'init var' oldNNZDomSize[147080] call_tmp[668212])
    (147083 'end of statement')
    unknown call_tmp[668217] "expr temp" "maybe param" "maybe type" "temp"
    (668220 'move' call_tmp[668217](147087 call > size[147067] oldNNZDomSize[147080]))
    unknown call_tmp[668222] "expr temp" "maybe param" "maybe type" "temp"
    (668225 'move' call_tmp[668222](147122 call _cond_test call_tmp[668217]))
    if call_tmp[668222]
    {
      const _newNNZDomSize[147104] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[568588] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568589] "maybe param" "temp"
      (568594 'move' tmp[568589](568592 call _cond_test oldNNZDomSize[147080]))
      if tmp[568589]
      {
        unknown tmp[568596] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668227] "expr temp" "maybe param" "maybe type" "temp"
        (668230 'move' call_tmp[668227](147093 call * factor[147073] oldNNZDomSize[147080]))
        unknown call_tmp[668232] "expr temp" "maybe param" "maybe type" "temp"
        (668235 'move' call_tmp[668232](147096 call ceil call_tmp[668227]))
        (568598 'move' tmp[568596](147098 call _cast int(64)[13] call_tmp[668232]))
        (568603 'move' tmp[568588](568600 '_paramFoldLogical' tmp[568589] tmp[568596]))
      }
      {
        (568608 'move' tmp[568588](568605 '_paramFoldLogical' tmp[568589] 1))
      }
      (543619 'init var' _newNNZDomSize[147104] tmp[568588])
      (147107 'end of statement' oldNNZDomSize[147080] oldNNZDomSize[147080])
      unknown call_tmp[668239] "expr temp" "maybe param" "maybe type" "temp"
      (668242 'move' call_tmp[668239](385658 call nnzDom _mt[243] this[147979]))
      unknown call_tmp[668244] "expr temp" "maybe param" "maybe type" "temp"
      (668247 'move' call_tmp[668244](147111 call chpl_build_low_bounded_range 1))
      unknown call_tmp[668249] "expr temp" "maybe param" "maybe type" "temp"
      (668252 'move' call_tmp[668249](147114 call # call_tmp[668244] _newNNZDomSize[147104]))
      unknown call_tmp[668254] "expr temp" "maybe param" "maybe type" "temp"
      (668257 'move' call_tmp[668254](147117 call chpl__buildDomainExpr call_tmp[668249]))
      (147119 call = call_tmp[668239] call_tmp[668254])
      (481516 'end of statement' _newNNZDomSize[147104])
    }
    (520047 return _void[55])
  }
  function BaseSparseDomImpl[147965](?)._shrink[147134](arg _mt[147985]:_MT[238], arg this[147983]:BaseSparseDomImpl[147965](?), arg size[147131]:int(64)[13], arg factor[147137] :
  arrayAsVecGrowthFactor[113761] =
  arrayAsVecGrowthFactor[113761]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668259] "expr temp" "maybe param" "maybe type" "temp"
    (668262 'move' call_tmp[668259](147142 call == size[147131] 0))
    unknown call_tmp[668264] "expr temp" "maybe param" "maybe type" "temp"
    (668267 'move' call_tmp[668264](147208 call _cond_test call_tmp[668259]))
    if call_tmp[668264]
    {
      unknown call_tmp[668271] "expr temp" "maybe param" "maybe type" "temp"
      (668274 'move' call_tmp[668271](385666 call nnzDom _mt[243] this[147983]))
      unknown call_tmp[668276] "expr temp" "maybe param" "maybe type" "temp"
      (668279 'move' call_tmp[668276](147147 call chpl_build_bounded_range 1 0))
      unknown call_tmp[668281] "expr temp" "maybe param" "maybe type" "temp"
      (668284 'move' call_tmp[668281](147150 call chpl__buildDomainExpr call_tmp[668276]))
      (147152 call = call_tmp[668271] call_tmp[668281])
    }
    {
      unknown call_tmp[668288] "expr temp" "maybe param" "maybe type" "temp"
      (668291 'move' call_tmp[668288](360639 call nnzDom _mt[243] this[147983]))
      unknown call_tmp[668295] "expr temp" "maybe param" "maybe type" "temp"
      (668298 'move' call_tmp[668295](147157 call size _mt[243] call_tmp[668288]))
      unknown call_tmp[668300] "expr temp" "maybe param" "maybe type" "temp"
      (668303 'move' call_tmp[668300](147162 call ** factor[147137] 2))
      unknown call_tmp[668305] "expr temp" "maybe param" "maybe type" "temp"
      (668308 'move' call_tmp[668305](147164 call / call_tmp[668295] call_tmp[668300]))
      unknown call_tmp[668310] "maybe param" "maybe type" "temp"
      (668313 'move' call_tmp[668310](147167 call _cast int(64)[13] call_tmp[668305]))
      const shrinkThreshold[147169] "dead at end of block" "const" "insert auto destroy"
      (543621 'init var' shrinkThreshold[147169] call_tmp[668310])
      (147172 'end of statement')
      unknown call_tmp[668315] "expr temp" "maybe param" "maybe type" "temp"
      (668318 'move' call_tmp[668315](147176 call < size[147131] shrinkThreshold[147169]))
      unknown call_tmp[668320] "expr temp" "maybe param" "maybe type" "temp"
      (668323 'move' call_tmp[668320](147204 call _cond_test call_tmp[668315]))
      if call_tmp[668320]
      {
        unknown call_tmp[668327] "expr temp" "maybe param" "maybe type" "temp"
        (668330 'move' call_tmp[668327](360644 call nnzDom _mt[243] this[147983]))
        unknown call_tmp[668334] "expr temp" "maybe param" "maybe type" "temp"
        (668337 'move' call_tmp[668334](147179 call size _mt[243] call_tmp[668327]))
        unknown call_tmp[668339] "expr temp" "maybe param" "maybe type" "temp"
        (668342 'move' call_tmp[668339](147183 call / call_tmp[668334] factor[147137]))
        unknown call_tmp[668344] "maybe param" "maybe type" "temp"
        (668347 'move' call_tmp[668344](147186 call _cast int(64)[13] call_tmp[668339]))
        const _newNNZDomSize[147188] "dead at end of block" "const" "insert auto destroy"
        (543623 'init var' _newNNZDomSize[147188] call_tmp[668344])
        (147191 'end of statement')
        unknown call_tmp[668351] "expr temp" "maybe param" "maybe type" "temp"
        (668354 'move' call_tmp[668351](385675 call nnzDom _mt[243] this[147983]))
        unknown call_tmp[668356] "expr temp" "maybe param" "maybe type" "temp"
        (668359 'move' call_tmp[668356](147196 call chpl_build_bounded_range 1 _newNNZDomSize[147188]))
        unknown call_tmp[668361] "expr temp" "maybe param" "maybe type" "temp"
        (668364 'move' call_tmp[668361](147199 call chpl__buildDomainExpr call_tmp[668356]))
        (147201 call = call_tmp[668351] call_tmp[668361])
        (481519 'end of statement' _newNNZDomSize[147188])
      }
    }
    (520049 return _void[55])
  }
  function BaseSparseDomImpl[147965](?)._bulkGrow[147217](arg _mt[147989]:_MT[238], arg this[147987]:BaseSparseDomImpl[147965](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668368] "maybe param" "maybe type" "temp"
    (668371 'move' call_tmp[668368](147221 call(385682 call (partial) getNNZ _mt[243] this[147987])))
    const nnz[147222] "dead at end of block" "const" "insert auto destroy"
    (543625 'init var' nnz[147222] call_tmp[668368])
    (147225 'end of statement')
    unknown call_tmp[668375] "expr temp" "maybe param" "maybe type" "temp"
    (668378 'move' call_tmp[668375](360649 call nnzDom _mt[243] this[147987]))
    unknown call_tmp[668382] "expr temp" "maybe param" "maybe type" "temp"
    (668385 'move' call_tmp[668382](147229 call size _mt[243] call_tmp[668375]))
    unknown call_tmp[668387] "expr temp" "maybe param" "maybe type" "temp"
    (668390 'move' call_tmp[668387](147232 call > nnz[147222] call_tmp[668382]))
    unknown call_tmp[668392] "expr temp" "maybe param" "maybe type" "temp"
    (668395 'move' call_tmp[668392](147265 call _cond_test call_tmp[668387]))
    if call_tmp[668392]
    {
      unknown call_tmp[668397] "expr temp" "maybe param" "maybe type" "temp"
      (668400 'move' call_tmp[668397](147238 call log2 nnz[147222]))
      unknown call_tmp[668402] "expr temp" "maybe param" "maybe type" "temp"
      (668405 'move' call_tmp[668402](147242 call + call_tmp[668397] 1.0))
      unknown call_tmp[668407] "expr temp" "maybe param" "maybe type" "temp"
      (668410 'move' call_tmp[668407](147245 call exp2 call_tmp[668402]))
      unknown call_tmp[668412] "maybe param" "maybe type" "temp"
      (668415 'move' call_tmp[668412](147247 call _cast int(64)[13] call_tmp[668407]))
      const _newNNZDomSize[147249] "dead at end of block" "const" "insert auto destroy"
      (543627 'init var' _newNNZDomSize[147249] call_tmp[668412])
      (147252 'end of statement' nnz[147222])
      unknown call_tmp[668419] "expr temp" "maybe param" "maybe type" "temp"
      (668422 'move' call_tmp[668419](385689 call nnzDom _mt[243] this[147987]))
      unknown call_tmp[668424] "expr temp" "maybe param" "maybe type" "temp"
      (668427 'move' call_tmp[668424](147257 call chpl_build_bounded_range 1 _newNNZDomSize[147249]))
      unknown call_tmp[668429] "expr temp" "maybe param" "maybe type" "temp"
      (668432 'move' call_tmp[668429](147260 call chpl__buildDomainExpr call_tmp[668424]))
      (147262 call = call_tmp[668419] call_tmp[668429])
      (481522 'end of statement' _newNNZDomSize[147249])
    }
    (520051 return _void[55])
  }
  function BaseSparseDomImpl[147965](?)._countDuplicates[147275](arg _mt[147993]:_MT[238], arg this[147991]:BaseSparseDomImpl[147965](?), arg arr[147273]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[520055] "RVV" "temp"
    unknown call_tmp[668434] "maybe param" "maybe type" "temp"
    (668437 'move' call_tmp[668434](147282 call - 1))
    unknown dupCount[147284] "dead at end of block" "insert auto destroy"
    (543629 'init var' dupCount[147284] call_tmp[668434])
    (147287 'end of statement')
    unknown call_tmp[668441] "expr temp" "maybe param" "maybe type" "temp"
    (668444 'move' call_tmp[668441](147291 call _dom _mt[243] arr[147273]))
    unknown call_tmp[668448] "expr temp" "maybe param" "maybe type" "temp"
    (668451 'move' call_tmp[668448](147294 call low _mt[243] call_tmp[668441]))
    unknown call_tmp[668453] "maybe param" "maybe type" "temp"
    (668456 'move' call_tmp[668453](147298 call arr[147273] call_tmp[668448]))
    unknown prev[147299] "dead at end of block" "insert auto destroy"
    (543631 'init var' prev[147299] call_tmp[668453])
    (147302 'end of statement')
    {
      unknown _indexOfInterest[147328] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147329] "expr temp" "temp"
      (147338 'move' _iterator[147329](147336 call _getIterator arr[147273]))
      Defer
      {
        {
          (147354 call _freeIterator _iterator[147329])
        }
      }
      { scopeless type
        (147343 'move' _indexOfInterest[147328](147340 call iteratorIndex _iterator[147329]))
      }
      ForLoop[147330]
      {
        unknown a[147347] "index var" "insert auto destroy"
        (481525 'end of statement')
        (147349 'move' a[147347] _indexOfInterest[147328])
        (481526 'end of statement' a[147347])
        {
          unknown call_tmp[668458] "expr temp" "maybe param" "maybe type" "temp"
          (668461 'move' call_tmp[668458](147307 call == a[147347] prev[147299]))
          unknown call_tmp[668463] "expr temp" "maybe param" "maybe type" "temp"
          (668466 'move' call_tmp[668463](147319 call _cond_test call_tmp[668458]))
          if call_tmp[668463]
          {
            (147311 call += dupCount[147284] 1)
            (481528 'end of statement' dupCount[147284])
          }
          {
            (147316 call = prev[147299] a[147347])
            (481530 'end of statement' prev[147299] a[147347])
          }
          {
          }
        }
        label _continueLabel[147333]
        _indexOfInterest[147328]
        _iterator[147329]
      }
      label _breakLabel[147334]
    }
    (520060 'move' ret[520055](520059 'deref' dupCount[147284]))
    gotoReturn _end__countDuplicates[520053] _end__countDuplicates[520053]
    (481533 'end of statement' dupCount[147284])
    label _end__countDuplicates[520053]
    (520057 return ret[520055])
  }
  where {
    (147280 call isArray arr[147273])
  }
  function BaseSparseDomImpl[147965](?).bulkAdd_prepareInds[147371](arg _mt[147997]:_MT[238], arg this[147995]:BaseSparseDomImpl[147965](?), arg inds[147369]:_any[178](?), arg dataSorted[147373]:_any[178](?), arg isUnique[147375]:_any[178](?), arg cmp[147377]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668468] "expr temp" "maybe param" "maybe type" "temp"
    (668471 'move' call_tmp[668468](147384 call ! dataSorted[147373]))
    unknown call_tmp[668473] "expr temp" "maybe param" "maybe type" "temp"
    (668476 'move' call_tmp[668473](147393 call _cond_test call_tmp[668468]))
    if call_tmp[668473]
    {
      (147391 call sort inds[147369](comparator = cmp[147377]))
    }
    unknown call_tmp[668478] "expr temp" "maybe param" "maybe type" "temp"
    (668481 'move' call_tmp[668478](147607 call _cond_test 1))
    if call_tmp[668478]
    {
      unknown tmp[427168] "maybe param" "temp"
      (427179 'move' tmp[427168] dataSorted[147373])
      unknown call_tmp[668483] "expr temp" "maybe param" "maybe type" "temp"
      (668486 'move' call_tmp[668483](427181 call _cond_invalid tmp[427168]))
      if call_tmp[668483]
      {
        (427184 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[568615] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568616] "maybe param" "temp"
      unknown call_tmp[668488] "expr temp" "maybe param" "maybe type" "temp"
      (668491 'move' call_tmp[668488](427169 call isTrue tmp[427168]))
      (568621 'move' tmp[568616](568619 call _cond_test call_tmp[668488]))
      if tmp[568616]
      {
        unknown tmp[568623] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668493] "expr temp" "maybe param" "maybe type" "temp"
        (668496 'move' call_tmp[668493](147405 call isSorted inds[147369](comparator = cmp[147377])))
        unknown call_tmp[668498] "expr temp" "maybe param" "maybe type" "temp"
        (668501 'move' call_tmp[668498](147406 call ! call_tmp[668493]))
        (568625 'move' tmp[568623](427172 call isTrue call_tmp[668498]))
        (568630 'move' tmp[568615](568627 '_paramFoldLogical' tmp[568616] tmp[568623]))
      }
      {
        (568635 'move' tmp[568615](568632 '_paramFoldLogical' tmp[568616] 0))
      }
      unknown call_tmp[668503] "expr temp" "maybe param" "maybe type" "temp"
      (668506 'move' call_tmp[668503](147433 call _cond_test tmp[568615]))
      if call_tmp[668503]
      {
        (147431 call halt "bulkAdd: Data not sorted, call the function with \n              dataSorted=false")
      }
      unknown call_tmp[668508] "expr temp" "maybe param" "maybe type" "temp"
      (668511 'move' call_tmp[668508](147563 call _cond_test isUnique[147375]))
      if call_tmp[668508]
      {
        unknown call_tmp[668515] "expr temp" "maybe param" "maybe type" "temp"
        (668518 'move' call_tmp[668515](147441 call _dom _mt[243] inds[147369]))
        unknown call_tmp[668522] "maybe param" "maybe type" "temp"
        (668525 'move' call_tmp[668522](147444 call low _mt[243] call_tmp[668515]))
        const indsStart[147447] "dead at end of block" "const" "insert auto destroy"
        (543633 'init var' indsStart[147447] call_tmp[668522])
        (147450 'end of statement')
        unknown call_tmp[668529] "expr temp" "maybe param" "maybe type" "temp"
        (668532 'move' call_tmp[668529](147453 call _dom _mt[243] inds[147369]))
        unknown call_tmp[668536] "maybe param" "maybe type" "temp"
        (668539 'move' call_tmp[668536](147456 call high _mt[243] call_tmp[668529]))
        const indsEnd[147459] "dead at end of block" "const" "insert auto destroy"
        (543635 'init var' indsEnd[147459] call_tmp[668536])
        (147462 'end of statement')
        unknown call_tmp[668541] "maybe param" "maybe type" "temp"
        (668544 'move' call_tmp[668541](147466 call inds[147369] indsStart[147447]))
        unknown lastInd[147467] "dead at end of block" "insert auto destroy"
        (543637 'init var' lastInd[147467] call_tmp[668541])
        (147470 'end of statement' indsStart[147447])
        {
          unknown _indexOfInterest[147522] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[147523] "expr temp" "temp"
          unknown call_tmp[668546] "expr temp" "maybe param" "maybe type" "temp"
          (668549 'move' call_tmp[668546](147536 call + indsStart[147447] 1))
          unknown call_tmp[668551] "expr temp" "maybe param" "maybe type" "temp"
          (668554 'move' call_tmp[668551](147540 call chpl_direct_range_iter call_tmp[668546] indsEnd[147459] 1))
          (147532 'move' _iterator[147523](147530 call _getIterator call_tmp[668551]))
          Defer
          {
            {
              (147556 call _freeIterator _iterator[147523])
            }
          }
          { scopeless type
            (147545 'move' _indexOfInterest[147522](147542 call iteratorIndex _iterator[147523]))
          }
          ForLoop[147524]
          {
            unknown i[147549] "index var" "insert auto destroy"
            (481540 'end of statement')
            (147551 'move' i[147549] _indexOfInterest[147522])
            (481541 'end of statement' i[147549])
            {
              unknown call_tmp[668556] "expr temp" "maybe param" "maybe type" "temp"
              (668559 'move' call_tmp[668556](147482 call inds[147369] i[147549]))
              unknown call_tmp[668561] "expr temp" "maybe param" "maybe type" "temp"
              (668564 'move' call_tmp[668561](147484 call == call_tmp[668556] lastInd[147467]))
              unknown call_tmp[668566] "expr temp" "maybe param" "maybe type" "temp"
              (668569 'move' call_tmp[668566](147515 call _cond_test call_tmp[668561]))
              if call_tmp[668566]
              {
                (147505 call halt "bulkAdd: There are duplicates, call the function \n                  with isUnique=false")
              }
              {
                unknown call_tmp[668571] "expr temp" "maybe param" "maybe type" "temp"
                (668574 'move' call_tmp[668571](147511 call inds[147369] i[147549]))
                (147512 call = lastInd[147467] call_tmp[668571])
                (481544 'end of statement' lastInd[147467] i[147549])
              }
            }
            label _continueLabel[147527]
            _indexOfInterest[147522]
            _iterator[147523]
          }
          label _breakLabel[147528]
        }
      }
      {
        unknown _indexOfInterest[147574] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147575] "expr temp" "temp"
        (147584 'move' _iterator[147575](147582 call _getIterator inds[147369]))
        Defer
        {
          {
            (147600 call _freeIterator _iterator[147575])
          }
        }
        { scopeless type
          (147589 'move' _indexOfInterest[147574](147586 call iteratorIndex _iterator[147575]))
        }
        ForLoop[147576]
        {
          unknown i[147593] "index var" "insert auto destroy"
          (481548 'end of statement')
          (147595 'move' i[147593] _indexOfInterest[147574])
          (481549 'end of statement' i[147593])
          (147572 call(385722 call (partial) boundsCheck _mt[243] this[147995]) i[147593])
          (481551 'end of statement' i[147593])
          label _continueLabel[147579]
          _indexOfInterest[147574]
          _iterator[147575]
        }
        label _breakLabel[147580]
      }
    }
    (520064 return _void[55])
    (355188 'used modules list'(147380 'use' Sort[267885]))
  }
  function BaseSparseDomImpl[147965](?).__getActualInsertPts[147617](arg _mt[148001]:_MT[238], arg this[147999]:BaseSparseDomImpl[147965](?), arg d[147615]:_any[178](?), arg inds[147619]:_any[178](?), arg isUnique[147621]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520068] "RVV" "temp"
    unknown indivInsertPts[147633] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668580] "expr temp" "maybe param" "maybe type" "temp"
    (668583 'move' call_tmp[668580](147624 call _dom _mt[243] inds[147619]))
    unknown call_tmp[668585] "expr temp" "maybe param" "maybe type" "temp"
    (668588 'move' call_tmp[668585](147629 call chpl__ensureDomainExpr call_tmp[668580]))
    unknown call_tmp[668590] "expr temp" "maybe param" "maybe type" "temp"
    (668593 'move' call_tmp[668590](147631 call chpl__buildArrayRuntimeType call_tmp[668585] int(64)[13]))
    (543639 'default init var' indivInsertPts[147633] call_tmp[668590])
    (147636 'end of statement')
    unknown actualInsertPts[147648] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668597] "expr temp" "maybe param" "maybe type" "temp"
    (668600 'move' call_tmp[668597](147639 call _dom _mt[243] inds[147619]))
    unknown call_tmp[668602] "expr temp" "maybe param" "maybe type" "temp"
    (668605 'move' call_tmp[668602](147644 call chpl__ensureDomainExpr call_tmp[668597]))
    unknown call_tmp[668607] "expr temp" "maybe param" "maybe type" "temp"
    (668610 'move' call_tmp[668607](147646 call chpl__buildArrayRuntimeType call_tmp[668602] int(64)[13]))
    (543641 'default init var' actualInsertPts[147648] call_tmp[668607])
    (147651 'end of statement')
    unknown call_tmp[668612] "expr temp" "maybe param" "maybe type" "temp"
    (668615 'move' call_tmp[668612](147653 call ! isUnique[147621]))
    unknown call_tmp[668617] "expr temp" "maybe param" "maybe type" "temp"
    (668620 'move' call_tmp[668617](147757 call _cond_test call_tmp[668612]))
    if call_tmp[668617]
    {
      unknown call_tmp[668624] "expr temp" "maybe param" "maybe type" "temp"
      (668627 'move' call_tmp[668624](147657 call _dom _mt[243] inds[147619]))
      unknown call_tmp[668631] "expr temp" "maybe param" "maybe type" "temp"
      (668634 'move' call_tmp[668631](147660 call low _mt[243] call_tmp[668624]))
      unknown call_tmp[668636] "expr temp" "maybe param" "maybe type" "temp"
      (668639 'move' call_tmp[668636](147664 call inds[147619] call_tmp[668631]))
      unknown call_tmp[668641] "maybe param" "maybe type" "temp"
      (668644 'move' call_tmp[668641](147666 call + call_tmp[668636] 1))
      unknown lastInd[147668] "dead at end of block" "insert auto destroy"
      (543643 'init var' lastInd[147668] call_tmp[668641])
      (147671 'end of statement')
      {
        unknown _indexOfInterest[147705] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147706] "expr temp" "temp"
        unknown call_tmp[668646] "expr temp" "maybe param" "maybe type" "temp"
        (668649 'move' call_tmp[668646](147715 call _getIterator inds[147619]))
        unknown call_tmp[668651] "expr temp" "maybe param" "maybe type" "temp"
        (668654 'move' call_tmp[668651](147718 call _getIterator indivInsertPts[147633]))
        (147720 'move' _iterator[147706](147681 call _build_tuple call_tmp[668646] call_tmp[668651]))
        Defer
        {
          {
            (147750 call _freeIterator _iterator[147706])
          }
        }
        { scopeless type
          (147725 'move' _indexOfInterest[147705](147722 call iteratorIndex _iterator[147706]))
        }
        ForLoop[147707]
        {
          (147730 call _check_tuple_var_decl _indexOfInterest[147705] 2)
          (481554 'end of statement')
          unknown i[147736] "index var" "insert auto destroy"
          (481555 'end of statement')
          (147738 'move' i[147736](147734 call _indexOfInterest[147705] 0))
          (481556 'end of statement' i[147736])
          unknown p[147743] "index var" "insert auto destroy"
          (481558 'end of statement')
          (147745 'move' p[147743](147741 call _indexOfInterest[147705] 1))
          (481559 'end of statement' p[147743])
          {
            unknown call_tmp[668656] "expr temp" "maybe param" "maybe type" "temp"
            (668659 'move' call_tmp[668656](147684 call == i[147736] lastInd[147668]))
            unknown call_tmp[668661] "expr temp" "maybe param" "maybe type" "temp"
            (668664 'move' call_tmp[668661](147698 call _cond_test call_tmp[668656]))
            if call_tmp[668661]
            {
              unknown call_tmp[668666] "expr temp" "maybe param" "maybe type" "temp"
              (668669 'move' call_tmp[668666](147688 call - 1))
              (147690 call = p[147743] call_tmp[668666])
              (481561 'end of statement' p[147743])
            }
            {
              (147695 call = lastInd[147668] i[147736])
              (481563 'end of statement' lastInd[147668] i[147736])
            }
          }
          label _continueLabel[147710]
          _indexOfInterest[147705]
          _iterator[147706]
        }
        label _breakLabel[147711]
      }
    }
    Forall {
      induction variables:
        
        unknown i[147825] "index var" "insert auto destroy"
        
        unknown p[147827] "index var" "insert auto destroy"
      iterated expressions:
        inds[147619]
        indivInsertPts[147633]
      shadow variables:
      other variables
        forall body
      {
        unknown tmp[427189] "maybe param" "temp"
        (427200 'move' tmp[427189] isUnique[147621])
        unknown call_tmp[668671] "expr temp" "maybe param" "maybe type" "temp"
        (668674 'move' call_tmp[668671](427202 call _cond_invalid tmp[427189]))
        if call_tmp[668671]
        {
          (427205 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[568642] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568643] "maybe param" "temp"
        unknown call_tmp[668676] "expr temp" "maybe param" "maybe type" "temp"
        (668679 'move' call_tmp[668676](427190 call isTrue tmp[427189]))
        (568648 'move' tmp[568643](568646 call _cond_test call_tmp[668676]))
        if tmp[568643]
        {
          (568653 'move' tmp[568642](568650 '_paramFoldLogical' tmp[568643] 1))
        }
        {
          unknown tmp[568655] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[668681] "expr temp" "maybe param" "maybe type" "temp"
          (668684 'move' call_tmp[668681](147773 call - 1))
          unknown call_tmp[668686] "expr temp" "maybe param" "maybe type" "temp"
          (668689 'move' call_tmp[668686](147775 call != p[147827] call_tmp[668681]))
          (568657 'move' tmp[568655](427194 call isTrue call_tmp[668686]))
          (568662 'move' tmp[568642](568659 '_paramFoldLogical' tmp[568643] tmp[568655]))
        }
        unknown call_tmp[668691] "expr temp" "maybe param" "maybe type" "temp"
        (668694 'move' call_tmp[668691](147819 call _cond_test tmp[568642]))
        if call_tmp[668691]
        {
          unknown call_tmp[668698] "maybe param" "maybe type" "temp"
          (668701 'move' call_tmp[668698](147792 call(147787 call (partial) find _mt[243] d[147615]) i[147825]))
          const tmp[147793] "dead at end of block" "const" "insert auto destroy" "temp"
          (543645 'init var' tmp[147793] call_tmp[668698])
          (147800 call _check_tuple_var_decl tmp[147793] 2)
          (481567 'end of statement')
          unknown call_tmp[668703] "maybe param" "maybe type" "temp"
          (668706 'move' call_tmp[668703](147794 call tmp[147793] 0))
          const found[147779] "dead at end of block" "const" "insert auto destroy"
          (543647 'init var' found[147779] call_tmp[668703])
          unknown call_tmp[668708] "maybe param" "maybe type" "temp"
          (668711 'move' call_tmp[668708](147797 call tmp[147793] 1))
          const insertPt[147781] "dead at end of block" "const" "insert auto destroy"
          (543649 'init var' insertPt[147781] call_tmp[668708])
          (147805 'end of statement')
          unknown tmp[568669] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568670] "maybe param" "temp"
          (568675 'move' tmp[568670](568673 call _cond_test found[147779]))
          if tmp[568670]
          {
            unknown tmp[568677] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (568679 'move' tmp[568677](147810 call - 1))
            (568684 'move' tmp[568669](568681 '_paramFoldLogical' tmp[568670] tmp[568677]))
          }
          {
            (568689 'move' tmp[568669](568686 '_paramFoldLogical' tmp[568670] insertPt[147781]))
          }
          (147816 call = p[147827] tmp[568669])
          (481568 'end of statement' p[147827] found[147779] insertPt[147781])
        }
      }
    }
    unknown actualAddCnt[147831] "dead at end of block" "insert auto destroy"
    (543651 'init var' actualAddCnt[147831] 0)
    (147834 'end of statement')
    {
      unknown _indexOfInterest[147875] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147876] "expr temp" "temp"
      unknown call_tmp[668713] "expr temp" "maybe param" "maybe type" "temp"
      (668716 'move' call_tmp[668713](147885 call _getIterator indivInsertPts[147633]))
      unknown call_tmp[668718] "expr temp" "maybe param" "maybe type" "temp"
      (668721 'move' call_tmp[668718](147888 call _getIterator actualInsertPts[147648]))
      (147890 'move' _iterator[147876](147843 call _build_tuple call_tmp[668713] call_tmp[668718]))
      Defer
      {
        {
          (147920 call _freeIterator _iterator[147876])
        }
      }
      { scopeless type
        (147895 'move' _indexOfInterest[147875](147892 call iteratorIndex _iterator[147876]))
      }
      ForLoop[147877]
      {
        (147900 call _check_tuple_var_decl _indexOfInterest[147875] 2)
        (481573 'end of statement')
        unknown ip[147906] "index var" "insert auto destroy"
        (481574 'end of statement')
        (147908 'move' ip[147906](147904 call _indexOfInterest[147875] 0))
        (481575 'end of statement' ip[147906])
        unknown ap[147913] "index var" "insert auto destroy"
        (481577 'end of statement')
        (147915 'move' ap[147913](147911 call _indexOfInterest[147875] 1))
        (481578 'end of statement' ap[147913])
        {
          unknown call_tmp[668723] "expr temp" "maybe param" "maybe type" "temp"
          (668726 'move' call_tmp[668723](147846 call - 1))
          unknown call_tmp[668728] "expr temp" "maybe param" "maybe type" "temp"
          (668731 'move' call_tmp[668728](147848 call != ip[147906] call_tmp[668723]))
          unknown call_tmp[668733] "expr temp" "maybe param" "maybe type" "temp"
          (668736 'move' call_tmp[668733](147869 call _cond_test call_tmp[668728]))
          if call_tmp[668733]
          {
            unknown call_tmp[668738] "expr temp" "maybe param" "maybe type" "temp"
            (668741 'move' call_tmp[668738](147853 call + ip[147906] actualAddCnt[147831]))
            (147855 call = ap[147913] call_tmp[668738])
            (481580 'end of statement' ap[147913] ip[147906] actualAddCnt[147831])
            (147861 call += actualAddCnt[147831] 1)
            (481584 'end of statement' actualAddCnt[147831])
          }
          {
            (147866 call = ap[147913] ip[147906])
            (481586 'end of statement' ap[147913] ip[147906])
          }
        }
        label _continueLabel[147880]
        _indexOfInterest[147875]
        _iterator[147876]
      }
      label _breakLabel[147881]
    }
    unknown call_tmp[668743] "expr temp" "maybe param" "maybe type" "temp"
    (668746 'move' call_tmp[668743](147930 call _build_tuple actualInsertPts[147648] actualAddCnt[147831]))
    (520073 'move' ret[520068](520072 'deref' call_tmp[668743]))
    gotoReturn _end___getActualInsertPts[520066] _end___getActualInsertPts[520066]
    (481589 'end of statement' actualInsertPts[147648] actualAddCnt[147831])
    label _end___getActualInsertPts[520066]
    (520070 return ret[520068])
  }
  function BaseSparseDomImpl[147965](?).dsiClear[147938](arg _mt[148005]:_MT[238], arg this[148003]:BaseSparseDomImpl[147965](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (147959 call halt "not implemented")
    (520077 return _void[55])
  }
  type BaseSparseDomImpl[147965](?) val super[355731]:BaseSparseDom[148669](?) "super class" unknown nnzDom[146926](146924 call chpl__buildDomainExpr(146921 call chpl_build_bounded_range 1 0))
  function SparseIndexBuffer[148192](?).init[148063](arg _mt[148196]:_MT[238], ref arg this[148194]:SparseIndexBuffer[148192](?), arg size[148061]:_any[178](?), param arg rank[148066]:int(64)[13], arg obj[148069]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668748] "expr temp" "maybe param" "maybe type" "temp"
    (668751 'move' call_tmp[668748](461783 call _cast int(64)[13] rank[148066]))
    (461785 'init field' this[148194] c"rank" call_tmp[668748])
    (481593 'end of statement')
    unknown tmp[461788] "temp"
    (461791 'init var' tmp[461788] obj[148069] BaseSparseDom[382310](?))
    (461793 'init field' this[148194] c"obj" tmp[461788])
    (481594 'end of statement')
    unknown tmp[461809] "temp" "type variable"
    unknown tmp[568696] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568697] "maybe param" "temp"
    unknown call_tmp[668753] "expr temp" "maybe param" "maybe type" "temp"
    (668756 'move' call_tmp[668753](461817 '.v' this[148194] c"rank"))
    unknown call_tmp[668758] "expr temp" "maybe param" "maybe type" "temp"
    (668761 'move' call_tmp[668758](461798 call == call_tmp[668753] 1))
    (568702 'move' tmp[568697](568700 call _cond_test call_tmp[668758]))
    if tmp[568697]
    {
      (568707 'move' tmp[568696](568704 '_paramFoldLogical' tmp[568697] int(64)[13]))
    }
    {
      unknown tmp[568709] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[668763] "expr temp" "maybe param" "maybe type" "temp"
      (668766 'move' call_tmp[668763](461820 '.v' this[148194] c"rank"))
      (568711 'move' tmp[568709](461805 call * call_tmp[668763] int(64)[13]))
      (568716 'move' tmp[568696](568713 '_paramFoldLogical' tmp[568697] tmp[568709]))
    }
    (461811 'move' tmp[461809] tmp[568696])
    (461813 'init field' this[148194] c"idxType" tmp[461809])
    (481595 'end of statement')
    unknown call_tmp[668768] "expr temp" "maybe param" "maybe type" "temp"
    (668771 'move' call_tmp[668768](148090 call chpl_build_low_bounded_range 0))
    unknown call_tmp[668773] "expr temp" "maybe param" "maybe type" "temp"
    (668776 'move' call_tmp[668773](148093 call # call_tmp[668768] size[148061]))
    unknown call_tmp[668778] "maybe param" "maybe type" "temp"
    (668781 'move' call_tmp[668778](148096 call chpl__buildDomainExpr call_tmp[668773]))
    unknown tmp[461823] "temp"
    (461825 'init var' tmp[461823] call_tmp[668778])
    (461827 '.=' this[148194] c"bufDom" tmp[461823])
    (481596 'end of statement')
    unknown tmp[461832] "temp"
    unknown call_tmp[668783] "expr temp" "maybe param" "maybe type" "temp"
    (668786 'move' call_tmp[668783](461846 '.' this[148194] c"bufDom"))
    unknown call_tmp[668788] "expr temp" "maybe param" "maybe type" "temp"
    (668791 'move' call_tmp[668788](461837 call chpl__ensureDomainExpr call_tmp[668783]))
    unknown call_tmp[668793] "expr temp" "maybe param" "maybe type" "temp"
    (668796 'move' call_tmp[668793](461849 '.v' this[148194] c"idxType"))
    unknown call_tmp[668798] "expr temp" "maybe param" "maybe type" "temp"
    (668801 'move' call_tmp[668798](461835 call chpl__buildArrayRuntimeType call_tmp[668788] call_tmp[668793]))
    (461840 'default init var' tmp[461832] call_tmp[668798])
    (461842 '.=' this[148194] c"buf" tmp[461832])
    (481597 'end of statement')
    unknown tmp[461853] "temp"
    (461855 'init var' tmp[461853] 0)
    (461857 '.=' this[148194] c"cur" tmp[461853])
    (481598 'end of statement')
    (520079 return _void[55])
  }
  function SparseIndexBuffer[148192](?).deinit[148105](arg _mt[148200]:_MT[238], arg this[148198]:SparseIndexBuffer[148192](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (148109 call(385773 call (partial) commit _mt[243] this[148198]))
    (520081 return _void[55])
  }
  function SparseIndexBuffer[148192](?).add[148120](arg _mt[148204]:_MT[238], arg this[148202]:SparseIndexBuffer[148192](?), arg idx[148117] :
  (385778 call idxType _mt[243] this[148202])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668811] "expr temp" "maybe param" "maybe type" "temp"
    (668814 'move' call_tmp[668811](385790 call cur _mt[243] this[148202]))
    unknown call_tmp[668816] "expr temp" "maybe param" "maybe type" "temp"
    (668819 'move' call_tmp[668816](148125 call(385783 call (partial) buf _mt[243] this[148202]) call_tmp[668811]))
    (148127 call = call_tmp[668816] idx[148117])
    (481600 'end of statement')
    unknown call_tmp[668823] "expr temp" "maybe param" "maybe type" "temp"
    (668826 'move' call_tmp[668823](385796 call cur _mt[243] this[148202]))
    (148133 call += call_tmp[668823] 1)
    (481601 'end of statement')
    unknown call_tmp[668830] "expr temp" "maybe param" "maybe type" "temp"
    (668833 'move' call_tmp[668830](385801 call cur _mt[243] this[148202]))
    unknown call_tmp[668837] "expr temp" "maybe param" "maybe type" "temp"
    (668840 'move' call_tmp[668837](360665 call buf _mt[243] this[148202]))
    unknown call_tmp[668844] "expr temp" "maybe param" "maybe type" "temp"
    (668847 'move' call_tmp[668844](148138 call size _mt[243] call_tmp[668837]))
    unknown call_tmp[668849] "expr temp" "maybe param" "maybe type" "temp"
    (668852 'move' call_tmp[668849](148141 call == call_tmp[668830] call_tmp[668844]))
    unknown call_tmp[668854] "expr temp" "maybe param" "maybe type" "temp"
    (668857 'move' call_tmp[668854](148147 call _cond_test call_tmp[668849]))
    if call_tmp[668854]
    {
      (148145 call(385805 call (partial) commit _mt[243] this[148202]))
    }
    (520083 return _void[55])
  }
  function SparseIndexBuffer[148192](?).commit[148156](arg _mt[148208]:_MT[238], arg this[148206]:SparseIndexBuffer[148192](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668863] "expr temp" "maybe param" "maybe type" "temp"
    (668866 'move' call_tmp[668863](385810 call cur _mt[243] this[148206]))
    unknown call_tmp[668868] "expr temp" "maybe param" "maybe type" "temp"
    (668871 'move' call_tmp[668868](148160 call >= call_tmp[668863] 1))
    unknown call_tmp[668873] "expr temp" "maybe param" "maybe type" "temp"
    (668876 'move' call_tmp[668873](148178 call _cond_test call_tmp[668868]))
    if call_tmp[668873]
    {
      unknown call_tmp[668880] "expr temp" "maybe param" "maybe type" "temp"
      (668883 'move' call_tmp[668880](360670 call obj _mt[243] this[148206]))
      unknown call_tmp[668891] "expr temp" "maybe param" "maybe type" "temp"
      (668894 'move' call_tmp[668891](385820 call cur _mt[243] this[148206]))
      unknown call_tmp[668896] "expr temp" "maybe param" "maybe type" "temp"
      (668899 'move' call_tmp[668896](148169 call - call_tmp[668891] 1))
      unknown call_tmp[668901] "expr temp" "maybe param" "maybe type" "temp"
      (668904 'move' call_tmp[668901](148171 call chpl_build_high_bounded_range call_tmp[668896]))
      unknown call_tmp[668906] "expr temp" "maybe param" "maybe type" "temp"
      (668909 'move' call_tmp[668906](148174 call(385815 call (partial) buf _mt[243] this[148206]) call_tmp[668901]))
      (148176 call(148163 call (partial) dsiBulkAdd _mt[243] call_tmp[668880]) call_tmp[668906])
    }
    unknown call_tmp[668913] "expr temp" "maybe param" "maybe type" "temp"
    (668916 'move' call_tmp[668913](385825 call cur _mt[243] this[148206]))
    (148186 call = call_tmp[668913] 0)
    (520085 return _void[55])
  }
  type SparseIndexBuffer[148192](?) unknown rank[148010] "param" int(64)[13] val obj[148015]:BaseSparseDom[382310](?) BaseSparseDom[382310](?) unknown idxType[148031] "type variable"(148028 IfExpr (148021 call == rank[148010] 1) then
  { scopeless
    int(64)[13]
  } else
  { scopeless
    (148026 call * rank[148010] int(64)[13])
  } ) unknown bufDom[148039](148037 call chpl__buildDomainRuntimeType defaultDist[94058] 1) unknown buf[148050](148048 call chpl__buildArrayRuntimeType(148046 call chpl__ensureDomainExpr bufDom[148039]) idxType[148031]) val cur[148055]:int(64)[13] 0
  function BaseSparseDom[148669](?).getNNZ[148228](arg _mt[148673]:_MT[238], arg this[148671]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[520089] "RVV" "temp"
    (148250 call halt "nnz queried on base class")
    (520091 return ret[520089])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148669](?).deinit[148258](arg _mt[148677]:_MT[238], arg this[148675]:BaseSparseDom[148669](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520093 return _void[55])
  }
  function BaseSparseDom[148669](?).dsiClear[148265](arg _mt[148681]:_MT[238], arg this[148679]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148286 call halt "clear not implemented for this distribution - BaseSparseDom")
    (520095 return _void[55])
  }
  function BaseSparseDom[148669](?).dsiBulkAdd[148304](arg _mt[148685]:_MT[238], arg this[148683]:BaseSparseDom[148669](?), arg inds[148301]:_array[133600](?), arg dataSorted[148307] :
  0 =
  0, arg isUnique[148311] :
  0 =
  0, arg preserveInds[148315] :
  1 =
  1, arg addOn[148319] :
  nilLocale[89943] =
  nilLocale[89943]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[520099] "RVV" "temp"
    (148342 call halt "Bulk addition is not supported by this sparse domain")
    (481607 'end of statement')
    (520105 'move' ret[520099](520104 'coerce' 0 int(64)[13]))
    (520101 return ret[520099])
  }
  where {
    unknown call_tmp[668920] "expr temp" "maybe param" "maybe type" "temp"
    (668923 'move' call_tmp[668920](385830 call rank _mt[243] this[148683]))
    unknown call_tmp[668927] "expr temp" "maybe param" "maybe type" "temp"
    (668930 'move' call_tmp[668927](385835 call idxType _mt[243] this[148683]))
    unknown call_tmp[668932] "expr temp" "maybe param" "maybe type" "temp"
    (668935 'move' call_tmp[668932](148296 call chpl__buildIndexType call_tmp[668920] call_tmp[668927]))
    unknown call_tmp[668939] "expr temp" "maybe param" "maybe type" "temp"
    (668942 'move' call_tmp[668939](461867 call eltType _mt[243] inds[148301]))
    unknown call_tmp[668944] "expr temp" "maybe param" "maybe type" "temp"
    (668947 'move' call_tmp[668944](461871 call == call_tmp[668932] call_tmp[668939]))
    (461865 call & 1 call_tmp[668944])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148669](?).boundsCheck[148361](arg _mt[148689]:_MT[238], arg this[148687]:BaseSparseDom[148669](?), arg ind[148358] :
  unknown call_tmp[668951] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[520109] "RVV" "temp"
    unknown call_tmp[668963] "expr temp" "maybe param" "maybe type" "temp"
    (668966 'move' call_tmp[668963](148420 call _cond_test 1))
    if call_tmp[668963]
    {
      unknown call_tmp[668970] "expr temp" "maybe param" "maybe type" "temp"
      (668973 'move' call_tmp[668970](360675 call parentDom _mt[243] this[148687]))
      unknown call_tmp[668977] "expr temp" "maybe param" "maybe type" "temp"
      (668980 'move' call_tmp[668977](148371 call(148366 call (partial) contains _mt[243] call_tmp[668970]) ind[148358]))
      unknown call_tmp[668982] "expr temp" "maybe param" "maybe type" "temp"
      (668985 'move' call_tmp[668982](148372 call ! call_tmp[668977]))
      unknown call_tmp[668987] "expr temp" "maybe param" "maybe type" "temp"
      (668990 'move' call_tmp[668987](148415 call _cond_test call_tmp[668982]))
      if call_tmp[668987]
      {
        unknown call_tmp[668994] "expr temp" "maybe param" "maybe type" "temp"
        (668997 'move' call_tmp[668994](385854 call parentDom _mt[243] this[148687]))
        (148413 call halt "Sparse domain/array index out of bounds: " ind[148358] " (expected to be within " call_tmp[668994] ")")
      }
    }
    (520111 return ret[520109])
  }
  { scopeless type
    void[4]
  }
  function BaseSparseDom[148669](?).dsiDim[148435](arg _mt[148693]:_MT[238], arg this[148691]:BaseSparseDom[148669](?), arg d[148432]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520115] "RVV" "temp"
    unknown call_tmp[669001] "expr temp" "maybe param" "maybe type" "temp"
    (669004 'move' call_tmp[669001](360680 call parentDom _mt[243] this[148691]))
    unknown call_tmp[669008] "expr temp" "maybe param" "maybe type" "temp"
    (669011 'move' call_tmp[669008](148443 call(148438 call (partial) dim _mt[243] call_tmp[669001]) d[148432]))
    (520120 'move' ret[520115](520119 'deref' call_tmp[669008]))
    (520117 return ret[520115])
  }
  function BaseSparseDom[148669](?).dsiDims[148451](arg _mt[148697]:_MT[238], arg this[148695]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520124] "RVV" "temp"
    unknown call_tmp[669015] "expr temp" "maybe param" "maybe type" "temp"
    (669018 'move' call_tmp[669015](360685 call parentDom _mt[243] this[148695]))
    unknown call_tmp[669022] "expr temp" "maybe param" "maybe type" "temp"
    (669025 'move' call_tmp[669022](148458 call(148454 call (partial) dims _mt[243] call_tmp[669015])))
    (520129 'move' ret[520124](520128 'deref' call_tmp[669022]))
    (520126 return ret[520124])
  }
  function BaseSparseDom[148669](?).dsiNumIndices[148466](arg _mt[148701]:_MT[238], arg this[148699]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520133] "RVV" "temp"
    unknown call_tmp[669029] "expr temp" "maybe param" "maybe type" "temp"
    (669032 'move' call_tmp[669029](148470 call(385859 call (partial) getNNZ _mt[243] this[148699])))
    (520138 'move' ret[520133](520137 'deref' call_tmp[669029]))
    (520135 return ret[520133])
  }
  function BaseSparseDom[148669](?).dsiSize[148478](arg _mt[148705]:_MT[238], arg this[148703]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520142] "RVV" "temp"
    unknown call_tmp[669036] "expr temp" "maybe param" "maybe type" "temp"
    (669039 'move' call_tmp[669036](148482 call(385863 call (partial) getNNZ _mt[243] this[148703])))
    (520147 'move' ret[520142](520146 'deref' call_tmp[669036]))
    (520144 return ret[520142])
  }
  function BaseSparseDom[148669](?).dsiLow[148490](arg _mt[148709]:_MT[238], arg this[148707]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520151] "RVV" "temp"
    unknown call_tmp[669043] "expr temp" "maybe param" "maybe type" "temp"
    (669046 'move' call_tmp[669043](360690 call parentDom _mt[243] this[148707]))
    unknown call_tmp[669050] "expr temp" "maybe param" "maybe type" "temp"
    (669053 'move' call_tmp[669050](148493 call low _mt[243] call_tmp[669043]))
    (520156 'move' ret[520151](520155 'deref' call_tmp[669050]))
    (520153 return ret[520151])
  }
  function BaseSparseDom[148669](?).dsiHigh[148503](arg _mt[148713]:_MT[238], arg this[148711]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520160] "RVV" "temp"
    unknown call_tmp[669057] "expr temp" "maybe param" "maybe type" "temp"
    (669060 'move' call_tmp[669057](360695 call parentDom _mt[243] this[148711]))
    unknown call_tmp[669064] "expr temp" "maybe param" "maybe type" "temp"
    (669067 'move' call_tmp[669064](148506 call high _mt[243] call_tmp[669057]))
    (520165 'move' ret[520160](520164 'deref' call_tmp[669064]))
    (520162 return ret[520160])
  }
  function BaseSparseDom[148669](?).dsiStride[148516](arg _mt[148717]:_MT[238], arg this[148715]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520169] "RVV" "temp"
    unknown call_tmp[669071] "expr temp" "maybe param" "maybe type" "temp"
    (669074 'move' call_tmp[669071](360700 call parentDom _mt[243] this[148715]))
    unknown call_tmp[669078] "expr temp" "maybe param" "maybe type" "temp"
    (669081 'move' call_tmp[669078](148519 call stride _mt[243] call_tmp[669071]))
    (520174 'move' ret[520169](520173 'deref' call_tmp[669078]))
    (520171 return ret[520169])
  }
  function BaseSparseDom[148669](?).dsiAlignment[148529](arg _mt[148721]:_MT[238], arg this[148719]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520178] "RVV" "temp"
    unknown call_tmp[669085] "expr temp" "maybe param" "maybe type" "temp"
    (669088 'move' call_tmp[669085](360705 call parentDom _mt[243] this[148719]))
    unknown call_tmp[669092] "expr temp" "maybe param" "maybe type" "temp"
    (669095 'move' call_tmp[669092](148532 call alignment _mt[243] call_tmp[669085]))
    (520183 'move' ret[520178](520182 'deref' call_tmp[669092]))
    (520180 return ret[520178])
  }
  function BaseSparseDom[148669](?).dsiFirst[148542](arg _mt[148725]:_MT[238], arg this[148723]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520187] "RVV" "temp"
    (148563 call halt "dsiFirst is not implemented")
    (481618 'end of statement')
    const _tmp[148570] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[669099] "expr temp" "maybe param" "maybe type" "temp"
    (669102 'move' call_tmp[669099](385868 call rank _mt[243] this[148723]))
    unknown call_tmp[669106] "expr temp" "maybe param" "maybe type" "temp"
    (669109 'move' call_tmp[669106](385873 call idxType _mt[243] this[148723]))
    unknown call_tmp[669111] "expr temp" "maybe param" "maybe type" "temp"
    (669114 'move' call_tmp[669111](148568 call * call_tmp[669099] call_tmp[669106]))
    (543653 'default init var' _tmp[148570] call_tmp[669111])
    (148573 'end of statement')
    (520192 'move' ret[520187](520191 'deref' _tmp[148570]))
    gotoReturn _end_dsiFirst[520185] _end_dsiFirst[520185]
    (481619 'end of statement' _tmp[148570])
    label _end_dsiFirst[520185]
    (520189 return ret[520187])
  }
  function BaseSparseDom[148669](?).dsiLast[148581](arg _mt[148729]:_MT[238], arg this[148727]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520198] "RVV" "temp"
    (148602 call halt "dsiLast not implemented")
    (481621 'end of statement')
    const _tmp[148609] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[669118] "expr temp" "maybe param" "maybe type" "temp"
    (669121 'move' call_tmp[669118](385879 call rank _mt[243] this[148727]))
    unknown call_tmp[669125] "expr temp" "maybe param" "maybe type" "temp"
    (669128 'move' call_tmp[669125](385884 call idxType _mt[243] this[148727]))
    unknown call_tmp[669130] "expr temp" "maybe param" "maybe type" "temp"
    (669133 'move' call_tmp[669130](148607 call * call_tmp[669118] call_tmp[669125]))
    (543655 'default init var' _tmp[148609] call_tmp[669130])
    (148612 'end of statement')
    (520203 'move' ret[520198](520202 'deref' _tmp[148609]))
    gotoReturn _end_dsiLast[520196] _end_dsiLast[520196]
    (481622 'end of statement' _tmp[148609])
    label _end_dsiLast[520196]
    (520200 return ret[520198])
  }
  function BaseSparseDom[148669](?).dsiAlignedLow[148620](arg _mt[148733]:_MT[238], arg this[148731]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520209] "RVV" "temp"
    unknown call_tmp[669137] "expr temp" "maybe param" "maybe type" "temp"
    (669140 'move' call_tmp[669137](360710 call parentDom _mt[243] this[148731]))
    unknown call_tmp[669144] "expr temp" "maybe param" "maybe type" "temp"
    (669147 'move' call_tmp[669144](148623 call alignedLow _mt[243] call_tmp[669137]))
    (520214 'move' ret[520209](520213 'deref' call_tmp[669144]))
    (520211 return ret[520209])
  }
  function BaseSparseDom[148669](?).dsiAlignedHigh[148633](arg _mt[148737]:_MT[238], arg this[148735]:BaseSparseDom[148669](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520218] "RVV" "temp"
    unknown call_tmp[669151] "expr temp" "maybe param" "maybe type" "temp"
    (669154 'move' call_tmp[669151](360715 call parentDom _mt[243] this[148735]))
    unknown call_tmp[669158] "expr temp" "maybe param" "maybe type" "temp"
    (669161 'move' call_tmp[669158](148636 call alignedHigh _mt[243] call_tmp[669151]))
    (520223 'move' ret[520218](520222 'deref' call_tmp[669158]))
    (520220 return ret[520218])
  }
  function BaseSparseDom[148669](?).dsiMakeIndexBuffer[148648](arg _mt[148741]:_MT[238], arg this[148739]:BaseSparseDom[148669](?), arg size[148646]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520227] "RVV" "temp"
    unknown call_tmp[669165] "expr temp" "maybe param" "maybe type" "temp"
    (669168 'move' call_tmp[669165](148653 call rank _mt[243] this[148739]))
    unknown call_tmp[669170] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (669173 'move' call_tmp[669170](747933 'new' SparseIndexBuffer[148192](?)(rank = call_tmp[669165])(obj = this[148739])(size = size[148646])))
    (520232 'move' ret[520227](520231 'deref' call_tmp[669170]))
    (520229 return ret[520227])
  }
  type BaseSparseDom[148669](?) val super[355729]:BaseDom[146729] "super class" unknown rank[148215] "param" int(64)[13] unknown idxType[148219] "type variable" unknown parentDom[148222]
  type BaseSparseDom[382310](?)
  function BaseAssociativeDom[148816].deinit[148749](arg _mt[148820]:_MT[238], arg this[148818]:BaseAssociativeDom[148816]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520234 return _void[55])
  }
  function BaseAssociativeDom[148816].dsiClear[148756](arg _mt[148824]:_MT[238], arg this[148822]:BaseAssociativeDom[148816]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148777 call halt "clear not implemented for this distribution")
    (520236 return _void[55])
  }
  function BaseAssociativeDom[148816].dsiAdd[148786](arg _mt[148828]:_MT[238], arg this[148826]:BaseAssociativeDom[148816], in arg idx[148784]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520240] "RVV" "temp"
    (148807 call compilerError "Index addition is not supported by this domain")
    (481628 'end of statement')
    (520245 'move' ret[520240](520244 'deref' 0))
    (520242 return ret[520240])
  }
  type BaseAssociativeDom[148816] val super[355733]:BaseDom[146729] "super class"
  type BaseAssociativeDom[382305](?)
  function BaseArr[149545].chpl__rvfMe[148846](arg _mt[149549]:_MT[238], arg this[149547]:BaseArr[149545]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520249] "RVV" "param" "temp"
    (520254 'move' ret[520249](520253 'deref' 0))
    (520251 return ret[520249])
  }
  function BaseArr[149545].isSliceArrayView[148856](arg _mt[149553]:_MT[238], arg this[149551]:BaseArr[149545]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520258] "RVV" "param" "temp"
    (520263 'move' ret[520258](520262 'deref' 0))
    (520260 return ret[520258])
  }
  function BaseArr[149545].isRankChangeArrayView[148866](arg _mt[149557]:_MT[238], arg this[149555]:BaseArr[149545]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520267] "RVV" "param" "temp"
    (520272 'move' ret[520267](520271 'deref' 0))
    (520269 return ret[520267])
  }
  function BaseArr[149545].isReindexArrayView[148876](arg _mt[149561]:_MT[238], arg this[149559]:BaseArr[149545]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520276] "RVV" "param" "temp"
    (520281 'move' ret[520276](520280 'deref' 0))
    (520278 return ret[520276])
  }
  function BaseArr[149545].deinit[148886](arg _mt[149565]:_MT[238], arg this[149563]:BaseArr[149545]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520283 return _void[55])
  }
  function BaseArr[149545].dsiStaticFastFollowCheck[148895](arg _mt[149569]:_MT[238], arg this[149567]:BaseArr[149545], arg leadType[148893]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520287] "RVV" "param" "temp"
    (520292 'move' ret[520287](520291 'deref' 0))
    (520289 return ret[520287])
  }
  function BaseArr[149545].dsiGetBaseDom[148905](arg _mt[149573]:_MT[238], arg this[149571]:BaseArr[149545]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520296] "RVV" "temp"
    (148928 call halt "internal error: dsiGetBaseDom is not implemented")
    (481635 'end of statement')
    unknown ret[148933] "dead at end of block" "insert auto destroy" "unsafe"
    (543657 'default init var' ret[148933] unmanaged BaseDom[415463])
    (148936 'end of statement')
    (520302 'move' ret[520296](520301 'coerce' ret[148933] unmanaged BaseDom[415463]))
    gotoReturn _end_dsiGetBaseDom[520294] _end_dsiGetBaseDom[520294]
    (481636 'end of statement' ret[148933])
    label _end_dsiGetBaseDom[520294]
    (520298 return ret[520296])
  }
  { scopeless type
    unmanaged BaseDom[415463]
  }
  function BaseArr[149545].remove[148949](arg _mt[149577]:_MT[238], arg this[149575]:BaseArr[149545], param arg rmFromList[148946]:bool[10]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[520308] "RVV" "temp"
    unknown ret_arr[148952] "dead at end of block" "insert auto destroy"
    (543659 'init var' ret_arr[148952] this[149575])
    (148955 'end of statement')
    unknown ret_dom[148961] "dead at end of block" "insert auto destroy"
    (543661 'init var' ret_dom[148961] nil[44] unmanaged BaseDom?[415523])
    (148964 'end of statement')
    unknown rm_dom[148966] "dead at end of block" "insert auto destroy"
    (543663 'init var' rm_dom[148966] 0)
    (148969 'end of statement')
    unknown call_tmp[669177] "maybe param" "maybe type" "temp"
    (669180 'move' call_tmp[669177](148972 call(385900 call (partial) dsiGetBaseDom _mt[243] this[149575])))
    unknown dom[148973] "dead at end of block" "insert auto destroy"
    (543665 'init var' dom[148973] call_tmp[669177])
    (148976 'end of statement')
    unknown call_tmp[669184] "expr temp" "maybe param" "maybe type" "temp"
    (669187 'move' call_tmp[669184](148987 call _to_unmanaged this[149575]))
    unknown call_tmp[669189] "expr temp" "maybe param" "maybe type" "temp"
    (669192 'move' call_tmp[669189](148990 call(148981 call (partial) remove_arr _mt[243] dom[148973]) call_tmp[669184] rmFromList[148946]))
    (148991 call = rm_dom[148966] call_tmp[669189])
    (481638 'end of statement' rm_dom[148966] dom[148973])
    unknown call_tmp[669194] "expr temp" "maybe param" "maybe type" "temp"
    (669197 'move' call_tmp[669194](149000 call _cond_test rm_dom[148966]))
    if call_tmp[669194]
    {
      (148997 call = ret_dom[148961] dom[148973])
      (481641 'end of statement' ret_dom[148961] dom[148973])
    }
    unknown call_tmp[669199] "expr temp" "maybe param" "maybe type" "temp"
    (669202 'move' call_tmp[669199](149008 call _build_tuple ret_arr[148952] ret_dom[148961]))
    (520313 'move' ret[520308](520312 'deref' call_tmp[669199]))
    gotoReturn _end_remove[520306] _end_remove[520306]
    (481644 'end of statement' ret_arr[148952] ret_dom[148961])
    label _end_remove[520306]
    (520310 return ret[520308])
  }
  function BaseArr[149545].dsiElementInitializationComplete[149016](arg _mt[149581]:_MT[238], arg this[149579]:BaseArr[149545]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149037 call halt "dsiElementInitializationComplete must be defined")
    (520317 return _void[55])
  }
  function BaseArr[149545].dsiElementDeinitializationComplete[149044](arg _mt[149585]:_MT[238], arg this[149583]:BaseArr[149545]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149065 call halt "dsiElementDeinitializationComplete must be defined")
    (520319 return _void[55])
  }
  function BaseArr[149545].dsiDestroyArr[149076](arg _mt[149589]:_MT[238], arg this[149587]:BaseArr[149545], arg deinitElts[149073]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149097 call halt "dsiDestroyArr must be defined")
    (520321 return _void[55])
  }
  function BaseArr[149545].dsiReallocate[149108](arg _mt[149593]:_MT[238], arg this[149591]:BaseArr[149545], arg d[149105]:_domain[125914](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149129 call halt "reallocating not supported for this array type")
    (520323 return _void[55])
  }
  function BaseArr[149545].dsiPostReallocate[149136](arg _mt[149597]:_MT[238], arg this[149595]:BaseArr[149545]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520325 return _void[55])
  }
  function BaseArr[149545]._purge[149147](arg _mt[149601]:_MT[238], arg this[149599]:BaseArr[149545], arg ind[149144]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149168 call halt "purging not supported for this array type")
    (520327 return _void[55])
  }
  function BaseArr[149545]._resize[149179](arg _mt[149605]:_MT[238], arg this[149603]:BaseArr[149545], arg length[149176]:int(64)[13], arg old_map[149181]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149202 call halt "resizing not supported for this array type")
    (520329 return _void[55])
  }
  function BaseArr[149545].sparseShiftArray[149211](arg _mt[149609]:_MT[238], arg this[149607]:BaseArr[149545], arg shiftrange[149209]:_any[178](?), arg initrange[149213]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149234 call halt "sparseGrowDomain not supported for non-sparse arrays")
    (520331 return _void[55])
  }
  function BaseArr[149545].sparseShiftArrayBack[149243](arg _mt[149613]:_MT[238], arg this[149611]:BaseArr[149545], arg shiftrange[149241]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149264 call halt "sparseShiftArrayBack not supported for non-sparse arrays")
    (520333 return _void[55])
  }
  function BaseArr[149545].sparseBulkShiftArray[149273](arg _mt[149617]:_MT[238], arg this[149615]:BaseArr[149545], arg shiftMap[149271]:_any[178](?), arg oldnnz[149275]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149296 call halt "sparseBulkShiftArray not supported for non-sparse arrays")
    (520335 return _void[55])
  }
  function BaseArr[149545]._defaultInitSlot[149307](arg _mt[149621]:_MT[238], arg this[149619]:BaseArr[149545], arg slot[149304]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149328 call halt "_defaultInitSlot() not supported for non-associative arrays")
    (520337 return _void[55])
  }
  function BaseArr[149545]._deinitSlot[149339](arg _mt[149625]:_MT[238], arg this[149623]:BaseArr[149545], arg slot[149336]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149360 call halt "_deinitSlot() not supported for non-associative arrays")
    (520339 return _void[55])
  }
  function BaseArr[149545]._startRehash[149371](arg _mt[149629]:_MT[238], arg this[149627]:BaseArr[149545], arg newSize[149368]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149392 call halt "_startRehash() not supported for non-associative arrays")
    (520341 return _void[55])
  }
  function BaseArr[149545]._finishRehash[149403](arg _mt[149633]:_MT[238], arg this[149631]:BaseArr[149545], arg oldSize[149400]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149424 call halt "_finishRehash() not supported for non-associative arrays")
    (520343 return _void[55])
  }
  function BaseArr[149545]._moveElementDuringRehash[149435](arg _mt[149637]:_MT[238], arg this[149635]:BaseArr[149545], arg oldslot[149432]:int(64)[13], arg newslot[149438]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149460 call halt "_moveElementDuringRehash() not supported for non-associative arrays")
    (520345 return _void[55])
  }
  function BaseArr[149545].dsiSupportsAlignedFollower[149467](arg _mt[149641]:_MT[238], arg this[149639]:BaseArr[149545]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520349] "RVV" "param" "temp"
    (520354 'move' ret[520349](520353 'deref' 0))
    (520351 return ret[520349])
  }
  function BaseArr[149545].dsiSupportsPrivatization[149477](arg _mt[149645]:_MT[238], arg this[149643]:BaseArr[149545]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520358] "RVV" "param" "temp"
    (520363 'move' ret[520358](520362 'deref' 0))
    (520360 return ret[520358])
  }
  function BaseArr[149545].dsiRequiresPrivatization[149487](arg _mt[149649]:_MT[238], arg this[149647]:BaseArr[149545]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520367] "RVV" "param" "temp"
    (520372 'move' ret[520367](520371 'deref' 0))
    (520369 return ret[520367])
  }
  function BaseArr[149545].dsiDisplayRepresentation[149497](arg _mt[149653]:_MT[238], arg this[149651]:BaseArr[149545]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149502 call writeln "<no way to display representation>")
    (520374 return _void[55])
  }
  function BaseArr[415361](?).isDefaultRectangular[149509](arg _mt[149657]:_MT[238], arg this[149655]:BaseArr[415361](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520378] "RVV" "param" "temp"
    (520383 'move' ret[520378](520382 'deref' 0))
    (520380 return ret[520378])
  }
  function BaseArr[149545].isDefaultRectangular[149519](arg _mt[149661]:_MT[238], arg this[149659]:BaseArr[149545]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520387] "RVV" "param" "temp"
    (520392 'move' ret[520387](520391 'deref' 0))
    (520389 return ret[520387])
  }
  function BaseArr[149545].doiCanBulkTransferRankChange[149529](arg _mt[149665]:_MT[238], arg this[149663]:BaseArr[149545]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520396] "RVV" "param" "temp"
    (520401 'move' ret[520396](520400 'deref' 0))
    (520398 return ret[520396])
  }
  function BaseArr[149545].decEltCountsIfNeeded[149539](arg _mt[149669]:_MT[238], arg this[149667]:BaseArr[149545]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520403 return _void[55])
  }
  type BaseArr[149545] val super[355721]:object[22] "super class" val pid[148834]:int(64)[13] nullPid[113724] int(64)[13] val _decEltRefCounts[148840]:bool[10] 0 bool[10]
  type unmanaged BaseArr?[415544]
  type BaseArr?[415541](?)
  type unmanaged BaseArr[415511]
  type BaseArr[415361](?)
  type BaseArr[382377](?)
  function AbsBaseArr[149701](?).decEltCountsIfNeeded[149680](arg _mt[149705]:_MT[238], arg this[149703]:AbsBaseArr[149701](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669206] "expr temp" "maybe param" "maybe type" "temp"
    (669209 'move' call_tmp[669206](385914 call _decEltRefCounts _mt[243] this[149703]))
    unknown call_tmp[669211] "expr temp" "maybe param" "maybe type" "temp"
    (669214 'move' call_tmp[669211](149693 call _cond_test call_tmp[669206]))
    if call_tmp[669211]
    {
      unknown call_tmp[669216] "expr temp" "maybe param" "maybe type" "temp"
      (669219 'move' call_tmp[669216](149687 call _to_unmanaged this[149703]))
      unknown call_tmp[669223] "expr temp" "maybe param" "maybe type" "temp"
      (669226 'move' call_tmp[669223](385920 call eltType _mt[243] this[149703]))
      (149690 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669216] call_tmp[669223])
    }
    (520405 return _void[55])
  }
  type AbsBaseArr[149701](?) val super[355735]:BaseArr[149545] "super class" unknown eltType[149675] "type variable"
  function BaseArrOverRectangularDom[149766](?).dsiReallocate[149741](arg _mt[149770]:_MT[238], arg this[149768]:BaseArrOverRectangularDom[149766](?), arg bounds[149738] :
  unknown call_tmp[669230] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149746 call halt "reallocating not supported for this array type")
    (520407 return _void[55])
  }
  function BaseArrOverRectangularDom[149766](?).dsiPostReallocate[149753](arg _mt[149774]:_MT[238], arg this[149772]:BaseArrOverRectangularDom[149766](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (520409 return _void[55])
  }
  function BaseArrOverRectangularDom[149766](?).deinit[149760](arg _mt[149778]:_MT[238], arg this[149776]:BaseArrOverRectangularDom[149766](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520411 return _void[55])
  }
  type BaseArrOverRectangularDom[149766](?) val super[355723]:BaseArr[149545] "super class" unknown rank[149712] "param" int(64)[13] unknown idxType[149716] "type variable" unknown stridable[149720] "param" bool[10]
  type BaseArrOverRectangularDom[385588](?)
  function BaseRectangularArr[149817](?).deinit[149789](arg _mt[149821]:_MT[238], arg this[149819]:BaseRectangularArr[149817](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520413 return _void[55])
  }
  function BaseRectangularArr[149817](?).decEltCountsIfNeeded[149796](arg _mt[149825]:_MT[238], arg this[149823]:BaseRectangularArr[149817](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669256] "expr temp" "maybe param" "maybe type" "temp"
    (669259 'move' call_tmp[669256](385941 call _decEltRefCounts _mt[243] this[149823]))
    unknown call_tmp[669261] "expr temp" "maybe param" "maybe type" "temp"
    (669264 'move' call_tmp[669261](149809 call _cond_test call_tmp[669256]))
    if call_tmp[669261]
    {
      unknown call_tmp[669266] "expr temp" "maybe param" "maybe type" "temp"
      (669269 'move' call_tmp[669266](149803 call _to_unmanaged this[149823]))
      unknown call_tmp[669273] "expr temp" "maybe param" "maybe type" "temp"
      (669276 'move' call_tmp[669273](385947 call eltType _mt[243] this[149823]))
      (149806 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669266] call_tmp[669273])
    }
    (520415 return _void[55])
  }
  type BaseRectangularArr[149817](?) val super[355725]:BaseArrOverRectangularDom[149766](?) "super class" unknown eltType[149784] "type variable"
  function BaseSparseArr[149861](?).dsiGetBaseDom[149845](arg _mt[149865]:_MT[238], arg this[149863]:BaseSparseArr[149861](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520419] "RVV" "temp"
    unknown call_tmp[669280] "expr temp" "maybe param" "maybe type" "temp"
    (669283 'move' call_tmp[669280](385952 call dom _mt[243] this[149863]))
    (520424 'move' ret[520419](520423 'deref' call_tmp[669280]))
    (520421 return ret[520419])
  }
  function BaseSparseArr[149861](?).deinit[149855](arg _mt[149869]:_MT[238], arg this[149867]:BaseSparseArr[149861](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520426 return _void[55])
  }
  type BaseSparseArr[149861](?) val super[355737]:AbsBaseArr[149701](?) "super class" unknown rank[149832] "param" int(64)[13] unknown idxType[149836] "type variable" unknown dom[149839]
  function BaseSparseArrImpl[150531](?).init[149895](arg _mt[150535]:_MT[238], arg this[150533]:BaseSparseArrImpl[150531](?), arg eltType[149893]:_any[178](?), param arg rank[149898]:int(64)[13], arg idxType[149901]:_any[178](?), arg dom[149903]:_any[178](?), param arg initElts[149906]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461874] "temporary of super field" "temp"
    (461876 'move' super_tmp[461874](461873 '.v' this[150533] c"super"))
    (149922 call(149910 call (partial) init _mt[243] super_tmp[461874])(eltType = eltType[149893])(rank = rank[149898])(idxType = idxType[149901])(dom = dom[149903]))
    (481672 'end of statement')
    unknown tmp[461879] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492385] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[669287] "expr temp" "maybe param" "maybe type" "temp"
      (669290 'move' call_tmp[669287](461881 '.v' this[150533] c"super"))
      (492389 'move' call_type_tmp[492385](461884 'typeof' call_tmp[669287]))
    }
    (461885 'move' tmp[461879] call_type_tmp[492385])
    unknown call_tmp[669292] "maybe param" "maybe type" "temp"
    (669295 'move' call_tmp[669292](461890 'cast' tmp[461879] this[150533]))
    unknown chpl__thisAsParent[461887] "dead at end of block" "insert auto destroy" "temp"
    (543667 'init var' chpl__thisAsParent[461887] call_tmp[669292] tmp[461879])
    (461893 'setcid' chpl__thisAsParent[461887])
    (481673 'end of statement')
    unknown call_tmp[669297] "expr temp" "maybe param" "maybe type" "temp"
    (669300 'move' call_tmp[669297](149930 '.' this[150533] c"dom"))
    unknown call_tmp[669304] "expr temp" "maybe param" "maybe type" "temp"
    (669307 'move' call_tmp[669304](149933 call nnzDom _mt[243] call_tmp[669297]))
    unknown call_tmp[669311] "maybe param" "maybe type" "temp"
    (669314 'move' call_tmp[669311](149943 call(149936 call (partial) buildArray _mt[243] call_tmp[669304]) eltType[149893](initElts = initElts[149906])))
    unknown call_tmp[669316] "expr temp" "maybe param" "maybe type" "temp"
    (669319 'move' call_tmp[669316](461912 '.' this[150533] c"dom"))
    unknown call_tmp[669323] "expr temp" "maybe param" "maybe type" "temp"
    (669326 'move' call_tmp[669323](461902 call nnzDom _mt[243] call_tmp[669316]))
    unknown call_tmp[669328] "expr temp" "maybe param" "maybe type" "temp"
    (669331 'move' call_tmp[669328](461900 call chpl__ensureDomainExpr call_tmp[669323]))
    unknown call_tmp[669333] "expr temp" "maybe param" "maybe type" "temp"
    (669336 'move' call_tmp[669333](461915 '.v' this[150533] c"eltType"))
    unknown call_tmp[669338] "maybe param" "maybe type" "temp"
    (669341 'move' call_tmp[669338](461898 call chpl__buildArrayRuntimeType call_tmp[669328] call_tmp[669333]))
    unknown tmp[461895] "temp"
    (461906 'init var' tmp[461895] call_tmp[669311] call_tmp[669338])
    (461908 'init field' this[150533] c"data" tmp[461895])
    (481674 'end of statement')
    unknown tmp[461919] "temp"
    unknown call_tmp[669343] "expr temp" "maybe param" "maybe type" "temp"
    (669346 'move' call_tmp[669343](461928 '.v' this[150533] c"eltType"))
    (461922 'default init var' tmp[461919] call_tmp[669343])
    (461924 '.=' this[150533] c"irv" tmp[461919])
    (481675 'end of statement')
    (461931 'setcid' this[150533])
    (520428 return _void[55])
  }
  function BaseSparseArrImpl[150531](?).deinit[149951](arg _mt[150539]:_MT[238], arg this[150537]:BaseSparseArrImpl[150531](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520430 return _void[55])
  }
  function BaseSparseArrImpl[150531](?).dsiElementInitializationComplete[149958](arg _mt[150543]:_MT[238], arg this[150541]:BaseSparseArrImpl[150531](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669350] "expr temp" "maybe param" "maybe type" "temp"
    (669353 'move' call_tmp[669350](360731 call data _mt[243] this[150541]))
    (149965 call(149961 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[669350]))
    (520432 return _void[55])
  }
  function BaseSparseArrImpl[150531](?).dsiElementDeinitializationComplete[149972](arg _mt[150547]:_MT[238], arg this[150545]:BaseSparseArrImpl[150531](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669359] "expr temp" "maybe param" "maybe type" "temp"
    (669362 'move' call_tmp[669359](360736 call data _mt[243] this[150545]))
    (149979 call(149975 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[669359]))
    (520434 return _void[55])
  }
  function BaseSparseArrImpl[150531](?).dsiDestroyArr[149990](arg _mt[150551]:_MT[238], arg this[150549]:BaseSparseArrImpl[150531](?), arg deinitElts[149987]:bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669366] "expr temp" "maybe param" "maybe type" "temp"
    (669369 'move' call_tmp[669366](149998 call _cond_test deinitElts[149987]))
    if call_tmp[669366]
    {
      unknown call_tmp[669373] "expr temp" "maybe param" "maybe type" "temp"
      (669376 'move' call_tmp[669373](385965 call data _mt[243] this[150549]))
      (149996 call _deinitElements call_tmp[669373])
    }
    (520436 return _void[55])
  }
  function BaseSparseArrImpl[150531](?).IRV[150013](arg _mt[150555]:_MT[238], arg this[150553]:BaseSparseArrImpl[150531](?)) ref : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520440] "RVV" "temp"
    unknown call_tmp[669380] "expr temp" "maybe param" "maybe type" "temp"
    (669383 'move' call_tmp[669380](385973 call irv _mt[243] this[150553]))
    (520445 'move' ret[520440](520444 'addr of' call_tmp[669380]))
    (520442 return ret[520440])
  }
  function BaseSparseArrImpl[150531](?).sparseBulkShiftArray[150025](arg _mt[150559]:_MT[238], arg this[150557]:BaseSparseArrImpl[150531](?), arg shiftMap[150023]:_any[178](?), arg oldnnz[150027]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown newIdx[150030] "dead at end of block" "insert auto destroy"
    (543669 'default init var' newIdx[150030] int(64)[13])
    (150033 'end of statement')
    unknown prevNewIdx[150036] "dead at end of block" "insert auto destroy"
    (543671 'init var' prevNewIdx[150036] 1)
    (150039 'end of statement')
    unknown call_tmp[669387] "expr temp" "maybe param" "maybe type" "temp"
    (669390 'move' call_tmp[669387](150042 call _dom _mt[243] shiftMap[150023]))
    unknown call_tmp[669394] "expr temp" "maybe param" "maybe type" "temp"
    (669397 'move' call_tmp[669394](150045 call high _mt[243] call_tmp[669387]))
    unknown call_tmp[669399] "expr temp" "maybe param" "maybe type" "temp"
    (669402 'move' call_tmp[669399](150049 call + call_tmp[669394] 1))
    unknown call_tmp[669406] "expr temp" "maybe param" "maybe type" "temp"
    (669409 'move' call_tmp[669406](360742 call dom _mt[243] this[150557]))
    unknown call_tmp[669413] "expr temp" "maybe param" "maybe type" "temp"
    (669416 'move' call_tmp[669413](150052 call nnzDom _mt[243] call_tmp[669406]))
    unknown call_tmp[669420] "expr temp" "maybe param" "maybe type" "temp"
    (669423 'move' call_tmp[669420](150055 call high _mt[243] call_tmp[669413]))
    unknown call_tmp[669425] "expr temp" "maybe param" "maybe type" "temp"
    (669428 'move' call_tmp[669425](150058 call chpl_build_bounded_range call_tmp[669399] call_tmp[669420]))
    Forall {
      induction variables:
        
        unknown i[150069] "index var" "insert auto destroy"
      iterated expressions:
        call_tmp[669425]
      shadow variables:
      other variables
        forall body
      {
        unknown call_tmp[669432] "expr temp" "maybe param" "maybe type" "temp"
        (669435 'move' call_tmp[669432](150063 call(385978 call (partial) data _mt[243] this[150557]) i[150069]))
        unknown call_tmp[669439] "expr temp" "maybe param" "maybe type" "temp"
        (669442 'move' call_tmp[669439](385984 call irv _mt[243] this[150557]))
        (150065 call = call_tmp[669432] call_tmp[669439])
        (481681 'end of statement' i[150069])
      }
    }
    {
      unknown _indexOfInterest[150191] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150192] "expr temp" "temp"
      unknown call_tmp[669444] "expr temp" "maybe param" "maybe type" "temp"
      (669447 'move' call_tmp[669444](150216 call - 1))
      unknown call_tmp[669449] "expr temp" "maybe param" "maybe type" "temp"
      (669452 'move' call_tmp[669449](150220 call chpl_direct_range_iter 1 oldnnz[150027] call_tmp[669444]))
      unknown call_tmp[669454] "expr temp" "maybe param" "maybe type" "temp"
      (669457 'move' call_tmp[669454](150209 call _getIterator call_tmp[669449]))
      unknown call_tmp[669461] "expr temp" "maybe param" "maybe type" "temp"
      (669464 'move' call_tmp[669461](150227 call _dom _mt[243] shiftMap[150023]))
      unknown call_tmp[669468] "expr temp" "maybe param" "maybe type" "temp"
      (669471 'move' call_tmp[669468](150231 call(150225 call (partial) dim _mt[243] call_tmp[669461]) 0))
      unknown call_tmp[669473] "expr temp" "maybe param" "maybe type" "temp"
      (669476 'move' call_tmp[669473](150234 call - 1))
      unknown call_tmp[669478] "expr temp" "maybe param" "maybe type" "temp"
      (669481 'move' call_tmp[669478](150223 call chpl_by call_tmp[669468] call_tmp[669473]))
      unknown call_tmp[669483] "expr temp" "maybe param" "maybe type" "temp"
      (669486 'move' call_tmp[669483](150236 call _getIterator call_tmp[669478]))
      (150250 'move' _iterator[150192](150102 call _build_tuple call_tmp[669454] call_tmp[669483]))
      Defer
      {
        {
          (150280 call _freeIterator _iterator[150192])
        }
      }
      { scopeless type
        (150255 'move' _indexOfInterest[150191](150252 call iteratorIndex _iterator[150192]))
      }
      ForLoop[150193]
      {
        (150260 call _check_tuple_var_decl _indexOfInterest[150191] 2)
        (481684 'end of statement')
        unknown i[150266] "index var" "insert auto destroy"
        (481685 'end of statement')
        (150268 'move' i[150266](150264 call _indexOfInterest[150191] 0))
        (481686 'end of statement' i[150266])
        unknown _newIdx[150273] "index var" "insert auto destroy"
        (481688 'end of statement')
        (150275 'move' _newIdx[150273](150271 call _indexOfInterest[150191] 1))
        (481689 'end of statement' _newIdx[150273])
        {
          unknown call_tmp[669488] "expr temp" "maybe param" "maybe type" "temp"
          (669491 'move' call_tmp[669488](150107 call shiftMap[150023] _newIdx[150273]))
          (150108 call = newIdx[150030] call_tmp[669488])
          (481691 'end of statement' newIdx[150030] _newIdx[150273])
          unknown call_tmp[669495] "expr temp" "maybe param" "maybe type" "temp"
          (669498 'move' call_tmp[669495](150115 call(385992 call (partial) data _mt[243] this[150557]) newIdx[150030]))
          unknown call_tmp[669502] "expr temp" "maybe param" "maybe type" "temp"
          (669505 'move' call_tmp[669502](150119 call(385998 call (partial) data _mt[243] this[150557]) i[150266]))
          (150120 call = call_tmp[669495] call_tmp[669502])
          (481694 'end of statement' newIdx[150030] i[150266])
          {
            unknown _indexOfInterest[150142] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[150143] "expr temp" "temp"
            unknown call_tmp[669507] "expr temp" "maybe param" "maybe type" "temp"
            (669510 'move' call_tmp[669507](150156 call + newIdx[150030] 1))
            unknown call_tmp[669512] "expr temp" "maybe param" "maybe type" "temp"
            (669515 'move' call_tmp[669512](150160 call - prevNewIdx[150036] 1))
            unknown call_tmp[669517] "expr temp" "maybe param" "maybe type" "temp"
            (669520 'move' call_tmp[669517](150163 call chpl_direct_range_iter call_tmp[669507] call_tmp[669512] 1))
            (150152 'move' _iterator[150143](150150 call _getIterator call_tmp[669517]))
            Defer
            {
              {
                (150179 call _freeIterator _iterator[150143])
              }
            }
            { scopeless type
              (150168 'move' _indexOfInterest[150142](150165 call iteratorIndex _iterator[150143]))
            }
            ForLoop[150144]
            {
              unknown emptyIndex[150172] "index var" "insert auto destroy"
              (481698 'end of statement')
              (150174 'move' emptyIndex[150172] _indexOfInterest[150142])
              (481699 'end of statement' emptyIndex[150172])
              unknown call_tmp[669524] "expr temp" "maybe param" "maybe type" "temp"
              (669527 'move' call_tmp[669524](150137 call(386004 call (partial) data _mt[243] this[150557]) emptyIndex[150172]))
              unknown call_tmp[669531] "expr temp" "maybe param" "maybe type" "temp"
              (669534 'move' call_tmp[669531](386010 call irv _mt[243] this[150557]))
              (150139 call = call_tmp[669524] call_tmp[669531])
              (481701 'end of statement' emptyIndex[150172])
              label _continueLabel[150147]
              _indexOfInterest[150142]
              _iterator[150143]
            }
            label _breakLabel[150148]
          }
          (150188 call = prevNewIdx[150036] newIdx[150030])
          (481703 'end of statement' prevNewIdx[150036] newIdx[150030])
        }
        label _continueLabel[150196]
        _indexOfInterest[150191]
        _iterator[150192]
      }
      label _breakLabel[150197]
    }
    {
      unknown _indexOfInterest[150303] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150304] "expr temp" "temp"
      unknown call_tmp[669536] "expr temp" "maybe param" "maybe type" "temp"
      (669539 'move' call_tmp[669536](150318 call - prevNewIdx[150036] 1))
      unknown call_tmp[669541] "expr temp" "maybe param" "maybe type" "temp"
      (669544 'move' call_tmp[669541](150321 call chpl_direct_range_iter 1 call_tmp[669536] 1))
      (150313 'move' _iterator[150304](150311 call _getIterator call_tmp[669541]))
      Defer
      {
        {
          (150337 call _freeIterator _iterator[150304])
        }
      }
      { scopeless type
        (150326 'move' _indexOfInterest[150303](150323 call iteratorIndex _iterator[150304]))
      }
      ForLoop[150305]
      {
        unknown i[150330] "index var" "insert auto destroy"
        (481707 'end of statement')
        (150332 'move' i[150330] _indexOfInterest[150303])
        (481708 'end of statement' i[150330])
        unknown call_tmp[669548] "expr temp" "maybe param" "maybe type" "temp"
        (669551 'move' call_tmp[669548](150298 call(386020 call (partial) data _mt[243] this[150557]) i[150330]))
        unknown call_tmp[669555] "expr temp" "maybe param" "maybe type" "temp"
        (669558 'move' call_tmp[669555](386026 call irv _mt[243] this[150557]))
        (150300 call = call_tmp[669548] call_tmp[669555])
        (481710 'end of statement' i[150330])
        label _continueLabel[150308]
        _indexOfInterest[150303]
        _iterator[150304]
      }
      label _breakLabel[150309]
    }
    (520447 return _void[55])
  }
  function BaseSparseArrImpl[150531](?).sparseShiftArray[150350](arg _mt[150563]:_MT[238], arg this[150561]:BaseSparseArrImpl[150531](?), arg shiftrange[150348]:_any[178](?), arg initrange[150352]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150365] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150366] "expr temp" "temp"
      (150375 'move' _iterator[150366](150373 call _getIterator initrange[150352]))
      Defer
      {
        {
          (150391 call _freeIterator _iterator[150366])
        }
      }
      { scopeless type
        (150380 'move' _indexOfInterest[150365](150377 call iteratorIndex _iterator[150366]))
      }
      ForLoop[150367]
      {
        unknown i[150384] "index var" "insert auto destroy"
        (481713 'end of statement')
        (150386 'move' i[150384] _indexOfInterest[150365])
        (481714 'end of statement' i[150384])
        {
          unknown call_tmp[669562] "expr temp" "maybe param" "maybe type" "temp"
          (669565 'move' call_tmp[669562](150359 call(386033 call (partial) data _mt[243] this[150561]) i[150384]))
          unknown call_tmp[669569] "expr temp" "maybe param" "maybe type" "temp"
          (669572 'move' call_tmp[669569](386039 call irv _mt[243] this[150561]))
          (150361 call = call_tmp[669562] call_tmp[669569])
          (481716 'end of statement' i[150384])
        }
        label _continueLabel[150370]
        _indexOfInterest[150365]
        _iterator[150366]
      }
      label _breakLabel[150371]
    }
    {
      unknown _indexOfInterest[150421] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150422] "expr temp" "temp"
      unknown call_tmp[669574] "expr temp" "maybe param" "maybe type" "temp"
      (669577 'move' call_tmp[669574](150402 call - 1))
      unknown call_tmp[669579] "expr temp" "maybe param" "maybe type" "temp"
      (669582 'move' call_tmp[669579](150404 call chpl_by shiftrange[150348] call_tmp[669574]))
      (150431 'move' _iterator[150422](150429 call _getIterator call_tmp[669579]))
      Defer
      {
        {
          (150451 call _freeIterator _iterator[150422])
        }
      }
      { scopeless type
        (150440 'move' _indexOfInterest[150421](150437 call iteratorIndex _iterator[150422]))
      }
      ForLoop[150423]
      {
        unknown i[150444] "index var" "insert auto destroy"
        (481719 'end of statement')
        (150446 'move' i[150444] _indexOfInterest[150421])
        (481720 'end of statement' i[150444])
        {
          unknown call_tmp[669586] "expr temp" "maybe param" "maybe type" "temp"
          (669589 'move' call_tmp[669586](150409 call + i[150444] 1))
          unknown call_tmp[669591] "expr temp" "maybe param" "maybe type" "temp"
          (669594 'move' call_tmp[669591](150412 call(386045 call (partial) data _mt[243] this[150561]) call_tmp[669586]))
          unknown call_tmp[669598] "expr temp" "maybe param" "maybe type" "temp"
          (669601 'move' call_tmp[669598](150416 call(386051 call (partial) data _mt[243] this[150561]) i[150444]))
          (150417 call = call_tmp[669591] call_tmp[669598])
          (481722 'end of statement' i[150444] i[150444])
        }
        label _continueLabel[150426]
        _indexOfInterest[150421]
        _iterator[150422]
      }
      label _breakLabel[150427]
    }
    unknown call_tmp[669607] "expr temp" "maybe param" "maybe type" "temp"
    (669610 'move' call_tmp[669607](150460 call low _mt[243] shiftrange[150348]))
    unknown call_tmp[669612] "expr temp" "maybe param" "maybe type" "temp"
    (669615 'move' call_tmp[669612](150464 call(386057 call (partial) data _mt[243] this[150561]) call_tmp[669607]))
    unknown call_tmp[669619] "expr temp" "maybe param" "maybe type" "temp"
    (669622 'move' call_tmp[669619](386062 call irv _mt[243] this[150561]))
    (150466 call = call_tmp[669612] call_tmp[669619])
    (520449 return _void[55])
  }
  function BaseSparseArrImpl[150531](?).sparseShiftArrayBack[150475](arg _mt[150567]:_MT[238], arg this[150565]:BaseSparseArrImpl[150531](?), arg shiftrange[150473]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150494] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150495] "expr temp" "temp"
      (150504 'move' _iterator[150495](150502 call _getIterator shiftrange[150473]))
      Defer
      {
        {
          (150520 call _freeIterator _iterator[150495])
        }
      }
      { scopeless type
        (150509 'move' _indexOfInterest[150494](150506 call iteratorIndex _iterator[150495]))
      }
      ForLoop[150496]
      {
        unknown i[150513] "index var" "insert auto destroy"
        (481727 'end of statement')
        (150515 'move' i[150513] _indexOfInterest[150494])
        (481728 'end of statement' i[150513])
        {
          unknown call_tmp[669626] "expr temp" "maybe param" "maybe type" "temp"
          (669629 'move' call_tmp[669626](150482 call(386068 call (partial) data _mt[243] this[150565]) i[150513]))
          unknown call_tmp[669633] "expr temp" "maybe param" "maybe type" "temp"
          (669636 'move' call_tmp[669633](150486 call + i[150513] 1))
          unknown call_tmp[669638] "expr temp" "maybe param" "maybe type" "temp"
          (669641 'move' call_tmp[669638](150489 call(386074 call (partial) data _mt[243] this[150565]) call_tmp[669633]))
          (150490 call = call_tmp[669626] call_tmp[669638])
          (481730 'end of statement' i[150513] i[150513])
        }
        label _continueLabel[150499]
        _indexOfInterest[150494]
        _iterator[150495]
      }
      label _breakLabel[150500]
    }
    (520451 return _void[55])
  }
  type BaseSparseArrImpl[150531](?) val super[355739]:BaseSparseArr[149861](?) "delay instantiation" "super class" unknown data[149887] "local field" "unsafe"(149885 call chpl__buildArrayRuntimeType(149883 call chpl__ensureDomainExpr(149878 call nnzDom _mt[243] dom[149839])) eltType[149675]) unknown irv[150007] eltType[149675]
  function _delete_dist[150577](arg dist[150574]:unmanaged BaseDist[415526], arg privatized[150580]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150590 call(150586 call (partial) dsiDestroyDist _mt[243] dist[150574]))
    (481733 'end of statement')
    unknown tmp[427210] "maybe param" "temp"
    (427221 'move' tmp[427210] 0)
    unknown call_tmp[669647] "expr temp" "maybe param" "maybe type" "temp"
    (669650 'move' call_tmp[669647](427223 call _cond_invalid tmp[427210]))
    if call_tmp[669647]
    {
      (427226 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568723] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568724] "maybe param" "temp"
    unknown call_tmp[669652] "expr temp" "maybe param" "maybe type" "temp"
    (669655 'move' call_tmp[669652](427211 call isTrue tmp[427210]))
    (568729 'move' tmp[568724](568727 call _cond_test call_tmp[669652]))
    if tmp[568724]
    {
      unknown tmp[568731] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568733 'move' tmp[568731](427214 call isTrue privatized[150580]))
      (568738 'move' tmp[568723](568735 '_paramFoldLogical' tmp[568724] tmp[568731]))
    }
    {
      (568743 'move' tmp[568723](568740 '_paramFoldLogical' tmp[568724] 0))
    }
    unknown call_tmp[669657] "expr temp" "maybe param" "maybe type" "temp"
    (669660 'move' call_tmp[669657](150607 call _cond_test tmp[568723]))
    if call_tmp[669657]
    {
      unknown call_tmp[669664] "expr temp" "maybe param" "maybe type" "temp"
      (669667 'move' call_tmp[669664](150599 call pid _mt[243] dist[150574]))
      (150604 call _freePrivatizedClass call_tmp[669664] dist[150574])
    }
    (150613 call chpl__delete dist[150574])
    (520453 return _void[55])
  }
  function _delete_dom[150622](arg dom[150620]:_any[178](?), arg privatized[150625]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150635 call(150631 call (partial) dsiDestroyDom _mt[243] dom[150620]))
    (481737 'end of statement')
    unknown tmp[427231] "maybe param" "temp"
    (427242 'move' tmp[427231] 0)
    unknown call_tmp[669671] "expr temp" "maybe param" "maybe type" "temp"
    (669674 'move' call_tmp[669671](427244 call _cond_invalid tmp[427231]))
    if call_tmp[669671]
    {
      (427247 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568750] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568751] "maybe param" "temp"
    unknown call_tmp[669676] "expr temp" "maybe param" "maybe type" "temp"
    (669679 'move' call_tmp[669676](427232 call isTrue tmp[427231]))
    (568756 'move' tmp[568751](568754 call _cond_test call_tmp[669676]))
    if tmp[568751]
    {
      unknown tmp[568758] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568760 'move' tmp[568758](427235 call isTrue privatized[150625]))
      (568765 'move' tmp[568750](568762 '_paramFoldLogical' tmp[568751] tmp[568758]))
    }
    {
      (568770 'move' tmp[568750](568767 '_paramFoldLogical' tmp[568751] 0))
    }
    unknown call_tmp[669681] "expr temp" "maybe param" "maybe type" "temp"
    (669684 'move' call_tmp[669681](150652 call _cond_test tmp[568750]))
    if call_tmp[669681]
    {
      unknown call_tmp[669688] "expr temp" "maybe param" "maybe type" "temp"
      (669691 'move' call_tmp[669688](150644 call pid _mt[243] dom[150620]))
      (150649 call _freePrivatizedClass call_tmp[669688] dom[150620])
    }
    (150658 call chpl__delete dom[150620])
    (520455 return _void[55])
  }
  function _delete_arr[150670](arg arr[150667]:unmanaged BaseArr[415511], param arg privatized[150673]:bool[10], arg deinitElts[150677] :
  1 =
  1) : _unknown[51] "no return value for void"
  {
    (150689 call(150683 call (partial) dsiDestroyArr _mt[243] arr[150667])(deinitElts = deinitElts[150677]))
    (481741 'end of statement')
    (150699 call(150695 call (partial) decEltCountsIfNeeded _mt[243] arr[150667]))
    (481742 'end of statement')
    unknown tmp[427252] "maybe param" "temp"
    (427263 'move' tmp[427252] 0)
    unknown call_tmp[669697] "expr temp" "maybe param" "maybe type" "temp"
    (669700 'move' call_tmp[669697](427265 call _cond_invalid tmp[427252]))
    if call_tmp[669697]
    {
      (427268 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568777] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568778] "maybe param" "temp"
    unknown call_tmp[669702] "expr temp" "maybe param" "maybe type" "temp"
    (669705 'move' call_tmp[669702](427253 call isTrue tmp[427252]))
    (568783 'move' tmp[568778](568781 call _cond_test call_tmp[669702]))
    if tmp[568778]
    {
      unknown tmp[568785] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568787 'move' tmp[568785](427256 call isTrue privatized[150673]))
      (568792 'move' tmp[568777](568789 '_paramFoldLogical' tmp[568778] tmp[568785]))
    }
    {
      (568797 'move' tmp[568777](568794 '_paramFoldLogical' tmp[568778] 0))
    }
    unknown call_tmp[669707] "expr temp" "maybe param" "maybe type" "temp"
    (669710 'move' call_tmp[669707](150715 call _cond_test tmp[568777]))
    if call_tmp[669707]
    {
      unknown call_tmp[669714] "expr temp" "maybe param" "maybe type" "temp"
      (669717 'move' call_tmp[669714](150707 call pid _mt[243] arr[150667]))
      (150712 call _freePrivatizedClass call_tmp[669714] arr[150667])
    }
    (150721 call chpl__delete arr[150667])
    (520457 return _void[55])
  }
  function chpl_assignDomainWithGetSetIndices[150733](arg lhs[150730]:_any[178](?), arg rhs[150736]:_domain[125914](?)) : _unknown[51] "no return value for void"
  {
    unknown arrType[150755] "dead at end of block" "insert auto destroy" "type variable"(150754 call(150750 call (partial) getBaseArrType _mt[243] lhs[150730]))
    (543678 'move' arrType[150755](543677 call(543674 call (partial) getBaseArrType _mt[243] lhs[150730])))
    unknown call_tmp[669725] "maybe param" "maybe type" "temp"
    (669728 'move' call_tmp[669725](150760 call rank _mt[243] lhs[150730]))
    unknown rank[150763] "dead at end of block" "param"
    (543680 'init var' rank[150763] call_tmp[669725])
    (150766 'end of statement')
    unknown idxType[150771] "dead at end of block" "insert auto destroy" "type variable"(150768 call idxType _mt[243] lhs[150730])
    (543686 'move' idxType[150771](543683 call idxType _mt[243] lhs[150730]))
    unknown call_tmp[669736] "maybe param" "maybe type" "temp"
    (669739 'move' call_tmp[669736](150775 call stridable _mt[243] lhs[150730]))
    unknown stridable[150778] "dead at end of block" "param"
    (543688 'init var' stridable[150778] call_tmp[669736])
    (150781 'end of statement')
    {
      unknown _indexOfInterest[150981] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150982] "expr temp" "temp"
      unknown call_tmp[669743] "expr temp" "maybe param" "maybe type" "temp"
      (669746 'move' call_tmp[669743](150784 call _arrs _mt[243] lhs[150730]))
      (150991 'move' _iterator[150982](150989 call _getIterator call_tmp[669743]))
      Defer
      {
        {
          (151008 call _freeIterator _iterator[150982])
        }
      }
      { scopeless type
        (150997 'move' _indexOfInterest[150981](150994 call iteratorIndex _iterator[150982]))
      }
      ForLoop[150983]
      {
        unknown e[151001] "index var" "insert auto destroy"
        (481747 'end of statement')
        (151003 'move' e[151001] _indexOfInterest[150981])
        (481748 'end of statement' e[151001])
        {
          {
            const tmp[150972] "const" "temp"
            unknown call_tmp[669748] "expr temp" "maybe param" "maybe type" "temp"
            (669751 'move' call_tmp[669748](150969 '_wide_get_locale' e[151001]))
            (150973 'move' tmp[150972](150970 'deref' call_tmp[669748]))
            {
              unknown call_tmp[669753] "expr temp" "maybe param" "maybe type" "temp"
              (669756 'move' call_tmp[669753](150790 'to nilable class from type' arrType[150755]))
              unknown call_tmp[669758] "maybe param" "maybe type" "temp"
              (669761 'move' call_tmp[669758](150791 call _cast call_tmp[669753] e[151001]))
              unknown eCastQ[150793] "dead at end of block" "insert auto destroy"
              (543690 'init var' eCastQ[150793] call_tmp[669758])
              (150796 'end of statement')
              unknown call_tmp[669763] "expr temp" "maybe param" "maybe type" "temp"
              (669766 'move' call_tmp[669763](150800 call == eCastQ[150793] nil[44]))
              unknown call_tmp[669768] "expr temp" "maybe param" "maybe type" "temp"
              (669771 'move' call_tmp[669768](150848 call _cond_test call_tmp[669763]))
              if call_tmp[669768]
              {
                unknown call_tmp[669773] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                (669776 'move' call_tmp[669773](461933 'typeof' lhs[150730]))
                unknown call_tmp[669778] "expr temp" "maybe param" "maybe type" "temp"
                (669781 'move' call_tmp[669778](150823 call _cast string[26] call_tmp[669773]))
                unknown call_tmp[669783] "expr temp" "maybe param" "maybe type" "temp"
                (669786 'move' call_tmp[669783](150844 call _cast string[26] arrType[150755]))
                (150846 call halt "internal error: " call_tmp[669778] " contains an bad array type " call_tmp[669783])
                (481752 'end of statement' arrType[150755])
              }
              unknown call_tmp[669788] "maybe param" "maybe type" "temp"
              (669791 'move' call_tmp[669788](150854 call postfix! eCastQ[150793]))
              unknown eCast[150856] "dead at end of block" "insert auto destroy"
              (543692 'init var' eCast[150856] call_tmp[669788])
              (150859 'end of statement')
              unknown call_tmp[669795] "maybe param" "maybe type" "temp"
              (669798 'move' call_tmp[669795](150865 call(150861 call (partial) getIndices _mt[243] rhs[150736])))
              unknown inds[150866] "dead at end of block" "insert auto destroy"
              (543694 'init var' inds[150866] call_tmp[669795])
              (150869 'end of statement')
              unknown tmp[150882] "dead at end of block" "insert auto destroy"
              unknown call_tmp[669800] "expr temp" "maybe param" "maybe type" "temp"
              (669803 'move' call_tmp[669800](150879 call range[64316](?) idxType[150771] bounded[64205] stridable[150778]))
              unknown call_tmp[669805] "expr temp" "maybe param" "maybe type" "temp"
              (669808 'move' call_tmp[669805](150880 call * rank[150763] call_tmp[669800]))
              (543696 'default init var' tmp[150882] call_tmp[669805])
              (150885 'end of statement' arrType[150755] e[151001] eCastQ[150793] idxType[150771])
              {
                unknown i[150924] "dead at end of block" "insert auto destroy"
                (543698 'init var' i[150924] 0)
                (481756 'end of statement')
                unknown tmp[150925] "maybe param" "temp"
                unknown call_tmp[669810] "expr temp" "maybe param" "maybe type" "temp"
                (669813 'move' call_tmp[669810](150889 call - rank[150763] 1))
                (150937 'move' tmp[150925](150935 call chpl_compute_low_param_loop_bound 0 call_tmp[669810]))
                unknown tmp[150926] "maybe param" "temp"
                unknown call_tmp[669815] "expr temp" "maybe param" "maybe type" "temp"
                (669818 'move' call_tmp[669815](150942 call - rank[150763] 1))
                (150947 'move' tmp[150926](150945 call chpl_compute_high_param_loop_bound 0 call_tmp[669815]))
                unknown tmp[150927] "maybe param" "temp"
                (150950 'move' tmp[150927] 1)
                ParamForLoop[150952]
                { i[150924] tmp[150925] tmp[150926] tmp[150927]
                  {
                    unknown call_tmp[669820] "maybe param" "maybe type" "temp"
                    (669823 'move' call_tmp[669820](150896 call inds[150866] i[150924]))
                    unknown from[150897] "dead at end of block" "insert auto destroy"
                    (543700 'init var' from[150897] call_tmp[669820])
                    (150900 'end of statement' inds[150866] i[150924])
                    unknown call_tmp[669825] "expr temp" "maybe param" "maybe type" "temp"
                    (669828 'move' call_tmp[669825](150905 call tmp[150882] i[150924]))
                    unknown call_tmp[669832] "expr temp" "maybe param" "maybe type" "temp"
                    (669835 'move' call_tmp[669832](150918 call range[64316](?) idxType[150771] bounded[64205] stridable[150778]))
                    unknown call_tmp[669837] "expr temp" "maybe param" "maybe type" "temp"
                    (669840 'move' call_tmp[669837](150920 call(150907 call (partial) safeCast _mt[243] from[150897]) call_tmp[669832]))
                    (150921 call = call_tmp[669825] call_tmp[669837])
                    (481759 'end of statement' tmp[150882] i[150924] from[150897] idxType[150771])
                  }
                }
                label _unused_continueLabel[150929]
                label _breakLabel[150928]
              }
              (150967 call(150962 call (partial) dsiReallocate _mt[243] eCast[150856]) tmp[150882])
              (481764 'end of statement' eCast[150856] tmp[150882])
            }
            (150976 'elided on block' 0 tmp[150972])
          }
        }
        label _continueLabel[150986]
        _indexOfInterest[150981]
        _iterator[150982]
      }
      label _breakLabel[150987]
    }
    unknown call_tmp[669848] "expr temp" "maybe param" "maybe type" "temp"
    (669851 'move' call_tmp[669848](151024 call(151020 call (partial) getIndices _mt[243] rhs[150736])))
    (151026 call(151016 call (partial) dsiSetIndices _mt[243] lhs[150730]) call_tmp[669848])
    (481767 'end of statement')
    {
      unknown _indexOfInterest[151069] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151070] "expr temp" "temp"
      unknown call_tmp[669855] "expr temp" "maybe param" "maybe type" "temp"
      (669858 'move' call_tmp[669855](151030 call _arrs _mt[243] lhs[150730]))
      (151079 'move' _iterator[151070](151077 call _getIterator call_tmp[669855]))
      Defer
      {
        {
          (151096 call _freeIterator _iterator[151070])
        }
      }
      { scopeless type
        (151085 'move' _indexOfInterest[151069](151082 call iteratorIndex _iterator[151070]))
      }
      ForLoop[151071]
      {
        unknown e[151089] "index var" "insert auto destroy"
        (481769 'end of statement')
        (151091 'move' e[151089] _indexOfInterest[151069])
        (481770 'end of statement' e[151089])
        {
          unknown call_tmp[669860] "expr temp" "maybe param" "maybe type" "temp"
          (669863 'move' call_tmp[669860](151035 'to nilable class from type' arrType[150755]))
          unknown call_tmp[669865] "maybe param" "maybe type" "temp"
          (669868 'move' call_tmp[669865](151036 call _cast call_tmp[669860] e[151089]))
          unknown eCastQ[151038] "dead at end of block" "insert auto destroy"
          (543702 'init var' eCastQ[151038] call_tmp[669865])
          (151041 'end of statement')
          unknown call_tmp[669870] "maybe param" "maybe type" "temp"
          (669873 'move' call_tmp[669870](151044 call postfix! eCastQ[151038]))
          unknown eCast[151046] "dead at end of block" "insert auto destroy"
          (543704 'init var' eCast[151046] call_tmp[669870])
          (151049 'end of statement' arrType[150755] e[151089] eCastQ[151038])
          {
            const tmp[151061] "const" "temp"
            unknown call_tmp[669875] "expr temp" "maybe param" "maybe type" "temp"
            (669878 'move' call_tmp[669875](151058 '_wide_get_locale' e[151089]))
            (151062 'move' tmp[151061](151059 'deref' call_tmp[669875]))
            (151056 call(151052 call (partial) dsiPostReallocate _mt[243] eCast[151046]))
            (481775 'end of statement' eCast[151046])
            (151065 'elided on block' 0 tmp[151061])
          }
        }
        label _continueLabel[151074]
        _indexOfInterest[151069]
        _iterator[151070]
      }
      label _breakLabel[151075]
    }
    unknown call_tmp[669884] "expr temp" "maybe param" "maybe type" "temp"
    (669887 'move' call_tmp[669884](151108 call(151104 call (partial) dsiSupportsPrivatization _mt[243] lhs[150730])))
    unknown call_tmp[669889] "expr temp" "maybe param" "maybe type" "temp"
    (669892 'move' call_tmp[669889](151115 call _cond_test call_tmp[669884]))
    if call_tmp[669889]
    {
      (151112 call _reprivatize lhs[150730])
    }
    (520459 return _void[55])
  }
  where {
    unknown call_tmp[669894] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (669897 'move' call_tmp[669894](461935 'typeof' lhs[150730]))
    unknown call_tmp[669899] "expr temp" "maybe param" "maybe type" "temp"
    (669902 'move' call_tmp[669899](150743 call _to_borrowed call_tmp[669894]))
    (354388 'is_subtype' BaseRectangularDom[382300](?) call_tmp[669899])
  }
  function chpl_assignDomainWithIndsIterSafeForRemoving[151129](arg lhs[151126]:_any[178](?), arg rhs[151132]:_domain[125914](?)) : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[151185] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151186] "expr temp" "temp"
      unknown call_tmp[669906] "expr temp" "maybe param" "maybe type" "temp"
      (669909 'move' call_tmp[669906](151161 call(151157 call (partial) dsiIndsIterSafeForRemoving _mt[243] lhs[151126])))
      (151195 'move' _iterator[151186](151193 call _getIterator call_tmp[669906]))
      Defer
      {
        {
          (151212 call _freeIterator _iterator[151186])
        }
      }
      { scopeless type
        (151201 'move' _indexOfInterest[151185](151198 call iteratorIndex _iterator[151186]))
      }
      ForLoop[151187]
      {
        unknown i[151205] "index var" "insert auto destroy"
        (481779 'end of statement')
        (151207 'move' i[151205] _indexOfInterest[151185])
        (481780 'end of statement' i[151205])
        {
          unknown call_tmp[669913] "expr temp" "maybe param" "maybe type" "temp"
          (669916 'move' call_tmp[669913](151168 call(151163 call (partial) contains _mt[243] rhs[151132]) i[151205]))
          unknown call_tmp[669918] "expr temp" "maybe param" "maybe type" "temp"
          (669921 'move' call_tmp[669918](151169 call ! call_tmp[669913]))
          unknown call_tmp[669923] "expr temp" "maybe param" "maybe type" "temp"
          (669926 'move' call_tmp[669923](151180 call _cond_test call_tmp[669918]))
          if call_tmp[669923]
          {
            (151177 call(151172 call (partial) dsiRemove _mt[243] lhs[151126]) i[151205])
            (481782 'end of statement' i[151205])
          }
        }
        label _continueLabel[151190]
        _indexOfInterest[151185]
        _iterator[151186]
      }
      label _breakLabel[151191]
    }
    {
      unknown _indexOfInterest[151245] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151246] "expr temp" "temp"
      (151255 'move' _iterator[151246](151253 call _getIterator rhs[151132]))
      Defer
      {
        {
          (151271 call _freeIterator _iterator[151246])
        }
      }
      { scopeless type
        (151260 'move' _indexOfInterest[151245](151257 call iteratorIndex _iterator[151246]))
      }
      ForLoop[151247]
      {
        unknown i[151264] "index var" "insert auto destroy"
        (481785 'end of statement')
        (151266 'move' i[151264] _indexOfInterest[151245])
        (481786 'end of statement' i[151264])
        {
          unknown call_tmp[669932] "expr temp" "maybe param" "maybe type" "temp"
          (669935 'move' call_tmp[669932](151228 call(151223 call (partial) dsiMember _mt[243] lhs[151126]) i[151264]))
          unknown call_tmp[669937] "expr temp" "maybe param" "maybe type" "temp"
          (669940 'move' call_tmp[669937](151229 call ! call_tmp[669932]))
          unknown call_tmp[669942] "expr temp" "maybe param" "maybe type" "temp"
          (669945 'move' call_tmp[669942](151240 call _cond_test call_tmp[669937]))
          if call_tmp[669942]
          {
            (151237 call(151232 call (partial) dsiAdd _mt[243] lhs[151126]) i[151264])
            (481788 'end of statement' i[151264])
          }
        }
        label _continueLabel[151250]
        _indexOfInterest[151245]
        _iterator[151246]
      }
      label _breakLabel[151251]
    }
    (520461 return _void[55])
  }
  where {
    unknown tmp[427273] "maybe param" "temp"
    unknown call_tmp[669949] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (669952 'move' call_tmp[669949](461937 'typeof' lhs[151126]))
    unknown call_tmp[669954] "expr temp" "maybe param" "maybe type" "temp"
    (669957 'move' call_tmp[669954](151139 call _to_borrowed call_tmp[669949]))
    (427284 'move' tmp[427273](354389 'is_subtype' BaseSparseDom[382310](?) call_tmp[669954]))
    unknown call_tmp[669959] "expr temp" "maybe param" "maybe type" "temp"
    (669962 'move' call_tmp[669959](427286 call _cond_invalid tmp[427273]))
    if call_tmp[669959]
    {
      (427289 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568804] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568805] "maybe param" "temp"
    unknown call_tmp[669964] "expr temp" "maybe param" "maybe type" "temp"
    (669967 'move' call_tmp[669964](427274 call isTrue tmp[427273]))
    (568810 'move' tmp[568805](568808 call _cond_test call_tmp[669964]))
    if tmp[568805]
    {
      (568815 'move' tmp[568804](568812 '_paramFoldLogical' tmp[568805] 1))
    }
    {
      unknown tmp[568817] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[669969] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (669972 'move' call_tmp[669969](461939 'typeof' lhs[151126]))
      unknown call_tmp[669974] "expr temp" "maybe param" "maybe type" "temp"
      (669977 'move' call_tmp[669974](151147 call _to_borrowed call_tmp[669969]))
      unknown call_tmp[669979] "expr temp" "maybe param" "maybe type" "temp"
      (669982 'move' call_tmp[669979](354390 'is_subtype' BaseAssociativeDom[382305](?) call_tmp[669974]))
      (568819 'move' tmp[568817](427278 call isTrue call_tmp[669979]))
      (568824 'move' tmp[568804](568821 '_paramFoldLogical' tmp[568805] tmp[568817]))
    }
    (748371 call chpl_statementLevelSymbol tmp[568804])
  }
  (355183 'used modules list'(145430 'use' ChapelArray[113684])(145432 'use' ChapelRange[64180])(145435 'use' ChapelLocks[187268])(145438 'use' ChapelHashtable[200405]))
}