AST dump for ChapelDistribution after pass normalize.
Module use list: ChapelArray ChapelRange ChapelLocks ChapelHashtable Sort 

{
  function chpl__init_ChapelDistribution[416022]() : void[4] "insert line file info" "module init"
  {
    (520440 return _void[55])
  }
  function BaseDist[145968].deinit[145498](arg _mt[145972]:_MT[238], arg this[145970]:BaseDist[145968]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519716 return _void[55])
  }
  function BaseDist[145968].remove[145505](arg _mt[145976]:_MT[238], arg this[145974]:BaseDist[145968]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519720] "RVV" "temp"
    unknown free_dist[145511] "dead at end of block" "insert auto destroy"
    (543558 'init var' free_dist[145511] 0)
    (145514 'end of statement')
    unknown call_tmp[667440] "expr temp" "maybe param" "maybe type" "temp"
    (667443 'move' call_tmp[667440](145518 call(385412 call (partial) dsiTrackDomains _mt[243] this[145974])))
    unknown call_tmp[667445] "expr temp" "maybe param" "maybe type" "temp"
    (667448 'move' call_tmp[667445](145591 call _cond_test call_tmp[667440]))
    if call_tmp[667445]
    {
      const tmp[145576] "const" "temp"
      unknown call_tmp[667450] "expr temp" "maybe param" "maybe type" "temp"
      (667453 'move' call_tmp[667450](145573 '_wide_get_locale' this[145974]))
      (145578 'move' tmp[145576](145574 'deref' call_tmp[667450]))
      {
        {
          unknown call_tmp[667455] "maybe param" "maybe type" "temp"
          (667458 'move' call_tmp[667455](145521 call - 1))
          unknown dom_count[145523] "dead at end of block" "insert auto destroy"
          (543560 'init var' dom_count[145523] call_tmp[667455])
          (145526 'end of statement')
          {
            {
              unknown call_tmp[667462] "expr temp" "maybe param" "maybe type" "temp"
              (667465 'move' call_tmp[667462](360489 call _domsLock _mt[243] this[145974]))
              (145533 call(145529 call (partial) lock _mt[243] call_tmp[667462]))
              (481368 'end of statement')
              unknown call_tmp[667471] "expr temp" "maybe param" "maybe type" "temp"
              (667474 'move' call_tmp[667471](385420 call _free_when_no_doms _mt[243] this[145974]))
              (145538 call = call_tmp[667471] 1)
              (481369 'end of statement')
              unknown call_tmp[667478] "expr temp" "maybe param" "maybe type" "temp"
              (667481 'move' call_tmp[667478](360494 call _doms _mt[243] this[145974]))
              unknown call_tmp[667485] "expr temp" "maybe param" "maybe type" "temp"
              (667488 'move' call_tmp[667485](145543 call size _mt[243] call_tmp[667478]))
              (145546 call = dom_count[145523] call_tmp[667485])
              (481370 'end of statement' dom_count[145523])
              unknown call_tmp[667492] "expr temp" "maybe param" "maybe type" "temp"
              (667495 'move' call_tmp[667492](360499 call _domsLock _mt[243] this[145974]))
              (145554 call(145550 call (partial) unlock _mt[243] call_tmp[667492]))
            }
            (145558 'local block')
          }
          unknown call_tmp[667499] "expr temp" "maybe param" "maybe type" "temp"
          (667502 'move' call_tmp[667499](145561 call == dom_count[145523] 0))
          unknown call_tmp[667504] "expr temp" "maybe param" "maybe type" "temp"
          (667507 'move' call_tmp[667504](145568 call _cond_test call_tmp[667499]))
          if call_tmp[667504]
          {
            (145565 call = free_dist[145511] 1)
            (481373 'end of statement' free_dist[145511])
          }
        }
        (145581 'on block' 0 tmp[145576])
      }
    }
    {
      (145587 call = free_dist[145511] 1)
      (481375 'end of statement' free_dist[145511])
    }
    unknown call_tmp[667509] "expr temp" "maybe param" "maybe type" "temp"
    (667512 'move' call_tmp[667509](145605 call _cond_test free_dist[145511]))
    if call_tmp[667509]
    {
      unknown call_tmp[667514] "expr temp" "maybe param" "maybe type" "temp"
      (667517 'move' call_tmp[667514](145599 call _to_unmanaged this[145974]))
      (519726 'move' ret[519720](519725 'coerce' call_tmp[667514] unmanaged BaseDist?[415497]))
      gotoReturn _end_remove[519718] _end_remove[519718]
    }
    {
      (519732 'move' ret[519720](519731 'coerce' nil[44] unmanaged BaseDist?[415497]))
      gotoReturn _end_remove[519718] _end_remove[519718]
    }
    label _end_remove[519718]
    (519722 return ret[519720])
  }
  { scopeless type
    unmanaged BaseDist?[415497]
  }
  function BaseDist[145968].remove_dom[145621](arg _mt[145980]:_MT[238], arg this[145978]:BaseDist[145968], arg x[145618]:unmanaged BaseDom[415443]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519738] "RVV" "temp"
    unknown call_tmp[667519] "maybe param" "maybe type" "temp"
    (667522 'move' call_tmp[667519](145625 call - 1))
    unknown count[145627] "dead at end of block" "insert auto destroy"
    (543562 'init var' count[145627] call_tmp[667519])
    (145630 'end of statement')
    const tmp[145696] "const" "temp"
    unknown call_tmp[667524] "expr temp" "maybe param" "maybe type" "temp"
    (667527 'move' call_tmp[667524](145693 '_wide_get_locale' this[145978]))
    (145698 'move' tmp[145696](145694 'deref' call_tmp[667524]))
    {
      {
        unknown call_tmp[667529] "maybe param" "maybe type" "temp"
        (667532 'move' call_tmp[667529](145634 call - 1))
        unknown cnt[145636] "dead at end of block" "insert auto destroy"
        (543564 'init var' cnt[145636] call_tmp[667529])
        (145639 'end of statement')
        {
          {
            unknown call_tmp[667536] "expr temp" "maybe param" "maybe type" "temp"
            (667539 'move' call_tmp[667536](360504 call _domsLock _mt[243] this[145978]))
            (145646 call(145642 call (partial) lock _mt[243] call_tmp[667536]))
            (481379 'end of statement')
            unknown call_tmp[667545] "expr temp" "maybe param" "maybe type" "temp"
            (667548 'move' call_tmp[667545](360509 call _doms _mt[243] this[145978]))
            (145655 call(145650 call (partial) remove _mt[243] call_tmp[667545]) x[145618])
            (481380 'end of statement')
            unknown call_tmp[667554] "expr temp" "maybe param" "maybe type" "temp"
            (667557 'move' call_tmp[667554](360514 call _doms _mt[243] this[145978]))
            unknown call_tmp[667561] "expr temp" "maybe param" "maybe type" "temp"
            (667564 'move' call_tmp[667561](145659 call size _mt[243] call_tmp[667554]))
            (145662 call = cnt[145636] call_tmp[667561])
            (481381 'end of statement' cnt[145636])
            unknown call_tmp[667568] "expr temp" "maybe param" "maybe type" "temp"
            (667571 'move' call_tmp[667568](385435 call _free_when_no_doms _mt[243] this[145978]))
            unknown call_tmp[667573] "expr temp" "maybe param" "maybe type" "temp"
            (667576 'move' call_tmp[667573](145666 call ! call_tmp[667568]))
            unknown call_tmp[667578] "expr temp" "maybe param" "maybe type" "temp"
            (667581 'move' call_tmp[667578](145673 call _cond_test call_tmp[667573]))
            if call_tmp[667578]
            {
              (145670 call += cnt[145636] 1)
              (481383 'end of statement' cnt[145636])
            }
            unknown call_tmp[667585] "expr temp" "maybe param" "maybe type" "temp"
            (667588 'move' call_tmp[667585](360519 call _domsLock _mt[243] this[145978]))
            (145683 call(145679 call (partial) unlock _mt[243] call_tmp[667585]))
          }
          (145687 'local block')
        }
        (145690 call = count[145627] cnt[145636])
        (481386 'end of statement' count[145627] cnt[145636])
      }
      (145701 'on block' 0 tmp[145696])
    }
    unknown call_tmp[667592] "expr temp" "maybe param" "maybe type" "temp"
    (667595 'move' call_tmp[667592](145706 call == count[145627] 0))
    (519744 'move' ret[519738](519743 'coerce' call_tmp[667592] bool[10]))
    gotoReturn _end_remove_dom[519736] _end_remove_dom[519736]
    (481389 'end of statement' count[145627])
    label _end_remove_dom[519736]
    (519740 return ret[519738])
  }
  { scopeless type
    bool[10]
  }
  function BaseDist[145968].add_dom[145720](arg _mt[145984]:_MT[238], arg this[145982]:BaseDist[145968], arg x[145717]:unmanaged BaseDom[415443]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[145749] "const" "temp"
    unknown call_tmp[667597] "expr temp" "maybe param" "maybe type" "temp"
    (667600 'move' call_tmp[667597](145746 '_wide_get_locale' this[145982]))
    (145751 'move' tmp[145749](145747 'deref' call_tmp[667597]))
    {
      {
        unknown call_tmp[667604] "expr temp" "maybe param" "maybe type" "temp"
        (667607 'move' call_tmp[667604](360524 call _domsLock _mt[243] this[145982]))
        (145728 call(145724 call (partial) lock _mt[243] call_tmp[667604]))
        (481391 'end of statement')
        unknown call_tmp[667613] "expr temp" "maybe param" "maybe type" "temp"
        (667616 'move' call_tmp[667613](360529 call _doms _mt[243] this[145982]))
        (145737 call(145732 call (partial) add _mt[243] call_tmp[667613]) x[145717])
        (481392 'end of statement')
        unknown call_tmp[667622] "expr temp" "maybe param" "maybe type" "temp"
        (667625 'move' call_tmp[667622](360534 call _domsLock _mt[243] this[145982]))
        (145744 call(145740 call (partial) unlock _mt[243] call_tmp[667622]))
      }
      (145754 'on block' 0 tmp[145749])
    }
    (519748 return _void[55])
  }
  function BaseDist[145968].dsiNewRectangularDom[145766](arg _mt[145988]:_MT[238], arg this[145986]:BaseDist[145968], param arg rank[145763]:int(64)[13], arg idxType[145768]:_any[178](?), param arg stridable[145771]:bool[10], arg inds[145774]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145795 call compilerError "rectangular domains not supported by this distribution")
    (519750 return _void[55])
  }
  function BaseDist[145968].dsiNewAssociativeDom[145804](arg _mt[145992]:_MT[238], arg this[145990]:BaseDist[145968], arg idxType[145802]:_any[178](?), param arg parSafe[145807]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145829 call compilerError "associative domains not supported by this distribution")
    (519752 return _void[55])
  }
  function BaseDist[145968].dsiNewSparseDom[145840](arg _mt[145996]:_MT[238], arg this[145994]:BaseDist[145968], param arg rank[145837]:int(64)[13], arg idxType[145842]:_any[178](?), arg dom[145845]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145867 call compilerError "sparse domains not supported by this distribution")
    (519754 return _void[55])
  }
  function BaseDist[145968].dsiSupportsPrivatization[145874](arg _mt[146000]:_MT[238], arg this[145998]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519758] "RVV" "param" "temp"
    (519763 'move' ret[519758](519762 'deref' 0))
    (519760 return ret[519758])
  }
  function BaseDist[145968].dsiRequiresPrivatization[145884](arg _mt[146004]:_MT[238], arg this[146002]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519767] "RVV" "param" "temp"
    (519772 'move' ret[519767](519771 'deref' 0))
    (519769 return ret[519767])
  }
  function BaseDist[145968].dsiDestroyDist[145894](arg _mt[146008]:_MT[238], arg this[146006]:BaseDist[145968]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519774 return _void[55])
  }
  function BaseDist[145968].dsiDisplayRepresentation[145901](arg _mt[146012]:_MT[238], arg this[146010]:BaseDist[145968]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145922 call writeln "<no way to display representation>")
    (519776 return _void[55])
  }
  function BaseDist[145968].trackDomains[145929](arg _mt[146016]:_MT[238], arg this[146014]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519780] "RVV" "param" "temp"
    (519785 'move' ret[519780](519784 'deref' 1))
    (519782 return ret[519780])
  }
  function BaseDist[145968].dsiTrackDomains[145939](arg _mt[146020]:_MT[238], arg this[146018]:BaseDist[145968]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519789] "RVV" "temp"
    (519794 'move' ret[519789](519793 'deref' 1))
    (519791 return ret[519789])
  }
  function BaseDist[145968].singleton[145949](arg _mt[146024]:_MT[238], arg this[146022]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519798] "RVV" "param" "temp"
    (519803 'move' ret[519798](519802 'deref' 0))
    (519800 return ret[519798])
  }
  function BaseDist[145968].dsiIsLayout[145959](arg _mt[146028]:_MT[238], arg this[146026]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519807] "RVV" "param" "temp"
    (519812 'move' ret[519807](519811 'deref' 0))
    (519809 return ret[519807])
  }
  type BaseDist[145968] val super[355692]:object[22] "super class" unknown _doms[145476](145475 call chpl__simpleSet[204962](?) unmanaged BaseDom[415443]) val _domsLock[145481]:chpl_LocalSpinlock[187432] chpl_LocalSpinlock[187432] val _free_when_no_doms[145486]:bool[10] bool[10] val pid[145492]:int(64)[13] nullPid[113718] int(64)[13]
  type unmanaged BaseDist[415506]
  type unmanaged BaseDist?[415497]
  type BaseDist?[415494](?)
  type BaseDist[382378](?)
  function BaseDom[146767].init[146064](arg _mt[146771]:_MT[238], arg this[146769]:BaseDom[146767]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461725] "temporary of super field" "temp"
    (461733 'move' super_tmp[461725](461726 '.v' this[146769] c"super"))
    (461729 call init _mt[243] super_tmp[461725])
    (481404 'end of statement')
    unknown tmp[461660] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492356] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[667629] "expr temp" "maybe param" "maybe type" "temp"
      (667632 'move' call_tmp[667629](461662 '.v' this[146769] c"super"))
      (492360 'move' call_type_tmp[492356](461665 'typeof' call_tmp[667629]))
    }
    (461666 'move' tmp[461660] call_type_tmp[492356])
    unknown call_tmp[667634] "maybe param" "maybe type" "temp"
    (667637 'move' call_tmp[667634](461671 'cast' tmp[461660] this[146769]))
    unknown chpl__thisAsParent[461668] "dead at end of block" "insert auto destroy" "temp"
    (543566 'init var' chpl__thisAsParent[461668] call_tmp[667634] tmp[461660])
    (461674 'setcid' chpl__thisAsParent[461668])
    (481405 'end of statement')
    unknown tmp[461677] "temp"
    unknown call_tmp[667639] "expr temp" "maybe param" "maybe type" "temp"
    (667642 'move' call_tmp[667639](461680 call chpl__simpleSet[204962](?) unmanaged BaseArr[415491]))
    (461682 'default init var' tmp[461677] call_tmp[667639])
    (461684 '.=' this[146769] c"_arrs" tmp[461677])
    (481406 'end of statement')
    val tmp[461688]:int(64)[13] "temp"
    (461691 'default init var' tmp[461688] int(64)[13])
    (461693 '.=' this[146769] c"_arrs_containing_dom" tmp[461688])
    (481407 'end of statement')
    val tmp[461697]:chpl_LocalSpinlock[187432] "temp"
    (461700 'default init var' tmp[461697] chpl_LocalSpinlock[187432])
    (461702 '.=' this[146769] c"_arrsLock" tmp[461697])
    (481408 'end of statement')
    val tmp[461706]:bool[10] "temp"
    (461709 'default init var' tmp[461706] bool[10])
    (461711 '.=' this[146769] c"_free_when_no_arrs" tmp[461706])
    (481409 'end of statement')
    unknown tmp[461716] "temp"
    (461719 'init var' tmp[461716] nullPid[113718] int(64)[13])
    (461721 'init field' this[146769] c"pid" tmp[461716])
    (481410 'end of statement')
    (461736 'setcid' this[146769])
    (519814 return _void[55])
  }
  function BaseDom[146767].deinit[146071](arg _mt[146775]:_MT[238], arg this[146773]:BaseDom[146767]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519816 return _void[55])
  }
  function BaseDom[146767].dsiMyDist[146078](arg _mt[146779]:_MT[238], arg this[146777]:BaseDom[146767]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519820] "RVV" "temp"
    (146101 call halt "internal error: dsiMyDist is not implemented")
    (481412 'end of statement')
    unknown ret[146106] "dead at end of block" "insert auto destroy" "unsafe"
    (543568 'default init var' ret[146106] unmanaged BaseDist[415506])
    (146109 'end of statement')
    (519826 'move' ret[519820](519825 'coerce' ret[146106] unmanaged BaseDist[415506]))
    gotoReturn _end_dsiMyDist[519818] _end_dsiMyDist[519818]
    (481413 'end of statement' ret[146106])
    label _end_dsiMyDist[519818]
    (519822 return ret[519820])
  }
  { scopeless type
    unmanaged BaseDist[415506]
  }
  function BaseDom[146767].remove[146118](arg _mt[146783]:_MT[238], arg this[146781]:BaseDom[146767]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519832] "RVV" "temp"
    unknown call_tmp[667646] "expr temp" "maybe param" "maybe type" "temp"
    (667649 'move' call_tmp[667646](146132 call(385458 call (partial) dsiMyDist _mt[243] this[146781])))
    unknown call_tmp[667653] "expr temp" "maybe param" "maybe type" "temp"
    (667656 'move' call_tmp[667653](146139 call(146135 call (partial) dsiTrackDomains _mt[243] call_tmp[667646])))
    unknown call_tmp[667660] "expr temp" "maybe param" "maybe type" "temp"
    (667663 'move' call_tmp[667660](146142 call(385464 call (partial) dsiLinksDistribution _mt[243] this[146781])))
    unknown call_tmp[667665] "expr temp" "maybe param" "maybe type" "temp"
    (667668 'move' call_tmp[667665](146143 call == call_tmp[667653] call_tmp[667660]))
    (146146 call assert call_tmp[667665])
    (481415 'end of statement')
    unknown ret_dom[146153] "dead at end of block" "insert auto destroy"
    (543570 'init var' ret_dom[146153] nil[44] unmanaged BaseDom?[415503])
    (146156 'end of statement')
    unknown ret_dist[146161] "dead at end of block" "insert auto destroy"
    (543572 'init var' ret_dist[146161] nil[44] unmanaged BaseDist?[415497])
    (146164 'end of statement')
    unknown call_tmp[667672] "maybe param" "maybe type" "temp"
    (667675 'move' call_tmp[667672](146167 call(385470 call (partial) dsiMyDist _mt[243] this[146781])))
    unknown dist[146168] "dead at end of block" "insert auto destroy"
    (543574 'init var' dist[146168] call_tmp[667672])
    (146171 'end of statement')
    unknown free_dom[146173] "dead at end of block" "insert auto destroy"
    (543576 'init var' free_dom[146173] 0)
    (146176 'end of statement')
    unknown remove_dist[146178] "dead at end of block" "insert auto destroy"
    (543578 'init var' remove_dist[146178] 0)
    (146181 'end of statement')
    const tmp[146266] "const" "temp"
    unknown call_tmp[667677] "expr temp" "maybe param" "maybe type" "temp"
    (667680 'move' call_tmp[667677](146263 '_wide_get_locale' this[146781]))
    (146268 'move' tmp[146266](146264 'deref' call_tmp[667677]))
    {
      {
        unknown arr_count[146184] "dead at end of block" "insert auto destroy"
        (543580 'init var' arr_count[146184] 0)
        (146187 'end of statement')
        {
          {
            unknown call_tmp[667684] "expr temp" "maybe param" "maybe type" "temp"
            (667687 'move' call_tmp[667684](360541 call _arrsLock _mt[243] this[146781]))
            (146194 call(146190 call (partial) lock _mt[243] call_tmp[667684]))
            (481416 'end of statement')
            unknown call_tmp[667693] "expr temp" "maybe param" "maybe type" "temp"
            (667696 'move' call_tmp[667693](360546 call _arrs _mt[243] this[146781]))
            unknown call_tmp[667700] "expr temp" "maybe param" "maybe type" "temp"
            (667703 'move' call_tmp[667700](146199 call size _mt[243] call_tmp[667693]))
            (146202 call = arr_count[146184] call_tmp[667700])
            (481417 'end of statement' arr_count[146184])
            unknown call_tmp[667707] "expr temp" "maybe param" "maybe type" "temp"
            (667710 'move' call_tmp[667707](385480 call _arrs_containing_dom _mt[243] this[146781]))
            (146207 call += arr_count[146184] call_tmp[667707])
            (481419 'end of statement' arr_count[146184])
            unknown call_tmp[667714] "expr temp" "maybe param" "maybe type" "temp"
            (667717 'move' call_tmp[667714](385485 call _free_when_no_arrs _mt[243] this[146781]))
            (146212 call = call_tmp[667714] 1)
            (481421 'end of statement')
            unknown call_tmp[667721] "expr temp" "maybe param" "maybe type" "temp"
            (667724 'move' call_tmp[667721](360551 call _arrsLock _mt[243] this[146781]))
            (146220 call(146216 call (partial) unlock _mt[243] call_tmp[667721]))
          }
          (146224 'local block')
        }
        unknown call_tmp[667728] "expr temp" "maybe param" "maybe type" "temp"
        (667731 'move' call_tmp[667728](146227 call == arr_count[146184] 0))
        unknown call_tmp[667733] "expr temp" "maybe param" "maybe type" "temp"
        (667736 'move' call_tmp[667733](146259 call _cond_test call_tmp[667728]))
        if call_tmp[667733]
        {
          (146231 call = free_dom[146173] 1)
          (481423 'end of statement' free_dom[146173])
          unknown call_tmp[667740] "expr temp" "maybe param" "maybe type" "temp"
          (667743 'move' call_tmp[667740](146237 call(385491 call (partial) dsiLinksDistribution _mt[243] this[146781])))
          unknown call_tmp[667745] "expr temp" "maybe param" "maybe type" "temp"
          (667748 'move' call_tmp[667745](146255 call _cond_test call_tmp[667740]))
          if call_tmp[667745]
          {
            unknown call_tmp[667752] "expr temp" "maybe param" "maybe type" "temp"
            (667755 'move' call_tmp[667752](146248 call _to_unmanaged this[146781]))
            unknown call_tmp[667757] "expr temp" "maybe param" "maybe type" "temp"
            (667760 'move' call_tmp[667757](146250 call(146242 call (partial) remove_dom _mt[243] dist[146168]) call_tmp[667752]))
            (146251 call = remove_dist[146178] call_tmp[667757])
            (481425 'end of statement' remove_dist[146178] dist[146168])
          }
        }
      }
      (146271 'on block' 0 tmp[146266])
    }
    unknown call_tmp[667762] "expr temp" "maybe param" "maybe type" "temp"
    (667765 'move' call_tmp[667762](146283 call _cond_test free_dom[146173]))
    if call_tmp[667762]
    {
      unknown call_tmp[667767] "expr temp" "maybe param" "maybe type" "temp"
      (667770 'move' call_tmp[667767](146279 call _to_unmanaged this[146781]))
      (146280 call = ret_dom[146153] call_tmp[667767])
      (481428 'end of statement' ret_dom[146153])
    }
    unknown call_tmp[667772] "expr temp" "maybe param" "maybe type" "temp"
    (667775 'move' call_tmp[667772](146294 call _cond_test remove_dist[146178]))
    if call_tmp[667772]
    {
      (146291 call = ret_dist[146161] dist[146168])
      (481430 'end of statement' ret_dist[146161] dist[146168])
    }
    unknown call_tmp[667777] "expr temp" "maybe param" "maybe type" "temp"
    (667780 'move' call_tmp[667777](146302 call _build_tuple ret_dom[146153] ret_dist[146161]))
    unknown call_tmp[667782] "expr temp" "maybe param" "maybe type" "temp"
    (667785 'move' call_tmp[667782](519837 call _build_tuple unmanaged BaseDom?[415503] unmanaged BaseDist?[415497]))
    (519841 'move' ret[519832](519840 'coerce' call_tmp[667777] call_tmp[667782]))
    gotoReturn _end_remove[519830] _end_remove[519830]
    (481433 'end of statement' ret_dom[146153] ret_dist[146161])
    label _end_remove[519830]
    (519834 return ret[519832])
  }
  { scopeless type
    (146127 call _build_tuple unmanaged BaseDom?[415503] unmanaged BaseDist?[415497])
  }
  function BaseDom[146767].remove_arr[146316](arg _mt[146787]:_MT[238], arg this[146785]:BaseDom[146767], arg x[146313]:unmanaged BaseArr[415491], param arg rmFromList[146319] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519847] "RVV" "temp"
    unknown call_tmp[667787] "maybe param" "maybe type" "temp"
    (667790 'move' call_tmp[667787](146324 call - 1))
    unknown count[146326] "dead at end of block" "insert auto destroy"
    (543582 'init var' count[146326] call_tmp[667787])
    (146329 'end of statement')
    const tmp[146412] "const" "temp"
    unknown call_tmp[667792] "expr temp" "maybe param" "maybe type" "temp"
    (667795 'move' call_tmp[667792](146409 '_wide_get_locale' this[146785]))
    (146414 'move' tmp[146412](146410 'deref' call_tmp[667792]))
    {
      {
        unknown call_tmp[667797] "maybe param" "maybe type" "temp"
        (667800 'move' call_tmp[667797](146333 call - 1))
        unknown cnt[146335] "dead at end of block" "insert auto destroy"
        (543584 'init var' cnt[146335] call_tmp[667797])
        (146338 'end of statement')
        {
          {
            unknown call_tmp[667804] "expr temp" "maybe param" "maybe type" "temp"
            (667807 'move' call_tmp[667804](360557 call _arrsLock _mt[243] this[146785]))
            (146345 call(146341 call (partial) lock _mt[243] call_tmp[667804]))
            (481436 'end of statement')
            unknown call_tmp[667811] "expr temp" "maybe param" "maybe type" "temp"
            (667814 'move' call_tmp[667811](146362 call _cond_test rmFromList[146319]))
            if call_tmp[667811]
            {
              unknown call_tmp[667818] "expr temp" "maybe param" "maybe type" "temp"
              (667821 'move' call_tmp[667818](360562 call _arrs _mt[243] this[146785]))
              (146355 call(146350 call (partial) remove _mt[243] call_tmp[667818]) x[146313])
            }
            {
              unknown call_tmp[667827] "expr temp" "maybe param" "maybe type" "temp"
              (667830 'move' call_tmp[667827](385510 call _arrs_containing_dom _mt[243] this[146785]))
              (146359 call -= call_tmp[667827] 1)
            }
            unknown call_tmp[667834] "expr temp" "maybe param" "maybe type" "temp"
            (667837 'move' call_tmp[667834](360567 call _arrs _mt[243] this[146785]))
            unknown call_tmp[667841] "expr temp" "maybe param" "maybe type" "temp"
            (667844 'move' call_tmp[667841](146370 call size _mt[243] call_tmp[667834]))
            (146373 call = cnt[146335] call_tmp[667841])
            (481439 'end of statement' cnt[146335])
            unknown call_tmp[667848] "expr temp" "maybe param" "maybe type" "temp"
            (667851 'move' call_tmp[667848](385517 call _arrs_containing_dom _mt[243] this[146785]))
            (146378 call += cnt[146335] call_tmp[667848])
            (481441 'end of statement' cnt[146335])
            unknown call_tmp[667855] "expr temp" "maybe param" "maybe type" "temp"
            (667858 'move' call_tmp[667855](385522 call _free_when_no_arrs _mt[243] this[146785]))
            unknown call_tmp[667860] "expr temp" "maybe param" "maybe type" "temp"
            (667863 'move' call_tmp[667860](146382 call ! call_tmp[667855]))
            unknown call_tmp[667865] "expr temp" "maybe param" "maybe type" "temp"
            (667868 'move' call_tmp[667865](146389 call _cond_test call_tmp[667860]))
            if call_tmp[667865]
            {
              (146386 call += cnt[146335] 1)
              (481443 'end of statement' cnt[146335])
            }
            unknown call_tmp[667872] "expr temp" "maybe param" "maybe type" "temp"
            (667875 'move' call_tmp[667872](360572 call _arrsLock _mt[243] this[146785]))
            (146399 call(146395 call (partial) unlock _mt[243] call_tmp[667872]))
          }
          (146403 'local block')
        }
        (146406 call = count[146326] cnt[146335])
        (481446 'end of statement' count[146326] cnt[146335])
      }
      (146417 'on block' 0 tmp[146412])
    }
    unknown call_tmp[667879] "expr temp" "maybe param" "maybe type" "temp"
    (667882 'move' call_tmp[667879](146422 call == count[146326] 0))
    (519853 'move' ret[519847](519852 'coerce' call_tmp[667879] bool[10]))
    gotoReturn _end_remove_arr[519845] _end_remove_arr[519845]
    (481449 'end of statement' count[146326])
    label _end_remove_arr[519845]
    (519849 return ret[519847])
  }
  { scopeless type
    bool[10]
  }
  function BaseDom[146767].add_arr[146436](arg _mt[146791]:_MT[238], arg this[146789]:BaseDom[146767], arg x[146433]:unmanaged BaseArr[415491], param arg locking[146439] :
  1 =
  1, param arg addToList[146443] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146497] "const" "temp"
    unknown call_tmp[667884] "expr temp" "maybe param" "maybe type" "temp"
    (667887 'move' call_tmp[667884](146494 '_wide_get_locale' this[146789]))
    (146499 'move' tmp[146497](146495 'deref' call_tmp[667884]))
    {
      {
        unknown call_tmp[667889] "expr temp" "maybe param" "maybe type" "temp"
        (667892 'move' call_tmp[667889](146455 call _cond_test locking[146439]))
        if call_tmp[667889]
        {
          unknown call_tmp[667896] "expr temp" "maybe param" "maybe type" "temp"
          (667899 'move' call_tmp[667896](360577 call _arrsLock _mt[243] this[146789]))
          (146453 call(146449 call (partial) lock _mt[243] call_tmp[667896]))
        }
        unknown call_tmp[667903] "expr temp" "maybe param" "maybe type" "temp"
        (667906 'move' call_tmp[667903](146475 call _cond_test addToList[146443]))
        if call_tmp[667903]
        {
          unknown call_tmp[667910] "expr temp" "maybe param" "maybe type" "temp"
          (667913 'move' call_tmp[667910](360582 call _arrs _mt[243] this[146789]))
          (146468 call(146463 call (partial) add _mt[243] call_tmp[667910]) x[146433])
        }
        {
          unknown call_tmp[667919] "expr temp" "maybe param" "maybe type" "temp"
          (667922 'move' call_tmp[667919](385536 call _arrs_containing_dom _mt[243] this[146789]))
          (146472 call += call_tmp[667919] 1)
        }
        unknown call_tmp[667924] "expr temp" "maybe param" "maybe type" "temp"
        (667927 'move' call_tmp[667924](146489 call _cond_test locking[146439]))
        if call_tmp[667924]
        {
          unknown call_tmp[667931] "expr temp" "maybe param" "maybe type" "temp"
          (667934 'move' call_tmp[667931](360587 call _arrsLock _mt[243] this[146789]))
          (146487 call(146483 call (partial) unlock _mt[243] call_tmp[667931]))
        }
      }
      (146502 'on block' 0 tmp[146497])
    }
    (519857 return _void[55])
  }
  function BaseDom[146767].remove_containing_arr[146515](arg _mt[146795]:_MT[238], arg this[146793]:BaseDom[146767], arg x[146512]:unmanaged BaseArr[415491]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519861] "RVV" "temp"
    unknown call_tmp[667938] "maybe param" "maybe type" "temp"
    (667941 'move' call_tmp[667938](146518 call - 1))
    unknown count[146520] "dead at end of block" "insert auto destroy"
    (543586 'init var' count[146520] call_tmp[667938])
    (146523 'end of statement')
    const tmp[146587] "const" "temp"
    unknown call_tmp[667943] "expr temp" "maybe param" "maybe type" "temp"
    (667946 'move' call_tmp[667943](146584 '_wide_get_locale' this[146793]))
    (146589 'move' tmp[146587](146585 'deref' call_tmp[667943]))
    {
      {
        unknown call_tmp[667948] "maybe param" "maybe type" "temp"
        (667951 'move' call_tmp[667948](146527 call - 1))
        unknown cnt[146529] "dead at end of block" "insert auto destroy"
        (543588 'init var' cnt[146529] call_tmp[667948])
        (146532 'end of statement')
        unknown call_tmp[667955] "expr temp" "maybe param" "maybe type" "temp"
        (667958 'move' call_tmp[667955](360592 call _arrsLock _mt[243] this[146793]))
        (146539 call(146535 call (partial) lock _mt[243] call_tmp[667955]))
        (481455 'end of statement')
        unknown call_tmp[667964] "expr temp" "maybe param" "maybe type" "temp"
        (667967 'move' call_tmp[667964](385544 call _arrs_containing_dom _mt[243] this[146793]))
        (146543 call -= call_tmp[667964] 1)
        (481456 'end of statement')
        unknown call_tmp[667971] "expr temp" "maybe param" "maybe type" "temp"
        (667974 'move' call_tmp[667971](360597 call _arrs _mt[243] this[146793]))
        unknown call_tmp[667978] "expr temp" "maybe param" "maybe type" "temp"
        (667981 'move' call_tmp[667978](146548 call size _mt[243] call_tmp[667971]))
        (146551 call = cnt[146529] call_tmp[667978])
        (481457 'end of statement' cnt[146529])
        unknown call_tmp[667985] "expr temp" "maybe param" "maybe type" "temp"
        (667988 'move' call_tmp[667985](385551 call _arrs_containing_dom _mt[243] this[146793]))
        (146556 call += cnt[146529] call_tmp[667985])
        (481459 'end of statement' cnt[146529])
        unknown call_tmp[667992] "expr temp" "maybe param" "maybe type" "temp"
        (667995 'move' call_tmp[667992](385556 call _free_when_no_arrs _mt[243] this[146793]))
        unknown call_tmp[667997] "expr temp" "maybe param" "maybe type" "temp"
        (668000 'move' call_tmp[667997](146560 call ! call_tmp[667992]))
        unknown call_tmp[668002] "expr temp" "maybe param" "maybe type" "temp"
        (668005 'move' call_tmp[668002](146567 call _cond_test call_tmp[667997]))
        if call_tmp[668002]
        {
          (146564 call += cnt[146529] 1)
          (481461 'end of statement' cnt[146529])
        }
        unknown call_tmp[668009] "expr temp" "maybe param" "maybe type" "temp"
        (668012 'move' call_tmp[668009](360602 call _arrsLock _mt[243] this[146793]))
        (146577 call(146573 call (partial) unlock _mt[243] call_tmp[668009]))
        (481463 'end of statement')
        (146581 call = count[146520] cnt[146529])
        (481464 'end of statement' count[146520] cnt[146529])
      }
      (146592 'on block' 0 tmp[146587])
    }
    unknown call_tmp[668016] "expr temp" "maybe param" "maybe type" "temp"
    (668019 'move' call_tmp[668016](146597 call == count[146520] 0))
    (519866 'move' ret[519861](519865 'deref' call_tmp[668016]))
    gotoReturn _end_remove_containing_arr[519859] _end_remove_containing_arr[519859]
    (481467 'end of statement' count[146520])
    label _end_remove_containing_arr[519859]
    (519863 return ret[519861])
  }
  function BaseDom[146767].add_containing_arr[146610](arg _mt[146799]:_MT[238], arg this[146797]:BaseDom[146767], arg x[146607]:unmanaged BaseArr[415491]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146636] "const" "temp"
    unknown call_tmp[668021] "expr temp" "maybe param" "maybe type" "temp"
    (668024 'move' call_tmp[668021](146633 '_wide_get_locale' this[146797]))
    (146638 'move' tmp[146636](146634 'deref' call_tmp[668021]))
    {
      {
        unknown call_tmp[668028] "expr temp" "maybe param" "maybe type" "temp"
        (668031 'move' call_tmp[668028](360607 call _arrsLock _mt[243] this[146797]))
        (146618 call(146614 call (partial) lock _mt[243] call_tmp[668028]))
        (481469 'end of statement')
        unknown call_tmp[668037] "expr temp" "maybe param" "maybe type" "temp"
        (668040 'move' call_tmp[668037](385567 call _arrs_containing_dom _mt[243] this[146797]))
        (146623 call += call_tmp[668037] 1)
        (481470 'end of statement')
        unknown call_tmp[668044] "expr temp" "maybe param" "maybe type" "temp"
        (668047 'move' call_tmp[668044](360612 call _arrsLock _mt[243] this[146797]))
        (146631 call(146627 call (partial) unlock _mt[243] call_tmp[668044]))
      }
      (146641 'on block' 0 tmp[146636])
    }
    (519870 return _void[55])
  }
  function BaseDom[146767].dsiSupportsPrivatization[146649](arg _mt[146803]:_MT[238], arg this[146801]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519874] "RVV" "param" "temp"
    (519879 'move' ret[519874](519878 'deref' 0))
    (519876 return ret[519874])
  }
  function BaseDom[146767].dsiRequiresPrivatization[146659](arg _mt[146807]:_MT[238], arg this[146805]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519883] "RVV" "param" "temp"
    (519888 'move' ret[519883](519887 'deref' 0))
    (519885 return ret[519883])
  }
  function BaseDom[146767].linksDistribution[146669](arg _mt[146811]:_MT[238], arg this[146809]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519892] "RVV" "param" "temp"
    (519897 'move' ret[519892](519896 'deref' 1))
    (519894 return ret[519892])
  }
  function BaseDom[146767].dsiLinksDistribution[146679](arg _mt[146815]:_MT[238], arg this[146813]:BaseDom[146767]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519901] "RVV" "temp"
    (519906 'move' ret[519901](519905 'deref' 1))
    (519903 return ret[519901])
  }
  function BaseDom[146767].dsiDestroyDom[146689](arg _mt[146819]:_MT[238], arg this[146817]:BaseDom[146767]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519908 return _void[55])
  }
  function BaseDom[146767].dsiDisplayRepresentation[146696](arg _mt[146823]:_MT[238], arg this[146821]:BaseDom[146767]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (146701 call writeln "<no way to display representation>")
    (519910 return _void[55])
  }
  function BaseDom[146767].dsiSupportsAutoLocalAccess[146708](arg _mt[146827]:_MT[238], arg this[146825]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519914] "RVV" "param" "temp"
    (519919 'move' ret[519914](519918 'deref' 0))
    (519916 return ret[519914])
  }
  function BaseDom[415338](?).isDefaultRectangular[146718](arg _mt[146831]:_MT[238], arg this[146829]:BaseDom[415338](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519923] "RVV" "param" "temp"
    (519928 'move' ret[519923](519927 'deref' 0))
    (519925 return ret[519923])
  }
  function BaseDom[146767].isDefaultRectangular[146728](arg _mt[146835]:_MT[238], arg this[146833]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519932] "RVV" "param" "temp"
    (519937 'move' ret[519932](519936 'deref' 0))
    (519934 return ret[519932])
  }
  function BaseDom[146767].isSliceDomainView[146738](arg _mt[146839]:_MT[238], arg this[146837]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519941] "RVV" "param" "temp"
    (519946 'move' ret[519941](519945 'deref' 0))
    (519943 return ret[519941])
  }
  function BaseDom[146767].isRankChangeDomainView[146748](arg _mt[146843]:_MT[238], arg this[146841]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519950] "RVV" "param" "temp"
    (519955 'move' ret[519950](519954 'deref' 0))
    (519952 return ret[519950])
  }
  function BaseDom[146767].isReindexDomainView[146758](arg _mt[146847]:_MT[238], arg this[146845]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519959] "RVV" "param" "temp"
    (519964 'move' ret[519959](519963 'deref' 0))
    (519961 return ret[519959])
  }
  type BaseDom[146767] val super[355696]:object[22] "super class" unknown _arrs[146037](146036 call chpl__simpleSet[204962](?) unmanaged BaseArr[415491]) val _arrs_containing_dom[146042]:int(64)[13] int(64)[13] val _arrsLock[146047]:chpl_LocalSpinlock[187432] chpl_LocalSpinlock[187432] val _free_when_no_arrs[146052]:bool[10] bool[10] val pid[146058]:int(64)[13] nullPid[113718] int(64)[13]
  type unmanaged BaseDom?[415503]
  type BaseDom?[415500](?)
  type unmanaged BaseDom[415443]
  type BaseDom[415338](?)
  type BaseDom[372783](?)
  function BaseRectangularDom[146935](?).getBaseArrType[146868](arg _mt[146939]:_MT[238], arg this[146937]:BaseRectangularDom[146935](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[519968] "RVV" "temp" "type variable"
    unknown call_tmp[668053] "expr temp" "maybe param" "maybe type" "temp"
    (668056 'move' call_tmp[668053](385576 call rank _mt[243] this[146937]))
    unknown call_tmp[668060] "expr temp" "maybe param" "maybe type" "temp"
    (668063 'move' call_tmp[668060](385581 call idxType _mt[243] this[146937]))
    unknown call_tmp[668067] "expr temp" "maybe param" "maybe type" "temp"
    (668070 'move' call_tmp[668067](385586 call stridable _mt[243] this[146937]))
    unknown call_tmp[668072] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (668075 'move' call_tmp[668072](747912 'new' BaseArrOverRectangularDom[385571](?)(rank = call_tmp[668053])(idxType = call_tmp[668060])(stridable = call_tmp[668067])(_chpl_manager = unmanaged[220](?))))
    unknown tmp[146882] "dead at end of block" "insert auto destroy"
    (543590 'init var' tmp[146882] call_tmp[668072])
    (146885 'end of statement')
    unknown call_tmp[668077] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (668080 'move' call_tmp[668077](146888 'typeof' tmp[146882]))
    (519973 'move' ret[519968](519972 'deref' call_tmp[668077]))
    gotoReturn _end_getBaseArrType[519966] _end_getBaseArrType[519966]
    (481483 'end of statement' tmp[146882])
    label _end_getBaseArrType[519966]
    (519970 return ret[519968])
  }
  function BaseRectangularDom[146935](?).deinit[146895](arg _mt[146943]:_MT[238], arg this[146941]:BaseRectangularDom[146935](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519977 return _void[55])
  }
  function BaseRectangularDom[146935](?).dsiAdd[146904](arg _mt[146947]:_MT[238], arg this[146945]:BaseRectangularDom[146935](?), in arg x[146902]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[519981] "RVV" "temp"
    (146909 call compilerError "Cannot add indices to a rectangular domain")
    (481485 'end of statement')
    (519986 'move' ret[519981](519985 'deref' 0))
    (519983 return ret[519981])
  }
  function BaseRectangularDom[146935](?).dsiRemove[146921](arg _mt[146951]:_MT[238], arg this[146949]:BaseRectangularDom[146935](?), arg x[146919]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[519990] "RVV" "temp"
    (146926 call compilerError "Cannot remove indices from a rectangular domain")
    (481487 'end of statement')
    (519995 'move' ret[519990](519994 'deref' 0))
    (519992 return ret[519990])
  }
  type BaseRectangularDom[146935](?) val super[355698]:BaseDom[146767] "super class" unknown rank[146854] "param" int(64)[13] unknown idxType[146858] "type variable" unknown stridable[146862] "param" bool[10]
  type BaseRectangularDom[382283](?)
  function BaseSparseDomImpl[148004](?).deinit[146970](arg _mt[148008]:_MT[238], arg this[148006]:BaseSparseDomImpl[148004](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519997 return _void[55])
  }
  function BaseSparseDomImpl[148004](?).dsiBulkAdd[146988](arg _mt[148012]:_MT[238], arg this[148010]:BaseSparseDomImpl[148004](?), arg inds[146985]:_array[133594](?), arg dataSorted[146991] :
  0 =
  0, arg isUnique[146995] :
  0 =
  0, arg preserveInds[146999] :
  1 =
  1, arg addOn[147003] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[520001] "RVV" "temp"
    unknown tmp[427127] "maybe param" "temp"
    (427138 'move' tmp[427127](147007 call ! dataSorted[146991]))
    unknown call_tmp[668082] "expr temp" "maybe param" "maybe type" "temp"
    (668085 'move' call_tmp[668082](427140 call _cond_invalid tmp[427127]))
    if call_tmp[668082]
    {
      (427143 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568536] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568537] "maybe param" "temp"
    unknown call_tmp[668087] "expr temp" "maybe param" "maybe type" "temp"
    (668090 'move' call_tmp[668087](427128 call isTrue tmp[427127]))
    (568542 'move' tmp[568537](568540 call _cond_test call_tmp[668087]))
    if tmp[568537]
    {
      unknown tmp[568544] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568546 'move' tmp[568544](427131 call isTrue preserveInds[146999]))
      (568551 'move' tmp[568536](568548 '_paramFoldLogical' tmp[568537] tmp[568544]))
    }
    {
      (568556 'move' tmp[568536](568553 '_paramFoldLogical' tmp[568537] 0))
    }
    unknown call_tmp[668092] "expr temp" "maybe param" "maybe type" "temp"
    (668095 'move' call_tmp[668092](147037 call _cond_test tmp[568536]))
    if call_tmp[668092]
    {
      unknown _inds[147013] "dead at end of block" "insert auto destroy"
      (543592 'init var' _inds[147013] inds[146985])
      (147016 'end of statement')
      unknown call_tmp[668099] "expr temp" "maybe param" "maybe type" "temp"
      (668102 'move' call_tmp[668099](147024 call(385607 call (partial) bulkAdd_help _mt[243] this[148010]) _inds[147013] dataSorted[146991] isUnique[146995] addOn[147003]))
      (520006 'move' ret[520001](520005 'deref' call_tmp[668099]))
      gotoReturn _end_dsiBulkAdd[519999] _end_dsiBulkAdd[519999]
      (481490 'end of statement' _inds[147013])
    }
    {
      unknown call_tmp[668106] "expr temp" "maybe param" "maybe type" "temp"
      (668109 'move' call_tmp[668106](147033 call(385615 call (partial) bulkAdd_help _mt[243] this[148010]) inds[146985] dataSorted[146991] isUnique[146995] addOn[147003]))
      (520011 'move' ret[520001](520010 'deref' call_tmp[668106]))
      gotoReturn _end_dsiBulkAdd[519999] _end_dsiBulkAdd[519999]
    }
    label _end_dsiBulkAdd[519999]
    (520003 return ret[520001])
  }
  where {
    unknown call_tmp[668113] "expr temp" "maybe param" "maybe type" "temp"
    (668116 'move' call_tmp[668113](385592 call rank _mt[243] this[148010]))
    unknown call_tmp[668120] "expr temp" "maybe param" "maybe type" "temp"
    (668123 'move' call_tmp[668120](385597 call idxType _mt[243] this[148010]))
    unknown call_tmp[668125] "expr temp" "maybe param" "maybe type" "temp"
    (668128 'move' call_tmp[668125](146980 call chpl__buildIndexType call_tmp[668113] call_tmp[668120]))
    unknown call_tmp[668132] "expr temp" "maybe param" "maybe type" "temp"
    (668135 'move' call_tmp[668132](461744 call eltType _mt[243] inds[146985]))
    unknown call_tmp[668137] "expr temp" "maybe param" "maybe type" "temp"
    (668140 'move' call_tmp[668137](461748 call == call_tmp[668125] call_tmp[668132]))
    (461742 call & 1 call_tmp[668137])
  }
  function BaseSparseDomImpl[148004](?).bulkAdd_help[147059](arg _mt[148016]:_MT[238], arg this[148014]:BaseSparseDomImpl[148004](?), arg inds[147056]:_array[133594](?), arg dataSorted[147062] :
  0 =
  0, arg isUnique[147066] :
  0 =
  0, arg addOn[147070] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[520017] "RVV" "temp"
    (147092 call halt "Helper function called on the BaseSparseDomImpl")
    (481493 'end of statement')
    unknown call_tmp[668142] "expr temp" "maybe param" "maybe type" "temp"
    (668145 'move' call_tmp[668142](147096 call - 1))
    (520022 'move' ret[520017](520021 'deref' call_tmp[668142]))
    (520019 return ret[520017])
  }
  where {
    unknown call_tmp[668149] "expr temp" "maybe param" "maybe type" "temp"
    (668152 'move' call_tmp[668149](385624 call rank _mt[243] this[148014]))
    unknown call_tmp[668156] "expr temp" "maybe param" "maybe type" "temp"
    (668159 'move' call_tmp[668156](385629 call idxType _mt[243] this[148014]))
    unknown call_tmp[668161] "expr temp" "maybe param" "maybe type" "temp"
    (668164 'move' call_tmp[668161](147052 call chpl__buildIndexType call_tmp[668149] call_tmp[668156]))
    unknown call_tmp[668168] "expr temp" "maybe param" "maybe type" "temp"
    (668171 'move' call_tmp[668168](461756 call eltType _mt[243] inds[147056]))
    unknown call_tmp[668173] "expr temp" "maybe param" "maybe type" "temp"
    (668176 'move' call_tmp[668173](461760 call == call_tmp[668161] call_tmp[668168]))
    (461754 call & 1 call_tmp[668173])
  }
  function BaseSparseDomImpl[148004](?)._grow[147108](arg _mt[148020]:_MT[238], arg this[148018]:BaseSparseDomImpl[148004](?), arg size[147105]:int(64)[13], arg factor[147111] :
  arrayAsVecGrowthFactor[113755] =
  arrayAsVecGrowthFactor[113755]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668180] "expr temp" "maybe param" "maybe type" "temp"
    (668183 'move' call_tmp[668180](360617 call nnzDom _mt[243] this[148018]))
    unknown call_tmp[668187] "maybe param" "maybe type" "temp"
    (668190 'move' call_tmp[668187](147115 call size _mt[243] call_tmp[668180]))
    const oldNNZDomSize[147118] "dead at end of block" "const" "insert auto destroy"
    (543594 'init var' oldNNZDomSize[147118] call_tmp[668187])
    (147121 'end of statement')
    unknown call_tmp[668192] "expr temp" "maybe param" "maybe type" "temp"
    (668195 'move' call_tmp[668192](147125 call > size[147105] oldNNZDomSize[147118]))
    unknown call_tmp[668197] "expr temp" "maybe param" "maybe type" "temp"
    (668200 'move' call_tmp[668197](147160 call _cond_test call_tmp[668192]))
    if call_tmp[668197]
    {
      const _newNNZDomSize[147142] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[568563] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568564] "maybe param" "temp"
      (568569 'move' tmp[568564](568567 call _cond_test oldNNZDomSize[147118]))
      if tmp[568564]
      {
        unknown tmp[568571] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668202] "expr temp" "maybe param" "maybe type" "temp"
        (668205 'move' call_tmp[668202](147131 call * factor[147111] oldNNZDomSize[147118]))
        unknown call_tmp[668207] "expr temp" "maybe param" "maybe type" "temp"
        (668210 'move' call_tmp[668207](147134 call ceil call_tmp[668202]))
        (568573 'move' tmp[568571](147136 call _cast int(64)[13] call_tmp[668207]))
        (568578 'move' tmp[568563](568575 '_paramFoldLogical' tmp[568564] tmp[568571]))
      }
      {
        (568583 'move' tmp[568563](568580 '_paramFoldLogical' tmp[568564] 1))
      }
      (543596 'init var' _newNNZDomSize[147142] tmp[568563])
      (147145 'end of statement' oldNNZDomSize[147118] oldNNZDomSize[147118])
      unknown call_tmp[668214] "expr temp" "maybe param" "maybe type" "temp"
      (668217 'move' call_tmp[668214](385641 call nnzDom _mt[243] this[148018]))
      unknown call_tmp[668219] "expr temp" "maybe param" "maybe type" "temp"
      (668222 'move' call_tmp[668219](147149 call chpl_build_low_bounded_range 1))
      unknown call_tmp[668224] "expr temp" "maybe param" "maybe type" "temp"
      (668227 'move' call_tmp[668224](147152 call # call_tmp[668219] _newNNZDomSize[147142]))
      unknown call_tmp[668229] "expr temp" "maybe param" "maybe type" "temp"
      (668232 'move' call_tmp[668229](147155 call chpl__buildDomainExpr call_tmp[668224]))
      (147157 call = call_tmp[668214] call_tmp[668229])
      (481497 'end of statement' _newNNZDomSize[147142])
    }
    (520024 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._shrink[147172](arg _mt[148024]:_MT[238], arg this[148022]:BaseSparseDomImpl[148004](?), arg size[147169]:int(64)[13], arg factor[147175] :
  arrayAsVecGrowthFactor[113755] =
  arrayAsVecGrowthFactor[113755]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668234] "expr temp" "maybe param" "maybe type" "temp"
    (668237 'move' call_tmp[668234](147180 call == size[147169] 0))
    unknown call_tmp[668239] "expr temp" "maybe param" "maybe type" "temp"
    (668242 'move' call_tmp[668239](147246 call _cond_test call_tmp[668234]))
    if call_tmp[668239]
    {
      unknown call_tmp[668246] "expr temp" "maybe param" "maybe type" "temp"
      (668249 'move' call_tmp[668246](385649 call nnzDom _mt[243] this[148022]))
      unknown call_tmp[668251] "expr temp" "maybe param" "maybe type" "temp"
      (668254 'move' call_tmp[668251](147185 call chpl_build_bounded_range 1 0))
      unknown call_tmp[668256] "expr temp" "maybe param" "maybe type" "temp"
      (668259 'move' call_tmp[668256](147188 call chpl__buildDomainExpr call_tmp[668251]))
      (147190 call = call_tmp[668246] call_tmp[668256])
    }
    {
      unknown call_tmp[668263] "expr temp" "maybe param" "maybe type" "temp"
      (668266 'move' call_tmp[668263](360622 call nnzDom _mt[243] this[148022]))
      unknown call_tmp[668270] "expr temp" "maybe param" "maybe type" "temp"
      (668273 'move' call_tmp[668270](147195 call size _mt[243] call_tmp[668263]))
      unknown call_tmp[668275] "expr temp" "maybe param" "maybe type" "temp"
      (668278 'move' call_tmp[668275](147200 call ** factor[147175] 2))
      unknown call_tmp[668280] "expr temp" "maybe param" "maybe type" "temp"
      (668283 'move' call_tmp[668280](147202 call / call_tmp[668270] call_tmp[668275]))
      unknown call_tmp[668285] "maybe param" "maybe type" "temp"
      (668288 'move' call_tmp[668285](147205 call _cast int(64)[13] call_tmp[668280]))
      const shrinkThreshold[147207] "dead at end of block" "const" "insert auto destroy"
      (543598 'init var' shrinkThreshold[147207] call_tmp[668285])
      (147210 'end of statement')
      unknown call_tmp[668290] "expr temp" "maybe param" "maybe type" "temp"
      (668293 'move' call_tmp[668290](147214 call < size[147169] shrinkThreshold[147207]))
      unknown call_tmp[668295] "expr temp" "maybe param" "maybe type" "temp"
      (668298 'move' call_tmp[668295](147242 call _cond_test call_tmp[668290]))
      if call_tmp[668295]
      {
        unknown call_tmp[668302] "expr temp" "maybe param" "maybe type" "temp"
        (668305 'move' call_tmp[668302](360627 call nnzDom _mt[243] this[148022]))
        unknown call_tmp[668309] "expr temp" "maybe param" "maybe type" "temp"
        (668312 'move' call_tmp[668309](147217 call size _mt[243] call_tmp[668302]))
        unknown call_tmp[668314] "expr temp" "maybe param" "maybe type" "temp"
        (668317 'move' call_tmp[668314](147221 call / call_tmp[668309] factor[147175]))
        unknown call_tmp[668319] "maybe param" "maybe type" "temp"
        (668322 'move' call_tmp[668319](147224 call _cast int(64)[13] call_tmp[668314]))
        const _newNNZDomSize[147226] "dead at end of block" "const" "insert auto destroy"
        (543600 'init var' _newNNZDomSize[147226] call_tmp[668319])
        (147229 'end of statement')
        unknown call_tmp[668326] "expr temp" "maybe param" "maybe type" "temp"
        (668329 'move' call_tmp[668326](385658 call nnzDom _mt[243] this[148022]))
        unknown call_tmp[668331] "expr temp" "maybe param" "maybe type" "temp"
        (668334 'move' call_tmp[668331](147234 call chpl_build_bounded_range 1 _newNNZDomSize[147226]))
        unknown call_tmp[668336] "expr temp" "maybe param" "maybe type" "temp"
        (668339 'move' call_tmp[668336](147237 call chpl__buildDomainExpr call_tmp[668331]))
        (147239 call = call_tmp[668326] call_tmp[668336])
        (481500 'end of statement' _newNNZDomSize[147226])
      }
    }
    (520026 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._bulkGrow[147255](arg _mt[148028]:_MT[238], arg this[148026]:BaseSparseDomImpl[148004](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668343] "maybe param" "maybe type" "temp"
    (668346 'move' call_tmp[668343](147259 call(385665 call (partial) getNNZ _mt[243] this[148026])))
    const nnz[147260] "dead at end of block" "const" "insert auto destroy"
    (543602 'init var' nnz[147260] call_tmp[668343])
    (147263 'end of statement')
    unknown call_tmp[668350] "expr temp" "maybe param" "maybe type" "temp"
    (668353 'move' call_tmp[668350](360632 call nnzDom _mt[243] this[148026]))
    unknown call_tmp[668357] "expr temp" "maybe param" "maybe type" "temp"
    (668360 'move' call_tmp[668357](147267 call size _mt[243] call_tmp[668350]))
    unknown call_tmp[668362] "expr temp" "maybe param" "maybe type" "temp"
    (668365 'move' call_tmp[668362](147270 call > nnz[147260] call_tmp[668357]))
    unknown call_tmp[668367] "expr temp" "maybe param" "maybe type" "temp"
    (668370 'move' call_tmp[668367](147303 call _cond_test call_tmp[668362]))
    if call_tmp[668367]
    {
      unknown call_tmp[668372] "expr temp" "maybe param" "maybe type" "temp"
      (668375 'move' call_tmp[668372](147276 call log2 nnz[147260]))
      unknown call_tmp[668377] "expr temp" "maybe param" "maybe type" "temp"
      (668380 'move' call_tmp[668377](147280 call + call_tmp[668372] 1.0))
      unknown call_tmp[668382] "expr temp" "maybe param" "maybe type" "temp"
      (668385 'move' call_tmp[668382](147283 call exp2 call_tmp[668377]))
      unknown call_tmp[668387] "maybe param" "maybe type" "temp"
      (668390 'move' call_tmp[668387](147285 call _cast int(64)[13] call_tmp[668382]))
      const _newNNZDomSize[147287] "dead at end of block" "const" "insert auto destroy"
      (543604 'init var' _newNNZDomSize[147287] call_tmp[668387])
      (147290 'end of statement' nnz[147260])
      unknown call_tmp[668394] "expr temp" "maybe param" "maybe type" "temp"
      (668397 'move' call_tmp[668394](385672 call nnzDom _mt[243] this[148026]))
      unknown call_tmp[668399] "expr temp" "maybe param" "maybe type" "temp"
      (668402 'move' call_tmp[668399](147295 call chpl_build_bounded_range 1 _newNNZDomSize[147287]))
      unknown call_tmp[668404] "expr temp" "maybe param" "maybe type" "temp"
      (668407 'move' call_tmp[668404](147298 call chpl__buildDomainExpr call_tmp[668399]))
      (147300 call = call_tmp[668394] call_tmp[668404])
      (481503 'end of statement' _newNNZDomSize[147287])
    }
    (520028 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._countDuplicates[147313](arg _mt[148032]:_MT[238], arg this[148030]:BaseSparseDomImpl[148004](?), arg arr[147311]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[520032] "RVV" "temp"
    unknown call_tmp[668409] "maybe param" "maybe type" "temp"
    (668412 'move' call_tmp[668409](147320 call - 1))
    unknown dupCount[147322] "dead at end of block" "insert auto destroy"
    (543606 'init var' dupCount[147322] call_tmp[668409])
    (147325 'end of statement')
    unknown call_tmp[668416] "expr temp" "maybe param" "maybe type" "temp"
    (668419 'move' call_tmp[668416](147329 call _dom _mt[243] arr[147311]))
    unknown call_tmp[668423] "expr temp" "maybe param" "maybe type" "temp"
    (668426 'move' call_tmp[668423](147332 call low _mt[243] call_tmp[668416]))
    unknown call_tmp[668428] "maybe param" "maybe type" "temp"
    (668431 'move' call_tmp[668428](147336 call arr[147311] call_tmp[668423]))
    unknown prev[147337] "dead at end of block" "insert auto destroy"
    (543608 'init var' prev[147337] call_tmp[668428])
    (147340 'end of statement')
    {
      unknown _indexOfInterest[147366] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147367] "expr temp" "temp"
      (147376 'move' _iterator[147367](147374 call _getIterator arr[147311]))
      Defer
      {
        {
          (147392 call _freeIterator _iterator[147367])
        }
      }
      { scopeless type
        (147381 'move' _indexOfInterest[147366](147378 call iteratorIndex _iterator[147367]))
      }
      ForLoop[147368]
      {
        unknown a[147385] "index var" "insert auto destroy"
        (481506 'end of statement')
        (147387 'move' a[147385] _indexOfInterest[147366])
        (481507 'end of statement' a[147385])
        {
          unknown call_tmp[668433] "expr temp" "maybe param" "maybe type" "temp"
          (668436 'move' call_tmp[668433](147345 call == a[147385] prev[147337]))
          unknown call_tmp[668438] "expr temp" "maybe param" "maybe type" "temp"
          (668441 'move' call_tmp[668438](147357 call _cond_test call_tmp[668433]))
          if call_tmp[668438]
          {
            (147349 call += dupCount[147322] 1)
            (481509 'end of statement' dupCount[147322])
          }
          {
            (147354 call = prev[147337] a[147385])
            (481511 'end of statement' prev[147337] a[147385])
          }
          {
          }
        }
        label _continueLabel[147371]
        _indexOfInterest[147366]
        _iterator[147367]
      }
      label _breakLabel[147372]
    }
    (520037 'move' ret[520032](520036 'deref' dupCount[147322]))
    gotoReturn _end__countDuplicates[520030] _end__countDuplicates[520030]
    (481514 'end of statement' dupCount[147322])
    label _end__countDuplicates[520030]
    (520034 return ret[520032])
  }
  where {
    (147318 call isArray arr[147311])
  }
  function BaseSparseDomImpl[148004](?).bulkAdd_prepareInds[147409](arg _mt[148036]:_MT[238], arg this[148034]:BaseSparseDomImpl[148004](?), arg inds[147407]:_any[178](?), arg dataSorted[147411]:_any[178](?), arg isUnique[147413]:_any[178](?), arg cmp[147415]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668443] "expr temp" "maybe param" "maybe type" "temp"
    (668446 'move' call_tmp[668443](147422 call ! dataSorted[147411]))
    unknown call_tmp[668448] "expr temp" "maybe param" "maybe type" "temp"
    (668451 'move' call_tmp[668448](147431 call _cond_test call_tmp[668443]))
    if call_tmp[668448]
    {
      (147429 call sort inds[147407](comparator = cmp[147415]))
    }
    unknown call_tmp[668453] "expr temp" "maybe param" "maybe type" "temp"
    (668456 'move' call_tmp[668453](147645 call _cond_test 1))
    if call_tmp[668453]
    {
      unknown tmp[427148] "maybe param" "temp"
      (427159 'move' tmp[427148] dataSorted[147411])
      unknown call_tmp[668458] "expr temp" "maybe param" "maybe type" "temp"
      (668461 'move' call_tmp[668458](427161 call _cond_invalid tmp[427148]))
      if call_tmp[668458]
      {
        (427164 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[568590] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568591] "maybe param" "temp"
      unknown call_tmp[668463] "expr temp" "maybe param" "maybe type" "temp"
      (668466 'move' call_tmp[668463](427149 call isTrue tmp[427148]))
      (568596 'move' tmp[568591](568594 call _cond_test call_tmp[668463]))
      if tmp[568591]
      {
        unknown tmp[568598] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668468] "expr temp" "maybe param" "maybe type" "temp"
        (668471 'move' call_tmp[668468](147443 call isSorted inds[147407](comparator = cmp[147415])))
        unknown call_tmp[668473] "expr temp" "maybe param" "maybe type" "temp"
        (668476 'move' call_tmp[668473](147444 call ! call_tmp[668468]))
        (568600 'move' tmp[568598](427152 call isTrue call_tmp[668473]))
        (568605 'move' tmp[568590](568602 '_paramFoldLogical' tmp[568591] tmp[568598]))
      }
      {
        (568610 'move' tmp[568590](568607 '_paramFoldLogical' tmp[568591] 0))
      }
      unknown call_tmp[668478] "expr temp" "maybe param" "maybe type" "temp"
      (668481 'move' call_tmp[668478](147471 call _cond_test tmp[568590]))
      if call_tmp[668478]
      {
        (147469 call halt "bulkAdd: Data not sorted, call the function with \n              dataSorted=false")
      }
      unknown call_tmp[668483] "expr temp" "maybe param" "maybe type" "temp"
      (668486 'move' call_tmp[668483](147601 call _cond_test isUnique[147413]))
      if call_tmp[668483]
      {
        unknown call_tmp[668490] "expr temp" "maybe param" "maybe type" "temp"
        (668493 'move' call_tmp[668490](147479 call _dom _mt[243] inds[147407]))
        unknown call_tmp[668497] "maybe param" "maybe type" "temp"
        (668500 'move' call_tmp[668497](147482 call low _mt[243] call_tmp[668490]))
        const indsStart[147485] "dead at end of block" "const" "insert auto destroy"
        (543610 'init var' indsStart[147485] call_tmp[668497])
        (147488 'end of statement')
        unknown call_tmp[668504] "expr temp" "maybe param" "maybe type" "temp"
        (668507 'move' call_tmp[668504](147491 call _dom _mt[243] inds[147407]))
        unknown call_tmp[668511] "maybe param" "maybe type" "temp"
        (668514 'move' call_tmp[668511](147494 call high _mt[243] call_tmp[668504]))
        const indsEnd[147497] "dead at end of block" "const" "insert auto destroy"
        (543612 'init var' indsEnd[147497] call_tmp[668511])
        (147500 'end of statement')
        unknown call_tmp[668516] "maybe param" "maybe type" "temp"
        (668519 'move' call_tmp[668516](147504 call inds[147407] indsStart[147485]))
        unknown lastInd[147505] "dead at end of block" "insert auto destroy"
        (543614 'init var' lastInd[147505] call_tmp[668516])
        (147508 'end of statement' indsStart[147485])
        {
          unknown _indexOfInterest[147560] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[147561] "expr temp" "temp"
          unknown call_tmp[668521] "expr temp" "maybe param" "maybe type" "temp"
          (668524 'move' call_tmp[668521](147574 call + indsStart[147485] 1))
          unknown call_tmp[668526] "expr temp" "maybe param" "maybe type" "temp"
          (668529 'move' call_tmp[668526](147578 call chpl_direct_range_iter call_tmp[668521] indsEnd[147497] 1))
          (147570 'move' _iterator[147561](147568 call _getIterator call_tmp[668526]))
          Defer
          {
            {
              (147594 call _freeIterator _iterator[147561])
            }
          }
          { scopeless type
            (147583 'move' _indexOfInterest[147560](147580 call iteratorIndex _iterator[147561]))
          }
          ForLoop[147562]
          {
            unknown i[147587] "index var" "insert auto destroy"
            (481521 'end of statement')
            (147589 'move' i[147587] _indexOfInterest[147560])
            (481522 'end of statement' i[147587])
            {
              unknown call_tmp[668531] "expr temp" "maybe param" "maybe type" "temp"
              (668534 'move' call_tmp[668531](147520 call inds[147407] i[147587]))
              unknown call_tmp[668536] "expr temp" "maybe param" "maybe type" "temp"
              (668539 'move' call_tmp[668536](147522 call == call_tmp[668531] lastInd[147505]))
              unknown call_tmp[668541] "expr temp" "maybe param" "maybe type" "temp"
              (668544 'move' call_tmp[668541](147553 call _cond_test call_tmp[668536]))
              if call_tmp[668541]
              {
                (147543 call halt "bulkAdd: There are duplicates, call the function \n                  with isUnique=false")
              }
              {
                unknown call_tmp[668546] "expr temp" "maybe param" "maybe type" "temp"
                (668549 'move' call_tmp[668546](147549 call inds[147407] i[147587]))
                (147550 call = lastInd[147505] call_tmp[668546])
                (481525 'end of statement' lastInd[147505] i[147587])
              }
            }
            label _continueLabel[147565]
            _indexOfInterest[147560]
            _iterator[147561]
          }
          label _breakLabel[147566]
        }
      }
      {
        unknown _indexOfInterest[147612] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147613] "expr temp" "temp"
        (147622 'move' _iterator[147613](147620 call _getIterator inds[147407]))
        Defer
        {
          {
            (147638 call _freeIterator _iterator[147613])
          }
        }
        { scopeless type
          (147627 'move' _indexOfInterest[147612](147624 call iteratorIndex _iterator[147613]))
        }
        ForLoop[147614]
        {
          unknown i[147631] "index var" "insert auto destroy"
          (481529 'end of statement')
          (147633 'move' i[147631] _indexOfInterest[147612])
          (481530 'end of statement' i[147631])
          (147610 call(385705 call (partial) boundsCheck _mt[243] this[148034]) i[147631])
          (481532 'end of statement' i[147631])
          label _continueLabel[147617]
          _indexOfInterest[147612]
          _iterator[147613]
        }
        label _breakLabel[147618]
      }
    }
    (520041 return _void[55])
    (355171 'used modules list'(147418 'use' Sort[267987]))
  }
  function BaseSparseDomImpl[148004](?).__getActualInsertPts[147655](arg _mt[148040]:_MT[238], arg this[148038]:BaseSparseDomImpl[148004](?), arg d[147653]:_any[178](?), arg inds[147657]:_any[178](?), arg isUnique[147659]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520045] "RVV" "temp"
    unknown indivInsertPts[147671] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668555] "expr temp" "maybe param" "maybe type" "temp"
    (668558 'move' call_tmp[668555](147662 call _dom _mt[243] inds[147657]))
    unknown call_tmp[668560] "expr temp" "maybe param" "maybe type" "temp"
    (668563 'move' call_tmp[668560](147667 call chpl__ensureDomainExpr call_tmp[668555]))
    unknown call_tmp[668565] "expr temp" "maybe param" "maybe type" "temp"
    (668568 'move' call_tmp[668565](147669 call chpl__buildArrayRuntimeType call_tmp[668560] int(64)[13]))
    (543616 'default init var' indivInsertPts[147671] call_tmp[668565])
    (147674 'end of statement')
    unknown actualInsertPts[147686] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668572] "expr temp" "maybe param" "maybe type" "temp"
    (668575 'move' call_tmp[668572](147677 call _dom _mt[243] inds[147657]))
    unknown call_tmp[668577] "expr temp" "maybe param" "maybe type" "temp"
    (668580 'move' call_tmp[668577](147682 call chpl__ensureDomainExpr call_tmp[668572]))
    unknown call_tmp[668582] "expr temp" "maybe param" "maybe type" "temp"
    (668585 'move' call_tmp[668582](147684 call chpl__buildArrayRuntimeType call_tmp[668577] int(64)[13]))
    (543618 'default init var' actualInsertPts[147686] call_tmp[668582])
    (147689 'end of statement')
    unknown call_tmp[668587] "expr temp" "maybe param" "maybe type" "temp"
    (668590 'move' call_tmp[668587](147691 call ! isUnique[147659]))
    unknown call_tmp[668592] "expr temp" "maybe param" "maybe type" "temp"
    (668595 'move' call_tmp[668592](147795 call _cond_test call_tmp[668587]))
    if call_tmp[668592]
    {
      unknown call_tmp[668599] "expr temp" "maybe param" "maybe type" "temp"
      (668602 'move' call_tmp[668599](147695 call _dom _mt[243] inds[147657]))
      unknown call_tmp[668606] "expr temp" "maybe param" "maybe type" "temp"
      (668609 'move' call_tmp[668606](147698 call low _mt[243] call_tmp[668599]))
      unknown call_tmp[668611] "expr temp" "maybe param" "maybe type" "temp"
      (668614 'move' call_tmp[668611](147702 call inds[147657] call_tmp[668606]))
      unknown call_tmp[668616] "maybe param" "maybe type" "temp"
      (668619 'move' call_tmp[668616](147704 call + call_tmp[668611] 1))
      unknown lastInd[147706] "dead at end of block" "insert auto destroy"
      (543620 'init var' lastInd[147706] call_tmp[668616])
      (147709 'end of statement')
      {
        unknown _indexOfInterest[147743] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147744] "expr temp" "temp"
        unknown call_tmp[668621] "expr temp" "maybe param" "maybe type" "temp"
        (668624 'move' call_tmp[668621](147753 call _getIterator inds[147657]))
        unknown call_tmp[668626] "expr temp" "maybe param" "maybe type" "temp"
        (668629 'move' call_tmp[668626](147756 call _getIterator indivInsertPts[147671]))
        (147758 'move' _iterator[147744](147719 call _build_tuple call_tmp[668621] call_tmp[668626]))
        Defer
        {
          {
            (147788 call _freeIterator _iterator[147744])
          }
        }
        { scopeless type
          (147763 'move' _indexOfInterest[147743](147760 call iteratorIndex _iterator[147744]))
        }
        ForLoop[147745]
        {
          (147768 call _check_tuple_var_decl _indexOfInterest[147743] 2)
          (481535 'end of statement')
          unknown i[147774] "index var" "insert auto destroy"
          (481536 'end of statement')
          (147776 'move' i[147774](147772 call _indexOfInterest[147743] 0))
          (481537 'end of statement' i[147774])
          unknown p[147781] "index var" "insert auto destroy"
          (481539 'end of statement')
          (147783 'move' p[147781](147779 call _indexOfInterest[147743] 1))
          (481540 'end of statement' p[147781])
          {
            unknown call_tmp[668631] "expr temp" "maybe param" "maybe type" "temp"
            (668634 'move' call_tmp[668631](147722 call == i[147774] lastInd[147706]))
            unknown call_tmp[668636] "expr temp" "maybe param" "maybe type" "temp"
            (668639 'move' call_tmp[668636](147736 call _cond_test call_tmp[668631]))
            if call_tmp[668636]
            {
              unknown call_tmp[668641] "expr temp" "maybe param" "maybe type" "temp"
              (668644 'move' call_tmp[668641](147726 call - 1))
              (147728 call = p[147781] call_tmp[668641])
              (481542 'end of statement' p[147781])
            }
            {
              (147733 call = lastInd[147706] i[147774])
              (481544 'end of statement' lastInd[147706] i[147774])
            }
          }
          label _continueLabel[147748]
          _indexOfInterest[147743]
          _iterator[147744]
        }
        label _breakLabel[147749]
      }
    }
    Forall {
      induction variables:
        
        unknown i[147863] "index var" "insert auto destroy"
        
        unknown p[147865] "index var" "insert auto destroy"
      iterated expressions:
        inds[147657]
        indivInsertPts[147671]
      shadow variables:
      other variables
        forall body
      {
        unknown tmp[427169] "maybe param" "temp"
        (427180 'move' tmp[427169] isUnique[147659])
        unknown call_tmp[668646] "expr temp" "maybe param" "maybe type" "temp"
        (668649 'move' call_tmp[668646](427182 call _cond_invalid tmp[427169]))
        if call_tmp[668646]
        {
          (427185 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[568617] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568618] "maybe param" "temp"
        unknown call_tmp[668651] "expr temp" "maybe param" "maybe type" "temp"
        (668654 'move' call_tmp[668651](427170 call isTrue tmp[427169]))
        (568623 'move' tmp[568618](568621 call _cond_test call_tmp[668651]))
        if tmp[568618]
        {
          (568628 'move' tmp[568617](568625 '_paramFoldLogical' tmp[568618] 1))
        }
        {
          unknown tmp[568630] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[668656] "expr temp" "maybe param" "maybe type" "temp"
          (668659 'move' call_tmp[668656](147811 call - 1))
          unknown call_tmp[668661] "expr temp" "maybe param" "maybe type" "temp"
          (668664 'move' call_tmp[668661](147813 call != p[147865] call_tmp[668656]))
          (568632 'move' tmp[568630](427174 call isTrue call_tmp[668661]))
          (568637 'move' tmp[568617](568634 '_paramFoldLogical' tmp[568618] tmp[568630]))
        }
        unknown call_tmp[668666] "expr temp" "maybe param" "maybe type" "temp"
        (668669 'move' call_tmp[668666](147857 call _cond_test tmp[568617]))
        if call_tmp[668666]
        {
          unknown call_tmp[668673] "maybe param" "maybe type" "temp"
          (668676 'move' call_tmp[668673](147830 call(147825 call (partial) find _mt[243] d[147653]) i[147863]))
          const tmp[147831] "dead at end of block" "const" "insert auto destroy" "temp"
          (543622 'init var' tmp[147831] call_tmp[668673])
          (147838 call _check_tuple_var_decl tmp[147831] 2)
          (481548 'end of statement')
          unknown call_tmp[668678] "maybe param" "maybe type" "temp"
          (668681 'move' call_tmp[668678](147832 call tmp[147831] 0))
          const found[147817] "dead at end of block" "const" "insert auto destroy"
          (543624 'init var' found[147817] call_tmp[668678])
          unknown call_tmp[668683] "maybe param" "maybe type" "temp"
          (668686 'move' call_tmp[668683](147835 call tmp[147831] 1))
          const insertPt[147819] "dead at end of block" "const" "insert auto destroy"
          (543626 'init var' insertPt[147819] call_tmp[668683])
          (147843 'end of statement')
          unknown tmp[568644] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568645] "maybe param" "temp"
          (568650 'move' tmp[568645](568648 call _cond_test found[147817]))
          if tmp[568645]
          {
            unknown tmp[568652] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (568654 'move' tmp[568652](147848 call - 1))
            (568659 'move' tmp[568644](568656 '_paramFoldLogical' tmp[568645] tmp[568652]))
          }
          {
            (568664 'move' tmp[568644](568661 '_paramFoldLogical' tmp[568645] insertPt[147819]))
          }
          (147854 call = p[147865] tmp[568644])
          (481549 'end of statement' p[147865] found[147817] insertPt[147819])
        }
      }
    }
    unknown actualAddCnt[147870] "dead at end of block" "insert auto destroy"
    (543628 'init var' actualAddCnt[147870] 0)
    (147873 'end of statement')
    {
      unknown _indexOfInterest[147914] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147915] "expr temp" "temp"
      unknown call_tmp[668688] "expr temp" "maybe param" "maybe type" "temp"
      (668691 'move' call_tmp[668688](147924 call _getIterator indivInsertPts[147671]))
      unknown call_tmp[668693] "expr temp" "maybe param" "maybe type" "temp"
      (668696 'move' call_tmp[668693](147927 call _getIterator actualInsertPts[147686]))
      (147929 'move' _iterator[147915](147882 call _build_tuple call_tmp[668688] call_tmp[668693]))
      Defer
      {
        {
          (147959 call _freeIterator _iterator[147915])
        }
      }
      { scopeless type
        (147934 'move' _indexOfInterest[147914](147931 call iteratorIndex _iterator[147915]))
      }
      ForLoop[147916]
      {
        (147939 call _check_tuple_var_decl _indexOfInterest[147914] 2)
        (481554 'end of statement')
        unknown ip[147945] "index var" "insert auto destroy"
        (481555 'end of statement')
        (147947 'move' ip[147945](147943 call _indexOfInterest[147914] 0))
        (481556 'end of statement' ip[147945])
        unknown ap[147952] "index var" "insert auto destroy"
        (481558 'end of statement')
        (147954 'move' ap[147952](147950 call _indexOfInterest[147914] 1))
        (481559 'end of statement' ap[147952])
        {
          unknown call_tmp[668698] "expr temp" "maybe param" "maybe type" "temp"
          (668701 'move' call_tmp[668698](147885 call - 1))
          unknown call_tmp[668703] "expr temp" "maybe param" "maybe type" "temp"
          (668706 'move' call_tmp[668703](147887 call != ip[147945] call_tmp[668698]))
          unknown call_tmp[668708] "expr temp" "maybe param" "maybe type" "temp"
          (668711 'move' call_tmp[668708](147908 call _cond_test call_tmp[668703]))
          if call_tmp[668708]
          {
            unknown call_tmp[668713] "expr temp" "maybe param" "maybe type" "temp"
            (668716 'move' call_tmp[668713](147892 call + ip[147945] actualAddCnt[147870]))
            (147894 call = ap[147952] call_tmp[668713])
            (481561 'end of statement' ap[147952] ip[147945] actualAddCnt[147870])
            (147900 call += actualAddCnt[147870] 1)
            (481565 'end of statement' actualAddCnt[147870])
          }
          {
            (147905 call = ap[147952] ip[147945])
            (481567 'end of statement' ap[147952] ip[147945])
          }
        }
        label _continueLabel[147919]
        _indexOfInterest[147914]
        _iterator[147915]
      }
      label _breakLabel[147920]
    }
    unknown call_tmp[668718] "expr temp" "maybe param" "maybe type" "temp"
    (668721 'move' call_tmp[668718](147969 call _build_tuple actualInsertPts[147686] actualAddCnt[147870]))
    (520050 'move' ret[520045](520049 'deref' call_tmp[668718]))
    gotoReturn _end___getActualInsertPts[520043] _end___getActualInsertPts[520043]
    (481570 'end of statement' actualInsertPts[147686] actualAddCnt[147870])
    label _end___getActualInsertPts[520043]
    (520047 return ret[520045])
  }
  function BaseSparseDomImpl[148004](?).dsiClear[147977](arg _mt[148044]:_MT[238], arg this[148042]:BaseSparseDomImpl[148004](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (147998 call halt "not implemented")
    (520054 return _void[55])
  }
  type BaseSparseDomImpl[148004](?) val super[355714]:BaseSparseDom[148708](?) "super class" unknown nnzDom[146964](146962 call chpl__buildDomainExpr(146959 call chpl_build_bounded_range 1 0))
  function SparseIndexBuffer[148231](?).init[148102](arg _mt[148235]:_MT[238], ref arg this[148233]:SparseIndexBuffer[148231](?), arg size[148100]:_any[178](?), param arg rank[148105]:int(64)[13], arg obj[148108]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668723] "expr temp" "maybe param" "maybe type" "temp"
    (668726 'move' call_tmp[668723](461763 call _cast int(64)[13] rank[148105]))
    (461765 'init field' this[148233] c"rank" call_tmp[668723])
    (481574 'end of statement')
    unknown tmp[461768] "temp"
    (461771 'init var' tmp[461768] obj[148108] BaseSparseDom[382293](?))
    (461773 'init field' this[148233] c"obj" tmp[461768])
    (481575 'end of statement')
    unknown tmp[461789] "temp" "type variable"
    unknown tmp[568671] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568672] "maybe param" "temp"
    unknown call_tmp[668728] "expr temp" "maybe param" "maybe type" "temp"
    (668731 'move' call_tmp[668728](461797 '.v' this[148233] c"rank"))
    unknown call_tmp[668733] "expr temp" "maybe param" "maybe type" "temp"
    (668736 'move' call_tmp[668733](461778 call == call_tmp[668728] 1))
    (568677 'move' tmp[568672](568675 call _cond_test call_tmp[668733]))
    if tmp[568672]
    {
      (568682 'move' tmp[568671](568679 '_paramFoldLogical' tmp[568672] int(64)[13]))
    }
    {
      unknown tmp[568684] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[668738] "expr temp" "maybe param" "maybe type" "temp"
      (668741 'move' call_tmp[668738](461800 '.v' this[148233] c"rank"))
      (568686 'move' tmp[568684](461785 call * call_tmp[668738] int(64)[13]))
      (568691 'move' tmp[568671](568688 '_paramFoldLogical' tmp[568672] tmp[568684]))
    }
    (461791 'move' tmp[461789] tmp[568671])
    (461793 'init field' this[148233] c"idxType" tmp[461789])
    (481576 'end of statement')
    unknown call_tmp[668743] "expr temp" "maybe param" "maybe type" "temp"
    (668746 'move' call_tmp[668743](148129 call chpl_build_low_bounded_range 0))
    unknown call_tmp[668748] "expr temp" "maybe param" "maybe type" "temp"
    (668751 'move' call_tmp[668748](148132 call # call_tmp[668743] size[148100]))
    unknown call_tmp[668753] "maybe param" "maybe type" "temp"
    (668756 'move' call_tmp[668753](148135 call chpl__buildDomainExpr call_tmp[668748]))
    unknown tmp[461803] "temp"
    (461805 'init var' tmp[461803] call_tmp[668753])
    (461807 '.=' this[148233] c"bufDom" tmp[461803])
    (481577 'end of statement')
    unknown tmp[461812] "temp"
    unknown call_tmp[668758] "expr temp" "maybe param" "maybe type" "temp"
    (668761 'move' call_tmp[668758](461826 '.' this[148233] c"bufDom"))
    unknown call_tmp[668763] "expr temp" "maybe param" "maybe type" "temp"
    (668766 'move' call_tmp[668763](461817 call chpl__ensureDomainExpr call_tmp[668758]))
    unknown call_tmp[668768] "expr temp" "maybe param" "maybe type" "temp"
    (668771 'move' call_tmp[668768](461829 '.v' this[148233] c"idxType"))
    unknown call_tmp[668773] "expr temp" "maybe param" "maybe type" "temp"
    (668776 'move' call_tmp[668773](461815 call chpl__buildArrayRuntimeType call_tmp[668763] call_tmp[668768]))
    (461820 'default init var' tmp[461812] call_tmp[668773])
    (461822 '.=' this[148233] c"buf" tmp[461812])
    (481578 'end of statement')
    unknown tmp[461833] "temp"
    (461835 'init var' tmp[461833] 0)
    (461837 '.=' this[148233] c"cur" tmp[461833])
    (481579 'end of statement')
    (520056 return _void[55])
  }
  function SparseIndexBuffer[148231](?).deinit[148144](arg _mt[148239]:_MT[238], arg this[148237]:SparseIndexBuffer[148231](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (148148 call(385756 call (partial) commit _mt[243] this[148237]))
    (520058 return _void[55])
  }
  function SparseIndexBuffer[148231](?).add[148159](arg _mt[148243]:_MT[238], arg this[148241]:SparseIndexBuffer[148231](?), arg idx[148156] :
  (385761 call idxType _mt[243] this[148241])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668786] "expr temp" "maybe param" "maybe type" "temp"
    (668789 'move' call_tmp[668786](385773 call cur _mt[243] this[148241]))
    unknown call_tmp[668791] "expr temp" "maybe param" "maybe type" "temp"
    (668794 'move' call_tmp[668791](148164 call(385766 call (partial) buf _mt[243] this[148241]) call_tmp[668786]))
    (148166 call = call_tmp[668791] idx[148156])
    (481581 'end of statement')
    unknown call_tmp[668798] "expr temp" "maybe param" "maybe type" "temp"
    (668801 'move' call_tmp[668798](385779 call cur _mt[243] this[148241]))
    (148172 call += call_tmp[668798] 1)
    (481582 'end of statement')
    unknown call_tmp[668805] "expr temp" "maybe param" "maybe type" "temp"
    (668808 'move' call_tmp[668805](385784 call cur _mt[243] this[148241]))
    unknown call_tmp[668812] "expr temp" "maybe param" "maybe type" "temp"
    (668815 'move' call_tmp[668812](360648 call buf _mt[243] this[148241]))
    unknown call_tmp[668819] "expr temp" "maybe param" "maybe type" "temp"
    (668822 'move' call_tmp[668819](148177 call size _mt[243] call_tmp[668812]))
    unknown call_tmp[668824] "expr temp" "maybe param" "maybe type" "temp"
    (668827 'move' call_tmp[668824](148180 call == call_tmp[668805] call_tmp[668819]))
    unknown call_tmp[668829] "expr temp" "maybe param" "maybe type" "temp"
    (668832 'move' call_tmp[668829](148186 call _cond_test call_tmp[668824]))
    if call_tmp[668829]
    {
      (148184 call(385788 call (partial) commit _mt[243] this[148241]))
    }
    (520060 return _void[55])
  }
  function SparseIndexBuffer[148231](?).commit[148195](arg _mt[148247]:_MT[238], arg this[148245]:SparseIndexBuffer[148231](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668838] "expr temp" "maybe param" "maybe type" "temp"
    (668841 'move' call_tmp[668838](385793 call cur _mt[243] this[148245]))
    unknown call_tmp[668843] "expr temp" "maybe param" "maybe type" "temp"
    (668846 'move' call_tmp[668843](148199 call >= call_tmp[668838] 1))
    unknown call_tmp[668848] "expr temp" "maybe param" "maybe type" "temp"
    (668851 'move' call_tmp[668848](148217 call _cond_test call_tmp[668843]))
    if call_tmp[668848]
    {
      unknown call_tmp[668855] "expr temp" "maybe param" "maybe type" "temp"
      (668858 'move' call_tmp[668855](360653 call obj _mt[243] this[148245]))
      unknown call_tmp[668866] "expr temp" "maybe param" "maybe type" "temp"
      (668869 'move' call_tmp[668866](385803 call cur _mt[243] this[148245]))
      unknown call_tmp[668871] "expr temp" "maybe param" "maybe type" "temp"
      (668874 'move' call_tmp[668871](148208 call - call_tmp[668866] 1))
      unknown call_tmp[668876] "expr temp" "maybe param" "maybe type" "temp"
      (668879 'move' call_tmp[668876](148210 call chpl_build_high_bounded_range call_tmp[668871]))
      unknown call_tmp[668881] "expr temp" "maybe param" "maybe type" "temp"
      (668884 'move' call_tmp[668881](148213 call(385798 call (partial) buf _mt[243] this[148245]) call_tmp[668876]))
      (148215 call(148202 call (partial) dsiBulkAdd _mt[243] call_tmp[668855]) call_tmp[668881])
    }
    unknown call_tmp[668888] "expr temp" "maybe param" "maybe type" "temp"
    (668891 'move' call_tmp[668888](385808 call cur _mt[243] this[148245]))
    (148225 call = call_tmp[668888] 0)
    (520062 return _void[55])
  }
  type SparseIndexBuffer[148231](?) unknown rank[148049] "param" int(64)[13] val obj[148054]:BaseSparseDom[382293](?) BaseSparseDom[382293](?) unknown idxType[148070] "type variable"(148067 IfExpr (148060 call == rank[148049] 1) then
  { scopeless
    int(64)[13]
  } else
  { scopeless
    (148065 call * rank[148049] int(64)[13])
  } ) unknown bufDom[148078](148076 call chpl__buildDomainRuntimeType defaultDist[94053] 1) unknown buf[148089](148087 call chpl__buildArrayRuntimeType(148085 call chpl__ensureDomainExpr bufDom[148078]) idxType[148070]) val cur[148094]:int(64)[13] 0
  function BaseSparseDom[148708](?).getNNZ[148267](arg _mt[148712]:_MT[238], arg this[148710]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[520066] "RVV" "temp"
    (148289 call halt "nnz queried on base class")
    (520068 return ret[520066])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148708](?).deinit[148297](arg _mt[148716]:_MT[238], arg this[148714]:BaseSparseDom[148708](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520070 return _void[55])
  }
  function BaseSparseDom[148708](?).dsiClear[148304](arg _mt[148720]:_MT[238], arg this[148718]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148325 call halt "clear not implemented for this distribution - BaseSparseDom")
    (520072 return _void[55])
  }
  function BaseSparseDom[148708](?).dsiBulkAdd[148343](arg _mt[148724]:_MT[238], arg this[148722]:BaseSparseDom[148708](?), arg inds[148340]:_array[133594](?), arg dataSorted[148346] :
  0 =
  0, arg isUnique[148350] :
  0 =
  0, arg preserveInds[148354] :
  1 =
  1, arg addOn[148358] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[520076] "RVV" "temp"
    (148381 call halt "Bulk addition is not supported by this sparse domain")
    (481588 'end of statement')
    (520082 'move' ret[520076](520081 'coerce' 0 int(64)[13]))
    (520078 return ret[520076])
  }
  where {
    unknown call_tmp[668895] "expr temp" "maybe param" "maybe type" "temp"
    (668898 'move' call_tmp[668895](385813 call rank _mt[243] this[148722]))
    unknown call_tmp[668902] "expr temp" "maybe param" "maybe type" "temp"
    (668905 'move' call_tmp[668902](385818 call idxType _mt[243] this[148722]))
    unknown call_tmp[668907] "expr temp" "maybe param" "maybe type" "temp"
    (668910 'move' call_tmp[668907](148335 call chpl__buildIndexType call_tmp[668895] call_tmp[668902]))
    unknown call_tmp[668914] "expr temp" "maybe param" "maybe type" "temp"
    (668917 'move' call_tmp[668914](461847 call eltType _mt[243] inds[148340]))
    unknown call_tmp[668919] "expr temp" "maybe param" "maybe type" "temp"
    (668922 'move' call_tmp[668919](461851 call == call_tmp[668907] call_tmp[668914]))
    (461845 call & 1 call_tmp[668919])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148708](?).boundsCheck[148400](arg _mt[148728]:_MT[238], arg this[148726]:BaseSparseDom[148708](?), arg ind[148397] :
  unknown call_tmp[668926] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[520086] "RVV" "temp"
    unknown call_tmp[668938] "expr temp" "maybe param" "maybe type" "temp"
    (668941 'move' call_tmp[668938](148459 call _cond_test 1))
    if call_tmp[668938]
    {
      unknown call_tmp[668945] "expr temp" "maybe param" "maybe type" "temp"
      (668948 'move' call_tmp[668945](360658 call parentDom _mt[243] this[148726]))
      unknown call_tmp[668952] "expr temp" "maybe param" "maybe type" "temp"
      (668955 'move' call_tmp[668952](148410 call(148405 call (partial) contains _mt[243] call_tmp[668945]) ind[148397]))
      unknown call_tmp[668957] "expr temp" "maybe param" "maybe type" "temp"
      (668960 'move' call_tmp[668957](148411 call ! call_tmp[668952]))
      unknown call_tmp[668962] "expr temp" "maybe param" "maybe type" "temp"
      (668965 'move' call_tmp[668962](148454 call _cond_test call_tmp[668957]))
      if call_tmp[668962]
      {
        unknown call_tmp[668969] "expr temp" "maybe param" "maybe type" "temp"
        (668972 'move' call_tmp[668969](385837 call parentDom _mt[243] this[148726]))
        (148452 call halt "Sparse domain/array index out of bounds: " ind[148397] " (expected to be within " call_tmp[668969] ")")
      }
    }
    (520088 return ret[520086])
  }
  { scopeless type
    void[4]
  }
  function BaseSparseDom[148708](?).dsiDim[148474](arg _mt[148732]:_MT[238], arg this[148730]:BaseSparseDom[148708](?), arg d[148471]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520092] "RVV" "temp"
    unknown call_tmp[668976] "expr temp" "maybe param" "maybe type" "temp"
    (668979 'move' call_tmp[668976](360663 call parentDom _mt[243] this[148730]))
    unknown call_tmp[668983] "expr temp" "maybe param" "maybe type" "temp"
    (668986 'move' call_tmp[668983](148482 call(148477 call (partial) dim _mt[243] call_tmp[668976]) d[148471]))
    (520097 'move' ret[520092](520096 'deref' call_tmp[668983]))
    (520094 return ret[520092])
  }
  function BaseSparseDom[148708](?).dsiDims[148490](arg _mt[148736]:_MT[238], arg this[148734]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520101] "RVV" "temp"
    unknown call_tmp[668990] "expr temp" "maybe param" "maybe type" "temp"
    (668993 'move' call_tmp[668990](360668 call parentDom _mt[243] this[148734]))
    unknown call_tmp[668997] "expr temp" "maybe param" "maybe type" "temp"
    (669000 'move' call_tmp[668997](148497 call(148493 call (partial) dims _mt[243] call_tmp[668990])))
    (520106 'move' ret[520101](520105 'deref' call_tmp[668997]))
    (520103 return ret[520101])
  }
  function BaseSparseDom[148708](?).dsiNumIndices[148505](arg _mt[148740]:_MT[238], arg this[148738]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520110] "RVV" "temp"
    unknown call_tmp[669004] "expr temp" "maybe param" "maybe type" "temp"
    (669007 'move' call_tmp[669004](148509 call(385842 call (partial) getNNZ _mt[243] this[148738])))
    (520115 'move' ret[520110](520114 'deref' call_tmp[669004]))
    (520112 return ret[520110])
  }
  function BaseSparseDom[148708](?).dsiSize[148517](arg _mt[148744]:_MT[238], arg this[148742]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520119] "RVV" "temp"
    unknown call_tmp[669011] "expr temp" "maybe param" "maybe type" "temp"
    (669014 'move' call_tmp[669011](148521 call(385846 call (partial) getNNZ _mt[243] this[148742])))
    (520124 'move' ret[520119](520123 'deref' call_tmp[669011]))
    (520121 return ret[520119])
  }
  function BaseSparseDom[148708](?).dsiLow[148529](arg _mt[148748]:_MT[238], arg this[148746]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520128] "RVV" "temp"
    unknown call_tmp[669018] "expr temp" "maybe param" "maybe type" "temp"
    (669021 'move' call_tmp[669018](360673 call parentDom _mt[243] this[148746]))
    unknown call_tmp[669025] "expr temp" "maybe param" "maybe type" "temp"
    (669028 'move' call_tmp[669025](148532 call low _mt[243] call_tmp[669018]))
    (520133 'move' ret[520128](520132 'deref' call_tmp[669025]))
    (520130 return ret[520128])
  }
  function BaseSparseDom[148708](?).dsiHigh[148542](arg _mt[148752]:_MT[238], arg this[148750]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520137] "RVV" "temp"
    unknown call_tmp[669032] "expr temp" "maybe param" "maybe type" "temp"
    (669035 'move' call_tmp[669032](360678 call parentDom _mt[243] this[148750]))
    unknown call_tmp[669039] "expr temp" "maybe param" "maybe type" "temp"
    (669042 'move' call_tmp[669039](148545 call high _mt[243] call_tmp[669032]))
    (520142 'move' ret[520137](520141 'deref' call_tmp[669039]))
    (520139 return ret[520137])
  }
  function BaseSparseDom[148708](?).dsiStride[148555](arg _mt[148756]:_MT[238], arg this[148754]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520146] "RVV" "temp"
    unknown call_tmp[669046] "expr temp" "maybe param" "maybe type" "temp"
    (669049 'move' call_tmp[669046](360683 call parentDom _mt[243] this[148754]))
    unknown call_tmp[669053] "expr temp" "maybe param" "maybe type" "temp"
    (669056 'move' call_tmp[669053](148558 call stride _mt[243] call_tmp[669046]))
    (520151 'move' ret[520146](520150 'deref' call_tmp[669053]))
    (520148 return ret[520146])
  }
  function BaseSparseDom[148708](?).dsiAlignment[148568](arg _mt[148760]:_MT[238], arg this[148758]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520155] "RVV" "temp"
    unknown call_tmp[669060] "expr temp" "maybe param" "maybe type" "temp"
    (669063 'move' call_tmp[669060](360688 call parentDom _mt[243] this[148758]))
    unknown call_tmp[669067] "expr temp" "maybe param" "maybe type" "temp"
    (669070 'move' call_tmp[669067](148571 call alignment _mt[243] call_tmp[669060]))
    (520160 'move' ret[520155](520159 'deref' call_tmp[669067]))
    (520157 return ret[520155])
  }
  function BaseSparseDom[148708](?).dsiFirst[148581](arg _mt[148764]:_MT[238], arg this[148762]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520164] "RVV" "temp"
    (148602 call halt "dsiFirst is not implemented")
    (481599 'end of statement')
    const _tmp[148609] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[669074] "expr temp" "maybe param" "maybe type" "temp"
    (669077 'move' call_tmp[669074](385851 call rank _mt[243] this[148762]))
    unknown call_tmp[669081] "expr temp" "maybe param" "maybe type" "temp"
    (669084 'move' call_tmp[669081](385856 call idxType _mt[243] this[148762]))
    unknown call_tmp[669086] "expr temp" "maybe param" "maybe type" "temp"
    (669089 'move' call_tmp[669086](148607 call * call_tmp[669074] call_tmp[669081]))
    (543630 'default init var' _tmp[148609] call_tmp[669086])
    (148612 'end of statement')
    (520169 'move' ret[520164](520168 'deref' _tmp[148609]))
    gotoReturn _end_dsiFirst[520162] _end_dsiFirst[520162]
    (481600 'end of statement' _tmp[148609])
    label _end_dsiFirst[520162]
    (520166 return ret[520164])
  }
  function BaseSparseDom[148708](?).dsiLast[148620](arg _mt[148768]:_MT[238], arg this[148766]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520175] "RVV" "temp"
    (148641 call halt "dsiLast not implemented")
    (481602 'end of statement')
    const _tmp[148648] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[669093] "expr temp" "maybe param" "maybe type" "temp"
    (669096 'move' call_tmp[669093](385862 call rank _mt[243] this[148766]))
    unknown call_tmp[669100] "expr temp" "maybe param" "maybe type" "temp"
    (669103 'move' call_tmp[669100](385867 call idxType _mt[243] this[148766]))
    unknown call_tmp[669105] "expr temp" "maybe param" "maybe type" "temp"
    (669108 'move' call_tmp[669105](148646 call * call_tmp[669093] call_tmp[669100]))
    (543632 'default init var' _tmp[148648] call_tmp[669105])
    (148651 'end of statement')
    (520180 'move' ret[520175](520179 'deref' _tmp[148648]))
    gotoReturn _end_dsiLast[520173] _end_dsiLast[520173]
    (481603 'end of statement' _tmp[148648])
    label _end_dsiLast[520173]
    (520177 return ret[520175])
  }
  function BaseSparseDom[148708](?).dsiAlignedLow[148659](arg _mt[148772]:_MT[238], arg this[148770]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520186] "RVV" "temp"
    unknown call_tmp[669112] "expr temp" "maybe param" "maybe type" "temp"
    (669115 'move' call_tmp[669112](360693 call parentDom _mt[243] this[148770]))
    unknown call_tmp[669119] "expr temp" "maybe param" "maybe type" "temp"
    (669122 'move' call_tmp[669119](148662 call alignedLow _mt[243] call_tmp[669112]))
    (520191 'move' ret[520186](520190 'deref' call_tmp[669119]))
    (520188 return ret[520186])
  }
  function BaseSparseDom[148708](?).dsiAlignedHigh[148672](arg _mt[148776]:_MT[238], arg this[148774]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520195] "RVV" "temp"
    unknown call_tmp[669126] "expr temp" "maybe param" "maybe type" "temp"
    (669129 'move' call_tmp[669126](360698 call parentDom _mt[243] this[148774]))
    unknown call_tmp[669133] "expr temp" "maybe param" "maybe type" "temp"
    (669136 'move' call_tmp[669133](148675 call alignedHigh _mt[243] call_tmp[669126]))
    (520200 'move' ret[520195](520199 'deref' call_tmp[669133]))
    (520197 return ret[520195])
  }
  function BaseSparseDom[148708](?).dsiMakeIndexBuffer[148687](arg _mt[148780]:_MT[238], arg this[148778]:BaseSparseDom[148708](?), arg size[148685]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520204] "RVV" "temp"
    unknown call_tmp[669140] "expr temp" "maybe param" "maybe type" "temp"
    (669143 'move' call_tmp[669140](148692 call rank _mt[243] this[148778]))
    unknown call_tmp[669145] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (669148 'move' call_tmp[669145](747913 'new' SparseIndexBuffer[148231](?)(rank = call_tmp[669140])(obj = this[148778])(size = size[148685])))
    (520209 'move' ret[520204](520208 'deref' call_tmp[669145]))
    (520206 return ret[520204])
  }
  type BaseSparseDom[148708](?) val super[355712]:BaseDom[146767] "super class" unknown rank[148254] "param" int(64)[13] unknown idxType[148258] "type variable" unknown parentDom[148261]
  type BaseSparseDom[382293](?)
  function BaseAssociativeDom[148855].deinit[148788](arg _mt[148859]:_MT[238], arg this[148857]:BaseAssociativeDom[148855]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520211 return _void[55])
  }
  function BaseAssociativeDom[148855].dsiClear[148795](arg _mt[148863]:_MT[238], arg this[148861]:BaseAssociativeDom[148855]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148816 call halt "clear not implemented for this distribution")
    (520213 return _void[55])
  }
  function BaseAssociativeDom[148855].dsiAdd[148825](arg _mt[148867]:_MT[238], arg this[148865]:BaseAssociativeDom[148855], in arg idx[148823]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520217] "RVV" "temp"
    (148846 call compilerError "Index addition is not supported by this domain")
    (481609 'end of statement')
    (520222 'move' ret[520217](520221 'deref' 0))
    (520219 return ret[520217])
  }
  type BaseAssociativeDom[148855] val super[355716]:BaseDom[146767] "super class"
  type BaseAssociativeDom[382288](?)
  function BaseArr[149584].chpl__rvfMe[148885](arg _mt[149588]:_MT[238], arg this[149586]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520226] "RVV" "param" "temp"
    (520231 'move' ret[520226](520230 'deref' 0))
    (520228 return ret[520226])
  }
  function BaseArr[149584].isSliceArrayView[148895](arg _mt[149592]:_MT[238], arg this[149590]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520235] "RVV" "param" "temp"
    (520240 'move' ret[520235](520239 'deref' 0))
    (520237 return ret[520235])
  }
  function BaseArr[149584].isRankChangeArrayView[148905](arg _mt[149596]:_MT[238], arg this[149594]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520244] "RVV" "param" "temp"
    (520249 'move' ret[520244](520248 'deref' 0))
    (520246 return ret[520244])
  }
  function BaseArr[149584].isReindexArrayView[148915](arg _mt[149600]:_MT[238], arg this[149598]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520253] "RVV" "param" "temp"
    (520258 'move' ret[520253](520257 'deref' 0))
    (520255 return ret[520253])
  }
  function BaseArr[149584].deinit[148925](arg _mt[149604]:_MT[238], arg this[149602]:BaseArr[149584]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520260 return _void[55])
  }
  function BaseArr[149584].dsiStaticFastFollowCheck[148934](arg _mt[149608]:_MT[238], arg this[149606]:BaseArr[149584], arg leadType[148932]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520264] "RVV" "param" "temp"
    (520269 'move' ret[520264](520268 'deref' 0))
    (520266 return ret[520264])
  }
  function BaseArr[149584].dsiGetBaseDom[148944](arg _mt[149612]:_MT[238], arg this[149610]:BaseArr[149584]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520273] "RVV" "temp"
    (148967 call halt "internal error: dsiGetBaseDom is not implemented")
    (481616 'end of statement')
    unknown ret[148972] "dead at end of block" "insert auto destroy" "unsafe"
    (543634 'default init var' ret[148972] unmanaged BaseDom[415443])
    (148975 'end of statement')
    (520279 'move' ret[520273](520278 'coerce' ret[148972] unmanaged BaseDom[415443]))
    gotoReturn _end_dsiGetBaseDom[520271] _end_dsiGetBaseDom[520271]
    (481617 'end of statement' ret[148972])
    label _end_dsiGetBaseDom[520271]
    (520275 return ret[520273])
  }
  { scopeless type
    unmanaged BaseDom[415443]
  }
  function BaseArr[149584].remove[148988](arg _mt[149616]:_MT[238], arg this[149614]:BaseArr[149584], param arg rmFromList[148985]:bool[10]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[520285] "RVV" "temp"
    unknown ret_arr[148991] "dead at end of block" "insert auto destroy"
    (543636 'init var' ret_arr[148991] this[149614])
    (148994 'end of statement')
    unknown ret_dom[149000] "dead at end of block" "insert auto destroy"
    (543638 'init var' ret_dom[149000] nil[44] unmanaged BaseDom?[415503])
    (149003 'end of statement')
    unknown rm_dom[149005] "dead at end of block" "insert auto destroy"
    (543640 'init var' rm_dom[149005] 0)
    (149008 'end of statement')
    unknown call_tmp[669152] "maybe param" "maybe type" "temp"
    (669155 'move' call_tmp[669152](149011 call(385883 call (partial) dsiGetBaseDom _mt[243] this[149614])))
    unknown dom[149012] "dead at end of block" "insert auto destroy"
    (543642 'init var' dom[149012] call_tmp[669152])
    (149015 'end of statement')
    unknown call_tmp[669159] "expr temp" "maybe param" "maybe type" "temp"
    (669162 'move' call_tmp[669159](149026 call _to_unmanaged this[149614]))
    unknown call_tmp[669164] "expr temp" "maybe param" "maybe type" "temp"
    (669167 'move' call_tmp[669164](149029 call(149020 call (partial) remove_arr _mt[243] dom[149012]) call_tmp[669159] rmFromList[148985]))
    (149030 call = rm_dom[149005] call_tmp[669164])
    (481619 'end of statement' rm_dom[149005] dom[149012])
    unknown call_tmp[669169] "expr temp" "maybe param" "maybe type" "temp"
    (669172 'move' call_tmp[669169](149039 call _cond_test rm_dom[149005]))
    if call_tmp[669169]
    {
      (149036 call = ret_dom[149000] dom[149012])
      (481622 'end of statement' ret_dom[149000] dom[149012])
    }
    unknown call_tmp[669174] "expr temp" "maybe param" "maybe type" "temp"
    (669177 'move' call_tmp[669174](149047 call _build_tuple ret_arr[148991] ret_dom[149000]))
    (520290 'move' ret[520285](520289 'deref' call_tmp[669174]))
    gotoReturn _end_remove[520283] _end_remove[520283]
    (481625 'end of statement' ret_arr[148991] ret_dom[149000])
    label _end_remove[520283]
    (520287 return ret[520285])
  }
  function BaseArr[149584].dsiElementInitializationComplete[149055](arg _mt[149620]:_MT[238], arg this[149618]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149076 call halt "dsiElementInitializationComplete must be defined")
    (520294 return _void[55])
  }
  function BaseArr[149584].dsiElementDeinitializationComplete[149083](arg _mt[149624]:_MT[238], arg this[149622]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149104 call halt "dsiElementDeinitializationComplete must be defined")
    (520296 return _void[55])
  }
  function BaseArr[149584].dsiDestroyArr[149115](arg _mt[149628]:_MT[238], arg this[149626]:BaseArr[149584], arg deinitElts[149112]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149136 call halt "dsiDestroyArr must be defined")
    (520298 return _void[55])
  }
  function BaseArr[149584].dsiReallocate[149147](arg _mt[149632]:_MT[238], arg this[149630]:BaseArr[149584], arg d[149144]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149168 call halt "reallocating not supported for this array type")
    (520300 return _void[55])
  }
  function BaseArr[149584].dsiPostReallocate[149175](arg _mt[149636]:_MT[238], arg this[149634]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520302 return _void[55])
  }
  function BaseArr[149584]._purge[149186](arg _mt[149640]:_MT[238], arg this[149638]:BaseArr[149584], arg ind[149183]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149207 call halt "purging not supported for this array type")
    (520304 return _void[55])
  }
  function BaseArr[149584]._resize[149218](arg _mt[149644]:_MT[238], arg this[149642]:BaseArr[149584], arg length[149215]:int(64)[13], arg old_map[149220]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149241 call halt "resizing not supported for this array type")
    (520306 return _void[55])
  }
  function BaseArr[149584].sparseShiftArray[149250](arg _mt[149648]:_MT[238], arg this[149646]:BaseArr[149584], arg shiftrange[149248]:_any[178](?), arg initrange[149252]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149273 call halt "sparseGrowDomain not supported for non-sparse arrays")
    (520308 return _void[55])
  }
  function BaseArr[149584].sparseShiftArrayBack[149282](arg _mt[149652]:_MT[238], arg this[149650]:BaseArr[149584], arg shiftrange[149280]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149303 call halt "sparseShiftArrayBack not supported for non-sparse arrays")
    (520310 return _void[55])
  }
  function BaseArr[149584].sparseBulkShiftArray[149312](arg _mt[149656]:_MT[238], arg this[149654]:BaseArr[149584], arg shiftMap[149310]:_any[178](?), arg oldnnz[149314]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149335 call halt "sparseBulkShiftArray not supported for non-sparse arrays")
    (520312 return _void[55])
  }
  function BaseArr[149584]._defaultInitSlot[149346](arg _mt[149660]:_MT[238], arg this[149658]:BaseArr[149584], arg slot[149343]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149367 call halt "_defaultInitSlot() not supported for non-associative arrays")
    (520314 return _void[55])
  }
  function BaseArr[149584]._deinitSlot[149378](arg _mt[149664]:_MT[238], arg this[149662]:BaseArr[149584], arg slot[149375]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149399 call halt "_deinitSlot() not supported for non-associative arrays")
    (520316 return _void[55])
  }
  function BaseArr[149584]._startRehash[149410](arg _mt[149668]:_MT[238], arg this[149666]:BaseArr[149584], arg newSize[149407]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149431 call halt "_startRehash() not supported for non-associative arrays")
    (520318 return _void[55])
  }
  function BaseArr[149584]._finishRehash[149442](arg _mt[149672]:_MT[238], arg this[149670]:BaseArr[149584], arg oldSize[149439]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149463 call halt "_finishRehash() not supported for non-associative arrays")
    (520320 return _void[55])
  }
  function BaseArr[149584]._moveElementDuringRehash[149474](arg _mt[149676]:_MT[238], arg this[149674]:BaseArr[149584], arg oldslot[149471]:int(64)[13], arg newslot[149477]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149499 call halt "_moveElementDuringRehash() not supported for non-associative arrays")
    (520322 return _void[55])
  }
  function BaseArr[149584].dsiSupportsAlignedFollower[149506](arg _mt[149680]:_MT[238], arg this[149678]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520326] "RVV" "param" "temp"
    (520331 'move' ret[520326](520330 'deref' 0))
    (520328 return ret[520326])
  }
  function BaseArr[149584].dsiSupportsPrivatization[149516](arg _mt[149684]:_MT[238], arg this[149682]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520335] "RVV" "param" "temp"
    (520340 'move' ret[520335](520339 'deref' 0))
    (520337 return ret[520335])
  }
  function BaseArr[149584].dsiRequiresPrivatization[149526](arg _mt[149688]:_MT[238], arg this[149686]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520344] "RVV" "param" "temp"
    (520349 'move' ret[520344](520348 'deref' 0))
    (520346 return ret[520344])
  }
  function BaseArr[149584].dsiDisplayRepresentation[149536](arg _mt[149692]:_MT[238], arg this[149690]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149541 call writeln "<no way to display representation>")
    (520351 return _void[55])
  }
  function BaseArr[415341](?).isDefaultRectangular[149548](arg _mt[149696]:_MT[238], arg this[149694]:BaseArr[415341](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520355] "RVV" "param" "temp"
    (520360 'move' ret[520355](520359 'deref' 0))
    (520357 return ret[520355])
  }
  function BaseArr[149584].isDefaultRectangular[149558](arg _mt[149700]:_MT[238], arg this[149698]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520364] "RVV" "param" "temp"
    (520369 'move' ret[520364](520368 'deref' 0))
    (520366 return ret[520364])
  }
  function BaseArr[149584].doiCanBulkTransferRankChange[149568](arg _mt[149704]:_MT[238], arg this[149702]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520373] "RVV" "param" "temp"
    (520378 'move' ret[520373](520377 'deref' 0))
    (520375 return ret[520373])
  }
  function BaseArr[149584].decEltCountsIfNeeded[149578](arg _mt[149708]:_MT[238], arg this[149706]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520380 return _void[55])
  }
  type BaseArr[149584] val super[355704]:object[22] "super class" val pid[148873]:int(64)[13] nullPid[113718] int(64)[13] val _decEltRefCounts[148879]:bool[10] 0 bool[10]
  type unmanaged BaseArr?[415524]
  type BaseArr?[415521](?)
  type unmanaged BaseArr[415491]
  type BaseArr[415341](?)
  type BaseArr[382360](?)
  function AbsBaseArr[149740](?).decEltCountsIfNeeded[149719](arg _mt[149744]:_MT[238], arg this[149742]:AbsBaseArr[149740](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669181] "expr temp" "maybe param" "maybe type" "temp"
    (669184 'move' call_tmp[669181](385897 call _decEltRefCounts _mt[243] this[149742]))
    unknown call_tmp[669186] "expr temp" "maybe param" "maybe type" "temp"
    (669189 'move' call_tmp[669186](149732 call _cond_test call_tmp[669181]))
    if call_tmp[669186]
    {
      unknown call_tmp[669191] "expr temp" "maybe param" "maybe type" "temp"
      (669194 'move' call_tmp[669191](149726 call _to_unmanaged this[149742]))
      unknown call_tmp[669198] "expr temp" "maybe param" "maybe type" "temp"
      (669201 'move' call_tmp[669198](385903 call eltType _mt[243] this[149742]))
      (149729 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669191] call_tmp[669198])
    }
    (520382 return _void[55])
  }
  type AbsBaseArr[149740](?) val super[355718]:BaseArr[149584] "super class" unknown eltType[149714] "type variable"
  function BaseArrOverRectangularDom[149805](?).dsiReallocate[149780](arg _mt[149809]:_MT[238], arg this[149807]:BaseArrOverRectangularDom[149805](?), arg bounds[149777] :
  unknown call_tmp[669205] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149785 call halt "reallocating not supported for this array type")
    (520384 return _void[55])
  }
  function BaseArrOverRectangularDom[149805](?).dsiPostReallocate[149792](arg _mt[149813]:_MT[238], arg this[149811]:BaseArrOverRectangularDom[149805](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (520386 return _void[55])
  }
  function BaseArrOverRectangularDom[149805](?).deinit[149799](arg _mt[149817]:_MT[238], arg this[149815]:BaseArrOverRectangularDom[149805](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520388 return _void[55])
  }
  type BaseArrOverRectangularDom[149805](?) val super[355706]:BaseArr[149584] "super class" unknown rank[149751] "param" int(64)[13] unknown idxType[149755] "type variable" unknown stridable[149759] "param" bool[10]
  type BaseArrOverRectangularDom[385571](?)
  function BaseRectangularArr[149856](?).deinit[149828](arg _mt[149860]:_MT[238], arg this[149858]:BaseRectangularArr[149856](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520390 return _void[55])
  }
  function BaseRectangularArr[149856](?).decEltCountsIfNeeded[149835](arg _mt[149864]:_MT[238], arg this[149862]:BaseRectangularArr[149856](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669231] "expr temp" "maybe param" "maybe type" "temp"
    (669234 'move' call_tmp[669231](385924 call _decEltRefCounts _mt[243] this[149862]))
    unknown call_tmp[669236] "expr temp" "maybe param" "maybe type" "temp"
    (669239 'move' call_tmp[669236](149848 call _cond_test call_tmp[669231]))
    if call_tmp[669236]
    {
      unknown call_tmp[669241] "expr temp" "maybe param" "maybe type" "temp"
      (669244 'move' call_tmp[669241](149842 call _to_unmanaged this[149862]))
      unknown call_tmp[669248] "expr temp" "maybe param" "maybe type" "temp"
      (669251 'move' call_tmp[669248](385930 call eltType _mt[243] this[149862]))
      (149845 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669241] call_tmp[669248])
    }
    (520392 return _void[55])
  }
  type BaseRectangularArr[149856](?) val super[355708]:BaseArrOverRectangularDom[149805](?) "super class" unknown eltType[149823] "type variable"
  function BaseSparseArr[149900](?).dsiGetBaseDom[149884](arg _mt[149904]:_MT[238], arg this[149902]:BaseSparseArr[149900](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520396] "RVV" "temp"
    unknown call_tmp[669255] "expr temp" "maybe param" "maybe type" "temp"
    (669258 'move' call_tmp[669255](385935 call dom _mt[243] this[149902]))
    (520401 'move' ret[520396](520400 'deref' call_tmp[669255]))
    (520398 return ret[520396])
  }
  function BaseSparseArr[149900](?).deinit[149894](arg _mt[149908]:_MT[238], arg this[149906]:BaseSparseArr[149900](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520403 return _void[55])
  }
  type BaseSparseArr[149900](?) val super[355720]:AbsBaseArr[149740](?) "super class" unknown rank[149871] "param" int(64)[13] unknown idxType[149875] "type variable" unknown dom[149878]
  function BaseSparseArrImpl[150571](?).init[149934](arg _mt[150575]:_MT[238], arg this[150573]:BaseSparseArrImpl[150571](?), arg eltType[149932]:_any[178](?), param arg rank[149937]:int(64)[13], arg idxType[149940]:_any[178](?), arg dom[149942]:_any[178](?), param arg initElts[149945]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461854] "temporary of super field" "temp"
    (461856 'move' super_tmp[461854](461853 '.v' this[150573] c"super"))
    (149961 call(149949 call (partial) init _mt[243] super_tmp[461854])(eltType = eltType[149932])(rank = rank[149937])(idxType = idxType[149940])(dom = dom[149942]))
    (481653 'end of statement')
    unknown tmp[461859] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492362] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[669262] "expr temp" "maybe param" "maybe type" "temp"
      (669265 'move' call_tmp[669262](461861 '.v' this[150573] c"super"))
      (492366 'move' call_type_tmp[492362](461864 'typeof' call_tmp[669262]))
    }
    (461865 'move' tmp[461859] call_type_tmp[492362])
    unknown call_tmp[669267] "maybe param" "maybe type" "temp"
    (669270 'move' call_tmp[669267](461870 'cast' tmp[461859] this[150573]))
    unknown chpl__thisAsParent[461867] "dead at end of block" "insert auto destroy" "temp"
    (543644 'init var' chpl__thisAsParent[461867] call_tmp[669267] tmp[461859])
    (461873 'setcid' chpl__thisAsParent[461867])
    (481654 'end of statement')
    unknown call_tmp[669272] "expr temp" "maybe param" "maybe type" "temp"
    (669275 'move' call_tmp[669272](149969 '.' this[150573] c"dom"))
    unknown call_tmp[669279] "expr temp" "maybe param" "maybe type" "temp"
    (669282 'move' call_tmp[669279](149972 call nnzDom _mt[243] call_tmp[669272]))
    unknown call_tmp[669286] "maybe param" "maybe type" "temp"
    (669289 'move' call_tmp[669286](149982 call(149975 call (partial) buildArray _mt[243] call_tmp[669279]) eltType[149932](initElts = initElts[149945])))
    unknown call_tmp[669291] "expr temp" "maybe param" "maybe type" "temp"
    (669294 'move' call_tmp[669291](461892 '.' this[150573] c"dom"))
    unknown call_tmp[669298] "expr temp" "maybe param" "maybe type" "temp"
    (669301 'move' call_tmp[669298](461882 call nnzDom _mt[243] call_tmp[669291]))
    unknown call_tmp[669303] "expr temp" "maybe param" "maybe type" "temp"
    (669306 'move' call_tmp[669303](461880 call chpl__ensureDomainExpr call_tmp[669298]))
    unknown call_tmp[669308] "expr temp" "maybe param" "maybe type" "temp"
    (669311 'move' call_tmp[669308](461895 '.v' this[150573] c"eltType"))
    unknown call_tmp[669313] "maybe param" "maybe type" "temp"
    (669316 'move' call_tmp[669313](461878 call chpl__buildArrayRuntimeType call_tmp[669303] call_tmp[669308]))
    unknown tmp[461875] "temp"
    (461886 'init var' tmp[461875] call_tmp[669286] call_tmp[669313])
    (461888 'init field' this[150573] c"data" tmp[461875])
    (481655 'end of statement')
    unknown tmp[461899] "temp"
    unknown call_tmp[669318] "expr temp" "maybe param" "maybe type" "temp"
    (669321 'move' call_tmp[669318](461908 '.v' this[150573] c"eltType"))
    (461902 'default init var' tmp[461899] call_tmp[669318])
    (461904 '.=' this[150573] c"irv" tmp[461899])
    (481656 'end of statement')
    (461911 'setcid' this[150573])
    (520405 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).deinit[149990](arg _mt[150579]:_MT[238], arg this[150577]:BaseSparseArrImpl[150571](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520407 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiElementInitializationComplete[149997](arg _mt[150583]:_MT[238], arg this[150581]:BaseSparseArrImpl[150571](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669325] "expr temp" "maybe param" "maybe type" "temp"
    (669328 'move' call_tmp[669325](360714 call data _mt[243] this[150581]))
    (150004 call(150000 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[669325]))
    (520409 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiElementDeinitializationComplete[150011](arg _mt[150587]:_MT[238], arg this[150585]:BaseSparseArrImpl[150571](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669334] "expr temp" "maybe param" "maybe type" "temp"
    (669337 'move' call_tmp[669334](360719 call data _mt[243] this[150585]))
    (150018 call(150014 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[669334]))
    (520411 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiDestroyArr[150029](arg _mt[150591]:_MT[238], arg this[150589]:BaseSparseArrImpl[150571](?), arg deinitElts[150026]:bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669341] "expr temp" "maybe param" "maybe type" "temp"
    (669344 'move' call_tmp[669341](150037 call _cond_test deinitElts[150026]))
    if call_tmp[669341]
    {
      unknown call_tmp[669348] "expr temp" "maybe param" "maybe type" "temp"
      (669351 'move' call_tmp[669348](385948 call data _mt[243] this[150589]))
      (150035 call _deinitElements call_tmp[669348])
    }
    (520413 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).IRV[150052](arg _mt[150595]:_MT[238], arg this[150593]:BaseSparseArrImpl[150571](?)) ref : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520417] "RVV" "temp"
    unknown call_tmp[669355] "expr temp" "maybe param" "maybe type" "temp"
    (669358 'move' call_tmp[669355](385956 call irv _mt[243] this[150593]))
    (520422 'move' ret[520417](520421 'addr of' call_tmp[669355]))
    (520419 return ret[520417])
  }
  function BaseSparseArrImpl[150571](?).sparseBulkShiftArray[150064](arg _mt[150599]:_MT[238], arg this[150597]:BaseSparseArrImpl[150571](?), arg shiftMap[150062]:_any[178](?), arg oldnnz[150066]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown newIdx[150069] "dead at end of block" "insert auto destroy"
    (543646 'default init var' newIdx[150069] int(64)[13])
    (150072 'end of statement')
    unknown prevNewIdx[150075] "dead at end of block" "insert auto destroy"
    (543648 'init var' prevNewIdx[150075] 1)
    (150078 'end of statement')
    unknown call_tmp[669362] "expr temp" "maybe param" "maybe type" "temp"
    (669365 'move' call_tmp[669362](150081 call _dom _mt[243] shiftMap[150062]))
    unknown call_tmp[669369] "expr temp" "maybe param" "maybe type" "temp"
    (669372 'move' call_tmp[669369](150084 call high _mt[243] call_tmp[669362]))
    unknown call_tmp[669374] "expr temp" "maybe param" "maybe type" "temp"
    (669377 'move' call_tmp[669374](150088 call + call_tmp[669369] 1))
    unknown call_tmp[669381] "expr temp" "maybe param" "maybe type" "temp"
    (669384 'move' call_tmp[669381](360725 call dom _mt[243] this[150597]))
    unknown call_tmp[669388] "expr temp" "maybe param" "maybe type" "temp"
    (669391 'move' call_tmp[669388](150091 call nnzDom _mt[243] call_tmp[669381]))
    unknown call_tmp[669395] "expr temp" "maybe param" "maybe type" "temp"
    (669398 'move' call_tmp[669395](150094 call high _mt[243] call_tmp[669388]))
    unknown call_tmp[669400] "expr temp" "maybe param" "maybe type" "temp"
    (669403 'move' call_tmp[669400](150097 call chpl_build_bounded_range call_tmp[669374] call_tmp[669395]))
    Forall {
      induction variables:
        
        unknown i[150108] "index var" "insert auto destroy"
      iterated expressions:
        call_tmp[669400]
      shadow variables:
      other variables
        forall body
      {
        unknown call_tmp[669407] "expr temp" "maybe param" "maybe type" "temp"
        (669410 'move' call_tmp[669407](150102 call(385961 call (partial) data _mt[243] this[150597]) i[150108]))
        unknown call_tmp[669414] "expr temp" "maybe param" "maybe type" "temp"
        (669417 'move' call_tmp[669414](385967 call irv _mt[243] this[150597]))
        (150104 call = call_tmp[669407] call_tmp[669414])
        (481662 'end of statement' i[150108])
      }
    }
    {
      unknown _indexOfInterest[150231] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150232] "expr temp" "temp"
      unknown call_tmp[669419] "expr temp" "maybe param" "maybe type" "temp"
      (669422 'move' call_tmp[669419](150256 call - 1))
      unknown call_tmp[669424] "expr temp" "maybe param" "maybe type" "temp"
      (669427 'move' call_tmp[669424](150260 call chpl_direct_range_iter 1 oldnnz[150066] call_tmp[669419]))
      unknown call_tmp[669429] "expr temp" "maybe param" "maybe type" "temp"
      (669432 'move' call_tmp[669429](150249 call _getIterator call_tmp[669424]))
      unknown call_tmp[669436] "expr temp" "maybe param" "maybe type" "temp"
      (669439 'move' call_tmp[669436](150267 call _dom _mt[243] shiftMap[150062]))
      unknown call_tmp[669443] "expr temp" "maybe param" "maybe type" "temp"
      (669446 'move' call_tmp[669443](150271 call(150265 call (partial) dim _mt[243] call_tmp[669436]) 0))
      unknown call_tmp[669448] "expr temp" "maybe param" "maybe type" "temp"
      (669451 'move' call_tmp[669448](150274 call - 1))
      unknown call_tmp[669453] "expr temp" "maybe param" "maybe type" "temp"
      (669456 'move' call_tmp[669453](150263 call chpl_by call_tmp[669443] call_tmp[669448]))
      unknown call_tmp[669458] "expr temp" "maybe param" "maybe type" "temp"
      (669461 'move' call_tmp[669458](150276 call _getIterator call_tmp[669453]))
      (150290 'move' _iterator[150232](150142 call _build_tuple call_tmp[669429] call_tmp[669458]))
      Defer
      {
        {
          (150320 call _freeIterator _iterator[150232])
        }
      }
      { scopeless type
        (150295 'move' _indexOfInterest[150231](150292 call iteratorIndex _iterator[150232]))
      }
      ForLoop[150233]
      {
        (150300 call _check_tuple_var_decl _indexOfInterest[150231] 2)
        (481665 'end of statement')
        unknown i[150306] "index var" "insert auto destroy"
        (481666 'end of statement')
        (150308 'move' i[150306](150304 call _indexOfInterest[150231] 0))
        (481667 'end of statement' i[150306])
        unknown _newIdx[150313] "index var" "insert auto destroy"
        (481669 'end of statement')
        (150315 'move' _newIdx[150313](150311 call _indexOfInterest[150231] 1))
        (481670 'end of statement' _newIdx[150313])
        {
          unknown call_tmp[669463] "expr temp" "maybe param" "maybe type" "temp"
          (669466 'move' call_tmp[669463](150147 call shiftMap[150062] _newIdx[150313]))
          (150148 call = newIdx[150069] call_tmp[669463])
          (481672 'end of statement' newIdx[150069] _newIdx[150313])
          unknown call_tmp[669470] "expr temp" "maybe param" "maybe type" "temp"
          (669473 'move' call_tmp[669470](150155 call(385975 call (partial) data _mt[243] this[150597]) newIdx[150069]))
          unknown call_tmp[669477] "expr temp" "maybe param" "maybe type" "temp"
          (669480 'move' call_tmp[669477](150159 call(385981 call (partial) data _mt[243] this[150597]) i[150306]))
          (150160 call = call_tmp[669470] call_tmp[669477])
          (481675 'end of statement' newIdx[150069] i[150306])
          {
            unknown _indexOfInterest[150182] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[150183] "expr temp" "temp"
            unknown call_tmp[669482] "expr temp" "maybe param" "maybe type" "temp"
            (669485 'move' call_tmp[669482](150196 call + newIdx[150069] 1))
            unknown call_tmp[669487] "expr temp" "maybe param" "maybe type" "temp"
            (669490 'move' call_tmp[669487](150200 call - prevNewIdx[150075] 1))
            unknown call_tmp[669492] "expr temp" "maybe param" "maybe type" "temp"
            (669495 'move' call_tmp[669492](150203 call chpl_direct_range_iter call_tmp[669482] call_tmp[669487] 1))
            (150192 'move' _iterator[150183](150190 call _getIterator call_tmp[669492]))
            Defer
            {
              {
                (150219 call _freeIterator _iterator[150183])
              }
            }
            { scopeless type
              (150208 'move' _indexOfInterest[150182](150205 call iteratorIndex _iterator[150183]))
            }
            ForLoop[150184]
            {
              unknown emptyIndex[150212] "index var" "insert auto destroy"
              (481679 'end of statement')
              (150214 'move' emptyIndex[150212] _indexOfInterest[150182])
              (481680 'end of statement' emptyIndex[150212])
              unknown call_tmp[669499] "expr temp" "maybe param" "maybe type" "temp"
              (669502 'move' call_tmp[669499](150177 call(385987 call (partial) data _mt[243] this[150597]) emptyIndex[150212]))
              unknown call_tmp[669506] "expr temp" "maybe param" "maybe type" "temp"
              (669509 'move' call_tmp[669506](385993 call irv _mt[243] this[150597]))
              (150179 call = call_tmp[669499] call_tmp[669506])
              (481682 'end of statement' emptyIndex[150212])
              label _continueLabel[150187]
              _indexOfInterest[150182]
              _iterator[150183]
            }
            label _breakLabel[150188]
          }
          (150228 call = prevNewIdx[150075] newIdx[150069])
          (481684 'end of statement' prevNewIdx[150075] newIdx[150069])
        }
        label _continueLabel[150236]
        _indexOfInterest[150231]
        _iterator[150232]
      }
      label _breakLabel[150237]
    }
    {
      unknown _indexOfInterest[150343] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150344] "expr temp" "temp"
      unknown call_tmp[669511] "expr temp" "maybe param" "maybe type" "temp"
      (669514 'move' call_tmp[669511](150358 call - prevNewIdx[150075] 1))
      unknown call_tmp[669516] "expr temp" "maybe param" "maybe type" "temp"
      (669519 'move' call_tmp[669516](150361 call chpl_direct_range_iter 1 call_tmp[669511] 1))
      (150353 'move' _iterator[150344](150351 call _getIterator call_tmp[669516]))
      Defer
      {
        {
          (150377 call _freeIterator _iterator[150344])
        }
      }
      { scopeless type
        (150366 'move' _indexOfInterest[150343](150363 call iteratorIndex _iterator[150344]))
      }
      ForLoop[150345]
      {
        unknown i[150370] "index var" "insert auto destroy"
        (481688 'end of statement')
        (150372 'move' i[150370] _indexOfInterest[150343])
        (481689 'end of statement' i[150370])
        unknown call_tmp[669523] "expr temp" "maybe param" "maybe type" "temp"
        (669526 'move' call_tmp[669523](150338 call(386003 call (partial) data _mt[243] this[150597]) i[150370]))
        unknown call_tmp[669530] "expr temp" "maybe param" "maybe type" "temp"
        (669533 'move' call_tmp[669530](386009 call irv _mt[243] this[150597]))
        (150340 call = call_tmp[669523] call_tmp[669530])
        (481691 'end of statement' i[150370])
        label _continueLabel[150348]
        _indexOfInterest[150343]
        _iterator[150344]
      }
      label _breakLabel[150349]
    }
    (520424 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).sparseShiftArray[150390](arg _mt[150603]:_MT[238], arg this[150601]:BaseSparseArrImpl[150571](?), arg shiftrange[150388]:_any[178](?), arg initrange[150392]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150405] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150406] "expr temp" "temp"
      (150415 'move' _iterator[150406](150413 call _getIterator initrange[150392]))
      Defer
      {
        {
          (150431 call _freeIterator _iterator[150406])
        }
      }
      { scopeless type
        (150420 'move' _indexOfInterest[150405](150417 call iteratorIndex _iterator[150406]))
      }
      ForLoop[150407]
      {
        unknown i[150424] "index var" "insert auto destroy"
        (481694 'end of statement')
        (150426 'move' i[150424] _indexOfInterest[150405])
        (481695 'end of statement' i[150424])
        {
          unknown call_tmp[669537] "expr temp" "maybe param" "maybe type" "temp"
          (669540 'move' call_tmp[669537](150399 call(386016 call (partial) data _mt[243] this[150601]) i[150424]))
          unknown call_tmp[669544] "expr temp" "maybe param" "maybe type" "temp"
          (669547 'move' call_tmp[669544](386022 call irv _mt[243] this[150601]))
          (150401 call = call_tmp[669537] call_tmp[669544])
          (481697 'end of statement' i[150424])
        }
        label _continueLabel[150410]
        _indexOfInterest[150405]
        _iterator[150406]
      }
      label _breakLabel[150411]
    }
    {
      unknown _indexOfInterest[150461] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150462] "expr temp" "temp"
      unknown call_tmp[669549] "expr temp" "maybe param" "maybe type" "temp"
      (669552 'move' call_tmp[669549](150442 call - 1))
      unknown call_tmp[669554] "expr temp" "maybe param" "maybe type" "temp"
      (669557 'move' call_tmp[669554](150444 call chpl_by shiftrange[150388] call_tmp[669549]))
      (150471 'move' _iterator[150462](150469 call _getIterator call_tmp[669554]))
      Defer
      {
        {
          (150491 call _freeIterator _iterator[150462])
        }
      }
      { scopeless type
        (150480 'move' _indexOfInterest[150461](150477 call iteratorIndex _iterator[150462]))
      }
      ForLoop[150463]
      {
        unknown i[150484] "index var" "insert auto destroy"
        (481700 'end of statement')
        (150486 'move' i[150484] _indexOfInterest[150461])
        (481701 'end of statement' i[150484])
        {
          unknown call_tmp[669561] "expr temp" "maybe param" "maybe type" "temp"
          (669564 'move' call_tmp[669561](150449 call + i[150484] 1))
          unknown call_tmp[669566] "expr temp" "maybe param" "maybe type" "temp"
          (669569 'move' call_tmp[669566](150452 call(386028 call (partial) data _mt[243] this[150601]) call_tmp[669561]))
          unknown call_tmp[669573] "expr temp" "maybe param" "maybe type" "temp"
          (669576 'move' call_tmp[669573](150456 call(386034 call (partial) data _mt[243] this[150601]) i[150484]))
          (150457 call = call_tmp[669566] call_tmp[669573])
          (481703 'end of statement' i[150484] i[150484])
        }
        label _continueLabel[150466]
        _indexOfInterest[150461]
        _iterator[150462]
      }
      label _breakLabel[150467]
    }
    unknown call_tmp[669582] "expr temp" "maybe param" "maybe type" "temp"
    (669585 'move' call_tmp[669582](150500 call low _mt[243] shiftrange[150388]))
    unknown call_tmp[669587] "expr temp" "maybe param" "maybe type" "temp"
    (669590 'move' call_tmp[669587](150504 call(386040 call (partial) data _mt[243] this[150601]) call_tmp[669582]))
    unknown call_tmp[669594] "expr temp" "maybe param" "maybe type" "temp"
    (669597 'move' call_tmp[669594](386045 call irv _mt[243] this[150601]))
    (150506 call = call_tmp[669587] call_tmp[669594])
    (520426 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).sparseShiftArrayBack[150515](arg _mt[150607]:_MT[238], arg this[150605]:BaseSparseArrImpl[150571](?), arg shiftrange[150513]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150534] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150535] "expr temp" "temp"
      (150544 'move' _iterator[150535](150542 call _getIterator shiftrange[150513]))
      Defer
      {
        {
          (150560 call _freeIterator _iterator[150535])
        }
      }
      { scopeless type
        (150549 'move' _indexOfInterest[150534](150546 call iteratorIndex _iterator[150535]))
      }
      ForLoop[150536]
      {
        unknown i[150553] "index var" "insert auto destroy"
        (481708 'end of statement')
        (150555 'move' i[150553] _indexOfInterest[150534])
        (481709 'end of statement' i[150553])
        {
          unknown call_tmp[669601] "expr temp" "maybe param" "maybe type" "temp"
          (669604 'move' call_tmp[669601](150522 call(386051 call (partial) data _mt[243] this[150605]) i[150553]))
          unknown call_tmp[669608] "expr temp" "maybe param" "maybe type" "temp"
          (669611 'move' call_tmp[669608](150526 call + i[150553] 1))
          unknown call_tmp[669613] "expr temp" "maybe param" "maybe type" "temp"
          (669616 'move' call_tmp[669613](150529 call(386057 call (partial) data _mt[243] this[150605]) call_tmp[669608]))
          (150530 call = call_tmp[669601] call_tmp[669613])
          (481711 'end of statement' i[150553] i[150553])
        }
        label _continueLabel[150539]
        _indexOfInterest[150534]
        _iterator[150535]
      }
      label _breakLabel[150540]
    }
    (520428 return _void[55])
  }
  type BaseSparseArrImpl[150571](?) val super[355722]:BaseSparseArr[149900](?) "delay instantiation" "super class" unknown data[149926] "local field" "unsafe"(149924 call chpl__buildArrayRuntimeType(149922 call chpl__ensureDomainExpr(149917 call nnzDom _mt[243] dom[149878])) eltType[149714]) unknown irv[150046] eltType[149714]
  function _delete_dist[150617](arg dist[150614]:unmanaged BaseDist[415506], arg privatized[150620]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150630 call(150626 call (partial) dsiDestroyDist _mt[243] dist[150614]))
    (481714 'end of statement')
    unknown tmp[427190] "maybe param" "temp"
    (427201 'move' tmp[427190] 1)
    unknown call_tmp[669622] "expr temp" "maybe param" "maybe type" "temp"
    (669625 'move' call_tmp[669622](427203 call _cond_invalid tmp[427190]))
    if call_tmp[669622]
    {
      (427206 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568698] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568699] "maybe param" "temp"
    unknown call_tmp[669627] "expr temp" "maybe param" "maybe type" "temp"
    (669630 'move' call_tmp[669627](427191 call isTrue tmp[427190]))
    (568704 'move' tmp[568699](568702 call _cond_test call_tmp[669627]))
    if tmp[568699]
    {
      unknown tmp[568706] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568708 'move' tmp[568706](427194 call isTrue privatized[150620]))
      (568713 'move' tmp[568698](568710 '_paramFoldLogical' tmp[568699] tmp[568706]))
    }
    {
      (568718 'move' tmp[568698](568715 '_paramFoldLogical' tmp[568699] 0))
    }
    unknown call_tmp[669632] "expr temp" "maybe param" "maybe type" "temp"
    (669635 'move' call_tmp[669632](150647 call _cond_test tmp[568698]))
    if call_tmp[669632]
    {
      unknown call_tmp[669639] "expr temp" "maybe param" "maybe type" "temp"
      (669642 'move' call_tmp[669639](150639 call pid _mt[243] dist[150614]))
      (150644 call _freePrivatizedClass call_tmp[669639] dist[150614])
    }
    (150653 call chpl__delete dist[150614])
    (520430 return _void[55])
  }
  function _delete_dom[150662](arg dom[150660]:_any[178](?), arg privatized[150665]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150675 call(150671 call (partial) dsiDestroyDom _mt[243] dom[150660]))
    (481718 'end of statement')
    unknown tmp[427211] "maybe param" "temp"
    (427222 'move' tmp[427211] 1)
    unknown call_tmp[669646] "expr temp" "maybe param" "maybe type" "temp"
    (669649 'move' call_tmp[669646](427224 call _cond_invalid tmp[427211]))
    if call_tmp[669646]
    {
      (427227 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568725] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568726] "maybe param" "temp"
    unknown call_tmp[669651] "expr temp" "maybe param" "maybe type" "temp"
    (669654 'move' call_tmp[669651](427212 call isTrue tmp[427211]))
    (568731 'move' tmp[568726](568729 call _cond_test call_tmp[669651]))
    if tmp[568726]
    {
      unknown tmp[568733] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568735 'move' tmp[568733](427215 call isTrue privatized[150665]))
      (568740 'move' tmp[568725](568737 '_paramFoldLogical' tmp[568726] tmp[568733]))
    }
    {
      (568745 'move' tmp[568725](568742 '_paramFoldLogical' tmp[568726] 0))
    }
    unknown call_tmp[669656] "expr temp" "maybe param" "maybe type" "temp"
    (669659 'move' call_tmp[669656](150692 call _cond_test tmp[568725]))
    if call_tmp[669656]
    {
      unknown call_tmp[669663] "expr temp" "maybe param" "maybe type" "temp"
      (669666 'move' call_tmp[669663](150684 call pid _mt[243] dom[150660]))
      (150689 call _freePrivatizedClass call_tmp[669663] dom[150660])
    }
    (150698 call chpl__delete dom[150660])
    (520432 return _void[55])
  }
  function _delete_arr[150710](arg arr[150707]:unmanaged BaseArr[415491], param arg privatized[150713]:bool[10], arg deinitElts[150717] :
  1 =
  1) : _unknown[51] "no return value for void"
  {
    (150729 call(150723 call (partial) dsiDestroyArr _mt[243] arr[150707])(deinitElts = deinitElts[150717]))
    (481722 'end of statement')
    (150739 call(150735 call (partial) decEltCountsIfNeeded _mt[243] arr[150707]))
    (481723 'end of statement')
    unknown tmp[427232] "maybe param" "temp"
    (427243 'move' tmp[427232] 1)
    unknown call_tmp[669672] "expr temp" "maybe param" "maybe type" "temp"
    (669675 'move' call_tmp[669672](427245 call _cond_invalid tmp[427232]))
    if call_tmp[669672]
    {
      (427248 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568752] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568753] "maybe param" "temp"
    unknown call_tmp[669677] "expr temp" "maybe param" "maybe type" "temp"
    (669680 'move' call_tmp[669677](427233 call isTrue tmp[427232]))
    (568758 'move' tmp[568753](568756 call _cond_test call_tmp[669677]))
    if tmp[568753]
    {
      unknown tmp[568760] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568762 'move' tmp[568760](427236 call isTrue privatized[150713]))
      (568767 'move' tmp[568752](568764 '_paramFoldLogical' tmp[568753] tmp[568760]))
    }
    {
      (568772 'move' tmp[568752](568769 '_paramFoldLogical' tmp[568753] 0))
    }
    unknown call_tmp[669682] "expr temp" "maybe param" "maybe type" "temp"
    (669685 'move' call_tmp[669682](150755 call _cond_test tmp[568752]))
    if call_tmp[669682]
    {
      unknown call_tmp[669689] "expr temp" "maybe param" "maybe type" "temp"
      (669692 'move' call_tmp[669689](150747 call pid _mt[243] arr[150707]))
      (150752 call _freePrivatizedClass call_tmp[669689] arr[150707])
    }
    (150761 call chpl__delete arr[150707])
    (520434 return _void[55])
  }
  function chpl_assignDomainWithGetSetIndices[150773](arg lhs[150770]:_any[178](?), arg rhs[150776]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown arrType[150795] "dead at end of block" "insert auto destroy" "type variable"(150794 call(150790 call (partial) getBaseArrType _mt[243] lhs[150770]))
    (543655 'move' arrType[150795](543654 call(543651 call (partial) getBaseArrType _mt[243] lhs[150770])))
    unknown call_tmp[669700] "maybe param" "maybe type" "temp"
    (669703 'move' call_tmp[669700](150800 call rank _mt[243] lhs[150770]))
    unknown rank[150803] "dead at end of block" "param"
    (543657 'init var' rank[150803] call_tmp[669700])
    (150806 'end of statement')
    unknown idxType[150811] "dead at end of block" "insert auto destroy" "type variable"(150808 call idxType _mt[243] lhs[150770])
    (543663 'move' idxType[150811](543660 call idxType _mt[243] lhs[150770]))
    unknown call_tmp[669711] "maybe param" "maybe type" "temp"
    (669714 'move' call_tmp[669711](150815 call stridable _mt[243] lhs[150770]))
    unknown stridable[150818] "dead at end of block" "param"
    (543665 'init var' stridable[150818] call_tmp[669711])
    (150821 'end of statement')
    {
      unknown _indexOfInterest[151021] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151022] "expr temp" "temp"
      unknown call_tmp[669718] "expr temp" "maybe param" "maybe type" "temp"
      (669721 'move' call_tmp[669718](150824 call _arrs _mt[243] lhs[150770]))
      (151031 'move' _iterator[151022](151029 call _getIterator call_tmp[669718]))
      Defer
      {
        {
          (151048 call _freeIterator _iterator[151022])
        }
      }
      { scopeless type
        (151037 'move' _indexOfInterest[151021](151034 call iteratorIndex _iterator[151022]))
      }
      ForLoop[151023]
      {
        unknown e[151041] "index var" "insert auto destroy"
        (481728 'end of statement')
        (151043 'move' e[151041] _indexOfInterest[151021])
        (481729 'end of statement' e[151041])
        {
          const tmp[151012] "const" "temp"
          unknown call_tmp[669723] "expr temp" "maybe param" "maybe type" "temp"
          (669726 'move' call_tmp[669723](151009 '_wide_get_locale' e[151041]))
          (151014 'move' tmp[151012](151010 'deref' call_tmp[669723]))
          {
            {
              unknown call_tmp[669728] "expr temp" "maybe param" "maybe type" "temp"
              (669731 'move' call_tmp[669728](150830 'to nilable class from type' arrType[150795]))
              unknown call_tmp[669733] "maybe param" "maybe type" "temp"
              (669736 'move' call_tmp[669733](150831 call _cast call_tmp[669728] e[151041]))
              unknown eCastQ[150833] "dead at end of block" "insert auto destroy"
              (543667 'init var' eCastQ[150833] call_tmp[669733])
              (150836 'end of statement')
              unknown call_tmp[669738] "expr temp" "maybe param" "maybe type" "temp"
              (669741 'move' call_tmp[669738](150840 call == eCastQ[150833] nil[44]))
              unknown call_tmp[669743] "expr temp" "maybe param" "maybe type" "temp"
              (669746 'move' call_tmp[669743](150888 call _cond_test call_tmp[669738]))
              if call_tmp[669743]
              {
                unknown call_tmp[669748] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                (669751 'move' call_tmp[669748](461913 'typeof' lhs[150770]))
                unknown call_tmp[669753] "expr temp" "maybe param" "maybe type" "temp"
                (669756 'move' call_tmp[669753](150863 call _cast string[26] call_tmp[669748]))
                unknown call_tmp[669758] "expr temp" "maybe param" "maybe type" "temp"
                (669761 'move' call_tmp[669758](150884 call _cast string[26] arrType[150795]))
                (150886 call halt "internal error: " call_tmp[669753] " contains an bad array type " call_tmp[669758])
                (481733 'end of statement' arrType[150795])
              }
              unknown call_tmp[669763] "maybe param" "maybe type" "temp"
              (669766 'move' call_tmp[669763](150894 call postfix! eCastQ[150833]))
              unknown eCast[150896] "dead at end of block" "insert auto destroy"
              (543669 'init var' eCast[150896] call_tmp[669763])
              (150899 'end of statement')
              unknown call_tmp[669770] "maybe param" "maybe type" "temp"
              (669773 'move' call_tmp[669770](150905 call(150901 call (partial) getIndices _mt[243] rhs[150776])))
              unknown inds[150906] "dead at end of block" "insert auto destroy"
              (543671 'init var' inds[150906] call_tmp[669770])
              (150909 'end of statement')
              unknown tmp[150922] "dead at end of block" "insert auto destroy"
              unknown call_tmp[669775] "expr temp" "maybe param" "maybe type" "temp"
              (669778 'move' call_tmp[669775](150919 call range[64319](?) idxType[150811] bounded[64208] stridable[150818]))
              unknown call_tmp[669780] "expr temp" "maybe param" "maybe type" "temp"
              (669783 'move' call_tmp[669780](150920 call * rank[150803] call_tmp[669775]))
              (543673 'default init var' tmp[150922] call_tmp[669780])
              (150925 'end of statement' arrType[150795] e[151041] eCastQ[150833] idxType[150811])
              {
                unknown i[150964] "dead at end of block" "insert auto destroy"
                (543675 'init var' i[150964] 0)
                (481737 'end of statement')
                unknown tmp[150965] "maybe param" "temp"
                unknown call_tmp[669785] "expr temp" "maybe param" "maybe type" "temp"
                (669788 'move' call_tmp[669785](150929 call - rank[150803] 1))
                (150977 'move' tmp[150965](150975 call chpl_compute_low_param_loop_bound 0 call_tmp[669785]))
                unknown tmp[150966] "maybe param" "temp"
                unknown call_tmp[669790] "expr temp" "maybe param" "maybe type" "temp"
                (669793 'move' call_tmp[669790](150982 call - rank[150803] 1))
                (150987 'move' tmp[150966](150985 call chpl_compute_high_param_loop_bound 0 call_tmp[669790]))
                unknown tmp[150967] "maybe param" "temp"
                (150990 'move' tmp[150967] 1)
                ParamForLoop[150992]
                { i[150964] tmp[150965] tmp[150966] tmp[150967]
                  {
                    unknown call_tmp[669795] "maybe param" "maybe type" "temp"
                    (669798 'move' call_tmp[669795](150936 call inds[150906] i[150964]))
                    unknown from[150937] "dead at end of block" "insert auto destroy"
                    (543677 'init var' from[150937] call_tmp[669795])
                    (150940 'end of statement' inds[150906] i[150964])
                    unknown call_tmp[669800] "expr temp" "maybe param" "maybe type" "temp"
                    (669803 'move' call_tmp[669800](150945 call tmp[150922] i[150964]))
                    unknown call_tmp[669807] "expr temp" "maybe param" "maybe type" "temp"
                    (669810 'move' call_tmp[669807](150958 call range[64319](?) idxType[150811] bounded[64208] stridable[150818]))
                    unknown call_tmp[669812] "expr temp" "maybe param" "maybe type" "temp"
                    (669815 'move' call_tmp[669812](150960 call(150947 call (partial) safeCast _mt[243] from[150937]) call_tmp[669807]))
                    (150961 call = call_tmp[669800] call_tmp[669812])
                    (481740 'end of statement' tmp[150922] i[150964] from[150937] idxType[150811])
                  }
                }
                label _unused_continueLabel[150969]
                label _breakLabel[150968]
              }
              (151007 call(151002 call (partial) dsiReallocate _mt[243] eCast[150896]) tmp[150922])
              (481745 'end of statement' eCast[150896] tmp[150922])
            }
            (151017 'on block' 0 tmp[151012])
          }
        }
        label _continueLabel[151026]
        _indexOfInterest[151021]
        _iterator[151022]
      }
      label _breakLabel[151027]
    }
    unknown call_tmp[669823] "expr temp" "maybe param" "maybe type" "temp"
    (669826 'move' call_tmp[669823](151064 call(151060 call (partial) getIndices _mt[243] rhs[150776])))
    (151066 call(151056 call (partial) dsiSetIndices _mt[243] lhs[150770]) call_tmp[669823])
    (481748 'end of statement')
    {
      unknown _indexOfInterest[151109] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151110] "expr temp" "temp"
      unknown call_tmp[669830] "expr temp" "maybe param" "maybe type" "temp"
      (669833 'move' call_tmp[669830](151070 call _arrs _mt[243] lhs[150770]))
      (151119 'move' _iterator[151110](151117 call _getIterator call_tmp[669830]))
      Defer
      {
        {
          (151136 call _freeIterator _iterator[151110])
        }
      }
      { scopeless type
        (151125 'move' _indexOfInterest[151109](151122 call iteratorIndex _iterator[151110]))
      }
      ForLoop[151111]
      {
        unknown e[151129] "index var" "insert auto destroy"
        (481750 'end of statement')
        (151131 'move' e[151129] _indexOfInterest[151109])
        (481751 'end of statement' e[151129])
        {
          unknown call_tmp[669835] "expr temp" "maybe param" "maybe type" "temp"
          (669838 'move' call_tmp[669835](151075 'to nilable class from type' arrType[150795]))
          unknown call_tmp[669840] "maybe param" "maybe type" "temp"
          (669843 'move' call_tmp[669840](151076 call _cast call_tmp[669835] e[151129]))
          unknown eCastQ[151078] "dead at end of block" "insert auto destroy"
          (543679 'init var' eCastQ[151078] call_tmp[669840])
          (151081 'end of statement')
          unknown call_tmp[669845] "maybe param" "maybe type" "temp"
          (669848 'move' call_tmp[669845](151084 call postfix! eCastQ[151078]))
          unknown eCast[151086] "dead at end of block" "insert auto destroy"
          (543681 'init var' eCast[151086] call_tmp[669845])
          (151089 'end of statement' arrType[150795] e[151129] eCastQ[151078])
          const tmp[151101] "const" "temp"
          unknown call_tmp[669850] "expr temp" "maybe param" "maybe type" "temp"
          (669853 'move' call_tmp[669850](151098 '_wide_get_locale' e[151129]))
          (151103 'move' tmp[151101](151099 'deref' call_tmp[669850]))
          {
            (151096 call(151092 call (partial) dsiPostReallocate _mt[243] eCast[151086]))
            (481756 'end of statement' eCast[151086])
            (151106 'on block' 0 tmp[151101])
          }
        }
        label _continueLabel[151114]
        _indexOfInterest[151109]
        _iterator[151110]
      }
      label _breakLabel[151115]
    }
    unknown call_tmp[669859] "expr temp" "maybe param" "maybe type" "temp"
    (669862 'move' call_tmp[669859](151148 call(151144 call (partial) dsiSupportsPrivatization _mt[243] lhs[150770])))
    unknown call_tmp[669864] "expr temp" "maybe param" "maybe type" "temp"
    (669867 'move' call_tmp[669864](151155 call _cond_test call_tmp[669859]))
    if call_tmp[669864]
    {
      (151152 call _reprivatize lhs[150770])
    }
    (520436 return _void[55])
  }
  where {
    unknown call_tmp[669869] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (669872 'move' call_tmp[669869](461915 'typeof' lhs[150770]))
    unknown call_tmp[669874] "expr temp" "maybe param" "maybe type" "temp"
    (669877 'move' call_tmp[669874](150783 call _to_borrowed call_tmp[669869]))
    (354371 'is_subtype' BaseRectangularDom[382283](?) call_tmp[669874])
  }
  function chpl_assignDomainWithIndsIterSafeForRemoving[151169](arg lhs[151166]:_any[178](?), arg rhs[151172]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[151225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151226] "expr temp" "temp"
      unknown call_tmp[669881] "expr temp" "maybe param" "maybe type" "temp"
      (669884 'move' call_tmp[669881](151201 call(151197 call (partial) dsiIndsIterSafeForRemoving _mt[243] lhs[151166])))
      (151235 'move' _iterator[151226](151233 call _getIterator call_tmp[669881]))
      Defer
      {
        {
          (151252 call _freeIterator _iterator[151226])
        }
      }
      { scopeless type
        (151241 'move' _indexOfInterest[151225](151238 call iteratorIndex _iterator[151226]))
      }
      ForLoop[151227]
      {
        unknown i[151245] "index var" "insert auto destroy"
        (481760 'end of statement')
        (151247 'move' i[151245] _indexOfInterest[151225])
        (481761 'end of statement' i[151245])
        {
          unknown call_tmp[669888] "expr temp" "maybe param" "maybe type" "temp"
          (669891 'move' call_tmp[669888](151208 call(151203 call (partial) contains _mt[243] rhs[151172]) i[151245]))
          unknown call_tmp[669893] "expr temp" "maybe param" "maybe type" "temp"
          (669896 'move' call_tmp[669893](151209 call ! call_tmp[669888]))
          unknown call_tmp[669898] "expr temp" "maybe param" "maybe type" "temp"
          (669901 'move' call_tmp[669898](151220 call _cond_test call_tmp[669893]))
          if call_tmp[669898]
          {
            (151217 call(151212 call (partial) dsiRemove _mt[243] lhs[151166]) i[151245])
            (481763 'end of statement' i[151245])
          }
        }
        label _continueLabel[151230]
        _indexOfInterest[151225]
        _iterator[151226]
      }
      label _breakLabel[151231]
    }
    {
      unknown _indexOfInterest[151285] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151286] "expr temp" "temp"
      (151295 'move' _iterator[151286](151293 call _getIterator rhs[151172]))
      Defer
      {
        {
          (151311 call _freeIterator _iterator[151286])
        }
      }
      { scopeless type
        (151300 'move' _indexOfInterest[151285](151297 call iteratorIndex _iterator[151286]))
      }
      ForLoop[151287]
      {
        unknown i[151304] "index var" "insert auto destroy"
        (481766 'end of statement')
        (151306 'move' i[151304] _indexOfInterest[151285])
        (481767 'end of statement' i[151304])
        {
          unknown call_tmp[669907] "expr temp" "maybe param" "maybe type" "temp"
          (669910 'move' call_tmp[669907](151268 call(151263 call (partial) dsiMember _mt[243] lhs[151166]) i[151304]))
          unknown call_tmp[669912] "expr temp" "maybe param" "maybe type" "temp"
          (669915 'move' call_tmp[669912](151269 call ! call_tmp[669907]))
          unknown call_tmp[669917] "expr temp" "maybe param" "maybe type" "temp"
          (669920 'move' call_tmp[669917](151280 call _cond_test call_tmp[669912]))
          if call_tmp[669917]
          {
            (151277 call(151272 call (partial) dsiAdd _mt[243] lhs[151166]) i[151304])
            (481769 'end of statement' i[151304])
          }
        }
        label _continueLabel[151290]
        _indexOfInterest[151285]
        _iterator[151286]
      }
      label _breakLabel[151291]
    }
    (520438 return _void[55])
  }
  where {
    unknown tmp[427253] "maybe param" "temp"
    unknown call_tmp[669924] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (669927 'move' call_tmp[669924](461917 'typeof' lhs[151166]))
    unknown call_tmp[669929] "expr temp" "maybe param" "maybe type" "temp"
    (669932 'move' call_tmp[669929](151179 call _to_borrowed call_tmp[669924]))
    (427264 'move' tmp[427253](354372 'is_subtype' BaseSparseDom[382293](?) call_tmp[669929]))
    unknown call_tmp[669934] "expr temp" "maybe param" "maybe type" "temp"
    (669937 'move' call_tmp[669934](427266 call _cond_invalid tmp[427253]))
    if call_tmp[669934]
    {
      (427269 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568779] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568780] "maybe param" "temp"
    unknown call_tmp[669939] "expr temp" "maybe param" "maybe type" "temp"
    (669942 'move' call_tmp[669939](427254 call isTrue tmp[427253]))
    (568785 'move' tmp[568780](568783 call _cond_test call_tmp[669939]))
    if tmp[568780]
    {
      (568790 'move' tmp[568779](568787 '_paramFoldLogical' tmp[568780] 1))
    }
    {
      unknown tmp[568792] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[669944] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (669947 'move' call_tmp[669944](461919 'typeof' lhs[151166]))
      unknown call_tmp[669949] "expr temp" "maybe param" "maybe type" "temp"
      (669952 'move' call_tmp[669949](151187 call _to_borrowed call_tmp[669944]))
      unknown call_tmp[669954] "expr temp" "maybe param" "maybe type" "temp"
      (669957 'move' call_tmp[669954](354373 'is_subtype' BaseAssociativeDom[382288](?) call_tmp[669949]))
      (568794 'move' tmp[568792](427258 call isTrue call_tmp[669954]))
      (568799 'move' tmp[568779](568796 '_paramFoldLogical' tmp[568780] tmp[568792]))
    }
    (748351 call chpl_statementLevelSymbol tmp[568779])
  }
  (355166 'used modules list'(145460 'use' ChapelArray[113678])(145462 'use' ChapelRange[64183])(145465 'use' ChapelLocks[187302])(145468 'use' ChapelHashtable[200446]))
}