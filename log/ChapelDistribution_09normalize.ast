AST dump for ChapelDistribution after pass normalize.
Module use list: ChapelArray ChapelRange ChapelLocks ChapelHashtable Sort 

{
  function chpl__init_ChapelDistribution[416100]() : void[4] "insert line file info" "module init"
  {
    (520523 return _void[55])
  }
  function BaseDist[145968].deinit[145498](arg _mt[145972]:_MT[238], arg this[145970]:BaseDist[145968]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519799 return _void[55])
  }
  function BaseDist[145968].remove[145505](arg _mt[145976]:_MT[238], arg this[145974]:BaseDist[145968]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519803] "RVV" "temp"
    unknown free_dist[145511] "dead at end of block" "insert auto destroy"
    (543659 'init var' free_dist[145511] 0)
    (145514 'end of statement')
    unknown call_tmp[667543] "expr temp" "maybe param" "maybe type" "temp"
    (667546 'move' call_tmp[667543](145518 call(385483 call (partial) dsiTrackDomains _mt[243] this[145974])))
    unknown call_tmp[667548] "expr temp" "maybe param" "maybe type" "temp"
    (667551 'move' call_tmp[667548](145591 call _cond_test call_tmp[667543]))
    if call_tmp[667548]
    {
      const tmp[145576] "const" "temp"
      unknown call_tmp[667553] "expr temp" "maybe param" "maybe type" "temp"
      (667556 'move' call_tmp[667553](145573 '_wide_get_locale' this[145974]))
      (145578 'move' tmp[145576](145574 'deref' call_tmp[667553]))
      {
        {
          unknown call_tmp[667558] "maybe param" "maybe type" "temp"
          (667561 'move' call_tmp[667558](145521 call - 1))
          unknown dom_count[145523] "dead at end of block" "insert auto destroy"
          (543661 'init var' dom_count[145523] call_tmp[667558])
          (145526 'end of statement')
          {
            {
              unknown call_tmp[667565] "expr temp" "maybe param" "maybe type" "temp"
              (667568 'move' call_tmp[667565](360560 call _domsLock _mt[243] this[145974]))
              (145533 call(145529 call (partial) lock _mt[243] call_tmp[667565]))
              (481444 'end of statement')
              unknown call_tmp[667574] "expr temp" "maybe param" "maybe type" "temp"
              (667577 'move' call_tmp[667574](385491 call _free_when_no_doms _mt[243] this[145974]))
              (145538 call = call_tmp[667574] 1)
              (481445 'end of statement')
              unknown call_tmp[667581] "expr temp" "maybe param" "maybe type" "temp"
              (667584 'move' call_tmp[667581](360565 call _doms _mt[243] this[145974]))
              unknown call_tmp[667588] "expr temp" "maybe param" "maybe type" "temp"
              (667591 'move' call_tmp[667588](145543 call size _mt[243] call_tmp[667581]))
              (145546 call = dom_count[145523] call_tmp[667588])
              (481446 'end of statement' dom_count[145523])
              unknown call_tmp[667595] "expr temp" "maybe param" "maybe type" "temp"
              (667598 'move' call_tmp[667595](360570 call _domsLock _mt[243] this[145974]))
              (145554 call(145550 call (partial) unlock _mt[243] call_tmp[667595]))
            }
            (145558 'local block')
          }
          unknown call_tmp[667602] "expr temp" "maybe param" "maybe type" "temp"
          (667605 'move' call_tmp[667602](145561 call == dom_count[145523] 0))
          unknown call_tmp[667607] "expr temp" "maybe param" "maybe type" "temp"
          (667610 'move' call_tmp[667607](145568 call _cond_test call_tmp[667602]))
          if call_tmp[667607]
          {
            (145565 call = free_dist[145511] 1)
            (481449 'end of statement' free_dist[145511])
          }
        }
        (145581 'on block' 0 tmp[145576])
      }
    }
    {
      (145587 call = free_dist[145511] 1)
      (481451 'end of statement' free_dist[145511])
    }
    unknown call_tmp[667612] "expr temp" "maybe param" "maybe type" "temp"
    (667615 'move' call_tmp[667612](145605 call _cond_test free_dist[145511]))
    if call_tmp[667612]
    {
      unknown call_tmp[667617] "expr temp" "maybe param" "maybe type" "temp"
      (667620 'move' call_tmp[667617](145599 call _to_unmanaged this[145974]))
      (519809 'move' ret[519803](519808 'coerce' call_tmp[667617] unmanaged BaseDist?[415575]))
      gotoReturn _end_remove[519801] _end_remove[519801]
    }
    {
      (519815 'move' ret[519803](519814 'coerce' nil[44] unmanaged BaseDist?[415575]))
      gotoReturn _end_remove[519801] _end_remove[519801]
    }
    label _end_remove[519801]
    (519805 return ret[519803])
  }
  { scopeless type
    unmanaged BaseDist?[415575]
  }
  function BaseDist[145968].remove_dom[145621](arg _mt[145980]:_MT[238], arg this[145978]:BaseDist[145968], arg x[145618]:unmanaged BaseDom[415521]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519821] "RVV" "temp"
    unknown call_tmp[667622] "maybe param" "maybe type" "temp"
    (667625 'move' call_tmp[667622](145625 call - 1))
    unknown count[145627] "dead at end of block" "insert auto destroy"
    (543663 'init var' count[145627] call_tmp[667622])
    (145630 'end of statement')
    const tmp[145696] "const" "temp"
    unknown call_tmp[667627] "expr temp" "maybe param" "maybe type" "temp"
    (667630 'move' call_tmp[667627](145693 '_wide_get_locale' this[145978]))
    (145698 'move' tmp[145696](145694 'deref' call_tmp[667627]))
    {
      {
        unknown call_tmp[667632] "maybe param" "maybe type" "temp"
        (667635 'move' call_tmp[667632](145634 call - 1))
        unknown cnt[145636] "dead at end of block" "insert auto destroy"
        (543665 'init var' cnt[145636] call_tmp[667632])
        (145639 'end of statement')
        {
          {
            unknown call_tmp[667639] "expr temp" "maybe param" "maybe type" "temp"
            (667642 'move' call_tmp[667639](360575 call _domsLock _mt[243] this[145978]))
            (145646 call(145642 call (partial) lock _mt[243] call_tmp[667639]))
            (481455 'end of statement')
            unknown call_tmp[667648] "expr temp" "maybe param" "maybe type" "temp"
            (667651 'move' call_tmp[667648](360580 call _doms _mt[243] this[145978]))
            (145655 call(145650 call (partial) remove _mt[243] call_tmp[667648]) x[145618])
            (481456 'end of statement')
            unknown call_tmp[667657] "expr temp" "maybe param" "maybe type" "temp"
            (667660 'move' call_tmp[667657](360585 call _doms _mt[243] this[145978]))
            unknown call_tmp[667664] "expr temp" "maybe param" "maybe type" "temp"
            (667667 'move' call_tmp[667664](145659 call size _mt[243] call_tmp[667657]))
            (145662 call = cnt[145636] call_tmp[667664])
            (481457 'end of statement' cnt[145636])
            unknown call_tmp[667671] "expr temp" "maybe param" "maybe type" "temp"
            (667674 'move' call_tmp[667671](385506 call _free_when_no_doms _mt[243] this[145978]))
            unknown call_tmp[667676] "expr temp" "maybe param" "maybe type" "temp"
            (667679 'move' call_tmp[667676](145666 call ! call_tmp[667671]))
            unknown call_tmp[667681] "expr temp" "maybe param" "maybe type" "temp"
            (667684 'move' call_tmp[667681](145673 call _cond_test call_tmp[667676]))
            if call_tmp[667681]
            {
              (145670 call += cnt[145636] 1)
              (481459 'end of statement' cnt[145636])
            }
            unknown call_tmp[667688] "expr temp" "maybe param" "maybe type" "temp"
            (667691 'move' call_tmp[667688](360590 call _domsLock _mt[243] this[145978]))
            (145683 call(145679 call (partial) unlock _mt[243] call_tmp[667688]))
          }
          (145687 'local block')
        }
        (145690 call = count[145627] cnt[145636])
        (481462 'end of statement' count[145627] cnt[145636])
      }
      (145701 'on block' 0 tmp[145696])
    }
    unknown call_tmp[667695] "expr temp" "maybe param" "maybe type" "temp"
    (667698 'move' call_tmp[667695](145706 call == count[145627] 0))
    (519827 'move' ret[519821](519826 'coerce' call_tmp[667695] bool[10]))
    gotoReturn _end_remove_dom[519819] _end_remove_dom[519819]
    (481465 'end of statement' count[145627])
    label _end_remove_dom[519819]
    (519823 return ret[519821])
  }
  { scopeless type
    bool[10]
  }
  function BaseDist[145968].add_dom[145720](arg _mt[145984]:_MT[238], arg this[145982]:BaseDist[145968], arg x[145717]:unmanaged BaseDom[415521]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[145749] "const" "temp"
    unknown call_tmp[667700] "expr temp" "maybe param" "maybe type" "temp"
    (667703 'move' call_tmp[667700](145746 '_wide_get_locale' this[145982]))
    (145751 'move' tmp[145749](145747 'deref' call_tmp[667700]))
    {
      {
        unknown call_tmp[667707] "expr temp" "maybe param" "maybe type" "temp"
        (667710 'move' call_tmp[667707](360595 call _domsLock _mt[243] this[145982]))
        (145728 call(145724 call (partial) lock _mt[243] call_tmp[667707]))
        (481467 'end of statement')
        unknown call_tmp[667716] "expr temp" "maybe param" "maybe type" "temp"
        (667719 'move' call_tmp[667716](360600 call _doms _mt[243] this[145982]))
        (145737 call(145732 call (partial) add _mt[243] call_tmp[667716]) x[145717])
        (481468 'end of statement')
        unknown call_tmp[667725] "expr temp" "maybe param" "maybe type" "temp"
        (667728 'move' call_tmp[667725](360605 call _domsLock _mt[243] this[145982]))
        (145744 call(145740 call (partial) unlock _mt[243] call_tmp[667725]))
      }
      (145754 'on block' 0 tmp[145749])
    }
    (519831 return _void[55])
  }
  function BaseDist[145968].dsiNewRectangularDom[145766](arg _mt[145988]:_MT[238], arg this[145986]:BaseDist[145968], param arg rank[145763]:int(64)[13], arg idxType[145768]:_any[178](?), param arg stridable[145771]:bool[10], arg inds[145774]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145795 call compilerError "rectangular domains not supported by this distribution")
    (519833 return _void[55])
  }
  function BaseDist[145968].dsiNewAssociativeDom[145804](arg _mt[145992]:_MT[238], arg this[145990]:BaseDist[145968], arg idxType[145802]:_any[178](?), param arg parSafe[145807]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145829 call compilerError "associative domains not supported by this distribution")
    (519835 return _void[55])
  }
  function BaseDist[145968].dsiNewSparseDom[145840](arg _mt[145996]:_MT[238], arg this[145994]:BaseDist[145968], param arg rank[145837]:int(64)[13], arg idxType[145842]:_any[178](?), arg dom[145845]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145867 call compilerError "sparse domains not supported by this distribution")
    (519837 return _void[55])
  }
  function BaseDist[145968].dsiSupportsPrivatization[145874](arg _mt[146000]:_MT[238], arg this[145998]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519841] "RVV" "param" "temp"
    (519846 'move' ret[519841](519845 'deref' 0))
    (519843 return ret[519841])
  }
  function BaseDist[145968].dsiRequiresPrivatization[145884](arg _mt[146004]:_MT[238], arg this[146002]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519850] "RVV" "param" "temp"
    (519855 'move' ret[519850](519854 'deref' 0))
    (519852 return ret[519850])
  }
  function BaseDist[145968].dsiDestroyDist[145894](arg _mt[146008]:_MT[238], arg this[146006]:BaseDist[145968]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519857 return _void[55])
  }
  function BaseDist[145968].dsiDisplayRepresentation[145901](arg _mt[146012]:_MT[238], arg this[146010]:BaseDist[145968]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145922 call writeln "<no way to display representation>")
    (519859 return _void[55])
  }
  function BaseDist[145968].trackDomains[145929](arg _mt[146016]:_MT[238], arg this[146014]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519863] "RVV" "param" "temp"
    (519868 'move' ret[519863](519867 'deref' 1))
    (519865 return ret[519863])
  }
  function BaseDist[145968].dsiTrackDomains[145939](arg _mt[146020]:_MT[238], arg this[146018]:BaseDist[145968]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519872] "RVV" "temp"
    (519877 'move' ret[519872](519876 'deref' 1))
    (519874 return ret[519872])
  }
  function BaseDist[145968].singleton[145949](arg _mt[146024]:_MT[238], arg this[146022]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519881] "RVV" "param" "temp"
    (519886 'move' ret[519881](519885 'deref' 0))
    (519883 return ret[519881])
  }
  function BaseDist[145968].dsiIsLayout[145959](arg _mt[146028]:_MT[238], arg this[146026]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519890] "RVV" "param" "temp"
    (519895 'move' ret[519890](519894 'deref' 0))
    (519892 return ret[519890])
  }
  type BaseDist[145968] val super[355763]:object[22] "super class" unknown _doms[145476](145475 call chpl__simpleSet[204962](?) unmanaged BaseDom[415521]) val _domsLock[145481]:chpl_LocalSpinlock[187432] chpl_LocalSpinlock[187432] val _free_when_no_doms[145486]:bool[10] bool[10] val pid[145492]:int(64)[13] nullPid[113718] int(64)[13]
  type unmanaged BaseDist[415584]
  type unmanaged BaseDist?[415575]
  type BaseDist?[415572](?)
  type BaseDist[382449](?)
  function BaseDom[146767].init[146064](arg _mt[146771]:_MT[238], arg this[146769]:BaseDom[146767]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461803] "temporary of super field" "temp"
    (461811 'move' super_tmp[461803](461804 '.v' this[146769] c"super"))
    (461807 call init _mt[243] super_tmp[461803])
    (481480 'end of statement')
    unknown tmp[461738] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492439] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[667732] "expr temp" "maybe param" "maybe type" "temp"
      (667735 'move' call_tmp[667732](461740 '.v' this[146769] c"super"))
      (492443 'move' call_type_tmp[492439](461743 'typeof' call_tmp[667732]))
    }
    (461744 'move' tmp[461738] call_type_tmp[492439])
    unknown call_tmp[667737] "maybe param" "maybe type" "temp"
    (667740 'move' call_tmp[667737](461749 'cast' tmp[461738] this[146769]))
    unknown chpl__thisAsParent[461746] "dead at end of block" "insert auto destroy" "temp"
    (543667 'init var' chpl__thisAsParent[461746] call_tmp[667737] tmp[461738])
    (461752 'setcid' chpl__thisAsParent[461746])
    (481481 'end of statement')
    unknown tmp[461755] "temp"
    unknown call_tmp[667742] "expr temp" "maybe param" "maybe type" "temp"
    (667745 'move' call_tmp[667742](461758 call chpl__simpleSet[204962](?) unmanaged BaseArr[415569]))
    (461760 'default init var' tmp[461755] call_tmp[667742])
    (461762 '.=' this[146769] c"_arrs" tmp[461755])
    (481482 'end of statement')
    val tmp[461766]:int(64)[13] "temp"
    (461769 'default init var' tmp[461766] int(64)[13])
    (461771 '.=' this[146769] c"_arrs_containing_dom" tmp[461766])
    (481483 'end of statement')
    val tmp[461775]:chpl_LocalSpinlock[187432] "temp"
    (461778 'default init var' tmp[461775] chpl_LocalSpinlock[187432])
    (461780 '.=' this[146769] c"_arrsLock" tmp[461775])
    (481484 'end of statement')
    val tmp[461784]:bool[10] "temp"
    (461787 'default init var' tmp[461784] bool[10])
    (461789 '.=' this[146769] c"_free_when_no_arrs" tmp[461784])
    (481485 'end of statement')
    unknown tmp[461794] "temp"
    (461797 'init var' tmp[461794] nullPid[113718] int(64)[13])
    (461799 'init field' this[146769] c"pid" tmp[461794])
    (481486 'end of statement')
    (461814 'setcid' this[146769])
    (519897 return _void[55])
  }
  function BaseDom[146767].deinit[146071](arg _mt[146775]:_MT[238], arg this[146773]:BaseDom[146767]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519899 return _void[55])
  }
  function BaseDom[146767].dsiMyDist[146078](arg _mt[146779]:_MT[238], arg this[146777]:BaseDom[146767]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519903] "RVV" "temp"
    (146101 call halt "internal error: dsiMyDist is not implemented")
    (481488 'end of statement')
    unknown ret[146106] "dead at end of block" "insert auto destroy" "unsafe"
    (543669 'default init var' ret[146106] unmanaged BaseDist[415584])
    (146109 'end of statement')
    (519909 'move' ret[519903](519908 'coerce' ret[146106] unmanaged BaseDist[415584]))
    gotoReturn _end_dsiMyDist[519901] _end_dsiMyDist[519901]
    (481489 'end of statement' ret[146106])
    label _end_dsiMyDist[519901]
    (519905 return ret[519903])
  }
  { scopeless type
    unmanaged BaseDist[415584]
  }
  function BaseDom[146767].remove[146118](arg _mt[146783]:_MT[238], arg this[146781]:BaseDom[146767]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519915] "RVV" "temp"
    unknown call_tmp[667749] "expr temp" "maybe param" "maybe type" "temp"
    (667752 'move' call_tmp[667749](146132 call(385529 call (partial) dsiMyDist _mt[243] this[146781])))
    unknown call_tmp[667756] "expr temp" "maybe param" "maybe type" "temp"
    (667759 'move' call_tmp[667756](146139 call(146135 call (partial) dsiTrackDomains _mt[243] call_tmp[667749])))
    unknown call_tmp[667763] "expr temp" "maybe param" "maybe type" "temp"
    (667766 'move' call_tmp[667763](146142 call(385535 call (partial) dsiLinksDistribution _mt[243] this[146781])))
    unknown call_tmp[667768] "expr temp" "maybe param" "maybe type" "temp"
    (667771 'move' call_tmp[667768](146143 call == call_tmp[667756] call_tmp[667763]))
    (146146 call assert call_tmp[667768])
    (481491 'end of statement')
    unknown ret_dom[146153] "dead at end of block" "insert auto destroy"
    (543671 'init var' ret_dom[146153] nil[44] unmanaged BaseDom?[415581])
    (146156 'end of statement')
    unknown ret_dist[146161] "dead at end of block" "insert auto destroy"
    (543673 'init var' ret_dist[146161] nil[44] unmanaged BaseDist?[415575])
    (146164 'end of statement')
    unknown call_tmp[667775] "maybe param" "maybe type" "temp"
    (667778 'move' call_tmp[667775](146167 call(385541 call (partial) dsiMyDist _mt[243] this[146781])))
    unknown dist[146168] "dead at end of block" "insert auto destroy"
    (543675 'init var' dist[146168] call_tmp[667775])
    (146171 'end of statement')
    unknown free_dom[146173] "dead at end of block" "insert auto destroy"
    (543677 'init var' free_dom[146173] 0)
    (146176 'end of statement')
    unknown remove_dist[146178] "dead at end of block" "insert auto destroy"
    (543679 'init var' remove_dist[146178] 0)
    (146181 'end of statement')
    const tmp[146266] "const" "temp"
    unknown call_tmp[667780] "expr temp" "maybe param" "maybe type" "temp"
    (667783 'move' call_tmp[667780](146263 '_wide_get_locale' this[146781]))
    (146268 'move' tmp[146266](146264 'deref' call_tmp[667780]))
    {
      {
        unknown arr_count[146184] "dead at end of block" "insert auto destroy"
        (543681 'init var' arr_count[146184] 0)
        (146187 'end of statement')
        {
          {
            unknown call_tmp[667787] "expr temp" "maybe param" "maybe type" "temp"
            (667790 'move' call_tmp[667787](360612 call _arrsLock _mt[243] this[146781]))
            (146194 call(146190 call (partial) lock _mt[243] call_tmp[667787]))
            (481492 'end of statement')
            unknown call_tmp[667796] "expr temp" "maybe param" "maybe type" "temp"
            (667799 'move' call_tmp[667796](360617 call _arrs _mt[243] this[146781]))
            unknown call_tmp[667803] "expr temp" "maybe param" "maybe type" "temp"
            (667806 'move' call_tmp[667803](146199 call size _mt[243] call_tmp[667796]))
            (146202 call = arr_count[146184] call_tmp[667803])
            (481493 'end of statement' arr_count[146184])
            unknown call_tmp[667810] "expr temp" "maybe param" "maybe type" "temp"
            (667813 'move' call_tmp[667810](385551 call _arrs_containing_dom _mt[243] this[146781]))
            (146207 call += arr_count[146184] call_tmp[667810])
            (481495 'end of statement' arr_count[146184])
            unknown call_tmp[667817] "expr temp" "maybe param" "maybe type" "temp"
            (667820 'move' call_tmp[667817](385556 call _free_when_no_arrs _mt[243] this[146781]))
            (146212 call = call_tmp[667817] 1)
            (481497 'end of statement')
            unknown call_tmp[667824] "expr temp" "maybe param" "maybe type" "temp"
            (667827 'move' call_tmp[667824](360622 call _arrsLock _mt[243] this[146781]))
            (146220 call(146216 call (partial) unlock _mt[243] call_tmp[667824]))
          }
          (146224 'local block')
        }
        unknown call_tmp[667831] "expr temp" "maybe param" "maybe type" "temp"
        (667834 'move' call_tmp[667831](146227 call == arr_count[146184] 0))
        unknown call_tmp[667836] "expr temp" "maybe param" "maybe type" "temp"
        (667839 'move' call_tmp[667836](146259 call _cond_test call_tmp[667831]))
        if call_tmp[667836]
        {
          (146231 call = free_dom[146173] 1)
          (481499 'end of statement' free_dom[146173])
          unknown call_tmp[667843] "expr temp" "maybe param" "maybe type" "temp"
          (667846 'move' call_tmp[667843](146237 call(385562 call (partial) dsiLinksDistribution _mt[243] this[146781])))
          unknown call_tmp[667848] "expr temp" "maybe param" "maybe type" "temp"
          (667851 'move' call_tmp[667848](146255 call _cond_test call_tmp[667843]))
          if call_tmp[667848]
          {
            unknown call_tmp[667855] "expr temp" "maybe param" "maybe type" "temp"
            (667858 'move' call_tmp[667855](146248 call _to_unmanaged this[146781]))
            unknown call_tmp[667860] "expr temp" "maybe param" "maybe type" "temp"
            (667863 'move' call_tmp[667860](146250 call(146242 call (partial) remove_dom _mt[243] dist[146168]) call_tmp[667855]))
            (146251 call = remove_dist[146178] call_tmp[667860])
            (481501 'end of statement' remove_dist[146178] dist[146168])
          }
        }
      }
      (146271 'on block' 0 tmp[146266])
    }
    unknown call_tmp[667865] "expr temp" "maybe param" "maybe type" "temp"
    (667868 'move' call_tmp[667865](146283 call _cond_test free_dom[146173]))
    if call_tmp[667865]
    {
      unknown call_tmp[667870] "expr temp" "maybe param" "maybe type" "temp"
      (667873 'move' call_tmp[667870](146279 call _to_unmanaged this[146781]))
      (146280 call = ret_dom[146153] call_tmp[667870])
      (481504 'end of statement' ret_dom[146153])
    }
    unknown call_tmp[667875] "expr temp" "maybe param" "maybe type" "temp"
    (667878 'move' call_tmp[667875](146294 call _cond_test remove_dist[146178]))
    if call_tmp[667875]
    {
      (146291 call = ret_dist[146161] dist[146168])
      (481506 'end of statement' ret_dist[146161] dist[146168])
    }
    unknown call_tmp[667880] "expr temp" "maybe param" "maybe type" "temp"
    (667883 'move' call_tmp[667880](146302 call _build_tuple ret_dom[146153] ret_dist[146161]))
    unknown call_tmp[667885] "expr temp" "maybe param" "maybe type" "temp"
    (667888 'move' call_tmp[667885](519920 call _build_tuple unmanaged BaseDom?[415581] unmanaged BaseDist?[415575]))
    (519924 'move' ret[519915](519923 'coerce' call_tmp[667880] call_tmp[667885]))
    gotoReturn _end_remove[519913] _end_remove[519913]
    (481509 'end of statement' ret_dom[146153] ret_dist[146161])
    label _end_remove[519913]
    (519917 return ret[519915])
  }
  { scopeless type
    (146127 call _build_tuple unmanaged BaseDom?[415581] unmanaged BaseDist?[415575])
  }
  function BaseDom[146767].remove_arr[146316](arg _mt[146787]:_MT[238], arg this[146785]:BaseDom[146767], arg x[146313]:unmanaged BaseArr[415569], param arg rmFromList[146319] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519930] "RVV" "temp"
    unknown call_tmp[667890] "maybe param" "maybe type" "temp"
    (667893 'move' call_tmp[667890](146324 call - 1))
    unknown count[146326] "dead at end of block" "insert auto destroy"
    (543683 'init var' count[146326] call_tmp[667890])
    (146329 'end of statement')
    const tmp[146412] "const" "temp"
    unknown call_tmp[667895] "expr temp" "maybe param" "maybe type" "temp"
    (667898 'move' call_tmp[667895](146409 '_wide_get_locale' this[146785]))
    (146414 'move' tmp[146412](146410 'deref' call_tmp[667895]))
    {
      {
        unknown call_tmp[667900] "maybe param" "maybe type" "temp"
        (667903 'move' call_tmp[667900](146333 call - 1))
        unknown cnt[146335] "dead at end of block" "insert auto destroy"
        (543685 'init var' cnt[146335] call_tmp[667900])
        (146338 'end of statement')
        {
          {
            unknown call_tmp[667907] "expr temp" "maybe param" "maybe type" "temp"
            (667910 'move' call_tmp[667907](360628 call _arrsLock _mt[243] this[146785]))
            (146345 call(146341 call (partial) lock _mt[243] call_tmp[667907]))
            (481512 'end of statement')
            unknown call_tmp[667914] "expr temp" "maybe param" "maybe type" "temp"
            (667917 'move' call_tmp[667914](146362 call _cond_test rmFromList[146319]))
            if call_tmp[667914]
            {
              unknown call_tmp[667921] "expr temp" "maybe param" "maybe type" "temp"
              (667924 'move' call_tmp[667921](360633 call _arrs _mt[243] this[146785]))
              (146355 call(146350 call (partial) remove _mt[243] call_tmp[667921]) x[146313])
            }
            {
              unknown call_tmp[667930] "expr temp" "maybe param" "maybe type" "temp"
              (667933 'move' call_tmp[667930](385581 call _arrs_containing_dom _mt[243] this[146785]))
              (146359 call -= call_tmp[667930] 1)
            }
            unknown call_tmp[667937] "expr temp" "maybe param" "maybe type" "temp"
            (667940 'move' call_tmp[667937](360638 call _arrs _mt[243] this[146785]))
            unknown call_tmp[667944] "expr temp" "maybe param" "maybe type" "temp"
            (667947 'move' call_tmp[667944](146370 call size _mt[243] call_tmp[667937]))
            (146373 call = cnt[146335] call_tmp[667944])
            (481515 'end of statement' cnt[146335])
            unknown call_tmp[667951] "expr temp" "maybe param" "maybe type" "temp"
            (667954 'move' call_tmp[667951](385588 call _arrs_containing_dom _mt[243] this[146785]))
            (146378 call += cnt[146335] call_tmp[667951])
            (481517 'end of statement' cnt[146335])
            unknown call_tmp[667958] "expr temp" "maybe param" "maybe type" "temp"
            (667961 'move' call_tmp[667958](385593 call _free_when_no_arrs _mt[243] this[146785]))
            unknown call_tmp[667963] "expr temp" "maybe param" "maybe type" "temp"
            (667966 'move' call_tmp[667963](146382 call ! call_tmp[667958]))
            unknown call_tmp[667968] "expr temp" "maybe param" "maybe type" "temp"
            (667971 'move' call_tmp[667968](146389 call _cond_test call_tmp[667963]))
            if call_tmp[667968]
            {
              (146386 call += cnt[146335] 1)
              (481519 'end of statement' cnt[146335])
            }
            unknown call_tmp[667975] "expr temp" "maybe param" "maybe type" "temp"
            (667978 'move' call_tmp[667975](360643 call _arrsLock _mt[243] this[146785]))
            (146399 call(146395 call (partial) unlock _mt[243] call_tmp[667975]))
          }
          (146403 'local block')
        }
        (146406 call = count[146326] cnt[146335])
        (481522 'end of statement' count[146326] cnt[146335])
      }
      (146417 'on block' 0 tmp[146412])
    }
    unknown call_tmp[667982] "expr temp" "maybe param" "maybe type" "temp"
    (667985 'move' call_tmp[667982](146422 call == count[146326] 0))
    (519936 'move' ret[519930](519935 'coerce' call_tmp[667982] bool[10]))
    gotoReturn _end_remove_arr[519928] _end_remove_arr[519928]
    (481525 'end of statement' count[146326])
    label _end_remove_arr[519928]
    (519932 return ret[519930])
  }
  { scopeless type
    bool[10]
  }
  function BaseDom[146767].add_arr[146436](arg _mt[146791]:_MT[238], arg this[146789]:BaseDom[146767], arg x[146433]:unmanaged BaseArr[415569], param arg locking[146439] :
  1 =
  1, param arg addToList[146443] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146497] "const" "temp"
    unknown call_tmp[667987] "expr temp" "maybe param" "maybe type" "temp"
    (667990 'move' call_tmp[667987](146494 '_wide_get_locale' this[146789]))
    (146499 'move' tmp[146497](146495 'deref' call_tmp[667987]))
    {
      {
        unknown call_tmp[667992] "expr temp" "maybe param" "maybe type" "temp"
        (667995 'move' call_tmp[667992](146455 call _cond_test locking[146439]))
        if call_tmp[667992]
        {
          unknown call_tmp[667999] "expr temp" "maybe param" "maybe type" "temp"
          (668002 'move' call_tmp[667999](360648 call _arrsLock _mt[243] this[146789]))
          (146453 call(146449 call (partial) lock _mt[243] call_tmp[667999]))
        }
        unknown call_tmp[668006] "expr temp" "maybe param" "maybe type" "temp"
        (668009 'move' call_tmp[668006](146475 call _cond_test addToList[146443]))
        if call_tmp[668006]
        {
          unknown call_tmp[668013] "expr temp" "maybe param" "maybe type" "temp"
          (668016 'move' call_tmp[668013](360653 call _arrs _mt[243] this[146789]))
          (146468 call(146463 call (partial) add _mt[243] call_tmp[668013]) x[146433])
        }
        {
          unknown call_tmp[668022] "expr temp" "maybe param" "maybe type" "temp"
          (668025 'move' call_tmp[668022](385607 call _arrs_containing_dom _mt[243] this[146789]))
          (146472 call += call_tmp[668022] 1)
        }
        unknown call_tmp[668027] "expr temp" "maybe param" "maybe type" "temp"
        (668030 'move' call_tmp[668027](146489 call _cond_test locking[146439]))
        if call_tmp[668027]
        {
          unknown call_tmp[668034] "expr temp" "maybe param" "maybe type" "temp"
          (668037 'move' call_tmp[668034](360658 call _arrsLock _mt[243] this[146789]))
          (146487 call(146483 call (partial) unlock _mt[243] call_tmp[668034]))
        }
      }
      (146502 'on block' 0 tmp[146497])
    }
    (519940 return _void[55])
  }
  function BaseDom[146767].remove_containing_arr[146515](arg _mt[146795]:_MT[238], arg this[146793]:BaseDom[146767], arg x[146512]:unmanaged BaseArr[415569]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519944] "RVV" "temp"
    unknown call_tmp[668041] "maybe param" "maybe type" "temp"
    (668044 'move' call_tmp[668041](146518 call - 1))
    unknown count[146520] "dead at end of block" "insert auto destroy"
    (543687 'init var' count[146520] call_tmp[668041])
    (146523 'end of statement')
    const tmp[146587] "const" "temp"
    unknown call_tmp[668046] "expr temp" "maybe param" "maybe type" "temp"
    (668049 'move' call_tmp[668046](146584 '_wide_get_locale' this[146793]))
    (146589 'move' tmp[146587](146585 'deref' call_tmp[668046]))
    {
      {
        unknown call_tmp[668051] "maybe param" "maybe type" "temp"
        (668054 'move' call_tmp[668051](146527 call - 1))
        unknown cnt[146529] "dead at end of block" "insert auto destroy"
        (543689 'init var' cnt[146529] call_tmp[668051])
        (146532 'end of statement')
        unknown call_tmp[668058] "expr temp" "maybe param" "maybe type" "temp"
        (668061 'move' call_tmp[668058](360663 call _arrsLock _mt[243] this[146793]))
        (146539 call(146535 call (partial) lock _mt[243] call_tmp[668058]))
        (481531 'end of statement')
        unknown call_tmp[668067] "expr temp" "maybe param" "maybe type" "temp"
        (668070 'move' call_tmp[668067](385615 call _arrs_containing_dom _mt[243] this[146793]))
        (146543 call -= call_tmp[668067] 1)
        (481532 'end of statement')
        unknown call_tmp[668074] "expr temp" "maybe param" "maybe type" "temp"
        (668077 'move' call_tmp[668074](360668 call _arrs _mt[243] this[146793]))
        unknown call_tmp[668081] "expr temp" "maybe param" "maybe type" "temp"
        (668084 'move' call_tmp[668081](146548 call size _mt[243] call_tmp[668074]))
        (146551 call = cnt[146529] call_tmp[668081])
        (481533 'end of statement' cnt[146529])
        unknown call_tmp[668088] "expr temp" "maybe param" "maybe type" "temp"
        (668091 'move' call_tmp[668088](385622 call _arrs_containing_dom _mt[243] this[146793]))
        (146556 call += cnt[146529] call_tmp[668088])
        (481535 'end of statement' cnt[146529])
        unknown call_tmp[668095] "expr temp" "maybe param" "maybe type" "temp"
        (668098 'move' call_tmp[668095](385627 call _free_when_no_arrs _mt[243] this[146793]))
        unknown call_tmp[668100] "expr temp" "maybe param" "maybe type" "temp"
        (668103 'move' call_tmp[668100](146560 call ! call_tmp[668095]))
        unknown call_tmp[668105] "expr temp" "maybe param" "maybe type" "temp"
        (668108 'move' call_tmp[668105](146567 call _cond_test call_tmp[668100]))
        if call_tmp[668105]
        {
          (146564 call += cnt[146529] 1)
          (481537 'end of statement' cnt[146529])
        }
        unknown call_tmp[668112] "expr temp" "maybe param" "maybe type" "temp"
        (668115 'move' call_tmp[668112](360673 call _arrsLock _mt[243] this[146793]))
        (146577 call(146573 call (partial) unlock _mt[243] call_tmp[668112]))
        (481539 'end of statement')
        (146581 call = count[146520] cnt[146529])
        (481540 'end of statement' count[146520] cnt[146529])
      }
      (146592 'on block' 0 tmp[146587])
    }
    unknown call_tmp[668119] "expr temp" "maybe param" "maybe type" "temp"
    (668122 'move' call_tmp[668119](146597 call == count[146520] 0))
    (519949 'move' ret[519944](519948 'deref' call_tmp[668119]))
    gotoReturn _end_remove_containing_arr[519942] _end_remove_containing_arr[519942]
    (481543 'end of statement' count[146520])
    label _end_remove_containing_arr[519942]
    (519946 return ret[519944])
  }
  function BaseDom[146767].add_containing_arr[146610](arg _mt[146799]:_MT[238], arg this[146797]:BaseDom[146767], arg x[146607]:unmanaged BaseArr[415569]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146636] "const" "temp"
    unknown call_tmp[668124] "expr temp" "maybe param" "maybe type" "temp"
    (668127 'move' call_tmp[668124](146633 '_wide_get_locale' this[146797]))
    (146638 'move' tmp[146636](146634 'deref' call_tmp[668124]))
    {
      {
        unknown call_tmp[668131] "expr temp" "maybe param" "maybe type" "temp"
        (668134 'move' call_tmp[668131](360678 call _arrsLock _mt[243] this[146797]))
        (146618 call(146614 call (partial) lock _mt[243] call_tmp[668131]))
        (481545 'end of statement')
        unknown call_tmp[668140] "expr temp" "maybe param" "maybe type" "temp"
        (668143 'move' call_tmp[668140](385638 call _arrs_containing_dom _mt[243] this[146797]))
        (146623 call += call_tmp[668140] 1)
        (481546 'end of statement')
        unknown call_tmp[668147] "expr temp" "maybe param" "maybe type" "temp"
        (668150 'move' call_tmp[668147](360683 call _arrsLock _mt[243] this[146797]))
        (146631 call(146627 call (partial) unlock _mt[243] call_tmp[668147]))
      }
      (146641 'on block' 0 tmp[146636])
    }
    (519953 return _void[55])
  }
  function BaseDom[146767].dsiSupportsPrivatization[146649](arg _mt[146803]:_MT[238], arg this[146801]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519957] "RVV" "param" "temp"
    (519962 'move' ret[519957](519961 'deref' 0))
    (519959 return ret[519957])
  }
  function BaseDom[146767].dsiRequiresPrivatization[146659](arg _mt[146807]:_MT[238], arg this[146805]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519966] "RVV" "param" "temp"
    (519971 'move' ret[519966](519970 'deref' 0))
    (519968 return ret[519966])
  }
  function BaseDom[146767].linksDistribution[146669](arg _mt[146811]:_MT[238], arg this[146809]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519975] "RVV" "param" "temp"
    (519980 'move' ret[519975](519979 'deref' 1))
    (519977 return ret[519975])
  }
  function BaseDom[146767].dsiLinksDistribution[146679](arg _mt[146815]:_MT[238], arg this[146813]:BaseDom[146767]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519984] "RVV" "temp"
    (519989 'move' ret[519984](519988 'deref' 1))
    (519986 return ret[519984])
  }
  function BaseDom[146767].dsiDestroyDom[146689](arg _mt[146819]:_MT[238], arg this[146817]:BaseDom[146767]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519991 return _void[55])
  }
  function BaseDom[146767].dsiDisplayRepresentation[146696](arg _mt[146823]:_MT[238], arg this[146821]:BaseDom[146767]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (146701 call writeln "<no way to display representation>")
    (519993 return _void[55])
  }
  function BaseDom[146767].dsiSupportsAutoLocalAccess[146708](arg _mt[146827]:_MT[238], arg this[146825]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519997] "RVV" "param" "temp"
    (520002 'move' ret[519997](520001 'deref' 0))
    (519999 return ret[519997])
  }
  function BaseDom[415416](?).isDefaultRectangular[146718](arg _mt[146831]:_MT[238], arg this[146829]:BaseDom[415416](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520006] "RVV" "param" "temp"
    (520011 'move' ret[520006](520010 'deref' 0))
    (520008 return ret[520006])
  }
  function BaseDom[146767].isDefaultRectangular[146728](arg _mt[146835]:_MT[238], arg this[146833]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520015] "RVV" "param" "temp"
    (520020 'move' ret[520015](520019 'deref' 0))
    (520017 return ret[520015])
  }
  function BaseDom[146767].isSliceDomainView[146738](arg _mt[146839]:_MT[238], arg this[146837]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520024] "RVV" "param" "temp"
    (520029 'move' ret[520024](520028 'deref' 0))
    (520026 return ret[520024])
  }
  function BaseDom[146767].isRankChangeDomainView[146748](arg _mt[146843]:_MT[238], arg this[146841]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520033] "RVV" "param" "temp"
    (520038 'move' ret[520033](520037 'deref' 0))
    (520035 return ret[520033])
  }
  function BaseDom[146767].isReindexDomainView[146758](arg _mt[146847]:_MT[238], arg this[146845]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520042] "RVV" "param" "temp"
    (520047 'move' ret[520042](520046 'deref' 0))
    (520044 return ret[520042])
  }
  type BaseDom[146767] val super[355767]:object[22] "super class" unknown _arrs[146037](146036 call chpl__simpleSet[204962](?) unmanaged BaseArr[415569]) val _arrs_containing_dom[146042]:int(64)[13] int(64)[13] val _arrsLock[146047]:chpl_LocalSpinlock[187432] chpl_LocalSpinlock[187432] val _free_when_no_arrs[146052]:bool[10] bool[10] val pid[146058]:int(64)[13] nullPid[113718] int(64)[13]
  type unmanaged BaseDom?[415581]
  type BaseDom?[415578](?)
  type unmanaged BaseDom[415521]
  type BaseDom[415416](?)
  type BaseDom[372854](?)
  function BaseRectangularDom[146935](?).getBaseArrType[146868](arg _mt[146939]:_MT[238], arg this[146937]:BaseRectangularDom[146935](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[520051] "RVV" "temp" "type variable"
    unknown call_tmp[668156] "expr temp" "maybe param" "maybe type" "temp"
    (668159 'move' call_tmp[668156](385647 call rank _mt[243] this[146937]))
    unknown call_tmp[668163] "expr temp" "maybe param" "maybe type" "temp"
    (668166 'move' call_tmp[668163](385652 call idxType _mt[243] this[146937]))
    unknown call_tmp[668170] "expr temp" "maybe param" "maybe type" "temp"
    (668173 'move' call_tmp[668170](385657 call stridable _mt[243] this[146937]))
    unknown call_tmp[668175] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (668178 'move' call_tmp[668175](748080 'new' BaseArrOverRectangularDom[385642](?)(rank = call_tmp[668156])(idxType = call_tmp[668163])(stridable = call_tmp[668170])(_chpl_manager = unmanaged[220](?))))
    unknown tmp[146882] "dead at end of block" "insert auto destroy"
    (543691 'init var' tmp[146882] call_tmp[668175])
    (146885 'end of statement')
    unknown call_tmp[668180] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (668183 'move' call_tmp[668180](146888 'typeof' tmp[146882]))
    (520056 'move' ret[520051](520055 'deref' call_tmp[668180]))
    gotoReturn _end_getBaseArrType[520049] _end_getBaseArrType[520049]
    (481559 'end of statement' tmp[146882])
    label _end_getBaseArrType[520049]
    (520053 return ret[520051])
  }
  function BaseRectangularDom[146935](?).deinit[146895](arg _mt[146943]:_MT[238], arg this[146941]:BaseRectangularDom[146935](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520060 return _void[55])
  }
  function BaseRectangularDom[146935](?).dsiAdd[146904](arg _mt[146947]:_MT[238], arg this[146945]:BaseRectangularDom[146935](?), in arg x[146902]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520064] "RVV" "temp"
    (146909 call compilerError "Cannot add indices to a rectangular domain")
    (481561 'end of statement')
    (520069 'move' ret[520064](520068 'deref' 0))
    (520066 return ret[520064])
  }
  function BaseRectangularDom[146935](?).dsiRemove[146921](arg _mt[146951]:_MT[238], arg this[146949]:BaseRectangularDom[146935](?), arg x[146919]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520073] "RVV" "temp"
    (146926 call compilerError "Cannot remove indices from a rectangular domain")
    (481563 'end of statement')
    (520078 'move' ret[520073](520077 'deref' 0))
    (520075 return ret[520073])
  }
  type BaseRectangularDom[146935](?) val super[355769]:BaseDom[146767] "super class" unknown rank[146854] "param" int(64)[13] unknown idxType[146858] "type variable" unknown stridable[146862] "param" bool[10]
  type BaseRectangularDom[382354](?)
  function BaseSparseDomImpl[148004](?).deinit[146970](arg _mt[148008]:_MT[238], arg this[148006]:BaseSparseDomImpl[148004](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520080 return _void[55])
  }
  function BaseSparseDomImpl[148004](?).dsiBulkAdd[146988](arg _mt[148012]:_MT[238], arg this[148010]:BaseSparseDomImpl[148004](?), arg inds[146985]:_array[133594](?), arg dataSorted[146991] :
  0 =
  0, arg isUnique[146995] :
  0 =
  0, arg preserveInds[146999] :
  1 =
  1, arg addOn[147003] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[520084] "RVV" "temp"
    unknown tmp[427205] "maybe param" "temp"
    (427216 'move' tmp[427205](147007 call ! dataSorted[146991]))
    unknown call_tmp[668185] "expr temp" "maybe param" "maybe type" "temp"
    (668188 'move' call_tmp[668185](427218 call _cond_invalid tmp[427205]))
    if call_tmp[668185]
    {
      (427221 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568639] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568640] "maybe param" "temp"
    unknown call_tmp[668190] "expr temp" "maybe param" "maybe type" "temp"
    (668193 'move' call_tmp[668190](427206 call isTrue tmp[427205]))
    (568645 'move' tmp[568640](568643 call _cond_test call_tmp[668190]))
    if tmp[568640]
    {
      unknown tmp[568647] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568649 'move' tmp[568647](427209 call isTrue preserveInds[146999]))
      (568654 'move' tmp[568639](568651 '_paramFoldLogical' tmp[568640] tmp[568647]))
    }
    {
      (568659 'move' tmp[568639](568656 '_paramFoldLogical' tmp[568640] 0))
    }
    unknown call_tmp[668195] "expr temp" "maybe param" "maybe type" "temp"
    (668198 'move' call_tmp[668195](147037 call _cond_test tmp[568639]))
    if call_tmp[668195]
    {
      unknown _inds[147013] "dead at end of block" "insert auto destroy"
      (543693 'init var' _inds[147013] inds[146985])
      (147016 'end of statement')
      unknown call_tmp[668202] "expr temp" "maybe param" "maybe type" "temp"
      (668205 'move' call_tmp[668202](147024 call(385678 call (partial) bulkAdd_help _mt[243] this[148010]) _inds[147013] dataSorted[146991] isUnique[146995] addOn[147003]))
      (520089 'move' ret[520084](520088 'deref' call_tmp[668202]))
      gotoReturn _end_dsiBulkAdd[520082] _end_dsiBulkAdd[520082]
      (481566 'end of statement' _inds[147013])
    }
    {
      unknown call_tmp[668209] "expr temp" "maybe param" "maybe type" "temp"
      (668212 'move' call_tmp[668209](147033 call(385686 call (partial) bulkAdd_help _mt[243] this[148010]) inds[146985] dataSorted[146991] isUnique[146995] addOn[147003]))
      (520094 'move' ret[520084](520093 'deref' call_tmp[668209]))
      gotoReturn _end_dsiBulkAdd[520082] _end_dsiBulkAdd[520082]
    }
    label _end_dsiBulkAdd[520082]
    (520086 return ret[520084])
  }
  where {
    unknown call_tmp[668216] "expr temp" "maybe param" "maybe type" "temp"
    (668219 'move' call_tmp[668216](385663 call rank _mt[243] this[148010]))
    unknown call_tmp[668223] "expr temp" "maybe param" "maybe type" "temp"
    (668226 'move' call_tmp[668223](385668 call idxType _mt[243] this[148010]))
    unknown call_tmp[668228] "expr temp" "maybe param" "maybe type" "temp"
    (668231 'move' call_tmp[668228](146980 call chpl__buildIndexType call_tmp[668216] call_tmp[668223]))
    unknown call_tmp[668235] "expr temp" "maybe param" "maybe type" "temp"
    (668238 'move' call_tmp[668235](461822 call eltType _mt[243] inds[146985]))
    unknown call_tmp[668240] "expr temp" "maybe param" "maybe type" "temp"
    (668243 'move' call_tmp[668240](461826 call == call_tmp[668228] call_tmp[668235]))
    (461820 call & 1 call_tmp[668240])
  }
  function BaseSparseDomImpl[148004](?).bulkAdd_help[147059](arg _mt[148016]:_MT[238], arg this[148014]:BaseSparseDomImpl[148004](?), arg inds[147056]:_array[133594](?), arg dataSorted[147062] :
  0 =
  0, arg isUnique[147066] :
  0 =
  0, arg addOn[147070] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[520100] "RVV" "temp"
    (147092 call halt "Helper function called on the BaseSparseDomImpl")
    (481569 'end of statement')
    unknown call_tmp[668245] "expr temp" "maybe param" "maybe type" "temp"
    (668248 'move' call_tmp[668245](147096 call - 1))
    (520105 'move' ret[520100](520104 'deref' call_tmp[668245]))
    (520102 return ret[520100])
  }
  where {
    unknown call_tmp[668252] "expr temp" "maybe param" "maybe type" "temp"
    (668255 'move' call_tmp[668252](385695 call rank _mt[243] this[148014]))
    unknown call_tmp[668259] "expr temp" "maybe param" "maybe type" "temp"
    (668262 'move' call_tmp[668259](385700 call idxType _mt[243] this[148014]))
    unknown call_tmp[668264] "expr temp" "maybe param" "maybe type" "temp"
    (668267 'move' call_tmp[668264](147052 call chpl__buildIndexType call_tmp[668252] call_tmp[668259]))
    unknown call_tmp[668271] "expr temp" "maybe param" "maybe type" "temp"
    (668274 'move' call_tmp[668271](461834 call eltType _mt[243] inds[147056]))
    unknown call_tmp[668276] "expr temp" "maybe param" "maybe type" "temp"
    (668279 'move' call_tmp[668276](461838 call == call_tmp[668264] call_tmp[668271]))
    (461832 call & 1 call_tmp[668276])
  }
  function BaseSparseDomImpl[148004](?)._grow[147108](arg _mt[148020]:_MT[238], arg this[148018]:BaseSparseDomImpl[148004](?), arg size[147105]:int(64)[13], arg factor[147111] :
  arrayAsVecGrowthFactor[113755] =
  arrayAsVecGrowthFactor[113755]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668283] "expr temp" "maybe param" "maybe type" "temp"
    (668286 'move' call_tmp[668283](360688 call nnzDom _mt[243] this[148018]))
    unknown call_tmp[668290] "maybe param" "maybe type" "temp"
    (668293 'move' call_tmp[668290](147115 call size _mt[243] call_tmp[668283]))
    const oldNNZDomSize[147118] "dead at end of block" "const" "insert auto destroy"
    (543695 'init var' oldNNZDomSize[147118] call_tmp[668290])
    (147121 'end of statement')
    unknown call_tmp[668295] "expr temp" "maybe param" "maybe type" "temp"
    (668298 'move' call_tmp[668295](147125 call > size[147105] oldNNZDomSize[147118]))
    unknown call_tmp[668300] "expr temp" "maybe param" "maybe type" "temp"
    (668303 'move' call_tmp[668300](147160 call _cond_test call_tmp[668295]))
    if call_tmp[668300]
    {
      const _newNNZDomSize[147142] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[568666] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568667] "maybe param" "temp"
      (568672 'move' tmp[568667](568670 call _cond_test oldNNZDomSize[147118]))
      if tmp[568667]
      {
        unknown tmp[568674] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668305] "expr temp" "maybe param" "maybe type" "temp"
        (668308 'move' call_tmp[668305](147131 call * factor[147111] oldNNZDomSize[147118]))
        unknown call_tmp[668310] "expr temp" "maybe param" "maybe type" "temp"
        (668313 'move' call_tmp[668310](147134 call ceil call_tmp[668305]))
        (568676 'move' tmp[568674](147136 call _cast int(64)[13] call_tmp[668310]))
        (568681 'move' tmp[568666](568678 '_paramFoldLogical' tmp[568667] tmp[568674]))
      }
      {
        (568686 'move' tmp[568666](568683 '_paramFoldLogical' tmp[568667] 1))
      }
      (543697 'init var' _newNNZDomSize[147142] tmp[568666])
      (147145 'end of statement' oldNNZDomSize[147118] oldNNZDomSize[147118])
      unknown call_tmp[668317] "expr temp" "maybe param" "maybe type" "temp"
      (668320 'move' call_tmp[668317](385712 call nnzDom _mt[243] this[148018]))
      unknown call_tmp[668322] "expr temp" "maybe param" "maybe type" "temp"
      (668325 'move' call_tmp[668322](147149 call chpl_build_low_bounded_range 1))
      unknown call_tmp[668327] "expr temp" "maybe param" "maybe type" "temp"
      (668330 'move' call_tmp[668327](147152 call # call_tmp[668322] _newNNZDomSize[147142]))
      unknown call_tmp[668332] "expr temp" "maybe param" "maybe type" "temp"
      (668335 'move' call_tmp[668332](147155 call chpl__buildDomainExpr call_tmp[668327]))
      (147157 call = call_tmp[668317] call_tmp[668332])
      (481573 'end of statement' _newNNZDomSize[147142])
    }
    (520107 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._shrink[147172](arg _mt[148024]:_MT[238], arg this[148022]:BaseSparseDomImpl[148004](?), arg size[147169]:int(64)[13], arg factor[147175] :
  arrayAsVecGrowthFactor[113755] =
  arrayAsVecGrowthFactor[113755]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668337] "expr temp" "maybe param" "maybe type" "temp"
    (668340 'move' call_tmp[668337](147180 call == size[147169] 0))
    unknown call_tmp[668342] "expr temp" "maybe param" "maybe type" "temp"
    (668345 'move' call_tmp[668342](147246 call _cond_test call_tmp[668337]))
    if call_tmp[668342]
    {
      unknown call_tmp[668349] "expr temp" "maybe param" "maybe type" "temp"
      (668352 'move' call_tmp[668349](385720 call nnzDom _mt[243] this[148022]))
      unknown call_tmp[668354] "expr temp" "maybe param" "maybe type" "temp"
      (668357 'move' call_tmp[668354](147185 call chpl_build_bounded_range 1 0))
      unknown call_tmp[668359] "expr temp" "maybe param" "maybe type" "temp"
      (668362 'move' call_tmp[668359](147188 call chpl__buildDomainExpr call_tmp[668354]))
      (147190 call = call_tmp[668349] call_tmp[668359])
    }
    {
      unknown call_tmp[668366] "expr temp" "maybe param" "maybe type" "temp"
      (668369 'move' call_tmp[668366](360693 call nnzDom _mt[243] this[148022]))
      unknown call_tmp[668373] "expr temp" "maybe param" "maybe type" "temp"
      (668376 'move' call_tmp[668373](147195 call size _mt[243] call_tmp[668366]))
      unknown call_tmp[668378] "expr temp" "maybe param" "maybe type" "temp"
      (668381 'move' call_tmp[668378](147200 call ** factor[147175] 2))
      unknown call_tmp[668383] "expr temp" "maybe param" "maybe type" "temp"
      (668386 'move' call_tmp[668383](147202 call / call_tmp[668373] call_tmp[668378]))
      unknown call_tmp[668388] "maybe param" "maybe type" "temp"
      (668391 'move' call_tmp[668388](147205 call _cast int(64)[13] call_tmp[668383]))
      const shrinkThreshold[147207] "dead at end of block" "const" "insert auto destroy"
      (543699 'init var' shrinkThreshold[147207] call_tmp[668388])
      (147210 'end of statement')
      unknown call_tmp[668393] "expr temp" "maybe param" "maybe type" "temp"
      (668396 'move' call_tmp[668393](147214 call < size[147169] shrinkThreshold[147207]))
      unknown call_tmp[668398] "expr temp" "maybe param" "maybe type" "temp"
      (668401 'move' call_tmp[668398](147242 call _cond_test call_tmp[668393]))
      if call_tmp[668398]
      {
        unknown call_tmp[668405] "expr temp" "maybe param" "maybe type" "temp"
        (668408 'move' call_tmp[668405](360698 call nnzDom _mt[243] this[148022]))
        unknown call_tmp[668412] "expr temp" "maybe param" "maybe type" "temp"
        (668415 'move' call_tmp[668412](147217 call size _mt[243] call_tmp[668405]))
        unknown call_tmp[668417] "expr temp" "maybe param" "maybe type" "temp"
        (668420 'move' call_tmp[668417](147221 call / call_tmp[668412] factor[147175]))
        unknown call_tmp[668422] "maybe param" "maybe type" "temp"
        (668425 'move' call_tmp[668422](147224 call _cast int(64)[13] call_tmp[668417]))
        const _newNNZDomSize[147226] "dead at end of block" "const" "insert auto destroy"
        (543701 'init var' _newNNZDomSize[147226] call_tmp[668422])
        (147229 'end of statement')
        unknown call_tmp[668429] "expr temp" "maybe param" "maybe type" "temp"
        (668432 'move' call_tmp[668429](385729 call nnzDom _mt[243] this[148022]))
        unknown call_tmp[668434] "expr temp" "maybe param" "maybe type" "temp"
        (668437 'move' call_tmp[668434](147234 call chpl_build_bounded_range 1 _newNNZDomSize[147226]))
        unknown call_tmp[668439] "expr temp" "maybe param" "maybe type" "temp"
        (668442 'move' call_tmp[668439](147237 call chpl__buildDomainExpr call_tmp[668434]))
        (147239 call = call_tmp[668429] call_tmp[668439])
        (481576 'end of statement' _newNNZDomSize[147226])
      }
    }
    (520109 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._bulkGrow[147255](arg _mt[148028]:_MT[238], arg this[148026]:BaseSparseDomImpl[148004](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668446] "maybe param" "maybe type" "temp"
    (668449 'move' call_tmp[668446](147259 call(385736 call (partial) getNNZ _mt[243] this[148026])))
    const nnz[147260] "dead at end of block" "const" "insert auto destroy"
    (543703 'init var' nnz[147260] call_tmp[668446])
    (147263 'end of statement')
    unknown call_tmp[668453] "expr temp" "maybe param" "maybe type" "temp"
    (668456 'move' call_tmp[668453](360703 call nnzDom _mt[243] this[148026]))
    unknown call_tmp[668460] "expr temp" "maybe param" "maybe type" "temp"
    (668463 'move' call_tmp[668460](147267 call size _mt[243] call_tmp[668453]))
    unknown call_tmp[668465] "expr temp" "maybe param" "maybe type" "temp"
    (668468 'move' call_tmp[668465](147270 call > nnz[147260] call_tmp[668460]))
    unknown call_tmp[668470] "expr temp" "maybe param" "maybe type" "temp"
    (668473 'move' call_tmp[668470](147303 call _cond_test call_tmp[668465]))
    if call_tmp[668470]
    {
      unknown call_tmp[668475] "expr temp" "maybe param" "maybe type" "temp"
      (668478 'move' call_tmp[668475](147276 call log2 nnz[147260]))
      unknown call_tmp[668480] "expr temp" "maybe param" "maybe type" "temp"
      (668483 'move' call_tmp[668480](147280 call + call_tmp[668475] 1.0))
      unknown call_tmp[668485] "expr temp" "maybe param" "maybe type" "temp"
      (668488 'move' call_tmp[668485](147283 call exp2 call_tmp[668480]))
      unknown call_tmp[668490] "maybe param" "maybe type" "temp"
      (668493 'move' call_tmp[668490](147285 call _cast int(64)[13] call_tmp[668485]))
      const _newNNZDomSize[147287] "dead at end of block" "const" "insert auto destroy"
      (543705 'init var' _newNNZDomSize[147287] call_tmp[668490])
      (147290 'end of statement' nnz[147260])
      unknown call_tmp[668497] "expr temp" "maybe param" "maybe type" "temp"
      (668500 'move' call_tmp[668497](385743 call nnzDom _mt[243] this[148026]))
      unknown call_tmp[668502] "expr temp" "maybe param" "maybe type" "temp"
      (668505 'move' call_tmp[668502](147295 call chpl_build_bounded_range 1 _newNNZDomSize[147287]))
      unknown call_tmp[668507] "expr temp" "maybe param" "maybe type" "temp"
      (668510 'move' call_tmp[668507](147298 call chpl__buildDomainExpr call_tmp[668502]))
      (147300 call = call_tmp[668497] call_tmp[668507])
      (481579 'end of statement' _newNNZDomSize[147287])
    }
    (520111 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._countDuplicates[147313](arg _mt[148032]:_MT[238], arg this[148030]:BaseSparseDomImpl[148004](?), arg arr[147311]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[520115] "RVV" "temp"
    unknown call_tmp[668512] "maybe param" "maybe type" "temp"
    (668515 'move' call_tmp[668512](147320 call - 1))
    unknown dupCount[147322] "dead at end of block" "insert auto destroy"
    (543707 'init var' dupCount[147322] call_tmp[668512])
    (147325 'end of statement')
    unknown call_tmp[668519] "expr temp" "maybe param" "maybe type" "temp"
    (668522 'move' call_tmp[668519](147329 call _dom _mt[243] arr[147311]))
    unknown call_tmp[668526] "expr temp" "maybe param" "maybe type" "temp"
    (668529 'move' call_tmp[668526](147332 call low _mt[243] call_tmp[668519]))
    unknown call_tmp[668531] "maybe param" "maybe type" "temp"
    (668534 'move' call_tmp[668531](147336 call arr[147311] call_tmp[668526]))
    unknown prev[147337] "dead at end of block" "insert auto destroy"
    (543709 'init var' prev[147337] call_tmp[668531])
    (147340 'end of statement')
    {
      unknown _indexOfInterest[147366] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147367] "expr temp" "temp"
      (147376 'move' _iterator[147367](147374 call _getIterator arr[147311]))
      Defer
      {
        {
          (147392 call _freeIterator _iterator[147367])
        }
      }
      { scopeless type
        (147381 'move' _indexOfInterest[147366](147378 call iteratorIndex _iterator[147367]))
      }
      ForLoop[147368]
      {
        unknown a[147385] "index var" "insert auto destroy"
        (481582 'end of statement')
        (147387 'move' a[147385] _indexOfInterest[147366])
        (481583 'end of statement' a[147385])
        {
          unknown call_tmp[668536] "expr temp" "maybe param" "maybe type" "temp"
          (668539 'move' call_tmp[668536](147345 call == a[147385] prev[147337]))
          unknown call_tmp[668541] "expr temp" "maybe param" "maybe type" "temp"
          (668544 'move' call_tmp[668541](147357 call _cond_test call_tmp[668536]))
          if call_tmp[668541]
          {
            (147349 call += dupCount[147322] 1)
            (481585 'end of statement' dupCount[147322])
          }
          {
            (147354 call = prev[147337] a[147385])
            (481587 'end of statement' prev[147337] a[147385])
          }
          {
          }
        }
        label _continueLabel[147371]
        _indexOfInterest[147366]
        _iterator[147367]
      }
      label _breakLabel[147372]
    }
    (520120 'move' ret[520115](520119 'deref' dupCount[147322]))
    gotoReturn _end__countDuplicates[520113] _end__countDuplicates[520113]
    (481590 'end of statement' dupCount[147322])
    label _end__countDuplicates[520113]
    (520117 return ret[520115])
  }
  where {
    (147318 call isArray arr[147311])
  }
  function BaseSparseDomImpl[148004](?).bulkAdd_prepareInds[147409](arg _mt[148036]:_MT[238], arg this[148034]:BaseSparseDomImpl[148004](?), arg inds[147407]:_any[178](?), arg dataSorted[147411]:_any[178](?), arg isUnique[147413]:_any[178](?), arg cmp[147415]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668546] "expr temp" "maybe param" "maybe type" "temp"
    (668549 'move' call_tmp[668546](147422 call ! dataSorted[147411]))
    unknown call_tmp[668551] "expr temp" "maybe param" "maybe type" "temp"
    (668554 'move' call_tmp[668551](147431 call _cond_test call_tmp[668546]))
    if call_tmp[668551]
    {
      (147429 call sort inds[147407](comparator = cmp[147415]))
    }
    unknown call_tmp[668556] "expr temp" "maybe param" "maybe type" "temp"
    (668559 'move' call_tmp[668556](147645 call _cond_test 1))
    if call_tmp[668556]
    {
      unknown tmp[427226] "maybe param" "temp"
      (427237 'move' tmp[427226] dataSorted[147411])
      unknown call_tmp[668561] "expr temp" "maybe param" "maybe type" "temp"
      (668564 'move' call_tmp[668561](427239 call _cond_invalid tmp[427226]))
      if call_tmp[668561]
      {
        (427242 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[568693] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568694] "maybe param" "temp"
      unknown call_tmp[668566] "expr temp" "maybe param" "maybe type" "temp"
      (668569 'move' call_tmp[668566](427227 call isTrue tmp[427226]))
      (568699 'move' tmp[568694](568697 call _cond_test call_tmp[668566]))
      if tmp[568694]
      {
        unknown tmp[568701] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668571] "expr temp" "maybe param" "maybe type" "temp"
        (668574 'move' call_tmp[668571](147443 call isSorted inds[147407](comparator = cmp[147415])))
        unknown call_tmp[668576] "expr temp" "maybe param" "maybe type" "temp"
        (668579 'move' call_tmp[668576](147444 call ! call_tmp[668571]))
        (568703 'move' tmp[568701](427230 call isTrue call_tmp[668576]))
        (568708 'move' tmp[568693](568705 '_paramFoldLogical' tmp[568694] tmp[568701]))
      }
      {
        (568713 'move' tmp[568693](568710 '_paramFoldLogical' tmp[568694] 0))
      }
      unknown call_tmp[668581] "expr temp" "maybe param" "maybe type" "temp"
      (668584 'move' call_tmp[668581](147471 call _cond_test tmp[568693]))
      if call_tmp[668581]
      {
        (147469 call halt "bulkAdd: Data not sorted, call the function with \n              dataSorted=false")
      }
      unknown call_tmp[668586] "expr temp" "maybe param" "maybe type" "temp"
      (668589 'move' call_tmp[668586](147601 call _cond_test isUnique[147413]))
      if call_tmp[668586]
      {
        unknown call_tmp[668593] "expr temp" "maybe param" "maybe type" "temp"
        (668596 'move' call_tmp[668593](147479 call _dom _mt[243] inds[147407]))
        unknown call_tmp[668600] "maybe param" "maybe type" "temp"
        (668603 'move' call_tmp[668600](147482 call low _mt[243] call_tmp[668593]))
        const indsStart[147485] "dead at end of block" "const" "insert auto destroy"
        (543711 'init var' indsStart[147485] call_tmp[668600])
        (147488 'end of statement')
        unknown call_tmp[668607] "expr temp" "maybe param" "maybe type" "temp"
        (668610 'move' call_tmp[668607](147491 call _dom _mt[243] inds[147407]))
        unknown call_tmp[668614] "maybe param" "maybe type" "temp"
        (668617 'move' call_tmp[668614](147494 call high _mt[243] call_tmp[668607]))
        const indsEnd[147497] "dead at end of block" "const" "insert auto destroy"
        (543713 'init var' indsEnd[147497] call_tmp[668614])
        (147500 'end of statement')
        unknown call_tmp[668619] "maybe param" "maybe type" "temp"
        (668622 'move' call_tmp[668619](147504 call inds[147407] indsStart[147485]))
        unknown lastInd[147505] "dead at end of block" "insert auto destroy"
        (543715 'init var' lastInd[147505] call_tmp[668619])
        (147508 'end of statement' indsStart[147485])
        {
          unknown _indexOfInterest[147560] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[147561] "expr temp" "temp"
          unknown call_tmp[668624] "expr temp" "maybe param" "maybe type" "temp"
          (668627 'move' call_tmp[668624](147574 call + indsStart[147485] 1))
          unknown call_tmp[668629] "expr temp" "maybe param" "maybe type" "temp"
          (668632 'move' call_tmp[668629](147578 call chpl_direct_range_iter call_tmp[668624] indsEnd[147497] 1))
          (147570 'move' _iterator[147561](147568 call _getIterator call_tmp[668629]))
          Defer
          {
            {
              (147594 call _freeIterator _iterator[147561])
            }
          }
          { scopeless type
            (147583 'move' _indexOfInterest[147560](147580 call iteratorIndex _iterator[147561]))
          }
          ForLoop[147562]
          {
            unknown i[147587] "index var" "insert auto destroy"
            (481597 'end of statement')
            (147589 'move' i[147587] _indexOfInterest[147560])
            (481598 'end of statement' i[147587])
            {
              unknown call_tmp[668634] "expr temp" "maybe param" "maybe type" "temp"
              (668637 'move' call_tmp[668634](147520 call inds[147407] i[147587]))
              unknown call_tmp[668639] "expr temp" "maybe param" "maybe type" "temp"
              (668642 'move' call_tmp[668639](147522 call == call_tmp[668634] lastInd[147505]))
              unknown call_tmp[668644] "expr temp" "maybe param" "maybe type" "temp"
              (668647 'move' call_tmp[668644](147553 call _cond_test call_tmp[668639]))
              if call_tmp[668644]
              {
                (147543 call halt "bulkAdd: There are duplicates, call the function \n                  with isUnique=false")
              }
              {
                unknown call_tmp[668649] "expr temp" "maybe param" "maybe type" "temp"
                (668652 'move' call_tmp[668649](147549 call inds[147407] i[147587]))
                (147550 call = lastInd[147505] call_tmp[668649])
                (481601 'end of statement' lastInd[147505] i[147587])
              }
            }
            label _continueLabel[147565]
            _indexOfInterest[147560]
            _iterator[147561]
          }
          label _breakLabel[147566]
        }
      }
      {
        unknown _indexOfInterest[147612] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147613] "expr temp" "temp"
        (147622 'move' _iterator[147613](147620 call _getIterator inds[147407]))
        Defer
        {
          {
            (147638 call _freeIterator _iterator[147613])
          }
        }
        { scopeless type
          (147627 'move' _indexOfInterest[147612](147624 call iteratorIndex _iterator[147613]))
        }
        ForLoop[147614]
        {
          unknown i[147631] "index var" "insert auto destroy"
          (481605 'end of statement')
          (147633 'move' i[147631] _indexOfInterest[147612])
          (481606 'end of statement' i[147631])
          (147610 call(385776 call (partial) boundsCheck _mt[243] this[148034]) i[147631])
          (481608 'end of statement' i[147631])
          label _continueLabel[147617]
          _indexOfInterest[147612]
          _iterator[147613]
        }
        label _breakLabel[147618]
      }
    }
    (520124 return _void[55])
    (355242 'used modules list'(147418 'use' Sort[268056]))
  }
  function BaseSparseDomImpl[148004](?).__getActualInsertPts[147655](arg _mt[148040]:_MT[238], arg this[148038]:BaseSparseDomImpl[148004](?), arg d[147653]:_any[178](?), arg inds[147657]:_any[178](?), arg isUnique[147659]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520128] "RVV" "temp"
    unknown indivInsertPts[147671] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668658] "expr temp" "maybe param" "maybe type" "temp"
    (668661 'move' call_tmp[668658](147662 call _dom _mt[243] inds[147657]))
    unknown call_tmp[668663] "expr temp" "maybe param" "maybe type" "temp"
    (668666 'move' call_tmp[668663](147667 call chpl__ensureDomainExpr call_tmp[668658]))
    unknown call_tmp[668668] "expr temp" "maybe param" "maybe type" "temp"
    (668671 'move' call_tmp[668668](147669 call chpl__buildArrayRuntimeType call_tmp[668663] int(64)[13]))
    (543717 'default init var' indivInsertPts[147671] call_tmp[668668])
    (147674 'end of statement')
    unknown actualInsertPts[147686] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668675] "expr temp" "maybe param" "maybe type" "temp"
    (668678 'move' call_tmp[668675](147677 call _dom _mt[243] inds[147657]))
    unknown call_tmp[668680] "expr temp" "maybe param" "maybe type" "temp"
    (668683 'move' call_tmp[668680](147682 call chpl__ensureDomainExpr call_tmp[668675]))
    unknown call_tmp[668685] "expr temp" "maybe param" "maybe type" "temp"
    (668688 'move' call_tmp[668685](147684 call chpl__buildArrayRuntimeType call_tmp[668680] int(64)[13]))
    (543719 'default init var' actualInsertPts[147686] call_tmp[668685])
    (147689 'end of statement')
    unknown call_tmp[668690] "expr temp" "maybe param" "maybe type" "temp"
    (668693 'move' call_tmp[668690](147691 call ! isUnique[147659]))
    unknown call_tmp[668695] "expr temp" "maybe param" "maybe type" "temp"
    (668698 'move' call_tmp[668695](147795 call _cond_test call_tmp[668690]))
    if call_tmp[668695]
    {
      unknown call_tmp[668702] "expr temp" "maybe param" "maybe type" "temp"
      (668705 'move' call_tmp[668702](147695 call _dom _mt[243] inds[147657]))
      unknown call_tmp[668709] "expr temp" "maybe param" "maybe type" "temp"
      (668712 'move' call_tmp[668709](147698 call low _mt[243] call_tmp[668702]))
      unknown call_tmp[668714] "expr temp" "maybe param" "maybe type" "temp"
      (668717 'move' call_tmp[668714](147702 call inds[147657] call_tmp[668709]))
      unknown call_tmp[668719] "maybe param" "maybe type" "temp"
      (668722 'move' call_tmp[668719](147704 call + call_tmp[668714] 1))
      unknown lastInd[147706] "dead at end of block" "insert auto destroy"
      (543721 'init var' lastInd[147706] call_tmp[668719])
      (147709 'end of statement')
      {
        unknown _indexOfInterest[147743] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147744] "expr temp" "temp"
        unknown call_tmp[668724] "expr temp" "maybe param" "maybe type" "temp"
        (668727 'move' call_tmp[668724](147753 call _getIterator inds[147657]))
        unknown call_tmp[668729] "expr temp" "maybe param" "maybe type" "temp"
        (668732 'move' call_tmp[668729](147756 call _getIterator indivInsertPts[147671]))
        (147758 'move' _iterator[147744](147719 call _build_tuple call_tmp[668724] call_tmp[668729]))
        Defer
        {
          {
            (147788 call _freeIterator _iterator[147744])
          }
        }
        { scopeless type
          (147763 'move' _indexOfInterest[147743](147760 call iteratorIndex _iterator[147744]))
        }
        ForLoop[147745]
        {
          (147768 call _check_tuple_var_decl _indexOfInterest[147743] 2)
          (481611 'end of statement')
          unknown i[147774] "index var" "insert auto destroy"
          (481612 'end of statement')
          (147776 'move' i[147774](147772 call _indexOfInterest[147743] 0))
          (481613 'end of statement' i[147774])
          unknown p[147781] "index var" "insert auto destroy"
          (481615 'end of statement')
          (147783 'move' p[147781](147779 call _indexOfInterest[147743] 1))
          (481616 'end of statement' p[147781])
          {
            unknown call_tmp[668734] "expr temp" "maybe param" "maybe type" "temp"
            (668737 'move' call_tmp[668734](147722 call == i[147774] lastInd[147706]))
            unknown call_tmp[668739] "expr temp" "maybe param" "maybe type" "temp"
            (668742 'move' call_tmp[668739](147736 call _cond_test call_tmp[668734]))
            if call_tmp[668739]
            {
              unknown call_tmp[668744] "expr temp" "maybe param" "maybe type" "temp"
              (668747 'move' call_tmp[668744](147726 call - 1))
              (147728 call = p[147781] call_tmp[668744])
              (481618 'end of statement' p[147781])
            }
            {
              (147733 call = lastInd[147706] i[147774])
              (481620 'end of statement' lastInd[147706] i[147774])
            }
          }
          label _continueLabel[147748]
          _indexOfInterest[147743]
          _iterator[147744]
        }
        label _breakLabel[147749]
      }
    }
    Forall {
      induction variables:
        
        unknown i[147863] "index var" "insert auto destroy"
        
        unknown p[147865] "index var" "insert auto destroy"
      iterated expressions:
        inds[147657]
        indivInsertPts[147671]
      shadow variables:
      other variables
        forall body
      {
        unknown tmp[427247] "maybe param" "temp"
        (427258 'move' tmp[427247] isUnique[147659])
        unknown call_tmp[668749] "expr temp" "maybe param" "maybe type" "temp"
        (668752 'move' call_tmp[668749](427260 call _cond_invalid tmp[427247]))
        if call_tmp[668749]
        {
          (427263 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[568720] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568721] "maybe param" "temp"
        unknown call_tmp[668754] "expr temp" "maybe param" "maybe type" "temp"
        (668757 'move' call_tmp[668754](427248 call isTrue tmp[427247]))
        (568726 'move' tmp[568721](568724 call _cond_test call_tmp[668754]))
        if tmp[568721]
        {
          (568731 'move' tmp[568720](568728 '_paramFoldLogical' tmp[568721] 1))
        }
        {
          unknown tmp[568733] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[668759] "expr temp" "maybe param" "maybe type" "temp"
          (668762 'move' call_tmp[668759](147811 call - 1))
          unknown call_tmp[668764] "expr temp" "maybe param" "maybe type" "temp"
          (668767 'move' call_tmp[668764](147813 call != p[147865] call_tmp[668759]))
          (568735 'move' tmp[568733](427252 call isTrue call_tmp[668764]))
          (568740 'move' tmp[568720](568737 '_paramFoldLogical' tmp[568721] tmp[568733]))
        }
        unknown call_tmp[668769] "expr temp" "maybe param" "maybe type" "temp"
        (668772 'move' call_tmp[668769](147857 call _cond_test tmp[568720]))
        if call_tmp[668769]
        {
          unknown call_tmp[668776] "maybe param" "maybe type" "temp"
          (668779 'move' call_tmp[668776](147830 call(147825 call (partial) find _mt[243] d[147653]) i[147863]))
          const tmp[147831] "dead at end of block" "const" "insert auto destroy" "temp"
          (543723 'init var' tmp[147831] call_tmp[668776])
          (147838 call _check_tuple_var_decl tmp[147831] 2)
          (481624 'end of statement')
          unknown call_tmp[668781] "maybe param" "maybe type" "temp"
          (668784 'move' call_tmp[668781](147832 call tmp[147831] 0))
          const found[147817] "dead at end of block" "const" "insert auto destroy"
          (543725 'init var' found[147817] call_tmp[668781])
          unknown call_tmp[668786] "maybe param" "maybe type" "temp"
          (668789 'move' call_tmp[668786](147835 call tmp[147831] 1))
          const insertPt[147819] "dead at end of block" "const" "insert auto destroy"
          (543727 'init var' insertPt[147819] call_tmp[668786])
          (147843 'end of statement')
          unknown tmp[568747] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568748] "maybe param" "temp"
          (568753 'move' tmp[568748](568751 call _cond_test found[147817]))
          if tmp[568748]
          {
            unknown tmp[568755] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (568757 'move' tmp[568755](147848 call - 1))
            (568762 'move' tmp[568747](568759 '_paramFoldLogical' tmp[568748] tmp[568755]))
          }
          {
            (568767 'move' tmp[568747](568764 '_paramFoldLogical' tmp[568748] insertPt[147819]))
          }
          (147854 call = p[147865] tmp[568747])
          (481625 'end of statement' p[147865] found[147817] insertPt[147819])
        }
      }
    }
    unknown actualAddCnt[147870] "dead at end of block" "insert auto destroy"
    (543729 'init var' actualAddCnt[147870] 0)
    (147873 'end of statement')
    {
      unknown _indexOfInterest[147914] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147915] "expr temp" "temp"
      unknown call_tmp[668791] "expr temp" "maybe param" "maybe type" "temp"
      (668794 'move' call_tmp[668791](147924 call _getIterator indivInsertPts[147671]))
      unknown call_tmp[668796] "expr temp" "maybe param" "maybe type" "temp"
      (668799 'move' call_tmp[668796](147927 call _getIterator actualInsertPts[147686]))
      (147929 'move' _iterator[147915](147882 call _build_tuple call_tmp[668791] call_tmp[668796]))
      Defer
      {
        {
          (147959 call _freeIterator _iterator[147915])
        }
      }
      { scopeless type
        (147934 'move' _indexOfInterest[147914](147931 call iteratorIndex _iterator[147915]))
      }
      ForLoop[147916]
      {
        (147939 call _check_tuple_var_decl _indexOfInterest[147914] 2)
        (481630 'end of statement')
        unknown ip[147945] "index var" "insert auto destroy"
        (481631 'end of statement')
        (147947 'move' ip[147945](147943 call _indexOfInterest[147914] 0))
        (481632 'end of statement' ip[147945])
        unknown ap[147952] "index var" "insert auto destroy"
        (481634 'end of statement')
        (147954 'move' ap[147952](147950 call _indexOfInterest[147914] 1))
        (481635 'end of statement' ap[147952])
        {
          unknown call_tmp[668801] "expr temp" "maybe param" "maybe type" "temp"
          (668804 'move' call_tmp[668801](147885 call - 1))
          unknown call_tmp[668806] "expr temp" "maybe param" "maybe type" "temp"
          (668809 'move' call_tmp[668806](147887 call != ip[147945] call_tmp[668801]))
          unknown call_tmp[668811] "expr temp" "maybe param" "maybe type" "temp"
          (668814 'move' call_tmp[668811](147908 call _cond_test call_tmp[668806]))
          if call_tmp[668811]
          {
            unknown call_tmp[668816] "expr temp" "maybe param" "maybe type" "temp"
            (668819 'move' call_tmp[668816](147892 call + ip[147945] actualAddCnt[147870]))
            (147894 call = ap[147952] call_tmp[668816])
            (481637 'end of statement' ap[147952] ip[147945] actualAddCnt[147870])
            (147900 call += actualAddCnt[147870] 1)
            (481641 'end of statement' actualAddCnt[147870])
          }
          {
            (147905 call = ap[147952] ip[147945])
            (481643 'end of statement' ap[147952] ip[147945])
          }
        }
        label _continueLabel[147919]
        _indexOfInterest[147914]
        _iterator[147915]
      }
      label _breakLabel[147920]
    }
    unknown call_tmp[668821] "expr temp" "maybe param" "maybe type" "temp"
    (668824 'move' call_tmp[668821](147969 call _build_tuple actualInsertPts[147686] actualAddCnt[147870]))
    (520133 'move' ret[520128](520132 'deref' call_tmp[668821]))
    gotoReturn _end___getActualInsertPts[520126] _end___getActualInsertPts[520126]
    (481646 'end of statement' actualInsertPts[147686] actualAddCnt[147870])
    label _end___getActualInsertPts[520126]
    (520130 return ret[520128])
  }
  function BaseSparseDomImpl[148004](?).dsiClear[147977](arg _mt[148044]:_MT[238], arg this[148042]:BaseSparseDomImpl[148004](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (147998 call halt "not implemented")
    (520137 return _void[55])
  }
  type BaseSparseDomImpl[148004](?) val super[355785]:BaseSparseDom[148708](?) "super class" unknown nnzDom[146964](146962 call chpl__buildDomainExpr(146959 call chpl_build_bounded_range 1 0))
  function SparseIndexBuffer[148231](?).init[148102](arg _mt[148235]:_MT[238], ref arg this[148233]:SparseIndexBuffer[148231](?), arg size[148100]:_any[178](?), param arg rank[148105]:int(64)[13], arg obj[148108]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668826] "expr temp" "maybe param" "maybe type" "temp"
    (668829 'move' call_tmp[668826](461841 call _cast int(64)[13] rank[148105]))
    (461843 'init field' this[148233] c"rank" call_tmp[668826])
    (481650 'end of statement')
    unknown tmp[461846] "temp"
    (461849 'init var' tmp[461846] obj[148108] BaseSparseDom[382364](?))
    (461851 'init field' this[148233] c"obj" tmp[461846])
    (481651 'end of statement')
    unknown tmp[461867] "temp" "type variable"
    unknown tmp[568774] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568775] "maybe param" "temp"
    unknown call_tmp[668831] "expr temp" "maybe param" "maybe type" "temp"
    (668834 'move' call_tmp[668831](461875 '.v' this[148233] c"rank"))
    unknown call_tmp[668836] "expr temp" "maybe param" "maybe type" "temp"
    (668839 'move' call_tmp[668836](461856 call == call_tmp[668831] 1))
    (568780 'move' tmp[568775](568778 call _cond_test call_tmp[668836]))
    if tmp[568775]
    {
      (568785 'move' tmp[568774](568782 '_paramFoldLogical' tmp[568775] int(64)[13]))
    }
    {
      unknown tmp[568787] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[668841] "expr temp" "maybe param" "maybe type" "temp"
      (668844 'move' call_tmp[668841](461878 '.v' this[148233] c"rank"))
      (568789 'move' tmp[568787](461863 call * call_tmp[668841] int(64)[13]))
      (568794 'move' tmp[568774](568791 '_paramFoldLogical' tmp[568775] tmp[568787]))
    }
    (461869 'move' tmp[461867] tmp[568774])
    (461871 'init field' this[148233] c"idxType" tmp[461867])
    (481652 'end of statement')
    unknown call_tmp[668846] "expr temp" "maybe param" "maybe type" "temp"
    (668849 'move' call_tmp[668846](148129 call chpl_build_low_bounded_range 0))
    unknown call_tmp[668851] "expr temp" "maybe param" "maybe type" "temp"
    (668854 'move' call_tmp[668851](148132 call # call_tmp[668846] size[148100]))
    unknown call_tmp[668856] "maybe param" "maybe type" "temp"
    (668859 'move' call_tmp[668856](148135 call chpl__buildDomainExpr call_tmp[668851]))
    unknown tmp[461881] "temp"
    (461883 'init var' tmp[461881] call_tmp[668856])
    (461885 '.=' this[148233] c"bufDom" tmp[461881])
    (481653 'end of statement')
    unknown tmp[461890] "temp"
    unknown call_tmp[668861] "expr temp" "maybe param" "maybe type" "temp"
    (668864 'move' call_tmp[668861](461904 '.' this[148233] c"bufDom"))
    unknown call_tmp[668866] "expr temp" "maybe param" "maybe type" "temp"
    (668869 'move' call_tmp[668866](461895 call chpl__ensureDomainExpr call_tmp[668861]))
    unknown call_tmp[668871] "expr temp" "maybe param" "maybe type" "temp"
    (668874 'move' call_tmp[668871](461907 '.v' this[148233] c"idxType"))
    unknown call_tmp[668876] "expr temp" "maybe param" "maybe type" "temp"
    (668879 'move' call_tmp[668876](461893 call chpl__buildArrayRuntimeType call_tmp[668866] call_tmp[668871]))
    (461898 'default init var' tmp[461890] call_tmp[668876])
    (461900 '.=' this[148233] c"buf" tmp[461890])
    (481654 'end of statement')
    unknown tmp[461911] "temp"
    (461913 'init var' tmp[461911] 0)
    (461915 '.=' this[148233] c"cur" tmp[461911])
    (481655 'end of statement')
    (520139 return _void[55])
  }
  function SparseIndexBuffer[148231](?).deinit[148144](arg _mt[148239]:_MT[238], arg this[148237]:SparseIndexBuffer[148231](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (148148 call(385827 call (partial) commit _mt[243] this[148237]))
    (520141 return _void[55])
  }
  function SparseIndexBuffer[148231](?).add[148159](arg _mt[148243]:_MT[238], arg this[148241]:SparseIndexBuffer[148231](?), arg idx[148156] :
  (385832 call idxType _mt[243] this[148241])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668889] "expr temp" "maybe param" "maybe type" "temp"
    (668892 'move' call_tmp[668889](385844 call cur _mt[243] this[148241]))
    unknown call_tmp[668894] "expr temp" "maybe param" "maybe type" "temp"
    (668897 'move' call_tmp[668894](148164 call(385837 call (partial) buf _mt[243] this[148241]) call_tmp[668889]))
    (148166 call = call_tmp[668894] idx[148156])
    (481657 'end of statement')
    unknown call_tmp[668901] "expr temp" "maybe param" "maybe type" "temp"
    (668904 'move' call_tmp[668901](385850 call cur _mt[243] this[148241]))
    (148172 call += call_tmp[668901] 1)
    (481658 'end of statement')
    unknown call_tmp[668908] "expr temp" "maybe param" "maybe type" "temp"
    (668911 'move' call_tmp[668908](385855 call cur _mt[243] this[148241]))
    unknown call_tmp[668915] "expr temp" "maybe param" "maybe type" "temp"
    (668918 'move' call_tmp[668915](360719 call buf _mt[243] this[148241]))
    unknown call_tmp[668922] "expr temp" "maybe param" "maybe type" "temp"
    (668925 'move' call_tmp[668922](148177 call size _mt[243] call_tmp[668915]))
    unknown call_tmp[668927] "expr temp" "maybe param" "maybe type" "temp"
    (668930 'move' call_tmp[668927](148180 call == call_tmp[668908] call_tmp[668922]))
    unknown call_tmp[668932] "expr temp" "maybe param" "maybe type" "temp"
    (668935 'move' call_tmp[668932](148186 call _cond_test call_tmp[668927]))
    if call_tmp[668932]
    {
      (148184 call(385859 call (partial) commit _mt[243] this[148241]))
    }
    (520143 return _void[55])
  }
  function SparseIndexBuffer[148231](?).commit[148195](arg _mt[148247]:_MT[238], arg this[148245]:SparseIndexBuffer[148231](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668941] "expr temp" "maybe param" "maybe type" "temp"
    (668944 'move' call_tmp[668941](385864 call cur _mt[243] this[148245]))
    unknown call_tmp[668946] "expr temp" "maybe param" "maybe type" "temp"
    (668949 'move' call_tmp[668946](148199 call >= call_tmp[668941] 1))
    unknown call_tmp[668951] "expr temp" "maybe param" "maybe type" "temp"
    (668954 'move' call_tmp[668951](148217 call _cond_test call_tmp[668946]))
    if call_tmp[668951]
    {
      unknown call_tmp[668958] "expr temp" "maybe param" "maybe type" "temp"
      (668961 'move' call_tmp[668958](360724 call obj _mt[243] this[148245]))
      unknown call_tmp[668969] "expr temp" "maybe param" "maybe type" "temp"
      (668972 'move' call_tmp[668969](385874 call cur _mt[243] this[148245]))
      unknown call_tmp[668974] "expr temp" "maybe param" "maybe type" "temp"
      (668977 'move' call_tmp[668974](148208 call - call_tmp[668969] 1))
      unknown call_tmp[668979] "expr temp" "maybe param" "maybe type" "temp"
      (668982 'move' call_tmp[668979](148210 call chpl_build_high_bounded_range call_tmp[668974]))
      unknown call_tmp[668984] "expr temp" "maybe param" "maybe type" "temp"
      (668987 'move' call_tmp[668984](148213 call(385869 call (partial) buf _mt[243] this[148245]) call_tmp[668979]))
      (148215 call(148202 call (partial) dsiBulkAdd _mt[243] call_tmp[668958]) call_tmp[668984])
    }
    unknown call_tmp[668991] "expr temp" "maybe param" "maybe type" "temp"
    (668994 'move' call_tmp[668991](385879 call cur _mt[243] this[148245]))
    (148225 call = call_tmp[668991] 0)
    (520145 return _void[55])
  }
  type SparseIndexBuffer[148231](?) unknown rank[148049] "param" int(64)[13] val obj[148054]:BaseSparseDom[382364](?) BaseSparseDom[382364](?) unknown idxType[148070] "type variable"(148067 IfExpr (148060 call == rank[148049] 1) then
  { scopeless
    int(64)[13]
  } else
  { scopeless
    (148065 call * rank[148049] int(64)[13])
  } ) unknown bufDom[148078](148076 call chpl__buildDomainRuntimeType defaultDist[94053] 1) unknown buf[148089](148087 call chpl__buildArrayRuntimeType(148085 call chpl__ensureDomainExpr bufDom[148078]) idxType[148070]) val cur[148094]:int(64)[13] 0
  function BaseSparseDom[148708](?).getNNZ[148267](arg _mt[148712]:_MT[238], arg this[148710]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[520149] "RVV" "temp"
    (148289 call halt "nnz queried on base class")
    (520151 return ret[520149])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148708](?).deinit[148297](arg _mt[148716]:_MT[238], arg this[148714]:BaseSparseDom[148708](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520153 return _void[55])
  }
  function BaseSparseDom[148708](?).dsiClear[148304](arg _mt[148720]:_MT[238], arg this[148718]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148325 call halt "clear not implemented for this distribution - BaseSparseDom")
    (520155 return _void[55])
  }
  function BaseSparseDom[148708](?).dsiBulkAdd[148343](arg _mt[148724]:_MT[238], arg this[148722]:BaseSparseDom[148708](?), arg inds[148340]:_array[133594](?), arg dataSorted[148346] :
  0 =
  0, arg isUnique[148350] :
  0 =
  0, arg preserveInds[148354] :
  1 =
  1, arg addOn[148358] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[520159] "RVV" "temp"
    (148381 call halt "Bulk addition is not supported by this sparse domain")
    (481664 'end of statement')
    (520165 'move' ret[520159](520164 'coerce' 0 int(64)[13]))
    (520161 return ret[520159])
  }
  where {
    unknown call_tmp[668998] "expr temp" "maybe param" "maybe type" "temp"
    (669001 'move' call_tmp[668998](385884 call rank _mt[243] this[148722]))
    unknown call_tmp[669005] "expr temp" "maybe param" "maybe type" "temp"
    (669008 'move' call_tmp[669005](385889 call idxType _mt[243] this[148722]))
    unknown call_tmp[669010] "expr temp" "maybe param" "maybe type" "temp"
    (669013 'move' call_tmp[669010](148335 call chpl__buildIndexType call_tmp[668998] call_tmp[669005]))
    unknown call_tmp[669017] "expr temp" "maybe param" "maybe type" "temp"
    (669020 'move' call_tmp[669017](461925 call eltType _mt[243] inds[148340]))
    unknown call_tmp[669022] "expr temp" "maybe param" "maybe type" "temp"
    (669025 'move' call_tmp[669022](461929 call == call_tmp[669010] call_tmp[669017]))
    (461923 call & 1 call_tmp[669022])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148708](?).boundsCheck[148400](arg _mt[148728]:_MT[238], arg this[148726]:BaseSparseDom[148708](?), arg ind[148397] :
  unknown call_tmp[669029] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[520169] "RVV" "temp"
    unknown call_tmp[669041] "expr temp" "maybe param" "maybe type" "temp"
    (669044 'move' call_tmp[669041](148459 call _cond_test 1))
    if call_tmp[669041]
    {
      unknown call_tmp[669048] "expr temp" "maybe param" "maybe type" "temp"
      (669051 'move' call_tmp[669048](360729 call parentDom _mt[243] this[148726]))
      unknown call_tmp[669055] "expr temp" "maybe param" "maybe type" "temp"
      (669058 'move' call_tmp[669055](148410 call(148405 call (partial) contains _mt[243] call_tmp[669048]) ind[148397]))
      unknown call_tmp[669060] "expr temp" "maybe param" "maybe type" "temp"
      (669063 'move' call_tmp[669060](148411 call ! call_tmp[669055]))
      unknown call_tmp[669065] "expr temp" "maybe param" "maybe type" "temp"
      (669068 'move' call_tmp[669065](148454 call _cond_test call_tmp[669060]))
      if call_tmp[669065]
      {
        unknown call_tmp[669072] "expr temp" "maybe param" "maybe type" "temp"
        (669075 'move' call_tmp[669072](385908 call parentDom _mt[243] this[148726]))
        (148452 call halt "Sparse domain/array index out of bounds: " ind[148397] " (expected to be within " call_tmp[669072] ")")
      }
    }
    (520171 return ret[520169])
  }
  { scopeless type
    void[4]
  }
  function BaseSparseDom[148708](?).dsiDim[148474](arg _mt[148732]:_MT[238], arg this[148730]:BaseSparseDom[148708](?), arg d[148471]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520175] "RVV" "temp"
    unknown call_tmp[669079] "expr temp" "maybe param" "maybe type" "temp"
    (669082 'move' call_tmp[669079](360734 call parentDom _mt[243] this[148730]))
    unknown call_tmp[669086] "expr temp" "maybe param" "maybe type" "temp"
    (669089 'move' call_tmp[669086](148482 call(148477 call (partial) dim _mt[243] call_tmp[669079]) d[148471]))
    (520180 'move' ret[520175](520179 'deref' call_tmp[669086]))
    (520177 return ret[520175])
  }
  function BaseSparseDom[148708](?).dsiDims[148490](arg _mt[148736]:_MT[238], arg this[148734]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520184] "RVV" "temp"
    unknown call_tmp[669093] "expr temp" "maybe param" "maybe type" "temp"
    (669096 'move' call_tmp[669093](360739 call parentDom _mt[243] this[148734]))
    unknown call_tmp[669100] "expr temp" "maybe param" "maybe type" "temp"
    (669103 'move' call_tmp[669100](148497 call(148493 call (partial) dims _mt[243] call_tmp[669093])))
    (520189 'move' ret[520184](520188 'deref' call_tmp[669100]))
    (520186 return ret[520184])
  }
  function BaseSparseDom[148708](?).dsiNumIndices[148505](arg _mt[148740]:_MT[238], arg this[148738]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520193] "RVV" "temp"
    unknown call_tmp[669107] "expr temp" "maybe param" "maybe type" "temp"
    (669110 'move' call_tmp[669107](148509 call(385913 call (partial) getNNZ _mt[243] this[148738])))
    (520198 'move' ret[520193](520197 'deref' call_tmp[669107]))
    (520195 return ret[520193])
  }
  function BaseSparseDom[148708](?).dsiSize[148517](arg _mt[148744]:_MT[238], arg this[148742]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520202] "RVV" "temp"
    unknown call_tmp[669114] "expr temp" "maybe param" "maybe type" "temp"
    (669117 'move' call_tmp[669114](148521 call(385917 call (partial) getNNZ _mt[243] this[148742])))
    (520207 'move' ret[520202](520206 'deref' call_tmp[669114]))
    (520204 return ret[520202])
  }
  function BaseSparseDom[148708](?).dsiLow[148529](arg _mt[148748]:_MT[238], arg this[148746]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520211] "RVV" "temp"
    unknown call_tmp[669121] "expr temp" "maybe param" "maybe type" "temp"
    (669124 'move' call_tmp[669121](360744 call parentDom _mt[243] this[148746]))
    unknown call_tmp[669128] "expr temp" "maybe param" "maybe type" "temp"
    (669131 'move' call_tmp[669128](148532 call low _mt[243] call_tmp[669121]))
    (520216 'move' ret[520211](520215 'deref' call_tmp[669128]))
    (520213 return ret[520211])
  }
  function BaseSparseDom[148708](?).dsiHigh[148542](arg _mt[148752]:_MT[238], arg this[148750]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520220] "RVV" "temp"
    unknown call_tmp[669135] "expr temp" "maybe param" "maybe type" "temp"
    (669138 'move' call_tmp[669135](360749 call parentDom _mt[243] this[148750]))
    unknown call_tmp[669142] "expr temp" "maybe param" "maybe type" "temp"
    (669145 'move' call_tmp[669142](148545 call high _mt[243] call_tmp[669135]))
    (520225 'move' ret[520220](520224 'deref' call_tmp[669142]))
    (520222 return ret[520220])
  }
  function BaseSparseDom[148708](?).dsiStride[148555](arg _mt[148756]:_MT[238], arg this[148754]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520229] "RVV" "temp"
    unknown call_tmp[669149] "expr temp" "maybe param" "maybe type" "temp"
    (669152 'move' call_tmp[669149](360754 call parentDom _mt[243] this[148754]))
    unknown call_tmp[669156] "expr temp" "maybe param" "maybe type" "temp"
    (669159 'move' call_tmp[669156](148558 call stride _mt[243] call_tmp[669149]))
    (520234 'move' ret[520229](520233 'deref' call_tmp[669156]))
    (520231 return ret[520229])
  }
  function BaseSparseDom[148708](?).dsiAlignment[148568](arg _mt[148760]:_MT[238], arg this[148758]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520238] "RVV" "temp"
    unknown call_tmp[669163] "expr temp" "maybe param" "maybe type" "temp"
    (669166 'move' call_tmp[669163](360759 call parentDom _mt[243] this[148758]))
    unknown call_tmp[669170] "expr temp" "maybe param" "maybe type" "temp"
    (669173 'move' call_tmp[669170](148571 call alignment _mt[243] call_tmp[669163]))
    (520243 'move' ret[520238](520242 'deref' call_tmp[669170]))
    (520240 return ret[520238])
  }
  function BaseSparseDom[148708](?).dsiFirst[148581](arg _mt[148764]:_MT[238], arg this[148762]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520247] "RVV" "temp"
    (148602 call halt "dsiFirst is not implemented")
    (481675 'end of statement')
    const _tmp[148609] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[669177] "expr temp" "maybe param" "maybe type" "temp"
    (669180 'move' call_tmp[669177](385922 call rank _mt[243] this[148762]))
    unknown call_tmp[669184] "expr temp" "maybe param" "maybe type" "temp"
    (669187 'move' call_tmp[669184](385927 call idxType _mt[243] this[148762]))
    unknown call_tmp[669189] "expr temp" "maybe param" "maybe type" "temp"
    (669192 'move' call_tmp[669189](148607 call * call_tmp[669177] call_tmp[669184]))
    (543731 'default init var' _tmp[148609] call_tmp[669189])
    (148612 'end of statement')
    (520252 'move' ret[520247](520251 'deref' _tmp[148609]))
    gotoReturn _end_dsiFirst[520245] _end_dsiFirst[520245]
    (481676 'end of statement' _tmp[148609])
    label _end_dsiFirst[520245]
    (520249 return ret[520247])
  }
  function BaseSparseDom[148708](?).dsiLast[148620](arg _mt[148768]:_MT[238], arg this[148766]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520258] "RVV" "temp"
    (148641 call halt "dsiLast not implemented")
    (481678 'end of statement')
    const _tmp[148648] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[669196] "expr temp" "maybe param" "maybe type" "temp"
    (669199 'move' call_tmp[669196](385933 call rank _mt[243] this[148766]))
    unknown call_tmp[669203] "expr temp" "maybe param" "maybe type" "temp"
    (669206 'move' call_tmp[669203](385938 call idxType _mt[243] this[148766]))
    unknown call_tmp[669208] "expr temp" "maybe param" "maybe type" "temp"
    (669211 'move' call_tmp[669208](148646 call * call_tmp[669196] call_tmp[669203]))
    (543733 'default init var' _tmp[148648] call_tmp[669208])
    (148651 'end of statement')
    (520263 'move' ret[520258](520262 'deref' _tmp[148648]))
    gotoReturn _end_dsiLast[520256] _end_dsiLast[520256]
    (481679 'end of statement' _tmp[148648])
    label _end_dsiLast[520256]
    (520260 return ret[520258])
  }
  function BaseSparseDom[148708](?).dsiAlignedLow[148659](arg _mt[148772]:_MT[238], arg this[148770]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520269] "RVV" "temp"
    unknown call_tmp[669215] "expr temp" "maybe param" "maybe type" "temp"
    (669218 'move' call_tmp[669215](360764 call parentDom _mt[243] this[148770]))
    unknown call_tmp[669222] "expr temp" "maybe param" "maybe type" "temp"
    (669225 'move' call_tmp[669222](148662 call alignedLow _mt[243] call_tmp[669215]))
    (520274 'move' ret[520269](520273 'deref' call_tmp[669222]))
    (520271 return ret[520269])
  }
  function BaseSparseDom[148708](?).dsiAlignedHigh[148672](arg _mt[148776]:_MT[238], arg this[148774]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520278] "RVV" "temp"
    unknown call_tmp[669229] "expr temp" "maybe param" "maybe type" "temp"
    (669232 'move' call_tmp[669229](360769 call parentDom _mt[243] this[148774]))
    unknown call_tmp[669236] "expr temp" "maybe param" "maybe type" "temp"
    (669239 'move' call_tmp[669236](148675 call alignedHigh _mt[243] call_tmp[669229]))
    (520283 'move' ret[520278](520282 'deref' call_tmp[669236]))
    (520280 return ret[520278])
  }
  function BaseSparseDom[148708](?).dsiMakeIndexBuffer[148687](arg _mt[148780]:_MT[238], arg this[148778]:BaseSparseDom[148708](?), arg size[148685]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520287] "RVV" "temp"
    unknown call_tmp[669243] "expr temp" "maybe param" "maybe type" "temp"
    (669246 'move' call_tmp[669243](148692 call rank _mt[243] this[148778]))
    unknown call_tmp[669248] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (669251 'move' call_tmp[669248](748081 'new' SparseIndexBuffer[148231](?)(rank = call_tmp[669243])(obj = this[148778])(size = size[148685])))
    (520292 'move' ret[520287](520291 'deref' call_tmp[669248]))
    (520289 return ret[520287])
  }
  type BaseSparseDom[148708](?) val super[355783]:BaseDom[146767] "super class" unknown rank[148254] "param" int(64)[13] unknown idxType[148258] "type variable" unknown parentDom[148261]
  type BaseSparseDom[382364](?)
  function BaseAssociativeDom[148855].deinit[148788](arg _mt[148859]:_MT[238], arg this[148857]:BaseAssociativeDom[148855]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520294 return _void[55])
  }
  function BaseAssociativeDom[148855].dsiClear[148795](arg _mt[148863]:_MT[238], arg this[148861]:BaseAssociativeDom[148855]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148816 call halt "clear not implemented for this distribution")
    (520296 return _void[55])
  }
  function BaseAssociativeDom[148855].dsiAdd[148825](arg _mt[148867]:_MT[238], arg this[148865]:BaseAssociativeDom[148855], in arg idx[148823]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520300] "RVV" "temp"
    (148846 call compilerError "Index addition is not supported by this domain")
    (481685 'end of statement')
    (520305 'move' ret[520300](520304 'deref' 0))
    (520302 return ret[520300])
  }
  type BaseAssociativeDom[148855] val super[355787]:BaseDom[146767] "super class"
  type BaseAssociativeDom[382359](?)
  function BaseArr[149584].chpl__rvfMe[148885](arg _mt[149588]:_MT[238], arg this[149586]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520309] "RVV" "param" "temp"
    (520314 'move' ret[520309](520313 'deref' 0))
    (520311 return ret[520309])
  }
  function BaseArr[149584].isSliceArrayView[148895](arg _mt[149592]:_MT[238], arg this[149590]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520318] "RVV" "param" "temp"
    (520323 'move' ret[520318](520322 'deref' 0))
    (520320 return ret[520318])
  }
  function BaseArr[149584].isRankChangeArrayView[148905](arg _mt[149596]:_MT[238], arg this[149594]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520327] "RVV" "param" "temp"
    (520332 'move' ret[520327](520331 'deref' 0))
    (520329 return ret[520327])
  }
  function BaseArr[149584].isReindexArrayView[148915](arg _mt[149600]:_MT[238], arg this[149598]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520336] "RVV" "param" "temp"
    (520341 'move' ret[520336](520340 'deref' 0))
    (520338 return ret[520336])
  }
  function BaseArr[149584].deinit[148925](arg _mt[149604]:_MT[238], arg this[149602]:BaseArr[149584]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520343 return _void[55])
  }
  function BaseArr[149584].dsiStaticFastFollowCheck[148934](arg _mt[149608]:_MT[238], arg this[149606]:BaseArr[149584], arg leadType[148932]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520347] "RVV" "param" "temp"
    (520352 'move' ret[520347](520351 'deref' 0))
    (520349 return ret[520347])
  }
  function BaseArr[149584].dsiGetBaseDom[148944](arg _mt[149612]:_MT[238], arg this[149610]:BaseArr[149584]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520356] "RVV" "temp"
    (148967 call halt "internal error: dsiGetBaseDom is not implemented")
    (481692 'end of statement')
    unknown ret[148972] "dead at end of block" "insert auto destroy" "unsafe"
    (543735 'default init var' ret[148972] unmanaged BaseDom[415521])
    (148975 'end of statement')
    (520362 'move' ret[520356](520361 'coerce' ret[148972] unmanaged BaseDom[415521]))
    gotoReturn _end_dsiGetBaseDom[520354] _end_dsiGetBaseDom[520354]
    (481693 'end of statement' ret[148972])
    label _end_dsiGetBaseDom[520354]
    (520358 return ret[520356])
  }
  { scopeless type
    unmanaged BaseDom[415521]
  }
  function BaseArr[149584].remove[148988](arg _mt[149616]:_MT[238], arg this[149614]:BaseArr[149584], param arg rmFromList[148985]:bool[10]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[520368] "RVV" "temp"
    unknown ret_arr[148991] "dead at end of block" "insert auto destroy"
    (543737 'init var' ret_arr[148991] this[149614])
    (148994 'end of statement')
    unknown ret_dom[149000] "dead at end of block" "insert auto destroy"
    (543739 'init var' ret_dom[149000] nil[44] unmanaged BaseDom?[415581])
    (149003 'end of statement')
    unknown rm_dom[149005] "dead at end of block" "insert auto destroy"
    (543741 'init var' rm_dom[149005] 0)
    (149008 'end of statement')
    unknown call_tmp[669255] "maybe param" "maybe type" "temp"
    (669258 'move' call_tmp[669255](149011 call(385954 call (partial) dsiGetBaseDom _mt[243] this[149614])))
    unknown dom[149012] "dead at end of block" "insert auto destroy"
    (543743 'init var' dom[149012] call_tmp[669255])
    (149015 'end of statement')
    unknown call_tmp[669262] "expr temp" "maybe param" "maybe type" "temp"
    (669265 'move' call_tmp[669262](149026 call _to_unmanaged this[149614]))
    unknown call_tmp[669267] "expr temp" "maybe param" "maybe type" "temp"
    (669270 'move' call_tmp[669267](149029 call(149020 call (partial) remove_arr _mt[243] dom[149012]) call_tmp[669262] rmFromList[148985]))
    (149030 call = rm_dom[149005] call_tmp[669267])
    (481695 'end of statement' rm_dom[149005] dom[149012])
    unknown call_tmp[669272] "expr temp" "maybe param" "maybe type" "temp"
    (669275 'move' call_tmp[669272](149039 call _cond_test rm_dom[149005]))
    if call_tmp[669272]
    {
      (149036 call = ret_dom[149000] dom[149012])
      (481698 'end of statement' ret_dom[149000] dom[149012])
    }
    unknown call_tmp[669277] "expr temp" "maybe param" "maybe type" "temp"
    (669280 'move' call_tmp[669277](149047 call _build_tuple ret_arr[148991] ret_dom[149000]))
    (520373 'move' ret[520368](520372 'deref' call_tmp[669277]))
    gotoReturn _end_remove[520366] _end_remove[520366]
    (481701 'end of statement' ret_arr[148991] ret_dom[149000])
    label _end_remove[520366]
    (520370 return ret[520368])
  }
  function BaseArr[149584].dsiElementInitializationComplete[149055](arg _mt[149620]:_MT[238], arg this[149618]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149076 call halt "dsiElementInitializationComplete must be defined")
    (520377 return _void[55])
  }
  function BaseArr[149584].dsiElementDeinitializationComplete[149083](arg _mt[149624]:_MT[238], arg this[149622]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149104 call halt "dsiElementDeinitializationComplete must be defined")
    (520379 return _void[55])
  }
  function BaseArr[149584].dsiDestroyArr[149115](arg _mt[149628]:_MT[238], arg this[149626]:BaseArr[149584], arg deinitElts[149112]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149136 call halt "dsiDestroyArr must be defined")
    (520381 return _void[55])
  }
  function BaseArr[149584].dsiReallocate[149147](arg _mt[149632]:_MT[238], arg this[149630]:BaseArr[149584], arg d[149144]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149168 call halt "reallocating not supported for this array type")
    (520383 return _void[55])
  }
  function BaseArr[149584].dsiPostReallocate[149175](arg _mt[149636]:_MT[238], arg this[149634]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520385 return _void[55])
  }
  function BaseArr[149584]._purge[149186](arg _mt[149640]:_MT[238], arg this[149638]:BaseArr[149584], arg ind[149183]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149207 call halt "purging not supported for this array type")
    (520387 return _void[55])
  }
  function BaseArr[149584]._resize[149218](arg _mt[149644]:_MT[238], arg this[149642]:BaseArr[149584], arg length[149215]:int(64)[13], arg old_map[149220]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149241 call halt "resizing not supported for this array type")
    (520389 return _void[55])
  }
  function BaseArr[149584].sparseShiftArray[149250](arg _mt[149648]:_MT[238], arg this[149646]:BaseArr[149584], arg shiftrange[149248]:_any[178](?), arg initrange[149252]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149273 call halt "sparseGrowDomain not supported for non-sparse arrays")
    (520391 return _void[55])
  }
  function BaseArr[149584].sparseShiftArrayBack[149282](arg _mt[149652]:_MT[238], arg this[149650]:BaseArr[149584], arg shiftrange[149280]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149303 call halt "sparseShiftArrayBack not supported for non-sparse arrays")
    (520393 return _void[55])
  }
  function BaseArr[149584].sparseBulkShiftArray[149312](arg _mt[149656]:_MT[238], arg this[149654]:BaseArr[149584], arg shiftMap[149310]:_any[178](?), arg oldnnz[149314]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149335 call halt "sparseBulkShiftArray not supported for non-sparse arrays")
    (520395 return _void[55])
  }
  function BaseArr[149584]._defaultInitSlot[149346](arg _mt[149660]:_MT[238], arg this[149658]:BaseArr[149584], arg slot[149343]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149367 call halt "_defaultInitSlot() not supported for non-associative arrays")
    (520397 return _void[55])
  }
  function BaseArr[149584]._deinitSlot[149378](arg _mt[149664]:_MT[238], arg this[149662]:BaseArr[149584], arg slot[149375]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149399 call halt "_deinitSlot() not supported for non-associative arrays")
    (520399 return _void[55])
  }
  function BaseArr[149584]._startRehash[149410](arg _mt[149668]:_MT[238], arg this[149666]:BaseArr[149584], arg newSize[149407]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149431 call halt "_startRehash() not supported for non-associative arrays")
    (520401 return _void[55])
  }
  function BaseArr[149584]._finishRehash[149442](arg _mt[149672]:_MT[238], arg this[149670]:BaseArr[149584], arg oldSize[149439]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149463 call halt "_finishRehash() not supported for non-associative arrays")
    (520403 return _void[55])
  }
  function BaseArr[149584]._moveElementDuringRehash[149474](arg _mt[149676]:_MT[238], arg this[149674]:BaseArr[149584], arg oldslot[149471]:int(64)[13], arg newslot[149477]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149499 call halt "_moveElementDuringRehash() not supported for non-associative arrays")
    (520405 return _void[55])
  }
  function BaseArr[149584].dsiSupportsAlignedFollower[149506](arg _mt[149680]:_MT[238], arg this[149678]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520409] "RVV" "param" "temp"
    (520414 'move' ret[520409](520413 'deref' 0))
    (520411 return ret[520409])
  }
  function BaseArr[149584].dsiSupportsPrivatization[149516](arg _mt[149684]:_MT[238], arg this[149682]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520418] "RVV" "param" "temp"
    (520423 'move' ret[520418](520422 'deref' 0))
    (520420 return ret[520418])
  }
  function BaseArr[149584].dsiRequiresPrivatization[149526](arg _mt[149688]:_MT[238], arg this[149686]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520427] "RVV" "param" "temp"
    (520432 'move' ret[520427](520431 'deref' 0))
    (520429 return ret[520427])
  }
  function BaseArr[149584].dsiDisplayRepresentation[149536](arg _mt[149692]:_MT[238], arg this[149690]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149541 call writeln "<no way to display representation>")
    (520434 return _void[55])
  }
  function BaseArr[415419](?).isDefaultRectangular[149548](arg _mt[149696]:_MT[238], arg this[149694]:BaseArr[415419](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520438] "RVV" "param" "temp"
    (520443 'move' ret[520438](520442 'deref' 0))
    (520440 return ret[520438])
  }
  function BaseArr[149584].isDefaultRectangular[149558](arg _mt[149700]:_MT[238], arg this[149698]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520447] "RVV" "param" "temp"
    (520452 'move' ret[520447](520451 'deref' 0))
    (520449 return ret[520447])
  }
  function BaseArr[149584].doiCanBulkTransferRankChange[149568](arg _mt[149704]:_MT[238], arg this[149702]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520456] "RVV" "param" "temp"
    (520461 'move' ret[520456](520460 'deref' 0))
    (520458 return ret[520456])
  }
  function BaseArr[149584].decEltCountsIfNeeded[149578](arg _mt[149708]:_MT[238], arg this[149706]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520463 return _void[55])
  }
  type BaseArr[149584] val super[355775]:object[22] "super class" val pid[148873]:int(64)[13] nullPid[113718] int(64)[13] val _decEltRefCounts[148879]:bool[10] 0 bool[10]
  type unmanaged BaseArr?[415602]
  type BaseArr?[415599](?)
  type unmanaged BaseArr[415569]
  type BaseArr[415419](?)
  type BaseArr[382431](?)
  function AbsBaseArr[149740](?).decEltCountsIfNeeded[149719](arg _mt[149744]:_MT[238], arg this[149742]:AbsBaseArr[149740](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669284] "expr temp" "maybe param" "maybe type" "temp"
    (669287 'move' call_tmp[669284](385968 call _decEltRefCounts _mt[243] this[149742]))
    unknown call_tmp[669289] "expr temp" "maybe param" "maybe type" "temp"
    (669292 'move' call_tmp[669289](149732 call _cond_test call_tmp[669284]))
    if call_tmp[669289]
    {
      unknown call_tmp[669294] "expr temp" "maybe param" "maybe type" "temp"
      (669297 'move' call_tmp[669294](149726 call _to_unmanaged this[149742]))
      unknown call_tmp[669301] "expr temp" "maybe param" "maybe type" "temp"
      (669304 'move' call_tmp[669301](385974 call eltType _mt[243] this[149742]))
      (149729 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669294] call_tmp[669301])
    }
    (520465 return _void[55])
  }
  type AbsBaseArr[149740](?) val super[355789]:BaseArr[149584] "super class" unknown eltType[149714] "type variable"
  function BaseArrOverRectangularDom[149805](?).dsiReallocate[149780](arg _mt[149809]:_MT[238], arg this[149807]:BaseArrOverRectangularDom[149805](?), arg bounds[149777] :
  unknown call_tmp[669308] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149785 call halt "reallocating not supported for this array type")
    (520467 return _void[55])
  }
  function BaseArrOverRectangularDom[149805](?).dsiPostReallocate[149792](arg _mt[149813]:_MT[238], arg this[149811]:BaseArrOverRectangularDom[149805](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (520469 return _void[55])
  }
  function BaseArrOverRectangularDom[149805](?).deinit[149799](arg _mt[149817]:_MT[238], arg this[149815]:BaseArrOverRectangularDom[149805](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520471 return _void[55])
  }
  type BaseArrOverRectangularDom[149805](?) val super[355777]:BaseArr[149584] "super class" unknown rank[149751] "param" int(64)[13] unknown idxType[149755] "type variable" unknown stridable[149759] "param" bool[10]
  type BaseArrOverRectangularDom[385642](?)
  function BaseRectangularArr[149856](?).deinit[149828](arg _mt[149860]:_MT[238], arg this[149858]:BaseRectangularArr[149856](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520473 return _void[55])
  }
  function BaseRectangularArr[149856](?).decEltCountsIfNeeded[149835](arg _mt[149864]:_MT[238], arg this[149862]:BaseRectangularArr[149856](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669334] "expr temp" "maybe param" "maybe type" "temp"
    (669337 'move' call_tmp[669334](385995 call _decEltRefCounts _mt[243] this[149862]))
    unknown call_tmp[669339] "expr temp" "maybe param" "maybe type" "temp"
    (669342 'move' call_tmp[669339](149848 call _cond_test call_tmp[669334]))
    if call_tmp[669339]
    {
      unknown call_tmp[669344] "expr temp" "maybe param" "maybe type" "temp"
      (669347 'move' call_tmp[669344](149842 call _to_unmanaged this[149862]))
      unknown call_tmp[669351] "expr temp" "maybe param" "maybe type" "temp"
      (669354 'move' call_tmp[669351](386001 call eltType _mt[243] this[149862]))
      (149845 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669344] call_tmp[669351])
    }
    (520475 return _void[55])
  }
  type BaseRectangularArr[149856](?) val super[355779]:BaseArrOverRectangularDom[149805](?) "super class" unknown eltType[149823] "type variable"
  function BaseSparseArr[149900](?).dsiGetBaseDom[149884](arg _mt[149904]:_MT[238], arg this[149902]:BaseSparseArr[149900](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520479] "RVV" "temp"
    unknown call_tmp[669358] "expr temp" "maybe param" "maybe type" "temp"
    (669361 'move' call_tmp[669358](386006 call dom _mt[243] this[149902]))
    (520484 'move' ret[520479](520483 'deref' call_tmp[669358]))
    (520481 return ret[520479])
  }
  function BaseSparseArr[149900](?).deinit[149894](arg _mt[149908]:_MT[238], arg this[149906]:BaseSparseArr[149900](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520486 return _void[55])
  }
  type BaseSparseArr[149900](?) val super[355791]:AbsBaseArr[149740](?) "super class" unknown rank[149871] "param" int(64)[13] unknown idxType[149875] "type variable" unknown dom[149878]
  function BaseSparseArrImpl[150571](?).init[149934](arg _mt[150575]:_MT[238], arg this[150573]:BaseSparseArrImpl[150571](?), arg eltType[149932]:_any[178](?), param arg rank[149937]:int(64)[13], arg idxType[149940]:_any[178](?), arg dom[149942]:_any[178](?), param arg initElts[149945]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461932] "temporary of super field" "temp"
    (461934 'move' super_tmp[461932](461931 '.v' this[150573] c"super"))
    (149961 call(149949 call (partial) init _mt[243] super_tmp[461932])(eltType = eltType[149932])(rank = rank[149937])(idxType = idxType[149940])(dom = dom[149942]))
    (481729 'end of statement')
    unknown tmp[461937] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492445] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[669365] "expr temp" "maybe param" "maybe type" "temp"
      (669368 'move' call_tmp[669365](461939 '.v' this[150573] c"super"))
      (492449 'move' call_type_tmp[492445](461942 'typeof' call_tmp[669365]))
    }
    (461943 'move' tmp[461937] call_type_tmp[492445])
    unknown call_tmp[669370] "maybe param" "maybe type" "temp"
    (669373 'move' call_tmp[669370](461948 'cast' tmp[461937] this[150573]))
    unknown chpl__thisAsParent[461945] "dead at end of block" "insert auto destroy" "temp"
    (543745 'init var' chpl__thisAsParent[461945] call_tmp[669370] tmp[461937])
    (461951 'setcid' chpl__thisAsParent[461945])
    (481730 'end of statement')
    unknown call_tmp[669375] "expr temp" "maybe param" "maybe type" "temp"
    (669378 'move' call_tmp[669375](149969 '.' this[150573] c"dom"))
    unknown call_tmp[669382] "expr temp" "maybe param" "maybe type" "temp"
    (669385 'move' call_tmp[669382](149972 call nnzDom _mt[243] call_tmp[669375]))
    unknown call_tmp[669389] "maybe param" "maybe type" "temp"
    (669392 'move' call_tmp[669389](149982 call(149975 call (partial) buildArray _mt[243] call_tmp[669382]) eltType[149932](initElts = initElts[149945])))
    unknown call_tmp[669394] "expr temp" "maybe param" "maybe type" "temp"
    (669397 'move' call_tmp[669394](461970 '.' this[150573] c"dom"))
    unknown call_tmp[669401] "expr temp" "maybe param" "maybe type" "temp"
    (669404 'move' call_tmp[669401](461960 call nnzDom _mt[243] call_tmp[669394]))
    unknown call_tmp[669406] "expr temp" "maybe param" "maybe type" "temp"
    (669409 'move' call_tmp[669406](461958 call chpl__ensureDomainExpr call_tmp[669401]))
    unknown call_tmp[669411] "expr temp" "maybe param" "maybe type" "temp"
    (669414 'move' call_tmp[669411](461973 '.v' this[150573] c"eltType"))
    unknown call_tmp[669416] "maybe param" "maybe type" "temp"
    (669419 'move' call_tmp[669416](461956 call chpl__buildArrayRuntimeType call_tmp[669406] call_tmp[669411]))
    unknown tmp[461953] "temp"
    (461964 'init var' tmp[461953] call_tmp[669389] call_tmp[669416])
    (461966 'init field' this[150573] c"data" tmp[461953])
    (481731 'end of statement')
    unknown tmp[461977] "temp"
    unknown call_tmp[669421] "expr temp" "maybe param" "maybe type" "temp"
    (669424 'move' call_tmp[669421](461986 '.v' this[150573] c"eltType"))
    (461980 'default init var' tmp[461977] call_tmp[669421])
    (461982 '.=' this[150573] c"irv" tmp[461977])
    (481732 'end of statement')
    (461989 'setcid' this[150573])
    (520488 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).deinit[149990](arg _mt[150579]:_MT[238], arg this[150577]:BaseSparseArrImpl[150571](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520490 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiElementInitializationComplete[149997](arg _mt[150583]:_MT[238], arg this[150581]:BaseSparseArrImpl[150571](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669428] "expr temp" "maybe param" "maybe type" "temp"
    (669431 'move' call_tmp[669428](360785 call data _mt[243] this[150581]))
    (150004 call(150000 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[669428]))
    (520492 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiElementDeinitializationComplete[150011](arg _mt[150587]:_MT[238], arg this[150585]:BaseSparseArrImpl[150571](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669437] "expr temp" "maybe param" "maybe type" "temp"
    (669440 'move' call_tmp[669437](360790 call data _mt[243] this[150585]))
    (150018 call(150014 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[669437]))
    (520494 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiDestroyArr[150029](arg _mt[150591]:_MT[238], arg this[150589]:BaseSparseArrImpl[150571](?), arg deinitElts[150026]:bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669444] "expr temp" "maybe param" "maybe type" "temp"
    (669447 'move' call_tmp[669444](150037 call _cond_test deinitElts[150026]))
    if call_tmp[669444]
    {
      unknown call_tmp[669451] "expr temp" "maybe param" "maybe type" "temp"
      (669454 'move' call_tmp[669451](386019 call data _mt[243] this[150589]))
      (150035 call _deinitElements call_tmp[669451])
    }
    (520496 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).IRV[150052](arg _mt[150595]:_MT[238], arg this[150593]:BaseSparseArrImpl[150571](?)) ref : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520500] "RVV" "temp"
    unknown call_tmp[669458] "expr temp" "maybe param" "maybe type" "temp"
    (669461 'move' call_tmp[669458](386027 call irv _mt[243] this[150593]))
    (520505 'move' ret[520500](520504 'addr of' call_tmp[669458]))
    (520502 return ret[520500])
  }
  function BaseSparseArrImpl[150571](?).sparseBulkShiftArray[150064](arg _mt[150599]:_MT[238], arg this[150597]:BaseSparseArrImpl[150571](?), arg shiftMap[150062]:_any[178](?), arg oldnnz[150066]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown newIdx[150069] "dead at end of block" "insert auto destroy"
    (543747 'default init var' newIdx[150069] int(64)[13])
    (150072 'end of statement')
    unknown prevNewIdx[150075] "dead at end of block" "insert auto destroy"
    (543749 'init var' prevNewIdx[150075] 1)
    (150078 'end of statement')
    unknown call_tmp[669465] "expr temp" "maybe param" "maybe type" "temp"
    (669468 'move' call_tmp[669465](150081 call _dom _mt[243] shiftMap[150062]))
    unknown call_tmp[669472] "expr temp" "maybe param" "maybe type" "temp"
    (669475 'move' call_tmp[669472](150084 call high _mt[243] call_tmp[669465]))
    unknown call_tmp[669477] "expr temp" "maybe param" "maybe type" "temp"
    (669480 'move' call_tmp[669477](150088 call + call_tmp[669472] 1))
    unknown call_tmp[669484] "expr temp" "maybe param" "maybe type" "temp"
    (669487 'move' call_tmp[669484](360796 call dom _mt[243] this[150597]))
    unknown call_tmp[669491] "expr temp" "maybe param" "maybe type" "temp"
    (669494 'move' call_tmp[669491](150091 call nnzDom _mt[243] call_tmp[669484]))
    unknown call_tmp[669498] "expr temp" "maybe param" "maybe type" "temp"
    (669501 'move' call_tmp[669498](150094 call high _mt[243] call_tmp[669491]))
    unknown call_tmp[669503] "expr temp" "maybe param" "maybe type" "temp"
    (669506 'move' call_tmp[669503](150097 call chpl_build_bounded_range call_tmp[669477] call_tmp[669498]))
    Forall {
      induction variables:
        
        unknown i[150108] "index var" "insert auto destroy"
      iterated expressions:
        call_tmp[669503]
      shadow variables:
      other variables
        forall body
      {
        unknown call_tmp[669510] "expr temp" "maybe param" "maybe type" "temp"
        (669513 'move' call_tmp[669510](150102 call(386032 call (partial) data _mt[243] this[150597]) i[150108]))
        unknown call_tmp[669517] "expr temp" "maybe param" "maybe type" "temp"
        (669520 'move' call_tmp[669517](386038 call irv _mt[243] this[150597]))
        (150104 call = call_tmp[669510] call_tmp[669517])
        (481738 'end of statement' i[150108])
      }
    }
    {
      unknown _indexOfInterest[150231] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150232] "expr temp" "temp"
      unknown call_tmp[669522] "expr temp" "maybe param" "maybe type" "temp"
      (669525 'move' call_tmp[669522](150256 call - 1))
      unknown call_tmp[669527] "expr temp" "maybe param" "maybe type" "temp"
      (669530 'move' call_tmp[669527](150260 call chpl_direct_range_iter 1 oldnnz[150066] call_tmp[669522]))
      unknown call_tmp[669532] "expr temp" "maybe param" "maybe type" "temp"
      (669535 'move' call_tmp[669532](150249 call _getIterator call_tmp[669527]))
      unknown call_tmp[669539] "expr temp" "maybe param" "maybe type" "temp"
      (669542 'move' call_tmp[669539](150267 call _dom _mt[243] shiftMap[150062]))
      unknown call_tmp[669546] "expr temp" "maybe param" "maybe type" "temp"
      (669549 'move' call_tmp[669546](150271 call(150265 call (partial) dim _mt[243] call_tmp[669539]) 0))
      unknown call_tmp[669551] "expr temp" "maybe param" "maybe type" "temp"
      (669554 'move' call_tmp[669551](150274 call - 1))
      unknown call_tmp[669556] "expr temp" "maybe param" "maybe type" "temp"
      (669559 'move' call_tmp[669556](150263 call chpl_by call_tmp[669546] call_tmp[669551]))
      unknown call_tmp[669561] "expr temp" "maybe param" "maybe type" "temp"
      (669564 'move' call_tmp[669561](150276 call _getIterator call_tmp[669556]))
      (150290 'move' _iterator[150232](150142 call _build_tuple call_tmp[669532] call_tmp[669561]))
      Defer
      {
        {
          (150320 call _freeIterator _iterator[150232])
        }
      }
      { scopeless type
        (150295 'move' _indexOfInterest[150231](150292 call iteratorIndex _iterator[150232]))
      }
      ForLoop[150233]
      {
        (150300 call _check_tuple_var_decl _indexOfInterest[150231] 2)
        (481741 'end of statement')
        unknown i[150306] "index var" "insert auto destroy"
        (481742 'end of statement')
        (150308 'move' i[150306](150304 call _indexOfInterest[150231] 0))
        (481743 'end of statement' i[150306])
        unknown _newIdx[150313] "index var" "insert auto destroy"
        (481745 'end of statement')
        (150315 'move' _newIdx[150313](150311 call _indexOfInterest[150231] 1))
        (481746 'end of statement' _newIdx[150313])
        {
          unknown call_tmp[669566] "expr temp" "maybe param" "maybe type" "temp"
          (669569 'move' call_tmp[669566](150147 call shiftMap[150062] _newIdx[150313]))
          (150148 call = newIdx[150069] call_tmp[669566])
          (481748 'end of statement' newIdx[150069] _newIdx[150313])
          unknown call_tmp[669573] "expr temp" "maybe param" "maybe type" "temp"
          (669576 'move' call_tmp[669573](150155 call(386046 call (partial) data _mt[243] this[150597]) newIdx[150069]))
          unknown call_tmp[669580] "expr temp" "maybe param" "maybe type" "temp"
          (669583 'move' call_tmp[669580](150159 call(386052 call (partial) data _mt[243] this[150597]) i[150306]))
          (150160 call = call_tmp[669573] call_tmp[669580])
          (481751 'end of statement' newIdx[150069] i[150306])
          {
            unknown _indexOfInterest[150182] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[150183] "expr temp" "temp"
            unknown call_tmp[669585] "expr temp" "maybe param" "maybe type" "temp"
            (669588 'move' call_tmp[669585](150196 call + newIdx[150069] 1))
            unknown call_tmp[669590] "expr temp" "maybe param" "maybe type" "temp"
            (669593 'move' call_tmp[669590](150200 call - prevNewIdx[150075] 1))
            unknown call_tmp[669595] "expr temp" "maybe param" "maybe type" "temp"
            (669598 'move' call_tmp[669595](150203 call chpl_direct_range_iter call_tmp[669585] call_tmp[669590] 1))
            (150192 'move' _iterator[150183](150190 call _getIterator call_tmp[669595]))
            Defer
            {
              {
                (150219 call _freeIterator _iterator[150183])
              }
            }
            { scopeless type
              (150208 'move' _indexOfInterest[150182](150205 call iteratorIndex _iterator[150183]))
            }
            ForLoop[150184]
            {
              unknown emptyIndex[150212] "index var" "insert auto destroy"
              (481755 'end of statement')
              (150214 'move' emptyIndex[150212] _indexOfInterest[150182])
              (481756 'end of statement' emptyIndex[150212])
              unknown call_tmp[669602] "expr temp" "maybe param" "maybe type" "temp"
              (669605 'move' call_tmp[669602](150177 call(386058 call (partial) data _mt[243] this[150597]) emptyIndex[150212]))
              unknown call_tmp[669609] "expr temp" "maybe param" "maybe type" "temp"
              (669612 'move' call_tmp[669609](386064 call irv _mt[243] this[150597]))
              (150179 call = call_tmp[669602] call_tmp[669609])
              (481758 'end of statement' emptyIndex[150212])
              label _continueLabel[150187]
              _indexOfInterest[150182]
              _iterator[150183]
            }
            label _breakLabel[150188]
          }
          (150228 call = prevNewIdx[150075] newIdx[150069])
          (481760 'end of statement' prevNewIdx[150075] newIdx[150069])
        }
        label _continueLabel[150236]
        _indexOfInterest[150231]
        _iterator[150232]
      }
      label _breakLabel[150237]
    }
    {
      unknown _indexOfInterest[150343] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150344] "expr temp" "temp"
      unknown call_tmp[669614] "expr temp" "maybe param" "maybe type" "temp"
      (669617 'move' call_tmp[669614](150358 call - prevNewIdx[150075] 1))
      unknown call_tmp[669619] "expr temp" "maybe param" "maybe type" "temp"
      (669622 'move' call_tmp[669619](150361 call chpl_direct_range_iter 1 call_tmp[669614] 1))
      (150353 'move' _iterator[150344](150351 call _getIterator call_tmp[669619]))
      Defer
      {
        {
          (150377 call _freeIterator _iterator[150344])
        }
      }
      { scopeless type
        (150366 'move' _indexOfInterest[150343](150363 call iteratorIndex _iterator[150344]))
      }
      ForLoop[150345]
      {
        unknown i[150370] "index var" "insert auto destroy"
        (481764 'end of statement')
        (150372 'move' i[150370] _indexOfInterest[150343])
        (481765 'end of statement' i[150370])
        unknown call_tmp[669626] "expr temp" "maybe param" "maybe type" "temp"
        (669629 'move' call_tmp[669626](150338 call(386074 call (partial) data _mt[243] this[150597]) i[150370]))
        unknown call_tmp[669633] "expr temp" "maybe param" "maybe type" "temp"
        (669636 'move' call_tmp[669633](386080 call irv _mt[243] this[150597]))
        (150340 call = call_tmp[669626] call_tmp[669633])
        (481767 'end of statement' i[150370])
        label _continueLabel[150348]
        _indexOfInterest[150343]
        _iterator[150344]
      }
      label _breakLabel[150349]
    }
    (520507 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).sparseShiftArray[150390](arg _mt[150603]:_MT[238], arg this[150601]:BaseSparseArrImpl[150571](?), arg shiftrange[150388]:_any[178](?), arg initrange[150392]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150405] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150406] "expr temp" "temp"
      (150415 'move' _iterator[150406](150413 call _getIterator initrange[150392]))
      Defer
      {
        {
          (150431 call _freeIterator _iterator[150406])
        }
      }
      { scopeless type
        (150420 'move' _indexOfInterest[150405](150417 call iteratorIndex _iterator[150406]))
      }
      ForLoop[150407]
      {
        unknown i[150424] "index var" "insert auto destroy"
        (481770 'end of statement')
        (150426 'move' i[150424] _indexOfInterest[150405])
        (481771 'end of statement' i[150424])
        {
          unknown call_tmp[669640] "expr temp" "maybe param" "maybe type" "temp"
          (669643 'move' call_tmp[669640](150399 call(386087 call (partial) data _mt[243] this[150601]) i[150424]))
          unknown call_tmp[669647] "expr temp" "maybe param" "maybe type" "temp"
          (669650 'move' call_tmp[669647](386093 call irv _mt[243] this[150601]))
          (150401 call = call_tmp[669640] call_tmp[669647])
          (481773 'end of statement' i[150424])
        }
        label _continueLabel[150410]
        _indexOfInterest[150405]
        _iterator[150406]
      }
      label _breakLabel[150411]
    }
    {
      unknown _indexOfInterest[150461] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150462] "expr temp" "temp"
      unknown call_tmp[669652] "expr temp" "maybe param" "maybe type" "temp"
      (669655 'move' call_tmp[669652](150442 call - 1))
      unknown call_tmp[669657] "expr temp" "maybe param" "maybe type" "temp"
      (669660 'move' call_tmp[669657](150444 call chpl_by shiftrange[150388] call_tmp[669652]))
      (150471 'move' _iterator[150462](150469 call _getIterator call_tmp[669657]))
      Defer
      {
        {
          (150491 call _freeIterator _iterator[150462])
        }
      }
      { scopeless type
        (150480 'move' _indexOfInterest[150461](150477 call iteratorIndex _iterator[150462]))
      }
      ForLoop[150463]
      {
        unknown i[150484] "index var" "insert auto destroy"
        (481776 'end of statement')
        (150486 'move' i[150484] _indexOfInterest[150461])
        (481777 'end of statement' i[150484])
        {
          unknown call_tmp[669664] "expr temp" "maybe param" "maybe type" "temp"
          (669667 'move' call_tmp[669664](150449 call + i[150484] 1))
          unknown call_tmp[669669] "expr temp" "maybe param" "maybe type" "temp"
          (669672 'move' call_tmp[669669](150452 call(386099 call (partial) data _mt[243] this[150601]) call_tmp[669664]))
          unknown call_tmp[669676] "expr temp" "maybe param" "maybe type" "temp"
          (669679 'move' call_tmp[669676](150456 call(386105 call (partial) data _mt[243] this[150601]) i[150484]))
          (150457 call = call_tmp[669669] call_tmp[669676])
          (481779 'end of statement' i[150484] i[150484])
        }
        label _continueLabel[150466]
        _indexOfInterest[150461]
        _iterator[150462]
      }
      label _breakLabel[150467]
    }
    unknown call_tmp[669685] "expr temp" "maybe param" "maybe type" "temp"
    (669688 'move' call_tmp[669685](150500 call low _mt[243] shiftrange[150388]))
    unknown call_tmp[669690] "expr temp" "maybe param" "maybe type" "temp"
    (669693 'move' call_tmp[669690](150504 call(386111 call (partial) data _mt[243] this[150601]) call_tmp[669685]))
    unknown call_tmp[669697] "expr temp" "maybe param" "maybe type" "temp"
    (669700 'move' call_tmp[669697](386116 call irv _mt[243] this[150601]))
    (150506 call = call_tmp[669690] call_tmp[669697])
    (520509 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).sparseShiftArrayBack[150515](arg _mt[150607]:_MT[238], arg this[150605]:BaseSparseArrImpl[150571](?), arg shiftrange[150513]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150534] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150535] "expr temp" "temp"
      (150544 'move' _iterator[150535](150542 call _getIterator shiftrange[150513]))
      Defer
      {
        {
          (150560 call _freeIterator _iterator[150535])
        }
      }
      { scopeless type
        (150549 'move' _indexOfInterest[150534](150546 call iteratorIndex _iterator[150535]))
      }
      ForLoop[150536]
      {
        unknown i[150553] "index var" "insert auto destroy"
        (481784 'end of statement')
        (150555 'move' i[150553] _indexOfInterest[150534])
        (481785 'end of statement' i[150553])
        {
          unknown call_tmp[669704] "expr temp" "maybe param" "maybe type" "temp"
          (669707 'move' call_tmp[669704](150522 call(386122 call (partial) data _mt[243] this[150605]) i[150553]))
          unknown call_tmp[669711] "expr temp" "maybe param" "maybe type" "temp"
          (669714 'move' call_tmp[669711](150526 call + i[150553] 1))
          unknown call_tmp[669716] "expr temp" "maybe param" "maybe type" "temp"
          (669719 'move' call_tmp[669716](150529 call(386128 call (partial) data _mt[243] this[150605]) call_tmp[669711]))
          (150530 call = call_tmp[669704] call_tmp[669716])
          (481787 'end of statement' i[150553] i[150553])
        }
        label _continueLabel[150539]
        _indexOfInterest[150534]
        _iterator[150535]
      }
      label _breakLabel[150540]
    }
    (520511 return _void[55])
  }
  type BaseSparseArrImpl[150571](?) val super[355793]:BaseSparseArr[149900](?) "delay instantiation" "super class" unknown data[149926] "local field" "unsafe"(149924 call chpl__buildArrayRuntimeType(149922 call chpl__ensureDomainExpr(149917 call nnzDom _mt[243] dom[149878])) eltType[149714]) unknown irv[150046] eltType[149714]
  function _delete_dist[150617](arg dist[150614]:unmanaged BaseDist[415584], arg privatized[150620]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150630 call(150626 call (partial) dsiDestroyDist _mt[243] dist[150614]))
    (481790 'end of statement')
    unknown tmp[427268] "maybe param" "temp"
    (427279 'move' tmp[427268] 1)
    unknown call_tmp[669725] "expr temp" "maybe param" "maybe type" "temp"
    (669728 'move' call_tmp[669725](427281 call _cond_invalid tmp[427268]))
    if call_tmp[669725]
    {
      (427284 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568801] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568802] "maybe param" "temp"
    unknown call_tmp[669730] "expr temp" "maybe param" "maybe type" "temp"
    (669733 'move' call_tmp[669730](427269 call isTrue tmp[427268]))
    (568807 'move' tmp[568802](568805 call _cond_test call_tmp[669730]))
    if tmp[568802]
    {
      unknown tmp[568809] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568811 'move' tmp[568809](427272 call isTrue privatized[150620]))
      (568816 'move' tmp[568801](568813 '_paramFoldLogical' tmp[568802] tmp[568809]))
    }
    {
      (568821 'move' tmp[568801](568818 '_paramFoldLogical' tmp[568802] 0))
    }
    unknown call_tmp[669735] "expr temp" "maybe param" "maybe type" "temp"
    (669738 'move' call_tmp[669735](150647 call _cond_test tmp[568801]))
    if call_tmp[669735]
    {
      unknown call_tmp[669742] "expr temp" "maybe param" "maybe type" "temp"
      (669745 'move' call_tmp[669742](150639 call pid _mt[243] dist[150614]))
      (150644 call _freePrivatizedClass call_tmp[669742] dist[150614])
    }
    (150653 call chpl__delete dist[150614])
    (520513 return _void[55])
  }
  function _delete_dom[150662](arg dom[150660]:_any[178](?), arg privatized[150665]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150675 call(150671 call (partial) dsiDestroyDom _mt[243] dom[150660]))
    (481794 'end of statement')
    unknown tmp[427289] "maybe param" "temp"
    (427300 'move' tmp[427289] 1)
    unknown call_tmp[669749] "expr temp" "maybe param" "maybe type" "temp"
    (669752 'move' call_tmp[669749](427302 call _cond_invalid tmp[427289]))
    if call_tmp[669749]
    {
      (427305 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568828] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568829] "maybe param" "temp"
    unknown call_tmp[669754] "expr temp" "maybe param" "maybe type" "temp"
    (669757 'move' call_tmp[669754](427290 call isTrue tmp[427289]))
    (568834 'move' tmp[568829](568832 call _cond_test call_tmp[669754]))
    if tmp[568829]
    {
      unknown tmp[568836] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568838 'move' tmp[568836](427293 call isTrue privatized[150665]))
      (568843 'move' tmp[568828](568840 '_paramFoldLogical' tmp[568829] tmp[568836]))
    }
    {
      (568848 'move' tmp[568828](568845 '_paramFoldLogical' tmp[568829] 0))
    }
    unknown call_tmp[669759] "expr temp" "maybe param" "maybe type" "temp"
    (669762 'move' call_tmp[669759](150692 call _cond_test tmp[568828]))
    if call_tmp[669759]
    {
      unknown call_tmp[669766] "expr temp" "maybe param" "maybe type" "temp"
      (669769 'move' call_tmp[669766](150684 call pid _mt[243] dom[150660]))
      (150689 call _freePrivatizedClass call_tmp[669766] dom[150660])
    }
    (150698 call chpl__delete dom[150660])
    (520515 return _void[55])
  }
  function _delete_arr[150710](arg arr[150707]:unmanaged BaseArr[415569], param arg privatized[150713]:bool[10], arg deinitElts[150717] :
  1 =
  1) : _unknown[51] "no return value for void"
  {
    (150729 call(150723 call (partial) dsiDestroyArr _mt[243] arr[150707])(deinitElts = deinitElts[150717]))
    (481798 'end of statement')
    (150739 call(150735 call (partial) decEltCountsIfNeeded _mt[243] arr[150707]))
    (481799 'end of statement')
    unknown tmp[427310] "maybe param" "temp"
    (427321 'move' tmp[427310] 1)
    unknown call_tmp[669775] "expr temp" "maybe param" "maybe type" "temp"
    (669778 'move' call_tmp[669775](427323 call _cond_invalid tmp[427310]))
    if call_tmp[669775]
    {
      (427326 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568855] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568856] "maybe param" "temp"
    unknown call_tmp[669780] "expr temp" "maybe param" "maybe type" "temp"
    (669783 'move' call_tmp[669780](427311 call isTrue tmp[427310]))
    (568861 'move' tmp[568856](568859 call _cond_test call_tmp[669780]))
    if tmp[568856]
    {
      unknown tmp[568863] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568865 'move' tmp[568863](427314 call isTrue privatized[150713]))
      (568870 'move' tmp[568855](568867 '_paramFoldLogical' tmp[568856] tmp[568863]))
    }
    {
      (568875 'move' tmp[568855](568872 '_paramFoldLogical' tmp[568856] 0))
    }
    unknown call_tmp[669785] "expr temp" "maybe param" "maybe type" "temp"
    (669788 'move' call_tmp[669785](150755 call _cond_test tmp[568855]))
    if call_tmp[669785]
    {
      unknown call_tmp[669792] "expr temp" "maybe param" "maybe type" "temp"
      (669795 'move' call_tmp[669792](150747 call pid _mt[243] arr[150707]))
      (150752 call _freePrivatizedClass call_tmp[669792] arr[150707])
    }
    (150761 call chpl__delete arr[150707])
    (520517 return _void[55])
  }
  function chpl_assignDomainWithGetSetIndices[150773](arg lhs[150770]:_any[178](?), arg rhs[150776]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown arrType[150795] "dead at end of block" "insert auto destroy" "type variable"(150794 call(150790 call (partial) getBaseArrType _mt[243] lhs[150770]))
    (543756 'move' arrType[150795](543755 call(543752 call (partial) getBaseArrType _mt[243] lhs[150770])))
    unknown call_tmp[669803] "maybe param" "maybe type" "temp"
    (669806 'move' call_tmp[669803](150800 call rank _mt[243] lhs[150770]))
    unknown rank[150803] "dead at end of block" "param"
    (543758 'init var' rank[150803] call_tmp[669803])
    (150806 'end of statement')
    unknown idxType[150811] "dead at end of block" "insert auto destroy" "type variable"(150808 call idxType _mt[243] lhs[150770])
    (543764 'move' idxType[150811](543761 call idxType _mt[243] lhs[150770]))
    unknown call_tmp[669814] "maybe param" "maybe type" "temp"
    (669817 'move' call_tmp[669814](150815 call stridable _mt[243] lhs[150770]))
    unknown stridable[150818] "dead at end of block" "param"
    (543766 'init var' stridable[150818] call_tmp[669814])
    (150821 'end of statement')
    {
      unknown _indexOfInterest[151021] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151022] "expr temp" "temp"
      unknown call_tmp[669821] "expr temp" "maybe param" "maybe type" "temp"
      (669824 'move' call_tmp[669821](150824 call _arrs _mt[243] lhs[150770]))
      (151031 'move' _iterator[151022](151029 call _getIterator call_tmp[669821]))
      Defer
      {
        {
          (151048 call _freeIterator _iterator[151022])
        }
      }
      { scopeless type
        (151037 'move' _indexOfInterest[151021](151034 call iteratorIndex _iterator[151022]))
      }
      ForLoop[151023]
      {
        unknown e[151041] "index var" "insert auto destroy"
        (481804 'end of statement')
        (151043 'move' e[151041] _indexOfInterest[151021])
        (481805 'end of statement' e[151041])
        {
          const tmp[151012] "const" "temp"
          unknown call_tmp[669826] "expr temp" "maybe param" "maybe type" "temp"
          (669829 'move' call_tmp[669826](151009 '_wide_get_locale' e[151041]))
          (151014 'move' tmp[151012](151010 'deref' call_tmp[669826]))
          {
            {
              unknown call_tmp[669831] "expr temp" "maybe param" "maybe type" "temp"
              (669834 'move' call_tmp[669831](150830 'to nilable class from type' arrType[150795]))
              unknown call_tmp[669836] "maybe param" "maybe type" "temp"
              (669839 'move' call_tmp[669836](150831 call _cast call_tmp[669831] e[151041]))
              unknown eCastQ[150833] "dead at end of block" "insert auto destroy"
              (543768 'init var' eCastQ[150833] call_tmp[669836])
              (150836 'end of statement')
              unknown call_tmp[669841] "expr temp" "maybe param" "maybe type" "temp"
              (669844 'move' call_tmp[669841](150840 call == eCastQ[150833] nil[44]))
              unknown call_tmp[669846] "expr temp" "maybe param" "maybe type" "temp"
              (669849 'move' call_tmp[669846](150888 call _cond_test call_tmp[669841]))
              if call_tmp[669846]
              {
                unknown call_tmp[669851] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                (669854 'move' call_tmp[669851](461991 'typeof' lhs[150770]))
                unknown call_tmp[669856] "expr temp" "maybe param" "maybe type" "temp"
                (669859 'move' call_tmp[669856](150863 call _cast string[26] call_tmp[669851]))
                unknown call_tmp[669861] "expr temp" "maybe param" "maybe type" "temp"
                (669864 'move' call_tmp[669861](150884 call _cast string[26] arrType[150795]))
                (150886 call halt "internal error: " call_tmp[669856] " contains an bad array type " call_tmp[669861])
                (481809 'end of statement' arrType[150795])
              }
              unknown call_tmp[669866] "maybe param" "maybe type" "temp"
              (669869 'move' call_tmp[669866](150894 call postfix! eCastQ[150833]))
              unknown eCast[150896] "dead at end of block" "insert auto destroy"
              (543770 'init var' eCast[150896] call_tmp[669866])
              (150899 'end of statement')
              unknown call_tmp[669873] "maybe param" "maybe type" "temp"
              (669876 'move' call_tmp[669873](150905 call(150901 call (partial) getIndices _mt[243] rhs[150776])))
              unknown inds[150906] "dead at end of block" "insert auto destroy"
              (543772 'init var' inds[150906] call_tmp[669873])
              (150909 'end of statement')
              unknown tmp[150922] "dead at end of block" "insert auto destroy"
              unknown call_tmp[669878] "expr temp" "maybe param" "maybe type" "temp"
              (669881 'move' call_tmp[669878](150919 call range[64319](?) idxType[150811] bounded[64208] stridable[150818]))
              unknown call_tmp[669883] "expr temp" "maybe param" "maybe type" "temp"
              (669886 'move' call_tmp[669883](150920 call * rank[150803] call_tmp[669878]))
              (543774 'default init var' tmp[150922] call_tmp[669883])
              (150925 'end of statement' arrType[150795] e[151041] eCastQ[150833] idxType[150811])
              {
                unknown i[150964] "dead at end of block" "insert auto destroy"
                (543776 'init var' i[150964] 0)
                (481813 'end of statement')
                unknown tmp[150965] "maybe param" "temp"
                unknown call_tmp[669888] "expr temp" "maybe param" "maybe type" "temp"
                (669891 'move' call_tmp[669888](150929 call - rank[150803] 1))
                (150977 'move' tmp[150965](150975 call chpl_compute_low_param_loop_bound 0 call_tmp[669888]))
                unknown tmp[150966] "maybe param" "temp"
                unknown call_tmp[669893] "expr temp" "maybe param" "maybe type" "temp"
                (669896 'move' call_tmp[669893](150982 call - rank[150803] 1))
                (150987 'move' tmp[150966](150985 call chpl_compute_high_param_loop_bound 0 call_tmp[669893]))
                unknown tmp[150967] "maybe param" "temp"
                (150990 'move' tmp[150967] 1)
                ParamForLoop[150992]
                { i[150964] tmp[150965] tmp[150966] tmp[150967]
                  {
                    unknown call_tmp[669898] "maybe param" "maybe type" "temp"
                    (669901 'move' call_tmp[669898](150936 call inds[150906] i[150964]))
                    unknown from[150937] "dead at end of block" "insert auto destroy"
                    (543778 'init var' from[150937] call_tmp[669898])
                    (150940 'end of statement' inds[150906] i[150964])
                    unknown call_tmp[669903] "expr temp" "maybe param" "maybe type" "temp"
                    (669906 'move' call_tmp[669903](150945 call tmp[150922] i[150964]))
                    unknown call_tmp[669910] "expr temp" "maybe param" "maybe type" "temp"
                    (669913 'move' call_tmp[669910](150958 call range[64319](?) idxType[150811] bounded[64208] stridable[150818]))
                    unknown call_tmp[669915] "expr temp" "maybe param" "maybe type" "temp"
                    (669918 'move' call_tmp[669915](150960 call(150947 call (partial) safeCast _mt[243] from[150937]) call_tmp[669910]))
                    (150961 call = call_tmp[669903] call_tmp[669915])
                    (481816 'end of statement' tmp[150922] i[150964] from[150937] idxType[150811])
                  }
                }
                label _unused_continueLabel[150969]
                label _breakLabel[150968]
              }
              (151007 call(151002 call (partial) dsiReallocate _mt[243] eCast[150896]) tmp[150922])
              (481821 'end of statement' eCast[150896] tmp[150922])
            }
            (151017 'on block' 0 tmp[151012])
          }
        }
        label _continueLabel[151026]
        _indexOfInterest[151021]
        _iterator[151022]
      }
      label _breakLabel[151027]
    }
    unknown call_tmp[669926] "expr temp" "maybe param" "maybe type" "temp"
    (669929 'move' call_tmp[669926](151064 call(151060 call (partial) getIndices _mt[243] rhs[150776])))
    (151066 call(151056 call (partial) dsiSetIndices _mt[243] lhs[150770]) call_tmp[669926])
    (481824 'end of statement')
    {
      unknown _indexOfInterest[151109] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151110] "expr temp" "temp"
      unknown call_tmp[669933] "expr temp" "maybe param" "maybe type" "temp"
      (669936 'move' call_tmp[669933](151070 call _arrs _mt[243] lhs[150770]))
      (151119 'move' _iterator[151110](151117 call _getIterator call_tmp[669933]))
      Defer
      {
        {
          (151136 call _freeIterator _iterator[151110])
        }
      }
      { scopeless type
        (151125 'move' _indexOfInterest[151109](151122 call iteratorIndex _iterator[151110]))
      }
      ForLoop[151111]
      {
        unknown e[151129] "index var" "insert auto destroy"
        (481826 'end of statement')
        (151131 'move' e[151129] _indexOfInterest[151109])
        (481827 'end of statement' e[151129])
        {
          unknown call_tmp[669938] "expr temp" "maybe param" "maybe type" "temp"
          (669941 'move' call_tmp[669938](151075 'to nilable class from type' arrType[150795]))
          unknown call_tmp[669943] "maybe param" "maybe type" "temp"
          (669946 'move' call_tmp[669943](151076 call _cast call_tmp[669938] e[151129]))
          unknown eCastQ[151078] "dead at end of block" "insert auto destroy"
          (543780 'init var' eCastQ[151078] call_tmp[669943])
          (151081 'end of statement')
          unknown call_tmp[669948] "maybe param" "maybe type" "temp"
          (669951 'move' call_tmp[669948](151084 call postfix! eCastQ[151078]))
          unknown eCast[151086] "dead at end of block" "insert auto destroy"
          (543782 'init var' eCast[151086] call_tmp[669948])
          (151089 'end of statement' arrType[150795] e[151129] eCastQ[151078])
          const tmp[151101] "const" "temp"
          unknown call_tmp[669953] "expr temp" "maybe param" "maybe type" "temp"
          (669956 'move' call_tmp[669953](151098 '_wide_get_locale' e[151129]))
          (151103 'move' tmp[151101](151099 'deref' call_tmp[669953]))
          {
            (151096 call(151092 call (partial) dsiPostReallocate _mt[243] eCast[151086]))
            (481832 'end of statement' eCast[151086])
            (151106 'on block' 0 tmp[151101])
          }
        }
        label _continueLabel[151114]
        _indexOfInterest[151109]
        _iterator[151110]
      }
      label _breakLabel[151115]
    }
    unknown call_tmp[669962] "expr temp" "maybe param" "maybe type" "temp"
    (669965 'move' call_tmp[669962](151148 call(151144 call (partial) dsiSupportsPrivatization _mt[243] lhs[150770])))
    unknown call_tmp[669967] "expr temp" "maybe param" "maybe type" "temp"
    (669970 'move' call_tmp[669967](151155 call _cond_test call_tmp[669962]))
    if call_tmp[669967]
    {
      (151152 call _reprivatize lhs[150770])
    }
    (520519 return _void[55])
  }
  where {
    unknown call_tmp[669972] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (669975 'move' call_tmp[669972](461993 'typeof' lhs[150770]))
    unknown call_tmp[669977] "expr temp" "maybe param" "maybe type" "temp"
    (669980 'move' call_tmp[669977](150783 call _to_borrowed call_tmp[669972]))
    (354440 'is_subtype' BaseRectangularDom[382354](?) call_tmp[669977])
  }
  function chpl_assignDomainWithIndsIterSafeForRemoving[151169](arg lhs[151166]:_any[178](?), arg rhs[151172]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[151225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151226] "expr temp" "temp"
      unknown call_tmp[669984] "expr temp" "maybe param" "maybe type" "temp"
      (669987 'move' call_tmp[669984](151201 call(151197 call (partial) dsiIndsIterSafeForRemoving _mt[243] lhs[151166])))
      (151235 'move' _iterator[151226](151233 call _getIterator call_tmp[669984]))
      Defer
      {
        {
          (151252 call _freeIterator _iterator[151226])
        }
      }
      { scopeless type
        (151241 'move' _indexOfInterest[151225](151238 call iteratorIndex _iterator[151226]))
      }
      ForLoop[151227]
      {
        unknown i[151245] "index var" "insert auto destroy"
        (481836 'end of statement')
        (151247 'move' i[151245] _indexOfInterest[151225])
        (481837 'end of statement' i[151245])
        {
          unknown call_tmp[669991] "expr temp" "maybe param" "maybe type" "temp"
          (669994 'move' call_tmp[669991](151208 call(151203 call (partial) contains _mt[243] rhs[151172]) i[151245]))
          unknown call_tmp[669996] "expr temp" "maybe param" "maybe type" "temp"
          (669999 'move' call_tmp[669996](151209 call ! call_tmp[669991]))
          unknown call_tmp[670001] "expr temp" "maybe param" "maybe type" "temp"
          (670004 'move' call_tmp[670001](151220 call _cond_test call_tmp[669996]))
          if call_tmp[670001]
          {
            (151217 call(151212 call (partial) dsiRemove _mt[243] lhs[151166]) i[151245])
            (481839 'end of statement' i[151245])
          }
        }
        label _continueLabel[151230]
        _indexOfInterest[151225]
        _iterator[151226]
      }
      label _breakLabel[151231]
    }
    {
      unknown _indexOfInterest[151285] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151286] "expr temp" "temp"
      (151295 'move' _iterator[151286](151293 call _getIterator rhs[151172]))
      Defer
      {
        {
          (151311 call _freeIterator _iterator[151286])
        }
      }
      { scopeless type
        (151300 'move' _indexOfInterest[151285](151297 call iteratorIndex _iterator[151286]))
      }
      ForLoop[151287]
      {
        unknown i[151304] "index var" "insert auto destroy"
        (481842 'end of statement')
        (151306 'move' i[151304] _indexOfInterest[151285])
        (481843 'end of statement' i[151304])
        {
          unknown call_tmp[670010] "expr temp" "maybe param" "maybe type" "temp"
          (670013 'move' call_tmp[670010](151268 call(151263 call (partial) dsiMember _mt[243] lhs[151166]) i[151304]))
          unknown call_tmp[670015] "expr temp" "maybe param" "maybe type" "temp"
          (670018 'move' call_tmp[670015](151269 call ! call_tmp[670010]))
          unknown call_tmp[670020] "expr temp" "maybe param" "maybe type" "temp"
          (670023 'move' call_tmp[670020](151280 call _cond_test call_tmp[670015]))
          if call_tmp[670020]
          {
            (151277 call(151272 call (partial) dsiAdd _mt[243] lhs[151166]) i[151304])
            (481845 'end of statement' i[151304])
          }
        }
        label _continueLabel[151290]
        _indexOfInterest[151285]
        _iterator[151286]
      }
      label _breakLabel[151291]
    }
    (520521 return _void[55])
  }
  where {
    unknown tmp[427331] "maybe param" "temp"
    unknown call_tmp[670027] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (670030 'move' call_tmp[670027](461995 'typeof' lhs[151166]))
    unknown call_tmp[670032] "expr temp" "maybe param" "maybe type" "temp"
    (670035 'move' call_tmp[670032](151179 call _to_borrowed call_tmp[670027]))
    (427342 'move' tmp[427331](354441 'is_subtype' BaseSparseDom[382364](?) call_tmp[670032]))
    unknown call_tmp[670037] "expr temp" "maybe param" "maybe type" "temp"
    (670040 'move' call_tmp[670037](427344 call _cond_invalid tmp[427331]))
    if call_tmp[670037]
    {
      (427347 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568882] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568883] "maybe param" "temp"
    unknown call_tmp[670042] "expr temp" "maybe param" "maybe type" "temp"
    (670045 'move' call_tmp[670042](427332 call isTrue tmp[427331]))
    (568888 'move' tmp[568883](568886 call _cond_test call_tmp[670042]))
    if tmp[568883]
    {
      (568893 'move' tmp[568882](568890 '_paramFoldLogical' tmp[568883] 1))
    }
    {
      unknown tmp[568895] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[670047] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (670050 'move' call_tmp[670047](461997 'typeof' lhs[151166]))
      unknown call_tmp[670052] "expr temp" "maybe param" "maybe type" "temp"
      (670055 'move' call_tmp[670052](151187 call _to_borrowed call_tmp[670047]))
      unknown call_tmp[670057] "expr temp" "maybe param" "maybe type" "temp"
      (670060 'move' call_tmp[670057](354442 'is_subtype' BaseAssociativeDom[382359](?) call_tmp[670052]))
      (568897 'move' tmp[568895](427336 call isTrue call_tmp[670057]))
      (568902 'move' tmp[568882](568899 '_paramFoldLogical' tmp[568883] tmp[568895]))
    }
    (748521 call chpl_statementLevelSymbol tmp[568882])
  }
  (355237 'used modules list'(145460 'use' ChapelArray[113678])(145462 'use' ChapelRange[64183])(145465 'use' ChapelLocks[187302])(145468 'use' ChapelHashtable[200446]))
}