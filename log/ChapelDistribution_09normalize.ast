AST dump for ChapelDistribution after pass normalize.
Module use list: ChapelArray ChapelRange ChapelLocks ChapelHashtable Sort 

{
  function chpl__init_ChapelDistribution[416027]() : void[4] "insert line file info" "module init"
  {
    (520445 return _void[55])
  }
  function BaseDist[145968].deinit[145498](arg _mt[145972]:_MT[238], arg this[145970]:BaseDist[145968]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519721 return _void[55])
  }
  function BaseDist[145968].remove[145505](arg _mt[145976]:_MT[238], arg this[145974]:BaseDist[145968]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519725] "RVV" "temp"
    unknown free_dist[145511] "dead at end of block" "insert auto destroy"
    (543572 'init var' free_dist[145511] 0)
    (145514 'end of statement')
    unknown call_tmp[667456] "expr temp" "maybe param" "maybe type" "temp"
    (667459 'move' call_tmp[667456](145518 call(385415 call (partial) dsiTrackDomains _mt[243] this[145974])))
    unknown call_tmp[667461] "expr temp" "maybe param" "maybe type" "temp"
    (667464 'move' call_tmp[667461](145591 call _cond_test call_tmp[667456]))
    if call_tmp[667461]
    {
      const tmp[145576] "const" "temp"
      unknown call_tmp[667466] "expr temp" "maybe param" "maybe type" "temp"
      (667469 'move' call_tmp[667466](145573 '_wide_get_locale' this[145974]))
      (145578 'move' tmp[145576](145574 'deref' call_tmp[667466]))
      {
        {
          unknown call_tmp[667471] "maybe param" "maybe type" "temp"
          (667474 'move' call_tmp[667471](145521 call - 1))
          unknown dom_count[145523] "dead at end of block" "insert auto destroy"
          (543574 'init var' dom_count[145523] call_tmp[667471])
          (145526 'end of statement')
          {
            {
              unknown call_tmp[667478] "expr temp" "maybe param" "maybe type" "temp"
              (667481 'move' call_tmp[667478](360492 call _domsLock _mt[243] this[145974]))
              (145533 call(145529 call (partial) lock _mt[243] call_tmp[667478]))
              (481371 'end of statement')
              unknown call_tmp[667487] "expr temp" "maybe param" "maybe type" "temp"
              (667490 'move' call_tmp[667487](385423 call _free_when_no_doms _mt[243] this[145974]))
              (145538 call = call_tmp[667487] 1)
              (481372 'end of statement')
              unknown call_tmp[667494] "expr temp" "maybe param" "maybe type" "temp"
              (667497 'move' call_tmp[667494](360497 call _doms _mt[243] this[145974]))
              unknown call_tmp[667501] "expr temp" "maybe param" "maybe type" "temp"
              (667504 'move' call_tmp[667501](145543 call size _mt[243] call_tmp[667494]))
              (145546 call = dom_count[145523] call_tmp[667501])
              (481373 'end of statement' dom_count[145523])
              unknown call_tmp[667508] "expr temp" "maybe param" "maybe type" "temp"
              (667511 'move' call_tmp[667508](360502 call _domsLock _mt[243] this[145974]))
              (145554 call(145550 call (partial) unlock _mt[243] call_tmp[667508]))
            }
            (145558 'local block')
          }
          unknown call_tmp[667515] "expr temp" "maybe param" "maybe type" "temp"
          (667518 'move' call_tmp[667515](145561 call == dom_count[145523] 0))
          unknown call_tmp[667520] "expr temp" "maybe param" "maybe type" "temp"
          (667523 'move' call_tmp[667520](145568 call _cond_test call_tmp[667515]))
          if call_tmp[667520]
          {
            (145565 call = free_dist[145511] 1)
            (481376 'end of statement' free_dist[145511])
          }
        }
        (145581 'on block' 0 tmp[145576])
      }
    }
    {
      (145587 call = free_dist[145511] 1)
      (481378 'end of statement' free_dist[145511])
    }
    unknown call_tmp[667525] "expr temp" "maybe param" "maybe type" "temp"
    (667528 'move' call_tmp[667525](145605 call _cond_test free_dist[145511]))
    if call_tmp[667525]
    {
      unknown call_tmp[667530] "expr temp" "maybe param" "maybe type" "temp"
      (667533 'move' call_tmp[667530](145599 call _to_unmanaged this[145974]))
      (519731 'move' ret[519725](519730 'coerce' call_tmp[667530] unmanaged BaseDist?[415502]))
      gotoReturn _end_remove[519723] _end_remove[519723]
    }
    {
      (519737 'move' ret[519725](519736 'coerce' nil[44] unmanaged BaseDist?[415502]))
      gotoReturn _end_remove[519723] _end_remove[519723]
    }
    label _end_remove[519723]
    (519727 return ret[519725])
  }
  { scopeless type
    unmanaged BaseDist?[415502]
  }
  function BaseDist[145968].remove_dom[145621](arg _mt[145980]:_MT[238], arg this[145978]:BaseDist[145968], arg x[145618]:unmanaged BaseDom[415448]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519743] "RVV" "temp"
    unknown call_tmp[667535] "maybe param" "maybe type" "temp"
    (667538 'move' call_tmp[667535](145625 call - 1))
    unknown count[145627] "dead at end of block" "insert auto destroy"
    (543576 'init var' count[145627] call_tmp[667535])
    (145630 'end of statement')
    const tmp[145696] "const" "temp"
    unknown call_tmp[667540] "expr temp" "maybe param" "maybe type" "temp"
    (667543 'move' call_tmp[667540](145693 '_wide_get_locale' this[145978]))
    (145698 'move' tmp[145696](145694 'deref' call_tmp[667540]))
    {
      {
        unknown call_tmp[667545] "maybe param" "maybe type" "temp"
        (667548 'move' call_tmp[667545](145634 call - 1))
        unknown cnt[145636] "dead at end of block" "insert auto destroy"
        (543578 'init var' cnt[145636] call_tmp[667545])
        (145639 'end of statement')
        {
          {
            unknown call_tmp[667552] "expr temp" "maybe param" "maybe type" "temp"
            (667555 'move' call_tmp[667552](360507 call _domsLock _mt[243] this[145978]))
            (145646 call(145642 call (partial) lock _mt[243] call_tmp[667552]))
            (481382 'end of statement')
            unknown call_tmp[667561] "expr temp" "maybe param" "maybe type" "temp"
            (667564 'move' call_tmp[667561](360512 call _doms _mt[243] this[145978]))
            (145655 call(145650 call (partial) remove _mt[243] call_tmp[667561]) x[145618])
            (481383 'end of statement')
            unknown call_tmp[667570] "expr temp" "maybe param" "maybe type" "temp"
            (667573 'move' call_tmp[667570](360517 call _doms _mt[243] this[145978]))
            unknown call_tmp[667577] "expr temp" "maybe param" "maybe type" "temp"
            (667580 'move' call_tmp[667577](145659 call size _mt[243] call_tmp[667570]))
            (145662 call = cnt[145636] call_tmp[667577])
            (481384 'end of statement' cnt[145636])
            unknown call_tmp[667584] "expr temp" "maybe param" "maybe type" "temp"
            (667587 'move' call_tmp[667584](385438 call _free_when_no_doms _mt[243] this[145978]))
            unknown call_tmp[667589] "expr temp" "maybe param" "maybe type" "temp"
            (667592 'move' call_tmp[667589](145666 call ! call_tmp[667584]))
            unknown call_tmp[667594] "expr temp" "maybe param" "maybe type" "temp"
            (667597 'move' call_tmp[667594](145673 call _cond_test call_tmp[667589]))
            if call_tmp[667594]
            {
              (145670 call += cnt[145636] 1)
              (481386 'end of statement' cnt[145636])
            }
            unknown call_tmp[667601] "expr temp" "maybe param" "maybe type" "temp"
            (667604 'move' call_tmp[667601](360522 call _domsLock _mt[243] this[145978]))
            (145683 call(145679 call (partial) unlock _mt[243] call_tmp[667601]))
          }
          (145687 'local block')
        }
        (145690 call = count[145627] cnt[145636])
        (481389 'end of statement' count[145627] cnt[145636])
      }
      (145701 'on block' 0 tmp[145696])
    }
    unknown call_tmp[667608] "expr temp" "maybe param" "maybe type" "temp"
    (667611 'move' call_tmp[667608](145706 call == count[145627] 0))
    (519749 'move' ret[519743](519748 'coerce' call_tmp[667608] bool[10]))
    gotoReturn _end_remove_dom[519741] _end_remove_dom[519741]
    (481392 'end of statement' count[145627])
    label _end_remove_dom[519741]
    (519745 return ret[519743])
  }
  { scopeless type
    bool[10]
  }
  function BaseDist[145968].add_dom[145720](arg _mt[145984]:_MT[238], arg this[145982]:BaseDist[145968], arg x[145717]:unmanaged BaseDom[415448]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[145749] "const" "temp"
    unknown call_tmp[667613] "expr temp" "maybe param" "maybe type" "temp"
    (667616 'move' call_tmp[667613](145746 '_wide_get_locale' this[145982]))
    (145751 'move' tmp[145749](145747 'deref' call_tmp[667613]))
    {
      {
        unknown call_tmp[667620] "expr temp" "maybe param" "maybe type" "temp"
        (667623 'move' call_tmp[667620](360527 call _domsLock _mt[243] this[145982]))
        (145728 call(145724 call (partial) lock _mt[243] call_tmp[667620]))
        (481394 'end of statement')
        unknown call_tmp[667629] "expr temp" "maybe param" "maybe type" "temp"
        (667632 'move' call_tmp[667629](360532 call _doms _mt[243] this[145982]))
        (145737 call(145732 call (partial) add _mt[243] call_tmp[667629]) x[145717])
        (481395 'end of statement')
        unknown call_tmp[667638] "expr temp" "maybe param" "maybe type" "temp"
        (667641 'move' call_tmp[667638](360537 call _domsLock _mt[243] this[145982]))
        (145744 call(145740 call (partial) unlock _mt[243] call_tmp[667638]))
      }
      (145754 'on block' 0 tmp[145749])
    }
    (519753 return _void[55])
  }
  function BaseDist[145968].dsiNewRectangularDom[145766](arg _mt[145988]:_MT[238], arg this[145986]:BaseDist[145968], param arg rank[145763]:int(64)[13], arg idxType[145768]:_any[178](?), param arg stridable[145771]:bool[10], arg inds[145774]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145795 call compilerError "rectangular domains not supported by this distribution")
    (519755 return _void[55])
  }
  function BaseDist[145968].dsiNewAssociativeDom[145804](arg _mt[145992]:_MT[238], arg this[145990]:BaseDist[145968], arg idxType[145802]:_any[178](?), param arg parSafe[145807]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145829 call compilerError "associative domains not supported by this distribution")
    (519757 return _void[55])
  }
  function BaseDist[145968].dsiNewSparseDom[145840](arg _mt[145996]:_MT[238], arg this[145994]:BaseDist[145968], param arg rank[145837]:int(64)[13], arg idxType[145842]:_any[178](?), arg dom[145845]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145867 call compilerError "sparse domains not supported by this distribution")
    (519759 return _void[55])
  }
  function BaseDist[145968].dsiSupportsPrivatization[145874](arg _mt[146000]:_MT[238], arg this[145998]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519763] "RVV" "param" "temp"
    (519768 'move' ret[519763](519767 'deref' 0))
    (519765 return ret[519763])
  }
  function BaseDist[145968].dsiRequiresPrivatization[145884](arg _mt[146004]:_MT[238], arg this[146002]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519772] "RVV" "param" "temp"
    (519777 'move' ret[519772](519776 'deref' 0))
    (519774 return ret[519772])
  }
  function BaseDist[145968].dsiDestroyDist[145894](arg _mt[146008]:_MT[238], arg this[146006]:BaseDist[145968]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519779 return _void[55])
  }
  function BaseDist[145968].dsiDisplayRepresentation[145901](arg _mt[146012]:_MT[238], arg this[146010]:BaseDist[145968]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145922 call writeln "<no way to display representation>")
    (519781 return _void[55])
  }
  function BaseDist[145968].trackDomains[145929](arg _mt[146016]:_MT[238], arg this[146014]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519785] "RVV" "param" "temp"
    (519790 'move' ret[519785](519789 'deref' 1))
    (519787 return ret[519785])
  }
  function BaseDist[145968].dsiTrackDomains[145939](arg _mt[146020]:_MT[238], arg this[146018]:BaseDist[145968]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519794] "RVV" "temp"
    (519799 'move' ret[519794](519798 'deref' 1))
    (519796 return ret[519794])
  }
  function BaseDist[145968].singleton[145949](arg _mt[146024]:_MT[238], arg this[146022]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519803] "RVV" "param" "temp"
    (519808 'move' ret[519803](519807 'deref' 0))
    (519805 return ret[519803])
  }
  function BaseDist[145968].dsiIsLayout[145959](arg _mt[146028]:_MT[238], arg this[146026]:BaseDist[145968]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519812] "RVV" "param" "temp"
    (519817 'move' ret[519812](519816 'deref' 0))
    (519814 return ret[519812])
  }
  type BaseDist[145968] val super[355695]:object[22] "super class" unknown _doms[145476](145475 call chpl__simpleSet[204962](?) unmanaged BaseDom[415448]) val _domsLock[145481]:chpl_LocalSpinlock[187432] chpl_LocalSpinlock[187432] val _free_when_no_doms[145486]:bool[10] bool[10] val pid[145492]:int(64)[13] nullPid[113718] int(64)[13]
  type unmanaged BaseDist[415511]
  type unmanaged BaseDist?[415502]
  type BaseDist?[415499](?)
  type BaseDist[382381](?)
  function BaseDom[146767].init[146064](arg _mt[146771]:_MT[238], arg this[146769]:BaseDom[146767]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461730] "temporary of super field" "temp"
    (461738 'move' super_tmp[461730](461731 '.v' this[146769] c"super"))
    (461734 call init _mt[243] super_tmp[461730])
    (481407 'end of statement')
    unknown tmp[461665] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492361] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[667645] "expr temp" "maybe param" "maybe type" "temp"
      (667648 'move' call_tmp[667645](461667 '.v' this[146769] c"super"))
      (492365 'move' call_type_tmp[492361](461670 'typeof' call_tmp[667645]))
    }
    (461671 'move' tmp[461665] call_type_tmp[492361])
    unknown call_tmp[667650] "maybe param" "maybe type" "temp"
    (667653 'move' call_tmp[667650](461676 'cast' tmp[461665] this[146769]))
    unknown chpl__thisAsParent[461673] "dead at end of block" "insert auto destroy" "temp"
    (543580 'init var' chpl__thisAsParent[461673] call_tmp[667650] tmp[461665])
    (461679 'setcid' chpl__thisAsParent[461673])
    (481408 'end of statement')
    unknown tmp[461682] "temp"
    unknown call_tmp[667655] "expr temp" "maybe param" "maybe type" "temp"
    (667658 'move' call_tmp[667655](461685 call chpl__simpleSet[204962](?) unmanaged BaseArr[415496]))
    (461687 'default init var' tmp[461682] call_tmp[667655])
    (461689 '.=' this[146769] c"_arrs" tmp[461682])
    (481409 'end of statement')
    val tmp[461693]:int(64)[13] "temp"
    (461696 'default init var' tmp[461693] int(64)[13])
    (461698 '.=' this[146769] c"_arrs_containing_dom" tmp[461693])
    (481410 'end of statement')
    val tmp[461702]:chpl_LocalSpinlock[187432] "temp"
    (461705 'default init var' tmp[461702] chpl_LocalSpinlock[187432])
    (461707 '.=' this[146769] c"_arrsLock" tmp[461702])
    (481411 'end of statement')
    val tmp[461711]:bool[10] "temp"
    (461714 'default init var' tmp[461711] bool[10])
    (461716 '.=' this[146769] c"_free_when_no_arrs" tmp[461711])
    (481412 'end of statement')
    unknown tmp[461721] "temp"
    (461724 'init var' tmp[461721] nullPid[113718] int(64)[13])
    (461726 'init field' this[146769] c"pid" tmp[461721])
    (481413 'end of statement')
    (461741 'setcid' this[146769])
    (519819 return _void[55])
  }
  function BaseDom[146767].deinit[146071](arg _mt[146775]:_MT[238], arg this[146773]:BaseDom[146767]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519821 return _void[55])
  }
  function BaseDom[146767].dsiMyDist[146078](arg _mt[146779]:_MT[238], arg this[146777]:BaseDom[146767]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519825] "RVV" "temp"
    (146101 call halt "internal error: dsiMyDist is not implemented")
    (481415 'end of statement')
    unknown ret[146106] "dead at end of block" "insert auto destroy" "unsafe"
    (543582 'default init var' ret[146106] unmanaged BaseDist[415511])
    (146109 'end of statement')
    (519831 'move' ret[519825](519830 'coerce' ret[146106] unmanaged BaseDist[415511]))
    gotoReturn _end_dsiMyDist[519823] _end_dsiMyDist[519823]
    (481416 'end of statement' ret[146106])
    label _end_dsiMyDist[519823]
    (519827 return ret[519825])
  }
  { scopeless type
    unmanaged BaseDist[415511]
  }
  function BaseDom[146767].remove[146118](arg _mt[146783]:_MT[238], arg this[146781]:BaseDom[146767]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[519837] "RVV" "temp"
    unknown call_tmp[667662] "expr temp" "maybe param" "maybe type" "temp"
    (667665 'move' call_tmp[667662](146132 call(385461 call (partial) dsiMyDist _mt[243] this[146781])))
    unknown call_tmp[667669] "expr temp" "maybe param" "maybe type" "temp"
    (667672 'move' call_tmp[667669](146139 call(146135 call (partial) dsiTrackDomains _mt[243] call_tmp[667662])))
    unknown call_tmp[667676] "expr temp" "maybe param" "maybe type" "temp"
    (667679 'move' call_tmp[667676](146142 call(385467 call (partial) dsiLinksDistribution _mt[243] this[146781])))
    unknown call_tmp[667681] "expr temp" "maybe param" "maybe type" "temp"
    (667684 'move' call_tmp[667681](146143 call == call_tmp[667669] call_tmp[667676]))
    (146146 call assert call_tmp[667681])
    (481418 'end of statement')
    unknown ret_dom[146153] "dead at end of block" "insert auto destroy"
    (543584 'init var' ret_dom[146153] nil[44] unmanaged BaseDom?[415508])
    (146156 'end of statement')
    unknown ret_dist[146161] "dead at end of block" "insert auto destroy"
    (543586 'init var' ret_dist[146161] nil[44] unmanaged BaseDist?[415502])
    (146164 'end of statement')
    unknown call_tmp[667688] "maybe param" "maybe type" "temp"
    (667691 'move' call_tmp[667688](146167 call(385473 call (partial) dsiMyDist _mt[243] this[146781])))
    unknown dist[146168] "dead at end of block" "insert auto destroy"
    (543588 'init var' dist[146168] call_tmp[667688])
    (146171 'end of statement')
    unknown free_dom[146173] "dead at end of block" "insert auto destroy"
    (543590 'init var' free_dom[146173] 0)
    (146176 'end of statement')
    unknown remove_dist[146178] "dead at end of block" "insert auto destroy"
    (543592 'init var' remove_dist[146178] 0)
    (146181 'end of statement')
    const tmp[146266] "const" "temp"
    unknown call_tmp[667693] "expr temp" "maybe param" "maybe type" "temp"
    (667696 'move' call_tmp[667693](146263 '_wide_get_locale' this[146781]))
    (146268 'move' tmp[146266](146264 'deref' call_tmp[667693]))
    {
      {
        unknown arr_count[146184] "dead at end of block" "insert auto destroy"
        (543594 'init var' arr_count[146184] 0)
        (146187 'end of statement')
        {
          {
            unknown call_tmp[667700] "expr temp" "maybe param" "maybe type" "temp"
            (667703 'move' call_tmp[667700](360544 call _arrsLock _mt[243] this[146781]))
            (146194 call(146190 call (partial) lock _mt[243] call_tmp[667700]))
            (481419 'end of statement')
            unknown call_tmp[667709] "expr temp" "maybe param" "maybe type" "temp"
            (667712 'move' call_tmp[667709](360549 call _arrs _mt[243] this[146781]))
            unknown call_tmp[667716] "expr temp" "maybe param" "maybe type" "temp"
            (667719 'move' call_tmp[667716](146199 call size _mt[243] call_tmp[667709]))
            (146202 call = arr_count[146184] call_tmp[667716])
            (481420 'end of statement' arr_count[146184])
            unknown call_tmp[667723] "expr temp" "maybe param" "maybe type" "temp"
            (667726 'move' call_tmp[667723](385483 call _arrs_containing_dom _mt[243] this[146781]))
            (146207 call += arr_count[146184] call_tmp[667723])
            (481422 'end of statement' arr_count[146184])
            unknown call_tmp[667730] "expr temp" "maybe param" "maybe type" "temp"
            (667733 'move' call_tmp[667730](385488 call _free_when_no_arrs _mt[243] this[146781]))
            (146212 call = call_tmp[667730] 1)
            (481424 'end of statement')
            unknown call_tmp[667737] "expr temp" "maybe param" "maybe type" "temp"
            (667740 'move' call_tmp[667737](360554 call _arrsLock _mt[243] this[146781]))
            (146220 call(146216 call (partial) unlock _mt[243] call_tmp[667737]))
          }
          (146224 'local block')
        }
        unknown call_tmp[667744] "expr temp" "maybe param" "maybe type" "temp"
        (667747 'move' call_tmp[667744](146227 call == arr_count[146184] 0))
        unknown call_tmp[667749] "expr temp" "maybe param" "maybe type" "temp"
        (667752 'move' call_tmp[667749](146259 call _cond_test call_tmp[667744]))
        if call_tmp[667749]
        {
          (146231 call = free_dom[146173] 1)
          (481426 'end of statement' free_dom[146173])
          unknown call_tmp[667756] "expr temp" "maybe param" "maybe type" "temp"
          (667759 'move' call_tmp[667756](146237 call(385494 call (partial) dsiLinksDistribution _mt[243] this[146781])))
          unknown call_tmp[667761] "expr temp" "maybe param" "maybe type" "temp"
          (667764 'move' call_tmp[667761](146255 call _cond_test call_tmp[667756]))
          if call_tmp[667761]
          {
            unknown call_tmp[667768] "expr temp" "maybe param" "maybe type" "temp"
            (667771 'move' call_tmp[667768](146248 call _to_unmanaged this[146781]))
            unknown call_tmp[667773] "expr temp" "maybe param" "maybe type" "temp"
            (667776 'move' call_tmp[667773](146250 call(146242 call (partial) remove_dom _mt[243] dist[146168]) call_tmp[667768]))
            (146251 call = remove_dist[146178] call_tmp[667773])
            (481428 'end of statement' remove_dist[146178] dist[146168])
          }
        }
      }
      (146271 'on block' 0 tmp[146266])
    }
    unknown call_tmp[667778] "expr temp" "maybe param" "maybe type" "temp"
    (667781 'move' call_tmp[667778](146283 call _cond_test free_dom[146173]))
    if call_tmp[667778]
    {
      unknown call_tmp[667783] "expr temp" "maybe param" "maybe type" "temp"
      (667786 'move' call_tmp[667783](146279 call _to_unmanaged this[146781]))
      (146280 call = ret_dom[146153] call_tmp[667783])
      (481431 'end of statement' ret_dom[146153])
    }
    unknown call_tmp[667788] "expr temp" "maybe param" "maybe type" "temp"
    (667791 'move' call_tmp[667788](146294 call _cond_test remove_dist[146178]))
    if call_tmp[667788]
    {
      (146291 call = ret_dist[146161] dist[146168])
      (481433 'end of statement' ret_dist[146161] dist[146168])
    }
    unknown call_tmp[667793] "expr temp" "maybe param" "maybe type" "temp"
    (667796 'move' call_tmp[667793](146302 call _build_tuple ret_dom[146153] ret_dist[146161]))
    unknown call_tmp[667798] "expr temp" "maybe param" "maybe type" "temp"
    (667801 'move' call_tmp[667798](519842 call _build_tuple unmanaged BaseDom?[415508] unmanaged BaseDist?[415502]))
    (519846 'move' ret[519837](519845 'coerce' call_tmp[667793] call_tmp[667798]))
    gotoReturn _end_remove[519835] _end_remove[519835]
    (481436 'end of statement' ret_dom[146153] ret_dist[146161])
    label _end_remove[519835]
    (519839 return ret[519837])
  }
  { scopeless type
    (146127 call _build_tuple unmanaged BaseDom?[415508] unmanaged BaseDist?[415502])
  }
  function BaseDom[146767].remove_arr[146316](arg _mt[146787]:_MT[238], arg this[146785]:BaseDom[146767], arg x[146313]:unmanaged BaseArr[415496], param arg rmFromList[146319] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519852] "RVV" "temp"
    unknown call_tmp[667803] "maybe param" "maybe type" "temp"
    (667806 'move' call_tmp[667803](146324 call - 1))
    unknown count[146326] "dead at end of block" "insert auto destroy"
    (543596 'init var' count[146326] call_tmp[667803])
    (146329 'end of statement')
    const tmp[146412] "const" "temp"
    unknown call_tmp[667808] "expr temp" "maybe param" "maybe type" "temp"
    (667811 'move' call_tmp[667808](146409 '_wide_get_locale' this[146785]))
    (146414 'move' tmp[146412](146410 'deref' call_tmp[667808]))
    {
      {
        unknown call_tmp[667813] "maybe param" "maybe type" "temp"
        (667816 'move' call_tmp[667813](146333 call - 1))
        unknown cnt[146335] "dead at end of block" "insert auto destroy"
        (543598 'init var' cnt[146335] call_tmp[667813])
        (146338 'end of statement')
        {
          {
            unknown call_tmp[667820] "expr temp" "maybe param" "maybe type" "temp"
            (667823 'move' call_tmp[667820](360560 call _arrsLock _mt[243] this[146785]))
            (146345 call(146341 call (partial) lock _mt[243] call_tmp[667820]))
            (481439 'end of statement')
            unknown call_tmp[667827] "expr temp" "maybe param" "maybe type" "temp"
            (667830 'move' call_tmp[667827](146362 call _cond_test rmFromList[146319]))
            if call_tmp[667827]
            {
              unknown call_tmp[667834] "expr temp" "maybe param" "maybe type" "temp"
              (667837 'move' call_tmp[667834](360565 call _arrs _mt[243] this[146785]))
              (146355 call(146350 call (partial) remove _mt[243] call_tmp[667834]) x[146313])
            }
            {
              unknown call_tmp[667843] "expr temp" "maybe param" "maybe type" "temp"
              (667846 'move' call_tmp[667843](385513 call _arrs_containing_dom _mt[243] this[146785]))
              (146359 call -= call_tmp[667843] 1)
            }
            unknown call_tmp[667850] "expr temp" "maybe param" "maybe type" "temp"
            (667853 'move' call_tmp[667850](360570 call _arrs _mt[243] this[146785]))
            unknown call_tmp[667857] "expr temp" "maybe param" "maybe type" "temp"
            (667860 'move' call_tmp[667857](146370 call size _mt[243] call_tmp[667850]))
            (146373 call = cnt[146335] call_tmp[667857])
            (481442 'end of statement' cnt[146335])
            unknown call_tmp[667864] "expr temp" "maybe param" "maybe type" "temp"
            (667867 'move' call_tmp[667864](385520 call _arrs_containing_dom _mt[243] this[146785]))
            (146378 call += cnt[146335] call_tmp[667864])
            (481444 'end of statement' cnt[146335])
            unknown call_tmp[667871] "expr temp" "maybe param" "maybe type" "temp"
            (667874 'move' call_tmp[667871](385525 call _free_when_no_arrs _mt[243] this[146785]))
            unknown call_tmp[667876] "expr temp" "maybe param" "maybe type" "temp"
            (667879 'move' call_tmp[667876](146382 call ! call_tmp[667871]))
            unknown call_tmp[667881] "expr temp" "maybe param" "maybe type" "temp"
            (667884 'move' call_tmp[667881](146389 call _cond_test call_tmp[667876]))
            if call_tmp[667881]
            {
              (146386 call += cnt[146335] 1)
              (481446 'end of statement' cnt[146335])
            }
            unknown call_tmp[667888] "expr temp" "maybe param" "maybe type" "temp"
            (667891 'move' call_tmp[667888](360575 call _arrsLock _mt[243] this[146785]))
            (146399 call(146395 call (partial) unlock _mt[243] call_tmp[667888]))
          }
          (146403 'local block')
        }
        (146406 call = count[146326] cnt[146335])
        (481449 'end of statement' count[146326] cnt[146335])
      }
      (146417 'on block' 0 tmp[146412])
    }
    unknown call_tmp[667895] "expr temp" "maybe param" "maybe type" "temp"
    (667898 'move' call_tmp[667895](146422 call == count[146326] 0))
    (519858 'move' ret[519852](519857 'coerce' call_tmp[667895] bool[10]))
    gotoReturn _end_remove_arr[519850] _end_remove_arr[519850]
    (481452 'end of statement' count[146326])
    label _end_remove_arr[519850]
    (519854 return ret[519852])
  }
  { scopeless type
    bool[10]
  }
  function BaseDom[146767].add_arr[146436](arg _mt[146791]:_MT[238], arg this[146789]:BaseDom[146767], arg x[146433]:unmanaged BaseArr[415496], param arg locking[146439] :
  1 =
  1, param arg addToList[146443] :
  1 =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146497] "const" "temp"
    unknown call_tmp[667900] "expr temp" "maybe param" "maybe type" "temp"
    (667903 'move' call_tmp[667900](146494 '_wide_get_locale' this[146789]))
    (146499 'move' tmp[146497](146495 'deref' call_tmp[667900]))
    {
      {
        unknown call_tmp[667905] "expr temp" "maybe param" "maybe type" "temp"
        (667908 'move' call_tmp[667905](146455 call _cond_test locking[146439]))
        if call_tmp[667905]
        {
          unknown call_tmp[667912] "expr temp" "maybe param" "maybe type" "temp"
          (667915 'move' call_tmp[667912](360580 call _arrsLock _mt[243] this[146789]))
          (146453 call(146449 call (partial) lock _mt[243] call_tmp[667912]))
        }
        unknown call_tmp[667919] "expr temp" "maybe param" "maybe type" "temp"
        (667922 'move' call_tmp[667919](146475 call _cond_test addToList[146443]))
        if call_tmp[667919]
        {
          unknown call_tmp[667926] "expr temp" "maybe param" "maybe type" "temp"
          (667929 'move' call_tmp[667926](360585 call _arrs _mt[243] this[146789]))
          (146468 call(146463 call (partial) add _mt[243] call_tmp[667926]) x[146433])
        }
        {
          unknown call_tmp[667935] "expr temp" "maybe param" "maybe type" "temp"
          (667938 'move' call_tmp[667935](385539 call _arrs_containing_dom _mt[243] this[146789]))
          (146472 call += call_tmp[667935] 1)
        }
        unknown call_tmp[667940] "expr temp" "maybe param" "maybe type" "temp"
        (667943 'move' call_tmp[667940](146489 call _cond_test locking[146439]))
        if call_tmp[667940]
        {
          unknown call_tmp[667947] "expr temp" "maybe param" "maybe type" "temp"
          (667950 'move' call_tmp[667947](360590 call _arrsLock _mt[243] this[146789]))
          (146487 call(146483 call (partial) unlock _mt[243] call_tmp[667947]))
        }
      }
      (146502 'on block' 0 tmp[146497])
    }
    (519862 return _void[55])
  }
  function BaseDom[146767].remove_containing_arr[146515](arg _mt[146795]:_MT[238], arg this[146793]:BaseDom[146767], arg x[146512]:unmanaged BaseArr[415496]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[519866] "RVV" "temp"
    unknown call_tmp[667954] "maybe param" "maybe type" "temp"
    (667957 'move' call_tmp[667954](146518 call - 1))
    unknown count[146520] "dead at end of block" "insert auto destroy"
    (543600 'init var' count[146520] call_tmp[667954])
    (146523 'end of statement')
    const tmp[146587] "const" "temp"
    unknown call_tmp[667959] "expr temp" "maybe param" "maybe type" "temp"
    (667962 'move' call_tmp[667959](146584 '_wide_get_locale' this[146793]))
    (146589 'move' tmp[146587](146585 'deref' call_tmp[667959]))
    {
      {
        unknown call_tmp[667964] "maybe param" "maybe type" "temp"
        (667967 'move' call_tmp[667964](146527 call - 1))
        unknown cnt[146529] "dead at end of block" "insert auto destroy"
        (543602 'init var' cnt[146529] call_tmp[667964])
        (146532 'end of statement')
        unknown call_tmp[667971] "expr temp" "maybe param" "maybe type" "temp"
        (667974 'move' call_tmp[667971](360595 call _arrsLock _mt[243] this[146793]))
        (146539 call(146535 call (partial) lock _mt[243] call_tmp[667971]))
        (481458 'end of statement')
        unknown call_tmp[667980] "expr temp" "maybe param" "maybe type" "temp"
        (667983 'move' call_tmp[667980](385547 call _arrs_containing_dom _mt[243] this[146793]))
        (146543 call -= call_tmp[667980] 1)
        (481459 'end of statement')
        unknown call_tmp[667987] "expr temp" "maybe param" "maybe type" "temp"
        (667990 'move' call_tmp[667987](360600 call _arrs _mt[243] this[146793]))
        unknown call_tmp[667994] "expr temp" "maybe param" "maybe type" "temp"
        (667997 'move' call_tmp[667994](146548 call size _mt[243] call_tmp[667987]))
        (146551 call = cnt[146529] call_tmp[667994])
        (481460 'end of statement' cnt[146529])
        unknown call_tmp[668001] "expr temp" "maybe param" "maybe type" "temp"
        (668004 'move' call_tmp[668001](385554 call _arrs_containing_dom _mt[243] this[146793]))
        (146556 call += cnt[146529] call_tmp[668001])
        (481462 'end of statement' cnt[146529])
        unknown call_tmp[668008] "expr temp" "maybe param" "maybe type" "temp"
        (668011 'move' call_tmp[668008](385559 call _free_when_no_arrs _mt[243] this[146793]))
        unknown call_tmp[668013] "expr temp" "maybe param" "maybe type" "temp"
        (668016 'move' call_tmp[668013](146560 call ! call_tmp[668008]))
        unknown call_tmp[668018] "expr temp" "maybe param" "maybe type" "temp"
        (668021 'move' call_tmp[668018](146567 call _cond_test call_tmp[668013]))
        if call_tmp[668018]
        {
          (146564 call += cnt[146529] 1)
          (481464 'end of statement' cnt[146529])
        }
        unknown call_tmp[668025] "expr temp" "maybe param" "maybe type" "temp"
        (668028 'move' call_tmp[668025](360605 call _arrsLock _mt[243] this[146793]))
        (146577 call(146573 call (partial) unlock _mt[243] call_tmp[668025]))
        (481466 'end of statement')
        (146581 call = count[146520] cnt[146529])
        (481467 'end of statement' count[146520] cnt[146529])
      }
      (146592 'on block' 0 tmp[146587])
    }
    unknown call_tmp[668032] "expr temp" "maybe param" "maybe type" "temp"
    (668035 'move' call_tmp[668032](146597 call == count[146520] 0))
    (519871 'move' ret[519866](519870 'deref' call_tmp[668032]))
    gotoReturn _end_remove_containing_arr[519864] _end_remove_containing_arr[519864]
    (481470 'end of statement' count[146520])
    label _end_remove_containing_arr[519864]
    (519868 return ret[519866])
  }
  function BaseDom[146767].add_containing_arr[146610](arg _mt[146799]:_MT[238], arg this[146797]:BaseDom[146767], arg x[146607]:unmanaged BaseArr[415496]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146636] "const" "temp"
    unknown call_tmp[668037] "expr temp" "maybe param" "maybe type" "temp"
    (668040 'move' call_tmp[668037](146633 '_wide_get_locale' this[146797]))
    (146638 'move' tmp[146636](146634 'deref' call_tmp[668037]))
    {
      {
        unknown call_tmp[668044] "expr temp" "maybe param" "maybe type" "temp"
        (668047 'move' call_tmp[668044](360610 call _arrsLock _mt[243] this[146797]))
        (146618 call(146614 call (partial) lock _mt[243] call_tmp[668044]))
        (481472 'end of statement')
        unknown call_tmp[668053] "expr temp" "maybe param" "maybe type" "temp"
        (668056 'move' call_tmp[668053](385570 call _arrs_containing_dom _mt[243] this[146797]))
        (146623 call += call_tmp[668053] 1)
        (481473 'end of statement')
        unknown call_tmp[668060] "expr temp" "maybe param" "maybe type" "temp"
        (668063 'move' call_tmp[668060](360615 call _arrsLock _mt[243] this[146797]))
        (146631 call(146627 call (partial) unlock _mt[243] call_tmp[668060]))
      }
      (146641 'on block' 0 tmp[146636])
    }
    (519875 return _void[55])
  }
  function BaseDom[146767].dsiSupportsPrivatization[146649](arg _mt[146803]:_MT[238], arg this[146801]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519879] "RVV" "param" "temp"
    (519884 'move' ret[519879](519883 'deref' 0))
    (519881 return ret[519879])
  }
  function BaseDom[146767].dsiRequiresPrivatization[146659](arg _mt[146807]:_MT[238], arg this[146805]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519888] "RVV" "param" "temp"
    (519893 'move' ret[519888](519892 'deref' 0))
    (519890 return ret[519888])
  }
  function BaseDom[146767].linksDistribution[146669](arg _mt[146811]:_MT[238], arg this[146809]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519897] "RVV" "param" "temp"
    (519902 'move' ret[519897](519901 'deref' 1))
    (519899 return ret[519897])
  }
  function BaseDom[146767].dsiLinksDistribution[146679](arg _mt[146815]:_MT[238], arg this[146813]:BaseDom[146767]) : _unknown[51] "method" "primary method"
  {
    unknown ret[519906] "RVV" "temp"
    (519911 'move' ret[519906](519910 'deref' 1))
    (519908 return ret[519906])
  }
  function BaseDom[146767].dsiDestroyDom[146689](arg _mt[146819]:_MT[238], arg this[146817]:BaseDom[146767]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (519913 return _void[55])
  }
  function BaseDom[146767].dsiDisplayRepresentation[146696](arg _mt[146823]:_MT[238], arg this[146821]:BaseDom[146767]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (146701 call writeln "<no way to display representation>")
    (519915 return _void[55])
  }
  function BaseDom[146767].dsiSupportsAutoLocalAccess[146708](arg _mt[146827]:_MT[238], arg this[146825]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519919] "RVV" "param" "temp"
    (519924 'move' ret[519919](519923 'deref' 0))
    (519921 return ret[519919])
  }
  function BaseDom[415343](?).isDefaultRectangular[146718](arg _mt[146831]:_MT[238], arg this[146829]:BaseDom[415343](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519928] "RVV" "param" "temp"
    (519933 'move' ret[519928](519932 'deref' 0))
    (519930 return ret[519928])
  }
  function BaseDom[146767].isDefaultRectangular[146728](arg _mt[146835]:_MT[238], arg this[146833]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519937] "RVV" "param" "temp"
    (519942 'move' ret[519937](519941 'deref' 0))
    (519939 return ret[519937])
  }
  function BaseDom[146767].isSliceDomainView[146738](arg _mt[146839]:_MT[238], arg this[146837]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519946] "RVV" "param" "temp"
    (519951 'move' ret[519946](519950 'deref' 0))
    (519948 return ret[519946])
  }
  function BaseDom[146767].isRankChangeDomainView[146748](arg _mt[146843]:_MT[238], arg this[146841]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519955] "RVV" "param" "temp"
    (519960 'move' ret[519955](519959 'deref' 0))
    (519957 return ret[519955])
  }
  function BaseDom[146767].isReindexDomainView[146758](arg _mt[146847]:_MT[238], arg this[146845]:BaseDom[146767]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[519964] "RVV" "param" "temp"
    (519969 'move' ret[519964](519968 'deref' 0))
    (519966 return ret[519964])
  }
  type BaseDom[146767] val super[355699]:object[22] "super class" unknown _arrs[146037](146036 call chpl__simpleSet[204962](?) unmanaged BaseArr[415496]) val _arrs_containing_dom[146042]:int(64)[13] int(64)[13] val _arrsLock[146047]:chpl_LocalSpinlock[187432] chpl_LocalSpinlock[187432] val _free_when_no_arrs[146052]:bool[10] bool[10] val pid[146058]:int(64)[13] nullPid[113718] int(64)[13]
  type unmanaged BaseDom?[415508]
  type BaseDom?[415505](?)
  type unmanaged BaseDom[415448]
  type BaseDom[415343](?)
  type BaseDom[372786](?)
  function BaseRectangularDom[146935](?).getBaseArrType[146868](arg _mt[146939]:_MT[238], arg this[146937]:BaseRectangularDom[146935](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[519973] "RVV" "temp" "type variable"
    unknown call_tmp[668069] "expr temp" "maybe param" "maybe type" "temp"
    (668072 'move' call_tmp[668069](385579 call rank _mt[243] this[146937]))
    unknown call_tmp[668076] "expr temp" "maybe param" "maybe type" "temp"
    (668079 'move' call_tmp[668076](385584 call idxType _mt[243] this[146937]))
    unknown call_tmp[668083] "expr temp" "maybe param" "maybe type" "temp"
    (668086 'move' call_tmp[668083](385589 call stridable _mt[243] this[146937]))
    unknown call_tmp[668088] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (668091 'move' call_tmp[668088](747953 'new' BaseArrOverRectangularDom[385574](?)(rank = call_tmp[668069])(idxType = call_tmp[668076])(stridable = call_tmp[668083])(_chpl_manager = unmanaged[220](?))))
    unknown tmp[146882] "dead at end of block" "insert auto destroy"
    (543604 'init var' tmp[146882] call_tmp[668088])
    (146885 'end of statement')
    unknown call_tmp[668093] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (668096 'move' call_tmp[668093](146888 'typeof' tmp[146882]))
    (519978 'move' ret[519973](519977 'deref' call_tmp[668093]))
    gotoReturn _end_getBaseArrType[519971] _end_getBaseArrType[519971]
    (481486 'end of statement' tmp[146882])
    label _end_getBaseArrType[519971]
    (519975 return ret[519973])
  }
  function BaseRectangularDom[146935](?).deinit[146895](arg _mt[146943]:_MT[238], arg this[146941]:BaseRectangularDom[146935](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (519982 return _void[55])
  }
  function BaseRectangularDom[146935](?).dsiAdd[146904](arg _mt[146947]:_MT[238], arg this[146945]:BaseRectangularDom[146935](?), in arg x[146902]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[519986] "RVV" "temp"
    (146909 call compilerError "Cannot add indices to a rectangular domain")
    (481488 'end of statement')
    (519991 'move' ret[519986](519990 'deref' 0))
    (519988 return ret[519986])
  }
  function BaseRectangularDom[146935](?).dsiRemove[146921](arg _mt[146951]:_MT[238], arg this[146949]:BaseRectangularDom[146935](?), arg x[146919]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[519995] "RVV" "temp"
    (146926 call compilerError "Cannot remove indices from a rectangular domain")
    (481490 'end of statement')
    (520000 'move' ret[519995](519999 'deref' 0))
    (519997 return ret[519995])
  }
  type BaseRectangularDom[146935](?) val super[355701]:BaseDom[146767] "super class" unknown rank[146854] "param" int(64)[13] unknown idxType[146858] "type variable" unknown stridable[146862] "param" bool[10]
  type BaseRectangularDom[382286](?)
  function BaseSparseDomImpl[148004](?).deinit[146970](arg _mt[148008]:_MT[238], arg this[148006]:BaseSparseDomImpl[148004](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520002 return _void[55])
  }
  function BaseSparseDomImpl[148004](?).dsiBulkAdd[146988](arg _mt[148012]:_MT[238], arg this[148010]:BaseSparseDomImpl[148004](?), arg inds[146985]:_array[133594](?), arg dataSorted[146991] :
  0 =
  0, arg isUnique[146995] :
  0 =
  0, arg preserveInds[146999] :
  1 =
  1, arg addOn[147003] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[520006] "RVV" "temp"
    unknown tmp[427132] "maybe param" "temp"
    (427143 'move' tmp[427132](147007 call ! dataSorted[146991]))
    unknown call_tmp[668098] "expr temp" "maybe param" "maybe type" "temp"
    (668101 'move' call_tmp[668098](427145 call _cond_invalid tmp[427132]))
    if call_tmp[668098]
    {
      (427148 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568552] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568553] "maybe param" "temp"
    unknown call_tmp[668103] "expr temp" "maybe param" "maybe type" "temp"
    (668106 'move' call_tmp[668103](427133 call isTrue tmp[427132]))
    (568558 'move' tmp[568553](568556 call _cond_test call_tmp[668103]))
    if tmp[568553]
    {
      unknown tmp[568560] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568562 'move' tmp[568560](427136 call isTrue preserveInds[146999]))
      (568567 'move' tmp[568552](568564 '_paramFoldLogical' tmp[568553] tmp[568560]))
    }
    {
      (568572 'move' tmp[568552](568569 '_paramFoldLogical' tmp[568553] 0))
    }
    unknown call_tmp[668108] "expr temp" "maybe param" "maybe type" "temp"
    (668111 'move' call_tmp[668108](147037 call _cond_test tmp[568552]))
    if call_tmp[668108]
    {
      unknown _inds[147013] "dead at end of block" "insert auto destroy"
      (543606 'init var' _inds[147013] inds[146985])
      (147016 'end of statement')
      unknown call_tmp[668115] "expr temp" "maybe param" "maybe type" "temp"
      (668118 'move' call_tmp[668115](147024 call(385610 call (partial) bulkAdd_help _mt[243] this[148010]) _inds[147013] dataSorted[146991] isUnique[146995] addOn[147003]))
      (520011 'move' ret[520006](520010 'deref' call_tmp[668115]))
      gotoReturn _end_dsiBulkAdd[520004] _end_dsiBulkAdd[520004]
      (481493 'end of statement' _inds[147013])
    }
    {
      unknown call_tmp[668122] "expr temp" "maybe param" "maybe type" "temp"
      (668125 'move' call_tmp[668122](147033 call(385618 call (partial) bulkAdd_help _mt[243] this[148010]) inds[146985] dataSorted[146991] isUnique[146995] addOn[147003]))
      (520016 'move' ret[520006](520015 'deref' call_tmp[668122]))
      gotoReturn _end_dsiBulkAdd[520004] _end_dsiBulkAdd[520004]
    }
    label _end_dsiBulkAdd[520004]
    (520008 return ret[520006])
  }
  where {
    unknown call_tmp[668129] "expr temp" "maybe param" "maybe type" "temp"
    (668132 'move' call_tmp[668129](385595 call rank _mt[243] this[148010]))
    unknown call_tmp[668136] "expr temp" "maybe param" "maybe type" "temp"
    (668139 'move' call_tmp[668136](385600 call idxType _mt[243] this[148010]))
    unknown call_tmp[668141] "expr temp" "maybe param" "maybe type" "temp"
    (668144 'move' call_tmp[668141](146980 call chpl__buildIndexType call_tmp[668129] call_tmp[668136]))
    unknown call_tmp[668148] "expr temp" "maybe param" "maybe type" "temp"
    (668151 'move' call_tmp[668148](461749 call eltType _mt[243] inds[146985]))
    unknown call_tmp[668153] "expr temp" "maybe param" "maybe type" "temp"
    (668156 'move' call_tmp[668153](461753 call == call_tmp[668141] call_tmp[668148]))
    (461747 call & 1 call_tmp[668153])
  }
  function BaseSparseDomImpl[148004](?).bulkAdd_help[147059](arg _mt[148016]:_MT[238], arg this[148014]:BaseSparseDomImpl[148004](?), arg inds[147056]:_array[133594](?), arg dataSorted[147062] :
  0 =
  0, arg isUnique[147066] :
  0 =
  0, arg addOn[147070] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[520022] "RVV" "temp"
    (147092 call halt "Helper function called on the BaseSparseDomImpl")
    (481496 'end of statement')
    unknown call_tmp[668158] "expr temp" "maybe param" "maybe type" "temp"
    (668161 'move' call_tmp[668158](147096 call - 1))
    (520027 'move' ret[520022](520026 'deref' call_tmp[668158]))
    (520024 return ret[520022])
  }
  where {
    unknown call_tmp[668165] "expr temp" "maybe param" "maybe type" "temp"
    (668168 'move' call_tmp[668165](385627 call rank _mt[243] this[148014]))
    unknown call_tmp[668172] "expr temp" "maybe param" "maybe type" "temp"
    (668175 'move' call_tmp[668172](385632 call idxType _mt[243] this[148014]))
    unknown call_tmp[668177] "expr temp" "maybe param" "maybe type" "temp"
    (668180 'move' call_tmp[668177](147052 call chpl__buildIndexType call_tmp[668165] call_tmp[668172]))
    unknown call_tmp[668184] "expr temp" "maybe param" "maybe type" "temp"
    (668187 'move' call_tmp[668184](461761 call eltType _mt[243] inds[147056]))
    unknown call_tmp[668189] "expr temp" "maybe param" "maybe type" "temp"
    (668192 'move' call_tmp[668189](461765 call == call_tmp[668177] call_tmp[668184]))
    (461759 call & 1 call_tmp[668189])
  }
  function BaseSparseDomImpl[148004](?)._grow[147108](arg _mt[148020]:_MT[238], arg this[148018]:BaseSparseDomImpl[148004](?), arg size[147105]:int(64)[13], arg factor[147111] :
  arrayAsVecGrowthFactor[113755] =
  arrayAsVecGrowthFactor[113755]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668196] "expr temp" "maybe param" "maybe type" "temp"
    (668199 'move' call_tmp[668196](360620 call nnzDom _mt[243] this[148018]))
    unknown call_tmp[668203] "maybe param" "maybe type" "temp"
    (668206 'move' call_tmp[668203](147115 call size _mt[243] call_tmp[668196]))
    const oldNNZDomSize[147118] "dead at end of block" "const" "insert auto destroy"
    (543608 'init var' oldNNZDomSize[147118] call_tmp[668203])
    (147121 'end of statement')
    unknown call_tmp[668208] "expr temp" "maybe param" "maybe type" "temp"
    (668211 'move' call_tmp[668208](147125 call > size[147105] oldNNZDomSize[147118]))
    unknown call_tmp[668213] "expr temp" "maybe param" "maybe type" "temp"
    (668216 'move' call_tmp[668213](147160 call _cond_test call_tmp[668208]))
    if call_tmp[668213]
    {
      const _newNNZDomSize[147142] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[568579] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568580] "maybe param" "temp"
      (568585 'move' tmp[568580](568583 call _cond_test oldNNZDomSize[147118]))
      if tmp[568580]
      {
        unknown tmp[568587] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668218] "expr temp" "maybe param" "maybe type" "temp"
        (668221 'move' call_tmp[668218](147131 call * factor[147111] oldNNZDomSize[147118]))
        unknown call_tmp[668223] "expr temp" "maybe param" "maybe type" "temp"
        (668226 'move' call_tmp[668223](147134 call ceil call_tmp[668218]))
        (568589 'move' tmp[568587](147136 call _cast int(64)[13] call_tmp[668223]))
        (568594 'move' tmp[568579](568591 '_paramFoldLogical' tmp[568580] tmp[568587]))
      }
      {
        (568599 'move' tmp[568579](568596 '_paramFoldLogical' tmp[568580] 1))
      }
      (543610 'init var' _newNNZDomSize[147142] tmp[568579])
      (147145 'end of statement' oldNNZDomSize[147118] oldNNZDomSize[147118])
      unknown call_tmp[668230] "expr temp" "maybe param" "maybe type" "temp"
      (668233 'move' call_tmp[668230](385644 call nnzDom _mt[243] this[148018]))
      unknown call_tmp[668235] "expr temp" "maybe param" "maybe type" "temp"
      (668238 'move' call_tmp[668235](147149 call chpl_build_low_bounded_range 1))
      unknown call_tmp[668240] "expr temp" "maybe param" "maybe type" "temp"
      (668243 'move' call_tmp[668240](147152 call # call_tmp[668235] _newNNZDomSize[147142]))
      unknown call_tmp[668245] "expr temp" "maybe param" "maybe type" "temp"
      (668248 'move' call_tmp[668245](147155 call chpl__buildDomainExpr call_tmp[668240]))
      (147157 call = call_tmp[668230] call_tmp[668245])
      (481500 'end of statement' _newNNZDomSize[147142])
    }
    (520029 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._shrink[147172](arg _mt[148024]:_MT[238], arg this[148022]:BaseSparseDomImpl[148004](?), arg size[147169]:int(64)[13], arg factor[147175] :
  arrayAsVecGrowthFactor[113755] =
  arrayAsVecGrowthFactor[113755]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668250] "expr temp" "maybe param" "maybe type" "temp"
    (668253 'move' call_tmp[668250](147180 call == size[147169] 0))
    unknown call_tmp[668255] "expr temp" "maybe param" "maybe type" "temp"
    (668258 'move' call_tmp[668255](147246 call _cond_test call_tmp[668250]))
    if call_tmp[668255]
    {
      unknown call_tmp[668262] "expr temp" "maybe param" "maybe type" "temp"
      (668265 'move' call_tmp[668262](385652 call nnzDom _mt[243] this[148022]))
      unknown call_tmp[668267] "expr temp" "maybe param" "maybe type" "temp"
      (668270 'move' call_tmp[668267](147185 call chpl_build_bounded_range 1 0))
      unknown call_tmp[668272] "expr temp" "maybe param" "maybe type" "temp"
      (668275 'move' call_tmp[668272](147188 call chpl__buildDomainExpr call_tmp[668267]))
      (147190 call = call_tmp[668262] call_tmp[668272])
    }
    {
      unknown call_tmp[668279] "expr temp" "maybe param" "maybe type" "temp"
      (668282 'move' call_tmp[668279](360625 call nnzDom _mt[243] this[148022]))
      unknown call_tmp[668286] "expr temp" "maybe param" "maybe type" "temp"
      (668289 'move' call_tmp[668286](147195 call size _mt[243] call_tmp[668279]))
      unknown call_tmp[668291] "expr temp" "maybe param" "maybe type" "temp"
      (668294 'move' call_tmp[668291](147200 call ** factor[147175] 2))
      unknown call_tmp[668296] "expr temp" "maybe param" "maybe type" "temp"
      (668299 'move' call_tmp[668296](147202 call / call_tmp[668286] call_tmp[668291]))
      unknown call_tmp[668301] "maybe param" "maybe type" "temp"
      (668304 'move' call_tmp[668301](147205 call _cast int(64)[13] call_tmp[668296]))
      const shrinkThreshold[147207] "dead at end of block" "const" "insert auto destroy"
      (543612 'init var' shrinkThreshold[147207] call_tmp[668301])
      (147210 'end of statement')
      unknown call_tmp[668306] "expr temp" "maybe param" "maybe type" "temp"
      (668309 'move' call_tmp[668306](147214 call < size[147169] shrinkThreshold[147207]))
      unknown call_tmp[668311] "expr temp" "maybe param" "maybe type" "temp"
      (668314 'move' call_tmp[668311](147242 call _cond_test call_tmp[668306]))
      if call_tmp[668311]
      {
        unknown call_tmp[668318] "expr temp" "maybe param" "maybe type" "temp"
        (668321 'move' call_tmp[668318](360630 call nnzDom _mt[243] this[148022]))
        unknown call_tmp[668325] "expr temp" "maybe param" "maybe type" "temp"
        (668328 'move' call_tmp[668325](147217 call size _mt[243] call_tmp[668318]))
        unknown call_tmp[668330] "expr temp" "maybe param" "maybe type" "temp"
        (668333 'move' call_tmp[668330](147221 call / call_tmp[668325] factor[147175]))
        unknown call_tmp[668335] "maybe param" "maybe type" "temp"
        (668338 'move' call_tmp[668335](147224 call _cast int(64)[13] call_tmp[668330]))
        const _newNNZDomSize[147226] "dead at end of block" "const" "insert auto destroy"
        (543614 'init var' _newNNZDomSize[147226] call_tmp[668335])
        (147229 'end of statement')
        unknown call_tmp[668342] "expr temp" "maybe param" "maybe type" "temp"
        (668345 'move' call_tmp[668342](385661 call nnzDom _mt[243] this[148022]))
        unknown call_tmp[668347] "expr temp" "maybe param" "maybe type" "temp"
        (668350 'move' call_tmp[668347](147234 call chpl_build_bounded_range 1 _newNNZDomSize[147226]))
        unknown call_tmp[668352] "expr temp" "maybe param" "maybe type" "temp"
        (668355 'move' call_tmp[668352](147237 call chpl__buildDomainExpr call_tmp[668347]))
        (147239 call = call_tmp[668342] call_tmp[668352])
        (481503 'end of statement' _newNNZDomSize[147226])
      }
    }
    (520031 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._bulkGrow[147255](arg _mt[148028]:_MT[238], arg this[148026]:BaseSparseDomImpl[148004](?)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668359] "maybe param" "maybe type" "temp"
    (668362 'move' call_tmp[668359](147259 call(385668 call (partial) getNNZ _mt[243] this[148026])))
    const nnz[147260] "dead at end of block" "const" "insert auto destroy"
    (543616 'init var' nnz[147260] call_tmp[668359])
    (147263 'end of statement')
    unknown call_tmp[668366] "expr temp" "maybe param" "maybe type" "temp"
    (668369 'move' call_tmp[668366](360635 call nnzDom _mt[243] this[148026]))
    unknown call_tmp[668373] "expr temp" "maybe param" "maybe type" "temp"
    (668376 'move' call_tmp[668373](147267 call size _mt[243] call_tmp[668366]))
    unknown call_tmp[668378] "expr temp" "maybe param" "maybe type" "temp"
    (668381 'move' call_tmp[668378](147270 call > nnz[147260] call_tmp[668373]))
    unknown call_tmp[668383] "expr temp" "maybe param" "maybe type" "temp"
    (668386 'move' call_tmp[668383](147303 call _cond_test call_tmp[668378]))
    if call_tmp[668383]
    {
      unknown call_tmp[668388] "expr temp" "maybe param" "maybe type" "temp"
      (668391 'move' call_tmp[668388](147276 call log2 nnz[147260]))
      unknown call_tmp[668393] "expr temp" "maybe param" "maybe type" "temp"
      (668396 'move' call_tmp[668393](147280 call + call_tmp[668388] 1.0))
      unknown call_tmp[668398] "expr temp" "maybe param" "maybe type" "temp"
      (668401 'move' call_tmp[668398](147283 call exp2 call_tmp[668393]))
      unknown call_tmp[668403] "maybe param" "maybe type" "temp"
      (668406 'move' call_tmp[668403](147285 call _cast int(64)[13] call_tmp[668398]))
      const _newNNZDomSize[147287] "dead at end of block" "const" "insert auto destroy"
      (543618 'init var' _newNNZDomSize[147287] call_tmp[668403])
      (147290 'end of statement' nnz[147260])
      unknown call_tmp[668410] "expr temp" "maybe param" "maybe type" "temp"
      (668413 'move' call_tmp[668410](385675 call nnzDom _mt[243] this[148026]))
      unknown call_tmp[668415] "expr temp" "maybe param" "maybe type" "temp"
      (668418 'move' call_tmp[668415](147295 call chpl_build_bounded_range 1 _newNNZDomSize[147287]))
      unknown call_tmp[668420] "expr temp" "maybe param" "maybe type" "temp"
      (668423 'move' call_tmp[668420](147298 call chpl__buildDomainExpr call_tmp[668415]))
      (147300 call = call_tmp[668410] call_tmp[668420])
      (481506 'end of statement' _newNNZDomSize[147287])
    }
    (520033 return _void[55])
  }
  function BaseSparseDomImpl[148004](?)._countDuplicates[147313](arg _mt[148032]:_MT[238], arg this[148030]:BaseSparseDomImpl[148004](?), arg arr[147311]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[520037] "RVV" "temp"
    unknown call_tmp[668425] "maybe param" "maybe type" "temp"
    (668428 'move' call_tmp[668425](147320 call - 1))
    unknown dupCount[147322] "dead at end of block" "insert auto destroy"
    (543620 'init var' dupCount[147322] call_tmp[668425])
    (147325 'end of statement')
    unknown call_tmp[668432] "expr temp" "maybe param" "maybe type" "temp"
    (668435 'move' call_tmp[668432](147329 call _dom _mt[243] arr[147311]))
    unknown call_tmp[668439] "expr temp" "maybe param" "maybe type" "temp"
    (668442 'move' call_tmp[668439](147332 call low _mt[243] call_tmp[668432]))
    unknown call_tmp[668444] "maybe param" "maybe type" "temp"
    (668447 'move' call_tmp[668444](147336 call arr[147311] call_tmp[668439]))
    unknown prev[147337] "dead at end of block" "insert auto destroy"
    (543622 'init var' prev[147337] call_tmp[668444])
    (147340 'end of statement')
    {
      unknown _indexOfInterest[147366] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147367] "expr temp" "temp"
      (147376 'move' _iterator[147367](147374 call _getIterator arr[147311]))
      Defer
      {
        {
          (147392 call _freeIterator _iterator[147367])
        }
      }
      { scopeless type
        (147381 'move' _indexOfInterest[147366](147378 call iteratorIndex _iterator[147367]))
      }
      ForLoop[147368]
      {
        unknown a[147385] "index var" "insert auto destroy"
        (481509 'end of statement')
        (147387 'move' a[147385] _indexOfInterest[147366])
        (481510 'end of statement' a[147385])
        {
          unknown call_tmp[668449] "expr temp" "maybe param" "maybe type" "temp"
          (668452 'move' call_tmp[668449](147345 call == a[147385] prev[147337]))
          unknown call_tmp[668454] "expr temp" "maybe param" "maybe type" "temp"
          (668457 'move' call_tmp[668454](147357 call _cond_test call_tmp[668449]))
          if call_tmp[668454]
          {
            (147349 call += dupCount[147322] 1)
            (481512 'end of statement' dupCount[147322])
          }
          {
            (147354 call = prev[147337] a[147385])
            (481514 'end of statement' prev[147337] a[147385])
          }
          {
          }
        }
        label _continueLabel[147371]
        _indexOfInterest[147366]
        _iterator[147367]
      }
      label _breakLabel[147372]
    }
    (520042 'move' ret[520037](520041 'deref' dupCount[147322]))
    gotoReturn _end__countDuplicates[520035] _end__countDuplicates[520035]
    (481517 'end of statement' dupCount[147322])
    label _end__countDuplicates[520035]
    (520039 return ret[520037])
  }
  where {
    (147318 call isArray arr[147311])
  }
  function BaseSparseDomImpl[148004](?).bulkAdd_prepareInds[147409](arg _mt[148036]:_MT[238], arg this[148034]:BaseSparseDomImpl[148004](?), arg inds[147407]:_any[178](?), arg dataSorted[147411]:_any[178](?), arg isUnique[147413]:_any[178](?), arg cmp[147415]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668459] "expr temp" "maybe param" "maybe type" "temp"
    (668462 'move' call_tmp[668459](147422 call ! dataSorted[147411]))
    unknown call_tmp[668464] "expr temp" "maybe param" "maybe type" "temp"
    (668467 'move' call_tmp[668464](147431 call _cond_test call_tmp[668459]))
    if call_tmp[668464]
    {
      (147429 call sort inds[147407](comparator = cmp[147415]))
    }
    unknown call_tmp[668469] "expr temp" "maybe param" "maybe type" "temp"
    (668472 'move' call_tmp[668469](147645 call _cond_test 1))
    if call_tmp[668469]
    {
      unknown tmp[427153] "maybe param" "temp"
      (427164 'move' tmp[427153] dataSorted[147411])
      unknown call_tmp[668474] "expr temp" "maybe param" "maybe type" "temp"
      (668477 'move' call_tmp[668474](427166 call _cond_invalid tmp[427153]))
      if call_tmp[668474]
      {
        (427169 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[568606] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[568607] "maybe param" "temp"
      unknown call_tmp[668479] "expr temp" "maybe param" "maybe type" "temp"
      (668482 'move' call_tmp[668479](427154 call isTrue tmp[427153]))
      (568612 'move' tmp[568607](568610 call _cond_test call_tmp[668479]))
      if tmp[568607]
      {
        unknown tmp[568614] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[668484] "expr temp" "maybe param" "maybe type" "temp"
        (668487 'move' call_tmp[668484](147443 call isSorted inds[147407](comparator = cmp[147415])))
        unknown call_tmp[668489] "expr temp" "maybe param" "maybe type" "temp"
        (668492 'move' call_tmp[668489](147444 call ! call_tmp[668484]))
        (568616 'move' tmp[568614](427157 call isTrue call_tmp[668489]))
        (568621 'move' tmp[568606](568618 '_paramFoldLogical' tmp[568607] tmp[568614]))
      }
      {
        (568626 'move' tmp[568606](568623 '_paramFoldLogical' tmp[568607] 0))
      }
      unknown call_tmp[668494] "expr temp" "maybe param" "maybe type" "temp"
      (668497 'move' call_tmp[668494](147471 call _cond_test tmp[568606]))
      if call_tmp[668494]
      {
        (147469 call halt "bulkAdd: Data not sorted, call the function with \n              dataSorted=false")
      }
      unknown call_tmp[668499] "expr temp" "maybe param" "maybe type" "temp"
      (668502 'move' call_tmp[668499](147601 call _cond_test isUnique[147413]))
      if call_tmp[668499]
      {
        unknown call_tmp[668506] "expr temp" "maybe param" "maybe type" "temp"
        (668509 'move' call_tmp[668506](147479 call _dom _mt[243] inds[147407]))
        unknown call_tmp[668513] "maybe param" "maybe type" "temp"
        (668516 'move' call_tmp[668513](147482 call low _mt[243] call_tmp[668506]))
        const indsStart[147485] "dead at end of block" "const" "insert auto destroy"
        (543624 'init var' indsStart[147485] call_tmp[668513])
        (147488 'end of statement')
        unknown call_tmp[668520] "expr temp" "maybe param" "maybe type" "temp"
        (668523 'move' call_tmp[668520](147491 call _dom _mt[243] inds[147407]))
        unknown call_tmp[668527] "maybe param" "maybe type" "temp"
        (668530 'move' call_tmp[668527](147494 call high _mt[243] call_tmp[668520]))
        const indsEnd[147497] "dead at end of block" "const" "insert auto destroy"
        (543626 'init var' indsEnd[147497] call_tmp[668527])
        (147500 'end of statement')
        unknown call_tmp[668532] "maybe param" "maybe type" "temp"
        (668535 'move' call_tmp[668532](147504 call inds[147407] indsStart[147485]))
        unknown lastInd[147505] "dead at end of block" "insert auto destroy"
        (543628 'init var' lastInd[147505] call_tmp[668532])
        (147508 'end of statement' indsStart[147485])
        {
          unknown _indexOfInterest[147560] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[147561] "expr temp" "temp"
          unknown call_tmp[668537] "expr temp" "maybe param" "maybe type" "temp"
          (668540 'move' call_tmp[668537](147574 call + indsStart[147485] 1))
          unknown call_tmp[668542] "expr temp" "maybe param" "maybe type" "temp"
          (668545 'move' call_tmp[668542](147578 call chpl_direct_range_iter call_tmp[668537] indsEnd[147497] 1))
          (147570 'move' _iterator[147561](147568 call _getIterator call_tmp[668542]))
          Defer
          {
            {
              (147594 call _freeIterator _iterator[147561])
            }
          }
          { scopeless type
            (147583 'move' _indexOfInterest[147560](147580 call iteratorIndex _iterator[147561]))
          }
          ForLoop[147562]
          {
            unknown i[147587] "index var" "insert auto destroy"
            (481524 'end of statement')
            (147589 'move' i[147587] _indexOfInterest[147560])
            (481525 'end of statement' i[147587])
            {
              unknown call_tmp[668547] "expr temp" "maybe param" "maybe type" "temp"
              (668550 'move' call_tmp[668547](147520 call inds[147407] i[147587]))
              unknown call_tmp[668552] "expr temp" "maybe param" "maybe type" "temp"
              (668555 'move' call_tmp[668552](147522 call == call_tmp[668547] lastInd[147505]))
              unknown call_tmp[668557] "expr temp" "maybe param" "maybe type" "temp"
              (668560 'move' call_tmp[668557](147553 call _cond_test call_tmp[668552]))
              if call_tmp[668557]
              {
                (147543 call halt "bulkAdd: There are duplicates, call the function \n                  with isUnique=false")
              }
              {
                unknown call_tmp[668562] "expr temp" "maybe param" "maybe type" "temp"
                (668565 'move' call_tmp[668562](147549 call inds[147407] i[147587]))
                (147550 call = lastInd[147505] call_tmp[668562])
                (481528 'end of statement' lastInd[147505] i[147587])
              }
            }
            label _continueLabel[147565]
            _indexOfInterest[147560]
            _iterator[147561]
          }
          label _breakLabel[147566]
        }
      }
      {
        unknown _indexOfInterest[147612] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147613] "expr temp" "temp"
        (147622 'move' _iterator[147613](147620 call _getIterator inds[147407]))
        Defer
        {
          {
            (147638 call _freeIterator _iterator[147613])
          }
        }
        { scopeless type
          (147627 'move' _indexOfInterest[147612](147624 call iteratorIndex _iterator[147613]))
        }
        ForLoop[147614]
        {
          unknown i[147631] "index var" "insert auto destroy"
          (481532 'end of statement')
          (147633 'move' i[147631] _indexOfInterest[147612])
          (481533 'end of statement' i[147631])
          (147610 call(385708 call (partial) boundsCheck _mt[243] this[148034]) i[147631])
          (481535 'end of statement' i[147631])
          label _continueLabel[147617]
          _indexOfInterest[147612]
          _iterator[147613]
        }
        label _breakLabel[147618]
      }
    }
    (520046 return _void[55])
    (355174 'used modules list'(147418 'use' Sort[267989]))
  }
  function BaseSparseDomImpl[148004](?).__getActualInsertPts[147655](arg _mt[148040]:_MT[238], arg this[148038]:BaseSparseDomImpl[148004](?), arg d[147653]:_any[178](?), arg inds[147657]:_any[178](?), arg isUnique[147659]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520050] "RVV" "temp"
    unknown indivInsertPts[147671] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668571] "expr temp" "maybe param" "maybe type" "temp"
    (668574 'move' call_tmp[668571](147662 call _dom _mt[243] inds[147657]))
    unknown call_tmp[668576] "expr temp" "maybe param" "maybe type" "temp"
    (668579 'move' call_tmp[668576](147667 call chpl__ensureDomainExpr call_tmp[668571]))
    unknown call_tmp[668581] "expr temp" "maybe param" "maybe type" "temp"
    (668584 'move' call_tmp[668581](147669 call chpl__buildArrayRuntimeType call_tmp[668576] int(64)[13]))
    (543630 'default init var' indivInsertPts[147671] call_tmp[668581])
    (147674 'end of statement')
    unknown actualInsertPts[147686] "dead at end of block" "insert auto destroy"
    unknown call_tmp[668588] "expr temp" "maybe param" "maybe type" "temp"
    (668591 'move' call_tmp[668588](147677 call _dom _mt[243] inds[147657]))
    unknown call_tmp[668593] "expr temp" "maybe param" "maybe type" "temp"
    (668596 'move' call_tmp[668593](147682 call chpl__ensureDomainExpr call_tmp[668588]))
    unknown call_tmp[668598] "expr temp" "maybe param" "maybe type" "temp"
    (668601 'move' call_tmp[668598](147684 call chpl__buildArrayRuntimeType call_tmp[668593] int(64)[13]))
    (543632 'default init var' actualInsertPts[147686] call_tmp[668598])
    (147689 'end of statement')
    unknown call_tmp[668603] "expr temp" "maybe param" "maybe type" "temp"
    (668606 'move' call_tmp[668603](147691 call ! isUnique[147659]))
    unknown call_tmp[668608] "expr temp" "maybe param" "maybe type" "temp"
    (668611 'move' call_tmp[668608](147795 call _cond_test call_tmp[668603]))
    if call_tmp[668608]
    {
      unknown call_tmp[668615] "expr temp" "maybe param" "maybe type" "temp"
      (668618 'move' call_tmp[668615](147695 call _dom _mt[243] inds[147657]))
      unknown call_tmp[668622] "expr temp" "maybe param" "maybe type" "temp"
      (668625 'move' call_tmp[668622](147698 call low _mt[243] call_tmp[668615]))
      unknown call_tmp[668627] "expr temp" "maybe param" "maybe type" "temp"
      (668630 'move' call_tmp[668627](147702 call inds[147657] call_tmp[668622]))
      unknown call_tmp[668632] "maybe param" "maybe type" "temp"
      (668635 'move' call_tmp[668632](147704 call + call_tmp[668627] 1))
      unknown lastInd[147706] "dead at end of block" "insert auto destroy"
      (543634 'init var' lastInd[147706] call_tmp[668632])
      (147709 'end of statement')
      {
        unknown _indexOfInterest[147743] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147744] "expr temp" "temp"
        unknown call_tmp[668637] "expr temp" "maybe param" "maybe type" "temp"
        (668640 'move' call_tmp[668637](147753 call _getIterator inds[147657]))
        unknown call_tmp[668642] "expr temp" "maybe param" "maybe type" "temp"
        (668645 'move' call_tmp[668642](147756 call _getIterator indivInsertPts[147671]))
        (147758 'move' _iterator[147744](147719 call _build_tuple call_tmp[668637] call_tmp[668642]))
        Defer
        {
          {
            (147788 call _freeIterator _iterator[147744])
          }
        }
        { scopeless type
          (147763 'move' _indexOfInterest[147743](147760 call iteratorIndex _iterator[147744]))
        }
        ForLoop[147745]
        {
          (147768 call _check_tuple_var_decl _indexOfInterest[147743] 2)
          (481538 'end of statement')
          unknown i[147774] "index var" "insert auto destroy"
          (481539 'end of statement')
          (147776 'move' i[147774](147772 call _indexOfInterest[147743] 0))
          (481540 'end of statement' i[147774])
          unknown p[147781] "index var" "insert auto destroy"
          (481542 'end of statement')
          (147783 'move' p[147781](147779 call _indexOfInterest[147743] 1))
          (481543 'end of statement' p[147781])
          {
            unknown call_tmp[668647] "expr temp" "maybe param" "maybe type" "temp"
            (668650 'move' call_tmp[668647](147722 call == i[147774] lastInd[147706]))
            unknown call_tmp[668652] "expr temp" "maybe param" "maybe type" "temp"
            (668655 'move' call_tmp[668652](147736 call _cond_test call_tmp[668647]))
            if call_tmp[668652]
            {
              unknown call_tmp[668657] "expr temp" "maybe param" "maybe type" "temp"
              (668660 'move' call_tmp[668657](147726 call - 1))
              (147728 call = p[147781] call_tmp[668657])
              (481545 'end of statement' p[147781])
            }
            {
              (147733 call = lastInd[147706] i[147774])
              (481547 'end of statement' lastInd[147706] i[147774])
            }
          }
          label _continueLabel[147748]
          _indexOfInterest[147743]
          _iterator[147744]
        }
        label _breakLabel[147749]
      }
    }
    Forall {
      induction variables:
        
        unknown i[147863] "index var" "insert auto destroy"
        
        unknown p[147865] "index var" "insert auto destroy"
      iterated expressions:
        inds[147657]
        indivInsertPts[147671]
      shadow variables:
      other variables
        forall body
      {
        unknown tmp[427174] "maybe param" "temp"
        (427185 'move' tmp[427174] isUnique[147659])
        unknown call_tmp[668662] "expr temp" "maybe param" "maybe type" "temp"
        (668665 'move' call_tmp[668662](427187 call _cond_invalid tmp[427174]))
        if call_tmp[668662]
        {
          (427190 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[568633] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[568634] "maybe param" "temp"
        unknown call_tmp[668667] "expr temp" "maybe param" "maybe type" "temp"
        (668670 'move' call_tmp[668667](427175 call isTrue tmp[427174]))
        (568639 'move' tmp[568634](568637 call _cond_test call_tmp[668667]))
        if tmp[568634]
        {
          (568644 'move' tmp[568633](568641 '_paramFoldLogical' tmp[568634] 1))
        }
        {
          unknown tmp[568646] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[668672] "expr temp" "maybe param" "maybe type" "temp"
          (668675 'move' call_tmp[668672](147811 call - 1))
          unknown call_tmp[668677] "expr temp" "maybe param" "maybe type" "temp"
          (668680 'move' call_tmp[668677](147813 call != p[147865] call_tmp[668672]))
          (568648 'move' tmp[568646](427179 call isTrue call_tmp[668677]))
          (568653 'move' tmp[568633](568650 '_paramFoldLogical' tmp[568634] tmp[568646]))
        }
        unknown call_tmp[668682] "expr temp" "maybe param" "maybe type" "temp"
        (668685 'move' call_tmp[668682](147857 call _cond_test tmp[568633]))
        if call_tmp[668682]
        {
          unknown call_tmp[668689] "maybe param" "maybe type" "temp"
          (668692 'move' call_tmp[668689](147830 call(147825 call (partial) find _mt[243] d[147653]) i[147863]))
          const tmp[147831] "dead at end of block" "const" "insert auto destroy" "temp"
          (543636 'init var' tmp[147831] call_tmp[668689])
          (147838 call _check_tuple_var_decl tmp[147831] 2)
          (481551 'end of statement')
          unknown call_tmp[668694] "maybe param" "maybe type" "temp"
          (668697 'move' call_tmp[668694](147832 call tmp[147831] 0))
          const found[147817] "dead at end of block" "const" "insert auto destroy"
          (543638 'init var' found[147817] call_tmp[668694])
          unknown call_tmp[668699] "maybe param" "maybe type" "temp"
          (668702 'move' call_tmp[668699](147835 call tmp[147831] 1))
          const insertPt[147819] "dead at end of block" "const" "insert auto destroy"
          (543640 'init var' insertPt[147819] call_tmp[668699])
          (147843 'end of statement')
          unknown tmp[568660] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[568661] "maybe param" "temp"
          (568666 'move' tmp[568661](568664 call _cond_test found[147817]))
          if tmp[568661]
          {
            unknown tmp[568668] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (568670 'move' tmp[568668](147848 call - 1))
            (568675 'move' tmp[568660](568672 '_paramFoldLogical' tmp[568661] tmp[568668]))
          }
          {
            (568680 'move' tmp[568660](568677 '_paramFoldLogical' tmp[568661] insertPt[147819]))
          }
          (147854 call = p[147865] tmp[568660])
          (481552 'end of statement' p[147865] found[147817] insertPt[147819])
        }
      }
    }
    unknown actualAddCnt[147870] "dead at end of block" "insert auto destroy"
    (543642 'init var' actualAddCnt[147870] 0)
    (147873 'end of statement')
    {
      unknown _indexOfInterest[147914] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147915] "expr temp" "temp"
      unknown call_tmp[668704] "expr temp" "maybe param" "maybe type" "temp"
      (668707 'move' call_tmp[668704](147924 call _getIterator indivInsertPts[147671]))
      unknown call_tmp[668709] "expr temp" "maybe param" "maybe type" "temp"
      (668712 'move' call_tmp[668709](147927 call _getIterator actualInsertPts[147686]))
      (147929 'move' _iterator[147915](147882 call _build_tuple call_tmp[668704] call_tmp[668709]))
      Defer
      {
        {
          (147959 call _freeIterator _iterator[147915])
        }
      }
      { scopeless type
        (147934 'move' _indexOfInterest[147914](147931 call iteratorIndex _iterator[147915]))
      }
      ForLoop[147916]
      {
        (147939 call _check_tuple_var_decl _indexOfInterest[147914] 2)
        (481557 'end of statement')
        unknown ip[147945] "index var" "insert auto destroy"
        (481558 'end of statement')
        (147947 'move' ip[147945](147943 call _indexOfInterest[147914] 0))
        (481559 'end of statement' ip[147945])
        unknown ap[147952] "index var" "insert auto destroy"
        (481561 'end of statement')
        (147954 'move' ap[147952](147950 call _indexOfInterest[147914] 1))
        (481562 'end of statement' ap[147952])
        {
          unknown call_tmp[668714] "expr temp" "maybe param" "maybe type" "temp"
          (668717 'move' call_tmp[668714](147885 call - 1))
          unknown call_tmp[668719] "expr temp" "maybe param" "maybe type" "temp"
          (668722 'move' call_tmp[668719](147887 call != ip[147945] call_tmp[668714]))
          unknown call_tmp[668724] "expr temp" "maybe param" "maybe type" "temp"
          (668727 'move' call_tmp[668724](147908 call _cond_test call_tmp[668719]))
          if call_tmp[668724]
          {
            unknown call_tmp[668729] "expr temp" "maybe param" "maybe type" "temp"
            (668732 'move' call_tmp[668729](147892 call + ip[147945] actualAddCnt[147870]))
            (147894 call = ap[147952] call_tmp[668729])
            (481564 'end of statement' ap[147952] ip[147945] actualAddCnt[147870])
            (147900 call += actualAddCnt[147870] 1)
            (481568 'end of statement' actualAddCnt[147870])
          }
          {
            (147905 call = ap[147952] ip[147945])
            (481570 'end of statement' ap[147952] ip[147945])
          }
        }
        label _continueLabel[147919]
        _indexOfInterest[147914]
        _iterator[147915]
      }
      label _breakLabel[147920]
    }
    unknown call_tmp[668734] "expr temp" "maybe param" "maybe type" "temp"
    (668737 'move' call_tmp[668734](147969 call _build_tuple actualInsertPts[147686] actualAddCnt[147870]))
    (520055 'move' ret[520050](520054 'deref' call_tmp[668734]))
    gotoReturn _end___getActualInsertPts[520048] _end___getActualInsertPts[520048]
    (481573 'end of statement' actualInsertPts[147686] actualAddCnt[147870])
    label _end___getActualInsertPts[520048]
    (520052 return ret[520050])
  }
  function BaseSparseDomImpl[148004](?).dsiClear[147977](arg _mt[148044]:_MT[238], arg this[148042]:BaseSparseDomImpl[148004](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (147998 call halt "not implemented")
    (520059 return _void[55])
  }
  type BaseSparseDomImpl[148004](?) val super[355717]:BaseSparseDom[148708](?) "super class" unknown nnzDom[146964](146962 call chpl__buildDomainExpr(146959 call chpl_build_bounded_range 1 0))
  function SparseIndexBuffer[148231](?).init[148102](arg _mt[148235]:_MT[238], ref arg this[148233]:SparseIndexBuffer[148231](?), arg size[148100]:_any[178](?), param arg rank[148105]:int(64)[13], arg obj[148108]:_any[178](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668739] "expr temp" "maybe param" "maybe type" "temp"
    (668742 'move' call_tmp[668739](461768 call _cast int(64)[13] rank[148105]))
    (461770 'init field' this[148233] c"rank" call_tmp[668739])
    (481577 'end of statement')
    unknown tmp[461773] "temp"
    (461776 'init var' tmp[461773] obj[148108] BaseSparseDom[382296](?))
    (461778 'init field' this[148233] c"obj" tmp[461773])
    (481578 'end of statement')
    unknown tmp[461794] "temp" "type variable"
    unknown tmp[568687] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568688] "maybe param" "temp"
    unknown call_tmp[668744] "expr temp" "maybe param" "maybe type" "temp"
    (668747 'move' call_tmp[668744](461802 '.v' this[148233] c"rank"))
    unknown call_tmp[668749] "expr temp" "maybe param" "maybe type" "temp"
    (668752 'move' call_tmp[668749](461783 call == call_tmp[668744] 1))
    (568693 'move' tmp[568688](568691 call _cond_test call_tmp[668749]))
    if tmp[568688]
    {
      (568698 'move' tmp[568687](568695 '_paramFoldLogical' tmp[568688] int(64)[13]))
    }
    {
      unknown tmp[568700] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[668754] "expr temp" "maybe param" "maybe type" "temp"
      (668757 'move' call_tmp[668754](461805 '.v' this[148233] c"rank"))
      (568702 'move' tmp[568700](461790 call * call_tmp[668754] int(64)[13]))
      (568707 'move' tmp[568687](568704 '_paramFoldLogical' tmp[568688] tmp[568700]))
    }
    (461796 'move' tmp[461794] tmp[568687])
    (461798 'init field' this[148233] c"idxType" tmp[461794])
    (481579 'end of statement')
    unknown call_tmp[668759] "expr temp" "maybe param" "maybe type" "temp"
    (668762 'move' call_tmp[668759](148129 call chpl_build_low_bounded_range 0))
    unknown call_tmp[668764] "expr temp" "maybe param" "maybe type" "temp"
    (668767 'move' call_tmp[668764](148132 call # call_tmp[668759] size[148100]))
    unknown call_tmp[668769] "maybe param" "maybe type" "temp"
    (668772 'move' call_tmp[668769](148135 call chpl__buildDomainExpr call_tmp[668764]))
    unknown tmp[461808] "temp"
    (461810 'init var' tmp[461808] call_tmp[668769])
    (461812 '.=' this[148233] c"bufDom" tmp[461808])
    (481580 'end of statement')
    unknown tmp[461817] "temp"
    unknown call_tmp[668774] "expr temp" "maybe param" "maybe type" "temp"
    (668777 'move' call_tmp[668774](461831 '.' this[148233] c"bufDom"))
    unknown call_tmp[668779] "expr temp" "maybe param" "maybe type" "temp"
    (668782 'move' call_tmp[668779](461822 call chpl__ensureDomainExpr call_tmp[668774]))
    unknown call_tmp[668784] "expr temp" "maybe param" "maybe type" "temp"
    (668787 'move' call_tmp[668784](461834 '.v' this[148233] c"idxType"))
    unknown call_tmp[668789] "expr temp" "maybe param" "maybe type" "temp"
    (668792 'move' call_tmp[668789](461820 call chpl__buildArrayRuntimeType call_tmp[668779] call_tmp[668784]))
    (461825 'default init var' tmp[461817] call_tmp[668789])
    (461827 '.=' this[148233] c"buf" tmp[461817])
    (481581 'end of statement')
    unknown tmp[461838] "temp"
    (461840 'init var' tmp[461838] 0)
    (461842 '.=' this[148233] c"cur" tmp[461838])
    (481582 'end of statement')
    (520061 return _void[55])
  }
  function SparseIndexBuffer[148231](?).deinit[148144](arg _mt[148239]:_MT[238], arg this[148237]:SparseIndexBuffer[148231](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (148148 call(385759 call (partial) commit _mt[243] this[148237]))
    (520063 return _void[55])
  }
  function SparseIndexBuffer[148231](?).add[148159](arg _mt[148243]:_MT[238], arg this[148241]:SparseIndexBuffer[148231](?), arg idx[148156] :
  (385764 call idxType _mt[243] this[148241])) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668802] "expr temp" "maybe param" "maybe type" "temp"
    (668805 'move' call_tmp[668802](385776 call cur _mt[243] this[148241]))
    unknown call_tmp[668807] "expr temp" "maybe param" "maybe type" "temp"
    (668810 'move' call_tmp[668807](148164 call(385769 call (partial) buf _mt[243] this[148241]) call_tmp[668802]))
    (148166 call = call_tmp[668807] idx[148156])
    (481584 'end of statement')
    unknown call_tmp[668814] "expr temp" "maybe param" "maybe type" "temp"
    (668817 'move' call_tmp[668814](385782 call cur _mt[243] this[148241]))
    (148172 call += call_tmp[668814] 1)
    (481585 'end of statement')
    unknown call_tmp[668821] "expr temp" "maybe param" "maybe type" "temp"
    (668824 'move' call_tmp[668821](385787 call cur _mt[243] this[148241]))
    unknown call_tmp[668828] "expr temp" "maybe param" "maybe type" "temp"
    (668831 'move' call_tmp[668828](360651 call buf _mt[243] this[148241]))
    unknown call_tmp[668835] "expr temp" "maybe param" "maybe type" "temp"
    (668838 'move' call_tmp[668835](148177 call size _mt[243] call_tmp[668828]))
    unknown call_tmp[668840] "expr temp" "maybe param" "maybe type" "temp"
    (668843 'move' call_tmp[668840](148180 call == call_tmp[668821] call_tmp[668835]))
    unknown call_tmp[668845] "expr temp" "maybe param" "maybe type" "temp"
    (668848 'move' call_tmp[668845](148186 call _cond_test call_tmp[668840]))
    if call_tmp[668845]
    {
      (148184 call(385791 call (partial) commit _mt[243] this[148241]))
    }
    (520065 return _void[55])
  }
  function SparseIndexBuffer[148231](?).commit[148195](arg _mt[148247]:_MT[238], arg this[148245]:SparseIndexBuffer[148231](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[668854] "expr temp" "maybe param" "maybe type" "temp"
    (668857 'move' call_tmp[668854](385796 call cur _mt[243] this[148245]))
    unknown call_tmp[668859] "expr temp" "maybe param" "maybe type" "temp"
    (668862 'move' call_tmp[668859](148199 call >= call_tmp[668854] 1))
    unknown call_tmp[668864] "expr temp" "maybe param" "maybe type" "temp"
    (668867 'move' call_tmp[668864](148217 call _cond_test call_tmp[668859]))
    if call_tmp[668864]
    {
      unknown call_tmp[668871] "expr temp" "maybe param" "maybe type" "temp"
      (668874 'move' call_tmp[668871](360656 call obj _mt[243] this[148245]))
      unknown call_tmp[668882] "expr temp" "maybe param" "maybe type" "temp"
      (668885 'move' call_tmp[668882](385806 call cur _mt[243] this[148245]))
      unknown call_tmp[668887] "expr temp" "maybe param" "maybe type" "temp"
      (668890 'move' call_tmp[668887](148208 call - call_tmp[668882] 1))
      unknown call_tmp[668892] "expr temp" "maybe param" "maybe type" "temp"
      (668895 'move' call_tmp[668892](148210 call chpl_build_high_bounded_range call_tmp[668887]))
      unknown call_tmp[668897] "expr temp" "maybe param" "maybe type" "temp"
      (668900 'move' call_tmp[668897](148213 call(385801 call (partial) buf _mt[243] this[148245]) call_tmp[668892]))
      (148215 call(148202 call (partial) dsiBulkAdd _mt[243] call_tmp[668871]) call_tmp[668897])
    }
    unknown call_tmp[668904] "expr temp" "maybe param" "maybe type" "temp"
    (668907 'move' call_tmp[668904](385811 call cur _mt[243] this[148245]))
    (148225 call = call_tmp[668904] 0)
    (520067 return _void[55])
  }
  type SparseIndexBuffer[148231](?) unknown rank[148049] "param" int(64)[13] val obj[148054]:BaseSparseDom[382296](?) BaseSparseDom[382296](?) unknown idxType[148070] "type variable"(148067 IfExpr (148060 call == rank[148049] 1) then
  { scopeless
    int(64)[13]
  } else
  { scopeless
    (148065 call * rank[148049] int(64)[13])
  } ) unknown bufDom[148078](148076 call chpl__buildDomainRuntimeType defaultDist[94053] 1) unknown buf[148089](148087 call chpl__buildArrayRuntimeType(148085 call chpl__ensureDomainExpr bufDom[148078]) idxType[148070]) val cur[148094]:int(64)[13] 0
  function BaseSparseDom[148708](?).getNNZ[148267](arg _mt[148712]:_MT[238], arg this[148710]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[520071] "RVV" "temp"
    (148289 call halt "nnz queried on base class")
    (520073 return ret[520071])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148708](?).deinit[148297](arg _mt[148716]:_MT[238], arg this[148714]:BaseSparseDom[148708](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520075 return _void[55])
  }
  function BaseSparseDom[148708](?).dsiClear[148304](arg _mt[148720]:_MT[238], arg this[148718]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148325 call halt "clear not implemented for this distribution - BaseSparseDom")
    (520077 return _void[55])
  }
  function BaseSparseDom[148708](?).dsiBulkAdd[148343](arg _mt[148724]:_MT[238], arg this[148722]:BaseSparseDom[148708](?), arg inds[148340]:_array[133594](?), arg dataSorted[148346] :
  0 =
  0, arg isUnique[148350] :
  0 =
  0, arg preserveInds[148354] :
  1 =
  1, arg addOn[148358] :
  nilLocale[89942] =
  nilLocale[89942]) : _unknown[51] "compiler added where" "method" "primary method"
  {
    unknown ret[520081] "RVV" "temp"
    (148381 call halt "Bulk addition is not supported by this sparse domain")
    (481591 'end of statement')
    (520087 'move' ret[520081](520086 'coerce' 0 int(64)[13]))
    (520083 return ret[520081])
  }
  where {
    unknown call_tmp[668911] "expr temp" "maybe param" "maybe type" "temp"
    (668914 'move' call_tmp[668911](385816 call rank _mt[243] this[148722]))
    unknown call_tmp[668918] "expr temp" "maybe param" "maybe type" "temp"
    (668921 'move' call_tmp[668918](385821 call idxType _mt[243] this[148722]))
    unknown call_tmp[668923] "expr temp" "maybe param" "maybe type" "temp"
    (668926 'move' call_tmp[668923](148335 call chpl__buildIndexType call_tmp[668911] call_tmp[668918]))
    unknown call_tmp[668930] "expr temp" "maybe param" "maybe type" "temp"
    (668933 'move' call_tmp[668930](461852 call eltType _mt[243] inds[148340]))
    unknown call_tmp[668935] "expr temp" "maybe param" "maybe type" "temp"
    (668938 'move' call_tmp[668935](461856 call == call_tmp[668923] call_tmp[668930]))
    (461850 call & 1 call_tmp[668935])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[148708](?).boundsCheck[148400](arg _mt[148728]:_MT[238], arg this[148726]:BaseSparseDom[148708](?), arg ind[148397] :
  unknown call_tmp[668942] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown ret[520091] "RVV" "temp"
    unknown call_tmp[668954] "expr temp" "maybe param" "maybe type" "temp"
    (668957 'move' call_tmp[668954](148459 call _cond_test 1))
    if call_tmp[668954]
    {
      unknown call_tmp[668961] "expr temp" "maybe param" "maybe type" "temp"
      (668964 'move' call_tmp[668961](360661 call parentDom _mt[243] this[148726]))
      unknown call_tmp[668968] "expr temp" "maybe param" "maybe type" "temp"
      (668971 'move' call_tmp[668968](148410 call(148405 call (partial) contains _mt[243] call_tmp[668961]) ind[148397]))
      unknown call_tmp[668973] "expr temp" "maybe param" "maybe type" "temp"
      (668976 'move' call_tmp[668973](148411 call ! call_tmp[668968]))
      unknown call_tmp[668978] "expr temp" "maybe param" "maybe type" "temp"
      (668981 'move' call_tmp[668978](148454 call _cond_test call_tmp[668973]))
      if call_tmp[668978]
      {
        unknown call_tmp[668985] "expr temp" "maybe param" "maybe type" "temp"
        (668988 'move' call_tmp[668985](385840 call parentDom _mt[243] this[148726]))
        (148452 call halt "Sparse domain/array index out of bounds: " ind[148397] " (expected to be within " call_tmp[668985] ")")
      }
    }
    (520093 return ret[520091])
  }
  { scopeless type
    void[4]
  }
  function BaseSparseDom[148708](?).dsiDim[148474](arg _mt[148732]:_MT[238], arg this[148730]:BaseSparseDom[148708](?), arg d[148471]:int(64)[13]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520097] "RVV" "temp"
    unknown call_tmp[668992] "expr temp" "maybe param" "maybe type" "temp"
    (668995 'move' call_tmp[668992](360666 call parentDom _mt[243] this[148730]))
    unknown call_tmp[668999] "expr temp" "maybe param" "maybe type" "temp"
    (669002 'move' call_tmp[668999](148482 call(148477 call (partial) dim _mt[243] call_tmp[668992]) d[148471]))
    (520102 'move' ret[520097](520101 'deref' call_tmp[668999]))
    (520099 return ret[520097])
  }
  function BaseSparseDom[148708](?).dsiDims[148490](arg _mt[148736]:_MT[238], arg this[148734]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520106] "RVV" "temp"
    unknown call_tmp[669006] "expr temp" "maybe param" "maybe type" "temp"
    (669009 'move' call_tmp[669006](360671 call parentDom _mt[243] this[148734]))
    unknown call_tmp[669013] "expr temp" "maybe param" "maybe type" "temp"
    (669016 'move' call_tmp[669013](148497 call(148493 call (partial) dims _mt[243] call_tmp[669006])))
    (520111 'move' ret[520106](520110 'deref' call_tmp[669013]))
    (520108 return ret[520106])
  }
  function BaseSparseDom[148708](?).dsiNumIndices[148505](arg _mt[148740]:_MT[238], arg this[148738]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520115] "RVV" "temp"
    unknown call_tmp[669020] "expr temp" "maybe param" "maybe type" "temp"
    (669023 'move' call_tmp[669020](148509 call(385845 call (partial) getNNZ _mt[243] this[148738])))
    (520120 'move' ret[520115](520119 'deref' call_tmp[669020]))
    (520117 return ret[520115])
  }
  function BaseSparseDom[148708](?).dsiSize[148517](arg _mt[148744]:_MT[238], arg this[148742]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520124] "RVV" "temp"
    unknown call_tmp[669027] "expr temp" "maybe param" "maybe type" "temp"
    (669030 'move' call_tmp[669027](148521 call(385849 call (partial) getNNZ _mt[243] this[148742])))
    (520129 'move' ret[520124](520128 'deref' call_tmp[669027]))
    (520126 return ret[520124])
  }
  function BaseSparseDom[148708](?).dsiLow[148529](arg _mt[148748]:_MT[238], arg this[148746]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520133] "RVV" "temp"
    unknown call_tmp[669034] "expr temp" "maybe param" "maybe type" "temp"
    (669037 'move' call_tmp[669034](360676 call parentDom _mt[243] this[148746]))
    unknown call_tmp[669041] "expr temp" "maybe param" "maybe type" "temp"
    (669044 'move' call_tmp[669041](148532 call low _mt[243] call_tmp[669034]))
    (520138 'move' ret[520133](520137 'deref' call_tmp[669041]))
    (520135 return ret[520133])
  }
  function BaseSparseDom[148708](?).dsiHigh[148542](arg _mt[148752]:_MT[238], arg this[148750]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520142] "RVV" "temp"
    unknown call_tmp[669048] "expr temp" "maybe param" "maybe type" "temp"
    (669051 'move' call_tmp[669048](360681 call parentDom _mt[243] this[148750]))
    unknown call_tmp[669055] "expr temp" "maybe param" "maybe type" "temp"
    (669058 'move' call_tmp[669055](148545 call high _mt[243] call_tmp[669048]))
    (520147 'move' ret[520142](520146 'deref' call_tmp[669055]))
    (520144 return ret[520142])
  }
  function BaseSparseDom[148708](?).dsiStride[148555](arg _mt[148756]:_MT[238], arg this[148754]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520151] "RVV" "temp"
    unknown call_tmp[669062] "expr temp" "maybe param" "maybe type" "temp"
    (669065 'move' call_tmp[669062](360686 call parentDom _mt[243] this[148754]))
    unknown call_tmp[669069] "expr temp" "maybe param" "maybe type" "temp"
    (669072 'move' call_tmp[669069](148558 call stride _mt[243] call_tmp[669062]))
    (520156 'move' ret[520151](520155 'deref' call_tmp[669069]))
    (520153 return ret[520151])
  }
  function BaseSparseDom[148708](?).dsiAlignment[148568](arg _mt[148760]:_MT[238], arg this[148758]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520160] "RVV" "temp"
    unknown call_tmp[669076] "expr temp" "maybe param" "maybe type" "temp"
    (669079 'move' call_tmp[669076](360691 call parentDom _mt[243] this[148758]))
    unknown call_tmp[669083] "expr temp" "maybe param" "maybe type" "temp"
    (669086 'move' call_tmp[669083](148571 call alignment _mt[243] call_tmp[669076]))
    (520165 'move' ret[520160](520164 'deref' call_tmp[669083]))
    (520162 return ret[520160])
  }
  function BaseSparseDom[148708](?).dsiFirst[148581](arg _mt[148764]:_MT[238], arg this[148762]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520169] "RVV" "temp"
    (148602 call halt "dsiFirst is not implemented")
    (481602 'end of statement')
    const _tmp[148609] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[669090] "expr temp" "maybe param" "maybe type" "temp"
    (669093 'move' call_tmp[669090](385854 call rank _mt[243] this[148762]))
    unknown call_tmp[669097] "expr temp" "maybe param" "maybe type" "temp"
    (669100 'move' call_tmp[669097](385859 call idxType _mt[243] this[148762]))
    unknown call_tmp[669102] "expr temp" "maybe param" "maybe type" "temp"
    (669105 'move' call_tmp[669102](148607 call * call_tmp[669090] call_tmp[669097]))
    (543644 'default init var' _tmp[148609] call_tmp[669102])
    (148612 'end of statement')
    (520174 'move' ret[520169](520173 'deref' _tmp[148609]))
    gotoReturn _end_dsiFirst[520167] _end_dsiFirst[520167]
    (481603 'end of statement' _tmp[148609])
    label _end_dsiFirst[520167]
    (520171 return ret[520169])
  }
  function BaseSparseDom[148708](?).dsiLast[148620](arg _mt[148768]:_MT[238], arg this[148766]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520180] "RVV" "temp"
    (148641 call halt "dsiLast not implemented")
    (481605 'end of statement')
    const _tmp[148648] "dead at end of block" "const" "insert auto destroy"
    unknown call_tmp[669109] "expr temp" "maybe param" "maybe type" "temp"
    (669112 'move' call_tmp[669109](385865 call rank _mt[243] this[148766]))
    unknown call_tmp[669116] "expr temp" "maybe param" "maybe type" "temp"
    (669119 'move' call_tmp[669116](385870 call idxType _mt[243] this[148766]))
    unknown call_tmp[669121] "expr temp" "maybe param" "maybe type" "temp"
    (669124 'move' call_tmp[669121](148646 call * call_tmp[669109] call_tmp[669116]))
    (543646 'default init var' _tmp[148648] call_tmp[669121])
    (148651 'end of statement')
    (520185 'move' ret[520180](520184 'deref' _tmp[148648]))
    gotoReturn _end_dsiLast[520178] _end_dsiLast[520178]
    (481606 'end of statement' _tmp[148648])
    label _end_dsiLast[520178]
    (520182 return ret[520180])
  }
  function BaseSparseDom[148708](?).dsiAlignedLow[148659](arg _mt[148772]:_MT[238], arg this[148770]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520191] "RVV" "temp"
    unknown call_tmp[669128] "expr temp" "maybe param" "maybe type" "temp"
    (669131 'move' call_tmp[669128](360696 call parentDom _mt[243] this[148770]))
    unknown call_tmp[669135] "expr temp" "maybe param" "maybe type" "temp"
    (669138 'move' call_tmp[669135](148662 call alignedLow _mt[243] call_tmp[669128]))
    (520196 'move' ret[520191](520195 'deref' call_tmp[669135]))
    (520193 return ret[520191])
  }
  function BaseSparseDom[148708](?).dsiAlignedHigh[148672](arg _mt[148776]:_MT[238], arg this[148774]:BaseSparseDom[148708](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520200] "RVV" "temp"
    unknown call_tmp[669142] "expr temp" "maybe param" "maybe type" "temp"
    (669145 'move' call_tmp[669142](360701 call parentDom _mt[243] this[148774]))
    unknown call_tmp[669149] "expr temp" "maybe param" "maybe type" "temp"
    (669152 'move' call_tmp[669149](148675 call alignedHigh _mt[243] call_tmp[669142]))
    (520205 'move' ret[520200](520204 'deref' call_tmp[669149]))
    (520202 return ret[520200])
  }
  function BaseSparseDom[148708](?).dsiMakeIndexBuffer[148687](arg _mt[148780]:_MT[238], arg this[148778]:BaseSparseDom[148708](?), arg size[148685]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520209] "RVV" "temp"
    unknown call_tmp[669156] "expr temp" "maybe param" "maybe type" "temp"
    (669159 'move' call_tmp[669156](148692 call rank _mt[243] this[148778]))
    unknown call_tmp[669161] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (669164 'move' call_tmp[669161](747954 'new' SparseIndexBuffer[148231](?)(rank = call_tmp[669156])(obj = this[148778])(size = size[148685])))
    (520214 'move' ret[520209](520213 'deref' call_tmp[669161]))
    (520211 return ret[520209])
  }
  type BaseSparseDom[148708](?) val super[355715]:BaseDom[146767] "super class" unknown rank[148254] "param" int(64)[13] unknown idxType[148258] "type variable" unknown parentDom[148261]
  type BaseSparseDom[382296](?)
  function BaseAssociativeDom[148855].deinit[148788](arg _mt[148859]:_MT[238], arg this[148857]:BaseAssociativeDom[148855]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520216 return _void[55])
  }
  function BaseAssociativeDom[148855].dsiClear[148795](arg _mt[148863]:_MT[238], arg this[148861]:BaseAssociativeDom[148855]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148816 call halt "clear not implemented for this distribution")
    (520218 return _void[55])
  }
  function BaseAssociativeDom[148855].dsiAdd[148825](arg _mt[148867]:_MT[238], arg this[148865]:BaseAssociativeDom[148855], in arg idx[148823]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown ret[520222] "RVV" "temp"
    (148846 call compilerError "Index addition is not supported by this domain")
    (481612 'end of statement')
    (520227 'move' ret[520222](520226 'deref' 0))
    (520224 return ret[520222])
  }
  type BaseAssociativeDom[148855] val super[355719]:BaseDom[146767] "super class"
  type BaseAssociativeDom[382291](?)
  function BaseArr[149584].chpl__rvfMe[148885](arg _mt[149588]:_MT[238], arg this[149586]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520231] "RVV" "param" "temp"
    (520236 'move' ret[520231](520235 'deref' 0))
    (520233 return ret[520231])
  }
  function BaseArr[149584].isSliceArrayView[148895](arg _mt[149592]:_MT[238], arg this[149590]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520240] "RVV" "param" "temp"
    (520245 'move' ret[520240](520244 'deref' 0))
    (520242 return ret[520240])
  }
  function BaseArr[149584].isRankChangeArrayView[148905](arg _mt[149596]:_MT[238], arg this[149594]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520249] "RVV" "param" "temp"
    (520254 'move' ret[520249](520253 'deref' 0))
    (520251 return ret[520249])
  }
  function BaseArr[149584].isReindexArrayView[148915](arg _mt[149600]:_MT[238], arg this[149598]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520258] "RVV" "param" "temp"
    (520263 'move' ret[520258](520262 'deref' 0))
    (520260 return ret[520258])
  }
  function BaseArr[149584].deinit[148925](arg _mt[149604]:_MT[238], arg this[149602]:BaseArr[149584]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520265 return _void[55])
  }
  function BaseArr[149584].dsiStaticFastFollowCheck[148934](arg _mt[149608]:_MT[238], arg this[149606]:BaseArr[149584], arg leadType[148932]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520269] "RVV" "param" "temp"
    (520274 'move' ret[520269](520273 'deref' 0))
    (520271 return ret[520269])
  }
  function BaseArr[149584].dsiGetBaseDom[148944](arg _mt[149612]:_MT[238], arg this[149610]:BaseArr[149584]) : _unknown[51] "method" "primary method"
  {
    unknown ret[520278] "RVV" "temp"
    (148967 call halt "internal error: dsiGetBaseDom is not implemented")
    (481619 'end of statement')
    unknown ret[148972] "dead at end of block" "insert auto destroy" "unsafe"
    (543648 'default init var' ret[148972] unmanaged BaseDom[415448])
    (148975 'end of statement')
    (520284 'move' ret[520278](520283 'coerce' ret[148972] unmanaged BaseDom[415448]))
    gotoReturn _end_dsiGetBaseDom[520276] _end_dsiGetBaseDom[520276]
    (481620 'end of statement' ret[148972])
    label _end_dsiGetBaseDom[520276]
    (520280 return ret[520278])
  }
  { scopeless type
    unmanaged BaseDom[415448]
  }
  function BaseArr[149584].remove[148988](arg _mt[149616]:_MT[238], arg this[149614]:BaseArr[149584], param arg rmFromList[148985]:bool[10]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[520290] "RVV" "temp"
    unknown ret_arr[148991] "dead at end of block" "insert auto destroy"
    (543650 'init var' ret_arr[148991] this[149614])
    (148994 'end of statement')
    unknown ret_dom[149000] "dead at end of block" "insert auto destroy"
    (543652 'init var' ret_dom[149000] nil[44] unmanaged BaseDom?[415508])
    (149003 'end of statement')
    unknown rm_dom[149005] "dead at end of block" "insert auto destroy"
    (543654 'init var' rm_dom[149005] 0)
    (149008 'end of statement')
    unknown call_tmp[669168] "maybe param" "maybe type" "temp"
    (669171 'move' call_tmp[669168](149011 call(385886 call (partial) dsiGetBaseDom _mt[243] this[149614])))
    unknown dom[149012] "dead at end of block" "insert auto destroy"
    (543656 'init var' dom[149012] call_tmp[669168])
    (149015 'end of statement')
    unknown call_tmp[669175] "expr temp" "maybe param" "maybe type" "temp"
    (669178 'move' call_tmp[669175](149026 call _to_unmanaged this[149614]))
    unknown call_tmp[669180] "expr temp" "maybe param" "maybe type" "temp"
    (669183 'move' call_tmp[669180](149029 call(149020 call (partial) remove_arr _mt[243] dom[149012]) call_tmp[669175] rmFromList[148985]))
    (149030 call = rm_dom[149005] call_tmp[669180])
    (481622 'end of statement' rm_dom[149005] dom[149012])
    unknown call_tmp[669185] "expr temp" "maybe param" "maybe type" "temp"
    (669188 'move' call_tmp[669185](149039 call _cond_test rm_dom[149005]))
    if call_tmp[669185]
    {
      (149036 call = ret_dom[149000] dom[149012])
      (481625 'end of statement' ret_dom[149000] dom[149012])
    }
    unknown call_tmp[669190] "expr temp" "maybe param" "maybe type" "temp"
    (669193 'move' call_tmp[669190](149047 call _build_tuple ret_arr[148991] ret_dom[149000]))
    (520295 'move' ret[520290](520294 'deref' call_tmp[669190]))
    gotoReturn _end_remove[520288] _end_remove[520288]
    (481628 'end of statement' ret_arr[148991] ret_dom[149000])
    label _end_remove[520288]
    (520292 return ret[520290])
  }
  function BaseArr[149584].dsiElementInitializationComplete[149055](arg _mt[149620]:_MT[238], arg this[149618]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149076 call halt "dsiElementInitializationComplete must be defined")
    (520299 return _void[55])
  }
  function BaseArr[149584].dsiElementDeinitializationComplete[149083](arg _mt[149624]:_MT[238], arg this[149622]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149104 call halt "dsiElementDeinitializationComplete must be defined")
    (520301 return _void[55])
  }
  function BaseArr[149584].dsiDestroyArr[149115](arg _mt[149628]:_MT[238], arg this[149626]:BaseArr[149584], arg deinitElts[149112]:bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149136 call halt "dsiDestroyArr must be defined")
    (520303 return _void[55])
  }
  function BaseArr[149584].dsiReallocate[149147](arg _mt[149632]:_MT[238], arg this[149630]:BaseArr[149584], arg d[149144]:_domain[125908](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149168 call halt "reallocating not supported for this array type")
    (520305 return _void[55])
  }
  function BaseArr[149584].dsiPostReallocate[149175](arg _mt[149636]:_MT[238], arg this[149634]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520307 return _void[55])
  }
  function BaseArr[149584]._purge[149186](arg _mt[149640]:_MT[238], arg this[149638]:BaseArr[149584], arg ind[149183]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149207 call halt "purging not supported for this array type")
    (520309 return _void[55])
  }
  function BaseArr[149584]._resize[149218](arg _mt[149644]:_MT[238], arg this[149642]:BaseArr[149584], arg length[149215]:int(64)[13], arg old_map[149220]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149241 call halt "resizing not supported for this array type")
    (520311 return _void[55])
  }
  function BaseArr[149584].sparseShiftArray[149250](arg _mt[149648]:_MT[238], arg this[149646]:BaseArr[149584], arg shiftrange[149248]:_any[178](?), arg initrange[149252]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149273 call halt "sparseGrowDomain not supported for non-sparse arrays")
    (520313 return _void[55])
  }
  function BaseArr[149584].sparseShiftArrayBack[149282](arg _mt[149652]:_MT[238], arg this[149650]:BaseArr[149584], arg shiftrange[149280]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149303 call halt "sparseShiftArrayBack not supported for non-sparse arrays")
    (520315 return _void[55])
  }
  function BaseArr[149584].sparseBulkShiftArray[149312](arg _mt[149656]:_MT[238], arg this[149654]:BaseArr[149584], arg shiftMap[149310]:_any[178](?), arg oldnnz[149314]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149335 call halt "sparseBulkShiftArray not supported for non-sparse arrays")
    (520317 return _void[55])
  }
  function BaseArr[149584]._defaultInitSlot[149346](arg _mt[149660]:_MT[238], arg this[149658]:BaseArr[149584], arg slot[149343]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149367 call halt "_defaultInitSlot() not supported for non-associative arrays")
    (520319 return _void[55])
  }
  function BaseArr[149584]._deinitSlot[149378](arg _mt[149664]:_MT[238], arg this[149662]:BaseArr[149584], arg slot[149375]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149399 call halt "_deinitSlot() not supported for non-associative arrays")
    (520321 return _void[55])
  }
  function BaseArr[149584]._startRehash[149410](arg _mt[149668]:_MT[238], arg this[149666]:BaseArr[149584], arg newSize[149407]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149431 call halt "_startRehash() not supported for non-associative arrays")
    (520323 return _void[55])
  }
  function BaseArr[149584]._finishRehash[149442](arg _mt[149672]:_MT[238], arg this[149670]:BaseArr[149584], arg oldSize[149439]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149463 call halt "_finishRehash() not supported for non-associative arrays")
    (520325 return _void[55])
  }
  function BaseArr[149584]._moveElementDuringRehash[149474](arg _mt[149676]:_MT[238], arg this[149674]:BaseArr[149584], arg oldslot[149471]:int(64)[13], arg newslot[149477]:int(64)[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149499 call halt "_moveElementDuringRehash() not supported for non-associative arrays")
    (520327 return _void[55])
  }
  function BaseArr[149584].dsiSupportsAlignedFollower[149506](arg _mt[149680]:_MT[238], arg this[149678]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520331] "RVV" "param" "temp"
    (520336 'move' ret[520331](520335 'deref' 0))
    (520333 return ret[520331])
  }
  function BaseArr[149584].dsiSupportsPrivatization[149516](arg _mt[149684]:_MT[238], arg this[149682]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520340] "RVV" "param" "temp"
    (520345 'move' ret[520340](520344 'deref' 0))
    (520342 return ret[520340])
  }
  function BaseArr[149584].dsiRequiresPrivatization[149526](arg _mt[149688]:_MT[238], arg this[149686]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520349] "RVV" "param" "temp"
    (520354 'move' ret[520349](520353 'deref' 0))
    (520351 return ret[520349])
  }
  function BaseArr[149584].dsiDisplayRepresentation[149536](arg _mt[149692]:_MT[238], arg this[149690]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149541 call writeln "<no way to display representation>")
    (520356 return _void[55])
  }
  function BaseArr[415346](?).isDefaultRectangular[149548](arg _mt[149696]:_MT[238], arg this[149694]:BaseArr[415346](?)) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520360] "RVV" "param" "temp"
    (520365 'move' ret[520360](520364 'deref' 0))
    (520362 return ret[520360])
  }
  function BaseArr[149584].isDefaultRectangular[149558](arg _mt[149700]:_MT[238], arg this[149698]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520369] "RVV" "param" "temp"
    (520374 'move' ret[520369](520373 'deref' 0))
    (520371 return ret[520369])
  }
  function BaseArr[149584].doiCanBulkTransferRankChange[149568](arg _mt[149704]:_MT[238], arg this[149702]:BaseArr[149584]) param : _unknown[51] "method" "primary method"
  {
    unknown ret[520378] "RVV" "param" "temp"
    (520383 'move' ret[520378](520382 'deref' 0))
    (520380 return ret[520378])
  }
  function BaseArr[149584].decEltCountsIfNeeded[149578](arg _mt[149708]:_MT[238], arg this[149706]:BaseArr[149584]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (520385 return _void[55])
  }
  type BaseArr[149584] val super[355707]:object[22] "super class" val pid[148873]:int(64)[13] nullPid[113718] int(64)[13] val _decEltRefCounts[148879]:bool[10] 0 bool[10]
  type unmanaged BaseArr?[415529]
  type BaseArr?[415526](?)
  type unmanaged BaseArr[415496]
  type BaseArr[415346](?)
  type BaseArr[382363](?)
  function AbsBaseArr[149740](?).decEltCountsIfNeeded[149719](arg _mt[149744]:_MT[238], arg this[149742]:AbsBaseArr[149740](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669197] "expr temp" "maybe param" "maybe type" "temp"
    (669200 'move' call_tmp[669197](385900 call _decEltRefCounts _mt[243] this[149742]))
    unknown call_tmp[669202] "expr temp" "maybe param" "maybe type" "temp"
    (669205 'move' call_tmp[669202](149732 call _cond_test call_tmp[669197]))
    if call_tmp[669202]
    {
      unknown call_tmp[669207] "expr temp" "maybe param" "maybe type" "temp"
      (669210 'move' call_tmp[669207](149726 call _to_unmanaged this[149742]))
      unknown call_tmp[669214] "expr temp" "maybe param" "maybe type" "temp"
      (669217 'move' call_tmp[669214](385906 call eltType _mt[243] this[149742]))
      (149729 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669207] call_tmp[669214])
    }
    (520387 return _void[55])
  }
  type AbsBaseArr[149740](?) val super[355721]:BaseArr[149584] "super class" unknown eltType[149714] "type variable"
  function BaseArrOverRectangularDom[149805](?).dsiReallocate[149780](arg _mt[149809]:_MT[238], arg this[149807]:BaseArrOverRectangularDom[149805](?), arg bounds[149777] :
  unknown call_tmp[669221] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149785 call halt "reallocating not supported for this array type")
    (520389 return _void[55])
  }
  function BaseArrOverRectangularDom[149805](?).dsiPostReallocate[149792](arg _mt[149813]:_MT[238], arg this[149811]:BaseArrOverRectangularDom[149805](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (520391 return _void[55])
  }
  function BaseArrOverRectangularDom[149805](?).deinit[149799](arg _mt[149817]:_MT[238], arg this[149815]:BaseArrOverRectangularDom[149805](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520393 return _void[55])
  }
  type BaseArrOverRectangularDom[149805](?) val super[355709]:BaseArr[149584] "super class" unknown rank[149751] "param" int(64)[13] unknown idxType[149755] "type variable" unknown stridable[149759] "param" bool[10]
  type BaseArrOverRectangularDom[385574](?)
  function BaseRectangularArr[149856](?).deinit[149828](arg _mt[149860]:_MT[238], arg this[149858]:BaseRectangularArr[149856](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520395 return _void[55])
  }
  function BaseRectangularArr[149856](?).decEltCountsIfNeeded[149835](arg _mt[149864]:_MT[238], arg this[149862]:BaseRectangularArr[149856](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669247] "expr temp" "maybe param" "maybe type" "temp"
    (669250 'move' call_tmp[669247](385927 call _decEltRefCounts _mt[243] this[149862]))
    unknown call_tmp[669252] "expr temp" "maybe param" "maybe type" "temp"
    (669255 'move' call_tmp[669252](149848 call _cond_test call_tmp[669247]))
    if call_tmp[669252]
    {
      unknown call_tmp[669257] "expr temp" "maybe param" "maybe type" "temp"
      (669260 'move' call_tmp[669257](149842 call _to_unmanaged this[149862]))
      unknown call_tmp[669264] "expr temp" "maybe param" "maybe type" "temp"
      (669267 'move' call_tmp[669264](385933 call eltType _mt[243] this[149862]))
      (149845 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[669257] call_tmp[669264])
    }
    (520397 return _void[55])
  }
  type BaseRectangularArr[149856](?) val super[355711]:BaseArrOverRectangularDom[149805](?) "super class" unknown eltType[149823] "type variable"
  function BaseSparseArr[149900](?).dsiGetBaseDom[149884](arg _mt[149904]:_MT[238], arg this[149902]:BaseSparseArr[149900](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    unknown ret[520401] "RVV" "temp"
    unknown call_tmp[669271] "expr temp" "maybe param" "maybe type" "temp"
    (669274 'move' call_tmp[669271](385938 call dom _mt[243] this[149902]))
    (520406 'move' ret[520401](520405 'deref' call_tmp[669271]))
    (520403 return ret[520401])
  }
  function BaseSparseArr[149900](?).deinit[149894](arg _mt[149908]:_MT[238], arg this[149906]:BaseSparseArr[149900](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520408 return _void[55])
  }
  type BaseSparseArr[149900](?) val super[355723]:AbsBaseArr[149740](?) "super class" unknown rank[149871] "param" int(64)[13] unknown idxType[149875] "type variable" unknown dom[149878]
  function BaseSparseArrImpl[150571](?).init[149934](arg _mt[150575]:_MT[238], arg this[150573]:BaseSparseArrImpl[150571](?), arg eltType[149932]:_any[178](?), param arg rank[149937]:int(64)[13], arg idxType[149940]:_any[178](?), arg dom[149942]:_any[178](?), param arg initElts[149945]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[461859] "temporary of super field" "temp"
    (461861 'move' super_tmp[461859](461858 '.v' this[150573] c"super"))
    (149961 call(149949 call (partial) init _mt[243] super_tmp[461859])(eltType = eltType[149932])(rank = rank[149937])(idxType = idxType[149940])(dom = dom[149942]))
    (481656 'end of statement')
    unknown tmp[461864] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[492367] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[669278] "expr temp" "maybe param" "maybe type" "temp"
      (669281 'move' call_tmp[669278](461866 '.v' this[150573] c"super"))
      (492371 'move' call_type_tmp[492367](461869 'typeof' call_tmp[669278]))
    }
    (461870 'move' tmp[461864] call_type_tmp[492367])
    unknown call_tmp[669283] "maybe param" "maybe type" "temp"
    (669286 'move' call_tmp[669283](461875 'cast' tmp[461864] this[150573]))
    unknown chpl__thisAsParent[461872] "dead at end of block" "insert auto destroy" "temp"
    (543658 'init var' chpl__thisAsParent[461872] call_tmp[669283] tmp[461864])
    (461878 'setcid' chpl__thisAsParent[461872])
    (481657 'end of statement')
    unknown call_tmp[669288] "expr temp" "maybe param" "maybe type" "temp"
    (669291 'move' call_tmp[669288](149969 '.' this[150573] c"dom"))
    unknown call_tmp[669295] "expr temp" "maybe param" "maybe type" "temp"
    (669298 'move' call_tmp[669295](149972 call nnzDom _mt[243] call_tmp[669288]))
    unknown call_tmp[669302] "maybe param" "maybe type" "temp"
    (669305 'move' call_tmp[669302](149982 call(149975 call (partial) buildArray _mt[243] call_tmp[669295]) eltType[149932](initElts = initElts[149945])))
    unknown call_tmp[669307] "expr temp" "maybe param" "maybe type" "temp"
    (669310 'move' call_tmp[669307](461897 '.' this[150573] c"dom"))
    unknown call_tmp[669314] "expr temp" "maybe param" "maybe type" "temp"
    (669317 'move' call_tmp[669314](461887 call nnzDom _mt[243] call_tmp[669307]))
    unknown call_tmp[669319] "expr temp" "maybe param" "maybe type" "temp"
    (669322 'move' call_tmp[669319](461885 call chpl__ensureDomainExpr call_tmp[669314]))
    unknown call_tmp[669324] "expr temp" "maybe param" "maybe type" "temp"
    (669327 'move' call_tmp[669324](461900 '.v' this[150573] c"eltType"))
    unknown call_tmp[669329] "maybe param" "maybe type" "temp"
    (669332 'move' call_tmp[669329](461883 call chpl__buildArrayRuntimeType call_tmp[669319] call_tmp[669324]))
    unknown tmp[461880] "temp"
    (461891 'init var' tmp[461880] call_tmp[669302] call_tmp[669329])
    (461893 'init field' this[150573] c"data" tmp[461880])
    (481658 'end of statement')
    unknown tmp[461904] "temp"
    unknown call_tmp[669334] "expr temp" "maybe param" "maybe type" "temp"
    (669337 'move' call_tmp[669334](461913 '.v' this[150573] c"eltType"))
    (461907 'default init var' tmp[461904] call_tmp[669334])
    (461909 '.=' this[150573] c"irv" tmp[461904])
    (481659 'end of statement')
    (461916 'setcid' this[150573])
    (520410 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).deinit[149990](arg _mt[150579]:_MT[238], arg this[150577]:BaseSparseArrImpl[150571](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (520412 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiElementInitializationComplete[149997](arg _mt[150583]:_MT[238], arg this[150581]:BaseSparseArrImpl[150571](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669341] "expr temp" "maybe param" "maybe type" "temp"
    (669344 'move' call_tmp[669341](360717 call data _mt[243] this[150581]))
    (150004 call(150000 call (partial) dsiElementInitializationComplete _mt[243] call_tmp[669341]))
    (520414 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiElementDeinitializationComplete[150011](arg _mt[150587]:_MT[238], arg this[150585]:BaseSparseArrImpl[150571](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669350] "expr temp" "maybe param" "maybe type" "temp"
    (669353 'move' call_tmp[669350](360722 call data _mt[243] this[150585]))
    (150018 call(150014 call (partial) dsiElementDeinitializationComplete _mt[243] call_tmp[669350]))
    (520416 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).dsiDestroyArr[150029](arg _mt[150591]:_MT[238], arg this[150589]:BaseSparseArrImpl[150571](?), arg deinitElts[150026]:bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[669357] "expr temp" "maybe param" "maybe type" "temp"
    (669360 'move' call_tmp[669357](150037 call _cond_test deinitElts[150026]))
    if call_tmp[669357]
    {
      unknown call_tmp[669364] "expr temp" "maybe param" "maybe type" "temp"
      (669367 'move' call_tmp[669364](385951 call data _mt[243] this[150589]))
      (150035 call _deinitElements call_tmp[669364])
    }
    (520418 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).IRV[150052](arg _mt[150595]:_MT[238], arg this[150593]:BaseSparseArrImpl[150571](?)) ref : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[520422] "RVV" "temp"
    unknown call_tmp[669371] "expr temp" "maybe param" "maybe type" "temp"
    (669374 'move' call_tmp[669371](385959 call irv _mt[243] this[150593]))
    (520427 'move' ret[520422](520426 'addr of' call_tmp[669371]))
    (520424 return ret[520422])
  }
  function BaseSparseArrImpl[150571](?).sparseBulkShiftArray[150064](arg _mt[150599]:_MT[238], arg this[150597]:BaseSparseArrImpl[150571](?), arg shiftMap[150062]:_any[178](?), arg oldnnz[150066]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown newIdx[150069] "dead at end of block" "insert auto destroy"
    (543660 'default init var' newIdx[150069] int(64)[13])
    (150072 'end of statement')
    unknown prevNewIdx[150075] "dead at end of block" "insert auto destroy"
    (543662 'init var' prevNewIdx[150075] 1)
    (150078 'end of statement')
    unknown call_tmp[669378] "expr temp" "maybe param" "maybe type" "temp"
    (669381 'move' call_tmp[669378](150081 call _dom _mt[243] shiftMap[150062]))
    unknown call_tmp[669385] "expr temp" "maybe param" "maybe type" "temp"
    (669388 'move' call_tmp[669385](150084 call high _mt[243] call_tmp[669378]))
    unknown call_tmp[669390] "expr temp" "maybe param" "maybe type" "temp"
    (669393 'move' call_tmp[669390](150088 call + call_tmp[669385] 1))
    unknown call_tmp[669397] "expr temp" "maybe param" "maybe type" "temp"
    (669400 'move' call_tmp[669397](360728 call dom _mt[243] this[150597]))
    unknown call_tmp[669404] "expr temp" "maybe param" "maybe type" "temp"
    (669407 'move' call_tmp[669404](150091 call nnzDom _mt[243] call_tmp[669397]))
    unknown call_tmp[669411] "expr temp" "maybe param" "maybe type" "temp"
    (669414 'move' call_tmp[669411](150094 call high _mt[243] call_tmp[669404]))
    unknown call_tmp[669416] "expr temp" "maybe param" "maybe type" "temp"
    (669419 'move' call_tmp[669416](150097 call chpl_build_bounded_range call_tmp[669390] call_tmp[669411]))
    Forall {
      induction variables:
        
        unknown i[150108] "index var" "insert auto destroy"
      iterated expressions:
        call_tmp[669416]
      shadow variables:
      other variables
        forall body
      {
        unknown call_tmp[669423] "expr temp" "maybe param" "maybe type" "temp"
        (669426 'move' call_tmp[669423](150102 call(385964 call (partial) data _mt[243] this[150597]) i[150108]))
        unknown call_tmp[669430] "expr temp" "maybe param" "maybe type" "temp"
        (669433 'move' call_tmp[669430](385970 call irv _mt[243] this[150597]))
        (150104 call = call_tmp[669423] call_tmp[669430])
        (481665 'end of statement' i[150108])
      }
    }
    {
      unknown _indexOfInterest[150231] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150232] "expr temp" "temp"
      unknown call_tmp[669435] "expr temp" "maybe param" "maybe type" "temp"
      (669438 'move' call_tmp[669435](150256 call - 1))
      unknown call_tmp[669440] "expr temp" "maybe param" "maybe type" "temp"
      (669443 'move' call_tmp[669440](150260 call chpl_direct_range_iter 1 oldnnz[150066] call_tmp[669435]))
      unknown call_tmp[669445] "expr temp" "maybe param" "maybe type" "temp"
      (669448 'move' call_tmp[669445](150249 call _getIterator call_tmp[669440]))
      unknown call_tmp[669452] "expr temp" "maybe param" "maybe type" "temp"
      (669455 'move' call_tmp[669452](150267 call _dom _mt[243] shiftMap[150062]))
      unknown call_tmp[669459] "expr temp" "maybe param" "maybe type" "temp"
      (669462 'move' call_tmp[669459](150271 call(150265 call (partial) dim _mt[243] call_tmp[669452]) 0))
      unknown call_tmp[669464] "expr temp" "maybe param" "maybe type" "temp"
      (669467 'move' call_tmp[669464](150274 call - 1))
      unknown call_tmp[669469] "expr temp" "maybe param" "maybe type" "temp"
      (669472 'move' call_tmp[669469](150263 call chpl_by call_tmp[669459] call_tmp[669464]))
      unknown call_tmp[669474] "expr temp" "maybe param" "maybe type" "temp"
      (669477 'move' call_tmp[669474](150276 call _getIterator call_tmp[669469]))
      (150290 'move' _iterator[150232](150142 call _build_tuple call_tmp[669445] call_tmp[669474]))
      Defer
      {
        {
          (150320 call _freeIterator _iterator[150232])
        }
      }
      { scopeless type
        (150295 'move' _indexOfInterest[150231](150292 call iteratorIndex _iterator[150232]))
      }
      ForLoop[150233]
      {
        (150300 call _check_tuple_var_decl _indexOfInterest[150231] 2)
        (481668 'end of statement')
        unknown i[150306] "index var" "insert auto destroy"
        (481669 'end of statement')
        (150308 'move' i[150306](150304 call _indexOfInterest[150231] 0))
        (481670 'end of statement' i[150306])
        unknown _newIdx[150313] "index var" "insert auto destroy"
        (481672 'end of statement')
        (150315 'move' _newIdx[150313](150311 call _indexOfInterest[150231] 1))
        (481673 'end of statement' _newIdx[150313])
        {
          unknown call_tmp[669479] "expr temp" "maybe param" "maybe type" "temp"
          (669482 'move' call_tmp[669479](150147 call shiftMap[150062] _newIdx[150313]))
          (150148 call = newIdx[150069] call_tmp[669479])
          (481675 'end of statement' newIdx[150069] _newIdx[150313])
          unknown call_tmp[669486] "expr temp" "maybe param" "maybe type" "temp"
          (669489 'move' call_tmp[669486](150155 call(385978 call (partial) data _mt[243] this[150597]) newIdx[150069]))
          unknown call_tmp[669493] "expr temp" "maybe param" "maybe type" "temp"
          (669496 'move' call_tmp[669493](150159 call(385984 call (partial) data _mt[243] this[150597]) i[150306]))
          (150160 call = call_tmp[669486] call_tmp[669493])
          (481678 'end of statement' newIdx[150069] i[150306])
          {
            unknown _indexOfInterest[150182] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[150183] "expr temp" "temp"
            unknown call_tmp[669498] "expr temp" "maybe param" "maybe type" "temp"
            (669501 'move' call_tmp[669498](150196 call + newIdx[150069] 1))
            unknown call_tmp[669503] "expr temp" "maybe param" "maybe type" "temp"
            (669506 'move' call_tmp[669503](150200 call - prevNewIdx[150075] 1))
            unknown call_tmp[669508] "expr temp" "maybe param" "maybe type" "temp"
            (669511 'move' call_tmp[669508](150203 call chpl_direct_range_iter call_tmp[669498] call_tmp[669503] 1))
            (150192 'move' _iterator[150183](150190 call _getIterator call_tmp[669508]))
            Defer
            {
              {
                (150219 call _freeIterator _iterator[150183])
              }
            }
            { scopeless type
              (150208 'move' _indexOfInterest[150182](150205 call iteratorIndex _iterator[150183]))
            }
            ForLoop[150184]
            {
              unknown emptyIndex[150212] "index var" "insert auto destroy"
              (481682 'end of statement')
              (150214 'move' emptyIndex[150212] _indexOfInterest[150182])
              (481683 'end of statement' emptyIndex[150212])
              unknown call_tmp[669515] "expr temp" "maybe param" "maybe type" "temp"
              (669518 'move' call_tmp[669515](150177 call(385990 call (partial) data _mt[243] this[150597]) emptyIndex[150212]))
              unknown call_tmp[669522] "expr temp" "maybe param" "maybe type" "temp"
              (669525 'move' call_tmp[669522](385996 call irv _mt[243] this[150597]))
              (150179 call = call_tmp[669515] call_tmp[669522])
              (481685 'end of statement' emptyIndex[150212])
              label _continueLabel[150187]
              _indexOfInterest[150182]
              _iterator[150183]
            }
            label _breakLabel[150188]
          }
          (150228 call = prevNewIdx[150075] newIdx[150069])
          (481687 'end of statement' prevNewIdx[150075] newIdx[150069])
        }
        label _continueLabel[150236]
        _indexOfInterest[150231]
        _iterator[150232]
      }
      label _breakLabel[150237]
    }
    {
      unknown _indexOfInterest[150343] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150344] "expr temp" "temp"
      unknown call_tmp[669527] "expr temp" "maybe param" "maybe type" "temp"
      (669530 'move' call_tmp[669527](150358 call - prevNewIdx[150075] 1))
      unknown call_tmp[669532] "expr temp" "maybe param" "maybe type" "temp"
      (669535 'move' call_tmp[669532](150361 call chpl_direct_range_iter 1 call_tmp[669527] 1))
      (150353 'move' _iterator[150344](150351 call _getIterator call_tmp[669532]))
      Defer
      {
        {
          (150377 call _freeIterator _iterator[150344])
        }
      }
      { scopeless type
        (150366 'move' _indexOfInterest[150343](150363 call iteratorIndex _iterator[150344]))
      }
      ForLoop[150345]
      {
        unknown i[150370] "index var" "insert auto destroy"
        (481691 'end of statement')
        (150372 'move' i[150370] _indexOfInterest[150343])
        (481692 'end of statement' i[150370])
        unknown call_tmp[669539] "expr temp" "maybe param" "maybe type" "temp"
        (669542 'move' call_tmp[669539](150338 call(386006 call (partial) data _mt[243] this[150597]) i[150370]))
        unknown call_tmp[669546] "expr temp" "maybe param" "maybe type" "temp"
        (669549 'move' call_tmp[669546](386012 call irv _mt[243] this[150597]))
        (150340 call = call_tmp[669539] call_tmp[669546])
        (481694 'end of statement' i[150370])
        label _continueLabel[150348]
        _indexOfInterest[150343]
        _iterator[150344]
      }
      label _breakLabel[150349]
    }
    (520429 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).sparseShiftArray[150390](arg _mt[150603]:_MT[238], arg this[150601]:BaseSparseArrImpl[150571](?), arg shiftrange[150388]:_any[178](?), arg initrange[150392]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150405] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150406] "expr temp" "temp"
      (150415 'move' _iterator[150406](150413 call _getIterator initrange[150392]))
      Defer
      {
        {
          (150431 call _freeIterator _iterator[150406])
        }
      }
      { scopeless type
        (150420 'move' _indexOfInterest[150405](150417 call iteratorIndex _iterator[150406]))
      }
      ForLoop[150407]
      {
        unknown i[150424] "index var" "insert auto destroy"
        (481697 'end of statement')
        (150426 'move' i[150424] _indexOfInterest[150405])
        (481698 'end of statement' i[150424])
        {
          unknown call_tmp[669553] "expr temp" "maybe param" "maybe type" "temp"
          (669556 'move' call_tmp[669553](150399 call(386019 call (partial) data _mt[243] this[150601]) i[150424]))
          unknown call_tmp[669560] "expr temp" "maybe param" "maybe type" "temp"
          (669563 'move' call_tmp[669560](386025 call irv _mt[243] this[150601]))
          (150401 call = call_tmp[669553] call_tmp[669560])
          (481700 'end of statement' i[150424])
        }
        label _continueLabel[150410]
        _indexOfInterest[150405]
        _iterator[150406]
      }
      label _breakLabel[150411]
    }
    {
      unknown _indexOfInterest[150461] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150462] "expr temp" "temp"
      unknown call_tmp[669565] "expr temp" "maybe param" "maybe type" "temp"
      (669568 'move' call_tmp[669565](150442 call - 1))
      unknown call_tmp[669570] "expr temp" "maybe param" "maybe type" "temp"
      (669573 'move' call_tmp[669570](150444 call chpl_by shiftrange[150388] call_tmp[669565]))
      (150471 'move' _iterator[150462](150469 call _getIterator call_tmp[669570]))
      Defer
      {
        {
          (150491 call _freeIterator _iterator[150462])
        }
      }
      { scopeless type
        (150480 'move' _indexOfInterest[150461](150477 call iteratorIndex _iterator[150462]))
      }
      ForLoop[150463]
      {
        unknown i[150484] "index var" "insert auto destroy"
        (481703 'end of statement')
        (150486 'move' i[150484] _indexOfInterest[150461])
        (481704 'end of statement' i[150484])
        {
          unknown call_tmp[669577] "expr temp" "maybe param" "maybe type" "temp"
          (669580 'move' call_tmp[669577](150449 call + i[150484] 1))
          unknown call_tmp[669582] "expr temp" "maybe param" "maybe type" "temp"
          (669585 'move' call_tmp[669582](150452 call(386031 call (partial) data _mt[243] this[150601]) call_tmp[669577]))
          unknown call_tmp[669589] "expr temp" "maybe param" "maybe type" "temp"
          (669592 'move' call_tmp[669589](150456 call(386037 call (partial) data _mt[243] this[150601]) i[150484]))
          (150457 call = call_tmp[669582] call_tmp[669589])
          (481706 'end of statement' i[150484] i[150484])
        }
        label _continueLabel[150466]
        _indexOfInterest[150461]
        _iterator[150462]
      }
      label _breakLabel[150467]
    }
    unknown call_tmp[669598] "expr temp" "maybe param" "maybe type" "temp"
    (669601 'move' call_tmp[669598](150500 call low _mt[243] shiftrange[150388]))
    unknown call_tmp[669603] "expr temp" "maybe param" "maybe type" "temp"
    (669606 'move' call_tmp[669603](150504 call(386043 call (partial) data _mt[243] this[150601]) call_tmp[669598]))
    unknown call_tmp[669610] "expr temp" "maybe param" "maybe type" "temp"
    (669613 'move' call_tmp[669610](386048 call irv _mt[243] this[150601]))
    (150506 call = call_tmp[669603] call_tmp[669610])
    (520431 return _void[55])
  }
  function BaseSparseArrImpl[150571](?).sparseShiftArrayBack[150515](arg _mt[150607]:_MT[238], arg this[150605]:BaseSparseArrImpl[150571](?), arg shiftrange[150513]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150534] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150535] "expr temp" "temp"
      (150544 'move' _iterator[150535](150542 call _getIterator shiftrange[150513]))
      Defer
      {
        {
          (150560 call _freeIterator _iterator[150535])
        }
      }
      { scopeless type
        (150549 'move' _indexOfInterest[150534](150546 call iteratorIndex _iterator[150535]))
      }
      ForLoop[150536]
      {
        unknown i[150553] "index var" "insert auto destroy"
        (481711 'end of statement')
        (150555 'move' i[150553] _indexOfInterest[150534])
        (481712 'end of statement' i[150553])
        {
          unknown call_tmp[669617] "expr temp" "maybe param" "maybe type" "temp"
          (669620 'move' call_tmp[669617](150522 call(386054 call (partial) data _mt[243] this[150605]) i[150553]))
          unknown call_tmp[669624] "expr temp" "maybe param" "maybe type" "temp"
          (669627 'move' call_tmp[669624](150526 call + i[150553] 1))
          unknown call_tmp[669629] "expr temp" "maybe param" "maybe type" "temp"
          (669632 'move' call_tmp[669629](150529 call(386060 call (partial) data _mt[243] this[150605]) call_tmp[669624]))
          (150530 call = call_tmp[669617] call_tmp[669629])
          (481714 'end of statement' i[150553] i[150553])
        }
        label _continueLabel[150539]
        _indexOfInterest[150534]
        _iterator[150535]
      }
      label _breakLabel[150540]
    }
    (520433 return _void[55])
  }
  type BaseSparseArrImpl[150571](?) val super[355725]:BaseSparseArr[149900](?) "delay instantiation" "super class" unknown data[149926] "local field" "unsafe"(149924 call chpl__buildArrayRuntimeType(149922 call chpl__ensureDomainExpr(149917 call nnzDom _mt[243] dom[149878])) eltType[149714]) unknown irv[150046] eltType[149714]
  function _delete_dist[150617](arg dist[150614]:unmanaged BaseDist[415511], arg privatized[150620]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150630 call(150626 call (partial) dsiDestroyDist _mt[243] dist[150614]))
    (481717 'end of statement')
    unknown tmp[427195] "maybe param" "temp"
    (427206 'move' tmp[427195] 1)
    unknown call_tmp[669638] "expr temp" "maybe param" "maybe type" "temp"
    (669641 'move' call_tmp[669638](427208 call _cond_invalid tmp[427195]))
    if call_tmp[669638]
    {
      (427211 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568714] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568715] "maybe param" "temp"
    unknown call_tmp[669643] "expr temp" "maybe param" "maybe type" "temp"
    (669646 'move' call_tmp[669643](427196 call isTrue tmp[427195]))
    (568720 'move' tmp[568715](568718 call _cond_test call_tmp[669643]))
    if tmp[568715]
    {
      unknown tmp[568722] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568724 'move' tmp[568722](427199 call isTrue privatized[150620]))
      (568729 'move' tmp[568714](568726 '_paramFoldLogical' tmp[568715] tmp[568722]))
    }
    {
      (568734 'move' tmp[568714](568731 '_paramFoldLogical' tmp[568715] 0))
    }
    unknown call_tmp[669648] "expr temp" "maybe param" "maybe type" "temp"
    (669651 'move' call_tmp[669648](150647 call _cond_test tmp[568714]))
    if call_tmp[669648]
    {
      unknown call_tmp[669655] "expr temp" "maybe param" "maybe type" "temp"
      (669658 'move' call_tmp[669655](150639 call pid _mt[243] dist[150614]))
      (150644 call _freePrivatizedClass call_tmp[669655] dist[150614])
    }
    (150653 call chpl__delete dist[150614])
    (520435 return _void[55])
  }
  function _delete_dom[150662](arg dom[150660]:_any[178](?), arg privatized[150665]:bool[10]) : _unknown[51] "no return value for void"
  {
    (150675 call(150671 call (partial) dsiDestroyDom _mt[243] dom[150660]))
    (481721 'end of statement')
    unknown tmp[427216] "maybe param" "temp"
    (427227 'move' tmp[427216] 1)
    unknown call_tmp[669662] "expr temp" "maybe param" "maybe type" "temp"
    (669665 'move' call_tmp[669662](427229 call _cond_invalid tmp[427216]))
    if call_tmp[669662]
    {
      (427232 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568741] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568742] "maybe param" "temp"
    unknown call_tmp[669667] "expr temp" "maybe param" "maybe type" "temp"
    (669670 'move' call_tmp[669667](427217 call isTrue tmp[427216]))
    (568747 'move' tmp[568742](568745 call _cond_test call_tmp[669667]))
    if tmp[568742]
    {
      unknown tmp[568749] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568751 'move' tmp[568749](427220 call isTrue privatized[150665]))
      (568756 'move' tmp[568741](568753 '_paramFoldLogical' tmp[568742] tmp[568749]))
    }
    {
      (568761 'move' tmp[568741](568758 '_paramFoldLogical' tmp[568742] 0))
    }
    unknown call_tmp[669672] "expr temp" "maybe param" "maybe type" "temp"
    (669675 'move' call_tmp[669672](150692 call _cond_test tmp[568741]))
    if call_tmp[669672]
    {
      unknown call_tmp[669679] "expr temp" "maybe param" "maybe type" "temp"
      (669682 'move' call_tmp[669679](150684 call pid _mt[243] dom[150660]))
      (150689 call _freePrivatizedClass call_tmp[669679] dom[150660])
    }
    (150698 call chpl__delete dom[150660])
    (520437 return _void[55])
  }
  function _delete_arr[150710](arg arr[150707]:unmanaged BaseArr[415496], param arg privatized[150713]:bool[10], arg deinitElts[150717] :
  1 =
  1) : _unknown[51] "no return value for void"
  {
    (150729 call(150723 call (partial) dsiDestroyArr _mt[243] arr[150707])(deinitElts = deinitElts[150717]))
    (481725 'end of statement')
    (150739 call(150735 call (partial) decEltCountsIfNeeded _mt[243] arr[150707]))
    (481726 'end of statement')
    unknown tmp[427237] "maybe param" "temp"
    (427248 'move' tmp[427237] 1)
    unknown call_tmp[669688] "expr temp" "maybe param" "maybe type" "temp"
    (669691 'move' call_tmp[669688](427250 call _cond_invalid tmp[427237]))
    if call_tmp[669688]
    {
      (427253 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[568768] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568769] "maybe param" "temp"
    unknown call_tmp[669693] "expr temp" "maybe param" "maybe type" "temp"
    (669696 'move' call_tmp[669693](427238 call isTrue tmp[427237]))
    (568774 'move' tmp[568769](568772 call _cond_test call_tmp[669693]))
    if tmp[568769]
    {
      unknown tmp[568776] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (568778 'move' tmp[568776](427241 call isTrue privatized[150713]))
      (568783 'move' tmp[568768](568780 '_paramFoldLogical' tmp[568769] tmp[568776]))
    }
    {
      (568788 'move' tmp[568768](568785 '_paramFoldLogical' tmp[568769] 0))
    }
    unknown call_tmp[669698] "expr temp" "maybe param" "maybe type" "temp"
    (669701 'move' call_tmp[669698](150755 call _cond_test tmp[568768]))
    if call_tmp[669698]
    {
      unknown call_tmp[669705] "expr temp" "maybe param" "maybe type" "temp"
      (669708 'move' call_tmp[669705](150747 call pid _mt[243] arr[150707]))
      (150752 call _freePrivatizedClass call_tmp[669705] arr[150707])
    }
    (150761 call chpl__delete arr[150707])
    (520439 return _void[55])
  }
  function chpl_assignDomainWithGetSetIndices[150773](arg lhs[150770]:_any[178](?), arg rhs[150776]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    unknown arrType[150795] "dead at end of block" "insert auto destroy" "type variable"(150794 call(150790 call (partial) getBaseArrType _mt[243] lhs[150770]))
    (543669 'move' arrType[150795](543668 call(543665 call (partial) getBaseArrType _mt[243] lhs[150770])))
    unknown call_tmp[669716] "maybe param" "maybe type" "temp"
    (669719 'move' call_tmp[669716](150800 call rank _mt[243] lhs[150770]))
    unknown rank[150803] "dead at end of block" "param"
    (543671 'init var' rank[150803] call_tmp[669716])
    (150806 'end of statement')
    unknown idxType[150811] "dead at end of block" "insert auto destroy" "type variable"(150808 call idxType _mt[243] lhs[150770])
    (543677 'move' idxType[150811](543674 call idxType _mt[243] lhs[150770]))
    unknown call_tmp[669727] "maybe param" "maybe type" "temp"
    (669730 'move' call_tmp[669727](150815 call stridable _mt[243] lhs[150770]))
    unknown stridable[150818] "dead at end of block" "param"
    (543679 'init var' stridable[150818] call_tmp[669727])
    (150821 'end of statement')
    {
      unknown _indexOfInterest[151021] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151022] "expr temp" "temp"
      unknown call_tmp[669734] "expr temp" "maybe param" "maybe type" "temp"
      (669737 'move' call_tmp[669734](150824 call _arrs _mt[243] lhs[150770]))
      (151031 'move' _iterator[151022](151029 call _getIterator call_tmp[669734]))
      Defer
      {
        {
          (151048 call _freeIterator _iterator[151022])
        }
      }
      { scopeless type
        (151037 'move' _indexOfInterest[151021](151034 call iteratorIndex _iterator[151022]))
      }
      ForLoop[151023]
      {
        unknown e[151041] "index var" "insert auto destroy"
        (481731 'end of statement')
        (151043 'move' e[151041] _indexOfInterest[151021])
        (481732 'end of statement' e[151041])
        {
          const tmp[151012] "const" "temp"
          unknown call_tmp[669739] "expr temp" "maybe param" "maybe type" "temp"
          (669742 'move' call_tmp[669739](151009 '_wide_get_locale' e[151041]))
          (151014 'move' tmp[151012](151010 'deref' call_tmp[669739]))
          {
            {
              unknown call_tmp[669744] "expr temp" "maybe param" "maybe type" "temp"
              (669747 'move' call_tmp[669744](150830 'to nilable class from type' arrType[150795]))
              unknown call_tmp[669749] "maybe param" "maybe type" "temp"
              (669752 'move' call_tmp[669749](150831 call _cast call_tmp[669744] e[151041]))
              unknown eCastQ[150833] "dead at end of block" "insert auto destroy"
              (543681 'init var' eCastQ[150833] call_tmp[669749])
              (150836 'end of statement')
              unknown call_tmp[669754] "expr temp" "maybe param" "maybe type" "temp"
              (669757 'move' call_tmp[669754](150840 call == eCastQ[150833] nil[44]))
              unknown call_tmp[669759] "expr temp" "maybe param" "maybe type" "temp"
              (669762 'move' call_tmp[669759](150888 call _cond_test call_tmp[669754]))
              if call_tmp[669759]
              {
                unknown call_tmp[669764] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                (669767 'move' call_tmp[669764](461918 'typeof' lhs[150770]))
                unknown call_tmp[669769] "expr temp" "maybe param" "maybe type" "temp"
                (669772 'move' call_tmp[669769](150863 call _cast string[26] call_tmp[669764]))
                unknown call_tmp[669774] "expr temp" "maybe param" "maybe type" "temp"
                (669777 'move' call_tmp[669774](150884 call _cast string[26] arrType[150795]))
                (150886 call halt "internal error: " call_tmp[669769] " contains an bad array type " call_tmp[669774])
                (481736 'end of statement' arrType[150795])
              }
              unknown call_tmp[669779] "maybe param" "maybe type" "temp"
              (669782 'move' call_tmp[669779](150894 call postfix! eCastQ[150833]))
              unknown eCast[150896] "dead at end of block" "insert auto destroy"
              (543683 'init var' eCast[150896] call_tmp[669779])
              (150899 'end of statement')
              unknown call_tmp[669786] "maybe param" "maybe type" "temp"
              (669789 'move' call_tmp[669786](150905 call(150901 call (partial) getIndices _mt[243] rhs[150776])))
              unknown inds[150906] "dead at end of block" "insert auto destroy"
              (543685 'init var' inds[150906] call_tmp[669786])
              (150909 'end of statement')
              unknown tmp[150922] "dead at end of block" "insert auto destroy"
              unknown call_tmp[669791] "expr temp" "maybe param" "maybe type" "temp"
              (669794 'move' call_tmp[669791](150919 call range[64319](?) idxType[150811] bounded[64208] stridable[150818]))
              unknown call_tmp[669796] "expr temp" "maybe param" "maybe type" "temp"
              (669799 'move' call_tmp[669796](150920 call * rank[150803] call_tmp[669791]))
              (543687 'default init var' tmp[150922] call_tmp[669796])
              (150925 'end of statement' arrType[150795] e[151041] eCastQ[150833] idxType[150811])
              {
                unknown i[150964] "dead at end of block" "insert auto destroy"
                (543689 'init var' i[150964] 0)
                (481740 'end of statement')
                unknown tmp[150965] "maybe param" "temp"
                unknown call_tmp[669801] "expr temp" "maybe param" "maybe type" "temp"
                (669804 'move' call_tmp[669801](150929 call - rank[150803] 1))
                (150977 'move' tmp[150965](150975 call chpl_compute_low_param_loop_bound 0 call_tmp[669801]))
                unknown tmp[150966] "maybe param" "temp"
                unknown call_tmp[669806] "expr temp" "maybe param" "maybe type" "temp"
                (669809 'move' call_tmp[669806](150982 call - rank[150803] 1))
                (150987 'move' tmp[150966](150985 call chpl_compute_high_param_loop_bound 0 call_tmp[669806]))
                unknown tmp[150967] "maybe param" "temp"
                (150990 'move' tmp[150967] 1)
                ParamForLoop[150992]
                { i[150964] tmp[150965] tmp[150966] tmp[150967]
                  {
                    unknown call_tmp[669811] "maybe param" "maybe type" "temp"
                    (669814 'move' call_tmp[669811](150936 call inds[150906] i[150964]))
                    unknown from[150937] "dead at end of block" "insert auto destroy"
                    (543691 'init var' from[150937] call_tmp[669811])
                    (150940 'end of statement' inds[150906] i[150964])
                    unknown call_tmp[669816] "expr temp" "maybe param" "maybe type" "temp"
                    (669819 'move' call_tmp[669816](150945 call tmp[150922] i[150964]))
                    unknown call_tmp[669823] "expr temp" "maybe param" "maybe type" "temp"
                    (669826 'move' call_tmp[669823](150958 call range[64319](?) idxType[150811] bounded[64208] stridable[150818]))
                    unknown call_tmp[669828] "expr temp" "maybe param" "maybe type" "temp"
                    (669831 'move' call_tmp[669828](150960 call(150947 call (partial) safeCast _mt[243] from[150937]) call_tmp[669823]))
                    (150961 call = call_tmp[669816] call_tmp[669828])
                    (481743 'end of statement' tmp[150922] i[150964] from[150937] idxType[150811])
                  }
                }
                label _unused_continueLabel[150969]
                label _breakLabel[150968]
              }
              (151007 call(151002 call (partial) dsiReallocate _mt[243] eCast[150896]) tmp[150922])
              (481748 'end of statement' eCast[150896] tmp[150922])
            }
            (151017 'on block' 0 tmp[151012])
          }
        }
        label _continueLabel[151026]
        _indexOfInterest[151021]
        _iterator[151022]
      }
      label _breakLabel[151027]
    }
    unknown call_tmp[669839] "expr temp" "maybe param" "maybe type" "temp"
    (669842 'move' call_tmp[669839](151064 call(151060 call (partial) getIndices _mt[243] rhs[150776])))
    (151066 call(151056 call (partial) dsiSetIndices _mt[243] lhs[150770]) call_tmp[669839])
    (481751 'end of statement')
    {
      unknown _indexOfInterest[151109] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151110] "expr temp" "temp"
      unknown call_tmp[669846] "expr temp" "maybe param" "maybe type" "temp"
      (669849 'move' call_tmp[669846](151070 call _arrs _mt[243] lhs[150770]))
      (151119 'move' _iterator[151110](151117 call _getIterator call_tmp[669846]))
      Defer
      {
        {
          (151136 call _freeIterator _iterator[151110])
        }
      }
      { scopeless type
        (151125 'move' _indexOfInterest[151109](151122 call iteratorIndex _iterator[151110]))
      }
      ForLoop[151111]
      {
        unknown e[151129] "index var" "insert auto destroy"
        (481753 'end of statement')
        (151131 'move' e[151129] _indexOfInterest[151109])
        (481754 'end of statement' e[151129])
        {
          unknown call_tmp[669851] "expr temp" "maybe param" "maybe type" "temp"
          (669854 'move' call_tmp[669851](151075 'to nilable class from type' arrType[150795]))
          unknown call_tmp[669856] "maybe param" "maybe type" "temp"
          (669859 'move' call_tmp[669856](151076 call _cast call_tmp[669851] e[151129]))
          unknown eCastQ[151078] "dead at end of block" "insert auto destroy"
          (543693 'init var' eCastQ[151078] call_tmp[669856])
          (151081 'end of statement')
          unknown call_tmp[669861] "maybe param" "maybe type" "temp"
          (669864 'move' call_tmp[669861](151084 call postfix! eCastQ[151078]))
          unknown eCast[151086] "dead at end of block" "insert auto destroy"
          (543695 'init var' eCast[151086] call_tmp[669861])
          (151089 'end of statement' arrType[150795] e[151129] eCastQ[151078])
          const tmp[151101] "const" "temp"
          unknown call_tmp[669866] "expr temp" "maybe param" "maybe type" "temp"
          (669869 'move' call_tmp[669866](151098 '_wide_get_locale' e[151129]))
          (151103 'move' tmp[151101](151099 'deref' call_tmp[669866]))
          {
            (151096 call(151092 call (partial) dsiPostReallocate _mt[243] eCast[151086]))
            (481759 'end of statement' eCast[151086])
            (151106 'on block' 0 tmp[151101])
          }
        }
        label _continueLabel[151114]
        _indexOfInterest[151109]
        _iterator[151110]
      }
      label _breakLabel[151115]
    }
    unknown call_tmp[669875] "expr temp" "maybe param" "maybe type" "temp"
    (669878 'move' call_tmp[669875](151148 call(151144 call (partial) dsiSupportsPrivatization _mt[243] lhs[150770])))
    unknown call_tmp[669880] "expr temp" "maybe param" "maybe type" "temp"
    (669883 'move' call_tmp[669880](151155 call _cond_test call_tmp[669875]))
    if call_tmp[669880]
    {
      (151152 call _reprivatize lhs[150770])
    }
    (520441 return _void[55])
  }
  where {
    unknown call_tmp[669885] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (669888 'move' call_tmp[669885](461920 'typeof' lhs[150770]))
    unknown call_tmp[669890] "expr temp" "maybe param" "maybe type" "temp"
    (669893 'move' call_tmp[669890](150783 call _to_borrowed call_tmp[669885]))
    (354373 'is_subtype' BaseRectangularDom[382286](?) call_tmp[669890])
  }
  function chpl_assignDomainWithIndsIterSafeForRemoving[151169](arg lhs[151166]:_any[178](?), arg rhs[151172]:_domain[125908](?)) : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[151225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151226] "expr temp" "temp"
      unknown call_tmp[669897] "expr temp" "maybe param" "maybe type" "temp"
      (669900 'move' call_tmp[669897](151201 call(151197 call (partial) dsiIndsIterSafeForRemoving _mt[243] lhs[151166])))
      (151235 'move' _iterator[151226](151233 call _getIterator call_tmp[669897]))
      Defer
      {
        {
          (151252 call _freeIterator _iterator[151226])
        }
      }
      { scopeless type
        (151241 'move' _indexOfInterest[151225](151238 call iteratorIndex _iterator[151226]))
      }
      ForLoop[151227]
      {
        unknown i[151245] "index var" "insert auto destroy"
        (481763 'end of statement')
        (151247 'move' i[151245] _indexOfInterest[151225])
        (481764 'end of statement' i[151245])
        {
          unknown call_tmp[669904] "expr temp" "maybe param" "maybe type" "temp"
          (669907 'move' call_tmp[669904](151208 call(151203 call (partial) contains _mt[243] rhs[151172]) i[151245]))
          unknown call_tmp[669909] "expr temp" "maybe param" "maybe type" "temp"
          (669912 'move' call_tmp[669909](151209 call ! call_tmp[669904]))
          unknown call_tmp[669914] "expr temp" "maybe param" "maybe type" "temp"
          (669917 'move' call_tmp[669914](151220 call _cond_test call_tmp[669909]))
          if call_tmp[669914]
          {
            (151217 call(151212 call (partial) dsiRemove _mt[243] lhs[151166]) i[151245])
            (481766 'end of statement' i[151245])
          }
        }
        label _continueLabel[151230]
        _indexOfInterest[151225]
        _iterator[151226]
      }
      label _breakLabel[151231]
    }
    {
      unknown _indexOfInterest[151285] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151286] "expr temp" "temp"
      (151295 'move' _iterator[151286](151293 call _getIterator rhs[151172]))
      Defer
      {
        {
          (151311 call _freeIterator _iterator[151286])
        }
      }
      { scopeless type
        (151300 'move' _indexOfInterest[151285](151297 call iteratorIndex _iterator[151286]))
      }
      ForLoop[151287]
      {
        unknown i[151304] "index var" "insert auto destroy"
        (481769 'end of statement')
        (151306 'move' i[151304] _indexOfInterest[151285])
        (481770 'end of statement' i[151304])
        {
          unknown call_tmp[669923] "expr temp" "maybe param" "maybe type" "temp"
          (669926 'move' call_tmp[669923](151268 call(151263 call (partial) dsiMember _mt[243] lhs[151166]) i[151304]))
          unknown call_tmp[669928] "expr temp" "maybe param" "maybe type" "temp"
          (669931 'move' call_tmp[669928](151269 call ! call_tmp[669923]))
          unknown call_tmp[669933] "expr temp" "maybe param" "maybe type" "temp"
          (669936 'move' call_tmp[669933](151280 call _cond_test call_tmp[669928]))
          if call_tmp[669933]
          {
            (151277 call(151272 call (partial) dsiAdd _mt[243] lhs[151166]) i[151304])
            (481772 'end of statement' i[151304])
          }
        }
        label _continueLabel[151290]
        _indexOfInterest[151285]
        _iterator[151286]
      }
      label _breakLabel[151291]
    }
    (520443 return _void[55])
  }
  where {
    unknown tmp[427258] "maybe param" "temp"
    unknown call_tmp[669940] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (669943 'move' call_tmp[669940](461922 'typeof' lhs[151166]))
    unknown call_tmp[669945] "expr temp" "maybe param" "maybe type" "temp"
    (669948 'move' call_tmp[669945](151179 call _to_borrowed call_tmp[669940]))
    (427269 'move' tmp[427258](354374 'is_subtype' BaseSparseDom[382296](?) call_tmp[669945]))
    unknown call_tmp[669950] "expr temp" "maybe param" "maybe type" "temp"
    (669953 'move' call_tmp[669950](427271 call _cond_invalid tmp[427258]))
    if call_tmp[669950]
    {
      (427274 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[568795] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[568796] "maybe param" "temp"
    unknown call_tmp[669955] "expr temp" "maybe param" "maybe type" "temp"
    (669958 'move' call_tmp[669955](427259 call isTrue tmp[427258]))
    (568801 'move' tmp[568796](568799 call _cond_test call_tmp[669955]))
    if tmp[568796]
    {
      (568806 'move' tmp[568795](568803 '_paramFoldLogical' tmp[568796] 1))
    }
    {
      unknown tmp[568808] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[669960] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (669963 'move' call_tmp[669960](461924 'typeof' lhs[151166]))
      unknown call_tmp[669965] "expr temp" "maybe param" "maybe type" "temp"
      (669968 'move' call_tmp[669965](151187 call _to_borrowed call_tmp[669960]))
      unknown call_tmp[669970] "expr temp" "maybe param" "maybe type" "temp"
      (669973 'move' call_tmp[669970](354375 'is_subtype' BaseAssociativeDom[382291](?) call_tmp[669965]))
      (568810 'move' tmp[568808](427263 call isTrue call_tmp[669970]))
      (568815 'move' tmp[568795](568812 '_paramFoldLogical' tmp[568796] tmp[568808]))
    }
    (748393 call chpl_statementLevelSymbol tmp[568795])
  }
  (355169 'used modules list'(145460 'use' ChapelArray[113678])(145462 'use' ChapelRange[64183])(145465 'use' ChapelLocks[187302])(145468 'use' ChapelHashtable[200446]))
}