AST dump for MemTracking after pass scopeResolve.
Module use list: ChapelStandard SysCTypes 

{
  const memTrack[166615] "config" "const" 0 bool[10]
  const memStats[166620] "config" "const" 0 bool[10]
  const memLeaksByType[166625] "config" "const" 0 bool[10]
  const memLeaks[166630] "config" "const" 0 bool[10]
  const memMax[166635] "config" "const" 0 uint(64)[115]
  const memThreshold[166640] "config" "const" 0 uint(64)[115]
  const memLog[166644] "config" "const" string[26]
  (166647 'end of statement')
  const memLeaksLog[166649] "config" "const" "no auto destroy" string[26]
  (166652 'end of statement')
  const memLeaksByDesc[166654] "config" "const" "no auto destroy" string[26]
  (166657 'end of statement')
  const cMemMax[166665] "const"(166664 call(166659 call . memMax[166635] c"safeCast") size_t[20654])
  const cMemThreshold[166675] "const"(166674 call(166669 call . memThreshold[166640] c"safeCast") size_t[20654])
  (166678 'end of statement')
  function chpl_memTracking_returnConfigVals[166685](ref arg ret_memTrack[166682] :
  bool[10], ref arg ret_memStats[166688] :
  bool[10], ref arg ret_memLeaksByType[166692] :
  bool[10], ref arg ret_memLeaksByDesc[166696] :
  c_string[19], ref arg ret_memLeaks[166700] :
  bool[10], ref arg ret_memMax[166704] :
  size_t[20654], ref arg ret_memThreshold[166708] :
  size_t[20654], ref arg ret_memLog[166712] :
  c_string[19], ref arg ret_memLeaksLog[166716] :
  c_string[19]) : _unknown[51] "export" "local args" "no return value for void"
  {
    (166721 call = ret_memTrack[166682] memTrack[166615])
    (166727 call = ret_memStats[166688] memStats[166620])
    (166732 call = ret_memLeaksByType[166692] memLeaksByType[166625])
    (166737 call = ret_memLeaks[166700] memLeaks[166630])
    (166742 call = ret_memMax[166704] cMemMax[166665])
    (166747 call = ret_memThreshold[166708] cMemThreshold[166675])
    if(166912 call _cond_test(166755 call !=(166751 call .(361422 call here[90439]) c"id") 0))
    {
      if(166794 call _cond_test(166762 call !=(166758 call . memLeaksByDesc[166654] c"size") 0))
      {
        unknown local_memLeaksByDesc[166765] memLeaksByDesc[166654]
        (166768 'end of statement')
        (166775 call =(166771 call . local_memLeaksByDesc[166765] c"isOwned") 0)
        (166785 call = ret_memLeaksByDesc[166696](166784 call(166780 call . local_memLeaksByDesc[166765] c"c_str")))
      }
      {
        (166790 call = ret_memLeaksByDesc[166696] nil[44])
      }
      if(166836 call _cond_test(166804 call !=(166800 call . memLog[166644] c"size") 0))
      {
        unknown local_memLog[166807] memLog[166644]
        (166810 'end of statement')
        (166817 call =(166813 call . local_memLog[166807] c"isOwned") 0)
        (166827 call = ret_memLog[166712](166826 call(166822 call . local_memLog[166807] c"c_str")))
      }
      {
        (166832 call = ret_memLog[166712] nil[44])
      }
      if(166877 call _cond_test(166845 call !=(166841 call . memLeaksLog[166649] c"size") 0))
      {
        unknown local_memLeaksLog[166848] memLeaksLog[166649]
        (166851 'end of statement')
        (166858 call =(166854 call . local_memLeaksLog[166848] c"isOwned") 0)
        (166868 call = ret_memLeaksLog[166716](166867 call(166863 call . local_memLeaksLog[166848] c"c_str")))
      }
      {
        (166873 call = ret_memLeaksLog[166716] nil[44])
      }
    }
    {
      (166888 call = ret_memLeaksByDesc[166696](166887 call(166883 call . memLeaksByDesc[166654] c"c_str")))
      (166899 call = ret_memLog[166712](166898 call(166894 call . memLog[166644] c"c_str")))
      (166909 call = ret_memLeaksLog[166716](166908 call(166904 call . memLeaksLog[166649] c"c_str")))
    }
  }
  (355228 'used modules list'(166609 'use' ChapelStandard[20264])(166611 'use' SysCTypes[20940]))
}