AST dump for ShellSort after pass cleanup.
Module use list: 

{
  (353074 'use' ChapelStandard)
  (273543 'use' Sort)
  function shellSort[273558](arg Data[273555] :
  (273553 call chpl__buildArrayRuntimeType unknown Dom[273548] unknown eltType[273551]), arg comparator[273563] :
  unknown rec[273560] =
  defaultComparator, arg start[273571] =
  (273568 call . Dom c"alignedLow"), arg end[273578] =
  (273575 call . Dom c"alignedHigh")) : _unknown[51] "no return value for void"
  {
    (273585 call chpl_check_comparator comparator eltType)
    if(273616 call _cond_test(273593 call !=(273589 call . Dom c"rank") 1))
    {
      (273614 call compilerError "shellSort() requires 1-D array")
    }
    if(273646 call _cond_test(273622 call . Dom c"stridable"))
    {
      (273644 call compilerError "shellSort() requires an array over a non-stridable domain")
    }
    unknown n[273658](273656 call -(273653 call + 1 end) start)
    (273661 'end of statement')
    unknown js[273662] int[13]
    unknown hs[273666](273670 'typeof' js)
    (273671 'end of statement')
    unknown v[273672](273676 call . Data c"eltType")
    unknown tmp[273679](273683 'typeof' v)
    (273684 'end of statement')
    const incs[273702] "const"(273700 call _build_tuple 701 301 132 57 23 10 4 1)
    (273705 'end of statement')
    {
      unknown _indexOfInterest[273880] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[273881] "expr temp" "temp"
      (273890 'move' _iterator[273881](273888 call _getIterator incs))
      Defer
      {
        {
          (273906 call _freeIterator _iterator[273881])
        }
      }
      { scopeless type
        (273895 'move' _indexOfInterest[273880](273892 call iteratorIndex _iterator[273881]))
      }
      ForLoop[273882]
      {
        unknown h[273899] "index var" "insert auto destroy"
        (273901 'move' h[273899] _indexOfInterest[273880])
        {
          (273713 call = hs(273711 call + h start))
          {
            unknown _indexOfInterest[273842] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[273843] "expr temp" "temp"
            (273852 'move' _iterator[273843](273850 call _getIterator(273857 call chpl_direct_range_iter hs end 1)))
            Defer
            {
              {
                (273873 call _freeIterator _iterator[273843])
              }
            }
            { scopeless type
              (273862 'move' _indexOfInterest[273842](273859 call iteratorIndex _iterator[273843]))
            }
            ForLoop[273844]
            {
              unknown is[273866] "index var" "insert auto destroy"
              (273868 'move' is[273866] _indexOfInterest[273842])
              {
                (273727 call = v(273726 call Data is))
                (273733 call = js is)
                {
                  unknown tmp[273777] "temp"
                  (273831 'move' tmp[273777](273811 call _cond_test(273813 call &&(273815 call >= js hs)(273819 call <(273821 call chpl_compare v(273824 call Data(273826 call - js h)) comparator) 0))))
                  WhileDo[273782]
                  {
                    {
                      (273768 call =(273760 call Data js)(273767 call Data(273764 call - js h)))
                      (273774 call -= js h)
                    }
                    label _continueLabel[273780]
                    (273806 'move' tmp[273777](273786 call _cond_test(273788 call &&(273790 call >= js hs)(273794 call <(273796 call chpl_compare v(273799 call Data(273801 call - js h)) comparator) 0))))
                    tmp[273777]
                  }
                  label _breakLabel[273781]
                }
                (273839 call =(273837 call Data js) v)
              }
              label _continueLabel[273847]
              _indexOfInterest[273842]
              _iterator[273843]
            }
            label _breakLabel[273848]
          }
        }
        label _continueLabel[273885]
        _indexOfInterest[273880]
        _iterator[273881]
      }
      label _breakLabel[273886]
    }
  }
}