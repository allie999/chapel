AST dump for ChapelDistribution after pass cleanup.
Module use list: 

{
  (145418 'use' ChapelArray)
  (145420 'use' ChapelRange)
  (145423 'use' ChapelLocks)
  (145426 'use' ChapelHashtable)
  function BaseDist[145926].deinit[145456](arg _mt[145930]:_MT[238], arg this[145928]:BaseDist[145926]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseDist[145926].remove[145463](arg _mt[145934]:_MT[238], arg this[145932]:BaseDist[145926]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown free_dist[145469] 0
    (145472 'end of statement')
    if(145549 call _cond_test(145476 call dsiTrackDomains))
    {
      const tmp[145534] "const" "temp"
      (145536 'move' tmp[145534](145532 'deref'(145531 '_wide_get_locale' this)))
      {
        {
          unknown dom_count[145481](145479 call - 1)
          (145484 'end of statement')
          {
            {
              (145491 call(145487 call . _domsLock c"lock"))
              (145496 call = _free_when_no_doms 1)
              (145504 call = dom_count(145501 call . _doms c"size"))
              (145512 call(145508 call . _domsLock c"unlock"))
            }
            (145516 'local block')
          }
          if(145526 call _cond_test(145519 call == dom_count 0))
          {
            (145523 call = free_dist 1)
          }
        }
        (145539 'on block' 0 tmp[145534])
      }
    }
    {
      (145545 call = free_dist 1)
    }
    if(145563 call _cond_test free_dist)
    {
      (145558 return(145557 call _to_unmanaged this))
    }
    {
      (145561 return nil[44])
    }
  }
  { scopeless type
    (145467 'to unmanaged class from unknown'(145466 'to nilable class from type' BaseDist))
  }
  function BaseDist[145926].remove_dom[145579](arg _mt[145938]:_MT[238], arg this[145936]:BaseDist[145926], arg x[145576] :
  (145575 'to unmanaged class from unknown' BaseDom)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown count[145585](145583 call - 1)
    (145588 'end of statement')
    const tmp[145654] "const" "temp"
    (145656 'move' tmp[145654](145652 'deref'(145651 '_wide_get_locale' this)))
    {
      {
        unknown cnt[145594](145592 call - 1)
        (145597 'end of statement')
        {
          {
            (145604 call(145600 call . _domsLock c"lock"))
            (145613 call(145608 call . _doms c"remove") x)
            (145620 call = cnt(145617 call . _doms c"size"))
            if(145631 call _cond_test(145624 call ! _free_when_no_doms))
            {
              (145628 call += cnt 1)
            }
            (145641 call(145637 call . _domsLock c"unlock"))
          }
          (145645 'local block')
        }
        (145648 call = count cnt)
      }
      (145659 'on block' 0 tmp[145654])
    }
    (145666 return(145664 call == count 0))
  }
  { scopeless type
    bool[10]
  }
  function BaseDist[145926].add_dom[145678](arg _mt[145942]:_MT[238], arg this[145940]:BaseDist[145926], arg x[145675] :
  (145674 'to unmanaged class from unknown' BaseDom)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[145707] "const" "temp"
    (145709 'move' tmp[145707](145705 'deref'(145704 '_wide_get_locale' this)))
    {
      {
        (145686 call(145682 call . _domsLock c"lock"))
        (145695 call(145690 call . _doms c"add") x)
        (145702 call(145698 call . _domsLock c"unlock"))
      }
      (145712 'on block' 0 tmp[145707])
    }
  }
  function BaseDist[145926].dsiNewRectangularDom[145724](arg _mt[145946]:_MT[238], arg this[145944]:BaseDist[145926], param arg rank[145721] :
  int[13], arg idxType[145726]:_any[178](?), param arg stridable[145729] :
  bool[10], arg inds[145732]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145753 call compilerError "rectangular domains not supported by this distribution")
  }
  function BaseDist[145926].dsiNewAssociativeDom[145762](arg _mt[145950]:_MT[238], arg this[145948]:BaseDist[145926], arg idxType[145760]:_any[178](?), param arg parSafe[145765] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145787 call compilerError "associative domains not supported by this distribution")
  }
  function BaseDist[145926].dsiNewSparseDom[145798](arg _mt[145954]:_MT[238], arg this[145952]:BaseDist[145926], param arg rank[145795] :
  int[13], arg idxType[145800]:_any[178](?), arg dom[145803] :
  _domain) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145825 call compilerError "sparse domains not supported by this distribution")
  }
  function BaseDist[145926].dsiSupportsPrivatization[145832](arg _mt[145958]:_MT[238], arg this[145956]:BaseDist[145926]) param : _unknown[51] "method" "primary method"
  {
    (145835 return 0)
  }
  function BaseDist[145926].dsiRequiresPrivatization[145842](arg _mt[145962]:_MT[238], arg this[145960]:BaseDist[145926]) param : _unknown[51] "method" "primary method"
  {
    (145845 return 0)
  }
  function BaseDist[145926].dsiDestroyDist[145852](arg _mt[145966]:_MT[238], arg this[145964]:BaseDist[145926]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function BaseDist[145926].dsiDisplayRepresentation[145859](arg _mt[145970]:_MT[238], arg this[145968]:BaseDist[145926]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (145880 call writeln "<no way to display representation>")
  }
  function BaseDist[145926].trackDomains[145887](arg _mt[145974]:_MT[238], arg this[145972]:BaseDist[145926]) param : _unknown[51] "method" "primary method"
  {
    (145890 return 1)
  }
  function BaseDist[145926].dsiTrackDomains[145897](arg _mt[145978]:_MT[238], arg this[145976]:BaseDist[145926]) : _unknown[51] "method" "primary method"
  {
    (145900 return 1)
  }
  function BaseDist[145926].singleton[145907](arg _mt[145982]:_MT[238], arg this[145980]:BaseDist[145926]) param : _unknown[51] "method" "primary method"
  {
    (145910 return 0)
  }
  function BaseDist[145926].dsiIsLayout[145917](arg _mt[145986]:_MT[238], arg this[145984]:BaseDist[145926]) param : _unknown[51] "method" "primary method"
  {
    (145920 return 0)
  }
  type BaseDist[145926] unknown _doms[145434](145433 call chpl__simpleSet(145431 'to unmanaged class from unknown' BaseDom)) unknown _domsLock[145439] chpl_LocalSpinlock unknown _free_when_no_doms[145444] bool[10] unknown pid[145450] nullPid int[13]
  function BaseDom[146725].init[146022](arg _mt[146729]:_MT[238], arg this[146727]:BaseDom[146725]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function BaseDom[146725].deinit[146029](arg _mt[146733]:_MT[238], arg this[146731]:BaseDom[146725]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseDom[146725].dsiMyDist[146036](arg _mt[146737]:_MT[238], arg this[146735]:BaseDom[146725]) : _unknown[51] "method" "primary method"
  {
    (146059 call halt "internal error: dsiMyDist is not implemented")
    unknown ret[146064] "unsafe"(146063 'to unmanaged class from unknown' BaseDist)
    (146067 'end of statement')
    (146069 return ret)
  }
  { scopeless type
    (146039 'to unmanaged class from unknown' BaseDist)
  }
  function BaseDom[146725].remove[146076](arg _mt[146741]:_MT[238], arg this[146739]:BaseDom[146725]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    (146104 call assert(146101 call ==(146097 call(146093 call .(146090 call dsiMyDist) c"dsiTrackDomains"))(146100 call dsiLinksDistribution)))
    unknown ret_dom[146111] nil[44](146109 'to unmanaged class from unknown'(146108 'to nilable class from type' BaseDom))
    (146114 'end of statement')
    unknown ret_dist[146119] nil[44](146117 'to unmanaged class from unknown'(146116 'to nilable class from type' BaseDist))
    (146122 'end of statement')
    unknown dist[146126](146125 call dsiMyDist)
    (146129 'end of statement')
    unknown free_dom[146131] 0
    (146134 'end of statement')
    unknown remove_dist[146136] 0
    (146139 'end of statement')
    const tmp[146224] "const" "temp"
    (146226 'move' tmp[146224](146222 'deref'(146221 '_wide_get_locale' this)))
    {
      {
        unknown arr_count[146142] 0
        (146145 'end of statement')
        {
          {
            (146152 call(146148 call . _arrsLock c"lock"))
            (146160 call = arr_count(146157 call . _arrs c"size"))
            (146165 call += arr_count _arrs_containing_dom)
            (146170 call = _free_when_no_arrs 1)
            (146178 call(146174 call . _arrsLock c"unlock"))
          }
          (146182 'local block')
        }
        if(146217 call _cond_test(146185 call == arr_count 0))
        {
          (146189 call = free_dom 1)
          if(146213 call _cond_test(146195 call dsiLinksDistribution))
          {
            (146209 call = remove_dist(146208 call(146200 call . dist c"remove_dom")(146206 call _to_unmanaged this)))
          }
        }
      }
      (146229 'on block' 0 tmp[146224])
    }
    if(146241 call _cond_test free_dom)
    {
      (146238 call = ret_dom(146237 call _to_unmanaged this))
    }
    if(146252 call _cond_test remove_dist)
    {
      (146249 call = ret_dist dist)
    }
    (146262 return(146260 call _build_tuple ret_dom ret_dist))
  }
  { scopeless type
    (146085 call _build_tuple(146080 'to unmanaged class from unknown'(146079 'to nilable class from type' BaseDom))(146083 'to unmanaged class from unknown'(146082 'to nilable class from type' BaseDist)))
  }
  function BaseDom[146725].remove_arr[146274](arg _mt[146745]:_MT[238], arg this[146743]:BaseDom[146725], arg x[146271] :
  (146270 'to unmanaged class from unknown' BaseArr), param arg rmFromList[146277] =
  1) : _unknown[51] "inline" "method" "primary method"
  {
    unknown count[146284](146282 call - 1)
    (146287 'end of statement')
    const tmp[146370] "const" "temp"
    (146372 'move' tmp[146370](146368 'deref'(146367 '_wide_get_locale' this)))
    {
      {
        unknown cnt[146293](146291 call - 1)
        (146296 'end of statement')
        {
          {
            (146303 call(146299 call . _arrsLock c"lock"))
            if(146320 call _cond_test rmFromList)
            {
              (146313 call(146308 call . _arrs c"remove") x)
            }
            {
              (146317 call -= _arrs_containing_dom 1)
            }
            (146331 call = cnt(146328 call . _arrs c"size"))
            (146336 call += cnt _arrs_containing_dom)
            if(146347 call _cond_test(146340 call ! _free_when_no_arrs))
            {
              (146344 call += cnt 1)
            }
            (146357 call(146353 call . _arrsLock c"unlock"))
          }
          (146361 'local block')
        }
        (146364 call = count cnt)
      }
      (146375 'on block' 0 tmp[146370])
    }
    (146382 return(146380 call == count 0))
  }
  { scopeless type
    bool[10]
  }
  function BaseDom[146725].add_arr[146394](arg _mt[146749]:_MT[238], arg this[146747]:BaseDom[146725], arg x[146391] :
  (146390 'to unmanaged class from unknown' BaseArr), param arg locking[146397] =
  1, param arg addToList[146401] =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146455] "const" "temp"
    (146457 'move' tmp[146455](146453 'deref'(146452 '_wide_get_locale' this)))
    {
      {
        if(146413 call _cond_test locking)
        {
          (146411 call(146407 call . _arrsLock c"lock"))
        }
        if(146433 call _cond_test addToList)
        {
          (146426 call(146421 call . _arrs c"add") x)
        }
        {
          (146430 call += _arrs_containing_dom 1)
        }
        if(146447 call _cond_test locking)
        {
          (146445 call(146441 call . _arrsLock c"unlock"))
        }
      }
      (146460 'on block' 0 tmp[146455])
    }
  }
  function BaseDom[146725].remove_containing_arr[146473](arg _mt[146753]:_MT[238], arg this[146751]:BaseDom[146725], arg x[146470] :
  (146469 'to unmanaged class from unknown' BaseArr)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown count[146478](146476 call - 1)
    (146481 'end of statement')
    const tmp[146545] "const" "temp"
    (146547 'move' tmp[146545](146543 'deref'(146542 '_wide_get_locale' this)))
    {
      {
        unknown cnt[146487](146485 call - 1)
        (146490 'end of statement')
        (146497 call(146493 call . _arrsLock c"lock"))
        (146501 call -= _arrs_containing_dom 1)
        (146509 call = cnt(146506 call . _arrs c"size"))
        (146514 call += cnt _arrs_containing_dom)
        if(146525 call _cond_test(146518 call ! _free_when_no_arrs))
        {
          (146522 call += cnt 1)
        }
        (146535 call(146531 call . _arrsLock c"unlock"))
        (146539 call = count cnt)
      }
      (146550 'on block' 0 tmp[146545])
    }
    (146557 return(146555 call == count 0))
  }
  function BaseDom[146725].add_containing_arr[146568](arg _mt[146757]:_MT[238], arg this[146755]:BaseDom[146725], arg x[146565] :
  (146564 'to unmanaged class from unknown' BaseArr)) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const tmp[146594] "const" "temp"
    (146596 'move' tmp[146594](146592 'deref'(146591 '_wide_get_locale' this)))
    {
      {
        (146576 call(146572 call . _arrsLock c"lock"))
        (146581 call += _arrs_containing_dom 1)
        (146589 call(146585 call . _arrsLock c"unlock"))
      }
      (146599 'on block' 0 tmp[146594])
    }
  }
  function BaseDom[146725].dsiSupportsPrivatization[146607](arg _mt[146761]:_MT[238], arg this[146759]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    (146610 return 0)
  }
  function BaseDom[146725].dsiRequiresPrivatization[146617](arg _mt[146765]:_MT[238], arg this[146763]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    (146620 return 0)
  }
  function BaseDom[146725].linksDistribution[146627](arg _mt[146769]:_MT[238], arg this[146767]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    (146630 return 1)
  }
  function BaseDom[146725].dsiLinksDistribution[146637](arg _mt[146773]:_MT[238], arg this[146771]:BaseDom[146725]) : _unknown[51] "method" "primary method"
  {
    (146640 return 1)
  }
  function BaseDom[146725].dsiDestroyDom[146647](arg _mt[146777]:_MT[238], arg this[146775]:BaseDom[146725]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function BaseDom[146725].dsiDisplayRepresentation[146654](arg _mt[146781]:_MT[238], arg this[146779]:BaseDom[146725]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (146659 call writeln "<no way to display representation>")
  }
  function BaseDom[146725].dsiSupportsAutoLocalAccess[146666](arg _mt[146785]:_MT[238], arg this[146783]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    (146669 return 0)
  }
  function BaseDom[146725].isDefaultRectangular[146676](arg _mt[146789]:_MT[238], arg this[146787]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    (146679 return 0)
  }
  function BaseDom[146725].isDefaultRectangular[146686](arg _mt[146793]:_MT[238], arg this[146791]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    (146689 return 0)
  }
  function BaseDom[146725].isSliceDomainView[146696](arg _mt[146797]:_MT[238], arg this[146795]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    (146699 return 0)
  }
  function BaseDom[146725].isRankChangeDomainView[146706](arg _mt[146801]:_MT[238], arg this[146799]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    (146709 return 0)
  }
  function BaseDom[146725].isReindexDomainView[146716](arg _mt[146805]:_MT[238], arg this[146803]:BaseDom[146725]) param : _unknown[51] "method" "primary method"
  {
    (146719 return 0)
  }
  type BaseDom[146725] unknown _arrs[145995](145994 call chpl__simpleSet(145992 'to unmanaged class from unknown' BaseArr)) unknown _arrs_containing_dom[146000] int[13] unknown _arrsLock[146005] chpl_LocalSpinlock unknown _free_when_no_arrs[146010] bool[10] unknown pid[146016] nullPid int[13]
  function BaseRectangularDom[146893](?).getBaseArrType[146826](arg _mt[146897]:_MT[238], arg this[146895]:BaseRectangularDom[146893](?)) type : _unknown[51] "method" "primary method"
  {
    unknown tmp[146840](146830 'new'(_chpl_manager = unmanaged[220](?))(146839 call BaseArrOverRectangularDom(rank = rank)(idxType = idxType)(stridable = stridable)))
    (146843 'end of statement')
    (146847 return(146846 'typeof' tmp))
  }
  function BaseRectangularDom[146893](?).deinit[146853](arg _mt[146901]:_MT[238], arg this[146899]:BaseRectangularDom[146893](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseRectangularDom[146893](?).dsiAdd[146862](arg _mt[146905]:_MT[238], arg this[146903]:BaseRectangularDom[146893](?), in arg x[146860]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (146867 call compilerError "Cannot add indices to a rectangular domain")
    (146871 return 0)
  }
  function BaseRectangularDom[146893](?).dsiRemove[146879](arg _mt[146909]:_MT[238], arg this[146907]:BaseRectangularDom[146893](?), arg x[146877]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (146884 call compilerError "Cannot remove indices from a rectangular domain")
    (146888 return 0)
  }
  type BaseRectangularDom[146893](?) unknown rank[146812] "param" int[13] unknown idxType[146816] "type variable" unknown stridable[146820] "param" bool[10] BaseDom
  function BaseSparseDomImpl[147961].deinit[146928](arg _mt[147965]:_MT[238], arg this[147963]:BaseSparseDomImpl[147961]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseSparseDomImpl[147961].dsiBulkAdd[146946](arg _mt[147969]:_MT[238], arg this[147967]:BaseSparseDomImpl[147961], arg inds[146943] :
  (146940 call chpl__buildArrayRuntimeType nil[44](146938 call chpl__buildIndexType rank idxType)), arg dataSorted[146949] =
  0, arg isUnique[146953] =
  0, arg preserveInds[146957] =
  1, arg addOn[146961] =
  nilLocale) : _unknown[51] "method" "primary method" "method overrides"
  {
    if(146995 call _cond_test(146968 call &&(146965 call ! dataSorted) preserveInds))
    {
      unknown _inds[146971] inds
      (146974 'end of statement')
      (146983 return(146982 call bulkAdd_help _inds dataSorted isUnique addOn))
    }
    {
      (146992 return(146991 call bulkAdd_help inds dataSorted isUnique addOn))
    }
  }
  function BaseSparseDomImpl[147961].bulkAdd_help[147017](arg _mt[147973]:_MT[238], arg this[147971]:BaseSparseDomImpl[147961], arg inds[147014] :
  (147012 call chpl__buildArrayRuntimeType unknown indsDom[147004](147010 call chpl__buildIndexType rank idxType)), arg dataSorted[147020] =
  0, arg isUnique[147024] =
  0, arg addOn[147028] =
  nilLocale) : _unknown[51] "method" "primary method"
  {
    (147050 call halt "Helper function called on the BaseSparseDomImpl")
    (147056 return(147054 call - 1))
  }
  function BaseSparseDomImpl[147961]._grow[147066](arg _mt[147977]:_MT[238], arg this[147975]:BaseSparseDomImpl[147961], arg size[147063] :
  int[13], arg factor[147069] =
  arrayAsVecGrowthFactor) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const oldNNZDomSize[147076] "const"(147073 call . nnzDom c"size")
    (147079 'end of statement')
    if(147118 call _cond_test(147083 call > size oldNNZDomSize))
    {
      const _newNNZDomSize[147100] "const"(147097 IfExpr  oldNNZDomSize then
      { scopeless
        (147094 call _cast int[13](147092 call ceil(147089 call * factor oldNNZDomSize)))
      } else
      { scopeless
        1
      } )
      (147103 'end of statement')
      (147115 call = nnzDom(147113 call chpl__buildDomainExpr(147110 call #(147107 call chpl_build_low_bounded_range 1) _newNNZDomSize)))
    }
  }
  function BaseSparseDomImpl[147961]._shrink[147130](arg _mt[147981]:_MT[238], arg this[147979]:BaseSparseDomImpl[147961], arg size[147127] :
  int[13], arg factor[147133] =
  arrayAsVecGrowthFactor) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(147204 call _cond_test(147138 call == size 0))
    {
      (147148 call = nnzDom(147146 call chpl__buildDomainExpr(147143 call chpl_build_bounded_range 1 0)))
    }
    {
      const shrinkThreshold[147165] "const"(147163 call _cast int[13](147160 call /(147153 call . nnzDom c"size")(147158 call ** factor 2)))
      (147168 'end of statement')
      if(147200 call _cond_test(147172 call < size shrinkThreshold))
      {
        const _newNNZDomSize[147184] "const"(147182 call _cast int[13](147179 call /(147175 call . nnzDom c"size") factor))
        (147187 'end of statement')
        (147197 call = nnzDom(147195 call chpl__buildDomainExpr(147192 call chpl_build_bounded_range 1 _newNNZDomSize)))
      }
    }
  }
  function BaseSparseDomImpl[147961]._bulkGrow[147213](arg _mt[147985]:_MT[238], arg this[147983]:BaseSparseDomImpl[147961]) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    const nnz[147218] "const"(147217 call getNNZ)
    (147221 'end of statement')
    if(147261 call _cond_test(147228 call > nnz(147225 call . nnzDom c"size")))
    {
      const _newNNZDomSize[147245] "const"(147243 call _cast int[13](147241 call exp2(147238 call +(147234 call log2 nnz) 1.0)))
      (147248 'end of statement')
      (147258 call = nnzDom(147256 call chpl__buildDomainExpr(147253 call chpl_build_bounded_range 1 _newNNZDomSize)))
    }
  }
  function BaseSparseDomImpl[147961]._countDuplicates[147271](arg _mt[147989]:_MT[238], arg this[147987]:BaseSparseDomImpl[147961], arg arr[147269]:_any[178](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown dupCount[147280](147278 call - 1)
    (147283 'end of statement')
    unknown prev[147295](147294 call arr(147290 call .(147287 call . arr c"_dom") c"low"))
    (147298 'end of statement')
    {
      unknown _indexOfInterest[147324] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147325] "expr temp" "temp"
      (147334 'move' _iterator[147325](147332 call _getIterator arr))
      Defer
      {
        {
          (147350 call _freeIterator _iterator[147325])
        }
      }
      { scopeless type
        (147339 'move' _indexOfInterest[147324](147336 call iteratorIndex _iterator[147325]))
      }
      ForLoop[147326]
      {
        unknown a[147343] "index var" "insert auto destroy"
        (147345 'move' a[147343] _indexOfInterest[147324])
        {
          if(147315 call _cond_test(147303 call == a prev))
          {
            (147307 call += dupCount 1)
          }
          {
            (147312 call = prev a)
          }
          {
          }
        }
        label _continueLabel[147329]
        _indexOfInterest[147324]
        _iterator[147325]
      }
      label _breakLabel[147330]
    }
    (147358 return dupCount)
  }
  where {
    (147276 call isArray arr)
  }
  function BaseSparseDomImpl[147961].bulkAdd_prepareInds[147367](arg _mt[147993]:_MT[238], arg this[147991]:BaseSparseDomImpl[147961], arg inds[147365]:_any[178](?), arg dataSorted[147369]:_any[178](?), arg isUnique[147371]:_any[178](?), arg cmp[147373]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (147376 'use' Sort)
    if(147389 call _cond_test(147380 call ! dataSorted))
    {
      (147387 call sort inds(comparator = cmp))
    }
    if(147603 call _cond_test boundsChecking)
    {
      if(147429 call _cond_test(147404 call && dataSorted(147402 call !(147401 call isSorted inds(comparator = cmp)))))
      {
        (147427 call halt "bulkAdd: Data not sorted, call the function with \n              dataSorted=false")
      }
      if(147559 call _cond_test isUnique)
      {
        const indsStart[147443] "const"(147440 call .(147437 call . inds c"_dom") c"low")
        (147446 'end of statement')
        const indsEnd[147455] "const"(147452 call .(147449 call . inds c"_dom") c"high")
        (147458 'end of statement')
        unknown lastInd[147463](147462 call inds indsStart)
        (147466 'end of statement')
        {
          unknown _indexOfInterest[147518] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[147519] "expr temp" "temp"
          (147528 'move' _iterator[147519](147526 call _getIterator(147536 call chpl_direct_range_iter(147532 call + indsStart 1) indsEnd 1)))
          Defer
          {
            {
              (147552 call _freeIterator _iterator[147519])
            }
          }
          { scopeless type
            (147541 'move' _indexOfInterest[147518](147538 call iteratorIndex _iterator[147519]))
          }
          ForLoop[147520]
          {
            unknown i[147545] "index var" "insert auto destroy"
            (147547 'move' i[147545] _indexOfInterest[147518])
            {
              if(147511 call _cond_test(147480 call ==(147478 call inds i) lastInd))
              {
                (147501 call halt "bulkAdd: There are duplicates, call the function \n                  with isUnique=false")
              }
              {
                (147508 call = lastInd(147507 call inds i))
              }
            }
            label _continueLabel[147523]
            _indexOfInterest[147518]
            _iterator[147519]
          }
          label _breakLabel[147524]
        }
      }
      {
        unknown _indexOfInterest[147570] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147571] "expr temp" "temp"
        (147580 'move' _iterator[147571](147578 call _getIterator inds))
        Defer
        {
          {
            (147596 call _freeIterator _iterator[147571])
          }
        }
        { scopeless type
          (147585 'move' _indexOfInterest[147570](147582 call iteratorIndex _iterator[147571]))
        }
        ForLoop[147572]
        {
          unknown i[147589] "index var" "insert auto destroy"
          (147591 'move' i[147589] _indexOfInterest[147570])
          (147568 call boundsCheck i)
          label _continueLabel[147575]
          _indexOfInterest[147570]
          _iterator[147571]
        }
        label _breakLabel[147576]
      }
    }
  }
  function BaseSparseDomImpl[147961].__getActualInsertPts[147613](arg _mt[147997]:_MT[238], arg this[147995]:BaseSparseDomImpl[147961], arg d[147611]:_any[178](?), arg inds[147615]:_any[178](?), arg isUnique[147617]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    unknown indivInsertPts[147629](147627 call chpl__buildArrayRuntimeType(147625 call chpl__ensureDomainExpr(147620 call . inds c"_dom")) int[13])
    (147632 'end of statement')
    unknown actualInsertPts[147644](147642 call chpl__buildArrayRuntimeType(147640 call chpl__ensureDomainExpr(147635 call . inds c"_dom")) int[13])
    (147647 'end of statement')
    if(147753 call _cond_test(147649 call ! isUnique))
    {
      unknown lastInd[147664](147662 call +(147660 call inds(147656 call .(147653 call . inds c"_dom") c"low")) 1)
      (147667 'end of statement')
      {
        unknown _indexOfInterest[147701] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[147702] "expr temp" "temp"
        (147716 'move' _iterator[147702](147677 call _build_tuple(147711 call _getIterator inds)(147714 call _getIterator indivInsertPts)))
        Defer
        {
          {
            (147746 call _freeIterator _iterator[147702])
          }
        }
        { scopeless type
          (147721 'move' _indexOfInterest[147701](147718 call iteratorIndex _iterator[147702]))
        }
        ForLoop[147703]
        {
          (147726 call _check_tuple_var_decl _indexOfInterest[147701] 2)
          unknown i[147732] "index var" "insert auto destroy"
          (147734 'move' i[147732](147730 call _indexOfInterest[147701] 0))
          unknown p[147739] "index var" "insert auto destroy"
          (147741 'move' p[147739](147737 call _indexOfInterest[147701] 1))
          {
            if(147694 call _cond_test(147680 call == i lastInd))
            {
              (147686 call = p(147684 call - 1))
            }
            {
              (147691 call = lastInd i)
            }
          }
          label _continueLabel[147706]
          _indexOfInterest[147701]
          _iterator[147702]
        }
        label _breakLabel[147707]
      }
    }
    Forall {
      induction variables:
        
        unknown i[147821] "index var" "insert auto destroy"
        
        unknown p[147823] "index var" "insert auto destroy"
      iterated expressions:
        inds
        indivInsertPts
      shadow variables:
      other variables
        forall body
      {
        if(147815 call _cond_test(147773 call || isUnique(147771 call != p(147769 call - 1))))
        {
          const tmp[147789] "const" "temp"(147788 call(147783 call . d c"find") i)
          (147796 call _check_tuple_var_decl tmp[147789] 2)
          const found[147775] "const"(147790 call tmp[147789] 0)
          const insertPt[147777] "const"(147793 call tmp[147789] 1)
          (147801 'end of statement')
          (147812 call = p(147809 IfExpr  found then
          { scopeless
            (147806 call - 1)
          } else
          { scopeless
            insertPt
          } ))
        }
      }
    }
    unknown actualAddCnt[147827] 0
    (147830 'end of statement')
    {
      unknown _indexOfInterest[147871] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147872] "expr temp" "temp"
      (147886 'move' _iterator[147872](147839 call _build_tuple(147881 call _getIterator indivInsertPts)(147884 call _getIterator actualInsertPts)))
      Defer
      {
        {
          (147916 call _freeIterator _iterator[147872])
        }
      }
      { scopeless type
        (147891 'move' _indexOfInterest[147871](147888 call iteratorIndex _iterator[147872]))
      }
      ForLoop[147873]
      {
        (147896 call _check_tuple_var_decl _indexOfInterest[147871] 2)
        unknown ip[147902] "index var" "insert auto destroy"
        (147904 'move' ip[147902](147900 call _indexOfInterest[147871] 0))
        unknown ap[147909] "index var" "insert auto destroy"
        (147911 'move' ap[147909](147907 call _indexOfInterest[147871] 1))
        {
          if(147865 call _cond_test(147844 call != ip(147842 call - 1)))
          {
            (147851 call = ap(147849 call + ip actualAddCnt))
            (147857 call += actualAddCnt 1)
          }
          {
            (147862 call = ap ip)
          }
        }
        label _continueLabel[147876]
        _indexOfInterest[147871]
        _iterator[147872]
      }
      label _breakLabel[147877]
    }
    (147928 return(147926 call _build_tuple actualInsertPts actualAddCnt))
  }
  function BaseSparseDomImpl[147961].dsiClear[147934](arg _mt[148001]:_MT[238], arg this[147999]:BaseSparseDomImpl[147961]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (147955 call halt "not implemented")
  }
  type BaseSparseDomImpl[147961] unknown nnzDom[146922](146920 call chpl__buildDomainExpr(146917 call chpl_build_bounded_range 1 0)) BaseSparseDom
  function SparseIndexBuffer[148188](?).init[148059](arg _mt[148192]:_MT[238], arg this[148190]:SparseIndexBuffer[148188](?), arg size[148057]:_any[178](?), param arg rank[148062] :
  int[13], arg obj[148065]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148072 call =(148068 call . this c"rank") rank)
    (148081 call =(148077 call . this c"obj") obj)
    (148094 call = bufDom(148092 call chpl__buildDomainExpr(148089 call #(148086 call chpl_build_low_bounded_range 0) size)))
  }
  function SparseIndexBuffer[148188](?).deinit[148101](arg _mt[148196]:_MT[238], arg this[148194]:SparseIndexBuffer[148188](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    (148105 call commit)
  }
  function SparseIndexBuffer[148188](?).add[148116](arg _mt[148200]:_MT[238], arg this[148198]:SparseIndexBuffer[148188](?), arg idx[148113] :
  idxType) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148123 call =(148121 call buf cur) idx)
    (148129 call += cur 1)
    if(148143 call _cond_test(148137 call == cur(148134 call . buf c"size")))
    {
      (148141 call commit)
    }
  }
  function SparseIndexBuffer[148188](?).commit[148152](arg _mt[148204]:_MT[238], arg this[148202]:SparseIndexBuffer[148188](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(148174 call _cond_test(148156 call >= cur 1))
    {
      (148172 call(148159 call . obj c"dsiBulkAdd")(148170 call buf(148167 call chpl_build_high_bounded_range(148165 call - cur 1))))
    }
    (148182 call = cur 0)
  }
  type SparseIndexBuffer[148188](?) unknown rank[148006] "param" int[13] unknown obj[148011] BaseSparseDom unknown idxType[148027] "type variable"(148024 IfExpr (148017 call == rank 1) then
  { scopeless
    int[13]
  } else
  { scopeless
    (148022 call * rank int[13])
  } ) unknown bufDom[148035](148033 call chpl__buildDomainRuntimeType defaultDist 1) unknown buf[148046](148044 call chpl__buildArrayRuntimeType(148042 call chpl__ensureDomainExpr bufDom) idxType) unknown cur[148051] 0
  function BaseSparseDom[148665](?).getNNZ[148224](arg _mt[148669]:_MT[238], arg this[148667]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148246 call halt "nnz queried on base class")
  }
  { scopeless type
    int[13]
  }
  function BaseSparseDom[148665](?).deinit[148254](arg _mt[148673]:_MT[238], arg this[148671]:BaseSparseDom[148665](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseSparseDom[148665](?).dsiClear[148261](arg _mt[148677]:_MT[238], arg this[148675]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148282 call halt "clear not implemented for this distribution - BaseSparseDom")
  }
  function BaseSparseDom[148665](?).dsiBulkAdd[148300](arg _mt[148681]:_MT[238], arg this[148679]:BaseSparseDom[148665](?), arg inds[148297] :
  (148294 call chpl__buildArrayRuntimeType nil[44](148292 call chpl__buildIndexType rank idxType)), arg dataSorted[148303] =
  0, arg isUnique[148307] =
  0, arg preserveInds[148311] =
  1, arg addOn[148315] =
  nilLocale) : _unknown[51] "method" "primary method"
  {
    (148338 call halt "Bulk addition is not supported by this sparse domain")
    (148342 return 0)
  }
  { scopeless type
    int[13]
  }
  function BaseSparseDom[148665](?).boundsCheck[148357](arg _mt[148685]:_MT[238], arg this[148683]:BaseSparseDom[148665](?), arg ind[148354] :
  (148352 call chpl__buildIndexType rank idxType)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    if(148416 call _cond_test boundsChecking)
    {
      if(148411 call _cond_test(148368 call !(148367 call(148362 call . parentDom c"contains") ind)))
      {
        (148409 call halt "Sparse domain/array index out of bounds: " ind " (expected to be within " parentDom ")")
      }
    }
  }
  { scopeless type
    void[4]
  }
  function BaseSparseDom[148665](?).dsiDim[148431](arg _mt[148689]:_MT[238], arg this[148687]:BaseSparseDom[148665](?), arg d[148428] :
  int[13]) : _unknown[51] "method" "primary method"
  {
    (148440 return(148439 call(148434 call . parentDom c"dim") d))
  }
  function BaseSparseDom[148665](?).dsiDims[148447](arg _mt[148693]:_MT[238], arg this[148691]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method"
  {
    (148455 return(148454 call(148450 call . parentDom c"dims")))
  }
  function BaseSparseDom[148665](?).dsiNumIndices[148462](arg _mt[148697]:_MT[238], arg this[148695]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148467 return(148466 call getNNZ))
  }
  function BaseSparseDom[148665](?).dsiSize[148474](arg _mt[148701]:_MT[238], arg this[148699]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148479 return(148478 call getNNZ))
  }
  function BaseSparseDom[148665](?).dsiLow[148486](arg _mt[148705]:_MT[238], arg this[148703]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148492 return(148489 call . parentDom c"low"))
  }
  function BaseSparseDom[148665](?).dsiHigh[148499](arg _mt[148709]:_MT[238], arg this[148707]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148505 return(148502 call . parentDom c"high"))
  }
  function BaseSparseDom[148665](?).dsiStride[148512](arg _mt[148713]:_MT[238], arg this[148711]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148518 return(148515 call . parentDom c"stride"))
  }
  function BaseSparseDom[148665](?).dsiAlignment[148525](arg _mt[148717]:_MT[238], arg this[148715]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148531 return(148528 call . parentDom c"alignment"))
  }
  function BaseSparseDom[148665](?).dsiFirst[148538](arg _mt[148721]:_MT[238], arg this[148719]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148559 call halt "dsiFirst is not implemented")
    const _tmp[148566] "const"(148564 call * rank idxType)
    (148569 'end of statement')
    (148571 return _tmp)
  }
  function BaseSparseDom[148665](?).dsiLast[148577](arg _mt[148725]:_MT[238], arg this[148723]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148598 call halt "dsiLast not implemented")
    const _tmp[148605] "const"(148603 call * rank idxType)
    (148608 'end of statement')
    (148610 return _tmp)
  }
  function BaseSparseDom[148665](?).dsiAlignedLow[148616](arg _mt[148729]:_MT[238], arg this[148727]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148622 return(148619 call . parentDom c"alignedLow"))
  }
  function BaseSparseDom[148665](?).dsiAlignedHigh[148629](arg _mt[148733]:_MT[238], arg this[148731]:BaseSparseDom[148665](?)) : _unknown[51] "method" "primary method" "no parens"
  {
    (148635 return(148632 call . parentDom c"alignedHigh"))
  }
  function BaseSparseDom[148665](?).dsiMakeIndexBuffer[148644](arg _mt[148737]:_MT[238], arg this[148735]:BaseSparseDom[148665](?), arg size[148642]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (148659 return(148646 'new'(148658 call SparseIndexBuffer(rank =(148649 call . this c"rank"))(obj = this)(size = size))))
  }
  type BaseSparseDom[148665](?) unknown rank[148211] "param" int[13] unknown idxType[148215] "type variable" unknown parentDom[148218] BaseDom
  function BaseAssociativeDom[148812].deinit[148745](arg _mt[148816]:_MT[238], arg this[148814]:BaseAssociativeDom[148812]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseAssociativeDom[148812].dsiClear[148752](arg _mt[148820]:_MT[238], arg this[148818]:BaseAssociativeDom[148812]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (148773 call halt "clear not implemented for this distribution")
  }
  function BaseAssociativeDom[148812].dsiAdd[148782](arg _mt[148824]:_MT[238], arg this[148822]:BaseAssociativeDom[148812], in arg idx[148780]:_any[178](?)) : _unknown[51] "method" "primary method"
  {
    (148803 call compilerError "Index addition is not supported by this domain")
    (148807 return 0)
  }
  type BaseAssociativeDom[148812] BaseDom
  function BaseArr[149541].chpl__rvfMe[148842](arg _mt[149545]:_MT[238], arg this[149543]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    (148845 return 0)
  }
  function BaseArr[149541].isSliceArrayView[148852](arg _mt[149549]:_MT[238], arg this[149547]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    (148855 return 0)
  }
  function BaseArr[149541].isRankChangeArrayView[148862](arg _mt[149553]:_MT[238], arg this[149551]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    (148865 return 0)
  }
  function BaseArr[149541].isReindexArrayView[148872](arg _mt[149557]:_MT[238], arg this[149555]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    (148875 return 0)
  }
  function BaseArr[149541].deinit[148882](arg _mt[149561]:_MT[238], arg this[149559]:BaseArr[149541]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseArr[149541].dsiStaticFastFollowCheck[148891](arg _mt[149565]:_MT[238], arg this[149563]:BaseArr[149541], arg leadType[148889]:_any[178](?)) param : _unknown[51] "method" "primary method"
  {
    (148894 return 0)
  }
  function BaseArr[149541].dsiGetBaseDom[148901](arg _mt[149569]:_MT[238], arg this[149567]:BaseArr[149541]) : _unknown[51] "method" "primary method"
  {
    (148924 call halt "internal error: dsiGetBaseDom is not implemented")
    unknown ret[148929] "unsafe"(148928 'to unmanaged class from unknown' BaseDom)
    (148932 'end of statement')
    (148934 return ret)
  }
  { scopeless type
    (148904 'to unmanaged class from unknown' BaseDom)
  }
  function BaseArr[149541].remove[148945](arg _mt[149573]:_MT[238], arg this[149571]:BaseArr[149541], param arg rmFromList[148942] :
  bool[10]) : _unknown[51] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret_arr[148948] this
    (148951 'end of statement')
    unknown ret_dom[148957] nil[44](148955 'to unmanaged class from unknown'(148954 'to nilable class from type' BaseDom))
    (148960 'end of statement')
    unknown rm_dom[148962] 0
    (148965 'end of statement')
    unknown dom[148969](148968 call dsiGetBaseDom)
    (148972 'end of statement')
    (148987 call = rm_dom(148986 call(148977 call . dom c"remove_arr")(148983 call _to_unmanaged this) rmFromList))
    if(148996 call _cond_test rm_dom)
    {
      (148993 call = ret_dom dom)
    }
    (149006 return(149004 call _build_tuple ret_arr ret_dom))
  }
  function BaseArr[149541].dsiElementInitializationComplete[149012](arg _mt[149577]:_MT[238], arg this[149575]:BaseArr[149541]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149033 call halt "dsiElementInitializationComplete must be defined")
  }
  function BaseArr[149541].dsiElementDeinitializationComplete[149040](arg _mt[149581]:_MT[238], arg this[149579]:BaseArr[149541]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149061 call halt "dsiElementDeinitializationComplete must be defined")
  }
  function BaseArr[149541].dsiDestroyArr[149072](arg _mt[149585]:_MT[238], arg this[149583]:BaseArr[149541], arg deinitElts[149069] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149093 call halt "dsiDestroyArr must be defined")
  }
  function BaseArr[149541].dsiReallocate[149104](arg _mt[149589]:_MT[238], arg this[149587]:BaseArr[149541], arg d[149101] :
  _domain) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149125 call halt "reallocating not supported for this array type")
  }
  function BaseArr[149541].dsiPostReallocate[149132](arg _mt[149593]:_MT[238], arg this[149591]:BaseArr[149541]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  function BaseArr[149541]._purge[149143](arg _mt[149597]:_MT[238], arg this[149595]:BaseArr[149541], arg ind[149140] :
  int[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149164 call halt "purging not supported for this array type")
  }
  function BaseArr[149541]._resize[149175](arg _mt[149601]:_MT[238], arg this[149599]:BaseArr[149541], arg length[149172] :
  int[13], arg old_map[149177]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149198 call halt "resizing not supported for this array type")
  }
  function BaseArr[149541].sparseShiftArray[149207](arg _mt[149605]:_MT[238], arg this[149603]:BaseArr[149541], arg shiftrange[149205]:_any[178](?), arg initrange[149209]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149230 call halt "sparseGrowDomain not supported for non-sparse arrays")
  }
  function BaseArr[149541].sparseShiftArrayBack[149239](arg _mt[149609]:_MT[238], arg this[149607]:BaseArr[149541], arg shiftrange[149237]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149260 call halt "sparseShiftArrayBack not supported for non-sparse arrays")
  }
  function BaseArr[149541].sparseBulkShiftArray[149269](arg _mt[149613]:_MT[238], arg this[149611]:BaseArr[149541], arg shiftMap[149267]:_any[178](?), arg oldnnz[149271]:_any[178](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149292 call halt "sparseBulkShiftArray not supported for non-sparse arrays")
  }
  function BaseArr[149541]._defaultInitSlot[149303](arg _mt[149617]:_MT[238], arg this[149615]:BaseArr[149541], arg slot[149300] :
  int[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149324 call halt "_defaultInitSlot() not supported for non-associative arrays")
  }
  function BaseArr[149541]._deinitSlot[149335](arg _mt[149621]:_MT[238], arg this[149619]:BaseArr[149541], arg slot[149332] :
  int[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149356 call halt "_deinitSlot() not supported for non-associative arrays")
  }
  function BaseArr[149541]._startRehash[149367](arg _mt[149625]:_MT[238], arg this[149623]:BaseArr[149541], arg newSize[149364] :
  int[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149388 call halt "_startRehash() not supported for non-associative arrays")
  }
  function BaseArr[149541]._finishRehash[149399](arg _mt[149629]:_MT[238], arg this[149627]:BaseArr[149541], arg oldSize[149396] :
  int[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149420 call halt "_finishRehash() not supported for non-associative arrays")
  }
  function BaseArr[149541]._moveElementDuringRehash[149431](arg _mt[149633]:_MT[238], arg this[149631]:BaseArr[149541], arg oldslot[149428] :
  int[13], arg newslot[149434] :
  int[13]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149456 call halt "_moveElementDuringRehash() not supported for non-associative arrays")
  }
  function BaseArr[149541].dsiSupportsAlignedFollower[149463](arg _mt[149637]:_MT[238], arg this[149635]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    (149466 return 0)
  }
  function BaseArr[149541].dsiSupportsPrivatization[149473](arg _mt[149641]:_MT[238], arg this[149639]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    (149476 return 0)
  }
  function BaseArr[149541].dsiRequiresPrivatization[149483](arg _mt[149645]:_MT[238], arg this[149643]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    (149486 return 0)
  }
  function BaseArr[149541].dsiDisplayRepresentation[149493](arg _mt[149649]:_MT[238], arg this[149647]:BaseArr[149541]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149498 call writeln "<no way to display representation>")
  }
  function BaseArr[149541].isDefaultRectangular[149505](arg _mt[149653]:_MT[238], arg this[149651]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    (149508 return 0)
  }
  function BaseArr[149541].isDefaultRectangular[149515](arg _mt[149657]:_MT[238], arg this[149655]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    (149518 return 0)
  }
  function BaseArr[149541].doiCanBulkTransferRankChange[149525](arg _mt[149661]:_MT[238], arg this[149659]:BaseArr[149541]) param : _unknown[51] "method" "primary method"
  {
    (149528 return 0)
  }
  function BaseArr[149541].decEltCountsIfNeeded[149535](arg _mt[149665]:_MT[238], arg this[149663]:BaseArr[149541]) : _unknown[51] "method" "primary method" "no return value for void"
  {
  }
  type BaseArr[149541] unknown pid[148830] nullPid int[13] unknown _decEltRefCounts[148836] 0 bool[10]
  function AbsBaseArr[149697](?).decEltCountsIfNeeded[149676](arg _mt[149701]:_MT[238], arg this[149699]:AbsBaseArr[149697](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(149689 call _cond_test _decEltRefCounts)
    {
      (149686 call chpl_decRefCountsForDomainsInArrayEltTypes(149683 call _to_unmanaged this) eltType)
    }
  }
  type AbsBaseArr[149697](?) unknown eltType[149671] "type variable" BaseArr
  function BaseArrOverRectangularDom[149762](?).dsiReallocate[149737](arg _mt[149766]:_MT[238], arg this[149764]:BaseArrOverRectangularDom[149762](?), arg bounds[149734] :
  (149732 call * rank(149731 call range idxType(149727 call . BoundedRangeType c"bounded") stridable))) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149742 call halt "reallocating not supported for this array type")
  }
  function BaseArrOverRectangularDom[149762](?).dsiPostReallocate[149749](arg _mt[149770]:_MT[238], arg this[149768]:BaseArrOverRectangularDom[149762](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
  }
  function BaseArrOverRectangularDom[149762](?).deinit[149756](arg _mt[149774]:_MT[238], arg this[149772]:BaseArrOverRectangularDom[149762](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  type BaseArrOverRectangularDom[149762](?) unknown rank[149708] "param" int[13] unknown idxType[149712] "type variable" unknown stridable[149716] "param" bool[10] BaseArr
  function BaseRectangularArr[149813](?).deinit[149785](arg _mt[149817]:_MT[238], arg this[149815]:BaseRectangularArr[149813](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseRectangularArr[149813](?).decEltCountsIfNeeded[149792](arg _mt[149821]:_MT[238], arg this[149819]:BaseRectangularArr[149813](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(149805 call _cond_test _decEltRefCounts)
    {
      (149802 call chpl_decRefCountsForDomainsInArrayEltTypes(149799 call _to_unmanaged this) eltType)
    }
  }
  type BaseRectangularArr[149813](?) unknown eltType[149780] "type variable" BaseArrOverRectangularDom
  function BaseSparseArr[149857](?).dsiGetBaseDom[149841](arg _mt[149861]:_MT[238], arg this[149859]:BaseSparseArr[149857](?)) : _unknown[51] "method" "primary method" "method overrides"
  {
    (149844 return dom)
  }
  function BaseSparseArr[149857](?).deinit[149851](arg _mt[149865]:_MT[238], arg this[149863]:BaseSparseArr[149857](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  type BaseSparseArr[149857](?) unknown rank[149828] "param" int[13] unknown idxType[149832] "type variable" unknown dom[149835] AbsBaseArr
  function BaseSparseArrImpl[150527].init[149891](arg _mt[150531]:_MT[238], arg this[150529]:BaseSparseArrImpl[150527], arg eltType[149889]:_any[178](?), param arg rank[149894] :
  int[13], arg idxType[149897]:_any[178](?), arg dom[149899]:_any[178](?), param arg initElts[149902] :
  bool[10]) : _unknown[51] "method" "primary method" "no return value for void"
  {
    (149918 call(149906 call . super c"init")(eltType = eltType)(rank = rank)(idxType = idxType)(dom = dom))
    (149940 call =(149922 call . this c"data")(149939 call(149932 call .(149929 call .(149926 call . this c"dom") c"nnzDom") c"buildArray") eltType(initElts = initElts)))
  }
  function BaseSparseArrImpl[150527].deinit[149947](arg _mt[150535]:_MT[238], arg this[150533]:BaseSparseArrImpl[150527]) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
  }
  function BaseSparseArrImpl[150527].dsiElementInitializationComplete[149954](arg _mt[150539]:_MT[238], arg this[150537]:BaseSparseArrImpl[150527]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (149961 call(149957 call . data c"dsiElementInitializationComplete"))
  }
  function BaseSparseArrImpl[150527].dsiElementDeinitializationComplete[149968](arg _mt[150543]:_MT[238], arg this[150541]:BaseSparseArrImpl[150527]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    (149975 call(149971 call . data c"dsiElementDeinitializationComplete"))
  }
  function BaseSparseArrImpl[150527].dsiDestroyArr[149986](arg _mt[150547]:_MT[238], arg this[150545]:BaseSparseArrImpl[150527], arg deinitElts[149983] :
  bool[10]) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    if(149994 call _cond_test deinitElts)
    {
      (149992 call _deinitElements data)
    }
  }
  function BaseSparseArrImpl[150527].IRV[150009](arg _mt[150551]:_MT[238], arg this[150549]:BaseSparseArrImpl[150527]) ref : _unknown[51] "method" "primary method" "no parens"
  {
    (150012 return irv)
  }
  function BaseSparseArrImpl[150527].sparseBulkShiftArray[150021](arg _mt[150555]:_MT[238], arg this[150553]:BaseSparseArrImpl[150527], arg shiftMap[150019]:_any[178](?), arg oldnnz[150023]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown newIdx[150026] int[13]
    (150029 'end of statement')
    unknown prevNewIdx[150032] 1
    (150035 'end of statement')
    Forall {
      induction variables:
        
        unknown i[150065] "index var" "insert auto destroy"
      iterated expressions:
        (150054 call chpl_build_bounded_range(150045 call +(150041 call .(150038 call . shiftMap c"_dom") c"high") 1)(150051 call .(150048 call . dom c"nnzDom") c"high"))
      shadow variables:
      other variables
        forall body
      {
        (150061 call =(150059 call data i) irv)
      }
    }
    {
      unknown _indexOfInterest[150187] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150188] "expr temp" "temp"
      (150246 'move' _iterator[150188](150098 call _build_tuple(150205 call _getIterator(150216 call chpl_direct_range_iter 1 oldnnz(150212 call - 1)))(150232 call _getIterator(150219 call chpl_by(150227 call(150221 call .(150223 call . shiftMap c"_dom") c"dim") 0)(150230 call - 1)))))
      Defer
      {
        {
          (150276 call _freeIterator _iterator[150188])
        }
      }
      { scopeless type
        (150251 'move' _indexOfInterest[150187](150248 call iteratorIndex _iterator[150188]))
      }
      ForLoop[150189]
      {
        (150256 call _check_tuple_var_decl _indexOfInterest[150187] 2)
        unknown i[150262] "index var" "insert auto destroy"
        (150264 'move' i[150262](150260 call _indexOfInterest[150187] 0))
        unknown _newIdx[150269] "index var" "insert auto destroy"
        (150271 'move' _newIdx[150269](150267 call _indexOfInterest[150187] 1))
        {
          (150104 call = newIdx(150103 call shiftMap _newIdx))
          (150116 call =(150111 call data newIdx)(150115 call data i))
          {
            unknown _indexOfInterest[150138] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[150139] "expr temp" "temp"
            (150148 'move' _iterator[150139](150146 call _getIterator(150159 call chpl_direct_range_iter(150152 call + newIdx 1)(150156 call - prevNewIdx 1) 1)))
            Defer
            {
              {
                (150175 call _freeIterator _iterator[150139])
              }
            }
            { scopeless type
              (150164 'move' _indexOfInterest[150138](150161 call iteratorIndex _iterator[150139]))
            }
            ForLoop[150140]
            {
              unknown emptyIndex[150168] "index var" "insert auto destroy"
              (150170 'move' emptyIndex[150168] _indexOfInterest[150138])
              (150135 call =(150133 call data emptyIndex) irv)
              label _continueLabel[150143]
              _indexOfInterest[150138]
              _iterator[150139]
            }
            label _breakLabel[150144]
          }
          (150184 call = prevNewIdx newIdx)
        }
        label _continueLabel[150192]
        _indexOfInterest[150187]
        _iterator[150188]
      }
      label _breakLabel[150193]
    }
    {
      unknown _indexOfInterest[150299] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150300] "expr temp" "temp"
      (150309 'move' _iterator[150300](150307 call _getIterator(150317 call chpl_direct_range_iter 1(150314 call - prevNewIdx 1) 1)))
      Defer
      {
        {
          (150333 call _freeIterator _iterator[150300])
        }
      }
      { scopeless type
        (150322 'move' _indexOfInterest[150299](150319 call iteratorIndex _iterator[150300]))
      }
      ForLoop[150301]
      {
        unknown i[150326] "index var" "insert auto destroy"
        (150328 'move' i[150326] _indexOfInterest[150299])
        (150296 call =(150294 call data i) irv)
        label _continueLabel[150304]
        _indexOfInterest[150299]
        _iterator[150300]
      }
      label _breakLabel[150305]
    }
  }
  function BaseSparseArrImpl[150527].sparseShiftArray[150346](arg _mt[150559]:_MT[238], arg this[150557]:BaseSparseArrImpl[150527], arg shiftrange[150344]:_any[178](?), arg initrange[150348]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150361] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150362] "expr temp" "temp"
      (150371 'move' _iterator[150362](150369 call _getIterator initrange))
      Defer
      {
        {
          (150387 call _freeIterator _iterator[150362])
        }
      }
      { scopeless type
        (150376 'move' _indexOfInterest[150361](150373 call iteratorIndex _iterator[150362]))
      }
      ForLoop[150363]
      {
        unknown i[150380] "index var" "insert auto destroy"
        (150382 'move' i[150380] _indexOfInterest[150361])
        {
          (150357 call =(150355 call data i) irv)
        }
        label _continueLabel[150366]
        _indexOfInterest[150361]
        _iterator[150362]
      }
      label _breakLabel[150367]
    }
    {
      unknown _indexOfInterest[150417] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150418] "expr temp" "temp"
      (150427 'move' _iterator[150418](150425 call _getIterator(150400 call chpl_by shiftrange(150398 call - 1))))
      Defer
      {
        {
          (150447 call _freeIterator _iterator[150418])
        }
      }
      { scopeless type
        (150436 'move' _indexOfInterest[150417](150433 call iteratorIndex _iterator[150418]))
      }
      ForLoop[150419]
      {
        unknown i[150440] "index var" "insert auto destroy"
        (150442 'move' i[150440] _indexOfInterest[150417])
        {
          (150413 call =(150408 call data(150405 call + i 1))(150412 call data i))
        }
        label _continueLabel[150422]
        _indexOfInterest[150417]
        _iterator[150418]
      }
      label _breakLabel[150423]
    }
    (150462 call =(150460 call data(150456 call . shiftrange c"low")) irv)
  }
  function BaseSparseArrImpl[150527].sparseShiftArrayBack[150471](arg _mt[150563]:_MT[238], arg this[150561]:BaseSparseArrImpl[150527], arg shiftrange[150469]:_any[178](?)) : _unknown[51] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[150490] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150491] "expr temp" "temp"
      (150500 'move' _iterator[150491](150498 call _getIterator shiftrange))
      Defer
      {
        {
          (150516 call _freeIterator _iterator[150491])
        }
      }
      { scopeless type
        (150505 'move' _indexOfInterest[150490](150502 call iteratorIndex _iterator[150491]))
      }
      ForLoop[150492]
      {
        unknown i[150509] "index var" "insert auto destroy"
        (150511 'move' i[150509] _indexOfInterest[150490])
        {
          (150486 call =(150478 call data i)(150485 call data(150482 call + i 1)))
        }
        label _continueLabel[150495]
        _indexOfInterest[150490]
        _iterator[150491]
      }
      label _breakLabel[150496]
    }
  }
  type BaseSparseArrImpl[150527] unknown data[149883] "local field" "unsafe"(149881 call chpl__buildArrayRuntimeType(149879 call chpl__ensureDomainExpr(149874 call . dom c"nnzDom")) eltType) unknown irv[150003] eltType BaseSparseArr
  function _delete_dist[150573](arg dist[150570] :
  (150569 'to unmanaged class from unknown' BaseDist), arg privatized[150576] :
  bool[10]) : _unknown[51] "no return value for void"
  {
    (150586 call(150582 call . dist c"dsiDestroyDist"))
    if(150603 call _cond_test(150591 call && _privatization privatized))
    {
      (150600 call _freePrivatizedClass(150595 call . dist c"pid") dist)
    }
    (150609 call chpl__delete dist)
  }
  function _delete_dom[150618](arg dom[150616]:_any[178](?), arg privatized[150621] :
  bool[10]) : _unknown[51] "no return value for void"
  {
    (150631 call(150627 call . dom c"dsiDestroyDom"))
    if(150648 call _cond_test(150636 call && _privatization privatized))
    {
      (150645 call _freePrivatizedClass(150640 call . dom c"pid") dom)
    }
    (150654 call chpl__delete dom)
  }
  function _delete_arr[150666](arg arr[150663] :
  (150662 'to unmanaged class from unknown' BaseArr), param arg privatized[150669] :
  bool[10], arg deinitElts[150673] =
  1) : _unknown[51] "no return value for void"
  {
    (150685 call(150679 call . arr c"dsiDestroyArr")(deinitElts = deinitElts))
    (150695 call(150691 call . arr c"decEltCountsIfNeeded"))
    if(150711 call _cond_test(150699 call && _privatization privatized))
    {
      (150708 call _freePrivatizedClass(150703 call . arr c"pid") arr)
    }
    (150717 call chpl__delete arr)
  }
  function chpl_assignDomainWithGetSetIndices[150729](arg lhs[150726] :
  unknown t[150724], arg rhs[150732] :
  _domain) : _unknown[51] "no return value for void"
  {
    unknown arrType[150751] "type variable"(150750 call(150746 call . lhs c"getBaseArrType"))
    unknown rank[150759] "param"(150756 call . lhs c"rank")
    (150762 'end of statement')
    unknown idxType[150767] "type variable"(150764 call . lhs c"idxType")
    unknown stridable[150774] "param"(150771 call . lhs c"stridable")
    (150777 'end of statement')
    {
      unknown _indexOfInterest[150977] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[150978] "expr temp" "temp"
      (150987 'move' _iterator[150978](150985 call _getIterator(150780 call . lhs c"_arrs")))
      Defer
      {
        {
          (151004 call _freeIterator _iterator[150978])
        }
      }
      { scopeless type
        (150993 'move' _indexOfInterest[150977](150990 call iteratorIndex _iterator[150978]))
      }
      ForLoop[150979]
      {
        unknown e[150997] "index var" "insert auto destroy"
        (150999 'move' e[150997] _indexOfInterest[150977])
        {
          const tmp[150968] "const" "temp"
          (150970 'move' tmp[150968](150966 'deref'(150965 '_wide_get_locale' e)))
          {
            {
              unknown eCastQ[150789](150787 call _cast(150786 'to nilable class from type' arrType) e)
              (150792 'end of statement')
              if(150844 call _cond_test(150796 call == eCastQ nil[44]))
              {
                (150842 call halt "internal error: "(150819 call _cast string[26] t) " contains an bad array type "(150840 call _cast string[26] arrType))
              }
              unknown eCast[150852](150850 call postfix! eCastQ)
              (150855 'end of statement')
              unknown inds[150862](150861 call(150857 call . rhs c"getIndices"))
              (150865 'end of statement')
              unknown tmp[150878](150876 call * rank(150875 call range idxType(150871 call . BoundedRangeType c"bounded") stridable))
              (150881 'end of statement')
              {
                unknown i[150920] 0
                unknown tmp[150921] "maybe param" "temp"
                (150933 'move' tmp[150921](150931 call chpl_compute_low_param_loop_bound 0(150885 call - rank 1)))
                unknown tmp[150922] "maybe param" "temp"
                (150943 'move' tmp[150922](150941 call chpl_compute_high_param_loop_bound 0(150938 call - rank 1)))
                unknown tmp[150923] "maybe param" "temp"
                (150946 'move' tmp[150923] 1)
                ParamForLoop[150948]
                { i[150920] tmp[150921] tmp[150922] tmp[150923]
                  {
                    unknown from[150893](150892 call inds i)
                    (150896 'end of statement')
                    (150917 call =(150901 call tmp i)(150916 call(150903 call . from c"safeCast")(150914 call range idxType(150910 call . BoundedRangeType c"bounded") stridable)))
                  }
                }
                label _unused_continueLabel[150925]
                label _breakLabel[150924]
              }
              (150963 call(150958 call . eCast c"dsiReallocate") tmp)
            }
            (150973 'on block' 0 tmp[150968])
          }
        }
        label _continueLabel[150982]
        _indexOfInterest[150977]
        _iterator[150978]
      }
      label _breakLabel[150983]
    }
    (151022 call(151012 call . lhs c"dsiSetIndices")(151020 call(151016 call . rhs c"getIndices")))
    {
      unknown _indexOfInterest[151065] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151066] "expr temp" "temp"
      (151075 'move' _iterator[151066](151073 call _getIterator(151026 call . lhs c"_arrs")))
      Defer
      {
        {
          (151092 call _freeIterator _iterator[151066])
        }
      }
      { scopeless type
        (151081 'move' _indexOfInterest[151065](151078 call iteratorIndex _iterator[151066]))
      }
      ForLoop[151067]
      {
        unknown e[151085] "index var" "insert auto destroy"
        (151087 'move' e[151085] _indexOfInterest[151065])
        {
          unknown eCastQ[151034](151032 call _cast(151031 'to nilable class from type' arrType) e)
          (151037 'end of statement')
          unknown eCast[151042](151040 call postfix! eCastQ)
          (151045 'end of statement')
          const tmp[151057] "const" "temp"
          (151059 'move' tmp[151057](151055 'deref'(151054 '_wide_get_locale' e)))
          {
            (151052 call(151048 call . eCast c"dsiPostReallocate"))
            (151062 'on block' 0 tmp[151057])
          }
        }
        label _continueLabel[151070]
        _indexOfInterest[151065]
        _iterator[151066]
      }
      label _breakLabel[151071]
    }
    if(151111 call _cond_test(151104 call(151100 call . lhs c"dsiSupportsPrivatization")))
    {
      (151108 call _reprivatize lhs)
    }
  }
  where {
    (354331 'is_subtype' BaseRectangularDom(150739 call _to_borrowed t))
  }
  function chpl_assignDomainWithIndsIterSafeForRemoving[151125](arg lhs[151122] :
  unknown t[151120], arg rhs[151128] :
  _domain) : _unknown[51] "no return value for void"
  {
    {
      unknown _indexOfInterest[151181] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151182] "expr temp" "temp"
      (151191 'move' _iterator[151182](151189 call _getIterator(151157 call(151153 call . lhs c"dsiIndsIterSafeForRemoving"))))
      Defer
      {
        {
          (151208 call _freeIterator _iterator[151182])
        }
      }
      { scopeless type
        (151197 'move' _indexOfInterest[151181](151194 call iteratorIndex _iterator[151182]))
      }
      ForLoop[151183]
      {
        unknown i[151201] "index var" "insert auto destroy"
        (151203 'move' i[151201] _indexOfInterest[151181])
        {
          if(151176 call _cond_test(151165 call !(151164 call(151159 call . rhs c"contains") i)))
          {
            (151173 call(151168 call . lhs c"dsiRemove") i)
          }
        }
        label _continueLabel[151186]
        _indexOfInterest[151181]
        _iterator[151182]
      }
      label _breakLabel[151187]
    }
    {
      unknown _indexOfInterest[151241] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[151242] "expr temp" "temp"
      (151251 'move' _iterator[151242](151249 call _getIterator rhs))
      Defer
      {
        {
          (151267 call _freeIterator _iterator[151242])
        }
      }
      { scopeless type
        (151256 'move' _indexOfInterest[151241](151253 call iteratorIndex _iterator[151242]))
      }
      ForLoop[151243]
      {
        unknown i[151260] "index var" "insert auto destroy"
        (151262 'move' i[151260] _indexOfInterest[151241])
        {
          if(151236 call _cond_test(151225 call !(151224 call(151219 call . lhs c"dsiMember") i)))
          {
            (151233 call(151228 call . lhs c"dsiAdd") i)
          }
        }
        label _continueLabel[151246]
        _indexOfInterest[151241]
        _iterator[151242]
      }
      label _breakLabel[151247]
    }
  }
  where {
    (151147 call ||(354332 'is_subtype' BaseSparseDom(151135 call _to_borrowed t))(354333 'is_subtype' BaseAssociativeDom(151143 call _to_borrowed t)))
  }
}