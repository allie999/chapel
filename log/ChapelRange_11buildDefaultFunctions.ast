AST dump for ChapelRange after pass buildDefaultFunctions.
Module use list: ChapelBase SysBasic HaltWrappers Math DSIUtil 

{
  function chpl__init_ChapelRange[415951]() : void[4] "insert line file info" "module init"
  {
    (540985 'init var' debugChapelRange[64195] 0)
    (64198 'end of statement')
    (540987 'init var' useOptimizedRangeIterators[64200] 1)
    (64203 'end of statement')
    {
    }
    (512121 return _void[55])
  }
  unknown debugChapelRange[64195] "config" "no doc" "param"
  unknown useOptimizedRangeIterators[64200] "config" "no doc" "param"
  type BoundedRangeType[64213] def bounded[64205]:BoundedRangeType[64213] def boundedLow[64207]:BoundedRangeType[64213] def boundedHigh[64209]:BoundedRangeType[64213] def boundedNone[64211]:BoundedRangeType[64213]
  function range[64316](?).strType[64294](arg _mt[64320]:_MT[238], arg this[64318]:range[64316](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[508978] "RVV" "temp" "type variable"
    unknown call_tmp[616221] "expr temp" "maybe param" "maybe type" "temp"
    (616224 'move' call_tmp[616221](373687 call idxType _mt[243] this[64318]))
    unknown call_tmp[616226] "expr temp" "maybe param" "maybe type" "temp"
    (616229 'move' call_tmp[616226](64299 call chpl__rangeStrideType call_tmp[616221]))
    (508983 'move' ret[508978](508982 'deref' call_tmp[616226]))
    (508980 return ret[508978])
  }
  function range[64316](?).chpl__promotionType[64307](arg _mt[64324]:_MT[238], arg this[64322]:range[64316](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[508987] "RVV" "temp" "type variable"
    unknown call_tmp[616233] "expr temp" "maybe param" "maybe type" "temp"
    (616236 'move' call_tmp[616233](373692 call idxType _mt[243] this[64322]))
    (508992 'move' ret[508987](508991 'deref' call_tmp[616233]))
    (508989 return ret[508987])
  }
  function range[64316](?).idxType[768020](arg _mt[768022]:_MT[238], arg this[768024]:range[64316](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768043] "RVV" "temp" "type variable"
    unknown call_tmp[768057] "expr temp" "maybe param" "maybe type" "temp"
    (768060 'move' call_tmp[768057](768029 'is bound' this[768024] c"idxType"))
    if call_tmp[768057]
    {
      unknown call_tmp[768062] "expr temp" "maybe param" "maybe type" "temp"
      (768065 'move' call_tmp[768062](768028 '.v' this[768024] c"idxType"))
      (768048 'move' ret[768043](768047 'deref' call_tmp[768062]))
      gotoReturn _end_idxType[768041] _end_idxType[768041]
    }
    {
      (768053 'move' ret[768043](768052 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[768041] _end_idxType[768041]
    }
    label _end_idxType[768041]
    (768045 return ret[768043])
  }
  function range[64316](?).idxType[768067](arg _mt[768069]:_MT[238], arg this[768071]:range[64316](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768090] "RVV" "temp" "type variable"
    unknown call_tmp[768104] "expr temp" "maybe param" "maybe type" "temp"
    (768107 'move' call_tmp[768104](768076 'is bound' this[768071] c"idxType"))
    if call_tmp[768104]
    {
      unknown call_tmp[768109] "expr temp" "maybe param" "maybe type" "temp"
      (768112 'move' call_tmp[768109](768075 '.v' this[768071] c"idxType"))
      (768095 'move' ret[768090](768094 'deref' call_tmp[768109]))
      gotoReturn _end_idxType[768088] _end_idxType[768088]
    }
    {
      (768100 'move' ret[768090](768099 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[768088] _end_idxType[768088]
    }
    label _end_idxType[768088]
    (768092 return ret[768090])
  }
  function range[64316](?).boundedType[768114](arg _mt[768116]:_MT[238], arg this[768118]:range[64316](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768137] "RVV" "param" "temp"
    unknown call_tmp[768151] "expr temp" "maybe param" "maybe type" "temp"
    (768154 'move' call_tmp[768151](768123 'is bound' this[768118] c"boundedType"))
    if call_tmp[768151]
    {
      unknown call_tmp[768156] "expr temp" "maybe param" "maybe type" "temp"
      (768159 'move' call_tmp[768156](768122 '.' this[768118] c"boundedType"))
      (768142 'move' ret[768137](768141 'deref' call_tmp[768156]))
      gotoReturn _end_boundedType[768135] _end_boundedType[768135]
    }
    {
      (768147 'move' ret[768137](768146 'deref' ?[260]))
      gotoReturn _end_boundedType[768135] _end_boundedType[768135]
    }
    label _end_boundedType[768135]
    (768139 return ret[768137])
  }
  function range[64316](?).boundedType[768161](arg _mt[768163]:_MT[238], arg this[768165]:range[64316](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768184] "RVV" "param" "temp"
    unknown call_tmp[768198] "expr temp" "maybe param" "maybe type" "temp"
    (768201 'move' call_tmp[768198](768170 'is bound' this[768165] c"boundedType"))
    if call_tmp[768198]
    {
      unknown call_tmp[768203] "expr temp" "maybe param" "maybe type" "temp"
      (768206 'move' call_tmp[768203](768169 '.' this[768165] c"boundedType"))
      (768189 'move' ret[768184](768188 'deref' call_tmp[768203]))
      gotoReturn _end_boundedType[768182] _end_boundedType[768182]
    }
    {
      (768194 'move' ret[768184](768193 'deref' ?[260]))
      gotoReturn _end_boundedType[768182] _end_boundedType[768182]
    }
    label _end_boundedType[768182]
    (768186 return ret[768184])
  }
  function range[64316](?).stridable[768208](arg _mt[768210]:_MT[238], arg this[768212]:range[64316](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768231] "RVV" "param" "temp"
    unknown call_tmp[768245] "expr temp" "maybe param" "maybe type" "temp"
    (768248 'move' call_tmp[768245](768217 'is bound' this[768212] c"stridable"))
    if call_tmp[768245]
    {
      unknown call_tmp[768250] "expr temp" "maybe param" "maybe type" "temp"
      (768253 'move' call_tmp[768250](768216 '.' this[768212] c"stridable"))
      (768236 'move' ret[768231](768235 'deref' call_tmp[768250]))
      gotoReturn _end_stridable[768229] _end_stridable[768229]
    }
    {
      (768241 'move' ret[768231](768240 'deref' ?[260]))
      gotoReturn _end_stridable[768229] _end_stridable[768229]
    }
    label _end_stridable[768229]
    (768233 return ret[768231])
  }
  function range[64316](?).stridable[768255](arg _mt[768257]:_MT[238], arg this[768259]:range[64316](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768278] "RVV" "param" "temp"
    unknown call_tmp[768292] "expr temp" "maybe param" "maybe type" "temp"
    (768295 'move' call_tmp[768292](768264 'is bound' this[768259] c"stridable"))
    if call_tmp[768292]
    {
      unknown call_tmp[768297] "expr temp" "maybe param" "maybe type" "temp"
      (768300 'move' call_tmp[768297](768263 '.' this[768259] c"stridable"))
      (768283 'move' ret[768278](768282 'deref' call_tmp[768297]))
      gotoReturn _end_stridable[768276] _end_stridable[768276]
    }
    {
      (768288 'move' ret[768278](768287 'deref' ?[260]))
      gotoReturn _end_stridable[768276] _end_stridable[768276]
    }
    label _end_stridable[768276]
    (768280 return ret[768278])
  }
  function range[64316](?)._low[768302](arg _mt[768304]:_MT[238], ref arg this[768306]:range[64316](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768316] "RVV" "temp"
    unknown call_tmp[768323] "expr temp" "maybe param" "maybe type" "temp"
    (768326 'move' call_tmp[768323](768310 '.' this[768306] c"_low"))
    (768321 'move' ret[768316](768320 'addr of' call_tmp[768323]))
    (768318 return ret[768316])
  }
  function range[64316](?)._high[768328](arg _mt[768330]:_MT[238], ref arg this[768332]:range[64316](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768342] "RVV" "temp"
    unknown call_tmp[768349] "expr temp" "maybe param" "maybe type" "temp"
    (768352 'move' call_tmp[768349](768336 '.' this[768332] c"_high"))
    (768347 'move' ret[768342](768346 'addr of' call_tmp[768349]))
    (768344 return ret[768342])
  }
  function range[64316](?)._stride[768354](arg _mt[768356]:_MT[238], ref arg this[768358]:range[64316](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768368] "RVV" "temp"
    unknown call_tmp[768375] "expr temp" "maybe param" "maybe type" "temp"
    (768378 'move' call_tmp[768375](768362 '.' this[768358] c"_stride"))
    (768373 'move' ret[768368](768372 'addr of' call_tmp[768375]))
    (768370 return ret[768368])
  }
  function range[64316](?)._alignment[768380](arg _mt[768382]:_MT[238], ref arg this[768384]:range[64316](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768394] "RVV" "temp"
    unknown call_tmp[768401] "expr temp" "maybe param" "maybe type" "temp"
    (768404 'move' call_tmp[768401](768388 '.' this[768384] c"_alignment"))
    (768399 'move' ret[768394](768398 'addr of' call_tmp[768401]))
    (768396 return ret[768394])
  }
  function range[64316](?)._aligned[768406](arg _mt[768408]:_MT[238], ref arg this[768410]:range[64316](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768420] "RVV" "temp"
    unknown call_tmp[768427] "expr temp" "maybe param" "maybe type" "temp"
    (768430 'move' call_tmp[768427](768414 '.' this[768410] c"_aligned"))
    (768425 'move' ret[768420](768424 'addr of' call_tmp[768427]))
    (768422 return ret[768420])
  }
  function range[64316](?).deinit[768432](arg _mt[768434]:_MT[238], arg this[768436]:range[64316](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (768444 return _void[55])
  }
  function chpl_fields_are_comparable[768458](arg _arg1[768460]:range[64316](?), arg _arg2[768461]:range[64316](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[768540]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[768547] "expr temp" "maybe param" "maybe type" "temp"
    (768550 'move' call_tmp[768547](768464 call boundedType _mt[243] _arg1[768460]))
    unknown call_tmp[768552] "expr temp" "maybe param" "maybe type" "temp"
    (768555 'move' call_tmp[768552](768468 call boundedType _mt[243] _arg2[768461]))
    unknown call_tmp[768557] "expr temp" "maybe param" "maybe type" "temp"
    (768560 'move' call_tmp[768557](768472 'call resolves' c"<" call_tmp[768547] call_tmp[768552]))
    unknown call_tmp[768562] "expr temp" "maybe param" "maybe type" "temp"
    (768565 'move' call_tmp[768562](768474 call stridable _mt[243] _arg1[768460]))
    unknown call_tmp[768567] "expr temp" "maybe param" "maybe type" "temp"
    (768570 'move' call_tmp[768567](768478 call stridable _mt[243] _arg2[768461]))
    unknown call_tmp[768572] "expr temp" "maybe param" "maybe type" "temp"
    (768575 'move' call_tmp[768572](768482 'call resolves' c"<" call_tmp[768562] call_tmp[768567]))
    unknown call_tmp[768577] "expr temp" "maybe param" "maybe type" "temp"
    (768580 'move' call_tmp[768577](768484 call _low _mt[243] _arg1[768460]))
    unknown call_tmp[768582] "expr temp" "maybe param" "maybe type" "temp"
    (768585 'move' call_tmp[768582](768488 call _low _mt[243] _arg2[768461]))
    unknown call_tmp[768587] "expr temp" "maybe param" "maybe type" "temp"
    (768590 'move' call_tmp[768587](768492 'call resolves' c"<" call_tmp[768577] call_tmp[768582]))
    unknown call_tmp[768592] "expr temp" "maybe param" "maybe type" "temp"
    (768595 'move' call_tmp[768592](768494 call _high _mt[243] _arg1[768460]))
    unknown call_tmp[768597] "expr temp" "maybe param" "maybe type" "temp"
    (768600 'move' call_tmp[768597](768498 call _high _mt[243] _arg2[768461]))
    unknown call_tmp[768602] "expr temp" "maybe param" "maybe type" "temp"
    (768605 'move' call_tmp[768602](768502 'call resolves' c"<" call_tmp[768592] call_tmp[768597]))
    unknown call_tmp[768607] "expr temp" "maybe param" "maybe type" "temp"
    (768610 'move' call_tmp[768607](768504 call _stride _mt[243] _arg1[768460]))
    unknown call_tmp[768612] "expr temp" "maybe param" "maybe type" "temp"
    (768615 'move' call_tmp[768612](768508 call _stride _mt[243] _arg2[768461]))
    unknown call_tmp[768617] "expr temp" "maybe param" "maybe type" "temp"
    (768620 'move' call_tmp[768617](768512 'call resolves' c"<" call_tmp[768607] call_tmp[768612]))
    unknown call_tmp[768622] "expr temp" "maybe param" "maybe type" "temp"
    (768625 'move' call_tmp[768622](768514 call _alignment _mt[243] _arg1[768460]))
    unknown call_tmp[768627] "expr temp" "maybe param" "maybe type" "temp"
    (768630 'move' call_tmp[768627](768518 call _alignment _mt[243] _arg2[768461]))
    unknown call_tmp[768632] "expr temp" "maybe param" "maybe type" "temp"
    (768635 'move' call_tmp[768632](768522 'call resolves' c"<" call_tmp[768622] call_tmp[768627]))
    unknown call_tmp[768637] "expr temp" "maybe param" "maybe type" "temp"
    (768640 'move' call_tmp[768637](768524 call _aligned _mt[243] _arg1[768460]))
    unknown call_tmp[768642] "expr temp" "maybe param" "maybe type" "temp"
    (768645 'move' call_tmp[768642](768528 call _aligned _mt[243] _arg2[768461]))
    unknown call_tmp[768647] "expr temp" "maybe param" "maybe type" "temp"
    (768650 'move' call_tmp[768647](768532 'call resolves' c"<" call_tmp[768637] call_tmp[768642]))
    unknown call_tmp[768652] "expr temp" "maybe param" "maybe type" "temp"
    (768655 'move' call_tmp[768652](768534 '&' call_tmp[768557] call_tmp[768572] call_tmp[768587] call_tmp[768602] call_tmp[768617] call_tmp[768632] call_tmp[768647]))
    (768545 'move' ret[768540](768544 'deref' call_tmp[768652]))
    (768542 return ret[768540])
  }
  function <[768446](arg _arg1[768448]:range[64316](?), arg _arg2[768449]:range[64316](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[768879]:bool[10] "RVV" "temp"
    unknown call_tmp[768956] "expr temp" "maybe param" "maybe type" "temp"
    (768959 'move' call_tmp[768956](768663 call boundedType _mt[243] _arg1[768448]))
    unknown call_tmp[768961] "expr temp" "maybe param" "maybe type" "temp"
    (768964 'move' call_tmp[768961](768667 call boundedType _mt[243] _arg2[768449]))
    unknown call_tmp[768966] "expr temp" "maybe param" "maybe type" "temp"
    (768969 'move' call_tmp[768966](768671 call < call_tmp[768956] call_tmp[768961]))
    if call_tmp[768966]
    {
      (768884 'move' ret[768879](768883 'deref' 1))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[768971] "expr temp" "maybe param" "maybe type" "temp"
    (768974 'move' call_tmp[768971](768677 call boundedType _mt[243] _arg1[768448]))
    unknown call_tmp[768976] "expr temp" "maybe param" "maybe type" "temp"
    (768979 'move' call_tmp[768976](768681 call boundedType _mt[243] _arg2[768449]))
    unknown call_tmp[768981] "expr temp" "maybe param" "maybe type" "temp"
    (768984 'move' call_tmp[768981](768685 call > call_tmp[768971] call_tmp[768976]))
    if call_tmp[768981]
    {
      (768889 'move' ret[768879](768888 'deref' 0))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[768986] "expr temp" "maybe param" "maybe type" "temp"
    (768989 'move' call_tmp[768986](768691 call stridable _mt[243] _arg1[768448]))
    unknown call_tmp[768991] "expr temp" "maybe param" "maybe type" "temp"
    (768994 'move' call_tmp[768991](768695 call stridable _mt[243] _arg2[768449]))
    unknown call_tmp[768996] "expr temp" "maybe param" "maybe type" "temp"
    (768999 'move' call_tmp[768996](768699 call < call_tmp[768986] call_tmp[768991]))
    if call_tmp[768996]
    {
      (768894 'move' ret[768879](768893 'deref' 1))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[769001] "expr temp" "maybe param" "maybe type" "temp"
    (769004 'move' call_tmp[769001](768705 call stridable _mt[243] _arg1[768448]))
    unknown call_tmp[769006] "expr temp" "maybe param" "maybe type" "temp"
    (769009 'move' call_tmp[769006](768709 call stridable _mt[243] _arg2[768449]))
    unknown call_tmp[769011] "expr temp" "maybe param" "maybe type" "temp"
    (769014 'move' call_tmp[769011](768713 call > call_tmp[769001] call_tmp[769006]))
    if call_tmp[769011]
    {
      (768899 'move' ret[768879](768898 'deref' 0))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[769016] "expr temp" "maybe param" "maybe type" "temp"
    (769019 'move' call_tmp[769016](768719 call _low _mt[243] _arg1[768448]))
    unknown call_tmp[769021] "expr temp" "maybe param" "maybe type" "temp"
    (769024 'move' call_tmp[769021](768723 call _low _mt[243] _arg2[768449]))
    unknown call_tmp[769026] "expr temp" "maybe param" "maybe type" "temp"
    (769029 'move' call_tmp[769026](768727 call < call_tmp[769016] call_tmp[769021]))
    if call_tmp[769026]
    {
      (768904 'move' ret[768879](768903 'deref' 1))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[769031] "expr temp" "maybe param" "maybe type" "temp"
    (769034 'move' call_tmp[769031](768733 call _low _mt[243] _arg1[768448]))
    unknown call_tmp[769036] "expr temp" "maybe param" "maybe type" "temp"
    (769039 'move' call_tmp[769036](768737 call _low _mt[243] _arg2[768449]))
    unknown call_tmp[769041] "expr temp" "maybe param" "maybe type" "temp"
    (769044 'move' call_tmp[769041](768741 call > call_tmp[769031] call_tmp[769036]))
    if call_tmp[769041]
    {
      (768909 'move' ret[768879](768908 'deref' 0))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[769046] "expr temp" "maybe param" "maybe type" "temp"
    (769049 'move' call_tmp[769046](768747 call _high _mt[243] _arg1[768448]))
    unknown call_tmp[769051] "expr temp" "maybe param" "maybe type" "temp"
    (769054 'move' call_tmp[769051](768751 call _high _mt[243] _arg2[768449]))
    unknown call_tmp[769056] "expr temp" "maybe param" "maybe type" "temp"
    (769059 'move' call_tmp[769056](768755 call < call_tmp[769046] call_tmp[769051]))
    if call_tmp[769056]
    {
      (768914 'move' ret[768879](768913 'deref' 1))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[769061] "expr temp" "maybe param" "maybe type" "temp"
    (769064 'move' call_tmp[769061](768761 call _high _mt[243] _arg1[768448]))
    unknown call_tmp[769066] "expr temp" "maybe param" "maybe type" "temp"
    (769069 'move' call_tmp[769066](768765 call _high _mt[243] _arg2[768449]))
    unknown call_tmp[769071] "expr temp" "maybe param" "maybe type" "temp"
    (769074 'move' call_tmp[769071](768769 call > call_tmp[769061] call_tmp[769066]))
    if call_tmp[769071]
    {
      (768919 'move' ret[768879](768918 'deref' 0))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[769076] "expr temp" "maybe param" "maybe type" "temp"
    (769079 'move' call_tmp[769076](768775 call _stride _mt[243] _arg1[768448]))
    unknown call_tmp[769081] "expr temp" "maybe param" "maybe type" "temp"
    (769084 'move' call_tmp[769081](768779 call _stride _mt[243] _arg2[768449]))
    unknown call_tmp[769086] "expr temp" "maybe param" "maybe type" "temp"
    (769089 'move' call_tmp[769086](768783 call < call_tmp[769076] call_tmp[769081]))
    if call_tmp[769086]
    {
      (768924 'move' ret[768879](768923 'deref' 1))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[769091] "expr temp" "maybe param" "maybe type" "temp"
    (769094 'move' call_tmp[769091](768789 call _stride _mt[243] _arg1[768448]))
    unknown call_tmp[769096] "expr temp" "maybe param" "maybe type" "temp"
    (769099 'move' call_tmp[769096](768793 call _stride _mt[243] _arg2[768449]))
    unknown call_tmp[769101] "expr temp" "maybe param" "maybe type" "temp"
    (769104 'move' call_tmp[769101](768797 call > call_tmp[769091] call_tmp[769096]))
    if call_tmp[769101]
    {
      (768929 'move' ret[768879](768928 'deref' 0))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[769106] "expr temp" "maybe param" "maybe type" "temp"
    (769109 'move' call_tmp[769106](768803 call _alignment _mt[243] _arg1[768448]))
    unknown call_tmp[769111] "expr temp" "maybe param" "maybe type" "temp"
    (769114 'move' call_tmp[769111](768807 call _alignment _mt[243] _arg2[768449]))
    unknown call_tmp[769116] "expr temp" "maybe param" "maybe type" "temp"
    (769119 'move' call_tmp[769116](768811 call < call_tmp[769106] call_tmp[769111]))
    if call_tmp[769116]
    {
      (768934 'move' ret[768879](768933 'deref' 1))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[769121] "expr temp" "maybe param" "maybe type" "temp"
    (769124 'move' call_tmp[769121](768817 call _alignment _mt[243] _arg1[768448]))
    unknown call_tmp[769126] "expr temp" "maybe param" "maybe type" "temp"
    (769129 'move' call_tmp[769126](768821 call _alignment _mt[243] _arg2[768449]))
    unknown call_tmp[769131] "expr temp" "maybe param" "maybe type" "temp"
    (769134 'move' call_tmp[769131](768825 call > call_tmp[769121] call_tmp[769126]))
    if call_tmp[769131]
    {
      (768939 'move' ret[768879](768938 'deref' 0))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[769136] "expr temp" "maybe param" "maybe type" "temp"
    (769139 'move' call_tmp[769136](768831 call _aligned _mt[243] _arg1[768448]))
    unknown call_tmp[769141] "expr temp" "maybe param" "maybe type" "temp"
    (769144 'move' call_tmp[769141](768835 call _aligned _mt[243] _arg2[768449]))
    unknown call_tmp[769146] "expr temp" "maybe param" "maybe type" "temp"
    (769149 'move' call_tmp[769146](768839 call < call_tmp[769136] call_tmp[769141]))
    if call_tmp[769146]
    {
      (768944 'move' ret[768879](768943 'deref' 1))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    unknown call_tmp[769151] "expr temp" "maybe param" "maybe type" "temp"
    (769154 'move' call_tmp[769151](768845 call _aligned _mt[243] _arg1[768448]))
    unknown call_tmp[769156] "expr temp" "maybe param" "maybe type" "temp"
    (769159 'move' call_tmp[769156](768849 call _aligned _mt[243] _arg2[768449]))
    unknown call_tmp[769161] "expr temp" "maybe param" "maybe type" "temp"
    (769164 'move' call_tmp[769161](768853 call > call_tmp[769151] call_tmp[769156]))
    if call_tmp[769161]
    {
      (768949 'move' ret[768879](768948 'deref' 0))
      gotoReturn _end_<[768877] _end_<[768877]
    }
    (768954 'move' ret[768879](768953 'deref' 0))
    label _end_<[768877]
    (768881 return ret[768879])
  }
  where {
    unknown call_tmp[769166] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769169 'move' call_tmp[769166](768452 'typeof' _arg1[768448]))
    unknown call_tmp[769171] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769174 'move' call_tmp[769171](768454 'typeof' _arg2[768449]))
    unknown call_tmp[769176] "expr temp" "maybe param" "maybe type" "temp"
    (769179 'move' call_tmp[769176](768456 call == call_tmp[769166] call_tmp[769171]))
    unknown call_tmp[769181] "expr temp" "maybe param" "maybe type" "temp"
    (769184 'move' call_tmp[769181](768657 call chpl_fields_are_comparable[768458] _arg1[768448] _arg2[768449]))
    (768661 '&' call_tmp[769176] call_tmp[769181])
  }
  function chpl_fields_are_comparable[769198](arg _arg1[769200]:range[64316](?), arg _arg2[769201]:range[64316](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[769280]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[769287] "expr temp" "maybe param" "maybe type" "temp"
    (769290 'move' call_tmp[769287](769204 call boundedType _mt[243] _arg1[769200]))
    unknown call_tmp[769292] "expr temp" "maybe param" "maybe type" "temp"
    (769295 'move' call_tmp[769292](769208 call boundedType _mt[243] _arg2[769201]))
    unknown call_tmp[769297] "expr temp" "maybe param" "maybe type" "temp"
    (769300 'move' call_tmp[769297](769212 'call resolves' c"<=" call_tmp[769287] call_tmp[769292]))
    unknown call_tmp[769302] "expr temp" "maybe param" "maybe type" "temp"
    (769305 'move' call_tmp[769302](769214 call stridable _mt[243] _arg1[769200]))
    unknown call_tmp[769307] "expr temp" "maybe param" "maybe type" "temp"
    (769310 'move' call_tmp[769307](769218 call stridable _mt[243] _arg2[769201]))
    unknown call_tmp[769312] "expr temp" "maybe param" "maybe type" "temp"
    (769315 'move' call_tmp[769312](769222 'call resolves' c"<=" call_tmp[769302] call_tmp[769307]))
    unknown call_tmp[769317] "expr temp" "maybe param" "maybe type" "temp"
    (769320 'move' call_tmp[769317](769224 call _low _mt[243] _arg1[769200]))
    unknown call_tmp[769322] "expr temp" "maybe param" "maybe type" "temp"
    (769325 'move' call_tmp[769322](769228 call _low _mt[243] _arg2[769201]))
    unknown call_tmp[769327] "expr temp" "maybe param" "maybe type" "temp"
    (769330 'move' call_tmp[769327](769232 'call resolves' c"<=" call_tmp[769317] call_tmp[769322]))
    unknown call_tmp[769332] "expr temp" "maybe param" "maybe type" "temp"
    (769335 'move' call_tmp[769332](769234 call _high _mt[243] _arg1[769200]))
    unknown call_tmp[769337] "expr temp" "maybe param" "maybe type" "temp"
    (769340 'move' call_tmp[769337](769238 call _high _mt[243] _arg2[769201]))
    unknown call_tmp[769342] "expr temp" "maybe param" "maybe type" "temp"
    (769345 'move' call_tmp[769342](769242 'call resolves' c"<=" call_tmp[769332] call_tmp[769337]))
    unknown call_tmp[769347] "expr temp" "maybe param" "maybe type" "temp"
    (769350 'move' call_tmp[769347](769244 call _stride _mt[243] _arg1[769200]))
    unknown call_tmp[769352] "expr temp" "maybe param" "maybe type" "temp"
    (769355 'move' call_tmp[769352](769248 call _stride _mt[243] _arg2[769201]))
    unknown call_tmp[769357] "expr temp" "maybe param" "maybe type" "temp"
    (769360 'move' call_tmp[769357](769252 'call resolves' c"<=" call_tmp[769347] call_tmp[769352]))
    unknown call_tmp[769362] "expr temp" "maybe param" "maybe type" "temp"
    (769365 'move' call_tmp[769362](769254 call _alignment _mt[243] _arg1[769200]))
    unknown call_tmp[769367] "expr temp" "maybe param" "maybe type" "temp"
    (769370 'move' call_tmp[769367](769258 call _alignment _mt[243] _arg2[769201]))
    unknown call_tmp[769372] "expr temp" "maybe param" "maybe type" "temp"
    (769375 'move' call_tmp[769372](769262 'call resolves' c"<=" call_tmp[769362] call_tmp[769367]))
    unknown call_tmp[769377] "expr temp" "maybe param" "maybe type" "temp"
    (769380 'move' call_tmp[769377](769264 call _aligned _mt[243] _arg1[769200]))
    unknown call_tmp[769382] "expr temp" "maybe param" "maybe type" "temp"
    (769385 'move' call_tmp[769382](769268 call _aligned _mt[243] _arg2[769201]))
    unknown call_tmp[769387] "expr temp" "maybe param" "maybe type" "temp"
    (769390 'move' call_tmp[769387](769272 'call resolves' c"<=" call_tmp[769377] call_tmp[769382]))
    unknown call_tmp[769392] "expr temp" "maybe param" "maybe type" "temp"
    (769395 'move' call_tmp[769392](769274 '&' call_tmp[769297] call_tmp[769312] call_tmp[769327] call_tmp[769342] call_tmp[769357] call_tmp[769372] call_tmp[769387]))
    (769285 'move' ret[769280](769284 'deref' call_tmp[769392]))
    (769282 return ret[769280])
  }
  function <=[769186](arg _arg1[769188]:range[64316](?), arg _arg2[769189]:range[64316](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[769619]:bool[10] "RVV" "temp"
    unknown call_tmp[769696] "expr temp" "maybe param" "maybe type" "temp"
    (769699 'move' call_tmp[769696](769403 call boundedType _mt[243] _arg1[769188]))
    unknown call_tmp[769701] "expr temp" "maybe param" "maybe type" "temp"
    (769704 'move' call_tmp[769701](769407 call boundedType _mt[243] _arg2[769189]))
    unknown call_tmp[769706] "expr temp" "maybe param" "maybe type" "temp"
    (769709 'move' call_tmp[769706](769411 call < call_tmp[769696] call_tmp[769701]))
    if call_tmp[769706]
    {
      (769624 'move' ret[769619](769623 'deref' 1))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769711] "expr temp" "maybe param" "maybe type" "temp"
    (769714 'move' call_tmp[769711](769417 call boundedType _mt[243] _arg1[769188]))
    unknown call_tmp[769716] "expr temp" "maybe param" "maybe type" "temp"
    (769719 'move' call_tmp[769716](769421 call boundedType _mt[243] _arg2[769189]))
    unknown call_tmp[769721] "expr temp" "maybe param" "maybe type" "temp"
    (769724 'move' call_tmp[769721](769425 call > call_tmp[769711] call_tmp[769716]))
    if call_tmp[769721]
    {
      (769629 'move' ret[769619](769628 'deref' 0))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769726] "expr temp" "maybe param" "maybe type" "temp"
    (769729 'move' call_tmp[769726](769431 call stridable _mt[243] _arg1[769188]))
    unknown call_tmp[769731] "expr temp" "maybe param" "maybe type" "temp"
    (769734 'move' call_tmp[769731](769435 call stridable _mt[243] _arg2[769189]))
    unknown call_tmp[769736] "expr temp" "maybe param" "maybe type" "temp"
    (769739 'move' call_tmp[769736](769439 call < call_tmp[769726] call_tmp[769731]))
    if call_tmp[769736]
    {
      (769634 'move' ret[769619](769633 'deref' 1))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769741] "expr temp" "maybe param" "maybe type" "temp"
    (769744 'move' call_tmp[769741](769445 call stridable _mt[243] _arg1[769188]))
    unknown call_tmp[769746] "expr temp" "maybe param" "maybe type" "temp"
    (769749 'move' call_tmp[769746](769449 call stridable _mt[243] _arg2[769189]))
    unknown call_tmp[769751] "expr temp" "maybe param" "maybe type" "temp"
    (769754 'move' call_tmp[769751](769453 call > call_tmp[769741] call_tmp[769746]))
    if call_tmp[769751]
    {
      (769639 'move' ret[769619](769638 'deref' 0))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769756] "expr temp" "maybe param" "maybe type" "temp"
    (769759 'move' call_tmp[769756](769459 call _low _mt[243] _arg1[769188]))
    unknown call_tmp[769761] "expr temp" "maybe param" "maybe type" "temp"
    (769764 'move' call_tmp[769761](769463 call _low _mt[243] _arg2[769189]))
    unknown call_tmp[769766] "expr temp" "maybe param" "maybe type" "temp"
    (769769 'move' call_tmp[769766](769467 call < call_tmp[769756] call_tmp[769761]))
    if call_tmp[769766]
    {
      (769644 'move' ret[769619](769643 'deref' 1))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769771] "expr temp" "maybe param" "maybe type" "temp"
    (769774 'move' call_tmp[769771](769473 call _low _mt[243] _arg1[769188]))
    unknown call_tmp[769776] "expr temp" "maybe param" "maybe type" "temp"
    (769779 'move' call_tmp[769776](769477 call _low _mt[243] _arg2[769189]))
    unknown call_tmp[769781] "expr temp" "maybe param" "maybe type" "temp"
    (769784 'move' call_tmp[769781](769481 call > call_tmp[769771] call_tmp[769776]))
    if call_tmp[769781]
    {
      (769649 'move' ret[769619](769648 'deref' 0))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769786] "expr temp" "maybe param" "maybe type" "temp"
    (769789 'move' call_tmp[769786](769487 call _high _mt[243] _arg1[769188]))
    unknown call_tmp[769791] "expr temp" "maybe param" "maybe type" "temp"
    (769794 'move' call_tmp[769791](769491 call _high _mt[243] _arg2[769189]))
    unknown call_tmp[769796] "expr temp" "maybe param" "maybe type" "temp"
    (769799 'move' call_tmp[769796](769495 call < call_tmp[769786] call_tmp[769791]))
    if call_tmp[769796]
    {
      (769654 'move' ret[769619](769653 'deref' 1))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769801] "expr temp" "maybe param" "maybe type" "temp"
    (769804 'move' call_tmp[769801](769501 call _high _mt[243] _arg1[769188]))
    unknown call_tmp[769806] "expr temp" "maybe param" "maybe type" "temp"
    (769809 'move' call_tmp[769806](769505 call _high _mt[243] _arg2[769189]))
    unknown call_tmp[769811] "expr temp" "maybe param" "maybe type" "temp"
    (769814 'move' call_tmp[769811](769509 call > call_tmp[769801] call_tmp[769806]))
    if call_tmp[769811]
    {
      (769659 'move' ret[769619](769658 'deref' 0))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769816] "expr temp" "maybe param" "maybe type" "temp"
    (769819 'move' call_tmp[769816](769515 call _stride _mt[243] _arg1[769188]))
    unknown call_tmp[769821] "expr temp" "maybe param" "maybe type" "temp"
    (769824 'move' call_tmp[769821](769519 call _stride _mt[243] _arg2[769189]))
    unknown call_tmp[769826] "expr temp" "maybe param" "maybe type" "temp"
    (769829 'move' call_tmp[769826](769523 call < call_tmp[769816] call_tmp[769821]))
    if call_tmp[769826]
    {
      (769664 'move' ret[769619](769663 'deref' 1))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769831] "expr temp" "maybe param" "maybe type" "temp"
    (769834 'move' call_tmp[769831](769529 call _stride _mt[243] _arg1[769188]))
    unknown call_tmp[769836] "expr temp" "maybe param" "maybe type" "temp"
    (769839 'move' call_tmp[769836](769533 call _stride _mt[243] _arg2[769189]))
    unknown call_tmp[769841] "expr temp" "maybe param" "maybe type" "temp"
    (769844 'move' call_tmp[769841](769537 call > call_tmp[769831] call_tmp[769836]))
    if call_tmp[769841]
    {
      (769669 'move' ret[769619](769668 'deref' 0))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769846] "expr temp" "maybe param" "maybe type" "temp"
    (769849 'move' call_tmp[769846](769543 call _alignment _mt[243] _arg1[769188]))
    unknown call_tmp[769851] "expr temp" "maybe param" "maybe type" "temp"
    (769854 'move' call_tmp[769851](769547 call _alignment _mt[243] _arg2[769189]))
    unknown call_tmp[769856] "expr temp" "maybe param" "maybe type" "temp"
    (769859 'move' call_tmp[769856](769551 call < call_tmp[769846] call_tmp[769851]))
    if call_tmp[769856]
    {
      (769674 'move' ret[769619](769673 'deref' 1))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769861] "expr temp" "maybe param" "maybe type" "temp"
    (769864 'move' call_tmp[769861](769557 call _alignment _mt[243] _arg1[769188]))
    unknown call_tmp[769866] "expr temp" "maybe param" "maybe type" "temp"
    (769869 'move' call_tmp[769866](769561 call _alignment _mt[243] _arg2[769189]))
    unknown call_tmp[769871] "expr temp" "maybe param" "maybe type" "temp"
    (769874 'move' call_tmp[769871](769565 call > call_tmp[769861] call_tmp[769866]))
    if call_tmp[769871]
    {
      (769679 'move' ret[769619](769678 'deref' 0))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769876] "expr temp" "maybe param" "maybe type" "temp"
    (769879 'move' call_tmp[769876](769571 call _aligned _mt[243] _arg1[769188]))
    unknown call_tmp[769881] "expr temp" "maybe param" "maybe type" "temp"
    (769884 'move' call_tmp[769881](769575 call _aligned _mt[243] _arg2[769189]))
    unknown call_tmp[769886] "expr temp" "maybe param" "maybe type" "temp"
    (769889 'move' call_tmp[769886](769579 call < call_tmp[769876] call_tmp[769881]))
    if call_tmp[769886]
    {
      (769684 'move' ret[769619](769683 'deref' 1))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    unknown call_tmp[769891] "expr temp" "maybe param" "maybe type" "temp"
    (769894 'move' call_tmp[769891](769585 call _aligned _mt[243] _arg1[769188]))
    unknown call_tmp[769896] "expr temp" "maybe param" "maybe type" "temp"
    (769899 'move' call_tmp[769896](769589 call _aligned _mt[243] _arg2[769189]))
    unknown call_tmp[769901] "expr temp" "maybe param" "maybe type" "temp"
    (769904 'move' call_tmp[769901](769593 call > call_tmp[769891] call_tmp[769896]))
    if call_tmp[769901]
    {
      (769689 'move' ret[769619](769688 'deref' 0))
      gotoReturn _end_<=[769617] _end_<=[769617]
    }
    (769694 'move' ret[769619](769693 'deref' 1))
    label _end_<=[769617]
    (769621 return ret[769619])
  }
  where {
    unknown call_tmp[769906] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769909 'move' call_tmp[769906](769192 'typeof' _arg1[769188]))
    unknown call_tmp[769911] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769914 'move' call_tmp[769911](769194 'typeof' _arg2[769189]))
    unknown call_tmp[769916] "expr temp" "maybe param" "maybe type" "temp"
    (769919 'move' call_tmp[769916](769196 call == call_tmp[769906] call_tmp[769911]))
    unknown call_tmp[769921] "expr temp" "maybe param" "maybe type" "temp"
    (769924 'move' call_tmp[769921](769397 call chpl_fields_are_comparable[769198] _arg1[769188] _arg2[769189]))
    (769401 '&' call_tmp[769916] call_tmp[769921])
  }
  function chpl_fields_are_comparable[769938](arg _arg1[769940]:range[64316](?), arg _arg2[769941]:range[64316](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[770020]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[770027] "expr temp" "maybe param" "maybe type" "temp"
    (770030 'move' call_tmp[770027](769944 call boundedType _mt[243] _arg1[769940]))
    unknown call_tmp[770032] "expr temp" "maybe param" "maybe type" "temp"
    (770035 'move' call_tmp[770032](769948 call boundedType _mt[243] _arg2[769941]))
    unknown call_tmp[770037] "expr temp" "maybe param" "maybe type" "temp"
    (770040 'move' call_tmp[770037](769952 'call resolves' c">" call_tmp[770027] call_tmp[770032]))
    unknown call_tmp[770042] "expr temp" "maybe param" "maybe type" "temp"
    (770045 'move' call_tmp[770042](769954 call stridable _mt[243] _arg1[769940]))
    unknown call_tmp[770047] "expr temp" "maybe param" "maybe type" "temp"
    (770050 'move' call_tmp[770047](769958 call stridable _mt[243] _arg2[769941]))
    unknown call_tmp[770052] "expr temp" "maybe param" "maybe type" "temp"
    (770055 'move' call_tmp[770052](769962 'call resolves' c">" call_tmp[770042] call_tmp[770047]))
    unknown call_tmp[770057] "expr temp" "maybe param" "maybe type" "temp"
    (770060 'move' call_tmp[770057](769964 call _low _mt[243] _arg1[769940]))
    unknown call_tmp[770062] "expr temp" "maybe param" "maybe type" "temp"
    (770065 'move' call_tmp[770062](769968 call _low _mt[243] _arg2[769941]))
    unknown call_tmp[770067] "expr temp" "maybe param" "maybe type" "temp"
    (770070 'move' call_tmp[770067](769972 'call resolves' c">" call_tmp[770057] call_tmp[770062]))
    unknown call_tmp[770072] "expr temp" "maybe param" "maybe type" "temp"
    (770075 'move' call_tmp[770072](769974 call _high _mt[243] _arg1[769940]))
    unknown call_tmp[770077] "expr temp" "maybe param" "maybe type" "temp"
    (770080 'move' call_tmp[770077](769978 call _high _mt[243] _arg2[769941]))
    unknown call_tmp[770082] "expr temp" "maybe param" "maybe type" "temp"
    (770085 'move' call_tmp[770082](769982 'call resolves' c">" call_tmp[770072] call_tmp[770077]))
    unknown call_tmp[770087] "expr temp" "maybe param" "maybe type" "temp"
    (770090 'move' call_tmp[770087](769984 call _stride _mt[243] _arg1[769940]))
    unknown call_tmp[770092] "expr temp" "maybe param" "maybe type" "temp"
    (770095 'move' call_tmp[770092](769988 call _stride _mt[243] _arg2[769941]))
    unknown call_tmp[770097] "expr temp" "maybe param" "maybe type" "temp"
    (770100 'move' call_tmp[770097](769992 'call resolves' c">" call_tmp[770087] call_tmp[770092]))
    unknown call_tmp[770102] "expr temp" "maybe param" "maybe type" "temp"
    (770105 'move' call_tmp[770102](769994 call _alignment _mt[243] _arg1[769940]))
    unknown call_tmp[770107] "expr temp" "maybe param" "maybe type" "temp"
    (770110 'move' call_tmp[770107](769998 call _alignment _mt[243] _arg2[769941]))
    unknown call_tmp[770112] "expr temp" "maybe param" "maybe type" "temp"
    (770115 'move' call_tmp[770112](770002 'call resolves' c">" call_tmp[770102] call_tmp[770107]))
    unknown call_tmp[770117] "expr temp" "maybe param" "maybe type" "temp"
    (770120 'move' call_tmp[770117](770004 call _aligned _mt[243] _arg1[769940]))
    unknown call_tmp[770122] "expr temp" "maybe param" "maybe type" "temp"
    (770125 'move' call_tmp[770122](770008 call _aligned _mt[243] _arg2[769941]))
    unknown call_tmp[770127] "expr temp" "maybe param" "maybe type" "temp"
    (770130 'move' call_tmp[770127](770012 'call resolves' c">" call_tmp[770117] call_tmp[770122]))
    unknown call_tmp[770132] "expr temp" "maybe param" "maybe type" "temp"
    (770135 'move' call_tmp[770132](770014 '&' call_tmp[770037] call_tmp[770052] call_tmp[770067] call_tmp[770082] call_tmp[770097] call_tmp[770112] call_tmp[770127]))
    (770025 'move' ret[770020](770024 'deref' call_tmp[770132]))
    (770022 return ret[770020])
  }
  function >[769926](arg _arg1[769928]:range[64316](?), arg _arg2[769929]:range[64316](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[770359]:bool[10] "RVV" "temp"
    unknown call_tmp[770436] "expr temp" "maybe param" "maybe type" "temp"
    (770439 'move' call_tmp[770436](770143 call boundedType _mt[243] _arg1[769928]))
    unknown call_tmp[770441] "expr temp" "maybe param" "maybe type" "temp"
    (770444 'move' call_tmp[770441](770147 call boundedType _mt[243] _arg2[769929]))
    unknown call_tmp[770446] "expr temp" "maybe param" "maybe type" "temp"
    (770449 'move' call_tmp[770446](770151 call > call_tmp[770436] call_tmp[770441]))
    if call_tmp[770446]
    {
      (770364 'move' ret[770359](770363 'deref' 1))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770451] "expr temp" "maybe param" "maybe type" "temp"
    (770454 'move' call_tmp[770451](770157 call boundedType _mt[243] _arg1[769928]))
    unknown call_tmp[770456] "expr temp" "maybe param" "maybe type" "temp"
    (770459 'move' call_tmp[770456](770161 call boundedType _mt[243] _arg2[769929]))
    unknown call_tmp[770461] "expr temp" "maybe param" "maybe type" "temp"
    (770464 'move' call_tmp[770461](770165 call < call_tmp[770451] call_tmp[770456]))
    if call_tmp[770461]
    {
      (770369 'move' ret[770359](770368 'deref' 0))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770466] "expr temp" "maybe param" "maybe type" "temp"
    (770469 'move' call_tmp[770466](770171 call stridable _mt[243] _arg1[769928]))
    unknown call_tmp[770471] "expr temp" "maybe param" "maybe type" "temp"
    (770474 'move' call_tmp[770471](770175 call stridable _mt[243] _arg2[769929]))
    unknown call_tmp[770476] "expr temp" "maybe param" "maybe type" "temp"
    (770479 'move' call_tmp[770476](770179 call > call_tmp[770466] call_tmp[770471]))
    if call_tmp[770476]
    {
      (770374 'move' ret[770359](770373 'deref' 1))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770481] "expr temp" "maybe param" "maybe type" "temp"
    (770484 'move' call_tmp[770481](770185 call stridable _mt[243] _arg1[769928]))
    unknown call_tmp[770486] "expr temp" "maybe param" "maybe type" "temp"
    (770489 'move' call_tmp[770486](770189 call stridable _mt[243] _arg2[769929]))
    unknown call_tmp[770491] "expr temp" "maybe param" "maybe type" "temp"
    (770494 'move' call_tmp[770491](770193 call < call_tmp[770481] call_tmp[770486]))
    if call_tmp[770491]
    {
      (770379 'move' ret[770359](770378 'deref' 0))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770496] "expr temp" "maybe param" "maybe type" "temp"
    (770499 'move' call_tmp[770496](770199 call _low _mt[243] _arg1[769928]))
    unknown call_tmp[770501] "expr temp" "maybe param" "maybe type" "temp"
    (770504 'move' call_tmp[770501](770203 call _low _mt[243] _arg2[769929]))
    unknown call_tmp[770506] "expr temp" "maybe param" "maybe type" "temp"
    (770509 'move' call_tmp[770506](770207 call > call_tmp[770496] call_tmp[770501]))
    if call_tmp[770506]
    {
      (770384 'move' ret[770359](770383 'deref' 1))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770511] "expr temp" "maybe param" "maybe type" "temp"
    (770514 'move' call_tmp[770511](770213 call _low _mt[243] _arg1[769928]))
    unknown call_tmp[770516] "expr temp" "maybe param" "maybe type" "temp"
    (770519 'move' call_tmp[770516](770217 call _low _mt[243] _arg2[769929]))
    unknown call_tmp[770521] "expr temp" "maybe param" "maybe type" "temp"
    (770524 'move' call_tmp[770521](770221 call < call_tmp[770511] call_tmp[770516]))
    if call_tmp[770521]
    {
      (770389 'move' ret[770359](770388 'deref' 0))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770526] "expr temp" "maybe param" "maybe type" "temp"
    (770529 'move' call_tmp[770526](770227 call _high _mt[243] _arg1[769928]))
    unknown call_tmp[770531] "expr temp" "maybe param" "maybe type" "temp"
    (770534 'move' call_tmp[770531](770231 call _high _mt[243] _arg2[769929]))
    unknown call_tmp[770536] "expr temp" "maybe param" "maybe type" "temp"
    (770539 'move' call_tmp[770536](770235 call > call_tmp[770526] call_tmp[770531]))
    if call_tmp[770536]
    {
      (770394 'move' ret[770359](770393 'deref' 1))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770541] "expr temp" "maybe param" "maybe type" "temp"
    (770544 'move' call_tmp[770541](770241 call _high _mt[243] _arg1[769928]))
    unknown call_tmp[770546] "expr temp" "maybe param" "maybe type" "temp"
    (770549 'move' call_tmp[770546](770245 call _high _mt[243] _arg2[769929]))
    unknown call_tmp[770551] "expr temp" "maybe param" "maybe type" "temp"
    (770554 'move' call_tmp[770551](770249 call < call_tmp[770541] call_tmp[770546]))
    if call_tmp[770551]
    {
      (770399 'move' ret[770359](770398 'deref' 0))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770556] "expr temp" "maybe param" "maybe type" "temp"
    (770559 'move' call_tmp[770556](770255 call _stride _mt[243] _arg1[769928]))
    unknown call_tmp[770561] "expr temp" "maybe param" "maybe type" "temp"
    (770564 'move' call_tmp[770561](770259 call _stride _mt[243] _arg2[769929]))
    unknown call_tmp[770566] "expr temp" "maybe param" "maybe type" "temp"
    (770569 'move' call_tmp[770566](770263 call > call_tmp[770556] call_tmp[770561]))
    if call_tmp[770566]
    {
      (770404 'move' ret[770359](770403 'deref' 1))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770571] "expr temp" "maybe param" "maybe type" "temp"
    (770574 'move' call_tmp[770571](770269 call _stride _mt[243] _arg1[769928]))
    unknown call_tmp[770576] "expr temp" "maybe param" "maybe type" "temp"
    (770579 'move' call_tmp[770576](770273 call _stride _mt[243] _arg2[769929]))
    unknown call_tmp[770581] "expr temp" "maybe param" "maybe type" "temp"
    (770584 'move' call_tmp[770581](770277 call < call_tmp[770571] call_tmp[770576]))
    if call_tmp[770581]
    {
      (770409 'move' ret[770359](770408 'deref' 0))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770586] "expr temp" "maybe param" "maybe type" "temp"
    (770589 'move' call_tmp[770586](770283 call _alignment _mt[243] _arg1[769928]))
    unknown call_tmp[770591] "expr temp" "maybe param" "maybe type" "temp"
    (770594 'move' call_tmp[770591](770287 call _alignment _mt[243] _arg2[769929]))
    unknown call_tmp[770596] "expr temp" "maybe param" "maybe type" "temp"
    (770599 'move' call_tmp[770596](770291 call > call_tmp[770586] call_tmp[770591]))
    if call_tmp[770596]
    {
      (770414 'move' ret[770359](770413 'deref' 1))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770601] "expr temp" "maybe param" "maybe type" "temp"
    (770604 'move' call_tmp[770601](770297 call _alignment _mt[243] _arg1[769928]))
    unknown call_tmp[770606] "expr temp" "maybe param" "maybe type" "temp"
    (770609 'move' call_tmp[770606](770301 call _alignment _mt[243] _arg2[769929]))
    unknown call_tmp[770611] "expr temp" "maybe param" "maybe type" "temp"
    (770614 'move' call_tmp[770611](770305 call < call_tmp[770601] call_tmp[770606]))
    if call_tmp[770611]
    {
      (770419 'move' ret[770359](770418 'deref' 0))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770616] "expr temp" "maybe param" "maybe type" "temp"
    (770619 'move' call_tmp[770616](770311 call _aligned _mt[243] _arg1[769928]))
    unknown call_tmp[770621] "expr temp" "maybe param" "maybe type" "temp"
    (770624 'move' call_tmp[770621](770315 call _aligned _mt[243] _arg2[769929]))
    unknown call_tmp[770626] "expr temp" "maybe param" "maybe type" "temp"
    (770629 'move' call_tmp[770626](770319 call > call_tmp[770616] call_tmp[770621]))
    if call_tmp[770626]
    {
      (770424 'move' ret[770359](770423 'deref' 1))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    unknown call_tmp[770631] "expr temp" "maybe param" "maybe type" "temp"
    (770634 'move' call_tmp[770631](770325 call _aligned _mt[243] _arg1[769928]))
    unknown call_tmp[770636] "expr temp" "maybe param" "maybe type" "temp"
    (770639 'move' call_tmp[770636](770329 call _aligned _mt[243] _arg2[769929]))
    unknown call_tmp[770641] "expr temp" "maybe param" "maybe type" "temp"
    (770644 'move' call_tmp[770641](770333 call < call_tmp[770631] call_tmp[770636]))
    if call_tmp[770641]
    {
      (770429 'move' ret[770359](770428 'deref' 0))
      gotoReturn _end_>[770357] _end_>[770357]
    }
    (770434 'move' ret[770359](770433 'deref' 0))
    label _end_>[770357]
    (770361 return ret[770359])
  }
  where {
    unknown call_tmp[770646] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (770649 'move' call_tmp[770646](769932 'typeof' _arg1[769928]))
    unknown call_tmp[770651] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (770654 'move' call_tmp[770651](769934 'typeof' _arg2[769929]))
    unknown call_tmp[770656] "expr temp" "maybe param" "maybe type" "temp"
    (770659 'move' call_tmp[770656](769936 call == call_tmp[770646] call_tmp[770651]))
    unknown call_tmp[770661] "expr temp" "maybe param" "maybe type" "temp"
    (770664 'move' call_tmp[770661](770137 call chpl_fields_are_comparable[769938] _arg1[769928] _arg2[769929]))
    (770141 '&' call_tmp[770656] call_tmp[770661])
  }
  function chpl_fields_are_comparable[770678](arg _arg1[770680]:range[64316](?), arg _arg2[770681]:range[64316](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[770760]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[770767] "expr temp" "maybe param" "maybe type" "temp"
    (770770 'move' call_tmp[770767](770684 call boundedType _mt[243] _arg1[770680]))
    unknown call_tmp[770772] "expr temp" "maybe param" "maybe type" "temp"
    (770775 'move' call_tmp[770772](770688 call boundedType _mt[243] _arg2[770681]))
    unknown call_tmp[770777] "expr temp" "maybe param" "maybe type" "temp"
    (770780 'move' call_tmp[770777](770692 'call resolves' c">=" call_tmp[770767] call_tmp[770772]))
    unknown call_tmp[770782] "expr temp" "maybe param" "maybe type" "temp"
    (770785 'move' call_tmp[770782](770694 call stridable _mt[243] _arg1[770680]))
    unknown call_tmp[770787] "expr temp" "maybe param" "maybe type" "temp"
    (770790 'move' call_tmp[770787](770698 call stridable _mt[243] _arg2[770681]))
    unknown call_tmp[770792] "expr temp" "maybe param" "maybe type" "temp"
    (770795 'move' call_tmp[770792](770702 'call resolves' c">=" call_tmp[770782] call_tmp[770787]))
    unknown call_tmp[770797] "expr temp" "maybe param" "maybe type" "temp"
    (770800 'move' call_tmp[770797](770704 call _low _mt[243] _arg1[770680]))
    unknown call_tmp[770802] "expr temp" "maybe param" "maybe type" "temp"
    (770805 'move' call_tmp[770802](770708 call _low _mt[243] _arg2[770681]))
    unknown call_tmp[770807] "expr temp" "maybe param" "maybe type" "temp"
    (770810 'move' call_tmp[770807](770712 'call resolves' c">=" call_tmp[770797] call_tmp[770802]))
    unknown call_tmp[770812] "expr temp" "maybe param" "maybe type" "temp"
    (770815 'move' call_tmp[770812](770714 call _high _mt[243] _arg1[770680]))
    unknown call_tmp[770817] "expr temp" "maybe param" "maybe type" "temp"
    (770820 'move' call_tmp[770817](770718 call _high _mt[243] _arg2[770681]))
    unknown call_tmp[770822] "expr temp" "maybe param" "maybe type" "temp"
    (770825 'move' call_tmp[770822](770722 'call resolves' c">=" call_tmp[770812] call_tmp[770817]))
    unknown call_tmp[770827] "expr temp" "maybe param" "maybe type" "temp"
    (770830 'move' call_tmp[770827](770724 call _stride _mt[243] _arg1[770680]))
    unknown call_tmp[770832] "expr temp" "maybe param" "maybe type" "temp"
    (770835 'move' call_tmp[770832](770728 call _stride _mt[243] _arg2[770681]))
    unknown call_tmp[770837] "expr temp" "maybe param" "maybe type" "temp"
    (770840 'move' call_tmp[770837](770732 'call resolves' c">=" call_tmp[770827] call_tmp[770832]))
    unknown call_tmp[770842] "expr temp" "maybe param" "maybe type" "temp"
    (770845 'move' call_tmp[770842](770734 call _alignment _mt[243] _arg1[770680]))
    unknown call_tmp[770847] "expr temp" "maybe param" "maybe type" "temp"
    (770850 'move' call_tmp[770847](770738 call _alignment _mt[243] _arg2[770681]))
    unknown call_tmp[770852] "expr temp" "maybe param" "maybe type" "temp"
    (770855 'move' call_tmp[770852](770742 'call resolves' c">=" call_tmp[770842] call_tmp[770847]))
    unknown call_tmp[770857] "expr temp" "maybe param" "maybe type" "temp"
    (770860 'move' call_tmp[770857](770744 call _aligned _mt[243] _arg1[770680]))
    unknown call_tmp[770862] "expr temp" "maybe param" "maybe type" "temp"
    (770865 'move' call_tmp[770862](770748 call _aligned _mt[243] _arg2[770681]))
    unknown call_tmp[770867] "expr temp" "maybe param" "maybe type" "temp"
    (770870 'move' call_tmp[770867](770752 'call resolves' c">=" call_tmp[770857] call_tmp[770862]))
    unknown call_tmp[770872] "expr temp" "maybe param" "maybe type" "temp"
    (770875 'move' call_tmp[770872](770754 '&' call_tmp[770777] call_tmp[770792] call_tmp[770807] call_tmp[770822] call_tmp[770837] call_tmp[770852] call_tmp[770867]))
    (770765 'move' ret[770760](770764 'deref' call_tmp[770872]))
    (770762 return ret[770760])
  }
  function >=[770666](arg _arg1[770668]:range[64316](?), arg _arg2[770669]:range[64316](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[771099]:bool[10] "RVV" "temp"
    unknown call_tmp[771176] "expr temp" "maybe param" "maybe type" "temp"
    (771179 'move' call_tmp[771176](770883 call boundedType _mt[243] _arg1[770668]))
    unknown call_tmp[771181] "expr temp" "maybe param" "maybe type" "temp"
    (771184 'move' call_tmp[771181](770887 call boundedType _mt[243] _arg2[770669]))
    unknown call_tmp[771186] "expr temp" "maybe param" "maybe type" "temp"
    (771189 'move' call_tmp[771186](770891 call > call_tmp[771176] call_tmp[771181]))
    if call_tmp[771186]
    {
      (771104 'move' ret[771099](771103 'deref' 1))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771191] "expr temp" "maybe param" "maybe type" "temp"
    (771194 'move' call_tmp[771191](770897 call boundedType _mt[243] _arg1[770668]))
    unknown call_tmp[771196] "expr temp" "maybe param" "maybe type" "temp"
    (771199 'move' call_tmp[771196](770901 call boundedType _mt[243] _arg2[770669]))
    unknown call_tmp[771201] "expr temp" "maybe param" "maybe type" "temp"
    (771204 'move' call_tmp[771201](770905 call < call_tmp[771191] call_tmp[771196]))
    if call_tmp[771201]
    {
      (771109 'move' ret[771099](771108 'deref' 0))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771206] "expr temp" "maybe param" "maybe type" "temp"
    (771209 'move' call_tmp[771206](770911 call stridable _mt[243] _arg1[770668]))
    unknown call_tmp[771211] "expr temp" "maybe param" "maybe type" "temp"
    (771214 'move' call_tmp[771211](770915 call stridable _mt[243] _arg2[770669]))
    unknown call_tmp[771216] "expr temp" "maybe param" "maybe type" "temp"
    (771219 'move' call_tmp[771216](770919 call > call_tmp[771206] call_tmp[771211]))
    if call_tmp[771216]
    {
      (771114 'move' ret[771099](771113 'deref' 1))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771221] "expr temp" "maybe param" "maybe type" "temp"
    (771224 'move' call_tmp[771221](770925 call stridable _mt[243] _arg1[770668]))
    unknown call_tmp[771226] "expr temp" "maybe param" "maybe type" "temp"
    (771229 'move' call_tmp[771226](770929 call stridable _mt[243] _arg2[770669]))
    unknown call_tmp[771231] "expr temp" "maybe param" "maybe type" "temp"
    (771234 'move' call_tmp[771231](770933 call < call_tmp[771221] call_tmp[771226]))
    if call_tmp[771231]
    {
      (771119 'move' ret[771099](771118 'deref' 0))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771236] "expr temp" "maybe param" "maybe type" "temp"
    (771239 'move' call_tmp[771236](770939 call _low _mt[243] _arg1[770668]))
    unknown call_tmp[771241] "expr temp" "maybe param" "maybe type" "temp"
    (771244 'move' call_tmp[771241](770943 call _low _mt[243] _arg2[770669]))
    unknown call_tmp[771246] "expr temp" "maybe param" "maybe type" "temp"
    (771249 'move' call_tmp[771246](770947 call > call_tmp[771236] call_tmp[771241]))
    if call_tmp[771246]
    {
      (771124 'move' ret[771099](771123 'deref' 1))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771251] "expr temp" "maybe param" "maybe type" "temp"
    (771254 'move' call_tmp[771251](770953 call _low _mt[243] _arg1[770668]))
    unknown call_tmp[771256] "expr temp" "maybe param" "maybe type" "temp"
    (771259 'move' call_tmp[771256](770957 call _low _mt[243] _arg2[770669]))
    unknown call_tmp[771261] "expr temp" "maybe param" "maybe type" "temp"
    (771264 'move' call_tmp[771261](770961 call < call_tmp[771251] call_tmp[771256]))
    if call_tmp[771261]
    {
      (771129 'move' ret[771099](771128 'deref' 0))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771266] "expr temp" "maybe param" "maybe type" "temp"
    (771269 'move' call_tmp[771266](770967 call _high _mt[243] _arg1[770668]))
    unknown call_tmp[771271] "expr temp" "maybe param" "maybe type" "temp"
    (771274 'move' call_tmp[771271](770971 call _high _mt[243] _arg2[770669]))
    unknown call_tmp[771276] "expr temp" "maybe param" "maybe type" "temp"
    (771279 'move' call_tmp[771276](770975 call > call_tmp[771266] call_tmp[771271]))
    if call_tmp[771276]
    {
      (771134 'move' ret[771099](771133 'deref' 1))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771281] "expr temp" "maybe param" "maybe type" "temp"
    (771284 'move' call_tmp[771281](770981 call _high _mt[243] _arg1[770668]))
    unknown call_tmp[771286] "expr temp" "maybe param" "maybe type" "temp"
    (771289 'move' call_tmp[771286](770985 call _high _mt[243] _arg2[770669]))
    unknown call_tmp[771291] "expr temp" "maybe param" "maybe type" "temp"
    (771294 'move' call_tmp[771291](770989 call < call_tmp[771281] call_tmp[771286]))
    if call_tmp[771291]
    {
      (771139 'move' ret[771099](771138 'deref' 0))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771296] "expr temp" "maybe param" "maybe type" "temp"
    (771299 'move' call_tmp[771296](770995 call _stride _mt[243] _arg1[770668]))
    unknown call_tmp[771301] "expr temp" "maybe param" "maybe type" "temp"
    (771304 'move' call_tmp[771301](770999 call _stride _mt[243] _arg2[770669]))
    unknown call_tmp[771306] "expr temp" "maybe param" "maybe type" "temp"
    (771309 'move' call_tmp[771306](771003 call > call_tmp[771296] call_tmp[771301]))
    if call_tmp[771306]
    {
      (771144 'move' ret[771099](771143 'deref' 1))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771311] "expr temp" "maybe param" "maybe type" "temp"
    (771314 'move' call_tmp[771311](771009 call _stride _mt[243] _arg1[770668]))
    unknown call_tmp[771316] "expr temp" "maybe param" "maybe type" "temp"
    (771319 'move' call_tmp[771316](771013 call _stride _mt[243] _arg2[770669]))
    unknown call_tmp[771321] "expr temp" "maybe param" "maybe type" "temp"
    (771324 'move' call_tmp[771321](771017 call < call_tmp[771311] call_tmp[771316]))
    if call_tmp[771321]
    {
      (771149 'move' ret[771099](771148 'deref' 0))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771326] "expr temp" "maybe param" "maybe type" "temp"
    (771329 'move' call_tmp[771326](771023 call _alignment _mt[243] _arg1[770668]))
    unknown call_tmp[771331] "expr temp" "maybe param" "maybe type" "temp"
    (771334 'move' call_tmp[771331](771027 call _alignment _mt[243] _arg2[770669]))
    unknown call_tmp[771336] "expr temp" "maybe param" "maybe type" "temp"
    (771339 'move' call_tmp[771336](771031 call > call_tmp[771326] call_tmp[771331]))
    if call_tmp[771336]
    {
      (771154 'move' ret[771099](771153 'deref' 1))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771341] "expr temp" "maybe param" "maybe type" "temp"
    (771344 'move' call_tmp[771341](771037 call _alignment _mt[243] _arg1[770668]))
    unknown call_tmp[771346] "expr temp" "maybe param" "maybe type" "temp"
    (771349 'move' call_tmp[771346](771041 call _alignment _mt[243] _arg2[770669]))
    unknown call_tmp[771351] "expr temp" "maybe param" "maybe type" "temp"
    (771354 'move' call_tmp[771351](771045 call < call_tmp[771341] call_tmp[771346]))
    if call_tmp[771351]
    {
      (771159 'move' ret[771099](771158 'deref' 0))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771356] "expr temp" "maybe param" "maybe type" "temp"
    (771359 'move' call_tmp[771356](771051 call _aligned _mt[243] _arg1[770668]))
    unknown call_tmp[771361] "expr temp" "maybe param" "maybe type" "temp"
    (771364 'move' call_tmp[771361](771055 call _aligned _mt[243] _arg2[770669]))
    unknown call_tmp[771366] "expr temp" "maybe param" "maybe type" "temp"
    (771369 'move' call_tmp[771366](771059 call > call_tmp[771356] call_tmp[771361]))
    if call_tmp[771366]
    {
      (771164 'move' ret[771099](771163 'deref' 1))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    unknown call_tmp[771371] "expr temp" "maybe param" "maybe type" "temp"
    (771374 'move' call_tmp[771371](771065 call _aligned _mt[243] _arg1[770668]))
    unknown call_tmp[771376] "expr temp" "maybe param" "maybe type" "temp"
    (771379 'move' call_tmp[771376](771069 call _aligned _mt[243] _arg2[770669]))
    unknown call_tmp[771381] "expr temp" "maybe param" "maybe type" "temp"
    (771384 'move' call_tmp[771381](771073 call < call_tmp[771371] call_tmp[771376]))
    if call_tmp[771381]
    {
      (771169 'move' ret[771099](771168 'deref' 0))
      gotoReturn _end_>=[771097] _end_>=[771097]
    }
    (771174 'move' ret[771099](771173 'deref' 1))
    label _end_>=[771097]
    (771101 return ret[771099])
  }
  where {
    unknown call_tmp[771386] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (771389 'move' call_tmp[771386](770672 'typeof' _arg1[770668]))
    unknown call_tmp[771391] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (771394 'move' call_tmp[771391](770674 'typeof' _arg2[770669]))
    unknown call_tmp[771396] "expr temp" "maybe param" "maybe type" "temp"
    (771399 'move' call_tmp[771396](770676 call == call_tmp[771386] call_tmp[771391]))
    unknown call_tmp[771401] "expr temp" "maybe param" "maybe type" "temp"
    (771404 'move' call_tmp[771401](770877 call chpl_fields_are_comparable[770678] _arg1[770668] _arg2[770669]))
    (770881 '&' call_tmp[771396] call_tmp[771401])
  }
  type range[64316](?) unknown idxType[64220] "type variable" int(64)[13] unknown boundedType[64230] "param" bounded[64205] BoundedRangeType[64213] unknown stridable[64236] "param" 0 bool[10] unknown _low[64244](64243 call chpl__idxTypeToIntIdxType idxType[64220]) unknown _high[64252](64251 call chpl__idxTypeToIntIdxType idxType[64220]) unknown _stride[64265](64262 IfExpr  stridable[64236] then
  { scopeless
    (64260 call chpl__rangeStrideType idxType[64220])
  } else
  { scopeless
    nothing[7]
  } ) unknown _alignment[64278](64275 IfExpr  stridable[64236] then
  { scopeless
    (64273 call chpl__idxTypeToIntIdxType idxType[64220])
  } else
  { scopeless
    nothing[7]
  } ) unknown _aligned[64288](64285 IfExpr  stridable[64236] then
  { scopeless
    bool[10]
  } else
  { scopeless
    nothing[7]
  } )
  function range[64316](?).intIdxType[64330](arg _mt[64335]:_MT[238], arg this[64332]:range[64316](?) :
  range[64316](?)) type : _unknown[51] "method" "no parens"
  {
    unknown ret[508996] "RVV" "temp" "type variable"
    unknown call_tmp[616240] "expr temp" "maybe param" "maybe type" "temp"
    (616243 'move' call_tmp[616240](373697 call idxType _mt[243] this[64332]))
    unknown call_tmp[616245] "expr temp" "maybe param" "maybe type" "temp"
    (616248 'move' call_tmp[616245](64340 call chpl__idxTypeToIntIdxType call_tmp[616240]))
    (509001 'move' ret[508996](509000 'deref' call_tmp[616245]))
    (508998 return ret[508996])
  }
  function range[64316](?).init[64353](arg _mt[64418]:_MT[238], ref arg this[64415]:range[64316](?) :
  range[64316](?), arg idxType[64350]:_any[178](?) =
  int(64)[13], param arg boundedType[64360]:BoundedRangeType[64213] =
  bounded[64205], param arg stridable[64366]:bool[10] =
  0, arg _low[64376] :
  idxType[64350] =
  (64375 call chpl__intToIdx idxType[64350] 1), arg _high[64386] :
  idxType[64350] =
  (64385 call chpl__intToIdx idxType[64350] 0), arg _stride[64395] :
  (64393 call chpl__rangeStrideType idxType[64350]) =
  1, arg _alignment[64405] :
  idxType[64350] =
  (64404 call chpl__intToIdx idxType[64350] 0), arg _aligned[64411]:bool[10] =
  0) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[454798] "temp" "type variable"
    (454800 'move' tmp[454798] idxType[64350])
    (454802 'init field' this[64415] c"idxType" tmp[454798])
    unknown call_tmp[616250] "expr temp" "maybe param" "maybe type" "temp"
    (616253 'move' call_tmp[616250](454807 call _cast BoundedRangeType[64213] boundedType[64360]))
    (454809 'init field' this[64415] c"boundedType" call_tmp[616250])
    (475227 'end of statement')
    unknown call_tmp[616255] "expr temp" "maybe param" "maybe type" "temp"
    (616258 'move' call_tmp[616255](454813 call _cast bool[10] stridable[64366]))
    (454815 'init field' this[64415] c"stridable" call_tmp[616255])
    (475228 'end of statement')
    unknown call_tmp[616260] "maybe param" "maybe type" "temp"
    (616263 'move' call_tmp[616260](64456 call chpl__idxToInt _low[64376]))
    unknown call_tmp[616265] "expr temp" "maybe param" "maybe type" "temp"
    (616268 'move' call_tmp[616265](454829 '.v' this[64415] c"idxType"))
    unknown call_tmp[616270] "maybe param" "maybe type" "temp"
    (616273 'move' call_tmp[616270](454821 call chpl__idxTypeToIntIdxType call_tmp[616265]))
    unknown tmp[454818] "temp"
    (454823 'init var' tmp[454818] call_tmp[616260] call_tmp[616270])
    (454825 'init field' this[64415] c"_low" tmp[454818])
    (475229 'end of statement')
    unknown call_tmp[616275] "maybe param" "maybe type" "temp"
    (616278 'move' call_tmp[616275](64469 call chpl__idxToInt _high[64386]))
    unknown call_tmp[616280] "expr temp" "maybe param" "maybe type" "temp"
    (616283 'move' call_tmp[616280](454843 '.v' this[64415] c"idxType"))
    unknown call_tmp[616285] "maybe param" "maybe type" "temp"
    (616288 'move' call_tmp[616285](454835 call chpl__idxTypeToIntIdxType call_tmp[616280]))
    unknown tmp[454832] "temp"
    (454837 'init var' tmp[454832] call_tmp[616275] call_tmp[616285])
    (454839 'init field' this[64415] c"_high" tmp[454832])
    (475230 'end of statement')
    unknown tmp[454846] "temp"
    unknown tmp[555366] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555367] "maybe param" "temp"
    unknown call_tmp[616290] "expr temp" "maybe param" "maybe type" "temp"
    (616293 'move' call_tmp[616290](454862 '.v' this[64415] c"stridable"))
    (555372 'move' tmp[555367](555370 call _cond_test call_tmp[616290]))
    if tmp[555367]
    {
      unknown tmp[555374] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616295] "expr temp" "maybe param" "maybe type" "temp"
      (616298 'move' call_tmp[616295](454865 '.v' this[64415] c"idxType"))
      (555376 'move' tmp[555374](454851 call chpl__rangeStrideType call_tmp[616295]))
      (555381 'move' tmp[555366](555378 '_paramFoldLogical' tmp[555367] tmp[555374]))
    }
    {
      (555386 'move' tmp[555366](555383 '_paramFoldLogical' tmp[555367] nothing[7]))
    }
    (454856 'default init var' tmp[454846] tmp[555366])
    (454858 '.=' this[64415] c"_stride" tmp[454846])
    (475231 'end of statement')
    unknown tmp[454868] "temp"
    unknown tmp[555393] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555394] "maybe param" "temp"
    unknown call_tmp[616300] "expr temp" "maybe param" "maybe type" "temp"
    (616303 'move' call_tmp[616300](454884 '.v' this[64415] c"stridable"))
    (555399 'move' tmp[555394](555397 call _cond_test call_tmp[616300]))
    if tmp[555394]
    {
      unknown tmp[555401] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616305] "expr temp" "maybe param" "maybe type" "temp"
      (616308 'move' call_tmp[616305](454887 '.v' this[64415] c"idxType"))
      (555403 'move' tmp[555401](454873 call chpl__idxTypeToIntIdxType call_tmp[616305]))
      (555408 'move' tmp[555393](555405 '_paramFoldLogical' tmp[555394] tmp[555401]))
    }
    {
      (555413 'move' tmp[555393](555410 '_paramFoldLogical' tmp[555394] nothing[7]))
    }
    (454878 'default init var' tmp[454868] tmp[555393])
    (454880 '.=' this[64415] c"_alignment" tmp[454868])
    (475232 'end of statement')
    unknown tmp[454890] "temp"
    unknown tmp[555420] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555421] "maybe param" "temp"
    unknown call_tmp[616310] "expr temp" "maybe param" "maybe type" "temp"
    (616313 'move' call_tmp[616310](454904 '.v' this[64415] c"stridable"))
    (555426 'move' tmp[555421](555424 call _cond_test call_tmp[616310]))
    if tmp[555421]
    {
      (555431 'move' tmp[555420](555428 '_paramFoldLogical' tmp[555421] bool[10]))
    }
    {
      (555436 'move' tmp[555420](555433 '_paramFoldLogical' tmp[555421] nothing[7]))
    }
    (454898 'default init var' tmp[454890] tmp[555420])
    (454900 '.=' this[64415] c"_aligned" tmp[454890])
    (475233 'end of statement')
    unknown call_tmp[616315] "expr temp" "maybe param" "maybe type" "temp"
    (616318 'move' call_tmp[616315](64515 call _cond_test stridable[64366]))
    if call_tmp[616315]
    {
      unknown call_tmp[616322] "expr temp" "maybe param" "maybe type" "temp"
      (616325 'move' call_tmp[616322](64484 call _stride _mt[243] this[64415]))
      (64488 call = call_tmp[616322] _stride[64395])
      (475234 'end of statement')
      unknown call_tmp[616329] "expr temp" "maybe param" "maybe type" "temp"
      (616332 'move' call_tmp[616329](64495 call _alignment _mt[243] this[64415]))
      unknown call_tmp[616334] "expr temp" "maybe param" "maybe type" "temp"
      (616337 'move' call_tmp[616334](64501 call chpl__idxToInt _alignment[64405]))
      (64502 call = call_tmp[616329] call_tmp[616334])
      (475235 'end of statement')
      unknown call_tmp[616341] "expr temp" "maybe param" "maybe type" "temp"
      (616344 'move' call_tmp[616341](64508 call _aligned _mt[243] this[64415]))
      (64512 call = call_tmp[616341] _aligned[64411])
    }
    unknown tmp[419193] "maybe param" "temp"
    (419204 'move' tmp[419193](64520 call ! stridable[64366]))
    unknown call_tmp[616346] "expr temp" "maybe param" "maybe type" "temp"
    (616349 'move' call_tmp[616346](419206 call _cond_invalid tmp[419193]))
    if call_tmp[616346]
    {
      (419209 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555443] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555444] "maybe param" "temp"
    unknown call_tmp[616351] "expr temp" "maybe param" "maybe type" "temp"
    (616354 'move' call_tmp[616351](419194 call isTrue tmp[419193]))
    (555449 'move' tmp[555444](555447 call _cond_test call_tmp[616351]))
    if tmp[555444]
    {
      unknown tmp[555451] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555453 'move' tmp[555451](419197 call isTrue 1))
      (555458 'move' tmp[555443](555455 '_paramFoldLogical' tmp[555444] tmp[555451]))
    }
    {
      (555463 'move' tmp[555443](555460 '_paramFoldLogical' tmp[555444] 0))
    }
    unknown call_tmp[616356] "expr temp" "maybe param" "maybe type" "temp"
    (616359 'move' call_tmp[616356](64533 call _cond_test tmp[555443]))
    if call_tmp[616356]
    {
      unknown call_tmp[616361] "expr temp" "maybe param" "maybe type" "temp"
      (616364 'move' call_tmp[616361](64528 call == _stride[64395] 1))
      (64531 call assert call_tmp[616361])
    }
    (509003 return _void[55])
  }
  function _isAnyNothing[64546](arg args[64543]:_any[178](?) ...) param : _unknown[51] "private"
  {
    unknown ret[509007] "RVV" "param" "temp"
    {
      unknown i[64576] "dead at end of block" "insert auto destroy"
      (540989 'init var' i[64576] 0)
      (475239 'end of statement')
      unknown tmp[64577] "maybe param" "temp"
      unknown call_tmp[616368] "expr temp" "maybe param" "maybe type" "temp"
      (616371 'move' call_tmp[616368](64551 call size _mt[243] args[64543]))
      unknown call_tmp[616373] "expr temp" "maybe param" "maybe type" "temp"
      (616376 'move' call_tmp[616373](64555 call - call_tmp[616368] 1))
      (64589 'move' tmp[64577](64587 call chpl_compute_low_param_loop_bound 0 call_tmp[616373]))
      unknown tmp[64578] "maybe param" "temp"
      unknown call_tmp[616380] "expr temp" "maybe param" "maybe type" "temp"
      (616383 'move' call_tmp[616380](64596 call size _mt[243] args[64543]))
      unknown call_tmp[616385] "expr temp" "maybe param" "maybe type" "temp"
      (616388 'move' call_tmp[616385](64594 call - call_tmp[616380] 1))
      (64602 'move' tmp[64578](64600 call chpl_compute_high_param_loop_bound 0 call_tmp[616385]))
      unknown tmp[64579] "maybe param" "temp"
      (64605 'move' tmp[64579] 1)
      ParamForLoop[64607]
      { i[64576] tmp[64577] tmp[64578] tmp[64579]
        {
          { scopeless type
            unknown call_type_tmp[491843] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[616390] "expr temp" "maybe param" "maybe type" "temp"
            (616393 'move' call_tmp[616390](64563 call args[64543] i[64576]))
            (491847 'move' call_type_tmp[491843](64564 'typeof' call_tmp[616390]))
          }
          unknown call_tmp[616395] "expr temp" "maybe param" "maybe type" "temp"
          (616398 'move' call_tmp[616395](64566 call isNothingType call_type_tmp[491843]))
          unknown call_tmp[616400] "expr temp" "maybe param" "maybe type" "temp"
          (616403 'move' call_tmp[616400](64570 call _cond_test call_tmp[616395]))
          if call_tmp[616400]
          {
            (509013 'move' ret[509007](509012 'coerce' 1 bool[10]))
            gotoReturn _end__isAnyNothing[509005] _end__isAnyNothing[509005]
          }
        }
      }
      label _unused_continueLabel[64581]
      label _breakLabel[64580]
    }
    (509019 'move' ret[509007](509018 'coerce' 0 bool[10]))
    label _end__isAnyNothing[509005]
    (509009 return ret[509007])
  }
  { scopeless type
    bool[10]
  }
  function range[64316](?).init[64630](arg _mt[64676]:_MT[238], ref arg this[64673]:range[64316](?) :
  range[64316](?), arg idxType[64627]:_any[178](?) =
  int(64)[13], param arg boundedType[64637]:BoundedRangeType[64213] =
  bounded[64205], param arg stridable[64643]:bool[10] =
  0, arg _low[64653] :
  idxType[64627] =
  (64652 call chpl__intToIdx idxType[64627] 1), arg _high[64663] :
  idxType[64627] =
  (64662 call chpl__intToIdx idxType[64627] 0), arg _stride[64667]:_any[178](?), arg _alignment[64669]:_any[178](?), arg _aligned[64671]:_any[178](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[454907] "temp" "type variable"
    (454909 'move' tmp[454907] idxType[64627])
    (454911 'init field' this[64673] c"idxType" tmp[454907])
    unknown call_tmp[616405] "expr temp" "maybe param" "maybe type" "temp"
    (616408 'move' call_tmp[616405](454916 call _cast BoundedRangeType[64213] boundedType[64637]))
    (454918 'init field' this[64673] c"boundedType" call_tmp[616405])
    (475242 'end of statement')
    unknown call_tmp[616410] "expr temp" "maybe param" "maybe type" "temp"
    (616413 'move' call_tmp[616410](454922 call _cast bool[10] stridable[64643]))
    (454924 'init field' this[64673] c"stridable" call_tmp[616410])
    (475243 'end of statement')
    unknown call_tmp[616415] "maybe param" "maybe type" "temp"
    (616418 'move' call_tmp[616415](64716 call chpl__idxToInt _low[64653]))
    unknown call_tmp[616420] "expr temp" "maybe param" "maybe type" "temp"
    (616423 'move' call_tmp[616420](454938 '.v' this[64673] c"idxType"))
    unknown call_tmp[616425] "maybe param" "maybe type" "temp"
    (616428 'move' call_tmp[616425](454930 call chpl__idxTypeToIntIdxType call_tmp[616420]))
    unknown tmp[454927] "temp"
    (454932 'init var' tmp[454927] call_tmp[616415] call_tmp[616425])
    (454934 'init field' this[64673] c"_low" tmp[454927])
    (475244 'end of statement')
    unknown call_tmp[616430] "maybe param" "maybe type" "temp"
    (616433 'move' call_tmp[616430](64727 call chpl__idxToInt _high[64663]))
    unknown call_tmp[616435] "expr temp" "maybe param" "maybe type" "temp"
    (616438 'move' call_tmp[616435](454952 '.v' this[64673] c"idxType"))
    unknown call_tmp[616440] "maybe param" "maybe type" "temp"
    (616443 'move' call_tmp[616440](454944 call chpl__idxTypeToIntIdxType call_tmp[616435]))
    unknown tmp[454941] "temp"
    (454946 'init var' tmp[454941] call_tmp[616430] call_tmp[616440])
    (454948 'init field' this[64673] c"_high" tmp[454941])
    (475245 'end of statement')
    unknown tmp[454955] "temp"
    unknown tmp[555470] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555471] "maybe param" "temp"
    unknown call_tmp[616445] "expr temp" "maybe param" "maybe type" "temp"
    (616448 'move' call_tmp[616445](454971 '.v' this[64673] c"stridable"))
    (555476 'move' tmp[555471](555474 call _cond_test call_tmp[616445]))
    if tmp[555471]
    {
      unknown tmp[555478] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616450] "expr temp" "maybe param" "maybe type" "temp"
      (616453 'move' call_tmp[616450](454974 '.v' this[64673] c"idxType"))
      (555480 'move' tmp[555478](454960 call chpl__rangeStrideType call_tmp[616450]))
      (555485 'move' tmp[555470](555482 '_paramFoldLogical' tmp[555471] tmp[555478]))
    }
    {
      (555490 'move' tmp[555470](555487 '_paramFoldLogical' tmp[555471] nothing[7]))
    }
    (454965 'default init var' tmp[454955] tmp[555470])
    (454967 '.=' this[64673] c"_stride" tmp[454955])
    (475246 'end of statement')
    unknown tmp[454977] "temp"
    unknown tmp[555497] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555498] "maybe param" "temp"
    unknown call_tmp[616455] "expr temp" "maybe param" "maybe type" "temp"
    (616458 'move' call_tmp[616455](454993 '.v' this[64673] c"stridable"))
    (555503 'move' tmp[555498](555501 call _cond_test call_tmp[616455]))
    if tmp[555498]
    {
      unknown tmp[555505] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616460] "expr temp" "maybe param" "maybe type" "temp"
      (616463 'move' call_tmp[616460](454996 '.v' this[64673] c"idxType"))
      (555507 'move' tmp[555505](454982 call chpl__idxTypeToIntIdxType call_tmp[616460]))
      (555512 'move' tmp[555497](555509 '_paramFoldLogical' tmp[555498] tmp[555505]))
    }
    {
      (555517 'move' tmp[555497](555514 '_paramFoldLogical' tmp[555498] nothing[7]))
    }
    (454987 'default init var' tmp[454977] tmp[555497])
    (454989 '.=' this[64673] c"_alignment" tmp[454977])
    (475247 'end of statement')
    unknown tmp[454999] "temp"
    unknown tmp[555524] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555525] "maybe param" "temp"
    unknown call_tmp[616465] "expr temp" "maybe param" "maybe type" "temp"
    (616468 'move' call_tmp[616465](455013 '.v' this[64673] c"stridable"))
    (555530 'move' tmp[555525](555528 call _cond_test call_tmp[616465]))
    if tmp[555525]
    {
      (555535 'move' tmp[555524](555532 '_paramFoldLogical' tmp[555525] bool[10]))
    }
    {
      (555540 'move' tmp[555524](555537 '_paramFoldLogical' tmp[555525] nothing[7]))
    }
    (455007 'default init var' tmp[454999] tmp[555524])
    (455009 '.=' this[64673] c"_aligned" tmp[454999])
    (475248 'end of statement')
    unknown call_tmp[616470] "expr temp" "maybe param" "maybe type" "temp"
    (616473 'move' call_tmp[616470](64760 call _cond_test stridable[64643]))
    if call_tmp[616470]
    {
      (64758 call compilerError "non-stridable range initializer called with stridable=true")
    }
    (509021 return _void[55])
  }
  where {
    (64683 call _isAnyNothing _stride[64667] _alignment[64669] _aligned[64671])
  }
  function range[64316](?).init=[64783](arg _mt[64788]:_MT[238], ref arg this[64785]:range[64316](?) :
  range[64316](?), arg other[64780]:range[64316](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown call_tmp[616475] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616478 'move' call_tmp[616475](64791 'typeof' this[64785]))
    unknown call_tmp[616482] "expr temp" "maybe param" "maybe type" "temp"
    (616485 'move' call_tmp[616482](64792 call idxType _mt[243] call_tmp[616475]))
    unknown call_tmp[616487] "expr temp" "maybe param" "maybe type" "temp"
    (616490 'move' call_tmp[616487](64796 call == call_tmp[616482] ?[260]))
    unknown idxType[64807] "dead at end of block" "insert auto destroy" "type variable"(64804 IfExpr  call_tmp[616487] then
    { scopeless
      (455022 'query' other[64780] 1)
    } else
    { scopeless
      unknown call_tmp[616492] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616495 'move' call_tmp[616492](64800 'typeof' this[64785]))
      (64801 call idxType _mt[243] call_tmp[616492])
    } )
    unknown tmp[555547] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555548] "maybe param" "temp"
    unknown call_tmp[616499] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616502 'move' call_tmp[616499](540995 'typeof' this[64785]))
    unknown call_tmp[616506] "expr temp" "maybe param" "maybe type" "temp"
    (616509 'move' call_tmp[616506](540994 call idxType _mt[243] call_tmp[616499]))
    unknown call_tmp[616511] "expr temp" "maybe param" "maybe type" "temp"
    (616514 'move' call_tmp[616511](540992 call == call_tmp[616506] ?[260]))
    (555553 'move' tmp[555548](555551 call _cond_test call_tmp[616511]))
    if tmp[555548]
    {
      unknown tmp[555555] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555557 'move' tmp[555555](541000 'query' other[64780] 1))
      (555562 'move' tmp[555547](555559 '_paramFoldLogical' tmp[555548] tmp[555555]))
    }
    {
      unknown tmp[555564] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616516] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616519 'move' call_tmp[616516](541006 'typeof' this[64785]))
      (555566 'move' tmp[555564](541005 call idxType _mt[243] call_tmp[616516]))
      (555571 'move' tmp[555547](555568 '_paramFoldLogical' tmp[555548] tmp[555564]))
    }
    (541010 'move' idxType[64807] tmp[555547])
    unknown boundedType[64828] "dead at end of block" "param"
    unknown tmp[555578] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555579] "maybe param" "temp"
    unknown call_tmp[616523] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616526 'move' call_tmp[616523](64812 'typeof' this[64785]))
    unknown call_tmp[616530] "expr temp" "maybe param" "maybe type" "temp"
    (616533 'move' call_tmp[616530](64813 call boundedType _mt[243] call_tmp[616523]))
    unknown call_tmp[616535] "expr temp" "maybe param" "maybe type" "temp"
    (616538 'move' call_tmp[616535](64817 call == call_tmp[616530] ?[260]))
    (555584 'move' tmp[555579](555582 call _cond_test call_tmp[616535]))
    if tmp[555579]
    {
      unknown tmp[555586] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555588 'move' tmp[555586](455028 'query' other[64780] 2))
      (555593 'move' tmp[555578](555590 '_paramFoldLogical' tmp[555579] tmp[555586]))
    }
    {
      unknown tmp[555595] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616540] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616543 'move' call_tmp[616540](64821 'typeof' this[64785]))
      (555597 'move' tmp[555595](64822 call boundedType _mt[243] call_tmp[616540]))
      (555602 'move' tmp[555578](555599 '_paramFoldLogical' tmp[555579] tmp[555595]))
    }
    (541012 'init var' boundedType[64828] tmp[555578])
    (64831 'end of statement')
    unknown stridable[64849] "dead at end of block" "param"
    unknown tmp[555609] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555610] "maybe param" "temp"
    unknown call_tmp[616547] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616550 'move' call_tmp[616547](64833 'typeof' this[64785]))
    unknown call_tmp[616554] "expr temp" "maybe param" "maybe type" "temp"
    (616557 'move' call_tmp[616554](64834 call stridable _mt[243] call_tmp[616547]))
    unknown call_tmp[616559] "expr temp" "maybe param" "maybe type" "temp"
    (616562 'move' call_tmp[616559](64838 call == call_tmp[616554] ?[260]))
    (555615 'move' tmp[555610](555613 call _cond_test call_tmp[616559]))
    if tmp[555610]
    {
      unknown tmp[555617] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555619 'move' tmp[555617](455040 'query' other[64780] 3))
      (555624 'move' tmp[555609](555621 '_paramFoldLogical' tmp[555610] tmp[555617]))
    }
    {
      unknown tmp[555626] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616564] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616567 'move' call_tmp[616564](64842 'typeof' this[64785]))
      (555628 'move' tmp[555626](64843 call stridable _mt[243] call_tmp[616564]))
      (555633 'move' tmp[555609](555630 '_paramFoldLogical' tmp[555610] tmp[555626]))
    }
    (541014 'init var' stridable[64849] tmp[555609])
    (64852 'end of statement')
    unknown call_tmp[616571] "expr temp" "maybe param" "maybe type" "temp"
    (616574 'move' call_tmp[616571](455031 'query' other[64780] 2))
    unknown call_tmp[616576] "expr temp" "maybe param" "maybe type" "temp"
    (616579 'move' call_tmp[616576](64855 call != boundedType[64828] call_tmp[616571]))
    unknown call_tmp[616581] "expr temp" "maybe param" "maybe type" "temp"
    (616584 'move' call_tmp[616581](64917 call _cond_test call_tmp[616576]))
    if call_tmp[616581]
    {
      unknown call_tmp[616586] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616589 'move' call_tmp[616586](64876 'typeof' this[64785]))
      unknown call_tmp[616593] "expr temp" "maybe param" "maybe type" "temp"
      (616596 'move' call_tmp[616593](64877 call boundedType _mt[243] call_tmp[616586]))
      unknown call_tmp[616598] "expr temp" "maybe param" "maybe type" "temp"
      (616601 'move' call_tmp[616598](64881 call _cast string[26] call_tmp[616593]))
      unknown call_tmp[616603] "expr temp" "maybe param" "maybe type" "temp"
      (616606 'move' call_tmp[616603](64883 call + "range(boundedType=" call_tmp[616598]))
      unknown call_tmp[616608] "expr temp" "maybe param" "maybe type" "temp"
      (616611 'move' call_tmp[616608](64902 call + call_tmp[616603] ") cannot be initialized from range(boundedType="))
      unknown call_tmp[616613] "expr temp" "maybe param" "maybe type" "temp"
      (616616 'move' call_tmp[616613](455034 'query' other[64780] 2))
      unknown call_tmp[616618] "expr temp" "maybe param" "maybe type" "temp"
      (616621 'move' call_tmp[616618](64906 call _cast string[26] call_tmp[616613]))
      unknown call_tmp[616623] "expr temp" "maybe param" "maybe type" "temp"
      (616626 'move' call_tmp[616623](64908 call + call_tmp[616608] call_tmp[616618]))
      unknown call_tmp[616628] "expr temp" "maybe param" "maybe type" "temp"
      (616631 'move' call_tmp[616628](64911 call + call_tmp[616623] ")"))
      (64914 call compilerError call_tmp[616628])
    }
    unknown tmp[419214] "maybe param" "temp"
    (419225 'move' tmp[419214](64922 call ! stridable[64849]))
    unknown call_tmp[616633] "expr temp" "maybe param" "maybe type" "temp"
    (616636 'move' call_tmp[616633](419227 call _cond_invalid tmp[419214]))
    if call_tmp[616633]
    {
      (419230 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555640] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555641] "maybe param" "temp"
    unknown call_tmp[616638] "expr temp" "maybe param" "maybe type" "temp"
    (616641 'move' call_tmp[616638](419215 call isTrue tmp[419214]))
    (555646 'move' tmp[555641](555644 call _cond_test call_tmp[616638]))
    if tmp[555641]
    {
      unknown tmp[555648] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616643] "expr temp" "maybe param" "maybe type" "temp"
      (616646 'move' call_tmp[616643](455043 'query' other[64780] 3))
      (555650 'move' tmp[555648](419218 call isTrue call_tmp[616643]))
      (555655 'move' tmp[555640](555652 '_paramFoldLogical' tmp[555641] tmp[555648]))
    }
    {
      (555660 'move' tmp[555640](555657 '_paramFoldLogical' tmp[555641] 0))
    }
    unknown call_tmp[616648] "expr temp" "maybe param" "maybe type" "temp"
    (616651 'move' call_tmp[616648](64948 call _cond_test tmp[555640]))
    if call_tmp[616648]
    {
      (64946 call compilerError "cannot initialize a non-stridable range from a stridable range")
    }
    unknown tmp[419235] "maybe param" "temp"
    (419246 'move' tmp[419235] stridable[64849])
    unknown call_tmp[616653] "expr temp" "maybe param" "maybe type" "temp"
    (616656 'move' call_tmp[616653](419248 call _cond_invalid tmp[419235]))
    if call_tmp[616653]
    {
      (419251 call compilerError "cannot promote short-circuiting && operator")
    }
    const str[64971] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[555667] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555668] "maybe param" "temp"
    unknown call_tmp[616658] "expr temp" "maybe param" "maybe type" "temp"
    (616661 'move' call_tmp[616658](419236 call isTrue tmp[419235]))
    (555673 'move' tmp[555668](555671 call _cond_test call_tmp[616658]))
    if tmp[555668]
    {
      unknown tmp[555675] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616663] "expr temp" "maybe param" "maybe type" "temp"
      (616666 'move' call_tmp[616663](455046 'query' other[64780] 3))
      (555677 'move' tmp[555675](419239 call isTrue call_tmp[616663]))
      (555682 'move' tmp[555667](555679 '_paramFoldLogical' tmp[555668] tmp[555675]))
    }
    {
      (555687 'move' tmp[555667](555684 '_paramFoldLogical' tmp[555668] 0))
    }
    unknown tmp[555694] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555695] "maybe param" "temp"
    (555700 'move' tmp[555695](555698 call _cond_test tmp[555667]))
    if tmp[555695]
    {
      unknown tmp[555702] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555704 'move' tmp[555702](64958 call stride _mt[243] other[64780]))
      (555709 'move' tmp[555694](555706 '_paramFoldLogical' tmp[555695] tmp[555702]))
    }
    {
      unknown tmp[555711] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616670] "expr temp" "maybe param" "maybe type" "temp"
      (616673 'move' call_tmp[616670](64965 call chpl__rangeStrideType idxType[64807]))
      (555713 'move' tmp[555711](64966 call _cast call_tmp[616670] 1))
      (555718 'move' tmp[555694](555715 '_paramFoldLogical' tmp[555695] tmp[555711]))
    }
    (541016 'init var' str[64971] tmp[555694])
    (64974 'end of statement' idxType[64807])
    unknown call_tmp[616679] "expr temp" "maybe param" "maybe type" "temp"
    (616682 'move' call_tmp[616679](64987 call _low _mt[243] other[64780]))
    unknown call_tmp[616684] "expr temp" "maybe param" "maybe type" "temp"
    (616687 'move' call_tmp[616684](64990 call chpl__intToIdx idxType[64807] call_tmp[616679]))
    unknown call_tmp[616691] "expr temp" "maybe param" "maybe type" "temp"
    (616694 'move' call_tmp[616691](64995 call _high _mt[243] other[64780]))
    unknown call_tmp[616696] "expr temp" "maybe param" "maybe type" "temp"
    (616699 'move' call_tmp[616696](64998 call chpl__intToIdx idxType[64807] call_tmp[616691]))
    unknown call_tmp[616703] "expr temp" "maybe param" "maybe type" "temp"
    (616706 'move' call_tmp[616703](65007 call alignment _mt[243] other[64780]))
    unknown call_tmp[616708] "expr temp" "maybe param" "maybe type" "temp"
    (616711 'move' call_tmp[616708](65011 call chpl__idxToInt call_tmp[616703]))
    unknown call_tmp[616713] "expr temp" "maybe param" "maybe type" "temp"
    (616716 'move' call_tmp[616713](65012 call chpl__intToIdx idxType[64807] call_tmp[616708]))
    unknown call_tmp[616720] "expr temp" "maybe param" "maybe type" "temp"
    (616723 'move' call_tmp[616720](65016 call aligned _mt[243] other[64780]))
    (65019 call(64976 call (partial) init _mt[243] this[64785]) idxType[64807] boundedType[64828] stridable[64849] call_tmp[616684] call_tmp[616696] str[64971] call_tmp[616713] call_tmp[616720])
    (475255 'end of statement' idxType[64807] idxType[64807] idxType[64807] str[64971] idxType[64807])
    (509023 return _void[55])
  }
  function range[64316](?).displayRepresentation[65048](arg _mt[65053]:_MT[238], arg this[65050]:range[64316](?) :
  range[64316](?), arg msg[65044]:string[26] =
  "") : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown ret[509027] "RVV" "temp"
    unknown tmp[555725] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555726] "maybe param" "temp"
    unknown call_tmp[616727] "expr temp" "maybe param" "maybe type" "temp"
    (616730 'move' call_tmp[616727](373791 call aligned _mt[243] this[65050]))
    (555731 'move' tmp[555726](555729 call _cond_test call_tmp[616727]))
    if tmp[555726]
    {
      unknown tmp[555733] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616734] "expr temp" "maybe param" "maybe type" "temp"
      (616737 'move' call_tmp[616734](373795 call alignment _mt[243] this[65050]))
      (555735 'move' tmp[555733](65126 call _cast string[26] call_tmp[616734]))
      (555740 'move' tmp[555725](555737 '_paramFoldLogical' tmp[555726] tmp[555733]))
    }
    {
      (555745 'move' tmp[555725](555742 '_paramFoldLogical' tmp[555726] "\?"))
    }
    unknown call_tmp[616741] "expr temp" "maybe param" "maybe type" "temp"
    (616744 'move' call_tmp[616741](373765 call idxType _mt[243] this[65050]))
    unknown call_tmp[616746] "expr temp" "maybe param" "maybe type" "temp"
    (616749 'move' call_tmp[616746](65078 call _cast string[26] call_tmp[616741]))
    unknown call_tmp[616753] "expr temp" "maybe param" "maybe type" "temp"
    (616756 'move' call_tmp[616753](373770 call boundedType _mt[243] this[65050]))
    unknown call_tmp[616760] "expr temp" "maybe param" "maybe type" "temp"
    (616763 'move' call_tmp[616760](373775 call stridable _mt[243] this[65050]))
    unknown call_tmp[616767] "expr temp" "maybe param" "maybe type" "temp"
    (616770 'move' call_tmp[616767](373779 call low _mt[243] this[65050]))
    unknown call_tmp[616774] "expr temp" "maybe param" "maybe type" "temp"
    (616777 'move' call_tmp[616774](373783 call high _mt[243] this[65050]))
    unknown call_tmp[616781] "expr temp" "maybe param" "maybe type" "temp"
    (616784 'move' call_tmp[616781](373787 call stride _mt[243] this[65050]))
    (65149 call chpl_debug_writeln msg[65044] "(" call_tmp[616746] "," call_tmp[616753] "," call_tmp[616760] " : " call_tmp[616767] "," call_tmp[616774] "," call_tmp[616781] "," tmp[555725] ")")
    (509029 return ret[509027])
  }
  { scopeless type
    void[4]
  }
  function chpl_build_bounded_range[455137](arg low[455144] :
  (455141 call int(64)[13] 64), arg high[455150] :
  (455148 call int(64)[13] 64)) : _unknown[51]
  {
    unknown ret[509033] "RVV" "temp"
    unknown call_tmp[616786] "expr temp" "maybe param" "maybe type" "temp"
    (616789 'move' call_tmp[616786](455158 call int(64)[13] 64))
    unknown call_tmp[616791] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616794 'move' call_tmp[616791](747760 'new' range[64316](?) call_tmp[616786](_low = low[455144])(_high = high[455150])))
    (509038 'move' ret[509033](509037 'deref' call_tmp[616791]))
    (509035 return ret[509033])
  }
  function chpl_build_bounded_range[455108](arg low[455115] :
  (455112 call int(64)[13] 32), arg high[455121] :
  (455119 call int(64)[13] 32)) : _unknown[51]
  {
    unknown ret[509042] "RVV" "temp"
    unknown call_tmp[616796] "expr temp" "maybe param" "maybe type" "temp"
    (616799 'move' call_tmp[616796](455129 call int(64)[13] 32))
    unknown call_tmp[616801] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616804 'move' call_tmp[616801](747761 'new' range[64316](?) call_tmp[616796](_low = low[455115])(_high = high[455121])))
    (509047 'move' ret[509042](509046 'deref' call_tmp[616801]))
    (509044 return ret[509042])
  }
  function chpl_build_bounded_range[455079](arg low[455086] :
  (455083 call int(64)[13] 16), arg high[455092] :
  (455090 call int(64)[13] 16)) : _unknown[51]
  {
    unknown ret[509051] "RVV" "temp"
    unknown call_tmp[616806] "expr temp" "maybe param" "maybe type" "temp"
    (616809 'move' call_tmp[616806](455100 call int(64)[13] 16))
    unknown call_tmp[616811] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616814 'move' call_tmp[616811](747762 'new' range[64316](?) call_tmp[616806](_low = low[455086])(_high = high[455092])))
    (509056 'move' ret[509051](509055 'deref' call_tmp[616811]))
    (509053 return ret[509051])
  }
  function chpl_build_bounded_range[455050](arg low[455057] :
  (455054 call int(64)[13] 8), arg high[455063] :
  (455061 call int(64)[13] 8)) : _unknown[51]
  {
    unknown ret[509060] "RVV" "temp"
    unknown call_tmp[616816] "expr temp" "maybe param" "maybe type" "temp"
    (616819 'move' call_tmp[616816](455071 call int(64)[13] 8))
    unknown call_tmp[616821] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616824 'move' call_tmp[616821](747763 'new' range[64316](?) call_tmp[616816](_low = low[455057])(_high = high[455063])))
    (509065 'move' ret[509060](509064 'deref' call_tmp[616821]))
    (509062 return ret[509060])
  }
  function chpl_build_bounded_range[455253](arg low[455260] :
  (455257 call uint(64)[115] 64), arg high[455266] :
  (455264 call uint(64)[115] 64)) : _unknown[51]
  {
    unknown ret[509069] "RVV" "temp"
    unknown call_tmp[616826] "expr temp" "maybe param" "maybe type" "temp"
    (616829 'move' call_tmp[616826](455274 call uint(64)[115] 64))
    unknown call_tmp[616831] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616834 'move' call_tmp[616831](747764 'new' range[64316](?) call_tmp[616826](_low = low[455260])(_high = high[455266])))
    (509074 'move' ret[509069](509073 'deref' call_tmp[616831]))
    (509071 return ret[509069])
  }
  function chpl_build_bounded_range[455224](arg low[455231] :
  (455228 call uint(64)[115] 32), arg high[455237] :
  (455235 call uint(64)[115] 32)) : _unknown[51]
  {
    unknown ret[509078] "RVV" "temp"
    unknown call_tmp[616836] "expr temp" "maybe param" "maybe type" "temp"
    (616839 'move' call_tmp[616836](455245 call uint(64)[115] 32))
    unknown call_tmp[616841] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616844 'move' call_tmp[616841](747765 'new' range[64316](?) call_tmp[616836](_low = low[455231])(_high = high[455237])))
    (509083 'move' ret[509078](509082 'deref' call_tmp[616841]))
    (509080 return ret[509078])
  }
  function chpl_build_bounded_range[455195](arg low[455202] :
  (455199 call uint(64)[115] 16), arg high[455208] :
  (455206 call uint(64)[115] 16)) : _unknown[51]
  {
    unknown ret[509087] "RVV" "temp"
    unknown call_tmp[616846] "expr temp" "maybe param" "maybe type" "temp"
    (616849 'move' call_tmp[616846](455216 call uint(64)[115] 16))
    unknown call_tmp[616851] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616854 'move' call_tmp[616851](747766 'new' range[64316](?) call_tmp[616846](_low = low[455202])(_high = high[455208])))
    (509092 'move' ret[509087](509091 'deref' call_tmp[616851]))
    (509089 return ret[509087])
  }
  function chpl_build_bounded_range[455166](arg low[455173] :
  (455170 call uint(64)[115] 8), arg high[455179] :
  (455177 call uint(64)[115] 8)) : _unknown[51]
  {
    unknown ret[509096] "RVV" "temp"
    unknown call_tmp[616856] "expr temp" "maybe param" "maybe type" "temp"
    (616859 'move' call_tmp[616856](455187 call uint(64)[115] 8))
    unknown call_tmp[616861] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616864 'move' call_tmp[616861](747767 'new' range[64316](?) call_tmp[616856](_low = low[455173])(_high = high[455179])))
    (509101 'move' ret[509096](509100 'deref' call_tmp[616861]))
    (509098 return ret[509096])
  }
  function chpl_build_bounded_range[65233](arg low[65230]:enum[187](?), arg high[65236]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509105] "RVV" "temp"
    unknown call_tmp[616866] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616869 'move' call_tmp[616866](65240 'typeof' low[65230]))
    unknown call_tmp[616871] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616874 'move' call_tmp[616871](65242 'typeof' high[65236]))
    unknown call_tmp[616876] "expr temp" "maybe param" "maybe type" "temp"
    (616879 'move' call_tmp[616876](65243 call != call_tmp[616866] call_tmp[616871]))
    unknown call_tmp[616881] "expr temp" "maybe param" "maybe type" "temp"
    (616884 'move' call_tmp[616881](65266 call _cond_test call_tmp[616876]))
    if call_tmp[616881]
    {
      (65264 call compilerError "ranges of enums must use a single enum type")
    }
    unknown call_tmp[616886] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616889 'move' call_tmp[616886](65275 'typeof' low[65230]))
    unknown call_tmp[616891] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616894 'move' call_tmp[616891](747768 'new' range[64316](?) call_tmp[616886](_low = low[65230])(_high = high[65236])))
    (509110 'move' ret[509105](509109 'deref' call_tmp[616891]))
    (509107 return ret[509105])
  }
  function chpl_build_bounded_range[65292](arg low[65289]:bool[10], arg high[65295]:bool[10]) : _unknown[51]
  {
    unknown ret[509114] "RVV" "temp"
    unknown call_tmp[616896] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616899 'move' call_tmp[616896](747769 'new' range[64316](?) bool[10](_low = low[65289])(_high = high[65295])))
    (509119 'move' ret[509114](509118 'deref' call_tmp[616896]))
    (509116 return ret[509114])
  }
  function chpl_build_bounded_range[65316](arg low[65314]:_any[178](?), arg high[65318]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65339 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (509121 return _void[55])
  }
  function chpl_build_low_bounded_range[65350](arg low[65347]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509125] "RVV" "temp"
    unknown call_tmp[616901] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616904 'move' call_tmp[616901](65355 'typeof' low[65347]))
    unknown call_tmp[616906] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616909 'move' call_tmp[616906](747770 'new' range[64316](?) call_tmp[616901] boundedLow[64207](_low = low[65347])))
    (509130 'move' ret[509125](509129 'deref' call_tmp[616906]))
    (509127 return ret[509125])
  }
  function chpl_build_low_bounded_range[65375](arg low[65372]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509134] "RVV" "temp"
    unknown call_tmp[616911] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616914 'move' call_tmp[616911](65380 'typeof' low[65372]))
    unknown call_tmp[616916] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616919 'move' call_tmp[616916](747771 'new' range[64316](?) call_tmp[616911] boundedLow[64207](_low = low[65372])))
    (509139 'move' ret[509134](509138 'deref' call_tmp[616916]))
    (509136 return ret[509134])
  }
  function chpl_build_low_bounded_range[65400](arg low[65397]:bool[10]) : _unknown[51]
  {
    unknown ret[509143] "RVV" "temp"
    unknown call_tmp[616921] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616924 'move' call_tmp[616921](65405 'typeof' low[65397]))
    unknown call_tmp[616926] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616929 'move' call_tmp[616926](747772 'new' range[64316](?) call_tmp[616921] boundedLow[64207](_low = low[65397])))
    (509148 'move' ret[509143](509147 'deref' call_tmp[616926]))
    (509145 return ret[509143])
  }
  function chpl_build_low_bounded_range[65423](arg low[65421]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65444 call compilerError "Bound of 'low..' must be an integer")
    (509150 return _void[55])
  }
  function chpl_build_high_bounded_range[65455](arg high[65452]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509154] "RVV" "temp"
    unknown call_tmp[616931] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616934 'move' call_tmp[616931](65460 'typeof' high[65452]))
    unknown call_tmp[616936] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616939 'move' call_tmp[616936](747773 'new' range[64316](?) call_tmp[616931] boundedHigh[64209](_high = high[65452])))
    (509159 'move' ret[509154](509158 'deref' call_tmp[616936]))
    (509156 return ret[509154])
  }
  function chpl_build_high_bounded_range[65480](arg high[65477]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509163] "RVV" "temp"
    unknown call_tmp[616941] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616944 'move' call_tmp[616941](65485 'typeof' high[65477]))
    unknown call_tmp[616946] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616949 'move' call_tmp[616946](747774 'new' range[64316](?) call_tmp[616941] boundedHigh[64209](_high = high[65477])))
    (509168 'move' ret[509163](509167 'deref' call_tmp[616946]))
    (509165 return ret[509163])
  }
  function chpl_build_high_bounded_range[65505](arg high[65502]:bool[10]) : _unknown[51]
  {
    unknown ret[509172] "RVV" "temp"
    unknown call_tmp[616951] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616954 'move' call_tmp[616951](65510 'typeof' high[65502]))
    unknown call_tmp[616956] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616959 'move' call_tmp[616956](747775 'new' range[64316](?) call_tmp[616951] boundedHigh[64209](_high = high[65502])))
    (509177 'move' ret[509172](509176 'deref' call_tmp[616956]))
    (509174 return ret[509172])
  }
  function chpl_build_high_bounded_range[65528](arg high[65526]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65549 call compilerError "Bound of '..high' must be an integer.")
    (509179 return _void[55])
  }
  function chpl_build_unbounded_range[65556]() : _unknown[51]
  {
    unknown ret[509183] "RVV" "temp"
    unknown call_tmp[616961] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616964 'move' call_tmp[616961](747776 'new' range[64316](?) int(64)[13] boundedNone[64211]))
    (509188 'move' ret[509183](509187 'deref' call_tmp[616961]))
    (509185 return ret[509183])
  }
  function chpl_compute_low_param_loop_bound[455342](param arg low[455349] :
  (455346 call int(64)[13] 64), param arg high[455355] :
  (455353 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509192] "RVV" "param" "temp"
    (509197 'move' ret[509192](509196 'deref' low[455349]))
    (509194 return ret[509192])
  }
  function chpl_compute_low_param_loop_bound[455322](param arg low[455329] :
  (455326 call int(64)[13] 32), param arg high[455335] :
  (455333 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509201] "RVV" "param" "temp"
    (509206 'move' ret[509201](509205 'deref' low[455329]))
    (509203 return ret[509201])
  }
  function chpl_compute_low_param_loop_bound[455302](param arg low[455309] :
  (455306 call int(64)[13] 16), param arg high[455315] :
  (455313 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509210] "RVV" "param" "temp"
    (509215 'move' ret[509210](509214 'deref' low[455309]))
    (509212 return ret[509210])
  }
  function chpl_compute_low_param_loop_bound[455282](param arg low[455289] :
  (455286 call int(64)[13] 8), param arg high[455295] :
  (455293 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509219] "RVV" "param" "temp"
    (509224 'move' ret[509219](509223 'deref' low[455289]))
    (509221 return ret[509219])
  }
  function chpl_compute_high_param_loop_bound[455422](param arg low[455429] :
  (455426 call int(64)[13] 64), param arg high[455435] :
  (455433 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509228] "RVV" "param" "temp"
    (509233 'move' ret[509228](509232 'deref' high[455435]))
    (509230 return ret[509228])
  }
  function chpl_compute_high_param_loop_bound[455402](param arg low[455409] :
  (455406 call int(64)[13] 32), param arg high[455415] :
  (455413 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509237] "RVV" "param" "temp"
    (509242 'move' ret[509237](509241 'deref' high[455415]))
    (509239 return ret[509237])
  }
  function chpl_compute_high_param_loop_bound[455382](param arg low[455389] :
  (455386 call int(64)[13] 16), param arg high[455395] :
  (455393 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509246] "RVV" "param" "temp"
    (509251 'move' ret[509246](509250 'deref' high[455395]))
    (509248 return ret[509246])
  }
  function chpl_compute_high_param_loop_bound[455362](param arg low[455369] :
  (455366 call int(64)[13] 8), param arg high[455375] :
  (455373 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509255] "RVV" "param" "temp"
    (509260 'move' ret[509255](509259 'deref' high[455375]))
    (509257 return ret[509255])
  }
  function chpl_compute_low_param_loop_bound[455502](param arg low[455509] :
  (455506 call uint(64)[115] 64), param arg high[455515] :
  (455513 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509264] "RVV" "param" "temp"
    (509269 'move' ret[509264](509268 'deref' low[455509]))
    (509266 return ret[509264])
  }
  function chpl_compute_low_param_loop_bound[455482](param arg low[455489] :
  (455486 call uint(64)[115] 32), param arg high[455495] :
  (455493 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509273] "RVV" "param" "temp"
    (509278 'move' ret[509273](509277 'deref' low[455489]))
    (509275 return ret[509273])
  }
  function chpl_compute_low_param_loop_bound[455462](param arg low[455469] :
  (455466 call uint(64)[115] 16), param arg high[455475] :
  (455473 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509282] "RVV" "param" "temp"
    (509287 'move' ret[509282](509286 'deref' low[455469]))
    (509284 return ret[509282])
  }
  function chpl_compute_low_param_loop_bound[455442](param arg low[455449] :
  (455446 call uint(64)[115] 8), param arg high[455455] :
  (455453 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509291] "RVV" "param" "temp"
    (509296 'move' ret[509291](509295 'deref' low[455449]))
    (509293 return ret[509291])
  }
  function chpl_compute_high_param_loop_bound[455582](param arg low[455589] :
  (455586 call uint(64)[115] 64), param arg high[455595] :
  (455593 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509300] "RVV" "param" "temp"
    (509305 'move' ret[509300](509304 'deref' high[455595]))
    (509302 return ret[509300])
  }
  function chpl_compute_high_param_loop_bound[455562](param arg low[455569] :
  (455566 call uint(64)[115] 32), param arg high[455575] :
  (455573 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509309] "RVV" "param" "temp"
    (509314 'move' ret[509309](509313 'deref' high[455575]))
    (509311 return ret[509309])
  }
  function chpl_compute_high_param_loop_bound[455542](param arg low[455549] :
  (455546 call uint(64)[115] 16), param arg high[455555] :
  (455553 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509318] "RVV" "param" "temp"
    (509323 'move' ret[509318](509322 'deref' high[455555]))
    (509320 return ret[509318])
  }
  function chpl_compute_high_param_loop_bound[455522](param arg low[455529] :
  (455526 call uint(64)[115] 8), param arg high[455535] :
  (455533 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509327] "RVV" "param" "temp"
    (509332 'move' ret[509327](509331 'deref' high[455535]))
    (509329 return ret[509327])
  }
  function chpl_compute_low_param_loop_bound[65680](param arg low[65677]:bool[10], param arg high[65683]:bool[10]) param : _unknown[51]
  {
    unknown ret[509336] "RVV" "param" "temp"
    (509341 'move' ret[509336](509340 'deref' low[65677]))
    (509338 return ret[509336])
  }
  function chpl_compute_high_param_loop_bound[65698](param arg low[65695]:bool[10], param arg high[65701]:bool[10]) param : _unknown[51]
  {
    unknown ret[509345] "RVV" "param" "temp"
    (509350 'move' ret[509345](509349 'deref' high[65701]))
    (509347 return ret[509345])
  }
  function chpl_compute_low_param_loop_bound[65714](param arg low[65712]:_any[178](?), param arg high[65716]:_any[178](?)) param : _unknown[51] "last resort" "no return value for void"
  {
    (65739 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509352 return _void[55])
  }
  function chpl_compute_low_param_loop_bound[65748](arg low[65746]:_any[178](?), arg high[65750]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65771 call compilerError "param for-loops must be defined over a bounded param range")
    (509354 return _void[55])
  }
  function chpl_compute_count_param_loop[65782](param arg count[65779]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509358] "RVV" "param" "temp"
    (509363 'move' ret[509358](509362 'deref' count[65779]))
    (509360 return ret[509358])
  }
  function chpl_compute_count_param_loop[65794](arg count[65792]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65817 call compilerError "in a param for-loop, the count operator requires a param integral value")
    (509365 return _void[55])
  }
  function chpl_low_bound_count_for_param_loop[65828](param arg high[65825]:integral[199](?), param arg count[65831]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509369] "RVV" "param" "temp"
    unknown call_tmp[616966] "expr temp" "maybe param" "maybe type" "temp"
    (616969 'move' call_tmp[616966](65836 call > count[65831] 0))
    unknown call_tmp[616971] "expr temp" "maybe param" "maybe type" "temp"
    (616974 'move' call_tmp[616971](65885 call _cond_test call_tmp[616966]))
    if call_tmp[616971]
    {
      (65857 call compilerError "count operators with positive count require the range to have a low bound")
    }
    {
      unknown call_tmp[616976] "expr temp" "maybe param" "maybe type" "temp"
      (616979 'move' call_tmp[616976](65862 call == count[65831] 0))
      unknown call_tmp[616981] "expr temp" "maybe param" "maybe type" "temp"
      (616984 'move' call_tmp[616981](65881 call _cond_test call_tmp[616976]))
      if call_tmp[616981]
      {
        unknown call_tmp[616986] "expr temp" "maybe param" "maybe type" "temp"
        (616989 'move' call_tmp[616986](65866 call + high[65825] 1))
        (509374 'move' ret[509369](509373 'deref' call_tmp[616986]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509367] _end_chpl_low_bound_count_for_param_loop[509367]
      }
      {
        unknown call_tmp[616991] "expr temp" "maybe param" "maybe type" "temp"
        (616994 'move' call_tmp[616991](65873 call + high[65825] count[65831]))
        unknown call_tmp[616996] "expr temp" "maybe param" "maybe type" "temp"
        (616999 'move' call_tmp[616996](65876 call + call_tmp[616991] 1))
        (509379 'move' ret[509369](509378 'deref' call_tmp[616996]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509367] _end_chpl_low_bound_count_for_param_loop[509367]
      }
    }
    label _end_chpl_low_bound_count_for_param_loop[509367]
    (509371 return ret[509369])
  }
  function chpl_low_bound_count_for_param_loop[65897](arg high[65895]:_any[178](?), arg count[65899]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65904 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509383 return _void[55])
  }
  function chpl_high_bound_count_for_param_loop[65915](param arg low[65912]:integral[199](?), param arg count[65918]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509387] "RVV" "param" "temp"
    unknown call_tmp[617001] "expr temp" "maybe param" "maybe type" "temp"
    (617004 'move' call_tmp[617001](65923 call < count[65918] 0))
    unknown call_tmp[617006] "expr temp" "maybe param" "maybe type" "temp"
    (617009 'move' call_tmp[617006](65974 call _cond_test call_tmp[617001]))
    if call_tmp[617006]
    {
      (65946 call compilerError "count operators with negative count require the range to have a high bound")
    }
    {
      unknown call_tmp[617011] "expr temp" "maybe param" "maybe type" "temp"
      (617014 'move' call_tmp[617011](65951 call == count[65918] 0))
      unknown call_tmp[617016] "expr temp" "maybe param" "maybe type" "temp"
      (617019 'move' call_tmp[617016](65970 call _cond_test call_tmp[617011]))
      if call_tmp[617016]
      {
        unknown call_tmp[617021] "expr temp" "maybe param" "maybe type" "temp"
        (617024 'move' call_tmp[617021](65955 call - low[65912] 1))
        (509392 'move' ret[509387](509391 'deref' call_tmp[617021]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509385] _end_chpl_high_bound_count_for_param_loop[509385]
      }
      {
        unknown call_tmp[617026] "expr temp" "maybe param" "maybe type" "temp"
        (617029 'move' call_tmp[617026](65962 call + low[65912] count[65918]))
        unknown call_tmp[617031] "expr temp" "maybe param" "maybe type" "temp"
        (617034 'move' call_tmp[617031](65965 call - call_tmp[617026] 1))
        (509397 'move' ret[509387](509396 'deref' call_tmp[617031]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509385] _end_chpl_high_bound_count_for_param_loop[509385]
      }
    }
    label _end_chpl_high_bound_count_for_param_loop[509385]
    (509389 return ret[509387])
  }
  function chpl_high_bound_count_for_param_loop[65986](arg low[65984]:_any[178](?), arg count[65988]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65993 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509401 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_low[66004](param arg low[66001]:integral[199](?), param arg high[66007]:integral[199](?), param arg count[66011]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509405] "RVV" "param" "temp"
    unknown abs_count[66025] "dead at end of block" "param"
    unknown tmp[555752] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555753] "maybe param" "temp"
    unknown call_tmp[617036] "expr temp" "maybe param" "maybe type" "temp"
    (617039 'move' call_tmp[617036](66016 call < count[66011] 0))
    (555758 'move' tmp[555753](555756 call _cond_test call_tmp[617036]))
    if tmp[555753]
    {
      unknown tmp[555760] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555762 'move' tmp[555760](66019 call - count[66011]))
      (555767 'move' tmp[555752](555764 '_paramFoldLogical' tmp[555753] tmp[555760]))
    }
    {
      (555772 'move' tmp[555752](555769 '_paramFoldLogical' tmp[555753] count[66011]))
    }
    (541018 'init var' abs_count[66025] tmp[555752])
    (66028 'end of statement')
    unknown call_tmp[617041] "expr temp" "maybe param" "maybe type" "temp"
    (617044 'move' call_tmp[617041](66032 call - high[66007] low[66001]))
    unknown call_tmp[617046] "maybe param" "maybe type" "temp"
    (617049 'move' call_tmp[617046](66035 call + call_tmp[617041] 1))
    unknown size[66037] "dead at end of block" "param"
    (541020 'init var' size[66037] call_tmp[617046])
    (66040 'end of statement')
    unknown call_tmp[617051] "expr temp" "maybe param" "maybe type" "temp"
    (617054 'move' call_tmp[617051](66043 call < size[66037] abs_count[66025]))
    unknown call_tmp[617056] "expr temp" "maybe param" "maybe type" "temp"
    (617059 'move' call_tmp[617056](66130 call _cond_test call_tmp[617051]))
    if call_tmp[617056]
    {
      unknown call_tmp[617061] "expr temp" "maybe param" "maybe type" "temp"
      (617064 'move' call_tmp[617061](66066 call _cast string[26] abs_count[66025]))
      unknown call_tmp[617066] "expr temp" "maybe param" "maybe type" "temp"
      (617069 'move' call_tmp[617066](66087 call _cast string[26] size[66037]))
      (66089 call compilerError "Count of " call_tmp[617061] " is too small for range of size " call_tmp[617066])
    }
    {
      unknown call_tmp[617071] "expr temp" "maybe param" "maybe type" "temp"
      (617074 'move' call_tmp[617071](66094 call == count[66011] 0))
      unknown call_tmp[617076] "expr temp" "maybe param" "maybe type" "temp"
      (617079 'move' call_tmp[617076](66125 call _cond_test call_tmp[617071]))
      if call_tmp[617076]
      {
        unknown call_tmp[617081] "expr temp" "maybe param" "maybe type" "temp"
        (617084 'move' call_tmp[617081](66098 call + high[66007] 1))
        (509410 'move' ret[509405](509409 'deref' call_tmp[617081]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_low[509403] _end_chpl_bounded_count_for_param_loop_low[509403]
      }
      {
        unknown call_tmp[617086] "expr temp" "maybe param" "maybe type" "temp"
        (617089 'move' call_tmp[617086](66105 call < count[66011] 0))
        unknown call_tmp[617091] "expr temp" "maybe param" "maybe type" "temp"
        (617094 'move' call_tmp[617091](66121 call _cond_test call_tmp[617086]))
        if call_tmp[617091]
        {
          unknown call_tmp[617096] "expr temp" "maybe param" "maybe type" "temp"
          (617099 'move' call_tmp[617096](66109 call + high[66007] count[66011]))
          unknown call_tmp[617101] "expr temp" "maybe param" "maybe type" "temp"
          (617104 'move' call_tmp[617101](66112 call + call_tmp[617096] 1))
          (509415 'move' ret[509405](509414 'deref' call_tmp[617101]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509403] _end_chpl_bounded_count_for_param_loop_low[509403]
        }
        {
          (509420 'move' ret[509405](509419 'deref' low[66001]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509403] _end_chpl_bounded_count_for_param_loop_low[509403]
        }
      }
    }
    label _end_chpl_bounded_count_for_param_loop_low[509403]
    (509407 return ret[509405])
  }
  function chpl_bounded_count_for_param_loop_low[66141](arg low[66139]:_any[178](?), arg high[66143]:_any[178](?), arg count[66145]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66168 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509424 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_high[66179](param arg low[66176]:integral[199](?), param arg high[66182]:integral[199](?), param arg count[66186]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509428] "RVV" "param" "temp"
    unknown call_tmp[617106] "expr temp" "maybe param" "maybe type" "temp"
    (617109 'move' call_tmp[617106](66191 call == count[66186] 0))
    unknown call_tmp[617111] "expr temp" "maybe param" "maybe type" "temp"
    (617114 'move' call_tmp[617111](66222 call _cond_test call_tmp[617106]))
    if call_tmp[617111]
    {
      unknown call_tmp[617116] "expr temp" "maybe param" "maybe type" "temp"
      (617119 'move' call_tmp[617116](66195 call - low[66176] 1))
      (509433 'move' ret[509428](509432 'deref' call_tmp[617116]))
      gotoReturn _end_chpl_bounded_count_for_param_loop_high[509426] _end_chpl_bounded_count_for_param_loop_high[509426]
    }
    {
      unknown call_tmp[617121] "expr temp" "maybe param" "maybe type" "temp"
      (617124 'move' call_tmp[617121](66202 call < count[66186] 0))
      unknown call_tmp[617126] "expr temp" "maybe param" "maybe type" "temp"
      (617129 'move' call_tmp[617126](66218 call _cond_test call_tmp[617121]))
      if call_tmp[617126]
      {
        (509438 'move' ret[509428](509437 'deref' high[66182]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509426] _end_chpl_bounded_count_for_param_loop_high[509426]
      }
      {
        unknown call_tmp[617131] "expr temp" "maybe param" "maybe type" "temp"
        (617134 'move' call_tmp[617131](66210 call + low[66176] count[66186]))
        unknown call_tmp[617136] "expr temp" "maybe param" "maybe type" "temp"
        (617139 'move' call_tmp[617136](66213 call - call_tmp[617131] 1))
        (509443 'move' ret[509428](509442 'deref' call_tmp[617136]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509426] _end_chpl_bounded_count_for_param_loop_high[509426]
      }
    }
    label _end_chpl_bounded_count_for_param_loop_high[509426]
    (509430 return ret[509428])
  }
  function chpl_bounded_count_for_param_loop_high[66234](arg low[66232]:_any[178](?), arg high[66236]:_any[178](?), arg count[66238]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66243 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509447 return _void[55])
  }
  function isRangeType[66252](arg t[66250]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[509469] "RVV" "param" "temp"
    function isRangeHelp[66263](arg t[66260]:range[64316](?)) param : _unknown[51]
    {
      unknown ret[509451] "RVV" "param" "temp"
      (509456 'move' ret[509451](509455 'deref' 1))
      (509453 return ret[509451])
    }
    function isRangeHelp[66276](arg t[66274]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[509460] "RVV" "param" "temp"
      (509465 'move' ret[509460](509464 'deref' 0))
      (509462 return ret[509460])
    }
    unknown call_tmp[617141] "expr temp" "maybe param" "maybe type" "temp"
    (617144 'move' call_tmp[617141](66287 call isRangeHelp t[66250]))
    (509474 'move' ret[509469](509473 'deref' call_tmp[617141]))
    (509471 return ret[509469])
  }
  function isRangeValue[66301](arg r[66298]:range[64316](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509478] "RVV" "param" "temp"
    (509483 'move' ret[509478](509482 'deref' 1))
    (509480 return ret[509478])
  }
  function isRangeValue[66313](arg r[66311]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509487] "RVV" "param" "temp"
    (509492 'move' ret[509487](509491 'deref' 0))
    (509489 return ret[509487])
  }
  function isBoundedRange[66325](arg r[66323]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509496] "RVV" "param" "temp"
    (509501 'move' ret[509496](509500 'deref' 0))
    (509498 return ret[509496])
  }
  function isBoundedRange[66342](arg r[66339]:range[64316](?)) param : _unknown[51]
  {
    unknown ret[509505] "RVV" "param" "temp"
    unknown call_tmp[617148] "expr temp" "maybe param" "maybe type" "temp"
    (617151 'move' call_tmp[617148](66346 call boundedType _mt[243] r[66339]))
    unknown call_tmp[617153] "expr temp" "maybe param" "maybe type" "temp"
    (617156 'move' call_tmp[617153](66350 call isBoundedRange call_tmp[617148]))
    (509510 'move' ret[509505](509509 'deref' call_tmp[617153]))
    (509507 return ret[509505])
  }
  function isBoundedRange[66362](param arg B[66359]:BoundedRangeType[64213]) param : _unknown[51] "no doc"
  {
    unknown ret[509514] "RVV" "param" "temp"
    unknown call_tmp[617158] "expr temp" "maybe param" "maybe type" "temp"
    (617161 'move' call_tmp[617158](66369 call == B[66359] bounded[64205]))
    (509519 'move' ret[509514](509518 'deref' call_tmp[617158]))
    (509516 return ret[509514])
  }
  function range[64316](?).isBounded[66379](arg _mt[66384]:_MT[238], arg this[66381]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509523] "RVV" "param" "temp"
    unknown call_tmp[617165] "expr temp" "maybe param" "maybe type" "temp"
    (617168 'move' call_tmp[617165](373899 call boundedType _mt[243] this[66381]))
    unknown call_tmp[617170] "expr temp" "maybe param" "maybe type" "temp"
    (617173 'move' call_tmp[617170](66391 call == call_tmp[617165] bounded[64205]))
    (509528 'move' ret[509523](509527 'deref' call_tmp[617170]))
    (509525 return ret[509523])
  }
  function range[64316](?).hasLowBound[66401](arg _mt[66406]:_MT[238], arg this[66403]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509532] "RVV" "param" "temp"
    unknown tmp[419256] "maybe param" "temp"
    unknown call_tmp[617177] "expr temp" "maybe param" "maybe type" "temp"
    (617180 'move' call_tmp[617177](373904 call boundedType _mt[243] this[66403]))
    (419267 'move' tmp[419256](66413 call == call_tmp[617177] bounded[64205]))
    unknown call_tmp[617182] "expr temp" "maybe param" "maybe type" "temp"
    (617185 'move' call_tmp[617182](419269 call _cond_invalid tmp[419256]))
    if call_tmp[617182]
    {
      (419272 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555779] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555780] "maybe param" "temp"
    unknown call_tmp[617187] "expr temp" "maybe param" "maybe type" "temp"
    (617190 'move' call_tmp[617187](419257 call isTrue tmp[419256]))
    (555785 'move' tmp[555780](555783 call _cond_test call_tmp[617187]))
    if tmp[555780]
    {
      (555790 'move' tmp[555779](555787 '_paramFoldLogical' tmp[555780] 1))
    }
    {
      unknown tmp[555792] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617194] "expr temp" "maybe param" "maybe type" "temp"
      (617197 'move' call_tmp[617194](373909 call boundedType _mt[243] this[66403]))
      unknown call_tmp[617199] "expr temp" "maybe param" "maybe type" "temp"
      (617202 'move' call_tmp[617199](66420 call == call_tmp[617194] boundedLow[64207]))
      (555794 'move' tmp[555792](419261 call isTrue call_tmp[617199]))
      (555799 'move' tmp[555779](555796 '_paramFoldLogical' tmp[555780] tmp[555792]))
    }
    (509537 'move' ret[509532](509536 'deref' tmp[555779]))
    (509534 return ret[509532])
  }
  function range[64316](?).hasHighBound[66432](arg _mt[66437]:_MT[238], arg this[66434]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509541] "RVV" "param" "temp"
    unknown tmp[419277] "maybe param" "temp"
    unknown call_tmp[617206] "expr temp" "maybe param" "maybe type" "temp"
    (617209 'move' call_tmp[617206](373914 call boundedType _mt[243] this[66434]))
    (419288 'move' tmp[419277](66444 call == call_tmp[617206] bounded[64205]))
    unknown call_tmp[617211] "expr temp" "maybe param" "maybe type" "temp"
    (617214 'move' call_tmp[617211](419290 call _cond_invalid tmp[419277]))
    if call_tmp[617211]
    {
      (419293 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555806] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555807] "maybe param" "temp"
    unknown call_tmp[617216] "expr temp" "maybe param" "maybe type" "temp"
    (617219 'move' call_tmp[617216](419278 call isTrue tmp[419277]))
    (555812 'move' tmp[555807](555810 call _cond_test call_tmp[617216]))
    if tmp[555807]
    {
      (555817 'move' tmp[555806](555814 '_paramFoldLogical' tmp[555807] 1))
    }
    {
      unknown tmp[555819] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617223] "expr temp" "maybe param" "maybe type" "temp"
      (617226 'move' call_tmp[617223](373919 call boundedType _mt[243] this[66434]))
      unknown call_tmp[617228] "expr temp" "maybe param" "maybe type" "temp"
      (617231 'move' call_tmp[617228](66451 call == call_tmp[617223] boundedHigh[64209]))
      (555821 'move' tmp[555819](419282 call isTrue call_tmp[617228]))
      (555826 'move' tmp[555806](555823 '_paramFoldLogical' tmp[555807] tmp[555819]))
    }
    (509546 'move' ret[509541](509545 'deref' tmp[555806]))
    (509543 return ret[509541])
  }
  function range[64316](?).stride[66463](arg _mt[66468]:_MT[238], arg this[66465]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509550] "RVV" "temp"
    unknown call_tmp[617235] "expr temp" "maybe param" "maybe type" "temp"
    (617238 'move' call_tmp[617235](373929 call _stride _mt[243] this[66465]))
    (509555 'move' ret[509550](509554 'deref' call_tmp[617235]))
    (509552 return ret[509550])
  }
  where {
    (373924 call stridable _mt[243] this[66465])
  }
  function range[64316](?).stride[66481](arg _mt[66486]:_MT[238], arg this[66483]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509559] "RVV" "param" "temp"
    unknown call_tmp[617244] "expr temp" "maybe param" "maybe type" "temp"
    (617247 'move' call_tmp[617244](373938 call strType _mt[243] this[66483]))
    unknown call_tmp[617249] "expr temp" "maybe param" "maybe type" "temp"
    (617252 'move' call_tmp[617249](66493 call _cast call_tmp[617244] 1))
    (509564 'move' ret[509559](509563 'deref' call_tmp[617249]))
    (509561 return ret[509559])
  }
  where {
    unknown call_tmp[617256] "expr temp" "maybe param" "maybe type" "temp"
    (617259 'move' call_tmp[617256](373934 call stridable _mt[243] this[66483]))
    (66489 call ! call_tmp[617256])
  }
  function range[64316](?).alignment[66504](arg _mt[66509]:_MT[238], arg this[66506]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509568] "RVV" "temp"
    unknown call_tmp[617265] "expr temp" "maybe param" "maybe type" "temp"
    (617268 'move' call_tmp[617265](373952 call _alignment _mt[243] this[66506]))
    unknown call_tmp[617270] "expr temp" "maybe param" "maybe type" "temp"
    (617273 'move' call_tmp[617270](66515 call(373947 call (partial) chpl_intToIdx _mt[243] this[66506]) call_tmp[617265]))
    (509573 'move' ret[509568](509572 'deref' call_tmp[617270]))
    (509570 return ret[509568])
  }
  where {
    (373943 call stridable _mt[243] this[66506])
  }
  function range[64316](?).alignment[66525](arg _mt[66530]:_MT[238], arg this[66527]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509577] "RVV" "temp"
    unknown call_tmp[617279] "expr temp" "maybe param" "maybe type" "temp"
    (617282 'move' call_tmp[617279](373965 call low _mt[243] this[66527]))
    (509582 'move' ret[509577](509581 'deref' call_tmp[617279]))
    (509579 return ret[509577])
  }
  where {
    unknown tmp[419298] "maybe param" "temp"
    unknown call_tmp[617286] "expr temp" "maybe param" "maybe type" "temp"
    (617289 'move' call_tmp[617286](373957 call stridable _mt[243] this[66527]))
    (419309 'move' tmp[419298](66533 call ! call_tmp[617286]))
    unknown call_tmp[617291] "expr temp" "maybe param" "maybe type" "temp"
    (617294 'move' call_tmp[617291](419311 call _cond_invalid tmp[419298]))
    if call_tmp[617291]
    {
      (419314 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555833] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555834] "maybe param" "temp"
    unknown call_tmp[617296] "expr temp" "maybe param" "maybe type" "temp"
    (617299 'move' call_tmp[617296](419299 call isTrue tmp[419298]))
    (555839 'move' tmp[555834](555837 call _cond_test call_tmp[617296]))
    if tmp[555834]
    {
      unknown tmp[555841] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617303] "expr temp" "maybe param" "maybe type" "temp"
      (617306 'move' call_tmp[617303](66537 call(373961 call (partial) hasLowBound _mt[243] this[66527])))
      (555843 'move' tmp[555841](419302 call isTrue call_tmp[617303]))
      (555848 'move' tmp[555833](555845 '_paramFoldLogical' tmp[555834] tmp[555841]))
    }
    {
      (555853 'move' tmp[555833](555850 '_paramFoldLogical' tmp[555834] 0))
    }
    (748224 call chpl_statementLevelSymbol tmp[555833])
  }
  function range[64316](?).alignment[66550](arg _mt[66555]:_MT[238], arg this[66552]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509586] "RVV" "temp"
    unknown call_tmp[617310] "expr temp" "maybe param" "maybe type" "temp"
    (617313 'move' call_tmp[617310](66560 call(373969 call (partial) chpl_intToIdx _mt[243] this[66552]) 0))
    (509591 'move' ret[509586](509590 'deref' call_tmp[617310]))
    (509588 return ret[509586])
  }
  function range[64316](?).aligned[66569](arg _mt[66574]:_MT[238], arg this[66571]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509595] "RVV" "temp"
    unknown call_tmp[617317] "expr temp" "maybe param" "maybe type" "temp"
    (617320 'move' call_tmp[617317](373979 call _aligned _mt[243] this[66571]))
    (509600 'move' ret[509595](509599 'deref' call_tmp[617317]))
    (509597 return ret[509595])
  }
  where {
    (373974 call stridable _mt[243] this[66571])
  }
  function range[64316](?).aligned[66587](arg _mt[66592]:_MT[238], arg this[66589]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509604] "RVV" "param" "temp"
    (509609 'move' ret[509604](509608 'deref' 1))
    (509606 return ret[509604])
  }
  where {
    unknown tmp[419319] "maybe param" "temp"
    unknown call_tmp[617326] "expr temp" "maybe param" "maybe type" "temp"
    (617329 'move' call_tmp[617326](373984 call stridable _mt[243] this[66589]))
    (419330 'move' tmp[419319](66595 call ! call_tmp[617326]))
    unknown call_tmp[617331] "expr temp" "maybe param" "maybe type" "temp"
    (617334 'move' call_tmp[617331](419332 call _cond_invalid tmp[419319]))
    if call_tmp[617331]
    {
      (419335 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555887] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555888] "maybe param" "temp"
    unknown call_tmp[617336] "expr temp" "maybe param" "maybe type" "temp"
    (617339 'move' call_tmp[617336](419320 call isTrue tmp[419319]))
    (555893 'move' tmp[555888](555891 call _cond_test call_tmp[617336]))
    if tmp[555888]
    {
      unknown tmp[419340] "maybe param" "temp"
      unknown call_tmp[617343] "expr temp" "maybe param" "maybe type" "temp"
      (617346 'move' call_tmp[617343](373989 call boundedType _mt[243] this[66589]))
      (419351 'move' tmp[419340](66602 call == call_tmp[617343] bounded[64205]))
      unknown call_tmp[617348] "expr temp" "maybe param" "maybe type" "temp"
      (617351 'move' call_tmp[617348](419353 call _cond_invalid tmp[419340]))
      if call_tmp[617348]
      {
        (419356 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[555860] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555861] "maybe param" "temp"
      unknown call_tmp[617353] "expr temp" "maybe param" "maybe type" "temp"
      (617356 'move' call_tmp[617353](419341 call isTrue tmp[419340]))
      (555866 'move' tmp[555861](555864 call _cond_test call_tmp[617353]))
      if tmp[555861]
      {
        (555871 'move' tmp[555860](555868 '_paramFoldLogical' tmp[555861] 1))
      }
      {
        unknown tmp[555873] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617360] "expr temp" "maybe param" "maybe type" "temp"
        (617363 'move' call_tmp[617360](373994 call boundedType _mt[243] this[66589]))
        unknown call_tmp[617365] "expr temp" "maybe param" "maybe type" "temp"
        (617368 'move' call_tmp[617365](66609 call == call_tmp[617360] boundedLow[64207]))
        (555875 'move' tmp[555873](419345 call isTrue call_tmp[617365]))
        (555880 'move' tmp[555860](555877 '_paramFoldLogical' tmp[555861] tmp[555873]))
      }
      unknown tmp[555895] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555897 'move' tmp[555895](419323 call isTrue tmp[555860]))
      (555902 'move' tmp[555887](555899 '_paramFoldLogical' tmp[555888] tmp[555895]))
    }
    {
      (555907 'move' tmp[555887](555904 '_paramFoldLogical' tmp[555888] 0))
    }
    (748226 call chpl_statementLevelSymbol tmp[555887])
  }
  function range[64316](?).aligned[66625](arg _mt[66630]:_MT[238], arg this[66627]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509613] "RVV" "param" "temp"
    (509618 'move' ret[509613](509617 'deref' 0))
    (509615 return ret[509613])
  }
  function range[64316](?).first[66641](arg _mt[66646]:_MT[238], arg this[66643]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509622] "RVV" "temp"
    unknown call_tmp[617374] "expr temp" "maybe param" "maybe type" "temp"
    (617377 'move' call_tmp[617374](66652 call firstAsInt _mt[243] this[66643]))
    unknown call_tmp[617379] "expr temp" "maybe param" "maybe type" "temp"
    (617382 'move' call_tmp[617379](66656 call(373998 call (partial) chpl_intToIdx _mt[243] this[66643]) call_tmp[617374]))
    (509627 'move' ret[509622](509626 'deref' call_tmp[617379]))
    (509624 return ret[509622])
  }
  function range[64316](?).firstAsInt[66665](arg _mt[66670]:_MT[238], arg this[66667]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509631] "RVV" "temp"
    unknown call_tmp[617386] "expr temp" "maybe param" "maybe type" "temp"
    (617389 'move' call_tmp[617386](374003 call stridable _mt[243] this[66667]))
    unknown call_tmp[617391] "expr temp" "maybe param" "maybe type" "temp"
    (617394 'move' call_tmp[617391](66673 call ! call_tmp[617386]))
    unknown call_tmp[617396] "expr temp" "maybe param" "maybe type" "temp"
    (617399 'move' call_tmp[617396](66699 call _cond_test call_tmp[617391]))
    if call_tmp[617396]
    {
      unknown call_tmp[617403] "expr temp" "maybe param" "maybe type" "temp"
      (617406 'move' call_tmp[617403](374008 call _low _mt[243] this[66667]))
      (509636 'move' ret[509631](509635 'deref' call_tmp[617403]))
      gotoReturn _end_firstAsInt[509629] _end_firstAsInt[509629]
    }
    {
      unknown tmp[555914] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555915] "maybe param" "temp"
      unknown call_tmp[617410] "expr temp" "maybe param" "maybe type" "temp"
      (617413 'move' call_tmp[617410](374013 call _stride _mt[243] this[66667]))
      unknown call_tmp[617415] "expr temp" "maybe param" "maybe type" "temp"
      (617418 'move' call_tmp[617415](66680 call > call_tmp[617410] 0))
      (555920 'move' tmp[555915](555918 call _cond_test call_tmp[617415]))
      if tmp[555915]
      {
        unknown tmp[555922] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555924 'move' tmp[555922](66685 call alignedLowAsInt _mt[243] this[66667]))
        (555929 'move' tmp[555914](555926 '_paramFoldLogical' tmp[555915] tmp[555922]))
      }
      {
        unknown tmp[555931] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555933 'move' tmp[555931](66691 call alignedHighAsInt _mt[243] this[66667]))
        (555938 'move' tmp[555914](555935 '_paramFoldLogical' tmp[555915] tmp[555931]))
      }
      (509641 'move' ret[509631](509640 'deref' tmp[555914]))
      gotoReturn _end_firstAsInt[509629] _end_firstAsInt[509629]
    }
    label _end_firstAsInt[509629]
    (509633 return ret[509631])
  }
  function range[64316](?).last[66711](arg _mt[66716]:_MT[238], arg this[66713]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509647] "RVV" "temp"
    unknown call_tmp[617428] "expr temp" "maybe param" "maybe type" "temp"
    (617431 'move' call_tmp[617428](66722 call lastAsInt _mt[243] this[66713]))
    unknown call_tmp[617433] "expr temp" "maybe param" "maybe type" "temp"
    (617436 'move' call_tmp[617433](66726 call(374017 call (partial) chpl_intToIdx _mt[243] this[66713]) call_tmp[617428]))
    (509652 'move' ret[509647](509651 'deref' call_tmp[617433]))
    (509649 return ret[509647])
  }
  function range[64316](?).lastAsInt[66735](arg _mt[66740]:_MT[238], arg this[66737]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509656] "RVV" "temp"
    unknown call_tmp[617440] "expr temp" "maybe param" "maybe type" "temp"
    (617443 'move' call_tmp[617440](374022 call stridable _mt[243] this[66737]))
    unknown call_tmp[617445] "expr temp" "maybe param" "maybe type" "temp"
    (617448 'move' call_tmp[617445](66743 call ! call_tmp[617440]))
    unknown call_tmp[617450] "expr temp" "maybe param" "maybe type" "temp"
    (617453 'move' call_tmp[617450](66765 call _cond_test call_tmp[617445]))
    if call_tmp[617450]
    {
      unknown call_tmp[617457] "expr temp" "maybe param" "maybe type" "temp"
      (617460 'move' call_tmp[617457](374027 call _high _mt[243] this[66737]))
      (509661 'move' ret[509656](509660 'deref' call_tmp[617457]))
      gotoReturn _end_lastAsInt[509654] _end_lastAsInt[509654]
    }
    {
      unknown tmp[555945] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555946] "maybe param" "temp"
      unknown call_tmp[617464] "expr temp" "maybe param" "maybe type" "temp"
      (617467 'move' call_tmp[617464](374031 call stride _mt[243] this[66737]))
      unknown call_tmp[617469] "expr temp" "maybe param" "maybe type" "temp"
      (617472 'move' call_tmp[617469](66750 call > call_tmp[617464] 0))
      (555951 'move' tmp[555946](555949 call _cond_test call_tmp[617469]))
      if tmp[555946]
      {
        unknown tmp[555953] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555955 'move' tmp[555953](66753 call alignedHighAsInt _mt[243] this[66737]))
        (555960 'move' tmp[555945](555957 '_paramFoldLogical' tmp[555946] tmp[555953]))
      }
      {
        unknown tmp[555962] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555964 'move' tmp[555962](66757 call alignedLowAsInt _mt[243] this[66737]))
        (555969 'move' tmp[555945](555966 '_paramFoldLogical' tmp[555946] tmp[555962]))
      }
      (509666 'move' ret[509656](509665 'deref' tmp[555945]))
      gotoReturn _end_lastAsInt[509654] _end_lastAsInt[509654]
    }
    label _end_lastAsInt[509654]
    (509658 return ret[509656])
  }
  function range[64316](?).low[66777](arg _mt[66782]:_MT[238], arg this[66779]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509672] "RVV" "temp"
    unknown call_tmp[617482] "expr temp" "maybe param" "maybe type" "temp"
    (617485 'move' call_tmp[617482](374040 call _low _mt[243] this[66779]))
    unknown call_tmp[617487] "expr temp" "maybe param" "maybe type" "temp"
    (617490 'move' call_tmp[617487](66787 call(374035 call (partial) chpl_intToIdx _mt[243] this[66779]) call_tmp[617482]))
    (509677 'move' ret[509672](509676 'deref' call_tmp[617487]))
    (509674 return ret[509672])
  }
  function range[64316](?).high[66796](arg _mt[66801]:_MT[238], arg this[66798]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509681] "RVV" "temp"
    unknown call_tmp[617496] "expr temp" "maybe param" "maybe type" "temp"
    (617499 'move' call_tmp[617496](374049 call _high _mt[243] this[66798]))
    unknown call_tmp[617501] "expr temp" "maybe param" "maybe type" "temp"
    (617504 'move' call_tmp[617501](66806 call(374044 call (partial) chpl_intToIdx _mt[243] this[66798]) call_tmp[617496]))
    (509686 'move' ret[509681](509685 'deref' call_tmp[617501]))
    (509683 return ret[509681])
  }
  function range[64316](?).alignedLow[66815](arg _mt[66820]:_MT[238], arg this[66817]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509690] "RVV" "temp"
    unknown call_tmp[617510] "expr temp" "maybe param" "maybe type" "temp"
    (617513 'move' call_tmp[617510](66825 call alignedLowAsInt _mt[243] this[66817]))
    unknown call_tmp[617515] "expr temp" "maybe param" "maybe type" "temp"
    (617518 'move' call_tmp[617515](66829 call(374058 call (partial) chpl_intToIdx _mt[243] this[66817]) call_tmp[617510]))
    unknown call_tmp[617522] "expr temp" "maybe param" "maybe type" "temp"
    (617525 'move' call_tmp[617522](509695 call idxType _mt[243] this[66817]))
    (509699 'move' ret[509690](509698 'coerce' call_tmp[617515] call_tmp[617522]))
    (509692 return ret[509690])
  }
  { scopeless type
    (374054 call idxType _mt[243] this[66817])
  }
  function range[64316](?).alignedLowAsInt[66839](arg _mt[66844]:_MT[238], arg this[66841]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509703] "RVV" "temp"
    unknown call_tmp[617531] "expr temp" "maybe param" "maybe type" "temp"
    (617534 'move' call_tmp[617531](374063 call stridable _mt[243] this[66841]))
    unknown call_tmp[617536] "expr temp" "maybe param" "maybe type" "temp"
    (617539 'move' call_tmp[617536](66847 call ! call_tmp[617531]))
    unknown call_tmp[617541] "expr temp" "maybe param" "maybe type" "temp"
    (617544 'move' call_tmp[617541](66863 call _cond_test call_tmp[617536]))
    if call_tmp[617541]
    {
      unknown call_tmp[617548] "expr temp" "maybe param" "maybe type" "temp"
      (617551 'move' call_tmp[617548](374068 call _low _mt[243] this[66841]))
      (509708 'move' ret[509703](509707 'deref' call_tmp[617548]))
      gotoReturn _end_alignedLowAsInt[509701] _end_alignedLowAsInt[509701]
    }
    {
      unknown call_tmp[617555] "expr temp" "maybe param" "maybe type" "temp"
      (617558 'move' call_tmp[617555](374073 call _low _mt[243] this[66841]))
      unknown call_tmp[617562] "expr temp" "maybe param" "maybe type" "temp"
      (617565 'move' call_tmp[617562](374078 call _alignment _mt[243] this[66841]))
      unknown call_tmp[617569] "expr temp" "maybe param" "maybe type" "temp"
      (617572 'move' call_tmp[617569](374083 call _low _mt[243] this[66841]))
      unknown call_tmp[617576] "expr temp" "maybe param" "maybe type" "temp"
      (617579 'move' call_tmp[617576](374087 call stride _mt[243] this[66841]))
      unknown call_tmp[617581] "expr temp" "maybe param" "maybe type" "temp"
      (617584 'move' call_tmp[617581](66858 call chpl__diffMod call_tmp[617562] call_tmp[617569] call_tmp[617576]))
      unknown call_tmp[617586] "expr temp" "maybe param" "maybe type" "temp"
      (617589 'move' call_tmp[617586](66859 call + call_tmp[617555] call_tmp[617581]))
      (509713 'move' ret[509703](509712 'deref' call_tmp[617586]))
      gotoReturn _end_alignedLowAsInt[509701] _end_alignedLowAsInt[509701]
    }
    label _end_alignedLowAsInt[509701]
    (509705 return ret[509703])
  }
  function range[64316](?).alignedHigh[66875](arg _mt[66880]:_MT[238], arg this[66877]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509719] "RVV" "temp"
    unknown call_tmp[617595] "expr temp" "maybe param" "maybe type" "temp"
    (617598 'move' call_tmp[617595](66885 call alignedHighAsInt _mt[243] this[66877]))
    unknown call_tmp[617600] "expr temp" "maybe param" "maybe type" "temp"
    (617603 'move' call_tmp[617600](66889 call(374096 call (partial) chpl_intToIdx _mt[243] this[66877]) call_tmp[617595]))
    unknown call_tmp[617607] "expr temp" "maybe param" "maybe type" "temp"
    (617610 'move' call_tmp[617607](509724 call idxType _mt[243] this[66877]))
    (509728 'move' ret[509719](509727 'coerce' call_tmp[617600] call_tmp[617607]))
    (509721 return ret[509719])
  }
  { scopeless type
    (374092 call idxType _mt[243] this[66877])
  }
  function range[64316](?).alignedHighAsInt[66899](arg _mt[66904]:_MT[238], arg this[66901]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509732] "RVV" "temp"
    unknown call_tmp[617616] "expr temp" "maybe param" "maybe type" "temp"
    (617619 'move' call_tmp[617616](374101 call stridable _mt[243] this[66901]))
    unknown call_tmp[617621] "expr temp" "maybe param" "maybe type" "temp"
    (617624 'move' call_tmp[617621](66907 call ! call_tmp[617616]))
    unknown call_tmp[617626] "expr temp" "maybe param" "maybe type" "temp"
    (617629 'move' call_tmp[617626](66923 call _cond_test call_tmp[617621]))
    if call_tmp[617626]
    {
      unknown call_tmp[617633] "expr temp" "maybe param" "maybe type" "temp"
      (617636 'move' call_tmp[617633](374106 call _high _mt[243] this[66901]))
      (509737 'move' ret[509732](509736 'deref' call_tmp[617633]))
      gotoReturn _end_alignedHighAsInt[509730] _end_alignedHighAsInt[509730]
    }
    {
      unknown call_tmp[617640] "expr temp" "maybe param" "maybe type" "temp"
      (617643 'move' call_tmp[617640](374111 call _high _mt[243] this[66901]))
      unknown call_tmp[617647] "expr temp" "maybe param" "maybe type" "temp"
      (617650 'move' call_tmp[617647](374116 call _high _mt[243] this[66901]))
      unknown call_tmp[617654] "expr temp" "maybe param" "maybe type" "temp"
      (617657 'move' call_tmp[617654](374121 call _alignment _mt[243] this[66901]))
      unknown call_tmp[617661] "expr temp" "maybe param" "maybe type" "temp"
      (617664 'move' call_tmp[617661](374125 call stride _mt[243] this[66901]))
      unknown call_tmp[617666] "expr temp" "maybe param" "maybe type" "temp"
      (617669 'move' call_tmp[617666](66918 call chpl__diffMod call_tmp[617647] call_tmp[617654] call_tmp[617661]))
      unknown call_tmp[617671] "expr temp" "maybe param" "maybe type" "temp"
      (617674 'move' call_tmp[617671](66919 call - call_tmp[617640] call_tmp[617666]))
      (509742 'move' ret[509732](509741 'deref' call_tmp[617671]))
      gotoReturn _end_alignedHighAsInt[509730] _end_alignedHighAsInt[509730]
    }
    label _end_alignedHighAsInt[509730]
    (509734 return ret[509732])
  }
  function range[64316](?).isEmpty[66935](arg _mt[66940]:_MT[238], arg this[66937]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509748] "RVV" "temp"
    unknown tmp[419382] "maybe param" "temp"
    (419393 'move' tmp[419382] 1)
    unknown call_tmp[617676] "expr temp" "maybe param" "maybe type" "temp"
    (617679 'move' call_tmp[617676](419395 call _cond_invalid tmp[419382]))
    if call_tmp[617676]
    {
      (419398 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555976] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555977] "maybe param" "temp"
    unknown call_tmp[617681] "expr temp" "maybe param" "maybe type" "temp"
    (617684 'move' call_tmp[617681](419383 call isTrue tmp[419382]))
    (555982 'move' tmp[555977](555980 call _cond_test call_tmp[617681]))
    if tmp[555977]
    {
      unknown tmp[555984] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617688] "expr temp" "maybe param" "maybe type" "temp"
      (617691 'move' call_tmp[617688](66945 call(374130 call (partial) isAmbiguous _mt[243] this[66937])))
      (555986 'move' tmp[555984](419386 call isTrue call_tmp[617688]))
      (555991 'move' tmp[555976](555988 '_paramFoldLogical' tmp[555977] tmp[555984]))
    }
    {
      (555996 'move' tmp[555976](555993 '_paramFoldLogical' tmp[555977] 0))
    }
    unknown call_tmp[617693] "expr temp" "maybe param" "maybe type" "temp"
    (617696 'move' call_tmp[617693](66990 call _cond_test tmp[555976]))
    if call_tmp[617693]
    {
      (66970 call boundsCheckHalt module=[255] HaltWrappers[209998] "isEmpty() is invoked on an ambiguously-aligned range")
      (357549 'referenced modules list' HaltWrappers[209998])
    }
    {
      unknown tmp[419361] "maybe param" "temp"
      (419372 'move' tmp[419361](66975 call isBoundedRange this[66937]))
      unknown call_tmp[617698] "expr temp" "maybe param" "maybe type" "temp"
      (617701 'move' call_tmp[617698](419374 call _cond_invalid tmp[419361]))
      if call_tmp[617698]
      {
        (419377 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556003] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556004] "maybe param" "temp"
      unknown call_tmp[617703] "expr temp" "maybe param" "maybe type" "temp"
      (617706 'move' call_tmp[617703](419362 call isTrue tmp[419361]))
      (556009 'move' tmp[556004](556007 call _cond_test call_tmp[617703]))
      if tmp[556004]
      {
        unknown tmp[556011] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617710] "expr temp" "maybe param" "maybe type" "temp"
        (617713 'move' call_tmp[617710](66977 call alignedLow _mt[243] this[66937]))
        unknown call_tmp[617717] "expr temp" "maybe param" "maybe type" "temp"
        (617720 'move' call_tmp[617717](66981 call alignedHigh _mt[243] this[66937]))
        unknown call_tmp[617722] "expr temp" "maybe param" "maybe type" "temp"
        (617725 'move' call_tmp[617722](66984 call > call_tmp[617710] call_tmp[617717]))
        (556013 'move' tmp[556011](419365 call isTrue call_tmp[617722]))
        (556018 'move' tmp[556003](556015 '_paramFoldLogical' tmp[556004] tmp[556011]))
      }
      {
        (556023 'move' tmp[556003](556020 '_paramFoldLogical' tmp[556004] 0))
      }
      (509753 'move' ret[509748](509752 'deref' tmp[556003]))
      gotoReturn _end_isEmpty[509746] _end_isEmpty[509746]
    }
    label _end_isEmpty[509746]
    (509750 return ret[509748])
  }
  function range[64316](?).length[67002](arg _mt[67007]:_MT[238], arg this[67004]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509759] "RVV" "temp"
    unknown call_tmp[617727] "expr temp" "maybe param" "maybe type" "temp"
    (617730 'move' call_tmp[617727](67045 call + "'range.length' is deprecated - " "please use 'range.size' instead"))
    (67048 call compilerWarning call_tmp[617727])
    (475361 'end of statement')
    unknown call_tmp[617734] "expr temp" "maybe param" "maybe type" "temp"
    (617737 'move' call_tmp[617734](67052 call size _mt[243] this[67004]))
    unknown call_tmp[617741] "expr temp" "maybe param" "maybe type" "temp"
    (617744 'move' call_tmp[617741](509764 call intIdxType _mt[243] this[67004]))
    (509768 'move' ret[509759](509767 'coerce' call_tmp[617734] call_tmp[617741]))
    (509761 return ret[509759])
  }
  { scopeless type
    (374135 call intIdxType _mt[243] this[67004])
  }
  function range[64316](?).size[67063](arg _mt[67068]:_MT[238], arg this[67065]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[509772] "RVV" "temp"
    unknown call_tmp[617748] "expr temp" "maybe param" "maybe type" "temp"
    (617751 'move' call_tmp[617748](67074 call isBoundedRange this[67065]))
    unknown call_tmp[617753] "expr temp" "maybe param" "maybe type" "temp"
    (617756 'move' call_tmp[617753](67075 call ! call_tmp[617748]))
    unknown call_tmp[617758] "expr temp" "maybe param" "maybe type" "temp"
    (617761 'move' call_tmp[617758](67098 call _cond_test call_tmp[617753]))
    if call_tmp[617758]
    {
      (67096 call compilerError "'size' is not defined on unbounded ranges")
    }
    unknown call_tmp[617765] "maybe param" "maybe type" "temp"
    (617768 'move' call_tmp[617765](67105 call alignedHighAsInt _mt[243] this[67065]))
    const ah[67108] "dead at end of block" "const" "insert auto destroy"
    (541022 'init var' ah[67108] call_tmp[617765])
    unknown call_tmp[617772] "maybe param" "maybe type" "temp"
    (617775 'move' call_tmp[617772](67112 call alignedLowAsInt _mt[243] this[67065]))
    const al[67115] "dead at end of block" "const" "insert auto destroy"
    (541024 'init var' al[67115] call_tmp[617772])
    (67118 'end of statement')
    unknown call_tmp[617777] "expr temp" "maybe param" "maybe type" "temp"
    (617780 'move' call_tmp[617777](67121 call > al[67115] ah[67108]))
    unknown call_tmp[617782] "expr temp" "maybe param" "maybe type" "temp"
    (617785 'move' call_tmp[617782](67129 call _cond_test call_tmp[617777]))
    if call_tmp[617782]
    {
      unknown call_tmp[617789] "expr temp" "maybe param" "maybe type" "temp"
      (617792 'move' call_tmp[617789](374146 call intIdxType _mt[243] this[67065]))
      unknown call_tmp[617794] "expr temp" "maybe param" "maybe type" "temp"
      (617797 'move' call_tmp[617794](67125 call _cast call_tmp[617789] 0))
      unknown call_tmp[617801] "expr temp" "maybe param" "maybe type" "temp"
      (617804 'move' call_tmp[617801](509777 call intIdxType _mt[243] this[67065]))
      (509781 'move' ret[509772](509780 'coerce' call_tmp[617794] call_tmp[617801]))
      gotoReturn _end_size[509770] _end_size[509770]
    }
    unknown call_tmp[617808] "expr temp" "maybe param" "maybe type" "temp"
    (617811 'move' call_tmp[617808](374150 call intIdxType _mt[243] this[67065]))
    unknown call_tmp[617815] "expr temp" "maybe param" "maybe type" "temp"
    (617818 'move' call_tmp[617815](67136 call stride _mt[243] this[67065]))
    unknown call_tmp[617820] "expr temp" "maybe param" "maybe type" "temp"
    (617823 'move' call_tmp[617820](67140 call abs call_tmp[617815]))
    unknown call_tmp[617825] "maybe param" "maybe type" "temp"
    (617828 'move' call_tmp[617825](67142 call _cast call_tmp[617808] call_tmp[617820]))
    const s[67144] "dead at end of block" "const" "insert auto destroy"
    (541026 'init var' s[67144] call_tmp[617825])
    (67147 'end of statement')
    unknown call_tmp[617830] "expr temp" "maybe param" "maybe type" "temp"
    (617833 'move' call_tmp[617830](67150 call - ah[67108] al[67115]))
    unknown call_tmp[617835] "expr temp" "maybe param" "maybe type" "temp"
    (617838 'move' call_tmp[617835](67153 call / call_tmp[617830] s[67144]))
    unknown call_tmp[617842] "expr temp" "maybe param" "maybe type" "temp"
    (617845 'move' call_tmp[617842](374157 call intIdxType _mt[243] this[67065]))
    unknown call_tmp[617847] "expr temp" "maybe param" "maybe type" "temp"
    (617850 'move' call_tmp[617847](67157 call _cast call_tmp[617842] 1))
    unknown call_tmp[617852] "expr temp" "maybe param" "maybe type" "temp"
    (617855 'move' call_tmp[617852](67159 call + call_tmp[617835] call_tmp[617847]))
    unknown call_tmp[617859] "expr temp" "maybe param" "maybe type" "temp"
    (617862 'move' call_tmp[617859](509786 call intIdxType _mt[243] this[67065]))
    (509790 'move' ret[509772](509789 'coerce' call_tmp[617852] call_tmp[617859]))
    gotoReturn _end_size[509770] _end_size[509770]
    (475365 'end of statement' ah[67108] al[67115] s[67144])
    label _end_size[509770]
    (509774 return ret[509772])
  }
  { scopeless type
    (374139 call intIdxType _mt[243] this[67065])
  }
  function range[64316](?).hasFirst[67169](arg _mt[67174]:_MT[238], arg this[67171]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509796] "RVV" "param" "temp"
    unknown call_tmp[617868] "expr temp" "maybe param" "maybe type" "temp"
    (617871 'move' call_tmp[617868](67188 call(374170 call (partial) hasLowBound _mt[243] this[67171])))
    (509801 'move' ret[509796](509800 'deref' call_tmp[617868]))
    (509798 return ret[509796])
  }
  where {
    unknown tmp[419403] "maybe param" "temp"
    unknown call_tmp[617875] "expr temp" "maybe param" "maybe type" "temp"
    (617878 'move' call_tmp[617875](374162 call stridable _mt[243] this[67171]))
    (419414 'move' tmp[419403](67177 call ! call_tmp[617875]))
    unknown call_tmp[617880] "expr temp" "maybe param" "maybe type" "temp"
    (617883 'move' call_tmp[617880](419416 call _cond_invalid tmp[419403]))
    if call_tmp[617880]
    {
      (419419 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556030] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556031] "maybe param" "temp"
    unknown call_tmp[617885] "expr temp" "maybe param" "maybe type" "temp"
    (617888 'move' call_tmp[617885](419404 call isTrue tmp[419403]))
    (556036 'move' tmp[556031](556034 call _cond_test call_tmp[617885]))
    if tmp[556031]
    {
      unknown tmp[556038] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617892] "expr temp" "maybe param" "maybe type" "temp"
      (617895 'move' call_tmp[617892](67181 call(374166 call (partial) hasHighBound _mt[243] this[67171])))
      unknown call_tmp[617897] "expr temp" "maybe param" "maybe type" "temp"
      (617900 'move' call_tmp[617897](67182 call ! call_tmp[617892]))
      (556040 'move' tmp[556038](419407 call isTrue call_tmp[617897]))
      (556045 'move' tmp[556030](556042 '_paramFoldLogical' tmp[556031] tmp[556038]))
    }
    {
      (556050 'move' tmp[556030](556047 '_paramFoldLogical' tmp[556031] 0))
    }
    (748228 call chpl_statementLevelSymbol tmp[556030])
  }
  function range[64316](?).hasFirst[67198](arg _mt[67203]:_MT[238], arg this[67200]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509805] "RVV" "temp"
    unknown tmp[419424] "maybe param" "temp"
    (419435 'move' tmp[419424](67207 call(374174 call (partial) isAmbiguous _mt[243] this[67200])))
    unknown call_tmp[617904] "expr temp" "maybe param" "maybe type" "temp"
    (617907 'move' call_tmp[617904](419437 call _cond_invalid tmp[419424]))
    if call_tmp[617904]
    {
      (419440 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556057] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556058] "maybe param" "temp"
    unknown call_tmp[617909] "expr temp" "maybe param" "maybe type" "temp"
    (617912 'move' call_tmp[617909](419425 call isTrue tmp[419424]))
    (556063 'move' tmp[556058](556061 call _cond_test call_tmp[617909]))
    if tmp[556058]
    {
      (556068 'move' tmp[556057](556065 '_paramFoldLogical' tmp[556058] 1))
    }
    {
      unknown tmp[556070] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617916] "expr temp" "maybe param" "maybe type" "temp"
      (617919 'move' call_tmp[617916](67210 call(374178 call (partial) isEmpty _mt[243] this[67200])))
      (556072 'move' tmp[556070](419429 call isTrue call_tmp[617916]))
      (556077 'move' tmp[556057](556074 '_paramFoldLogical' tmp[556058] tmp[556070]))
    }
    unknown tmp[556115] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556116] "maybe param" "temp"
    (556121 'move' tmp[556116](556119 call _cond_test tmp[556057]))
    if tmp[556116]
    {
      (556126 'move' tmp[556115](556123 '_paramFoldLogical' tmp[556116] 0))
    }
    {
      unknown tmp[556084] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556085] "maybe param" "temp"
      unknown call_tmp[617923] "expr temp" "maybe param" "maybe type" "temp"
      (617926 'move' call_tmp[617923](374182 call stride _mt[243] this[67200]))
      unknown call_tmp[617928] "expr temp" "maybe param" "maybe type" "temp"
      (617931 'move' call_tmp[617928](67216 call > call_tmp[617923] 0))
      (556090 'move' tmp[556085](556088 call _cond_test call_tmp[617928]))
      if tmp[556085]
      {
        unknown tmp[556092] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556094 'move' tmp[556092](67220 call(374186 call (partial) hasLowBound _mt[243] this[67200])))
        (556099 'move' tmp[556084](556096 '_paramFoldLogical' tmp[556085] tmp[556092]))
      }
      {
        unknown tmp[556101] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556103 'move' tmp[556101](67223 call(374190 call (partial) hasHighBound _mt[243] this[67200])))
        (556108 'move' tmp[556084](556105 '_paramFoldLogical' tmp[556085] tmp[556101]))
      }
      (556131 'move' tmp[556115](556128 '_paramFoldLogical' tmp[556116] tmp[556084]))
    }
    (509810 'move' ret[509805](509809 'deref' tmp[556115]))
    (509807 return ret[509805])
  }
  function range[64316](?).hasLast[67238](arg _mt[67243]:_MT[238], arg this[67240]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509814] "RVV" "param" "temp"
    unknown call_tmp[617939] "expr temp" "maybe param" "maybe type" "temp"
    (617942 'move' call_tmp[617939](67257 call(374203 call (partial) hasHighBound _mt[243] this[67240])))
    (509819 'move' ret[509814](509818 'deref' call_tmp[617939]))
    (509816 return ret[509814])
  }
  where {
    unknown tmp[419445] "maybe param" "temp"
    unknown call_tmp[617946] "expr temp" "maybe param" "maybe type" "temp"
    (617949 'move' call_tmp[617946](374195 call stridable _mt[243] this[67240]))
    (419456 'move' tmp[419445](67246 call ! call_tmp[617946]))
    unknown call_tmp[617951] "expr temp" "maybe param" "maybe type" "temp"
    (617954 'move' call_tmp[617951](419458 call _cond_invalid tmp[419445]))
    if call_tmp[617951]
    {
      (419461 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556138] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556139] "maybe param" "temp"
    unknown call_tmp[617956] "expr temp" "maybe param" "maybe type" "temp"
    (617959 'move' call_tmp[617956](419446 call isTrue tmp[419445]))
    (556144 'move' tmp[556139](556142 call _cond_test call_tmp[617956]))
    if tmp[556139]
    {
      unknown tmp[556146] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617963] "expr temp" "maybe param" "maybe type" "temp"
      (617966 'move' call_tmp[617963](67250 call(374199 call (partial) hasLowBound _mt[243] this[67240])))
      unknown call_tmp[617968] "expr temp" "maybe param" "maybe type" "temp"
      (617971 'move' call_tmp[617968](67251 call ! call_tmp[617963]))
      (556148 'move' tmp[556146](419449 call isTrue call_tmp[617968]))
      (556153 'move' tmp[556138](556150 '_paramFoldLogical' tmp[556139] tmp[556146]))
    }
    {
      (556158 'move' tmp[556138](556155 '_paramFoldLogical' tmp[556139] 0))
    }
    (748230 call chpl_statementLevelSymbol tmp[556138])
  }
  function range[64316](?).hasLast[67267](arg _mt[67272]:_MT[238], arg this[67269]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509823] "RVV" "temp"
    unknown tmp[419466] "maybe param" "temp"
    (419477 'move' tmp[419466](67276 call(374207 call (partial) isAmbiguous _mt[243] this[67269])))
    unknown call_tmp[617975] "expr temp" "maybe param" "maybe type" "temp"
    (617978 'move' call_tmp[617975](419479 call _cond_invalid tmp[419466]))
    if call_tmp[617975]
    {
      (419482 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556165] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556166] "maybe param" "temp"
    unknown call_tmp[617980] "expr temp" "maybe param" "maybe type" "temp"
    (617983 'move' call_tmp[617980](419467 call isTrue tmp[419466]))
    (556171 'move' tmp[556166](556169 call _cond_test call_tmp[617980]))
    if tmp[556166]
    {
      (556176 'move' tmp[556165](556173 '_paramFoldLogical' tmp[556166] 1))
    }
    {
      unknown tmp[556178] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617987] "expr temp" "maybe param" "maybe type" "temp"
      (617990 'move' call_tmp[617987](67279 call(374211 call (partial) isEmpty _mt[243] this[67269])))
      (556180 'move' tmp[556178](419471 call isTrue call_tmp[617987]))
      (556185 'move' tmp[556165](556182 '_paramFoldLogical' tmp[556166] tmp[556178]))
    }
    unknown tmp[556223] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556224] "maybe param" "temp"
    (556229 'move' tmp[556224](556227 call _cond_test tmp[556165]))
    if tmp[556224]
    {
      (556234 'move' tmp[556223](556231 '_paramFoldLogical' tmp[556224] 0))
    }
    {
      unknown tmp[556192] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556193] "maybe param" "temp"
      unknown call_tmp[617994] "expr temp" "maybe param" "maybe type" "temp"
      (617997 'move' call_tmp[617994](374215 call stride _mt[243] this[67269]))
      unknown call_tmp[617999] "expr temp" "maybe param" "maybe type" "temp"
      (618002 'move' call_tmp[617999](67285 call > call_tmp[617994] 0))
      (556198 'move' tmp[556193](556196 call _cond_test call_tmp[617999]))
      if tmp[556193]
      {
        unknown tmp[556200] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556202 'move' tmp[556200](67289 call(374219 call (partial) hasHighBound _mt[243] this[67269])))
        (556207 'move' tmp[556192](556204 '_paramFoldLogical' tmp[556193] tmp[556200]))
      }
      {
        unknown tmp[556209] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556211 'move' tmp[556209](67292 call(374223 call (partial) hasLowBound _mt[243] this[67269])))
        (556216 'move' tmp[556192](556213 '_paramFoldLogical' tmp[556193] tmp[556209]))
      }
      (556239 'move' tmp[556223](556236 '_paramFoldLogical' tmp[556224] tmp[556192]))
    }
    (509828 'move' ret[509823](509827 'deref' tmp[556223]))
    (509825 return ret[509823])
  }
  function range[64316](?).isNaturallyAligned[67307](arg _mt[67312]:_MT[238], arg this[67309]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method"
  {
    unknown ret[509832] "RVV" "temp"
    unknown call_tmp[618010] "expr temp" "maybe param" "maybe type" "temp"
    (618013 'move' call_tmp[618010](374232 call stride _mt[243] this[67309]))
    unknown call_tmp[618015] "expr temp" "maybe param" "maybe type" "temp"
    (618018 'move' call_tmp[618015](67329 call > call_tmp[618010] 0))
    unknown call_tmp[618020] "expr temp" "maybe param" "maybe type" "temp"
    (618023 'move' call_tmp[618020](67340 call _cond_test call_tmp[618015]))
    if call_tmp[618020]
    {
      unknown call_tmp[618027] "expr temp" "maybe param" "maybe type" "temp"
      (618030 'move' call_tmp[618027](67332 call alignedLowAsInt _mt[243] this[67309]))
      unknown call_tmp[618034] "expr temp" "maybe param" "maybe type" "temp"
      (618037 'move' call_tmp[618034](374237 call _low _mt[243] this[67309]))
      unknown call_tmp[618039] "expr temp" "maybe param" "maybe type" "temp"
      (618042 'move' call_tmp[618039](67336 call == call_tmp[618027] call_tmp[618034]))
      (509837 'move' ret[509832](509836 'deref' call_tmp[618039]))
      gotoReturn _end_isNaturallyAligned[509830] _end_isNaturallyAligned[509830]
    }
    unknown call_tmp[618046] "expr temp" "maybe param" "maybe type" "temp"
    (618049 'move' call_tmp[618046](374241 call stride _mt[243] this[67309]))
    unknown call_tmp[618051] "expr temp" "maybe param" "maybe type" "temp"
    (618054 'move' call_tmp[618051](67348 call < call_tmp[618046] 0))
    unknown call_tmp[618056] "expr temp" "maybe param" "maybe type" "temp"
    (618059 'move' call_tmp[618056](67359 call _cond_test call_tmp[618051]))
    if call_tmp[618056]
    {
      unknown call_tmp[618063] "expr temp" "maybe param" "maybe type" "temp"
      (618066 'move' call_tmp[618063](67351 call alignedHighAsInt _mt[243] this[67309]))
      unknown call_tmp[618070] "expr temp" "maybe param" "maybe type" "temp"
      (618073 'move' call_tmp[618070](374246 call _high _mt[243] this[67309]))
      unknown call_tmp[618075] "expr temp" "maybe param" "maybe type" "temp"
      (618078 'move' call_tmp[618075](67355 call == call_tmp[618063] call_tmp[618070]))
      (509842 'move' ret[509832](509841 'deref' call_tmp[618075]))
      gotoReturn _end_isNaturallyAligned[509830] _end_isNaturallyAligned[509830]
    }
    (509847 'move' ret[509832](509846 'deref' 0))
    label _end_isNaturallyAligned[509830]
    (509834 return ret[509832])
  }
  where {
    unknown tmp[419487] "maybe param" "temp"
    (419498 'move' tmp[419487](374228 call stridable _mt[243] this[67309]))
    unknown call_tmp[618082] "expr temp" "maybe param" "maybe type" "temp"
    (618085 'move' call_tmp[618082](419500 call _cond_invalid tmp[419487]))
    if call_tmp[618082]
    {
      (419503 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556246] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556247] "maybe param" "temp"
    unknown call_tmp[618087] "expr temp" "maybe param" "maybe type" "temp"
    (618090 'move' call_tmp[618087](419488 call isTrue tmp[419487]))
    (556252 'move' tmp[556247](556250 call _cond_test call_tmp[618087]))
    if tmp[556247]
    {
      unknown tmp[556254] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618094] "expr temp" "maybe param" "maybe type" "temp"
      (618097 'move' call_tmp[618094](67316 call boundedType _mt[243] this[67309]))
      unknown call_tmp[618099] "expr temp" "maybe param" "maybe type" "temp"
      (618102 'move' call_tmp[618099](67323 call == call_tmp[618094] bounded[64205]))
      (556256 'move' tmp[556254](419491 call isTrue call_tmp[618099]))
      (556261 'move' tmp[556246](556258 '_paramFoldLogical' tmp[556247] tmp[556254]))
    }
    {
      (556266 'move' tmp[556246](556263 '_paramFoldLogical' tmp[556247] 0))
    }
    (748232 call chpl_statementLevelSymbol tmp[556246])
  }
  function range[64316](?).isNaturallyAligned[67373](arg _mt[67378]:_MT[238], arg this[67375]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509851] "RVV" "param" "temp"
    (509856 'move' ret[509851](509855 'deref' 1))
    (509853 return ret[509851])
  }
  where {
    unknown tmp[419508] "maybe param" "temp"
    unknown call_tmp[618106] "expr temp" "maybe param" "maybe type" "temp"
    (618109 'move' call_tmp[618106](374251 call stridable _mt[243] this[67375]))
    (419519 'move' tmp[419508](67381 call ! call_tmp[618106]))
    unknown call_tmp[618111] "expr temp" "maybe param" "maybe type" "temp"
    (618114 'move' call_tmp[618111](419521 call _cond_invalid tmp[419508]))
    if call_tmp[618111]
    {
      (419524 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556273] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556274] "maybe param" "temp"
    unknown call_tmp[618116] "expr temp" "maybe param" "maybe type" "temp"
    (618119 'move' call_tmp[618116](419509 call isTrue tmp[419508]))
    (556279 'move' tmp[556274](556277 call _cond_test call_tmp[618116]))
    if tmp[556274]
    {
      unknown tmp[556281] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618123] "expr temp" "maybe param" "maybe type" "temp"
      (618126 'move' call_tmp[618123](67384 call boundedType _mt[243] this[67375]))
      unknown call_tmp[618128] "expr temp" "maybe param" "maybe type" "temp"
      (618131 'move' call_tmp[618128](67391 call == call_tmp[618123] bounded[64205]))
      (556283 'move' tmp[556281](419512 call isTrue call_tmp[618128]))
      (556288 'move' tmp[556273](556285 '_paramFoldLogical' tmp[556274] tmp[556281]))
    }
    {
      (556293 'move' tmp[556273](556290 '_paramFoldLogical' tmp[556274] 0))
    }
    (748234 call chpl_statementLevelSymbol tmp[556273])
  }
  function range[64316](?).isNaturallyAligned[67405](arg _mt[67410]:_MT[238], arg this[67407]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509860] "RVV" "temp"
    unknown call_tmp[618135] "expr temp" "maybe param" "maybe type" "temp"
    (618138 'move' call_tmp[618135](67428 call alignedLowAsInt _mt[243] this[67407]))
    unknown call_tmp[618142] "expr temp" "maybe param" "maybe type" "temp"
    (618145 'move' call_tmp[618142](374261 call _low _mt[243] this[67407]))
    unknown call_tmp[618147] "expr temp" "maybe param" "maybe type" "temp"
    (618150 'move' call_tmp[618147](67432 call == call_tmp[618135] call_tmp[618142]))
    (509865 'move' ret[509860](509864 'deref' call_tmp[618147]))
    (509862 return ret[509860])
  }
  where {
    unknown tmp[419529] "maybe param" "temp"
    unknown call_tmp[618154] "expr temp" "maybe param" "maybe type" "temp"
    (618157 'move' call_tmp[618154](374256 call stridable _mt[243] this[67407]))
    (419540 'move' tmp[419529](67413 call ! call_tmp[618154]))
    unknown call_tmp[618159] "expr temp" "maybe param" "maybe type" "temp"
    (618162 'move' call_tmp[618159](419542 call _cond_invalid tmp[419529]))
    if call_tmp[618159]
    {
      (419545 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556300] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556301] "maybe param" "temp"
    unknown call_tmp[618164] "expr temp" "maybe param" "maybe type" "temp"
    (618167 'move' call_tmp[618164](419530 call isTrue tmp[419529]))
    (556306 'move' tmp[556301](556304 call _cond_test call_tmp[618164]))
    if tmp[556301]
    {
      unknown tmp[556308] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618171] "expr temp" "maybe param" "maybe type" "temp"
      (618174 'move' call_tmp[618171](67416 call boundedType _mt[243] this[67407]))
      unknown call_tmp[618176] "expr temp" "maybe param" "maybe type" "temp"
      (618179 'move' call_tmp[618176](67423 call == call_tmp[618171] boundedLow[64207]))
      (556310 'move' tmp[556308](419533 call isTrue call_tmp[618176]))
      (556315 'move' tmp[556300](556312 '_paramFoldLogical' tmp[556301] tmp[556308]))
    }
    {
      (556320 'move' tmp[556300](556317 '_paramFoldLogical' tmp[556301] 0))
    }
    (748236 call chpl_statementLevelSymbol tmp[556300])
  }
  function range[64316](?).isNaturallyAligned[67443](arg _mt[67448]:_MT[238], arg this[67445]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509869] "RVV" "temp"
    unknown tmp[419571] "maybe param" "temp"
    unknown call_tmp[618183] "expr temp" "maybe param" "maybe type" "temp"
    (618186 'move' call_tmp[618183](374270 call stride _mt[243] this[67445]))
    (419582 'move' tmp[419571](67465 call > call_tmp[618183] 0))
    unknown call_tmp[618188] "expr temp" "maybe param" "maybe type" "temp"
    (618191 'move' call_tmp[618188](419584 call _cond_invalid tmp[419571]))
    if call_tmp[618188]
    {
      (419587 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556327] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556328] "maybe param" "temp"
    unknown call_tmp[618193] "expr temp" "maybe param" "maybe type" "temp"
    (618196 'move' call_tmp[618193](419572 call isTrue tmp[419571]))
    (556333 'move' tmp[556328](556331 call _cond_test call_tmp[618193]))
    if tmp[556328]
    {
      unknown tmp[556335] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618200] "expr temp" "maybe param" "maybe type" "temp"
      (618203 'move' call_tmp[618200](67468 call alignedLowAsInt _mt[243] this[67445]))
      unknown call_tmp[618207] "expr temp" "maybe param" "maybe type" "temp"
      (618210 'move' call_tmp[618207](374275 call _low _mt[243] this[67445]))
      unknown call_tmp[618212] "expr temp" "maybe param" "maybe type" "temp"
      (618215 'move' call_tmp[618212](67472 call == call_tmp[618200] call_tmp[618207]))
      (556337 'move' tmp[556335](419575 call isTrue call_tmp[618212]))
      (556342 'move' tmp[556327](556339 '_paramFoldLogical' tmp[556328] tmp[556335]))
    }
    {
      (556347 'move' tmp[556327](556344 '_paramFoldLogical' tmp[556328] 0))
    }
    (509874 'move' ret[509869](509873 'deref' tmp[556327]))
    (509871 return ret[509869])
  }
  where {
    unknown tmp[419550] "maybe param" "temp"
    (419561 'move' tmp[419550](374266 call stridable _mt[243] this[67445]))
    unknown call_tmp[618219] "expr temp" "maybe param" "maybe type" "temp"
    (618222 'move' call_tmp[618219](419563 call _cond_invalid tmp[419550]))
    if call_tmp[618219]
    {
      (419566 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556354] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556355] "maybe param" "temp"
    unknown call_tmp[618224] "expr temp" "maybe param" "maybe type" "temp"
    (618227 'move' call_tmp[618224](419551 call isTrue tmp[419550]))
    (556360 'move' tmp[556355](556358 call _cond_test call_tmp[618224]))
    if tmp[556355]
    {
      unknown tmp[556362] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618231] "expr temp" "maybe param" "maybe type" "temp"
      (618234 'move' call_tmp[618231](67452 call boundedType _mt[243] this[67445]))
      unknown call_tmp[618236] "expr temp" "maybe param" "maybe type" "temp"
      (618239 'move' call_tmp[618236](67459 call == call_tmp[618231] boundedLow[64207]))
      (556364 'move' tmp[556362](419554 call isTrue call_tmp[618236]))
      (556369 'move' tmp[556354](556366 '_paramFoldLogical' tmp[556355] tmp[556362]))
    }
    {
      (556374 'move' tmp[556354](556371 '_paramFoldLogical' tmp[556355] 0))
    }
    (748238 call chpl_statementLevelSymbol tmp[556354])
  }
  function range[64316](?).isNaturallyAligned[67485](arg _mt[67490]:_MT[238], arg this[67487]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509878] "RVV" "param" "temp"
    (509883 'move' ret[509878](509882 'deref' 0))
    (509880 return ret[509878])
  }
  where {
    unknown tmp[419592] "maybe param" "temp"
    unknown call_tmp[618243] "expr temp" "maybe param" "maybe type" "temp"
    (618246 'move' call_tmp[618243](67493 call boundedType _mt[243] this[67487]))
    (419603 'move' tmp[419592](67500 call == call_tmp[618243] boundedNone[64211]))
    unknown call_tmp[618248] "expr temp" "maybe param" "maybe type" "temp"
    (618251 'move' call_tmp[618248](419605 call _cond_invalid tmp[419592]))
    if call_tmp[618248]
    {
      (419608 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556408] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556409] "maybe param" "temp"
    unknown call_tmp[618253] "expr temp" "maybe param" "maybe type" "temp"
    (618256 'move' call_tmp[618253](419593 call isTrue tmp[419592]))
    (556414 'move' tmp[556409](556412 call _cond_test call_tmp[618253]))
    if tmp[556409]
    {
      (556419 'move' tmp[556408](556416 '_paramFoldLogical' tmp[556409] 1))
    }
    {
      unknown tmp[419613] "maybe param" "temp"
      unknown call_tmp[618260] "expr temp" "maybe param" "maybe type" "temp"
      (618263 'move' call_tmp[618260](374280 call stridable _mt[243] this[67487]))
      (419624 'move' tmp[419613](67503 call ! call_tmp[618260]))
      unknown call_tmp[618265] "expr temp" "maybe param" "maybe type" "temp"
      (618268 'move' call_tmp[618265](419626 call _cond_invalid tmp[419613]))
      if call_tmp[618265]
      {
        (419629 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556381] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556382] "maybe param" "temp"
      unknown call_tmp[618270] "expr temp" "maybe param" "maybe type" "temp"
      (618273 'move' call_tmp[618270](419614 call isTrue tmp[419613]))
      (556387 'move' tmp[556382](556385 call _cond_test call_tmp[618270]))
      if tmp[556382]
      {
        unknown tmp[556389] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618277] "expr temp" "maybe param" "maybe type" "temp"
        (618280 'move' call_tmp[618277](67506 call boundedType _mt[243] this[67487]))
        unknown call_tmp[618282] "expr temp" "maybe param" "maybe type" "temp"
        (618285 'move' call_tmp[618282](67513 call == call_tmp[618277] boundedHigh[64209]))
        (556391 'move' tmp[556389](419617 call isTrue call_tmp[618282]))
        (556396 'move' tmp[556381](556393 '_paramFoldLogical' tmp[556382] tmp[556389]))
      }
      {
        (556401 'move' tmp[556381](556398 '_paramFoldLogical' tmp[556382] 0))
      }
      unknown tmp[556421] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556423 'move' tmp[556421](419597 call isTrue tmp[556381]))
      (556428 'move' tmp[556408](556425 '_paramFoldLogical' tmp[556409] tmp[556421]))
    }
    (748240 call chpl_statementLevelSymbol tmp[556408])
  }
  function range[64316](?).isNaturallyAligned[67529](arg _mt[67534]:_MT[238], arg this[67531]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509887] "RVV" "temp"
    unknown tmp[419655] "maybe param" "temp"
    unknown call_tmp[618289] "expr temp" "maybe param" "maybe type" "temp"
    (618292 'move' call_tmp[618289](374289 call stride _mt[243] this[67531]))
    (419666 'move' tmp[419655](67551 call < call_tmp[618289] 0))
    unknown call_tmp[618294] "expr temp" "maybe param" "maybe type" "temp"
    (618297 'move' call_tmp[618294](419668 call _cond_invalid tmp[419655]))
    if call_tmp[618294]
    {
      (419671 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556435] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556436] "maybe param" "temp"
    unknown call_tmp[618299] "expr temp" "maybe param" "maybe type" "temp"
    (618302 'move' call_tmp[618299](419656 call isTrue tmp[419655]))
    (556441 'move' tmp[556436](556439 call _cond_test call_tmp[618299]))
    if tmp[556436]
    {
      unknown tmp[556443] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618306] "expr temp" "maybe param" "maybe type" "temp"
      (618309 'move' call_tmp[618306](67554 call alignedHighAsInt _mt[243] this[67531]))
      unknown call_tmp[618313] "expr temp" "maybe param" "maybe type" "temp"
      (618316 'move' call_tmp[618313](374294 call _high _mt[243] this[67531]))
      unknown call_tmp[618318] "expr temp" "maybe param" "maybe type" "temp"
      (618321 'move' call_tmp[618318](67558 call == call_tmp[618306] call_tmp[618313]))
      (556445 'move' tmp[556443](419659 call isTrue call_tmp[618318]))
      (556450 'move' tmp[556435](556447 '_paramFoldLogical' tmp[556436] tmp[556443]))
    }
    {
      (556455 'move' tmp[556435](556452 '_paramFoldLogical' tmp[556436] 0))
    }
    (509892 'move' ret[509887](509891 'deref' tmp[556435]))
    (509889 return ret[509887])
  }
  where {
    unknown tmp[419634] "maybe param" "temp"
    (419645 'move' tmp[419634](374285 call stridable _mt[243] this[67531]))
    unknown call_tmp[618325] "expr temp" "maybe param" "maybe type" "temp"
    (618328 'move' call_tmp[618325](419647 call _cond_invalid tmp[419634]))
    if call_tmp[618325]
    {
      (419650 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556462] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556463] "maybe param" "temp"
    unknown call_tmp[618330] "expr temp" "maybe param" "maybe type" "temp"
    (618333 'move' call_tmp[618330](419635 call isTrue tmp[419634]))
    (556468 'move' tmp[556463](556466 call _cond_test call_tmp[618330]))
    if tmp[556463]
    {
      unknown tmp[556470] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618337] "expr temp" "maybe param" "maybe type" "temp"
      (618340 'move' call_tmp[618337](67538 call boundedType _mt[243] this[67531]))
      unknown call_tmp[618342] "expr temp" "maybe param" "maybe type" "temp"
      (618345 'move' call_tmp[618342](67545 call == call_tmp[618337] boundedHigh[64209]))
      (556472 'move' tmp[556470](419638 call isTrue call_tmp[618342]))
      (556477 'move' tmp[556462](556474 '_paramFoldLogical' tmp[556463] tmp[556470]))
    }
    {
      (556482 'move' tmp[556462](556479 '_paramFoldLogical' tmp[556463] 0))
    }
    (748242 call chpl_statementLevelSymbol tmp[556462])
  }
  function range[64316](?).isAmbiguous[67571](arg _mt[67576]:_MT[238], arg this[67573]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509896] "RVV" "param" "temp"
    (509901 'move' ret[509896](509900 'deref' 0))
    (509898 return ret[509896])
  }
  where {
    unknown call_tmp[618349] "expr temp" "maybe param" "maybe type" "temp"
    (618352 'move' call_tmp[618349](374299 call stridable _mt[243] this[67573]))
    (67579 call ! call_tmp[618349])
  }
  function range[64316](?).isAmbiguous[67591](arg _mt[67596]:_MT[238], arg this[67593]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[509905] "RVV" "temp"
    unknown tmp[419676] "maybe param" "temp"
    unknown call_tmp[618356] "expr temp" "maybe param" "maybe type" "temp"
    (618359 'move' call_tmp[618356](374308 call aligned _mt[243] this[67593]))
    (419687 'move' tmp[419676](67600 call ! call_tmp[618356]))
    unknown call_tmp[618361] "expr temp" "maybe param" "maybe type" "temp"
    (618364 'move' call_tmp[618361](419689 call _cond_invalid tmp[419676]))
    if call_tmp[618361]
    {
      (419692 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556516] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556517] "maybe param" "temp"
    unknown call_tmp[618366] "expr temp" "maybe param" "maybe type" "temp"
    (618369 'move' call_tmp[618366](419677 call isTrue tmp[419676]))
    (556522 'move' tmp[556517](556520 call _cond_test call_tmp[618366]))
    if tmp[556517]
    {
      unknown tmp[419697] "maybe param" "temp"
      unknown call_tmp[618373] "expr temp" "maybe param" "maybe type" "temp"
      (618376 'move' call_tmp[618373](374312 call stride _mt[243] this[67593]))
      (419708 'move' tmp[419697](67604 call > call_tmp[618373] 1))
      unknown call_tmp[618378] "expr temp" "maybe param" "maybe type" "temp"
      (618381 'move' call_tmp[618378](419710 call _cond_invalid tmp[419697]))
      if call_tmp[618378]
      {
        (419713 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556489] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556490] "maybe param" "temp"
      unknown call_tmp[618383] "expr temp" "maybe param" "maybe type" "temp"
      (618386 'move' call_tmp[618383](419698 call isTrue tmp[419697]))
      (556495 'move' tmp[556490](556493 call _cond_test call_tmp[618383]))
      if tmp[556490]
      {
        (556500 'move' tmp[556489](556497 '_paramFoldLogical' tmp[556490] 1))
      }
      {
        unknown tmp[556502] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618390] "expr temp" "maybe param" "maybe type" "temp"
        (618393 'move' call_tmp[618390](374316 call stride _mt[243] this[67593]))
        unknown call_tmp[618395] "expr temp" "maybe param" "maybe type" "temp"
        (618398 'move' call_tmp[618395](67608 call - 1))
        unknown call_tmp[618400] "expr temp" "maybe param" "maybe type" "temp"
        (618403 'move' call_tmp[618400](67610 call < call_tmp[618390] call_tmp[618395]))
        (556504 'move' tmp[556502](419702 call isTrue call_tmp[618400]))
        (556509 'move' tmp[556489](556506 '_paramFoldLogical' tmp[556490] tmp[556502]))
      }
      unknown tmp[556524] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556526 'move' tmp[556524](419680 call isTrue tmp[556489]))
      (556531 'move' tmp[556516](556528 '_paramFoldLogical' tmp[556517] tmp[556524]))
    }
    {
      (556536 'move' tmp[556516](556533 '_paramFoldLogical' tmp[556517] 0))
    }
    (509910 'move' ret[509905](509909 'deref' tmp[556516]))
    (509907 return ret[509905])
  }
  where {
    (374304 call stridable _mt[243] this[67593])
  }
  function range[64316](?).contains[67629](arg _mt[67634]:_MT[238], arg this[67631]:range[64316](?) :
  range[64316](?), arg ind[67626] :
  (374321 call idxType _mt[243] this[67631])) : _unknown[51] "inline" "method"
  {
    unknown ret[509914] "RVV" "temp"
    unknown call_tmp[618411] "expr temp" "maybe param" "maybe type" "temp"
    (618414 'move' call_tmp[618411](67643 call(67639 call (partial) isAmbiguous _mt[243] this[67631])))
    unknown call_tmp[618416] "expr temp" "maybe param" "maybe type" "temp"
    (618419 'move' call_tmp[618416](67647 call _cond_test call_tmp[618411]))
    if call_tmp[618416]
    {
      (509919 'move' ret[509914](509918 'deref' 0))
      gotoReturn _end_contains[509912] _end_contains[509912]
    }
    unknown call_tmp[618421] "maybe param" "maybe type" "temp"
    (618424 'move' call_tmp[618421](67656 call chpl__idxToInt ind[67626]))
    const i[67657] "dead at end of block" "const" "insert auto destroy"
    (541028 'init var' i[67657] call_tmp[618421])
    (67660 'end of statement')
    unknown call_tmp[618428] "expr temp" "maybe param" "maybe type" "temp"
    (618431 'move' call_tmp[618428](67663 call(374326 call (partial) hasHighBound _mt[243] this[67631])))
    unknown call_tmp[618433] "expr temp" "maybe param" "maybe type" "temp"
    (618436 'move' call_tmp[618433](67677 call _cond_test call_tmp[618428]))
    if call_tmp[618433]
    {
      unknown call_tmp[618440] "expr temp" "maybe param" "maybe type" "temp"
      (618443 'move' call_tmp[618440](374332 call _high _mt[243] this[67631]))
      unknown call_tmp[618445] "expr temp" "maybe param" "maybe type" "temp"
      (618448 'move' call_tmp[618445](67666 call > i[67657] call_tmp[618440]))
      unknown call_tmp[618450] "expr temp" "maybe param" "maybe type" "temp"
      (618453 'move' call_tmp[618450](67671 call _cond_test call_tmp[618445]))
      if call_tmp[618450]
      {
        (509924 'move' ret[509914](509923 'deref' 0))
        gotoReturn _end_contains[509912] _end_contains[509912]
      }
    }
    unknown call_tmp[618457] "expr temp" "maybe param" "maybe type" "temp"
    (618460 'move' call_tmp[618457](67683 call(374336 call (partial) hasLowBound _mt[243] this[67631])))
    unknown call_tmp[618462] "expr temp" "maybe param" "maybe type" "temp"
    (618465 'move' call_tmp[618462](67697 call _cond_test call_tmp[618457]))
    if call_tmp[618462]
    {
      unknown call_tmp[618469] "expr temp" "maybe param" "maybe type" "temp"
      (618472 'move' call_tmp[618469](374342 call _low _mt[243] this[67631]))
      unknown call_tmp[618474] "expr temp" "maybe param" "maybe type" "temp"
      (618477 'move' call_tmp[618474](67686 call < i[67657] call_tmp[618469]))
      unknown call_tmp[618479] "expr temp" "maybe param" "maybe type" "temp"
      (618482 'move' call_tmp[618479](67691 call _cond_test call_tmp[618474]))
      if call_tmp[618479]
      {
        (509929 'move' ret[509914](509928 'deref' 0))
        gotoReturn _end_contains[509912] _end_contains[509912]
      }
    }
    unknown call_tmp[618486] "expr temp" "maybe param" "maybe type" "temp"
    (618489 'move' call_tmp[618486](374347 call stridable _mt[243] this[67631]))
    unknown call_tmp[618491] "expr temp" "maybe param" "maybe type" "temp"
    (618494 'move' call_tmp[618491](67731 call _cond_test call_tmp[618486]))
    if call_tmp[618491]
    {
      unknown call_tmp[618498] "expr temp" "maybe param" "maybe type" "temp"
      (618501 'move' call_tmp[618498](374356 call intIdxType _mt[243] this[67631]))
      unknown call_tmp[618505] "expr temp" "maybe param" "maybe type" "temp"
      (618508 'move' call_tmp[618505](374352 call _stride _mt[243] this[67631]))
      unknown call_tmp[618510] "expr temp" "maybe param" "maybe type" "temp"
      (618513 'move' call_tmp[618510](67705 call abs call_tmp[618505]))
      unknown call_tmp[618515] "maybe param" "maybe type" "temp"
      (618518 'move' call_tmp[618515](67707 call _cast call_tmp[618498] call_tmp[618510]))
      unknown s[67709] "dead at end of block" "insert auto destroy"
      (541030 'init var' s[67709] call_tmp[618515])
      (67712 'end of statement')
      unknown call_tmp[618522] "expr temp" "maybe param" "maybe type" "temp"
      (618525 'move' call_tmp[618522](374362 call _alignment _mt[243] this[67631]))
      unknown call_tmp[618527] "expr temp" "maybe param" "maybe type" "temp"
      (618530 'move' call_tmp[618527](67719 call chpl__diffMod i[67657] call_tmp[618522] s[67709]))
      unknown call_tmp[618532] "expr temp" "maybe param" "maybe type" "temp"
      (618535 'move' call_tmp[618532](67721 call != call_tmp[618527] 0))
      unknown call_tmp[618537] "expr temp" "maybe param" "maybe type" "temp"
      (618540 'move' call_tmp[618537](67726 call _cond_test call_tmp[618532]))
      if call_tmp[618537]
      {
        (509934 'move' ret[509914](509933 'deref' 0))
        gotoReturn _end_contains[509912] _end_contains[509912]
      }
    }
    (509939 'move' ret[509914](509938 'deref' 1))
    label _end_contains[509912]
    (509916 return ret[509914])
  }
  function range[64316](?).contains[67750](arg _mt[67755]:_MT[238], arg this[67752]:range[64316](?) :
  range[64316](?), arg other[67747]:range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509943] "RVV" "temp"
    unknown tmp[419718] "maybe param" "temp"
    (419729 'move' tmp[419718](67762 call(67758 call (partial) isAmbiguous _mt[243] this[67752])))
    unknown call_tmp[618544] "expr temp" "maybe param" "maybe type" "temp"
    (618547 'move' call_tmp[618544](419731 call _cond_invalid tmp[419718]))
    if call_tmp[618544]
    {
      (419734 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556543] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556544] "maybe param" "temp"
    unknown call_tmp[618549] "expr temp" "maybe param" "maybe type" "temp"
    (618552 'move' call_tmp[618549](419719 call isTrue tmp[419718]))
    (556549 'move' tmp[556544](556547 call _cond_test call_tmp[618549]))
    if tmp[556544]
    {
      (556554 'move' tmp[556543](556551 '_paramFoldLogical' tmp[556544] 1))
    }
    {
      unknown tmp[556556] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618556] "expr temp" "maybe param" "maybe type" "temp"
      (618559 'move' call_tmp[618556](67768 call(67764 call (partial) isAmbiguous _mt[243] other[67747])))
      (556558 'move' tmp[556556](419723 call isTrue call_tmp[618556]))
      (556563 'move' tmp[556543](556560 '_paramFoldLogical' tmp[556544] tmp[556556]))
    }
    unknown call_tmp[618561] "expr temp" "maybe param" "maybe type" "temp"
    (618564 'move' call_tmp[618561](67774 call _cond_test tmp[556543]))
    if call_tmp[618561]
    {
      (509948 'move' ret[509943](509947 'deref' 0))
      gotoReturn _end_contains[509941] _end_contains[509941]
    }
    unknown call_tmp[618568] "expr temp" "maybe param" "maybe type" "temp"
    (618571 'move' call_tmp[618568](374369 call stridable _mt[243] this[67752]))
    unknown call_tmp[618573] "expr temp" "maybe param" "maybe type" "temp"
    (618576 'move' call_tmp[618573](67842 call _cond_test call_tmp[618568]))
    if call_tmp[618573]
    {
      unknown tmp[419739] "maybe param" "temp"
      unknown tmp[419760] "maybe param" "temp"
      unknown call_tmp[618580] "expr temp" "maybe param" "maybe type" "temp"
      (618583 'move' call_tmp[618580](374373 call stride _mt[243] this[67752]))
      (419771 'move' tmp[419760](67783 call > call_tmp[618580] 0))
      unknown call_tmp[618585] "expr temp" "maybe param" "maybe type" "temp"
      (618588 'move' call_tmp[618585](419773 call _cond_invalid tmp[419760]))
      if call_tmp[618585]
      {
        (419776 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556570] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556571] "maybe param" "temp"
      unknown call_tmp[618590] "expr temp" "maybe param" "maybe type" "temp"
      (618593 'move' call_tmp[618590](419761 call isTrue tmp[419760]))
      (556576 'move' tmp[556571](556574 call _cond_test call_tmp[618590]))
      if tmp[556571]
      {
        unknown tmp[556578] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618597] "expr temp" "maybe param" "maybe type" "temp"
        (618600 'move' call_tmp[618597](67786 call stride _mt[243] other[67747]))
        unknown call_tmp[618602] "expr temp" "maybe param" "maybe type" "temp"
        (618605 'move' call_tmp[618602](67790 call < call_tmp[618597] 0))
        (556580 'move' tmp[556578](419764 call isTrue call_tmp[618602]))
        (556585 'move' tmp[556570](556582 '_paramFoldLogical' tmp[556571] tmp[556578]))
      }
      {
        (556590 'move' tmp[556570](556587 '_paramFoldLogical' tmp[556571] 0))
      }
      (419750 'move' tmp[419739] tmp[556570])
      unknown call_tmp[618607] "expr temp" "maybe param" "maybe type" "temp"
      (618610 'move' call_tmp[618607](419752 call _cond_invalid tmp[419739]))
      if call_tmp[618607]
      {
        (419755 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556624] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556625] "maybe param" "temp"
      unknown call_tmp[618612] "expr temp" "maybe param" "maybe type" "temp"
      (618615 'move' call_tmp[618612](419740 call isTrue tmp[419739]))
      (556630 'move' tmp[556625](556628 call _cond_test call_tmp[618612]))
      if tmp[556625]
      {
        (556635 'move' tmp[556624](556632 '_paramFoldLogical' tmp[556625] 1))
      }
      {
        unknown tmp[419781] "maybe param" "temp"
        unknown call_tmp[618619] "expr temp" "maybe param" "maybe type" "temp"
        (618622 'move' call_tmp[618619](374377 call stride _mt[243] this[67752]))
        (419792 'move' tmp[419781](67796 call < call_tmp[618619] 0))
        unknown call_tmp[618624] "expr temp" "maybe param" "maybe type" "temp"
        (618627 'move' call_tmp[618624](419794 call _cond_invalid tmp[419781]))
        if call_tmp[618624]
        {
          (419797 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[556597] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[556598] "maybe param" "temp"
        unknown call_tmp[618629] "expr temp" "maybe param" "maybe type" "temp"
        (618632 'move' call_tmp[618629](419782 call isTrue tmp[419781]))
        (556603 'move' tmp[556598](556601 call _cond_test call_tmp[618629]))
        if tmp[556598]
        {
          unknown tmp[556605] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[618636] "expr temp" "maybe param" "maybe type" "temp"
          (618639 'move' call_tmp[618636](67799 call stride _mt[243] other[67747]))
          unknown call_tmp[618641] "expr temp" "maybe param" "maybe type" "temp"
          (618644 'move' call_tmp[618641](67803 call > call_tmp[618636] 0))
          (556607 'move' tmp[556605](419785 call isTrue call_tmp[618641]))
          (556612 'move' tmp[556597](556609 '_paramFoldLogical' tmp[556598] tmp[556605]))
        }
        {
          (556617 'move' tmp[556597](556614 '_paramFoldLogical' tmp[556598] 0))
        }
        unknown tmp[556637] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556639 'move' tmp[556637](419744 call isTrue tmp[556597]))
        (556644 'move' tmp[556624](556641 '_paramFoldLogical' tmp[556625] tmp[556637]))
      }
      unknown call_tmp[618646] "expr temp" "maybe param" "maybe type" "temp"
      (618649 'move' call_tmp[618646](67816 call _cond_test tmp[556624]))
      if call_tmp[618646]
      {
        unknown call_tmp[618651] "expr temp" "maybe param" "maybe type" "temp"
        (618654 'move' call_tmp[618651](67813 call _containsHelp this[67752] other[67747]))
        (509953 'move' ret[509943](509952 'deref' call_tmp[618651]))
        gotoReturn _end_contains[509941] _end_contains[509941]
      }
    }
    {
      unknown call_tmp[618658] "expr temp" "maybe param" "maybe type" "temp"
      (618661 'move' call_tmp[618658](67823 call stride _mt[243] other[67747]))
      unknown call_tmp[618663] "expr temp" "maybe param" "maybe type" "temp"
      (618666 'move' call_tmp[618663](67827 call < call_tmp[618658] 0))
      unknown call_tmp[618668] "expr temp" "maybe param" "maybe type" "temp"
      (618671 'move' call_tmp[618668](67836 call _cond_test call_tmp[618663]))
      if call_tmp[618668]
      {
        unknown call_tmp[618673] "expr temp" "maybe param" "maybe type" "temp"
        (618676 'move' call_tmp[618673](67833 call _containsHelp this[67752] other[67747]))
        (509958 'move' ret[509943](509957 'deref' call_tmp[618673]))
        gotoReturn _end_contains[509941] _end_contains[509941]
      }
    }
    unknown call_tmp[618678] "expr temp" "maybe param" "maybe type" "temp"
    (618681 'move' call_tmp[618678](67850 call this[67752] other[67747]))
    unknown call_tmp[618683] "expr temp" "maybe param" "maybe type" "temp"
    (618686 'move' call_tmp[618683](67851 call == other[67747] call_tmp[618678]))
    (509963 'move' ret[509943](509962 'deref' call_tmp[618683]))
    label _end_contains[509941]
    (509945 return ret[509943])
  }
  function range[64316](?).member[67864](arg _mt[67869]:_MT[238], arg this[67866]:range[64316](?) :
  range[64316](?), arg ind[67861] :
  (374389 call idxType _mt[243] this[67866])) : _unknown[51] "inline" "method"
  {
    unknown ret[509967] "RVV" "temp"
    unknown call_tmp[618690] "expr temp" "maybe param" "maybe type" "temp"
    (618693 'move' call_tmp[618690](67906 call + "range.member is deprecated - " "please use range.contains instead"))
    (67909 call compilerWarning call_tmp[618690])
    (475400 'end of statement')
    unknown call_tmp[618697] "expr temp" "maybe param" "maybe type" "temp"
    (618700 'move' call_tmp[618697](67920 call(67915 call (partial) contains _mt[243] this[67866]) ind[67861]))
    (509972 'move' ret[509967](509971 'deref' call_tmp[618697]))
    (509969 return ret[509967])
  }
  function range[64316](?).member[67935](arg _mt[67940]:_MT[238], arg this[67937]:range[64316](?) :
  range[64316](?), arg other[67932]:range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509976] "RVV" "temp"
    unknown call_tmp[618702] "expr temp" "maybe param" "maybe type" "temp"
    (618705 'move' call_tmp[618702](67945 call + "range.member is deprecated - " "please use range.contains instead"))
    (67948 call compilerWarning call_tmp[618702])
    (475402 'end of statement')
    unknown call_tmp[618709] "expr temp" "maybe param" "maybe type" "temp"
    (618712 'move' call_tmp[618709](67957 call(67952 call (partial) contains _mt[243] this[67937]) other[67932]))
    (509981 'move' ret[509976](509980 'deref' call_tmp[618709]))
    (509978 return ret[509976])
  }
  function _containsHelp[67971](in arg arg1[67968]:range[64316](?), in arg arg2[67977]:range[64316](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[509985] "RVV" "temp"
    unknown call_tmp[618716] "expr temp" "maybe param" "maybe type" "temp"
    (618719 'move' call_tmp[618716](67981 call stridable _mt[243] arg2[67977]))
    unknown call_tmp[618721] "expr temp" "maybe param" "maybe type" "temp"
    (618724 'move' call_tmp[618721](68010 call _cond_test call_tmp[618716]))
    if call_tmp[618721]
    {
      unknown call_tmp[618728] "expr temp" "maybe param" "maybe type" "temp"
      (618731 'move' call_tmp[618728](67985 call _stride _mt[243] arg2[67977]))
      unknown call_tmp[618735] "expr temp" "maybe param" "maybe type" "temp"
      (618738 'move' call_tmp[618735](67989 call _stride _mt[243] arg2[67977]))
      unknown call_tmp[618740] "expr temp" "maybe param" "maybe type" "temp"
      (618743 'move' call_tmp[618740](67992 call - call_tmp[618735]))
      (67994 call = call_tmp[618728] call_tmp[618740])
    }
    {
      unknown call_tmp[618747] "expr temp" "maybe param" "maybe type" "temp"
      (618750 'move' call_tmp[618747](67998 call _stride _mt[243] arg1[67968]))
      unknown call_tmp[618754] "expr temp" "maybe param" "maybe type" "temp"
      (618757 'move' call_tmp[618754](68002 call _stride _mt[243] arg1[67968]))
      unknown call_tmp[618759] "expr temp" "maybe param" "maybe type" "temp"
      (618762 'move' call_tmp[618759](68005 call - call_tmp[618754]))
      (68007 call = call_tmp[618747] call_tmp[618759])
    }
    unknown call_tmp[618764] "expr temp" "maybe param" "maybe type" "temp"
    (618767 'move' call_tmp[618764](68021 call arg1[67968] arg2[67977]))
    unknown call_tmp[618769] "expr temp" "maybe param" "maybe type" "temp"
    (618772 'move' call_tmp[618769](68022 call == arg2[67977] call_tmp[618764]))
    (509990 'move' ret[509985](509989 'deref' call_tmp[618769]))
    (509987 return ret[509985])
  }
  function ==[68037](arg r1[68034]:range[64316](?), arg r2[68043]:range[64316](?)) param : _unknown[51]
  {
    unknown ret[509994] "RVV" "param" "temp"
    (509999 'move' ret[509994](509998 'deref' 0))
    (509996 return ret[509994])
  }
  where {
    unknown call_tmp[618776] "expr temp" "maybe param" "maybe type" "temp"
    (618779 'move' call_tmp[618776](68047 call boundedType _mt[243] r1[68034]))
    unknown call_tmp[618783] "expr temp" "maybe param" "maybe type" "temp"
    (618786 'move' call_tmp[618783](68051 call boundedType _mt[243] r2[68043]))
    (68054 call != call_tmp[618776] call_tmp[618783])
  }
  function ==[68072](arg r1[68069]:range[64316](?), arg r2[68078]:range[64316](?)) : _unknown[51]
  {
    unknown ret[510003] "RVV" "temp"
    unknown call_tmp[618790] "expr temp" "maybe param" "maybe type" "temp"
    (618793 'move' call_tmp[618790](68097 call(68093 call (partial) isAmbiguous _mt[243] r1[68069])))
    unknown call_tmp[618797] "expr temp" "maybe param" "maybe type" "temp"
    (618800 'move' call_tmp[618797](68103 call(68099 call (partial) isAmbiguous _mt[243] r2[68078])))
    unknown call_tmp[618802] "expr temp" "maybe param" "maybe type" "temp"
    (618805 'move' call_tmp[618802](68104 call != call_tmp[618790] call_tmp[618797]))
    unknown call_tmp[618807] "expr temp" "maybe param" "maybe type" "temp"
    (618810 'move' call_tmp[618807](68109 call _cond_test call_tmp[618802]))
    if call_tmp[618807]
    {
      (510009 'move' ret[510003](510008 'coerce' 0 bool[10]))
      gotoReturn _end_==[510001] _end_==[510001]
    }
    unknown call_tmp[618814] "expr temp" "maybe param" "maybe type" "temp"
    (618817 'move' call_tmp[618814](68120 call(68116 call (partial) isAmbiguous _mt[243] r1[68069])))
    unknown call_tmp[618819] "expr temp" "maybe param" "maybe type" "temp"
    (618822 'move' call_tmp[618819](68128 call _cond_test call_tmp[618814]))
    if call_tmp[618819]
    {
      unknown call_tmp[618824] "expr temp" "maybe param" "maybe type" "temp"
      (618827 'move' call_tmp[618824](68125 call ident r1[68069] r2[68078]))
      (510015 'move' ret[510003](510014 'coerce' call_tmp[618824] bool[10]))
      gotoReturn _end_==[510001] _end_==[510001]
    }
    unknown call_tmp[618829] "expr temp" "maybe param" "maybe type" "temp"
    (618832 'move' call_tmp[618829](68136 call isBoundedRange r1[68069]))
    unknown call_tmp[618834] "expr temp" "maybe param" "maybe type" "temp"
    (618837 'move' call_tmp[618834](68310 call _cond_test call_tmp[618829]))
    if call_tmp[618834]
    {
      unknown call_tmp[618841] "maybe param" "maybe type" "temp"
      (618844 'move' call_tmp[618841](68138 call size _mt[243] r1[68069]))
      const len[68141] "dead at end of block" "const" "insert auto destroy"
      (541032 'init var' len[68141] call_tmp[618841])
      unknown call_tmp[618848] "maybe param" "maybe type" "temp"
      (618851 'move' call_tmp[618848](68145 call size _mt[243] r2[68078]))
      const l2[68148] "dead at end of block" "const" "insert auto destroy"
      (541034 'init var' l2[68148] call_tmp[618848])
      (68151 'end of statement')
      unknown call_tmp[618853] "expr temp" "maybe param" "maybe type" "temp"
      (618856 'move' call_tmp[618853](68155 call != len[68141] l2[68148]))
      unknown call_tmp[618858] "expr temp" "maybe param" "maybe type" "temp"
      (618861 'move' call_tmp[618858](68160 call _cond_test call_tmp[618853]))
      if call_tmp[618858]
      {
        (510021 'move' ret[510003](510020 'coerce' 0 bool[10]))
        gotoReturn _end_==[510001] _end_==[510001]
      }
      unknown call_tmp[618863] "expr temp" "maybe param" "maybe type" "temp"
      (618866 'move' call_tmp[618863](68167 call == len[68141] 0))
      unknown call_tmp[618868] "expr temp" "maybe param" "maybe type" "temp"
      (618871 'move' call_tmp[618868](68172 call _cond_test call_tmp[618863]))
      if call_tmp[618868]
      {
        (510027 'move' ret[510003](510026 'coerce' 1 bool[10]))
        gotoReturn _end_==[510001] _end_==[510001]
      }
      unknown call_tmp[618875] "expr temp" "maybe param" "maybe type" "temp"
      (618878 'move' call_tmp[618875](68180 call first _mt[243] r1[68069]))
      unknown call_tmp[618882] "expr temp" "maybe param" "maybe type" "temp"
      (618885 'move' call_tmp[618882](68184 call first _mt[243] r2[68078]))
      unknown call_tmp[618887] "expr temp" "maybe param" "maybe type" "temp"
      (618890 'move' call_tmp[618887](68187 call != call_tmp[618875] call_tmp[618882]))
      unknown call_tmp[618892] "expr temp" "maybe param" "maybe type" "temp"
      (618895 'move' call_tmp[618892](68192 call _cond_test call_tmp[618887]))
      if call_tmp[618892]
      {
        (510033 'move' ret[510003](510032 'coerce' 0 bool[10]))
        gotoReturn _end_==[510001] _end_==[510001]
      }
      unknown call_tmp[618897] "expr temp" "maybe param" "maybe type" "temp"
      (618900 'move' call_tmp[618897](68199 call == len[68141] 1))
      unknown call_tmp[618902] "expr temp" "maybe param" "maybe type" "temp"
      (618905 'move' call_tmp[618902](68204 call _cond_test call_tmp[618897]))
      if call_tmp[618902]
      {
        (510039 'move' ret[510003](510038 'coerce' 1 bool[10]))
        gotoReturn _end_==[510001] _end_==[510001]
      }
      unknown call_tmp[618909] "expr temp" "maybe param" "maybe type" "temp"
      (618912 'move' call_tmp[618909](68210 call stride _mt[243] r1[68069]))
      unknown call_tmp[618916] "expr temp" "maybe param" "maybe type" "temp"
      (618919 'move' call_tmp[618916](68214 call stride _mt[243] r2[68078]))
      unknown call_tmp[618921] "expr temp" "maybe param" "maybe type" "temp"
      (618924 'move' call_tmp[618921](68217 call != call_tmp[618909] call_tmp[618916]))
      unknown call_tmp[618926] "expr temp" "maybe param" "maybe type" "temp"
      (618929 'move' call_tmp[618926](68222 call _cond_test call_tmp[618921]))
      if call_tmp[618926]
      {
        (510045 'move' ret[510003](510044 'coerce' 0 bool[10]))
        gotoReturn _end_==[510001] _end_==[510001]
      }
      (510051 'move' ret[510003](510050 'coerce' 1 bool[10]))
      gotoReturn _end_==[510001] _end_==[510001]
    }
    {
      unknown call_tmp[618933] "expr temp" "maybe param" "maybe type" "temp"
      (618936 'move' call_tmp[618933](68231 call stride _mt[243] r1[68069]))
      unknown call_tmp[618940] "expr temp" "maybe param" "maybe type" "temp"
      (618943 'move' call_tmp[618940](68235 call stride _mt[243] r2[68078]))
      unknown call_tmp[618945] "expr temp" "maybe param" "maybe type" "temp"
      (618948 'move' call_tmp[618945](68238 call != call_tmp[618933] call_tmp[618940]))
      unknown call_tmp[618950] "expr temp" "maybe param" "maybe type" "temp"
      (618953 'move' call_tmp[618950](68243 call _cond_test call_tmp[618945]))
      if call_tmp[618950]
      {
        (510057 'move' ret[510003](510056 'coerce' 0 bool[10]))
        gotoReturn _end_==[510001] _end_==[510001]
      }
      unknown call_tmp[618957] "expr temp" "maybe param" "maybe type" "temp"
      (618960 'move' call_tmp[618957](68254 call(68250 call (partial) hasLowBound _mt[243] r1[68069])))
      unknown call_tmp[618962] "expr temp" "maybe param" "maybe type" "temp"
      (618965 'move' call_tmp[618962](68273 call _cond_test call_tmp[618957]))
      if call_tmp[618962]
      {
        unknown call_tmp[618969] "expr temp" "maybe param" "maybe type" "temp"
        (618972 'move' call_tmp[618969](68256 call alignedLow _mt[243] r1[68069]))
        unknown call_tmp[618976] "expr temp" "maybe param" "maybe type" "temp"
        (618979 'move' call_tmp[618976](68260 call alignedLow _mt[243] r2[68078]))
        unknown call_tmp[618981] "expr temp" "maybe param" "maybe type" "temp"
        (618984 'move' call_tmp[618981](68263 call != call_tmp[618969] call_tmp[618976]))
        unknown call_tmp[618986] "expr temp" "maybe param" "maybe type" "temp"
        (618989 'move' call_tmp[618986](68268 call _cond_test call_tmp[618981]))
        if call_tmp[618986]
        {
          (510063 'move' ret[510003](510062 'coerce' 0 bool[10]))
          gotoReturn _end_==[510001] _end_==[510001]
        }
      }
      unknown call_tmp[618993] "expr temp" "maybe param" "maybe type" "temp"
      (618996 'move' call_tmp[618993](68283 call(68279 call (partial) hasHighBound _mt[243] r1[68069])))
      unknown call_tmp[618998] "expr temp" "maybe param" "maybe type" "temp"
      (619001 'move' call_tmp[618998](68302 call _cond_test call_tmp[618993]))
      if call_tmp[618998]
      {
        unknown call_tmp[619005] "expr temp" "maybe param" "maybe type" "temp"
        (619008 'move' call_tmp[619005](68285 call alignedHigh _mt[243] r1[68069]))
        unknown call_tmp[619012] "expr temp" "maybe param" "maybe type" "temp"
        (619015 'move' call_tmp[619012](68289 call alignedHigh _mt[243] r2[68078]))
        unknown call_tmp[619017] "expr temp" "maybe param" "maybe type" "temp"
        (619020 'move' call_tmp[619017](68292 call != call_tmp[619005] call_tmp[619012]))
        unknown call_tmp[619022] "expr temp" "maybe param" "maybe type" "temp"
        (619025 'move' call_tmp[619022](68297 call _cond_test call_tmp[619017]))
        if call_tmp[619022]
        {
          (510069 'move' ret[510003](510068 'coerce' 0 bool[10]))
          gotoReturn _end_==[510001] _end_==[510001]
        }
      }
      (510075 'move' ret[510003](510074 'coerce' 1 bool[10]))
      gotoReturn _end_==[510001] _end_==[510001]
    }
    label _end_==[510001]
    (510005 return ret[510003])
  }
  where {
    unknown call_tmp[619029] "expr temp" "maybe param" "maybe type" "temp"
    (619032 'move' call_tmp[619029](68083 call boundedType _mt[243] r1[68069]))
    unknown call_tmp[619036] "expr temp" "maybe param" "maybe type" "temp"
    (619039 'move' call_tmp[619036](68087 call boundedType _mt[243] r2[68078]))
    (68090 call == call_tmp[619029] call_tmp[619036])
  }
  { scopeless type
    bool[10]
  }
  function !=[68327](arg r1[68324]:range[64316](?), arg r2[68333]:range[64316](?)) : _unknown[51]
  {
    unknown ret[510081] "RVV" "temp"
    unknown call_tmp[619041] "expr temp" "maybe param" "maybe type" "temp"
    (619044 'move' call_tmp[619041](68338 call == r1[68324] r2[68333]))
    unknown call_tmp[619046] "expr temp" "maybe param" "maybe type" "temp"
    (619049 'move' call_tmp[619046](68340 call ! call_tmp[619041]))
    (510086 'move' ret[510081](510085 'deref' call_tmp[619046]))
    (510083 return ret[510081])
  }
  function ident[68356](arg r1[68353]:range[64316](?), arg r2[68362]:range[64316](?)) : _unknown[51]
  {
    unknown ret[510090] "RVV" "temp"
    unknown call_tmp[619053] "expr temp" "maybe param" "maybe type" "temp"
    (619056 'move' call_tmp[619053](68400 call _low _mt[243] r1[68353]))
    unknown call_tmp[619060] "expr temp" "maybe param" "maybe type" "temp"
    (619063 'move' call_tmp[619060](68404 call _low _mt[243] r2[68362]))
    unknown call_tmp[619065] "expr temp" "maybe param" "maybe type" "temp"
    (619068 'move' call_tmp[619065](68407 call != call_tmp[619053] call_tmp[619060]))
    unknown call_tmp[619070] "expr temp" "maybe param" "maybe type" "temp"
    (619073 'move' call_tmp[619070](68412 call _cond_test call_tmp[619065]))
    if call_tmp[619070]
    {
      (510095 'move' ret[510090](510094 'deref' 0))
      gotoReturn _end_ident[510088] _end_ident[510088]
    }
    unknown call_tmp[619077] "expr temp" "maybe param" "maybe type" "temp"
    (619080 'move' call_tmp[619077](68419 call _high _mt[243] r1[68353]))
    unknown call_tmp[619084] "expr temp" "maybe param" "maybe type" "temp"
    (619087 'move' call_tmp[619084](68423 call _high _mt[243] r2[68362]))
    unknown call_tmp[619089] "expr temp" "maybe param" "maybe type" "temp"
    (619092 'move' call_tmp[619089](68426 call != call_tmp[619077] call_tmp[619084]))
    unknown call_tmp[619094] "expr temp" "maybe param" "maybe type" "temp"
    (619097 'move' call_tmp[619094](68431 call _cond_test call_tmp[619089]))
    if call_tmp[619094]
    {
      (510100 'move' ret[510090](510099 'deref' 0))
      gotoReturn _end_ident[510088] _end_ident[510088]
    }
    unknown call_tmp[619101] "expr temp" "maybe param" "maybe type" "temp"
    (619104 'move' call_tmp[619101](68437 call stridable _mt[243] r1[68353]))
    unknown call_tmp[619106] "expr temp" "maybe param" "maybe type" "temp"
    (619109 'move' call_tmp[619106](68508 call _cond_test call_tmp[619101]))
    if call_tmp[619106]
    {
      unknown call_tmp[619113] "expr temp" "maybe param" "maybe type" "temp"
      (619116 'move' call_tmp[619113](68441 call stridable _mt[243] r2[68362]))
      unknown call_tmp[619118] "expr temp" "maybe param" "maybe type" "temp"
      (619121 'move' call_tmp[619118](68503 call _cond_test call_tmp[619113]))
      if call_tmp[619118]
      {
        unknown call_tmp[619125] "expr temp" "maybe param" "maybe type" "temp"
        (619128 'move' call_tmp[619125](68445 call _stride _mt[243] r1[68353]))
        unknown call_tmp[619132] "expr temp" "maybe param" "maybe type" "temp"
        (619135 'move' call_tmp[619132](68449 call _stride _mt[243] r2[68362]))
        unknown call_tmp[619137] "expr temp" "maybe param" "maybe type" "temp"
        (619140 'move' call_tmp[619137](68452 call != call_tmp[619125] call_tmp[619132]))
        unknown call_tmp[619142] "expr temp" "maybe param" "maybe type" "temp"
        (619145 'move' call_tmp[619142](68457 call _cond_test call_tmp[619137]))
        if call_tmp[619142]
        {
          (510105 'move' ret[510090](510104 'deref' 0))
          gotoReturn _end_ident[510088] _end_ident[510088]
        }
        unknown call_tmp[619149] "expr temp" "maybe param" "maybe type" "temp"
        (619152 'move' call_tmp[619149](68464 call _alignment _mt[243] r1[68353]))
        unknown call_tmp[619156] "expr temp" "maybe param" "maybe type" "temp"
        (619159 'move' call_tmp[619156](68468 call _alignment _mt[243] r2[68362]))
        unknown call_tmp[619161] "expr temp" "maybe param" "maybe type" "temp"
        (619164 'move' call_tmp[619161](68471 call != call_tmp[619149] call_tmp[619156]))
        unknown call_tmp[619166] "expr temp" "maybe param" "maybe type" "temp"
        (619169 'move' call_tmp[619166](68476 call _cond_test call_tmp[619161]))
        if call_tmp[619166]
        {
          (510110 'move' ret[510090](510109 'deref' 0))
          gotoReturn _end_ident[510088] _end_ident[510088]
        }
        unknown call_tmp[619173] "expr temp" "maybe param" "maybe type" "temp"
        (619176 'move' call_tmp[619173](68482 call _aligned _mt[243] r1[68353]))
        unknown call_tmp[619180] "expr temp" "maybe param" "maybe type" "temp"
        (619183 'move' call_tmp[619180](68486 call _aligned _mt[243] r2[68362]))
        unknown call_tmp[619185] "expr temp" "maybe param" "maybe type" "temp"
        (619188 'move' call_tmp[619185](68489 call != call_tmp[619173] call_tmp[619180]))
        unknown call_tmp[619190] "expr temp" "maybe param" "maybe type" "temp"
        (619193 'move' call_tmp[619190](68494 call _cond_test call_tmp[619185]))
        if call_tmp[619190]
        {
          (510115 'move' ret[510090](510114 'deref' 0))
          gotoReturn _end_ident[510088] _end_ident[510088]
        }
      }
      {
        (510120 'move' ret[510090](510119 'deref' 0))
        gotoReturn _end_ident[510088] _end_ident[510088]
      }
    }
    (510125 'move' ret[510090](510124 'deref' 1))
    label _end_ident[510088]
    (510092 return ret[510090])
  }
  where {
    unknown tmp[419802] "maybe param" "temp"
    unknown tmp[419823] "maybe param" "temp"
    unknown call_tmp[619197] "expr temp" "maybe param" "maybe type" "temp"
    (619200 'move' call_tmp[619197](68366 call idxType _mt[243] r1[68353]))
    unknown call_tmp[619204] "expr temp" "maybe param" "maybe type" "temp"
    (619207 'move' call_tmp[619204](68370 call idxType _mt[243] r2[68362]))
    (419834 'move' tmp[419823](68373 call == call_tmp[619197] call_tmp[619204]))
    unknown call_tmp[619209] "expr temp" "maybe param" "maybe type" "temp"
    (619212 'move' call_tmp[619209](419836 call _cond_invalid tmp[419823]))
    if call_tmp[619209]
    {
      (419839 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556651] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556652] "maybe param" "temp"
    unknown call_tmp[619214] "expr temp" "maybe param" "maybe type" "temp"
    (619217 'move' call_tmp[619214](419824 call isTrue tmp[419823]))
    (556657 'move' tmp[556652](556655 call _cond_test call_tmp[619214]))
    if tmp[556652]
    {
      unknown tmp[556659] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619221] "expr temp" "maybe param" "maybe type" "temp"
      (619224 'move' call_tmp[619221](68376 call boundedType _mt[243] r1[68353]))
      unknown call_tmp[619228] "expr temp" "maybe param" "maybe type" "temp"
      (619231 'move' call_tmp[619228](68380 call boundedType _mt[243] r2[68362]))
      unknown call_tmp[619233] "expr temp" "maybe param" "maybe type" "temp"
      (619236 'move' call_tmp[619233](68383 call == call_tmp[619221] call_tmp[619228]))
      (556661 'move' tmp[556659](419827 call isTrue call_tmp[619233]))
      (556666 'move' tmp[556651](556663 '_paramFoldLogical' tmp[556652] tmp[556659]))
    }
    {
      (556671 'move' tmp[556651](556668 '_paramFoldLogical' tmp[556652] 0))
    }
    (419813 'move' tmp[419802] tmp[556651])
    unknown call_tmp[619238] "expr temp" "maybe param" "maybe type" "temp"
    (619241 'move' call_tmp[619238](419815 call _cond_invalid tmp[419802]))
    if call_tmp[619238]
    {
      (419818 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556678] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556679] "maybe param" "temp"
    unknown call_tmp[619243] "expr temp" "maybe param" "maybe type" "temp"
    (619246 'move' call_tmp[619243](419803 call isTrue tmp[419802]))
    (556684 'move' tmp[556679](556682 call _cond_test call_tmp[619243]))
    if tmp[556679]
    {
      unknown tmp[556686] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619250] "expr temp" "maybe param" "maybe type" "temp"
      (619253 'move' call_tmp[619250](68388 call stridable _mt[243] r1[68353]))
      unknown call_tmp[619257] "expr temp" "maybe param" "maybe type" "temp"
      (619260 'move' call_tmp[619257](68392 call stridable _mt[243] r2[68362]))
      unknown call_tmp[619262] "expr temp" "maybe param" "maybe type" "temp"
      (619265 'move' call_tmp[619262](68395 call == call_tmp[619250] call_tmp[619257]))
      (556688 'move' tmp[556686](419806 call isTrue call_tmp[619262]))
      (556693 'move' tmp[556678](556690 '_paramFoldLogical' tmp[556679] tmp[556686]))
    }
    {
      (556698 'move' tmp[556678](556695 '_paramFoldLogical' tmp[556679] 0))
    }
    (748244 call chpl_statementLevelSymbol tmp[556678])
  }
  function ident[68527](arg r1[68524]:range[64316](?), arg r2[68533]:range[64316](?)) param : _unknown[51] "no doc"
  {
    unknown ret[510129] "RVV" "param" "temp"
    (510134 'move' ret[510129](510133 'deref' 0))
    (510131 return ret[510129])
  }
  function range[64316](?).safeCast[68552](arg _mt[68557]:_MT[238], arg this[68554]:range[64316](?) :
  range[64316](?), arg t[68549]:range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510138] "RVV" "temp"
    unknown tmp[68560] "dead at end of block" "insert auto destroy"
    (541036 'default init var' tmp[68560] t[68549])
    (68563 'end of statement')
    unknown call_tmp[619269] "expr temp" "maybe param" "maybe type" "temp"
    (619272 'move' call_tmp[619269](68566 call boundedType _mt[243] tmp[68560]))
    unknown call_tmp[619276] "expr temp" "maybe param" "maybe type" "temp"
    (619279 'move' call_tmp[619276](68570 call boundedType _mt[243] this[68554]))
    unknown call_tmp[619281] "expr temp" "maybe param" "maybe type" "temp"
    (619284 'move' call_tmp[619281](68573 call != call_tmp[619269] call_tmp[619276]))
    unknown call_tmp[619286] "expr temp" "maybe param" "maybe type" "temp"
    (619289 'move' call_tmp[619286](68628 call _cond_test call_tmp[619281]))
    if call_tmp[619286]
    {
      unknown call_tmp[619293] "expr temp" "maybe param" "maybe type" "temp"
      (619296 'move' call_tmp[619293](68595 call boundedType _mt[243] this[68554]))
      unknown call_tmp[619298] "expr temp" "maybe param" "maybe type" "temp"
      (619301 'move' call_tmp[619298](68599 call _cast string[26] call_tmp[619293]))
      unknown call_tmp[619305] "expr temp" "maybe param" "maybe type" "temp"
      (619308 'move' call_tmp[619305](68619 call boundedType _mt[243] tmp[68560]))
      unknown call_tmp[619310] "expr temp" "maybe param" "maybe type" "temp"
      (619313 'move' call_tmp[619310](68623 call _cast string[26] call_tmp[619305]))
      (68625 call compilerError "cannot cast range from " call_tmp[619298] " to " call_tmp[619310])
      (475429 'end of statement' tmp[68560])
    }
    unknown call_tmp[619317] "expr temp" "maybe param" "maybe type" "temp"
    (619320 'move' call_tmp[619317](68633 call stridable _mt[243] tmp[68560]))
    unknown call_tmp[619322] "expr temp" "maybe param" "maybe type" "temp"
    (619325 'move' call_tmp[619322](68722 call _cond_test call_tmp[619317]))
    if call_tmp[619322]
    {
      unknown call_tmp[619329] "expr temp" "maybe param" "maybe type" "temp"
      (619332 'move' call_tmp[619329](68637 call _stride _mt[243] tmp[68560]))
      unknown call_tmp[619336] "expr temp" "maybe param" "maybe type" "temp"
      (619339 'move' call_tmp[619336](68641 call stride _mt[243] this[68554]))
      (68644 call = call_tmp[619329] call_tmp[619336])
      (475431 'end of statement' tmp[68560])
      unknown call_tmp[619343] "expr temp" "maybe param" "maybe type" "temp"
      (619346 'move' call_tmp[619343](68649 call _alignment _mt[243] tmp[68560]))
      unknown call_tmp[619350] "expr temp" "maybe param" "maybe type" "temp"
      (619353 'move' call_tmp[619350](68654 call alignment _mt[243] this[68554]))
      unknown call_tmp[619355] "expr temp" "maybe param" "maybe type" "temp"
      (619358 'move' call_tmp[619355](68658 call chpl__idxToInt call_tmp[619350]))
      unknown call_tmp[619364] "expr temp" "maybe param" "maybe type" "temp"
      (619367 'move' call_tmp[619364](68665 call intIdxType _mt[243] tmp[68560]))
      unknown call_tmp[619369] "expr temp" "maybe param" "maybe type" "temp"
      (619372 'move' call_tmp[619369](68669 call(68659 call (partial) safeCast _mt[243] call_tmp[619355]) call_tmp[619364]))
      (68670 call = call_tmp[619343] call_tmp[619369])
      (475433 'end of statement' tmp[68560] tmp[68560])
      unknown call_tmp[619376] "expr temp" "maybe param" "maybe type" "temp"
      (619379 'move' call_tmp[619376](68674 call _aligned _mt[243] tmp[68560]))
      unknown call_tmp[619383] "expr temp" "maybe param" "maybe type" "temp"
      (619386 'move' call_tmp[619383](68678 call aligned _mt[243] this[68554]))
      (68681 call = call_tmp[619376] call_tmp[619383])
      (475436 'end of statement' tmp[68560])
    }
    {
      unknown call_tmp[619390] "expr temp" "maybe param" "maybe type" "temp"
      (619393 'move' call_tmp[619390](68685 call stride _mt[243] this[68554]))
      unknown call_tmp[619395] "expr temp" "maybe param" "maybe type" "temp"
      (619398 'move' call_tmp[619395](68689 call != call_tmp[619390] 1))
      unknown call_tmp[619400] "expr temp" "maybe param" "maybe type" "temp"
      (619403 'move' call_tmp[619400](68718 call _cond_test call_tmp[619395]))
      if call_tmp[619400]
      {
        (68715 call safeCastCheckHalt module=[255] HaltWrappers[209998] "illegal safeCast from non-unit stride range to unstridable range")
        (357645 'referenced modules list' HaltWrappers[209998])
      }
    }
    unknown call_tmp[619407] "expr temp" "maybe param" "maybe type" "temp"
    (619410 'move' call_tmp[619407](68728 call _low _mt[243] tmp[68560]))
    unknown call_tmp[619414] "expr temp" "maybe param" "maybe type" "temp"
    (619417 'move' call_tmp[619414](68732 call _low _mt[243] this[68554]))
    unknown call_tmp[619423] "expr temp" "maybe param" "maybe type" "temp"
    (619426 'move' call_tmp[619423](68739 call intIdxType _mt[243] tmp[68560]))
    unknown call_tmp[619428] "expr temp" "maybe param" "maybe type" "temp"
    (619431 'move' call_tmp[619428](68743 call(68735 call (partial) safeCast _mt[243] call_tmp[619414]) call_tmp[619423]))
    (68744 call = call_tmp[619407] call_tmp[619428])
    (475439 'end of statement' tmp[68560] tmp[68560])
    unknown call_tmp[619435] "expr temp" "maybe param" "maybe type" "temp"
    (619438 'move' call_tmp[619435](68748 call _high _mt[243] tmp[68560]))
    unknown call_tmp[619442] "expr temp" "maybe param" "maybe type" "temp"
    (619445 'move' call_tmp[619442](68752 call _high _mt[243] this[68554]))
    unknown call_tmp[619451] "expr temp" "maybe param" "maybe type" "temp"
    (619454 'move' call_tmp[619451](68759 call intIdxType _mt[243] tmp[68560]))
    unknown call_tmp[619456] "expr temp" "maybe param" "maybe type" "temp"
    (619459 'move' call_tmp[619456](68763 call(68755 call (partial) safeCast _mt[243] call_tmp[619442]) call_tmp[619451]))
    (68764 call = call_tmp[619435] call_tmp[619456])
    (475442 'end of statement' tmp[68560] tmp[68560])
    (510143 'move' ret[510138](510142 'deref' tmp[68560]))
    gotoReturn _end_safeCast[510136] _end_safeCast[510136]
    (475445 'end of statement' tmp[68560])
    label _end_safeCast[510136]
    (510140 return ret[510138])
  }
  function _cast[68781](arg t[68778]:range[64316](?), arg r[68787]:range[64316](?)) : _unknown[51] "no doc"
  {
    unknown ret[510149] "RVV" "temp"
    unknown tmp[68791] "dead at end of block" "insert auto destroy"
    (541038 'default init var' tmp[68791] t[68778])
    (68794 'end of statement')
    unknown call_tmp[619463] "expr temp" "maybe param" "maybe type" "temp"
    (619466 'move' call_tmp[619463](68797 call boundedType _mt[243] tmp[68791]))
    unknown call_tmp[619470] "expr temp" "maybe param" "maybe type" "temp"
    (619473 'move' call_tmp[619470](68801 call boundedType _mt[243] r[68787]))
    unknown call_tmp[619475] "expr temp" "maybe param" "maybe type" "temp"
    (619478 'move' call_tmp[619475](68804 call != call_tmp[619463] call_tmp[619470]))
    unknown call_tmp[619480] "expr temp" "maybe param" "maybe type" "temp"
    (619483 'move' call_tmp[619480](68827 call _cond_test call_tmp[619475]))
    if call_tmp[619480]
    {
      unknown call_tmp[619487] "expr temp" "maybe param" "maybe type" "temp"
      (619490 'move' call_tmp[619487](68810 call boundedType _mt[243] r[68787]))
      unknown call_tmp[619492] "expr temp" "maybe param" "maybe type" "temp"
      (619495 'move' call_tmp[619492](68814 call _cast string[26] call_tmp[619487]))
      unknown call_tmp[619499] "expr temp" "maybe param" "maybe type" "temp"
      (619502 'move' call_tmp[619499](68818 call boundedType _mt[243] tmp[68791]))
      unknown call_tmp[619504] "expr temp" "maybe param" "maybe type" "temp"
      (619507 'move' call_tmp[619504](68822 call _cast string[26] call_tmp[619499]))
      (68824 call compilerError "cannot cast range from " call_tmp[619492] " to " call_tmp[619504])
      (475447 'end of statement' tmp[68791])
    }
    unknown call_tmp[619511] "expr temp" "maybe param" "maybe type" "temp"
    (619514 'move' call_tmp[619511](68832 call stridable _mt[243] tmp[68791]))
    unknown call_tmp[619516] "expr temp" "maybe param" "maybe type" "temp"
    (619519 'move' call_tmp[619516](68875 call _cond_test call_tmp[619511]))
    if call_tmp[619516]
    {
      unknown call_tmp[619523] "expr temp" "maybe param" "maybe type" "temp"
      (619526 'move' call_tmp[619523](68836 call _stride _mt[243] tmp[68791]))
      unknown call_tmp[619530] "expr temp" "maybe param" "maybe type" "temp"
      (619533 'move' call_tmp[619530](68840 call _stride _mt[243] r[68787]))
      (68843 call = call_tmp[619523] call_tmp[619530])
      (475449 'end of statement' tmp[68791])
      unknown call_tmp[619537] "expr temp" "maybe param" "maybe type" "temp"
      (619540 'move' call_tmp[619537](68848 call _alignment _mt[243] tmp[68791]))
      unknown call_tmp[619544] "expr temp" "maybe param" "maybe type" "temp"
      (619547 'move' call_tmp[619544](68856 call intIdxType _mt[243] tmp[68791]))
      unknown call_tmp[619551] "expr temp" "maybe param" "maybe type" "temp"
      (619554 'move' call_tmp[619551](68852 call _alignment _mt[243] r[68787]))
      unknown call_tmp[619556] "expr temp" "maybe param" "maybe type" "temp"
      (619559 'move' call_tmp[619556](68859 call _cast call_tmp[619544] call_tmp[619551]))
      (68861 call = call_tmp[619537] call_tmp[619556])
      (475451 'end of statement' tmp[68791] tmp[68791])
      unknown call_tmp[619563] "expr temp" "maybe param" "maybe type" "temp"
      (619566 'move' call_tmp[619563](68865 call _aligned _mt[243] tmp[68791]))
      unknown call_tmp[619570] "expr temp" "maybe param" "maybe type" "temp"
      (619573 'move' call_tmp[619570](68869 call _aligned _mt[243] r[68787]))
      (68872 call = call_tmp[619563] call_tmp[619570])
      (475454 'end of statement' tmp[68791])
    }
    unknown call_tmp[619577] "expr temp" "maybe param" "maybe type" "temp"
    (619580 'move' call_tmp[619577](68880 call _low _mt[243] tmp[68791]))
    unknown call_tmp[619584] "expr temp" "maybe param" "maybe type" "temp"
    (619587 'move' call_tmp[619584](68888 call intIdxType _mt[243] tmp[68791]))
    unknown call_tmp[619591] "expr temp" "maybe param" "maybe type" "temp"
    (619594 'move' call_tmp[619591](68884 call low _mt[243] r[68787]))
    unknown call_tmp[619596] "expr temp" "maybe param" "maybe type" "temp"
    (619599 'move' call_tmp[619596](68891 call _cast call_tmp[619584] call_tmp[619591]))
    (68893 call = call_tmp[619577] call_tmp[619596])
    (475456 'end of statement' tmp[68791] tmp[68791])
    unknown call_tmp[619603] "expr temp" "maybe param" "maybe type" "temp"
    (619606 'move' call_tmp[619603](68897 call _high _mt[243] tmp[68791]))
    unknown call_tmp[619610] "expr temp" "maybe param" "maybe type" "temp"
    (619613 'move' call_tmp[619610](68905 call intIdxType _mt[243] tmp[68791]))
    unknown call_tmp[619617] "expr temp" "maybe param" "maybe type" "temp"
    (619620 'move' call_tmp[619617](68901 call high _mt[243] r[68787]))
    unknown call_tmp[619622] "expr temp" "maybe param" "maybe type" "temp"
    (619625 'move' call_tmp[619622](68908 call _cast call_tmp[619610] call_tmp[619617]))
    (68910 call = call_tmp[619603] call_tmp[619622])
    (475459 'end of statement' tmp[68791] tmp[68791])
    (510154 'move' ret[510149](510153 'deref' tmp[68791]))
    gotoReturn _end__cast[510147] _end__cast[510147]
    (475462 'end of statement' tmp[68791])
    label _end__cast[510147]
    (510151 return ret[510149])
  }
  function range[64316](?).boundsCheck[68933](arg _mt[68938]:_MT[238], arg this[68935]:range[64316](?) :
  range[64316](?), arg other[68930]:range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510160] "RVV" "temp"
    unknown tmp[419844] "maybe param" "temp"
    (419855 'move' tmp[419844](68952 call(68948 call (partial) isAmbiguous _mt[243] this[68935])))
    unknown call_tmp[619629] "expr temp" "maybe param" "maybe type" "temp"
    (619632 'move' call_tmp[619629](419857 call _cond_invalid tmp[419844]))
    if call_tmp[619629]
    {
      (419860 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556705] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556706] "maybe param" "temp"
    unknown call_tmp[619634] "expr temp" "maybe param" "maybe type" "temp"
    (619637 'move' call_tmp[619634](419845 call isTrue tmp[419844]))
    (556711 'move' tmp[556706](556709 call _cond_test call_tmp[619634]))
    if tmp[556706]
    {
      (556716 'move' tmp[556705](556713 '_paramFoldLogical' tmp[556706] 1))
    }
    {
      unknown tmp[556718] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619641] "expr temp" "maybe param" "maybe type" "temp"
      (619644 'move' call_tmp[619641](68958 call(68954 call (partial) isAmbiguous _mt[243] other[68930])))
      (556720 'move' tmp[556718](419849 call isTrue call_tmp[619641]))
      (556725 'move' tmp[556705](556722 '_paramFoldLogical' tmp[556706] tmp[556718]))
    }
    unknown call_tmp[619646] "expr temp" "maybe param" "maybe type" "temp"
    (619649 'move' call_tmp[619646](68964 call _cond_test tmp[556705]))
    if call_tmp[619646]
    {
      (510165 'move' ret[510160](510164 'deref' 0))
      gotoReturn _end_boundsCheck[510158] _end_boundsCheck[510158]
    }
    (510170 'move' ret[510160](510169 'deref' 1))
    label _end_boundsCheck[510158]
    (510162 return ret[510160])
  }
  where {
    unknown call_tmp[619651] "expr temp" "maybe param" "maybe type" "temp"
    (619654 'move' call_tmp[619651](455751 'query' other[68930] 2))
    (68945 call == call_tmp[619651] boundedNone[64211])
  }
  function range[64316](?).boundsCheck[68991](arg _mt[68996]:_MT[238], arg this[68993]:range[64316](?) :
  range[64316](?), arg other[68988]:range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510174] "RVV" "temp"
    unknown tmp[419865] "maybe param" "temp"
    (419876 'move' tmp[419865](69003 call(68999 call (partial) isAmbiguous _mt[243] this[68993])))
    unknown call_tmp[619658] "expr temp" "maybe param" "maybe type" "temp"
    (619661 'move' call_tmp[619658](419878 call _cond_invalid tmp[419865]))
    if call_tmp[619658]
    {
      (419881 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556732] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556733] "maybe param" "temp"
    unknown call_tmp[619663] "expr temp" "maybe param" "maybe type" "temp"
    (619666 'move' call_tmp[619663](419866 call isTrue tmp[419865]))
    (556738 'move' tmp[556733](556736 call _cond_test call_tmp[619663]))
    if tmp[556733]
    {
      (556743 'move' tmp[556732](556740 '_paramFoldLogical' tmp[556733] 1))
    }
    {
      unknown tmp[556745] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619670] "expr temp" "maybe param" "maybe type" "temp"
      (619673 'move' call_tmp[619670](69009 call(69005 call (partial) isAmbiguous _mt[243] other[68988])))
      (556747 'move' tmp[556745](419870 call isTrue call_tmp[619670]))
      (556752 'move' tmp[556732](556749 '_paramFoldLogical' tmp[556733] tmp[556745]))
    }
    unknown call_tmp[619675] "expr temp" "maybe param" "maybe type" "temp"
    (619678 'move' call_tmp[619675](69015 call _cond_test tmp[556732]))
    if call_tmp[619675]
    {
      (510179 'move' ret[510174](510178 'deref' 0))
      gotoReturn _end_boundsCheck[510172] _end_boundsCheck[510172]
    }
    unknown tmp[419886] "maybe param" "temp"
    (419897 'move' tmp[419886](455770 'query' other[68988] 3))
    unknown call_tmp[619680] "expr temp" "maybe param" "maybe type" "temp"
    (619683 'move' call_tmp[619680](419899 call _cond_invalid tmp[419886]))
    if call_tmp[619680]
    {
      (419902 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown boundedOther[69074] "dead at end of block" "insert auto destroy"
    unknown tmp[556759] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556760] "maybe param" "temp"
    unknown call_tmp[619685] "expr temp" "maybe param" "maybe type" "temp"
    (619688 'move' call_tmp[619685](419887 call isTrue tmp[419886]))
    (556765 'move' tmp[556760](556763 call _cond_test call_tmp[619685]))
    if tmp[556760]
    {
      (556770 'move' tmp[556759](556767 '_paramFoldLogical' tmp[556760] 1))
    }
    {
      unknown tmp[556772] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619692] "expr temp" "maybe param" "maybe type" "temp"
      (619695 'move' call_tmp[619692](69031 call stridable _mt[243] this[68993]))
      (556774 'move' tmp[556772](419891 call isTrue call_tmp[619692]))
      (556779 'move' tmp[556759](556776 '_paramFoldLogical' tmp[556760] tmp[556772]))
    }
    unknown tmp[556786] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556787] "maybe param" "temp"
    unknown call_tmp[619699] "expr temp" "maybe param" "maybe type" "temp"
    (619702 'move' call_tmp[619699](69041 call(69037 call (partial) hasLowBound _mt[243] other[68988])))
    (556792 'move' tmp[556787](556790 call _cond_test call_tmp[619699]))
    if tmp[556787]
    {
      unknown tmp[556794] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556796 'move' tmp[556794](69043 call low _mt[243] other[68988]))
      (556801 'move' tmp[556786](556798 '_paramFoldLogical' tmp[556787] tmp[556794]))
    }
    {
      unknown tmp[556803] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556805 'move' tmp[556803](374437 call low _mt[243] this[68993]))
      (556810 'move' tmp[556786](556807 '_paramFoldLogical' tmp[556787] tmp[556803]))
    }
    unknown tmp[556817] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556818] "maybe param" "temp"
    unknown call_tmp[619710] "expr temp" "maybe param" "maybe type" "temp"
    (619713 'move' call_tmp[619710](69055 call(69051 call (partial) hasHighBound _mt[243] other[68988])))
    (556823 'move' tmp[556818](556821 call _cond_test call_tmp[619710]))
    if tmp[556818]
    {
      unknown tmp[556825] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556827 'move' tmp[556825](69057 call high _mt[243] other[68988]))
      (556832 'move' tmp[556817](556829 '_paramFoldLogical' tmp[556818] tmp[556825]))
    }
    {
      unknown tmp[556834] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556836 'move' tmp[556834](374441 call high _mt[243] this[68993]))
      (556841 'move' tmp[556817](556838 '_paramFoldLogical' tmp[556818] tmp[556834]))
    }
    unknown call_tmp[619721] "expr temp" "maybe param" "maybe type" "temp"
    (619724 'move' call_tmp[619721](374432 call idxType _mt[243] this[68993]))
    unknown call_tmp[619728] "expr temp" "maybe param" "maybe type" "temp"
    (619731 'move' call_tmp[619728](69065 call stride _mt[243] other[68988]))
    unknown call_tmp[619735] "expr temp" "maybe param" "maybe type" "temp"
    (619738 'move' call_tmp[619735](69069 call alignment _mt[243] other[68988]))
    unknown call_tmp[619740] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (619743 'move' call_tmp[619740](747777 'new' range[64316](?) call_tmp[619721] bounded[64205] tmp[556759] tmp[556786] tmp[556817] call_tmp[619728] call_tmp[619735] 1))
    (541040 'init var' boundedOther[69074] call_tmp[619740])
    (69077 'end of statement')
    unknown tmp[419907] "maybe param" "temp"
    unknown call_tmp[619747] "expr temp" "maybe param" "maybe type" "temp"
    (619750 'move' call_tmp[619747](69079 call size _mt[243] boundedOther[69074]))
    (419918 'move' tmp[419907](69083 call == call_tmp[619747] 0))
    unknown call_tmp[619752] "expr temp" "maybe param" "maybe type" "temp"
    (619755 'move' call_tmp[619752](419920 call _cond_invalid tmp[419907]))
    if call_tmp[619752]
    {
      (419923 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556848] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556849] "maybe param" "temp"
    unknown call_tmp[619757] "expr temp" "maybe param" "maybe type" "temp"
    (619760 'move' call_tmp[619757](419908 call isTrue tmp[419907]))
    (556854 'move' tmp[556849](556852 call _cond_test call_tmp[619757]))
    if tmp[556849]
    {
      (556859 'move' tmp[556848](556856 '_paramFoldLogical' tmp[556849] 1))
    }
    {
      unknown tmp[556861] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619764] "expr temp" "maybe param" "maybe type" "temp"
      (619767 'move' call_tmp[619764](69088 call(374445 call (partial) contains _mt[243] this[68993]) boundedOther[69074]))
      (556863 'move' tmp[556861](419912 call isTrue call_tmp[619764]))
      (556868 'move' tmp[556848](556865 '_paramFoldLogical' tmp[556849] tmp[556861]))
    }
    (510184 'move' ret[510174](510183 'deref' tmp[556848]))
    gotoReturn _end_boundsCheck[510172] _end_boundsCheck[510172]
    (475471 'end of statement' boundedOther[69074])
    label _end_boundsCheck[510172]
    (510176 return ret[510174])
  }
  function range[64316](?).boundsCheck[69102](arg _mt[69107]:_MT[238], arg this[69104]:range[64316](?) :
  range[64316](?), arg other[69099] :
  (374451 call idxType _mt[243] this[69104])) : _unknown[51] "inline" "method"
  {
    unknown ret[510190] "RVV" "temp"
    unknown call_tmp[619773] "expr temp" "maybe param" "maybe type" "temp"
    (619776 'move' call_tmp[619773](69112 call(374455 call (partial) contains _mt[243] this[69104]) other[69099]))
    (510195 'move' ret[510190](510194 'deref' call_tmp[619773]))
    (510192 return ret[510190])
  }
  function range[64316](?).alignLow[69121](arg _mt[69126]:_MT[238], ref arg this[69123]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510199] "RVV" "temp"
    unknown tmp[419928] "maybe param" "temp"
    (419939 'move' tmp[419928] 1)
    unknown call_tmp[619778] "expr temp" "maybe param" "maybe type" "temp"
    (619781 'move' call_tmp[619778](419941 call _cond_invalid tmp[419928]))
    if call_tmp[619778]
    {
      (419944 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556875] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556876] "maybe param" "temp"
    unknown call_tmp[619783] "expr temp" "maybe param" "maybe type" "temp"
    (619786 'move' call_tmp[619783](419929 call isTrue tmp[419928]))
    (556881 'move' tmp[556876](556879 call _cond_test call_tmp[619783]))
    if tmp[556876]
    {
      unknown tmp[556883] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619790] "expr temp" "maybe param" "maybe type" "temp"
      (619793 'move' call_tmp[619790](69134 call(69130 call (partial) isAmbiguous _mt[243] this[69123])))
      (556885 'move' tmp[556883](419932 call isTrue call_tmp[619790]))
      (556890 'move' tmp[556875](556887 '_paramFoldLogical' tmp[556876] tmp[556883]))
    }
    {
      (556895 'move' tmp[556875](556892 '_paramFoldLogical' tmp[556876] 0))
    }
    unknown call_tmp[619795] "expr temp" "maybe param" "maybe type" "temp"
    (619798 'move' call_tmp[619795](69163 call _cond_test tmp[556875]))
    if call_tmp[619795]
    {
      (69161 call boundsCheckHalt module=[255] HaltWrappers[209998] "alignLow -- Cannot be applied to a range with ambiguous alignment.")
      (357690 'referenced modules list' HaltWrappers[209998])
    }
    unknown call_tmp[619802] "expr temp" "maybe param" "maybe type" "temp"
    (619805 'move' call_tmp[619802](374462 call stridable _mt[243] this[69123]))
    unknown call_tmp[619807] "expr temp" "maybe param" "maybe type" "temp"
    (619810 'move' call_tmp[619807](69178 call _cond_test call_tmp[619802]))
    if call_tmp[619807]
    {
      unknown call_tmp[619814] "expr temp" "maybe param" "maybe type" "temp"
      (619817 'move' call_tmp[619814](374467 call _low _mt[243] this[69123]))
      unknown call_tmp[619821] "expr temp" "maybe param" "maybe type" "temp"
      (619824 'move' call_tmp[619821](69172 call alignedLowAsInt _mt[243] this[69123]))
      (69175 call = call_tmp[619814] call_tmp[619821])
    }
    (510204 'move' ret[510199](510203 'deref' this[69123]))
    (510201 return ret[510199])
  }
  function range[64316](?).alignHigh[69191](arg _mt[69196]:_MT[238], ref arg this[69193]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510208] "RVV" "temp"
    unknown tmp[419949] "maybe param" "temp"
    (419960 'move' tmp[419949] 1)
    unknown call_tmp[619826] "expr temp" "maybe param" "maybe type" "temp"
    (619829 'move' call_tmp[619826](419962 call _cond_invalid tmp[419949]))
    if call_tmp[619826]
    {
      (419965 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556902] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556903] "maybe param" "temp"
    unknown call_tmp[619831] "expr temp" "maybe param" "maybe type" "temp"
    (619834 'move' call_tmp[619831](419950 call isTrue tmp[419949]))
    (556908 'move' tmp[556903](556906 call _cond_test call_tmp[619831]))
    if tmp[556903]
    {
      unknown tmp[556910] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619838] "expr temp" "maybe param" "maybe type" "temp"
      (619841 'move' call_tmp[619838](69204 call(69200 call (partial) isAmbiguous _mt[243] this[69193])))
      (556912 'move' tmp[556910](419953 call isTrue call_tmp[619838]))
      (556917 'move' tmp[556902](556914 '_paramFoldLogical' tmp[556903] tmp[556910]))
    }
    {
      (556922 'move' tmp[556902](556919 '_paramFoldLogical' tmp[556903] 0))
    }
    unknown call_tmp[619843] "expr temp" "maybe param" "maybe type" "temp"
    (619846 'move' call_tmp[619843](69231 call _cond_test tmp[556902]))
    if call_tmp[619843]
    {
      (69229 call boundsCheckHalt module=[255] HaltWrappers[209998] "alignHigh -- Cannot be applied to a range with ambiguous alignment.")
      (357698 'referenced modules list' HaltWrappers[209998])
    }
    unknown call_tmp[619850] "expr temp" "maybe param" "maybe type" "temp"
    (619853 'move' call_tmp[619850](374474 call stridable _mt[243] this[69193]))
    unknown call_tmp[619855] "expr temp" "maybe param" "maybe type" "temp"
    (619858 'move' call_tmp[619855](69246 call _cond_test call_tmp[619850]))
    if call_tmp[619855]
    {
      unknown call_tmp[619862] "expr temp" "maybe param" "maybe type" "temp"
      (619865 'move' call_tmp[619862](374479 call _high _mt[243] this[69193]))
      unknown call_tmp[619869] "expr temp" "maybe param" "maybe type" "temp"
      (619872 'move' call_tmp[619869](69240 call alignedHighAsInt _mt[243] this[69193]))
      (69243 call = call_tmp[619862] call_tmp[619869])
    }
    (510213 'move' ret[510208](510212 'deref' this[69193]))
    (510210 return ret[510208])
  }
  function range[64316](?).indexOrder[69263](arg _mt[69268]:_MT[238], arg this[69265]:range[64316](?) :
  range[64316](?), arg ind[69260] :
  (374485 call idxType _mt[243] this[69265])) : _unknown[51] "method"
  {
    unknown ret[510217] "RVV" "temp"
    unknown tmp[419970] "maybe param" "temp"
    (419981 'move' tmp[419970] 1)
    unknown call_tmp[619876] "expr temp" "maybe param" "maybe type" "temp"
    (619879 'move' call_tmp[619876](419983 call _cond_invalid tmp[419970]))
    if call_tmp[619876]
    {
      (419986 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556929] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556930] "maybe param" "temp"
    unknown call_tmp[619881] "expr temp" "maybe param" "maybe type" "temp"
    (619884 'move' call_tmp[619881](419971 call isTrue tmp[419970]))
    (556935 'move' tmp[556930](556933 call _cond_test call_tmp[619881]))
    if tmp[556930]
    {
      unknown tmp[556937] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619888] "expr temp" "maybe param" "maybe type" "temp"
      (619891 'move' call_tmp[619888](69276 call(69272 call (partial) isAmbiguous _mt[243] this[69265])))
      (556939 'move' tmp[556937](419974 call isTrue call_tmp[619888]))
      (556944 'move' tmp[556929](556941 '_paramFoldLogical' tmp[556930] tmp[556937]))
    }
    {
      (556949 'move' tmp[556929](556946 '_paramFoldLogical' tmp[556930] 0))
    }
    unknown call_tmp[619893] "expr temp" "maybe param" "maybe type" "temp"
    (619896 'move' call_tmp[619893](69303 call _cond_test tmp[556929]))
    if call_tmp[619893]
    {
      (69301 call boundsCheckHalt module=[255] HaltWrappers[209998] "indexOrder -- Undefined on a range with ambiguous alignment.")
      (357706 'referenced modules list' HaltWrappers[209998])
    }
    unknown call_tmp[619900] "expr temp" "maybe param" "maybe type" "temp"
    (619903 'move' call_tmp[619900](69312 call(374490 call (partial) contains _mt[243] this[69265]) ind[69260]))
    unknown call_tmp[619905] "expr temp" "maybe param" "maybe type" "temp"
    (619908 'move' call_tmp[619905](69313 call ! call_tmp[619900]))
    unknown call_tmp[619910] "expr temp" "maybe param" "maybe type" "temp"
    (619913 'move' call_tmp[619910](69323 call _cond_test call_tmp[619905]))
    if call_tmp[619910]
    {
      unknown call_tmp[619917] "expr temp" "maybe param" "maybe type" "temp"
      (619920 'move' call_tmp[619917](374495 call intIdxType _mt[243] this[69265]))
      unknown call_tmp[619922] "expr temp" "maybe param" "maybe type" "temp"
      (619925 'move' call_tmp[619922](69316 call - 1))
      unknown call_tmp[619927] "expr temp" "maybe param" "maybe type" "temp"
      (619930 'move' call_tmp[619927](69319 call _cast call_tmp[619917] call_tmp[619922]))
      (510222 'move' ret[510217](510221 'deref' call_tmp[619927]))
      gotoReturn _end_indexOrder[510215] _end_indexOrder[510215]
    }
    unknown call_tmp[619934] "expr temp" "maybe param" "maybe type" "temp"
    (619937 'move' call_tmp[619934](374500 call stridable _mt[243] this[69265]))
    unknown call_tmp[619939] "expr temp" "maybe param" "maybe type" "temp"
    (619942 'move' call_tmp[619939](69329 call ! call_tmp[619934]))
    unknown call_tmp[619944] "expr temp" "maybe param" "maybe type" "temp"
    (619947 'move' call_tmp[619944](69393 call _cond_test call_tmp[619939]))
    if call_tmp[619944]
    {
      unknown call_tmp[619951] "expr temp" "maybe param" "maybe type" "temp"
      (619954 'move' call_tmp[619951](69336 call(69332 call (partial) hasLowBound _mt[243] this[69265])))
      unknown call_tmp[619956] "expr temp" "maybe param" "maybe type" "temp"
      (619959 'move' call_tmp[619956](69346 call _cond_test call_tmp[619951]))
      if call_tmp[619956]
      {
        unknown call_tmp[619961] "expr temp" "maybe param" "maybe type" "temp"
        (619964 'move' call_tmp[619961](69340 call chpl__idxToInt ind[69260]))
        unknown call_tmp[619968] "expr temp" "maybe param" "maybe type" "temp"
        (619971 'move' call_tmp[619968](374506 call _low _mt[243] this[69265]))
        unknown call_tmp[619973] "expr temp" "maybe param" "maybe type" "temp"
        (619976 'move' call_tmp[619973](69342 call - call_tmp[619961] call_tmp[619968]))
        (510227 'move' ret[510217](510226 'deref' call_tmp[619973]))
        gotoReturn _end_indexOrder[510215] _end_indexOrder[510215]
      }
    }
    {
      unknown call_tmp[619980] "expr temp" "maybe param" "maybe type" "temp"
      (619983 'move' call_tmp[619980](69359 call(69355 call (partial) hasFirst _mt[243] this[69265])))
      unknown call_tmp[619985] "expr temp" "maybe param" "maybe type" "temp"
      (619988 'move' call_tmp[619985](69387 call _cond_test call_tmp[619980]))
      if call_tmp[619985]
      {
        unknown call_tmp[619992] "expr temp" "maybe param" "maybe type" "temp"
        (619995 'move' call_tmp[619992](374524 call intIdxType _mt[243] this[69265]))
        unknown call_tmp[619999] "expr temp" "maybe param" "maybe type" "temp"
        (620002 'move' call_tmp[619999](374511 call strType _mt[243] this[69265]))
        unknown call_tmp[620004] "expr temp" "maybe param" "maybe type" "temp"
        (620007 'move' call_tmp[620004](69363 call chpl__idxToInt ind[69260]))
        unknown call_tmp[620009] "expr temp" "maybe param" "maybe type" "temp"
        (620012 'move' call_tmp[620009](69365 call _cast call_tmp[619999] call_tmp[620004]))
        unknown call_tmp[620016] "expr temp" "maybe param" "maybe type" "temp"
        (620019 'move' call_tmp[620016](374515 call strType _mt[243] this[69265]))
        unknown call_tmp[620023] "expr temp" "maybe param" "maybe type" "temp"
        (620026 'move' call_tmp[620023](69369 call first _mt[243] this[69265]))
        unknown call_tmp[620028] "expr temp" "maybe param" "maybe type" "temp"
        (620031 'move' call_tmp[620028](69373 call chpl__idxToInt call_tmp[620023]))
        unknown call_tmp[620033] "expr temp" "maybe param" "maybe type" "temp"
        (620036 'move' call_tmp[620033](69375 call _cast call_tmp[620016] call_tmp[620028]))
        unknown call_tmp[620038] "expr temp" "maybe param" "maybe type" "temp"
        (620041 'move' call_tmp[620038](69377 call - call_tmp[620009] call_tmp[620033]))
        unknown call_tmp[620045] "expr temp" "maybe param" "maybe type" "temp"
        (620048 'move' call_tmp[620045](374520 call _stride _mt[243] this[69265]))
        unknown call_tmp[620050] "expr temp" "maybe param" "maybe type" "temp"
        (620053 'move' call_tmp[620050](69380 call / call_tmp[620038] call_tmp[620045]))
        unknown call_tmp[620055] "expr temp" "maybe param" "maybe type" "temp"
        (620058 'move' call_tmp[620055](69383 call _cast call_tmp[619992] call_tmp[620050]))
        (510232 'move' ret[510217](510231 'deref' call_tmp[620055]))
        gotoReturn _end_indexOrder[510215] _end_indexOrder[510215]
      }
    }
    unknown call_tmp[620062] "expr temp" "maybe param" "maybe type" "temp"
    (620065 'move' call_tmp[620062](374528 call intIdxType _mt[243] this[69265]))
    unknown call_tmp[620067] "expr temp" "maybe param" "maybe type" "temp"
    (620070 'move' call_tmp[620067](69398 call - 1))
    unknown call_tmp[620072] "expr temp" "maybe param" "maybe type" "temp"
    (620075 'move' call_tmp[620072](69401 call _cast call_tmp[620062] call_tmp[620067]))
    (510237 'move' ret[510217](510236 'deref' call_tmp[620072]))
    label _end_indexOrder[510215]
    (510219 return ret[510217])
  }
  function range[64316](?).orderToIndex[69414](arg _mt[69419]:_MT[238], arg this[69416]:range[64316](?) :
  range[64316](?), arg ord[69411]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510241] "RVV" "temp"
    unknown call_tmp[620077] "expr temp" "maybe param" "maybe type" "temp"
    (620080 'move' call_tmp[620077](69605 call _cond_test 1))
    if call_tmp[620077]
    {
      unknown call_tmp[620084] "expr temp" "maybe param" "maybe type" "temp"
      (620087 'move' call_tmp[620084](69425 call(374539 call (partial) hasFirst _mt[243] this[69416])))
      unknown call_tmp[620089] "expr temp" "maybe param" "maybe type" "temp"
      (620092 'move' call_tmp[620089](69426 call ! call_tmp[620084]))
      unknown call_tmp[620094] "expr temp" "maybe param" "maybe type" "temp"
      (620097 'move' call_tmp[620094](69452 call _cond_test call_tmp[620089]))
      if call_tmp[620094]
      {
        (69450 call boundsCheckHalt module=[255] HaltWrappers[209998] "invoking orderToIndex on a range that has no first index")
        (357715 'referenced modules list' HaltWrappers[209998])
      }
      unknown call_tmp[620101] "expr temp" "maybe param" "maybe type" "temp"
      (620104 'move' call_tmp[620101](69460 call(374543 call (partial) isAmbiguous _mt[243] this[69416])))
      unknown call_tmp[620106] "expr temp" "maybe param" "maybe type" "temp"
      (620109 'move' call_tmp[620106](69485 call _cond_test call_tmp[620101]))
      if call_tmp[620106]
      {
        (69483 call boundsCheckHalt module=[255] HaltWrappers[209998] "invoking orderToIndex on a range that is ambiguously aligned")
        (357721 'referenced modules list' HaltWrappers[209998])
      }
      unknown call_tmp[620111] "expr temp" "maybe param" "maybe type" "temp"
      (620114 'move' call_tmp[620111](69492 call < ord[69411] 0))
      unknown call_tmp[620116] "expr temp" "maybe param" "maybe type" "temp"
      (620119 'move' call_tmp[620116](69524 call _cond_test call_tmp[620111]))
      if call_tmp[620116]
      {
        unknown call_tmp[620121] "expr temp" "maybe param" "maybe type" "temp"
        (620124 'move' call_tmp[620121](69517 call _cast string[26] ord[69411]))
        unknown call_tmp[620126] "expr temp" "maybe param" "maybe type" "temp"
        (620129 'move' call_tmp[620126](69519 call + "invoking orderToIndex on a negative integer: " call_tmp[620121]))
        (69522 call boundsCheckHalt module=[255] HaltWrappers[209998] call_tmp[620126])
        (357727 'referenced modules list' HaltWrappers[209998])
      }
      unknown tmp[419991] "maybe param" "temp"
      (420002 'move' tmp[419991](69532 call isBoundedRange this[69416]))
      unknown call_tmp[620131] "expr temp" "maybe param" "maybe type" "temp"
      (620134 'move' call_tmp[620131](420004 call _cond_invalid tmp[419991]))
      if call_tmp[620131]
      {
        (420007 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556956] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556957] "maybe param" "temp"
      unknown call_tmp[620136] "expr temp" "maybe param" "maybe type" "temp"
      (620139 'move' call_tmp[620136](419992 call isTrue tmp[419991]))
      (556962 'move' tmp[556957](556960 call _cond_test call_tmp[620136]))
      if tmp[556957]
      {
        unknown tmp[556964] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[620143] "expr temp" "maybe param" "maybe type" "temp"
        (620146 'move' call_tmp[620143](69535 call size _mt[243] this[69416]))
        unknown call_tmp[620148] "expr temp" "maybe param" "maybe type" "temp"
        (620151 'move' call_tmp[620148](69538 call >= ord[69411] call_tmp[620143]))
        (556966 'move' tmp[556964](419995 call isTrue call_tmp[620148]))
        (556971 'move' tmp[556956](556968 '_paramFoldLogical' tmp[556957] tmp[556964]))
      }
      {
        (556976 'move' tmp[556956](556973 '_paramFoldLogical' tmp[556957] 0))
      }
      unknown call_tmp[620153] "expr temp" "maybe param" "maybe type" "temp"
      (620156 'move' call_tmp[620153](69600 call _cond_test tmp[556956]))
      if call_tmp[620153]
      {
        unknown call_tmp[620158] "expr temp" "maybe param" "maybe type" "temp"
        (620161 'move' call_tmp[620158](69565 call _cast string[26] ord[69411]))
        unknown call_tmp[620163] "expr temp" "maybe param" "maybe type" "temp"
        (620166 'move' call_tmp[620163](69567 call + "invoking orderToIndex on an integer " call_tmp[620158]))
        unknown call_tmp[620168] "expr temp" "maybe param" "maybe type" "temp"
        (620171 'move' call_tmp[620168](69586 call + call_tmp[620163] " that is larger than the range's number of indices "))
        unknown call_tmp[620175] "expr temp" "maybe param" "maybe type" "temp"
        (620178 'move' call_tmp[620175](69589 call size _mt[243] this[69416]))
        unknown call_tmp[620180] "expr temp" "maybe param" "maybe type" "temp"
        (620183 'move' call_tmp[620180](69593 call _cast string[26] call_tmp[620175]))
        unknown call_tmp[620185] "expr temp" "maybe param" "maybe type" "temp"
        (620188 'move' call_tmp[620185](69595 call + call_tmp[620168] call_tmp[620180]))
        (69598 call boundsCheckHalt module=[255] HaltWrappers[209998] call_tmp[620185])
        (357734 'referenced modules list' HaltWrappers[209998])
      }
    }
    unknown call_tmp[620194] "expr temp" "maybe param" "maybe type" "temp"
    (620197 'move' call_tmp[620194](69613 call firstAsInt _mt[243] this[69416]))
    unknown call_tmp[620201] "expr temp" "maybe param" "maybe type" "temp"
    (620204 'move' call_tmp[620201](69618 call stride _mt[243] this[69416]))
    unknown call_tmp[620206] "expr temp" "maybe param" "maybe type" "temp"
    (620209 'move' call_tmp[620206](69622 call chpl__addRangeStrides call_tmp[620194] call_tmp[620201] ord[69411]))
    unknown call_tmp[620211] "expr temp" "maybe param" "maybe type" "temp"
    (620214 'move' call_tmp[620211](69624 call(374552 call (partial) chpl_intToIdx _mt[243] this[69416]) call_tmp[620206]))
    unknown call_tmp[620218] "expr temp" "maybe param" "maybe type" "temp"
    (620221 'move' call_tmp[620218](510246 call idxType _mt[243] this[69416]))
    (510250 'move' ret[510241](510249 'coerce' call_tmp[620211] call_tmp[620218]))
    (510243 return ret[510241])
  }
  { scopeless type
    (374534 call idxType _mt[243] this[69416])
  }
  function range[64316](?).translate[69637](arg _mt[69642]:_MT[238], arg this[69639]:range[64316](?) :
  range[64316](?), arg offset[69634]:integral[199](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510254] "RVV" "temp"
    unknown call_tmp[620225] "expr temp" "maybe param" "maybe type" "temp"
    (620228 'move' call_tmp[620225](69646 call + this[69639] offset[69634]))
    (510259 'move' ret[510254](510258 'deref' call_tmp[620225]))
    (510256 return ret[510254])
  }
  function range[64316](?).translate[69658](arg _mt[69663]:_MT[238], arg this[69660]:range[64316](?) :
  range[64316](?), arg i[69656]:_any[178](?)) : _unknown[51] "inline" "method" "no doc" "no return value for void"
  {
    (69684 call compilerError "offsets must be of integral type")
    (510261 return _void[55])
  }
  function range[64316](?)._effAlmt[69692](arg _mt[69697]:_MT[238], arg this[69694]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510265] "RVV" "temp"
    unknown call_tmp[620232] "expr temp" "maybe param" "maybe type" "temp"
    (620235 'move' call_tmp[620232](374565 call alignment _mt[243] this[69694]))
    (510270 'move' ret[510265](510269 'deref' call_tmp[620232]))
    (510267 return ret[510265])
  }
  where {
    (374561 call stridable _mt[243] this[69694])
  }
  function range[64316](?)._effAlmt[69710](arg _mt[69715]:_MT[238], arg this[69712]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510274] "RVV" "temp"
    unknown call_tmp[620241] "expr temp" "maybe param" "maybe type" "temp"
    (620244 'move' call_tmp[620241](69723 call(374574 call (partial) chpl_intToIdx _mt[243] this[69712]) 0))
    (510279 'move' ret[510274](510278 'deref' call_tmp[620241]))
    (510276 return ret[510274])
  }
  where {
    unknown call_tmp[620248] "expr temp" "maybe param" "maybe type" "temp"
    (620251 'move' call_tmp[620248](374570 call stridable _mt[243] this[69712]))
    (69718 call ! call_tmp[620248])
  }
  function range[64316](?).interior[69737](arg _mt[69742]:_MT[238], arg this[69739]:range[64316](?) :
  range[64316](?), arg offset[69734]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69770 call compilerError "interior is not supported on unbounded ranges")
    (510281 return _void[55])
  }
  where {
    unknown call_tmp[620255] "expr temp" "maybe param" "maybe type" "temp"
    (620258 'move' call_tmp[620255](374580 call boundedType _mt[243] this[69739]))
    (69749 call != call_tmp[620255] bounded[64205])
  }
  function range[64316](?).interior[69783](arg _mt[69788]:_MT[238], arg this[69785]:range[64316](?) :
  range[64316](?), arg offset[69780]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510285] "RVV" "temp"
    unknown call_tmp[620264] "expr temp" "maybe param" "maybe type" "temp"
    (620267 'move' call_tmp[620264](374585 call intIdxType _mt[243] this[69785]))
    unknown call_tmp[620269] "maybe param" "maybe type" "temp"
    (620272 'move' call_tmp[620269](69796 call(69791 call (partial) safeCast _mt[243] offset[69780]) call_tmp[620264]))
    const i[69797] "dead at end of block" "const" "insert auto destroy"
    (541042 'init var' i[69797] call_tmp[620269])
    (69800 'end of statement')
    unknown call_tmp[620274] "expr temp" "maybe param" "maybe type" "temp"
    (620277 'move' call_tmp[620274](69804 call < i[69797] 0))
    unknown call_tmp[620279] "expr temp" "maybe param" "maybe type" "temp"
    (620282 'move' call_tmp[620279](69831 call _cond_test call_tmp[620274]))
    if call_tmp[620279]
    {
      unknown call_tmp[620286] "expr temp" "maybe param" "maybe type" "temp"
      (620289 'move' call_tmp[620286](374592 call idxType _mt[243] this[69785]))
      unknown call_tmp[620293] "expr temp" "maybe param" "maybe type" "temp"
      (620296 'move' call_tmp[620293](374597 call boundedType _mt[243] this[69785]))
      unknown call_tmp[620300] "expr temp" "maybe param" "maybe type" "temp"
      (620303 'move' call_tmp[620300](374602 call stridable _mt[243] this[69785]))
      unknown call_tmp[620307] "expr temp" "maybe param" "maybe type" "temp"
      (620310 'move' call_tmp[620307](374606 call low _mt[243] this[69785]))
      unknown call_tmp[620316] "expr temp" "maybe param" "maybe type" "temp"
      (620319 'move' call_tmp[620316](374615 call _low _mt[243] this[69785]))
      unknown call_tmp[620321] "expr temp" "maybe param" "maybe type" "temp"
      (620324 'move' call_tmp[620321](69816 call - call_tmp[620316] 1))
      unknown call_tmp[620326] "expr temp" "maybe param" "maybe type" "temp"
      (620329 'move' call_tmp[620326](69819 call - call_tmp[620321] i[69797]))
      unknown call_tmp[620331] "expr temp" "maybe param" "maybe type" "temp"
      (620334 'move' call_tmp[620331](69822 call(374610 call (partial) chpl_intToIdx _mt[243] this[69785]) call_tmp[620326]))
      unknown call_tmp[620338] "expr temp" "maybe param" "maybe type" "temp"
      (620341 'move' call_tmp[620338](374620 call stride _mt[243] this[69785]))
      unknown call_tmp[620345] "expr temp" "maybe param" "maybe type" "temp"
      (620348 'move' call_tmp[620345](69826 call(374626 call (partial) _effAlmt _mt[243] this[69785])))
      unknown call_tmp[620352] "expr temp" "maybe param" "maybe type" "temp"
      (620355 'move' call_tmp[620352](374630 call aligned _mt[243] this[69785]))
      unknown call_tmp[620357] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620360 'move' call_tmp[620357](747778 'new' range[64316](?) call_tmp[620286] call_tmp[620293] call_tmp[620300] call_tmp[620307] call_tmp[620331] call_tmp[620338] call_tmp[620345] call_tmp[620352]))
      (510290 'move' ret[510285](510289 'deref' call_tmp[620357]))
      gotoReturn _end_interior[510283] _end_interior[510283]
      (475499 'end of statement' i[69797])
    }
    unknown call_tmp[620362] "expr temp" "maybe param" "maybe type" "temp"
    (620365 'move' call_tmp[620362](69838 call > i[69797] 0))
    unknown call_tmp[620367] "expr temp" "maybe param" "maybe type" "temp"
    (620370 'move' call_tmp[620367](69865 call _cond_test call_tmp[620362]))
    if call_tmp[620367]
    {
      unknown call_tmp[620374] "expr temp" "maybe param" "maybe type" "temp"
      (620377 'move' call_tmp[620374](374637 call idxType _mt[243] this[69785]))
      unknown call_tmp[620381] "expr temp" "maybe param" "maybe type" "temp"
      (620384 'move' call_tmp[620381](374642 call boundedType _mt[243] this[69785]))
      unknown call_tmp[620388] "expr temp" "maybe param" "maybe type" "temp"
      (620391 'move' call_tmp[620388](374647 call stridable _mt[243] this[69785]))
      unknown call_tmp[620397] "expr temp" "maybe param" "maybe type" "temp"
      (620400 'move' call_tmp[620397](374656 call _high _mt[243] this[69785]))
      unknown call_tmp[620402] "expr temp" "maybe param" "maybe type" "temp"
      (620405 'move' call_tmp[620402](69849 call + call_tmp[620397] 1))
      unknown call_tmp[620407] "expr temp" "maybe param" "maybe type" "temp"
      (620410 'move' call_tmp[620407](69852 call - call_tmp[620402] i[69797]))
      unknown call_tmp[620412] "expr temp" "maybe param" "maybe type" "temp"
      (620415 'move' call_tmp[620412](69855 call(374651 call (partial) chpl_intToIdx _mt[243] this[69785]) call_tmp[620407]))
      unknown call_tmp[620419] "expr temp" "maybe param" "maybe type" "temp"
      (620422 'move' call_tmp[620419](374661 call high _mt[243] this[69785]))
      unknown call_tmp[620426] "expr temp" "maybe param" "maybe type" "temp"
      (620429 'move' call_tmp[620426](374665 call stride _mt[243] this[69785]))
      unknown call_tmp[620433] "expr temp" "maybe param" "maybe type" "temp"
      (620436 'move' call_tmp[620433](69860 call(374669 call (partial) _effAlmt _mt[243] this[69785])))
      unknown call_tmp[620440] "expr temp" "maybe param" "maybe type" "temp"
      (620443 'move' call_tmp[620440](374673 call aligned _mt[243] this[69785]))
      unknown call_tmp[620445] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620448 'move' call_tmp[620445](747779 'new' range[64316](?) call_tmp[620374] call_tmp[620381] call_tmp[620388] call_tmp[620412] call_tmp[620419] call_tmp[620426] call_tmp[620433] call_tmp[620440]))
      (510295 'move' ret[510285](510294 'deref' call_tmp[620445]))
      gotoReturn _end_interior[510283] _end_interior[510283]
      (475501 'end of statement' i[69797])
    }
    unknown call_tmp[620452] "expr temp" "maybe param" "maybe type" "temp"
    (620455 'move' call_tmp[620452](374679 call idxType _mt[243] this[69785]))
    unknown call_tmp[620459] "expr temp" "maybe param" "maybe type" "temp"
    (620462 'move' call_tmp[620459](374684 call boundedType _mt[243] this[69785]))
    unknown call_tmp[620466] "expr temp" "maybe param" "maybe type" "temp"
    (620469 'move' call_tmp[620466](374689 call stridable _mt[243] this[69785]))
    unknown call_tmp[620473] "expr temp" "maybe param" "maybe type" "temp"
    (620476 'move' call_tmp[620473](374693 call low _mt[243] this[69785]))
    unknown call_tmp[620480] "expr temp" "maybe param" "maybe type" "temp"
    (620483 'move' call_tmp[620480](374697 call high _mt[243] this[69785]))
    unknown call_tmp[620487] "expr temp" "maybe param" "maybe type" "temp"
    (620490 'move' call_tmp[620487](374701 call stride _mt[243] this[69785]))
    unknown call_tmp[620494] "expr temp" "maybe param" "maybe type" "temp"
    (620497 'move' call_tmp[620494](69881 call(374705 call (partial) _effAlmt _mt[243] this[69785])))
    unknown call_tmp[620501] "expr temp" "maybe param" "maybe type" "temp"
    (620504 'move' call_tmp[620501](374709 call aligned _mt[243] this[69785]))
    unknown call_tmp[620506] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620509 'move' call_tmp[620506](747780 'new' range[64316](?) call_tmp[620452] call_tmp[620459] call_tmp[620466] call_tmp[620473] call_tmp[620480] call_tmp[620487] call_tmp[620494] call_tmp[620501]))
    (510300 'move' ret[510285](510299 'deref' call_tmp[620506]))
    label _end_interior[510283]
    (510287 return ret[510285])
  }
  function range[64316](?).exterior[69895](arg _mt[69900]:_MT[238], arg this[69897]:range[64316](?) :
  range[64316](?), arg offset[69892]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69928 call compilerError "exterior is not supported on unbounded ranges")
    (510302 return _void[55])
  }
  where {
    unknown call_tmp[620513] "expr temp" "maybe param" "maybe type" "temp"
    (620516 'move' call_tmp[620513](374715 call boundedType _mt[243] this[69897]))
    (69907 call != call_tmp[620513] bounded[64205])
  }
  function range[64316](?).exterior[69941](arg _mt[69946]:_MT[238], arg this[69943]:range[64316](?) :
  range[64316](?), arg offset[69938]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510306] "RVV" "temp"
    unknown call_tmp[620522] "expr temp" "maybe param" "maybe type" "temp"
    (620525 'move' call_tmp[620522](374720 call intIdxType _mt[243] this[69943]))
    unknown call_tmp[620527] "maybe param" "maybe type" "temp"
    (620530 'move' call_tmp[620527](69954 call(69949 call (partial) safeCast _mt[243] offset[69938]) call_tmp[620522]))
    const i[69955] "dead at end of block" "const" "insert auto destroy"
    (541044 'init var' i[69955] call_tmp[620527])
    (69958 'end of statement')
    unknown call_tmp[620532] "expr temp" "maybe param" "maybe type" "temp"
    (620535 'move' call_tmp[620532](69962 call < i[69955] 0))
    unknown call_tmp[620537] "expr temp" "maybe param" "maybe type" "temp"
    (620540 'move' call_tmp[620537](69992 call _cond_test call_tmp[620532]))
    if call_tmp[620537]
    {
      unknown call_tmp[620544] "expr temp" "maybe param" "maybe type" "temp"
      (620547 'move' call_tmp[620544](374727 call idxType _mt[243] this[69943]))
      unknown call_tmp[620551] "expr temp" "maybe param" "maybe type" "temp"
      (620554 'move' call_tmp[620551](374732 call boundedType _mt[243] this[69943]))
      unknown call_tmp[620558] "expr temp" "maybe param" "maybe type" "temp"
      (620561 'move' call_tmp[620558](374737 call stridable _mt[243] this[69943]))
      unknown call_tmp[620567] "expr temp" "maybe param" "maybe type" "temp"
      (620570 'move' call_tmp[620567](374746 call _low _mt[243] this[69943]))
      unknown call_tmp[620572] "expr temp" "maybe param" "maybe type" "temp"
      (620575 'move' call_tmp[620572](69973 call + call_tmp[620567] i[69955]))
      unknown call_tmp[620577] "expr temp" "maybe param" "maybe type" "temp"
      (620580 'move' call_tmp[620577](69976 call(374741 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620572]))
      unknown call_tmp[620586] "expr temp" "maybe param" "maybe type" "temp"
      (620589 'move' call_tmp[620586](374756 call _low _mt[243] this[69943]))
      unknown call_tmp[620591] "expr temp" "maybe param" "maybe type" "temp"
      (620594 'move' call_tmp[620591](69980 call - call_tmp[620586] 1))
      unknown call_tmp[620596] "expr temp" "maybe param" "maybe type" "temp"
      (620599 'move' call_tmp[620596](69983 call(374751 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620591]))
      unknown call_tmp[620603] "expr temp" "maybe param" "maybe type" "temp"
      (620606 'move' call_tmp[620603](374760 call stride _mt[243] this[69943]))
      unknown call_tmp[620610] "expr temp" "maybe param" "maybe type" "temp"
      (620613 'move' call_tmp[620610](69987 call(374764 call (partial) _effAlmt _mt[243] this[69943])))
      unknown call_tmp[620617] "expr temp" "maybe param" "maybe type" "temp"
      (620620 'move' call_tmp[620617](374768 call aligned _mt[243] this[69943]))
      unknown call_tmp[620622] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620625 'move' call_tmp[620622](747781 'new' range[64316](?) call_tmp[620544] call_tmp[620551] call_tmp[620558] call_tmp[620577] call_tmp[620596] call_tmp[620603] call_tmp[620610] call_tmp[620617]))
      (510311 'move' ret[510306](510310 'deref' call_tmp[620622]))
      gotoReturn _end_exterior[510304] _end_exterior[510304]
      (475505 'end of statement' i[69955])
    }
    unknown call_tmp[620627] "expr temp" "maybe param" "maybe type" "temp"
    (620630 'move' call_tmp[620627](69999 call > i[69955] 0))
    unknown call_tmp[620632] "expr temp" "maybe param" "maybe type" "temp"
    (620635 'move' call_tmp[620632](70029 call _cond_test call_tmp[620627]))
    if call_tmp[620632]
    {
      unknown call_tmp[620639] "expr temp" "maybe param" "maybe type" "temp"
      (620642 'move' call_tmp[620639](374775 call idxType _mt[243] this[69943]))
      unknown call_tmp[620646] "expr temp" "maybe param" "maybe type" "temp"
      (620649 'move' call_tmp[620646](374780 call boundedType _mt[243] this[69943]))
      unknown call_tmp[620653] "expr temp" "maybe param" "maybe type" "temp"
      (620656 'move' call_tmp[620653](374785 call stridable _mt[243] this[69943]))
      unknown call_tmp[620662] "expr temp" "maybe param" "maybe type" "temp"
      (620665 'move' call_tmp[620662](374794 call _high _mt[243] this[69943]))
      unknown call_tmp[620667] "expr temp" "maybe param" "maybe type" "temp"
      (620670 'move' call_tmp[620667](70010 call + call_tmp[620662] 1))
      unknown call_tmp[620672] "expr temp" "maybe param" "maybe type" "temp"
      (620675 'move' call_tmp[620672](70013 call(374789 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620667]))
      unknown call_tmp[620681] "expr temp" "maybe param" "maybe type" "temp"
      (620684 'move' call_tmp[620681](374803 call _high _mt[243] this[69943]))
      unknown call_tmp[620686] "expr temp" "maybe param" "maybe type" "temp"
      (620689 'move' call_tmp[620686](70017 call + call_tmp[620681] i[69955]))
      unknown call_tmp[620691] "expr temp" "maybe param" "maybe type" "temp"
      (620694 'move' call_tmp[620691](70020 call(374798 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620686]))
      unknown call_tmp[620698] "expr temp" "maybe param" "maybe type" "temp"
      (620701 'move' call_tmp[620698](374808 call stride _mt[243] this[69943]))
      unknown call_tmp[620705] "expr temp" "maybe param" "maybe type" "temp"
      (620708 'move' call_tmp[620705](70024 call(374812 call (partial) _effAlmt _mt[243] this[69943])))
      unknown call_tmp[620712] "expr temp" "maybe param" "maybe type" "temp"
      (620715 'move' call_tmp[620712](374816 call aligned _mt[243] this[69943]))
      unknown call_tmp[620717] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620720 'move' call_tmp[620717](747782 'new' range[64316](?) call_tmp[620639] call_tmp[620646] call_tmp[620653] call_tmp[620672] call_tmp[620691] call_tmp[620698] call_tmp[620705] call_tmp[620712]))
      (510316 'move' ret[510306](510315 'deref' call_tmp[620717]))
      gotoReturn _end_exterior[510304] _end_exterior[510304]
      (475507 'end of statement' i[69955])
    }
    unknown call_tmp[620724] "expr temp" "maybe param" "maybe type" "temp"
    (620727 'move' call_tmp[620724](374822 call idxType _mt[243] this[69943]))
    unknown call_tmp[620731] "expr temp" "maybe param" "maybe type" "temp"
    (620734 'move' call_tmp[620731](374827 call boundedType _mt[243] this[69943]))
    unknown call_tmp[620738] "expr temp" "maybe param" "maybe type" "temp"
    (620741 'move' call_tmp[620738](374832 call stridable _mt[243] this[69943]))
    unknown call_tmp[620745] "expr temp" "maybe param" "maybe type" "temp"
    (620748 'move' call_tmp[620745](374836 call low _mt[243] this[69943]))
    unknown call_tmp[620752] "expr temp" "maybe param" "maybe type" "temp"
    (620755 'move' call_tmp[620752](374840 call high _mt[243] this[69943]))
    unknown call_tmp[620759] "expr temp" "maybe param" "maybe type" "temp"
    (620762 'move' call_tmp[620759](374844 call stride _mt[243] this[69943]))
    unknown call_tmp[620766] "expr temp" "maybe param" "maybe type" "temp"
    (620769 'move' call_tmp[620766](70045 call(374848 call (partial) _effAlmt _mt[243] this[69943])))
    unknown call_tmp[620773] "expr temp" "maybe param" "maybe type" "temp"
    (620776 'move' call_tmp[620773](374852 call aligned _mt[243] this[69943]))
    unknown call_tmp[620778] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620781 'move' call_tmp[620778](747783 'new' range[64316](?) call_tmp[620724] call_tmp[620731] call_tmp[620738] call_tmp[620745] call_tmp[620752] call_tmp[620759] call_tmp[620766] call_tmp[620773]))
    (510321 'move' ret[510306](510320 'deref' call_tmp[620778]))
    label _end_exterior[510304]
    (510308 return ret[510306])
  }
  function range[64316](?).expand[70059](arg _mt[70064]:_MT[238], arg this[70061]:range[64316](?) :
  range[64316](?), arg offset[70056]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (70092 call compilerError "expand() is not supported on unbounded ranges")
    (510323 return _void[55])
  }
  where {
    unknown call_tmp[620785] "expr temp" "maybe param" "maybe type" "temp"
    (620788 'move' call_tmp[620785](374858 call boundedType _mt[243] this[70061]))
    (70071 call != call_tmp[620785] bounded[64205])
  }
  function range[64316](?).expand[70105](arg _mt[70110]:_MT[238], arg this[70107]:range[64316](?) :
  range[64316](?), arg offset[70102]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510327] "RVV" "temp"
    unknown call_tmp[620794] "expr temp" "maybe param" "maybe type" "temp"
    (620797 'move' call_tmp[620794](374863 call intIdxType _mt[243] this[70107]))
    unknown call_tmp[620799] "maybe param" "maybe type" "temp"
    (620802 'move' call_tmp[620799](70118 call(70113 call (partial) safeCast _mt[243] offset[70102]) call_tmp[620794]))
    const i[70119] "dead at end of block" "const" "insert auto destroy"
    (541046 'init var' i[70119] call_tmp[620799])
    (70122 'end of statement')
    unknown call_tmp[620806] "expr temp" "maybe param" "maybe type" "temp"
    (620809 'move' call_tmp[620806](374869 call idxType _mt[243] this[70107]))
    unknown call_tmp[620813] "expr temp" "maybe param" "maybe type" "temp"
    (620816 'move' call_tmp[620813](374874 call boundedType _mt[243] this[70107]))
    unknown call_tmp[620820] "expr temp" "maybe param" "maybe type" "temp"
    (620823 'move' call_tmp[620820](374879 call stridable _mt[243] this[70107]))
    unknown call_tmp[620829] "expr temp" "maybe param" "maybe type" "temp"
    (620832 'move' call_tmp[620829](374888 call _low _mt[243] this[70107]))
    unknown call_tmp[620834] "expr temp" "maybe param" "maybe type" "temp"
    (620837 'move' call_tmp[620834](70133 call - call_tmp[620829] i[70119]))
    unknown call_tmp[620839] "expr temp" "maybe param" "maybe type" "temp"
    (620842 'move' call_tmp[620839](70136 call(374883 call (partial) chpl_intToIdx _mt[243] this[70107]) call_tmp[620834]))
    unknown call_tmp[620848] "expr temp" "maybe param" "maybe type" "temp"
    (620851 'move' call_tmp[620848](374898 call _high _mt[243] this[70107]))
    unknown call_tmp[620853] "expr temp" "maybe param" "maybe type" "temp"
    (620856 'move' call_tmp[620853](70140 call + call_tmp[620848] i[70119]))
    unknown call_tmp[620858] "expr temp" "maybe param" "maybe type" "temp"
    (620861 'move' call_tmp[620858](70143 call(374893 call (partial) chpl_intToIdx _mt[243] this[70107]) call_tmp[620853]))
    unknown call_tmp[620865] "expr temp" "maybe param" "maybe type" "temp"
    (620868 'move' call_tmp[620865](374903 call stride _mt[243] this[70107]))
    unknown call_tmp[620872] "expr temp" "maybe param" "maybe type" "temp"
    (620875 'move' call_tmp[620872](374907 call alignment _mt[243] this[70107]))
    unknown call_tmp[620879] "expr temp" "maybe param" "maybe type" "temp"
    (620882 'move' call_tmp[620879](374912 call _aligned _mt[243] this[70107]))
    unknown call_tmp[620884] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620887 'move' call_tmp[620884](747784 'new' range[64316](?) call_tmp[620806] call_tmp[620813] call_tmp[620820] call_tmp[620839] call_tmp[620858] call_tmp[620865] call_tmp[620872] call_tmp[620879]))
    (510332 'move' ret[510327](510331 'deref' call_tmp[620884]))
    gotoReturn _end_expand[510325] _end_expand[510325]
    (475511 'end of statement' i[70119] i[70119])
    label _end_expand[510325]
    (510329 return ret[510327])
  }
  function =[70163](ref arg r1[70160]:range[64316](?), arg r2[70171]:range[64316](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[620891] "expr temp" "maybe param" "maybe type" "temp"
    (620894 'move' call_tmp[620891](70175 call boundedType _mt[243] r1[70160]))
    unknown call_tmp[620898] "expr temp" "maybe param" "maybe type" "temp"
    (620901 'move' call_tmp[620898](70179 call boundedType _mt[243] r2[70171]))
    unknown call_tmp[620903] "expr temp" "maybe param" "maybe type" "temp"
    (620906 'move' call_tmp[620903](70182 call != call_tmp[620891] call_tmp[620898]))
    unknown call_tmp[620908] "expr temp" "maybe param" "maybe type" "temp"
    (620911 'move' call_tmp[620908](70207 call _cond_test call_tmp[620903]))
    if call_tmp[620908]
    {
      (70205 call compilerError "type mismatch in assignment of ranges with different boundedType parameters")
    }
    unknown tmp[420033] "maybe param" "temp"
    unknown call_tmp[620913] "expr temp" "maybe param" "maybe type" "temp"
    (620916 'move' call_tmp[620913](455781 'query' r1[70160] c"stridable"))
    (420044 'move' tmp[420033](70214 call ! call_tmp[620913]))
    unknown call_tmp[620918] "expr temp" "maybe param" "maybe type" "temp"
    (620921 'move' call_tmp[620918](420046 call _cond_invalid tmp[420033]))
    if call_tmp[620918]
    {
      (420049 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556983] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556984] "maybe param" "temp"
    unknown call_tmp[620923] "expr temp" "maybe param" "maybe type" "temp"
    (620926 'move' call_tmp[620923](420034 call isTrue tmp[420033]))
    (556989 'move' tmp[556984](556987 call _cond_test call_tmp[620923]))
    if tmp[556984]
    {
      unknown tmp[556991] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[620928] "expr temp" "maybe param" "maybe type" "temp"
      (620931 'move' call_tmp[620928](455801 'query' r2[70171] c"stridable"))
      (556993 'move' tmp[556991](420037 call isTrue call_tmp[620928]))
      (556998 'move' tmp[556983](556995 '_paramFoldLogical' tmp[556984] tmp[556991]))
    }
    {
      (557003 'move' tmp[556983](557000 '_paramFoldLogical' tmp[556984] 0))
    }
    unknown call_tmp[620933] "expr temp" "maybe param" "maybe type" "temp"
    (620936 'move' call_tmp[620933](70275 call _cond_test tmp[556983]))
    if call_tmp[620933]
    {
      (70238 call compilerError "type mismatch in assignment of ranges with different stridable parameters")
    }
    {
      unknown tmp[420012] "maybe param" "temp"
      (420023 'move' tmp[420012](455784 'query' r1[70160] c"stridable"))
      unknown call_tmp[620938] "expr temp" "maybe param" "maybe type" "temp"
      (620941 'move' call_tmp[620938](420025 call _cond_invalid tmp[420012]))
      if call_tmp[620938]
      {
        (420028 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557010] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557011] "maybe param" "temp"
      unknown call_tmp[620943] "expr temp" "maybe param" "maybe type" "temp"
      (620946 'move' call_tmp[620943](420013 call isTrue tmp[420012]))
      (557016 'move' tmp[557011](557014 call _cond_test call_tmp[620943]))
      if tmp[557011]
      {
        unknown tmp[557018] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[620948] "expr temp" "maybe param" "maybe type" "temp"
        (620951 'move' call_tmp[620948](455804 'query' r2[70171] c"stridable"))
        (557020 'move' tmp[557018](420016 call isTrue call_tmp[620948]))
        (557025 'move' tmp[557010](557022 '_paramFoldLogical' tmp[557011] tmp[557018]))
      }
      {
        (557030 'move' tmp[557010](557027 '_paramFoldLogical' tmp[557011] 0))
      }
      unknown call_tmp[620953] "expr temp" "maybe param" "maybe type" "temp"
      (620956 'move' call_tmp[620953](70269 call _cond_test tmp[557010]))
      if call_tmp[620953]
      {
        unknown call_tmp[620960] "expr temp" "maybe param" "maybe type" "temp"
        (620963 'move' call_tmp[620960](70245 call _stride _mt[243] r1[70160]))
        unknown call_tmp[620967] "expr temp" "maybe param" "maybe type" "temp"
        (620970 'move' call_tmp[620967](70249 call stride _mt[243] r2[70171]))
        (70252 call = call_tmp[620960] call_tmp[620967])
      }
      {
        unknown call_tmp[620972] "expr temp" "maybe param" "maybe type" "temp"
        (620975 'move' call_tmp[620972](455787 'query' r1[70160] c"stridable"))
        unknown call_tmp[620977] "expr temp" "maybe param" "maybe type" "temp"
        (620980 'move' call_tmp[620977](70264 call _cond_test call_tmp[620972]))
        if call_tmp[620977]
        {
          unknown call_tmp[620984] "expr temp" "maybe param" "maybe type" "temp"
          (620987 'move' call_tmp[620984](70257 call _stride _mt[243] r1[70160]))
          (70261 call = call_tmp[620984] 1)
        }
      }
    }
    unknown call_tmp[620991] "expr temp" "maybe param" "maybe type" "temp"
    (620994 'move' call_tmp[620991](70282 call _low _mt[243] r1[70160]))
    unknown call_tmp[620998] "expr temp" "maybe param" "maybe type" "temp"
    (621001 'move' call_tmp[620998](70286 call _low _mt[243] r2[70171]))
    (70289 call = call_tmp[620991] call_tmp[620998])
    (475520 'end of statement')
    unknown call_tmp[621005] "expr temp" "maybe param" "maybe type" "temp"
    (621008 'move' call_tmp[621005](70293 call _high _mt[243] r1[70160]))
    unknown call_tmp[621012] "expr temp" "maybe param" "maybe type" "temp"
    (621015 'move' call_tmp[621012](70297 call _high _mt[243] r2[70171]))
    (70300 call = call_tmp[621005] call_tmp[621012])
    (475521 'end of statement')
    unknown call_tmp[621017] "expr temp" "maybe param" "maybe type" "temp"
    (621020 'move' call_tmp[621017](455790 'query' r1[70160] c"stridable"))
    unknown call_tmp[621022] "expr temp" "maybe param" "maybe type" "temp"
    (621025 'move' call_tmp[621022](70330 call _cond_test call_tmp[621017]))
    if call_tmp[621022]
    {
      unknown call_tmp[621029] "expr temp" "maybe param" "maybe type" "temp"
      (621032 'move' call_tmp[621029](70305 call _alignment _mt[243] r1[70160]))
      unknown call_tmp[621036] "expr temp" "maybe param" "maybe type" "temp"
      (621039 'move' call_tmp[621036](70310 call alignment _mt[243] r2[70171]))
      unknown call_tmp[621041] "expr temp" "maybe param" "maybe type" "temp"
      (621044 'move' call_tmp[621041](70314 call chpl__idxToInt call_tmp[621036]))
      (70315 call = call_tmp[621029] call_tmp[621041])
      (475522 'end of statement')
      unknown call_tmp[621048] "expr temp" "maybe param" "maybe type" "temp"
      (621051 'move' call_tmp[621048](70320 call _aligned _mt[243] r1[70160]))
      unknown call_tmp[621055] "expr temp" "maybe param" "maybe type" "temp"
      (621058 'move' call_tmp[621055](70324 call aligned _mt[243] r2[70171]))
      (70327 call = call_tmp[621048] call_tmp[621055])
    }
    (510336 return _void[55])
  }
  function +[70350](arg r[70347]:range[64316](?), arg offset[70353]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510340] "RVV" "temp"
    unknown call_tmp[621062] "expr temp" "maybe param" "maybe type" "temp"
    (621065 'move' call_tmp[621062](70358 call intIdxType _mt[243] r[70347]))
    unknown call_tmp[621067] "maybe param" "maybe type" "temp"
    (621070 'move' call_tmp[621067](70361 call _cast call_tmp[621062] offset[70353]))
    const i[70363] "dead at end of block" "const" "insert auto destroy"
    (541048 'init var' i[70363] call_tmp[621067])
    (70366 'end of statement')
    unknown call_tmp[621072] "expr temp" "maybe param" "maybe type" "temp"
    (621075 'move' call_tmp[621072](455814 'query' r[70347] 1))
    unknown strType[70372] "dead at end of block" "insert auto destroy" "type variable"(70371 call chpl__rangeStrideType call_tmp[621072])
    unknown call_tmp[621077] "expr temp" "maybe param" "maybe type" "temp"
    (621080 'move' call_tmp[621077](541052 'query' r[70347] 1))
    (541055 'move' strType[70372](541051 call chpl__rangeStrideType call_tmp[621077]))
    (475524 'end of statement')
    unknown call_tmp[621082] "expr temp" "maybe param" "maybe type" "temp"
    (621085 'move' call_tmp[621082](455817 'query' r[70347] 1))
    unknown call_tmp[621087] "expr temp" "maybe param" "maybe type" "temp"
    (621090 'move' call_tmp[621087](455823 'query' r[70347] 2))
    unknown call_tmp[621092] "expr temp" "maybe param" "maybe type" "temp"
    (621095 'move' call_tmp[621092](455829 'query' r[70347] 3))
    unknown call_tmp[621101] "expr temp" "maybe param" "maybe type" "temp"
    (621104 'move' call_tmp[621101](70388 call _low _mt[243] r[70347]))
    unknown call_tmp[621106] "expr temp" "maybe param" "maybe type" "temp"
    (621109 'move' call_tmp[621106](70392 call + call_tmp[621101] i[70363]))
    unknown call_tmp[621111] "expr temp" "maybe param" "maybe type" "temp"
    (621114 'move' call_tmp[621111](70395 call(70384 call (partial) chpl_intToIdx _mt[243] r[70347]) call_tmp[621106]))
    unknown call_tmp[621120] "expr temp" "maybe param" "maybe type" "temp"
    (621123 'move' call_tmp[621120](70401 call _high _mt[243] r[70347]))
    unknown call_tmp[621125] "expr temp" "maybe param" "maybe type" "temp"
    (621128 'move' call_tmp[621125](70405 call + call_tmp[621120] i[70363]))
    unknown call_tmp[621130] "expr temp" "maybe param" "maybe type" "temp"
    (621133 'move' call_tmp[621130](70408 call(70397 call (partial) chpl_intToIdx _mt[243] r[70347]) call_tmp[621125]))
    unknown call_tmp[621137] "expr temp" "maybe param" "maybe type" "temp"
    (621140 'move' call_tmp[621137](70410 call stride _mt[243] r[70347]))
    unknown call_tmp[621142] "expr temp" "maybe param" "maybe type" "temp"
    (621145 'move' call_tmp[621142](70414 call _cast strType[70372] call_tmp[621137]))
    unknown call_tmp[621151] "expr temp" "maybe param" "maybe type" "temp"
    (621154 'move' call_tmp[621151](70422 call alignment _mt[243] r[70347]))
    unknown call_tmp[621156] "expr temp" "maybe param" "maybe type" "temp"
    (621159 'move' call_tmp[621156](70426 call chpl__idxToInt call_tmp[621151]))
    unknown call_tmp[621161] "expr temp" "maybe param" "maybe type" "temp"
    (621164 'move' call_tmp[621161](70428 call + call_tmp[621156] i[70363]))
    unknown call_tmp[621166] "expr temp" "maybe param" "maybe type" "temp"
    (621169 'move' call_tmp[621166](70431 call(70417 call (partial) chpl_intToIdx _mt[243] r[70347]) call_tmp[621161]))
    unknown call_tmp[621173] "expr temp" "maybe param" "maybe type" "temp"
    (621176 'move' call_tmp[621173](70433 call aligned _mt[243] r[70347]))
    unknown call_tmp[621178] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621181 'move' call_tmp[621178](747785 'new' range[64316](?) call_tmp[621082] call_tmp[621087] call_tmp[621092] call_tmp[621111] call_tmp[621130] call_tmp[621142] call_tmp[621166] call_tmp[621173]))
    (510345 'move' ret[510340](510344 'deref' call_tmp[621178]))
    gotoReturn _end_+[510338] _end_+[510338]
    (475525 'end of statement' i[70363] i[70363] strType[70372] i[70363])
    label _end_+[510338]
    (510342 return ret[510340])
  }
  function +[70447](arg i[70444]:integral[199](?), arg r[70458]:range[64316](?)) : _unknown[51] "inline"
  {
    unknown ret[510351] "RVV" "temp"
    unknown call_tmp[621183] "expr temp" "maybe param" "maybe type" "temp"
    (621186 'move' call_tmp[621183](70463 call + r[70458] i[70444]))
    (510356 'move' ret[510351](510355 'deref' call_tmp[621183]))
    (510353 return ret[510351])
  }
  function -[70484](arg r[70481]:range[64316](?), arg i[70487]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510360] "RVV" "temp"
    unknown call_tmp[621188] "expr temp" "maybe param" "maybe type" "temp"
    (621191 'move' call_tmp[621188](455852 'query' r[70481] 1))
    unknown strType[70494] "dead at end of block" "insert auto destroy" "type variable"(70493 call chpl__rangeStrideType call_tmp[621188])
    unknown call_tmp[621193] "expr temp" "maybe param" "maybe type" "temp"
    (621196 'move' call_tmp[621193](541059 'query' r[70481] 1))
    (541062 'move' strType[70494](541058 call chpl__rangeStrideType call_tmp[621193]))
    (475531 'end of statement')
    unknown call_tmp[621198] "expr temp" "maybe param" "maybe type" "temp"
    (621201 'move' call_tmp[621198](455855 'query' r[70481] 1))
    unknown call_tmp[621203] "expr temp" "maybe param" "maybe type" "temp"
    (621206 'move' call_tmp[621203](455861 'query' r[70481] 2))
    unknown call_tmp[621208] "expr temp" "maybe param" "maybe type" "temp"
    (621211 'move' call_tmp[621208](455867 'query' r[70481] 3))
    unknown call_tmp[621217] "expr temp" "maybe param" "maybe type" "temp"
    (621220 'move' call_tmp[621217](70509 call _low _mt[243] r[70481]))
    unknown call_tmp[621222] "expr temp" "maybe param" "maybe type" "temp"
    (621225 'move' call_tmp[621222](70513 call - call_tmp[621217] i[70487]))
    unknown call_tmp[621227] "expr temp" "maybe param" "maybe type" "temp"
    (621230 'move' call_tmp[621227](70516 call(70505 call (partial) chpl_intToIdx _mt[243] r[70481]) call_tmp[621222]))
    unknown call_tmp[621236] "expr temp" "maybe param" "maybe type" "temp"
    (621239 'move' call_tmp[621236](70522 call _high _mt[243] r[70481]))
    unknown call_tmp[621241] "expr temp" "maybe param" "maybe type" "temp"
    (621244 'move' call_tmp[621241](70526 call - call_tmp[621236] i[70487]))
    unknown call_tmp[621246] "expr temp" "maybe param" "maybe type" "temp"
    (621249 'move' call_tmp[621246](70529 call(70518 call (partial) chpl_intToIdx _mt[243] r[70481]) call_tmp[621241]))
    unknown call_tmp[621253] "expr temp" "maybe param" "maybe type" "temp"
    (621256 'move' call_tmp[621253](70531 call stride _mt[243] r[70481]))
    unknown call_tmp[621258] "expr temp" "maybe param" "maybe type" "temp"
    (621261 'move' call_tmp[621258](70535 call _cast strType[70494] call_tmp[621253]))
    unknown call_tmp[621267] "expr temp" "maybe param" "maybe type" "temp"
    (621270 'move' call_tmp[621267](70543 call alignment _mt[243] r[70481]))
    unknown call_tmp[621272] "expr temp" "maybe param" "maybe type" "temp"
    (621275 'move' call_tmp[621272](70547 call chpl__idxToInt call_tmp[621267]))
    unknown call_tmp[621277] "expr temp" "maybe param" "maybe type" "temp"
    (621280 'move' call_tmp[621277](70549 call - call_tmp[621272] i[70487]))
    unknown call_tmp[621282] "expr temp" "maybe param" "maybe type" "temp"
    (621285 'move' call_tmp[621282](70552 call(70538 call (partial) chpl_intToIdx _mt[243] r[70481]) call_tmp[621277]))
    unknown call_tmp[621289] "expr temp" "maybe param" "maybe type" "temp"
    (621292 'move' call_tmp[621289](70554 call aligned _mt[243] r[70481]))
    unknown call_tmp[621294] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621297 'move' call_tmp[621294](747786 'new' range[64316](?) call_tmp[621198] call_tmp[621203] call_tmp[621208] call_tmp[621227] call_tmp[621246] call_tmp[621258] call_tmp[621282] call_tmp[621289]))
    (510365 'move' ret[510360](510364 'deref' call_tmp[621294]))
    gotoReturn _end_-[510358] _end_-[510358]
    (475532 'end of statement' strType[70494])
    label _end_-[510358]
    (510362 return ret[510360])
  }
  function chpl_check_step_integral[70566](arg step[70564]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[621299] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621302 'move' call_tmp[621299](70570 'typeof' step[70564]))
    unknown call_tmp[621304] "expr temp" "maybe param" "maybe type" "temp"
    (621307 'move' call_tmp[621304](70572 call isIntegral call_tmp[621299]))
    unknown call_tmp[621309] "expr temp" "maybe param" "maybe type" "temp"
    (621312 'move' call_tmp[621309](70573 call ! call_tmp[621304]))
    unknown call_tmp[621314] "expr temp" "maybe param" "maybe type" "temp"
    (621317 'move' call_tmp[621314](70601 call _cond_test call_tmp[621309]))
    if call_tmp[621314]
    {
      unknown call_tmp[621319] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621322 'move' call_tmp[621319](70595 'typeof' step[70564]))
      unknown call_tmp[621324] "expr temp" "maybe param" "maybe type" "temp"
      (621327 'move' call_tmp[621324](70597 call _cast string[26] call_tmp[621319]))
      (70599 call compilerError "can't apply 'by' using step of a non-integral type " call_tmp[621324])
    }
    (510369 return _void[55])
  }
  function chpl_need_to_check_step[70613](arg step[70611]:_any[178](?), arg strType[70615]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[510373] "RVV" "param" "temp"
    unknown call_tmp[621329] "expr temp" "maybe param" "maybe type" "temp"
    (621332 'move' call_tmp[621329](70621 call isInt strType[70615]))
    (70623 call compilerAssert call_tmp[621329])
    (475535 'end of statement')
    unknown tmp[420054] "maybe param" "temp"
    unknown call_tmp[621334] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621337 'move' call_tmp[621334](70627 'typeof' step[70611]))
    (420065 'move' tmp[420054](70629 call != call_tmp[621334] strType[70615]))
    unknown call_tmp[621339] "expr temp" "maybe param" "maybe type" "temp"
    (621342 'move' call_tmp[621339](420067 call _cond_invalid tmp[420054]))
    if call_tmp[621339]
    {
      (420070 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557037] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557038] "maybe param" "temp"
    unknown call_tmp[621344] "expr temp" "maybe param" "maybe type" "temp"
    (621347 'move' call_tmp[621344](420055 call isTrue tmp[420054]))
    (557043 'move' tmp[557038](557041 call _cond_test call_tmp[621344]))
    if tmp[557038]
    {
      unknown tmp[557045] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621349] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621352 'move' call_tmp[621349](70633 'typeof' step[70611]))
      unknown call_tmp[621354] "expr temp" "maybe param" "maybe type" "temp"
      (621357 'move' call_tmp[621354](70635 call numBits call_tmp[621349]))
      unknown call_tmp[621359] "expr temp" "maybe param" "maybe type" "temp"
      (621362 'move' call_tmp[621359](70639 call numBits strType[70615]))
      unknown call_tmp[621364] "expr temp" "maybe param" "maybe type" "temp"
      (621367 'move' call_tmp[621364](70640 call >= call_tmp[621354] call_tmp[621359]))
      (557047 'move' tmp[557045](420058 call isTrue call_tmp[621364]))
      (557052 'move' tmp[557037](557049 '_paramFoldLogical' tmp[557038] tmp[557045]))
    }
    {
      (557057 'move' tmp[557037](557054 '_paramFoldLogical' tmp[557038] 0))
    }
    (510378 'move' ret[510373](510377 'deref' tmp[557037]))
    (510375 return ret[510373])
  }
  function chpl_range_check_stride[70652](arg step[70650]:_any[178](?), arg idxType[70654]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70659 call chpl_check_step_integral step[70650])
    (475538 'end of statement')
    unknown strType[70666] "dead at end of block" "insert auto destroy" "type variable"(70665 call chpl__rangeStrideType idxType[70654])
    (541067 'move' strType[70666](541065 call chpl__rangeStrideType idxType[70654]))
    (475539 'end of statement')
    unknown call_tmp[621369] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621372 'move' call_tmp[621369](70671 'typeof' step[70650]))
    unknown call_tmp[621374] "expr temp" "maybe param" "maybe type" "temp"
    (621377 'move' call_tmp[621374](70673 call numBits call_tmp[621369]))
    unknown call_tmp[621379] "expr temp" "maybe param" "maybe type" "temp"
    (621382 'move' call_tmp[621379](70677 call numBits strType[70666]))
    unknown call_tmp[621384] "expr temp" "maybe param" "maybe type" "temp"
    (621387 'move' call_tmp[621384](70678 call > call_tmp[621374] call_tmp[621379]))
    unknown call_tmp[621389] "expr temp" "maybe param" "maybe type" "temp"
    (621392 'move' call_tmp[621389](70727 call _cond_test call_tmp[621384]))
    if call_tmp[621389]
    {
      unknown call_tmp[621394] "expr temp" "maybe param" "maybe type" "temp"
      (621397 'move' call_tmp[621394](70701 call _cast string[26] idxType[70654]))
      unknown call_tmp[621399] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621402 'move' call_tmp[621399](70721 'typeof' step[70650]))
      unknown call_tmp[621404] "expr temp" "maybe param" "maybe type" "temp"
      (621407 'move' call_tmp[621404](70723 call _cast string[26] call_tmp[621399]))
      (70725 call compilerError "can't apply 'by' to a range with idxType " call_tmp[621394] " using a step of type " call_tmp[621404])
    }
    unknown call_tmp[621409] "expr temp" "maybe param" "maybe type" "temp"
    (621412 'move' call_tmp[621409](70822 call _cond_test 1))
    if call_tmp[621409]
    {
      unknown call_tmp[621414] "expr temp" "maybe param" "maybe type" "temp"
      (621417 'move' call_tmp[621414](70735 call == step[70650] 0))
      unknown call_tmp[621419] "expr temp" "maybe param" "maybe type" "temp"
      (621422 'move' call_tmp[621419](70761 call _cond_test call_tmp[621414]))
      if call_tmp[621419]
      {
        (70759 call boundsCheckHalt module=[255] HaltWrappers[209998] "the step argument of the 'by' operator is zero")
        (357779 'referenced modules list' HaltWrappers[209998])
      }
      unknown tmp[420075] "maybe param" "temp"
      (420086 'move' tmp[420075](70771 call chpl_need_to_check_step step[70650] strType[70666]))
      unknown call_tmp[621424] "expr temp" "maybe param" "maybe type" "temp"
      (621427 'move' call_tmp[621424](420088 call _cond_invalid tmp[420075]))
      if call_tmp[621424]
      {
        (420091 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557064] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557065] "maybe param" "temp"
      unknown call_tmp[621429] "expr temp" "maybe param" "maybe type" "temp"
      (621432 'move' call_tmp[621429](420076 call isTrue tmp[420075]))
      (557070 'move' tmp[557065](557068 call _cond_test call_tmp[621429]))
      if tmp[557065]
      {
        unknown tmp[557072] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621434] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (621437 'move' call_tmp[621434](70778 'typeof' step[70650]))
        unknown call_tmp[621439] "expr temp" "maybe param" "maybe type" "temp"
        (621442 'move' call_tmp[621439](70776 call max strType[70666]))
        unknown call_tmp[621444] "expr temp" "maybe param" "maybe type" "temp"
        (621447 'move' call_tmp[621444](70779 call _cast call_tmp[621434] call_tmp[621439]))
        unknown call_tmp[621449] "expr temp" "maybe param" "maybe type" "temp"
        (621452 'move' call_tmp[621449](70781 call > step[70650] call_tmp[621444]))
        (557074 'move' tmp[557072](420079 call isTrue call_tmp[621449]))
        (557079 'move' tmp[557064](557076 '_paramFoldLogical' tmp[557065] tmp[557072]))
      }
      {
        (557084 'move' tmp[557064](557081 '_paramFoldLogical' tmp[557065] 0))
      }
      unknown call_tmp[621454] "expr temp" "maybe param" "maybe type" "temp"
      (621457 'move' call_tmp[621454](70817 call _cond_test tmp[557064]))
      if call_tmp[621454]
      {
        unknown call_tmp[621459] "expr temp" "maybe param" "maybe type" "temp"
        (621462 'move' call_tmp[621459](70810 call _cast string[26] strType[70666]))
        unknown call_tmp[621464] "expr temp" "maybe param" "maybe type" "temp"
        (621467 'move' call_tmp[621464](70812 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621459]))
        (70815 call boundsCheckHalt module=[255] HaltWrappers[209998] call_tmp[621464])
        (475543 'end of statement' strType[70666])
        (357785 'referenced modules list' HaltWrappers[209998])
      }
    }
    (510380 return _void[55])
  }
  function chpl_range_check_stride[70832](param arg step[70830]:_any[178](?), arg idxType[70834]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70839 call chpl_check_step_integral step[70830])
    (475545 'end of statement')
    unknown strType[70846] "dead at end of block" "insert auto destroy" "type variable"(70845 call chpl__rangeStrideType idxType[70834])
    (541072 'move' strType[70846](541070 call chpl__rangeStrideType idxType[70834]))
    (475546 'end of statement')
    unknown call_tmp[621469] "expr temp" "maybe param" "maybe type" "temp"
    (621472 'move' call_tmp[621469](70851 call == step[70830] 0))
    unknown call_tmp[621474] "expr temp" "maybe param" "maybe type" "temp"
    (621477 'move' call_tmp[621474](70858 call _cond_test call_tmp[621469]))
    if call_tmp[621474]
    {
      (70856 call compilerError "the step argument of the 'by' operator is zero")
    }
    unknown tmp[420096] "maybe param" "temp"
    (420107 'move' tmp[420096](70867 call chpl_need_to_check_step step[70830] strType[70846]))
    unknown call_tmp[621479] "expr temp" "maybe param" "maybe type" "temp"
    (621482 'move' call_tmp[621479](420109 call _cond_invalid tmp[420096]))
    if call_tmp[621479]
    {
      (420112 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557091] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557092] "maybe param" "temp"
    unknown call_tmp[621484] "expr temp" "maybe param" "maybe type" "temp"
    (621487 'move' call_tmp[621484](420097 call isTrue tmp[420096]))
    (557097 'move' tmp[557092](557095 call _cond_test call_tmp[621484]))
    if tmp[557092]
    {
      unknown tmp[557099] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621489] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621492 'move' call_tmp[621489](70874 'typeof' step[70830]))
      unknown call_tmp[621494] "expr temp" "maybe param" "maybe type" "temp"
      (621497 'move' call_tmp[621494](70872 call max strType[70846]))
      unknown call_tmp[621499] "expr temp" "maybe param" "maybe type" "temp"
      (621502 'move' call_tmp[621499](70875 call _cast call_tmp[621489] call_tmp[621494]))
      unknown call_tmp[621504] "expr temp" "maybe param" "maybe type" "temp"
      (621507 'move' call_tmp[621504](70877 call > step[70830] call_tmp[621499]))
      (557101 'move' tmp[557099](420100 call isTrue call_tmp[621504]))
      (557106 'move' tmp[557091](557103 '_paramFoldLogical' tmp[557092] tmp[557099]))
    }
    {
      (557111 'move' tmp[557091](557108 '_paramFoldLogical' tmp[557092] 0))
    }
    unknown call_tmp[621509] "expr temp" "maybe param" "maybe type" "temp"
    (621512 'move' call_tmp[621509](70892 call _cond_test tmp[557091]))
    if call_tmp[621509]
    {
      unknown call_tmp[621514] "expr temp" "maybe param" "maybe type" "temp"
      (621517 'move' call_tmp[621514](70885 call _cast string[26] strType[70846]))
      unknown call_tmp[621519] "expr temp" "maybe param" "maybe type" "temp"
      (621522 'move' call_tmp[621519](70887 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621514]))
      (70890 call compilerError call_tmp[621519])
      (475549 'end of statement' strType[70846])
    }
    (510382 return _void[55])
  }
  function chpl_by_help[70913](arg r[70910]:range[64316](?), arg step[70915]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510386] "RVV" "temp"
    unknown call_tmp[621526] "maybe param" "maybe type" "temp"
    (621529 'move' call_tmp[621526](70919 call low _mt[243] r[70910]))
    unknown call_tmp[621531] "maybe param" "maybe type" "temp"
    (621534 'move' call_tmp[621531](455877 'query' r[70910] 1))
    const lw[70922] "dead at end of block" "const" "insert auto destroy"
    (541074 'init var' lw[70922] call_tmp[621526] call_tmp[621531])
    unknown call_tmp[621538] "maybe param" "maybe type" "temp"
    (621541 'move' call_tmp[621538](70927 call high _mt[243] r[70910]))
    unknown call_tmp[621543] "maybe param" "maybe type" "temp"
    (621546 'move' call_tmp[621543](455880 'query' r[70910] 1))
    const hh[70930] "dead at end of block" "const" "insert auto destroy"
    (541076 'init var' hh[70930] call_tmp[621538] call_tmp[621543])
    unknown call_tmp[621550] "expr temp" "maybe param" "maybe type" "temp"
    (621553 'move' call_tmp[621550](70940 call stride _mt[243] r[70910]))
    unknown call_tmp[621557] "expr temp" "maybe param" "maybe type" "temp"
    (621560 'move' call_tmp[621557](70945 call strType _mt[243] r[70910]))
    unknown call_tmp[621562] "expr temp" "maybe param" "maybe type" "temp"
    (621565 'move' call_tmp[621562](70948 call _cast call_tmp[621557] step[70915]))
    unknown call_tmp[621567] "maybe param" "maybe type" "temp"
    (621570 'move' call_tmp[621567](70950 call * call_tmp[621550] call_tmp[621562]))
    unknown call_tmp[621574] "maybe param" "maybe type" "temp"
    (621577 'move' call_tmp[621574](70936 call strType _mt[243] r[70910]))
    const st[70952] "dead at end of block" "const" "insert auto destroy"
    (541078 'init var' st[70952] call_tmp[621567] call_tmp[621574])
    (70955 'end of statement')
    const tmp[71077] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[557288] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557289] "maybe param" "temp"
    unknown call_tmp[621581] "expr temp" "maybe param" "maybe type" "temp"
    (621584 'move' call_tmp[621581](70972 call(70968 call (partial) isAmbiguous _mt[243] r[70910])))
    (557294 'move' tmp[557289](557292 call _cond_test call_tmp[621581]))
    if tmp[557289]
    {
      unknown tmp[557118] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557119] "maybe param" "temp"
      unknown call_tmp[621588] "expr temp" "maybe param" "maybe type" "temp"
      (621591 'move' call_tmp[621588](70974 call stridable _mt[243] r[70910]))
      (557124 'move' tmp[557119](557122 call _cond_test call_tmp[621588]))
      if tmp[557119]
      {
        unknown tmp[557126] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621595] "expr temp" "maybe param" "maybe type" "temp"
        (621598 'move' call_tmp[621595](70979 call alignment _mt[243] r[70910]))
        (557128 'move' tmp[557126](70983 call _build_tuple 0 call_tmp[621595]))
        (557133 'move' tmp[557118](557130 '_paramFoldLogical' tmp[557119] tmp[557126]))
      }
      {
        unknown tmp[557135] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621602] "expr temp" "maybe param" "maybe type" "temp"
        (621605 'move' call_tmp[621602](70992 call(70987 call (partial) chpl_intToIdx _mt[243] r[70910]) 0))
        (557137 'move' tmp[557135](70994 call _build_tuple 0 call_tmp[621602]))
        (557142 'move' tmp[557118](557139 '_paramFoldLogical' tmp[557119] tmp[557135]))
      }
      (557299 'move' tmp[557288](557296 '_paramFoldLogical' tmp[557289] tmp[557118]))
    }
    {
      unknown tmp[420138] "maybe param" "temp"
      (420149 'move' tmp[420138](71004 call(71000 call (partial) hasLowBound _mt[243] r[70910])))
      unknown call_tmp[621609] "expr temp" "maybe param" "maybe type" "temp"
      (621612 'move' call_tmp[621609](420151 call _cond_invalid tmp[420138]))
      if call_tmp[621609]
      {
        (420154 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557149] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557150] "maybe param" "temp"
      unknown call_tmp[621614] "expr temp" "maybe param" "maybe type" "temp"
      (621617 'move' call_tmp[621614](420139 call isTrue tmp[420138]))
      (557155 'move' tmp[557150](557153 call _cond_test call_tmp[621614]))
      if tmp[557150]
      {
        unknown tmp[557157] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621619] "expr temp" "maybe param" "maybe type" "temp"
        (621622 'move' call_tmp[621619](71007 call > st[70952] 0))
        (557159 'move' tmp[557157](420142 call isTrue call_tmp[621619]))
        (557164 'move' tmp[557149](557161 '_paramFoldLogical' tmp[557150] tmp[557157]))
      }
      {
        (557169 'move' tmp[557149](557166 '_paramFoldLogical' tmp[557150] 0))
      }
      unknown tmp[557261] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557262] "maybe param" "temp"
      (557267 'move' tmp[557262](557265 call _cond_test tmp[557149]))
      if tmp[557262]
      {
        unknown tmp[557269] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621626] "expr temp" "maybe param" "maybe type" "temp"
        (621629 'move' call_tmp[621626](71013 call alignedLow _mt[243] r[70910]))
        (557271 'move' tmp[557269](71017 call _build_tuple 1 call_tmp[621626]))
        (557276 'move' tmp[557261](557273 '_paramFoldLogical' tmp[557262] tmp[557269]))
      }
      {
        unknown tmp[420117] "maybe param" "temp"
        (420128 'move' tmp[420117](71024 call(71020 call (partial) hasHighBound _mt[243] r[70910])))
        unknown call_tmp[621633] "expr temp" "maybe param" "maybe type" "temp"
        (621636 'move' call_tmp[621633](420130 call _cond_invalid tmp[420117]))
        if call_tmp[621633]
        {
          (420133 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557176] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557177] "maybe param" "temp"
        unknown call_tmp[621638] "expr temp" "maybe param" "maybe type" "temp"
        (621641 'move' call_tmp[621638](420118 call isTrue tmp[420117]))
        (557182 'move' tmp[557177](557180 call _cond_test call_tmp[621638]))
        if tmp[557177]
        {
          unknown tmp[557184] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621643] "expr temp" "maybe param" "maybe type" "temp"
          (621646 'move' call_tmp[621643](71027 call < st[70952] 0))
          (557186 'move' tmp[557184](420121 call isTrue call_tmp[621643]))
          (557191 'move' tmp[557176](557188 '_paramFoldLogical' tmp[557177] tmp[557184]))
        }
        {
          (557196 'move' tmp[557176](557193 '_paramFoldLogical' tmp[557177] 0))
        }
        unknown tmp[557234] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[557235] "maybe param" "temp"
        (557240 'move' tmp[557235](557238 call _cond_test tmp[557176]))
        if tmp[557235]
        {
          unknown tmp[557242] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621650] "expr temp" "maybe param" "maybe type" "temp"
          (621653 'move' call_tmp[621650](71033 call alignedHigh _mt[243] r[70910]))
          (557244 'move' tmp[557242](71037 call _build_tuple 1 call_tmp[621650]))
          (557249 'move' tmp[557234](557246 '_paramFoldLogical' tmp[557235] tmp[557242]))
        }
        {
          unknown tmp[557203] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[557204] "maybe param" "temp"
          unknown call_tmp[621657] "expr temp" "maybe param" "maybe type" "temp"
          (621660 'move' call_tmp[621657](71040 call stridable _mt[243] r[70910]))
          (557209 'move' tmp[557204](557207 call _cond_test call_tmp[621657]))
          if tmp[557204]
          {
            unknown tmp[557211] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621664] "expr temp" "maybe param" "maybe type" "temp"
            (621667 'move' call_tmp[621664](71044 call aligned _mt[243] r[70910]))
            unknown call_tmp[621671] "expr temp" "maybe param" "maybe type" "temp"
            (621674 'move' call_tmp[621671](71048 call alignment _mt[243] r[70910]))
            (557213 'move' tmp[557211](71052 call _build_tuple call_tmp[621664] call_tmp[621671]))
            (557218 'move' tmp[557203](557215 '_paramFoldLogical' tmp[557204] tmp[557211]))
          }
          {
            unknown tmp[557220] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621678] "expr temp" "maybe param" "maybe type" "temp"
            (621681 'move' call_tmp[621678](71061 call(71056 call (partial) chpl_intToIdx _mt[243] r[70910]) 0))
            (557222 'move' tmp[557220](71063 call _build_tuple 0 call_tmp[621678]))
            (557227 'move' tmp[557203](557224 '_paramFoldLogical' tmp[557204] tmp[557220]))
          }
          (557254 'move' tmp[557234](557251 '_paramFoldLogical' tmp[557235] tmp[557203]))
        }
        (557281 'move' tmp[557261](557278 '_paramFoldLogical' tmp[557262] tmp[557234]))
      }
      (557304 'move' tmp[557288](557301 '_paramFoldLogical' tmp[557289] tmp[557261]))
    }
    unknown call_tmp[621683] "expr temp" "maybe param" "maybe type" "temp"
    (621686 'move' call_tmp[621683](455883 'query' r[70910] 1))
    unknown call_tmp[621688] "maybe param" "maybe type" "temp"
    (621691 'move' call_tmp[621688](70965 call _build_tuple bool[10] call_tmp[621683]))
    (541080 'init var' tmp[71077] tmp[557288] call_tmp[621688])
    (71084 call _check_tuple_var_decl tmp[71077] 2)
    (475551 'end of statement')
    unknown call_tmp[621693] "maybe param" "maybe type" "temp"
    (621696 'move' call_tmp[621693](71078 call tmp[71077] 0))
    const ald[70957] "dead at end of block" "const" "insert auto destroy"
    (541082 'init var' ald[70957] call_tmp[621693])
    unknown call_tmp[621698] "maybe param" "maybe type" "temp"
    (621701 'move' call_tmp[621698](71081 call tmp[71077] 1))
    const alt[70959] "dead at end of block" "const" "insert auto destroy"
    (541084 'init var' alt[70959] call_tmp[621698])
    (71089 'end of statement')
    unknown call_tmp[621703] "expr temp" "maybe param" "maybe type" "temp"
    (621706 'move' call_tmp[621703](455886 'query' r[70910] 1))
    unknown call_tmp[621708] "expr temp" "maybe param" "maybe type" "temp"
    (621711 'move' call_tmp[621708](455892 'query' r[70910] 2))
    unknown call_tmp[621713] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621716 'move' call_tmp[621713](747787 'new' range[64316](?) call_tmp[621703] call_tmp[621708] 1 lw[70922] hh[70930] st[70952] alt[70959] ald[70957]))
    (510391 'move' ret[510386](510390 'deref' call_tmp[621713]))
    gotoReturn _end_chpl_by_help[510384] _end_chpl_by_help[510384]
    (475552 'end of statement' lw[70922] hh[70930] st[70952] alt[70959] ald[70957])
    label _end_chpl_by_help[510384]
    (510388 return ret[510386])
  }
  function chpl_by[71110](arg r[71108]:_any[178](?), arg step[71112]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510397] "RVV" "temp"
    unknown call_tmp[621718] "expr temp" "maybe param" "maybe type" "temp"
    (621721 'move' call_tmp[621718](71117 call isRange r[71108]))
    unknown call_tmp[621723] "expr temp" "maybe param" "maybe type" "temp"
    (621726 'move' call_tmp[621723](71118 call ! call_tmp[621718]))
    unknown call_tmp[621728] "expr temp" "maybe param" "maybe type" "temp"
    (621731 'move' call_tmp[621728](71141 call _cond_test call_tmp[621723]))
    if call_tmp[621728]
    {
      (71139 call compilerError "the first argument of the 'by' operator is not a range")
    }
    unknown call_tmp[621735] "expr temp" "maybe param" "maybe type" "temp"
    (621738 'move' call_tmp[621735](71151 call idxType _mt[243] r[71108]))
    (71154 call chpl_range_check_stride step[71112] call_tmp[621735])
    (475559 'end of statement')
    unknown call_tmp[621740] "expr temp" "maybe param" "maybe type" "temp"
    (621743 'move' call_tmp[621740](71160 call chpl_by_help r[71108] step[71112]))
    (510402 'move' ret[510397](510401 'deref' call_tmp[621740]))
    (510399 return ret[510397])
  }
  function chpl_by[71174](arg r[71171]:range[64316](?), param arg step[71176]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510406] "RVV" "temp"
    unknown call_tmp[621747] "expr temp" "maybe param" "maybe type" "temp"
    (621750 'move' call_tmp[621747](71182 call idxType _mt[243] r[71171]))
    (71185 call chpl_range_check_stride step[71176] call_tmp[621747])
    (475561 'end of statement')
    unknown call_tmp[621754] "expr temp" "maybe param" "maybe type" "temp"
    (621757 'move' call_tmp[621754](71193 call strType _mt[243] r[71171]))
    unknown call_tmp[621759] "expr temp" "maybe param" "maybe type" "temp"
    (621762 'move' call_tmp[621759](71196 call _cast call_tmp[621754] step[71176]))
    unknown call_tmp[621764] "expr temp" "maybe param" "maybe type" "temp"
    (621767 'move' call_tmp[621764](71198 call chpl_by_help r[71171] call_tmp[621759]))
    (510411 'move' ret[510406](510410 'deref' call_tmp[621764]))
    (510408 return ret[510406])
  }
  function chpl_align[71217](arg r[71214]:range[64316](?), arg algn[71220] :
  (455912 'query' r[71214] 1)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510415] "RVV" "temp"
    unknown call_tmp[621769] "expr temp" "maybe param" "maybe type" "temp"
    (621772 'move' call_tmp[621769](455915 'query' r[71214] 1))
    unknown call_tmp[621774] "expr temp" "maybe param" "maybe type" "temp"
    (621777 'move' call_tmp[621774](455921 'query' r[71214] 2))
    unknown call_tmp[621783] "expr temp" "maybe param" "maybe type" "temp"
    (621786 'move' call_tmp[621783](71234 call _low _mt[243] r[71214]))
    unknown call_tmp[621788] "expr temp" "maybe param" "maybe type" "temp"
    (621791 'move' call_tmp[621788](71238 call(71230 call (partial) chpl_intToIdx _mt[243] r[71214]) call_tmp[621783]))
    unknown call_tmp[621797] "expr temp" "maybe param" "maybe type" "temp"
    (621800 'move' call_tmp[621797](71244 call _high _mt[243] r[71214]))
    unknown call_tmp[621802] "expr temp" "maybe param" "maybe type" "temp"
    (621805 'move' call_tmp[621802](71248 call(71240 call (partial) chpl_intToIdx _mt[243] r[71214]) call_tmp[621797]))
    unknown call_tmp[621809] "expr temp" "maybe param" "maybe type" "temp"
    (621812 'move' call_tmp[621809](71250 call stride _mt[243] r[71214]))
    unknown call_tmp[621814] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621817 'move' call_tmp[621814](747788 'new' range[64316](?) call_tmp[621769] call_tmp[621774] 1 call_tmp[621788] call_tmp[621802] call_tmp[621809] algn[71220] 1))
    (510420 'move' ret[510415](510419 'deref' call_tmp[621814]))
    (510417 return ret[510415])
  }
  function chpl_align[71275](arg r[71272]:range[64316](?), arg algn[71277]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510424] "RVV" "temp"
    unknown call_tmp[621819] "expr temp" "maybe param" "maybe type" "temp"
    (621822 'move' call_tmp[621819](455934 'query' r[71272] 1))
    unknown call_tmp[621824] "expr temp" "maybe param" "maybe type" "temp"
    (621827 'move' call_tmp[621824](71300 call _cast string[26] call_tmp[621819]))
    unknown call_tmp[621829] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621832 'move' call_tmp[621829](71320 'typeof' algn[71277]))
    unknown call_tmp[621834] "expr temp" "maybe param" "maybe type" "temp"
    (621837 'move' call_tmp[621834](71322 call _cast string[26] call_tmp[621829]))
    (71324 call compilerError "can't align a range with idxType " call_tmp[621824] " using a value of type " call_tmp[621834])
    (475564 'end of statement')
    (510429 'move' ret[510424](510428 'deref' r[71272]))
    (510426 return ret[510424])
  }
  function range[64316](?).offset[71339](arg _mt[71344]:_MT[238], arg this[71341]:range[64316](?) :
  range[64316](?), in arg offset[71336]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510433] "RVV" "temp"
    unknown call_tmp[621843] "expr temp" "maybe param" "maybe type" "temp"
    (621846 'move' call_tmp[621843](375015 call intIdxType _mt[243] this[71341]))
    unknown call_tmp[621848] "maybe param" "maybe type" "temp"
    (621851 'move' call_tmp[621848](71352 call(71347 call (partial) safeCast _mt[243] offset[71336]) call_tmp[621843]))
    unknown offs[71353] "dead at end of block" "insert auto destroy"
    (541086 'init var' offs[71353] call_tmp[621848])
    (71356 'end of statement')
    unknown call_tmp[621855] "expr temp" "maybe param" "maybe type" "temp"
    (621858 'move' call_tmp[621855](375020 call stridable _mt[243] this[71341]))
    unknown call_tmp[621860] "expr temp" "maybe param" "maybe type" "temp"
    (621863 'move' call_tmp[621860](71359 call ! call_tmp[621855]))
    unknown call_tmp[621865] "expr temp" "maybe param" "maybe type" "temp"
    (621868 'move' call_tmp[621865](71388 call _cond_test call_tmp[621860]))
    if call_tmp[621865]
    {
      (71380 call compilerWarning "invoking 'offset' on an unstrided range has no effect.")
      (475566 'end of statement')
      (71385 call = offs[71353] 0)
      (475567 'end of statement' offs[71353])
    }
    unknown tmp[420159] "maybe param" "temp"
    (420170 'move' tmp[420159] 1)
    unknown call_tmp[621870] "expr temp" "maybe param" "maybe type" "temp"
    (621873 'move' call_tmp[621870](420172 call _cond_invalid tmp[420159]))
    if call_tmp[621870]
    {
      (420175 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557311] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557312] "maybe param" "temp"
    unknown call_tmp[621875] "expr temp" "maybe param" "maybe type" "temp"
    (621878 'move' call_tmp[621875](420160 call isTrue tmp[420159]))
    (557317 'move' tmp[557312](557315 call _cond_test call_tmp[621875]))
    if tmp[557312]
    {
      unknown tmp[557319] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621882] "expr temp" "maybe param" "maybe type" "temp"
      (621885 'move' call_tmp[621882](71395 call(375026 call (partial) hasFirst _mt[243] this[71341])))
      unknown call_tmp[621887] "expr temp" "maybe param" "maybe type" "temp"
      (621890 'move' call_tmp[621887](71396 call ! call_tmp[621882]))
      (557321 'move' tmp[557319](420163 call isTrue call_tmp[621887]))
      (557326 'move' tmp[557311](557323 '_paramFoldLogical' tmp[557312] tmp[557319]))
    }
    {
      (557331 'move' tmp[557311](557328 '_paramFoldLogical' tmp[557312] 0))
    }
    unknown call_tmp[621892] "expr temp" "maybe param" "maybe type" "temp"
    (621895 'move' call_tmp[621892](71424 call _cond_test tmp[557311]))
    if call_tmp[621892]
    {
      (71422 call boundsCheckHalt module=[255] HaltWrappers[209998] "invoking 'offset' on a range without the first index")
      (357817 'referenced modules list' HaltWrappers[209998])
    }
    unknown call_tmp[621899] "expr temp" "maybe param" "maybe type" "temp"
    (621902 'move' call_tmp[621899](375032 call idxType _mt[243] this[71341]))
    unknown call_tmp[621906] "expr temp" "maybe param" "maybe type" "temp"
    (621909 'move' call_tmp[621906](375037 call boundedType _mt[243] this[71341]))
    unknown call_tmp[621913] "expr temp" "maybe param" "maybe type" "temp"
    (621916 'move' call_tmp[621913](375042 call stridable _mt[243] this[71341]))
    unknown call_tmp[621920] "expr temp" "maybe param" "maybe type" "temp"
    (621923 'move' call_tmp[621920](375046 call low _mt[243] this[71341]))
    unknown call_tmp[621927] "expr temp" "maybe param" "maybe type" "temp"
    (621930 'move' call_tmp[621927](375050 call high _mt[243] this[71341]))
    unknown call_tmp[621934] "expr temp" "maybe param" "maybe type" "temp"
    (621937 'move' call_tmp[621934](375054 call stride _mt[243] this[71341]))
    unknown call_tmp[621943] "expr temp" "maybe param" "maybe type" "temp"
    (621946 'move' call_tmp[621943](71440 call firstAsInt _mt[243] this[71341]))
    unknown call_tmp[621948] "expr temp" "maybe param" "maybe type" "temp"
    (621951 'move' call_tmp[621948](71444 call + call_tmp[621943] offs[71353]))
    unknown call_tmp[621953] "expr temp" "maybe param" "maybe type" "temp"
    (621956 'move' call_tmp[621953](71447 call(375058 call (partial) chpl_intToIdx _mt[243] this[71341]) call_tmp[621948]))
    unknown call_tmp[621958] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621961 'move' call_tmp[621958](747789 'new' range[64316](?) call_tmp[621899] call_tmp[621906] call_tmp[621913] call_tmp[621920] call_tmp[621927] call_tmp[621934] call_tmp[621953] 1))
    (510438 'move' ret[510433](510437 'deref' call_tmp[621958]))
    gotoReturn _end_offset[510431] _end_offset[510431]
    (475571 'end of statement' offs[71353])
    label _end_offset[510431]
    (510435 return ret[510433])
  }
  function range[64316](?).this[71464](arg _mt[71469]:_MT[238], const arg this[71466]:range[64316](?) :
  range[64316](?), arg other[71461]:range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510526] "RVV" "temp"
    unknown ambig[71472] "dead at end of block" "insert auto destroy"
    (541088 'init var' ambig[71472] 0)
    (71475 'end of statement')
    unknown tmp[420201] "maybe param" "temp"
    (420212 'move' tmp[420201](71482 call(71478 call (partial) isAmbiguous _mt[243] this[71466])))
    unknown call_tmp[621965] "expr temp" "maybe param" "maybe type" "temp"
    (621968 'move' call_tmp[621965](420214 call _cond_invalid tmp[420201]))
    if call_tmp[621965]
    {
      (420217 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[557338] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557339] "maybe param" "temp"
    unknown call_tmp[621970] "expr temp" "maybe param" "maybe type" "temp"
    (621973 'move' call_tmp[621970](420202 call isTrue tmp[420201]))
    (557344 'move' tmp[557339](557342 call _cond_test call_tmp[621970]))
    if tmp[557339]
    {
      (557349 'move' tmp[557338](557346 '_paramFoldLogical' tmp[557339] 1))
    }
    {
      unknown tmp[557351] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621977] "expr temp" "maybe param" "maybe type" "temp"
      (621980 'move' call_tmp[621977](71488 call(71484 call (partial) isAmbiguous _mt[243] other[71461])))
      (557353 'move' tmp[557351](420206 call isTrue call_tmp[621977]))
      (557358 'move' tmp[557338](557355 '_paramFoldLogical' tmp[557339] tmp[557351]))
    }
    unknown call_tmp[621982] "expr temp" "maybe param" "maybe type" "temp"
    (621985 'move' call_tmp[621982](71580 call _cond_test tmp[557338]))
    if call_tmp[621982]
    {
      unknown call_tmp[621989] "expr temp" "maybe param" "maybe type" "temp"
      (621992 'move' call_tmp[621989](71493 call stride _mt[243] this[71466]))
      unknown call_tmp[621994] "maybe param" "maybe type" "temp"
      (621997 'move' call_tmp[621994](71497 call abs call_tmp[621989]))
      unknown st1[71498] "dead at end of block" "insert auto destroy"
      (541090 'init var' st1[71498] call_tmp[621994])
      (71501 'end of statement')
      unknown call_tmp[622001] "expr temp" "maybe param" "maybe type" "temp"
      (622004 'move' call_tmp[622001](71505 call stride _mt[243] other[71461]))
      unknown call_tmp[622006] "maybe param" "maybe type" "temp"
      (622009 'move' call_tmp[622006](71509 call abs call_tmp[622001]))
      unknown st2[71510] "dead at end of block" "insert auto destroy"
      (541092 'init var' st2[71510] call_tmp[622006])
      (71513 'end of statement')
      unknown call_tmp[622011] "maybe param" "maybe type" "temp"
      (622014 'move' call_tmp[622011](71523 call chpl__extendedEuclid st1[71498] st2[71510]))
      unknown tmp[71524] "dead at end of block" "insert auto destroy" "temp"
      (541094 'init var' tmp[71524] call_tmp[622011])
      (71531 call _check_tuple_var_decl tmp[71524] 2)
      (475574 'end of statement')
      unknown call_tmp[622016] "maybe param" "maybe type" "temp"
      (622019 'move' call_tmp[622016](71525 call tmp[71524] 0))
      unknown g[71514] "dead at end of block" "insert auto destroy"
      (541096 'init var' g[71514] call_tmp[622016])
      unknown call_tmp[622021] "maybe param" "maybe type" "temp"
      (622024 'move' call_tmp[622021](71528 call tmp[71524] 1))
      unknown x[71516] "dead at end of block" "insert auto destroy"
      (541098 'init var' x[71516] call_tmp[622021])
      (71536 'end of statement')
      unknown tmp[420180] "maybe param" "temp"
      (420191 'move' tmp[420180] 1)
      unknown call_tmp[622026] "expr temp" "maybe param" "maybe type" "temp"
      (622029 'move' call_tmp[622026](420193 call _cond_invalid tmp[420180]))
      if call_tmp[622026]
      {
        (420196 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557365] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557366] "maybe param" "temp"
      unknown call_tmp[622031] "expr temp" "maybe param" "maybe type" "temp"
      (622034 'move' call_tmp[622031](420181 call isTrue tmp[420180]))
      (557371 'move' tmp[557366](557369 call _cond_test call_tmp[622031]))
      if tmp[557366]
      {
        unknown tmp[557373] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622036] "expr temp" "maybe param" "maybe type" "temp"
        (622039 'move' call_tmp[622036](71540 call > g[71514] 1))
        (557375 'move' tmp[557373](420184 call isTrue call_tmp[622036]))
        (557380 'move' tmp[557365](557377 '_paramFoldLogical' tmp[557366] tmp[557373]))
      }
      {
        (557385 'move' tmp[557365](557382 '_paramFoldLogical' tmp[557366] 0))
      }
      unknown call_tmp[622041] "expr temp" "maybe param" "maybe type" "temp"
      (622044 'move' call_tmp[622041](71570 call _cond_test tmp[557365]))
      if call_tmp[622041]
      {
        (71568 call boundsCheckHalt module=[255] HaltWrappers[209998] "Cannot slice ranges with ambiguous alignments unless their strides are relatively prime.")
        (357828 'referenced modules list' HaltWrappers[209998])
      }
      (71577 call = ambig[71472] 1)
      (475577 'end of statement' ambig[71472])
    }
    function computeBoundedType[71588](arg r1[71586]:_any[178](?), arg r2[71590]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[510444] "RVV" "param" "temp"
      unknown tmp[420222] "maybe param" "temp"
      (420233 'move' tmp[420222](71597 call(71593 call (partial) hasLowBound _mt[243] r1[71586])))
      unknown call_tmp[622048] "expr temp" "maybe param" "maybe type" "temp"
      (622051 'move' call_tmp[622048](420235 call _cond_invalid tmp[420222]))
      if call_tmp[622048]
      {
        (420238 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown low[71606] "dead at end of block" "param"
      unknown tmp[557392] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557393] "maybe param" "temp"
      unknown call_tmp[622053] "expr temp" "maybe param" "maybe type" "temp"
      (622056 'move' call_tmp[622053](420223 call isTrue tmp[420222]))
      (557398 'move' tmp[557393](557396 call _cond_test call_tmp[622053]))
      if tmp[557393]
      {
        (557403 'move' tmp[557392](557400 '_paramFoldLogical' tmp[557393] 1))
      }
      {
        unknown tmp[557405] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622060] "expr temp" "maybe param" "maybe type" "temp"
        (622063 'move' call_tmp[622060](71603 call(71599 call (partial) hasLowBound _mt[243] r2[71590])))
        (557407 'move' tmp[557405](420227 call isTrue call_tmp[622060]))
        (557412 'move' tmp[557392](557409 '_paramFoldLogical' tmp[557393] tmp[557405]))
      }
      (541100 'init var' low[71606] tmp[557392])
      (71609 'end of statement')
      unknown tmp[420243] "maybe param" "temp"
      (420254 'move' tmp[420243](71616 call(71612 call (partial) hasHighBound _mt[243] r1[71586])))
      unknown call_tmp[622067] "expr temp" "maybe param" "maybe type" "temp"
      (622070 'move' call_tmp[622067](420256 call _cond_invalid tmp[420243]))
      if call_tmp[622067]
      {
        (420259 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown high[71625] "dead at end of block" "param"
      unknown tmp[557419] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557420] "maybe param" "temp"
      unknown call_tmp[622072] "expr temp" "maybe param" "maybe type" "temp"
      (622075 'move' call_tmp[622072](420244 call isTrue tmp[420243]))
      (557425 'move' tmp[557420](557423 call _cond_test call_tmp[622072]))
      if tmp[557420]
      {
        (557430 'move' tmp[557419](557427 '_paramFoldLogical' tmp[557420] 1))
      }
      {
        unknown tmp[557432] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622079] "expr temp" "maybe param" "maybe type" "temp"
        (622082 'move' call_tmp[622079](71622 call(71618 call (partial) hasHighBound _mt[243] r2[71590])))
        (557434 'move' tmp[557432](420248 call isTrue call_tmp[622079]))
        (557439 'move' tmp[557419](557436 '_paramFoldLogical' tmp[557420] tmp[557432]))
      }
      (541102 'init var' high[71625] tmp[557419])
      (71628 'end of statement')
      unknown tmp[420264] "maybe param" "temp"
      (420275 'move' tmp[420264] low[71606])
      unknown call_tmp[622084] "expr temp" "maybe param" "maybe type" "temp"
      (622087 'move' call_tmp[622084](420277 call _cond_invalid tmp[420264]))
      if call_tmp[622084]
      {
        (420280 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557446] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557447] "maybe param" "temp"
      unknown call_tmp[622089] "expr temp" "maybe param" "maybe type" "temp"
      (622092 'move' call_tmp[622089](420265 call isTrue tmp[420264]))
      (557452 'move' tmp[557447](557450 call _cond_test call_tmp[622089]))
      if tmp[557447]
      {
        unknown tmp[557454] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557456 'move' tmp[557454](420268 call isTrue high[71625]))
        (557461 'move' tmp[557446](557458 '_paramFoldLogical' tmp[557447] tmp[557454]))
      }
      {
        (557466 'move' tmp[557446](557463 '_paramFoldLogical' tmp[557447] 0))
      }
      unknown call_tmp[622094] "expr temp" "maybe param" "maybe type" "temp"
      (622097 'move' call_tmp[622094](71671 call _cond_test tmp[557446]))
      if call_tmp[622094]
      {
        (510449 'move' ret[510444](510448 'deref' bounded[64205]))
        gotoReturn _end_computeBoundedType[510442] _end_computeBoundedType[510442]
      }
      {
        unknown call_tmp[622099] "expr temp" "maybe param" "maybe type" "temp"
        (622102 'move' call_tmp[622099](71665 call _cond_test low[71606]))
        if call_tmp[622099]
        {
          (510454 'move' ret[510444](510453 'deref' boundedLow[64207]))
          gotoReturn _end_computeBoundedType[510442] _end_computeBoundedType[510442]
        }
        {
          unknown call_tmp[622104] "expr temp" "maybe param" "maybe type" "temp"
          (622107 'move' call_tmp[622104](71659 call _cond_test high[71625]))
          if call_tmp[622104]
          {
            (510459 'move' ret[510444](510458 'deref' boundedHigh[64209]))
            gotoReturn _end_computeBoundedType[510442] _end_computeBoundedType[510442]
          }
          {
            (510464 'move' ret[510444](510463 'deref' boundedNone[64211]))
            gotoReturn _end_computeBoundedType[510442] _end_computeBoundedType[510442]
          }
        }
      }
      label _end_computeBoundedType[510442]
      (510446 return ret[510444])
    }
    unknown lo1[71693] "dead at end of block" "insert auto destroy"
    unknown tmp[557473] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557474] "maybe param" "temp"
    unknown call_tmp[622111] "expr temp" "maybe param" "maybe type" "temp"
    (622114 'move' call_tmp[622111](71681 call(375073 call (partial) hasLowBound _mt[243] this[71466])))
    (557479 'move' tmp[557474](557477 call _cond_test call_tmp[622111]))
    if tmp[557474]
    {
      unknown tmp[557481] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557483 'move' tmp[557481](71683 call _low _mt[243] this[71466]))
      (557488 'move' tmp[557473](557485 '_paramFoldLogical' tmp[557474] tmp[557481]))
    }
    {
      unknown tmp[557490] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557492 'move' tmp[557490](71687 call _low _mt[243] other[71461]))
      (557497 'move' tmp[557473](557494 '_paramFoldLogical' tmp[557474] tmp[557490]))
    }
    (541104 'init var' lo1[71693] tmp[557473])
    (71696 'end of statement')
    unknown hi1[71711] "dead at end of block" "insert auto destroy"
    unknown tmp[557504] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557505] "maybe param" "temp"
    unknown call_tmp[622122] "expr temp" "maybe param" "maybe type" "temp"
    (622125 'move' call_tmp[622122](71699 call(375077 call (partial) hasHighBound _mt[243] this[71466])))
    (557510 'move' tmp[557505](557508 call _cond_test call_tmp[622122]))
    if tmp[557505]
    {
      unknown tmp[557512] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557514 'move' tmp[557512](71701 call _high _mt[243] this[71466]))
      (557519 'move' tmp[557504](557516 '_paramFoldLogical' tmp[557505] tmp[557512]))
    }
    {
      unknown tmp[557521] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557523 'move' tmp[557521](71705 call _high _mt[243] other[71461]))
      (557528 'move' tmp[557504](557525 '_paramFoldLogical' tmp[557505] tmp[557521]))
    }
    (541106 'init var' hi1[71711] tmp[557504])
    (71714 'end of statement')
    unknown call_tmp[622133] "expr temp" "maybe param" "maybe type" "temp"
    (622136 'move' call_tmp[622133](71717 call stride _mt[243] this[71466]))
    unknown call_tmp[622138] "maybe param" "maybe type" "temp"
    (622141 'move' call_tmp[622138](71721 call abs call_tmp[622133]))
    unknown st1[71722] "dead at end of block" "insert auto destroy"
    (541108 'init var' st1[71722] call_tmp[622138])
    (71725 'end of statement')
    unknown lo2[71743] "dead at end of block" "insert auto destroy"
    unknown tmp[557535] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557536] "maybe param" "temp"
    unknown call_tmp[622145] "expr temp" "maybe param" "maybe type" "temp"
    (622148 'move' call_tmp[622145](71731 call(71727 call (partial) hasLowBound _mt[243] other[71461])))
    (557541 'move' tmp[557536](557539 call _cond_test call_tmp[622145]))
    if tmp[557536]
    {
      unknown tmp[557543] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557545 'move' tmp[557543](71733 call _low _mt[243] other[71461]))
      (557550 'move' tmp[557535](557547 '_paramFoldLogical' tmp[557536] tmp[557543]))
    }
    {
      unknown tmp[557552] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557554 'move' tmp[557552](71737 call _low _mt[243] this[71466]))
      (557559 'move' tmp[557535](557556 '_paramFoldLogical' tmp[557536] tmp[557552]))
    }
    (541110 'init var' lo2[71743] tmp[557535])
    (71746 'end of statement')
    unknown hi2[71764] "dead at end of block" "insert auto destroy"
    unknown tmp[557566] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557567] "maybe param" "temp"
    unknown call_tmp[622156] "expr temp" "maybe param" "maybe type" "temp"
    (622159 'move' call_tmp[622156](71752 call(71748 call (partial) hasHighBound _mt[243] other[71461])))
    (557572 'move' tmp[557567](557570 call _cond_test call_tmp[622156]))
    if tmp[557567]
    {
      unknown tmp[557574] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557576 'move' tmp[557574](71754 call _high _mt[243] other[71461]))
      (557581 'move' tmp[557566](557578 '_paramFoldLogical' tmp[557567] tmp[557574]))
    }
    {
      unknown tmp[557583] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557585 'move' tmp[557583](71758 call _high _mt[243] this[71466]))
      (557590 'move' tmp[557566](557587 '_paramFoldLogical' tmp[557567] tmp[557583]))
    }
    (541112 'init var' hi2[71764] tmp[557566])
    (71767 'end of statement')
    unknown call_tmp[622167] "expr temp" "maybe param" "maybe type" "temp"
    (622170 'move' call_tmp[622167](71770 call stride _mt[243] other[71461]))
    unknown call_tmp[622172] "maybe param" "maybe type" "temp"
    (622175 'move' call_tmp[622172](71774 call abs call_tmp[622167]))
    unknown st2[71775] "dead at end of block" "insert auto destroy"
    (541114 'init var' st2[71775] call_tmp[622172])
    (71778 'end of statement')
    unknown call_tmp[622179] "expr temp" "maybe param" "maybe type" "temp"
    (622182 'move' call_tmp[622179](375081 call intIdxType _mt[243] this[71466]))
    unknown call_tmp[622184] "expr temp" "maybe param" "maybe type" "temp"
    (622187 'move' call_tmp[622184](71782 call isUintType call_tmp[622179]))
    unknown call_tmp[622189] "expr temp" "maybe param" "maybe type" "temp"
    (622192 'move' call_tmp[622189](71798 call _cond_test call_tmp[622184]))
    if call_tmp[622189]
    {
      unknown call_tmp[622194] "expr temp" "maybe param" "maybe type" "temp"
      (622197 'move' call_tmp[622194](71785 call < lo1[71693] 0))
      unknown call_tmp[622199] "expr temp" "maybe param" "maybe type" "temp"
      (622202 'move' call_tmp[622199](71792 call _cond_test call_tmp[622194]))
      if call_tmp[622199]
      {
        (71789 call = lo1[71693] 0)
        (475586 'end of statement' lo1[71693])
      }
    }
    unknown call_tmp[622206] "maybe param" "maybe type" "temp"
    (622209 'move' call_tmp[622206](71804 call stride _mt[243] this[71466]))
    unknown call_tmp[622213] "maybe param" "maybe type" "temp"
    (622216 'move' call_tmp[622213](375087 call strType _mt[243] this[71466]))
    unknown newStride[71807] "dead at end of block" "insert auto destroy"
    (541116 'init var' newStride[71807] call_tmp[622206] call_tmp[622213])
    (71810 'end of statement')
    unknown call_tmp[622220] "expr temp" "maybe param" "maybe type" "temp"
    (622223 'move' call_tmp[622220](71814 call stride _mt[243] this[71466]))
    unknown call_tmp[622225] "maybe param" "maybe type" "temp"
    (622228 'move' call_tmp[622225](71818 call abs call_tmp[622220]))
    unknown call_tmp[622232] "maybe param" "maybe type" "temp"
    (622235 'move' call_tmp[622232](375091 call strType _mt[243] this[71466]))
    unknown lcm[71819] "dead at end of block" "insert auto destroy"
    (541118 'init var' lcm[71819] call_tmp[622225] call_tmp[622232])
    (71822 'end of statement')
    unknown call_tmp[622239] "expr temp" "maybe param" "maybe type" "temp"
    (622242 'move' call_tmp[622239](375100 call strType _mt[243] this[71466]))
    unknown call_tmp[622244] "expr temp" "maybe param" "maybe type" "temp"
    (622247 'move' call_tmp[622244](71835 call _cast call_tmp[622239] 0))
    unknown call_tmp[622249] "maybe param" "maybe type" "temp"
    (622252 'move' call_tmp[622249](71838 call _build_tuple lcm[71819] call_tmp[622244]))
    unknown call_tmp[622256] "expr temp" "maybe param" "maybe type" "temp"
    (622259 'move' call_tmp[622256](375095 call strType _mt[243] this[71466]))
    unknown call_tmp[622261] "maybe param" "maybe type" "temp"
    (622264 'move' call_tmp[622261](71830 call * 2 call_tmp[622256]))
    unknown tmp[71840] "dead at end of block" "insert auto destroy" "temp"
    (541120 'init var' tmp[71840] call_tmp[622249] call_tmp[622261])
    (71847 call _check_tuple_var_decl tmp[71840] 2)
    (475588 'end of statement')
    unknown call_tmp[622266] "maybe param" "maybe type" "temp"
    (622269 'move' call_tmp[622266](71841 call tmp[71840] 0))
    unknown g[71823] "dead at end of block" "insert auto destroy"
    (541122 'init var' g[71823] call_tmp[622266])
    unknown call_tmp[622271] "maybe param" "maybe type" "temp"
    (622274 'move' call_tmp[622271](71844 call tmp[71840] 1))
    unknown x[71825] "dead at end of block" "insert auto destroy"
    (541124 'init var' x[71825] call_tmp[622271])
    (71852 'end of statement')
    unknown tmp[420285] "maybe param" "temp"
    unknown call_tmp[622278] "expr temp" "maybe param" "maybe type" "temp"
    (622281 'move' call_tmp[622278](71854 call stride _mt[243] this[71466]))
    unknown call_tmp[622285] "expr temp" "maybe param" "maybe type" "temp"
    (622288 'move' call_tmp[622285](71858 call stride _mt[243] other[71461]))
    (420296 'move' tmp[420285](71861 call != call_tmp[622278] call_tmp[622285]))
    unknown call_tmp[622290] "expr temp" "maybe param" "maybe type" "temp"
    (622293 'move' call_tmp[622290](420298 call _cond_invalid tmp[420285]))
    if call_tmp[622290]
    {
      (420301 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557597] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557598] "maybe param" "temp"
    unknown call_tmp[622295] "expr temp" "maybe param" "maybe type" "temp"
    (622298 'move' call_tmp[622295](420286 call isTrue tmp[420285]))
    (557603 'move' tmp[557598](557601 call _cond_test call_tmp[622295]))
    if tmp[557598]
    {
      unknown tmp[557605] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622302] "expr temp" "maybe param" "maybe type" "temp"
      (622305 'move' call_tmp[622302](71864 call stride _mt[243] this[71466]))
      unknown call_tmp[622309] "expr temp" "maybe param" "maybe type" "temp"
      (622312 'move' call_tmp[622309](71868 call stride _mt[243] other[71461]))
      unknown call_tmp[622314] "expr temp" "maybe param" "maybe type" "temp"
      (622317 'move' call_tmp[622314](71871 call - call_tmp[622309]))
      unknown call_tmp[622319] "expr temp" "maybe param" "maybe type" "temp"
      (622322 'move' call_tmp[622319](71873 call != call_tmp[622302] call_tmp[622314]))
      (557607 'move' tmp[557605](420289 call isTrue call_tmp[622319]))
      (557612 'move' tmp[557597](557609 '_paramFoldLogical' tmp[557598] tmp[557605]))
    }
    {
      (557617 'move' tmp[557597](557614 '_paramFoldLogical' tmp[557598] 0))
    }
    unknown call_tmp[622324] "expr temp" "maybe param" "maybe type" "temp"
    (622327 'move' call_tmp[622324](71955 call _cond_test tmp[557597]))
    if call_tmp[622324]
    {
      unknown call_tmp[622329] "maybe param" "maybe type" "temp"
      (622332 'move' call_tmp[622329](71886 call chpl__extendedEuclid st1[71722] st2[71775]))
      const tmp[71887] "dead at end of block" "const" "insert auto destroy" "temp"
      (541126 'init var' tmp[71887] call_tmp[622329])
      (71894 call _check_tuple_var_decl tmp[71887] 2)
      (475590 'end of statement')
      unknown call_tmp[622334] "maybe param" "maybe type" "temp"
      (622337 'move' call_tmp[622334](71888 call tmp[71887] 0))
      const tg[71877] "dead at end of block" "const" "insert auto destroy"
      (541128 'init var' tg[71877] call_tmp[622334])
      unknown call_tmp[622339] "maybe param" "maybe type" "temp"
      (622342 'move' call_tmp[622339](71891 call tmp[71887] 1))
      const tx[71879] "dead at end of block" "const" "insert auto destroy"
      (541130 'init var' tx[71879] call_tmp[622339])
      (71899 'end of statement')
      unknown tmp[491849] "expr temp" "maybe param" "maybe type" "temp"
      unknown tmp[491890] "maybe param" "temp"
      (491893 'move' tmp[491890](491891 'addr of' g[71823]))
      unknown tmp[491901] "maybe param" "temp"
      (491904 'move' tmp[491901](491902 'addr of' x[71825]))
      unknown call_tmp[622348] "expr temp" "maybe param" "maybe type" "temp"
      (622351 'move' call_tmp[622348](375108 call strType _mt[243] this[71466]))
      unknown call_tmp[622353] "expr temp" "maybe param" "maybe type" "temp"
      (622356 'move' call_tmp[622353](71912 call(71907 call (partial) safeCast _mt[243] tg[71877]) call_tmp[622348]))
      unknown call_tmp[622362] "expr temp" "maybe param" "maybe type" "temp"
      (622365 'move' call_tmp[622362](375112 call strType _mt[243] this[71466]))
      unknown call_tmp[622367] "expr temp" "maybe param" "maybe type" "temp"
      (622370 'move' call_tmp[622367](71919 call(71914 call (partial) safeCast _mt[243] tx[71879]) call_tmp[622362]))
      (491850 'move' tmp[491849](71921 call _build_tuple call_tmp[622353] call_tmp[622367]))
      { scopeless
        unknown call_tmp[622374] "expr temp" "maybe param" "maybe type" "temp"
        (622377 'move' call_tmp[622374](491856 call size _mt[243] tmp[491849]))
        unknown call_tmp[622379] "expr temp" "maybe param" "maybe type" "temp"
        (622382 'move' call_tmp[622379](491859 call != 2 call_tmp[622374]))
        unknown call_tmp[622384] "expr temp" "maybe param" "maybe type" "temp"
        (622387 'move' call_tmp[622384](491882 call _cond_test call_tmp[622379]))
        if call_tmp[622384]
        {
          (491878 call compilerError "tuple size must match the number of grouped variables" 0)
        }
      }
      unknown call_tmp[622389] "expr temp" "maybe param" "maybe type" "temp"
      (622392 'move' call_tmp[622389](491888 call tmp[491849] 0))
      (491895 call = tmp[491890] call_tmp[622389])
      unknown call_tmp[622394] "expr temp" "maybe param" "maybe type" "temp"
      (622397 'move' call_tmp[622394](491899 call tmp[491849] 1))
      (491906 call = tmp[491901] call_tmp[622394])
      (475591 'end of statement' g[71823] x[71825] tg[71877] tx[71879])
      unknown call_tmp[622399] "expr temp" "maybe param" "maybe type" "temp"
      (622402 'move' call_tmp[622399](71929 call / st1[71722] g[71823]))
      unknown call_tmp[622404] "expr temp" "maybe param" "maybe type" "temp"
      (622407 'move' call_tmp[622404](71932 call * call_tmp[622399] st2[71775]))
      (71934 call = lcm[71819] call_tmp[622404])
      (475596 'end of statement' lcm[71819] st1[71722] g[71823] st2[71775])
      unknown tmp[557624] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557625] "maybe param" "temp"
      unknown call_tmp[622411] "expr temp" "maybe param" "maybe type" "temp"
      (622414 'move' call_tmp[622411](71939 call stride _mt[243] this[71466]))
      unknown call_tmp[622416] "expr temp" "maybe param" "maybe type" "temp"
      (622419 'move' call_tmp[622416](71943 call > call_tmp[622411] 0))
      (557630 'move' tmp[557625](557628 call _cond_test call_tmp[622416]))
      if tmp[557625]
      {
        (557635 'move' tmp[557624](557632 '_paramFoldLogical' tmp[557625] lcm[71819]))
      }
      {
        unknown tmp[557637] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557639 'move' tmp[557637](71947 call - lcm[71819]))
        (557644 'move' tmp[557624](557641 '_paramFoldLogical' tmp[557625] tmp[557637]))
      }
      (71952 call = newStride[71807] tmp[557624])
      (475601 'end of statement' newStride[71807] lcm[71819] lcm[71819])
    }
    unknown emptyIntersection[71960] "dead at end of block" "insert auto destroy" "split inited"
    unknown type_tmp[541132] "maybe param" "maybe type" "temp"
    (541138 'move' type_tmp[541132] bool[10])
    (541134 'init var split decl' emptyIntersection[71960] type_tmp[541132])
    (71963 'end of statement')
    function min[71970](arg x[71967]:int(64)[13], arg y[71973]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510470] "RVV" "temp"
      unknown call_tmp[622421] "expr temp" "maybe param" "maybe type" "temp"
      (622424 'move' call_tmp[622421](71980 call max int(64)[13]))
      unknown call_tmp[622426] "expr temp" "maybe param" "maybe type" "temp"
      (622429 'move' call_tmp[622426](71981 call > y[71973] call_tmp[622421]))
      unknown call_tmp[622431] "expr temp" "maybe param" "maybe type" "temp"
      (622434 'move' call_tmp[622431](71987 call _cond_test call_tmp[622426]))
      if call_tmp[622431]
      {
        (510475 'move' ret[510470](510474 'deref' x[71967]))
        gotoReturn _end_min[510468] _end_min[510468]
      }
      unknown call_tmp[622436] "expr temp" "maybe param" "maybe type" "temp"
      (622439 'move' call_tmp[622436](71997 call _cast int(64)[13] y[71973]))
      unknown call_tmp[622441] "expr temp" "maybe param" "maybe type" "temp"
      (622444 'move' call_tmp[622441](71999 call min x[71967] call_tmp[622436]))
      (510480 'move' ret[510470](510479 'deref' call_tmp[622441]))
      label _end_min[510468]
      (510472 return ret[510470])
    }
    function min[72010](arg x[72007]:uint(64)[115], arg y[72013]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510484] "RVV" "temp"
      unknown call_tmp[622446] "expr temp" "maybe param" "maybe type" "temp"
      (622449 'move' call_tmp[622446](72018 call < y[72013] 0))
      unknown call_tmp[622451] "expr temp" "maybe param" "maybe type" "temp"
      (622454 'move' call_tmp[622451](72029 call _cond_test call_tmp[622446]))
      if call_tmp[622451]
      {
        (72022 call = emptyIntersection[71960] 1)
        (475607 'end of statement')
        (510489 'move' ret[510484](510488 'deref' x[72007]))
        gotoReturn _end_min[510482] _end_min[510482]
      }
      unknown call_tmp[622456] "expr temp" "maybe param" "maybe type" "temp"
      (622459 'move' call_tmp[622456](72039 call _cast uint(64)[115] y[72013]))
      unknown call_tmp[622461] "expr temp" "maybe param" "maybe type" "temp"
      (622464 'move' call_tmp[622461](72041 call min x[72007] call_tmp[622456]))
      (510494 'move' ret[510484](510493 'deref' call_tmp[622461]))
      label _end_min[510482]
      (510486 return ret[510484])
    }
    function max[72052](arg x[72049]:int(64)[13], arg y[72055]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510498] "RVV" "temp"
      unknown call_tmp[622466] "expr temp" "maybe param" "maybe type" "temp"
      (622469 'move' call_tmp[622466](72062 call max int(64)[13]))
      unknown call_tmp[622471] "expr temp" "maybe param" "maybe type" "temp"
      (622474 'move' call_tmp[622471](72063 call > y[72055] call_tmp[622466]))
      unknown call_tmp[622476] "expr temp" "maybe param" "maybe type" "temp"
      (622479 'move' call_tmp[622476](72074 call _cond_test call_tmp[622471]))
      if call_tmp[622476]
      {
        (72067 call = emptyIntersection[71960] 1)
        (475610 'end of statement')
        (510503 'move' ret[510498](510502 'deref' x[72049]))
        gotoReturn _end_max[510496] _end_max[510496]
      }
      unknown call_tmp[622481] "expr temp" "maybe param" "maybe type" "temp"
      (622484 'move' call_tmp[622481](72084 call _cast int(64)[13] y[72055]))
      unknown call_tmp[622486] "expr temp" "maybe param" "maybe type" "temp"
      (622489 'move' call_tmp[622486](72086 call max x[72049] call_tmp[622481]))
      (510508 'move' ret[510498](510507 'deref' call_tmp[622486]))
      label _end_max[510496]
      (510500 return ret[510498])
    }
    function max[72097](arg x[72094]:uint(64)[115], arg y[72100]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510512] "RVV" "temp"
      unknown call_tmp[622491] "expr temp" "maybe param" "maybe type" "temp"
      (622494 'move' call_tmp[622491](72105 call < y[72100] 0))
      unknown call_tmp[622496] "expr temp" "maybe param" "maybe type" "temp"
      (622499 'move' call_tmp[622496](72111 call _cond_test call_tmp[622491]))
      if call_tmp[622496]
      {
        (510517 'move' ret[510512](510516 'deref' x[72094]))
        gotoReturn _end_max[510510] _end_max[510510]
      }
      unknown call_tmp[622501] "expr temp" "maybe param" "maybe type" "temp"
      (622504 'move' call_tmp[622501](72121 call _cast uint(64)[115] y[72100]))
      unknown call_tmp[622506] "expr temp" "maybe param" "maybe type" "temp"
      (622509 'move' call_tmp[622506](72123 call max x[72094] call_tmp[622501]))
      (510522 'move' ret[510512](510521 'deref' call_tmp[622506]))
      label _end_max[510510]
      (510514 return ret[510512])
    }
    (541140 'init var split init' emptyIntersection[71960] 0 type_tmp[541132])
    (475615 'end of statement' emptyIntersection[71960])
    unknown call_tmp[622513] "expr temp" "maybe param" "maybe type" "temp"
    (622516 'move' call_tmp[622513](375144 call intIdxType _mt[243] this[71466]))
    unknown call_tmp[622518] "expr temp" "maybe param" "maybe type" "temp"
    (622521 'move' call_tmp[622518](72137 call max lo1[71693] lo2[71743]))
    unknown call_tmp[622523] "maybe param" "maybe type" "temp"
    (622526 'move' call_tmp[622523](72139 call _cast call_tmp[622513] call_tmp[622518]))
    unknown newlo[72141] "dead at end of block" "insert auto destroy"
    (541143 'init var' newlo[72141] call_tmp[622523])
    (72144 'end of statement')
    unknown call_tmp[622530] "expr temp" "maybe param" "maybe type" "temp"
    (622533 'move' call_tmp[622530](375150 call intIdxType _mt[243] this[71466]))
    unknown call_tmp[622535] "expr temp" "maybe param" "maybe type" "temp"
    (622538 'move' call_tmp[622535](72149 call min hi1[71711] hi2[71764]))
    unknown call_tmp[622540] "maybe param" "maybe type" "temp"
    (622543 'move' call_tmp[622540](72151 call _cast call_tmp[622530] call_tmp[622535]))
    unknown newhi[72153] "dead at end of block" "insert auto destroy"
    (541145 'init var' newhi[72153] call_tmp[622540])
    (72156 'end of statement')
    unknown call_tmp[622545] "expr temp" "maybe param" "maybe type" "temp"
    (622548 'move' call_tmp[622545](72169 call _cond_test emptyIntersection[71960]))
    if call_tmp[622545]
    {
      (72160 call = newlo[72141] 1)
      (475621 'end of statement' newlo[72141])
      (72166 call = newhi[72153] 0)
      (475623 'end of statement' newhi[72153])
    }
    unknown tmp[420306] "maybe param" "temp"
    (420317 'move' tmp[420306](72206 call ! ambig[71472]))
    unknown call_tmp[622550] "expr temp" "maybe param" "maybe type" "temp"
    (622553 'move' call_tmp[622550](420319 call _cond_invalid tmp[420306]))
    if call_tmp[622550]
    {
      (420322 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown result[72221] "dead at end of block" "insert auto destroy"
    unknown tmp[557678] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557679] "maybe param" "temp"
    unknown call_tmp[622555] "expr temp" "maybe param" "maybe type" "temp"
    (622558 'move' call_tmp[622555](420307 call isTrue tmp[420306]))
    (557684 'move' tmp[557679](557682 call _cond_test call_tmp[622555]))
    if tmp[557679]
    {
      unknown tmp[420327] "maybe param" "temp"
      (420338 'move' tmp[420327](72209 call aligned _mt[243] this[71466]))
      unknown call_tmp[622562] "expr temp" "maybe param" "maybe type" "temp"
      (622565 'move' call_tmp[622562](420340 call _cond_invalid tmp[420327]))
      if call_tmp[622562]
      {
        (420343 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[557651] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557652] "maybe param" "temp"
      unknown call_tmp[622567] "expr temp" "maybe param" "maybe type" "temp"
      (622570 'move' call_tmp[622567](420328 call isTrue tmp[420327]))
      (557657 'move' tmp[557652](557655 call _cond_test call_tmp[622567]))
      if tmp[557652]
      {
        (557662 'move' tmp[557651](557659 '_paramFoldLogical' tmp[557652] 1))
      }
      {
        unknown tmp[557664] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622574] "expr temp" "maybe param" "maybe type" "temp"
        (622577 'move' call_tmp[622574](72213 call aligned _mt[243] other[71461]))
        (557666 'move' tmp[557664](420332 call isTrue call_tmp[622574]))
        (557671 'move' tmp[557651](557668 '_paramFoldLogical' tmp[557652] tmp[557664]))
      }
      unknown tmp[557686] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557688 'move' tmp[557686](420310 call isTrue tmp[557651]))
      (557693 'move' tmp[557678](557690 '_paramFoldLogical' tmp[557679] tmp[557686]))
    }
    {
      (557698 'move' tmp[557678](557695 '_paramFoldLogical' tmp[557679] 0))
    }
    unknown call_tmp[622581] "expr temp" "maybe param" "maybe type" "temp"
    (622584 'move' call_tmp[622581](375159 call idxType _mt[243] this[71466]))
    unknown call_tmp[622586] "expr temp" "maybe param" "maybe type" "temp"
    (622589 'move' call_tmp[622586](72181 call computeBoundedType this[71466] other[71461]))
    unknown call_tmp[622593] "expr temp" "maybe param" "maybe type" "temp"
    (622596 'move' call_tmp[622593](72183 call stridable _mt[243] this[71466]))
    unknown call_tmp[622600] "expr temp" "maybe param" "maybe type" "temp"
    (622603 'move' call_tmp[622600](72187 call stridable _mt[243] other[71461]))
    unknown call_tmp[622605] "expr temp" "maybe param" "maybe type" "temp"
    (622608 'move' call_tmp[622605](72190 call | call_tmp[622593] call_tmp[622600]))
    unknown call_tmp[622612] "expr temp" "maybe param" "maybe type" "temp"
    (622615 'move' call_tmp[622612](72195 call(375165 call (partial) chpl_intToIdx _mt[243] this[71466]) newlo[72141]))
    unknown call_tmp[622619] "expr temp" "maybe param" "maybe type" "temp"
    (622622 'move' call_tmp[622619](72199 call(375170 call (partial) chpl_intToIdx _mt[243] this[71466]) newhi[72153]))
    unknown call_tmp[622626] "expr temp" "maybe param" "maybe type" "temp"
    (622629 'move' call_tmp[622626](72204 call(375176 call (partial) chpl_intToIdx _mt[243] this[71466]) 0))
    unknown call_tmp[622631] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (622634 'move' call_tmp[622631](747790 'new' range[64316](?) call_tmp[622581] call_tmp[622586] call_tmp[622605] call_tmp[622612] call_tmp[622619] newStride[71807] call_tmp[622626] tmp[557678]))
    (541147 'init var' result[72221] call_tmp[622631])
    (72224 'end of statement' lo1[71693] lo2[71743] hi1[71711] hi2[71764] newlo[72141] newhi[72153] newStride[71807])
    unknown call_tmp[622638] "expr temp" "maybe param" "maybe type" "temp"
    (622641 'move' call_tmp[622638](72226 call stridable _mt[243] result[72221]))
    unknown call_tmp[622643] "expr temp" "maybe param" "maybe type" "temp"
    (622646 'move' call_tmp[622643](72430 call _cond_test call_tmp[622638]))
    if call_tmp[622643]
    {
      unknown call_tmp[622650] "expr temp" "maybe param" "maybe type" "temp"
      (622653 'move' call_tmp[622650](72231 call alignment _mt[243] this[71466]))
      unknown call_tmp[622655] "expr temp" "maybe param" "maybe type" "temp"
      (622658 'move' call_tmp[622655](72235 call chpl__idxToInt call_tmp[622650]))
      unknown call_tmp[622662] "expr temp" "maybe param" "maybe type" "temp"
      (622665 'move' call_tmp[622662](375182 call intIdxType _mt[243] this[71466]))
      unknown call_tmp[622667] "expr temp" "maybe param" "maybe type" "temp"
      (622670 'move' call_tmp[622667](72238 call _cast call_tmp[622662] st1[71722]))
      unknown call_tmp[622672] "expr temp" "maybe param" "maybe type" "temp"
      (622675 'move' call_tmp[622672](72240 call % call_tmp[622655] call_tmp[622667]))
      unknown call_tmp[622677] "maybe param" "maybe type" "temp"
      (622680 'move' call_tmp[622677](72243 call _cast int(64)[13] call_tmp[622672]))
      unknown al1[72245] "dead at end of block" "insert auto destroy"
      (541149 'init var' al1[72245] call_tmp[622677])
      (72248 'end of statement')
      unknown call_tmp[622684] "expr temp" "maybe param" "maybe type" "temp"
      (622687 'move' call_tmp[622684](72252 call alignment _mt[243] other[71461]))
      unknown call_tmp[622689] "expr temp" "maybe param" "maybe type" "temp"
      (622692 'move' call_tmp[622689](72256 call chpl__idxToInt call_tmp[622684]))
      unknown call_tmp[622696] "expr temp" "maybe param" "maybe type" "temp"
      (622699 'move' call_tmp[622696](72259 call intIdxType _mt[243] other[71461]))
      unknown call_tmp[622701] "expr temp" "maybe param" "maybe type" "temp"
      (622704 'move' call_tmp[622701](72262 call _cast call_tmp[622696] st2[71775]))
      unknown call_tmp[622706] "expr temp" "maybe param" "maybe type" "temp"
      (622709 'move' call_tmp[622706](72264 call % call_tmp[622689] call_tmp[622701]))
      unknown call_tmp[622711] "maybe param" "maybe type" "temp"
      (622714 'move' call_tmp[622711](72267 call _cast int(64)[13] call_tmp[622706]))
      unknown al2[72269] "dead at end of block" "insert auto destroy"
      (541151 'init var' al2[72269] call_tmp[622711])
      (72272 'end of statement' st1[71722] st2[71775])
      unknown call_tmp[622716] "expr temp" "maybe param" "maybe type" "temp"
      (622719 'move' call_tmp[622716](72275 call - al2[72269] al1[72245]))
      unknown call_tmp[622721] "expr temp" "maybe param" "maybe type" "temp"
      (622724 'move' call_tmp[622721](72278 call % call_tmp[622716] g[71823]))
      unknown call_tmp[622726] "expr temp" "maybe param" "maybe type" "temp"
      (622729 'move' call_tmp[622726](72281 call != call_tmp[622721] 0))
      unknown call_tmp[622731] "expr temp" "maybe param" "maybe type" "temp"
      (622734 'move' call_tmp[622731](72426 call _cond_test call_tmp[622726]))
      if call_tmp[622731]
      {
        unknown tmp[420348] "maybe param" "temp"
        (420359 'move' tmp[420348] 1)
        unknown call_tmp[622736] "expr temp" "maybe param" "maybe type" "temp"
        (622739 'move' call_tmp[622736](420361 call _cond_invalid tmp[420348]))
        if call_tmp[622736]
        {
          (420364 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557705] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557706] "maybe param" "temp"
        unknown call_tmp[622741] "expr temp" "maybe param" "maybe type" "temp"
        (622744 'move' call_tmp[622741](420349 call isTrue tmp[420348]))
        (557711 'move' tmp[557706](557709 call _cond_test call_tmp[622741]))
        if tmp[557706]
        {
          unknown tmp[557713] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622746] "expr temp" "maybe param" "maybe type" "temp"
          (622749 'move' call_tmp[622746](72287 call isBoundedRange result[72221]))
          unknown call_tmp[622751] "expr temp" "maybe param" "maybe type" "temp"
          (622754 'move' call_tmp[622751](72288 call ! call_tmp[622746]))
          (557715 'move' tmp[557713](420352 call isTrue call_tmp[622751]))
          (557720 'move' tmp[557705](557717 '_paramFoldLogical' tmp[557706] tmp[557713]))
        }
        {
          (557725 'move' tmp[557705](557722 '_paramFoldLogical' tmp[557706] 0))
        }
        unknown call_tmp[622756] "expr temp" "maybe param" "maybe type" "temp"
        (622759 'move' call_tmp[622756](72318 call _cond_test tmp[557705]))
        if call_tmp[622756]
        {
          (72316 call boundsCheckHalt module=[255] HaltWrappers[209998] "could not represent range slice - it needs to be empty, but the slice type is not bounded")
          (357871 'referenced modules list' HaltWrappers[209998])
        }
        unknown call_tmp[622763] "expr temp" "maybe param" "maybe type" "temp"
        (622766 'move' call_tmp[622763](72325 call _low _mt[243] result[72221]))
        unknown call_tmp[622770] "expr temp" "maybe param" "maybe type" "temp"
        (622773 'move' call_tmp[622770](375192 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622775] "expr temp" "maybe param" "maybe type" "temp"
        (622778 'move' call_tmp[622775](72330 call _cast call_tmp[622770] 1))
        (72332 call = call_tmp[622763] call_tmp[622775])
        (475633 'end of statement' result[72221])
        unknown call_tmp[622782] "expr temp" "maybe param" "maybe type" "temp"
        (622785 'move' call_tmp[622782](72336 call _high _mt[243] result[72221]))
        unknown call_tmp[622789] "expr temp" "maybe param" "maybe type" "temp"
        (622792 'move' call_tmp[622789](375196 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622794] "expr temp" "maybe param" "maybe type" "temp"
        (622797 'move' call_tmp[622794](72341 call _cast call_tmp[622789] 0))
        (72343 call = call_tmp[622782] call_tmp[622794])
        (475635 'end of statement' result[72221])
        unknown tmp[557732] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557733] "maybe param" "temp"
        unknown call_tmp[622801] "expr temp" "maybe param" "maybe type" "temp"
        (622804 'move' call_tmp[622801](72351 call stride _mt[243] this[71466]))
        unknown call_tmp[622806] "expr temp" "maybe param" "maybe type" "temp"
        (622809 'move' call_tmp[622806](72355 call > call_tmp[622801] 0))
        (557738 'move' tmp[557733](557736 call _cond_test call_tmp[622806]))
        if tmp[557733]
        {
          unknown tmp[557740] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622813] "expr temp" "maybe param" "maybe type" "temp"
          (622816 'move' call_tmp[622813](375200 call intIdxType _mt[243] this[71466]))
          (557742 'move' tmp[557740](72359 call _cast call_tmp[622813] 1))
          (557747 'move' tmp[557732](557744 '_paramFoldLogical' tmp[557733] tmp[557740]))
        }
        {
          unknown tmp[557749] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622820] "expr temp" "maybe param" "maybe type" "temp"
          (622823 'move' call_tmp[622820](375204 call intIdxType _mt[243] this[71466]))
          (557751 'move' tmp[557749](72363 call _cast call_tmp[622820] 0))
          (557756 'move' tmp[557732](557753 '_paramFoldLogical' tmp[557733] tmp[557749]))
        }
        unknown call_tmp[622827] "expr temp" "maybe param" "maybe type" "temp"
        (622830 'move' call_tmp[622827](72347 call _alignment _mt[243] result[72221]))
        (72368 call = call_tmp[622827] tmp[557732])
        (475637 'end of statement' result[72221])
      }
      {
        unknown call_tmp[622832] "expr temp" "maybe param" "maybe type" "temp"
        (622835 'move' call_tmp[622832](72373 call - al2[72269] al1[72245]))
        unknown call_tmp[622837] "maybe param" "maybe type" "temp"
        (622840 'move' call_tmp[622837](72376 call * call_tmp[622832] x[71825]))
        unknown offset[72378] "dead at end of block" "insert auto destroy"
        (541153 'init var' offset[72378] call_tmp[622837])
        (72381 'end of statement' al2[72269] al1[72245] x[71825])
        unknown call_tmp[622842] "expr temp" "maybe param" "maybe type" "temp"
        (622845 'move' call_tmp[622842](72385 call < offset[72378] 0))
        unknown call_tmp[622847] "expr temp" "maybe param" "maybe type" "temp"
        (622850 'move' call_tmp[622847](72392 call _cond_test call_tmp[622842]))
        if call_tmp[622847]
        {
          (72389 call += offset[72378] lcm[71819])
          (475642 'end of statement' offset[72378] lcm[71819])
        }
        unknown call_tmp[622854] "expr temp" "maybe param" "maybe type" "temp"
        (622857 'move' call_tmp[622854](72398 call _alignment _mt[243] result[72221]))
        unknown call_tmp[622861] "expr temp" "maybe param" "maybe type" "temp"
        (622864 'move' call_tmp[622861](375215 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622866] "expr temp" "maybe param" "maybe type" "temp"
        (622869 'move' call_tmp[622866](72403 call _cast call_tmp[622861] al1[72245]))
        unknown call_tmp[622873] "expr temp" "maybe param" "maybe type" "temp"
        (622876 'move' call_tmp[622873](375220 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622878] "expr temp" "maybe param" "maybe type" "temp"
        (622881 'move' call_tmp[622878](72407 call _cast call_tmp[622873] offset[72378]))
        unknown call_tmp[622885] "expr temp" "maybe param" "maybe type" "temp"
        (622888 'move' call_tmp[622885](375225 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622890] "expr temp" "maybe param" "maybe type" "temp"
        (622893 'move' call_tmp[622890](72411 call _cast call_tmp[622885] st1[71722]))
        unknown call_tmp[622895] "expr temp" "maybe param" "maybe type" "temp"
        (622898 'move' call_tmp[622895](72413 call * call_tmp[622878] call_tmp[622890]))
        unknown call_tmp[622902] "expr temp" "maybe param" "maybe type" "temp"
        (622905 'move' call_tmp[622902](375230 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622907] "expr temp" "maybe param" "maybe type" "temp"
        (622910 'move' call_tmp[622907](72417 call _cast call_tmp[622902] g[71823]))
        unknown call_tmp[622912] "expr temp" "maybe param" "maybe type" "temp"
        (622915 'move' call_tmp[622912](72419 call / call_tmp[622895] call_tmp[622907]))
        unknown call_tmp[622917] "expr temp" "maybe param" "maybe type" "temp"
        (622920 'move' call_tmp[622917](72421 call + call_tmp[622866] call_tmp[622912]))
        (72423 call = call_tmp[622854] call_tmp[622917])
        (475645 'end of statement' result[72221] al1[72245] offset[72378] st1[71722] g[71823])
      }
    }
    (510531 'move' ret[510526](510530 'deref' result[72221]))
    gotoReturn _end_this[510524] _end_this[510524]
    (475651 'end of statement' result[72221])
    label _end_this[510524]
    (510528 return ret[510526])
  }
  function chpl_count_help[72448](arg r[72445]:range[64316](?), arg i[72450]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (72483 call compilerError "count operator is not defined for unbounded ranges")
    (510535 return _void[55])
  }
  where {
    unknown call_tmp[622924] "expr temp" "maybe param" "maybe type" "temp"
    (622927 'move' call_tmp[622924](72453 call boundedType _mt[243] r[72445]))
    (72460 call == call_tmp[622924] boundedNone[64211])
  }
  function chpl_count_help[72493](arg r[72491]:_any[178](?), arg count[72496]:integral[199](?)) : _unknown[51]
  {
    unknown ret[510576] "RVV" "temp"
    unknown tmp[420369] "maybe param" "temp"
    (420380 'move' tmp[420369] 1)
    unknown call_tmp[622929] "expr temp" "maybe param" "maybe type" "temp"
    (622932 'move' call_tmp[622929](420382 call _cond_invalid tmp[420369]))
    if call_tmp[622929]
    {
      (420385 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557763] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557764] "maybe param" "temp"
    unknown call_tmp[622934] "expr temp" "maybe param" "maybe type" "temp"
    (622937 'move' call_tmp[622934](420370 call isTrue tmp[420369]))
    (557769 'move' tmp[557764](557767 call _cond_test call_tmp[622934]))
    if tmp[557764]
    {
      unknown tmp[557771] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622941] "expr temp" "maybe param" "maybe type" "temp"
      (622944 'move' call_tmp[622941](72505 call(72501 call (partial) isAmbiguous _mt[243] r[72491])))
      (557773 'move' tmp[557771](420373 call isTrue call_tmp[622941]))
      (557778 'move' tmp[557763](557775 '_paramFoldLogical' tmp[557764] tmp[557771]))
    }
    {
      (557783 'move' tmp[557763](557780 '_paramFoldLogical' tmp[557764] 0))
    }
    unknown call_tmp[622946] "expr temp" "maybe param" "maybe type" "temp"
    (622949 'move' call_tmp[622946](72531 call _cond_test tmp[557763]))
    if call_tmp[622946]
    {
      (72529 call boundsCheckHalt "count -- Cannot count off elements from a range which is ambiguously aligned.")
    }
    unknown resultType[72541] "dead at end of block" "insert auto destroy" "type variable"(72538 call intIdxType _mt[243] r[72491])
    (541159 'move' resultType[72541](541156 call intIdxType _mt[243] r[72491]))
    unknown strType[72548] "dead at end of block" "insert auto destroy" "type variable"(72547 call chpl__rangeStrideType resultType[72541])
    (541164 'move' strType[72548](541162 call chpl__rangeStrideType resultType[72541]))
    function absSameType[72555](arg str[72553]:_any[178](?)) : _unknown[51]
    {
      unknown ret[510539] "RVV" "temp"
      unknown call_tmp[622957] "expr temp" "maybe param" "maybe type" "temp"
      (622960 'move' call_tmp[622957](72558 call stride _mt[243] r[72491]))
      unknown call_tmp[622962] "expr temp" "maybe param" "maybe type" "temp"
      (622965 'move' call_tmp[622962](72562 call < call_tmp[622957] 0))
      unknown call_tmp[622967] "expr temp" "maybe param" "maybe type" "temp"
      (622970 'move' call_tmp[622967](72586 call _cond_test call_tmp[622962]))
      if call_tmp[622967]
      {
        unknown call_tmp[622974] "expr temp" "maybe param" "maybe type" "temp"
        (622977 'move' call_tmp[622974](72565 call stride _mt[243] r[72491]))
        unknown call_tmp[622979] "expr temp" "maybe param" "maybe type" "temp"
        (622982 'move' call_tmp[622979](72568 call - call_tmp[622974]))
        unknown call_tmp[622984] "expr temp" "maybe param" "maybe type" "temp"
        (622987 'move' call_tmp[622984](72571 call _cast resultType[72541] call_tmp[622979]))
        (510544 'move' ret[510539](510543 'deref' call_tmp[622984]))
        gotoReturn _end_absSameType[510537] _end_absSameType[510537]
      }
      {
        unknown call_tmp[622991] "expr temp" "maybe param" "maybe type" "temp"
        (622994 'move' call_tmp[622991](72577 call stride _mt[243] r[72491]))
        unknown call_tmp[622996] "expr temp" "maybe param" "maybe type" "temp"
        (622999 'move' call_tmp[622996](72581 call _cast resultType[72541] call_tmp[622991]))
        (510549 'move' ret[510539](510548 'deref' call_tmp[622996]))
        gotoReturn _end_absSameType[510537] _end_absSameType[510537]
      }
      label _end_absSameType[510537]
      (510541 return ret[510539])
    }
    unknown call_tmp[623001] "expr temp" "maybe param" "maybe type" "temp"
    (623004 'move' call_tmp[623001](72595 call == count[72496] 0))
    unknown call_tmp[623006] "expr temp" "maybe param" "maybe type" "temp"
    (623009 'move' call_tmp[623006](72795 call _cond_test call_tmp[623001]))
    if call_tmp[623006]
    {
      unknown call_tmp[623013] "expr temp" "maybe param" "maybe type" "temp"
      (623016 'move' call_tmp[623013](72602 call(72598 call (partial) hasLowBound _mt[243] r[72491])))
      unknown call_tmp[623018] "expr temp" "maybe param" "maybe type" "temp"
      (623021 'move' call_tmp[623018](72789 call _cond_test call_tmp[623013]))
      if call_tmp[623018]
      {
        unknown call_tmp[623025] "expr temp" "maybe param" "maybe type" "temp"
        (623028 'move' call_tmp[623025](72606 call idxType _mt[243] r[72491]))
        unknown call_tmp[623032] "expr temp" "maybe param" "maybe type" "temp"
        (623035 'move' call_tmp[623032](72617 call stridable _mt[243] r[72491]))
        unknown call_tmp[623039] "expr temp" "maybe param" "maybe type" "temp"
        (623042 'move' call_tmp[623039](72623 call idxType _mt[243] r[72491]))
        unknown call_tmp[623046] "expr temp" "maybe param" "maybe type" "temp"
        (623049 'move' call_tmp[623046](72628 call _low _mt[243] r[72491]))
        unknown call_tmp[623051] "expr temp" "maybe param" "maybe type" "temp"
        (623054 'move' call_tmp[623051](72631 call chpl__intToIdx call_tmp[623039] call_tmp[623046]))
        unknown call_tmp[623058] "expr temp" "maybe param" "maybe type" "temp"
        (623061 'move' call_tmp[623058](72635 call idxType _mt[243] r[72491]))
        unknown call_tmp[623065] "expr temp" "maybe param" "maybe type" "temp"
        (623068 'move' call_tmp[623065](72640 call _low _mt[243] r[72491]))
        unknown call_tmp[623072] "expr temp" "maybe param" "maybe type" "temp"
        (623075 'move' call_tmp[623072](72645 call stride _mt[243] r[72491]))
        unknown call_tmp[623077] "expr temp" "maybe param" "maybe type" "temp"
        (623080 'move' call_tmp[623077](72649 call absSameType call_tmp[623072]))
        unknown call_tmp[623082] "expr temp" "maybe param" "maybe type" "temp"
        (623085 'move' call_tmp[623082](72650 call - call_tmp[623065] call_tmp[623077]))
        unknown call_tmp[623087] "expr temp" "maybe param" "maybe type" "temp"
        (623090 'move' call_tmp[623087](72652 call chpl__intToIdx call_tmp[623058] call_tmp[623082]))
        unknown call_tmp[623094] "expr temp" "maybe param" "maybe type" "temp"
        (623097 'move' call_tmp[623094](72655 call stride _mt[243] r[72491]))
        unknown call_tmp[623101] "expr temp" "maybe param" "maybe type" "temp"
        (623104 'move' call_tmp[623101](72661 call idxType _mt[243] r[72491]))
        unknown call_tmp[623108] "expr temp" "maybe param" "maybe type" "temp"
        (623111 'move' call_tmp[623108](72666 call _alignment _mt[243] r[72491]))
        unknown call_tmp[623113] "expr temp" "maybe param" "maybe type" "temp"
        (623116 'move' call_tmp[623113](72669 call chpl__intToIdx call_tmp[623101] call_tmp[623108]))
        unknown call_tmp[623120] "expr temp" "maybe param" "maybe type" "temp"
        (623123 'move' call_tmp[623120](72672 call aligned _mt[243] r[72491]))
        unknown call_tmp[623125] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (623128 'move' call_tmp[623125](747791 'new' range[64316](?)(idxType = call_tmp[623025])(boundedType = bounded[64205])(stridable = call_tmp[623032])(_low = call_tmp[623051])(_high = call_tmp[623087])(_stride = call_tmp[623094])(_alignment = call_tmp[623113])(_aligned = call_tmp[623120])))
        (510581 'move' ret[510576](510580 'deref' call_tmp[623125]))
        gotoReturn _end_chpl_count_help[510574] _end_chpl_count_help[510574]
      }
      {
        unknown call_tmp[623132] "expr temp" "maybe param" "maybe type" "temp"
        (623135 'move' call_tmp[623132](72685 call(72681 call (partial) hasHighBound _mt[243] r[72491])))
        unknown call_tmp[623137] "expr temp" "maybe param" "maybe type" "temp"
        (623140 'move' call_tmp[623137](72785 call _cond_test call_tmp[623132]))
        if call_tmp[623137]
        {
          unknown call_tmp[623144] "expr temp" "maybe param" "maybe type" "temp"
          (623147 'move' call_tmp[623144](72689 call idxType _mt[243] r[72491]))
          unknown call_tmp[623151] "expr temp" "maybe param" "maybe type" "temp"
          (623154 'move' call_tmp[623151](72700 call stridable _mt[243] r[72491]))
          unknown call_tmp[623158] "expr temp" "maybe param" "maybe type" "temp"
          (623161 'move' call_tmp[623158](72706 call idxType _mt[243] r[72491]))
          unknown call_tmp[623165] "expr temp" "maybe param" "maybe type" "temp"
          (623168 'move' call_tmp[623165](72711 call _high _mt[243] r[72491]))
          unknown call_tmp[623172] "expr temp" "maybe param" "maybe type" "temp"
          (623175 'move' call_tmp[623172](72716 call stride _mt[243] r[72491]))
          unknown call_tmp[623177] "expr temp" "maybe param" "maybe type" "temp"
          (623180 'move' call_tmp[623177](72720 call absSameType call_tmp[623172]))
          unknown call_tmp[623182] "expr temp" "maybe param" "maybe type" "temp"
          (623185 'move' call_tmp[623182](72721 call + call_tmp[623165] call_tmp[623177]))
          unknown call_tmp[623187] "expr temp" "maybe param" "maybe type" "temp"
          (623190 'move' call_tmp[623187](72723 call chpl__intToIdx call_tmp[623158] call_tmp[623182]))
          unknown call_tmp[623194] "expr temp" "maybe param" "maybe type" "temp"
          (623197 'move' call_tmp[623194](72727 call idxType _mt[243] r[72491]))
          unknown call_tmp[623201] "expr temp" "maybe param" "maybe type" "temp"
          (623204 'move' call_tmp[623201](72732 call _high _mt[243] r[72491]))
          unknown call_tmp[623206] "expr temp" "maybe param" "maybe type" "temp"
          (623209 'move' call_tmp[623206](72735 call chpl__intToIdx call_tmp[623194] call_tmp[623201]))
          unknown call_tmp[623213] "expr temp" "maybe param" "maybe type" "temp"
          (623216 'move' call_tmp[623213](72738 call stride _mt[243] r[72491]))
          unknown call_tmp[623220] "expr temp" "maybe param" "maybe type" "temp"
          (623223 'move' call_tmp[623220](72744 call idxType _mt[243] r[72491]))
          unknown call_tmp[623227] "expr temp" "maybe param" "maybe type" "temp"
          (623230 'move' call_tmp[623227](72749 call _alignment _mt[243] r[72491]))
          unknown call_tmp[623232] "expr temp" "maybe param" "maybe type" "temp"
          (623235 'move' call_tmp[623232](72752 call chpl__intToIdx call_tmp[623220] call_tmp[623227]))
          unknown call_tmp[623239] "expr temp" "maybe param" "maybe type" "temp"
          (623242 'move' call_tmp[623239](72755 call aligned _mt[243] r[72491]))
          unknown call_tmp[623244] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (623247 'move' call_tmp[623244](747792 'new' range[64316](?)(idxType = call_tmp[623144])(boundedType = bounded[64205])(stridable = call_tmp[623151])(_low = call_tmp[623187])(_high = call_tmp[623206])(_stride = call_tmp[623213])(_alignment = call_tmp[623232])(_aligned = call_tmp[623239])))
          (510586 'move' ret[510576](510585 'deref' call_tmp[623244]))
          gotoReturn _end_chpl_count_help[510574] _end_chpl_count_help[510574]
        }
        {
          (72782 call halt "Internal error: Unexpected case in chpl_count_help")
        }
      }
    }
    unknown tmp[420390] "maybe param" "temp"
    unknown tmp[420411] "maybe param" "temp"
    (420422 'move' tmp[420411] 1)
    unknown call_tmp[623249] "expr temp" "maybe param" "maybe type" "temp"
    (623252 'move' call_tmp[623249](420424 call _cond_invalid tmp[420411]))
    if call_tmp[623249]
    {
      (420427 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557790] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557791] "maybe param" "temp"
    unknown call_tmp[623254] "expr temp" "maybe param" "maybe type" "temp"
    (623257 'move' call_tmp[623254](420412 call isTrue tmp[420411]))
    (557796 'move' tmp[557791](557794 call _cond_test call_tmp[623254]))
    if tmp[557791]
    {
      unknown tmp[557798] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623261] "expr temp" "maybe param" "maybe type" "temp"
      (623264 'move' call_tmp[623261](72805 call(72801 call (partial) hasFirst _mt[243] r[72491])))
      unknown call_tmp[623266] "expr temp" "maybe param" "maybe type" "temp"
      (623269 'move' call_tmp[623266](72806 call ! call_tmp[623261]))
      (557800 'move' tmp[557798](420415 call isTrue call_tmp[623266]))
      (557805 'move' tmp[557790](557802 '_paramFoldLogical' tmp[557791] tmp[557798]))
    }
    {
      (557810 'move' tmp[557790](557807 '_paramFoldLogical' tmp[557791] 0))
    }
    (420401 'move' tmp[420390] tmp[557790])
    unknown call_tmp[623271] "expr temp" "maybe param" "maybe type" "temp"
    (623274 'move' call_tmp[623271](420403 call _cond_invalid tmp[420390]))
    if call_tmp[623271]
    {
      (420406 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557817] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557818] "maybe param" "temp"
    unknown call_tmp[623276] "expr temp" "maybe param" "maybe type" "temp"
    (623279 'move' call_tmp[623276](420391 call isTrue tmp[420390]))
    (557823 'move' tmp[557818](557821 call _cond_test call_tmp[623276]))
    if tmp[557818]
    {
      unknown tmp[557825] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623281] "expr temp" "maybe param" "maybe type" "temp"
      (623284 'move' call_tmp[623281](72812 call > count[72496] 0))
      (557827 'move' tmp[557825](420394 call isTrue call_tmp[623281]))
      (557832 'move' tmp[557817](557829 '_paramFoldLogical' tmp[557818] tmp[557825]))
    }
    {
      (557837 'move' tmp[557817](557834 '_paramFoldLogical' tmp[557818] 0))
    }
    unknown call_tmp[623286] "expr temp" "maybe param" "maybe type" "temp"
    (623289 'move' call_tmp[623286](72837 call _cond_test tmp[557817]))
    if call_tmp[623286]
    {
      (72835 call boundsCheckHalt "With a positive count, the range must have a first index.")
    }
    unknown tmp[420432] "maybe param" "temp"
    unknown tmp[420453] "maybe param" "temp"
    (420464 'move' tmp[420453] 1)
    unknown call_tmp[623291] "expr temp" "maybe param" "maybe type" "temp"
    (623294 'move' call_tmp[623291](420466 call _cond_invalid tmp[420453]))
    if call_tmp[623291]
    {
      (420469 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557844] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557845] "maybe param" "temp"
    unknown call_tmp[623296] "expr temp" "maybe param" "maybe type" "temp"
    (623299 'move' call_tmp[623296](420454 call isTrue tmp[420453]))
    (557850 'move' tmp[557845](557848 call _cond_test call_tmp[623296]))
    if tmp[557845]
    {
      unknown tmp[557852] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623303] "expr temp" "maybe param" "maybe type" "temp"
      (623306 'move' call_tmp[623303](72850 call(72846 call (partial) hasLast _mt[243] r[72491])))
      unknown call_tmp[623308] "expr temp" "maybe param" "maybe type" "temp"
      (623311 'move' call_tmp[623308](72851 call ! call_tmp[623303]))
      (557854 'move' tmp[557852](420457 call isTrue call_tmp[623308]))
      (557859 'move' tmp[557844](557856 '_paramFoldLogical' tmp[557845] tmp[557852]))
    }
    {
      (557864 'move' tmp[557844](557861 '_paramFoldLogical' tmp[557845] 0))
    }
    (420443 'move' tmp[420432] tmp[557844])
    unknown call_tmp[623313] "expr temp" "maybe param" "maybe type" "temp"
    (623316 'move' call_tmp[623313](420445 call _cond_invalid tmp[420432]))
    if call_tmp[623313]
    {
      (420448 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557871] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557872] "maybe param" "temp"
    unknown call_tmp[623318] "expr temp" "maybe param" "maybe type" "temp"
    (623321 'move' call_tmp[623318](420433 call isTrue tmp[420432]))
    (557877 'move' tmp[557872](557875 call _cond_test call_tmp[623318]))
    if tmp[557872]
    {
      unknown tmp[557879] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623323] "expr temp" "maybe param" "maybe type" "temp"
      (623326 'move' call_tmp[623323](72857 call < count[72496] 0))
      (557881 'move' tmp[557879](420436 call isTrue call_tmp[623323]))
      (557886 'move' tmp[557871](557883 '_paramFoldLogical' tmp[557872] tmp[557879]))
    }
    {
      (557891 'move' tmp[557871](557888 '_paramFoldLogical' tmp[557872] 0))
    }
    unknown call_tmp[623328] "expr temp" "maybe param" "maybe type" "temp"
    (623331 'move' call_tmp[623328](72882 call _cond_test tmp[557871]))
    if call_tmp[623328]
    {
      (72880 call boundsCheckHalt "With a negative count, the range must have a last index.")
    }
    unknown tmp[420474] "maybe param" "temp"
    unknown tmp[420495] "maybe param" "temp"
    (420506 'move' tmp[420495] 1)
    unknown call_tmp[623333] "expr temp" "maybe param" "maybe type" "temp"
    (623336 'move' call_tmp[623333](420508 call _cond_invalid tmp[420495]))
    if call_tmp[623333]
    {
      (420511 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557898] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557899] "maybe param" "temp"
    unknown call_tmp[623338] "expr temp" "maybe param" "maybe type" "temp"
    (623341 'move' call_tmp[623338](420496 call isTrue tmp[420495]))
    (557904 'move' tmp[557899](557902 call _cond_test call_tmp[623338]))
    if tmp[557899]
    {
      unknown tmp[557906] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623345] "expr temp" "maybe param" "maybe type" "temp"
      (623348 'move' call_tmp[623345](72889 call boundedType _mt[243] r[72491]))
      unknown call_tmp[623350] "expr temp" "maybe param" "maybe type" "temp"
      (623353 'move' call_tmp[623350](72896 call == call_tmp[623345] bounded[64205]))
      (557908 'move' tmp[557906](420499 call isTrue call_tmp[623350]))
      (557913 'move' tmp[557898](557910 '_paramFoldLogical' tmp[557899] tmp[557906]))
    }
    {
      (557918 'move' tmp[557898](557915 '_paramFoldLogical' tmp[557899] 0))
    }
    (420485 'move' tmp[420474] tmp[557898])
    unknown call_tmp[623355] "expr temp" "maybe param" "maybe type" "temp"
    (623358 'move' call_tmp[623355](420487 call _cond_invalid tmp[420474]))
    if call_tmp[623355]
    {
      (420490 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557925] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557926] "maybe param" "temp"
    unknown call_tmp[623360] "expr temp" "maybe param" "maybe type" "temp"
    (623363 'move' call_tmp[623360](420475 call isTrue tmp[420474]))
    (557931 'move' tmp[557926](557929 call _cond_test call_tmp[623360]))
    if tmp[557926]
    {
      unknown tmp[557933] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623365] "expr temp" "maybe param" "maybe type" "temp"
      (623368 'move' call_tmp[623365](72914 call uint(64)[115] 64))
      unknown call_tmp[623370] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (623373 'move' call_tmp[623370](72904 'typeof' count[72496]))
      unknown call_tmp[623375] "expr temp" "maybe param" "maybe type" "temp"
      (623378 'move' call_tmp[623375](72906 call chpl__maxIntTypeSameSign call_tmp[623370]))
      unknown call_tmp[623380] "expr temp" "maybe param" "maybe type" "temp"
      (623383 'move' call_tmp[623380](72907 call _cast call_tmp[623375] count[72496]))
      unknown call_tmp[623385] "expr temp" "maybe param" "maybe type" "temp"
      (623388 'move' call_tmp[623385](72910 call abs call_tmp[623380]))
      unknown call_tmp[623390] "expr temp" "maybe param" "maybe type" "temp"
      (623393 'move' call_tmp[623390](72915 call _cast call_tmp[623365] call_tmp[623385]))
      unknown call_tmp[623395] "expr temp" "maybe param" "maybe type" "temp"
      (623398 'move' call_tmp[623395](72924 call uint(64)[115] 64))
      unknown call_tmp[623402] "expr temp" "maybe param" "maybe type" "temp"
      (623405 'move' call_tmp[623402](72918 call size _mt[243] r[72491]))
      unknown call_tmp[623407] "expr temp" "maybe param" "maybe type" "temp"
      (623410 'move' call_tmp[623407](72925 call _cast call_tmp[623395] call_tmp[623402]))
      unknown call_tmp[623412] "expr temp" "maybe param" "maybe type" "temp"
      (623415 'move' call_tmp[623412](72927 call > call_tmp[623390] call_tmp[623407]))
      (557935 'move' tmp[557933](420478 call isTrue call_tmp[623412]))
      (557940 'move' tmp[557925](557937 '_paramFoldLogical' tmp[557926] tmp[557933]))
    }
    {
      (557945 'move' tmp[557925](557942 '_paramFoldLogical' tmp[557926] 0))
    }
    unknown call_tmp[623417] "expr temp" "maybe param" "maybe type" "temp"
    (623420 'move' call_tmp[623417](72981 call _cond_test tmp[557925]))
    if call_tmp[623417]
    {
      unknown call_tmp[623422] "expr temp" "maybe param" "maybe type" "temp"
      (623425 'move' call_tmp[623422](72952 call abs count[72496]))
      unknown call_tmp[623427] "expr temp" "maybe param" "maybe type" "temp"
      (623430 'move' call_tmp[623427](72954 call _cast string[26] call_tmp[623422]))
      unknown call_tmp[623432] "expr temp" "maybe param" "maybe type" "temp"
      (623435 'move' call_tmp[623432](72956 call + "bounded range is too small to access " call_tmp[623427]))
      unknown call_tmp[623437] "expr temp" "maybe param" "maybe type" "temp"
      (623440 'move' call_tmp[623437](72975 call + call_tmp[623432] " elements"))
      (72978 call boundsCheckHalt call_tmp[623437])
    }
    function chpl__computeTypeForCountMath[72989](arg t1[72987]:_any[178](?), arg t2[72991]:_any[178](?)) type : _unknown[51]
    {
      unknown ret[510555] "RVV" "temp" "type variable"
      unknown call_tmp[623442] "expr temp" "maybe param" "maybe type" "temp"
      (623445 'move' call_tmp[623442](72995 call == t1[72987] t2[72991]))
      unknown call_tmp[623447] "expr temp" "maybe param" "maybe type" "temp"
      (623450 'move' call_tmp[623447](73049 call _cond_test call_tmp[623442]))
      if call_tmp[623447]
      {
        unknown call_tmp[623452] "expr temp" "maybe param" "maybe type" "temp"
        (623455 'move' call_tmp[623452](73000 call chpl__idxTypeToIntIdxType t1[72987]))
        (510560 'move' ret[510555](510559 'deref' call_tmp[623452]))
        gotoReturn _end_chpl__computeTypeForCountMath[510553] _end_chpl__computeTypeForCountMath[510553]
      }
      {
        unknown tmp[420516] "maybe param" "temp"
        unknown call_tmp[623457] "expr temp" "maybe param" "maybe type" "temp"
        (623460 'move' call_tmp[623457](73007 call numBits t1[72987]))
        (420527 'move' tmp[420516](73009 call == call_tmp[623457] 64))
        unknown call_tmp[623462] "expr temp" "maybe param" "maybe type" "temp"
        (623465 'move' call_tmp[623462](420529 call _cond_invalid tmp[420516]))
        if call_tmp[623462]
        {
          (420532 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[557952] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557953] "maybe param" "temp"
        unknown call_tmp[623467] "expr temp" "maybe param" "maybe type" "temp"
        (623470 'move' call_tmp[623467](420517 call isTrue tmp[420516]))
        (557958 'move' tmp[557953](557956 call _cond_test call_tmp[623467]))
        if tmp[557953]
        {
          (557963 'move' tmp[557952](557960 '_paramFoldLogical' tmp[557953] 1))
        }
        {
          unknown tmp[557965] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623472] "expr temp" "maybe param" "maybe type" "temp"
          (623475 'move' call_tmp[623472](73014 call numBits t2[72991]))
          unknown call_tmp[623477] "expr temp" "maybe param" "maybe type" "temp"
          (623480 'move' call_tmp[623477](73016 call == call_tmp[623472] 64))
          (557967 'move' tmp[557965](420521 call isTrue call_tmp[623477]))
          (557972 'move' tmp[557952](557969 '_paramFoldLogical' tmp[557953] tmp[557965]))
        }
        unknown call_tmp[623482] "expr temp" "maybe param" "maybe type" "temp"
        (623485 'move' call_tmp[623482](73045 call _cond_test tmp[557952]))
        if call_tmp[623482]
        {
          unknown call_tmp[623487] "expr temp" "maybe param" "maybe type" "temp"
          (623490 'move' call_tmp[623487](73023 call int(64)[13] 64))
          (510565 'move' ret[510555](510564 'deref' call_tmp[623487]))
          gotoReturn _end_chpl__computeTypeForCountMath[510553] _end_chpl__computeTypeForCountMath[510553]
        }
        {
          unknown x1[73028] "dead at end of block" "insert auto destroy"
          (541166 'default init var' x1[73028] t1[72987])
          (73031 'end of statement')
          unknown x2[73034] "dead at end of block" "insert auto destroy"
          (541168 'default init var' x2[73034] t2[72991])
          (73037 'end of statement')
          { scopeless type
            unknown call_type_tmp[491909] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[623492] "expr temp" "maybe param" "maybe type" "temp"
            (623495 'move' call_tmp[623492](73040 call + x1[73028] x2[73034]))
            (491913 'move' call_type_tmp[491909](73042 'typeof' call_tmp[623492]))
          }
          (510570 'move' ret[510555](510569 'deref' call_type_tmp[491909]))
          gotoReturn _end_chpl__computeTypeForCountMath[510553] _end_chpl__computeTypeForCountMath[510553]
          (475674 'end of statement' x1[73028] x2[73034])
        }
      }
      label _end_chpl__computeTypeForCountMath[510553]
      (510557 return ret[510555])
    }
    unknown call_tmp[623497] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623500 'move' call_tmp[623497](73061 'typeof' count[72496]))
    unknown computeType[73063] "dead at end of block" "insert auto destroy" "type variable"(73062 call chpl__computeTypeForCountMath resultType[72541] call_tmp[623497])
    unknown call_tmp[623502] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623505 'move' call_tmp[623502](541173 'typeof' count[72496]))
    (541175 'move' computeType[73063](541171 call chpl__computeTypeForCountMath resultType[72541] call_tmp[623502]))
    unknown signedComputeType[73070] "dead at end of block" "insert auto destroy" "type variable"(73069 call chpl__signedType computeType[73063])
    (541180 'move' signedComputeType[73070](541178 call chpl__signedType computeType[73063]))
    unknown call_tmp[623507] "expr temp" "maybe param" "maybe type" "temp"
    (623510 'move' call_tmp[623507](73075 call _cast signedComputeType[73070] count[72496]))
    unknown call_tmp[623514] "expr temp" "maybe param" "maybe type" "temp"
    (623517 'move' call_tmp[623514](73078 call stride _mt[243] r[72491]))
    unknown call_tmp[623519] "expr temp" "maybe param" "maybe type" "temp"
    (623522 'move' call_tmp[623519](73082 call _cast signedComputeType[73070] call_tmp[623514]))
    unknown call_tmp[623524] "maybe param" "maybe type" "temp"
    (623527 'move' call_tmp[623524](73084 call * call_tmp[623507] call_tmp[623519]))
    unknown diff[73086] "dead at end of block" "insert auto destroy"
    (541182 'init var' diff[73086] call_tmp[623524])
    (73089 'end of statement')
    unknown lo[73120] "dead at end of block" "insert auto destroy"
    unknown tmp[557979] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557980] "maybe param" "temp"
    unknown call_tmp[623529] "expr temp" "maybe param" "maybe type" "temp"
    (623532 'move' call_tmp[623529](73093 call > diff[73086] 0))
    (557985 'move' tmp[557980](557983 call _cond_test call_tmp[623529]))
    if tmp[557980]
    {
      unknown tmp[557987] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557989 'move' tmp[557987](73096 call _low _mt[243] r[72491]))
      (557994 'move' tmp[557979](557991 '_paramFoldLogical' tmp[557980] tmp[557987]))
    }
    {
      unknown tmp[557996] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623538] "expr temp" "maybe param" "maybe type" "temp"
      (623541 'move' call_tmp[623538](73101 call _high _mt[243] r[72491]))
      unknown call_tmp[623543] "expr temp" "maybe param" "maybe type" "temp"
      (623546 'move' call_tmp[623543](73105 call _cast computeType[73063] call_tmp[623538]))
      unknown call_tmp[623548] "expr temp" "maybe param" "maybe type" "temp"
      (623551 'move' call_tmp[623548](73110 call + diff[73086] 1))
      unknown call_tmp[623553] "expr temp" "maybe param" "maybe type" "temp"
      (623556 'move' call_tmp[623553](73113 call _cast computeType[73063] call_tmp[623548]))
      (557998 'move' tmp[557996](73116 call chpl__add call_tmp[623543] call_tmp[623553] resultType[72541]))
      (558003 'move' tmp[557979](558000 '_paramFoldLogical' tmp[557980] tmp[557996]))
    }
    (541184 'init var' lo[73120] tmp[557979] resultType[72541])
    (73123 'end of statement')
    unknown hi[73154] "dead at end of block" "insert auto destroy"
    unknown tmp[558010] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558011] "maybe param" "temp"
    unknown call_tmp[623558] "expr temp" "maybe param" "maybe type" "temp"
    (623561 'move' call_tmp[623558](73127 call < diff[73086] 0))
    (558016 'move' tmp[558011](558014 call _cond_test call_tmp[623558]))
    if tmp[558011]
    {
      unknown tmp[558018] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558020 'move' tmp[558018](73130 call _high _mt[243] r[72491]))
      (558025 'move' tmp[558010](558022 '_paramFoldLogical' tmp[558011] tmp[558018]))
    }
    {
      unknown tmp[558027] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623567] "expr temp" "maybe param" "maybe type" "temp"
      (623570 'move' call_tmp[623567](73135 call _low _mt[243] r[72491]))
      unknown call_tmp[623572] "expr temp" "maybe param" "maybe type" "temp"
      (623575 'move' call_tmp[623572](73139 call _cast computeType[73063] call_tmp[623567]))
      unknown call_tmp[623577] "expr temp" "maybe param" "maybe type" "temp"
      (623580 'move' call_tmp[623577](73144 call _cast computeType[73063] diff[73086]))
      unknown call_tmp[623582] "expr temp" "maybe param" "maybe type" "temp"
      (623585 'move' call_tmp[623582](73147 call - call_tmp[623577] 1))
      (558029 'move' tmp[558027](73150 call chpl__add call_tmp[623572] call_tmp[623582] resultType[72541]))
      (558034 'move' tmp[558010](558031 '_paramFoldLogical' tmp[558011] tmp[558027]))
    }
    (541186 'init var' hi[73154] tmp[558010] resultType[72541])
    (73157 'end of statement' resultType[72541] resultType[72541] computeType[73063] signedComputeType[73070] signedComputeType[73070] diff[73086] computeType[73063] computeType[73063] diff[73086] resultType[72541] resultType[72541] diff[73086] computeType[73063] computeType[73063] diff[73086] resultType[72541] resultType[72541])
    unknown call_tmp[623589] "expr temp" "maybe param" "maybe type" "temp"
    (623592 'move' call_tmp[623589](73159 call stridable _mt[243] r[72491]))
    unknown call_tmp[623594] "expr temp" "maybe param" "maybe type" "temp"
    (623597 'move' call_tmp[623594](73219 call _cond_test call_tmp[623589]))
    if call_tmp[623594]
    {
      unknown tmp[420537] "maybe param" "temp"
      (420548 'move' tmp[420537](73167 call(73163 call (partial) hasLowBound _mt[243] r[72491])))
      unknown call_tmp[623601] "expr temp" "maybe param" "maybe type" "temp"
      (623604 'move' call_tmp[623601](420550 call _cond_invalid tmp[420537]))
      if call_tmp[623601]
      {
        (420553 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558041] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558042] "maybe param" "temp"
      unknown call_tmp[623606] "expr temp" "maybe param" "maybe type" "temp"
      (623609 'move' call_tmp[623606](420538 call isTrue tmp[420537]))
      (558047 'move' tmp[558042](558045 call _cond_test call_tmp[623606]))
      if tmp[558042]
      {
        unknown tmp[558049] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623613] "expr temp" "maybe param" "maybe type" "temp"
        (623616 'move' call_tmp[623613](73170 call _low _mt[243] r[72491]))
        unknown call_tmp[623618] "expr temp" "maybe param" "maybe type" "temp"
        (623621 'move' call_tmp[623618](73173 call < lo[73120] call_tmp[623613]))
        (558051 'move' tmp[558049](420541 call isTrue call_tmp[623618]))
        (558056 'move' tmp[558041](558053 '_paramFoldLogical' tmp[558042] tmp[558049]))
      }
      {
        (558061 'move' tmp[558041](558058 '_paramFoldLogical' tmp[558042] 0))
      }
      unknown call_tmp[623623] "expr temp" "maybe param" "maybe type" "temp"
      (623626 'move' call_tmp[623623](73185 call _cond_test tmp[558041]))
      if call_tmp[623623]
      {
        unknown call_tmp[623630] "expr temp" "maybe param" "maybe type" "temp"
        (623633 'move' call_tmp[623630](73179 call _low _mt[243] r[72491]))
        (73182 call = lo[73120] call_tmp[623630])
        (475694 'end of statement' lo[73120])
      }
      unknown tmp[420558] "maybe param" "temp"
      (420569 'move' tmp[420558](73196 call(73192 call (partial) hasHighBound _mt[243] r[72491])))
      unknown call_tmp[623637] "expr temp" "maybe param" "maybe type" "temp"
      (623640 'move' call_tmp[623637](420571 call _cond_invalid tmp[420558]))
      if call_tmp[623637]
      {
        (420574 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558068] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558069] "maybe param" "temp"
      unknown call_tmp[623642] "expr temp" "maybe param" "maybe type" "temp"
      (623645 'move' call_tmp[623642](420559 call isTrue tmp[420558]))
      (558074 'move' tmp[558069](558072 call _cond_test call_tmp[623642]))
      if tmp[558069]
      {
        unknown tmp[558076] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623649] "expr temp" "maybe param" "maybe type" "temp"
        (623652 'move' call_tmp[623649](73199 call _high _mt[243] r[72491]))
        unknown call_tmp[623654] "expr temp" "maybe param" "maybe type" "temp"
        (623657 'move' call_tmp[623654](73202 call > hi[73154] call_tmp[623649]))
        (558078 'move' tmp[558076](420562 call isTrue call_tmp[623654]))
        (558083 'move' tmp[558068](558080 '_paramFoldLogical' tmp[558069] tmp[558076]))
      }
      {
        (558088 'move' tmp[558068](558085 '_paramFoldLogical' tmp[558069] 0))
      }
      unknown call_tmp[623659] "expr temp" "maybe param" "maybe type" "temp"
      (623662 'move' call_tmp[623659](73214 call _cond_test tmp[558068]))
      if call_tmp[623659]
      {
        unknown call_tmp[623666] "expr temp" "maybe param" "maybe type" "temp"
        (623669 'move' call_tmp[623666](73208 call _high _mt[243] r[72491]))
        (73211 call = hi[73154] call_tmp[623666])
        (475697 'end of statement' hi[73154])
      }
    }
    unknown tmp[558095] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558096] "maybe param" "temp"
    unknown call_tmp[623673] "expr temp" "maybe param" "maybe type" "temp"
    (623676 'move' call_tmp[623673](73258 call stridable _mt[243] r[72491]))
    (558101 'move' tmp[558096](558099 call _cond_test call_tmp[623673]))
    if tmp[558096]
    {
      unknown tmp[558103] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623680] "expr temp" "maybe param" "maybe type" "temp"
      (623683 'move' call_tmp[623680](73262 call stride _mt[243] r[72491]))
      (558105 'move' tmp[558103](73266 call _cast strType[72548] call_tmp[623680]))
      (558110 'move' tmp[558095](558107 '_paramFoldLogical' tmp[558096] tmp[558103]))
    }
    {
      (558115 'move' tmp[558095](558112 '_paramFoldLogical' tmp[558096] none[57]))
    }
    unknown tmp[558122] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558123] "maybe param" "temp"
    unknown call_tmp[623687] "expr temp" "maybe param" "maybe type" "temp"
    (623690 'move' call_tmp[623687](73274 call stridable _mt[243] r[72491]))
    (558128 'move' tmp[558123](558126 call _cond_test call_tmp[623687]))
    if tmp[558123]
    {
      unknown tmp[558130] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558132 'move' tmp[558130](73278 call alignment _mt[243] r[72491]))
      (558137 'move' tmp[558122](558134 '_paramFoldLogical' tmp[558123] tmp[558130]))
    }
    {
      (558142 'move' tmp[558122](558139 '_paramFoldLogical' tmp[558123] none[57]))
    }
    unknown tmp[558149] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558150] "maybe param" "temp"
    unknown call_tmp[623696] "expr temp" "maybe param" "maybe type" "temp"
    (623699 'move' call_tmp[623696](73287 call stridable _mt[243] r[72491]))
    (558155 'move' tmp[558150](558153 call _cond_test call_tmp[623696]))
    if tmp[558150]
    {
      unknown tmp[558157] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558159 'move' tmp[558157](73291 call aligned _mt[243] r[72491]))
      (558164 'move' tmp[558149](558161 '_paramFoldLogical' tmp[558150] tmp[558157]))
    }
    {
      (558169 'move' tmp[558149](558166 '_paramFoldLogical' tmp[558150] none[57]))
    }
    unknown call_tmp[623705] "expr temp" "maybe param" "maybe type" "temp"
    (623708 'move' call_tmp[623705](73226 call idxType _mt[243] r[72491]))
    unknown call_tmp[623712] "expr temp" "maybe param" "maybe type" "temp"
    (623715 'move' call_tmp[623712](73237 call stridable _mt[243] r[72491]))
    unknown call_tmp[623719] "expr temp" "maybe param" "maybe type" "temp"
    (623722 'move' call_tmp[623719](73247 call(73242 call (partial) chpl_intToIdx _mt[243] r[72491]) lo[73120]))
    unknown call_tmp[623726] "expr temp" "maybe param" "maybe type" "temp"
    (623729 'move' call_tmp[623726](73255 call(73250 call (partial) chpl_intToIdx _mt[243] r[72491]) hi[73154]))
    unknown call_tmp[623731] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (623734 'move' call_tmp[623731](747793 'new' range[64316](?)(idxType = call_tmp[623705])(boundedType = bounded[64205])(stridable = call_tmp[623712])(_low = call_tmp[623719])(_high = call_tmp[623726])(_stride = tmp[558095])(_alignment = tmp[558122])(_aligned = tmp[558149])))
    (510591 'move' ret[510576](510590 'deref' call_tmp[623731]))
    gotoReturn _end_chpl_count_help[510574] _end_chpl_count_help[510574]
    (475699 'end of statement' lo[73120] hi[73154] strType[72548])
    label _end_chpl_count_help[510574]
    (510578 return ret[510576])
  }
  function #[73314](arg r[73311]:range[64316](?), arg count[73320] :
  unknown call_tmp[623736] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510597] "RVV" "temp"
    unknown call_tmp[623741] "expr temp" "maybe param" "maybe type" "temp"
    (623744 'move' call_tmp[623741](73327 call chpl_count_help r[73311] count[73320]))
    (510602 'move' ret[510597](510601 'deref' call_tmp[623741]))
    (510599 return ret[510597])
  }
  function #[73343](arg r[73340]:range[64316](?), arg count[73349] :
  unknown call_tmp[623746] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510606] "RVV" "temp"
    unknown call_tmp[623751] "expr temp" "maybe param" "maybe type" "temp"
    (623754 'move' call_tmp[623751](73356 call chpl_count_help r[73340] count[73349]))
    (510611 'move' ret[510606](510610 'deref' call_tmp[623751]))
    (510608 return ret[510606])
  }
  function #[73372](arg r[73369]:range[64316](?), arg count[73374]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510615] "RVV" "temp"
    unknown call_tmp[623756] "expr temp" "maybe param" "maybe type" "temp"
    (623759 'move' call_tmp[623756](455984 'query' r[73369] 1))
    unknown call_tmp[623761] "expr temp" "maybe param" "maybe type" "temp"
    (623764 'move' call_tmp[623761](73397 call _cast string[26] call_tmp[623756]))
    unknown call_tmp[623766] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623769 'move' call_tmp[623766](73417 'typeof' count[73374]))
    unknown call_tmp[623771] "expr temp" "maybe param" "maybe type" "temp"
    (623774 'move' call_tmp[623771](73419 call _cast string[26] call_tmp[623766]))
    (73421 call compilerError "can't apply '#' to a range with idxType " call_tmp[623761] " using a count of type " call_tmp[623771])
    (475705 'end of statement')
    (510620 'move' ret[510615](510619 'deref' r[73369]))
    (510617 return ret[510615])
  }
  function chpl_checkIfRangeIterWillOverflow[73433](arg idxType[73431]:_any[178](?), arg low[73435]:_any[178](?), arg high[73437]:_any[178](?), arg stride[73439]:_any[178](?), arg first[73442] :
  low[73435] =
  low[73435], arg last[73446] :
  high[73437] =
  high[73437], arg shouldHalt[73450] :
  1 =
  1) : _unknown[51]
  {
    unknown ret[510624] "RVV" "temp"
    unknown call_tmp[623776] "expr temp" "maybe param" "maybe type" "temp"
    (623779 'move' call_tmp[623776](73455 call > low[73435] high[73437]))
    unknown call_tmp[623781] "expr temp" "maybe param" "maybe type" "temp"
    (623784 'move' call_tmp[623781](73461 call _cond_test call_tmp[623776]))
    if call_tmp[623781]
    {
      (510629 'move' ret[510624](510628 'deref' 0))
      gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510622] _end_chpl_checkIfRangeIterWillOverflow[510622]
    }
    unknown willOverFlow[73467] "dead at end of block" "insert auto destroy"
    (541188 'init var' willOverFlow[73467] 0)
    (73470 'end of statement')
    unknown call_tmp[623786] "expr temp" "maybe param" "maybe type" "temp"
    (623789 'move' call_tmp[623786](73474 call isIntType idxType[73431]))
    unknown call_tmp[623791] "expr temp" "maybe param" "maybe type" "temp"
    (623794 'move' call_tmp[623791](73654 call _cond_test call_tmp[623786]))
    if call_tmp[623791]
    {
      unknown tmp[420600] "maybe param" "temp"
      (420611 'move' tmp[420600](73477 call > last[73446] 0))
      unknown call_tmp[623796] "expr temp" "maybe param" "maybe type" "temp"
      (623799 'move' call_tmp[623796](420613 call _cond_invalid tmp[420600]))
      if call_tmp[623796]
      {
        (420616 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558176] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558177] "maybe param" "temp"
      unknown call_tmp[623801] "expr temp" "maybe param" "maybe type" "temp"
      (623804 'move' call_tmp[623801](420601 call isTrue tmp[420600]))
      (558182 'move' tmp[558177](558180 call _cond_test call_tmp[623801]))
      if tmp[558177]
      {
        unknown tmp[558184] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623806] "expr temp" "maybe param" "maybe type" "temp"
        (623809 'move' call_tmp[623806](73481 call > stride[73439] 0))
        (558186 'move' tmp[558184](420604 call isTrue call_tmp[623806]))
        (558191 'move' tmp[558176](558188 '_paramFoldLogical' tmp[558177] tmp[558184]))
      }
      {
        (558196 'move' tmp[558176](558193 '_paramFoldLogical' tmp[558177] 0))
      }
      unknown call_tmp[623811] "expr temp" "maybe param" "maybe type" "temp"
      (623814 'move' call_tmp[623811](73541 call _cond_test tmp[558176]))
      if call_tmp[623811]
      {
        unknown call_tmp[623816] "expr temp" "maybe param" "maybe type" "temp"
        (623819 'move' call_tmp[623816](73489 call max idxType[73431]))
        unknown call_tmp[623821] "expr temp" "maybe param" "maybe type" "temp"
        (623824 'move' call_tmp[623821](73491 call - call_tmp[623816] last[73446]))
        unknown call_tmp[623826] "expr temp" "maybe param" "maybe type" "temp"
        (623829 'move' call_tmp[623826](73493 call > stride[73439] call_tmp[623821]))
        unknown call_tmp[623831] "expr temp" "maybe param" "maybe type" "temp"
        (623834 'move' call_tmp[623831](73501 call _cond_test call_tmp[623826]))
        if call_tmp[623831]
        {
          (73497 call = willOverFlow[73467] 1)
          (475709 'end of statement' willOverFlow[73467])
        }
      }
      {
        unknown tmp[420579] "maybe param" "temp"
        (420590 'move' tmp[420579](73508 call < last[73446] 0))
        unknown call_tmp[623836] "expr temp" "maybe param" "maybe type" "temp"
        (623839 'move' call_tmp[623836](420592 call _cond_invalid tmp[420579]))
        if call_tmp[623836]
        {
          (420595 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[558203] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558204] "maybe param" "temp"
        unknown call_tmp[623841] "expr temp" "maybe param" "maybe type" "temp"
        (623844 'move' call_tmp[623841](420580 call isTrue tmp[420579]))
        (558209 'move' tmp[558204](558207 call _cond_test call_tmp[623841]))
        if tmp[558204]
        {
          unknown tmp[558211] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623846] "expr temp" "maybe param" "maybe type" "temp"
          (623849 'move' call_tmp[623846](73512 call < stride[73439] 0))
          (558213 'move' tmp[558211](420583 call isTrue call_tmp[623846]))
          (558218 'move' tmp[558203](558215 '_paramFoldLogical' tmp[558204] tmp[558211]))
        }
        {
          (558223 'move' tmp[558203](558220 '_paramFoldLogical' tmp[558204] 0))
        }
        unknown call_tmp[623851] "expr temp" "maybe param" "maybe type" "temp"
        (623854 'move' call_tmp[623851](73537 call _cond_test tmp[558203]))
        if call_tmp[623851]
        {
          unknown call_tmp[623856] "expr temp" "maybe param" "maybe type" "temp"
          (623859 'move' call_tmp[623856](73520 call min idxType[73431]))
          unknown call_tmp[623861] "expr temp" "maybe param" "maybe type" "temp"
          (623864 'move' call_tmp[623861](73522 call - call_tmp[623856] last[73446]))
          unknown call_tmp[623866] "expr temp" "maybe param" "maybe type" "temp"
          (623869 'move' call_tmp[623866](73524 call < stride[73439] call_tmp[623861]))
          unknown call_tmp[623871] "expr temp" "maybe param" "maybe type" "temp"
          (623874 'move' call_tmp[623871](73532 call _cond_test call_tmp[623866]))
          if call_tmp[623871]
          {
            (73528 call = willOverFlow[73467] 1)
            (475712 'end of statement' willOverFlow[73467])
          }
        }
      }
    }
    {
      unknown call_tmp[623876] "expr temp" "maybe param" "maybe type" "temp"
      (623879 'move' call_tmp[623876](73550 call isUintType idxType[73431]))
      unknown call_tmp[623881] "expr temp" "maybe param" "maybe type" "temp"
      (623884 'move' call_tmp[623881](73650 call _cond_test call_tmp[623876]))
      if call_tmp[623881]
      {
        unknown call_tmp[623886] "expr temp" "maybe param" "maybe type" "temp"
        (623889 'move' call_tmp[623886](73553 call > stride[73439] 0))
        unknown call_tmp[623891] "expr temp" "maybe param" "maybe type" "temp"
        (623894 'move' call_tmp[623891](73605 call _cond_test call_tmp[623886]))
        if call_tmp[623891]
        {
          unknown call_tmp[623896] "expr temp" "maybe param" "maybe type" "temp"
          (623899 'move' call_tmp[623896](73558 call _cast idxType[73431] stride[73439]))
          unknown call_tmp[623901] "expr temp" "maybe param" "maybe type" "temp"
          (623904 'move' call_tmp[623901](73560 call + last[73446] call_tmp[623896]))
          unknown call_tmp[623906] "expr temp" "maybe param" "maybe type" "temp"
          (623909 'move' call_tmp[623906](73563 call < call_tmp[623901] last[73446]))
          unknown call_tmp[623911] "expr temp" "maybe param" "maybe type" "temp"
          (623914 'move' call_tmp[623911](73571 call _cond_test call_tmp[623906]))
          if call_tmp[623911]
          {
            (73567 call = willOverFlow[73467] 1)
            (475714 'end of statement' willOverFlow[73467])
          }
        }
        {
          unknown call_tmp[623916] "expr temp" "maybe param" "maybe type" "temp"
          (623919 'move' call_tmp[623916](73578 call < stride[73439] 0))
          unknown call_tmp[623921] "expr temp" "maybe param" "maybe type" "temp"
          (623924 'move' call_tmp[623921](73601 call _cond_test call_tmp[623916]))
          if call_tmp[623921]
          {
            unknown call_tmp[623926] "expr temp" "maybe param" "maybe type" "temp"
            (623929 'move' call_tmp[623926](73583 call _cast idxType[73431] stride[73439]))
            unknown call_tmp[623931] "expr temp" "maybe param" "maybe type" "temp"
            (623934 'move' call_tmp[623931](73585 call + last[73446] call_tmp[623926]))
            unknown call_tmp[623936] "expr temp" "maybe param" "maybe type" "temp"
            (623939 'move' call_tmp[623936](73588 call > call_tmp[623931] last[73446]))
            unknown call_tmp[623941] "expr temp" "maybe param" "maybe type" "temp"
            (623944 'move' call_tmp[623941](73596 call _cond_test call_tmp[623936]))
            if call_tmp[623941]
            {
              (73592 call = willOverFlow[73467] 1)
              (475716 'end of statement' willOverFlow[73467])
            }
          }
        }
      }
      {
        (73647 call compilerError "Iterator overflow checking is only supported " "for integral types")
      }
    }
    unknown tmp[420621] "maybe param" "temp"
    (420632 'move' tmp[420621] willOverFlow[73467])
    unknown call_tmp[623946] "expr temp" "maybe param" "maybe type" "temp"
    (623949 'move' call_tmp[623946](420634 call _cond_invalid tmp[420621]))
    if call_tmp[623946]
    {
      (420637 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558230] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558231] "maybe param" "temp"
    unknown call_tmp[623951] "expr temp" "maybe param" "maybe type" "temp"
    (623954 'move' call_tmp[623951](420622 call isTrue tmp[420621]))
    (558236 'move' tmp[558231](558234 call _cond_test call_tmp[623951]))
    if tmp[558231]
    {
      unknown tmp[558238] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558240 'move' tmp[558238](420625 call isTrue shouldHalt[73450]))
      (558245 'move' tmp[558230](558242 '_paramFoldLogical' tmp[558231] tmp[558238]))
    }
    {
      (558250 'move' tmp[558230](558247 '_paramFoldLogical' tmp[558231] 0))
    }
    unknown call_tmp[623956] "expr temp" "maybe param" "maybe type" "temp"
    (623959 'move' call_tmp[623956](73688 call _cond_test tmp[558230]))
    if call_tmp[623956]
    {
      (73685 call boundsCheckHalt module=[255] HaltWrappers[209998] "Iteration over a bounded range may be incorrect due to overflow.")
      (357943 'referenced modules list' HaltWrappers[209998])
    }
    (510634 'move' ret[510624](510633 'deref' willOverFlow[73467]))
    gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510622] _end_chpl_checkIfRangeIterWillOverflow[510622]
    (475721 'end of statement' willOverFlow[73467])
    label _end_chpl_checkIfRangeIterWillOverflow[510622]
    (510626 return ret[510624])
  }
  function range[64316](?).checkIfIterWillOverflow[73704](arg _mt[73709]:_MT[238], arg this[73706]:range[64316](?) :
  range[64316](?), arg shouldHalt[73701] :
  1 =
  1) : _unknown[51] "method" "no doc"
  {
    unknown ret[510640] "RVV" "temp"
    unknown call_tmp[623963] "expr temp" "maybe param" "maybe type" "temp"
    (623966 'move' call_tmp[623963](73713 call intIdxType _mt[243] this[73706]))
    unknown call_tmp[623970] "expr temp" "maybe param" "maybe type" "temp"
    (623973 'move' call_tmp[623970](73718 call _low _mt[243] this[73706]))
    unknown call_tmp[623977] "expr temp" "maybe param" "maybe type" "temp"
    (623980 'move' call_tmp[623977](73722 call _high _mt[243] this[73706]))
    unknown call_tmp[623984] "expr temp" "maybe param" "maybe type" "temp"
    (623987 'move' call_tmp[623984](73726 call stride _mt[243] this[73706]))
    unknown call_tmp[623991] "expr temp" "maybe param" "maybe type" "temp"
    (623994 'move' call_tmp[623991](73730 call firstAsInt _mt[243] this[73706]))
    unknown call_tmp[623998] "expr temp" "maybe param" "maybe type" "temp"
    (624001 'move' call_tmp[623998](73734 call lastAsInt _mt[243] this[73706]))
    unknown call_tmp[624003] "expr temp" "maybe param" "maybe type" "temp"
    (624006 'move' call_tmp[624003](73738 call chpl_checkIfRangeIterWillOverflow call_tmp[623963] call_tmp[623970] call_tmp[623977] call_tmp[623984] call_tmp[623991] call_tmp[623998] shouldHalt[73701]))
    (510645 'move' ret[510640](510644 'deref' call_tmp[624003]))
    (510642 return ret[510640])
  }
  function chpl_direct_range_iter[456195](arg low[456202] :
  (456199 call int(64)[13] 64), arg high[456208] :
  (456206 call int(64)[13] 64), arg stride[456214] :
  (456212 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510649] "RVV" "temp"
    unknown call_tmp[624008] "expr temp" "maybe param" "maybe type" "temp"
    (624011 'move' call_tmp[624008](456221 call chpl_build_bounded_range low[456202] high[456208]))
    unknown call_tmp[624013] "maybe param" "maybe type" "temp"
    (624016 'move' call_tmp[624013](456219 call chpl_by call_tmp[624008] stride[456214]))
    const r[456217] "dead at end of block" "const" "insert auto destroy"
    (541190 'init var' r[456217] call_tmp[624013])
    (456226 'end of statement')
    {
      unknown _indexOfInterest[456228] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456230] "expr temp" "temp"
      (456232 'move' _iterator[456230](456235 call _getIterator r[456217]))
      Defer
      {
        {
          (456239 call _freeIterator _iterator[456230])
        }
      }
      { scopeless type
        (456243 'move' _indexOfInterest[456228](456246 call iteratorIndex _iterator[456230]))
      }
      ForLoop[456248]
      {
        unknown i[456251] "index var" "insert auto destroy"
        (475725 'end of statement')
        (456253 'move' i[456251] _indexOfInterest[456228])
        (475726 'end of statement' i[456251])
        unknown yret[510653] "YVV" "temp"
        (510656 'move' yret[510653](510655 'deref' i[456251]))
        (510658 yield yret[510653])
        (475728 'end of statement' i[456251])
        label _continueLabel[456258]
        _indexOfInterest[456228]
        _iterator[456230]
      }
      label _breakLabel[456260]
    }
    (510651 return ret[510649])
  }
  function chpl_direct_range_iter[456126](arg low[456133] :
  (456130 call int(64)[13] 32), arg high[456139] :
  (456137 call int(64)[13] 32), arg stride[456145] :
  (456143 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510662] "RVV" "temp"
    unknown call_tmp[624018] "expr temp" "maybe param" "maybe type" "temp"
    (624021 'move' call_tmp[624018](456152 call chpl_build_bounded_range low[456133] high[456139]))
    unknown call_tmp[624023] "maybe param" "maybe type" "temp"
    (624026 'move' call_tmp[624023](456150 call chpl_by call_tmp[624018] stride[456145]))
    const r[456148] "dead at end of block" "const" "insert auto destroy"
    (541192 'init var' r[456148] call_tmp[624023])
    (456157 'end of statement')
    {
      unknown _indexOfInterest[456159] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456161] "expr temp" "temp"
      (456163 'move' _iterator[456161](456166 call _getIterator r[456148]))
      Defer
      {
        {
          (456170 call _freeIterator _iterator[456161])
        }
      }
      { scopeless type
        (456174 'move' _indexOfInterest[456159](456177 call iteratorIndex _iterator[456161]))
      }
      ForLoop[456179]
      {
        unknown i[456182] "index var" "insert auto destroy"
        (475731 'end of statement')
        (456184 'move' i[456182] _indexOfInterest[456159])
        (475732 'end of statement' i[456182])
        unknown yret[510666] "YVV" "temp"
        (510669 'move' yret[510666](510668 'deref' i[456182]))
        (510671 yield yret[510666])
        (475734 'end of statement' i[456182])
        label _continueLabel[456189]
        _indexOfInterest[456159]
        _iterator[456161]
      }
      label _breakLabel[456191]
    }
    (510664 return ret[510662])
  }
  function chpl_direct_range_iter[456057](arg low[456064] :
  (456061 call int(64)[13] 16), arg high[456070] :
  (456068 call int(64)[13] 16), arg stride[456076] :
  (456074 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510675] "RVV" "temp"
    unknown call_tmp[624028] "expr temp" "maybe param" "maybe type" "temp"
    (624031 'move' call_tmp[624028](456083 call chpl_build_bounded_range low[456064] high[456070]))
    unknown call_tmp[624033] "maybe param" "maybe type" "temp"
    (624036 'move' call_tmp[624033](456081 call chpl_by call_tmp[624028] stride[456076]))
    const r[456079] "dead at end of block" "const" "insert auto destroy"
    (541194 'init var' r[456079] call_tmp[624033])
    (456088 'end of statement')
    {
      unknown _indexOfInterest[456090] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456092] "expr temp" "temp"
      (456094 'move' _iterator[456092](456097 call _getIterator r[456079]))
      Defer
      {
        {
          (456101 call _freeIterator _iterator[456092])
        }
      }
      { scopeless type
        (456105 'move' _indexOfInterest[456090](456108 call iteratorIndex _iterator[456092]))
      }
      ForLoop[456110]
      {
        unknown i[456113] "index var" "insert auto destroy"
        (475737 'end of statement')
        (456115 'move' i[456113] _indexOfInterest[456090])
        (475738 'end of statement' i[456113])
        unknown yret[510679] "YVV" "temp"
        (510682 'move' yret[510679](510681 'deref' i[456113]))
        (510684 yield yret[510679])
        (475740 'end of statement' i[456113])
        label _continueLabel[456120]
        _indexOfInterest[456090]
        _iterator[456092]
      }
      label _breakLabel[456122]
    }
    (510677 return ret[510675])
  }
  function chpl_direct_range_iter[455988](arg low[455995] :
  (455992 call int(64)[13] 8), arg high[456001] :
  (455999 call int(64)[13] 8), arg stride[456007] :
  (456005 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510688] "RVV" "temp"
    unknown call_tmp[624038] "expr temp" "maybe param" "maybe type" "temp"
    (624041 'move' call_tmp[624038](456014 call chpl_build_bounded_range low[455995] high[456001]))
    unknown call_tmp[624043] "maybe param" "maybe type" "temp"
    (624046 'move' call_tmp[624043](456012 call chpl_by call_tmp[624038] stride[456007]))
    const r[456010] "dead at end of block" "const" "insert auto destroy"
    (541196 'init var' r[456010] call_tmp[624043])
    (456019 'end of statement')
    {
      unknown _indexOfInterest[456021] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456023] "expr temp" "temp"
      (456025 'move' _iterator[456023](456028 call _getIterator r[456010]))
      Defer
      {
        {
          (456032 call _freeIterator _iterator[456023])
        }
      }
      { scopeless type
        (456036 'move' _indexOfInterest[456021](456039 call iteratorIndex _iterator[456023]))
      }
      ForLoop[456041]
      {
        unknown i[456044] "index var" "insert auto destroy"
        (475743 'end of statement')
        (456046 'move' i[456044] _indexOfInterest[456021])
        (475744 'end of statement' i[456044])
        unknown yret[510692] "YVV" "temp"
        (510695 'move' yret[510692](510694 'deref' i[456044]))
        (510697 yield yret[510692])
        (475746 'end of statement' i[456044])
        label _continueLabel[456051]
        _indexOfInterest[456021]
        _iterator[456023]
      }
      label _breakLabel[456053]
    }
    (510690 return ret[510688])
  }
  function chpl_direct_range_iter[456471](arg low[456478] :
  (456475 call uint(64)[115] 64), arg high[456484] :
  (456482 call uint(64)[115] 64), arg stride[456490] :
  (456488 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510701] "RVV" "temp"
    unknown call_tmp[624048] "expr temp" "maybe param" "maybe type" "temp"
    (624051 'move' call_tmp[624048](456497 call chpl_build_bounded_range low[456478] high[456484]))
    unknown call_tmp[624053] "maybe param" "maybe type" "temp"
    (624056 'move' call_tmp[624053](456495 call chpl_by call_tmp[624048] stride[456490]))
    const r[456493] "dead at end of block" "const" "insert auto destroy"
    (541198 'init var' r[456493] call_tmp[624053])
    (456502 'end of statement')
    {
      unknown _indexOfInterest[456504] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456506] "expr temp" "temp"
      (456508 'move' _iterator[456506](456511 call _getIterator r[456493]))
      Defer
      {
        {
          (456515 call _freeIterator _iterator[456506])
        }
      }
      { scopeless type
        (456519 'move' _indexOfInterest[456504](456522 call iteratorIndex _iterator[456506]))
      }
      ForLoop[456524]
      {
        unknown i[456527] "index var" "insert auto destroy"
        (475749 'end of statement')
        (456529 'move' i[456527] _indexOfInterest[456504])
        (475750 'end of statement' i[456527])
        unknown yret[510705] "YVV" "temp"
        (510708 'move' yret[510705](510707 'deref' i[456527]))
        (510710 yield yret[510705])
        (475752 'end of statement' i[456527])
        label _continueLabel[456534]
        _indexOfInterest[456504]
        _iterator[456506]
      }
      label _breakLabel[456536]
    }
    (510703 return ret[510701])
  }
  function chpl_direct_range_iter[456402](arg low[456409] :
  (456406 call uint(64)[115] 32), arg high[456415] :
  (456413 call uint(64)[115] 32), arg stride[456421] :
  (456419 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510714] "RVV" "temp"
    unknown call_tmp[624058] "expr temp" "maybe param" "maybe type" "temp"
    (624061 'move' call_tmp[624058](456428 call chpl_build_bounded_range low[456409] high[456415]))
    unknown call_tmp[624063] "maybe param" "maybe type" "temp"
    (624066 'move' call_tmp[624063](456426 call chpl_by call_tmp[624058] stride[456421]))
    const r[456424] "dead at end of block" "const" "insert auto destroy"
    (541200 'init var' r[456424] call_tmp[624063])
    (456433 'end of statement')
    {
      unknown _indexOfInterest[456435] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456437] "expr temp" "temp"
      (456439 'move' _iterator[456437](456442 call _getIterator r[456424]))
      Defer
      {
        {
          (456446 call _freeIterator _iterator[456437])
        }
      }
      { scopeless type
        (456450 'move' _indexOfInterest[456435](456453 call iteratorIndex _iterator[456437]))
      }
      ForLoop[456455]
      {
        unknown i[456458] "index var" "insert auto destroy"
        (475755 'end of statement')
        (456460 'move' i[456458] _indexOfInterest[456435])
        (475756 'end of statement' i[456458])
        unknown yret[510718] "YVV" "temp"
        (510721 'move' yret[510718](510720 'deref' i[456458]))
        (510723 yield yret[510718])
        (475758 'end of statement' i[456458])
        label _continueLabel[456465]
        _indexOfInterest[456435]
        _iterator[456437]
      }
      label _breakLabel[456467]
    }
    (510716 return ret[510714])
  }
  function chpl_direct_range_iter[456333](arg low[456340] :
  (456337 call uint(64)[115] 16), arg high[456346] :
  (456344 call uint(64)[115] 16), arg stride[456352] :
  (456350 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510727] "RVV" "temp"
    unknown call_tmp[624068] "expr temp" "maybe param" "maybe type" "temp"
    (624071 'move' call_tmp[624068](456359 call chpl_build_bounded_range low[456340] high[456346]))
    unknown call_tmp[624073] "maybe param" "maybe type" "temp"
    (624076 'move' call_tmp[624073](456357 call chpl_by call_tmp[624068] stride[456352]))
    const r[456355] "dead at end of block" "const" "insert auto destroy"
    (541202 'init var' r[456355] call_tmp[624073])
    (456364 'end of statement')
    {
      unknown _indexOfInterest[456366] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456368] "expr temp" "temp"
      (456370 'move' _iterator[456368](456373 call _getIterator r[456355]))
      Defer
      {
        {
          (456377 call _freeIterator _iterator[456368])
        }
      }
      { scopeless type
        (456381 'move' _indexOfInterest[456366](456384 call iteratorIndex _iterator[456368]))
      }
      ForLoop[456386]
      {
        unknown i[456389] "index var" "insert auto destroy"
        (475761 'end of statement')
        (456391 'move' i[456389] _indexOfInterest[456366])
        (475762 'end of statement' i[456389])
        unknown yret[510731] "YVV" "temp"
        (510734 'move' yret[510731](510733 'deref' i[456389]))
        (510736 yield yret[510731])
        (475764 'end of statement' i[456389])
        label _continueLabel[456396]
        _indexOfInterest[456366]
        _iterator[456368]
      }
      label _breakLabel[456398]
    }
    (510729 return ret[510727])
  }
  function chpl_direct_range_iter[456264](arg low[456271] :
  (456268 call uint(64)[115] 8), arg high[456277] :
  (456275 call uint(64)[115] 8), arg stride[456283] :
  (456281 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510740] "RVV" "temp"
    unknown call_tmp[624078] "expr temp" "maybe param" "maybe type" "temp"
    (624081 'move' call_tmp[624078](456290 call chpl_build_bounded_range low[456271] high[456277]))
    unknown call_tmp[624083] "maybe param" "maybe type" "temp"
    (624086 'move' call_tmp[624083](456288 call chpl_by call_tmp[624078] stride[456283]))
    const r[456286] "dead at end of block" "const" "insert auto destroy"
    (541204 'init var' r[456286] call_tmp[624083])
    (456295 'end of statement')
    {
      unknown _indexOfInterest[456297] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456299] "expr temp" "temp"
      (456301 'move' _iterator[456299](456304 call _getIterator r[456286]))
      Defer
      {
        {
          (456308 call _freeIterator _iterator[456299])
        }
      }
      { scopeless type
        (456312 'move' _indexOfInterest[456297](456315 call iteratorIndex _iterator[456299]))
      }
      ForLoop[456317]
      {
        unknown i[456320] "index var" "insert auto destroy"
        (475767 'end of statement')
        (456322 'move' i[456320] _indexOfInterest[456297])
        (475768 'end of statement' i[456320])
        unknown yret[510744] "YVV" "temp"
        (510747 'move' yret[510744](510746 'deref' i[456320]))
        (510749 yield yret[510744])
        (475770 'end of statement' i[456320])
        label _continueLabel[456327]
        _indexOfInterest[456297]
        _iterator[456299]
      }
      label _breakLabel[456329]
    }
    (510742 return ret[510740])
  }
  function chpl_direct_range_iter[73906](arg low[73903]:enum[187](?), arg high[73909]:enum[187](?), arg stride[73913]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510753] "RVV" "temp"
    unknown call_tmp[624088] "expr temp" "maybe param" "maybe type" "temp"
    (624091 'move' call_tmp[624088](73918 call chpl_build_bounded_range low[73903] high[73909]))
    unknown call_tmp[624093] "maybe param" "maybe type" "temp"
    (624096 'move' call_tmp[624093](73921 call chpl_by call_tmp[624088] stride[73913]))
    const r[73923] "dead at end of block" "const" "insert auto destroy"
    (541206 'init var' r[73923] call_tmp[624093])
    (73926 'end of statement')
    {
      unknown _indexOfInterest[73933] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[73934] "expr temp" "temp"
      (73943 'move' _iterator[73934](73941 call _getIterator r[73923]))
      Defer
      {
        {
          (73959 call _freeIterator _iterator[73934])
        }
      }
      { scopeless type
        (73948 'move' _indexOfInterest[73933](73945 call iteratorIndex _iterator[73934]))
      }
      ForLoop[73935]
      {
        unknown i[73952] "index var" "insert auto destroy"
        (475773 'end of statement')
        (73954 'move' i[73952] _indexOfInterest[73933])
        (475774 'end of statement' i[73952])
        unknown yret[510757] "YVV" "temp"
        (510760 'move' yret[510757](510759 'deref' i[73952]))
        (510762 yield yret[510757])
        (475776 'end of statement' i[73952])
        label _continueLabel[73938]
        _indexOfInterest[73933]
        _iterator[73934]
      }
      label _breakLabel[73939]
    }
    (510755 return ret[510753])
  }
  function chpl_direct_range_iter[73974](arg low[73971]:bool[10], arg high[73977]:bool[10], arg stride[73981]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510766] "RVV" "temp"
    unknown call_tmp[624098] "expr temp" "maybe param" "maybe type" "temp"
    (624101 'move' call_tmp[624098](73986 call chpl_build_bounded_range low[73971] high[73977]))
    unknown call_tmp[624103] "maybe param" "maybe type" "temp"
    (624106 'move' call_tmp[624103](73989 call chpl_by call_tmp[624098] stride[73981]))
    const r[73991] "dead at end of block" "const" "insert auto destroy"
    (541208 'init var' r[73991] call_tmp[624103])
    (73994 'end of statement')
    {
      unknown _indexOfInterest[74001] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[74002] "expr temp" "temp"
      (74011 'move' _iterator[74002](74009 call _getIterator r[73991]))
      Defer
      {
        {
          (74027 call _freeIterator _iterator[74002])
        }
      }
      { scopeless type
        (74016 'move' _indexOfInterest[74001](74013 call iteratorIndex _iterator[74002]))
      }
      ForLoop[74003]
      {
        unknown i[74020] "index var" "insert auto destroy"
        (475779 'end of statement')
        (74022 'move' i[74020] _indexOfInterest[74001])
        (475780 'end of statement' i[74020])
        unknown yret[510770] "YVV" "temp"
        (510773 'move' yret[510770](510772 'deref' i[74020]))
        (510775 yield yret[510770])
        (475782 'end of statement' i[74020])
        label _continueLabel[74006]
        _indexOfInterest[74001]
        _iterator[74002]
      }
      label _breakLabel[74007]
    }
    (510768 return ret[510766])
  }
  function chpl_direct_range_iter[456729](arg low[456736] :
  (456733 call int(64)[13] 64), arg high[456742] :
  (456740 call int(64)[13] 64), param arg stride[456748] :
  (456746 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510779] "RVV" "temp"
    {
      unknown _indexOfInterest[456752] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456754] "expr temp" "temp"
      unknown call_tmp[624108] "expr temp" "maybe param" "maybe type" "temp"
      (624111 'move' call_tmp[624108](456761 call chpl_direct_param_stride_range_iter low[456736] high[456742] stride[456748]))
      (456756 'move' _iterator[456754](456759 call _getIterator call_tmp[624108]))
      Defer
      {
        {
          (456767 call _freeIterator _iterator[456754])
        }
      }
      { scopeless type
        (456771 'move' _indexOfInterest[456752](456774 call iteratorIndex _iterator[456754]))
      }
      ForLoop[456776]
      {
        unknown i[456779] "index var" "insert auto destroy"
        (475785 'end of statement')
        (456781 'move' i[456779] _indexOfInterest[456752])
        (475786 'end of statement' i[456779])
        unknown yret[510783] "YVV" "temp"
        (510786 'move' yret[510783](510785 'deref' i[456779]))
        (510788 yield yret[510783])
        (475788 'end of statement' i[456779])
        label _continueLabel[456786]
        _indexOfInterest[456752]
        _iterator[456754]
      }
      label _breakLabel[456788]
    }
    (510781 return ret[510779])
  }
  function chpl_direct_range_iter[456666](arg low[456673] :
  (456670 call int(64)[13] 32), arg high[456679] :
  (456677 call int(64)[13] 32), param arg stride[456685] :
  (456683 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510792] "RVV" "temp"
    {
      unknown _indexOfInterest[456689] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456691] "expr temp" "temp"
      unknown call_tmp[624113] "expr temp" "maybe param" "maybe type" "temp"
      (624116 'move' call_tmp[624113](456698 call chpl_direct_param_stride_range_iter low[456673] high[456679] stride[456685]))
      (456693 'move' _iterator[456691](456696 call _getIterator call_tmp[624113]))
      Defer
      {
        {
          (456704 call _freeIterator _iterator[456691])
        }
      }
      { scopeless type
        (456708 'move' _indexOfInterest[456689](456711 call iteratorIndex _iterator[456691]))
      }
      ForLoop[456713]
      {
        unknown i[456716] "index var" "insert auto destroy"
        (475791 'end of statement')
        (456718 'move' i[456716] _indexOfInterest[456689])
        (475792 'end of statement' i[456716])
        unknown yret[510796] "YVV" "temp"
        (510799 'move' yret[510796](510798 'deref' i[456716]))
        (510801 yield yret[510796])
        (475794 'end of statement' i[456716])
        label _continueLabel[456723]
        _indexOfInterest[456689]
        _iterator[456691]
      }
      label _breakLabel[456725]
    }
    (510794 return ret[510792])
  }
  function chpl_direct_range_iter[456603](arg low[456610] :
  (456607 call int(64)[13] 16), arg high[456616] :
  (456614 call int(64)[13] 16), param arg stride[456622] :
  (456620 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510805] "RVV" "temp"
    {
      unknown _indexOfInterest[456626] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456628] "expr temp" "temp"
      unknown call_tmp[624118] "expr temp" "maybe param" "maybe type" "temp"
      (624121 'move' call_tmp[624118](456635 call chpl_direct_param_stride_range_iter low[456610] high[456616] stride[456622]))
      (456630 'move' _iterator[456628](456633 call _getIterator call_tmp[624118]))
      Defer
      {
        {
          (456641 call _freeIterator _iterator[456628])
        }
      }
      { scopeless type
        (456645 'move' _indexOfInterest[456626](456648 call iteratorIndex _iterator[456628]))
      }
      ForLoop[456650]
      {
        unknown i[456653] "index var" "insert auto destroy"
        (475797 'end of statement')
        (456655 'move' i[456653] _indexOfInterest[456626])
        (475798 'end of statement' i[456653])
        unknown yret[510809] "YVV" "temp"
        (510812 'move' yret[510809](510811 'deref' i[456653]))
        (510814 yield yret[510809])
        (475800 'end of statement' i[456653])
        label _continueLabel[456660]
        _indexOfInterest[456626]
        _iterator[456628]
      }
      label _breakLabel[456662]
    }
    (510807 return ret[510805])
  }
  function chpl_direct_range_iter[456540](arg low[456547] :
  (456544 call int(64)[13] 8), arg high[456553] :
  (456551 call int(64)[13] 8), param arg stride[456559] :
  (456557 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510818] "RVV" "temp"
    {
      unknown _indexOfInterest[456563] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456565] "expr temp" "temp"
      unknown call_tmp[624123] "expr temp" "maybe param" "maybe type" "temp"
      (624126 'move' call_tmp[624123](456572 call chpl_direct_param_stride_range_iter low[456547] high[456553] stride[456559]))
      (456567 'move' _iterator[456565](456570 call _getIterator call_tmp[624123]))
      Defer
      {
        {
          (456578 call _freeIterator _iterator[456565])
        }
      }
      { scopeless type
        (456582 'move' _indexOfInterest[456563](456585 call iteratorIndex _iterator[456565]))
      }
      ForLoop[456587]
      {
        unknown i[456590] "index var" "insert auto destroy"
        (475803 'end of statement')
        (456592 'move' i[456590] _indexOfInterest[456563])
        (475804 'end of statement' i[456590])
        unknown yret[510822] "YVV" "temp"
        (510825 'move' yret[510822](510824 'deref' i[456590]))
        (510827 yield yret[510822])
        (475806 'end of statement' i[456590])
        label _continueLabel[456597]
        _indexOfInterest[456563]
        _iterator[456565]
      }
      label _breakLabel[456599]
    }
    (510820 return ret[510818])
  }
  function chpl_direct_range_iter[456981](arg low[456988] :
  (456985 call uint(64)[115] 64), arg high[456994] :
  (456992 call uint(64)[115] 64), param arg stride[457000] :
  (456998 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510831] "RVV" "temp"
    {
      unknown _indexOfInterest[457004] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457006] "expr temp" "temp"
      unknown call_tmp[624128] "expr temp" "maybe param" "maybe type" "temp"
      (624131 'move' call_tmp[624128](457013 call chpl_direct_param_stride_range_iter low[456988] high[456994] stride[457000]))
      (457008 'move' _iterator[457006](457011 call _getIterator call_tmp[624128]))
      Defer
      {
        {
          (457019 call _freeIterator _iterator[457006])
        }
      }
      { scopeless type
        (457023 'move' _indexOfInterest[457004](457026 call iteratorIndex _iterator[457006]))
      }
      ForLoop[457028]
      {
        unknown i[457031] "index var" "insert auto destroy"
        (475809 'end of statement')
        (457033 'move' i[457031] _indexOfInterest[457004])
        (475810 'end of statement' i[457031])
        unknown yret[510835] "YVV" "temp"
        (510838 'move' yret[510835](510837 'deref' i[457031]))
        (510840 yield yret[510835])
        (475812 'end of statement' i[457031])
        label _continueLabel[457038]
        _indexOfInterest[457004]
        _iterator[457006]
      }
      label _breakLabel[457040]
    }
    (510833 return ret[510831])
  }
  function chpl_direct_range_iter[456918](arg low[456925] :
  (456922 call uint(64)[115] 32), arg high[456931] :
  (456929 call uint(64)[115] 32), param arg stride[456937] :
  (456935 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510844] "RVV" "temp"
    {
      unknown _indexOfInterest[456941] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456943] "expr temp" "temp"
      unknown call_tmp[624133] "expr temp" "maybe param" "maybe type" "temp"
      (624136 'move' call_tmp[624133](456950 call chpl_direct_param_stride_range_iter low[456925] high[456931] stride[456937]))
      (456945 'move' _iterator[456943](456948 call _getIterator call_tmp[624133]))
      Defer
      {
        {
          (456956 call _freeIterator _iterator[456943])
        }
      }
      { scopeless type
        (456960 'move' _indexOfInterest[456941](456963 call iteratorIndex _iterator[456943]))
      }
      ForLoop[456965]
      {
        unknown i[456968] "index var" "insert auto destroy"
        (475815 'end of statement')
        (456970 'move' i[456968] _indexOfInterest[456941])
        (475816 'end of statement' i[456968])
        unknown yret[510848] "YVV" "temp"
        (510851 'move' yret[510848](510850 'deref' i[456968]))
        (510853 yield yret[510848])
        (475818 'end of statement' i[456968])
        label _continueLabel[456975]
        _indexOfInterest[456941]
        _iterator[456943]
      }
      label _breakLabel[456977]
    }
    (510846 return ret[510844])
  }
  function chpl_direct_range_iter[456855](arg low[456862] :
  (456859 call uint(64)[115] 16), arg high[456868] :
  (456866 call uint(64)[115] 16), param arg stride[456874] :
  (456872 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510857] "RVV" "temp"
    {
      unknown _indexOfInterest[456878] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456880] "expr temp" "temp"
      unknown call_tmp[624138] "expr temp" "maybe param" "maybe type" "temp"
      (624141 'move' call_tmp[624138](456887 call chpl_direct_param_stride_range_iter low[456862] high[456868] stride[456874]))
      (456882 'move' _iterator[456880](456885 call _getIterator call_tmp[624138]))
      Defer
      {
        {
          (456893 call _freeIterator _iterator[456880])
        }
      }
      { scopeless type
        (456897 'move' _indexOfInterest[456878](456900 call iteratorIndex _iterator[456880]))
      }
      ForLoop[456902]
      {
        unknown i[456905] "index var" "insert auto destroy"
        (475821 'end of statement')
        (456907 'move' i[456905] _indexOfInterest[456878])
        (475822 'end of statement' i[456905])
        unknown yret[510861] "YVV" "temp"
        (510864 'move' yret[510861](510863 'deref' i[456905]))
        (510866 yield yret[510861])
        (475824 'end of statement' i[456905])
        label _continueLabel[456912]
        _indexOfInterest[456878]
        _iterator[456880]
      }
      label _breakLabel[456914]
    }
    (510859 return ret[510857])
  }
  function chpl_direct_range_iter[456792](arg low[456799] :
  (456796 call uint(64)[115] 8), arg high[456805] :
  (456803 call uint(64)[115] 8), param arg stride[456811] :
  (456809 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510870] "RVV" "temp"
    {
      unknown _indexOfInterest[456815] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456817] "expr temp" "temp"
      unknown call_tmp[624143] "expr temp" "maybe param" "maybe type" "temp"
      (624146 'move' call_tmp[624143](456824 call chpl_direct_param_stride_range_iter low[456799] high[456805] stride[456811]))
      (456819 'move' _iterator[456817](456822 call _getIterator call_tmp[624143]))
      Defer
      {
        {
          (456830 call _freeIterator _iterator[456817])
        }
      }
      { scopeless type
        (456834 'move' _indexOfInterest[456815](456837 call iteratorIndex _iterator[456817]))
      }
      ForLoop[456839]
      {
        unknown i[456842] "index var" "insert auto destroy"
        (475827 'end of statement')
        (456844 'move' i[456842] _indexOfInterest[456815])
        (475828 'end of statement' i[456842])
        unknown yret[510874] "YVV" "temp"
        (510877 'move' yret[510874](510876 'deref' i[456842]))
        (510879 yield yret[510874])
        (475830 'end of statement' i[456842])
        label _continueLabel[456849]
        _indexOfInterest[456815]
        _iterator[456817]
      }
      label _breakLabel[456851]
    }
    (510872 return ret[510870])
  }
  function chpl_direct_range_iter[74188](arg low[74185]:enum[187](?), arg high[74191]:enum[187](?), param arg stride[74195]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510883] "RVV" "temp"
    unknown call_tmp[624148] "expr temp" "maybe param" "maybe type" "temp"
    (624151 'move' call_tmp[624148](74200 call == stride[74195] 1))
    unknown call_tmp[624153] "expr temp" "maybe param" "maybe type" "temp"
    (624156 'move' call_tmp[624153](74299 call _cond_test call_tmp[624148]))
    if call_tmp[624153]
    {
      unknown call_tmp[624158] "maybe param" "maybe type" "temp"
      (624161 'move' call_tmp[624158](74204 call chpl_build_bounded_range low[74185] high[74191]))
      const r[74206] "dead at end of block" "const" "insert auto destroy"
      (541210 'init var' r[74206] call_tmp[624158])
      (74209 'end of statement')
      {
        unknown _indexOfInterest[74216] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74217] "expr temp" "temp"
        (74226 'move' _iterator[74217](74224 call _getIterator r[74206]))
        Defer
        {
          {
            (74242 call _freeIterator _iterator[74217])
          }
        }
        { scopeless type
          (74231 'move' _indexOfInterest[74216](74228 call iteratorIndex _iterator[74217]))
        }
        ForLoop[74218]
        {
          unknown i[74235] "index var" "insert auto destroy"
          (475833 'end of statement')
          (74237 'move' i[74235] _indexOfInterest[74216])
          (475834 'end of statement' i[74235])
          unknown yret[510887] "YVV" "temp"
          (510890 'move' yret[510887](510889 'deref' i[74235]))
          (510892 yield yret[510887])
          (475836 'end of statement' i[74235])
          label _continueLabel[74221]
          _indexOfInterest[74216]
          _iterator[74217]
        }
        label _breakLabel[74222]
      }
    }
    {
      unknown call_tmp[624163] "expr temp" "maybe param" "maybe type" "temp"
      (624166 'move' call_tmp[624163](74251 call chpl_build_bounded_range low[74185] high[74191]))
      unknown call_tmp[624168] "maybe param" "maybe type" "temp"
      (624171 'move' call_tmp[624168](74254 call chpl_by call_tmp[624163] stride[74195]))
      const r[74256] "dead at end of block" "const" "insert auto destroy"
      (541212 'init var' r[74256] call_tmp[624168])
      (74259 'end of statement')
      {
        unknown _indexOfInterest[74266] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74267] "expr temp" "temp"
        (74276 'move' _iterator[74267](74274 call _getIterator r[74256]))
        Defer
        {
          {
            (74292 call _freeIterator _iterator[74267])
          }
        }
        { scopeless type
          (74281 'move' _indexOfInterest[74266](74278 call iteratorIndex _iterator[74267]))
        }
        ForLoop[74268]
        {
          unknown i[74285] "index var" "insert auto destroy"
          (475839 'end of statement')
          (74287 'move' i[74285] _indexOfInterest[74266])
          (475840 'end of statement' i[74285])
          unknown yret[510894] "YVV" "temp"
          (510897 'move' yret[510894](510896 'deref' i[74285]))
          (510899 yield yret[510894])
          (475842 'end of statement' i[74285])
          label _continueLabel[74271]
          _indexOfInterest[74266]
          _iterator[74267]
        }
        label _breakLabel[74272]
      }
    }
    (510885 return ret[510883])
  }
  function chpl_direct_range_iter[74312](arg low[74309]:bool[10], arg high[74315]:bool[10], param arg stride[74319]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510903] "RVV" "temp"
    unknown call_tmp[624173] "expr temp" "maybe param" "maybe type" "temp"
    (624176 'move' call_tmp[624173](74324 call == stride[74319] 1))
    unknown call_tmp[624178] "expr temp" "maybe param" "maybe type" "temp"
    (624181 'move' call_tmp[624178](74423 call _cond_test call_tmp[624173]))
    if call_tmp[624178]
    {
      unknown call_tmp[624183] "maybe param" "maybe type" "temp"
      (624186 'move' call_tmp[624183](74328 call chpl_build_bounded_range low[74309] high[74315]))
      const r[74330] "dead at end of block" "const" "insert auto destroy"
      (541214 'init var' r[74330] call_tmp[624183])
      (74333 'end of statement')
      {
        unknown _indexOfInterest[74340] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74341] "expr temp" "temp"
        (74350 'move' _iterator[74341](74348 call _getIterator r[74330]))
        Defer
        {
          {
            (74366 call _freeIterator _iterator[74341])
          }
        }
        { scopeless type
          (74355 'move' _indexOfInterest[74340](74352 call iteratorIndex _iterator[74341]))
        }
        ForLoop[74342]
        {
          unknown i[74359] "index var" "insert auto destroy"
          (475845 'end of statement')
          (74361 'move' i[74359] _indexOfInterest[74340])
          (475846 'end of statement' i[74359])
          unknown yret[510907] "YVV" "temp"
          (510910 'move' yret[510907](510909 'deref' i[74359]))
          (510912 yield yret[510907])
          (475848 'end of statement' i[74359])
          label _continueLabel[74345]
          _indexOfInterest[74340]
          _iterator[74341]
        }
        label _breakLabel[74346]
      }
    }
    {
      unknown call_tmp[624188] "expr temp" "maybe param" "maybe type" "temp"
      (624191 'move' call_tmp[624188](74375 call chpl_build_bounded_range low[74309] high[74315]))
      unknown call_tmp[624193] "maybe param" "maybe type" "temp"
      (624196 'move' call_tmp[624193](74378 call chpl_by call_tmp[624188] stride[74319]))
      const r[74380] "dead at end of block" "const" "insert auto destroy"
      (541216 'init var' r[74380] call_tmp[624193])
      (74383 'end of statement')
      {
        unknown _indexOfInterest[74390] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74391] "expr temp" "temp"
        (74400 'move' _iterator[74391](74398 call _getIterator r[74380]))
        Defer
        {
          {
            (74416 call _freeIterator _iterator[74391])
          }
        }
        { scopeless type
          (74405 'move' _indexOfInterest[74390](74402 call iteratorIndex _iterator[74391]))
        }
        ForLoop[74392]
        {
          unknown i[74409] "index var" "insert auto destroy"
          (475851 'end of statement')
          (74411 'move' i[74409] _indexOfInterest[74390])
          (475852 'end of statement' i[74409])
          unknown yret[510914] "YVV" "temp"
          (510917 'move' yret[510914](510916 'deref' i[74409]))
          (510919 yield yret[510914])
          (475854 'end of statement' i[74409])
          label _continueLabel[74395]
          _indexOfInterest[74390]
          _iterator[74391]
        }
        label _breakLabel[74396]
      }
    }
    (510905 return ret[510903])
  }
  function chpl_direct_range_iter[457233](arg low[457240] :
  (457237 call int(64)[13] 64), arg high[457246] :
  (457244 call int(64)[13] 64), arg stride[457252] :
  (457250 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510923] "RVV" "temp"
    {
      unknown _indexOfInterest[457256] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457258] "expr temp" "temp"
      unknown call_tmp[624198] "expr temp" "maybe param" "maybe type" "temp"
      (624201 'move' call_tmp[624198](457265 call chpl_direct_pos_stride_range_iter low[457240] high[457246] stride[457252]))
      (457260 'move' _iterator[457258](457263 call _getIterator call_tmp[624198]))
      Defer
      {
        {
          (457271 call _freeIterator _iterator[457258])
        }
      }
      { scopeless type
        (457275 'move' _indexOfInterest[457256](457278 call iteratorIndex _iterator[457258]))
      }
      ForLoop[457280]
      {
        unknown i[457283] "index var" "insert auto destroy"
        (475857 'end of statement')
        (457285 'move' i[457283] _indexOfInterest[457256])
        (475858 'end of statement' i[457283])
        unknown yret[510927] "YVV" "temp"
        (510930 'move' yret[510927](510929 'deref' i[457283]))
        (510932 yield yret[510927])
        (475860 'end of statement' i[457283])
        label _continueLabel[457290]
        _indexOfInterest[457256]
        _iterator[457258]
      }
      label _breakLabel[457292]
    }
    (510925 return ret[510923])
  }
  function chpl_direct_range_iter[457170](arg low[457177] :
  (457174 call int(64)[13] 32), arg high[457183] :
  (457181 call int(64)[13] 32), arg stride[457189] :
  (457187 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510936] "RVV" "temp"
    {
      unknown _indexOfInterest[457193] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457195] "expr temp" "temp"
      unknown call_tmp[624203] "expr temp" "maybe param" "maybe type" "temp"
      (624206 'move' call_tmp[624203](457202 call chpl_direct_pos_stride_range_iter low[457177] high[457183] stride[457189]))
      (457197 'move' _iterator[457195](457200 call _getIterator call_tmp[624203]))
      Defer
      {
        {
          (457208 call _freeIterator _iterator[457195])
        }
      }
      { scopeless type
        (457212 'move' _indexOfInterest[457193](457215 call iteratorIndex _iterator[457195]))
      }
      ForLoop[457217]
      {
        unknown i[457220] "index var" "insert auto destroy"
        (475863 'end of statement')
        (457222 'move' i[457220] _indexOfInterest[457193])
        (475864 'end of statement' i[457220])
        unknown yret[510940] "YVV" "temp"
        (510943 'move' yret[510940](510942 'deref' i[457220]))
        (510945 yield yret[510940])
        (475866 'end of statement' i[457220])
        label _continueLabel[457227]
        _indexOfInterest[457193]
        _iterator[457195]
      }
      label _breakLabel[457229]
    }
    (510938 return ret[510936])
  }
  function chpl_direct_range_iter[457107](arg low[457114] :
  (457111 call int(64)[13] 16), arg high[457120] :
  (457118 call int(64)[13] 16), arg stride[457126] :
  (457124 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510949] "RVV" "temp"
    {
      unknown _indexOfInterest[457130] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457132] "expr temp" "temp"
      unknown call_tmp[624208] "expr temp" "maybe param" "maybe type" "temp"
      (624211 'move' call_tmp[624208](457139 call chpl_direct_pos_stride_range_iter low[457114] high[457120] stride[457126]))
      (457134 'move' _iterator[457132](457137 call _getIterator call_tmp[624208]))
      Defer
      {
        {
          (457145 call _freeIterator _iterator[457132])
        }
      }
      { scopeless type
        (457149 'move' _indexOfInterest[457130](457152 call iteratorIndex _iterator[457132]))
      }
      ForLoop[457154]
      {
        unknown i[457157] "index var" "insert auto destroy"
        (475869 'end of statement')
        (457159 'move' i[457157] _indexOfInterest[457130])
        (475870 'end of statement' i[457157])
        unknown yret[510953] "YVV" "temp"
        (510956 'move' yret[510953](510955 'deref' i[457157]))
        (510958 yield yret[510953])
        (475872 'end of statement' i[457157])
        label _continueLabel[457164]
        _indexOfInterest[457130]
        _iterator[457132]
      }
      label _breakLabel[457166]
    }
    (510951 return ret[510949])
  }
  function chpl_direct_range_iter[457044](arg low[457051] :
  (457048 call int(64)[13] 8), arg high[457057] :
  (457055 call int(64)[13] 8), arg stride[457063] :
  (457061 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510962] "RVV" "temp"
    {
      unknown _indexOfInterest[457067] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457069] "expr temp" "temp"
      unknown call_tmp[624213] "expr temp" "maybe param" "maybe type" "temp"
      (624216 'move' call_tmp[624213](457076 call chpl_direct_pos_stride_range_iter low[457051] high[457057] stride[457063]))
      (457071 'move' _iterator[457069](457074 call _getIterator call_tmp[624213]))
      Defer
      {
        {
          (457082 call _freeIterator _iterator[457069])
        }
      }
      { scopeless type
        (457086 'move' _indexOfInterest[457067](457089 call iteratorIndex _iterator[457069]))
      }
      ForLoop[457091]
      {
        unknown i[457094] "index var" "insert auto destroy"
        (475875 'end of statement')
        (457096 'move' i[457094] _indexOfInterest[457067])
        (475876 'end of statement' i[457094])
        unknown yret[510966] "YVV" "temp"
        (510969 'move' yret[510966](510968 'deref' i[457094]))
        (510971 yield yret[510966])
        (475878 'end of statement' i[457094])
        label _continueLabel[457101]
        _indexOfInterest[457067]
        _iterator[457069]
      }
      label _breakLabel[457103]
    }
    (510964 return ret[510962])
  }
  function chpl_direct_range_iter[457485](arg low[457492] :
  (457489 call uint(64)[115] 64), arg high[457498] :
  (457496 call uint(64)[115] 64), arg stride[457504] :
  (457502 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510975] "RVV" "temp"
    {
      unknown _indexOfInterest[457508] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457510] "expr temp" "temp"
      unknown call_tmp[624218] "expr temp" "maybe param" "maybe type" "temp"
      (624221 'move' call_tmp[624218](457517 call chpl_direct_pos_stride_range_iter low[457492] high[457498] stride[457504]))
      (457512 'move' _iterator[457510](457515 call _getIterator call_tmp[624218]))
      Defer
      {
        {
          (457523 call _freeIterator _iterator[457510])
        }
      }
      { scopeless type
        (457527 'move' _indexOfInterest[457508](457530 call iteratorIndex _iterator[457510]))
      }
      ForLoop[457532]
      {
        unknown i[457535] "index var" "insert auto destroy"
        (475881 'end of statement')
        (457537 'move' i[457535] _indexOfInterest[457508])
        (475882 'end of statement' i[457535])
        unknown yret[510979] "YVV" "temp"
        (510982 'move' yret[510979](510981 'deref' i[457535]))
        (510984 yield yret[510979])
        (475884 'end of statement' i[457535])
        label _continueLabel[457542]
        _indexOfInterest[457508]
        _iterator[457510]
      }
      label _breakLabel[457544]
    }
    (510977 return ret[510975])
  }
  function chpl_direct_range_iter[457422](arg low[457429] :
  (457426 call uint(64)[115] 32), arg high[457435] :
  (457433 call uint(64)[115] 32), arg stride[457441] :
  (457439 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510988] "RVV" "temp"
    {
      unknown _indexOfInterest[457445] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457447] "expr temp" "temp"
      unknown call_tmp[624223] "expr temp" "maybe param" "maybe type" "temp"
      (624226 'move' call_tmp[624223](457454 call chpl_direct_pos_stride_range_iter low[457429] high[457435] stride[457441]))
      (457449 'move' _iterator[457447](457452 call _getIterator call_tmp[624223]))
      Defer
      {
        {
          (457460 call _freeIterator _iterator[457447])
        }
      }
      { scopeless type
        (457464 'move' _indexOfInterest[457445](457467 call iteratorIndex _iterator[457447]))
      }
      ForLoop[457469]
      {
        unknown i[457472] "index var" "insert auto destroy"
        (475887 'end of statement')
        (457474 'move' i[457472] _indexOfInterest[457445])
        (475888 'end of statement' i[457472])
        unknown yret[510992] "YVV" "temp"
        (510995 'move' yret[510992](510994 'deref' i[457472]))
        (510997 yield yret[510992])
        (475890 'end of statement' i[457472])
        label _continueLabel[457479]
        _indexOfInterest[457445]
        _iterator[457447]
      }
      label _breakLabel[457481]
    }
    (510990 return ret[510988])
  }
  function chpl_direct_range_iter[457359](arg low[457366] :
  (457363 call uint(64)[115] 16), arg high[457372] :
  (457370 call uint(64)[115] 16), arg stride[457378] :
  (457376 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511001] "RVV" "temp"
    {
      unknown _indexOfInterest[457382] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457384] "expr temp" "temp"
      unknown call_tmp[624228] "expr temp" "maybe param" "maybe type" "temp"
      (624231 'move' call_tmp[624228](457391 call chpl_direct_pos_stride_range_iter low[457366] high[457372] stride[457378]))
      (457386 'move' _iterator[457384](457389 call _getIterator call_tmp[624228]))
      Defer
      {
        {
          (457397 call _freeIterator _iterator[457384])
        }
      }
      { scopeless type
        (457401 'move' _indexOfInterest[457382](457404 call iteratorIndex _iterator[457384]))
      }
      ForLoop[457406]
      {
        unknown i[457409] "index var" "insert auto destroy"
        (475893 'end of statement')
        (457411 'move' i[457409] _indexOfInterest[457382])
        (475894 'end of statement' i[457409])
        unknown yret[511005] "YVV" "temp"
        (511008 'move' yret[511005](511007 'deref' i[457409]))
        (511010 yield yret[511005])
        (475896 'end of statement' i[457409])
        label _continueLabel[457416]
        _indexOfInterest[457382]
        _iterator[457384]
      }
      label _breakLabel[457418]
    }
    (511003 return ret[511001])
  }
  function chpl_direct_range_iter[457296](arg low[457303] :
  (457300 call uint(64)[115] 8), arg high[457309] :
  (457307 call uint(64)[115] 8), arg stride[457315] :
  (457313 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511014] "RVV" "temp"
    {
      unknown _indexOfInterest[457319] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457321] "expr temp" "temp"
      unknown call_tmp[624233] "expr temp" "maybe param" "maybe type" "temp"
      (624236 'move' call_tmp[624233](457328 call chpl_direct_pos_stride_range_iter low[457303] high[457309] stride[457315]))
      (457323 'move' _iterator[457321](457326 call _getIterator call_tmp[624233]))
      Defer
      {
        {
          (457334 call _freeIterator _iterator[457321])
        }
      }
      { scopeless type
        (457338 'move' _indexOfInterest[457319](457341 call iteratorIndex _iterator[457321]))
      }
      ForLoop[457343]
      {
        unknown i[457346] "index var" "insert auto destroy"
        (475899 'end of statement')
        (457348 'move' i[457346] _indexOfInterest[457319])
        (475900 'end of statement' i[457346])
        unknown yret[511018] "YVV" "temp"
        (511021 'move' yret[511018](511020 'deref' i[457346]))
        (511023 yield yret[511018])
        (475902 'end of statement' i[457346])
        label _continueLabel[457353]
        _indexOfInterest[457319]
        _iterator[457321]
      }
      label _breakLabel[457355]
    }
    (511016 return ret[511014])
  }
  function chpl_direct_range_iter[457653](arg low[457660] :
  (457657 call int(64)[13] 64), arg high[457666] :
  (457664 call int(64)[13] 64), arg stride[457668]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511027] "RVV" "temp"
    unknown call_tmp[624238] "expr temp" "maybe param" "maybe type" "temp"
    (624241 'move' call_tmp[624238](457678 call int(64)[13] 64))
    unknown call_tmp[624243] "expr temp" "maybe param" "maybe type" "temp"
    (624246 'move' call_tmp[624243](457675 call _cast string[26] call_tmp[624238]))
    unknown call_tmp[624248] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624251 'move' call_tmp[624248](457684 'typeof' stride[457668]))
    unknown call_tmp[624253] "expr temp" "maybe param" "maybe type" "temp"
    (624256 'move' call_tmp[624253](457682 call _cast string[26] call_tmp[624248]))
    (457672 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624243] " using a step of type " call_tmp[624253])
    (511029 return ret[511027])
  }
  function chpl_direct_range_iter[457618](arg low[457625] :
  (457622 call int(64)[13] 32), arg high[457631] :
  (457629 call int(64)[13] 32), arg stride[457633]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511033] "RVV" "temp"
    unknown call_tmp[624258] "expr temp" "maybe param" "maybe type" "temp"
    (624261 'move' call_tmp[624258](457643 call int(64)[13] 32))
    unknown call_tmp[624263] "expr temp" "maybe param" "maybe type" "temp"
    (624266 'move' call_tmp[624263](457640 call _cast string[26] call_tmp[624258]))
    unknown call_tmp[624268] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624271 'move' call_tmp[624268](457649 'typeof' stride[457633]))
    unknown call_tmp[624273] "expr temp" "maybe param" "maybe type" "temp"
    (624276 'move' call_tmp[624273](457647 call _cast string[26] call_tmp[624268]))
    (457637 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624263] " using a step of type " call_tmp[624273])
    (511035 return ret[511033])
  }
  function chpl_direct_range_iter[457583](arg low[457590] :
  (457587 call int(64)[13] 16), arg high[457596] :
  (457594 call int(64)[13] 16), arg stride[457598]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511039] "RVV" "temp"
    unknown call_tmp[624278] "expr temp" "maybe param" "maybe type" "temp"
    (624281 'move' call_tmp[624278](457608 call int(64)[13] 16))
    unknown call_tmp[624283] "expr temp" "maybe param" "maybe type" "temp"
    (624286 'move' call_tmp[624283](457605 call _cast string[26] call_tmp[624278]))
    unknown call_tmp[624288] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624291 'move' call_tmp[624288](457614 'typeof' stride[457598]))
    unknown call_tmp[624293] "expr temp" "maybe param" "maybe type" "temp"
    (624296 'move' call_tmp[624293](457612 call _cast string[26] call_tmp[624288]))
    (457602 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624283] " using a step of type " call_tmp[624293])
    (511041 return ret[511039])
  }
  function chpl_direct_range_iter[457548](arg low[457555] :
  (457552 call int(64)[13] 8), arg high[457561] :
  (457559 call int(64)[13] 8), arg stride[457563]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511045] "RVV" "temp"
    unknown call_tmp[624298] "expr temp" "maybe param" "maybe type" "temp"
    (624301 'move' call_tmp[624298](457573 call int(64)[13] 8))
    unknown call_tmp[624303] "expr temp" "maybe param" "maybe type" "temp"
    (624306 'move' call_tmp[624303](457570 call _cast string[26] call_tmp[624298]))
    unknown call_tmp[624308] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624311 'move' call_tmp[624308](457579 'typeof' stride[457563]))
    unknown call_tmp[624313] "expr temp" "maybe param" "maybe type" "temp"
    (624316 'move' call_tmp[624313](457577 call _cast string[26] call_tmp[624308]))
    (457567 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624303] " using a step of type " call_tmp[624313])
    (511047 return ret[511045])
  }
  function chpl_direct_range_iter[457793](arg low[457800] :
  (457797 call uint(64)[115] 64), arg high[457806] :
  (457804 call uint(64)[115] 64), arg stride[457808]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511051] "RVV" "temp"
    unknown call_tmp[624318] "expr temp" "maybe param" "maybe type" "temp"
    (624321 'move' call_tmp[624318](457818 call uint(64)[115] 64))
    unknown call_tmp[624323] "expr temp" "maybe param" "maybe type" "temp"
    (624326 'move' call_tmp[624323](457815 call _cast string[26] call_tmp[624318]))
    unknown call_tmp[624328] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624331 'move' call_tmp[624328](457824 'typeof' stride[457808]))
    unknown call_tmp[624333] "expr temp" "maybe param" "maybe type" "temp"
    (624336 'move' call_tmp[624333](457822 call _cast string[26] call_tmp[624328]))
    (457812 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624323] " using a step of type " call_tmp[624333])
    (511053 return ret[511051])
  }
  function chpl_direct_range_iter[457758](arg low[457765] :
  (457762 call uint(64)[115] 32), arg high[457771] :
  (457769 call uint(64)[115] 32), arg stride[457773]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511057] "RVV" "temp"
    unknown call_tmp[624338] "expr temp" "maybe param" "maybe type" "temp"
    (624341 'move' call_tmp[624338](457783 call uint(64)[115] 32))
    unknown call_tmp[624343] "expr temp" "maybe param" "maybe type" "temp"
    (624346 'move' call_tmp[624343](457780 call _cast string[26] call_tmp[624338]))
    unknown call_tmp[624348] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624351 'move' call_tmp[624348](457789 'typeof' stride[457773]))
    unknown call_tmp[624353] "expr temp" "maybe param" "maybe type" "temp"
    (624356 'move' call_tmp[624353](457787 call _cast string[26] call_tmp[624348]))
    (457777 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624343] " using a step of type " call_tmp[624353])
    (511059 return ret[511057])
  }
  function chpl_direct_range_iter[457723](arg low[457730] :
  (457727 call uint(64)[115] 16), arg high[457736] :
  (457734 call uint(64)[115] 16), arg stride[457738]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511063] "RVV" "temp"
    unknown call_tmp[624358] "expr temp" "maybe param" "maybe type" "temp"
    (624361 'move' call_tmp[624358](457748 call uint(64)[115] 16))
    unknown call_tmp[624363] "expr temp" "maybe param" "maybe type" "temp"
    (624366 'move' call_tmp[624363](457745 call _cast string[26] call_tmp[624358]))
    unknown call_tmp[624368] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624371 'move' call_tmp[624368](457754 'typeof' stride[457738]))
    unknown call_tmp[624373] "expr temp" "maybe param" "maybe type" "temp"
    (624376 'move' call_tmp[624373](457752 call _cast string[26] call_tmp[624368]))
    (457742 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624363] " using a step of type " call_tmp[624373])
    (511065 return ret[511063])
  }
  function chpl_direct_range_iter[457688](arg low[457695] :
  (457692 call uint(64)[115] 8), arg high[457701] :
  (457699 call uint(64)[115] 8), arg stride[457703]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511069] "RVV" "temp"
    unknown call_tmp[624378] "expr temp" "maybe param" "maybe type" "temp"
    (624381 'move' call_tmp[624378](457713 call uint(64)[115] 8))
    unknown call_tmp[624383] "expr temp" "maybe param" "maybe type" "temp"
    (624386 'move' call_tmp[624383](457710 call _cast string[26] call_tmp[624378]))
    unknown call_tmp[624388] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624391 'move' call_tmp[624388](457719 'typeof' stride[457703]))
    unknown call_tmp[624393] "expr temp" "maybe param" "maybe type" "temp"
    (624396 'move' call_tmp[624393](457717 call _cast string[26] call_tmp[624388]))
    (457707 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624383] " using a step of type " call_tmp[624393])
    (511071 return ret[511069])
  }
  function chpl_direct_range_iter[74664](arg low[74662]:_any[178](?), arg high[74666]:_any[178](?), arg stride[74668]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511075] "RVV" "temp"
    (74673 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (511077 return ret[511075])
  }
  function chpl_direct_counted_range_iter[457996](arg low[458003] :
  (458000 call int(64)[13] 64), arg count[458009] :
  (458007 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511081] "RVV" "temp"
    {
      unknown _indexOfInterest[458013] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458015] "expr temp" "temp"
      unknown call_tmp[624398] "expr temp" "maybe param" "maybe type" "temp"
      (624401 'move' call_tmp[624398](458022 call chpl_direct_counted_range_iter_helper low[458003] count[458009]))
      (458017 'move' _iterator[458015](458020 call _getIterator call_tmp[624398]))
      Defer
      {
        {
          (458027 call _freeIterator _iterator[458015])
        }
      }
      { scopeless type
        (458031 'move' _indexOfInterest[458013](458034 call iteratorIndex _iterator[458015]))
      }
      ForLoop[458036]
      {
        unknown i[458039] "index var" "insert auto destroy"
        (475914 'end of statement')
        (458041 'move' i[458039] _indexOfInterest[458013])
        (475915 'end of statement' i[458039])
        unknown yret[511085] "YVV" "temp"
        (511088 'move' yret[511085](511087 'deref' i[458039]))
        (511090 yield yret[511085])
        (475917 'end of statement' i[458039])
        label _continueLabel[458046]
        _indexOfInterest[458013]
        _iterator[458015]
      }
      label _breakLabel[458048]
    }
    (511083 return ret[511081])
  }
  function chpl_direct_counted_range_iter[457940](arg low[457947] :
  (457944 call int(64)[13] 32), arg count[457953] :
  (457951 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511094] "RVV" "temp"
    {
      unknown _indexOfInterest[457957] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457959] "expr temp" "temp"
      unknown call_tmp[624403] "expr temp" "maybe param" "maybe type" "temp"
      (624406 'move' call_tmp[624403](457966 call chpl_direct_counted_range_iter_helper low[457947] count[457953]))
      (457961 'move' _iterator[457959](457964 call _getIterator call_tmp[624403]))
      Defer
      {
        {
          (457971 call _freeIterator _iterator[457959])
        }
      }
      { scopeless type
        (457975 'move' _indexOfInterest[457957](457978 call iteratorIndex _iterator[457959]))
      }
      ForLoop[457980]
      {
        unknown i[457983] "index var" "insert auto destroy"
        (475920 'end of statement')
        (457985 'move' i[457983] _indexOfInterest[457957])
        (475921 'end of statement' i[457983])
        unknown yret[511098] "YVV" "temp"
        (511101 'move' yret[511098](511100 'deref' i[457983]))
        (511103 yield yret[511098])
        (475923 'end of statement' i[457983])
        label _continueLabel[457990]
        _indexOfInterest[457957]
        _iterator[457959]
      }
      label _breakLabel[457992]
    }
    (511096 return ret[511094])
  }
  function chpl_direct_counted_range_iter[457884](arg low[457891] :
  (457888 call int(64)[13] 16), arg count[457897] :
  (457895 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511107] "RVV" "temp"
    {
      unknown _indexOfInterest[457901] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457903] "expr temp" "temp"
      unknown call_tmp[624408] "expr temp" "maybe param" "maybe type" "temp"
      (624411 'move' call_tmp[624408](457910 call chpl_direct_counted_range_iter_helper low[457891] count[457897]))
      (457905 'move' _iterator[457903](457908 call _getIterator call_tmp[624408]))
      Defer
      {
        {
          (457915 call _freeIterator _iterator[457903])
        }
      }
      { scopeless type
        (457919 'move' _indexOfInterest[457901](457922 call iteratorIndex _iterator[457903]))
      }
      ForLoop[457924]
      {
        unknown i[457927] "index var" "insert auto destroy"
        (475926 'end of statement')
        (457929 'move' i[457927] _indexOfInterest[457901])
        (475927 'end of statement' i[457927])
        unknown yret[511111] "YVV" "temp"
        (511114 'move' yret[511111](511113 'deref' i[457927]))
        (511116 yield yret[511111])
        (475929 'end of statement' i[457927])
        label _continueLabel[457934]
        _indexOfInterest[457901]
        _iterator[457903]
      }
      label _breakLabel[457936]
    }
    (511109 return ret[511107])
  }
  function chpl_direct_counted_range_iter[457828](arg low[457835] :
  (457832 call int(64)[13] 8), arg count[457841] :
  (457839 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511120] "RVV" "temp"
    {
      unknown _indexOfInterest[457845] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457847] "expr temp" "temp"
      unknown call_tmp[624413] "expr temp" "maybe param" "maybe type" "temp"
      (624416 'move' call_tmp[624413](457854 call chpl_direct_counted_range_iter_helper low[457835] count[457841]))
      (457849 'move' _iterator[457847](457852 call _getIterator call_tmp[624413]))
      Defer
      {
        {
          (457859 call _freeIterator _iterator[457847])
        }
      }
      { scopeless type
        (457863 'move' _indexOfInterest[457845](457866 call iteratorIndex _iterator[457847]))
      }
      ForLoop[457868]
      {
        unknown i[457871] "index var" "insert auto destroy"
        (475932 'end of statement')
        (457873 'move' i[457871] _indexOfInterest[457845])
        (475933 'end of statement' i[457871])
        unknown yret[511124] "YVV" "temp"
        (511127 'move' yret[511124](511126 'deref' i[457871]))
        (511129 yield yret[511124])
        (475935 'end of statement' i[457871])
        label _continueLabel[457878]
        _indexOfInterest[457845]
        _iterator[457847]
      }
      label _breakLabel[457880]
    }
    (511122 return ret[511120])
  }
  function chpl_direct_counted_range_iter[458220](arg low[458227] :
  (458224 call int(64)[13] 64), arg count[458233] :
  (458231 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511133] "RVV" "temp"
    {
      unknown _indexOfInterest[458237] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458239] "expr temp" "temp"
      unknown call_tmp[624418] "expr temp" "maybe param" "maybe type" "temp"
      (624421 'move' call_tmp[624418](458246 call chpl_direct_counted_range_iter_helper low[458227] count[458233]))
      (458241 'move' _iterator[458239](458244 call _getIterator call_tmp[624418]))
      Defer
      {
        {
          (458251 call _freeIterator _iterator[458239])
        }
      }
      { scopeless type
        (458255 'move' _indexOfInterest[458237](458258 call iteratorIndex _iterator[458239]))
      }
      ForLoop[458260]
      {
        unknown i[458263] "index var" "insert auto destroy"
        (475938 'end of statement')
        (458265 'move' i[458263] _indexOfInterest[458237])
        (475939 'end of statement' i[458263])
        unknown yret[511137] "YVV" "temp"
        (511140 'move' yret[511137](511139 'deref' i[458263]))
        (511142 yield yret[511137])
        (475941 'end of statement' i[458263])
        label _continueLabel[458270]
        _indexOfInterest[458237]
        _iterator[458239]
      }
      label _breakLabel[458272]
    }
    (511135 return ret[511133])
  }
  function chpl_direct_counted_range_iter[458164](arg low[458171] :
  (458168 call int(64)[13] 32), arg count[458177] :
  (458175 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511146] "RVV" "temp"
    {
      unknown _indexOfInterest[458181] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458183] "expr temp" "temp"
      unknown call_tmp[624423] "expr temp" "maybe param" "maybe type" "temp"
      (624426 'move' call_tmp[624423](458190 call chpl_direct_counted_range_iter_helper low[458171] count[458177]))
      (458185 'move' _iterator[458183](458188 call _getIterator call_tmp[624423]))
      Defer
      {
        {
          (458195 call _freeIterator _iterator[458183])
        }
      }
      { scopeless type
        (458199 'move' _indexOfInterest[458181](458202 call iteratorIndex _iterator[458183]))
      }
      ForLoop[458204]
      {
        unknown i[458207] "index var" "insert auto destroy"
        (475944 'end of statement')
        (458209 'move' i[458207] _indexOfInterest[458181])
        (475945 'end of statement' i[458207])
        unknown yret[511150] "YVV" "temp"
        (511153 'move' yret[511150](511152 'deref' i[458207]))
        (511155 yield yret[511150])
        (475947 'end of statement' i[458207])
        label _continueLabel[458214]
        _indexOfInterest[458181]
        _iterator[458183]
      }
      label _breakLabel[458216]
    }
    (511148 return ret[511146])
  }
  function chpl_direct_counted_range_iter[458108](arg low[458115] :
  (458112 call int(64)[13] 16), arg count[458121] :
  (458119 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511159] "RVV" "temp"
    {
      unknown _indexOfInterest[458125] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458127] "expr temp" "temp"
      unknown call_tmp[624428] "expr temp" "maybe param" "maybe type" "temp"
      (624431 'move' call_tmp[624428](458134 call chpl_direct_counted_range_iter_helper low[458115] count[458121]))
      (458129 'move' _iterator[458127](458132 call _getIterator call_tmp[624428]))
      Defer
      {
        {
          (458139 call _freeIterator _iterator[458127])
        }
      }
      { scopeless type
        (458143 'move' _indexOfInterest[458125](458146 call iteratorIndex _iterator[458127]))
      }
      ForLoop[458148]
      {
        unknown i[458151] "index var" "insert auto destroy"
        (475950 'end of statement')
        (458153 'move' i[458151] _indexOfInterest[458125])
        (475951 'end of statement' i[458151])
        unknown yret[511163] "YVV" "temp"
        (511166 'move' yret[511163](511165 'deref' i[458151]))
        (511168 yield yret[511163])
        (475953 'end of statement' i[458151])
        label _continueLabel[458158]
        _indexOfInterest[458125]
        _iterator[458127]
      }
      label _breakLabel[458160]
    }
    (511161 return ret[511159])
  }
  function chpl_direct_counted_range_iter[458052](arg low[458059] :
  (458056 call int(64)[13] 8), arg count[458065] :
  (458063 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511172] "RVV" "temp"
    {
      unknown _indexOfInterest[458069] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458071] "expr temp" "temp"
      unknown call_tmp[624433] "expr temp" "maybe param" "maybe type" "temp"
      (624436 'move' call_tmp[624433](458078 call chpl_direct_counted_range_iter_helper low[458059] count[458065]))
      (458073 'move' _iterator[458071](458076 call _getIterator call_tmp[624433]))
      Defer
      {
        {
          (458083 call _freeIterator _iterator[458071])
        }
      }
      { scopeless type
        (458087 'move' _indexOfInterest[458069](458090 call iteratorIndex _iterator[458071]))
      }
      ForLoop[458092]
      {
        unknown i[458095] "index var" "insert auto destroy"
        (475956 'end of statement')
        (458097 'move' i[458095] _indexOfInterest[458069])
        (475957 'end of statement' i[458095])
        unknown yret[511176] "YVV" "temp"
        (511179 'move' yret[511176](511178 'deref' i[458095]))
        (511181 yield yret[511176])
        (475959 'end of statement' i[458095])
        label _continueLabel[458102]
        _indexOfInterest[458069]
        _iterator[458071]
      }
      label _breakLabel[458104]
    }
    (511174 return ret[511172])
  }
  function chpl_direct_counted_range_iter[458444](arg low[458451] :
  (458448 call uint(64)[115] 64), arg count[458457] :
  (458455 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511185] "RVV" "temp"
    {
      unknown _indexOfInterest[458461] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458463] "expr temp" "temp"
      unknown call_tmp[624438] "expr temp" "maybe param" "maybe type" "temp"
      (624441 'move' call_tmp[624438](458470 call chpl_direct_counted_range_iter_helper low[458451] count[458457]))
      (458465 'move' _iterator[458463](458468 call _getIterator call_tmp[624438]))
      Defer
      {
        {
          (458475 call _freeIterator _iterator[458463])
        }
      }
      { scopeless type
        (458479 'move' _indexOfInterest[458461](458482 call iteratorIndex _iterator[458463]))
      }
      ForLoop[458484]
      {
        unknown i[458487] "index var" "insert auto destroy"
        (475962 'end of statement')
        (458489 'move' i[458487] _indexOfInterest[458461])
        (475963 'end of statement' i[458487])
        unknown yret[511189] "YVV" "temp"
        (511192 'move' yret[511189](511191 'deref' i[458487]))
        (511194 yield yret[511189])
        (475965 'end of statement' i[458487])
        label _continueLabel[458494]
        _indexOfInterest[458461]
        _iterator[458463]
      }
      label _breakLabel[458496]
    }
    (511187 return ret[511185])
  }
  function chpl_direct_counted_range_iter[458388](arg low[458395] :
  (458392 call uint(64)[115] 32), arg count[458401] :
  (458399 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511198] "RVV" "temp"
    {
      unknown _indexOfInterest[458405] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458407] "expr temp" "temp"
      unknown call_tmp[624443] "expr temp" "maybe param" "maybe type" "temp"
      (624446 'move' call_tmp[624443](458414 call chpl_direct_counted_range_iter_helper low[458395] count[458401]))
      (458409 'move' _iterator[458407](458412 call _getIterator call_tmp[624443]))
      Defer
      {
        {
          (458419 call _freeIterator _iterator[458407])
        }
      }
      { scopeless type
        (458423 'move' _indexOfInterest[458405](458426 call iteratorIndex _iterator[458407]))
      }
      ForLoop[458428]
      {
        unknown i[458431] "index var" "insert auto destroy"
        (475968 'end of statement')
        (458433 'move' i[458431] _indexOfInterest[458405])
        (475969 'end of statement' i[458431])
        unknown yret[511202] "YVV" "temp"
        (511205 'move' yret[511202](511204 'deref' i[458431]))
        (511207 yield yret[511202])
        (475971 'end of statement' i[458431])
        label _continueLabel[458438]
        _indexOfInterest[458405]
        _iterator[458407]
      }
      label _breakLabel[458440]
    }
    (511200 return ret[511198])
  }
  function chpl_direct_counted_range_iter[458332](arg low[458339] :
  (458336 call uint(64)[115] 16), arg count[458345] :
  (458343 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511211] "RVV" "temp"
    {
      unknown _indexOfInterest[458349] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458351] "expr temp" "temp"
      unknown call_tmp[624448] "expr temp" "maybe param" "maybe type" "temp"
      (624451 'move' call_tmp[624448](458358 call chpl_direct_counted_range_iter_helper low[458339] count[458345]))
      (458353 'move' _iterator[458351](458356 call _getIterator call_tmp[624448]))
      Defer
      {
        {
          (458363 call _freeIterator _iterator[458351])
        }
      }
      { scopeless type
        (458367 'move' _indexOfInterest[458349](458370 call iteratorIndex _iterator[458351]))
      }
      ForLoop[458372]
      {
        unknown i[458375] "index var" "insert auto destroy"
        (475974 'end of statement')
        (458377 'move' i[458375] _indexOfInterest[458349])
        (475975 'end of statement' i[458375])
        unknown yret[511215] "YVV" "temp"
        (511218 'move' yret[511215](511217 'deref' i[458375]))
        (511220 yield yret[511215])
        (475977 'end of statement' i[458375])
        label _continueLabel[458382]
        _indexOfInterest[458349]
        _iterator[458351]
      }
      label _breakLabel[458384]
    }
    (511213 return ret[511211])
  }
  function chpl_direct_counted_range_iter[458276](arg low[458283] :
  (458280 call uint(64)[115] 8), arg count[458289] :
  (458287 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511224] "RVV" "temp"
    {
      unknown _indexOfInterest[458293] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458295] "expr temp" "temp"
      unknown call_tmp[624453] "expr temp" "maybe param" "maybe type" "temp"
      (624456 'move' call_tmp[624453](458302 call chpl_direct_counted_range_iter_helper low[458283] count[458289]))
      (458297 'move' _iterator[458295](458300 call _getIterator call_tmp[624453]))
      Defer
      {
        {
          (458307 call _freeIterator _iterator[458295])
        }
      }
      { scopeless type
        (458311 'move' _indexOfInterest[458293](458314 call iteratorIndex _iterator[458295]))
      }
      ForLoop[458316]
      {
        unknown i[458319] "index var" "insert auto destroy"
        (475980 'end of statement')
        (458321 'move' i[458319] _indexOfInterest[458293])
        (475981 'end of statement' i[458319])
        unknown yret[511228] "YVV" "temp"
        (511231 'move' yret[511228](511230 'deref' i[458319]))
        (511233 yield yret[511228])
        (475983 'end of statement' i[458319])
        label _continueLabel[458326]
        _indexOfInterest[458293]
        _iterator[458295]
      }
      label _breakLabel[458328]
    }
    (511226 return ret[511224])
  }
  function chpl_direct_counted_range_iter[458668](arg low[458675] :
  (458672 call uint(64)[115] 64), arg count[458681] :
  (458679 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511237] "RVV" "temp"
    {
      unknown _indexOfInterest[458685] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458687] "expr temp" "temp"
      unknown call_tmp[624458] "expr temp" "maybe param" "maybe type" "temp"
      (624461 'move' call_tmp[624458](458694 call chpl_direct_counted_range_iter_helper low[458675] count[458681]))
      (458689 'move' _iterator[458687](458692 call _getIterator call_tmp[624458]))
      Defer
      {
        {
          (458699 call _freeIterator _iterator[458687])
        }
      }
      { scopeless type
        (458703 'move' _indexOfInterest[458685](458706 call iteratorIndex _iterator[458687]))
      }
      ForLoop[458708]
      {
        unknown i[458711] "index var" "insert auto destroy"
        (475986 'end of statement')
        (458713 'move' i[458711] _indexOfInterest[458685])
        (475987 'end of statement' i[458711])
        unknown yret[511241] "YVV" "temp"
        (511244 'move' yret[511241](511243 'deref' i[458711]))
        (511246 yield yret[511241])
        (475989 'end of statement' i[458711])
        label _continueLabel[458718]
        _indexOfInterest[458685]
        _iterator[458687]
      }
      label _breakLabel[458720]
    }
    (511239 return ret[511237])
  }
  function chpl_direct_counted_range_iter[458612](arg low[458619] :
  (458616 call uint(64)[115] 32), arg count[458625] :
  (458623 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511250] "RVV" "temp"
    {
      unknown _indexOfInterest[458629] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458631] "expr temp" "temp"
      unknown call_tmp[624463] "expr temp" "maybe param" "maybe type" "temp"
      (624466 'move' call_tmp[624463](458638 call chpl_direct_counted_range_iter_helper low[458619] count[458625]))
      (458633 'move' _iterator[458631](458636 call _getIterator call_tmp[624463]))
      Defer
      {
        {
          (458643 call _freeIterator _iterator[458631])
        }
      }
      { scopeless type
        (458647 'move' _indexOfInterest[458629](458650 call iteratorIndex _iterator[458631]))
      }
      ForLoop[458652]
      {
        unknown i[458655] "index var" "insert auto destroy"
        (475992 'end of statement')
        (458657 'move' i[458655] _indexOfInterest[458629])
        (475993 'end of statement' i[458655])
        unknown yret[511254] "YVV" "temp"
        (511257 'move' yret[511254](511256 'deref' i[458655]))
        (511259 yield yret[511254])
        (475995 'end of statement' i[458655])
        label _continueLabel[458662]
        _indexOfInterest[458629]
        _iterator[458631]
      }
      label _breakLabel[458664]
    }
    (511252 return ret[511250])
  }
  function chpl_direct_counted_range_iter[458556](arg low[458563] :
  (458560 call uint(64)[115] 16), arg count[458569] :
  (458567 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511263] "RVV" "temp"
    {
      unknown _indexOfInterest[458573] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458575] "expr temp" "temp"
      unknown call_tmp[624468] "expr temp" "maybe param" "maybe type" "temp"
      (624471 'move' call_tmp[624468](458582 call chpl_direct_counted_range_iter_helper low[458563] count[458569]))
      (458577 'move' _iterator[458575](458580 call _getIterator call_tmp[624468]))
      Defer
      {
        {
          (458587 call _freeIterator _iterator[458575])
        }
      }
      { scopeless type
        (458591 'move' _indexOfInterest[458573](458594 call iteratorIndex _iterator[458575]))
      }
      ForLoop[458596]
      {
        unknown i[458599] "index var" "insert auto destroy"
        (475998 'end of statement')
        (458601 'move' i[458599] _indexOfInterest[458573])
        (475999 'end of statement' i[458599])
        unknown yret[511267] "YVV" "temp"
        (511270 'move' yret[511267](511269 'deref' i[458599]))
        (511272 yield yret[511267])
        (476001 'end of statement' i[458599])
        label _continueLabel[458606]
        _indexOfInterest[458573]
        _iterator[458575]
      }
      label _breakLabel[458608]
    }
    (511265 return ret[511263])
  }
  function chpl_direct_counted_range_iter[458500](arg low[458507] :
  (458504 call uint(64)[115] 8), arg count[458513] :
  (458511 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511276] "RVV" "temp"
    {
      unknown _indexOfInterest[458517] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458519] "expr temp" "temp"
      unknown call_tmp[624473] "expr temp" "maybe param" "maybe type" "temp"
      (624476 'move' call_tmp[624473](458526 call chpl_direct_counted_range_iter_helper low[458507] count[458513]))
      (458521 'move' _iterator[458519](458524 call _getIterator call_tmp[624473]))
      Defer
      {
        {
          (458531 call _freeIterator _iterator[458519])
        }
      }
      { scopeless type
        (458535 'move' _indexOfInterest[458517](458538 call iteratorIndex _iterator[458519]))
      }
      ForLoop[458540]
      {
        unknown i[458543] "index var" "insert auto destroy"
        (476004 'end of statement')
        (458545 'move' i[458543] _indexOfInterest[458517])
        (476005 'end of statement' i[458543])
        unknown yret[511280] "YVV" "temp"
        (511283 'move' yret[511280](511282 'deref' i[458543]))
        (511285 yield yret[511280])
        (476007 'end of statement' i[458543])
        label _continueLabel[458550]
        _indexOfInterest[458517]
        _iterator[458519]
      }
      label _breakLabel[458552]
    }
    (511278 return ret[511276])
  }
  function chpl_direct_counted_range_iter[458904](arg low[458908]:enum[187](?), arg count[458915] :
  (458912 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511289] "RVV" "temp"
    unknown call_tmp[624478] "maybe param" "maybe type" "temp"
    (624481 'move' call_tmp[624478](458920 call chpl_build_low_bounded_range low[458908]))
    const r[458918] "dead at end of block" "const" "insert auto destroy"
    (541218 'init var' r[458918] call_tmp[624478])
    (458923 'end of statement')
    {
      unknown _indexOfInterest[458925] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458927] "expr temp" "temp"
      unknown call_tmp[624483] "expr temp" "maybe param" "maybe type" "temp"
      (624486 'move' call_tmp[624483](458934 call # r[458918] count[458915]))
      (458929 'move' _iterator[458927](458932 call _getIterator call_tmp[624483]))
      Defer
      {
        {
          (458939 call _freeIterator _iterator[458927])
        }
      }
      { scopeless type
        (458943 'move' _indexOfInterest[458925](458946 call iteratorIndex _iterator[458927]))
      }
      ForLoop[458948]
      {
        unknown i[458951] "index var" "insert auto destroy"
        (476010 'end of statement')
        (458953 'move' i[458951] _indexOfInterest[458925])
        (476011 'end of statement' i[458951])
        unknown yret[511293] "YVV" "temp"
        (511296 'move' yret[511293](511295 'deref' i[458951]))
        (511298 yield yret[511293])
        (476013 'end of statement' i[458951])
        label _continueLabel[458958]
        _indexOfInterest[458925]
        _iterator[458927]
      }
      label _breakLabel[458960]
    }
    (511291 return ret[511289])
  }
  function chpl_direct_counted_range_iter[458844](arg low[458848]:enum[187](?), arg count[458855] :
  (458852 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511302] "RVV" "temp"
    unknown call_tmp[624488] "maybe param" "maybe type" "temp"
    (624491 'move' call_tmp[624488](458860 call chpl_build_low_bounded_range low[458848]))
    const r[458858] "dead at end of block" "const" "insert auto destroy"
    (541220 'init var' r[458858] call_tmp[624488])
    (458863 'end of statement')
    {
      unknown _indexOfInterest[458865] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458867] "expr temp" "temp"
      unknown call_tmp[624493] "expr temp" "maybe param" "maybe type" "temp"
      (624496 'move' call_tmp[624493](458874 call # r[458858] count[458855]))
      (458869 'move' _iterator[458867](458872 call _getIterator call_tmp[624493]))
      Defer
      {
        {
          (458879 call _freeIterator _iterator[458867])
        }
      }
      { scopeless type
        (458883 'move' _indexOfInterest[458865](458886 call iteratorIndex _iterator[458867]))
      }
      ForLoop[458888]
      {
        unknown i[458891] "index var" "insert auto destroy"
        (476016 'end of statement')
        (458893 'move' i[458891] _indexOfInterest[458865])
        (476017 'end of statement' i[458891])
        unknown yret[511306] "YVV" "temp"
        (511309 'move' yret[511306](511308 'deref' i[458891]))
        (511311 yield yret[511306])
        (476019 'end of statement' i[458891])
        label _continueLabel[458898]
        _indexOfInterest[458865]
        _iterator[458867]
      }
      label _breakLabel[458900]
    }
    (511304 return ret[511302])
  }
  function chpl_direct_counted_range_iter[458784](arg low[458788]:enum[187](?), arg count[458795] :
  (458792 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511315] "RVV" "temp"
    unknown call_tmp[624498] "maybe param" "maybe type" "temp"
    (624501 'move' call_tmp[624498](458800 call chpl_build_low_bounded_range low[458788]))
    const r[458798] "dead at end of block" "const" "insert auto destroy"
    (541222 'init var' r[458798] call_tmp[624498])
    (458803 'end of statement')
    {
      unknown _indexOfInterest[458805] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458807] "expr temp" "temp"
      unknown call_tmp[624503] "expr temp" "maybe param" "maybe type" "temp"
      (624506 'move' call_tmp[624503](458814 call # r[458798] count[458795]))
      (458809 'move' _iterator[458807](458812 call _getIterator call_tmp[624503]))
      Defer
      {
        {
          (458819 call _freeIterator _iterator[458807])
        }
      }
      { scopeless type
        (458823 'move' _indexOfInterest[458805](458826 call iteratorIndex _iterator[458807]))
      }
      ForLoop[458828]
      {
        unknown i[458831] "index var" "insert auto destroy"
        (476022 'end of statement')
        (458833 'move' i[458831] _indexOfInterest[458805])
        (476023 'end of statement' i[458831])
        unknown yret[511319] "YVV" "temp"
        (511322 'move' yret[511319](511321 'deref' i[458831]))
        (511324 yield yret[511319])
        (476025 'end of statement' i[458831])
        label _continueLabel[458838]
        _indexOfInterest[458805]
        _iterator[458807]
      }
      label _breakLabel[458840]
    }
    (511317 return ret[511315])
  }
  function chpl_direct_counted_range_iter[458724](arg low[458728]:enum[187](?), arg count[458735] :
  (458732 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511328] "RVV" "temp"
    unknown call_tmp[624508] "maybe param" "maybe type" "temp"
    (624511 'move' call_tmp[624508](458740 call chpl_build_low_bounded_range low[458728]))
    const r[458738] "dead at end of block" "const" "insert auto destroy"
    (541224 'init var' r[458738] call_tmp[624508])
    (458743 'end of statement')
    {
      unknown _indexOfInterest[458745] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458747] "expr temp" "temp"
      unknown call_tmp[624513] "expr temp" "maybe param" "maybe type" "temp"
      (624516 'move' call_tmp[624513](458754 call # r[458738] count[458735]))
      (458749 'move' _iterator[458747](458752 call _getIterator call_tmp[624513]))
      Defer
      {
        {
          (458759 call _freeIterator _iterator[458747])
        }
      }
      { scopeless type
        (458763 'move' _indexOfInterest[458745](458766 call iteratorIndex _iterator[458747]))
      }
      ForLoop[458768]
      {
        unknown i[458771] "index var" "insert auto destroy"
        (476028 'end of statement')
        (458773 'move' i[458771] _indexOfInterest[458745])
        (476029 'end of statement' i[458771])
        unknown yret[511332] "YVV" "temp"
        (511335 'move' yret[511332](511334 'deref' i[458771]))
        (511337 yield yret[511332])
        (476031 'end of statement' i[458771])
        label _continueLabel[458778]
        _indexOfInterest[458745]
        _iterator[458747]
      }
      label _breakLabel[458780]
    }
    (511330 return ret[511328])
  }
  function chpl_direct_counted_range_iter[459144](arg low[459148]:enum[187](?), arg count[459155] :
  (459152 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511341] "RVV" "temp"
    unknown call_tmp[624518] "maybe param" "maybe type" "temp"
    (624521 'move' call_tmp[624518](459160 call chpl_build_low_bounded_range low[459148]))
    const r[459158] "dead at end of block" "const" "insert auto destroy"
    (541226 'init var' r[459158] call_tmp[624518])
    (459163 'end of statement')
    {
      unknown _indexOfInterest[459165] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459167] "expr temp" "temp"
      unknown call_tmp[624523] "expr temp" "maybe param" "maybe type" "temp"
      (624526 'move' call_tmp[624523](459174 call # r[459158] count[459155]))
      (459169 'move' _iterator[459167](459172 call _getIterator call_tmp[624523]))
      Defer
      {
        {
          (459179 call _freeIterator _iterator[459167])
        }
      }
      { scopeless type
        (459183 'move' _indexOfInterest[459165](459186 call iteratorIndex _iterator[459167]))
      }
      ForLoop[459188]
      {
        unknown i[459191] "index var" "insert auto destroy"
        (476034 'end of statement')
        (459193 'move' i[459191] _indexOfInterest[459165])
        (476035 'end of statement' i[459191])
        unknown yret[511345] "YVV" "temp"
        (511348 'move' yret[511345](511347 'deref' i[459191]))
        (511350 yield yret[511345])
        (476037 'end of statement' i[459191])
        label _continueLabel[459198]
        _indexOfInterest[459165]
        _iterator[459167]
      }
      label _breakLabel[459200]
    }
    (511343 return ret[511341])
  }
  function chpl_direct_counted_range_iter[459084](arg low[459088]:enum[187](?), arg count[459095] :
  (459092 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511354] "RVV" "temp"
    unknown call_tmp[624528] "maybe param" "maybe type" "temp"
    (624531 'move' call_tmp[624528](459100 call chpl_build_low_bounded_range low[459088]))
    const r[459098] "dead at end of block" "const" "insert auto destroy"
    (541228 'init var' r[459098] call_tmp[624528])
    (459103 'end of statement')
    {
      unknown _indexOfInterest[459105] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459107] "expr temp" "temp"
      unknown call_tmp[624533] "expr temp" "maybe param" "maybe type" "temp"
      (624536 'move' call_tmp[624533](459114 call # r[459098] count[459095]))
      (459109 'move' _iterator[459107](459112 call _getIterator call_tmp[624533]))
      Defer
      {
        {
          (459119 call _freeIterator _iterator[459107])
        }
      }
      { scopeless type
        (459123 'move' _indexOfInterest[459105](459126 call iteratorIndex _iterator[459107]))
      }
      ForLoop[459128]
      {
        unknown i[459131] "index var" "insert auto destroy"
        (476040 'end of statement')
        (459133 'move' i[459131] _indexOfInterest[459105])
        (476041 'end of statement' i[459131])
        unknown yret[511358] "YVV" "temp"
        (511361 'move' yret[511358](511360 'deref' i[459131]))
        (511363 yield yret[511358])
        (476043 'end of statement' i[459131])
        label _continueLabel[459138]
        _indexOfInterest[459105]
        _iterator[459107]
      }
      label _breakLabel[459140]
    }
    (511356 return ret[511354])
  }
  function chpl_direct_counted_range_iter[459024](arg low[459028]:enum[187](?), arg count[459035] :
  (459032 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511367] "RVV" "temp"
    unknown call_tmp[624538] "maybe param" "maybe type" "temp"
    (624541 'move' call_tmp[624538](459040 call chpl_build_low_bounded_range low[459028]))
    const r[459038] "dead at end of block" "const" "insert auto destroy"
    (541230 'init var' r[459038] call_tmp[624538])
    (459043 'end of statement')
    {
      unknown _indexOfInterest[459045] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459047] "expr temp" "temp"
      unknown call_tmp[624543] "expr temp" "maybe param" "maybe type" "temp"
      (624546 'move' call_tmp[624543](459054 call # r[459038] count[459035]))
      (459049 'move' _iterator[459047](459052 call _getIterator call_tmp[624543]))
      Defer
      {
        {
          (459059 call _freeIterator _iterator[459047])
        }
      }
      { scopeless type
        (459063 'move' _indexOfInterest[459045](459066 call iteratorIndex _iterator[459047]))
      }
      ForLoop[459068]
      {
        unknown i[459071] "index var" "insert auto destroy"
        (476046 'end of statement')
        (459073 'move' i[459071] _indexOfInterest[459045])
        (476047 'end of statement' i[459071])
        unknown yret[511371] "YVV" "temp"
        (511374 'move' yret[511371](511373 'deref' i[459071]))
        (511376 yield yret[511371])
        (476049 'end of statement' i[459071])
        label _continueLabel[459078]
        _indexOfInterest[459045]
        _iterator[459047]
      }
      label _breakLabel[459080]
    }
    (511369 return ret[511367])
  }
  function chpl_direct_counted_range_iter[458964](arg low[458968]:enum[187](?), arg count[458975] :
  (458972 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511380] "RVV" "temp"
    unknown call_tmp[624548] "maybe param" "maybe type" "temp"
    (624551 'move' call_tmp[624548](458980 call chpl_build_low_bounded_range low[458968]))
    const r[458978] "dead at end of block" "const" "insert auto destroy"
    (541232 'init var' r[458978] call_tmp[624548])
    (458983 'end of statement')
    {
      unknown _indexOfInterest[458985] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458987] "expr temp" "temp"
      unknown call_tmp[624553] "expr temp" "maybe param" "maybe type" "temp"
      (624556 'move' call_tmp[624553](458994 call # r[458978] count[458975]))
      (458989 'move' _iterator[458987](458992 call _getIterator call_tmp[624553]))
      Defer
      {
        {
          (458999 call _freeIterator _iterator[458987])
        }
      }
      { scopeless type
        (459003 'move' _indexOfInterest[458985](459006 call iteratorIndex _iterator[458987]))
      }
      ForLoop[459008]
      {
        unknown i[459011] "index var" "insert auto destroy"
        (476052 'end of statement')
        (459013 'move' i[459011] _indexOfInterest[458985])
        (476053 'end of statement' i[459011])
        unknown yret[511384] "YVV" "temp"
        (511387 'move' yret[511384](511386 'deref' i[459011]))
        (511389 yield yret[511384])
        (476055 'end of statement' i[459011])
        label _continueLabel[459018]
        _indexOfInterest[458985]
        _iterator[458987]
      }
      label _breakLabel[459020]
    }
    (511382 return ret[511380])
  }
  function chpl_direct_counted_range_iter[459384](arg low[459388]:bool[10], arg count[459395] :
  (459392 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511393] "RVV" "temp"
    unknown call_tmp[624558] "maybe param" "maybe type" "temp"
    (624561 'move' call_tmp[624558](459400 call chpl_build_low_bounded_range low[459388]))
    const r[459398] "dead at end of block" "const" "insert auto destroy"
    (541234 'init var' r[459398] call_tmp[624558])
    (459403 'end of statement')
    {
      unknown _indexOfInterest[459405] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459407] "expr temp" "temp"
      unknown call_tmp[624563] "expr temp" "maybe param" "maybe type" "temp"
      (624566 'move' call_tmp[624563](459414 call # r[459398] count[459395]))
      (459409 'move' _iterator[459407](459412 call _getIterator call_tmp[624563]))
      Defer
      {
        {
          (459419 call _freeIterator _iterator[459407])
        }
      }
      { scopeless type
        (459423 'move' _indexOfInterest[459405](459426 call iteratorIndex _iterator[459407]))
      }
      ForLoop[459428]
      {
        unknown i[459431] "index var" "insert auto destroy"
        (476058 'end of statement')
        (459433 'move' i[459431] _indexOfInterest[459405])
        (476059 'end of statement' i[459431])
        unknown yret[511397] "YVV" "temp"
        (511400 'move' yret[511397](511399 'deref' i[459431]))
        (511402 yield yret[511397])
        (476061 'end of statement' i[459431])
        label _continueLabel[459438]
        _indexOfInterest[459405]
        _iterator[459407]
      }
      label _breakLabel[459440]
    }
    (511395 return ret[511393])
  }
  function chpl_direct_counted_range_iter[459324](arg low[459328]:bool[10], arg count[459335] :
  (459332 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511406] "RVV" "temp"
    unknown call_tmp[624568] "maybe param" "maybe type" "temp"
    (624571 'move' call_tmp[624568](459340 call chpl_build_low_bounded_range low[459328]))
    const r[459338] "dead at end of block" "const" "insert auto destroy"
    (541236 'init var' r[459338] call_tmp[624568])
    (459343 'end of statement')
    {
      unknown _indexOfInterest[459345] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459347] "expr temp" "temp"
      unknown call_tmp[624573] "expr temp" "maybe param" "maybe type" "temp"
      (624576 'move' call_tmp[624573](459354 call # r[459338] count[459335]))
      (459349 'move' _iterator[459347](459352 call _getIterator call_tmp[624573]))
      Defer
      {
        {
          (459359 call _freeIterator _iterator[459347])
        }
      }
      { scopeless type
        (459363 'move' _indexOfInterest[459345](459366 call iteratorIndex _iterator[459347]))
      }
      ForLoop[459368]
      {
        unknown i[459371] "index var" "insert auto destroy"
        (476064 'end of statement')
        (459373 'move' i[459371] _indexOfInterest[459345])
        (476065 'end of statement' i[459371])
        unknown yret[511410] "YVV" "temp"
        (511413 'move' yret[511410](511412 'deref' i[459371]))
        (511415 yield yret[511410])
        (476067 'end of statement' i[459371])
        label _continueLabel[459378]
        _indexOfInterest[459345]
        _iterator[459347]
      }
      label _breakLabel[459380]
    }
    (511408 return ret[511406])
  }
  function chpl_direct_counted_range_iter[459264](arg low[459268]:bool[10], arg count[459275] :
  (459272 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511419] "RVV" "temp"
    unknown call_tmp[624578] "maybe param" "maybe type" "temp"
    (624581 'move' call_tmp[624578](459280 call chpl_build_low_bounded_range low[459268]))
    const r[459278] "dead at end of block" "const" "insert auto destroy"
    (541238 'init var' r[459278] call_tmp[624578])
    (459283 'end of statement')
    {
      unknown _indexOfInterest[459285] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459287] "expr temp" "temp"
      unknown call_tmp[624583] "expr temp" "maybe param" "maybe type" "temp"
      (624586 'move' call_tmp[624583](459294 call # r[459278] count[459275]))
      (459289 'move' _iterator[459287](459292 call _getIterator call_tmp[624583]))
      Defer
      {
        {
          (459299 call _freeIterator _iterator[459287])
        }
      }
      { scopeless type
        (459303 'move' _indexOfInterest[459285](459306 call iteratorIndex _iterator[459287]))
      }
      ForLoop[459308]
      {
        unknown i[459311] "index var" "insert auto destroy"
        (476070 'end of statement')
        (459313 'move' i[459311] _indexOfInterest[459285])
        (476071 'end of statement' i[459311])
        unknown yret[511423] "YVV" "temp"
        (511426 'move' yret[511423](511425 'deref' i[459311]))
        (511428 yield yret[511423])
        (476073 'end of statement' i[459311])
        label _continueLabel[459318]
        _indexOfInterest[459285]
        _iterator[459287]
      }
      label _breakLabel[459320]
    }
    (511421 return ret[511419])
  }
  function chpl_direct_counted_range_iter[459204](arg low[459208]:bool[10], arg count[459215] :
  (459212 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511432] "RVV" "temp"
    unknown call_tmp[624588] "maybe param" "maybe type" "temp"
    (624591 'move' call_tmp[624588](459220 call chpl_build_low_bounded_range low[459208]))
    const r[459218] "dead at end of block" "const" "insert auto destroy"
    (541240 'init var' r[459218] call_tmp[624588])
    (459223 'end of statement')
    {
      unknown _indexOfInterest[459225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459227] "expr temp" "temp"
      unknown call_tmp[624593] "expr temp" "maybe param" "maybe type" "temp"
      (624596 'move' call_tmp[624593](459234 call # r[459218] count[459215]))
      (459229 'move' _iterator[459227](459232 call _getIterator call_tmp[624593]))
      Defer
      {
        {
          (459239 call _freeIterator _iterator[459227])
        }
      }
      { scopeless type
        (459243 'move' _indexOfInterest[459225](459246 call iteratorIndex _iterator[459227]))
      }
      ForLoop[459248]
      {
        unknown i[459251] "index var" "insert auto destroy"
        (476076 'end of statement')
        (459253 'move' i[459251] _indexOfInterest[459225])
        (476077 'end of statement' i[459251])
        unknown yret[511436] "YVV" "temp"
        (511439 'move' yret[511436](511438 'deref' i[459251]))
        (511441 yield yret[511436])
        (476079 'end of statement' i[459251])
        label _continueLabel[459258]
        _indexOfInterest[459225]
        _iterator[459227]
      }
      label _breakLabel[459260]
    }
    (511434 return ret[511432])
  }
  function chpl_direct_counted_range_iter[459624](arg low[459628]:bool[10], arg count[459635] :
  (459632 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511445] "RVV" "temp"
    unknown call_tmp[624598] "maybe param" "maybe type" "temp"
    (624601 'move' call_tmp[624598](459640 call chpl_build_low_bounded_range low[459628]))
    const r[459638] "dead at end of block" "const" "insert auto destroy"
    (541242 'init var' r[459638] call_tmp[624598])
    (459643 'end of statement')
    {
      unknown _indexOfInterest[459645] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459647] "expr temp" "temp"
      unknown call_tmp[624603] "expr temp" "maybe param" "maybe type" "temp"
      (624606 'move' call_tmp[624603](459654 call # r[459638] count[459635]))
      (459649 'move' _iterator[459647](459652 call _getIterator call_tmp[624603]))
      Defer
      {
        {
          (459659 call _freeIterator _iterator[459647])
        }
      }
      { scopeless type
        (459663 'move' _indexOfInterest[459645](459666 call iteratorIndex _iterator[459647]))
      }
      ForLoop[459668]
      {
        unknown i[459671] "index var" "insert auto destroy"
        (476082 'end of statement')
        (459673 'move' i[459671] _indexOfInterest[459645])
        (476083 'end of statement' i[459671])
        unknown yret[511449] "YVV" "temp"
        (511452 'move' yret[511449](511451 'deref' i[459671]))
        (511454 yield yret[511449])
        (476085 'end of statement' i[459671])
        label _continueLabel[459678]
        _indexOfInterest[459645]
        _iterator[459647]
      }
      label _breakLabel[459680]
    }
    (511447 return ret[511445])
  }
  function chpl_direct_counted_range_iter[459564](arg low[459568]:bool[10], arg count[459575] :
  (459572 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511458] "RVV" "temp"
    unknown call_tmp[624608] "maybe param" "maybe type" "temp"
    (624611 'move' call_tmp[624608](459580 call chpl_build_low_bounded_range low[459568]))
    const r[459578] "dead at end of block" "const" "insert auto destroy"
    (541244 'init var' r[459578] call_tmp[624608])
    (459583 'end of statement')
    {
      unknown _indexOfInterest[459585] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459587] "expr temp" "temp"
      unknown call_tmp[624613] "expr temp" "maybe param" "maybe type" "temp"
      (624616 'move' call_tmp[624613](459594 call # r[459578] count[459575]))
      (459589 'move' _iterator[459587](459592 call _getIterator call_tmp[624613]))
      Defer
      {
        {
          (459599 call _freeIterator _iterator[459587])
        }
      }
      { scopeless type
        (459603 'move' _indexOfInterest[459585](459606 call iteratorIndex _iterator[459587]))
      }
      ForLoop[459608]
      {
        unknown i[459611] "index var" "insert auto destroy"
        (476088 'end of statement')
        (459613 'move' i[459611] _indexOfInterest[459585])
        (476089 'end of statement' i[459611])
        unknown yret[511462] "YVV" "temp"
        (511465 'move' yret[511462](511464 'deref' i[459611]))
        (511467 yield yret[511462])
        (476091 'end of statement' i[459611])
        label _continueLabel[459618]
        _indexOfInterest[459585]
        _iterator[459587]
      }
      label _breakLabel[459620]
    }
    (511460 return ret[511458])
  }
  function chpl_direct_counted_range_iter[459504](arg low[459508]:bool[10], arg count[459515] :
  (459512 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511471] "RVV" "temp"
    unknown call_tmp[624618] "maybe param" "maybe type" "temp"
    (624621 'move' call_tmp[624618](459520 call chpl_build_low_bounded_range low[459508]))
    const r[459518] "dead at end of block" "const" "insert auto destroy"
    (541246 'init var' r[459518] call_tmp[624618])
    (459523 'end of statement')
    {
      unknown _indexOfInterest[459525] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459527] "expr temp" "temp"
      unknown call_tmp[624623] "expr temp" "maybe param" "maybe type" "temp"
      (624626 'move' call_tmp[624623](459534 call # r[459518] count[459515]))
      (459529 'move' _iterator[459527](459532 call _getIterator call_tmp[624623]))
      Defer
      {
        {
          (459539 call _freeIterator _iterator[459527])
        }
      }
      { scopeless type
        (459543 'move' _indexOfInterest[459525](459546 call iteratorIndex _iterator[459527]))
      }
      ForLoop[459548]
      {
        unknown i[459551] "index var" "insert auto destroy"
        (476094 'end of statement')
        (459553 'move' i[459551] _indexOfInterest[459525])
        (476095 'end of statement' i[459551])
        unknown yret[511475] "YVV" "temp"
        (511478 'move' yret[511475](511477 'deref' i[459551]))
        (511480 yield yret[511475])
        (476097 'end of statement' i[459551])
        label _continueLabel[459558]
        _indexOfInterest[459525]
        _iterator[459527]
      }
      label _breakLabel[459560]
    }
    (511473 return ret[511471])
  }
  function chpl_direct_counted_range_iter[459444](arg low[459448]:bool[10], arg count[459455] :
  (459452 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511484] "RVV" "temp"
    unknown call_tmp[624628] "maybe param" "maybe type" "temp"
    (624631 'move' call_tmp[624628](459460 call chpl_build_low_bounded_range low[459448]))
    const r[459458] "dead at end of block" "const" "insert auto destroy"
    (541248 'init var' r[459458] call_tmp[624628])
    (459463 'end of statement')
    {
      unknown _indexOfInterest[459465] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459467] "expr temp" "temp"
      unknown call_tmp[624633] "expr temp" "maybe param" "maybe type" "temp"
      (624636 'move' call_tmp[624633](459474 call # r[459458] count[459455]))
      (459469 'move' _iterator[459467](459472 call _getIterator call_tmp[624633]))
      Defer
      {
        {
          (459479 call _freeIterator _iterator[459467])
        }
      }
      { scopeless type
        (459483 'move' _indexOfInterest[459465](459486 call iteratorIndex _iterator[459467]))
      }
      ForLoop[459488]
      {
        unknown i[459491] "index var" "insert auto destroy"
        (476100 'end of statement')
        (459493 'move' i[459491] _indexOfInterest[459465])
        (476101 'end of statement' i[459491])
        unknown yret[511488] "YVV" "temp"
        (511491 'move' yret[511488](511490 'deref' i[459491]))
        (511493 yield yret[511488])
        (476103 'end of statement' i[459491])
        label _continueLabel[459498]
        _indexOfInterest[459465]
        _iterator[459467]
      }
      label _breakLabel[459500]
    }
    (511486 return ret[511484])
  }
  function chpl_direct_counted_range_iter[75220](arg low[75217]:integral[199](?), arg count[75222]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511497] "RVV" "temp"
    unknown call_tmp[624638] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624641 'move' call_tmp[624638](75228 'typeof' low[75217]))
    unknown call_tmp[624643] "expr temp" "maybe param" "maybe type" "temp"
    (624646 'move' call_tmp[624643](75230 call _cast string[26] call_tmp[624638]))
    unknown call_tmp[624648] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624651 'move' call_tmp[624648](75234 'typeof' count[75222]))
    unknown call_tmp[624653] "expr temp" "maybe param" "maybe type" "temp"
    (624656 'move' call_tmp[624653](75236 call _cast string[26] call_tmp[624648]))
    (75238 call compilerError "can't apply '#' to a range with idxType " call_tmp[624643] " using a count of type " call_tmp[624653])
    (511499 return ret[511497])
  }
  function chpl_direct_counted_range_iter[75247](arg low[75245]:_any[178](?), arg count[75249]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511503] "RVV" "temp"
    (75254 call compilerError "Bound of 'low..' must be an integer")
    (511505 return ret[511503])
  }
  function chpl_direct_counted_range_iter_helper[75263](arg low[75261]:_any[178](?), arg count[75265]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511509] "RVV" "temp"
    unknown tmp[420642] "maybe param" "temp"
    unknown tmp[420663] "maybe param" "temp"
    (420674 'move' tmp[420663] 1)
    unknown call_tmp[624658] "expr temp" "maybe param" "maybe type" "temp"
    (624661 'move' call_tmp[624658](420676 call _cond_invalid tmp[420663]))
    if call_tmp[624658]
    {
      (420679 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558257] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558258] "maybe param" "temp"
    unknown call_tmp[624663] "expr temp" "maybe param" "maybe type" "temp"
    (624666 'move' call_tmp[624663](420664 call isTrue tmp[420663]))
    (558263 'move' tmp[558258](558261 call _cond_test call_tmp[624663]))
    if tmp[558258]
    {
      unknown tmp[558265] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624668] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624671 'move' call_tmp[624668](75270 'typeof' count[75265]))
      unknown call_tmp[624673] "expr temp" "maybe param" "maybe type" "temp"
      (624676 'move' call_tmp[624673](75272 call isIntType call_tmp[624668]))
      (558267 'move' tmp[558265](420667 call isTrue call_tmp[624673]))
      (558272 'move' tmp[558257](558269 '_paramFoldLogical' tmp[558258] tmp[558265]))
    }
    {
      (558277 'move' tmp[558257](558274 '_paramFoldLogical' tmp[558258] 0))
    }
    (420653 'move' tmp[420642] tmp[558257])
    unknown call_tmp[624678] "expr temp" "maybe param" "maybe type" "temp"
    (624681 'move' call_tmp[624678](420655 call _cond_invalid tmp[420642]))
    if call_tmp[624678]
    {
      (420658 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558284] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558285] "maybe param" "temp"
    unknown call_tmp[624683] "expr temp" "maybe param" "maybe type" "temp"
    (624686 'move' call_tmp[624683](420643 call isTrue tmp[420642]))
    (558290 'move' tmp[558285](558288 call _cond_test call_tmp[624683]))
    if tmp[558285]
    {
      unknown tmp[558292] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624688] "expr temp" "maybe param" "maybe type" "temp"
      (624691 'move' call_tmp[624688](75277 call < count[75265] 0))
      (558294 'move' tmp[558292](420646 call isTrue call_tmp[624688]))
      (558299 'move' tmp[558284](558296 '_paramFoldLogical' tmp[558285] tmp[558292]))
    }
    {
      (558304 'move' tmp[558284](558301 '_paramFoldLogical' tmp[558285] 0))
    }
    unknown call_tmp[624693] "expr temp" "maybe param" "maybe type" "temp"
    (624696 'move' call_tmp[624693](75289 call _cond_test tmp[558284]))
    if call_tmp[624693]
    {
      (75287 call boundsCheckHalt module=[255] HaltWrappers[209998] "With a negative count, the range must have a last index.")
      (357955 'referenced modules list' HaltWrappers[209998])
    }
    const tmp[75337] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[558311] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558312] "maybe param" "temp"
    unknown call_tmp[624698] "expr temp" "maybe param" "maybe type" "temp"
    (624701 'move' call_tmp[624698](75302 call == count[75265] 0))
    (558317 'move' tmp[558312](558315 call _cond_test call_tmp[624698]))
    if tmp[558312]
    {
      unknown tmp[558319] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624703] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624706 'move' call_tmp[624703](75313 'typeof' low[75261]))
      unknown call_tmp[624708] "expr temp" "maybe param" "maybe type" "temp"
      (624711 'move' call_tmp[624708](75307 call _cast uint(64)[115] low[75261]))
      unknown call_tmp[624713] "expr temp" "maybe param" "maybe type" "temp"
      (624716 'move' call_tmp[624713](75310 call - call_tmp[624708] 1))
      unknown call_tmp[624718] "expr temp" "maybe param" "maybe type" "temp"
      (624721 'move' call_tmp[624718](75314 call _cast call_tmp[624703] call_tmp[624713]))
      (558321 'move' tmp[558319](75317 call _build_tuple low[75261] call_tmp[624718]))
      (558326 'move' tmp[558311](558323 '_paramFoldLogical' tmp[558312] tmp[558319]))
    }
    {
      unknown tmp[558328] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624723] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624726 'move' call_tmp[624723](75323 'typeof' low[75261]))
      unknown call_tmp[624728] "expr temp" "maybe param" "maybe type" "temp"
      (624731 'move' call_tmp[624728](75324 call _cast call_tmp[624723] count[75265]))
      unknown call_tmp[624733] "expr temp" "maybe param" "maybe type" "temp"
      (624736 'move' call_tmp[624733](75327 call - call_tmp[624728] 1))
      unknown call_tmp[624738] "expr temp" "maybe param" "maybe type" "temp"
      (624741 'move' call_tmp[624738](75329 call + low[75261] call_tmp[624733]))
      (558330 'move' tmp[558328](75332 call _build_tuple low[75261] call_tmp[624738]))
      (558335 'move' tmp[558311](558332 '_paramFoldLogical' tmp[558312] tmp[558328]))
    }
    (541250 'init var' tmp[75337] tmp[558311])
    (75344 call _check_tuple_var_decl tmp[75337] 2)
    (476110 'end of statement')
    unknown call_tmp[624743] "maybe param" "maybe type" "temp"
    (624746 'move' call_tmp[624743](75338 call tmp[75337] 0))
    const start[75295] "dead at end of block" "const" "insert auto destroy"
    (541252 'init var' start[75295] call_tmp[624743])
    unknown call_tmp[624748] "maybe param" "maybe type" "temp"
    (624751 'move' call_tmp[624748](75341 call tmp[75337] 1))
    const end[75297] "dead at end of block" "const" "insert auto destroy"
    (541254 'init var' end[75297] call_tmp[624748])
    (75349 'end of statement')
    {
      unknown _indexOfInterest[75360] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[75361] "expr temp" "temp"
      unknown call_tmp[624753] "expr temp" "maybe param" "maybe type" "temp"
      (624756 'move' call_tmp[624753](75356 call chpl_direct_param_stride_range_iter start[75295] end[75297] 1))
      (75370 'move' _iterator[75361](75368 call _getIterator call_tmp[624753]))
      Defer
      {
        {
          (75387 call _freeIterator _iterator[75361])
        }
      }
      { scopeless type
        (75376 'move' _indexOfInterest[75360](75373 call iteratorIndex _iterator[75361]))
      }
      ForLoop[75362]
      {
        unknown i[75380] "index var" "insert auto destroy"
        (476112 'end of statement')
        (75382 'move' i[75380] _indexOfInterest[75360])
        (476113 'end of statement' i[75380])
        unknown yret[511513] "YVV" "temp"
        (511516 'move' yret[511513](511515 'deref' i[75380]))
        (511518 yield yret[511513])
        (476115 'end of statement' i[75380])
        label _continueLabel[75365]
        _indexOfInterest[75360]
        _iterator[75361]
      }
      label _breakLabel[75366]
    }
    (511511 return ret[511509])
  }
  function chpl_direct_pos_stride_range_iter[75403](arg low[75400]:_any[178](?), arg high[75405]:_any[178](?), arg stride[75407]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511522] "RVV" "temp"
    unknown call_tmp[624758] "expr temp" "maybe param" "maybe type" "temp"
    (624761 'move' call_tmp[624758](75551 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[624758]
    {
      unknown call_tmp[624763] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624766 'move' call_tmp[624763](459684 'typeof' low[75400]))
      (75414 call chpl_range_check_stride stride[75407] call_tmp[624763])
      (476117 'end of statement')
      unknown call_tmp[624768] "expr temp" "maybe param" "maybe type" "temp"
      (624771 'move' call_tmp[624768](75426 call _cond_test 1))
      if call_tmp[624768]
      {
        unknown call_tmp[624773] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (624776 'move' call_tmp[624773](459686 'typeof' low[75400]))
        (75424 call chpl_checkIfRangeIterWillOverflow call_tmp[624773] low[75400] high[75405] stride[75407])
      }
      unknown i[75432] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624778] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624781 'move' call_tmp[624778](459688 'typeof' low[75400]))
      (541256 'default init var' i[75432] call_tmp[624778])
      (75435 'end of statement')
      CForLoop[75478]
      {
        {
          unknown yret[511526] "YVV" "temp"
          (511529 'move' yret[511526](511528 'deref' i[75432]))
          (511531 yield yret[511526])
          (476119 'end of statement' i[75432])
        }
        label _continueLabel[75494]
        {
          (75479 '=' i[75432] low[75400])
          (476121 'end of statement' i[75432])
        }
        {
          (75482 '<=' i[75432] high[75405])
          (476123 'end of statement' i[75432])
        }
        {
          unknown call_tmp[624783] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624786 'move' call_tmp[624783](459690 'typeof' low[75400]))
          unknown call_tmp[624788] "expr temp" "maybe param" "maybe type" "temp"
          (624791 'move' call_tmp[624788](75488 call _cast call_tmp[624783] stride[75407]))
          (75485 '+=' i[75432] call_tmp[624788])
          (476125 'end of statement' i[75432])
        }
      }
      label _breakLabel[75495]
    }
    {
      {
        unknown _indexOfInterest[75516] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75517] "expr temp" "temp"
        unknown call_tmp[624793] "expr temp" "maybe param" "maybe type" "temp"
        (624796 'move' call_tmp[624793](75501 call chpl_build_bounded_range low[75400] high[75405]))
        unknown call_tmp[624798] "expr temp" "maybe param" "maybe type" "temp"
        (624801 'move' call_tmp[624798](75504 call chpl_by call_tmp[624793] stride[75407]))
        unknown call_tmp[624805] "expr temp" "maybe param" "maybe type" "temp"
        (624808 'move' call_tmp[624805](75512 call(75508 call (partial) generalIterator _mt[243] call_tmp[624798])))
        (75526 'move' _iterator[75517](75524 call _getIterator call_tmp[624805]))
        Defer
        {
          {
            (75543 call _freeIterator _iterator[75517])
          }
        }
        { scopeless type
          (75532 'move' _indexOfInterest[75516](75529 call iteratorIndex _iterator[75517]))
        }
        ForLoop[75518]
        {
          unknown i[75536] "index var" "insert auto destroy"
          (476128 'end of statement')
          (75538 'move' i[75536] _indexOfInterest[75516])
          (476129 'end of statement' i[75536])
          unknown yret[511533] "YVV" "temp"
          (511536 'move' yret[511533](511535 'deref' i[75536]))
          (511538 yield yret[511533])
          (476131 'end of statement' i[75536])
          label _continueLabel[75521]
          _indexOfInterest[75516]
          _iterator[75517]
        }
        label _breakLabel[75522]
      }
    }
    (511524 return ret[511522])
  }
  function chpl_direct_param_stride_range_iter[75565](arg low[75562]:_any[178](?), arg high[75567]:_any[178](?), param arg stride[75569]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511542] "RVV" "temp"
    unknown call_tmp[624810] "expr temp" "maybe param" "maybe type" "temp"
    (624813 'move' call_tmp[624810](75776 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[624810]
    {
      unknown call_tmp[624815] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624818 'move' call_tmp[624815](459692 'typeof' low[75562]))
      (75576 call chpl_range_check_stride stride[75569] call_tmp[624815])
      (476133 'end of statement')
      unknown i[75580] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624820] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624823 'move' call_tmp[624820](459694 'typeof' low[75562]))
      (541258 'default init var' i[75580] call_tmp[624820])
      (75583 'end of statement')
      unknown call_tmp[624825] "expr temp" "maybe param" "maybe type" "temp"
      (624828 'move' call_tmp[624825](75586 call > stride[75569] 0))
      unknown call_tmp[624830] "expr temp" "maybe param" "maybe type" "temp"
      (624833 'move' call_tmp[624830](75720 call _cond_test call_tmp[624825]))
      if call_tmp[624830]
      {
        unknown call_tmp[624835] "expr temp" "maybe param" "maybe type" "temp"
        (624838 'move' call_tmp[624835](75597 call _cond_test 1))
        if call_tmp[624835]
        {
          unknown call_tmp[624840] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624843 'move' call_tmp[624840](459696 'typeof' low[75562]))
          (75595 call chpl_checkIfRangeIterWillOverflow call_tmp[624840] low[75562] high[75567] stride[75569])
        }
        CForLoop[75629]
        {
          {
            unknown yret[511546] "YVV" "temp"
            (511549 'move' yret[511546](511548 'deref' i[75580]))
            (511551 yield yret[511546])
            (476135 'end of statement' i[75580])
          }
          label _continueLabel[75645]
          {
            (75630 '=' i[75580] low[75562])
            (476137 'end of statement' i[75580])
          }
          {
            (75633 '<=' i[75580] high[75567])
            (476139 'end of statement' i[75580])
          }
          {
            unknown call_tmp[624845] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (624848 'move' call_tmp[624845](459698 'typeof' low[75562]))
            unknown call_tmp[624850] "expr temp" "maybe param" "maybe type" "temp"
            (624853 'move' call_tmp[624850](75639 call _cast call_tmp[624845] stride[75569]))
            (75636 '+=' i[75580] call_tmp[624850])
            (476141 'end of statement' i[75580])
          }
        }
        label _breakLabel[75646]
      }
      {
        unknown call_tmp[624855] "expr temp" "maybe param" "maybe type" "temp"
        (624858 'move' call_tmp[624855](75651 call < stride[75569] 0))
        unknown call_tmp[624860] "expr temp" "maybe param" "maybe type" "temp"
        (624863 'move' call_tmp[624860](75716 call _cond_test call_tmp[624855]))
        if call_tmp[624860]
        {
          unknown call_tmp[624865] "expr temp" "maybe param" "maybe type" "temp"
          (624868 'move' call_tmp[624865](75664 call _cond_test 1))
          if call_tmp[624865]
          {
            unknown call_tmp[624870] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (624873 'move' call_tmp[624870](459700 'typeof' low[75562]))
            (75662 call chpl_checkIfRangeIterWillOverflow call_tmp[624870] low[75562] high[75567] stride[75569] high[75567] low[75562])
          }
          CForLoop[75696]
          {
            {
              unknown yret[511553] "YVV" "temp"
              (511556 'move' yret[511553](511555 'deref' i[75580]))
              (511558 yield yret[511553])
              (476144 'end of statement' i[75580])
            }
            label _continueLabel[75712]
            {
              (75697 '=' i[75580] high[75567])
              (476146 'end of statement' i[75580])
            }
            {
              (75700 '>=' i[75580] low[75562])
              (476148 'end of statement' i[75580])
            }
            {
              unknown call_tmp[624875] "expr temp" "maybe param" "maybe type" "temp" "type variable"
              (624878 'move' call_tmp[624875](459702 'typeof' low[75562]))
              unknown call_tmp[624880] "expr temp" "maybe param" "maybe type" "temp"
              (624883 'move' call_tmp[624880](75706 call _cast call_tmp[624875] stride[75569]))
              (75703 '+=' i[75580] call_tmp[624880])
              (476150 'end of statement' i[75580])
            }
          }
          label _breakLabel[75713]
        }
      }
    }
    {
      {
        unknown _indexOfInterest[75741] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75742] "expr temp" "temp"
        unknown call_tmp[624885] "expr temp" "maybe param" "maybe type" "temp"
        (624888 'move' call_tmp[624885](75728 call chpl_build_bounded_range low[75562] high[75567]))
        unknown call_tmp[624890] "expr temp" "maybe param" "maybe type" "temp"
        (624893 'move' call_tmp[624890](75731 call chpl_by call_tmp[624885] stride[75569]))
        unknown call_tmp[624897] "expr temp" "maybe param" "maybe type" "temp"
        (624900 'move' call_tmp[624897](75737 call(75733 call (partial) generalIterator _mt[243] call_tmp[624890])))
        (75751 'move' _iterator[75742](75749 call _getIterator call_tmp[624897]))
        Defer
        {
          {
            (75768 call _freeIterator _iterator[75742])
          }
        }
        { scopeless type
          (75757 'move' _indexOfInterest[75741](75754 call iteratorIndex _iterator[75742]))
        }
        ForLoop[75743]
        {
          unknown i[75761] "index var" "insert auto destroy"
          (476153 'end of statement')
          (75763 'move' i[75761] _indexOfInterest[75741])
          (476154 'end of statement' i[75761])
          unknown yret[511560] "YVV" "temp"
          (511563 'move' yret[511560](511562 'deref' i[75761]))
          (511565 yield yret[511560])
          (476156 'end of statement' i[75761])
          label _continueLabel[75746]
          _indexOfInterest[75741]
          _iterator[75742]
        }
        label _breakLabel[75747]
      }
    }
    (511544 return ret[511542])
  }
  function range[64316](?).these[75786](arg _mt[75791]:_MT[238], arg this[75788]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511569] "RVV" "temp"
    unknown call_tmp[624904] "expr temp" "maybe param" "maybe type" "temp"
    (624907 'move' call_tmp[624904](375525 call boundedType _mt[243] this[75788]))
    unknown call_tmp[624909] "expr temp" "maybe param" "maybe type" "temp"
    (624912 'move' call_tmp[624909](75805 call == call_tmp[624904] boundedNone[64211]))
    unknown call_tmp[624914] "expr temp" "maybe param" "maybe type" "temp"
    (624917 'move' call_tmp[624914](75828 call _cond_test call_tmp[624909]))
    if call_tmp[624914]
    {
      (75826 call compilerError "iteration over a range with no bounds")
    }
    unknown call_tmp[624919] "expr temp" "maybe param" "maybe type" "temp"
    (624922 'move' call_tmp[624919](75908 call _cond_test 1))
    if call_tmp[624919]
    {
      unknown call_tmp[624926] "expr temp" "maybe param" "maybe type" "temp"
      (624929 'move' call_tmp[624926](75840 call(75836 call (partial) hasFirst _mt[243] this[75788])))
      unknown call_tmp[624931] "expr temp" "maybe param" "maybe type" "temp"
      (624934 'move' call_tmp[624931](75841 call ! call_tmp[624926]))
      unknown call_tmp[624936] "expr temp" "maybe param" "maybe type" "temp"
      (624939 'move' call_tmp[624936](75867 call _cond_test call_tmp[624931]))
      if call_tmp[624936]
      {
        (75865 call boundsCheckHalt module=[255] HaltWrappers[209998] "iteration over range that has no first index")
        (357964 'referenced modules list' HaltWrappers[209998])
      }
      unknown call_tmp[624943] "expr temp" "maybe param" "maybe type" "temp"
      (624946 'move' call_tmp[624943](75878 call(75874 call (partial) isAmbiguous _mt[243] this[75788])))
      unknown call_tmp[624948] "expr temp" "maybe param" "maybe type" "temp"
      (624951 'move' call_tmp[624948](75903 call _cond_test call_tmp[624943]))
      if call_tmp[624948]
      {
        (75901 call boundsCheckHalt module=[255] HaltWrappers[209998] "these -- Attempt to iterate over a range with ambiguous alignment.")
        (357971 'referenced modules list' HaltWrappers[209998])
      }
    }
    unknown i[75913] "dead at end of block" "insert auto destroy"
    unknown call_tmp[624955] "expr temp" "maybe param" "maybe type" "temp"
    (624958 'move' call_tmp[624955](375530 call intIdxType _mt[243] this[75788]))
    (541260 'default init var' i[75913] call_tmp[624955])
    (75916 'end of statement')
    unknown call_tmp[624962] "expr temp" "maybe param" "maybe type" "temp"
    (624965 'move' call_tmp[624962](75919 call first _mt[243] this[75788]))
    unknown call_tmp[624967] "maybe param" "maybe type" "temp"
    (624970 'move' call_tmp[624967](75923 call chpl__idxToInt call_tmp[624962]))
    const start[75924] "dead at end of block" "const" "insert auto destroy"
    (541262 'init var' start[75924] call_tmp[624967])
    (75927 'end of statement')
    CForLoop[75953]
    {
      {
        unknown yret[511573] "YVV" "temp"
        unknown call_tmp[624974] "expr temp" "maybe param" "maybe type" "temp"
        (624977 'move' call_tmp[624974](75948 call(375534 call (partial) chpl_intToIdx _mt[243] this[75788]) i[75913]))
        (511576 'move' yret[511573](511575 'deref' call_tmp[624974]))
        (511578 yield yret[511573])
        (476161 'end of statement' i[75913])
      }
      label _continueLabel[75967]
      {
        (75954 '=' i[75913] start[75924])
        (476163 'end of statement' i[75913] start[75924])
      }
      {
        (748132 call chpl_statementLevelSymbol 1)
      }
      {
        unknown call_tmp[624981] "expr temp" "maybe param" "maybe type" "temp"
        (624984 'move' call_tmp[624981](375542 call intIdxType _mt[243] this[75788]))
        unknown call_tmp[624988] "expr temp" "maybe param" "maybe type" "temp"
        (624991 'move' call_tmp[624988](375546 call stride _mt[243] this[75788]))
        unknown call_tmp[624993] "expr temp" "maybe param" "maybe type" "temp"
        (624996 'move' call_tmp[624993](75961 call _cast call_tmp[624981] call_tmp[624988]))
        (75958 '+=' i[75913] call_tmp[624993])
        (476166 'end of statement' i[75913])
      }
    }
    label _breakLabel[75968]
    (511571 return ret[511569])
  }
  where {
    unknown call_tmp[625000] "expr temp" "maybe param" "maybe type" "temp"
    (625003 'move' call_tmp[625000](375520 call boundedType _mt[243] this[75788]))
    (75798 call != call_tmp[625000] bounded[64205])
  }
  function range[64316](?).these[75977](arg _mt[75982]:_MT[238], arg this[75979]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511582] "RVV" "temp"
    unknown call_tmp[625005] "expr temp" "maybe param" "maybe type" "temp"
    (625008 'move' call_tmp[625005](76164 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[625005]
    {
      unknown call_tmp[625010] "expr temp" "maybe param" "maybe type" "temp"
      (625013 'move' call_tmp[625010](76023 call _cond_test 1))
      if call_tmp[625010]
      {
        (76001 call(375564 call (partial) checkIfIterWillOverflow _mt[243] this[75979]))
        (476168 'end of statement')
        unknown call_tmp[625019] "expr temp" "maybe param" "maybe type" "temp"
        (625022 'move' call_tmp[625019](76009 call(76005 call (partial) isAmbiguous _mt[243] this[75979])))
        unknown call_tmp[625024] "expr temp" "maybe param" "maybe type" "temp"
        (625027 'move' call_tmp[625024](76018 call _cond_test call_tmp[625019]))
        if call_tmp[625024]
        {
          (76016 call boundsCheckHalt module=[255] HaltWrappers[209998] "these -- Attempt to iterate over a range with ambiguous alignment.")
          (357980 'referenced modules list' HaltWrappers[209998])
        }
      }
      unknown i[76029] "dead at end of block" "insert auto destroy"
      unknown call_tmp[625031] "expr temp" "maybe param" "maybe type" "temp"
      (625034 'move' call_tmp[625031](375568 call intIdxType _mt[243] this[75979]))
      (541264 'default init var' i[76029] call_tmp[625031])
      (76032 'end of statement')
      unknown call_tmp[625038] "maybe param" "maybe type" "temp"
      (625041 'move' call_tmp[625038](76034 call firstAsInt _mt[243] this[75979]))
      const start[76037] "dead at end of block" "const" "insert auto destroy"
      (541266 'init var' start[76037] call_tmp[625038])
      (76040 'end of statement')
      const end[76066] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558342] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558343] "maybe param" "temp"
      unknown call_tmp[625045] "expr temp" "maybe param" "maybe type" "temp"
      (625048 'move' call_tmp[625045](76043 call low _mt[243] this[75979]))
      unknown call_tmp[625052] "expr temp" "maybe param" "maybe type" "temp"
      (625055 'move' call_tmp[625052](76047 call high _mt[243] this[75979]))
      unknown call_tmp[625057] "expr temp" "maybe param" "maybe type" "temp"
      (625060 'move' call_tmp[625057](76050 call > call_tmp[625045] call_tmp[625052]))
      (558348 'move' tmp[558343](558346 call _cond_test call_tmp[625057]))
      if tmp[558343]
      {
        (558353 'move' tmp[558342](558350 '_paramFoldLogical' tmp[558343] start[76037]))
      }
      {
        unknown tmp[558355] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[625064] "expr temp" "maybe param" "maybe type" "temp"
        (625067 'move' call_tmp[625064](76054 call lastAsInt _mt[243] this[75979]))
        unknown call_tmp[625071] "expr temp" "maybe param" "maybe type" "temp"
        (625074 'move' call_tmp[625071](375581 call intIdxType _mt[243] this[75979]))
        unknown call_tmp[625078] "expr temp" "maybe param" "maybe type" "temp"
        (625081 'move' call_tmp[625078](375577 call stride _mt[243] this[75979]))
        unknown call_tmp[625083] "expr temp" "maybe param" "maybe type" "temp"
        (625086 'move' call_tmp[625083](76059 call _cast call_tmp[625071] call_tmp[625078]))
        (558357 'move' tmp[558355](76061 call + call_tmp[625064] call_tmp[625083]))
        (558362 'move' tmp[558342](558359 '_paramFoldLogical' tmp[558343] tmp[558355]))
      }
      unknown call_tmp[625090] "maybe param" "maybe type" "temp"
      (625093 'move' call_tmp[625090](375572 call intIdxType _mt[243] this[75979]))
      (541268 'init var' end[76066] tmp[558342] call_tmp[625090])
      (76069 'end of statement' start[76037])
      CForLoop[76099]
      {
        {
          unknown yret[511586] "YVV" "temp"
          unknown call_tmp[625097] "expr temp" "maybe param" "maybe type" "temp"
          (625100 'move' call_tmp[625097](76094 call(375585 call (partial) chpl_intToIdx _mt[243] this[75979]) i[76029]))
          (511589 'move' yret[511586](511588 'deref' call_tmp[625097]))
          (511591 yield yret[511586])
          (476171 'end of statement' i[76029])
        }
        label _continueLabel[76115]
        {
          (76100 '=' i[76029] start[76037])
          (476173 'end of statement' i[76029] start[76037])
        }
        {
          (76103 '!=' i[76029] end[76066])
          (476176 'end of statement' i[76029] end[76066])
        }
        {
          unknown call_tmp[625104] "expr temp" "maybe param" "maybe type" "temp"
          (625107 'move' call_tmp[625104](375595 call intIdxType _mt[243] this[75979]))
          unknown call_tmp[625111] "expr temp" "maybe param" "maybe type" "temp"
          (625114 'move' call_tmp[625111](375599 call stride _mt[243] this[75979]))
          unknown call_tmp[625116] "expr temp" "maybe param" "maybe type" "temp"
          (625119 'move' call_tmp[625116](76109 call _cast call_tmp[625104] call_tmp[625111]))
          (76106 '+=' i[76029] call_tmp[625116])
          (476179 'end of statement' i[76029])
        }
      }
      label _breakLabel[76116]
    }
    {
      {
        unknown _indexOfInterest[76129] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76130] "expr temp" "temp"
        unknown call_tmp[625123] "expr temp" "maybe param" "maybe type" "temp"
        (625126 'move' call_tmp[625123](76125 call(76121 call (partial) generalIterator _mt[243] this[75979])))
        (76139 'move' _iterator[76130](76137 call _getIterator call_tmp[625123]))
        Defer
        {
          {
            (76156 call _freeIterator _iterator[76130])
          }
        }
        { scopeless type
          (76145 'move' _indexOfInterest[76129](76142 call iteratorIndex _iterator[76130]))
        }
        ForLoop[76131]
        {
          unknown i[76149] "index var" "insert auto destroy"
          (476182 'end of statement')
          (76151 'move' i[76149] _indexOfInterest[76129])
          (476183 'end of statement' i[76149])
          unknown yret[511593] "YVV" "temp"
          (511596 'move' yret[511593](511595 'deref' i[76149]))
          (511598 yield yret[511593])
          (476185 'end of statement' i[76149])
          label _continueLabel[76134]
          _indexOfInterest[76129]
          _iterator[76130]
        }
        label _breakLabel[76135]
      }
    }
    (511584 return ret[511582])
  }
  where {
    unknown tmp[420684] "maybe param" "temp"
    unknown call_tmp[625130] "expr temp" "maybe param" "maybe type" "temp"
    (625133 'move' call_tmp[625130](375551 call boundedType _mt[243] this[75979]))
    (420695 'move' tmp[420684](75989 call == call_tmp[625130] bounded[64205]))
    unknown call_tmp[625135] "expr temp" "maybe param" "maybe type" "temp"
    (625138 'move' call_tmp[625135](420697 call _cond_invalid tmp[420684]))
    if call_tmp[625135]
    {
      (420700 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558369] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558370] "maybe param" "temp"
    unknown call_tmp[625140] "expr temp" "maybe param" "maybe type" "temp"
    (625143 'move' call_tmp[625140](420685 call isTrue tmp[420684]))
    (558375 'move' tmp[558370](558373 call _cond_test call_tmp[625140]))
    if tmp[558370]
    {
      unknown tmp[558377] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625147] "expr temp" "maybe param" "maybe type" "temp"
      (625150 'move' call_tmp[625147](375556 call stridable _mt[243] this[75979]))
      unknown call_tmp[625152] "expr temp" "maybe param" "maybe type" "temp"
      (625155 'move' call_tmp[625152](75993 call == call_tmp[625147] 1))
      (558379 'move' tmp[558377](420688 call isTrue call_tmp[625152]))
      (558384 'move' tmp[558369](558381 '_paramFoldLogical' tmp[558370] tmp[558377]))
    }
    {
      (558389 'move' tmp[558369](558386 '_paramFoldLogical' tmp[558370] 0))
    }
    (748246 call chpl_statementLevelSymbol tmp[558369])
  }
  function range[64316](?).these[76175](arg _mt[76180]:_MT[238], arg this[76177]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511602] "RVV" "temp"
    unknown call_tmp[625157] "expr temp" "maybe param" "maybe type" "temp"
    (625160 'move' call_tmp[625157](76322 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[625157]
    {
      unknown call_tmp[625162] "expr temp" "maybe param" "maybe type" "temp"
      (625165 'move' call_tmp[625162](76201 call _cond_test 1))
      if call_tmp[625162]
      {
        (76199 call(375616 call (partial) checkIfIterWillOverflow _mt[243] this[76177]))
      }
      unknown i[76208] "dead at end of block" "insert auto destroy"
      unknown call_tmp[625171] "expr temp" "maybe param" "maybe type" "temp"
      (625174 'move' call_tmp[625171](375620 call intIdxType _mt[243] this[76177]))
      (541270 'default init var' i[76208] call_tmp[625171])
      (76211 'end of statement')
      unknown call_tmp[625178] "maybe param" "maybe type" "temp"
      (625181 'move' call_tmp[625178](76213 call _low _mt[243] this[76177]))
      const start[76216] "dead at end of block" "const" "insert auto destroy"
      (541272 'init var' start[76216] call_tmp[625178])
      (76219 'end of statement')
      unknown call_tmp[625185] "maybe param" "maybe type" "temp"
      (625188 'move' call_tmp[625185](76221 call _high _mt[243] this[76177]))
      const end[76224] "dead at end of block" "const" "insert auto destroy"
      (541274 'init var' end[76224] call_tmp[625185])
      (76227 'end of statement')
      CForLoop[76257]
      {
        {
          unknown yret[511606] "YVV" "temp"
          unknown call_tmp[625192] "expr temp" "maybe param" "maybe type" "temp"
          (625195 'move' call_tmp[625192](76252 call(375624 call (partial) chpl_intToIdx _mt[243] this[76177]) i[76208]))
          (511609 'move' yret[511606](511608 'deref' call_tmp[625192]))
          (511611 yield yret[511606])
          (476188 'end of statement' i[76208])
        }
        label _continueLabel[76273]
        {
          (76258 '=' i[76208] start[76216])
          (476190 'end of statement' i[76208] start[76216])
        }
        {
          (76261 '<=' i[76208] end[76224])
          (476193 'end of statement' i[76208] end[76224])
        }
        {
          unknown call_tmp[625199] "expr temp" "maybe param" "maybe type" "temp"
          (625202 'move' call_tmp[625199](375634 call intIdxType _mt[243] this[76177]))
          unknown call_tmp[625206] "expr temp" "maybe param" "maybe type" "temp"
          (625209 'move' call_tmp[625206](375638 call stride _mt[243] this[76177]))
          unknown call_tmp[625211] "expr temp" "maybe param" "maybe type" "temp"
          (625214 'move' call_tmp[625211](76267 call _cast call_tmp[625199] call_tmp[625206]))
          (76264 '+=' i[76208] call_tmp[625211])
          (476196 'end of statement' i[76208])
        }
      }
      label _breakLabel[76274]
    }
    {
      {
        unknown _indexOfInterest[76287] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76288] "expr temp" "temp"
        unknown call_tmp[625218] "expr temp" "maybe param" "maybe type" "temp"
        (625221 'move' call_tmp[625218](76283 call(76279 call (partial) generalIterator _mt[243] this[76177])))
        (76297 'move' _iterator[76288](76295 call _getIterator call_tmp[625218]))
        Defer
        {
          {
            (76314 call _freeIterator _iterator[76288])
          }
        }
        { scopeless type
          (76303 'move' _indexOfInterest[76287](76300 call iteratorIndex _iterator[76288]))
        }
        ForLoop[76289]
        {
          unknown i[76307] "index var" "insert auto destroy"
          (476199 'end of statement')
          (76309 'move' i[76307] _indexOfInterest[76287])
          (476200 'end of statement' i[76307])
          unknown yret[511613] "YVV" "temp"
          (511616 'move' yret[511613](511615 'deref' i[76307]))
          (511618 yield yret[511613])
          (476202 'end of statement' i[76307])
          label _continueLabel[76292]
          _indexOfInterest[76287]
          _iterator[76288]
        }
        label _breakLabel[76293]
      }
    }
    (511604 return ret[511602])
  }
  where {
    unknown tmp[420705] "maybe param" "temp"
    unknown call_tmp[625225] "expr temp" "maybe param" "maybe type" "temp"
    (625228 'move' call_tmp[625225](375605 call boundedType _mt[243] this[76177]))
    (420716 'move' tmp[420705](76187 call == call_tmp[625225] bounded[64205]))
    unknown call_tmp[625230] "expr temp" "maybe param" "maybe type" "temp"
    (625233 'move' call_tmp[625230](420718 call _cond_invalid tmp[420705]))
    if call_tmp[625230]
    {
      (420721 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558396] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558397] "maybe param" "temp"
    unknown call_tmp[625235] "expr temp" "maybe param" "maybe type" "temp"
    (625238 'move' call_tmp[625235](420706 call isTrue tmp[420705]))
    (558402 'move' tmp[558397](558400 call _cond_test call_tmp[625235]))
    if tmp[558397]
    {
      unknown tmp[558404] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625242] "expr temp" "maybe param" "maybe type" "temp"
      (625245 'move' call_tmp[625242](375610 call stridable _mt[243] this[76177]))
      unknown call_tmp[625247] "expr temp" "maybe param" "maybe type" "temp"
      (625250 'move' call_tmp[625247](76191 call == call_tmp[625242] 0))
      (558406 'move' tmp[558404](420709 call isTrue call_tmp[625247]))
      (558411 'move' tmp[558396](558408 '_paramFoldLogical' tmp[558397] tmp[558404]))
    }
    {
      (558416 'move' tmp[558396](558413 '_paramFoldLogical' tmp[558397] 0))
    }
    (748248 call chpl_statementLevelSymbol tmp[558396])
  }
  function range[64316](?).generalIterator[76333](arg _mt[76338]:_MT[238], arg this[76335]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511622] "RVV" "temp"
    unknown tmp[420726] "maybe param" "temp"
    (420737 'move' tmp[420726] 1)
    unknown call_tmp[625252] "expr temp" "maybe param" "maybe type" "temp"
    (625255 'move' call_tmp[625252](420739 call _cond_invalid tmp[420726]))
    if call_tmp[625252]
    {
      (420742 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558423] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558424] "maybe param" "temp"
    unknown call_tmp[625257] "expr temp" "maybe param" "maybe type" "temp"
    (625260 'move' call_tmp[625257](420727 call isTrue tmp[420726]))
    (558429 'move' tmp[558424](558427 call _cond_test call_tmp[625257]))
    if tmp[558424]
    {
      unknown tmp[558431] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625264] "expr temp" "maybe param" "maybe type" "temp"
      (625267 'move' call_tmp[625264](76346 call(76342 call (partial) isAmbiguous _mt[243] this[76335])))
      (558433 'move' tmp[558431](420730 call isTrue call_tmp[625264]))
      (558438 'move' tmp[558423](558435 '_paramFoldLogical' tmp[558424] tmp[558431]))
    }
    {
      (558443 'move' tmp[558423](558440 '_paramFoldLogical' tmp[558424] 0))
    }
    unknown call_tmp[625269] "expr temp" "maybe param" "maybe type" "temp"
    (625272 'move' call_tmp[625269](76357 call _cond_test tmp[558423]))
    if call_tmp[625269]
    {
      (76355 call boundsCheckHalt module=[255] HaltWrappers[209998] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (357996 'referenced modules list' HaltWrappers[209998])
    }
    unknown i[76364] "dead at end of block" "insert auto destroy"
    unknown call_tmp[625276] "expr temp" "maybe param" "maybe type" "temp"
    (625279 'move' call_tmp[625276](375644 call intIdxType _mt[243] this[76335]))
    (541276 'default init var' i[76364] call_tmp[625276])
    (76367 'end of statement')
    unknown call_tmp[625283] "maybe param" "maybe type" "temp"
    (625286 'move' call_tmp[625283](76369 call first _mt[243] this[76335]))
    const start[76372] "dead at end of block" "const" "insert auto destroy"
    (541278 'init var' start[76372] call_tmp[625283])
    (76375 'end of statement')
    const end[76396] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558450] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558451] "maybe param" "temp"
    unknown call_tmp[625290] "expr temp" "maybe param" "maybe type" "temp"
    (625293 'move' call_tmp[625290](76377 call low _mt[243] this[76335]))
    unknown call_tmp[625297] "expr temp" "maybe param" "maybe type" "temp"
    (625300 'move' call_tmp[625297](76381 call high _mt[243] this[76335]))
    unknown call_tmp[625302] "expr temp" "maybe param" "maybe type" "temp"
    (625305 'move' call_tmp[625302](76384 call > call_tmp[625290] call_tmp[625297]))
    (558456 'move' tmp[558451](558454 call _cond_test call_tmp[625302]))
    if tmp[558451]
    {
      (558461 'move' tmp[558450](558458 '_paramFoldLogical' tmp[558451] start[76372]))
    }
    {
      unknown tmp[558463] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558465 'move' tmp[558463](76390 call last _mt[243] this[76335]))
      (558470 'move' tmp[558450](558467 '_paramFoldLogical' tmp[558451] tmp[558463]))
    }
    (541280 'init var' end[76396] tmp[558450])
    (76399 'end of statement' start[76372])
    CForLoop[76438]
    {
      {
        unknown yret[511626] "YVV" "temp"
        (511629 'move' yret[511626](511628 'deref' i[76364]))
        (511631 yield yret[511626])
        (476207 'end of statement' i[76364])
        unknown call_tmp[625309] "expr temp" "maybe param" "maybe type" "temp"
        (625312 'move' call_tmp[625309](76427 call == i[76364] end[76396]))
        unknown call_tmp[625314] "expr temp" "maybe param" "maybe type" "temp"
        (625317 'move' call_tmp[625314](76432 call _cond_test call_tmp[625309]))
        if call_tmp[625314]
        {
          break _breakLabel[76455] _breakLabel[76455]
        }
      }
      label _continueLabel[76454]
      {
        (76439 '=' i[76364] start[76372])
        (476209 'end of statement' i[76364] start[76372])
      }
      {
        unknown call_tmp[625321] "expr temp" "maybe param" "maybe type" "temp"
        (625324 'move' call_tmp[625321](375654 call high _mt[243] this[76335]))
        unknown call_tmp[625328] "expr temp" "maybe param" "maybe type" "temp"
        (625331 'move' call_tmp[625328](375658 call low _mt[243] this[76335]))
        (76442 '>=' call_tmp[625321] call_tmp[625328])
      }
      {
        unknown call_tmp[625335] "expr temp" "maybe param" "maybe type" "temp"
        (625338 'move' call_tmp[625335](375663 call intIdxType _mt[243] this[76335]))
        unknown call_tmp[625342] "expr temp" "maybe param" "maybe type" "temp"
        (625345 'move' call_tmp[625342](375667 call stride _mt[243] this[76335]))
        unknown call_tmp[625347] "expr temp" "maybe param" "maybe type" "temp"
        (625350 'move' call_tmp[625347](76448 call _cast call_tmp[625335] call_tmp[625342]))
        (76445 '+=' i[76364] call_tmp[625347])
        (476213 'end of statement' i[76364])
      }
    }
    label _breakLabel[76455]
    (511624 return ret[511622])
  }
  function range[64316](?).these[76467](arg _mt[76472]:_MT[238], arg this[76469]:range[64316](?) :
  range[64316](?), param arg tag[76464]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511635] "RVV" "temp"
    unknown call_tmp[625352] "expr temp" "maybe param" "maybe type" "temp"
    (625355 'move' call_tmp[625352](76489 call isBoundedRange this[76469]))
    unknown call_tmp[625357] "expr temp" "maybe param" "maybe type" "temp"
    (625360 'move' call_tmp[625357](76490 call ! call_tmp[625352]))
    unknown call_tmp[625362] "expr temp" "maybe param" "maybe type" "temp"
    (625365 'move' call_tmp[625362](76514 call _cond_test call_tmp[625357]))
    if call_tmp[625362]
    {
      (76511 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420768] "maybe param" "temp"
    (420779 'move' tmp[420768] 1)
    unknown call_tmp[625367] "expr temp" "maybe param" "maybe type" "temp"
    (625370 'move' call_tmp[625367](420781 call _cond_invalid tmp[420768]))
    if call_tmp[625367]
    {
      (420784 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558477] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558478] "maybe param" "temp"
    unknown call_tmp[625372] "expr temp" "maybe param" "maybe type" "temp"
    (625375 'move' call_tmp[625372](420769 call isTrue tmp[420768]))
    (558483 'move' tmp[558478](558481 call _cond_test call_tmp[625372]))
    if tmp[558478]
    {
      unknown tmp[558485] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625379] "expr temp" "maybe param" "maybe type" "temp"
      (625382 'move' call_tmp[625379](76525 call(76521 call (partial) isAmbiguous _mt[243] this[76469])))
      (558487 'move' tmp[558485](420772 call isTrue call_tmp[625379]))
      (558492 'move' tmp[558477](558489 '_paramFoldLogical' tmp[558478] tmp[558485]))
    }
    {
      (558497 'move' tmp[558477](558494 '_paramFoldLogical' tmp[558478] 0))
    }
    unknown call_tmp[625384] "expr temp" "maybe param" "maybe type" "temp"
    (625387 'move' call_tmp[625384](76537 call _cond_test tmp[558477]))
    if call_tmp[625384]
    {
      (76534 call boundsCheckHalt module=[255] HaltWrappers[209998] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358008 'referenced modules list' HaltWrappers[209998])
    }
    unknown call_tmp[625389] "expr temp" "maybe param" "maybe type" "temp"
    (625392 'move' call_tmp[625389](76564 call _cond_test debugChapelRange[64195]))
    if call_tmp[625389]
    {
      (76561 call chpl_debug_writeln "*** In range standalone iterator:")
    }
    unknown call_tmp[625396] "maybe param" "maybe type" "temp"
    (625399 'move' call_tmp[625396](76569 call size _mt[243] this[76469]))
    const len[76572] "dead at end of block" "const" "insert auto destroy"
    (541282 'init var' len[76572] call_tmp[625396])
    (76575 'end of statement')
    const numChunks[76603] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558504] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558505] "maybe param" "temp"
    unknown call_tmp[625401] "expr temp" "maybe param" "maybe type" "temp"
    (625404 'move' call_tmp[625401](76594 'task_get_serial'))
    (558510 'move' tmp[558505](558508 call _cond_test call_tmp[625401]))
    if tmp[558505]
    {
      (558515 'move' tmp[558504](558512 '_paramFoldLogical' tmp[558505] 1))
    }
    {
      unknown tmp[558517] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558519 'move' tmp[558517](76599 call _computeNumChunks len[76572]))
      (558524 'move' tmp[558504](558521 '_paramFoldLogical' tmp[558505] tmp[558517]))
    }
    (541284 'init var' numChunks[76603] tmp[558504])
    (76606 'end of statement' len[76572])
    unknown call_tmp[625406] "expr temp" "maybe param" "maybe type" "temp"
    (625409 'move' call_tmp[625406](76649 call _cond_test debugChapelRange[64195]))
    if call_tmp[625406]
    {
      (76646 call chpl_debug_writeln "*** RI: length=" len[76572] " numChunks=" numChunks[76603])
      (476220 'end of statement' len[76572] numChunks[76603])
    }
    unknown call_tmp[625411] "expr temp" "maybe param" "maybe type" "temp"
    (625414 'move' call_tmp[625411](76655 call <= numChunks[76603] 1))
    unknown call_tmp[625416] "expr temp" "maybe param" "maybe type" "temp"
    (625419 'move' call_tmp[625416](77304 call _cond_test call_tmp[625411]))
    if call_tmp[625416]
    {
      {
        unknown _indexOfInterest[76663] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76664] "expr temp" "temp"
        (76673 'move' _iterator[76664](76671 call _getIterator this[76469]))
        Defer
        {
          {
            (76689 call _freeIterator _iterator[76664])
          }
        }
        { scopeless type
          (76678 'move' _indexOfInterest[76663](76675 call iteratorIndex _iterator[76664]))
        }
        ForLoop[76665]
        {
          unknown i[76682] "index var" "insert auto destroy"
          (476224 'end of statement')
          (76684 'move' i[76682] _indexOfInterest[76663])
          (476225 'end of statement' i[76682])
          {
            unknown yret[511639] "YVV" "temp"
            (511642 'move' yret[511639](511641 'deref' i[76682]))
            (511644 yield yret[511639])
            (476227 'end of statement' i[76682])
          }
          label _continueLabel[76668]
          _indexOfInterest[76663]
          _iterator[76664]
        }
        label _breakLabel[76669]
      }
    }
    {
      {
        unknown tmpIter[76939] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[625421] "expr temp" "maybe param" "maybe type" "temp"
        (625424 'move' call_tmp[625421](76699 call chpl_build_low_bounded_range 0))
        (76942 'move' tmpIter[76939](76702 call # call_tmp[625421] numChunks[76603]))
        unknown isRngDomArr[77284] "maybe param" "temp"
        unknown tmp[420789] "maybe param" "temp"
        (420800 'move' tmp[420789](77286 call isBoundedRange tmpIter[76939]))
        unknown call_tmp[625426] "expr temp" "maybe param" "maybe type" "temp"
        (625429 'move' call_tmp[625426](420802 call _cond_invalid tmp[420789]))
        if call_tmp[625426]
        {
          (420805 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[558558] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558559] "maybe param" "temp"
        unknown call_tmp[625431] "expr temp" "maybe param" "maybe type" "temp"
        (625434 'move' call_tmp[625431](420790 call isTrue tmp[420789]))
        (558564 'move' tmp[558559](558562 call _cond_test call_tmp[625431]))
        if tmp[558559]
        {
          (558569 'move' tmp[558558](558566 '_paramFoldLogical' tmp[558559] 1))
        }
        {
          unknown tmp[420810] "maybe param" "temp"
          (420821 'move' tmp[420810](77289 call isDomain tmpIter[76939]))
          unknown call_tmp[625436] "expr temp" "maybe param" "maybe type" "temp"
          (625439 'move' call_tmp[625436](420823 call _cond_invalid tmp[420810]))
          if call_tmp[625436]
          {
            (420826 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558531] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558532] "maybe param" "temp"
          unknown call_tmp[625441] "expr temp" "maybe param" "maybe type" "temp"
          (625444 'move' call_tmp[625441](420811 call isTrue tmp[420810]))
          (558537 'move' tmp[558532](558535 call _cond_test call_tmp[625441]))
          if tmp[558532]
          {
            (558542 'move' tmp[558531](558539 '_paramFoldLogical' tmp[558532] 1))
          }
          {
            unknown tmp[558544] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[625446] "expr temp" "maybe param" "maybe type" "temp"
            (625449 'move' call_tmp[625446](77292 call isArray tmpIter[76939]))
            (558546 'move' tmp[558544](420815 call isTrue call_tmp[625446]))
            (558551 'move' tmp[558531](558548 '_paramFoldLogical' tmp[558532] tmp[558544]))
          }
          unknown tmp[558571] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (558573 'move' tmp[558571](420794 call isTrue tmp[558531]))
          (558578 'move' tmp[558558](558575 '_paramFoldLogical' tmp[558559] tmp[558571]))
        }
        (77299 'move' isRngDomArr[77284] tmp[558558])
        if isRngDomArr[77284]
        {
          const _coforallCount[77151] "const" "end count" "temp"
          (77220 'move' _coforallCount[77151](77217 call _endCountAlloc 1))
          unknown numTasks[77152] "temp"
          (77204 'move' numTasks[77152](77200 call size _mt[243] tmpIter[76939]))
          (77195 call _upEndCount _coforallCount[77151] 1 numTasks[77152])
          (476230 'end of statement')
          (77192 call chpl_resetTaskSpawn numTasks[77152])
          (476231 'end of statement')
          unknown _indexOfInterest[77159] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77160] "expr temp" "temp"
          (77169 'move' _iterator[77160](77167 call _getIterator tmpIter[76939]))
          Defer
          {
            {
              (77185 call _freeIterator _iterator[77160])
            }
          }
          { scopeless type
            (77174 'move' _indexOfInterest[77159](77171 call iteratorIndex _iterator[77160]))
          }
          ForLoop[77161]
          {
            unknown chunk[77178] "coforall index var" "index var" "insert auto destroy"
            (476233 'end of statement')
            (77180 'move' chunk[77178] _indexOfInterest[77159])
            (476234 'end of statement' chunk[77178])
            {
              {
                unknown call_tmp[625455] "expr temp" "maybe param" "maybe type" "temp"
                (625458 'move' call_tmp[625455](375743 call stridable _mt[243] this[76469]))
                unknown call_tmp[625460] "expr temp" "maybe param" "maybe type" "temp"
                (625463 'move' call_tmp[625460](76946 call _cond_test call_tmp[625455]))
                if call_tmp[625460]
                {
                  unknown call_tmp[625465] "expr temp" "maybe param" "maybe type" "temp"
                  (625468 'move' call_tmp[625465](76957 call - len[76572] 1))
                  unknown call_tmp[625470] "maybe param" "maybe type" "temp"
                  (625473 'move' call_tmp[625470](76952 call _computeBlock len[76572] numChunks[76603] chunk[77178] call_tmp[625465]))
                  const tmp[76950] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541286 'init var' tmp[76950] call_tmp[625470])
                  (76962 call _check_tuple_var_decl tmp[76950] 2)
                  (476236 'end of statement')
                  unknown call_tmp[625475] "maybe param" "maybe type" "temp"
                  (625478 'move' call_tmp[625475](76967 call tmp[76950] 0))
                  const lo[76965] "dead at end of block" "const" "insert auto destroy"
                  (541288 'init var' lo[76965] call_tmp[625475])
                  unknown call_tmp[625480] "maybe param" "maybe type" "temp"
                  (625483 'move' call_tmp[625480](76972 call tmp[76950] 1))
                  const hi[76970] "dead at end of block" "const" "insert auto destroy"
                  (541290 'init var' hi[76970] call_tmp[625480])
                  (76975 'end of statement')
                  unknown call_tmp[625485] "expr temp" "maybe param" "maybe type" "temp"
                  (625488 'move' call_tmp[625485](76982 call - lo[76965] 1))
                  unknown call_tmp[625490] "maybe param" "maybe type" "temp"
                  (625493 'move' call_tmp[625490](76979 call - hi[76970] call_tmp[625485]))
                  const mylen[76977] "dead at end of block" "const" "insert auto destroy"
                  (541292 'init var' mylen[76977] call_tmp[625490])
                  (76986 'end of statement')
                  unknown call_tmp[625497] "maybe param" "maybe type" "temp"
                  (625500 'move' call_tmp[625497](76990 call(375753 call (partial) orderToIndex _mt[243] this[76469]) lo[76965]))
                  unknown low[76988] "dead at end of block" "insert auto destroy"
                  (541294 'init var' low[76988] call_tmp[625497])
                  (76993 'end of statement')
                  unknown call_tmp[625506] "expr temp" "maybe param" "maybe type" "temp"
                  (625509 'move' call_tmp[625506](375762 call strType _mt[243] this[76469]))
                  unknown call_tmp[625511] "expr temp" "maybe param" "maybe type" "temp"
                  (625514 'move' call_tmp[625511](77004 call chpl__idxToInt low[76988]))
                  unknown call_tmp[625516] "expr temp" "maybe param" "maybe type" "temp"
                  (625519 'move' call_tmp[625516](77001 call _cast call_tmp[625506] call_tmp[625511]))
                  unknown call_tmp[625523] "expr temp" "maybe param" "maybe type" "temp"
                  (625526 'move' call_tmp[625523](375767 call stride _mt[243] this[76469]))
                  unknown call_tmp[625530] "expr temp" "maybe param" "maybe type" "temp"
                  (625533 'move' call_tmp[625530](375771 call strType _mt[243] this[76469]))
                  unknown call_tmp[625535] "expr temp" "maybe param" "maybe type" "temp"
                  (625538 'move' call_tmp[625535](77013 call - mylen[76977] 1))
                  unknown call_tmp[625540] "expr temp" "maybe param" "maybe type" "temp"
                  (625543 'move' call_tmp[625540](77010 call _cast call_tmp[625530] call_tmp[625535]))
                  unknown call_tmp[625545] "expr temp" "maybe param" "maybe type" "temp"
                  (625548 'move' call_tmp[625545](77007 call * call_tmp[625523] call_tmp[625540]))
                  unknown call_tmp[625550] "expr temp" "maybe param" "maybe type" "temp"
                  (625553 'move' call_tmp[625550](76999 call + call_tmp[625516] call_tmp[625545]))
                  unknown call_tmp[625555] "maybe param" "maybe type" "temp"
                  (625558 'move' call_tmp[625555](76997 call(375758 call (partial) chpl_intToIdx _mt[243] this[76469]) call_tmp[625550]))
                  unknown high[76995] "dead at end of block" "insert auto destroy"
                  (541296 'init var' high[76995] call_tmp[625555])
                  (77017 'end of statement' hi[76970] lo[76965] lo[76965] low[76988] mylen[76977])
                  unknown call_tmp[625562] "expr temp" "maybe param" "maybe type" "temp"
                  (625565 'move' call_tmp[625562](375776 call stride _mt[243] this[76469]))
                  unknown call_tmp[625567] "expr temp" "maybe param" "maybe type" "temp"
                  (625570 'move' call_tmp[625567](77021 call < call_tmp[625562] 0))
                  unknown call_tmp[625572] "expr temp" "maybe param" "maybe type" "temp"
                  (625575 'move' call_tmp[625572](77019 call _cond_test call_tmp[625567]))
                  if call_tmp[625572]
                  {
                    (77027 call <=> low[76988] high[76995])
                    (476242 'end of statement' low[76988] high[76995])
                  }
                  {
                    unknown _indexOfInterest[77032] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77034] "expr temp" "temp"
                    unknown call_tmp[625579] "expr temp" "maybe param" "maybe type" "temp"
                    (625582 'move' call_tmp[625579](375784 call stride _mt[243] this[76469]))
                    unknown call_tmp[625584] "expr temp" "maybe param" "maybe type" "temp"
                    (625587 'move' call_tmp[625584](77041 call chpl_direct_range_iter low[76988] high[76995] call_tmp[625579]))
                    (77036 'move' _iterator[77034](77039 call _getIterator call_tmp[625584]))
                    Defer
                    {
                      {
                        (77047 call _freeIterator _iterator[77034])
                      }
                    }
                    { scopeless type
                      (77051 'move' _indexOfInterest[77032](77054 call iteratorIndex _iterator[77034]))
                    }
                    ForLoop[77056]
                    {
                      unknown i[77059] "index var" "insert auto destroy"
                      (476246 'end of statement')
                      (77061 'move' i[77059] _indexOfInterest[77032])
                      (476247 'end of statement' i[77059])
                      {
                        unknown yret[511646] "YVV" "temp"
                        (511649 'move' yret[511646](511648 'deref' i[77059]))
                        (511651 yield yret[511646])
                        (476249 'end of statement' i[77059])
                      }
                      label _continueLabel[77067]
                      _indexOfInterest[77032]
                      _iterator[77034]
                    }
                    label _breakLabel[77069]
                  }
                }
                {
                  unknown call_tmp[625591] "expr temp" "maybe param" "maybe type" "temp"
                  (625594 'move' call_tmp[625591](77080 call _high _mt[243] this[76469]))
                  unknown call_tmp[625598] "expr temp" "maybe param" "maybe type" "temp"
                  (625601 'move' call_tmp[625598](77084 call _low _mt[243] this[76469]))
                  unknown call_tmp[625605] "expr temp" "maybe param" "maybe type" "temp"
                  (625608 'move' call_tmp[625605](77088 call _low _mt[243] this[76469]))
                  unknown call_tmp[625610] "maybe param" "maybe type" "temp"
                  (625613 'move' call_tmp[625610](77075 call _computeBlock len[76572] numChunks[76603] chunk[77178] call_tmp[625591] call_tmp[625598] call_tmp[625605]))
                  const tmp[77073] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541298 'init var' tmp[77073] call_tmp[625610])
                  (77093 call _check_tuple_var_decl tmp[77073] 2)
                  (476251 'end of statement')
                  unknown call_tmp[625615] "maybe param" "maybe type" "temp"
                  (625618 'move' call_tmp[625615](77098 call tmp[77073] 0))
                  const lo[77096] "dead at end of block" "const" "insert auto destroy"
                  (541300 'init var' lo[77096] call_tmp[625615])
                  unknown call_tmp[625620] "maybe param" "maybe type" "temp"
                  (625623 'move' call_tmp[625620](77103 call tmp[77073] 1))
                  const hi[77101] "dead at end of block" "const" "insert auto destroy"
                  (541302 'init var' hi[77101] call_tmp[625620])
                  (77106 'end of statement')
                  {
                    unknown _indexOfInterest[77108] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77110] "expr temp" "temp"
                    unknown call_tmp[625625] "expr temp" "maybe param" "maybe type" "temp"
                    (625628 'move' call_tmp[625625](77117 call chpl_direct_range_iter lo[77096] hi[77101] 1))
                    (77112 'move' _iterator[77110](77115 call _getIterator call_tmp[625625]))
                    Defer
                    {
                      {
                        (77123 call _freeIterator _iterator[77110])
                      }
                    }
                    { scopeless type
                      (77127 'move' _indexOfInterest[77108](77130 call iteratorIndex _iterator[77110]))
                    }
                    ForLoop[77132]
                    {
                      unknown i[77135] "index var" "insert auto destroy"
                      (476253 'end of statement')
                      (77137 'move' i[77135] _indexOfInterest[77108])
                      (476254 'end of statement' i[77135])
                      {
                        unknown yret[511653] "YVV" "temp"
                        unknown call_tmp[625632] "expr temp" "maybe param" "maybe type" "temp"
                        (625635 'move' call_tmp[625632](77143 call(375794 call (partial) chpl_intToIdx _mt[243] this[76469]) i[77135]))
                        (511656 'move' yret[511653](511655 'deref' call_tmp[625632]))
                        (511658 yield yret[511653])
                        (476256 'end of statement' i[77135])
                      }
                      label _continueLabel[77145]
                      _indexOfInterest[77108]
                      _iterator[77110]
                    }
                    label _breakLabel[77147]
                  }
                }
              }
              (77154 call _downEndCount _coforallCount[77151] nil[44])
              (77153 'coforall loop')
            }
            label _continueLabel[77164]
            _indexOfInterest[77159]
            _iterator[77160]
          }
          label _breakLabel[77165]
          Defer
          {
            {
              (77207 call _endCountFree _coforallCount[77151])
            }
          }
          (77212 call _waitEndCount _coforallCount[77151] 1 numTasks[77152])
        }
        {
          const _coforallCount[77224] "const" "end count" "temp"
          (77281 'move' _coforallCount[77224](77278 call _endCountAlloc 1))
          unknown _indexOfInterest[77232] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77233] "expr temp" "temp"
          (77242 'move' _iterator[77233](77240 call _getIterator tmpIter[76939]))
          Defer
          {
            {
              (77258 call _freeIterator _iterator[77233])
            }
          }
          { scopeless type
            (77247 'move' _indexOfInterest[77232](77244 call iteratorIndex _iterator[77233]))
          }
          ForLoop[77234]
          {
            unknown chunk[77251] "coforall index var" "index var" "insert auto destroy"
            (476262 'end of statement')
            (77253 'move' chunk[77251] _indexOfInterest[77232])
            (476263 'end of statement' chunk[77251])
            (77265 call _upEndCount _coforallCount[77224] 1)
            (476265 'end of statement')
            {
              {
                unknown call_tmp[625639] "expr temp" "maybe param" "maybe type" "temp"
                (625642 'move' call_tmp[625639](375686 call stridable _mt[243] this[76469]))
                unknown call_tmp[625644] "expr temp" "maybe param" "maybe type" "temp"
                (625647 'move' call_tmp[625644](76934 call _cond_test call_tmp[625639]))
                if call_tmp[625644]
                {
                  unknown call_tmp[625649] "expr temp" "maybe param" "maybe type" "temp"
                  (625652 'move' call_tmp[625649](76717 call - len[76572] 1))
                  unknown call_tmp[625654] "maybe param" "maybe type" "temp"
                  (625657 'move' call_tmp[625654](76719 call _computeBlock len[76572] numChunks[76603] chunk[77251] call_tmp[625649]))
                  const tmp[76720] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541304 'init var' tmp[76720] call_tmp[625654])
                  (76727 call _check_tuple_var_decl tmp[76720] 2)
                  (476266 'end of statement')
                  unknown call_tmp[625659] "maybe param" "maybe type" "temp"
                  (625662 'move' call_tmp[625659](76721 call tmp[76720] 0))
                  const lo[76705] "dead at end of block" "const" "insert auto destroy"
                  (541306 'init var' lo[76705] call_tmp[625659])
                  unknown call_tmp[625664] "maybe param" "maybe type" "temp"
                  (625667 'move' call_tmp[625664](76724 call tmp[76720] 1))
                  const hi[76707] "dead at end of block" "const" "insert auto destroy"
                  (541308 'init var' hi[76707] call_tmp[625664])
                  (76732 'end of statement')
                  unknown call_tmp[625669] "expr temp" "maybe param" "maybe type" "temp"
                  (625672 'move' call_tmp[625669](76737 call - lo[76705] 1))
                  unknown call_tmp[625674] "maybe param" "maybe type" "temp"
                  (625677 'move' call_tmp[625674](76739 call - hi[76707] call_tmp[625669]))
                  const mylen[76741] "dead at end of block" "const" "insert auto destroy"
                  (541310 'init var' mylen[76741] call_tmp[625674])
                  (76744 'end of statement')
                  unknown call_tmp[625681] "maybe param" "maybe type" "temp"
                  (625684 'move' call_tmp[625681](76748 call(375696 call (partial) orderToIndex _mt[243] this[76469]) lo[76705]))
                  unknown low[76749] "dead at end of block" "insert auto destroy"
                  (541312 'init var' low[76749] call_tmp[625681])
                  (76752 'end of statement')
                  unknown call_tmp[625690] "expr temp" "maybe param" "maybe type" "temp"
                  (625693 'move' call_tmp[625690](375706 call strType _mt[243] this[76469]))
                  unknown call_tmp[625695] "expr temp" "maybe param" "maybe type" "temp"
                  (625698 'move' call_tmp[625695](76757 call chpl__idxToInt low[76749]))
                  unknown call_tmp[625700] "expr temp" "maybe param" "maybe type" "temp"
                  (625703 'move' call_tmp[625700](76759 call _cast call_tmp[625690] call_tmp[625695]))
                  unknown call_tmp[625707] "expr temp" "maybe param" "maybe type" "temp"
                  (625710 'move' call_tmp[625707](375710 call stride _mt[243] this[76469]))
                  unknown call_tmp[625714] "expr temp" "maybe param" "maybe type" "temp"
                  (625717 'move' call_tmp[625714](375715 call strType _mt[243] this[76469]))
                  unknown call_tmp[625719] "expr temp" "maybe param" "maybe type" "temp"
                  (625722 'move' call_tmp[625719](76764 call - mylen[76741] 1))
                  unknown call_tmp[625724] "expr temp" "maybe param" "maybe type" "temp"
                  (625727 'move' call_tmp[625724](76767 call _cast call_tmp[625714] call_tmp[625719]))
                  unknown call_tmp[625729] "expr temp" "maybe param" "maybe type" "temp"
                  (625732 'move' call_tmp[625729](76769 call * call_tmp[625707] call_tmp[625724]))
                  unknown call_tmp[625734] "expr temp" "maybe param" "maybe type" "temp"
                  (625737 'move' call_tmp[625734](76771 call + call_tmp[625700] call_tmp[625729]))
                  unknown call_tmp[625739] "maybe param" "maybe type" "temp"
                  (625742 'move' call_tmp[625739](76774 call(375701 call (partial) chpl_intToIdx _mt[243] this[76469]) call_tmp[625734]))
                  unknown high[76775] "dead at end of block" "insert auto destroy"
                  (541314 'init var' high[76775] call_tmp[625739])
                  (76778 'end of statement' hi[76707] lo[76705] lo[76705] low[76749] mylen[76741])
                  unknown call_tmp[625746] "expr temp" "maybe param" "maybe type" "temp"
                  (625749 'move' call_tmp[625746](375719 call stride _mt[243] this[76469]))
                  unknown call_tmp[625751] "expr temp" "maybe param" "maybe type" "temp"
                  (625754 'move' call_tmp[625751](76781 call < call_tmp[625746] 0))
                  unknown call_tmp[625756] "expr temp" "maybe param" "maybe type" "temp"
                  (625759 'move' call_tmp[625756](76788 call _cond_test call_tmp[625751]))
                  if call_tmp[625756]
                  {
                    (76785 call <=> low[76749] high[76775])
                    (476272 'end of statement' low[76749] high[76775])
                  }
                  {
                    unknown _indexOfInterest[76805] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76806] "expr temp" "temp"
                    unknown call_tmp[625763] "expr temp" "maybe param" "maybe type" "temp"
                    (625766 'move' call_tmp[625763](375726 call stride _mt[243] this[76469]))
                    unknown call_tmp[625768] "expr temp" "maybe param" "maybe type" "temp"
                    (625771 'move' call_tmp[625768](76824 call chpl_direct_range_iter low[76749] high[76775] call_tmp[625763]))
                    (76815 'move' _iterator[76806](76813 call _getIterator call_tmp[625768]))
                    Defer
                    {
                      {
                        (76840 call _freeIterator _iterator[76806])
                      }
                    }
                    { scopeless type
                      (76829 'move' _indexOfInterest[76805](76826 call iteratorIndex _iterator[76806]))
                    }
                    ForLoop[76807]
                    {
                      unknown i[76833] "index var" "insert auto destroy"
                      (476276 'end of statement')
                      (76835 'move' i[76833] _indexOfInterest[76805])
                      (476277 'end of statement' i[76833])
                      {
                        unknown yret[511660] "YVV" "temp"
                        (511663 'move' yret[511660](511662 'deref' i[76833]))
                        (511665 yield yret[511660])
                        (476279 'end of statement' i[76833])
                      }
                      label _continueLabel[76810]
                      _indexOfInterest[76805]
                      _iterator[76806]
                    }
                    label _breakLabel[76811]
                  }
                }
                {
                  unknown call_tmp[625775] "expr temp" "maybe param" "maybe type" "temp"
                  (625778 'move' call_tmp[625775](76858 call _high _mt[243] this[76469]))
                  unknown call_tmp[625782] "expr temp" "maybe param" "maybe type" "temp"
                  (625785 'move' call_tmp[625782](76862 call _low _mt[243] this[76469]))
                  unknown call_tmp[625789] "expr temp" "maybe param" "maybe type" "temp"
                  (625792 'move' call_tmp[625789](76866 call _low _mt[243] this[76469]))
                  unknown call_tmp[625794] "maybe param" "maybe type" "temp"
                  (625797 'move' call_tmp[625794](76869 call _computeBlock len[76572] numChunks[76603] chunk[77251] call_tmp[625775] call_tmp[625782] call_tmp[625789]))
                  const tmp[76870] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541316 'init var' tmp[76870] call_tmp[625794])
                  (76877 call _check_tuple_var_decl tmp[76870] 2)
                  (476281 'end of statement')
                  unknown call_tmp[625799] "maybe param" "maybe type" "temp"
                  (625802 'move' call_tmp[625799](76871 call tmp[76870] 0))
                  const lo[76847] "dead at end of block" "const" "insert auto destroy"
                  (541318 'init var' lo[76847] call_tmp[625799])
                  unknown call_tmp[625804] "maybe param" "maybe type" "temp"
                  (625807 'move' call_tmp[625804](76874 call tmp[76870] 1))
                  const hi[76849] "dead at end of block" "const" "insert auto destroy"
                  (541320 'init var' hi[76849] call_tmp[625804])
                  (76882 'end of statement')
                  {
                    unknown _indexOfInterest[76896] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76897] "expr temp" "temp"
                    unknown call_tmp[625809] "expr temp" "maybe param" "maybe type" "temp"
                    (625812 'move' call_tmp[625809](76911 call chpl_direct_range_iter lo[76847] hi[76849] 1))
                    (76906 'move' _iterator[76897](76904 call _getIterator call_tmp[625809]))
                    Defer
                    {
                      {
                        (76927 call _freeIterator _iterator[76897])
                      }
                    }
                    { scopeless type
                      (76916 'move' _indexOfInterest[76896](76913 call iteratorIndex _iterator[76897]))
                    }
                    ForLoop[76898]
                    {
                      unknown i[76920] "index var" "insert auto destroy"
                      (476283 'end of statement')
                      (76922 'move' i[76920] _indexOfInterest[76896])
                      (476284 'end of statement' i[76920])
                      {
                        unknown yret[511667] "YVV" "temp"
                        unknown call_tmp[625816] "expr temp" "maybe param" "maybe type" "temp"
                        (625819 'move' call_tmp[625816](76892 call(375735 call (partial) chpl_intToIdx _mt[243] this[76469]) i[76920]))
                        (511670 'move' yret[511667](511669 'deref' call_tmp[625816]))
                        (511672 yield yret[511667])
                        (476286 'end of statement' i[76920])
                      }
                      label _continueLabel[76901]
                      _indexOfInterest[76896]
                      _iterator[76897]
                    }
                    label _breakLabel[76902]
                  }
                }
              }
              (77227 call _downEndCount _coforallCount[77224] nil[44])
              (77226 'coforall loop')
            }
            label _continueLabel[77237]
            _indexOfInterest[77232]
            _iterator[77233]
          }
          label _breakLabel[77238]
          Defer
          {
            {
              (77269 call _endCountFree _coforallCount[77224])
            }
          }
          (77274 call _waitEndCount _coforallCount[77224] 1)
        }
      }
    }
    (511637 return ret[511635])
  }
  where {
    unknown tmp[420747] "maybe param" "temp"
    (420758 'move' tmp[420747](76479 call == tag[76464] standalone[451]))
    unknown call_tmp[625821] "expr temp" "maybe param" "maybe type" "temp"
    (625824 'move' call_tmp[625821](420760 call _cond_invalid tmp[420747]))
    if call_tmp[625821]
    {
      (420763 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558585] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558586] "maybe param" "temp"
    unknown call_tmp[625826] "expr temp" "maybe param" "maybe type" "temp"
    (625829 'move' call_tmp[625826](420748 call isTrue tmp[420747]))
    (558591 'move' tmp[558586](558589 call _cond_test call_tmp[625826]))
    if tmp[558586]
    {
      unknown tmp[558593] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625831] "expr temp" "maybe param" "maybe type" "temp"
      (625834 'move' call_tmp[625831](76482 call ! localeModelHasSublocales[187403]))
      (558595 'move' tmp[558593](420751 call isTrue call_tmp[625831]))
      (558600 'move' tmp[558585](558597 '_paramFoldLogical' tmp[558586] tmp[558593]))
    }
    {
      (558605 'move' tmp[558585](558602 '_paramFoldLogical' tmp[558586] 0))
    }
    (748250 call chpl_statementLevelSymbol tmp[558585])
  }
  function range[64316](?).these[77318](arg _mt[77323]:_MT[238], arg this[77320]:range[64316](?) :
  range[64316](?), param arg tag[77315]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511676] "RVV" "temp"
    unknown call_tmp[625836] "expr temp" "maybe param" "maybe type" "temp"
    (625839 'move' call_tmp[625836](77335 call isBoundedRange this[77320]))
    unknown call_tmp[625841] "expr temp" "maybe param" "maybe type" "temp"
    (625844 'move' call_tmp[625841](77336 call ! call_tmp[625836]))
    unknown call_tmp[625846] "expr temp" "maybe param" "maybe type" "temp"
    (625849 'move' call_tmp[625846](77343 call _cond_test call_tmp[625841]))
    if call_tmp[625846]
    {
      (77341 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420831] "maybe param" "temp"
    (420842 'move' tmp[420831] 1)
    unknown call_tmp[625851] "expr temp" "maybe param" "maybe type" "temp"
    (625854 'move' call_tmp[625851](420844 call _cond_invalid tmp[420831]))
    if call_tmp[625851]
    {
      (420847 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558612] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558613] "maybe param" "temp"
    unknown call_tmp[625856] "expr temp" "maybe param" "maybe type" "temp"
    (625859 'move' call_tmp[625856](420832 call isTrue tmp[420831]))
    (558618 'move' tmp[558613](558616 call _cond_test call_tmp[625856]))
    if tmp[558613]
    {
      unknown tmp[558620] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625863] "expr temp" "maybe param" "maybe type" "temp"
      (625866 'move' call_tmp[625863](77355 call(77351 call (partial) isAmbiguous _mt[243] this[77320])))
      (558622 'move' tmp[558620](420835 call isTrue call_tmp[625863]))
      (558627 'move' tmp[558612](558624 '_paramFoldLogical' tmp[558613] tmp[558620]))
    }
    {
      (558632 'move' tmp[558612](558629 '_paramFoldLogical' tmp[558613] 0))
    }
    unknown call_tmp[625868] "expr temp" "maybe param" "maybe type" "temp"
    (625871 'move' call_tmp[625868](77366 call _cond_test tmp[558612]))
    if call_tmp[625868]
    {
      (77364 call boundsCheckHalt module=[255] HaltWrappers[209998] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358023 'referenced modules list' HaltWrappers[209998])
    }
    unknown call_tmp[625873] "expr temp" "maybe param" "maybe type" "temp"
    (625876 'move' call_tmp[625873](77393 call _cond_test debugChapelRange[64195]))
    if call_tmp[625873]
    {
      (77391 call chpl_debug_writeln "*** In range leader:")
    }
    unknown call_tmp[625878] "expr temp" "maybe param" "maybe type" "temp"
    (625881 'move' call_tmp[625878](358028 call here[90435]))
    unknown call_tmp[625885] "maybe param" "maybe type" "temp"
    (625888 'move' call_tmp[625885](77405 call(77401 call (partial) getChildCount _mt[243] call_tmp[625878])))
    const numSublocs[77406] "dead at end of block" "const" "insert auto destroy"
    (541322 'init var' numSublocs[77406] call_tmp[625885])
    (77409 'end of statement')
    unknown tmp[421020] "maybe param" "temp"
    (421031 'move' tmp[421020] localeModelHasSublocales[187403])
    unknown call_tmp[625890] "expr temp" "maybe param" "maybe type" "temp"
    (625893 'move' call_tmp[625890](421033 call _cond_invalid tmp[421020]))
    if call_tmp[625890]
    {
      (421036 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558639] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558640] "maybe param" "temp"
    unknown call_tmp[625895] "expr temp" "maybe param" "maybe type" "temp"
    (625898 'move' call_tmp[625895](421021 call isTrue tmp[421020]))
    (558645 'move' tmp[558640](558643 call _cond_test call_tmp[625895]))
    if tmp[558640]
    {
      unknown tmp[558647] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625900] "expr temp" "maybe param" "maybe type" "temp"
      (625903 'move' call_tmp[625900](77413 call != numSublocs[77406] 0))
      (558649 'move' tmp[558647](421024 call isTrue call_tmp[625900]))
      (558654 'move' tmp[558639](558651 '_paramFoldLogical' tmp[558640] tmp[558647]))
    }
    {
      (558659 'move' tmp[558639](558656 '_paramFoldLogical' tmp[558640] 0))
    }
    unknown call_tmp[625905] "expr temp" "maybe param" "maybe type" "temp"
    (625908 'move' call_tmp[625905](79135 call _cond_test tmp[558639]))
    if call_tmp[625905]
    {
      unknown call_tmp[625912] "maybe param" "maybe type" "temp"
      (625915 'move' call_tmp[625912](77418 call size _mt[243] this[77320]))
      const len[77421] "dead at end of block" "const" "insert auto destroy"
      (541324 'init var' len[77421] call_tmp[625912])
      (77424 'end of statement')
      const tasksPerLocale[77427] "dead at end of block" "const" "insert auto destroy"
      (541326 'init var' tasksPerLocale[77427] dataParTasksPerLocale[93281])
      (77430 'end of statement')
      const ignoreRunning[77432] "dead at end of block" "const" "insert auto destroy"
      (541328 'init var' ignoreRunning[77432] dataParIgnoreRunningTasks[93287])
      (77435 'end of statement')
      const minIndicesPerTask[77437] "dead at end of block" "const" "insert auto destroy"
      (541330 'init var' minIndicesPerTask[77437] dataParMinGranularity[93293])
      (77440 'end of statement')
      unknown dptpl[77453] "dead at end of block" "insert auto destroy"
      unknown tmp[558666] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558667] "maybe param" "temp"
      unknown call_tmp[625917] "expr temp" "maybe param" "maybe type" "temp"
      (625920 'move' call_tmp[625917](77443 call == tasksPerLocale[77427] 0))
      (558672 'move' tmp[558667](558670 call _cond_test call_tmp[625917]))
      if tmp[558667]
      {
        unknown tmp[558674] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[625922] "expr temp" "maybe param" "maybe type" "temp"
        (625925 'move' call_tmp[625922](358031 call here[90435]))
        (558676 'move' tmp[558674](77446 call maxTaskPar _mt[243] call_tmp[625922]))
        (558681 'move' tmp[558666](558678 '_paramFoldLogical' tmp[558667] tmp[558674]))
      }
      {
        (558686 'move' tmp[558666](558683 '_paramFoldLogical' tmp[558667] tasksPerLocale[77427]))
      }
      (541332 'init var' dptpl[77453] tmp[558666])
      (77456 'end of statement')
      unknown call_tmp[625929] "expr temp" "maybe param" "maybe type" "temp"
      (625932 'move' call_tmp[625929](77458 call ! ignoreRunning[77432]))
      unknown call_tmp[625934] "expr temp" "maybe param" "maybe type" "temp"
      (625937 'move' call_tmp[625934](77495 call _cond_test call_tmp[625929]))
      if call_tmp[625934]
      {
        unknown call_tmp[625939] "expr temp" "maybe param" "maybe type" "temp"
        (625942 'move' call_tmp[625939](358033 call here[90435]))
        unknown call_tmp[625946] "expr temp" "maybe param" "maybe type" "temp"
        (625949 'move' call_tmp[625946](77467 call(77463 call (partial) runningTasks _mt[243] call_tmp[625939])))
        unknown call_tmp[625951] "maybe param" "maybe type" "temp"
        (625954 'move' call_tmp[625951](77469 call - call_tmp[625946] 1))
        const otherTasks[77471] "dead at end of block" "const" "insert auto destroy"
        (541334 'init var' otherTasks[77471] call_tmp[625951])
        (77474 'end of statement')
        unknown tmp[558693] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558694] "maybe param" "temp"
        unknown call_tmp[625956] "expr temp" "maybe param" "maybe type" "temp"
        (625959 'move' call_tmp[625956](77479 call < otherTasks[77471] dptpl[77453]))
        (558699 'move' tmp[558694](558697 call _cond_test call_tmp[625956]))
        if tmp[558694]
        {
          unknown tmp[558701] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[625961] "expr temp" "maybe param" "maybe type" "temp"
          (625964 'move' call_tmp[625961](77483 call - dptpl[77453] otherTasks[77471]))
          (558703 'move' tmp[558701](77486 call _cast int(64)[13] call_tmp[625961]))
          (558708 'move' tmp[558693](558705 '_paramFoldLogical' tmp[558694] tmp[558701]))
        }
        {
          (558713 'move' tmp[558693](558710 '_paramFoldLogical' tmp[558694] 1))
        }
        (77492 call = dptpl[77453] tmp[558693])
        (476298 'end of statement' dptpl[77453] otherTasks[77471] dptpl[77453] dptpl[77453] otherTasks[77471])
      }
      unknown call_tmp[625966] "maybe param" "maybe type" "temp"
      (625969 'move' call_tmp[625966](77503 call min numSublocs[77406] dptpl[77453]))
      const numSublocTasks[77504] "dead at end of block" "const" "insert auto destroy"
      (541336 'init var' numSublocTasks[77504] call_tmp[625966])
      (77507 'end of statement')
      const numChunks[77523] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558720] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558721] "maybe param" "temp"
      unknown call_tmp[625971] "expr temp" "maybe param" "maybe type" "temp"
      (625974 'move' call_tmp[625971](77510 'task_get_serial'))
      (558726 'move' tmp[558721](558724 call _cond_test call_tmp[625971]))
      if tmp[558721]
      {
        (558731 'move' tmp[558720](558728 '_paramFoldLogical' tmp[558721] 1))
      }
      {
        unknown tmp[558733] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (558735 'move' tmp[558733](77519 call _computeNumChunks numSublocTasks[77504](ignoreRunning = 1) minIndicesPerTask[77437] len[77421]))
        (558740 'move' tmp[558720](558737 '_paramFoldLogical' tmp[558721] tmp[558733]))
      }
      (541338 'init var' numChunks[77523] tmp[558720])
      (77526 'end of statement' tasksPerLocale[77427] tasksPerLocale[77427] numSublocs[77406] dptpl[77453] numSublocTasks[77504] minIndicesPerTask[77437] len[77421])
      unknown call_tmp[625976] "expr temp" "maybe param" "maybe type" "temp"
      (625979 'move' call_tmp[625976](77643 call _cond_test debugDataParNuma[93407]))
      if call_tmp[625976]
      {
        (77640 call chpl_debug_writeln "### numSublocs = " numSublocs[77406] "\n" "### numTasksPerSubloc = " numSublocTasks[77504] "\n" "### ignoreRunning = " ignoreRunning[77432] "\n" "### minIndicesPerTask = " minIndicesPerTask[77437] "\n" "### numChunks = " numChunks[77523])
        (476309 'end of statement' numSublocs[77406] numSublocTasks[77504] ignoreRunning[77432] minIndicesPerTask[77437] numChunks[77523])
      }
      unknown call_tmp[625981] "expr temp" "maybe param" "maybe type" "temp"
      (625984 'move' call_tmp[625981](77649 call == numChunks[77523] 1))
      unknown call_tmp[625986] "expr temp" "maybe param" "maybe type" "temp"
      (625989 'move' call_tmp[625986](78748 call _cond_test call_tmp[625981]))
      if call_tmp[625986]
      {
        unknown yret[511680] "YVV" "temp"
        unknown call_tmp[625991] "expr temp" "maybe param" "maybe type" "temp"
        (625994 'move' call_tmp[625991](77654 call - len[77421] 1))
        unknown call_tmp[625996] "expr temp" "maybe param" "maybe type" "temp"
        (625999 'move' call_tmp[625996](77656 call chpl_build_bounded_range 0 call_tmp[625991]))
        unknown call_tmp[626001] "expr temp" "maybe param" "maybe type" "temp"
        (626004 'move' call_tmp[626001](77658 call _build_tuple call_tmp[625996]))
        (511683 'move' yret[511680](511682 'deref' call_tmp[626001]))
        (511685 yield yret[511680])
        (476315 'end of statement' len[77421])
      }
      {
        {
          unknown tmpIter[78207] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[626006] "expr temp" "maybe param" "maybe type" "temp"
          (626009 'move' call_tmp[626006](77665 call chpl_build_low_bounded_range 0))
          (78210 'move' tmpIter[78207](77668 call # call_tmp[626006] numChunks[77523]))
          unknown isRngDomArr[78728] "maybe param" "temp"
          unknown tmp[420936] "maybe param" "temp"
          (420947 'move' tmp[420936](78730 call isBoundedRange tmpIter[78207]))
          unknown call_tmp[626011] "expr temp" "maybe param" "maybe type" "temp"
          (626014 'move' call_tmp[626011](420949 call _cond_invalid tmp[420936]))
          if call_tmp[626011]
          {
            (420952 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558774] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558775] "maybe param" "temp"
          unknown call_tmp[626016] "expr temp" "maybe param" "maybe type" "temp"
          (626019 'move' call_tmp[626016](420937 call isTrue tmp[420936]))
          (558780 'move' tmp[558775](558778 call _cond_test call_tmp[626016]))
          if tmp[558775]
          {
            (558785 'move' tmp[558774](558782 '_paramFoldLogical' tmp[558775] 1))
          }
          {
            unknown tmp[420957] "maybe param" "temp"
            (420968 'move' tmp[420957](78733 call isDomain tmpIter[78207]))
            unknown call_tmp[626021] "expr temp" "maybe param" "maybe type" "temp"
            (626024 'move' call_tmp[626021](420970 call _cond_invalid tmp[420957]))
            if call_tmp[626021]
            {
              (420973 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[558747] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[558748] "maybe param" "temp"
            unknown call_tmp[626026] "expr temp" "maybe param" "maybe type" "temp"
            (626029 'move' call_tmp[626026](420958 call isTrue tmp[420957]))
            (558753 'move' tmp[558748](558751 call _cond_test call_tmp[626026]))
            if tmp[558748]
            {
              (558758 'move' tmp[558747](558755 '_paramFoldLogical' tmp[558748] 1))
            }
            {
              unknown tmp[558760] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[626031] "expr temp" "maybe param" "maybe type" "temp"
              (626034 'move' call_tmp[626031](78736 call isArray tmpIter[78207]))
              (558762 'move' tmp[558760](420962 call isTrue call_tmp[626031]))
              (558767 'move' tmp[558747](558764 '_paramFoldLogical' tmp[558748] tmp[558760]))
            }
            unknown tmp[558787] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (558789 'move' tmp[558787](420941 call isTrue tmp[558747]))
            (558794 'move' tmp[558774](558791 '_paramFoldLogical' tmp[558775] tmp[558787]))
          }
          (78743 'move' isRngDomArr[78728] tmp[558774])
          if isRngDomArr[78728]
          {
            const _coforallCount[78600] "const" "end count" "temp"
            (78665 'move' _coforallCount[78600](78662 call _endCountAlloc 0))
            unknown numTasks[78601] "temp"
            (78649 'move' numTasks[78601](78645 call size _mt[243] tmpIter[78207]))
            (78640 call _upEndCount _coforallCount[78600] 0 numTasks[78601])
            (476318 'end of statement')
            unknown _indexOfInterest[78607] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78608] "expr temp" "temp"
            (78617 'move' _iterator[78608](78615 call _getIterator tmpIter[78207]))
            Defer
            {
              {
                (78633 call _freeIterator _iterator[78608])
              }
            }
            { scopeless type
              (78622 'move' _indexOfInterest[78607](78619 call iteratorIndex _iterator[78608]))
            }
            ForLoop[78609]
            {
              unknown chunk[78626] "coforall index var" "index var" "insert auto destroy"
              (476320 'end of statement')
              (78628 'move' chunk[78626] _indexOfInterest[78607])
              (476321 'end of statement' chunk[78626])
              const tmp[78213] "const" "temp"
              unknown call_tmp[626038] "expr temp" "maybe param" "maybe type" "temp"
              (626041 'move' call_tmp[626038](358038 call here[90435]))
              unknown call_tmp[626045] "expr temp" "maybe param" "maybe type" "temp"
              (626048 'move' call_tmp[626045](78223 call(78220 call (partial) getChild _mt[243] call_tmp[626038]) chunk[78626]))
              unknown call_tmp[626050] "expr temp" "maybe param" "maybe type" "temp"
              (626053 'move' call_tmp[626050](78218 '_wide_get_locale' call_tmp[626045]))
              (78215 'move' tmp[78213](78217 'deref' call_tmp[626050]))
              {
                {
                  unknown call_tmp[626055] "expr temp" "maybe param" "maybe type" "temp"
                  (626058 'move' call_tmp[626055](78231 call _cond_test debugDataParNuma[93407]))
                  if call_tmp[626055]
                  {
                    unknown call_tmp[626060] "expr temp" "maybe param" "maybe type" "temp"
                    (626063 'move' call_tmp[626060](78240 call chpl_getSubloc))
                    unknown call_tmp[626065] "expr temp" "maybe param" "maybe type" "temp"
                    (626068 'move' call_tmp[626065](78237 call != chunk[78626] call_tmp[626060]))
                    unknown call_tmp[626070] "expr temp" "maybe param" "maybe type" "temp"
                    (626073 'move' call_tmp[626070](78235 call _cond_test call_tmp[626065]))
                    if call_tmp[626070]
                    {
                      unknown call_tmp[626075] "expr temp" "maybe param" "maybe type" "temp"
                      (626078 'move' call_tmp[626075](78249 call chpl_getSubloc))
                      (78244 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78626] ", on " call_tmp[626075] ") ***")
                      (476323 'end of statement' chunk[78626])
                    }
                  }
                  unknown call_tmp[626080] "expr temp" "maybe param" "maybe type" "temp"
                  (626083 'move' call_tmp[626080](78261 call - len[77421] 1))
                  unknown call_tmp[626085] "maybe param" "maybe type" "temp"
                  (626088 'move' call_tmp[626085](78256 call _computeBlock len[77421] numChunks[77523] chunk[78626] call_tmp[626080]))
                  const tmp[78254] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541340 'init var' tmp[78254] call_tmp[626085])
                  (78266 call _check_tuple_var_decl tmp[78254] 2)
                  (476325 'end of statement')
                  unknown call_tmp[626090] "maybe param" "maybe type" "temp"
                  (626093 'move' call_tmp[626090](78271 call tmp[78254] 0))
                  const lo[78269] "dead at end of block" "const" "insert auto destroy"
                  (541342 'init var' lo[78269] call_tmp[626090])
                  unknown call_tmp[626095] "maybe param" "maybe type" "temp"
                  (626098 'move' call_tmp[626095](78276 call tmp[78254] 1))
                  const hi[78274] "dead at end of block" "const" "insert auto destroy"
                  (541344 'init var' hi[78274] call_tmp[626095])
                  (78279 'end of statement')
                  unknown call_tmp[626100] "maybe param" "maybe type" "temp"
                  (626103 'move' call_tmp[626100](78283 call chpl_build_bounded_range lo[78269] hi[78274]))
                  const locRange[78281] "dead at end of block" "const" "insert auto destroy"
                  (541346 'init var' locRange[78281] call_tmp[626100])
                  (78287 'end of statement')
                  unknown call_tmp[626107] "maybe param" "maybe type" "temp"
                  (626110 'move' call_tmp[626107](78291 call size _mt[243] locRange[78281]))
                  const locLen[78289] "dead at end of block" "const" "insert auto destroy"
                  (541348 'init var' locLen[78289] call_tmp[626107])
                  (78295 'end of statement')
                  const numSublocTasks[78297] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[558801] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[558802] "maybe param" "temp"
                  unknown call_tmp[626112] "expr temp" "maybe param" "maybe type" "temp"
                  (626115 'move' call_tmp[626112](78302 call % dptpl[77453] numChunks[77523]))
                  unknown call_tmp[626117] "expr temp" "maybe param" "maybe type" "temp"
                  (626120 'move' call_tmp[626117](78299 call < chunk[78626] call_tmp[626112]))
                  (558807 'move' tmp[558802](558805 call _cond_test call_tmp[626117]))
                  if tmp[558802]
                  {
                    unknown tmp[558809] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[626122] "expr temp" "maybe param" "maybe type" "temp"
                    (626125 'move' call_tmp[626122](78309 call / dptpl[77453] numChunks[77523]))
                    (558811 'move' tmp[558809](78307 call + call_tmp[626122] 1))
                    (558816 'move' tmp[558801](558813 '_paramFoldLogical' tmp[558802] tmp[558809]))
                  }
                  {
                    unknown tmp[558818] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (558820 'move' tmp[558818](78315 call / dptpl[77453] numChunks[77523]))
                    (558825 'move' tmp[558801](558822 '_paramFoldLogical' tmp[558802] tmp[558818]))
                  }
                  (541350 'init var' numSublocTasks[78297] tmp[558801])
                  (78320 'end of statement')
                  unknown call_tmp[626127] "maybe param" "maybe type" "temp"
                  (626130 'move' call_tmp[626127](78324 call _computeNumChunks numSublocTasks[78297](ignoreRunning = 1) minIndicesPerTask[77437] locLen[78289]))
                  const numTasks[78322] "dead at end of block" "const" "insert auto destroy"
                  (541352 'init var' numTasks[78322] call_tmp[626127])
                  (78331 'end of statement' lo[78269] hi[78274] locRange[78281] chunk[78626] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] numSublocTasks[78297] minIndicesPerTask[77437] locLen[78289])
                  {
                    unknown tmpIter[78333] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[626132] "expr temp" "maybe param" "maybe type" "temp"
                    (626135 'move' call_tmp[626132](78340 call chpl_build_low_bounded_range 0))
                    (78335 'move' tmpIter[78333](78338 call # call_tmp[626132] numTasks[78322]))
                    unknown isRngDomArr[78343] "maybe param" "temp"
                    unknown tmp[420894] "maybe param" "temp"
                    (420905 'move' tmp[420894](78350 call isBoundedRange tmpIter[78333]))
                    unknown call_tmp[626137] "expr temp" "maybe param" "maybe type" "temp"
                    (626140 'move' call_tmp[626137](420907 call _cond_invalid tmp[420894]))
                    if call_tmp[626137]
                    {
                      (420910 call compilerError "cannot promote short-circuiting || operator")
                    }
                    unknown tmp[558859] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[558860] "maybe param" "temp"
                    unknown call_tmp[626142] "expr temp" "maybe param" "maybe type" "temp"
                    (626145 'move' call_tmp[626142](420895 call isTrue tmp[420894]))
                    (558865 'move' tmp[558860](558863 call _cond_test call_tmp[626142]))
                    if tmp[558860]
                    {
                      (558870 'move' tmp[558859](558867 '_paramFoldLogical' tmp[558860] 1))
                    }
                    {
                      unknown tmp[420915] "maybe param" "temp"
                      (420926 'move' tmp[420915](78355 call isDomain tmpIter[78333]))
                      unknown call_tmp[626147] "expr temp" "maybe param" "maybe type" "temp"
                      (626150 'move' call_tmp[626147](420928 call _cond_invalid tmp[420915]))
                      if call_tmp[626147]
                      {
                        (420931 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[558832] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[558833] "maybe param" "temp"
                      unknown call_tmp[626152] "expr temp" "maybe param" "maybe type" "temp"
                      (626155 'move' call_tmp[626152](420916 call isTrue tmp[420915]))
                      (558838 'move' tmp[558833](558836 call _cond_test call_tmp[626152]))
                      if tmp[558833]
                      {
                        (558843 'move' tmp[558832](558840 '_paramFoldLogical' tmp[558833] 1))
                      }
                      {
                        unknown tmp[558845] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        unknown call_tmp[626157] "expr temp" "maybe param" "maybe type" "temp"
                        (626160 'move' call_tmp[626157](78358 call isArray tmpIter[78333]))
                        (558847 'move' tmp[558845](420920 call isTrue call_tmp[626157]))
                        (558852 'move' tmp[558832](558849 '_paramFoldLogical' tmp[558833] tmp[558845]))
                      }
                      unknown tmp[558872] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (558874 'move' tmp[558872](420899 call isTrue tmp[558832]))
                      (558879 'move' tmp[558859](558876 '_paramFoldLogical' tmp[558860] tmp[558872]))
                    }
                    (78345 'move' isRngDomArr[78343] tmp[558859])
                    if isRngDomArr[78343]
                    {
                      const _coforallCount[78362] "const" "end count" "temp"
                      (78364 'move' _coforallCount[78362](78367 call _endCountAlloc 1))
                      unknown numTasks[78369] "temp"
                      (78371 'move' numTasks[78369](78374 call size _mt[243] tmpIter[78333]))
                      (78378 call _upEndCount _coforallCount[78362] 1 numTasks[78369])
                      (476340 'end of statement')
                      (78383 call chpl_resetTaskSpawn numTasks[78369])
                      (476341 'end of statement')
                      unknown _indexOfInterest[78385] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78387] "expr temp" "temp"
                      (78389 'move' _iterator[78387](78392 call _getIterator tmpIter[78333]))
                      Defer
                      {
                        {
                          (78396 call _freeIterator _iterator[78387])
                        }
                      }
                      { scopeless type
                        (78400 'move' _indexOfInterest[78385](78403 call iteratorIndex _iterator[78387]))
                      }
                      ForLoop[78405]
                      {
                        unknown core[78408] "coforall index var" "index var" "insert auto destroy"
                        (476343 'end of statement')
                        (78410 'move' core[78408] _indexOfInterest[78385])
                        (476344 'end of statement' core[78408])
                        {
                          {
                            unknown call_tmp[626164] "maybe param" "maybe type" "temp"
                            (626167 'move' call_tmp[626164](78419 call _computeBlock locLen[78289] numTasks[78322] core[78408] hi[78274] lo[78269] lo[78269]))
                            const tmp[78417] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541354 'init var' tmp[78417] call_tmp[626164])
                            (78428 call _check_tuple_var_decl tmp[78417] 2)
                            (476346 'end of statement')
                            unknown call_tmp[626169] "maybe param" "maybe type" "temp"
                            (626172 'move' call_tmp[626169](78433 call tmp[78417] 0))
                            const low[78431] "dead at end of block" "const" "insert auto destroy"
                            (541356 'init var' low[78431] call_tmp[626169])
                            unknown call_tmp[626174] "maybe param" "maybe type" "temp"
                            (626177 'move' call_tmp[626174](78438 call tmp[78417] 1))
                            const high[78436] "dead at end of block" "const" "insert auto destroy"
                            (541358 'init var' high[78436] call_tmp[626174])
                            (78441 'end of statement')
                            unknown call_tmp[626179] "expr temp" "maybe param" "maybe type" "temp"
                            (626182 'move' call_tmp[626179](78443 call _cond_test debugDataParNuma[93407]))
                            if call_tmp[626179]
                            {
                              unknown call_tmp[626184] "expr temp" "maybe param" "maybe type" "temp"
                              (626187 'move' call_tmp[626184](78457 call chpl_build_bounded_range low[78431] high[78436]))
                              (78447 call chpl_debug_writeln "### chunk = " chunk[78626] "  core = " core[78408] "  " "locRange = " locRange[78281] "  coreRange = " call_tmp[626184])
                              (476347 'end of statement' chunk[78626] core[78408] locRange[78281] low[78431] high[78436])
                            }
                            unknown yret[511687] "YVV" "temp"
                            unknown call_tmp[626189] "expr temp" "maybe param" "maybe type" "temp"
                            (626192 'move' call_tmp[626189](78465 call chpl_build_bounded_range low[78431] high[78436]))
                            unknown call_tmp[626194] "expr temp" "maybe param" "maybe type" "temp"
                            (626197 'move' call_tmp[626194](78463 call _build_tuple call_tmp[626189]))
                            (511690 'move' yret[511687](511689 'deref' call_tmp[626194]))
                            (511692 yield yret[511687])
                            (476353 'end of statement' low[78431] high[78436])
                          }
                          (78469 call _downEndCount _coforallCount[78362] nil[44])
                          (78414 'coforall loop')
                        }
                        label _continueLabel[78472]
                        _indexOfInterest[78385]
                        _iterator[78387]
                      }
                      label _breakLabel[78474]
                      Defer
                      {
                        {
                          (78478 call _endCountFree _coforallCount[78362])
                        }
                      }
                      (78482 call _waitEndCount _coforallCount[78362] 1 numTasks[78369])
                    }
                    {
                      const _coforallCount[78487] "const" "end count" "temp"
                      (78489 'move' _coforallCount[78487](78492 call _endCountAlloc 1))
                      unknown _indexOfInterest[78494] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78496] "expr temp" "temp"
                      (78498 'move' _iterator[78496](78501 call _getIterator tmpIter[78333]))
                      Defer
                      {
                        {
                          (78505 call _freeIterator _iterator[78496])
                        }
                      }
                      { scopeless type
                        (78509 'move' _indexOfInterest[78494](78512 call iteratorIndex _iterator[78496]))
                      }
                      ForLoop[78514]
                      {
                        unknown core[78517] "coforall index var" "index var" "insert auto destroy"
                        (476360 'end of statement')
                        (78519 'move' core[78517] _indexOfInterest[78494])
                        (476361 'end of statement' core[78517])
                        (78523 call _upEndCount _coforallCount[78487] 1)
                        (476363 'end of statement')
                        {
                          {
                            unknown call_tmp[626199] "maybe param" "maybe type" "temp"
                            (626202 'move' call_tmp[626199](78532 call _computeBlock locLen[78289] numTasks[78322] core[78517] hi[78274] lo[78269] lo[78269]))
                            const tmp[78530] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541360 'init var' tmp[78530] call_tmp[626199])
                            (78541 call _check_tuple_var_decl tmp[78530] 2)
                            (476364 'end of statement')
                            unknown call_tmp[626204] "maybe param" "maybe type" "temp"
                            (626207 'move' call_tmp[626204](78546 call tmp[78530] 0))
                            const low[78544] "dead at end of block" "const" "insert auto destroy"
                            (541362 'init var' low[78544] call_tmp[626204])
                            unknown call_tmp[626209] "maybe param" "maybe type" "temp"
                            (626212 'move' call_tmp[626209](78551 call tmp[78530] 1))
                            const high[78549] "dead at end of block" "const" "insert auto destroy"
                            (541364 'init var' high[78549] call_tmp[626209])
                            (78554 'end of statement')
                            unknown call_tmp[626214] "expr temp" "maybe param" "maybe type" "temp"
                            (626217 'move' call_tmp[626214](78556 call _cond_test debugDataParNuma[93407]))
                            if call_tmp[626214]
                            {
                              unknown call_tmp[626219] "expr temp" "maybe param" "maybe type" "temp"
                              (626222 'move' call_tmp[626219](78570 call chpl_build_bounded_range low[78544] high[78549]))
                              (78560 call chpl_debug_writeln "### chunk = " chunk[78626] "  core = " core[78517] "  " "locRange = " locRange[78281] "  coreRange = " call_tmp[626219])
                              (476365 'end of statement' chunk[78626] core[78517] locRange[78281] low[78544] high[78549])
                            }
                            unknown yret[511694] "YVV" "temp"
                            unknown call_tmp[626224] "expr temp" "maybe param" "maybe type" "temp"
                            (626227 'move' call_tmp[626224](78578 call chpl_build_bounded_range low[78544] high[78549]))
                            unknown call_tmp[626229] "expr temp" "maybe param" "maybe type" "temp"
                            (626232 'move' call_tmp[626229](78576 call _build_tuple call_tmp[626224]))
                            (511697 'move' yret[511694](511696 'deref' call_tmp[626229]))
                            (511699 yield yret[511694])
                            (476371 'end of statement' low[78544] high[78549])
                          }
                          (78582 call _downEndCount _coforallCount[78487] nil[44])
                          (78527 'coforall loop')
                        }
                        label _continueLabel[78585]
                        _indexOfInterest[78494]
                        _iterator[78496]
                      }
                      label _breakLabel[78587]
                      Defer
                      {
                        {
                          (78591 call _endCountFree _coforallCount[78487])
                        }
                      }
                      (78595 call _waitEndCount _coforallCount[78487] 1)
                    }
                  }
                }
                (78602 call _downEndCount _coforallCount[78600] nil[44])
                (78226 'coforall on block' 1 tmp[78213])
              }
              label _continueLabel[78612]
              _indexOfInterest[78607]
              _iterator[78608]
            }
            label _breakLabel[78613]
            Defer
            {
              {
                (78652 call _endCountFree _coforallCount[78600])
              }
            }
            (78657 call _waitEndCount _coforallCount[78600] 0 numTasks[78601])
          }
          {
            const _coforallCount[78669] "const" "end count" "temp"
            (78725 'move' _coforallCount[78669](78722 call _endCountAlloc 0))
            unknown _indexOfInterest[78676] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78677] "expr temp" "temp"
            (78686 'move' _iterator[78677](78684 call _getIterator tmpIter[78207]))
            Defer
            {
              {
                (78702 call _freeIterator _iterator[78677])
              }
            }
            { scopeless type
              (78691 'move' _indexOfInterest[78676](78688 call iteratorIndex _iterator[78677]))
            }
            ForLoop[78678]
            {
              unknown chunk[78695] "coforall index var" "index var" "insert auto destroy"
              (476381 'end of statement')
              (78697 'move' chunk[78695] _indexOfInterest[78676])
              (476382 'end of statement' chunk[78695])
              (78709 call _upEndCount _coforallCount[78669] 0)
              (476384 'end of statement')
              const tmp[78196] "const" "temp"
              unknown call_tmp[626234] "expr temp" "maybe param" "maybe type" "temp"
              (626237 'move' call_tmp[626234](358035 call here[90435]))
              unknown call_tmp[626241] "expr temp" "maybe param" "maybe type" "temp"
              (626244 'move' call_tmp[626241](77678 call(77673 call (partial) getChild _mt[243] call_tmp[626234]) chunk[78695]))
              unknown call_tmp[626246] "expr temp" "maybe param" "maybe type" "temp"
              (626249 'move' call_tmp[626246](78193 '_wide_get_locale' call_tmp[626241]))
              (78198 'move' tmp[78196](78194 'deref' call_tmp[626246]))
              {
                {
                  unknown call_tmp[626251] "expr temp" "maybe param" "maybe type" "temp"
                  (626254 'move' call_tmp[626251](77751 call _cond_test debugDataParNuma[93407]))
                  if call_tmp[626251]
                  {
                    unknown call_tmp[626256] "expr temp" "maybe param" "maybe type" "temp"
                    (626259 'move' call_tmp[626256](77683 call chpl_getSubloc))
                    unknown call_tmp[626261] "expr temp" "maybe param" "maybe type" "temp"
                    (626264 'move' call_tmp[626261](77684 call != chunk[78695] call_tmp[626256]))
                    unknown call_tmp[626266] "expr temp" "maybe param" "maybe type" "temp"
                    (626269 'move' call_tmp[626266](77745 call _cond_test call_tmp[626261]))
                    if call_tmp[626266]
                    {
                      unknown call_tmp[626271] "expr temp" "maybe param" "maybe type" "temp"
                      (626274 'move' call_tmp[626271](77725 call chpl_getSubloc))
                      (77743 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78695] ", on " call_tmp[626271] ") ***")
                      (476385 'end of statement' chunk[78695])
                    }
                  }
                  unknown call_tmp[626276] "expr temp" "maybe param" "maybe type" "temp"
                  (626279 'move' call_tmp[626276](77768 call - len[77421] 1))
                  unknown call_tmp[626281] "maybe param" "maybe type" "temp"
                  (626284 'move' call_tmp[626281](77770 call _computeBlock len[77421] numChunks[77523] chunk[78695] call_tmp[626276]))
                  const tmp[77771] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541366 'init var' tmp[77771] call_tmp[626281])
                  (77778 call _check_tuple_var_decl tmp[77771] 2)
                  (476387 'end of statement')
                  unknown call_tmp[626286] "maybe param" "maybe type" "temp"
                  (626289 'move' call_tmp[626286](77772 call tmp[77771] 0))
                  const lo[77756] "dead at end of block" "const" "insert auto destroy"
                  (541368 'init var' lo[77756] call_tmp[626286])
                  unknown call_tmp[626291] "maybe param" "maybe type" "temp"
                  (626294 'move' call_tmp[626291](77775 call tmp[77771] 1))
                  const hi[77758] "dead at end of block" "const" "insert auto destroy"
                  (541370 'init var' hi[77758] call_tmp[626291])
                  (77783 'end of statement')
                  unknown call_tmp[626296] "maybe param" "maybe type" "temp"
                  (626299 'move' call_tmp[626296](77786 call chpl_build_bounded_range lo[77756] hi[77758]))
                  const locRange[77788] "dead at end of block" "const" "insert auto destroy"
                  (541372 'init var' locRange[77788] call_tmp[626296])
                  (77791 'end of statement')
                  unknown call_tmp[626303] "maybe param" "maybe type" "temp"
                  (626306 'move' call_tmp[626303](77793 call size _mt[243] locRange[77788]))
                  const locLen[77796] "dead at end of block" "const" "insert auto destroy"
                  (541374 'init var' locLen[77796] call_tmp[626303])
                  (77799 'end of statement')
                  const numSublocTasks[77821] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[558886] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[558887] "maybe param" "temp"
                  unknown call_tmp[626308] "expr temp" "maybe param" "maybe type" "temp"
                  (626311 'move' call_tmp[626308](77803 call % dptpl[77453] numChunks[77523]))
                  unknown call_tmp[626313] "expr temp" "maybe param" "maybe type" "temp"
                  (626316 'move' call_tmp[626313](77805 call < chunk[78695] call_tmp[626308]))
                  (558892 'move' tmp[558887](558890 call _cond_test call_tmp[626313]))
                  if tmp[558887]
                  {
                    unknown tmp[558894] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[626318] "expr temp" "maybe param" "maybe type" "temp"
                    (626321 'move' call_tmp[626318](77809 call / dptpl[77453] numChunks[77523]))
                    (558896 'move' tmp[558894](77812 call + call_tmp[626318] 1))
                    (558901 'move' tmp[558886](558898 '_paramFoldLogical' tmp[558887] tmp[558894]))
                  }
                  {
                    unknown tmp[558903] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (558905 'move' tmp[558903](77816 call / dptpl[77453] numChunks[77523]))
                    (558910 'move' tmp[558886](558907 '_paramFoldLogical' tmp[558887] tmp[558903]))
                  }
                  (541376 'init var' numSublocTasks[77821] tmp[558886])
                  (77824 'end of statement')
                  unknown call_tmp[626323] "maybe param" "maybe type" "temp"
                  (626326 'move' call_tmp[626323](77832 call _computeNumChunks numSublocTasks[77821](ignoreRunning = 1) minIndicesPerTask[77437] locLen[77796]))
                  const numTasks[77833] "dead at end of block" "const" "insert auto destroy"
                  (541378 'init var' numTasks[77833] call_tmp[626323])
                  (77836 'end of statement' lo[77756] hi[77758] locRange[77788] chunk[78695] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] numSublocTasks[77821] minIndicesPerTask[77437] locLen[77796])
                  {
                    unknown tmpIter[77982] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[626328] "expr temp" "maybe param" "maybe type" "temp"
                    (626331 'move' call_tmp[626328](77839 call chpl_build_low_bounded_range 0))
                    (77985 'move' tmpIter[77982](77842 call # call_tmp[626328] numTasks[77833]))
                    unknown isRngDomArr[78174] "maybe param" "temp"
                    unknown tmp[420852] "maybe param" "temp"
                    (420863 'move' tmp[420852](78176 call isBoundedRange tmpIter[77982]))
                    unknown call_tmp[626333] "expr temp" "maybe param" "maybe type" "temp"
                    (626336 'move' call_tmp[626333](420865 call _cond_invalid tmp[420852]))
                    if call_tmp[626333]
                    {
                      (420868 call compilerError "cannot promote short-circuiting || operator")
                    }
                    unknown tmp[558944] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[558945] "maybe param" "temp"
                    unknown call_tmp[626338] "expr temp" "maybe param" "maybe type" "temp"
                    (626341 'move' call_tmp[626338](420853 call isTrue tmp[420852]))
                    (558950 'move' tmp[558945](558948 call _cond_test call_tmp[626338]))
                    if tmp[558945]
                    {
                      (558955 'move' tmp[558944](558952 '_paramFoldLogical' tmp[558945] 1))
                    }
                    {
                      unknown tmp[420873] "maybe param" "temp"
                      (420884 'move' tmp[420873](78179 call isDomain tmpIter[77982]))
                      unknown call_tmp[626343] "expr temp" "maybe param" "maybe type" "temp"
                      (626346 'move' call_tmp[626343](420886 call _cond_invalid tmp[420873]))
                      if call_tmp[626343]
                      {
                        (420889 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[558917] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[558918] "maybe param" "temp"
                      unknown call_tmp[626348] "expr temp" "maybe param" "maybe type" "temp"
                      (626351 'move' call_tmp[626348](420874 call isTrue tmp[420873]))
                      (558923 'move' tmp[558918](558921 call _cond_test call_tmp[626348]))
                      if tmp[558918]
                      {
                        (558928 'move' tmp[558917](558925 '_paramFoldLogical' tmp[558918] 1))
                      }
                      {
                        unknown tmp[558930] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        unknown call_tmp[626353] "expr temp" "maybe param" "maybe type" "temp"
                        (626356 'move' call_tmp[626353](78182 call isArray tmpIter[77982]))
                        (558932 'move' tmp[558930](420878 call isTrue call_tmp[626353]))
                        (558937 'move' tmp[558917](558934 '_paramFoldLogical' tmp[558918] tmp[558930]))
                      }
                      unknown tmp[558957] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (558959 'move' tmp[558957](420857 call isTrue tmp[558917]))
                      (558964 'move' tmp[558944](558961 '_paramFoldLogical' tmp[558945] tmp[558957]))
                    }
                    (78189 'move' isRngDomArr[78174] tmp[558944])
                    if isRngDomArr[78174]
                    {
                      const _coforallCount[78041] "const" "end count" "temp"
                      (78110 'move' _coforallCount[78041](78107 call _endCountAlloc 1))
                      unknown numTasks[78042] "temp"
                      (78094 'move' numTasks[78042](78090 call size _mt[243] tmpIter[77982]))
                      (78085 call _upEndCount _coforallCount[78041] 1 numTasks[78042])
                      (476402 'end of statement')
                      (78082 call chpl_resetTaskSpawn numTasks[78042])
                      (476403 'end of statement')
                      unknown _indexOfInterest[78049] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78050] "expr temp" "temp"
                      (78059 'move' _iterator[78050](78057 call _getIterator tmpIter[77982]))
                      Defer
                      {
                        {
                          (78075 call _freeIterator _iterator[78050])
                        }
                      }
                      { scopeless type
                        (78064 'move' _indexOfInterest[78049](78061 call iteratorIndex _iterator[78050]))
                      }
                      ForLoop[78051]
                      {
                        unknown core[78068] "coforall index var" "index var" "insert auto destroy"
                        (476405 'end of statement')
                        (78070 'move' core[78068] _indexOfInterest[78049])
                        (476406 'end of statement' core[78068])
                        {
                          {
                            unknown call_tmp[626360] "maybe param" "maybe type" "temp"
                            (626363 'move' call_tmp[626360](77991 call _computeBlock locLen[77796] numTasks[77833] core[78068] hi[77758] lo[77756] lo[77756]))
                            const tmp[77989] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541380 'init var' tmp[77989] call_tmp[626360])
                            (78000 call _check_tuple_var_decl tmp[77989] 2)
                            (476408 'end of statement')
                            unknown call_tmp[626365] "maybe param" "maybe type" "temp"
                            (626368 'move' call_tmp[626365](78005 call tmp[77989] 0))
                            const low[78003] "dead at end of block" "const" "insert auto destroy"
                            (541382 'init var' low[78003] call_tmp[626365])
                            unknown call_tmp[626370] "maybe param" "maybe type" "temp"
                            (626373 'move' call_tmp[626370](78010 call tmp[77989] 1))
                            const high[78008] "dead at end of block" "const" "insert auto destroy"
                            (541384 'init var' high[78008] call_tmp[626370])
                            (78013 'end of statement')
                            unknown call_tmp[626375] "expr temp" "maybe param" "maybe type" "temp"
                            (626378 'move' call_tmp[626375](78015 call _cond_test debugDataParNuma[93407]))
                            if call_tmp[626375]
                            {
                              unknown call_tmp[626380] "expr temp" "maybe param" "maybe type" "temp"
                              (626383 'move' call_tmp[626380](78029 call chpl_build_bounded_range low[78003] high[78008]))
                              (78019 call chpl_debug_writeln "### chunk = " chunk[78695] "  core = " core[78068] "  " "locRange = " locRange[77788] "  coreRange = " call_tmp[626380])
                              (476409 'end of statement' chunk[78695] core[78068] locRange[77788] low[78003] high[78008])
                            }
                            unknown yret[511701] "YVV" "temp"
                            unknown call_tmp[626385] "expr temp" "maybe param" "maybe type" "temp"
                            (626388 'move' call_tmp[626385](78037 call chpl_build_bounded_range low[78003] high[78008]))
                            unknown call_tmp[626390] "expr temp" "maybe param" "maybe type" "temp"
                            (626393 'move' call_tmp[626390](78035 call _build_tuple call_tmp[626385]))
                            (511704 'move' yret[511701](511703 'deref' call_tmp[626390]))
                            (511706 yield yret[511701])
                            (476415 'end of statement' low[78003] high[78008])
                          }
                          (78044 call _downEndCount _coforallCount[78041] nil[44])
                          (78043 'coforall loop')
                        }
                        label _continueLabel[78054]
                        _indexOfInterest[78049]
                        _iterator[78050]
                      }
                      label _breakLabel[78055]
                      Defer
                      {
                        {
                          (78097 call _endCountFree _coforallCount[78041])
                        }
                      }
                      (78102 call _waitEndCount _coforallCount[78041] 1 numTasks[78042])
                    }
                    {
                      const _coforallCount[78114] "const" "end count" "temp"
                      (78171 'move' _coforallCount[78114](78168 call _endCountAlloc 1))
                      unknown _indexOfInterest[78122] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78123] "expr temp" "temp"
                      (78132 'move' _iterator[78123](78130 call _getIterator tmpIter[77982]))
                      Defer
                      {
                        {
                          (78148 call _freeIterator _iterator[78123])
                        }
                      }
                      { scopeless type
                        (78137 'move' _indexOfInterest[78122](78134 call iteratorIndex _iterator[78123]))
                      }
                      ForLoop[78124]
                      {
                        unknown core[78141] "coforall index var" "index var" "insert auto destroy"
                        (476422 'end of statement')
                        (78143 'move' core[78141] _indexOfInterest[78122])
                        (476423 'end of statement' core[78141])
                        (78155 call _upEndCount _coforallCount[78114] 1)
                        (476425 'end of statement')
                        {
                          {
                            unknown call_tmp[626395] "maybe param" "maybe type" "temp"
                            (626398 'move' call_tmp[626395](77857 call _computeBlock locLen[77796] numTasks[77833] core[78141] hi[77758] lo[77756] lo[77756]))
                            const tmp[77858] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541386 'init var' tmp[77858] call_tmp[626395])
                            (77865 call _check_tuple_var_decl tmp[77858] 2)
                            (476426 'end of statement')
                            unknown call_tmp[626400] "maybe param" "maybe type" "temp"
                            (626403 'move' call_tmp[626400](77859 call tmp[77858] 0))
                            const low[77844] "dead at end of block" "const" "insert auto destroy"
                            (541388 'init var' low[77844] call_tmp[626400])
                            unknown call_tmp[626405] "maybe param" "maybe type" "temp"
                            (626408 'move' call_tmp[626405](77862 call tmp[77858] 1))
                            const high[77846] "dead at end of block" "const" "insert auto destroy"
                            (541390 'init var' high[77846] call_tmp[626405])
                            (77870 'end of statement')
                            unknown call_tmp[626410] "expr temp" "maybe param" "maybe type" "temp"
                            (626413 'move' call_tmp[626410](77970 call _cond_test debugDataParNuma[93407]))
                            if call_tmp[626410]
                            {
                              unknown call_tmp[626415] "expr temp" "maybe param" "maybe type" "temp"
                              (626418 'move' call_tmp[626415](77965 call chpl_build_bounded_range low[77844] high[77846]))
                              (77967 call chpl_debug_writeln "### chunk = " chunk[78695] "  core = " core[78141] "  " "locRange = " locRange[77788] "  coreRange = " call_tmp[626415])
                              (476427 'end of statement' chunk[78695] core[78141] locRange[77788] low[77844] high[77846])
                            }
                            unknown yret[511708] "YVV" "temp"
                            unknown call_tmp[626420] "expr temp" "maybe param" "maybe type" "temp"
                            (626423 'move' call_tmp[626420](77976 call chpl_build_bounded_range low[77844] high[77846]))
                            unknown call_tmp[626425] "expr temp" "maybe param" "maybe type" "temp"
                            (626428 'move' call_tmp[626425](77978 call _build_tuple call_tmp[626420]))
                            (511711 'move' yret[511708](511710 'deref' call_tmp[626425]))
                            (511713 yield yret[511708])
                            (476433 'end of statement' low[77844] high[77846])
                          }
                          (78117 call _downEndCount _coforallCount[78114] nil[44])
                          (78116 'coforall loop')
                        }
                        label _continueLabel[78127]
                        _indexOfInterest[78122]
                        _iterator[78123]
                      }
                      label _breakLabel[78128]
                      Defer
                      {
                        {
                          (78159 call _endCountFree _coforallCount[78114])
                        }
                      }
                      (78164 call _waitEndCount _coforallCount[78114] 1)
                    }
                  }
                }
                (78671 call _downEndCount _coforallCount[78669] nil[44])
                (78201 'coforall on block' 1 tmp[78196])
              }
              label _continueLabel[78681]
              _indexOfInterest[78676]
              _iterator[78677]
            }
            label _breakLabel[78682]
            Defer
            {
              {
                (78713 call _endCountFree _coforallCount[78669])
              }
            }
            (78718 call _waitEndCount _coforallCount[78669] 0)
          }
        }
      }
    }
    {
      unknown call_tmp[626432] "maybe param" "maybe type" "temp"
      (626435 'move' call_tmp[626432](78753 call size _mt[243] this[77320]))
      unknown v[78756] "dead at end of block" "insert auto destroy"
      (541392 'init var' v[78756] call_tmp[626432])
      (78759 'end of statement')
      const numChunks[78772] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558971] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558972] "maybe param" "temp"
      unknown call_tmp[626437] "expr temp" "maybe param" "maybe type" "temp"
      (626440 'move' call_tmp[626437](78763 'task_get_serial'))
      (558977 'move' tmp[558972](558975 call _cond_test call_tmp[626437]))
      if tmp[558972]
      {
        (558982 'move' tmp[558971](558979 '_paramFoldLogical' tmp[558972] 1))
      }
      {
        unknown tmp[558984] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (558986 'move' tmp[558984](78768 call _computeNumChunks v[78756]))
        (558991 'move' tmp[558971](558988 '_paramFoldLogical' tmp[558972] tmp[558984]))
      }
      (541394 'init var' numChunks[78772] tmp[558971])
      (78775 'end of statement' v[78756])
      unknown call_tmp[626442] "expr temp" "maybe param" "maybe type" "temp"
      (626445 'move' call_tmp[626442](78825 call _cond_test debugChapelRange[64195]))
      if call_tmp[626442]
      {
        (78783 call chpl_debug_writeln "*** RI: length=" v[78756] " numChunks=" numChunks[78772])
        (476443 'end of statement' v[78756] numChunks[78772])
        (78823 call chpl_debug_writeln "*** RI: Using " numChunks[78772] " chunk(s)")
        (476446 'end of statement' numChunks[78772])
      }
      unknown call_tmp[626447] "expr temp" "maybe param" "maybe type" "temp"
      (626450 'move' call_tmp[626447](78831 call == numChunks[78772] 1))
      unknown call_tmp[626452] "expr temp" "maybe param" "maybe type" "temp"
      (626455 'move' call_tmp[626452](79130 call _cond_test call_tmp[626447]))
      if call_tmp[626452]
      {
        unknown yret[511715] "YVV" "temp"
        unknown call_tmp[626457] "expr temp" "maybe param" "maybe type" "temp"
        (626460 'move' call_tmp[626457](78836 call - v[78756] 1))
        unknown call_tmp[626462] "expr temp" "maybe param" "maybe type" "temp"
        (626465 'move' call_tmp[626462](78838 call chpl_build_bounded_range 0 call_tmp[626457]))
        unknown call_tmp[626467] "expr temp" "maybe param" "maybe type" "temp"
        (626470 'move' call_tmp[626467](78840 call _build_tuple call_tmp[626462]))
        (511718 'move' yret[511715](511717 'deref' call_tmp[626467]))
        (511720 yield yret[511715])
        (476448 'end of statement' v[78756])
      }
      {
        {
          unknown tmpIter[78921] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[626472] "expr temp" "maybe param" "maybe type" "temp"
          (626475 'move' call_tmp[626472](78846 call chpl_build_low_bounded_range 0))
          (78924 'move' tmpIter[78921](78849 call # call_tmp[626472] numChunks[78772]))
          unknown isRngDomArr[79110] "maybe param" "temp"
          unknown tmp[420978] "maybe param" "temp"
          (420989 'move' tmp[420978](79112 call isBoundedRange tmpIter[78921]))
          unknown call_tmp[626477] "expr temp" "maybe param" "maybe type" "temp"
          (626480 'move' call_tmp[626477](420991 call _cond_invalid tmp[420978]))
          if call_tmp[626477]
          {
            (420994 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[559025] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[559026] "maybe param" "temp"
          unknown call_tmp[626482] "expr temp" "maybe param" "maybe type" "temp"
          (626485 'move' call_tmp[626482](420979 call isTrue tmp[420978]))
          (559031 'move' tmp[559026](559029 call _cond_test call_tmp[626482]))
          if tmp[559026]
          {
            (559036 'move' tmp[559025](559033 '_paramFoldLogical' tmp[559026] 1))
          }
          {
            unknown tmp[420999] "maybe param" "temp"
            (421010 'move' tmp[420999](79115 call isDomain tmpIter[78921]))
            unknown call_tmp[626487] "expr temp" "maybe param" "maybe type" "temp"
            (626490 'move' call_tmp[626487](421012 call _cond_invalid tmp[420999]))
            if call_tmp[626487]
            {
              (421015 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[558998] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[558999] "maybe param" "temp"
            unknown call_tmp[626492] "expr temp" "maybe param" "maybe type" "temp"
            (626495 'move' call_tmp[626492](421000 call isTrue tmp[420999]))
            (559004 'move' tmp[558999](559002 call _cond_test call_tmp[626492]))
            if tmp[558999]
            {
              (559009 'move' tmp[558998](559006 '_paramFoldLogical' tmp[558999] 1))
            }
            {
              unknown tmp[559011] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[626497] "expr temp" "maybe param" "maybe type" "temp"
              (626500 'move' call_tmp[626497](79118 call isArray tmpIter[78921]))
              (559013 'move' tmp[559011](421004 call isTrue call_tmp[626497]))
              (559018 'move' tmp[558998](559015 '_paramFoldLogical' tmp[558999] tmp[559011]))
            }
            unknown tmp[559038] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (559040 'move' tmp[559038](420983 call isTrue tmp[558998]))
            (559045 'move' tmp[559025](559042 '_paramFoldLogical' tmp[559026] tmp[559038]))
          }
          (79125 'move' isRngDomArr[79110] tmp[559025])
          if isRngDomArr[79110]
          {
            const _coforallCount[78977] "const" "end count" "temp"
            (79046 'move' _coforallCount[78977](79043 call _endCountAlloc 1))
            unknown numTasks[78978] "temp"
            (79030 'move' numTasks[78978](79026 call size _mt[243] tmpIter[78921]))
            (79021 call _upEndCount _coforallCount[78977] 1 numTasks[78978])
            (476451 'end of statement')
            (79018 call chpl_resetTaskSpawn numTasks[78978])
            (476452 'end of statement')
            unknown _indexOfInterest[78985] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78986] "expr temp" "temp"
            (78995 'move' _iterator[78986](78993 call _getIterator tmpIter[78921]))
            Defer
            {
              {
                (79011 call _freeIterator _iterator[78986])
              }
            }
            { scopeless type
              (79000 'move' _indexOfInterest[78985](78997 call iteratorIndex _iterator[78986]))
            }
            ForLoop[78987]
            {
              unknown chunk[79004] "coforall index var" "index var" "insert auto destroy"
              (476454 'end of statement')
              (79006 'move' chunk[79004] _indexOfInterest[78985])
              (476455 'end of statement' chunk[79004])
              {
                {
                  unknown call_tmp[626504] "expr temp" "maybe param" "maybe type" "temp"
                  (626507 'move' call_tmp[626504](78935 call - v[78756] 1))
                  unknown call_tmp[626509] "maybe param" "maybe type" "temp"
                  (626512 'move' call_tmp[626509](78930 call _computeBlock v[78756] numChunks[78772] chunk[79004] call_tmp[626504]))
                  const tmp[78928] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541396 'init var' tmp[78928] call_tmp[626509])
                  (78940 call _check_tuple_var_decl tmp[78928] 2)
                  (476457 'end of statement')
                  unknown call_tmp[626514] "maybe param" "maybe type" "temp"
                  (626517 'move' call_tmp[626514](78945 call tmp[78928] 0))
                  const lo[78943] "dead at end of block" "const" "insert auto destroy"
                  (541398 'init var' lo[78943] call_tmp[626514])
                  unknown call_tmp[626519] "maybe param" "maybe type" "temp"
                  (626522 'move' call_tmp[626519](78950 call tmp[78928] 1))
                  const hi[78948] "dead at end of block" "const" "insert auto destroy"
                  (541400 'init var' hi[78948] call_tmp[626519])
                  (78953 'end of statement')
                  unknown call_tmp[626524] "expr temp" "maybe param" "maybe type" "temp"
                  (626527 'move' call_tmp[626524](78955 call _cond_test debugChapelRange[64195]))
                  if call_tmp[626524]
                  {
                    unknown call_tmp[626529] "expr temp" "maybe param" "maybe type" "temp"
                    (626532 'move' call_tmp[626529](78965 call chpl_build_bounded_range lo[78943] hi[78948]))
                    unknown call_tmp[626534] "expr temp" "maybe param" "maybe type" "temp"
                    (626537 'move' call_tmp[626534](78963 call _build_tuple call_tmp[626529]))
                    (78960 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626534])
                    (476458 'end of statement' lo[78943] hi[78948])
                  }
                  unknown yret[511722] "YVV" "temp"
                  unknown call_tmp[626539] "expr temp" "maybe param" "maybe type" "temp"
                  (626542 'move' call_tmp[626539](78973 call chpl_build_bounded_range lo[78943] hi[78948]))
                  unknown call_tmp[626544] "expr temp" "maybe param" "maybe type" "temp"
                  (626547 'move' call_tmp[626544](78971 call _build_tuple call_tmp[626539]))
                  (511725 'move' yret[511722](511724 'deref' call_tmp[626544]))
                  (511727 yield yret[511722])
                  (476461 'end of statement' lo[78943] hi[78948])
                }
                (78980 call _downEndCount _coforallCount[78977] nil[44])
                (78979 'coforall loop')
              }
              label _continueLabel[78990]
              _indexOfInterest[78985]
              _iterator[78986]
            }
            label _breakLabel[78991]
            Defer
            {
              {
                (79033 call _endCountFree _coforallCount[78977])
              }
            }
            (79038 call _waitEndCount _coforallCount[78977] 1 numTasks[78978])
          }
          {
            const _coforallCount[79050] "const" "end count" "temp"
            (79107 'move' _coforallCount[79050](79104 call _endCountAlloc 1))
            unknown _indexOfInterest[79058] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[79059] "expr temp" "temp"
            (79068 'move' _iterator[79059](79066 call _getIterator tmpIter[78921]))
            Defer
            {
              {
                (79084 call _freeIterator _iterator[79059])
              }
            }
            { scopeless type
              (79073 'move' _indexOfInterest[79058](79070 call iteratorIndex _iterator[79059]))
            }
            ForLoop[79060]
            {
              unknown chunk[79077] "coforall index var" "index var" "insert auto destroy"
              (476468 'end of statement')
              (79079 'move' chunk[79077] _indexOfInterest[79058])
              (476469 'end of statement' chunk[79077])
              (79091 call _upEndCount _coforallCount[79050] 1)
              (476471 'end of statement')
              {
                {
                  unknown call_tmp[626549] "expr temp" "maybe param" "maybe type" "temp"
                  (626552 'move' call_tmp[626549](78863 call - v[78756] 1))
                  unknown call_tmp[626554] "maybe param" "maybe type" "temp"
                  (626557 'move' call_tmp[626554](78865 call _computeBlock v[78756] numChunks[78772] chunk[79077] call_tmp[626549]))
                  const tmp[78866] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541402 'init var' tmp[78866] call_tmp[626554])
                  (78873 call _check_tuple_var_decl tmp[78866] 2)
                  (476472 'end of statement')
                  unknown call_tmp[626559] "maybe param" "maybe type" "temp"
                  (626562 'move' call_tmp[626559](78867 call tmp[78866] 0))
                  const lo[78851] "dead at end of block" "const" "insert auto destroy"
                  (541404 'init var' lo[78851] call_tmp[626559])
                  unknown call_tmp[626564] "maybe param" "maybe type" "temp"
                  (626567 'move' call_tmp[626564](78870 call tmp[78866] 1))
                  const hi[78853] "dead at end of block" "const" "insert auto destroy"
                  (541406 'init var' hi[78853] call_tmp[626564])
                  (78878 'end of statement')
                  unknown call_tmp[626569] "expr temp" "maybe param" "maybe type" "temp"
                  (626572 'move' call_tmp[626569](78908 call _cond_test debugChapelRange[64195]))
                  if call_tmp[626569]
                  {
                    unknown call_tmp[626574] "expr temp" "maybe param" "maybe type" "temp"
                    (626577 'move' call_tmp[626574](78902 call chpl_build_bounded_range lo[78851] hi[78853]))
                    unknown call_tmp[626579] "expr temp" "maybe param" "maybe type" "temp"
                    (626582 'move' call_tmp[626579](78904 call _build_tuple call_tmp[626574]))
                    (78906 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626579])
                    (476473 'end of statement' lo[78851] hi[78853])
                  }
                  unknown yret[511729] "YVV" "temp"
                  unknown call_tmp[626584] "expr temp" "maybe param" "maybe type" "temp"
                  (626587 'move' call_tmp[626584](78915 call chpl_build_bounded_range lo[78851] hi[78853]))
                  unknown call_tmp[626589] "expr temp" "maybe param" "maybe type" "temp"
                  (626592 'move' call_tmp[626589](78917 call _build_tuple call_tmp[626584]))
                  (511732 'move' yret[511729](511731 'deref' call_tmp[626589]))
                  (511734 yield yret[511729])
                  (476476 'end of statement' lo[78851] hi[78853])
                }
                (79053 call _downEndCount _coforallCount[79050] nil[44])
                (79052 'coforall loop')
              }
              label _continueLabel[79063]
              _indexOfInterest[79058]
              _iterator[79059]
            }
            label _breakLabel[79064]
            Defer
            {
              {
                (79095 call _endCountFree _coforallCount[79050])
              }
            }
            (79100 call _waitEndCount _coforallCount[79050] 1)
          }
        }
      }
    }
    (511678 return ret[511676])
  }
  where {
    (77330 call == tag[77315] leader[447])
  }
  function range[64316](?).these[79149](arg _mt[79156]:_MT[238], arg this[79153]:range[64316](?) :
  range[64316](?), param arg tag[79146]:iterKind[453], arg followThis[79151]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511738] "RVV" "temp"
    unknown tmp[421041] "maybe param" "temp"
    (421052 'move' tmp[421041] 1)
    unknown call_tmp[626594] "expr temp" "maybe param" "maybe type" "temp"
    (626597 'move' call_tmp[626594](421054 call _cond_invalid tmp[421041]))
    if call_tmp[626594]
    {
      (421057 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559052] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559053] "maybe param" "temp"
    unknown call_tmp[626599] "expr temp" "maybe param" "maybe type" "temp"
    (626602 'move' call_tmp[626599](421042 call isTrue tmp[421041]))
    (559058 'move' tmp[559053](559056 call _cond_test call_tmp[626599]))
    if tmp[559053]
    {
      unknown tmp[559060] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626606] "expr temp" "maybe param" "maybe type" "temp"
      (626609 'move' call_tmp[626606](79171 call(79167 call (partial) isAmbiguous _mt[243] this[79153])))
      (559062 'move' tmp[559060](421045 call isTrue call_tmp[626606]))
      (559067 'move' tmp[559052](559064 '_paramFoldLogical' tmp[559053] tmp[559060]))
    }
    {
      (559072 'move' tmp[559052](559069 '_paramFoldLogical' tmp[559053] 0))
    }
    unknown call_tmp[626611] "expr temp" "maybe param" "maybe type" "temp"
    (626614 'move' call_tmp[626611](79182 call _cond_test tmp[559052]))
    if call_tmp[626611]
    {
      (79180 call boundsCheckHalt module=[255] HaltWrappers[209998] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358045 'referenced modules list' HaltWrappers[209998])
    }
    unknown call_tmp[626618] "expr temp" "maybe param" "maybe type" "temp"
    (626621 'move' call_tmp[626618](375959 call boundedType _mt[243] this[79153]))
    unknown call_tmp[626623] "expr temp" "maybe param" "maybe type" "temp"
    (626626 'move' call_tmp[626623](79193 call == call_tmp[626618] boundedNone[64211]))
    unknown call_tmp[626628] "expr temp" "maybe param" "maybe type" "temp"
    (626631 'move' call_tmp[626628](79200 call _cond_test call_tmp[626623]))
    if call_tmp[626628]
    {
      (79198 call compilerError "iteration over a range with no bounds")
    }
    unknown tmp[421062] "maybe param" "temp"
    unknown call_tmp[626635] "expr temp" "maybe param" "maybe type" "temp"
    (626638 'move' call_tmp[626635](375964 call stridable _mt[243] this[79153]))
    (421073 'move' tmp[421062](79206 call ! call_tmp[626635]))
    unknown call_tmp[626640] "expr temp" "maybe param" "maybe type" "temp"
    (626643 'move' call_tmp[626640](421075 call _cond_invalid tmp[421062]))
    if call_tmp[626640]
    {
      (421078 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559079] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559080] "maybe param" "temp"
    unknown call_tmp[626645] "expr temp" "maybe param" "maybe type" "temp"
    (626648 'move' call_tmp[626645](421063 call isTrue tmp[421062]))
    (559085 'move' tmp[559080](559083 call _cond_test call_tmp[626645]))
    if tmp[559080]
    {
      unknown tmp[559087] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626652] "expr temp" "maybe param" "maybe type" "temp"
      (626655 'move' call_tmp[626652](375969 call boundedType _mt[243] this[79153]))
      unknown call_tmp[626657] "expr temp" "maybe param" "maybe type" "temp"
      (626660 'move' call_tmp[626657](79213 call == call_tmp[626652] boundedHigh[64209]))
      (559089 'move' tmp[559087](421066 call isTrue call_tmp[626657]))
      (559094 'move' tmp[559079](559091 '_paramFoldLogical' tmp[559080] tmp[559087]))
    }
    {
      (559099 'move' tmp[559079](559096 '_paramFoldLogical' tmp[559080] 0))
    }
    unknown call_tmp[626662] "expr temp" "maybe param" "maybe type" "temp"
    (626665 'move' call_tmp[626662](79238 call _cond_test tmp[559079]))
    if call_tmp[626662]
    {
      (79236 call compilerError "iteration over a range with no first index")
    }
    unknown call_tmp[626669] "expr temp" "maybe param" "maybe type" "temp"
    (626672 'move' call_tmp[626669](79244 call size _mt[243] followThis[79151]))
    unknown call_tmp[626674] "expr temp" "maybe param" "maybe type" "temp"
    (626677 'move' call_tmp[626674](79248 call != call_tmp[626669] 1))
    unknown call_tmp[626679] "expr temp" "maybe param" "maybe type" "temp"
    (626682 'move' call_tmp[626679](79271 call _cond_test call_tmp[626674]))
    if call_tmp[626679]
    {
      (79269 call compilerError "iteration over a range with multi-dimensional iterator")
    }
    unknown call_tmp[626684] "expr temp" "maybe param" "maybe type" "temp"
    (626687 'move' call_tmp[626684](79299 call _cond_test debugChapelRange[64195]))
    if call_tmp[626684]
    {
      (79297 call chpl_debug_writeln "In range follower code: Following " followThis[79151])
    }
    unknown call_tmp[626689] "maybe param" "maybe type" "temp"
    (626692 'move' call_tmp[626689](79307 call followThis[79151] 0))
    unknown myFollowThis[79308] "dead at end of block" "insert auto destroy"
    (541408 'init var' myFollowThis[79308] call_tmp[626689])
    (79311 'end of statement')
    unknown call_tmp[626694] "expr temp" "maybe param" "maybe type" "temp"
    (626697 'move' call_tmp[626694](79335 call _cond_test debugChapelRange[64195]))
    if call_tmp[626694]
    {
      (79333 call chpl_debug_writeln "Range = " myFollowThis[79308])
      (476489 'end of statement' myFollowThis[79308])
    }
    unknown tmp[421083] "maybe param" "temp"
    (421094 'move' tmp[421083] 1)
    unknown call_tmp[626699] "expr temp" "maybe param" "maybe type" "temp"
    (626702 'move' call_tmp[626699](421096 call _cond_invalid tmp[421083]))
    if call_tmp[626699]
    {
      (421099 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559106] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559107] "maybe param" "temp"
    unknown call_tmp[626704] "expr temp" "maybe param" "maybe type" "temp"
    (626707 'move' call_tmp[626704](421084 call isTrue tmp[421083]))
    (559112 'move' tmp[559107](559110 call _cond_test call_tmp[626704]))
    if tmp[559107]
    {
      unknown tmp[559114] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626711] "expr temp" "maybe param" "maybe type" "temp"
      (626714 'move' call_tmp[626711](79346 call(79342 call (partial) hasFirst _mt[243] this[79153])))
      unknown call_tmp[626716] "expr temp" "maybe param" "maybe type" "temp"
      (626719 'move' call_tmp[626716](79347 call ! call_tmp[626711]))
      (559116 'move' tmp[559114](421087 call isTrue call_tmp[626716]))
      (559121 'move' tmp[559106](559118 '_paramFoldLogical' tmp[559107] tmp[559114]))
    }
    {
      (559126 'move' tmp[559106](559123 '_paramFoldLogical' tmp[559107] 0))
    }
    unknown call_tmp[626721] "expr temp" "maybe param" "maybe type" "temp"
    (626724 'move' call_tmp[626721](79409 call _cond_test tmp[559106]))
    if call_tmp[626721]
    {
      unknown call_tmp[626728] "expr temp" "maybe param" "maybe type" "temp"
      (626731 'move' call_tmp[626728](79356 call(79352 call (partial) isEmpty _mt[243] this[79153])))
      unknown call_tmp[626733] "expr temp" "maybe param" "maybe type" "temp"
      (626736 'move' call_tmp[626733](79404 call _cond_test call_tmp[626728]))
      if call_tmp[626733]
      {
        unknown call_tmp[626740] "expr temp" "maybe param" "maybe type" "temp"
        (626743 'move' call_tmp[626740](79362 call(79358 call (partial) isEmpty _mt[243] myFollowThis[79308])))
        unknown call_tmp[626745] "expr temp" "maybe param" "maybe type" "temp"
        (626748 'move' call_tmp[626745](79363 call ! call_tmp[626740]))
        unknown call_tmp[626750] "expr temp" "maybe param" "maybe type" "temp"
        (626753 'move' call_tmp[626750](79389 call _cond_test call_tmp[626745]))
        if call_tmp[626750]
        {
          (79387 call boundsCheckHalt module=[255] HaltWrappers[209998] "size mismatch in zippered iteration")
          (358057 'referenced modules list' HaltWrappers[209998])
        }
      }
      {
        (79401 call boundsCheckHalt module=[255] HaltWrappers[209998] "iteration over a range with no first index")
        (358063 'referenced modules list' HaltWrappers[209998])
      }
    }
    unknown tmp[421125] "maybe param" "temp"
    (421136 'move' tmp[421125] 1)
    unknown call_tmp[626755] "expr temp" "maybe param" "maybe type" "temp"
    (626758 'move' call_tmp[626755](421138 call _cond_invalid tmp[421125]))
    if call_tmp[626755]
    {
      (421141 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559133] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559134] "maybe param" "temp"
    unknown call_tmp[626760] "expr temp" "maybe param" "maybe type" "temp"
    (626763 'move' call_tmp[626760](421126 call isTrue tmp[421125]))
    (559139 'move' tmp[559134](559137 call _cond_test call_tmp[626760]))
    if tmp[559134]
    {
      unknown tmp[559141] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626767] "expr temp" "maybe param" "maybe type" "temp"
      (626770 'move' call_tmp[626767](79419 call(79415 call (partial) hasFirst _mt[243] myFollowThis[79308])))
      unknown call_tmp[626772] "expr temp" "maybe param" "maybe type" "temp"
      (626775 'move' call_tmp[626772](79420 call ! call_tmp[626767]))
      (559143 'move' tmp[559141](421129 call isTrue call_tmp[626772]))
      (559148 'move' tmp[559133](559145 '_paramFoldLogical' tmp[559134] tmp[559141]))
    }
    {
      (559153 'move' tmp[559133](559150 '_paramFoldLogical' tmp[559134] 0))
    }
    unknown call_tmp[626777] "expr temp" "maybe param" "maybe type" "temp"
    (626780 'move' call_tmp[626777](79472 call _cond_test tmp[559133]))
    if call_tmp[626777]
    {
      unknown tmp[421104] "maybe param" "temp"
      unknown call_tmp[626784] "expr temp" "maybe param" "maybe type" "temp"
      (626787 'move' call_tmp[626784](79429 call(79425 call (partial) isAmbiguous _mt[243] myFollowThis[79308])))
      (421115 'move' tmp[421104](79430 call ! call_tmp[626784]))
      unknown call_tmp[626789] "expr temp" "maybe param" "maybe type" "temp"
      (626792 'move' call_tmp[626789](421117 call _cond_invalid tmp[421104]))
      if call_tmp[626789]
      {
        (421120 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559160] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559161] "maybe param" "temp"
      unknown call_tmp[626794] "expr temp" "maybe param" "maybe type" "temp"
      (626797 'move' call_tmp[626794](421105 call isTrue tmp[421104]))
      (559166 'move' tmp[559161](559164 call _cond_test call_tmp[626794]))
      if tmp[559161]
      {
        unknown tmp[559168] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626801] "expr temp" "maybe param" "maybe type" "temp"
        (626804 'move' call_tmp[626801](79437 call(79433 call (partial) isEmpty _mt[243] myFollowThis[79308])))
        (559170 'move' tmp[559168](421108 call isTrue call_tmp[626801]))
        (559175 'move' tmp[559160](559172 '_paramFoldLogical' tmp[559161] tmp[559168]))
      }
      {
        (559180 'move' tmp[559160](559177 '_paramFoldLogical' tmp[559161] 0))
      }
      unknown call_tmp[626806] "expr temp" "maybe param" "maybe type" "temp"
      (626809 'move' call_tmp[626806](79440 call ! tmp[559160]))
      unknown call_tmp[626811] "expr temp" "maybe param" "maybe type" "temp"
      (626814 'move' call_tmp[626811](79466 call _cond_test call_tmp[626806]))
      if call_tmp[626811]
      {
        (79464 call boundsCheckHalt module=[255] HaltWrappers[209998] "zippered iteration over a range with no first index")
        (358072 'referenced modules list' HaltWrappers[209998])
      }
    }
    unknown tmp[421209] "maybe param" "temp"
    unknown tmp[421230] "maybe param" "temp"
    (421241 'move' tmp[421230](79479 call isBoundedRange myFollowThis[79308]))
    unknown call_tmp[626816] "expr temp" "maybe param" "maybe type" "temp"
    (626819 'move' call_tmp[626816](421243 call _cond_invalid tmp[421230]))
    if call_tmp[626816]
    {
      (421246 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559187] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559188] "maybe param" "temp"
    unknown call_tmp[626821] "expr temp" "maybe param" "maybe type" "temp"
    (626824 'move' call_tmp[626821](421231 call isTrue tmp[421230]))
    (559193 'move' tmp[559188](559191 call _cond_test call_tmp[626821]))
    if tmp[559188]
    {
      unknown tmp[559195] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626828] "expr temp" "maybe param" "maybe type" "temp"
      (626831 'move' call_tmp[626828](79481 call stridable _mt[243] myFollowThis[79308]))
      unknown call_tmp[626833] "expr temp" "maybe param" "maybe type" "temp"
      (626836 'move' call_tmp[626833](79484 call ! call_tmp[626828]))
      (559197 'move' tmp[559195](421234 call isTrue call_tmp[626833]))
      (559202 'move' tmp[559187](559199 '_paramFoldLogical' tmp[559188] tmp[559195]))
    }
    {
      (559207 'move' tmp[559187](559204 '_paramFoldLogical' tmp[559188] 0))
    }
    (421220 'move' tmp[421209] tmp[559187])
    unknown call_tmp[626838] "expr temp" "maybe param" "maybe type" "temp"
    (626841 'move' call_tmp[626838](421222 call _cond_invalid tmp[421209]))
    if call_tmp[626838]
    {
      (421225 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[559214] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559215] "maybe param" "temp"
    unknown call_tmp[626843] "expr temp" "maybe param" "maybe type" "temp"
    (626846 'move' call_tmp[626843](421210 call isTrue tmp[421209]))
    (559220 'move' tmp[559215](559218 call _cond_test call_tmp[626843]))
    if tmp[559215]
    {
      (559225 'move' tmp[559214](559222 '_paramFoldLogical' tmp[559215] 1))
    }
    {
      unknown tmp[559227] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626850] "expr temp" "maybe param" "maybe type" "temp"
      (626853 'move' call_tmp[626850](79493 call(79489 call (partial) hasLast _mt[243] myFollowThis[79308])))
      (559229 'move' tmp[559227](421214 call isTrue call_tmp[626850]))
      (559234 'move' tmp[559214](559231 '_paramFoldLogical' tmp[559215] tmp[559227]))
    }
    unknown call_tmp[626855] "expr temp" "maybe param" "maybe type" "temp"
    (626858 'move' call_tmp[626855](80144 call _cond_test tmp[559214]))
    if call_tmp[626855]
    {
      unknown call_tmp[626862] "maybe param" "maybe type" "temp"
      (626865 'move' call_tmp[626862](79497 call size _mt[243] myFollowThis[79308]))
      const flwlen[79500] "dead at end of block" "const" "insert auto destroy"
      (541410 'init var' flwlen[79500] call_tmp[626862])
      (79503 'end of statement' myFollowThis[79308])
      unknown tmp[421146] "maybe param" "temp"
      (421157 'move' tmp[421146] 1)
      unknown call_tmp[626867] "expr temp" "maybe param" "maybe type" "temp"
      (626870 'move' call_tmp[626867](421159 call _cond_invalid tmp[421146]))
      if call_tmp[626867]
      {
        (421162 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559241] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559242] "maybe param" "temp"
      unknown call_tmp[626872] "expr temp" "maybe param" "maybe type" "temp"
      (626875 'move' call_tmp[626872](421147 call isTrue tmp[421146]))
      (559247 'move' tmp[559242](559245 call _cond_test call_tmp[626872]))
      if tmp[559242]
      {
        unknown tmp[559249] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626879] "expr temp" "maybe param" "maybe type" "temp"
        (626882 'move' call_tmp[626879](79511 call(79507 call (partial) hasLast _mt[243] this[79153])))
        (559251 'move' tmp[559249](421150 call isTrue call_tmp[626879]))
        (559256 'move' tmp[559241](559253 '_paramFoldLogical' tmp[559242] tmp[559249]))
      }
      {
        (559261 'move' tmp[559241](559258 '_paramFoldLogical' tmp[559242] 0))
      }
      unknown call_tmp[626884] "expr temp" "maybe param" "maybe type" "temp"
      (626887 'move' call_tmp[626884](79583 call _cond_test tmp[559241]))
      if call_tmp[626884]
      {
        unknown call_tmp[626889] "expr temp" "maybe param" "maybe type" "temp"
        (626892 'move' call_tmp[626889](79517 call isBoundedRange this[79153]))
        unknown call_tmp[626894] "expr temp" "maybe param" "maybe type" "temp"
        (626897 'move' call_tmp[626894](79577 call _cond_test call_tmp[626889]))
        if call_tmp[626894]
        {
          unknown call_tmp[626901] "expr temp" "maybe param" "maybe type" "temp"
          (626904 'move' call_tmp[626901](79519 call size _mt[243] this[79153]))
          unknown call_tmp[626906] "expr temp" "maybe param" "maybe type" "temp"
          (626909 'move' call_tmp[626906](79523 call < call_tmp[626901] flwlen[79500]))
          unknown call_tmp[626911] "expr temp" "maybe param" "maybe type" "temp"
          (626914 'move' call_tmp[626911](79549 call _cond_test call_tmp[626906]))
          if call_tmp[626911]
          {
            (79547 call boundsCheckHalt module=[255] HaltWrappers[209998] "zippered iteration over a range with too few indices")
            (358083 'referenced modules list' HaltWrappers[209998])
          }
        }
        {
          (79575 call assert 0 "hasFirst && hasLast do not imply isBoundedRange")
        }
      }
      unknown tmp[421167] "maybe param" "temp"
      (421178 'move' tmp[421167](79588 call stridable _mt[243] this[79153]))
      unknown call_tmp[626918] "expr temp" "maybe param" "maybe type" "temp"
      (626921 'move' call_tmp[626918](421180 call _cond_invalid tmp[421167]))
      if call_tmp[626918]
      {
        (421183 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559268] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559269] "maybe param" "temp"
      unknown call_tmp[626923] "expr temp" "maybe param" "maybe type" "temp"
      (626926 'move' call_tmp[626923](421168 call isTrue tmp[421167]))
      (559274 'move' tmp[559269](559272 call _cond_test call_tmp[626923]))
      if tmp[559269]
      {
        (559279 'move' tmp[559268](559276 '_paramFoldLogical' tmp[559269] 1))
      }
      {
        unknown tmp[559281] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626930] "expr temp" "maybe param" "maybe type" "temp"
        (626933 'move' call_tmp[626930](79592 call stridable _mt[243] myFollowThis[79308]))
        (559283 'move' tmp[559281](421172 call isTrue call_tmp[626930]))
        (559288 'move' tmp[559268](559285 '_paramFoldLogical' tmp[559269] tmp[559281]))
      }
      unknown call_tmp[626935] "expr temp" "maybe param" "maybe type" "temp"
      (626938 'move' call_tmp[626935](79933 call _cond_test tmp[559268]))
      if call_tmp[626935]
      {
        unknown call_tmp[626942] "expr temp" "maybe param" "maybe type" "temp"
        (626945 'move' call_tmp[626942](79600 call(375984 call (partial) chpl_intToIdx _mt[243] this[79153]) 1))
        unknown call_tmp[626949] "expr temp" "maybe param" "maybe type" "temp"
        (626952 'move' call_tmp[626949](79604 call(375988 call (partial) chpl_intToIdx _mt[243] this[79153]) 0))
        unknown call_tmp[626954] "expr temp" "maybe param" "maybe type" "temp"
        (626957 'move' call_tmp[626954](79605 call chpl_build_bounded_range call_tmp[626942] call_tmp[626949]))
        unknown call_tmp[626961] "expr temp" "maybe param" "maybe type" "temp"
        (626964 'move' call_tmp[626961](375992 call intIdxType _mt[243] this[79153]))
        unknown call_tmp[626966] "expr temp" "maybe param" "maybe type" "temp"
        (626969 'move' call_tmp[626966](79611 call chpl__rangeStrideType call_tmp[626961]))
        unknown call_tmp[626971] "expr temp" "maybe param" "maybe type" "temp"
        (626974 'move' call_tmp[626971](79612 call _cast call_tmp[626966] 1))
        unknown call_tmp[626976] "maybe param" "maybe type" "temp"
        (626979 'move' call_tmp[626976](79614 call chpl_by call_tmp[626954] call_tmp[626971]))
        unknown r[79616] "dead at end of block" "insert auto destroy"
        (541412 'init var' r[79616] call_tmp[626976])
        (79619 'end of statement')
        unknown call_tmp[626981] "expr temp" "maybe param" "maybe type" "temp"
        (626984 'move' call_tmp[626981](79623 call != flwlen[79500] 0))
        unknown call_tmp[626986] "expr temp" "maybe param" "maybe type" "temp"
        (626989 'move' call_tmp[626986](79725 call _cond_test call_tmp[626981]))
        if call_tmp[626986]
        {
          unknown call_tmp[626993] "expr temp" "maybe param" "maybe type" "temp"
          (626996 'move' call_tmp[626993](79626 call stride _mt[243] this[79153]))
          unknown call_tmp[627000] "expr temp" "maybe param" "maybe type" "temp"
          (627003 'move' call_tmp[627000](79630 call stride _mt[243] myFollowThis[79308]))
          unknown call_tmp[627005] "maybe param" "maybe type" "temp"
          (627008 'move' call_tmp[627005](79633 call * call_tmp[626993] call_tmp[627000]))
          const stride[79635] "dead at end of block" "const" "insert auto destroy"
          (541414 'init var' stride[79635] call_tmp[627005])
          (79638 'end of statement')
          unknown call_tmp[627014] "expr temp" "maybe param" "maybe type" "temp"
          (627017 'move' call_tmp[627014](79645 call first _mt[243] myFollowThis[79308]))
          unknown call_tmp[627019] "maybe param" "maybe type" "temp"
          (627022 'move' call_tmp[627019](79649 call(79641 call (partial) orderToIndex _mt[243] this[79153]) call_tmp[627014]))
          unknown low[79650] "dead at end of block" "insert auto destroy"
          (541416 'init var' low[79650] call_tmp[627019])
          (79653 'end of statement')
          unknown call_tmp[627028] "expr temp" "maybe param" "maybe type" "temp"
          (627031 'move' call_tmp[627028](376002 call strType _mt[243] this[79153]))
          unknown call_tmp[627033] "expr temp" "maybe param" "maybe type" "temp"
          (627036 'move' call_tmp[627033](79658 call chpl__idxToInt low[79650]))
          unknown call_tmp[627038] "expr temp" "maybe param" "maybe type" "temp"
          (627041 'move' call_tmp[627038](79660 call _cast call_tmp[627028] call_tmp[627033]))
          unknown call_tmp[627045] "expr temp" "maybe param" "maybe type" "temp"
          (627048 'move' call_tmp[627045](376008 call strType _mt[243] this[79153]))
          unknown call_tmp[627050] "expr temp" "maybe param" "maybe type" "temp"
          (627053 'move' call_tmp[627050](79665 call - flwlen[79500] 1))
          unknown call_tmp[627055] "expr temp" "maybe param" "maybe type" "temp"
          (627058 'move' call_tmp[627055](79668 call _cast call_tmp[627045] call_tmp[627050]))
          unknown call_tmp[627060] "expr temp" "maybe param" "maybe type" "temp"
          (627063 'move' call_tmp[627060](79670 call * stride[79635] call_tmp[627055]))
          unknown call_tmp[627065] "expr temp" "maybe param" "maybe type" "temp"
          (627068 'move' call_tmp[627065](79672 call + call_tmp[627038] call_tmp[627060]))
          unknown call_tmp[627070] "maybe param" "maybe type" "temp"
          (627073 'move' call_tmp[627070](79675 call(375997 call (partial) chpl_intToIdx _mt[243] this[79153]) call_tmp[627065]))
          unknown high[79676] "dead at end of block" "insert auto destroy"
          (541418 'init var' high[79676] call_tmp[627070])
          (79679 'end of statement' myFollowThis[79308] myFollowThis[79308] low[79650] stride[79635] flwlen[79500])
          unknown call_tmp[627079] "expr temp" "maybe param" "maybe type" "temp"
          (627082 'move' call_tmp[627079](79687 call last _mt[243] myFollowThis[79308]))
          unknown call_tmp[627084] "expr temp" "maybe param" "maybe type" "temp"
          (627087 'move' call_tmp[627084](79691 call(79683 call (partial) orderToIndex _mt[243] this[79153]) call_tmp[627079]))
          unknown call_tmp[627089] "expr temp" "maybe param" "maybe type" "temp"
          (627092 'move' call_tmp[627089](79692 call == high[79676] call_tmp[627084]))
          (79695 call assert call_tmp[627089])
          (476509 'end of statement' high[79676] myFollowThis[79308])
          unknown call_tmp[627094] "expr temp" "maybe param" "maybe type" "temp"
          (627097 'move' call_tmp[627094](79699 call < stride[79635] 0))
          unknown call_tmp[627099] "expr temp" "maybe param" "maybe type" "temp"
          (627102 'move' call_tmp[627099](79706 call _cond_test call_tmp[627094]))
          if call_tmp[627099]
          {
            (79703 call <=> low[79650] high[79676])
            (476512 'end of statement' low[79650] high[79676])
          }
          unknown call_tmp[627104] "expr temp" "maybe param" "maybe type" "temp"
          (627107 'move' call_tmp[627104](79714 call chpl_build_bounded_range low[79650] high[79676]))
          unknown call_tmp[627111] "expr temp" "maybe param" "maybe type" "temp"
          (627114 'move' call_tmp[627111](376020 call strType _mt[243] this[79153]))
          unknown call_tmp[627116] "expr temp" "maybe param" "maybe type" "temp"
          (627119 'move' call_tmp[627116](79718 call _cast call_tmp[627111] stride[79635]))
          unknown call_tmp[627121] "expr temp" "maybe param" "maybe type" "temp"
          (627124 'move' call_tmp[627121](79720 call chpl_by call_tmp[627104] call_tmp[627116]))
          (79722 call = r[79616] call_tmp[627121])
          (476515 'end of statement' r[79616] low[79650] high[79676] stride[79635])
        }
        unknown call_tmp[627126] "expr temp" "maybe param" "maybe type" "temp"
        (627129 'move' call_tmp[627126](79752 call _cond_test debugChapelRange[64195]))
        if call_tmp[627126]
        {
          (79750 call chpl_debug_writeln "Expanded range = " r[79616])
          (476520 'end of statement' r[79616])
        }
        {
          unknown _indexOfInterest[79762] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79763] "expr temp" "temp"
          (79772 'move' _iterator[79763](79770 call _getIterator r[79616]))
          Defer
          {
            {
              (79788 call _freeIterator _iterator[79763])
            }
          }
          { scopeless type
            (79777 'move' _indexOfInterest[79762](79774 call iteratorIndex _iterator[79763]))
          }
          ForLoop[79764]
          {
            unknown i[79781] "index var" "insert auto destroy"
            (476523 'end of statement')
            (79783 'move' i[79781] _indexOfInterest[79762])
            (476524 'end of statement' i[79781])
            unknown yret[511742] "YVV" "temp"
            (511745 'move' yret[511742](511744 'deref' i[79781]))
            (511747 yield yret[511742])
            (476526 'end of statement' i[79781])
            label _continueLabel[79767]
            _indexOfInterest[79762]
            _iterator[79763]
          }
          label _breakLabel[79768]
        }
      }
      {
        unknown call_tmp[627133] "expr temp" "maybe param" "maybe type" "temp"
        (627136 'move' call_tmp[627133](376029 call idxType _mt[243] this[79153]))
        unknown call_tmp[627138] "expr temp" "maybe param" "maybe type" "temp"
        (627141 'move' call_tmp[627138](79799 call chpl__intToIdx call_tmp[627133] 1))
        unknown call_tmp[627145] "expr temp" "maybe param" "maybe type" "temp"
        (627148 'move' call_tmp[627145](376034 call idxType _mt[243] this[79153]))
        unknown call_tmp[627150] "expr temp" "maybe param" "maybe type" "temp"
        (627153 'move' call_tmp[627150](79804 call chpl__intToIdx call_tmp[627145] 0))
        unknown call_tmp[627155] "maybe param" "maybe type" "temp"
        (627158 'move' call_tmp[627155](79805 call chpl_build_bounded_range call_tmp[627138] call_tmp[627150]))
        unknown r[79807] "dead at end of block" "insert auto destroy"
        (541420 'init var' r[79807] call_tmp[627155])
        (79810 'end of statement')
        unknown call_tmp[627160] "expr temp" "maybe param" "maybe type" "temp"
        (627163 'move' call_tmp[627160](79814 call != flwlen[79500] 0))
        unknown call_tmp[627165] "expr temp" "maybe param" "maybe type" "temp"
        (627168 'move' call_tmp[627165](79879 call _cond_test call_tmp[627160]))
        if call_tmp[627165]
        {
          unknown call_tmp[627174] "expr temp" "maybe param" "maybe type" "temp"
          (627177 'move' call_tmp[627174](79821 call first _mt[243] myFollowThis[79308]))
          unknown call_tmp[627179] "maybe param" "maybe type" "temp"
          (627182 'move' call_tmp[627179](79825 call(79817 call (partial) orderToIndex _mt[243] this[79153]) call_tmp[627174]))
          const low[79826] "dead at end of block" "const" "insert auto destroy"
          (541422 'init var' low[79826] call_tmp[627179])
          (79829 'end of statement')
          unknown call_tmp[627188] "expr temp" "maybe param" "maybe type" "temp"
          (627191 'move' call_tmp[627188](376044 call strType _mt[243] this[79153]))
          unknown call_tmp[627193] "expr temp" "maybe param" "maybe type" "temp"
          (627196 'move' call_tmp[627193](79835 call chpl__idxToInt low[79826]))
          unknown call_tmp[627198] "expr temp" "maybe param" "maybe type" "temp"
          (627201 'move' call_tmp[627198](79837 call _cast call_tmp[627188] call_tmp[627193]))
          unknown call_tmp[627205] "expr temp" "maybe param" "maybe type" "temp"
          (627208 'move' call_tmp[627205](376049 call strType _mt[243] this[79153]))
          unknown call_tmp[627210] "expr temp" "maybe param" "maybe type" "temp"
          (627213 'move' call_tmp[627210](79841 call - flwlen[79500] 1))
          unknown call_tmp[627215] "expr temp" "maybe param" "maybe type" "temp"
          (627218 'move' call_tmp[627215](79844 call _cast call_tmp[627205] call_tmp[627210]))
          unknown call_tmp[627220] "expr temp" "maybe param" "maybe type" "temp"
          (627223 'move' call_tmp[627220](79846 call + call_tmp[627198] call_tmp[627215]))
          unknown call_tmp[627225] "maybe param" "maybe type" "temp"
          (627228 'move' call_tmp[627225](79849 call(376039 call (partial) chpl_intToIdx _mt[243] this[79153]) call_tmp[627220]))
          const high[79850] "dead at end of block" "const" "insert auto destroy"
          (541424 'init var' high[79850] call_tmp[627225])
          (79853 'end of statement' myFollowThis[79308] low[79826] flwlen[79500])
          unknown call_tmp[627234] "expr temp" "maybe param" "maybe type" "temp"
          (627237 'move' call_tmp[627234](79861 call last _mt[243] myFollowThis[79308]))
          unknown call_tmp[627239] "expr temp" "maybe param" "maybe type" "temp"
          (627242 'move' call_tmp[627239](79865 call(79857 call (partial) orderToIndex _mt[243] this[79153]) call_tmp[627234]))
          unknown call_tmp[627244] "expr temp" "maybe param" "maybe type" "temp"
          (627247 'move' call_tmp[627244](79866 call == high[79850] call_tmp[627239]))
          (79869 call assert call_tmp[627244])
          (476531 'end of statement' high[79850] myFollowThis[79308])
          unknown call_tmp[627249] "expr temp" "maybe param" "maybe type" "temp"
          (627252 'move' call_tmp[627249](79874 call chpl_build_bounded_range low[79826] high[79850]))
          (79876 call = r[79807] call_tmp[627249])
          (476534 'end of statement' r[79807] low[79826] high[79850])
        }
        unknown call_tmp[627254] "expr temp" "maybe param" "maybe type" "temp"
        (627257 'move' call_tmp[627254](79890 call _cond_test debugChapelRange[64195]))
        if call_tmp[627254]
        {
          (79888 call chpl_debug_writeln "Expanded range = " r[79807])
          (476538 'end of statement' r[79807])
        }
        {
          unknown _indexOfInterest[79900] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79901] "expr temp" "temp"
          (79910 'move' _iterator[79901](79908 call _getIterator r[79807]))
          Defer
          {
            {
              (79926 call _freeIterator _iterator[79901])
            }
          }
          { scopeless type
            (79915 'move' _indexOfInterest[79900](79912 call iteratorIndex _iterator[79901]))
          }
          ForLoop[79902]
          {
            unknown i[79919] "index var" "insert auto destroy"
            (476541 'end of statement')
            (79921 'move' i[79919] _indexOfInterest[79900])
            (476542 'end of statement' i[79919])
            unknown yret[511749] "YVV" "temp"
            (511752 'move' yret[511749](511751 'deref' i[79919]))
            (511754 yield yret[511749])
            (476544 'end of statement' i[79919])
            label _continueLabel[79905]
            _indexOfInterest[79900]
            _iterator[79901]
          }
          label _breakLabel[79906]
        }
      }
    }
    {
      unknown tmp[421188] "maybe param" "temp"
      (421199 'move' tmp[421188] 1)
      unknown call_tmp[627259] "expr temp" "maybe param" "maybe type" "temp"
      (627262 'move' call_tmp[627259](421201 call _cond_invalid tmp[421188]))
      if call_tmp[627259]
      {
        (421204 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559295] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559296] "maybe param" "temp"
      unknown call_tmp[627264] "expr temp" "maybe param" "maybe type" "temp"
      (627267 'move' call_tmp[627264](421189 call isTrue tmp[421188]))
      (559301 'move' tmp[559296](559299 call _cond_test call_tmp[627264]))
      if tmp[559296]
      {
        unknown tmp[559303] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627271] "expr temp" "maybe param" "maybe type" "temp"
        (627274 'move' call_tmp[627271](79943 call(79939 call (partial) hasLast _mt[243] this[79153])))
        (559305 'move' tmp[559303](421192 call isTrue call_tmp[627271]))
        (559310 'move' tmp[559295](559307 '_paramFoldLogical' tmp[559296] tmp[559303]))
      }
      {
        (559315 'move' tmp[559295](559312 '_paramFoldLogical' tmp[559296] 0))
      }
      unknown call_tmp[627276] "expr temp" "maybe param" "maybe type" "temp"
      (627279 'move' call_tmp[627276](79974 call _cond_test tmp[559295]))
      if call_tmp[627276]
      {
        (79972 call zipLengthHalt module=[255] HaltWrappers[209998] "zippered iteration where a bounded range follows an unbounded iterator")
        (358102 'referenced modules list' HaltWrappers[209998])
      }
      unknown call_tmp[627285] "expr temp" "maybe param" "maybe type" "temp"
      (627288 'move' call_tmp[627285](79985 call first _mt[243] myFollowThis[79308]))
      unknown call_tmp[627290] "maybe param" "maybe type" "temp"
      (627293 'move' call_tmp[627290](79989 call(79981 call (partial) orderToIndex _mt[243] this[79153]) call_tmp[627285]))
      const first[79990] "dead at end of block" "const" "insert auto destroy"
      (541426 'init var' first[79990] call_tmp[627290])
      (79993 'end of statement')
      unknown call_tmp[627297] "expr temp" "maybe param" "maybe type" "temp"
      (627300 'move' call_tmp[627297](79995 call stride _mt[243] this[79153]))
      unknown call_tmp[627304] "expr temp" "maybe param" "maybe type" "temp"
      (627307 'move' call_tmp[627304](79999 call stride _mt[243] myFollowThis[79308]))
      unknown call_tmp[627309] "maybe param" "maybe type" "temp"
      (627312 'move' call_tmp[627309](80002 call * call_tmp[627297] call_tmp[627304]))
      const stride[80004] "dead at end of block" "const" "insert auto destroy"
      (541428 'init var' stride[80004] call_tmp[627309])
      (80007 'end of statement' myFollowThis[79308] myFollowThis[79308])
      unknown call_tmp[627314] "expr temp" "maybe param" "maybe type" "temp"
      (627317 'move' call_tmp[627314](80010 call > stride[80004] 0))
      unknown call_tmp[627319] "expr temp" "maybe param" "maybe type" "temp"
      (627322 'move' call_tmp[627319](80140 call _cond_test call_tmp[627314]))
      if call_tmp[627319]
      {
        unknown call_tmp[627324] "expr temp" "maybe param" "maybe type" "temp"
        (627327 'move' call_tmp[627324](80013 call chpl_build_low_bounded_range first[79990]))
        unknown call_tmp[627331] "expr temp" "maybe param" "maybe type" "temp"
        (627334 'move' call_tmp[627331](376065 call strType _mt[243] this[79153]))
        unknown call_tmp[627336] "expr temp" "maybe param" "maybe type" "temp"
        (627339 'move' call_tmp[627336](80017 call _cast call_tmp[627331] stride[80004]))
        unknown call_tmp[627341] "maybe param" "maybe type" "temp"
        (627344 'move' call_tmp[627341](80019 call chpl_by call_tmp[627324] call_tmp[627336]))
        const r[80021] "dead at end of block" "const" "insert auto destroy"
        (541430 'init var' r[80021] call_tmp[627341])
        (80024 'end of statement' first[79990] stride[80004])
        unknown call_tmp[627346] "expr temp" "maybe param" "maybe type" "temp"
        (627349 'move' call_tmp[627346](80033 call _cond_test debugChapelRange[64195]))
        if call_tmp[627346]
        {
          (80031 call chpl_debug_writeln "Expanded range = " r[80021])
          (476552 'end of statement' r[80021])
        }
        {
          unknown _indexOfInterest[80043] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80044] "expr temp" "temp"
          (80053 'move' _iterator[80044](80051 call _getIterator r[80021]))
          Defer
          {
            {
              (80069 call _freeIterator _iterator[80044])
            }
          }
          { scopeless type
            (80058 'move' _indexOfInterest[80043](80055 call iteratorIndex _iterator[80044]))
          }
          ForLoop[80045]
          {
            unknown i[80062] "index var" "insert auto destroy"
            (476555 'end of statement')
            (80064 'move' i[80062] _indexOfInterest[80043])
            (476556 'end of statement' i[80062])
            unknown yret[511756] "YVV" "temp"
            (511759 'move' yret[511756](511758 'deref' i[80062]))
            (511761 yield yret[511756])
            (476558 'end of statement' i[80062])
            label _continueLabel[80048]
            _indexOfInterest[80043]
            _iterator[80044]
          }
          label _breakLabel[80049]
        }
      }
      {
        unknown call_tmp[627351] "expr temp" "maybe param" "maybe type" "temp"
        (627354 'move' call_tmp[627351](80077 call chpl_build_high_bounded_range first[79990]))
        unknown call_tmp[627358] "expr temp" "maybe param" "maybe type" "temp"
        (627361 'move' call_tmp[627358](376075 call strType _mt[243] this[79153]))
        unknown call_tmp[627363] "expr temp" "maybe param" "maybe type" "temp"
        (627366 'move' call_tmp[627363](80081 call _cast call_tmp[627358] stride[80004]))
        unknown call_tmp[627368] "maybe param" "maybe type" "temp"
        (627371 'move' call_tmp[627368](80083 call chpl_by call_tmp[627351] call_tmp[627363]))
        const r[80085] "dead at end of block" "const" "insert auto destroy"
        (541432 'init var' r[80085] call_tmp[627368])
        (80088 'end of statement' first[79990] stride[80004])
        unknown call_tmp[627373] "expr temp" "maybe param" "maybe type" "temp"
        (627376 'move' call_tmp[627373](80097 call _cond_test debugChapelRange[64195]))
        if call_tmp[627373]
        {
          (80095 call chpl_debug_writeln "Expanded range = " r[80085])
          (476562 'end of statement' r[80085])
        }
        {
          unknown _indexOfInterest[80107] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80108] "expr temp" "temp"
          (80117 'move' _iterator[80108](80115 call _getIterator r[80085]))
          Defer
          {
            {
              (80133 call _freeIterator _iterator[80108])
            }
          }
          { scopeless type
            (80122 'move' _indexOfInterest[80107](80119 call iteratorIndex _iterator[80108]))
          }
          ForLoop[80109]
          {
            unknown i[80126] "index var" "insert auto destroy"
            (476565 'end of statement')
            (80128 'move' i[80126] _indexOfInterest[80107])
            (476566 'end of statement' i[80126])
            unknown yret[511763] "YVV" "temp"
            (511766 'move' yret[511763](511765 'deref' i[80126]))
            (511768 yield yret[511763])
            (476568 'end of statement' i[80126])
            label _continueLabel[80112]
            _indexOfInterest[80107]
            _iterator[80108]
          }
          label _breakLabel[80113]
        }
      }
    }
    (511740 return ret[511738])
  }
  where {
    (79163 call == tag[79146] follower[449])
  }
  function _cast[80157](arg t[80154]:string[26], arg x[80163]:range[64316](?)) : _unknown[51]
  {
    unknown ret[511772] "RVV" "temp"
    unknown ret[80167] "dead at end of block" "insert auto destroy"
    (541434 'default init var' ret[80167] string[26])
    (80170 'end of statement')
    unknown call_tmp[627380] "expr temp" "maybe param" "maybe type" "temp"
    (627383 'move' call_tmp[627380](80177 call(80173 call (partial) hasLowBound _mt[243] x[80163])))
    unknown call_tmp[627385] "expr temp" "maybe param" "maybe type" "temp"
    (627388 'move' call_tmp[627385](80189 call _cond_test call_tmp[627380]))
    if call_tmp[627385]
    {
      unknown call_tmp[627392] "expr temp" "maybe param" "maybe type" "temp"
      (627395 'move' call_tmp[627392](80180 call low _mt[243] x[80163]))
      unknown call_tmp[627397] "expr temp" "maybe param" "maybe type" "temp"
      (627400 'move' call_tmp[627397](80184 call _cast string[26] call_tmp[627392]))
      (80186 call += ret[80167] call_tmp[627397])
      (476570 'end of statement' ret[80167])
    }
    (80212 call += ret[80167] "..")
    (476572 'end of statement' ret[80167])
    unknown call_tmp[627404] "expr temp" "maybe param" "maybe type" "temp"
    (627407 'move' call_tmp[627404](80220 call(80216 call (partial) hasHighBound _mt[243] x[80163])))
    unknown call_tmp[627409] "expr temp" "maybe param" "maybe type" "temp"
    (627412 'move' call_tmp[627409](80232 call _cond_test call_tmp[627404]))
    if call_tmp[627409]
    {
      unknown call_tmp[627416] "expr temp" "maybe param" "maybe type" "temp"
      (627419 'move' call_tmp[627416](80223 call high _mt[243] x[80163]))
      unknown call_tmp[627421] "expr temp" "maybe param" "maybe type" "temp"
      (627424 'move' call_tmp[627421](80227 call _cast string[26] call_tmp[627416]))
      (80229 call += ret[80167] call_tmp[627421])
      (476574 'end of statement' ret[80167])
    }
    unknown call_tmp[627428] "expr temp" "maybe param" "maybe type" "temp"
    (627431 'move' call_tmp[627428](80238 call stride _mt[243] x[80163]))
    unknown call_tmp[627433] "expr temp" "maybe param" "maybe type" "temp"
    (627436 'move' call_tmp[627433](80242 call != call_tmp[627428] 1))
    unknown call_tmp[627438] "expr temp" "maybe param" "maybe type" "temp"
    (627441 'move' call_tmp[627438](80258 call _cond_test call_tmp[627433]))
    if call_tmp[627438]
    {
      unknown call_tmp[627445] "expr temp" "maybe param" "maybe type" "temp"
      (627448 'move' call_tmp[627445](80247 call stride _mt[243] x[80163]))
      unknown call_tmp[627450] "expr temp" "maybe param" "maybe type" "temp"
      (627453 'move' call_tmp[627450](80251 call _cast string[26] call_tmp[627445]))
      unknown call_tmp[627455] "expr temp" "maybe param" "maybe type" "temp"
      (627458 'move' call_tmp[627455](80253 call + " by " call_tmp[627450]))
      (80255 call += ret[80167] call_tmp[627455])
      (476576 'end of statement' ret[80167])
    }
    unknown alignCheckRange[80264] "dead at end of block" "insert auto destroy"
    (541436 'init var' alignCheckRange[80264] x[80163])
    (80267 'end of statement')
    (80275 call(80271 call (partial) normalizeAlignment _mt[243] alignCheckRange[80264]))
    (476578 'end of statement' alignCheckRange[80264])
    unknown call_tmp[627464] "expr temp" "maybe param" "maybe type" "temp"
    (627467 'move' call_tmp[627464](80284 call(80280 call (partial) isNaturallyAligned _mt[243] alignCheckRange[80264])))
    unknown call_tmp[627469] "expr temp" "maybe param" "maybe type" "temp"
    (627472 'move' call_tmp[627469](80285 call ! call_tmp[627464]))
    unknown call_tmp[627474] "expr temp" "maybe param" "maybe type" "temp"
    (627477 'move' call_tmp[627474](80327 call _cond_test call_tmp[627469]))
    if call_tmp[627474]
    {
      unknown call_tmp[627481] "expr temp" "maybe param" "maybe type" "temp"
      (627484 'move' call_tmp[627481](80308 call alignment _mt[243] x[80163]))
      unknown call_tmp[627486] "expr temp" "maybe param" "maybe type" "temp"
      (627489 'move' call_tmp[627486](80312 call chpl__idxToInt call_tmp[627481]))
      unknown call_tmp[627493] "expr temp" "maybe param" "maybe type" "temp"
      (627496 'move' call_tmp[627493](80315 call stride _mt[243] x[80163]))
      unknown call_tmp[627498] "expr temp" "maybe param" "maybe type" "temp"
      (627501 'move' call_tmp[627498](80318 call chpl__mod call_tmp[627486] call_tmp[627493]))
      unknown call_tmp[627503] "expr temp" "maybe param" "maybe type" "temp"
      (627506 'move' call_tmp[627503](80320 call _cast string[26] call_tmp[627498]))
      unknown call_tmp[627508] "expr temp" "maybe param" "maybe type" "temp"
      (627511 'move' call_tmp[627508](80322 call + " align " call_tmp[627503]))
      (80324 call += ret[80167] call_tmp[627508])
      (476580 'end of statement' ret[80167])
    }
    (511777 'move' ret[511772](511776 'deref' ret[80167]))
    gotoReturn _end__cast[511770] _end__cast[511770]
    (476582 'end of statement' ret[80167])
    label _end__cast[511770]
    (511774 return ret[511772])
  }
  function range[64316](?).normalizeAlignment[80340](arg _mt[80345]:_MT[238], ref arg this[80342]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown tmp[421251] "maybe param" "temp"
    (421262 'move' tmp[421251](376092 call stridable _mt[243] this[80342]))
    unknown call_tmp[627515] "expr temp" "maybe param" "maybe type" "temp"
    (627518 'move' call_tmp[627515](421264 call _cond_invalid tmp[421251]))
    if call_tmp[627515]
    {
      (421267 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559322] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559323] "maybe param" "temp"
    unknown call_tmp[627520] "expr temp" "maybe param" "maybe type" "temp"
    (627523 'move' call_tmp[627520](421252 call isTrue tmp[421251]))
    (559328 'move' tmp[559323](559326 call _cond_test call_tmp[627520]))
    if tmp[559323]
    {
      unknown tmp[559330] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627527] "expr temp" "maybe param" "maybe type" "temp"
      (627530 'move' call_tmp[627527](376096 call aligned _mt[243] this[80342]))
      unknown call_tmp[627532] "expr temp" "maybe param" "maybe type" "temp"
      (627535 'move' call_tmp[627532](80349 call ! call_tmp[627527]))
      (559332 'move' tmp[559330](421255 call isTrue call_tmp[627532]))
      (559337 'move' tmp[559322](559334 '_paramFoldLogical' tmp[559323] tmp[559330]))
    }
    {
      (559342 'move' tmp[559322](559339 '_paramFoldLogical' tmp[559323] 0))
    }
    unknown call_tmp[627537] "expr temp" "maybe param" "maybe type" "temp"
    (627540 'move' call_tmp[627537](80403 call _cond_test tmp[559322]))
    if call_tmp[627537]
    {
      unknown tmp[559434] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559435] "maybe param" "temp"
      unknown call_tmp[627542] "expr temp" "maybe param" "maybe type" "temp"
      (627545 'move' call_tmp[627542](80357 call isBoundedRange this[80342]))
      (559440 'move' tmp[559435](559438 call _cond_test call_tmp[627542]))
      if tmp[559435]
      {
        unknown tmp[559349] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559350] "maybe param" "temp"
        unknown call_tmp[627549] "expr temp" "maybe param" "maybe type" "temp"
        (627552 'move' call_tmp[627549](376106 call stride _mt[243] this[80342]))
        unknown call_tmp[627554] "expr temp" "maybe param" "maybe type" "temp"
        (627557 'move' call_tmp[627554](80360 call > call_tmp[627549] 0))
        (559355 'move' tmp[559350](559353 call _cond_test call_tmp[627554]))
        if tmp[559350]
        {
          unknown tmp[559357] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559359 'move' tmp[559357](376111 call _low _mt[243] this[80342]))
          (559364 'move' tmp[559349](559361 '_paramFoldLogical' tmp[559350] tmp[559357]))
        }
        {
          unknown tmp[559366] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559368 'move' tmp[559366](376116 call _high _mt[243] this[80342]))
          (559373 'move' tmp[559349](559370 '_paramFoldLogical' tmp[559350] tmp[559366]))
        }
        (559445 'move' tmp[559434](559442 '_paramFoldLogical' tmp[559435] tmp[559349]))
      }
      {
        unknown tmp[559407] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559408] "maybe param" "temp"
        unknown call_tmp[627565] "expr temp" "maybe param" "maybe type" "temp"
        (627568 'move' call_tmp[627565](80368 call boundedType _mt[243] this[80342]))
        unknown call_tmp[627570] "expr temp" "maybe param" "maybe type" "temp"
        (627573 'move' call_tmp[627570](80375 call == call_tmp[627565] boundedLow[64207]))
        (559413 'move' tmp[559408](559411 call _cond_test call_tmp[627570]))
        if tmp[559408]
        {
          unknown tmp[559415] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559417 'move' tmp[559415](376121 call _low _mt[243] this[80342]))
          (559422 'move' tmp[559407](559419 '_paramFoldLogical' tmp[559408] tmp[559415]))
        }
        {
          unknown tmp[559380] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[559381] "maybe param" "temp"
          unknown call_tmp[627579] "expr temp" "maybe param" "maybe type" "temp"
          (627582 'move' call_tmp[627579](80379 call boundedType _mt[243] this[80342]))
          unknown call_tmp[627584] "expr temp" "maybe param" "maybe type" "temp"
          (627587 'move' call_tmp[627584](80386 call == call_tmp[627579] boundedHigh[64209]))
          (559386 'move' tmp[559381](559384 call _cond_test call_tmp[627584]))
          if tmp[559381]
          {
            unknown tmp[559388] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (559390 'move' tmp[559388](376126 call _high _mt[243] this[80342]))
            (559395 'move' tmp[559380](559392 '_paramFoldLogical' tmp[559381] tmp[559388]))
          }
          {
            (559400 'move' tmp[559380](559397 '_paramFoldLogical' tmp[559381] 0))
          }
          (559427 'move' tmp[559407](559424 '_paramFoldLogical' tmp[559408] tmp[559380]))
        }
        (559450 'move' tmp[559434](559447 '_paramFoldLogical' tmp[559435] tmp[559407]))
      }
      unknown call_tmp[627593] "expr temp" "maybe param" "maybe type" "temp"
      (627596 'move' call_tmp[627593](376101 call _alignment _mt[243] this[80342]))
      (80399 call = call_tmp[627593] tmp[559434])
    }
    (511781 return _void[55])
  }
  function range[64316](?).chpl__unTranslate[80417](arg _mt[80422]:_MT[238], arg this[80419]:range[64316](?) :
  range[64316](?), arg i[80414] :
  (376130 call intIdxType _mt[243] this[80419])) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511785] "RVV" "temp"
    unknown call_tmp[627600] "expr temp" "maybe param" "maybe type" "temp"
    (627603 'move' call_tmp[627600](80426 call - this[80419] i[80414]))
    (511790 'move' ret[511785](511789 'deref' call_tmp[627600]))
    (511787 return ret[511785])
  }
  function range[64316](?).chpl__unTranslate[80438](arg _mt[80443]:_MT[238], arg this[80440]:range[64316](?) :
  range[64316](?), arg i[80436]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511794] "RVV" "temp"
    unknown call_tmp[627605] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627608 'move' call_tmp[627605](80447 'typeof' i[80436]))
    unknown call_tmp[627610] "expr temp" "maybe param" "maybe type" "temp"
    (627613 'move' call_tmp[627610](80449 call isIntType call_tmp[627605]))
    unknown call_tmp[627615] "expr temp" "maybe param" "maybe type" "temp"
    (627618 'move' call_tmp[627615](80465 call _cond_test call_tmp[627610]))
    if call_tmp[627615]
    {
      unknown call_tmp[627620] "expr temp" "maybe param" "maybe type" "temp"
      (627623 'move' call_tmp[627620](80452 call - this[80440] i[80436]))
      (511799 'move' ret[511794](511798 'deref' call_tmp[627620]))
      gotoReturn _end_chpl__unTranslate[511792] _end_chpl__unTranslate[511792]
    }
    {
      unknown call_tmp[627625] "expr temp" "maybe param" "maybe type" "temp"
      (627628 'move' call_tmp[627625](80460 call abs i[80436]))
      unknown call_tmp[627630] "expr temp" "maybe param" "maybe type" "temp"
      (627633 'move' call_tmp[627630](80461 call + this[80440] call_tmp[627625]))
      (511804 'move' ret[511794](511803 'deref' call_tmp[627630]))
      gotoReturn _end_chpl__unTranslate[511792] _end_chpl__unTranslate[511792]
    }
    label _end_chpl__unTranslate[511792]
    (511796 return ret[511794])
  }
  function chpl__hasAlignment[80483](arg r[80480]:range[64316](?)) : _unknown[51]
  {
    unknown ret[511810] "RVV" "temp"
    unknown tmp[421272] "maybe param" "temp"
    (421283 'move' tmp[421272](80490 call(80486 call (partial) hasLowBound _mt[243] r[80480])))
    unknown call_tmp[627637] "expr temp" "maybe param" "maybe type" "temp"
    (627640 'move' call_tmp[627637](421285 call _cond_invalid tmp[421272]))
    if call_tmp[627637]
    {
      (421288 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559457] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559458] "maybe param" "temp"
    unknown call_tmp[627642] "expr temp" "maybe param" "maybe type" "temp"
    (627645 'move' call_tmp[627642](421273 call isTrue tmp[421272]))
    (559463 'move' tmp[559458](559461 call _cond_test call_tmp[627642]))
    if tmp[559458]
    {
      unknown tmp[559465] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627649] "expr temp" "maybe param" "maybe type" "temp"
      (627652 'move' call_tmp[627649](80492 call stride _mt[243] r[80480]))
      unknown call_tmp[627654] "expr temp" "maybe param" "maybe type" "temp"
      (627657 'move' call_tmp[627654](80496 call >= call_tmp[627649] 2))
      (559467 'move' tmp[559465](421276 call isTrue call_tmp[627654]))
      (559472 'move' tmp[559457](559469 '_paramFoldLogical' tmp[559458] tmp[559465]))
    }
    {
      (559477 'move' tmp[559457](559474 '_paramFoldLogical' tmp[559458] 0))
    }
    unknown call_tmp[627659] "expr temp" "maybe param" "maybe type" "temp"
    (627662 'move' call_tmp[627659](80503 call _cond_test tmp[559457]))
    if call_tmp[627659]
    {
      (511815 'move' ret[511810](511814 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511808] _end_chpl__hasAlignment[511808]
    }
    unknown tmp[421293] "maybe param" "temp"
    (421304 'move' tmp[421293](80514 call(80510 call (partial) hasHighBound _mt[243] r[80480])))
    unknown call_tmp[627666] "expr temp" "maybe param" "maybe type" "temp"
    (627669 'move' call_tmp[627666](421306 call _cond_invalid tmp[421293]))
    if call_tmp[627666]
    {
      (421309 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559484] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559485] "maybe param" "temp"
    unknown call_tmp[627671] "expr temp" "maybe param" "maybe type" "temp"
    (627674 'move' call_tmp[627671](421294 call isTrue tmp[421293]))
    (559490 'move' tmp[559485](559488 call _cond_test call_tmp[627671]))
    if tmp[559485]
    {
      unknown tmp[559492] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627678] "expr temp" "maybe param" "maybe type" "temp"
      (627681 'move' call_tmp[627678](80516 call stride _mt[243] r[80480]))
      unknown call_tmp[627683] "expr temp" "maybe param" "maybe type" "temp"
      (627686 'move' call_tmp[627683](80520 call - 2))
      unknown call_tmp[627688] "expr temp" "maybe param" "maybe type" "temp"
      (627691 'move' call_tmp[627688](80522 call <= call_tmp[627678] call_tmp[627683]))
      (559494 'move' tmp[559492](421297 call isTrue call_tmp[627688]))
      (559499 'move' tmp[559484](559496 '_paramFoldLogical' tmp[559485] tmp[559492]))
    }
    {
      (559504 'move' tmp[559484](559501 '_paramFoldLogical' tmp[559485] 0))
    }
    unknown call_tmp[627693] "expr temp" "maybe param" "maybe type" "temp"
    (627696 'move' call_tmp[627693](80529 call _cond_test tmp[559484]))
    if call_tmp[627693]
    {
      (511820 'move' ret[511810](511819 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511808] _end_chpl__hasAlignment[511808]
    }
    (511825 'move' ret[511810](511824 'deref' 0))
    label _end_chpl__hasAlignment[511808]
    (511812 return ret[511810])
  }
  function chpl__mod[80545](arg dividend[80542]:integral[199](?), arg modulus[80548]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511829] "RVV" "temp"
    unknown call_tmp[627698] "expr temp" "maybe param" "maybe type" "temp"
    (627701 'move' call_tmp[627698](80554 call abs modulus[80548]))
    unknown call_tmp[627705] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627708 'move' call_tmp[627705](80559 'typeof' dividend[80542]))
    unknown call_tmp[627710] "maybe param" "maybe type" "temp"
    (627713 'move' call_tmp[627710](80561 call(80555 call (partial) safeCast _mt[243] call_tmp[627698]) call_tmp[627705]))
    const m[80562] "dead at end of block" "const" "insert auto destroy"
    (541438 'init var' m[80562] call_tmp[627710])
    (80565 'end of statement')
    unknown call_tmp[627715] "maybe param" "maybe type" "temp"
    (627718 'move' call_tmp[627715](80569 call % dividend[80542] m[80562]))
    unknown tmp[80571] "dead at end of block" "insert auto destroy"
    (541440 'init var' tmp[80571] call_tmp[627715])
    (80574 'end of statement' m[80562])
    unknown call_tmp[627720] "expr temp" "maybe param" "maybe type" "temp"
    (627723 'move' call_tmp[627720](80578 call isInt dividend[80542]))
    unknown call_tmp[627725] "expr temp" "maybe param" "maybe type" "temp"
    (627728 'move' call_tmp[627725](80593 call _cond_test call_tmp[627720]))
    if call_tmp[627725]
    {
      unknown call_tmp[627730] "expr temp" "maybe param" "maybe type" "temp"
      (627733 'move' call_tmp[627730](80581 call < tmp[80571] 0))
      unknown call_tmp[627735] "expr temp" "maybe param" "maybe type" "temp"
      (627738 'move' call_tmp[627735](80588 call _cond_test call_tmp[627730]))
      if call_tmp[627735]
      {
        (80585 call += tmp[80571] m[80562])
        (476595 'end of statement' tmp[80571] m[80562])
      }
    }
    (511834 'move' ret[511829](511833 'deref' tmp[80571]))
    gotoReturn _end_chpl__mod[511827] _end_chpl__mod[511827]
    (476598 'end of statement' tmp[80571])
    label _end_chpl__mod[511827]
    (511831 return ret[511829])
  }
  function chpl__diffMod[80609](arg minuend[80606]:integral[199](?), arg subtrahend[80612]:integral[199](?), arg modulus[80616]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511840] "RVV" "temp"
    unknown call_tmp[627740] "expr temp" "maybe param" "maybe type" "temp"
    (627743 'move' call_tmp[627740](80630 call abs modulus[80616]))
    unknown call_tmp[627747] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627750 'move' call_tmp[627747](80635 'typeof' minuend[80606]))
    unknown call_tmp[627752] "maybe param" "maybe type" "temp"
    (627755 'move' call_tmp[627752](80637 call(80631 call (partial) safeCast _mt[243] call_tmp[627740]) call_tmp[627747]))
    const m[80638] "dead at end of block" "const" "insert auto destroy"
    (541442 'init var' m[80638] call_tmp[627752])
    (80641 'end of statement')
    unknown call_tmp[627757] "maybe param" "maybe type" "temp"
    (627760 'move' call_tmp[627757](80647 call chpl__mod minuend[80606] m[80638]))
    unknown minMod[80648] "dead at end of block" "insert auto destroy"
    (541444 'init var' minMod[80648] call_tmp[627757])
    (80651 'end of statement')
    unknown call_tmp[627762] "maybe param" "maybe type" "temp"
    (627765 'move' call_tmp[627762](80656 call chpl__mod subtrahend[80612] m[80638]))
    unknown subMod[80657] "dead at end of block" "insert auto destroy"
    (541446 'init var' subMod[80657] call_tmp[627762])
    (80660 'end of statement' m[80638] m[80638])
    unknown tmp[559511] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559512] "maybe param" "temp"
    unknown call_tmp[627767] "expr temp" "maybe param" "maybe type" "temp"
    (627770 'move' call_tmp[627767](80663 call < minMod[80648] subMod[80657]))
    (559517 'move' tmp[559512](559515 call _cond_test call_tmp[627767]))
    if tmp[559512]
    {
      unknown tmp[559519] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627772] "expr temp" "maybe param" "maybe type" "temp"
      (627775 'move' call_tmp[627772](80668 call - subMod[80657] minMod[80648]))
      (559521 'move' tmp[559519](80670 call - m[80638] call_tmp[627772]))
      (559526 'move' tmp[559511](559523 '_paramFoldLogical' tmp[559512] tmp[559519]))
    }
    {
      unknown tmp[559528] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (559530 'move' tmp[559528](80674 call - minMod[80648] subMod[80657]))
      (559535 'move' tmp[559511](559532 '_paramFoldLogical' tmp[559512] tmp[559528]))
    }
    unknown call_tmp[627777] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627780 'move' call_tmp[627777](511844 'typeof' minuend[80606]))
    (511847 'move' ret[511840](511846 'coerce' tmp[559511] call_tmp[627777]))
    gotoReturn _end_chpl__diffMod[511838] _end_chpl__diffMod[511838]
    (476602 'end of statement' minMod[80648] subMod[80657] m[80638] subMod[80657] minMod[80648] minMod[80648] subMod[80657])
    label _end_chpl__diffMod[511838]
    (511842 return ret[511840])
  }
  where {
    unknown call_tmp[627782] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627785 'move' call_tmp[627782](80622 'typeof' minuend[80606]))
    unknown call_tmp[627787] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627790 'move' call_tmp[627787](80624 'typeof' subtrahend[80612]))
    (80625 call == call_tmp[627782] call_tmp[627787])
  }
  { scopeless type
    (80620 'typeof' minuend[80606])
  }
  function chpl__diffMod[80691](arg minuend[80688]:integral[199](?), arg subtrahend[80694]:integral[199](?), arg modulus[80698]:integral[199](?)) : _unknown[51] "no return value for void"
  {
    (80720 call compilerError "chpl__diffMod -- Operand types must match.")
    (511851 return _void[55])
  }
  function chpl__add[80732](arg a[80729]:_any[178](?), arg b[80735] :
  (459718 'typeof' a[80729]), arg resultType[80738]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511855] "RVV" "temp"
    unknown call_tmp[627792] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627795 'move' call_tmp[627792](459720 'typeof' a[80729]))
    unknown call_tmp[627797] "expr temp" "maybe param" "maybe type" "temp"
    (627800 'move' call_tmp[627797](80743 call isIntegralType call_tmp[627792]))
    unknown call_tmp[627802] "expr temp" "maybe param" "maybe type" "temp"
    (627805 'move' call_tmp[627802](80744 call ! call_tmp[627797]))
    unknown call_tmp[627807] "expr temp" "maybe param" "maybe type" "temp"
    (627810 'move' call_tmp[627807](80767 call _cond_test call_tmp[627802]))
    if call_tmp[627807]
    {
      (80765 call compilerError "Values must be of integral type.")
    }
    unknown tmp[421314] "maybe param" "temp"
    unknown tmp[421335] "maybe param" "temp"
    (421346 'move' tmp[421335](80775 call > a[80729] 0))
    unknown call_tmp[627812] "expr temp" "maybe param" "maybe type" "temp"
    (627815 'move' call_tmp[627812](421348 call _cond_invalid tmp[421335]))
    if call_tmp[627812]
    {
      (421351 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559542] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559543] "maybe param" "temp"
    unknown call_tmp[627817] "expr temp" "maybe param" "maybe type" "temp"
    (627820 'move' call_tmp[627817](421336 call isTrue tmp[421335]))
    (559548 'move' tmp[559543](559546 call _cond_test call_tmp[627817]))
    if tmp[559543]
    {
      unknown tmp[559550] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627822] "expr temp" "maybe param" "maybe type" "temp"
      (627825 'move' call_tmp[627822](80779 call > b[80735] 0))
      (559552 'move' tmp[559550](421339 call isTrue call_tmp[627822]))
      (559557 'move' tmp[559542](559554 '_paramFoldLogical' tmp[559543] tmp[559550]))
    }
    {
      (559562 'move' tmp[559542](559559 '_paramFoldLogical' tmp[559543] 0))
    }
    (421325 'move' tmp[421314] tmp[559542])
    unknown call_tmp[627827] "expr temp" "maybe param" "maybe type" "temp"
    (627830 'move' call_tmp[627827](421327 call _cond_invalid tmp[421314]))
    if call_tmp[627827]
    {
      (421330 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559569] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559570] "maybe param" "temp"
    unknown call_tmp[627832] "expr temp" "maybe param" "maybe type" "temp"
    (627835 'move' call_tmp[627832](421315 call isTrue tmp[421314]))
    (559575 'move' tmp[559570](559573 call _cond_test call_tmp[627832]))
    if tmp[559570]
    {
      unknown tmp[559577] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627837] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (627840 'move' call_tmp[627837](459722 'typeof' a[80729]))
      unknown call_tmp[627842] "expr temp" "maybe param" "maybe type" "temp"
      (627845 'move' call_tmp[627842](80787 call max call_tmp[627837]))
      unknown call_tmp[627847] "expr temp" "maybe param" "maybe type" "temp"
      (627850 'move' call_tmp[627847](80789 call - call_tmp[627842] a[80729]))
      unknown call_tmp[627852] "expr temp" "maybe param" "maybe type" "temp"
      (627855 'move' call_tmp[627852](80791 call > b[80735] call_tmp[627847]))
      (559579 'move' tmp[559577](421318 call isTrue call_tmp[627852]))
      (559584 'move' tmp[559569](559581 '_paramFoldLogical' tmp[559570] tmp[559577]))
    }
    {
      (559589 'move' tmp[559569](559586 '_paramFoldLogical' tmp[559570] 0))
    }
    unknown call_tmp[627857] "expr temp" "maybe param" "maybe type" "temp"
    (627860 'move' call_tmp[627857](80801 call _cond_test tmp[559569]))
    if call_tmp[627857]
    {
      unknown call_tmp[627862] "expr temp" "maybe param" "maybe type" "temp"
      (627865 'move' call_tmp[627862](80798 call max resultType[80738]))
      (511860 'move' ret[511855](511859 'deref' call_tmp[627862]))
      gotoReturn _end_chpl__add[511853] _end_chpl__add[511853]
    }
    unknown tmp[421356] "maybe param" "temp"
    unknown tmp[421377] "maybe param" "temp"
    (421388 'move' tmp[421377](80808 call < a[80729] 0))
    unknown call_tmp[627867] "expr temp" "maybe param" "maybe type" "temp"
    (627870 'move' call_tmp[627867](421390 call _cond_invalid tmp[421377]))
    if call_tmp[627867]
    {
      (421393 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559596] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559597] "maybe param" "temp"
    unknown call_tmp[627872] "expr temp" "maybe param" "maybe type" "temp"
    (627875 'move' call_tmp[627872](421378 call isTrue tmp[421377]))
    (559602 'move' tmp[559597](559600 call _cond_test call_tmp[627872]))
    if tmp[559597]
    {
      unknown tmp[559604] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627877] "expr temp" "maybe param" "maybe type" "temp"
      (627880 'move' call_tmp[627877](80812 call < b[80735] 0))
      (559606 'move' tmp[559604](421381 call isTrue call_tmp[627877]))
      (559611 'move' tmp[559596](559608 '_paramFoldLogical' tmp[559597] tmp[559604]))
    }
    {
      (559616 'move' tmp[559596](559613 '_paramFoldLogical' tmp[559597] 0))
    }
    (421367 'move' tmp[421356] tmp[559596])
    unknown call_tmp[627882] "expr temp" "maybe param" "maybe type" "temp"
    (627885 'move' call_tmp[627882](421369 call _cond_invalid tmp[421356]))
    if call_tmp[627882]
    {
      (421372 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559623] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559624] "maybe param" "temp"
    unknown call_tmp[627887] "expr temp" "maybe param" "maybe type" "temp"
    (627890 'move' call_tmp[627887](421357 call isTrue tmp[421356]))
    (559629 'move' tmp[559624](559627 call _cond_test call_tmp[627887]))
    if tmp[559624]
    {
      unknown tmp[559631] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627892] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (627895 'move' call_tmp[627892](459724 'typeof' a[80729]))
      unknown call_tmp[627897] "expr temp" "maybe param" "maybe type" "temp"
      (627900 'move' call_tmp[627897](80820 call min call_tmp[627892]))
      unknown call_tmp[627902] "expr temp" "maybe param" "maybe type" "temp"
      (627905 'move' call_tmp[627902](80822 call - call_tmp[627897] a[80729]))
      unknown call_tmp[627907] "expr temp" "maybe param" "maybe type" "temp"
      (627910 'move' call_tmp[627907](80824 call < b[80735] call_tmp[627902]))
      (559633 'move' tmp[559631](421360 call isTrue call_tmp[627907]))
      (559638 'move' tmp[559623](559635 '_paramFoldLogical' tmp[559624] tmp[559631]))
    }
    {
      (559643 'move' tmp[559623](559640 '_paramFoldLogical' tmp[559624] 0))
    }
    unknown call_tmp[627912] "expr temp" "maybe param" "maybe type" "temp"
    (627915 'move' call_tmp[627912](80834 call _cond_test tmp[559623]))
    if call_tmp[627912]
    {
      unknown call_tmp[627917] "expr temp" "maybe param" "maybe type" "temp"
      (627920 'move' call_tmp[627917](80831 call min resultType[80738]))
      (511865 'move' ret[511855](511864 'deref' call_tmp[627917]))
      gotoReturn _end_chpl__add[511853] _end_chpl__add[511853]
    }
    unknown call_tmp[627922] "expr temp" "maybe param" "maybe type" "temp"
    (627925 'move' call_tmp[627922](80842 call isUintType resultType[80738]))
    unknown call_tmp[627927] "expr temp" "maybe param" "maybe type" "temp"
    (627930 'move' call_tmp[627927](80919 call _cond_test call_tmp[627922]))
    if call_tmp[627927]
    {
      unknown tmp[421398] "maybe param" "temp"
      unknown tmp[421419] "maybe param" "temp"
      unknown tmp[421440] "maybe param" "temp"
      (421451 'move' tmp[421440](80845 call < a[80729] 0))
      unknown call_tmp[627932] "expr temp" "maybe param" "maybe type" "temp"
      (627935 'move' call_tmp[627932](421453 call _cond_invalid tmp[421440]))
      if call_tmp[627932]
      {
        (421456 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559650] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559651] "maybe param" "temp"
      unknown call_tmp[627937] "expr temp" "maybe param" "maybe type" "temp"
      (627940 'move' call_tmp[627937](421441 call isTrue tmp[421440]))
      (559656 'move' tmp[559651](559654 call _cond_test call_tmp[627937]))
      if tmp[559651]
      {
        unknown tmp[559658] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627942] "expr temp" "maybe param" "maybe type" "temp"
        (627945 'move' call_tmp[627942](80849 call > b[80735] 0))
        (559660 'move' tmp[559658](421444 call isTrue call_tmp[627942]))
        (559665 'move' tmp[559650](559662 '_paramFoldLogical' tmp[559651] tmp[559658]))
      }
      {
        (559670 'move' tmp[559650](559667 '_paramFoldLogical' tmp[559651] 0))
      }
      (421430 'move' tmp[421419] tmp[559650])
      unknown call_tmp[627947] "expr temp" "maybe param" "maybe type" "temp"
      (627950 'move' call_tmp[627947](421432 call _cond_invalid tmp[421419]))
      if call_tmp[627947]
      {
        (421435 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559704] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559705] "maybe param" "temp"
      unknown call_tmp[627952] "expr temp" "maybe param" "maybe type" "temp"
      (627955 'move' call_tmp[627952](421420 call isTrue tmp[421419]))
      (559710 'move' tmp[559705](559708 call _cond_test call_tmp[627952]))
      if tmp[559705]
      {
        unknown tmp[421461] "maybe param" "temp"
        unknown call_tmp[627957] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (627960 'move' call_tmp[627957](459726 'typeof' a[80729]))
        unknown call_tmp[627962] "expr temp" "maybe param" "maybe type" "temp"
        (627965 'move' call_tmp[627962](80857 call min call_tmp[627957]))
        (421472 'move' tmp[421461](80858 call == a[80729] call_tmp[627962]))
        unknown call_tmp[627967] "expr temp" "maybe param" "maybe type" "temp"
        (627970 'move' call_tmp[627967](421474 call _cond_invalid tmp[421461]))
        if call_tmp[627967]
        {
          (421477 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[559677] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559678] "maybe param" "temp"
        unknown call_tmp[627972] "expr temp" "maybe param" "maybe type" "temp"
        (627975 'move' call_tmp[627972](421462 call isTrue tmp[421461]))
        (559683 'move' tmp[559678](559681 call _cond_test call_tmp[627972]))
        if tmp[559678]
        {
          (559688 'move' tmp[559677](559685 '_paramFoldLogical' tmp[559678] 1))
        }
        {
          unknown tmp[559690] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[627977] "expr temp" "maybe param" "maybe type" "temp"
          (627980 'move' call_tmp[627977](80863 call abs a[80729]))
          unknown call_tmp[627982] "expr temp" "maybe param" "maybe type" "temp"
          (627985 'move' call_tmp[627982](80867 call abs b[80735]))
          unknown call_tmp[627987] "expr temp" "maybe param" "maybe type" "temp"
          (627990 'move' call_tmp[627987](80868 call > call_tmp[627977] call_tmp[627982]))
          (559692 'move' tmp[559690](421466 call isTrue call_tmp[627987]))
          (559697 'move' tmp[559677](559694 '_paramFoldLogical' tmp[559678] tmp[559690]))
        }
        unknown tmp[559712] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559714 'move' tmp[559712](421423 call isTrue tmp[559677]))
        (559719 'move' tmp[559704](559716 '_paramFoldLogical' tmp[559705] tmp[559712]))
      }
      {
        (559724 'move' tmp[559704](559721 '_paramFoldLogical' tmp[559705] 0))
      }
      (421409 'move' tmp[421398] tmp[559704])
      unknown call_tmp[627992] "expr temp" "maybe param" "maybe type" "temp"
      (627995 'move' call_tmp[627992](421411 call _cond_invalid tmp[421398]))
      if call_tmp[627992]
      {
        (421414 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559812] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559813] "maybe param" "temp"
      unknown call_tmp[627997] "expr temp" "maybe param" "maybe type" "temp"
      (628000 'move' call_tmp[627997](421399 call isTrue tmp[421398]))
      (559818 'move' tmp[559813](559816 call _cond_test call_tmp[627997]))
      if tmp[559813]
      {
        (559823 'move' tmp[559812](559820 '_paramFoldLogical' tmp[559813] 1))
      }
      {
        unknown tmp[421482] "maybe param" "temp"
        unknown tmp[421503] "maybe param" "temp"
        (421514 'move' tmp[421503](80876 call > a[80729] 0))
        unknown call_tmp[628002] "expr temp" "maybe param" "maybe type" "temp"
        (628005 'move' call_tmp[628002](421516 call _cond_invalid tmp[421503]))
        if call_tmp[628002]
        {
          (421519 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559731] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559732] "maybe param" "temp"
        unknown call_tmp[628007] "expr temp" "maybe param" "maybe type" "temp"
        (628010 'move' call_tmp[628007](421504 call isTrue tmp[421503]))
        (559737 'move' tmp[559732](559735 call _cond_test call_tmp[628007]))
        if tmp[559732]
        {
          unknown tmp[559739] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628012] "expr temp" "maybe param" "maybe type" "temp"
          (628015 'move' call_tmp[628012](80880 call < b[80735] 0))
          (559741 'move' tmp[559739](421507 call isTrue call_tmp[628012]))
          (559746 'move' tmp[559731](559743 '_paramFoldLogical' tmp[559732] tmp[559739]))
        }
        {
          (559751 'move' tmp[559731](559748 '_paramFoldLogical' tmp[559732] 0))
        }
        (421493 'move' tmp[421482] tmp[559731])
        unknown call_tmp[628017] "expr temp" "maybe param" "maybe type" "temp"
        (628020 'move' call_tmp[628017](421495 call _cond_invalid tmp[421482]))
        if call_tmp[628017]
        {
          (421498 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559785] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559786] "maybe param" "temp"
        unknown call_tmp[628022] "expr temp" "maybe param" "maybe type" "temp"
        (628025 'move' call_tmp[628022](421483 call isTrue tmp[421482]))
        (559791 'move' tmp[559786](559789 call _cond_test call_tmp[628022]))
        if tmp[559786]
        {
          unknown tmp[421524] "maybe param" "temp"
          unknown call_tmp[628027] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (628030 'move' call_tmp[628027](459728 'typeof' a[80729]))
          unknown call_tmp[628032] "expr temp" "maybe param" "maybe type" "temp"
          (628035 'move' call_tmp[628032](80888 call min call_tmp[628027]))
          (421535 'move' tmp[421524](80889 call == b[80735] call_tmp[628032]))
          unknown call_tmp[628037] "expr temp" "maybe param" "maybe type" "temp"
          (628040 'move' call_tmp[628037](421537 call _cond_invalid tmp[421524]))
          if call_tmp[628037]
          {
            (421540 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[559758] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[559759] "maybe param" "temp"
          unknown call_tmp[628042] "expr temp" "maybe param" "maybe type" "temp"
          (628045 'move' call_tmp[628042](421525 call isTrue tmp[421524]))
          (559764 'move' tmp[559759](559762 call _cond_test call_tmp[628042]))
          if tmp[559759]
          {
            (559769 'move' tmp[559758](559766 '_paramFoldLogical' tmp[559759] 1))
          }
          {
            unknown tmp[559771] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[628047] "expr temp" "maybe param" "maybe type" "temp"
            (628050 'move' call_tmp[628047](80894 call abs b[80735]))
            unknown call_tmp[628052] "expr temp" "maybe param" "maybe type" "temp"
            (628055 'move' call_tmp[628052](80898 call abs a[80729]))
            unknown call_tmp[628057] "expr temp" "maybe param" "maybe type" "temp"
            (628060 'move' call_tmp[628057](80899 call > call_tmp[628047] call_tmp[628052]))
            (559773 'move' tmp[559771](421529 call isTrue call_tmp[628057]))
            (559778 'move' tmp[559758](559775 '_paramFoldLogical' tmp[559759] tmp[559771]))
          }
          unknown tmp[559793] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559795 'move' tmp[559793](421486 call isTrue tmp[559758]))
          (559800 'move' tmp[559785](559797 '_paramFoldLogical' tmp[559786] tmp[559793]))
        }
        {
          (559805 'move' tmp[559785](559802 '_paramFoldLogical' tmp[559786] 0))
        }
        unknown tmp[559825] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559827 'move' tmp[559825](421403 call isTrue tmp[559785]))
        (559832 'move' tmp[559812](559829 '_paramFoldLogical' tmp[559813] tmp[559825]))
      }
      unknown call_tmp[628062] "expr temp" "maybe param" "maybe type" "temp"
      (628065 'move' call_tmp[628062](80913 call _cond_test tmp[559812]))
      if call_tmp[628062]
      {
        unknown call_tmp[628067] "expr temp" "maybe param" "maybe type" "temp"
        (628070 'move' call_tmp[628067](80909 call _cast resultType[80738] 0))
        (511870 'move' ret[511855](511869 'deref' call_tmp[628067]))
        gotoReturn _end_chpl__add[511853] _end_chpl__add[511853]
      }
    }
    unknown call_tmp[628072] "expr temp" "maybe param" "maybe type" "temp"
    (628075 'move' call_tmp[628072](80925 call + a[80729] b[80735]))
    unknown call_tmp[628077] "expr temp" "maybe param" "maybe type" "temp"
    (628080 'move' call_tmp[628077](80928 call _cast resultType[80738] call_tmp[628072]))
    (511875 'move' ret[511855](511874 'deref' call_tmp[628077]))
    label _end_chpl__add[511853]
    (511857 return ret[511855])
  }
  function chpl__addRangeStrides[80938](arg start[80936]:_any[178](?), arg stride[80940]:_any[178](?), arg count[80942]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511906] "RVV" "temp"
    function convert[80950](arg a[80948]:_any[178](?), arg b[80952]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[511879] "RVV" "param" "temp"
      unknown tmp[421545] "maybe param" "temp"
      unknown tmp[421566] "maybe param" "temp"
      unknown call_tmp[628082] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (628085 'move' call_tmp[628082](80955 'typeof' a[80948]))
      unknown call_tmp[628087] "expr temp" "maybe param" "maybe type" "temp"
      (628090 'move' call_tmp[628087](80959 call int(64)[13] 64))
      (421577 'move' tmp[421566](80960 call == call_tmp[628082] call_tmp[628087]))
      unknown call_tmp[628092] "expr temp" "maybe param" "maybe type" "temp"
      (628095 'move' call_tmp[628092](421579 call _cond_invalid tmp[421566]))
      if call_tmp[628092]
      {
        (421582 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559839] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559840] "maybe param" "temp"
      unknown call_tmp[628097] "expr temp" "maybe param" "maybe type" "temp"
      (628100 'move' call_tmp[628097](421567 call isTrue tmp[421566]))
      (559845 'move' tmp[559840](559843 call _cond_test call_tmp[628097]))
      if tmp[559840]
      {
        unknown tmp[559847] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628102] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628105 'move' call_tmp[628102](80963 'typeof' b[80952]))
        unknown call_tmp[628107] "expr temp" "maybe param" "maybe type" "temp"
        (628110 'move' call_tmp[628107](80967 call uint(64)[115] 64))
        unknown call_tmp[628112] "expr temp" "maybe param" "maybe type" "temp"
        (628115 'move' call_tmp[628112](80968 call == call_tmp[628102] call_tmp[628107]))
        (559849 'move' tmp[559847](421570 call isTrue call_tmp[628112]))
        (559854 'move' tmp[559839](559851 '_paramFoldLogical' tmp[559840] tmp[559847]))
      }
      {
        (559859 'move' tmp[559839](559856 '_paramFoldLogical' tmp[559840] 0))
      }
      (421556 'move' tmp[421545] tmp[559839])
      unknown call_tmp[628117] "expr temp" "maybe param" "maybe type" "temp"
      (628120 'move' call_tmp[628117](421558 call _cond_invalid tmp[421545]))
      if call_tmp[628117]
      {
        (421561 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559893] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559894] "maybe param" "temp"
      unknown call_tmp[628122] "expr temp" "maybe param" "maybe type" "temp"
      (628125 'move' call_tmp[628122](421546 call isTrue tmp[421545]))
      (559899 'move' tmp[559894](559897 call _cond_test call_tmp[628122]))
      if tmp[559894]
      {
        (559904 'move' tmp[559893](559901 '_paramFoldLogical' tmp[559894] 1))
      }
      {
        unknown tmp[421587] "maybe param" "temp"
        unknown call_tmp[628127] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628130 'move' call_tmp[628127](80973 'typeof' a[80948]))
        unknown call_tmp[628132] "expr temp" "maybe param" "maybe type" "temp"
        (628135 'move' call_tmp[628132](80977 call uint(64)[115] 64))
        (421598 'move' tmp[421587](80978 call == call_tmp[628127] call_tmp[628132]))
        unknown call_tmp[628137] "expr temp" "maybe param" "maybe type" "temp"
        (628140 'move' call_tmp[628137](421600 call _cond_invalid tmp[421587]))
        if call_tmp[628137]
        {
          (421603 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559866] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559867] "maybe param" "temp"
        unknown call_tmp[628142] "expr temp" "maybe param" "maybe type" "temp"
        (628145 'move' call_tmp[628142](421588 call isTrue tmp[421587]))
        (559872 'move' tmp[559867](559870 call _cond_test call_tmp[628142]))
        if tmp[559867]
        {
          unknown tmp[559874] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628147] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (628150 'move' call_tmp[628147](80981 'typeof' b[80952]))
          unknown call_tmp[628152] "expr temp" "maybe param" "maybe type" "temp"
          (628155 'move' call_tmp[628152](80985 call int(64)[13] 64))
          unknown call_tmp[628157] "expr temp" "maybe param" "maybe type" "temp"
          (628160 'move' call_tmp[628157](80986 call == call_tmp[628147] call_tmp[628152]))
          (559876 'move' tmp[559874](421591 call isTrue call_tmp[628157]))
          (559881 'move' tmp[559866](559878 '_paramFoldLogical' tmp[559867] tmp[559874]))
        }
        {
          (559886 'move' tmp[559866](559883 '_paramFoldLogical' tmp[559867] 0))
        }
        unknown tmp[559906] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559908 'move' tmp[559906](421550 call isTrue tmp[559866]))
        (559913 'move' tmp[559893](559910 '_paramFoldLogical' tmp[559894] tmp[559906]))
      }
      (511884 'move' ret[511879](511883 'deref' tmp[559893]))
      (511881 return ret[511879])
    }
    function mul[81002](arg a[81000]:_any[178](?), arg b[81004]:_any[178](?)) : _unknown[51]
    {
      unknown ret[511888] "RVV" "temp"
      unknown tmp[559920] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559921] "maybe param" "temp"
      unknown call_tmp[628162] "expr temp" "maybe param" "maybe type" "temp"
      (628165 'move' call_tmp[628162](81010 call convert a[81000] b[81004]))
      (559926 'move' tmp[559921](559924 call _cond_test call_tmp[628162]))
      if tmp[559921]
      {
        unknown tmp[559928] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628167] "expr temp" "maybe param" "maybe type" "temp"
        (628170 'move' call_tmp[628167](81015 call int(64)[13] 64))
        unknown call_tmp[628172] "expr temp" "maybe param" "maybe type" "temp"
        (628175 'move' call_tmp[628172](81016 call _cast call_tmp[628167] a[81000]))
        unknown call_tmp[628177] "expr temp" "maybe param" "maybe type" "temp"
        (628180 'move' call_tmp[628177](81022 call int(64)[13] 64))
        unknown call_tmp[628182] "expr temp" "maybe param" "maybe type" "temp"
        (628185 'move' call_tmp[628182](81023 call _cast call_tmp[628177] b[81004]))
        (559930 'move' tmp[559928](81025 call * call_tmp[628172] call_tmp[628182]))
        (559935 'move' tmp[559920](559932 '_paramFoldLogical' tmp[559921] tmp[559928]))
      }
      {
        unknown tmp[559937] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559939 'move' tmp[559937](81029 call * a[81000] b[81004]))
        (559944 'move' tmp[559920](559941 '_paramFoldLogical' tmp[559921] tmp[559937]))
      }
      (511893 'move' ret[511888](511892 'deref' tmp[559920]))
      (511890 return ret[511888])
    }
    function add[81043](arg a[81041]:_any[178](?), arg b[81045]:_any[178](?)) : _unknown[51]
    {
      unknown ret[511897] "RVV" "temp"
      unknown tmp[559951] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559952] "maybe param" "temp"
      unknown call_tmp[628187] "expr temp" "maybe param" "maybe type" "temp"
      (628190 'move' call_tmp[628187](81051 call convert a[81041] b[81045]))
      (559957 'move' tmp[559952](559955 call _cond_test call_tmp[628187]))
      if tmp[559952]
      {
        unknown tmp[559959] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628192] "expr temp" "maybe param" "maybe type" "temp"
        (628195 'move' call_tmp[628192](81056 call int(64)[13] 64))
        unknown call_tmp[628197] "expr temp" "maybe param" "maybe type" "temp"
        (628200 'move' call_tmp[628197](81057 call _cast call_tmp[628192] a[81041]))
        unknown call_tmp[628202] "expr temp" "maybe param" "maybe type" "temp"
        (628205 'move' call_tmp[628202](81063 call int(64)[13] 64))
        unknown call_tmp[628207] "expr temp" "maybe param" "maybe type" "temp"
        (628210 'move' call_tmp[628207](81064 call _cast call_tmp[628202] b[81045]))
        (559961 'move' tmp[559959](81066 call + call_tmp[628197] call_tmp[628207]))
        (559966 'move' tmp[559951](559963 '_paramFoldLogical' tmp[559952] tmp[559959]))
      }
      {
        unknown tmp[559968] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559970 'move' tmp[559968](81070 call + a[81041] b[81045]))
        (559975 'move' tmp[559951](559972 '_paramFoldLogical' tmp[559952] tmp[559968]))
      }
      (511902 'move' ret[511897](511901 'deref' tmp[559951]))
      (511899 return ret[511897])
    }
    unknown call_tmp[628212] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628215 'move' call_tmp[628212](81090 'typeof' start[80936]))
    unknown call_tmp[628217] "expr temp" "maybe param" "maybe type" "temp"
    (628220 'move' call_tmp[628217](81087 call mul stride[80940] count[80942]))
    unknown call_tmp[628222] "expr temp" "maybe param" "maybe type" "temp"
    (628225 'move' call_tmp[628222](81088 call add start[80936] call_tmp[628217]))
    unknown call_tmp[628227] "expr temp" "maybe param" "maybe type" "temp"
    (628230 'move' call_tmp[628227](81091 call _cast call_tmp[628212] call_tmp[628222]))
    unknown call_tmp[628232] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628235 'move' call_tmp[628232](511910 'typeof' start[80936]))
    (511913 'move' ret[511906](511912 'coerce' call_tmp[628227] call_tmp[628232]))
    (511908 return ret[511906])
  }
  { scopeless type
    (80945 'typeof' start[80936])
  }
  function chpl__extendedEuclidHelper[81102](arg u[81100]:_any[178](?), arg v[81104]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511917] "RVV" "temp"
    unknown call_tmp[628237] "maybe param" "maybe type" "temp" "type variable"
    (628240 'move' call_tmp[628237](81107 'typeof' u[81100]))
    unknown zero[81109] "dead at end of block" "insert auto destroy"
    (541448 'init var' zero[81109] 0 call_tmp[628237])
    (81112 'end of statement')
    unknown call_tmp[628242] "maybe param" "maybe type" "temp" "type variable"
    (628245 'move' call_tmp[628242](81115 'typeof' u[81100]))
    unknown one[81117] "dead at end of block" "insert auto destroy"
    (541450 'init var' one[81117] 1 call_tmp[628242])
    (81120 'end of statement')
    unknown call_tmp[628247] "maybe param" "maybe type" "temp"
    (628250 'move' call_tmp[628247](81125 call _build_tuple one[81117] zero[81109] u[81100]))
    unknown U[81127] "dead at end of block" "insert auto destroy"
    (541452 'init var' U[81127] call_tmp[628247])
    (81130 'end of statement')
    unknown call_tmp[628252] "maybe param" "maybe type" "temp"
    (628255 'move' call_tmp[628252](81135 call _build_tuple zero[81109] one[81117] v[81104]))
    unknown V[81137] "dead at end of block" "insert auto destroy"
    (541454 'init var' V[81137] call_tmp[628252])
    (81140 'end of statement' one[81117] zero[81109] zero[81109] one[81117])
    {
      unknown tmp[81189] "temp"
      unknown call_tmp[628257] "expr temp" "maybe param" "maybe type" "temp"
      (628260 'move' call_tmp[628257](81214 call V[81137] 2))
      unknown call_tmp[628262] "expr temp" "maybe param" "maybe type" "temp"
      (628265 'move' call_tmp[628262](81212 call != call_tmp[628257] 0))
      (81217 'move' tmp[81189](81210 call _cond_test call_tmp[628262]))
      WhileDo[81194]
      {
        {
          unknown oldU[81149] "dead at end of block" "insert auto destroy"
          (541456 'init var' oldU[81149] U[81127])
          (81152 'end of statement')
          unknown call_tmp[628267] "expr temp" "maybe param" "maybe type" "temp"
          (628270 'move' call_tmp[628267](81157 call U[81127] 2))
          unknown call_tmp[628272] "expr temp" "maybe param" "maybe type" "temp"
          (628275 'move' call_tmp[628272](81161 call V[81137] 2))
          unknown call_tmp[628277] "maybe param" "maybe type" "temp"
          (628280 'move' call_tmp[628277](81162 call / call_tmp[628267] call_tmp[628272]))
          unknown q[81164] "dead at end of block" "insert auto destroy"
          (541458 'init var' q[81164] call_tmp[628277])
          (81167 'end of statement' U[81127] U[81127] V[81137])
          (81170 call = U[81127] V[81137])
          (476636 'end of statement' U[81127] V[81137])
          unknown call_tmp[628282] "expr temp" "maybe param" "maybe type" "temp"
          (628285 'move' call_tmp[628282](81180 call _build_tuple q[81164] q[81164] q[81164]))
          unknown call_tmp[628287] "expr temp" "maybe param" "maybe type" "temp"
          (628290 'move' call_tmp[628287](81182 call * V[81137] call_tmp[628282]))
          unknown call_tmp[628292] "expr temp" "maybe param" "maybe type" "temp"
          (628295 'move' call_tmp[628292](81184 call - oldU[81149] call_tmp[628287]))
          (81186 call = V[81137] call_tmp[628292])
          (476639 'end of statement' V[81137] oldU[81149] V[81137] q[81164] q[81164] q[81164])
        }
        label _continueLabel[81192]
        unknown call_tmp[628297] "expr temp" "maybe param" "maybe type" "temp"
        (628300 'move' call_tmp[628297](81202 call V[81137] 2))
        unknown call_tmp[628302] "expr temp" "maybe param" "maybe type" "temp"
        (628305 'move' call_tmp[628302](81200 call != call_tmp[628297] 0))
        (81205 'move' tmp[81189](81198 call _cond_test call_tmp[628302]))
        tmp[81189]
      }
      label _breakLabel[81193]
    }
    unknown call_tmp[628307] "expr temp" "maybe param" "maybe type" "temp"
    (628310 'move' call_tmp[628307](81223 call U[81127] 2))
    unknown call_tmp[628312] "expr temp" "maybe param" "maybe type" "temp"
    (628315 'move' call_tmp[628312](81227 call U[81127] 0))
    unknown call_tmp[628317] "expr temp" "maybe param" "maybe type" "temp"
    (628320 'move' call_tmp[628317](81229 call _build_tuple call_tmp[628307] call_tmp[628312]))
    (511922 'move' ret[511917](511921 'deref' call_tmp[628317]))
    gotoReturn _end_chpl__extendedEuclidHelper[511915] _end_chpl__extendedEuclidHelper[511915]
    (476646 'end of statement' U[81127] U[81127])
    label _end_chpl__extendedEuclidHelper[511915]
    (511919 return ret[511917])
  }
  function chpl__extendedEuclid[81244](arg u[81241] :
  (81240 call int(64)[13] 32), arg v[81250] :
  (81249 call int(64)[13] 32)) : _unknown[51] "inline"
  {
    unknown ret[511928] "RVV" "temp"
    unknown call_tmp[628322] "expr temp" "maybe param" "maybe type" "temp"
    (628325 'move' call_tmp[628322](81257 call chpl__extendedEuclidHelper u[81241] v[81250]))
    (511933 'move' ret[511928](511932 'deref' call_tmp[628322]))
    (511930 return ret[511928])
  }
  function chpl__extendedEuclid[81272](arg u[81269] :
  (81268 call int(64)[13] 64), arg v[81278] :
  (81277 call int(64)[13] 64)) : _unknown[51] "inline"
  {
    unknown ret[511937] "RVV" "temp"
    unknown call_tmp[628327] "expr temp" "maybe param" "maybe type" "temp"
    (628330 'move' call_tmp[628327](81285 call chpl__extendedEuclidHelper u[81269] v[81278]))
    (511942 'move' ret[511937](511941 'deref' call_tmp[628327]))
    (511939 return ret[511937])
  }
  function chpl__rangeIdxTypeError[81295](arg idxType[81293]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[628332] "expr temp" "maybe param" "maybe type" "temp"
    (628335 'move' call_tmp[628332](81318 call _cast string[26] idxType[81293]))
    (81337 call compilerError "ranges don't support '" call_tmp[628332] "' as their idxType")
    (511944 return _void[55])
  }
  function chpl__rangeStrideType[81346](arg idxType[81344]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[511948] "RVV" "temp" "type variable"
    unknown call_tmp[628337] "expr temp" "maybe param" "maybe type" "temp"
    (628340 'move' call_tmp[628337](81351 call isIntegralType idxType[81344]))
    unknown call_tmp[628342] "expr temp" "maybe param" "maybe type" "temp"
    (628345 'move' call_tmp[628342](81383 call _cond_test call_tmp[628337]))
    if call_tmp[628342]
    {
      unknown call_tmp[628347] "expr temp" "maybe param" "maybe type" "temp"
      (628350 'move' call_tmp[628347](81355 call chpl__signedType idxType[81344]))
      (511953 'move' ret[511948](511952 'deref' call_tmp[628347]))
      gotoReturn _end_chpl__rangeStrideType[511946] _end_chpl__rangeStrideType[511946]
    }
    {
      unknown tmp[421608] "maybe param" "temp"
      (421619 'move' tmp[421608](81362 call isEnumType idxType[81344]))
      unknown call_tmp[628352] "expr temp" "maybe param" "maybe type" "temp"
      (628355 'move' call_tmp[628352](421621 call _cond_invalid tmp[421608]))
      if call_tmp[628352]
      {
        (421624 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559982] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559983] "maybe param" "temp"
      unknown call_tmp[628357] "expr temp" "maybe param" "maybe type" "temp"
      (628360 'move' call_tmp[628357](421609 call isTrue tmp[421608]))
      (559988 'move' tmp[559983](559986 call _cond_test call_tmp[628357]))
      if tmp[559983]
      {
        (559993 'move' tmp[559982](559990 '_paramFoldLogical' tmp[559983] 1))
      }
      {
        unknown tmp[559995] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628362] "expr temp" "maybe param" "maybe type" "temp"
        (628365 'move' call_tmp[628362](81366 call isBoolType idxType[81344]))
        (559997 'move' tmp[559995](421613 call isTrue call_tmp[628362]))
        (560002 'move' tmp[559982](559999 '_paramFoldLogical' tmp[559983] tmp[559995]))
      }
      unknown call_tmp[628367] "expr temp" "maybe param" "maybe type" "temp"
      (628370 'move' call_tmp[628367](81379 call _cond_test tmp[559982]))
      if call_tmp[628367]
      {
        (511958 'move' ret[511948](511957 'deref' int(64)[13]))
        gotoReturn _end_chpl__rangeStrideType[511946] _end_chpl__rangeStrideType[511946]
      }
      {
        (81376 call chpl__rangeIdxTypeError idxType[81344])
      }
    }
    label _end_chpl__rangeStrideType[511946]
    (511950 return ret[511948])
  }
  function chpl__rangeUnsignedType[81395](arg idxType[81393]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[511964] "RVV" "temp" "type variable"
    unknown call_tmp[628372] "expr temp" "maybe param" "maybe type" "temp"
    (628375 'move' call_tmp[628372](81400 call isIntegralType idxType[81393]))
    unknown call_tmp[628377] "expr temp" "maybe param" "maybe type" "temp"
    (628380 'move' call_tmp[628377](81432 call _cond_test call_tmp[628372]))
    if call_tmp[628377]
    {
      unknown call_tmp[628382] "expr temp" "maybe param" "maybe type" "temp"
      (628385 'move' call_tmp[628382](81404 call chpl__unsignedType idxType[81393]))
      (511969 'move' ret[511964](511968 'deref' call_tmp[628382]))
      gotoReturn _end_chpl__rangeUnsignedType[511962] _end_chpl__rangeUnsignedType[511962]
    }
    {
      unknown tmp[421629] "maybe param" "temp"
      (421640 'move' tmp[421629](81411 call isEnumType idxType[81393]))
      unknown call_tmp[628387] "expr temp" "maybe param" "maybe type" "temp"
      (628390 'move' call_tmp[628387](421642 call _cond_invalid tmp[421629]))
      if call_tmp[628387]
      {
        (421645 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560009] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560010] "maybe param" "temp"
      unknown call_tmp[628392] "expr temp" "maybe param" "maybe type" "temp"
      (628395 'move' call_tmp[628392](421630 call isTrue tmp[421629]))
      (560015 'move' tmp[560010](560013 call _cond_test call_tmp[628392]))
      if tmp[560010]
      {
        (560020 'move' tmp[560009](560017 '_paramFoldLogical' tmp[560010] 1))
      }
      {
        unknown tmp[560022] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628397] "expr temp" "maybe param" "maybe type" "temp"
        (628400 'move' call_tmp[628397](81415 call isBoolType idxType[81393]))
        (560024 'move' tmp[560022](421634 call isTrue call_tmp[628397]))
        (560029 'move' tmp[560009](560026 '_paramFoldLogical' tmp[560010] tmp[560022]))
      }
      unknown call_tmp[628402] "expr temp" "maybe param" "maybe type" "temp"
      (628405 'move' call_tmp[628402](81428 call _cond_test tmp[560009]))
      if call_tmp[628402]
      {
        (511974 'move' ret[511964](511973 'deref' uint(64)[115]))
        gotoReturn _end_chpl__rangeUnsignedType[511962] _end_chpl__rangeUnsignedType[511962]
      }
      {
        (81425 call chpl__rangeIdxTypeError idxType[81393])
      }
    }
    label _end_chpl__rangeUnsignedType[511962]
    (511966 return ret[511964])
  }
  function chpl__idxTypeToIntIdxType[81444](arg idxType[81442]:_any[178](?)) type : _unknown[51] "no doc"
  {
    unknown ret[511980] "RVV" "temp" "type variable"
    unknown call_tmp[628407] "expr temp" "maybe param" "maybe type" "temp"
    (628410 'move' call_tmp[628407](81449 call isBoolType idxType[81442]))
    unknown call_tmp[628412] "expr temp" "maybe param" "maybe type" "temp"
    (628415 'move' call_tmp[628412](81503 call _cond_test call_tmp[628407]))
    if call_tmp[628412]
    {
      (511985 'move' ret[511980](511984 'deref' int(64)[13]))
      gotoReturn _end_chpl__idxTypeToIntIdxType[511978] _end_chpl__idxTypeToIntIdxType[511978]
    }
    {
      unknown call_tmp[628417] "expr temp" "maybe param" "maybe type" "temp"
      (628420 'move' call_tmp[628417](81457 call isEnumType idxType[81442]))
      unknown call_tmp[628422] "expr temp" "maybe param" "maybe type" "temp"
      (628425 'move' call_tmp[628422](81499 call _cond_test call_tmp[628417]))
      if call_tmp[628422]
      {
        unknown call_tmp[628429] "expr temp" "maybe param" "maybe type" "temp"
        (628432 'move' call_tmp[628429](81459 call size _mt[243] idxType[81442]))
        unknown call_tmp[628434] "expr temp" "maybe param" "maybe type" "temp"
        (628437 'move' call_tmp[628434](81463 call < call_tmp[628429] 2))
        unknown call_tmp[628439] "expr temp" "maybe param" "maybe type" "temp"
        (628442 'move' call_tmp[628439](81486 call _cond_test call_tmp[628434]))
        if call_tmp[628439]
        {
          (81484 call compilerError "ranges are not currently supported for enums with fewer than two values")
        }
        (511990 'move' ret[511980](511989 'deref' int(64)[13]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[511978] _end_chpl__idxTypeToIntIdxType[511978]
      }
      {
        (511995 'move' ret[511980](511994 'deref' idxType[81442]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[511978] _end_chpl__idxTypeToIntIdxType[511978]
      }
    }
    label _end_chpl__idxTypeToIntIdxType[511978]
    (511982 return ret[511980])
  }
  function range[64316](?).chpl_intToIdx[81516](arg _mt[81521]:_MT[238], arg this[81518]:range[64316](?) :
  range[64316](?), arg i[81514]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[512001] "RVV" "temp"
    unknown call_tmp[628446] "expr temp" "maybe param" "maybe type" "temp"
    (628449 'move' call_tmp[628446](81525 call idxType _mt[243] this[81518]))
    unknown call_tmp[628451] "expr temp" "maybe param" "maybe type" "temp"
    (628454 'move' call_tmp[628451](81530 call chpl__intToIdx call_tmp[628446] i[81514]))
    (512006 'move' ret[512001](512005 'deref' call_tmp[628451]))
    (512003 return ret[512001])
  }
  function chpl__intToIdx[81542](arg idxType[81539]:integral[199](?), arg i[81545]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512010] "RVV" "temp"
    unknown call_tmp[628456] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628459 'move' call_tmp[628456](81549 'typeof' i[81545]))
    unknown call_tmp[628461] "expr temp" "maybe param" "maybe type" "temp"
    (628464 'move' call_tmp[628461](81551 call == call_tmp[628456] idxType[81539]))
    unknown call_tmp[628466] "expr temp" "maybe param" "maybe type" "temp"
    (628469 'move' call_tmp[628466](81562 call _cond_test call_tmp[628461]))
    if call_tmp[628466]
    {
      (512015 'move' ret[512010](512014 'deref' i[81545]))
      gotoReturn _end_chpl__intToIdx[512008] _end_chpl__intToIdx[512008]
    }
    {
      unknown call_tmp[628471] "expr temp" "maybe param" "maybe type" "temp"
      (628474 'move' call_tmp[628471](81558 call _cast idxType[81539] i[81545]))
      (512020 'move' ret[512010](512019 'deref' call_tmp[628471]))
      gotoReturn _end_chpl__intToIdx[512008] _end_chpl__intToIdx[512008]
    }
    label _end_chpl__intToIdx[512008]
    (512012 return ret[512010])
  }
  function chpl__intToIdx[81577](arg idxType[81574]:integral[199](?), param arg i[81580]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512026] "RVV" "temp"
    unknown call_tmp[628476] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628479 'move' call_tmp[628476](81584 'typeof' i[81580]))
    unknown call_tmp[628481] "expr temp" "maybe param" "maybe type" "temp"
    (628484 'move' call_tmp[628481](81586 call == call_tmp[628476] idxType[81574]))
    unknown call_tmp[628486] "expr temp" "maybe param" "maybe type" "temp"
    (628489 'move' call_tmp[628486](81597 call _cond_test call_tmp[628481]))
    if call_tmp[628486]
    {
      (512031 'move' ret[512026](512030 'deref' i[81580]))
      gotoReturn _end_chpl__intToIdx[512024] _end_chpl__intToIdx[512024]
    }
    {
      unknown call_tmp[628491] "expr temp" "maybe param" "maybe type" "temp"
      (628494 'move' call_tmp[628491](81593 call _cast idxType[81574] i[81580]))
      (512036 'move' ret[512026](512035 'deref' call_tmp[628491]))
      gotoReturn _end_chpl__intToIdx[512024] _end_chpl__intToIdx[512024]
    }
    label _end_chpl__intToIdx[512024]
    (512028 return ret[512026])
  }
  function chpl__intToIdx[81612](arg idxType[81609]:enum[187](?), arg i[81615]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512042] "RVV" "temp"
    unknown call_tmp[628496] "expr temp" "maybe param" "maybe type" "temp"
    (628499 'move' call_tmp[628496](81622 call chpl__orderToEnum i[81615] idxType[81609]))
    (512047 'move' ret[512042](512046 'deref' call_tmp[628496]))
    (512044 return ret[512042])
  }
  function chpl__intToIdx[81632](arg idxType[81630]:_any[178](?), arg i[81635]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512051] "RVV" "temp"
    unknown call_tmp[628501] "expr temp" "maybe param" "maybe type" "temp"
    (628504 'move' call_tmp[628501](81644 call _cast bool[10] i[81635]))
    (512056 'move' ret[512051](512055 'deref' call_tmp[628501]))
    (512053 return ret[512051])
  }
  where {
    (81641 call isBoolType idxType[81630])
  }
  function chpl__intToIdx[81656](arg idxType[81654]:_any[178](?), param arg i[81659]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[512060] "RVV" "param" "temp"
    unknown call_tmp[628506] "expr temp" "maybe param" "maybe type" "temp"
    (628509 'move' call_tmp[628506](81668 call _cast bool[10] i[81659]))
    (512065 'move' ret[512060](512064 'deref' call_tmp[628506]))
    (512062 return ret[512060])
  }
  where {
    (81665 call isBoolType idxType[81654])
  }
  function chpl__intToIdx[81680](arg idxType[81678]:_any[178](?), arg i[81683]:nothing[7]) : _unknown[51] "inline"
  {
    unknown ret[512069] "RVV" "temp"
    (512074 'move' ret[512069](512073 'deref' none[57]))
    (512071 return ret[512069])
  }
  function chpl__idxToInt[81698](arg i[81695]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512078] "RVV" "temp"
    (512083 'move' ret[512078](512082 'deref' i[81695]))
    (512080 return ret[512078])
  }
  function chpl__idxToInt[81712](param arg i[81709]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[512087] "RVV" "param" "temp"
    (512092 'move' ret[512087](512091 'deref' i[81709]))
    (512089 return ret[512087])
  }
  function chpl__idxToInt[81726](arg i[81723]:enum[187](?)) : _unknown[51] "inline"
  {
    unknown ret[512096] "RVV" "temp"
    unknown call_tmp[628511] "expr temp" "maybe param" "maybe type" "temp"
    (628514 'move' call_tmp[628511](81731 call chpl__enumToOrder i[81723]))
    (512101 'move' ret[512096](512100 'deref' call_tmp[628511]))
    (512098 return ret[512096])
  }
  function chpl__idxToInt[81743](arg i[81740]:bool[10]) : _unknown[51] "inline"
  {
    unknown ret[512105] "RVV" "temp"
    unknown call_tmp[628516] "expr temp" "maybe param" "maybe type" "temp"
    (628519 'move' call_tmp[628516](81747 call _cast int(64)[13] i[81740]))
    (512110 'move' ret[512105](512109 'deref' call_tmp[628516]))
    (512107 return ret[512105])
  }
  function chpl__idxToInt[81760](param arg i[81757]:bool[10]) param : _unknown[51] "inline"
  {
    unknown ret[512114] "RVV" "param" "temp"
    unknown call_tmp[628521] "expr temp" "maybe param" "maybe type" "temp"
    (628524 'move' call_tmp[628521](81764 call _cast int(64)[13] i[81757]))
    (512119 'move' ret[512114](512118 'deref' call_tmp[628521]))
    (512116 return ret[512114])
  }
  (355049 'used modules list'(64184 'use' ChapelBase[307])(64186 'use' SysBasic[223516])(64187 'use' HaltWrappers[209998])(64191 'use' Math[215858])(64193 'use' DSIUtil[230888]))
}