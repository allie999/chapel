AST dump for ChapelRange after pass buildDefaultFunctions.
Module use list: ChapelBase SysBasic HaltWrappers Math DSIUtil 

{
  function chpl__init_ChapelRange[415989]() : void[4] "insert line file info" "module init"
  {
    (541026 'init var' debugChapelRange[64198] 0)
    (64201 'end of statement')
    (541028 'init var' useOptimizedRangeIterators[64203] 1)
    (64206 'end of statement')
    {
    }
    (512162 return _void[55])
  }
  unknown debugChapelRange[64198] "config" "no doc" "param"
  unknown useOptimizedRangeIterators[64203] "config" "no doc" "param"
  type BoundedRangeType[64216] def bounded[64208]:BoundedRangeType[64216] def boundedLow[64210]:BoundedRangeType[64216] def boundedHigh[64212]:BoundedRangeType[64216] def boundedNone[64214]:BoundedRangeType[64216]
  function range[64319](?).strType[64297](arg _mt[64323]:_MT[238], arg this[64321]:range[64319](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[509019] "RVV" "temp" "type variable"
    unknown call_tmp[616260] "expr temp" "maybe param" "maybe type" "temp"
    (616263 'move' call_tmp[616260](373727 call idxType _mt[243] this[64321]))
    unknown call_tmp[616265] "expr temp" "maybe param" "maybe type" "temp"
    (616268 'move' call_tmp[616265](64302 call chpl__rangeStrideType call_tmp[616260]))
    (509024 'move' ret[509019](509023 'deref' call_tmp[616265]))
    (509021 return ret[509019])
  }
  function range[64319](?).chpl__promotionType[64310](arg _mt[64327]:_MT[238], arg this[64325]:range[64319](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[509028] "RVV" "temp" "type variable"
    unknown call_tmp[616272] "expr temp" "maybe param" "maybe type" "temp"
    (616275 'move' call_tmp[616272](373732 call idxType _mt[243] this[64325]))
    (509033 'move' ret[509028](509032 'deref' call_tmp[616272]))
    (509030 return ret[509028])
  }
  function range[64319](?).idxType[768039](arg _mt[768041]:_MT[238], arg this[768043]:range[64319](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768062] "RVV" "temp" "type variable"
    unknown call_tmp[768076] "expr temp" "maybe param" "maybe type" "temp"
    (768079 'move' call_tmp[768076](768048 'is bound' this[768043] c"idxType"))
    if call_tmp[768076]
    {
      unknown call_tmp[768081] "expr temp" "maybe param" "maybe type" "temp"
      (768084 'move' call_tmp[768081](768047 '.v' this[768043] c"idxType"))
      (768067 'move' ret[768062](768066 'deref' call_tmp[768081]))
      gotoReturn _end_idxType[768060] _end_idxType[768060]
    }
    {
      (768072 'move' ret[768062](768071 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[768060] _end_idxType[768060]
    }
    label _end_idxType[768060]
    (768064 return ret[768062])
  }
  function range[64319](?).idxType[768086](arg _mt[768088]:_MT[238], arg this[768090]:range[64319](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768109] "RVV" "temp" "type variable"
    unknown call_tmp[768123] "expr temp" "maybe param" "maybe type" "temp"
    (768126 'move' call_tmp[768123](768095 'is bound' this[768090] c"idxType"))
    if call_tmp[768123]
    {
      unknown call_tmp[768128] "expr temp" "maybe param" "maybe type" "temp"
      (768131 'move' call_tmp[768128](768094 '.v' this[768090] c"idxType"))
      (768114 'move' ret[768109](768113 'deref' call_tmp[768128]))
      gotoReturn _end_idxType[768107] _end_idxType[768107]
    }
    {
      (768119 'move' ret[768109](768118 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[768107] _end_idxType[768107]
    }
    label _end_idxType[768107]
    (768111 return ret[768109])
  }
  function range[64319](?).boundedType[768133](arg _mt[768135]:_MT[238], arg this[768137]:range[64319](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768156] "RVV" "param" "temp"
    unknown call_tmp[768170] "expr temp" "maybe param" "maybe type" "temp"
    (768173 'move' call_tmp[768170](768142 'is bound' this[768137] c"boundedType"))
    if call_tmp[768170]
    {
      unknown call_tmp[768175] "expr temp" "maybe param" "maybe type" "temp"
      (768178 'move' call_tmp[768175](768141 '.' this[768137] c"boundedType"))
      (768161 'move' ret[768156](768160 'deref' call_tmp[768175]))
      gotoReturn _end_boundedType[768154] _end_boundedType[768154]
    }
    {
      (768166 'move' ret[768156](768165 'deref' ?[260]))
      gotoReturn _end_boundedType[768154] _end_boundedType[768154]
    }
    label _end_boundedType[768154]
    (768158 return ret[768156])
  }
  function range[64319](?).boundedType[768180](arg _mt[768182]:_MT[238], arg this[768184]:range[64319](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768203] "RVV" "param" "temp"
    unknown call_tmp[768217] "expr temp" "maybe param" "maybe type" "temp"
    (768220 'move' call_tmp[768217](768189 'is bound' this[768184] c"boundedType"))
    if call_tmp[768217]
    {
      unknown call_tmp[768222] "expr temp" "maybe param" "maybe type" "temp"
      (768225 'move' call_tmp[768222](768188 '.' this[768184] c"boundedType"))
      (768208 'move' ret[768203](768207 'deref' call_tmp[768222]))
      gotoReturn _end_boundedType[768201] _end_boundedType[768201]
    }
    {
      (768213 'move' ret[768203](768212 'deref' ?[260]))
      gotoReturn _end_boundedType[768201] _end_boundedType[768201]
    }
    label _end_boundedType[768201]
    (768205 return ret[768203])
  }
  function range[64319](?).stridable[768227](arg _mt[768229]:_MT[238], arg this[768231]:range[64319](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768250] "RVV" "param" "temp"
    unknown call_tmp[768264] "expr temp" "maybe param" "maybe type" "temp"
    (768267 'move' call_tmp[768264](768236 'is bound' this[768231] c"stridable"))
    if call_tmp[768264]
    {
      unknown call_tmp[768269] "expr temp" "maybe param" "maybe type" "temp"
      (768272 'move' call_tmp[768269](768235 '.' this[768231] c"stridable"))
      (768255 'move' ret[768250](768254 'deref' call_tmp[768269]))
      gotoReturn _end_stridable[768248] _end_stridable[768248]
    }
    {
      (768260 'move' ret[768250](768259 'deref' ?[260]))
      gotoReturn _end_stridable[768248] _end_stridable[768248]
    }
    label _end_stridable[768248]
    (768252 return ret[768250])
  }
  function range[64319](?).stridable[768274](arg _mt[768276]:_MT[238], arg this[768278]:range[64319](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768297] "RVV" "param" "temp"
    unknown call_tmp[768311] "expr temp" "maybe param" "maybe type" "temp"
    (768314 'move' call_tmp[768311](768283 'is bound' this[768278] c"stridable"))
    if call_tmp[768311]
    {
      unknown call_tmp[768316] "expr temp" "maybe param" "maybe type" "temp"
      (768319 'move' call_tmp[768316](768282 '.' this[768278] c"stridable"))
      (768302 'move' ret[768297](768301 'deref' call_tmp[768316]))
      gotoReturn _end_stridable[768295] _end_stridable[768295]
    }
    {
      (768307 'move' ret[768297](768306 'deref' ?[260]))
      gotoReturn _end_stridable[768295] _end_stridable[768295]
    }
    label _end_stridable[768295]
    (768299 return ret[768297])
  }
  function range[64319](?)._low[768321](arg _mt[768323]:_MT[238], ref arg this[768325]:range[64319](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768335] "RVV" "temp"
    unknown call_tmp[768342] "expr temp" "maybe param" "maybe type" "temp"
    (768345 'move' call_tmp[768342](768329 '.' this[768325] c"_low"))
    (768340 'move' ret[768335](768339 'addr of' call_tmp[768342]))
    (768337 return ret[768335])
  }
  function range[64319](?)._high[768347](arg _mt[768349]:_MT[238], ref arg this[768351]:range[64319](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768361] "RVV" "temp"
    unknown call_tmp[768368] "expr temp" "maybe param" "maybe type" "temp"
    (768371 'move' call_tmp[768368](768355 '.' this[768351] c"_high"))
    (768366 'move' ret[768361](768365 'addr of' call_tmp[768368]))
    (768363 return ret[768361])
  }
  function range[64319](?)._stride[768373](arg _mt[768375]:_MT[238], ref arg this[768377]:range[64319](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768387] "RVV" "temp"
    unknown call_tmp[768394] "expr temp" "maybe param" "maybe type" "temp"
    (768397 'move' call_tmp[768394](768381 '.' this[768377] c"_stride"))
    (768392 'move' ret[768387](768391 'addr of' call_tmp[768394]))
    (768389 return ret[768387])
  }
  function range[64319](?)._alignment[768399](arg _mt[768401]:_MT[238], ref arg this[768403]:range[64319](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768413] "RVV" "temp"
    unknown call_tmp[768420] "expr temp" "maybe param" "maybe type" "temp"
    (768423 'move' call_tmp[768420](768407 '.' this[768403] c"_alignment"))
    (768418 'move' ret[768413](768417 'addr of' call_tmp[768420]))
    (768415 return ret[768413])
  }
  function range[64319](?)._aligned[768425](arg _mt[768427]:_MT[238], ref arg this[768429]:range[64319](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768439] "RVV" "temp"
    unknown call_tmp[768446] "expr temp" "maybe param" "maybe type" "temp"
    (768449 'move' call_tmp[768446](768433 '.' this[768429] c"_aligned"))
    (768444 'move' ret[768439](768443 'addr of' call_tmp[768446]))
    (768441 return ret[768439])
  }
  function range[64319](?).deinit[768451](arg _mt[768453]:_MT[238], arg this[768455]:range[64319](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (768463 return _void[55])
  }
  function chpl_fields_are_comparable[768477](arg _arg1[768479]:range[64319](?), arg _arg2[768480]:range[64319](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[768559]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[768566] "expr temp" "maybe param" "maybe type" "temp"
    (768569 'move' call_tmp[768566](768483 call boundedType _mt[243] _arg1[768479]))
    unknown call_tmp[768571] "expr temp" "maybe param" "maybe type" "temp"
    (768574 'move' call_tmp[768571](768487 call boundedType _mt[243] _arg2[768480]))
    unknown call_tmp[768576] "expr temp" "maybe param" "maybe type" "temp"
    (768579 'move' call_tmp[768576](768491 'call resolves' c"<" call_tmp[768566] call_tmp[768571]))
    unknown call_tmp[768581] "expr temp" "maybe param" "maybe type" "temp"
    (768584 'move' call_tmp[768581](768493 call stridable _mt[243] _arg1[768479]))
    unknown call_tmp[768586] "expr temp" "maybe param" "maybe type" "temp"
    (768589 'move' call_tmp[768586](768497 call stridable _mt[243] _arg2[768480]))
    unknown call_tmp[768591] "expr temp" "maybe param" "maybe type" "temp"
    (768594 'move' call_tmp[768591](768501 'call resolves' c"<" call_tmp[768581] call_tmp[768586]))
    unknown call_tmp[768596] "expr temp" "maybe param" "maybe type" "temp"
    (768599 'move' call_tmp[768596](768503 call _low _mt[243] _arg1[768479]))
    unknown call_tmp[768601] "expr temp" "maybe param" "maybe type" "temp"
    (768604 'move' call_tmp[768601](768507 call _low _mt[243] _arg2[768480]))
    unknown call_tmp[768606] "expr temp" "maybe param" "maybe type" "temp"
    (768609 'move' call_tmp[768606](768511 'call resolves' c"<" call_tmp[768596] call_tmp[768601]))
    unknown call_tmp[768611] "expr temp" "maybe param" "maybe type" "temp"
    (768614 'move' call_tmp[768611](768513 call _high _mt[243] _arg1[768479]))
    unknown call_tmp[768616] "expr temp" "maybe param" "maybe type" "temp"
    (768619 'move' call_tmp[768616](768517 call _high _mt[243] _arg2[768480]))
    unknown call_tmp[768621] "expr temp" "maybe param" "maybe type" "temp"
    (768624 'move' call_tmp[768621](768521 'call resolves' c"<" call_tmp[768611] call_tmp[768616]))
    unknown call_tmp[768626] "expr temp" "maybe param" "maybe type" "temp"
    (768629 'move' call_tmp[768626](768523 call _stride _mt[243] _arg1[768479]))
    unknown call_tmp[768631] "expr temp" "maybe param" "maybe type" "temp"
    (768634 'move' call_tmp[768631](768527 call _stride _mt[243] _arg2[768480]))
    unknown call_tmp[768636] "expr temp" "maybe param" "maybe type" "temp"
    (768639 'move' call_tmp[768636](768531 'call resolves' c"<" call_tmp[768626] call_tmp[768631]))
    unknown call_tmp[768641] "expr temp" "maybe param" "maybe type" "temp"
    (768644 'move' call_tmp[768641](768533 call _alignment _mt[243] _arg1[768479]))
    unknown call_tmp[768646] "expr temp" "maybe param" "maybe type" "temp"
    (768649 'move' call_tmp[768646](768537 call _alignment _mt[243] _arg2[768480]))
    unknown call_tmp[768651] "expr temp" "maybe param" "maybe type" "temp"
    (768654 'move' call_tmp[768651](768541 'call resolves' c"<" call_tmp[768641] call_tmp[768646]))
    unknown call_tmp[768656] "expr temp" "maybe param" "maybe type" "temp"
    (768659 'move' call_tmp[768656](768543 call _aligned _mt[243] _arg1[768479]))
    unknown call_tmp[768661] "expr temp" "maybe param" "maybe type" "temp"
    (768664 'move' call_tmp[768661](768547 call _aligned _mt[243] _arg2[768480]))
    unknown call_tmp[768666] "expr temp" "maybe param" "maybe type" "temp"
    (768669 'move' call_tmp[768666](768551 'call resolves' c"<" call_tmp[768656] call_tmp[768661]))
    unknown call_tmp[768671] "expr temp" "maybe param" "maybe type" "temp"
    (768674 'move' call_tmp[768671](768553 '&' call_tmp[768576] call_tmp[768591] call_tmp[768606] call_tmp[768621] call_tmp[768636] call_tmp[768651] call_tmp[768666]))
    (768564 'move' ret[768559](768563 'deref' call_tmp[768671]))
    (768561 return ret[768559])
  }
  function <[768465](arg _arg1[768467]:range[64319](?), arg _arg2[768468]:range[64319](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[768898]:bool[10] "RVV" "temp"
    unknown call_tmp[768975] "expr temp" "maybe param" "maybe type" "temp"
    (768978 'move' call_tmp[768975](768682 call boundedType _mt[243] _arg1[768467]))
    unknown call_tmp[768980] "expr temp" "maybe param" "maybe type" "temp"
    (768983 'move' call_tmp[768980](768686 call boundedType _mt[243] _arg2[768468]))
    unknown call_tmp[768985] "expr temp" "maybe param" "maybe type" "temp"
    (768988 'move' call_tmp[768985](768690 call < call_tmp[768975] call_tmp[768980]))
    if call_tmp[768985]
    {
      (768903 'move' ret[768898](768902 'deref' 1))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[768990] "expr temp" "maybe param" "maybe type" "temp"
    (768993 'move' call_tmp[768990](768696 call boundedType _mt[243] _arg1[768467]))
    unknown call_tmp[768995] "expr temp" "maybe param" "maybe type" "temp"
    (768998 'move' call_tmp[768995](768700 call boundedType _mt[243] _arg2[768468]))
    unknown call_tmp[769000] "expr temp" "maybe param" "maybe type" "temp"
    (769003 'move' call_tmp[769000](768704 call > call_tmp[768990] call_tmp[768995]))
    if call_tmp[769000]
    {
      (768908 'move' ret[768898](768907 'deref' 0))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769005] "expr temp" "maybe param" "maybe type" "temp"
    (769008 'move' call_tmp[769005](768710 call stridable _mt[243] _arg1[768467]))
    unknown call_tmp[769010] "expr temp" "maybe param" "maybe type" "temp"
    (769013 'move' call_tmp[769010](768714 call stridable _mt[243] _arg2[768468]))
    unknown call_tmp[769015] "expr temp" "maybe param" "maybe type" "temp"
    (769018 'move' call_tmp[769015](768718 call < call_tmp[769005] call_tmp[769010]))
    if call_tmp[769015]
    {
      (768913 'move' ret[768898](768912 'deref' 1))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769020] "expr temp" "maybe param" "maybe type" "temp"
    (769023 'move' call_tmp[769020](768724 call stridable _mt[243] _arg1[768467]))
    unknown call_tmp[769025] "expr temp" "maybe param" "maybe type" "temp"
    (769028 'move' call_tmp[769025](768728 call stridable _mt[243] _arg2[768468]))
    unknown call_tmp[769030] "expr temp" "maybe param" "maybe type" "temp"
    (769033 'move' call_tmp[769030](768732 call > call_tmp[769020] call_tmp[769025]))
    if call_tmp[769030]
    {
      (768918 'move' ret[768898](768917 'deref' 0))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769035] "expr temp" "maybe param" "maybe type" "temp"
    (769038 'move' call_tmp[769035](768738 call _low _mt[243] _arg1[768467]))
    unknown call_tmp[769040] "expr temp" "maybe param" "maybe type" "temp"
    (769043 'move' call_tmp[769040](768742 call _low _mt[243] _arg2[768468]))
    unknown call_tmp[769045] "expr temp" "maybe param" "maybe type" "temp"
    (769048 'move' call_tmp[769045](768746 call < call_tmp[769035] call_tmp[769040]))
    if call_tmp[769045]
    {
      (768923 'move' ret[768898](768922 'deref' 1))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769050] "expr temp" "maybe param" "maybe type" "temp"
    (769053 'move' call_tmp[769050](768752 call _low _mt[243] _arg1[768467]))
    unknown call_tmp[769055] "expr temp" "maybe param" "maybe type" "temp"
    (769058 'move' call_tmp[769055](768756 call _low _mt[243] _arg2[768468]))
    unknown call_tmp[769060] "expr temp" "maybe param" "maybe type" "temp"
    (769063 'move' call_tmp[769060](768760 call > call_tmp[769050] call_tmp[769055]))
    if call_tmp[769060]
    {
      (768928 'move' ret[768898](768927 'deref' 0))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769065] "expr temp" "maybe param" "maybe type" "temp"
    (769068 'move' call_tmp[769065](768766 call _high _mt[243] _arg1[768467]))
    unknown call_tmp[769070] "expr temp" "maybe param" "maybe type" "temp"
    (769073 'move' call_tmp[769070](768770 call _high _mt[243] _arg2[768468]))
    unknown call_tmp[769075] "expr temp" "maybe param" "maybe type" "temp"
    (769078 'move' call_tmp[769075](768774 call < call_tmp[769065] call_tmp[769070]))
    if call_tmp[769075]
    {
      (768933 'move' ret[768898](768932 'deref' 1))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769080] "expr temp" "maybe param" "maybe type" "temp"
    (769083 'move' call_tmp[769080](768780 call _high _mt[243] _arg1[768467]))
    unknown call_tmp[769085] "expr temp" "maybe param" "maybe type" "temp"
    (769088 'move' call_tmp[769085](768784 call _high _mt[243] _arg2[768468]))
    unknown call_tmp[769090] "expr temp" "maybe param" "maybe type" "temp"
    (769093 'move' call_tmp[769090](768788 call > call_tmp[769080] call_tmp[769085]))
    if call_tmp[769090]
    {
      (768938 'move' ret[768898](768937 'deref' 0))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769095] "expr temp" "maybe param" "maybe type" "temp"
    (769098 'move' call_tmp[769095](768794 call _stride _mt[243] _arg1[768467]))
    unknown call_tmp[769100] "expr temp" "maybe param" "maybe type" "temp"
    (769103 'move' call_tmp[769100](768798 call _stride _mt[243] _arg2[768468]))
    unknown call_tmp[769105] "expr temp" "maybe param" "maybe type" "temp"
    (769108 'move' call_tmp[769105](768802 call < call_tmp[769095] call_tmp[769100]))
    if call_tmp[769105]
    {
      (768943 'move' ret[768898](768942 'deref' 1))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769110] "expr temp" "maybe param" "maybe type" "temp"
    (769113 'move' call_tmp[769110](768808 call _stride _mt[243] _arg1[768467]))
    unknown call_tmp[769115] "expr temp" "maybe param" "maybe type" "temp"
    (769118 'move' call_tmp[769115](768812 call _stride _mt[243] _arg2[768468]))
    unknown call_tmp[769120] "expr temp" "maybe param" "maybe type" "temp"
    (769123 'move' call_tmp[769120](768816 call > call_tmp[769110] call_tmp[769115]))
    if call_tmp[769120]
    {
      (768948 'move' ret[768898](768947 'deref' 0))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769125] "expr temp" "maybe param" "maybe type" "temp"
    (769128 'move' call_tmp[769125](768822 call _alignment _mt[243] _arg1[768467]))
    unknown call_tmp[769130] "expr temp" "maybe param" "maybe type" "temp"
    (769133 'move' call_tmp[769130](768826 call _alignment _mt[243] _arg2[768468]))
    unknown call_tmp[769135] "expr temp" "maybe param" "maybe type" "temp"
    (769138 'move' call_tmp[769135](768830 call < call_tmp[769125] call_tmp[769130]))
    if call_tmp[769135]
    {
      (768953 'move' ret[768898](768952 'deref' 1))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769140] "expr temp" "maybe param" "maybe type" "temp"
    (769143 'move' call_tmp[769140](768836 call _alignment _mt[243] _arg1[768467]))
    unknown call_tmp[769145] "expr temp" "maybe param" "maybe type" "temp"
    (769148 'move' call_tmp[769145](768840 call _alignment _mt[243] _arg2[768468]))
    unknown call_tmp[769150] "expr temp" "maybe param" "maybe type" "temp"
    (769153 'move' call_tmp[769150](768844 call > call_tmp[769140] call_tmp[769145]))
    if call_tmp[769150]
    {
      (768958 'move' ret[768898](768957 'deref' 0))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769155] "expr temp" "maybe param" "maybe type" "temp"
    (769158 'move' call_tmp[769155](768850 call _aligned _mt[243] _arg1[768467]))
    unknown call_tmp[769160] "expr temp" "maybe param" "maybe type" "temp"
    (769163 'move' call_tmp[769160](768854 call _aligned _mt[243] _arg2[768468]))
    unknown call_tmp[769165] "expr temp" "maybe param" "maybe type" "temp"
    (769168 'move' call_tmp[769165](768858 call < call_tmp[769155] call_tmp[769160]))
    if call_tmp[769165]
    {
      (768963 'move' ret[768898](768962 'deref' 1))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    unknown call_tmp[769170] "expr temp" "maybe param" "maybe type" "temp"
    (769173 'move' call_tmp[769170](768864 call _aligned _mt[243] _arg1[768467]))
    unknown call_tmp[769175] "expr temp" "maybe param" "maybe type" "temp"
    (769178 'move' call_tmp[769175](768868 call _aligned _mt[243] _arg2[768468]))
    unknown call_tmp[769180] "expr temp" "maybe param" "maybe type" "temp"
    (769183 'move' call_tmp[769180](768872 call > call_tmp[769170] call_tmp[769175]))
    if call_tmp[769180]
    {
      (768968 'move' ret[768898](768967 'deref' 0))
      gotoReturn _end_<[768896] _end_<[768896]
    }
    (768973 'move' ret[768898](768972 'deref' 0))
    label _end_<[768896]
    (768900 return ret[768898])
  }
  where {
    unknown call_tmp[769185] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769188 'move' call_tmp[769185](768471 'typeof' _arg1[768467]))
    unknown call_tmp[769190] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769193 'move' call_tmp[769190](768473 'typeof' _arg2[768468]))
    unknown call_tmp[769195] "expr temp" "maybe param" "maybe type" "temp"
    (769198 'move' call_tmp[769195](768475 call == call_tmp[769185] call_tmp[769190]))
    unknown call_tmp[769200] "expr temp" "maybe param" "maybe type" "temp"
    (769203 'move' call_tmp[769200](768676 call chpl_fields_are_comparable[768477] _arg1[768467] _arg2[768468]))
    (768680 '&' call_tmp[769195] call_tmp[769200])
  }
  function chpl_fields_are_comparable[769217](arg _arg1[769219]:range[64319](?), arg _arg2[769220]:range[64319](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[769299]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[769306] "expr temp" "maybe param" "maybe type" "temp"
    (769309 'move' call_tmp[769306](769223 call boundedType _mt[243] _arg1[769219]))
    unknown call_tmp[769311] "expr temp" "maybe param" "maybe type" "temp"
    (769314 'move' call_tmp[769311](769227 call boundedType _mt[243] _arg2[769220]))
    unknown call_tmp[769316] "expr temp" "maybe param" "maybe type" "temp"
    (769319 'move' call_tmp[769316](769231 'call resolves' c"<=" call_tmp[769306] call_tmp[769311]))
    unknown call_tmp[769321] "expr temp" "maybe param" "maybe type" "temp"
    (769324 'move' call_tmp[769321](769233 call stridable _mt[243] _arg1[769219]))
    unknown call_tmp[769326] "expr temp" "maybe param" "maybe type" "temp"
    (769329 'move' call_tmp[769326](769237 call stridable _mt[243] _arg2[769220]))
    unknown call_tmp[769331] "expr temp" "maybe param" "maybe type" "temp"
    (769334 'move' call_tmp[769331](769241 'call resolves' c"<=" call_tmp[769321] call_tmp[769326]))
    unknown call_tmp[769336] "expr temp" "maybe param" "maybe type" "temp"
    (769339 'move' call_tmp[769336](769243 call _low _mt[243] _arg1[769219]))
    unknown call_tmp[769341] "expr temp" "maybe param" "maybe type" "temp"
    (769344 'move' call_tmp[769341](769247 call _low _mt[243] _arg2[769220]))
    unknown call_tmp[769346] "expr temp" "maybe param" "maybe type" "temp"
    (769349 'move' call_tmp[769346](769251 'call resolves' c"<=" call_tmp[769336] call_tmp[769341]))
    unknown call_tmp[769351] "expr temp" "maybe param" "maybe type" "temp"
    (769354 'move' call_tmp[769351](769253 call _high _mt[243] _arg1[769219]))
    unknown call_tmp[769356] "expr temp" "maybe param" "maybe type" "temp"
    (769359 'move' call_tmp[769356](769257 call _high _mt[243] _arg2[769220]))
    unknown call_tmp[769361] "expr temp" "maybe param" "maybe type" "temp"
    (769364 'move' call_tmp[769361](769261 'call resolves' c"<=" call_tmp[769351] call_tmp[769356]))
    unknown call_tmp[769366] "expr temp" "maybe param" "maybe type" "temp"
    (769369 'move' call_tmp[769366](769263 call _stride _mt[243] _arg1[769219]))
    unknown call_tmp[769371] "expr temp" "maybe param" "maybe type" "temp"
    (769374 'move' call_tmp[769371](769267 call _stride _mt[243] _arg2[769220]))
    unknown call_tmp[769376] "expr temp" "maybe param" "maybe type" "temp"
    (769379 'move' call_tmp[769376](769271 'call resolves' c"<=" call_tmp[769366] call_tmp[769371]))
    unknown call_tmp[769381] "expr temp" "maybe param" "maybe type" "temp"
    (769384 'move' call_tmp[769381](769273 call _alignment _mt[243] _arg1[769219]))
    unknown call_tmp[769386] "expr temp" "maybe param" "maybe type" "temp"
    (769389 'move' call_tmp[769386](769277 call _alignment _mt[243] _arg2[769220]))
    unknown call_tmp[769391] "expr temp" "maybe param" "maybe type" "temp"
    (769394 'move' call_tmp[769391](769281 'call resolves' c"<=" call_tmp[769381] call_tmp[769386]))
    unknown call_tmp[769396] "expr temp" "maybe param" "maybe type" "temp"
    (769399 'move' call_tmp[769396](769283 call _aligned _mt[243] _arg1[769219]))
    unknown call_tmp[769401] "expr temp" "maybe param" "maybe type" "temp"
    (769404 'move' call_tmp[769401](769287 call _aligned _mt[243] _arg2[769220]))
    unknown call_tmp[769406] "expr temp" "maybe param" "maybe type" "temp"
    (769409 'move' call_tmp[769406](769291 'call resolves' c"<=" call_tmp[769396] call_tmp[769401]))
    unknown call_tmp[769411] "expr temp" "maybe param" "maybe type" "temp"
    (769414 'move' call_tmp[769411](769293 '&' call_tmp[769316] call_tmp[769331] call_tmp[769346] call_tmp[769361] call_tmp[769376] call_tmp[769391] call_tmp[769406]))
    (769304 'move' ret[769299](769303 'deref' call_tmp[769411]))
    (769301 return ret[769299])
  }
  function <=[769205](arg _arg1[769207]:range[64319](?), arg _arg2[769208]:range[64319](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[769638]:bool[10] "RVV" "temp"
    unknown call_tmp[769715] "expr temp" "maybe param" "maybe type" "temp"
    (769718 'move' call_tmp[769715](769422 call boundedType _mt[243] _arg1[769207]))
    unknown call_tmp[769720] "expr temp" "maybe param" "maybe type" "temp"
    (769723 'move' call_tmp[769720](769426 call boundedType _mt[243] _arg2[769208]))
    unknown call_tmp[769725] "expr temp" "maybe param" "maybe type" "temp"
    (769728 'move' call_tmp[769725](769430 call < call_tmp[769715] call_tmp[769720]))
    if call_tmp[769725]
    {
      (769643 'move' ret[769638](769642 'deref' 1))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769730] "expr temp" "maybe param" "maybe type" "temp"
    (769733 'move' call_tmp[769730](769436 call boundedType _mt[243] _arg1[769207]))
    unknown call_tmp[769735] "expr temp" "maybe param" "maybe type" "temp"
    (769738 'move' call_tmp[769735](769440 call boundedType _mt[243] _arg2[769208]))
    unknown call_tmp[769740] "expr temp" "maybe param" "maybe type" "temp"
    (769743 'move' call_tmp[769740](769444 call > call_tmp[769730] call_tmp[769735]))
    if call_tmp[769740]
    {
      (769648 'move' ret[769638](769647 'deref' 0))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769745] "expr temp" "maybe param" "maybe type" "temp"
    (769748 'move' call_tmp[769745](769450 call stridable _mt[243] _arg1[769207]))
    unknown call_tmp[769750] "expr temp" "maybe param" "maybe type" "temp"
    (769753 'move' call_tmp[769750](769454 call stridable _mt[243] _arg2[769208]))
    unknown call_tmp[769755] "expr temp" "maybe param" "maybe type" "temp"
    (769758 'move' call_tmp[769755](769458 call < call_tmp[769745] call_tmp[769750]))
    if call_tmp[769755]
    {
      (769653 'move' ret[769638](769652 'deref' 1))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769760] "expr temp" "maybe param" "maybe type" "temp"
    (769763 'move' call_tmp[769760](769464 call stridable _mt[243] _arg1[769207]))
    unknown call_tmp[769765] "expr temp" "maybe param" "maybe type" "temp"
    (769768 'move' call_tmp[769765](769468 call stridable _mt[243] _arg2[769208]))
    unknown call_tmp[769770] "expr temp" "maybe param" "maybe type" "temp"
    (769773 'move' call_tmp[769770](769472 call > call_tmp[769760] call_tmp[769765]))
    if call_tmp[769770]
    {
      (769658 'move' ret[769638](769657 'deref' 0))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769775] "expr temp" "maybe param" "maybe type" "temp"
    (769778 'move' call_tmp[769775](769478 call _low _mt[243] _arg1[769207]))
    unknown call_tmp[769780] "expr temp" "maybe param" "maybe type" "temp"
    (769783 'move' call_tmp[769780](769482 call _low _mt[243] _arg2[769208]))
    unknown call_tmp[769785] "expr temp" "maybe param" "maybe type" "temp"
    (769788 'move' call_tmp[769785](769486 call < call_tmp[769775] call_tmp[769780]))
    if call_tmp[769785]
    {
      (769663 'move' ret[769638](769662 'deref' 1))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769790] "expr temp" "maybe param" "maybe type" "temp"
    (769793 'move' call_tmp[769790](769492 call _low _mt[243] _arg1[769207]))
    unknown call_tmp[769795] "expr temp" "maybe param" "maybe type" "temp"
    (769798 'move' call_tmp[769795](769496 call _low _mt[243] _arg2[769208]))
    unknown call_tmp[769800] "expr temp" "maybe param" "maybe type" "temp"
    (769803 'move' call_tmp[769800](769500 call > call_tmp[769790] call_tmp[769795]))
    if call_tmp[769800]
    {
      (769668 'move' ret[769638](769667 'deref' 0))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769805] "expr temp" "maybe param" "maybe type" "temp"
    (769808 'move' call_tmp[769805](769506 call _high _mt[243] _arg1[769207]))
    unknown call_tmp[769810] "expr temp" "maybe param" "maybe type" "temp"
    (769813 'move' call_tmp[769810](769510 call _high _mt[243] _arg2[769208]))
    unknown call_tmp[769815] "expr temp" "maybe param" "maybe type" "temp"
    (769818 'move' call_tmp[769815](769514 call < call_tmp[769805] call_tmp[769810]))
    if call_tmp[769815]
    {
      (769673 'move' ret[769638](769672 'deref' 1))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769820] "expr temp" "maybe param" "maybe type" "temp"
    (769823 'move' call_tmp[769820](769520 call _high _mt[243] _arg1[769207]))
    unknown call_tmp[769825] "expr temp" "maybe param" "maybe type" "temp"
    (769828 'move' call_tmp[769825](769524 call _high _mt[243] _arg2[769208]))
    unknown call_tmp[769830] "expr temp" "maybe param" "maybe type" "temp"
    (769833 'move' call_tmp[769830](769528 call > call_tmp[769820] call_tmp[769825]))
    if call_tmp[769830]
    {
      (769678 'move' ret[769638](769677 'deref' 0))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769835] "expr temp" "maybe param" "maybe type" "temp"
    (769838 'move' call_tmp[769835](769534 call _stride _mt[243] _arg1[769207]))
    unknown call_tmp[769840] "expr temp" "maybe param" "maybe type" "temp"
    (769843 'move' call_tmp[769840](769538 call _stride _mt[243] _arg2[769208]))
    unknown call_tmp[769845] "expr temp" "maybe param" "maybe type" "temp"
    (769848 'move' call_tmp[769845](769542 call < call_tmp[769835] call_tmp[769840]))
    if call_tmp[769845]
    {
      (769683 'move' ret[769638](769682 'deref' 1))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769850] "expr temp" "maybe param" "maybe type" "temp"
    (769853 'move' call_tmp[769850](769548 call _stride _mt[243] _arg1[769207]))
    unknown call_tmp[769855] "expr temp" "maybe param" "maybe type" "temp"
    (769858 'move' call_tmp[769855](769552 call _stride _mt[243] _arg2[769208]))
    unknown call_tmp[769860] "expr temp" "maybe param" "maybe type" "temp"
    (769863 'move' call_tmp[769860](769556 call > call_tmp[769850] call_tmp[769855]))
    if call_tmp[769860]
    {
      (769688 'move' ret[769638](769687 'deref' 0))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769865] "expr temp" "maybe param" "maybe type" "temp"
    (769868 'move' call_tmp[769865](769562 call _alignment _mt[243] _arg1[769207]))
    unknown call_tmp[769870] "expr temp" "maybe param" "maybe type" "temp"
    (769873 'move' call_tmp[769870](769566 call _alignment _mt[243] _arg2[769208]))
    unknown call_tmp[769875] "expr temp" "maybe param" "maybe type" "temp"
    (769878 'move' call_tmp[769875](769570 call < call_tmp[769865] call_tmp[769870]))
    if call_tmp[769875]
    {
      (769693 'move' ret[769638](769692 'deref' 1))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769880] "expr temp" "maybe param" "maybe type" "temp"
    (769883 'move' call_tmp[769880](769576 call _alignment _mt[243] _arg1[769207]))
    unknown call_tmp[769885] "expr temp" "maybe param" "maybe type" "temp"
    (769888 'move' call_tmp[769885](769580 call _alignment _mt[243] _arg2[769208]))
    unknown call_tmp[769890] "expr temp" "maybe param" "maybe type" "temp"
    (769893 'move' call_tmp[769890](769584 call > call_tmp[769880] call_tmp[769885]))
    if call_tmp[769890]
    {
      (769698 'move' ret[769638](769697 'deref' 0))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769895] "expr temp" "maybe param" "maybe type" "temp"
    (769898 'move' call_tmp[769895](769590 call _aligned _mt[243] _arg1[769207]))
    unknown call_tmp[769900] "expr temp" "maybe param" "maybe type" "temp"
    (769903 'move' call_tmp[769900](769594 call _aligned _mt[243] _arg2[769208]))
    unknown call_tmp[769905] "expr temp" "maybe param" "maybe type" "temp"
    (769908 'move' call_tmp[769905](769598 call < call_tmp[769895] call_tmp[769900]))
    if call_tmp[769905]
    {
      (769703 'move' ret[769638](769702 'deref' 1))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    unknown call_tmp[769910] "expr temp" "maybe param" "maybe type" "temp"
    (769913 'move' call_tmp[769910](769604 call _aligned _mt[243] _arg1[769207]))
    unknown call_tmp[769915] "expr temp" "maybe param" "maybe type" "temp"
    (769918 'move' call_tmp[769915](769608 call _aligned _mt[243] _arg2[769208]))
    unknown call_tmp[769920] "expr temp" "maybe param" "maybe type" "temp"
    (769923 'move' call_tmp[769920](769612 call > call_tmp[769910] call_tmp[769915]))
    if call_tmp[769920]
    {
      (769708 'move' ret[769638](769707 'deref' 0))
      gotoReturn _end_<=[769636] _end_<=[769636]
    }
    (769713 'move' ret[769638](769712 'deref' 1))
    label _end_<=[769636]
    (769640 return ret[769638])
  }
  where {
    unknown call_tmp[769925] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769928 'move' call_tmp[769925](769211 'typeof' _arg1[769207]))
    unknown call_tmp[769930] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769933 'move' call_tmp[769930](769213 'typeof' _arg2[769208]))
    unknown call_tmp[769935] "expr temp" "maybe param" "maybe type" "temp"
    (769938 'move' call_tmp[769935](769215 call == call_tmp[769925] call_tmp[769930]))
    unknown call_tmp[769940] "expr temp" "maybe param" "maybe type" "temp"
    (769943 'move' call_tmp[769940](769416 call chpl_fields_are_comparable[769217] _arg1[769207] _arg2[769208]))
    (769420 '&' call_tmp[769935] call_tmp[769940])
  }
  function chpl_fields_are_comparable[769957](arg _arg1[769959]:range[64319](?), arg _arg2[769960]:range[64319](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[770039]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[770046] "expr temp" "maybe param" "maybe type" "temp"
    (770049 'move' call_tmp[770046](769963 call boundedType _mt[243] _arg1[769959]))
    unknown call_tmp[770051] "expr temp" "maybe param" "maybe type" "temp"
    (770054 'move' call_tmp[770051](769967 call boundedType _mt[243] _arg2[769960]))
    unknown call_tmp[770056] "expr temp" "maybe param" "maybe type" "temp"
    (770059 'move' call_tmp[770056](769971 'call resolves' c">" call_tmp[770046] call_tmp[770051]))
    unknown call_tmp[770061] "expr temp" "maybe param" "maybe type" "temp"
    (770064 'move' call_tmp[770061](769973 call stridable _mt[243] _arg1[769959]))
    unknown call_tmp[770066] "expr temp" "maybe param" "maybe type" "temp"
    (770069 'move' call_tmp[770066](769977 call stridable _mt[243] _arg2[769960]))
    unknown call_tmp[770071] "expr temp" "maybe param" "maybe type" "temp"
    (770074 'move' call_tmp[770071](769981 'call resolves' c">" call_tmp[770061] call_tmp[770066]))
    unknown call_tmp[770076] "expr temp" "maybe param" "maybe type" "temp"
    (770079 'move' call_tmp[770076](769983 call _low _mt[243] _arg1[769959]))
    unknown call_tmp[770081] "expr temp" "maybe param" "maybe type" "temp"
    (770084 'move' call_tmp[770081](769987 call _low _mt[243] _arg2[769960]))
    unknown call_tmp[770086] "expr temp" "maybe param" "maybe type" "temp"
    (770089 'move' call_tmp[770086](769991 'call resolves' c">" call_tmp[770076] call_tmp[770081]))
    unknown call_tmp[770091] "expr temp" "maybe param" "maybe type" "temp"
    (770094 'move' call_tmp[770091](769993 call _high _mt[243] _arg1[769959]))
    unknown call_tmp[770096] "expr temp" "maybe param" "maybe type" "temp"
    (770099 'move' call_tmp[770096](769997 call _high _mt[243] _arg2[769960]))
    unknown call_tmp[770101] "expr temp" "maybe param" "maybe type" "temp"
    (770104 'move' call_tmp[770101](770001 'call resolves' c">" call_tmp[770091] call_tmp[770096]))
    unknown call_tmp[770106] "expr temp" "maybe param" "maybe type" "temp"
    (770109 'move' call_tmp[770106](770003 call _stride _mt[243] _arg1[769959]))
    unknown call_tmp[770111] "expr temp" "maybe param" "maybe type" "temp"
    (770114 'move' call_tmp[770111](770007 call _stride _mt[243] _arg2[769960]))
    unknown call_tmp[770116] "expr temp" "maybe param" "maybe type" "temp"
    (770119 'move' call_tmp[770116](770011 'call resolves' c">" call_tmp[770106] call_tmp[770111]))
    unknown call_tmp[770121] "expr temp" "maybe param" "maybe type" "temp"
    (770124 'move' call_tmp[770121](770013 call _alignment _mt[243] _arg1[769959]))
    unknown call_tmp[770126] "expr temp" "maybe param" "maybe type" "temp"
    (770129 'move' call_tmp[770126](770017 call _alignment _mt[243] _arg2[769960]))
    unknown call_tmp[770131] "expr temp" "maybe param" "maybe type" "temp"
    (770134 'move' call_tmp[770131](770021 'call resolves' c">" call_tmp[770121] call_tmp[770126]))
    unknown call_tmp[770136] "expr temp" "maybe param" "maybe type" "temp"
    (770139 'move' call_tmp[770136](770023 call _aligned _mt[243] _arg1[769959]))
    unknown call_tmp[770141] "expr temp" "maybe param" "maybe type" "temp"
    (770144 'move' call_tmp[770141](770027 call _aligned _mt[243] _arg2[769960]))
    unknown call_tmp[770146] "expr temp" "maybe param" "maybe type" "temp"
    (770149 'move' call_tmp[770146](770031 'call resolves' c">" call_tmp[770136] call_tmp[770141]))
    unknown call_tmp[770151] "expr temp" "maybe param" "maybe type" "temp"
    (770154 'move' call_tmp[770151](770033 '&' call_tmp[770056] call_tmp[770071] call_tmp[770086] call_tmp[770101] call_tmp[770116] call_tmp[770131] call_tmp[770146]))
    (770044 'move' ret[770039](770043 'deref' call_tmp[770151]))
    (770041 return ret[770039])
  }
  function >[769945](arg _arg1[769947]:range[64319](?), arg _arg2[769948]:range[64319](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[770378]:bool[10] "RVV" "temp"
    unknown call_tmp[770455] "expr temp" "maybe param" "maybe type" "temp"
    (770458 'move' call_tmp[770455](770162 call boundedType _mt[243] _arg1[769947]))
    unknown call_tmp[770460] "expr temp" "maybe param" "maybe type" "temp"
    (770463 'move' call_tmp[770460](770166 call boundedType _mt[243] _arg2[769948]))
    unknown call_tmp[770465] "expr temp" "maybe param" "maybe type" "temp"
    (770468 'move' call_tmp[770465](770170 call > call_tmp[770455] call_tmp[770460]))
    if call_tmp[770465]
    {
      (770383 'move' ret[770378](770382 'deref' 1))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770470] "expr temp" "maybe param" "maybe type" "temp"
    (770473 'move' call_tmp[770470](770176 call boundedType _mt[243] _arg1[769947]))
    unknown call_tmp[770475] "expr temp" "maybe param" "maybe type" "temp"
    (770478 'move' call_tmp[770475](770180 call boundedType _mt[243] _arg2[769948]))
    unknown call_tmp[770480] "expr temp" "maybe param" "maybe type" "temp"
    (770483 'move' call_tmp[770480](770184 call < call_tmp[770470] call_tmp[770475]))
    if call_tmp[770480]
    {
      (770388 'move' ret[770378](770387 'deref' 0))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770485] "expr temp" "maybe param" "maybe type" "temp"
    (770488 'move' call_tmp[770485](770190 call stridable _mt[243] _arg1[769947]))
    unknown call_tmp[770490] "expr temp" "maybe param" "maybe type" "temp"
    (770493 'move' call_tmp[770490](770194 call stridable _mt[243] _arg2[769948]))
    unknown call_tmp[770495] "expr temp" "maybe param" "maybe type" "temp"
    (770498 'move' call_tmp[770495](770198 call > call_tmp[770485] call_tmp[770490]))
    if call_tmp[770495]
    {
      (770393 'move' ret[770378](770392 'deref' 1))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770500] "expr temp" "maybe param" "maybe type" "temp"
    (770503 'move' call_tmp[770500](770204 call stridable _mt[243] _arg1[769947]))
    unknown call_tmp[770505] "expr temp" "maybe param" "maybe type" "temp"
    (770508 'move' call_tmp[770505](770208 call stridable _mt[243] _arg2[769948]))
    unknown call_tmp[770510] "expr temp" "maybe param" "maybe type" "temp"
    (770513 'move' call_tmp[770510](770212 call < call_tmp[770500] call_tmp[770505]))
    if call_tmp[770510]
    {
      (770398 'move' ret[770378](770397 'deref' 0))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770515] "expr temp" "maybe param" "maybe type" "temp"
    (770518 'move' call_tmp[770515](770218 call _low _mt[243] _arg1[769947]))
    unknown call_tmp[770520] "expr temp" "maybe param" "maybe type" "temp"
    (770523 'move' call_tmp[770520](770222 call _low _mt[243] _arg2[769948]))
    unknown call_tmp[770525] "expr temp" "maybe param" "maybe type" "temp"
    (770528 'move' call_tmp[770525](770226 call > call_tmp[770515] call_tmp[770520]))
    if call_tmp[770525]
    {
      (770403 'move' ret[770378](770402 'deref' 1))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770530] "expr temp" "maybe param" "maybe type" "temp"
    (770533 'move' call_tmp[770530](770232 call _low _mt[243] _arg1[769947]))
    unknown call_tmp[770535] "expr temp" "maybe param" "maybe type" "temp"
    (770538 'move' call_tmp[770535](770236 call _low _mt[243] _arg2[769948]))
    unknown call_tmp[770540] "expr temp" "maybe param" "maybe type" "temp"
    (770543 'move' call_tmp[770540](770240 call < call_tmp[770530] call_tmp[770535]))
    if call_tmp[770540]
    {
      (770408 'move' ret[770378](770407 'deref' 0))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770545] "expr temp" "maybe param" "maybe type" "temp"
    (770548 'move' call_tmp[770545](770246 call _high _mt[243] _arg1[769947]))
    unknown call_tmp[770550] "expr temp" "maybe param" "maybe type" "temp"
    (770553 'move' call_tmp[770550](770250 call _high _mt[243] _arg2[769948]))
    unknown call_tmp[770555] "expr temp" "maybe param" "maybe type" "temp"
    (770558 'move' call_tmp[770555](770254 call > call_tmp[770545] call_tmp[770550]))
    if call_tmp[770555]
    {
      (770413 'move' ret[770378](770412 'deref' 1))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770560] "expr temp" "maybe param" "maybe type" "temp"
    (770563 'move' call_tmp[770560](770260 call _high _mt[243] _arg1[769947]))
    unknown call_tmp[770565] "expr temp" "maybe param" "maybe type" "temp"
    (770568 'move' call_tmp[770565](770264 call _high _mt[243] _arg2[769948]))
    unknown call_tmp[770570] "expr temp" "maybe param" "maybe type" "temp"
    (770573 'move' call_tmp[770570](770268 call < call_tmp[770560] call_tmp[770565]))
    if call_tmp[770570]
    {
      (770418 'move' ret[770378](770417 'deref' 0))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770575] "expr temp" "maybe param" "maybe type" "temp"
    (770578 'move' call_tmp[770575](770274 call _stride _mt[243] _arg1[769947]))
    unknown call_tmp[770580] "expr temp" "maybe param" "maybe type" "temp"
    (770583 'move' call_tmp[770580](770278 call _stride _mt[243] _arg2[769948]))
    unknown call_tmp[770585] "expr temp" "maybe param" "maybe type" "temp"
    (770588 'move' call_tmp[770585](770282 call > call_tmp[770575] call_tmp[770580]))
    if call_tmp[770585]
    {
      (770423 'move' ret[770378](770422 'deref' 1))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770590] "expr temp" "maybe param" "maybe type" "temp"
    (770593 'move' call_tmp[770590](770288 call _stride _mt[243] _arg1[769947]))
    unknown call_tmp[770595] "expr temp" "maybe param" "maybe type" "temp"
    (770598 'move' call_tmp[770595](770292 call _stride _mt[243] _arg2[769948]))
    unknown call_tmp[770600] "expr temp" "maybe param" "maybe type" "temp"
    (770603 'move' call_tmp[770600](770296 call < call_tmp[770590] call_tmp[770595]))
    if call_tmp[770600]
    {
      (770428 'move' ret[770378](770427 'deref' 0))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770605] "expr temp" "maybe param" "maybe type" "temp"
    (770608 'move' call_tmp[770605](770302 call _alignment _mt[243] _arg1[769947]))
    unknown call_tmp[770610] "expr temp" "maybe param" "maybe type" "temp"
    (770613 'move' call_tmp[770610](770306 call _alignment _mt[243] _arg2[769948]))
    unknown call_tmp[770615] "expr temp" "maybe param" "maybe type" "temp"
    (770618 'move' call_tmp[770615](770310 call > call_tmp[770605] call_tmp[770610]))
    if call_tmp[770615]
    {
      (770433 'move' ret[770378](770432 'deref' 1))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770620] "expr temp" "maybe param" "maybe type" "temp"
    (770623 'move' call_tmp[770620](770316 call _alignment _mt[243] _arg1[769947]))
    unknown call_tmp[770625] "expr temp" "maybe param" "maybe type" "temp"
    (770628 'move' call_tmp[770625](770320 call _alignment _mt[243] _arg2[769948]))
    unknown call_tmp[770630] "expr temp" "maybe param" "maybe type" "temp"
    (770633 'move' call_tmp[770630](770324 call < call_tmp[770620] call_tmp[770625]))
    if call_tmp[770630]
    {
      (770438 'move' ret[770378](770437 'deref' 0))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770635] "expr temp" "maybe param" "maybe type" "temp"
    (770638 'move' call_tmp[770635](770330 call _aligned _mt[243] _arg1[769947]))
    unknown call_tmp[770640] "expr temp" "maybe param" "maybe type" "temp"
    (770643 'move' call_tmp[770640](770334 call _aligned _mt[243] _arg2[769948]))
    unknown call_tmp[770645] "expr temp" "maybe param" "maybe type" "temp"
    (770648 'move' call_tmp[770645](770338 call > call_tmp[770635] call_tmp[770640]))
    if call_tmp[770645]
    {
      (770443 'move' ret[770378](770442 'deref' 1))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    unknown call_tmp[770650] "expr temp" "maybe param" "maybe type" "temp"
    (770653 'move' call_tmp[770650](770344 call _aligned _mt[243] _arg1[769947]))
    unknown call_tmp[770655] "expr temp" "maybe param" "maybe type" "temp"
    (770658 'move' call_tmp[770655](770348 call _aligned _mt[243] _arg2[769948]))
    unknown call_tmp[770660] "expr temp" "maybe param" "maybe type" "temp"
    (770663 'move' call_tmp[770660](770352 call < call_tmp[770650] call_tmp[770655]))
    if call_tmp[770660]
    {
      (770448 'move' ret[770378](770447 'deref' 0))
      gotoReturn _end_>[770376] _end_>[770376]
    }
    (770453 'move' ret[770378](770452 'deref' 0))
    label _end_>[770376]
    (770380 return ret[770378])
  }
  where {
    unknown call_tmp[770665] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (770668 'move' call_tmp[770665](769951 'typeof' _arg1[769947]))
    unknown call_tmp[770670] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (770673 'move' call_tmp[770670](769953 'typeof' _arg2[769948]))
    unknown call_tmp[770675] "expr temp" "maybe param" "maybe type" "temp"
    (770678 'move' call_tmp[770675](769955 call == call_tmp[770665] call_tmp[770670]))
    unknown call_tmp[770680] "expr temp" "maybe param" "maybe type" "temp"
    (770683 'move' call_tmp[770680](770156 call chpl_fields_are_comparable[769957] _arg1[769947] _arg2[769948]))
    (770160 '&' call_tmp[770675] call_tmp[770680])
  }
  function chpl_fields_are_comparable[770697](arg _arg1[770699]:range[64319](?), arg _arg2[770700]:range[64319](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[770779]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[770786] "expr temp" "maybe param" "maybe type" "temp"
    (770789 'move' call_tmp[770786](770703 call boundedType _mt[243] _arg1[770699]))
    unknown call_tmp[770791] "expr temp" "maybe param" "maybe type" "temp"
    (770794 'move' call_tmp[770791](770707 call boundedType _mt[243] _arg2[770700]))
    unknown call_tmp[770796] "expr temp" "maybe param" "maybe type" "temp"
    (770799 'move' call_tmp[770796](770711 'call resolves' c">=" call_tmp[770786] call_tmp[770791]))
    unknown call_tmp[770801] "expr temp" "maybe param" "maybe type" "temp"
    (770804 'move' call_tmp[770801](770713 call stridable _mt[243] _arg1[770699]))
    unknown call_tmp[770806] "expr temp" "maybe param" "maybe type" "temp"
    (770809 'move' call_tmp[770806](770717 call stridable _mt[243] _arg2[770700]))
    unknown call_tmp[770811] "expr temp" "maybe param" "maybe type" "temp"
    (770814 'move' call_tmp[770811](770721 'call resolves' c">=" call_tmp[770801] call_tmp[770806]))
    unknown call_tmp[770816] "expr temp" "maybe param" "maybe type" "temp"
    (770819 'move' call_tmp[770816](770723 call _low _mt[243] _arg1[770699]))
    unknown call_tmp[770821] "expr temp" "maybe param" "maybe type" "temp"
    (770824 'move' call_tmp[770821](770727 call _low _mt[243] _arg2[770700]))
    unknown call_tmp[770826] "expr temp" "maybe param" "maybe type" "temp"
    (770829 'move' call_tmp[770826](770731 'call resolves' c">=" call_tmp[770816] call_tmp[770821]))
    unknown call_tmp[770831] "expr temp" "maybe param" "maybe type" "temp"
    (770834 'move' call_tmp[770831](770733 call _high _mt[243] _arg1[770699]))
    unknown call_tmp[770836] "expr temp" "maybe param" "maybe type" "temp"
    (770839 'move' call_tmp[770836](770737 call _high _mt[243] _arg2[770700]))
    unknown call_tmp[770841] "expr temp" "maybe param" "maybe type" "temp"
    (770844 'move' call_tmp[770841](770741 'call resolves' c">=" call_tmp[770831] call_tmp[770836]))
    unknown call_tmp[770846] "expr temp" "maybe param" "maybe type" "temp"
    (770849 'move' call_tmp[770846](770743 call _stride _mt[243] _arg1[770699]))
    unknown call_tmp[770851] "expr temp" "maybe param" "maybe type" "temp"
    (770854 'move' call_tmp[770851](770747 call _stride _mt[243] _arg2[770700]))
    unknown call_tmp[770856] "expr temp" "maybe param" "maybe type" "temp"
    (770859 'move' call_tmp[770856](770751 'call resolves' c">=" call_tmp[770846] call_tmp[770851]))
    unknown call_tmp[770861] "expr temp" "maybe param" "maybe type" "temp"
    (770864 'move' call_tmp[770861](770753 call _alignment _mt[243] _arg1[770699]))
    unknown call_tmp[770866] "expr temp" "maybe param" "maybe type" "temp"
    (770869 'move' call_tmp[770866](770757 call _alignment _mt[243] _arg2[770700]))
    unknown call_tmp[770871] "expr temp" "maybe param" "maybe type" "temp"
    (770874 'move' call_tmp[770871](770761 'call resolves' c">=" call_tmp[770861] call_tmp[770866]))
    unknown call_tmp[770876] "expr temp" "maybe param" "maybe type" "temp"
    (770879 'move' call_tmp[770876](770763 call _aligned _mt[243] _arg1[770699]))
    unknown call_tmp[770881] "expr temp" "maybe param" "maybe type" "temp"
    (770884 'move' call_tmp[770881](770767 call _aligned _mt[243] _arg2[770700]))
    unknown call_tmp[770886] "expr temp" "maybe param" "maybe type" "temp"
    (770889 'move' call_tmp[770886](770771 'call resolves' c">=" call_tmp[770876] call_tmp[770881]))
    unknown call_tmp[770891] "expr temp" "maybe param" "maybe type" "temp"
    (770894 'move' call_tmp[770891](770773 '&' call_tmp[770796] call_tmp[770811] call_tmp[770826] call_tmp[770841] call_tmp[770856] call_tmp[770871] call_tmp[770886]))
    (770784 'move' ret[770779](770783 'deref' call_tmp[770891]))
    (770781 return ret[770779])
  }
  function >=[770685](arg _arg1[770687]:range[64319](?), arg _arg2[770688]:range[64319](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[771118]:bool[10] "RVV" "temp"
    unknown call_tmp[771195] "expr temp" "maybe param" "maybe type" "temp"
    (771198 'move' call_tmp[771195](770902 call boundedType _mt[243] _arg1[770687]))
    unknown call_tmp[771200] "expr temp" "maybe param" "maybe type" "temp"
    (771203 'move' call_tmp[771200](770906 call boundedType _mt[243] _arg2[770688]))
    unknown call_tmp[771205] "expr temp" "maybe param" "maybe type" "temp"
    (771208 'move' call_tmp[771205](770910 call > call_tmp[771195] call_tmp[771200]))
    if call_tmp[771205]
    {
      (771123 'move' ret[771118](771122 'deref' 1))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771210] "expr temp" "maybe param" "maybe type" "temp"
    (771213 'move' call_tmp[771210](770916 call boundedType _mt[243] _arg1[770687]))
    unknown call_tmp[771215] "expr temp" "maybe param" "maybe type" "temp"
    (771218 'move' call_tmp[771215](770920 call boundedType _mt[243] _arg2[770688]))
    unknown call_tmp[771220] "expr temp" "maybe param" "maybe type" "temp"
    (771223 'move' call_tmp[771220](770924 call < call_tmp[771210] call_tmp[771215]))
    if call_tmp[771220]
    {
      (771128 'move' ret[771118](771127 'deref' 0))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771225] "expr temp" "maybe param" "maybe type" "temp"
    (771228 'move' call_tmp[771225](770930 call stridable _mt[243] _arg1[770687]))
    unknown call_tmp[771230] "expr temp" "maybe param" "maybe type" "temp"
    (771233 'move' call_tmp[771230](770934 call stridable _mt[243] _arg2[770688]))
    unknown call_tmp[771235] "expr temp" "maybe param" "maybe type" "temp"
    (771238 'move' call_tmp[771235](770938 call > call_tmp[771225] call_tmp[771230]))
    if call_tmp[771235]
    {
      (771133 'move' ret[771118](771132 'deref' 1))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771240] "expr temp" "maybe param" "maybe type" "temp"
    (771243 'move' call_tmp[771240](770944 call stridable _mt[243] _arg1[770687]))
    unknown call_tmp[771245] "expr temp" "maybe param" "maybe type" "temp"
    (771248 'move' call_tmp[771245](770948 call stridable _mt[243] _arg2[770688]))
    unknown call_tmp[771250] "expr temp" "maybe param" "maybe type" "temp"
    (771253 'move' call_tmp[771250](770952 call < call_tmp[771240] call_tmp[771245]))
    if call_tmp[771250]
    {
      (771138 'move' ret[771118](771137 'deref' 0))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771255] "expr temp" "maybe param" "maybe type" "temp"
    (771258 'move' call_tmp[771255](770958 call _low _mt[243] _arg1[770687]))
    unknown call_tmp[771260] "expr temp" "maybe param" "maybe type" "temp"
    (771263 'move' call_tmp[771260](770962 call _low _mt[243] _arg2[770688]))
    unknown call_tmp[771265] "expr temp" "maybe param" "maybe type" "temp"
    (771268 'move' call_tmp[771265](770966 call > call_tmp[771255] call_tmp[771260]))
    if call_tmp[771265]
    {
      (771143 'move' ret[771118](771142 'deref' 1))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771270] "expr temp" "maybe param" "maybe type" "temp"
    (771273 'move' call_tmp[771270](770972 call _low _mt[243] _arg1[770687]))
    unknown call_tmp[771275] "expr temp" "maybe param" "maybe type" "temp"
    (771278 'move' call_tmp[771275](770976 call _low _mt[243] _arg2[770688]))
    unknown call_tmp[771280] "expr temp" "maybe param" "maybe type" "temp"
    (771283 'move' call_tmp[771280](770980 call < call_tmp[771270] call_tmp[771275]))
    if call_tmp[771280]
    {
      (771148 'move' ret[771118](771147 'deref' 0))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771285] "expr temp" "maybe param" "maybe type" "temp"
    (771288 'move' call_tmp[771285](770986 call _high _mt[243] _arg1[770687]))
    unknown call_tmp[771290] "expr temp" "maybe param" "maybe type" "temp"
    (771293 'move' call_tmp[771290](770990 call _high _mt[243] _arg2[770688]))
    unknown call_tmp[771295] "expr temp" "maybe param" "maybe type" "temp"
    (771298 'move' call_tmp[771295](770994 call > call_tmp[771285] call_tmp[771290]))
    if call_tmp[771295]
    {
      (771153 'move' ret[771118](771152 'deref' 1))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771300] "expr temp" "maybe param" "maybe type" "temp"
    (771303 'move' call_tmp[771300](771000 call _high _mt[243] _arg1[770687]))
    unknown call_tmp[771305] "expr temp" "maybe param" "maybe type" "temp"
    (771308 'move' call_tmp[771305](771004 call _high _mt[243] _arg2[770688]))
    unknown call_tmp[771310] "expr temp" "maybe param" "maybe type" "temp"
    (771313 'move' call_tmp[771310](771008 call < call_tmp[771300] call_tmp[771305]))
    if call_tmp[771310]
    {
      (771158 'move' ret[771118](771157 'deref' 0))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771315] "expr temp" "maybe param" "maybe type" "temp"
    (771318 'move' call_tmp[771315](771014 call _stride _mt[243] _arg1[770687]))
    unknown call_tmp[771320] "expr temp" "maybe param" "maybe type" "temp"
    (771323 'move' call_tmp[771320](771018 call _stride _mt[243] _arg2[770688]))
    unknown call_tmp[771325] "expr temp" "maybe param" "maybe type" "temp"
    (771328 'move' call_tmp[771325](771022 call > call_tmp[771315] call_tmp[771320]))
    if call_tmp[771325]
    {
      (771163 'move' ret[771118](771162 'deref' 1))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771330] "expr temp" "maybe param" "maybe type" "temp"
    (771333 'move' call_tmp[771330](771028 call _stride _mt[243] _arg1[770687]))
    unknown call_tmp[771335] "expr temp" "maybe param" "maybe type" "temp"
    (771338 'move' call_tmp[771335](771032 call _stride _mt[243] _arg2[770688]))
    unknown call_tmp[771340] "expr temp" "maybe param" "maybe type" "temp"
    (771343 'move' call_tmp[771340](771036 call < call_tmp[771330] call_tmp[771335]))
    if call_tmp[771340]
    {
      (771168 'move' ret[771118](771167 'deref' 0))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771345] "expr temp" "maybe param" "maybe type" "temp"
    (771348 'move' call_tmp[771345](771042 call _alignment _mt[243] _arg1[770687]))
    unknown call_tmp[771350] "expr temp" "maybe param" "maybe type" "temp"
    (771353 'move' call_tmp[771350](771046 call _alignment _mt[243] _arg2[770688]))
    unknown call_tmp[771355] "expr temp" "maybe param" "maybe type" "temp"
    (771358 'move' call_tmp[771355](771050 call > call_tmp[771345] call_tmp[771350]))
    if call_tmp[771355]
    {
      (771173 'move' ret[771118](771172 'deref' 1))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771360] "expr temp" "maybe param" "maybe type" "temp"
    (771363 'move' call_tmp[771360](771056 call _alignment _mt[243] _arg1[770687]))
    unknown call_tmp[771365] "expr temp" "maybe param" "maybe type" "temp"
    (771368 'move' call_tmp[771365](771060 call _alignment _mt[243] _arg2[770688]))
    unknown call_tmp[771370] "expr temp" "maybe param" "maybe type" "temp"
    (771373 'move' call_tmp[771370](771064 call < call_tmp[771360] call_tmp[771365]))
    if call_tmp[771370]
    {
      (771178 'move' ret[771118](771177 'deref' 0))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771375] "expr temp" "maybe param" "maybe type" "temp"
    (771378 'move' call_tmp[771375](771070 call _aligned _mt[243] _arg1[770687]))
    unknown call_tmp[771380] "expr temp" "maybe param" "maybe type" "temp"
    (771383 'move' call_tmp[771380](771074 call _aligned _mt[243] _arg2[770688]))
    unknown call_tmp[771385] "expr temp" "maybe param" "maybe type" "temp"
    (771388 'move' call_tmp[771385](771078 call > call_tmp[771375] call_tmp[771380]))
    if call_tmp[771385]
    {
      (771183 'move' ret[771118](771182 'deref' 1))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    unknown call_tmp[771390] "expr temp" "maybe param" "maybe type" "temp"
    (771393 'move' call_tmp[771390](771084 call _aligned _mt[243] _arg1[770687]))
    unknown call_tmp[771395] "expr temp" "maybe param" "maybe type" "temp"
    (771398 'move' call_tmp[771395](771088 call _aligned _mt[243] _arg2[770688]))
    unknown call_tmp[771400] "expr temp" "maybe param" "maybe type" "temp"
    (771403 'move' call_tmp[771400](771092 call < call_tmp[771390] call_tmp[771395]))
    if call_tmp[771400]
    {
      (771188 'move' ret[771118](771187 'deref' 0))
      gotoReturn _end_>=[771116] _end_>=[771116]
    }
    (771193 'move' ret[771118](771192 'deref' 1))
    label _end_>=[771116]
    (771120 return ret[771118])
  }
  where {
    unknown call_tmp[771405] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (771408 'move' call_tmp[771405](770691 'typeof' _arg1[770687]))
    unknown call_tmp[771410] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (771413 'move' call_tmp[771410](770693 'typeof' _arg2[770688]))
    unknown call_tmp[771415] "expr temp" "maybe param" "maybe type" "temp"
    (771418 'move' call_tmp[771415](770695 call == call_tmp[771405] call_tmp[771410]))
    unknown call_tmp[771420] "expr temp" "maybe param" "maybe type" "temp"
    (771423 'move' call_tmp[771420](770896 call chpl_fields_are_comparable[770697] _arg1[770687] _arg2[770688]))
    (770900 '&' call_tmp[771415] call_tmp[771420])
  }
  type range[64319](?) unknown idxType[64223] "type variable" int(64)[13] unknown boundedType[64233] "param" bounded[64208] BoundedRangeType[64216] unknown stridable[64239] "param" 0 bool[10] unknown _low[64247](64246 call chpl__idxTypeToIntIdxType idxType[64223]) unknown _high[64255](64254 call chpl__idxTypeToIntIdxType idxType[64223]) unknown _stride[64268](64265 IfExpr  stridable[64239] then
  { scopeless
    (64263 call chpl__rangeStrideType idxType[64223])
  } else
  { scopeless
    nothing[7]
  } ) unknown _alignment[64281](64278 IfExpr  stridable[64239] then
  { scopeless
    (64276 call chpl__idxTypeToIntIdxType idxType[64223])
  } else
  { scopeless
    nothing[7]
  } ) unknown _aligned[64291](64288 IfExpr  stridable[64239] then
  { scopeless
    bool[10]
  } else
  { scopeless
    nothing[7]
  } )
  function range[64319](?).intIdxType[64333](arg _mt[64338]:_MT[238], arg this[64335]:range[64319](?) :
  range[64319](?)) type : _unknown[51] "method" "no parens"
  {
    unknown ret[509037] "RVV" "temp" "type variable"
    unknown call_tmp[616279] "expr temp" "maybe param" "maybe type" "temp"
    (616282 'move' call_tmp[616279](373737 call idxType _mt[243] this[64335]))
    unknown call_tmp[616284] "expr temp" "maybe param" "maybe type" "temp"
    (616287 'move' call_tmp[616284](64343 call chpl__idxTypeToIntIdxType call_tmp[616279]))
    (509042 'move' ret[509037](509041 'deref' call_tmp[616284]))
    (509039 return ret[509037])
  }
  function range[64319](?).init[64356](arg _mt[64421]:_MT[238], ref arg this[64418]:range[64319](?) :
  range[64319](?), arg idxType[64353]:_any[178](?) =
  int(64)[13], param arg boundedType[64363]:BoundedRangeType[64216] =
  bounded[64208], param arg stridable[64369]:bool[10] =
  0, arg _low[64379] :
  idxType[64353] =
  (64378 call chpl__intToIdx idxType[64353] 1), arg _high[64389] :
  idxType[64353] =
  (64388 call chpl__intToIdx idxType[64353] 0), arg _stride[64398] :
  (64396 call chpl__rangeStrideType idxType[64353]) =
  1, arg _alignment[64408] :
  idxType[64353] =
  (64407 call chpl__intToIdx idxType[64353] 0), arg _aligned[64414]:bool[10] =
  0) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[454836] "temp" "type variable"
    (454838 'move' tmp[454836] idxType[64353])
    (454840 'init field' this[64418] c"idxType" tmp[454836])
    unknown call_tmp[616289] "expr temp" "maybe param" "maybe type" "temp"
    (616292 'move' call_tmp[616289](454845 call _cast BoundedRangeType[64216] boundedType[64363]))
    (454847 'init field' this[64418] c"boundedType" call_tmp[616289])
    (475269 'end of statement')
    unknown call_tmp[616294] "expr temp" "maybe param" "maybe type" "temp"
    (616297 'move' call_tmp[616294](454851 call _cast bool[10] stridable[64369]))
    (454853 'init field' this[64418] c"stridable" call_tmp[616294])
    (475270 'end of statement')
    unknown call_tmp[616299] "maybe param" "maybe type" "temp"
    (616302 'move' call_tmp[616299](64459 call chpl__idxToInt _low[64379]))
    unknown call_tmp[616304] "expr temp" "maybe param" "maybe type" "temp"
    (616307 'move' call_tmp[616304](454867 '.v' this[64418] c"idxType"))
    unknown call_tmp[616309] "maybe param" "maybe type" "temp"
    (616312 'move' call_tmp[616309](454859 call chpl__idxTypeToIntIdxType call_tmp[616304]))
    unknown tmp[454856] "temp"
    (454861 'init var' tmp[454856] call_tmp[616299] call_tmp[616309])
    (454863 'init field' this[64418] c"_low" tmp[454856])
    (475271 'end of statement')
    unknown call_tmp[616314] "maybe param" "maybe type" "temp"
    (616317 'move' call_tmp[616314](64472 call chpl__idxToInt _high[64389]))
    unknown call_tmp[616319] "expr temp" "maybe param" "maybe type" "temp"
    (616322 'move' call_tmp[616319](454881 '.v' this[64418] c"idxType"))
    unknown call_tmp[616324] "maybe param" "maybe type" "temp"
    (616327 'move' call_tmp[616324](454873 call chpl__idxTypeToIntIdxType call_tmp[616319]))
    unknown tmp[454870] "temp"
    (454875 'init var' tmp[454870] call_tmp[616314] call_tmp[616324])
    (454877 'init field' this[64418] c"_high" tmp[454870])
    (475272 'end of statement')
    unknown tmp[454884] "temp"
    unknown tmp[555405] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555406] "maybe param" "temp"
    unknown call_tmp[616329] "expr temp" "maybe param" "maybe type" "temp"
    (616332 'move' call_tmp[616329](454900 '.v' this[64418] c"stridable"))
    (555411 'move' tmp[555406](555409 call _cond_test call_tmp[616329]))
    if tmp[555406]
    {
      unknown tmp[555413] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616334] "expr temp" "maybe param" "maybe type" "temp"
      (616337 'move' call_tmp[616334](454903 '.v' this[64418] c"idxType"))
      (555415 'move' tmp[555413](454889 call chpl__rangeStrideType call_tmp[616334]))
      (555420 'move' tmp[555405](555417 '_paramFoldLogical' tmp[555406] tmp[555413]))
    }
    {
      (555425 'move' tmp[555405](555422 '_paramFoldLogical' tmp[555406] nothing[7]))
    }
    (454894 'default init var' tmp[454884] tmp[555405])
    (454896 '.=' this[64418] c"_stride" tmp[454884])
    (475273 'end of statement')
    unknown tmp[454906] "temp"
    unknown tmp[555432] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555433] "maybe param" "temp"
    unknown call_tmp[616339] "expr temp" "maybe param" "maybe type" "temp"
    (616342 'move' call_tmp[616339](454922 '.v' this[64418] c"stridable"))
    (555438 'move' tmp[555433](555436 call _cond_test call_tmp[616339]))
    if tmp[555433]
    {
      unknown tmp[555440] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616344] "expr temp" "maybe param" "maybe type" "temp"
      (616347 'move' call_tmp[616344](454925 '.v' this[64418] c"idxType"))
      (555442 'move' tmp[555440](454911 call chpl__idxTypeToIntIdxType call_tmp[616344]))
      (555447 'move' tmp[555432](555444 '_paramFoldLogical' tmp[555433] tmp[555440]))
    }
    {
      (555452 'move' tmp[555432](555449 '_paramFoldLogical' tmp[555433] nothing[7]))
    }
    (454916 'default init var' tmp[454906] tmp[555432])
    (454918 '.=' this[64418] c"_alignment" tmp[454906])
    (475274 'end of statement')
    unknown tmp[454928] "temp"
    unknown tmp[555459] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555460] "maybe param" "temp"
    unknown call_tmp[616349] "expr temp" "maybe param" "maybe type" "temp"
    (616352 'move' call_tmp[616349](454942 '.v' this[64418] c"stridable"))
    (555465 'move' tmp[555460](555463 call _cond_test call_tmp[616349]))
    if tmp[555460]
    {
      (555470 'move' tmp[555459](555467 '_paramFoldLogical' tmp[555460] bool[10]))
    }
    {
      (555475 'move' tmp[555459](555472 '_paramFoldLogical' tmp[555460] nothing[7]))
    }
    (454936 'default init var' tmp[454928] tmp[555459])
    (454938 '.=' this[64418] c"_aligned" tmp[454928])
    (475275 'end of statement')
    unknown call_tmp[616354] "expr temp" "maybe param" "maybe type" "temp"
    (616357 'move' call_tmp[616354](64518 call _cond_test stridable[64369]))
    if call_tmp[616354]
    {
      unknown call_tmp[616361] "expr temp" "maybe param" "maybe type" "temp"
      (616364 'move' call_tmp[616361](64487 call _stride _mt[243] this[64418]))
      (64491 call = call_tmp[616361] _stride[64398])
      (475276 'end of statement')
      unknown call_tmp[616368] "expr temp" "maybe param" "maybe type" "temp"
      (616371 'move' call_tmp[616368](64498 call _alignment _mt[243] this[64418]))
      unknown call_tmp[616373] "expr temp" "maybe param" "maybe type" "temp"
      (616376 'move' call_tmp[616373](64504 call chpl__idxToInt _alignment[64408]))
      (64505 call = call_tmp[616368] call_tmp[616373])
      (475277 'end of statement')
      unknown call_tmp[616380] "expr temp" "maybe param" "maybe type" "temp"
      (616383 'move' call_tmp[616380](64511 call _aligned _mt[243] this[64418]))
      (64515 call = call_tmp[616380] _aligned[64414])
    }
    unknown tmp[419231] "maybe param" "temp"
    (419242 'move' tmp[419231](64523 call ! stridable[64369]))
    unknown call_tmp[616385] "expr temp" "maybe param" "maybe type" "temp"
    (616388 'move' call_tmp[616385](419244 call _cond_invalid tmp[419231]))
    if call_tmp[616385]
    {
      (419247 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555482] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555483] "maybe param" "temp"
    unknown call_tmp[616390] "expr temp" "maybe param" "maybe type" "temp"
    (616393 'move' call_tmp[616390](419232 call isTrue tmp[419231]))
    (555488 'move' tmp[555483](555486 call _cond_test call_tmp[616390]))
    if tmp[555483]
    {
      unknown tmp[555490] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555492 'move' tmp[555490](419235 call isTrue 1))
      (555497 'move' tmp[555482](555494 '_paramFoldLogical' tmp[555483] tmp[555490]))
    }
    {
      (555502 'move' tmp[555482](555499 '_paramFoldLogical' tmp[555483] 0))
    }
    unknown call_tmp[616395] "expr temp" "maybe param" "maybe type" "temp"
    (616398 'move' call_tmp[616395](64536 call _cond_test tmp[555482]))
    if call_tmp[616395]
    {
      unknown call_tmp[616400] "expr temp" "maybe param" "maybe type" "temp"
      (616403 'move' call_tmp[616400](64531 call == _stride[64398] 1))
      (64534 call assert call_tmp[616400])
    }
    (509044 return _void[55])
  }
  function _isAnyNothing[64549](arg args[64546]:_any[178](?) ...) param : _unknown[51] "private"
  {
    unknown ret[509048] "RVV" "param" "temp"
    {
      unknown i[64579] "dead at end of block" "insert auto destroy"
      (541030 'init var' i[64579] 0)
      (475281 'end of statement')
      unknown tmp[64580] "maybe param" "temp"
      unknown call_tmp[616407] "expr temp" "maybe param" "maybe type" "temp"
      (616410 'move' call_tmp[616407](64554 call size _mt[243] args[64546]))
      unknown call_tmp[616412] "expr temp" "maybe param" "maybe type" "temp"
      (616415 'move' call_tmp[616412](64558 call - call_tmp[616407] 1))
      (64592 'move' tmp[64580](64590 call chpl_compute_low_param_loop_bound 0 call_tmp[616412]))
      unknown tmp[64581] "maybe param" "temp"
      unknown call_tmp[616419] "expr temp" "maybe param" "maybe type" "temp"
      (616422 'move' call_tmp[616419](64599 call size _mt[243] args[64546]))
      unknown call_tmp[616424] "expr temp" "maybe param" "maybe type" "temp"
      (616427 'move' call_tmp[616424](64597 call - call_tmp[616419] 1))
      (64605 'move' tmp[64581](64603 call chpl_compute_high_param_loop_bound 0 call_tmp[616424]))
      unknown tmp[64582] "maybe param" "temp"
      (64608 'move' tmp[64582] 1)
      ParamForLoop[64610]
      { i[64579] tmp[64580] tmp[64581] tmp[64582]
        {
          { scopeless type
            unknown call_type_tmp[491884] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[616429] "expr temp" "maybe param" "maybe type" "temp"
            (616432 'move' call_tmp[616429](64566 call args[64546] i[64579]))
            (491888 'move' call_type_tmp[491884](64567 'typeof' call_tmp[616429]))
          }
          unknown call_tmp[616434] "expr temp" "maybe param" "maybe type" "temp"
          (616437 'move' call_tmp[616434](64569 call isNothingType call_type_tmp[491884]))
          unknown call_tmp[616439] "expr temp" "maybe param" "maybe type" "temp"
          (616442 'move' call_tmp[616439](64573 call _cond_test call_tmp[616434]))
          if call_tmp[616439]
          {
            (509054 'move' ret[509048](509053 'coerce' 1 bool[10]))
            gotoReturn _end__isAnyNothing[509046] _end__isAnyNothing[509046]
          }
        }
      }
      label _unused_continueLabel[64584]
      label _breakLabel[64583]
    }
    (509060 'move' ret[509048](509059 'coerce' 0 bool[10]))
    label _end__isAnyNothing[509046]
    (509050 return ret[509048])
  }
  { scopeless type
    bool[10]
  }
  function range[64319](?).init[64633](arg _mt[64679]:_MT[238], ref arg this[64676]:range[64319](?) :
  range[64319](?), arg idxType[64630]:_any[178](?) =
  int(64)[13], param arg boundedType[64640]:BoundedRangeType[64216] =
  bounded[64208], param arg stridable[64646]:bool[10] =
  0, arg _low[64656] :
  idxType[64630] =
  (64655 call chpl__intToIdx idxType[64630] 1), arg _high[64666] :
  idxType[64630] =
  (64665 call chpl__intToIdx idxType[64630] 0), arg _stride[64670]:_any[178](?), arg _alignment[64672]:_any[178](?), arg _aligned[64674]:_any[178](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[454945] "temp" "type variable"
    (454947 'move' tmp[454945] idxType[64630])
    (454949 'init field' this[64676] c"idxType" tmp[454945])
    unknown call_tmp[616444] "expr temp" "maybe param" "maybe type" "temp"
    (616447 'move' call_tmp[616444](454954 call _cast BoundedRangeType[64216] boundedType[64640]))
    (454956 'init field' this[64676] c"boundedType" call_tmp[616444])
    (475284 'end of statement')
    unknown call_tmp[616449] "expr temp" "maybe param" "maybe type" "temp"
    (616452 'move' call_tmp[616449](454960 call _cast bool[10] stridable[64646]))
    (454962 'init field' this[64676] c"stridable" call_tmp[616449])
    (475285 'end of statement')
    unknown call_tmp[616454] "maybe param" "maybe type" "temp"
    (616457 'move' call_tmp[616454](64719 call chpl__idxToInt _low[64656]))
    unknown call_tmp[616459] "expr temp" "maybe param" "maybe type" "temp"
    (616462 'move' call_tmp[616459](454976 '.v' this[64676] c"idxType"))
    unknown call_tmp[616464] "maybe param" "maybe type" "temp"
    (616467 'move' call_tmp[616464](454968 call chpl__idxTypeToIntIdxType call_tmp[616459]))
    unknown tmp[454965] "temp"
    (454970 'init var' tmp[454965] call_tmp[616454] call_tmp[616464])
    (454972 'init field' this[64676] c"_low" tmp[454965])
    (475286 'end of statement')
    unknown call_tmp[616469] "maybe param" "maybe type" "temp"
    (616472 'move' call_tmp[616469](64730 call chpl__idxToInt _high[64666]))
    unknown call_tmp[616474] "expr temp" "maybe param" "maybe type" "temp"
    (616477 'move' call_tmp[616474](454990 '.v' this[64676] c"idxType"))
    unknown call_tmp[616479] "maybe param" "maybe type" "temp"
    (616482 'move' call_tmp[616479](454982 call chpl__idxTypeToIntIdxType call_tmp[616474]))
    unknown tmp[454979] "temp"
    (454984 'init var' tmp[454979] call_tmp[616469] call_tmp[616479])
    (454986 'init field' this[64676] c"_high" tmp[454979])
    (475287 'end of statement')
    unknown tmp[454993] "temp"
    unknown tmp[555509] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555510] "maybe param" "temp"
    unknown call_tmp[616484] "expr temp" "maybe param" "maybe type" "temp"
    (616487 'move' call_tmp[616484](455009 '.v' this[64676] c"stridable"))
    (555515 'move' tmp[555510](555513 call _cond_test call_tmp[616484]))
    if tmp[555510]
    {
      unknown tmp[555517] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616489] "expr temp" "maybe param" "maybe type" "temp"
      (616492 'move' call_tmp[616489](455012 '.v' this[64676] c"idxType"))
      (555519 'move' tmp[555517](454998 call chpl__rangeStrideType call_tmp[616489]))
      (555524 'move' tmp[555509](555521 '_paramFoldLogical' tmp[555510] tmp[555517]))
    }
    {
      (555529 'move' tmp[555509](555526 '_paramFoldLogical' tmp[555510] nothing[7]))
    }
    (455003 'default init var' tmp[454993] tmp[555509])
    (455005 '.=' this[64676] c"_stride" tmp[454993])
    (475288 'end of statement')
    unknown tmp[455015] "temp"
    unknown tmp[555536] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555537] "maybe param" "temp"
    unknown call_tmp[616494] "expr temp" "maybe param" "maybe type" "temp"
    (616497 'move' call_tmp[616494](455031 '.v' this[64676] c"stridable"))
    (555542 'move' tmp[555537](555540 call _cond_test call_tmp[616494]))
    if tmp[555537]
    {
      unknown tmp[555544] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616499] "expr temp" "maybe param" "maybe type" "temp"
      (616502 'move' call_tmp[616499](455034 '.v' this[64676] c"idxType"))
      (555546 'move' tmp[555544](455020 call chpl__idxTypeToIntIdxType call_tmp[616499]))
      (555551 'move' tmp[555536](555548 '_paramFoldLogical' tmp[555537] tmp[555544]))
    }
    {
      (555556 'move' tmp[555536](555553 '_paramFoldLogical' tmp[555537] nothing[7]))
    }
    (455025 'default init var' tmp[455015] tmp[555536])
    (455027 '.=' this[64676] c"_alignment" tmp[455015])
    (475289 'end of statement')
    unknown tmp[455037] "temp"
    unknown tmp[555563] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555564] "maybe param" "temp"
    unknown call_tmp[616504] "expr temp" "maybe param" "maybe type" "temp"
    (616507 'move' call_tmp[616504](455051 '.v' this[64676] c"stridable"))
    (555569 'move' tmp[555564](555567 call _cond_test call_tmp[616504]))
    if tmp[555564]
    {
      (555574 'move' tmp[555563](555571 '_paramFoldLogical' tmp[555564] bool[10]))
    }
    {
      (555579 'move' tmp[555563](555576 '_paramFoldLogical' tmp[555564] nothing[7]))
    }
    (455045 'default init var' tmp[455037] tmp[555563])
    (455047 '.=' this[64676] c"_aligned" tmp[455037])
    (475290 'end of statement')
    unknown call_tmp[616509] "expr temp" "maybe param" "maybe type" "temp"
    (616512 'move' call_tmp[616509](64763 call _cond_test stridable[64646]))
    if call_tmp[616509]
    {
      (64761 call compilerError "non-stridable range initializer called with stridable=true")
    }
    (509062 return _void[55])
  }
  where {
    (64686 call _isAnyNothing _stride[64670] _alignment[64672] _aligned[64674])
  }
  function range[64319](?).init=[64786](arg _mt[64791]:_MT[238], ref arg this[64788]:range[64319](?) :
  range[64319](?), arg other[64783]:range[64319](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown call_tmp[616514] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616517 'move' call_tmp[616514](64794 'typeof' this[64788]))
    unknown call_tmp[616521] "expr temp" "maybe param" "maybe type" "temp"
    (616524 'move' call_tmp[616521](64795 call idxType _mt[243] call_tmp[616514]))
    unknown call_tmp[616526] "expr temp" "maybe param" "maybe type" "temp"
    (616529 'move' call_tmp[616526](64799 call == call_tmp[616521] ?[260]))
    unknown idxType[64810] "dead at end of block" "insert auto destroy" "type variable"(64807 IfExpr  call_tmp[616526] then
    { scopeless
      (455060 'query' other[64783] 1)
    } else
    { scopeless
      unknown call_tmp[616531] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616534 'move' call_tmp[616531](64803 'typeof' this[64788]))
      (64804 call idxType _mt[243] call_tmp[616531])
    } )
    unknown tmp[555586] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555587] "maybe param" "temp"
    unknown call_tmp[616538] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616541 'move' call_tmp[616538](541036 'typeof' this[64788]))
    unknown call_tmp[616545] "expr temp" "maybe param" "maybe type" "temp"
    (616548 'move' call_tmp[616545](541035 call idxType _mt[243] call_tmp[616538]))
    unknown call_tmp[616550] "expr temp" "maybe param" "maybe type" "temp"
    (616553 'move' call_tmp[616550](541033 call == call_tmp[616545] ?[260]))
    (555592 'move' tmp[555587](555590 call _cond_test call_tmp[616550]))
    if tmp[555587]
    {
      unknown tmp[555594] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555596 'move' tmp[555594](541041 'query' other[64783] 1))
      (555601 'move' tmp[555586](555598 '_paramFoldLogical' tmp[555587] tmp[555594]))
    }
    {
      unknown tmp[555603] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616555] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616558 'move' call_tmp[616555](541047 'typeof' this[64788]))
      (555605 'move' tmp[555603](541046 call idxType _mt[243] call_tmp[616555]))
      (555610 'move' tmp[555586](555607 '_paramFoldLogical' tmp[555587] tmp[555603]))
    }
    (541051 'move' idxType[64810] tmp[555586])
    unknown boundedType[64831] "dead at end of block" "param"
    unknown tmp[555617] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555618] "maybe param" "temp"
    unknown call_tmp[616562] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616565 'move' call_tmp[616562](64815 'typeof' this[64788]))
    unknown call_tmp[616569] "expr temp" "maybe param" "maybe type" "temp"
    (616572 'move' call_tmp[616569](64816 call boundedType _mt[243] call_tmp[616562]))
    unknown call_tmp[616574] "expr temp" "maybe param" "maybe type" "temp"
    (616577 'move' call_tmp[616574](64820 call == call_tmp[616569] ?[260]))
    (555623 'move' tmp[555618](555621 call _cond_test call_tmp[616574]))
    if tmp[555618]
    {
      unknown tmp[555625] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555627 'move' tmp[555625](455066 'query' other[64783] 2))
      (555632 'move' tmp[555617](555629 '_paramFoldLogical' tmp[555618] tmp[555625]))
    }
    {
      unknown tmp[555634] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616579] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616582 'move' call_tmp[616579](64824 'typeof' this[64788]))
      (555636 'move' tmp[555634](64825 call boundedType _mt[243] call_tmp[616579]))
      (555641 'move' tmp[555617](555638 '_paramFoldLogical' tmp[555618] tmp[555634]))
    }
    (541053 'init var' boundedType[64831] tmp[555617])
    (64834 'end of statement')
    unknown stridable[64852] "dead at end of block" "param"
    unknown tmp[555648] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555649] "maybe param" "temp"
    unknown call_tmp[616586] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616589 'move' call_tmp[616586](64836 'typeof' this[64788]))
    unknown call_tmp[616593] "expr temp" "maybe param" "maybe type" "temp"
    (616596 'move' call_tmp[616593](64837 call stridable _mt[243] call_tmp[616586]))
    unknown call_tmp[616598] "expr temp" "maybe param" "maybe type" "temp"
    (616601 'move' call_tmp[616598](64841 call == call_tmp[616593] ?[260]))
    (555654 'move' tmp[555649](555652 call _cond_test call_tmp[616598]))
    if tmp[555649]
    {
      unknown tmp[555656] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555658 'move' tmp[555656](455078 'query' other[64783] 3))
      (555663 'move' tmp[555648](555660 '_paramFoldLogical' tmp[555649] tmp[555656]))
    }
    {
      unknown tmp[555665] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616603] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616606 'move' call_tmp[616603](64845 'typeof' this[64788]))
      (555667 'move' tmp[555665](64846 call stridable _mt[243] call_tmp[616603]))
      (555672 'move' tmp[555648](555669 '_paramFoldLogical' tmp[555649] tmp[555665]))
    }
    (541055 'init var' stridable[64852] tmp[555648])
    (64855 'end of statement')
    unknown call_tmp[616610] "expr temp" "maybe param" "maybe type" "temp"
    (616613 'move' call_tmp[616610](455069 'query' other[64783] 2))
    unknown call_tmp[616615] "expr temp" "maybe param" "maybe type" "temp"
    (616618 'move' call_tmp[616615](64858 call != boundedType[64831] call_tmp[616610]))
    unknown call_tmp[616620] "expr temp" "maybe param" "maybe type" "temp"
    (616623 'move' call_tmp[616620](64920 call _cond_test call_tmp[616615]))
    if call_tmp[616620]
    {
      unknown call_tmp[616625] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616628 'move' call_tmp[616625](64879 'typeof' this[64788]))
      unknown call_tmp[616632] "expr temp" "maybe param" "maybe type" "temp"
      (616635 'move' call_tmp[616632](64880 call boundedType _mt[243] call_tmp[616625]))
      unknown call_tmp[616637] "expr temp" "maybe param" "maybe type" "temp"
      (616640 'move' call_tmp[616637](64884 call _cast string[26] call_tmp[616632]))
      unknown call_tmp[616642] "expr temp" "maybe param" "maybe type" "temp"
      (616645 'move' call_tmp[616642](64886 call + "range(boundedType=" call_tmp[616637]))
      unknown call_tmp[616647] "expr temp" "maybe param" "maybe type" "temp"
      (616650 'move' call_tmp[616647](64905 call + call_tmp[616642] ") cannot be initialized from range(boundedType="))
      unknown call_tmp[616652] "expr temp" "maybe param" "maybe type" "temp"
      (616655 'move' call_tmp[616652](455072 'query' other[64783] 2))
      unknown call_tmp[616657] "expr temp" "maybe param" "maybe type" "temp"
      (616660 'move' call_tmp[616657](64909 call _cast string[26] call_tmp[616652]))
      unknown call_tmp[616662] "expr temp" "maybe param" "maybe type" "temp"
      (616665 'move' call_tmp[616662](64911 call + call_tmp[616647] call_tmp[616657]))
      unknown call_tmp[616667] "expr temp" "maybe param" "maybe type" "temp"
      (616670 'move' call_tmp[616667](64914 call + call_tmp[616662] ")"))
      (64917 call compilerError call_tmp[616667])
    }
    unknown tmp[419252] "maybe param" "temp"
    (419263 'move' tmp[419252](64925 call ! stridable[64852]))
    unknown call_tmp[616672] "expr temp" "maybe param" "maybe type" "temp"
    (616675 'move' call_tmp[616672](419265 call _cond_invalid tmp[419252]))
    if call_tmp[616672]
    {
      (419268 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555679] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555680] "maybe param" "temp"
    unknown call_tmp[616677] "expr temp" "maybe param" "maybe type" "temp"
    (616680 'move' call_tmp[616677](419253 call isTrue tmp[419252]))
    (555685 'move' tmp[555680](555683 call _cond_test call_tmp[616677]))
    if tmp[555680]
    {
      unknown tmp[555687] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616682] "expr temp" "maybe param" "maybe type" "temp"
      (616685 'move' call_tmp[616682](455081 'query' other[64783] 3))
      (555689 'move' tmp[555687](419256 call isTrue call_tmp[616682]))
      (555694 'move' tmp[555679](555691 '_paramFoldLogical' tmp[555680] tmp[555687]))
    }
    {
      (555699 'move' tmp[555679](555696 '_paramFoldLogical' tmp[555680] 0))
    }
    unknown call_tmp[616687] "expr temp" "maybe param" "maybe type" "temp"
    (616690 'move' call_tmp[616687](64951 call _cond_test tmp[555679]))
    if call_tmp[616687]
    {
      (64949 call compilerError "cannot initialize a non-stridable range from a stridable range")
    }
    unknown tmp[419273] "maybe param" "temp"
    (419284 'move' tmp[419273] stridable[64852])
    unknown call_tmp[616692] "expr temp" "maybe param" "maybe type" "temp"
    (616695 'move' call_tmp[616692](419286 call _cond_invalid tmp[419273]))
    if call_tmp[616692]
    {
      (419289 call compilerError "cannot promote short-circuiting && operator")
    }
    const str[64974] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[555706] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555707] "maybe param" "temp"
    unknown call_tmp[616697] "expr temp" "maybe param" "maybe type" "temp"
    (616700 'move' call_tmp[616697](419274 call isTrue tmp[419273]))
    (555712 'move' tmp[555707](555710 call _cond_test call_tmp[616697]))
    if tmp[555707]
    {
      unknown tmp[555714] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616702] "expr temp" "maybe param" "maybe type" "temp"
      (616705 'move' call_tmp[616702](455084 'query' other[64783] 3))
      (555716 'move' tmp[555714](419277 call isTrue call_tmp[616702]))
      (555721 'move' tmp[555706](555718 '_paramFoldLogical' tmp[555707] tmp[555714]))
    }
    {
      (555726 'move' tmp[555706](555723 '_paramFoldLogical' tmp[555707] 0))
    }
    unknown tmp[555733] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555734] "maybe param" "temp"
    (555739 'move' tmp[555734](555737 call _cond_test tmp[555706]))
    if tmp[555734]
    {
      unknown tmp[555741] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555743 'move' tmp[555741](64961 call stride _mt[243] other[64783]))
      (555748 'move' tmp[555733](555745 '_paramFoldLogical' tmp[555734] tmp[555741]))
    }
    {
      unknown tmp[555750] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616709] "expr temp" "maybe param" "maybe type" "temp"
      (616712 'move' call_tmp[616709](64968 call chpl__rangeStrideType idxType[64810]))
      (555752 'move' tmp[555750](64969 call _cast call_tmp[616709] 1))
      (555757 'move' tmp[555733](555754 '_paramFoldLogical' tmp[555734] tmp[555750]))
    }
    (541057 'init var' str[64974] tmp[555733])
    (64977 'end of statement' idxType[64810])
    unknown call_tmp[616718] "expr temp" "maybe param" "maybe type" "temp"
    (616721 'move' call_tmp[616718](64990 call _low _mt[243] other[64783]))
    unknown call_tmp[616723] "expr temp" "maybe param" "maybe type" "temp"
    (616726 'move' call_tmp[616723](64993 call chpl__intToIdx idxType[64810] call_tmp[616718]))
    unknown call_tmp[616730] "expr temp" "maybe param" "maybe type" "temp"
    (616733 'move' call_tmp[616730](64998 call _high _mt[243] other[64783]))
    unknown call_tmp[616735] "expr temp" "maybe param" "maybe type" "temp"
    (616738 'move' call_tmp[616735](65001 call chpl__intToIdx idxType[64810] call_tmp[616730]))
    unknown call_tmp[616742] "expr temp" "maybe param" "maybe type" "temp"
    (616745 'move' call_tmp[616742](65010 call alignment _mt[243] other[64783]))
    unknown call_tmp[616747] "expr temp" "maybe param" "maybe type" "temp"
    (616750 'move' call_tmp[616747](65014 call chpl__idxToInt call_tmp[616742]))
    unknown call_tmp[616752] "expr temp" "maybe param" "maybe type" "temp"
    (616755 'move' call_tmp[616752](65015 call chpl__intToIdx idxType[64810] call_tmp[616747]))
    unknown call_tmp[616759] "expr temp" "maybe param" "maybe type" "temp"
    (616762 'move' call_tmp[616759](65019 call aligned _mt[243] other[64783]))
    (65022 call(64979 call (partial) init _mt[243] this[64788]) idxType[64810] boundedType[64831] stridable[64852] call_tmp[616723] call_tmp[616735] str[64974] call_tmp[616752] call_tmp[616759])
    (475297 'end of statement' idxType[64810] idxType[64810] idxType[64810] str[64974] idxType[64810])
    (509064 return _void[55])
  }
  function range[64319](?).displayRepresentation[65051](arg _mt[65056]:_MT[238], arg this[65053]:range[64319](?) :
  range[64319](?), arg msg[65047]:string[26] =
  "") : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown ret[509068] "RVV" "temp"
    unknown tmp[555764] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555765] "maybe param" "temp"
    unknown call_tmp[616766] "expr temp" "maybe param" "maybe type" "temp"
    (616769 'move' call_tmp[616766](373831 call aligned _mt[243] this[65053]))
    (555770 'move' tmp[555765](555768 call _cond_test call_tmp[616766]))
    if tmp[555765]
    {
      unknown tmp[555772] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616773] "expr temp" "maybe param" "maybe type" "temp"
      (616776 'move' call_tmp[616773](373835 call alignment _mt[243] this[65053]))
      (555774 'move' tmp[555772](65129 call _cast string[26] call_tmp[616773]))
      (555779 'move' tmp[555764](555776 '_paramFoldLogical' tmp[555765] tmp[555772]))
    }
    {
      (555784 'move' tmp[555764](555781 '_paramFoldLogical' tmp[555765] "\?"))
    }
    unknown call_tmp[616780] "expr temp" "maybe param" "maybe type" "temp"
    (616783 'move' call_tmp[616780](373805 call idxType _mt[243] this[65053]))
    unknown call_tmp[616785] "expr temp" "maybe param" "maybe type" "temp"
    (616788 'move' call_tmp[616785](65081 call _cast string[26] call_tmp[616780]))
    unknown call_tmp[616792] "expr temp" "maybe param" "maybe type" "temp"
    (616795 'move' call_tmp[616792](373810 call boundedType _mt[243] this[65053]))
    unknown call_tmp[616799] "expr temp" "maybe param" "maybe type" "temp"
    (616802 'move' call_tmp[616799](373815 call stridable _mt[243] this[65053]))
    unknown call_tmp[616806] "expr temp" "maybe param" "maybe type" "temp"
    (616809 'move' call_tmp[616806](373819 call low _mt[243] this[65053]))
    unknown call_tmp[616813] "expr temp" "maybe param" "maybe type" "temp"
    (616816 'move' call_tmp[616813](373823 call high _mt[243] this[65053]))
    unknown call_tmp[616820] "expr temp" "maybe param" "maybe type" "temp"
    (616823 'move' call_tmp[616820](373827 call stride _mt[243] this[65053]))
    (65152 call chpl_debug_writeln msg[65047] "(" call_tmp[616785] "," call_tmp[616792] "," call_tmp[616799] " : " call_tmp[616806] "," call_tmp[616813] "," call_tmp[616820] "," tmp[555764] ")")
    (509070 return ret[509068])
  }
  { scopeless type
    void[4]
  }
  function chpl_build_bounded_range[455175](arg low[455182] :
  (455179 call int(64)[13] 64), arg high[455188] :
  (455186 call int(64)[13] 64)) : _unknown[51]
  {
    unknown ret[509074] "RVV" "temp"
    unknown call_tmp[616825] "expr temp" "maybe param" "maybe type" "temp"
    (616828 'move' call_tmp[616825](455196 call int(64)[13] 64))
    unknown call_tmp[616830] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616833 'move' call_tmp[616830](747779 'new' range[64319](?) call_tmp[616825](_low = low[455182])(_high = high[455188])))
    (509079 'move' ret[509074](509078 'deref' call_tmp[616830]))
    (509076 return ret[509074])
  }
  function chpl_build_bounded_range[455146](arg low[455153] :
  (455150 call int(64)[13] 32), arg high[455159] :
  (455157 call int(64)[13] 32)) : _unknown[51]
  {
    unknown ret[509083] "RVV" "temp"
    unknown call_tmp[616835] "expr temp" "maybe param" "maybe type" "temp"
    (616838 'move' call_tmp[616835](455167 call int(64)[13] 32))
    unknown call_tmp[616840] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616843 'move' call_tmp[616840](747780 'new' range[64319](?) call_tmp[616835](_low = low[455153])(_high = high[455159])))
    (509088 'move' ret[509083](509087 'deref' call_tmp[616840]))
    (509085 return ret[509083])
  }
  function chpl_build_bounded_range[455117](arg low[455124] :
  (455121 call int(64)[13] 16), arg high[455130] :
  (455128 call int(64)[13] 16)) : _unknown[51]
  {
    unknown ret[509092] "RVV" "temp"
    unknown call_tmp[616845] "expr temp" "maybe param" "maybe type" "temp"
    (616848 'move' call_tmp[616845](455138 call int(64)[13] 16))
    unknown call_tmp[616850] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616853 'move' call_tmp[616850](747781 'new' range[64319](?) call_tmp[616845](_low = low[455124])(_high = high[455130])))
    (509097 'move' ret[509092](509096 'deref' call_tmp[616850]))
    (509094 return ret[509092])
  }
  function chpl_build_bounded_range[455088](arg low[455095] :
  (455092 call int(64)[13] 8), arg high[455101] :
  (455099 call int(64)[13] 8)) : _unknown[51]
  {
    unknown ret[509101] "RVV" "temp"
    unknown call_tmp[616855] "expr temp" "maybe param" "maybe type" "temp"
    (616858 'move' call_tmp[616855](455109 call int(64)[13] 8))
    unknown call_tmp[616860] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616863 'move' call_tmp[616860](747782 'new' range[64319](?) call_tmp[616855](_low = low[455095])(_high = high[455101])))
    (509106 'move' ret[509101](509105 'deref' call_tmp[616860]))
    (509103 return ret[509101])
  }
  function chpl_build_bounded_range[455291](arg low[455298] :
  (455295 call uint(64)[115] 64), arg high[455304] :
  (455302 call uint(64)[115] 64)) : _unknown[51]
  {
    unknown ret[509110] "RVV" "temp"
    unknown call_tmp[616865] "expr temp" "maybe param" "maybe type" "temp"
    (616868 'move' call_tmp[616865](455312 call uint(64)[115] 64))
    unknown call_tmp[616870] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616873 'move' call_tmp[616870](747783 'new' range[64319](?) call_tmp[616865](_low = low[455298])(_high = high[455304])))
    (509115 'move' ret[509110](509114 'deref' call_tmp[616870]))
    (509112 return ret[509110])
  }
  function chpl_build_bounded_range[455262](arg low[455269] :
  (455266 call uint(64)[115] 32), arg high[455275] :
  (455273 call uint(64)[115] 32)) : _unknown[51]
  {
    unknown ret[509119] "RVV" "temp"
    unknown call_tmp[616875] "expr temp" "maybe param" "maybe type" "temp"
    (616878 'move' call_tmp[616875](455283 call uint(64)[115] 32))
    unknown call_tmp[616880] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616883 'move' call_tmp[616880](747784 'new' range[64319](?) call_tmp[616875](_low = low[455269])(_high = high[455275])))
    (509124 'move' ret[509119](509123 'deref' call_tmp[616880]))
    (509121 return ret[509119])
  }
  function chpl_build_bounded_range[455233](arg low[455240] :
  (455237 call uint(64)[115] 16), arg high[455246] :
  (455244 call uint(64)[115] 16)) : _unknown[51]
  {
    unknown ret[509128] "RVV" "temp"
    unknown call_tmp[616885] "expr temp" "maybe param" "maybe type" "temp"
    (616888 'move' call_tmp[616885](455254 call uint(64)[115] 16))
    unknown call_tmp[616890] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616893 'move' call_tmp[616890](747785 'new' range[64319](?) call_tmp[616885](_low = low[455240])(_high = high[455246])))
    (509133 'move' ret[509128](509132 'deref' call_tmp[616890]))
    (509130 return ret[509128])
  }
  function chpl_build_bounded_range[455204](arg low[455211] :
  (455208 call uint(64)[115] 8), arg high[455217] :
  (455215 call uint(64)[115] 8)) : _unknown[51]
  {
    unknown ret[509137] "RVV" "temp"
    unknown call_tmp[616895] "expr temp" "maybe param" "maybe type" "temp"
    (616898 'move' call_tmp[616895](455225 call uint(64)[115] 8))
    unknown call_tmp[616900] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616903 'move' call_tmp[616900](747786 'new' range[64319](?) call_tmp[616895](_low = low[455211])(_high = high[455217])))
    (509142 'move' ret[509137](509141 'deref' call_tmp[616900]))
    (509139 return ret[509137])
  }
  function chpl_build_bounded_range[65236](arg low[65233]:enum[187](?), arg high[65239]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509146] "RVV" "temp"
    unknown call_tmp[616905] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616908 'move' call_tmp[616905](65243 'typeof' low[65233]))
    unknown call_tmp[616910] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616913 'move' call_tmp[616910](65245 'typeof' high[65239]))
    unknown call_tmp[616915] "expr temp" "maybe param" "maybe type" "temp"
    (616918 'move' call_tmp[616915](65246 call != call_tmp[616905] call_tmp[616910]))
    unknown call_tmp[616920] "expr temp" "maybe param" "maybe type" "temp"
    (616923 'move' call_tmp[616920](65269 call _cond_test call_tmp[616915]))
    if call_tmp[616920]
    {
      (65267 call compilerError "ranges of enums must use a single enum type")
    }
    unknown call_tmp[616925] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616928 'move' call_tmp[616925](65278 'typeof' low[65233]))
    unknown call_tmp[616930] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616933 'move' call_tmp[616930](747787 'new' range[64319](?) call_tmp[616925](_low = low[65233])(_high = high[65239])))
    (509151 'move' ret[509146](509150 'deref' call_tmp[616930]))
    (509148 return ret[509146])
  }
  function chpl_build_bounded_range[65295](arg low[65292]:bool[10], arg high[65298]:bool[10]) : _unknown[51]
  {
    unknown ret[509155] "RVV" "temp"
    unknown call_tmp[616935] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616938 'move' call_tmp[616935](747788 'new' range[64319](?) bool[10](_low = low[65292])(_high = high[65298])))
    (509160 'move' ret[509155](509159 'deref' call_tmp[616935]))
    (509157 return ret[509155])
  }
  function chpl_build_bounded_range[65319](arg low[65317]:_any[178](?), arg high[65321]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65342 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (509162 return _void[55])
  }
  function chpl_build_low_bounded_range[65353](arg low[65350]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509166] "RVV" "temp"
    unknown call_tmp[616940] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616943 'move' call_tmp[616940](65358 'typeof' low[65350]))
    unknown call_tmp[616945] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616948 'move' call_tmp[616945](747789 'new' range[64319](?) call_tmp[616940] boundedLow[64210](_low = low[65350])))
    (509171 'move' ret[509166](509170 'deref' call_tmp[616945]))
    (509168 return ret[509166])
  }
  function chpl_build_low_bounded_range[65378](arg low[65375]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509175] "RVV" "temp"
    unknown call_tmp[616950] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616953 'move' call_tmp[616950](65383 'typeof' low[65375]))
    unknown call_tmp[616955] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616958 'move' call_tmp[616955](747790 'new' range[64319](?) call_tmp[616950] boundedLow[64210](_low = low[65375])))
    (509180 'move' ret[509175](509179 'deref' call_tmp[616955]))
    (509177 return ret[509175])
  }
  function chpl_build_low_bounded_range[65403](arg low[65400]:bool[10]) : _unknown[51]
  {
    unknown ret[509184] "RVV" "temp"
    unknown call_tmp[616960] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616963 'move' call_tmp[616960](65408 'typeof' low[65400]))
    unknown call_tmp[616965] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616968 'move' call_tmp[616965](747791 'new' range[64319](?) call_tmp[616960] boundedLow[64210](_low = low[65400])))
    (509189 'move' ret[509184](509188 'deref' call_tmp[616965]))
    (509186 return ret[509184])
  }
  function chpl_build_low_bounded_range[65426](arg low[65424]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65447 call compilerError "Bound of 'low..' must be an integer")
    (509191 return _void[55])
  }
  function chpl_build_high_bounded_range[65458](arg high[65455]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509195] "RVV" "temp"
    unknown call_tmp[616970] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616973 'move' call_tmp[616970](65463 'typeof' high[65455]))
    unknown call_tmp[616975] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616978 'move' call_tmp[616975](747792 'new' range[64319](?) call_tmp[616970] boundedHigh[64212](_high = high[65455])))
    (509200 'move' ret[509195](509199 'deref' call_tmp[616975]))
    (509197 return ret[509195])
  }
  function chpl_build_high_bounded_range[65483](arg high[65480]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509204] "RVV" "temp"
    unknown call_tmp[616980] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616983 'move' call_tmp[616980](65488 'typeof' high[65480]))
    unknown call_tmp[616985] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616988 'move' call_tmp[616985](747793 'new' range[64319](?) call_tmp[616980] boundedHigh[64212](_high = high[65480])))
    (509209 'move' ret[509204](509208 'deref' call_tmp[616985]))
    (509206 return ret[509204])
  }
  function chpl_build_high_bounded_range[65508](arg high[65505]:bool[10]) : _unknown[51]
  {
    unknown ret[509213] "RVV" "temp"
    unknown call_tmp[616990] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616993 'move' call_tmp[616990](65513 'typeof' high[65505]))
    unknown call_tmp[616995] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616998 'move' call_tmp[616995](747794 'new' range[64319](?) call_tmp[616990] boundedHigh[64212](_high = high[65505])))
    (509218 'move' ret[509213](509217 'deref' call_tmp[616995]))
    (509215 return ret[509213])
  }
  function chpl_build_high_bounded_range[65531](arg high[65529]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65552 call compilerError "Bound of '..high' must be an integer.")
    (509220 return _void[55])
  }
  function chpl_build_unbounded_range[65559]() : _unknown[51]
  {
    unknown ret[509224] "RVV" "temp"
    unknown call_tmp[617000] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (617003 'move' call_tmp[617000](747795 'new' range[64319](?) int(64)[13] boundedNone[64214]))
    (509229 'move' ret[509224](509228 'deref' call_tmp[617000]))
    (509226 return ret[509224])
  }
  function chpl_compute_low_param_loop_bound[455380](param arg low[455387] :
  (455384 call int(64)[13] 64), param arg high[455393] :
  (455391 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509233] "RVV" "param" "temp"
    (509238 'move' ret[509233](509237 'deref' low[455387]))
    (509235 return ret[509233])
  }
  function chpl_compute_low_param_loop_bound[455360](param arg low[455367] :
  (455364 call int(64)[13] 32), param arg high[455373] :
  (455371 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509242] "RVV" "param" "temp"
    (509247 'move' ret[509242](509246 'deref' low[455367]))
    (509244 return ret[509242])
  }
  function chpl_compute_low_param_loop_bound[455340](param arg low[455347] :
  (455344 call int(64)[13] 16), param arg high[455353] :
  (455351 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509251] "RVV" "param" "temp"
    (509256 'move' ret[509251](509255 'deref' low[455347]))
    (509253 return ret[509251])
  }
  function chpl_compute_low_param_loop_bound[455320](param arg low[455327] :
  (455324 call int(64)[13] 8), param arg high[455333] :
  (455331 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509260] "RVV" "param" "temp"
    (509265 'move' ret[509260](509264 'deref' low[455327]))
    (509262 return ret[509260])
  }
  function chpl_compute_high_param_loop_bound[455460](param arg low[455467] :
  (455464 call int(64)[13] 64), param arg high[455473] :
  (455471 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509269] "RVV" "param" "temp"
    (509274 'move' ret[509269](509273 'deref' high[455473]))
    (509271 return ret[509269])
  }
  function chpl_compute_high_param_loop_bound[455440](param arg low[455447] :
  (455444 call int(64)[13] 32), param arg high[455453] :
  (455451 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509278] "RVV" "param" "temp"
    (509283 'move' ret[509278](509282 'deref' high[455453]))
    (509280 return ret[509278])
  }
  function chpl_compute_high_param_loop_bound[455420](param arg low[455427] :
  (455424 call int(64)[13] 16), param arg high[455433] :
  (455431 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509287] "RVV" "param" "temp"
    (509292 'move' ret[509287](509291 'deref' high[455433]))
    (509289 return ret[509287])
  }
  function chpl_compute_high_param_loop_bound[455400](param arg low[455407] :
  (455404 call int(64)[13] 8), param arg high[455413] :
  (455411 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509296] "RVV" "param" "temp"
    (509301 'move' ret[509296](509300 'deref' high[455413]))
    (509298 return ret[509296])
  }
  function chpl_compute_low_param_loop_bound[455540](param arg low[455547] :
  (455544 call uint(64)[115] 64), param arg high[455553] :
  (455551 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509305] "RVV" "param" "temp"
    (509310 'move' ret[509305](509309 'deref' low[455547]))
    (509307 return ret[509305])
  }
  function chpl_compute_low_param_loop_bound[455520](param arg low[455527] :
  (455524 call uint(64)[115] 32), param arg high[455533] :
  (455531 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509314] "RVV" "param" "temp"
    (509319 'move' ret[509314](509318 'deref' low[455527]))
    (509316 return ret[509314])
  }
  function chpl_compute_low_param_loop_bound[455500](param arg low[455507] :
  (455504 call uint(64)[115] 16), param arg high[455513] :
  (455511 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509323] "RVV" "param" "temp"
    (509328 'move' ret[509323](509327 'deref' low[455507]))
    (509325 return ret[509323])
  }
  function chpl_compute_low_param_loop_bound[455480](param arg low[455487] :
  (455484 call uint(64)[115] 8), param arg high[455493] :
  (455491 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509332] "RVV" "param" "temp"
    (509337 'move' ret[509332](509336 'deref' low[455487]))
    (509334 return ret[509332])
  }
  function chpl_compute_high_param_loop_bound[455620](param arg low[455627] :
  (455624 call uint(64)[115] 64), param arg high[455633] :
  (455631 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509341] "RVV" "param" "temp"
    (509346 'move' ret[509341](509345 'deref' high[455633]))
    (509343 return ret[509341])
  }
  function chpl_compute_high_param_loop_bound[455600](param arg low[455607] :
  (455604 call uint(64)[115] 32), param arg high[455613] :
  (455611 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509350] "RVV" "param" "temp"
    (509355 'move' ret[509350](509354 'deref' high[455613]))
    (509352 return ret[509350])
  }
  function chpl_compute_high_param_loop_bound[455580](param arg low[455587] :
  (455584 call uint(64)[115] 16), param arg high[455593] :
  (455591 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509359] "RVV" "param" "temp"
    (509364 'move' ret[509359](509363 'deref' high[455593]))
    (509361 return ret[509359])
  }
  function chpl_compute_high_param_loop_bound[455560](param arg low[455567] :
  (455564 call uint(64)[115] 8), param arg high[455573] :
  (455571 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509368] "RVV" "param" "temp"
    (509373 'move' ret[509368](509372 'deref' high[455573]))
    (509370 return ret[509368])
  }
  function chpl_compute_low_param_loop_bound[65683](param arg low[65680]:bool[10], param arg high[65686]:bool[10]) param : _unknown[51]
  {
    unknown ret[509377] "RVV" "param" "temp"
    (509382 'move' ret[509377](509381 'deref' low[65680]))
    (509379 return ret[509377])
  }
  function chpl_compute_high_param_loop_bound[65701](param arg low[65698]:bool[10], param arg high[65704]:bool[10]) param : _unknown[51]
  {
    unknown ret[509386] "RVV" "param" "temp"
    (509391 'move' ret[509386](509390 'deref' high[65704]))
    (509388 return ret[509386])
  }
  function chpl_compute_low_param_loop_bound[65717](param arg low[65715]:_any[178](?), param arg high[65719]:_any[178](?)) param : _unknown[51] "last resort" "no return value for void"
  {
    (65742 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509393 return _void[55])
  }
  function chpl_compute_low_param_loop_bound[65751](arg low[65749]:_any[178](?), arg high[65753]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65774 call compilerError "param for-loops must be defined over a bounded param range")
    (509395 return _void[55])
  }
  function chpl_compute_count_param_loop[65785](param arg count[65782]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509399] "RVV" "param" "temp"
    (509404 'move' ret[509399](509403 'deref' count[65782]))
    (509401 return ret[509399])
  }
  function chpl_compute_count_param_loop[65797](arg count[65795]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65820 call compilerError "in a param for-loop, the count operator requires a param integral value")
    (509406 return _void[55])
  }
  function chpl_low_bound_count_for_param_loop[65831](param arg high[65828]:integral[199](?), param arg count[65834]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509410] "RVV" "param" "temp"
    unknown call_tmp[617005] "expr temp" "maybe param" "maybe type" "temp"
    (617008 'move' call_tmp[617005](65839 call > count[65834] 0))
    unknown call_tmp[617010] "expr temp" "maybe param" "maybe type" "temp"
    (617013 'move' call_tmp[617010](65888 call _cond_test call_tmp[617005]))
    if call_tmp[617010]
    {
      (65860 call compilerError "count operators with positive count require the range to have a low bound")
    }
    {
      unknown call_tmp[617015] "expr temp" "maybe param" "maybe type" "temp"
      (617018 'move' call_tmp[617015](65865 call == count[65834] 0))
      unknown call_tmp[617020] "expr temp" "maybe param" "maybe type" "temp"
      (617023 'move' call_tmp[617020](65884 call _cond_test call_tmp[617015]))
      if call_tmp[617020]
      {
        unknown call_tmp[617025] "expr temp" "maybe param" "maybe type" "temp"
        (617028 'move' call_tmp[617025](65869 call + high[65828] 1))
        (509415 'move' ret[509410](509414 'deref' call_tmp[617025]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509408] _end_chpl_low_bound_count_for_param_loop[509408]
      }
      {
        unknown call_tmp[617030] "expr temp" "maybe param" "maybe type" "temp"
        (617033 'move' call_tmp[617030](65876 call + high[65828] count[65834]))
        unknown call_tmp[617035] "expr temp" "maybe param" "maybe type" "temp"
        (617038 'move' call_tmp[617035](65879 call + call_tmp[617030] 1))
        (509420 'move' ret[509410](509419 'deref' call_tmp[617035]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509408] _end_chpl_low_bound_count_for_param_loop[509408]
      }
    }
    label _end_chpl_low_bound_count_for_param_loop[509408]
    (509412 return ret[509410])
  }
  function chpl_low_bound_count_for_param_loop[65900](arg high[65898]:_any[178](?), arg count[65902]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65907 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509424 return _void[55])
  }
  function chpl_high_bound_count_for_param_loop[65918](param arg low[65915]:integral[199](?), param arg count[65921]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509428] "RVV" "param" "temp"
    unknown call_tmp[617040] "expr temp" "maybe param" "maybe type" "temp"
    (617043 'move' call_tmp[617040](65926 call < count[65921] 0))
    unknown call_tmp[617045] "expr temp" "maybe param" "maybe type" "temp"
    (617048 'move' call_tmp[617045](65977 call _cond_test call_tmp[617040]))
    if call_tmp[617045]
    {
      (65949 call compilerError "count operators with negative count require the range to have a high bound")
    }
    {
      unknown call_tmp[617050] "expr temp" "maybe param" "maybe type" "temp"
      (617053 'move' call_tmp[617050](65954 call == count[65921] 0))
      unknown call_tmp[617055] "expr temp" "maybe param" "maybe type" "temp"
      (617058 'move' call_tmp[617055](65973 call _cond_test call_tmp[617050]))
      if call_tmp[617055]
      {
        unknown call_tmp[617060] "expr temp" "maybe param" "maybe type" "temp"
        (617063 'move' call_tmp[617060](65958 call - low[65915] 1))
        (509433 'move' ret[509428](509432 'deref' call_tmp[617060]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509426] _end_chpl_high_bound_count_for_param_loop[509426]
      }
      {
        unknown call_tmp[617065] "expr temp" "maybe param" "maybe type" "temp"
        (617068 'move' call_tmp[617065](65965 call + low[65915] count[65921]))
        unknown call_tmp[617070] "expr temp" "maybe param" "maybe type" "temp"
        (617073 'move' call_tmp[617070](65968 call - call_tmp[617065] 1))
        (509438 'move' ret[509428](509437 'deref' call_tmp[617070]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509426] _end_chpl_high_bound_count_for_param_loop[509426]
      }
    }
    label _end_chpl_high_bound_count_for_param_loop[509426]
    (509430 return ret[509428])
  }
  function chpl_high_bound_count_for_param_loop[65989](arg low[65987]:_any[178](?), arg count[65991]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65996 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509442 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_low[66007](param arg low[66004]:integral[199](?), param arg high[66010]:integral[199](?), param arg count[66014]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509446] "RVV" "param" "temp"
    unknown abs_count[66028] "dead at end of block" "param"
    unknown tmp[555791] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555792] "maybe param" "temp"
    unknown call_tmp[617075] "expr temp" "maybe param" "maybe type" "temp"
    (617078 'move' call_tmp[617075](66019 call < count[66014] 0))
    (555797 'move' tmp[555792](555795 call _cond_test call_tmp[617075]))
    if tmp[555792]
    {
      unknown tmp[555799] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555801 'move' tmp[555799](66022 call - count[66014]))
      (555806 'move' tmp[555791](555803 '_paramFoldLogical' tmp[555792] tmp[555799]))
    }
    {
      (555811 'move' tmp[555791](555808 '_paramFoldLogical' tmp[555792] count[66014]))
    }
    (541059 'init var' abs_count[66028] tmp[555791])
    (66031 'end of statement')
    unknown call_tmp[617080] "expr temp" "maybe param" "maybe type" "temp"
    (617083 'move' call_tmp[617080](66035 call - high[66010] low[66004]))
    unknown call_tmp[617085] "maybe param" "maybe type" "temp"
    (617088 'move' call_tmp[617085](66038 call + call_tmp[617080] 1))
    unknown size[66040] "dead at end of block" "param"
    (541061 'init var' size[66040] call_tmp[617085])
    (66043 'end of statement')
    unknown call_tmp[617090] "expr temp" "maybe param" "maybe type" "temp"
    (617093 'move' call_tmp[617090](66046 call < size[66040] abs_count[66028]))
    unknown call_tmp[617095] "expr temp" "maybe param" "maybe type" "temp"
    (617098 'move' call_tmp[617095](66133 call _cond_test call_tmp[617090]))
    if call_tmp[617095]
    {
      unknown call_tmp[617100] "expr temp" "maybe param" "maybe type" "temp"
      (617103 'move' call_tmp[617100](66069 call _cast string[26] abs_count[66028]))
      unknown call_tmp[617105] "expr temp" "maybe param" "maybe type" "temp"
      (617108 'move' call_tmp[617105](66090 call _cast string[26] size[66040]))
      (66092 call compilerError "Count of " call_tmp[617100] " is too small for range of size " call_tmp[617105])
    }
    {
      unknown call_tmp[617110] "expr temp" "maybe param" "maybe type" "temp"
      (617113 'move' call_tmp[617110](66097 call == count[66014] 0))
      unknown call_tmp[617115] "expr temp" "maybe param" "maybe type" "temp"
      (617118 'move' call_tmp[617115](66128 call _cond_test call_tmp[617110]))
      if call_tmp[617115]
      {
        unknown call_tmp[617120] "expr temp" "maybe param" "maybe type" "temp"
        (617123 'move' call_tmp[617120](66101 call + high[66010] 1))
        (509451 'move' ret[509446](509450 'deref' call_tmp[617120]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_low[509444] _end_chpl_bounded_count_for_param_loop_low[509444]
      }
      {
        unknown call_tmp[617125] "expr temp" "maybe param" "maybe type" "temp"
        (617128 'move' call_tmp[617125](66108 call < count[66014] 0))
        unknown call_tmp[617130] "expr temp" "maybe param" "maybe type" "temp"
        (617133 'move' call_tmp[617130](66124 call _cond_test call_tmp[617125]))
        if call_tmp[617130]
        {
          unknown call_tmp[617135] "expr temp" "maybe param" "maybe type" "temp"
          (617138 'move' call_tmp[617135](66112 call + high[66010] count[66014]))
          unknown call_tmp[617140] "expr temp" "maybe param" "maybe type" "temp"
          (617143 'move' call_tmp[617140](66115 call + call_tmp[617135] 1))
          (509456 'move' ret[509446](509455 'deref' call_tmp[617140]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509444] _end_chpl_bounded_count_for_param_loop_low[509444]
        }
        {
          (509461 'move' ret[509446](509460 'deref' low[66004]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509444] _end_chpl_bounded_count_for_param_loop_low[509444]
        }
      }
    }
    label _end_chpl_bounded_count_for_param_loop_low[509444]
    (509448 return ret[509446])
  }
  function chpl_bounded_count_for_param_loop_low[66144](arg low[66142]:_any[178](?), arg high[66146]:_any[178](?), arg count[66148]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66171 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509465 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_high[66182](param arg low[66179]:integral[199](?), param arg high[66185]:integral[199](?), param arg count[66189]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509469] "RVV" "param" "temp"
    unknown call_tmp[617145] "expr temp" "maybe param" "maybe type" "temp"
    (617148 'move' call_tmp[617145](66194 call == count[66189] 0))
    unknown call_tmp[617150] "expr temp" "maybe param" "maybe type" "temp"
    (617153 'move' call_tmp[617150](66225 call _cond_test call_tmp[617145]))
    if call_tmp[617150]
    {
      unknown call_tmp[617155] "expr temp" "maybe param" "maybe type" "temp"
      (617158 'move' call_tmp[617155](66198 call - low[66179] 1))
      (509474 'move' ret[509469](509473 'deref' call_tmp[617155]))
      gotoReturn _end_chpl_bounded_count_for_param_loop_high[509467] _end_chpl_bounded_count_for_param_loop_high[509467]
    }
    {
      unknown call_tmp[617160] "expr temp" "maybe param" "maybe type" "temp"
      (617163 'move' call_tmp[617160](66205 call < count[66189] 0))
      unknown call_tmp[617165] "expr temp" "maybe param" "maybe type" "temp"
      (617168 'move' call_tmp[617165](66221 call _cond_test call_tmp[617160]))
      if call_tmp[617165]
      {
        (509479 'move' ret[509469](509478 'deref' high[66185]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509467] _end_chpl_bounded_count_for_param_loop_high[509467]
      }
      {
        unknown call_tmp[617170] "expr temp" "maybe param" "maybe type" "temp"
        (617173 'move' call_tmp[617170](66213 call + low[66179] count[66189]))
        unknown call_tmp[617175] "expr temp" "maybe param" "maybe type" "temp"
        (617178 'move' call_tmp[617175](66216 call - call_tmp[617170] 1))
        (509484 'move' ret[509469](509483 'deref' call_tmp[617175]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509467] _end_chpl_bounded_count_for_param_loop_high[509467]
      }
    }
    label _end_chpl_bounded_count_for_param_loop_high[509467]
    (509471 return ret[509469])
  }
  function chpl_bounded_count_for_param_loop_high[66237](arg low[66235]:_any[178](?), arg high[66239]:_any[178](?), arg count[66241]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66246 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509488 return _void[55])
  }
  function isRangeType[66255](arg t[66253]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[509510] "RVV" "param" "temp"
    function isRangeHelp[66266](arg t[66263]:range[64319](?)) param : _unknown[51]
    {
      unknown ret[509492] "RVV" "param" "temp"
      (509497 'move' ret[509492](509496 'deref' 1))
      (509494 return ret[509492])
    }
    function isRangeHelp[66279](arg t[66277]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[509501] "RVV" "param" "temp"
      (509506 'move' ret[509501](509505 'deref' 0))
      (509503 return ret[509501])
    }
    unknown call_tmp[617180] "expr temp" "maybe param" "maybe type" "temp"
    (617183 'move' call_tmp[617180](66290 call isRangeHelp t[66253]))
    (509515 'move' ret[509510](509514 'deref' call_tmp[617180]))
    (509512 return ret[509510])
  }
  function isRangeValue[66304](arg r[66301]:range[64319](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509519] "RVV" "param" "temp"
    (509524 'move' ret[509519](509523 'deref' 1))
    (509521 return ret[509519])
  }
  function isRangeValue[66316](arg r[66314]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509528] "RVV" "param" "temp"
    (509533 'move' ret[509528](509532 'deref' 0))
    (509530 return ret[509528])
  }
  function isBoundedRange[66328](arg r[66326]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509537] "RVV" "param" "temp"
    (509542 'move' ret[509537](509541 'deref' 0))
    (509539 return ret[509537])
  }
  function isBoundedRange[66345](arg r[66342]:range[64319](?)) param : _unknown[51]
  {
    unknown ret[509546] "RVV" "param" "temp"
    unknown call_tmp[617187] "expr temp" "maybe param" "maybe type" "temp"
    (617190 'move' call_tmp[617187](66349 call boundedType _mt[243] r[66342]))
    unknown call_tmp[617192] "expr temp" "maybe param" "maybe type" "temp"
    (617195 'move' call_tmp[617192](66353 call isBoundedRange call_tmp[617187]))
    (509551 'move' ret[509546](509550 'deref' call_tmp[617192]))
    (509548 return ret[509546])
  }
  function isBoundedRange[66365](param arg B[66362]:BoundedRangeType[64216]) param : _unknown[51] "no doc"
  {
    unknown ret[509555] "RVV" "param" "temp"
    unknown call_tmp[617197] "expr temp" "maybe param" "maybe type" "temp"
    (617200 'move' call_tmp[617197](66372 call == B[66362] bounded[64208]))
    (509560 'move' ret[509555](509559 'deref' call_tmp[617197]))
    (509557 return ret[509555])
  }
  function range[64319](?).isBounded[66382](arg _mt[66387]:_MT[238], arg this[66384]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509564] "RVV" "param" "temp"
    unknown call_tmp[617204] "expr temp" "maybe param" "maybe type" "temp"
    (617207 'move' call_tmp[617204](373939 call boundedType _mt[243] this[66384]))
    unknown call_tmp[617209] "expr temp" "maybe param" "maybe type" "temp"
    (617212 'move' call_tmp[617209](66394 call == call_tmp[617204] bounded[64208]))
    (509569 'move' ret[509564](509568 'deref' call_tmp[617209]))
    (509566 return ret[509564])
  }
  function range[64319](?).hasLowBound[66404](arg _mt[66409]:_MT[238], arg this[66406]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509573] "RVV" "param" "temp"
    unknown tmp[419294] "maybe param" "temp"
    unknown call_tmp[617216] "expr temp" "maybe param" "maybe type" "temp"
    (617219 'move' call_tmp[617216](373944 call boundedType _mt[243] this[66406]))
    (419305 'move' tmp[419294](66416 call == call_tmp[617216] bounded[64208]))
    unknown call_tmp[617221] "expr temp" "maybe param" "maybe type" "temp"
    (617224 'move' call_tmp[617221](419307 call _cond_invalid tmp[419294]))
    if call_tmp[617221]
    {
      (419310 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555818] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555819] "maybe param" "temp"
    unknown call_tmp[617226] "expr temp" "maybe param" "maybe type" "temp"
    (617229 'move' call_tmp[617226](419295 call isTrue tmp[419294]))
    (555824 'move' tmp[555819](555822 call _cond_test call_tmp[617226]))
    if tmp[555819]
    {
      (555829 'move' tmp[555818](555826 '_paramFoldLogical' tmp[555819] 1))
    }
    {
      unknown tmp[555831] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617233] "expr temp" "maybe param" "maybe type" "temp"
      (617236 'move' call_tmp[617233](373949 call boundedType _mt[243] this[66406]))
      unknown call_tmp[617238] "expr temp" "maybe param" "maybe type" "temp"
      (617241 'move' call_tmp[617238](66423 call == call_tmp[617233] boundedLow[64210]))
      (555833 'move' tmp[555831](419299 call isTrue call_tmp[617238]))
      (555838 'move' tmp[555818](555835 '_paramFoldLogical' tmp[555819] tmp[555831]))
    }
    (509578 'move' ret[509573](509577 'deref' tmp[555818]))
    (509575 return ret[509573])
  }
  function range[64319](?).hasHighBound[66435](arg _mt[66440]:_MT[238], arg this[66437]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509582] "RVV" "param" "temp"
    unknown tmp[419315] "maybe param" "temp"
    unknown call_tmp[617245] "expr temp" "maybe param" "maybe type" "temp"
    (617248 'move' call_tmp[617245](373954 call boundedType _mt[243] this[66437]))
    (419326 'move' tmp[419315](66447 call == call_tmp[617245] bounded[64208]))
    unknown call_tmp[617250] "expr temp" "maybe param" "maybe type" "temp"
    (617253 'move' call_tmp[617250](419328 call _cond_invalid tmp[419315]))
    if call_tmp[617250]
    {
      (419331 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555845] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555846] "maybe param" "temp"
    unknown call_tmp[617255] "expr temp" "maybe param" "maybe type" "temp"
    (617258 'move' call_tmp[617255](419316 call isTrue tmp[419315]))
    (555851 'move' tmp[555846](555849 call _cond_test call_tmp[617255]))
    if tmp[555846]
    {
      (555856 'move' tmp[555845](555853 '_paramFoldLogical' tmp[555846] 1))
    }
    {
      unknown tmp[555858] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617262] "expr temp" "maybe param" "maybe type" "temp"
      (617265 'move' call_tmp[617262](373959 call boundedType _mt[243] this[66437]))
      unknown call_tmp[617267] "expr temp" "maybe param" "maybe type" "temp"
      (617270 'move' call_tmp[617267](66454 call == call_tmp[617262] boundedHigh[64212]))
      (555860 'move' tmp[555858](419320 call isTrue call_tmp[617267]))
      (555865 'move' tmp[555845](555862 '_paramFoldLogical' tmp[555846] tmp[555858]))
    }
    (509587 'move' ret[509582](509586 'deref' tmp[555845]))
    (509584 return ret[509582])
  }
  function range[64319](?).stride[66466](arg _mt[66471]:_MT[238], arg this[66468]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509591] "RVV" "temp"
    unknown call_tmp[617274] "expr temp" "maybe param" "maybe type" "temp"
    (617277 'move' call_tmp[617274](373969 call _stride _mt[243] this[66468]))
    (509596 'move' ret[509591](509595 'deref' call_tmp[617274]))
    (509593 return ret[509591])
  }
  where {
    (373964 call stridable _mt[243] this[66468])
  }
  function range[64319](?).stride[66484](arg _mt[66489]:_MT[238], arg this[66486]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509600] "RVV" "param" "temp"
    unknown call_tmp[617283] "expr temp" "maybe param" "maybe type" "temp"
    (617286 'move' call_tmp[617283](373978 call strType _mt[243] this[66486]))
    unknown call_tmp[617288] "expr temp" "maybe param" "maybe type" "temp"
    (617291 'move' call_tmp[617288](66496 call _cast call_tmp[617283] 1))
    (509605 'move' ret[509600](509604 'deref' call_tmp[617288]))
    (509602 return ret[509600])
  }
  where {
    unknown call_tmp[617295] "expr temp" "maybe param" "maybe type" "temp"
    (617298 'move' call_tmp[617295](373974 call stridable _mt[243] this[66486]))
    (66492 call ! call_tmp[617295])
  }
  function range[64319](?).alignment[66507](arg _mt[66512]:_MT[238], arg this[66509]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509609] "RVV" "temp"
    unknown call_tmp[617304] "expr temp" "maybe param" "maybe type" "temp"
    (617307 'move' call_tmp[617304](373992 call _alignment _mt[243] this[66509]))
    unknown call_tmp[617309] "expr temp" "maybe param" "maybe type" "temp"
    (617312 'move' call_tmp[617309](66518 call(373987 call (partial) chpl_intToIdx _mt[243] this[66509]) call_tmp[617304]))
    (509614 'move' ret[509609](509613 'deref' call_tmp[617309]))
    (509611 return ret[509609])
  }
  where {
    (373983 call stridable _mt[243] this[66509])
  }
  function range[64319](?).alignment[66528](arg _mt[66533]:_MT[238], arg this[66530]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509618] "RVV" "temp"
    unknown call_tmp[617318] "expr temp" "maybe param" "maybe type" "temp"
    (617321 'move' call_tmp[617318](374005 call low _mt[243] this[66530]))
    (509623 'move' ret[509618](509622 'deref' call_tmp[617318]))
    (509620 return ret[509618])
  }
  where {
    unknown tmp[419336] "maybe param" "temp"
    unknown call_tmp[617325] "expr temp" "maybe param" "maybe type" "temp"
    (617328 'move' call_tmp[617325](373997 call stridable _mt[243] this[66530]))
    (419347 'move' tmp[419336](66536 call ! call_tmp[617325]))
    unknown call_tmp[617330] "expr temp" "maybe param" "maybe type" "temp"
    (617333 'move' call_tmp[617330](419349 call _cond_invalid tmp[419336]))
    if call_tmp[617330]
    {
      (419352 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555872] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555873] "maybe param" "temp"
    unknown call_tmp[617335] "expr temp" "maybe param" "maybe type" "temp"
    (617338 'move' call_tmp[617335](419337 call isTrue tmp[419336]))
    (555878 'move' tmp[555873](555876 call _cond_test call_tmp[617335]))
    if tmp[555873]
    {
      unknown tmp[555880] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617342] "expr temp" "maybe param" "maybe type" "temp"
      (617345 'move' call_tmp[617342](66540 call(374001 call (partial) hasLowBound _mt[243] this[66530])))
      (555882 'move' tmp[555880](419340 call isTrue call_tmp[617342]))
      (555887 'move' tmp[555872](555884 '_paramFoldLogical' tmp[555873] tmp[555880]))
    }
    {
      (555892 'move' tmp[555872](555889 '_paramFoldLogical' tmp[555873] 0))
    }
    (748243 call chpl_statementLevelSymbol tmp[555872])
  }
  function range[64319](?).alignment[66553](arg _mt[66558]:_MT[238], arg this[66555]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509627] "RVV" "temp"
    unknown call_tmp[617349] "expr temp" "maybe param" "maybe type" "temp"
    (617352 'move' call_tmp[617349](66563 call(374009 call (partial) chpl_intToIdx _mt[243] this[66555]) 0))
    (509632 'move' ret[509627](509631 'deref' call_tmp[617349]))
    (509629 return ret[509627])
  }
  function range[64319](?).aligned[66572](arg _mt[66577]:_MT[238], arg this[66574]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509636] "RVV" "temp"
    unknown call_tmp[617356] "expr temp" "maybe param" "maybe type" "temp"
    (617359 'move' call_tmp[617356](374019 call _aligned _mt[243] this[66574]))
    (509641 'move' ret[509636](509640 'deref' call_tmp[617356]))
    (509638 return ret[509636])
  }
  where {
    (374014 call stridable _mt[243] this[66574])
  }
  function range[64319](?).aligned[66590](arg _mt[66595]:_MT[238], arg this[66592]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509645] "RVV" "param" "temp"
    (509650 'move' ret[509645](509649 'deref' 1))
    (509647 return ret[509645])
  }
  where {
    unknown tmp[419357] "maybe param" "temp"
    unknown call_tmp[617365] "expr temp" "maybe param" "maybe type" "temp"
    (617368 'move' call_tmp[617365](374024 call stridable _mt[243] this[66592]))
    (419368 'move' tmp[419357](66598 call ! call_tmp[617365]))
    unknown call_tmp[617370] "expr temp" "maybe param" "maybe type" "temp"
    (617373 'move' call_tmp[617370](419370 call _cond_invalid tmp[419357]))
    if call_tmp[617370]
    {
      (419373 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555926] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555927] "maybe param" "temp"
    unknown call_tmp[617375] "expr temp" "maybe param" "maybe type" "temp"
    (617378 'move' call_tmp[617375](419358 call isTrue tmp[419357]))
    (555932 'move' tmp[555927](555930 call _cond_test call_tmp[617375]))
    if tmp[555927]
    {
      unknown tmp[419378] "maybe param" "temp"
      unknown call_tmp[617382] "expr temp" "maybe param" "maybe type" "temp"
      (617385 'move' call_tmp[617382](374029 call boundedType _mt[243] this[66592]))
      (419389 'move' tmp[419378](66605 call == call_tmp[617382] bounded[64208]))
      unknown call_tmp[617387] "expr temp" "maybe param" "maybe type" "temp"
      (617390 'move' call_tmp[617387](419391 call _cond_invalid tmp[419378]))
      if call_tmp[617387]
      {
        (419394 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[555899] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555900] "maybe param" "temp"
      unknown call_tmp[617392] "expr temp" "maybe param" "maybe type" "temp"
      (617395 'move' call_tmp[617392](419379 call isTrue tmp[419378]))
      (555905 'move' tmp[555900](555903 call _cond_test call_tmp[617392]))
      if tmp[555900]
      {
        (555910 'move' tmp[555899](555907 '_paramFoldLogical' tmp[555900] 1))
      }
      {
        unknown tmp[555912] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617399] "expr temp" "maybe param" "maybe type" "temp"
        (617402 'move' call_tmp[617399](374034 call boundedType _mt[243] this[66592]))
        unknown call_tmp[617404] "expr temp" "maybe param" "maybe type" "temp"
        (617407 'move' call_tmp[617404](66612 call == call_tmp[617399] boundedLow[64210]))
        (555914 'move' tmp[555912](419383 call isTrue call_tmp[617404]))
        (555919 'move' tmp[555899](555916 '_paramFoldLogical' tmp[555900] tmp[555912]))
      }
      unknown tmp[555934] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555936 'move' tmp[555934](419361 call isTrue tmp[555899]))
      (555941 'move' tmp[555926](555938 '_paramFoldLogical' tmp[555927] tmp[555934]))
    }
    {
      (555946 'move' tmp[555926](555943 '_paramFoldLogical' tmp[555927] 0))
    }
    (748245 call chpl_statementLevelSymbol tmp[555926])
  }
  function range[64319](?).aligned[66628](arg _mt[66633]:_MT[238], arg this[66630]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509654] "RVV" "param" "temp"
    (509659 'move' ret[509654](509658 'deref' 0))
    (509656 return ret[509654])
  }
  function range[64319](?).first[66644](arg _mt[66649]:_MT[238], arg this[66646]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509663] "RVV" "temp"
    unknown call_tmp[617413] "expr temp" "maybe param" "maybe type" "temp"
    (617416 'move' call_tmp[617413](66655 call firstAsInt _mt[243] this[66646]))
    unknown call_tmp[617418] "expr temp" "maybe param" "maybe type" "temp"
    (617421 'move' call_tmp[617418](66659 call(374038 call (partial) chpl_intToIdx _mt[243] this[66646]) call_tmp[617413]))
    (509668 'move' ret[509663](509667 'deref' call_tmp[617418]))
    (509665 return ret[509663])
  }
  function range[64319](?).firstAsInt[66668](arg _mt[66673]:_MT[238], arg this[66670]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509672] "RVV" "temp"
    unknown call_tmp[617425] "expr temp" "maybe param" "maybe type" "temp"
    (617428 'move' call_tmp[617425](374043 call stridable _mt[243] this[66670]))
    unknown call_tmp[617430] "expr temp" "maybe param" "maybe type" "temp"
    (617433 'move' call_tmp[617430](66676 call ! call_tmp[617425]))
    unknown call_tmp[617435] "expr temp" "maybe param" "maybe type" "temp"
    (617438 'move' call_tmp[617435](66702 call _cond_test call_tmp[617430]))
    if call_tmp[617435]
    {
      unknown call_tmp[617442] "expr temp" "maybe param" "maybe type" "temp"
      (617445 'move' call_tmp[617442](374048 call _low _mt[243] this[66670]))
      (509677 'move' ret[509672](509676 'deref' call_tmp[617442]))
      gotoReturn _end_firstAsInt[509670] _end_firstAsInt[509670]
    }
    {
      unknown tmp[555953] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555954] "maybe param" "temp"
      unknown call_tmp[617449] "expr temp" "maybe param" "maybe type" "temp"
      (617452 'move' call_tmp[617449](374053 call _stride _mt[243] this[66670]))
      unknown call_tmp[617454] "expr temp" "maybe param" "maybe type" "temp"
      (617457 'move' call_tmp[617454](66683 call > call_tmp[617449] 0))
      (555959 'move' tmp[555954](555957 call _cond_test call_tmp[617454]))
      if tmp[555954]
      {
        unknown tmp[555961] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555963 'move' tmp[555961](66688 call alignedLowAsInt _mt[243] this[66670]))
        (555968 'move' tmp[555953](555965 '_paramFoldLogical' tmp[555954] tmp[555961]))
      }
      {
        unknown tmp[555970] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555972 'move' tmp[555970](66694 call alignedHighAsInt _mt[243] this[66670]))
        (555977 'move' tmp[555953](555974 '_paramFoldLogical' tmp[555954] tmp[555970]))
      }
      (509682 'move' ret[509672](509681 'deref' tmp[555953]))
      gotoReturn _end_firstAsInt[509670] _end_firstAsInt[509670]
    }
    label _end_firstAsInt[509670]
    (509674 return ret[509672])
  }
  function range[64319](?).last[66714](arg _mt[66719]:_MT[238], arg this[66716]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509688] "RVV" "temp"
    unknown call_tmp[617467] "expr temp" "maybe param" "maybe type" "temp"
    (617470 'move' call_tmp[617467](66725 call lastAsInt _mt[243] this[66716]))
    unknown call_tmp[617472] "expr temp" "maybe param" "maybe type" "temp"
    (617475 'move' call_tmp[617472](66729 call(374057 call (partial) chpl_intToIdx _mt[243] this[66716]) call_tmp[617467]))
    (509693 'move' ret[509688](509692 'deref' call_tmp[617472]))
    (509690 return ret[509688])
  }
  function range[64319](?).lastAsInt[66738](arg _mt[66743]:_MT[238], arg this[66740]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509697] "RVV" "temp"
    unknown call_tmp[617479] "expr temp" "maybe param" "maybe type" "temp"
    (617482 'move' call_tmp[617479](374062 call stridable _mt[243] this[66740]))
    unknown call_tmp[617484] "expr temp" "maybe param" "maybe type" "temp"
    (617487 'move' call_tmp[617484](66746 call ! call_tmp[617479]))
    unknown call_tmp[617489] "expr temp" "maybe param" "maybe type" "temp"
    (617492 'move' call_tmp[617489](66768 call _cond_test call_tmp[617484]))
    if call_tmp[617489]
    {
      unknown call_tmp[617496] "expr temp" "maybe param" "maybe type" "temp"
      (617499 'move' call_tmp[617496](374067 call _high _mt[243] this[66740]))
      (509702 'move' ret[509697](509701 'deref' call_tmp[617496]))
      gotoReturn _end_lastAsInt[509695] _end_lastAsInt[509695]
    }
    {
      unknown tmp[555984] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555985] "maybe param" "temp"
      unknown call_tmp[617503] "expr temp" "maybe param" "maybe type" "temp"
      (617506 'move' call_tmp[617503](374071 call stride _mt[243] this[66740]))
      unknown call_tmp[617508] "expr temp" "maybe param" "maybe type" "temp"
      (617511 'move' call_tmp[617508](66753 call > call_tmp[617503] 0))
      (555990 'move' tmp[555985](555988 call _cond_test call_tmp[617508]))
      if tmp[555985]
      {
        unknown tmp[555992] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555994 'move' tmp[555992](66756 call alignedHighAsInt _mt[243] this[66740]))
        (555999 'move' tmp[555984](555996 '_paramFoldLogical' tmp[555985] tmp[555992]))
      }
      {
        unknown tmp[556001] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556003 'move' tmp[556001](66760 call alignedLowAsInt _mt[243] this[66740]))
        (556008 'move' tmp[555984](556005 '_paramFoldLogical' tmp[555985] tmp[556001]))
      }
      (509707 'move' ret[509697](509706 'deref' tmp[555984]))
      gotoReturn _end_lastAsInt[509695] _end_lastAsInt[509695]
    }
    label _end_lastAsInt[509695]
    (509699 return ret[509697])
  }
  function range[64319](?).low[66780](arg _mt[66785]:_MT[238], arg this[66782]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509713] "RVV" "temp"
    unknown call_tmp[617521] "expr temp" "maybe param" "maybe type" "temp"
    (617524 'move' call_tmp[617521](374080 call _low _mt[243] this[66782]))
    unknown call_tmp[617526] "expr temp" "maybe param" "maybe type" "temp"
    (617529 'move' call_tmp[617526](66790 call(374075 call (partial) chpl_intToIdx _mt[243] this[66782]) call_tmp[617521]))
    (509718 'move' ret[509713](509717 'deref' call_tmp[617526]))
    (509715 return ret[509713])
  }
  function range[64319](?).high[66799](arg _mt[66804]:_MT[238], arg this[66801]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509722] "RVV" "temp"
    unknown call_tmp[617535] "expr temp" "maybe param" "maybe type" "temp"
    (617538 'move' call_tmp[617535](374089 call _high _mt[243] this[66801]))
    unknown call_tmp[617540] "expr temp" "maybe param" "maybe type" "temp"
    (617543 'move' call_tmp[617540](66809 call(374084 call (partial) chpl_intToIdx _mt[243] this[66801]) call_tmp[617535]))
    (509727 'move' ret[509722](509726 'deref' call_tmp[617540]))
    (509724 return ret[509722])
  }
  function range[64319](?).alignedLow[66818](arg _mt[66823]:_MT[238], arg this[66820]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509731] "RVV" "temp"
    unknown call_tmp[617549] "expr temp" "maybe param" "maybe type" "temp"
    (617552 'move' call_tmp[617549](66828 call alignedLowAsInt _mt[243] this[66820]))
    unknown call_tmp[617554] "expr temp" "maybe param" "maybe type" "temp"
    (617557 'move' call_tmp[617554](66832 call(374098 call (partial) chpl_intToIdx _mt[243] this[66820]) call_tmp[617549]))
    unknown call_tmp[617561] "expr temp" "maybe param" "maybe type" "temp"
    (617564 'move' call_tmp[617561](509736 call idxType _mt[243] this[66820]))
    (509740 'move' ret[509731](509739 'coerce' call_tmp[617554] call_tmp[617561]))
    (509733 return ret[509731])
  }
  { scopeless type
    (374094 call idxType _mt[243] this[66820])
  }
  function range[64319](?).alignedLowAsInt[66842](arg _mt[66847]:_MT[238], arg this[66844]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509744] "RVV" "temp"
    unknown call_tmp[617570] "expr temp" "maybe param" "maybe type" "temp"
    (617573 'move' call_tmp[617570](374103 call stridable _mt[243] this[66844]))
    unknown call_tmp[617575] "expr temp" "maybe param" "maybe type" "temp"
    (617578 'move' call_tmp[617575](66850 call ! call_tmp[617570]))
    unknown call_tmp[617580] "expr temp" "maybe param" "maybe type" "temp"
    (617583 'move' call_tmp[617580](66866 call _cond_test call_tmp[617575]))
    if call_tmp[617580]
    {
      unknown call_tmp[617587] "expr temp" "maybe param" "maybe type" "temp"
      (617590 'move' call_tmp[617587](374108 call _low _mt[243] this[66844]))
      (509749 'move' ret[509744](509748 'deref' call_tmp[617587]))
      gotoReturn _end_alignedLowAsInt[509742] _end_alignedLowAsInt[509742]
    }
    {
      unknown call_tmp[617594] "expr temp" "maybe param" "maybe type" "temp"
      (617597 'move' call_tmp[617594](374113 call _low _mt[243] this[66844]))
      unknown call_tmp[617601] "expr temp" "maybe param" "maybe type" "temp"
      (617604 'move' call_tmp[617601](374118 call _alignment _mt[243] this[66844]))
      unknown call_tmp[617608] "expr temp" "maybe param" "maybe type" "temp"
      (617611 'move' call_tmp[617608](374123 call _low _mt[243] this[66844]))
      unknown call_tmp[617615] "expr temp" "maybe param" "maybe type" "temp"
      (617618 'move' call_tmp[617615](374127 call stride _mt[243] this[66844]))
      unknown call_tmp[617620] "expr temp" "maybe param" "maybe type" "temp"
      (617623 'move' call_tmp[617620](66861 call chpl__diffMod call_tmp[617601] call_tmp[617608] call_tmp[617615]))
      unknown call_tmp[617625] "expr temp" "maybe param" "maybe type" "temp"
      (617628 'move' call_tmp[617625](66862 call + call_tmp[617594] call_tmp[617620]))
      (509754 'move' ret[509744](509753 'deref' call_tmp[617625]))
      gotoReturn _end_alignedLowAsInt[509742] _end_alignedLowAsInt[509742]
    }
    label _end_alignedLowAsInt[509742]
    (509746 return ret[509744])
  }
  function range[64319](?).alignedHigh[66878](arg _mt[66883]:_MT[238], arg this[66880]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509760] "RVV" "temp"
    unknown call_tmp[617634] "expr temp" "maybe param" "maybe type" "temp"
    (617637 'move' call_tmp[617634](66888 call alignedHighAsInt _mt[243] this[66880]))
    unknown call_tmp[617639] "expr temp" "maybe param" "maybe type" "temp"
    (617642 'move' call_tmp[617639](66892 call(374136 call (partial) chpl_intToIdx _mt[243] this[66880]) call_tmp[617634]))
    unknown call_tmp[617646] "expr temp" "maybe param" "maybe type" "temp"
    (617649 'move' call_tmp[617646](509765 call idxType _mt[243] this[66880]))
    (509769 'move' ret[509760](509768 'coerce' call_tmp[617639] call_tmp[617646]))
    (509762 return ret[509760])
  }
  { scopeless type
    (374132 call idxType _mt[243] this[66880])
  }
  function range[64319](?).alignedHighAsInt[66902](arg _mt[66907]:_MT[238], arg this[66904]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509773] "RVV" "temp"
    unknown call_tmp[617655] "expr temp" "maybe param" "maybe type" "temp"
    (617658 'move' call_tmp[617655](374141 call stridable _mt[243] this[66904]))
    unknown call_tmp[617660] "expr temp" "maybe param" "maybe type" "temp"
    (617663 'move' call_tmp[617660](66910 call ! call_tmp[617655]))
    unknown call_tmp[617665] "expr temp" "maybe param" "maybe type" "temp"
    (617668 'move' call_tmp[617665](66926 call _cond_test call_tmp[617660]))
    if call_tmp[617665]
    {
      unknown call_tmp[617672] "expr temp" "maybe param" "maybe type" "temp"
      (617675 'move' call_tmp[617672](374146 call _high _mt[243] this[66904]))
      (509778 'move' ret[509773](509777 'deref' call_tmp[617672]))
      gotoReturn _end_alignedHighAsInt[509771] _end_alignedHighAsInt[509771]
    }
    {
      unknown call_tmp[617679] "expr temp" "maybe param" "maybe type" "temp"
      (617682 'move' call_tmp[617679](374151 call _high _mt[243] this[66904]))
      unknown call_tmp[617686] "expr temp" "maybe param" "maybe type" "temp"
      (617689 'move' call_tmp[617686](374156 call _high _mt[243] this[66904]))
      unknown call_tmp[617693] "expr temp" "maybe param" "maybe type" "temp"
      (617696 'move' call_tmp[617693](374161 call _alignment _mt[243] this[66904]))
      unknown call_tmp[617700] "expr temp" "maybe param" "maybe type" "temp"
      (617703 'move' call_tmp[617700](374165 call stride _mt[243] this[66904]))
      unknown call_tmp[617705] "expr temp" "maybe param" "maybe type" "temp"
      (617708 'move' call_tmp[617705](66921 call chpl__diffMod call_tmp[617686] call_tmp[617693] call_tmp[617700]))
      unknown call_tmp[617710] "expr temp" "maybe param" "maybe type" "temp"
      (617713 'move' call_tmp[617710](66922 call - call_tmp[617679] call_tmp[617705]))
      (509783 'move' ret[509773](509782 'deref' call_tmp[617710]))
      gotoReturn _end_alignedHighAsInt[509771] _end_alignedHighAsInt[509771]
    }
    label _end_alignedHighAsInt[509771]
    (509775 return ret[509773])
  }
  function range[64319](?).isEmpty[66938](arg _mt[66943]:_MT[238], arg this[66940]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509789] "RVV" "temp"
    unknown tmp[419420] "maybe param" "temp"
    (419431 'move' tmp[419420] 1)
    unknown call_tmp[617715] "expr temp" "maybe param" "maybe type" "temp"
    (617718 'move' call_tmp[617715](419433 call _cond_invalid tmp[419420]))
    if call_tmp[617715]
    {
      (419436 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556015] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556016] "maybe param" "temp"
    unknown call_tmp[617720] "expr temp" "maybe param" "maybe type" "temp"
    (617723 'move' call_tmp[617720](419421 call isTrue tmp[419420]))
    (556021 'move' tmp[556016](556019 call _cond_test call_tmp[617720]))
    if tmp[556016]
    {
      unknown tmp[556023] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617727] "expr temp" "maybe param" "maybe type" "temp"
      (617730 'move' call_tmp[617727](66948 call(374170 call (partial) isAmbiguous _mt[243] this[66940])))
      (556025 'move' tmp[556023](419424 call isTrue call_tmp[617727]))
      (556030 'move' tmp[556015](556027 '_paramFoldLogical' tmp[556016] tmp[556023]))
    }
    {
      (556035 'move' tmp[556015](556032 '_paramFoldLogical' tmp[556016] 0))
    }
    unknown call_tmp[617732] "expr temp" "maybe param" "maybe type" "temp"
    (617735 'move' call_tmp[617732](66993 call _cond_test tmp[556015]))
    if call_tmp[617732]
    {
      (66973 call boundsCheckHalt module=[255] HaltWrappers[210016] "isEmpty() is invoked on an ambiguously-aligned range")
      (357589 'referenced modules list' HaltWrappers[210016])
    }
    {
      unknown tmp[419399] "maybe param" "temp"
      (419410 'move' tmp[419399](66978 call isBoundedRange this[66940]))
      unknown call_tmp[617737] "expr temp" "maybe param" "maybe type" "temp"
      (617740 'move' call_tmp[617737](419412 call _cond_invalid tmp[419399]))
      if call_tmp[617737]
      {
        (419415 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556042] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556043] "maybe param" "temp"
      unknown call_tmp[617742] "expr temp" "maybe param" "maybe type" "temp"
      (617745 'move' call_tmp[617742](419400 call isTrue tmp[419399]))
      (556048 'move' tmp[556043](556046 call _cond_test call_tmp[617742]))
      if tmp[556043]
      {
        unknown tmp[556050] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617749] "expr temp" "maybe param" "maybe type" "temp"
        (617752 'move' call_tmp[617749](66980 call alignedLow _mt[243] this[66940]))
        unknown call_tmp[617756] "expr temp" "maybe param" "maybe type" "temp"
        (617759 'move' call_tmp[617756](66984 call alignedHigh _mt[243] this[66940]))
        unknown call_tmp[617761] "expr temp" "maybe param" "maybe type" "temp"
        (617764 'move' call_tmp[617761](66987 call > call_tmp[617749] call_tmp[617756]))
        (556052 'move' tmp[556050](419403 call isTrue call_tmp[617761]))
        (556057 'move' tmp[556042](556054 '_paramFoldLogical' tmp[556043] tmp[556050]))
      }
      {
        (556062 'move' tmp[556042](556059 '_paramFoldLogical' tmp[556043] 0))
      }
      (509794 'move' ret[509789](509793 'deref' tmp[556042]))
      gotoReturn _end_isEmpty[509787] _end_isEmpty[509787]
    }
    label _end_isEmpty[509787]
    (509791 return ret[509789])
  }
  function range[64319](?).length[67005](arg _mt[67010]:_MT[238], arg this[67007]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509800] "RVV" "temp"
    unknown call_tmp[617766] "expr temp" "maybe param" "maybe type" "temp"
    (617769 'move' call_tmp[617766](67048 call + "'range.length' is deprecated - " "please use 'range.size' instead"))
    (67051 call compilerWarning call_tmp[617766])
    (475403 'end of statement')
    unknown call_tmp[617773] "expr temp" "maybe param" "maybe type" "temp"
    (617776 'move' call_tmp[617773](67055 call size _mt[243] this[67007]))
    unknown call_tmp[617780] "expr temp" "maybe param" "maybe type" "temp"
    (617783 'move' call_tmp[617780](509805 call intIdxType _mt[243] this[67007]))
    (509809 'move' ret[509800](509808 'coerce' call_tmp[617773] call_tmp[617780]))
    (509802 return ret[509800])
  }
  { scopeless type
    (374175 call intIdxType _mt[243] this[67007])
  }
  function range[64319](?).size[67066](arg _mt[67071]:_MT[238], arg this[67068]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[509813] "RVV" "temp"
    unknown call_tmp[617787] "expr temp" "maybe param" "maybe type" "temp"
    (617790 'move' call_tmp[617787](67077 call isBoundedRange this[67068]))
    unknown call_tmp[617792] "expr temp" "maybe param" "maybe type" "temp"
    (617795 'move' call_tmp[617792](67078 call ! call_tmp[617787]))
    unknown call_tmp[617797] "expr temp" "maybe param" "maybe type" "temp"
    (617800 'move' call_tmp[617797](67101 call _cond_test call_tmp[617792]))
    if call_tmp[617797]
    {
      (67099 call compilerError "'size' is not defined on unbounded ranges")
    }
    unknown call_tmp[617804] "maybe param" "maybe type" "temp"
    (617807 'move' call_tmp[617804](67108 call alignedHighAsInt _mt[243] this[67068]))
    const ah[67111] "dead at end of block" "const" "insert auto destroy"
    (541063 'init var' ah[67111] call_tmp[617804])
    unknown call_tmp[617811] "maybe param" "maybe type" "temp"
    (617814 'move' call_tmp[617811](67115 call alignedLowAsInt _mt[243] this[67068]))
    const al[67118] "dead at end of block" "const" "insert auto destroy"
    (541065 'init var' al[67118] call_tmp[617811])
    (67121 'end of statement')
    unknown call_tmp[617816] "expr temp" "maybe param" "maybe type" "temp"
    (617819 'move' call_tmp[617816](67124 call > al[67118] ah[67111]))
    unknown call_tmp[617821] "expr temp" "maybe param" "maybe type" "temp"
    (617824 'move' call_tmp[617821](67132 call _cond_test call_tmp[617816]))
    if call_tmp[617821]
    {
      unknown call_tmp[617828] "expr temp" "maybe param" "maybe type" "temp"
      (617831 'move' call_tmp[617828](374186 call intIdxType _mt[243] this[67068]))
      unknown call_tmp[617833] "expr temp" "maybe param" "maybe type" "temp"
      (617836 'move' call_tmp[617833](67128 call _cast call_tmp[617828] 0))
      unknown call_tmp[617840] "expr temp" "maybe param" "maybe type" "temp"
      (617843 'move' call_tmp[617840](509818 call intIdxType _mt[243] this[67068]))
      (509822 'move' ret[509813](509821 'coerce' call_tmp[617833] call_tmp[617840]))
      gotoReturn _end_size[509811] _end_size[509811]
    }
    unknown call_tmp[617847] "expr temp" "maybe param" "maybe type" "temp"
    (617850 'move' call_tmp[617847](374190 call intIdxType _mt[243] this[67068]))
    unknown call_tmp[617854] "expr temp" "maybe param" "maybe type" "temp"
    (617857 'move' call_tmp[617854](67139 call stride _mt[243] this[67068]))
    unknown call_tmp[617859] "expr temp" "maybe param" "maybe type" "temp"
    (617862 'move' call_tmp[617859](67143 call abs call_tmp[617854]))
    unknown call_tmp[617864] "maybe param" "maybe type" "temp"
    (617867 'move' call_tmp[617864](67145 call _cast call_tmp[617847] call_tmp[617859]))
    const s[67147] "dead at end of block" "const" "insert auto destroy"
    (541067 'init var' s[67147] call_tmp[617864])
    (67150 'end of statement')
    unknown call_tmp[617869] "expr temp" "maybe param" "maybe type" "temp"
    (617872 'move' call_tmp[617869](67153 call - ah[67111] al[67118]))
    unknown call_tmp[617874] "expr temp" "maybe param" "maybe type" "temp"
    (617877 'move' call_tmp[617874](67156 call / call_tmp[617869] s[67147]))
    unknown call_tmp[617881] "expr temp" "maybe param" "maybe type" "temp"
    (617884 'move' call_tmp[617881](374197 call intIdxType _mt[243] this[67068]))
    unknown call_tmp[617886] "expr temp" "maybe param" "maybe type" "temp"
    (617889 'move' call_tmp[617886](67160 call _cast call_tmp[617881] 1))
    unknown call_tmp[617891] "expr temp" "maybe param" "maybe type" "temp"
    (617894 'move' call_tmp[617891](67162 call + call_tmp[617874] call_tmp[617886]))
    unknown call_tmp[617898] "expr temp" "maybe param" "maybe type" "temp"
    (617901 'move' call_tmp[617898](509827 call intIdxType _mt[243] this[67068]))
    (509831 'move' ret[509813](509830 'coerce' call_tmp[617891] call_tmp[617898]))
    gotoReturn _end_size[509811] _end_size[509811]
    (475407 'end of statement' ah[67111] al[67118] s[67147])
    label _end_size[509811]
    (509815 return ret[509813])
  }
  { scopeless type
    (374179 call intIdxType _mt[243] this[67068])
  }
  function range[64319](?).hasFirst[67172](arg _mt[67177]:_MT[238], arg this[67174]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509837] "RVV" "param" "temp"
    unknown call_tmp[617907] "expr temp" "maybe param" "maybe type" "temp"
    (617910 'move' call_tmp[617907](67191 call(374210 call (partial) hasLowBound _mt[243] this[67174])))
    (509842 'move' ret[509837](509841 'deref' call_tmp[617907]))
    (509839 return ret[509837])
  }
  where {
    unknown tmp[419441] "maybe param" "temp"
    unknown call_tmp[617914] "expr temp" "maybe param" "maybe type" "temp"
    (617917 'move' call_tmp[617914](374202 call stridable _mt[243] this[67174]))
    (419452 'move' tmp[419441](67180 call ! call_tmp[617914]))
    unknown call_tmp[617919] "expr temp" "maybe param" "maybe type" "temp"
    (617922 'move' call_tmp[617919](419454 call _cond_invalid tmp[419441]))
    if call_tmp[617919]
    {
      (419457 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556069] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556070] "maybe param" "temp"
    unknown call_tmp[617924] "expr temp" "maybe param" "maybe type" "temp"
    (617927 'move' call_tmp[617924](419442 call isTrue tmp[419441]))
    (556075 'move' tmp[556070](556073 call _cond_test call_tmp[617924]))
    if tmp[556070]
    {
      unknown tmp[556077] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617931] "expr temp" "maybe param" "maybe type" "temp"
      (617934 'move' call_tmp[617931](67184 call(374206 call (partial) hasHighBound _mt[243] this[67174])))
      unknown call_tmp[617936] "expr temp" "maybe param" "maybe type" "temp"
      (617939 'move' call_tmp[617936](67185 call ! call_tmp[617931]))
      (556079 'move' tmp[556077](419445 call isTrue call_tmp[617936]))
      (556084 'move' tmp[556069](556081 '_paramFoldLogical' tmp[556070] tmp[556077]))
    }
    {
      (556089 'move' tmp[556069](556086 '_paramFoldLogical' tmp[556070] 0))
    }
    (748247 call chpl_statementLevelSymbol tmp[556069])
  }
  function range[64319](?).hasFirst[67201](arg _mt[67206]:_MT[238], arg this[67203]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509846] "RVV" "temp"
    unknown tmp[419462] "maybe param" "temp"
    (419473 'move' tmp[419462](67210 call(374214 call (partial) isAmbiguous _mt[243] this[67203])))
    unknown call_tmp[617943] "expr temp" "maybe param" "maybe type" "temp"
    (617946 'move' call_tmp[617943](419475 call _cond_invalid tmp[419462]))
    if call_tmp[617943]
    {
      (419478 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556096] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556097] "maybe param" "temp"
    unknown call_tmp[617948] "expr temp" "maybe param" "maybe type" "temp"
    (617951 'move' call_tmp[617948](419463 call isTrue tmp[419462]))
    (556102 'move' tmp[556097](556100 call _cond_test call_tmp[617948]))
    if tmp[556097]
    {
      (556107 'move' tmp[556096](556104 '_paramFoldLogical' tmp[556097] 1))
    }
    {
      unknown tmp[556109] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617955] "expr temp" "maybe param" "maybe type" "temp"
      (617958 'move' call_tmp[617955](67213 call(374218 call (partial) isEmpty _mt[243] this[67203])))
      (556111 'move' tmp[556109](419467 call isTrue call_tmp[617955]))
      (556116 'move' tmp[556096](556113 '_paramFoldLogical' tmp[556097] tmp[556109]))
    }
    unknown tmp[556154] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556155] "maybe param" "temp"
    (556160 'move' tmp[556155](556158 call _cond_test tmp[556096]))
    if tmp[556155]
    {
      (556165 'move' tmp[556154](556162 '_paramFoldLogical' tmp[556155] 0))
    }
    {
      unknown tmp[556123] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556124] "maybe param" "temp"
      unknown call_tmp[617962] "expr temp" "maybe param" "maybe type" "temp"
      (617965 'move' call_tmp[617962](374222 call stride _mt[243] this[67203]))
      unknown call_tmp[617967] "expr temp" "maybe param" "maybe type" "temp"
      (617970 'move' call_tmp[617967](67219 call > call_tmp[617962] 0))
      (556129 'move' tmp[556124](556127 call _cond_test call_tmp[617967]))
      if tmp[556124]
      {
        unknown tmp[556131] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556133 'move' tmp[556131](67223 call(374226 call (partial) hasLowBound _mt[243] this[67203])))
        (556138 'move' tmp[556123](556135 '_paramFoldLogical' tmp[556124] tmp[556131]))
      }
      {
        unknown tmp[556140] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556142 'move' tmp[556140](67226 call(374230 call (partial) hasHighBound _mt[243] this[67203])))
        (556147 'move' tmp[556123](556144 '_paramFoldLogical' tmp[556124] tmp[556140]))
      }
      (556170 'move' tmp[556154](556167 '_paramFoldLogical' tmp[556155] tmp[556123]))
    }
    (509851 'move' ret[509846](509850 'deref' tmp[556154]))
    (509848 return ret[509846])
  }
  function range[64319](?).hasLast[67241](arg _mt[67246]:_MT[238], arg this[67243]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509855] "RVV" "param" "temp"
    unknown call_tmp[617978] "expr temp" "maybe param" "maybe type" "temp"
    (617981 'move' call_tmp[617978](67260 call(374243 call (partial) hasHighBound _mt[243] this[67243])))
    (509860 'move' ret[509855](509859 'deref' call_tmp[617978]))
    (509857 return ret[509855])
  }
  where {
    unknown tmp[419483] "maybe param" "temp"
    unknown call_tmp[617985] "expr temp" "maybe param" "maybe type" "temp"
    (617988 'move' call_tmp[617985](374235 call stridable _mt[243] this[67243]))
    (419494 'move' tmp[419483](67249 call ! call_tmp[617985]))
    unknown call_tmp[617990] "expr temp" "maybe param" "maybe type" "temp"
    (617993 'move' call_tmp[617990](419496 call _cond_invalid tmp[419483]))
    if call_tmp[617990]
    {
      (419499 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556177] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556178] "maybe param" "temp"
    unknown call_tmp[617995] "expr temp" "maybe param" "maybe type" "temp"
    (617998 'move' call_tmp[617995](419484 call isTrue tmp[419483]))
    (556183 'move' tmp[556178](556181 call _cond_test call_tmp[617995]))
    if tmp[556178]
    {
      unknown tmp[556185] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618002] "expr temp" "maybe param" "maybe type" "temp"
      (618005 'move' call_tmp[618002](67253 call(374239 call (partial) hasLowBound _mt[243] this[67243])))
      unknown call_tmp[618007] "expr temp" "maybe param" "maybe type" "temp"
      (618010 'move' call_tmp[618007](67254 call ! call_tmp[618002]))
      (556187 'move' tmp[556185](419487 call isTrue call_tmp[618007]))
      (556192 'move' tmp[556177](556189 '_paramFoldLogical' tmp[556178] tmp[556185]))
    }
    {
      (556197 'move' tmp[556177](556194 '_paramFoldLogical' tmp[556178] 0))
    }
    (748249 call chpl_statementLevelSymbol tmp[556177])
  }
  function range[64319](?).hasLast[67270](arg _mt[67275]:_MT[238], arg this[67272]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509864] "RVV" "temp"
    unknown tmp[419504] "maybe param" "temp"
    (419515 'move' tmp[419504](67279 call(374247 call (partial) isAmbiguous _mt[243] this[67272])))
    unknown call_tmp[618014] "expr temp" "maybe param" "maybe type" "temp"
    (618017 'move' call_tmp[618014](419517 call _cond_invalid tmp[419504]))
    if call_tmp[618014]
    {
      (419520 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556204] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556205] "maybe param" "temp"
    unknown call_tmp[618019] "expr temp" "maybe param" "maybe type" "temp"
    (618022 'move' call_tmp[618019](419505 call isTrue tmp[419504]))
    (556210 'move' tmp[556205](556208 call _cond_test call_tmp[618019]))
    if tmp[556205]
    {
      (556215 'move' tmp[556204](556212 '_paramFoldLogical' tmp[556205] 1))
    }
    {
      unknown tmp[556217] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618026] "expr temp" "maybe param" "maybe type" "temp"
      (618029 'move' call_tmp[618026](67282 call(374251 call (partial) isEmpty _mt[243] this[67272])))
      (556219 'move' tmp[556217](419509 call isTrue call_tmp[618026]))
      (556224 'move' tmp[556204](556221 '_paramFoldLogical' tmp[556205] tmp[556217]))
    }
    unknown tmp[556262] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556263] "maybe param" "temp"
    (556268 'move' tmp[556263](556266 call _cond_test tmp[556204]))
    if tmp[556263]
    {
      (556273 'move' tmp[556262](556270 '_paramFoldLogical' tmp[556263] 0))
    }
    {
      unknown tmp[556231] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556232] "maybe param" "temp"
      unknown call_tmp[618033] "expr temp" "maybe param" "maybe type" "temp"
      (618036 'move' call_tmp[618033](374255 call stride _mt[243] this[67272]))
      unknown call_tmp[618038] "expr temp" "maybe param" "maybe type" "temp"
      (618041 'move' call_tmp[618038](67288 call > call_tmp[618033] 0))
      (556237 'move' tmp[556232](556235 call _cond_test call_tmp[618038]))
      if tmp[556232]
      {
        unknown tmp[556239] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556241 'move' tmp[556239](67292 call(374259 call (partial) hasHighBound _mt[243] this[67272])))
        (556246 'move' tmp[556231](556243 '_paramFoldLogical' tmp[556232] tmp[556239]))
      }
      {
        unknown tmp[556248] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556250 'move' tmp[556248](67295 call(374263 call (partial) hasLowBound _mt[243] this[67272])))
        (556255 'move' tmp[556231](556252 '_paramFoldLogical' tmp[556232] tmp[556248]))
      }
      (556278 'move' tmp[556262](556275 '_paramFoldLogical' tmp[556263] tmp[556231]))
    }
    (509869 'move' ret[509864](509868 'deref' tmp[556262]))
    (509866 return ret[509864])
  }
  function range[64319](?).isNaturallyAligned[67310](arg _mt[67315]:_MT[238], arg this[67312]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method"
  {
    unknown ret[509873] "RVV" "temp"
    unknown call_tmp[618049] "expr temp" "maybe param" "maybe type" "temp"
    (618052 'move' call_tmp[618049](374272 call stride _mt[243] this[67312]))
    unknown call_tmp[618054] "expr temp" "maybe param" "maybe type" "temp"
    (618057 'move' call_tmp[618054](67332 call > call_tmp[618049] 0))
    unknown call_tmp[618059] "expr temp" "maybe param" "maybe type" "temp"
    (618062 'move' call_tmp[618059](67343 call _cond_test call_tmp[618054]))
    if call_tmp[618059]
    {
      unknown call_tmp[618066] "expr temp" "maybe param" "maybe type" "temp"
      (618069 'move' call_tmp[618066](67335 call alignedLowAsInt _mt[243] this[67312]))
      unknown call_tmp[618073] "expr temp" "maybe param" "maybe type" "temp"
      (618076 'move' call_tmp[618073](374277 call _low _mt[243] this[67312]))
      unknown call_tmp[618078] "expr temp" "maybe param" "maybe type" "temp"
      (618081 'move' call_tmp[618078](67339 call == call_tmp[618066] call_tmp[618073]))
      (509878 'move' ret[509873](509877 'deref' call_tmp[618078]))
      gotoReturn _end_isNaturallyAligned[509871] _end_isNaturallyAligned[509871]
    }
    unknown call_tmp[618085] "expr temp" "maybe param" "maybe type" "temp"
    (618088 'move' call_tmp[618085](374281 call stride _mt[243] this[67312]))
    unknown call_tmp[618090] "expr temp" "maybe param" "maybe type" "temp"
    (618093 'move' call_tmp[618090](67351 call < call_tmp[618085] 0))
    unknown call_tmp[618095] "expr temp" "maybe param" "maybe type" "temp"
    (618098 'move' call_tmp[618095](67362 call _cond_test call_tmp[618090]))
    if call_tmp[618095]
    {
      unknown call_tmp[618102] "expr temp" "maybe param" "maybe type" "temp"
      (618105 'move' call_tmp[618102](67354 call alignedHighAsInt _mt[243] this[67312]))
      unknown call_tmp[618109] "expr temp" "maybe param" "maybe type" "temp"
      (618112 'move' call_tmp[618109](374286 call _high _mt[243] this[67312]))
      unknown call_tmp[618114] "expr temp" "maybe param" "maybe type" "temp"
      (618117 'move' call_tmp[618114](67358 call == call_tmp[618102] call_tmp[618109]))
      (509883 'move' ret[509873](509882 'deref' call_tmp[618114]))
      gotoReturn _end_isNaturallyAligned[509871] _end_isNaturallyAligned[509871]
    }
    (509888 'move' ret[509873](509887 'deref' 0))
    label _end_isNaturallyAligned[509871]
    (509875 return ret[509873])
  }
  where {
    unknown tmp[419525] "maybe param" "temp"
    (419536 'move' tmp[419525](374268 call stridable _mt[243] this[67312]))
    unknown call_tmp[618121] "expr temp" "maybe param" "maybe type" "temp"
    (618124 'move' call_tmp[618121](419538 call _cond_invalid tmp[419525]))
    if call_tmp[618121]
    {
      (419541 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556285] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556286] "maybe param" "temp"
    unknown call_tmp[618126] "expr temp" "maybe param" "maybe type" "temp"
    (618129 'move' call_tmp[618126](419526 call isTrue tmp[419525]))
    (556291 'move' tmp[556286](556289 call _cond_test call_tmp[618126]))
    if tmp[556286]
    {
      unknown tmp[556293] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618133] "expr temp" "maybe param" "maybe type" "temp"
      (618136 'move' call_tmp[618133](67319 call boundedType _mt[243] this[67312]))
      unknown call_tmp[618138] "expr temp" "maybe param" "maybe type" "temp"
      (618141 'move' call_tmp[618138](67326 call == call_tmp[618133] bounded[64208]))
      (556295 'move' tmp[556293](419529 call isTrue call_tmp[618138]))
      (556300 'move' tmp[556285](556297 '_paramFoldLogical' tmp[556286] tmp[556293]))
    }
    {
      (556305 'move' tmp[556285](556302 '_paramFoldLogical' tmp[556286] 0))
    }
    (748251 call chpl_statementLevelSymbol tmp[556285])
  }
  function range[64319](?).isNaturallyAligned[67376](arg _mt[67381]:_MT[238], arg this[67378]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509892] "RVV" "param" "temp"
    (509897 'move' ret[509892](509896 'deref' 1))
    (509894 return ret[509892])
  }
  where {
    unknown tmp[419546] "maybe param" "temp"
    unknown call_tmp[618145] "expr temp" "maybe param" "maybe type" "temp"
    (618148 'move' call_tmp[618145](374291 call stridable _mt[243] this[67378]))
    (419557 'move' tmp[419546](67384 call ! call_tmp[618145]))
    unknown call_tmp[618150] "expr temp" "maybe param" "maybe type" "temp"
    (618153 'move' call_tmp[618150](419559 call _cond_invalid tmp[419546]))
    if call_tmp[618150]
    {
      (419562 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556312] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556313] "maybe param" "temp"
    unknown call_tmp[618155] "expr temp" "maybe param" "maybe type" "temp"
    (618158 'move' call_tmp[618155](419547 call isTrue tmp[419546]))
    (556318 'move' tmp[556313](556316 call _cond_test call_tmp[618155]))
    if tmp[556313]
    {
      unknown tmp[556320] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618162] "expr temp" "maybe param" "maybe type" "temp"
      (618165 'move' call_tmp[618162](67387 call boundedType _mt[243] this[67378]))
      unknown call_tmp[618167] "expr temp" "maybe param" "maybe type" "temp"
      (618170 'move' call_tmp[618167](67394 call == call_tmp[618162] bounded[64208]))
      (556322 'move' tmp[556320](419550 call isTrue call_tmp[618167]))
      (556327 'move' tmp[556312](556324 '_paramFoldLogical' tmp[556313] tmp[556320]))
    }
    {
      (556332 'move' tmp[556312](556329 '_paramFoldLogical' tmp[556313] 0))
    }
    (748253 call chpl_statementLevelSymbol tmp[556312])
  }
  function range[64319](?).isNaturallyAligned[67408](arg _mt[67413]:_MT[238], arg this[67410]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509901] "RVV" "temp"
    unknown call_tmp[618174] "expr temp" "maybe param" "maybe type" "temp"
    (618177 'move' call_tmp[618174](67431 call alignedLowAsInt _mt[243] this[67410]))
    unknown call_tmp[618181] "expr temp" "maybe param" "maybe type" "temp"
    (618184 'move' call_tmp[618181](374301 call _low _mt[243] this[67410]))
    unknown call_tmp[618186] "expr temp" "maybe param" "maybe type" "temp"
    (618189 'move' call_tmp[618186](67435 call == call_tmp[618174] call_tmp[618181]))
    (509906 'move' ret[509901](509905 'deref' call_tmp[618186]))
    (509903 return ret[509901])
  }
  where {
    unknown tmp[419567] "maybe param" "temp"
    unknown call_tmp[618193] "expr temp" "maybe param" "maybe type" "temp"
    (618196 'move' call_tmp[618193](374296 call stridable _mt[243] this[67410]))
    (419578 'move' tmp[419567](67416 call ! call_tmp[618193]))
    unknown call_tmp[618198] "expr temp" "maybe param" "maybe type" "temp"
    (618201 'move' call_tmp[618198](419580 call _cond_invalid tmp[419567]))
    if call_tmp[618198]
    {
      (419583 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556339] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556340] "maybe param" "temp"
    unknown call_tmp[618203] "expr temp" "maybe param" "maybe type" "temp"
    (618206 'move' call_tmp[618203](419568 call isTrue tmp[419567]))
    (556345 'move' tmp[556340](556343 call _cond_test call_tmp[618203]))
    if tmp[556340]
    {
      unknown tmp[556347] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618210] "expr temp" "maybe param" "maybe type" "temp"
      (618213 'move' call_tmp[618210](67419 call boundedType _mt[243] this[67410]))
      unknown call_tmp[618215] "expr temp" "maybe param" "maybe type" "temp"
      (618218 'move' call_tmp[618215](67426 call == call_tmp[618210] boundedLow[64210]))
      (556349 'move' tmp[556347](419571 call isTrue call_tmp[618215]))
      (556354 'move' tmp[556339](556351 '_paramFoldLogical' tmp[556340] tmp[556347]))
    }
    {
      (556359 'move' tmp[556339](556356 '_paramFoldLogical' tmp[556340] 0))
    }
    (748255 call chpl_statementLevelSymbol tmp[556339])
  }
  function range[64319](?).isNaturallyAligned[67446](arg _mt[67451]:_MT[238], arg this[67448]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509910] "RVV" "temp"
    unknown tmp[419609] "maybe param" "temp"
    unknown call_tmp[618222] "expr temp" "maybe param" "maybe type" "temp"
    (618225 'move' call_tmp[618222](374310 call stride _mt[243] this[67448]))
    (419620 'move' tmp[419609](67468 call > call_tmp[618222] 0))
    unknown call_tmp[618227] "expr temp" "maybe param" "maybe type" "temp"
    (618230 'move' call_tmp[618227](419622 call _cond_invalid tmp[419609]))
    if call_tmp[618227]
    {
      (419625 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556366] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556367] "maybe param" "temp"
    unknown call_tmp[618232] "expr temp" "maybe param" "maybe type" "temp"
    (618235 'move' call_tmp[618232](419610 call isTrue tmp[419609]))
    (556372 'move' tmp[556367](556370 call _cond_test call_tmp[618232]))
    if tmp[556367]
    {
      unknown tmp[556374] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618239] "expr temp" "maybe param" "maybe type" "temp"
      (618242 'move' call_tmp[618239](67471 call alignedLowAsInt _mt[243] this[67448]))
      unknown call_tmp[618246] "expr temp" "maybe param" "maybe type" "temp"
      (618249 'move' call_tmp[618246](374315 call _low _mt[243] this[67448]))
      unknown call_tmp[618251] "expr temp" "maybe param" "maybe type" "temp"
      (618254 'move' call_tmp[618251](67475 call == call_tmp[618239] call_tmp[618246]))
      (556376 'move' tmp[556374](419613 call isTrue call_tmp[618251]))
      (556381 'move' tmp[556366](556378 '_paramFoldLogical' tmp[556367] tmp[556374]))
    }
    {
      (556386 'move' tmp[556366](556383 '_paramFoldLogical' tmp[556367] 0))
    }
    (509915 'move' ret[509910](509914 'deref' tmp[556366]))
    (509912 return ret[509910])
  }
  where {
    unknown tmp[419588] "maybe param" "temp"
    (419599 'move' tmp[419588](374306 call stridable _mt[243] this[67448]))
    unknown call_tmp[618258] "expr temp" "maybe param" "maybe type" "temp"
    (618261 'move' call_tmp[618258](419601 call _cond_invalid tmp[419588]))
    if call_tmp[618258]
    {
      (419604 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556393] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556394] "maybe param" "temp"
    unknown call_tmp[618263] "expr temp" "maybe param" "maybe type" "temp"
    (618266 'move' call_tmp[618263](419589 call isTrue tmp[419588]))
    (556399 'move' tmp[556394](556397 call _cond_test call_tmp[618263]))
    if tmp[556394]
    {
      unknown tmp[556401] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618270] "expr temp" "maybe param" "maybe type" "temp"
      (618273 'move' call_tmp[618270](67455 call boundedType _mt[243] this[67448]))
      unknown call_tmp[618275] "expr temp" "maybe param" "maybe type" "temp"
      (618278 'move' call_tmp[618275](67462 call == call_tmp[618270] boundedLow[64210]))
      (556403 'move' tmp[556401](419592 call isTrue call_tmp[618275]))
      (556408 'move' tmp[556393](556405 '_paramFoldLogical' tmp[556394] tmp[556401]))
    }
    {
      (556413 'move' tmp[556393](556410 '_paramFoldLogical' tmp[556394] 0))
    }
    (748257 call chpl_statementLevelSymbol tmp[556393])
  }
  function range[64319](?).isNaturallyAligned[67488](arg _mt[67493]:_MT[238], arg this[67490]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509919] "RVV" "param" "temp"
    (509924 'move' ret[509919](509923 'deref' 0))
    (509921 return ret[509919])
  }
  where {
    unknown tmp[419630] "maybe param" "temp"
    unknown call_tmp[618282] "expr temp" "maybe param" "maybe type" "temp"
    (618285 'move' call_tmp[618282](67496 call boundedType _mt[243] this[67490]))
    (419641 'move' tmp[419630](67503 call == call_tmp[618282] boundedNone[64214]))
    unknown call_tmp[618287] "expr temp" "maybe param" "maybe type" "temp"
    (618290 'move' call_tmp[618287](419643 call _cond_invalid tmp[419630]))
    if call_tmp[618287]
    {
      (419646 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556447] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556448] "maybe param" "temp"
    unknown call_tmp[618292] "expr temp" "maybe param" "maybe type" "temp"
    (618295 'move' call_tmp[618292](419631 call isTrue tmp[419630]))
    (556453 'move' tmp[556448](556451 call _cond_test call_tmp[618292]))
    if tmp[556448]
    {
      (556458 'move' tmp[556447](556455 '_paramFoldLogical' tmp[556448] 1))
    }
    {
      unknown tmp[419651] "maybe param" "temp"
      unknown call_tmp[618299] "expr temp" "maybe param" "maybe type" "temp"
      (618302 'move' call_tmp[618299](374320 call stridable _mt[243] this[67490]))
      (419662 'move' tmp[419651](67506 call ! call_tmp[618299]))
      unknown call_tmp[618304] "expr temp" "maybe param" "maybe type" "temp"
      (618307 'move' call_tmp[618304](419664 call _cond_invalid tmp[419651]))
      if call_tmp[618304]
      {
        (419667 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556420] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556421] "maybe param" "temp"
      unknown call_tmp[618309] "expr temp" "maybe param" "maybe type" "temp"
      (618312 'move' call_tmp[618309](419652 call isTrue tmp[419651]))
      (556426 'move' tmp[556421](556424 call _cond_test call_tmp[618309]))
      if tmp[556421]
      {
        unknown tmp[556428] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618316] "expr temp" "maybe param" "maybe type" "temp"
        (618319 'move' call_tmp[618316](67509 call boundedType _mt[243] this[67490]))
        unknown call_tmp[618321] "expr temp" "maybe param" "maybe type" "temp"
        (618324 'move' call_tmp[618321](67516 call == call_tmp[618316] boundedHigh[64212]))
        (556430 'move' tmp[556428](419655 call isTrue call_tmp[618321]))
        (556435 'move' tmp[556420](556432 '_paramFoldLogical' tmp[556421] tmp[556428]))
      }
      {
        (556440 'move' tmp[556420](556437 '_paramFoldLogical' tmp[556421] 0))
      }
      unknown tmp[556460] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556462 'move' tmp[556460](419635 call isTrue tmp[556420]))
      (556467 'move' tmp[556447](556464 '_paramFoldLogical' tmp[556448] tmp[556460]))
    }
    (748259 call chpl_statementLevelSymbol tmp[556447])
  }
  function range[64319](?).isNaturallyAligned[67532](arg _mt[67537]:_MT[238], arg this[67534]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509928] "RVV" "temp"
    unknown tmp[419693] "maybe param" "temp"
    unknown call_tmp[618328] "expr temp" "maybe param" "maybe type" "temp"
    (618331 'move' call_tmp[618328](374329 call stride _mt[243] this[67534]))
    (419704 'move' tmp[419693](67554 call < call_tmp[618328] 0))
    unknown call_tmp[618333] "expr temp" "maybe param" "maybe type" "temp"
    (618336 'move' call_tmp[618333](419706 call _cond_invalid tmp[419693]))
    if call_tmp[618333]
    {
      (419709 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556474] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556475] "maybe param" "temp"
    unknown call_tmp[618338] "expr temp" "maybe param" "maybe type" "temp"
    (618341 'move' call_tmp[618338](419694 call isTrue tmp[419693]))
    (556480 'move' tmp[556475](556478 call _cond_test call_tmp[618338]))
    if tmp[556475]
    {
      unknown tmp[556482] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618345] "expr temp" "maybe param" "maybe type" "temp"
      (618348 'move' call_tmp[618345](67557 call alignedHighAsInt _mt[243] this[67534]))
      unknown call_tmp[618352] "expr temp" "maybe param" "maybe type" "temp"
      (618355 'move' call_tmp[618352](374334 call _high _mt[243] this[67534]))
      unknown call_tmp[618357] "expr temp" "maybe param" "maybe type" "temp"
      (618360 'move' call_tmp[618357](67561 call == call_tmp[618345] call_tmp[618352]))
      (556484 'move' tmp[556482](419697 call isTrue call_tmp[618357]))
      (556489 'move' tmp[556474](556486 '_paramFoldLogical' tmp[556475] tmp[556482]))
    }
    {
      (556494 'move' tmp[556474](556491 '_paramFoldLogical' tmp[556475] 0))
    }
    (509933 'move' ret[509928](509932 'deref' tmp[556474]))
    (509930 return ret[509928])
  }
  where {
    unknown tmp[419672] "maybe param" "temp"
    (419683 'move' tmp[419672](374325 call stridable _mt[243] this[67534]))
    unknown call_tmp[618364] "expr temp" "maybe param" "maybe type" "temp"
    (618367 'move' call_tmp[618364](419685 call _cond_invalid tmp[419672]))
    if call_tmp[618364]
    {
      (419688 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556501] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556502] "maybe param" "temp"
    unknown call_tmp[618369] "expr temp" "maybe param" "maybe type" "temp"
    (618372 'move' call_tmp[618369](419673 call isTrue tmp[419672]))
    (556507 'move' tmp[556502](556505 call _cond_test call_tmp[618369]))
    if tmp[556502]
    {
      unknown tmp[556509] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618376] "expr temp" "maybe param" "maybe type" "temp"
      (618379 'move' call_tmp[618376](67541 call boundedType _mt[243] this[67534]))
      unknown call_tmp[618381] "expr temp" "maybe param" "maybe type" "temp"
      (618384 'move' call_tmp[618381](67548 call == call_tmp[618376] boundedHigh[64212]))
      (556511 'move' tmp[556509](419676 call isTrue call_tmp[618381]))
      (556516 'move' tmp[556501](556513 '_paramFoldLogical' tmp[556502] tmp[556509]))
    }
    {
      (556521 'move' tmp[556501](556518 '_paramFoldLogical' tmp[556502] 0))
    }
    (748261 call chpl_statementLevelSymbol tmp[556501])
  }
  function range[64319](?).isAmbiguous[67574](arg _mt[67579]:_MT[238], arg this[67576]:range[64319](?) :
  range[64319](?)) param : _unknown[51] "method"
  {
    unknown ret[509937] "RVV" "param" "temp"
    (509942 'move' ret[509937](509941 'deref' 0))
    (509939 return ret[509937])
  }
  where {
    unknown call_tmp[618388] "expr temp" "maybe param" "maybe type" "temp"
    (618391 'move' call_tmp[618388](374339 call stridable _mt[243] this[67576]))
    (67582 call ! call_tmp[618388])
  }
  function range[64319](?).isAmbiguous[67594](arg _mt[67599]:_MT[238], arg this[67596]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[509946] "RVV" "temp"
    unknown tmp[419714] "maybe param" "temp"
    unknown call_tmp[618395] "expr temp" "maybe param" "maybe type" "temp"
    (618398 'move' call_tmp[618395](374348 call aligned _mt[243] this[67596]))
    (419725 'move' tmp[419714](67603 call ! call_tmp[618395]))
    unknown call_tmp[618400] "expr temp" "maybe param" "maybe type" "temp"
    (618403 'move' call_tmp[618400](419727 call _cond_invalid tmp[419714]))
    if call_tmp[618400]
    {
      (419730 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556555] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556556] "maybe param" "temp"
    unknown call_tmp[618405] "expr temp" "maybe param" "maybe type" "temp"
    (618408 'move' call_tmp[618405](419715 call isTrue tmp[419714]))
    (556561 'move' tmp[556556](556559 call _cond_test call_tmp[618405]))
    if tmp[556556]
    {
      unknown tmp[419735] "maybe param" "temp"
      unknown call_tmp[618412] "expr temp" "maybe param" "maybe type" "temp"
      (618415 'move' call_tmp[618412](374352 call stride _mt[243] this[67596]))
      (419746 'move' tmp[419735](67607 call > call_tmp[618412] 1))
      unknown call_tmp[618417] "expr temp" "maybe param" "maybe type" "temp"
      (618420 'move' call_tmp[618417](419748 call _cond_invalid tmp[419735]))
      if call_tmp[618417]
      {
        (419751 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556528] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556529] "maybe param" "temp"
      unknown call_tmp[618422] "expr temp" "maybe param" "maybe type" "temp"
      (618425 'move' call_tmp[618422](419736 call isTrue tmp[419735]))
      (556534 'move' tmp[556529](556532 call _cond_test call_tmp[618422]))
      if tmp[556529]
      {
        (556539 'move' tmp[556528](556536 '_paramFoldLogical' tmp[556529] 1))
      }
      {
        unknown tmp[556541] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618429] "expr temp" "maybe param" "maybe type" "temp"
        (618432 'move' call_tmp[618429](374356 call stride _mt[243] this[67596]))
        unknown call_tmp[618434] "expr temp" "maybe param" "maybe type" "temp"
        (618437 'move' call_tmp[618434](67611 call - 1))
        unknown call_tmp[618439] "expr temp" "maybe param" "maybe type" "temp"
        (618442 'move' call_tmp[618439](67613 call < call_tmp[618429] call_tmp[618434]))
        (556543 'move' tmp[556541](419740 call isTrue call_tmp[618439]))
        (556548 'move' tmp[556528](556545 '_paramFoldLogical' tmp[556529] tmp[556541]))
      }
      unknown tmp[556563] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556565 'move' tmp[556563](419718 call isTrue tmp[556528]))
      (556570 'move' tmp[556555](556567 '_paramFoldLogical' tmp[556556] tmp[556563]))
    }
    {
      (556575 'move' tmp[556555](556572 '_paramFoldLogical' tmp[556556] 0))
    }
    (509951 'move' ret[509946](509950 'deref' tmp[556555]))
    (509948 return ret[509946])
  }
  where {
    (374344 call stridable _mt[243] this[67596])
  }
  function range[64319](?).contains[67632](arg _mt[67637]:_MT[238], arg this[67634]:range[64319](?) :
  range[64319](?), arg ind[67629] :
  (374361 call idxType _mt[243] this[67634])) : _unknown[51] "inline" "method"
  {
    unknown ret[509955] "RVV" "temp"
    unknown call_tmp[618450] "expr temp" "maybe param" "maybe type" "temp"
    (618453 'move' call_tmp[618450](67646 call(67642 call (partial) isAmbiguous _mt[243] this[67634])))
    unknown call_tmp[618455] "expr temp" "maybe param" "maybe type" "temp"
    (618458 'move' call_tmp[618455](67650 call _cond_test call_tmp[618450]))
    if call_tmp[618455]
    {
      (509960 'move' ret[509955](509959 'deref' 0))
      gotoReturn _end_contains[509953] _end_contains[509953]
    }
    unknown call_tmp[618460] "maybe param" "maybe type" "temp"
    (618463 'move' call_tmp[618460](67659 call chpl__idxToInt ind[67629]))
    const i[67660] "dead at end of block" "const" "insert auto destroy"
    (541069 'init var' i[67660] call_tmp[618460])
    (67663 'end of statement')
    unknown call_tmp[618467] "expr temp" "maybe param" "maybe type" "temp"
    (618470 'move' call_tmp[618467](67666 call(374366 call (partial) hasHighBound _mt[243] this[67634])))
    unknown call_tmp[618472] "expr temp" "maybe param" "maybe type" "temp"
    (618475 'move' call_tmp[618472](67680 call _cond_test call_tmp[618467]))
    if call_tmp[618472]
    {
      unknown call_tmp[618479] "expr temp" "maybe param" "maybe type" "temp"
      (618482 'move' call_tmp[618479](374372 call _high _mt[243] this[67634]))
      unknown call_tmp[618484] "expr temp" "maybe param" "maybe type" "temp"
      (618487 'move' call_tmp[618484](67669 call > i[67660] call_tmp[618479]))
      unknown call_tmp[618489] "expr temp" "maybe param" "maybe type" "temp"
      (618492 'move' call_tmp[618489](67674 call _cond_test call_tmp[618484]))
      if call_tmp[618489]
      {
        (509965 'move' ret[509955](509964 'deref' 0))
        gotoReturn _end_contains[509953] _end_contains[509953]
      }
    }
    unknown call_tmp[618496] "expr temp" "maybe param" "maybe type" "temp"
    (618499 'move' call_tmp[618496](67686 call(374376 call (partial) hasLowBound _mt[243] this[67634])))
    unknown call_tmp[618501] "expr temp" "maybe param" "maybe type" "temp"
    (618504 'move' call_tmp[618501](67700 call _cond_test call_tmp[618496]))
    if call_tmp[618501]
    {
      unknown call_tmp[618508] "expr temp" "maybe param" "maybe type" "temp"
      (618511 'move' call_tmp[618508](374382 call _low _mt[243] this[67634]))
      unknown call_tmp[618513] "expr temp" "maybe param" "maybe type" "temp"
      (618516 'move' call_tmp[618513](67689 call < i[67660] call_tmp[618508]))
      unknown call_tmp[618518] "expr temp" "maybe param" "maybe type" "temp"
      (618521 'move' call_tmp[618518](67694 call _cond_test call_tmp[618513]))
      if call_tmp[618518]
      {
        (509970 'move' ret[509955](509969 'deref' 0))
        gotoReturn _end_contains[509953] _end_contains[509953]
      }
    }
    unknown call_tmp[618525] "expr temp" "maybe param" "maybe type" "temp"
    (618528 'move' call_tmp[618525](374387 call stridable _mt[243] this[67634]))
    unknown call_tmp[618530] "expr temp" "maybe param" "maybe type" "temp"
    (618533 'move' call_tmp[618530](67734 call _cond_test call_tmp[618525]))
    if call_tmp[618530]
    {
      unknown call_tmp[618537] "expr temp" "maybe param" "maybe type" "temp"
      (618540 'move' call_tmp[618537](374396 call intIdxType _mt[243] this[67634]))
      unknown call_tmp[618544] "expr temp" "maybe param" "maybe type" "temp"
      (618547 'move' call_tmp[618544](374392 call _stride _mt[243] this[67634]))
      unknown call_tmp[618549] "expr temp" "maybe param" "maybe type" "temp"
      (618552 'move' call_tmp[618549](67708 call abs call_tmp[618544]))
      unknown call_tmp[618554] "maybe param" "maybe type" "temp"
      (618557 'move' call_tmp[618554](67710 call _cast call_tmp[618537] call_tmp[618549]))
      unknown s[67712] "dead at end of block" "insert auto destroy"
      (541071 'init var' s[67712] call_tmp[618554])
      (67715 'end of statement')
      unknown call_tmp[618561] "expr temp" "maybe param" "maybe type" "temp"
      (618564 'move' call_tmp[618561](374402 call _alignment _mt[243] this[67634]))
      unknown call_tmp[618566] "expr temp" "maybe param" "maybe type" "temp"
      (618569 'move' call_tmp[618566](67722 call chpl__diffMod i[67660] call_tmp[618561] s[67712]))
      unknown call_tmp[618571] "expr temp" "maybe param" "maybe type" "temp"
      (618574 'move' call_tmp[618571](67724 call != call_tmp[618566] 0))
      unknown call_tmp[618576] "expr temp" "maybe param" "maybe type" "temp"
      (618579 'move' call_tmp[618576](67729 call _cond_test call_tmp[618571]))
      if call_tmp[618576]
      {
        (509975 'move' ret[509955](509974 'deref' 0))
        gotoReturn _end_contains[509953] _end_contains[509953]
      }
    }
    (509980 'move' ret[509955](509979 'deref' 1))
    label _end_contains[509953]
    (509957 return ret[509955])
  }
  function range[64319](?).contains[67753](arg _mt[67758]:_MT[238], arg this[67755]:range[64319](?) :
  range[64319](?), arg other[67750]:range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509984] "RVV" "temp"
    unknown tmp[419756] "maybe param" "temp"
    (419767 'move' tmp[419756](67765 call(67761 call (partial) isAmbiguous _mt[243] this[67755])))
    unknown call_tmp[618583] "expr temp" "maybe param" "maybe type" "temp"
    (618586 'move' call_tmp[618583](419769 call _cond_invalid tmp[419756]))
    if call_tmp[618583]
    {
      (419772 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556582] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556583] "maybe param" "temp"
    unknown call_tmp[618588] "expr temp" "maybe param" "maybe type" "temp"
    (618591 'move' call_tmp[618588](419757 call isTrue tmp[419756]))
    (556588 'move' tmp[556583](556586 call _cond_test call_tmp[618588]))
    if tmp[556583]
    {
      (556593 'move' tmp[556582](556590 '_paramFoldLogical' tmp[556583] 1))
    }
    {
      unknown tmp[556595] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618595] "expr temp" "maybe param" "maybe type" "temp"
      (618598 'move' call_tmp[618595](67771 call(67767 call (partial) isAmbiguous _mt[243] other[67750])))
      (556597 'move' tmp[556595](419761 call isTrue call_tmp[618595]))
      (556602 'move' tmp[556582](556599 '_paramFoldLogical' tmp[556583] tmp[556595]))
    }
    unknown call_tmp[618600] "expr temp" "maybe param" "maybe type" "temp"
    (618603 'move' call_tmp[618600](67777 call _cond_test tmp[556582]))
    if call_tmp[618600]
    {
      (509989 'move' ret[509984](509988 'deref' 0))
      gotoReturn _end_contains[509982] _end_contains[509982]
    }
    unknown call_tmp[618607] "expr temp" "maybe param" "maybe type" "temp"
    (618610 'move' call_tmp[618607](374409 call stridable _mt[243] this[67755]))
    unknown call_tmp[618612] "expr temp" "maybe param" "maybe type" "temp"
    (618615 'move' call_tmp[618612](67845 call _cond_test call_tmp[618607]))
    if call_tmp[618612]
    {
      unknown tmp[419777] "maybe param" "temp"
      unknown tmp[419798] "maybe param" "temp"
      unknown call_tmp[618619] "expr temp" "maybe param" "maybe type" "temp"
      (618622 'move' call_tmp[618619](374413 call stride _mt[243] this[67755]))
      (419809 'move' tmp[419798](67786 call > call_tmp[618619] 0))
      unknown call_tmp[618624] "expr temp" "maybe param" "maybe type" "temp"
      (618627 'move' call_tmp[618624](419811 call _cond_invalid tmp[419798]))
      if call_tmp[618624]
      {
        (419814 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556609] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556610] "maybe param" "temp"
      unknown call_tmp[618629] "expr temp" "maybe param" "maybe type" "temp"
      (618632 'move' call_tmp[618629](419799 call isTrue tmp[419798]))
      (556615 'move' tmp[556610](556613 call _cond_test call_tmp[618629]))
      if tmp[556610]
      {
        unknown tmp[556617] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618636] "expr temp" "maybe param" "maybe type" "temp"
        (618639 'move' call_tmp[618636](67789 call stride _mt[243] other[67750]))
        unknown call_tmp[618641] "expr temp" "maybe param" "maybe type" "temp"
        (618644 'move' call_tmp[618641](67793 call < call_tmp[618636] 0))
        (556619 'move' tmp[556617](419802 call isTrue call_tmp[618641]))
        (556624 'move' tmp[556609](556621 '_paramFoldLogical' tmp[556610] tmp[556617]))
      }
      {
        (556629 'move' tmp[556609](556626 '_paramFoldLogical' tmp[556610] 0))
      }
      (419788 'move' tmp[419777] tmp[556609])
      unknown call_tmp[618646] "expr temp" "maybe param" "maybe type" "temp"
      (618649 'move' call_tmp[618646](419790 call _cond_invalid tmp[419777]))
      if call_tmp[618646]
      {
        (419793 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556663] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556664] "maybe param" "temp"
      unknown call_tmp[618651] "expr temp" "maybe param" "maybe type" "temp"
      (618654 'move' call_tmp[618651](419778 call isTrue tmp[419777]))
      (556669 'move' tmp[556664](556667 call _cond_test call_tmp[618651]))
      if tmp[556664]
      {
        (556674 'move' tmp[556663](556671 '_paramFoldLogical' tmp[556664] 1))
      }
      {
        unknown tmp[419819] "maybe param" "temp"
        unknown call_tmp[618658] "expr temp" "maybe param" "maybe type" "temp"
        (618661 'move' call_tmp[618658](374417 call stride _mt[243] this[67755]))
        (419830 'move' tmp[419819](67799 call < call_tmp[618658] 0))
        unknown call_tmp[618663] "expr temp" "maybe param" "maybe type" "temp"
        (618666 'move' call_tmp[618663](419832 call _cond_invalid tmp[419819]))
        if call_tmp[618663]
        {
          (419835 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[556636] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[556637] "maybe param" "temp"
        unknown call_tmp[618668] "expr temp" "maybe param" "maybe type" "temp"
        (618671 'move' call_tmp[618668](419820 call isTrue tmp[419819]))
        (556642 'move' tmp[556637](556640 call _cond_test call_tmp[618668]))
        if tmp[556637]
        {
          unknown tmp[556644] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[618675] "expr temp" "maybe param" "maybe type" "temp"
          (618678 'move' call_tmp[618675](67802 call stride _mt[243] other[67750]))
          unknown call_tmp[618680] "expr temp" "maybe param" "maybe type" "temp"
          (618683 'move' call_tmp[618680](67806 call > call_tmp[618675] 0))
          (556646 'move' tmp[556644](419823 call isTrue call_tmp[618680]))
          (556651 'move' tmp[556636](556648 '_paramFoldLogical' tmp[556637] tmp[556644]))
        }
        {
          (556656 'move' tmp[556636](556653 '_paramFoldLogical' tmp[556637] 0))
        }
        unknown tmp[556676] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556678 'move' tmp[556676](419782 call isTrue tmp[556636]))
        (556683 'move' tmp[556663](556680 '_paramFoldLogical' tmp[556664] tmp[556676]))
      }
      unknown call_tmp[618685] "expr temp" "maybe param" "maybe type" "temp"
      (618688 'move' call_tmp[618685](67819 call _cond_test tmp[556663]))
      if call_tmp[618685]
      {
        unknown call_tmp[618690] "expr temp" "maybe param" "maybe type" "temp"
        (618693 'move' call_tmp[618690](67816 call _containsHelp this[67755] other[67750]))
        (509994 'move' ret[509984](509993 'deref' call_tmp[618690]))
        gotoReturn _end_contains[509982] _end_contains[509982]
      }
    }
    {
      unknown call_tmp[618697] "expr temp" "maybe param" "maybe type" "temp"
      (618700 'move' call_tmp[618697](67826 call stride _mt[243] other[67750]))
      unknown call_tmp[618702] "expr temp" "maybe param" "maybe type" "temp"
      (618705 'move' call_tmp[618702](67830 call < call_tmp[618697] 0))
      unknown call_tmp[618707] "expr temp" "maybe param" "maybe type" "temp"
      (618710 'move' call_tmp[618707](67839 call _cond_test call_tmp[618702]))
      if call_tmp[618707]
      {
        unknown call_tmp[618712] "expr temp" "maybe param" "maybe type" "temp"
        (618715 'move' call_tmp[618712](67836 call _containsHelp this[67755] other[67750]))
        (509999 'move' ret[509984](509998 'deref' call_tmp[618712]))
        gotoReturn _end_contains[509982] _end_contains[509982]
      }
    }
    unknown call_tmp[618717] "expr temp" "maybe param" "maybe type" "temp"
    (618720 'move' call_tmp[618717](67853 call this[67755] other[67750]))
    unknown call_tmp[618722] "expr temp" "maybe param" "maybe type" "temp"
    (618725 'move' call_tmp[618722](67854 call == other[67750] call_tmp[618717]))
    (510004 'move' ret[509984](510003 'deref' call_tmp[618722]))
    label _end_contains[509982]
    (509986 return ret[509984])
  }
  function range[64319](?).member[67867](arg _mt[67872]:_MT[238], arg this[67869]:range[64319](?) :
  range[64319](?), arg ind[67864] :
  (374429 call idxType _mt[243] this[67869])) : _unknown[51] "inline" "method"
  {
    unknown ret[510008] "RVV" "temp"
    unknown call_tmp[618729] "expr temp" "maybe param" "maybe type" "temp"
    (618732 'move' call_tmp[618729](67909 call + "range.member is deprecated - " "please use range.contains instead"))
    (67912 call compilerWarning call_tmp[618729])
    (475442 'end of statement')
    unknown call_tmp[618736] "expr temp" "maybe param" "maybe type" "temp"
    (618739 'move' call_tmp[618736](67923 call(67918 call (partial) contains _mt[243] this[67869]) ind[67864]))
    (510013 'move' ret[510008](510012 'deref' call_tmp[618736]))
    (510010 return ret[510008])
  }
  function range[64319](?).member[67938](arg _mt[67943]:_MT[238], arg this[67940]:range[64319](?) :
  range[64319](?), arg other[67935]:range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510017] "RVV" "temp"
    unknown call_tmp[618741] "expr temp" "maybe param" "maybe type" "temp"
    (618744 'move' call_tmp[618741](67948 call + "range.member is deprecated - " "please use range.contains instead"))
    (67951 call compilerWarning call_tmp[618741])
    (475444 'end of statement')
    unknown call_tmp[618748] "expr temp" "maybe param" "maybe type" "temp"
    (618751 'move' call_tmp[618748](67960 call(67955 call (partial) contains _mt[243] this[67940]) other[67935]))
    (510022 'move' ret[510017](510021 'deref' call_tmp[618748]))
    (510019 return ret[510017])
  }
  function _containsHelp[67974](in arg arg1[67971]:range[64319](?), in arg arg2[67980]:range[64319](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[510026] "RVV" "temp"
    unknown call_tmp[618755] "expr temp" "maybe param" "maybe type" "temp"
    (618758 'move' call_tmp[618755](67984 call stridable _mt[243] arg2[67980]))
    unknown call_tmp[618760] "expr temp" "maybe param" "maybe type" "temp"
    (618763 'move' call_tmp[618760](68013 call _cond_test call_tmp[618755]))
    if call_tmp[618760]
    {
      unknown call_tmp[618767] "expr temp" "maybe param" "maybe type" "temp"
      (618770 'move' call_tmp[618767](67988 call _stride _mt[243] arg2[67980]))
      unknown call_tmp[618774] "expr temp" "maybe param" "maybe type" "temp"
      (618777 'move' call_tmp[618774](67992 call _stride _mt[243] arg2[67980]))
      unknown call_tmp[618779] "expr temp" "maybe param" "maybe type" "temp"
      (618782 'move' call_tmp[618779](67995 call - call_tmp[618774]))
      (67997 call = call_tmp[618767] call_tmp[618779])
    }
    {
      unknown call_tmp[618786] "expr temp" "maybe param" "maybe type" "temp"
      (618789 'move' call_tmp[618786](68001 call _stride _mt[243] arg1[67971]))
      unknown call_tmp[618793] "expr temp" "maybe param" "maybe type" "temp"
      (618796 'move' call_tmp[618793](68005 call _stride _mt[243] arg1[67971]))
      unknown call_tmp[618798] "expr temp" "maybe param" "maybe type" "temp"
      (618801 'move' call_tmp[618798](68008 call - call_tmp[618793]))
      (68010 call = call_tmp[618786] call_tmp[618798])
    }
    unknown call_tmp[618803] "expr temp" "maybe param" "maybe type" "temp"
    (618806 'move' call_tmp[618803](68024 call arg1[67971] arg2[67980]))
    unknown call_tmp[618808] "expr temp" "maybe param" "maybe type" "temp"
    (618811 'move' call_tmp[618808](68025 call == arg2[67980] call_tmp[618803]))
    (510031 'move' ret[510026](510030 'deref' call_tmp[618808]))
    (510028 return ret[510026])
  }
  function ==[68040](arg r1[68037]:range[64319](?), arg r2[68046]:range[64319](?)) param : _unknown[51]
  {
    unknown ret[510035] "RVV" "param" "temp"
    (510040 'move' ret[510035](510039 'deref' 0))
    (510037 return ret[510035])
  }
  where {
    unknown call_tmp[618815] "expr temp" "maybe param" "maybe type" "temp"
    (618818 'move' call_tmp[618815](68050 call boundedType _mt[243] r1[68037]))
    unknown call_tmp[618822] "expr temp" "maybe param" "maybe type" "temp"
    (618825 'move' call_tmp[618822](68054 call boundedType _mt[243] r2[68046]))
    (68057 call != call_tmp[618815] call_tmp[618822])
  }
  function ==[68075](arg r1[68072]:range[64319](?), arg r2[68081]:range[64319](?)) : _unknown[51]
  {
    unknown ret[510044] "RVV" "temp"
    unknown call_tmp[618829] "expr temp" "maybe param" "maybe type" "temp"
    (618832 'move' call_tmp[618829](68100 call(68096 call (partial) isAmbiguous _mt[243] r1[68072])))
    unknown call_tmp[618836] "expr temp" "maybe param" "maybe type" "temp"
    (618839 'move' call_tmp[618836](68106 call(68102 call (partial) isAmbiguous _mt[243] r2[68081])))
    unknown call_tmp[618841] "expr temp" "maybe param" "maybe type" "temp"
    (618844 'move' call_tmp[618841](68107 call != call_tmp[618829] call_tmp[618836]))
    unknown call_tmp[618846] "expr temp" "maybe param" "maybe type" "temp"
    (618849 'move' call_tmp[618846](68112 call _cond_test call_tmp[618841]))
    if call_tmp[618846]
    {
      (510050 'move' ret[510044](510049 'coerce' 0 bool[10]))
      gotoReturn _end_==[510042] _end_==[510042]
    }
    unknown call_tmp[618853] "expr temp" "maybe param" "maybe type" "temp"
    (618856 'move' call_tmp[618853](68123 call(68119 call (partial) isAmbiguous _mt[243] r1[68072])))
    unknown call_tmp[618858] "expr temp" "maybe param" "maybe type" "temp"
    (618861 'move' call_tmp[618858](68131 call _cond_test call_tmp[618853]))
    if call_tmp[618858]
    {
      unknown call_tmp[618863] "expr temp" "maybe param" "maybe type" "temp"
      (618866 'move' call_tmp[618863](68128 call ident r1[68072] r2[68081]))
      (510056 'move' ret[510044](510055 'coerce' call_tmp[618863] bool[10]))
      gotoReturn _end_==[510042] _end_==[510042]
    }
    unknown call_tmp[618868] "expr temp" "maybe param" "maybe type" "temp"
    (618871 'move' call_tmp[618868](68139 call isBoundedRange r1[68072]))
    unknown call_tmp[618873] "expr temp" "maybe param" "maybe type" "temp"
    (618876 'move' call_tmp[618873](68313 call _cond_test call_tmp[618868]))
    if call_tmp[618873]
    {
      unknown call_tmp[618880] "maybe param" "maybe type" "temp"
      (618883 'move' call_tmp[618880](68141 call size _mt[243] r1[68072]))
      const len[68144] "dead at end of block" "const" "insert auto destroy"
      (541073 'init var' len[68144] call_tmp[618880])
      unknown call_tmp[618887] "maybe param" "maybe type" "temp"
      (618890 'move' call_tmp[618887](68148 call size _mt[243] r2[68081]))
      const l2[68151] "dead at end of block" "const" "insert auto destroy"
      (541075 'init var' l2[68151] call_tmp[618887])
      (68154 'end of statement')
      unknown call_tmp[618892] "expr temp" "maybe param" "maybe type" "temp"
      (618895 'move' call_tmp[618892](68158 call != len[68144] l2[68151]))
      unknown call_tmp[618897] "expr temp" "maybe param" "maybe type" "temp"
      (618900 'move' call_tmp[618897](68163 call _cond_test call_tmp[618892]))
      if call_tmp[618897]
      {
        (510062 'move' ret[510044](510061 'coerce' 0 bool[10]))
        gotoReturn _end_==[510042] _end_==[510042]
      }
      unknown call_tmp[618902] "expr temp" "maybe param" "maybe type" "temp"
      (618905 'move' call_tmp[618902](68170 call == len[68144] 0))
      unknown call_tmp[618907] "expr temp" "maybe param" "maybe type" "temp"
      (618910 'move' call_tmp[618907](68175 call _cond_test call_tmp[618902]))
      if call_tmp[618907]
      {
        (510068 'move' ret[510044](510067 'coerce' 1 bool[10]))
        gotoReturn _end_==[510042] _end_==[510042]
      }
      unknown call_tmp[618914] "expr temp" "maybe param" "maybe type" "temp"
      (618917 'move' call_tmp[618914](68183 call first _mt[243] r1[68072]))
      unknown call_tmp[618921] "expr temp" "maybe param" "maybe type" "temp"
      (618924 'move' call_tmp[618921](68187 call first _mt[243] r2[68081]))
      unknown call_tmp[618926] "expr temp" "maybe param" "maybe type" "temp"
      (618929 'move' call_tmp[618926](68190 call != call_tmp[618914] call_tmp[618921]))
      unknown call_tmp[618931] "expr temp" "maybe param" "maybe type" "temp"
      (618934 'move' call_tmp[618931](68195 call _cond_test call_tmp[618926]))
      if call_tmp[618931]
      {
        (510074 'move' ret[510044](510073 'coerce' 0 bool[10]))
        gotoReturn _end_==[510042] _end_==[510042]
      }
      unknown call_tmp[618936] "expr temp" "maybe param" "maybe type" "temp"
      (618939 'move' call_tmp[618936](68202 call == len[68144] 1))
      unknown call_tmp[618941] "expr temp" "maybe param" "maybe type" "temp"
      (618944 'move' call_tmp[618941](68207 call _cond_test call_tmp[618936]))
      if call_tmp[618941]
      {
        (510080 'move' ret[510044](510079 'coerce' 1 bool[10]))
        gotoReturn _end_==[510042] _end_==[510042]
      }
      unknown call_tmp[618948] "expr temp" "maybe param" "maybe type" "temp"
      (618951 'move' call_tmp[618948](68213 call stride _mt[243] r1[68072]))
      unknown call_tmp[618955] "expr temp" "maybe param" "maybe type" "temp"
      (618958 'move' call_tmp[618955](68217 call stride _mt[243] r2[68081]))
      unknown call_tmp[618960] "expr temp" "maybe param" "maybe type" "temp"
      (618963 'move' call_tmp[618960](68220 call != call_tmp[618948] call_tmp[618955]))
      unknown call_tmp[618965] "expr temp" "maybe param" "maybe type" "temp"
      (618968 'move' call_tmp[618965](68225 call _cond_test call_tmp[618960]))
      if call_tmp[618965]
      {
        (510086 'move' ret[510044](510085 'coerce' 0 bool[10]))
        gotoReturn _end_==[510042] _end_==[510042]
      }
      (510092 'move' ret[510044](510091 'coerce' 1 bool[10]))
      gotoReturn _end_==[510042] _end_==[510042]
    }
    {
      unknown call_tmp[618972] "expr temp" "maybe param" "maybe type" "temp"
      (618975 'move' call_tmp[618972](68234 call stride _mt[243] r1[68072]))
      unknown call_tmp[618979] "expr temp" "maybe param" "maybe type" "temp"
      (618982 'move' call_tmp[618979](68238 call stride _mt[243] r2[68081]))
      unknown call_tmp[618984] "expr temp" "maybe param" "maybe type" "temp"
      (618987 'move' call_tmp[618984](68241 call != call_tmp[618972] call_tmp[618979]))
      unknown call_tmp[618989] "expr temp" "maybe param" "maybe type" "temp"
      (618992 'move' call_tmp[618989](68246 call _cond_test call_tmp[618984]))
      if call_tmp[618989]
      {
        (510098 'move' ret[510044](510097 'coerce' 0 bool[10]))
        gotoReturn _end_==[510042] _end_==[510042]
      }
      unknown call_tmp[618996] "expr temp" "maybe param" "maybe type" "temp"
      (618999 'move' call_tmp[618996](68257 call(68253 call (partial) hasLowBound _mt[243] r1[68072])))
      unknown call_tmp[619001] "expr temp" "maybe param" "maybe type" "temp"
      (619004 'move' call_tmp[619001](68276 call _cond_test call_tmp[618996]))
      if call_tmp[619001]
      {
        unknown call_tmp[619008] "expr temp" "maybe param" "maybe type" "temp"
        (619011 'move' call_tmp[619008](68259 call alignedLow _mt[243] r1[68072]))
        unknown call_tmp[619015] "expr temp" "maybe param" "maybe type" "temp"
        (619018 'move' call_tmp[619015](68263 call alignedLow _mt[243] r2[68081]))
        unknown call_tmp[619020] "expr temp" "maybe param" "maybe type" "temp"
        (619023 'move' call_tmp[619020](68266 call != call_tmp[619008] call_tmp[619015]))
        unknown call_tmp[619025] "expr temp" "maybe param" "maybe type" "temp"
        (619028 'move' call_tmp[619025](68271 call _cond_test call_tmp[619020]))
        if call_tmp[619025]
        {
          (510104 'move' ret[510044](510103 'coerce' 0 bool[10]))
          gotoReturn _end_==[510042] _end_==[510042]
        }
      }
      unknown call_tmp[619032] "expr temp" "maybe param" "maybe type" "temp"
      (619035 'move' call_tmp[619032](68286 call(68282 call (partial) hasHighBound _mt[243] r1[68072])))
      unknown call_tmp[619037] "expr temp" "maybe param" "maybe type" "temp"
      (619040 'move' call_tmp[619037](68305 call _cond_test call_tmp[619032]))
      if call_tmp[619037]
      {
        unknown call_tmp[619044] "expr temp" "maybe param" "maybe type" "temp"
        (619047 'move' call_tmp[619044](68288 call alignedHigh _mt[243] r1[68072]))
        unknown call_tmp[619051] "expr temp" "maybe param" "maybe type" "temp"
        (619054 'move' call_tmp[619051](68292 call alignedHigh _mt[243] r2[68081]))
        unknown call_tmp[619056] "expr temp" "maybe param" "maybe type" "temp"
        (619059 'move' call_tmp[619056](68295 call != call_tmp[619044] call_tmp[619051]))
        unknown call_tmp[619061] "expr temp" "maybe param" "maybe type" "temp"
        (619064 'move' call_tmp[619061](68300 call _cond_test call_tmp[619056]))
        if call_tmp[619061]
        {
          (510110 'move' ret[510044](510109 'coerce' 0 bool[10]))
          gotoReturn _end_==[510042] _end_==[510042]
        }
      }
      (510116 'move' ret[510044](510115 'coerce' 1 bool[10]))
      gotoReturn _end_==[510042] _end_==[510042]
    }
    label _end_==[510042]
    (510046 return ret[510044])
  }
  where {
    unknown call_tmp[619068] "expr temp" "maybe param" "maybe type" "temp"
    (619071 'move' call_tmp[619068](68086 call boundedType _mt[243] r1[68072]))
    unknown call_tmp[619075] "expr temp" "maybe param" "maybe type" "temp"
    (619078 'move' call_tmp[619075](68090 call boundedType _mt[243] r2[68081]))
    (68093 call == call_tmp[619068] call_tmp[619075])
  }
  { scopeless type
    bool[10]
  }
  function !=[68330](arg r1[68327]:range[64319](?), arg r2[68336]:range[64319](?)) : _unknown[51]
  {
    unknown ret[510122] "RVV" "temp"
    unknown call_tmp[619080] "expr temp" "maybe param" "maybe type" "temp"
    (619083 'move' call_tmp[619080](68341 call == r1[68327] r2[68336]))
    unknown call_tmp[619085] "expr temp" "maybe param" "maybe type" "temp"
    (619088 'move' call_tmp[619085](68343 call ! call_tmp[619080]))
    (510127 'move' ret[510122](510126 'deref' call_tmp[619085]))
    (510124 return ret[510122])
  }
  function ident[68359](arg r1[68356]:range[64319](?), arg r2[68365]:range[64319](?)) : _unknown[51]
  {
    unknown ret[510131] "RVV" "temp"
    unknown call_tmp[619092] "expr temp" "maybe param" "maybe type" "temp"
    (619095 'move' call_tmp[619092](68403 call _low _mt[243] r1[68356]))
    unknown call_tmp[619099] "expr temp" "maybe param" "maybe type" "temp"
    (619102 'move' call_tmp[619099](68407 call _low _mt[243] r2[68365]))
    unknown call_tmp[619104] "expr temp" "maybe param" "maybe type" "temp"
    (619107 'move' call_tmp[619104](68410 call != call_tmp[619092] call_tmp[619099]))
    unknown call_tmp[619109] "expr temp" "maybe param" "maybe type" "temp"
    (619112 'move' call_tmp[619109](68415 call _cond_test call_tmp[619104]))
    if call_tmp[619109]
    {
      (510136 'move' ret[510131](510135 'deref' 0))
      gotoReturn _end_ident[510129] _end_ident[510129]
    }
    unknown call_tmp[619116] "expr temp" "maybe param" "maybe type" "temp"
    (619119 'move' call_tmp[619116](68422 call _high _mt[243] r1[68356]))
    unknown call_tmp[619123] "expr temp" "maybe param" "maybe type" "temp"
    (619126 'move' call_tmp[619123](68426 call _high _mt[243] r2[68365]))
    unknown call_tmp[619128] "expr temp" "maybe param" "maybe type" "temp"
    (619131 'move' call_tmp[619128](68429 call != call_tmp[619116] call_tmp[619123]))
    unknown call_tmp[619133] "expr temp" "maybe param" "maybe type" "temp"
    (619136 'move' call_tmp[619133](68434 call _cond_test call_tmp[619128]))
    if call_tmp[619133]
    {
      (510141 'move' ret[510131](510140 'deref' 0))
      gotoReturn _end_ident[510129] _end_ident[510129]
    }
    unknown call_tmp[619140] "expr temp" "maybe param" "maybe type" "temp"
    (619143 'move' call_tmp[619140](68440 call stridable _mt[243] r1[68356]))
    unknown call_tmp[619145] "expr temp" "maybe param" "maybe type" "temp"
    (619148 'move' call_tmp[619145](68511 call _cond_test call_tmp[619140]))
    if call_tmp[619145]
    {
      unknown call_tmp[619152] "expr temp" "maybe param" "maybe type" "temp"
      (619155 'move' call_tmp[619152](68444 call stridable _mt[243] r2[68365]))
      unknown call_tmp[619157] "expr temp" "maybe param" "maybe type" "temp"
      (619160 'move' call_tmp[619157](68506 call _cond_test call_tmp[619152]))
      if call_tmp[619157]
      {
        unknown call_tmp[619164] "expr temp" "maybe param" "maybe type" "temp"
        (619167 'move' call_tmp[619164](68448 call _stride _mt[243] r1[68356]))
        unknown call_tmp[619171] "expr temp" "maybe param" "maybe type" "temp"
        (619174 'move' call_tmp[619171](68452 call _stride _mt[243] r2[68365]))
        unknown call_tmp[619176] "expr temp" "maybe param" "maybe type" "temp"
        (619179 'move' call_tmp[619176](68455 call != call_tmp[619164] call_tmp[619171]))
        unknown call_tmp[619181] "expr temp" "maybe param" "maybe type" "temp"
        (619184 'move' call_tmp[619181](68460 call _cond_test call_tmp[619176]))
        if call_tmp[619181]
        {
          (510146 'move' ret[510131](510145 'deref' 0))
          gotoReturn _end_ident[510129] _end_ident[510129]
        }
        unknown call_tmp[619188] "expr temp" "maybe param" "maybe type" "temp"
        (619191 'move' call_tmp[619188](68467 call _alignment _mt[243] r1[68356]))
        unknown call_tmp[619195] "expr temp" "maybe param" "maybe type" "temp"
        (619198 'move' call_tmp[619195](68471 call _alignment _mt[243] r2[68365]))
        unknown call_tmp[619200] "expr temp" "maybe param" "maybe type" "temp"
        (619203 'move' call_tmp[619200](68474 call != call_tmp[619188] call_tmp[619195]))
        unknown call_tmp[619205] "expr temp" "maybe param" "maybe type" "temp"
        (619208 'move' call_tmp[619205](68479 call _cond_test call_tmp[619200]))
        if call_tmp[619205]
        {
          (510151 'move' ret[510131](510150 'deref' 0))
          gotoReturn _end_ident[510129] _end_ident[510129]
        }
        unknown call_tmp[619212] "expr temp" "maybe param" "maybe type" "temp"
        (619215 'move' call_tmp[619212](68485 call _aligned _mt[243] r1[68356]))
        unknown call_tmp[619219] "expr temp" "maybe param" "maybe type" "temp"
        (619222 'move' call_tmp[619219](68489 call _aligned _mt[243] r2[68365]))
        unknown call_tmp[619224] "expr temp" "maybe param" "maybe type" "temp"
        (619227 'move' call_tmp[619224](68492 call != call_tmp[619212] call_tmp[619219]))
        unknown call_tmp[619229] "expr temp" "maybe param" "maybe type" "temp"
        (619232 'move' call_tmp[619229](68497 call _cond_test call_tmp[619224]))
        if call_tmp[619229]
        {
          (510156 'move' ret[510131](510155 'deref' 0))
          gotoReturn _end_ident[510129] _end_ident[510129]
        }
      }
      {
        (510161 'move' ret[510131](510160 'deref' 0))
        gotoReturn _end_ident[510129] _end_ident[510129]
      }
    }
    (510166 'move' ret[510131](510165 'deref' 1))
    label _end_ident[510129]
    (510133 return ret[510131])
  }
  where {
    unknown tmp[419840] "maybe param" "temp"
    unknown tmp[419861] "maybe param" "temp"
    unknown call_tmp[619236] "expr temp" "maybe param" "maybe type" "temp"
    (619239 'move' call_tmp[619236](68369 call idxType _mt[243] r1[68356]))
    unknown call_tmp[619243] "expr temp" "maybe param" "maybe type" "temp"
    (619246 'move' call_tmp[619243](68373 call idxType _mt[243] r2[68365]))
    (419872 'move' tmp[419861](68376 call == call_tmp[619236] call_tmp[619243]))
    unknown call_tmp[619248] "expr temp" "maybe param" "maybe type" "temp"
    (619251 'move' call_tmp[619248](419874 call _cond_invalid tmp[419861]))
    if call_tmp[619248]
    {
      (419877 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556690] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556691] "maybe param" "temp"
    unknown call_tmp[619253] "expr temp" "maybe param" "maybe type" "temp"
    (619256 'move' call_tmp[619253](419862 call isTrue tmp[419861]))
    (556696 'move' tmp[556691](556694 call _cond_test call_tmp[619253]))
    if tmp[556691]
    {
      unknown tmp[556698] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619260] "expr temp" "maybe param" "maybe type" "temp"
      (619263 'move' call_tmp[619260](68379 call boundedType _mt[243] r1[68356]))
      unknown call_tmp[619267] "expr temp" "maybe param" "maybe type" "temp"
      (619270 'move' call_tmp[619267](68383 call boundedType _mt[243] r2[68365]))
      unknown call_tmp[619272] "expr temp" "maybe param" "maybe type" "temp"
      (619275 'move' call_tmp[619272](68386 call == call_tmp[619260] call_tmp[619267]))
      (556700 'move' tmp[556698](419865 call isTrue call_tmp[619272]))
      (556705 'move' tmp[556690](556702 '_paramFoldLogical' tmp[556691] tmp[556698]))
    }
    {
      (556710 'move' tmp[556690](556707 '_paramFoldLogical' tmp[556691] 0))
    }
    (419851 'move' tmp[419840] tmp[556690])
    unknown call_tmp[619277] "expr temp" "maybe param" "maybe type" "temp"
    (619280 'move' call_tmp[619277](419853 call _cond_invalid tmp[419840]))
    if call_tmp[619277]
    {
      (419856 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556717] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556718] "maybe param" "temp"
    unknown call_tmp[619282] "expr temp" "maybe param" "maybe type" "temp"
    (619285 'move' call_tmp[619282](419841 call isTrue tmp[419840]))
    (556723 'move' tmp[556718](556721 call _cond_test call_tmp[619282]))
    if tmp[556718]
    {
      unknown tmp[556725] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619289] "expr temp" "maybe param" "maybe type" "temp"
      (619292 'move' call_tmp[619289](68391 call stridable _mt[243] r1[68356]))
      unknown call_tmp[619296] "expr temp" "maybe param" "maybe type" "temp"
      (619299 'move' call_tmp[619296](68395 call stridable _mt[243] r2[68365]))
      unknown call_tmp[619301] "expr temp" "maybe param" "maybe type" "temp"
      (619304 'move' call_tmp[619301](68398 call == call_tmp[619289] call_tmp[619296]))
      (556727 'move' tmp[556725](419844 call isTrue call_tmp[619301]))
      (556732 'move' tmp[556717](556729 '_paramFoldLogical' tmp[556718] tmp[556725]))
    }
    {
      (556737 'move' tmp[556717](556734 '_paramFoldLogical' tmp[556718] 0))
    }
    (748263 call chpl_statementLevelSymbol tmp[556717])
  }
  function ident[68530](arg r1[68527]:range[64319](?), arg r2[68536]:range[64319](?)) param : _unknown[51] "no doc"
  {
    unknown ret[510170] "RVV" "param" "temp"
    (510175 'move' ret[510170](510174 'deref' 0))
    (510172 return ret[510170])
  }
  function range[64319](?).safeCast[68555](arg _mt[68560]:_MT[238], arg this[68557]:range[64319](?) :
  range[64319](?), arg t[68552]:range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510179] "RVV" "temp"
    unknown tmp[68563] "dead at end of block" "insert auto destroy"
    (541077 'default init var' tmp[68563] t[68552])
    (68566 'end of statement')
    unknown call_tmp[619308] "expr temp" "maybe param" "maybe type" "temp"
    (619311 'move' call_tmp[619308](68569 call boundedType _mt[243] tmp[68563]))
    unknown call_tmp[619315] "expr temp" "maybe param" "maybe type" "temp"
    (619318 'move' call_tmp[619315](68573 call boundedType _mt[243] this[68557]))
    unknown call_tmp[619320] "expr temp" "maybe param" "maybe type" "temp"
    (619323 'move' call_tmp[619320](68576 call != call_tmp[619308] call_tmp[619315]))
    unknown call_tmp[619325] "expr temp" "maybe param" "maybe type" "temp"
    (619328 'move' call_tmp[619325](68631 call _cond_test call_tmp[619320]))
    if call_tmp[619325]
    {
      unknown call_tmp[619332] "expr temp" "maybe param" "maybe type" "temp"
      (619335 'move' call_tmp[619332](68598 call boundedType _mt[243] this[68557]))
      unknown call_tmp[619337] "expr temp" "maybe param" "maybe type" "temp"
      (619340 'move' call_tmp[619337](68602 call _cast string[26] call_tmp[619332]))
      unknown call_tmp[619344] "expr temp" "maybe param" "maybe type" "temp"
      (619347 'move' call_tmp[619344](68622 call boundedType _mt[243] tmp[68563]))
      unknown call_tmp[619349] "expr temp" "maybe param" "maybe type" "temp"
      (619352 'move' call_tmp[619349](68626 call _cast string[26] call_tmp[619344]))
      (68628 call compilerError "cannot cast range from " call_tmp[619337] " to " call_tmp[619349])
      (475471 'end of statement' tmp[68563])
    }
    unknown call_tmp[619356] "expr temp" "maybe param" "maybe type" "temp"
    (619359 'move' call_tmp[619356](68636 call stridable _mt[243] tmp[68563]))
    unknown call_tmp[619361] "expr temp" "maybe param" "maybe type" "temp"
    (619364 'move' call_tmp[619361](68725 call _cond_test call_tmp[619356]))
    if call_tmp[619361]
    {
      unknown call_tmp[619368] "expr temp" "maybe param" "maybe type" "temp"
      (619371 'move' call_tmp[619368](68640 call _stride _mt[243] tmp[68563]))
      unknown call_tmp[619375] "expr temp" "maybe param" "maybe type" "temp"
      (619378 'move' call_tmp[619375](68644 call stride _mt[243] this[68557]))
      (68647 call = call_tmp[619368] call_tmp[619375])
      (475473 'end of statement' tmp[68563])
      unknown call_tmp[619382] "expr temp" "maybe param" "maybe type" "temp"
      (619385 'move' call_tmp[619382](68652 call _alignment _mt[243] tmp[68563]))
      unknown call_tmp[619389] "expr temp" "maybe param" "maybe type" "temp"
      (619392 'move' call_tmp[619389](68657 call alignment _mt[243] this[68557]))
      unknown call_tmp[619394] "expr temp" "maybe param" "maybe type" "temp"
      (619397 'move' call_tmp[619394](68661 call chpl__idxToInt call_tmp[619389]))
      unknown call_tmp[619403] "expr temp" "maybe param" "maybe type" "temp"
      (619406 'move' call_tmp[619403](68668 call intIdxType _mt[243] tmp[68563]))
      unknown call_tmp[619408] "expr temp" "maybe param" "maybe type" "temp"
      (619411 'move' call_tmp[619408](68672 call(68662 call (partial) safeCast _mt[243] call_tmp[619394]) call_tmp[619403]))
      (68673 call = call_tmp[619382] call_tmp[619408])
      (475475 'end of statement' tmp[68563] tmp[68563])
      unknown call_tmp[619415] "expr temp" "maybe param" "maybe type" "temp"
      (619418 'move' call_tmp[619415](68677 call _aligned _mt[243] tmp[68563]))
      unknown call_tmp[619422] "expr temp" "maybe param" "maybe type" "temp"
      (619425 'move' call_tmp[619422](68681 call aligned _mt[243] this[68557]))
      (68684 call = call_tmp[619415] call_tmp[619422])
      (475478 'end of statement' tmp[68563])
    }
    {
      unknown call_tmp[619429] "expr temp" "maybe param" "maybe type" "temp"
      (619432 'move' call_tmp[619429](68688 call stride _mt[243] this[68557]))
      unknown call_tmp[619434] "expr temp" "maybe param" "maybe type" "temp"
      (619437 'move' call_tmp[619434](68692 call != call_tmp[619429] 1))
      unknown call_tmp[619439] "expr temp" "maybe param" "maybe type" "temp"
      (619442 'move' call_tmp[619439](68721 call _cond_test call_tmp[619434]))
      if call_tmp[619439]
      {
        (68718 call safeCastCheckHalt module=[255] HaltWrappers[210016] "illegal safeCast from non-unit stride range to unstridable range")
        (357685 'referenced modules list' HaltWrappers[210016])
      }
    }
    unknown call_tmp[619446] "expr temp" "maybe param" "maybe type" "temp"
    (619449 'move' call_tmp[619446](68731 call _low _mt[243] tmp[68563]))
    unknown call_tmp[619453] "expr temp" "maybe param" "maybe type" "temp"
    (619456 'move' call_tmp[619453](68735 call _low _mt[243] this[68557]))
    unknown call_tmp[619462] "expr temp" "maybe param" "maybe type" "temp"
    (619465 'move' call_tmp[619462](68742 call intIdxType _mt[243] tmp[68563]))
    unknown call_tmp[619467] "expr temp" "maybe param" "maybe type" "temp"
    (619470 'move' call_tmp[619467](68746 call(68738 call (partial) safeCast _mt[243] call_tmp[619453]) call_tmp[619462]))
    (68747 call = call_tmp[619446] call_tmp[619467])
    (475481 'end of statement' tmp[68563] tmp[68563])
    unknown call_tmp[619474] "expr temp" "maybe param" "maybe type" "temp"
    (619477 'move' call_tmp[619474](68751 call _high _mt[243] tmp[68563]))
    unknown call_tmp[619481] "expr temp" "maybe param" "maybe type" "temp"
    (619484 'move' call_tmp[619481](68755 call _high _mt[243] this[68557]))
    unknown call_tmp[619490] "expr temp" "maybe param" "maybe type" "temp"
    (619493 'move' call_tmp[619490](68762 call intIdxType _mt[243] tmp[68563]))
    unknown call_tmp[619495] "expr temp" "maybe param" "maybe type" "temp"
    (619498 'move' call_tmp[619495](68766 call(68758 call (partial) safeCast _mt[243] call_tmp[619481]) call_tmp[619490]))
    (68767 call = call_tmp[619474] call_tmp[619495])
    (475484 'end of statement' tmp[68563] tmp[68563])
    (510184 'move' ret[510179](510183 'deref' tmp[68563]))
    gotoReturn _end_safeCast[510177] _end_safeCast[510177]
    (475487 'end of statement' tmp[68563])
    label _end_safeCast[510177]
    (510181 return ret[510179])
  }
  function _cast[68784](arg t[68781]:range[64319](?), arg r[68790]:range[64319](?)) : _unknown[51] "no doc"
  {
    unknown ret[510190] "RVV" "temp"
    unknown tmp[68794] "dead at end of block" "insert auto destroy"
    (541079 'default init var' tmp[68794] t[68781])
    (68797 'end of statement')
    unknown call_tmp[619502] "expr temp" "maybe param" "maybe type" "temp"
    (619505 'move' call_tmp[619502](68800 call boundedType _mt[243] tmp[68794]))
    unknown call_tmp[619509] "expr temp" "maybe param" "maybe type" "temp"
    (619512 'move' call_tmp[619509](68804 call boundedType _mt[243] r[68790]))
    unknown call_tmp[619514] "expr temp" "maybe param" "maybe type" "temp"
    (619517 'move' call_tmp[619514](68807 call != call_tmp[619502] call_tmp[619509]))
    unknown call_tmp[619519] "expr temp" "maybe param" "maybe type" "temp"
    (619522 'move' call_tmp[619519](68830 call _cond_test call_tmp[619514]))
    if call_tmp[619519]
    {
      unknown call_tmp[619526] "expr temp" "maybe param" "maybe type" "temp"
      (619529 'move' call_tmp[619526](68813 call boundedType _mt[243] r[68790]))
      unknown call_tmp[619531] "expr temp" "maybe param" "maybe type" "temp"
      (619534 'move' call_tmp[619531](68817 call _cast string[26] call_tmp[619526]))
      unknown call_tmp[619538] "expr temp" "maybe param" "maybe type" "temp"
      (619541 'move' call_tmp[619538](68821 call boundedType _mt[243] tmp[68794]))
      unknown call_tmp[619543] "expr temp" "maybe param" "maybe type" "temp"
      (619546 'move' call_tmp[619543](68825 call _cast string[26] call_tmp[619538]))
      (68827 call compilerError "cannot cast range from " call_tmp[619531] " to " call_tmp[619543])
      (475489 'end of statement' tmp[68794])
    }
    unknown call_tmp[619550] "expr temp" "maybe param" "maybe type" "temp"
    (619553 'move' call_tmp[619550](68835 call stridable _mt[243] tmp[68794]))
    unknown call_tmp[619555] "expr temp" "maybe param" "maybe type" "temp"
    (619558 'move' call_tmp[619555](68878 call _cond_test call_tmp[619550]))
    if call_tmp[619555]
    {
      unknown call_tmp[619562] "expr temp" "maybe param" "maybe type" "temp"
      (619565 'move' call_tmp[619562](68839 call _stride _mt[243] tmp[68794]))
      unknown call_tmp[619569] "expr temp" "maybe param" "maybe type" "temp"
      (619572 'move' call_tmp[619569](68843 call _stride _mt[243] r[68790]))
      (68846 call = call_tmp[619562] call_tmp[619569])
      (475491 'end of statement' tmp[68794])
      unknown call_tmp[619576] "expr temp" "maybe param" "maybe type" "temp"
      (619579 'move' call_tmp[619576](68851 call _alignment _mt[243] tmp[68794]))
      unknown call_tmp[619583] "expr temp" "maybe param" "maybe type" "temp"
      (619586 'move' call_tmp[619583](68859 call intIdxType _mt[243] tmp[68794]))
      unknown call_tmp[619590] "expr temp" "maybe param" "maybe type" "temp"
      (619593 'move' call_tmp[619590](68855 call _alignment _mt[243] r[68790]))
      unknown call_tmp[619595] "expr temp" "maybe param" "maybe type" "temp"
      (619598 'move' call_tmp[619595](68862 call _cast call_tmp[619583] call_tmp[619590]))
      (68864 call = call_tmp[619576] call_tmp[619595])
      (475493 'end of statement' tmp[68794] tmp[68794])
      unknown call_tmp[619602] "expr temp" "maybe param" "maybe type" "temp"
      (619605 'move' call_tmp[619602](68868 call _aligned _mt[243] tmp[68794]))
      unknown call_tmp[619609] "expr temp" "maybe param" "maybe type" "temp"
      (619612 'move' call_tmp[619609](68872 call _aligned _mt[243] r[68790]))
      (68875 call = call_tmp[619602] call_tmp[619609])
      (475496 'end of statement' tmp[68794])
    }
    unknown call_tmp[619616] "expr temp" "maybe param" "maybe type" "temp"
    (619619 'move' call_tmp[619616](68883 call _low _mt[243] tmp[68794]))
    unknown call_tmp[619623] "expr temp" "maybe param" "maybe type" "temp"
    (619626 'move' call_tmp[619623](68891 call intIdxType _mt[243] tmp[68794]))
    unknown call_tmp[619630] "expr temp" "maybe param" "maybe type" "temp"
    (619633 'move' call_tmp[619630](68887 call low _mt[243] r[68790]))
    unknown call_tmp[619635] "expr temp" "maybe param" "maybe type" "temp"
    (619638 'move' call_tmp[619635](68894 call _cast call_tmp[619623] call_tmp[619630]))
    (68896 call = call_tmp[619616] call_tmp[619635])
    (475498 'end of statement' tmp[68794] tmp[68794])
    unknown call_tmp[619642] "expr temp" "maybe param" "maybe type" "temp"
    (619645 'move' call_tmp[619642](68900 call _high _mt[243] tmp[68794]))
    unknown call_tmp[619649] "expr temp" "maybe param" "maybe type" "temp"
    (619652 'move' call_tmp[619649](68908 call intIdxType _mt[243] tmp[68794]))
    unknown call_tmp[619656] "expr temp" "maybe param" "maybe type" "temp"
    (619659 'move' call_tmp[619656](68904 call high _mt[243] r[68790]))
    unknown call_tmp[619661] "expr temp" "maybe param" "maybe type" "temp"
    (619664 'move' call_tmp[619661](68911 call _cast call_tmp[619649] call_tmp[619656]))
    (68913 call = call_tmp[619642] call_tmp[619661])
    (475501 'end of statement' tmp[68794] tmp[68794])
    (510195 'move' ret[510190](510194 'deref' tmp[68794]))
    gotoReturn _end__cast[510188] _end__cast[510188]
    (475504 'end of statement' tmp[68794])
    label _end__cast[510188]
    (510192 return ret[510190])
  }
  function range[64319](?).boundsCheck[68936](arg _mt[68941]:_MT[238], arg this[68938]:range[64319](?) :
  range[64319](?), arg other[68933]:range[64319](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510201] "RVV" "temp"
    unknown tmp[419882] "maybe param" "temp"
    (419893 'move' tmp[419882](68955 call(68951 call (partial) isAmbiguous _mt[243] this[68938])))
    unknown call_tmp[619668] "expr temp" "maybe param" "maybe type" "temp"
    (619671 'move' call_tmp[619668](419895 call _cond_invalid tmp[419882]))
    if call_tmp[619668]
    {
      (419898 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556744] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556745] "maybe param" "temp"
    unknown call_tmp[619673] "expr temp" "maybe param" "maybe type" "temp"
    (619676 'move' call_tmp[619673](419883 call isTrue tmp[419882]))
    (556750 'move' tmp[556745](556748 call _cond_test call_tmp[619673]))
    if tmp[556745]
    {
      (556755 'move' tmp[556744](556752 '_paramFoldLogical' tmp[556745] 1))
    }
    {
      unknown tmp[556757] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619680] "expr temp" "maybe param" "maybe type" "temp"
      (619683 'move' call_tmp[619680](68961 call(68957 call (partial) isAmbiguous _mt[243] other[68933])))
      (556759 'move' tmp[556757](419887 call isTrue call_tmp[619680]))
      (556764 'move' tmp[556744](556761 '_paramFoldLogical' tmp[556745] tmp[556757]))
    }
    unknown call_tmp[619685] "expr temp" "maybe param" "maybe type" "temp"
    (619688 'move' call_tmp[619685](68967 call _cond_test tmp[556744]))
    if call_tmp[619685]
    {
      (510206 'move' ret[510201](510205 'deref' 0))
      gotoReturn _end_boundsCheck[510199] _end_boundsCheck[510199]
    }
    (510211 'move' ret[510201](510210 'deref' 1))
    label _end_boundsCheck[510199]
    (510203 return ret[510201])
  }
  where {
    unknown call_tmp[619690] "expr temp" "maybe param" "maybe type" "temp"
    (619693 'move' call_tmp[619690](455789 'query' other[68933] 2))
    (68948 call == call_tmp[619690] boundedNone[64214])
  }
  function range[64319](?).boundsCheck[68994](arg _mt[68999]:_MT[238], arg this[68996]:range[64319](?) :
  range[64319](?), arg other[68991]:range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510215] "RVV" "temp"
    unknown tmp[419903] "maybe param" "temp"
    (419914 'move' tmp[419903](69006 call(69002 call (partial) isAmbiguous _mt[243] this[68996])))
    unknown call_tmp[619697] "expr temp" "maybe param" "maybe type" "temp"
    (619700 'move' call_tmp[619697](419916 call _cond_invalid tmp[419903]))
    if call_tmp[619697]
    {
      (419919 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556771] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556772] "maybe param" "temp"
    unknown call_tmp[619702] "expr temp" "maybe param" "maybe type" "temp"
    (619705 'move' call_tmp[619702](419904 call isTrue tmp[419903]))
    (556777 'move' tmp[556772](556775 call _cond_test call_tmp[619702]))
    if tmp[556772]
    {
      (556782 'move' tmp[556771](556779 '_paramFoldLogical' tmp[556772] 1))
    }
    {
      unknown tmp[556784] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619709] "expr temp" "maybe param" "maybe type" "temp"
      (619712 'move' call_tmp[619709](69012 call(69008 call (partial) isAmbiguous _mt[243] other[68991])))
      (556786 'move' tmp[556784](419908 call isTrue call_tmp[619709]))
      (556791 'move' tmp[556771](556788 '_paramFoldLogical' tmp[556772] tmp[556784]))
    }
    unknown call_tmp[619714] "expr temp" "maybe param" "maybe type" "temp"
    (619717 'move' call_tmp[619714](69018 call _cond_test tmp[556771]))
    if call_tmp[619714]
    {
      (510220 'move' ret[510215](510219 'deref' 0))
      gotoReturn _end_boundsCheck[510213] _end_boundsCheck[510213]
    }
    unknown tmp[419924] "maybe param" "temp"
    (419935 'move' tmp[419924](455808 'query' other[68991] 3))
    unknown call_tmp[619719] "expr temp" "maybe param" "maybe type" "temp"
    (619722 'move' call_tmp[619719](419937 call _cond_invalid tmp[419924]))
    if call_tmp[619719]
    {
      (419940 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown boundedOther[69077] "dead at end of block" "insert auto destroy"
    unknown tmp[556798] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556799] "maybe param" "temp"
    unknown call_tmp[619724] "expr temp" "maybe param" "maybe type" "temp"
    (619727 'move' call_tmp[619724](419925 call isTrue tmp[419924]))
    (556804 'move' tmp[556799](556802 call _cond_test call_tmp[619724]))
    if tmp[556799]
    {
      (556809 'move' tmp[556798](556806 '_paramFoldLogical' tmp[556799] 1))
    }
    {
      unknown tmp[556811] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619731] "expr temp" "maybe param" "maybe type" "temp"
      (619734 'move' call_tmp[619731](69034 call stridable _mt[243] this[68996]))
      (556813 'move' tmp[556811](419929 call isTrue call_tmp[619731]))
      (556818 'move' tmp[556798](556815 '_paramFoldLogical' tmp[556799] tmp[556811]))
    }
    unknown tmp[556825] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556826] "maybe param" "temp"
    unknown call_tmp[619738] "expr temp" "maybe param" "maybe type" "temp"
    (619741 'move' call_tmp[619738](69044 call(69040 call (partial) hasLowBound _mt[243] other[68991])))
    (556831 'move' tmp[556826](556829 call _cond_test call_tmp[619738]))
    if tmp[556826]
    {
      unknown tmp[556833] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556835 'move' tmp[556833](69046 call low _mt[243] other[68991]))
      (556840 'move' tmp[556825](556837 '_paramFoldLogical' tmp[556826] tmp[556833]))
    }
    {
      unknown tmp[556842] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556844 'move' tmp[556842](374477 call low _mt[243] this[68996]))
      (556849 'move' tmp[556825](556846 '_paramFoldLogical' tmp[556826] tmp[556842]))
    }
    unknown tmp[556856] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556857] "maybe param" "temp"
    unknown call_tmp[619749] "expr temp" "maybe param" "maybe type" "temp"
    (619752 'move' call_tmp[619749](69058 call(69054 call (partial) hasHighBound _mt[243] other[68991])))
    (556862 'move' tmp[556857](556860 call _cond_test call_tmp[619749]))
    if tmp[556857]
    {
      unknown tmp[556864] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556866 'move' tmp[556864](69060 call high _mt[243] other[68991]))
      (556871 'move' tmp[556856](556868 '_paramFoldLogical' tmp[556857] tmp[556864]))
    }
    {
      unknown tmp[556873] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556875 'move' tmp[556873](374481 call high _mt[243] this[68996]))
      (556880 'move' tmp[556856](556877 '_paramFoldLogical' tmp[556857] tmp[556873]))
    }
    unknown call_tmp[619760] "expr temp" "maybe param" "maybe type" "temp"
    (619763 'move' call_tmp[619760](374472 call idxType _mt[243] this[68996]))
    unknown call_tmp[619767] "expr temp" "maybe param" "maybe type" "temp"
    (619770 'move' call_tmp[619767](69068 call stride _mt[243] other[68991]))
    unknown call_tmp[619774] "expr temp" "maybe param" "maybe type" "temp"
    (619777 'move' call_tmp[619774](69072 call alignment _mt[243] other[68991]))
    unknown call_tmp[619779] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (619782 'move' call_tmp[619779](747796 'new' range[64319](?) call_tmp[619760] bounded[64208] tmp[556798] tmp[556825] tmp[556856] call_tmp[619767] call_tmp[619774] 1))
    (541081 'init var' boundedOther[69077] call_tmp[619779])
    (69080 'end of statement')
    unknown tmp[419945] "maybe param" "temp"
    unknown call_tmp[619786] "expr temp" "maybe param" "maybe type" "temp"
    (619789 'move' call_tmp[619786](69082 call size _mt[243] boundedOther[69077]))
    (419956 'move' tmp[419945](69086 call == call_tmp[619786] 0))
    unknown call_tmp[619791] "expr temp" "maybe param" "maybe type" "temp"
    (619794 'move' call_tmp[619791](419958 call _cond_invalid tmp[419945]))
    if call_tmp[619791]
    {
      (419961 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556887] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556888] "maybe param" "temp"
    unknown call_tmp[619796] "expr temp" "maybe param" "maybe type" "temp"
    (619799 'move' call_tmp[619796](419946 call isTrue tmp[419945]))
    (556893 'move' tmp[556888](556891 call _cond_test call_tmp[619796]))
    if tmp[556888]
    {
      (556898 'move' tmp[556887](556895 '_paramFoldLogical' tmp[556888] 1))
    }
    {
      unknown tmp[556900] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619803] "expr temp" "maybe param" "maybe type" "temp"
      (619806 'move' call_tmp[619803](69091 call(374485 call (partial) contains _mt[243] this[68996]) boundedOther[69077]))
      (556902 'move' tmp[556900](419950 call isTrue call_tmp[619803]))
      (556907 'move' tmp[556887](556904 '_paramFoldLogical' tmp[556888] tmp[556900]))
    }
    (510225 'move' ret[510215](510224 'deref' tmp[556887]))
    gotoReturn _end_boundsCheck[510213] _end_boundsCheck[510213]
    (475513 'end of statement' boundedOther[69077])
    label _end_boundsCheck[510213]
    (510217 return ret[510215])
  }
  function range[64319](?).boundsCheck[69105](arg _mt[69110]:_MT[238], arg this[69107]:range[64319](?) :
  range[64319](?), arg other[69102] :
  (374491 call idxType _mt[243] this[69107])) : _unknown[51] "inline" "method"
  {
    unknown ret[510231] "RVV" "temp"
    unknown call_tmp[619812] "expr temp" "maybe param" "maybe type" "temp"
    (619815 'move' call_tmp[619812](69115 call(374495 call (partial) contains _mt[243] this[69107]) other[69102]))
    (510236 'move' ret[510231](510235 'deref' call_tmp[619812]))
    (510233 return ret[510231])
  }
  function range[64319](?).alignLow[69124](arg _mt[69129]:_MT[238], ref arg this[69126]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510240] "RVV" "temp"
    unknown tmp[419966] "maybe param" "temp"
    (419977 'move' tmp[419966] 1)
    unknown call_tmp[619817] "expr temp" "maybe param" "maybe type" "temp"
    (619820 'move' call_tmp[619817](419979 call _cond_invalid tmp[419966]))
    if call_tmp[619817]
    {
      (419982 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556914] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556915] "maybe param" "temp"
    unknown call_tmp[619822] "expr temp" "maybe param" "maybe type" "temp"
    (619825 'move' call_tmp[619822](419967 call isTrue tmp[419966]))
    (556920 'move' tmp[556915](556918 call _cond_test call_tmp[619822]))
    if tmp[556915]
    {
      unknown tmp[556922] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619829] "expr temp" "maybe param" "maybe type" "temp"
      (619832 'move' call_tmp[619829](69137 call(69133 call (partial) isAmbiguous _mt[243] this[69126])))
      (556924 'move' tmp[556922](419970 call isTrue call_tmp[619829]))
      (556929 'move' tmp[556914](556926 '_paramFoldLogical' tmp[556915] tmp[556922]))
    }
    {
      (556934 'move' tmp[556914](556931 '_paramFoldLogical' tmp[556915] 0))
    }
    unknown call_tmp[619834] "expr temp" "maybe param" "maybe type" "temp"
    (619837 'move' call_tmp[619834](69166 call _cond_test tmp[556914]))
    if call_tmp[619834]
    {
      (69164 call boundsCheckHalt module=[255] HaltWrappers[210016] "alignLow -- Cannot be applied to a range with ambiguous alignment.")
      (357730 'referenced modules list' HaltWrappers[210016])
    }
    unknown call_tmp[619841] "expr temp" "maybe param" "maybe type" "temp"
    (619844 'move' call_tmp[619841](374502 call stridable _mt[243] this[69126]))
    unknown call_tmp[619846] "expr temp" "maybe param" "maybe type" "temp"
    (619849 'move' call_tmp[619846](69181 call _cond_test call_tmp[619841]))
    if call_tmp[619846]
    {
      unknown call_tmp[619853] "expr temp" "maybe param" "maybe type" "temp"
      (619856 'move' call_tmp[619853](374507 call _low _mt[243] this[69126]))
      unknown call_tmp[619860] "expr temp" "maybe param" "maybe type" "temp"
      (619863 'move' call_tmp[619860](69175 call alignedLowAsInt _mt[243] this[69126]))
      (69178 call = call_tmp[619853] call_tmp[619860])
    }
    (510245 'move' ret[510240](510244 'deref' this[69126]))
    (510242 return ret[510240])
  }
  function range[64319](?).alignHigh[69194](arg _mt[69199]:_MT[238], ref arg this[69196]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510249] "RVV" "temp"
    unknown tmp[419987] "maybe param" "temp"
    (419998 'move' tmp[419987] 1)
    unknown call_tmp[619865] "expr temp" "maybe param" "maybe type" "temp"
    (619868 'move' call_tmp[619865](420000 call _cond_invalid tmp[419987]))
    if call_tmp[619865]
    {
      (420003 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556941] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556942] "maybe param" "temp"
    unknown call_tmp[619870] "expr temp" "maybe param" "maybe type" "temp"
    (619873 'move' call_tmp[619870](419988 call isTrue tmp[419987]))
    (556947 'move' tmp[556942](556945 call _cond_test call_tmp[619870]))
    if tmp[556942]
    {
      unknown tmp[556949] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619877] "expr temp" "maybe param" "maybe type" "temp"
      (619880 'move' call_tmp[619877](69207 call(69203 call (partial) isAmbiguous _mt[243] this[69196])))
      (556951 'move' tmp[556949](419991 call isTrue call_tmp[619877]))
      (556956 'move' tmp[556941](556953 '_paramFoldLogical' tmp[556942] tmp[556949]))
    }
    {
      (556961 'move' tmp[556941](556958 '_paramFoldLogical' tmp[556942] 0))
    }
    unknown call_tmp[619882] "expr temp" "maybe param" "maybe type" "temp"
    (619885 'move' call_tmp[619882](69234 call _cond_test tmp[556941]))
    if call_tmp[619882]
    {
      (69232 call boundsCheckHalt module=[255] HaltWrappers[210016] "alignHigh -- Cannot be applied to a range with ambiguous alignment.")
      (357738 'referenced modules list' HaltWrappers[210016])
    }
    unknown call_tmp[619889] "expr temp" "maybe param" "maybe type" "temp"
    (619892 'move' call_tmp[619889](374514 call stridable _mt[243] this[69196]))
    unknown call_tmp[619894] "expr temp" "maybe param" "maybe type" "temp"
    (619897 'move' call_tmp[619894](69249 call _cond_test call_tmp[619889]))
    if call_tmp[619894]
    {
      unknown call_tmp[619901] "expr temp" "maybe param" "maybe type" "temp"
      (619904 'move' call_tmp[619901](374519 call _high _mt[243] this[69196]))
      unknown call_tmp[619908] "expr temp" "maybe param" "maybe type" "temp"
      (619911 'move' call_tmp[619908](69243 call alignedHighAsInt _mt[243] this[69196]))
      (69246 call = call_tmp[619901] call_tmp[619908])
    }
    (510254 'move' ret[510249](510253 'deref' this[69196]))
    (510251 return ret[510249])
  }
  function range[64319](?).indexOrder[69266](arg _mt[69271]:_MT[238], arg this[69268]:range[64319](?) :
  range[64319](?), arg ind[69263] :
  (374525 call idxType _mt[243] this[69268])) : _unknown[51] "method"
  {
    unknown ret[510258] "RVV" "temp"
    unknown tmp[420008] "maybe param" "temp"
    (420019 'move' tmp[420008] 1)
    unknown call_tmp[619915] "expr temp" "maybe param" "maybe type" "temp"
    (619918 'move' call_tmp[619915](420021 call _cond_invalid tmp[420008]))
    if call_tmp[619915]
    {
      (420024 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556968] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556969] "maybe param" "temp"
    unknown call_tmp[619920] "expr temp" "maybe param" "maybe type" "temp"
    (619923 'move' call_tmp[619920](420009 call isTrue tmp[420008]))
    (556974 'move' tmp[556969](556972 call _cond_test call_tmp[619920]))
    if tmp[556969]
    {
      unknown tmp[556976] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619927] "expr temp" "maybe param" "maybe type" "temp"
      (619930 'move' call_tmp[619927](69279 call(69275 call (partial) isAmbiguous _mt[243] this[69268])))
      (556978 'move' tmp[556976](420012 call isTrue call_tmp[619927]))
      (556983 'move' tmp[556968](556980 '_paramFoldLogical' tmp[556969] tmp[556976]))
    }
    {
      (556988 'move' tmp[556968](556985 '_paramFoldLogical' tmp[556969] 0))
    }
    unknown call_tmp[619932] "expr temp" "maybe param" "maybe type" "temp"
    (619935 'move' call_tmp[619932](69306 call _cond_test tmp[556968]))
    if call_tmp[619932]
    {
      (69304 call boundsCheckHalt module=[255] HaltWrappers[210016] "indexOrder -- Undefined on a range with ambiguous alignment.")
      (357746 'referenced modules list' HaltWrappers[210016])
    }
    unknown call_tmp[619939] "expr temp" "maybe param" "maybe type" "temp"
    (619942 'move' call_tmp[619939](69315 call(374530 call (partial) contains _mt[243] this[69268]) ind[69263]))
    unknown call_tmp[619944] "expr temp" "maybe param" "maybe type" "temp"
    (619947 'move' call_tmp[619944](69316 call ! call_tmp[619939]))
    unknown call_tmp[619949] "expr temp" "maybe param" "maybe type" "temp"
    (619952 'move' call_tmp[619949](69326 call _cond_test call_tmp[619944]))
    if call_tmp[619949]
    {
      unknown call_tmp[619956] "expr temp" "maybe param" "maybe type" "temp"
      (619959 'move' call_tmp[619956](374535 call intIdxType _mt[243] this[69268]))
      unknown call_tmp[619961] "expr temp" "maybe param" "maybe type" "temp"
      (619964 'move' call_tmp[619961](69319 call - 1))
      unknown call_tmp[619966] "expr temp" "maybe param" "maybe type" "temp"
      (619969 'move' call_tmp[619966](69322 call _cast call_tmp[619956] call_tmp[619961]))
      (510263 'move' ret[510258](510262 'deref' call_tmp[619966]))
      gotoReturn _end_indexOrder[510256] _end_indexOrder[510256]
    }
    unknown call_tmp[619973] "expr temp" "maybe param" "maybe type" "temp"
    (619976 'move' call_tmp[619973](374540 call stridable _mt[243] this[69268]))
    unknown call_tmp[619978] "expr temp" "maybe param" "maybe type" "temp"
    (619981 'move' call_tmp[619978](69332 call ! call_tmp[619973]))
    unknown call_tmp[619983] "expr temp" "maybe param" "maybe type" "temp"
    (619986 'move' call_tmp[619983](69396 call _cond_test call_tmp[619978]))
    if call_tmp[619983]
    {
      unknown call_tmp[619990] "expr temp" "maybe param" "maybe type" "temp"
      (619993 'move' call_tmp[619990](69339 call(69335 call (partial) hasLowBound _mt[243] this[69268])))
      unknown call_tmp[619995] "expr temp" "maybe param" "maybe type" "temp"
      (619998 'move' call_tmp[619995](69349 call _cond_test call_tmp[619990]))
      if call_tmp[619995]
      {
        unknown call_tmp[620000] "expr temp" "maybe param" "maybe type" "temp"
        (620003 'move' call_tmp[620000](69343 call chpl__idxToInt ind[69263]))
        unknown call_tmp[620007] "expr temp" "maybe param" "maybe type" "temp"
        (620010 'move' call_tmp[620007](374546 call _low _mt[243] this[69268]))
        unknown call_tmp[620012] "expr temp" "maybe param" "maybe type" "temp"
        (620015 'move' call_tmp[620012](69345 call - call_tmp[620000] call_tmp[620007]))
        (510268 'move' ret[510258](510267 'deref' call_tmp[620012]))
        gotoReturn _end_indexOrder[510256] _end_indexOrder[510256]
      }
    }
    {
      unknown call_tmp[620019] "expr temp" "maybe param" "maybe type" "temp"
      (620022 'move' call_tmp[620019](69362 call(69358 call (partial) hasFirst _mt[243] this[69268])))
      unknown call_tmp[620024] "expr temp" "maybe param" "maybe type" "temp"
      (620027 'move' call_tmp[620024](69390 call _cond_test call_tmp[620019]))
      if call_tmp[620024]
      {
        unknown call_tmp[620031] "expr temp" "maybe param" "maybe type" "temp"
        (620034 'move' call_tmp[620031](374564 call intIdxType _mt[243] this[69268]))
        unknown call_tmp[620038] "expr temp" "maybe param" "maybe type" "temp"
        (620041 'move' call_tmp[620038](374551 call strType _mt[243] this[69268]))
        unknown call_tmp[620043] "expr temp" "maybe param" "maybe type" "temp"
        (620046 'move' call_tmp[620043](69366 call chpl__idxToInt ind[69263]))
        unknown call_tmp[620048] "expr temp" "maybe param" "maybe type" "temp"
        (620051 'move' call_tmp[620048](69368 call _cast call_tmp[620038] call_tmp[620043]))
        unknown call_tmp[620055] "expr temp" "maybe param" "maybe type" "temp"
        (620058 'move' call_tmp[620055](374555 call strType _mt[243] this[69268]))
        unknown call_tmp[620062] "expr temp" "maybe param" "maybe type" "temp"
        (620065 'move' call_tmp[620062](69372 call first _mt[243] this[69268]))
        unknown call_tmp[620067] "expr temp" "maybe param" "maybe type" "temp"
        (620070 'move' call_tmp[620067](69376 call chpl__idxToInt call_tmp[620062]))
        unknown call_tmp[620072] "expr temp" "maybe param" "maybe type" "temp"
        (620075 'move' call_tmp[620072](69378 call _cast call_tmp[620055] call_tmp[620067]))
        unknown call_tmp[620077] "expr temp" "maybe param" "maybe type" "temp"
        (620080 'move' call_tmp[620077](69380 call - call_tmp[620048] call_tmp[620072]))
        unknown call_tmp[620084] "expr temp" "maybe param" "maybe type" "temp"
        (620087 'move' call_tmp[620084](374560 call _stride _mt[243] this[69268]))
        unknown call_tmp[620089] "expr temp" "maybe param" "maybe type" "temp"
        (620092 'move' call_tmp[620089](69383 call / call_tmp[620077] call_tmp[620084]))
        unknown call_tmp[620094] "expr temp" "maybe param" "maybe type" "temp"
        (620097 'move' call_tmp[620094](69386 call _cast call_tmp[620031] call_tmp[620089]))
        (510273 'move' ret[510258](510272 'deref' call_tmp[620094]))
        gotoReturn _end_indexOrder[510256] _end_indexOrder[510256]
      }
    }
    unknown call_tmp[620101] "expr temp" "maybe param" "maybe type" "temp"
    (620104 'move' call_tmp[620101](374568 call intIdxType _mt[243] this[69268]))
    unknown call_tmp[620106] "expr temp" "maybe param" "maybe type" "temp"
    (620109 'move' call_tmp[620106](69401 call - 1))
    unknown call_tmp[620111] "expr temp" "maybe param" "maybe type" "temp"
    (620114 'move' call_tmp[620111](69404 call _cast call_tmp[620101] call_tmp[620106]))
    (510278 'move' ret[510258](510277 'deref' call_tmp[620111]))
    label _end_indexOrder[510256]
    (510260 return ret[510258])
  }
  function range[64319](?).orderToIndex[69417](arg _mt[69422]:_MT[238], arg this[69419]:range[64319](?) :
  range[64319](?), arg ord[69414]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510282] "RVV" "temp"
    unknown call_tmp[620116] "expr temp" "maybe param" "maybe type" "temp"
    (620119 'move' call_tmp[620116](69608 call _cond_test 1))
    if call_tmp[620116]
    {
      unknown call_tmp[620123] "expr temp" "maybe param" "maybe type" "temp"
      (620126 'move' call_tmp[620123](69428 call(374579 call (partial) hasFirst _mt[243] this[69419])))
      unknown call_tmp[620128] "expr temp" "maybe param" "maybe type" "temp"
      (620131 'move' call_tmp[620128](69429 call ! call_tmp[620123]))
      unknown call_tmp[620133] "expr temp" "maybe param" "maybe type" "temp"
      (620136 'move' call_tmp[620133](69455 call _cond_test call_tmp[620128]))
      if call_tmp[620133]
      {
        (69453 call boundsCheckHalt module=[255] HaltWrappers[210016] "invoking orderToIndex on a range that has no first index")
        (357755 'referenced modules list' HaltWrappers[210016])
      }
      unknown call_tmp[620140] "expr temp" "maybe param" "maybe type" "temp"
      (620143 'move' call_tmp[620140](69463 call(374583 call (partial) isAmbiguous _mt[243] this[69419])))
      unknown call_tmp[620145] "expr temp" "maybe param" "maybe type" "temp"
      (620148 'move' call_tmp[620145](69488 call _cond_test call_tmp[620140]))
      if call_tmp[620145]
      {
        (69486 call boundsCheckHalt module=[255] HaltWrappers[210016] "invoking orderToIndex on a range that is ambiguously aligned")
        (357761 'referenced modules list' HaltWrappers[210016])
      }
      unknown call_tmp[620150] "expr temp" "maybe param" "maybe type" "temp"
      (620153 'move' call_tmp[620150](69495 call < ord[69414] 0))
      unknown call_tmp[620155] "expr temp" "maybe param" "maybe type" "temp"
      (620158 'move' call_tmp[620155](69527 call _cond_test call_tmp[620150]))
      if call_tmp[620155]
      {
        unknown call_tmp[620160] "expr temp" "maybe param" "maybe type" "temp"
        (620163 'move' call_tmp[620160](69520 call _cast string[26] ord[69414]))
        unknown call_tmp[620165] "expr temp" "maybe param" "maybe type" "temp"
        (620168 'move' call_tmp[620165](69522 call + "invoking orderToIndex on a negative integer: " call_tmp[620160]))
        (69525 call boundsCheckHalt module=[255] HaltWrappers[210016] call_tmp[620165])
        (357767 'referenced modules list' HaltWrappers[210016])
      }
      unknown tmp[420029] "maybe param" "temp"
      (420040 'move' tmp[420029](69535 call isBoundedRange this[69419]))
      unknown call_tmp[620170] "expr temp" "maybe param" "maybe type" "temp"
      (620173 'move' call_tmp[620170](420042 call _cond_invalid tmp[420029]))
      if call_tmp[620170]
      {
        (420045 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556995] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556996] "maybe param" "temp"
      unknown call_tmp[620175] "expr temp" "maybe param" "maybe type" "temp"
      (620178 'move' call_tmp[620175](420030 call isTrue tmp[420029]))
      (557001 'move' tmp[556996](556999 call _cond_test call_tmp[620175]))
      if tmp[556996]
      {
        unknown tmp[557003] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[620182] "expr temp" "maybe param" "maybe type" "temp"
        (620185 'move' call_tmp[620182](69538 call size _mt[243] this[69419]))
        unknown call_tmp[620187] "expr temp" "maybe param" "maybe type" "temp"
        (620190 'move' call_tmp[620187](69541 call >= ord[69414] call_tmp[620182]))
        (557005 'move' tmp[557003](420033 call isTrue call_tmp[620187]))
        (557010 'move' tmp[556995](557007 '_paramFoldLogical' tmp[556996] tmp[557003]))
      }
      {
        (557015 'move' tmp[556995](557012 '_paramFoldLogical' tmp[556996] 0))
      }
      unknown call_tmp[620192] "expr temp" "maybe param" "maybe type" "temp"
      (620195 'move' call_tmp[620192](69603 call _cond_test tmp[556995]))
      if call_tmp[620192]
      {
        unknown call_tmp[620197] "expr temp" "maybe param" "maybe type" "temp"
        (620200 'move' call_tmp[620197](69568 call _cast string[26] ord[69414]))
        unknown call_tmp[620202] "expr temp" "maybe param" "maybe type" "temp"
        (620205 'move' call_tmp[620202](69570 call + "invoking orderToIndex on an integer " call_tmp[620197]))
        unknown call_tmp[620207] "expr temp" "maybe param" "maybe type" "temp"
        (620210 'move' call_tmp[620207](69589 call + call_tmp[620202] " that is larger than the range's number of indices "))
        unknown call_tmp[620214] "expr temp" "maybe param" "maybe type" "temp"
        (620217 'move' call_tmp[620214](69592 call size _mt[243] this[69419]))
        unknown call_tmp[620219] "expr temp" "maybe param" "maybe type" "temp"
        (620222 'move' call_tmp[620219](69596 call _cast string[26] call_tmp[620214]))
        unknown call_tmp[620224] "expr temp" "maybe param" "maybe type" "temp"
        (620227 'move' call_tmp[620224](69598 call + call_tmp[620207] call_tmp[620219]))
        (69601 call boundsCheckHalt module=[255] HaltWrappers[210016] call_tmp[620224])
        (357774 'referenced modules list' HaltWrappers[210016])
      }
    }
    unknown call_tmp[620233] "expr temp" "maybe param" "maybe type" "temp"
    (620236 'move' call_tmp[620233](69616 call firstAsInt _mt[243] this[69419]))
    unknown call_tmp[620240] "expr temp" "maybe param" "maybe type" "temp"
    (620243 'move' call_tmp[620240](69621 call stride _mt[243] this[69419]))
    unknown call_tmp[620245] "expr temp" "maybe param" "maybe type" "temp"
    (620248 'move' call_tmp[620245](69625 call chpl__addRangeStrides call_tmp[620233] call_tmp[620240] ord[69414]))
    unknown call_tmp[620250] "expr temp" "maybe param" "maybe type" "temp"
    (620253 'move' call_tmp[620250](69627 call(374592 call (partial) chpl_intToIdx _mt[243] this[69419]) call_tmp[620245]))
    unknown call_tmp[620257] "expr temp" "maybe param" "maybe type" "temp"
    (620260 'move' call_tmp[620257](510287 call idxType _mt[243] this[69419]))
    (510291 'move' ret[510282](510290 'coerce' call_tmp[620250] call_tmp[620257]))
    (510284 return ret[510282])
  }
  { scopeless type
    (374574 call idxType _mt[243] this[69419])
  }
  function range[64319](?).translate[69640](arg _mt[69645]:_MT[238], arg this[69642]:range[64319](?) :
  range[64319](?), arg offset[69637]:integral[199](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510295] "RVV" "temp"
    unknown call_tmp[620264] "expr temp" "maybe param" "maybe type" "temp"
    (620267 'move' call_tmp[620264](69649 call + this[69642] offset[69637]))
    (510300 'move' ret[510295](510299 'deref' call_tmp[620264]))
    (510297 return ret[510295])
  }
  function range[64319](?).translate[69661](arg _mt[69666]:_MT[238], arg this[69663]:range[64319](?) :
  range[64319](?), arg i[69659]:_any[178](?)) : _unknown[51] "inline" "method" "no doc" "no return value for void"
  {
    (69687 call compilerError "offsets must be of integral type")
    (510302 return _void[55])
  }
  function range[64319](?)._effAlmt[69695](arg _mt[69700]:_MT[238], arg this[69697]:range[64319](?) :
  range[64319](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510306] "RVV" "temp"
    unknown call_tmp[620271] "expr temp" "maybe param" "maybe type" "temp"
    (620274 'move' call_tmp[620271](374605 call alignment _mt[243] this[69697]))
    (510311 'move' ret[510306](510310 'deref' call_tmp[620271]))
    (510308 return ret[510306])
  }
  where {
    (374601 call stridable _mt[243] this[69697])
  }
  function range[64319](?)._effAlmt[69713](arg _mt[69718]:_MT[238], arg this[69715]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510315] "RVV" "temp"
    unknown call_tmp[620280] "expr temp" "maybe param" "maybe type" "temp"
    (620283 'move' call_tmp[620280](69726 call(374614 call (partial) chpl_intToIdx _mt[243] this[69715]) 0))
    (510320 'move' ret[510315](510319 'deref' call_tmp[620280]))
    (510317 return ret[510315])
  }
  where {
    unknown call_tmp[620287] "expr temp" "maybe param" "maybe type" "temp"
    (620290 'move' call_tmp[620287](374610 call stridable _mt[243] this[69715]))
    (69721 call ! call_tmp[620287])
  }
  function range[64319](?).interior[69740](arg _mt[69745]:_MT[238], arg this[69742]:range[64319](?) :
  range[64319](?), arg offset[69737]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69773 call compilerError "interior is not supported on unbounded ranges")
    (510322 return _void[55])
  }
  where {
    unknown call_tmp[620294] "expr temp" "maybe param" "maybe type" "temp"
    (620297 'move' call_tmp[620294](374620 call boundedType _mt[243] this[69742]))
    (69752 call != call_tmp[620294] bounded[64208])
  }
  function range[64319](?).interior[69786](arg _mt[69791]:_MT[238], arg this[69788]:range[64319](?) :
  range[64319](?), arg offset[69783]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510326] "RVV" "temp"
    unknown call_tmp[620303] "expr temp" "maybe param" "maybe type" "temp"
    (620306 'move' call_tmp[620303](374625 call intIdxType _mt[243] this[69788]))
    unknown call_tmp[620308] "maybe param" "maybe type" "temp"
    (620311 'move' call_tmp[620308](69799 call(69794 call (partial) safeCast _mt[243] offset[69783]) call_tmp[620303]))
    const i[69800] "dead at end of block" "const" "insert auto destroy"
    (541083 'init var' i[69800] call_tmp[620308])
    (69803 'end of statement')
    unknown call_tmp[620313] "expr temp" "maybe param" "maybe type" "temp"
    (620316 'move' call_tmp[620313](69807 call < i[69800] 0))
    unknown call_tmp[620318] "expr temp" "maybe param" "maybe type" "temp"
    (620321 'move' call_tmp[620318](69834 call _cond_test call_tmp[620313]))
    if call_tmp[620318]
    {
      unknown call_tmp[620325] "expr temp" "maybe param" "maybe type" "temp"
      (620328 'move' call_tmp[620325](374632 call idxType _mt[243] this[69788]))
      unknown call_tmp[620332] "expr temp" "maybe param" "maybe type" "temp"
      (620335 'move' call_tmp[620332](374637 call boundedType _mt[243] this[69788]))
      unknown call_tmp[620339] "expr temp" "maybe param" "maybe type" "temp"
      (620342 'move' call_tmp[620339](374642 call stridable _mt[243] this[69788]))
      unknown call_tmp[620346] "expr temp" "maybe param" "maybe type" "temp"
      (620349 'move' call_tmp[620346](374646 call low _mt[243] this[69788]))
      unknown call_tmp[620355] "expr temp" "maybe param" "maybe type" "temp"
      (620358 'move' call_tmp[620355](374655 call _low _mt[243] this[69788]))
      unknown call_tmp[620360] "expr temp" "maybe param" "maybe type" "temp"
      (620363 'move' call_tmp[620360](69819 call - call_tmp[620355] 1))
      unknown call_tmp[620365] "expr temp" "maybe param" "maybe type" "temp"
      (620368 'move' call_tmp[620365](69822 call - call_tmp[620360] i[69800]))
      unknown call_tmp[620370] "expr temp" "maybe param" "maybe type" "temp"
      (620373 'move' call_tmp[620370](69825 call(374650 call (partial) chpl_intToIdx _mt[243] this[69788]) call_tmp[620365]))
      unknown call_tmp[620377] "expr temp" "maybe param" "maybe type" "temp"
      (620380 'move' call_tmp[620377](374660 call stride _mt[243] this[69788]))
      unknown call_tmp[620384] "expr temp" "maybe param" "maybe type" "temp"
      (620387 'move' call_tmp[620384](69829 call(374666 call (partial) _effAlmt _mt[243] this[69788])))
      unknown call_tmp[620391] "expr temp" "maybe param" "maybe type" "temp"
      (620394 'move' call_tmp[620391](374670 call aligned _mt[243] this[69788]))
      unknown call_tmp[620396] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620399 'move' call_tmp[620396](747797 'new' range[64319](?) call_tmp[620325] call_tmp[620332] call_tmp[620339] call_tmp[620346] call_tmp[620370] call_tmp[620377] call_tmp[620384] call_tmp[620391]))
      (510331 'move' ret[510326](510330 'deref' call_tmp[620396]))
      gotoReturn _end_interior[510324] _end_interior[510324]
      (475541 'end of statement' i[69800])
    }
    unknown call_tmp[620401] "expr temp" "maybe param" "maybe type" "temp"
    (620404 'move' call_tmp[620401](69841 call > i[69800] 0))
    unknown call_tmp[620406] "expr temp" "maybe param" "maybe type" "temp"
    (620409 'move' call_tmp[620406](69868 call _cond_test call_tmp[620401]))
    if call_tmp[620406]
    {
      unknown call_tmp[620413] "expr temp" "maybe param" "maybe type" "temp"
      (620416 'move' call_tmp[620413](374677 call idxType _mt[243] this[69788]))
      unknown call_tmp[620420] "expr temp" "maybe param" "maybe type" "temp"
      (620423 'move' call_tmp[620420](374682 call boundedType _mt[243] this[69788]))
      unknown call_tmp[620427] "expr temp" "maybe param" "maybe type" "temp"
      (620430 'move' call_tmp[620427](374687 call stridable _mt[243] this[69788]))
      unknown call_tmp[620436] "expr temp" "maybe param" "maybe type" "temp"
      (620439 'move' call_tmp[620436](374696 call _high _mt[243] this[69788]))
      unknown call_tmp[620441] "expr temp" "maybe param" "maybe type" "temp"
      (620444 'move' call_tmp[620441](69852 call + call_tmp[620436] 1))
      unknown call_tmp[620446] "expr temp" "maybe param" "maybe type" "temp"
      (620449 'move' call_tmp[620446](69855 call - call_tmp[620441] i[69800]))
      unknown call_tmp[620451] "expr temp" "maybe param" "maybe type" "temp"
      (620454 'move' call_tmp[620451](69858 call(374691 call (partial) chpl_intToIdx _mt[243] this[69788]) call_tmp[620446]))
      unknown call_tmp[620458] "expr temp" "maybe param" "maybe type" "temp"
      (620461 'move' call_tmp[620458](374701 call high _mt[243] this[69788]))
      unknown call_tmp[620465] "expr temp" "maybe param" "maybe type" "temp"
      (620468 'move' call_tmp[620465](374705 call stride _mt[243] this[69788]))
      unknown call_tmp[620472] "expr temp" "maybe param" "maybe type" "temp"
      (620475 'move' call_tmp[620472](69863 call(374709 call (partial) _effAlmt _mt[243] this[69788])))
      unknown call_tmp[620479] "expr temp" "maybe param" "maybe type" "temp"
      (620482 'move' call_tmp[620479](374713 call aligned _mt[243] this[69788]))
      unknown call_tmp[620484] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620487 'move' call_tmp[620484](747798 'new' range[64319](?) call_tmp[620413] call_tmp[620420] call_tmp[620427] call_tmp[620451] call_tmp[620458] call_tmp[620465] call_tmp[620472] call_tmp[620479]))
      (510336 'move' ret[510326](510335 'deref' call_tmp[620484]))
      gotoReturn _end_interior[510324] _end_interior[510324]
      (475543 'end of statement' i[69800])
    }
    unknown call_tmp[620491] "expr temp" "maybe param" "maybe type" "temp"
    (620494 'move' call_tmp[620491](374719 call idxType _mt[243] this[69788]))
    unknown call_tmp[620498] "expr temp" "maybe param" "maybe type" "temp"
    (620501 'move' call_tmp[620498](374724 call boundedType _mt[243] this[69788]))
    unknown call_tmp[620505] "expr temp" "maybe param" "maybe type" "temp"
    (620508 'move' call_tmp[620505](374729 call stridable _mt[243] this[69788]))
    unknown call_tmp[620512] "expr temp" "maybe param" "maybe type" "temp"
    (620515 'move' call_tmp[620512](374733 call low _mt[243] this[69788]))
    unknown call_tmp[620519] "expr temp" "maybe param" "maybe type" "temp"
    (620522 'move' call_tmp[620519](374737 call high _mt[243] this[69788]))
    unknown call_tmp[620526] "expr temp" "maybe param" "maybe type" "temp"
    (620529 'move' call_tmp[620526](374741 call stride _mt[243] this[69788]))
    unknown call_tmp[620533] "expr temp" "maybe param" "maybe type" "temp"
    (620536 'move' call_tmp[620533](69884 call(374745 call (partial) _effAlmt _mt[243] this[69788])))
    unknown call_tmp[620540] "expr temp" "maybe param" "maybe type" "temp"
    (620543 'move' call_tmp[620540](374749 call aligned _mt[243] this[69788]))
    unknown call_tmp[620545] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620548 'move' call_tmp[620545](747799 'new' range[64319](?) call_tmp[620491] call_tmp[620498] call_tmp[620505] call_tmp[620512] call_tmp[620519] call_tmp[620526] call_tmp[620533] call_tmp[620540]))
    (510341 'move' ret[510326](510340 'deref' call_tmp[620545]))
    label _end_interior[510324]
    (510328 return ret[510326])
  }
  function range[64319](?).exterior[69898](arg _mt[69903]:_MT[238], arg this[69900]:range[64319](?) :
  range[64319](?), arg offset[69895]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69931 call compilerError "exterior is not supported on unbounded ranges")
    (510343 return _void[55])
  }
  where {
    unknown call_tmp[620552] "expr temp" "maybe param" "maybe type" "temp"
    (620555 'move' call_tmp[620552](374755 call boundedType _mt[243] this[69900]))
    (69910 call != call_tmp[620552] bounded[64208])
  }
  function range[64319](?).exterior[69944](arg _mt[69949]:_MT[238], arg this[69946]:range[64319](?) :
  range[64319](?), arg offset[69941]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510347] "RVV" "temp"
    unknown call_tmp[620561] "expr temp" "maybe param" "maybe type" "temp"
    (620564 'move' call_tmp[620561](374760 call intIdxType _mt[243] this[69946]))
    unknown call_tmp[620566] "maybe param" "maybe type" "temp"
    (620569 'move' call_tmp[620566](69957 call(69952 call (partial) safeCast _mt[243] offset[69941]) call_tmp[620561]))
    const i[69958] "dead at end of block" "const" "insert auto destroy"
    (541085 'init var' i[69958] call_tmp[620566])
    (69961 'end of statement')
    unknown call_tmp[620571] "expr temp" "maybe param" "maybe type" "temp"
    (620574 'move' call_tmp[620571](69965 call < i[69958] 0))
    unknown call_tmp[620576] "expr temp" "maybe param" "maybe type" "temp"
    (620579 'move' call_tmp[620576](69995 call _cond_test call_tmp[620571]))
    if call_tmp[620576]
    {
      unknown call_tmp[620583] "expr temp" "maybe param" "maybe type" "temp"
      (620586 'move' call_tmp[620583](374767 call idxType _mt[243] this[69946]))
      unknown call_tmp[620590] "expr temp" "maybe param" "maybe type" "temp"
      (620593 'move' call_tmp[620590](374772 call boundedType _mt[243] this[69946]))
      unknown call_tmp[620597] "expr temp" "maybe param" "maybe type" "temp"
      (620600 'move' call_tmp[620597](374777 call stridable _mt[243] this[69946]))
      unknown call_tmp[620606] "expr temp" "maybe param" "maybe type" "temp"
      (620609 'move' call_tmp[620606](374786 call _low _mt[243] this[69946]))
      unknown call_tmp[620611] "expr temp" "maybe param" "maybe type" "temp"
      (620614 'move' call_tmp[620611](69976 call + call_tmp[620606] i[69958]))
      unknown call_tmp[620616] "expr temp" "maybe param" "maybe type" "temp"
      (620619 'move' call_tmp[620616](69979 call(374781 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620611]))
      unknown call_tmp[620625] "expr temp" "maybe param" "maybe type" "temp"
      (620628 'move' call_tmp[620625](374796 call _low _mt[243] this[69946]))
      unknown call_tmp[620630] "expr temp" "maybe param" "maybe type" "temp"
      (620633 'move' call_tmp[620630](69983 call - call_tmp[620625] 1))
      unknown call_tmp[620635] "expr temp" "maybe param" "maybe type" "temp"
      (620638 'move' call_tmp[620635](69986 call(374791 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620630]))
      unknown call_tmp[620642] "expr temp" "maybe param" "maybe type" "temp"
      (620645 'move' call_tmp[620642](374800 call stride _mt[243] this[69946]))
      unknown call_tmp[620649] "expr temp" "maybe param" "maybe type" "temp"
      (620652 'move' call_tmp[620649](69990 call(374804 call (partial) _effAlmt _mt[243] this[69946])))
      unknown call_tmp[620656] "expr temp" "maybe param" "maybe type" "temp"
      (620659 'move' call_tmp[620656](374808 call aligned _mt[243] this[69946]))
      unknown call_tmp[620661] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620664 'move' call_tmp[620661](747800 'new' range[64319](?) call_tmp[620583] call_tmp[620590] call_tmp[620597] call_tmp[620616] call_tmp[620635] call_tmp[620642] call_tmp[620649] call_tmp[620656]))
      (510352 'move' ret[510347](510351 'deref' call_tmp[620661]))
      gotoReturn _end_exterior[510345] _end_exterior[510345]
      (475547 'end of statement' i[69958])
    }
    unknown call_tmp[620666] "expr temp" "maybe param" "maybe type" "temp"
    (620669 'move' call_tmp[620666](70002 call > i[69958] 0))
    unknown call_tmp[620671] "expr temp" "maybe param" "maybe type" "temp"
    (620674 'move' call_tmp[620671](70032 call _cond_test call_tmp[620666]))
    if call_tmp[620671]
    {
      unknown call_tmp[620678] "expr temp" "maybe param" "maybe type" "temp"
      (620681 'move' call_tmp[620678](374815 call idxType _mt[243] this[69946]))
      unknown call_tmp[620685] "expr temp" "maybe param" "maybe type" "temp"
      (620688 'move' call_tmp[620685](374820 call boundedType _mt[243] this[69946]))
      unknown call_tmp[620692] "expr temp" "maybe param" "maybe type" "temp"
      (620695 'move' call_tmp[620692](374825 call stridable _mt[243] this[69946]))
      unknown call_tmp[620701] "expr temp" "maybe param" "maybe type" "temp"
      (620704 'move' call_tmp[620701](374834 call _high _mt[243] this[69946]))
      unknown call_tmp[620706] "expr temp" "maybe param" "maybe type" "temp"
      (620709 'move' call_tmp[620706](70013 call + call_tmp[620701] 1))
      unknown call_tmp[620711] "expr temp" "maybe param" "maybe type" "temp"
      (620714 'move' call_tmp[620711](70016 call(374829 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620706]))
      unknown call_tmp[620720] "expr temp" "maybe param" "maybe type" "temp"
      (620723 'move' call_tmp[620720](374843 call _high _mt[243] this[69946]))
      unknown call_tmp[620725] "expr temp" "maybe param" "maybe type" "temp"
      (620728 'move' call_tmp[620725](70020 call + call_tmp[620720] i[69958]))
      unknown call_tmp[620730] "expr temp" "maybe param" "maybe type" "temp"
      (620733 'move' call_tmp[620730](70023 call(374838 call (partial) chpl_intToIdx _mt[243] this[69946]) call_tmp[620725]))
      unknown call_tmp[620737] "expr temp" "maybe param" "maybe type" "temp"
      (620740 'move' call_tmp[620737](374848 call stride _mt[243] this[69946]))
      unknown call_tmp[620744] "expr temp" "maybe param" "maybe type" "temp"
      (620747 'move' call_tmp[620744](70027 call(374852 call (partial) _effAlmt _mt[243] this[69946])))
      unknown call_tmp[620751] "expr temp" "maybe param" "maybe type" "temp"
      (620754 'move' call_tmp[620751](374856 call aligned _mt[243] this[69946]))
      unknown call_tmp[620756] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620759 'move' call_tmp[620756](747801 'new' range[64319](?) call_tmp[620678] call_tmp[620685] call_tmp[620692] call_tmp[620711] call_tmp[620730] call_tmp[620737] call_tmp[620744] call_tmp[620751]))
      (510357 'move' ret[510347](510356 'deref' call_tmp[620756]))
      gotoReturn _end_exterior[510345] _end_exterior[510345]
      (475549 'end of statement' i[69958])
    }
    unknown call_tmp[620763] "expr temp" "maybe param" "maybe type" "temp"
    (620766 'move' call_tmp[620763](374862 call idxType _mt[243] this[69946]))
    unknown call_tmp[620770] "expr temp" "maybe param" "maybe type" "temp"
    (620773 'move' call_tmp[620770](374867 call boundedType _mt[243] this[69946]))
    unknown call_tmp[620777] "expr temp" "maybe param" "maybe type" "temp"
    (620780 'move' call_tmp[620777](374872 call stridable _mt[243] this[69946]))
    unknown call_tmp[620784] "expr temp" "maybe param" "maybe type" "temp"
    (620787 'move' call_tmp[620784](374876 call low _mt[243] this[69946]))
    unknown call_tmp[620791] "expr temp" "maybe param" "maybe type" "temp"
    (620794 'move' call_tmp[620791](374880 call high _mt[243] this[69946]))
    unknown call_tmp[620798] "expr temp" "maybe param" "maybe type" "temp"
    (620801 'move' call_tmp[620798](374884 call stride _mt[243] this[69946]))
    unknown call_tmp[620805] "expr temp" "maybe param" "maybe type" "temp"
    (620808 'move' call_tmp[620805](70048 call(374888 call (partial) _effAlmt _mt[243] this[69946])))
    unknown call_tmp[620812] "expr temp" "maybe param" "maybe type" "temp"
    (620815 'move' call_tmp[620812](374892 call aligned _mt[243] this[69946]))
    unknown call_tmp[620817] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620820 'move' call_tmp[620817](747802 'new' range[64319](?) call_tmp[620763] call_tmp[620770] call_tmp[620777] call_tmp[620784] call_tmp[620791] call_tmp[620798] call_tmp[620805] call_tmp[620812]))
    (510362 'move' ret[510347](510361 'deref' call_tmp[620817]))
    label _end_exterior[510345]
    (510349 return ret[510347])
  }
  function range[64319](?).expand[70062](arg _mt[70067]:_MT[238], arg this[70064]:range[64319](?) :
  range[64319](?), arg offset[70059]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (70095 call compilerError "expand() is not supported on unbounded ranges")
    (510364 return _void[55])
  }
  where {
    unknown call_tmp[620824] "expr temp" "maybe param" "maybe type" "temp"
    (620827 'move' call_tmp[620824](374898 call boundedType _mt[243] this[70064]))
    (70074 call != call_tmp[620824] bounded[64208])
  }
  function range[64319](?).expand[70108](arg _mt[70113]:_MT[238], arg this[70110]:range[64319](?) :
  range[64319](?), arg offset[70105]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510368] "RVV" "temp"
    unknown call_tmp[620833] "expr temp" "maybe param" "maybe type" "temp"
    (620836 'move' call_tmp[620833](374903 call intIdxType _mt[243] this[70110]))
    unknown call_tmp[620838] "maybe param" "maybe type" "temp"
    (620841 'move' call_tmp[620838](70121 call(70116 call (partial) safeCast _mt[243] offset[70105]) call_tmp[620833]))
    const i[70122] "dead at end of block" "const" "insert auto destroy"
    (541087 'init var' i[70122] call_tmp[620838])
    (70125 'end of statement')
    unknown call_tmp[620845] "expr temp" "maybe param" "maybe type" "temp"
    (620848 'move' call_tmp[620845](374909 call idxType _mt[243] this[70110]))
    unknown call_tmp[620852] "expr temp" "maybe param" "maybe type" "temp"
    (620855 'move' call_tmp[620852](374914 call boundedType _mt[243] this[70110]))
    unknown call_tmp[620859] "expr temp" "maybe param" "maybe type" "temp"
    (620862 'move' call_tmp[620859](374919 call stridable _mt[243] this[70110]))
    unknown call_tmp[620868] "expr temp" "maybe param" "maybe type" "temp"
    (620871 'move' call_tmp[620868](374928 call _low _mt[243] this[70110]))
    unknown call_tmp[620873] "expr temp" "maybe param" "maybe type" "temp"
    (620876 'move' call_tmp[620873](70136 call - call_tmp[620868] i[70122]))
    unknown call_tmp[620878] "expr temp" "maybe param" "maybe type" "temp"
    (620881 'move' call_tmp[620878](70139 call(374923 call (partial) chpl_intToIdx _mt[243] this[70110]) call_tmp[620873]))
    unknown call_tmp[620887] "expr temp" "maybe param" "maybe type" "temp"
    (620890 'move' call_tmp[620887](374938 call _high _mt[243] this[70110]))
    unknown call_tmp[620892] "expr temp" "maybe param" "maybe type" "temp"
    (620895 'move' call_tmp[620892](70143 call + call_tmp[620887] i[70122]))
    unknown call_tmp[620897] "expr temp" "maybe param" "maybe type" "temp"
    (620900 'move' call_tmp[620897](70146 call(374933 call (partial) chpl_intToIdx _mt[243] this[70110]) call_tmp[620892]))
    unknown call_tmp[620904] "expr temp" "maybe param" "maybe type" "temp"
    (620907 'move' call_tmp[620904](374943 call stride _mt[243] this[70110]))
    unknown call_tmp[620911] "expr temp" "maybe param" "maybe type" "temp"
    (620914 'move' call_tmp[620911](374947 call alignment _mt[243] this[70110]))
    unknown call_tmp[620918] "expr temp" "maybe param" "maybe type" "temp"
    (620921 'move' call_tmp[620918](374952 call _aligned _mt[243] this[70110]))
    unknown call_tmp[620923] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620926 'move' call_tmp[620923](747803 'new' range[64319](?) call_tmp[620845] call_tmp[620852] call_tmp[620859] call_tmp[620878] call_tmp[620897] call_tmp[620904] call_tmp[620911] call_tmp[620918]))
    (510373 'move' ret[510368](510372 'deref' call_tmp[620923]))
    gotoReturn _end_expand[510366] _end_expand[510366]
    (475553 'end of statement' i[70122] i[70122])
    label _end_expand[510366]
    (510370 return ret[510368])
  }
  function =[70166](ref arg r1[70163]:range[64319](?), arg r2[70174]:range[64319](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[620930] "expr temp" "maybe param" "maybe type" "temp"
    (620933 'move' call_tmp[620930](70178 call boundedType _mt[243] r1[70163]))
    unknown call_tmp[620937] "expr temp" "maybe param" "maybe type" "temp"
    (620940 'move' call_tmp[620937](70182 call boundedType _mt[243] r2[70174]))
    unknown call_tmp[620942] "expr temp" "maybe param" "maybe type" "temp"
    (620945 'move' call_tmp[620942](70185 call != call_tmp[620930] call_tmp[620937]))
    unknown call_tmp[620947] "expr temp" "maybe param" "maybe type" "temp"
    (620950 'move' call_tmp[620947](70210 call _cond_test call_tmp[620942]))
    if call_tmp[620947]
    {
      (70208 call compilerError "type mismatch in assignment of ranges with different boundedType parameters")
    }
    unknown tmp[420071] "maybe param" "temp"
    unknown call_tmp[620952] "expr temp" "maybe param" "maybe type" "temp"
    (620955 'move' call_tmp[620952](455819 'query' r1[70163] c"stridable"))
    (420082 'move' tmp[420071](70217 call ! call_tmp[620952]))
    unknown call_tmp[620957] "expr temp" "maybe param" "maybe type" "temp"
    (620960 'move' call_tmp[620957](420084 call _cond_invalid tmp[420071]))
    if call_tmp[620957]
    {
      (420087 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557022] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557023] "maybe param" "temp"
    unknown call_tmp[620962] "expr temp" "maybe param" "maybe type" "temp"
    (620965 'move' call_tmp[620962](420072 call isTrue tmp[420071]))
    (557028 'move' tmp[557023](557026 call _cond_test call_tmp[620962]))
    if tmp[557023]
    {
      unknown tmp[557030] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[620967] "expr temp" "maybe param" "maybe type" "temp"
      (620970 'move' call_tmp[620967](455839 'query' r2[70174] c"stridable"))
      (557032 'move' tmp[557030](420075 call isTrue call_tmp[620967]))
      (557037 'move' tmp[557022](557034 '_paramFoldLogical' tmp[557023] tmp[557030]))
    }
    {
      (557042 'move' tmp[557022](557039 '_paramFoldLogical' tmp[557023] 0))
    }
    unknown call_tmp[620972] "expr temp" "maybe param" "maybe type" "temp"
    (620975 'move' call_tmp[620972](70278 call _cond_test tmp[557022]))
    if call_tmp[620972]
    {
      (70241 call compilerError "type mismatch in assignment of ranges with different stridable parameters")
    }
    {
      unknown tmp[420050] "maybe param" "temp"
      (420061 'move' tmp[420050](455822 'query' r1[70163] c"stridable"))
      unknown call_tmp[620977] "expr temp" "maybe param" "maybe type" "temp"
      (620980 'move' call_tmp[620977](420063 call _cond_invalid tmp[420050]))
      if call_tmp[620977]
      {
        (420066 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557049] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557050] "maybe param" "temp"
      unknown call_tmp[620982] "expr temp" "maybe param" "maybe type" "temp"
      (620985 'move' call_tmp[620982](420051 call isTrue tmp[420050]))
      (557055 'move' tmp[557050](557053 call _cond_test call_tmp[620982]))
      if tmp[557050]
      {
        unknown tmp[557057] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[620987] "expr temp" "maybe param" "maybe type" "temp"
        (620990 'move' call_tmp[620987](455842 'query' r2[70174] c"stridable"))
        (557059 'move' tmp[557057](420054 call isTrue call_tmp[620987]))
        (557064 'move' tmp[557049](557061 '_paramFoldLogical' tmp[557050] tmp[557057]))
      }
      {
        (557069 'move' tmp[557049](557066 '_paramFoldLogical' tmp[557050] 0))
      }
      unknown call_tmp[620992] "expr temp" "maybe param" "maybe type" "temp"
      (620995 'move' call_tmp[620992](70272 call _cond_test tmp[557049]))
      if call_tmp[620992]
      {
        unknown call_tmp[620999] "expr temp" "maybe param" "maybe type" "temp"
        (621002 'move' call_tmp[620999](70248 call _stride _mt[243] r1[70163]))
        unknown call_tmp[621006] "expr temp" "maybe param" "maybe type" "temp"
        (621009 'move' call_tmp[621006](70252 call stride _mt[243] r2[70174]))
        (70255 call = call_tmp[620999] call_tmp[621006])
      }
      {
        unknown call_tmp[621011] "expr temp" "maybe param" "maybe type" "temp"
        (621014 'move' call_tmp[621011](455825 'query' r1[70163] c"stridable"))
        unknown call_tmp[621016] "expr temp" "maybe param" "maybe type" "temp"
        (621019 'move' call_tmp[621016](70267 call _cond_test call_tmp[621011]))
        if call_tmp[621016]
        {
          unknown call_tmp[621023] "expr temp" "maybe param" "maybe type" "temp"
          (621026 'move' call_tmp[621023](70260 call _stride _mt[243] r1[70163]))
          (70264 call = call_tmp[621023] 1)
        }
      }
    }
    unknown call_tmp[621030] "expr temp" "maybe param" "maybe type" "temp"
    (621033 'move' call_tmp[621030](70285 call _low _mt[243] r1[70163]))
    unknown call_tmp[621037] "expr temp" "maybe param" "maybe type" "temp"
    (621040 'move' call_tmp[621037](70289 call _low _mt[243] r2[70174]))
    (70292 call = call_tmp[621030] call_tmp[621037])
    (475562 'end of statement')
    unknown call_tmp[621044] "expr temp" "maybe param" "maybe type" "temp"
    (621047 'move' call_tmp[621044](70296 call _high _mt[243] r1[70163]))
    unknown call_tmp[621051] "expr temp" "maybe param" "maybe type" "temp"
    (621054 'move' call_tmp[621051](70300 call _high _mt[243] r2[70174]))
    (70303 call = call_tmp[621044] call_tmp[621051])
    (475563 'end of statement')
    unknown call_tmp[621056] "expr temp" "maybe param" "maybe type" "temp"
    (621059 'move' call_tmp[621056](455828 'query' r1[70163] c"stridable"))
    unknown call_tmp[621061] "expr temp" "maybe param" "maybe type" "temp"
    (621064 'move' call_tmp[621061](70333 call _cond_test call_tmp[621056]))
    if call_tmp[621061]
    {
      unknown call_tmp[621068] "expr temp" "maybe param" "maybe type" "temp"
      (621071 'move' call_tmp[621068](70308 call _alignment _mt[243] r1[70163]))
      unknown call_tmp[621075] "expr temp" "maybe param" "maybe type" "temp"
      (621078 'move' call_tmp[621075](70313 call alignment _mt[243] r2[70174]))
      unknown call_tmp[621080] "expr temp" "maybe param" "maybe type" "temp"
      (621083 'move' call_tmp[621080](70317 call chpl__idxToInt call_tmp[621075]))
      (70318 call = call_tmp[621068] call_tmp[621080])
      (475564 'end of statement')
      unknown call_tmp[621087] "expr temp" "maybe param" "maybe type" "temp"
      (621090 'move' call_tmp[621087](70323 call _aligned _mt[243] r1[70163]))
      unknown call_tmp[621094] "expr temp" "maybe param" "maybe type" "temp"
      (621097 'move' call_tmp[621094](70327 call aligned _mt[243] r2[70174]))
      (70330 call = call_tmp[621087] call_tmp[621094])
    }
    (510377 return _void[55])
  }
  function +[70353](arg r[70350]:range[64319](?), arg offset[70356]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510381] "RVV" "temp"
    unknown call_tmp[621101] "expr temp" "maybe param" "maybe type" "temp"
    (621104 'move' call_tmp[621101](70361 call intIdxType _mt[243] r[70350]))
    unknown call_tmp[621106] "maybe param" "maybe type" "temp"
    (621109 'move' call_tmp[621106](70364 call _cast call_tmp[621101] offset[70356]))
    const i[70366] "dead at end of block" "const" "insert auto destroy"
    (541089 'init var' i[70366] call_tmp[621106])
    (70369 'end of statement')
    unknown call_tmp[621111] "expr temp" "maybe param" "maybe type" "temp"
    (621114 'move' call_tmp[621111](455852 'query' r[70350] 1))
    unknown strType[70375] "dead at end of block" "insert auto destroy" "type variable"(70374 call chpl__rangeStrideType call_tmp[621111])
    unknown call_tmp[621116] "expr temp" "maybe param" "maybe type" "temp"
    (621119 'move' call_tmp[621116](541093 'query' r[70350] 1))
    (541096 'move' strType[70375](541092 call chpl__rangeStrideType call_tmp[621116]))
    (475566 'end of statement')
    unknown call_tmp[621121] "expr temp" "maybe param" "maybe type" "temp"
    (621124 'move' call_tmp[621121](455855 'query' r[70350] 1))
    unknown call_tmp[621126] "expr temp" "maybe param" "maybe type" "temp"
    (621129 'move' call_tmp[621126](455861 'query' r[70350] 2))
    unknown call_tmp[621131] "expr temp" "maybe param" "maybe type" "temp"
    (621134 'move' call_tmp[621131](455867 'query' r[70350] 3))
    unknown call_tmp[621140] "expr temp" "maybe param" "maybe type" "temp"
    (621143 'move' call_tmp[621140](70391 call _low _mt[243] r[70350]))
    unknown call_tmp[621145] "expr temp" "maybe param" "maybe type" "temp"
    (621148 'move' call_tmp[621145](70395 call + call_tmp[621140] i[70366]))
    unknown call_tmp[621150] "expr temp" "maybe param" "maybe type" "temp"
    (621153 'move' call_tmp[621150](70398 call(70387 call (partial) chpl_intToIdx _mt[243] r[70350]) call_tmp[621145]))
    unknown call_tmp[621159] "expr temp" "maybe param" "maybe type" "temp"
    (621162 'move' call_tmp[621159](70404 call _high _mt[243] r[70350]))
    unknown call_tmp[621164] "expr temp" "maybe param" "maybe type" "temp"
    (621167 'move' call_tmp[621164](70408 call + call_tmp[621159] i[70366]))
    unknown call_tmp[621169] "expr temp" "maybe param" "maybe type" "temp"
    (621172 'move' call_tmp[621169](70411 call(70400 call (partial) chpl_intToIdx _mt[243] r[70350]) call_tmp[621164]))
    unknown call_tmp[621176] "expr temp" "maybe param" "maybe type" "temp"
    (621179 'move' call_tmp[621176](70413 call stride _mt[243] r[70350]))
    unknown call_tmp[621181] "expr temp" "maybe param" "maybe type" "temp"
    (621184 'move' call_tmp[621181](70417 call _cast strType[70375] call_tmp[621176]))
    unknown call_tmp[621190] "expr temp" "maybe param" "maybe type" "temp"
    (621193 'move' call_tmp[621190](70425 call alignment _mt[243] r[70350]))
    unknown call_tmp[621195] "expr temp" "maybe param" "maybe type" "temp"
    (621198 'move' call_tmp[621195](70429 call chpl__idxToInt call_tmp[621190]))
    unknown call_tmp[621200] "expr temp" "maybe param" "maybe type" "temp"
    (621203 'move' call_tmp[621200](70431 call + call_tmp[621195] i[70366]))
    unknown call_tmp[621205] "expr temp" "maybe param" "maybe type" "temp"
    (621208 'move' call_tmp[621205](70434 call(70420 call (partial) chpl_intToIdx _mt[243] r[70350]) call_tmp[621200]))
    unknown call_tmp[621212] "expr temp" "maybe param" "maybe type" "temp"
    (621215 'move' call_tmp[621212](70436 call aligned _mt[243] r[70350]))
    unknown call_tmp[621217] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621220 'move' call_tmp[621217](747804 'new' range[64319](?) call_tmp[621121] call_tmp[621126] call_tmp[621131] call_tmp[621150] call_tmp[621169] call_tmp[621181] call_tmp[621205] call_tmp[621212]))
    (510386 'move' ret[510381](510385 'deref' call_tmp[621217]))
    gotoReturn _end_+[510379] _end_+[510379]
    (475567 'end of statement' i[70366] i[70366] strType[70375] i[70366])
    label _end_+[510379]
    (510383 return ret[510381])
  }
  function +[70450](arg i[70447]:integral[199](?), arg r[70461]:range[64319](?)) : _unknown[51] "inline"
  {
    unknown ret[510392] "RVV" "temp"
    unknown call_tmp[621222] "expr temp" "maybe param" "maybe type" "temp"
    (621225 'move' call_tmp[621222](70466 call + r[70461] i[70447]))
    (510397 'move' ret[510392](510396 'deref' call_tmp[621222]))
    (510394 return ret[510392])
  }
  function -[70487](arg r[70484]:range[64319](?), arg i[70490]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510401] "RVV" "temp"
    unknown call_tmp[621227] "expr temp" "maybe param" "maybe type" "temp"
    (621230 'move' call_tmp[621227](455890 'query' r[70484] 1))
    unknown strType[70497] "dead at end of block" "insert auto destroy" "type variable"(70496 call chpl__rangeStrideType call_tmp[621227])
    unknown call_tmp[621232] "expr temp" "maybe param" "maybe type" "temp"
    (621235 'move' call_tmp[621232](541100 'query' r[70484] 1))
    (541103 'move' strType[70497](541099 call chpl__rangeStrideType call_tmp[621232]))
    (475573 'end of statement')
    unknown call_tmp[621237] "expr temp" "maybe param" "maybe type" "temp"
    (621240 'move' call_tmp[621237](455893 'query' r[70484] 1))
    unknown call_tmp[621242] "expr temp" "maybe param" "maybe type" "temp"
    (621245 'move' call_tmp[621242](455899 'query' r[70484] 2))
    unknown call_tmp[621247] "expr temp" "maybe param" "maybe type" "temp"
    (621250 'move' call_tmp[621247](455905 'query' r[70484] 3))
    unknown call_tmp[621256] "expr temp" "maybe param" "maybe type" "temp"
    (621259 'move' call_tmp[621256](70512 call _low _mt[243] r[70484]))
    unknown call_tmp[621261] "expr temp" "maybe param" "maybe type" "temp"
    (621264 'move' call_tmp[621261](70516 call - call_tmp[621256] i[70490]))
    unknown call_tmp[621266] "expr temp" "maybe param" "maybe type" "temp"
    (621269 'move' call_tmp[621266](70519 call(70508 call (partial) chpl_intToIdx _mt[243] r[70484]) call_tmp[621261]))
    unknown call_tmp[621275] "expr temp" "maybe param" "maybe type" "temp"
    (621278 'move' call_tmp[621275](70525 call _high _mt[243] r[70484]))
    unknown call_tmp[621280] "expr temp" "maybe param" "maybe type" "temp"
    (621283 'move' call_tmp[621280](70529 call - call_tmp[621275] i[70490]))
    unknown call_tmp[621285] "expr temp" "maybe param" "maybe type" "temp"
    (621288 'move' call_tmp[621285](70532 call(70521 call (partial) chpl_intToIdx _mt[243] r[70484]) call_tmp[621280]))
    unknown call_tmp[621292] "expr temp" "maybe param" "maybe type" "temp"
    (621295 'move' call_tmp[621292](70534 call stride _mt[243] r[70484]))
    unknown call_tmp[621297] "expr temp" "maybe param" "maybe type" "temp"
    (621300 'move' call_tmp[621297](70538 call _cast strType[70497] call_tmp[621292]))
    unknown call_tmp[621306] "expr temp" "maybe param" "maybe type" "temp"
    (621309 'move' call_tmp[621306](70546 call alignment _mt[243] r[70484]))
    unknown call_tmp[621311] "expr temp" "maybe param" "maybe type" "temp"
    (621314 'move' call_tmp[621311](70550 call chpl__idxToInt call_tmp[621306]))
    unknown call_tmp[621316] "expr temp" "maybe param" "maybe type" "temp"
    (621319 'move' call_tmp[621316](70552 call - call_tmp[621311] i[70490]))
    unknown call_tmp[621321] "expr temp" "maybe param" "maybe type" "temp"
    (621324 'move' call_tmp[621321](70555 call(70541 call (partial) chpl_intToIdx _mt[243] r[70484]) call_tmp[621316]))
    unknown call_tmp[621328] "expr temp" "maybe param" "maybe type" "temp"
    (621331 'move' call_tmp[621328](70557 call aligned _mt[243] r[70484]))
    unknown call_tmp[621333] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621336 'move' call_tmp[621333](747805 'new' range[64319](?) call_tmp[621237] call_tmp[621242] call_tmp[621247] call_tmp[621266] call_tmp[621285] call_tmp[621297] call_tmp[621321] call_tmp[621328]))
    (510406 'move' ret[510401](510405 'deref' call_tmp[621333]))
    gotoReturn _end_-[510399] _end_-[510399]
    (475574 'end of statement' strType[70497])
    label _end_-[510399]
    (510403 return ret[510401])
  }
  function chpl_check_step_integral[70569](arg step[70567]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[621338] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621341 'move' call_tmp[621338](70573 'typeof' step[70567]))
    unknown call_tmp[621343] "expr temp" "maybe param" "maybe type" "temp"
    (621346 'move' call_tmp[621343](70575 call isIntegral call_tmp[621338]))
    unknown call_tmp[621348] "expr temp" "maybe param" "maybe type" "temp"
    (621351 'move' call_tmp[621348](70576 call ! call_tmp[621343]))
    unknown call_tmp[621353] "expr temp" "maybe param" "maybe type" "temp"
    (621356 'move' call_tmp[621353](70604 call _cond_test call_tmp[621348]))
    if call_tmp[621353]
    {
      unknown call_tmp[621358] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621361 'move' call_tmp[621358](70598 'typeof' step[70567]))
      unknown call_tmp[621363] "expr temp" "maybe param" "maybe type" "temp"
      (621366 'move' call_tmp[621363](70600 call _cast string[26] call_tmp[621358]))
      (70602 call compilerError "can't apply 'by' using step of a non-integral type " call_tmp[621363])
    }
    (510410 return _void[55])
  }
  function chpl_need_to_check_step[70616](arg step[70614]:_any[178](?), arg strType[70618]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[510414] "RVV" "param" "temp"
    unknown call_tmp[621368] "expr temp" "maybe param" "maybe type" "temp"
    (621371 'move' call_tmp[621368](70624 call isInt strType[70618]))
    (70626 call compilerAssert call_tmp[621368])
    (475577 'end of statement')
    unknown tmp[420092] "maybe param" "temp"
    unknown call_tmp[621373] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621376 'move' call_tmp[621373](70630 'typeof' step[70614]))
    (420103 'move' tmp[420092](70632 call != call_tmp[621373] strType[70618]))
    unknown call_tmp[621378] "expr temp" "maybe param" "maybe type" "temp"
    (621381 'move' call_tmp[621378](420105 call _cond_invalid tmp[420092]))
    if call_tmp[621378]
    {
      (420108 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557076] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557077] "maybe param" "temp"
    unknown call_tmp[621383] "expr temp" "maybe param" "maybe type" "temp"
    (621386 'move' call_tmp[621383](420093 call isTrue tmp[420092]))
    (557082 'move' tmp[557077](557080 call _cond_test call_tmp[621383]))
    if tmp[557077]
    {
      unknown tmp[557084] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621388] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621391 'move' call_tmp[621388](70636 'typeof' step[70614]))
      unknown call_tmp[621393] "expr temp" "maybe param" "maybe type" "temp"
      (621396 'move' call_tmp[621393](70638 call numBits call_tmp[621388]))
      unknown call_tmp[621398] "expr temp" "maybe param" "maybe type" "temp"
      (621401 'move' call_tmp[621398](70642 call numBits strType[70618]))
      unknown call_tmp[621403] "expr temp" "maybe param" "maybe type" "temp"
      (621406 'move' call_tmp[621403](70643 call >= call_tmp[621393] call_tmp[621398]))
      (557086 'move' tmp[557084](420096 call isTrue call_tmp[621403]))
      (557091 'move' tmp[557076](557088 '_paramFoldLogical' tmp[557077] tmp[557084]))
    }
    {
      (557096 'move' tmp[557076](557093 '_paramFoldLogical' tmp[557077] 0))
    }
    (510419 'move' ret[510414](510418 'deref' tmp[557076]))
    (510416 return ret[510414])
  }
  function chpl_range_check_stride[70655](arg step[70653]:_any[178](?), arg idxType[70657]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70662 call chpl_check_step_integral step[70653])
    (475580 'end of statement')
    unknown strType[70669] "dead at end of block" "insert auto destroy" "type variable"(70668 call chpl__rangeStrideType idxType[70657])
    (541108 'move' strType[70669](541106 call chpl__rangeStrideType idxType[70657]))
    (475581 'end of statement')
    unknown call_tmp[621408] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621411 'move' call_tmp[621408](70674 'typeof' step[70653]))
    unknown call_tmp[621413] "expr temp" "maybe param" "maybe type" "temp"
    (621416 'move' call_tmp[621413](70676 call numBits call_tmp[621408]))
    unknown call_tmp[621418] "expr temp" "maybe param" "maybe type" "temp"
    (621421 'move' call_tmp[621418](70680 call numBits strType[70669]))
    unknown call_tmp[621423] "expr temp" "maybe param" "maybe type" "temp"
    (621426 'move' call_tmp[621423](70681 call > call_tmp[621413] call_tmp[621418]))
    unknown call_tmp[621428] "expr temp" "maybe param" "maybe type" "temp"
    (621431 'move' call_tmp[621428](70730 call _cond_test call_tmp[621423]))
    if call_tmp[621428]
    {
      unknown call_tmp[621433] "expr temp" "maybe param" "maybe type" "temp"
      (621436 'move' call_tmp[621433](70704 call _cast string[26] idxType[70657]))
      unknown call_tmp[621438] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621441 'move' call_tmp[621438](70724 'typeof' step[70653]))
      unknown call_tmp[621443] "expr temp" "maybe param" "maybe type" "temp"
      (621446 'move' call_tmp[621443](70726 call _cast string[26] call_tmp[621438]))
      (70728 call compilerError "can't apply 'by' to a range with idxType " call_tmp[621433] " using a step of type " call_tmp[621443])
    }
    unknown call_tmp[621448] "expr temp" "maybe param" "maybe type" "temp"
    (621451 'move' call_tmp[621448](70825 call _cond_test 1))
    if call_tmp[621448]
    {
      unknown call_tmp[621453] "expr temp" "maybe param" "maybe type" "temp"
      (621456 'move' call_tmp[621453](70738 call == step[70653] 0))
      unknown call_tmp[621458] "expr temp" "maybe param" "maybe type" "temp"
      (621461 'move' call_tmp[621458](70764 call _cond_test call_tmp[621453]))
      if call_tmp[621458]
      {
        (70762 call boundsCheckHalt module=[255] HaltWrappers[210016] "the step argument of the 'by' operator is zero")
        (357819 'referenced modules list' HaltWrappers[210016])
      }
      unknown tmp[420113] "maybe param" "temp"
      (420124 'move' tmp[420113](70774 call chpl_need_to_check_step step[70653] strType[70669]))
      unknown call_tmp[621463] "expr temp" "maybe param" "maybe type" "temp"
      (621466 'move' call_tmp[621463](420126 call _cond_invalid tmp[420113]))
      if call_tmp[621463]
      {
        (420129 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557103] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557104] "maybe param" "temp"
      unknown call_tmp[621468] "expr temp" "maybe param" "maybe type" "temp"
      (621471 'move' call_tmp[621468](420114 call isTrue tmp[420113]))
      (557109 'move' tmp[557104](557107 call _cond_test call_tmp[621468]))
      if tmp[557104]
      {
        unknown tmp[557111] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621473] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (621476 'move' call_tmp[621473](70781 'typeof' step[70653]))
        unknown call_tmp[621478] "expr temp" "maybe param" "maybe type" "temp"
        (621481 'move' call_tmp[621478](70779 call max strType[70669]))
        unknown call_tmp[621483] "expr temp" "maybe param" "maybe type" "temp"
        (621486 'move' call_tmp[621483](70782 call _cast call_tmp[621473] call_tmp[621478]))
        unknown call_tmp[621488] "expr temp" "maybe param" "maybe type" "temp"
        (621491 'move' call_tmp[621488](70784 call > step[70653] call_tmp[621483]))
        (557113 'move' tmp[557111](420117 call isTrue call_tmp[621488]))
        (557118 'move' tmp[557103](557115 '_paramFoldLogical' tmp[557104] tmp[557111]))
      }
      {
        (557123 'move' tmp[557103](557120 '_paramFoldLogical' tmp[557104] 0))
      }
      unknown call_tmp[621493] "expr temp" "maybe param" "maybe type" "temp"
      (621496 'move' call_tmp[621493](70820 call _cond_test tmp[557103]))
      if call_tmp[621493]
      {
        unknown call_tmp[621498] "expr temp" "maybe param" "maybe type" "temp"
        (621501 'move' call_tmp[621498](70813 call _cast string[26] strType[70669]))
        unknown call_tmp[621503] "expr temp" "maybe param" "maybe type" "temp"
        (621506 'move' call_tmp[621503](70815 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621498]))
        (70818 call boundsCheckHalt module=[255] HaltWrappers[210016] call_tmp[621503])
        (475585 'end of statement' strType[70669])
        (357825 'referenced modules list' HaltWrappers[210016])
      }
    }
    (510421 return _void[55])
  }
  function chpl_range_check_stride[70835](param arg step[70833]:_any[178](?), arg idxType[70837]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70842 call chpl_check_step_integral step[70833])
    (475587 'end of statement')
    unknown strType[70849] "dead at end of block" "insert auto destroy" "type variable"(70848 call chpl__rangeStrideType idxType[70837])
    (541113 'move' strType[70849](541111 call chpl__rangeStrideType idxType[70837]))
    (475588 'end of statement')
    unknown call_tmp[621508] "expr temp" "maybe param" "maybe type" "temp"
    (621511 'move' call_tmp[621508](70854 call == step[70833] 0))
    unknown call_tmp[621513] "expr temp" "maybe param" "maybe type" "temp"
    (621516 'move' call_tmp[621513](70861 call _cond_test call_tmp[621508]))
    if call_tmp[621513]
    {
      (70859 call compilerError "the step argument of the 'by' operator is zero")
    }
    unknown tmp[420134] "maybe param" "temp"
    (420145 'move' tmp[420134](70870 call chpl_need_to_check_step step[70833] strType[70849]))
    unknown call_tmp[621518] "expr temp" "maybe param" "maybe type" "temp"
    (621521 'move' call_tmp[621518](420147 call _cond_invalid tmp[420134]))
    if call_tmp[621518]
    {
      (420150 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557130] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557131] "maybe param" "temp"
    unknown call_tmp[621523] "expr temp" "maybe param" "maybe type" "temp"
    (621526 'move' call_tmp[621523](420135 call isTrue tmp[420134]))
    (557136 'move' tmp[557131](557134 call _cond_test call_tmp[621523]))
    if tmp[557131]
    {
      unknown tmp[557138] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621528] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621531 'move' call_tmp[621528](70877 'typeof' step[70833]))
      unknown call_tmp[621533] "expr temp" "maybe param" "maybe type" "temp"
      (621536 'move' call_tmp[621533](70875 call max strType[70849]))
      unknown call_tmp[621538] "expr temp" "maybe param" "maybe type" "temp"
      (621541 'move' call_tmp[621538](70878 call _cast call_tmp[621528] call_tmp[621533]))
      unknown call_tmp[621543] "expr temp" "maybe param" "maybe type" "temp"
      (621546 'move' call_tmp[621543](70880 call > step[70833] call_tmp[621538]))
      (557140 'move' tmp[557138](420138 call isTrue call_tmp[621543]))
      (557145 'move' tmp[557130](557142 '_paramFoldLogical' tmp[557131] tmp[557138]))
    }
    {
      (557150 'move' tmp[557130](557147 '_paramFoldLogical' tmp[557131] 0))
    }
    unknown call_tmp[621548] "expr temp" "maybe param" "maybe type" "temp"
    (621551 'move' call_tmp[621548](70895 call _cond_test tmp[557130]))
    if call_tmp[621548]
    {
      unknown call_tmp[621553] "expr temp" "maybe param" "maybe type" "temp"
      (621556 'move' call_tmp[621553](70888 call _cast string[26] strType[70849]))
      unknown call_tmp[621558] "expr temp" "maybe param" "maybe type" "temp"
      (621561 'move' call_tmp[621558](70890 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621553]))
      (70893 call compilerError call_tmp[621558])
      (475591 'end of statement' strType[70849])
    }
    (510423 return _void[55])
  }
  function chpl_by_help[70916](arg r[70913]:range[64319](?), arg step[70918]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510427] "RVV" "temp"
    unknown call_tmp[621565] "maybe param" "maybe type" "temp"
    (621568 'move' call_tmp[621565](70922 call low _mt[243] r[70913]))
    unknown call_tmp[621570] "maybe param" "maybe type" "temp"
    (621573 'move' call_tmp[621570](455915 'query' r[70913] 1))
    const lw[70925] "dead at end of block" "const" "insert auto destroy"
    (541115 'init var' lw[70925] call_tmp[621565] call_tmp[621570])
    unknown call_tmp[621577] "maybe param" "maybe type" "temp"
    (621580 'move' call_tmp[621577](70930 call high _mt[243] r[70913]))
    unknown call_tmp[621582] "maybe param" "maybe type" "temp"
    (621585 'move' call_tmp[621582](455918 'query' r[70913] 1))
    const hh[70933] "dead at end of block" "const" "insert auto destroy"
    (541117 'init var' hh[70933] call_tmp[621577] call_tmp[621582])
    unknown call_tmp[621589] "expr temp" "maybe param" "maybe type" "temp"
    (621592 'move' call_tmp[621589](70943 call stride _mt[243] r[70913]))
    unknown call_tmp[621596] "expr temp" "maybe param" "maybe type" "temp"
    (621599 'move' call_tmp[621596](70948 call strType _mt[243] r[70913]))
    unknown call_tmp[621601] "expr temp" "maybe param" "maybe type" "temp"
    (621604 'move' call_tmp[621601](70951 call _cast call_tmp[621596] step[70918]))
    unknown call_tmp[621606] "maybe param" "maybe type" "temp"
    (621609 'move' call_tmp[621606](70953 call * call_tmp[621589] call_tmp[621601]))
    unknown call_tmp[621613] "maybe param" "maybe type" "temp"
    (621616 'move' call_tmp[621613](70939 call strType _mt[243] r[70913]))
    const st[70955] "dead at end of block" "const" "insert auto destroy"
    (541119 'init var' st[70955] call_tmp[621606] call_tmp[621613])
    (70958 'end of statement')
    const tmp[71080] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[557327] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557328] "maybe param" "temp"
    unknown call_tmp[621620] "expr temp" "maybe param" "maybe type" "temp"
    (621623 'move' call_tmp[621620](70975 call(70971 call (partial) isAmbiguous _mt[243] r[70913])))
    (557333 'move' tmp[557328](557331 call _cond_test call_tmp[621620]))
    if tmp[557328]
    {
      unknown tmp[557157] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557158] "maybe param" "temp"
      unknown call_tmp[621627] "expr temp" "maybe param" "maybe type" "temp"
      (621630 'move' call_tmp[621627](70977 call stridable _mt[243] r[70913]))
      (557163 'move' tmp[557158](557161 call _cond_test call_tmp[621627]))
      if tmp[557158]
      {
        unknown tmp[557165] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621634] "expr temp" "maybe param" "maybe type" "temp"
        (621637 'move' call_tmp[621634](70982 call alignment _mt[243] r[70913]))
        (557167 'move' tmp[557165](70986 call _build_tuple 0 call_tmp[621634]))
        (557172 'move' tmp[557157](557169 '_paramFoldLogical' tmp[557158] tmp[557165]))
      }
      {
        unknown tmp[557174] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621641] "expr temp" "maybe param" "maybe type" "temp"
        (621644 'move' call_tmp[621641](70995 call(70990 call (partial) chpl_intToIdx _mt[243] r[70913]) 0))
        (557176 'move' tmp[557174](70997 call _build_tuple 0 call_tmp[621641]))
        (557181 'move' tmp[557157](557178 '_paramFoldLogical' tmp[557158] tmp[557174]))
      }
      (557338 'move' tmp[557327](557335 '_paramFoldLogical' tmp[557328] tmp[557157]))
    }
    {
      unknown tmp[420176] "maybe param" "temp"
      (420187 'move' tmp[420176](71007 call(71003 call (partial) hasLowBound _mt[243] r[70913])))
      unknown call_tmp[621648] "expr temp" "maybe param" "maybe type" "temp"
      (621651 'move' call_tmp[621648](420189 call _cond_invalid tmp[420176]))
      if call_tmp[621648]
      {
        (420192 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557188] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557189] "maybe param" "temp"
      unknown call_tmp[621653] "expr temp" "maybe param" "maybe type" "temp"
      (621656 'move' call_tmp[621653](420177 call isTrue tmp[420176]))
      (557194 'move' tmp[557189](557192 call _cond_test call_tmp[621653]))
      if tmp[557189]
      {
        unknown tmp[557196] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621658] "expr temp" "maybe param" "maybe type" "temp"
        (621661 'move' call_tmp[621658](71010 call > st[70955] 0))
        (557198 'move' tmp[557196](420180 call isTrue call_tmp[621658]))
        (557203 'move' tmp[557188](557200 '_paramFoldLogical' tmp[557189] tmp[557196]))
      }
      {
        (557208 'move' tmp[557188](557205 '_paramFoldLogical' tmp[557189] 0))
      }
      unknown tmp[557300] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557301] "maybe param" "temp"
      (557306 'move' tmp[557301](557304 call _cond_test tmp[557188]))
      if tmp[557301]
      {
        unknown tmp[557308] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621665] "expr temp" "maybe param" "maybe type" "temp"
        (621668 'move' call_tmp[621665](71016 call alignedLow _mt[243] r[70913]))
        (557310 'move' tmp[557308](71020 call _build_tuple 1 call_tmp[621665]))
        (557315 'move' tmp[557300](557312 '_paramFoldLogical' tmp[557301] tmp[557308]))
      }
      {
        unknown tmp[420155] "maybe param" "temp"
        (420166 'move' tmp[420155](71027 call(71023 call (partial) hasHighBound _mt[243] r[70913])))
        unknown call_tmp[621672] "expr temp" "maybe param" "maybe type" "temp"
        (621675 'move' call_tmp[621672](420168 call _cond_invalid tmp[420155]))
        if call_tmp[621672]
        {
          (420171 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557215] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557216] "maybe param" "temp"
        unknown call_tmp[621677] "expr temp" "maybe param" "maybe type" "temp"
        (621680 'move' call_tmp[621677](420156 call isTrue tmp[420155]))
        (557221 'move' tmp[557216](557219 call _cond_test call_tmp[621677]))
        if tmp[557216]
        {
          unknown tmp[557223] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621682] "expr temp" "maybe param" "maybe type" "temp"
          (621685 'move' call_tmp[621682](71030 call < st[70955] 0))
          (557225 'move' tmp[557223](420159 call isTrue call_tmp[621682]))
          (557230 'move' tmp[557215](557227 '_paramFoldLogical' tmp[557216] tmp[557223]))
        }
        {
          (557235 'move' tmp[557215](557232 '_paramFoldLogical' tmp[557216] 0))
        }
        unknown tmp[557273] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[557274] "maybe param" "temp"
        (557279 'move' tmp[557274](557277 call _cond_test tmp[557215]))
        if tmp[557274]
        {
          unknown tmp[557281] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621689] "expr temp" "maybe param" "maybe type" "temp"
          (621692 'move' call_tmp[621689](71036 call alignedHigh _mt[243] r[70913]))
          (557283 'move' tmp[557281](71040 call _build_tuple 1 call_tmp[621689]))
          (557288 'move' tmp[557273](557285 '_paramFoldLogical' tmp[557274] tmp[557281]))
        }
        {
          unknown tmp[557242] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[557243] "maybe param" "temp"
          unknown call_tmp[621696] "expr temp" "maybe param" "maybe type" "temp"
          (621699 'move' call_tmp[621696](71043 call stridable _mt[243] r[70913]))
          (557248 'move' tmp[557243](557246 call _cond_test call_tmp[621696]))
          if tmp[557243]
          {
            unknown tmp[557250] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621703] "expr temp" "maybe param" "maybe type" "temp"
            (621706 'move' call_tmp[621703](71047 call aligned _mt[243] r[70913]))
            unknown call_tmp[621710] "expr temp" "maybe param" "maybe type" "temp"
            (621713 'move' call_tmp[621710](71051 call alignment _mt[243] r[70913]))
            (557252 'move' tmp[557250](71055 call _build_tuple call_tmp[621703] call_tmp[621710]))
            (557257 'move' tmp[557242](557254 '_paramFoldLogical' tmp[557243] tmp[557250]))
          }
          {
            unknown tmp[557259] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621717] "expr temp" "maybe param" "maybe type" "temp"
            (621720 'move' call_tmp[621717](71064 call(71059 call (partial) chpl_intToIdx _mt[243] r[70913]) 0))
            (557261 'move' tmp[557259](71066 call _build_tuple 0 call_tmp[621717]))
            (557266 'move' tmp[557242](557263 '_paramFoldLogical' tmp[557243] tmp[557259]))
          }
          (557293 'move' tmp[557273](557290 '_paramFoldLogical' tmp[557274] tmp[557242]))
        }
        (557320 'move' tmp[557300](557317 '_paramFoldLogical' tmp[557301] tmp[557273]))
      }
      (557343 'move' tmp[557327](557340 '_paramFoldLogical' tmp[557328] tmp[557300]))
    }
    unknown call_tmp[621722] "expr temp" "maybe param" "maybe type" "temp"
    (621725 'move' call_tmp[621722](455921 'query' r[70913] 1))
    unknown call_tmp[621727] "maybe param" "maybe type" "temp"
    (621730 'move' call_tmp[621727](70968 call _build_tuple bool[10] call_tmp[621722]))
    (541121 'init var' tmp[71080] tmp[557327] call_tmp[621727])
    (71087 call _check_tuple_var_decl tmp[71080] 2)
    (475593 'end of statement')
    unknown call_tmp[621732] "maybe param" "maybe type" "temp"
    (621735 'move' call_tmp[621732](71081 call tmp[71080] 0))
    const ald[70960] "dead at end of block" "const" "insert auto destroy"
    (541123 'init var' ald[70960] call_tmp[621732])
    unknown call_tmp[621737] "maybe param" "maybe type" "temp"
    (621740 'move' call_tmp[621737](71084 call tmp[71080] 1))
    const alt[70962] "dead at end of block" "const" "insert auto destroy"
    (541125 'init var' alt[70962] call_tmp[621737])
    (71092 'end of statement')
    unknown call_tmp[621742] "expr temp" "maybe param" "maybe type" "temp"
    (621745 'move' call_tmp[621742](455924 'query' r[70913] 1))
    unknown call_tmp[621747] "expr temp" "maybe param" "maybe type" "temp"
    (621750 'move' call_tmp[621747](455930 'query' r[70913] 2))
    unknown call_tmp[621752] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621755 'move' call_tmp[621752](747806 'new' range[64319](?) call_tmp[621742] call_tmp[621747] 1 lw[70925] hh[70933] st[70955] alt[70962] ald[70960]))
    (510432 'move' ret[510427](510431 'deref' call_tmp[621752]))
    gotoReturn _end_chpl_by_help[510425] _end_chpl_by_help[510425]
    (475594 'end of statement' lw[70925] hh[70933] st[70955] alt[70962] ald[70960])
    label _end_chpl_by_help[510425]
    (510429 return ret[510427])
  }
  function chpl_by[71113](arg r[71111]:_any[178](?), arg step[71115]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510438] "RVV" "temp"
    unknown call_tmp[621757] "expr temp" "maybe param" "maybe type" "temp"
    (621760 'move' call_tmp[621757](71120 call isRange r[71111]))
    unknown call_tmp[621762] "expr temp" "maybe param" "maybe type" "temp"
    (621765 'move' call_tmp[621762](71121 call ! call_tmp[621757]))
    unknown call_tmp[621767] "expr temp" "maybe param" "maybe type" "temp"
    (621770 'move' call_tmp[621767](71144 call _cond_test call_tmp[621762]))
    if call_tmp[621767]
    {
      (71142 call compilerError "the first argument of the 'by' operator is not a range")
    }
    unknown call_tmp[621774] "expr temp" "maybe param" "maybe type" "temp"
    (621777 'move' call_tmp[621774](71154 call idxType _mt[243] r[71111]))
    (71157 call chpl_range_check_stride step[71115] call_tmp[621774])
    (475601 'end of statement')
    unknown call_tmp[621779] "expr temp" "maybe param" "maybe type" "temp"
    (621782 'move' call_tmp[621779](71163 call chpl_by_help r[71111] step[71115]))
    (510443 'move' ret[510438](510442 'deref' call_tmp[621779]))
    (510440 return ret[510438])
  }
  function chpl_by[71177](arg r[71174]:range[64319](?), param arg step[71179]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510447] "RVV" "temp"
    unknown call_tmp[621786] "expr temp" "maybe param" "maybe type" "temp"
    (621789 'move' call_tmp[621786](71185 call idxType _mt[243] r[71174]))
    (71188 call chpl_range_check_stride step[71179] call_tmp[621786])
    (475603 'end of statement')
    unknown call_tmp[621793] "expr temp" "maybe param" "maybe type" "temp"
    (621796 'move' call_tmp[621793](71196 call strType _mt[243] r[71174]))
    unknown call_tmp[621798] "expr temp" "maybe param" "maybe type" "temp"
    (621801 'move' call_tmp[621798](71199 call _cast call_tmp[621793] step[71179]))
    unknown call_tmp[621803] "expr temp" "maybe param" "maybe type" "temp"
    (621806 'move' call_tmp[621803](71201 call chpl_by_help r[71174] call_tmp[621798]))
    (510452 'move' ret[510447](510451 'deref' call_tmp[621803]))
    (510449 return ret[510447])
  }
  function chpl_align[71220](arg r[71217]:range[64319](?), arg algn[71223] :
  (455950 'query' r[71217] 1)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510456] "RVV" "temp"
    unknown call_tmp[621808] "expr temp" "maybe param" "maybe type" "temp"
    (621811 'move' call_tmp[621808](455953 'query' r[71217] 1))
    unknown call_tmp[621813] "expr temp" "maybe param" "maybe type" "temp"
    (621816 'move' call_tmp[621813](455959 'query' r[71217] 2))
    unknown call_tmp[621822] "expr temp" "maybe param" "maybe type" "temp"
    (621825 'move' call_tmp[621822](71237 call _low _mt[243] r[71217]))
    unknown call_tmp[621827] "expr temp" "maybe param" "maybe type" "temp"
    (621830 'move' call_tmp[621827](71241 call(71233 call (partial) chpl_intToIdx _mt[243] r[71217]) call_tmp[621822]))
    unknown call_tmp[621836] "expr temp" "maybe param" "maybe type" "temp"
    (621839 'move' call_tmp[621836](71247 call _high _mt[243] r[71217]))
    unknown call_tmp[621841] "expr temp" "maybe param" "maybe type" "temp"
    (621844 'move' call_tmp[621841](71251 call(71243 call (partial) chpl_intToIdx _mt[243] r[71217]) call_tmp[621836]))
    unknown call_tmp[621848] "expr temp" "maybe param" "maybe type" "temp"
    (621851 'move' call_tmp[621848](71253 call stride _mt[243] r[71217]))
    unknown call_tmp[621853] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621856 'move' call_tmp[621853](747807 'new' range[64319](?) call_tmp[621808] call_tmp[621813] 1 call_tmp[621827] call_tmp[621841] call_tmp[621848] algn[71223] 1))
    (510461 'move' ret[510456](510460 'deref' call_tmp[621853]))
    (510458 return ret[510456])
  }
  function chpl_align[71278](arg r[71275]:range[64319](?), arg algn[71280]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510465] "RVV" "temp"
    unknown call_tmp[621858] "expr temp" "maybe param" "maybe type" "temp"
    (621861 'move' call_tmp[621858](455972 'query' r[71275] 1))
    unknown call_tmp[621863] "expr temp" "maybe param" "maybe type" "temp"
    (621866 'move' call_tmp[621863](71303 call _cast string[26] call_tmp[621858]))
    unknown call_tmp[621868] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621871 'move' call_tmp[621868](71323 'typeof' algn[71280]))
    unknown call_tmp[621873] "expr temp" "maybe param" "maybe type" "temp"
    (621876 'move' call_tmp[621873](71325 call _cast string[26] call_tmp[621868]))
    (71327 call compilerError "can't align a range with idxType " call_tmp[621863] " using a value of type " call_tmp[621873])
    (475606 'end of statement')
    (510470 'move' ret[510465](510469 'deref' r[71275]))
    (510467 return ret[510465])
  }
  function range[64319](?).offset[71342](arg _mt[71347]:_MT[238], arg this[71344]:range[64319](?) :
  range[64319](?), in arg offset[71339]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510474] "RVV" "temp"
    unknown call_tmp[621882] "expr temp" "maybe param" "maybe type" "temp"
    (621885 'move' call_tmp[621882](375055 call intIdxType _mt[243] this[71344]))
    unknown call_tmp[621887] "maybe param" "maybe type" "temp"
    (621890 'move' call_tmp[621887](71355 call(71350 call (partial) safeCast _mt[243] offset[71339]) call_tmp[621882]))
    unknown offs[71356] "dead at end of block" "insert auto destroy"
    (541127 'init var' offs[71356] call_tmp[621887])
    (71359 'end of statement')
    unknown call_tmp[621894] "expr temp" "maybe param" "maybe type" "temp"
    (621897 'move' call_tmp[621894](375060 call stridable _mt[243] this[71344]))
    unknown call_tmp[621899] "expr temp" "maybe param" "maybe type" "temp"
    (621902 'move' call_tmp[621899](71362 call ! call_tmp[621894]))
    unknown call_tmp[621904] "expr temp" "maybe param" "maybe type" "temp"
    (621907 'move' call_tmp[621904](71391 call _cond_test call_tmp[621899]))
    if call_tmp[621904]
    {
      (71383 call compilerWarning "invoking 'offset' on an unstrided range has no effect.")
      (475608 'end of statement')
      (71388 call = offs[71356] 0)
      (475609 'end of statement' offs[71356])
    }
    unknown tmp[420197] "maybe param" "temp"
    (420208 'move' tmp[420197] 1)
    unknown call_tmp[621909] "expr temp" "maybe param" "maybe type" "temp"
    (621912 'move' call_tmp[621909](420210 call _cond_invalid tmp[420197]))
    if call_tmp[621909]
    {
      (420213 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557350] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557351] "maybe param" "temp"
    unknown call_tmp[621914] "expr temp" "maybe param" "maybe type" "temp"
    (621917 'move' call_tmp[621914](420198 call isTrue tmp[420197]))
    (557356 'move' tmp[557351](557354 call _cond_test call_tmp[621914]))
    if tmp[557351]
    {
      unknown tmp[557358] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621921] "expr temp" "maybe param" "maybe type" "temp"
      (621924 'move' call_tmp[621921](71398 call(375066 call (partial) hasFirst _mt[243] this[71344])))
      unknown call_tmp[621926] "expr temp" "maybe param" "maybe type" "temp"
      (621929 'move' call_tmp[621926](71399 call ! call_tmp[621921]))
      (557360 'move' tmp[557358](420201 call isTrue call_tmp[621926]))
      (557365 'move' tmp[557350](557362 '_paramFoldLogical' tmp[557351] tmp[557358]))
    }
    {
      (557370 'move' tmp[557350](557367 '_paramFoldLogical' tmp[557351] 0))
    }
    unknown call_tmp[621931] "expr temp" "maybe param" "maybe type" "temp"
    (621934 'move' call_tmp[621931](71427 call _cond_test tmp[557350]))
    if call_tmp[621931]
    {
      (71425 call boundsCheckHalt module=[255] HaltWrappers[210016] "invoking 'offset' on a range without the first index")
      (357857 'referenced modules list' HaltWrappers[210016])
    }
    unknown call_tmp[621938] "expr temp" "maybe param" "maybe type" "temp"
    (621941 'move' call_tmp[621938](375072 call idxType _mt[243] this[71344]))
    unknown call_tmp[621945] "expr temp" "maybe param" "maybe type" "temp"
    (621948 'move' call_tmp[621945](375077 call boundedType _mt[243] this[71344]))
    unknown call_tmp[621952] "expr temp" "maybe param" "maybe type" "temp"
    (621955 'move' call_tmp[621952](375082 call stridable _mt[243] this[71344]))
    unknown call_tmp[621959] "expr temp" "maybe param" "maybe type" "temp"
    (621962 'move' call_tmp[621959](375086 call low _mt[243] this[71344]))
    unknown call_tmp[621966] "expr temp" "maybe param" "maybe type" "temp"
    (621969 'move' call_tmp[621966](375090 call high _mt[243] this[71344]))
    unknown call_tmp[621973] "expr temp" "maybe param" "maybe type" "temp"
    (621976 'move' call_tmp[621973](375094 call stride _mt[243] this[71344]))
    unknown call_tmp[621982] "expr temp" "maybe param" "maybe type" "temp"
    (621985 'move' call_tmp[621982](71443 call firstAsInt _mt[243] this[71344]))
    unknown call_tmp[621987] "expr temp" "maybe param" "maybe type" "temp"
    (621990 'move' call_tmp[621987](71447 call + call_tmp[621982] offs[71356]))
    unknown call_tmp[621992] "expr temp" "maybe param" "maybe type" "temp"
    (621995 'move' call_tmp[621992](71450 call(375098 call (partial) chpl_intToIdx _mt[243] this[71344]) call_tmp[621987]))
    unknown call_tmp[621997] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (622000 'move' call_tmp[621997](747808 'new' range[64319](?) call_tmp[621938] call_tmp[621945] call_tmp[621952] call_tmp[621959] call_tmp[621966] call_tmp[621973] call_tmp[621992] 1))
    (510479 'move' ret[510474](510478 'deref' call_tmp[621997]))
    gotoReturn _end_offset[510472] _end_offset[510472]
    (475613 'end of statement' offs[71356])
    label _end_offset[510472]
    (510476 return ret[510474])
  }
  function range[64319](?).this[71467](arg _mt[71472]:_MT[238], const arg this[71469]:range[64319](?) :
  range[64319](?), arg other[71464]:range[64319](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510567] "RVV" "temp"
    unknown ambig[71475] "dead at end of block" "insert auto destroy"
    (541129 'init var' ambig[71475] 0)
    (71478 'end of statement')
    unknown tmp[420239] "maybe param" "temp"
    (420250 'move' tmp[420239](71485 call(71481 call (partial) isAmbiguous _mt[243] this[71469])))
    unknown call_tmp[622004] "expr temp" "maybe param" "maybe type" "temp"
    (622007 'move' call_tmp[622004](420252 call _cond_invalid tmp[420239]))
    if call_tmp[622004]
    {
      (420255 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[557377] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557378] "maybe param" "temp"
    unknown call_tmp[622009] "expr temp" "maybe param" "maybe type" "temp"
    (622012 'move' call_tmp[622009](420240 call isTrue tmp[420239]))
    (557383 'move' tmp[557378](557381 call _cond_test call_tmp[622009]))
    if tmp[557378]
    {
      (557388 'move' tmp[557377](557385 '_paramFoldLogical' tmp[557378] 1))
    }
    {
      unknown tmp[557390] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622016] "expr temp" "maybe param" "maybe type" "temp"
      (622019 'move' call_tmp[622016](71491 call(71487 call (partial) isAmbiguous _mt[243] other[71464])))
      (557392 'move' tmp[557390](420244 call isTrue call_tmp[622016]))
      (557397 'move' tmp[557377](557394 '_paramFoldLogical' tmp[557378] tmp[557390]))
    }
    unknown call_tmp[622021] "expr temp" "maybe param" "maybe type" "temp"
    (622024 'move' call_tmp[622021](71583 call _cond_test tmp[557377]))
    if call_tmp[622021]
    {
      unknown call_tmp[622028] "expr temp" "maybe param" "maybe type" "temp"
      (622031 'move' call_tmp[622028](71496 call stride _mt[243] this[71469]))
      unknown call_tmp[622033] "maybe param" "maybe type" "temp"
      (622036 'move' call_tmp[622033](71500 call abs call_tmp[622028]))
      unknown st1[71501] "dead at end of block" "insert auto destroy"
      (541131 'init var' st1[71501] call_tmp[622033])
      (71504 'end of statement')
      unknown call_tmp[622040] "expr temp" "maybe param" "maybe type" "temp"
      (622043 'move' call_tmp[622040](71508 call stride _mt[243] other[71464]))
      unknown call_tmp[622045] "maybe param" "maybe type" "temp"
      (622048 'move' call_tmp[622045](71512 call abs call_tmp[622040]))
      unknown st2[71513] "dead at end of block" "insert auto destroy"
      (541133 'init var' st2[71513] call_tmp[622045])
      (71516 'end of statement')
      unknown call_tmp[622050] "maybe param" "maybe type" "temp"
      (622053 'move' call_tmp[622050](71526 call chpl__extendedEuclid st1[71501] st2[71513]))
      unknown tmp[71527] "dead at end of block" "insert auto destroy" "temp"
      (541135 'init var' tmp[71527] call_tmp[622050])
      (71534 call _check_tuple_var_decl tmp[71527] 2)
      (475616 'end of statement')
      unknown call_tmp[622055] "maybe param" "maybe type" "temp"
      (622058 'move' call_tmp[622055](71528 call tmp[71527] 0))
      unknown g[71517] "dead at end of block" "insert auto destroy"
      (541137 'init var' g[71517] call_tmp[622055])
      unknown call_tmp[622060] "maybe param" "maybe type" "temp"
      (622063 'move' call_tmp[622060](71531 call tmp[71527] 1))
      unknown x[71519] "dead at end of block" "insert auto destroy"
      (541139 'init var' x[71519] call_tmp[622060])
      (71539 'end of statement')
      unknown tmp[420218] "maybe param" "temp"
      (420229 'move' tmp[420218] 1)
      unknown call_tmp[622065] "expr temp" "maybe param" "maybe type" "temp"
      (622068 'move' call_tmp[622065](420231 call _cond_invalid tmp[420218]))
      if call_tmp[622065]
      {
        (420234 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557404] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557405] "maybe param" "temp"
      unknown call_tmp[622070] "expr temp" "maybe param" "maybe type" "temp"
      (622073 'move' call_tmp[622070](420219 call isTrue tmp[420218]))
      (557410 'move' tmp[557405](557408 call _cond_test call_tmp[622070]))
      if tmp[557405]
      {
        unknown tmp[557412] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622075] "expr temp" "maybe param" "maybe type" "temp"
        (622078 'move' call_tmp[622075](71543 call > g[71517] 1))
        (557414 'move' tmp[557412](420222 call isTrue call_tmp[622075]))
        (557419 'move' tmp[557404](557416 '_paramFoldLogical' tmp[557405] tmp[557412]))
      }
      {
        (557424 'move' tmp[557404](557421 '_paramFoldLogical' tmp[557405] 0))
      }
      unknown call_tmp[622080] "expr temp" "maybe param" "maybe type" "temp"
      (622083 'move' call_tmp[622080](71573 call _cond_test tmp[557404]))
      if call_tmp[622080]
      {
        (71571 call boundsCheckHalt module=[255] HaltWrappers[210016] "Cannot slice ranges with ambiguous alignments unless their strides are relatively prime.")
        (357868 'referenced modules list' HaltWrappers[210016])
      }
      (71580 call = ambig[71475] 1)
      (475619 'end of statement' ambig[71475])
    }
    function computeBoundedType[71591](arg r1[71589]:_any[178](?), arg r2[71593]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[510485] "RVV" "param" "temp"
      unknown tmp[420260] "maybe param" "temp"
      (420271 'move' tmp[420260](71600 call(71596 call (partial) hasLowBound _mt[243] r1[71589])))
      unknown call_tmp[622087] "expr temp" "maybe param" "maybe type" "temp"
      (622090 'move' call_tmp[622087](420273 call _cond_invalid tmp[420260]))
      if call_tmp[622087]
      {
        (420276 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown low[71609] "dead at end of block" "param"
      unknown tmp[557431] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557432] "maybe param" "temp"
      unknown call_tmp[622092] "expr temp" "maybe param" "maybe type" "temp"
      (622095 'move' call_tmp[622092](420261 call isTrue tmp[420260]))
      (557437 'move' tmp[557432](557435 call _cond_test call_tmp[622092]))
      if tmp[557432]
      {
        (557442 'move' tmp[557431](557439 '_paramFoldLogical' tmp[557432] 1))
      }
      {
        unknown tmp[557444] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622099] "expr temp" "maybe param" "maybe type" "temp"
        (622102 'move' call_tmp[622099](71606 call(71602 call (partial) hasLowBound _mt[243] r2[71593])))
        (557446 'move' tmp[557444](420265 call isTrue call_tmp[622099]))
        (557451 'move' tmp[557431](557448 '_paramFoldLogical' tmp[557432] tmp[557444]))
      }
      (541141 'init var' low[71609] tmp[557431])
      (71612 'end of statement')
      unknown tmp[420281] "maybe param" "temp"
      (420292 'move' tmp[420281](71619 call(71615 call (partial) hasHighBound _mt[243] r1[71589])))
      unknown call_tmp[622106] "expr temp" "maybe param" "maybe type" "temp"
      (622109 'move' call_tmp[622106](420294 call _cond_invalid tmp[420281]))
      if call_tmp[622106]
      {
        (420297 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown high[71628] "dead at end of block" "param"
      unknown tmp[557458] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557459] "maybe param" "temp"
      unknown call_tmp[622111] "expr temp" "maybe param" "maybe type" "temp"
      (622114 'move' call_tmp[622111](420282 call isTrue tmp[420281]))
      (557464 'move' tmp[557459](557462 call _cond_test call_tmp[622111]))
      if tmp[557459]
      {
        (557469 'move' tmp[557458](557466 '_paramFoldLogical' tmp[557459] 1))
      }
      {
        unknown tmp[557471] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622118] "expr temp" "maybe param" "maybe type" "temp"
        (622121 'move' call_tmp[622118](71625 call(71621 call (partial) hasHighBound _mt[243] r2[71593])))
        (557473 'move' tmp[557471](420286 call isTrue call_tmp[622118]))
        (557478 'move' tmp[557458](557475 '_paramFoldLogical' tmp[557459] tmp[557471]))
      }
      (541143 'init var' high[71628] tmp[557458])
      (71631 'end of statement')
      unknown tmp[420302] "maybe param" "temp"
      (420313 'move' tmp[420302] low[71609])
      unknown call_tmp[622123] "expr temp" "maybe param" "maybe type" "temp"
      (622126 'move' call_tmp[622123](420315 call _cond_invalid tmp[420302]))
      if call_tmp[622123]
      {
        (420318 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557485] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557486] "maybe param" "temp"
      unknown call_tmp[622128] "expr temp" "maybe param" "maybe type" "temp"
      (622131 'move' call_tmp[622128](420303 call isTrue tmp[420302]))
      (557491 'move' tmp[557486](557489 call _cond_test call_tmp[622128]))
      if tmp[557486]
      {
        unknown tmp[557493] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557495 'move' tmp[557493](420306 call isTrue high[71628]))
        (557500 'move' tmp[557485](557497 '_paramFoldLogical' tmp[557486] tmp[557493]))
      }
      {
        (557505 'move' tmp[557485](557502 '_paramFoldLogical' tmp[557486] 0))
      }
      unknown call_tmp[622133] "expr temp" "maybe param" "maybe type" "temp"
      (622136 'move' call_tmp[622133](71674 call _cond_test tmp[557485]))
      if call_tmp[622133]
      {
        (510490 'move' ret[510485](510489 'deref' bounded[64208]))
        gotoReturn _end_computeBoundedType[510483] _end_computeBoundedType[510483]
      }
      {
        unknown call_tmp[622138] "expr temp" "maybe param" "maybe type" "temp"
        (622141 'move' call_tmp[622138](71668 call _cond_test low[71609]))
        if call_tmp[622138]
        {
          (510495 'move' ret[510485](510494 'deref' boundedLow[64210]))
          gotoReturn _end_computeBoundedType[510483] _end_computeBoundedType[510483]
        }
        {
          unknown call_tmp[622143] "expr temp" "maybe param" "maybe type" "temp"
          (622146 'move' call_tmp[622143](71662 call _cond_test high[71628]))
          if call_tmp[622143]
          {
            (510500 'move' ret[510485](510499 'deref' boundedHigh[64212]))
            gotoReturn _end_computeBoundedType[510483] _end_computeBoundedType[510483]
          }
          {
            (510505 'move' ret[510485](510504 'deref' boundedNone[64214]))
            gotoReturn _end_computeBoundedType[510483] _end_computeBoundedType[510483]
          }
        }
      }
      label _end_computeBoundedType[510483]
      (510487 return ret[510485])
    }
    unknown lo1[71696] "dead at end of block" "insert auto destroy"
    unknown tmp[557512] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557513] "maybe param" "temp"
    unknown call_tmp[622150] "expr temp" "maybe param" "maybe type" "temp"
    (622153 'move' call_tmp[622150](71684 call(375113 call (partial) hasLowBound _mt[243] this[71469])))
    (557518 'move' tmp[557513](557516 call _cond_test call_tmp[622150]))
    if tmp[557513]
    {
      unknown tmp[557520] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557522 'move' tmp[557520](71686 call _low _mt[243] this[71469]))
      (557527 'move' tmp[557512](557524 '_paramFoldLogical' tmp[557513] tmp[557520]))
    }
    {
      unknown tmp[557529] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557531 'move' tmp[557529](71690 call _low _mt[243] other[71464]))
      (557536 'move' tmp[557512](557533 '_paramFoldLogical' tmp[557513] tmp[557529]))
    }
    (541145 'init var' lo1[71696] tmp[557512])
    (71699 'end of statement')
    unknown hi1[71714] "dead at end of block" "insert auto destroy"
    unknown tmp[557543] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557544] "maybe param" "temp"
    unknown call_tmp[622161] "expr temp" "maybe param" "maybe type" "temp"
    (622164 'move' call_tmp[622161](71702 call(375117 call (partial) hasHighBound _mt[243] this[71469])))
    (557549 'move' tmp[557544](557547 call _cond_test call_tmp[622161]))
    if tmp[557544]
    {
      unknown tmp[557551] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557553 'move' tmp[557551](71704 call _high _mt[243] this[71469]))
      (557558 'move' tmp[557543](557555 '_paramFoldLogical' tmp[557544] tmp[557551]))
    }
    {
      unknown tmp[557560] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557562 'move' tmp[557560](71708 call _high _mt[243] other[71464]))
      (557567 'move' tmp[557543](557564 '_paramFoldLogical' tmp[557544] tmp[557560]))
    }
    (541147 'init var' hi1[71714] tmp[557543])
    (71717 'end of statement')
    unknown call_tmp[622172] "expr temp" "maybe param" "maybe type" "temp"
    (622175 'move' call_tmp[622172](71720 call stride _mt[243] this[71469]))
    unknown call_tmp[622177] "maybe param" "maybe type" "temp"
    (622180 'move' call_tmp[622177](71724 call abs call_tmp[622172]))
    unknown st1[71725] "dead at end of block" "insert auto destroy"
    (541149 'init var' st1[71725] call_tmp[622177])
    (71728 'end of statement')
    unknown lo2[71746] "dead at end of block" "insert auto destroy"
    unknown tmp[557574] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557575] "maybe param" "temp"
    unknown call_tmp[622184] "expr temp" "maybe param" "maybe type" "temp"
    (622187 'move' call_tmp[622184](71734 call(71730 call (partial) hasLowBound _mt[243] other[71464])))
    (557580 'move' tmp[557575](557578 call _cond_test call_tmp[622184]))
    if tmp[557575]
    {
      unknown tmp[557582] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557584 'move' tmp[557582](71736 call _low _mt[243] other[71464]))
      (557589 'move' tmp[557574](557586 '_paramFoldLogical' tmp[557575] tmp[557582]))
    }
    {
      unknown tmp[557591] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557593 'move' tmp[557591](71740 call _low _mt[243] this[71469]))
      (557598 'move' tmp[557574](557595 '_paramFoldLogical' tmp[557575] tmp[557591]))
    }
    (541151 'init var' lo2[71746] tmp[557574])
    (71749 'end of statement')
    unknown hi2[71767] "dead at end of block" "insert auto destroy"
    unknown tmp[557605] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557606] "maybe param" "temp"
    unknown call_tmp[622195] "expr temp" "maybe param" "maybe type" "temp"
    (622198 'move' call_tmp[622195](71755 call(71751 call (partial) hasHighBound _mt[243] other[71464])))
    (557611 'move' tmp[557606](557609 call _cond_test call_tmp[622195]))
    if tmp[557606]
    {
      unknown tmp[557613] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557615 'move' tmp[557613](71757 call _high _mt[243] other[71464]))
      (557620 'move' tmp[557605](557617 '_paramFoldLogical' tmp[557606] tmp[557613]))
    }
    {
      unknown tmp[557622] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557624 'move' tmp[557622](71761 call _high _mt[243] this[71469]))
      (557629 'move' tmp[557605](557626 '_paramFoldLogical' tmp[557606] tmp[557622]))
    }
    (541153 'init var' hi2[71767] tmp[557605])
    (71770 'end of statement')
    unknown call_tmp[622206] "expr temp" "maybe param" "maybe type" "temp"
    (622209 'move' call_tmp[622206](71773 call stride _mt[243] other[71464]))
    unknown call_tmp[622211] "maybe param" "maybe type" "temp"
    (622214 'move' call_tmp[622211](71777 call abs call_tmp[622206]))
    unknown st2[71778] "dead at end of block" "insert auto destroy"
    (541155 'init var' st2[71778] call_tmp[622211])
    (71781 'end of statement')
    unknown call_tmp[622218] "expr temp" "maybe param" "maybe type" "temp"
    (622221 'move' call_tmp[622218](375121 call intIdxType _mt[243] this[71469]))
    unknown call_tmp[622223] "expr temp" "maybe param" "maybe type" "temp"
    (622226 'move' call_tmp[622223](71785 call isUintType call_tmp[622218]))
    unknown call_tmp[622228] "expr temp" "maybe param" "maybe type" "temp"
    (622231 'move' call_tmp[622228](71801 call _cond_test call_tmp[622223]))
    if call_tmp[622228]
    {
      unknown call_tmp[622233] "expr temp" "maybe param" "maybe type" "temp"
      (622236 'move' call_tmp[622233](71788 call < lo1[71696] 0))
      unknown call_tmp[622238] "expr temp" "maybe param" "maybe type" "temp"
      (622241 'move' call_tmp[622238](71795 call _cond_test call_tmp[622233]))
      if call_tmp[622238]
      {
        (71792 call = lo1[71696] 0)
        (475628 'end of statement' lo1[71696])
      }
    }
    unknown call_tmp[622245] "maybe param" "maybe type" "temp"
    (622248 'move' call_tmp[622245](71807 call stride _mt[243] this[71469]))
    unknown call_tmp[622252] "maybe param" "maybe type" "temp"
    (622255 'move' call_tmp[622252](375127 call strType _mt[243] this[71469]))
    unknown newStride[71810] "dead at end of block" "insert auto destroy"
    (541157 'init var' newStride[71810] call_tmp[622245] call_tmp[622252])
    (71813 'end of statement')
    unknown call_tmp[622259] "expr temp" "maybe param" "maybe type" "temp"
    (622262 'move' call_tmp[622259](71817 call stride _mt[243] this[71469]))
    unknown call_tmp[622264] "maybe param" "maybe type" "temp"
    (622267 'move' call_tmp[622264](71821 call abs call_tmp[622259]))
    unknown call_tmp[622271] "maybe param" "maybe type" "temp"
    (622274 'move' call_tmp[622271](375131 call strType _mt[243] this[71469]))
    unknown lcm[71822] "dead at end of block" "insert auto destroy"
    (541159 'init var' lcm[71822] call_tmp[622264] call_tmp[622271])
    (71825 'end of statement')
    unknown call_tmp[622278] "expr temp" "maybe param" "maybe type" "temp"
    (622281 'move' call_tmp[622278](375140 call strType _mt[243] this[71469]))
    unknown call_tmp[622283] "expr temp" "maybe param" "maybe type" "temp"
    (622286 'move' call_tmp[622283](71838 call _cast call_tmp[622278] 0))
    unknown call_tmp[622288] "maybe param" "maybe type" "temp"
    (622291 'move' call_tmp[622288](71841 call _build_tuple lcm[71822] call_tmp[622283]))
    unknown call_tmp[622295] "expr temp" "maybe param" "maybe type" "temp"
    (622298 'move' call_tmp[622295](375135 call strType _mt[243] this[71469]))
    unknown call_tmp[622300] "maybe param" "maybe type" "temp"
    (622303 'move' call_tmp[622300](71833 call * 2 call_tmp[622295]))
    unknown tmp[71843] "dead at end of block" "insert auto destroy" "temp"
    (541161 'init var' tmp[71843] call_tmp[622288] call_tmp[622300])
    (71850 call _check_tuple_var_decl tmp[71843] 2)
    (475630 'end of statement')
    unknown call_tmp[622305] "maybe param" "maybe type" "temp"
    (622308 'move' call_tmp[622305](71844 call tmp[71843] 0))
    unknown g[71826] "dead at end of block" "insert auto destroy"
    (541163 'init var' g[71826] call_tmp[622305])
    unknown call_tmp[622310] "maybe param" "maybe type" "temp"
    (622313 'move' call_tmp[622310](71847 call tmp[71843] 1))
    unknown x[71828] "dead at end of block" "insert auto destroy"
    (541165 'init var' x[71828] call_tmp[622310])
    (71855 'end of statement')
    unknown tmp[420323] "maybe param" "temp"
    unknown call_tmp[622317] "expr temp" "maybe param" "maybe type" "temp"
    (622320 'move' call_tmp[622317](71857 call stride _mt[243] this[71469]))
    unknown call_tmp[622324] "expr temp" "maybe param" "maybe type" "temp"
    (622327 'move' call_tmp[622324](71861 call stride _mt[243] other[71464]))
    (420334 'move' tmp[420323](71864 call != call_tmp[622317] call_tmp[622324]))
    unknown call_tmp[622329] "expr temp" "maybe param" "maybe type" "temp"
    (622332 'move' call_tmp[622329](420336 call _cond_invalid tmp[420323]))
    if call_tmp[622329]
    {
      (420339 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557636] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557637] "maybe param" "temp"
    unknown call_tmp[622334] "expr temp" "maybe param" "maybe type" "temp"
    (622337 'move' call_tmp[622334](420324 call isTrue tmp[420323]))
    (557642 'move' tmp[557637](557640 call _cond_test call_tmp[622334]))
    if tmp[557637]
    {
      unknown tmp[557644] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622341] "expr temp" "maybe param" "maybe type" "temp"
      (622344 'move' call_tmp[622341](71867 call stride _mt[243] this[71469]))
      unknown call_tmp[622348] "expr temp" "maybe param" "maybe type" "temp"
      (622351 'move' call_tmp[622348](71871 call stride _mt[243] other[71464]))
      unknown call_tmp[622353] "expr temp" "maybe param" "maybe type" "temp"
      (622356 'move' call_tmp[622353](71874 call - call_tmp[622348]))
      unknown call_tmp[622358] "expr temp" "maybe param" "maybe type" "temp"
      (622361 'move' call_tmp[622358](71876 call != call_tmp[622341] call_tmp[622353]))
      (557646 'move' tmp[557644](420327 call isTrue call_tmp[622358]))
      (557651 'move' tmp[557636](557648 '_paramFoldLogical' tmp[557637] tmp[557644]))
    }
    {
      (557656 'move' tmp[557636](557653 '_paramFoldLogical' tmp[557637] 0))
    }
    unknown call_tmp[622363] "expr temp" "maybe param" "maybe type" "temp"
    (622366 'move' call_tmp[622363](71958 call _cond_test tmp[557636]))
    if call_tmp[622363]
    {
      unknown call_tmp[622368] "maybe param" "maybe type" "temp"
      (622371 'move' call_tmp[622368](71889 call chpl__extendedEuclid st1[71725] st2[71778]))
      const tmp[71890] "dead at end of block" "const" "insert auto destroy" "temp"
      (541167 'init var' tmp[71890] call_tmp[622368])
      (71897 call _check_tuple_var_decl tmp[71890] 2)
      (475632 'end of statement')
      unknown call_tmp[622373] "maybe param" "maybe type" "temp"
      (622376 'move' call_tmp[622373](71891 call tmp[71890] 0))
      const tg[71880] "dead at end of block" "const" "insert auto destroy"
      (541169 'init var' tg[71880] call_tmp[622373])
      unknown call_tmp[622378] "maybe param" "maybe type" "temp"
      (622381 'move' call_tmp[622378](71894 call tmp[71890] 1))
      const tx[71882] "dead at end of block" "const" "insert auto destroy"
      (541171 'init var' tx[71882] call_tmp[622378])
      (71902 'end of statement')
      unknown tmp[491890] "expr temp" "maybe param" "maybe type" "temp"
      unknown tmp[491931] "maybe param" "temp"
      (491934 'move' tmp[491931](491932 'addr of' g[71826]))
      unknown tmp[491942] "maybe param" "temp"
      (491945 'move' tmp[491942](491943 'addr of' x[71828]))
      unknown call_tmp[622387] "expr temp" "maybe param" "maybe type" "temp"
      (622390 'move' call_tmp[622387](375148 call strType _mt[243] this[71469]))
      unknown call_tmp[622392] "expr temp" "maybe param" "maybe type" "temp"
      (622395 'move' call_tmp[622392](71915 call(71910 call (partial) safeCast _mt[243] tg[71880]) call_tmp[622387]))
      unknown call_tmp[622401] "expr temp" "maybe param" "maybe type" "temp"
      (622404 'move' call_tmp[622401](375152 call strType _mt[243] this[71469]))
      unknown call_tmp[622406] "expr temp" "maybe param" "maybe type" "temp"
      (622409 'move' call_tmp[622406](71922 call(71917 call (partial) safeCast _mt[243] tx[71882]) call_tmp[622401]))
      (491891 'move' tmp[491890](71924 call _build_tuple call_tmp[622392] call_tmp[622406]))
      { scopeless
        unknown call_tmp[622413] "expr temp" "maybe param" "maybe type" "temp"
        (622416 'move' call_tmp[622413](491897 call size _mt[243] tmp[491890]))
        unknown call_tmp[622418] "expr temp" "maybe param" "maybe type" "temp"
        (622421 'move' call_tmp[622418](491900 call != 2 call_tmp[622413]))
        unknown call_tmp[622423] "expr temp" "maybe param" "maybe type" "temp"
        (622426 'move' call_tmp[622423](491923 call _cond_test call_tmp[622418]))
        if call_tmp[622423]
        {
          (491919 call compilerError "tuple size must match the number of grouped variables" 0)
        }
      }
      unknown call_tmp[622428] "expr temp" "maybe param" "maybe type" "temp"
      (622431 'move' call_tmp[622428](491929 call tmp[491890] 0))
      (491936 call = tmp[491931] call_tmp[622428])
      unknown call_tmp[622433] "expr temp" "maybe param" "maybe type" "temp"
      (622436 'move' call_tmp[622433](491940 call tmp[491890] 1))
      (491947 call = tmp[491942] call_tmp[622433])
      (475633 'end of statement' g[71826] x[71828] tg[71880] tx[71882])
      unknown call_tmp[622438] "expr temp" "maybe param" "maybe type" "temp"
      (622441 'move' call_tmp[622438](71932 call / st1[71725] g[71826]))
      unknown call_tmp[622443] "expr temp" "maybe param" "maybe type" "temp"
      (622446 'move' call_tmp[622443](71935 call * call_tmp[622438] st2[71778]))
      (71937 call = lcm[71822] call_tmp[622443])
      (475638 'end of statement' lcm[71822] st1[71725] g[71826] st2[71778])
      unknown tmp[557663] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557664] "maybe param" "temp"
      unknown call_tmp[622450] "expr temp" "maybe param" "maybe type" "temp"
      (622453 'move' call_tmp[622450](71942 call stride _mt[243] this[71469]))
      unknown call_tmp[622455] "expr temp" "maybe param" "maybe type" "temp"
      (622458 'move' call_tmp[622455](71946 call > call_tmp[622450] 0))
      (557669 'move' tmp[557664](557667 call _cond_test call_tmp[622455]))
      if tmp[557664]
      {
        (557674 'move' tmp[557663](557671 '_paramFoldLogical' tmp[557664] lcm[71822]))
      }
      {
        unknown tmp[557676] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557678 'move' tmp[557676](71950 call - lcm[71822]))
        (557683 'move' tmp[557663](557680 '_paramFoldLogical' tmp[557664] tmp[557676]))
      }
      (71955 call = newStride[71810] tmp[557663])
      (475643 'end of statement' newStride[71810] lcm[71822] lcm[71822])
    }
    unknown emptyIntersection[71963] "dead at end of block" "insert auto destroy" "split inited"
    unknown type_tmp[541173] "maybe param" "maybe type" "temp"
    (541179 'move' type_tmp[541173] bool[10])
    (541175 'init var split decl' emptyIntersection[71963] type_tmp[541173])
    (71966 'end of statement')
    function min[71973](arg x[71970]:int(64)[13], arg y[71976]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510511] "RVV" "temp"
      unknown call_tmp[622460] "expr temp" "maybe param" "maybe type" "temp"
      (622463 'move' call_tmp[622460](71983 call max int(64)[13]))
      unknown call_tmp[622465] "expr temp" "maybe param" "maybe type" "temp"
      (622468 'move' call_tmp[622465](71984 call > y[71976] call_tmp[622460]))
      unknown call_tmp[622470] "expr temp" "maybe param" "maybe type" "temp"
      (622473 'move' call_tmp[622470](71990 call _cond_test call_tmp[622465]))
      if call_tmp[622470]
      {
        (510516 'move' ret[510511](510515 'deref' x[71970]))
        gotoReturn _end_min[510509] _end_min[510509]
      }
      unknown call_tmp[622475] "expr temp" "maybe param" "maybe type" "temp"
      (622478 'move' call_tmp[622475](72000 call _cast int(64)[13] y[71976]))
      unknown call_tmp[622480] "expr temp" "maybe param" "maybe type" "temp"
      (622483 'move' call_tmp[622480](72002 call min x[71970] call_tmp[622475]))
      (510521 'move' ret[510511](510520 'deref' call_tmp[622480]))
      label _end_min[510509]
      (510513 return ret[510511])
    }
    function min[72013](arg x[72010]:uint(64)[115], arg y[72016]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510525] "RVV" "temp"
      unknown call_tmp[622485] "expr temp" "maybe param" "maybe type" "temp"
      (622488 'move' call_tmp[622485](72021 call < y[72016] 0))
      unknown call_tmp[622490] "expr temp" "maybe param" "maybe type" "temp"
      (622493 'move' call_tmp[622490](72032 call _cond_test call_tmp[622485]))
      if call_tmp[622490]
      {
        (72025 call = emptyIntersection[71963] 1)
        (475649 'end of statement')
        (510530 'move' ret[510525](510529 'deref' x[72010]))
        gotoReturn _end_min[510523] _end_min[510523]
      }
      unknown call_tmp[622495] "expr temp" "maybe param" "maybe type" "temp"
      (622498 'move' call_tmp[622495](72042 call _cast uint(64)[115] y[72016]))
      unknown call_tmp[622500] "expr temp" "maybe param" "maybe type" "temp"
      (622503 'move' call_tmp[622500](72044 call min x[72010] call_tmp[622495]))
      (510535 'move' ret[510525](510534 'deref' call_tmp[622500]))
      label _end_min[510523]
      (510527 return ret[510525])
    }
    function max[72055](arg x[72052]:int(64)[13], arg y[72058]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510539] "RVV" "temp"
      unknown call_tmp[622505] "expr temp" "maybe param" "maybe type" "temp"
      (622508 'move' call_tmp[622505](72065 call max int(64)[13]))
      unknown call_tmp[622510] "expr temp" "maybe param" "maybe type" "temp"
      (622513 'move' call_tmp[622510](72066 call > y[72058] call_tmp[622505]))
      unknown call_tmp[622515] "expr temp" "maybe param" "maybe type" "temp"
      (622518 'move' call_tmp[622515](72077 call _cond_test call_tmp[622510]))
      if call_tmp[622515]
      {
        (72070 call = emptyIntersection[71963] 1)
        (475652 'end of statement')
        (510544 'move' ret[510539](510543 'deref' x[72052]))
        gotoReturn _end_max[510537] _end_max[510537]
      }
      unknown call_tmp[622520] "expr temp" "maybe param" "maybe type" "temp"
      (622523 'move' call_tmp[622520](72087 call _cast int(64)[13] y[72058]))
      unknown call_tmp[622525] "expr temp" "maybe param" "maybe type" "temp"
      (622528 'move' call_tmp[622525](72089 call max x[72052] call_tmp[622520]))
      (510549 'move' ret[510539](510548 'deref' call_tmp[622525]))
      label _end_max[510537]
      (510541 return ret[510539])
    }
    function max[72100](arg x[72097]:uint(64)[115], arg y[72103]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510553] "RVV" "temp"
      unknown call_tmp[622530] "expr temp" "maybe param" "maybe type" "temp"
      (622533 'move' call_tmp[622530](72108 call < y[72103] 0))
      unknown call_tmp[622535] "expr temp" "maybe param" "maybe type" "temp"
      (622538 'move' call_tmp[622535](72114 call _cond_test call_tmp[622530]))
      if call_tmp[622535]
      {
        (510558 'move' ret[510553](510557 'deref' x[72097]))
        gotoReturn _end_max[510551] _end_max[510551]
      }
      unknown call_tmp[622540] "expr temp" "maybe param" "maybe type" "temp"
      (622543 'move' call_tmp[622540](72124 call _cast uint(64)[115] y[72103]))
      unknown call_tmp[622545] "expr temp" "maybe param" "maybe type" "temp"
      (622548 'move' call_tmp[622545](72126 call max x[72097] call_tmp[622540]))
      (510563 'move' ret[510553](510562 'deref' call_tmp[622545]))
      label _end_max[510551]
      (510555 return ret[510553])
    }
    (541181 'init var split init' emptyIntersection[71963] 0 type_tmp[541173])
    (475657 'end of statement' emptyIntersection[71963])
    unknown call_tmp[622552] "expr temp" "maybe param" "maybe type" "temp"
    (622555 'move' call_tmp[622552](375184 call intIdxType _mt[243] this[71469]))
    unknown call_tmp[622557] "expr temp" "maybe param" "maybe type" "temp"
    (622560 'move' call_tmp[622557](72140 call max lo1[71696] lo2[71746]))
    unknown call_tmp[622562] "maybe param" "maybe type" "temp"
    (622565 'move' call_tmp[622562](72142 call _cast call_tmp[622552] call_tmp[622557]))
    unknown newlo[72144] "dead at end of block" "insert auto destroy"
    (541184 'init var' newlo[72144] call_tmp[622562])
    (72147 'end of statement')
    unknown call_tmp[622569] "expr temp" "maybe param" "maybe type" "temp"
    (622572 'move' call_tmp[622569](375190 call intIdxType _mt[243] this[71469]))
    unknown call_tmp[622574] "expr temp" "maybe param" "maybe type" "temp"
    (622577 'move' call_tmp[622574](72152 call min hi1[71714] hi2[71767]))
    unknown call_tmp[622579] "maybe param" "maybe type" "temp"
    (622582 'move' call_tmp[622579](72154 call _cast call_tmp[622569] call_tmp[622574]))
    unknown newhi[72156] "dead at end of block" "insert auto destroy"
    (541186 'init var' newhi[72156] call_tmp[622579])
    (72159 'end of statement')
    unknown call_tmp[622584] "expr temp" "maybe param" "maybe type" "temp"
    (622587 'move' call_tmp[622584](72172 call _cond_test emptyIntersection[71963]))
    if call_tmp[622584]
    {
      (72163 call = newlo[72144] 1)
      (475663 'end of statement' newlo[72144])
      (72169 call = newhi[72156] 0)
      (475665 'end of statement' newhi[72156])
    }
    unknown tmp[420344] "maybe param" "temp"
    (420355 'move' tmp[420344](72209 call ! ambig[71475]))
    unknown call_tmp[622589] "expr temp" "maybe param" "maybe type" "temp"
    (622592 'move' call_tmp[622589](420357 call _cond_invalid tmp[420344]))
    if call_tmp[622589]
    {
      (420360 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown result[72224] "dead at end of block" "insert auto destroy"
    unknown tmp[557717] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557718] "maybe param" "temp"
    unknown call_tmp[622594] "expr temp" "maybe param" "maybe type" "temp"
    (622597 'move' call_tmp[622594](420345 call isTrue tmp[420344]))
    (557723 'move' tmp[557718](557721 call _cond_test call_tmp[622594]))
    if tmp[557718]
    {
      unknown tmp[420365] "maybe param" "temp"
      (420376 'move' tmp[420365](72212 call aligned _mt[243] this[71469]))
      unknown call_tmp[622601] "expr temp" "maybe param" "maybe type" "temp"
      (622604 'move' call_tmp[622601](420378 call _cond_invalid tmp[420365]))
      if call_tmp[622601]
      {
        (420381 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[557690] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557691] "maybe param" "temp"
      unknown call_tmp[622606] "expr temp" "maybe param" "maybe type" "temp"
      (622609 'move' call_tmp[622606](420366 call isTrue tmp[420365]))
      (557696 'move' tmp[557691](557694 call _cond_test call_tmp[622606]))
      if tmp[557691]
      {
        (557701 'move' tmp[557690](557698 '_paramFoldLogical' tmp[557691] 1))
      }
      {
        unknown tmp[557703] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622613] "expr temp" "maybe param" "maybe type" "temp"
        (622616 'move' call_tmp[622613](72216 call aligned _mt[243] other[71464]))
        (557705 'move' tmp[557703](420370 call isTrue call_tmp[622613]))
        (557710 'move' tmp[557690](557707 '_paramFoldLogical' tmp[557691] tmp[557703]))
      }
      unknown tmp[557725] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557727 'move' tmp[557725](420348 call isTrue tmp[557690]))
      (557732 'move' tmp[557717](557729 '_paramFoldLogical' tmp[557718] tmp[557725]))
    }
    {
      (557737 'move' tmp[557717](557734 '_paramFoldLogical' tmp[557718] 0))
    }
    unknown call_tmp[622620] "expr temp" "maybe param" "maybe type" "temp"
    (622623 'move' call_tmp[622620](375199 call idxType _mt[243] this[71469]))
    unknown call_tmp[622625] "expr temp" "maybe param" "maybe type" "temp"
    (622628 'move' call_tmp[622625](72184 call computeBoundedType this[71469] other[71464]))
    unknown call_tmp[622632] "expr temp" "maybe param" "maybe type" "temp"
    (622635 'move' call_tmp[622632](72186 call stridable _mt[243] this[71469]))
    unknown call_tmp[622639] "expr temp" "maybe param" "maybe type" "temp"
    (622642 'move' call_tmp[622639](72190 call stridable _mt[243] other[71464]))
    unknown call_tmp[622644] "expr temp" "maybe param" "maybe type" "temp"
    (622647 'move' call_tmp[622644](72193 call | call_tmp[622632] call_tmp[622639]))
    unknown call_tmp[622651] "expr temp" "maybe param" "maybe type" "temp"
    (622654 'move' call_tmp[622651](72198 call(375205 call (partial) chpl_intToIdx _mt[243] this[71469]) newlo[72144]))
    unknown call_tmp[622658] "expr temp" "maybe param" "maybe type" "temp"
    (622661 'move' call_tmp[622658](72202 call(375210 call (partial) chpl_intToIdx _mt[243] this[71469]) newhi[72156]))
    unknown call_tmp[622665] "expr temp" "maybe param" "maybe type" "temp"
    (622668 'move' call_tmp[622665](72207 call(375216 call (partial) chpl_intToIdx _mt[243] this[71469]) 0))
    unknown call_tmp[622670] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (622673 'move' call_tmp[622670](747809 'new' range[64319](?) call_tmp[622620] call_tmp[622625] call_tmp[622644] call_tmp[622651] call_tmp[622658] newStride[71810] call_tmp[622665] tmp[557717]))
    (541188 'init var' result[72224] call_tmp[622670])
    (72227 'end of statement' lo1[71696] lo2[71746] hi1[71714] hi2[71767] newlo[72144] newhi[72156] newStride[71810])
    unknown call_tmp[622677] "expr temp" "maybe param" "maybe type" "temp"
    (622680 'move' call_tmp[622677](72229 call stridable _mt[243] result[72224]))
    unknown call_tmp[622682] "expr temp" "maybe param" "maybe type" "temp"
    (622685 'move' call_tmp[622682](72433 call _cond_test call_tmp[622677]))
    if call_tmp[622682]
    {
      unknown call_tmp[622689] "expr temp" "maybe param" "maybe type" "temp"
      (622692 'move' call_tmp[622689](72234 call alignment _mt[243] this[71469]))
      unknown call_tmp[622694] "expr temp" "maybe param" "maybe type" "temp"
      (622697 'move' call_tmp[622694](72238 call chpl__idxToInt call_tmp[622689]))
      unknown call_tmp[622701] "expr temp" "maybe param" "maybe type" "temp"
      (622704 'move' call_tmp[622701](375222 call intIdxType _mt[243] this[71469]))
      unknown call_tmp[622706] "expr temp" "maybe param" "maybe type" "temp"
      (622709 'move' call_tmp[622706](72241 call _cast call_tmp[622701] st1[71725]))
      unknown call_tmp[622711] "expr temp" "maybe param" "maybe type" "temp"
      (622714 'move' call_tmp[622711](72243 call % call_tmp[622694] call_tmp[622706]))
      unknown call_tmp[622716] "maybe param" "maybe type" "temp"
      (622719 'move' call_tmp[622716](72246 call _cast int(64)[13] call_tmp[622711]))
      unknown al1[72248] "dead at end of block" "insert auto destroy"
      (541190 'init var' al1[72248] call_tmp[622716])
      (72251 'end of statement')
      unknown call_tmp[622723] "expr temp" "maybe param" "maybe type" "temp"
      (622726 'move' call_tmp[622723](72255 call alignment _mt[243] other[71464]))
      unknown call_tmp[622728] "expr temp" "maybe param" "maybe type" "temp"
      (622731 'move' call_tmp[622728](72259 call chpl__idxToInt call_tmp[622723]))
      unknown call_tmp[622735] "expr temp" "maybe param" "maybe type" "temp"
      (622738 'move' call_tmp[622735](72262 call intIdxType _mt[243] other[71464]))
      unknown call_tmp[622740] "expr temp" "maybe param" "maybe type" "temp"
      (622743 'move' call_tmp[622740](72265 call _cast call_tmp[622735] st2[71778]))
      unknown call_tmp[622745] "expr temp" "maybe param" "maybe type" "temp"
      (622748 'move' call_tmp[622745](72267 call % call_tmp[622728] call_tmp[622740]))
      unknown call_tmp[622750] "maybe param" "maybe type" "temp"
      (622753 'move' call_tmp[622750](72270 call _cast int(64)[13] call_tmp[622745]))
      unknown al2[72272] "dead at end of block" "insert auto destroy"
      (541192 'init var' al2[72272] call_tmp[622750])
      (72275 'end of statement' st1[71725] st2[71778])
      unknown call_tmp[622755] "expr temp" "maybe param" "maybe type" "temp"
      (622758 'move' call_tmp[622755](72278 call - al2[72272] al1[72248]))
      unknown call_tmp[622760] "expr temp" "maybe param" "maybe type" "temp"
      (622763 'move' call_tmp[622760](72281 call % call_tmp[622755] g[71826]))
      unknown call_tmp[622765] "expr temp" "maybe param" "maybe type" "temp"
      (622768 'move' call_tmp[622765](72284 call != call_tmp[622760] 0))
      unknown call_tmp[622770] "expr temp" "maybe param" "maybe type" "temp"
      (622773 'move' call_tmp[622770](72429 call _cond_test call_tmp[622765]))
      if call_tmp[622770]
      {
        unknown tmp[420386] "maybe param" "temp"
        (420397 'move' tmp[420386] 1)
        unknown call_tmp[622775] "expr temp" "maybe param" "maybe type" "temp"
        (622778 'move' call_tmp[622775](420399 call _cond_invalid tmp[420386]))
        if call_tmp[622775]
        {
          (420402 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557744] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557745] "maybe param" "temp"
        unknown call_tmp[622780] "expr temp" "maybe param" "maybe type" "temp"
        (622783 'move' call_tmp[622780](420387 call isTrue tmp[420386]))
        (557750 'move' tmp[557745](557748 call _cond_test call_tmp[622780]))
        if tmp[557745]
        {
          unknown tmp[557752] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622785] "expr temp" "maybe param" "maybe type" "temp"
          (622788 'move' call_tmp[622785](72290 call isBoundedRange result[72224]))
          unknown call_tmp[622790] "expr temp" "maybe param" "maybe type" "temp"
          (622793 'move' call_tmp[622790](72291 call ! call_tmp[622785]))
          (557754 'move' tmp[557752](420390 call isTrue call_tmp[622790]))
          (557759 'move' tmp[557744](557756 '_paramFoldLogical' tmp[557745] tmp[557752]))
        }
        {
          (557764 'move' tmp[557744](557761 '_paramFoldLogical' tmp[557745] 0))
        }
        unknown call_tmp[622795] "expr temp" "maybe param" "maybe type" "temp"
        (622798 'move' call_tmp[622795](72321 call _cond_test tmp[557744]))
        if call_tmp[622795]
        {
          (72319 call boundsCheckHalt module=[255] HaltWrappers[210016] "could not represent range slice - it needs to be empty, but the slice type is not bounded")
          (357911 'referenced modules list' HaltWrappers[210016])
        }
        unknown call_tmp[622802] "expr temp" "maybe param" "maybe type" "temp"
        (622805 'move' call_tmp[622802](72328 call _low _mt[243] result[72224]))
        unknown call_tmp[622809] "expr temp" "maybe param" "maybe type" "temp"
        (622812 'move' call_tmp[622809](375232 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622814] "expr temp" "maybe param" "maybe type" "temp"
        (622817 'move' call_tmp[622814](72333 call _cast call_tmp[622809] 1))
        (72335 call = call_tmp[622802] call_tmp[622814])
        (475675 'end of statement' result[72224])
        unknown call_tmp[622821] "expr temp" "maybe param" "maybe type" "temp"
        (622824 'move' call_tmp[622821](72339 call _high _mt[243] result[72224]))
        unknown call_tmp[622828] "expr temp" "maybe param" "maybe type" "temp"
        (622831 'move' call_tmp[622828](375236 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622833] "expr temp" "maybe param" "maybe type" "temp"
        (622836 'move' call_tmp[622833](72344 call _cast call_tmp[622828] 0))
        (72346 call = call_tmp[622821] call_tmp[622833])
        (475677 'end of statement' result[72224])
        unknown tmp[557771] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557772] "maybe param" "temp"
        unknown call_tmp[622840] "expr temp" "maybe param" "maybe type" "temp"
        (622843 'move' call_tmp[622840](72354 call stride _mt[243] this[71469]))
        unknown call_tmp[622845] "expr temp" "maybe param" "maybe type" "temp"
        (622848 'move' call_tmp[622845](72358 call > call_tmp[622840] 0))
        (557777 'move' tmp[557772](557775 call _cond_test call_tmp[622845]))
        if tmp[557772]
        {
          unknown tmp[557779] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622852] "expr temp" "maybe param" "maybe type" "temp"
          (622855 'move' call_tmp[622852](375240 call intIdxType _mt[243] this[71469]))
          (557781 'move' tmp[557779](72362 call _cast call_tmp[622852] 1))
          (557786 'move' tmp[557771](557783 '_paramFoldLogical' tmp[557772] tmp[557779]))
        }
        {
          unknown tmp[557788] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622859] "expr temp" "maybe param" "maybe type" "temp"
          (622862 'move' call_tmp[622859](375244 call intIdxType _mt[243] this[71469]))
          (557790 'move' tmp[557788](72366 call _cast call_tmp[622859] 0))
          (557795 'move' tmp[557771](557792 '_paramFoldLogical' tmp[557772] tmp[557788]))
        }
        unknown call_tmp[622866] "expr temp" "maybe param" "maybe type" "temp"
        (622869 'move' call_tmp[622866](72350 call _alignment _mt[243] result[72224]))
        (72371 call = call_tmp[622866] tmp[557771])
        (475679 'end of statement' result[72224])
      }
      {
        unknown call_tmp[622871] "expr temp" "maybe param" "maybe type" "temp"
        (622874 'move' call_tmp[622871](72376 call - al2[72272] al1[72248]))
        unknown call_tmp[622876] "maybe param" "maybe type" "temp"
        (622879 'move' call_tmp[622876](72379 call * call_tmp[622871] x[71828]))
        unknown offset[72381] "dead at end of block" "insert auto destroy"
        (541194 'init var' offset[72381] call_tmp[622876])
        (72384 'end of statement' al2[72272] al1[72248] x[71828])
        unknown call_tmp[622881] "expr temp" "maybe param" "maybe type" "temp"
        (622884 'move' call_tmp[622881](72388 call < offset[72381] 0))
        unknown call_tmp[622886] "expr temp" "maybe param" "maybe type" "temp"
        (622889 'move' call_tmp[622886](72395 call _cond_test call_tmp[622881]))
        if call_tmp[622886]
        {
          (72392 call += offset[72381] lcm[71822])
          (475684 'end of statement' offset[72381] lcm[71822])
        }
        unknown call_tmp[622893] "expr temp" "maybe param" "maybe type" "temp"
        (622896 'move' call_tmp[622893](72401 call _alignment _mt[243] result[72224]))
        unknown call_tmp[622900] "expr temp" "maybe param" "maybe type" "temp"
        (622903 'move' call_tmp[622900](375255 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622905] "expr temp" "maybe param" "maybe type" "temp"
        (622908 'move' call_tmp[622905](72406 call _cast call_tmp[622900] al1[72248]))
        unknown call_tmp[622912] "expr temp" "maybe param" "maybe type" "temp"
        (622915 'move' call_tmp[622912](375260 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622917] "expr temp" "maybe param" "maybe type" "temp"
        (622920 'move' call_tmp[622917](72410 call _cast call_tmp[622912] offset[72381]))
        unknown call_tmp[622924] "expr temp" "maybe param" "maybe type" "temp"
        (622927 'move' call_tmp[622924](375265 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622929] "expr temp" "maybe param" "maybe type" "temp"
        (622932 'move' call_tmp[622929](72414 call _cast call_tmp[622924] st1[71725]))
        unknown call_tmp[622934] "expr temp" "maybe param" "maybe type" "temp"
        (622937 'move' call_tmp[622934](72416 call * call_tmp[622917] call_tmp[622929]))
        unknown call_tmp[622941] "expr temp" "maybe param" "maybe type" "temp"
        (622944 'move' call_tmp[622941](375270 call intIdxType _mt[243] this[71469]))
        unknown call_tmp[622946] "expr temp" "maybe param" "maybe type" "temp"
        (622949 'move' call_tmp[622946](72420 call _cast call_tmp[622941] g[71826]))
        unknown call_tmp[622951] "expr temp" "maybe param" "maybe type" "temp"
        (622954 'move' call_tmp[622951](72422 call / call_tmp[622934] call_tmp[622946]))
        unknown call_tmp[622956] "expr temp" "maybe param" "maybe type" "temp"
        (622959 'move' call_tmp[622956](72424 call + call_tmp[622905] call_tmp[622951]))
        (72426 call = call_tmp[622893] call_tmp[622956])
        (475687 'end of statement' result[72224] al1[72248] offset[72381] st1[71725] g[71826])
      }
    }
    (510572 'move' ret[510567](510571 'deref' result[72224]))
    gotoReturn _end_this[510565] _end_this[510565]
    (475693 'end of statement' result[72224])
    label _end_this[510565]
    (510569 return ret[510567])
  }
  function chpl_count_help[72451](arg r[72448]:range[64319](?), arg i[72453]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (72486 call compilerError "count operator is not defined for unbounded ranges")
    (510576 return _void[55])
  }
  where {
    unknown call_tmp[622963] "expr temp" "maybe param" "maybe type" "temp"
    (622966 'move' call_tmp[622963](72456 call boundedType _mt[243] r[72448]))
    (72463 call == call_tmp[622963] boundedNone[64214])
  }
  function chpl_count_help[72496](arg r[72494]:_any[178](?), arg count[72499]:integral[199](?)) : _unknown[51]
  {
    unknown ret[510617] "RVV" "temp"
    unknown tmp[420407] "maybe param" "temp"
    (420418 'move' tmp[420407] 1)
    unknown call_tmp[622968] "expr temp" "maybe param" "maybe type" "temp"
    (622971 'move' call_tmp[622968](420420 call _cond_invalid tmp[420407]))
    if call_tmp[622968]
    {
      (420423 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557802] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557803] "maybe param" "temp"
    unknown call_tmp[622973] "expr temp" "maybe param" "maybe type" "temp"
    (622976 'move' call_tmp[622973](420408 call isTrue tmp[420407]))
    (557808 'move' tmp[557803](557806 call _cond_test call_tmp[622973]))
    if tmp[557803]
    {
      unknown tmp[557810] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622980] "expr temp" "maybe param" "maybe type" "temp"
      (622983 'move' call_tmp[622980](72508 call(72504 call (partial) isAmbiguous _mt[243] r[72494])))
      (557812 'move' tmp[557810](420411 call isTrue call_tmp[622980]))
      (557817 'move' tmp[557802](557814 '_paramFoldLogical' tmp[557803] tmp[557810]))
    }
    {
      (557822 'move' tmp[557802](557819 '_paramFoldLogical' tmp[557803] 0))
    }
    unknown call_tmp[622985] "expr temp" "maybe param" "maybe type" "temp"
    (622988 'move' call_tmp[622985](72534 call _cond_test tmp[557802]))
    if call_tmp[622985]
    {
      (72532 call boundsCheckHalt "count -- Cannot count off elements from a range which is ambiguously aligned.")
    }
    unknown resultType[72544] "dead at end of block" "insert auto destroy" "type variable"(72541 call intIdxType _mt[243] r[72494])
    (541200 'move' resultType[72544](541197 call intIdxType _mt[243] r[72494]))
    unknown strType[72551] "dead at end of block" "insert auto destroy" "type variable"(72550 call chpl__rangeStrideType resultType[72544])
    (541205 'move' strType[72551](541203 call chpl__rangeStrideType resultType[72544]))
    function absSameType[72558](arg str[72556]:_any[178](?)) : _unknown[51]
    {
      unknown ret[510580] "RVV" "temp"
      unknown call_tmp[622996] "expr temp" "maybe param" "maybe type" "temp"
      (622999 'move' call_tmp[622996](72561 call stride _mt[243] r[72494]))
      unknown call_tmp[623001] "expr temp" "maybe param" "maybe type" "temp"
      (623004 'move' call_tmp[623001](72565 call < call_tmp[622996] 0))
      unknown call_tmp[623006] "expr temp" "maybe param" "maybe type" "temp"
      (623009 'move' call_tmp[623006](72589 call _cond_test call_tmp[623001]))
      if call_tmp[623006]
      {
        unknown call_tmp[623013] "expr temp" "maybe param" "maybe type" "temp"
        (623016 'move' call_tmp[623013](72568 call stride _mt[243] r[72494]))
        unknown call_tmp[623018] "expr temp" "maybe param" "maybe type" "temp"
        (623021 'move' call_tmp[623018](72571 call - call_tmp[623013]))
        unknown call_tmp[623023] "expr temp" "maybe param" "maybe type" "temp"
        (623026 'move' call_tmp[623023](72574 call _cast resultType[72544] call_tmp[623018]))
        (510585 'move' ret[510580](510584 'deref' call_tmp[623023]))
        gotoReturn _end_absSameType[510578] _end_absSameType[510578]
      }
      {
        unknown call_tmp[623030] "expr temp" "maybe param" "maybe type" "temp"
        (623033 'move' call_tmp[623030](72580 call stride _mt[243] r[72494]))
        unknown call_tmp[623035] "expr temp" "maybe param" "maybe type" "temp"
        (623038 'move' call_tmp[623035](72584 call _cast resultType[72544] call_tmp[623030]))
        (510590 'move' ret[510580](510589 'deref' call_tmp[623035]))
        gotoReturn _end_absSameType[510578] _end_absSameType[510578]
      }
      label _end_absSameType[510578]
      (510582 return ret[510580])
    }
    unknown call_tmp[623040] "expr temp" "maybe param" "maybe type" "temp"
    (623043 'move' call_tmp[623040](72598 call == count[72499] 0))
    unknown call_tmp[623045] "expr temp" "maybe param" "maybe type" "temp"
    (623048 'move' call_tmp[623045](72798 call _cond_test call_tmp[623040]))
    if call_tmp[623045]
    {
      unknown call_tmp[623052] "expr temp" "maybe param" "maybe type" "temp"
      (623055 'move' call_tmp[623052](72605 call(72601 call (partial) hasLowBound _mt[243] r[72494])))
      unknown call_tmp[623057] "expr temp" "maybe param" "maybe type" "temp"
      (623060 'move' call_tmp[623057](72792 call _cond_test call_tmp[623052]))
      if call_tmp[623057]
      {
        unknown call_tmp[623064] "expr temp" "maybe param" "maybe type" "temp"
        (623067 'move' call_tmp[623064](72609 call idxType _mt[243] r[72494]))
        unknown call_tmp[623071] "expr temp" "maybe param" "maybe type" "temp"
        (623074 'move' call_tmp[623071](72620 call stridable _mt[243] r[72494]))
        unknown call_tmp[623078] "expr temp" "maybe param" "maybe type" "temp"
        (623081 'move' call_tmp[623078](72626 call idxType _mt[243] r[72494]))
        unknown call_tmp[623085] "expr temp" "maybe param" "maybe type" "temp"
        (623088 'move' call_tmp[623085](72631 call _low _mt[243] r[72494]))
        unknown call_tmp[623090] "expr temp" "maybe param" "maybe type" "temp"
        (623093 'move' call_tmp[623090](72634 call chpl__intToIdx call_tmp[623078] call_tmp[623085]))
        unknown call_tmp[623097] "expr temp" "maybe param" "maybe type" "temp"
        (623100 'move' call_tmp[623097](72638 call idxType _mt[243] r[72494]))
        unknown call_tmp[623104] "expr temp" "maybe param" "maybe type" "temp"
        (623107 'move' call_tmp[623104](72643 call _low _mt[243] r[72494]))
        unknown call_tmp[623111] "expr temp" "maybe param" "maybe type" "temp"
        (623114 'move' call_tmp[623111](72648 call stride _mt[243] r[72494]))
        unknown call_tmp[623116] "expr temp" "maybe param" "maybe type" "temp"
        (623119 'move' call_tmp[623116](72652 call absSameType call_tmp[623111]))
        unknown call_tmp[623121] "expr temp" "maybe param" "maybe type" "temp"
        (623124 'move' call_tmp[623121](72653 call - call_tmp[623104] call_tmp[623116]))
        unknown call_tmp[623126] "expr temp" "maybe param" "maybe type" "temp"
        (623129 'move' call_tmp[623126](72655 call chpl__intToIdx call_tmp[623097] call_tmp[623121]))
        unknown call_tmp[623133] "expr temp" "maybe param" "maybe type" "temp"
        (623136 'move' call_tmp[623133](72658 call stride _mt[243] r[72494]))
        unknown call_tmp[623140] "expr temp" "maybe param" "maybe type" "temp"
        (623143 'move' call_tmp[623140](72664 call idxType _mt[243] r[72494]))
        unknown call_tmp[623147] "expr temp" "maybe param" "maybe type" "temp"
        (623150 'move' call_tmp[623147](72669 call _alignment _mt[243] r[72494]))
        unknown call_tmp[623152] "expr temp" "maybe param" "maybe type" "temp"
        (623155 'move' call_tmp[623152](72672 call chpl__intToIdx call_tmp[623140] call_tmp[623147]))
        unknown call_tmp[623159] "expr temp" "maybe param" "maybe type" "temp"
        (623162 'move' call_tmp[623159](72675 call aligned _mt[243] r[72494]))
        unknown call_tmp[623164] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (623167 'move' call_tmp[623164](747810 'new' range[64319](?)(idxType = call_tmp[623064])(boundedType = bounded[64208])(stridable = call_tmp[623071])(_low = call_tmp[623090])(_high = call_tmp[623126])(_stride = call_tmp[623133])(_alignment = call_tmp[623152])(_aligned = call_tmp[623159])))
        (510622 'move' ret[510617](510621 'deref' call_tmp[623164]))
        gotoReturn _end_chpl_count_help[510615] _end_chpl_count_help[510615]
      }
      {
        unknown call_tmp[623171] "expr temp" "maybe param" "maybe type" "temp"
        (623174 'move' call_tmp[623171](72688 call(72684 call (partial) hasHighBound _mt[243] r[72494])))
        unknown call_tmp[623176] "expr temp" "maybe param" "maybe type" "temp"
        (623179 'move' call_tmp[623176](72788 call _cond_test call_tmp[623171]))
        if call_tmp[623176]
        {
          unknown call_tmp[623183] "expr temp" "maybe param" "maybe type" "temp"
          (623186 'move' call_tmp[623183](72692 call idxType _mt[243] r[72494]))
          unknown call_tmp[623190] "expr temp" "maybe param" "maybe type" "temp"
          (623193 'move' call_tmp[623190](72703 call stridable _mt[243] r[72494]))
          unknown call_tmp[623197] "expr temp" "maybe param" "maybe type" "temp"
          (623200 'move' call_tmp[623197](72709 call idxType _mt[243] r[72494]))
          unknown call_tmp[623204] "expr temp" "maybe param" "maybe type" "temp"
          (623207 'move' call_tmp[623204](72714 call _high _mt[243] r[72494]))
          unknown call_tmp[623211] "expr temp" "maybe param" "maybe type" "temp"
          (623214 'move' call_tmp[623211](72719 call stride _mt[243] r[72494]))
          unknown call_tmp[623216] "expr temp" "maybe param" "maybe type" "temp"
          (623219 'move' call_tmp[623216](72723 call absSameType call_tmp[623211]))
          unknown call_tmp[623221] "expr temp" "maybe param" "maybe type" "temp"
          (623224 'move' call_tmp[623221](72724 call + call_tmp[623204] call_tmp[623216]))
          unknown call_tmp[623226] "expr temp" "maybe param" "maybe type" "temp"
          (623229 'move' call_tmp[623226](72726 call chpl__intToIdx call_tmp[623197] call_tmp[623221]))
          unknown call_tmp[623233] "expr temp" "maybe param" "maybe type" "temp"
          (623236 'move' call_tmp[623233](72730 call idxType _mt[243] r[72494]))
          unknown call_tmp[623240] "expr temp" "maybe param" "maybe type" "temp"
          (623243 'move' call_tmp[623240](72735 call _high _mt[243] r[72494]))
          unknown call_tmp[623245] "expr temp" "maybe param" "maybe type" "temp"
          (623248 'move' call_tmp[623245](72738 call chpl__intToIdx call_tmp[623233] call_tmp[623240]))
          unknown call_tmp[623252] "expr temp" "maybe param" "maybe type" "temp"
          (623255 'move' call_tmp[623252](72741 call stride _mt[243] r[72494]))
          unknown call_tmp[623259] "expr temp" "maybe param" "maybe type" "temp"
          (623262 'move' call_tmp[623259](72747 call idxType _mt[243] r[72494]))
          unknown call_tmp[623266] "expr temp" "maybe param" "maybe type" "temp"
          (623269 'move' call_tmp[623266](72752 call _alignment _mt[243] r[72494]))
          unknown call_tmp[623271] "expr temp" "maybe param" "maybe type" "temp"
          (623274 'move' call_tmp[623271](72755 call chpl__intToIdx call_tmp[623259] call_tmp[623266]))
          unknown call_tmp[623278] "expr temp" "maybe param" "maybe type" "temp"
          (623281 'move' call_tmp[623278](72758 call aligned _mt[243] r[72494]))
          unknown call_tmp[623283] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (623286 'move' call_tmp[623283](747811 'new' range[64319](?)(idxType = call_tmp[623183])(boundedType = bounded[64208])(stridable = call_tmp[623190])(_low = call_tmp[623226])(_high = call_tmp[623245])(_stride = call_tmp[623252])(_alignment = call_tmp[623271])(_aligned = call_tmp[623278])))
          (510627 'move' ret[510617](510626 'deref' call_tmp[623283]))
          gotoReturn _end_chpl_count_help[510615] _end_chpl_count_help[510615]
        }
        {
          (72785 call halt "Internal error: Unexpected case in chpl_count_help")
        }
      }
    }
    unknown tmp[420428] "maybe param" "temp"
    unknown tmp[420449] "maybe param" "temp"
    (420460 'move' tmp[420449] 1)
    unknown call_tmp[623288] "expr temp" "maybe param" "maybe type" "temp"
    (623291 'move' call_tmp[623288](420462 call _cond_invalid tmp[420449]))
    if call_tmp[623288]
    {
      (420465 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557829] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557830] "maybe param" "temp"
    unknown call_tmp[623293] "expr temp" "maybe param" "maybe type" "temp"
    (623296 'move' call_tmp[623293](420450 call isTrue tmp[420449]))
    (557835 'move' tmp[557830](557833 call _cond_test call_tmp[623293]))
    if tmp[557830]
    {
      unknown tmp[557837] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623300] "expr temp" "maybe param" "maybe type" "temp"
      (623303 'move' call_tmp[623300](72808 call(72804 call (partial) hasFirst _mt[243] r[72494])))
      unknown call_tmp[623305] "expr temp" "maybe param" "maybe type" "temp"
      (623308 'move' call_tmp[623305](72809 call ! call_tmp[623300]))
      (557839 'move' tmp[557837](420453 call isTrue call_tmp[623305]))
      (557844 'move' tmp[557829](557841 '_paramFoldLogical' tmp[557830] tmp[557837]))
    }
    {
      (557849 'move' tmp[557829](557846 '_paramFoldLogical' tmp[557830] 0))
    }
    (420439 'move' tmp[420428] tmp[557829])
    unknown call_tmp[623310] "expr temp" "maybe param" "maybe type" "temp"
    (623313 'move' call_tmp[623310](420441 call _cond_invalid tmp[420428]))
    if call_tmp[623310]
    {
      (420444 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557856] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557857] "maybe param" "temp"
    unknown call_tmp[623315] "expr temp" "maybe param" "maybe type" "temp"
    (623318 'move' call_tmp[623315](420429 call isTrue tmp[420428]))
    (557862 'move' tmp[557857](557860 call _cond_test call_tmp[623315]))
    if tmp[557857]
    {
      unknown tmp[557864] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623320] "expr temp" "maybe param" "maybe type" "temp"
      (623323 'move' call_tmp[623320](72815 call > count[72499] 0))
      (557866 'move' tmp[557864](420432 call isTrue call_tmp[623320]))
      (557871 'move' tmp[557856](557868 '_paramFoldLogical' tmp[557857] tmp[557864]))
    }
    {
      (557876 'move' tmp[557856](557873 '_paramFoldLogical' tmp[557857] 0))
    }
    unknown call_tmp[623325] "expr temp" "maybe param" "maybe type" "temp"
    (623328 'move' call_tmp[623325](72840 call _cond_test tmp[557856]))
    if call_tmp[623325]
    {
      (72838 call boundsCheckHalt "With a positive count, the range must have a first index.")
    }
    unknown tmp[420470] "maybe param" "temp"
    unknown tmp[420491] "maybe param" "temp"
    (420502 'move' tmp[420491] 1)
    unknown call_tmp[623330] "expr temp" "maybe param" "maybe type" "temp"
    (623333 'move' call_tmp[623330](420504 call _cond_invalid tmp[420491]))
    if call_tmp[623330]
    {
      (420507 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557883] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557884] "maybe param" "temp"
    unknown call_tmp[623335] "expr temp" "maybe param" "maybe type" "temp"
    (623338 'move' call_tmp[623335](420492 call isTrue tmp[420491]))
    (557889 'move' tmp[557884](557887 call _cond_test call_tmp[623335]))
    if tmp[557884]
    {
      unknown tmp[557891] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623342] "expr temp" "maybe param" "maybe type" "temp"
      (623345 'move' call_tmp[623342](72853 call(72849 call (partial) hasLast _mt[243] r[72494])))
      unknown call_tmp[623347] "expr temp" "maybe param" "maybe type" "temp"
      (623350 'move' call_tmp[623347](72854 call ! call_tmp[623342]))
      (557893 'move' tmp[557891](420495 call isTrue call_tmp[623347]))
      (557898 'move' tmp[557883](557895 '_paramFoldLogical' tmp[557884] tmp[557891]))
    }
    {
      (557903 'move' tmp[557883](557900 '_paramFoldLogical' tmp[557884] 0))
    }
    (420481 'move' tmp[420470] tmp[557883])
    unknown call_tmp[623352] "expr temp" "maybe param" "maybe type" "temp"
    (623355 'move' call_tmp[623352](420483 call _cond_invalid tmp[420470]))
    if call_tmp[623352]
    {
      (420486 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557910] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557911] "maybe param" "temp"
    unknown call_tmp[623357] "expr temp" "maybe param" "maybe type" "temp"
    (623360 'move' call_tmp[623357](420471 call isTrue tmp[420470]))
    (557916 'move' tmp[557911](557914 call _cond_test call_tmp[623357]))
    if tmp[557911]
    {
      unknown tmp[557918] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623362] "expr temp" "maybe param" "maybe type" "temp"
      (623365 'move' call_tmp[623362](72860 call < count[72499] 0))
      (557920 'move' tmp[557918](420474 call isTrue call_tmp[623362]))
      (557925 'move' tmp[557910](557922 '_paramFoldLogical' tmp[557911] tmp[557918]))
    }
    {
      (557930 'move' tmp[557910](557927 '_paramFoldLogical' tmp[557911] 0))
    }
    unknown call_tmp[623367] "expr temp" "maybe param" "maybe type" "temp"
    (623370 'move' call_tmp[623367](72885 call _cond_test tmp[557910]))
    if call_tmp[623367]
    {
      (72883 call boundsCheckHalt "With a negative count, the range must have a last index.")
    }
    unknown tmp[420512] "maybe param" "temp"
    unknown tmp[420533] "maybe param" "temp"
    (420544 'move' tmp[420533] 1)
    unknown call_tmp[623372] "expr temp" "maybe param" "maybe type" "temp"
    (623375 'move' call_tmp[623372](420546 call _cond_invalid tmp[420533]))
    if call_tmp[623372]
    {
      (420549 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557937] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557938] "maybe param" "temp"
    unknown call_tmp[623377] "expr temp" "maybe param" "maybe type" "temp"
    (623380 'move' call_tmp[623377](420534 call isTrue tmp[420533]))
    (557943 'move' tmp[557938](557941 call _cond_test call_tmp[623377]))
    if tmp[557938]
    {
      unknown tmp[557945] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623384] "expr temp" "maybe param" "maybe type" "temp"
      (623387 'move' call_tmp[623384](72892 call boundedType _mt[243] r[72494]))
      unknown call_tmp[623389] "expr temp" "maybe param" "maybe type" "temp"
      (623392 'move' call_tmp[623389](72899 call == call_tmp[623384] bounded[64208]))
      (557947 'move' tmp[557945](420537 call isTrue call_tmp[623389]))
      (557952 'move' tmp[557937](557949 '_paramFoldLogical' tmp[557938] tmp[557945]))
    }
    {
      (557957 'move' tmp[557937](557954 '_paramFoldLogical' tmp[557938] 0))
    }
    (420523 'move' tmp[420512] tmp[557937])
    unknown call_tmp[623394] "expr temp" "maybe param" "maybe type" "temp"
    (623397 'move' call_tmp[623394](420525 call _cond_invalid tmp[420512]))
    if call_tmp[623394]
    {
      (420528 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557964] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557965] "maybe param" "temp"
    unknown call_tmp[623399] "expr temp" "maybe param" "maybe type" "temp"
    (623402 'move' call_tmp[623399](420513 call isTrue tmp[420512]))
    (557970 'move' tmp[557965](557968 call _cond_test call_tmp[623399]))
    if tmp[557965]
    {
      unknown tmp[557972] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623404] "expr temp" "maybe param" "maybe type" "temp"
      (623407 'move' call_tmp[623404](72917 call uint(64)[115] 64))
      unknown call_tmp[623409] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (623412 'move' call_tmp[623409](72907 'typeof' count[72499]))
      unknown call_tmp[623414] "expr temp" "maybe param" "maybe type" "temp"
      (623417 'move' call_tmp[623414](72909 call chpl__maxIntTypeSameSign call_tmp[623409]))
      unknown call_tmp[623419] "expr temp" "maybe param" "maybe type" "temp"
      (623422 'move' call_tmp[623419](72910 call _cast call_tmp[623414] count[72499]))
      unknown call_tmp[623424] "expr temp" "maybe param" "maybe type" "temp"
      (623427 'move' call_tmp[623424](72913 call abs call_tmp[623419]))
      unknown call_tmp[623429] "expr temp" "maybe param" "maybe type" "temp"
      (623432 'move' call_tmp[623429](72918 call _cast call_tmp[623404] call_tmp[623424]))
      unknown call_tmp[623434] "expr temp" "maybe param" "maybe type" "temp"
      (623437 'move' call_tmp[623434](72927 call uint(64)[115] 64))
      unknown call_tmp[623441] "expr temp" "maybe param" "maybe type" "temp"
      (623444 'move' call_tmp[623441](72921 call size _mt[243] r[72494]))
      unknown call_tmp[623446] "expr temp" "maybe param" "maybe type" "temp"
      (623449 'move' call_tmp[623446](72928 call _cast call_tmp[623434] call_tmp[623441]))
      unknown call_tmp[623451] "expr temp" "maybe param" "maybe type" "temp"
      (623454 'move' call_tmp[623451](72930 call > call_tmp[623429] call_tmp[623446]))
      (557974 'move' tmp[557972](420516 call isTrue call_tmp[623451]))
      (557979 'move' tmp[557964](557976 '_paramFoldLogical' tmp[557965] tmp[557972]))
    }
    {
      (557984 'move' tmp[557964](557981 '_paramFoldLogical' tmp[557965] 0))
    }
    unknown call_tmp[623456] "expr temp" "maybe param" "maybe type" "temp"
    (623459 'move' call_tmp[623456](72984 call _cond_test tmp[557964]))
    if call_tmp[623456]
    {
      unknown call_tmp[623461] "expr temp" "maybe param" "maybe type" "temp"
      (623464 'move' call_tmp[623461](72955 call abs count[72499]))
      unknown call_tmp[623466] "expr temp" "maybe param" "maybe type" "temp"
      (623469 'move' call_tmp[623466](72957 call _cast string[26] call_tmp[623461]))
      unknown call_tmp[623471] "expr temp" "maybe param" "maybe type" "temp"
      (623474 'move' call_tmp[623471](72959 call + "bounded range is too small to access " call_tmp[623466]))
      unknown call_tmp[623476] "expr temp" "maybe param" "maybe type" "temp"
      (623479 'move' call_tmp[623476](72978 call + call_tmp[623471] " elements"))
      (72981 call boundsCheckHalt call_tmp[623476])
    }
    function chpl__computeTypeForCountMath[72992](arg t1[72990]:_any[178](?), arg t2[72994]:_any[178](?)) type : _unknown[51]
    {
      unknown ret[510596] "RVV" "temp" "type variable"
      unknown call_tmp[623481] "expr temp" "maybe param" "maybe type" "temp"
      (623484 'move' call_tmp[623481](72998 call == t1[72990] t2[72994]))
      unknown call_tmp[623486] "expr temp" "maybe param" "maybe type" "temp"
      (623489 'move' call_tmp[623486](73052 call _cond_test call_tmp[623481]))
      if call_tmp[623486]
      {
        unknown call_tmp[623491] "expr temp" "maybe param" "maybe type" "temp"
        (623494 'move' call_tmp[623491](73003 call chpl__idxTypeToIntIdxType t1[72990]))
        (510601 'move' ret[510596](510600 'deref' call_tmp[623491]))
        gotoReturn _end_chpl__computeTypeForCountMath[510594] _end_chpl__computeTypeForCountMath[510594]
      }
      {
        unknown tmp[420554] "maybe param" "temp"
        unknown call_tmp[623496] "expr temp" "maybe param" "maybe type" "temp"
        (623499 'move' call_tmp[623496](73010 call numBits t1[72990]))
        (420565 'move' tmp[420554](73012 call == call_tmp[623496] 64))
        unknown call_tmp[623501] "expr temp" "maybe param" "maybe type" "temp"
        (623504 'move' call_tmp[623501](420567 call _cond_invalid tmp[420554]))
        if call_tmp[623501]
        {
          (420570 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[557991] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557992] "maybe param" "temp"
        unknown call_tmp[623506] "expr temp" "maybe param" "maybe type" "temp"
        (623509 'move' call_tmp[623506](420555 call isTrue tmp[420554]))
        (557997 'move' tmp[557992](557995 call _cond_test call_tmp[623506]))
        if tmp[557992]
        {
          (558002 'move' tmp[557991](557999 '_paramFoldLogical' tmp[557992] 1))
        }
        {
          unknown tmp[558004] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623511] "expr temp" "maybe param" "maybe type" "temp"
          (623514 'move' call_tmp[623511](73017 call numBits t2[72994]))
          unknown call_tmp[623516] "expr temp" "maybe param" "maybe type" "temp"
          (623519 'move' call_tmp[623516](73019 call == call_tmp[623511] 64))
          (558006 'move' tmp[558004](420559 call isTrue call_tmp[623516]))
          (558011 'move' tmp[557991](558008 '_paramFoldLogical' tmp[557992] tmp[558004]))
        }
        unknown call_tmp[623521] "expr temp" "maybe param" "maybe type" "temp"
        (623524 'move' call_tmp[623521](73048 call _cond_test tmp[557991]))
        if call_tmp[623521]
        {
          unknown call_tmp[623526] "expr temp" "maybe param" "maybe type" "temp"
          (623529 'move' call_tmp[623526](73026 call int(64)[13] 64))
          (510606 'move' ret[510596](510605 'deref' call_tmp[623526]))
          gotoReturn _end_chpl__computeTypeForCountMath[510594] _end_chpl__computeTypeForCountMath[510594]
        }
        {
          unknown x1[73031] "dead at end of block" "insert auto destroy"
          (541207 'default init var' x1[73031] t1[72990])
          (73034 'end of statement')
          unknown x2[73037] "dead at end of block" "insert auto destroy"
          (541209 'default init var' x2[73037] t2[72994])
          (73040 'end of statement')
          { scopeless type
            unknown call_type_tmp[491950] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[623531] "expr temp" "maybe param" "maybe type" "temp"
            (623534 'move' call_tmp[623531](73043 call + x1[73031] x2[73037]))
            (491954 'move' call_type_tmp[491950](73045 'typeof' call_tmp[623531]))
          }
          (510611 'move' ret[510596](510610 'deref' call_type_tmp[491950]))
          gotoReturn _end_chpl__computeTypeForCountMath[510594] _end_chpl__computeTypeForCountMath[510594]
          (475716 'end of statement' x1[73031] x2[73037])
        }
      }
      label _end_chpl__computeTypeForCountMath[510594]
      (510598 return ret[510596])
    }
    unknown call_tmp[623536] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623539 'move' call_tmp[623536](73064 'typeof' count[72499]))
    unknown computeType[73066] "dead at end of block" "insert auto destroy" "type variable"(73065 call chpl__computeTypeForCountMath resultType[72544] call_tmp[623536])
    unknown call_tmp[623541] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623544 'move' call_tmp[623541](541214 'typeof' count[72499]))
    (541216 'move' computeType[73066](541212 call chpl__computeTypeForCountMath resultType[72544] call_tmp[623541]))
    unknown signedComputeType[73073] "dead at end of block" "insert auto destroy" "type variable"(73072 call chpl__signedType computeType[73066])
    (541221 'move' signedComputeType[73073](541219 call chpl__signedType computeType[73066]))
    unknown call_tmp[623546] "expr temp" "maybe param" "maybe type" "temp"
    (623549 'move' call_tmp[623546](73078 call _cast signedComputeType[73073] count[72499]))
    unknown call_tmp[623553] "expr temp" "maybe param" "maybe type" "temp"
    (623556 'move' call_tmp[623553](73081 call stride _mt[243] r[72494]))
    unknown call_tmp[623558] "expr temp" "maybe param" "maybe type" "temp"
    (623561 'move' call_tmp[623558](73085 call _cast signedComputeType[73073] call_tmp[623553]))
    unknown call_tmp[623563] "maybe param" "maybe type" "temp"
    (623566 'move' call_tmp[623563](73087 call * call_tmp[623546] call_tmp[623558]))
    unknown diff[73089] "dead at end of block" "insert auto destroy"
    (541223 'init var' diff[73089] call_tmp[623563])
    (73092 'end of statement')
    unknown lo[73123] "dead at end of block" "insert auto destroy"
    unknown tmp[558018] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558019] "maybe param" "temp"
    unknown call_tmp[623568] "expr temp" "maybe param" "maybe type" "temp"
    (623571 'move' call_tmp[623568](73096 call > diff[73089] 0))
    (558024 'move' tmp[558019](558022 call _cond_test call_tmp[623568]))
    if tmp[558019]
    {
      unknown tmp[558026] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558028 'move' tmp[558026](73099 call _low _mt[243] r[72494]))
      (558033 'move' tmp[558018](558030 '_paramFoldLogical' tmp[558019] tmp[558026]))
    }
    {
      unknown tmp[558035] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623577] "expr temp" "maybe param" "maybe type" "temp"
      (623580 'move' call_tmp[623577](73104 call _high _mt[243] r[72494]))
      unknown call_tmp[623582] "expr temp" "maybe param" "maybe type" "temp"
      (623585 'move' call_tmp[623582](73108 call _cast computeType[73066] call_tmp[623577]))
      unknown call_tmp[623587] "expr temp" "maybe param" "maybe type" "temp"
      (623590 'move' call_tmp[623587](73113 call + diff[73089] 1))
      unknown call_tmp[623592] "expr temp" "maybe param" "maybe type" "temp"
      (623595 'move' call_tmp[623592](73116 call _cast computeType[73066] call_tmp[623587]))
      (558037 'move' tmp[558035](73119 call chpl__add call_tmp[623582] call_tmp[623592] resultType[72544]))
      (558042 'move' tmp[558018](558039 '_paramFoldLogical' tmp[558019] tmp[558035]))
    }
    (541225 'init var' lo[73123] tmp[558018] resultType[72544])
    (73126 'end of statement')
    unknown hi[73157] "dead at end of block" "insert auto destroy"
    unknown tmp[558049] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558050] "maybe param" "temp"
    unknown call_tmp[623597] "expr temp" "maybe param" "maybe type" "temp"
    (623600 'move' call_tmp[623597](73130 call < diff[73089] 0))
    (558055 'move' tmp[558050](558053 call _cond_test call_tmp[623597]))
    if tmp[558050]
    {
      unknown tmp[558057] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558059 'move' tmp[558057](73133 call _high _mt[243] r[72494]))
      (558064 'move' tmp[558049](558061 '_paramFoldLogical' tmp[558050] tmp[558057]))
    }
    {
      unknown tmp[558066] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623606] "expr temp" "maybe param" "maybe type" "temp"
      (623609 'move' call_tmp[623606](73138 call _low _mt[243] r[72494]))
      unknown call_tmp[623611] "expr temp" "maybe param" "maybe type" "temp"
      (623614 'move' call_tmp[623611](73142 call _cast computeType[73066] call_tmp[623606]))
      unknown call_tmp[623616] "expr temp" "maybe param" "maybe type" "temp"
      (623619 'move' call_tmp[623616](73147 call _cast computeType[73066] diff[73089]))
      unknown call_tmp[623621] "expr temp" "maybe param" "maybe type" "temp"
      (623624 'move' call_tmp[623621](73150 call - call_tmp[623616] 1))
      (558068 'move' tmp[558066](73153 call chpl__add call_tmp[623611] call_tmp[623621] resultType[72544]))
      (558073 'move' tmp[558049](558070 '_paramFoldLogical' tmp[558050] tmp[558066]))
    }
    (541227 'init var' hi[73157] tmp[558049] resultType[72544])
    (73160 'end of statement' resultType[72544] resultType[72544] computeType[73066] signedComputeType[73073] signedComputeType[73073] diff[73089] computeType[73066] computeType[73066] diff[73089] resultType[72544] resultType[72544] diff[73089] computeType[73066] computeType[73066] diff[73089] resultType[72544] resultType[72544])
    unknown call_tmp[623628] "expr temp" "maybe param" "maybe type" "temp"
    (623631 'move' call_tmp[623628](73162 call stridable _mt[243] r[72494]))
    unknown call_tmp[623633] "expr temp" "maybe param" "maybe type" "temp"
    (623636 'move' call_tmp[623633](73222 call _cond_test call_tmp[623628]))
    if call_tmp[623633]
    {
      unknown tmp[420575] "maybe param" "temp"
      (420586 'move' tmp[420575](73170 call(73166 call (partial) hasLowBound _mt[243] r[72494])))
      unknown call_tmp[623640] "expr temp" "maybe param" "maybe type" "temp"
      (623643 'move' call_tmp[623640](420588 call _cond_invalid tmp[420575]))
      if call_tmp[623640]
      {
        (420591 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558080] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558081] "maybe param" "temp"
      unknown call_tmp[623645] "expr temp" "maybe param" "maybe type" "temp"
      (623648 'move' call_tmp[623645](420576 call isTrue tmp[420575]))
      (558086 'move' tmp[558081](558084 call _cond_test call_tmp[623645]))
      if tmp[558081]
      {
        unknown tmp[558088] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623652] "expr temp" "maybe param" "maybe type" "temp"
        (623655 'move' call_tmp[623652](73173 call _low _mt[243] r[72494]))
        unknown call_tmp[623657] "expr temp" "maybe param" "maybe type" "temp"
        (623660 'move' call_tmp[623657](73176 call < lo[73123] call_tmp[623652]))
        (558090 'move' tmp[558088](420579 call isTrue call_tmp[623657]))
        (558095 'move' tmp[558080](558092 '_paramFoldLogical' tmp[558081] tmp[558088]))
      }
      {
        (558100 'move' tmp[558080](558097 '_paramFoldLogical' tmp[558081] 0))
      }
      unknown call_tmp[623662] "expr temp" "maybe param" "maybe type" "temp"
      (623665 'move' call_tmp[623662](73188 call _cond_test tmp[558080]))
      if call_tmp[623662]
      {
        unknown call_tmp[623669] "expr temp" "maybe param" "maybe type" "temp"
        (623672 'move' call_tmp[623669](73182 call _low _mt[243] r[72494]))
        (73185 call = lo[73123] call_tmp[623669])
        (475736 'end of statement' lo[73123])
      }
      unknown tmp[420596] "maybe param" "temp"
      (420607 'move' tmp[420596](73199 call(73195 call (partial) hasHighBound _mt[243] r[72494])))
      unknown call_tmp[623676] "expr temp" "maybe param" "maybe type" "temp"
      (623679 'move' call_tmp[623676](420609 call _cond_invalid tmp[420596]))
      if call_tmp[623676]
      {
        (420612 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558107] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558108] "maybe param" "temp"
      unknown call_tmp[623681] "expr temp" "maybe param" "maybe type" "temp"
      (623684 'move' call_tmp[623681](420597 call isTrue tmp[420596]))
      (558113 'move' tmp[558108](558111 call _cond_test call_tmp[623681]))
      if tmp[558108]
      {
        unknown tmp[558115] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623688] "expr temp" "maybe param" "maybe type" "temp"
        (623691 'move' call_tmp[623688](73202 call _high _mt[243] r[72494]))
        unknown call_tmp[623693] "expr temp" "maybe param" "maybe type" "temp"
        (623696 'move' call_tmp[623693](73205 call > hi[73157] call_tmp[623688]))
        (558117 'move' tmp[558115](420600 call isTrue call_tmp[623693]))
        (558122 'move' tmp[558107](558119 '_paramFoldLogical' tmp[558108] tmp[558115]))
      }
      {
        (558127 'move' tmp[558107](558124 '_paramFoldLogical' tmp[558108] 0))
      }
      unknown call_tmp[623698] "expr temp" "maybe param" "maybe type" "temp"
      (623701 'move' call_tmp[623698](73217 call _cond_test tmp[558107]))
      if call_tmp[623698]
      {
        unknown call_tmp[623705] "expr temp" "maybe param" "maybe type" "temp"
        (623708 'move' call_tmp[623705](73211 call _high _mt[243] r[72494]))
        (73214 call = hi[73157] call_tmp[623705])
        (475739 'end of statement' hi[73157])
      }
    }
    unknown tmp[558134] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558135] "maybe param" "temp"
    unknown call_tmp[623712] "expr temp" "maybe param" "maybe type" "temp"
    (623715 'move' call_tmp[623712](73261 call stridable _mt[243] r[72494]))
    (558140 'move' tmp[558135](558138 call _cond_test call_tmp[623712]))
    if tmp[558135]
    {
      unknown tmp[558142] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623719] "expr temp" "maybe param" "maybe type" "temp"
      (623722 'move' call_tmp[623719](73265 call stride _mt[243] r[72494]))
      (558144 'move' tmp[558142](73269 call _cast strType[72551] call_tmp[623719]))
      (558149 'move' tmp[558134](558146 '_paramFoldLogical' tmp[558135] tmp[558142]))
    }
    {
      (558154 'move' tmp[558134](558151 '_paramFoldLogical' tmp[558135] none[57]))
    }
    unknown tmp[558161] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558162] "maybe param" "temp"
    unknown call_tmp[623726] "expr temp" "maybe param" "maybe type" "temp"
    (623729 'move' call_tmp[623726](73277 call stridable _mt[243] r[72494]))
    (558167 'move' tmp[558162](558165 call _cond_test call_tmp[623726]))
    if tmp[558162]
    {
      unknown tmp[558169] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558171 'move' tmp[558169](73281 call alignment _mt[243] r[72494]))
      (558176 'move' tmp[558161](558173 '_paramFoldLogical' tmp[558162] tmp[558169]))
    }
    {
      (558181 'move' tmp[558161](558178 '_paramFoldLogical' tmp[558162] none[57]))
    }
    unknown tmp[558188] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558189] "maybe param" "temp"
    unknown call_tmp[623735] "expr temp" "maybe param" "maybe type" "temp"
    (623738 'move' call_tmp[623735](73290 call stridable _mt[243] r[72494]))
    (558194 'move' tmp[558189](558192 call _cond_test call_tmp[623735]))
    if tmp[558189]
    {
      unknown tmp[558196] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558198 'move' tmp[558196](73294 call aligned _mt[243] r[72494]))
      (558203 'move' tmp[558188](558200 '_paramFoldLogical' tmp[558189] tmp[558196]))
    }
    {
      (558208 'move' tmp[558188](558205 '_paramFoldLogical' tmp[558189] none[57]))
    }
    unknown call_tmp[623744] "expr temp" "maybe param" "maybe type" "temp"
    (623747 'move' call_tmp[623744](73229 call idxType _mt[243] r[72494]))
    unknown call_tmp[623751] "expr temp" "maybe param" "maybe type" "temp"
    (623754 'move' call_tmp[623751](73240 call stridable _mt[243] r[72494]))
    unknown call_tmp[623758] "expr temp" "maybe param" "maybe type" "temp"
    (623761 'move' call_tmp[623758](73250 call(73245 call (partial) chpl_intToIdx _mt[243] r[72494]) lo[73123]))
    unknown call_tmp[623765] "expr temp" "maybe param" "maybe type" "temp"
    (623768 'move' call_tmp[623765](73258 call(73253 call (partial) chpl_intToIdx _mt[243] r[72494]) hi[73157]))
    unknown call_tmp[623770] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (623773 'move' call_tmp[623770](747812 'new' range[64319](?)(idxType = call_tmp[623744])(boundedType = bounded[64208])(stridable = call_tmp[623751])(_low = call_tmp[623758])(_high = call_tmp[623765])(_stride = tmp[558134])(_alignment = tmp[558161])(_aligned = tmp[558188])))
    (510632 'move' ret[510617](510631 'deref' call_tmp[623770]))
    gotoReturn _end_chpl_count_help[510615] _end_chpl_count_help[510615]
    (475741 'end of statement' lo[73123] hi[73157] strType[72551])
    label _end_chpl_count_help[510615]
    (510619 return ret[510617])
  }
  function #[73317](arg r[73314]:range[64319](?), arg count[73323] :
  unknown call_tmp[623775] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510638] "RVV" "temp"
    unknown call_tmp[623780] "expr temp" "maybe param" "maybe type" "temp"
    (623783 'move' call_tmp[623780](73330 call chpl_count_help r[73314] count[73323]))
    (510643 'move' ret[510638](510642 'deref' call_tmp[623780]))
    (510640 return ret[510638])
  }
  function #[73346](arg r[73343]:range[64319](?), arg count[73352] :
  unknown call_tmp[623785] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510647] "RVV" "temp"
    unknown call_tmp[623790] "expr temp" "maybe param" "maybe type" "temp"
    (623793 'move' call_tmp[623790](73359 call chpl_count_help r[73343] count[73352]))
    (510652 'move' ret[510647](510651 'deref' call_tmp[623790]))
    (510649 return ret[510647])
  }
  function #[73375](arg r[73372]:range[64319](?), arg count[73377]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510656] "RVV" "temp"
    unknown call_tmp[623795] "expr temp" "maybe param" "maybe type" "temp"
    (623798 'move' call_tmp[623795](456022 'query' r[73372] 1))
    unknown call_tmp[623800] "expr temp" "maybe param" "maybe type" "temp"
    (623803 'move' call_tmp[623800](73400 call _cast string[26] call_tmp[623795]))
    unknown call_tmp[623805] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623808 'move' call_tmp[623805](73420 'typeof' count[73377]))
    unknown call_tmp[623810] "expr temp" "maybe param" "maybe type" "temp"
    (623813 'move' call_tmp[623810](73422 call _cast string[26] call_tmp[623805]))
    (73424 call compilerError "can't apply '#' to a range with idxType " call_tmp[623800] " using a count of type " call_tmp[623810])
    (475747 'end of statement')
    (510661 'move' ret[510656](510660 'deref' r[73372]))
    (510658 return ret[510656])
  }
  function chpl_checkIfRangeIterWillOverflow[73436](arg idxType[73434]:_any[178](?), arg low[73438]:_any[178](?), arg high[73440]:_any[178](?), arg stride[73442]:_any[178](?), arg first[73445] :
  low[73438] =
  low[73438], arg last[73449] :
  high[73440] =
  high[73440], arg shouldHalt[73453] :
  1 =
  1) : _unknown[51]
  {
    unknown ret[510665] "RVV" "temp"
    unknown call_tmp[623815] "expr temp" "maybe param" "maybe type" "temp"
    (623818 'move' call_tmp[623815](73458 call > low[73438] high[73440]))
    unknown call_tmp[623820] "expr temp" "maybe param" "maybe type" "temp"
    (623823 'move' call_tmp[623820](73464 call _cond_test call_tmp[623815]))
    if call_tmp[623820]
    {
      (510670 'move' ret[510665](510669 'deref' 0))
      gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510663] _end_chpl_checkIfRangeIterWillOverflow[510663]
    }
    unknown willOverFlow[73470] "dead at end of block" "insert auto destroy"
    (541229 'init var' willOverFlow[73470] 0)
    (73473 'end of statement')
    unknown call_tmp[623825] "expr temp" "maybe param" "maybe type" "temp"
    (623828 'move' call_tmp[623825](73477 call isIntType idxType[73434]))
    unknown call_tmp[623830] "expr temp" "maybe param" "maybe type" "temp"
    (623833 'move' call_tmp[623830](73657 call _cond_test call_tmp[623825]))
    if call_tmp[623830]
    {
      unknown tmp[420638] "maybe param" "temp"
      (420649 'move' tmp[420638](73480 call > last[73449] 0))
      unknown call_tmp[623835] "expr temp" "maybe param" "maybe type" "temp"
      (623838 'move' call_tmp[623835](420651 call _cond_invalid tmp[420638]))
      if call_tmp[623835]
      {
        (420654 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558215] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558216] "maybe param" "temp"
      unknown call_tmp[623840] "expr temp" "maybe param" "maybe type" "temp"
      (623843 'move' call_tmp[623840](420639 call isTrue tmp[420638]))
      (558221 'move' tmp[558216](558219 call _cond_test call_tmp[623840]))
      if tmp[558216]
      {
        unknown tmp[558223] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623845] "expr temp" "maybe param" "maybe type" "temp"
        (623848 'move' call_tmp[623845](73484 call > stride[73442] 0))
        (558225 'move' tmp[558223](420642 call isTrue call_tmp[623845]))
        (558230 'move' tmp[558215](558227 '_paramFoldLogical' tmp[558216] tmp[558223]))
      }
      {
        (558235 'move' tmp[558215](558232 '_paramFoldLogical' tmp[558216] 0))
      }
      unknown call_tmp[623850] "expr temp" "maybe param" "maybe type" "temp"
      (623853 'move' call_tmp[623850](73544 call _cond_test tmp[558215]))
      if call_tmp[623850]
      {
        unknown call_tmp[623855] "expr temp" "maybe param" "maybe type" "temp"
        (623858 'move' call_tmp[623855](73492 call max idxType[73434]))
        unknown call_tmp[623860] "expr temp" "maybe param" "maybe type" "temp"
        (623863 'move' call_tmp[623860](73494 call - call_tmp[623855] last[73449]))
        unknown call_tmp[623865] "expr temp" "maybe param" "maybe type" "temp"
        (623868 'move' call_tmp[623865](73496 call > stride[73442] call_tmp[623860]))
        unknown call_tmp[623870] "expr temp" "maybe param" "maybe type" "temp"
        (623873 'move' call_tmp[623870](73504 call _cond_test call_tmp[623865]))
        if call_tmp[623870]
        {
          (73500 call = willOverFlow[73470] 1)
          (475751 'end of statement' willOverFlow[73470])
        }
      }
      {
        unknown tmp[420617] "maybe param" "temp"
        (420628 'move' tmp[420617](73511 call < last[73449] 0))
        unknown call_tmp[623875] "expr temp" "maybe param" "maybe type" "temp"
        (623878 'move' call_tmp[623875](420630 call _cond_invalid tmp[420617]))
        if call_tmp[623875]
        {
          (420633 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[558242] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558243] "maybe param" "temp"
        unknown call_tmp[623880] "expr temp" "maybe param" "maybe type" "temp"
        (623883 'move' call_tmp[623880](420618 call isTrue tmp[420617]))
        (558248 'move' tmp[558243](558246 call _cond_test call_tmp[623880]))
        if tmp[558243]
        {
          unknown tmp[558250] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623885] "expr temp" "maybe param" "maybe type" "temp"
          (623888 'move' call_tmp[623885](73515 call < stride[73442] 0))
          (558252 'move' tmp[558250](420621 call isTrue call_tmp[623885]))
          (558257 'move' tmp[558242](558254 '_paramFoldLogical' tmp[558243] tmp[558250]))
        }
        {
          (558262 'move' tmp[558242](558259 '_paramFoldLogical' tmp[558243] 0))
        }
        unknown call_tmp[623890] "expr temp" "maybe param" "maybe type" "temp"
        (623893 'move' call_tmp[623890](73540 call _cond_test tmp[558242]))
        if call_tmp[623890]
        {
          unknown call_tmp[623895] "expr temp" "maybe param" "maybe type" "temp"
          (623898 'move' call_tmp[623895](73523 call min idxType[73434]))
          unknown call_tmp[623900] "expr temp" "maybe param" "maybe type" "temp"
          (623903 'move' call_tmp[623900](73525 call - call_tmp[623895] last[73449]))
          unknown call_tmp[623905] "expr temp" "maybe param" "maybe type" "temp"
          (623908 'move' call_tmp[623905](73527 call < stride[73442] call_tmp[623900]))
          unknown call_tmp[623910] "expr temp" "maybe param" "maybe type" "temp"
          (623913 'move' call_tmp[623910](73535 call _cond_test call_tmp[623905]))
          if call_tmp[623910]
          {
            (73531 call = willOverFlow[73470] 1)
            (475754 'end of statement' willOverFlow[73470])
          }
        }
      }
    }
    {
      unknown call_tmp[623915] "expr temp" "maybe param" "maybe type" "temp"
      (623918 'move' call_tmp[623915](73553 call isUintType idxType[73434]))
      unknown call_tmp[623920] "expr temp" "maybe param" "maybe type" "temp"
      (623923 'move' call_tmp[623920](73653 call _cond_test call_tmp[623915]))
      if call_tmp[623920]
      {
        unknown call_tmp[623925] "expr temp" "maybe param" "maybe type" "temp"
        (623928 'move' call_tmp[623925](73556 call > stride[73442] 0))
        unknown call_tmp[623930] "expr temp" "maybe param" "maybe type" "temp"
        (623933 'move' call_tmp[623930](73608 call _cond_test call_tmp[623925]))
        if call_tmp[623930]
        {
          unknown call_tmp[623935] "expr temp" "maybe param" "maybe type" "temp"
          (623938 'move' call_tmp[623935](73561 call _cast idxType[73434] stride[73442]))
          unknown call_tmp[623940] "expr temp" "maybe param" "maybe type" "temp"
          (623943 'move' call_tmp[623940](73563 call + last[73449] call_tmp[623935]))
          unknown call_tmp[623945] "expr temp" "maybe param" "maybe type" "temp"
          (623948 'move' call_tmp[623945](73566 call < call_tmp[623940] last[73449]))
          unknown call_tmp[623950] "expr temp" "maybe param" "maybe type" "temp"
          (623953 'move' call_tmp[623950](73574 call _cond_test call_tmp[623945]))
          if call_tmp[623950]
          {
            (73570 call = willOverFlow[73470] 1)
            (475756 'end of statement' willOverFlow[73470])
          }
        }
        {
          unknown call_tmp[623955] "expr temp" "maybe param" "maybe type" "temp"
          (623958 'move' call_tmp[623955](73581 call < stride[73442] 0))
          unknown call_tmp[623960] "expr temp" "maybe param" "maybe type" "temp"
          (623963 'move' call_tmp[623960](73604 call _cond_test call_tmp[623955]))
          if call_tmp[623960]
          {
            unknown call_tmp[623965] "expr temp" "maybe param" "maybe type" "temp"
            (623968 'move' call_tmp[623965](73586 call _cast idxType[73434] stride[73442]))
            unknown call_tmp[623970] "expr temp" "maybe param" "maybe type" "temp"
            (623973 'move' call_tmp[623970](73588 call + last[73449] call_tmp[623965]))
            unknown call_tmp[623975] "expr temp" "maybe param" "maybe type" "temp"
            (623978 'move' call_tmp[623975](73591 call > call_tmp[623970] last[73449]))
            unknown call_tmp[623980] "expr temp" "maybe param" "maybe type" "temp"
            (623983 'move' call_tmp[623980](73599 call _cond_test call_tmp[623975]))
            if call_tmp[623980]
            {
              (73595 call = willOverFlow[73470] 1)
              (475758 'end of statement' willOverFlow[73470])
            }
          }
        }
      }
      {
        (73650 call compilerError "Iterator overflow checking is only supported " "for integral types")
      }
    }
    unknown tmp[420659] "maybe param" "temp"
    (420670 'move' tmp[420659] willOverFlow[73470])
    unknown call_tmp[623985] "expr temp" "maybe param" "maybe type" "temp"
    (623988 'move' call_tmp[623985](420672 call _cond_invalid tmp[420659]))
    if call_tmp[623985]
    {
      (420675 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558269] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558270] "maybe param" "temp"
    unknown call_tmp[623990] "expr temp" "maybe param" "maybe type" "temp"
    (623993 'move' call_tmp[623990](420660 call isTrue tmp[420659]))
    (558275 'move' tmp[558270](558273 call _cond_test call_tmp[623990]))
    if tmp[558270]
    {
      unknown tmp[558277] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558279 'move' tmp[558277](420663 call isTrue shouldHalt[73453]))
      (558284 'move' tmp[558269](558281 '_paramFoldLogical' tmp[558270] tmp[558277]))
    }
    {
      (558289 'move' tmp[558269](558286 '_paramFoldLogical' tmp[558270] 0))
    }
    unknown call_tmp[623995] "expr temp" "maybe param" "maybe type" "temp"
    (623998 'move' call_tmp[623995](73691 call _cond_test tmp[558269]))
    if call_tmp[623995]
    {
      (73688 call boundsCheckHalt module=[255] HaltWrappers[210016] "Iteration over a bounded range may be incorrect due to overflow.")
      (357983 'referenced modules list' HaltWrappers[210016])
    }
    (510675 'move' ret[510665](510674 'deref' willOverFlow[73470]))
    gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510663] _end_chpl_checkIfRangeIterWillOverflow[510663]
    (475763 'end of statement' willOverFlow[73470])
    label _end_chpl_checkIfRangeIterWillOverflow[510663]
    (510667 return ret[510665])
  }
  function range[64319](?).checkIfIterWillOverflow[73707](arg _mt[73712]:_MT[238], arg this[73709]:range[64319](?) :
  range[64319](?), arg shouldHalt[73704] :
  1 =
  1) : _unknown[51] "method" "no doc"
  {
    unknown ret[510681] "RVV" "temp"
    unknown call_tmp[624002] "expr temp" "maybe param" "maybe type" "temp"
    (624005 'move' call_tmp[624002](73716 call intIdxType _mt[243] this[73709]))
    unknown call_tmp[624009] "expr temp" "maybe param" "maybe type" "temp"
    (624012 'move' call_tmp[624009](73721 call _low _mt[243] this[73709]))
    unknown call_tmp[624016] "expr temp" "maybe param" "maybe type" "temp"
    (624019 'move' call_tmp[624016](73725 call _high _mt[243] this[73709]))
    unknown call_tmp[624023] "expr temp" "maybe param" "maybe type" "temp"
    (624026 'move' call_tmp[624023](73729 call stride _mt[243] this[73709]))
    unknown call_tmp[624030] "expr temp" "maybe param" "maybe type" "temp"
    (624033 'move' call_tmp[624030](73733 call firstAsInt _mt[243] this[73709]))
    unknown call_tmp[624037] "expr temp" "maybe param" "maybe type" "temp"
    (624040 'move' call_tmp[624037](73737 call lastAsInt _mt[243] this[73709]))
    unknown call_tmp[624042] "expr temp" "maybe param" "maybe type" "temp"
    (624045 'move' call_tmp[624042](73741 call chpl_checkIfRangeIterWillOverflow call_tmp[624002] call_tmp[624009] call_tmp[624016] call_tmp[624023] call_tmp[624030] call_tmp[624037] shouldHalt[73704]))
    (510686 'move' ret[510681](510685 'deref' call_tmp[624042]))
    (510683 return ret[510681])
  }
  function chpl_direct_range_iter[456233](arg low[456240] :
  (456237 call int(64)[13] 64), arg high[456246] :
  (456244 call int(64)[13] 64), arg stride[456252] :
  (456250 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510690] "RVV" "temp"
    unknown call_tmp[624047] "expr temp" "maybe param" "maybe type" "temp"
    (624050 'move' call_tmp[624047](456259 call chpl_build_bounded_range low[456240] high[456246]))
    unknown call_tmp[624052] "maybe param" "maybe type" "temp"
    (624055 'move' call_tmp[624052](456257 call chpl_by call_tmp[624047] stride[456252]))
    const r[456255] "dead at end of block" "const" "insert auto destroy"
    (541231 'init var' r[456255] call_tmp[624052])
    (456264 'end of statement')
    {
      unknown _indexOfInterest[456266] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456268] "expr temp" "temp"
      (456270 'move' _iterator[456268](456273 call _getIterator r[456255]))
      Defer
      {
        {
          (456277 call _freeIterator _iterator[456268])
        }
      }
      { scopeless type
        (456281 'move' _indexOfInterest[456266](456284 call iteratorIndex _iterator[456268]))
      }
      ForLoop[456286]
      {
        unknown i[456289] "index var" "insert auto destroy"
        (475767 'end of statement')
        (456291 'move' i[456289] _indexOfInterest[456266])
        (475768 'end of statement' i[456289])
        unknown yret[510694] "YVV" "temp"
        (510697 'move' yret[510694](510696 'deref' i[456289]))
        (510699 yield yret[510694])
        (475770 'end of statement' i[456289])
        label _continueLabel[456296]
        _indexOfInterest[456266]
        _iterator[456268]
      }
      label _breakLabel[456298]
    }
    (510692 return ret[510690])
  }
  function chpl_direct_range_iter[456164](arg low[456171] :
  (456168 call int(64)[13] 32), arg high[456177] :
  (456175 call int(64)[13] 32), arg stride[456183] :
  (456181 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510703] "RVV" "temp"
    unknown call_tmp[624057] "expr temp" "maybe param" "maybe type" "temp"
    (624060 'move' call_tmp[624057](456190 call chpl_build_bounded_range low[456171] high[456177]))
    unknown call_tmp[624062] "maybe param" "maybe type" "temp"
    (624065 'move' call_tmp[624062](456188 call chpl_by call_tmp[624057] stride[456183]))
    const r[456186] "dead at end of block" "const" "insert auto destroy"
    (541233 'init var' r[456186] call_tmp[624062])
    (456195 'end of statement')
    {
      unknown _indexOfInterest[456197] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456199] "expr temp" "temp"
      (456201 'move' _iterator[456199](456204 call _getIterator r[456186]))
      Defer
      {
        {
          (456208 call _freeIterator _iterator[456199])
        }
      }
      { scopeless type
        (456212 'move' _indexOfInterest[456197](456215 call iteratorIndex _iterator[456199]))
      }
      ForLoop[456217]
      {
        unknown i[456220] "index var" "insert auto destroy"
        (475773 'end of statement')
        (456222 'move' i[456220] _indexOfInterest[456197])
        (475774 'end of statement' i[456220])
        unknown yret[510707] "YVV" "temp"
        (510710 'move' yret[510707](510709 'deref' i[456220]))
        (510712 yield yret[510707])
        (475776 'end of statement' i[456220])
        label _continueLabel[456227]
        _indexOfInterest[456197]
        _iterator[456199]
      }
      label _breakLabel[456229]
    }
    (510705 return ret[510703])
  }
  function chpl_direct_range_iter[456095](arg low[456102] :
  (456099 call int(64)[13] 16), arg high[456108] :
  (456106 call int(64)[13] 16), arg stride[456114] :
  (456112 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510716] "RVV" "temp"
    unknown call_tmp[624067] "expr temp" "maybe param" "maybe type" "temp"
    (624070 'move' call_tmp[624067](456121 call chpl_build_bounded_range low[456102] high[456108]))
    unknown call_tmp[624072] "maybe param" "maybe type" "temp"
    (624075 'move' call_tmp[624072](456119 call chpl_by call_tmp[624067] stride[456114]))
    const r[456117] "dead at end of block" "const" "insert auto destroy"
    (541235 'init var' r[456117] call_tmp[624072])
    (456126 'end of statement')
    {
      unknown _indexOfInterest[456128] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456130] "expr temp" "temp"
      (456132 'move' _iterator[456130](456135 call _getIterator r[456117]))
      Defer
      {
        {
          (456139 call _freeIterator _iterator[456130])
        }
      }
      { scopeless type
        (456143 'move' _indexOfInterest[456128](456146 call iteratorIndex _iterator[456130]))
      }
      ForLoop[456148]
      {
        unknown i[456151] "index var" "insert auto destroy"
        (475779 'end of statement')
        (456153 'move' i[456151] _indexOfInterest[456128])
        (475780 'end of statement' i[456151])
        unknown yret[510720] "YVV" "temp"
        (510723 'move' yret[510720](510722 'deref' i[456151]))
        (510725 yield yret[510720])
        (475782 'end of statement' i[456151])
        label _continueLabel[456158]
        _indexOfInterest[456128]
        _iterator[456130]
      }
      label _breakLabel[456160]
    }
    (510718 return ret[510716])
  }
  function chpl_direct_range_iter[456026](arg low[456033] :
  (456030 call int(64)[13] 8), arg high[456039] :
  (456037 call int(64)[13] 8), arg stride[456045] :
  (456043 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510729] "RVV" "temp"
    unknown call_tmp[624077] "expr temp" "maybe param" "maybe type" "temp"
    (624080 'move' call_tmp[624077](456052 call chpl_build_bounded_range low[456033] high[456039]))
    unknown call_tmp[624082] "maybe param" "maybe type" "temp"
    (624085 'move' call_tmp[624082](456050 call chpl_by call_tmp[624077] stride[456045]))
    const r[456048] "dead at end of block" "const" "insert auto destroy"
    (541237 'init var' r[456048] call_tmp[624082])
    (456057 'end of statement')
    {
      unknown _indexOfInterest[456059] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456061] "expr temp" "temp"
      (456063 'move' _iterator[456061](456066 call _getIterator r[456048]))
      Defer
      {
        {
          (456070 call _freeIterator _iterator[456061])
        }
      }
      { scopeless type
        (456074 'move' _indexOfInterest[456059](456077 call iteratorIndex _iterator[456061]))
      }
      ForLoop[456079]
      {
        unknown i[456082] "index var" "insert auto destroy"
        (475785 'end of statement')
        (456084 'move' i[456082] _indexOfInterest[456059])
        (475786 'end of statement' i[456082])
        unknown yret[510733] "YVV" "temp"
        (510736 'move' yret[510733](510735 'deref' i[456082]))
        (510738 yield yret[510733])
        (475788 'end of statement' i[456082])
        label _continueLabel[456089]
        _indexOfInterest[456059]
        _iterator[456061]
      }
      label _breakLabel[456091]
    }
    (510731 return ret[510729])
  }
  function chpl_direct_range_iter[456509](arg low[456516] :
  (456513 call uint(64)[115] 64), arg high[456522] :
  (456520 call uint(64)[115] 64), arg stride[456528] :
  (456526 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510742] "RVV" "temp"
    unknown call_tmp[624087] "expr temp" "maybe param" "maybe type" "temp"
    (624090 'move' call_tmp[624087](456535 call chpl_build_bounded_range low[456516] high[456522]))
    unknown call_tmp[624092] "maybe param" "maybe type" "temp"
    (624095 'move' call_tmp[624092](456533 call chpl_by call_tmp[624087] stride[456528]))
    const r[456531] "dead at end of block" "const" "insert auto destroy"
    (541239 'init var' r[456531] call_tmp[624092])
    (456540 'end of statement')
    {
      unknown _indexOfInterest[456542] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456544] "expr temp" "temp"
      (456546 'move' _iterator[456544](456549 call _getIterator r[456531]))
      Defer
      {
        {
          (456553 call _freeIterator _iterator[456544])
        }
      }
      { scopeless type
        (456557 'move' _indexOfInterest[456542](456560 call iteratorIndex _iterator[456544]))
      }
      ForLoop[456562]
      {
        unknown i[456565] "index var" "insert auto destroy"
        (475791 'end of statement')
        (456567 'move' i[456565] _indexOfInterest[456542])
        (475792 'end of statement' i[456565])
        unknown yret[510746] "YVV" "temp"
        (510749 'move' yret[510746](510748 'deref' i[456565]))
        (510751 yield yret[510746])
        (475794 'end of statement' i[456565])
        label _continueLabel[456572]
        _indexOfInterest[456542]
        _iterator[456544]
      }
      label _breakLabel[456574]
    }
    (510744 return ret[510742])
  }
  function chpl_direct_range_iter[456440](arg low[456447] :
  (456444 call uint(64)[115] 32), arg high[456453] :
  (456451 call uint(64)[115] 32), arg stride[456459] :
  (456457 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510755] "RVV" "temp"
    unknown call_tmp[624097] "expr temp" "maybe param" "maybe type" "temp"
    (624100 'move' call_tmp[624097](456466 call chpl_build_bounded_range low[456447] high[456453]))
    unknown call_tmp[624102] "maybe param" "maybe type" "temp"
    (624105 'move' call_tmp[624102](456464 call chpl_by call_tmp[624097] stride[456459]))
    const r[456462] "dead at end of block" "const" "insert auto destroy"
    (541241 'init var' r[456462] call_tmp[624102])
    (456471 'end of statement')
    {
      unknown _indexOfInterest[456473] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456475] "expr temp" "temp"
      (456477 'move' _iterator[456475](456480 call _getIterator r[456462]))
      Defer
      {
        {
          (456484 call _freeIterator _iterator[456475])
        }
      }
      { scopeless type
        (456488 'move' _indexOfInterest[456473](456491 call iteratorIndex _iterator[456475]))
      }
      ForLoop[456493]
      {
        unknown i[456496] "index var" "insert auto destroy"
        (475797 'end of statement')
        (456498 'move' i[456496] _indexOfInterest[456473])
        (475798 'end of statement' i[456496])
        unknown yret[510759] "YVV" "temp"
        (510762 'move' yret[510759](510761 'deref' i[456496]))
        (510764 yield yret[510759])
        (475800 'end of statement' i[456496])
        label _continueLabel[456503]
        _indexOfInterest[456473]
        _iterator[456475]
      }
      label _breakLabel[456505]
    }
    (510757 return ret[510755])
  }
  function chpl_direct_range_iter[456371](arg low[456378] :
  (456375 call uint(64)[115] 16), arg high[456384] :
  (456382 call uint(64)[115] 16), arg stride[456390] :
  (456388 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510768] "RVV" "temp"
    unknown call_tmp[624107] "expr temp" "maybe param" "maybe type" "temp"
    (624110 'move' call_tmp[624107](456397 call chpl_build_bounded_range low[456378] high[456384]))
    unknown call_tmp[624112] "maybe param" "maybe type" "temp"
    (624115 'move' call_tmp[624112](456395 call chpl_by call_tmp[624107] stride[456390]))
    const r[456393] "dead at end of block" "const" "insert auto destroy"
    (541243 'init var' r[456393] call_tmp[624112])
    (456402 'end of statement')
    {
      unknown _indexOfInterest[456404] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456406] "expr temp" "temp"
      (456408 'move' _iterator[456406](456411 call _getIterator r[456393]))
      Defer
      {
        {
          (456415 call _freeIterator _iterator[456406])
        }
      }
      { scopeless type
        (456419 'move' _indexOfInterest[456404](456422 call iteratorIndex _iterator[456406]))
      }
      ForLoop[456424]
      {
        unknown i[456427] "index var" "insert auto destroy"
        (475803 'end of statement')
        (456429 'move' i[456427] _indexOfInterest[456404])
        (475804 'end of statement' i[456427])
        unknown yret[510772] "YVV" "temp"
        (510775 'move' yret[510772](510774 'deref' i[456427]))
        (510777 yield yret[510772])
        (475806 'end of statement' i[456427])
        label _continueLabel[456434]
        _indexOfInterest[456404]
        _iterator[456406]
      }
      label _breakLabel[456436]
    }
    (510770 return ret[510768])
  }
  function chpl_direct_range_iter[456302](arg low[456309] :
  (456306 call uint(64)[115] 8), arg high[456315] :
  (456313 call uint(64)[115] 8), arg stride[456321] :
  (456319 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510781] "RVV" "temp"
    unknown call_tmp[624117] "expr temp" "maybe param" "maybe type" "temp"
    (624120 'move' call_tmp[624117](456328 call chpl_build_bounded_range low[456309] high[456315]))
    unknown call_tmp[624122] "maybe param" "maybe type" "temp"
    (624125 'move' call_tmp[624122](456326 call chpl_by call_tmp[624117] stride[456321]))
    const r[456324] "dead at end of block" "const" "insert auto destroy"
    (541245 'init var' r[456324] call_tmp[624122])
    (456333 'end of statement')
    {
      unknown _indexOfInterest[456335] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456337] "expr temp" "temp"
      (456339 'move' _iterator[456337](456342 call _getIterator r[456324]))
      Defer
      {
        {
          (456346 call _freeIterator _iterator[456337])
        }
      }
      { scopeless type
        (456350 'move' _indexOfInterest[456335](456353 call iteratorIndex _iterator[456337]))
      }
      ForLoop[456355]
      {
        unknown i[456358] "index var" "insert auto destroy"
        (475809 'end of statement')
        (456360 'move' i[456358] _indexOfInterest[456335])
        (475810 'end of statement' i[456358])
        unknown yret[510785] "YVV" "temp"
        (510788 'move' yret[510785](510787 'deref' i[456358]))
        (510790 yield yret[510785])
        (475812 'end of statement' i[456358])
        label _continueLabel[456365]
        _indexOfInterest[456335]
        _iterator[456337]
      }
      label _breakLabel[456367]
    }
    (510783 return ret[510781])
  }
  function chpl_direct_range_iter[73909](arg low[73906]:enum[187](?), arg high[73912]:enum[187](?), arg stride[73916]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510794] "RVV" "temp"
    unknown call_tmp[624127] "expr temp" "maybe param" "maybe type" "temp"
    (624130 'move' call_tmp[624127](73921 call chpl_build_bounded_range low[73906] high[73912]))
    unknown call_tmp[624132] "maybe param" "maybe type" "temp"
    (624135 'move' call_tmp[624132](73924 call chpl_by call_tmp[624127] stride[73916]))
    const r[73926] "dead at end of block" "const" "insert auto destroy"
    (541247 'init var' r[73926] call_tmp[624132])
    (73929 'end of statement')
    {
      unknown _indexOfInterest[73936] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[73937] "expr temp" "temp"
      (73946 'move' _iterator[73937](73944 call _getIterator r[73926]))
      Defer
      {
        {
          (73962 call _freeIterator _iterator[73937])
        }
      }
      { scopeless type
        (73951 'move' _indexOfInterest[73936](73948 call iteratorIndex _iterator[73937]))
      }
      ForLoop[73938]
      {
        unknown i[73955] "index var" "insert auto destroy"
        (475815 'end of statement')
        (73957 'move' i[73955] _indexOfInterest[73936])
        (475816 'end of statement' i[73955])
        unknown yret[510798] "YVV" "temp"
        (510801 'move' yret[510798](510800 'deref' i[73955]))
        (510803 yield yret[510798])
        (475818 'end of statement' i[73955])
        label _continueLabel[73941]
        _indexOfInterest[73936]
        _iterator[73937]
      }
      label _breakLabel[73942]
    }
    (510796 return ret[510794])
  }
  function chpl_direct_range_iter[73977](arg low[73974]:bool[10], arg high[73980]:bool[10], arg stride[73984]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510807] "RVV" "temp"
    unknown call_tmp[624137] "expr temp" "maybe param" "maybe type" "temp"
    (624140 'move' call_tmp[624137](73989 call chpl_build_bounded_range low[73974] high[73980]))
    unknown call_tmp[624142] "maybe param" "maybe type" "temp"
    (624145 'move' call_tmp[624142](73992 call chpl_by call_tmp[624137] stride[73984]))
    const r[73994] "dead at end of block" "const" "insert auto destroy"
    (541249 'init var' r[73994] call_tmp[624142])
    (73997 'end of statement')
    {
      unknown _indexOfInterest[74004] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[74005] "expr temp" "temp"
      (74014 'move' _iterator[74005](74012 call _getIterator r[73994]))
      Defer
      {
        {
          (74030 call _freeIterator _iterator[74005])
        }
      }
      { scopeless type
        (74019 'move' _indexOfInterest[74004](74016 call iteratorIndex _iterator[74005]))
      }
      ForLoop[74006]
      {
        unknown i[74023] "index var" "insert auto destroy"
        (475821 'end of statement')
        (74025 'move' i[74023] _indexOfInterest[74004])
        (475822 'end of statement' i[74023])
        unknown yret[510811] "YVV" "temp"
        (510814 'move' yret[510811](510813 'deref' i[74023]))
        (510816 yield yret[510811])
        (475824 'end of statement' i[74023])
        label _continueLabel[74009]
        _indexOfInterest[74004]
        _iterator[74005]
      }
      label _breakLabel[74010]
    }
    (510809 return ret[510807])
  }
  function chpl_direct_range_iter[456767](arg low[456774] :
  (456771 call int(64)[13] 64), arg high[456780] :
  (456778 call int(64)[13] 64), param arg stride[456786] :
  (456784 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510820] "RVV" "temp"
    {
      unknown _indexOfInterest[456790] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456792] "expr temp" "temp"
      unknown call_tmp[624147] "expr temp" "maybe param" "maybe type" "temp"
      (624150 'move' call_tmp[624147](456799 call chpl_direct_param_stride_range_iter low[456774] high[456780] stride[456786]))
      (456794 'move' _iterator[456792](456797 call _getIterator call_tmp[624147]))
      Defer
      {
        {
          (456805 call _freeIterator _iterator[456792])
        }
      }
      { scopeless type
        (456809 'move' _indexOfInterest[456790](456812 call iteratorIndex _iterator[456792]))
      }
      ForLoop[456814]
      {
        unknown i[456817] "index var" "insert auto destroy"
        (475827 'end of statement')
        (456819 'move' i[456817] _indexOfInterest[456790])
        (475828 'end of statement' i[456817])
        unknown yret[510824] "YVV" "temp"
        (510827 'move' yret[510824](510826 'deref' i[456817]))
        (510829 yield yret[510824])
        (475830 'end of statement' i[456817])
        label _continueLabel[456824]
        _indexOfInterest[456790]
        _iterator[456792]
      }
      label _breakLabel[456826]
    }
    (510822 return ret[510820])
  }
  function chpl_direct_range_iter[456704](arg low[456711] :
  (456708 call int(64)[13] 32), arg high[456717] :
  (456715 call int(64)[13] 32), param arg stride[456723] :
  (456721 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510833] "RVV" "temp"
    {
      unknown _indexOfInterest[456727] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456729] "expr temp" "temp"
      unknown call_tmp[624152] "expr temp" "maybe param" "maybe type" "temp"
      (624155 'move' call_tmp[624152](456736 call chpl_direct_param_stride_range_iter low[456711] high[456717] stride[456723]))
      (456731 'move' _iterator[456729](456734 call _getIterator call_tmp[624152]))
      Defer
      {
        {
          (456742 call _freeIterator _iterator[456729])
        }
      }
      { scopeless type
        (456746 'move' _indexOfInterest[456727](456749 call iteratorIndex _iterator[456729]))
      }
      ForLoop[456751]
      {
        unknown i[456754] "index var" "insert auto destroy"
        (475833 'end of statement')
        (456756 'move' i[456754] _indexOfInterest[456727])
        (475834 'end of statement' i[456754])
        unknown yret[510837] "YVV" "temp"
        (510840 'move' yret[510837](510839 'deref' i[456754]))
        (510842 yield yret[510837])
        (475836 'end of statement' i[456754])
        label _continueLabel[456761]
        _indexOfInterest[456727]
        _iterator[456729]
      }
      label _breakLabel[456763]
    }
    (510835 return ret[510833])
  }
  function chpl_direct_range_iter[456641](arg low[456648] :
  (456645 call int(64)[13] 16), arg high[456654] :
  (456652 call int(64)[13] 16), param arg stride[456660] :
  (456658 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510846] "RVV" "temp"
    {
      unknown _indexOfInterest[456664] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456666] "expr temp" "temp"
      unknown call_tmp[624157] "expr temp" "maybe param" "maybe type" "temp"
      (624160 'move' call_tmp[624157](456673 call chpl_direct_param_stride_range_iter low[456648] high[456654] stride[456660]))
      (456668 'move' _iterator[456666](456671 call _getIterator call_tmp[624157]))
      Defer
      {
        {
          (456679 call _freeIterator _iterator[456666])
        }
      }
      { scopeless type
        (456683 'move' _indexOfInterest[456664](456686 call iteratorIndex _iterator[456666]))
      }
      ForLoop[456688]
      {
        unknown i[456691] "index var" "insert auto destroy"
        (475839 'end of statement')
        (456693 'move' i[456691] _indexOfInterest[456664])
        (475840 'end of statement' i[456691])
        unknown yret[510850] "YVV" "temp"
        (510853 'move' yret[510850](510852 'deref' i[456691]))
        (510855 yield yret[510850])
        (475842 'end of statement' i[456691])
        label _continueLabel[456698]
        _indexOfInterest[456664]
        _iterator[456666]
      }
      label _breakLabel[456700]
    }
    (510848 return ret[510846])
  }
  function chpl_direct_range_iter[456578](arg low[456585] :
  (456582 call int(64)[13] 8), arg high[456591] :
  (456589 call int(64)[13] 8), param arg stride[456597] :
  (456595 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510859] "RVV" "temp"
    {
      unknown _indexOfInterest[456601] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456603] "expr temp" "temp"
      unknown call_tmp[624162] "expr temp" "maybe param" "maybe type" "temp"
      (624165 'move' call_tmp[624162](456610 call chpl_direct_param_stride_range_iter low[456585] high[456591] stride[456597]))
      (456605 'move' _iterator[456603](456608 call _getIterator call_tmp[624162]))
      Defer
      {
        {
          (456616 call _freeIterator _iterator[456603])
        }
      }
      { scopeless type
        (456620 'move' _indexOfInterest[456601](456623 call iteratorIndex _iterator[456603]))
      }
      ForLoop[456625]
      {
        unknown i[456628] "index var" "insert auto destroy"
        (475845 'end of statement')
        (456630 'move' i[456628] _indexOfInterest[456601])
        (475846 'end of statement' i[456628])
        unknown yret[510863] "YVV" "temp"
        (510866 'move' yret[510863](510865 'deref' i[456628]))
        (510868 yield yret[510863])
        (475848 'end of statement' i[456628])
        label _continueLabel[456635]
        _indexOfInterest[456601]
        _iterator[456603]
      }
      label _breakLabel[456637]
    }
    (510861 return ret[510859])
  }
  function chpl_direct_range_iter[457019](arg low[457026] :
  (457023 call uint(64)[115] 64), arg high[457032] :
  (457030 call uint(64)[115] 64), param arg stride[457038] :
  (457036 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510872] "RVV" "temp"
    {
      unknown _indexOfInterest[457042] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457044] "expr temp" "temp"
      unknown call_tmp[624167] "expr temp" "maybe param" "maybe type" "temp"
      (624170 'move' call_tmp[624167](457051 call chpl_direct_param_stride_range_iter low[457026] high[457032] stride[457038]))
      (457046 'move' _iterator[457044](457049 call _getIterator call_tmp[624167]))
      Defer
      {
        {
          (457057 call _freeIterator _iterator[457044])
        }
      }
      { scopeless type
        (457061 'move' _indexOfInterest[457042](457064 call iteratorIndex _iterator[457044]))
      }
      ForLoop[457066]
      {
        unknown i[457069] "index var" "insert auto destroy"
        (475851 'end of statement')
        (457071 'move' i[457069] _indexOfInterest[457042])
        (475852 'end of statement' i[457069])
        unknown yret[510876] "YVV" "temp"
        (510879 'move' yret[510876](510878 'deref' i[457069]))
        (510881 yield yret[510876])
        (475854 'end of statement' i[457069])
        label _continueLabel[457076]
        _indexOfInterest[457042]
        _iterator[457044]
      }
      label _breakLabel[457078]
    }
    (510874 return ret[510872])
  }
  function chpl_direct_range_iter[456956](arg low[456963] :
  (456960 call uint(64)[115] 32), arg high[456969] :
  (456967 call uint(64)[115] 32), param arg stride[456975] :
  (456973 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510885] "RVV" "temp"
    {
      unknown _indexOfInterest[456979] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456981] "expr temp" "temp"
      unknown call_tmp[624172] "expr temp" "maybe param" "maybe type" "temp"
      (624175 'move' call_tmp[624172](456988 call chpl_direct_param_stride_range_iter low[456963] high[456969] stride[456975]))
      (456983 'move' _iterator[456981](456986 call _getIterator call_tmp[624172]))
      Defer
      {
        {
          (456994 call _freeIterator _iterator[456981])
        }
      }
      { scopeless type
        (456998 'move' _indexOfInterest[456979](457001 call iteratorIndex _iterator[456981]))
      }
      ForLoop[457003]
      {
        unknown i[457006] "index var" "insert auto destroy"
        (475857 'end of statement')
        (457008 'move' i[457006] _indexOfInterest[456979])
        (475858 'end of statement' i[457006])
        unknown yret[510889] "YVV" "temp"
        (510892 'move' yret[510889](510891 'deref' i[457006]))
        (510894 yield yret[510889])
        (475860 'end of statement' i[457006])
        label _continueLabel[457013]
        _indexOfInterest[456979]
        _iterator[456981]
      }
      label _breakLabel[457015]
    }
    (510887 return ret[510885])
  }
  function chpl_direct_range_iter[456893](arg low[456900] :
  (456897 call uint(64)[115] 16), arg high[456906] :
  (456904 call uint(64)[115] 16), param arg stride[456912] :
  (456910 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510898] "RVV" "temp"
    {
      unknown _indexOfInterest[456916] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456918] "expr temp" "temp"
      unknown call_tmp[624177] "expr temp" "maybe param" "maybe type" "temp"
      (624180 'move' call_tmp[624177](456925 call chpl_direct_param_stride_range_iter low[456900] high[456906] stride[456912]))
      (456920 'move' _iterator[456918](456923 call _getIterator call_tmp[624177]))
      Defer
      {
        {
          (456931 call _freeIterator _iterator[456918])
        }
      }
      { scopeless type
        (456935 'move' _indexOfInterest[456916](456938 call iteratorIndex _iterator[456918]))
      }
      ForLoop[456940]
      {
        unknown i[456943] "index var" "insert auto destroy"
        (475863 'end of statement')
        (456945 'move' i[456943] _indexOfInterest[456916])
        (475864 'end of statement' i[456943])
        unknown yret[510902] "YVV" "temp"
        (510905 'move' yret[510902](510904 'deref' i[456943]))
        (510907 yield yret[510902])
        (475866 'end of statement' i[456943])
        label _continueLabel[456950]
        _indexOfInterest[456916]
        _iterator[456918]
      }
      label _breakLabel[456952]
    }
    (510900 return ret[510898])
  }
  function chpl_direct_range_iter[456830](arg low[456837] :
  (456834 call uint(64)[115] 8), arg high[456843] :
  (456841 call uint(64)[115] 8), param arg stride[456849] :
  (456847 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510911] "RVV" "temp"
    {
      unknown _indexOfInterest[456853] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456855] "expr temp" "temp"
      unknown call_tmp[624182] "expr temp" "maybe param" "maybe type" "temp"
      (624185 'move' call_tmp[624182](456862 call chpl_direct_param_stride_range_iter low[456837] high[456843] stride[456849]))
      (456857 'move' _iterator[456855](456860 call _getIterator call_tmp[624182]))
      Defer
      {
        {
          (456868 call _freeIterator _iterator[456855])
        }
      }
      { scopeless type
        (456872 'move' _indexOfInterest[456853](456875 call iteratorIndex _iterator[456855]))
      }
      ForLoop[456877]
      {
        unknown i[456880] "index var" "insert auto destroy"
        (475869 'end of statement')
        (456882 'move' i[456880] _indexOfInterest[456853])
        (475870 'end of statement' i[456880])
        unknown yret[510915] "YVV" "temp"
        (510918 'move' yret[510915](510917 'deref' i[456880]))
        (510920 yield yret[510915])
        (475872 'end of statement' i[456880])
        label _continueLabel[456887]
        _indexOfInterest[456853]
        _iterator[456855]
      }
      label _breakLabel[456889]
    }
    (510913 return ret[510911])
  }
  function chpl_direct_range_iter[74191](arg low[74188]:enum[187](?), arg high[74194]:enum[187](?), param arg stride[74198]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510924] "RVV" "temp"
    unknown call_tmp[624187] "expr temp" "maybe param" "maybe type" "temp"
    (624190 'move' call_tmp[624187](74203 call == stride[74198] 1))
    unknown call_tmp[624192] "expr temp" "maybe param" "maybe type" "temp"
    (624195 'move' call_tmp[624192](74302 call _cond_test call_tmp[624187]))
    if call_tmp[624192]
    {
      unknown call_tmp[624197] "maybe param" "maybe type" "temp"
      (624200 'move' call_tmp[624197](74207 call chpl_build_bounded_range low[74188] high[74194]))
      const r[74209] "dead at end of block" "const" "insert auto destroy"
      (541251 'init var' r[74209] call_tmp[624197])
      (74212 'end of statement')
      {
        unknown _indexOfInterest[74219] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74220] "expr temp" "temp"
        (74229 'move' _iterator[74220](74227 call _getIterator r[74209]))
        Defer
        {
          {
            (74245 call _freeIterator _iterator[74220])
          }
        }
        { scopeless type
          (74234 'move' _indexOfInterest[74219](74231 call iteratorIndex _iterator[74220]))
        }
        ForLoop[74221]
        {
          unknown i[74238] "index var" "insert auto destroy"
          (475875 'end of statement')
          (74240 'move' i[74238] _indexOfInterest[74219])
          (475876 'end of statement' i[74238])
          unknown yret[510928] "YVV" "temp"
          (510931 'move' yret[510928](510930 'deref' i[74238]))
          (510933 yield yret[510928])
          (475878 'end of statement' i[74238])
          label _continueLabel[74224]
          _indexOfInterest[74219]
          _iterator[74220]
        }
        label _breakLabel[74225]
      }
    }
    {
      unknown call_tmp[624202] "expr temp" "maybe param" "maybe type" "temp"
      (624205 'move' call_tmp[624202](74254 call chpl_build_bounded_range low[74188] high[74194]))
      unknown call_tmp[624207] "maybe param" "maybe type" "temp"
      (624210 'move' call_tmp[624207](74257 call chpl_by call_tmp[624202] stride[74198]))
      const r[74259] "dead at end of block" "const" "insert auto destroy"
      (541253 'init var' r[74259] call_tmp[624207])
      (74262 'end of statement')
      {
        unknown _indexOfInterest[74269] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74270] "expr temp" "temp"
        (74279 'move' _iterator[74270](74277 call _getIterator r[74259]))
        Defer
        {
          {
            (74295 call _freeIterator _iterator[74270])
          }
        }
        { scopeless type
          (74284 'move' _indexOfInterest[74269](74281 call iteratorIndex _iterator[74270]))
        }
        ForLoop[74271]
        {
          unknown i[74288] "index var" "insert auto destroy"
          (475881 'end of statement')
          (74290 'move' i[74288] _indexOfInterest[74269])
          (475882 'end of statement' i[74288])
          unknown yret[510935] "YVV" "temp"
          (510938 'move' yret[510935](510937 'deref' i[74288]))
          (510940 yield yret[510935])
          (475884 'end of statement' i[74288])
          label _continueLabel[74274]
          _indexOfInterest[74269]
          _iterator[74270]
        }
        label _breakLabel[74275]
      }
    }
    (510926 return ret[510924])
  }
  function chpl_direct_range_iter[74315](arg low[74312]:bool[10], arg high[74318]:bool[10], param arg stride[74322]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510944] "RVV" "temp"
    unknown call_tmp[624212] "expr temp" "maybe param" "maybe type" "temp"
    (624215 'move' call_tmp[624212](74327 call == stride[74322] 1))
    unknown call_tmp[624217] "expr temp" "maybe param" "maybe type" "temp"
    (624220 'move' call_tmp[624217](74426 call _cond_test call_tmp[624212]))
    if call_tmp[624217]
    {
      unknown call_tmp[624222] "maybe param" "maybe type" "temp"
      (624225 'move' call_tmp[624222](74331 call chpl_build_bounded_range low[74312] high[74318]))
      const r[74333] "dead at end of block" "const" "insert auto destroy"
      (541255 'init var' r[74333] call_tmp[624222])
      (74336 'end of statement')
      {
        unknown _indexOfInterest[74343] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74344] "expr temp" "temp"
        (74353 'move' _iterator[74344](74351 call _getIterator r[74333]))
        Defer
        {
          {
            (74369 call _freeIterator _iterator[74344])
          }
        }
        { scopeless type
          (74358 'move' _indexOfInterest[74343](74355 call iteratorIndex _iterator[74344]))
        }
        ForLoop[74345]
        {
          unknown i[74362] "index var" "insert auto destroy"
          (475887 'end of statement')
          (74364 'move' i[74362] _indexOfInterest[74343])
          (475888 'end of statement' i[74362])
          unknown yret[510948] "YVV" "temp"
          (510951 'move' yret[510948](510950 'deref' i[74362]))
          (510953 yield yret[510948])
          (475890 'end of statement' i[74362])
          label _continueLabel[74348]
          _indexOfInterest[74343]
          _iterator[74344]
        }
        label _breakLabel[74349]
      }
    }
    {
      unknown call_tmp[624227] "expr temp" "maybe param" "maybe type" "temp"
      (624230 'move' call_tmp[624227](74378 call chpl_build_bounded_range low[74312] high[74318]))
      unknown call_tmp[624232] "maybe param" "maybe type" "temp"
      (624235 'move' call_tmp[624232](74381 call chpl_by call_tmp[624227] stride[74322]))
      const r[74383] "dead at end of block" "const" "insert auto destroy"
      (541257 'init var' r[74383] call_tmp[624232])
      (74386 'end of statement')
      {
        unknown _indexOfInterest[74393] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74394] "expr temp" "temp"
        (74403 'move' _iterator[74394](74401 call _getIterator r[74383]))
        Defer
        {
          {
            (74419 call _freeIterator _iterator[74394])
          }
        }
        { scopeless type
          (74408 'move' _indexOfInterest[74393](74405 call iteratorIndex _iterator[74394]))
        }
        ForLoop[74395]
        {
          unknown i[74412] "index var" "insert auto destroy"
          (475893 'end of statement')
          (74414 'move' i[74412] _indexOfInterest[74393])
          (475894 'end of statement' i[74412])
          unknown yret[510955] "YVV" "temp"
          (510958 'move' yret[510955](510957 'deref' i[74412]))
          (510960 yield yret[510955])
          (475896 'end of statement' i[74412])
          label _continueLabel[74398]
          _indexOfInterest[74393]
          _iterator[74394]
        }
        label _breakLabel[74399]
      }
    }
    (510946 return ret[510944])
  }
  function chpl_direct_range_iter[457271](arg low[457278] :
  (457275 call int(64)[13] 64), arg high[457284] :
  (457282 call int(64)[13] 64), arg stride[457290] :
  (457288 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510964] "RVV" "temp"
    {
      unknown _indexOfInterest[457294] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457296] "expr temp" "temp"
      unknown call_tmp[624237] "expr temp" "maybe param" "maybe type" "temp"
      (624240 'move' call_tmp[624237](457303 call chpl_direct_pos_stride_range_iter low[457278] high[457284] stride[457290]))
      (457298 'move' _iterator[457296](457301 call _getIterator call_tmp[624237]))
      Defer
      {
        {
          (457309 call _freeIterator _iterator[457296])
        }
      }
      { scopeless type
        (457313 'move' _indexOfInterest[457294](457316 call iteratorIndex _iterator[457296]))
      }
      ForLoop[457318]
      {
        unknown i[457321] "index var" "insert auto destroy"
        (475899 'end of statement')
        (457323 'move' i[457321] _indexOfInterest[457294])
        (475900 'end of statement' i[457321])
        unknown yret[510968] "YVV" "temp"
        (510971 'move' yret[510968](510970 'deref' i[457321]))
        (510973 yield yret[510968])
        (475902 'end of statement' i[457321])
        label _continueLabel[457328]
        _indexOfInterest[457294]
        _iterator[457296]
      }
      label _breakLabel[457330]
    }
    (510966 return ret[510964])
  }
  function chpl_direct_range_iter[457208](arg low[457215] :
  (457212 call int(64)[13] 32), arg high[457221] :
  (457219 call int(64)[13] 32), arg stride[457227] :
  (457225 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510977] "RVV" "temp"
    {
      unknown _indexOfInterest[457231] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457233] "expr temp" "temp"
      unknown call_tmp[624242] "expr temp" "maybe param" "maybe type" "temp"
      (624245 'move' call_tmp[624242](457240 call chpl_direct_pos_stride_range_iter low[457215] high[457221] stride[457227]))
      (457235 'move' _iterator[457233](457238 call _getIterator call_tmp[624242]))
      Defer
      {
        {
          (457246 call _freeIterator _iterator[457233])
        }
      }
      { scopeless type
        (457250 'move' _indexOfInterest[457231](457253 call iteratorIndex _iterator[457233]))
      }
      ForLoop[457255]
      {
        unknown i[457258] "index var" "insert auto destroy"
        (475905 'end of statement')
        (457260 'move' i[457258] _indexOfInterest[457231])
        (475906 'end of statement' i[457258])
        unknown yret[510981] "YVV" "temp"
        (510984 'move' yret[510981](510983 'deref' i[457258]))
        (510986 yield yret[510981])
        (475908 'end of statement' i[457258])
        label _continueLabel[457265]
        _indexOfInterest[457231]
        _iterator[457233]
      }
      label _breakLabel[457267]
    }
    (510979 return ret[510977])
  }
  function chpl_direct_range_iter[457145](arg low[457152] :
  (457149 call int(64)[13] 16), arg high[457158] :
  (457156 call int(64)[13] 16), arg stride[457164] :
  (457162 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510990] "RVV" "temp"
    {
      unknown _indexOfInterest[457168] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457170] "expr temp" "temp"
      unknown call_tmp[624247] "expr temp" "maybe param" "maybe type" "temp"
      (624250 'move' call_tmp[624247](457177 call chpl_direct_pos_stride_range_iter low[457152] high[457158] stride[457164]))
      (457172 'move' _iterator[457170](457175 call _getIterator call_tmp[624247]))
      Defer
      {
        {
          (457183 call _freeIterator _iterator[457170])
        }
      }
      { scopeless type
        (457187 'move' _indexOfInterest[457168](457190 call iteratorIndex _iterator[457170]))
      }
      ForLoop[457192]
      {
        unknown i[457195] "index var" "insert auto destroy"
        (475911 'end of statement')
        (457197 'move' i[457195] _indexOfInterest[457168])
        (475912 'end of statement' i[457195])
        unknown yret[510994] "YVV" "temp"
        (510997 'move' yret[510994](510996 'deref' i[457195]))
        (510999 yield yret[510994])
        (475914 'end of statement' i[457195])
        label _continueLabel[457202]
        _indexOfInterest[457168]
        _iterator[457170]
      }
      label _breakLabel[457204]
    }
    (510992 return ret[510990])
  }
  function chpl_direct_range_iter[457082](arg low[457089] :
  (457086 call int(64)[13] 8), arg high[457095] :
  (457093 call int(64)[13] 8), arg stride[457101] :
  (457099 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511003] "RVV" "temp"
    {
      unknown _indexOfInterest[457105] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457107] "expr temp" "temp"
      unknown call_tmp[624252] "expr temp" "maybe param" "maybe type" "temp"
      (624255 'move' call_tmp[624252](457114 call chpl_direct_pos_stride_range_iter low[457089] high[457095] stride[457101]))
      (457109 'move' _iterator[457107](457112 call _getIterator call_tmp[624252]))
      Defer
      {
        {
          (457120 call _freeIterator _iterator[457107])
        }
      }
      { scopeless type
        (457124 'move' _indexOfInterest[457105](457127 call iteratorIndex _iterator[457107]))
      }
      ForLoop[457129]
      {
        unknown i[457132] "index var" "insert auto destroy"
        (475917 'end of statement')
        (457134 'move' i[457132] _indexOfInterest[457105])
        (475918 'end of statement' i[457132])
        unknown yret[511007] "YVV" "temp"
        (511010 'move' yret[511007](511009 'deref' i[457132]))
        (511012 yield yret[511007])
        (475920 'end of statement' i[457132])
        label _continueLabel[457139]
        _indexOfInterest[457105]
        _iterator[457107]
      }
      label _breakLabel[457141]
    }
    (511005 return ret[511003])
  }
  function chpl_direct_range_iter[457523](arg low[457530] :
  (457527 call uint(64)[115] 64), arg high[457536] :
  (457534 call uint(64)[115] 64), arg stride[457542] :
  (457540 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511016] "RVV" "temp"
    {
      unknown _indexOfInterest[457546] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457548] "expr temp" "temp"
      unknown call_tmp[624257] "expr temp" "maybe param" "maybe type" "temp"
      (624260 'move' call_tmp[624257](457555 call chpl_direct_pos_stride_range_iter low[457530] high[457536] stride[457542]))
      (457550 'move' _iterator[457548](457553 call _getIterator call_tmp[624257]))
      Defer
      {
        {
          (457561 call _freeIterator _iterator[457548])
        }
      }
      { scopeless type
        (457565 'move' _indexOfInterest[457546](457568 call iteratorIndex _iterator[457548]))
      }
      ForLoop[457570]
      {
        unknown i[457573] "index var" "insert auto destroy"
        (475923 'end of statement')
        (457575 'move' i[457573] _indexOfInterest[457546])
        (475924 'end of statement' i[457573])
        unknown yret[511020] "YVV" "temp"
        (511023 'move' yret[511020](511022 'deref' i[457573]))
        (511025 yield yret[511020])
        (475926 'end of statement' i[457573])
        label _continueLabel[457580]
        _indexOfInterest[457546]
        _iterator[457548]
      }
      label _breakLabel[457582]
    }
    (511018 return ret[511016])
  }
  function chpl_direct_range_iter[457460](arg low[457467] :
  (457464 call uint(64)[115] 32), arg high[457473] :
  (457471 call uint(64)[115] 32), arg stride[457479] :
  (457477 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511029] "RVV" "temp"
    {
      unknown _indexOfInterest[457483] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457485] "expr temp" "temp"
      unknown call_tmp[624262] "expr temp" "maybe param" "maybe type" "temp"
      (624265 'move' call_tmp[624262](457492 call chpl_direct_pos_stride_range_iter low[457467] high[457473] stride[457479]))
      (457487 'move' _iterator[457485](457490 call _getIterator call_tmp[624262]))
      Defer
      {
        {
          (457498 call _freeIterator _iterator[457485])
        }
      }
      { scopeless type
        (457502 'move' _indexOfInterest[457483](457505 call iteratorIndex _iterator[457485]))
      }
      ForLoop[457507]
      {
        unknown i[457510] "index var" "insert auto destroy"
        (475929 'end of statement')
        (457512 'move' i[457510] _indexOfInterest[457483])
        (475930 'end of statement' i[457510])
        unknown yret[511033] "YVV" "temp"
        (511036 'move' yret[511033](511035 'deref' i[457510]))
        (511038 yield yret[511033])
        (475932 'end of statement' i[457510])
        label _continueLabel[457517]
        _indexOfInterest[457483]
        _iterator[457485]
      }
      label _breakLabel[457519]
    }
    (511031 return ret[511029])
  }
  function chpl_direct_range_iter[457397](arg low[457404] :
  (457401 call uint(64)[115] 16), arg high[457410] :
  (457408 call uint(64)[115] 16), arg stride[457416] :
  (457414 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511042] "RVV" "temp"
    {
      unknown _indexOfInterest[457420] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457422] "expr temp" "temp"
      unknown call_tmp[624267] "expr temp" "maybe param" "maybe type" "temp"
      (624270 'move' call_tmp[624267](457429 call chpl_direct_pos_stride_range_iter low[457404] high[457410] stride[457416]))
      (457424 'move' _iterator[457422](457427 call _getIterator call_tmp[624267]))
      Defer
      {
        {
          (457435 call _freeIterator _iterator[457422])
        }
      }
      { scopeless type
        (457439 'move' _indexOfInterest[457420](457442 call iteratorIndex _iterator[457422]))
      }
      ForLoop[457444]
      {
        unknown i[457447] "index var" "insert auto destroy"
        (475935 'end of statement')
        (457449 'move' i[457447] _indexOfInterest[457420])
        (475936 'end of statement' i[457447])
        unknown yret[511046] "YVV" "temp"
        (511049 'move' yret[511046](511048 'deref' i[457447]))
        (511051 yield yret[511046])
        (475938 'end of statement' i[457447])
        label _continueLabel[457454]
        _indexOfInterest[457420]
        _iterator[457422]
      }
      label _breakLabel[457456]
    }
    (511044 return ret[511042])
  }
  function chpl_direct_range_iter[457334](arg low[457341] :
  (457338 call uint(64)[115] 8), arg high[457347] :
  (457345 call uint(64)[115] 8), arg stride[457353] :
  (457351 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511055] "RVV" "temp"
    {
      unknown _indexOfInterest[457357] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457359] "expr temp" "temp"
      unknown call_tmp[624272] "expr temp" "maybe param" "maybe type" "temp"
      (624275 'move' call_tmp[624272](457366 call chpl_direct_pos_stride_range_iter low[457341] high[457347] stride[457353]))
      (457361 'move' _iterator[457359](457364 call _getIterator call_tmp[624272]))
      Defer
      {
        {
          (457372 call _freeIterator _iterator[457359])
        }
      }
      { scopeless type
        (457376 'move' _indexOfInterest[457357](457379 call iteratorIndex _iterator[457359]))
      }
      ForLoop[457381]
      {
        unknown i[457384] "index var" "insert auto destroy"
        (475941 'end of statement')
        (457386 'move' i[457384] _indexOfInterest[457357])
        (475942 'end of statement' i[457384])
        unknown yret[511059] "YVV" "temp"
        (511062 'move' yret[511059](511061 'deref' i[457384]))
        (511064 yield yret[511059])
        (475944 'end of statement' i[457384])
        label _continueLabel[457391]
        _indexOfInterest[457357]
        _iterator[457359]
      }
      label _breakLabel[457393]
    }
    (511057 return ret[511055])
  }
  function chpl_direct_range_iter[457691](arg low[457698] :
  (457695 call int(64)[13] 64), arg high[457704] :
  (457702 call int(64)[13] 64), arg stride[457706]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511068] "RVV" "temp"
    unknown call_tmp[624277] "expr temp" "maybe param" "maybe type" "temp"
    (624280 'move' call_tmp[624277](457716 call int(64)[13] 64))
    unknown call_tmp[624282] "expr temp" "maybe param" "maybe type" "temp"
    (624285 'move' call_tmp[624282](457713 call _cast string[26] call_tmp[624277]))
    unknown call_tmp[624287] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624290 'move' call_tmp[624287](457722 'typeof' stride[457706]))
    unknown call_tmp[624292] "expr temp" "maybe param" "maybe type" "temp"
    (624295 'move' call_tmp[624292](457720 call _cast string[26] call_tmp[624287]))
    (457710 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624282] " using a step of type " call_tmp[624292])
    (511070 return ret[511068])
  }
  function chpl_direct_range_iter[457656](arg low[457663] :
  (457660 call int(64)[13] 32), arg high[457669] :
  (457667 call int(64)[13] 32), arg stride[457671]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511074] "RVV" "temp"
    unknown call_tmp[624297] "expr temp" "maybe param" "maybe type" "temp"
    (624300 'move' call_tmp[624297](457681 call int(64)[13] 32))
    unknown call_tmp[624302] "expr temp" "maybe param" "maybe type" "temp"
    (624305 'move' call_tmp[624302](457678 call _cast string[26] call_tmp[624297]))
    unknown call_tmp[624307] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624310 'move' call_tmp[624307](457687 'typeof' stride[457671]))
    unknown call_tmp[624312] "expr temp" "maybe param" "maybe type" "temp"
    (624315 'move' call_tmp[624312](457685 call _cast string[26] call_tmp[624307]))
    (457675 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624302] " using a step of type " call_tmp[624312])
    (511076 return ret[511074])
  }
  function chpl_direct_range_iter[457621](arg low[457628] :
  (457625 call int(64)[13] 16), arg high[457634] :
  (457632 call int(64)[13] 16), arg stride[457636]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511080] "RVV" "temp"
    unknown call_tmp[624317] "expr temp" "maybe param" "maybe type" "temp"
    (624320 'move' call_tmp[624317](457646 call int(64)[13] 16))
    unknown call_tmp[624322] "expr temp" "maybe param" "maybe type" "temp"
    (624325 'move' call_tmp[624322](457643 call _cast string[26] call_tmp[624317]))
    unknown call_tmp[624327] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624330 'move' call_tmp[624327](457652 'typeof' stride[457636]))
    unknown call_tmp[624332] "expr temp" "maybe param" "maybe type" "temp"
    (624335 'move' call_tmp[624332](457650 call _cast string[26] call_tmp[624327]))
    (457640 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624322] " using a step of type " call_tmp[624332])
    (511082 return ret[511080])
  }
  function chpl_direct_range_iter[457586](arg low[457593] :
  (457590 call int(64)[13] 8), arg high[457599] :
  (457597 call int(64)[13] 8), arg stride[457601]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511086] "RVV" "temp"
    unknown call_tmp[624337] "expr temp" "maybe param" "maybe type" "temp"
    (624340 'move' call_tmp[624337](457611 call int(64)[13] 8))
    unknown call_tmp[624342] "expr temp" "maybe param" "maybe type" "temp"
    (624345 'move' call_tmp[624342](457608 call _cast string[26] call_tmp[624337]))
    unknown call_tmp[624347] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624350 'move' call_tmp[624347](457617 'typeof' stride[457601]))
    unknown call_tmp[624352] "expr temp" "maybe param" "maybe type" "temp"
    (624355 'move' call_tmp[624352](457615 call _cast string[26] call_tmp[624347]))
    (457605 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624342] " using a step of type " call_tmp[624352])
    (511088 return ret[511086])
  }
  function chpl_direct_range_iter[457831](arg low[457838] :
  (457835 call uint(64)[115] 64), arg high[457844] :
  (457842 call uint(64)[115] 64), arg stride[457846]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511092] "RVV" "temp"
    unknown call_tmp[624357] "expr temp" "maybe param" "maybe type" "temp"
    (624360 'move' call_tmp[624357](457856 call uint(64)[115] 64))
    unknown call_tmp[624362] "expr temp" "maybe param" "maybe type" "temp"
    (624365 'move' call_tmp[624362](457853 call _cast string[26] call_tmp[624357]))
    unknown call_tmp[624367] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624370 'move' call_tmp[624367](457862 'typeof' stride[457846]))
    unknown call_tmp[624372] "expr temp" "maybe param" "maybe type" "temp"
    (624375 'move' call_tmp[624372](457860 call _cast string[26] call_tmp[624367]))
    (457850 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624362] " using a step of type " call_tmp[624372])
    (511094 return ret[511092])
  }
  function chpl_direct_range_iter[457796](arg low[457803] :
  (457800 call uint(64)[115] 32), arg high[457809] :
  (457807 call uint(64)[115] 32), arg stride[457811]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511098] "RVV" "temp"
    unknown call_tmp[624377] "expr temp" "maybe param" "maybe type" "temp"
    (624380 'move' call_tmp[624377](457821 call uint(64)[115] 32))
    unknown call_tmp[624382] "expr temp" "maybe param" "maybe type" "temp"
    (624385 'move' call_tmp[624382](457818 call _cast string[26] call_tmp[624377]))
    unknown call_tmp[624387] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624390 'move' call_tmp[624387](457827 'typeof' stride[457811]))
    unknown call_tmp[624392] "expr temp" "maybe param" "maybe type" "temp"
    (624395 'move' call_tmp[624392](457825 call _cast string[26] call_tmp[624387]))
    (457815 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624382] " using a step of type " call_tmp[624392])
    (511100 return ret[511098])
  }
  function chpl_direct_range_iter[457761](arg low[457768] :
  (457765 call uint(64)[115] 16), arg high[457774] :
  (457772 call uint(64)[115] 16), arg stride[457776]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511104] "RVV" "temp"
    unknown call_tmp[624397] "expr temp" "maybe param" "maybe type" "temp"
    (624400 'move' call_tmp[624397](457786 call uint(64)[115] 16))
    unknown call_tmp[624402] "expr temp" "maybe param" "maybe type" "temp"
    (624405 'move' call_tmp[624402](457783 call _cast string[26] call_tmp[624397]))
    unknown call_tmp[624407] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624410 'move' call_tmp[624407](457792 'typeof' stride[457776]))
    unknown call_tmp[624412] "expr temp" "maybe param" "maybe type" "temp"
    (624415 'move' call_tmp[624412](457790 call _cast string[26] call_tmp[624407]))
    (457780 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624402] " using a step of type " call_tmp[624412])
    (511106 return ret[511104])
  }
  function chpl_direct_range_iter[457726](arg low[457733] :
  (457730 call uint(64)[115] 8), arg high[457739] :
  (457737 call uint(64)[115] 8), arg stride[457741]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511110] "RVV" "temp"
    unknown call_tmp[624417] "expr temp" "maybe param" "maybe type" "temp"
    (624420 'move' call_tmp[624417](457751 call uint(64)[115] 8))
    unknown call_tmp[624422] "expr temp" "maybe param" "maybe type" "temp"
    (624425 'move' call_tmp[624422](457748 call _cast string[26] call_tmp[624417]))
    unknown call_tmp[624427] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624430 'move' call_tmp[624427](457757 'typeof' stride[457741]))
    unknown call_tmp[624432] "expr temp" "maybe param" "maybe type" "temp"
    (624435 'move' call_tmp[624432](457755 call _cast string[26] call_tmp[624427]))
    (457745 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624422] " using a step of type " call_tmp[624432])
    (511112 return ret[511110])
  }
  function chpl_direct_range_iter[74667](arg low[74665]:_any[178](?), arg high[74669]:_any[178](?), arg stride[74671]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511116] "RVV" "temp"
    (74676 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (511118 return ret[511116])
  }
  function chpl_direct_counted_range_iter[458034](arg low[458041] :
  (458038 call int(64)[13] 64), arg count[458047] :
  (458045 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511122] "RVV" "temp"
    {
      unknown _indexOfInterest[458051] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458053] "expr temp" "temp"
      unknown call_tmp[624437] "expr temp" "maybe param" "maybe type" "temp"
      (624440 'move' call_tmp[624437](458060 call chpl_direct_counted_range_iter_helper low[458041] count[458047]))
      (458055 'move' _iterator[458053](458058 call _getIterator call_tmp[624437]))
      Defer
      {
        {
          (458065 call _freeIterator _iterator[458053])
        }
      }
      { scopeless type
        (458069 'move' _indexOfInterest[458051](458072 call iteratorIndex _iterator[458053]))
      }
      ForLoop[458074]
      {
        unknown i[458077] "index var" "insert auto destroy"
        (475956 'end of statement')
        (458079 'move' i[458077] _indexOfInterest[458051])
        (475957 'end of statement' i[458077])
        unknown yret[511126] "YVV" "temp"
        (511129 'move' yret[511126](511128 'deref' i[458077]))
        (511131 yield yret[511126])
        (475959 'end of statement' i[458077])
        label _continueLabel[458084]
        _indexOfInterest[458051]
        _iterator[458053]
      }
      label _breakLabel[458086]
    }
    (511124 return ret[511122])
  }
  function chpl_direct_counted_range_iter[457978](arg low[457985] :
  (457982 call int(64)[13] 32), arg count[457991] :
  (457989 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511135] "RVV" "temp"
    {
      unknown _indexOfInterest[457995] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457997] "expr temp" "temp"
      unknown call_tmp[624442] "expr temp" "maybe param" "maybe type" "temp"
      (624445 'move' call_tmp[624442](458004 call chpl_direct_counted_range_iter_helper low[457985] count[457991]))
      (457999 'move' _iterator[457997](458002 call _getIterator call_tmp[624442]))
      Defer
      {
        {
          (458009 call _freeIterator _iterator[457997])
        }
      }
      { scopeless type
        (458013 'move' _indexOfInterest[457995](458016 call iteratorIndex _iterator[457997]))
      }
      ForLoop[458018]
      {
        unknown i[458021] "index var" "insert auto destroy"
        (475962 'end of statement')
        (458023 'move' i[458021] _indexOfInterest[457995])
        (475963 'end of statement' i[458021])
        unknown yret[511139] "YVV" "temp"
        (511142 'move' yret[511139](511141 'deref' i[458021]))
        (511144 yield yret[511139])
        (475965 'end of statement' i[458021])
        label _continueLabel[458028]
        _indexOfInterest[457995]
        _iterator[457997]
      }
      label _breakLabel[458030]
    }
    (511137 return ret[511135])
  }
  function chpl_direct_counted_range_iter[457922](arg low[457929] :
  (457926 call int(64)[13] 16), arg count[457935] :
  (457933 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511148] "RVV" "temp"
    {
      unknown _indexOfInterest[457939] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457941] "expr temp" "temp"
      unknown call_tmp[624447] "expr temp" "maybe param" "maybe type" "temp"
      (624450 'move' call_tmp[624447](457948 call chpl_direct_counted_range_iter_helper low[457929] count[457935]))
      (457943 'move' _iterator[457941](457946 call _getIterator call_tmp[624447]))
      Defer
      {
        {
          (457953 call _freeIterator _iterator[457941])
        }
      }
      { scopeless type
        (457957 'move' _indexOfInterest[457939](457960 call iteratorIndex _iterator[457941]))
      }
      ForLoop[457962]
      {
        unknown i[457965] "index var" "insert auto destroy"
        (475968 'end of statement')
        (457967 'move' i[457965] _indexOfInterest[457939])
        (475969 'end of statement' i[457965])
        unknown yret[511152] "YVV" "temp"
        (511155 'move' yret[511152](511154 'deref' i[457965]))
        (511157 yield yret[511152])
        (475971 'end of statement' i[457965])
        label _continueLabel[457972]
        _indexOfInterest[457939]
        _iterator[457941]
      }
      label _breakLabel[457974]
    }
    (511150 return ret[511148])
  }
  function chpl_direct_counted_range_iter[457866](arg low[457873] :
  (457870 call int(64)[13] 8), arg count[457879] :
  (457877 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511161] "RVV" "temp"
    {
      unknown _indexOfInterest[457883] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457885] "expr temp" "temp"
      unknown call_tmp[624452] "expr temp" "maybe param" "maybe type" "temp"
      (624455 'move' call_tmp[624452](457892 call chpl_direct_counted_range_iter_helper low[457873] count[457879]))
      (457887 'move' _iterator[457885](457890 call _getIterator call_tmp[624452]))
      Defer
      {
        {
          (457897 call _freeIterator _iterator[457885])
        }
      }
      { scopeless type
        (457901 'move' _indexOfInterest[457883](457904 call iteratorIndex _iterator[457885]))
      }
      ForLoop[457906]
      {
        unknown i[457909] "index var" "insert auto destroy"
        (475974 'end of statement')
        (457911 'move' i[457909] _indexOfInterest[457883])
        (475975 'end of statement' i[457909])
        unknown yret[511165] "YVV" "temp"
        (511168 'move' yret[511165](511167 'deref' i[457909]))
        (511170 yield yret[511165])
        (475977 'end of statement' i[457909])
        label _continueLabel[457916]
        _indexOfInterest[457883]
        _iterator[457885]
      }
      label _breakLabel[457918]
    }
    (511163 return ret[511161])
  }
  function chpl_direct_counted_range_iter[458258](arg low[458265] :
  (458262 call int(64)[13] 64), arg count[458271] :
  (458269 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511174] "RVV" "temp"
    {
      unknown _indexOfInterest[458275] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458277] "expr temp" "temp"
      unknown call_tmp[624457] "expr temp" "maybe param" "maybe type" "temp"
      (624460 'move' call_tmp[624457](458284 call chpl_direct_counted_range_iter_helper low[458265] count[458271]))
      (458279 'move' _iterator[458277](458282 call _getIterator call_tmp[624457]))
      Defer
      {
        {
          (458289 call _freeIterator _iterator[458277])
        }
      }
      { scopeless type
        (458293 'move' _indexOfInterest[458275](458296 call iteratorIndex _iterator[458277]))
      }
      ForLoop[458298]
      {
        unknown i[458301] "index var" "insert auto destroy"
        (475980 'end of statement')
        (458303 'move' i[458301] _indexOfInterest[458275])
        (475981 'end of statement' i[458301])
        unknown yret[511178] "YVV" "temp"
        (511181 'move' yret[511178](511180 'deref' i[458301]))
        (511183 yield yret[511178])
        (475983 'end of statement' i[458301])
        label _continueLabel[458308]
        _indexOfInterest[458275]
        _iterator[458277]
      }
      label _breakLabel[458310]
    }
    (511176 return ret[511174])
  }
  function chpl_direct_counted_range_iter[458202](arg low[458209] :
  (458206 call int(64)[13] 32), arg count[458215] :
  (458213 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511187] "RVV" "temp"
    {
      unknown _indexOfInterest[458219] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458221] "expr temp" "temp"
      unknown call_tmp[624462] "expr temp" "maybe param" "maybe type" "temp"
      (624465 'move' call_tmp[624462](458228 call chpl_direct_counted_range_iter_helper low[458209] count[458215]))
      (458223 'move' _iterator[458221](458226 call _getIterator call_tmp[624462]))
      Defer
      {
        {
          (458233 call _freeIterator _iterator[458221])
        }
      }
      { scopeless type
        (458237 'move' _indexOfInterest[458219](458240 call iteratorIndex _iterator[458221]))
      }
      ForLoop[458242]
      {
        unknown i[458245] "index var" "insert auto destroy"
        (475986 'end of statement')
        (458247 'move' i[458245] _indexOfInterest[458219])
        (475987 'end of statement' i[458245])
        unknown yret[511191] "YVV" "temp"
        (511194 'move' yret[511191](511193 'deref' i[458245]))
        (511196 yield yret[511191])
        (475989 'end of statement' i[458245])
        label _continueLabel[458252]
        _indexOfInterest[458219]
        _iterator[458221]
      }
      label _breakLabel[458254]
    }
    (511189 return ret[511187])
  }
  function chpl_direct_counted_range_iter[458146](arg low[458153] :
  (458150 call int(64)[13] 16), arg count[458159] :
  (458157 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511200] "RVV" "temp"
    {
      unknown _indexOfInterest[458163] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458165] "expr temp" "temp"
      unknown call_tmp[624467] "expr temp" "maybe param" "maybe type" "temp"
      (624470 'move' call_tmp[624467](458172 call chpl_direct_counted_range_iter_helper low[458153] count[458159]))
      (458167 'move' _iterator[458165](458170 call _getIterator call_tmp[624467]))
      Defer
      {
        {
          (458177 call _freeIterator _iterator[458165])
        }
      }
      { scopeless type
        (458181 'move' _indexOfInterest[458163](458184 call iteratorIndex _iterator[458165]))
      }
      ForLoop[458186]
      {
        unknown i[458189] "index var" "insert auto destroy"
        (475992 'end of statement')
        (458191 'move' i[458189] _indexOfInterest[458163])
        (475993 'end of statement' i[458189])
        unknown yret[511204] "YVV" "temp"
        (511207 'move' yret[511204](511206 'deref' i[458189]))
        (511209 yield yret[511204])
        (475995 'end of statement' i[458189])
        label _continueLabel[458196]
        _indexOfInterest[458163]
        _iterator[458165]
      }
      label _breakLabel[458198]
    }
    (511202 return ret[511200])
  }
  function chpl_direct_counted_range_iter[458090](arg low[458097] :
  (458094 call int(64)[13] 8), arg count[458103] :
  (458101 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511213] "RVV" "temp"
    {
      unknown _indexOfInterest[458107] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458109] "expr temp" "temp"
      unknown call_tmp[624472] "expr temp" "maybe param" "maybe type" "temp"
      (624475 'move' call_tmp[624472](458116 call chpl_direct_counted_range_iter_helper low[458097] count[458103]))
      (458111 'move' _iterator[458109](458114 call _getIterator call_tmp[624472]))
      Defer
      {
        {
          (458121 call _freeIterator _iterator[458109])
        }
      }
      { scopeless type
        (458125 'move' _indexOfInterest[458107](458128 call iteratorIndex _iterator[458109]))
      }
      ForLoop[458130]
      {
        unknown i[458133] "index var" "insert auto destroy"
        (475998 'end of statement')
        (458135 'move' i[458133] _indexOfInterest[458107])
        (475999 'end of statement' i[458133])
        unknown yret[511217] "YVV" "temp"
        (511220 'move' yret[511217](511219 'deref' i[458133]))
        (511222 yield yret[511217])
        (476001 'end of statement' i[458133])
        label _continueLabel[458140]
        _indexOfInterest[458107]
        _iterator[458109]
      }
      label _breakLabel[458142]
    }
    (511215 return ret[511213])
  }
  function chpl_direct_counted_range_iter[458482](arg low[458489] :
  (458486 call uint(64)[115] 64), arg count[458495] :
  (458493 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511226] "RVV" "temp"
    {
      unknown _indexOfInterest[458499] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458501] "expr temp" "temp"
      unknown call_tmp[624477] "expr temp" "maybe param" "maybe type" "temp"
      (624480 'move' call_tmp[624477](458508 call chpl_direct_counted_range_iter_helper low[458489] count[458495]))
      (458503 'move' _iterator[458501](458506 call _getIterator call_tmp[624477]))
      Defer
      {
        {
          (458513 call _freeIterator _iterator[458501])
        }
      }
      { scopeless type
        (458517 'move' _indexOfInterest[458499](458520 call iteratorIndex _iterator[458501]))
      }
      ForLoop[458522]
      {
        unknown i[458525] "index var" "insert auto destroy"
        (476004 'end of statement')
        (458527 'move' i[458525] _indexOfInterest[458499])
        (476005 'end of statement' i[458525])
        unknown yret[511230] "YVV" "temp"
        (511233 'move' yret[511230](511232 'deref' i[458525]))
        (511235 yield yret[511230])
        (476007 'end of statement' i[458525])
        label _continueLabel[458532]
        _indexOfInterest[458499]
        _iterator[458501]
      }
      label _breakLabel[458534]
    }
    (511228 return ret[511226])
  }
  function chpl_direct_counted_range_iter[458426](arg low[458433] :
  (458430 call uint(64)[115] 32), arg count[458439] :
  (458437 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511239] "RVV" "temp"
    {
      unknown _indexOfInterest[458443] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458445] "expr temp" "temp"
      unknown call_tmp[624482] "expr temp" "maybe param" "maybe type" "temp"
      (624485 'move' call_tmp[624482](458452 call chpl_direct_counted_range_iter_helper low[458433] count[458439]))
      (458447 'move' _iterator[458445](458450 call _getIterator call_tmp[624482]))
      Defer
      {
        {
          (458457 call _freeIterator _iterator[458445])
        }
      }
      { scopeless type
        (458461 'move' _indexOfInterest[458443](458464 call iteratorIndex _iterator[458445]))
      }
      ForLoop[458466]
      {
        unknown i[458469] "index var" "insert auto destroy"
        (476010 'end of statement')
        (458471 'move' i[458469] _indexOfInterest[458443])
        (476011 'end of statement' i[458469])
        unknown yret[511243] "YVV" "temp"
        (511246 'move' yret[511243](511245 'deref' i[458469]))
        (511248 yield yret[511243])
        (476013 'end of statement' i[458469])
        label _continueLabel[458476]
        _indexOfInterest[458443]
        _iterator[458445]
      }
      label _breakLabel[458478]
    }
    (511241 return ret[511239])
  }
  function chpl_direct_counted_range_iter[458370](arg low[458377] :
  (458374 call uint(64)[115] 16), arg count[458383] :
  (458381 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511252] "RVV" "temp"
    {
      unknown _indexOfInterest[458387] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458389] "expr temp" "temp"
      unknown call_tmp[624487] "expr temp" "maybe param" "maybe type" "temp"
      (624490 'move' call_tmp[624487](458396 call chpl_direct_counted_range_iter_helper low[458377] count[458383]))
      (458391 'move' _iterator[458389](458394 call _getIterator call_tmp[624487]))
      Defer
      {
        {
          (458401 call _freeIterator _iterator[458389])
        }
      }
      { scopeless type
        (458405 'move' _indexOfInterest[458387](458408 call iteratorIndex _iterator[458389]))
      }
      ForLoop[458410]
      {
        unknown i[458413] "index var" "insert auto destroy"
        (476016 'end of statement')
        (458415 'move' i[458413] _indexOfInterest[458387])
        (476017 'end of statement' i[458413])
        unknown yret[511256] "YVV" "temp"
        (511259 'move' yret[511256](511258 'deref' i[458413]))
        (511261 yield yret[511256])
        (476019 'end of statement' i[458413])
        label _continueLabel[458420]
        _indexOfInterest[458387]
        _iterator[458389]
      }
      label _breakLabel[458422]
    }
    (511254 return ret[511252])
  }
  function chpl_direct_counted_range_iter[458314](arg low[458321] :
  (458318 call uint(64)[115] 8), arg count[458327] :
  (458325 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511265] "RVV" "temp"
    {
      unknown _indexOfInterest[458331] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458333] "expr temp" "temp"
      unknown call_tmp[624492] "expr temp" "maybe param" "maybe type" "temp"
      (624495 'move' call_tmp[624492](458340 call chpl_direct_counted_range_iter_helper low[458321] count[458327]))
      (458335 'move' _iterator[458333](458338 call _getIterator call_tmp[624492]))
      Defer
      {
        {
          (458345 call _freeIterator _iterator[458333])
        }
      }
      { scopeless type
        (458349 'move' _indexOfInterest[458331](458352 call iteratorIndex _iterator[458333]))
      }
      ForLoop[458354]
      {
        unknown i[458357] "index var" "insert auto destroy"
        (476022 'end of statement')
        (458359 'move' i[458357] _indexOfInterest[458331])
        (476023 'end of statement' i[458357])
        unknown yret[511269] "YVV" "temp"
        (511272 'move' yret[511269](511271 'deref' i[458357]))
        (511274 yield yret[511269])
        (476025 'end of statement' i[458357])
        label _continueLabel[458364]
        _indexOfInterest[458331]
        _iterator[458333]
      }
      label _breakLabel[458366]
    }
    (511267 return ret[511265])
  }
  function chpl_direct_counted_range_iter[458706](arg low[458713] :
  (458710 call uint(64)[115] 64), arg count[458719] :
  (458717 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511278] "RVV" "temp"
    {
      unknown _indexOfInterest[458723] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458725] "expr temp" "temp"
      unknown call_tmp[624497] "expr temp" "maybe param" "maybe type" "temp"
      (624500 'move' call_tmp[624497](458732 call chpl_direct_counted_range_iter_helper low[458713] count[458719]))
      (458727 'move' _iterator[458725](458730 call _getIterator call_tmp[624497]))
      Defer
      {
        {
          (458737 call _freeIterator _iterator[458725])
        }
      }
      { scopeless type
        (458741 'move' _indexOfInterest[458723](458744 call iteratorIndex _iterator[458725]))
      }
      ForLoop[458746]
      {
        unknown i[458749] "index var" "insert auto destroy"
        (476028 'end of statement')
        (458751 'move' i[458749] _indexOfInterest[458723])
        (476029 'end of statement' i[458749])
        unknown yret[511282] "YVV" "temp"
        (511285 'move' yret[511282](511284 'deref' i[458749]))
        (511287 yield yret[511282])
        (476031 'end of statement' i[458749])
        label _continueLabel[458756]
        _indexOfInterest[458723]
        _iterator[458725]
      }
      label _breakLabel[458758]
    }
    (511280 return ret[511278])
  }
  function chpl_direct_counted_range_iter[458650](arg low[458657] :
  (458654 call uint(64)[115] 32), arg count[458663] :
  (458661 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511291] "RVV" "temp"
    {
      unknown _indexOfInterest[458667] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458669] "expr temp" "temp"
      unknown call_tmp[624502] "expr temp" "maybe param" "maybe type" "temp"
      (624505 'move' call_tmp[624502](458676 call chpl_direct_counted_range_iter_helper low[458657] count[458663]))
      (458671 'move' _iterator[458669](458674 call _getIterator call_tmp[624502]))
      Defer
      {
        {
          (458681 call _freeIterator _iterator[458669])
        }
      }
      { scopeless type
        (458685 'move' _indexOfInterest[458667](458688 call iteratorIndex _iterator[458669]))
      }
      ForLoop[458690]
      {
        unknown i[458693] "index var" "insert auto destroy"
        (476034 'end of statement')
        (458695 'move' i[458693] _indexOfInterest[458667])
        (476035 'end of statement' i[458693])
        unknown yret[511295] "YVV" "temp"
        (511298 'move' yret[511295](511297 'deref' i[458693]))
        (511300 yield yret[511295])
        (476037 'end of statement' i[458693])
        label _continueLabel[458700]
        _indexOfInterest[458667]
        _iterator[458669]
      }
      label _breakLabel[458702]
    }
    (511293 return ret[511291])
  }
  function chpl_direct_counted_range_iter[458594](arg low[458601] :
  (458598 call uint(64)[115] 16), arg count[458607] :
  (458605 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511304] "RVV" "temp"
    {
      unknown _indexOfInterest[458611] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458613] "expr temp" "temp"
      unknown call_tmp[624507] "expr temp" "maybe param" "maybe type" "temp"
      (624510 'move' call_tmp[624507](458620 call chpl_direct_counted_range_iter_helper low[458601] count[458607]))
      (458615 'move' _iterator[458613](458618 call _getIterator call_tmp[624507]))
      Defer
      {
        {
          (458625 call _freeIterator _iterator[458613])
        }
      }
      { scopeless type
        (458629 'move' _indexOfInterest[458611](458632 call iteratorIndex _iterator[458613]))
      }
      ForLoop[458634]
      {
        unknown i[458637] "index var" "insert auto destroy"
        (476040 'end of statement')
        (458639 'move' i[458637] _indexOfInterest[458611])
        (476041 'end of statement' i[458637])
        unknown yret[511308] "YVV" "temp"
        (511311 'move' yret[511308](511310 'deref' i[458637]))
        (511313 yield yret[511308])
        (476043 'end of statement' i[458637])
        label _continueLabel[458644]
        _indexOfInterest[458611]
        _iterator[458613]
      }
      label _breakLabel[458646]
    }
    (511306 return ret[511304])
  }
  function chpl_direct_counted_range_iter[458538](arg low[458545] :
  (458542 call uint(64)[115] 8), arg count[458551] :
  (458549 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511317] "RVV" "temp"
    {
      unknown _indexOfInterest[458555] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458557] "expr temp" "temp"
      unknown call_tmp[624512] "expr temp" "maybe param" "maybe type" "temp"
      (624515 'move' call_tmp[624512](458564 call chpl_direct_counted_range_iter_helper low[458545] count[458551]))
      (458559 'move' _iterator[458557](458562 call _getIterator call_tmp[624512]))
      Defer
      {
        {
          (458569 call _freeIterator _iterator[458557])
        }
      }
      { scopeless type
        (458573 'move' _indexOfInterest[458555](458576 call iteratorIndex _iterator[458557]))
      }
      ForLoop[458578]
      {
        unknown i[458581] "index var" "insert auto destroy"
        (476046 'end of statement')
        (458583 'move' i[458581] _indexOfInterest[458555])
        (476047 'end of statement' i[458581])
        unknown yret[511321] "YVV" "temp"
        (511324 'move' yret[511321](511323 'deref' i[458581]))
        (511326 yield yret[511321])
        (476049 'end of statement' i[458581])
        label _continueLabel[458588]
        _indexOfInterest[458555]
        _iterator[458557]
      }
      label _breakLabel[458590]
    }
    (511319 return ret[511317])
  }
  function chpl_direct_counted_range_iter[458942](arg low[458946]:enum[187](?), arg count[458953] :
  (458950 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511330] "RVV" "temp"
    unknown call_tmp[624517] "maybe param" "maybe type" "temp"
    (624520 'move' call_tmp[624517](458958 call chpl_build_low_bounded_range low[458946]))
    const r[458956] "dead at end of block" "const" "insert auto destroy"
    (541259 'init var' r[458956] call_tmp[624517])
    (458961 'end of statement')
    {
      unknown _indexOfInterest[458963] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458965] "expr temp" "temp"
      unknown call_tmp[624522] "expr temp" "maybe param" "maybe type" "temp"
      (624525 'move' call_tmp[624522](458972 call # r[458956] count[458953]))
      (458967 'move' _iterator[458965](458970 call _getIterator call_tmp[624522]))
      Defer
      {
        {
          (458977 call _freeIterator _iterator[458965])
        }
      }
      { scopeless type
        (458981 'move' _indexOfInterest[458963](458984 call iteratorIndex _iterator[458965]))
      }
      ForLoop[458986]
      {
        unknown i[458989] "index var" "insert auto destroy"
        (476052 'end of statement')
        (458991 'move' i[458989] _indexOfInterest[458963])
        (476053 'end of statement' i[458989])
        unknown yret[511334] "YVV" "temp"
        (511337 'move' yret[511334](511336 'deref' i[458989]))
        (511339 yield yret[511334])
        (476055 'end of statement' i[458989])
        label _continueLabel[458996]
        _indexOfInterest[458963]
        _iterator[458965]
      }
      label _breakLabel[458998]
    }
    (511332 return ret[511330])
  }
  function chpl_direct_counted_range_iter[458882](arg low[458886]:enum[187](?), arg count[458893] :
  (458890 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511343] "RVV" "temp"
    unknown call_tmp[624527] "maybe param" "maybe type" "temp"
    (624530 'move' call_tmp[624527](458898 call chpl_build_low_bounded_range low[458886]))
    const r[458896] "dead at end of block" "const" "insert auto destroy"
    (541261 'init var' r[458896] call_tmp[624527])
    (458901 'end of statement')
    {
      unknown _indexOfInterest[458903] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458905] "expr temp" "temp"
      unknown call_tmp[624532] "expr temp" "maybe param" "maybe type" "temp"
      (624535 'move' call_tmp[624532](458912 call # r[458896] count[458893]))
      (458907 'move' _iterator[458905](458910 call _getIterator call_tmp[624532]))
      Defer
      {
        {
          (458917 call _freeIterator _iterator[458905])
        }
      }
      { scopeless type
        (458921 'move' _indexOfInterest[458903](458924 call iteratorIndex _iterator[458905]))
      }
      ForLoop[458926]
      {
        unknown i[458929] "index var" "insert auto destroy"
        (476058 'end of statement')
        (458931 'move' i[458929] _indexOfInterest[458903])
        (476059 'end of statement' i[458929])
        unknown yret[511347] "YVV" "temp"
        (511350 'move' yret[511347](511349 'deref' i[458929]))
        (511352 yield yret[511347])
        (476061 'end of statement' i[458929])
        label _continueLabel[458936]
        _indexOfInterest[458903]
        _iterator[458905]
      }
      label _breakLabel[458938]
    }
    (511345 return ret[511343])
  }
  function chpl_direct_counted_range_iter[458822](arg low[458826]:enum[187](?), arg count[458833] :
  (458830 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511356] "RVV" "temp"
    unknown call_tmp[624537] "maybe param" "maybe type" "temp"
    (624540 'move' call_tmp[624537](458838 call chpl_build_low_bounded_range low[458826]))
    const r[458836] "dead at end of block" "const" "insert auto destroy"
    (541263 'init var' r[458836] call_tmp[624537])
    (458841 'end of statement')
    {
      unknown _indexOfInterest[458843] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458845] "expr temp" "temp"
      unknown call_tmp[624542] "expr temp" "maybe param" "maybe type" "temp"
      (624545 'move' call_tmp[624542](458852 call # r[458836] count[458833]))
      (458847 'move' _iterator[458845](458850 call _getIterator call_tmp[624542]))
      Defer
      {
        {
          (458857 call _freeIterator _iterator[458845])
        }
      }
      { scopeless type
        (458861 'move' _indexOfInterest[458843](458864 call iteratorIndex _iterator[458845]))
      }
      ForLoop[458866]
      {
        unknown i[458869] "index var" "insert auto destroy"
        (476064 'end of statement')
        (458871 'move' i[458869] _indexOfInterest[458843])
        (476065 'end of statement' i[458869])
        unknown yret[511360] "YVV" "temp"
        (511363 'move' yret[511360](511362 'deref' i[458869]))
        (511365 yield yret[511360])
        (476067 'end of statement' i[458869])
        label _continueLabel[458876]
        _indexOfInterest[458843]
        _iterator[458845]
      }
      label _breakLabel[458878]
    }
    (511358 return ret[511356])
  }
  function chpl_direct_counted_range_iter[458762](arg low[458766]:enum[187](?), arg count[458773] :
  (458770 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511369] "RVV" "temp"
    unknown call_tmp[624547] "maybe param" "maybe type" "temp"
    (624550 'move' call_tmp[624547](458778 call chpl_build_low_bounded_range low[458766]))
    const r[458776] "dead at end of block" "const" "insert auto destroy"
    (541265 'init var' r[458776] call_tmp[624547])
    (458781 'end of statement')
    {
      unknown _indexOfInterest[458783] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458785] "expr temp" "temp"
      unknown call_tmp[624552] "expr temp" "maybe param" "maybe type" "temp"
      (624555 'move' call_tmp[624552](458792 call # r[458776] count[458773]))
      (458787 'move' _iterator[458785](458790 call _getIterator call_tmp[624552]))
      Defer
      {
        {
          (458797 call _freeIterator _iterator[458785])
        }
      }
      { scopeless type
        (458801 'move' _indexOfInterest[458783](458804 call iteratorIndex _iterator[458785]))
      }
      ForLoop[458806]
      {
        unknown i[458809] "index var" "insert auto destroy"
        (476070 'end of statement')
        (458811 'move' i[458809] _indexOfInterest[458783])
        (476071 'end of statement' i[458809])
        unknown yret[511373] "YVV" "temp"
        (511376 'move' yret[511373](511375 'deref' i[458809]))
        (511378 yield yret[511373])
        (476073 'end of statement' i[458809])
        label _continueLabel[458816]
        _indexOfInterest[458783]
        _iterator[458785]
      }
      label _breakLabel[458818]
    }
    (511371 return ret[511369])
  }
  function chpl_direct_counted_range_iter[459182](arg low[459186]:enum[187](?), arg count[459193] :
  (459190 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511382] "RVV" "temp"
    unknown call_tmp[624557] "maybe param" "maybe type" "temp"
    (624560 'move' call_tmp[624557](459198 call chpl_build_low_bounded_range low[459186]))
    const r[459196] "dead at end of block" "const" "insert auto destroy"
    (541267 'init var' r[459196] call_tmp[624557])
    (459201 'end of statement')
    {
      unknown _indexOfInterest[459203] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459205] "expr temp" "temp"
      unknown call_tmp[624562] "expr temp" "maybe param" "maybe type" "temp"
      (624565 'move' call_tmp[624562](459212 call # r[459196] count[459193]))
      (459207 'move' _iterator[459205](459210 call _getIterator call_tmp[624562]))
      Defer
      {
        {
          (459217 call _freeIterator _iterator[459205])
        }
      }
      { scopeless type
        (459221 'move' _indexOfInterest[459203](459224 call iteratorIndex _iterator[459205]))
      }
      ForLoop[459226]
      {
        unknown i[459229] "index var" "insert auto destroy"
        (476076 'end of statement')
        (459231 'move' i[459229] _indexOfInterest[459203])
        (476077 'end of statement' i[459229])
        unknown yret[511386] "YVV" "temp"
        (511389 'move' yret[511386](511388 'deref' i[459229]))
        (511391 yield yret[511386])
        (476079 'end of statement' i[459229])
        label _continueLabel[459236]
        _indexOfInterest[459203]
        _iterator[459205]
      }
      label _breakLabel[459238]
    }
    (511384 return ret[511382])
  }
  function chpl_direct_counted_range_iter[459122](arg low[459126]:enum[187](?), arg count[459133] :
  (459130 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511395] "RVV" "temp"
    unknown call_tmp[624567] "maybe param" "maybe type" "temp"
    (624570 'move' call_tmp[624567](459138 call chpl_build_low_bounded_range low[459126]))
    const r[459136] "dead at end of block" "const" "insert auto destroy"
    (541269 'init var' r[459136] call_tmp[624567])
    (459141 'end of statement')
    {
      unknown _indexOfInterest[459143] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459145] "expr temp" "temp"
      unknown call_tmp[624572] "expr temp" "maybe param" "maybe type" "temp"
      (624575 'move' call_tmp[624572](459152 call # r[459136] count[459133]))
      (459147 'move' _iterator[459145](459150 call _getIterator call_tmp[624572]))
      Defer
      {
        {
          (459157 call _freeIterator _iterator[459145])
        }
      }
      { scopeless type
        (459161 'move' _indexOfInterest[459143](459164 call iteratorIndex _iterator[459145]))
      }
      ForLoop[459166]
      {
        unknown i[459169] "index var" "insert auto destroy"
        (476082 'end of statement')
        (459171 'move' i[459169] _indexOfInterest[459143])
        (476083 'end of statement' i[459169])
        unknown yret[511399] "YVV" "temp"
        (511402 'move' yret[511399](511401 'deref' i[459169]))
        (511404 yield yret[511399])
        (476085 'end of statement' i[459169])
        label _continueLabel[459176]
        _indexOfInterest[459143]
        _iterator[459145]
      }
      label _breakLabel[459178]
    }
    (511397 return ret[511395])
  }
  function chpl_direct_counted_range_iter[459062](arg low[459066]:enum[187](?), arg count[459073] :
  (459070 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511408] "RVV" "temp"
    unknown call_tmp[624577] "maybe param" "maybe type" "temp"
    (624580 'move' call_tmp[624577](459078 call chpl_build_low_bounded_range low[459066]))
    const r[459076] "dead at end of block" "const" "insert auto destroy"
    (541271 'init var' r[459076] call_tmp[624577])
    (459081 'end of statement')
    {
      unknown _indexOfInterest[459083] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459085] "expr temp" "temp"
      unknown call_tmp[624582] "expr temp" "maybe param" "maybe type" "temp"
      (624585 'move' call_tmp[624582](459092 call # r[459076] count[459073]))
      (459087 'move' _iterator[459085](459090 call _getIterator call_tmp[624582]))
      Defer
      {
        {
          (459097 call _freeIterator _iterator[459085])
        }
      }
      { scopeless type
        (459101 'move' _indexOfInterest[459083](459104 call iteratorIndex _iterator[459085]))
      }
      ForLoop[459106]
      {
        unknown i[459109] "index var" "insert auto destroy"
        (476088 'end of statement')
        (459111 'move' i[459109] _indexOfInterest[459083])
        (476089 'end of statement' i[459109])
        unknown yret[511412] "YVV" "temp"
        (511415 'move' yret[511412](511414 'deref' i[459109]))
        (511417 yield yret[511412])
        (476091 'end of statement' i[459109])
        label _continueLabel[459116]
        _indexOfInterest[459083]
        _iterator[459085]
      }
      label _breakLabel[459118]
    }
    (511410 return ret[511408])
  }
  function chpl_direct_counted_range_iter[459002](arg low[459006]:enum[187](?), arg count[459013] :
  (459010 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511421] "RVV" "temp"
    unknown call_tmp[624587] "maybe param" "maybe type" "temp"
    (624590 'move' call_tmp[624587](459018 call chpl_build_low_bounded_range low[459006]))
    const r[459016] "dead at end of block" "const" "insert auto destroy"
    (541273 'init var' r[459016] call_tmp[624587])
    (459021 'end of statement')
    {
      unknown _indexOfInterest[459023] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459025] "expr temp" "temp"
      unknown call_tmp[624592] "expr temp" "maybe param" "maybe type" "temp"
      (624595 'move' call_tmp[624592](459032 call # r[459016] count[459013]))
      (459027 'move' _iterator[459025](459030 call _getIterator call_tmp[624592]))
      Defer
      {
        {
          (459037 call _freeIterator _iterator[459025])
        }
      }
      { scopeless type
        (459041 'move' _indexOfInterest[459023](459044 call iteratorIndex _iterator[459025]))
      }
      ForLoop[459046]
      {
        unknown i[459049] "index var" "insert auto destroy"
        (476094 'end of statement')
        (459051 'move' i[459049] _indexOfInterest[459023])
        (476095 'end of statement' i[459049])
        unknown yret[511425] "YVV" "temp"
        (511428 'move' yret[511425](511427 'deref' i[459049]))
        (511430 yield yret[511425])
        (476097 'end of statement' i[459049])
        label _continueLabel[459056]
        _indexOfInterest[459023]
        _iterator[459025]
      }
      label _breakLabel[459058]
    }
    (511423 return ret[511421])
  }
  function chpl_direct_counted_range_iter[459422](arg low[459426]:bool[10], arg count[459433] :
  (459430 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511434] "RVV" "temp"
    unknown call_tmp[624597] "maybe param" "maybe type" "temp"
    (624600 'move' call_tmp[624597](459438 call chpl_build_low_bounded_range low[459426]))
    const r[459436] "dead at end of block" "const" "insert auto destroy"
    (541275 'init var' r[459436] call_tmp[624597])
    (459441 'end of statement')
    {
      unknown _indexOfInterest[459443] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459445] "expr temp" "temp"
      unknown call_tmp[624602] "expr temp" "maybe param" "maybe type" "temp"
      (624605 'move' call_tmp[624602](459452 call # r[459436] count[459433]))
      (459447 'move' _iterator[459445](459450 call _getIterator call_tmp[624602]))
      Defer
      {
        {
          (459457 call _freeIterator _iterator[459445])
        }
      }
      { scopeless type
        (459461 'move' _indexOfInterest[459443](459464 call iteratorIndex _iterator[459445]))
      }
      ForLoop[459466]
      {
        unknown i[459469] "index var" "insert auto destroy"
        (476100 'end of statement')
        (459471 'move' i[459469] _indexOfInterest[459443])
        (476101 'end of statement' i[459469])
        unknown yret[511438] "YVV" "temp"
        (511441 'move' yret[511438](511440 'deref' i[459469]))
        (511443 yield yret[511438])
        (476103 'end of statement' i[459469])
        label _continueLabel[459476]
        _indexOfInterest[459443]
        _iterator[459445]
      }
      label _breakLabel[459478]
    }
    (511436 return ret[511434])
  }
  function chpl_direct_counted_range_iter[459362](arg low[459366]:bool[10], arg count[459373] :
  (459370 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511447] "RVV" "temp"
    unknown call_tmp[624607] "maybe param" "maybe type" "temp"
    (624610 'move' call_tmp[624607](459378 call chpl_build_low_bounded_range low[459366]))
    const r[459376] "dead at end of block" "const" "insert auto destroy"
    (541277 'init var' r[459376] call_tmp[624607])
    (459381 'end of statement')
    {
      unknown _indexOfInterest[459383] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459385] "expr temp" "temp"
      unknown call_tmp[624612] "expr temp" "maybe param" "maybe type" "temp"
      (624615 'move' call_tmp[624612](459392 call # r[459376] count[459373]))
      (459387 'move' _iterator[459385](459390 call _getIterator call_tmp[624612]))
      Defer
      {
        {
          (459397 call _freeIterator _iterator[459385])
        }
      }
      { scopeless type
        (459401 'move' _indexOfInterest[459383](459404 call iteratorIndex _iterator[459385]))
      }
      ForLoop[459406]
      {
        unknown i[459409] "index var" "insert auto destroy"
        (476106 'end of statement')
        (459411 'move' i[459409] _indexOfInterest[459383])
        (476107 'end of statement' i[459409])
        unknown yret[511451] "YVV" "temp"
        (511454 'move' yret[511451](511453 'deref' i[459409]))
        (511456 yield yret[511451])
        (476109 'end of statement' i[459409])
        label _continueLabel[459416]
        _indexOfInterest[459383]
        _iterator[459385]
      }
      label _breakLabel[459418]
    }
    (511449 return ret[511447])
  }
  function chpl_direct_counted_range_iter[459302](arg low[459306]:bool[10], arg count[459313] :
  (459310 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511460] "RVV" "temp"
    unknown call_tmp[624617] "maybe param" "maybe type" "temp"
    (624620 'move' call_tmp[624617](459318 call chpl_build_low_bounded_range low[459306]))
    const r[459316] "dead at end of block" "const" "insert auto destroy"
    (541279 'init var' r[459316] call_tmp[624617])
    (459321 'end of statement')
    {
      unknown _indexOfInterest[459323] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459325] "expr temp" "temp"
      unknown call_tmp[624622] "expr temp" "maybe param" "maybe type" "temp"
      (624625 'move' call_tmp[624622](459332 call # r[459316] count[459313]))
      (459327 'move' _iterator[459325](459330 call _getIterator call_tmp[624622]))
      Defer
      {
        {
          (459337 call _freeIterator _iterator[459325])
        }
      }
      { scopeless type
        (459341 'move' _indexOfInterest[459323](459344 call iteratorIndex _iterator[459325]))
      }
      ForLoop[459346]
      {
        unknown i[459349] "index var" "insert auto destroy"
        (476112 'end of statement')
        (459351 'move' i[459349] _indexOfInterest[459323])
        (476113 'end of statement' i[459349])
        unknown yret[511464] "YVV" "temp"
        (511467 'move' yret[511464](511466 'deref' i[459349]))
        (511469 yield yret[511464])
        (476115 'end of statement' i[459349])
        label _continueLabel[459356]
        _indexOfInterest[459323]
        _iterator[459325]
      }
      label _breakLabel[459358]
    }
    (511462 return ret[511460])
  }
  function chpl_direct_counted_range_iter[459242](arg low[459246]:bool[10], arg count[459253] :
  (459250 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511473] "RVV" "temp"
    unknown call_tmp[624627] "maybe param" "maybe type" "temp"
    (624630 'move' call_tmp[624627](459258 call chpl_build_low_bounded_range low[459246]))
    const r[459256] "dead at end of block" "const" "insert auto destroy"
    (541281 'init var' r[459256] call_tmp[624627])
    (459261 'end of statement')
    {
      unknown _indexOfInterest[459263] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459265] "expr temp" "temp"
      unknown call_tmp[624632] "expr temp" "maybe param" "maybe type" "temp"
      (624635 'move' call_tmp[624632](459272 call # r[459256] count[459253]))
      (459267 'move' _iterator[459265](459270 call _getIterator call_tmp[624632]))
      Defer
      {
        {
          (459277 call _freeIterator _iterator[459265])
        }
      }
      { scopeless type
        (459281 'move' _indexOfInterest[459263](459284 call iteratorIndex _iterator[459265]))
      }
      ForLoop[459286]
      {
        unknown i[459289] "index var" "insert auto destroy"
        (476118 'end of statement')
        (459291 'move' i[459289] _indexOfInterest[459263])
        (476119 'end of statement' i[459289])
        unknown yret[511477] "YVV" "temp"
        (511480 'move' yret[511477](511479 'deref' i[459289]))
        (511482 yield yret[511477])
        (476121 'end of statement' i[459289])
        label _continueLabel[459296]
        _indexOfInterest[459263]
        _iterator[459265]
      }
      label _breakLabel[459298]
    }
    (511475 return ret[511473])
  }
  function chpl_direct_counted_range_iter[459662](arg low[459666]:bool[10], arg count[459673] :
  (459670 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511486] "RVV" "temp"
    unknown call_tmp[624637] "maybe param" "maybe type" "temp"
    (624640 'move' call_tmp[624637](459678 call chpl_build_low_bounded_range low[459666]))
    const r[459676] "dead at end of block" "const" "insert auto destroy"
    (541283 'init var' r[459676] call_tmp[624637])
    (459681 'end of statement')
    {
      unknown _indexOfInterest[459683] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459685] "expr temp" "temp"
      unknown call_tmp[624642] "expr temp" "maybe param" "maybe type" "temp"
      (624645 'move' call_tmp[624642](459692 call # r[459676] count[459673]))
      (459687 'move' _iterator[459685](459690 call _getIterator call_tmp[624642]))
      Defer
      {
        {
          (459697 call _freeIterator _iterator[459685])
        }
      }
      { scopeless type
        (459701 'move' _indexOfInterest[459683](459704 call iteratorIndex _iterator[459685]))
      }
      ForLoop[459706]
      {
        unknown i[459709] "index var" "insert auto destroy"
        (476124 'end of statement')
        (459711 'move' i[459709] _indexOfInterest[459683])
        (476125 'end of statement' i[459709])
        unknown yret[511490] "YVV" "temp"
        (511493 'move' yret[511490](511492 'deref' i[459709]))
        (511495 yield yret[511490])
        (476127 'end of statement' i[459709])
        label _continueLabel[459716]
        _indexOfInterest[459683]
        _iterator[459685]
      }
      label _breakLabel[459718]
    }
    (511488 return ret[511486])
  }
  function chpl_direct_counted_range_iter[459602](arg low[459606]:bool[10], arg count[459613] :
  (459610 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511499] "RVV" "temp"
    unknown call_tmp[624647] "maybe param" "maybe type" "temp"
    (624650 'move' call_tmp[624647](459618 call chpl_build_low_bounded_range low[459606]))
    const r[459616] "dead at end of block" "const" "insert auto destroy"
    (541285 'init var' r[459616] call_tmp[624647])
    (459621 'end of statement')
    {
      unknown _indexOfInterest[459623] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459625] "expr temp" "temp"
      unknown call_tmp[624652] "expr temp" "maybe param" "maybe type" "temp"
      (624655 'move' call_tmp[624652](459632 call # r[459616] count[459613]))
      (459627 'move' _iterator[459625](459630 call _getIterator call_tmp[624652]))
      Defer
      {
        {
          (459637 call _freeIterator _iterator[459625])
        }
      }
      { scopeless type
        (459641 'move' _indexOfInterest[459623](459644 call iteratorIndex _iterator[459625]))
      }
      ForLoop[459646]
      {
        unknown i[459649] "index var" "insert auto destroy"
        (476130 'end of statement')
        (459651 'move' i[459649] _indexOfInterest[459623])
        (476131 'end of statement' i[459649])
        unknown yret[511503] "YVV" "temp"
        (511506 'move' yret[511503](511505 'deref' i[459649]))
        (511508 yield yret[511503])
        (476133 'end of statement' i[459649])
        label _continueLabel[459656]
        _indexOfInterest[459623]
        _iterator[459625]
      }
      label _breakLabel[459658]
    }
    (511501 return ret[511499])
  }
  function chpl_direct_counted_range_iter[459542](arg low[459546]:bool[10], arg count[459553] :
  (459550 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511512] "RVV" "temp"
    unknown call_tmp[624657] "maybe param" "maybe type" "temp"
    (624660 'move' call_tmp[624657](459558 call chpl_build_low_bounded_range low[459546]))
    const r[459556] "dead at end of block" "const" "insert auto destroy"
    (541287 'init var' r[459556] call_tmp[624657])
    (459561 'end of statement')
    {
      unknown _indexOfInterest[459563] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459565] "expr temp" "temp"
      unknown call_tmp[624662] "expr temp" "maybe param" "maybe type" "temp"
      (624665 'move' call_tmp[624662](459572 call # r[459556] count[459553]))
      (459567 'move' _iterator[459565](459570 call _getIterator call_tmp[624662]))
      Defer
      {
        {
          (459577 call _freeIterator _iterator[459565])
        }
      }
      { scopeless type
        (459581 'move' _indexOfInterest[459563](459584 call iteratorIndex _iterator[459565]))
      }
      ForLoop[459586]
      {
        unknown i[459589] "index var" "insert auto destroy"
        (476136 'end of statement')
        (459591 'move' i[459589] _indexOfInterest[459563])
        (476137 'end of statement' i[459589])
        unknown yret[511516] "YVV" "temp"
        (511519 'move' yret[511516](511518 'deref' i[459589]))
        (511521 yield yret[511516])
        (476139 'end of statement' i[459589])
        label _continueLabel[459596]
        _indexOfInterest[459563]
        _iterator[459565]
      }
      label _breakLabel[459598]
    }
    (511514 return ret[511512])
  }
  function chpl_direct_counted_range_iter[459482](arg low[459486]:bool[10], arg count[459493] :
  (459490 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511525] "RVV" "temp"
    unknown call_tmp[624667] "maybe param" "maybe type" "temp"
    (624670 'move' call_tmp[624667](459498 call chpl_build_low_bounded_range low[459486]))
    const r[459496] "dead at end of block" "const" "insert auto destroy"
    (541289 'init var' r[459496] call_tmp[624667])
    (459501 'end of statement')
    {
      unknown _indexOfInterest[459503] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459505] "expr temp" "temp"
      unknown call_tmp[624672] "expr temp" "maybe param" "maybe type" "temp"
      (624675 'move' call_tmp[624672](459512 call # r[459496] count[459493]))
      (459507 'move' _iterator[459505](459510 call _getIterator call_tmp[624672]))
      Defer
      {
        {
          (459517 call _freeIterator _iterator[459505])
        }
      }
      { scopeless type
        (459521 'move' _indexOfInterest[459503](459524 call iteratorIndex _iterator[459505]))
      }
      ForLoop[459526]
      {
        unknown i[459529] "index var" "insert auto destroy"
        (476142 'end of statement')
        (459531 'move' i[459529] _indexOfInterest[459503])
        (476143 'end of statement' i[459529])
        unknown yret[511529] "YVV" "temp"
        (511532 'move' yret[511529](511531 'deref' i[459529]))
        (511534 yield yret[511529])
        (476145 'end of statement' i[459529])
        label _continueLabel[459536]
        _indexOfInterest[459503]
        _iterator[459505]
      }
      label _breakLabel[459538]
    }
    (511527 return ret[511525])
  }
  function chpl_direct_counted_range_iter[75223](arg low[75220]:integral[199](?), arg count[75225]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511538] "RVV" "temp"
    unknown call_tmp[624677] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624680 'move' call_tmp[624677](75231 'typeof' low[75220]))
    unknown call_tmp[624682] "expr temp" "maybe param" "maybe type" "temp"
    (624685 'move' call_tmp[624682](75233 call _cast string[26] call_tmp[624677]))
    unknown call_tmp[624687] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624690 'move' call_tmp[624687](75237 'typeof' count[75225]))
    unknown call_tmp[624692] "expr temp" "maybe param" "maybe type" "temp"
    (624695 'move' call_tmp[624692](75239 call _cast string[26] call_tmp[624687]))
    (75241 call compilerError "can't apply '#' to a range with idxType " call_tmp[624682] " using a count of type " call_tmp[624692])
    (511540 return ret[511538])
  }
  function chpl_direct_counted_range_iter[75250](arg low[75248]:_any[178](?), arg count[75252]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511544] "RVV" "temp"
    (75257 call compilerError "Bound of 'low..' must be an integer")
    (511546 return ret[511544])
  }
  function chpl_direct_counted_range_iter_helper[75266](arg low[75264]:_any[178](?), arg count[75268]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511550] "RVV" "temp"
    unknown tmp[420680] "maybe param" "temp"
    unknown tmp[420701] "maybe param" "temp"
    (420712 'move' tmp[420701] 1)
    unknown call_tmp[624697] "expr temp" "maybe param" "maybe type" "temp"
    (624700 'move' call_tmp[624697](420714 call _cond_invalid tmp[420701]))
    if call_tmp[624697]
    {
      (420717 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558296] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558297] "maybe param" "temp"
    unknown call_tmp[624702] "expr temp" "maybe param" "maybe type" "temp"
    (624705 'move' call_tmp[624702](420702 call isTrue tmp[420701]))
    (558302 'move' tmp[558297](558300 call _cond_test call_tmp[624702]))
    if tmp[558297]
    {
      unknown tmp[558304] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624707] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624710 'move' call_tmp[624707](75273 'typeof' count[75268]))
      unknown call_tmp[624712] "expr temp" "maybe param" "maybe type" "temp"
      (624715 'move' call_tmp[624712](75275 call isIntType call_tmp[624707]))
      (558306 'move' tmp[558304](420705 call isTrue call_tmp[624712]))
      (558311 'move' tmp[558296](558308 '_paramFoldLogical' tmp[558297] tmp[558304]))
    }
    {
      (558316 'move' tmp[558296](558313 '_paramFoldLogical' tmp[558297] 0))
    }
    (420691 'move' tmp[420680] tmp[558296])
    unknown call_tmp[624717] "expr temp" "maybe param" "maybe type" "temp"
    (624720 'move' call_tmp[624717](420693 call _cond_invalid tmp[420680]))
    if call_tmp[624717]
    {
      (420696 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558323] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558324] "maybe param" "temp"
    unknown call_tmp[624722] "expr temp" "maybe param" "maybe type" "temp"
    (624725 'move' call_tmp[624722](420681 call isTrue tmp[420680]))
    (558329 'move' tmp[558324](558327 call _cond_test call_tmp[624722]))
    if tmp[558324]
    {
      unknown tmp[558331] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624727] "expr temp" "maybe param" "maybe type" "temp"
      (624730 'move' call_tmp[624727](75280 call < count[75268] 0))
      (558333 'move' tmp[558331](420684 call isTrue call_tmp[624727]))
      (558338 'move' tmp[558323](558335 '_paramFoldLogical' tmp[558324] tmp[558331]))
    }
    {
      (558343 'move' tmp[558323](558340 '_paramFoldLogical' tmp[558324] 0))
    }
    unknown call_tmp[624732] "expr temp" "maybe param" "maybe type" "temp"
    (624735 'move' call_tmp[624732](75292 call _cond_test tmp[558323]))
    if call_tmp[624732]
    {
      (75290 call boundsCheckHalt module=[255] HaltWrappers[210016] "With a negative count, the range must have a last index.")
      (357995 'referenced modules list' HaltWrappers[210016])
    }
    const tmp[75340] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[558350] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558351] "maybe param" "temp"
    unknown call_tmp[624737] "expr temp" "maybe param" "maybe type" "temp"
    (624740 'move' call_tmp[624737](75305 call == count[75268] 0))
    (558356 'move' tmp[558351](558354 call _cond_test call_tmp[624737]))
    if tmp[558351]
    {
      unknown tmp[558358] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624742] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624745 'move' call_tmp[624742](75316 'typeof' low[75264]))
      unknown call_tmp[624747] "expr temp" "maybe param" "maybe type" "temp"
      (624750 'move' call_tmp[624747](75310 call _cast uint(64)[115] low[75264]))
      unknown call_tmp[624752] "expr temp" "maybe param" "maybe type" "temp"
      (624755 'move' call_tmp[624752](75313 call - call_tmp[624747] 1))
      unknown call_tmp[624757] "expr temp" "maybe param" "maybe type" "temp"
      (624760 'move' call_tmp[624757](75317 call _cast call_tmp[624742] call_tmp[624752]))
      (558360 'move' tmp[558358](75320 call _build_tuple low[75264] call_tmp[624757]))
      (558365 'move' tmp[558350](558362 '_paramFoldLogical' tmp[558351] tmp[558358]))
    }
    {
      unknown tmp[558367] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624762] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624765 'move' call_tmp[624762](75326 'typeof' low[75264]))
      unknown call_tmp[624767] "expr temp" "maybe param" "maybe type" "temp"
      (624770 'move' call_tmp[624767](75327 call _cast call_tmp[624762] count[75268]))
      unknown call_tmp[624772] "expr temp" "maybe param" "maybe type" "temp"
      (624775 'move' call_tmp[624772](75330 call - call_tmp[624767] 1))
      unknown call_tmp[624777] "expr temp" "maybe param" "maybe type" "temp"
      (624780 'move' call_tmp[624777](75332 call + low[75264] call_tmp[624772]))
      (558369 'move' tmp[558367](75335 call _build_tuple low[75264] call_tmp[624777]))
      (558374 'move' tmp[558350](558371 '_paramFoldLogical' tmp[558351] tmp[558367]))
    }
    (541291 'init var' tmp[75340] tmp[558350])
    (75347 call _check_tuple_var_decl tmp[75340] 2)
    (476152 'end of statement')
    unknown call_tmp[624782] "maybe param" "maybe type" "temp"
    (624785 'move' call_tmp[624782](75341 call tmp[75340] 0))
    const start[75298] "dead at end of block" "const" "insert auto destroy"
    (541293 'init var' start[75298] call_tmp[624782])
    unknown call_tmp[624787] "maybe param" "maybe type" "temp"
    (624790 'move' call_tmp[624787](75344 call tmp[75340] 1))
    const end[75300] "dead at end of block" "const" "insert auto destroy"
    (541295 'init var' end[75300] call_tmp[624787])
    (75352 'end of statement')
    {
      unknown _indexOfInterest[75363] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[75364] "expr temp" "temp"
      unknown call_tmp[624792] "expr temp" "maybe param" "maybe type" "temp"
      (624795 'move' call_tmp[624792](75359 call chpl_direct_param_stride_range_iter start[75298] end[75300] 1))
      (75373 'move' _iterator[75364](75371 call _getIterator call_tmp[624792]))
      Defer
      {
        {
          (75390 call _freeIterator _iterator[75364])
        }
      }
      { scopeless type
        (75379 'move' _indexOfInterest[75363](75376 call iteratorIndex _iterator[75364]))
      }
      ForLoop[75365]
      {
        unknown i[75383] "index var" "insert auto destroy"
        (476154 'end of statement')
        (75385 'move' i[75383] _indexOfInterest[75363])
        (476155 'end of statement' i[75383])
        unknown yret[511554] "YVV" "temp"
        (511557 'move' yret[511554](511556 'deref' i[75383]))
        (511559 yield yret[511554])
        (476157 'end of statement' i[75383])
        label _continueLabel[75368]
        _indexOfInterest[75363]
        _iterator[75364]
      }
      label _breakLabel[75369]
    }
    (511552 return ret[511550])
  }
  function chpl_direct_pos_stride_range_iter[75406](arg low[75403]:_any[178](?), arg high[75408]:_any[178](?), arg stride[75410]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511563] "RVV" "temp"
    unknown call_tmp[624797] "expr temp" "maybe param" "maybe type" "temp"
    (624800 'move' call_tmp[624797](75554 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[624797]
    {
      unknown call_tmp[624802] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624805 'move' call_tmp[624802](459722 'typeof' low[75403]))
      (75417 call chpl_range_check_stride stride[75410] call_tmp[624802])
      (476159 'end of statement')
      unknown call_tmp[624807] "expr temp" "maybe param" "maybe type" "temp"
      (624810 'move' call_tmp[624807](75429 call _cond_test 1))
      if call_tmp[624807]
      {
        unknown call_tmp[624812] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (624815 'move' call_tmp[624812](459724 'typeof' low[75403]))
        (75427 call chpl_checkIfRangeIterWillOverflow call_tmp[624812] low[75403] high[75408] stride[75410])
      }
      unknown i[75435] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624817] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624820 'move' call_tmp[624817](459726 'typeof' low[75403]))
      (541297 'default init var' i[75435] call_tmp[624817])
      (75438 'end of statement')
      CForLoop[75481]
      {
        {
          unknown yret[511567] "YVV" "temp"
          (511570 'move' yret[511567](511569 'deref' i[75435]))
          (511572 yield yret[511567])
          (476161 'end of statement' i[75435])
        }
        label _continueLabel[75497]
        {
          (75482 '=' i[75435] low[75403])
          (476163 'end of statement' i[75435])
        }
        {
          (75485 '<=' i[75435] high[75408])
          (476165 'end of statement' i[75435])
        }
        {
          unknown call_tmp[624822] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624825 'move' call_tmp[624822](459728 'typeof' low[75403]))
          unknown call_tmp[624827] "expr temp" "maybe param" "maybe type" "temp"
          (624830 'move' call_tmp[624827](75491 call _cast call_tmp[624822] stride[75410]))
          (75488 '+=' i[75435] call_tmp[624827])
          (476167 'end of statement' i[75435])
        }
      }
      label _breakLabel[75498]
    }
    {
      {
        unknown _indexOfInterest[75519] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75520] "expr temp" "temp"
        unknown call_tmp[624832] "expr temp" "maybe param" "maybe type" "temp"
        (624835 'move' call_tmp[624832](75504 call chpl_build_bounded_range low[75403] high[75408]))
        unknown call_tmp[624837] "expr temp" "maybe param" "maybe type" "temp"
        (624840 'move' call_tmp[624837](75507 call chpl_by call_tmp[624832] stride[75410]))
        unknown call_tmp[624844] "expr temp" "maybe param" "maybe type" "temp"
        (624847 'move' call_tmp[624844](75515 call(75511 call (partial) generalIterator _mt[243] call_tmp[624837])))
        (75529 'move' _iterator[75520](75527 call _getIterator call_tmp[624844]))
        Defer
        {
          {
            (75546 call _freeIterator _iterator[75520])
          }
        }
        { scopeless type
          (75535 'move' _indexOfInterest[75519](75532 call iteratorIndex _iterator[75520]))
        }
        ForLoop[75521]
        {
          unknown i[75539] "index var" "insert auto destroy"
          (476170 'end of statement')
          (75541 'move' i[75539] _indexOfInterest[75519])
          (476171 'end of statement' i[75539])
          unknown yret[511574] "YVV" "temp"
          (511577 'move' yret[511574](511576 'deref' i[75539]))
          (511579 yield yret[511574])
          (476173 'end of statement' i[75539])
          label _continueLabel[75524]
          _indexOfInterest[75519]
          _iterator[75520]
        }
        label _breakLabel[75525]
      }
    }
    (511565 return ret[511563])
  }
  function chpl_direct_param_stride_range_iter[75568](arg low[75565]:_any[178](?), arg high[75570]:_any[178](?), param arg stride[75572]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511583] "RVV" "temp"
    unknown call_tmp[624849] "expr temp" "maybe param" "maybe type" "temp"
    (624852 'move' call_tmp[624849](75779 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[624849]
    {
      unknown call_tmp[624854] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624857 'move' call_tmp[624854](459730 'typeof' low[75565]))
      (75579 call chpl_range_check_stride stride[75572] call_tmp[624854])
      (476175 'end of statement')
      unknown i[75583] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624859] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624862 'move' call_tmp[624859](459732 'typeof' low[75565]))
      (541299 'default init var' i[75583] call_tmp[624859])
      (75586 'end of statement')
      unknown call_tmp[624864] "expr temp" "maybe param" "maybe type" "temp"
      (624867 'move' call_tmp[624864](75589 call > stride[75572] 0))
      unknown call_tmp[624869] "expr temp" "maybe param" "maybe type" "temp"
      (624872 'move' call_tmp[624869](75723 call _cond_test call_tmp[624864]))
      if call_tmp[624869]
      {
        unknown call_tmp[624874] "expr temp" "maybe param" "maybe type" "temp"
        (624877 'move' call_tmp[624874](75600 call _cond_test 1))
        if call_tmp[624874]
        {
          unknown call_tmp[624879] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624882 'move' call_tmp[624879](459734 'typeof' low[75565]))
          (75598 call chpl_checkIfRangeIterWillOverflow call_tmp[624879] low[75565] high[75570] stride[75572])
        }
        CForLoop[75632]
        {
          {
            unknown yret[511587] "YVV" "temp"
            (511590 'move' yret[511587](511589 'deref' i[75583]))
            (511592 yield yret[511587])
            (476177 'end of statement' i[75583])
          }
          label _continueLabel[75648]
          {
            (75633 '=' i[75583] low[75565])
            (476179 'end of statement' i[75583])
          }
          {
            (75636 '<=' i[75583] high[75570])
            (476181 'end of statement' i[75583])
          }
          {
            unknown call_tmp[624884] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (624887 'move' call_tmp[624884](459736 'typeof' low[75565]))
            unknown call_tmp[624889] "expr temp" "maybe param" "maybe type" "temp"
            (624892 'move' call_tmp[624889](75642 call _cast call_tmp[624884] stride[75572]))
            (75639 '+=' i[75583] call_tmp[624889])
            (476183 'end of statement' i[75583])
          }
        }
        label _breakLabel[75649]
      }
      {
        unknown call_tmp[624894] "expr temp" "maybe param" "maybe type" "temp"
        (624897 'move' call_tmp[624894](75654 call < stride[75572] 0))
        unknown call_tmp[624899] "expr temp" "maybe param" "maybe type" "temp"
        (624902 'move' call_tmp[624899](75719 call _cond_test call_tmp[624894]))
        if call_tmp[624899]
        {
          unknown call_tmp[624904] "expr temp" "maybe param" "maybe type" "temp"
          (624907 'move' call_tmp[624904](75667 call _cond_test 1))
          if call_tmp[624904]
          {
            unknown call_tmp[624909] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (624912 'move' call_tmp[624909](459738 'typeof' low[75565]))
            (75665 call chpl_checkIfRangeIterWillOverflow call_tmp[624909] low[75565] high[75570] stride[75572] high[75570] low[75565])
          }
          CForLoop[75699]
          {
            {
              unknown yret[511594] "YVV" "temp"
              (511597 'move' yret[511594](511596 'deref' i[75583]))
              (511599 yield yret[511594])
              (476186 'end of statement' i[75583])
            }
            label _continueLabel[75715]
            {
              (75700 '=' i[75583] high[75570])
              (476188 'end of statement' i[75583])
            }
            {
              (75703 '>=' i[75583] low[75565])
              (476190 'end of statement' i[75583])
            }
            {
              unknown call_tmp[624914] "expr temp" "maybe param" "maybe type" "temp" "type variable"
              (624917 'move' call_tmp[624914](459740 'typeof' low[75565]))
              unknown call_tmp[624919] "expr temp" "maybe param" "maybe type" "temp"
              (624922 'move' call_tmp[624919](75709 call _cast call_tmp[624914] stride[75572]))
              (75706 '+=' i[75583] call_tmp[624919])
              (476192 'end of statement' i[75583])
            }
          }
          label _breakLabel[75716]
        }
      }
    }
    {
      {
        unknown _indexOfInterest[75744] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75745] "expr temp" "temp"
        unknown call_tmp[624924] "expr temp" "maybe param" "maybe type" "temp"
        (624927 'move' call_tmp[624924](75731 call chpl_build_bounded_range low[75565] high[75570]))
        unknown call_tmp[624929] "expr temp" "maybe param" "maybe type" "temp"
        (624932 'move' call_tmp[624929](75734 call chpl_by call_tmp[624924] stride[75572]))
        unknown call_tmp[624936] "expr temp" "maybe param" "maybe type" "temp"
        (624939 'move' call_tmp[624936](75740 call(75736 call (partial) generalIterator _mt[243] call_tmp[624929])))
        (75754 'move' _iterator[75745](75752 call _getIterator call_tmp[624936]))
        Defer
        {
          {
            (75771 call _freeIterator _iterator[75745])
          }
        }
        { scopeless type
          (75760 'move' _indexOfInterest[75744](75757 call iteratorIndex _iterator[75745]))
        }
        ForLoop[75746]
        {
          unknown i[75764] "index var" "insert auto destroy"
          (476195 'end of statement')
          (75766 'move' i[75764] _indexOfInterest[75744])
          (476196 'end of statement' i[75764])
          unknown yret[511601] "YVV" "temp"
          (511604 'move' yret[511601](511603 'deref' i[75764]))
          (511606 yield yret[511601])
          (476198 'end of statement' i[75764])
          label _continueLabel[75749]
          _indexOfInterest[75744]
          _iterator[75745]
        }
        label _breakLabel[75750]
      }
    }
    (511585 return ret[511583])
  }
  function range[64319](?).these[75789](arg _mt[75794]:_MT[238], arg this[75791]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511610] "RVV" "temp"
    unknown call_tmp[624943] "expr temp" "maybe param" "maybe type" "temp"
    (624946 'move' call_tmp[624943](375565 call boundedType _mt[243] this[75791]))
    unknown call_tmp[624948] "expr temp" "maybe param" "maybe type" "temp"
    (624951 'move' call_tmp[624948](75808 call == call_tmp[624943] boundedNone[64214]))
    unknown call_tmp[624953] "expr temp" "maybe param" "maybe type" "temp"
    (624956 'move' call_tmp[624953](75831 call _cond_test call_tmp[624948]))
    if call_tmp[624953]
    {
      (75829 call compilerError "iteration over a range with no bounds")
    }
    unknown call_tmp[624958] "expr temp" "maybe param" "maybe type" "temp"
    (624961 'move' call_tmp[624958](75911 call _cond_test 1))
    if call_tmp[624958]
    {
      unknown call_tmp[624965] "expr temp" "maybe param" "maybe type" "temp"
      (624968 'move' call_tmp[624965](75843 call(75839 call (partial) hasFirst _mt[243] this[75791])))
      unknown call_tmp[624970] "expr temp" "maybe param" "maybe type" "temp"
      (624973 'move' call_tmp[624970](75844 call ! call_tmp[624965]))
      unknown call_tmp[624975] "expr temp" "maybe param" "maybe type" "temp"
      (624978 'move' call_tmp[624975](75870 call _cond_test call_tmp[624970]))
      if call_tmp[624975]
      {
        (75868 call boundsCheckHalt module=[255] HaltWrappers[210016] "iteration over range that has no first index")
        (358004 'referenced modules list' HaltWrappers[210016])
      }
      unknown call_tmp[624982] "expr temp" "maybe param" "maybe type" "temp"
      (624985 'move' call_tmp[624982](75881 call(75877 call (partial) isAmbiguous _mt[243] this[75791])))
      unknown call_tmp[624987] "expr temp" "maybe param" "maybe type" "temp"
      (624990 'move' call_tmp[624987](75906 call _cond_test call_tmp[624982]))
      if call_tmp[624987]
      {
        (75904 call boundsCheckHalt module=[255] HaltWrappers[210016] "these -- Attempt to iterate over a range with ambiguous alignment.")
        (358011 'referenced modules list' HaltWrappers[210016])
      }
    }
    unknown i[75916] "dead at end of block" "insert auto destroy"
    unknown call_tmp[624994] "expr temp" "maybe param" "maybe type" "temp"
    (624997 'move' call_tmp[624994](375570 call intIdxType _mt[243] this[75791]))
    (541301 'default init var' i[75916] call_tmp[624994])
    (75919 'end of statement')
    unknown call_tmp[625001] "expr temp" "maybe param" "maybe type" "temp"
    (625004 'move' call_tmp[625001](75922 call first _mt[243] this[75791]))
    unknown call_tmp[625006] "maybe param" "maybe type" "temp"
    (625009 'move' call_tmp[625006](75926 call chpl__idxToInt call_tmp[625001]))
    const start[75927] "dead at end of block" "const" "insert auto destroy"
    (541303 'init var' start[75927] call_tmp[625006])
    (75930 'end of statement')
    CForLoop[75956]
    {
      {
        unknown yret[511614] "YVV" "temp"
        unknown call_tmp[625013] "expr temp" "maybe param" "maybe type" "temp"
        (625016 'move' call_tmp[625013](75951 call(375574 call (partial) chpl_intToIdx _mt[243] this[75791]) i[75916]))
        (511617 'move' yret[511614](511616 'deref' call_tmp[625013]))
        (511619 yield yret[511614])
        (476203 'end of statement' i[75916])
      }
      label _continueLabel[75970]
      {
        (75957 '=' i[75916] start[75927])
        (476205 'end of statement' i[75916] start[75927])
      }
      {
        (748151 call chpl_statementLevelSymbol 1)
      }
      {
        unknown call_tmp[625020] "expr temp" "maybe param" "maybe type" "temp"
        (625023 'move' call_tmp[625020](375582 call intIdxType _mt[243] this[75791]))
        unknown call_tmp[625027] "expr temp" "maybe param" "maybe type" "temp"
        (625030 'move' call_tmp[625027](375586 call stride _mt[243] this[75791]))
        unknown call_tmp[625032] "expr temp" "maybe param" "maybe type" "temp"
        (625035 'move' call_tmp[625032](75964 call _cast call_tmp[625020] call_tmp[625027]))
        (75961 '+=' i[75916] call_tmp[625032])
        (476208 'end of statement' i[75916])
      }
    }
    label _breakLabel[75971]
    (511612 return ret[511610])
  }
  where {
    unknown call_tmp[625039] "expr temp" "maybe param" "maybe type" "temp"
    (625042 'move' call_tmp[625039](375560 call boundedType _mt[243] this[75791]))
    (75801 call != call_tmp[625039] bounded[64208])
  }
  function range[64319](?).these[75980](arg _mt[75985]:_MT[238], arg this[75982]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511623] "RVV" "temp"
    unknown call_tmp[625044] "expr temp" "maybe param" "maybe type" "temp"
    (625047 'move' call_tmp[625044](76167 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[625044]
    {
      unknown call_tmp[625049] "expr temp" "maybe param" "maybe type" "temp"
      (625052 'move' call_tmp[625049](76026 call _cond_test 1))
      if call_tmp[625049]
      {
        (76004 call(375604 call (partial) checkIfIterWillOverflow _mt[243] this[75982]))
        (476210 'end of statement')
        unknown call_tmp[625058] "expr temp" "maybe param" "maybe type" "temp"
        (625061 'move' call_tmp[625058](76012 call(76008 call (partial) isAmbiguous _mt[243] this[75982])))
        unknown call_tmp[625063] "expr temp" "maybe param" "maybe type" "temp"
        (625066 'move' call_tmp[625063](76021 call _cond_test call_tmp[625058]))
        if call_tmp[625063]
        {
          (76019 call boundsCheckHalt module=[255] HaltWrappers[210016] "these -- Attempt to iterate over a range with ambiguous alignment.")
          (358020 'referenced modules list' HaltWrappers[210016])
        }
      }
      unknown i[76032] "dead at end of block" "insert auto destroy"
      unknown call_tmp[625070] "expr temp" "maybe param" "maybe type" "temp"
      (625073 'move' call_tmp[625070](375608 call intIdxType _mt[243] this[75982]))
      (541305 'default init var' i[76032] call_tmp[625070])
      (76035 'end of statement')
      unknown call_tmp[625077] "maybe param" "maybe type" "temp"
      (625080 'move' call_tmp[625077](76037 call firstAsInt _mt[243] this[75982]))
      const start[76040] "dead at end of block" "const" "insert auto destroy"
      (541307 'init var' start[76040] call_tmp[625077])
      (76043 'end of statement')
      const end[76069] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558381] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558382] "maybe param" "temp"
      unknown call_tmp[625084] "expr temp" "maybe param" "maybe type" "temp"
      (625087 'move' call_tmp[625084](76046 call low _mt[243] this[75982]))
      unknown call_tmp[625091] "expr temp" "maybe param" "maybe type" "temp"
      (625094 'move' call_tmp[625091](76050 call high _mt[243] this[75982]))
      unknown call_tmp[625096] "expr temp" "maybe param" "maybe type" "temp"
      (625099 'move' call_tmp[625096](76053 call > call_tmp[625084] call_tmp[625091]))
      (558387 'move' tmp[558382](558385 call _cond_test call_tmp[625096]))
      if tmp[558382]
      {
        (558392 'move' tmp[558381](558389 '_paramFoldLogical' tmp[558382] start[76040]))
      }
      {
        unknown tmp[558394] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[625103] "expr temp" "maybe param" "maybe type" "temp"
        (625106 'move' call_tmp[625103](76057 call lastAsInt _mt[243] this[75982]))
        unknown call_tmp[625110] "expr temp" "maybe param" "maybe type" "temp"
        (625113 'move' call_tmp[625110](375621 call intIdxType _mt[243] this[75982]))
        unknown call_tmp[625117] "expr temp" "maybe param" "maybe type" "temp"
        (625120 'move' call_tmp[625117](375617 call stride _mt[243] this[75982]))
        unknown call_tmp[625122] "expr temp" "maybe param" "maybe type" "temp"
        (625125 'move' call_tmp[625122](76062 call _cast call_tmp[625110] call_tmp[625117]))
        (558396 'move' tmp[558394](76064 call + call_tmp[625103] call_tmp[625122]))
        (558401 'move' tmp[558381](558398 '_paramFoldLogical' tmp[558382] tmp[558394]))
      }
      unknown call_tmp[625129] "maybe param" "maybe type" "temp"
      (625132 'move' call_tmp[625129](375612 call intIdxType _mt[243] this[75982]))
      (541309 'init var' end[76069] tmp[558381] call_tmp[625129])
      (76072 'end of statement' start[76040])
      CForLoop[76102]
      {
        {
          unknown yret[511627] "YVV" "temp"
          unknown call_tmp[625136] "expr temp" "maybe param" "maybe type" "temp"
          (625139 'move' call_tmp[625136](76097 call(375625 call (partial) chpl_intToIdx _mt[243] this[75982]) i[76032]))
          (511630 'move' yret[511627](511629 'deref' call_tmp[625136]))
          (511632 yield yret[511627])
          (476213 'end of statement' i[76032])
        }
        label _continueLabel[76118]
        {
          (76103 '=' i[76032] start[76040])
          (476215 'end of statement' i[76032] start[76040])
        }
        {
          (76106 '!=' i[76032] end[76069])
          (476218 'end of statement' i[76032] end[76069])
        }
        {
          unknown call_tmp[625143] "expr temp" "maybe param" "maybe type" "temp"
          (625146 'move' call_tmp[625143](375635 call intIdxType _mt[243] this[75982]))
          unknown call_tmp[625150] "expr temp" "maybe param" "maybe type" "temp"
          (625153 'move' call_tmp[625150](375639 call stride _mt[243] this[75982]))
          unknown call_tmp[625155] "expr temp" "maybe param" "maybe type" "temp"
          (625158 'move' call_tmp[625155](76112 call _cast call_tmp[625143] call_tmp[625150]))
          (76109 '+=' i[76032] call_tmp[625155])
          (476221 'end of statement' i[76032])
        }
      }
      label _breakLabel[76119]
    }
    {
      {
        unknown _indexOfInterest[76132] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76133] "expr temp" "temp"
        unknown call_tmp[625162] "expr temp" "maybe param" "maybe type" "temp"
        (625165 'move' call_tmp[625162](76128 call(76124 call (partial) generalIterator _mt[243] this[75982])))
        (76142 'move' _iterator[76133](76140 call _getIterator call_tmp[625162]))
        Defer
        {
          {
            (76159 call _freeIterator _iterator[76133])
          }
        }
        { scopeless type
          (76148 'move' _indexOfInterest[76132](76145 call iteratorIndex _iterator[76133]))
        }
        ForLoop[76134]
        {
          unknown i[76152] "index var" "insert auto destroy"
          (476224 'end of statement')
          (76154 'move' i[76152] _indexOfInterest[76132])
          (476225 'end of statement' i[76152])
          unknown yret[511634] "YVV" "temp"
          (511637 'move' yret[511634](511636 'deref' i[76152]))
          (511639 yield yret[511634])
          (476227 'end of statement' i[76152])
          label _continueLabel[76137]
          _indexOfInterest[76132]
          _iterator[76133]
        }
        label _breakLabel[76138]
      }
    }
    (511625 return ret[511623])
  }
  where {
    unknown tmp[420722] "maybe param" "temp"
    unknown call_tmp[625169] "expr temp" "maybe param" "maybe type" "temp"
    (625172 'move' call_tmp[625169](375591 call boundedType _mt[243] this[75982]))
    (420733 'move' tmp[420722](75992 call == call_tmp[625169] bounded[64208]))
    unknown call_tmp[625174] "expr temp" "maybe param" "maybe type" "temp"
    (625177 'move' call_tmp[625174](420735 call _cond_invalid tmp[420722]))
    if call_tmp[625174]
    {
      (420738 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558408] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558409] "maybe param" "temp"
    unknown call_tmp[625179] "expr temp" "maybe param" "maybe type" "temp"
    (625182 'move' call_tmp[625179](420723 call isTrue tmp[420722]))
    (558414 'move' tmp[558409](558412 call _cond_test call_tmp[625179]))
    if tmp[558409]
    {
      unknown tmp[558416] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625186] "expr temp" "maybe param" "maybe type" "temp"
      (625189 'move' call_tmp[625186](375596 call stridable _mt[243] this[75982]))
      unknown call_tmp[625191] "expr temp" "maybe param" "maybe type" "temp"
      (625194 'move' call_tmp[625191](75996 call == call_tmp[625186] 1))
      (558418 'move' tmp[558416](420726 call isTrue call_tmp[625191]))
      (558423 'move' tmp[558408](558420 '_paramFoldLogical' tmp[558409] tmp[558416]))
    }
    {
      (558428 'move' tmp[558408](558425 '_paramFoldLogical' tmp[558409] 0))
    }
    (748265 call chpl_statementLevelSymbol tmp[558408])
  }
  function range[64319](?).these[76178](arg _mt[76183]:_MT[238], arg this[76180]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511643] "RVV" "temp"
    unknown call_tmp[625196] "expr temp" "maybe param" "maybe type" "temp"
    (625199 'move' call_tmp[625196](76325 call _cond_test useOptimizedRangeIterators[64203]))
    if call_tmp[625196]
    {
      unknown call_tmp[625201] "expr temp" "maybe param" "maybe type" "temp"
      (625204 'move' call_tmp[625201](76204 call _cond_test 1))
      if call_tmp[625201]
      {
        (76202 call(375656 call (partial) checkIfIterWillOverflow _mt[243] this[76180]))
      }
      unknown i[76211] "dead at end of block" "insert auto destroy"
      unknown call_tmp[625210] "expr temp" "maybe param" "maybe type" "temp"
      (625213 'move' call_tmp[625210](375660 call intIdxType _mt[243] this[76180]))
      (541311 'default init var' i[76211] call_tmp[625210])
      (76214 'end of statement')
      unknown call_tmp[625217] "maybe param" "maybe type" "temp"
      (625220 'move' call_tmp[625217](76216 call _low _mt[243] this[76180]))
      const start[76219] "dead at end of block" "const" "insert auto destroy"
      (541313 'init var' start[76219] call_tmp[625217])
      (76222 'end of statement')
      unknown call_tmp[625224] "maybe param" "maybe type" "temp"
      (625227 'move' call_tmp[625224](76224 call _high _mt[243] this[76180]))
      const end[76227] "dead at end of block" "const" "insert auto destroy"
      (541315 'init var' end[76227] call_tmp[625224])
      (76230 'end of statement')
      CForLoop[76260]
      {
        {
          unknown yret[511647] "YVV" "temp"
          unknown call_tmp[625231] "expr temp" "maybe param" "maybe type" "temp"
          (625234 'move' call_tmp[625231](76255 call(375664 call (partial) chpl_intToIdx _mt[243] this[76180]) i[76211]))
          (511650 'move' yret[511647](511649 'deref' call_tmp[625231]))
          (511652 yield yret[511647])
          (476230 'end of statement' i[76211])
        }
        label _continueLabel[76276]
        {
          (76261 '=' i[76211] start[76219])
          (476232 'end of statement' i[76211] start[76219])
        }
        {
          (76264 '<=' i[76211] end[76227])
          (476235 'end of statement' i[76211] end[76227])
        }
        {
          unknown call_tmp[625238] "expr temp" "maybe param" "maybe type" "temp"
          (625241 'move' call_tmp[625238](375674 call intIdxType _mt[243] this[76180]))
          unknown call_tmp[625245] "expr temp" "maybe param" "maybe type" "temp"
          (625248 'move' call_tmp[625245](375678 call stride _mt[243] this[76180]))
          unknown call_tmp[625250] "expr temp" "maybe param" "maybe type" "temp"
          (625253 'move' call_tmp[625250](76270 call _cast call_tmp[625238] call_tmp[625245]))
          (76267 '+=' i[76211] call_tmp[625250])
          (476238 'end of statement' i[76211])
        }
      }
      label _breakLabel[76277]
    }
    {
      {
        unknown _indexOfInterest[76290] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76291] "expr temp" "temp"
        unknown call_tmp[625257] "expr temp" "maybe param" "maybe type" "temp"
        (625260 'move' call_tmp[625257](76286 call(76282 call (partial) generalIterator _mt[243] this[76180])))
        (76300 'move' _iterator[76291](76298 call _getIterator call_tmp[625257]))
        Defer
        {
          {
            (76317 call _freeIterator _iterator[76291])
          }
        }
        { scopeless type
          (76306 'move' _indexOfInterest[76290](76303 call iteratorIndex _iterator[76291]))
        }
        ForLoop[76292]
        {
          unknown i[76310] "index var" "insert auto destroy"
          (476241 'end of statement')
          (76312 'move' i[76310] _indexOfInterest[76290])
          (476242 'end of statement' i[76310])
          unknown yret[511654] "YVV" "temp"
          (511657 'move' yret[511654](511656 'deref' i[76310]))
          (511659 yield yret[511654])
          (476244 'end of statement' i[76310])
          label _continueLabel[76295]
          _indexOfInterest[76290]
          _iterator[76291]
        }
        label _breakLabel[76296]
      }
    }
    (511645 return ret[511643])
  }
  where {
    unknown tmp[420743] "maybe param" "temp"
    unknown call_tmp[625264] "expr temp" "maybe param" "maybe type" "temp"
    (625267 'move' call_tmp[625264](375645 call boundedType _mt[243] this[76180]))
    (420754 'move' tmp[420743](76190 call == call_tmp[625264] bounded[64208]))
    unknown call_tmp[625269] "expr temp" "maybe param" "maybe type" "temp"
    (625272 'move' call_tmp[625269](420756 call _cond_invalid tmp[420743]))
    if call_tmp[625269]
    {
      (420759 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558435] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558436] "maybe param" "temp"
    unknown call_tmp[625274] "expr temp" "maybe param" "maybe type" "temp"
    (625277 'move' call_tmp[625274](420744 call isTrue tmp[420743]))
    (558441 'move' tmp[558436](558439 call _cond_test call_tmp[625274]))
    if tmp[558436]
    {
      unknown tmp[558443] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625281] "expr temp" "maybe param" "maybe type" "temp"
      (625284 'move' call_tmp[625281](375650 call stridable _mt[243] this[76180]))
      unknown call_tmp[625286] "expr temp" "maybe param" "maybe type" "temp"
      (625289 'move' call_tmp[625286](76194 call == call_tmp[625281] 0))
      (558445 'move' tmp[558443](420747 call isTrue call_tmp[625286]))
      (558450 'move' tmp[558435](558447 '_paramFoldLogical' tmp[558436] tmp[558443]))
    }
    {
      (558455 'move' tmp[558435](558452 '_paramFoldLogical' tmp[558436] 0))
    }
    (748267 call chpl_statementLevelSymbol tmp[558435])
  }
  function range[64319](?).generalIterator[76336](arg _mt[76341]:_MT[238], arg this[76338]:range[64319](?) :
  range[64319](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511663] "RVV" "temp"
    unknown tmp[420764] "maybe param" "temp"
    (420775 'move' tmp[420764] 1)
    unknown call_tmp[625291] "expr temp" "maybe param" "maybe type" "temp"
    (625294 'move' call_tmp[625291](420777 call _cond_invalid tmp[420764]))
    if call_tmp[625291]
    {
      (420780 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558462] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558463] "maybe param" "temp"
    unknown call_tmp[625296] "expr temp" "maybe param" "maybe type" "temp"
    (625299 'move' call_tmp[625296](420765 call isTrue tmp[420764]))
    (558468 'move' tmp[558463](558466 call _cond_test call_tmp[625296]))
    if tmp[558463]
    {
      unknown tmp[558470] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625303] "expr temp" "maybe param" "maybe type" "temp"
      (625306 'move' call_tmp[625303](76349 call(76345 call (partial) isAmbiguous _mt[243] this[76338])))
      (558472 'move' tmp[558470](420768 call isTrue call_tmp[625303]))
      (558477 'move' tmp[558462](558474 '_paramFoldLogical' tmp[558463] tmp[558470]))
    }
    {
      (558482 'move' tmp[558462](558479 '_paramFoldLogical' tmp[558463] 0))
    }
    unknown call_tmp[625308] "expr temp" "maybe param" "maybe type" "temp"
    (625311 'move' call_tmp[625308](76360 call _cond_test tmp[558462]))
    if call_tmp[625308]
    {
      (76358 call boundsCheckHalt module=[255] HaltWrappers[210016] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358036 'referenced modules list' HaltWrappers[210016])
    }
    unknown i[76367] "dead at end of block" "insert auto destroy"
    unknown call_tmp[625315] "expr temp" "maybe param" "maybe type" "temp"
    (625318 'move' call_tmp[625315](375684 call intIdxType _mt[243] this[76338]))
    (541317 'default init var' i[76367] call_tmp[625315])
    (76370 'end of statement')
    unknown call_tmp[625322] "maybe param" "maybe type" "temp"
    (625325 'move' call_tmp[625322](76372 call first _mt[243] this[76338]))
    const start[76375] "dead at end of block" "const" "insert auto destroy"
    (541319 'init var' start[76375] call_tmp[625322])
    (76378 'end of statement')
    const end[76399] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558489] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558490] "maybe param" "temp"
    unknown call_tmp[625329] "expr temp" "maybe param" "maybe type" "temp"
    (625332 'move' call_tmp[625329](76380 call low _mt[243] this[76338]))
    unknown call_tmp[625336] "expr temp" "maybe param" "maybe type" "temp"
    (625339 'move' call_tmp[625336](76384 call high _mt[243] this[76338]))
    unknown call_tmp[625341] "expr temp" "maybe param" "maybe type" "temp"
    (625344 'move' call_tmp[625341](76387 call > call_tmp[625329] call_tmp[625336]))
    (558495 'move' tmp[558490](558493 call _cond_test call_tmp[625341]))
    if tmp[558490]
    {
      (558500 'move' tmp[558489](558497 '_paramFoldLogical' tmp[558490] start[76375]))
    }
    {
      unknown tmp[558502] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558504 'move' tmp[558502](76393 call last _mt[243] this[76338]))
      (558509 'move' tmp[558489](558506 '_paramFoldLogical' tmp[558490] tmp[558502]))
    }
    (541321 'init var' end[76399] tmp[558489])
    (76402 'end of statement' start[76375])
    CForLoop[76441]
    {
      {
        unknown yret[511667] "YVV" "temp"
        (511670 'move' yret[511667](511669 'deref' i[76367]))
        (511672 yield yret[511667])
        (476249 'end of statement' i[76367])
        unknown call_tmp[625348] "expr temp" "maybe param" "maybe type" "temp"
        (625351 'move' call_tmp[625348](76430 call == i[76367] end[76399]))
        unknown call_tmp[625353] "expr temp" "maybe param" "maybe type" "temp"
        (625356 'move' call_tmp[625353](76435 call _cond_test call_tmp[625348]))
        if call_tmp[625353]
        {
          break _breakLabel[76458] _breakLabel[76458]
        }
      }
      label _continueLabel[76457]
      {
        (76442 '=' i[76367] start[76375])
        (476251 'end of statement' i[76367] start[76375])
      }
      {
        unknown call_tmp[625360] "expr temp" "maybe param" "maybe type" "temp"
        (625363 'move' call_tmp[625360](375694 call high _mt[243] this[76338]))
        unknown call_tmp[625367] "expr temp" "maybe param" "maybe type" "temp"
        (625370 'move' call_tmp[625367](375698 call low _mt[243] this[76338]))
        (76445 '>=' call_tmp[625360] call_tmp[625367])
      }
      {
        unknown call_tmp[625374] "expr temp" "maybe param" "maybe type" "temp"
        (625377 'move' call_tmp[625374](375703 call intIdxType _mt[243] this[76338]))
        unknown call_tmp[625381] "expr temp" "maybe param" "maybe type" "temp"
        (625384 'move' call_tmp[625381](375707 call stride _mt[243] this[76338]))
        unknown call_tmp[625386] "expr temp" "maybe param" "maybe type" "temp"
        (625389 'move' call_tmp[625386](76451 call _cast call_tmp[625374] call_tmp[625381]))
        (76448 '+=' i[76367] call_tmp[625386])
        (476255 'end of statement' i[76367])
      }
    }
    label _breakLabel[76458]
    (511665 return ret[511663])
  }
  function range[64319](?).these[76470](arg _mt[76475]:_MT[238], arg this[76472]:range[64319](?) :
  range[64319](?), param arg tag[76467]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511676] "RVV" "temp"
    unknown call_tmp[625391] "expr temp" "maybe param" "maybe type" "temp"
    (625394 'move' call_tmp[625391](76492 call isBoundedRange this[76472]))
    unknown call_tmp[625396] "expr temp" "maybe param" "maybe type" "temp"
    (625399 'move' call_tmp[625396](76493 call ! call_tmp[625391]))
    unknown call_tmp[625401] "expr temp" "maybe param" "maybe type" "temp"
    (625404 'move' call_tmp[625401](76517 call _cond_test call_tmp[625396]))
    if call_tmp[625401]
    {
      (76514 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420806] "maybe param" "temp"
    (420817 'move' tmp[420806] 1)
    unknown call_tmp[625406] "expr temp" "maybe param" "maybe type" "temp"
    (625409 'move' call_tmp[625406](420819 call _cond_invalid tmp[420806]))
    if call_tmp[625406]
    {
      (420822 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558516] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558517] "maybe param" "temp"
    unknown call_tmp[625411] "expr temp" "maybe param" "maybe type" "temp"
    (625414 'move' call_tmp[625411](420807 call isTrue tmp[420806]))
    (558522 'move' tmp[558517](558520 call _cond_test call_tmp[625411]))
    if tmp[558517]
    {
      unknown tmp[558524] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625418] "expr temp" "maybe param" "maybe type" "temp"
      (625421 'move' call_tmp[625418](76528 call(76524 call (partial) isAmbiguous _mt[243] this[76472])))
      (558526 'move' tmp[558524](420810 call isTrue call_tmp[625418]))
      (558531 'move' tmp[558516](558528 '_paramFoldLogical' tmp[558517] tmp[558524]))
    }
    {
      (558536 'move' tmp[558516](558533 '_paramFoldLogical' tmp[558517] 0))
    }
    unknown call_tmp[625423] "expr temp" "maybe param" "maybe type" "temp"
    (625426 'move' call_tmp[625423](76540 call _cond_test tmp[558516]))
    if call_tmp[625423]
    {
      (76537 call boundsCheckHalt module=[255] HaltWrappers[210016] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358048 'referenced modules list' HaltWrappers[210016])
    }
    unknown call_tmp[625428] "expr temp" "maybe param" "maybe type" "temp"
    (625431 'move' call_tmp[625428](76567 call _cond_test debugChapelRange[64198]))
    if call_tmp[625428]
    {
      (76564 call chpl_debug_writeln "*** In range standalone iterator:")
    }
    unknown call_tmp[625435] "maybe param" "maybe type" "temp"
    (625438 'move' call_tmp[625435](76572 call size _mt[243] this[76472]))
    const len[76575] "dead at end of block" "const" "insert auto destroy"
    (541323 'init var' len[76575] call_tmp[625435])
    (76578 'end of statement')
    const numChunks[76606] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558543] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558544] "maybe param" "temp"
    unknown call_tmp[625440] "expr temp" "maybe param" "maybe type" "temp"
    (625443 'move' call_tmp[625440](76597 'task_get_serial'))
    (558549 'move' tmp[558544](558547 call _cond_test call_tmp[625440]))
    if tmp[558544]
    {
      (558554 'move' tmp[558543](558551 '_paramFoldLogical' tmp[558544] 1))
    }
    {
      unknown tmp[558556] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558558 'move' tmp[558556](76602 call _computeNumChunks len[76575]))
      (558563 'move' tmp[558543](558560 '_paramFoldLogical' tmp[558544] tmp[558556]))
    }
    (541325 'init var' numChunks[76606] tmp[558543])
    (76609 'end of statement' len[76575])
    unknown call_tmp[625445] "expr temp" "maybe param" "maybe type" "temp"
    (625448 'move' call_tmp[625445](76652 call _cond_test debugChapelRange[64198]))
    if call_tmp[625445]
    {
      (76649 call chpl_debug_writeln "*** RI: length=" len[76575] " numChunks=" numChunks[76606])
      (476262 'end of statement' len[76575] numChunks[76606])
    }
    unknown call_tmp[625450] "expr temp" "maybe param" "maybe type" "temp"
    (625453 'move' call_tmp[625450](76658 call <= numChunks[76606] 1))
    unknown call_tmp[625455] "expr temp" "maybe param" "maybe type" "temp"
    (625458 'move' call_tmp[625455](77307 call _cond_test call_tmp[625450]))
    if call_tmp[625455]
    {
      {
        unknown _indexOfInterest[76666] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76667] "expr temp" "temp"
        (76676 'move' _iterator[76667](76674 call _getIterator this[76472]))
        Defer
        {
          {
            (76692 call _freeIterator _iterator[76667])
          }
        }
        { scopeless type
          (76681 'move' _indexOfInterest[76666](76678 call iteratorIndex _iterator[76667]))
        }
        ForLoop[76668]
        {
          unknown i[76685] "index var" "insert auto destroy"
          (476266 'end of statement')
          (76687 'move' i[76685] _indexOfInterest[76666])
          (476267 'end of statement' i[76685])
          {
            unknown yret[511680] "YVV" "temp"
            (511683 'move' yret[511680](511682 'deref' i[76685]))
            (511685 yield yret[511680])
            (476269 'end of statement' i[76685])
          }
          label _continueLabel[76671]
          _indexOfInterest[76666]
          _iterator[76667]
        }
        label _breakLabel[76672]
      }
    }
    {
      {
        unknown tmpIter[76942] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[625460] "expr temp" "maybe param" "maybe type" "temp"
        (625463 'move' call_tmp[625460](76702 call chpl_build_low_bounded_range 0))
        (76945 'move' tmpIter[76942](76705 call # call_tmp[625460] numChunks[76606]))
        unknown isRngDomArr[77287] "maybe param" "temp"
        unknown tmp[420827] "maybe param" "temp"
        (420838 'move' tmp[420827](77289 call isBoundedRange tmpIter[76942]))
        unknown call_tmp[625465] "expr temp" "maybe param" "maybe type" "temp"
        (625468 'move' call_tmp[625465](420840 call _cond_invalid tmp[420827]))
        if call_tmp[625465]
        {
          (420843 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[558597] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558598] "maybe param" "temp"
        unknown call_tmp[625470] "expr temp" "maybe param" "maybe type" "temp"
        (625473 'move' call_tmp[625470](420828 call isTrue tmp[420827]))
        (558603 'move' tmp[558598](558601 call _cond_test call_tmp[625470]))
        if tmp[558598]
        {
          (558608 'move' tmp[558597](558605 '_paramFoldLogical' tmp[558598] 1))
        }
        {
          unknown tmp[420848] "maybe param" "temp"
          (420859 'move' tmp[420848](77292 call isDomain tmpIter[76942]))
          unknown call_tmp[625475] "expr temp" "maybe param" "maybe type" "temp"
          (625478 'move' call_tmp[625475](420861 call _cond_invalid tmp[420848]))
          if call_tmp[625475]
          {
            (420864 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558570] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558571] "maybe param" "temp"
          unknown call_tmp[625480] "expr temp" "maybe param" "maybe type" "temp"
          (625483 'move' call_tmp[625480](420849 call isTrue tmp[420848]))
          (558576 'move' tmp[558571](558574 call _cond_test call_tmp[625480]))
          if tmp[558571]
          {
            (558581 'move' tmp[558570](558578 '_paramFoldLogical' tmp[558571] 1))
          }
          {
            unknown tmp[558583] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[625485] "expr temp" "maybe param" "maybe type" "temp"
            (625488 'move' call_tmp[625485](77295 call isArray tmpIter[76942]))
            (558585 'move' tmp[558583](420853 call isTrue call_tmp[625485]))
            (558590 'move' tmp[558570](558587 '_paramFoldLogical' tmp[558571] tmp[558583]))
          }
          unknown tmp[558610] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (558612 'move' tmp[558610](420832 call isTrue tmp[558570]))
          (558617 'move' tmp[558597](558614 '_paramFoldLogical' tmp[558598] tmp[558610]))
        }
        (77302 'move' isRngDomArr[77287] tmp[558597])
        if isRngDomArr[77287]
        {
          const _coforallCount[77154] "const" "end count" "temp"
          (77223 'move' _coforallCount[77154](77220 call _endCountAlloc 1))
          unknown numTasks[77155] "temp"
          (77207 'move' numTasks[77155](77203 call size _mt[243] tmpIter[76942]))
          (77198 call _upEndCount _coforallCount[77154] 1 numTasks[77155])
          (476272 'end of statement')
          (77195 call chpl_resetTaskSpawn numTasks[77155])
          (476273 'end of statement')
          unknown _indexOfInterest[77162] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77163] "expr temp" "temp"
          (77172 'move' _iterator[77163](77170 call _getIterator tmpIter[76942]))
          Defer
          {
            {
              (77188 call _freeIterator _iterator[77163])
            }
          }
          { scopeless type
            (77177 'move' _indexOfInterest[77162](77174 call iteratorIndex _iterator[77163]))
          }
          ForLoop[77164]
          {
            unknown chunk[77181] "coforall index var" "index var" "insert auto destroy"
            (476275 'end of statement')
            (77183 'move' chunk[77181] _indexOfInterest[77162])
            (476276 'end of statement' chunk[77181])
            {
              {
                unknown call_tmp[625494] "expr temp" "maybe param" "maybe type" "temp"
                (625497 'move' call_tmp[625494](375783 call stridable _mt[243] this[76472]))
                unknown call_tmp[625499] "expr temp" "maybe param" "maybe type" "temp"
                (625502 'move' call_tmp[625499](76949 call _cond_test call_tmp[625494]))
                if call_tmp[625499]
                {
                  unknown call_tmp[625504] "expr temp" "maybe param" "maybe type" "temp"
                  (625507 'move' call_tmp[625504](76960 call - len[76575] 1))
                  unknown call_tmp[625509] "maybe param" "maybe type" "temp"
                  (625512 'move' call_tmp[625509](76955 call _computeBlock len[76575] numChunks[76606] chunk[77181] call_tmp[625504]))
                  const tmp[76953] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541327 'init var' tmp[76953] call_tmp[625509])
                  (76965 call _check_tuple_var_decl tmp[76953] 2)
                  (476278 'end of statement')
                  unknown call_tmp[625514] "maybe param" "maybe type" "temp"
                  (625517 'move' call_tmp[625514](76970 call tmp[76953] 0))
                  const lo[76968] "dead at end of block" "const" "insert auto destroy"
                  (541329 'init var' lo[76968] call_tmp[625514])
                  unknown call_tmp[625519] "maybe param" "maybe type" "temp"
                  (625522 'move' call_tmp[625519](76975 call tmp[76953] 1))
                  const hi[76973] "dead at end of block" "const" "insert auto destroy"
                  (541331 'init var' hi[76973] call_tmp[625519])
                  (76978 'end of statement')
                  unknown call_tmp[625524] "expr temp" "maybe param" "maybe type" "temp"
                  (625527 'move' call_tmp[625524](76985 call - lo[76968] 1))
                  unknown call_tmp[625529] "maybe param" "maybe type" "temp"
                  (625532 'move' call_tmp[625529](76982 call - hi[76973] call_tmp[625524]))
                  const mylen[76980] "dead at end of block" "const" "insert auto destroy"
                  (541333 'init var' mylen[76980] call_tmp[625529])
                  (76989 'end of statement')
                  unknown call_tmp[625536] "maybe param" "maybe type" "temp"
                  (625539 'move' call_tmp[625536](76993 call(375793 call (partial) orderToIndex _mt[243] this[76472]) lo[76968]))
                  unknown low[76991] "dead at end of block" "insert auto destroy"
                  (541335 'init var' low[76991] call_tmp[625536])
                  (76996 'end of statement')
                  unknown call_tmp[625545] "expr temp" "maybe param" "maybe type" "temp"
                  (625548 'move' call_tmp[625545](375802 call strType _mt[243] this[76472]))
                  unknown call_tmp[625550] "expr temp" "maybe param" "maybe type" "temp"
                  (625553 'move' call_tmp[625550](77007 call chpl__idxToInt low[76991]))
                  unknown call_tmp[625555] "expr temp" "maybe param" "maybe type" "temp"
                  (625558 'move' call_tmp[625555](77004 call _cast call_tmp[625545] call_tmp[625550]))
                  unknown call_tmp[625562] "expr temp" "maybe param" "maybe type" "temp"
                  (625565 'move' call_tmp[625562](375807 call stride _mt[243] this[76472]))
                  unknown call_tmp[625569] "expr temp" "maybe param" "maybe type" "temp"
                  (625572 'move' call_tmp[625569](375811 call strType _mt[243] this[76472]))
                  unknown call_tmp[625574] "expr temp" "maybe param" "maybe type" "temp"
                  (625577 'move' call_tmp[625574](77016 call - mylen[76980] 1))
                  unknown call_tmp[625579] "expr temp" "maybe param" "maybe type" "temp"
                  (625582 'move' call_tmp[625579](77013 call _cast call_tmp[625569] call_tmp[625574]))
                  unknown call_tmp[625584] "expr temp" "maybe param" "maybe type" "temp"
                  (625587 'move' call_tmp[625584](77010 call * call_tmp[625562] call_tmp[625579]))
                  unknown call_tmp[625589] "expr temp" "maybe param" "maybe type" "temp"
                  (625592 'move' call_tmp[625589](77002 call + call_tmp[625555] call_tmp[625584]))
                  unknown call_tmp[625594] "maybe param" "maybe type" "temp"
                  (625597 'move' call_tmp[625594](77000 call(375798 call (partial) chpl_intToIdx _mt[243] this[76472]) call_tmp[625589]))
                  unknown high[76998] "dead at end of block" "insert auto destroy"
                  (541337 'init var' high[76998] call_tmp[625594])
                  (77020 'end of statement' hi[76973] lo[76968] lo[76968] low[76991] mylen[76980])
                  unknown call_tmp[625601] "expr temp" "maybe param" "maybe type" "temp"
                  (625604 'move' call_tmp[625601](375816 call stride _mt[243] this[76472]))
                  unknown call_tmp[625606] "expr temp" "maybe param" "maybe type" "temp"
                  (625609 'move' call_tmp[625606](77024 call < call_tmp[625601] 0))
                  unknown call_tmp[625611] "expr temp" "maybe param" "maybe type" "temp"
                  (625614 'move' call_tmp[625611](77022 call _cond_test call_tmp[625606]))
                  if call_tmp[625611]
                  {
                    (77030 call <=> low[76991] high[76998])
                    (476284 'end of statement' low[76991] high[76998])
                  }
                  {
                    unknown _indexOfInterest[77035] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77037] "expr temp" "temp"
                    unknown call_tmp[625618] "expr temp" "maybe param" "maybe type" "temp"
                    (625621 'move' call_tmp[625618](375824 call stride _mt[243] this[76472]))
                    unknown call_tmp[625623] "expr temp" "maybe param" "maybe type" "temp"
                    (625626 'move' call_tmp[625623](77044 call chpl_direct_range_iter low[76991] high[76998] call_tmp[625618]))
                    (77039 'move' _iterator[77037](77042 call _getIterator call_tmp[625623]))
                    Defer
                    {
                      {
                        (77050 call _freeIterator _iterator[77037])
                      }
                    }
                    { scopeless type
                      (77054 'move' _indexOfInterest[77035](77057 call iteratorIndex _iterator[77037]))
                    }
                    ForLoop[77059]
                    {
                      unknown i[77062] "index var" "insert auto destroy"
                      (476288 'end of statement')
                      (77064 'move' i[77062] _indexOfInterest[77035])
                      (476289 'end of statement' i[77062])
                      {
                        unknown yret[511687] "YVV" "temp"
                        (511690 'move' yret[511687](511689 'deref' i[77062]))
                        (511692 yield yret[511687])
                        (476291 'end of statement' i[77062])
                      }
                      label _continueLabel[77070]
                      _indexOfInterest[77035]
                      _iterator[77037]
                    }
                    label _breakLabel[77072]
                  }
                }
                {
                  unknown call_tmp[625630] "expr temp" "maybe param" "maybe type" "temp"
                  (625633 'move' call_tmp[625630](77083 call _high _mt[243] this[76472]))
                  unknown call_tmp[625637] "expr temp" "maybe param" "maybe type" "temp"
                  (625640 'move' call_tmp[625637](77087 call _low _mt[243] this[76472]))
                  unknown call_tmp[625644] "expr temp" "maybe param" "maybe type" "temp"
                  (625647 'move' call_tmp[625644](77091 call _low _mt[243] this[76472]))
                  unknown call_tmp[625649] "maybe param" "maybe type" "temp"
                  (625652 'move' call_tmp[625649](77078 call _computeBlock len[76575] numChunks[76606] chunk[77181] call_tmp[625630] call_tmp[625637] call_tmp[625644]))
                  const tmp[77076] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541339 'init var' tmp[77076] call_tmp[625649])
                  (77096 call _check_tuple_var_decl tmp[77076] 2)
                  (476293 'end of statement')
                  unknown call_tmp[625654] "maybe param" "maybe type" "temp"
                  (625657 'move' call_tmp[625654](77101 call tmp[77076] 0))
                  const lo[77099] "dead at end of block" "const" "insert auto destroy"
                  (541341 'init var' lo[77099] call_tmp[625654])
                  unknown call_tmp[625659] "maybe param" "maybe type" "temp"
                  (625662 'move' call_tmp[625659](77106 call tmp[77076] 1))
                  const hi[77104] "dead at end of block" "const" "insert auto destroy"
                  (541343 'init var' hi[77104] call_tmp[625659])
                  (77109 'end of statement')
                  {
                    unknown _indexOfInterest[77111] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77113] "expr temp" "temp"
                    unknown call_tmp[625664] "expr temp" "maybe param" "maybe type" "temp"
                    (625667 'move' call_tmp[625664](77120 call chpl_direct_range_iter lo[77099] hi[77104] 1))
                    (77115 'move' _iterator[77113](77118 call _getIterator call_tmp[625664]))
                    Defer
                    {
                      {
                        (77126 call _freeIterator _iterator[77113])
                      }
                    }
                    { scopeless type
                      (77130 'move' _indexOfInterest[77111](77133 call iteratorIndex _iterator[77113]))
                    }
                    ForLoop[77135]
                    {
                      unknown i[77138] "index var" "insert auto destroy"
                      (476295 'end of statement')
                      (77140 'move' i[77138] _indexOfInterest[77111])
                      (476296 'end of statement' i[77138])
                      {
                        unknown yret[511694] "YVV" "temp"
                        unknown call_tmp[625671] "expr temp" "maybe param" "maybe type" "temp"
                        (625674 'move' call_tmp[625671](77146 call(375834 call (partial) chpl_intToIdx _mt[243] this[76472]) i[77138]))
                        (511697 'move' yret[511694](511696 'deref' call_tmp[625671]))
                        (511699 yield yret[511694])
                        (476298 'end of statement' i[77138])
                      }
                      label _continueLabel[77148]
                      _indexOfInterest[77111]
                      _iterator[77113]
                    }
                    label _breakLabel[77150]
                  }
                }
              }
              (77157 call _downEndCount _coforallCount[77154] nil[44])
              (77156 'coforall loop')
            }
            label _continueLabel[77167]
            _indexOfInterest[77162]
            _iterator[77163]
          }
          label _breakLabel[77168]
          Defer
          {
            {
              (77210 call _endCountFree _coforallCount[77154])
            }
          }
          (77215 call _waitEndCount _coforallCount[77154] 1 numTasks[77155])
        }
        {
          const _coforallCount[77227] "const" "end count" "temp"
          (77284 'move' _coforallCount[77227](77281 call _endCountAlloc 1))
          unknown _indexOfInterest[77235] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77236] "expr temp" "temp"
          (77245 'move' _iterator[77236](77243 call _getIterator tmpIter[76942]))
          Defer
          {
            {
              (77261 call _freeIterator _iterator[77236])
            }
          }
          { scopeless type
            (77250 'move' _indexOfInterest[77235](77247 call iteratorIndex _iterator[77236]))
          }
          ForLoop[77237]
          {
            unknown chunk[77254] "coforall index var" "index var" "insert auto destroy"
            (476304 'end of statement')
            (77256 'move' chunk[77254] _indexOfInterest[77235])
            (476305 'end of statement' chunk[77254])
            (77268 call _upEndCount _coforallCount[77227] 1)
            (476307 'end of statement')
            {
              {
                unknown call_tmp[625678] "expr temp" "maybe param" "maybe type" "temp"
                (625681 'move' call_tmp[625678](375726 call stridable _mt[243] this[76472]))
                unknown call_tmp[625683] "expr temp" "maybe param" "maybe type" "temp"
                (625686 'move' call_tmp[625683](76937 call _cond_test call_tmp[625678]))
                if call_tmp[625683]
                {
                  unknown call_tmp[625688] "expr temp" "maybe param" "maybe type" "temp"
                  (625691 'move' call_tmp[625688](76720 call - len[76575] 1))
                  unknown call_tmp[625693] "maybe param" "maybe type" "temp"
                  (625696 'move' call_tmp[625693](76722 call _computeBlock len[76575] numChunks[76606] chunk[77254] call_tmp[625688]))
                  const tmp[76723] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541345 'init var' tmp[76723] call_tmp[625693])
                  (76730 call _check_tuple_var_decl tmp[76723] 2)
                  (476308 'end of statement')
                  unknown call_tmp[625698] "maybe param" "maybe type" "temp"
                  (625701 'move' call_tmp[625698](76724 call tmp[76723] 0))
                  const lo[76708] "dead at end of block" "const" "insert auto destroy"
                  (541347 'init var' lo[76708] call_tmp[625698])
                  unknown call_tmp[625703] "maybe param" "maybe type" "temp"
                  (625706 'move' call_tmp[625703](76727 call tmp[76723] 1))
                  const hi[76710] "dead at end of block" "const" "insert auto destroy"
                  (541349 'init var' hi[76710] call_tmp[625703])
                  (76735 'end of statement')
                  unknown call_tmp[625708] "expr temp" "maybe param" "maybe type" "temp"
                  (625711 'move' call_tmp[625708](76740 call - lo[76708] 1))
                  unknown call_tmp[625713] "maybe param" "maybe type" "temp"
                  (625716 'move' call_tmp[625713](76742 call - hi[76710] call_tmp[625708]))
                  const mylen[76744] "dead at end of block" "const" "insert auto destroy"
                  (541351 'init var' mylen[76744] call_tmp[625713])
                  (76747 'end of statement')
                  unknown call_tmp[625720] "maybe param" "maybe type" "temp"
                  (625723 'move' call_tmp[625720](76751 call(375736 call (partial) orderToIndex _mt[243] this[76472]) lo[76708]))
                  unknown low[76752] "dead at end of block" "insert auto destroy"
                  (541353 'init var' low[76752] call_tmp[625720])
                  (76755 'end of statement')
                  unknown call_tmp[625729] "expr temp" "maybe param" "maybe type" "temp"
                  (625732 'move' call_tmp[625729](375746 call strType _mt[243] this[76472]))
                  unknown call_tmp[625734] "expr temp" "maybe param" "maybe type" "temp"
                  (625737 'move' call_tmp[625734](76760 call chpl__idxToInt low[76752]))
                  unknown call_tmp[625739] "expr temp" "maybe param" "maybe type" "temp"
                  (625742 'move' call_tmp[625739](76762 call _cast call_tmp[625729] call_tmp[625734]))
                  unknown call_tmp[625746] "expr temp" "maybe param" "maybe type" "temp"
                  (625749 'move' call_tmp[625746](375750 call stride _mt[243] this[76472]))
                  unknown call_tmp[625753] "expr temp" "maybe param" "maybe type" "temp"
                  (625756 'move' call_tmp[625753](375755 call strType _mt[243] this[76472]))
                  unknown call_tmp[625758] "expr temp" "maybe param" "maybe type" "temp"
                  (625761 'move' call_tmp[625758](76767 call - mylen[76744] 1))
                  unknown call_tmp[625763] "expr temp" "maybe param" "maybe type" "temp"
                  (625766 'move' call_tmp[625763](76770 call _cast call_tmp[625753] call_tmp[625758]))
                  unknown call_tmp[625768] "expr temp" "maybe param" "maybe type" "temp"
                  (625771 'move' call_tmp[625768](76772 call * call_tmp[625746] call_tmp[625763]))
                  unknown call_tmp[625773] "expr temp" "maybe param" "maybe type" "temp"
                  (625776 'move' call_tmp[625773](76774 call + call_tmp[625739] call_tmp[625768]))
                  unknown call_tmp[625778] "maybe param" "maybe type" "temp"
                  (625781 'move' call_tmp[625778](76777 call(375741 call (partial) chpl_intToIdx _mt[243] this[76472]) call_tmp[625773]))
                  unknown high[76778] "dead at end of block" "insert auto destroy"
                  (541355 'init var' high[76778] call_tmp[625778])
                  (76781 'end of statement' hi[76710] lo[76708] lo[76708] low[76752] mylen[76744])
                  unknown call_tmp[625785] "expr temp" "maybe param" "maybe type" "temp"
                  (625788 'move' call_tmp[625785](375759 call stride _mt[243] this[76472]))
                  unknown call_tmp[625790] "expr temp" "maybe param" "maybe type" "temp"
                  (625793 'move' call_tmp[625790](76784 call < call_tmp[625785] 0))
                  unknown call_tmp[625795] "expr temp" "maybe param" "maybe type" "temp"
                  (625798 'move' call_tmp[625795](76791 call _cond_test call_tmp[625790]))
                  if call_tmp[625795]
                  {
                    (76788 call <=> low[76752] high[76778])
                    (476314 'end of statement' low[76752] high[76778])
                  }
                  {
                    unknown _indexOfInterest[76808] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76809] "expr temp" "temp"
                    unknown call_tmp[625802] "expr temp" "maybe param" "maybe type" "temp"
                    (625805 'move' call_tmp[625802](375766 call stride _mt[243] this[76472]))
                    unknown call_tmp[625807] "expr temp" "maybe param" "maybe type" "temp"
                    (625810 'move' call_tmp[625807](76827 call chpl_direct_range_iter low[76752] high[76778] call_tmp[625802]))
                    (76818 'move' _iterator[76809](76816 call _getIterator call_tmp[625807]))
                    Defer
                    {
                      {
                        (76843 call _freeIterator _iterator[76809])
                      }
                    }
                    { scopeless type
                      (76832 'move' _indexOfInterest[76808](76829 call iteratorIndex _iterator[76809]))
                    }
                    ForLoop[76810]
                    {
                      unknown i[76836] "index var" "insert auto destroy"
                      (476318 'end of statement')
                      (76838 'move' i[76836] _indexOfInterest[76808])
                      (476319 'end of statement' i[76836])
                      {
                        unknown yret[511701] "YVV" "temp"
                        (511704 'move' yret[511701](511703 'deref' i[76836]))
                        (511706 yield yret[511701])
                        (476321 'end of statement' i[76836])
                      }
                      label _continueLabel[76813]
                      _indexOfInterest[76808]
                      _iterator[76809]
                    }
                    label _breakLabel[76814]
                  }
                }
                {
                  unknown call_tmp[625814] "expr temp" "maybe param" "maybe type" "temp"
                  (625817 'move' call_tmp[625814](76861 call _high _mt[243] this[76472]))
                  unknown call_tmp[625821] "expr temp" "maybe param" "maybe type" "temp"
                  (625824 'move' call_tmp[625821](76865 call _low _mt[243] this[76472]))
                  unknown call_tmp[625828] "expr temp" "maybe param" "maybe type" "temp"
                  (625831 'move' call_tmp[625828](76869 call _low _mt[243] this[76472]))
                  unknown call_tmp[625833] "maybe param" "maybe type" "temp"
                  (625836 'move' call_tmp[625833](76872 call _computeBlock len[76575] numChunks[76606] chunk[77254] call_tmp[625814] call_tmp[625821] call_tmp[625828]))
                  const tmp[76873] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541357 'init var' tmp[76873] call_tmp[625833])
                  (76880 call _check_tuple_var_decl tmp[76873] 2)
                  (476323 'end of statement')
                  unknown call_tmp[625838] "maybe param" "maybe type" "temp"
                  (625841 'move' call_tmp[625838](76874 call tmp[76873] 0))
                  const lo[76850] "dead at end of block" "const" "insert auto destroy"
                  (541359 'init var' lo[76850] call_tmp[625838])
                  unknown call_tmp[625843] "maybe param" "maybe type" "temp"
                  (625846 'move' call_tmp[625843](76877 call tmp[76873] 1))
                  const hi[76852] "dead at end of block" "const" "insert auto destroy"
                  (541361 'init var' hi[76852] call_tmp[625843])
                  (76885 'end of statement')
                  {
                    unknown _indexOfInterest[76899] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76900] "expr temp" "temp"
                    unknown call_tmp[625848] "expr temp" "maybe param" "maybe type" "temp"
                    (625851 'move' call_tmp[625848](76914 call chpl_direct_range_iter lo[76850] hi[76852] 1))
                    (76909 'move' _iterator[76900](76907 call _getIterator call_tmp[625848]))
                    Defer
                    {
                      {
                        (76930 call _freeIterator _iterator[76900])
                      }
                    }
                    { scopeless type
                      (76919 'move' _indexOfInterest[76899](76916 call iteratorIndex _iterator[76900]))
                    }
                    ForLoop[76901]
                    {
                      unknown i[76923] "index var" "insert auto destroy"
                      (476325 'end of statement')
                      (76925 'move' i[76923] _indexOfInterest[76899])
                      (476326 'end of statement' i[76923])
                      {
                        unknown yret[511708] "YVV" "temp"
                        unknown call_tmp[625855] "expr temp" "maybe param" "maybe type" "temp"
                        (625858 'move' call_tmp[625855](76895 call(375775 call (partial) chpl_intToIdx _mt[243] this[76472]) i[76923]))
                        (511711 'move' yret[511708](511710 'deref' call_tmp[625855]))
                        (511713 yield yret[511708])
                        (476328 'end of statement' i[76923])
                      }
                      label _continueLabel[76904]
                      _indexOfInterest[76899]
                      _iterator[76900]
                    }
                    label _breakLabel[76905]
                  }
                }
              }
              (77230 call _downEndCount _coforallCount[77227] nil[44])
              (77229 'coforall loop')
            }
            label _continueLabel[77240]
            _indexOfInterest[77235]
            _iterator[77236]
          }
          label _breakLabel[77241]
          Defer
          {
            {
              (77272 call _endCountFree _coforallCount[77227])
            }
          }
          (77277 call _waitEndCount _coforallCount[77227] 1)
        }
      }
    }
    (511678 return ret[511676])
  }
  where {
    unknown tmp[420785] "maybe param" "temp"
    (420796 'move' tmp[420785](76482 call == tag[76467] standalone[451]))
    unknown call_tmp[625860] "expr temp" "maybe param" "maybe type" "temp"
    (625863 'move' call_tmp[625860](420798 call _cond_invalid tmp[420785]))
    if call_tmp[625860]
    {
      (420801 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558624] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558625] "maybe param" "temp"
    unknown call_tmp[625865] "expr temp" "maybe param" "maybe type" "temp"
    (625868 'move' call_tmp[625865](420786 call isTrue tmp[420785]))
    (558630 'move' tmp[558625](558628 call _cond_test call_tmp[625865]))
    if tmp[558625]
    {
      unknown tmp[558632] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625870] "expr temp" "maybe param" "maybe type" "temp"
      (625873 'move' call_tmp[625870](76485 call ! localeModelHasSublocales[187449]))
      (558634 'move' tmp[558632](420789 call isTrue call_tmp[625870]))
      (558639 'move' tmp[558624](558636 '_paramFoldLogical' tmp[558625] tmp[558632]))
    }
    {
      (558644 'move' tmp[558624](558641 '_paramFoldLogical' tmp[558625] 0))
    }
    (748269 call chpl_statementLevelSymbol tmp[558624])
  }
  function range[64319](?).these[77321](arg _mt[77326]:_MT[238], arg this[77323]:range[64319](?) :
  range[64319](?), param arg tag[77318]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511717] "RVV" "temp"
    unknown call_tmp[625875] "expr temp" "maybe param" "maybe type" "temp"
    (625878 'move' call_tmp[625875](77338 call isBoundedRange this[77323]))
    unknown call_tmp[625880] "expr temp" "maybe param" "maybe type" "temp"
    (625883 'move' call_tmp[625880](77339 call ! call_tmp[625875]))
    unknown call_tmp[625885] "expr temp" "maybe param" "maybe type" "temp"
    (625888 'move' call_tmp[625885](77346 call _cond_test call_tmp[625880]))
    if call_tmp[625885]
    {
      (77344 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420869] "maybe param" "temp"
    (420880 'move' tmp[420869] 1)
    unknown call_tmp[625890] "expr temp" "maybe param" "maybe type" "temp"
    (625893 'move' call_tmp[625890](420882 call _cond_invalid tmp[420869]))
    if call_tmp[625890]
    {
      (420885 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558651] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558652] "maybe param" "temp"
    unknown call_tmp[625895] "expr temp" "maybe param" "maybe type" "temp"
    (625898 'move' call_tmp[625895](420870 call isTrue tmp[420869]))
    (558657 'move' tmp[558652](558655 call _cond_test call_tmp[625895]))
    if tmp[558652]
    {
      unknown tmp[558659] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625902] "expr temp" "maybe param" "maybe type" "temp"
      (625905 'move' call_tmp[625902](77358 call(77354 call (partial) isAmbiguous _mt[243] this[77323])))
      (558661 'move' tmp[558659](420873 call isTrue call_tmp[625902]))
      (558666 'move' tmp[558651](558663 '_paramFoldLogical' tmp[558652] tmp[558659]))
    }
    {
      (558671 'move' tmp[558651](558668 '_paramFoldLogical' tmp[558652] 0))
    }
    unknown call_tmp[625907] "expr temp" "maybe param" "maybe type" "temp"
    (625910 'move' call_tmp[625907](77369 call _cond_test tmp[558651]))
    if call_tmp[625907]
    {
      (77367 call boundsCheckHalt module=[255] HaltWrappers[210016] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358063 'referenced modules list' HaltWrappers[210016])
    }
    unknown call_tmp[625912] "expr temp" "maybe param" "maybe type" "temp"
    (625915 'move' call_tmp[625912](77396 call _cond_test debugChapelRange[64198]))
    if call_tmp[625912]
    {
      (77394 call chpl_debug_writeln "*** In range leader:")
    }
    unknown call_tmp[625917] "expr temp" "maybe param" "maybe type" "temp"
    (625920 'move' call_tmp[625917](358068 call here[90438]))
    unknown call_tmp[625924] "maybe param" "maybe type" "temp"
    (625927 'move' call_tmp[625924](77408 call(77404 call (partial) getChildCount _mt[243] call_tmp[625917])))
    const numSublocs[77409] "dead at end of block" "const" "insert auto destroy"
    (541363 'init var' numSublocs[77409] call_tmp[625924])
    (77412 'end of statement')
    unknown tmp[421058] "maybe param" "temp"
    (421069 'move' tmp[421058] localeModelHasSublocales[187449])
    unknown call_tmp[625929] "expr temp" "maybe param" "maybe type" "temp"
    (625932 'move' call_tmp[625929](421071 call _cond_invalid tmp[421058]))
    if call_tmp[625929]
    {
      (421074 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558678] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558679] "maybe param" "temp"
    unknown call_tmp[625934] "expr temp" "maybe param" "maybe type" "temp"
    (625937 'move' call_tmp[625934](421059 call isTrue tmp[421058]))
    (558684 'move' tmp[558679](558682 call _cond_test call_tmp[625934]))
    if tmp[558679]
    {
      unknown tmp[558686] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625939] "expr temp" "maybe param" "maybe type" "temp"
      (625942 'move' call_tmp[625939](77416 call != numSublocs[77409] 0))
      (558688 'move' tmp[558686](421062 call isTrue call_tmp[625939]))
      (558693 'move' tmp[558678](558690 '_paramFoldLogical' tmp[558679] tmp[558686]))
    }
    {
      (558698 'move' tmp[558678](558695 '_paramFoldLogical' tmp[558679] 0))
    }
    unknown call_tmp[625944] "expr temp" "maybe param" "maybe type" "temp"
    (625947 'move' call_tmp[625944](79138 call _cond_test tmp[558678]))
    if call_tmp[625944]
    {
      unknown call_tmp[625951] "maybe param" "maybe type" "temp"
      (625954 'move' call_tmp[625951](77421 call size _mt[243] this[77323]))
      const len[77424] "dead at end of block" "const" "insert auto destroy"
      (541365 'init var' len[77424] call_tmp[625951])
      (77427 'end of statement')
      const tasksPerLocale[77430] "dead at end of block" "const" "insert auto destroy"
      (541367 'init var' tasksPerLocale[77430] dataParTasksPerLocale[93284])
      (77433 'end of statement')
      const ignoreRunning[77435] "dead at end of block" "const" "insert auto destroy"
      (541369 'init var' ignoreRunning[77435] dataParIgnoreRunningTasks[93290])
      (77438 'end of statement')
      const minIndicesPerTask[77440] "dead at end of block" "const" "insert auto destroy"
      (541371 'init var' minIndicesPerTask[77440] dataParMinGranularity[93296])
      (77443 'end of statement')
      unknown dptpl[77456] "dead at end of block" "insert auto destroy"
      unknown tmp[558705] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558706] "maybe param" "temp"
      unknown call_tmp[625956] "expr temp" "maybe param" "maybe type" "temp"
      (625959 'move' call_tmp[625956](77446 call == tasksPerLocale[77430] 0))
      (558711 'move' tmp[558706](558709 call _cond_test call_tmp[625956]))
      if tmp[558706]
      {
        unknown tmp[558713] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[625961] "expr temp" "maybe param" "maybe type" "temp"
        (625964 'move' call_tmp[625961](358071 call here[90438]))
        (558715 'move' tmp[558713](77449 call maxTaskPar _mt[243] call_tmp[625961]))
        (558720 'move' tmp[558705](558717 '_paramFoldLogical' tmp[558706] tmp[558713]))
      }
      {
        (558725 'move' tmp[558705](558722 '_paramFoldLogical' tmp[558706] tasksPerLocale[77430]))
      }
      (541373 'init var' dptpl[77456] tmp[558705])
      (77459 'end of statement')
      unknown call_tmp[625968] "expr temp" "maybe param" "maybe type" "temp"
      (625971 'move' call_tmp[625968](77461 call ! ignoreRunning[77435]))
      unknown call_tmp[625973] "expr temp" "maybe param" "maybe type" "temp"
      (625976 'move' call_tmp[625973](77498 call _cond_test call_tmp[625968]))
      if call_tmp[625973]
      {
        unknown call_tmp[625978] "expr temp" "maybe param" "maybe type" "temp"
        (625981 'move' call_tmp[625978](358073 call here[90438]))
        unknown call_tmp[625985] "expr temp" "maybe param" "maybe type" "temp"
        (625988 'move' call_tmp[625985](77470 call(77466 call (partial) runningTasks _mt[243] call_tmp[625978])))
        unknown call_tmp[625990] "maybe param" "maybe type" "temp"
        (625993 'move' call_tmp[625990](77472 call - call_tmp[625985] 1))
        const otherTasks[77474] "dead at end of block" "const" "insert auto destroy"
        (541375 'init var' otherTasks[77474] call_tmp[625990])
        (77477 'end of statement')
        unknown tmp[558732] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558733] "maybe param" "temp"
        unknown call_tmp[625995] "expr temp" "maybe param" "maybe type" "temp"
        (625998 'move' call_tmp[625995](77482 call < otherTasks[77474] dptpl[77456]))
        (558738 'move' tmp[558733](558736 call _cond_test call_tmp[625995]))
        if tmp[558733]
        {
          unknown tmp[558740] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[626000] "expr temp" "maybe param" "maybe type" "temp"
          (626003 'move' call_tmp[626000](77486 call - dptpl[77456] otherTasks[77474]))
          (558742 'move' tmp[558740](77489 call _cast int(64)[13] call_tmp[626000]))
          (558747 'move' tmp[558732](558744 '_paramFoldLogical' tmp[558733] tmp[558740]))
        }
        {
          (558752 'move' tmp[558732](558749 '_paramFoldLogical' tmp[558733] 1))
        }
        (77495 call = dptpl[77456] tmp[558732])
        (476340 'end of statement' dptpl[77456] otherTasks[77474] dptpl[77456] dptpl[77456] otherTasks[77474])
      }
      unknown call_tmp[626005] "maybe param" "maybe type" "temp"
      (626008 'move' call_tmp[626005](77506 call min numSublocs[77409] dptpl[77456]))
      const numSublocTasks[77507] "dead at end of block" "const" "insert auto destroy"
      (541377 'init var' numSublocTasks[77507] call_tmp[626005])
      (77510 'end of statement')
      const numChunks[77526] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558759] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558760] "maybe param" "temp"
      unknown call_tmp[626010] "expr temp" "maybe param" "maybe type" "temp"
      (626013 'move' call_tmp[626010](77513 'task_get_serial'))
      (558765 'move' tmp[558760](558763 call _cond_test call_tmp[626010]))
      if tmp[558760]
      {
        (558770 'move' tmp[558759](558767 '_paramFoldLogical' tmp[558760] 1))
      }
      {
        unknown tmp[558772] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (558774 'move' tmp[558772](77522 call _computeNumChunks numSublocTasks[77507](ignoreRunning = 1) minIndicesPerTask[77440] len[77424]))
        (558779 'move' tmp[558759](558776 '_paramFoldLogical' tmp[558760] tmp[558772]))
      }
      (541379 'init var' numChunks[77526] tmp[558759])
      (77529 'end of statement' tasksPerLocale[77430] tasksPerLocale[77430] numSublocs[77409] dptpl[77456] numSublocTasks[77507] minIndicesPerTask[77440] len[77424])
      unknown call_tmp[626015] "expr temp" "maybe param" "maybe type" "temp"
      (626018 'move' call_tmp[626015](77646 call _cond_test debugDataParNuma[93410]))
      if call_tmp[626015]
      {
        (77643 call chpl_debug_writeln "### numSublocs = " numSublocs[77409] "\n" "### numTasksPerSubloc = " numSublocTasks[77507] "\n" "### ignoreRunning = " ignoreRunning[77435] "\n" "### minIndicesPerTask = " minIndicesPerTask[77440] "\n" "### numChunks = " numChunks[77526])
        (476351 'end of statement' numSublocs[77409] numSublocTasks[77507] ignoreRunning[77435] minIndicesPerTask[77440] numChunks[77526])
      }
      unknown call_tmp[626020] "expr temp" "maybe param" "maybe type" "temp"
      (626023 'move' call_tmp[626020](77652 call == numChunks[77526] 1))
      unknown call_tmp[626025] "expr temp" "maybe param" "maybe type" "temp"
      (626028 'move' call_tmp[626025](78751 call _cond_test call_tmp[626020]))
      if call_tmp[626025]
      {
        unknown yret[511721] "YVV" "temp"
        unknown call_tmp[626030] "expr temp" "maybe param" "maybe type" "temp"
        (626033 'move' call_tmp[626030](77657 call - len[77424] 1))
        unknown call_tmp[626035] "expr temp" "maybe param" "maybe type" "temp"
        (626038 'move' call_tmp[626035](77659 call chpl_build_bounded_range 0 call_tmp[626030]))
        unknown call_tmp[626040] "expr temp" "maybe param" "maybe type" "temp"
        (626043 'move' call_tmp[626040](77661 call _build_tuple call_tmp[626035]))
        (511724 'move' yret[511721](511723 'deref' call_tmp[626040]))
        (511726 yield yret[511721])
        (476357 'end of statement' len[77424])
      }
      {
        {
          unknown tmpIter[78210] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[626045] "expr temp" "maybe param" "maybe type" "temp"
          (626048 'move' call_tmp[626045](77668 call chpl_build_low_bounded_range 0))
          (78213 'move' tmpIter[78210](77671 call # call_tmp[626045] numChunks[77526]))
          unknown isRngDomArr[78731] "maybe param" "temp"
          unknown tmp[420974] "maybe param" "temp"
          (420985 'move' tmp[420974](78733 call isBoundedRange tmpIter[78210]))
          unknown call_tmp[626050] "expr temp" "maybe param" "maybe type" "temp"
          (626053 'move' call_tmp[626050](420987 call _cond_invalid tmp[420974]))
          if call_tmp[626050]
          {
            (420990 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558813] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558814] "maybe param" "temp"
          unknown call_tmp[626055] "expr temp" "maybe param" "maybe type" "temp"
          (626058 'move' call_tmp[626055](420975 call isTrue tmp[420974]))
          (558819 'move' tmp[558814](558817 call _cond_test call_tmp[626055]))
          if tmp[558814]
          {
            (558824 'move' tmp[558813](558821 '_paramFoldLogical' tmp[558814] 1))
          }
          {
            unknown tmp[420995] "maybe param" "temp"
            (421006 'move' tmp[420995](78736 call isDomain tmpIter[78210]))
            unknown call_tmp[626060] "expr temp" "maybe param" "maybe type" "temp"
            (626063 'move' call_tmp[626060](421008 call _cond_invalid tmp[420995]))
            if call_tmp[626060]
            {
              (421011 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[558786] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[558787] "maybe param" "temp"
            unknown call_tmp[626065] "expr temp" "maybe param" "maybe type" "temp"
            (626068 'move' call_tmp[626065](420996 call isTrue tmp[420995]))
            (558792 'move' tmp[558787](558790 call _cond_test call_tmp[626065]))
            if tmp[558787]
            {
              (558797 'move' tmp[558786](558794 '_paramFoldLogical' tmp[558787] 1))
            }
            {
              unknown tmp[558799] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[626070] "expr temp" "maybe param" "maybe type" "temp"
              (626073 'move' call_tmp[626070](78739 call isArray tmpIter[78210]))
              (558801 'move' tmp[558799](421000 call isTrue call_tmp[626070]))
              (558806 'move' tmp[558786](558803 '_paramFoldLogical' tmp[558787] tmp[558799]))
            }
            unknown tmp[558826] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (558828 'move' tmp[558826](420979 call isTrue tmp[558786]))
            (558833 'move' tmp[558813](558830 '_paramFoldLogical' tmp[558814] tmp[558826]))
          }
          (78746 'move' isRngDomArr[78731] tmp[558813])
          if isRngDomArr[78731]
          {
            const _coforallCount[78603] "const" "end count" "temp"
            (78668 'move' _coforallCount[78603](78665 call _endCountAlloc 0))
            unknown numTasks[78604] "temp"
            (78652 'move' numTasks[78604](78648 call size _mt[243] tmpIter[78210]))
            (78643 call _upEndCount _coforallCount[78603] 0 numTasks[78604])
            (476360 'end of statement')
            unknown _indexOfInterest[78610] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78611] "expr temp" "temp"
            (78620 'move' _iterator[78611](78618 call _getIterator tmpIter[78210]))
            Defer
            {
              {
                (78636 call _freeIterator _iterator[78611])
              }
            }
            { scopeless type
              (78625 'move' _indexOfInterest[78610](78622 call iteratorIndex _iterator[78611]))
            }
            ForLoop[78612]
            {
              unknown chunk[78629] "coforall index var" "index var" "insert auto destroy"
              (476362 'end of statement')
              (78631 'move' chunk[78629] _indexOfInterest[78610])
              (476363 'end of statement' chunk[78629])
              const tmp[78216] "const" "temp"
              unknown call_tmp[626077] "expr temp" "maybe param" "maybe type" "temp"
              (626080 'move' call_tmp[626077](358078 call here[90438]))
              unknown call_tmp[626084] "expr temp" "maybe param" "maybe type" "temp"
              (626087 'move' call_tmp[626084](78226 call(78223 call (partial) getChild _mt[243] call_tmp[626077]) chunk[78629]))
              unknown call_tmp[626089] "expr temp" "maybe param" "maybe type" "temp"
              (626092 'move' call_tmp[626089](78221 '_wide_get_locale' call_tmp[626084]))
              (78218 'move' tmp[78216](78220 'deref' call_tmp[626089]))
              {
                {
                  unknown call_tmp[626094] "expr temp" "maybe param" "maybe type" "temp"
                  (626097 'move' call_tmp[626094](78234 call _cond_test debugDataParNuma[93410]))
                  if call_tmp[626094]
                  {
                    unknown call_tmp[626099] "expr temp" "maybe param" "maybe type" "temp"
                    (626102 'move' call_tmp[626099](78243 call chpl_getSubloc))
                    unknown call_tmp[626104] "expr temp" "maybe param" "maybe type" "temp"
                    (626107 'move' call_tmp[626104](78240 call != chunk[78629] call_tmp[626099]))
                    unknown call_tmp[626109] "expr temp" "maybe param" "maybe type" "temp"
                    (626112 'move' call_tmp[626109](78238 call _cond_test call_tmp[626104]))
                    if call_tmp[626109]
                    {
                      unknown call_tmp[626114] "expr temp" "maybe param" "maybe type" "temp"
                      (626117 'move' call_tmp[626114](78252 call chpl_getSubloc))
                      (78247 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78629] ", on " call_tmp[626114] ") ***")
                      (476365 'end of statement' chunk[78629])
                    }
                  }
                  unknown call_tmp[626119] "expr temp" "maybe param" "maybe type" "temp"
                  (626122 'move' call_tmp[626119](78264 call - len[77424] 1))
                  unknown call_tmp[626124] "maybe param" "maybe type" "temp"
                  (626127 'move' call_tmp[626124](78259 call _computeBlock len[77424] numChunks[77526] chunk[78629] call_tmp[626119]))
                  const tmp[78257] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541381 'init var' tmp[78257] call_tmp[626124])
                  (78269 call _check_tuple_var_decl tmp[78257] 2)
                  (476367 'end of statement')
                  unknown call_tmp[626129] "maybe param" "maybe type" "temp"
                  (626132 'move' call_tmp[626129](78274 call tmp[78257] 0))
                  const lo[78272] "dead at end of block" "const" "insert auto destroy"
                  (541383 'init var' lo[78272] call_tmp[626129])
                  unknown call_tmp[626134] "maybe param" "maybe type" "temp"
                  (626137 'move' call_tmp[626134](78279 call tmp[78257] 1))
                  const hi[78277] "dead at end of block" "const" "insert auto destroy"
                  (541385 'init var' hi[78277] call_tmp[626134])
                  (78282 'end of statement')
                  unknown call_tmp[626139] "maybe param" "maybe type" "temp"
                  (626142 'move' call_tmp[626139](78286 call chpl_build_bounded_range lo[78272] hi[78277]))
                  const locRange[78284] "dead at end of block" "const" "insert auto destroy"
                  (541387 'init var' locRange[78284] call_tmp[626139])
                  (78290 'end of statement')
                  unknown call_tmp[626146] "maybe param" "maybe type" "temp"
                  (626149 'move' call_tmp[626146](78294 call size _mt[243] locRange[78284]))
                  const locLen[78292] "dead at end of block" "const" "insert auto destroy"
                  (541389 'init var' locLen[78292] call_tmp[626146])
                  (78298 'end of statement')
                  const numSublocTasks[78300] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[558840] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[558841] "maybe param" "temp"
                  unknown call_tmp[626151] "expr temp" "maybe param" "maybe type" "temp"
                  (626154 'move' call_tmp[626151](78305 call % dptpl[77456] numChunks[77526]))
                  unknown call_tmp[626156] "expr temp" "maybe param" "maybe type" "temp"
                  (626159 'move' call_tmp[626156](78302 call < chunk[78629] call_tmp[626151]))
                  (558846 'move' tmp[558841](558844 call _cond_test call_tmp[626156]))
                  if tmp[558841]
                  {
                    unknown tmp[558848] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[626161] "expr temp" "maybe param" "maybe type" "temp"
                    (626164 'move' call_tmp[626161](78312 call / dptpl[77456] numChunks[77526]))
                    (558850 'move' tmp[558848](78310 call + call_tmp[626161] 1))
                    (558855 'move' tmp[558840](558852 '_paramFoldLogical' tmp[558841] tmp[558848]))
                  }
                  {
                    unknown tmp[558857] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (558859 'move' tmp[558857](78318 call / dptpl[77456] numChunks[77526]))
                    (558864 'move' tmp[558840](558861 '_paramFoldLogical' tmp[558841] tmp[558857]))
                  }
                  (541391 'init var' numSublocTasks[78300] tmp[558840])
                  (78323 'end of statement')
                  unknown call_tmp[626166] "maybe param" "maybe type" "temp"
                  (626169 'move' call_tmp[626166](78327 call _computeNumChunks numSublocTasks[78300](ignoreRunning = 1) minIndicesPerTask[77440] locLen[78292]))
                  const numTasks[78325] "dead at end of block" "const" "insert auto destroy"
                  (541393 'init var' numTasks[78325] call_tmp[626166])
                  (78334 'end of statement' lo[78272] hi[78277] locRange[78284] chunk[78629] dptpl[77456] numChunks[77526] dptpl[77456] numChunks[77526] dptpl[77456] numChunks[77526] numSublocTasks[78300] minIndicesPerTask[77440] locLen[78292])
                  {
                    unknown tmpIter[78336] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[626171] "expr temp" "maybe param" "maybe type" "temp"
                    (626174 'move' call_tmp[626171](78343 call chpl_build_low_bounded_range 0))
                    (78338 'move' tmpIter[78336](78341 call # call_tmp[626171] numTasks[78325]))
                    unknown isRngDomArr[78346] "maybe param" "temp"
                    unknown tmp[420932] "maybe param" "temp"
                    (420943 'move' tmp[420932](78353 call isBoundedRange tmpIter[78336]))
                    unknown call_tmp[626176] "expr temp" "maybe param" "maybe type" "temp"
                    (626179 'move' call_tmp[626176](420945 call _cond_invalid tmp[420932]))
                    if call_tmp[626176]
                    {
                      (420948 call compilerError "cannot promote short-circuiting || operator")
                    }
                    unknown tmp[558898] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[558899] "maybe param" "temp"
                    unknown call_tmp[626181] "expr temp" "maybe param" "maybe type" "temp"
                    (626184 'move' call_tmp[626181](420933 call isTrue tmp[420932]))
                    (558904 'move' tmp[558899](558902 call _cond_test call_tmp[626181]))
                    if tmp[558899]
                    {
                      (558909 'move' tmp[558898](558906 '_paramFoldLogical' tmp[558899] 1))
                    }
                    {
                      unknown tmp[420953] "maybe param" "temp"
                      (420964 'move' tmp[420953](78358 call isDomain tmpIter[78336]))
                      unknown call_tmp[626186] "expr temp" "maybe param" "maybe type" "temp"
                      (626189 'move' call_tmp[626186](420966 call _cond_invalid tmp[420953]))
                      if call_tmp[626186]
                      {
                        (420969 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[558871] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[558872] "maybe param" "temp"
                      unknown call_tmp[626191] "expr temp" "maybe param" "maybe type" "temp"
                      (626194 'move' call_tmp[626191](420954 call isTrue tmp[420953]))
                      (558877 'move' tmp[558872](558875 call _cond_test call_tmp[626191]))
                      if tmp[558872]
                      {
                        (558882 'move' tmp[558871](558879 '_paramFoldLogical' tmp[558872] 1))
                      }
                      {
                        unknown tmp[558884] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        unknown call_tmp[626196] "expr temp" "maybe param" "maybe type" "temp"
                        (626199 'move' call_tmp[626196](78361 call isArray tmpIter[78336]))
                        (558886 'move' tmp[558884](420958 call isTrue call_tmp[626196]))
                        (558891 'move' tmp[558871](558888 '_paramFoldLogical' tmp[558872] tmp[558884]))
                      }
                      unknown tmp[558911] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (558913 'move' tmp[558911](420937 call isTrue tmp[558871]))
                      (558918 'move' tmp[558898](558915 '_paramFoldLogical' tmp[558899] tmp[558911]))
                    }
                    (78348 'move' isRngDomArr[78346] tmp[558898])
                    if isRngDomArr[78346]
                    {
                      const _coforallCount[78365] "const" "end count" "temp"
                      (78367 'move' _coforallCount[78365](78370 call _endCountAlloc 1))
                      unknown numTasks[78372] "temp"
                      (78374 'move' numTasks[78372](78377 call size _mt[243] tmpIter[78336]))
                      (78381 call _upEndCount _coforallCount[78365] 1 numTasks[78372])
                      (476382 'end of statement')
                      (78386 call chpl_resetTaskSpawn numTasks[78372])
                      (476383 'end of statement')
                      unknown _indexOfInterest[78388] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78390] "expr temp" "temp"
                      (78392 'move' _iterator[78390](78395 call _getIterator tmpIter[78336]))
                      Defer
                      {
                        {
                          (78399 call _freeIterator _iterator[78390])
                        }
                      }
                      { scopeless type
                        (78403 'move' _indexOfInterest[78388](78406 call iteratorIndex _iterator[78390]))
                      }
                      ForLoop[78408]
                      {
                        unknown core[78411] "coforall index var" "index var" "insert auto destroy"
                        (476385 'end of statement')
                        (78413 'move' core[78411] _indexOfInterest[78388])
                        (476386 'end of statement' core[78411])
                        {
                          {
                            unknown call_tmp[626203] "maybe param" "maybe type" "temp"
                            (626206 'move' call_tmp[626203](78422 call _computeBlock locLen[78292] numTasks[78325] core[78411] hi[78277] lo[78272] lo[78272]))
                            const tmp[78420] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541395 'init var' tmp[78420] call_tmp[626203])
                            (78431 call _check_tuple_var_decl tmp[78420] 2)
                            (476388 'end of statement')
                            unknown call_tmp[626208] "maybe param" "maybe type" "temp"
                            (626211 'move' call_tmp[626208](78436 call tmp[78420] 0))
                            const low[78434] "dead at end of block" "const" "insert auto destroy"
                            (541397 'init var' low[78434] call_tmp[626208])
                            unknown call_tmp[626213] "maybe param" "maybe type" "temp"
                            (626216 'move' call_tmp[626213](78441 call tmp[78420] 1))
                            const high[78439] "dead at end of block" "const" "insert auto destroy"
                            (541399 'init var' high[78439] call_tmp[626213])
                            (78444 'end of statement')
                            unknown call_tmp[626218] "expr temp" "maybe param" "maybe type" "temp"
                            (626221 'move' call_tmp[626218](78446 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626218]
                            {
                              unknown call_tmp[626223] "expr temp" "maybe param" "maybe type" "temp"
                              (626226 'move' call_tmp[626223](78460 call chpl_build_bounded_range low[78434] high[78439]))
                              (78450 call chpl_debug_writeln "### chunk = " chunk[78629] "  core = " core[78411] "  " "locRange = " locRange[78284] "  coreRange = " call_tmp[626223])
                              (476389 'end of statement' chunk[78629] core[78411] locRange[78284] low[78434] high[78439])
                            }
                            unknown yret[511728] "YVV" "temp"
                            unknown call_tmp[626228] "expr temp" "maybe param" "maybe type" "temp"
                            (626231 'move' call_tmp[626228](78468 call chpl_build_bounded_range low[78434] high[78439]))
                            unknown call_tmp[626233] "expr temp" "maybe param" "maybe type" "temp"
                            (626236 'move' call_tmp[626233](78466 call _build_tuple call_tmp[626228]))
                            (511731 'move' yret[511728](511730 'deref' call_tmp[626233]))
                            (511733 yield yret[511728])
                            (476395 'end of statement' low[78434] high[78439])
                          }
                          (78472 call _downEndCount _coforallCount[78365] nil[44])
                          (78417 'coforall loop')
                        }
                        label _continueLabel[78475]
                        _indexOfInterest[78388]
                        _iterator[78390]
                      }
                      label _breakLabel[78477]
                      Defer
                      {
                        {
                          (78481 call _endCountFree _coforallCount[78365])
                        }
                      }
                      (78485 call _waitEndCount _coforallCount[78365] 1 numTasks[78372])
                    }
                    {
                      const _coforallCount[78490] "const" "end count" "temp"
                      (78492 'move' _coforallCount[78490](78495 call _endCountAlloc 1))
                      unknown _indexOfInterest[78497] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78499] "expr temp" "temp"
                      (78501 'move' _iterator[78499](78504 call _getIterator tmpIter[78336]))
                      Defer
                      {
                        {
                          (78508 call _freeIterator _iterator[78499])
                        }
                      }
                      { scopeless type
                        (78512 'move' _indexOfInterest[78497](78515 call iteratorIndex _iterator[78499]))
                      }
                      ForLoop[78517]
                      {
                        unknown core[78520] "coforall index var" "index var" "insert auto destroy"
                        (476402 'end of statement')
                        (78522 'move' core[78520] _indexOfInterest[78497])
                        (476403 'end of statement' core[78520])
                        (78526 call _upEndCount _coforallCount[78490] 1)
                        (476405 'end of statement')
                        {
                          {
                            unknown call_tmp[626238] "maybe param" "maybe type" "temp"
                            (626241 'move' call_tmp[626238](78535 call _computeBlock locLen[78292] numTasks[78325] core[78520] hi[78277] lo[78272] lo[78272]))
                            const tmp[78533] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541401 'init var' tmp[78533] call_tmp[626238])
                            (78544 call _check_tuple_var_decl tmp[78533] 2)
                            (476406 'end of statement')
                            unknown call_tmp[626243] "maybe param" "maybe type" "temp"
                            (626246 'move' call_tmp[626243](78549 call tmp[78533] 0))
                            const low[78547] "dead at end of block" "const" "insert auto destroy"
                            (541403 'init var' low[78547] call_tmp[626243])
                            unknown call_tmp[626248] "maybe param" "maybe type" "temp"
                            (626251 'move' call_tmp[626248](78554 call tmp[78533] 1))
                            const high[78552] "dead at end of block" "const" "insert auto destroy"
                            (541405 'init var' high[78552] call_tmp[626248])
                            (78557 'end of statement')
                            unknown call_tmp[626253] "expr temp" "maybe param" "maybe type" "temp"
                            (626256 'move' call_tmp[626253](78559 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626253]
                            {
                              unknown call_tmp[626258] "expr temp" "maybe param" "maybe type" "temp"
                              (626261 'move' call_tmp[626258](78573 call chpl_build_bounded_range low[78547] high[78552]))
                              (78563 call chpl_debug_writeln "### chunk = " chunk[78629] "  core = " core[78520] "  " "locRange = " locRange[78284] "  coreRange = " call_tmp[626258])
                              (476407 'end of statement' chunk[78629] core[78520] locRange[78284] low[78547] high[78552])
                            }
                            unknown yret[511735] "YVV" "temp"
                            unknown call_tmp[626263] "expr temp" "maybe param" "maybe type" "temp"
                            (626266 'move' call_tmp[626263](78581 call chpl_build_bounded_range low[78547] high[78552]))
                            unknown call_tmp[626268] "expr temp" "maybe param" "maybe type" "temp"
                            (626271 'move' call_tmp[626268](78579 call _build_tuple call_tmp[626263]))
                            (511738 'move' yret[511735](511737 'deref' call_tmp[626268]))
                            (511740 yield yret[511735])
                            (476413 'end of statement' low[78547] high[78552])
                          }
                          (78585 call _downEndCount _coforallCount[78490] nil[44])
                          (78530 'coforall loop')
                        }
                        label _continueLabel[78588]
                        _indexOfInterest[78497]
                        _iterator[78499]
                      }
                      label _breakLabel[78590]
                      Defer
                      {
                        {
                          (78594 call _endCountFree _coforallCount[78490])
                        }
                      }
                      (78598 call _waitEndCount _coforallCount[78490] 1)
                    }
                  }
                }
                (78605 call _downEndCount _coforallCount[78603] nil[44])
                (78229 'coforall on block' 1 tmp[78216])
              }
              label _continueLabel[78615]
              _indexOfInterest[78610]
              _iterator[78611]
            }
            label _breakLabel[78616]
            Defer
            {
              {
                (78655 call _endCountFree _coforallCount[78603])
              }
            }
            (78660 call _waitEndCount _coforallCount[78603] 0 numTasks[78604])
          }
          {
            const _coforallCount[78672] "const" "end count" "temp"
            (78728 'move' _coforallCount[78672](78725 call _endCountAlloc 0))
            unknown _indexOfInterest[78679] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78680] "expr temp" "temp"
            (78689 'move' _iterator[78680](78687 call _getIterator tmpIter[78210]))
            Defer
            {
              {
                (78705 call _freeIterator _iterator[78680])
              }
            }
            { scopeless type
              (78694 'move' _indexOfInterest[78679](78691 call iteratorIndex _iterator[78680]))
            }
            ForLoop[78681]
            {
              unknown chunk[78698] "coforall index var" "index var" "insert auto destroy"
              (476423 'end of statement')
              (78700 'move' chunk[78698] _indexOfInterest[78679])
              (476424 'end of statement' chunk[78698])
              (78712 call _upEndCount _coforallCount[78672] 0)
              (476426 'end of statement')
              const tmp[78199] "const" "temp"
              unknown call_tmp[626273] "expr temp" "maybe param" "maybe type" "temp"
              (626276 'move' call_tmp[626273](358075 call here[90438]))
              unknown call_tmp[626280] "expr temp" "maybe param" "maybe type" "temp"
              (626283 'move' call_tmp[626280](77681 call(77676 call (partial) getChild _mt[243] call_tmp[626273]) chunk[78698]))
              unknown call_tmp[626285] "expr temp" "maybe param" "maybe type" "temp"
              (626288 'move' call_tmp[626285](78196 '_wide_get_locale' call_tmp[626280]))
              (78201 'move' tmp[78199](78197 'deref' call_tmp[626285]))
              {
                {
                  unknown call_tmp[626290] "expr temp" "maybe param" "maybe type" "temp"
                  (626293 'move' call_tmp[626290](77754 call _cond_test debugDataParNuma[93410]))
                  if call_tmp[626290]
                  {
                    unknown call_tmp[626295] "expr temp" "maybe param" "maybe type" "temp"
                    (626298 'move' call_tmp[626295](77686 call chpl_getSubloc))
                    unknown call_tmp[626300] "expr temp" "maybe param" "maybe type" "temp"
                    (626303 'move' call_tmp[626300](77687 call != chunk[78698] call_tmp[626295]))
                    unknown call_tmp[626305] "expr temp" "maybe param" "maybe type" "temp"
                    (626308 'move' call_tmp[626305](77748 call _cond_test call_tmp[626300]))
                    if call_tmp[626305]
                    {
                      unknown call_tmp[626310] "expr temp" "maybe param" "maybe type" "temp"
                      (626313 'move' call_tmp[626310](77728 call chpl_getSubloc))
                      (77746 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78698] ", on " call_tmp[626310] ") ***")
                      (476427 'end of statement' chunk[78698])
                    }
                  }
                  unknown call_tmp[626315] "expr temp" "maybe param" "maybe type" "temp"
                  (626318 'move' call_tmp[626315](77771 call - len[77424] 1))
                  unknown call_tmp[626320] "maybe param" "maybe type" "temp"
                  (626323 'move' call_tmp[626320](77773 call _computeBlock len[77424] numChunks[77526] chunk[78698] call_tmp[626315]))
                  const tmp[77774] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541407 'init var' tmp[77774] call_tmp[626320])
                  (77781 call _check_tuple_var_decl tmp[77774] 2)
                  (476429 'end of statement')
                  unknown call_tmp[626325] "maybe param" "maybe type" "temp"
                  (626328 'move' call_tmp[626325](77775 call tmp[77774] 0))
                  const lo[77759] "dead at end of block" "const" "insert auto destroy"
                  (541409 'init var' lo[77759] call_tmp[626325])
                  unknown call_tmp[626330] "maybe param" "maybe type" "temp"
                  (626333 'move' call_tmp[626330](77778 call tmp[77774] 1))
                  const hi[77761] "dead at end of block" "const" "insert auto destroy"
                  (541411 'init var' hi[77761] call_tmp[626330])
                  (77786 'end of statement')
                  unknown call_tmp[626335] "maybe param" "maybe type" "temp"
                  (626338 'move' call_tmp[626335](77789 call chpl_build_bounded_range lo[77759] hi[77761]))
                  const locRange[77791] "dead at end of block" "const" "insert auto destroy"
                  (541413 'init var' locRange[77791] call_tmp[626335])
                  (77794 'end of statement')
                  unknown call_tmp[626342] "maybe param" "maybe type" "temp"
                  (626345 'move' call_tmp[626342](77796 call size _mt[243] locRange[77791]))
                  const locLen[77799] "dead at end of block" "const" "insert auto destroy"
                  (541415 'init var' locLen[77799] call_tmp[626342])
                  (77802 'end of statement')
                  const numSublocTasks[77824] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[558925] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[558926] "maybe param" "temp"
                  unknown call_tmp[626347] "expr temp" "maybe param" "maybe type" "temp"
                  (626350 'move' call_tmp[626347](77806 call % dptpl[77456] numChunks[77526]))
                  unknown call_tmp[626352] "expr temp" "maybe param" "maybe type" "temp"
                  (626355 'move' call_tmp[626352](77808 call < chunk[78698] call_tmp[626347]))
                  (558931 'move' tmp[558926](558929 call _cond_test call_tmp[626352]))
                  if tmp[558926]
                  {
                    unknown tmp[558933] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[626357] "expr temp" "maybe param" "maybe type" "temp"
                    (626360 'move' call_tmp[626357](77812 call / dptpl[77456] numChunks[77526]))
                    (558935 'move' tmp[558933](77815 call + call_tmp[626357] 1))
                    (558940 'move' tmp[558925](558937 '_paramFoldLogical' tmp[558926] tmp[558933]))
                  }
                  {
                    unknown tmp[558942] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (558944 'move' tmp[558942](77819 call / dptpl[77456] numChunks[77526]))
                    (558949 'move' tmp[558925](558946 '_paramFoldLogical' tmp[558926] tmp[558942]))
                  }
                  (541417 'init var' numSublocTasks[77824] tmp[558925])
                  (77827 'end of statement')
                  unknown call_tmp[626362] "maybe param" "maybe type" "temp"
                  (626365 'move' call_tmp[626362](77835 call _computeNumChunks numSublocTasks[77824](ignoreRunning = 1) minIndicesPerTask[77440] locLen[77799]))
                  const numTasks[77836] "dead at end of block" "const" "insert auto destroy"
                  (541419 'init var' numTasks[77836] call_tmp[626362])
                  (77839 'end of statement' lo[77759] hi[77761] locRange[77791] chunk[78698] dptpl[77456] numChunks[77526] dptpl[77456] numChunks[77526] dptpl[77456] numChunks[77526] numSublocTasks[77824] minIndicesPerTask[77440] locLen[77799])
                  {
                    unknown tmpIter[77985] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[626367] "expr temp" "maybe param" "maybe type" "temp"
                    (626370 'move' call_tmp[626367](77842 call chpl_build_low_bounded_range 0))
                    (77988 'move' tmpIter[77985](77845 call # call_tmp[626367] numTasks[77836]))
                    unknown isRngDomArr[78177] "maybe param" "temp"
                    unknown tmp[420890] "maybe param" "temp"
                    (420901 'move' tmp[420890](78179 call isBoundedRange tmpIter[77985]))
                    unknown call_tmp[626372] "expr temp" "maybe param" "maybe type" "temp"
                    (626375 'move' call_tmp[626372](420903 call _cond_invalid tmp[420890]))
                    if call_tmp[626372]
                    {
                      (420906 call compilerError "cannot promote short-circuiting || operator")
                    }
                    unknown tmp[558983] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[558984] "maybe param" "temp"
                    unknown call_tmp[626377] "expr temp" "maybe param" "maybe type" "temp"
                    (626380 'move' call_tmp[626377](420891 call isTrue tmp[420890]))
                    (558989 'move' tmp[558984](558987 call _cond_test call_tmp[626377]))
                    if tmp[558984]
                    {
                      (558994 'move' tmp[558983](558991 '_paramFoldLogical' tmp[558984] 1))
                    }
                    {
                      unknown tmp[420911] "maybe param" "temp"
                      (420922 'move' tmp[420911](78182 call isDomain tmpIter[77985]))
                      unknown call_tmp[626382] "expr temp" "maybe param" "maybe type" "temp"
                      (626385 'move' call_tmp[626382](420924 call _cond_invalid tmp[420911]))
                      if call_tmp[626382]
                      {
                        (420927 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[558956] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[558957] "maybe param" "temp"
                      unknown call_tmp[626387] "expr temp" "maybe param" "maybe type" "temp"
                      (626390 'move' call_tmp[626387](420912 call isTrue tmp[420911]))
                      (558962 'move' tmp[558957](558960 call _cond_test call_tmp[626387]))
                      if tmp[558957]
                      {
                        (558967 'move' tmp[558956](558964 '_paramFoldLogical' tmp[558957] 1))
                      }
                      {
                        unknown tmp[558969] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        unknown call_tmp[626392] "expr temp" "maybe param" "maybe type" "temp"
                        (626395 'move' call_tmp[626392](78185 call isArray tmpIter[77985]))
                        (558971 'move' tmp[558969](420916 call isTrue call_tmp[626392]))
                        (558976 'move' tmp[558956](558973 '_paramFoldLogical' tmp[558957] tmp[558969]))
                      }
                      unknown tmp[558996] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (558998 'move' tmp[558996](420895 call isTrue tmp[558956]))
                      (559003 'move' tmp[558983](559000 '_paramFoldLogical' tmp[558984] tmp[558996]))
                    }
                    (78192 'move' isRngDomArr[78177] tmp[558983])
                    if isRngDomArr[78177]
                    {
                      const _coforallCount[78044] "const" "end count" "temp"
                      (78113 'move' _coforallCount[78044](78110 call _endCountAlloc 1))
                      unknown numTasks[78045] "temp"
                      (78097 'move' numTasks[78045](78093 call size _mt[243] tmpIter[77985]))
                      (78088 call _upEndCount _coforallCount[78044] 1 numTasks[78045])
                      (476444 'end of statement')
                      (78085 call chpl_resetTaskSpawn numTasks[78045])
                      (476445 'end of statement')
                      unknown _indexOfInterest[78052] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78053] "expr temp" "temp"
                      (78062 'move' _iterator[78053](78060 call _getIterator tmpIter[77985]))
                      Defer
                      {
                        {
                          (78078 call _freeIterator _iterator[78053])
                        }
                      }
                      { scopeless type
                        (78067 'move' _indexOfInterest[78052](78064 call iteratorIndex _iterator[78053]))
                      }
                      ForLoop[78054]
                      {
                        unknown core[78071] "coforall index var" "index var" "insert auto destroy"
                        (476447 'end of statement')
                        (78073 'move' core[78071] _indexOfInterest[78052])
                        (476448 'end of statement' core[78071])
                        {
                          {
                            unknown call_tmp[626399] "maybe param" "maybe type" "temp"
                            (626402 'move' call_tmp[626399](77994 call _computeBlock locLen[77799] numTasks[77836] core[78071] hi[77761] lo[77759] lo[77759]))
                            const tmp[77992] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541421 'init var' tmp[77992] call_tmp[626399])
                            (78003 call _check_tuple_var_decl tmp[77992] 2)
                            (476450 'end of statement')
                            unknown call_tmp[626404] "maybe param" "maybe type" "temp"
                            (626407 'move' call_tmp[626404](78008 call tmp[77992] 0))
                            const low[78006] "dead at end of block" "const" "insert auto destroy"
                            (541423 'init var' low[78006] call_tmp[626404])
                            unknown call_tmp[626409] "maybe param" "maybe type" "temp"
                            (626412 'move' call_tmp[626409](78013 call tmp[77992] 1))
                            const high[78011] "dead at end of block" "const" "insert auto destroy"
                            (541425 'init var' high[78011] call_tmp[626409])
                            (78016 'end of statement')
                            unknown call_tmp[626414] "expr temp" "maybe param" "maybe type" "temp"
                            (626417 'move' call_tmp[626414](78018 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626414]
                            {
                              unknown call_tmp[626419] "expr temp" "maybe param" "maybe type" "temp"
                              (626422 'move' call_tmp[626419](78032 call chpl_build_bounded_range low[78006] high[78011]))
                              (78022 call chpl_debug_writeln "### chunk = " chunk[78698] "  core = " core[78071] "  " "locRange = " locRange[77791] "  coreRange = " call_tmp[626419])
                              (476451 'end of statement' chunk[78698] core[78071] locRange[77791] low[78006] high[78011])
                            }
                            unknown yret[511742] "YVV" "temp"
                            unknown call_tmp[626424] "expr temp" "maybe param" "maybe type" "temp"
                            (626427 'move' call_tmp[626424](78040 call chpl_build_bounded_range low[78006] high[78011]))
                            unknown call_tmp[626429] "expr temp" "maybe param" "maybe type" "temp"
                            (626432 'move' call_tmp[626429](78038 call _build_tuple call_tmp[626424]))
                            (511745 'move' yret[511742](511744 'deref' call_tmp[626429]))
                            (511747 yield yret[511742])
                            (476457 'end of statement' low[78006] high[78011])
                          }
                          (78047 call _downEndCount _coforallCount[78044] nil[44])
                          (78046 'coforall loop')
                        }
                        label _continueLabel[78057]
                        _indexOfInterest[78052]
                        _iterator[78053]
                      }
                      label _breakLabel[78058]
                      Defer
                      {
                        {
                          (78100 call _endCountFree _coforallCount[78044])
                        }
                      }
                      (78105 call _waitEndCount _coforallCount[78044] 1 numTasks[78045])
                    }
                    {
                      const _coforallCount[78117] "const" "end count" "temp"
                      (78174 'move' _coforallCount[78117](78171 call _endCountAlloc 1))
                      unknown _indexOfInterest[78125] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78126] "expr temp" "temp"
                      (78135 'move' _iterator[78126](78133 call _getIterator tmpIter[77985]))
                      Defer
                      {
                        {
                          (78151 call _freeIterator _iterator[78126])
                        }
                      }
                      { scopeless type
                        (78140 'move' _indexOfInterest[78125](78137 call iteratorIndex _iterator[78126]))
                      }
                      ForLoop[78127]
                      {
                        unknown core[78144] "coforall index var" "index var" "insert auto destroy"
                        (476464 'end of statement')
                        (78146 'move' core[78144] _indexOfInterest[78125])
                        (476465 'end of statement' core[78144])
                        (78158 call _upEndCount _coforallCount[78117] 1)
                        (476467 'end of statement')
                        {
                          {
                            unknown call_tmp[626434] "maybe param" "maybe type" "temp"
                            (626437 'move' call_tmp[626434](77860 call _computeBlock locLen[77799] numTasks[77836] core[78144] hi[77761] lo[77759] lo[77759]))
                            const tmp[77861] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541427 'init var' tmp[77861] call_tmp[626434])
                            (77868 call _check_tuple_var_decl tmp[77861] 2)
                            (476468 'end of statement')
                            unknown call_tmp[626439] "maybe param" "maybe type" "temp"
                            (626442 'move' call_tmp[626439](77862 call tmp[77861] 0))
                            const low[77847] "dead at end of block" "const" "insert auto destroy"
                            (541429 'init var' low[77847] call_tmp[626439])
                            unknown call_tmp[626444] "maybe param" "maybe type" "temp"
                            (626447 'move' call_tmp[626444](77865 call tmp[77861] 1))
                            const high[77849] "dead at end of block" "const" "insert auto destroy"
                            (541431 'init var' high[77849] call_tmp[626444])
                            (77873 'end of statement')
                            unknown call_tmp[626449] "expr temp" "maybe param" "maybe type" "temp"
                            (626452 'move' call_tmp[626449](77973 call _cond_test debugDataParNuma[93410]))
                            if call_tmp[626449]
                            {
                              unknown call_tmp[626454] "expr temp" "maybe param" "maybe type" "temp"
                              (626457 'move' call_tmp[626454](77968 call chpl_build_bounded_range low[77847] high[77849]))
                              (77970 call chpl_debug_writeln "### chunk = " chunk[78698] "  core = " core[78144] "  " "locRange = " locRange[77791] "  coreRange = " call_tmp[626454])
                              (476469 'end of statement' chunk[78698] core[78144] locRange[77791] low[77847] high[77849])
                            }
                            unknown yret[511749] "YVV" "temp"
                            unknown call_tmp[626459] "expr temp" "maybe param" "maybe type" "temp"
                            (626462 'move' call_tmp[626459](77979 call chpl_build_bounded_range low[77847] high[77849]))
                            unknown call_tmp[626464] "expr temp" "maybe param" "maybe type" "temp"
                            (626467 'move' call_tmp[626464](77981 call _build_tuple call_tmp[626459]))
                            (511752 'move' yret[511749](511751 'deref' call_tmp[626464]))
                            (511754 yield yret[511749])
                            (476475 'end of statement' low[77847] high[77849])
                          }
                          (78120 call _downEndCount _coforallCount[78117] nil[44])
                          (78119 'coforall loop')
                        }
                        label _continueLabel[78130]
                        _indexOfInterest[78125]
                        _iterator[78126]
                      }
                      label _breakLabel[78131]
                      Defer
                      {
                        {
                          (78162 call _endCountFree _coforallCount[78117])
                        }
                      }
                      (78167 call _waitEndCount _coforallCount[78117] 1)
                    }
                  }
                }
                (78674 call _downEndCount _coforallCount[78672] nil[44])
                (78204 'coforall on block' 1 tmp[78199])
              }
              label _continueLabel[78684]
              _indexOfInterest[78679]
              _iterator[78680]
            }
            label _breakLabel[78685]
            Defer
            {
              {
                (78716 call _endCountFree _coforallCount[78672])
              }
            }
            (78721 call _waitEndCount _coforallCount[78672] 0)
          }
        }
      }
    }
    {
      unknown call_tmp[626471] "maybe param" "maybe type" "temp"
      (626474 'move' call_tmp[626471](78756 call size _mt[243] this[77323]))
      unknown v[78759] "dead at end of block" "insert auto destroy"
      (541433 'init var' v[78759] call_tmp[626471])
      (78762 'end of statement')
      const numChunks[78775] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[559010] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559011] "maybe param" "temp"
      unknown call_tmp[626476] "expr temp" "maybe param" "maybe type" "temp"
      (626479 'move' call_tmp[626476](78766 'task_get_serial'))
      (559016 'move' tmp[559011](559014 call _cond_test call_tmp[626476]))
      if tmp[559011]
      {
        (559021 'move' tmp[559010](559018 '_paramFoldLogical' tmp[559011] 1))
      }
      {
        unknown tmp[559023] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559025 'move' tmp[559023](78771 call _computeNumChunks v[78759]))
        (559030 'move' tmp[559010](559027 '_paramFoldLogical' tmp[559011] tmp[559023]))
      }
      (541435 'init var' numChunks[78775] tmp[559010])
      (78778 'end of statement' v[78759])
      unknown call_tmp[626481] "expr temp" "maybe param" "maybe type" "temp"
      (626484 'move' call_tmp[626481](78828 call _cond_test debugChapelRange[64198]))
      if call_tmp[626481]
      {
        (78786 call chpl_debug_writeln "*** RI: length=" v[78759] " numChunks=" numChunks[78775])
        (476485 'end of statement' v[78759] numChunks[78775])
        (78826 call chpl_debug_writeln "*** RI: Using " numChunks[78775] " chunk(s)")
        (476488 'end of statement' numChunks[78775])
      }
      unknown call_tmp[626486] "expr temp" "maybe param" "maybe type" "temp"
      (626489 'move' call_tmp[626486](78834 call == numChunks[78775] 1))
      unknown call_tmp[626491] "expr temp" "maybe param" "maybe type" "temp"
      (626494 'move' call_tmp[626491](79133 call _cond_test call_tmp[626486]))
      if call_tmp[626491]
      {
        unknown yret[511756] "YVV" "temp"
        unknown call_tmp[626496] "expr temp" "maybe param" "maybe type" "temp"
        (626499 'move' call_tmp[626496](78839 call - v[78759] 1))
        unknown call_tmp[626501] "expr temp" "maybe param" "maybe type" "temp"
        (626504 'move' call_tmp[626501](78841 call chpl_build_bounded_range 0 call_tmp[626496]))
        unknown call_tmp[626506] "expr temp" "maybe param" "maybe type" "temp"
        (626509 'move' call_tmp[626506](78843 call _build_tuple call_tmp[626501]))
        (511759 'move' yret[511756](511758 'deref' call_tmp[626506]))
        (511761 yield yret[511756])
        (476490 'end of statement' v[78759])
      }
      {
        {
          unknown tmpIter[78924] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[626511] "expr temp" "maybe param" "maybe type" "temp"
          (626514 'move' call_tmp[626511](78849 call chpl_build_low_bounded_range 0))
          (78927 'move' tmpIter[78924](78852 call # call_tmp[626511] numChunks[78775]))
          unknown isRngDomArr[79113] "maybe param" "temp"
          unknown tmp[421016] "maybe param" "temp"
          (421027 'move' tmp[421016](79115 call isBoundedRange tmpIter[78924]))
          unknown call_tmp[626516] "expr temp" "maybe param" "maybe type" "temp"
          (626519 'move' call_tmp[626516](421029 call _cond_invalid tmp[421016]))
          if call_tmp[626516]
          {
            (421032 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[559064] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[559065] "maybe param" "temp"
          unknown call_tmp[626521] "expr temp" "maybe param" "maybe type" "temp"
          (626524 'move' call_tmp[626521](421017 call isTrue tmp[421016]))
          (559070 'move' tmp[559065](559068 call _cond_test call_tmp[626521]))
          if tmp[559065]
          {
            (559075 'move' tmp[559064](559072 '_paramFoldLogical' tmp[559065] 1))
          }
          {
            unknown tmp[421037] "maybe param" "temp"
            (421048 'move' tmp[421037](79118 call isDomain tmpIter[78924]))
            unknown call_tmp[626526] "expr temp" "maybe param" "maybe type" "temp"
            (626529 'move' call_tmp[626526](421050 call _cond_invalid tmp[421037]))
            if call_tmp[626526]
            {
              (421053 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[559037] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[559038] "maybe param" "temp"
            unknown call_tmp[626531] "expr temp" "maybe param" "maybe type" "temp"
            (626534 'move' call_tmp[626531](421038 call isTrue tmp[421037]))
            (559043 'move' tmp[559038](559041 call _cond_test call_tmp[626531]))
            if tmp[559038]
            {
              (559048 'move' tmp[559037](559045 '_paramFoldLogical' tmp[559038] 1))
            }
            {
              unknown tmp[559050] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[626536] "expr temp" "maybe param" "maybe type" "temp"
              (626539 'move' call_tmp[626536](79121 call isArray tmpIter[78924]))
              (559052 'move' tmp[559050](421042 call isTrue call_tmp[626536]))
              (559057 'move' tmp[559037](559054 '_paramFoldLogical' tmp[559038] tmp[559050]))
            }
            unknown tmp[559077] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (559079 'move' tmp[559077](421021 call isTrue tmp[559037]))
            (559084 'move' tmp[559064](559081 '_paramFoldLogical' tmp[559065] tmp[559077]))
          }
          (79128 'move' isRngDomArr[79113] tmp[559064])
          if isRngDomArr[79113]
          {
            const _coforallCount[78980] "const" "end count" "temp"
            (79049 'move' _coforallCount[78980](79046 call _endCountAlloc 1))
            unknown numTasks[78981] "temp"
            (79033 'move' numTasks[78981](79029 call size _mt[243] tmpIter[78924]))
            (79024 call _upEndCount _coforallCount[78980] 1 numTasks[78981])
            (476493 'end of statement')
            (79021 call chpl_resetTaskSpawn numTasks[78981])
            (476494 'end of statement')
            unknown _indexOfInterest[78988] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78989] "expr temp" "temp"
            (78998 'move' _iterator[78989](78996 call _getIterator tmpIter[78924]))
            Defer
            {
              {
                (79014 call _freeIterator _iterator[78989])
              }
            }
            { scopeless type
              (79003 'move' _indexOfInterest[78988](79000 call iteratorIndex _iterator[78989]))
            }
            ForLoop[78990]
            {
              unknown chunk[79007] "coforall index var" "index var" "insert auto destroy"
              (476496 'end of statement')
              (79009 'move' chunk[79007] _indexOfInterest[78988])
              (476497 'end of statement' chunk[79007])
              {
                {
                  unknown call_tmp[626543] "expr temp" "maybe param" "maybe type" "temp"
                  (626546 'move' call_tmp[626543](78938 call - v[78759] 1))
                  unknown call_tmp[626548] "maybe param" "maybe type" "temp"
                  (626551 'move' call_tmp[626548](78933 call _computeBlock v[78759] numChunks[78775] chunk[79007] call_tmp[626543]))
                  const tmp[78931] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541437 'init var' tmp[78931] call_tmp[626548])
                  (78943 call _check_tuple_var_decl tmp[78931] 2)
                  (476499 'end of statement')
                  unknown call_tmp[626553] "maybe param" "maybe type" "temp"
                  (626556 'move' call_tmp[626553](78948 call tmp[78931] 0))
                  const lo[78946] "dead at end of block" "const" "insert auto destroy"
                  (541439 'init var' lo[78946] call_tmp[626553])
                  unknown call_tmp[626558] "maybe param" "maybe type" "temp"
                  (626561 'move' call_tmp[626558](78953 call tmp[78931] 1))
                  const hi[78951] "dead at end of block" "const" "insert auto destroy"
                  (541441 'init var' hi[78951] call_tmp[626558])
                  (78956 'end of statement')
                  unknown call_tmp[626563] "expr temp" "maybe param" "maybe type" "temp"
                  (626566 'move' call_tmp[626563](78958 call _cond_test debugChapelRange[64198]))
                  if call_tmp[626563]
                  {
                    unknown call_tmp[626568] "expr temp" "maybe param" "maybe type" "temp"
                    (626571 'move' call_tmp[626568](78968 call chpl_build_bounded_range lo[78946] hi[78951]))
                    unknown call_tmp[626573] "expr temp" "maybe param" "maybe type" "temp"
                    (626576 'move' call_tmp[626573](78966 call _build_tuple call_tmp[626568]))
                    (78963 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626573])
                    (476500 'end of statement' lo[78946] hi[78951])
                  }
                  unknown yret[511763] "YVV" "temp"
                  unknown call_tmp[626578] "expr temp" "maybe param" "maybe type" "temp"
                  (626581 'move' call_tmp[626578](78976 call chpl_build_bounded_range lo[78946] hi[78951]))
                  unknown call_tmp[626583] "expr temp" "maybe param" "maybe type" "temp"
                  (626586 'move' call_tmp[626583](78974 call _build_tuple call_tmp[626578]))
                  (511766 'move' yret[511763](511765 'deref' call_tmp[626583]))
                  (511768 yield yret[511763])
                  (476503 'end of statement' lo[78946] hi[78951])
                }
                (78983 call _downEndCount _coforallCount[78980] nil[44])
                (78982 'coforall loop')
              }
              label _continueLabel[78993]
              _indexOfInterest[78988]
              _iterator[78989]
            }
            label _breakLabel[78994]
            Defer
            {
              {
                (79036 call _endCountFree _coforallCount[78980])
              }
            }
            (79041 call _waitEndCount _coforallCount[78980] 1 numTasks[78981])
          }
          {
            const _coforallCount[79053] "const" "end count" "temp"
            (79110 'move' _coforallCount[79053](79107 call _endCountAlloc 1))
            unknown _indexOfInterest[79061] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[79062] "expr temp" "temp"
            (79071 'move' _iterator[79062](79069 call _getIterator tmpIter[78924]))
            Defer
            {
              {
                (79087 call _freeIterator _iterator[79062])
              }
            }
            { scopeless type
              (79076 'move' _indexOfInterest[79061](79073 call iteratorIndex _iterator[79062]))
            }
            ForLoop[79063]
            {
              unknown chunk[79080] "coforall index var" "index var" "insert auto destroy"
              (476510 'end of statement')
              (79082 'move' chunk[79080] _indexOfInterest[79061])
              (476511 'end of statement' chunk[79080])
              (79094 call _upEndCount _coforallCount[79053] 1)
              (476513 'end of statement')
              {
                {
                  unknown call_tmp[626588] "expr temp" "maybe param" "maybe type" "temp"
                  (626591 'move' call_tmp[626588](78866 call - v[78759] 1))
                  unknown call_tmp[626593] "maybe param" "maybe type" "temp"
                  (626596 'move' call_tmp[626593](78868 call _computeBlock v[78759] numChunks[78775] chunk[79080] call_tmp[626588]))
                  const tmp[78869] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541443 'init var' tmp[78869] call_tmp[626593])
                  (78876 call _check_tuple_var_decl tmp[78869] 2)
                  (476514 'end of statement')
                  unknown call_tmp[626598] "maybe param" "maybe type" "temp"
                  (626601 'move' call_tmp[626598](78870 call tmp[78869] 0))
                  const lo[78854] "dead at end of block" "const" "insert auto destroy"
                  (541445 'init var' lo[78854] call_tmp[626598])
                  unknown call_tmp[626603] "maybe param" "maybe type" "temp"
                  (626606 'move' call_tmp[626603](78873 call tmp[78869] 1))
                  const hi[78856] "dead at end of block" "const" "insert auto destroy"
                  (541447 'init var' hi[78856] call_tmp[626603])
                  (78881 'end of statement')
                  unknown call_tmp[626608] "expr temp" "maybe param" "maybe type" "temp"
                  (626611 'move' call_tmp[626608](78911 call _cond_test debugChapelRange[64198]))
                  if call_tmp[626608]
                  {
                    unknown call_tmp[626613] "expr temp" "maybe param" "maybe type" "temp"
                    (626616 'move' call_tmp[626613](78905 call chpl_build_bounded_range lo[78854] hi[78856]))
                    unknown call_tmp[626618] "expr temp" "maybe param" "maybe type" "temp"
                    (626621 'move' call_tmp[626618](78907 call _build_tuple call_tmp[626613]))
                    (78909 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626618])
                    (476515 'end of statement' lo[78854] hi[78856])
                  }
                  unknown yret[511770] "YVV" "temp"
                  unknown call_tmp[626623] "expr temp" "maybe param" "maybe type" "temp"
                  (626626 'move' call_tmp[626623](78918 call chpl_build_bounded_range lo[78854] hi[78856]))
                  unknown call_tmp[626628] "expr temp" "maybe param" "maybe type" "temp"
                  (626631 'move' call_tmp[626628](78920 call _build_tuple call_tmp[626623]))
                  (511773 'move' yret[511770](511772 'deref' call_tmp[626628]))
                  (511775 yield yret[511770])
                  (476518 'end of statement' lo[78854] hi[78856])
                }
                (79056 call _downEndCount _coforallCount[79053] nil[44])
                (79055 'coforall loop')
              }
              label _continueLabel[79066]
              _indexOfInterest[79061]
              _iterator[79062]
            }
            label _breakLabel[79067]
            Defer
            {
              {
                (79098 call _endCountFree _coforallCount[79053])
              }
            }
            (79103 call _waitEndCount _coforallCount[79053] 1)
          }
        }
      }
    }
    (511719 return ret[511717])
  }
  where {
    (77333 call == tag[77318] leader[447])
  }
  function range[64319](?).these[79152](arg _mt[79159]:_MT[238], arg this[79156]:range[64319](?) :
  range[64319](?), param arg tag[79149]:iterKind[453], arg followThis[79154]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511779] "RVV" "temp"
    unknown tmp[421079] "maybe param" "temp"
    (421090 'move' tmp[421079] 1)
    unknown call_tmp[626633] "expr temp" "maybe param" "maybe type" "temp"
    (626636 'move' call_tmp[626633](421092 call _cond_invalid tmp[421079]))
    if call_tmp[626633]
    {
      (421095 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559091] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559092] "maybe param" "temp"
    unknown call_tmp[626638] "expr temp" "maybe param" "maybe type" "temp"
    (626641 'move' call_tmp[626638](421080 call isTrue tmp[421079]))
    (559097 'move' tmp[559092](559095 call _cond_test call_tmp[626638]))
    if tmp[559092]
    {
      unknown tmp[559099] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626645] "expr temp" "maybe param" "maybe type" "temp"
      (626648 'move' call_tmp[626645](79174 call(79170 call (partial) isAmbiguous _mt[243] this[79156])))
      (559101 'move' tmp[559099](421083 call isTrue call_tmp[626645]))
      (559106 'move' tmp[559091](559103 '_paramFoldLogical' tmp[559092] tmp[559099]))
    }
    {
      (559111 'move' tmp[559091](559108 '_paramFoldLogical' tmp[559092] 0))
    }
    unknown call_tmp[626650] "expr temp" "maybe param" "maybe type" "temp"
    (626653 'move' call_tmp[626650](79185 call _cond_test tmp[559091]))
    if call_tmp[626650]
    {
      (79183 call boundsCheckHalt module=[255] HaltWrappers[210016] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (358085 'referenced modules list' HaltWrappers[210016])
    }
    unknown call_tmp[626657] "expr temp" "maybe param" "maybe type" "temp"
    (626660 'move' call_tmp[626657](375999 call boundedType _mt[243] this[79156]))
    unknown call_tmp[626662] "expr temp" "maybe param" "maybe type" "temp"
    (626665 'move' call_tmp[626662](79196 call == call_tmp[626657] boundedNone[64214]))
    unknown call_tmp[626667] "expr temp" "maybe param" "maybe type" "temp"
    (626670 'move' call_tmp[626667](79203 call _cond_test call_tmp[626662]))
    if call_tmp[626667]
    {
      (79201 call compilerError "iteration over a range with no bounds")
    }
    unknown tmp[421100] "maybe param" "temp"
    unknown call_tmp[626674] "expr temp" "maybe param" "maybe type" "temp"
    (626677 'move' call_tmp[626674](376004 call stridable _mt[243] this[79156]))
    (421111 'move' tmp[421100](79209 call ! call_tmp[626674]))
    unknown call_tmp[626679] "expr temp" "maybe param" "maybe type" "temp"
    (626682 'move' call_tmp[626679](421113 call _cond_invalid tmp[421100]))
    if call_tmp[626679]
    {
      (421116 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559118] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559119] "maybe param" "temp"
    unknown call_tmp[626684] "expr temp" "maybe param" "maybe type" "temp"
    (626687 'move' call_tmp[626684](421101 call isTrue tmp[421100]))
    (559124 'move' tmp[559119](559122 call _cond_test call_tmp[626684]))
    if tmp[559119]
    {
      unknown tmp[559126] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626691] "expr temp" "maybe param" "maybe type" "temp"
      (626694 'move' call_tmp[626691](376009 call boundedType _mt[243] this[79156]))
      unknown call_tmp[626696] "expr temp" "maybe param" "maybe type" "temp"
      (626699 'move' call_tmp[626696](79216 call == call_tmp[626691] boundedHigh[64212]))
      (559128 'move' tmp[559126](421104 call isTrue call_tmp[626696]))
      (559133 'move' tmp[559118](559130 '_paramFoldLogical' tmp[559119] tmp[559126]))
    }
    {
      (559138 'move' tmp[559118](559135 '_paramFoldLogical' tmp[559119] 0))
    }
    unknown call_tmp[626701] "expr temp" "maybe param" "maybe type" "temp"
    (626704 'move' call_tmp[626701](79241 call _cond_test tmp[559118]))
    if call_tmp[626701]
    {
      (79239 call compilerError "iteration over a range with no first index")
    }
    unknown call_tmp[626708] "expr temp" "maybe param" "maybe type" "temp"
    (626711 'move' call_tmp[626708](79247 call size _mt[243] followThis[79154]))
    unknown call_tmp[626713] "expr temp" "maybe param" "maybe type" "temp"
    (626716 'move' call_tmp[626713](79251 call != call_tmp[626708] 1))
    unknown call_tmp[626718] "expr temp" "maybe param" "maybe type" "temp"
    (626721 'move' call_tmp[626718](79274 call _cond_test call_tmp[626713]))
    if call_tmp[626718]
    {
      (79272 call compilerError "iteration over a range with multi-dimensional iterator")
    }
    unknown call_tmp[626723] "expr temp" "maybe param" "maybe type" "temp"
    (626726 'move' call_tmp[626723](79302 call _cond_test debugChapelRange[64198]))
    if call_tmp[626723]
    {
      (79300 call chpl_debug_writeln "In range follower code: Following " followThis[79154])
    }
    unknown call_tmp[626728] "maybe param" "maybe type" "temp"
    (626731 'move' call_tmp[626728](79310 call followThis[79154] 0))
    unknown myFollowThis[79311] "dead at end of block" "insert auto destroy"
    (541449 'init var' myFollowThis[79311] call_tmp[626728])
    (79314 'end of statement')
    unknown call_tmp[626733] "expr temp" "maybe param" "maybe type" "temp"
    (626736 'move' call_tmp[626733](79338 call _cond_test debugChapelRange[64198]))
    if call_tmp[626733]
    {
      (79336 call chpl_debug_writeln "Range = " myFollowThis[79311])
      (476531 'end of statement' myFollowThis[79311])
    }
    unknown tmp[421121] "maybe param" "temp"
    (421132 'move' tmp[421121] 1)
    unknown call_tmp[626738] "expr temp" "maybe param" "maybe type" "temp"
    (626741 'move' call_tmp[626738](421134 call _cond_invalid tmp[421121]))
    if call_tmp[626738]
    {
      (421137 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559145] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559146] "maybe param" "temp"
    unknown call_tmp[626743] "expr temp" "maybe param" "maybe type" "temp"
    (626746 'move' call_tmp[626743](421122 call isTrue tmp[421121]))
    (559151 'move' tmp[559146](559149 call _cond_test call_tmp[626743]))
    if tmp[559146]
    {
      unknown tmp[559153] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626750] "expr temp" "maybe param" "maybe type" "temp"
      (626753 'move' call_tmp[626750](79349 call(79345 call (partial) hasFirst _mt[243] this[79156])))
      unknown call_tmp[626755] "expr temp" "maybe param" "maybe type" "temp"
      (626758 'move' call_tmp[626755](79350 call ! call_tmp[626750]))
      (559155 'move' tmp[559153](421125 call isTrue call_tmp[626755]))
      (559160 'move' tmp[559145](559157 '_paramFoldLogical' tmp[559146] tmp[559153]))
    }
    {
      (559165 'move' tmp[559145](559162 '_paramFoldLogical' tmp[559146] 0))
    }
    unknown call_tmp[626760] "expr temp" "maybe param" "maybe type" "temp"
    (626763 'move' call_tmp[626760](79412 call _cond_test tmp[559145]))
    if call_tmp[626760]
    {
      unknown call_tmp[626767] "expr temp" "maybe param" "maybe type" "temp"
      (626770 'move' call_tmp[626767](79359 call(79355 call (partial) isEmpty _mt[243] this[79156])))
      unknown call_tmp[626772] "expr temp" "maybe param" "maybe type" "temp"
      (626775 'move' call_tmp[626772](79407 call _cond_test call_tmp[626767]))
      if call_tmp[626772]
      {
        unknown call_tmp[626779] "expr temp" "maybe param" "maybe type" "temp"
        (626782 'move' call_tmp[626779](79365 call(79361 call (partial) isEmpty _mt[243] myFollowThis[79311])))
        unknown call_tmp[626784] "expr temp" "maybe param" "maybe type" "temp"
        (626787 'move' call_tmp[626784](79366 call ! call_tmp[626779]))
        unknown call_tmp[626789] "expr temp" "maybe param" "maybe type" "temp"
        (626792 'move' call_tmp[626789](79392 call _cond_test call_tmp[626784]))
        if call_tmp[626789]
        {
          (79390 call boundsCheckHalt module=[255] HaltWrappers[210016] "size mismatch in zippered iteration")
          (358097 'referenced modules list' HaltWrappers[210016])
        }
      }
      {
        (79404 call boundsCheckHalt module=[255] HaltWrappers[210016] "iteration over a range with no first index")
        (358103 'referenced modules list' HaltWrappers[210016])
      }
    }
    unknown tmp[421163] "maybe param" "temp"
    (421174 'move' tmp[421163] 1)
    unknown call_tmp[626794] "expr temp" "maybe param" "maybe type" "temp"
    (626797 'move' call_tmp[626794](421176 call _cond_invalid tmp[421163]))
    if call_tmp[626794]
    {
      (421179 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559172] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559173] "maybe param" "temp"
    unknown call_tmp[626799] "expr temp" "maybe param" "maybe type" "temp"
    (626802 'move' call_tmp[626799](421164 call isTrue tmp[421163]))
    (559178 'move' tmp[559173](559176 call _cond_test call_tmp[626799]))
    if tmp[559173]
    {
      unknown tmp[559180] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626806] "expr temp" "maybe param" "maybe type" "temp"
      (626809 'move' call_tmp[626806](79422 call(79418 call (partial) hasFirst _mt[243] myFollowThis[79311])))
      unknown call_tmp[626811] "expr temp" "maybe param" "maybe type" "temp"
      (626814 'move' call_tmp[626811](79423 call ! call_tmp[626806]))
      (559182 'move' tmp[559180](421167 call isTrue call_tmp[626811]))
      (559187 'move' tmp[559172](559184 '_paramFoldLogical' tmp[559173] tmp[559180]))
    }
    {
      (559192 'move' tmp[559172](559189 '_paramFoldLogical' tmp[559173] 0))
    }
    unknown call_tmp[626816] "expr temp" "maybe param" "maybe type" "temp"
    (626819 'move' call_tmp[626816](79475 call _cond_test tmp[559172]))
    if call_tmp[626816]
    {
      unknown tmp[421142] "maybe param" "temp"
      unknown call_tmp[626823] "expr temp" "maybe param" "maybe type" "temp"
      (626826 'move' call_tmp[626823](79432 call(79428 call (partial) isAmbiguous _mt[243] myFollowThis[79311])))
      (421153 'move' tmp[421142](79433 call ! call_tmp[626823]))
      unknown call_tmp[626828] "expr temp" "maybe param" "maybe type" "temp"
      (626831 'move' call_tmp[626828](421155 call _cond_invalid tmp[421142]))
      if call_tmp[626828]
      {
        (421158 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559199] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559200] "maybe param" "temp"
      unknown call_tmp[626833] "expr temp" "maybe param" "maybe type" "temp"
      (626836 'move' call_tmp[626833](421143 call isTrue tmp[421142]))
      (559205 'move' tmp[559200](559203 call _cond_test call_tmp[626833]))
      if tmp[559200]
      {
        unknown tmp[559207] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626840] "expr temp" "maybe param" "maybe type" "temp"
        (626843 'move' call_tmp[626840](79440 call(79436 call (partial) isEmpty _mt[243] myFollowThis[79311])))
        (559209 'move' tmp[559207](421146 call isTrue call_tmp[626840]))
        (559214 'move' tmp[559199](559211 '_paramFoldLogical' tmp[559200] tmp[559207]))
      }
      {
        (559219 'move' tmp[559199](559216 '_paramFoldLogical' tmp[559200] 0))
      }
      unknown call_tmp[626845] "expr temp" "maybe param" "maybe type" "temp"
      (626848 'move' call_tmp[626845](79443 call ! tmp[559199]))
      unknown call_tmp[626850] "expr temp" "maybe param" "maybe type" "temp"
      (626853 'move' call_tmp[626850](79469 call _cond_test call_tmp[626845]))
      if call_tmp[626850]
      {
        (79467 call boundsCheckHalt module=[255] HaltWrappers[210016] "zippered iteration over a range with no first index")
        (358112 'referenced modules list' HaltWrappers[210016])
      }
    }
    unknown tmp[421247] "maybe param" "temp"
    unknown tmp[421268] "maybe param" "temp"
    (421279 'move' tmp[421268](79482 call isBoundedRange myFollowThis[79311]))
    unknown call_tmp[626855] "expr temp" "maybe param" "maybe type" "temp"
    (626858 'move' call_tmp[626855](421281 call _cond_invalid tmp[421268]))
    if call_tmp[626855]
    {
      (421284 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559226] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559227] "maybe param" "temp"
    unknown call_tmp[626860] "expr temp" "maybe param" "maybe type" "temp"
    (626863 'move' call_tmp[626860](421269 call isTrue tmp[421268]))
    (559232 'move' tmp[559227](559230 call _cond_test call_tmp[626860]))
    if tmp[559227]
    {
      unknown tmp[559234] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626867] "expr temp" "maybe param" "maybe type" "temp"
      (626870 'move' call_tmp[626867](79484 call stridable _mt[243] myFollowThis[79311]))
      unknown call_tmp[626872] "expr temp" "maybe param" "maybe type" "temp"
      (626875 'move' call_tmp[626872](79487 call ! call_tmp[626867]))
      (559236 'move' tmp[559234](421272 call isTrue call_tmp[626872]))
      (559241 'move' tmp[559226](559238 '_paramFoldLogical' tmp[559227] tmp[559234]))
    }
    {
      (559246 'move' tmp[559226](559243 '_paramFoldLogical' tmp[559227] 0))
    }
    (421258 'move' tmp[421247] tmp[559226])
    unknown call_tmp[626877] "expr temp" "maybe param" "maybe type" "temp"
    (626880 'move' call_tmp[626877](421260 call _cond_invalid tmp[421247]))
    if call_tmp[626877]
    {
      (421263 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[559253] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559254] "maybe param" "temp"
    unknown call_tmp[626882] "expr temp" "maybe param" "maybe type" "temp"
    (626885 'move' call_tmp[626882](421248 call isTrue tmp[421247]))
    (559259 'move' tmp[559254](559257 call _cond_test call_tmp[626882]))
    if tmp[559254]
    {
      (559264 'move' tmp[559253](559261 '_paramFoldLogical' tmp[559254] 1))
    }
    {
      unknown tmp[559266] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626889] "expr temp" "maybe param" "maybe type" "temp"
      (626892 'move' call_tmp[626889](79496 call(79492 call (partial) hasLast _mt[243] myFollowThis[79311])))
      (559268 'move' tmp[559266](421252 call isTrue call_tmp[626889]))
      (559273 'move' tmp[559253](559270 '_paramFoldLogical' tmp[559254] tmp[559266]))
    }
    unknown call_tmp[626894] "expr temp" "maybe param" "maybe type" "temp"
    (626897 'move' call_tmp[626894](80147 call _cond_test tmp[559253]))
    if call_tmp[626894]
    {
      unknown call_tmp[626901] "maybe param" "maybe type" "temp"
      (626904 'move' call_tmp[626901](79500 call size _mt[243] myFollowThis[79311]))
      const flwlen[79503] "dead at end of block" "const" "insert auto destroy"
      (541451 'init var' flwlen[79503] call_tmp[626901])
      (79506 'end of statement' myFollowThis[79311])
      unknown tmp[421184] "maybe param" "temp"
      (421195 'move' tmp[421184] 1)
      unknown call_tmp[626906] "expr temp" "maybe param" "maybe type" "temp"
      (626909 'move' call_tmp[626906](421197 call _cond_invalid tmp[421184]))
      if call_tmp[626906]
      {
        (421200 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559280] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559281] "maybe param" "temp"
      unknown call_tmp[626911] "expr temp" "maybe param" "maybe type" "temp"
      (626914 'move' call_tmp[626911](421185 call isTrue tmp[421184]))
      (559286 'move' tmp[559281](559284 call _cond_test call_tmp[626911]))
      if tmp[559281]
      {
        unknown tmp[559288] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626918] "expr temp" "maybe param" "maybe type" "temp"
        (626921 'move' call_tmp[626918](79514 call(79510 call (partial) hasLast _mt[243] this[79156])))
        (559290 'move' tmp[559288](421188 call isTrue call_tmp[626918]))
        (559295 'move' tmp[559280](559292 '_paramFoldLogical' tmp[559281] tmp[559288]))
      }
      {
        (559300 'move' tmp[559280](559297 '_paramFoldLogical' tmp[559281] 0))
      }
      unknown call_tmp[626923] "expr temp" "maybe param" "maybe type" "temp"
      (626926 'move' call_tmp[626923](79586 call _cond_test tmp[559280]))
      if call_tmp[626923]
      {
        unknown call_tmp[626928] "expr temp" "maybe param" "maybe type" "temp"
        (626931 'move' call_tmp[626928](79520 call isBoundedRange this[79156]))
        unknown call_tmp[626933] "expr temp" "maybe param" "maybe type" "temp"
        (626936 'move' call_tmp[626933](79580 call _cond_test call_tmp[626928]))
        if call_tmp[626933]
        {
          unknown call_tmp[626940] "expr temp" "maybe param" "maybe type" "temp"
          (626943 'move' call_tmp[626940](79522 call size _mt[243] this[79156]))
          unknown call_tmp[626945] "expr temp" "maybe param" "maybe type" "temp"
          (626948 'move' call_tmp[626945](79526 call < call_tmp[626940] flwlen[79503]))
          unknown call_tmp[626950] "expr temp" "maybe param" "maybe type" "temp"
          (626953 'move' call_tmp[626950](79552 call _cond_test call_tmp[626945]))
          if call_tmp[626950]
          {
            (79550 call boundsCheckHalt module=[255] HaltWrappers[210016] "zippered iteration over a range with too few indices")
            (358123 'referenced modules list' HaltWrappers[210016])
          }
        }
        {
          (79578 call assert 0 "hasFirst && hasLast do not imply isBoundedRange")
        }
      }
      unknown tmp[421205] "maybe param" "temp"
      (421216 'move' tmp[421205](79591 call stridable _mt[243] this[79156]))
      unknown call_tmp[626957] "expr temp" "maybe param" "maybe type" "temp"
      (626960 'move' call_tmp[626957](421218 call _cond_invalid tmp[421205]))
      if call_tmp[626957]
      {
        (421221 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559307] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559308] "maybe param" "temp"
      unknown call_tmp[626962] "expr temp" "maybe param" "maybe type" "temp"
      (626965 'move' call_tmp[626962](421206 call isTrue tmp[421205]))
      (559313 'move' tmp[559308](559311 call _cond_test call_tmp[626962]))
      if tmp[559308]
      {
        (559318 'move' tmp[559307](559315 '_paramFoldLogical' tmp[559308] 1))
      }
      {
        unknown tmp[559320] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626969] "expr temp" "maybe param" "maybe type" "temp"
        (626972 'move' call_tmp[626969](79595 call stridable _mt[243] myFollowThis[79311]))
        (559322 'move' tmp[559320](421210 call isTrue call_tmp[626969]))
        (559327 'move' tmp[559307](559324 '_paramFoldLogical' tmp[559308] tmp[559320]))
      }
      unknown call_tmp[626974] "expr temp" "maybe param" "maybe type" "temp"
      (626977 'move' call_tmp[626974](79936 call _cond_test tmp[559307]))
      if call_tmp[626974]
      {
        unknown call_tmp[626981] "expr temp" "maybe param" "maybe type" "temp"
        (626984 'move' call_tmp[626981](79603 call(376024 call (partial) chpl_intToIdx _mt[243] this[79156]) 1))
        unknown call_tmp[626988] "expr temp" "maybe param" "maybe type" "temp"
        (626991 'move' call_tmp[626988](79607 call(376028 call (partial) chpl_intToIdx _mt[243] this[79156]) 0))
        unknown call_tmp[626993] "expr temp" "maybe param" "maybe type" "temp"
        (626996 'move' call_tmp[626993](79608 call chpl_build_bounded_range call_tmp[626981] call_tmp[626988]))
        unknown call_tmp[627000] "expr temp" "maybe param" "maybe type" "temp"
        (627003 'move' call_tmp[627000](376032 call intIdxType _mt[243] this[79156]))
        unknown call_tmp[627005] "expr temp" "maybe param" "maybe type" "temp"
        (627008 'move' call_tmp[627005](79614 call chpl__rangeStrideType call_tmp[627000]))
        unknown call_tmp[627010] "expr temp" "maybe param" "maybe type" "temp"
        (627013 'move' call_tmp[627010](79615 call _cast call_tmp[627005] 1))
        unknown call_tmp[627015] "maybe param" "maybe type" "temp"
        (627018 'move' call_tmp[627015](79617 call chpl_by call_tmp[626993] call_tmp[627010]))
        unknown r[79619] "dead at end of block" "insert auto destroy"
        (541453 'init var' r[79619] call_tmp[627015])
        (79622 'end of statement')
        unknown call_tmp[627020] "expr temp" "maybe param" "maybe type" "temp"
        (627023 'move' call_tmp[627020](79626 call != flwlen[79503] 0))
        unknown call_tmp[627025] "expr temp" "maybe param" "maybe type" "temp"
        (627028 'move' call_tmp[627025](79728 call _cond_test call_tmp[627020]))
        if call_tmp[627025]
        {
          unknown call_tmp[627032] "expr temp" "maybe param" "maybe type" "temp"
          (627035 'move' call_tmp[627032](79629 call stride _mt[243] this[79156]))
          unknown call_tmp[627039] "expr temp" "maybe param" "maybe type" "temp"
          (627042 'move' call_tmp[627039](79633 call stride _mt[243] myFollowThis[79311]))
          unknown call_tmp[627044] "maybe param" "maybe type" "temp"
          (627047 'move' call_tmp[627044](79636 call * call_tmp[627032] call_tmp[627039]))
          const stride[79638] "dead at end of block" "const" "insert auto destroy"
          (541455 'init var' stride[79638] call_tmp[627044])
          (79641 'end of statement')
          unknown call_tmp[627053] "expr temp" "maybe param" "maybe type" "temp"
          (627056 'move' call_tmp[627053](79648 call first _mt[243] myFollowThis[79311]))
          unknown call_tmp[627058] "maybe param" "maybe type" "temp"
          (627061 'move' call_tmp[627058](79652 call(79644 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627053]))
          unknown low[79653] "dead at end of block" "insert auto destroy"
          (541457 'init var' low[79653] call_tmp[627058])
          (79656 'end of statement')
          unknown call_tmp[627067] "expr temp" "maybe param" "maybe type" "temp"
          (627070 'move' call_tmp[627067](376042 call strType _mt[243] this[79156]))
          unknown call_tmp[627072] "expr temp" "maybe param" "maybe type" "temp"
          (627075 'move' call_tmp[627072](79661 call chpl__idxToInt low[79653]))
          unknown call_tmp[627077] "expr temp" "maybe param" "maybe type" "temp"
          (627080 'move' call_tmp[627077](79663 call _cast call_tmp[627067] call_tmp[627072]))
          unknown call_tmp[627084] "expr temp" "maybe param" "maybe type" "temp"
          (627087 'move' call_tmp[627084](376048 call strType _mt[243] this[79156]))
          unknown call_tmp[627089] "expr temp" "maybe param" "maybe type" "temp"
          (627092 'move' call_tmp[627089](79668 call - flwlen[79503] 1))
          unknown call_tmp[627094] "expr temp" "maybe param" "maybe type" "temp"
          (627097 'move' call_tmp[627094](79671 call _cast call_tmp[627084] call_tmp[627089]))
          unknown call_tmp[627099] "expr temp" "maybe param" "maybe type" "temp"
          (627102 'move' call_tmp[627099](79673 call * stride[79638] call_tmp[627094]))
          unknown call_tmp[627104] "expr temp" "maybe param" "maybe type" "temp"
          (627107 'move' call_tmp[627104](79675 call + call_tmp[627077] call_tmp[627099]))
          unknown call_tmp[627109] "maybe param" "maybe type" "temp"
          (627112 'move' call_tmp[627109](79678 call(376037 call (partial) chpl_intToIdx _mt[243] this[79156]) call_tmp[627104]))
          unknown high[79679] "dead at end of block" "insert auto destroy"
          (541459 'init var' high[79679] call_tmp[627109])
          (79682 'end of statement' myFollowThis[79311] myFollowThis[79311] low[79653] stride[79638] flwlen[79503])
          unknown call_tmp[627118] "expr temp" "maybe param" "maybe type" "temp"
          (627121 'move' call_tmp[627118](79690 call last _mt[243] myFollowThis[79311]))
          unknown call_tmp[627123] "expr temp" "maybe param" "maybe type" "temp"
          (627126 'move' call_tmp[627123](79694 call(79686 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627118]))
          unknown call_tmp[627128] "expr temp" "maybe param" "maybe type" "temp"
          (627131 'move' call_tmp[627128](79695 call == high[79679] call_tmp[627123]))
          (79698 call assert call_tmp[627128])
          (476551 'end of statement' high[79679] myFollowThis[79311])
          unknown call_tmp[627133] "expr temp" "maybe param" "maybe type" "temp"
          (627136 'move' call_tmp[627133](79702 call < stride[79638] 0))
          unknown call_tmp[627138] "expr temp" "maybe param" "maybe type" "temp"
          (627141 'move' call_tmp[627138](79709 call _cond_test call_tmp[627133]))
          if call_tmp[627138]
          {
            (79706 call <=> low[79653] high[79679])
            (476554 'end of statement' low[79653] high[79679])
          }
          unknown call_tmp[627143] "expr temp" "maybe param" "maybe type" "temp"
          (627146 'move' call_tmp[627143](79717 call chpl_build_bounded_range low[79653] high[79679]))
          unknown call_tmp[627150] "expr temp" "maybe param" "maybe type" "temp"
          (627153 'move' call_tmp[627150](376060 call strType _mt[243] this[79156]))
          unknown call_tmp[627155] "expr temp" "maybe param" "maybe type" "temp"
          (627158 'move' call_tmp[627155](79721 call _cast call_tmp[627150] stride[79638]))
          unknown call_tmp[627160] "expr temp" "maybe param" "maybe type" "temp"
          (627163 'move' call_tmp[627160](79723 call chpl_by call_tmp[627143] call_tmp[627155]))
          (79725 call = r[79619] call_tmp[627160])
          (476557 'end of statement' r[79619] low[79653] high[79679] stride[79638])
        }
        unknown call_tmp[627165] "expr temp" "maybe param" "maybe type" "temp"
        (627168 'move' call_tmp[627165](79755 call _cond_test debugChapelRange[64198]))
        if call_tmp[627165]
        {
          (79753 call chpl_debug_writeln "Expanded range = " r[79619])
          (476562 'end of statement' r[79619])
        }
        {
          unknown _indexOfInterest[79765] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79766] "expr temp" "temp"
          (79775 'move' _iterator[79766](79773 call _getIterator r[79619]))
          Defer
          {
            {
              (79791 call _freeIterator _iterator[79766])
            }
          }
          { scopeless type
            (79780 'move' _indexOfInterest[79765](79777 call iteratorIndex _iterator[79766]))
          }
          ForLoop[79767]
          {
            unknown i[79784] "index var" "insert auto destroy"
            (476565 'end of statement')
            (79786 'move' i[79784] _indexOfInterest[79765])
            (476566 'end of statement' i[79784])
            unknown yret[511783] "YVV" "temp"
            (511786 'move' yret[511783](511785 'deref' i[79784]))
            (511788 yield yret[511783])
            (476568 'end of statement' i[79784])
            label _continueLabel[79770]
            _indexOfInterest[79765]
            _iterator[79766]
          }
          label _breakLabel[79771]
        }
      }
      {
        unknown call_tmp[627172] "expr temp" "maybe param" "maybe type" "temp"
        (627175 'move' call_tmp[627172](376069 call idxType _mt[243] this[79156]))
        unknown call_tmp[627177] "expr temp" "maybe param" "maybe type" "temp"
        (627180 'move' call_tmp[627177](79802 call chpl__intToIdx call_tmp[627172] 1))
        unknown call_tmp[627184] "expr temp" "maybe param" "maybe type" "temp"
        (627187 'move' call_tmp[627184](376074 call idxType _mt[243] this[79156]))
        unknown call_tmp[627189] "expr temp" "maybe param" "maybe type" "temp"
        (627192 'move' call_tmp[627189](79807 call chpl__intToIdx call_tmp[627184] 0))
        unknown call_tmp[627194] "maybe param" "maybe type" "temp"
        (627197 'move' call_tmp[627194](79808 call chpl_build_bounded_range call_tmp[627177] call_tmp[627189]))
        unknown r[79810] "dead at end of block" "insert auto destroy"
        (541461 'init var' r[79810] call_tmp[627194])
        (79813 'end of statement')
        unknown call_tmp[627199] "expr temp" "maybe param" "maybe type" "temp"
        (627202 'move' call_tmp[627199](79817 call != flwlen[79503] 0))
        unknown call_tmp[627204] "expr temp" "maybe param" "maybe type" "temp"
        (627207 'move' call_tmp[627204](79882 call _cond_test call_tmp[627199]))
        if call_tmp[627204]
        {
          unknown call_tmp[627213] "expr temp" "maybe param" "maybe type" "temp"
          (627216 'move' call_tmp[627213](79824 call first _mt[243] myFollowThis[79311]))
          unknown call_tmp[627218] "maybe param" "maybe type" "temp"
          (627221 'move' call_tmp[627218](79828 call(79820 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627213]))
          const low[79829] "dead at end of block" "const" "insert auto destroy"
          (541463 'init var' low[79829] call_tmp[627218])
          (79832 'end of statement')
          unknown call_tmp[627227] "expr temp" "maybe param" "maybe type" "temp"
          (627230 'move' call_tmp[627227](376084 call strType _mt[243] this[79156]))
          unknown call_tmp[627232] "expr temp" "maybe param" "maybe type" "temp"
          (627235 'move' call_tmp[627232](79838 call chpl__idxToInt low[79829]))
          unknown call_tmp[627237] "expr temp" "maybe param" "maybe type" "temp"
          (627240 'move' call_tmp[627237](79840 call _cast call_tmp[627227] call_tmp[627232]))
          unknown call_tmp[627244] "expr temp" "maybe param" "maybe type" "temp"
          (627247 'move' call_tmp[627244](376089 call strType _mt[243] this[79156]))
          unknown call_tmp[627249] "expr temp" "maybe param" "maybe type" "temp"
          (627252 'move' call_tmp[627249](79844 call - flwlen[79503] 1))
          unknown call_tmp[627254] "expr temp" "maybe param" "maybe type" "temp"
          (627257 'move' call_tmp[627254](79847 call _cast call_tmp[627244] call_tmp[627249]))
          unknown call_tmp[627259] "expr temp" "maybe param" "maybe type" "temp"
          (627262 'move' call_tmp[627259](79849 call + call_tmp[627237] call_tmp[627254]))
          unknown call_tmp[627264] "maybe param" "maybe type" "temp"
          (627267 'move' call_tmp[627264](79852 call(376079 call (partial) chpl_intToIdx _mt[243] this[79156]) call_tmp[627259]))
          const high[79853] "dead at end of block" "const" "insert auto destroy"
          (541465 'init var' high[79853] call_tmp[627264])
          (79856 'end of statement' myFollowThis[79311] low[79829] flwlen[79503])
          unknown call_tmp[627273] "expr temp" "maybe param" "maybe type" "temp"
          (627276 'move' call_tmp[627273](79864 call last _mt[243] myFollowThis[79311]))
          unknown call_tmp[627278] "expr temp" "maybe param" "maybe type" "temp"
          (627281 'move' call_tmp[627278](79868 call(79860 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627273]))
          unknown call_tmp[627283] "expr temp" "maybe param" "maybe type" "temp"
          (627286 'move' call_tmp[627283](79869 call == high[79853] call_tmp[627278]))
          (79872 call assert call_tmp[627283])
          (476573 'end of statement' high[79853] myFollowThis[79311])
          unknown call_tmp[627288] "expr temp" "maybe param" "maybe type" "temp"
          (627291 'move' call_tmp[627288](79877 call chpl_build_bounded_range low[79829] high[79853]))
          (79879 call = r[79810] call_tmp[627288])
          (476576 'end of statement' r[79810] low[79829] high[79853])
        }
        unknown call_tmp[627293] "expr temp" "maybe param" "maybe type" "temp"
        (627296 'move' call_tmp[627293](79893 call _cond_test debugChapelRange[64198]))
        if call_tmp[627293]
        {
          (79891 call chpl_debug_writeln "Expanded range = " r[79810])
          (476580 'end of statement' r[79810])
        }
        {
          unknown _indexOfInterest[79903] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79904] "expr temp" "temp"
          (79913 'move' _iterator[79904](79911 call _getIterator r[79810]))
          Defer
          {
            {
              (79929 call _freeIterator _iterator[79904])
            }
          }
          { scopeless type
            (79918 'move' _indexOfInterest[79903](79915 call iteratorIndex _iterator[79904]))
          }
          ForLoop[79905]
          {
            unknown i[79922] "index var" "insert auto destroy"
            (476583 'end of statement')
            (79924 'move' i[79922] _indexOfInterest[79903])
            (476584 'end of statement' i[79922])
            unknown yret[511790] "YVV" "temp"
            (511793 'move' yret[511790](511792 'deref' i[79922]))
            (511795 yield yret[511790])
            (476586 'end of statement' i[79922])
            label _continueLabel[79908]
            _indexOfInterest[79903]
            _iterator[79904]
          }
          label _breakLabel[79909]
        }
      }
    }
    {
      unknown tmp[421226] "maybe param" "temp"
      (421237 'move' tmp[421226] 1)
      unknown call_tmp[627298] "expr temp" "maybe param" "maybe type" "temp"
      (627301 'move' call_tmp[627298](421239 call _cond_invalid tmp[421226]))
      if call_tmp[627298]
      {
        (421242 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559334] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559335] "maybe param" "temp"
      unknown call_tmp[627303] "expr temp" "maybe param" "maybe type" "temp"
      (627306 'move' call_tmp[627303](421227 call isTrue tmp[421226]))
      (559340 'move' tmp[559335](559338 call _cond_test call_tmp[627303]))
      if tmp[559335]
      {
        unknown tmp[559342] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627310] "expr temp" "maybe param" "maybe type" "temp"
        (627313 'move' call_tmp[627310](79946 call(79942 call (partial) hasLast _mt[243] this[79156])))
        (559344 'move' tmp[559342](421230 call isTrue call_tmp[627310]))
        (559349 'move' tmp[559334](559346 '_paramFoldLogical' tmp[559335] tmp[559342]))
      }
      {
        (559354 'move' tmp[559334](559351 '_paramFoldLogical' tmp[559335] 0))
      }
      unknown call_tmp[627315] "expr temp" "maybe param" "maybe type" "temp"
      (627318 'move' call_tmp[627315](79977 call _cond_test tmp[559334]))
      if call_tmp[627315]
      {
        (79975 call zipLengthHalt module=[255] HaltWrappers[210016] "zippered iteration where a bounded range follows an unbounded iterator")
        (358142 'referenced modules list' HaltWrappers[210016])
      }
      unknown call_tmp[627324] "expr temp" "maybe param" "maybe type" "temp"
      (627327 'move' call_tmp[627324](79988 call first _mt[243] myFollowThis[79311]))
      unknown call_tmp[627329] "maybe param" "maybe type" "temp"
      (627332 'move' call_tmp[627329](79992 call(79984 call (partial) orderToIndex _mt[243] this[79156]) call_tmp[627324]))
      const first[79993] "dead at end of block" "const" "insert auto destroy"
      (541467 'init var' first[79993] call_tmp[627329])
      (79996 'end of statement')
      unknown call_tmp[627336] "expr temp" "maybe param" "maybe type" "temp"
      (627339 'move' call_tmp[627336](79998 call stride _mt[243] this[79156]))
      unknown call_tmp[627343] "expr temp" "maybe param" "maybe type" "temp"
      (627346 'move' call_tmp[627343](80002 call stride _mt[243] myFollowThis[79311]))
      unknown call_tmp[627348] "maybe param" "maybe type" "temp"
      (627351 'move' call_tmp[627348](80005 call * call_tmp[627336] call_tmp[627343]))
      const stride[80007] "dead at end of block" "const" "insert auto destroy"
      (541469 'init var' stride[80007] call_tmp[627348])
      (80010 'end of statement' myFollowThis[79311] myFollowThis[79311])
      unknown call_tmp[627353] "expr temp" "maybe param" "maybe type" "temp"
      (627356 'move' call_tmp[627353](80013 call > stride[80007] 0))
      unknown call_tmp[627358] "expr temp" "maybe param" "maybe type" "temp"
      (627361 'move' call_tmp[627358](80143 call _cond_test call_tmp[627353]))
      if call_tmp[627358]
      {
        unknown call_tmp[627363] "expr temp" "maybe param" "maybe type" "temp"
        (627366 'move' call_tmp[627363](80016 call chpl_build_low_bounded_range first[79993]))
        unknown call_tmp[627370] "expr temp" "maybe param" "maybe type" "temp"
        (627373 'move' call_tmp[627370](376105 call strType _mt[243] this[79156]))
        unknown call_tmp[627375] "expr temp" "maybe param" "maybe type" "temp"
        (627378 'move' call_tmp[627375](80020 call _cast call_tmp[627370] stride[80007]))
        unknown call_tmp[627380] "maybe param" "maybe type" "temp"
        (627383 'move' call_tmp[627380](80022 call chpl_by call_tmp[627363] call_tmp[627375]))
        const r[80024] "dead at end of block" "const" "insert auto destroy"
        (541471 'init var' r[80024] call_tmp[627380])
        (80027 'end of statement' first[79993] stride[80007])
        unknown call_tmp[627385] "expr temp" "maybe param" "maybe type" "temp"
        (627388 'move' call_tmp[627385](80036 call _cond_test debugChapelRange[64198]))
        if call_tmp[627385]
        {
          (80034 call chpl_debug_writeln "Expanded range = " r[80024])
          (476594 'end of statement' r[80024])
        }
        {
          unknown _indexOfInterest[80046] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80047] "expr temp" "temp"
          (80056 'move' _iterator[80047](80054 call _getIterator r[80024]))
          Defer
          {
            {
              (80072 call _freeIterator _iterator[80047])
            }
          }
          { scopeless type
            (80061 'move' _indexOfInterest[80046](80058 call iteratorIndex _iterator[80047]))
          }
          ForLoop[80048]
          {
            unknown i[80065] "index var" "insert auto destroy"
            (476597 'end of statement')
            (80067 'move' i[80065] _indexOfInterest[80046])
            (476598 'end of statement' i[80065])
            unknown yret[511797] "YVV" "temp"
            (511800 'move' yret[511797](511799 'deref' i[80065]))
            (511802 yield yret[511797])
            (476600 'end of statement' i[80065])
            label _continueLabel[80051]
            _indexOfInterest[80046]
            _iterator[80047]
          }
          label _breakLabel[80052]
        }
      }
      {
        unknown call_tmp[627390] "expr temp" "maybe param" "maybe type" "temp"
        (627393 'move' call_tmp[627390](80080 call chpl_build_high_bounded_range first[79993]))
        unknown call_tmp[627397] "expr temp" "maybe param" "maybe type" "temp"
        (627400 'move' call_tmp[627397](376115 call strType _mt[243] this[79156]))
        unknown call_tmp[627402] "expr temp" "maybe param" "maybe type" "temp"
        (627405 'move' call_tmp[627402](80084 call _cast call_tmp[627397] stride[80007]))
        unknown call_tmp[627407] "maybe param" "maybe type" "temp"
        (627410 'move' call_tmp[627407](80086 call chpl_by call_tmp[627390] call_tmp[627402]))
        const r[80088] "dead at end of block" "const" "insert auto destroy"
        (541473 'init var' r[80088] call_tmp[627407])
        (80091 'end of statement' first[79993] stride[80007])
        unknown call_tmp[627412] "expr temp" "maybe param" "maybe type" "temp"
        (627415 'move' call_tmp[627412](80100 call _cond_test debugChapelRange[64198]))
        if call_tmp[627412]
        {
          (80098 call chpl_debug_writeln "Expanded range = " r[80088])
          (476604 'end of statement' r[80088])
        }
        {
          unknown _indexOfInterest[80110] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80111] "expr temp" "temp"
          (80120 'move' _iterator[80111](80118 call _getIterator r[80088]))
          Defer
          {
            {
              (80136 call _freeIterator _iterator[80111])
            }
          }
          { scopeless type
            (80125 'move' _indexOfInterest[80110](80122 call iteratorIndex _iterator[80111]))
          }
          ForLoop[80112]
          {
            unknown i[80129] "index var" "insert auto destroy"
            (476607 'end of statement')
            (80131 'move' i[80129] _indexOfInterest[80110])
            (476608 'end of statement' i[80129])
            unknown yret[511804] "YVV" "temp"
            (511807 'move' yret[511804](511806 'deref' i[80129]))
            (511809 yield yret[511804])
            (476610 'end of statement' i[80129])
            label _continueLabel[80115]
            _indexOfInterest[80110]
            _iterator[80111]
          }
          label _breakLabel[80116]
        }
      }
    }
    (511781 return ret[511779])
  }
  where {
    (79166 call == tag[79149] follower[449])
  }
  function _cast[80160](arg t[80157]:string[26], arg x[80166]:range[64319](?)) : _unknown[51]
  {
    unknown ret[511813] "RVV" "temp"
    unknown ret[80170] "dead at end of block" "insert auto destroy"
    (541475 'default init var' ret[80170] string[26])
    (80173 'end of statement')
    unknown call_tmp[627419] "expr temp" "maybe param" "maybe type" "temp"
    (627422 'move' call_tmp[627419](80180 call(80176 call (partial) hasLowBound _mt[243] x[80166])))
    unknown call_tmp[627424] "expr temp" "maybe param" "maybe type" "temp"
    (627427 'move' call_tmp[627424](80192 call _cond_test call_tmp[627419]))
    if call_tmp[627424]
    {
      unknown call_tmp[627431] "expr temp" "maybe param" "maybe type" "temp"
      (627434 'move' call_tmp[627431](80183 call low _mt[243] x[80166]))
      unknown call_tmp[627436] "expr temp" "maybe param" "maybe type" "temp"
      (627439 'move' call_tmp[627436](80187 call _cast string[26] call_tmp[627431]))
      (80189 call += ret[80170] call_tmp[627436])
      (476612 'end of statement' ret[80170])
    }
    (80215 call += ret[80170] "..")
    (476614 'end of statement' ret[80170])
    unknown call_tmp[627443] "expr temp" "maybe param" "maybe type" "temp"
    (627446 'move' call_tmp[627443](80223 call(80219 call (partial) hasHighBound _mt[243] x[80166])))
    unknown call_tmp[627448] "expr temp" "maybe param" "maybe type" "temp"
    (627451 'move' call_tmp[627448](80235 call _cond_test call_tmp[627443]))
    if call_tmp[627448]
    {
      unknown call_tmp[627455] "expr temp" "maybe param" "maybe type" "temp"
      (627458 'move' call_tmp[627455](80226 call high _mt[243] x[80166]))
      unknown call_tmp[627460] "expr temp" "maybe param" "maybe type" "temp"
      (627463 'move' call_tmp[627460](80230 call _cast string[26] call_tmp[627455]))
      (80232 call += ret[80170] call_tmp[627460])
      (476616 'end of statement' ret[80170])
    }
    unknown call_tmp[627467] "expr temp" "maybe param" "maybe type" "temp"
    (627470 'move' call_tmp[627467](80241 call stride _mt[243] x[80166]))
    unknown call_tmp[627472] "expr temp" "maybe param" "maybe type" "temp"
    (627475 'move' call_tmp[627472](80245 call != call_tmp[627467] 1))
    unknown call_tmp[627477] "expr temp" "maybe param" "maybe type" "temp"
    (627480 'move' call_tmp[627477](80261 call _cond_test call_tmp[627472]))
    if call_tmp[627477]
    {
      unknown call_tmp[627484] "expr temp" "maybe param" "maybe type" "temp"
      (627487 'move' call_tmp[627484](80250 call stride _mt[243] x[80166]))
      unknown call_tmp[627489] "expr temp" "maybe param" "maybe type" "temp"
      (627492 'move' call_tmp[627489](80254 call _cast string[26] call_tmp[627484]))
      unknown call_tmp[627494] "expr temp" "maybe param" "maybe type" "temp"
      (627497 'move' call_tmp[627494](80256 call + " by " call_tmp[627489]))
      (80258 call += ret[80170] call_tmp[627494])
      (476618 'end of statement' ret[80170])
    }
    unknown alignCheckRange[80267] "dead at end of block" "insert auto destroy"
    (541477 'init var' alignCheckRange[80267] x[80166])
    (80270 'end of statement')
    (80278 call(80274 call (partial) normalizeAlignment _mt[243] alignCheckRange[80267]))
    (476620 'end of statement' alignCheckRange[80267])
    unknown call_tmp[627503] "expr temp" "maybe param" "maybe type" "temp"
    (627506 'move' call_tmp[627503](80287 call(80283 call (partial) isNaturallyAligned _mt[243] alignCheckRange[80267])))
    unknown call_tmp[627508] "expr temp" "maybe param" "maybe type" "temp"
    (627511 'move' call_tmp[627508](80288 call ! call_tmp[627503]))
    unknown call_tmp[627513] "expr temp" "maybe param" "maybe type" "temp"
    (627516 'move' call_tmp[627513](80330 call _cond_test call_tmp[627508]))
    if call_tmp[627513]
    {
      unknown call_tmp[627520] "expr temp" "maybe param" "maybe type" "temp"
      (627523 'move' call_tmp[627520](80311 call alignment _mt[243] x[80166]))
      unknown call_tmp[627525] "expr temp" "maybe param" "maybe type" "temp"
      (627528 'move' call_tmp[627525](80315 call chpl__idxToInt call_tmp[627520]))
      unknown call_tmp[627532] "expr temp" "maybe param" "maybe type" "temp"
      (627535 'move' call_tmp[627532](80318 call stride _mt[243] x[80166]))
      unknown call_tmp[627537] "expr temp" "maybe param" "maybe type" "temp"
      (627540 'move' call_tmp[627537](80321 call chpl__mod call_tmp[627525] call_tmp[627532]))
      unknown call_tmp[627542] "expr temp" "maybe param" "maybe type" "temp"
      (627545 'move' call_tmp[627542](80323 call _cast string[26] call_tmp[627537]))
      unknown call_tmp[627547] "expr temp" "maybe param" "maybe type" "temp"
      (627550 'move' call_tmp[627547](80325 call + " align " call_tmp[627542]))
      (80327 call += ret[80170] call_tmp[627547])
      (476622 'end of statement' ret[80170])
    }
    (511818 'move' ret[511813](511817 'deref' ret[80170]))
    gotoReturn _end__cast[511811] _end__cast[511811]
    (476624 'end of statement' ret[80170])
    label _end__cast[511811]
    (511815 return ret[511813])
  }
  function range[64319](?).normalizeAlignment[80343](arg _mt[80348]:_MT[238], ref arg this[80345]:range[64319](?) :
  range[64319](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown tmp[421289] "maybe param" "temp"
    (421300 'move' tmp[421289](376132 call stridable _mt[243] this[80345]))
    unknown call_tmp[627554] "expr temp" "maybe param" "maybe type" "temp"
    (627557 'move' call_tmp[627554](421302 call _cond_invalid tmp[421289]))
    if call_tmp[627554]
    {
      (421305 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559361] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559362] "maybe param" "temp"
    unknown call_tmp[627559] "expr temp" "maybe param" "maybe type" "temp"
    (627562 'move' call_tmp[627559](421290 call isTrue tmp[421289]))
    (559367 'move' tmp[559362](559365 call _cond_test call_tmp[627559]))
    if tmp[559362]
    {
      unknown tmp[559369] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627566] "expr temp" "maybe param" "maybe type" "temp"
      (627569 'move' call_tmp[627566](376136 call aligned _mt[243] this[80345]))
      unknown call_tmp[627571] "expr temp" "maybe param" "maybe type" "temp"
      (627574 'move' call_tmp[627571](80352 call ! call_tmp[627566]))
      (559371 'move' tmp[559369](421293 call isTrue call_tmp[627571]))
      (559376 'move' tmp[559361](559373 '_paramFoldLogical' tmp[559362] tmp[559369]))
    }
    {
      (559381 'move' tmp[559361](559378 '_paramFoldLogical' tmp[559362] 0))
    }
    unknown call_tmp[627576] "expr temp" "maybe param" "maybe type" "temp"
    (627579 'move' call_tmp[627576](80406 call _cond_test tmp[559361]))
    if call_tmp[627576]
    {
      unknown tmp[559473] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559474] "maybe param" "temp"
      unknown call_tmp[627581] "expr temp" "maybe param" "maybe type" "temp"
      (627584 'move' call_tmp[627581](80360 call isBoundedRange this[80345]))
      (559479 'move' tmp[559474](559477 call _cond_test call_tmp[627581]))
      if tmp[559474]
      {
        unknown tmp[559388] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559389] "maybe param" "temp"
        unknown call_tmp[627588] "expr temp" "maybe param" "maybe type" "temp"
        (627591 'move' call_tmp[627588](376146 call stride _mt[243] this[80345]))
        unknown call_tmp[627593] "expr temp" "maybe param" "maybe type" "temp"
        (627596 'move' call_tmp[627593](80363 call > call_tmp[627588] 0))
        (559394 'move' tmp[559389](559392 call _cond_test call_tmp[627593]))
        if tmp[559389]
        {
          unknown tmp[559396] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559398 'move' tmp[559396](376151 call _low _mt[243] this[80345]))
          (559403 'move' tmp[559388](559400 '_paramFoldLogical' tmp[559389] tmp[559396]))
        }
        {
          unknown tmp[559405] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559407 'move' tmp[559405](376156 call _high _mt[243] this[80345]))
          (559412 'move' tmp[559388](559409 '_paramFoldLogical' tmp[559389] tmp[559405]))
        }
        (559484 'move' tmp[559473](559481 '_paramFoldLogical' tmp[559474] tmp[559388]))
      }
      {
        unknown tmp[559446] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559447] "maybe param" "temp"
        unknown call_tmp[627604] "expr temp" "maybe param" "maybe type" "temp"
        (627607 'move' call_tmp[627604](80371 call boundedType _mt[243] this[80345]))
        unknown call_tmp[627609] "expr temp" "maybe param" "maybe type" "temp"
        (627612 'move' call_tmp[627609](80378 call == call_tmp[627604] boundedLow[64210]))
        (559452 'move' tmp[559447](559450 call _cond_test call_tmp[627609]))
        if tmp[559447]
        {
          unknown tmp[559454] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559456 'move' tmp[559454](376161 call _low _mt[243] this[80345]))
          (559461 'move' tmp[559446](559458 '_paramFoldLogical' tmp[559447] tmp[559454]))
        }
        {
          unknown tmp[559419] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[559420] "maybe param" "temp"
          unknown call_tmp[627618] "expr temp" "maybe param" "maybe type" "temp"
          (627621 'move' call_tmp[627618](80382 call boundedType _mt[243] this[80345]))
          unknown call_tmp[627623] "expr temp" "maybe param" "maybe type" "temp"
          (627626 'move' call_tmp[627623](80389 call == call_tmp[627618] boundedHigh[64212]))
          (559425 'move' tmp[559420](559423 call _cond_test call_tmp[627623]))
          if tmp[559420]
          {
            unknown tmp[559427] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (559429 'move' tmp[559427](376166 call _high _mt[243] this[80345]))
            (559434 'move' tmp[559419](559431 '_paramFoldLogical' tmp[559420] tmp[559427]))
          }
          {
            (559439 'move' tmp[559419](559436 '_paramFoldLogical' tmp[559420] 0))
          }
          (559466 'move' tmp[559446](559463 '_paramFoldLogical' tmp[559447] tmp[559419]))
        }
        (559489 'move' tmp[559473](559486 '_paramFoldLogical' tmp[559474] tmp[559446]))
      }
      unknown call_tmp[627632] "expr temp" "maybe param" "maybe type" "temp"
      (627635 'move' call_tmp[627632](376141 call _alignment _mt[243] this[80345]))
      (80402 call = call_tmp[627632] tmp[559473])
    }
    (511822 return _void[55])
  }
  function range[64319](?).chpl__unTranslate[80420](arg _mt[80425]:_MT[238], arg this[80422]:range[64319](?) :
  range[64319](?), arg i[80417] :
  (376170 call intIdxType _mt[243] this[80422])) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511826] "RVV" "temp"
    unknown call_tmp[627639] "expr temp" "maybe param" "maybe type" "temp"
    (627642 'move' call_tmp[627639](80429 call - this[80422] i[80417]))
    (511831 'move' ret[511826](511830 'deref' call_tmp[627639]))
    (511828 return ret[511826])
  }
  function range[64319](?).chpl__unTranslate[80441](arg _mt[80446]:_MT[238], arg this[80443]:range[64319](?) :
  range[64319](?), arg i[80439]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511835] "RVV" "temp"
    unknown call_tmp[627644] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627647 'move' call_tmp[627644](80450 'typeof' i[80439]))
    unknown call_tmp[627649] "expr temp" "maybe param" "maybe type" "temp"
    (627652 'move' call_tmp[627649](80452 call isIntType call_tmp[627644]))
    unknown call_tmp[627654] "expr temp" "maybe param" "maybe type" "temp"
    (627657 'move' call_tmp[627654](80468 call _cond_test call_tmp[627649]))
    if call_tmp[627654]
    {
      unknown call_tmp[627659] "expr temp" "maybe param" "maybe type" "temp"
      (627662 'move' call_tmp[627659](80455 call - this[80443] i[80439]))
      (511840 'move' ret[511835](511839 'deref' call_tmp[627659]))
      gotoReturn _end_chpl__unTranslate[511833] _end_chpl__unTranslate[511833]
    }
    {
      unknown call_tmp[627664] "expr temp" "maybe param" "maybe type" "temp"
      (627667 'move' call_tmp[627664](80463 call abs i[80439]))
      unknown call_tmp[627669] "expr temp" "maybe param" "maybe type" "temp"
      (627672 'move' call_tmp[627669](80464 call + this[80443] call_tmp[627664]))
      (511845 'move' ret[511835](511844 'deref' call_tmp[627669]))
      gotoReturn _end_chpl__unTranslate[511833] _end_chpl__unTranslate[511833]
    }
    label _end_chpl__unTranslate[511833]
    (511837 return ret[511835])
  }
  function chpl__hasAlignment[80486](arg r[80483]:range[64319](?)) : _unknown[51]
  {
    unknown ret[511851] "RVV" "temp"
    unknown tmp[421310] "maybe param" "temp"
    (421321 'move' tmp[421310](80493 call(80489 call (partial) hasLowBound _mt[243] r[80483])))
    unknown call_tmp[627676] "expr temp" "maybe param" "maybe type" "temp"
    (627679 'move' call_tmp[627676](421323 call _cond_invalid tmp[421310]))
    if call_tmp[627676]
    {
      (421326 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559496] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559497] "maybe param" "temp"
    unknown call_tmp[627681] "expr temp" "maybe param" "maybe type" "temp"
    (627684 'move' call_tmp[627681](421311 call isTrue tmp[421310]))
    (559502 'move' tmp[559497](559500 call _cond_test call_tmp[627681]))
    if tmp[559497]
    {
      unknown tmp[559504] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627688] "expr temp" "maybe param" "maybe type" "temp"
      (627691 'move' call_tmp[627688](80495 call stride _mt[243] r[80483]))
      unknown call_tmp[627693] "expr temp" "maybe param" "maybe type" "temp"
      (627696 'move' call_tmp[627693](80499 call >= call_tmp[627688] 2))
      (559506 'move' tmp[559504](421314 call isTrue call_tmp[627693]))
      (559511 'move' tmp[559496](559508 '_paramFoldLogical' tmp[559497] tmp[559504]))
    }
    {
      (559516 'move' tmp[559496](559513 '_paramFoldLogical' tmp[559497] 0))
    }
    unknown call_tmp[627698] "expr temp" "maybe param" "maybe type" "temp"
    (627701 'move' call_tmp[627698](80506 call _cond_test tmp[559496]))
    if call_tmp[627698]
    {
      (511856 'move' ret[511851](511855 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511849] _end_chpl__hasAlignment[511849]
    }
    unknown tmp[421331] "maybe param" "temp"
    (421342 'move' tmp[421331](80517 call(80513 call (partial) hasHighBound _mt[243] r[80483])))
    unknown call_tmp[627705] "expr temp" "maybe param" "maybe type" "temp"
    (627708 'move' call_tmp[627705](421344 call _cond_invalid tmp[421331]))
    if call_tmp[627705]
    {
      (421347 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559523] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559524] "maybe param" "temp"
    unknown call_tmp[627710] "expr temp" "maybe param" "maybe type" "temp"
    (627713 'move' call_tmp[627710](421332 call isTrue tmp[421331]))
    (559529 'move' tmp[559524](559527 call _cond_test call_tmp[627710]))
    if tmp[559524]
    {
      unknown tmp[559531] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627717] "expr temp" "maybe param" "maybe type" "temp"
      (627720 'move' call_tmp[627717](80519 call stride _mt[243] r[80483]))
      unknown call_tmp[627722] "expr temp" "maybe param" "maybe type" "temp"
      (627725 'move' call_tmp[627722](80523 call - 2))
      unknown call_tmp[627727] "expr temp" "maybe param" "maybe type" "temp"
      (627730 'move' call_tmp[627727](80525 call <= call_tmp[627717] call_tmp[627722]))
      (559533 'move' tmp[559531](421335 call isTrue call_tmp[627727]))
      (559538 'move' tmp[559523](559535 '_paramFoldLogical' tmp[559524] tmp[559531]))
    }
    {
      (559543 'move' tmp[559523](559540 '_paramFoldLogical' tmp[559524] 0))
    }
    unknown call_tmp[627732] "expr temp" "maybe param" "maybe type" "temp"
    (627735 'move' call_tmp[627732](80532 call _cond_test tmp[559523]))
    if call_tmp[627732]
    {
      (511861 'move' ret[511851](511860 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511849] _end_chpl__hasAlignment[511849]
    }
    (511866 'move' ret[511851](511865 'deref' 0))
    label _end_chpl__hasAlignment[511849]
    (511853 return ret[511851])
  }
  function chpl__mod[80548](arg dividend[80545]:integral[199](?), arg modulus[80551]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511870] "RVV" "temp"
    unknown call_tmp[627737] "expr temp" "maybe param" "maybe type" "temp"
    (627740 'move' call_tmp[627737](80557 call abs modulus[80551]))
    unknown call_tmp[627744] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627747 'move' call_tmp[627744](80562 'typeof' dividend[80545]))
    unknown call_tmp[627749] "maybe param" "maybe type" "temp"
    (627752 'move' call_tmp[627749](80564 call(80558 call (partial) safeCast _mt[243] call_tmp[627737]) call_tmp[627744]))
    const m[80565] "dead at end of block" "const" "insert auto destroy"
    (541479 'init var' m[80565] call_tmp[627749])
    (80568 'end of statement')
    unknown call_tmp[627754] "maybe param" "maybe type" "temp"
    (627757 'move' call_tmp[627754](80572 call % dividend[80545] m[80565]))
    unknown tmp[80574] "dead at end of block" "insert auto destroy"
    (541481 'init var' tmp[80574] call_tmp[627754])
    (80577 'end of statement' m[80565])
    unknown call_tmp[627759] "expr temp" "maybe param" "maybe type" "temp"
    (627762 'move' call_tmp[627759](80581 call isInt dividend[80545]))
    unknown call_tmp[627764] "expr temp" "maybe param" "maybe type" "temp"
    (627767 'move' call_tmp[627764](80596 call _cond_test call_tmp[627759]))
    if call_tmp[627764]
    {
      unknown call_tmp[627769] "expr temp" "maybe param" "maybe type" "temp"
      (627772 'move' call_tmp[627769](80584 call < tmp[80574] 0))
      unknown call_tmp[627774] "expr temp" "maybe param" "maybe type" "temp"
      (627777 'move' call_tmp[627774](80591 call _cond_test call_tmp[627769]))
      if call_tmp[627774]
      {
        (80588 call += tmp[80574] m[80565])
        (476637 'end of statement' tmp[80574] m[80565])
      }
    }
    (511875 'move' ret[511870](511874 'deref' tmp[80574]))
    gotoReturn _end_chpl__mod[511868] _end_chpl__mod[511868]
    (476640 'end of statement' tmp[80574])
    label _end_chpl__mod[511868]
    (511872 return ret[511870])
  }
  function chpl__diffMod[80612](arg minuend[80609]:integral[199](?), arg subtrahend[80615]:integral[199](?), arg modulus[80619]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511881] "RVV" "temp"
    unknown call_tmp[627779] "expr temp" "maybe param" "maybe type" "temp"
    (627782 'move' call_tmp[627779](80633 call abs modulus[80619]))
    unknown call_tmp[627786] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627789 'move' call_tmp[627786](80638 'typeof' minuend[80609]))
    unknown call_tmp[627791] "maybe param" "maybe type" "temp"
    (627794 'move' call_tmp[627791](80640 call(80634 call (partial) safeCast _mt[243] call_tmp[627779]) call_tmp[627786]))
    const m[80641] "dead at end of block" "const" "insert auto destroy"
    (541483 'init var' m[80641] call_tmp[627791])
    (80644 'end of statement')
    unknown call_tmp[627796] "maybe param" "maybe type" "temp"
    (627799 'move' call_tmp[627796](80650 call chpl__mod minuend[80609] m[80641]))
    unknown minMod[80651] "dead at end of block" "insert auto destroy"
    (541485 'init var' minMod[80651] call_tmp[627796])
    (80654 'end of statement')
    unknown call_tmp[627801] "maybe param" "maybe type" "temp"
    (627804 'move' call_tmp[627801](80659 call chpl__mod subtrahend[80615] m[80641]))
    unknown subMod[80660] "dead at end of block" "insert auto destroy"
    (541487 'init var' subMod[80660] call_tmp[627801])
    (80663 'end of statement' m[80641] m[80641])
    unknown tmp[559550] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559551] "maybe param" "temp"
    unknown call_tmp[627806] "expr temp" "maybe param" "maybe type" "temp"
    (627809 'move' call_tmp[627806](80666 call < minMod[80651] subMod[80660]))
    (559556 'move' tmp[559551](559554 call _cond_test call_tmp[627806]))
    if tmp[559551]
    {
      unknown tmp[559558] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627811] "expr temp" "maybe param" "maybe type" "temp"
      (627814 'move' call_tmp[627811](80671 call - subMod[80660] minMod[80651]))
      (559560 'move' tmp[559558](80673 call - m[80641] call_tmp[627811]))
      (559565 'move' tmp[559550](559562 '_paramFoldLogical' tmp[559551] tmp[559558]))
    }
    {
      unknown tmp[559567] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (559569 'move' tmp[559567](80677 call - minMod[80651] subMod[80660]))
      (559574 'move' tmp[559550](559571 '_paramFoldLogical' tmp[559551] tmp[559567]))
    }
    unknown call_tmp[627816] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627819 'move' call_tmp[627816](511885 'typeof' minuend[80609]))
    (511888 'move' ret[511881](511887 'coerce' tmp[559550] call_tmp[627816]))
    gotoReturn _end_chpl__diffMod[511879] _end_chpl__diffMod[511879]
    (476644 'end of statement' minMod[80651] subMod[80660] m[80641] subMod[80660] minMod[80651] minMod[80651] subMod[80660])
    label _end_chpl__diffMod[511879]
    (511883 return ret[511881])
  }
  where {
    unknown call_tmp[627821] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627824 'move' call_tmp[627821](80625 'typeof' minuend[80609]))
    unknown call_tmp[627826] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627829 'move' call_tmp[627826](80627 'typeof' subtrahend[80615]))
    (80628 call == call_tmp[627821] call_tmp[627826])
  }
  { scopeless type
    (80623 'typeof' minuend[80609])
  }
  function chpl__diffMod[80694](arg minuend[80691]:integral[199](?), arg subtrahend[80697]:integral[199](?), arg modulus[80701]:integral[199](?)) : _unknown[51] "no return value for void"
  {
    (80723 call compilerError "chpl__diffMod -- Operand types must match.")
    (511892 return _void[55])
  }
  function chpl__add[80735](arg a[80732]:_any[178](?), arg b[80738] :
  (459756 'typeof' a[80732]), arg resultType[80741]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511896] "RVV" "temp"
    unknown call_tmp[627831] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627834 'move' call_tmp[627831](459758 'typeof' a[80732]))
    unknown call_tmp[627836] "expr temp" "maybe param" "maybe type" "temp"
    (627839 'move' call_tmp[627836](80746 call isIntegralType call_tmp[627831]))
    unknown call_tmp[627841] "expr temp" "maybe param" "maybe type" "temp"
    (627844 'move' call_tmp[627841](80747 call ! call_tmp[627836]))
    unknown call_tmp[627846] "expr temp" "maybe param" "maybe type" "temp"
    (627849 'move' call_tmp[627846](80770 call _cond_test call_tmp[627841]))
    if call_tmp[627846]
    {
      (80768 call compilerError "Values must be of integral type.")
    }
    unknown tmp[421352] "maybe param" "temp"
    unknown tmp[421373] "maybe param" "temp"
    (421384 'move' tmp[421373](80778 call > a[80732] 0))
    unknown call_tmp[627851] "expr temp" "maybe param" "maybe type" "temp"
    (627854 'move' call_tmp[627851](421386 call _cond_invalid tmp[421373]))
    if call_tmp[627851]
    {
      (421389 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559581] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559582] "maybe param" "temp"
    unknown call_tmp[627856] "expr temp" "maybe param" "maybe type" "temp"
    (627859 'move' call_tmp[627856](421374 call isTrue tmp[421373]))
    (559587 'move' tmp[559582](559585 call _cond_test call_tmp[627856]))
    if tmp[559582]
    {
      unknown tmp[559589] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627861] "expr temp" "maybe param" "maybe type" "temp"
      (627864 'move' call_tmp[627861](80782 call > b[80738] 0))
      (559591 'move' tmp[559589](421377 call isTrue call_tmp[627861]))
      (559596 'move' tmp[559581](559593 '_paramFoldLogical' tmp[559582] tmp[559589]))
    }
    {
      (559601 'move' tmp[559581](559598 '_paramFoldLogical' tmp[559582] 0))
    }
    (421363 'move' tmp[421352] tmp[559581])
    unknown call_tmp[627866] "expr temp" "maybe param" "maybe type" "temp"
    (627869 'move' call_tmp[627866](421365 call _cond_invalid tmp[421352]))
    if call_tmp[627866]
    {
      (421368 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559608] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559609] "maybe param" "temp"
    unknown call_tmp[627871] "expr temp" "maybe param" "maybe type" "temp"
    (627874 'move' call_tmp[627871](421353 call isTrue tmp[421352]))
    (559614 'move' tmp[559609](559612 call _cond_test call_tmp[627871]))
    if tmp[559609]
    {
      unknown tmp[559616] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627876] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (627879 'move' call_tmp[627876](459760 'typeof' a[80732]))
      unknown call_tmp[627881] "expr temp" "maybe param" "maybe type" "temp"
      (627884 'move' call_tmp[627881](80790 call max call_tmp[627876]))
      unknown call_tmp[627886] "expr temp" "maybe param" "maybe type" "temp"
      (627889 'move' call_tmp[627886](80792 call - call_tmp[627881] a[80732]))
      unknown call_tmp[627891] "expr temp" "maybe param" "maybe type" "temp"
      (627894 'move' call_tmp[627891](80794 call > b[80738] call_tmp[627886]))
      (559618 'move' tmp[559616](421356 call isTrue call_tmp[627891]))
      (559623 'move' tmp[559608](559620 '_paramFoldLogical' tmp[559609] tmp[559616]))
    }
    {
      (559628 'move' tmp[559608](559625 '_paramFoldLogical' tmp[559609] 0))
    }
    unknown call_tmp[627896] "expr temp" "maybe param" "maybe type" "temp"
    (627899 'move' call_tmp[627896](80804 call _cond_test tmp[559608]))
    if call_tmp[627896]
    {
      unknown call_tmp[627901] "expr temp" "maybe param" "maybe type" "temp"
      (627904 'move' call_tmp[627901](80801 call max resultType[80741]))
      (511901 'move' ret[511896](511900 'deref' call_tmp[627901]))
      gotoReturn _end_chpl__add[511894] _end_chpl__add[511894]
    }
    unknown tmp[421394] "maybe param" "temp"
    unknown tmp[421415] "maybe param" "temp"
    (421426 'move' tmp[421415](80811 call < a[80732] 0))
    unknown call_tmp[627906] "expr temp" "maybe param" "maybe type" "temp"
    (627909 'move' call_tmp[627906](421428 call _cond_invalid tmp[421415]))
    if call_tmp[627906]
    {
      (421431 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559635] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559636] "maybe param" "temp"
    unknown call_tmp[627911] "expr temp" "maybe param" "maybe type" "temp"
    (627914 'move' call_tmp[627911](421416 call isTrue tmp[421415]))
    (559641 'move' tmp[559636](559639 call _cond_test call_tmp[627911]))
    if tmp[559636]
    {
      unknown tmp[559643] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627916] "expr temp" "maybe param" "maybe type" "temp"
      (627919 'move' call_tmp[627916](80815 call < b[80738] 0))
      (559645 'move' tmp[559643](421419 call isTrue call_tmp[627916]))
      (559650 'move' tmp[559635](559647 '_paramFoldLogical' tmp[559636] tmp[559643]))
    }
    {
      (559655 'move' tmp[559635](559652 '_paramFoldLogical' tmp[559636] 0))
    }
    (421405 'move' tmp[421394] tmp[559635])
    unknown call_tmp[627921] "expr temp" "maybe param" "maybe type" "temp"
    (627924 'move' call_tmp[627921](421407 call _cond_invalid tmp[421394]))
    if call_tmp[627921]
    {
      (421410 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559662] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559663] "maybe param" "temp"
    unknown call_tmp[627926] "expr temp" "maybe param" "maybe type" "temp"
    (627929 'move' call_tmp[627926](421395 call isTrue tmp[421394]))
    (559668 'move' tmp[559663](559666 call _cond_test call_tmp[627926]))
    if tmp[559663]
    {
      unknown tmp[559670] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627931] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (627934 'move' call_tmp[627931](459762 'typeof' a[80732]))
      unknown call_tmp[627936] "expr temp" "maybe param" "maybe type" "temp"
      (627939 'move' call_tmp[627936](80823 call min call_tmp[627931]))
      unknown call_tmp[627941] "expr temp" "maybe param" "maybe type" "temp"
      (627944 'move' call_tmp[627941](80825 call - call_tmp[627936] a[80732]))
      unknown call_tmp[627946] "expr temp" "maybe param" "maybe type" "temp"
      (627949 'move' call_tmp[627946](80827 call < b[80738] call_tmp[627941]))
      (559672 'move' tmp[559670](421398 call isTrue call_tmp[627946]))
      (559677 'move' tmp[559662](559674 '_paramFoldLogical' tmp[559663] tmp[559670]))
    }
    {
      (559682 'move' tmp[559662](559679 '_paramFoldLogical' tmp[559663] 0))
    }
    unknown call_tmp[627951] "expr temp" "maybe param" "maybe type" "temp"
    (627954 'move' call_tmp[627951](80837 call _cond_test tmp[559662]))
    if call_tmp[627951]
    {
      unknown call_tmp[627956] "expr temp" "maybe param" "maybe type" "temp"
      (627959 'move' call_tmp[627956](80834 call min resultType[80741]))
      (511906 'move' ret[511896](511905 'deref' call_tmp[627956]))
      gotoReturn _end_chpl__add[511894] _end_chpl__add[511894]
    }
    unknown call_tmp[627961] "expr temp" "maybe param" "maybe type" "temp"
    (627964 'move' call_tmp[627961](80845 call isUintType resultType[80741]))
    unknown call_tmp[627966] "expr temp" "maybe param" "maybe type" "temp"
    (627969 'move' call_tmp[627966](80922 call _cond_test call_tmp[627961]))
    if call_tmp[627966]
    {
      unknown tmp[421436] "maybe param" "temp"
      unknown tmp[421457] "maybe param" "temp"
      unknown tmp[421478] "maybe param" "temp"
      (421489 'move' tmp[421478](80848 call < a[80732] 0))
      unknown call_tmp[627971] "expr temp" "maybe param" "maybe type" "temp"
      (627974 'move' call_tmp[627971](421491 call _cond_invalid tmp[421478]))
      if call_tmp[627971]
      {
        (421494 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559689] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559690] "maybe param" "temp"
      unknown call_tmp[627976] "expr temp" "maybe param" "maybe type" "temp"
      (627979 'move' call_tmp[627976](421479 call isTrue tmp[421478]))
      (559695 'move' tmp[559690](559693 call _cond_test call_tmp[627976]))
      if tmp[559690]
      {
        unknown tmp[559697] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627981] "expr temp" "maybe param" "maybe type" "temp"
        (627984 'move' call_tmp[627981](80852 call > b[80738] 0))
        (559699 'move' tmp[559697](421482 call isTrue call_tmp[627981]))
        (559704 'move' tmp[559689](559701 '_paramFoldLogical' tmp[559690] tmp[559697]))
      }
      {
        (559709 'move' tmp[559689](559706 '_paramFoldLogical' tmp[559690] 0))
      }
      (421468 'move' tmp[421457] tmp[559689])
      unknown call_tmp[627986] "expr temp" "maybe param" "maybe type" "temp"
      (627989 'move' call_tmp[627986](421470 call _cond_invalid tmp[421457]))
      if call_tmp[627986]
      {
        (421473 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559743] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559744] "maybe param" "temp"
      unknown call_tmp[627991] "expr temp" "maybe param" "maybe type" "temp"
      (627994 'move' call_tmp[627991](421458 call isTrue tmp[421457]))
      (559749 'move' tmp[559744](559747 call _cond_test call_tmp[627991]))
      if tmp[559744]
      {
        unknown tmp[421499] "maybe param" "temp"
        unknown call_tmp[627996] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (627999 'move' call_tmp[627996](459764 'typeof' a[80732]))
        unknown call_tmp[628001] "expr temp" "maybe param" "maybe type" "temp"
        (628004 'move' call_tmp[628001](80860 call min call_tmp[627996]))
        (421510 'move' tmp[421499](80861 call == a[80732] call_tmp[628001]))
        unknown call_tmp[628006] "expr temp" "maybe param" "maybe type" "temp"
        (628009 'move' call_tmp[628006](421512 call _cond_invalid tmp[421499]))
        if call_tmp[628006]
        {
          (421515 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[559716] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559717] "maybe param" "temp"
        unknown call_tmp[628011] "expr temp" "maybe param" "maybe type" "temp"
        (628014 'move' call_tmp[628011](421500 call isTrue tmp[421499]))
        (559722 'move' tmp[559717](559720 call _cond_test call_tmp[628011]))
        if tmp[559717]
        {
          (559727 'move' tmp[559716](559724 '_paramFoldLogical' tmp[559717] 1))
        }
        {
          unknown tmp[559729] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628016] "expr temp" "maybe param" "maybe type" "temp"
          (628019 'move' call_tmp[628016](80866 call abs a[80732]))
          unknown call_tmp[628021] "expr temp" "maybe param" "maybe type" "temp"
          (628024 'move' call_tmp[628021](80870 call abs b[80738]))
          unknown call_tmp[628026] "expr temp" "maybe param" "maybe type" "temp"
          (628029 'move' call_tmp[628026](80871 call > call_tmp[628016] call_tmp[628021]))
          (559731 'move' tmp[559729](421504 call isTrue call_tmp[628026]))
          (559736 'move' tmp[559716](559733 '_paramFoldLogical' tmp[559717] tmp[559729]))
        }
        unknown tmp[559751] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559753 'move' tmp[559751](421461 call isTrue tmp[559716]))
        (559758 'move' tmp[559743](559755 '_paramFoldLogical' tmp[559744] tmp[559751]))
      }
      {
        (559763 'move' tmp[559743](559760 '_paramFoldLogical' tmp[559744] 0))
      }
      (421447 'move' tmp[421436] tmp[559743])
      unknown call_tmp[628031] "expr temp" "maybe param" "maybe type" "temp"
      (628034 'move' call_tmp[628031](421449 call _cond_invalid tmp[421436]))
      if call_tmp[628031]
      {
        (421452 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559851] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559852] "maybe param" "temp"
      unknown call_tmp[628036] "expr temp" "maybe param" "maybe type" "temp"
      (628039 'move' call_tmp[628036](421437 call isTrue tmp[421436]))
      (559857 'move' tmp[559852](559855 call _cond_test call_tmp[628036]))
      if tmp[559852]
      {
        (559862 'move' tmp[559851](559859 '_paramFoldLogical' tmp[559852] 1))
      }
      {
        unknown tmp[421520] "maybe param" "temp"
        unknown tmp[421541] "maybe param" "temp"
        (421552 'move' tmp[421541](80879 call > a[80732] 0))
        unknown call_tmp[628041] "expr temp" "maybe param" "maybe type" "temp"
        (628044 'move' call_tmp[628041](421554 call _cond_invalid tmp[421541]))
        if call_tmp[628041]
        {
          (421557 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559770] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559771] "maybe param" "temp"
        unknown call_tmp[628046] "expr temp" "maybe param" "maybe type" "temp"
        (628049 'move' call_tmp[628046](421542 call isTrue tmp[421541]))
        (559776 'move' tmp[559771](559774 call _cond_test call_tmp[628046]))
        if tmp[559771]
        {
          unknown tmp[559778] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628051] "expr temp" "maybe param" "maybe type" "temp"
          (628054 'move' call_tmp[628051](80883 call < b[80738] 0))
          (559780 'move' tmp[559778](421545 call isTrue call_tmp[628051]))
          (559785 'move' tmp[559770](559782 '_paramFoldLogical' tmp[559771] tmp[559778]))
        }
        {
          (559790 'move' tmp[559770](559787 '_paramFoldLogical' tmp[559771] 0))
        }
        (421531 'move' tmp[421520] tmp[559770])
        unknown call_tmp[628056] "expr temp" "maybe param" "maybe type" "temp"
        (628059 'move' call_tmp[628056](421533 call _cond_invalid tmp[421520]))
        if call_tmp[628056]
        {
          (421536 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559824] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559825] "maybe param" "temp"
        unknown call_tmp[628061] "expr temp" "maybe param" "maybe type" "temp"
        (628064 'move' call_tmp[628061](421521 call isTrue tmp[421520]))
        (559830 'move' tmp[559825](559828 call _cond_test call_tmp[628061]))
        if tmp[559825]
        {
          unknown tmp[421562] "maybe param" "temp"
          unknown call_tmp[628066] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (628069 'move' call_tmp[628066](459766 'typeof' a[80732]))
          unknown call_tmp[628071] "expr temp" "maybe param" "maybe type" "temp"
          (628074 'move' call_tmp[628071](80891 call min call_tmp[628066]))
          (421573 'move' tmp[421562](80892 call == b[80738] call_tmp[628071]))
          unknown call_tmp[628076] "expr temp" "maybe param" "maybe type" "temp"
          (628079 'move' call_tmp[628076](421575 call _cond_invalid tmp[421562]))
          if call_tmp[628076]
          {
            (421578 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[559797] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[559798] "maybe param" "temp"
          unknown call_tmp[628081] "expr temp" "maybe param" "maybe type" "temp"
          (628084 'move' call_tmp[628081](421563 call isTrue tmp[421562]))
          (559803 'move' tmp[559798](559801 call _cond_test call_tmp[628081]))
          if tmp[559798]
          {
            (559808 'move' tmp[559797](559805 '_paramFoldLogical' tmp[559798] 1))
          }
          {
            unknown tmp[559810] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[628086] "expr temp" "maybe param" "maybe type" "temp"
            (628089 'move' call_tmp[628086](80897 call abs b[80738]))
            unknown call_tmp[628091] "expr temp" "maybe param" "maybe type" "temp"
            (628094 'move' call_tmp[628091](80901 call abs a[80732]))
            unknown call_tmp[628096] "expr temp" "maybe param" "maybe type" "temp"
            (628099 'move' call_tmp[628096](80902 call > call_tmp[628086] call_tmp[628091]))
            (559812 'move' tmp[559810](421567 call isTrue call_tmp[628096]))
            (559817 'move' tmp[559797](559814 '_paramFoldLogical' tmp[559798] tmp[559810]))
          }
          unknown tmp[559832] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559834 'move' tmp[559832](421524 call isTrue tmp[559797]))
          (559839 'move' tmp[559824](559836 '_paramFoldLogical' tmp[559825] tmp[559832]))
        }
        {
          (559844 'move' tmp[559824](559841 '_paramFoldLogical' tmp[559825] 0))
        }
        unknown tmp[559864] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559866 'move' tmp[559864](421441 call isTrue tmp[559824]))
        (559871 'move' tmp[559851](559868 '_paramFoldLogical' tmp[559852] tmp[559864]))
      }
      unknown call_tmp[628101] "expr temp" "maybe param" "maybe type" "temp"
      (628104 'move' call_tmp[628101](80916 call _cond_test tmp[559851]))
      if call_tmp[628101]
      {
        unknown call_tmp[628106] "expr temp" "maybe param" "maybe type" "temp"
        (628109 'move' call_tmp[628106](80912 call _cast resultType[80741] 0))
        (511911 'move' ret[511896](511910 'deref' call_tmp[628106]))
        gotoReturn _end_chpl__add[511894] _end_chpl__add[511894]
      }
    }
    unknown call_tmp[628111] "expr temp" "maybe param" "maybe type" "temp"
    (628114 'move' call_tmp[628111](80928 call + a[80732] b[80738]))
    unknown call_tmp[628116] "expr temp" "maybe param" "maybe type" "temp"
    (628119 'move' call_tmp[628116](80931 call _cast resultType[80741] call_tmp[628111]))
    (511916 'move' ret[511896](511915 'deref' call_tmp[628116]))
    label _end_chpl__add[511894]
    (511898 return ret[511896])
  }
  function chpl__addRangeStrides[80941](arg start[80939]:_any[178](?), arg stride[80943]:_any[178](?), arg count[80945]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511947] "RVV" "temp"
    function convert[80953](arg a[80951]:_any[178](?), arg b[80955]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[511920] "RVV" "param" "temp"
      unknown tmp[421583] "maybe param" "temp"
      unknown tmp[421604] "maybe param" "temp"
      unknown call_tmp[628121] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (628124 'move' call_tmp[628121](80958 'typeof' a[80951]))
      unknown call_tmp[628126] "expr temp" "maybe param" "maybe type" "temp"
      (628129 'move' call_tmp[628126](80962 call int(64)[13] 64))
      (421615 'move' tmp[421604](80963 call == call_tmp[628121] call_tmp[628126]))
      unknown call_tmp[628131] "expr temp" "maybe param" "maybe type" "temp"
      (628134 'move' call_tmp[628131](421617 call _cond_invalid tmp[421604]))
      if call_tmp[628131]
      {
        (421620 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559878] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559879] "maybe param" "temp"
      unknown call_tmp[628136] "expr temp" "maybe param" "maybe type" "temp"
      (628139 'move' call_tmp[628136](421605 call isTrue tmp[421604]))
      (559884 'move' tmp[559879](559882 call _cond_test call_tmp[628136]))
      if tmp[559879]
      {
        unknown tmp[559886] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628141] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628144 'move' call_tmp[628141](80966 'typeof' b[80955]))
        unknown call_tmp[628146] "expr temp" "maybe param" "maybe type" "temp"
        (628149 'move' call_tmp[628146](80970 call uint(64)[115] 64))
        unknown call_tmp[628151] "expr temp" "maybe param" "maybe type" "temp"
        (628154 'move' call_tmp[628151](80971 call == call_tmp[628141] call_tmp[628146]))
        (559888 'move' tmp[559886](421608 call isTrue call_tmp[628151]))
        (559893 'move' tmp[559878](559890 '_paramFoldLogical' tmp[559879] tmp[559886]))
      }
      {
        (559898 'move' tmp[559878](559895 '_paramFoldLogical' tmp[559879] 0))
      }
      (421594 'move' tmp[421583] tmp[559878])
      unknown call_tmp[628156] "expr temp" "maybe param" "maybe type" "temp"
      (628159 'move' call_tmp[628156](421596 call _cond_invalid tmp[421583]))
      if call_tmp[628156]
      {
        (421599 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559932] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559933] "maybe param" "temp"
      unknown call_tmp[628161] "expr temp" "maybe param" "maybe type" "temp"
      (628164 'move' call_tmp[628161](421584 call isTrue tmp[421583]))
      (559938 'move' tmp[559933](559936 call _cond_test call_tmp[628161]))
      if tmp[559933]
      {
        (559943 'move' tmp[559932](559940 '_paramFoldLogical' tmp[559933] 1))
      }
      {
        unknown tmp[421625] "maybe param" "temp"
        unknown call_tmp[628166] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628169 'move' call_tmp[628166](80976 'typeof' a[80951]))
        unknown call_tmp[628171] "expr temp" "maybe param" "maybe type" "temp"
        (628174 'move' call_tmp[628171](80980 call uint(64)[115] 64))
        (421636 'move' tmp[421625](80981 call == call_tmp[628166] call_tmp[628171]))
        unknown call_tmp[628176] "expr temp" "maybe param" "maybe type" "temp"
        (628179 'move' call_tmp[628176](421638 call _cond_invalid tmp[421625]))
        if call_tmp[628176]
        {
          (421641 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559905] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559906] "maybe param" "temp"
        unknown call_tmp[628181] "expr temp" "maybe param" "maybe type" "temp"
        (628184 'move' call_tmp[628181](421626 call isTrue tmp[421625]))
        (559911 'move' tmp[559906](559909 call _cond_test call_tmp[628181]))
        if tmp[559906]
        {
          unknown tmp[559913] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628186] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (628189 'move' call_tmp[628186](80984 'typeof' b[80955]))
          unknown call_tmp[628191] "expr temp" "maybe param" "maybe type" "temp"
          (628194 'move' call_tmp[628191](80988 call int(64)[13] 64))
          unknown call_tmp[628196] "expr temp" "maybe param" "maybe type" "temp"
          (628199 'move' call_tmp[628196](80989 call == call_tmp[628186] call_tmp[628191]))
          (559915 'move' tmp[559913](421629 call isTrue call_tmp[628196]))
          (559920 'move' tmp[559905](559917 '_paramFoldLogical' tmp[559906] tmp[559913]))
        }
        {
          (559925 'move' tmp[559905](559922 '_paramFoldLogical' tmp[559906] 0))
        }
        unknown tmp[559945] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559947 'move' tmp[559945](421588 call isTrue tmp[559905]))
        (559952 'move' tmp[559932](559949 '_paramFoldLogical' tmp[559933] tmp[559945]))
      }
      (511925 'move' ret[511920](511924 'deref' tmp[559932]))
      (511922 return ret[511920])
    }
    function mul[81005](arg a[81003]:_any[178](?), arg b[81007]:_any[178](?)) : _unknown[51]
    {
      unknown ret[511929] "RVV" "temp"
      unknown tmp[559959] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559960] "maybe param" "temp"
      unknown call_tmp[628201] "expr temp" "maybe param" "maybe type" "temp"
      (628204 'move' call_tmp[628201](81013 call convert a[81003] b[81007]))
      (559965 'move' tmp[559960](559963 call _cond_test call_tmp[628201]))
      if tmp[559960]
      {
        unknown tmp[559967] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628206] "expr temp" "maybe param" "maybe type" "temp"
        (628209 'move' call_tmp[628206](81018 call int(64)[13] 64))
        unknown call_tmp[628211] "expr temp" "maybe param" "maybe type" "temp"
        (628214 'move' call_tmp[628211](81019 call _cast call_tmp[628206] a[81003]))
        unknown call_tmp[628216] "expr temp" "maybe param" "maybe type" "temp"
        (628219 'move' call_tmp[628216](81025 call int(64)[13] 64))
        unknown call_tmp[628221] "expr temp" "maybe param" "maybe type" "temp"
        (628224 'move' call_tmp[628221](81026 call _cast call_tmp[628216] b[81007]))
        (559969 'move' tmp[559967](81028 call * call_tmp[628211] call_tmp[628221]))
        (559974 'move' tmp[559959](559971 '_paramFoldLogical' tmp[559960] tmp[559967]))
      }
      {
        unknown tmp[559976] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559978 'move' tmp[559976](81032 call * a[81003] b[81007]))
        (559983 'move' tmp[559959](559980 '_paramFoldLogical' tmp[559960] tmp[559976]))
      }
      (511934 'move' ret[511929](511933 'deref' tmp[559959]))
      (511931 return ret[511929])
    }
    function add[81046](arg a[81044]:_any[178](?), arg b[81048]:_any[178](?)) : _unknown[51]
    {
      unknown ret[511938] "RVV" "temp"
      unknown tmp[559990] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559991] "maybe param" "temp"
      unknown call_tmp[628226] "expr temp" "maybe param" "maybe type" "temp"
      (628229 'move' call_tmp[628226](81054 call convert a[81044] b[81048]))
      (559996 'move' tmp[559991](559994 call _cond_test call_tmp[628226]))
      if tmp[559991]
      {
        unknown tmp[559998] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628231] "expr temp" "maybe param" "maybe type" "temp"
        (628234 'move' call_tmp[628231](81059 call int(64)[13] 64))
        unknown call_tmp[628236] "expr temp" "maybe param" "maybe type" "temp"
        (628239 'move' call_tmp[628236](81060 call _cast call_tmp[628231] a[81044]))
        unknown call_tmp[628241] "expr temp" "maybe param" "maybe type" "temp"
        (628244 'move' call_tmp[628241](81066 call int(64)[13] 64))
        unknown call_tmp[628246] "expr temp" "maybe param" "maybe type" "temp"
        (628249 'move' call_tmp[628246](81067 call _cast call_tmp[628241] b[81048]))
        (560000 'move' tmp[559998](81069 call + call_tmp[628236] call_tmp[628246]))
        (560005 'move' tmp[559990](560002 '_paramFoldLogical' tmp[559991] tmp[559998]))
      }
      {
        unknown tmp[560007] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (560009 'move' tmp[560007](81073 call + a[81044] b[81048]))
        (560014 'move' tmp[559990](560011 '_paramFoldLogical' tmp[559991] tmp[560007]))
      }
      (511943 'move' ret[511938](511942 'deref' tmp[559990]))
      (511940 return ret[511938])
    }
    unknown call_tmp[628251] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628254 'move' call_tmp[628251](81093 'typeof' start[80939]))
    unknown call_tmp[628256] "expr temp" "maybe param" "maybe type" "temp"
    (628259 'move' call_tmp[628256](81090 call mul stride[80943] count[80945]))
    unknown call_tmp[628261] "expr temp" "maybe param" "maybe type" "temp"
    (628264 'move' call_tmp[628261](81091 call add start[80939] call_tmp[628256]))
    unknown call_tmp[628266] "expr temp" "maybe param" "maybe type" "temp"
    (628269 'move' call_tmp[628266](81094 call _cast call_tmp[628251] call_tmp[628261]))
    unknown call_tmp[628271] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628274 'move' call_tmp[628271](511951 'typeof' start[80939]))
    (511954 'move' ret[511947](511953 'coerce' call_tmp[628266] call_tmp[628271]))
    (511949 return ret[511947])
  }
  { scopeless type
    (80948 'typeof' start[80939])
  }
  function chpl__extendedEuclidHelper[81105](arg u[81103]:_any[178](?), arg v[81107]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511958] "RVV" "temp"
    unknown call_tmp[628276] "maybe param" "maybe type" "temp" "type variable"
    (628279 'move' call_tmp[628276](81110 'typeof' u[81103]))
    unknown zero[81112] "dead at end of block" "insert auto destroy"
    (541489 'init var' zero[81112] 0 call_tmp[628276])
    (81115 'end of statement')
    unknown call_tmp[628281] "maybe param" "maybe type" "temp" "type variable"
    (628284 'move' call_tmp[628281](81118 'typeof' u[81103]))
    unknown one[81120] "dead at end of block" "insert auto destroy"
    (541491 'init var' one[81120] 1 call_tmp[628281])
    (81123 'end of statement')
    unknown call_tmp[628286] "maybe param" "maybe type" "temp"
    (628289 'move' call_tmp[628286](81128 call _build_tuple one[81120] zero[81112] u[81103]))
    unknown U[81130] "dead at end of block" "insert auto destroy"
    (541493 'init var' U[81130] call_tmp[628286])
    (81133 'end of statement')
    unknown call_tmp[628291] "maybe param" "maybe type" "temp"
    (628294 'move' call_tmp[628291](81138 call _build_tuple zero[81112] one[81120] v[81107]))
    unknown V[81140] "dead at end of block" "insert auto destroy"
    (541495 'init var' V[81140] call_tmp[628291])
    (81143 'end of statement' one[81120] zero[81112] zero[81112] one[81120])
    {
      unknown tmp[81192] "temp"
      unknown call_tmp[628296] "expr temp" "maybe param" "maybe type" "temp"
      (628299 'move' call_tmp[628296](81217 call V[81140] 2))
      unknown call_tmp[628301] "expr temp" "maybe param" "maybe type" "temp"
      (628304 'move' call_tmp[628301](81215 call != call_tmp[628296] 0))
      (81220 'move' tmp[81192](81213 call _cond_test call_tmp[628301]))
      WhileDo[81197]
      {
        {
          unknown oldU[81152] "dead at end of block" "insert auto destroy"
          (541497 'init var' oldU[81152] U[81130])
          (81155 'end of statement')
          unknown call_tmp[628306] "expr temp" "maybe param" "maybe type" "temp"
          (628309 'move' call_tmp[628306](81160 call U[81130] 2))
          unknown call_tmp[628311] "expr temp" "maybe param" "maybe type" "temp"
          (628314 'move' call_tmp[628311](81164 call V[81140] 2))
          unknown call_tmp[628316] "maybe param" "maybe type" "temp"
          (628319 'move' call_tmp[628316](81165 call / call_tmp[628306] call_tmp[628311]))
          unknown q[81167] "dead at end of block" "insert auto destroy"
          (541499 'init var' q[81167] call_tmp[628316])
          (81170 'end of statement' U[81130] U[81130] V[81140])
          (81173 call = U[81130] V[81140])
          (476678 'end of statement' U[81130] V[81140])
          unknown call_tmp[628321] "expr temp" "maybe param" "maybe type" "temp"
          (628324 'move' call_tmp[628321](81183 call _build_tuple q[81167] q[81167] q[81167]))
          unknown call_tmp[628326] "expr temp" "maybe param" "maybe type" "temp"
          (628329 'move' call_tmp[628326](81185 call * V[81140] call_tmp[628321]))
          unknown call_tmp[628331] "expr temp" "maybe param" "maybe type" "temp"
          (628334 'move' call_tmp[628331](81187 call - oldU[81152] call_tmp[628326]))
          (81189 call = V[81140] call_tmp[628331])
          (476681 'end of statement' V[81140] oldU[81152] V[81140] q[81167] q[81167] q[81167])
        }
        label _continueLabel[81195]
        unknown call_tmp[628336] "expr temp" "maybe param" "maybe type" "temp"
        (628339 'move' call_tmp[628336](81205 call V[81140] 2))
        unknown call_tmp[628341] "expr temp" "maybe param" "maybe type" "temp"
        (628344 'move' call_tmp[628341](81203 call != call_tmp[628336] 0))
        (81208 'move' tmp[81192](81201 call _cond_test call_tmp[628341]))
        tmp[81192]
      }
      label _breakLabel[81196]
    }
    unknown call_tmp[628346] "expr temp" "maybe param" "maybe type" "temp"
    (628349 'move' call_tmp[628346](81226 call U[81130] 2))
    unknown call_tmp[628351] "expr temp" "maybe param" "maybe type" "temp"
    (628354 'move' call_tmp[628351](81230 call U[81130] 0))
    unknown call_tmp[628356] "expr temp" "maybe param" "maybe type" "temp"
    (628359 'move' call_tmp[628356](81232 call _build_tuple call_tmp[628346] call_tmp[628351]))
    (511963 'move' ret[511958](511962 'deref' call_tmp[628356]))
    gotoReturn _end_chpl__extendedEuclidHelper[511956] _end_chpl__extendedEuclidHelper[511956]
    (476688 'end of statement' U[81130] U[81130])
    label _end_chpl__extendedEuclidHelper[511956]
    (511960 return ret[511958])
  }
  function chpl__extendedEuclid[81247](arg u[81244] :
  (81243 call int(64)[13] 32), arg v[81253] :
  (81252 call int(64)[13] 32)) : _unknown[51] "inline"
  {
    unknown ret[511969] "RVV" "temp"
    unknown call_tmp[628361] "expr temp" "maybe param" "maybe type" "temp"
    (628364 'move' call_tmp[628361](81260 call chpl__extendedEuclidHelper u[81244] v[81253]))
    (511974 'move' ret[511969](511973 'deref' call_tmp[628361]))
    (511971 return ret[511969])
  }
  function chpl__extendedEuclid[81275](arg u[81272] :
  (81271 call int(64)[13] 64), arg v[81281] :
  (81280 call int(64)[13] 64)) : _unknown[51] "inline"
  {
    unknown ret[511978] "RVV" "temp"
    unknown call_tmp[628366] "expr temp" "maybe param" "maybe type" "temp"
    (628369 'move' call_tmp[628366](81288 call chpl__extendedEuclidHelper u[81272] v[81281]))
    (511983 'move' ret[511978](511982 'deref' call_tmp[628366]))
    (511980 return ret[511978])
  }
  function chpl__rangeIdxTypeError[81298](arg idxType[81296]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[628371] "expr temp" "maybe param" "maybe type" "temp"
    (628374 'move' call_tmp[628371](81321 call _cast string[26] idxType[81296]))
    (81340 call compilerError "ranges don't support '" call_tmp[628371] "' as their idxType")
    (511985 return _void[55])
  }
  function chpl__rangeStrideType[81349](arg idxType[81347]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[511989] "RVV" "temp" "type variable"
    unknown call_tmp[628376] "expr temp" "maybe param" "maybe type" "temp"
    (628379 'move' call_tmp[628376](81354 call isIntegralType idxType[81347]))
    unknown call_tmp[628381] "expr temp" "maybe param" "maybe type" "temp"
    (628384 'move' call_tmp[628381](81386 call _cond_test call_tmp[628376]))
    if call_tmp[628381]
    {
      unknown call_tmp[628386] "expr temp" "maybe param" "maybe type" "temp"
      (628389 'move' call_tmp[628386](81358 call chpl__signedType idxType[81347]))
      (511994 'move' ret[511989](511993 'deref' call_tmp[628386]))
      gotoReturn _end_chpl__rangeStrideType[511987] _end_chpl__rangeStrideType[511987]
    }
    {
      unknown tmp[421646] "maybe param" "temp"
      (421657 'move' tmp[421646](81365 call isEnumType idxType[81347]))
      unknown call_tmp[628391] "expr temp" "maybe param" "maybe type" "temp"
      (628394 'move' call_tmp[628391](421659 call _cond_invalid tmp[421646]))
      if call_tmp[628391]
      {
        (421662 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560021] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560022] "maybe param" "temp"
      unknown call_tmp[628396] "expr temp" "maybe param" "maybe type" "temp"
      (628399 'move' call_tmp[628396](421647 call isTrue tmp[421646]))
      (560027 'move' tmp[560022](560025 call _cond_test call_tmp[628396]))
      if tmp[560022]
      {
        (560032 'move' tmp[560021](560029 '_paramFoldLogical' tmp[560022] 1))
      }
      {
        unknown tmp[560034] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628401] "expr temp" "maybe param" "maybe type" "temp"
        (628404 'move' call_tmp[628401](81369 call isBoolType idxType[81347]))
        (560036 'move' tmp[560034](421651 call isTrue call_tmp[628401]))
        (560041 'move' tmp[560021](560038 '_paramFoldLogical' tmp[560022] tmp[560034]))
      }
      unknown call_tmp[628406] "expr temp" "maybe param" "maybe type" "temp"
      (628409 'move' call_tmp[628406](81382 call _cond_test tmp[560021]))
      if call_tmp[628406]
      {
        (511999 'move' ret[511989](511998 'deref' int(64)[13]))
        gotoReturn _end_chpl__rangeStrideType[511987] _end_chpl__rangeStrideType[511987]
      }
      {
        (81379 call chpl__rangeIdxTypeError idxType[81347])
      }
    }
    label _end_chpl__rangeStrideType[511987]
    (511991 return ret[511989])
  }
  function chpl__rangeUnsignedType[81398](arg idxType[81396]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[512005] "RVV" "temp" "type variable"
    unknown call_tmp[628411] "expr temp" "maybe param" "maybe type" "temp"
    (628414 'move' call_tmp[628411](81403 call isIntegralType idxType[81396]))
    unknown call_tmp[628416] "expr temp" "maybe param" "maybe type" "temp"
    (628419 'move' call_tmp[628416](81435 call _cond_test call_tmp[628411]))
    if call_tmp[628416]
    {
      unknown call_tmp[628421] "expr temp" "maybe param" "maybe type" "temp"
      (628424 'move' call_tmp[628421](81407 call chpl__unsignedType idxType[81396]))
      (512010 'move' ret[512005](512009 'deref' call_tmp[628421]))
      gotoReturn _end_chpl__rangeUnsignedType[512003] _end_chpl__rangeUnsignedType[512003]
    }
    {
      unknown tmp[421667] "maybe param" "temp"
      (421678 'move' tmp[421667](81414 call isEnumType idxType[81396]))
      unknown call_tmp[628426] "expr temp" "maybe param" "maybe type" "temp"
      (628429 'move' call_tmp[628426](421680 call _cond_invalid tmp[421667]))
      if call_tmp[628426]
      {
        (421683 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[560048] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[560049] "maybe param" "temp"
      unknown call_tmp[628431] "expr temp" "maybe param" "maybe type" "temp"
      (628434 'move' call_tmp[628431](421668 call isTrue tmp[421667]))
      (560054 'move' tmp[560049](560052 call _cond_test call_tmp[628431]))
      if tmp[560049]
      {
        (560059 'move' tmp[560048](560056 '_paramFoldLogical' tmp[560049] 1))
      }
      {
        unknown tmp[560061] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628436] "expr temp" "maybe param" "maybe type" "temp"
        (628439 'move' call_tmp[628436](81418 call isBoolType idxType[81396]))
        (560063 'move' tmp[560061](421672 call isTrue call_tmp[628436]))
        (560068 'move' tmp[560048](560065 '_paramFoldLogical' tmp[560049] tmp[560061]))
      }
      unknown call_tmp[628441] "expr temp" "maybe param" "maybe type" "temp"
      (628444 'move' call_tmp[628441](81431 call _cond_test tmp[560048]))
      if call_tmp[628441]
      {
        (512015 'move' ret[512005](512014 'deref' uint(64)[115]))
        gotoReturn _end_chpl__rangeUnsignedType[512003] _end_chpl__rangeUnsignedType[512003]
      }
      {
        (81428 call chpl__rangeIdxTypeError idxType[81396])
      }
    }
    label _end_chpl__rangeUnsignedType[512003]
    (512007 return ret[512005])
  }
  function chpl__idxTypeToIntIdxType[81447](arg idxType[81445]:_any[178](?)) type : _unknown[51] "no doc"
  {
    unknown ret[512021] "RVV" "temp" "type variable"
    unknown call_tmp[628446] "expr temp" "maybe param" "maybe type" "temp"
    (628449 'move' call_tmp[628446](81452 call isBoolType idxType[81445]))
    unknown call_tmp[628451] "expr temp" "maybe param" "maybe type" "temp"
    (628454 'move' call_tmp[628451](81506 call _cond_test call_tmp[628446]))
    if call_tmp[628451]
    {
      (512026 'move' ret[512021](512025 'deref' int(64)[13]))
      gotoReturn _end_chpl__idxTypeToIntIdxType[512019] _end_chpl__idxTypeToIntIdxType[512019]
    }
    {
      unknown call_tmp[628456] "expr temp" "maybe param" "maybe type" "temp"
      (628459 'move' call_tmp[628456](81460 call isEnumType idxType[81445]))
      unknown call_tmp[628461] "expr temp" "maybe param" "maybe type" "temp"
      (628464 'move' call_tmp[628461](81502 call _cond_test call_tmp[628456]))
      if call_tmp[628461]
      {
        unknown call_tmp[628468] "expr temp" "maybe param" "maybe type" "temp"
        (628471 'move' call_tmp[628468](81462 call size _mt[243] idxType[81445]))
        unknown call_tmp[628473] "expr temp" "maybe param" "maybe type" "temp"
        (628476 'move' call_tmp[628473](81466 call < call_tmp[628468] 2))
        unknown call_tmp[628478] "expr temp" "maybe param" "maybe type" "temp"
        (628481 'move' call_tmp[628478](81489 call _cond_test call_tmp[628473]))
        if call_tmp[628478]
        {
          (81487 call compilerError "ranges are not currently supported for enums with fewer than two values")
        }
        (512031 'move' ret[512021](512030 'deref' int(64)[13]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[512019] _end_chpl__idxTypeToIntIdxType[512019]
      }
      {
        (512036 'move' ret[512021](512035 'deref' idxType[81445]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[512019] _end_chpl__idxTypeToIntIdxType[512019]
      }
    }
    label _end_chpl__idxTypeToIntIdxType[512019]
    (512023 return ret[512021])
  }
  function range[64319](?).chpl_intToIdx[81519](arg _mt[81524]:_MT[238], arg this[81521]:range[64319](?) :
  range[64319](?), arg i[81517]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[512042] "RVV" "temp"
    unknown call_tmp[628485] "expr temp" "maybe param" "maybe type" "temp"
    (628488 'move' call_tmp[628485](81528 call idxType _mt[243] this[81521]))
    unknown call_tmp[628490] "expr temp" "maybe param" "maybe type" "temp"
    (628493 'move' call_tmp[628490](81533 call chpl__intToIdx call_tmp[628485] i[81517]))
    (512047 'move' ret[512042](512046 'deref' call_tmp[628490]))
    (512044 return ret[512042])
  }
  function chpl__intToIdx[81545](arg idxType[81542]:integral[199](?), arg i[81548]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512051] "RVV" "temp"
    unknown call_tmp[628495] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628498 'move' call_tmp[628495](81552 'typeof' i[81548]))
    unknown call_tmp[628500] "expr temp" "maybe param" "maybe type" "temp"
    (628503 'move' call_tmp[628500](81554 call == call_tmp[628495] idxType[81542]))
    unknown call_tmp[628505] "expr temp" "maybe param" "maybe type" "temp"
    (628508 'move' call_tmp[628505](81565 call _cond_test call_tmp[628500]))
    if call_tmp[628505]
    {
      (512056 'move' ret[512051](512055 'deref' i[81548]))
      gotoReturn _end_chpl__intToIdx[512049] _end_chpl__intToIdx[512049]
    }
    {
      unknown call_tmp[628510] "expr temp" "maybe param" "maybe type" "temp"
      (628513 'move' call_tmp[628510](81561 call _cast idxType[81542] i[81548]))
      (512061 'move' ret[512051](512060 'deref' call_tmp[628510]))
      gotoReturn _end_chpl__intToIdx[512049] _end_chpl__intToIdx[512049]
    }
    label _end_chpl__intToIdx[512049]
    (512053 return ret[512051])
  }
  function chpl__intToIdx[81580](arg idxType[81577]:integral[199](?), param arg i[81583]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512067] "RVV" "temp"
    unknown call_tmp[628515] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628518 'move' call_tmp[628515](81587 'typeof' i[81583]))
    unknown call_tmp[628520] "expr temp" "maybe param" "maybe type" "temp"
    (628523 'move' call_tmp[628520](81589 call == call_tmp[628515] idxType[81577]))
    unknown call_tmp[628525] "expr temp" "maybe param" "maybe type" "temp"
    (628528 'move' call_tmp[628525](81600 call _cond_test call_tmp[628520]))
    if call_tmp[628525]
    {
      (512072 'move' ret[512067](512071 'deref' i[81583]))
      gotoReturn _end_chpl__intToIdx[512065] _end_chpl__intToIdx[512065]
    }
    {
      unknown call_tmp[628530] "expr temp" "maybe param" "maybe type" "temp"
      (628533 'move' call_tmp[628530](81596 call _cast idxType[81577] i[81583]))
      (512077 'move' ret[512067](512076 'deref' call_tmp[628530]))
      gotoReturn _end_chpl__intToIdx[512065] _end_chpl__intToIdx[512065]
    }
    label _end_chpl__intToIdx[512065]
    (512069 return ret[512067])
  }
  function chpl__intToIdx[81615](arg idxType[81612]:enum[187](?), arg i[81618]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512083] "RVV" "temp"
    unknown call_tmp[628535] "expr temp" "maybe param" "maybe type" "temp"
    (628538 'move' call_tmp[628535](81625 call chpl__orderToEnum i[81618] idxType[81612]))
    (512088 'move' ret[512083](512087 'deref' call_tmp[628535]))
    (512085 return ret[512083])
  }
  function chpl__intToIdx[81635](arg idxType[81633]:_any[178](?), arg i[81638]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512092] "RVV" "temp"
    unknown call_tmp[628540] "expr temp" "maybe param" "maybe type" "temp"
    (628543 'move' call_tmp[628540](81647 call _cast bool[10] i[81638]))
    (512097 'move' ret[512092](512096 'deref' call_tmp[628540]))
    (512094 return ret[512092])
  }
  where {
    (81644 call isBoolType idxType[81633])
  }
  function chpl__intToIdx[81659](arg idxType[81657]:_any[178](?), param arg i[81662]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[512101] "RVV" "param" "temp"
    unknown call_tmp[628545] "expr temp" "maybe param" "maybe type" "temp"
    (628548 'move' call_tmp[628545](81671 call _cast bool[10] i[81662]))
    (512106 'move' ret[512101](512105 'deref' call_tmp[628545]))
    (512103 return ret[512101])
  }
  where {
    (81668 call isBoolType idxType[81657])
  }
  function chpl__intToIdx[81683](arg idxType[81681]:_any[178](?), arg i[81686]:nothing[7]) : _unknown[51] "inline"
  {
    unknown ret[512110] "RVV" "temp"
    (512115 'move' ret[512110](512114 'deref' none[57]))
    (512112 return ret[512110])
  }
  function chpl__idxToInt[81701](arg i[81698]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[512119] "RVV" "temp"
    (512124 'move' ret[512119](512123 'deref' i[81698]))
    (512121 return ret[512119])
  }
  function chpl__idxToInt[81715](param arg i[81712]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[512128] "RVV" "param" "temp"
    (512133 'move' ret[512128](512132 'deref' i[81712]))
    (512130 return ret[512128])
  }
  function chpl__idxToInt[81729](arg i[81726]:enum[187](?)) : _unknown[51] "inline"
  {
    unknown ret[512137] "RVV" "temp"
    unknown call_tmp[628550] "expr temp" "maybe param" "maybe type" "temp"
    (628553 'move' call_tmp[628550](81734 call chpl__enumToOrder i[81726]))
    (512142 'move' ret[512137](512141 'deref' call_tmp[628550]))
    (512139 return ret[512137])
  }
  function chpl__idxToInt[81746](arg i[81743]:bool[10]) : _unknown[51] "inline"
  {
    unknown ret[512146] "RVV" "temp"
    unknown call_tmp[628555] "expr temp" "maybe param" "maybe type" "temp"
    (628558 'move' call_tmp[628555](81750 call _cast int(64)[13] i[81743]))
    (512151 'move' ret[512146](512150 'deref' call_tmp[628555]))
    (512148 return ret[512146])
  }
  function chpl__idxToInt[81763](param arg i[81760]:bool[10]) param : _unknown[51] "inline"
  {
    unknown ret[512155] "RVV" "param" "temp"
    unknown call_tmp[628560] "expr temp" "maybe param" "maybe type" "temp"
    (628563 'move' call_tmp[628560](81767 call _cast int(64)[13] i[81760]))
    (512160 'move' ret[512155](512159 'deref' call_tmp[628560]))
    (512157 return ret[512155])
  }
  (355089 'used modules list'(64187 'use' ChapelBase[307])(64189 'use' SysBasic[223535])(64190 'use' HaltWrappers[210016])(64194 'use' Math[215877])(64196 'use' DSIUtil[230907]))
}