AST dump for ChapelRange after pass buildDefaultFunctions.
Module use list: ChapelBase SysBasic HaltWrappers Math DSIUtil 

{
  function chpl__init_ChapelRange[415862]() : void[4] "insert line file info" "module init"
  {
    (540894 'init var' debugChapelRange[64195] 0)
    (64198 'end of statement')
    (540896 'init var' useOptimizedRangeIterators[64200] 1)
    (64203 'end of statement')
    {
    }
    (512030 return _void[55])
  }
  unknown debugChapelRange[64195] "config" "no doc" "param"
  unknown useOptimizedRangeIterators[64200] "config" "no doc" "param"
  type BoundedRangeType[64213] def bounded[64205]:BoundedRangeType[64213] def boundedLow[64207]:BoundedRangeType[64213] def boundedHigh[64209]:BoundedRangeType[64213] def boundedNone[64211]:BoundedRangeType[64213]
  function range[64316](?).strType[64294](arg _mt[64320]:_MT[238], arg this[64318]:range[64316](?)) type : _unknown[51] "method" "primary method" "no parens"
  {
    unknown ret[508887] "RVV" "temp" "type variable"
    unknown call_tmp[616147] "expr temp" "maybe param" "maybe type" "temp"
    (616150 'move' call_tmp[616147](373599 call idxType _mt[243] this[64318]))
    unknown call_tmp[616152] "expr temp" "maybe param" "maybe type" "temp"
    (616155 'move' call_tmp[616152](64299 call chpl__rangeStrideType call_tmp[616147]))
    (508892 'move' ret[508887](508891 'deref' call_tmp[616152]))
    (508889 return ret[508887])
  }
  function range[64316](?).chpl__promotionType[64307](arg _mt[64324]:_MT[238], arg this[64322]:range[64316](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[508896] "RVV" "temp" "type variable"
    unknown call_tmp[616159] "expr temp" "maybe param" "maybe type" "temp"
    (616162 'move' call_tmp[616159](373604 call idxType _mt[243] this[64322]))
    (508901 'move' ret[508896](508900 'deref' call_tmp[616159]))
    (508898 return ret[508896])
  }
  function range[64316](?).idxType[767931](arg _mt[767933]:_MT[238], arg this[767935]:range[64316](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[767954] "RVV" "temp" "type variable"
    unknown call_tmp[767968] "expr temp" "maybe param" "maybe type" "temp"
    (767971 'move' call_tmp[767968](767940 'is bound' this[767935] c"idxType"))
    if call_tmp[767968]
    {
      unknown call_tmp[767973] "expr temp" "maybe param" "maybe type" "temp"
      (767976 'move' call_tmp[767973](767939 '.v' this[767935] c"idxType"))
      (767959 'move' ret[767954](767958 'deref' call_tmp[767973]))
      gotoReturn _end_idxType[767952] _end_idxType[767952]
    }
    {
      (767964 'move' ret[767954](767963 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[767952] _end_idxType[767952]
    }
    label _end_idxType[767952]
    (767956 return ret[767954])
  }
  function range[64316](?).idxType[767978](arg _mt[767980]:_MT[238], arg this[767982]:range[64316](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768001] "RVV" "temp" "type variable"
    unknown call_tmp[768015] "expr temp" "maybe param" "maybe type" "temp"
    (768018 'move' call_tmp[768015](767987 'is bound' this[767982] c"idxType"))
    if call_tmp[768015]
    {
      unknown call_tmp[768020] "expr temp" "maybe param" "maybe type" "temp"
      (768023 'move' call_tmp[768020](767986 '.v' this[767982] c"idxType"))
      (768006 'move' ret[768001](768005 'deref' call_tmp[768020]))
      gotoReturn _end_idxType[767999] _end_idxType[767999]
    }
    {
      (768011 'move' ret[768001](768010 'deref' _uninstantiated[258]))
      gotoReturn _end_idxType[767999] _end_idxType[767999]
    }
    label _end_idxType[767999]
    (768003 return ret[768001])
  }
  function range[64316](?).boundedType[768025](arg _mt[768027]:_MT[238], arg this[768029]:range[64316](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768048] "RVV" "param" "temp"
    unknown call_tmp[768062] "expr temp" "maybe param" "maybe type" "temp"
    (768065 'move' call_tmp[768062](768034 'is bound' this[768029] c"boundedType"))
    if call_tmp[768062]
    {
      unknown call_tmp[768067] "expr temp" "maybe param" "maybe type" "temp"
      (768070 'move' call_tmp[768067](768033 '.' this[768029] c"boundedType"))
      (768053 'move' ret[768048](768052 'deref' call_tmp[768067]))
      gotoReturn _end_boundedType[768046] _end_boundedType[768046]
    }
    {
      (768058 'move' ret[768048](768057 'deref' ?[260]))
      gotoReturn _end_boundedType[768046] _end_boundedType[768046]
    }
    label _end_boundedType[768046]
    (768050 return ret[768048])
  }
  function range[64316](?).boundedType[768072](arg _mt[768074]:_MT[238], arg this[768076]:range[64316](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768095] "RVV" "param" "temp"
    unknown call_tmp[768109] "expr temp" "maybe param" "maybe type" "temp"
    (768112 'move' call_tmp[768109](768081 'is bound' this[768076] c"boundedType"))
    if call_tmp[768109]
    {
      unknown call_tmp[768114] "expr temp" "maybe param" "maybe type" "temp"
      (768117 'move' call_tmp[768114](768080 '.' this[768076] c"boundedType"))
      (768100 'move' ret[768095](768099 'deref' call_tmp[768114]))
      gotoReturn _end_boundedType[768093] _end_boundedType[768093]
    }
    {
      (768105 'move' ret[768095](768104 'deref' ?[260]))
      gotoReturn _end_boundedType[768093] _end_boundedType[768093]
    }
    label _end_boundedType[768093]
    (768097 return ret[768095])
  }
  function range[64316](?).stridable[768119](arg _mt[768121]:_MT[238], arg this[768123]:range[64316](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768142] "RVV" "param" "temp"
    unknown call_tmp[768156] "expr temp" "maybe param" "maybe type" "temp"
    (768159 'move' call_tmp[768156](768128 'is bound' this[768123] c"stridable"))
    if call_tmp[768156]
    {
      unknown call_tmp[768161] "expr temp" "maybe param" "maybe type" "temp"
      (768164 'move' call_tmp[768161](768127 '.' this[768123] c"stridable"))
      (768147 'move' ret[768142](768146 'deref' call_tmp[768161]))
      gotoReturn _end_stridable[768140] _end_stridable[768140]
    }
    {
      (768152 'move' ret[768142](768151 'deref' ?[260]))
      gotoReturn _end_stridable[768140] _end_stridable[768140]
    }
    label _end_stridable[768140]
    (768144 return ret[768142])
  }
  function range[64316](?).stridable[768166](arg _mt[768168]:_MT[238], arg this[768170]:range[64316](?)) param : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[768189] "RVV" "param" "temp"
    unknown call_tmp[768203] "expr temp" "maybe param" "maybe type" "temp"
    (768206 'move' call_tmp[768203](768175 'is bound' this[768170] c"stridable"))
    if call_tmp[768203]
    {
      unknown call_tmp[768208] "expr temp" "maybe param" "maybe type" "temp"
      (768211 'move' call_tmp[768208](768174 '.' this[768170] c"stridable"))
      (768194 'move' ret[768189](768193 'deref' call_tmp[768208]))
      gotoReturn _end_stridable[768187] _end_stridable[768187]
    }
    {
      (768199 'move' ret[768189](768198 'deref' ?[260]))
      gotoReturn _end_stridable[768187] _end_stridable[768187]
    }
    label _end_stridable[768187]
    (768191 return ret[768189])
  }
  function range[64316](?)._low[768213](arg _mt[768215]:_MT[238], ref arg this[768217]:range[64316](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768227] "RVV" "temp"
    unknown call_tmp[768234] "expr temp" "maybe param" "maybe type" "temp"
    (768237 'move' call_tmp[768234](768221 '.' this[768217] c"_low"))
    (768232 'move' ret[768227](768231 'addr of' call_tmp[768234]))
    (768229 return ret[768227])
  }
  function range[64316](?)._high[768239](arg _mt[768241]:_MT[238], ref arg this[768243]:range[64316](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768253] "RVV" "temp"
    unknown call_tmp[768260] "expr temp" "maybe param" "maybe type" "temp"
    (768263 'move' call_tmp[768260](768247 '.' this[768243] c"_high"))
    (768258 'move' ret[768253](768257 'addr of' call_tmp[768260]))
    (768255 return ret[768253])
  }
  function range[64316](?)._stride[768265](arg _mt[768267]:_MT[238], ref arg this[768269]:range[64316](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768279] "RVV" "temp"
    unknown call_tmp[768286] "expr temp" "maybe param" "maybe type" "temp"
    (768289 'move' call_tmp[768286](768273 '.' this[768269] c"_stride"))
    (768284 'move' ret[768279](768283 'addr of' call_tmp[768286]))
    (768281 return ret[768279])
  }
  function range[64316](?)._alignment[768291](arg _mt[768293]:_MT[238], ref arg this[768295]:range[64316](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768305] "RVV" "temp"
    unknown call_tmp[768312] "expr temp" "maybe param" "maybe type" "temp"
    (768315 'move' call_tmp[768312](768299 '.' this[768295] c"_alignment"))
    (768310 'move' ret[768305](768309 'addr of' call_tmp[768312]))
    (768307 return ret[768305])
  }
  function range[64316](?)._aligned[768317](arg _mt[768319]:_MT[238], ref arg this[768321]:range[64316](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[768331] "RVV" "temp"
    unknown call_tmp[768338] "expr temp" "maybe param" "maybe type" "temp"
    (768341 'move' call_tmp[768338](768325 '.' this[768321] c"_aligned"))
    (768336 'move' ret[768331](768335 'addr of' call_tmp[768338]))
    (768333 return ret[768331])
  }
  function range[64316](?).deinit[768343](arg _mt[768345]:_MT[238], arg this[768347]:range[64316](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (768355 return _void[55])
  }
  function chpl_fields_are_comparable[768369](arg _arg1[768371]:range[64316](?), arg _arg2[768372]:range[64316](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[768451]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[768458] "expr temp" "maybe param" "maybe type" "temp"
    (768461 'move' call_tmp[768458](768375 call boundedType _mt[243] _arg1[768371]))
    unknown call_tmp[768463] "expr temp" "maybe param" "maybe type" "temp"
    (768466 'move' call_tmp[768463](768379 call boundedType _mt[243] _arg2[768372]))
    unknown call_tmp[768468] "expr temp" "maybe param" "maybe type" "temp"
    (768471 'move' call_tmp[768468](768383 'call resolves' c"<" call_tmp[768458] call_tmp[768463]))
    unknown call_tmp[768473] "expr temp" "maybe param" "maybe type" "temp"
    (768476 'move' call_tmp[768473](768385 call stridable _mt[243] _arg1[768371]))
    unknown call_tmp[768478] "expr temp" "maybe param" "maybe type" "temp"
    (768481 'move' call_tmp[768478](768389 call stridable _mt[243] _arg2[768372]))
    unknown call_tmp[768483] "expr temp" "maybe param" "maybe type" "temp"
    (768486 'move' call_tmp[768483](768393 'call resolves' c"<" call_tmp[768473] call_tmp[768478]))
    unknown call_tmp[768488] "expr temp" "maybe param" "maybe type" "temp"
    (768491 'move' call_tmp[768488](768395 call _low _mt[243] _arg1[768371]))
    unknown call_tmp[768493] "expr temp" "maybe param" "maybe type" "temp"
    (768496 'move' call_tmp[768493](768399 call _low _mt[243] _arg2[768372]))
    unknown call_tmp[768498] "expr temp" "maybe param" "maybe type" "temp"
    (768501 'move' call_tmp[768498](768403 'call resolves' c"<" call_tmp[768488] call_tmp[768493]))
    unknown call_tmp[768503] "expr temp" "maybe param" "maybe type" "temp"
    (768506 'move' call_tmp[768503](768405 call _high _mt[243] _arg1[768371]))
    unknown call_tmp[768508] "expr temp" "maybe param" "maybe type" "temp"
    (768511 'move' call_tmp[768508](768409 call _high _mt[243] _arg2[768372]))
    unknown call_tmp[768513] "expr temp" "maybe param" "maybe type" "temp"
    (768516 'move' call_tmp[768513](768413 'call resolves' c"<" call_tmp[768503] call_tmp[768508]))
    unknown call_tmp[768518] "expr temp" "maybe param" "maybe type" "temp"
    (768521 'move' call_tmp[768518](768415 call _stride _mt[243] _arg1[768371]))
    unknown call_tmp[768523] "expr temp" "maybe param" "maybe type" "temp"
    (768526 'move' call_tmp[768523](768419 call _stride _mt[243] _arg2[768372]))
    unknown call_tmp[768528] "expr temp" "maybe param" "maybe type" "temp"
    (768531 'move' call_tmp[768528](768423 'call resolves' c"<" call_tmp[768518] call_tmp[768523]))
    unknown call_tmp[768533] "expr temp" "maybe param" "maybe type" "temp"
    (768536 'move' call_tmp[768533](768425 call _alignment _mt[243] _arg1[768371]))
    unknown call_tmp[768538] "expr temp" "maybe param" "maybe type" "temp"
    (768541 'move' call_tmp[768538](768429 call _alignment _mt[243] _arg2[768372]))
    unknown call_tmp[768543] "expr temp" "maybe param" "maybe type" "temp"
    (768546 'move' call_tmp[768543](768433 'call resolves' c"<" call_tmp[768533] call_tmp[768538]))
    unknown call_tmp[768548] "expr temp" "maybe param" "maybe type" "temp"
    (768551 'move' call_tmp[768548](768435 call _aligned _mt[243] _arg1[768371]))
    unknown call_tmp[768553] "expr temp" "maybe param" "maybe type" "temp"
    (768556 'move' call_tmp[768553](768439 call _aligned _mt[243] _arg2[768372]))
    unknown call_tmp[768558] "expr temp" "maybe param" "maybe type" "temp"
    (768561 'move' call_tmp[768558](768443 'call resolves' c"<" call_tmp[768548] call_tmp[768553]))
    unknown call_tmp[768563] "expr temp" "maybe param" "maybe type" "temp"
    (768566 'move' call_tmp[768563](768445 '&' call_tmp[768468] call_tmp[768483] call_tmp[768498] call_tmp[768513] call_tmp[768528] call_tmp[768543] call_tmp[768558]))
    (768456 'move' ret[768451](768455 'deref' call_tmp[768563]))
    (768453 return ret[768451])
  }
  function <[768357](arg _arg1[768359]:range[64316](?), arg _arg2[768360]:range[64316](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[768790]:bool[10] "RVV" "temp"
    unknown call_tmp[768867] "expr temp" "maybe param" "maybe type" "temp"
    (768870 'move' call_tmp[768867](768574 call boundedType _mt[243] _arg1[768359]))
    unknown call_tmp[768872] "expr temp" "maybe param" "maybe type" "temp"
    (768875 'move' call_tmp[768872](768578 call boundedType _mt[243] _arg2[768360]))
    unknown call_tmp[768877] "expr temp" "maybe param" "maybe type" "temp"
    (768880 'move' call_tmp[768877](768582 call < call_tmp[768867] call_tmp[768872]))
    if call_tmp[768877]
    {
      (768795 'move' ret[768790](768794 'deref' 1))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[768882] "expr temp" "maybe param" "maybe type" "temp"
    (768885 'move' call_tmp[768882](768588 call boundedType _mt[243] _arg1[768359]))
    unknown call_tmp[768887] "expr temp" "maybe param" "maybe type" "temp"
    (768890 'move' call_tmp[768887](768592 call boundedType _mt[243] _arg2[768360]))
    unknown call_tmp[768892] "expr temp" "maybe param" "maybe type" "temp"
    (768895 'move' call_tmp[768892](768596 call > call_tmp[768882] call_tmp[768887]))
    if call_tmp[768892]
    {
      (768800 'move' ret[768790](768799 'deref' 0))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[768897] "expr temp" "maybe param" "maybe type" "temp"
    (768900 'move' call_tmp[768897](768602 call stridable _mt[243] _arg1[768359]))
    unknown call_tmp[768902] "expr temp" "maybe param" "maybe type" "temp"
    (768905 'move' call_tmp[768902](768606 call stridable _mt[243] _arg2[768360]))
    unknown call_tmp[768907] "expr temp" "maybe param" "maybe type" "temp"
    (768910 'move' call_tmp[768907](768610 call < call_tmp[768897] call_tmp[768902]))
    if call_tmp[768907]
    {
      (768805 'move' ret[768790](768804 'deref' 1))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[768912] "expr temp" "maybe param" "maybe type" "temp"
    (768915 'move' call_tmp[768912](768616 call stridable _mt[243] _arg1[768359]))
    unknown call_tmp[768917] "expr temp" "maybe param" "maybe type" "temp"
    (768920 'move' call_tmp[768917](768620 call stridable _mt[243] _arg2[768360]))
    unknown call_tmp[768922] "expr temp" "maybe param" "maybe type" "temp"
    (768925 'move' call_tmp[768922](768624 call > call_tmp[768912] call_tmp[768917]))
    if call_tmp[768922]
    {
      (768810 'move' ret[768790](768809 'deref' 0))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[768927] "expr temp" "maybe param" "maybe type" "temp"
    (768930 'move' call_tmp[768927](768630 call _low _mt[243] _arg1[768359]))
    unknown call_tmp[768932] "expr temp" "maybe param" "maybe type" "temp"
    (768935 'move' call_tmp[768932](768634 call _low _mt[243] _arg2[768360]))
    unknown call_tmp[768937] "expr temp" "maybe param" "maybe type" "temp"
    (768940 'move' call_tmp[768937](768638 call < call_tmp[768927] call_tmp[768932]))
    if call_tmp[768937]
    {
      (768815 'move' ret[768790](768814 'deref' 1))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[768942] "expr temp" "maybe param" "maybe type" "temp"
    (768945 'move' call_tmp[768942](768644 call _low _mt[243] _arg1[768359]))
    unknown call_tmp[768947] "expr temp" "maybe param" "maybe type" "temp"
    (768950 'move' call_tmp[768947](768648 call _low _mt[243] _arg2[768360]))
    unknown call_tmp[768952] "expr temp" "maybe param" "maybe type" "temp"
    (768955 'move' call_tmp[768952](768652 call > call_tmp[768942] call_tmp[768947]))
    if call_tmp[768952]
    {
      (768820 'move' ret[768790](768819 'deref' 0))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[768957] "expr temp" "maybe param" "maybe type" "temp"
    (768960 'move' call_tmp[768957](768658 call _high _mt[243] _arg1[768359]))
    unknown call_tmp[768962] "expr temp" "maybe param" "maybe type" "temp"
    (768965 'move' call_tmp[768962](768662 call _high _mt[243] _arg2[768360]))
    unknown call_tmp[768967] "expr temp" "maybe param" "maybe type" "temp"
    (768970 'move' call_tmp[768967](768666 call < call_tmp[768957] call_tmp[768962]))
    if call_tmp[768967]
    {
      (768825 'move' ret[768790](768824 'deref' 1))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[768972] "expr temp" "maybe param" "maybe type" "temp"
    (768975 'move' call_tmp[768972](768672 call _high _mt[243] _arg1[768359]))
    unknown call_tmp[768977] "expr temp" "maybe param" "maybe type" "temp"
    (768980 'move' call_tmp[768977](768676 call _high _mt[243] _arg2[768360]))
    unknown call_tmp[768982] "expr temp" "maybe param" "maybe type" "temp"
    (768985 'move' call_tmp[768982](768680 call > call_tmp[768972] call_tmp[768977]))
    if call_tmp[768982]
    {
      (768830 'move' ret[768790](768829 'deref' 0))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[768987] "expr temp" "maybe param" "maybe type" "temp"
    (768990 'move' call_tmp[768987](768686 call _stride _mt[243] _arg1[768359]))
    unknown call_tmp[768992] "expr temp" "maybe param" "maybe type" "temp"
    (768995 'move' call_tmp[768992](768690 call _stride _mt[243] _arg2[768360]))
    unknown call_tmp[768997] "expr temp" "maybe param" "maybe type" "temp"
    (769000 'move' call_tmp[768997](768694 call < call_tmp[768987] call_tmp[768992]))
    if call_tmp[768997]
    {
      (768835 'move' ret[768790](768834 'deref' 1))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[769002] "expr temp" "maybe param" "maybe type" "temp"
    (769005 'move' call_tmp[769002](768700 call _stride _mt[243] _arg1[768359]))
    unknown call_tmp[769007] "expr temp" "maybe param" "maybe type" "temp"
    (769010 'move' call_tmp[769007](768704 call _stride _mt[243] _arg2[768360]))
    unknown call_tmp[769012] "expr temp" "maybe param" "maybe type" "temp"
    (769015 'move' call_tmp[769012](768708 call > call_tmp[769002] call_tmp[769007]))
    if call_tmp[769012]
    {
      (768840 'move' ret[768790](768839 'deref' 0))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[769017] "expr temp" "maybe param" "maybe type" "temp"
    (769020 'move' call_tmp[769017](768714 call _alignment _mt[243] _arg1[768359]))
    unknown call_tmp[769022] "expr temp" "maybe param" "maybe type" "temp"
    (769025 'move' call_tmp[769022](768718 call _alignment _mt[243] _arg2[768360]))
    unknown call_tmp[769027] "expr temp" "maybe param" "maybe type" "temp"
    (769030 'move' call_tmp[769027](768722 call < call_tmp[769017] call_tmp[769022]))
    if call_tmp[769027]
    {
      (768845 'move' ret[768790](768844 'deref' 1))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[769032] "expr temp" "maybe param" "maybe type" "temp"
    (769035 'move' call_tmp[769032](768728 call _alignment _mt[243] _arg1[768359]))
    unknown call_tmp[769037] "expr temp" "maybe param" "maybe type" "temp"
    (769040 'move' call_tmp[769037](768732 call _alignment _mt[243] _arg2[768360]))
    unknown call_tmp[769042] "expr temp" "maybe param" "maybe type" "temp"
    (769045 'move' call_tmp[769042](768736 call > call_tmp[769032] call_tmp[769037]))
    if call_tmp[769042]
    {
      (768850 'move' ret[768790](768849 'deref' 0))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[769047] "expr temp" "maybe param" "maybe type" "temp"
    (769050 'move' call_tmp[769047](768742 call _aligned _mt[243] _arg1[768359]))
    unknown call_tmp[769052] "expr temp" "maybe param" "maybe type" "temp"
    (769055 'move' call_tmp[769052](768746 call _aligned _mt[243] _arg2[768360]))
    unknown call_tmp[769057] "expr temp" "maybe param" "maybe type" "temp"
    (769060 'move' call_tmp[769057](768750 call < call_tmp[769047] call_tmp[769052]))
    if call_tmp[769057]
    {
      (768855 'move' ret[768790](768854 'deref' 1))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    unknown call_tmp[769062] "expr temp" "maybe param" "maybe type" "temp"
    (769065 'move' call_tmp[769062](768756 call _aligned _mt[243] _arg1[768359]))
    unknown call_tmp[769067] "expr temp" "maybe param" "maybe type" "temp"
    (769070 'move' call_tmp[769067](768760 call _aligned _mt[243] _arg2[768360]))
    unknown call_tmp[769072] "expr temp" "maybe param" "maybe type" "temp"
    (769075 'move' call_tmp[769072](768764 call > call_tmp[769062] call_tmp[769067]))
    if call_tmp[769072]
    {
      (768860 'move' ret[768790](768859 'deref' 0))
      gotoReturn _end_<[768788] _end_<[768788]
    }
    (768865 'move' ret[768790](768864 'deref' 0))
    label _end_<[768788]
    (768792 return ret[768790])
  }
  where {
    unknown call_tmp[769077] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769080 'move' call_tmp[769077](768363 'typeof' _arg1[768359]))
    unknown call_tmp[769082] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769085 'move' call_tmp[769082](768365 'typeof' _arg2[768360]))
    unknown call_tmp[769087] "expr temp" "maybe param" "maybe type" "temp"
    (769090 'move' call_tmp[769087](768367 call == call_tmp[769077] call_tmp[769082]))
    unknown call_tmp[769092] "expr temp" "maybe param" "maybe type" "temp"
    (769095 'move' call_tmp[769092](768568 call chpl_fields_are_comparable[768369] _arg1[768359] _arg2[768360]))
    (768572 '&' call_tmp[769087] call_tmp[769092])
  }
  function chpl_fields_are_comparable[769109](arg _arg1[769111]:range[64316](?), arg _arg2[769112]:range[64316](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[769191]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[769198] "expr temp" "maybe param" "maybe type" "temp"
    (769201 'move' call_tmp[769198](769115 call boundedType _mt[243] _arg1[769111]))
    unknown call_tmp[769203] "expr temp" "maybe param" "maybe type" "temp"
    (769206 'move' call_tmp[769203](769119 call boundedType _mt[243] _arg2[769112]))
    unknown call_tmp[769208] "expr temp" "maybe param" "maybe type" "temp"
    (769211 'move' call_tmp[769208](769123 'call resolves' c"<=" call_tmp[769198] call_tmp[769203]))
    unknown call_tmp[769213] "expr temp" "maybe param" "maybe type" "temp"
    (769216 'move' call_tmp[769213](769125 call stridable _mt[243] _arg1[769111]))
    unknown call_tmp[769218] "expr temp" "maybe param" "maybe type" "temp"
    (769221 'move' call_tmp[769218](769129 call stridable _mt[243] _arg2[769112]))
    unknown call_tmp[769223] "expr temp" "maybe param" "maybe type" "temp"
    (769226 'move' call_tmp[769223](769133 'call resolves' c"<=" call_tmp[769213] call_tmp[769218]))
    unknown call_tmp[769228] "expr temp" "maybe param" "maybe type" "temp"
    (769231 'move' call_tmp[769228](769135 call _low _mt[243] _arg1[769111]))
    unknown call_tmp[769233] "expr temp" "maybe param" "maybe type" "temp"
    (769236 'move' call_tmp[769233](769139 call _low _mt[243] _arg2[769112]))
    unknown call_tmp[769238] "expr temp" "maybe param" "maybe type" "temp"
    (769241 'move' call_tmp[769238](769143 'call resolves' c"<=" call_tmp[769228] call_tmp[769233]))
    unknown call_tmp[769243] "expr temp" "maybe param" "maybe type" "temp"
    (769246 'move' call_tmp[769243](769145 call _high _mt[243] _arg1[769111]))
    unknown call_tmp[769248] "expr temp" "maybe param" "maybe type" "temp"
    (769251 'move' call_tmp[769248](769149 call _high _mt[243] _arg2[769112]))
    unknown call_tmp[769253] "expr temp" "maybe param" "maybe type" "temp"
    (769256 'move' call_tmp[769253](769153 'call resolves' c"<=" call_tmp[769243] call_tmp[769248]))
    unknown call_tmp[769258] "expr temp" "maybe param" "maybe type" "temp"
    (769261 'move' call_tmp[769258](769155 call _stride _mt[243] _arg1[769111]))
    unknown call_tmp[769263] "expr temp" "maybe param" "maybe type" "temp"
    (769266 'move' call_tmp[769263](769159 call _stride _mt[243] _arg2[769112]))
    unknown call_tmp[769268] "expr temp" "maybe param" "maybe type" "temp"
    (769271 'move' call_tmp[769268](769163 'call resolves' c"<=" call_tmp[769258] call_tmp[769263]))
    unknown call_tmp[769273] "expr temp" "maybe param" "maybe type" "temp"
    (769276 'move' call_tmp[769273](769165 call _alignment _mt[243] _arg1[769111]))
    unknown call_tmp[769278] "expr temp" "maybe param" "maybe type" "temp"
    (769281 'move' call_tmp[769278](769169 call _alignment _mt[243] _arg2[769112]))
    unknown call_tmp[769283] "expr temp" "maybe param" "maybe type" "temp"
    (769286 'move' call_tmp[769283](769173 'call resolves' c"<=" call_tmp[769273] call_tmp[769278]))
    unknown call_tmp[769288] "expr temp" "maybe param" "maybe type" "temp"
    (769291 'move' call_tmp[769288](769175 call _aligned _mt[243] _arg1[769111]))
    unknown call_tmp[769293] "expr temp" "maybe param" "maybe type" "temp"
    (769296 'move' call_tmp[769293](769179 call _aligned _mt[243] _arg2[769112]))
    unknown call_tmp[769298] "expr temp" "maybe param" "maybe type" "temp"
    (769301 'move' call_tmp[769298](769183 'call resolves' c"<=" call_tmp[769288] call_tmp[769293]))
    unknown call_tmp[769303] "expr temp" "maybe param" "maybe type" "temp"
    (769306 'move' call_tmp[769303](769185 '&' call_tmp[769208] call_tmp[769223] call_tmp[769238] call_tmp[769253] call_tmp[769268] call_tmp[769283] call_tmp[769298]))
    (769196 'move' ret[769191](769195 'deref' call_tmp[769303]))
    (769193 return ret[769191])
  }
  function <=[769097](arg _arg1[769099]:range[64316](?), arg _arg2[769100]:range[64316](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[769530]:bool[10] "RVV" "temp"
    unknown call_tmp[769607] "expr temp" "maybe param" "maybe type" "temp"
    (769610 'move' call_tmp[769607](769314 call boundedType _mt[243] _arg1[769099]))
    unknown call_tmp[769612] "expr temp" "maybe param" "maybe type" "temp"
    (769615 'move' call_tmp[769612](769318 call boundedType _mt[243] _arg2[769100]))
    unknown call_tmp[769617] "expr temp" "maybe param" "maybe type" "temp"
    (769620 'move' call_tmp[769617](769322 call < call_tmp[769607] call_tmp[769612]))
    if call_tmp[769617]
    {
      (769535 'move' ret[769530](769534 'deref' 1))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769622] "expr temp" "maybe param" "maybe type" "temp"
    (769625 'move' call_tmp[769622](769328 call boundedType _mt[243] _arg1[769099]))
    unknown call_tmp[769627] "expr temp" "maybe param" "maybe type" "temp"
    (769630 'move' call_tmp[769627](769332 call boundedType _mt[243] _arg2[769100]))
    unknown call_tmp[769632] "expr temp" "maybe param" "maybe type" "temp"
    (769635 'move' call_tmp[769632](769336 call > call_tmp[769622] call_tmp[769627]))
    if call_tmp[769632]
    {
      (769540 'move' ret[769530](769539 'deref' 0))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769637] "expr temp" "maybe param" "maybe type" "temp"
    (769640 'move' call_tmp[769637](769342 call stridable _mt[243] _arg1[769099]))
    unknown call_tmp[769642] "expr temp" "maybe param" "maybe type" "temp"
    (769645 'move' call_tmp[769642](769346 call stridable _mt[243] _arg2[769100]))
    unknown call_tmp[769647] "expr temp" "maybe param" "maybe type" "temp"
    (769650 'move' call_tmp[769647](769350 call < call_tmp[769637] call_tmp[769642]))
    if call_tmp[769647]
    {
      (769545 'move' ret[769530](769544 'deref' 1))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769652] "expr temp" "maybe param" "maybe type" "temp"
    (769655 'move' call_tmp[769652](769356 call stridable _mt[243] _arg1[769099]))
    unknown call_tmp[769657] "expr temp" "maybe param" "maybe type" "temp"
    (769660 'move' call_tmp[769657](769360 call stridable _mt[243] _arg2[769100]))
    unknown call_tmp[769662] "expr temp" "maybe param" "maybe type" "temp"
    (769665 'move' call_tmp[769662](769364 call > call_tmp[769652] call_tmp[769657]))
    if call_tmp[769662]
    {
      (769550 'move' ret[769530](769549 'deref' 0))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769667] "expr temp" "maybe param" "maybe type" "temp"
    (769670 'move' call_tmp[769667](769370 call _low _mt[243] _arg1[769099]))
    unknown call_tmp[769672] "expr temp" "maybe param" "maybe type" "temp"
    (769675 'move' call_tmp[769672](769374 call _low _mt[243] _arg2[769100]))
    unknown call_tmp[769677] "expr temp" "maybe param" "maybe type" "temp"
    (769680 'move' call_tmp[769677](769378 call < call_tmp[769667] call_tmp[769672]))
    if call_tmp[769677]
    {
      (769555 'move' ret[769530](769554 'deref' 1))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769682] "expr temp" "maybe param" "maybe type" "temp"
    (769685 'move' call_tmp[769682](769384 call _low _mt[243] _arg1[769099]))
    unknown call_tmp[769687] "expr temp" "maybe param" "maybe type" "temp"
    (769690 'move' call_tmp[769687](769388 call _low _mt[243] _arg2[769100]))
    unknown call_tmp[769692] "expr temp" "maybe param" "maybe type" "temp"
    (769695 'move' call_tmp[769692](769392 call > call_tmp[769682] call_tmp[769687]))
    if call_tmp[769692]
    {
      (769560 'move' ret[769530](769559 'deref' 0))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769697] "expr temp" "maybe param" "maybe type" "temp"
    (769700 'move' call_tmp[769697](769398 call _high _mt[243] _arg1[769099]))
    unknown call_tmp[769702] "expr temp" "maybe param" "maybe type" "temp"
    (769705 'move' call_tmp[769702](769402 call _high _mt[243] _arg2[769100]))
    unknown call_tmp[769707] "expr temp" "maybe param" "maybe type" "temp"
    (769710 'move' call_tmp[769707](769406 call < call_tmp[769697] call_tmp[769702]))
    if call_tmp[769707]
    {
      (769565 'move' ret[769530](769564 'deref' 1))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769712] "expr temp" "maybe param" "maybe type" "temp"
    (769715 'move' call_tmp[769712](769412 call _high _mt[243] _arg1[769099]))
    unknown call_tmp[769717] "expr temp" "maybe param" "maybe type" "temp"
    (769720 'move' call_tmp[769717](769416 call _high _mt[243] _arg2[769100]))
    unknown call_tmp[769722] "expr temp" "maybe param" "maybe type" "temp"
    (769725 'move' call_tmp[769722](769420 call > call_tmp[769712] call_tmp[769717]))
    if call_tmp[769722]
    {
      (769570 'move' ret[769530](769569 'deref' 0))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769727] "expr temp" "maybe param" "maybe type" "temp"
    (769730 'move' call_tmp[769727](769426 call _stride _mt[243] _arg1[769099]))
    unknown call_tmp[769732] "expr temp" "maybe param" "maybe type" "temp"
    (769735 'move' call_tmp[769732](769430 call _stride _mt[243] _arg2[769100]))
    unknown call_tmp[769737] "expr temp" "maybe param" "maybe type" "temp"
    (769740 'move' call_tmp[769737](769434 call < call_tmp[769727] call_tmp[769732]))
    if call_tmp[769737]
    {
      (769575 'move' ret[769530](769574 'deref' 1))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769742] "expr temp" "maybe param" "maybe type" "temp"
    (769745 'move' call_tmp[769742](769440 call _stride _mt[243] _arg1[769099]))
    unknown call_tmp[769747] "expr temp" "maybe param" "maybe type" "temp"
    (769750 'move' call_tmp[769747](769444 call _stride _mt[243] _arg2[769100]))
    unknown call_tmp[769752] "expr temp" "maybe param" "maybe type" "temp"
    (769755 'move' call_tmp[769752](769448 call > call_tmp[769742] call_tmp[769747]))
    if call_tmp[769752]
    {
      (769580 'move' ret[769530](769579 'deref' 0))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769757] "expr temp" "maybe param" "maybe type" "temp"
    (769760 'move' call_tmp[769757](769454 call _alignment _mt[243] _arg1[769099]))
    unknown call_tmp[769762] "expr temp" "maybe param" "maybe type" "temp"
    (769765 'move' call_tmp[769762](769458 call _alignment _mt[243] _arg2[769100]))
    unknown call_tmp[769767] "expr temp" "maybe param" "maybe type" "temp"
    (769770 'move' call_tmp[769767](769462 call < call_tmp[769757] call_tmp[769762]))
    if call_tmp[769767]
    {
      (769585 'move' ret[769530](769584 'deref' 1))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769772] "expr temp" "maybe param" "maybe type" "temp"
    (769775 'move' call_tmp[769772](769468 call _alignment _mt[243] _arg1[769099]))
    unknown call_tmp[769777] "expr temp" "maybe param" "maybe type" "temp"
    (769780 'move' call_tmp[769777](769472 call _alignment _mt[243] _arg2[769100]))
    unknown call_tmp[769782] "expr temp" "maybe param" "maybe type" "temp"
    (769785 'move' call_tmp[769782](769476 call > call_tmp[769772] call_tmp[769777]))
    if call_tmp[769782]
    {
      (769590 'move' ret[769530](769589 'deref' 0))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769787] "expr temp" "maybe param" "maybe type" "temp"
    (769790 'move' call_tmp[769787](769482 call _aligned _mt[243] _arg1[769099]))
    unknown call_tmp[769792] "expr temp" "maybe param" "maybe type" "temp"
    (769795 'move' call_tmp[769792](769486 call _aligned _mt[243] _arg2[769100]))
    unknown call_tmp[769797] "expr temp" "maybe param" "maybe type" "temp"
    (769800 'move' call_tmp[769797](769490 call < call_tmp[769787] call_tmp[769792]))
    if call_tmp[769797]
    {
      (769595 'move' ret[769530](769594 'deref' 1))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    unknown call_tmp[769802] "expr temp" "maybe param" "maybe type" "temp"
    (769805 'move' call_tmp[769802](769496 call _aligned _mt[243] _arg1[769099]))
    unknown call_tmp[769807] "expr temp" "maybe param" "maybe type" "temp"
    (769810 'move' call_tmp[769807](769500 call _aligned _mt[243] _arg2[769100]))
    unknown call_tmp[769812] "expr temp" "maybe param" "maybe type" "temp"
    (769815 'move' call_tmp[769812](769504 call > call_tmp[769802] call_tmp[769807]))
    if call_tmp[769812]
    {
      (769600 'move' ret[769530](769599 'deref' 0))
      gotoReturn _end_<=[769528] _end_<=[769528]
    }
    (769605 'move' ret[769530](769604 'deref' 1))
    label _end_<=[769528]
    (769532 return ret[769530])
  }
  where {
    unknown call_tmp[769817] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769820 'move' call_tmp[769817](769103 'typeof' _arg1[769099]))
    unknown call_tmp[769822] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (769825 'move' call_tmp[769822](769105 'typeof' _arg2[769100]))
    unknown call_tmp[769827] "expr temp" "maybe param" "maybe type" "temp"
    (769830 'move' call_tmp[769827](769107 call == call_tmp[769817] call_tmp[769822]))
    unknown call_tmp[769832] "expr temp" "maybe param" "maybe type" "temp"
    (769835 'move' call_tmp[769832](769308 call chpl_fields_are_comparable[769109] _arg1[769099] _arg2[769100]))
    (769312 '&' call_tmp[769827] call_tmp[769832])
  }
  function chpl_fields_are_comparable[769849](arg _arg1[769851]:range[64316](?), arg _arg2[769852]:range[64316](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[769931]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[769938] "expr temp" "maybe param" "maybe type" "temp"
    (769941 'move' call_tmp[769938](769855 call boundedType _mt[243] _arg1[769851]))
    unknown call_tmp[769943] "expr temp" "maybe param" "maybe type" "temp"
    (769946 'move' call_tmp[769943](769859 call boundedType _mt[243] _arg2[769852]))
    unknown call_tmp[769948] "expr temp" "maybe param" "maybe type" "temp"
    (769951 'move' call_tmp[769948](769863 'call resolves' c">" call_tmp[769938] call_tmp[769943]))
    unknown call_tmp[769953] "expr temp" "maybe param" "maybe type" "temp"
    (769956 'move' call_tmp[769953](769865 call stridable _mt[243] _arg1[769851]))
    unknown call_tmp[769958] "expr temp" "maybe param" "maybe type" "temp"
    (769961 'move' call_tmp[769958](769869 call stridable _mt[243] _arg2[769852]))
    unknown call_tmp[769963] "expr temp" "maybe param" "maybe type" "temp"
    (769966 'move' call_tmp[769963](769873 'call resolves' c">" call_tmp[769953] call_tmp[769958]))
    unknown call_tmp[769968] "expr temp" "maybe param" "maybe type" "temp"
    (769971 'move' call_tmp[769968](769875 call _low _mt[243] _arg1[769851]))
    unknown call_tmp[769973] "expr temp" "maybe param" "maybe type" "temp"
    (769976 'move' call_tmp[769973](769879 call _low _mt[243] _arg2[769852]))
    unknown call_tmp[769978] "expr temp" "maybe param" "maybe type" "temp"
    (769981 'move' call_tmp[769978](769883 'call resolves' c">" call_tmp[769968] call_tmp[769973]))
    unknown call_tmp[769983] "expr temp" "maybe param" "maybe type" "temp"
    (769986 'move' call_tmp[769983](769885 call _high _mt[243] _arg1[769851]))
    unknown call_tmp[769988] "expr temp" "maybe param" "maybe type" "temp"
    (769991 'move' call_tmp[769988](769889 call _high _mt[243] _arg2[769852]))
    unknown call_tmp[769993] "expr temp" "maybe param" "maybe type" "temp"
    (769996 'move' call_tmp[769993](769893 'call resolves' c">" call_tmp[769983] call_tmp[769988]))
    unknown call_tmp[769998] "expr temp" "maybe param" "maybe type" "temp"
    (770001 'move' call_tmp[769998](769895 call _stride _mt[243] _arg1[769851]))
    unknown call_tmp[770003] "expr temp" "maybe param" "maybe type" "temp"
    (770006 'move' call_tmp[770003](769899 call _stride _mt[243] _arg2[769852]))
    unknown call_tmp[770008] "expr temp" "maybe param" "maybe type" "temp"
    (770011 'move' call_tmp[770008](769903 'call resolves' c">" call_tmp[769998] call_tmp[770003]))
    unknown call_tmp[770013] "expr temp" "maybe param" "maybe type" "temp"
    (770016 'move' call_tmp[770013](769905 call _alignment _mt[243] _arg1[769851]))
    unknown call_tmp[770018] "expr temp" "maybe param" "maybe type" "temp"
    (770021 'move' call_tmp[770018](769909 call _alignment _mt[243] _arg2[769852]))
    unknown call_tmp[770023] "expr temp" "maybe param" "maybe type" "temp"
    (770026 'move' call_tmp[770023](769913 'call resolves' c">" call_tmp[770013] call_tmp[770018]))
    unknown call_tmp[770028] "expr temp" "maybe param" "maybe type" "temp"
    (770031 'move' call_tmp[770028](769915 call _aligned _mt[243] _arg1[769851]))
    unknown call_tmp[770033] "expr temp" "maybe param" "maybe type" "temp"
    (770036 'move' call_tmp[770033](769919 call _aligned _mt[243] _arg2[769852]))
    unknown call_tmp[770038] "expr temp" "maybe param" "maybe type" "temp"
    (770041 'move' call_tmp[770038](769923 'call resolves' c">" call_tmp[770028] call_tmp[770033]))
    unknown call_tmp[770043] "expr temp" "maybe param" "maybe type" "temp"
    (770046 'move' call_tmp[770043](769925 '&' call_tmp[769948] call_tmp[769963] call_tmp[769978] call_tmp[769993] call_tmp[770008] call_tmp[770023] call_tmp[770038]))
    (769936 'move' ret[769931](769935 'deref' call_tmp[770043]))
    (769933 return ret[769931])
  }
  function >[769837](arg _arg1[769839]:range[64316](?), arg _arg2[769840]:range[64316](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[770270]:bool[10] "RVV" "temp"
    unknown call_tmp[770347] "expr temp" "maybe param" "maybe type" "temp"
    (770350 'move' call_tmp[770347](770054 call boundedType _mt[243] _arg1[769839]))
    unknown call_tmp[770352] "expr temp" "maybe param" "maybe type" "temp"
    (770355 'move' call_tmp[770352](770058 call boundedType _mt[243] _arg2[769840]))
    unknown call_tmp[770357] "expr temp" "maybe param" "maybe type" "temp"
    (770360 'move' call_tmp[770357](770062 call > call_tmp[770347] call_tmp[770352]))
    if call_tmp[770357]
    {
      (770275 'move' ret[770270](770274 'deref' 1))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770362] "expr temp" "maybe param" "maybe type" "temp"
    (770365 'move' call_tmp[770362](770068 call boundedType _mt[243] _arg1[769839]))
    unknown call_tmp[770367] "expr temp" "maybe param" "maybe type" "temp"
    (770370 'move' call_tmp[770367](770072 call boundedType _mt[243] _arg2[769840]))
    unknown call_tmp[770372] "expr temp" "maybe param" "maybe type" "temp"
    (770375 'move' call_tmp[770372](770076 call < call_tmp[770362] call_tmp[770367]))
    if call_tmp[770372]
    {
      (770280 'move' ret[770270](770279 'deref' 0))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770377] "expr temp" "maybe param" "maybe type" "temp"
    (770380 'move' call_tmp[770377](770082 call stridable _mt[243] _arg1[769839]))
    unknown call_tmp[770382] "expr temp" "maybe param" "maybe type" "temp"
    (770385 'move' call_tmp[770382](770086 call stridable _mt[243] _arg2[769840]))
    unknown call_tmp[770387] "expr temp" "maybe param" "maybe type" "temp"
    (770390 'move' call_tmp[770387](770090 call > call_tmp[770377] call_tmp[770382]))
    if call_tmp[770387]
    {
      (770285 'move' ret[770270](770284 'deref' 1))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770392] "expr temp" "maybe param" "maybe type" "temp"
    (770395 'move' call_tmp[770392](770096 call stridable _mt[243] _arg1[769839]))
    unknown call_tmp[770397] "expr temp" "maybe param" "maybe type" "temp"
    (770400 'move' call_tmp[770397](770100 call stridable _mt[243] _arg2[769840]))
    unknown call_tmp[770402] "expr temp" "maybe param" "maybe type" "temp"
    (770405 'move' call_tmp[770402](770104 call < call_tmp[770392] call_tmp[770397]))
    if call_tmp[770402]
    {
      (770290 'move' ret[770270](770289 'deref' 0))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770407] "expr temp" "maybe param" "maybe type" "temp"
    (770410 'move' call_tmp[770407](770110 call _low _mt[243] _arg1[769839]))
    unknown call_tmp[770412] "expr temp" "maybe param" "maybe type" "temp"
    (770415 'move' call_tmp[770412](770114 call _low _mt[243] _arg2[769840]))
    unknown call_tmp[770417] "expr temp" "maybe param" "maybe type" "temp"
    (770420 'move' call_tmp[770417](770118 call > call_tmp[770407] call_tmp[770412]))
    if call_tmp[770417]
    {
      (770295 'move' ret[770270](770294 'deref' 1))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770422] "expr temp" "maybe param" "maybe type" "temp"
    (770425 'move' call_tmp[770422](770124 call _low _mt[243] _arg1[769839]))
    unknown call_tmp[770427] "expr temp" "maybe param" "maybe type" "temp"
    (770430 'move' call_tmp[770427](770128 call _low _mt[243] _arg2[769840]))
    unknown call_tmp[770432] "expr temp" "maybe param" "maybe type" "temp"
    (770435 'move' call_tmp[770432](770132 call < call_tmp[770422] call_tmp[770427]))
    if call_tmp[770432]
    {
      (770300 'move' ret[770270](770299 'deref' 0))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770437] "expr temp" "maybe param" "maybe type" "temp"
    (770440 'move' call_tmp[770437](770138 call _high _mt[243] _arg1[769839]))
    unknown call_tmp[770442] "expr temp" "maybe param" "maybe type" "temp"
    (770445 'move' call_tmp[770442](770142 call _high _mt[243] _arg2[769840]))
    unknown call_tmp[770447] "expr temp" "maybe param" "maybe type" "temp"
    (770450 'move' call_tmp[770447](770146 call > call_tmp[770437] call_tmp[770442]))
    if call_tmp[770447]
    {
      (770305 'move' ret[770270](770304 'deref' 1))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770452] "expr temp" "maybe param" "maybe type" "temp"
    (770455 'move' call_tmp[770452](770152 call _high _mt[243] _arg1[769839]))
    unknown call_tmp[770457] "expr temp" "maybe param" "maybe type" "temp"
    (770460 'move' call_tmp[770457](770156 call _high _mt[243] _arg2[769840]))
    unknown call_tmp[770462] "expr temp" "maybe param" "maybe type" "temp"
    (770465 'move' call_tmp[770462](770160 call < call_tmp[770452] call_tmp[770457]))
    if call_tmp[770462]
    {
      (770310 'move' ret[770270](770309 'deref' 0))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770467] "expr temp" "maybe param" "maybe type" "temp"
    (770470 'move' call_tmp[770467](770166 call _stride _mt[243] _arg1[769839]))
    unknown call_tmp[770472] "expr temp" "maybe param" "maybe type" "temp"
    (770475 'move' call_tmp[770472](770170 call _stride _mt[243] _arg2[769840]))
    unknown call_tmp[770477] "expr temp" "maybe param" "maybe type" "temp"
    (770480 'move' call_tmp[770477](770174 call > call_tmp[770467] call_tmp[770472]))
    if call_tmp[770477]
    {
      (770315 'move' ret[770270](770314 'deref' 1))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770482] "expr temp" "maybe param" "maybe type" "temp"
    (770485 'move' call_tmp[770482](770180 call _stride _mt[243] _arg1[769839]))
    unknown call_tmp[770487] "expr temp" "maybe param" "maybe type" "temp"
    (770490 'move' call_tmp[770487](770184 call _stride _mt[243] _arg2[769840]))
    unknown call_tmp[770492] "expr temp" "maybe param" "maybe type" "temp"
    (770495 'move' call_tmp[770492](770188 call < call_tmp[770482] call_tmp[770487]))
    if call_tmp[770492]
    {
      (770320 'move' ret[770270](770319 'deref' 0))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770497] "expr temp" "maybe param" "maybe type" "temp"
    (770500 'move' call_tmp[770497](770194 call _alignment _mt[243] _arg1[769839]))
    unknown call_tmp[770502] "expr temp" "maybe param" "maybe type" "temp"
    (770505 'move' call_tmp[770502](770198 call _alignment _mt[243] _arg2[769840]))
    unknown call_tmp[770507] "expr temp" "maybe param" "maybe type" "temp"
    (770510 'move' call_tmp[770507](770202 call > call_tmp[770497] call_tmp[770502]))
    if call_tmp[770507]
    {
      (770325 'move' ret[770270](770324 'deref' 1))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770512] "expr temp" "maybe param" "maybe type" "temp"
    (770515 'move' call_tmp[770512](770208 call _alignment _mt[243] _arg1[769839]))
    unknown call_tmp[770517] "expr temp" "maybe param" "maybe type" "temp"
    (770520 'move' call_tmp[770517](770212 call _alignment _mt[243] _arg2[769840]))
    unknown call_tmp[770522] "expr temp" "maybe param" "maybe type" "temp"
    (770525 'move' call_tmp[770522](770216 call < call_tmp[770512] call_tmp[770517]))
    if call_tmp[770522]
    {
      (770330 'move' ret[770270](770329 'deref' 0))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770527] "expr temp" "maybe param" "maybe type" "temp"
    (770530 'move' call_tmp[770527](770222 call _aligned _mt[243] _arg1[769839]))
    unknown call_tmp[770532] "expr temp" "maybe param" "maybe type" "temp"
    (770535 'move' call_tmp[770532](770226 call _aligned _mt[243] _arg2[769840]))
    unknown call_tmp[770537] "expr temp" "maybe param" "maybe type" "temp"
    (770540 'move' call_tmp[770537](770230 call > call_tmp[770527] call_tmp[770532]))
    if call_tmp[770537]
    {
      (770335 'move' ret[770270](770334 'deref' 1))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    unknown call_tmp[770542] "expr temp" "maybe param" "maybe type" "temp"
    (770545 'move' call_tmp[770542](770236 call _aligned _mt[243] _arg1[769839]))
    unknown call_tmp[770547] "expr temp" "maybe param" "maybe type" "temp"
    (770550 'move' call_tmp[770547](770240 call _aligned _mt[243] _arg2[769840]))
    unknown call_tmp[770552] "expr temp" "maybe param" "maybe type" "temp"
    (770555 'move' call_tmp[770552](770244 call < call_tmp[770542] call_tmp[770547]))
    if call_tmp[770552]
    {
      (770340 'move' ret[770270](770339 'deref' 0))
      gotoReturn _end_>[770268] _end_>[770268]
    }
    (770345 'move' ret[770270](770344 'deref' 0))
    label _end_>[770268]
    (770272 return ret[770270])
  }
  where {
    unknown call_tmp[770557] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (770560 'move' call_tmp[770557](769843 'typeof' _arg1[769839]))
    unknown call_tmp[770562] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (770565 'move' call_tmp[770562](769845 'typeof' _arg2[769840]))
    unknown call_tmp[770567] "expr temp" "maybe param" "maybe type" "temp"
    (770570 'move' call_tmp[770567](769847 call == call_tmp[770557] call_tmp[770562]))
    unknown call_tmp[770572] "expr temp" "maybe param" "maybe type" "temp"
    (770575 'move' call_tmp[770572](770048 call chpl_fields_are_comparable[769849] _arg1[769839] _arg2[769840]))
    (770052 '&' call_tmp[770567] call_tmp[770572])
  }
  function chpl_fields_are_comparable[770589](arg _arg1[770591]:range[64316](?), arg _arg2[770592]:range[64316](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[770671]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[770678] "expr temp" "maybe param" "maybe type" "temp"
    (770681 'move' call_tmp[770678](770595 call boundedType _mt[243] _arg1[770591]))
    unknown call_tmp[770683] "expr temp" "maybe param" "maybe type" "temp"
    (770686 'move' call_tmp[770683](770599 call boundedType _mt[243] _arg2[770592]))
    unknown call_tmp[770688] "expr temp" "maybe param" "maybe type" "temp"
    (770691 'move' call_tmp[770688](770603 'call resolves' c">=" call_tmp[770678] call_tmp[770683]))
    unknown call_tmp[770693] "expr temp" "maybe param" "maybe type" "temp"
    (770696 'move' call_tmp[770693](770605 call stridable _mt[243] _arg1[770591]))
    unknown call_tmp[770698] "expr temp" "maybe param" "maybe type" "temp"
    (770701 'move' call_tmp[770698](770609 call stridable _mt[243] _arg2[770592]))
    unknown call_tmp[770703] "expr temp" "maybe param" "maybe type" "temp"
    (770706 'move' call_tmp[770703](770613 'call resolves' c">=" call_tmp[770693] call_tmp[770698]))
    unknown call_tmp[770708] "expr temp" "maybe param" "maybe type" "temp"
    (770711 'move' call_tmp[770708](770615 call _low _mt[243] _arg1[770591]))
    unknown call_tmp[770713] "expr temp" "maybe param" "maybe type" "temp"
    (770716 'move' call_tmp[770713](770619 call _low _mt[243] _arg2[770592]))
    unknown call_tmp[770718] "expr temp" "maybe param" "maybe type" "temp"
    (770721 'move' call_tmp[770718](770623 'call resolves' c">=" call_tmp[770708] call_tmp[770713]))
    unknown call_tmp[770723] "expr temp" "maybe param" "maybe type" "temp"
    (770726 'move' call_tmp[770723](770625 call _high _mt[243] _arg1[770591]))
    unknown call_tmp[770728] "expr temp" "maybe param" "maybe type" "temp"
    (770731 'move' call_tmp[770728](770629 call _high _mt[243] _arg2[770592]))
    unknown call_tmp[770733] "expr temp" "maybe param" "maybe type" "temp"
    (770736 'move' call_tmp[770733](770633 'call resolves' c">=" call_tmp[770723] call_tmp[770728]))
    unknown call_tmp[770738] "expr temp" "maybe param" "maybe type" "temp"
    (770741 'move' call_tmp[770738](770635 call _stride _mt[243] _arg1[770591]))
    unknown call_tmp[770743] "expr temp" "maybe param" "maybe type" "temp"
    (770746 'move' call_tmp[770743](770639 call _stride _mt[243] _arg2[770592]))
    unknown call_tmp[770748] "expr temp" "maybe param" "maybe type" "temp"
    (770751 'move' call_tmp[770748](770643 'call resolves' c">=" call_tmp[770738] call_tmp[770743]))
    unknown call_tmp[770753] "expr temp" "maybe param" "maybe type" "temp"
    (770756 'move' call_tmp[770753](770645 call _alignment _mt[243] _arg1[770591]))
    unknown call_tmp[770758] "expr temp" "maybe param" "maybe type" "temp"
    (770761 'move' call_tmp[770758](770649 call _alignment _mt[243] _arg2[770592]))
    unknown call_tmp[770763] "expr temp" "maybe param" "maybe type" "temp"
    (770766 'move' call_tmp[770763](770653 'call resolves' c">=" call_tmp[770753] call_tmp[770758]))
    unknown call_tmp[770768] "expr temp" "maybe param" "maybe type" "temp"
    (770771 'move' call_tmp[770768](770655 call _aligned _mt[243] _arg1[770591]))
    unknown call_tmp[770773] "expr temp" "maybe param" "maybe type" "temp"
    (770776 'move' call_tmp[770773](770659 call _aligned _mt[243] _arg2[770592]))
    unknown call_tmp[770778] "expr temp" "maybe param" "maybe type" "temp"
    (770781 'move' call_tmp[770778](770663 'call resolves' c">=" call_tmp[770768] call_tmp[770773]))
    unknown call_tmp[770783] "expr temp" "maybe param" "maybe type" "temp"
    (770786 'move' call_tmp[770783](770665 '&' call_tmp[770688] call_tmp[770703] call_tmp[770718] call_tmp[770733] call_tmp[770748] call_tmp[770763] call_tmp[770778]))
    (770676 'move' ret[770671](770675 'deref' call_tmp[770783]))
    (770673 return ret[770671])
  }
  function >=[770577](arg _arg1[770579]:range[64316](?), arg _arg2[770580]:range[64316](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[771010]:bool[10] "RVV" "temp"
    unknown call_tmp[771087] "expr temp" "maybe param" "maybe type" "temp"
    (771090 'move' call_tmp[771087](770794 call boundedType _mt[243] _arg1[770579]))
    unknown call_tmp[771092] "expr temp" "maybe param" "maybe type" "temp"
    (771095 'move' call_tmp[771092](770798 call boundedType _mt[243] _arg2[770580]))
    unknown call_tmp[771097] "expr temp" "maybe param" "maybe type" "temp"
    (771100 'move' call_tmp[771097](770802 call > call_tmp[771087] call_tmp[771092]))
    if call_tmp[771097]
    {
      (771015 'move' ret[771010](771014 'deref' 1))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771102] "expr temp" "maybe param" "maybe type" "temp"
    (771105 'move' call_tmp[771102](770808 call boundedType _mt[243] _arg1[770579]))
    unknown call_tmp[771107] "expr temp" "maybe param" "maybe type" "temp"
    (771110 'move' call_tmp[771107](770812 call boundedType _mt[243] _arg2[770580]))
    unknown call_tmp[771112] "expr temp" "maybe param" "maybe type" "temp"
    (771115 'move' call_tmp[771112](770816 call < call_tmp[771102] call_tmp[771107]))
    if call_tmp[771112]
    {
      (771020 'move' ret[771010](771019 'deref' 0))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771117] "expr temp" "maybe param" "maybe type" "temp"
    (771120 'move' call_tmp[771117](770822 call stridable _mt[243] _arg1[770579]))
    unknown call_tmp[771122] "expr temp" "maybe param" "maybe type" "temp"
    (771125 'move' call_tmp[771122](770826 call stridable _mt[243] _arg2[770580]))
    unknown call_tmp[771127] "expr temp" "maybe param" "maybe type" "temp"
    (771130 'move' call_tmp[771127](770830 call > call_tmp[771117] call_tmp[771122]))
    if call_tmp[771127]
    {
      (771025 'move' ret[771010](771024 'deref' 1))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771132] "expr temp" "maybe param" "maybe type" "temp"
    (771135 'move' call_tmp[771132](770836 call stridable _mt[243] _arg1[770579]))
    unknown call_tmp[771137] "expr temp" "maybe param" "maybe type" "temp"
    (771140 'move' call_tmp[771137](770840 call stridable _mt[243] _arg2[770580]))
    unknown call_tmp[771142] "expr temp" "maybe param" "maybe type" "temp"
    (771145 'move' call_tmp[771142](770844 call < call_tmp[771132] call_tmp[771137]))
    if call_tmp[771142]
    {
      (771030 'move' ret[771010](771029 'deref' 0))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771147] "expr temp" "maybe param" "maybe type" "temp"
    (771150 'move' call_tmp[771147](770850 call _low _mt[243] _arg1[770579]))
    unknown call_tmp[771152] "expr temp" "maybe param" "maybe type" "temp"
    (771155 'move' call_tmp[771152](770854 call _low _mt[243] _arg2[770580]))
    unknown call_tmp[771157] "expr temp" "maybe param" "maybe type" "temp"
    (771160 'move' call_tmp[771157](770858 call > call_tmp[771147] call_tmp[771152]))
    if call_tmp[771157]
    {
      (771035 'move' ret[771010](771034 'deref' 1))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771162] "expr temp" "maybe param" "maybe type" "temp"
    (771165 'move' call_tmp[771162](770864 call _low _mt[243] _arg1[770579]))
    unknown call_tmp[771167] "expr temp" "maybe param" "maybe type" "temp"
    (771170 'move' call_tmp[771167](770868 call _low _mt[243] _arg2[770580]))
    unknown call_tmp[771172] "expr temp" "maybe param" "maybe type" "temp"
    (771175 'move' call_tmp[771172](770872 call < call_tmp[771162] call_tmp[771167]))
    if call_tmp[771172]
    {
      (771040 'move' ret[771010](771039 'deref' 0))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771177] "expr temp" "maybe param" "maybe type" "temp"
    (771180 'move' call_tmp[771177](770878 call _high _mt[243] _arg1[770579]))
    unknown call_tmp[771182] "expr temp" "maybe param" "maybe type" "temp"
    (771185 'move' call_tmp[771182](770882 call _high _mt[243] _arg2[770580]))
    unknown call_tmp[771187] "expr temp" "maybe param" "maybe type" "temp"
    (771190 'move' call_tmp[771187](770886 call > call_tmp[771177] call_tmp[771182]))
    if call_tmp[771187]
    {
      (771045 'move' ret[771010](771044 'deref' 1))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771192] "expr temp" "maybe param" "maybe type" "temp"
    (771195 'move' call_tmp[771192](770892 call _high _mt[243] _arg1[770579]))
    unknown call_tmp[771197] "expr temp" "maybe param" "maybe type" "temp"
    (771200 'move' call_tmp[771197](770896 call _high _mt[243] _arg2[770580]))
    unknown call_tmp[771202] "expr temp" "maybe param" "maybe type" "temp"
    (771205 'move' call_tmp[771202](770900 call < call_tmp[771192] call_tmp[771197]))
    if call_tmp[771202]
    {
      (771050 'move' ret[771010](771049 'deref' 0))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771207] "expr temp" "maybe param" "maybe type" "temp"
    (771210 'move' call_tmp[771207](770906 call _stride _mt[243] _arg1[770579]))
    unknown call_tmp[771212] "expr temp" "maybe param" "maybe type" "temp"
    (771215 'move' call_tmp[771212](770910 call _stride _mt[243] _arg2[770580]))
    unknown call_tmp[771217] "expr temp" "maybe param" "maybe type" "temp"
    (771220 'move' call_tmp[771217](770914 call > call_tmp[771207] call_tmp[771212]))
    if call_tmp[771217]
    {
      (771055 'move' ret[771010](771054 'deref' 1))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771222] "expr temp" "maybe param" "maybe type" "temp"
    (771225 'move' call_tmp[771222](770920 call _stride _mt[243] _arg1[770579]))
    unknown call_tmp[771227] "expr temp" "maybe param" "maybe type" "temp"
    (771230 'move' call_tmp[771227](770924 call _stride _mt[243] _arg2[770580]))
    unknown call_tmp[771232] "expr temp" "maybe param" "maybe type" "temp"
    (771235 'move' call_tmp[771232](770928 call < call_tmp[771222] call_tmp[771227]))
    if call_tmp[771232]
    {
      (771060 'move' ret[771010](771059 'deref' 0))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771237] "expr temp" "maybe param" "maybe type" "temp"
    (771240 'move' call_tmp[771237](770934 call _alignment _mt[243] _arg1[770579]))
    unknown call_tmp[771242] "expr temp" "maybe param" "maybe type" "temp"
    (771245 'move' call_tmp[771242](770938 call _alignment _mt[243] _arg2[770580]))
    unknown call_tmp[771247] "expr temp" "maybe param" "maybe type" "temp"
    (771250 'move' call_tmp[771247](770942 call > call_tmp[771237] call_tmp[771242]))
    if call_tmp[771247]
    {
      (771065 'move' ret[771010](771064 'deref' 1))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771252] "expr temp" "maybe param" "maybe type" "temp"
    (771255 'move' call_tmp[771252](770948 call _alignment _mt[243] _arg1[770579]))
    unknown call_tmp[771257] "expr temp" "maybe param" "maybe type" "temp"
    (771260 'move' call_tmp[771257](770952 call _alignment _mt[243] _arg2[770580]))
    unknown call_tmp[771262] "expr temp" "maybe param" "maybe type" "temp"
    (771265 'move' call_tmp[771262](770956 call < call_tmp[771252] call_tmp[771257]))
    if call_tmp[771262]
    {
      (771070 'move' ret[771010](771069 'deref' 0))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771267] "expr temp" "maybe param" "maybe type" "temp"
    (771270 'move' call_tmp[771267](770962 call _aligned _mt[243] _arg1[770579]))
    unknown call_tmp[771272] "expr temp" "maybe param" "maybe type" "temp"
    (771275 'move' call_tmp[771272](770966 call _aligned _mt[243] _arg2[770580]))
    unknown call_tmp[771277] "expr temp" "maybe param" "maybe type" "temp"
    (771280 'move' call_tmp[771277](770970 call > call_tmp[771267] call_tmp[771272]))
    if call_tmp[771277]
    {
      (771075 'move' ret[771010](771074 'deref' 1))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    unknown call_tmp[771282] "expr temp" "maybe param" "maybe type" "temp"
    (771285 'move' call_tmp[771282](770976 call _aligned _mt[243] _arg1[770579]))
    unknown call_tmp[771287] "expr temp" "maybe param" "maybe type" "temp"
    (771290 'move' call_tmp[771287](770980 call _aligned _mt[243] _arg2[770580]))
    unknown call_tmp[771292] "expr temp" "maybe param" "maybe type" "temp"
    (771295 'move' call_tmp[771292](770984 call < call_tmp[771282] call_tmp[771287]))
    if call_tmp[771292]
    {
      (771080 'move' ret[771010](771079 'deref' 0))
      gotoReturn _end_>=[771008] _end_>=[771008]
    }
    (771085 'move' ret[771010](771084 'deref' 1))
    label _end_>=[771008]
    (771012 return ret[771010])
  }
  where {
    unknown call_tmp[771297] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (771300 'move' call_tmp[771297](770583 'typeof' _arg1[770579]))
    unknown call_tmp[771302] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (771305 'move' call_tmp[771302](770585 'typeof' _arg2[770580]))
    unknown call_tmp[771307] "expr temp" "maybe param" "maybe type" "temp"
    (771310 'move' call_tmp[771307](770587 call == call_tmp[771297] call_tmp[771302]))
    unknown call_tmp[771312] "expr temp" "maybe param" "maybe type" "temp"
    (771315 'move' call_tmp[771312](770788 call chpl_fields_are_comparable[770589] _arg1[770579] _arg2[770580]))
    (770792 '&' call_tmp[771307] call_tmp[771312])
  }
  type range[64316](?) unknown idxType[64220] "type variable" int(64)[13] unknown boundedType[64230] "param" bounded[64205] BoundedRangeType[64213] unknown stridable[64236] "param" 0 bool[10] unknown _low[64244](64243 call chpl__idxTypeToIntIdxType idxType[64220]) unknown _high[64252](64251 call chpl__idxTypeToIntIdxType idxType[64220]) unknown _stride[64265](64262 IfExpr  stridable[64236] then
  { scopeless
    (64260 call chpl__rangeStrideType idxType[64220])
  } else
  { scopeless
    nothing[7]
  } ) unknown _alignment[64278](64275 IfExpr  stridable[64236] then
  { scopeless
    (64273 call chpl__idxTypeToIntIdxType idxType[64220])
  } else
  { scopeless
    nothing[7]
  } ) unknown _aligned[64288](64285 IfExpr  stridable[64236] then
  { scopeless
    bool[10]
  } else
  { scopeless
    nothing[7]
  } )
  function range[64316](?).intIdxType[64330](arg _mt[64335]:_MT[238], arg this[64332]:range[64316](?) :
  range[64316](?)) type : _unknown[51] "method" "no parens"
  {
    unknown ret[508905] "RVV" "temp" "type variable"
    unknown call_tmp[616166] "expr temp" "maybe param" "maybe type" "temp"
    (616169 'move' call_tmp[616166](373609 call idxType _mt[243] this[64332]))
    unknown call_tmp[616171] "expr temp" "maybe param" "maybe type" "temp"
    (616174 'move' call_tmp[616171](64340 call chpl__idxTypeToIntIdxType call_tmp[616166]))
    (508910 'move' ret[508905](508909 'deref' call_tmp[616171]))
    (508907 return ret[508905])
  }
  function range[64316](?).init[64353](arg _mt[64418]:_MT[238], ref arg this[64415]:range[64316](?) :
  range[64316](?), arg idxType[64350]:_any[178](?) =
  int(64)[13], param arg boundedType[64360]:BoundedRangeType[64213] =
  bounded[64205], param arg stridable[64366]:bool[10] =
  0, arg _low[64376] :
  idxType[64350] =
  (64375 call chpl__intToIdx idxType[64350] 1), arg _high[64386] :
  idxType[64350] =
  (64385 call chpl__intToIdx idxType[64350] 0), arg _stride[64395] :
  (64393 call chpl__rangeStrideType idxType[64350]) =
  1, arg _alignment[64405] :
  idxType[64350] =
  (64404 call chpl__intToIdx idxType[64350] 0), arg _aligned[64411]:bool[10] =
  0) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[454709] "temp" "type variable"
    (454711 'move' tmp[454709] idxType[64350])
    (454713 'init field' this[64415] c"idxType" tmp[454709])
    unknown call_tmp[616176] "expr temp" "maybe param" "maybe type" "temp"
    (616179 'move' call_tmp[616176](454718 call _cast BoundedRangeType[64213] boundedType[64360]))
    (454720 'init field' this[64415] c"boundedType" call_tmp[616176])
    (475138 'end of statement')
    unknown call_tmp[616181] "expr temp" "maybe param" "maybe type" "temp"
    (616184 'move' call_tmp[616181](454724 call _cast bool[10] stridable[64366]))
    (454726 'init field' this[64415] c"stridable" call_tmp[616181])
    (475139 'end of statement')
    unknown call_tmp[616186] "maybe param" "maybe type" "temp"
    (616189 'move' call_tmp[616186](64456 call chpl__idxToInt _low[64376]))
    unknown call_tmp[616191] "expr temp" "maybe param" "maybe type" "temp"
    (616194 'move' call_tmp[616191](454740 '.v' this[64415] c"idxType"))
    unknown call_tmp[616196] "maybe param" "maybe type" "temp"
    (616199 'move' call_tmp[616196](454732 call chpl__idxTypeToIntIdxType call_tmp[616191]))
    unknown tmp[454729] "temp"
    (454734 'init var' tmp[454729] call_tmp[616186] call_tmp[616196])
    (454736 'init field' this[64415] c"_low" tmp[454729])
    (475140 'end of statement')
    unknown call_tmp[616201] "maybe param" "maybe type" "temp"
    (616204 'move' call_tmp[616201](64469 call chpl__idxToInt _high[64386]))
    unknown call_tmp[616206] "expr temp" "maybe param" "maybe type" "temp"
    (616209 'move' call_tmp[616206](454754 '.v' this[64415] c"idxType"))
    unknown call_tmp[616211] "maybe param" "maybe type" "temp"
    (616214 'move' call_tmp[616211](454746 call chpl__idxTypeToIntIdxType call_tmp[616206]))
    unknown tmp[454743] "temp"
    (454748 'init var' tmp[454743] call_tmp[616201] call_tmp[616211])
    (454750 'init field' this[64415] c"_high" tmp[454743])
    (475141 'end of statement')
    unknown tmp[454757] "temp"
    unknown tmp[555292] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555293] "maybe param" "temp"
    unknown call_tmp[616216] "expr temp" "maybe param" "maybe type" "temp"
    (616219 'move' call_tmp[616216](454773 '.v' this[64415] c"stridable"))
    (555298 'move' tmp[555293](555296 call _cond_test call_tmp[616216]))
    if tmp[555293]
    {
      unknown tmp[555300] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616221] "expr temp" "maybe param" "maybe type" "temp"
      (616224 'move' call_tmp[616221](454776 '.v' this[64415] c"idxType"))
      (555302 'move' tmp[555300](454762 call chpl__rangeStrideType call_tmp[616221]))
      (555307 'move' tmp[555292](555304 '_paramFoldLogical' tmp[555293] tmp[555300]))
    }
    {
      (555312 'move' tmp[555292](555309 '_paramFoldLogical' tmp[555293] nothing[7]))
    }
    (454767 'default init var' tmp[454757] tmp[555292])
    (454769 '.=' this[64415] c"_stride" tmp[454757])
    (475142 'end of statement')
    unknown tmp[454779] "temp"
    unknown tmp[555319] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555320] "maybe param" "temp"
    unknown call_tmp[616226] "expr temp" "maybe param" "maybe type" "temp"
    (616229 'move' call_tmp[616226](454795 '.v' this[64415] c"stridable"))
    (555325 'move' tmp[555320](555323 call _cond_test call_tmp[616226]))
    if tmp[555320]
    {
      unknown tmp[555327] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616231] "expr temp" "maybe param" "maybe type" "temp"
      (616234 'move' call_tmp[616231](454798 '.v' this[64415] c"idxType"))
      (555329 'move' tmp[555327](454784 call chpl__idxTypeToIntIdxType call_tmp[616231]))
      (555334 'move' tmp[555319](555331 '_paramFoldLogical' tmp[555320] tmp[555327]))
    }
    {
      (555339 'move' tmp[555319](555336 '_paramFoldLogical' tmp[555320] nothing[7]))
    }
    (454789 'default init var' tmp[454779] tmp[555319])
    (454791 '.=' this[64415] c"_alignment" tmp[454779])
    (475143 'end of statement')
    unknown tmp[454801] "temp"
    unknown tmp[555346] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555347] "maybe param" "temp"
    unknown call_tmp[616236] "expr temp" "maybe param" "maybe type" "temp"
    (616239 'move' call_tmp[616236](454815 '.v' this[64415] c"stridable"))
    (555352 'move' tmp[555347](555350 call _cond_test call_tmp[616236]))
    if tmp[555347]
    {
      (555357 'move' tmp[555346](555354 '_paramFoldLogical' tmp[555347] bool[10]))
    }
    {
      (555362 'move' tmp[555346](555359 '_paramFoldLogical' tmp[555347] nothing[7]))
    }
    (454809 'default init var' tmp[454801] tmp[555346])
    (454811 '.=' this[64415] c"_aligned" tmp[454801])
    (475144 'end of statement')
    unknown call_tmp[616241] "expr temp" "maybe param" "maybe type" "temp"
    (616244 'move' call_tmp[616241](64515 call _cond_test stridable[64366]))
    if call_tmp[616241]
    {
      unknown call_tmp[616248] "expr temp" "maybe param" "maybe type" "temp"
      (616251 'move' call_tmp[616248](64484 call _stride _mt[243] this[64415]))
      (64488 call = call_tmp[616248] _stride[64395])
      (475145 'end of statement')
      unknown call_tmp[616255] "expr temp" "maybe param" "maybe type" "temp"
      (616258 'move' call_tmp[616255](64495 call _alignment _mt[243] this[64415]))
      unknown call_tmp[616260] "expr temp" "maybe param" "maybe type" "temp"
      (616263 'move' call_tmp[616260](64501 call chpl__idxToInt _alignment[64405]))
      (64502 call = call_tmp[616255] call_tmp[616260])
      (475146 'end of statement')
      unknown call_tmp[616267] "expr temp" "maybe param" "maybe type" "temp"
      (616270 'move' call_tmp[616267](64508 call _aligned _mt[243] this[64415]))
      (64512 call = call_tmp[616267] _aligned[64411])
    }
    unknown tmp[419104] "maybe param" "temp"
    (419115 'move' tmp[419104](64520 call ! stridable[64366]))
    unknown call_tmp[616272] "expr temp" "maybe param" "maybe type" "temp"
    (616275 'move' call_tmp[616272](419117 call _cond_invalid tmp[419104]))
    if call_tmp[616272]
    {
      (419120 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555369] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555370] "maybe param" "temp"
    unknown call_tmp[616277] "expr temp" "maybe param" "maybe type" "temp"
    (616280 'move' call_tmp[616277](419105 call isTrue tmp[419104]))
    (555375 'move' tmp[555370](555373 call _cond_test call_tmp[616277]))
    if tmp[555370]
    {
      unknown tmp[555377] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555379 'move' tmp[555377](419108 call isTrue 1))
      (555384 'move' tmp[555369](555381 '_paramFoldLogical' tmp[555370] tmp[555377]))
    }
    {
      (555389 'move' tmp[555369](555386 '_paramFoldLogical' tmp[555370] 0))
    }
    unknown call_tmp[616282] "expr temp" "maybe param" "maybe type" "temp"
    (616285 'move' call_tmp[616282](64533 call _cond_test tmp[555369]))
    if call_tmp[616282]
    {
      unknown call_tmp[616287] "expr temp" "maybe param" "maybe type" "temp"
      (616290 'move' call_tmp[616287](64528 call == _stride[64395] 1))
      (64531 call assert call_tmp[616287])
    }
    (508912 return _void[55])
  }
  function _isAnyNothing[64546](arg args[64543]:_any[178](?) ...) param : _unknown[51] "private"
  {
    unknown ret[508916] "RVV" "param" "temp"
    {
      unknown i[64576] "dead at end of block" "insert auto destroy"
      (540898 'init var' i[64576] 0)
      (475150 'end of statement')
      unknown tmp[64577] "maybe param" "temp"
      unknown call_tmp[616294] "expr temp" "maybe param" "maybe type" "temp"
      (616297 'move' call_tmp[616294](64551 call size _mt[243] args[64543]))
      unknown call_tmp[616299] "expr temp" "maybe param" "maybe type" "temp"
      (616302 'move' call_tmp[616299](64555 call - call_tmp[616294] 1))
      (64589 'move' tmp[64577](64587 call chpl_compute_low_param_loop_bound 0 call_tmp[616299]))
      unknown tmp[64578] "maybe param" "temp"
      unknown call_tmp[616306] "expr temp" "maybe param" "maybe type" "temp"
      (616309 'move' call_tmp[616306](64596 call size _mt[243] args[64543]))
      unknown call_tmp[616311] "expr temp" "maybe param" "maybe type" "temp"
      (616314 'move' call_tmp[616311](64594 call - call_tmp[616306] 1))
      (64602 'move' tmp[64578](64600 call chpl_compute_high_param_loop_bound 0 call_tmp[616311]))
      unknown tmp[64579] "maybe param" "temp"
      (64605 'move' tmp[64579] 1)
      ParamForLoop[64607]
      { i[64576] tmp[64577] tmp[64578] tmp[64579]
        {
          { scopeless type
            unknown call_type_tmp[491752] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[616316] "expr temp" "maybe param" "maybe type" "temp"
            (616319 'move' call_tmp[616316](64563 call args[64543] i[64576]))
            (491756 'move' call_type_tmp[491752](64564 'typeof' call_tmp[616316]))
          }
          unknown call_tmp[616321] "expr temp" "maybe param" "maybe type" "temp"
          (616324 'move' call_tmp[616321](64566 call isNothingType call_type_tmp[491752]))
          unknown call_tmp[616326] "expr temp" "maybe param" "maybe type" "temp"
          (616329 'move' call_tmp[616326](64570 call _cond_test call_tmp[616321]))
          if call_tmp[616326]
          {
            (508922 'move' ret[508916](508921 'coerce' 1 bool[10]))
            gotoReturn _end__isAnyNothing[508914] _end__isAnyNothing[508914]
          }
        }
      }
      label _unused_continueLabel[64581]
      label _breakLabel[64580]
    }
    (508928 'move' ret[508916](508927 'coerce' 0 bool[10]))
    label _end__isAnyNothing[508914]
    (508918 return ret[508916])
  }
  { scopeless type
    bool[10]
  }
  function range[64316](?).init[64630](arg _mt[64676]:_MT[238], ref arg this[64673]:range[64316](?) :
  range[64316](?), arg idxType[64627]:_any[178](?) =
  int(64)[13], param arg boundedType[64637]:BoundedRangeType[64213] =
  bounded[64205], param arg stridable[64643]:bool[10] =
  0, arg _low[64653] :
  idxType[64627] =
  (64652 call chpl__intToIdx idxType[64627] 1), arg _high[64663] :
  idxType[64627] =
  (64662 call chpl__intToIdx idxType[64627] 0), arg _stride[64667]:_any[178](?), arg _alignment[64669]:_any[178](?), arg _aligned[64671]:_any[178](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[454818] "temp" "type variable"
    (454820 'move' tmp[454818] idxType[64627])
    (454822 'init field' this[64673] c"idxType" tmp[454818])
    unknown call_tmp[616331] "expr temp" "maybe param" "maybe type" "temp"
    (616334 'move' call_tmp[616331](454827 call _cast BoundedRangeType[64213] boundedType[64637]))
    (454829 'init field' this[64673] c"boundedType" call_tmp[616331])
    (475153 'end of statement')
    unknown call_tmp[616336] "expr temp" "maybe param" "maybe type" "temp"
    (616339 'move' call_tmp[616336](454833 call _cast bool[10] stridable[64643]))
    (454835 'init field' this[64673] c"stridable" call_tmp[616336])
    (475154 'end of statement')
    unknown call_tmp[616341] "maybe param" "maybe type" "temp"
    (616344 'move' call_tmp[616341](64716 call chpl__idxToInt _low[64653]))
    unknown call_tmp[616346] "expr temp" "maybe param" "maybe type" "temp"
    (616349 'move' call_tmp[616346](454849 '.v' this[64673] c"idxType"))
    unknown call_tmp[616351] "maybe param" "maybe type" "temp"
    (616354 'move' call_tmp[616351](454841 call chpl__idxTypeToIntIdxType call_tmp[616346]))
    unknown tmp[454838] "temp"
    (454843 'init var' tmp[454838] call_tmp[616341] call_tmp[616351])
    (454845 'init field' this[64673] c"_low" tmp[454838])
    (475155 'end of statement')
    unknown call_tmp[616356] "maybe param" "maybe type" "temp"
    (616359 'move' call_tmp[616356](64727 call chpl__idxToInt _high[64663]))
    unknown call_tmp[616361] "expr temp" "maybe param" "maybe type" "temp"
    (616364 'move' call_tmp[616361](454863 '.v' this[64673] c"idxType"))
    unknown call_tmp[616366] "maybe param" "maybe type" "temp"
    (616369 'move' call_tmp[616366](454855 call chpl__idxTypeToIntIdxType call_tmp[616361]))
    unknown tmp[454852] "temp"
    (454857 'init var' tmp[454852] call_tmp[616356] call_tmp[616366])
    (454859 'init field' this[64673] c"_high" tmp[454852])
    (475156 'end of statement')
    unknown tmp[454866] "temp"
    unknown tmp[555396] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555397] "maybe param" "temp"
    unknown call_tmp[616371] "expr temp" "maybe param" "maybe type" "temp"
    (616374 'move' call_tmp[616371](454882 '.v' this[64673] c"stridable"))
    (555402 'move' tmp[555397](555400 call _cond_test call_tmp[616371]))
    if tmp[555397]
    {
      unknown tmp[555404] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616376] "expr temp" "maybe param" "maybe type" "temp"
      (616379 'move' call_tmp[616376](454885 '.v' this[64673] c"idxType"))
      (555406 'move' tmp[555404](454871 call chpl__rangeStrideType call_tmp[616376]))
      (555411 'move' tmp[555396](555408 '_paramFoldLogical' tmp[555397] tmp[555404]))
    }
    {
      (555416 'move' tmp[555396](555413 '_paramFoldLogical' tmp[555397] nothing[7]))
    }
    (454876 'default init var' tmp[454866] tmp[555396])
    (454878 '.=' this[64673] c"_stride" tmp[454866])
    (475157 'end of statement')
    unknown tmp[454888] "temp"
    unknown tmp[555423] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555424] "maybe param" "temp"
    unknown call_tmp[616381] "expr temp" "maybe param" "maybe type" "temp"
    (616384 'move' call_tmp[616381](454904 '.v' this[64673] c"stridable"))
    (555429 'move' tmp[555424](555427 call _cond_test call_tmp[616381]))
    if tmp[555424]
    {
      unknown tmp[555431] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616386] "expr temp" "maybe param" "maybe type" "temp"
      (616389 'move' call_tmp[616386](454907 '.v' this[64673] c"idxType"))
      (555433 'move' tmp[555431](454893 call chpl__idxTypeToIntIdxType call_tmp[616386]))
      (555438 'move' tmp[555423](555435 '_paramFoldLogical' tmp[555424] tmp[555431]))
    }
    {
      (555443 'move' tmp[555423](555440 '_paramFoldLogical' tmp[555424] nothing[7]))
    }
    (454898 'default init var' tmp[454888] tmp[555423])
    (454900 '.=' this[64673] c"_alignment" tmp[454888])
    (475158 'end of statement')
    unknown tmp[454910] "temp"
    unknown tmp[555450] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555451] "maybe param" "temp"
    unknown call_tmp[616391] "expr temp" "maybe param" "maybe type" "temp"
    (616394 'move' call_tmp[616391](454924 '.v' this[64673] c"stridable"))
    (555456 'move' tmp[555451](555454 call _cond_test call_tmp[616391]))
    if tmp[555451]
    {
      (555461 'move' tmp[555450](555458 '_paramFoldLogical' tmp[555451] bool[10]))
    }
    {
      (555466 'move' tmp[555450](555463 '_paramFoldLogical' tmp[555451] nothing[7]))
    }
    (454918 'default init var' tmp[454910] tmp[555450])
    (454920 '.=' this[64673] c"_aligned" tmp[454910])
    (475159 'end of statement')
    unknown call_tmp[616396] "expr temp" "maybe param" "maybe type" "temp"
    (616399 'move' call_tmp[616396](64760 call _cond_test stridable[64643]))
    if call_tmp[616396]
    {
      (64758 call compilerError "non-stridable range initializer called with stridable=true")
    }
    (508930 return _void[55])
  }
  where {
    (64683 call _isAnyNothing _stride[64667] _alignment[64669] _aligned[64671])
  }
  function range[64316](?).init=[64783](arg _mt[64788]:_MT[238], ref arg this[64785]:range[64316](?) :
  range[64316](?), arg other[64780]:range[64316](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown call_tmp[616401] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616404 'move' call_tmp[616401](64791 'typeof' this[64785]))
    unknown call_tmp[616408] "expr temp" "maybe param" "maybe type" "temp"
    (616411 'move' call_tmp[616408](64792 call idxType _mt[243] call_tmp[616401]))
    unknown call_tmp[616413] "expr temp" "maybe param" "maybe type" "temp"
    (616416 'move' call_tmp[616413](64796 call == call_tmp[616408] ?[260]))
    unknown idxType[64807] "dead at end of block" "insert auto destroy" "type variable"(64804 IfExpr  call_tmp[616413] then
    { scopeless
      (454933 'query' other[64780] 1)
    } else
    { scopeless
      unknown call_tmp[616418] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616421 'move' call_tmp[616418](64800 'typeof' this[64785]))
      (64801 call idxType _mt[243] call_tmp[616418])
    } )
    unknown tmp[555473] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555474] "maybe param" "temp"
    unknown call_tmp[616425] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616428 'move' call_tmp[616425](540904 'typeof' this[64785]))
    unknown call_tmp[616432] "expr temp" "maybe param" "maybe type" "temp"
    (616435 'move' call_tmp[616432](540903 call idxType _mt[243] call_tmp[616425]))
    unknown call_tmp[616437] "expr temp" "maybe param" "maybe type" "temp"
    (616440 'move' call_tmp[616437](540901 call == call_tmp[616432] ?[260]))
    (555479 'move' tmp[555474](555477 call _cond_test call_tmp[616437]))
    if tmp[555474]
    {
      unknown tmp[555481] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555483 'move' tmp[555481](540909 'query' other[64780] 1))
      (555488 'move' tmp[555473](555485 '_paramFoldLogical' tmp[555474] tmp[555481]))
    }
    {
      unknown tmp[555490] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616442] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616445 'move' call_tmp[616442](540915 'typeof' this[64785]))
      (555492 'move' tmp[555490](540914 call idxType _mt[243] call_tmp[616442]))
      (555497 'move' tmp[555473](555494 '_paramFoldLogical' tmp[555474] tmp[555490]))
    }
    (540919 'move' idxType[64807] tmp[555473])
    unknown boundedType[64828] "dead at end of block" "param"
    unknown tmp[555504] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555505] "maybe param" "temp"
    unknown call_tmp[616449] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616452 'move' call_tmp[616449](64812 'typeof' this[64785]))
    unknown call_tmp[616456] "expr temp" "maybe param" "maybe type" "temp"
    (616459 'move' call_tmp[616456](64813 call boundedType _mt[243] call_tmp[616449]))
    unknown call_tmp[616461] "expr temp" "maybe param" "maybe type" "temp"
    (616464 'move' call_tmp[616461](64817 call == call_tmp[616456] ?[260]))
    (555510 'move' tmp[555505](555508 call _cond_test call_tmp[616461]))
    if tmp[555505]
    {
      unknown tmp[555512] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555514 'move' tmp[555512](454939 'query' other[64780] 2))
      (555519 'move' tmp[555504](555516 '_paramFoldLogical' tmp[555505] tmp[555512]))
    }
    {
      unknown tmp[555521] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616466] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616469 'move' call_tmp[616466](64821 'typeof' this[64785]))
      (555523 'move' tmp[555521](64822 call boundedType _mt[243] call_tmp[616466]))
      (555528 'move' tmp[555504](555525 '_paramFoldLogical' tmp[555505] tmp[555521]))
    }
    (540921 'init var' boundedType[64828] tmp[555504])
    (64831 'end of statement')
    unknown stridable[64849] "dead at end of block" "param"
    unknown tmp[555535] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555536] "maybe param" "temp"
    unknown call_tmp[616473] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616476 'move' call_tmp[616473](64833 'typeof' this[64785]))
    unknown call_tmp[616480] "expr temp" "maybe param" "maybe type" "temp"
    (616483 'move' call_tmp[616480](64834 call stridable _mt[243] call_tmp[616473]))
    unknown call_tmp[616485] "expr temp" "maybe param" "maybe type" "temp"
    (616488 'move' call_tmp[616485](64838 call == call_tmp[616480] ?[260]))
    (555541 'move' tmp[555536](555539 call _cond_test call_tmp[616485]))
    if tmp[555536]
    {
      unknown tmp[555543] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555545 'move' tmp[555543](454951 'query' other[64780] 3))
      (555550 'move' tmp[555535](555547 '_paramFoldLogical' tmp[555536] tmp[555543]))
    }
    {
      unknown tmp[555552] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616490] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616493 'move' call_tmp[616490](64842 'typeof' this[64785]))
      (555554 'move' tmp[555552](64843 call stridable _mt[243] call_tmp[616490]))
      (555559 'move' tmp[555535](555556 '_paramFoldLogical' tmp[555536] tmp[555552]))
    }
    (540923 'init var' stridable[64849] tmp[555535])
    (64852 'end of statement')
    unknown call_tmp[616497] "expr temp" "maybe param" "maybe type" "temp"
    (616500 'move' call_tmp[616497](454942 'query' other[64780] 2))
    unknown call_tmp[616502] "expr temp" "maybe param" "maybe type" "temp"
    (616505 'move' call_tmp[616502](64855 call != boundedType[64828] call_tmp[616497]))
    unknown call_tmp[616507] "expr temp" "maybe param" "maybe type" "temp"
    (616510 'move' call_tmp[616507](64917 call _cond_test call_tmp[616502]))
    if call_tmp[616507]
    {
      unknown call_tmp[616512] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (616515 'move' call_tmp[616512](64876 'typeof' this[64785]))
      unknown call_tmp[616519] "expr temp" "maybe param" "maybe type" "temp"
      (616522 'move' call_tmp[616519](64877 call boundedType _mt[243] call_tmp[616512]))
      unknown call_tmp[616524] "expr temp" "maybe param" "maybe type" "temp"
      (616527 'move' call_tmp[616524](64881 call _cast string[26] call_tmp[616519]))
      unknown call_tmp[616529] "expr temp" "maybe param" "maybe type" "temp"
      (616532 'move' call_tmp[616529](64883 call + "range(boundedType=" call_tmp[616524]))
      unknown call_tmp[616534] "expr temp" "maybe param" "maybe type" "temp"
      (616537 'move' call_tmp[616534](64902 call + call_tmp[616529] ") cannot be initialized from range(boundedType="))
      unknown call_tmp[616539] "expr temp" "maybe param" "maybe type" "temp"
      (616542 'move' call_tmp[616539](454945 'query' other[64780] 2))
      unknown call_tmp[616544] "expr temp" "maybe param" "maybe type" "temp"
      (616547 'move' call_tmp[616544](64906 call _cast string[26] call_tmp[616539]))
      unknown call_tmp[616549] "expr temp" "maybe param" "maybe type" "temp"
      (616552 'move' call_tmp[616549](64908 call + call_tmp[616534] call_tmp[616544]))
      unknown call_tmp[616554] "expr temp" "maybe param" "maybe type" "temp"
      (616557 'move' call_tmp[616554](64911 call + call_tmp[616549] ")"))
      (64914 call compilerError call_tmp[616554])
    }
    unknown tmp[419125] "maybe param" "temp"
    (419136 'move' tmp[419125](64922 call ! stridable[64849]))
    unknown call_tmp[616559] "expr temp" "maybe param" "maybe type" "temp"
    (616562 'move' call_tmp[616559](419138 call _cond_invalid tmp[419125]))
    if call_tmp[616559]
    {
      (419141 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555566] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555567] "maybe param" "temp"
    unknown call_tmp[616564] "expr temp" "maybe param" "maybe type" "temp"
    (616567 'move' call_tmp[616564](419126 call isTrue tmp[419125]))
    (555572 'move' tmp[555567](555570 call _cond_test call_tmp[616564]))
    if tmp[555567]
    {
      unknown tmp[555574] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616569] "expr temp" "maybe param" "maybe type" "temp"
      (616572 'move' call_tmp[616569](454954 'query' other[64780] 3))
      (555576 'move' tmp[555574](419129 call isTrue call_tmp[616569]))
      (555581 'move' tmp[555566](555578 '_paramFoldLogical' tmp[555567] tmp[555574]))
    }
    {
      (555586 'move' tmp[555566](555583 '_paramFoldLogical' tmp[555567] 0))
    }
    unknown call_tmp[616574] "expr temp" "maybe param" "maybe type" "temp"
    (616577 'move' call_tmp[616574](64948 call _cond_test tmp[555566]))
    if call_tmp[616574]
    {
      (64946 call compilerError "cannot initialize a non-stridable range from a stridable range")
    }
    unknown tmp[419146] "maybe param" "temp"
    (419157 'move' tmp[419146] stridable[64849])
    unknown call_tmp[616579] "expr temp" "maybe param" "maybe type" "temp"
    (616582 'move' call_tmp[616579](419159 call _cond_invalid tmp[419146]))
    if call_tmp[616579]
    {
      (419162 call compilerError "cannot promote short-circuiting && operator")
    }
    const str[64971] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[555593] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555594] "maybe param" "temp"
    unknown call_tmp[616584] "expr temp" "maybe param" "maybe type" "temp"
    (616587 'move' call_tmp[616584](419147 call isTrue tmp[419146]))
    (555599 'move' tmp[555594](555597 call _cond_test call_tmp[616584]))
    if tmp[555594]
    {
      unknown tmp[555601] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616589] "expr temp" "maybe param" "maybe type" "temp"
      (616592 'move' call_tmp[616589](454957 'query' other[64780] 3))
      (555603 'move' tmp[555601](419150 call isTrue call_tmp[616589]))
      (555608 'move' tmp[555593](555605 '_paramFoldLogical' tmp[555594] tmp[555601]))
    }
    {
      (555613 'move' tmp[555593](555610 '_paramFoldLogical' tmp[555594] 0))
    }
    unknown tmp[555620] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555621] "maybe param" "temp"
    (555626 'move' tmp[555621](555624 call _cond_test tmp[555593]))
    if tmp[555621]
    {
      unknown tmp[555628] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555630 'move' tmp[555628](64958 call stride _mt[243] other[64780]))
      (555635 'move' tmp[555620](555632 '_paramFoldLogical' tmp[555621] tmp[555628]))
    }
    {
      unknown tmp[555637] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616596] "expr temp" "maybe param" "maybe type" "temp"
      (616599 'move' call_tmp[616596](64965 call chpl__rangeStrideType idxType[64807]))
      (555639 'move' tmp[555637](64966 call _cast call_tmp[616596] 1))
      (555644 'move' tmp[555620](555641 '_paramFoldLogical' tmp[555621] tmp[555637]))
    }
    (540925 'init var' str[64971] tmp[555620])
    (64974 'end of statement' idxType[64807])
    unknown call_tmp[616605] "expr temp" "maybe param" "maybe type" "temp"
    (616608 'move' call_tmp[616605](64987 call _low _mt[243] other[64780]))
    unknown call_tmp[616610] "expr temp" "maybe param" "maybe type" "temp"
    (616613 'move' call_tmp[616610](64990 call chpl__intToIdx idxType[64807] call_tmp[616605]))
    unknown call_tmp[616617] "expr temp" "maybe param" "maybe type" "temp"
    (616620 'move' call_tmp[616617](64995 call _high _mt[243] other[64780]))
    unknown call_tmp[616622] "expr temp" "maybe param" "maybe type" "temp"
    (616625 'move' call_tmp[616622](64998 call chpl__intToIdx idxType[64807] call_tmp[616617]))
    unknown call_tmp[616629] "expr temp" "maybe param" "maybe type" "temp"
    (616632 'move' call_tmp[616629](65007 call alignment _mt[243] other[64780]))
    unknown call_tmp[616634] "expr temp" "maybe param" "maybe type" "temp"
    (616637 'move' call_tmp[616634](65011 call chpl__idxToInt call_tmp[616629]))
    unknown call_tmp[616639] "expr temp" "maybe param" "maybe type" "temp"
    (616642 'move' call_tmp[616639](65012 call chpl__intToIdx idxType[64807] call_tmp[616634]))
    unknown call_tmp[616646] "expr temp" "maybe param" "maybe type" "temp"
    (616649 'move' call_tmp[616646](65016 call aligned _mt[243] other[64780]))
    (65019 call(64976 call (partial) init _mt[243] this[64785]) idxType[64807] boundedType[64828] stridable[64849] call_tmp[616610] call_tmp[616622] str[64971] call_tmp[616639] call_tmp[616646])
    (475166 'end of statement' idxType[64807] idxType[64807] idxType[64807] str[64971] idxType[64807])
    (508932 return _void[55])
  }
  function range[64316](?).displayRepresentation[65048](arg _mt[65053]:_MT[238], arg this[65050]:range[64316](?) :
  range[64316](?), arg msg[65044]:string[26] =
  "") : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown ret[508936] "RVV" "temp"
    unknown tmp[555651] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555652] "maybe param" "temp"
    unknown call_tmp[616653] "expr temp" "maybe param" "maybe type" "temp"
    (616656 'move' call_tmp[616653](373703 call aligned _mt[243] this[65050]))
    (555657 'move' tmp[555652](555655 call _cond_test call_tmp[616653]))
    if tmp[555652]
    {
      unknown tmp[555659] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616660] "expr temp" "maybe param" "maybe type" "temp"
      (616663 'move' call_tmp[616660](373707 call alignment _mt[243] this[65050]))
      (555661 'move' tmp[555659](65126 call _cast string[26] call_tmp[616660]))
      (555666 'move' tmp[555651](555663 '_paramFoldLogical' tmp[555652] tmp[555659]))
    }
    {
      (555671 'move' tmp[555651](555668 '_paramFoldLogical' tmp[555652] "\?"))
    }
    unknown call_tmp[616667] "expr temp" "maybe param" "maybe type" "temp"
    (616670 'move' call_tmp[616667](373677 call idxType _mt[243] this[65050]))
    unknown call_tmp[616672] "expr temp" "maybe param" "maybe type" "temp"
    (616675 'move' call_tmp[616672](65078 call _cast string[26] call_tmp[616667]))
    unknown call_tmp[616679] "expr temp" "maybe param" "maybe type" "temp"
    (616682 'move' call_tmp[616679](373682 call boundedType _mt[243] this[65050]))
    unknown call_tmp[616686] "expr temp" "maybe param" "maybe type" "temp"
    (616689 'move' call_tmp[616686](373687 call stridable _mt[243] this[65050]))
    unknown call_tmp[616693] "expr temp" "maybe param" "maybe type" "temp"
    (616696 'move' call_tmp[616693](373691 call low _mt[243] this[65050]))
    unknown call_tmp[616700] "expr temp" "maybe param" "maybe type" "temp"
    (616703 'move' call_tmp[616700](373695 call high _mt[243] this[65050]))
    unknown call_tmp[616707] "expr temp" "maybe param" "maybe type" "temp"
    (616710 'move' call_tmp[616707](373699 call stride _mt[243] this[65050]))
    (65149 call chpl_debug_writeln msg[65044] "(" call_tmp[616672] "," call_tmp[616679] "," call_tmp[616686] " : " call_tmp[616693] "," call_tmp[616700] "," call_tmp[616707] "," tmp[555651] ")")
    (508938 return ret[508936])
  }
  { scopeless type
    void[4]
  }
  function chpl_build_bounded_range[455048](arg low[455055] :
  (455052 call int(64)[13] 64), arg high[455061] :
  (455059 call int(64)[13] 64)) : _unknown[51]
  {
    unknown ret[508942] "RVV" "temp"
    unknown call_tmp[616712] "expr temp" "maybe param" "maybe type" "temp"
    (616715 'move' call_tmp[616712](455069 call int(64)[13] 64))
    unknown call_tmp[616717] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616720 'move' call_tmp[616717](747671 'new' range[64316](?) call_tmp[616712](_low = low[455055])(_high = high[455061])))
    (508947 'move' ret[508942](508946 'deref' call_tmp[616717]))
    (508944 return ret[508942])
  }
  function chpl_build_bounded_range[455019](arg low[455026] :
  (455023 call int(64)[13] 32), arg high[455032] :
  (455030 call int(64)[13] 32)) : _unknown[51]
  {
    unknown ret[508951] "RVV" "temp"
    unknown call_tmp[616722] "expr temp" "maybe param" "maybe type" "temp"
    (616725 'move' call_tmp[616722](455040 call int(64)[13] 32))
    unknown call_tmp[616727] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616730 'move' call_tmp[616727](747672 'new' range[64316](?) call_tmp[616722](_low = low[455026])(_high = high[455032])))
    (508956 'move' ret[508951](508955 'deref' call_tmp[616727]))
    (508953 return ret[508951])
  }
  function chpl_build_bounded_range[454990](arg low[454997] :
  (454994 call int(64)[13] 16), arg high[455003] :
  (455001 call int(64)[13] 16)) : _unknown[51]
  {
    unknown ret[508960] "RVV" "temp"
    unknown call_tmp[616732] "expr temp" "maybe param" "maybe type" "temp"
    (616735 'move' call_tmp[616732](455011 call int(64)[13] 16))
    unknown call_tmp[616737] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616740 'move' call_tmp[616737](747673 'new' range[64316](?) call_tmp[616732](_low = low[454997])(_high = high[455003])))
    (508965 'move' ret[508960](508964 'deref' call_tmp[616737]))
    (508962 return ret[508960])
  }
  function chpl_build_bounded_range[454961](arg low[454968] :
  (454965 call int(64)[13] 8), arg high[454974] :
  (454972 call int(64)[13] 8)) : _unknown[51]
  {
    unknown ret[508969] "RVV" "temp"
    unknown call_tmp[616742] "expr temp" "maybe param" "maybe type" "temp"
    (616745 'move' call_tmp[616742](454982 call int(64)[13] 8))
    unknown call_tmp[616747] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616750 'move' call_tmp[616747](747674 'new' range[64316](?) call_tmp[616742](_low = low[454968])(_high = high[454974])))
    (508974 'move' ret[508969](508973 'deref' call_tmp[616747]))
    (508971 return ret[508969])
  }
  function chpl_build_bounded_range[455164](arg low[455171] :
  (455168 call uint(64)[115] 64), arg high[455177] :
  (455175 call uint(64)[115] 64)) : _unknown[51]
  {
    unknown ret[508978] "RVV" "temp"
    unknown call_tmp[616752] "expr temp" "maybe param" "maybe type" "temp"
    (616755 'move' call_tmp[616752](455185 call uint(64)[115] 64))
    unknown call_tmp[616757] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616760 'move' call_tmp[616757](747675 'new' range[64316](?) call_tmp[616752](_low = low[455171])(_high = high[455177])))
    (508983 'move' ret[508978](508982 'deref' call_tmp[616757]))
    (508980 return ret[508978])
  }
  function chpl_build_bounded_range[455135](arg low[455142] :
  (455139 call uint(64)[115] 32), arg high[455148] :
  (455146 call uint(64)[115] 32)) : _unknown[51]
  {
    unknown ret[508987] "RVV" "temp"
    unknown call_tmp[616762] "expr temp" "maybe param" "maybe type" "temp"
    (616765 'move' call_tmp[616762](455156 call uint(64)[115] 32))
    unknown call_tmp[616767] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616770 'move' call_tmp[616767](747676 'new' range[64316](?) call_tmp[616762](_low = low[455142])(_high = high[455148])))
    (508992 'move' ret[508987](508991 'deref' call_tmp[616767]))
    (508989 return ret[508987])
  }
  function chpl_build_bounded_range[455106](arg low[455113] :
  (455110 call uint(64)[115] 16), arg high[455119] :
  (455117 call uint(64)[115] 16)) : _unknown[51]
  {
    unknown ret[508996] "RVV" "temp"
    unknown call_tmp[616772] "expr temp" "maybe param" "maybe type" "temp"
    (616775 'move' call_tmp[616772](455127 call uint(64)[115] 16))
    unknown call_tmp[616777] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616780 'move' call_tmp[616777](747677 'new' range[64316](?) call_tmp[616772](_low = low[455113])(_high = high[455119])))
    (509001 'move' ret[508996](509000 'deref' call_tmp[616777]))
    (508998 return ret[508996])
  }
  function chpl_build_bounded_range[455077](arg low[455084] :
  (455081 call uint(64)[115] 8), arg high[455090] :
  (455088 call uint(64)[115] 8)) : _unknown[51]
  {
    unknown ret[509005] "RVV" "temp"
    unknown call_tmp[616782] "expr temp" "maybe param" "maybe type" "temp"
    (616785 'move' call_tmp[616782](455098 call uint(64)[115] 8))
    unknown call_tmp[616787] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616790 'move' call_tmp[616787](747678 'new' range[64316](?) call_tmp[616782](_low = low[455084])(_high = high[455090])))
    (509010 'move' ret[509005](509009 'deref' call_tmp[616787]))
    (509007 return ret[509005])
  }
  function chpl_build_bounded_range[65233](arg low[65230]:enum[187](?), arg high[65236]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509014] "RVV" "temp"
    unknown call_tmp[616792] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616795 'move' call_tmp[616792](65240 'typeof' low[65230]))
    unknown call_tmp[616797] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616800 'move' call_tmp[616797](65242 'typeof' high[65236]))
    unknown call_tmp[616802] "expr temp" "maybe param" "maybe type" "temp"
    (616805 'move' call_tmp[616802](65243 call != call_tmp[616792] call_tmp[616797]))
    unknown call_tmp[616807] "expr temp" "maybe param" "maybe type" "temp"
    (616810 'move' call_tmp[616807](65266 call _cond_test call_tmp[616802]))
    if call_tmp[616807]
    {
      (65264 call compilerError "ranges of enums must use a single enum type")
    }
    unknown call_tmp[616812] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616815 'move' call_tmp[616812](65275 'typeof' low[65230]))
    unknown call_tmp[616817] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616820 'move' call_tmp[616817](747679 'new' range[64316](?) call_tmp[616812](_low = low[65230])(_high = high[65236])))
    (509019 'move' ret[509014](509018 'deref' call_tmp[616817]))
    (509016 return ret[509014])
  }
  function chpl_build_bounded_range[65292](arg low[65289]:bool[10], arg high[65295]:bool[10]) : _unknown[51]
  {
    unknown ret[509023] "RVV" "temp"
    unknown call_tmp[616822] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616825 'move' call_tmp[616822](747680 'new' range[64316](?) bool[10](_low = low[65289])(_high = high[65295])))
    (509028 'move' ret[509023](509027 'deref' call_tmp[616822]))
    (509025 return ret[509023])
  }
  function chpl_build_bounded_range[65316](arg low[65314]:_any[178](?), arg high[65318]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65339 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (509030 return _void[55])
  }
  function chpl_build_low_bounded_range[65350](arg low[65347]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509034] "RVV" "temp"
    unknown call_tmp[616827] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616830 'move' call_tmp[616827](65355 'typeof' low[65347]))
    unknown call_tmp[616832] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616835 'move' call_tmp[616832](747681 'new' range[64316](?) call_tmp[616827] boundedLow[64207](_low = low[65347])))
    (509039 'move' ret[509034](509038 'deref' call_tmp[616832]))
    (509036 return ret[509034])
  }
  function chpl_build_low_bounded_range[65375](arg low[65372]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509043] "RVV" "temp"
    unknown call_tmp[616837] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616840 'move' call_tmp[616837](65380 'typeof' low[65372]))
    unknown call_tmp[616842] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616845 'move' call_tmp[616842](747682 'new' range[64316](?) call_tmp[616837] boundedLow[64207](_low = low[65372])))
    (509048 'move' ret[509043](509047 'deref' call_tmp[616842]))
    (509045 return ret[509043])
  }
  function chpl_build_low_bounded_range[65400](arg low[65397]:bool[10]) : _unknown[51]
  {
    unknown ret[509052] "RVV" "temp"
    unknown call_tmp[616847] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616850 'move' call_tmp[616847](65405 'typeof' low[65397]))
    unknown call_tmp[616852] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616855 'move' call_tmp[616852](747683 'new' range[64316](?) call_tmp[616847] boundedLow[64207](_low = low[65397])))
    (509057 'move' ret[509052](509056 'deref' call_tmp[616852]))
    (509054 return ret[509052])
  }
  function chpl_build_low_bounded_range[65423](arg low[65421]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65444 call compilerError "Bound of 'low..' must be an integer")
    (509059 return _void[55])
  }
  function chpl_build_high_bounded_range[65455](arg high[65452]:integral[199](?)) : _unknown[51]
  {
    unknown ret[509063] "RVV" "temp"
    unknown call_tmp[616857] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616860 'move' call_tmp[616857](65460 'typeof' high[65452]))
    unknown call_tmp[616862] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616865 'move' call_tmp[616862](747684 'new' range[64316](?) call_tmp[616857] boundedHigh[64209](_high = high[65452])))
    (509068 'move' ret[509063](509067 'deref' call_tmp[616862]))
    (509065 return ret[509063])
  }
  function chpl_build_high_bounded_range[65480](arg high[65477]:enum[187](?)) : _unknown[51]
  {
    unknown ret[509072] "RVV" "temp"
    unknown call_tmp[616867] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616870 'move' call_tmp[616867](65485 'typeof' high[65477]))
    unknown call_tmp[616872] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616875 'move' call_tmp[616872](747685 'new' range[64316](?) call_tmp[616867] boundedHigh[64209](_high = high[65477])))
    (509077 'move' ret[509072](509076 'deref' call_tmp[616872]))
    (509074 return ret[509072])
  }
  function chpl_build_high_bounded_range[65505](arg high[65502]:bool[10]) : _unknown[51]
  {
    unknown ret[509081] "RVV" "temp"
    unknown call_tmp[616877] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (616880 'move' call_tmp[616877](65510 'typeof' high[65502]))
    unknown call_tmp[616882] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616885 'move' call_tmp[616882](747686 'new' range[64316](?) call_tmp[616877] boundedHigh[64209](_high = high[65502])))
    (509086 'move' ret[509081](509085 'deref' call_tmp[616882]))
    (509083 return ret[509081])
  }
  function chpl_build_high_bounded_range[65528](arg high[65526]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (65549 call compilerError "Bound of '..high' must be an integer.")
    (509088 return _void[55])
  }
  function chpl_build_unbounded_range[65556]() : _unknown[51]
  {
    unknown ret[509092] "RVV" "temp"
    unknown call_tmp[616887] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616890 'move' call_tmp[616887](747687 'new' range[64316](?) int(64)[13] boundedNone[64211]))
    (509097 'move' ret[509092](509096 'deref' call_tmp[616887]))
    (509094 return ret[509092])
  }
  function chpl_compute_low_param_loop_bound[455253](param arg low[455260] :
  (455257 call int(64)[13] 64), param arg high[455266] :
  (455264 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509101] "RVV" "param" "temp"
    (509106 'move' ret[509101](509105 'deref' low[455260]))
    (509103 return ret[509101])
  }
  function chpl_compute_low_param_loop_bound[455233](param arg low[455240] :
  (455237 call int(64)[13] 32), param arg high[455246] :
  (455244 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509110] "RVV" "param" "temp"
    (509115 'move' ret[509110](509114 'deref' low[455240]))
    (509112 return ret[509110])
  }
  function chpl_compute_low_param_loop_bound[455213](param arg low[455220] :
  (455217 call int(64)[13] 16), param arg high[455226] :
  (455224 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509119] "RVV" "param" "temp"
    (509124 'move' ret[509119](509123 'deref' low[455220]))
    (509121 return ret[509119])
  }
  function chpl_compute_low_param_loop_bound[455193](param arg low[455200] :
  (455197 call int(64)[13] 8), param arg high[455206] :
  (455204 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509128] "RVV" "param" "temp"
    (509133 'move' ret[509128](509132 'deref' low[455200]))
    (509130 return ret[509128])
  }
  function chpl_compute_high_param_loop_bound[455333](param arg low[455340] :
  (455337 call int(64)[13] 64), param arg high[455346] :
  (455344 call int(64)[13] 64)) param : _unknown[51]
  {
    unknown ret[509137] "RVV" "param" "temp"
    (509142 'move' ret[509137](509141 'deref' high[455346]))
    (509139 return ret[509137])
  }
  function chpl_compute_high_param_loop_bound[455313](param arg low[455320] :
  (455317 call int(64)[13] 32), param arg high[455326] :
  (455324 call int(64)[13] 32)) param : _unknown[51]
  {
    unknown ret[509146] "RVV" "param" "temp"
    (509151 'move' ret[509146](509150 'deref' high[455326]))
    (509148 return ret[509146])
  }
  function chpl_compute_high_param_loop_bound[455293](param arg low[455300] :
  (455297 call int(64)[13] 16), param arg high[455306] :
  (455304 call int(64)[13] 16)) param : _unknown[51]
  {
    unknown ret[509155] "RVV" "param" "temp"
    (509160 'move' ret[509155](509159 'deref' high[455306]))
    (509157 return ret[509155])
  }
  function chpl_compute_high_param_loop_bound[455273](param arg low[455280] :
  (455277 call int(64)[13] 8), param arg high[455286] :
  (455284 call int(64)[13] 8)) param : _unknown[51]
  {
    unknown ret[509164] "RVV" "param" "temp"
    (509169 'move' ret[509164](509168 'deref' high[455286]))
    (509166 return ret[509164])
  }
  function chpl_compute_low_param_loop_bound[455413](param arg low[455420] :
  (455417 call uint(64)[115] 64), param arg high[455426] :
  (455424 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509173] "RVV" "param" "temp"
    (509178 'move' ret[509173](509177 'deref' low[455420]))
    (509175 return ret[509173])
  }
  function chpl_compute_low_param_loop_bound[455393](param arg low[455400] :
  (455397 call uint(64)[115] 32), param arg high[455406] :
  (455404 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509182] "RVV" "param" "temp"
    (509187 'move' ret[509182](509186 'deref' low[455400]))
    (509184 return ret[509182])
  }
  function chpl_compute_low_param_loop_bound[455373](param arg low[455380] :
  (455377 call uint(64)[115] 16), param arg high[455386] :
  (455384 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509191] "RVV" "param" "temp"
    (509196 'move' ret[509191](509195 'deref' low[455380]))
    (509193 return ret[509191])
  }
  function chpl_compute_low_param_loop_bound[455353](param arg low[455360] :
  (455357 call uint(64)[115] 8), param arg high[455366] :
  (455364 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509200] "RVV" "param" "temp"
    (509205 'move' ret[509200](509204 'deref' low[455360]))
    (509202 return ret[509200])
  }
  function chpl_compute_high_param_loop_bound[455493](param arg low[455500] :
  (455497 call uint(64)[115] 64), param arg high[455506] :
  (455504 call uint(64)[115] 64)) param : _unknown[51]
  {
    unknown ret[509209] "RVV" "param" "temp"
    (509214 'move' ret[509209](509213 'deref' high[455506]))
    (509211 return ret[509209])
  }
  function chpl_compute_high_param_loop_bound[455473](param arg low[455480] :
  (455477 call uint(64)[115] 32), param arg high[455486] :
  (455484 call uint(64)[115] 32)) param : _unknown[51]
  {
    unknown ret[509218] "RVV" "param" "temp"
    (509223 'move' ret[509218](509222 'deref' high[455486]))
    (509220 return ret[509218])
  }
  function chpl_compute_high_param_loop_bound[455453](param arg low[455460] :
  (455457 call uint(64)[115] 16), param arg high[455466] :
  (455464 call uint(64)[115] 16)) param : _unknown[51]
  {
    unknown ret[509227] "RVV" "param" "temp"
    (509232 'move' ret[509227](509231 'deref' high[455466]))
    (509229 return ret[509227])
  }
  function chpl_compute_high_param_loop_bound[455433](param arg low[455440] :
  (455437 call uint(64)[115] 8), param arg high[455446] :
  (455444 call uint(64)[115] 8)) param : _unknown[51]
  {
    unknown ret[509236] "RVV" "param" "temp"
    (509241 'move' ret[509236](509240 'deref' high[455446]))
    (509238 return ret[509236])
  }
  function chpl_compute_low_param_loop_bound[65680](param arg low[65677]:bool[10], param arg high[65683]:bool[10]) param : _unknown[51]
  {
    unknown ret[509245] "RVV" "param" "temp"
    (509250 'move' ret[509245](509249 'deref' low[65677]))
    (509247 return ret[509245])
  }
  function chpl_compute_high_param_loop_bound[65698](param arg low[65695]:bool[10], param arg high[65701]:bool[10]) param : _unknown[51]
  {
    unknown ret[509254] "RVV" "param" "temp"
    (509259 'move' ret[509254](509258 'deref' high[65701]))
    (509256 return ret[509254])
  }
  function chpl_compute_low_param_loop_bound[65714](param arg low[65712]:_any[178](?), param arg high[65716]:_any[178](?)) param : _unknown[51] "last resort" "no return value for void"
  {
    (65739 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509261 return _void[55])
  }
  function chpl_compute_low_param_loop_bound[65748](arg low[65746]:_any[178](?), arg high[65750]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65771 call compilerError "param for-loops must be defined over a bounded param range")
    (509263 return _void[55])
  }
  function chpl_compute_count_param_loop[65782](param arg count[65779]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509267] "RVV" "param" "temp"
    (509272 'move' ret[509267](509271 'deref' count[65779]))
    (509269 return ret[509267])
  }
  function chpl_compute_count_param_loop[65794](arg count[65792]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65817 call compilerError "in a param for-loop, the count operator requires a param integral value")
    (509274 return _void[55])
  }
  function chpl_low_bound_count_for_param_loop[65828](param arg high[65825]:integral[199](?), param arg count[65831]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509278] "RVV" "param" "temp"
    unknown call_tmp[616892] "expr temp" "maybe param" "maybe type" "temp"
    (616895 'move' call_tmp[616892](65836 call > count[65831] 0))
    unknown call_tmp[616897] "expr temp" "maybe param" "maybe type" "temp"
    (616900 'move' call_tmp[616897](65885 call _cond_test call_tmp[616892]))
    if call_tmp[616897]
    {
      (65857 call compilerError "count operators with positive count require the range to have a low bound")
    }
    {
      unknown call_tmp[616902] "expr temp" "maybe param" "maybe type" "temp"
      (616905 'move' call_tmp[616902](65862 call == count[65831] 0))
      unknown call_tmp[616907] "expr temp" "maybe param" "maybe type" "temp"
      (616910 'move' call_tmp[616907](65881 call _cond_test call_tmp[616902]))
      if call_tmp[616907]
      {
        unknown call_tmp[616912] "expr temp" "maybe param" "maybe type" "temp"
        (616915 'move' call_tmp[616912](65866 call + high[65825] 1))
        (509283 'move' ret[509278](509282 'deref' call_tmp[616912]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509276] _end_chpl_low_bound_count_for_param_loop[509276]
      }
      {
        unknown call_tmp[616917] "expr temp" "maybe param" "maybe type" "temp"
        (616920 'move' call_tmp[616917](65873 call + high[65825] count[65831]))
        unknown call_tmp[616922] "expr temp" "maybe param" "maybe type" "temp"
        (616925 'move' call_tmp[616922](65876 call + call_tmp[616917] 1))
        (509288 'move' ret[509278](509287 'deref' call_tmp[616922]))
        gotoReturn _end_chpl_low_bound_count_for_param_loop[509276] _end_chpl_low_bound_count_for_param_loop[509276]
      }
    }
    label _end_chpl_low_bound_count_for_param_loop[509276]
    (509280 return ret[509278])
  }
  function chpl_low_bound_count_for_param_loop[65897](arg high[65895]:_any[178](?), arg count[65899]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65904 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509292 return _void[55])
  }
  function chpl_high_bound_count_for_param_loop[65915](param arg low[65912]:integral[199](?), param arg count[65918]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509296] "RVV" "param" "temp"
    unknown call_tmp[616927] "expr temp" "maybe param" "maybe type" "temp"
    (616930 'move' call_tmp[616927](65923 call < count[65918] 0))
    unknown call_tmp[616932] "expr temp" "maybe param" "maybe type" "temp"
    (616935 'move' call_tmp[616932](65974 call _cond_test call_tmp[616927]))
    if call_tmp[616932]
    {
      (65946 call compilerError "count operators with negative count require the range to have a high bound")
    }
    {
      unknown call_tmp[616937] "expr temp" "maybe param" "maybe type" "temp"
      (616940 'move' call_tmp[616937](65951 call == count[65918] 0))
      unknown call_tmp[616942] "expr temp" "maybe param" "maybe type" "temp"
      (616945 'move' call_tmp[616942](65970 call _cond_test call_tmp[616937]))
      if call_tmp[616942]
      {
        unknown call_tmp[616947] "expr temp" "maybe param" "maybe type" "temp"
        (616950 'move' call_tmp[616947](65955 call - low[65912] 1))
        (509301 'move' ret[509296](509300 'deref' call_tmp[616947]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509294] _end_chpl_high_bound_count_for_param_loop[509294]
      }
      {
        unknown call_tmp[616952] "expr temp" "maybe param" "maybe type" "temp"
        (616955 'move' call_tmp[616952](65962 call + low[65912] count[65918]))
        unknown call_tmp[616957] "expr temp" "maybe param" "maybe type" "temp"
        (616960 'move' call_tmp[616957](65965 call - call_tmp[616952] 1))
        (509306 'move' ret[509296](509305 'deref' call_tmp[616957]))
        gotoReturn _end_chpl_high_bound_count_for_param_loop[509294] _end_chpl_high_bound_count_for_param_loop[509294]
      }
    }
    label _end_chpl_high_bound_count_for_param_loop[509294]
    (509298 return ret[509296])
  }
  function chpl_high_bound_count_for_param_loop[65986](arg low[65984]:_any[178](?), arg count[65988]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (65993 call compilerError "Range bounds must be integers of compatible types in param for-loops")
    (509310 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_low[66004](param arg low[66001]:integral[199](?), param arg high[66007]:integral[199](?), param arg count[66011]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509314] "RVV" "param" "temp"
    unknown abs_count[66025] "dead at end of block" "param"
    unknown tmp[555678] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555679] "maybe param" "temp"
    unknown call_tmp[616962] "expr temp" "maybe param" "maybe type" "temp"
    (616965 'move' call_tmp[616962](66016 call < count[66011] 0))
    (555684 'move' tmp[555679](555682 call _cond_test call_tmp[616962]))
    if tmp[555679]
    {
      unknown tmp[555686] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555688 'move' tmp[555686](66019 call - count[66011]))
      (555693 'move' tmp[555678](555690 '_paramFoldLogical' tmp[555679] tmp[555686]))
    }
    {
      (555698 'move' tmp[555678](555695 '_paramFoldLogical' tmp[555679] count[66011]))
    }
    (540927 'init var' abs_count[66025] tmp[555678])
    (66028 'end of statement')
    unknown call_tmp[616967] "expr temp" "maybe param" "maybe type" "temp"
    (616970 'move' call_tmp[616967](66032 call - high[66007] low[66001]))
    unknown call_tmp[616972] "maybe param" "maybe type" "temp"
    (616975 'move' call_tmp[616972](66035 call + call_tmp[616967] 1))
    unknown size[66037] "dead at end of block" "param"
    (540929 'init var' size[66037] call_tmp[616972])
    (66040 'end of statement')
    unknown call_tmp[616977] "expr temp" "maybe param" "maybe type" "temp"
    (616980 'move' call_tmp[616977](66043 call < size[66037] abs_count[66025]))
    unknown call_tmp[616982] "expr temp" "maybe param" "maybe type" "temp"
    (616985 'move' call_tmp[616982](66130 call _cond_test call_tmp[616977]))
    if call_tmp[616982]
    {
      unknown call_tmp[616987] "expr temp" "maybe param" "maybe type" "temp"
      (616990 'move' call_tmp[616987](66066 call _cast string[26] abs_count[66025]))
      unknown call_tmp[616992] "expr temp" "maybe param" "maybe type" "temp"
      (616995 'move' call_tmp[616992](66087 call _cast string[26] size[66037]))
      (66089 call compilerError "Count of " call_tmp[616987] " is too small for range of size " call_tmp[616992])
    }
    {
      unknown call_tmp[616997] "expr temp" "maybe param" "maybe type" "temp"
      (617000 'move' call_tmp[616997](66094 call == count[66011] 0))
      unknown call_tmp[617002] "expr temp" "maybe param" "maybe type" "temp"
      (617005 'move' call_tmp[617002](66125 call _cond_test call_tmp[616997]))
      if call_tmp[617002]
      {
        unknown call_tmp[617007] "expr temp" "maybe param" "maybe type" "temp"
        (617010 'move' call_tmp[617007](66098 call + high[66007] 1))
        (509319 'move' ret[509314](509318 'deref' call_tmp[617007]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_low[509312] _end_chpl_bounded_count_for_param_loop_low[509312]
      }
      {
        unknown call_tmp[617012] "expr temp" "maybe param" "maybe type" "temp"
        (617015 'move' call_tmp[617012](66105 call < count[66011] 0))
        unknown call_tmp[617017] "expr temp" "maybe param" "maybe type" "temp"
        (617020 'move' call_tmp[617017](66121 call _cond_test call_tmp[617012]))
        if call_tmp[617017]
        {
          unknown call_tmp[617022] "expr temp" "maybe param" "maybe type" "temp"
          (617025 'move' call_tmp[617022](66109 call + high[66007] count[66011]))
          unknown call_tmp[617027] "expr temp" "maybe param" "maybe type" "temp"
          (617030 'move' call_tmp[617027](66112 call + call_tmp[617022] 1))
          (509324 'move' ret[509314](509323 'deref' call_tmp[617027]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509312] _end_chpl_bounded_count_for_param_loop_low[509312]
        }
        {
          (509329 'move' ret[509314](509328 'deref' low[66001]))
          gotoReturn _end_chpl_bounded_count_for_param_loop_low[509312] _end_chpl_bounded_count_for_param_loop_low[509312]
        }
      }
    }
    label _end_chpl_bounded_count_for_param_loop_low[509312]
    (509316 return ret[509314])
  }
  function chpl_bounded_count_for_param_loop_low[66141](arg low[66139]:_any[178](?), arg high[66143]:_any[178](?), arg count[66145]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66168 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509333 return _void[55])
  }
  function chpl_bounded_count_for_param_loop_high[66179](param arg low[66176]:integral[199](?), param arg high[66182]:integral[199](?), param arg count[66186]:integral[199](?)) param : _unknown[51]
  {
    unknown ret[509337] "RVV" "param" "temp"
    unknown call_tmp[617032] "expr temp" "maybe param" "maybe type" "temp"
    (617035 'move' call_tmp[617032](66191 call == count[66186] 0))
    unknown call_tmp[617037] "expr temp" "maybe param" "maybe type" "temp"
    (617040 'move' call_tmp[617037](66222 call _cond_test call_tmp[617032]))
    if call_tmp[617037]
    {
      unknown call_tmp[617042] "expr temp" "maybe param" "maybe type" "temp"
      (617045 'move' call_tmp[617042](66195 call - low[66176] 1))
      (509342 'move' ret[509337](509341 'deref' call_tmp[617042]))
      gotoReturn _end_chpl_bounded_count_for_param_loop_high[509335] _end_chpl_bounded_count_for_param_loop_high[509335]
    }
    {
      unknown call_tmp[617047] "expr temp" "maybe param" "maybe type" "temp"
      (617050 'move' call_tmp[617047](66202 call < count[66186] 0))
      unknown call_tmp[617052] "expr temp" "maybe param" "maybe type" "temp"
      (617055 'move' call_tmp[617052](66218 call _cond_test call_tmp[617047]))
      if call_tmp[617052]
      {
        (509347 'move' ret[509337](509346 'deref' high[66182]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509335] _end_chpl_bounded_count_for_param_loop_high[509335]
      }
      {
        unknown call_tmp[617057] "expr temp" "maybe param" "maybe type" "temp"
        (617060 'move' call_tmp[617057](66210 call + low[66176] count[66186]))
        unknown call_tmp[617062] "expr temp" "maybe param" "maybe type" "temp"
        (617065 'move' call_tmp[617062](66213 call - call_tmp[617057] 1))
        (509352 'move' ret[509337](509351 'deref' call_tmp[617062]))
        gotoReturn _end_chpl_bounded_count_for_param_loop_high[509335] _end_chpl_bounded_count_for_param_loop_high[509335]
      }
    }
    label _end_chpl_bounded_count_for_param_loop_high[509335]
    (509339 return ret[509337])
  }
  function chpl_bounded_count_for_param_loop_high[66234](arg low[66232]:_any[178](?), arg high[66236]:_any[178](?), arg count[66238]:_any[178](?)) : _unknown[51] "last resort" "no return value for void"
  {
    (66243 call compilerError "Range bounds and counts must be integers of compatible types in param for-loops")
    (509356 return _void[55])
  }
  function isRangeType[66252](arg t[66250]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[509378] "RVV" "param" "temp"
    function isRangeHelp[66263](arg t[66260]:range[64316](?)) param : _unknown[51]
    {
      unknown ret[509360] "RVV" "param" "temp"
      (509365 'move' ret[509360](509364 'deref' 1))
      (509362 return ret[509360])
    }
    function isRangeHelp[66276](arg t[66274]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[509369] "RVV" "param" "temp"
      (509374 'move' ret[509369](509373 'deref' 0))
      (509371 return ret[509369])
    }
    unknown call_tmp[617067] "expr temp" "maybe param" "maybe type" "temp"
    (617070 'move' call_tmp[617067](66287 call isRangeHelp t[66250]))
    (509383 'move' ret[509378](509382 'deref' call_tmp[617067]))
    (509380 return ret[509378])
  }
  function isRangeValue[66301](arg r[66298]:range[64316](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509387] "RVV" "param" "temp"
    (509392 'move' ret[509387](509391 'deref' 1))
    (509389 return ret[509387])
  }
  function isRangeValue[66313](arg r[66311]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509396] "RVV" "param" "temp"
    (509401 'move' ret[509396](509400 'deref' 0))
    (509398 return ret[509396])
  }
  function isBoundedRange[66325](arg r[66323]:_any[178](?)) param : _unknown[51] "no doc"
  {
    unknown ret[509405] "RVV" "param" "temp"
    (509410 'move' ret[509405](509409 'deref' 0))
    (509407 return ret[509405])
  }
  function isBoundedRange[66342](arg r[66339]:range[64316](?)) param : _unknown[51]
  {
    unknown ret[509414] "RVV" "param" "temp"
    unknown call_tmp[617074] "expr temp" "maybe param" "maybe type" "temp"
    (617077 'move' call_tmp[617074](66346 call boundedType _mt[243] r[66339]))
    unknown call_tmp[617079] "expr temp" "maybe param" "maybe type" "temp"
    (617082 'move' call_tmp[617079](66350 call isBoundedRange call_tmp[617074]))
    (509419 'move' ret[509414](509418 'deref' call_tmp[617079]))
    (509416 return ret[509414])
  }
  function isBoundedRange[66362](param arg B[66359]:BoundedRangeType[64213]) param : _unknown[51] "no doc"
  {
    unknown ret[509423] "RVV" "param" "temp"
    unknown call_tmp[617084] "expr temp" "maybe param" "maybe type" "temp"
    (617087 'move' call_tmp[617084](66369 call == B[66359] bounded[64205]))
    (509428 'move' ret[509423](509427 'deref' call_tmp[617084]))
    (509425 return ret[509423])
  }
  function range[64316](?).isBounded[66379](arg _mt[66384]:_MT[238], arg this[66381]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509432] "RVV" "param" "temp"
    unknown call_tmp[617091] "expr temp" "maybe param" "maybe type" "temp"
    (617094 'move' call_tmp[617091](373811 call boundedType _mt[243] this[66381]))
    unknown call_tmp[617096] "expr temp" "maybe param" "maybe type" "temp"
    (617099 'move' call_tmp[617096](66391 call == call_tmp[617091] bounded[64205]))
    (509437 'move' ret[509432](509436 'deref' call_tmp[617096]))
    (509434 return ret[509432])
  }
  function range[64316](?).hasLowBound[66401](arg _mt[66406]:_MT[238], arg this[66403]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509441] "RVV" "param" "temp"
    unknown tmp[419167] "maybe param" "temp"
    unknown call_tmp[617103] "expr temp" "maybe param" "maybe type" "temp"
    (617106 'move' call_tmp[617103](373816 call boundedType _mt[243] this[66403]))
    (419178 'move' tmp[419167](66413 call == call_tmp[617103] bounded[64205]))
    unknown call_tmp[617108] "expr temp" "maybe param" "maybe type" "temp"
    (617111 'move' call_tmp[617108](419180 call _cond_invalid tmp[419167]))
    if call_tmp[617108]
    {
      (419183 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555705] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555706] "maybe param" "temp"
    unknown call_tmp[617113] "expr temp" "maybe param" "maybe type" "temp"
    (617116 'move' call_tmp[617113](419168 call isTrue tmp[419167]))
    (555711 'move' tmp[555706](555709 call _cond_test call_tmp[617113]))
    if tmp[555706]
    {
      (555716 'move' tmp[555705](555713 '_paramFoldLogical' tmp[555706] 1))
    }
    {
      unknown tmp[555718] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617120] "expr temp" "maybe param" "maybe type" "temp"
      (617123 'move' call_tmp[617120](373821 call boundedType _mt[243] this[66403]))
      unknown call_tmp[617125] "expr temp" "maybe param" "maybe type" "temp"
      (617128 'move' call_tmp[617125](66420 call == call_tmp[617120] boundedLow[64207]))
      (555720 'move' tmp[555718](419172 call isTrue call_tmp[617125]))
      (555725 'move' tmp[555705](555722 '_paramFoldLogical' tmp[555706] tmp[555718]))
    }
    (509446 'move' ret[509441](509445 'deref' tmp[555705]))
    (509443 return ret[509441])
  }
  function range[64316](?).hasHighBound[66432](arg _mt[66437]:_MT[238], arg this[66434]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509450] "RVV" "param" "temp"
    unknown tmp[419188] "maybe param" "temp"
    unknown call_tmp[617132] "expr temp" "maybe param" "maybe type" "temp"
    (617135 'move' call_tmp[617132](373826 call boundedType _mt[243] this[66434]))
    (419199 'move' tmp[419188](66444 call == call_tmp[617132] bounded[64205]))
    unknown call_tmp[617137] "expr temp" "maybe param" "maybe type" "temp"
    (617140 'move' call_tmp[617137](419201 call _cond_invalid tmp[419188]))
    if call_tmp[617137]
    {
      (419204 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555732] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555733] "maybe param" "temp"
    unknown call_tmp[617142] "expr temp" "maybe param" "maybe type" "temp"
    (617145 'move' call_tmp[617142](419189 call isTrue tmp[419188]))
    (555738 'move' tmp[555733](555736 call _cond_test call_tmp[617142]))
    if tmp[555733]
    {
      (555743 'move' tmp[555732](555740 '_paramFoldLogical' tmp[555733] 1))
    }
    {
      unknown tmp[555745] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617149] "expr temp" "maybe param" "maybe type" "temp"
      (617152 'move' call_tmp[617149](373831 call boundedType _mt[243] this[66434]))
      unknown call_tmp[617154] "expr temp" "maybe param" "maybe type" "temp"
      (617157 'move' call_tmp[617154](66451 call == call_tmp[617149] boundedHigh[64209]))
      (555747 'move' tmp[555745](419193 call isTrue call_tmp[617154]))
      (555752 'move' tmp[555732](555749 '_paramFoldLogical' tmp[555733] tmp[555745]))
    }
    (509455 'move' ret[509450](509454 'deref' tmp[555732]))
    (509452 return ret[509450])
  }
  function range[64316](?).stride[66463](arg _mt[66468]:_MT[238], arg this[66465]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509459] "RVV" "temp"
    unknown call_tmp[617161] "expr temp" "maybe param" "maybe type" "temp"
    (617164 'move' call_tmp[617161](373841 call _stride _mt[243] this[66465]))
    (509464 'move' ret[509459](509463 'deref' call_tmp[617161]))
    (509461 return ret[509459])
  }
  where {
    (373836 call stridable _mt[243] this[66465])
  }
  function range[64316](?).stride[66481](arg _mt[66486]:_MT[238], arg this[66483]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509468] "RVV" "param" "temp"
    unknown call_tmp[617170] "expr temp" "maybe param" "maybe type" "temp"
    (617173 'move' call_tmp[617170](373850 call strType _mt[243] this[66483]))
    unknown call_tmp[617175] "expr temp" "maybe param" "maybe type" "temp"
    (617178 'move' call_tmp[617175](66493 call _cast call_tmp[617170] 1))
    (509473 'move' ret[509468](509472 'deref' call_tmp[617175]))
    (509470 return ret[509468])
  }
  where {
    unknown call_tmp[617182] "expr temp" "maybe param" "maybe type" "temp"
    (617185 'move' call_tmp[617182](373846 call stridable _mt[243] this[66483]))
    (66489 call ! call_tmp[617182])
  }
  function range[64316](?).alignment[66504](arg _mt[66509]:_MT[238], arg this[66506]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509477] "RVV" "temp"
    unknown call_tmp[617191] "expr temp" "maybe param" "maybe type" "temp"
    (617194 'move' call_tmp[617191](373864 call _alignment _mt[243] this[66506]))
    unknown call_tmp[617196] "expr temp" "maybe param" "maybe type" "temp"
    (617199 'move' call_tmp[617196](66515 call(373859 call (partial) chpl_intToIdx _mt[243] this[66506]) call_tmp[617191]))
    (509482 'move' ret[509477](509481 'deref' call_tmp[617196]))
    (509479 return ret[509477])
  }
  where {
    (373855 call stridable _mt[243] this[66506])
  }
  function range[64316](?).alignment[66525](arg _mt[66530]:_MT[238], arg this[66527]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509486] "RVV" "temp"
    unknown call_tmp[617205] "expr temp" "maybe param" "maybe type" "temp"
    (617208 'move' call_tmp[617205](373877 call low _mt[243] this[66527]))
    (509491 'move' ret[509486](509490 'deref' call_tmp[617205]))
    (509488 return ret[509486])
  }
  where {
    unknown tmp[419209] "maybe param" "temp"
    unknown call_tmp[617212] "expr temp" "maybe param" "maybe type" "temp"
    (617215 'move' call_tmp[617212](373869 call stridable _mt[243] this[66527]))
    (419220 'move' tmp[419209](66533 call ! call_tmp[617212]))
    unknown call_tmp[617217] "expr temp" "maybe param" "maybe type" "temp"
    (617220 'move' call_tmp[617217](419222 call _cond_invalid tmp[419209]))
    if call_tmp[617217]
    {
      (419225 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555759] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555760] "maybe param" "temp"
    unknown call_tmp[617222] "expr temp" "maybe param" "maybe type" "temp"
    (617225 'move' call_tmp[617222](419210 call isTrue tmp[419209]))
    (555765 'move' tmp[555760](555763 call _cond_test call_tmp[617222]))
    if tmp[555760]
    {
      unknown tmp[555767] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617229] "expr temp" "maybe param" "maybe type" "temp"
      (617232 'move' call_tmp[617229](66537 call(373873 call (partial) hasLowBound _mt[243] this[66527])))
      (555769 'move' tmp[555767](419213 call isTrue call_tmp[617229]))
      (555774 'move' tmp[555759](555771 '_paramFoldLogical' tmp[555760] tmp[555767]))
    }
    {
      (555779 'move' tmp[555759](555776 '_paramFoldLogical' tmp[555760] 0))
    }
    (748135 call chpl_statementLevelSymbol tmp[555759])
  }
  function range[64316](?).alignment[66550](arg _mt[66555]:_MT[238], arg this[66552]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509495] "RVV" "temp"
    unknown call_tmp[617236] "expr temp" "maybe param" "maybe type" "temp"
    (617239 'move' call_tmp[617236](66560 call(373881 call (partial) chpl_intToIdx _mt[243] this[66552]) 0))
    (509500 'move' ret[509495](509499 'deref' call_tmp[617236]))
    (509497 return ret[509495])
  }
  function range[64316](?).aligned[66569](arg _mt[66574]:_MT[238], arg this[66571]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509504] "RVV" "temp"
    unknown call_tmp[617243] "expr temp" "maybe param" "maybe type" "temp"
    (617246 'move' call_tmp[617243](373891 call _aligned _mt[243] this[66571]))
    (509509 'move' ret[509504](509508 'deref' call_tmp[617243]))
    (509506 return ret[509504])
  }
  where {
    (373886 call stridable _mt[243] this[66571])
  }
  function range[64316](?).aligned[66587](arg _mt[66592]:_MT[238], arg this[66589]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509513] "RVV" "param" "temp"
    (509518 'move' ret[509513](509517 'deref' 1))
    (509515 return ret[509513])
  }
  where {
    unknown tmp[419230] "maybe param" "temp"
    unknown call_tmp[617252] "expr temp" "maybe param" "maybe type" "temp"
    (617255 'move' call_tmp[617252](373896 call stridable _mt[243] this[66589]))
    (419241 'move' tmp[419230](66595 call ! call_tmp[617252]))
    unknown call_tmp[617257] "expr temp" "maybe param" "maybe type" "temp"
    (617260 'move' call_tmp[617257](419243 call _cond_invalid tmp[419230]))
    if call_tmp[617257]
    {
      (419246 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555813] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555814] "maybe param" "temp"
    unknown call_tmp[617262] "expr temp" "maybe param" "maybe type" "temp"
    (617265 'move' call_tmp[617262](419231 call isTrue tmp[419230]))
    (555819 'move' tmp[555814](555817 call _cond_test call_tmp[617262]))
    if tmp[555814]
    {
      unknown tmp[419251] "maybe param" "temp"
      unknown call_tmp[617269] "expr temp" "maybe param" "maybe type" "temp"
      (617272 'move' call_tmp[617269](373901 call boundedType _mt[243] this[66589]))
      (419262 'move' tmp[419251](66602 call == call_tmp[617269] bounded[64205]))
      unknown call_tmp[617274] "expr temp" "maybe param" "maybe type" "temp"
      (617277 'move' call_tmp[617274](419264 call _cond_invalid tmp[419251]))
      if call_tmp[617274]
      {
        (419267 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[555786] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555787] "maybe param" "temp"
      unknown call_tmp[617279] "expr temp" "maybe param" "maybe type" "temp"
      (617282 'move' call_tmp[617279](419252 call isTrue tmp[419251]))
      (555792 'move' tmp[555787](555790 call _cond_test call_tmp[617279]))
      if tmp[555787]
      {
        (555797 'move' tmp[555786](555794 '_paramFoldLogical' tmp[555787] 1))
      }
      {
        unknown tmp[555799] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617286] "expr temp" "maybe param" "maybe type" "temp"
        (617289 'move' call_tmp[617286](373906 call boundedType _mt[243] this[66589]))
        unknown call_tmp[617291] "expr temp" "maybe param" "maybe type" "temp"
        (617294 'move' call_tmp[617291](66609 call == call_tmp[617286] boundedLow[64207]))
        (555801 'move' tmp[555799](419256 call isTrue call_tmp[617291]))
        (555806 'move' tmp[555786](555803 '_paramFoldLogical' tmp[555787] tmp[555799]))
      }
      unknown tmp[555821] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (555823 'move' tmp[555821](419234 call isTrue tmp[555786]))
      (555828 'move' tmp[555813](555825 '_paramFoldLogical' tmp[555814] tmp[555821]))
    }
    {
      (555833 'move' tmp[555813](555830 '_paramFoldLogical' tmp[555814] 0))
    }
    (748137 call chpl_statementLevelSymbol tmp[555813])
  }
  function range[64316](?).aligned[66625](arg _mt[66630]:_MT[238], arg this[66627]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method" "no doc" "no parens"
  {
    unknown ret[509522] "RVV" "param" "temp"
    (509527 'move' ret[509522](509526 'deref' 0))
    (509524 return ret[509522])
  }
  function range[64316](?).first[66641](arg _mt[66646]:_MT[238], arg this[66643]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509531] "RVV" "temp"
    unknown call_tmp[617300] "expr temp" "maybe param" "maybe type" "temp"
    (617303 'move' call_tmp[617300](66652 call firstAsInt _mt[243] this[66643]))
    unknown call_tmp[617305] "expr temp" "maybe param" "maybe type" "temp"
    (617308 'move' call_tmp[617305](66656 call(373910 call (partial) chpl_intToIdx _mt[243] this[66643]) call_tmp[617300]))
    (509536 'move' ret[509531](509535 'deref' call_tmp[617305]))
    (509533 return ret[509531])
  }
  function range[64316](?).firstAsInt[66665](arg _mt[66670]:_MT[238], arg this[66667]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509540] "RVV" "temp"
    unknown call_tmp[617312] "expr temp" "maybe param" "maybe type" "temp"
    (617315 'move' call_tmp[617312](373915 call stridable _mt[243] this[66667]))
    unknown call_tmp[617317] "expr temp" "maybe param" "maybe type" "temp"
    (617320 'move' call_tmp[617317](66673 call ! call_tmp[617312]))
    unknown call_tmp[617322] "expr temp" "maybe param" "maybe type" "temp"
    (617325 'move' call_tmp[617322](66699 call _cond_test call_tmp[617317]))
    if call_tmp[617322]
    {
      unknown call_tmp[617329] "expr temp" "maybe param" "maybe type" "temp"
      (617332 'move' call_tmp[617329](373920 call _low _mt[243] this[66667]))
      (509545 'move' ret[509540](509544 'deref' call_tmp[617329]))
      gotoReturn _end_firstAsInt[509538] _end_firstAsInt[509538]
    }
    {
      unknown tmp[555840] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555841] "maybe param" "temp"
      unknown call_tmp[617336] "expr temp" "maybe param" "maybe type" "temp"
      (617339 'move' call_tmp[617336](373925 call _stride _mt[243] this[66667]))
      unknown call_tmp[617341] "expr temp" "maybe param" "maybe type" "temp"
      (617344 'move' call_tmp[617341](66680 call > call_tmp[617336] 0))
      (555846 'move' tmp[555841](555844 call _cond_test call_tmp[617341]))
      if tmp[555841]
      {
        unknown tmp[555848] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555850 'move' tmp[555848](66685 call alignedLowAsInt _mt[243] this[66667]))
        (555855 'move' tmp[555840](555852 '_paramFoldLogical' tmp[555841] tmp[555848]))
      }
      {
        unknown tmp[555857] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555859 'move' tmp[555857](66691 call alignedHighAsInt _mt[243] this[66667]))
        (555864 'move' tmp[555840](555861 '_paramFoldLogical' tmp[555841] tmp[555857]))
      }
      (509550 'move' ret[509540](509549 'deref' tmp[555840]))
      gotoReturn _end_firstAsInt[509538] _end_firstAsInt[509538]
    }
    label _end_firstAsInt[509538]
    (509542 return ret[509540])
  }
  function range[64316](?).last[66711](arg _mt[66716]:_MT[238], arg this[66713]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509556] "RVV" "temp"
    unknown call_tmp[617354] "expr temp" "maybe param" "maybe type" "temp"
    (617357 'move' call_tmp[617354](66722 call lastAsInt _mt[243] this[66713]))
    unknown call_tmp[617359] "expr temp" "maybe param" "maybe type" "temp"
    (617362 'move' call_tmp[617359](66726 call(373929 call (partial) chpl_intToIdx _mt[243] this[66713]) call_tmp[617354]))
    (509561 'move' ret[509556](509560 'deref' call_tmp[617359]))
    (509558 return ret[509556])
  }
  function range[64316](?).lastAsInt[66735](arg _mt[66740]:_MT[238], arg this[66737]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509565] "RVV" "temp"
    unknown call_tmp[617366] "expr temp" "maybe param" "maybe type" "temp"
    (617369 'move' call_tmp[617366](373934 call stridable _mt[243] this[66737]))
    unknown call_tmp[617371] "expr temp" "maybe param" "maybe type" "temp"
    (617374 'move' call_tmp[617371](66743 call ! call_tmp[617366]))
    unknown call_tmp[617376] "expr temp" "maybe param" "maybe type" "temp"
    (617379 'move' call_tmp[617376](66765 call _cond_test call_tmp[617371]))
    if call_tmp[617376]
    {
      unknown call_tmp[617383] "expr temp" "maybe param" "maybe type" "temp"
      (617386 'move' call_tmp[617383](373939 call _high _mt[243] this[66737]))
      (509570 'move' ret[509565](509569 'deref' call_tmp[617383]))
      gotoReturn _end_lastAsInt[509563] _end_lastAsInt[509563]
    }
    {
      unknown tmp[555871] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555872] "maybe param" "temp"
      unknown call_tmp[617390] "expr temp" "maybe param" "maybe type" "temp"
      (617393 'move' call_tmp[617390](373943 call stride _mt[243] this[66737]))
      unknown call_tmp[617395] "expr temp" "maybe param" "maybe type" "temp"
      (617398 'move' call_tmp[617395](66750 call > call_tmp[617390] 0))
      (555877 'move' tmp[555872](555875 call _cond_test call_tmp[617395]))
      if tmp[555872]
      {
        unknown tmp[555879] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555881 'move' tmp[555879](66753 call alignedHighAsInt _mt[243] this[66737]))
        (555886 'move' tmp[555871](555883 '_paramFoldLogical' tmp[555872] tmp[555879]))
      }
      {
        unknown tmp[555888] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (555890 'move' tmp[555888](66757 call alignedLowAsInt _mt[243] this[66737]))
        (555895 'move' tmp[555871](555892 '_paramFoldLogical' tmp[555872] tmp[555888]))
      }
      (509575 'move' ret[509565](509574 'deref' tmp[555871]))
      gotoReturn _end_lastAsInt[509563] _end_lastAsInt[509563]
    }
    label _end_lastAsInt[509563]
    (509567 return ret[509565])
  }
  function range[64316](?).low[66777](arg _mt[66782]:_MT[238], arg this[66779]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509581] "RVV" "temp"
    unknown call_tmp[617408] "expr temp" "maybe param" "maybe type" "temp"
    (617411 'move' call_tmp[617408](373952 call _low _mt[243] this[66779]))
    unknown call_tmp[617413] "expr temp" "maybe param" "maybe type" "temp"
    (617416 'move' call_tmp[617413](66787 call(373947 call (partial) chpl_intToIdx _mt[243] this[66779]) call_tmp[617408]))
    (509586 'move' ret[509581](509585 'deref' call_tmp[617413]))
    (509583 return ret[509581])
  }
  function range[64316](?).high[66796](arg _mt[66801]:_MT[238], arg this[66798]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509590] "RVV" "temp"
    unknown call_tmp[617422] "expr temp" "maybe param" "maybe type" "temp"
    (617425 'move' call_tmp[617422](373961 call _high _mt[243] this[66798]))
    unknown call_tmp[617427] "expr temp" "maybe param" "maybe type" "temp"
    (617430 'move' call_tmp[617427](66806 call(373956 call (partial) chpl_intToIdx _mt[243] this[66798]) call_tmp[617422]))
    (509595 'move' ret[509590](509594 'deref' call_tmp[617427]))
    (509592 return ret[509590])
  }
  function range[64316](?).alignedLow[66815](arg _mt[66820]:_MT[238], arg this[66817]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509599] "RVV" "temp"
    unknown call_tmp[617436] "expr temp" "maybe param" "maybe type" "temp"
    (617439 'move' call_tmp[617436](66825 call alignedLowAsInt _mt[243] this[66817]))
    unknown call_tmp[617441] "expr temp" "maybe param" "maybe type" "temp"
    (617444 'move' call_tmp[617441](66829 call(373970 call (partial) chpl_intToIdx _mt[243] this[66817]) call_tmp[617436]))
    unknown call_tmp[617448] "expr temp" "maybe param" "maybe type" "temp"
    (617451 'move' call_tmp[617448](509604 call idxType _mt[243] this[66817]))
    (509608 'move' ret[509599](509607 'coerce' call_tmp[617441] call_tmp[617448]))
    (509601 return ret[509599])
  }
  { scopeless type
    (373966 call idxType _mt[243] this[66817])
  }
  function range[64316](?).alignedLowAsInt[66839](arg _mt[66844]:_MT[238], arg this[66841]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509612] "RVV" "temp"
    unknown call_tmp[617457] "expr temp" "maybe param" "maybe type" "temp"
    (617460 'move' call_tmp[617457](373975 call stridable _mt[243] this[66841]))
    unknown call_tmp[617462] "expr temp" "maybe param" "maybe type" "temp"
    (617465 'move' call_tmp[617462](66847 call ! call_tmp[617457]))
    unknown call_tmp[617467] "expr temp" "maybe param" "maybe type" "temp"
    (617470 'move' call_tmp[617467](66863 call _cond_test call_tmp[617462]))
    if call_tmp[617467]
    {
      unknown call_tmp[617474] "expr temp" "maybe param" "maybe type" "temp"
      (617477 'move' call_tmp[617474](373980 call _low _mt[243] this[66841]))
      (509617 'move' ret[509612](509616 'deref' call_tmp[617474]))
      gotoReturn _end_alignedLowAsInt[509610] _end_alignedLowAsInt[509610]
    }
    {
      unknown call_tmp[617481] "expr temp" "maybe param" "maybe type" "temp"
      (617484 'move' call_tmp[617481](373985 call _low _mt[243] this[66841]))
      unknown call_tmp[617488] "expr temp" "maybe param" "maybe type" "temp"
      (617491 'move' call_tmp[617488](373990 call _alignment _mt[243] this[66841]))
      unknown call_tmp[617495] "expr temp" "maybe param" "maybe type" "temp"
      (617498 'move' call_tmp[617495](373995 call _low _mt[243] this[66841]))
      unknown call_tmp[617502] "expr temp" "maybe param" "maybe type" "temp"
      (617505 'move' call_tmp[617502](373999 call stride _mt[243] this[66841]))
      unknown call_tmp[617507] "expr temp" "maybe param" "maybe type" "temp"
      (617510 'move' call_tmp[617507](66858 call chpl__diffMod call_tmp[617488] call_tmp[617495] call_tmp[617502]))
      unknown call_tmp[617512] "expr temp" "maybe param" "maybe type" "temp"
      (617515 'move' call_tmp[617512](66859 call + call_tmp[617481] call_tmp[617507]))
      (509622 'move' ret[509612](509621 'deref' call_tmp[617512]))
      gotoReturn _end_alignedLowAsInt[509610] _end_alignedLowAsInt[509610]
    }
    label _end_alignedLowAsInt[509610]
    (509614 return ret[509612])
  }
  function range[64316](?).alignedHigh[66875](arg _mt[66880]:_MT[238], arg this[66877]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509628] "RVV" "temp"
    unknown call_tmp[617521] "expr temp" "maybe param" "maybe type" "temp"
    (617524 'move' call_tmp[617521](66885 call alignedHighAsInt _mt[243] this[66877]))
    unknown call_tmp[617526] "expr temp" "maybe param" "maybe type" "temp"
    (617529 'move' call_tmp[617526](66889 call(374008 call (partial) chpl_intToIdx _mt[243] this[66877]) call_tmp[617521]))
    unknown call_tmp[617533] "expr temp" "maybe param" "maybe type" "temp"
    (617536 'move' call_tmp[617533](509633 call idxType _mt[243] this[66877]))
    (509637 'move' ret[509628](509636 'coerce' call_tmp[617526] call_tmp[617533]))
    (509630 return ret[509628])
  }
  { scopeless type
    (374004 call idxType _mt[243] this[66877])
  }
  function range[64316](?).alignedHighAsInt[66899](arg _mt[66904]:_MT[238], arg this[66901]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc" "no parens"
  {
    unknown ret[509641] "RVV" "temp"
    unknown call_tmp[617542] "expr temp" "maybe param" "maybe type" "temp"
    (617545 'move' call_tmp[617542](374013 call stridable _mt[243] this[66901]))
    unknown call_tmp[617547] "expr temp" "maybe param" "maybe type" "temp"
    (617550 'move' call_tmp[617547](66907 call ! call_tmp[617542]))
    unknown call_tmp[617552] "expr temp" "maybe param" "maybe type" "temp"
    (617555 'move' call_tmp[617552](66923 call _cond_test call_tmp[617547]))
    if call_tmp[617552]
    {
      unknown call_tmp[617559] "expr temp" "maybe param" "maybe type" "temp"
      (617562 'move' call_tmp[617559](374018 call _high _mt[243] this[66901]))
      (509646 'move' ret[509641](509645 'deref' call_tmp[617559]))
      gotoReturn _end_alignedHighAsInt[509639] _end_alignedHighAsInt[509639]
    }
    {
      unknown call_tmp[617566] "expr temp" "maybe param" "maybe type" "temp"
      (617569 'move' call_tmp[617566](374023 call _high _mt[243] this[66901]))
      unknown call_tmp[617573] "expr temp" "maybe param" "maybe type" "temp"
      (617576 'move' call_tmp[617573](374028 call _high _mt[243] this[66901]))
      unknown call_tmp[617580] "expr temp" "maybe param" "maybe type" "temp"
      (617583 'move' call_tmp[617580](374033 call _alignment _mt[243] this[66901]))
      unknown call_tmp[617587] "expr temp" "maybe param" "maybe type" "temp"
      (617590 'move' call_tmp[617587](374037 call stride _mt[243] this[66901]))
      unknown call_tmp[617592] "expr temp" "maybe param" "maybe type" "temp"
      (617595 'move' call_tmp[617592](66918 call chpl__diffMod call_tmp[617573] call_tmp[617580] call_tmp[617587]))
      unknown call_tmp[617597] "expr temp" "maybe param" "maybe type" "temp"
      (617600 'move' call_tmp[617597](66919 call - call_tmp[617566] call_tmp[617592]))
      (509651 'move' ret[509641](509650 'deref' call_tmp[617597]))
      gotoReturn _end_alignedHighAsInt[509639] _end_alignedHighAsInt[509639]
    }
    label _end_alignedHighAsInt[509639]
    (509643 return ret[509641])
  }
  function range[64316](?).isEmpty[66935](arg _mt[66940]:_MT[238], arg this[66937]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509657] "RVV" "temp"
    unknown tmp[419293] "maybe param" "temp"
    (419304 'move' tmp[419293] 1)
    unknown call_tmp[617602] "expr temp" "maybe param" "maybe type" "temp"
    (617605 'move' call_tmp[617602](419306 call _cond_invalid tmp[419293]))
    if call_tmp[617602]
    {
      (419309 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555902] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555903] "maybe param" "temp"
    unknown call_tmp[617607] "expr temp" "maybe param" "maybe type" "temp"
    (617610 'move' call_tmp[617607](419294 call isTrue tmp[419293]))
    (555908 'move' tmp[555903](555906 call _cond_test call_tmp[617607]))
    if tmp[555903]
    {
      unknown tmp[555910] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617614] "expr temp" "maybe param" "maybe type" "temp"
      (617617 'move' call_tmp[617614](66945 call(374042 call (partial) isAmbiguous _mt[243] this[66937])))
      (555912 'move' tmp[555910](419297 call isTrue call_tmp[617614]))
      (555917 'move' tmp[555902](555914 '_paramFoldLogical' tmp[555903] tmp[555910]))
    }
    {
      (555922 'move' tmp[555902](555919 '_paramFoldLogical' tmp[555903] 0))
    }
    unknown call_tmp[617619] "expr temp" "maybe param" "maybe type" "temp"
    (617622 'move' call_tmp[617619](66990 call _cond_test tmp[555902]))
    if call_tmp[617619]
    {
      (66970 call boundsCheckHalt module=[255] HaltWrappers[209910] "isEmpty() is invoked on an ambiguously-aligned range")
      (357461 'referenced modules list' HaltWrappers[209910])
    }
    {
      unknown tmp[419272] "maybe param" "temp"
      (419283 'move' tmp[419272](66975 call isBoundedRange this[66937]))
      unknown call_tmp[617624] "expr temp" "maybe param" "maybe type" "temp"
      (617627 'move' call_tmp[617624](419285 call _cond_invalid tmp[419272]))
      if call_tmp[617624]
      {
        (419288 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[555929] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[555930] "maybe param" "temp"
      unknown call_tmp[617629] "expr temp" "maybe param" "maybe type" "temp"
      (617632 'move' call_tmp[617629](419273 call isTrue tmp[419272]))
      (555935 'move' tmp[555930](555933 call _cond_test call_tmp[617629]))
      if tmp[555930]
      {
        unknown tmp[555937] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[617636] "expr temp" "maybe param" "maybe type" "temp"
        (617639 'move' call_tmp[617636](66977 call alignedLow _mt[243] this[66937]))
        unknown call_tmp[617643] "expr temp" "maybe param" "maybe type" "temp"
        (617646 'move' call_tmp[617643](66981 call alignedHigh _mt[243] this[66937]))
        unknown call_tmp[617648] "expr temp" "maybe param" "maybe type" "temp"
        (617651 'move' call_tmp[617648](66984 call > call_tmp[617636] call_tmp[617643]))
        (555939 'move' tmp[555937](419276 call isTrue call_tmp[617648]))
        (555944 'move' tmp[555929](555941 '_paramFoldLogical' tmp[555930] tmp[555937]))
      }
      {
        (555949 'move' tmp[555929](555946 '_paramFoldLogical' tmp[555930] 0))
      }
      (509662 'move' ret[509657](509661 'deref' tmp[555929]))
      gotoReturn _end_isEmpty[509655] _end_isEmpty[509655]
    }
    label _end_isEmpty[509655]
    (509659 return ret[509657])
  }
  function range[64316](?).length[67002](arg _mt[67007]:_MT[238], arg this[67004]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no parens"
  {
    unknown ret[509668] "RVV" "temp"
    unknown call_tmp[617653] "expr temp" "maybe param" "maybe type" "temp"
    (617656 'move' call_tmp[617653](67045 call + "'range.length' is deprecated - " "please use 'range.size' instead"))
    (67048 call compilerWarning call_tmp[617653])
    (475272 'end of statement')
    unknown call_tmp[617660] "expr temp" "maybe param" "maybe type" "temp"
    (617663 'move' call_tmp[617660](67052 call size _mt[243] this[67004]))
    unknown call_tmp[617667] "expr temp" "maybe param" "maybe type" "temp"
    (617670 'move' call_tmp[617667](509673 call intIdxType _mt[243] this[67004]))
    (509677 'move' ret[509668](509676 'coerce' call_tmp[617660] call_tmp[617667]))
    (509670 return ret[509668])
  }
  { scopeless type
    (374047 call intIdxType _mt[243] this[67004])
  }
  function range[64316](?).size[67063](arg _mt[67068]:_MT[238], arg this[67065]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no parens"
  {
    unknown ret[509681] "RVV" "temp"
    unknown call_tmp[617674] "expr temp" "maybe param" "maybe type" "temp"
    (617677 'move' call_tmp[617674](67074 call isBoundedRange this[67065]))
    unknown call_tmp[617679] "expr temp" "maybe param" "maybe type" "temp"
    (617682 'move' call_tmp[617679](67075 call ! call_tmp[617674]))
    unknown call_tmp[617684] "expr temp" "maybe param" "maybe type" "temp"
    (617687 'move' call_tmp[617684](67098 call _cond_test call_tmp[617679]))
    if call_tmp[617684]
    {
      (67096 call compilerError "'size' is not defined on unbounded ranges")
    }
    unknown call_tmp[617691] "maybe param" "maybe type" "temp"
    (617694 'move' call_tmp[617691](67105 call alignedHighAsInt _mt[243] this[67065]))
    const ah[67108] "dead at end of block" "const" "insert auto destroy"
    (540931 'init var' ah[67108] call_tmp[617691])
    unknown call_tmp[617698] "maybe param" "maybe type" "temp"
    (617701 'move' call_tmp[617698](67112 call alignedLowAsInt _mt[243] this[67065]))
    const al[67115] "dead at end of block" "const" "insert auto destroy"
    (540933 'init var' al[67115] call_tmp[617698])
    (67118 'end of statement')
    unknown call_tmp[617703] "expr temp" "maybe param" "maybe type" "temp"
    (617706 'move' call_tmp[617703](67121 call > al[67115] ah[67108]))
    unknown call_tmp[617708] "expr temp" "maybe param" "maybe type" "temp"
    (617711 'move' call_tmp[617708](67129 call _cond_test call_tmp[617703]))
    if call_tmp[617708]
    {
      unknown call_tmp[617715] "expr temp" "maybe param" "maybe type" "temp"
      (617718 'move' call_tmp[617715](374058 call intIdxType _mt[243] this[67065]))
      unknown call_tmp[617720] "expr temp" "maybe param" "maybe type" "temp"
      (617723 'move' call_tmp[617720](67125 call _cast call_tmp[617715] 0))
      unknown call_tmp[617727] "expr temp" "maybe param" "maybe type" "temp"
      (617730 'move' call_tmp[617727](509686 call intIdxType _mt[243] this[67065]))
      (509690 'move' ret[509681](509689 'coerce' call_tmp[617720] call_tmp[617727]))
      gotoReturn _end_size[509679] _end_size[509679]
    }
    unknown call_tmp[617734] "expr temp" "maybe param" "maybe type" "temp"
    (617737 'move' call_tmp[617734](374062 call intIdxType _mt[243] this[67065]))
    unknown call_tmp[617741] "expr temp" "maybe param" "maybe type" "temp"
    (617744 'move' call_tmp[617741](67136 call stride _mt[243] this[67065]))
    unknown call_tmp[617746] "expr temp" "maybe param" "maybe type" "temp"
    (617749 'move' call_tmp[617746](67140 call abs call_tmp[617741]))
    unknown call_tmp[617751] "maybe param" "maybe type" "temp"
    (617754 'move' call_tmp[617751](67142 call _cast call_tmp[617734] call_tmp[617746]))
    const s[67144] "dead at end of block" "const" "insert auto destroy"
    (540935 'init var' s[67144] call_tmp[617751])
    (67147 'end of statement')
    unknown call_tmp[617756] "expr temp" "maybe param" "maybe type" "temp"
    (617759 'move' call_tmp[617756](67150 call - ah[67108] al[67115]))
    unknown call_tmp[617761] "expr temp" "maybe param" "maybe type" "temp"
    (617764 'move' call_tmp[617761](67153 call / call_tmp[617756] s[67144]))
    unknown call_tmp[617768] "expr temp" "maybe param" "maybe type" "temp"
    (617771 'move' call_tmp[617768](374069 call intIdxType _mt[243] this[67065]))
    unknown call_tmp[617773] "expr temp" "maybe param" "maybe type" "temp"
    (617776 'move' call_tmp[617773](67157 call _cast call_tmp[617768] 1))
    unknown call_tmp[617778] "expr temp" "maybe param" "maybe type" "temp"
    (617781 'move' call_tmp[617778](67159 call + call_tmp[617761] call_tmp[617773]))
    unknown call_tmp[617785] "expr temp" "maybe param" "maybe type" "temp"
    (617788 'move' call_tmp[617785](509695 call intIdxType _mt[243] this[67065]))
    (509699 'move' ret[509681](509698 'coerce' call_tmp[617778] call_tmp[617785]))
    gotoReturn _end_size[509679] _end_size[509679]
    (475276 'end of statement' ah[67108] al[67115] s[67144])
    label _end_size[509679]
    (509683 return ret[509681])
  }
  { scopeless type
    (374051 call intIdxType _mt[243] this[67065])
  }
  function range[64316](?).hasFirst[67169](arg _mt[67174]:_MT[238], arg this[67171]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509705] "RVV" "param" "temp"
    unknown call_tmp[617794] "expr temp" "maybe param" "maybe type" "temp"
    (617797 'move' call_tmp[617794](67188 call(374082 call (partial) hasLowBound _mt[243] this[67171])))
    (509710 'move' ret[509705](509709 'deref' call_tmp[617794]))
    (509707 return ret[509705])
  }
  where {
    unknown tmp[419314] "maybe param" "temp"
    unknown call_tmp[617801] "expr temp" "maybe param" "maybe type" "temp"
    (617804 'move' call_tmp[617801](374074 call stridable _mt[243] this[67171]))
    (419325 'move' tmp[419314](67177 call ! call_tmp[617801]))
    unknown call_tmp[617806] "expr temp" "maybe param" "maybe type" "temp"
    (617809 'move' call_tmp[617806](419327 call _cond_invalid tmp[419314]))
    if call_tmp[617806]
    {
      (419330 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[555956] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555957] "maybe param" "temp"
    unknown call_tmp[617811] "expr temp" "maybe param" "maybe type" "temp"
    (617814 'move' call_tmp[617811](419315 call isTrue tmp[419314]))
    (555962 'move' tmp[555957](555960 call _cond_test call_tmp[617811]))
    if tmp[555957]
    {
      unknown tmp[555964] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617818] "expr temp" "maybe param" "maybe type" "temp"
      (617821 'move' call_tmp[617818](67181 call(374078 call (partial) hasHighBound _mt[243] this[67171])))
      unknown call_tmp[617823] "expr temp" "maybe param" "maybe type" "temp"
      (617826 'move' call_tmp[617823](67182 call ! call_tmp[617818]))
      (555966 'move' tmp[555964](419318 call isTrue call_tmp[617823]))
      (555971 'move' tmp[555956](555968 '_paramFoldLogical' tmp[555957] tmp[555964]))
    }
    {
      (555976 'move' tmp[555956](555973 '_paramFoldLogical' tmp[555957] 0))
    }
    (748139 call chpl_statementLevelSymbol tmp[555956])
  }
  function range[64316](?).hasFirst[67198](arg _mt[67203]:_MT[238], arg this[67200]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509714] "RVV" "temp"
    unknown tmp[419335] "maybe param" "temp"
    (419346 'move' tmp[419335](67207 call(374086 call (partial) isAmbiguous _mt[243] this[67200])))
    unknown call_tmp[617830] "expr temp" "maybe param" "maybe type" "temp"
    (617833 'move' call_tmp[617830](419348 call _cond_invalid tmp[419335]))
    if call_tmp[617830]
    {
      (419351 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[555983] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[555984] "maybe param" "temp"
    unknown call_tmp[617835] "expr temp" "maybe param" "maybe type" "temp"
    (617838 'move' call_tmp[617835](419336 call isTrue tmp[419335]))
    (555989 'move' tmp[555984](555987 call _cond_test call_tmp[617835]))
    if tmp[555984]
    {
      (555994 'move' tmp[555983](555991 '_paramFoldLogical' tmp[555984] 1))
    }
    {
      unknown tmp[555996] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617842] "expr temp" "maybe param" "maybe type" "temp"
      (617845 'move' call_tmp[617842](67210 call(374090 call (partial) isEmpty _mt[243] this[67200])))
      (555998 'move' tmp[555996](419340 call isTrue call_tmp[617842]))
      (556003 'move' tmp[555983](556000 '_paramFoldLogical' tmp[555984] tmp[555996]))
    }
    unknown tmp[556041] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556042] "maybe param" "temp"
    (556047 'move' tmp[556042](556045 call _cond_test tmp[555983]))
    if tmp[556042]
    {
      (556052 'move' tmp[556041](556049 '_paramFoldLogical' tmp[556042] 0))
    }
    {
      unknown tmp[556010] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556011] "maybe param" "temp"
      unknown call_tmp[617849] "expr temp" "maybe param" "maybe type" "temp"
      (617852 'move' call_tmp[617849](374094 call stride _mt[243] this[67200]))
      unknown call_tmp[617854] "expr temp" "maybe param" "maybe type" "temp"
      (617857 'move' call_tmp[617854](67216 call > call_tmp[617849] 0))
      (556016 'move' tmp[556011](556014 call _cond_test call_tmp[617854]))
      if tmp[556011]
      {
        unknown tmp[556018] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556020 'move' tmp[556018](67220 call(374098 call (partial) hasLowBound _mt[243] this[67200])))
        (556025 'move' tmp[556010](556022 '_paramFoldLogical' tmp[556011] tmp[556018]))
      }
      {
        unknown tmp[556027] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556029 'move' tmp[556027](67223 call(374102 call (partial) hasHighBound _mt[243] this[67200])))
        (556034 'move' tmp[556010](556031 '_paramFoldLogical' tmp[556011] tmp[556027]))
      }
      (556057 'move' tmp[556041](556054 '_paramFoldLogical' tmp[556042] tmp[556010]))
    }
    (509719 'move' ret[509714](509718 'deref' tmp[556041]))
    (509716 return ret[509714])
  }
  function range[64316](?).hasLast[67238](arg _mt[67243]:_MT[238], arg this[67240]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509723] "RVV" "param" "temp"
    unknown call_tmp[617865] "expr temp" "maybe param" "maybe type" "temp"
    (617868 'move' call_tmp[617865](67257 call(374115 call (partial) hasHighBound _mt[243] this[67240])))
    (509728 'move' ret[509723](509727 'deref' call_tmp[617865]))
    (509725 return ret[509723])
  }
  where {
    unknown tmp[419356] "maybe param" "temp"
    unknown call_tmp[617872] "expr temp" "maybe param" "maybe type" "temp"
    (617875 'move' call_tmp[617872](374107 call stridable _mt[243] this[67240]))
    (419367 'move' tmp[419356](67246 call ! call_tmp[617872]))
    unknown call_tmp[617877] "expr temp" "maybe param" "maybe type" "temp"
    (617880 'move' call_tmp[617877](419369 call _cond_invalid tmp[419356]))
    if call_tmp[617877]
    {
      (419372 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556064] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556065] "maybe param" "temp"
    unknown call_tmp[617882] "expr temp" "maybe param" "maybe type" "temp"
    (617885 'move' call_tmp[617882](419357 call isTrue tmp[419356]))
    (556070 'move' tmp[556065](556068 call _cond_test call_tmp[617882]))
    if tmp[556065]
    {
      unknown tmp[556072] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617889] "expr temp" "maybe param" "maybe type" "temp"
      (617892 'move' call_tmp[617889](67250 call(374111 call (partial) hasLowBound _mt[243] this[67240])))
      unknown call_tmp[617894] "expr temp" "maybe param" "maybe type" "temp"
      (617897 'move' call_tmp[617894](67251 call ! call_tmp[617889]))
      (556074 'move' tmp[556072](419360 call isTrue call_tmp[617894]))
      (556079 'move' tmp[556064](556076 '_paramFoldLogical' tmp[556065] tmp[556072]))
    }
    {
      (556084 'move' tmp[556064](556081 '_paramFoldLogical' tmp[556065] 0))
    }
    (748141 call chpl_statementLevelSymbol tmp[556064])
  }
  function range[64316](?).hasLast[67267](arg _mt[67272]:_MT[238], arg this[67269]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509732] "RVV" "temp"
    unknown tmp[419377] "maybe param" "temp"
    (419388 'move' tmp[419377](67276 call(374119 call (partial) isAmbiguous _mt[243] this[67269])))
    unknown call_tmp[617901] "expr temp" "maybe param" "maybe type" "temp"
    (617904 'move' call_tmp[617901](419390 call _cond_invalid tmp[419377]))
    if call_tmp[617901]
    {
      (419393 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556091] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556092] "maybe param" "temp"
    unknown call_tmp[617906] "expr temp" "maybe param" "maybe type" "temp"
    (617909 'move' call_tmp[617906](419378 call isTrue tmp[419377]))
    (556097 'move' tmp[556092](556095 call _cond_test call_tmp[617906]))
    if tmp[556092]
    {
      (556102 'move' tmp[556091](556099 '_paramFoldLogical' tmp[556092] 1))
    }
    {
      unknown tmp[556104] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617913] "expr temp" "maybe param" "maybe type" "temp"
      (617916 'move' call_tmp[617913](67279 call(374123 call (partial) isEmpty _mt[243] this[67269])))
      (556106 'move' tmp[556104](419382 call isTrue call_tmp[617913]))
      (556111 'move' tmp[556091](556108 '_paramFoldLogical' tmp[556092] tmp[556104]))
    }
    unknown tmp[556149] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556150] "maybe param" "temp"
    (556155 'move' tmp[556150](556153 call _cond_test tmp[556091]))
    if tmp[556150]
    {
      (556160 'move' tmp[556149](556157 '_paramFoldLogical' tmp[556150] 0))
    }
    {
      unknown tmp[556118] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[556119] "maybe param" "temp"
      unknown call_tmp[617920] "expr temp" "maybe param" "maybe type" "temp"
      (617923 'move' call_tmp[617920](374127 call stride _mt[243] this[67269]))
      unknown call_tmp[617925] "expr temp" "maybe param" "maybe type" "temp"
      (617928 'move' call_tmp[617925](67285 call > call_tmp[617920] 0))
      (556124 'move' tmp[556119](556122 call _cond_test call_tmp[617925]))
      if tmp[556119]
      {
        unknown tmp[556126] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556128 'move' tmp[556126](67289 call(374131 call (partial) hasHighBound _mt[243] this[67269])))
        (556133 'move' tmp[556118](556130 '_paramFoldLogical' tmp[556119] tmp[556126]))
      }
      {
        unknown tmp[556135] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556137 'move' tmp[556135](67292 call(374135 call (partial) hasLowBound _mt[243] this[67269])))
        (556142 'move' tmp[556118](556139 '_paramFoldLogical' tmp[556119] tmp[556135]))
      }
      (556165 'move' tmp[556149](556162 '_paramFoldLogical' tmp[556150] tmp[556118]))
    }
    (509737 'move' ret[509732](509736 'deref' tmp[556149]))
    (509734 return ret[509732])
  }
  function range[64316](?).isNaturallyAligned[67307](arg _mt[67312]:_MT[238], arg this[67309]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method"
  {
    unknown ret[509741] "RVV" "temp"
    unknown call_tmp[617936] "expr temp" "maybe param" "maybe type" "temp"
    (617939 'move' call_tmp[617936](374144 call stride _mt[243] this[67309]))
    unknown call_tmp[617941] "expr temp" "maybe param" "maybe type" "temp"
    (617944 'move' call_tmp[617941](67329 call > call_tmp[617936] 0))
    unknown call_tmp[617946] "expr temp" "maybe param" "maybe type" "temp"
    (617949 'move' call_tmp[617946](67340 call _cond_test call_tmp[617941]))
    if call_tmp[617946]
    {
      unknown call_tmp[617953] "expr temp" "maybe param" "maybe type" "temp"
      (617956 'move' call_tmp[617953](67332 call alignedLowAsInt _mt[243] this[67309]))
      unknown call_tmp[617960] "expr temp" "maybe param" "maybe type" "temp"
      (617963 'move' call_tmp[617960](374149 call _low _mt[243] this[67309]))
      unknown call_tmp[617965] "expr temp" "maybe param" "maybe type" "temp"
      (617968 'move' call_tmp[617965](67336 call == call_tmp[617953] call_tmp[617960]))
      (509746 'move' ret[509741](509745 'deref' call_tmp[617965]))
      gotoReturn _end_isNaturallyAligned[509739] _end_isNaturallyAligned[509739]
    }
    unknown call_tmp[617972] "expr temp" "maybe param" "maybe type" "temp"
    (617975 'move' call_tmp[617972](374153 call stride _mt[243] this[67309]))
    unknown call_tmp[617977] "expr temp" "maybe param" "maybe type" "temp"
    (617980 'move' call_tmp[617977](67348 call < call_tmp[617972] 0))
    unknown call_tmp[617982] "expr temp" "maybe param" "maybe type" "temp"
    (617985 'move' call_tmp[617982](67359 call _cond_test call_tmp[617977]))
    if call_tmp[617982]
    {
      unknown call_tmp[617989] "expr temp" "maybe param" "maybe type" "temp"
      (617992 'move' call_tmp[617989](67351 call alignedHighAsInt _mt[243] this[67309]))
      unknown call_tmp[617996] "expr temp" "maybe param" "maybe type" "temp"
      (617999 'move' call_tmp[617996](374158 call _high _mt[243] this[67309]))
      unknown call_tmp[618001] "expr temp" "maybe param" "maybe type" "temp"
      (618004 'move' call_tmp[618001](67355 call == call_tmp[617989] call_tmp[617996]))
      (509751 'move' ret[509741](509750 'deref' call_tmp[618001]))
      gotoReturn _end_isNaturallyAligned[509739] _end_isNaturallyAligned[509739]
    }
    (509756 'move' ret[509741](509755 'deref' 0))
    label _end_isNaturallyAligned[509739]
    (509743 return ret[509741])
  }
  where {
    unknown tmp[419398] "maybe param" "temp"
    (419409 'move' tmp[419398](374140 call stridable _mt[243] this[67309]))
    unknown call_tmp[618008] "expr temp" "maybe param" "maybe type" "temp"
    (618011 'move' call_tmp[618008](419411 call _cond_invalid tmp[419398]))
    if call_tmp[618008]
    {
      (419414 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556172] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556173] "maybe param" "temp"
    unknown call_tmp[618013] "expr temp" "maybe param" "maybe type" "temp"
    (618016 'move' call_tmp[618013](419399 call isTrue tmp[419398]))
    (556178 'move' tmp[556173](556176 call _cond_test call_tmp[618013]))
    if tmp[556173]
    {
      unknown tmp[556180] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618020] "expr temp" "maybe param" "maybe type" "temp"
      (618023 'move' call_tmp[618020](67316 call boundedType _mt[243] this[67309]))
      unknown call_tmp[618025] "expr temp" "maybe param" "maybe type" "temp"
      (618028 'move' call_tmp[618025](67323 call == call_tmp[618020] bounded[64205]))
      (556182 'move' tmp[556180](419402 call isTrue call_tmp[618025]))
      (556187 'move' tmp[556172](556184 '_paramFoldLogical' tmp[556173] tmp[556180]))
    }
    {
      (556192 'move' tmp[556172](556189 '_paramFoldLogical' tmp[556173] 0))
    }
    (748143 call chpl_statementLevelSymbol tmp[556172])
  }
  function range[64316](?).isNaturallyAligned[67373](arg _mt[67378]:_MT[238], arg this[67375]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509760] "RVV" "param" "temp"
    (509765 'move' ret[509760](509764 'deref' 1))
    (509762 return ret[509760])
  }
  where {
    unknown tmp[419419] "maybe param" "temp"
    unknown call_tmp[618032] "expr temp" "maybe param" "maybe type" "temp"
    (618035 'move' call_tmp[618032](374163 call stridable _mt[243] this[67375]))
    (419430 'move' tmp[419419](67381 call ! call_tmp[618032]))
    unknown call_tmp[618037] "expr temp" "maybe param" "maybe type" "temp"
    (618040 'move' call_tmp[618037](419432 call _cond_invalid tmp[419419]))
    if call_tmp[618037]
    {
      (419435 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556199] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556200] "maybe param" "temp"
    unknown call_tmp[618042] "expr temp" "maybe param" "maybe type" "temp"
    (618045 'move' call_tmp[618042](419420 call isTrue tmp[419419]))
    (556205 'move' tmp[556200](556203 call _cond_test call_tmp[618042]))
    if tmp[556200]
    {
      unknown tmp[556207] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618049] "expr temp" "maybe param" "maybe type" "temp"
      (618052 'move' call_tmp[618049](67384 call boundedType _mt[243] this[67375]))
      unknown call_tmp[618054] "expr temp" "maybe param" "maybe type" "temp"
      (618057 'move' call_tmp[618054](67391 call == call_tmp[618049] bounded[64205]))
      (556209 'move' tmp[556207](419423 call isTrue call_tmp[618054]))
      (556214 'move' tmp[556199](556211 '_paramFoldLogical' tmp[556200] tmp[556207]))
    }
    {
      (556219 'move' tmp[556199](556216 '_paramFoldLogical' tmp[556200] 0))
    }
    (748145 call chpl_statementLevelSymbol tmp[556199])
  }
  function range[64316](?).isNaturallyAligned[67405](arg _mt[67410]:_MT[238], arg this[67407]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509769] "RVV" "temp"
    unknown call_tmp[618061] "expr temp" "maybe param" "maybe type" "temp"
    (618064 'move' call_tmp[618061](67428 call alignedLowAsInt _mt[243] this[67407]))
    unknown call_tmp[618068] "expr temp" "maybe param" "maybe type" "temp"
    (618071 'move' call_tmp[618068](374173 call _low _mt[243] this[67407]))
    unknown call_tmp[618073] "expr temp" "maybe param" "maybe type" "temp"
    (618076 'move' call_tmp[618073](67432 call == call_tmp[618061] call_tmp[618068]))
    (509774 'move' ret[509769](509773 'deref' call_tmp[618073]))
    (509771 return ret[509769])
  }
  where {
    unknown tmp[419440] "maybe param" "temp"
    unknown call_tmp[618080] "expr temp" "maybe param" "maybe type" "temp"
    (618083 'move' call_tmp[618080](374168 call stridable _mt[243] this[67407]))
    (419451 'move' tmp[419440](67413 call ! call_tmp[618080]))
    unknown call_tmp[618085] "expr temp" "maybe param" "maybe type" "temp"
    (618088 'move' call_tmp[618085](419453 call _cond_invalid tmp[419440]))
    if call_tmp[618085]
    {
      (419456 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556226] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556227] "maybe param" "temp"
    unknown call_tmp[618090] "expr temp" "maybe param" "maybe type" "temp"
    (618093 'move' call_tmp[618090](419441 call isTrue tmp[419440]))
    (556232 'move' tmp[556227](556230 call _cond_test call_tmp[618090]))
    if tmp[556227]
    {
      unknown tmp[556234] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618097] "expr temp" "maybe param" "maybe type" "temp"
      (618100 'move' call_tmp[618097](67416 call boundedType _mt[243] this[67407]))
      unknown call_tmp[618102] "expr temp" "maybe param" "maybe type" "temp"
      (618105 'move' call_tmp[618102](67423 call == call_tmp[618097] boundedLow[64207]))
      (556236 'move' tmp[556234](419444 call isTrue call_tmp[618102]))
      (556241 'move' tmp[556226](556238 '_paramFoldLogical' tmp[556227] tmp[556234]))
    }
    {
      (556246 'move' tmp[556226](556243 '_paramFoldLogical' tmp[556227] 0))
    }
    (748147 call chpl_statementLevelSymbol tmp[556226])
  }
  function range[64316](?).isNaturallyAligned[67443](arg _mt[67448]:_MT[238], arg this[67445]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509778] "RVV" "temp"
    unknown tmp[419482] "maybe param" "temp"
    unknown call_tmp[618109] "expr temp" "maybe param" "maybe type" "temp"
    (618112 'move' call_tmp[618109](374182 call stride _mt[243] this[67445]))
    (419493 'move' tmp[419482](67465 call > call_tmp[618109] 0))
    unknown call_tmp[618114] "expr temp" "maybe param" "maybe type" "temp"
    (618117 'move' call_tmp[618114](419495 call _cond_invalid tmp[419482]))
    if call_tmp[618114]
    {
      (419498 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556253] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556254] "maybe param" "temp"
    unknown call_tmp[618119] "expr temp" "maybe param" "maybe type" "temp"
    (618122 'move' call_tmp[618119](419483 call isTrue tmp[419482]))
    (556259 'move' tmp[556254](556257 call _cond_test call_tmp[618119]))
    if tmp[556254]
    {
      unknown tmp[556261] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618126] "expr temp" "maybe param" "maybe type" "temp"
      (618129 'move' call_tmp[618126](67468 call alignedLowAsInt _mt[243] this[67445]))
      unknown call_tmp[618133] "expr temp" "maybe param" "maybe type" "temp"
      (618136 'move' call_tmp[618133](374187 call _low _mt[243] this[67445]))
      unknown call_tmp[618138] "expr temp" "maybe param" "maybe type" "temp"
      (618141 'move' call_tmp[618138](67472 call == call_tmp[618126] call_tmp[618133]))
      (556263 'move' tmp[556261](419486 call isTrue call_tmp[618138]))
      (556268 'move' tmp[556253](556265 '_paramFoldLogical' tmp[556254] tmp[556261]))
    }
    {
      (556273 'move' tmp[556253](556270 '_paramFoldLogical' tmp[556254] 0))
    }
    (509783 'move' ret[509778](509782 'deref' tmp[556253]))
    (509780 return ret[509778])
  }
  where {
    unknown tmp[419461] "maybe param" "temp"
    (419472 'move' tmp[419461](374178 call stridable _mt[243] this[67445]))
    unknown call_tmp[618145] "expr temp" "maybe param" "maybe type" "temp"
    (618148 'move' call_tmp[618145](419474 call _cond_invalid tmp[419461]))
    if call_tmp[618145]
    {
      (419477 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556280] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556281] "maybe param" "temp"
    unknown call_tmp[618150] "expr temp" "maybe param" "maybe type" "temp"
    (618153 'move' call_tmp[618150](419462 call isTrue tmp[419461]))
    (556286 'move' tmp[556281](556284 call _cond_test call_tmp[618150]))
    if tmp[556281]
    {
      unknown tmp[556288] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618157] "expr temp" "maybe param" "maybe type" "temp"
      (618160 'move' call_tmp[618157](67452 call boundedType _mt[243] this[67445]))
      unknown call_tmp[618162] "expr temp" "maybe param" "maybe type" "temp"
      (618165 'move' call_tmp[618162](67459 call == call_tmp[618157] boundedLow[64207]))
      (556290 'move' tmp[556288](419465 call isTrue call_tmp[618162]))
      (556295 'move' tmp[556280](556292 '_paramFoldLogical' tmp[556281] tmp[556288]))
    }
    {
      (556300 'move' tmp[556280](556297 '_paramFoldLogical' tmp[556281] 0))
    }
    (748149 call chpl_statementLevelSymbol tmp[556280])
  }
  function range[64316](?).isNaturallyAligned[67485](arg _mt[67490]:_MT[238], arg this[67487]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509787] "RVV" "param" "temp"
    (509792 'move' ret[509787](509791 'deref' 0))
    (509789 return ret[509787])
  }
  where {
    unknown tmp[419503] "maybe param" "temp"
    unknown call_tmp[618169] "expr temp" "maybe param" "maybe type" "temp"
    (618172 'move' call_tmp[618169](67493 call boundedType _mt[243] this[67487]))
    (419514 'move' tmp[419503](67500 call == call_tmp[618169] boundedNone[64211]))
    unknown call_tmp[618174] "expr temp" "maybe param" "maybe type" "temp"
    (618177 'move' call_tmp[618174](419516 call _cond_invalid tmp[419503]))
    if call_tmp[618174]
    {
      (419519 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556334] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556335] "maybe param" "temp"
    unknown call_tmp[618179] "expr temp" "maybe param" "maybe type" "temp"
    (618182 'move' call_tmp[618179](419504 call isTrue tmp[419503]))
    (556340 'move' tmp[556335](556338 call _cond_test call_tmp[618179]))
    if tmp[556335]
    {
      (556345 'move' tmp[556334](556342 '_paramFoldLogical' tmp[556335] 1))
    }
    {
      unknown tmp[419524] "maybe param" "temp"
      unknown call_tmp[618186] "expr temp" "maybe param" "maybe type" "temp"
      (618189 'move' call_tmp[618186](374192 call stridable _mt[243] this[67487]))
      (419535 'move' tmp[419524](67503 call ! call_tmp[618186]))
      unknown call_tmp[618191] "expr temp" "maybe param" "maybe type" "temp"
      (618194 'move' call_tmp[618191](419537 call _cond_invalid tmp[419524]))
      if call_tmp[618191]
      {
        (419540 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556307] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556308] "maybe param" "temp"
      unknown call_tmp[618196] "expr temp" "maybe param" "maybe type" "temp"
      (618199 'move' call_tmp[618196](419525 call isTrue tmp[419524]))
      (556313 'move' tmp[556308](556311 call _cond_test call_tmp[618196]))
      if tmp[556308]
      {
        unknown tmp[556315] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618203] "expr temp" "maybe param" "maybe type" "temp"
        (618206 'move' call_tmp[618203](67506 call boundedType _mt[243] this[67487]))
        unknown call_tmp[618208] "expr temp" "maybe param" "maybe type" "temp"
        (618211 'move' call_tmp[618208](67513 call == call_tmp[618203] boundedHigh[64209]))
        (556317 'move' tmp[556315](419528 call isTrue call_tmp[618208]))
        (556322 'move' tmp[556307](556319 '_paramFoldLogical' tmp[556308] tmp[556315]))
      }
      {
        (556327 'move' tmp[556307](556324 '_paramFoldLogical' tmp[556308] 0))
      }
      unknown tmp[556347] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556349 'move' tmp[556347](419508 call isTrue tmp[556307]))
      (556354 'move' tmp[556334](556351 '_paramFoldLogical' tmp[556335] tmp[556347]))
    }
    (748151 call chpl_statementLevelSymbol tmp[556334])
  }
  function range[64316](?).isNaturallyAligned[67529](arg _mt[67534]:_MT[238], arg this[67531]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[509796] "RVV" "temp"
    unknown tmp[419566] "maybe param" "temp"
    unknown call_tmp[618215] "expr temp" "maybe param" "maybe type" "temp"
    (618218 'move' call_tmp[618215](374201 call stride _mt[243] this[67531]))
    (419577 'move' tmp[419566](67551 call < call_tmp[618215] 0))
    unknown call_tmp[618220] "expr temp" "maybe param" "maybe type" "temp"
    (618223 'move' call_tmp[618220](419579 call _cond_invalid tmp[419566]))
    if call_tmp[618220]
    {
      (419582 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556361] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556362] "maybe param" "temp"
    unknown call_tmp[618225] "expr temp" "maybe param" "maybe type" "temp"
    (618228 'move' call_tmp[618225](419567 call isTrue tmp[419566]))
    (556367 'move' tmp[556362](556365 call _cond_test call_tmp[618225]))
    if tmp[556362]
    {
      unknown tmp[556369] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618232] "expr temp" "maybe param" "maybe type" "temp"
      (618235 'move' call_tmp[618232](67554 call alignedHighAsInt _mt[243] this[67531]))
      unknown call_tmp[618239] "expr temp" "maybe param" "maybe type" "temp"
      (618242 'move' call_tmp[618239](374206 call _high _mt[243] this[67531]))
      unknown call_tmp[618244] "expr temp" "maybe param" "maybe type" "temp"
      (618247 'move' call_tmp[618244](67558 call == call_tmp[618232] call_tmp[618239]))
      (556371 'move' tmp[556369](419570 call isTrue call_tmp[618244]))
      (556376 'move' tmp[556361](556373 '_paramFoldLogical' tmp[556362] tmp[556369]))
    }
    {
      (556381 'move' tmp[556361](556378 '_paramFoldLogical' tmp[556362] 0))
    }
    (509801 'move' ret[509796](509800 'deref' tmp[556361]))
    (509798 return ret[509796])
  }
  where {
    unknown tmp[419545] "maybe param" "temp"
    (419556 'move' tmp[419545](374197 call stridable _mt[243] this[67531]))
    unknown call_tmp[618251] "expr temp" "maybe param" "maybe type" "temp"
    (618254 'move' call_tmp[618251](419558 call _cond_invalid tmp[419545]))
    if call_tmp[618251]
    {
      (419561 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556388] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556389] "maybe param" "temp"
    unknown call_tmp[618256] "expr temp" "maybe param" "maybe type" "temp"
    (618259 'move' call_tmp[618256](419546 call isTrue tmp[419545]))
    (556394 'move' tmp[556389](556392 call _cond_test call_tmp[618256]))
    if tmp[556389]
    {
      unknown tmp[556396] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618263] "expr temp" "maybe param" "maybe type" "temp"
      (618266 'move' call_tmp[618263](67538 call boundedType _mt[243] this[67531]))
      unknown call_tmp[618268] "expr temp" "maybe param" "maybe type" "temp"
      (618271 'move' call_tmp[618268](67545 call == call_tmp[618263] boundedHigh[64209]))
      (556398 'move' tmp[556396](419549 call isTrue call_tmp[618268]))
      (556403 'move' tmp[556388](556400 '_paramFoldLogical' tmp[556389] tmp[556396]))
    }
    {
      (556408 'move' tmp[556388](556405 '_paramFoldLogical' tmp[556389] 0))
    }
    (748153 call chpl_statementLevelSymbol tmp[556388])
  }
  function range[64316](?).isAmbiguous[67571](arg _mt[67576]:_MT[238], arg this[67573]:range[64316](?) :
  range[64316](?)) param : _unknown[51] "method"
  {
    unknown ret[509805] "RVV" "param" "temp"
    (509810 'move' ret[509805](509809 'deref' 0))
    (509807 return ret[509805])
  }
  where {
    unknown call_tmp[618275] "expr temp" "maybe param" "maybe type" "temp"
    (618278 'move' call_tmp[618275](374211 call stridable _mt[243] this[67573]))
    (67579 call ! call_tmp[618275])
  }
  function range[64316](?).isAmbiguous[67591](arg _mt[67596]:_MT[238], arg this[67593]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[509814] "RVV" "temp"
    unknown tmp[419587] "maybe param" "temp"
    unknown call_tmp[618282] "expr temp" "maybe param" "maybe type" "temp"
    (618285 'move' call_tmp[618282](374220 call aligned _mt[243] this[67593]))
    (419598 'move' tmp[419587](67600 call ! call_tmp[618282]))
    unknown call_tmp[618287] "expr temp" "maybe param" "maybe type" "temp"
    (618290 'move' call_tmp[618287](419600 call _cond_invalid tmp[419587]))
    if call_tmp[618287]
    {
      (419603 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556442] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556443] "maybe param" "temp"
    unknown call_tmp[618292] "expr temp" "maybe param" "maybe type" "temp"
    (618295 'move' call_tmp[618292](419588 call isTrue tmp[419587]))
    (556448 'move' tmp[556443](556446 call _cond_test call_tmp[618292]))
    if tmp[556443]
    {
      unknown tmp[419608] "maybe param" "temp"
      unknown call_tmp[618299] "expr temp" "maybe param" "maybe type" "temp"
      (618302 'move' call_tmp[618299](374224 call stride _mt[243] this[67593]))
      (419619 'move' tmp[419608](67604 call > call_tmp[618299] 1))
      unknown call_tmp[618304] "expr temp" "maybe param" "maybe type" "temp"
      (618307 'move' call_tmp[618304](419621 call _cond_invalid tmp[419608]))
      if call_tmp[618304]
      {
        (419624 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556415] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556416] "maybe param" "temp"
      unknown call_tmp[618309] "expr temp" "maybe param" "maybe type" "temp"
      (618312 'move' call_tmp[618309](419609 call isTrue tmp[419608]))
      (556421 'move' tmp[556416](556419 call _cond_test call_tmp[618309]))
      if tmp[556416]
      {
        (556426 'move' tmp[556415](556423 '_paramFoldLogical' tmp[556416] 1))
      }
      {
        unknown tmp[556428] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618316] "expr temp" "maybe param" "maybe type" "temp"
        (618319 'move' call_tmp[618316](374228 call stride _mt[243] this[67593]))
        unknown call_tmp[618321] "expr temp" "maybe param" "maybe type" "temp"
        (618324 'move' call_tmp[618321](67608 call - 1))
        unknown call_tmp[618326] "expr temp" "maybe param" "maybe type" "temp"
        (618329 'move' call_tmp[618326](67610 call < call_tmp[618316] call_tmp[618321]))
        (556430 'move' tmp[556428](419613 call isTrue call_tmp[618326]))
        (556435 'move' tmp[556415](556432 '_paramFoldLogical' tmp[556416] tmp[556428]))
      }
      unknown tmp[556450] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556452 'move' tmp[556450](419591 call isTrue tmp[556415]))
      (556457 'move' tmp[556442](556454 '_paramFoldLogical' tmp[556443] tmp[556450]))
    }
    {
      (556462 'move' tmp[556442](556459 '_paramFoldLogical' tmp[556443] 0))
    }
    (509819 'move' ret[509814](509818 'deref' tmp[556442]))
    (509816 return ret[509814])
  }
  where {
    (374216 call stridable _mt[243] this[67593])
  }
  function range[64316](?).contains[67629](arg _mt[67634]:_MT[238], arg this[67631]:range[64316](?) :
  range[64316](?), arg ind[67626] :
  (374233 call idxType _mt[243] this[67631])) : _unknown[51] "inline" "method"
  {
    unknown ret[509823] "RVV" "temp"
    unknown call_tmp[618337] "expr temp" "maybe param" "maybe type" "temp"
    (618340 'move' call_tmp[618337](67643 call(67639 call (partial) isAmbiguous _mt[243] this[67631])))
    unknown call_tmp[618342] "expr temp" "maybe param" "maybe type" "temp"
    (618345 'move' call_tmp[618342](67647 call _cond_test call_tmp[618337]))
    if call_tmp[618342]
    {
      (509828 'move' ret[509823](509827 'deref' 0))
      gotoReturn _end_contains[509821] _end_contains[509821]
    }
    unknown call_tmp[618347] "maybe param" "maybe type" "temp"
    (618350 'move' call_tmp[618347](67656 call chpl__idxToInt ind[67626]))
    const i[67657] "dead at end of block" "const" "insert auto destroy"
    (540937 'init var' i[67657] call_tmp[618347])
    (67660 'end of statement')
    unknown call_tmp[618354] "expr temp" "maybe param" "maybe type" "temp"
    (618357 'move' call_tmp[618354](67663 call(374238 call (partial) hasHighBound _mt[243] this[67631])))
    unknown call_tmp[618359] "expr temp" "maybe param" "maybe type" "temp"
    (618362 'move' call_tmp[618359](67677 call _cond_test call_tmp[618354]))
    if call_tmp[618359]
    {
      unknown call_tmp[618366] "expr temp" "maybe param" "maybe type" "temp"
      (618369 'move' call_tmp[618366](374244 call _high _mt[243] this[67631]))
      unknown call_tmp[618371] "expr temp" "maybe param" "maybe type" "temp"
      (618374 'move' call_tmp[618371](67666 call > i[67657] call_tmp[618366]))
      unknown call_tmp[618376] "expr temp" "maybe param" "maybe type" "temp"
      (618379 'move' call_tmp[618376](67671 call _cond_test call_tmp[618371]))
      if call_tmp[618376]
      {
        (509833 'move' ret[509823](509832 'deref' 0))
        gotoReturn _end_contains[509821] _end_contains[509821]
      }
    }
    unknown call_tmp[618383] "expr temp" "maybe param" "maybe type" "temp"
    (618386 'move' call_tmp[618383](67683 call(374248 call (partial) hasLowBound _mt[243] this[67631])))
    unknown call_tmp[618388] "expr temp" "maybe param" "maybe type" "temp"
    (618391 'move' call_tmp[618388](67697 call _cond_test call_tmp[618383]))
    if call_tmp[618388]
    {
      unknown call_tmp[618395] "expr temp" "maybe param" "maybe type" "temp"
      (618398 'move' call_tmp[618395](374254 call _low _mt[243] this[67631]))
      unknown call_tmp[618400] "expr temp" "maybe param" "maybe type" "temp"
      (618403 'move' call_tmp[618400](67686 call < i[67657] call_tmp[618395]))
      unknown call_tmp[618405] "expr temp" "maybe param" "maybe type" "temp"
      (618408 'move' call_tmp[618405](67691 call _cond_test call_tmp[618400]))
      if call_tmp[618405]
      {
        (509838 'move' ret[509823](509837 'deref' 0))
        gotoReturn _end_contains[509821] _end_contains[509821]
      }
    }
    unknown call_tmp[618412] "expr temp" "maybe param" "maybe type" "temp"
    (618415 'move' call_tmp[618412](374259 call stridable _mt[243] this[67631]))
    unknown call_tmp[618417] "expr temp" "maybe param" "maybe type" "temp"
    (618420 'move' call_tmp[618417](67731 call _cond_test call_tmp[618412]))
    if call_tmp[618417]
    {
      unknown call_tmp[618424] "expr temp" "maybe param" "maybe type" "temp"
      (618427 'move' call_tmp[618424](374268 call intIdxType _mt[243] this[67631]))
      unknown call_tmp[618431] "expr temp" "maybe param" "maybe type" "temp"
      (618434 'move' call_tmp[618431](374264 call _stride _mt[243] this[67631]))
      unknown call_tmp[618436] "expr temp" "maybe param" "maybe type" "temp"
      (618439 'move' call_tmp[618436](67705 call abs call_tmp[618431]))
      unknown call_tmp[618441] "maybe param" "maybe type" "temp"
      (618444 'move' call_tmp[618441](67707 call _cast call_tmp[618424] call_tmp[618436]))
      unknown s[67709] "dead at end of block" "insert auto destroy"
      (540939 'init var' s[67709] call_tmp[618441])
      (67712 'end of statement')
      unknown call_tmp[618448] "expr temp" "maybe param" "maybe type" "temp"
      (618451 'move' call_tmp[618448](374274 call _alignment _mt[243] this[67631]))
      unknown call_tmp[618453] "expr temp" "maybe param" "maybe type" "temp"
      (618456 'move' call_tmp[618453](67719 call chpl__diffMod i[67657] call_tmp[618448] s[67709]))
      unknown call_tmp[618458] "expr temp" "maybe param" "maybe type" "temp"
      (618461 'move' call_tmp[618458](67721 call != call_tmp[618453] 0))
      unknown call_tmp[618463] "expr temp" "maybe param" "maybe type" "temp"
      (618466 'move' call_tmp[618463](67726 call _cond_test call_tmp[618458]))
      if call_tmp[618463]
      {
        (509843 'move' ret[509823](509842 'deref' 0))
        gotoReturn _end_contains[509821] _end_contains[509821]
      }
    }
    (509848 'move' ret[509823](509847 'deref' 1))
    label _end_contains[509821]
    (509825 return ret[509823])
  }
  function range[64316](?).contains[67750](arg _mt[67755]:_MT[238], arg this[67752]:range[64316](?) :
  range[64316](?), arg other[67747]:range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509852] "RVV" "temp"
    unknown tmp[419629] "maybe param" "temp"
    (419640 'move' tmp[419629](67762 call(67758 call (partial) isAmbiguous _mt[243] this[67752])))
    unknown call_tmp[618470] "expr temp" "maybe param" "maybe type" "temp"
    (618473 'move' call_tmp[618470](419642 call _cond_invalid tmp[419629]))
    if call_tmp[618470]
    {
      (419645 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556469] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556470] "maybe param" "temp"
    unknown call_tmp[618475] "expr temp" "maybe param" "maybe type" "temp"
    (618478 'move' call_tmp[618475](419630 call isTrue tmp[419629]))
    (556475 'move' tmp[556470](556473 call _cond_test call_tmp[618475]))
    if tmp[556470]
    {
      (556480 'move' tmp[556469](556477 '_paramFoldLogical' tmp[556470] 1))
    }
    {
      unknown tmp[556482] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[618482] "expr temp" "maybe param" "maybe type" "temp"
      (618485 'move' call_tmp[618482](67768 call(67764 call (partial) isAmbiguous _mt[243] other[67747])))
      (556484 'move' tmp[556482](419634 call isTrue call_tmp[618482]))
      (556489 'move' tmp[556469](556486 '_paramFoldLogical' tmp[556470] tmp[556482]))
    }
    unknown call_tmp[618487] "expr temp" "maybe param" "maybe type" "temp"
    (618490 'move' call_tmp[618487](67774 call _cond_test tmp[556469]))
    if call_tmp[618487]
    {
      (509857 'move' ret[509852](509856 'deref' 0))
      gotoReturn _end_contains[509850] _end_contains[509850]
    }
    unknown call_tmp[618494] "expr temp" "maybe param" "maybe type" "temp"
    (618497 'move' call_tmp[618494](374281 call stridable _mt[243] this[67752]))
    unknown call_tmp[618499] "expr temp" "maybe param" "maybe type" "temp"
    (618502 'move' call_tmp[618499](67842 call _cond_test call_tmp[618494]))
    if call_tmp[618499]
    {
      unknown tmp[419650] "maybe param" "temp"
      unknown tmp[419671] "maybe param" "temp"
      unknown call_tmp[618506] "expr temp" "maybe param" "maybe type" "temp"
      (618509 'move' call_tmp[618506](374285 call stride _mt[243] this[67752]))
      (419682 'move' tmp[419671](67783 call > call_tmp[618506] 0))
      unknown call_tmp[618511] "expr temp" "maybe param" "maybe type" "temp"
      (618514 'move' call_tmp[618511](419684 call _cond_invalid tmp[419671]))
      if call_tmp[618511]
      {
        (419687 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556496] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556497] "maybe param" "temp"
      unknown call_tmp[618516] "expr temp" "maybe param" "maybe type" "temp"
      (618519 'move' call_tmp[618516](419672 call isTrue tmp[419671]))
      (556502 'move' tmp[556497](556500 call _cond_test call_tmp[618516]))
      if tmp[556497]
      {
        unknown tmp[556504] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[618523] "expr temp" "maybe param" "maybe type" "temp"
        (618526 'move' call_tmp[618523](67786 call stride _mt[243] other[67747]))
        unknown call_tmp[618528] "expr temp" "maybe param" "maybe type" "temp"
        (618531 'move' call_tmp[618528](67790 call < call_tmp[618523] 0))
        (556506 'move' tmp[556504](419675 call isTrue call_tmp[618528]))
        (556511 'move' tmp[556496](556508 '_paramFoldLogical' tmp[556497] tmp[556504]))
      }
      {
        (556516 'move' tmp[556496](556513 '_paramFoldLogical' tmp[556497] 0))
      }
      (419661 'move' tmp[419650] tmp[556496])
      unknown call_tmp[618533] "expr temp" "maybe param" "maybe type" "temp"
      (618536 'move' call_tmp[618533](419663 call _cond_invalid tmp[419650]))
      if call_tmp[618533]
      {
        (419666 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[556550] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556551] "maybe param" "temp"
      unknown call_tmp[618538] "expr temp" "maybe param" "maybe type" "temp"
      (618541 'move' call_tmp[618538](419651 call isTrue tmp[419650]))
      (556556 'move' tmp[556551](556554 call _cond_test call_tmp[618538]))
      if tmp[556551]
      {
        (556561 'move' tmp[556550](556558 '_paramFoldLogical' tmp[556551] 1))
      }
      {
        unknown tmp[419692] "maybe param" "temp"
        unknown call_tmp[618545] "expr temp" "maybe param" "maybe type" "temp"
        (618548 'move' call_tmp[618545](374289 call stride _mt[243] this[67752]))
        (419703 'move' tmp[419692](67796 call < call_tmp[618545] 0))
        unknown call_tmp[618550] "expr temp" "maybe param" "maybe type" "temp"
        (618553 'move' call_tmp[618550](419705 call _cond_invalid tmp[419692]))
        if call_tmp[618550]
        {
          (419708 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[556523] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[556524] "maybe param" "temp"
        unknown call_tmp[618555] "expr temp" "maybe param" "maybe type" "temp"
        (618558 'move' call_tmp[618555](419693 call isTrue tmp[419692]))
        (556529 'move' tmp[556524](556527 call _cond_test call_tmp[618555]))
        if tmp[556524]
        {
          unknown tmp[556531] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[618562] "expr temp" "maybe param" "maybe type" "temp"
          (618565 'move' call_tmp[618562](67799 call stride _mt[243] other[67747]))
          unknown call_tmp[618567] "expr temp" "maybe param" "maybe type" "temp"
          (618570 'move' call_tmp[618567](67803 call > call_tmp[618562] 0))
          (556533 'move' tmp[556531](419696 call isTrue call_tmp[618567]))
          (556538 'move' tmp[556523](556535 '_paramFoldLogical' tmp[556524] tmp[556531]))
        }
        {
          (556543 'move' tmp[556523](556540 '_paramFoldLogical' tmp[556524] 0))
        }
        unknown tmp[556563] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (556565 'move' tmp[556563](419655 call isTrue tmp[556523]))
        (556570 'move' tmp[556550](556567 '_paramFoldLogical' tmp[556551] tmp[556563]))
      }
      unknown call_tmp[618572] "expr temp" "maybe param" "maybe type" "temp"
      (618575 'move' call_tmp[618572](67816 call _cond_test tmp[556550]))
      if call_tmp[618572]
      {
        unknown call_tmp[618577] "expr temp" "maybe param" "maybe type" "temp"
        (618580 'move' call_tmp[618577](67813 call _containsHelp this[67752] other[67747]))
        (509862 'move' ret[509852](509861 'deref' call_tmp[618577]))
        gotoReturn _end_contains[509850] _end_contains[509850]
      }
    }
    {
      unknown call_tmp[618584] "expr temp" "maybe param" "maybe type" "temp"
      (618587 'move' call_tmp[618584](67823 call stride _mt[243] other[67747]))
      unknown call_tmp[618589] "expr temp" "maybe param" "maybe type" "temp"
      (618592 'move' call_tmp[618589](67827 call < call_tmp[618584] 0))
      unknown call_tmp[618594] "expr temp" "maybe param" "maybe type" "temp"
      (618597 'move' call_tmp[618594](67836 call _cond_test call_tmp[618589]))
      if call_tmp[618594]
      {
        unknown call_tmp[618599] "expr temp" "maybe param" "maybe type" "temp"
        (618602 'move' call_tmp[618599](67833 call _containsHelp this[67752] other[67747]))
        (509867 'move' ret[509852](509866 'deref' call_tmp[618599]))
        gotoReturn _end_contains[509850] _end_contains[509850]
      }
    }
    unknown call_tmp[618604] "expr temp" "maybe param" "maybe type" "temp"
    (618607 'move' call_tmp[618604](67850 call this[67752] other[67747]))
    unknown call_tmp[618609] "expr temp" "maybe param" "maybe type" "temp"
    (618612 'move' call_tmp[618609](67851 call == other[67747] call_tmp[618604]))
    (509872 'move' ret[509852](509871 'deref' call_tmp[618609]))
    label _end_contains[509850]
    (509854 return ret[509852])
  }
  function range[64316](?).member[67864](arg _mt[67869]:_MT[238], arg this[67866]:range[64316](?) :
  range[64316](?), arg ind[67861] :
  (374301 call idxType _mt[243] this[67866])) : _unknown[51] "inline" "method"
  {
    unknown ret[509876] "RVV" "temp"
    unknown call_tmp[618616] "expr temp" "maybe param" "maybe type" "temp"
    (618619 'move' call_tmp[618616](67906 call + "range.member is deprecated - " "please use range.contains instead"))
    (67909 call compilerWarning call_tmp[618616])
    (475311 'end of statement')
    unknown call_tmp[618623] "expr temp" "maybe param" "maybe type" "temp"
    (618626 'move' call_tmp[618623](67920 call(67915 call (partial) contains _mt[243] this[67866]) ind[67861]))
    (509881 'move' ret[509876](509880 'deref' call_tmp[618623]))
    (509878 return ret[509876])
  }
  function range[64316](?).member[67935](arg _mt[67940]:_MT[238], arg this[67937]:range[64316](?) :
  range[64316](?), arg other[67932]:range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[509885] "RVV" "temp"
    unknown call_tmp[618628] "expr temp" "maybe param" "maybe type" "temp"
    (618631 'move' call_tmp[618628](67945 call + "range.member is deprecated - " "please use range.contains instead"))
    (67948 call compilerWarning call_tmp[618628])
    (475313 'end of statement')
    unknown call_tmp[618635] "expr temp" "maybe param" "maybe type" "temp"
    (618638 'move' call_tmp[618635](67957 call(67952 call (partial) contains _mt[243] this[67937]) other[67932]))
    (509890 'move' ret[509885](509889 'deref' call_tmp[618635]))
    (509887 return ret[509885])
  }
  function _containsHelp[67971](in arg arg1[67968]:range[64316](?), in arg arg2[67977]:range[64316](?)) : _unknown[51] "inline" "private"
  {
    unknown ret[509894] "RVV" "temp"
    unknown call_tmp[618642] "expr temp" "maybe param" "maybe type" "temp"
    (618645 'move' call_tmp[618642](67981 call stridable _mt[243] arg2[67977]))
    unknown call_tmp[618647] "expr temp" "maybe param" "maybe type" "temp"
    (618650 'move' call_tmp[618647](68010 call _cond_test call_tmp[618642]))
    if call_tmp[618647]
    {
      unknown call_tmp[618654] "expr temp" "maybe param" "maybe type" "temp"
      (618657 'move' call_tmp[618654](67985 call _stride _mt[243] arg2[67977]))
      unknown call_tmp[618661] "expr temp" "maybe param" "maybe type" "temp"
      (618664 'move' call_tmp[618661](67989 call _stride _mt[243] arg2[67977]))
      unknown call_tmp[618666] "expr temp" "maybe param" "maybe type" "temp"
      (618669 'move' call_tmp[618666](67992 call - call_tmp[618661]))
      (67994 call = call_tmp[618654] call_tmp[618666])
    }
    {
      unknown call_tmp[618673] "expr temp" "maybe param" "maybe type" "temp"
      (618676 'move' call_tmp[618673](67998 call _stride _mt[243] arg1[67968]))
      unknown call_tmp[618680] "expr temp" "maybe param" "maybe type" "temp"
      (618683 'move' call_tmp[618680](68002 call _stride _mt[243] arg1[67968]))
      unknown call_tmp[618685] "expr temp" "maybe param" "maybe type" "temp"
      (618688 'move' call_tmp[618685](68005 call - call_tmp[618680]))
      (68007 call = call_tmp[618673] call_tmp[618685])
    }
    unknown call_tmp[618690] "expr temp" "maybe param" "maybe type" "temp"
    (618693 'move' call_tmp[618690](68021 call arg1[67968] arg2[67977]))
    unknown call_tmp[618695] "expr temp" "maybe param" "maybe type" "temp"
    (618698 'move' call_tmp[618695](68022 call == arg2[67977] call_tmp[618690]))
    (509899 'move' ret[509894](509898 'deref' call_tmp[618695]))
    (509896 return ret[509894])
  }
  function ==[68037](arg r1[68034]:range[64316](?), arg r2[68043]:range[64316](?)) param : _unknown[51]
  {
    unknown ret[509903] "RVV" "param" "temp"
    (509908 'move' ret[509903](509907 'deref' 0))
    (509905 return ret[509903])
  }
  where {
    unknown call_tmp[618702] "expr temp" "maybe param" "maybe type" "temp"
    (618705 'move' call_tmp[618702](68047 call boundedType _mt[243] r1[68034]))
    unknown call_tmp[618709] "expr temp" "maybe param" "maybe type" "temp"
    (618712 'move' call_tmp[618709](68051 call boundedType _mt[243] r2[68043]))
    (68054 call != call_tmp[618702] call_tmp[618709])
  }
  function ==[68072](arg r1[68069]:range[64316](?), arg r2[68078]:range[64316](?)) : _unknown[51]
  {
    unknown ret[509912] "RVV" "temp"
    unknown call_tmp[618716] "expr temp" "maybe param" "maybe type" "temp"
    (618719 'move' call_tmp[618716](68097 call(68093 call (partial) isAmbiguous _mt[243] r1[68069])))
    unknown call_tmp[618723] "expr temp" "maybe param" "maybe type" "temp"
    (618726 'move' call_tmp[618723](68103 call(68099 call (partial) isAmbiguous _mt[243] r2[68078])))
    unknown call_tmp[618728] "expr temp" "maybe param" "maybe type" "temp"
    (618731 'move' call_tmp[618728](68104 call != call_tmp[618716] call_tmp[618723]))
    unknown call_tmp[618733] "expr temp" "maybe param" "maybe type" "temp"
    (618736 'move' call_tmp[618733](68109 call _cond_test call_tmp[618728]))
    if call_tmp[618733]
    {
      (509918 'move' ret[509912](509917 'coerce' 0 bool[10]))
      gotoReturn _end_==[509910] _end_==[509910]
    }
    unknown call_tmp[618740] "expr temp" "maybe param" "maybe type" "temp"
    (618743 'move' call_tmp[618740](68120 call(68116 call (partial) isAmbiguous _mt[243] r1[68069])))
    unknown call_tmp[618745] "expr temp" "maybe param" "maybe type" "temp"
    (618748 'move' call_tmp[618745](68128 call _cond_test call_tmp[618740]))
    if call_tmp[618745]
    {
      unknown call_tmp[618750] "expr temp" "maybe param" "maybe type" "temp"
      (618753 'move' call_tmp[618750](68125 call ident r1[68069] r2[68078]))
      (509924 'move' ret[509912](509923 'coerce' call_tmp[618750] bool[10]))
      gotoReturn _end_==[509910] _end_==[509910]
    }
    unknown call_tmp[618755] "expr temp" "maybe param" "maybe type" "temp"
    (618758 'move' call_tmp[618755](68136 call isBoundedRange r1[68069]))
    unknown call_tmp[618760] "expr temp" "maybe param" "maybe type" "temp"
    (618763 'move' call_tmp[618760](68310 call _cond_test call_tmp[618755]))
    if call_tmp[618760]
    {
      unknown call_tmp[618767] "maybe param" "maybe type" "temp"
      (618770 'move' call_tmp[618767](68138 call size _mt[243] r1[68069]))
      const len[68141] "dead at end of block" "const" "insert auto destroy"
      (540941 'init var' len[68141] call_tmp[618767])
      unknown call_tmp[618774] "maybe param" "maybe type" "temp"
      (618777 'move' call_tmp[618774](68145 call size _mt[243] r2[68078]))
      const l2[68148] "dead at end of block" "const" "insert auto destroy"
      (540943 'init var' l2[68148] call_tmp[618774])
      (68151 'end of statement')
      unknown call_tmp[618779] "expr temp" "maybe param" "maybe type" "temp"
      (618782 'move' call_tmp[618779](68155 call != len[68141] l2[68148]))
      unknown call_tmp[618784] "expr temp" "maybe param" "maybe type" "temp"
      (618787 'move' call_tmp[618784](68160 call _cond_test call_tmp[618779]))
      if call_tmp[618784]
      {
        (509930 'move' ret[509912](509929 'coerce' 0 bool[10]))
        gotoReturn _end_==[509910] _end_==[509910]
      }
      unknown call_tmp[618789] "expr temp" "maybe param" "maybe type" "temp"
      (618792 'move' call_tmp[618789](68167 call == len[68141] 0))
      unknown call_tmp[618794] "expr temp" "maybe param" "maybe type" "temp"
      (618797 'move' call_tmp[618794](68172 call _cond_test call_tmp[618789]))
      if call_tmp[618794]
      {
        (509936 'move' ret[509912](509935 'coerce' 1 bool[10]))
        gotoReturn _end_==[509910] _end_==[509910]
      }
      unknown call_tmp[618801] "expr temp" "maybe param" "maybe type" "temp"
      (618804 'move' call_tmp[618801](68180 call first _mt[243] r1[68069]))
      unknown call_tmp[618808] "expr temp" "maybe param" "maybe type" "temp"
      (618811 'move' call_tmp[618808](68184 call first _mt[243] r2[68078]))
      unknown call_tmp[618813] "expr temp" "maybe param" "maybe type" "temp"
      (618816 'move' call_tmp[618813](68187 call != call_tmp[618801] call_tmp[618808]))
      unknown call_tmp[618818] "expr temp" "maybe param" "maybe type" "temp"
      (618821 'move' call_tmp[618818](68192 call _cond_test call_tmp[618813]))
      if call_tmp[618818]
      {
        (509942 'move' ret[509912](509941 'coerce' 0 bool[10]))
        gotoReturn _end_==[509910] _end_==[509910]
      }
      unknown call_tmp[618823] "expr temp" "maybe param" "maybe type" "temp"
      (618826 'move' call_tmp[618823](68199 call == len[68141] 1))
      unknown call_tmp[618828] "expr temp" "maybe param" "maybe type" "temp"
      (618831 'move' call_tmp[618828](68204 call _cond_test call_tmp[618823]))
      if call_tmp[618828]
      {
        (509948 'move' ret[509912](509947 'coerce' 1 bool[10]))
        gotoReturn _end_==[509910] _end_==[509910]
      }
      unknown call_tmp[618835] "expr temp" "maybe param" "maybe type" "temp"
      (618838 'move' call_tmp[618835](68210 call stride _mt[243] r1[68069]))
      unknown call_tmp[618842] "expr temp" "maybe param" "maybe type" "temp"
      (618845 'move' call_tmp[618842](68214 call stride _mt[243] r2[68078]))
      unknown call_tmp[618847] "expr temp" "maybe param" "maybe type" "temp"
      (618850 'move' call_tmp[618847](68217 call != call_tmp[618835] call_tmp[618842]))
      unknown call_tmp[618852] "expr temp" "maybe param" "maybe type" "temp"
      (618855 'move' call_tmp[618852](68222 call _cond_test call_tmp[618847]))
      if call_tmp[618852]
      {
        (509954 'move' ret[509912](509953 'coerce' 0 bool[10]))
        gotoReturn _end_==[509910] _end_==[509910]
      }
      (509960 'move' ret[509912](509959 'coerce' 1 bool[10]))
      gotoReturn _end_==[509910] _end_==[509910]
    }
    {
      unknown call_tmp[618859] "expr temp" "maybe param" "maybe type" "temp"
      (618862 'move' call_tmp[618859](68231 call stride _mt[243] r1[68069]))
      unknown call_tmp[618866] "expr temp" "maybe param" "maybe type" "temp"
      (618869 'move' call_tmp[618866](68235 call stride _mt[243] r2[68078]))
      unknown call_tmp[618871] "expr temp" "maybe param" "maybe type" "temp"
      (618874 'move' call_tmp[618871](68238 call != call_tmp[618859] call_tmp[618866]))
      unknown call_tmp[618876] "expr temp" "maybe param" "maybe type" "temp"
      (618879 'move' call_tmp[618876](68243 call _cond_test call_tmp[618871]))
      if call_tmp[618876]
      {
        (509966 'move' ret[509912](509965 'coerce' 0 bool[10]))
        gotoReturn _end_==[509910] _end_==[509910]
      }
      unknown call_tmp[618883] "expr temp" "maybe param" "maybe type" "temp"
      (618886 'move' call_tmp[618883](68254 call(68250 call (partial) hasLowBound _mt[243] r1[68069])))
      unknown call_tmp[618888] "expr temp" "maybe param" "maybe type" "temp"
      (618891 'move' call_tmp[618888](68273 call _cond_test call_tmp[618883]))
      if call_tmp[618888]
      {
        unknown call_tmp[618895] "expr temp" "maybe param" "maybe type" "temp"
        (618898 'move' call_tmp[618895](68256 call alignedLow _mt[243] r1[68069]))
        unknown call_tmp[618902] "expr temp" "maybe param" "maybe type" "temp"
        (618905 'move' call_tmp[618902](68260 call alignedLow _mt[243] r2[68078]))
        unknown call_tmp[618907] "expr temp" "maybe param" "maybe type" "temp"
        (618910 'move' call_tmp[618907](68263 call != call_tmp[618895] call_tmp[618902]))
        unknown call_tmp[618912] "expr temp" "maybe param" "maybe type" "temp"
        (618915 'move' call_tmp[618912](68268 call _cond_test call_tmp[618907]))
        if call_tmp[618912]
        {
          (509972 'move' ret[509912](509971 'coerce' 0 bool[10]))
          gotoReturn _end_==[509910] _end_==[509910]
        }
      }
      unknown call_tmp[618919] "expr temp" "maybe param" "maybe type" "temp"
      (618922 'move' call_tmp[618919](68283 call(68279 call (partial) hasHighBound _mt[243] r1[68069])))
      unknown call_tmp[618924] "expr temp" "maybe param" "maybe type" "temp"
      (618927 'move' call_tmp[618924](68302 call _cond_test call_tmp[618919]))
      if call_tmp[618924]
      {
        unknown call_tmp[618931] "expr temp" "maybe param" "maybe type" "temp"
        (618934 'move' call_tmp[618931](68285 call alignedHigh _mt[243] r1[68069]))
        unknown call_tmp[618938] "expr temp" "maybe param" "maybe type" "temp"
        (618941 'move' call_tmp[618938](68289 call alignedHigh _mt[243] r2[68078]))
        unknown call_tmp[618943] "expr temp" "maybe param" "maybe type" "temp"
        (618946 'move' call_tmp[618943](68292 call != call_tmp[618931] call_tmp[618938]))
        unknown call_tmp[618948] "expr temp" "maybe param" "maybe type" "temp"
        (618951 'move' call_tmp[618948](68297 call _cond_test call_tmp[618943]))
        if call_tmp[618948]
        {
          (509978 'move' ret[509912](509977 'coerce' 0 bool[10]))
          gotoReturn _end_==[509910] _end_==[509910]
        }
      }
      (509984 'move' ret[509912](509983 'coerce' 1 bool[10]))
      gotoReturn _end_==[509910] _end_==[509910]
    }
    label _end_==[509910]
    (509914 return ret[509912])
  }
  where {
    unknown call_tmp[618955] "expr temp" "maybe param" "maybe type" "temp"
    (618958 'move' call_tmp[618955](68083 call boundedType _mt[243] r1[68069]))
    unknown call_tmp[618962] "expr temp" "maybe param" "maybe type" "temp"
    (618965 'move' call_tmp[618962](68087 call boundedType _mt[243] r2[68078]))
    (68090 call == call_tmp[618955] call_tmp[618962])
  }
  { scopeless type
    bool[10]
  }
  function !=[68327](arg r1[68324]:range[64316](?), arg r2[68333]:range[64316](?)) : _unknown[51]
  {
    unknown ret[509990] "RVV" "temp"
    unknown call_tmp[618967] "expr temp" "maybe param" "maybe type" "temp"
    (618970 'move' call_tmp[618967](68338 call == r1[68324] r2[68333]))
    unknown call_tmp[618972] "expr temp" "maybe param" "maybe type" "temp"
    (618975 'move' call_tmp[618972](68340 call ! call_tmp[618967]))
    (509995 'move' ret[509990](509994 'deref' call_tmp[618972]))
    (509992 return ret[509990])
  }
  function ident[68356](arg r1[68353]:range[64316](?), arg r2[68362]:range[64316](?)) : _unknown[51]
  {
    unknown ret[509999] "RVV" "temp"
    unknown call_tmp[618979] "expr temp" "maybe param" "maybe type" "temp"
    (618982 'move' call_tmp[618979](68400 call _low _mt[243] r1[68353]))
    unknown call_tmp[618986] "expr temp" "maybe param" "maybe type" "temp"
    (618989 'move' call_tmp[618986](68404 call _low _mt[243] r2[68362]))
    unknown call_tmp[618991] "expr temp" "maybe param" "maybe type" "temp"
    (618994 'move' call_tmp[618991](68407 call != call_tmp[618979] call_tmp[618986]))
    unknown call_tmp[618996] "expr temp" "maybe param" "maybe type" "temp"
    (618999 'move' call_tmp[618996](68412 call _cond_test call_tmp[618991]))
    if call_tmp[618996]
    {
      (510004 'move' ret[509999](510003 'deref' 0))
      gotoReturn _end_ident[509997] _end_ident[509997]
    }
    unknown call_tmp[619003] "expr temp" "maybe param" "maybe type" "temp"
    (619006 'move' call_tmp[619003](68419 call _high _mt[243] r1[68353]))
    unknown call_tmp[619010] "expr temp" "maybe param" "maybe type" "temp"
    (619013 'move' call_tmp[619010](68423 call _high _mt[243] r2[68362]))
    unknown call_tmp[619015] "expr temp" "maybe param" "maybe type" "temp"
    (619018 'move' call_tmp[619015](68426 call != call_tmp[619003] call_tmp[619010]))
    unknown call_tmp[619020] "expr temp" "maybe param" "maybe type" "temp"
    (619023 'move' call_tmp[619020](68431 call _cond_test call_tmp[619015]))
    if call_tmp[619020]
    {
      (510009 'move' ret[509999](510008 'deref' 0))
      gotoReturn _end_ident[509997] _end_ident[509997]
    }
    unknown call_tmp[619027] "expr temp" "maybe param" "maybe type" "temp"
    (619030 'move' call_tmp[619027](68437 call stridable _mt[243] r1[68353]))
    unknown call_tmp[619032] "expr temp" "maybe param" "maybe type" "temp"
    (619035 'move' call_tmp[619032](68508 call _cond_test call_tmp[619027]))
    if call_tmp[619032]
    {
      unknown call_tmp[619039] "expr temp" "maybe param" "maybe type" "temp"
      (619042 'move' call_tmp[619039](68441 call stridable _mt[243] r2[68362]))
      unknown call_tmp[619044] "expr temp" "maybe param" "maybe type" "temp"
      (619047 'move' call_tmp[619044](68503 call _cond_test call_tmp[619039]))
      if call_tmp[619044]
      {
        unknown call_tmp[619051] "expr temp" "maybe param" "maybe type" "temp"
        (619054 'move' call_tmp[619051](68445 call _stride _mt[243] r1[68353]))
        unknown call_tmp[619058] "expr temp" "maybe param" "maybe type" "temp"
        (619061 'move' call_tmp[619058](68449 call _stride _mt[243] r2[68362]))
        unknown call_tmp[619063] "expr temp" "maybe param" "maybe type" "temp"
        (619066 'move' call_tmp[619063](68452 call != call_tmp[619051] call_tmp[619058]))
        unknown call_tmp[619068] "expr temp" "maybe param" "maybe type" "temp"
        (619071 'move' call_tmp[619068](68457 call _cond_test call_tmp[619063]))
        if call_tmp[619068]
        {
          (510014 'move' ret[509999](510013 'deref' 0))
          gotoReturn _end_ident[509997] _end_ident[509997]
        }
        unknown call_tmp[619075] "expr temp" "maybe param" "maybe type" "temp"
        (619078 'move' call_tmp[619075](68464 call _alignment _mt[243] r1[68353]))
        unknown call_tmp[619082] "expr temp" "maybe param" "maybe type" "temp"
        (619085 'move' call_tmp[619082](68468 call _alignment _mt[243] r2[68362]))
        unknown call_tmp[619087] "expr temp" "maybe param" "maybe type" "temp"
        (619090 'move' call_tmp[619087](68471 call != call_tmp[619075] call_tmp[619082]))
        unknown call_tmp[619092] "expr temp" "maybe param" "maybe type" "temp"
        (619095 'move' call_tmp[619092](68476 call _cond_test call_tmp[619087]))
        if call_tmp[619092]
        {
          (510019 'move' ret[509999](510018 'deref' 0))
          gotoReturn _end_ident[509997] _end_ident[509997]
        }
        unknown call_tmp[619099] "expr temp" "maybe param" "maybe type" "temp"
        (619102 'move' call_tmp[619099](68482 call _aligned _mt[243] r1[68353]))
        unknown call_tmp[619106] "expr temp" "maybe param" "maybe type" "temp"
        (619109 'move' call_tmp[619106](68486 call _aligned _mt[243] r2[68362]))
        unknown call_tmp[619111] "expr temp" "maybe param" "maybe type" "temp"
        (619114 'move' call_tmp[619111](68489 call != call_tmp[619099] call_tmp[619106]))
        unknown call_tmp[619116] "expr temp" "maybe param" "maybe type" "temp"
        (619119 'move' call_tmp[619116](68494 call _cond_test call_tmp[619111]))
        if call_tmp[619116]
        {
          (510024 'move' ret[509999](510023 'deref' 0))
          gotoReturn _end_ident[509997] _end_ident[509997]
        }
      }
      {
        (510029 'move' ret[509999](510028 'deref' 0))
        gotoReturn _end_ident[509997] _end_ident[509997]
      }
    }
    (510034 'move' ret[509999](510033 'deref' 1))
    label _end_ident[509997]
    (510001 return ret[509999])
  }
  where {
    unknown tmp[419713] "maybe param" "temp"
    unknown tmp[419734] "maybe param" "temp"
    unknown call_tmp[619123] "expr temp" "maybe param" "maybe type" "temp"
    (619126 'move' call_tmp[619123](68366 call idxType _mt[243] r1[68353]))
    unknown call_tmp[619130] "expr temp" "maybe param" "maybe type" "temp"
    (619133 'move' call_tmp[619130](68370 call idxType _mt[243] r2[68362]))
    (419745 'move' tmp[419734](68373 call == call_tmp[619123] call_tmp[619130]))
    unknown call_tmp[619135] "expr temp" "maybe param" "maybe type" "temp"
    (619138 'move' call_tmp[619135](419747 call _cond_invalid tmp[419734]))
    if call_tmp[619135]
    {
      (419750 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556577] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556578] "maybe param" "temp"
    unknown call_tmp[619140] "expr temp" "maybe param" "maybe type" "temp"
    (619143 'move' call_tmp[619140](419735 call isTrue tmp[419734]))
    (556583 'move' tmp[556578](556581 call _cond_test call_tmp[619140]))
    if tmp[556578]
    {
      unknown tmp[556585] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619147] "expr temp" "maybe param" "maybe type" "temp"
      (619150 'move' call_tmp[619147](68376 call boundedType _mt[243] r1[68353]))
      unknown call_tmp[619154] "expr temp" "maybe param" "maybe type" "temp"
      (619157 'move' call_tmp[619154](68380 call boundedType _mt[243] r2[68362]))
      unknown call_tmp[619159] "expr temp" "maybe param" "maybe type" "temp"
      (619162 'move' call_tmp[619159](68383 call == call_tmp[619147] call_tmp[619154]))
      (556587 'move' tmp[556585](419738 call isTrue call_tmp[619159]))
      (556592 'move' tmp[556577](556589 '_paramFoldLogical' tmp[556578] tmp[556585]))
    }
    {
      (556597 'move' tmp[556577](556594 '_paramFoldLogical' tmp[556578] 0))
    }
    (419724 'move' tmp[419713] tmp[556577])
    unknown call_tmp[619164] "expr temp" "maybe param" "maybe type" "temp"
    (619167 'move' call_tmp[619164](419726 call _cond_invalid tmp[419713]))
    if call_tmp[619164]
    {
      (419729 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556604] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556605] "maybe param" "temp"
    unknown call_tmp[619169] "expr temp" "maybe param" "maybe type" "temp"
    (619172 'move' call_tmp[619169](419714 call isTrue tmp[419713]))
    (556610 'move' tmp[556605](556608 call _cond_test call_tmp[619169]))
    if tmp[556605]
    {
      unknown tmp[556612] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619176] "expr temp" "maybe param" "maybe type" "temp"
      (619179 'move' call_tmp[619176](68388 call stridable _mt[243] r1[68353]))
      unknown call_tmp[619183] "expr temp" "maybe param" "maybe type" "temp"
      (619186 'move' call_tmp[619183](68392 call stridable _mt[243] r2[68362]))
      unknown call_tmp[619188] "expr temp" "maybe param" "maybe type" "temp"
      (619191 'move' call_tmp[619188](68395 call == call_tmp[619176] call_tmp[619183]))
      (556614 'move' tmp[556612](419717 call isTrue call_tmp[619188]))
      (556619 'move' tmp[556604](556616 '_paramFoldLogical' tmp[556605] tmp[556612]))
    }
    {
      (556624 'move' tmp[556604](556621 '_paramFoldLogical' tmp[556605] 0))
    }
    (748155 call chpl_statementLevelSymbol tmp[556604])
  }
  function ident[68527](arg r1[68524]:range[64316](?), arg r2[68533]:range[64316](?)) param : _unknown[51] "no doc"
  {
    unknown ret[510038] "RVV" "param" "temp"
    (510043 'move' ret[510038](510042 'deref' 0))
    (510040 return ret[510038])
  }
  function range[64316](?).safeCast[68552](arg _mt[68557]:_MT[238], arg this[68554]:range[64316](?) :
  range[64316](?), arg t[68549]:range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510047] "RVV" "temp"
    unknown tmp[68560] "dead at end of block" "insert auto destroy"
    (540945 'default init var' tmp[68560] t[68549])
    (68563 'end of statement')
    unknown call_tmp[619195] "expr temp" "maybe param" "maybe type" "temp"
    (619198 'move' call_tmp[619195](68566 call boundedType _mt[243] tmp[68560]))
    unknown call_tmp[619202] "expr temp" "maybe param" "maybe type" "temp"
    (619205 'move' call_tmp[619202](68570 call boundedType _mt[243] this[68554]))
    unknown call_tmp[619207] "expr temp" "maybe param" "maybe type" "temp"
    (619210 'move' call_tmp[619207](68573 call != call_tmp[619195] call_tmp[619202]))
    unknown call_tmp[619212] "expr temp" "maybe param" "maybe type" "temp"
    (619215 'move' call_tmp[619212](68628 call _cond_test call_tmp[619207]))
    if call_tmp[619212]
    {
      unknown call_tmp[619219] "expr temp" "maybe param" "maybe type" "temp"
      (619222 'move' call_tmp[619219](68595 call boundedType _mt[243] this[68554]))
      unknown call_tmp[619224] "expr temp" "maybe param" "maybe type" "temp"
      (619227 'move' call_tmp[619224](68599 call _cast string[26] call_tmp[619219]))
      unknown call_tmp[619231] "expr temp" "maybe param" "maybe type" "temp"
      (619234 'move' call_tmp[619231](68619 call boundedType _mt[243] tmp[68560]))
      unknown call_tmp[619236] "expr temp" "maybe param" "maybe type" "temp"
      (619239 'move' call_tmp[619236](68623 call _cast string[26] call_tmp[619231]))
      (68625 call compilerError "cannot cast range from " call_tmp[619224] " to " call_tmp[619236])
      (475340 'end of statement' tmp[68560])
    }
    unknown call_tmp[619243] "expr temp" "maybe param" "maybe type" "temp"
    (619246 'move' call_tmp[619243](68633 call stridable _mt[243] tmp[68560]))
    unknown call_tmp[619248] "expr temp" "maybe param" "maybe type" "temp"
    (619251 'move' call_tmp[619248](68722 call _cond_test call_tmp[619243]))
    if call_tmp[619248]
    {
      unknown call_tmp[619255] "expr temp" "maybe param" "maybe type" "temp"
      (619258 'move' call_tmp[619255](68637 call _stride _mt[243] tmp[68560]))
      unknown call_tmp[619262] "expr temp" "maybe param" "maybe type" "temp"
      (619265 'move' call_tmp[619262](68641 call stride _mt[243] this[68554]))
      (68644 call = call_tmp[619255] call_tmp[619262])
      (475342 'end of statement' tmp[68560])
      unknown call_tmp[619269] "expr temp" "maybe param" "maybe type" "temp"
      (619272 'move' call_tmp[619269](68649 call _alignment _mt[243] tmp[68560]))
      unknown call_tmp[619276] "expr temp" "maybe param" "maybe type" "temp"
      (619279 'move' call_tmp[619276](68654 call alignment _mt[243] this[68554]))
      unknown call_tmp[619281] "expr temp" "maybe param" "maybe type" "temp"
      (619284 'move' call_tmp[619281](68658 call chpl__idxToInt call_tmp[619276]))
      unknown call_tmp[619290] "expr temp" "maybe param" "maybe type" "temp"
      (619293 'move' call_tmp[619290](68665 call intIdxType _mt[243] tmp[68560]))
      unknown call_tmp[619295] "expr temp" "maybe param" "maybe type" "temp"
      (619298 'move' call_tmp[619295](68669 call(68659 call (partial) safeCast _mt[243] call_tmp[619281]) call_tmp[619290]))
      (68670 call = call_tmp[619269] call_tmp[619295])
      (475344 'end of statement' tmp[68560] tmp[68560])
      unknown call_tmp[619302] "expr temp" "maybe param" "maybe type" "temp"
      (619305 'move' call_tmp[619302](68674 call _aligned _mt[243] tmp[68560]))
      unknown call_tmp[619309] "expr temp" "maybe param" "maybe type" "temp"
      (619312 'move' call_tmp[619309](68678 call aligned _mt[243] this[68554]))
      (68681 call = call_tmp[619302] call_tmp[619309])
      (475347 'end of statement' tmp[68560])
    }
    {
      unknown call_tmp[619316] "expr temp" "maybe param" "maybe type" "temp"
      (619319 'move' call_tmp[619316](68685 call stride _mt[243] this[68554]))
      unknown call_tmp[619321] "expr temp" "maybe param" "maybe type" "temp"
      (619324 'move' call_tmp[619321](68689 call != call_tmp[619316] 1))
      unknown call_tmp[619326] "expr temp" "maybe param" "maybe type" "temp"
      (619329 'move' call_tmp[619326](68718 call _cond_test call_tmp[619321]))
      if call_tmp[619326]
      {
        (68715 call safeCastCheckHalt module=[255] HaltWrappers[209910] "illegal safeCast from non-unit stride range to unstridable range")
        (357557 'referenced modules list' HaltWrappers[209910])
      }
    }
    unknown call_tmp[619333] "expr temp" "maybe param" "maybe type" "temp"
    (619336 'move' call_tmp[619333](68728 call _low _mt[243] tmp[68560]))
    unknown call_tmp[619340] "expr temp" "maybe param" "maybe type" "temp"
    (619343 'move' call_tmp[619340](68732 call _low _mt[243] this[68554]))
    unknown call_tmp[619349] "expr temp" "maybe param" "maybe type" "temp"
    (619352 'move' call_tmp[619349](68739 call intIdxType _mt[243] tmp[68560]))
    unknown call_tmp[619354] "expr temp" "maybe param" "maybe type" "temp"
    (619357 'move' call_tmp[619354](68743 call(68735 call (partial) safeCast _mt[243] call_tmp[619340]) call_tmp[619349]))
    (68744 call = call_tmp[619333] call_tmp[619354])
    (475350 'end of statement' tmp[68560] tmp[68560])
    unknown call_tmp[619361] "expr temp" "maybe param" "maybe type" "temp"
    (619364 'move' call_tmp[619361](68748 call _high _mt[243] tmp[68560]))
    unknown call_tmp[619368] "expr temp" "maybe param" "maybe type" "temp"
    (619371 'move' call_tmp[619368](68752 call _high _mt[243] this[68554]))
    unknown call_tmp[619377] "expr temp" "maybe param" "maybe type" "temp"
    (619380 'move' call_tmp[619377](68759 call intIdxType _mt[243] tmp[68560]))
    unknown call_tmp[619382] "expr temp" "maybe param" "maybe type" "temp"
    (619385 'move' call_tmp[619382](68763 call(68755 call (partial) safeCast _mt[243] call_tmp[619368]) call_tmp[619377]))
    (68764 call = call_tmp[619361] call_tmp[619382])
    (475353 'end of statement' tmp[68560] tmp[68560])
    (510052 'move' ret[510047](510051 'deref' tmp[68560]))
    gotoReturn _end_safeCast[510045] _end_safeCast[510045]
    (475356 'end of statement' tmp[68560])
    label _end_safeCast[510045]
    (510049 return ret[510047])
  }
  function _cast[68781](arg t[68778]:range[64316](?), arg r[68787]:range[64316](?)) : _unknown[51] "no doc"
  {
    unknown ret[510058] "RVV" "temp"
    unknown tmp[68791] "dead at end of block" "insert auto destroy"
    (540947 'default init var' tmp[68791] t[68778])
    (68794 'end of statement')
    unknown call_tmp[619389] "expr temp" "maybe param" "maybe type" "temp"
    (619392 'move' call_tmp[619389](68797 call boundedType _mt[243] tmp[68791]))
    unknown call_tmp[619396] "expr temp" "maybe param" "maybe type" "temp"
    (619399 'move' call_tmp[619396](68801 call boundedType _mt[243] r[68787]))
    unknown call_tmp[619401] "expr temp" "maybe param" "maybe type" "temp"
    (619404 'move' call_tmp[619401](68804 call != call_tmp[619389] call_tmp[619396]))
    unknown call_tmp[619406] "expr temp" "maybe param" "maybe type" "temp"
    (619409 'move' call_tmp[619406](68827 call _cond_test call_tmp[619401]))
    if call_tmp[619406]
    {
      unknown call_tmp[619413] "expr temp" "maybe param" "maybe type" "temp"
      (619416 'move' call_tmp[619413](68810 call boundedType _mt[243] r[68787]))
      unknown call_tmp[619418] "expr temp" "maybe param" "maybe type" "temp"
      (619421 'move' call_tmp[619418](68814 call _cast string[26] call_tmp[619413]))
      unknown call_tmp[619425] "expr temp" "maybe param" "maybe type" "temp"
      (619428 'move' call_tmp[619425](68818 call boundedType _mt[243] tmp[68791]))
      unknown call_tmp[619430] "expr temp" "maybe param" "maybe type" "temp"
      (619433 'move' call_tmp[619430](68822 call _cast string[26] call_tmp[619425]))
      (68824 call compilerError "cannot cast range from " call_tmp[619418] " to " call_tmp[619430])
      (475358 'end of statement' tmp[68791])
    }
    unknown call_tmp[619437] "expr temp" "maybe param" "maybe type" "temp"
    (619440 'move' call_tmp[619437](68832 call stridable _mt[243] tmp[68791]))
    unknown call_tmp[619442] "expr temp" "maybe param" "maybe type" "temp"
    (619445 'move' call_tmp[619442](68875 call _cond_test call_tmp[619437]))
    if call_tmp[619442]
    {
      unknown call_tmp[619449] "expr temp" "maybe param" "maybe type" "temp"
      (619452 'move' call_tmp[619449](68836 call _stride _mt[243] tmp[68791]))
      unknown call_tmp[619456] "expr temp" "maybe param" "maybe type" "temp"
      (619459 'move' call_tmp[619456](68840 call _stride _mt[243] r[68787]))
      (68843 call = call_tmp[619449] call_tmp[619456])
      (475360 'end of statement' tmp[68791])
      unknown call_tmp[619463] "expr temp" "maybe param" "maybe type" "temp"
      (619466 'move' call_tmp[619463](68848 call _alignment _mt[243] tmp[68791]))
      unknown call_tmp[619470] "expr temp" "maybe param" "maybe type" "temp"
      (619473 'move' call_tmp[619470](68856 call intIdxType _mt[243] tmp[68791]))
      unknown call_tmp[619477] "expr temp" "maybe param" "maybe type" "temp"
      (619480 'move' call_tmp[619477](68852 call _alignment _mt[243] r[68787]))
      unknown call_tmp[619482] "expr temp" "maybe param" "maybe type" "temp"
      (619485 'move' call_tmp[619482](68859 call _cast call_tmp[619470] call_tmp[619477]))
      (68861 call = call_tmp[619463] call_tmp[619482])
      (475362 'end of statement' tmp[68791] tmp[68791])
      unknown call_tmp[619489] "expr temp" "maybe param" "maybe type" "temp"
      (619492 'move' call_tmp[619489](68865 call _aligned _mt[243] tmp[68791]))
      unknown call_tmp[619496] "expr temp" "maybe param" "maybe type" "temp"
      (619499 'move' call_tmp[619496](68869 call _aligned _mt[243] r[68787]))
      (68872 call = call_tmp[619489] call_tmp[619496])
      (475365 'end of statement' tmp[68791])
    }
    unknown call_tmp[619503] "expr temp" "maybe param" "maybe type" "temp"
    (619506 'move' call_tmp[619503](68880 call _low _mt[243] tmp[68791]))
    unknown call_tmp[619510] "expr temp" "maybe param" "maybe type" "temp"
    (619513 'move' call_tmp[619510](68888 call intIdxType _mt[243] tmp[68791]))
    unknown call_tmp[619517] "expr temp" "maybe param" "maybe type" "temp"
    (619520 'move' call_tmp[619517](68884 call low _mt[243] r[68787]))
    unknown call_tmp[619522] "expr temp" "maybe param" "maybe type" "temp"
    (619525 'move' call_tmp[619522](68891 call _cast call_tmp[619510] call_tmp[619517]))
    (68893 call = call_tmp[619503] call_tmp[619522])
    (475367 'end of statement' tmp[68791] tmp[68791])
    unknown call_tmp[619529] "expr temp" "maybe param" "maybe type" "temp"
    (619532 'move' call_tmp[619529](68897 call _high _mt[243] tmp[68791]))
    unknown call_tmp[619536] "expr temp" "maybe param" "maybe type" "temp"
    (619539 'move' call_tmp[619536](68905 call intIdxType _mt[243] tmp[68791]))
    unknown call_tmp[619543] "expr temp" "maybe param" "maybe type" "temp"
    (619546 'move' call_tmp[619543](68901 call high _mt[243] r[68787]))
    unknown call_tmp[619548] "expr temp" "maybe param" "maybe type" "temp"
    (619551 'move' call_tmp[619548](68908 call _cast call_tmp[619536] call_tmp[619543]))
    (68910 call = call_tmp[619529] call_tmp[619548])
    (475370 'end of statement' tmp[68791] tmp[68791])
    (510063 'move' ret[510058](510062 'deref' tmp[68791]))
    gotoReturn _end__cast[510056] _end__cast[510056]
    (475373 'end of statement' tmp[68791])
    label _end__cast[510056]
    (510060 return ret[510058])
  }
  function range[64316](?).boundsCheck[68933](arg _mt[68938]:_MT[238], arg this[68935]:range[64316](?) :
  range[64316](?), arg other[68930]:range[64316](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510069] "RVV" "temp"
    unknown tmp[419755] "maybe param" "temp"
    (419766 'move' tmp[419755](68952 call(68948 call (partial) isAmbiguous _mt[243] this[68935])))
    unknown call_tmp[619555] "expr temp" "maybe param" "maybe type" "temp"
    (619558 'move' call_tmp[619555](419768 call _cond_invalid tmp[419755]))
    if call_tmp[619555]
    {
      (419771 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556631] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556632] "maybe param" "temp"
    unknown call_tmp[619560] "expr temp" "maybe param" "maybe type" "temp"
    (619563 'move' call_tmp[619560](419756 call isTrue tmp[419755]))
    (556637 'move' tmp[556632](556635 call _cond_test call_tmp[619560]))
    if tmp[556632]
    {
      (556642 'move' tmp[556631](556639 '_paramFoldLogical' tmp[556632] 1))
    }
    {
      unknown tmp[556644] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619567] "expr temp" "maybe param" "maybe type" "temp"
      (619570 'move' call_tmp[619567](68958 call(68954 call (partial) isAmbiguous _mt[243] other[68930])))
      (556646 'move' tmp[556644](419760 call isTrue call_tmp[619567]))
      (556651 'move' tmp[556631](556648 '_paramFoldLogical' tmp[556632] tmp[556644]))
    }
    unknown call_tmp[619572] "expr temp" "maybe param" "maybe type" "temp"
    (619575 'move' call_tmp[619572](68964 call _cond_test tmp[556631]))
    if call_tmp[619572]
    {
      (510074 'move' ret[510069](510073 'deref' 0))
      gotoReturn _end_boundsCheck[510067] _end_boundsCheck[510067]
    }
    (510079 'move' ret[510069](510078 'deref' 1))
    label _end_boundsCheck[510067]
    (510071 return ret[510069])
  }
  where {
    unknown call_tmp[619577] "expr temp" "maybe param" "maybe type" "temp"
    (619580 'move' call_tmp[619577](455662 'query' other[68930] 2))
    (68945 call == call_tmp[619577] boundedNone[64211])
  }
  function range[64316](?).boundsCheck[68991](arg _mt[68996]:_MT[238], arg this[68993]:range[64316](?) :
  range[64316](?), arg other[68988]:range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510083] "RVV" "temp"
    unknown tmp[419776] "maybe param" "temp"
    (419787 'move' tmp[419776](69003 call(68999 call (partial) isAmbiguous _mt[243] this[68993])))
    unknown call_tmp[619584] "expr temp" "maybe param" "maybe type" "temp"
    (619587 'move' call_tmp[619584](419789 call _cond_invalid tmp[419776]))
    if call_tmp[619584]
    {
      (419792 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556658] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556659] "maybe param" "temp"
    unknown call_tmp[619589] "expr temp" "maybe param" "maybe type" "temp"
    (619592 'move' call_tmp[619589](419777 call isTrue tmp[419776]))
    (556664 'move' tmp[556659](556662 call _cond_test call_tmp[619589]))
    if tmp[556659]
    {
      (556669 'move' tmp[556658](556666 '_paramFoldLogical' tmp[556659] 1))
    }
    {
      unknown tmp[556671] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619596] "expr temp" "maybe param" "maybe type" "temp"
      (619599 'move' call_tmp[619596](69009 call(69005 call (partial) isAmbiguous _mt[243] other[68988])))
      (556673 'move' tmp[556671](419781 call isTrue call_tmp[619596]))
      (556678 'move' tmp[556658](556675 '_paramFoldLogical' tmp[556659] tmp[556671]))
    }
    unknown call_tmp[619601] "expr temp" "maybe param" "maybe type" "temp"
    (619604 'move' call_tmp[619601](69015 call _cond_test tmp[556658]))
    if call_tmp[619601]
    {
      (510088 'move' ret[510083](510087 'deref' 0))
      gotoReturn _end_boundsCheck[510081] _end_boundsCheck[510081]
    }
    unknown tmp[419797] "maybe param" "temp"
    (419808 'move' tmp[419797](455681 'query' other[68988] 3))
    unknown call_tmp[619606] "expr temp" "maybe param" "maybe type" "temp"
    (619609 'move' call_tmp[619606](419810 call _cond_invalid tmp[419797]))
    if call_tmp[619606]
    {
      (419813 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown boundedOther[69074] "dead at end of block" "insert auto destroy"
    unknown tmp[556685] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556686] "maybe param" "temp"
    unknown call_tmp[619611] "expr temp" "maybe param" "maybe type" "temp"
    (619614 'move' call_tmp[619611](419798 call isTrue tmp[419797]))
    (556691 'move' tmp[556686](556689 call _cond_test call_tmp[619611]))
    if tmp[556686]
    {
      (556696 'move' tmp[556685](556693 '_paramFoldLogical' tmp[556686] 1))
    }
    {
      unknown tmp[556698] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619618] "expr temp" "maybe param" "maybe type" "temp"
      (619621 'move' call_tmp[619618](69031 call stridable _mt[243] this[68993]))
      (556700 'move' tmp[556698](419802 call isTrue call_tmp[619618]))
      (556705 'move' tmp[556685](556702 '_paramFoldLogical' tmp[556686] tmp[556698]))
    }
    unknown tmp[556712] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556713] "maybe param" "temp"
    unknown call_tmp[619625] "expr temp" "maybe param" "maybe type" "temp"
    (619628 'move' call_tmp[619625](69041 call(69037 call (partial) hasLowBound _mt[243] other[68988])))
    (556718 'move' tmp[556713](556716 call _cond_test call_tmp[619625]))
    if tmp[556713]
    {
      unknown tmp[556720] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556722 'move' tmp[556720](69043 call low _mt[243] other[68988]))
      (556727 'move' tmp[556712](556724 '_paramFoldLogical' tmp[556713] tmp[556720]))
    }
    {
      unknown tmp[556729] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556731 'move' tmp[556729](374349 call low _mt[243] this[68993]))
      (556736 'move' tmp[556712](556733 '_paramFoldLogical' tmp[556713] tmp[556729]))
    }
    unknown tmp[556743] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556744] "maybe param" "temp"
    unknown call_tmp[619636] "expr temp" "maybe param" "maybe type" "temp"
    (619639 'move' call_tmp[619636](69055 call(69051 call (partial) hasHighBound _mt[243] other[68988])))
    (556749 'move' tmp[556744](556747 call _cond_test call_tmp[619636]))
    if tmp[556744]
    {
      unknown tmp[556751] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556753 'move' tmp[556751](69057 call high _mt[243] other[68988]))
      (556758 'move' tmp[556743](556755 '_paramFoldLogical' tmp[556744] tmp[556751]))
    }
    {
      unknown tmp[556760] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (556762 'move' tmp[556760](374353 call high _mt[243] this[68993]))
      (556767 'move' tmp[556743](556764 '_paramFoldLogical' tmp[556744] tmp[556760]))
    }
    unknown call_tmp[619647] "expr temp" "maybe param" "maybe type" "temp"
    (619650 'move' call_tmp[619647](374344 call idxType _mt[243] this[68993]))
    unknown call_tmp[619654] "expr temp" "maybe param" "maybe type" "temp"
    (619657 'move' call_tmp[619654](69065 call stride _mt[243] other[68988]))
    unknown call_tmp[619661] "expr temp" "maybe param" "maybe type" "temp"
    (619664 'move' call_tmp[619661](69069 call alignment _mt[243] other[68988]))
    unknown call_tmp[619666] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (619669 'move' call_tmp[619666](747688 'new' range[64316](?) call_tmp[619647] bounded[64205] tmp[556685] tmp[556712] tmp[556743] call_tmp[619654] call_tmp[619661] 1))
    (540949 'init var' boundedOther[69074] call_tmp[619666])
    (69077 'end of statement')
    unknown tmp[419818] "maybe param" "temp"
    unknown call_tmp[619673] "expr temp" "maybe param" "maybe type" "temp"
    (619676 'move' call_tmp[619673](69079 call size _mt[243] boundedOther[69074]))
    (419829 'move' tmp[419818](69083 call == call_tmp[619673] 0))
    unknown call_tmp[619678] "expr temp" "maybe param" "maybe type" "temp"
    (619681 'move' call_tmp[619678](419831 call _cond_invalid tmp[419818]))
    if call_tmp[619678]
    {
      (419834 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[556774] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556775] "maybe param" "temp"
    unknown call_tmp[619683] "expr temp" "maybe param" "maybe type" "temp"
    (619686 'move' call_tmp[619683](419819 call isTrue tmp[419818]))
    (556780 'move' tmp[556775](556778 call _cond_test call_tmp[619683]))
    if tmp[556775]
    {
      (556785 'move' tmp[556774](556782 '_paramFoldLogical' tmp[556775] 1))
    }
    {
      unknown tmp[556787] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619690] "expr temp" "maybe param" "maybe type" "temp"
      (619693 'move' call_tmp[619690](69088 call(374357 call (partial) contains _mt[243] this[68993]) boundedOther[69074]))
      (556789 'move' tmp[556787](419823 call isTrue call_tmp[619690]))
      (556794 'move' tmp[556774](556791 '_paramFoldLogical' tmp[556775] tmp[556787]))
    }
    (510093 'move' ret[510083](510092 'deref' tmp[556774]))
    gotoReturn _end_boundsCheck[510081] _end_boundsCheck[510081]
    (475382 'end of statement' boundedOther[69074])
    label _end_boundsCheck[510081]
    (510085 return ret[510083])
  }
  function range[64316](?).boundsCheck[69102](arg _mt[69107]:_MT[238], arg this[69104]:range[64316](?) :
  range[64316](?), arg other[69099] :
  (374363 call idxType _mt[243] this[69104])) : _unknown[51] "inline" "method"
  {
    unknown ret[510099] "RVV" "temp"
    unknown call_tmp[619699] "expr temp" "maybe param" "maybe type" "temp"
    (619702 'move' call_tmp[619699](69112 call(374367 call (partial) contains _mt[243] this[69104]) other[69099]))
    (510104 'move' ret[510099](510103 'deref' call_tmp[619699]))
    (510101 return ret[510099])
  }
  function range[64316](?).alignLow[69121](arg _mt[69126]:_MT[238], ref arg this[69123]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510108] "RVV" "temp"
    unknown tmp[419839] "maybe param" "temp"
    (419850 'move' tmp[419839] 1)
    unknown call_tmp[619704] "expr temp" "maybe param" "maybe type" "temp"
    (619707 'move' call_tmp[619704](419852 call _cond_invalid tmp[419839]))
    if call_tmp[619704]
    {
      (419855 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556801] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556802] "maybe param" "temp"
    unknown call_tmp[619709] "expr temp" "maybe param" "maybe type" "temp"
    (619712 'move' call_tmp[619709](419840 call isTrue tmp[419839]))
    (556807 'move' tmp[556802](556805 call _cond_test call_tmp[619709]))
    if tmp[556802]
    {
      unknown tmp[556809] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619716] "expr temp" "maybe param" "maybe type" "temp"
      (619719 'move' call_tmp[619716](69134 call(69130 call (partial) isAmbiguous _mt[243] this[69123])))
      (556811 'move' tmp[556809](419843 call isTrue call_tmp[619716]))
      (556816 'move' tmp[556801](556813 '_paramFoldLogical' tmp[556802] tmp[556809]))
    }
    {
      (556821 'move' tmp[556801](556818 '_paramFoldLogical' tmp[556802] 0))
    }
    unknown call_tmp[619721] "expr temp" "maybe param" "maybe type" "temp"
    (619724 'move' call_tmp[619721](69163 call _cond_test tmp[556801]))
    if call_tmp[619721]
    {
      (69161 call boundsCheckHalt module=[255] HaltWrappers[209910] "alignLow -- Cannot be applied to a range with ambiguous alignment.")
      (357602 'referenced modules list' HaltWrappers[209910])
    }
    unknown call_tmp[619728] "expr temp" "maybe param" "maybe type" "temp"
    (619731 'move' call_tmp[619728](374374 call stridable _mt[243] this[69123]))
    unknown call_tmp[619733] "expr temp" "maybe param" "maybe type" "temp"
    (619736 'move' call_tmp[619733](69178 call _cond_test call_tmp[619728]))
    if call_tmp[619733]
    {
      unknown call_tmp[619740] "expr temp" "maybe param" "maybe type" "temp"
      (619743 'move' call_tmp[619740](374379 call _low _mt[243] this[69123]))
      unknown call_tmp[619747] "expr temp" "maybe param" "maybe type" "temp"
      (619750 'move' call_tmp[619747](69172 call alignedLowAsInt _mt[243] this[69123]))
      (69175 call = call_tmp[619740] call_tmp[619747])
    }
    (510113 'move' ret[510108](510112 'deref' this[69123]))
    (510110 return ret[510108])
  }
  function range[64316](?).alignHigh[69191](arg _mt[69196]:_MT[238], ref arg this[69193]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510117] "RVV" "temp"
    unknown tmp[419860] "maybe param" "temp"
    (419871 'move' tmp[419860] 1)
    unknown call_tmp[619752] "expr temp" "maybe param" "maybe type" "temp"
    (619755 'move' call_tmp[619752](419873 call _cond_invalid tmp[419860]))
    if call_tmp[619752]
    {
      (419876 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556828] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556829] "maybe param" "temp"
    unknown call_tmp[619757] "expr temp" "maybe param" "maybe type" "temp"
    (619760 'move' call_tmp[619757](419861 call isTrue tmp[419860]))
    (556834 'move' tmp[556829](556832 call _cond_test call_tmp[619757]))
    if tmp[556829]
    {
      unknown tmp[556836] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619764] "expr temp" "maybe param" "maybe type" "temp"
      (619767 'move' call_tmp[619764](69204 call(69200 call (partial) isAmbiguous _mt[243] this[69193])))
      (556838 'move' tmp[556836](419864 call isTrue call_tmp[619764]))
      (556843 'move' tmp[556828](556840 '_paramFoldLogical' tmp[556829] tmp[556836]))
    }
    {
      (556848 'move' tmp[556828](556845 '_paramFoldLogical' tmp[556829] 0))
    }
    unknown call_tmp[619769] "expr temp" "maybe param" "maybe type" "temp"
    (619772 'move' call_tmp[619769](69231 call _cond_test tmp[556828]))
    if call_tmp[619769]
    {
      (69229 call boundsCheckHalt module=[255] HaltWrappers[209910] "alignHigh -- Cannot be applied to a range with ambiguous alignment.")
      (357610 'referenced modules list' HaltWrappers[209910])
    }
    unknown call_tmp[619776] "expr temp" "maybe param" "maybe type" "temp"
    (619779 'move' call_tmp[619776](374386 call stridable _mt[243] this[69193]))
    unknown call_tmp[619781] "expr temp" "maybe param" "maybe type" "temp"
    (619784 'move' call_tmp[619781](69246 call _cond_test call_tmp[619776]))
    if call_tmp[619781]
    {
      unknown call_tmp[619788] "expr temp" "maybe param" "maybe type" "temp"
      (619791 'move' call_tmp[619788](374391 call _high _mt[243] this[69193]))
      unknown call_tmp[619795] "expr temp" "maybe param" "maybe type" "temp"
      (619798 'move' call_tmp[619795](69240 call alignedHighAsInt _mt[243] this[69193]))
      (69243 call = call_tmp[619788] call_tmp[619795])
    }
    (510122 'move' ret[510117](510121 'deref' this[69193]))
    (510119 return ret[510117])
  }
  function range[64316](?).indexOrder[69263](arg _mt[69268]:_MT[238], arg this[69265]:range[64316](?) :
  range[64316](?), arg ind[69260] :
  (374397 call idxType _mt[243] this[69265])) : _unknown[51] "method"
  {
    unknown ret[510126] "RVV" "temp"
    unknown tmp[419881] "maybe param" "temp"
    (419892 'move' tmp[419881] 1)
    unknown call_tmp[619802] "expr temp" "maybe param" "maybe type" "temp"
    (619805 'move' call_tmp[619802](419894 call _cond_invalid tmp[419881]))
    if call_tmp[619802]
    {
      (419897 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556855] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556856] "maybe param" "temp"
    unknown call_tmp[619807] "expr temp" "maybe param" "maybe type" "temp"
    (619810 'move' call_tmp[619807](419882 call isTrue tmp[419881]))
    (556861 'move' tmp[556856](556859 call _cond_test call_tmp[619807]))
    if tmp[556856]
    {
      unknown tmp[556863] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[619814] "expr temp" "maybe param" "maybe type" "temp"
      (619817 'move' call_tmp[619814](69276 call(69272 call (partial) isAmbiguous _mt[243] this[69265])))
      (556865 'move' tmp[556863](419885 call isTrue call_tmp[619814]))
      (556870 'move' tmp[556855](556867 '_paramFoldLogical' tmp[556856] tmp[556863]))
    }
    {
      (556875 'move' tmp[556855](556872 '_paramFoldLogical' tmp[556856] 0))
    }
    unknown call_tmp[619819] "expr temp" "maybe param" "maybe type" "temp"
    (619822 'move' call_tmp[619819](69303 call _cond_test tmp[556855]))
    if call_tmp[619819]
    {
      (69301 call boundsCheckHalt module=[255] HaltWrappers[209910] "indexOrder -- Undefined on a range with ambiguous alignment.")
      (357618 'referenced modules list' HaltWrappers[209910])
    }
    unknown call_tmp[619826] "expr temp" "maybe param" "maybe type" "temp"
    (619829 'move' call_tmp[619826](69312 call(374402 call (partial) contains _mt[243] this[69265]) ind[69260]))
    unknown call_tmp[619831] "expr temp" "maybe param" "maybe type" "temp"
    (619834 'move' call_tmp[619831](69313 call ! call_tmp[619826]))
    unknown call_tmp[619836] "expr temp" "maybe param" "maybe type" "temp"
    (619839 'move' call_tmp[619836](69323 call _cond_test call_tmp[619831]))
    if call_tmp[619836]
    {
      unknown call_tmp[619843] "expr temp" "maybe param" "maybe type" "temp"
      (619846 'move' call_tmp[619843](374407 call intIdxType _mt[243] this[69265]))
      unknown call_tmp[619848] "expr temp" "maybe param" "maybe type" "temp"
      (619851 'move' call_tmp[619848](69316 call - 1))
      unknown call_tmp[619853] "expr temp" "maybe param" "maybe type" "temp"
      (619856 'move' call_tmp[619853](69319 call _cast call_tmp[619843] call_tmp[619848]))
      (510131 'move' ret[510126](510130 'deref' call_tmp[619853]))
      gotoReturn _end_indexOrder[510124] _end_indexOrder[510124]
    }
    unknown call_tmp[619860] "expr temp" "maybe param" "maybe type" "temp"
    (619863 'move' call_tmp[619860](374412 call stridable _mt[243] this[69265]))
    unknown call_tmp[619865] "expr temp" "maybe param" "maybe type" "temp"
    (619868 'move' call_tmp[619865](69329 call ! call_tmp[619860]))
    unknown call_tmp[619870] "expr temp" "maybe param" "maybe type" "temp"
    (619873 'move' call_tmp[619870](69393 call _cond_test call_tmp[619865]))
    if call_tmp[619870]
    {
      unknown call_tmp[619877] "expr temp" "maybe param" "maybe type" "temp"
      (619880 'move' call_tmp[619877](69336 call(69332 call (partial) hasLowBound _mt[243] this[69265])))
      unknown call_tmp[619882] "expr temp" "maybe param" "maybe type" "temp"
      (619885 'move' call_tmp[619882](69346 call _cond_test call_tmp[619877]))
      if call_tmp[619882]
      {
        unknown call_tmp[619887] "expr temp" "maybe param" "maybe type" "temp"
        (619890 'move' call_tmp[619887](69340 call chpl__idxToInt ind[69260]))
        unknown call_tmp[619894] "expr temp" "maybe param" "maybe type" "temp"
        (619897 'move' call_tmp[619894](374418 call _low _mt[243] this[69265]))
        unknown call_tmp[619899] "expr temp" "maybe param" "maybe type" "temp"
        (619902 'move' call_tmp[619899](69342 call - call_tmp[619887] call_tmp[619894]))
        (510136 'move' ret[510126](510135 'deref' call_tmp[619899]))
        gotoReturn _end_indexOrder[510124] _end_indexOrder[510124]
      }
    }
    {
      unknown call_tmp[619906] "expr temp" "maybe param" "maybe type" "temp"
      (619909 'move' call_tmp[619906](69359 call(69355 call (partial) hasFirst _mt[243] this[69265])))
      unknown call_tmp[619911] "expr temp" "maybe param" "maybe type" "temp"
      (619914 'move' call_tmp[619911](69387 call _cond_test call_tmp[619906]))
      if call_tmp[619911]
      {
        unknown call_tmp[619918] "expr temp" "maybe param" "maybe type" "temp"
        (619921 'move' call_tmp[619918](374436 call intIdxType _mt[243] this[69265]))
        unknown call_tmp[619925] "expr temp" "maybe param" "maybe type" "temp"
        (619928 'move' call_tmp[619925](374423 call strType _mt[243] this[69265]))
        unknown call_tmp[619930] "expr temp" "maybe param" "maybe type" "temp"
        (619933 'move' call_tmp[619930](69363 call chpl__idxToInt ind[69260]))
        unknown call_tmp[619935] "expr temp" "maybe param" "maybe type" "temp"
        (619938 'move' call_tmp[619935](69365 call _cast call_tmp[619925] call_tmp[619930]))
        unknown call_tmp[619942] "expr temp" "maybe param" "maybe type" "temp"
        (619945 'move' call_tmp[619942](374427 call strType _mt[243] this[69265]))
        unknown call_tmp[619949] "expr temp" "maybe param" "maybe type" "temp"
        (619952 'move' call_tmp[619949](69369 call first _mt[243] this[69265]))
        unknown call_tmp[619954] "expr temp" "maybe param" "maybe type" "temp"
        (619957 'move' call_tmp[619954](69373 call chpl__idxToInt call_tmp[619949]))
        unknown call_tmp[619959] "expr temp" "maybe param" "maybe type" "temp"
        (619962 'move' call_tmp[619959](69375 call _cast call_tmp[619942] call_tmp[619954]))
        unknown call_tmp[619964] "expr temp" "maybe param" "maybe type" "temp"
        (619967 'move' call_tmp[619964](69377 call - call_tmp[619935] call_tmp[619959]))
        unknown call_tmp[619971] "expr temp" "maybe param" "maybe type" "temp"
        (619974 'move' call_tmp[619971](374432 call _stride _mt[243] this[69265]))
        unknown call_tmp[619976] "expr temp" "maybe param" "maybe type" "temp"
        (619979 'move' call_tmp[619976](69380 call / call_tmp[619964] call_tmp[619971]))
        unknown call_tmp[619981] "expr temp" "maybe param" "maybe type" "temp"
        (619984 'move' call_tmp[619981](69383 call _cast call_tmp[619918] call_tmp[619976]))
        (510141 'move' ret[510126](510140 'deref' call_tmp[619981]))
        gotoReturn _end_indexOrder[510124] _end_indexOrder[510124]
      }
    }
    unknown call_tmp[619988] "expr temp" "maybe param" "maybe type" "temp"
    (619991 'move' call_tmp[619988](374440 call intIdxType _mt[243] this[69265]))
    unknown call_tmp[619993] "expr temp" "maybe param" "maybe type" "temp"
    (619996 'move' call_tmp[619993](69398 call - 1))
    unknown call_tmp[619998] "expr temp" "maybe param" "maybe type" "temp"
    (620001 'move' call_tmp[619998](69401 call _cast call_tmp[619988] call_tmp[619993]))
    (510146 'move' ret[510126](510145 'deref' call_tmp[619998]))
    label _end_indexOrder[510124]
    (510128 return ret[510126])
  }
  function range[64316](?).orderToIndex[69414](arg _mt[69419]:_MT[238], arg this[69416]:range[64316](?) :
  range[64316](?), arg ord[69411]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510150] "RVV" "temp"
    unknown call_tmp[620003] "expr temp" "maybe param" "maybe type" "temp"
    (620006 'move' call_tmp[620003](69605 call _cond_test 1))
    if call_tmp[620003]
    {
      unknown call_tmp[620010] "expr temp" "maybe param" "maybe type" "temp"
      (620013 'move' call_tmp[620010](69425 call(374451 call (partial) hasFirst _mt[243] this[69416])))
      unknown call_tmp[620015] "expr temp" "maybe param" "maybe type" "temp"
      (620018 'move' call_tmp[620015](69426 call ! call_tmp[620010]))
      unknown call_tmp[620020] "expr temp" "maybe param" "maybe type" "temp"
      (620023 'move' call_tmp[620020](69452 call _cond_test call_tmp[620015]))
      if call_tmp[620020]
      {
        (69450 call boundsCheckHalt module=[255] HaltWrappers[209910] "invoking orderToIndex on a range that has no first index")
        (357627 'referenced modules list' HaltWrappers[209910])
      }
      unknown call_tmp[620027] "expr temp" "maybe param" "maybe type" "temp"
      (620030 'move' call_tmp[620027](69460 call(374455 call (partial) isAmbiguous _mt[243] this[69416])))
      unknown call_tmp[620032] "expr temp" "maybe param" "maybe type" "temp"
      (620035 'move' call_tmp[620032](69485 call _cond_test call_tmp[620027]))
      if call_tmp[620032]
      {
        (69483 call boundsCheckHalt module=[255] HaltWrappers[209910] "invoking orderToIndex on a range that is ambiguously aligned")
        (357633 'referenced modules list' HaltWrappers[209910])
      }
      unknown call_tmp[620037] "expr temp" "maybe param" "maybe type" "temp"
      (620040 'move' call_tmp[620037](69492 call < ord[69411] 0))
      unknown call_tmp[620042] "expr temp" "maybe param" "maybe type" "temp"
      (620045 'move' call_tmp[620042](69524 call _cond_test call_tmp[620037]))
      if call_tmp[620042]
      {
        unknown call_tmp[620047] "expr temp" "maybe param" "maybe type" "temp"
        (620050 'move' call_tmp[620047](69517 call _cast string[26] ord[69411]))
        unknown call_tmp[620052] "expr temp" "maybe param" "maybe type" "temp"
        (620055 'move' call_tmp[620052](69519 call + "invoking orderToIndex on a negative integer: " call_tmp[620047]))
        (69522 call boundsCheckHalt module=[255] HaltWrappers[209910] call_tmp[620052])
        (357639 'referenced modules list' HaltWrappers[209910])
      }
      unknown tmp[419902] "maybe param" "temp"
      (419913 'move' tmp[419902](69532 call isBoundedRange this[69416]))
      unknown call_tmp[620057] "expr temp" "maybe param" "maybe type" "temp"
      (620060 'move' call_tmp[620057](419915 call _cond_invalid tmp[419902]))
      if call_tmp[620057]
      {
        (419918 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556882] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556883] "maybe param" "temp"
      unknown call_tmp[620062] "expr temp" "maybe param" "maybe type" "temp"
      (620065 'move' call_tmp[620062](419903 call isTrue tmp[419902]))
      (556888 'move' tmp[556883](556886 call _cond_test call_tmp[620062]))
      if tmp[556883]
      {
        unknown tmp[556890] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[620069] "expr temp" "maybe param" "maybe type" "temp"
        (620072 'move' call_tmp[620069](69535 call size _mt[243] this[69416]))
        unknown call_tmp[620074] "expr temp" "maybe param" "maybe type" "temp"
        (620077 'move' call_tmp[620074](69538 call >= ord[69411] call_tmp[620069]))
        (556892 'move' tmp[556890](419906 call isTrue call_tmp[620074]))
        (556897 'move' tmp[556882](556894 '_paramFoldLogical' tmp[556883] tmp[556890]))
      }
      {
        (556902 'move' tmp[556882](556899 '_paramFoldLogical' tmp[556883] 0))
      }
      unknown call_tmp[620079] "expr temp" "maybe param" "maybe type" "temp"
      (620082 'move' call_tmp[620079](69600 call _cond_test tmp[556882]))
      if call_tmp[620079]
      {
        unknown call_tmp[620084] "expr temp" "maybe param" "maybe type" "temp"
        (620087 'move' call_tmp[620084](69565 call _cast string[26] ord[69411]))
        unknown call_tmp[620089] "expr temp" "maybe param" "maybe type" "temp"
        (620092 'move' call_tmp[620089](69567 call + "invoking orderToIndex on an integer " call_tmp[620084]))
        unknown call_tmp[620094] "expr temp" "maybe param" "maybe type" "temp"
        (620097 'move' call_tmp[620094](69586 call + call_tmp[620089] " that is larger than the range's number of indices "))
        unknown call_tmp[620101] "expr temp" "maybe param" "maybe type" "temp"
        (620104 'move' call_tmp[620101](69589 call size _mt[243] this[69416]))
        unknown call_tmp[620106] "expr temp" "maybe param" "maybe type" "temp"
        (620109 'move' call_tmp[620106](69593 call _cast string[26] call_tmp[620101]))
        unknown call_tmp[620111] "expr temp" "maybe param" "maybe type" "temp"
        (620114 'move' call_tmp[620111](69595 call + call_tmp[620094] call_tmp[620106]))
        (69598 call boundsCheckHalt module=[255] HaltWrappers[209910] call_tmp[620111])
        (357646 'referenced modules list' HaltWrappers[209910])
      }
    }
    unknown call_tmp[620120] "expr temp" "maybe param" "maybe type" "temp"
    (620123 'move' call_tmp[620120](69613 call firstAsInt _mt[243] this[69416]))
    unknown call_tmp[620127] "expr temp" "maybe param" "maybe type" "temp"
    (620130 'move' call_tmp[620127](69618 call stride _mt[243] this[69416]))
    unknown call_tmp[620132] "expr temp" "maybe param" "maybe type" "temp"
    (620135 'move' call_tmp[620132](69622 call chpl__addRangeStrides call_tmp[620120] call_tmp[620127] ord[69411]))
    unknown call_tmp[620137] "expr temp" "maybe param" "maybe type" "temp"
    (620140 'move' call_tmp[620137](69624 call(374464 call (partial) chpl_intToIdx _mt[243] this[69416]) call_tmp[620132]))
    unknown call_tmp[620144] "expr temp" "maybe param" "maybe type" "temp"
    (620147 'move' call_tmp[620144](510155 call idxType _mt[243] this[69416]))
    (510159 'move' ret[510150](510158 'coerce' call_tmp[620137] call_tmp[620144]))
    (510152 return ret[510150])
  }
  { scopeless type
    (374446 call idxType _mt[243] this[69416])
  }
  function range[64316](?).translate[69637](arg _mt[69642]:_MT[238], arg this[69639]:range[64316](?) :
  range[64316](?), arg offset[69634]:integral[199](?)) : _unknown[51] "inline" "method"
  {
    unknown ret[510163] "RVV" "temp"
    unknown call_tmp[620151] "expr temp" "maybe param" "maybe type" "temp"
    (620154 'move' call_tmp[620151](69646 call + this[69639] offset[69634]))
    (510168 'move' ret[510163](510167 'deref' call_tmp[620151]))
    (510165 return ret[510163])
  }
  function range[64316](?).translate[69658](arg _mt[69663]:_MT[238], arg this[69660]:range[64316](?) :
  range[64316](?), arg i[69656]:_any[178](?)) : _unknown[51] "inline" "method" "no doc" "no return value for void"
  {
    (69684 call compilerError "offsets must be of integral type")
    (510170 return _void[55])
  }
  function range[64316](?)._effAlmt[69692](arg _mt[69697]:_MT[238], arg this[69694]:range[64316](?) :
  range[64316](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[510174] "RVV" "temp"
    unknown call_tmp[620158] "expr temp" "maybe param" "maybe type" "temp"
    (620161 'move' call_tmp[620158](374477 call alignment _mt[243] this[69694]))
    (510179 'move' ret[510174](510178 'deref' call_tmp[620158]))
    (510176 return ret[510174])
  }
  where {
    (374473 call stridable _mt[243] this[69694])
  }
  function range[64316](?)._effAlmt[69710](arg _mt[69715]:_MT[238], arg this[69712]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510183] "RVV" "temp"
    unknown call_tmp[620167] "expr temp" "maybe param" "maybe type" "temp"
    (620170 'move' call_tmp[620167](69723 call(374486 call (partial) chpl_intToIdx _mt[243] this[69712]) 0))
    (510188 'move' ret[510183](510187 'deref' call_tmp[620167]))
    (510185 return ret[510183])
  }
  where {
    unknown call_tmp[620174] "expr temp" "maybe param" "maybe type" "temp"
    (620177 'move' call_tmp[620174](374482 call stridable _mt[243] this[69712]))
    (69718 call ! call_tmp[620174])
  }
  function range[64316](?).interior[69737](arg _mt[69742]:_MT[238], arg this[69739]:range[64316](?) :
  range[64316](?), arg offset[69734]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69770 call compilerError "interior is not supported on unbounded ranges")
    (510190 return _void[55])
  }
  where {
    unknown call_tmp[620181] "expr temp" "maybe param" "maybe type" "temp"
    (620184 'move' call_tmp[620181](374492 call boundedType _mt[243] this[69739]))
    (69749 call != call_tmp[620181] bounded[64205])
  }
  function range[64316](?).interior[69783](arg _mt[69788]:_MT[238], arg this[69785]:range[64316](?) :
  range[64316](?), arg offset[69780]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510194] "RVV" "temp"
    unknown call_tmp[620190] "expr temp" "maybe param" "maybe type" "temp"
    (620193 'move' call_tmp[620190](374497 call intIdxType _mt[243] this[69785]))
    unknown call_tmp[620195] "maybe param" "maybe type" "temp"
    (620198 'move' call_tmp[620195](69796 call(69791 call (partial) safeCast _mt[243] offset[69780]) call_tmp[620190]))
    const i[69797] "dead at end of block" "const" "insert auto destroy"
    (540951 'init var' i[69797] call_tmp[620195])
    (69800 'end of statement')
    unknown call_tmp[620200] "expr temp" "maybe param" "maybe type" "temp"
    (620203 'move' call_tmp[620200](69804 call < i[69797] 0))
    unknown call_tmp[620205] "expr temp" "maybe param" "maybe type" "temp"
    (620208 'move' call_tmp[620205](69831 call _cond_test call_tmp[620200]))
    if call_tmp[620205]
    {
      unknown call_tmp[620212] "expr temp" "maybe param" "maybe type" "temp"
      (620215 'move' call_tmp[620212](374504 call idxType _mt[243] this[69785]))
      unknown call_tmp[620219] "expr temp" "maybe param" "maybe type" "temp"
      (620222 'move' call_tmp[620219](374509 call boundedType _mt[243] this[69785]))
      unknown call_tmp[620226] "expr temp" "maybe param" "maybe type" "temp"
      (620229 'move' call_tmp[620226](374514 call stridable _mt[243] this[69785]))
      unknown call_tmp[620233] "expr temp" "maybe param" "maybe type" "temp"
      (620236 'move' call_tmp[620233](374518 call low _mt[243] this[69785]))
      unknown call_tmp[620242] "expr temp" "maybe param" "maybe type" "temp"
      (620245 'move' call_tmp[620242](374527 call _low _mt[243] this[69785]))
      unknown call_tmp[620247] "expr temp" "maybe param" "maybe type" "temp"
      (620250 'move' call_tmp[620247](69816 call - call_tmp[620242] 1))
      unknown call_tmp[620252] "expr temp" "maybe param" "maybe type" "temp"
      (620255 'move' call_tmp[620252](69819 call - call_tmp[620247] i[69797]))
      unknown call_tmp[620257] "expr temp" "maybe param" "maybe type" "temp"
      (620260 'move' call_tmp[620257](69822 call(374522 call (partial) chpl_intToIdx _mt[243] this[69785]) call_tmp[620252]))
      unknown call_tmp[620264] "expr temp" "maybe param" "maybe type" "temp"
      (620267 'move' call_tmp[620264](374532 call stride _mt[243] this[69785]))
      unknown call_tmp[620271] "expr temp" "maybe param" "maybe type" "temp"
      (620274 'move' call_tmp[620271](69826 call(374538 call (partial) _effAlmt _mt[243] this[69785])))
      unknown call_tmp[620278] "expr temp" "maybe param" "maybe type" "temp"
      (620281 'move' call_tmp[620278](374542 call aligned _mt[243] this[69785]))
      unknown call_tmp[620283] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620286 'move' call_tmp[620283](747689 'new' range[64316](?) call_tmp[620212] call_tmp[620219] call_tmp[620226] call_tmp[620233] call_tmp[620257] call_tmp[620264] call_tmp[620271] call_tmp[620278]))
      (510199 'move' ret[510194](510198 'deref' call_tmp[620283]))
      gotoReturn _end_interior[510192] _end_interior[510192]
      (475410 'end of statement' i[69797])
    }
    unknown call_tmp[620288] "expr temp" "maybe param" "maybe type" "temp"
    (620291 'move' call_tmp[620288](69838 call > i[69797] 0))
    unknown call_tmp[620293] "expr temp" "maybe param" "maybe type" "temp"
    (620296 'move' call_tmp[620293](69865 call _cond_test call_tmp[620288]))
    if call_tmp[620293]
    {
      unknown call_tmp[620300] "expr temp" "maybe param" "maybe type" "temp"
      (620303 'move' call_tmp[620300](374549 call idxType _mt[243] this[69785]))
      unknown call_tmp[620307] "expr temp" "maybe param" "maybe type" "temp"
      (620310 'move' call_tmp[620307](374554 call boundedType _mt[243] this[69785]))
      unknown call_tmp[620314] "expr temp" "maybe param" "maybe type" "temp"
      (620317 'move' call_tmp[620314](374559 call stridable _mt[243] this[69785]))
      unknown call_tmp[620323] "expr temp" "maybe param" "maybe type" "temp"
      (620326 'move' call_tmp[620323](374568 call _high _mt[243] this[69785]))
      unknown call_tmp[620328] "expr temp" "maybe param" "maybe type" "temp"
      (620331 'move' call_tmp[620328](69849 call + call_tmp[620323] 1))
      unknown call_tmp[620333] "expr temp" "maybe param" "maybe type" "temp"
      (620336 'move' call_tmp[620333](69852 call - call_tmp[620328] i[69797]))
      unknown call_tmp[620338] "expr temp" "maybe param" "maybe type" "temp"
      (620341 'move' call_tmp[620338](69855 call(374563 call (partial) chpl_intToIdx _mt[243] this[69785]) call_tmp[620333]))
      unknown call_tmp[620345] "expr temp" "maybe param" "maybe type" "temp"
      (620348 'move' call_tmp[620345](374573 call high _mt[243] this[69785]))
      unknown call_tmp[620352] "expr temp" "maybe param" "maybe type" "temp"
      (620355 'move' call_tmp[620352](374577 call stride _mt[243] this[69785]))
      unknown call_tmp[620359] "expr temp" "maybe param" "maybe type" "temp"
      (620362 'move' call_tmp[620359](69860 call(374581 call (partial) _effAlmt _mt[243] this[69785])))
      unknown call_tmp[620366] "expr temp" "maybe param" "maybe type" "temp"
      (620369 'move' call_tmp[620366](374585 call aligned _mt[243] this[69785]))
      unknown call_tmp[620371] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620374 'move' call_tmp[620371](747690 'new' range[64316](?) call_tmp[620300] call_tmp[620307] call_tmp[620314] call_tmp[620338] call_tmp[620345] call_tmp[620352] call_tmp[620359] call_tmp[620366]))
      (510204 'move' ret[510194](510203 'deref' call_tmp[620371]))
      gotoReturn _end_interior[510192] _end_interior[510192]
      (475412 'end of statement' i[69797])
    }
    unknown call_tmp[620378] "expr temp" "maybe param" "maybe type" "temp"
    (620381 'move' call_tmp[620378](374591 call idxType _mt[243] this[69785]))
    unknown call_tmp[620385] "expr temp" "maybe param" "maybe type" "temp"
    (620388 'move' call_tmp[620385](374596 call boundedType _mt[243] this[69785]))
    unknown call_tmp[620392] "expr temp" "maybe param" "maybe type" "temp"
    (620395 'move' call_tmp[620392](374601 call stridable _mt[243] this[69785]))
    unknown call_tmp[620399] "expr temp" "maybe param" "maybe type" "temp"
    (620402 'move' call_tmp[620399](374605 call low _mt[243] this[69785]))
    unknown call_tmp[620406] "expr temp" "maybe param" "maybe type" "temp"
    (620409 'move' call_tmp[620406](374609 call high _mt[243] this[69785]))
    unknown call_tmp[620413] "expr temp" "maybe param" "maybe type" "temp"
    (620416 'move' call_tmp[620413](374613 call stride _mt[243] this[69785]))
    unknown call_tmp[620420] "expr temp" "maybe param" "maybe type" "temp"
    (620423 'move' call_tmp[620420](69881 call(374617 call (partial) _effAlmt _mt[243] this[69785])))
    unknown call_tmp[620427] "expr temp" "maybe param" "maybe type" "temp"
    (620430 'move' call_tmp[620427](374621 call aligned _mt[243] this[69785]))
    unknown call_tmp[620432] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620435 'move' call_tmp[620432](747691 'new' range[64316](?) call_tmp[620378] call_tmp[620385] call_tmp[620392] call_tmp[620399] call_tmp[620406] call_tmp[620413] call_tmp[620420] call_tmp[620427]))
    (510209 'move' ret[510194](510208 'deref' call_tmp[620432]))
    label _end_interior[510192]
    (510196 return ret[510194])
  }
  function range[64316](?).exterior[69895](arg _mt[69900]:_MT[238], arg this[69897]:range[64316](?) :
  range[64316](?), arg offset[69892]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (69928 call compilerError "exterior is not supported on unbounded ranges")
    (510211 return _void[55])
  }
  where {
    unknown call_tmp[620439] "expr temp" "maybe param" "maybe type" "temp"
    (620442 'move' call_tmp[620439](374627 call boundedType _mt[243] this[69897]))
    (69907 call != call_tmp[620439] bounded[64205])
  }
  function range[64316](?).exterior[69941](arg _mt[69946]:_MT[238], arg this[69943]:range[64316](?) :
  range[64316](?), arg offset[69938]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510215] "RVV" "temp"
    unknown call_tmp[620448] "expr temp" "maybe param" "maybe type" "temp"
    (620451 'move' call_tmp[620448](374632 call intIdxType _mt[243] this[69943]))
    unknown call_tmp[620453] "maybe param" "maybe type" "temp"
    (620456 'move' call_tmp[620453](69954 call(69949 call (partial) safeCast _mt[243] offset[69938]) call_tmp[620448]))
    const i[69955] "dead at end of block" "const" "insert auto destroy"
    (540953 'init var' i[69955] call_tmp[620453])
    (69958 'end of statement')
    unknown call_tmp[620458] "expr temp" "maybe param" "maybe type" "temp"
    (620461 'move' call_tmp[620458](69962 call < i[69955] 0))
    unknown call_tmp[620463] "expr temp" "maybe param" "maybe type" "temp"
    (620466 'move' call_tmp[620463](69992 call _cond_test call_tmp[620458]))
    if call_tmp[620463]
    {
      unknown call_tmp[620470] "expr temp" "maybe param" "maybe type" "temp"
      (620473 'move' call_tmp[620470](374639 call idxType _mt[243] this[69943]))
      unknown call_tmp[620477] "expr temp" "maybe param" "maybe type" "temp"
      (620480 'move' call_tmp[620477](374644 call boundedType _mt[243] this[69943]))
      unknown call_tmp[620484] "expr temp" "maybe param" "maybe type" "temp"
      (620487 'move' call_tmp[620484](374649 call stridable _mt[243] this[69943]))
      unknown call_tmp[620493] "expr temp" "maybe param" "maybe type" "temp"
      (620496 'move' call_tmp[620493](374658 call _low _mt[243] this[69943]))
      unknown call_tmp[620498] "expr temp" "maybe param" "maybe type" "temp"
      (620501 'move' call_tmp[620498](69973 call + call_tmp[620493] i[69955]))
      unknown call_tmp[620503] "expr temp" "maybe param" "maybe type" "temp"
      (620506 'move' call_tmp[620503](69976 call(374653 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620498]))
      unknown call_tmp[620512] "expr temp" "maybe param" "maybe type" "temp"
      (620515 'move' call_tmp[620512](374668 call _low _mt[243] this[69943]))
      unknown call_tmp[620517] "expr temp" "maybe param" "maybe type" "temp"
      (620520 'move' call_tmp[620517](69980 call - call_tmp[620512] 1))
      unknown call_tmp[620522] "expr temp" "maybe param" "maybe type" "temp"
      (620525 'move' call_tmp[620522](69983 call(374663 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620517]))
      unknown call_tmp[620529] "expr temp" "maybe param" "maybe type" "temp"
      (620532 'move' call_tmp[620529](374672 call stride _mt[243] this[69943]))
      unknown call_tmp[620536] "expr temp" "maybe param" "maybe type" "temp"
      (620539 'move' call_tmp[620536](69987 call(374676 call (partial) _effAlmt _mt[243] this[69943])))
      unknown call_tmp[620543] "expr temp" "maybe param" "maybe type" "temp"
      (620546 'move' call_tmp[620543](374680 call aligned _mt[243] this[69943]))
      unknown call_tmp[620548] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620551 'move' call_tmp[620548](747692 'new' range[64316](?) call_tmp[620470] call_tmp[620477] call_tmp[620484] call_tmp[620503] call_tmp[620522] call_tmp[620529] call_tmp[620536] call_tmp[620543]))
      (510220 'move' ret[510215](510219 'deref' call_tmp[620548]))
      gotoReturn _end_exterior[510213] _end_exterior[510213]
      (475416 'end of statement' i[69955])
    }
    unknown call_tmp[620553] "expr temp" "maybe param" "maybe type" "temp"
    (620556 'move' call_tmp[620553](69999 call > i[69955] 0))
    unknown call_tmp[620558] "expr temp" "maybe param" "maybe type" "temp"
    (620561 'move' call_tmp[620558](70029 call _cond_test call_tmp[620553]))
    if call_tmp[620558]
    {
      unknown call_tmp[620565] "expr temp" "maybe param" "maybe type" "temp"
      (620568 'move' call_tmp[620565](374687 call idxType _mt[243] this[69943]))
      unknown call_tmp[620572] "expr temp" "maybe param" "maybe type" "temp"
      (620575 'move' call_tmp[620572](374692 call boundedType _mt[243] this[69943]))
      unknown call_tmp[620579] "expr temp" "maybe param" "maybe type" "temp"
      (620582 'move' call_tmp[620579](374697 call stridable _mt[243] this[69943]))
      unknown call_tmp[620588] "expr temp" "maybe param" "maybe type" "temp"
      (620591 'move' call_tmp[620588](374706 call _high _mt[243] this[69943]))
      unknown call_tmp[620593] "expr temp" "maybe param" "maybe type" "temp"
      (620596 'move' call_tmp[620593](70010 call + call_tmp[620588] 1))
      unknown call_tmp[620598] "expr temp" "maybe param" "maybe type" "temp"
      (620601 'move' call_tmp[620598](70013 call(374701 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620593]))
      unknown call_tmp[620607] "expr temp" "maybe param" "maybe type" "temp"
      (620610 'move' call_tmp[620607](374715 call _high _mt[243] this[69943]))
      unknown call_tmp[620612] "expr temp" "maybe param" "maybe type" "temp"
      (620615 'move' call_tmp[620612](70017 call + call_tmp[620607] i[69955]))
      unknown call_tmp[620617] "expr temp" "maybe param" "maybe type" "temp"
      (620620 'move' call_tmp[620617](70020 call(374710 call (partial) chpl_intToIdx _mt[243] this[69943]) call_tmp[620612]))
      unknown call_tmp[620624] "expr temp" "maybe param" "maybe type" "temp"
      (620627 'move' call_tmp[620624](374720 call stride _mt[243] this[69943]))
      unknown call_tmp[620631] "expr temp" "maybe param" "maybe type" "temp"
      (620634 'move' call_tmp[620631](70024 call(374724 call (partial) _effAlmt _mt[243] this[69943])))
      unknown call_tmp[620638] "expr temp" "maybe param" "maybe type" "temp"
      (620641 'move' call_tmp[620638](374728 call aligned _mt[243] this[69943]))
      unknown call_tmp[620643] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (620646 'move' call_tmp[620643](747693 'new' range[64316](?) call_tmp[620565] call_tmp[620572] call_tmp[620579] call_tmp[620598] call_tmp[620617] call_tmp[620624] call_tmp[620631] call_tmp[620638]))
      (510225 'move' ret[510215](510224 'deref' call_tmp[620643]))
      gotoReturn _end_exterior[510213] _end_exterior[510213]
      (475418 'end of statement' i[69955])
    }
    unknown call_tmp[620650] "expr temp" "maybe param" "maybe type" "temp"
    (620653 'move' call_tmp[620650](374734 call idxType _mt[243] this[69943]))
    unknown call_tmp[620657] "expr temp" "maybe param" "maybe type" "temp"
    (620660 'move' call_tmp[620657](374739 call boundedType _mt[243] this[69943]))
    unknown call_tmp[620664] "expr temp" "maybe param" "maybe type" "temp"
    (620667 'move' call_tmp[620664](374744 call stridable _mt[243] this[69943]))
    unknown call_tmp[620671] "expr temp" "maybe param" "maybe type" "temp"
    (620674 'move' call_tmp[620671](374748 call low _mt[243] this[69943]))
    unknown call_tmp[620678] "expr temp" "maybe param" "maybe type" "temp"
    (620681 'move' call_tmp[620678](374752 call high _mt[243] this[69943]))
    unknown call_tmp[620685] "expr temp" "maybe param" "maybe type" "temp"
    (620688 'move' call_tmp[620685](374756 call stride _mt[243] this[69943]))
    unknown call_tmp[620692] "expr temp" "maybe param" "maybe type" "temp"
    (620695 'move' call_tmp[620692](70045 call(374760 call (partial) _effAlmt _mt[243] this[69943])))
    unknown call_tmp[620699] "expr temp" "maybe param" "maybe type" "temp"
    (620702 'move' call_tmp[620699](374764 call aligned _mt[243] this[69943]))
    unknown call_tmp[620704] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620707 'move' call_tmp[620704](747694 'new' range[64316](?) call_tmp[620650] call_tmp[620657] call_tmp[620664] call_tmp[620671] call_tmp[620678] call_tmp[620685] call_tmp[620692] call_tmp[620699]))
    (510230 'move' ret[510215](510229 'deref' call_tmp[620704]))
    label _end_exterior[510213]
    (510217 return ret[510215])
  }
  function range[64316](?).expand[70059](arg _mt[70064]:_MT[238], arg this[70061]:range[64316](?) :
  range[64316](?), arg offset[70056]:integral[199](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    (70092 call compilerError "expand() is not supported on unbounded ranges")
    (510232 return _void[55])
  }
  where {
    unknown call_tmp[620711] "expr temp" "maybe param" "maybe type" "temp"
    (620714 'move' call_tmp[620711](374770 call boundedType _mt[243] this[70061]))
    (70071 call != call_tmp[620711] bounded[64205])
  }
  function range[64316](?).expand[70105](arg _mt[70110]:_MT[238], arg this[70107]:range[64316](?) :
  range[64316](?), arg offset[70102]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510236] "RVV" "temp"
    unknown call_tmp[620720] "expr temp" "maybe param" "maybe type" "temp"
    (620723 'move' call_tmp[620720](374775 call intIdxType _mt[243] this[70107]))
    unknown call_tmp[620725] "maybe param" "maybe type" "temp"
    (620728 'move' call_tmp[620725](70118 call(70113 call (partial) safeCast _mt[243] offset[70102]) call_tmp[620720]))
    const i[70119] "dead at end of block" "const" "insert auto destroy"
    (540955 'init var' i[70119] call_tmp[620725])
    (70122 'end of statement')
    unknown call_tmp[620732] "expr temp" "maybe param" "maybe type" "temp"
    (620735 'move' call_tmp[620732](374781 call idxType _mt[243] this[70107]))
    unknown call_tmp[620739] "expr temp" "maybe param" "maybe type" "temp"
    (620742 'move' call_tmp[620739](374786 call boundedType _mt[243] this[70107]))
    unknown call_tmp[620746] "expr temp" "maybe param" "maybe type" "temp"
    (620749 'move' call_tmp[620746](374791 call stridable _mt[243] this[70107]))
    unknown call_tmp[620755] "expr temp" "maybe param" "maybe type" "temp"
    (620758 'move' call_tmp[620755](374800 call _low _mt[243] this[70107]))
    unknown call_tmp[620760] "expr temp" "maybe param" "maybe type" "temp"
    (620763 'move' call_tmp[620760](70133 call - call_tmp[620755] i[70119]))
    unknown call_tmp[620765] "expr temp" "maybe param" "maybe type" "temp"
    (620768 'move' call_tmp[620765](70136 call(374795 call (partial) chpl_intToIdx _mt[243] this[70107]) call_tmp[620760]))
    unknown call_tmp[620774] "expr temp" "maybe param" "maybe type" "temp"
    (620777 'move' call_tmp[620774](374810 call _high _mt[243] this[70107]))
    unknown call_tmp[620779] "expr temp" "maybe param" "maybe type" "temp"
    (620782 'move' call_tmp[620779](70140 call + call_tmp[620774] i[70119]))
    unknown call_tmp[620784] "expr temp" "maybe param" "maybe type" "temp"
    (620787 'move' call_tmp[620784](70143 call(374805 call (partial) chpl_intToIdx _mt[243] this[70107]) call_tmp[620779]))
    unknown call_tmp[620791] "expr temp" "maybe param" "maybe type" "temp"
    (620794 'move' call_tmp[620791](374815 call stride _mt[243] this[70107]))
    unknown call_tmp[620798] "expr temp" "maybe param" "maybe type" "temp"
    (620801 'move' call_tmp[620798](374819 call alignment _mt[243] this[70107]))
    unknown call_tmp[620805] "expr temp" "maybe param" "maybe type" "temp"
    (620808 'move' call_tmp[620805](374824 call _aligned _mt[243] this[70107]))
    unknown call_tmp[620810] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (620813 'move' call_tmp[620810](747695 'new' range[64316](?) call_tmp[620732] call_tmp[620739] call_tmp[620746] call_tmp[620765] call_tmp[620784] call_tmp[620791] call_tmp[620798] call_tmp[620805]))
    (510241 'move' ret[510236](510240 'deref' call_tmp[620810]))
    gotoReturn _end_expand[510234] _end_expand[510234]
    (475422 'end of statement' i[70119] i[70119])
    label _end_expand[510234]
    (510238 return ret[510236])
  }
  function =[70163](ref arg r1[70160]:range[64316](?), arg r2[70171]:range[64316](?)) : _unknown[51] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[620817] "expr temp" "maybe param" "maybe type" "temp"
    (620820 'move' call_tmp[620817](70175 call boundedType _mt[243] r1[70160]))
    unknown call_tmp[620824] "expr temp" "maybe param" "maybe type" "temp"
    (620827 'move' call_tmp[620824](70179 call boundedType _mt[243] r2[70171]))
    unknown call_tmp[620829] "expr temp" "maybe param" "maybe type" "temp"
    (620832 'move' call_tmp[620829](70182 call != call_tmp[620817] call_tmp[620824]))
    unknown call_tmp[620834] "expr temp" "maybe param" "maybe type" "temp"
    (620837 'move' call_tmp[620834](70207 call _cond_test call_tmp[620829]))
    if call_tmp[620834]
    {
      (70205 call compilerError "type mismatch in assignment of ranges with different boundedType parameters")
    }
    unknown tmp[419944] "maybe param" "temp"
    unknown call_tmp[620839] "expr temp" "maybe param" "maybe type" "temp"
    (620842 'move' call_tmp[620839](455692 'query' r1[70160] c"stridable"))
    (419955 'move' tmp[419944](70214 call ! call_tmp[620839]))
    unknown call_tmp[620844] "expr temp" "maybe param" "maybe type" "temp"
    (620847 'move' call_tmp[620844](419957 call _cond_invalid tmp[419944]))
    if call_tmp[620844]
    {
      (419960 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556909] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556910] "maybe param" "temp"
    unknown call_tmp[620849] "expr temp" "maybe param" "maybe type" "temp"
    (620852 'move' call_tmp[620849](419945 call isTrue tmp[419944]))
    (556915 'move' tmp[556910](556913 call _cond_test call_tmp[620849]))
    if tmp[556910]
    {
      unknown tmp[556917] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[620854] "expr temp" "maybe param" "maybe type" "temp"
      (620857 'move' call_tmp[620854](455712 'query' r2[70171] c"stridable"))
      (556919 'move' tmp[556917](419948 call isTrue call_tmp[620854]))
      (556924 'move' tmp[556909](556921 '_paramFoldLogical' tmp[556910] tmp[556917]))
    }
    {
      (556929 'move' tmp[556909](556926 '_paramFoldLogical' tmp[556910] 0))
    }
    unknown call_tmp[620859] "expr temp" "maybe param" "maybe type" "temp"
    (620862 'move' call_tmp[620859](70275 call _cond_test tmp[556909]))
    if call_tmp[620859]
    {
      (70238 call compilerError "type mismatch in assignment of ranges with different stridable parameters")
    }
    {
      unknown tmp[419923] "maybe param" "temp"
      (419934 'move' tmp[419923](455695 'query' r1[70160] c"stridable"))
      unknown call_tmp[620864] "expr temp" "maybe param" "maybe type" "temp"
      (620867 'move' call_tmp[620864](419936 call _cond_invalid tmp[419923]))
      if call_tmp[620864]
      {
        (419939 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556936] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556937] "maybe param" "temp"
      unknown call_tmp[620869] "expr temp" "maybe param" "maybe type" "temp"
      (620872 'move' call_tmp[620869](419924 call isTrue tmp[419923]))
      (556942 'move' tmp[556937](556940 call _cond_test call_tmp[620869]))
      if tmp[556937]
      {
        unknown tmp[556944] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[620874] "expr temp" "maybe param" "maybe type" "temp"
        (620877 'move' call_tmp[620874](455715 'query' r2[70171] c"stridable"))
        (556946 'move' tmp[556944](419927 call isTrue call_tmp[620874]))
        (556951 'move' tmp[556936](556948 '_paramFoldLogical' tmp[556937] tmp[556944]))
      }
      {
        (556956 'move' tmp[556936](556953 '_paramFoldLogical' tmp[556937] 0))
      }
      unknown call_tmp[620879] "expr temp" "maybe param" "maybe type" "temp"
      (620882 'move' call_tmp[620879](70269 call _cond_test tmp[556936]))
      if call_tmp[620879]
      {
        unknown call_tmp[620886] "expr temp" "maybe param" "maybe type" "temp"
        (620889 'move' call_tmp[620886](70245 call _stride _mt[243] r1[70160]))
        unknown call_tmp[620893] "expr temp" "maybe param" "maybe type" "temp"
        (620896 'move' call_tmp[620893](70249 call stride _mt[243] r2[70171]))
        (70252 call = call_tmp[620886] call_tmp[620893])
      }
      {
        unknown call_tmp[620898] "expr temp" "maybe param" "maybe type" "temp"
        (620901 'move' call_tmp[620898](455698 'query' r1[70160] c"stridable"))
        unknown call_tmp[620903] "expr temp" "maybe param" "maybe type" "temp"
        (620906 'move' call_tmp[620903](70264 call _cond_test call_tmp[620898]))
        if call_tmp[620903]
        {
          unknown call_tmp[620910] "expr temp" "maybe param" "maybe type" "temp"
          (620913 'move' call_tmp[620910](70257 call _stride _mt[243] r1[70160]))
          (70261 call = call_tmp[620910] 1)
        }
      }
    }
    unknown call_tmp[620917] "expr temp" "maybe param" "maybe type" "temp"
    (620920 'move' call_tmp[620917](70282 call _low _mt[243] r1[70160]))
    unknown call_tmp[620924] "expr temp" "maybe param" "maybe type" "temp"
    (620927 'move' call_tmp[620924](70286 call _low _mt[243] r2[70171]))
    (70289 call = call_tmp[620917] call_tmp[620924])
    (475431 'end of statement')
    unknown call_tmp[620931] "expr temp" "maybe param" "maybe type" "temp"
    (620934 'move' call_tmp[620931](70293 call _high _mt[243] r1[70160]))
    unknown call_tmp[620938] "expr temp" "maybe param" "maybe type" "temp"
    (620941 'move' call_tmp[620938](70297 call _high _mt[243] r2[70171]))
    (70300 call = call_tmp[620931] call_tmp[620938])
    (475432 'end of statement')
    unknown call_tmp[620943] "expr temp" "maybe param" "maybe type" "temp"
    (620946 'move' call_tmp[620943](455701 'query' r1[70160] c"stridable"))
    unknown call_tmp[620948] "expr temp" "maybe param" "maybe type" "temp"
    (620951 'move' call_tmp[620948](70330 call _cond_test call_tmp[620943]))
    if call_tmp[620948]
    {
      unknown call_tmp[620955] "expr temp" "maybe param" "maybe type" "temp"
      (620958 'move' call_tmp[620955](70305 call _alignment _mt[243] r1[70160]))
      unknown call_tmp[620962] "expr temp" "maybe param" "maybe type" "temp"
      (620965 'move' call_tmp[620962](70310 call alignment _mt[243] r2[70171]))
      unknown call_tmp[620967] "expr temp" "maybe param" "maybe type" "temp"
      (620970 'move' call_tmp[620967](70314 call chpl__idxToInt call_tmp[620962]))
      (70315 call = call_tmp[620955] call_tmp[620967])
      (475433 'end of statement')
      unknown call_tmp[620974] "expr temp" "maybe param" "maybe type" "temp"
      (620977 'move' call_tmp[620974](70320 call _aligned _mt[243] r1[70160]))
      unknown call_tmp[620981] "expr temp" "maybe param" "maybe type" "temp"
      (620984 'move' call_tmp[620981](70324 call aligned _mt[243] r2[70171]))
      (70327 call = call_tmp[620974] call_tmp[620981])
    }
    (510245 return _void[55])
  }
  function +[70350](arg r[70347]:range[64316](?), arg offset[70353]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510249] "RVV" "temp"
    unknown call_tmp[620988] "expr temp" "maybe param" "maybe type" "temp"
    (620991 'move' call_tmp[620988](70358 call intIdxType _mt[243] r[70347]))
    unknown call_tmp[620993] "maybe param" "maybe type" "temp"
    (620996 'move' call_tmp[620993](70361 call _cast call_tmp[620988] offset[70353]))
    const i[70363] "dead at end of block" "const" "insert auto destroy"
    (540957 'init var' i[70363] call_tmp[620993])
    (70366 'end of statement')
    unknown call_tmp[620998] "expr temp" "maybe param" "maybe type" "temp"
    (621001 'move' call_tmp[620998](455725 'query' r[70347] 1))
    unknown strType[70372] "dead at end of block" "insert auto destroy" "type variable"(70371 call chpl__rangeStrideType call_tmp[620998])
    unknown call_tmp[621003] "expr temp" "maybe param" "maybe type" "temp"
    (621006 'move' call_tmp[621003](540961 'query' r[70347] 1))
    (540964 'move' strType[70372](540960 call chpl__rangeStrideType call_tmp[621003]))
    (475435 'end of statement')
    unknown call_tmp[621008] "expr temp" "maybe param" "maybe type" "temp"
    (621011 'move' call_tmp[621008](455728 'query' r[70347] 1))
    unknown call_tmp[621013] "expr temp" "maybe param" "maybe type" "temp"
    (621016 'move' call_tmp[621013](455734 'query' r[70347] 2))
    unknown call_tmp[621018] "expr temp" "maybe param" "maybe type" "temp"
    (621021 'move' call_tmp[621018](455740 'query' r[70347] 3))
    unknown call_tmp[621027] "expr temp" "maybe param" "maybe type" "temp"
    (621030 'move' call_tmp[621027](70388 call _low _mt[243] r[70347]))
    unknown call_tmp[621032] "expr temp" "maybe param" "maybe type" "temp"
    (621035 'move' call_tmp[621032](70392 call + call_tmp[621027] i[70363]))
    unknown call_tmp[621037] "expr temp" "maybe param" "maybe type" "temp"
    (621040 'move' call_tmp[621037](70395 call(70384 call (partial) chpl_intToIdx _mt[243] r[70347]) call_tmp[621032]))
    unknown call_tmp[621046] "expr temp" "maybe param" "maybe type" "temp"
    (621049 'move' call_tmp[621046](70401 call _high _mt[243] r[70347]))
    unknown call_tmp[621051] "expr temp" "maybe param" "maybe type" "temp"
    (621054 'move' call_tmp[621051](70405 call + call_tmp[621046] i[70363]))
    unknown call_tmp[621056] "expr temp" "maybe param" "maybe type" "temp"
    (621059 'move' call_tmp[621056](70408 call(70397 call (partial) chpl_intToIdx _mt[243] r[70347]) call_tmp[621051]))
    unknown call_tmp[621063] "expr temp" "maybe param" "maybe type" "temp"
    (621066 'move' call_tmp[621063](70410 call stride _mt[243] r[70347]))
    unknown call_tmp[621068] "expr temp" "maybe param" "maybe type" "temp"
    (621071 'move' call_tmp[621068](70414 call _cast strType[70372] call_tmp[621063]))
    unknown call_tmp[621077] "expr temp" "maybe param" "maybe type" "temp"
    (621080 'move' call_tmp[621077](70422 call alignment _mt[243] r[70347]))
    unknown call_tmp[621082] "expr temp" "maybe param" "maybe type" "temp"
    (621085 'move' call_tmp[621082](70426 call chpl__idxToInt call_tmp[621077]))
    unknown call_tmp[621087] "expr temp" "maybe param" "maybe type" "temp"
    (621090 'move' call_tmp[621087](70428 call + call_tmp[621082] i[70363]))
    unknown call_tmp[621092] "expr temp" "maybe param" "maybe type" "temp"
    (621095 'move' call_tmp[621092](70431 call(70417 call (partial) chpl_intToIdx _mt[243] r[70347]) call_tmp[621087]))
    unknown call_tmp[621099] "expr temp" "maybe param" "maybe type" "temp"
    (621102 'move' call_tmp[621099](70433 call aligned _mt[243] r[70347]))
    unknown call_tmp[621104] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621107 'move' call_tmp[621104](747696 'new' range[64316](?) call_tmp[621008] call_tmp[621013] call_tmp[621018] call_tmp[621037] call_tmp[621056] call_tmp[621068] call_tmp[621092] call_tmp[621099]))
    (510254 'move' ret[510249](510253 'deref' call_tmp[621104]))
    gotoReturn _end_+[510247] _end_+[510247]
    (475436 'end of statement' i[70363] i[70363] strType[70372] i[70363])
    label _end_+[510247]
    (510251 return ret[510249])
  }
  function +[70447](arg i[70444]:integral[199](?), arg r[70458]:range[64316](?)) : _unknown[51] "inline"
  {
    unknown ret[510260] "RVV" "temp"
    unknown call_tmp[621109] "expr temp" "maybe param" "maybe type" "temp"
    (621112 'move' call_tmp[621109](70463 call + r[70458] i[70444]))
    (510265 'move' ret[510260](510264 'deref' call_tmp[621109]))
    (510262 return ret[510260])
  }
  function -[70484](arg r[70481]:range[64316](?), arg i[70487]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[510269] "RVV" "temp"
    unknown call_tmp[621114] "expr temp" "maybe param" "maybe type" "temp"
    (621117 'move' call_tmp[621114](455763 'query' r[70481] 1))
    unknown strType[70494] "dead at end of block" "insert auto destroy" "type variable"(70493 call chpl__rangeStrideType call_tmp[621114])
    unknown call_tmp[621119] "expr temp" "maybe param" "maybe type" "temp"
    (621122 'move' call_tmp[621119](540968 'query' r[70481] 1))
    (540971 'move' strType[70494](540967 call chpl__rangeStrideType call_tmp[621119]))
    (475442 'end of statement')
    unknown call_tmp[621124] "expr temp" "maybe param" "maybe type" "temp"
    (621127 'move' call_tmp[621124](455766 'query' r[70481] 1))
    unknown call_tmp[621129] "expr temp" "maybe param" "maybe type" "temp"
    (621132 'move' call_tmp[621129](455772 'query' r[70481] 2))
    unknown call_tmp[621134] "expr temp" "maybe param" "maybe type" "temp"
    (621137 'move' call_tmp[621134](455778 'query' r[70481] 3))
    unknown call_tmp[621143] "expr temp" "maybe param" "maybe type" "temp"
    (621146 'move' call_tmp[621143](70509 call _low _mt[243] r[70481]))
    unknown call_tmp[621148] "expr temp" "maybe param" "maybe type" "temp"
    (621151 'move' call_tmp[621148](70513 call - call_tmp[621143] i[70487]))
    unknown call_tmp[621153] "expr temp" "maybe param" "maybe type" "temp"
    (621156 'move' call_tmp[621153](70516 call(70505 call (partial) chpl_intToIdx _mt[243] r[70481]) call_tmp[621148]))
    unknown call_tmp[621162] "expr temp" "maybe param" "maybe type" "temp"
    (621165 'move' call_tmp[621162](70522 call _high _mt[243] r[70481]))
    unknown call_tmp[621167] "expr temp" "maybe param" "maybe type" "temp"
    (621170 'move' call_tmp[621167](70526 call - call_tmp[621162] i[70487]))
    unknown call_tmp[621172] "expr temp" "maybe param" "maybe type" "temp"
    (621175 'move' call_tmp[621172](70529 call(70518 call (partial) chpl_intToIdx _mt[243] r[70481]) call_tmp[621167]))
    unknown call_tmp[621179] "expr temp" "maybe param" "maybe type" "temp"
    (621182 'move' call_tmp[621179](70531 call stride _mt[243] r[70481]))
    unknown call_tmp[621184] "expr temp" "maybe param" "maybe type" "temp"
    (621187 'move' call_tmp[621184](70535 call _cast strType[70494] call_tmp[621179]))
    unknown call_tmp[621193] "expr temp" "maybe param" "maybe type" "temp"
    (621196 'move' call_tmp[621193](70543 call alignment _mt[243] r[70481]))
    unknown call_tmp[621198] "expr temp" "maybe param" "maybe type" "temp"
    (621201 'move' call_tmp[621198](70547 call chpl__idxToInt call_tmp[621193]))
    unknown call_tmp[621203] "expr temp" "maybe param" "maybe type" "temp"
    (621206 'move' call_tmp[621203](70549 call - call_tmp[621198] i[70487]))
    unknown call_tmp[621208] "expr temp" "maybe param" "maybe type" "temp"
    (621211 'move' call_tmp[621208](70552 call(70538 call (partial) chpl_intToIdx _mt[243] r[70481]) call_tmp[621203]))
    unknown call_tmp[621215] "expr temp" "maybe param" "maybe type" "temp"
    (621218 'move' call_tmp[621215](70554 call aligned _mt[243] r[70481]))
    unknown call_tmp[621220] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621223 'move' call_tmp[621220](747697 'new' range[64316](?) call_tmp[621124] call_tmp[621129] call_tmp[621134] call_tmp[621153] call_tmp[621172] call_tmp[621184] call_tmp[621208] call_tmp[621215]))
    (510274 'move' ret[510269](510273 'deref' call_tmp[621220]))
    gotoReturn _end_-[510267] _end_-[510267]
    (475443 'end of statement' strType[70494])
    label _end_-[510267]
    (510271 return ret[510269])
  }
  function chpl_check_step_integral[70566](arg step[70564]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    unknown call_tmp[621225] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621228 'move' call_tmp[621225](70570 'typeof' step[70564]))
    unknown call_tmp[621230] "expr temp" "maybe param" "maybe type" "temp"
    (621233 'move' call_tmp[621230](70572 call isIntegral call_tmp[621225]))
    unknown call_tmp[621235] "expr temp" "maybe param" "maybe type" "temp"
    (621238 'move' call_tmp[621235](70573 call ! call_tmp[621230]))
    unknown call_tmp[621240] "expr temp" "maybe param" "maybe type" "temp"
    (621243 'move' call_tmp[621240](70601 call _cond_test call_tmp[621235]))
    if call_tmp[621240]
    {
      unknown call_tmp[621245] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621248 'move' call_tmp[621245](70595 'typeof' step[70564]))
      unknown call_tmp[621250] "expr temp" "maybe param" "maybe type" "temp"
      (621253 'move' call_tmp[621250](70597 call _cast string[26] call_tmp[621245]))
      (70599 call compilerError "can't apply 'by' using step of a non-integral type " call_tmp[621250])
    }
    (510278 return _void[55])
  }
  function chpl_need_to_check_step[70613](arg step[70611]:_any[178](?), arg strType[70615]:_any[178](?)) param : _unknown[51]
  {
    unknown ret[510282] "RVV" "param" "temp"
    unknown call_tmp[621255] "expr temp" "maybe param" "maybe type" "temp"
    (621258 'move' call_tmp[621255](70621 call isInt strType[70615]))
    (70623 call compilerAssert call_tmp[621255])
    (475446 'end of statement')
    unknown tmp[419965] "maybe param" "temp"
    unknown call_tmp[621260] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621263 'move' call_tmp[621260](70627 'typeof' step[70611]))
    (419976 'move' tmp[419965](70629 call != call_tmp[621260] strType[70615]))
    unknown call_tmp[621265] "expr temp" "maybe param" "maybe type" "temp"
    (621268 'move' call_tmp[621265](419978 call _cond_invalid tmp[419965]))
    if call_tmp[621265]
    {
      (419981 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[556963] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[556964] "maybe param" "temp"
    unknown call_tmp[621270] "expr temp" "maybe param" "maybe type" "temp"
    (621273 'move' call_tmp[621270](419966 call isTrue tmp[419965]))
    (556969 'move' tmp[556964](556967 call _cond_test call_tmp[621270]))
    if tmp[556964]
    {
      unknown tmp[556971] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621275] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621278 'move' call_tmp[621275](70633 'typeof' step[70611]))
      unknown call_tmp[621280] "expr temp" "maybe param" "maybe type" "temp"
      (621283 'move' call_tmp[621280](70635 call numBits call_tmp[621275]))
      unknown call_tmp[621285] "expr temp" "maybe param" "maybe type" "temp"
      (621288 'move' call_tmp[621285](70639 call numBits strType[70615]))
      unknown call_tmp[621290] "expr temp" "maybe param" "maybe type" "temp"
      (621293 'move' call_tmp[621290](70640 call >= call_tmp[621280] call_tmp[621285]))
      (556973 'move' tmp[556971](419969 call isTrue call_tmp[621290]))
      (556978 'move' tmp[556963](556975 '_paramFoldLogical' tmp[556964] tmp[556971]))
    }
    {
      (556983 'move' tmp[556963](556980 '_paramFoldLogical' tmp[556964] 0))
    }
    (510287 'move' ret[510282](510286 'deref' tmp[556963]))
    (510284 return ret[510282])
  }
  function chpl_range_check_stride[70652](arg step[70650]:_any[178](?), arg idxType[70654]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70659 call chpl_check_step_integral step[70650])
    (475449 'end of statement')
    unknown strType[70666] "dead at end of block" "insert auto destroy" "type variable"(70665 call chpl__rangeStrideType idxType[70654])
    (540976 'move' strType[70666](540974 call chpl__rangeStrideType idxType[70654]))
    (475450 'end of statement')
    unknown call_tmp[621295] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621298 'move' call_tmp[621295](70671 'typeof' step[70650]))
    unknown call_tmp[621300] "expr temp" "maybe param" "maybe type" "temp"
    (621303 'move' call_tmp[621300](70673 call numBits call_tmp[621295]))
    unknown call_tmp[621305] "expr temp" "maybe param" "maybe type" "temp"
    (621308 'move' call_tmp[621305](70677 call numBits strType[70666]))
    unknown call_tmp[621310] "expr temp" "maybe param" "maybe type" "temp"
    (621313 'move' call_tmp[621310](70678 call > call_tmp[621300] call_tmp[621305]))
    unknown call_tmp[621315] "expr temp" "maybe param" "maybe type" "temp"
    (621318 'move' call_tmp[621315](70727 call _cond_test call_tmp[621310]))
    if call_tmp[621315]
    {
      unknown call_tmp[621320] "expr temp" "maybe param" "maybe type" "temp"
      (621323 'move' call_tmp[621320](70701 call _cast string[26] idxType[70654]))
      unknown call_tmp[621325] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621328 'move' call_tmp[621325](70721 'typeof' step[70650]))
      unknown call_tmp[621330] "expr temp" "maybe param" "maybe type" "temp"
      (621333 'move' call_tmp[621330](70723 call _cast string[26] call_tmp[621325]))
      (70725 call compilerError "can't apply 'by' to a range with idxType " call_tmp[621320] " using a step of type " call_tmp[621330])
    }
    unknown call_tmp[621335] "expr temp" "maybe param" "maybe type" "temp"
    (621338 'move' call_tmp[621335](70822 call _cond_test 1))
    if call_tmp[621335]
    {
      unknown call_tmp[621340] "expr temp" "maybe param" "maybe type" "temp"
      (621343 'move' call_tmp[621340](70735 call == step[70650] 0))
      unknown call_tmp[621345] "expr temp" "maybe param" "maybe type" "temp"
      (621348 'move' call_tmp[621345](70761 call _cond_test call_tmp[621340]))
      if call_tmp[621345]
      {
        (70759 call boundsCheckHalt module=[255] HaltWrappers[209910] "the step argument of the 'by' operator is zero")
        (357691 'referenced modules list' HaltWrappers[209910])
      }
      unknown tmp[419986] "maybe param" "temp"
      (419997 'move' tmp[419986](70771 call chpl_need_to_check_step step[70650] strType[70666]))
      unknown call_tmp[621350] "expr temp" "maybe param" "maybe type" "temp"
      (621353 'move' call_tmp[621350](419999 call _cond_invalid tmp[419986]))
      if call_tmp[621350]
      {
        (420002 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[556990] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[556991] "maybe param" "temp"
      unknown call_tmp[621355] "expr temp" "maybe param" "maybe type" "temp"
      (621358 'move' call_tmp[621355](419987 call isTrue tmp[419986]))
      (556996 'move' tmp[556991](556994 call _cond_test call_tmp[621355]))
      if tmp[556991]
      {
        unknown tmp[556998] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621360] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (621363 'move' call_tmp[621360](70778 'typeof' step[70650]))
        unknown call_tmp[621365] "expr temp" "maybe param" "maybe type" "temp"
        (621368 'move' call_tmp[621365](70776 call max strType[70666]))
        unknown call_tmp[621370] "expr temp" "maybe param" "maybe type" "temp"
        (621373 'move' call_tmp[621370](70779 call _cast call_tmp[621360] call_tmp[621365]))
        unknown call_tmp[621375] "expr temp" "maybe param" "maybe type" "temp"
        (621378 'move' call_tmp[621375](70781 call > step[70650] call_tmp[621370]))
        (557000 'move' tmp[556998](419990 call isTrue call_tmp[621375]))
        (557005 'move' tmp[556990](557002 '_paramFoldLogical' tmp[556991] tmp[556998]))
      }
      {
        (557010 'move' tmp[556990](557007 '_paramFoldLogical' tmp[556991] 0))
      }
      unknown call_tmp[621380] "expr temp" "maybe param" "maybe type" "temp"
      (621383 'move' call_tmp[621380](70817 call _cond_test tmp[556990]))
      if call_tmp[621380]
      {
        unknown call_tmp[621385] "expr temp" "maybe param" "maybe type" "temp"
        (621388 'move' call_tmp[621385](70810 call _cast string[26] strType[70666]))
        unknown call_tmp[621390] "expr temp" "maybe param" "maybe type" "temp"
        (621393 'move' call_tmp[621390](70812 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621385]))
        (70815 call boundsCheckHalt module=[255] HaltWrappers[209910] call_tmp[621390])
        (475454 'end of statement' strType[70666])
        (357697 'referenced modules list' HaltWrappers[209910])
      }
    }
    (510289 return _void[55])
  }
  function chpl_range_check_stride[70832](param arg step[70830]:_any[178](?), arg idxType[70834]:_any[178](?)) : _unknown[51] "inline" "no return value for void"
  {
    (70839 call chpl_check_step_integral step[70830])
    (475456 'end of statement')
    unknown strType[70846] "dead at end of block" "insert auto destroy" "type variable"(70845 call chpl__rangeStrideType idxType[70834])
    (540981 'move' strType[70846](540979 call chpl__rangeStrideType idxType[70834]))
    (475457 'end of statement')
    unknown call_tmp[621395] "expr temp" "maybe param" "maybe type" "temp"
    (621398 'move' call_tmp[621395](70851 call == step[70830] 0))
    unknown call_tmp[621400] "expr temp" "maybe param" "maybe type" "temp"
    (621403 'move' call_tmp[621400](70858 call _cond_test call_tmp[621395]))
    if call_tmp[621400]
    {
      (70856 call compilerError "the step argument of the 'by' operator is zero")
    }
    unknown tmp[420007] "maybe param" "temp"
    (420018 'move' tmp[420007](70867 call chpl_need_to_check_step step[70830] strType[70846]))
    unknown call_tmp[621405] "expr temp" "maybe param" "maybe type" "temp"
    (621408 'move' call_tmp[621405](420020 call _cond_invalid tmp[420007]))
    if call_tmp[621405]
    {
      (420023 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557017] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557018] "maybe param" "temp"
    unknown call_tmp[621410] "expr temp" "maybe param" "maybe type" "temp"
    (621413 'move' call_tmp[621410](420008 call isTrue tmp[420007]))
    (557023 'move' tmp[557018](557021 call _cond_test call_tmp[621410]))
    if tmp[557018]
    {
      unknown tmp[557025] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621415] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (621418 'move' call_tmp[621415](70874 'typeof' step[70830]))
      unknown call_tmp[621420] "expr temp" "maybe param" "maybe type" "temp"
      (621423 'move' call_tmp[621420](70872 call max strType[70846]))
      unknown call_tmp[621425] "expr temp" "maybe param" "maybe type" "temp"
      (621428 'move' call_tmp[621425](70875 call _cast call_tmp[621415] call_tmp[621420]))
      unknown call_tmp[621430] "expr temp" "maybe param" "maybe type" "temp"
      (621433 'move' call_tmp[621430](70877 call > step[70830] call_tmp[621425]))
      (557027 'move' tmp[557025](420011 call isTrue call_tmp[621430]))
      (557032 'move' tmp[557017](557029 '_paramFoldLogical' tmp[557018] tmp[557025]))
    }
    {
      (557037 'move' tmp[557017](557034 '_paramFoldLogical' tmp[557018] 0))
    }
    unknown call_tmp[621435] "expr temp" "maybe param" "maybe type" "temp"
    (621438 'move' call_tmp[621435](70892 call _cond_test tmp[557017]))
    if call_tmp[621435]
    {
      unknown call_tmp[621440] "expr temp" "maybe param" "maybe type" "temp"
      (621443 'move' call_tmp[621440](70885 call _cast string[26] strType[70846]))
      unknown call_tmp[621445] "expr temp" "maybe param" "maybe type" "temp"
      (621448 'move' call_tmp[621445](70887 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[621440]))
      (70890 call compilerError call_tmp[621445])
      (475460 'end of statement' strType[70846])
    }
    (510291 return _void[55])
  }
  function chpl_by_help[70913](arg r[70910]:range[64316](?), arg step[70915]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510295] "RVV" "temp"
    unknown call_tmp[621452] "maybe param" "maybe type" "temp"
    (621455 'move' call_tmp[621452](70919 call low _mt[243] r[70910]))
    unknown call_tmp[621457] "maybe param" "maybe type" "temp"
    (621460 'move' call_tmp[621457](455788 'query' r[70910] 1))
    const lw[70922] "dead at end of block" "const" "insert auto destroy"
    (540983 'init var' lw[70922] call_tmp[621452] call_tmp[621457])
    unknown call_tmp[621464] "maybe param" "maybe type" "temp"
    (621467 'move' call_tmp[621464](70927 call high _mt[243] r[70910]))
    unknown call_tmp[621469] "maybe param" "maybe type" "temp"
    (621472 'move' call_tmp[621469](455791 'query' r[70910] 1))
    const hh[70930] "dead at end of block" "const" "insert auto destroy"
    (540985 'init var' hh[70930] call_tmp[621464] call_tmp[621469])
    unknown call_tmp[621476] "expr temp" "maybe param" "maybe type" "temp"
    (621479 'move' call_tmp[621476](70940 call stride _mt[243] r[70910]))
    unknown call_tmp[621483] "expr temp" "maybe param" "maybe type" "temp"
    (621486 'move' call_tmp[621483](70945 call strType _mt[243] r[70910]))
    unknown call_tmp[621488] "expr temp" "maybe param" "maybe type" "temp"
    (621491 'move' call_tmp[621488](70948 call _cast call_tmp[621483] step[70915]))
    unknown call_tmp[621493] "maybe param" "maybe type" "temp"
    (621496 'move' call_tmp[621493](70950 call * call_tmp[621476] call_tmp[621488]))
    unknown call_tmp[621500] "maybe param" "maybe type" "temp"
    (621503 'move' call_tmp[621500](70936 call strType _mt[243] r[70910]))
    const st[70952] "dead at end of block" "const" "insert auto destroy"
    (540987 'init var' st[70952] call_tmp[621493] call_tmp[621500])
    (70955 'end of statement')
    const tmp[71077] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[557214] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557215] "maybe param" "temp"
    unknown call_tmp[621507] "expr temp" "maybe param" "maybe type" "temp"
    (621510 'move' call_tmp[621507](70972 call(70968 call (partial) isAmbiguous _mt[243] r[70910])))
    (557220 'move' tmp[557215](557218 call _cond_test call_tmp[621507]))
    if tmp[557215]
    {
      unknown tmp[557044] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557045] "maybe param" "temp"
      unknown call_tmp[621514] "expr temp" "maybe param" "maybe type" "temp"
      (621517 'move' call_tmp[621514](70974 call stridable _mt[243] r[70910]))
      (557050 'move' tmp[557045](557048 call _cond_test call_tmp[621514]))
      if tmp[557045]
      {
        unknown tmp[557052] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621521] "expr temp" "maybe param" "maybe type" "temp"
        (621524 'move' call_tmp[621521](70979 call alignment _mt[243] r[70910]))
        (557054 'move' tmp[557052](70983 call _build_tuple 0 call_tmp[621521]))
        (557059 'move' tmp[557044](557056 '_paramFoldLogical' tmp[557045] tmp[557052]))
      }
      {
        unknown tmp[557061] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621528] "expr temp" "maybe param" "maybe type" "temp"
        (621531 'move' call_tmp[621528](70992 call(70987 call (partial) chpl_intToIdx _mt[243] r[70910]) 0))
        (557063 'move' tmp[557061](70994 call _build_tuple 0 call_tmp[621528]))
        (557068 'move' tmp[557044](557065 '_paramFoldLogical' tmp[557045] tmp[557061]))
      }
      (557225 'move' tmp[557214](557222 '_paramFoldLogical' tmp[557215] tmp[557044]))
    }
    {
      unknown tmp[420049] "maybe param" "temp"
      (420060 'move' tmp[420049](71004 call(71000 call (partial) hasLowBound _mt[243] r[70910])))
      unknown call_tmp[621535] "expr temp" "maybe param" "maybe type" "temp"
      (621538 'move' call_tmp[621535](420062 call _cond_invalid tmp[420049]))
      if call_tmp[621535]
      {
        (420065 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557075] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557076] "maybe param" "temp"
      unknown call_tmp[621540] "expr temp" "maybe param" "maybe type" "temp"
      (621543 'move' call_tmp[621540](420050 call isTrue tmp[420049]))
      (557081 'move' tmp[557076](557079 call _cond_test call_tmp[621540]))
      if tmp[557076]
      {
        unknown tmp[557083] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621545] "expr temp" "maybe param" "maybe type" "temp"
        (621548 'move' call_tmp[621545](71007 call > st[70952] 0))
        (557085 'move' tmp[557083](420053 call isTrue call_tmp[621545]))
        (557090 'move' tmp[557075](557087 '_paramFoldLogical' tmp[557076] tmp[557083]))
      }
      {
        (557095 'move' tmp[557075](557092 '_paramFoldLogical' tmp[557076] 0))
      }
      unknown tmp[557187] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[557188] "maybe param" "temp"
      (557193 'move' tmp[557188](557191 call _cond_test tmp[557075]))
      if tmp[557188]
      {
        unknown tmp[557195] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621552] "expr temp" "maybe param" "maybe type" "temp"
        (621555 'move' call_tmp[621552](71013 call alignedLow _mt[243] r[70910]))
        (557197 'move' tmp[557195](71017 call _build_tuple 1 call_tmp[621552]))
        (557202 'move' tmp[557187](557199 '_paramFoldLogical' tmp[557188] tmp[557195]))
      }
      {
        unknown tmp[420028] "maybe param" "temp"
        (420039 'move' tmp[420028](71024 call(71020 call (partial) hasHighBound _mt[243] r[70910])))
        unknown call_tmp[621559] "expr temp" "maybe param" "maybe type" "temp"
        (621562 'move' call_tmp[621559](420041 call _cond_invalid tmp[420028]))
        if call_tmp[621559]
        {
          (420044 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557102] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557103] "maybe param" "temp"
        unknown call_tmp[621564] "expr temp" "maybe param" "maybe type" "temp"
        (621567 'move' call_tmp[621564](420029 call isTrue tmp[420028]))
        (557108 'move' tmp[557103](557106 call _cond_test call_tmp[621564]))
        if tmp[557103]
        {
          unknown tmp[557110] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621569] "expr temp" "maybe param" "maybe type" "temp"
          (621572 'move' call_tmp[621569](71027 call < st[70952] 0))
          (557112 'move' tmp[557110](420032 call isTrue call_tmp[621569]))
          (557117 'move' tmp[557102](557114 '_paramFoldLogical' tmp[557103] tmp[557110]))
        }
        {
          (557122 'move' tmp[557102](557119 '_paramFoldLogical' tmp[557103] 0))
        }
        unknown tmp[557160] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[557161] "maybe param" "temp"
        (557166 'move' tmp[557161](557164 call _cond_test tmp[557102]))
        if tmp[557161]
        {
          unknown tmp[557168] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621576] "expr temp" "maybe param" "maybe type" "temp"
          (621579 'move' call_tmp[621576](71033 call alignedHigh _mt[243] r[70910]))
          (557170 'move' tmp[557168](71037 call _build_tuple 1 call_tmp[621576]))
          (557175 'move' tmp[557160](557172 '_paramFoldLogical' tmp[557161] tmp[557168]))
        }
        {
          unknown tmp[557129] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[557130] "maybe param" "temp"
          unknown call_tmp[621583] "expr temp" "maybe param" "maybe type" "temp"
          (621586 'move' call_tmp[621583](71040 call stridable _mt[243] r[70910]))
          (557135 'move' tmp[557130](557133 call _cond_test call_tmp[621583]))
          if tmp[557130]
          {
            unknown tmp[557137] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621590] "expr temp" "maybe param" "maybe type" "temp"
            (621593 'move' call_tmp[621590](71044 call aligned _mt[243] r[70910]))
            unknown call_tmp[621597] "expr temp" "maybe param" "maybe type" "temp"
            (621600 'move' call_tmp[621597](71048 call alignment _mt[243] r[70910]))
            (557139 'move' tmp[557137](71052 call _build_tuple call_tmp[621590] call_tmp[621597]))
            (557144 'move' tmp[557129](557141 '_paramFoldLogical' tmp[557130] tmp[557137]))
          }
          {
            unknown tmp[557146] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[621604] "expr temp" "maybe param" "maybe type" "temp"
            (621607 'move' call_tmp[621604](71061 call(71056 call (partial) chpl_intToIdx _mt[243] r[70910]) 0))
            (557148 'move' tmp[557146](71063 call _build_tuple 0 call_tmp[621604]))
            (557153 'move' tmp[557129](557150 '_paramFoldLogical' tmp[557130] tmp[557146]))
          }
          (557180 'move' tmp[557160](557177 '_paramFoldLogical' tmp[557161] tmp[557129]))
        }
        (557207 'move' tmp[557187](557204 '_paramFoldLogical' tmp[557188] tmp[557160]))
      }
      (557230 'move' tmp[557214](557227 '_paramFoldLogical' tmp[557215] tmp[557187]))
    }
    unknown call_tmp[621609] "expr temp" "maybe param" "maybe type" "temp"
    (621612 'move' call_tmp[621609](455794 'query' r[70910] 1))
    unknown call_tmp[621614] "maybe param" "maybe type" "temp"
    (621617 'move' call_tmp[621614](70965 call _build_tuple bool[10] call_tmp[621609]))
    (540989 'init var' tmp[71077] tmp[557214] call_tmp[621614])
    (71084 call _check_tuple_var_decl tmp[71077] 2)
    (475462 'end of statement')
    unknown call_tmp[621619] "maybe param" "maybe type" "temp"
    (621622 'move' call_tmp[621619](71078 call tmp[71077] 0))
    const ald[70957] "dead at end of block" "const" "insert auto destroy"
    (540991 'init var' ald[70957] call_tmp[621619])
    unknown call_tmp[621624] "maybe param" "maybe type" "temp"
    (621627 'move' call_tmp[621624](71081 call tmp[71077] 1))
    const alt[70959] "dead at end of block" "const" "insert auto destroy"
    (540993 'init var' alt[70959] call_tmp[621624])
    (71089 'end of statement')
    unknown call_tmp[621629] "expr temp" "maybe param" "maybe type" "temp"
    (621632 'move' call_tmp[621629](455797 'query' r[70910] 1))
    unknown call_tmp[621634] "expr temp" "maybe param" "maybe type" "temp"
    (621637 'move' call_tmp[621634](455803 'query' r[70910] 2))
    unknown call_tmp[621639] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621642 'move' call_tmp[621639](747698 'new' range[64316](?) call_tmp[621629] call_tmp[621634] 1 lw[70922] hh[70930] st[70952] alt[70959] ald[70957]))
    (510300 'move' ret[510295](510299 'deref' call_tmp[621639]))
    gotoReturn _end_chpl_by_help[510293] _end_chpl_by_help[510293]
    (475463 'end of statement' lw[70922] hh[70930] st[70952] alt[70959] ald[70957])
    label _end_chpl_by_help[510293]
    (510297 return ret[510295])
  }
  function chpl_by[71110](arg r[71108]:_any[178](?), arg step[71112]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510306] "RVV" "temp"
    unknown call_tmp[621644] "expr temp" "maybe param" "maybe type" "temp"
    (621647 'move' call_tmp[621644](71117 call isRange r[71108]))
    unknown call_tmp[621649] "expr temp" "maybe param" "maybe type" "temp"
    (621652 'move' call_tmp[621649](71118 call ! call_tmp[621644]))
    unknown call_tmp[621654] "expr temp" "maybe param" "maybe type" "temp"
    (621657 'move' call_tmp[621654](71141 call _cond_test call_tmp[621649]))
    if call_tmp[621654]
    {
      (71139 call compilerError "the first argument of the 'by' operator is not a range")
    }
    unknown call_tmp[621661] "expr temp" "maybe param" "maybe type" "temp"
    (621664 'move' call_tmp[621661](71151 call idxType _mt[243] r[71108]))
    (71154 call chpl_range_check_stride step[71112] call_tmp[621661])
    (475470 'end of statement')
    unknown call_tmp[621666] "expr temp" "maybe param" "maybe type" "temp"
    (621669 'move' call_tmp[621666](71160 call chpl_by_help r[71108] step[71112]))
    (510311 'move' ret[510306](510310 'deref' call_tmp[621666]))
    (510308 return ret[510306])
  }
  function chpl_by[71174](arg r[71171]:range[64316](?), param arg step[71176]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510315] "RVV" "temp"
    unknown call_tmp[621673] "expr temp" "maybe param" "maybe type" "temp"
    (621676 'move' call_tmp[621673](71182 call idxType _mt[243] r[71171]))
    (71185 call chpl_range_check_stride step[71176] call_tmp[621673])
    (475472 'end of statement')
    unknown call_tmp[621680] "expr temp" "maybe param" "maybe type" "temp"
    (621683 'move' call_tmp[621680](71193 call strType _mt[243] r[71171]))
    unknown call_tmp[621685] "expr temp" "maybe param" "maybe type" "temp"
    (621688 'move' call_tmp[621685](71196 call _cast call_tmp[621680] step[71176]))
    unknown call_tmp[621690] "expr temp" "maybe param" "maybe type" "temp"
    (621693 'move' call_tmp[621690](71198 call chpl_by_help r[71171] call_tmp[621685]))
    (510320 'move' ret[510315](510319 'deref' call_tmp[621690]))
    (510317 return ret[510315])
  }
  function chpl_align[71217](arg r[71214]:range[64316](?), arg algn[71220] :
  (455823 'query' r[71214] 1)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510324] "RVV" "temp"
    unknown call_tmp[621695] "expr temp" "maybe param" "maybe type" "temp"
    (621698 'move' call_tmp[621695](455826 'query' r[71214] 1))
    unknown call_tmp[621700] "expr temp" "maybe param" "maybe type" "temp"
    (621703 'move' call_tmp[621700](455832 'query' r[71214] 2))
    unknown call_tmp[621709] "expr temp" "maybe param" "maybe type" "temp"
    (621712 'move' call_tmp[621709](71234 call _low _mt[243] r[71214]))
    unknown call_tmp[621714] "expr temp" "maybe param" "maybe type" "temp"
    (621717 'move' call_tmp[621714](71238 call(71230 call (partial) chpl_intToIdx _mt[243] r[71214]) call_tmp[621709]))
    unknown call_tmp[621723] "expr temp" "maybe param" "maybe type" "temp"
    (621726 'move' call_tmp[621723](71244 call _high _mt[243] r[71214]))
    unknown call_tmp[621728] "expr temp" "maybe param" "maybe type" "temp"
    (621731 'move' call_tmp[621728](71248 call(71240 call (partial) chpl_intToIdx _mt[243] r[71214]) call_tmp[621723]))
    unknown call_tmp[621735] "expr temp" "maybe param" "maybe type" "temp"
    (621738 'move' call_tmp[621735](71250 call stride _mt[243] r[71214]))
    unknown call_tmp[621740] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621743 'move' call_tmp[621740](747699 'new' range[64316](?) call_tmp[621695] call_tmp[621700] 1 call_tmp[621714] call_tmp[621728] call_tmp[621735] algn[71220] 1))
    (510329 'move' ret[510324](510328 'deref' call_tmp[621740]))
    (510326 return ret[510324])
  }
  function chpl_align[71275](arg r[71272]:range[64316](?), arg algn[71277]:_any[178](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[510333] "RVV" "temp"
    unknown call_tmp[621745] "expr temp" "maybe param" "maybe type" "temp"
    (621748 'move' call_tmp[621745](455845 'query' r[71272] 1))
    unknown call_tmp[621750] "expr temp" "maybe param" "maybe type" "temp"
    (621753 'move' call_tmp[621750](71300 call _cast string[26] call_tmp[621745]))
    unknown call_tmp[621755] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (621758 'move' call_tmp[621755](71320 'typeof' algn[71277]))
    unknown call_tmp[621760] "expr temp" "maybe param" "maybe type" "temp"
    (621763 'move' call_tmp[621760](71322 call _cast string[26] call_tmp[621755]))
    (71324 call compilerError "can't align a range with idxType " call_tmp[621750] " using a value of type " call_tmp[621760])
    (475475 'end of statement')
    (510338 'move' ret[510333](510337 'deref' r[71272]))
    (510335 return ret[510333])
  }
  function range[64316](?).offset[71339](arg _mt[71344]:_MT[238], arg this[71341]:range[64316](?) :
  range[64316](?), in arg offset[71336]:integral[199](?)) : _unknown[51] "method"
  {
    unknown ret[510342] "RVV" "temp"
    unknown call_tmp[621769] "expr temp" "maybe param" "maybe type" "temp"
    (621772 'move' call_tmp[621769](374927 call intIdxType _mt[243] this[71341]))
    unknown call_tmp[621774] "maybe param" "maybe type" "temp"
    (621777 'move' call_tmp[621774](71352 call(71347 call (partial) safeCast _mt[243] offset[71336]) call_tmp[621769]))
    unknown offs[71353] "dead at end of block" "insert auto destroy"
    (540995 'init var' offs[71353] call_tmp[621774])
    (71356 'end of statement')
    unknown call_tmp[621781] "expr temp" "maybe param" "maybe type" "temp"
    (621784 'move' call_tmp[621781](374932 call stridable _mt[243] this[71341]))
    unknown call_tmp[621786] "expr temp" "maybe param" "maybe type" "temp"
    (621789 'move' call_tmp[621786](71359 call ! call_tmp[621781]))
    unknown call_tmp[621791] "expr temp" "maybe param" "maybe type" "temp"
    (621794 'move' call_tmp[621791](71388 call _cond_test call_tmp[621786]))
    if call_tmp[621791]
    {
      (71380 call compilerWarning "invoking 'offset' on an unstrided range has no effect.")
      (475477 'end of statement')
      (71385 call = offs[71353] 0)
      (475478 'end of statement' offs[71353])
    }
    unknown tmp[420070] "maybe param" "temp"
    (420081 'move' tmp[420070] 1)
    unknown call_tmp[621796] "expr temp" "maybe param" "maybe type" "temp"
    (621799 'move' call_tmp[621796](420083 call _cond_invalid tmp[420070]))
    if call_tmp[621796]
    {
      (420086 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557237] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557238] "maybe param" "temp"
    unknown call_tmp[621801] "expr temp" "maybe param" "maybe type" "temp"
    (621804 'move' call_tmp[621801](420071 call isTrue tmp[420070]))
    (557243 'move' tmp[557238](557241 call _cond_test call_tmp[621801]))
    if tmp[557238]
    {
      unknown tmp[557245] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621808] "expr temp" "maybe param" "maybe type" "temp"
      (621811 'move' call_tmp[621808](71395 call(374938 call (partial) hasFirst _mt[243] this[71341])))
      unknown call_tmp[621813] "expr temp" "maybe param" "maybe type" "temp"
      (621816 'move' call_tmp[621813](71396 call ! call_tmp[621808]))
      (557247 'move' tmp[557245](420074 call isTrue call_tmp[621813]))
      (557252 'move' tmp[557237](557249 '_paramFoldLogical' tmp[557238] tmp[557245]))
    }
    {
      (557257 'move' tmp[557237](557254 '_paramFoldLogical' tmp[557238] 0))
    }
    unknown call_tmp[621818] "expr temp" "maybe param" "maybe type" "temp"
    (621821 'move' call_tmp[621818](71424 call _cond_test tmp[557237]))
    if call_tmp[621818]
    {
      (71422 call boundsCheckHalt module=[255] HaltWrappers[209910] "invoking 'offset' on a range without the first index")
      (357729 'referenced modules list' HaltWrappers[209910])
    }
    unknown call_tmp[621825] "expr temp" "maybe param" "maybe type" "temp"
    (621828 'move' call_tmp[621825](374944 call idxType _mt[243] this[71341]))
    unknown call_tmp[621832] "expr temp" "maybe param" "maybe type" "temp"
    (621835 'move' call_tmp[621832](374949 call boundedType _mt[243] this[71341]))
    unknown call_tmp[621839] "expr temp" "maybe param" "maybe type" "temp"
    (621842 'move' call_tmp[621839](374954 call stridable _mt[243] this[71341]))
    unknown call_tmp[621846] "expr temp" "maybe param" "maybe type" "temp"
    (621849 'move' call_tmp[621846](374958 call low _mt[243] this[71341]))
    unknown call_tmp[621853] "expr temp" "maybe param" "maybe type" "temp"
    (621856 'move' call_tmp[621853](374962 call high _mt[243] this[71341]))
    unknown call_tmp[621860] "expr temp" "maybe param" "maybe type" "temp"
    (621863 'move' call_tmp[621860](374966 call stride _mt[243] this[71341]))
    unknown call_tmp[621869] "expr temp" "maybe param" "maybe type" "temp"
    (621872 'move' call_tmp[621869](71440 call firstAsInt _mt[243] this[71341]))
    unknown call_tmp[621874] "expr temp" "maybe param" "maybe type" "temp"
    (621877 'move' call_tmp[621874](71444 call + call_tmp[621869] offs[71353]))
    unknown call_tmp[621879] "expr temp" "maybe param" "maybe type" "temp"
    (621882 'move' call_tmp[621879](71447 call(374970 call (partial) chpl_intToIdx _mt[243] this[71341]) call_tmp[621874]))
    unknown call_tmp[621884] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (621887 'move' call_tmp[621884](747700 'new' range[64316](?) call_tmp[621825] call_tmp[621832] call_tmp[621839] call_tmp[621846] call_tmp[621853] call_tmp[621860] call_tmp[621879] 1))
    (510347 'move' ret[510342](510346 'deref' call_tmp[621884]))
    gotoReturn _end_offset[510340] _end_offset[510340]
    (475482 'end of statement' offs[71353])
    label _end_offset[510340]
    (510344 return ret[510342])
  }
  function range[64316](?).this[71464](arg _mt[71469]:_MT[238], const arg this[71466]:range[64316](?) :
  range[64316](?), arg other[71461]:range[64316](?)) : _unknown[51] "method" "no doc"
  {
    unknown ret[510435] "RVV" "temp"
    unknown ambig[71472] "dead at end of block" "insert auto destroy"
    (540997 'init var' ambig[71472] 0)
    (71475 'end of statement')
    unknown tmp[420112] "maybe param" "temp"
    (420123 'move' tmp[420112](71482 call(71478 call (partial) isAmbiguous _mt[243] this[71466])))
    unknown call_tmp[621891] "expr temp" "maybe param" "maybe type" "temp"
    (621894 'move' call_tmp[621891](420125 call _cond_invalid tmp[420112]))
    if call_tmp[621891]
    {
      (420128 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[557264] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557265] "maybe param" "temp"
    unknown call_tmp[621896] "expr temp" "maybe param" "maybe type" "temp"
    (621899 'move' call_tmp[621896](420113 call isTrue tmp[420112]))
    (557270 'move' tmp[557265](557268 call _cond_test call_tmp[621896]))
    if tmp[557265]
    {
      (557275 'move' tmp[557264](557272 '_paramFoldLogical' tmp[557265] 1))
    }
    {
      unknown tmp[557277] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[621903] "expr temp" "maybe param" "maybe type" "temp"
      (621906 'move' call_tmp[621903](71488 call(71484 call (partial) isAmbiguous _mt[243] other[71461])))
      (557279 'move' tmp[557277](420117 call isTrue call_tmp[621903]))
      (557284 'move' tmp[557264](557281 '_paramFoldLogical' tmp[557265] tmp[557277]))
    }
    unknown call_tmp[621908] "expr temp" "maybe param" "maybe type" "temp"
    (621911 'move' call_tmp[621908](71580 call _cond_test tmp[557264]))
    if call_tmp[621908]
    {
      unknown call_tmp[621915] "expr temp" "maybe param" "maybe type" "temp"
      (621918 'move' call_tmp[621915](71493 call stride _mt[243] this[71466]))
      unknown call_tmp[621920] "maybe param" "maybe type" "temp"
      (621923 'move' call_tmp[621920](71497 call abs call_tmp[621915]))
      unknown st1[71498] "dead at end of block" "insert auto destroy"
      (540999 'init var' st1[71498] call_tmp[621920])
      (71501 'end of statement')
      unknown call_tmp[621927] "expr temp" "maybe param" "maybe type" "temp"
      (621930 'move' call_tmp[621927](71505 call stride _mt[243] other[71461]))
      unknown call_tmp[621932] "maybe param" "maybe type" "temp"
      (621935 'move' call_tmp[621932](71509 call abs call_tmp[621927]))
      unknown st2[71510] "dead at end of block" "insert auto destroy"
      (541001 'init var' st2[71510] call_tmp[621932])
      (71513 'end of statement')
      unknown call_tmp[621937] "maybe param" "maybe type" "temp"
      (621940 'move' call_tmp[621937](71523 call chpl__extendedEuclid st1[71498] st2[71510]))
      unknown tmp[71524] "dead at end of block" "insert auto destroy" "temp"
      (541003 'init var' tmp[71524] call_tmp[621937])
      (71531 call _check_tuple_var_decl tmp[71524] 2)
      (475485 'end of statement')
      unknown call_tmp[621942] "maybe param" "maybe type" "temp"
      (621945 'move' call_tmp[621942](71525 call tmp[71524] 0))
      unknown g[71514] "dead at end of block" "insert auto destroy"
      (541005 'init var' g[71514] call_tmp[621942])
      unknown call_tmp[621947] "maybe param" "maybe type" "temp"
      (621950 'move' call_tmp[621947](71528 call tmp[71524] 1))
      unknown x[71516] "dead at end of block" "insert auto destroy"
      (541007 'init var' x[71516] call_tmp[621947])
      (71536 'end of statement')
      unknown tmp[420091] "maybe param" "temp"
      (420102 'move' tmp[420091] 1)
      unknown call_tmp[621952] "expr temp" "maybe param" "maybe type" "temp"
      (621955 'move' call_tmp[621952](420104 call _cond_invalid tmp[420091]))
      if call_tmp[621952]
      {
        (420107 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557291] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557292] "maybe param" "temp"
      unknown call_tmp[621957] "expr temp" "maybe param" "maybe type" "temp"
      (621960 'move' call_tmp[621957](420092 call isTrue tmp[420091]))
      (557297 'move' tmp[557292](557295 call _cond_test call_tmp[621957]))
      if tmp[557292]
      {
        unknown tmp[557299] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621962] "expr temp" "maybe param" "maybe type" "temp"
        (621965 'move' call_tmp[621962](71540 call > g[71514] 1))
        (557301 'move' tmp[557299](420095 call isTrue call_tmp[621962]))
        (557306 'move' tmp[557291](557303 '_paramFoldLogical' tmp[557292] tmp[557299]))
      }
      {
        (557311 'move' tmp[557291](557308 '_paramFoldLogical' tmp[557292] 0))
      }
      unknown call_tmp[621967] "expr temp" "maybe param" "maybe type" "temp"
      (621970 'move' call_tmp[621967](71570 call _cond_test tmp[557291]))
      if call_tmp[621967]
      {
        (71568 call boundsCheckHalt module=[255] HaltWrappers[209910] "Cannot slice ranges with ambiguous alignments unless their strides are relatively prime.")
        (357740 'referenced modules list' HaltWrappers[209910])
      }
      (71577 call = ambig[71472] 1)
      (475488 'end of statement' ambig[71472])
    }
    function computeBoundedType[71588](arg r1[71586]:_any[178](?), arg r2[71590]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[510353] "RVV" "param" "temp"
      unknown tmp[420133] "maybe param" "temp"
      (420144 'move' tmp[420133](71597 call(71593 call (partial) hasLowBound _mt[243] r1[71586])))
      unknown call_tmp[621974] "expr temp" "maybe param" "maybe type" "temp"
      (621977 'move' call_tmp[621974](420146 call _cond_invalid tmp[420133]))
      if call_tmp[621974]
      {
        (420149 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown low[71606] "dead at end of block" "param"
      unknown tmp[557318] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557319] "maybe param" "temp"
      unknown call_tmp[621979] "expr temp" "maybe param" "maybe type" "temp"
      (621982 'move' call_tmp[621979](420134 call isTrue tmp[420133]))
      (557324 'move' tmp[557319](557322 call _cond_test call_tmp[621979]))
      if tmp[557319]
      {
        (557329 'move' tmp[557318](557326 '_paramFoldLogical' tmp[557319] 1))
      }
      {
        unknown tmp[557331] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[621986] "expr temp" "maybe param" "maybe type" "temp"
        (621989 'move' call_tmp[621986](71603 call(71599 call (partial) hasLowBound _mt[243] r2[71590])))
        (557333 'move' tmp[557331](420138 call isTrue call_tmp[621986]))
        (557338 'move' tmp[557318](557335 '_paramFoldLogical' tmp[557319] tmp[557331]))
      }
      (541009 'init var' low[71606] tmp[557318])
      (71609 'end of statement')
      unknown tmp[420154] "maybe param" "temp"
      (420165 'move' tmp[420154](71616 call(71612 call (partial) hasHighBound _mt[243] r1[71586])))
      unknown call_tmp[621993] "expr temp" "maybe param" "maybe type" "temp"
      (621996 'move' call_tmp[621993](420167 call _cond_invalid tmp[420154]))
      if call_tmp[621993]
      {
        (420170 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown high[71625] "dead at end of block" "param"
      unknown tmp[557345] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557346] "maybe param" "temp"
      unknown call_tmp[621998] "expr temp" "maybe param" "maybe type" "temp"
      (622001 'move' call_tmp[621998](420155 call isTrue tmp[420154]))
      (557351 'move' tmp[557346](557349 call _cond_test call_tmp[621998]))
      if tmp[557346]
      {
        (557356 'move' tmp[557345](557353 '_paramFoldLogical' tmp[557346] 1))
      }
      {
        unknown tmp[557358] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622005] "expr temp" "maybe param" "maybe type" "temp"
        (622008 'move' call_tmp[622005](71622 call(71618 call (partial) hasHighBound _mt[243] r2[71590])))
        (557360 'move' tmp[557358](420159 call isTrue call_tmp[622005]))
        (557365 'move' tmp[557345](557362 '_paramFoldLogical' tmp[557346] tmp[557358]))
      }
      (541011 'init var' high[71625] tmp[557345])
      (71628 'end of statement')
      unknown tmp[420175] "maybe param" "temp"
      (420186 'move' tmp[420175] low[71606])
      unknown call_tmp[622010] "expr temp" "maybe param" "maybe type" "temp"
      (622013 'move' call_tmp[622010](420188 call _cond_invalid tmp[420175]))
      if call_tmp[622010]
      {
        (420191 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557372] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557373] "maybe param" "temp"
      unknown call_tmp[622015] "expr temp" "maybe param" "maybe type" "temp"
      (622018 'move' call_tmp[622015](420176 call isTrue tmp[420175]))
      (557378 'move' tmp[557373](557376 call _cond_test call_tmp[622015]))
      if tmp[557373]
      {
        unknown tmp[557380] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557382 'move' tmp[557380](420179 call isTrue high[71625]))
        (557387 'move' tmp[557372](557384 '_paramFoldLogical' tmp[557373] tmp[557380]))
      }
      {
        (557392 'move' tmp[557372](557389 '_paramFoldLogical' tmp[557373] 0))
      }
      unknown call_tmp[622020] "expr temp" "maybe param" "maybe type" "temp"
      (622023 'move' call_tmp[622020](71671 call _cond_test tmp[557372]))
      if call_tmp[622020]
      {
        (510358 'move' ret[510353](510357 'deref' bounded[64205]))
        gotoReturn _end_computeBoundedType[510351] _end_computeBoundedType[510351]
      }
      {
        unknown call_tmp[622025] "expr temp" "maybe param" "maybe type" "temp"
        (622028 'move' call_tmp[622025](71665 call _cond_test low[71606]))
        if call_tmp[622025]
        {
          (510363 'move' ret[510353](510362 'deref' boundedLow[64207]))
          gotoReturn _end_computeBoundedType[510351] _end_computeBoundedType[510351]
        }
        {
          unknown call_tmp[622030] "expr temp" "maybe param" "maybe type" "temp"
          (622033 'move' call_tmp[622030](71659 call _cond_test high[71625]))
          if call_tmp[622030]
          {
            (510368 'move' ret[510353](510367 'deref' boundedHigh[64209]))
            gotoReturn _end_computeBoundedType[510351] _end_computeBoundedType[510351]
          }
          {
            (510373 'move' ret[510353](510372 'deref' boundedNone[64211]))
            gotoReturn _end_computeBoundedType[510351] _end_computeBoundedType[510351]
          }
        }
      }
      label _end_computeBoundedType[510351]
      (510355 return ret[510353])
    }
    unknown lo1[71693] "dead at end of block" "insert auto destroy"
    unknown tmp[557399] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557400] "maybe param" "temp"
    unknown call_tmp[622037] "expr temp" "maybe param" "maybe type" "temp"
    (622040 'move' call_tmp[622037](71681 call(374985 call (partial) hasLowBound _mt[243] this[71466])))
    (557405 'move' tmp[557400](557403 call _cond_test call_tmp[622037]))
    if tmp[557400]
    {
      unknown tmp[557407] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557409 'move' tmp[557407](71683 call _low _mt[243] this[71466]))
      (557414 'move' tmp[557399](557411 '_paramFoldLogical' tmp[557400] tmp[557407]))
    }
    {
      unknown tmp[557416] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557418 'move' tmp[557416](71687 call _low _mt[243] other[71461]))
      (557423 'move' tmp[557399](557420 '_paramFoldLogical' tmp[557400] tmp[557416]))
    }
    (541013 'init var' lo1[71693] tmp[557399])
    (71696 'end of statement')
    unknown hi1[71711] "dead at end of block" "insert auto destroy"
    unknown tmp[557430] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557431] "maybe param" "temp"
    unknown call_tmp[622048] "expr temp" "maybe param" "maybe type" "temp"
    (622051 'move' call_tmp[622048](71699 call(374989 call (partial) hasHighBound _mt[243] this[71466])))
    (557436 'move' tmp[557431](557434 call _cond_test call_tmp[622048]))
    if tmp[557431]
    {
      unknown tmp[557438] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557440 'move' tmp[557438](71701 call _high _mt[243] this[71466]))
      (557445 'move' tmp[557430](557442 '_paramFoldLogical' tmp[557431] tmp[557438]))
    }
    {
      unknown tmp[557447] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557449 'move' tmp[557447](71705 call _high _mt[243] other[71461]))
      (557454 'move' tmp[557430](557451 '_paramFoldLogical' tmp[557431] tmp[557447]))
    }
    (541015 'init var' hi1[71711] tmp[557430])
    (71714 'end of statement')
    unknown call_tmp[622059] "expr temp" "maybe param" "maybe type" "temp"
    (622062 'move' call_tmp[622059](71717 call stride _mt[243] this[71466]))
    unknown call_tmp[622064] "maybe param" "maybe type" "temp"
    (622067 'move' call_tmp[622064](71721 call abs call_tmp[622059]))
    unknown st1[71722] "dead at end of block" "insert auto destroy"
    (541017 'init var' st1[71722] call_tmp[622064])
    (71725 'end of statement')
    unknown lo2[71743] "dead at end of block" "insert auto destroy"
    unknown tmp[557461] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557462] "maybe param" "temp"
    unknown call_tmp[622071] "expr temp" "maybe param" "maybe type" "temp"
    (622074 'move' call_tmp[622071](71731 call(71727 call (partial) hasLowBound _mt[243] other[71461])))
    (557467 'move' tmp[557462](557465 call _cond_test call_tmp[622071]))
    if tmp[557462]
    {
      unknown tmp[557469] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557471 'move' tmp[557469](71733 call _low _mt[243] other[71461]))
      (557476 'move' tmp[557461](557473 '_paramFoldLogical' tmp[557462] tmp[557469]))
    }
    {
      unknown tmp[557478] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557480 'move' tmp[557478](71737 call _low _mt[243] this[71466]))
      (557485 'move' tmp[557461](557482 '_paramFoldLogical' tmp[557462] tmp[557478]))
    }
    (541019 'init var' lo2[71743] tmp[557461])
    (71746 'end of statement')
    unknown hi2[71764] "dead at end of block" "insert auto destroy"
    unknown tmp[557492] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557493] "maybe param" "temp"
    unknown call_tmp[622082] "expr temp" "maybe param" "maybe type" "temp"
    (622085 'move' call_tmp[622082](71752 call(71748 call (partial) hasHighBound _mt[243] other[71461])))
    (557498 'move' tmp[557493](557496 call _cond_test call_tmp[622082]))
    if tmp[557493]
    {
      unknown tmp[557500] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557502 'move' tmp[557500](71754 call _high _mt[243] other[71461]))
      (557507 'move' tmp[557492](557504 '_paramFoldLogical' tmp[557493] tmp[557500]))
    }
    {
      unknown tmp[557509] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557511 'move' tmp[557509](71758 call _high _mt[243] this[71466]))
      (557516 'move' tmp[557492](557513 '_paramFoldLogical' tmp[557493] tmp[557509]))
    }
    (541021 'init var' hi2[71764] tmp[557492])
    (71767 'end of statement')
    unknown call_tmp[622093] "expr temp" "maybe param" "maybe type" "temp"
    (622096 'move' call_tmp[622093](71770 call stride _mt[243] other[71461]))
    unknown call_tmp[622098] "maybe param" "maybe type" "temp"
    (622101 'move' call_tmp[622098](71774 call abs call_tmp[622093]))
    unknown st2[71775] "dead at end of block" "insert auto destroy"
    (541023 'init var' st2[71775] call_tmp[622098])
    (71778 'end of statement')
    unknown call_tmp[622105] "expr temp" "maybe param" "maybe type" "temp"
    (622108 'move' call_tmp[622105](374993 call intIdxType _mt[243] this[71466]))
    unknown call_tmp[622110] "expr temp" "maybe param" "maybe type" "temp"
    (622113 'move' call_tmp[622110](71782 call isUintType call_tmp[622105]))
    unknown call_tmp[622115] "expr temp" "maybe param" "maybe type" "temp"
    (622118 'move' call_tmp[622115](71798 call _cond_test call_tmp[622110]))
    if call_tmp[622115]
    {
      unknown call_tmp[622120] "expr temp" "maybe param" "maybe type" "temp"
      (622123 'move' call_tmp[622120](71785 call < lo1[71693] 0))
      unknown call_tmp[622125] "expr temp" "maybe param" "maybe type" "temp"
      (622128 'move' call_tmp[622125](71792 call _cond_test call_tmp[622120]))
      if call_tmp[622125]
      {
        (71789 call = lo1[71693] 0)
        (475497 'end of statement' lo1[71693])
      }
    }
    unknown call_tmp[622132] "maybe param" "maybe type" "temp"
    (622135 'move' call_tmp[622132](71804 call stride _mt[243] this[71466]))
    unknown call_tmp[622139] "maybe param" "maybe type" "temp"
    (622142 'move' call_tmp[622139](374999 call strType _mt[243] this[71466]))
    unknown newStride[71807] "dead at end of block" "insert auto destroy"
    (541025 'init var' newStride[71807] call_tmp[622132] call_tmp[622139])
    (71810 'end of statement')
    unknown call_tmp[622146] "expr temp" "maybe param" "maybe type" "temp"
    (622149 'move' call_tmp[622146](71814 call stride _mt[243] this[71466]))
    unknown call_tmp[622151] "maybe param" "maybe type" "temp"
    (622154 'move' call_tmp[622151](71818 call abs call_tmp[622146]))
    unknown call_tmp[622158] "maybe param" "maybe type" "temp"
    (622161 'move' call_tmp[622158](375003 call strType _mt[243] this[71466]))
    unknown lcm[71819] "dead at end of block" "insert auto destroy"
    (541027 'init var' lcm[71819] call_tmp[622151] call_tmp[622158])
    (71822 'end of statement')
    unknown call_tmp[622165] "expr temp" "maybe param" "maybe type" "temp"
    (622168 'move' call_tmp[622165](375012 call strType _mt[243] this[71466]))
    unknown call_tmp[622170] "expr temp" "maybe param" "maybe type" "temp"
    (622173 'move' call_tmp[622170](71835 call _cast call_tmp[622165] 0))
    unknown call_tmp[622175] "maybe param" "maybe type" "temp"
    (622178 'move' call_tmp[622175](71838 call _build_tuple lcm[71819] call_tmp[622170]))
    unknown call_tmp[622182] "expr temp" "maybe param" "maybe type" "temp"
    (622185 'move' call_tmp[622182](375007 call strType _mt[243] this[71466]))
    unknown call_tmp[622187] "maybe param" "maybe type" "temp"
    (622190 'move' call_tmp[622187](71830 call * 2 call_tmp[622182]))
    unknown tmp[71840] "dead at end of block" "insert auto destroy" "temp"
    (541029 'init var' tmp[71840] call_tmp[622175] call_tmp[622187])
    (71847 call _check_tuple_var_decl tmp[71840] 2)
    (475499 'end of statement')
    unknown call_tmp[622192] "maybe param" "maybe type" "temp"
    (622195 'move' call_tmp[622192](71841 call tmp[71840] 0))
    unknown g[71823] "dead at end of block" "insert auto destroy"
    (541031 'init var' g[71823] call_tmp[622192])
    unknown call_tmp[622197] "maybe param" "maybe type" "temp"
    (622200 'move' call_tmp[622197](71844 call tmp[71840] 1))
    unknown x[71825] "dead at end of block" "insert auto destroy"
    (541033 'init var' x[71825] call_tmp[622197])
    (71852 'end of statement')
    unknown tmp[420196] "maybe param" "temp"
    unknown call_tmp[622204] "expr temp" "maybe param" "maybe type" "temp"
    (622207 'move' call_tmp[622204](71854 call stride _mt[243] this[71466]))
    unknown call_tmp[622211] "expr temp" "maybe param" "maybe type" "temp"
    (622214 'move' call_tmp[622211](71858 call stride _mt[243] other[71461]))
    (420207 'move' tmp[420196](71861 call != call_tmp[622204] call_tmp[622211]))
    unknown call_tmp[622216] "expr temp" "maybe param" "maybe type" "temp"
    (622219 'move' call_tmp[622216](420209 call _cond_invalid tmp[420196]))
    if call_tmp[622216]
    {
      (420212 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557523] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557524] "maybe param" "temp"
    unknown call_tmp[622221] "expr temp" "maybe param" "maybe type" "temp"
    (622224 'move' call_tmp[622221](420197 call isTrue tmp[420196]))
    (557529 'move' tmp[557524](557527 call _cond_test call_tmp[622221]))
    if tmp[557524]
    {
      unknown tmp[557531] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622228] "expr temp" "maybe param" "maybe type" "temp"
      (622231 'move' call_tmp[622228](71864 call stride _mt[243] this[71466]))
      unknown call_tmp[622235] "expr temp" "maybe param" "maybe type" "temp"
      (622238 'move' call_tmp[622235](71868 call stride _mt[243] other[71461]))
      unknown call_tmp[622240] "expr temp" "maybe param" "maybe type" "temp"
      (622243 'move' call_tmp[622240](71871 call - call_tmp[622235]))
      unknown call_tmp[622245] "expr temp" "maybe param" "maybe type" "temp"
      (622248 'move' call_tmp[622245](71873 call != call_tmp[622228] call_tmp[622240]))
      (557533 'move' tmp[557531](420200 call isTrue call_tmp[622245]))
      (557538 'move' tmp[557523](557535 '_paramFoldLogical' tmp[557524] tmp[557531]))
    }
    {
      (557543 'move' tmp[557523](557540 '_paramFoldLogical' tmp[557524] 0))
    }
    unknown call_tmp[622250] "expr temp" "maybe param" "maybe type" "temp"
    (622253 'move' call_tmp[622250](71955 call _cond_test tmp[557523]))
    if call_tmp[622250]
    {
      unknown call_tmp[622255] "maybe param" "maybe type" "temp"
      (622258 'move' call_tmp[622255](71886 call chpl__extendedEuclid st1[71722] st2[71775]))
      const tmp[71887] "dead at end of block" "const" "insert auto destroy" "temp"
      (541035 'init var' tmp[71887] call_tmp[622255])
      (71894 call _check_tuple_var_decl tmp[71887] 2)
      (475501 'end of statement')
      unknown call_tmp[622260] "maybe param" "maybe type" "temp"
      (622263 'move' call_tmp[622260](71888 call tmp[71887] 0))
      const tg[71877] "dead at end of block" "const" "insert auto destroy"
      (541037 'init var' tg[71877] call_tmp[622260])
      unknown call_tmp[622265] "maybe param" "maybe type" "temp"
      (622268 'move' call_tmp[622265](71891 call tmp[71887] 1))
      const tx[71879] "dead at end of block" "const" "insert auto destroy"
      (541039 'init var' tx[71879] call_tmp[622265])
      (71899 'end of statement')
      unknown tmp[491758] "expr temp" "maybe param" "maybe type" "temp"
      unknown tmp[491799] "maybe param" "temp"
      (491802 'move' tmp[491799](491800 'addr of' g[71823]))
      unknown tmp[491810] "maybe param" "temp"
      (491813 'move' tmp[491810](491811 'addr of' x[71825]))
      unknown call_tmp[622274] "expr temp" "maybe param" "maybe type" "temp"
      (622277 'move' call_tmp[622274](375020 call strType _mt[243] this[71466]))
      unknown call_tmp[622279] "expr temp" "maybe param" "maybe type" "temp"
      (622282 'move' call_tmp[622279](71912 call(71907 call (partial) safeCast _mt[243] tg[71877]) call_tmp[622274]))
      unknown call_tmp[622288] "expr temp" "maybe param" "maybe type" "temp"
      (622291 'move' call_tmp[622288](375024 call strType _mt[243] this[71466]))
      unknown call_tmp[622293] "expr temp" "maybe param" "maybe type" "temp"
      (622296 'move' call_tmp[622293](71919 call(71914 call (partial) safeCast _mt[243] tx[71879]) call_tmp[622288]))
      (491759 'move' tmp[491758](71921 call _build_tuple call_tmp[622279] call_tmp[622293]))
      { scopeless
        unknown call_tmp[622300] "expr temp" "maybe param" "maybe type" "temp"
        (622303 'move' call_tmp[622300](491765 call size _mt[243] tmp[491758]))
        unknown call_tmp[622305] "expr temp" "maybe param" "maybe type" "temp"
        (622308 'move' call_tmp[622305](491768 call != 2 call_tmp[622300]))
        unknown call_tmp[622310] "expr temp" "maybe param" "maybe type" "temp"
        (622313 'move' call_tmp[622310](491791 call _cond_test call_tmp[622305]))
        if call_tmp[622310]
        {
          (491787 call compilerError "tuple size must match the number of grouped variables" 0)
        }
      }
      unknown call_tmp[622315] "expr temp" "maybe param" "maybe type" "temp"
      (622318 'move' call_tmp[622315](491797 call tmp[491758] 0))
      (491804 call = tmp[491799] call_tmp[622315])
      unknown call_tmp[622320] "expr temp" "maybe param" "maybe type" "temp"
      (622323 'move' call_tmp[622320](491808 call tmp[491758] 1))
      (491815 call = tmp[491810] call_tmp[622320])
      (475502 'end of statement' g[71823] x[71825] tg[71877] tx[71879])
      unknown call_tmp[622325] "expr temp" "maybe param" "maybe type" "temp"
      (622328 'move' call_tmp[622325](71929 call / st1[71722] g[71823]))
      unknown call_tmp[622330] "expr temp" "maybe param" "maybe type" "temp"
      (622333 'move' call_tmp[622330](71932 call * call_tmp[622325] st2[71775]))
      (71934 call = lcm[71819] call_tmp[622330])
      (475507 'end of statement' lcm[71819] st1[71722] g[71823] st2[71775])
      unknown tmp[557550] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557551] "maybe param" "temp"
      unknown call_tmp[622337] "expr temp" "maybe param" "maybe type" "temp"
      (622340 'move' call_tmp[622337](71939 call stride _mt[243] this[71466]))
      unknown call_tmp[622342] "expr temp" "maybe param" "maybe type" "temp"
      (622345 'move' call_tmp[622342](71943 call > call_tmp[622337] 0))
      (557556 'move' tmp[557551](557554 call _cond_test call_tmp[622342]))
      if tmp[557551]
      {
        (557561 'move' tmp[557550](557558 '_paramFoldLogical' tmp[557551] lcm[71819]))
      }
      {
        unknown tmp[557563] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (557565 'move' tmp[557563](71947 call - lcm[71819]))
        (557570 'move' tmp[557550](557567 '_paramFoldLogical' tmp[557551] tmp[557563]))
      }
      (71952 call = newStride[71807] tmp[557550])
      (475512 'end of statement' newStride[71807] lcm[71819] lcm[71819])
    }
    unknown emptyIntersection[71960] "dead at end of block" "insert auto destroy" "split inited"
    unknown type_tmp[541041] "maybe param" "maybe type" "temp"
    (541047 'move' type_tmp[541041] bool[10])
    (541043 'init var split decl' emptyIntersection[71960] type_tmp[541041])
    (71963 'end of statement')
    function min[71970](arg x[71967]:int(64)[13], arg y[71973]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510379] "RVV" "temp"
      unknown call_tmp[622347] "expr temp" "maybe param" "maybe type" "temp"
      (622350 'move' call_tmp[622347](71980 call max int(64)[13]))
      unknown call_tmp[622352] "expr temp" "maybe param" "maybe type" "temp"
      (622355 'move' call_tmp[622352](71981 call > y[71973] call_tmp[622347]))
      unknown call_tmp[622357] "expr temp" "maybe param" "maybe type" "temp"
      (622360 'move' call_tmp[622357](71987 call _cond_test call_tmp[622352]))
      if call_tmp[622357]
      {
        (510384 'move' ret[510379](510383 'deref' x[71967]))
        gotoReturn _end_min[510377] _end_min[510377]
      }
      unknown call_tmp[622362] "expr temp" "maybe param" "maybe type" "temp"
      (622365 'move' call_tmp[622362](71997 call _cast int(64)[13] y[71973]))
      unknown call_tmp[622367] "expr temp" "maybe param" "maybe type" "temp"
      (622370 'move' call_tmp[622367](71999 call min x[71967] call_tmp[622362]))
      (510389 'move' ret[510379](510388 'deref' call_tmp[622367]))
      label _end_min[510377]
      (510381 return ret[510379])
    }
    function min[72010](arg x[72007]:uint(64)[115], arg y[72013]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510393] "RVV" "temp"
      unknown call_tmp[622372] "expr temp" "maybe param" "maybe type" "temp"
      (622375 'move' call_tmp[622372](72018 call < y[72013] 0))
      unknown call_tmp[622377] "expr temp" "maybe param" "maybe type" "temp"
      (622380 'move' call_tmp[622377](72029 call _cond_test call_tmp[622372]))
      if call_tmp[622377]
      {
        (72022 call = emptyIntersection[71960] 1)
        (475518 'end of statement')
        (510398 'move' ret[510393](510397 'deref' x[72007]))
        gotoReturn _end_min[510391] _end_min[510391]
      }
      unknown call_tmp[622382] "expr temp" "maybe param" "maybe type" "temp"
      (622385 'move' call_tmp[622382](72039 call _cast uint(64)[115] y[72013]))
      unknown call_tmp[622387] "expr temp" "maybe param" "maybe type" "temp"
      (622390 'move' call_tmp[622387](72041 call min x[72007] call_tmp[622382]))
      (510403 'move' ret[510393](510402 'deref' call_tmp[622387]))
      label _end_min[510391]
      (510395 return ret[510393])
    }
    function max[72052](arg x[72049]:int(64)[13], arg y[72055]:uint(64)[115]) : _unknown[51]
    {
      unknown ret[510407] "RVV" "temp"
      unknown call_tmp[622392] "expr temp" "maybe param" "maybe type" "temp"
      (622395 'move' call_tmp[622392](72062 call max int(64)[13]))
      unknown call_tmp[622397] "expr temp" "maybe param" "maybe type" "temp"
      (622400 'move' call_tmp[622397](72063 call > y[72055] call_tmp[622392]))
      unknown call_tmp[622402] "expr temp" "maybe param" "maybe type" "temp"
      (622405 'move' call_tmp[622402](72074 call _cond_test call_tmp[622397]))
      if call_tmp[622402]
      {
        (72067 call = emptyIntersection[71960] 1)
        (475521 'end of statement')
        (510412 'move' ret[510407](510411 'deref' x[72049]))
        gotoReturn _end_max[510405] _end_max[510405]
      }
      unknown call_tmp[622407] "expr temp" "maybe param" "maybe type" "temp"
      (622410 'move' call_tmp[622407](72084 call _cast int(64)[13] y[72055]))
      unknown call_tmp[622412] "expr temp" "maybe param" "maybe type" "temp"
      (622415 'move' call_tmp[622412](72086 call max x[72049] call_tmp[622407]))
      (510417 'move' ret[510407](510416 'deref' call_tmp[622412]))
      label _end_max[510405]
      (510409 return ret[510407])
    }
    function max[72097](arg x[72094]:uint(64)[115], arg y[72100]:int(64)[13]) : _unknown[51]
    {
      unknown ret[510421] "RVV" "temp"
      unknown call_tmp[622417] "expr temp" "maybe param" "maybe type" "temp"
      (622420 'move' call_tmp[622417](72105 call < y[72100] 0))
      unknown call_tmp[622422] "expr temp" "maybe param" "maybe type" "temp"
      (622425 'move' call_tmp[622422](72111 call _cond_test call_tmp[622417]))
      if call_tmp[622422]
      {
        (510426 'move' ret[510421](510425 'deref' x[72094]))
        gotoReturn _end_max[510419] _end_max[510419]
      }
      unknown call_tmp[622427] "expr temp" "maybe param" "maybe type" "temp"
      (622430 'move' call_tmp[622427](72121 call _cast uint(64)[115] y[72100]))
      unknown call_tmp[622432] "expr temp" "maybe param" "maybe type" "temp"
      (622435 'move' call_tmp[622432](72123 call max x[72094] call_tmp[622427]))
      (510431 'move' ret[510421](510430 'deref' call_tmp[622432]))
      label _end_max[510419]
      (510423 return ret[510421])
    }
    (541049 'init var split init' emptyIntersection[71960] 0 type_tmp[541041])
    (475526 'end of statement' emptyIntersection[71960])
    unknown call_tmp[622439] "expr temp" "maybe param" "maybe type" "temp"
    (622442 'move' call_tmp[622439](375056 call intIdxType _mt[243] this[71466]))
    unknown call_tmp[622444] "expr temp" "maybe param" "maybe type" "temp"
    (622447 'move' call_tmp[622444](72137 call max lo1[71693] lo2[71743]))
    unknown call_tmp[622449] "maybe param" "maybe type" "temp"
    (622452 'move' call_tmp[622449](72139 call _cast call_tmp[622439] call_tmp[622444]))
    unknown newlo[72141] "dead at end of block" "insert auto destroy"
    (541052 'init var' newlo[72141] call_tmp[622449])
    (72144 'end of statement')
    unknown call_tmp[622456] "expr temp" "maybe param" "maybe type" "temp"
    (622459 'move' call_tmp[622456](375062 call intIdxType _mt[243] this[71466]))
    unknown call_tmp[622461] "expr temp" "maybe param" "maybe type" "temp"
    (622464 'move' call_tmp[622461](72149 call min hi1[71711] hi2[71764]))
    unknown call_tmp[622466] "maybe param" "maybe type" "temp"
    (622469 'move' call_tmp[622466](72151 call _cast call_tmp[622456] call_tmp[622461]))
    unknown newhi[72153] "dead at end of block" "insert auto destroy"
    (541054 'init var' newhi[72153] call_tmp[622466])
    (72156 'end of statement')
    unknown call_tmp[622471] "expr temp" "maybe param" "maybe type" "temp"
    (622474 'move' call_tmp[622471](72169 call _cond_test emptyIntersection[71960]))
    if call_tmp[622471]
    {
      (72160 call = newlo[72141] 1)
      (475532 'end of statement' newlo[72141])
      (72166 call = newhi[72153] 0)
      (475534 'end of statement' newhi[72153])
    }
    unknown tmp[420217] "maybe param" "temp"
    (420228 'move' tmp[420217](72206 call ! ambig[71472]))
    unknown call_tmp[622476] "expr temp" "maybe param" "maybe type" "temp"
    (622479 'move' call_tmp[622476](420230 call _cond_invalid tmp[420217]))
    if call_tmp[622476]
    {
      (420233 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown result[72221] "dead at end of block" "insert auto destroy"
    unknown tmp[557604] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557605] "maybe param" "temp"
    unknown call_tmp[622481] "expr temp" "maybe param" "maybe type" "temp"
    (622484 'move' call_tmp[622481](420218 call isTrue tmp[420217]))
    (557610 'move' tmp[557605](557608 call _cond_test call_tmp[622481]))
    if tmp[557605]
    {
      unknown tmp[420238] "maybe param" "temp"
      (420249 'move' tmp[420238](72209 call aligned _mt[243] this[71466]))
      unknown call_tmp[622488] "expr temp" "maybe param" "maybe type" "temp"
      (622491 'move' call_tmp[622488](420251 call _cond_invalid tmp[420238]))
      if call_tmp[622488]
      {
        (420254 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[557577] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557578] "maybe param" "temp"
      unknown call_tmp[622493] "expr temp" "maybe param" "maybe type" "temp"
      (622496 'move' call_tmp[622493](420239 call isTrue tmp[420238]))
      (557583 'move' tmp[557578](557581 call _cond_test call_tmp[622493]))
      if tmp[557578]
      {
        (557588 'move' tmp[557577](557585 '_paramFoldLogical' tmp[557578] 1))
      }
      {
        unknown tmp[557590] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[622500] "expr temp" "maybe param" "maybe type" "temp"
        (622503 'move' call_tmp[622500](72213 call aligned _mt[243] other[71461]))
        (557592 'move' tmp[557590](420243 call isTrue call_tmp[622500]))
        (557597 'move' tmp[557577](557594 '_paramFoldLogical' tmp[557578] tmp[557590]))
      }
      unknown tmp[557612] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557614 'move' tmp[557612](420221 call isTrue tmp[557577]))
      (557619 'move' tmp[557604](557616 '_paramFoldLogical' tmp[557605] tmp[557612]))
    }
    {
      (557624 'move' tmp[557604](557621 '_paramFoldLogical' tmp[557605] 0))
    }
    unknown call_tmp[622507] "expr temp" "maybe param" "maybe type" "temp"
    (622510 'move' call_tmp[622507](375071 call idxType _mt[243] this[71466]))
    unknown call_tmp[622512] "expr temp" "maybe param" "maybe type" "temp"
    (622515 'move' call_tmp[622512](72181 call computeBoundedType this[71466] other[71461]))
    unknown call_tmp[622519] "expr temp" "maybe param" "maybe type" "temp"
    (622522 'move' call_tmp[622519](72183 call stridable _mt[243] this[71466]))
    unknown call_tmp[622526] "expr temp" "maybe param" "maybe type" "temp"
    (622529 'move' call_tmp[622526](72187 call stridable _mt[243] other[71461]))
    unknown call_tmp[622531] "expr temp" "maybe param" "maybe type" "temp"
    (622534 'move' call_tmp[622531](72190 call | call_tmp[622519] call_tmp[622526]))
    unknown call_tmp[622538] "expr temp" "maybe param" "maybe type" "temp"
    (622541 'move' call_tmp[622538](72195 call(375077 call (partial) chpl_intToIdx _mt[243] this[71466]) newlo[72141]))
    unknown call_tmp[622545] "expr temp" "maybe param" "maybe type" "temp"
    (622548 'move' call_tmp[622545](72199 call(375082 call (partial) chpl_intToIdx _mt[243] this[71466]) newhi[72153]))
    unknown call_tmp[622552] "expr temp" "maybe param" "maybe type" "temp"
    (622555 'move' call_tmp[622552](72204 call(375088 call (partial) chpl_intToIdx _mt[243] this[71466]) 0))
    unknown call_tmp[622557] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (622560 'move' call_tmp[622557](747701 'new' range[64316](?) call_tmp[622507] call_tmp[622512] call_tmp[622531] call_tmp[622538] call_tmp[622545] newStride[71807] call_tmp[622552] tmp[557604]))
    (541056 'init var' result[72221] call_tmp[622557])
    (72224 'end of statement' lo1[71693] lo2[71743] hi1[71711] hi2[71764] newlo[72141] newhi[72153] newStride[71807])
    unknown call_tmp[622564] "expr temp" "maybe param" "maybe type" "temp"
    (622567 'move' call_tmp[622564](72226 call stridable _mt[243] result[72221]))
    unknown call_tmp[622569] "expr temp" "maybe param" "maybe type" "temp"
    (622572 'move' call_tmp[622569](72430 call _cond_test call_tmp[622564]))
    if call_tmp[622569]
    {
      unknown call_tmp[622576] "expr temp" "maybe param" "maybe type" "temp"
      (622579 'move' call_tmp[622576](72231 call alignment _mt[243] this[71466]))
      unknown call_tmp[622581] "expr temp" "maybe param" "maybe type" "temp"
      (622584 'move' call_tmp[622581](72235 call chpl__idxToInt call_tmp[622576]))
      unknown call_tmp[622588] "expr temp" "maybe param" "maybe type" "temp"
      (622591 'move' call_tmp[622588](375094 call intIdxType _mt[243] this[71466]))
      unknown call_tmp[622593] "expr temp" "maybe param" "maybe type" "temp"
      (622596 'move' call_tmp[622593](72238 call _cast call_tmp[622588] st1[71722]))
      unknown call_tmp[622598] "expr temp" "maybe param" "maybe type" "temp"
      (622601 'move' call_tmp[622598](72240 call % call_tmp[622581] call_tmp[622593]))
      unknown call_tmp[622603] "maybe param" "maybe type" "temp"
      (622606 'move' call_tmp[622603](72243 call _cast int(64)[13] call_tmp[622598]))
      unknown al1[72245] "dead at end of block" "insert auto destroy"
      (541058 'init var' al1[72245] call_tmp[622603])
      (72248 'end of statement')
      unknown call_tmp[622610] "expr temp" "maybe param" "maybe type" "temp"
      (622613 'move' call_tmp[622610](72252 call alignment _mt[243] other[71461]))
      unknown call_tmp[622615] "expr temp" "maybe param" "maybe type" "temp"
      (622618 'move' call_tmp[622615](72256 call chpl__idxToInt call_tmp[622610]))
      unknown call_tmp[622622] "expr temp" "maybe param" "maybe type" "temp"
      (622625 'move' call_tmp[622622](72259 call intIdxType _mt[243] other[71461]))
      unknown call_tmp[622627] "expr temp" "maybe param" "maybe type" "temp"
      (622630 'move' call_tmp[622627](72262 call _cast call_tmp[622622] st2[71775]))
      unknown call_tmp[622632] "expr temp" "maybe param" "maybe type" "temp"
      (622635 'move' call_tmp[622632](72264 call % call_tmp[622615] call_tmp[622627]))
      unknown call_tmp[622637] "maybe param" "maybe type" "temp"
      (622640 'move' call_tmp[622637](72267 call _cast int(64)[13] call_tmp[622632]))
      unknown al2[72269] "dead at end of block" "insert auto destroy"
      (541060 'init var' al2[72269] call_tmp[622637])
      (72272 'end of statement' st1[71722] st2[71775])
      unknown call_tmp[622642] "expr temp" "maybe param" "maybe type" "temp"
      (622645 'move' call_tmp[622642](72275 call - al2[72269] al1[72245]))
      unknown call_tmp[622647] "expr temp" "maybe param" "maybe type" "temp"
      (622650 'move' call_tmp[622647](72278 call % call_tmp[622642] g[71823]))
      unknown call_tmp[622652] "expr temp" "maybe param" "maybe type" "temp"
      (622655 'move' call_tmp[622652](72281 call != call_tmp[622647] 0))
      unknown call_tmp[622657] "expr temp" "maybe param" "maybe type" "temp"
      (622660 'move' call_tmp[622657](72426 call _cond_test call_tmp[622652]))
      if call_tmp[622657]
      {
        unknown tmp[420259] "maybe param" "temp"
        (420270 'move' tmp[420259] 1)
        unknown call_tmp[622662] "expr temp" "maybe param" "maybe type" "temp"
        (622665 'move' call_tmp[622662](420272 call _cond_invalid tmp[420259]))
        if call_tmp[622662]
        {
          (420275 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[557631] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557632] "maybe param" "temp"
        unknown call_tmp[622667] "expr temp" "maybe param" "maybe type" "temp"
        (622670 'move' call_tmp[622667](420260 call isTrue tmp[420259]))
        (557637 'move' tmp[557632](557635 call _cond_test call_tmp[622667]))
        if tmp[557632]
        {
          unknown tmp[557639] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622672] "expr temp" "maybe param" "maybe type" "temp"
          (622675 'move' call_tmp[622672](72287 call isBoundedRange result[72221]))
          unknown call_tmp[622677] "expr temp" "maybe param" "maybe type" "temp"
          (622680 'move' call_tmp[622677](72288 call ! call_tmp[622672]))
          (557641 'move' tmp[557639](420263 call isTrue call_tmp[622677]))
          (557646 'move' tmp[557631](557643 '_paramFoldLogical' tmp[557632] tmp[557639]))
        }
        {
          (557651 'move' tmp[557631](557648 '_paramFoldLogical' tmp[557632] 0))
        }
        unknown call_tmp[622682] "expr temp" "maybe param" "maybe type" "temp"
        (622685 'move' call_tmp[622682](72318 call _cond_test tmp[557631]))
        if call_tmp[622682]
        {
          (72316 call boundsCheckHalt module=[255] HaltWrappers[209910] "could not represent range slice - it needs to be empty, but the slice type is not bounded")
          (357783 'referenced modules list' HaltWrappers[209910])
        }
        unknown call_tmp[622689] "expr temp" "maybe param" "maybe type" "temp"
        (622692 'move' call_tmp[622689](72325 call _low _mt[243] result[72221]))
        unknown call_tmp[622696] "expr temp" "maybe param" "maybe type" "temp"
        (622699 'move' call_tmp[622696](375104 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622701] "expr temp" "maybe param" "maybe type" "temp"
        (622704 'move' call_tmp[622701](72330 call _cast call_tmp[622696] 1))
        (72332 call = call_tmp[622689] call_tmp[622701])
        (475544 'end of statement' result[72221])
        unknown call_tmp[622708] "expr temp" "maybe param" "maybe type" "temp"
        (622711 'move' call_tmp[622708](72336 call _high _mt[243] result[72221]))
        unknown call_tmp[622715] "expr temp" "maybe param" "maybe type" "temp"
        (622718 'move' call_tmp[622715](375108 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622720] "expr temp" "maybe param" "maybe type" "temp"
        (622723 'move' call_tmp[622720](72341 call _cast call_tmp[622715] 0))
        (72343 call = call_tmp[622708] call_tmp[622720])
        (475546 'end of statement' result[72221])
        unknown tmp[557658] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557659] "maybe param" "temp"
        unknown call_tmp[622727] "expr temp" "maybe param" "maybe type" "temp"
        (622730 'move' call_tmp[622727](72351 call stride _mt[243] this[71466]))
        unknown call_tmp[622732] "expr temp" "maybe param" "maybe type" "temp"
        (622735 'move' call_tmp[622732](72355 call > call_tmp[622727] 0))
        (557664 'move' tmp[557659](557662 call _cond_test call_tmp[622732]))
        if tmp[557659]
        {
          unknown tmp[557666] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622739] "expr temp" "maybe param" "maybe type" "temp"
          (622742 'move' call_tmp[622739](375112 call intIdxType _mt[243] this[71466]))
          (557668 'move' tmp[557666](72359 call _cast call_tmp[622739] 1))
          (557673 'move' tmp[557658](557670 '_paramFoldLogical' tmp[557659] tmp[557666]))
        }
        {
          unknown tmp[557675] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[622746] "expr temp" "maybe param" "maybe type" "temp"
          (622749 'move' call_tmp[622746](375116 call intIdxType _mt[243] this[71466]))
          (557677 'move' tmp[557675](72363 call _cast call_tmp[622746] 0))
          (557682 'move' tmp[557658](557679 '_paramFoldLogical' tmp[557659] tmp[557675]))
        }
        unknown call_tmp[622753] "expr temp" "maybe param" "maybe type" "temp"
        (622756 'move' call_tmp[622753](72347 call _alignment _mt[243] result[72221]))
        (72368 call = call_tmp[622753] tmp[557658])
        (475548 'end of statement' result[72221])
      }
      {
        unknown call_tmp[622758] "expr temp" "maybe param" "maybe type" "temp"
        (622761 'move' call_tmp[622758](72373 call - al2[72269] al1[72245]))
        unknown call_tmp[622763] "maybe param" "maybe type" "temp"
        (622766 'move' call_tmp[622763](72376 call * call_tmp[622758] x[71825]))
        unknown offset[72378] "dead at end of block" "insert auto destroy"
        (541062 'init var' offset[72378] call_tmp[622763])
        (72381 'end of statement' al2[72269] al1[72245] x[71825])
        unknown call_tmp[622768] "expr temp" "maybe param" "maybe type" "temp"
        (622771 'move' call_tmp[622768](72385 call < offset[72378] 0))
        unknown call_tmp[622773] "expr temp" "maybe param" "maybe type" "temp"
        (622776 'move' call_tmp[622773](72392 call _cond_test call_tmp[622768]))
        if call_tmp[622773]
        {
          (72389 call += offset[72378] lcm[71819])
          (475553 'end of statement' offset[72378] lcm[71819])
        }
        unknown call_tmp[622780] "expr temp" "maybe param" "maybe type" "temp"
        (622783 'move' call_tmp[622780](72398 call _alignment _mt[243] result[72221]))
        unknown call_tmp[622787] "expr temp" "maybe param" "maybe type" "temp"
        (622790 'move' call_tmp[622787](375127 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622792] "expr temp" "maybe param" "maybe type" "temp"
        (622795 'move' call_tmp[622792](72403 call _cast call_tmp[622787] al1[72245]))
        unknown call_tmp[622799] "expr temp" "maybe param" "maybe type" "temp"
        (622802 'move' call_tmp[622799](375132 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622804] "expr temp" "maybe param" "maybe type" "temp"
        (622807 'move' call_tmp[622804](72407 call _cast call_tmp[622799] offset[72378]))
        unknown call_tmp[622811] "expr temp" "maybe param" "maybe type" "temp"
        (622814 'move' call_tmp[622811](375137 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622816] "expr temp" "maybe param" "maybe type" "temp"
        (622819 'move' call_tmp[622816](72411 call _cast call_tmp[622811] st1[71722]))
        unknown call_tmp[622821] "expr temp" "maybe param" "maybe type" "temp"
        (622824 'move' call_tmp[622821](72413 call * call_tmp[622804] call_tmp[622816]))
        unknown call_tmp[622828] "expr temp" "maybe param" "maybe type" "temp"
        (622831 'move' call_tmp[622828](375142 call intIdxType _mt[243] this[71466]))
        unknown call_tmp[622833] "expr temp" "maybe param" "maybe type" "temp"
        (622836 'move' call_tmp[622833](72417 call _cast call_tmp[622828] g[71823]))
        unknown call_tmp[622838] "expr temp" "maybe param" "maybe type" "temp"
        (622841 'move' call_tmp[622838](72419 call / call_tmp[622821] call_tmp[622833]))
        unknown call_tmp[622843] "expr temp" "maybe param" "maybe type" "temp"
        (622846 'move' call_tmp[622843](72421 call + call_tmp[622792] call_tmp[622838]))
        (72423 call = call_tmp[622780] call_tmp[622843])
        (475556 'end of statement' result[72221] al1[72245] offset[72378] st1[71722] g[71823])
      }
    }
    (510440 'move' ret[510435](510439 'deref' result[72221]))
    gotoReturn _end_this[510433] _end_this[510433]
    (475562 'end of statement' result[72221])
    label _end_this[510433]
    (510437 return ret[510435])
  }
  function chpl_count_help[72448](arg r[72445]:range[64316](?), arg i[72450]:_any[178](?)) : _unknown[51] "no return value for void"
  {
    (72483 call compilerError "count operator is not defined for unbounded ranges")
    (510444 return _void[55])
  }
  where {
    unknown call_tmp[622850] "expr temp" "maybe param" "maybe type" "temp"
    (622853 'move' call_tmp[622850](72453 call boundedType _mt[243] r[72445]))
    (72460 call == call_tmp[622850] boundedNone[64211])
  }
  function chpl_count_help[72493](arg r[72491]:_any[178](?), arg count[72496]:integral[199](?)) : _unknown[51]
  {
    unknown ret[510485] "RVV" "temp"
    unknown tmp[420280] "maybe param" "temp"
    (420291 'move' tmp[420280] 1)
    unknown call_tmp[622855] "expr temp" "maybe param" "maybe type" "temp"
    (622858 'move' call_tmp[622855](420293 call _cond_invalid tmp[420280]))
    if call_tmp[622855]
    {
      (420296 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557689] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557690] "maybe param" "temp"
    unknown call_tmp[622860] "expr temp" "maybe param" "maybe type" "temp"
    (622863 'move' call_tmp[622860](420281 call isTrue tmp[420280]))
    (557695 'move' tmp[557690](557693 call _cond_test call_tmp[622860]))
    if tmp[557690]
    {
      unknown tmp[557697] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[622867] "expr temp" "maybe param" "maybe type" "temp"
      (622870 'move' call_tmp[622867](72505 call(72501 call (partial) isAmbiguous _mt[243] r[72491])))
      (557699 'move' tmp[557697](420284 call isTrue call_tmp[622867]))
      (557704 'move' tmp[557689](557701 '_paramFoldLogical' tmp[557690] tmp[557697]))
    }
    {
      (557709 'move' tmp[557689](557706 '_paramFoldLogical' tmp[557690] 0))
    }
    unknown call_tmp[622872] "expr temp" "maybe param" "maybe type" "temp"
    (622875 'move' call_tmp[622872](72531 call _cond_test tmp[557689]))
    if call_tmp[622872]
    {
      (72529 call boundsCheckHalt "count -- Cannot count off elements from a range which is ambiguously aligned.")
    }
    unknown resultType[72541] "dead at end of block" "insert auto destroy" "type variable"(72538 call intIdxType _mt[243] r[72491])
    (541068 'move' resultType[72541](541065 call intIdxType _mt[243] r[72491]))
    unknown strType[72548] "dead at end of block" "insert auto destroy" "type variable"(72547 call chpl__rangeStrideType resultType[72541])
    (541073 'move' strType[72548](541071 call chpl__rangeStrideType resultType[72541]))
    function absSameType[72555](arg str[72553]:_any[178](?)) : _unknown[51]
    {
      unknown ret[510448] "RVV" "temp"
      unknown call_tmp[622883] "expr temp" "maybe param" "maybe type" "temp"
      (622886 'move' call_tmp[622883](72558 call stride _mt[243] r[72491]))
      unknown call_tmp[622888] "expr temp" "maybe param" "maybe type" "temp"
      (622891 'move' call_tmp[622888](72562 call < call_tmp[622883] 0))
      unknown call_tmp[622893] "expr temp" "maybe param" "maybe type" "temp"
      (622896 'move' call_tmp[622893](72586 call _cond_test call_tmp[622888]))
      if call_tmp[622893]
      {
        unknown call_tmp[622900] "expr temp" "maybe param" "maybe type" "temp"
        (622903 'move' call_tmp[622900](72565 call stride _mt[243] r[72491]))
        unknown call_tmp[622905] "expr temp" "maybe param" "maybe type" "temp"
        (622908 'move' call_tmp[622905](72568 call - call_tmp[622900]))
        unknown call_tmp[622910] "expr temp" "maybe param" "maybe type" "temp"
        (622913 'move' call_tmp[622910](72571 call _cast resultType[72541] call_tmp[622905]))
        (510453 'move' ret[510448](510452 'deref' call_tmp[622910]))
        gotoReturn _end_absSameType[510446] _end_absSameType[510446]
      }
      {
        unknown call_tmp[622917] "expr temp" "maybe param" "maybe type" "temp"
        (622920 'move' call_tmp[622917](72577 call stride _mt[243] r[72491]))
        unknown call_tmp[622922] "expr temp" "maybe param" "maybe type" "temp"
        (622925 'move' call_tmp[622922](72581 call _cast resultType[72541] call_tmp[622917]))
        (510458 'move' ret[510448](510457 'deref' call_tmp[622922]))
        gotoReturn _end_absSameType[510446] _end_absSameType[510446]
      }
      label _end_absSameType[510446]
      (510450 return ret[510448])
    }
    unknown call_tmp[622927] "expr temp" "maybe param" "maybe type" "temp"
    (622930 'move' call_tmp[622927](72595 call == count[72496] 0))
    unknown call_tmp[622932] "expr temp" "maybe param" "maybe type" "temp"
    (622935 'move' call_tmp[622932](72795 call _cond_test call_tmp[622927]))
    if call_tmp[622932]
    {
      unknown call_tmp[622939] "expr temp" "maybe param" "maybe type" "temp"
      (622942 'move' call_tmp[622939](72602 call(72598 call (partial) hasLowBound _mt[243] r[72491])))
      unknown call_tmp[622944] "expr temp" "maybe param" "maybe type" "temp"
      (622947 'move' call_tmp[622944](72789 call _cond_test call_tmp[622939]))
      if call_tmp[622944]
      {
        unknown call_tmp[622951] "expr temp" "maybe param" "maybe type" "temp"
        (622954 'move' call_tmp[622951](72606 call idxType _mt[243] r[72491]))
        unknown call_tmp[622958] "expr temp" "maybe param" "maybe type" "temp"
        (622961 'move' call_tmp[622958](72617 call stridable _mt[243] r[72491]))
        unknown call_tmp[622965] "expr temp" "maybe param" "maybe type" "temp"
        (622968 'move' call_tmp[622965](72623 call idxType _mt[243] r[72491]))
        unknown call_tmp[622972] "expr temp" "maybe param" "maybe type" "temp"
        (622975 'move' call_tmp[622972](72628 call _low _mt[243] r[72491]))
        unknown call_tmp[622977] "expr temp" "maybe param" "maybe type" "temp"
        (622980 'move' call_tmp[622977](72631 call chpl__intToIdx call_tmp[622965] call_tmp[622972]))
        unknown call_tmp[622984] "expr temp" "maybe param" "maybe type" "temp"
        (622987 'move' call_tmp[622984](72635 call idxType _mt[243] r[72491]))
        unknown call_tmp[622991] "expr temp" "maybe param" "maybe type" "temp"
        (622994 'move' call_tmp[622991](72640 call _low _mt[243] r[72491]))
        unknown call_tmp[622998] "expr temp" "maybe param" "maybe type" "temp"
        (623001 'move' call_tmp[622998](72645 call stride _mt[243] r[72491]))
        unknown call_tmp[623003] "expr temp" "maybe param" "maybe type" "temp"
        (623006 'move' call_tmp[623003](72649 call absSameType call_tmp[622998]))
        unknown call_tmp[623008] "expr temp" "maybe param" "maybe type" "temp"
        (623011 'move' call_tmp[623008](72650 call - call_tmp[622991] call_tmp[623003]))
        unknown call_tmp[623013] "expr temp" "maybe param" "maybe type" "temp"
        (623016 'move' call_tmp[623013](72652 call chpl__intToIdx call_tmp[622984] call_tmp[623008]))
        unknown call_tmp[623020] "expr temp" "maybe param" "maybe type" "temp"
        (623023 'move' call_tmp[623020](72655 call stride _mt[243] r[72491]))
        unknown call_tmp[623027] "expr temp" "maybe param" "maybe type" "temp"
        (623030 'move' call_tmp[623027](72661 call idxType _mt[243] r[72491]))
        unknown call_tmp[623034] "expr temp" "maybe param" "maybe type" "temp"
        (623037 'move' call_tmp[623034](72666 call _alignment _mt[243] r[72491]))
        unknown call_tmp[623039] "expr temp" "maybe param" "maybe type" "temp"
        (623042 'move' call_tmp[623039](72669 call chpl__intToIdx call_tmp[623027] call_tmp[623034]))
        unknown call_tmp[623046] "expr temp" "maybe param" "maybe type" "temp"
        (623049 'move' call_tmp[623046](72672 call aligned _mt[243] r[72491]))
        unknown call_tmp[623051] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (623054 'move' call_tmp[623051](747702 'new' range[64316](?)(idxType = call_tmp[622951])(boundedType = bounded[64205])(stridable = call_tmp[622958])(_low = call_tmp[622977])(_high = call_tmp[623013])(_stride = call_tmp[623020])(_alignment = call_tmp[623039])(_aligned = call_tmp[623046])))
        (510490 'move' ret[510485](510489 'deref' call_tmp[623051]))
        gotoReturn _end_chpl_count_help[510483] _end_chpl_count_help[510483]
      }
      {
        unknown call_tmp[623058] "expr temp" "maybe param" "maybe type" "temp"
        (623061 'move' call_tmp[623058](72685 call(72681 call (partial) hasHighBound _mt[243] r[72491])))
        unknown call_tmp[623063] "expr temp" "maybe param" "maybe type" "temp"
        (623066 'move' call_tmp[623063](72785 call _cond_test call_tmp[623058]))
        if call_tmp[623063]
        {
          unknown call_tmp[623070] "expr temp" "maybe param" "maybe type" "temp"
          (623073 'move' call_tmp[623070](72689 call idxType _mt[243] r[72491]))
          unknown call_tmp[623077] "expr temp" "maybe param" "maybe type" "temp"
          (623080 'move' call_tmp[623077](72700 call stridable _mt[243] r[72491]))
          unknown call_tmp[623084] "expr temp" "maybe param" "maybe type" "temp"
          (623087 'move' call_tmp[623084](72706 call idxType _mt[243] r[72491]))
          unknown call_tmp[623091] "expr temp" "maybe param" "maybe type" "temp"
          (623094 'move' call_tmp[623091](72711 call _high _mt[243] r[72491]))
          unknown call_tmp[623098] "expr temp" "maybe param" "maybe type" "temp"
          (623101 'move' call_tmp[623098](72716 call stride _mt[243] r[72491]))
          unknown call_tmp[623103] "expr temp" "maybe param" "maybe type" "temp"
          (623106 'move' call_tmp[623103](72720 call absSameType call_tmp[623098]))
          unknown call_tmp[623108] "expr temp" "maybe param" "maybe type" "temp"
          (623111 'move' call_tmp[623108](72721 call + call_tmp[623091] call_tmp[623103]))
          unknown call_tmp[623113] "expr temp" "maybe param" "maybe type" "temp"
          (623116 'move' call_tmp[623113](72723 call chpl__intToIdx call_tmp[623084] call_tmp[623108]))
          unknown call_tmp[623120] "expr temp" "maybe param" "maybe type" "temp"
          (623123 'move' call_tmp[623120](72727 call idxType _mt[243] r[72491]))
          unknown call_tmp[623127] "expr temp" "maybe param" "maybe type" "temp"
          (623130 'move' call_tmp[623127](72732 call _high _mt[243] r[72491]))
          unknown call_tmp[623132] "expr temp" "maybe param" "maybe type" "temp"
          (623135 'move' call_tmp[623132](72735 call chpl__intToIdx call_tmp[623120] call_tmp[623127]))
          unknown call_tmp[623139] "expr temp" "maybe param" "maybe type" "temp"
          (623142 'move' call_tmp[623139](72738 call stride _mt[243] r[72491]))
          unknown call_tmp[623146] "expr temp" "maybe param" "maybe type" "temp"
          (623149 'move' call_tmp[623146](72744 call idxType _mt[243] r[72491]))
          unknown call_tmp[623153] "expr temp" "maybe param" "maybe type" "temp"
          (623156 'move' call_tmp[623153](72749 call _alignment _mt[243] r[72491]))
          unknown call_tmp[623158] "expr temp" "maybe param" "maybe type" "temp"
          (623161 'move' call_tmp[623158](72752 call chpl__intToIdx call_tmp[623146] call_tmp[623153]))
          unknown call_tmp[623165] "expr temp" "maybe param" "maybe type" "temp"
          (623168 'move' call_tmp[623165](72755 call aligned _mt[243] r[72491]))
          unknown call_tmp[623170] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (623173 'move' call_tmp[623170](747703 'new' range[64316](?)(idxType = call_tmp[623070])(boundedType = bounded[64205])(stridable = call_tmp[623077])(_low = call_tmp[623113])(_high = call_tmp[623132])(_stride = call_tmp[623139])(_alignment = call_tmp[623158])(_aligned = call_tmp[623165])))
          (510495 'move' ret[510485](510494 'deref' call_tmp[623170]))
          gotoReturn _end_chpl_count_help[510483] _end_chpl_count_help[510483]
        }
        {
          (72782 call halt "Internal error: Unexpected case in chpl_count_help")
        }
      }
    }
    unknown tmp[420301] "maybe param" "temp"
    unknown tmp[420322] "maybe param" "temp"
    (420333 'move' tmp[420322] 1)
    unknown call_tmp[623175] "expr temp" "maybe param" "maybe type" "temp"
    (623178 'move' call_tmp[623175](420335 call _cond_invalid tmp[420322]))
    if call_tmp[623175]
    {
      (420338 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557716] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557717] "maybe param" "temp"
    unknown call_tmp[623180] "expr temp" "maybe param" "maybe type" "temp"
    (623183 'move' call_tmp[623180](420323 call isTrue tmp[420322]))
    (557722 'move' tmp[557717](557720 call _cond_test call_tmp[623180]))
    if tmp[557717]
    {
      unknown tmp[557724] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623187] "expr temp" "maybe param" "maybe type" "temp"
      (623190 'move' call_tmp[623187](72805 call(72801 call (partial) hasFirst _mt[243] r[72491])))
      unknown call_tmp[623192] "expr temp" "maybe param" "maybe type" "temp"
      (623195 'move' call_tmp[623192](72806 call ! call_tmp[623187]))
      (557726 'move' tmp[557724](420326 call isTrue call_tmp[623192]))
      (557731 'move' tmp[557716](557728 '_paramFoldLogical' tmp[557717] tmp[557724]))
    }
    {
      (557736 'move' tmp[557716](557733 '_paramFoldLogical' tmp[557717] 0))
    }
    (420312 'move' tmp[420301] tmp[557716])
    unknown call_tmp[623197] "expr temp" "maybe param" "maybe type" "temp"
    (623200 'move' call_tmp[623197](420314 call _cond_invalid tmp[420301]))
    if call_tmp[623197]
    {
      (420317 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557743] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557744] "maybe param" "temp"
    unknown call_tmp[623202] "expr temp" "maybe param" "maybe type" "temp"
    (623205 'move' call_tmp[623202](420302 call isTrue tmp[420301]))
    (557749 'move' tmp[557744](557747 call _cond_test call_tmp[623202]))
    if tmp[557744]
    {
      unknown tmp[557751] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623207] "expr temp" "maybe param" "maybe type" "temp"
      (623210 'move' call_tmp[623207](72812 call > count[72496] 0))
      (557753 'move' tmp[557751](420305 call isTrue call_tmp[623207]))
      (557758 'move' tmp[557743](557755 '_paramFoldLogical' tmp[557744] tmp[557751]))
    }
    {
      (557763 'move' tmp[557743](557760 '_paramFoldLogical' tmp[557744] 0))
    }
    unknown call_tmp[623212] "expr temp" "maybe param" "maybe type" "temp"
    (623215 'move' call_tmp[623212](72837 call _cond_test tmp[557743]))
    if call_tmp[623212]
    {
      (72835 call boundsCheckHalt "With a positive count, the range must have a first index.")
    }
    unknown tmp[420343] "maybe param" "temp"
    unknown tmp[420364] "maybe param" "temp"
    (420375 'move' tmp[420364] 1)
    unknown call_tmp[623217] "expr temp" "maybe param" "maybe type" "temp"
    (623220 'move' call_tmp[623217](420377 call _cond_invalid tmp[420364]))
    if call_tmp[623217]
    {
      (420380 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557770] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557771] "maybe param" "temp"
    unknown call_tmp[623222] "expr temp" "maybe param" "maybe type" "temp"
    (623225 'move' call_tmp[623222](420365 call isTrue tmp[420364]))
    (557776 'move' tmp[557771](557774 call _cond_test call_tmp[623222]))
    if tmp[557771]
    {
      unknown tmp[557778] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623229] "expr temp" "maybe param" "maybe type" "temp"
      (623232 'move' call_tmp[623229](72850 call(72846 call (partial) hasLast _mt[243] r[72491])))
      unknown call_tmp[623234] "expr temp" "maybe param" "maybe type" "temp"
      (623237 'move' call_tmp[623234](72851 call ! call_tmp[623229]))
      (557780 'move' tmp[557778](420368 call isTrue call_tmp[623234]))
      (557785 'move' tmp[557770](557782 '_paramFoldLogical' tmp[557771] tmp[557778]))
    }
    {
      (557790 'move' tmp[557770](557787 '_paramFoldLogical' tmp[557771] 0))
    }
    (420354 'move' tmp[420343] tmp[557770])
    unknown call_tmp[623239] "expr temp" "maybe param" "maybe type" "temp"
    (623242 'move' call_tmp[623239](420356 call _cond_invalid tmp[420343]))
    if call_tmp[623239]
    {
      (420359 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557797] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557798] "maybe param" "temp"
    unknown call_tmp[623244] "expr temp" "maybe param" "maybe type" "temp"
    (623247 'move' call_tmp[623244](420344 call isTrue tmp[420343]))
    (557803 'move' tmp[557798](557801 call _cond_test call_tmp[623244]))
    if tmp[557798]
    {
      unknown tmp[557805] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623249] "expr temp" "maybe param" "maybe type" "temp"
      (623252 'move' call_tmp[623249](72857 call < count[72496] 0))
      (557807 'move' tmp[557805](420347 call isTrue call_tmp[623249]))
      (557812 'move' tmp[557797](557809 '_paramFoldLogical' tmp[557798] tmp[557805]))
    }
    {
      (557817 'move' tmp[557797](557814 '_paramFoldLogical' tmp[557798] 0))
    }
    unknown call_tmp[623254] "expr temp" "maybe param" "maybe type" "temp"
    (623257 'move' call_tmp[623254](72882 call _cond_test tmp[557797]))
    if call_tmp[623254]
    {
      (72880 call boundsCheckHalt "With a negative count, the range must have a last index.")
    }
    unknown tmp[420385] "maybe param" "temp"
    unknown tmp[420406] "maybe param" "temp"
    (420417 'move' tmp[420406] 1)
    unknown call_tmp[623259] "expr temp" "maybe param" "maybe type" "temp"
    (623262 'move' call_tmp[623259](420419 call _cond_invalid tmp[420406]))
    if call_tmp[623259]
    {
      (420422 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557824] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557825] "maybe param" "temp"
    unknown call_tmp[623264] "expr temp" "maybe param" "maybe type" "temp"
    (623267 'move' call_tmp[623264](420407 call isTrue tmp[420406]))
    (557830 'move' tmp[557825](557828 call _cond_test call_tmp[623264]))
    if tmp[557825]
    {
      unknown tmp[557832] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623271] "expr temp" "maybe param" "maybe type" "temp"
      (623274 'move' call_tmp[623271](72889 call boundedType _mt[243] r[72491]))
      unknown call_tmp[623276] "expr temp" "maybe param" "maybe type" "temp"
      (623279 'move' call_tmp[623276](72896 call == call_tmp[623271] bounded[64205]))
      (557834 'move' tmp[557832](420410 call isTrue call_tmp[623276]))
      (557839 'move' tmp[557824](557836 '_paramFoldLogical' tmp[557825] tmp[557832]))
    }
    {
      (557844 'move' tmp[557824](557841 '_paramFoldLogical' tmp[557825] 0))
    }
    (420396 'move' tmp[420385] tmp[557824])
    unknown call_tmp[623281] "expr temp" "maybe param" "maybe type" "temp"
    (623284 'move' call_tmp[623281](420398 call _cond_invalid tmp[420385]))
    if call_tmp[623281]
    {
      (420401 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[557851] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557852] "maybe param" "temp"
    unknown call_tmp[623286] "expr temp" "maybe param" "maybe type" "temp"
    (623289 'move' call_tmp[623286](420386 call isTrue tmp[420385]))
    (557857 'move' tmp[557852](557855 call _cond_test call_tmp[623286]))
    if tmp[557852]
    {
      unknown tmp[557859] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623291] "expr temp" "maybe param" "maybe type" "temp"
      (623294 'move' call_tmp[623291](72914 call uint(64)[115] 64))
      unknown call_tmp[623296] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (623299 'move' call_tmp[623296](72904 'typeof' count[72496]))
      unknown call_tmp[623301] "expr temp" "maybe param" "maybe type" "temp"
      (623304 'move' call_tmp[623301](72906 call chpl__maxIntTypeSameSign call_tmp[623296]))
      unknown call_tmp[623306] "expr temp" "maybe param" "maybe type" "temp"
      (623309 'move' call_tmp[623306](72907 call _cast call_tmp[623301] count[72496]))
      unknown call_tmp[623311] "expr temp" "maybe param" "maybe type" "temp"
      (623314 'move' call_tmp[623311](72910 call abs call_tmp[623306]))
      unknown call_tmp[623316] "expr temp" "maybe param" "maybe type" "temp"
      (623319 'move' call_tmp[623316](72915 call _cast call_tmp[623291] call_tmp[623311]))
      unknown call_tmp[623321] "expr temp" "maybe param" "maybe type" "temp"
      (623324 'move' call_tmp[623321](72924 call uint(64)[115] 64))
      unknown call_tmp[623328] "expr temp" "maybe param" "maybe type" "temp"
      (623331 'move' call_tmp[623328](72918 call size _mt[243] r[72491]))
      unknown call_tmp[623333] "expr temp" "maybe param" "maybe type" "temp"
      (623336 'move' call_tmp[623333](72925 call _cast call_tmp[623321] call_tmp[623328]))
      unknown call_tmp[623338] "expr temp" "maybe param" "maybe type" "temp"
      (623341 'move' call_tmp[623338](72927 call > call_tmp[623316] call_tmp[623333]))
      (557861 'move' tmp[557859](420389 call isTrue call_tmp[623338]))
      (557866 'move' tmp[557851](557863 '_paramFoldLogical' tmp[557852] tmp[557859]))
    }
    {
      (557871 'move' tmp[557851](557868 '_paramFoldLogical' tmp[557852] 0))
    }
    unknown call_tmp[623343] "expr temp" "maybe param" "maybe type" "temp"
    (623346 'move' call_tmp[623343](72981 call _cond_test tmp[557851]))
    if call_tmp[623343]
    {
      unknown call_tmp[623348] "expr temp" "maybe param" "maybe type" "temp"
      (623351 'move' call_tmp[623348](72952 call abs count[72496]))
      unknown call_tmp[623353] "expr temp" "maybe param" "maybe type" "temp"
      (623356 'move' call_tmp[623353](72954 call _cast string[26] call_tmp[623348]))
      unknown call_tmp[623358] "expr temp" "maybe param" "maybe type" "temp"
      (623361 'move' call_tmp[623358](72956 call + "bounded range is too small to access " call_tmp[623353]))
      unknown call_tmp[623363] "expr temp" "maybe param" "maybe type" "temp"
      (623366 'move' call_tmp[623363](72975 call + call_tmp[623358] " elements"))
      (72978 call boundsCheckHalt call_tmp[623363])
    }
    function chpl__computeTypeForCountMath[72989](arg t1[72987]:_any[178](?), arg t2[72991]:_any[178](?)) type : _unknown[51]
    {
      unknown ret[510464] "RVV" "temp" "type variable"
      unknown call_tmp[623368] "expr temp" "maybe param" "maybe type" "temp"
      (623371 'move' call_tmp[623368](72995 call == t1[72987] t2[72991]))
      unknown call_tmp[623373] "expr temp" "maybe param" "maybe type" "temp"
      (623376 'move' call_tmp[623373](73049 call _cond_test call_tmp[623368]))
      if call_tmp[623373]
      {
        unknown call_tmp[623378] "expr temp" "maybe param" "maybe type" "temp"
        (623381 'move' call_tmp[623378](73000 call chpl__idxTypeToIntIdxType t1[72987]))
        (510469 'move' ret[510464](510468 'deref' call_tmp[623378]))
        gotoReturn _end_chpl__computeTypeForCountMath[510462] _end_chpl__computeTypeForCountMath[510462]
      }
      {
        unknown tmp[420427] "maybe param" "temp"
        unknown call_tmp[623383] "expr temp" "maybe param" "maybe type" "temp"
        (623386 'move' call_tmp[623383](73007 call numBits t1[72987]))
        (420438 'move' tmp[420427](73009 call == call_tmp[623383] 64))
        unknown call_tmp[623388] "expr temp" "maybe param" "maybe type" "temp"
        (623391 'move' call_tmp[623388](420440 call _cond_invalid tmp[420427]))
        if call_tmp[623388]
        {
          (420443 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[557878] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[557879] "maybe param" "temp"
        unknown call_tmp[623393] "expr temp" "maybe param" "maybe type" "temp"
        (623396 'move' call_tmp[623393](420428 call isTrue tmp[420427]))
        (557884 'move' tmp[557879](557882 call _cond_test call_tmp[623393]))
        if tmp[557879]
        {
          (557889 'move' tmp[557878](557886 '_paramFoldLogical' tmp[557879] 1))
        }
        {
          unknown tmp[557891] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623398] "expr temp" "maybe param" "maybe type" "temp"
          (623401 'move' call_tmp[623398](73014 call numBits t2[72991]))
          unknown call_tmp[623403] "expr temp" "maybe param" "maybe type" "temp"
          (623406 'move' call_tmp[623403](73016 call == call_tmp[623398] 64))
          (557893 'move' tmp[557891](420432 call isTrue call_tmp[623403]))
          (557898 'move' tmp[557878](557895 '_paramFoldLogical' tmp[557879] tmp[557891]))
        }
        unknown call_tmp[623408] "expr temp" "maybe param" "maybe type" "temp"
        (623411 'move' call_tmp[623408](73045 call _cond_test tmp[557878]))
        if call_tmp[623408]
        {
          unknown call_tmp[623413] "expr temp" "maybe param" "maybe type" "temp"
          (623416 'move' call_tmp[623413](73023 call int(64)[13] 64))
          (510474 'move' ret[510464](510473 'deref' call_tmp[623413]))
          gotoReturn _end_chpl__computeTypeForCountMath[510462] _end_chpl__computeTypeForCountMath[510462]
        }
        {
          unknown x1[73028] "dead at end of block" "insert auto destroy"
          (541075 'default init var' x1[73028] t1[72987])
          (73031 'end of statement')
          unknown x2[73034] "dead at end of block" "insert auto destroy"
          (541077 'default init var' x2[73034] t2[72991])
          (73037 'end of statement')
          { scopeless type
            unknown call_type_tmp[491818] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[623418] "expr temp" "maybe param" "maybe type" "temp"
            (623421 'move' call_tmp[623418](73040 call + x1[73028] x2[73034]))
            (491822 'move' call_type_tmp[491818](73042 'typeof' call_tmp[623418]))
          }
          (510479 'move' ret[510464](510478 'deref' call_type_tmp[491818]))
          gotoReturn _end_chpl__computeTypeForCountMath[510462] _end_chpl__computeTypeForCountMath[510462]
          (475585 'end of statement' x1[73028] x2[73034])
        }
      }
      label _end_chpl__computeTypeForCountMath[510462]
      (510466 return ret[510464])
    }
    unknown call_tmp[623423] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623426 'move' call_tmp[623423](73061 'typeof' count[72496]))
    unknown computeType[73063] "dead at end of block" "insert auto destroy" "type variable"(73062 call chpl__computeTypeForCountMath resultType[72541] call_tmp[623423])
    unknown call_tmp[623428] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623431 'move' call_tmp[623428](541082 'typeof' count[72496]))
    (541084 'move' computeType[73063](541080 call chpl__computeTypeForCountMath resultType[72541] call_tmp[623428]))
    unknown signedComputeType[73070] "dead at end of block" "insert auto destroy" "type variable"(73069 call chpl__signedType computeType[73063])
    (541089 'move' signedComputeType[73070](541087 call chpl__signedType computeType[73063]))
    unknown call_tmp[623433] "expr temp" "maybe param" "maybe type" "temp"
    (623436 'move' call_tmp[623433](73075 call _cast signedComputeType[73070] count[72496]))
    unknown call_tmp[623440] "expr temp" "maybe param" "maybe type" "temp"
    (623443 'move' call_tmp[623440](73078 call stride _mt[243] r[72491]))
    unknown call_tmp[623445] "expr temp" "maybe param" "maybe type" "temp"
    (623448 'move' call_tmp[623445](73082 call _cast signedComputeType[73070] call_tmp[623440]))
    unknown call_tmp[623450] "maybe param" "maybe type" "temp"
    (623453 'move' call_tmp[623450](73084 call * call_tmp[623433] call_tmp[623445]))
    unknown diff[73086] "dead at end of block" "insert auto destroy"
    (541091 'init var' diff[73086] call_tmp[623450])
    (73089 'end of statement')
    unknown lo[73120] "dead at end of block" "insert auto destroy"
    unknown tmp[557905] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557906] "maybe param" "temp"
    unknown call_tmp[623455] "expr temp" "maybe param" "maybe type" "temp"
    (623458 'move' call_tmp[623455](73093 call > diff[73086] 0))
    (557911 'move' tmp[557906](557909 call _cond_test call_tmp[623455]))
    if tmp[557906]
    {
      unknown tmp[557913] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557915 'move' tmp[557913](73096 call _low _mt[243] r[72491]))
      (557920 'move' tmp[557905](557917 '_paramFoldLogical' tmp[557906] tmp[557913]))
    }
    {
      unknown tmp[557922] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623464] "expr temp" "maybe param" "maybe type" "temp"
      (623467 'move' call_tmp[623464](73101 call _high _mt[243] r[72491]))
      unknown call_tmp[623469] "expr temp" "maybe param" "maybe type" "temp"
      (623472 'move' call_tmp[623469](73105 call _cast computeType[73063] call_tmp[623464]))
      unknown call_tmp[623474] "expr temp" "maybe param" "maybe type" "temp"
      (623477 'move' call_tmp[623474](73110 call + diff[73086] 1))
      unknown call_tmp[623479] "expr temp" "maybe param" "maybe type" "temp"
      (623482 'move' call_tmp[623479](73113 call _cast computeType[73063] call_tmp[623474]))
      (557924 'move' tmp[557922](73116 call chpl__add call_tmp[623469] call_tmp[623479] resultType[72541]))
      (557929 'move' tmp[557905](557926 '_paramFoldLogical' tmp[557906] tmp[557922]))
    }
    (541093 'init var' lo[73120] tmp[557905] resultType[72541])
    (73123 'end of statement')
    unknown hi[73154] "dead at end of block" "insert auto destroy"
    unknown tmp[557936] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[557937] "maybe param" "temp"
    unknown call_tmp[623484] "expr temp" "maybe param" "maybe type" "temp"
    (623487 'move' call_tmp[623484](73127 call < diff[73086] 0))
    (557942 'move' tmp[557937](557940 call _cond_test call_tmp[623484]))
    if tmp[557937]
    {
      unknown tmp[557944] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (557946 'move' tmp[557944](73130 call _high _mt[243] r[72491]))
      (557951 'move' tmp[557936](557948 '_paramFoldLogical' tmp[557937] tmp[557944]))
    }
    {
      unknown tmp[557953] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623493] "expr temp" "maybe param" "maybe type" "temp"
      (623496 'move' call_tmp[623493](73135 call _low _mt[243] r[72491]))
      unknown call_tmp[623498] "expr temp" "maybe param" "maybe type" "temp"
      (623501 'move' call_tmp[623498](73139 call _cast computeType[73063] call_tmp[623493]))
      unknown call_tmp[623503] "expr temp" "maybe param" "maybe type" "temp"
      (623506 'move' call_tmp[623503](73144 call _cast computeType[73063] diff[73086]))
      unknown call_tmp[623508] "expr temp" "maybe param" "maybe type" "temp"
      (623511 'move' call_tmp[623508](73147 call - call_tmp[623503] 1))
      (557955 'move' tmp[557953](73150 call chpl__add call_tmp[623498] call_tmp[623508] resultType[72541]))
      (557960 'move' tmp[557936](557957 '_paramFoldLogical' tmp[557937] tmp[557953]))
    }
    (541095 'init var' hi[73154] tmp[557936] resultType[72541])
    (73157 'end of statement' resultType[72541] resultType[72541] computeType[73063] signedComputeType[73070] signedComputeType[73070] diff[73086] computeType[73063] computeType[73063] diff[73086] resultType[72541] resultType[72541] diff[73086] computeType[73063] computeType[73063] diff[73086] resultType[72541] resultType[72541])
    unknown call_tmp[623515] "expr temp" "maybe param" "maybe type" "temp"
    (623518 'move' call_tmp[623515](73159 call stridable _mt[243] r[72491]))
    unknown call_tmp[623520] "expr temp" "maybe param" "maybe type" "temp"
    (623523 'move' call_tmp[623520](73219 call _cond_test call_tmp[623515]))
    if call_tmp[623520]
    {
      unknown tmp[420448] "maybe param" "temp"
      (420459 'move' tmp[420448](73167 call(73163 call (partial) hasLowBound _mt[243] r[72491])))
      unknown call_tmp[623527] "expr temp" "maybe param" "maybe type" "temp"
      (623530 'move' call_tmp[623527](420461 call _cond_invalid tmp[420448]))
      if call_tmp[623527]
      {
        (420464 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557967] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557968] "maybe param" "temp"
      unknown call_tmp[623532] "expr temp" "maybe param" "maybe type" "temp"
      (623535 'move' call_tmp[623532](420449 call isTrue tmp[420448]))
      (557973 'move' tmp[557968](557971 call _cond_test call_tmp[623532]))
      if tmp[557968]
      {
        unknown tmp[557975] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623539] "expr temp" "maybe param" "maybe type" "temp"
        (623542 'move' call_tmp[623539](73170 call _low _mt[243] r[72491]))
        unknown call_tmp[623544] "expr temp" "maybe param" "maybe type" "temp"
        (623547 'move' call_tmp[623544](73173 call < lo[73120] call_tmp[623539]))
        (557977 'move' tmp[557975](420452 call isTrue call_tmp[623544]))
        (557982 'move' tmp[557967](557979 '_paramFoldLogical' tmp[557968] tmp[557975]))
      }
      {
        (557987 'move' tmp[557967](557984 '_paramFoldLogical' tmp[557968] 0))
      }
      unknown call_tmp[623549] "expr temp" "maybe param" "maybe type" "temp"
      (623552 'move' call_tmp[623549](73185 call _cond_test tmp[557967]))
      if call_tmp[623549]
      {
        unknown call_tmp[623556] "expr temp" "maybe param" "maybe type" "temp"
        (623559 'move' call_tmp[623556](73179 call _low _mt[243] r[72491]))
        (73182 call = lo[73120] call_tmp[623556])
        (475605 'end of statement' lo[73120])
      }
      unknown tmp[420469] "maybe param" "temp"
      (420480 'move' tmp[420469](73196 call(73192 call (partial) hasHighBound _mt[243] r[72491])))
      unknown call_tmp[623563] "expr temp" "maybe param" "maybe type" "temp"
      (623566 'move' call_tmp[623563](420482 call _cond_invalid tmp[420469]))
      if call_tmp[623563]
      {
        (420485 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[557994] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[557995] "maybe param" "temp"
      unknown call_tmp[623568] "expr temp" "maybe param" "maybe type" "temp"
      (623571 'move' call_tmp[623568](420470 call isTrue tmp[420469]))
      (558000 'move' tmp[557995](557998 call _cond_test call_tmp[623568]))
      if tmp[557995]
      {
        unknown tmp[558002] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623575] "expr temp" "maybe param" "maybe type" "temp"
        (623578 'move' call_tmp[623575](73199 call _high _mt[243] r[72491]))
        unknown call_tmp[623580] "expr temp" "maybe param" "maybe type" "temp"
        (623583 'move' call_tmp[623580](73202 call > hi[73154] call_tmp[623575]))
        (558004 'move' tmp[558002](420473 call isTrue call_tmp[623580]))
        (558009 'move' tmp[557994](558006 '_paramFoldLogical' tmp[557995] tmp[558002]))
      }
      {
        (558014 'move' tmp[557994](558011 '_paramFoldLogical' tmp[557995] 0))
      }
      unknown call_tmp[623585] "expr temp" "maybe param" "maybe type" "temp"
      (623588 'move' call_tmp[623585](73214 call _cond_test tmp[557994]))
      if call_tmp[623585]
      {
        unknown call_tmp[623592] "expr temp" "maybe param" "maybe type" "temp"
        (623595 'move' call_tmp[623592](73208 call _high _mt[243] r[72491]))
        (73211 call = hi[73154] call_tmp[623592])
        (475608 'end of statement' hi[73154])
      }
    }
    unknown tmp[558021] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558022] "maybe param" "temp"
    unknown call_tmp[623599] "expr temp" "maybe param" "maybe type" "temp"
    (623602 'move' call_tmp[623599](73258 call stridable _mt[243] r[72491]))
    (558027 'move' tmp[558022](558025 call _cond_test call_tmp[623599]))
    if tmp[558022]
    {
      unknown tmp[558029] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623606] "expr temp" "maybe param" "maybe type" "temp"
      (623609 'move' call_tmp[623606](73262 call stride _mt[243] r[72491]))
      (558031 'move' tmp[558029](73266 call _cast strType[72548] call_tmp[623606]))
      (558036 'move' tmp[558021](558033 '_paramFoldLogical' tmp[558022] tmp[558029]))
    }
    {
      (558041 'move' tmp[558021](558038 '_paramFoldLogical' tmp[558022] none[57]))
    }
    unknown tmp[558048] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558049] "maybe param" "temp"
    unknown call_tmp[623613] "expr temp" "maybe param" "maybe type" "temp"
    (623616 'move' call_tmp[623613](73274 call stridable _mt[243] r[72491]))
    (558054 'move' tmp[558049](558052 call _cond_test call_tmp[623613]))
    if tmp[558049]
    {
      unknown tmp[558056] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558058 'move' tmp[558056](73278 call alignment _mt[243] r[72491]))
      (558063 'move' tmp[558048](558060 '_paramFoldLogical' tmp[558049] tmp[558056]))
    }
    {
      (558068 'move' tmp[558048](558065 '_paramFoldLogical' tmp[558049] none[57]))
    }
    unknown tmp[558075] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558076] "maybe param" "temp"
    unknown call_tmp[623622] "expr temp" "maybe param" "maybe type" "temp"
    (623625 'move' call_tmp[623622](73287 call stridable _mt[243] r[72491]))
    (558081 'move' tmp[558076](558079 call _cond_test call_tmp[623622]))
    if tmp[558076]
    {
      unknown tmp[558083] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558085 'move' tmp[558083](73291 call aligned _mt[243] r[72491]))
      (558090 'move' tmp[558075](558087 '_paramFoldLogical' tmp[558076] tmp[558083]))
    }
    {
      (558095 'move' tmp[558075](558092 '_paramFoldLogical' tmp[558076] none[57]))
    }
    unknown call_tmp[623631] "expr temp" "maybe param" "maybe type" "temp"
    (623634 'move' call_tmp[623631](73226 call idxType _mt[243] r[72491]))
    unknown call_tmp[623638] "expr temp" "maybe param" "maybe type" "temp"
    (623641 'move' call_tmp[623638](73237 call stridable _mt[243] r[72491]))
    unknown call_tmp[623645] "expr temp" "maybe param" "maybe type" "temp"
    (623648 'move' call_tmp[623645](73247 call(73242 call (partial) chpl_intToIdx _mt[243] r[72491]) lo[73120]))
    unknown call_tmp[623652] "expr temp" "maybe param" "maybe type" "temp"
    (623655 'move' call_tmp[623652](73255 call(73250 call (partial) chpl_intToIdx _mt[243] r[72491]) hi[73154]))
    unknown call_tmp[623657] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (623660 'move' call_tmp[623657](747704 'new' range[64316](?)(idxType = call_tmp[623631])(boundedType = bounded[64205])(stridable = call_tmp[623638])(_low = call_tmp[623645])(_high = call_tmp[623652])(_stride = tmp[558021])(_alignment = tmp[558048])(_aligned = tmp[558075])))
    (510500 'move' ret[510485](510499 'deref' call_tmp[623657]))
    gotoReturn _end_chpl_count_help[510483] _end_chpl_count_help[510483]
    (475610 'end of statement' lo[73120] hi[73154] strType[72548])
    label _end_chpl_count_help[510483]
    (510487 return ret[510485])
  }
  function #[73314](arg r[73311]:range[64316](?), arg count[73320] :
  unknown call_tmp[623662] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510506] "RVV" "temp"
    unknown call_tmp[623667] "expr temp" "maybe param" "maybe type" "temp"
    (623670 'move' call_tmp[623667](73327 call chpl_count_help r[73311] count[73320]))
    (510511 'move' ret[510506](510510 'deref' call_tmp[623667]))
    (510508 return ret[510506])
  }
  function #[73343](arg r[73340]:range[64316](?), arg count[73349] :
  unknown call_tmp[623672] "expr temp" "maybe param" "maybe type" "temp") : _unknown[51]
  {
    unknown ret[510515] "RVV" "temp"
    unknown call_tmp[623677] "expr temp" "maybe param" "maybe type" "temp"
    (623680 'move' call_tmp[623677](73356 call chpl_count_help r[73340] count[73349]))
    (510520 'move' ret[510515](510519 'deref' call_tmp[623677]))
    (510517 return ret[510515])
  }
  function #[73372](arg r[73369]:range[64316](?), arg count[73374]:_any[178](?)) : _unknown[51]
  {
    unknown ret[510524] "RVV" "temp"
    unknown call_tmp[623682] "expr temp" "maybe param" "maybe type" "temp"
    (623685 'move' call_tmp[623682](455895 'query' r[73369] 1))
    unknown call_tmp[623687] "expr temp" "maybe param" "maybe type" "temp"
    (623690 'move' call_tmp[623687](73397 call _cast string[26] call_tmp[623682]))
    unknown call_tmp[623692] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (623695 'move' call_tmp[623692](73417 'typeof' count[73374]))
    unknown call_tmp[623697] "expr temp" "maybe param" "maybe type" "temp"
    (623700 'move' call_tmp[623697](73419 call _cast string[26] call_tmp[623692]))
    (73421 call compilerError "can't apply '#' to a range with idxType " call_tmp[623687] " using a count of type " call_tmp[623697])
    (475616 'end of statement')
    (510529 'move' ret[510524](510528 'deref' r[73369]))
    (510526 return ret[510524])
  }
  function chpl_checkIfRangeIterWillOverflow[73433](arg idxType[73431]:_any[178](?), arg low[73435]:_any[178](?), arg high[73437]:_any[178](?), arg stride[73439]:_any[178](?), arg first[73442] :
  low[73435] =
  low[73435], arg last[73446] :
  high[73437] =
  high[73437], arg shouldHalt[73450] :
  1 =
  1) : _unknown[51]
  {
    unknown ret[510533] "RVV" "temp"
    unknown call_tmp[623702] "expr temp" "maybe param" "maybe type" "temp"
    (623705 'move' call_tmp[623702](73455 call > low[73435] high[73437]))
    unknown call_tmp[623707] "expr temp" "maybe param" "maybe type" "temp"
    (623710 'move' call_tmp[623707](73461 call _cond_test call_tmp[623702]))
    if call_tmp[623707]
    {
      (510538 'move' ret[510533](510537 'deref' 0))
      gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510531] _end_chpl_checkIfRangeIterWillOverflow[510531]
    }
    unknown willOverFlow[73467] "dead at end of block" "insert auto destroy"
    (541097 'init var' willOverFlow[73467] 0)
    (73470 'end of statement')
    unknown call_tmp[623712] "expr temp" "maybe param" "maybe type" "temp"
    (623715 'move' call_tmp[623712](73474 call isIntType idxType[73431]))
    unknown call_tmp[623717] "expr temp" "maybe param" "maybe type" "temp"
    (623720 'move' call_tmp[623717](73654 call _cond_test call_tmp[623712]))
    if call_tmp[623717]
    {
      unknown tmp[420511] "maybe param" "temp"
      (420522 'move' tmp[420511](73477 call > last[73446] 0))
      unknown call_tmp[623722] "expr temp" "maybe param" "maybe type" "temp"
      (623725 'move' call_tmp[623722](420524 call _cond_invalid tmp[420511]))
      if call_tmp[623722]
      {
        (420527 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[558102] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558103] "maybe param" "temp"
      unknown call_tmp[623727] "expr temp" "maybe param" "maybe type" "temp"
      (623730 'move' call_tmp[623727](420512 call isTrue tmp[420511]))
      (558108 'move' tmp[558103](558106 call _cond_test call_tmp[623727]))
      if tmp[558103]
      {
        unknown tmp[558110] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[623732] "expr temp" "maybe param" "maybe type" "temp"
        (623735 'move' call_tmp[623732](73481 call > stride[73439] 0))
        (558112 'move' tmp[558110](420515 call isTrue call_tmp[623732]))
        (558117 'move' tmp[558102](558114 '_paramFoldLogical' tmp[558103] tmp[558110]))
      }
      {
        (558122 'move' tmp[558102](558119 '_paramFoldLogical' tmp[558103] 0))
      }
      unknown call_tmp[623737] "expr temp" "maybe param" "maybe type" "temp"
      (623740 'move' call_tmp[623737](73541 call _cond_test tmp[558102]))
      if call_tmp[623737]
      {
        unknown call_tmp[623742] "expr temp" "maybe param" "maybe type" "temp"
        (623745 'move' call_tmp[623742](73489 call max idxType[73431]))
        unknown call_tmp[623747] "expr temp" "maybe param" "maybe type" "temp"
        (623750 'move' call_tmp[623747](73491 call - call_tmp[623742] last[73446]))
        unknown call_tmp[623752] "expr temp" "maybe param" "maybe type" "temp"
        (623755 'move' call_tmp[623752](73493 call > stride[73439] call_tmp[623747]))
        unknown call_tmp[623757] "expr temp" "maybe param" "maybe type" "temp"
        (623760 'move' call_tmp[623757](73501 call _cond_test call_tmp[623752]))
        if call_tmp[623757]
        {
          (73497 call = willOverFlow[73467] 1)
          (475620 'end of statement' willOverFlow[73467])
        }
      }
      {
        unknown tmp[420490] "maybe param" "temp"
        (420501 'move' tmp[420490](73508 call < last[73446] 0))
        unknown call_tmp[623762] "expr temp" "maybe param" "maybe type" "temp"
        (623765 'move' call_tmp[623762](420503 call _cond_invalid tmp[420490]))
        if call_tmp[623762]
        {
          (420506 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[558129] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558130] "maybe param" "temp"
        unknown call_tmp[623767] "expr temp" "maybe param" "maybe type" "temp"
        (623770 'move' call_tmp[623767](420491 call isTrue tmp[420490]))
        (558135 'move' tmp[558130](558133 call _cond_test call_tmp[623767]))
        if tmp[558130]
        {
          unknown tmp[558137] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[623772] "expr temp" "maybe param" "maybe type" "temp"
          (623775 'move' call_tmp[623772](73512 call < stride[73439] 0))
          (558139 'move' tmp[558137](420494 call isTrue call_tmp[623772]))
          (558144 'move' tmp[558129](558141 '_paramFoldLogical' tmp[558130] tmp[558137]))
        }
        {
          (558149 'move' tmp[558129](558146 '_paramFoldLogical' tmp[558130] 0))
        }
        unknown call_tmp[623777] "expr temp" "maybe param" "maybe type" "temp"
        (623780 'move' call_tmp[623777](73537 call _cond_test tmp[558129]))
        if call_tmp[623777]
        {
          unknown call_tmp[623782] "expr temp" "maybe param" "maybe type" "temp"
          (623785 'move' call_tmp[623782](73520 call min idxType[73431]))
          unknown call_tmp[623787] "expr temp" "maybe param" "maybe type" "temp"
          (623790 'move' call_tmp[623787](73522 call - call_tmp[623782] last[73446]))
          unknown call_tmp[623792] "expr temp" "maybe param" "maybe type" "temp"
          (623795 'move' call_tmp[623792](73524 call < stride[73439] call_tmp[623787]))
          unknown call_tmp[623797] "expr temp" "maybe param" "maybe type" "temp"
          (623800 'move' call_tmp[623797](73532 call _cond_test call_tmp[623792]))
          if call_tmp[623797]
          {
            (73528 call = willOverFlow[73467] 1)
            (475623 'end of statement' willOverFlow[73467])
          }
        }
      }
    }
    {
      unknown call_tmp[623802] "expr temp" "maybe param" "maybe type" "temp"
      (623805 'move' call_tmp[623802](73550 call isUintType idxType[73431]))
      unknown call_tmp[623807] "expr temp" "maybe param" "maybe type" "temp"
      (623810 'move' call_tmp[623807](73650 call _cond_test call_tmp[623802]))
      if call_tmp[623807]
      {
        unknown call_tmp[623812] "expr temp" "maybe param" "maybe type" "temp"
        (623815 'move' call_tmp[623812](73553 call > stride[73439] 0))
        unknown call_tmp[623817] "expr temp" "maybe param" "maybe type" "temp"
        (623820 'move' call_tmp[623817](73605 call _cond_test call_tmp[623812]))
        if call_tmp[623817]
        {
          unknown call_tmp[623822] "expr temp" "maybe param" "maybe type" "temp"
          (623825 'move' call_tmp[623822](73558 call _cast idxType[73431] stride[73439]))
          unknown call_tmp[623827] "expr temp" "maybe param" "maybe type" "temp"
          (623830 'move' call_tmp[623827](73560 call + last[73446] call_tmp[623822]))
          unknown call_tmp[623832] "expr temp" "maybe param" "maybe type" "temp"
          (623835 'move' call_tmp[623832](73563 call < call_tmp[623827] last[73446]))
          unknown call_tmp[623837] "expr temp" "maybe param" "maybe type" "temp"
          (623840 'move' call_tmp[623837](73571 call _cond_test call_tmp[623832]))
          if call_tmp[623837]
          {
            (73567 call = willOverFlow[73467] 1)
            (475625 'end of statement' willOverFlow[73467])
          }
        }
        {
          unknown call_tmp[623842] "expr temp" "maybe param" "maybe type" "temp"
          (623845 'move' call_tmp[623842](73578 call < stride[73439] 0))
          unknown call_tmp[623847] "expr temp" "maybe param" "maybe type" "temp"
          (623850 'move' call_tmp[623847](73601 call _cond_test call_tmp[623842]))
          if call_tmp[623847]
          {
            unknown call_tmp[623852] "expr temp" "maybe param" "maybe type" "temp"
            (623855 'move' call_tmp[623852](73583 call _cast idxType[73431] stride[73439]))
            unknown call_tmp[623857] "expr temp" "maybe param" "maybe type" "temp"
            (623860 'move' call_tmp[623857](73585 call + last[73446] call_tmp[623852]))
            unknown call_tmp[623862] "expr temp" "maybe param" "maybe type" "temp"
            (623865 'move' call_tmp[623862](73588 call > call_tmp[623857] last[73446]))
            unknown call_tmp[623867] "expr temp" "maybe param" "maybe type" "temp"
            (623870 'move' call_tmp[623867](73596 call _cond_test call_tmp[623862]))
            if call_tmp[623867]
            {
              (73592 call = willOverFlow[73467] 1)
              (475627 'end of statement' willOverFlow[73467])
            }
          }
        }
      }
      {
        (73647 call compilerError "Iterator overflow checking is only supported " "for integral types")
      }
    }
    unknown tmp[420532] "maybe param" "temp"
    (420543 'move' tmp[420532] willOverFlow[73467])
    unknown call_tmp[623872] "expr temp" "maybe param" "maybe type" "temp"
    (623875 'move' call_tmp[623872](420545 call _cond_invalid tmp[420532]))
    if call_tmp[623872]
    {
      (420548 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558156] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558157] "maybe param" "temp"
    unknown call_tmp[623877] "expr temp" "maybe param" "maybe type" "temp"
    (623880 'move' call_tmp[623877](420533 call isTrue tmp[420532]))
    (558162 'move' tmp[558157](558160 call _cond_test call_tmp[623877]))
    if tmp[558157]
    {
      unknown tmp[558164] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558166 'move' tmp[558164](420536 call isTrue shouldHalt[73450]))
      (558171 'move' tmp[558156](558168 '_paramFoldLogical' tmp[558157] tmp[558164]))
    }
    {
      (558176 'move' tmp[558156](558173 '_paramFoldLogical' tmp[558157] 0))
    }
    unknown call_tmp[623882] "expr temp" "maybe param" "maybe type" "temp"
    (623885 'move' call_tmp[623882](73688 call _cond_test tmp[558156]))
    if call_tmp[623882]
    {
      (73685 call boundsCheckHalt module=[255] HaltWrappers[209910] "Iteration over a bounded range may be incorrect due to overflow.")
      (357855 'referenced modules list' HaltWrappers[209910])
    }
    (510543 'move' ret[510533](510542 'deref' willOverFlow[73467]))
    gotoReturn _end_chpl_checkIfRangeIterWillOverflow[510531] _end_chpl_checkIfRangeIterWillOverflow[510531]
    (475632 'end of statement' willOverFlow[73467])
    label _end_chpl_checkIfRangeIterWillOverflow[510531]
    (510535 return ret[510533])
  }
  function range[64316](?).checkIfIterWillOverflow[73704](arg _mt[73709]:_MT[238], arg this[73706]:range[64316](?) :
  range[64316](?), arg shouldHalt[73701] :
  1 =
  1) : _unknown[51] "method" "no doc"
  {
    unknown ret[510549] "RVV" "temp"
    unknown call_tmp[623889] "expr temp" "maybe param" "maybe type" "temp"
    (623892 'move' call_tmp[623889](73713 call intIdxType _mt[243] this[73706]))
    unknown call_tmp[623896] "expr temp" "maybe param" "maybe type" "temp"
    (623899 'move' call_tmp[623896](73718 call _low _mt[243] this[73706]))
    unknown call_tmp[623903] "expr temp" "maybe param" "maybe type" "temp"
    (623906 'move' call_tmp[623903](73722 call _high _mt[243] this[73706]))
    unknown call_tmp[623910] "expr temp" "maybe param" "maybe type" "temp"
    (623913 'move' call_tmp[623910](73726 call stride _mt[243] this[73706]))
    unknown call_tmp[623917] "expr temp" "maybe param" "maybe type" "temp"
    (623920 'move' call_tmp[623917](73730 call firstAsInt _mt[243] this[73706]))
    unknown call_tmp[623924] "expr temp" "maybe param" "maybe type" "temp"
    (623927 'move' call_tmp[623924](73734 call lastAsInt _mt[243] this[73706]))
    unknown call_tmp[623929] "expr temp" "maybe param" "maybe type" "temp"
    (623932 'move' call_tmp[623929](73738 call chpl_checkIfRangeIterWillOverflow call_tmp[623889] call_tmp[623896] call_tmp[623903] call_tmp[623910] call_tmp[623917] call_tmp[623924] shouldHalt[73701]))
    (510554 'move' ret[510549](510553 'deref' call_tmp[623929]))
    (510551 return ret[510549])
  }
  function chpl_direct_range_iter[456106](arg low[456113] :
  (456110 call int(64)[13] 64), arg high[456119] :
  (456117 call int(64)[13] 64), arg stride[456125] :
  (456123 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510558] "RVV" "temp"
    unknown call_tmp[623934] "expr temp" "maybe param" "maybe type" "temp"
    (623937 'move' call_tmp[623934](456132 call chpl_build_bounded_range low[456113] high[456119]))
    unknown call_tmp[623939] "maybe param" "maybe type" "temp"
    (623942 'move' call_tmp[623939](456130 call chpl_by call_tmp[623934] stride[456125]))
    const r[456128] "dead at end of block" "const" "insert auto destroy"
    (541099 'init var' r[456128] call_tmp[623939])
    (456137 'end of statement')
    {
      unknown _indexOfInterest[456139] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456141] "expr temp" "temp"
      (456143 'move' _iterator[456141](456146 call _getIterator r[456128]))
      Defer
      {
        {
          (456150 call _freeIterator _iterator[456141])
        }
      }
      { scopeless type
        (456154 'move' _indexOfInterest[456139](456157 call iteratorIndex _iterator[456141]))
      }
      ForLoop[456159]
      {
        unknown i[456162] "index var" "insert auto destroy"
        (475636 'end of statement')
        (456164 'move' i[456162] _indexOfInterest[456139])
        (475637 'end of statement' i[456162])
        unknown yret[510562] "YVV" "temp"
        (510565 'move' yret[510562](510564 'deref' i[456162]))
        (510567 yield yret[510562])
        (475639 'end of statement' i[456162])
        label _continueLabel[456169]
        _indexOfInterest[456139]
        _iterator[456141]
      }
      label _breakLabel[456171]
    }
    (510560 return ret[510558])
  }
  function chpl_direct_range_iter[456037](arg low[456044] :
  (456041 call int(64)[13] 32), arg high[456050] :
  (456048 call int(64)[13] 32), arg stride[456056] :
  (456054 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510571] "RVV" "temp"
    unknown call_tmp[623944] "expr temp" "maybe param" "maybe type" "temp"
    (623947 'move' call_tmp[623944](456063 call chpl_build_bounded_range low[456044] high[456050]))
    unknown call_tmp[623949] "maybe param" "maybe type" "temp"
    (623952 'move' call_tmp[623949](456061 call chpl_by call_tmp[623944] stride[456056]))
    const r[456059] "dead at end of block" "const" "insert auto destroy"
    (541101 'init var' r[456059] call_tmp[623949])
    (456068 'end of statement')
    {
      unknown _indexOfInterest[456070] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456072] "expr temp" "temp"
      (456074 'move' _iterator[456072](456077 call _getIterator r[456059]))
      Defer
      {
        {
          (456081 call _freeIterator _iterator[456072])
        }
      }
      { scopeless type
        (456085 'move' _indexOfInterest[456070](456088 call iteratorIndex _iterator[456072]))
      }
      ForLoop[456090]
      {
        unknown i[456093] "index var" "insert auto destroy"
        (475642 'end of statement')
        (456095 'move' i[456093] _indexOfInterest[456070])
        (475643 'end of statement' i[456093])
        unknown yret[510575] "YVV" "temp"
        (510578 'move' yret[510575](510577 'deref' i[456093]))
        (510580 yield yret[510575])
        (475645 'end of statement' i[456093])
        label _continueLabel[456100]
        _indexOfInterest[456070]
        _iterator[456072]
      }
      label _breakLabel[456102]
    }
    (510573 return ret[510571])
  }
  function chpl_direct_range_iter[455968](arg low[455975] :
  (455972 call int(64)[13] 16), arg high[455981] :
  (455979 call int(64)[13] 16), arg stride[455987] :
  (455985 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510584] "RVV" "temp"
    unknown call_tmp[623954] "expr temp" "maybe param" "maybe type" "temp"
    (623957 'move' call_tmp[623954](455994 call chpl_build_bounded_range low[455975] high[455981]))
    unknown call_tmp[623959] "maybe param" "maybe type" "temp"
    (623962 'move' call_tmp[623959](455992 call chpl_by call_tmp[623954] stride[455987]))
    const r[455990] "dead at end of block" "const" "insert auto destroy"
    (541103 'init var' r[455990] call_tmp[623959])
    (455999 'end of statement')
    {
      unknown _indexOfInterest[456001] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456003] "expr temp" "temp"
      (456005 'move' _iterator[456003](456008 call _getIterator r[455990]))
      Defer
      {
        {
          (456012 call _freeIterator _iterator[456003])
        }
      }
      { scopeless type
        (456016 'move' _indexOfInterest[456001](456019 call iteratorIndex _iterator[456003]))
      }
      ForLoop[456021]
      {
        unknown i[456024] "index var" "insert auto destroy"
        (475648 'end of statement')
        (456026 'move' i[456024] _indexOfInterest[456001])
        (475649 'end of statement' i[456024])
        unknown yret[510588] "YVV" "temp"
        (510591 'move' yret[510588](510590 'deref' i[456024]))
        (510593 yield yret[510588])
        (475651 'end of statement' i[456024])
        label _continueLabel[456031]
        _indexOfInterest[456001]
        _iterator[456003]
      }
      label _breakLabel[456033]
    }
    (510586 return ret[510584])
  }
  function chpl_direct_range_iter[455899](arg low[455906] :
  (455903 call int(64)[13] 8), arg high[455912] :
  (455910 call int(64)[13] 8), arg stride[455918] :
  (455916 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510597] "RVV" "temp"
    unknown call_tmp[623964] "expr temp" "maybe param" "maybe type" "temp"
    (623967 'move' call_tmp[623964](455925 call chpl_build_bounded_range low[455906] high[455912]))
    unknown call_tmp[623969] "maybe param" "maybe type" "temp"
    (623972 'move' call_tmp[623969](455923 call chpl_by call_tmp[623964] stride[455918]))
    const r[455921] "dead at end of block" "const" "insert auto destroy"
    (541105 'init var' r[455921] call_tmp[623969])
    (455930 'end of statement')
    {
      unknown _indexOfInterest[455932] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[455934] "expr temp" "temp"
      (455936 'move' _iterator[455934](455939 call _getIterator r[455921]))
      Defer
      {
        {
          (455943 call _freeIterator _iterator[455934])
        }
      }
      { scopeless type
        (455947 'move' _indexOfInterest[455932](455950 call iteratorIndex _iterator[455934]))
      }
      ForLoop[455952]
      {
        unknown i[455955] "index var" "insert auto destroy"
        (475654 'end of statement')
        (455957 'move' i[455955] _indexOfInterest[455932])
        (475655 'end of statement' i[455955])
        unknown yret[510601] "YVV" "temp"
        (510604 'move' yret[510601](510603 'deref' i[455955]))
        (510606 yield yret[510601])
        (475657 'end of statement' i[455955])
        label _continueLabel[455962]
        _indexOfInterest[455932]
        _iterator[455934]
      }
      label _breakLabel[455964]
    }
    (510599 return ret[510597])
  }
  function chpl_direct_range_iter[456382](arg low[456389] :
  (456386 call uint(64)[115] 64), arg high[456395] :
  (456393 call uint(64)[115] 64), arg stride[456401] :
  (456399 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510610] "RVV" "temp"
    unknown call_tmp[623974] "expr temp" "maybe param" "maybe type" "temp"
    (623977 'move' call_tmp[623974](456408 call chpl_build_bounded_range low[456389] high[456395]))
    unknown call_tmp[623979] "maybe param" "maybe type" "temp"
    (623982 'move' call_tmp[623979](456406 call chpl_by call_tmp[623974] stride[456401]))
    const r[456404] "dead at end of block" "const" "insert auto destroy"
    (541107 'init var' r[456404] call_tmp[623979])
    (456413 'end of statement')
    {
      unknown _indexOfInterest[456415] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456417] "expr temp" "temp"
      (456419 'move' _iterator[456417](456422 call _getIterator r[456404]))
      Defer
      {
        {
          (456426 call _freeIterator _iterator[456417])
        }
      }
      { scopeless type
        (456430 'move' _indexOfInterest[456415](456433 call iteratorIndex _iterator[456417]))
      }
      ForLoop[456435]
      {
        unknown i[456438] "index var" "insert auto destroy"
        (475660 'end of statement')
        (456440 'move' i[456438] _indexOfInterest[456415])
        (475661 'end of statement' i[456438])
        unknown yret[510614] "YVV" "temp"
        (510617 'move' yret[510614](510616 'deref' i[456438]))
        (510619 yield yret[510614])
        (475663 'end of statement' i[456438])
        label _continueLabel[456445]
        _indexOfInterest[456415]
        _iterator[456417]
      }
      label _breakLabel[456447]
    }
    (510612 return ret[510610])
  }
  function chpl_direct_range_iter[456313](arg low[456320] :
  (456317 call uint(64)[115] 32), arg high[456326] :
  (456324 call uint(64)[115] 32), arg stride[456332] :
  (456330 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510623] "RVV" "temp"
    unknown call_tmp[623984] "expr temp" "maybe param" "maybe type" "temp"
    (623987 'move' call_tmp[623984](456339 call chpl_build_bounded_range low[456320] high[456326]))
    unknown call_tmp[623989] "maybe param" "maybe type" "temp"
    (623992 'move' call_tmp[623989](456337 call chpl_by call_tmp[623984] stride[456332]))
    const r[456335] "dead at end of block" "const" "insert auto destroy"
    (541109 'init var' r[456335] call_tmp[623989])
    (456344 'end of statement')
    {
      unknown _indexOfInterest[456346] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456348] "expr temp" "temp"
      (456350 'move' _iterator[456348](456353 call _getIterator r[456335]))
      Defer
      {
        {
          (456357 call _freeIterator _iterator[456348])
        }
      }
      { scopeless type
        (456361 'move' _indexOfInterest[456346](456364 call iteratorIndex _iterator[456348]))
      }
      ForLoop[456366]
      {
        unknown i[456369] "index var" "insert auto destroy"
        (475666 'end of statement')
        (456371 'move' i[456369] _indexOfInterest[456346])
        (475667 'end of statement' i[456369])
        unknown yret[510627] "YVV" "temp"
        (510630 'move' yret[510627](510629 'deref' i[456369]))
        (510632 yield yret[510627])
        (475669 'end of statement' i[456369])
        label _continueLabel[456376]
        _indexOfInterest[456346]
        _iterator[456348]
      }
      label _breakLabel[456378]
    }
    (510625 return ret[510623])
  }
  function chpl_direct_range_iter[456244](arg low[456251] :
  (456248 call uint(64)[115] 16), arg high[456257] :
  (456255 call uint(64)[115] 16), arg stride[456263] :
  (456261 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510636] "RVV" "temp"
    unknown call_tmp[623994] "expr temp" "maybe param" "maybe type" "temp"
    (623997 'move' call_tmp[623994](456270 call chpl_build_bounded_range low[456251] high[456257]))
    unknown call_tmp[623999] "maybe param" "maybe type" "temp"
    (624002 'move' call_tmp[623999](456268 call chpl_by call_tmp[623994] stride[456263]))
    const r[456266] "dead at end of block" "const" "insert auto destroy"
    (541111 'init var' r[456266] call_tmp[623999])
    (456275 'end of statement')
    {
      unknown _indexOfInterest[456277] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456279] "expr temp" "temp"
      (456281 'move' _iterator[456279](456284 call _getIterator r[456266]))
      Defer
      {
        {
          (456288 call _freeIterator _iterator[456279])
        }
      }
      { scopeless type
        (456292 'move' _indexOfInterest[456277](456295 call iteratorIndex _iterator[456279]))
      }
      ForLoop[456297]
      {
        unknown i[456300] "index var" "insert auto destroy"
        (475672 'end of statement')
        (456302 'move' i[456300] _indexOfInterest[456277])
        (475673 'end of statement' i[456300])
        unknown yret[510640] "YVV" "temp"
        (510643 'move' yret[510640](510642 'deref' i[456300]))
        (510645 yield yret[510640])
        (475675 'end of statement' i[456300])
        label _continueLabel[456307]
        _indexOfInterest[456277]
        _iterator[456279]
      }
      label _breakLabel[456309]
    }
    (510638 return ret[510636])
  }
  function chpl_direct_range_iter[456175](arg low[456182] :
  (456179 call uint(64)[115] 8), arg high[456188] :
  (456186 call uint(64)[115] 8), arg stride[456194] :
  (456192 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510649] "RVV" "temp"
    unknown call_tmp[624004] "expr temp" "maybe param" "maybe type" "temp"
    (624007 'move' call_tmp[624004](456201 call chpl_build_bounded_range low[456182] high[456188]))
    unknown call_tmp[624009] "maybe param" "maybe type" "temp"
    (624012 'move' call_tmp[624009](456199 call chpl_by call_tmp[624004] stride[456194]))
    const r[456197] "dead at end of block" "const" "insert auto destroy"
    (541113 'init var' r[456197] call_tmp[624009])
    (456206 'end of statement')
    {
      unknown _indexOfInterest[456208] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456210] "expr temp" "temp"
      (456212 'move' _iterator[456210](456215 call _getIterator r[456197]))
      Defer
      {
        {
          (456219 call _freeIterator _iterator[456210])
        }
      }
      { scopeless type
        (456223 'move' _indexOfInterest[456208](456226 call iteratorIndex _iterator[456210]))
      }
      ForLoop[456228]
      {
        unknown i[456231] "index var" "insert auto destroy"
        (475678 'end of statement')
        (456233 'move' i[456231] _indexOfInterest[456208])
        (475679 'end of statement' i[456231])
        unknown yret[510653] "YVV" "temp"
        (510656 'move' yret[510653](510655 'deref' i[456231]))
        (510658 yield yret[510653])
        (475681 'end of statement' i[456231])
        label _continueLabel[456238]
        _indexOfInterest[456208]
        _iterator[456210]
      }
      label _breakLabel[456240]
    }
    (510651 return ret[510649])
  }
  function chpl_direct_range_iter[73906](arg low[73903]:enum[187](?), arg high[73909]:enum[187](?), arg stride[73913]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510662] "RVV" "temp"
    unknown call_tmp[624014] "expr temp" "maybe param" "maybe type" "temp"
    (624017 'move' call_tmp[624014](73918 call chpl_build_bounded_range low[73903] high[73909]))
    unknown call_tmp[624019] "maybe param" "maybe type" "temp"
    (624022 'move' call_tmp[624019](73921 call chpl_by call_tmp[624014] stride[73913]))
    const r[73923] "dead at end of block" "const" "insert auto destroy"
    (541115 'init var' r[73923] call_tmp[624019])
    (73926 'end of statement')
    {
      unknown _indexOfInterest[73933] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[73934] "expr temp" "temp"
      (73943 'move' _iterator[73934](73941 call _getIterator r[73923]))
      Defer
      {
        {
          (73959 call _freeIterator _iterator[73934])
        }
      }
      { scopeless type
        (73948 'move' _indexOfInterest[73933](73945 call iteratorIndex _iterator[73934]))
      }
      ForLoop[73935]
      {
        unknown i[73952] "index var" "insert auto destroy"
        (475684 'end of statement')
        (73954 'move' i[73952] _indexOfInterest[73933])
        (475685 'end of statement' i[73952])
        unknown yret[510666] "YVV" "temp"
        (510669 'move' yret[510666](510668 'deref' i[73952]))
        (510671 yield yret[510666])
        (475687 'end of statement' i[73952])
        label _continueLabel[73938]
        _indexOfInterest[73933]
        _iterator[73934]
      }
      label _breakLabel[73939]
    }
    (510664 return ret[510662])
  }
  function chpl_direct_range_iter[73974](arg low[73971]:bool[10], arg high[73977]:bool[10], arg stride[73981]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510675] "RVV" "temp"
    unknown call_tmp[624024] "expr temp" "maybe param" "maybe type" "temp"
    (624027 'move' call_tmp[624024](73986 call chpl_build_bounded_range low[73971] high[73977]))
    unknown call_tmp[624029] "maybe param" "maybe type" "temp"
    (624032 'move' call_tmp[624029](73989 call chpl_by call_tmp[624024] stride[73981]))
    const r[73991] "dead at end of block" "const" "insert auto destroy"
    (541117 'init var' r[73991] call_tmp[624029])
    (73994 'end of statement')
    {
      unknown _indexOfInterest[74001] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[74002] "expr temp" "temp"
      (74011 'move' _iterator[74002](74009 call _getIterator r[73991]))
      Defer
      {
        {
          (74027 call _freeIterator _iterator[74002])
        }
      }
      { scopeless type
        (74016 'move' _indexOfInterest[74001](74013 call iteratorIndex _iterator[74002]))
      }
      ForLoop[74003]
      {
        unknown i[74020] "index var" "insert auto destroy"
        (475690 'end of statement')
        (74022 'move' i[74020] _indexOfInterest[74001])
        (475691 'end of statement' i[74020])
        unknown yret[510679] "YVV" "temp"
        (510682 'move' yret[510679](510681 'deref' i[74020]))
        (510684 yield yret[510679])
        (475693 'end of statement' i[74020])
        label _continueLabel[74006]
        _indexOfInterest[74001]
        _iterator[74002]
      }
      label _breakLabel[74007]
    }
    (510677 return ret[510675])
  }
  function chpl_direct_range_iter[456640](arg low[456647] :
  (456644 call int(64)[13] 64), arg high[456653] :
  (456651 call int(64)[13] 64), param arg stride[456659] :
  (456657 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510688] "RVV" "temp"
    {
      unknown _indexOfInterest[456663] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456665] "expr temp" "temp"
      unknown call_tmp[624034] "expr temp" "maybe param" "maybe type" "temp"
      (624037 'move' call_tmp[624034](456672 call chpl_direct_param_stride_range_iter low[456647] high[456653] stride[456659]))
      (456667 'move' _iterator[456665](456670 call _getIterator call_tmp[624034]))
      Defer
      {
        {
          (456678 call _freeIterator _iterator[456665])
        }
      }
      { scopeless type
        (456682 'move' _indexOfInterest[456663](456685 call iteratorIndex _iterator[456665]))
      }
      ForLoop[456687]
      {
        unknown i[456690] "index var" "insert auto destroy"
        (475696 'end of statement')
        (456692 'move' i[456690] _indexOfInterest[456663])
        (475697 'end of statement' i[456690])
        unknown yret[510692] "YVV" "temp"
        (510695 'move' yret[510692](510694 'deref' i[456690]))
        (510697 yield yret[510692])
        (475699 'end of statement' i[456690])
        label _continueLabel[456697]
        _indexOfInterest[456663]
        _iterator[456665]
      }
      label _breakLabel[456699]
    }
    (510690 return ret[510688])
  }
  function chpl_direct_range_iter[456577](arg low[456584] :
  (456581 call int(64)[13] 32), arg high[456590] :
  (456588 call int(64)[13] 32), param arg stride[456596] :
  (456594 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510701] "RVV" "temp"
    {
      unknown _indexOfInterest[456600] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456602] "expr temp" "temp"
      unknown call_tmp[624039] "expr temp" "maybe param" "maybe type" "temp"
      (624042 'move' call_tmp[624039](456609 call chpl_direct_param_stride_range_iter low[456584] high[456590] stride[456596]))
      (456604 'move' _iterator[456602](456607 call _getIterator call_tmp[624039]))
      Defer
      {
        {
          (456615 call _freeIterator _iterator[456602])
        }
      }
      { scopeless type
        (456619 'move' _indexOfInterest[456600](456622 call iteratorIndex _iterator[456602]))
      }
      ForLoop[456624]
      {
        unknown i[456627] "index var" "insert auto destroy"
        (475702 'end of statement')
        (456629 'move' i[456627] _indexOfInterest[456600])
        (475703 'end of statement' i[456627])
        unknown yret[510705] "YVV" "temp"
        (510708 'move' yret[510705](510707 'deref' i[456627]))
        (510710 yield yret[510705])
        (475705 'end of statement' i[456627])
        label _continueLabel[456634]
        _indexOfInterest[456600]
        _iterator[456602]
      }
      label _breakLabel[456636]
    }
    (510703 return ret[510701])
  }
  function chpl_direct_range_iter[456514](arg low[456521] :
  (456518 call int(64)[13] 16), arg high[456527] :
  (456525 call int(64)[13] 16), param arg stride[456533] :
  (456531 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510714] "RVV" "temp"
    {
      unknown _indexOfInterest[456537] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456539] "expr temp" "temp"
      unknown call_tmp[624044] "expr temp" "maybe param" "maybe type" "temp"
      (624047 'move' call_tmp[624044](456546 call chpl_direct_param_stride_range_iter low[456521] high[456527] stride[456533]))
      (456541 'move' _iterator[456539](456544 call _getIterator call_tmp[624044]))
      Defer
      {
        {
          (456552 call _freeIterator _iterator[456539])
        }
      }
      { scopeless type
        (456556 'move' _indexOfInterest[456537](456559 call iteratorIndex _iterator[456539]))
      }
      ForLoop[456561]
      {
        unknown i[456564] "index var" "insert auto destroy"
        (475708 'end of statement')
        (456566 'move' i[456564] _indexOfInterest[456537])
        (475709 'end of statement' i[456564])
        unknown yret[510718] "YVV" "temp"
        (510721 'move' yret[510718](510720 'deref' i[456564]))
        (510723 yield yret[510718])
        (475711 'end of statement' i[456564])
        label _continueLabel[456571]
        _indexOfInterest[456537]
        _iterator[456539]
      }
      label _breakLabel[456573]
    }
    (510716 return ret[510714])
  }
  function chpl_direct_range_iter[456451](arg low[456458] :
  (456455 call int(64)[13] 8), arg high[456464] :
  (456462 call int(64)[13] 8), param arg stride[456470] :
  (456468 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510727] "RVV" "temp"
    {
      unknown _indexOfInterest[456474] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456476] "expr temp" "temp"
      unknown call_tmp[624049] "expr temp" "maybe param" "maybe type" "temp"
      (624052 'move' call_tmp[624049](456483 call chpl_direct_param_stride_range_iter low[456458] high[456464] stride[456470]))
      (456478 'move' _iterator[456476](456481 call _getIterator call_tmp[624049]))
      Defer
      {
        {
          (456489 call _freeIterator _iterator[456476])
        }
      }
      { scopeless type
        (456493 'move' _indexOfInterest[456474](456496 call iteratorIndex _iterator[456476]))
      }
      ForLoop[456498]
      {
        unknown i[456501] "index var" "insert auto destroy"
        (475714 'end of statement')
        (456503 'move' i[456501] _indexOfInterest[456474])
        (475715 'end of statement' i[456501])
        unknown yret[510731] "YVV" "temp"
        (510734 'move' yret[510731](510733 'deref' i[456501]))
        (510736 yield yret[510731])
        (475717 'end of statement' i[456501])
        label _continueLabel[456508]
        _indexOfInterest[456474]
        _iterator[456476]
      }
      label _breakLabel[456510]
    }
    (510729 return ret[510727])
  }
  function chpl_direct_range_iter[456892](arg low[456899] :
  (456896 call uint(64)[115] 64), arg high[456905] :
  (456903 call uint(64)[115] 64), param arg stride[456911] :
  (456909 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510740] "RVV" "temp"
    {
      unknown _indexOfInterest[456915] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456917] "expr temp" "temp"
      unknown call_tmp[624054] "expr temp" "maybe param" "maybe type" "temp"
      (624057 'move' call_tmp[624054](456924 call chpl_direct_param_stride_range_iter low[456899] high[456905] stride[456911]))
      (456919 'move' _iterator[456917](456922 call _getIterator call_tmp[624054]))
      Defer
      {
        {
          (456930 call _freeIterator _iterator[456917])
        }
      }
      { scopeless type
        (456934 'move' _indexOfInterest[456915](456937 call iteratorIndex _iterator[456917]))
      }
      ForLoop[456939]
      {
        unknown i[456942] "index var" "insert auto destroy"
        (475720 'end of statement')
        (456944 'move' i[456942] _indexOfInterest[456915])
        (475721 'end of statement' i[456942])
        unknown yret[510744] "YVV" "temp"
        (510747 'move' yret[510744](510746 'deref' i[456942]))
        (510749 yield yret[510744])
        (475723 'end of statement' i[456942])
        label _continueLabel[456949]
        _indexOfInterest[456915]
        _iterator[456917]
      }
      label _breakLabel[456951]
    }
    (510742 return ret[510740])
  }
  function chpl_direct_range_iter[456829](arg low[456836] :
  (456833 call uint(64)[115] 32), arg high[456842] :
  (456840 call uint(64)[115] 32), param arg stride[456848] :
  (456846 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510753] "RVV" "temp"
    {
      unknown _indexOfInterest[456852] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456854] "expr temp" "temp"
      unknown call_tmp[624059] "expr temp" "maybe param" "maybe type" "temp"
      (624062 'move' call_tmp[624059](456861 call chpl_direct_param_stride_range_iter low[456836] high[456842] stride[456848]))
      (456856 'move' _iterator[456854](456859 call _getIterator call_tmp[624059]))
      Defer
      {
        {
          (456867 call _freeIterator _iterator[456854])
        }
      }
      { scopeless type
        (456871 'move' _indexOfInterest[456852](456874 call iteratorIndex _iterator[456854]))
      }
      ForLoop[456876]
      {
        unknown i[456879] "index var" "insert auto destroy"
        (475726 'end of statement')
        (456881 'move' i[456879] _indexOfInterest[456852])
        (475727 'end of statement' i[456879])
        unknown yret[510757] "YVV" "temp"
        (510760 'move' yret[510757](510759 'deref' i[456879]))
        (510762 yield yret[510757])
        (475729 'end of statement' i[456879])
        label _continueLabel[456886]
        _indexOfInterest[456852]
        _iterator[456854]
      }
      label _breakLabel[456888]
    }
    (510755 return ret[510753])
  }
  function chpl_direct_range_iter[456766](arg low[456773] :
  (456770 call uint(64)[115] 16), arg high[456779] :
  (456777 call uint(64)[115] 16), param arg stride[456785] :
  (456783 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510766] "RVV" "temp"
    {
      unknown _indexOfInterest[456789] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456791] "expr temp" "temp"
      unknown call_tmp[624064] "expr temp" "maybe param" "maybe type" "temp"
      (624067 'move' call_tmp[624064](456798 call chpl_direct_param_stride_range_iter low[456773] high[456779] stride[456785]))
      (456793 'move' _iterator[456791](456796 call _getIterator call_tmp[624064]))
      Defer
      {
        {
          (456804 call _freeIterator _iterator[456791])
        }
      }
      { scopeless type
        (456808 'move' _indexOfInterest[456789](456811 call iteratorIndex _iterator[456791]))
      }
      ForLoop[456813]
      {
        unknown i[456816] "index var" "insert auto destroy"
        (475732 'end of statement')
        (456818 'move' i[456816] _indexOfInterest[456789])
        (475733 'end of statement' i[456816])
        unknown yret[510770] "YVV" "temp"
        (510773 'move' yret[510770](510772 'deref' i[456816]))
        (510775 yield yret[510770])
        (475735 'end of statement' i[456816])
        label _continueLabel[456823]
        _indexOfInterest[456789]
        _iterator[456791]
      }
      label _breakLabel[456825]
    }
    (510768 return ret[510766])
  }
  function chpl_direct_range_iter[456703](arg low[456710] :
  (456707 call uint(64)[115] 8), arg high[456716] :
  (456714 call uint(64)[115] 8), param arg stride[456722] :
  (456720 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510779] "RVV" "temp"
    {
      unknown _indexOfInterest[456726] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456728] "expr temp" "temp"
      unknown call_tmp[624069] "expr temp" "maybe param" "maybe type" "temp"
      (624072 'move' call_tmp[624069](456735 call chpl_direct_param_stride_range_iter low[456710] high[456716] stride[456722]))
      (456730 'move' _iterator[456728](456733 call _getIterator call_tmp[624069]))
      Defer
      {
        {
          (456741 call _freeIterator _iterator[456728])
        }
      }
      { scopeless type
        (456745 'move' _indexOfInterest[456726](456748 call iteratorIndex _iterator[456728]))
      }
      ForLoop[456750]
      {
        unknown i[456753] "index var" "insert auto destroy"
        (475738 'end of statement')
        (456755 'move' i[456753] _indexOfInterest[456726])
        (475739 'end of statement' i[456753])
        unknown yret[510783] "YVV" "temp"
        (510786 'move' yret[510783](510785 'deref' i[456753]))
        (510788 yield yret[510783])
        (475741 'end of statement' i[456753])
        label _continueLabel[456760]
        _indexOfInterest[456726]
        _iterator[456728]
      }
      label _breakLabel[456762]
    }
    (510781 return ret[510779])
  }
  function chpl_direct_range_iter[74188](arg low[74185]:enum[187](?), arg high[74191]:enum[187](?), param arg stride[74195]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510792] "RVV" "temp"
    unknown call_tmp[624074] "expr temp" "maybe param" "maybe type" "temp"
    (624077 'move' call_tmp[624074](74200 call == stride[74195] 1))
    unknown call_tmp[624079] "expr temp" "maybe param" "maybe type" "temp"
    (624082 'move' call_tmp[624079](74299 call _cond_test call_tmp[624074]))
    if call_tmp[624079]
    {
      unknown call_tmp[624084] "maybe param" "maybe type" "temp"
      (624087 'move' call_tmp[624084](74204 call chpl_build_bounded_range low[74185] high[74191]))
      const r[74206] "dead at end of block" "const" "insert auto destroy"
      (541119 'init var' r[74206] call_tmp[624084])
      (74209 'end of statement')
      {
        unknown _indexOfInterest[74216] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74217] "expr temp" "temp"
        (74226 'move' _iterator[74217](74224 call _getIterator r[74206]))
        Defer
        {
          {
            (74242 call _freeIterator _iterator[74217])
          }
        }
        { scopeless type
          (74231 'move' _indexOfInterest[74216](74228 call iteratorIndex _iterator[74217]))
        }
        ForLoop[74218]
        {
          unknown i[74235] "index var" "insert auto destroy"
          (475744 'end of statement')
          (74237 'move' i[74235] _indexOfInterest[74216])
          (475745 'end of statement' i[74235])
          unknown yret[510796] "YVV" "temp"
          (510799 'move' yret[510796](510798 'deref' i[74235]))
          (510801 yield yret[510796])
          (475747 'end of statement' i[74235])
          label _continueLabel[74221]
          _indexOfInterest[74216]
          _iterator[74217]
        }
        label _breakLabel[74222]
      }
    }
    {
      unknown call_tmp[624089] "expr temp" "maybe param" "maybe type" "temp"
      (624092 'move' call_tmp[624089](74251 call chpl_build_bounded_range low[74185] high[74191]))
      unknown call_tmp[624094] "maybe param" "maybe type" "temp"
      (624097 'move' call_tmp[624094](74254 call chpl_by call_tmp[624089] stride[74195]))
      const r[74256] "dead at end of block" "const" "insert auto destroy"
      (541121 'init var' r[74256] call_tmp[624094])
      (74259 'end of statement')
      {
        unknown _indexOfInterest[74266] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74267] "expr temp" "temp"
        (74276 'move' _iterator[74267](74274 call _getIterator r[74256]))
        Defer
        {
          {
            (74292 call _freeIterator _iterator[74267])
          }
        }
        { scopeless type
          (74281 'move' _indexOfInterest[74266](74278 call iteratorIndex _iterator[74267]))
        }
        ForLoop[74268]
        {
          unknown i[74285] "index var" "insert auto destroy"
          (475750 'end of statement')
          (74287 'move' i[74285] _indexOfInterest[74266])
          (475751 'end of statement' i[74285])
          unknown yret[510803] "YVV" "temp"
          (510806 'move' yret[510803](510805 'deref' i[74285]))
          (510808 yield yret[510803])
          (475753 'end of statement' i[74285])
          label _continueLabel[74271]
          _indexOfInterest[74266]
          _iterator[74267]
        }
        label _breakLabel[74272]
      }
    }
    (510794 return ret[510792])
  }
  function chpl_direct_range_iter[74312](arg low[74309]:bool[10], arg high[74315]:bool[10], param arg stride[74319]:integral[199](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510812] "RVV" "temp"
    unknown call_tmp[624099] "expr temp" "maybe param" "maybe type" "temp"
    (624102 'move' call_tmp[624099](74324 call == stride[74319] 1))
    unknown call_tmp[624104] "expr temp" "maybe param" "maybe type" "temp"
    (624107 'move' call_tmp[624104](74423 call _cond_test call_tmp[624099]))
    if call_tmp[624104]
    {
      unknown call_tmp[624109] "maybe param" "maybe type" "temp"
      (624112 'move' call_tmp[624109](74328 call chpl_build_bounded_range low[74309] high[74315]))
      const r[74330] "dead at end of block" "const" "insert auto destroy"
      (541123 'init var' r[74330] call_tmp[624109])
      (74333 'end of statement')
      {
        unknown _indexOfInterest[74340] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74341] "expr temp" "temp"
        (74350 'move' _iterator[74341](74348 call _getIterator r[74330]))
        Defer
        {
          {
            (74366 call _freeIterator _iterator[74341])
          }
        }
        { scopeless type
          (74355 'move' _indexOfInterest[74340](74352 call iteratorIndex _iterator[74341]))
        }
        ForLoop[74342]
        {
          unknown i[74359] "index var" "insert auto destroy"
          (475756 'end of statement')
          (74361 'move' i[74359] _indexOfInterest[74340])
          (475757 'end of statement' i[74359])
          unknown yret[510816] "YVV" "temp"
          (510819 'move' yret[510816](510818 'deref' i[74359]))
          (510821 yield yret[510816])
          (475759 'end of statement' i[74359])
          label _continueLabel[74345]
          _indexOfInterest[74340]
          _iterator[74341]
        }
        label _breakLabel[74346]
      }
    }
    {
      unknown call_tmp[624114] "expr temp" "maybe param" "maybe type" "temp"
      (624117 'move' call_tmp[624114](74375 call chpl_build_bounded_range low[74309] high[74315]))
      unknown call_tmp[624119] "maybe param" "maybe type" "temp"
      (624122 'move' call_tmp[624119](74378 call chpl_by call_tmp[624114] stride[74319]))
      const r[74380] "dead at end of block" "const" "insert auto destroy"
      (541125 'init var' r[74380] call_tmp[624119])
      (74383 'end of statement')
      {
        unknown _indexOfInterest[74390] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[74391] "expr temp" "temp"
        (74400 'move' _iterator[74391](74398 call _getIterator r[74380]))
        Defer
        {
          {
            (74416 call _freeIterator _iterator[74391])
          }
        }
        { scopeless type
          (74405 'move' _indexOfInterest[74390](74402 call iteratorIndex _iterator[74391]))
        }
        ForLoop[74392]
        {
          unknown i[74409] "index var" "insert auto destroy"
          (475762 'end of statement')
          (74411 'move' i[74409] _indexOfInterest[74390])
          (475763 'end of statement' i[74409])
          unknown yret[510823] "YVV" "temp"
          (510826 'move' yret[510823](510825 'deref' i[74409]))
          (510828 yield yret[510823])
          (475765 'end of statement' i[74409])
          label _continueLabel[74395]
          _indexOfInterest[74390]
          _iterator[74391]
        }
        label _breakLabel[74396]
      }
    }
    (510814 return ret[510812])
  }
  function chpl_direct_range_iter[457144](arg low[457151] :
  (457148 call int(64)[13] 64), arg high[457157] :
  (457155 call int(64)[13] 64), arg stride[457163] :
  (457161 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510832] "RVV" "temp"
    {
      unknown _indexOfInterest[457167] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457169] "expr temp" "temp"
      unknown call_tmp[624124] "expr temp" "maybe param" "maybe type" "temp"
      (624127 'move' call_tmp[624124](457176 call chpl_direct_pos_stride_range_iter low[457151] high[457157] stride[457163]))
      (457171 'move' _iterator[457169](457174 call _getIterator call_tmp[624124]))
      Defer
      {
        {
          (457182 call _freeIterator _iterator[457169])
        }
      }
      { scopeless type
        (457186 'move' _indexOfInterest[457167](457189 call iteratorIndex _iterator[457169]))
      }
      ForLoop[457191]
      {
        unknown i[457194] "index var" "insert auto destroy"
        (475768 'end of statement')
        (457196 'move' i[457194] _indexOfInterest[457167])
        (475769 'end of statement' i[457194])
        unknown yret[510836] "YVV" "temp"
        (510839 'move' yret[510836](510838 'deref' i[457194]))
        (510841 yield yret[510836])
        (475771 'end of statement' i[457194])
        label _continueLabel[457201]
        _indexOfInterest[457167]
        _iterator[457169]
      }
      label _breakLabel[457203]
    }
    (510834 return ret[510832])
  }
  function chpl_direct_range_iter[457081](arg low[457088] :
  (457085 call int(64)[13] 32), arg high[457094] :
  (457092 call int(64)[13] 32), arg stride[457100] :
  (457098 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510845] "RVV" "temp"
    {
      unknown _indexOfInterest[457104] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457106] "expr temp" "temp"
      unknown call_tmp[624129] "expr temp" "maybe param" "maybe type" "temp"
      (624132 'move' call_tmp[624129](457113 call chpl_direct_pos_stride_range_iter low[457088] high[457094] stride[457100]))
      (457108 'move' _iterator[457106](457111 call _getIterator call_tmp[624129]))
      Defer
      {
        {
          (457119 call _freeIterator _iterator[457106])
        }
      }
      { scopeless type
        (457123 'move' _indexOfInterest[457104](457126 call iteratorIndex _iterator[457106]))
      }
      ForLoop[457128]
      {
        unknown i[457131] "index var" "insert auto destroy"
        (475774 'end of statement')
        (457133 'move' i[457131] _indexOfInterest[457104])
        (475775 'end of statement' i[457131])
        unknown yret[510849] "YVV" "temp"
        (510852 'move' yret[510849](510851 'deref' i[457131]))
        (510854 yield yret[510849])
        (475777 'end of statement' i[457131])
        label _continueLabel[457138]
        _indexOfInterest[457104]
        _iterator[457106]
      }
      label _breakLabel[457140]
    }
    (510847 return ret[510845])
  }
  function chpl_direct_range_iter[457018](arg low[457025] :
  (457022 call int(64)[13] 16), arg high[457031] :
  (457029 call int(64)[13] 16), arg stride[457037] :
  (457035 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510858] "RVV" "temp"
    {
      unknown _indexOfInterest[457041] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457043] "expr temp" "temp"
      unknown call_tmp[624134] "expr temp" "maybe param" "maybe type" "temp"
      (624137 'move' call_tmp[624134](457050 call chpl_direct_pos_stride_range_iter low[457025] high[457031] stride[457037]))
      (457045 'move' _iterator[457043](457048 call _getIterator call_tmp[624134]))
      Defer
      {
        {
          (457056 call _freeIterator _iterator[457043])
        }
      }
      { scopeless type
        (457060 'move' _indexOfInterest[457041](457063 call iteratorIndex _iterator[457043]))
      }
      ForLoop[457065]
      {
        unknown i[457068] "index var" "insert auto destroy"
        (475780 'end of statement')
        (457070 'move' i[457068] _indexOfInterest[457041])
        (475781 'end of statement' i[457068])
        unknown yret[510862] "YVV" "temp"
        (510865 'move' yret[510862](510864 'deref' i[457068]))
        (510867 yield yret[510862])
        (475783 'end of statement' i[457068])
        label _continueLabel[457075]
        _indexOfInterest[457041]
        _iterator[457043]
      }
      label _breakLabel[457077]
    }
    (510860 return ret[510858])
  }
  function chpl_direct_range_iter[456955](arg low[456962] :
  (456959 call int(64)[13] 8), arg high[456968] :
  (456966 call int(64)[13] 8), arg stride[456974] :
  (456972 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510871] "RVV" "temp"
    {
      unknown _indexOfInterest[456978] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[456980] "expr temp" "temp"
      unknown call_tmp[624139] "expr temp" "maybe param" "maybe type" "temp"
      (624142 'move' call_tmp[624139](456987 call chpl_direct_pos_stride_range_iter low[456962] high[456968] stride[456974]))
      (456982 'move' _iterator[456980](456985 call _getIterator call_tmp[624139]))
      Defer
      {
        {
          (456993 call _freeIterator _iterator[456980])
        }
      }
      { scopeless type
        (456997 'move' _indexOfInterest[456978](457000 call iteratorIndex _iterator[456980]))
      }
      ForLoop[457002]
      {
        unknown i[457005] "index var" "insert auto destroy"
        (475786 'end of statement')
        (457007 'move' i[457005] _indexOfInterest[456978])
        (475787 'end of statement' i[457005])
        unknown yret[510875] "YVV" "temp"
        (510878 'move' yret[510875](510877 'deref' i[457005]))
        (510880 yield yret[510875])
        (475789 'end of statement' i[457005])
        label _continueLabel[457012]
        _indexOfInterest[456978]
        _iterator[456980]
      }
      label _breakLabel[457014]
    }
    (510873 return ret[510871])
  }
  function chpl_direct_range_iter[457396](arg low[457403] :
  (457400 call uint(64)[115] 64), arg high[457409] :
  (457407 call uint(64)[115] 64), arg stride[457415] :
  (457413 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510884] "RVV" "temp"
    {
      unknown _indexOfInterest[457419] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457421] "expr temp" "temp"
      unknown call_tmp[624144] "expr temp" "maybe param" "maybe type" "temp"
      (624147 'move' call_tmp[624144](457428 call chpl_direct_pos_stride_range_iter low[457403] high[457409] stride[457415]))
      (457423 'move' _iterator[457421](457426 call _getIterator call_tmp[624144]))
      Defer
      {
        {
          (457434 call _freeIterator _iterator[457421])
        }
      }
      { scopeless type
        (457438 'move' _indexOfInterest[457419](457441 call iteratorIndex _iterator[457421]))
      }
      ForLoop[457443]
      {
        unknown i[457446] "index var" "insert auto destroy"
        (475792 'end of statement')
        (457448 'move' i[457446] _indexOfInterest[457419])
        (475793 'end of statement' i[457446])
        unknown yret[510888] "YVV" "temp"
        (510891 'move' yret[510888](510890 'deref' i[457446]))
        (510893 yield yret[510888])
        (475795 'end of statement' i[457446])
        label _continueLabel[457453]
        _indexOfInterest[457419]
        _iterator[457421]
      }
      label _breakLabel[457455]
    }
    (510886 return ret[510884])
  }
  function chpl_direct_range_iter[457333](arg low[457340] :
  (457337 call uint(64)[115] 32), arg high[457346] :
  (457344 call uint(64)[115] 32), arg stride[457352] :
  (457350 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510897] "RVV" "temp"
    {
      unknown _indexOfInterest[457356] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457358] "expr temp" "temp"
      unknown call_tmp[624149] "expr temp" "maybe param" "maybe type" "temp"
      (624152 'move' call_tmp[624149](457365 call chpl_direct_pos_stride_range_iter low[457340] high[457346] stride[457352]))
      (457360 'move' _iterator[457358](457363 call _getIterator call_tmp[624149]))
      Defer
      {
        {
          (457371 call _freeIterator _iterator[457358])
        }
      }
      { scopeless type
        (457375 'move' _indexOfInterest[457356](457378 call iteratorIndex _iterator[457358]))
      }
      ForLoop[457380]
      {
        unknown i[457383] "index var" "insert auto destroy"
        (475798 'end of statement')
        (457385 'move' i[457383] _indexOfInterest[457356])
        (475799 'end of statement' i[457383])
        unknown yret[510901] "YVV" "temp"
        (510904 'move' yret[510901](510903 'deref' i[457383]))
        (510906 yield yret[510901])
        (475801 'end of statement' i[457383])
        label _continueLabel[457390]
        _indexOfInterest[457356]
        _iterator[457358]
      }
      label _breakLabel[457392]
    }
    (510899 return ret[510897])
  }
  function chpl_direct_range_iter[457270](arg low[457277] :
  (457274 call uint(64)[115] 16), arg high[457283] :
  (457281 call uint(64)[115] 16), arg stride[457289] :
  (457287 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510910] "RVV" "temp"
    {
      unknown _indexOfInterest[457293] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457295] "expr temp" "temp"
      unknown call_tmp[624154] "expr temp" "maybe param" "maybe type" "temp"
      (624157 'move' call_tmp[624154](457302 call chpl_direct_pos_stride_range_iter low[457277] high[457283] stride[457289]))
      (457297 'move' _iterator[457295](457300 call _getIterator call_tmp[624154]))
      Defer
      {
        {
          (457308 call _freeIterator _iterator[457295])
        }
      }
      { scopeless type
        (457312 'move' _indexOfInterest[457293](457315 call iteratorIndex _iterator[457295]))
      }
      ForLoop[457317]
      {
        unknown i[457320] "index var" "insert auto destroy"
        (475804 'end of statement')
        (457322 'move' i[457320] _indexOfInterest[457293])
        (475805 'end of statement' i[457320])
        unknown yret[510914] "YVV" "temp"
        (510917 'move' yret[510914](510916 'deref' i[457320]))
        (510919 yield yret[510914])
        (475807 'end of statement' i[457320])
        label _continueLabel[457327]
        _indexOfInterest[457293]
        _iterator[457295]
      }
      label _breakLabel[457329]
    }
    (510912 return ret[510910])
  }
  function chpl_direct_range_iter[457207](arg low[457214] :
  (457211 call uint(64)[115] 8), arg high[457220] :
  (457218 call uint(64)[115] 8), arg stride[457226] :
  (457224 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510923] "RVV" "temp"
    {
      unknown _indexOfInterest[457230] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457232] "expr temp" "temp"
      unknown call_tmp[624159] "expr temp" "maybe param" "maybe type" "temp"
      (624162 'move' call_tmp[624159](457239 call chpl_direct_pos_stride_range_iter low[457214] high[457220] stride[457226]))
      (457234 'move' _iterator[457232](457237 call _getIterator call_tmp[624159]))
      Defer
      {
        {
          (457245 call _freeIterator _iterator[457232])
        }
      }
      { scopeless type
        (457249 'move' _indexOfInterest[457230](457252 call iteratorIndex _iterator[457232]))
      }
      ForLoop[457254]
      {
        unknown i[457257] "index var" "insert auto destroy"
        (475810 'end of statement')
        (457259 'move' i[457257] _indexOfInterest[457230])
        (475811 'end of statement' i[457257])
        unknown yret[510927] "YVV" "temp"
        (510930 'move' yret[510927](510929 'deref' i[457257]))
        (510932 yield yret[510927])
        (475813 'end of statement' i[457257])
        label _continueLabel[457264]
        _indexOfInterest[457230]
        _iterator[457232]
      }
      label _breakLabel[457266]
    }
    (510925 return ret[510923])
  }
  function chpl_direct_range_iter[457564](arg low[457571] :
  (457568 call int(64)[13] 64), arg high[457577] :
  (457575 call int(64)[13] 64), arg stride[457579]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510936] "RVV" "temp"
    unknown call_tmp[624164] "expr temp" "maybe param" "maybe type" "temp"
    (624167 'move' call_tmp[624164](457589 call int(64)[13] 64))
    unknown call_tmp[624169] "expr temp" "maybe param" "maybe type" "temp"
    (624172 'move' call_tmp[624169](457586 call _cast string[26] call_tmp[624164]))
    unknown call_tmp[624174] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624177 'move' call_tmp[624174](457595 'typeof' stride[457579]))
    unknown call_tmp[624179] "expr temp" "maybe param" "maybe type" "temp"
    (624182 'move' call_tmp[624179](457593 call _cast string[26] call_tmp[624174]))
    (457583 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624169] " using a step of type " call_tmp[624179])
    (510938 return ret[510936])
  }
  function chpl_direct_range_iter[457529](arg low[457536] :
  (457533 call int(64)[13] 32), arg high[457542] :
  (457540 call int(64)[13] 32), arg stride[457544]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510942] "RVV" "temp"
    unknown call_tmp[624184] "expr temp" "maybe param" "maybe type" "temp"
    (624187 'move' call_tmp[624184](457554 call int(64)[13] 32))
    unknown call_tmp[624189] "expr temp" "maybe param" "maybe type" "temp"
    (624192 'move' call_tmp[624189](457551 call _cast string[26] call_tmp[624184]))
    unknown call_tmp[624194] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624197 'move' call_tmp[624194](457560 'typeof' stride[457544]))
    unknown call_tmp[624199] "expr temp" "maybe param" "maybe type" "temp"
    (624202 'move' call_tmp[624199](457558 call _cast string[26] call_tmp[624194]))
    (457548 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624189] " using a step of type " call_tmp[624199])
    (510944 return ret[510942])
  }
  function chpl_direct_range_iter[457494](arg low[457501] :
  (457498 call int(64)[13] 16), arg high[457507] :
  (457505 call int(64)[13] 16), arg stride[457509]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510948] "RVV" "temp"
    unknown call_tmp[624204] "expr temp" "maybe param" "maybe type" "temp"
    (624207 'move' call_tmp[624204](457519 call int(64)[13] 16))
    unknown call_tmp[624209] "expr temp" "maybe param" "maybe type" "temp"
    (624212 'move' call_tmp[624209](457516 call _cast string[26] call_tmp[624204]))
    unknown call_tmp[624214] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624217 'move' call_tmp[624214](457525 'typeof' stride[457509]))
    unknown call_tmp[624219] "expr temp" "maybe param" "maybe type" "temp"
    (624222 'move' call_tmp[624219](457523 call _cast string[26] call_tmp[624214]))
    (457513 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624209] " using a step of type " call_tmp[624219])
    (510950 return ret[510948])
  }
  function chpl_direct_range_iter[457459](arg low[457466] :
  (457463 call int(64)[13] 8), arg high[457472] :
  (457470 call int(64)[13] 8), arg stride[457474]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510954] "RVV" "temp"
    unknown call_tmp[624224] "expr temp" "maybe param" "maybe type" "temp"
    (624227 'move' call_tmp[624224](457484 call int(64)[13] 8))
    unknown call_tmp[624229] "expr temp" "maybe param" "maybe type" "temp"
    (624232 'move' call_tmp[624229](457481 call _cast string[26] call_tmp[624224]))
    unknown call_tmp[624234] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624237 'move' call_tmp[624234](457490 'typeof' stride[457474]))
    unknown call_tmp[624239] "expr temp" "maybe param" "maybe type" "temp"
    (624242 'move' call_tmp[624239](457488 call _cast string[26] call_tmp[624234]))
    (457478 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624229] " using a step of type " call_tmp[624239])
    (510956 return ret[510954])
  }
  function chpl_direct_range_iter[457704](arg low[457711] :
  (457708 call uint(64)[115] 64), arg high[457717] :
  (457715 call uint(64)[115] 64), arg stride[457719]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510960] "RVV" "temp"
    unknown call_tmp[624244] "expr temp" "maybe param" "maybe type" "temp"
    (624247 'move' call_tmp[624244](457729 call uint(64)[115] 64))
    unknown call_tmp[624249] "expr temp" "maybe param" "maybe type" "temp"
    (624252 'move' call_tmp[624249](457726 call _cast string[26] call_tmp[624244]))
    unknown call_tmp[624254] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624257 'move' call_tmp[624254](457735 'typeof' stride[457719]))
    unknown call_tmp[624259] "expr temp" "maybe param" "maybe type" "temp"
    (624262 'move' call_tmp[624259](457733 call _cast string[26] call_tmp[624254]))
    (457723 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624249] " using a step of type " call_tmp[624259])
    (510962 return ret[510960])
  }
  function chpl_direct_range_iter[457669](arg low[457676] :
  (457673 call uint(64)[115] 32), arg high[457682] :
  (457680 call uint(64)[115] 32), arg stride[457684]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510966] "RVV" "temp"
    unknown call_tmp[624264] "expr temp" "maybe param" "maybe type" "temp"
    (624267 'move' call_tmp[624264](457694 call uint(64)[115] 32))
    unknown call_tmp[624269] "expr temp" "maybe param" "maybe type" "temp"
    (624272 'move' call_tmp[624269](457691 call _cast string[26] call_tmp[624264]))
    unknown call_tmp[624274] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624277 'move' call_tmp[624274](457700 'typeof' stride[457684]))
    unknown call_tmp[624279] "expr temp" "maybe param" "maybe type" "temp"
    (624282 'move' call_tmp[624279](457698 call _cast string[26] call_tmp[624274]))
    (457688 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624269] " using a step of type " call_tmp[624279])
    (510968 return ret[510966])
  }
  function chpl_direct_range_iter[457634](arg low[457641] :
  (457638 call uint(64)[115] 16), arg high[457647] :
  (457645 call uint(64)[115] 16), arg stride[457649]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510972] "RVV" "temp"
    unknown call_tmp[624284] "expr temp" "maybe param" "maybe type" "temp"
    (624287 'move' call_tmp[624284](457659 call uint(64)[115] 16))
    unknown call_tmp[624289] "expr temp" "maybe param" "maybe type" "temp"
    (624292 'move' call_tmp[624289](457656 call _cast string[26] call_tmp[624284]))
    unknown call_tmp[624294] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624297 'move' call_tmp[624294](457665 'typeof' stride[457649]))
    unknown call_tmp[624299] "expr temp" "maybe param" "maybe type" "temp"
    (624302 'move' call_tmp[624299](457663 call _cast string[26] call_tmp[624294]))
    (457653 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624289] " using a step of type " call_tmp[624299])
    (510974 return ret[510972])
  }
  function chpl_direct_range_iter[457599](arg low[457606] :
  (457603 call uint(64)[115] 8), arg high[457612] :
  (457610 call uint(64)[115] 8), arg stride[457614]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510978] "RVV" "temp"
    unknown call_tmp[624304] "expr temp" "maybe param" "maybe type" "temp"
    (624307 'move' call_tmp[624304](457624 call uint(64)[115] 8))
    unknown call_tmp[624309] "expr temp" "maybe param" "maybe type" "temp"
    (624312 'move' call_tmp[624309](457621 call _cast string[26] call_tmp[624304]))
    unknown call_tmp[624314] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624317 'move' call_tmp[624314](457630 'typeof' stride[457614]))
    unknown call_tmp[624319] "expr temp" "maybe param" "maybe type" "temp"
    (624322 'move' call_tmp[624319](457628 call _cast string[26] call_tmp[624314]))
    (457618 call compilerError "can't apply 'by' to a range with idxType " call_tmp[624309] " using a step of type " call_tmp[624319])
    (510980 return ret[510978])
  }
  function chpl_direct_range_iter[74664](arg low[74662]:_any[178](?), arg high[74666]:_any[178](?), arg stride[74668]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510984] "RVV" "temp"
    (74673 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (510986 return ret[510984])
  }
  function chpl_direct_counted_range_iter[457907](arg low[457914] :
  (457911 call int(64)[13] 64), arg count[457920] :
  (457918 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[510990] "RVV" "temp"
    {
      unknown _indexOfInterest[457924] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457926] "expr temp" "temp"
      unknown call_tmp[624324] "expr temp" "maybe param" "maybe type" "temp"
      (624327 'move' call_tmp[624324](457933 call chpl_direct_counted_range_iter_helper low[457914] count[457920]))
      (457928 'move' _iterator[457926](457931 call _getIterator call_tmp[624324]))
      Defer
      {
        {
          (457938 call _freeIterator _iterator[457926])
        }
      }
      { scopeless type
        (457942 'move' _indexOfInterest[457924](457945 call iteratorIndex _iterator[457926]))
      }
      ForLoop[457947]
      {
        unknown i[457950] "index var" "insert auto destroy"
        (475825 'end of statement')
        (457952 'move' i[457950] _indexOfInterest[457924])
        (475826 'end of statement' i[457950])
        unknown yret[510994] "YVV" "temp"
        (510997 'move' yret[510994](510996 'deref' i[457950]))
        (510999 yield yret[510994])
        (475828 'end of statement' i[457950])
        label _continueLabel[457957]
        _indexOfInterest[457924]
        _iterator[457926]
      }
      label _breakLabel[457959]
    }
    (510992 return ret[510990])
  }
  function chpl_direct_counted_range_iter[457851](arg low[457858] :
  (457855 call int(64)[13] 32), arg count[457864] :
  (457862 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511003] "RVV" "temp"
    {
      unknown _indexOfInterest[457868] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457870] "expr temp" "temp"
      unknown call_tmp[624329] "expr temp" "maybe param" "maybe type" "temp"
      (624332 'move' call_tmp[624329](457877 call chpl_direct_counted_range_iter_helper low[457858] count[457864]))
      (457872 'move' _iterator[457870](457875 call _getIterator call_tmp[624329]))
      Defer
      {
        {
          (457882 call _freeIterator _iterator[457870])
        }
      }
      { scopeless type
        (457886 'move' _indexOfInterest[457868](457889 call iteratorIndex _iterator[457870]))
      }
      ForLoop[457891]
      {
        unknown i[457894] "index var" "insert auto destroy"
        (475831 'end of statement')
        (457896 'move' i[457894] _indexOfInterest[457868])
        (475832 'end of statement' i[457894])
        unknown yret[511007] "YVV" "temp"
        (511010 'move' yret[511007](511009 'deref' i[457894]))
        (511012 yield yret[511007])
        (475834 'end of statement' i[457894])
        label _continueLabel[457901]
        _indexOfInterest[457868]
        _iterator[457870]
      }
      label _breakLabel[457903]
    }
    (511005 return ret[511003])
  }
  function chpl_direct_counted_range_iter[457795](arg low[457802] :
  (457799 call int(64)[13] 16), arg count[457808] :
  (457806 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511016] "RVV" "temp"
    {
      unknown _indexOfInterest[457812] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457814] "expr temp" "temp"
      unknown call_tmp[624334] "expr temp" "maybe param" "maybe type" "temp"
      (624337 'move' call_tmp[624334](457821 call chpl_direct_counted_range_iter_helper low[457802] count[457808]))
      (457816 'move' _iterator[457814](457819 call _getIterator call_tmp[624334]))
      Defer
      {
        {
          (457826 call _freeIterator _iterator[457814])
        }
      }
      { scopeless type
        (457830 'move' _indexOfInterest[457812](457833 call iteratorIndex _iterator[457814]))
      }
      ForLoop[457835]
      {
        unknown i[457838] "index var" "insert auto destroy"
        (475837 'end of statement')
        (457840 'move' i[457838] _indexOfInterest[457812])
        (475838 'end of statement' i[457838])
        unknown yret[511020] "YVV" "temp"
        (511023 'move' yret[511020](511022 'deref' i[457838]))
        (511025 yield yret[511020])
        (475840 'end of statement' i[457838])
        label _continueLabel[457845]
        _indexOfInterest[457812]
        _iterator[457814]
      }
      label _breakLabel[457847]
    }
    (511018 return ret[511016])
  }
  function chpl_direct_counted_range_iter[457739](arg low[457746] :
  (457743 call int(64)[13] 8), arg count[457752] :
  (457750 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511029] "RVV" "temp"
    {
      unknown _indexOfInterest[457756] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457758] "expr temp" "temp"
      unknown call_tmp[624339] "expr temp" "maybe param" "maybe type" "temp"
      (624342 'move' call_tmp[624339](457765 call chpl_direct_counted_range_iter_helper low[457746] count[457752]))
      (457760 'move' _iterator[457758](457763 call _getIterator call_tmp[624339]))
      Defer
      {
        {
          (457770 call _freeIterator _iterator[457758])
        }
      }
      { scopeless type
        (457774 'move' _indexOfInterest[457756](457777 call iteratorIndex _iterator[457758]))
      }
      ForLoop[457779]
      {
        unknown i[457782] "index var" "insert auto destroy"
        (475843 'end of statement')
        (457784 'move' i[457782] _indexOfInterest[457756])
        (475844 'end of statement' i[457782])
        unknown yret[511033] "YVV" "temp"
        (511036 'move' yret[511033](511035 'deref' i[457782]))
        (511038 yield yret[511033])
        (475846 'end of statement' i[457782])
        label _continueLabel[457789]
        _indexOfInterest[457756]
        _iterator[457758]
      }
      label _breakLabel[457791]
    }
    (511031 return ret[511029])
  }
  function chpl_direct_counted_range_iter[458131](arg low[458138] :
  (458135 call int(64)[13] 64), arg count[458144] :
  (458142 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511042] "RVV" "temp"
    {
      unknown _indexOfInterest[458148] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458150] "expr temp" "temp"
      unknown call_tmp[624344] "expr temp" "maybe param" "maybe type" "temp"
      (624347 'move' call_tmp[624344](458157 call chpl_direct_counted_range_iter_helper low[458138] count[458144]))
      (458152 'move' _iterator[458150](458155 call _getIterator call_tmp[624344]))
      Defer
      {
        {
          (458162 call _freeIterator _iterator[458150])
        }
      }
      { scopeless type
        (458166 'move' _indexOfInterest[458148](458169 call iteratorIndex _iterator[458150]))
      }
      ForLoop[458171]
      {
        unknown i[458174] "index var" "insert auto destroy"
        (475849 'end of statement')
        (458176 'move' i[458174] _indexOfInterest[458148])
        (475850 'end of statement' i[458174])
        unknown yret[511046] "YVV" "temp"
        (511049 'move' yret[511046](511048 'deref' i[458174]))
        (511051 yield yret[511046])
        (475852 'end of statement' i[458174])
        label _continueLabel[458181]
        _indexOfInterest[458148]
        _iterator[458150]
      }
      label _breakLabel[458183]
    }
    (511044 return ret[511042])
  }
  function chpl_direct_counted_range_iter[458075](arg low[458082] :
  (458079 call int(64)[13] 32), arg count[458088] :
  (458086 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511055] "RVV" "temp"
    {
      unknown _indexOfInterest[458092] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458094] "expr temp" "temp"
      unknown call_tmp[624349] "expr temp" "maybe param" "maybe type" "temp"
      (624352 'move' call_tmp[624349](458101 call chpl_direct_counted_range_iter_helper low[458082] count[458088]))
      (458096 'move' _iterator[458094](458099 call _getIterator call_tmp[624349]))
      Defer
      {
        {
          (458106 call _freeIterator _iterator[458094])
        }
      }
      { scopeless type
        (458110 'move' _indexOfInterest[458092](458113 call iteratorIndex _iterator[458094]))
      }
      ForLoop[458115]
      {
        unknown i[458118] "index var" "insert auto destroy"
        (475855 'end of statement')
        (458120 'move' i[458118] _indexOfInterest[458092])
        (475856 'end of statement' i[458118])
        unknown yret[511059] "YVV" "temp"
        (511062 'move' yret[511059](511061 'deref' i[458118]))
        (511064 yield yret[511059])
        (475858 'end of statement' i[458118])
        label _continueLabel[458125]
        _indexOfInterest[458092]
        _iterator[458094]
      }
      label _breakLabel[458127]
    }
    (511057 return ret[511055])
  }
  function chpl_direct_counted_range_iter[458019](arg low[458026] :
  (458023 call int(64)[13] 16), arg count[458032] :
  (458030 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511068] "RVV" "temp"
    {
      unknown _indexOfInterest[458036] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458038] "expr temp" "temp"
      unknown call_tmp[624354] "expr temp" "maybe param" "maybe type" "temp"
      (624357 'move' call_tmp[624354](458045 call chpl_direct_counted_range_iter_helper low[458026] count[458032]))
      (458040 'move' _iterator[458038](458043 call _getIterator call_tmp[624354]))
      Defer
      {
        {
          (458050 call _freeIterator _iterator[458038])
        }
      }
      { scopeless type
        (458054 'move' _indexOfInterest[458036](458057 call iteratorIndex _iterator[458038]))
      }
      ForLoop[458059]
      {
        unknown i[458062] "index var" "insert auto destroy"
        (475861 'end of statement')
        (458064 'move' i[458062] _indexOfInterest[458036])
        (475862 'end of statement' i[458062])
        unknown yret[511072] "YVV" "temp"
        (511075 'move' yret[511072](511074 'deref' i[458062]))
        (511077 yield yret[511072])
        (475864 'end of statement' i[458062])
        label _continueLabel[458069]
        _indexOfInterest[458036]
        _iterator[458038]
      }
      label _breakLabel[458071]
    }
    (511070 return ret[511068])
  }
  function chpl_direct_counted_range_iter[457963](arg low[457970] :
  (457967 call int(64)[13] 8), arg count[457976] :
  (457974 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511081] "RVV" "temp"
    {
      unknown _indexOfInterest[457980] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[457982] "expr temp" "temp"
      unknown call_tmp[624359] "expr temp" "maybe param" "maybe type" "temp"
      (624362 'move' call_tmp[624359](457989 call chpl_direct_counted_range_iter_helper low[457970] count[457976]))
      (457984 'move' _iterator[457982](457987 call _getIterator call_tmp[624359]))
      Defer
      {
        {
          (457994 call _freeIterator _iterator[457982])
        }
      }
      { scopeless type
        (457998 'move' _indexOfInterest[457980](458001 call iteratorIndex _iterator[457982]))
      }
      ForLoop[458003]
      {
        unknown i[458006] "index var" "insert auto destroy"
        (475867 'end of statement')
        (458008 'move' i[458006] _indexOfInterest[457980])
        (475868 'end of statement' i[458006])
        unknown yret[511085] "YVV" "temp"
        (511088 'move' yret[511085](511087 'deref' i[458006]))
        (511090 yield yret[511085])
        (475870 'end of statement' i[458006])
        label _continueLabel[458013]
        _indexOfInterest[457980]
        _iterator[457982]
      }
      label _breakLabel[458015]
    }
    (511083 return ret[511081])
  }
  function chpl_direct_counted_range_iter[458355](arg low[458362] :
  (458359 call uint(64)[115] 64), arg count[458368] :
  (458366 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511094] "RVV" "temp"
    {
      unknown _indexOfInterest[458372] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458374] "expr temp" "temp"
      unknown call_tmp[624364] "expr temp" "maybe param" "maybe type" "temp"
      (624367 'move' call_tmp[624364](458381 call chpl_direct_counted_range_iter_helper low[458362] count[458368]))
      (458376 'move' _iterator[458374](458379 call _getIterator call_tmp[624364]))
      Defer
      {
        {
          (458386 call _freeIterator _iterator[458374])
        }
      }
      { scopeless type
        (458390 'move' _indexOfInterest[458372](458393 call iteratorIndex _iterator[458374]))
      }
      ForLoop[458395]
      {
        unknown i[458398] "index var" "insert auto destroy"
        (475873 'end of statement')
        (458400 'move' i[458398] _indexOfInterest[458372])
        (475874 'end of statement' i[458398])
        unknown yret[511098] "YVV" "temp"
        (511101 'move' yret[511098](511100 'deref' i[458398]))
        (511103 yield yret[511098])
        (475876 'end of statement' i[458398])
        label _continueLabel[458405]
        _indexOfInterest[458372]
        _iterator[458374]
      }
      label _breakLabel[458407]
    }
    (511096 return ret[511094])
  }
  function chpl_direct_counted_range_iter[458299](arg low[458306] :
  (458303 call uint(64)[115] 32), arg count[458312] :
  (458310 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511107] "RVV" "temp"
    {
      unknown _indexOfInterest[458316] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458318] "expr temp" "temp"
      unknown call_tmp[624369] "expr temp" "maybe param" "maybe type" "temp"
      (624372 'move' call_tmp[624369](458325 call chpl_direct_counted_range_iter_helper low[458306] count[458312]))
      (458320 'move' _iterator[458318](458323 call _getIterator call_tmp[624369]))
      Defer
      {
        {
          (458330 call _freeIterator _iterator[458318])
        }
      }
      { scopeless type
        (458334 'move' _indexOfInterest[458316](458337 call iteratorIndex _iterator[458318]))
      }
      ForLoop[458339]
      {
        unknown i[458342] "index var" "insert auto destroy"
        (475879 'end of statement')
        (458344 'move' i[458342] _indexOfInterest[458316])
        (475880 'end of statement' i[458342])
        unknown yret[511111] "YVV" "temp"
        (511114 'move' yret[511111](511113 'deref' i[458342]))
        (511116 yield yret[511111])
        (475882 'end of statement' i[458342])
        label _continueLabel[458349]
        _indexOfInterest[458316]
        _iterator[458318]
      }
      label _breakLabel[458351]
    }
    (511109 return ret[511107])
  }
  function chpl_direct_counted_range_iter[458243](arg low[458250] :
  (458247 call uint(64)[115] 16), arg count[458256] :
  (458254 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511120] "RVV" "temp"
    {
      unknown _indexOfInterest[458260] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458262] "expr temp" "temp"
      unknown call_tmp[624374] "expr temp" "maybe param" "maybe type" "temp"
      (624377 'move' call_tmp[624374](458269 call chpl_direct_counted_range_iter_helper low[458250] count[458256]))
      (458264 'move' _iterator[458262](458267 call _getIterator call_tmp[624374]))
      Defer
      {
        {
          (458274 call _freeIterator _iterator[458262])
        }
      }
      { scopeless type
        (458278 'move' _indexOfInterest[458260](458281 call iteratorIndex _iterator[458262]))
      }
      ForLoop[458283]
      {
        unknown i[458286] "index var" "insert auto destroy"
        (475885 'end of statement')
        (458288 'move' i[458286] _indexOfInterest[458260])
        (475886 'end of statement' i[458286])
        unknown yret[511124] "YVV" "temp"
        (511127 'move' yret[511124](511126 'deref' i[458286]))
        (511129 yield yret[511124])
        (475888 'end of statement' i[458286])
        label _continueLabel[458293]
        _indexOfInterest[458260]
        _iterator[458262]
      }
      label _breakLabel[458295]
    }
    (511122 return ret[511120])
  }
  function chpl_direct_counted_range_iter[458187](arg low[458194] :
  (458191 call uint(64)[115] 8), arg count[458200] :
  (458198 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511133] "RVV" "temp"
    {
      unknown _indexOfInterest[458204] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458206] "expr temp" "temp"
      unknown call_tmp[624379] "expr temp" "maybe param" "maybe type" "temp"
      (624382 'move' call_tmp[624379](458213 call chpl_direct_counted_range_iter_helper low[458194] count[458200]))
      (458208 'move' _iterator[458206](458211 call _getIterator call_tmp[624379]))
      Defer
      {
        {
          (458218 call _freeIterator _iterator[458206])
        }
      }
      { scopeless type
        (458222 'move' _indexOfInterest[458204](458225 call iteratorIndex _iterator[458206]))
      }
      ForLoop[458227]
      {
        unknown i[458230] "index var" "insert auto destroy"
        (475891 'end of statement')
        (458232 'move' i[458230] _indexOfInterest[458204])
        (475892 'end of statement' i[458230])
        unknown yret[511137] "YVV" "temp"
        (511140 'move' yret[511137](511139 'deref' i[458230]))
        (511142 yield yret[511137])
        (475894 'end of statement' i[458230])
        label _continueLabel[458237]
        _indexOfInterest[458204]
        _iterator[458206]
      }
      label _breakLabel[458239]
    }
    (511135 return ret[511133])
  }
  function chpl_direct_counted_range_iter[458579](arg low[458586] :
  (458583 call uint(64)[115] 64), arg count[458592] :
  (458590 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511146] "RVV" "temp"
    {
      unknown _indexOfInterest[458596] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458598] "expr temp" "temp"
      unknown call_tmp[624384] "expr temp" "maybe param" "maybe type" "temp"
      (624387 'move' call_tmp[624384](458605 call chpl_direct_counted_range_iter_helper low[458586] count[458592]))
      (458600 'move' _iterator[458598](458603 call _getIterator call_tmp[624384]))
      Defer
      {
        {
          (458610 call _freeIterator _iterator[458598])
        }
      }
      { scopeless type
        (458614 'move' _indexOfInterest[458596](458617 call iteratorIndex _iterator[458598]))
      }
      ForLoop[458619]
      {
        unknown i[458622] "index var" "insert auto destroy"
        (475897 'end of statement')
        (458624 'move' i[458622] _indexOfInterest[458596])
        (475898 'end of statement' i[458622])
        unknown yret[511150] "YVV" "temp"
        (511153 'move' yret[511150](511152 'deref' i[458622]))
        (511155 yield yret[511150])
        (475900 'end of statement' i[458622])
        label _continueLabel[458629]
        _indexOfInterest[458596]
        _iterator[458598]
      }
      label _breakLabel[458631]
    }
    (511148 return ret[511146])
  }
  function chpl_direct_counted_range_iter[458523](arg low[458530] :
  (458527 call uint(64)[115] 32), arg count[458536] :
  (458534 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511159] "RVV" "temp"
    {
      unknown _indexOfInterest[458540] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458542] "expr temp" "temp"
      unknown call_tmp[624389] "expr temp" "maybe param" "maybe type" "temp"
      (624392 'move' call_tmp[624389](458549 call chpl_direct_counted_range_iter_helper low[458530] count[458536]))
      (458544 'move' _iterator[458542](458547 call _getIterator call_tmp[624389]))
      Defer
      {
        {
          (458554 call _freeIterator _iterator[458542])
        }
      }
      { scopeless type
        (458558 'move' _indexOfInterest[458540](458561 call iteratorIndex _iterator[458542]))
      }
      ForLoop[458563]
      {
        unknown i[458566] "index var" "insert auto destroy"
        (475903 'end of statement')
        (458568 'move' i[458566] _indexOfInterest[458540])
        (475904 'end of statement' i[458566])
        unknown yret[511163] "YVV" "temp"
        (511166 'move' yret[511163](511165 'deref' i[458566]))
        (511168 yield yret[511163])
        (475906 'end of statement' i[458566])
        label _continueLabel[458573]
        _indexOfInterest[458540]
        _iterator[458542]
      }
      label _breakLabel[458575]
    }
    (511161 return ret[511159])
  }
  function chpl_direct_counted_range_iter[458467](arg low[458474] :
  (458471 call uint(64)[115] 16), arg count[458480] :
  (458478 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511172] "RVV" "temp"
    {
      unknown _indexOfInterest[458484] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458486] "expr temp" "temp"
      unknown call_tmp[624394] "expr temp" "maybe param" "maybe type" "temp"
      (624397 'move' call_tmp[624394](458493 call chpl_direct_counted_range_iter_helper low[458474] count[458480]))
      (458488 'move' _iterator[458486](458491 call _getIterator call_tmp[624394]))
      Defer
      {
        {
          (458498 call _freeIterator _iterator[458486])
        }
      }
      { scopeless type
        (458502 'move' _indexOfInterest[458484](458505 call iteratorIndex _iterator[458486]))
      }
      ForLoop[458507]
      {
        unknown i[458510] "index var" "insert auto destroy"
        (475909 'end of statement')
        (458512 'move' i[458510] _indexOfInterest[458484])
        (475910 'end of statement' i[458510])
        unknown yret[511176] "YVV" "temp"
        (511179 'move' yret[511176](511178 'deref' i[458510]))
        (511181 yield yret[511176])
        (475912 'end of statement' i[458510])
        label _continueLabel[458517]
        _indexOfInterest[458484]
        _iterator[458486]
      }
      label _breakLabel[458519]
    }
    (511174 return ret[511172])
  }
  function chpl_direct_counted_range_iter[458411](arg low[458418] :
  (458415 call uint(64)[115] 8), arg count[458424] :
  (458422 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511185] "RVV" "temp"
    {
      unknown _indexOfInterest[458428] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458430] "expr temp" "temp"
      unknown call_tmp[624399] "expr temp" "maybe param" "maybe type" "temp"
      (624402 'move' call_tmp[624399](458437 call chpl_direct_counted_range_iter_helper low[458418] count[458424]))
      (458432 'move' _iterator[458430](458435 call _getIterator call_tmp[624399]))
      Defer
      {
        {
          (458442 call _freeIterator _iterator[458430])
        }
      }
      { scopeless type
        (458446 'move' _indexOfInterest[458428](458449 call iteratorIndex _iterator[458430]))
      }
      ForLoop[458451]
      {
        unknown i[458454] "index var" "insert auto destroy"
        (475915 'end of statement')
        (458456 'move' i[458454] _indexOfInterest[458428])
        (475916 'end of statement' i[458454])
        unknown yret[511189] "YVV" "temp"
        (511192 'move' yret[511189](511191 'deref' i[458454]))
        (511194 yield yret[511189])
        (475918 'end of statement' i[458454])
        label _continueLabel[458461]
        _indexOfInterest[458428]
        _iterator[458430]
      }
      label _breakLabel[458463]
    }
    (511187 return ret[511185])
  }
  function chpl_direct_counted_range_iter[458815](arg low[458819]:enum[187](?), arg count[458826] :
  (458823 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511198] "RVV" "temp"
    unknown call_tmp[624404] "maybe param" "maybe type" "temp"
    (624407 'move' call_tmp[624404](458831 call chpl_build_low_bounded_range low[458819]))
    const r[458829] "dead at end of block" "const" "insert auto destroy"
    (541127 'init var' r[458829] call_tmp[624404])
    (458834 'end of statement')
    {
      unknown _indexOfInterest[458836] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458838] "expr temp" "temp"
      unknown call_tmp[624409] "expr temp" "maybe param" "maybe type" "temp"
      (624412 'move' call_tmp[624409](458845 call # r[458829] count[458826]))
      (458840 'move' _iterator[458838](458843 call _getIterator call_tmp[624409]))
      Defer
      {
        {
          (458850 call _freeIterator _iterator[458838])
        }
      }
      { scopeless type
        (458854 'move' _indexOfInterest[458836](458857 call iteratorIndex _iterator[458838]))
      }
      ForLoop[458859]
      {
        unknown i[458862] "index var" "insert auto destroy"
        (475921 'end of statement')
        (458864 'move' i[458862] _indexOfInterest[458836])
        (475922 'end of statement' i[458862])
        unknown yret[511202] "YVV" "temp"
        (511205 'move' yret[511202](511204 'deref' i[458862]))
        (511207 yield yret[511202])
        (475924 'end of statement' i[458862])
        label _continueLabel[458869]
        _indexOfInterest[458836]
        _iterator[458838]
      }
      label _breakLabel[458871]
    }
    (511200 return ret[511198])
  }
  function chpl_direct_counted_range_iter[458755](arg low[458759]:enum[187](?), arg count[458766] :
  (458763 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511211] "RVV" "temp"
    unknown call_tmp[624414] "maybe param" "maybe type" "temp"
    (624417 'move' call_tmp[624414](458771 call chpl_build_low_bounded_range low[458759]))
    const r[458769] "dead at end of block" "const" "insert auto destroy"
    (541129 'init var' r[458769] call_tmp[624414])
    (458774 'end of statement')
    {
      unknown _indexOfInterest[458776] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458778] "expr temp" "temp"
      unknown call_tmp[624419] "expr temp" "maybe param" "maybe type" "temp"
      (624422 'move' call_tmp[624419](458785 call # r[458769] count[458766]))
      (458780 'move' _iterator[458778](458783 call _getIterator call_tmp[624419]))
      Defer
      {
        {
          (458790 call _freeIterator _iterator[458778])
        }
      }
      { scopeless type
        (458794 'move' _indexOfInterest[458776](458797 call iteratorIndex _iterator[458778]))
      }
      ForLoop[458799]
      {
        unknown i[458802] "index var" "insert auto destroy"
        (475927 'end of statement')
        (458804 'move' i[458802] _indexOfInterest[458776])
        (475928 'end of statement' i[458802])
        unknown yret[511215] "YVV" "temp"
        (511218 'move' yret[511215](511217 'deref' i[458802]))
        (511220 yield yret[511215])
        (475930 'end of statement' i[458802])
        label _continueLabel[458809]
        _indexOfInterest[458776]
        _iterator[458778]
      }
      label _breakLabel[458811]
    }
    (511213 return ret[511211])
  }
  function chpl_direct_counted_range_iter[458695](arg low[458699]:enum[187](?), arg count[458706] :
  (458703 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511224] "RVV" "temp"
    unknown call_tmp[624424] "maybe param" "maybe type" "temp"
    (624427 'move' call_tmp[624424](458711 call chpl_build_low_bounded_range low[458699]))
    const r[458709] "dead at end of block" "const" "insert auto destroy"
    (541131 'init var' r[458709] call_tmp[624424])
    (458714 'end of statement')
    {
      unknown _indexOfInterest[458716] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458718] "expr temp" "temp"
      unknown call_tmp[624429] "expr temp" "maybe param" "maybe type" "temp"
      (624432 'move' call_tmp[624429](458725 call # r[458709] count[458706]))
      (458720 'move' _iterator[458718](458723 call _getIterator call_tmp[624429]))
      Defer
      {
        {
          (458730 call _freeIterator _iterator[458718])
        }
      }
      { scopeless type
        (458734 'move' _indexOfInterest[458716](458737 call iteratorIndex _iterator[458718]))
      }
      ForLoop[458739]
      {
        unknown i[458742] "index var" "insert auto destroy"
        (475933 'end of statement')
        (458744 'move' i[458742] _indexOfInterest[458716])
        (475934 'end of statement' i[458742])
        unknown yret[511228] "YVV" "temp"
        (511231 'move' yret[511228](511230 'deref' i[458742]))
        (511233 yield yret[511228])
        (475936 'end of statement' i[458742])
        label _continueLabel[458749]
        _indexOfInterest[458716]
        _iterator[458718]
      }
      label _breakLabel[458751]
    }
    (511226 return ret[511224])
  }
  function chpl_direct_counted_range_iter[458635](arg low[458639]:enum[187](?), arg count[458646] :
  (458643 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511237] "RVV" "temp"
    unknown call_tmp[624434] "maybe param" "maybe type" "temp"
    (624437 'move' call_tmp[624434](458651 call chpl_build_low_bounded_range low[458639]))
    const r[458649] "dead at end of block" "const" "insert auto destroy"
    (541133 'init var' r[458649] call_tmp[624434])
    (458654 'end of statement')
    {
      unknown _indexOfInterest[458656] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458658] "expr temp" "temp"
      unknown call_tmp[624439] "expr temp" "maybe param" "maybe type" "temp"
      (624442 'move' call_tmp[624439](458665 call # r[458649] count[458646]))
      (458660 'move' _iterator[458658](458663 call _getIterator call_tmp[624439]))
      Defer
      {
        {
          (458670 call _freeIterator _iterator[458658])
        }
      }
      { scopeless type
        (458674 'move' _indexOfInterest[458656](458677 call iteratorIndex _iterator[458658]))
      }
      ForLoop[458679]
      {
        unknown i[458682] "index var" "insert auto destroy"
        (475939 'end of statement')
        (458684 'move' i[458682] _indexOfInterest[458656])
        (475940 'end of statement' i[458682])
        unknown yret[511241] "YVV" "temp"
        (511244 'move' yret[511241](511243 'deref' i[458682]))
        (511246 yield yret[511241])
        (475942 'end of statement' i[458682])
        label _continueLabel[458689]
        _indexOfInterest[458656]
        _iterator[458658]
      }
      label _breakLabel[458691]
    }
    (511239 return ret[511237])
  }
  function chpl_direct_counted_range_iter[459055](arg low[459059]:enum[187](?), arg count[459066] :
  (459063 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511250] "RVV" "temp"
    unknown call_tmp[624444] "maybe param" "maybe type" "temp"
    (624447 'move' call_tmp[624444](459071 call chpl_build_low_bounded_range low[459059]))
    const r[459069] "dead at end of block" "const" "insert auto destroy"
    (541135 'init var' r[459069] call_tmp[624444])
    (459074 'end of statement')
    {
      unknown _indexOfInterest[459076] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459078] "expr temp" "temp"
      unknown call_tmp[624449] "expr temp" "maybe param" "maybe type" "temp"
      (624452 'move' call_tmp[624449](459085 call # r[459069] count[459066]))
      (459080 'move' _iterator[459078](459083 call _getIterator call_tmp[624449]))
      Defer
      {
        {
          (459090 call _freeIterator _iterator[459078])
        }
      }
      { scopeless type
        (459094 'move' _indexOfInterest[459076](459097 call iteratorIndex _iterator[459078]))
      }
      ForLoop[459099]
      {
        unknown i[459102] "index var" "insert auto destroy"
        (475945 'end of statement')
        (459104 'move' i[459102] _indexOfInterest[459076])
        (475946 'end of statement' i[459102])
        unknown yret[511254] "YVV" "temp"
        (511257 'move' yret[511254](511256 'deref' i[459102]))
        (511259 yield yret[511254])
        (475948 'end of statement' i[459102])
        label _continueLabel[459109]
        _indexOfInterest[459076]
        _iterator[459078]
      }
      label _breakLabel[459111]
    }
    (511252 return ret[511250])
  }
  function chpl_direct_counted_range_iter[458995](arg low[458999]:enum[187](?), arg count[459006] :
  (459003 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511263] "RVV" "temp"
    unknown call_tmp[624454] "maybe param" "maybe type" "temp"
    (624457 'move' call_tmp[624454](459011 call chpl_build_low_bounded_range low[458999]))
    const r[459009] "dead at end of block" "const" "insert auto destroy"
    (541137 'init var' r[459009] call_tmp[624454])
    (459014 'end of statement')
    {
      unknown _indexOfInterest[459016] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459018] "expr temp" "temp"
      unknown call_tmp[624459] "expr temp" "maybe param" "maybe type" "temp"
      (624462 'move' call_tmp[624459](459025 call # r[459009] count[459006]))
      (459020 'move' _iterator[459018](459023 call _getIterator call_tmp[624459]))
      Defer
      {
        {
          (459030 call _freeIterator _iterator[459018])
        }
      }
      { scopeless type
        (459034 'move' _indexOfInterest[459016](459037 call iteratorIndex _iterator[459018]))
      }
      ForLoop[459039]
      {
        unknown i[459042] "index var" "insert auto destroy"
        (475951 'end of statement')
        (459044 'move' i[459042] _indexOfInterest[459016])
        (475952 'end of statement' i[459042])
        unknown yret[511267] "YVV" "temp"
        (511270 'move' yret[511267](511269 'deref' i[459042]))
        (511272 yield yret[511267])
        (475954 'end of statement' i[459042])
        label _continueLabel[459049]
        _indexOfInterest[459016]
        _iterator[459018]
      }
      label _breakLabel[459051]
    }
    (511265 return ret[511263])
  }
  function chpl_direct_counted_range_iter[458935](arg low[458939]:enum[187](?), arg count[458946] :
  (458943 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511276] "RVV" "temp"
    unknown call_tmp[624464] "maybe param" "maybe type" "temp"
    (624467 'move' call_tmp[624464](458951 call chpl_build_low_bounded_range low[458939]))
    const r[458949] "dead at end of block" "const" "insert auto destroy"
    (541139 'init var' r[458949] call_tmp[624464])
    (458954 'end of statement')
    {
      unknown _indexOfInterest[458956] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458958] "expr temp" "temp"
      unknown call_tmp[624469] "expr temp" "maybe param" "maybe type" "temp"
      (624472 'move' call_tmp[624469](458965 call # r[458949] count[458946]))
      (458960 'move' _iterator[458958](458963 call _getIterator call_tmp[624469]))
      Defer
      {
        {
          (458970 call _freeIterator _iterator[458958])
        }
      }
      { scopeless type
        (458974 'move' _indexOfInterest[458956](458977 call iteratorIndex _iterator[458958]))
      }
      ForLoop[458979]
      {
        unknown i[458982] "index var" "insert auto destroy"
        (475957 'end of statement')
        (458984 'move' i[458982] _indexOfInterest[458956])
        (475958 'end of statement' i[458982])
        unknown yret[511280] "YVV" "temp"
        (511283 'move' yret[511280](511282 'deref' i[458982]))
        (511285 yield yret[511280])
        (475960 'end of statement' i[458982])
        label _continueLabel[458989]
        _indexOfInterest[458956]
        _iterator[458958]
      }
      label _breakLabel[458991]
    }
    (511278 return ret[511276])
  }
  function chpl_direct_counted_range_iter[458875](arg low[458879]:enum[187](?), arg count[458886] :
  (458883 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511289] "RVV" "temp"
    unknown call_tmp[624474] "maybe param" "maybe type" "temp"
    (624477 'move' call_tmp[624474](458891 call chpl_build_low_bounded_range low[458879]))
    const r[458889] "dead at end of block" "const" "insert auto destroy"
    (541141 'init var' r[458889] call_tmp[624474])
    (458894 'end of statement')
    {
      unknown _indexOfInterest[458896] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[458898] "expr temp" "temp"
      unknown call_tmp[624479] "expr temp" "maybe param" "maybe type" "temp"
      (624482 'move' call_tmp[624479](458905 call # r[458889] count[458886]))
      (458900 'move' _iterator[458898](458903 call _getIterator call_tmp[624479]))
      Defer
      {
        {
          (458910 call _freeIterator _iterator[458898])
        }
      }
      { scopeless type
        (458914 'move' _indexOfInterest[458896](458917 call iteratorIndex _iterator[458898]))
      }
      ForLoop[458919]
      {
        unknown i[458922] "index var" "insert auto destroy"
        (475963 'end of statement')
        (458924 'move' i[458922] _indexOfInterest[458896])
        (475964 'end of statement' i[458922])
        unknown yret[511293] "YVV" "temp"
        (511296 'move' yret[511293](511295 'deref' i[458922]))
        (511298 yield yret[511293])
        (475966 'end of statement' i[458922])
        label _continueLabel[458929]
        _indexOfInterest[458896]
        _iterator[458898]
      }
      label _breakLabel[458931]
    }
    (511291 return ret[511289])
  }
  function chpl_direct_counted_range_iter[459295](arg low[459299]:bool[10], arg count[459306] :
  (459303 call int(64)[13] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511302] "RVV" "temp"
    unknown call_tmp[624484] "maybe param" "maybe type" "temp"
    (624487 'move' call_tmp[624484](459311 call chpl_build_low_bounded_range low[459299]))
    const r[459309] "dead at end of block" "const" "insert auto destroy"
    (541143 'init var' r[459309] call_tmp[624484])
    (459314 'end of statement')
    {
      unknown _indexOfInterest[459316] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459318] "expr temp" "temp"
      unknown call_tmp[624489] "expr temp" "maybe param" "maybe type" "temp"
      (624492 'move' call_tmp[624489](459325 call # r[459309] count[459306]))
      (459320 'move' _iterator[459318](459323 call _getIterator call_tmp[624489]))
      Defer
      {
        {
          (459330 call _freeIterator _iterator[459318])
        }
      }
      { scopeless type
        (459334 'move' _indexOfInterest[459316](459337 call iteratorIndex _iterator[459318]))
      }
      ForLoop[459339]
      {
        unknown i[459342] "index var" "insert auto destroy"
        (475969 'end of statement')
        (459344 'move' i[459342] _indexOfInterest[459316])
        (475970 'end of statement' i[459342])
        unknown yret[511306] "YVV" "temp"
        (511309 'move' yret[511306](511308 'deref' i[459342]))
        (511311 yield yret[511306])
        (475972 'end of statement' i[459342])
        label _continueLabel[459349]
        _indexOfInterest[459316]
        _iterator[459318]
      }
      label _breakLabel[459351]
    }
    (511304 return ret[511302])
  }
  function chpl_direct_counted_range_iter[459235](arg low[459239]:bool[10], arg count[459246] :
  (459243 call int(64)[13] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511315] "RVV" "temp"
    unknown call_tmp[624494] "maybe param" "maybe type" "temp"
    (624497 'move' call_tmp[624494](459251 call chpl_build_low_bounded_range low[459239]))
    const r[459249] "dead at end of block" "const" "insert auto destroy"
    (541145 'init var' r[459249] call_tmp[624494])
    (459254 'end of statement')
    {
      unknown _indexOfInterest[459256] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459258] "expr temp" "temp"
      unknown call_tmp[624499] "expr temp" "maybe param" "maybe type" "temp"
      (624502 'move' call_tmp[624499](459265 call # r[459249] count[459246]))
      (459260 'move' _iterator[459258](459263 call _getIterator call_tmp[624499]))
      Defer
      {
        {
          (459270 call _freeIterator _iterator[459258])
        }
      }
      { scopeless type
        (459274 'move' _indexOfInterest[459256](459277 call iteratorIndex _iterator[459258]))
      }
      ForLoop[459279]
      {
        unknown i[459282] "index var" "insert auto destroy"
        (475975 'end of statement')
        (459284 'move' i[459282] _indexOfInterest[459256])
        (475976 'end of statement' i[459282])
        unknown yret[511319] "YVV" "temp"
        (511322 'move' yret[511319](511321 'deref' i[459282]))
        (511324 yield yret[511319])
        (475978 'end of statement' i[459282])
        label _continueLabel[459289]
        _indexOfInterest[459256]
        _iterator[459258]
      }
      label _breakLabel[459291]
    }
    (511317 return ret[511315])
  }
  function chpl_direct_counted_range_iter[459175](arg low[459179]:bool[10], arg count[459186] :
  (459183 call int(64)[13] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511328] "RVV" "temp"
    unknown call_tmp[624504] "maybe param" "maybe type" "temp"
    (624507 'move' call_tmp[624504](459191 call chpl_build_low_bounded_range low[459179]))
    const r[459189] "dead at end of block" "const" "insert auto destroy"
    (541147 'init var' r[459189] call_tmp[624504])
    (459194 'end of statement')
    {
      unknown _indexOfInterest[459196] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459198] "expr temp" "temp"
      unknown call_tmp[624509] "expr temp" "maybe param" "maybe type" "temp"
      (624512 'move' call_tmp[624509](459205 call # r[459189] count[459186]))
      (459200 'move' _iterator[459198](459203 call _getIterator call_tmp[624509]))
      Defer
      {
        {
          (459210 call _freeIterator _iterator[459198])
        }
      }
      { scopeless type
        (459214 'move' _indexOfInterest[459196](459217 call iteratorIndex _iterator[459198]))
      }
      ForLoop[459219]
      {
        unknown i[459222] "index var" "insert auto destroy"
        (475981 'end of statement')
        (459224 'move' i[459222] _indexOfInterest[459196])
        (475982 'end of statement' i[459222])
        unknown yret[511332] "YVV" "temp"
        (511335 'move' yret[511332](511334 'deref' i[459222]))
        (511337 yield yret[511332])
        (475984 'end of statement' i[459222])
        label _continueLabel[459229]
        _indexOfInterest[459196]
        _iterator[459198]
      }
      label _breakLabel[459231]
    }
    (511330 return ret[511328])
  }
  function chpl_direct_counted_range_iter[459115](arg low[459119]:bool[10], arg count[459126] :
  (459123 call int(64)[13] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511341] "RVV" "temp"
    unknown call_tmp[624514] "maybe param" "maybe type" "temp"
    (624517 'move' call_tmp[624514](459131 call chpl_build_low_bounded_range low[459119]))
    const r[459129] "dead at end of block" "const" "insert auto destroy"
    (541149 'init var' r[459129] call_tmp[624514])
    (459134 'end of statement')
    {
      unknown _indexOfInterest[459136] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459138] "expr temp" "temp"
      unknown call_tmp[624519] "expr temp" "maybe param" "maybe type" "temp"
      (624522 'move' call_tmp[624519](459145 call # r[459129] count[459126]))
      (459140 'move' _iterator[459138](459143 call _getIterator call_tmp[624519]))
      Defer
      {
        {
          (459150 call _freeIterator _iterator[459138])
        }
      }
      { scopeless type
        (459154 'move' _indexOfInterest[459136](459157 call iteratorIndex _iterator[459138]))
      }
      ForLoop[459159]
      {
        unknown i[459162] "index var" "insert auto destroy"
        (475987 'end of statement')
        (459164 'move' i[459162] _indexOfInterest[459136])
        (475988 'end of statement' i[459162])
        unknown yret[511345] "YVV" "temp"
        (511348 'move' yret[511345](511347 'deref' i[459162]))
        (511350 yield yret[511345])
        (475990 'end of statement' i[459162])
        label _continueLabel[459169]
        _indexOfInterest[459136]
        _iterator[459138]
      }
      label _breakLabel[459171]
    }
    (511343 return ret[511341])
  }
  function chpl_direct_counted_range_iter[459535](arg low[459539]:bool[10], arg count[459546] :
  (459543 call uint(64)[115] 64)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511354] "RVV" "temp"
    unknown call_tmp[624524] "maybe param" "maybe type" "temp"
    (624527 'move' call_tmp[624524](459551 call chpl_build_low_bounded_range low[459539]))
    const r[459549] "dead at end of block" "const" "insert auto destroy"
    (541151 'init var' r[459549] call_tmp[624524])
    (459554 'end of statement')
    {
      unknown _indexOfInterest[459556] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459558] "expr temp" "temp"
      unknown call_tmp[624529] "expr temp" "maybe param" "maybe type" "temp"
      (624532 'move' call_tmp[624529](459565 call # r[459549] count[459546]))
      (459560 'move' _iterator[459558](459563 call _getIterator call_tmp[624529]))
      Defer
      {
        {
          (459570 call _freeIterator _iterator[459558])
        }
      }
      { scopeless type
        (459574 'move' _indexOfInterest[459556](459577 call iteratorIndex _iterator[459558]))
      }
      ForLoop[459579]
      {
        unknown i[459582] "index var" "insert auto destroy"
        (475993 'end of statement')
        (459584 'move' i[459582] _indexOfInterest[459556])
        (475994 'end of statement' i[459582])
        unknown yret[511358] "YVV" "temp"
        (511361 'move' yret[511358](511360 'deref' i[459582]))
        (511363 yield yret[511358])
        (475996 'end of statement' i[459582])
        label _continueLabel[459589]
        _indexOfInterest[459556]
        _iterator[459558]
      }
      label _breakLabel[459591]
    }
    (511356 return ret[511354])
  }
  function chpl_direct_counted_range_iter[459475](arg low[459479]:bool[10], arg count[459486] :
  (459483 call uint(64)[115] 32)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511367] "RVV" "temp"
    unknown call_tmp[624534] "maybe param" "maybe type" "temp"
    (624537 'move' call_tmp[624534](459491 call chpl_build_low_bounded_range low[459479]))
    const r[459489] "dead at end of block" "const" "insert auto destroy"
    (541153 'init var' r[459489] call_tmp[624534])
    (459494 'end of statement')
    {
      unknown _indexOfInterest[459496] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459498] "expr temp" "temp"
      unknown call_tmp[624539] "expr temp" "maybe param" "maybe type" "temp"
      (624542 'move' call_tmp[624539](459505 call # r[459489] count[459486]))
      (459500 'move' _iterator[459498](459503 call _getIterator call_tmp[624539]))
      Defer
      {
        {
          (459510 call _freeIterator _iterator[459498])
        }
      }
      { scopeless type
        (459514 'move' _indexOfInterest[459496](459517 call iteratorIndex _iterator[459498]))
      }
      ForLoop[459519]
      {
        unknown i[459522] "index var" "insert auto destroy"
        (475999 'end of statement')
        (459524 'move' i[459522] _indexOfInterest[459496])
        (476000 'end of statement' i[459522])
        unknown yret[511371] "YVV" "temp"
        (511374 'move' yret[511371](511373 'deref' i[459522]))
        (511376 yield yret[511371])
        (476002 'end of statement' i[459522])
        label _continueLabel[459529]
        _indexOfInterest[459496]
        _iterator[459498]
      }
      label _breakLabel[459531]
    }
    (511369 return ret[511367])
  }
  function chpl_direct_counted_range_iter[459415](arg low[459419]:bool[10], arg count[459426] :
  (459423 call uint(64)[115] 16)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511380] "RVV" "temp"
    unknown call_tmp[624544] "maybe param" "maybe type" "temp"
    (624547 'move' call_tmp[624544](459431 call chpl_build_low_bounded_range low[459419]))
    const r[459429] "dead at end of block" "const" "insert auto destroy"
    (541155 'init var' r[459429] call_tmp[624544])
    (459434 'end of statement')
    {
      unknown _indexOfInterest[459436] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459438] "expr temp" "temp"
      unknown call_tmp[624549] "expr temp" "maybe param" "maybe type" "temp"
      (624552 'move' call_tmp[624549](459445 call # r[459429] count[459426]))
      (459440 'move' _iterator[459438](459443 call _getIterator call_tmp[624549]))
      Defer
      {
        {
          (459450 call _freeIterator _iterator[459438])
        }
      }
      { scopeless type
        (459454 'move' _indexOfInterest[459436](459457 call iteratorIndex _iterator[459438]))
      }
      ForLoop[459459]
      {
        unknown i[459462] "index var" "insert auto destroy"
        (476005 'end of statement')
        (459464 'move' i[459462] _indexOfInterest[459436])
        (476006 'end of statement' i[459462])
        unknown yret[511384] "YVV" "temp"
        (511387 'move' yret[511384](511386 'deref' i[459462]))
        (511389 yield yret[511384])
        (476008 'end of statement' i[459462])
        label _continueLabel[459469]
        _indexOfInterest[459436]
        _iterator[459438]
      }
      label _breakLabel[459471]
    }
    (511382 return ret[511380])
  }
  function chpl_direct_counted_range_iter[459355](arg low[459359]:bool[10], arg count[459366] :
  (459363 call uint(64)[115] 8)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511393] "RVV" "temp"
    unknown call_tmp[624554] "maybe param" "maybe type" "temp"
    (624557 'move' call_tmp[624554](459371 call chpl_build_low_bounded_range low[459359]))
    const r[459369] "dead at end of block" "const" "insert auto destroy"
    (541157 'init var' r[459369] call_tmp[624554])
    (459374 'end of statement')
    {
      unknown _indexOfInterest[459376] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[459378] "expr temp" "temp"
      unknown call_tmp[624559] "expr temp" "maybe param" "maybe type" "temp"
      (624562 'move' call_tmp[624559](459385 call # r[459369] count[459366]))
      (459380 'move' _iterator[459378](459383 call _getIterator call_tmp[624559]))
      Defer
      {
        {
          (459390 call _freeIterator _iterator[459378])
        }
      }
      { scopeless type
        (459394 'move' _indexOfInterest[459376](459397 call iteratorIndex _iterator[459378]))
      }
      ForLoop[459399]
      {
        unknown i[459402] "index var" "insert auto destroy"
        (476011 'end of statement')
        (459404 'move' i[459402] _indexOfInterest[459376])
        (476012 'end of statement' i[459402])
        unknown yret[511397] "YVV" "temp"
        (511400 'move' yret[511397](511399 'deref' i[459402]))
        (511402 yield yret[511397])
        (476014 'end of statement' i[459402])
        label _continueLabel[459409]
        _indexOfInterest[459376]
        _iterator[459378]
      }
      label _breakLabel[459411]
    }
    (511395 return ret[511393])
  }
  function chpl_direct_counted_range_iter[75220](arg low[75217]:integral[199](?), arg count[75222]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511406] "RVV" "temp"
    unknown call_tmp[624564] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624567 'move' call_tmp[624564](75228 'typeof' low[75217]))
    unknown call_tmp[624569] "expr temp" "maybe param" "maybe type" "temp"
    (624572 'move' call_tmp[624569](75230 call _cast string[26] call_tmp[624564]))
    unknown call_tmp[624574] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624577 'move' call_tmp[624574](75234 'typeof' count[75222]))
    unknown call_tmp[624579] "expr temp" "maybe param" "maybe type" "temp"
    (624582 'move' call_tmp[624579](75236 call _cast string[26] call_tmp[624574]))
    (75238 call compilerError "can't apply '#' to a range with idxType " call_tmp[624569] " using a count of type " call_tmp[624579])
    (511408 return ret[511406])
  }
  function chpl_direct_counted_range_iter[75247](arg low[75245]:_any[178](?), arg count[75249]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511412] "RVV" "temp"
    (75254 call compilerError "Bound of 'low..' must be an integer")
    (511414 return ret[511412])
  }
  function chpl_direct_counted_range_iter_helper[75263](arg low[75261]:_any[178](?), arg count[75265]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511418] "RVV" "temp"
    unknown tmp[420553] "maybe param" "temp"
    unknown tmp[420574] "maybe param" "temp"
    (420585 'move' tmp[420574] 1)
    unknown call_tmp[624584] "expr temp" "maybe param" "maybe type" "temp"
    (624587 'move' call_tmp[624584](420587 call _cond_invalid tmp[420574]))
    if call_tmp[624584]
    {
      (420590 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558183] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558184] "maybe param" "temp"
    unknown call_tmp[624589] "expr temp" "maybe param" "maybe type" "temp"
    (624592 'move' call_tmp[624589](420575 call isTrue tmp[420574]))
    (558189 'move' tmp[558184](558187 call _cond_test call_tmp[624589]))
    if tmp[558184]
    {
      unknown tmp[558191] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624594] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624597 'move' call_tmp[624594](75270 'typeof' count[75265]))
      unknown call_tmp[624599] "expr temp" "maybe param" "maybe type" "temp"
      (624602 'move' call_tmp[624599](75272 call isIntType call_tmp[624594]))
      (558193 'move' tmp[558191](420578 call isTrue call_tmp[624599]))
      (558198 'move' tmp[558183](558195 '_paramFoldLogical' tmp[558184] tmp[558191]))
    }
    {
      (558203 'move' tmp[558183](558200 '_paramFoldLogical' tmp[558184] 0))
    }
    (420564 'move' tmp[420553] tmp[558183])
    unknown call_tmp[624604] "expr temp" "maybe param" "maybe type" "temp"
    (624607 'move' call_tmp[624604](420566 call _cond_invalid tmp[420553]))
    if call_tmp[624604]
    {
      (420569 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558210] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558211] "maybe param" "temp"
    unknown call_tmp[624609] "expr temp" "maybe param" "maybe type" "temp"
    (624612 'move' call_tmp[624609](420554 call isTrue tmp[420553]))
    (558216 'move' tmp[558211](558214 call _cond_test call_tmp[624609]))
    if tmp[558211]
    {
      unknown tmp[558218] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624614] "expr temp" "maybe param" "maybe type" "temp"
      (624617 'move' call_tmp[624614](75277 call < count[75265] 0))
      (558220 'move' tmp[558218](420557 call isTrue call_tmp[624614]))
      (558225 'move' tmp[558210](558222 '_paramFoldLogical' tmp[558211] tmp[558218]))
    }
    {
      (558230 'move' tmp[558210](558227 '_paramFoldLogical' tmp[558211] 0))
    }
    unknown call_tmp[624619] "expr temp" "maybe param" "maybe type" "temp"
    (624622 'move' call_tmp[624619](75289 call _cond_test tmp[558210]))
    if call_tmp[624619]
    {
      (75287 call boundsCheckHalt module=[255] HaltWrappers[209910] "With a negative count, the range must have a last index.")
      (357867 'referenced modules list' HaltWrappers[209910])
    }
    const tmp[75337] "dead at end of block" "const" "insert auto destroy" "temp"
    unknown tmp[558237] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558238] "maybe param" "temp"
    unknown call_tmp[624624] "expr temp" "maybe param" "maybe type" "temp"
    (624627 'move' call_tmp[624624](75302 call == count[75265] 0))
    (558243 'move' tmp[558238](558241 call _cond_test call_tmp[624624]))
    if tmp[558238]
    {
      unknown tmp[558245] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624629] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624632 'move' call_tmp[624629](75313 'typeof' low[75261]))
      unknown call_tmp[624634] "expr temp" "maybe param" "maybe type" "temp"
      (624637 'move' call_tmp[624634](75307 call _cast uint(64)[115] low[75261]))
      unknown call_tmp[624639] "expr temp" "maybe param" "maybe type" "temp"
      (624642 'move' call_tmp[624639](75310 call - call_tmp[624634] 1))
      unknown call_tmp[624644] "expr temp" "maybe param" "maybe type" "temp"
      (624647 'move' call_tmp[624644](75314 call _cast call_tmp[624629] call_tmp[624639]))
      (558247 'move' tmp[558245](75317 call _build_tuple low[75261] call_tmp[624644]))
      (558252 'move' tmp[558237](558249 '_paramFoldLogical' tmp[558238] tmp[558245]))
    }
    {
      unknown tmp[558254] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624649] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624652 'move' call_tmp[624649](75323 'typeof' low[75261]))
      unknown call_tmp[624654] "expr temp" "maybe param" "maybe type" "temp"
      (624657 'move' call_tmp[624654](75324 call _cast call_tmp[624649] count[75265]))
      unknown call_tmp[624659] "expr temp" "maybe param" "maybe type" "temp"
      (624662 'move' call_tmp[624659](75327 call - call_tmp[624654] 1))
      unknown call_tmp[624664] "expr temp" "maybe param" "maybe type" "temp"
      (624667 'move' call_tmp[624664](75329 call + low[75261] call_tmp[624659]))
      (558256 'move' tmp[558254](75332 call _build_tuple low[75261] call_tmp[624664]))
      (558261 'move' tmp[558237](558258 '_paramFoldLogical' tmp[558238] tmp[558254]))
    }
    (541159 'init var' tmp[75337] tmp[558237])
    (75344 call _check_tuple_var_decl tmp[75337] 2)
    (476021 'end of statement')
    unknown call_tmp[624669] "maybe param" "maybe type" "temp"
    (624672 'move' call_tmp[624669](75338 call tmp[75337] 0))
    const start[75295] "dead at end of block" "const" "insert auto destroy"
    (541161 'init var' start[75295] call_tmp[624669])
    unknown call_tmp[624674] "maybe param" "maybe type" "temp"
    (624677 'move' call_tmp[624674](75341 call tmp[75337] 1))
    const end[75297] "dead at end of block" "const" "insert auto destroy"
    (541163 'init var' end[75297] call_tmp[624674])
    (75349 'end of statement')
    {
      unknown _indexOfInterest[75360] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[75361] "expr temp" "temp"
      unknown call_tmp[624679] "expr temp" "maybe param" "maybe type" "temp"
      (624682 'move' call_tmp[624679](75356 call chpl_direct_param_stride_range_iter start[75295] end[75297] 1))
      (75370 'move' _iterator[75361](75368 call _getIterator call_tmp[624679]))
      Defer
      {
        {
          (75387 call _freeIterator _iterator[75361])
        }
      }
      { scopeless type
        (75376 'move' _indexOfInterest[75360](75373 call iteratorIndex _iterator[75361]))
      }
      ForLoop[75362]
      {
        unknown i[75380] "index var" "insert auto destroy"
        (476023 'end of statement')
        (75382 'move' i[75380] _indexOfInterest[75360])
        (476024 'end of statement' i[75380])
        unknown yret[511422] "YVV" "temp"
        (511425 'move' yret[511422](511424 'deref' i[75380]))
        (511427 yield yret[511422])
        (476026 'end of statement' i[75380])
        label _continueLabel[75365]
        _indexOfInterest[75360]
        _iterator[75361]
      }
      label _breakLabel[75366]
    }
    (511420 return ret[511418])
  }
  function chpl_direct_pos_stride_range_iter[75403](arg low[75400]:_any[178](?), arg high[75405]:_any[178](?), arg stride[75407]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511431] "RVV" "temp"
    unknown call_tmp[624684] "expr temp" "maybe param" "maybe type" "temp"
    (624687 'move' call_tmp[624684](75551 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[624684]
    {
      unknown call_tmp[624689] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624692 'move' call_tmp[624689](459595 'typeof' low[75400]))
      (75414 call chpl_range_check_stride stride[75407] call_tmp[624689])
      (476028 'end of statement')
      unknown call_tmp[624694] "expr temp" "maybe param" "maybe type" "temp"
      (624697 'move' call_tmp[624694](75426 call _cond_test 1))
      if call_tmp[624694]
      {
        unknown call_tmp[624699] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (624702 'move' call_tmp[624699](459597 'typeof' low[75400]))
        (75424 call chpl_checkIfRangeIterWillOverflow call_tmp[624699] low[75400] high[75405] stride[75407])
      }
      unknown i[75432] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624704] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624707 'move' call_tmp[624704](459599 'typeof' low[75400]))
      (541165 'default init var' i[75432] call_tmp[624704])
      (75435 'end of statement')
      CForLoop[75478]
      {
        {
          unknown yret[511435] "YVV" "temp"
          (511438 'move' yret[511435](511437 'deref' i[75432]))
          (511440 yield yret[511435])
          (476030 'end of statement' i[75432])
        }
        label _continueLabel[75494]
        {
          (75479 '=' i[75432] low[75400])
          (476032 'end of statement' i[75432])
        }
        {
          (75482 '<=' i[75432] high[75405])
          (476034 'end of statement' i[75432])
        }
        {
          unknown call_tmp[624709] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624712 'move' call_tmp[624709](459601 'typeof' low[75400]))
          unknown call_tmp[624714] "expr temp" "maybe param" "maybe type" "temp"
          (624717 'move' call_tmp[624714](75488 call _cast call_tmp[624709] stride[75407]))
          (75485 '+=' i[75432] call_tmp[624714])
          (476036 'end of statement' i[75432])
        }
      }
      label _breakLabel[75495]
    }
    {
      {
        unknown _indexOfInterest[75516] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75517] "expr temp" "temp"
        unknown call_tmp[624719] "expr temp" "maybe param" "maybe type" "temp"
        (624722 'move' call_tmp[624719](75501 call chpl_build_bounded_range low[75400] high[75405]))
        unknown call_tmp[624724] "expr temp" "maybe param" "maybe type" "temp"
        (624727 'move' call_tmp[624724](75504 call chpl_by call_tmp[624719] stride[75407]))
        unknown call_tmp[624731] "expr temp" "maybe param" "maybe type" "temp"
        (624734 'move' call_tmp[624731](75512 call(75508 call (partial) generalIterator _mt[243] call_tmp[624724])))
        (75526 'move' _iterator[75517](75524 call _getIterator call_tmp[624731]))
        Defer
        {
          {
            (75543 call _freeIterator _iterator[75517])
          }
        }
        { scopeless type
          (75532 'move' _indexOfInterest[75516](75529 call iteratorIndex _iterator[75517]))
        }
        ForLoop[75518]
        {
          unknown i[75536] "index var" "insert auto destroy"
          (476039 'end of statement')
          (75538 'move' i[75536] _indexOfInterest[75516])
          (476040 'end of statement' i[75536])
          unknown yret[511442] "YVV" "temp"
          (511445 'move' yret[511442](511444 'deref' i[75536]))
          (511447 yield yret[511442])
          (476042 'end of statement' i[75536])
          label _continueLabel[75521]
          _indexOfInterest[75516]
          _iterator[75517]
        }
        label _breakLabel[75522]
      }
    }
    (511433 return ret[511431])
  }
  function chpl_direct_param_stride_range_iter[75565](arg low[75562]:_any[178](?), arg high[75567]:_any[178](?), param arg stride[75569]:_any[178](?)) : _unknown[51] "iterator fn" "no return value for void"
  {
    unknown ret[511451] "RVV" "temp"
    unknown call_tmp[624736] "expr temp" "maybe param" "maybe type" "temp"
    (624739 'move' call_tmp[624736](75776 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[624736]
    {
      unknown call_tmp[624741] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624744 'move' call_tmp[624741](459603 'typeof' low[75562]))
      (75576 call chpl_range_check_stride stride[75569] call_tmp[624741])
      (476044 'end of statement')
      unknown i[75580] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624746] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624749 'move' call_tmp[624746](459605 'typeof' low[75562]))
      (541167 'default init var' i[75580] call_tmp[624746])
      (75583 'end of statement')
      unknown call_tmp[624751] "expr temp" "maybe param" "maybe type" "temp"
      (624754 'move' call_tmp[624751](75586 call > stride[75569] 0))
      unknown call_tmp[624756] "expr temp" "maybe param" "maybe type" "temp"
      (624759 'move' call_tmp[624756](75720 call _cond_test call_tmp[624751]))
      if call_tmp[624756]
      {
        unknown call_tmp[624761] "expr temp" "maybe param" "maybe type" "temp"
        (624764 'move' call_tmp[624761](75597 call _cond_test 1))
        if call_tmp[624761]
        {
          unknown call_tmp[624766] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (624769 'move' call_tmp[624766](459607 'typeof' low[75562]))
          (75595 call chpl_checkIfRangeIterWillOverflow call_tmp[624766] low[75562] high[75567] stride[75569])
        }
        CForLoop[75629]
        {
          {
            unknown yret[511455] "YVV" "temp"
            (511458 'move' yret[511455](511457 'deref' i[75580]))
            (511460 yield yret[511455])
            (476046 'end of statement' i[75580])
          }
          label _continueLabel[75645]
          {
            (75630 '=' i[75580] low[75562])
            (476048 'end of statement' i[75580])
          }
          {
            (75633 '<=' i[75580] high[75567])
            (476050 'end of statement' i[75580])
          }
          {
            unknown call_tmp[624771] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (624774 'move' call_tmp[624771](459609 'typeof' low[75562]))
            unknown call_tmp[624776] "expr temp" "maybe param" "maybe type" "temp"
            (624779 'move' call_tmp[624776](75639 call _cast call_tmp[624771] stride[75569]))
            (75636 '+=' i[75580] call_tmp[624776])
            (476052 'end of statement' i[75580])
          }
        }
        label _breakLabel[75646]
      }
      {
        unknown call_tmp[624781] "expr temp" "maybe param" "maybe type" "temp"
        (624784 'move' call_tmp[624781](75651 call < stride[75569] 0))
        unknown call_tmp[624786] "expr temp" "maybe param" "maybe type" "temp"
        (624789 'move' call_tmp[624786](75716 call _cond_test call_tmp[624781]))
        if call_tmp[624786]
        {
          unknown call_tmp[624791] "expr temp" "maybe param" "maybe type" "temp"
          (624794 'move' call_tmp[624791](75664 call _cond_test 1))
          if call_tmp[624791]
          {
            unknown call_tmp[624796] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (624799 'move' call_tmp[624796](459611 'typeof' low[75562]))
            (75662 call chpl_checkIfRangeIterWillOverflow call_tmp[624796] low[75562] high[75567] stride[75569] high[75567] low[75562])
          }
          CForLoop[75696]
          {
            {
              unknown yret[511462] "YVV" "temp"
              (511465 'move' yret[511462](511464 'deref' i[75580]))
              (511467 yield yret[511462])
              (476055 'end of statement' i[75580])
            }
            label _continueLabel[75712]
            {
              (75697 '=' i[75580] high[75567])
              (476057 'end of statement' i[75580])
            }
            {
              (75700 '>=' i[75580] low[75562])
              (476059 'end of statement' i[75580])
            }
            {
              unknown call_tmp[624801] "expr temp" "maybe param" "maybe type" "temp" "type variable"
              (624804 'move' call_tmp[624801](459613 'typeof' low[75562]))
              unknown call_tmp[624806] "expr temp" "maybe param" "maybe type" "temp"
              (624809 'move' call_tmp[624806](75706 call _cast call_tmp[624801] stride[75569]))
              (75703 '+=' i[75580] call_tmp[624806])
              (476061 'end of statement' i[75580])
            }
          }
          label _breakLabel[75713]
        }
      }
    }
    {
      {
        unknown _indexOfInterest[75741] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75742] "expr temp" "temp"
        unknown call_tmp[624811] "expr temp" "maybe param" "maybe type" "temp"
        (624814 'move' call_tmp[624811](75728 call chpl_build_bounded_range low[75562] high[75567]))
        unknown call_tmp[624816] "expr temp" "maybe param" "maybe type" "temp"
        (624819 'move' call_tmp[624816](75731 call chpl_by call_tmp[624811] stride[75569]))
        unknown call_tmp[624823] "expr temp" "maybe param" "maybe type" "temp"
        (624826 'move' call_tmp[624823](75737 call(75733 call (partial) generalIterator _mt[243] call_tmp[624816])))
        (75751 'move' _iterator[75742](75749 call _getIterator call_tmp[624823]))
        Defer
        {
          {
            (75768 call _freeIterator _iterator[75742])
          }
        }
        { scopeless type
          (75757 'move' _indexOfInterest[75741](75754 call iteratorIndex _iterator[75742]))
        }
        ForLoop[75743]
        {
          unknown i[75761] "index var" "insert auto destroy"
          (476064 'end of statement')
          (75763 'move' i[75761] _indexOfInterest[75741])
          (476065 'end of statement' i[75761])
          unknown yret[511469] "YVV" "temp"
          (511472 'move' yret[511469](511471 'deref' i[75761]))
          (511474 yield yret[511469])
          (476067 'end of statement' i[75761])
          label _continueLabel[75746]
          _indexOfInterest[75741]
          _iterator[75742]
        }
        label _breakLabel[75747]
      }
    }
    (511453 return ret[511451])
  }
  function range[64316](?).these[75786](arg _mt[75791]:_MT[238], arg this[75788]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511478] "RVV" "temp"
    unknown call_tmp[624830] "expr temp" "maybe param" "maybe type" "temp"
    (624833 'move' call_tmp[624830](375437 call boundedType _mt[243] this[75788]))
    unknown call_tmp[624835] "expr temp" "maybe param" "maybe type" "temp"
    (624838 'move' call_tmp[624835](75805 call == call_tmp[624830] boundedNone[64211]))
    unknown call_tmp[624840] "expr temp" "maybe param" "maybe type" "temp"
    (624843 'move' call_tmp[624840](75828 call _cond_test call_tmp[624835]))
    if call_tmp[624840]
    {
      (75826 call compilerError "iteration over a range with no bounds")
    }
    unknown call_tmp[624845] "expr temp" "maybe param" "maybe type" "temp"
    (624848 'move' call_tmp[624845](75908 call _cond_test 1))
    if call_tmp[624845]
    {
      unknown call_tmp[624852] "expr temp" "maybe param" "maybe type" "temp"
      (624855 'move' call_tmp[624852](75840 call(75836 call (partial) hasFirst _mt[243] this[75788])))
      unknown call_tmp[624857] "expr temp" "maybe param" "maybe type" "temp"
      (624860 'move' call_tmp[624857](75841 call ! call_tmp[624852]))
      unknown call_tmp[624862] "expr temp" "maybe param" "maybe type" "temp"
      (624865 'move' call_tmp[624862](75867 call _cond_test call_tmp[624857]))
      if call_tmp[624862]
      {
        (75865 call boundsCheckHalt module=[255] HaltWrappers[209910] "iteration over range that has no first index")
        (357876 'referenced modules list' HaltWrappers[209910])
      }
      unknown call_tmp[624869] "expr temp" "maybe param" "maybe type" "temp"
      (624872 'move' call_tmp[624869](75878 call(75874 call (partial) isAmbiguous _mt[243] this[75788])))
      unknown call_tmp[624874] "expr temp" "maybe param" "maybe type" "temp"
      (624877 'move' call_tmp[624874](75903 call _cond_test call_tmp[624869]))
      if call_tmp[624874]
      {
        (75901 call boundsCheckHalt module=[255] HaltWrappers[209910] "these -- Attempt to iterate over a range with ambiguous alignment.")
        (357883 'referenced modules list' HaltWrappers[209910])
      }
    }
    unknown i[75913] "dead at end of block" "insert auto destroy"
    unknown call_tmp[624881] "expr temp" "maybe param" "maybe type" "temp"
    (624884 'move' call_tmp[624881](375442 call intIdxType _mt[243] this[75788]))
    (541169 'default init var' i[75913] call_tmp[624881])
    (75916 'end of statement')
    unknown call_tmp[624888] "expr temp" "maybe param" "maybe type" "temp"
    (624891 'move' call_tmp[624888](75919 call first _mt[243] this[75788]))
    unknown call_tmp[624893] "maybe param" "maybe type" "temp"
    (624896 'move' call_tmp[624893](75923 call chpl__idxToInt call_tmp[624888]))
    const start[75924] "dead at end of block" "const" "insert auto destroy"
    (541171 'init var' start[75924] call_tmp[624893])
    (75927 'end of statement')
    CForLoop[75953]
    {
      {
        unknown yret[511482] "YVV" "temp"
        unknown call_tmp[624900] "expr temp" "maybe param" "maybe type" "temp"
        (624903 'move' call_tmp[624900](75948 call(375446 call (partial) chpl_intToIdx _mt[243] this[75788]) i[75913]))
        (511485 'move' yret[511482](511484 'deref' call_tmp[624900]))
        (511487 yield yret[511482])
        (476072 'end of statement' i[75913])
      }
      label _continueLabel[75967]
      {
        (75954 '=' i[75913] start[75924])
        (476074 'end of statement' i[75913] start[75924])
      }
      {
        (748043 call chpl_statementLevelSymbol 1)
      }
      {
        unknown call_tmp[624907] "expr temp" "maybe param" "maybe type" "temp"
        (624910 'move' call_tmp[624907](375454 call intIdxType _mt[243] this[75788]))
        unknown call_tmp[624914] "expr temp" "maybe param" "maybe type" "temp"
        (624917 'move' call_tmp[624914](375458 call stride _mt[243] this[75788]))
        unknown call_tmp[624919] "expr temp" "maybe param" "maybe type" "temp"
        (624922 'move' call_tmp[624919](75961 call _cast call_tmp[624907] call_tmp[624914]))
        (75958 '+=' i[75913] call_tmp[624919])
        (476077 'end of statement' i[75913])
      }
    }
    label _breakLabel[75968]
    (511480 return ret[511478])
  }
  where {
    unknown call_tmp[624926] "expr temp" "maybe param" "maybe type" "temp"
    (624929 'move' call_tmp[624926](375432 call boundedType _mt[243] this[75788]))
    (75798 call != call_tmp[624926] bounded[64205])
  }
  function range[64316](?).these[75977](arg _mt[75982]:_MT[238], arg this[75979]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511491] "RVV" "temp"
    unknown call_tmp[624931] "expr temp" "maybe param" "maybe type" "temp"
    (624934 'move' call_tmp[624931](76164 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[624931]
    {
      unknown call_tmp[624936] "expr temp" "maybe param" "maybe type" "temp"
      (624939 'move' call_tmp[624936](76023 call _cond_test 1))
      if call_tmp[624936]
      {
        (76001 call(375476 call (partial) checkIfIterWillOverflow _mt[243] this[75979]))
        (476079 'end of statement')
        unknown call_tmp[624945] "expr temp" "maybe param" "maybe type" "temp"
        (624948 'move' call_tmp[624945](76009 call(76005 call (partial) isAmbiguous _mt[243] this[75979])))
        unknown call_tmp[624950] "expr temp" "maybe param" "maybe type" "temp"
        (624953 'move' call_tmp[624950](76018 call _cond_test call_tmp[624945]))
        if call_tmp[624950]
        {
          (76016 call boundsCheckHalt module=[255] HaltWrappers[209910] "these -- Attempt to iterate over a range with ambiguous alignment.")
          (357892 'referenced modules list' HaltWrappers[209910])
        }
      }
      unknown i[76029] "dead at end of block" "insert auto destroy"
      unknown call_tmp[624957] "expr temp" "maybe param" "maybe type" "temp"
      (624960 'move' call_tmp[624957](375480 call intIdxType _mt[243] this[75979]))
      (541173 'default init var' i[76029] call_tmp[624957])
      (76032 'end of statement')
      unknown call_tmp[624964] "maybe param" "maybe type" "temp"
      (624967 'move' call_tmp[624964](76034 call firstAsInt _mt[243] this[75979]))
      const start[76037] "dead at end of block" "const" "insert auto destroy"
      (541175 'init var' start[76037] call_tmp[624964])
      (76040 'end of statement')
      const end[76066] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558268] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558269] "maybe param" "temp"
      unknown call_tmp[624971] "expr temp" "maybe param" "maybe type" "temp"
      (624974 'move' call_tmp[624971](76043 call low _mt[243] this[75979]))
      unknown call_tmp[624978] "expr temp" "maybe param" "maybe type" "temp"
      (624981 'move' call_tmp[624978](76047 call high _mt[243] this[75979]))
      unknown call_tmp[624983] "expr temp" "maybe param" "maybe type" "temp"
      (624986 'move' call_tmp[624983](76050 call > call_tmp[624971] call_tmp[624978]))
      (558274 'move' tmp[558269](558272 call _cond_test call_tmp[624983]))
      if tmp[558269]
      {
        (558279 'move' tmp[558268](558276 '_paramFoldLogical' tmp[558269] start[76037]))
      }
      {
        unknown tmp[558281] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[624990] "expr temp" "maybe param" "maybe type" "temp"
        (624993 'move' call_tmp[624990](76054 call lastAsInt _mt[243] this[75979]))
        unknown call_tmp[624997] "expr temp" "maybe param" "maybe type" "temp"
        (625000 'move' call_tmp[624997](375493 call intIdxType _mt[243] this[75979]))
        unknown call_tmp[625004] "expr temp" "maybe param" "maybe type" "temp"
        (625007 'move' call_tmp[625004](375489 call stride _mt[243] this[75979]))
        unknown call_tmp[625009] "expr temp" "maybe param" "maybe type" "temp"
        (625012 'move' call_tmp[625009](76059 call _cast call_tmp[624997] call_tmp[625004]))
        (558283 'move' tmp[558281](76061 call + call_tmp[624990] call_tmp[625009]))
        (558288 'move' tmp[558268](558285 '_paramFoldLogical' tmp[558269] tmp[558281]))
      }
      unknown call_tmp[625016] "maybe param" "maybe type" "temp"
      (625019 'move' call_tmp[625016](375484 call intIdxType _mt[243] this[75979]))
      (541177 'init var' end[76066] tmp[558268] call_tmp[625016])
      (76069 'end of statement' start[76037])
      CForLoop[76099]
      {
        {
          unknown yret[511495] "YVV" "temp"
          unknown call_tmp[625023] "expr temp" "maybe param" "maybe type" "temp"
          (625026 'move' call_tmp[625023](76094 call(375497 call (partial) chpl_intToIdx _mt[243] this[75979]) i[76029]))
          (511498 'move' yret[511495](511497 'deref' call_tmp[625023]))
          (511500 yield yret[511495])
          (476082 'end of statement' i[76029])
        }
        label _continueLabel[76115]
        {
          (76100 '=' i[76029] start[76037])
          (476084 'end of statement' i[76029] start[76037])
        }
        {
          (76103 '!=' i[76029] end[76066])
          (476087 'end of statement' i[76029] end[76066])
        }
        {
          unknown call_tmp[625030] "expr temp" "maybe param" "maybe type" "temp"
          (625033 'move' call_tmp[625030](375507 call intIdxType _mt[243] this[75979]))
          unknown call_tmp[625037] "expr temp" "maybe param" "maybe type" "temp"
          (625040 'move' call_tmp[625037](375511 call stride _mt[243] this[75979]))
          unknown call_tmp[625042] "expr temp" "maybe param" "maybe type" "temp"
          (625045 'move' call_tmp[625042](76109 call _cast call_tmp[625030] call_tmp[625037]))
          (76106 '+=' i[76029] call_tmp[625042])
          (476090 'end of statement' i[76029])
        }
      }
      label _breakLabel[76116]
    }
    {
      {
        unknown _indexOfInterest[76129] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76130] "expr temp" "temp"
        unknown call_tmp[625049] "expr temp" "maybe param" "maybe type" "temp"
        (625052 'move' call_tmp[625049](76125 call(76121 call (partial) generalIterator _mt[243] this[75979])))
        (76139 'move' _iterator[76130](76137 call _getIterator call_tmp[625049]))
        Defer
        {
          {
            (76156 call _freeIterator _iterator[76130])
          }
        }
        { scopeless type
          (76145 'move' _indexOfInterest[76129](76142 call iteratorIndex _iterator[76130]))
        }
        ForLoop[76131]
        {
          unknown i[76149] "index var" "insert auto destroy"
          (476093 'end of statement')
          (76151 'move' i[76149] _indexOfInterest[76129])
          (476094 'end of statement' i[76149])
          unknown yret[511502] "YVV" "temp"
          (511505 'move' yret[511502](511504 'deref' i[76149]))
          (511507 yield yret[511502])
          (476096 'end of statement' i[76149])
          label _continueLabel[76134]
          _indexOfInterest[76129]
          _iterator[76130]
        }
        label _breakLabel[76135]
      }
    }
    (511493 return ret[511491])
  }
  where {
    unknown tmp[420595] "maybe param" "temp"
    unknown call_tmp[625056] "expr temp" "maybe param" "maybe type" "temp"
    (625059 'move' call_tmp[625056](375463 call boundedType _mt[243] this[75979]))
    (420606 'move' tmp[420595](75989 call == call_tmp[625056] bounded[64205]))
    unknown call_tmp[625061] "expr temp" "maybe param" "maybe type" "temp"
    (625064 'move' call_tmp[625061](420608 call _cond_invalid tmp[420595]))
    if call_tmp[625061]
    {
      (420611 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558295] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558296] "maybe param" "temp"
    unknown call_tmp[625066] "expr temp" "maybe param" "maybe type" "temp"
    (625069 'move' call_tmp[625066](420596 call isTrue tmp[420595]))
    (558301 'move' tmp[558296](558299 call _cond_test call_tmp[625066]))
    if tmp[558296]
    {
      unknown tmp[558303] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625073] "expr temp" "maybe param" "maybe type" "temp"
      (625076 'move' call_tmp[625073](375468 call stridable _mt[243] this[75979]))
      unknown call_tmp[625078] "expr temp" "maybe param" "maybe type" "temp"
      (625081 'move' call_tmp[625078](75993 call == call_tmp[625073] 1))
      (558305 'move' tmp[558303](420599 call isTrue call_tmp[625078]))
      (558310 'move' tmp[558295](558307 '_paramFoldLogical' tmp[558296] tmp[558303]))
    }
    {
      (558315 'move' tmp[558295](558312 '_paramFoldLogical' tmp[558296] 0))
    }
    (748157 call chpl_statementLevelSymbol tmp[558295])
  }
  function range[64316](?).these[76175](arg _mt[76180]:_MT[238], arg this[76177]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511511] "RVV" "temp"
    unknown call_tmp[625083] "expr temp" "maybe param" "maybe type" "temp"
    (625086 'move' call_tmp[625083](76322 call _cond_test useOptimizedRangeIterators[64200]))
    if call_tmp[625083]
    {
      unknown call_tmp[625088] "expr temp" "maybe param" "maybe type" "temp"
      (625091 'move' call_tmp[625088](76201 call _cond_test 1))
      if call_tmp[625088]
      {
        (76199 call(375528 call (partial) checkIfIterWillOverflow _mt[243] this[76177]))
      }
      unknown i[76208] "dead at end of block" "insert auto destroy"
      unknown call_tmp[625097] "expr temp" "maybe param" "maybe type" "temp"
      (625100 'move' call_tmp[625097](375532 call intIdxType _mt[243] this[76177]))
      (541179 'default init var' i[76208] call_tmp[625097])
      (76211 'end of statement')
      unknown call_tmp[625104] "maybe param" "maybe type" "temp"
      (625107 'move' call_tmp[625104](76213 call _low _mt[243] this[76177]))
      const start[76216] "dead at end of block" "const" "insert auto destroy"
      (541181 'init var' start[76216] call_tmp[625104])
      (76219 'end of statement')
      unknown call_tmp[625111] "maybe param" "maybe type" "temp"
      (625114 'move' call_tmp[625111](76221 call _high _mt[243] this[76177]))
      const end[76224] "dead at end of block" "const" "insert auto destroy"
      (541183 'init var' end[76224] call_tmp[625111])
      (76227 'end of statement')
      CForLoop[76257]
      {
        {
          unknown yret[511515] "YVV" "temp"
          unknown call_tmp[625118] "expr temp" "maybe param" "maybe type" "temp"
          (625121 'move' call_tmp[625118](76252 call(375536 call (partial) chpl_intToIdx _mt[243] this[76177]) i[76208]))
          (511518 'move' yret[511515](511517 'deref' call_tmp[625118]))
          (511520 yield yret[511515])
          (476099 'end of statement' i[76208])
        }
        label _continueLabel[76273]
        {
          (76258 '=' i[76208] start[76216])
          (476101 'end of statement' i[76208] start[76216])
        }
        {
          (76261 '<=' i[76208] end[76224])
          (476104 'end of statement' i[76208] end[76224])
        }
        {
          unknown call_tmp[625125] "expr temp" "maybe param" "maybe type" "temp"
          (625128 'move' call_tmp[625125](375546 call intIdxType _mt[243] this[76177]))
          unknown call_tmp[625132] "expr temp" "maybe param" "maybe type" "temp"
          (625135 'move' call_tmp[625132](375550 call stride _mt[243] this[76177]))
          unknown call_tmp[625137] "expr temp" "maybe param" "maybe type" "temp"
          (625140 'move' call_tmp[625137](76267 call _cast call_tmp[625125] call_tmp[625132]))
          (76264 '+=' i[76208] call_tmp[625137])
          (476107 'end of statement' i[76208])
        }
      }
      label _breakLabel[76274]
    }
    {
      {
        unknown _indexOfInterest[76287] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76288] "expr temp" "temp"
        unknown call_tmp[625144] "expr temp" "maybe param" "maybe type" "temp"
        (625147 'move' call_tmp[625144](76283 call(76279 call (partial) generalIterator _mt[243] this[76177])))
        (76297 'move' _iterator[76288](76295 call _getIterator call_tmp[625144]))
        Defer
        {
          {
            (76314 call _freeIterator _iterator[76288])
          }
        }
        { scopeless type
          (76303 'move' _indexOfInterest[76287](76300 call iteratorIndex _iterator[76288]))
        }
        ForLoop[76289]
        {
          unknown i[76307] "index var" "insert auto destroy"
          (476110 'end of statement')
          (76309 'move' i[76307] _indexOfInterest[76287])
          (476111 'end of statement' i[76307])
          unknown yret[511522] "YVV" "temp"
          (511525 'move' yret[511522](511524 'deref' i[76307]))
          (511527 yield yret[511522])
          (476113 'end of statement' i[76307])
          label _continueLabel[76292]
          _indexOfInterest[76287]
          _iterator[76288]
        }
        label _breakLabel[76293]
      }
    }
    (511513 return ret[511511])
  }
  where {
    unknown tmp[420616] "maybe param" "temp"
    unknown call_tmp[625151] "expr temp" "maybe param" "maybe type" "temp"
    (625154 'move' call_tmp[625151](375517 call boundedType _mt[243] this[76177]))
    (420627 'move' tmp[420616](76187 call == call_tmp[625151] bounded[64205]))
    unknown call_tmp[625156] "expr temp" "maybe param" "maybe type" "temp"
    (625159 'move' call_tmp[625156](420629 call _cond_invalid tmp[420616]))
    if call_tmp[625156]
    {
      (420632 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558322] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558323] "maybe param" "temp"
    unknown call_tmp[625161] "expr temp" "maybe param" "maybe type" "temp"
    (625164 'move' call_tmp[625161](420617 call isTrue tmp[420616]))
    (558328 'move' tmp[558323](558326 call _cond_test call_tmp[625161]))
    if tmp[558323]
    {
      unknown tmp[558330] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625168] "expr temp" "maybe param" "maybe type" "temp"
      (625171 'move' call_tmp[625168](375522 call stridable _mt[243] this[76177]))
      unknown call_tmp[625173] "expr temp" "maybe param" "maybe type" "temp"
      (625176 'move' call_tmp[625173](76191 call == call_tmp[625168] 0))
      (558332 'move' tmp[558330](420620 call isTrue call_tmp[625173]))
      (558337 'move' tmp[558322](558334 '_paramFoldLogical' tmp[558323] tmp[558330]))
    }
    {
      (558342 'move' tmp[558322](558339 '_paramFoldLogical' tmp[558323] 0))
    }
    (748159 call chpl_statementLevelSymbol tmp[558322])
  }
  function range[64316](?).generalIterator[76333](arg _mt[76338]:_MT[238], arg this[76335]:range[64316](?) :
  range[64316](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511531] "RVV" "temp"
    unknown tmp[420637] "maybe param" "temp"
    (420648 'move' tmp[420637] 1)
    unknown call_tmp[625178] "expr temp" "maybe param" "maybe type" "temp"
    (625181 'move' call_tmp[625178](420650 call _cond_invalid tmp[420637]))
    if call_tmp[625178]
    {
      (420653 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558349] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558350] "maybe param" "temp"
    unknown call_tmp[625183] "expr temp" "maybe param" "maybe type" "temp"
    (625186 'move' call_tmp[625183](420638 call isTrue tmp[420637]))
    (558355 'move' tmp[558350](558353 call _cond_test call_tmp[625183]))
    if tmp[558350]
    {
      unknown tmp[558357] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625190] "expr temp" "maybe param" "maybe type" "temp"
      (625193 'move' call_tmp[625190](76346 call(76342 call (partial) isAmbiguous _mt[243] this[76335])))
      (558359 'move' tmp[558357](420641 call isTrue call_tmp[625190]))
      (558364 'move' tmp[558349](558361 '_paramFoldLogical' tmp[558350] tmp[558357]))
    }
    {
      (558369 'move' tmp[558349](558366 '_paramFoldLogical' tmp[558350] 0))
    }
    unknown call_tmp[625195] "expr temp" "maybe param" "maybe type" "temp"
    (625198 'move' call_tmp[625195](76357 call _cond_test tmp[558349]))
    if call_tmp[625195]
    {
      (76355 call boundsCheckHalt module=[255] HaltWrappers[209910] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (357908 'referenced modules list' HaltWrappers[209910])
    }
    unknown i[76364] "dead at end of block" "insert auto destroy"
    unknown call_tmp[625202] "expr temp" "maybe param" "maybe type" "temp"
    (625205 'move' call_tmp[625202](375556 call intIdxType _mt[243] this[76335]))
    (541185 'default init var' i[76364] call_tmp[625202])
    (76367 'end of statement')
    unknown call_tmp[625209] "maybe param" "maybe type" "temp"
    (625212 'move' call_tmp[625209](76369 call first _mt[243] this[76335]))
    const start[76372] "dead at end of block" "const" "insert auto destroy"
    (541187 'init var' start[76372] call_tmp[625209])
    (76375 'end of statement')
    const end[76396] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558376] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558377] "maybe param" "temp"
    unknown call_tmp[625216] "expr temp" "maybe param" "maybe type" "temp"
    (625219 'move' call_tmp[625216](76377 call low _mt[243] this[76335]))
    unknown call_tmp[625223] "expr temp" "maybe param" "maybe type" "temp"
    (625226 'move' call_tmp[625223](76381 call high _mt[243] this[76335]))
    unknown call_tmp[625228] "expr temp" "maybe param" "maybe type" "temp"
    (625231 'move' call_tmp[625228](76384 call > call_tmp[625216] call_tmp[625223]))
    (558382 'move' tmp[558377](558380 call _cond_test call_tmp[625228]))
    if tmp[558377]
    {
      (558387 'move' tmp[558376](558384 '_paramFoldLogical' tmp[558377] start[76372]))
    }
    {
      unknown tmp[558389] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558391 'move' tmp[558389](76390 call last _mt[243] this[76335]))
      (558396 'move' tmp[558376](558393 '_paramFoldLogical' tmp[558377] tmp[558389]))
    }
    (541189 'init var' end[76396] tmp[558376])
    (76399 'end of statement' start[76372])
    CForLoop[76438]
    {
      {
        unknown yret[511535] "YVV" "temp"
        (511538 'move' yret[511535](511537 'deref' i[76364]))
        (511540 yield yret[511535])
        (476118 'end of statement' i[76364])
        unknown call_tmp[625235] "expr temp" "maybe param" "maybe type" "temp"
        (625238 'move' call_tmp[625235](76427 call == i[76364] end[76396]))
        unknown call_tmp[625240] "expr temp" "maybe param" "maybe type" "temp"
        (625243 'move' call_tmp[625240](76432 call _cond_test call_tmp[625235]))
        if call_tmp[625240]
        {
          break _breakLabel[76455] _breakLabel[76455]
        }
      }
      label _continueLabel[76454]
      {
        (76439 '=' i[76364] start[76372])
        (476120 'end of statement' i[76364] start[76372])
      }
      {
        unknown call_tmp[625247] "expr temp" "maybe param" "maybe type" "temp"
        (625250 'move' call_tmp[625247](375566 call high _mt[243] this[76335]))
        unknown call_tmp[625254] "expr temp" "maybe param" "maybe type" "temp"
        (625257 'move' call_tmp[625254](375570 call low _mt[243] this[76335]))
        (76442 '>=' call_tmp[625247] call_tmp[625254])
      }
      {
        unknown call_tmp[625261] "expr temp" "maybe param" "maybe type" "temp"
        (625264 'move' call_tmp[625261](375575 call intIdxType _mt[243] this[76335]))
        unknown call_tmp[625268] "expr temp" "maybe param" "maybe type" "temp"
        (625271 'move' call_tmp[625268](375579 call stride _mt[243] this[76335]))
        unknown call_tmp[625273] "expr temp" "maybe param" "maybe type" "temp"
        (625276 'move' call_tmp[625273](76448 call _cast call_tmp[625261] call_tmp[625268]))
        (76445 '+=' i[76364] call_tmp[625273])
        (476124 'end of statement' i[76364])
      }
    }
    label _breakLabel[76455]
    (511533 return ret[511531])
  }
  function range[64316](?).these[76467](arg _mt[76472]:_MT[238], arg this[76469]:range[64316](?) :
  range[64316](?), param arg tag[76464]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511544] "RVV" "temp"
    unknown call_tmp[625278] "expr temp" "maybe param" "maybe type" "temp"
    (625281 'move' call_tmp[625278](76489 call isBoundedRange this[76469]))
    unknown call_tmp[625283] "expr temp" "maybe param" "maybe type" "temp"
    (625286 'move' call_tmp[625283](76490 call ! call_tmp[625278]))
    unknown call_tmp[625288] "expr temp" "maybe param" "maybe type" "temp"
    (625291 'move' call_tmp[625288](76514 call _cond_test call_tmp[625283]))
    if call_tmp[625288]
    {
      (76511 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420679] "maybe param" "temp"
    (420690 'move' tmp[420679] 1)
    unknown call_tmp[625293] "expr temp" "maybe param" "maybe type" "temp"
    (625296 'move' call_tmp[625293](420692 call _cond_invalid tmp[420679]))
    if call_tmp[625293]
    {
      (420695 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558403] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558404] "maybe param" "temp"
    unknown call_tmp[625298] "expr temp" "maybe param" "maybe type" "temp"
    (625301 'move' call_tmp[625298](420680 call isTrue tmp[420679]))
    (558409 'move' tmp[558404](558407 call _cond_test call_tmp[625298]))
    if tmp[558404]
    {
      unknown tmp[558411] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625305] "expr temp" "maybe param" "maybe type" "temp"
      (625308 'move' call_tmp[625305](76525 call(76521 call (partial) isAmbiguous _mt[243] this[76469])))
      (558413 'move' tmp[558411](420683 call isTrue call_tmp[625305]))
      (558418 'move' tmp[558403](558415 '_paramFoldLogical' tmp[558404] tmp[558411]))
    }
    {
      (558423 'move' tmp[558403](558420 '_paramFoldLogical' tmp[558404] 0))
    }
    unknown call_tmp[625310] "expr temp" "maybe param" "maybe type" "temp"
    (625313 'move' call_tmp[625310](76537 call _cond_test tmp[558403]))
    if call_tmp[625310]
    {
      (76534 call boundsCheckHalt module=[255] HaltWrappers[209910] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (357920 'referenced modules list' HaltWrappers[209910])
    }
    unknown call_tmp[625315] "expr temp" "maybe param" "maybe type" "temp"
    (625318 'move' call_tmp[625315](76564 call _cond_test debugChapelRange[64195]))
    if call_tmp[625315]
    {
      (76561 call chpl_debug_writeln "*** In range standalone iterator:")
    }
    unknown call_tmp[625322] "maybe param" "maybe type" "temp"
    (625325 'move' call_tmp[625322](76569 call size _mt[243] this[76469]))
    const len[76572] "dead at end of block" "const" "insert auto destroy"
    (541191 'init var' len[76572] call_tmp[625322])
    (76575 'end of statement')
    const numChunks[76603] "dead at end of block" "const" "insert auto destroy"
    unknown tmp[558430] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558431] "maybe param" "temp"
    unknown call_tmp[625327] "expr temp" "maybe param" "maybe type" "temp"
    (625330 'move' call_tmp[625327](76594 'task_get_serial'))
    (558436 'move' tmp[558431](558434 call _cond_test call_tmp[625327]))
    if tmp[558431]
    {
      (558441 'move' tmp[558430](558438 '_paramFoldLogical' tmp[558431] 1))
    }
    {
      unknown tmp[558443] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (558445 'move' tmp[558443](76599 call _computeNumChunks len[76572]))
      (558450 'move' tmp[558430](558447 '_paramFoldLogical' tmp[558431] tmp[558443]))
    }
    (541193 'init var' numChunks[76603] tmp[558430])
    (76606 'end of statement' len[76572])
    unknown call_tmp[625332] "expr temp" "maybe param" "maybe type" "temp"
    (625335 'move' call_tmp[625332](76649 call _cond_test debugChapelRange[64195]))
    if call_tmp[625332]
    {
      (76646 call chpl_debug_writeln "*** RI: length=" len[76572] " numChunks=" numChunks[76603])
      (476131 'end of statement' len[76572] numChunks[76603])
    }
    unknown call_tmp[625337] "expr temp" "maybe param" "maybe type" "temp"
    (625340 'move' call_tmp[625337](76655 call <= numChunks[76603] 1))
    unknown call_tmp[625342] "expr temp" "maybe param" "maybe type" "temp"
    (625345 'move' call_tmp[625342](77304 call _cond_test call_tmp[625337]))
    if call_tmp[625342]
    {
      {
        unknown _indexOfInterest[76663] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76664] "expr temp" "temp"
        (76673 'move' _iterator[76664](76671 call _getIterator this[76469]))
        Defer
        {
          {
            (76689 call _freeIterator _iterator[76664])
          }
        }
        { scopeless type
          (76678 'move' _indexOfInterest[76663](76675 call iteratorIndex _iterator[76664]))
        }
        ForLoop[76665]
        {
          unknown i[76682] "index var" "insert auto destroy"
          (476135 'end of statement')
          (76684 'move' i[76682] _indexOfInterest[76663])
          (476136 'end of statement' i[76682])
          {
            unknown yret[511548] "YVV" "temp"
            (511551 'move' yret[511548](511550 'deref' i[76682]))
            (511553 yield yret[511548])
            (476138 'end of statement' i[76682])
          }
          label _continueLabel[76668]
          _indexOfInterest[76663]
          _iterator[76664]
        }
        label _breakLabel[76669]
      }
    }
    {
      {
        unknown tmpIter[76939] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[625347] "expr temp" "maybe param" "maybe type" "temp"
        (625350 'move' call_tmp[625347](76699 call chpl_build_low_bounded_range 0))
        (76942 'move' tmpIter[76939](76702 call # call_tmp[625347] numChunks[76603]))
        unknown isRngDomArr[77284] "maybe param" "temp"
        unknown tmp[420700] "maybe param" "temp"
        (420711 'move' tmp[420700](77286 call isBoundedRange tmpIter[76939]))
        unknown call_tmp[625352] "expr temp" "maybe param" "maybe type" "temp"
        (625355 'move' call_tmp[625352](420713 call _cond_invalid tmp[420700]))
        if call_tmp[625352]
        {
          (420716 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[558484] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558485] "maybe param" "temp"
        unknown call_tmp[625357] "expr temp" "maybe param" "maybe type" "temp"
        (625360 'move' call_tmp[625357](420701 call isTrue tmp[420700]))
        (558490 'move' tmp[558485](558488 call _cond_test call_tmp[625357]))
        if tmp[558485]
        {
          (558495 'move' tmp[558484](558492 '_paramFoldLogical' tmp[558485] 1))
        }
        {
          unknown tmp[420721] "maybe param" "temp"
          (420732 'move' tmp[420721](77289 call isDomain tmpIter[76939]))
          unknown call_tmp[625362] "expr temp" "maybe param" "maybe type" "temp"
          (625365 'move' call_tmp[625362](420734 call _cond_invalid tmp[420721]))
          if call_tmp[625362]
          {
            (420737 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558457] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558458] "maybe param" "temp"
          unknown call_tmp[625367] "expr temp" "maybe param" "maybe type" "temp"
          (625370 'move' call_tmp[625367](420722 call isTrue tmp[420721]))
          (558463 'move' tmp[558458](558461 call _cond_test call_tmp[625367]))
          if tmp[558458]
          {
            (558468 'move' tmp[558457](558465 '_paramFoldLogical' tmp[558458] 1))
          }
          {
            unknown tmp[558470] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[625372] "expr temp" "maybe param" "maybe type" "temp"
            (625375 'move' call_tmp[625372](77292 call isArray tmpIter[76939]))
            (558472 'move' tmp[558470](420726 call isTrue call_tmp[625372]))
            (558477 'move' tmp[558457](558474 '_paramFoldLogical' tmp[558458] tmp[558470]))
          }
          unknown tmp[558497] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (558499 'move' tmp[558497](420705 call isTrue tmp[558457]))
          (558504 'move' tmp[558484](558501 '_paramFoldLogical' tmp[558485] tmp[558497]))
        }
        (77299 'move' isRngDomArr[77284] tmp[558484])
        if isRngDomArr[77284]
        {
          const _coforallCount[77151] "const" "end count" "temp"
          (77220 'move' _coforallCount[77151](77217 call _endCountAlloc 1))
          unknown numTasks[77152] "temp"
          (77204 'move' numTasks[77152](77200 call size _mt[243] tmpIter[76939]))
          (77195 call _upEndCount _coforallCount[77151] 1 numTasks[77152])
          (476141 'end of statement')
          (77192 call chpl_resetTaskSpawn numTasks[77152])
          (476142 'end of statement')
          unknown _indexOfInterest[77159] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77160] "expr temp" "temp"
          (77169 'move' _iterator[77160](77167 call _getIterator tmpIter[76939]))
          Defer
          {
            {
              (77185 call _freeIterator _iterator[77160])
            }
          }
          { scopeless type
            (77174 'move' _indexOfInterest[77159](77171 call iteratorIndex _iterator[77160]))
          }
          ForLoop[77161]
          {
            unknown chunk[77178] "coforall index var" "index var" "insert auto destroy"
            (476144 'end of statement')
            (77180 'move' chunk[77178] _indexOfInterest[77159])
            (476145 'end of statement' chunk[77178])
            {
              {
                unknown call_tmp[625381] "expr temp" "maybe param" "maybe type" "temp"
                (625384 'move' call_tmp[625381](375655 call stridable _mt[243] this[76469]))
                unknown call_tmp[625386] "expr temp" "maybe param" "maybe type" "temp"
                (625389 'move' call_tmp[625386](76946 call _cond_test call_tmp[625381]))
                if call_tmp[625386]
                {
                  unknown call_tmp[625391] "expr temp" "maybe param" "maybe type" "temp"
                  (625394 'move' call_tmp[625391](76957 call - len[76572] 1))
                  unknown call_tmp[625396] "maybe param" "maybe type" "temp"
                  (625399 'move' call_tmp[625396](76952 call _computeBlock len[76572] numChunks[76603] chunk[77178] call_tmp[625391]))
                  const tmp[76950] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541195 'init var' tmp[76950] call_tmp[625396])
                  (76962 call _check_tuple_var_decl tmp[76950] 2)
                  (476147 'end of statement')
                  unknown call_tmp[625401] "maybe param" "maybe type" "temp"
                  (625404 'move' call_tmp[625401](76967 call tmp[76950] 0))
                  const lo[76965] "dead at end of block" "const" "insert auto destroy"
                  (541197 'init var' lo[76965] call_tmp[625401])
                  unknown call_tmp[625406] "maybe param" "maybe type" "temp"
                  (625409 'move' call_tmp[625406](76972 call tmp[76950] 1))
                  const hi[76970] "dead at end of block" "const" "insert auto destroy"
                  (541199 'init var' hi[76970] call_tmp[625406])
                  (76975 'end of statement')
                  unknown call_tmp[625411] "expr temp" "maybe param" "maybe type" "temp"
                  (625414 'move' call_tmp[625411](76982 call - lo[76965] 1))
                  unknown call_tmp[625416] "maybe param" "maybe type" "temp"
                  (625419 'move' call_tmp[625416](76979 call - hi[76970] call_tmp[625411]))
                  const mylen[76977] "dead at end of block" "const" "insert auto destroy"
                  (541201 'init var' mylen[76977] call_tmp[625416])
                  (76986 'end of statement')
                  unknown call_tmp[625423] "maybe param" "maybe type" "temp"
                  (625426 'move' call_tmp[625423](76990 call(375665 call (partial) orderToIndex _mt[243] this[76469]) lo[76965]))
                  unknown low[76988] "dead at end of block" "insert auto destroy"
                  (541203 'init var' low[76988] call_tmp[625423])
                  (76993 'end of statement')
                  unknown call_tmp[625432] "expr temp" "maybe param" "maybe type" "temp"
                  (625435 'move' call_tmp[625432](375674 call strType _mt[243] this[76469]))
                  unknown call_tmp[625437] "expr temp" "maybe param" "maybe type" "temp"
                  (625440 'move' call_tmp[625437](77004 call chpl__idxToInt low[76988]))
                  unknown call_tmp[625442] "expr temp" "maybe param" "maybe type" "temp"
                  (625445 'move' call_tmp[625442](77001 call _cast call_tmp[625432] call_tmp[625437]))
                  unknown call_tmp[625449] "expr temp" "maybe param" "maybe type" "temp"
                  (625452 'move' call_tmp[625449](375679 call stride _mt[243] this[76469]))
                  unknown call_tmp[625456] "expr temp" "maybe param" "maybe type" "temp"
                  (625459 'move' call_tmp[625456](375683 call strType _mt[243] this[76469]))
                  unknown call_tmp[625461] "expr temp" "maybe param" "maybe type" "temp"
                  (625464 'move' call_tmp[625461](77013 call - mylen[76977] 1))
                  unknown call_tmp[625466] "expr temp" "maybe param" "maybe type" "temp"
                  (625469 'move' call_tmp[625466](77010 call _cast call_tmp[625456] call_tmp[625461]))
                  unknown call_tmp[625471] "expr temp" "maybe param" "maybe type" "temp"
                  (625474 'move' call_tmp[625471](77007 call * call_tmp[625449] call_tmp[625466]))
                  unknown call_tmp[625476] "expr temp" "maybe param" "maybe type" "temp"
                  (625479 'move' call_tmp[625476](76999 call + call_tmp[625442] call_tmp[625471]))
                  unknown call_tmp[625481] "maybe param" "maybe type" "temp"
                  (625484 'move' call_tmp[625481](76997 call(375670 call (partial) chpl_intToIdx _mt[243] this[76469]) call_tmp[625476]))
                  unknown high[76995] "dead at end of block" "insert auto destroy"
                  (541205 'init var' high[76995] call_tmp[625481])
                  (77017 'end of statement' hi[76970] lo[76965] lo[76965] low[76988] mylen[76977])
                  unknown call_tmp[625488] "expr temp" "maybe param" "maybe type" "temp"
                  (625491 'move' call_tmp[625488](375688 call stride _mt[243] this[76469]))
                  unknown call_tmp[625493] "expr temp" "maybe param" "maybe type" "temp"
                  (625496 'move' call_tmp[625493](77021 call < call_tmp[625488] 0))
                  unknown call_tmp[625498] "expr temp" "maybe param" "maybe type" "temp"
                  (625501 'move' call_tmp[625498](77019 call _cond_test call_tmp[625493]))
                  if call_tmp[625498]
                  {
                    (77027 call <=> low[76988] high[76995])
                    (476153 'end of statement' low[76988] high[76995])
                  }
                  {
                    unknown _indexOfInterest[77032] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77034] "expr temp" "temp"
                    unknown call_tmp[625505] "expr temp" "maybe param" "maybe type" "temp"
                    (625508 'move' call_tmp[625505](375696 call stride _mt[243] this[76469]))
                    unknown call_tmp[625510] "expr temp" "maybe param" "maybe type" "temp"
                    (625513 'move' call_tmp[625510](77041 call chpl_direct_range_iter low[76988] high[76995] call_tmp[625505]))
                    (77036 'move' _iterator[77034](77039 call _getIterator call_tmp[625510]))
                    Defer
                    {
                      {
                        (77047 call _freeIterator _iterator[77034])
                      }
                    }
                    { scopeless type
                      (77051 'move' _indexOfInterest[77032](77054 call iteratorIndex _iterator[77034]))
                    }
                    ForLoop[77056]
                    {
                      unknown i[77059] "index var" "insert auto destroy"
                      (476157 'end of statement')
                      (77061 'move' i[77059] _indexOfInterest[77032])
                      (476158 'end of statement' i[77059])
                      {
                        unknown yret[511555] "YVV" "temp"
                        (511558 'move' yret[511555](511557 'deref' i[77059]))
                        (511560 yield yret[511555])
                        (476160 'end of statement' i[77059])
                      }
                      label _continueLabel[77067]
                      _indexOfInterest[77032]
                      _iterator[77034]
                    }
                    label _breakLabel[77069]
                  }
                }
                {
                  unknown call_tmp[625517] "expr temp" "maybe param" "maybe type" "temp"
                  (625520 'move' call_tmp[625517](77080 call _high _mt[243] this[76469]))
                  unknown call_tmp[625524] "expr temp" "maybe param" "maybe type" "temp"
                  (625527 'move' call_tmp[625524](77084 call _low _mt[243] this[76469]))
                  unknown call_tmp[625531] "expr temp" "maybe param" "maybe type" "temp"
                  (625534 'move' call_tmp[625531](77088 call _low _mt[243] this[76469]))
                  unknown call_tmp[625536] "maybe param" "maybe type" "temp"
                  (625539 'move' call_tmp[625536](77075 call _computeBlock len[76572] numChunks[76603] chunk[77178] call_tmp[625517] call_tmp[625524] call_tmp[625531]))
                  const tmp[77073] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541207 'init var' tmp[77073] call_tmp[625536])
                  (77093 call _check_tuple_var_decl tmp[77073] 2)
                  (476162 'end of statement')
                  unknown call_tmp[625541] "maybe param" "maybe type" "temp"
                  (625544 'move' call_tmp[625541](77098 call tmp[77073] 0))
                  const lo[77096] "dead at end of block" "const" "insert auto destroy"
                  (541209 'init var' lo[77096] call_tmp[625541])
                  unknown call_tmp[625546] "maybe param" "maybe type" "temp"
                  (625549 'move' call_tmp[625546](77103 call tmp[77073] 1))
                  const hi[77101] "dead at end of block" "const" "insert auto destroy"
                  (541211 'init var' hi[77101] call_tmp[625546])
                  (77106 'end of statement')
                  {
                    unknown _indexOfInterest[77108] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[77110] "expr temp" "temp"
                    unknown call_tmp[625551] "expr temp" "maybe param" "maybe type" "temp"
                    (625554 'move' call_tmp[625551](77117 call chpl_direct_range_iter lo[77096] hi[77101] 1))
                    (77112 'move' _iterator[77110](77115 call _getIterator call_tmp[625551]))
                    Defer
                    {
                      {
                        (77123 call _freeIterator _iterator[77110])
                      }
                    }
                    { scopeless type
                      (77127 'move' _indexOfInterest[77108](77130 call iteratorIndex _iterator[77110]))
                    }
                    ForLoop[77132]
                    {
                      unknown i[77135] "index var" "insert auto destroy"
                      (476164 'end of statement')
                      (77137 'move' i[77135] _indexOfInterest[77108])
                      (476165 'end of statement' i[77135])
                      {
                        unknown yret[511562] "YVV" "temp"
                        unknown call_tmp[625558] "expr temp" "maybe param" "maybe type" "temp"
                        (625561 'move' call_tmp[625558](77143 call(375706 call (partial) chpl_intToIdx _mt[243] this[76469]) i[77135]))
                        (511565 'move' yret[511562](511564 'deref' call_tmp[625558]))
                        (511567 yield yret[511562])
                        (476167 'end of statement' i[77135])
                      }
                      label _continueLabel[77145]
                      _indexOfInterest[77108]
                      _iterator[77110]
                    }
                    label _breakLabel[77147]
                  }
                }
              }
              (77154 call _downEndCount _coforallCount[77151] nil[44])
              (77153 'coforall loop')
            }
            label _continueLabel[77164]
            _indexOfInterest[77159]
            _iterator[77160]
          }
          label _breakLabel[77165]
          Defer
          {
            {
              (77207 call _endCountFree _coforallCount[77151])
            }
          }
          (77212 call _waitEndCount _coforallCount[77151] 1 numTasks[77152])
        }
        {
          const _coforallCount[77224] "const" "end count" "temp"
          (77281 'move' _coforallCount[77224](77278 call _endCountAlloc 1))
          unknown _indexOfInterest[77232] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[77233] "expr temp" "temp"
          (77242 'move' _iterator[77233](77240 call _getIterator tmpIter[76939]))
          Defer
          {
            {
              (77258 call _freeIterator _iterator[77233])
            }
          }
          { scopeless type
            (77247 'move' _indexOfInterest[77232](77244 call iteratorIndex _iterator[77233]))
          }
          ForLoop[77234]
          {
            unknown chunk[77251] "coforall index var" "index var" "insert auto destroy"
            (476173 'end of statement')
            (77253 'move' chunk[77251] _indexOfInterest[77232])
            (476174 'end of statement' chunk[77251])
            (77265 call _upEndCount _coforallCount[77224] 1)
            (476176 'end of statement')
            {
              {
                unknown call_tmp[625565] "expr temp" "maybe param" "maybe type" "temp"
                (625568 'move' call_tmp[625565](375598 call stridable _mt[243] this[76469]))
                unknown call_tmp[625570] "expr temp" "maybe param" "maybe type" "temp"
                (625573 'move' call_tmp[625570](76934 call _cond_test call_tmp[625565]))
                if call_tmp[625570]
                {
                  unknown call_tmp[625575] "expr temp" "maybe param" "maybe type" "temp"
                  (625578 'move' call_tmp[625575](76717 call - len[76572] 1))
                  unknown call_tmp[625580] "maybe param" "maybe type" "temp"
                  (625583 'move' call_tmp[625580](76719 call _computeBlock len[76572] numChunks[76603] chunk[77251] call_tmp[625575]))
                  const tmp[76720] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541213 'init var' tmp[76720] call_tmp[625580])
                  (76727 call _check_tuple_var_decl tmp[76720] 2)
                  (476177 'end of statement')
                  unknown call_tmp[625585] "maybe param" "maybe type" "temp"
                  (625588 'move' call_tmp[625585](76721 call tmp[76720] 0))
                  const lo[76705] "dead at end of block" "const" "insert auto destroy"
                  (541215 'init var' lo[76705] call_tmp[625585])
                  unknown call_tmp[625590] "maybe param" "maybe type" "temp"
                  (625593 'move' call_tmp[625590](76724 call tmp[76720] 1))
                  const hi[76707] "dead at end of block" "const" "insert auto destroy"
                  (541217 'init var' hi[76707] call_tmp[625590])
                  (76732 'end of statement')
                  unknown call_tmp[625595] "expr temp" "maybe param" "maybe type" "temp"
                  (625598 'move' call_tmp[625595](76737 call - lo[76705] 1))
                  unknown call_tmp[625600] "maybe param" "maybe type" "temp"
                  (625603 'move' call_tmp[625600](76739 call - hi[76707] call_tmp[625595]))
                  const mylen[76741] "dead at end of block" "const" "insert auto destroy"
                  (541219 'init var' mylen[76741] call_tmp[625600])
                  (76744 'end of statement')
                  unknown call_tmp[625607] "maybe param" "maybe type" "temp"
                  (625610 'move' call_tmp[625607](76748 call(375608 call (partial) orderToIndex _mt[243] this[76469]) lo[76705]))
                  unknown low[76749] "dead at end of block" "insert auto destroy"
                  (541221 'init var' low[76749] call_tmp[625607])
                  (76752 'end of statement')
                  unknown call_tmp[625616] "expr temp" "maybe param" "maybe type" "temp"
                  (625619 'move' call_tmp[625616](375618 call strType _mt[243] this[76469]))
                  unknown call_tmp[625621] "expr temp" "maybe param" "maybe type" "temp"
                  (625624 'move' call_tmp[625621](76757 call chpl__idxToInt low[76749]))
                  unknown call_tmp[625626] "expr temp" "maybe param" "maybe type" "temp"
                  (625629 'move' call_tmp[625626](76759 call _cast call_tmp[625616] call_tmp[625621]))
                  unknown call_tmp[625633] "expr temp" "maybe param" "maybe type" "temp"
                  (625636 'move' call_tmp[625633](375622 call stride _mt[243] this[76469]))
                  unknown call_tmp[625640] "expr temp" "maybe param" "maybe type" "temp"
                  (625643 'move' call_tmp[625640](375627 call strType _mt[243] this[76469]))
                  unknown call_tmp[625645] "expr temp" "maybe param" "maybe type" "temp"
                  (625648 'move' call_tmp[625645](76764 call - mylen[76741] 1))
                  unknown call_tmp[625650] "expr temp" "maybe param" "maybe type" "temp"
                  (625653 'move' call_tmp[625650](76767 call _cast call_tmp[625640] call_tmp[625645]))
                  unknown call_tmp[625655] "expr temp" "maybe param" "maybe type" "temp"
                  (625658 'move' call_tmp[625655](76769 call * call_tmp[625633] call_tmp[625650]))
                  unknown call_tmp[625660] "expr temp" "maybe param" "maybe type" "temp"
                  (625663 'move' call_tmp[625660](76771 call + call_tmp[625626] call_tmp[625655]))
                  unknown call_tmp[625665] "maybe param" "maybe type" "temp"
                  (625668 'move' call_tmp[625665](76774 call(375613 call (partial) chpl_intToIdx _mt[243] this[76469]) call_tmp[625660]))
                  unknown high[76775] "dead at end of block" "insert auto destroy"
                  (541223 'init var' high[76775] call_tmp[625665])
                  (76778 'end of statement' hi[76707] lo[76705] lo[76705] low[76749] mylen[76741])
                  unknown call_tmp[625672] "expr temp" "maybe param" "maybe type" "temp"
                  (625675 'move' call_tmp[625672](375631 call stride _mt[243] this[76469]))
                  unknown call_tmp[625677] "expr temp" "maybe param" "maybe type" "temp"
                  (625680 'move' call_tmp[625677](76781 call < call_tmp[625672] 0))
                  unknown call_tmp[625682] "expr temp" "maybe param" "maybe type" "temp"
                  (625685 'move' call_tmp[625682](76788 call _cond_test call_tmp[625677]))
                  if call_tmp[625682]
                  {
                    (76785 call <=> low[76749] high[76775])
                    (476183 'end of statement' low[76749] high[76775])
                  }
                  {
                    unknown _indexOfInterest[76805] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76806] "expr temp" "temp"
                    unknown call_tmp[625689] "expr temp" "maybe param" "maybe type" "temp"
                    (625692 'move' call_tmp[625689](375638 call stride _mt[243] this[76469]))
                    unknown call_tmp[625694] "expr temp" "maybe param" "maybe type" "temp"
                    (625697 'move' call_tmp[625694](76824 call chpl_direct_range_iter low[76749] high[76775] call_tmp[625689]))
                    (76815 'move' _iterator[76806](76813 call _getIterator call_tmp[625694]))
                    Defer
                    {
                      {
                        (76840 call _freeIterator _iterator[76806])
                      }
                    }
                    { scopeless type
                      (76829 'move' _indexOfInterest[76805](76826 call iteratorIndex _iterator[76806]))
                    }
                    ForLoop[76807]
                    {
                      unknown i[76833] "index var" "insert auto destroy"
                      (476187 'end of statement')
                      (76835 'move' i[76833] _indexOfInterest[76805])
                      (476188 'end of statement' i[76833])
                      {
                        unknown yret[511569] "YVV" "temp"
                        (511572 'move' yret[511569](511571 'deref' i[76833]))
                        (511574 yield yret[511569])
                        (476190 'end of statement' i[76833])
                      }
                      label _continueLabel[76810]
                      _indexOfInterest[76805]
                      _iterator[76806]
                    }
                    label _breakLabel[76811]
                  }
                }
                {
                  unknown call_tmp[625701] "expr temp" "maybe param" "maybe type" "temp"
                  (625704 'move' call_tmp[625701](76858 call _high _mt[243] this[76469]))
                  unknown call_tmp[625708] "expr temp" "maybe param" "maybe type" "temp"
                  (625711 'move' call_tmp[625708](76862 call _low _mt[243] this[76469]))
                  unknown call_tmp[625715] "expr temp" "maybe param" "maybe type" "temp"
                  (625718 'move' call_tmp[625715](76866 call _low _mt[243] this[76469]))
                  unknown call_tmp[625720] "maybe param" "maybe type" "temp"
                  (625723 'move' call_tmp[625720](76869 call _computeBlock len[76572] numChunks[76603] chunk[77251] call_tmp[625701] call_tmp[625708] call_tmp[625715]))
                  const tmp[76870] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541225 'init var' tmp[76870] call_tmp[625720])
                  (76877 call _check_tuple_var_decl tmp[76870] 2)
                  (476192 'end of statement')
                  unknown call_tmp[625725] "maybe param" "maybe type" "temp"
                  (625728 'move' call_tmp[625725](76871 call tmp[76870] 0))
                  const lo[76847] "dead at end of block" "const" "insert auto destroy"
                  (541227 'init var' lo[76847] call_tmp[625725])
                  unknown call_tmp[625730] "maybe param" "maybe type" "temp"
                  (625733 'move' call_tmp[625730](76874 call tmp[76870] 1))
                  const hi[76849] "dead at end of block" "const" "insert auto destroy"
                  (541229 'init var' hi[76849] call_tmp[625730])
                  (76882 'end of statement')
                  {
                    unknown _indexOfInterest[76896] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[76897] "expr temp" "temp"
                    unknown call_tmp[625735] "expr temp" "maybe param" "maybe type" "temp"
                    (625738 'move' call_tmp[625735](76911 call chpl_direct_range_iter lo[76847] hi[76849] 1))
                    (76906 'move' _iterator[76897](76904 call _getIterator call_tmp[625735]))
                    Defer
                    {
                      {
                        (76927 call _freeIterator _iterator[76897])
                      }
                    }
                    { scopeless type
                      (76916 'move' _indexOfInterest[76896](76913 call iteratorIndex _iterator[76897]))
                    }
                    ForLoop[76898]
                    {
                      unknown i[76920] "index var" "insert auto destroy"
                      (476194 'end of statement')
                      (76922 'move' i[76920] _indexOfInterest[76896])
                      (476195 'end of statement' i[76920])
                      {
                        unknown yret[511576] "YVV" "temp"
                        unknown call_tmp[625742] "expr temp" "maybe param" "maybe type" "temp"
                        (625745 'move' call_tmp[625742](76892 call(375647 call (partial) chpl_intToIdx _mt[243] this[76469]) i[76920]))
                        (511579 'move' yret[511576](511578 'deref' call_tmp[625742]))
                        (511581 yield yret[511576])
                        (476197 'end of statement' i[76920])
                      }
                      label _continueLabel[76901]
                      _indexOfInterest[76896]
                      _iterator[76897]
                    }
                    label _breakLabel[76902]
                  }
                }
              }
              (77227 call _downEndCount _coforallCount[77224] nil[44])
              (77226 'coforall loop')
            }
            label _continueLabel[77237]
            _indexOfInterest[77232]
            _iterator[77233]
          }
          label _breakLabel[77238]
          Defer
          {
            {
              (77269 call _endCountFree _coforallCount[77224])
            }
          }
          (77274 call _waitEndCount _coforallCount[77224] 1)
        }
      }
    }
    (511546 return ret[511544])
  }
  where {
    unknown tmp[420658] "maybe param" "temp"
    (420669 'move' tmp[420658](76479 call == tag[76464] standalone[451]))
    unknown call_tmp[625747] "expr temp" "maybe param" "maybe type" "temp"
    (625750 'move' call_tmp[625747](420671 call _cond_invalid tmp[420658]))
    if call_tmp[625747]
    {
      (420674 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558511] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558512] "maybe param" "temp"
    unknown call_tmp[625752] "expr temp" "maybe param" "maybe type" "temp"
    (625755 'move' call_tmp[625752](420659 call isTrue tmp[420658]))
    (558517 'move' tmp[558512](558515 call _cond_test call_tmp[625752]))
    if tmp[558512]
    {
      unknown tmp[558519] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625757] "expr temp" "maybe param" "maybe type" "temp"
      (625760 'move' call_tmp[625757](76482 call ! localeModelHasSublocales[187403]))
      (558521 'move' tmp[558519](420662 call isTrue call_tmp[625757]))
      (558526 'move' tmp[558511](558523 '_paramFoldLogical' tmp[558512] tmp[558519]))
    }
    {
      (558531 'move' tmp[558511](558528 '_paramFoldLogical' tmp[558512] 0))
    }
    (748161 call chpl_statementLevelSymbol tmp[558511])
  }
  function range[64316](?).these[77318](arg _mt[77323]:_MT[238], arg this[77320]:range[64316](?) :
  range[64316](?), param arg tag[77315]:iterKind[453]) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511585] "RVV" "temp"
    unknown call_tmp[625762] "expr temp" "maybe param" "maybe type" "temp"
    (625765 'move' call_tmp[625762](77335 call isBoundedRange this[77320]))
    unknown call_tmp[625767] "expr temp" "maybe param" "maybe type" "temp"
    (625770 'move' call_tmp[625767](77336 call ! call_tmp[625762]))
    unknown call_tmp[625772] "expr temp" "maybe param" "maybe type" "temp"
    (625775 'move' call_tmp[625772](77343 call _cond_test call_tmp[625767]))
    if call_tmp[625772]
    {
      (77341 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[420742] "maybe param" "temp"
    (420753 'move' tmp[420742] 1)
    unknown call_tmp[625777] "expr temp" "maybe param" "maybe type" "temp"
    (625780 'move' call_tmp[625777](420755 call _cond_invalid tmp[420742]))
    if call_tmp[625777]
    {
      (420758 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558538] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558539] "maybe param" "temp"
    unknown call_tmp[625782] "expr temp" "maybe param" "maybe type" "temp"
    (625785 'move' call_tmp[625782](420743 call isTrue tmp[420742]))
    (558544 'move' tmp[558539](558542 call _cond_test call_tmp[625782]))
    if tmp[558539]
    {
      unknown tmp[558546] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625789] "expr temp" "maybe param" "maybe type" "temp"
      (625792 'move' call_tmp[625789](77355 call(77351 call (partial) isAmbiguous _mt[243] this[77320])))
      (558548 'move' tmp[558546](420746 call isTrue call_tmp[625789]))
      (558553 'move' tmp[558538](558550 '_paramFoldLogical' tmp[558539] tmp[558546]))
    }
    {
      (558558 'move' tmp[558538](558555 '_paramFoldLogical' tmp[558539] 0))
    }
    unknown call_tmp[625794] "expr temp" "maybe param" "maybe type" "temp"
    (625797 'move' call_tmp[625794](77366 call _cond_test tmp[558538]))
    if call_tmp[625794]
    {
      (77364 call boundsCheckHalt module=[255] HaltWrappers[209910] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (357935 'referenced modules list' HaltWrappers[209910])
    }
    unknown call_tmp[625799] "expr temp" "maybe param" "maybe type" "temp"
    (625802 'move' call_tmp[625799](77393 call _cond_test debugChapelRange[64195]))
    if call_tmp[625799]
    {
      (77391 call chpl_debug_writeln "*** In range leader:")
    }
    unknown call_tmp[625804] "expr temp" "maybe param" "maybe type" "temp"
    (625807 'move' call_tmp[625804](357940 call here[90435]))
    unknown call_tmp[625811] "maybe param" "maybe type" "temp"
    (625814 'move' call_tmp[625811](77405 call(77401 call (partial) getChildCount _mt[243] call_tmp[625804])))
    const numSublocs[77406] "dead at end of block" "const" "insert auto destroy"
    (541231 'init var' numSublocs[77406] call_tmp[625811])
    (77409 'end of statement')
    unknown tmp[420931] "maybe param" "temp"
    (420942 'move' tmp[420931] localeModelHasSublocales[187403])
    unknown call_tmp[625816] "expr temp" "maybe param" "maybe type" "temp"
    (625819 'move' call_tmp[625816](420944 call _cond_invalid tmp[420931]))
    if call_tmp[625816]
    {
      (420947 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558565] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558566] "maybe param" "temp"
    unknown call_tmp[625821] "expr temp" "maybe param" "maybe type" "temp"
    (625824 'move' call_tmp[625821](420932 call isTrue tmp[420931]))
    (558571 'move' tmp[558566](558569 call _cond_test call_tmp[625821]))
    if tmp[558566]
    {
      unknown tmp[558573] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[625826] "expr temp" "maybe param" "maybe type" "temp"
      (625829 'move' call_tmp[625826](77413 call != numSublocs[77406] 0))
      (558575 'move' tmp[558573](420935 call isTrue call_tmp[625826]))
      (558580 'move' tmp[558565](558577 '_paramFoldLogical' tmp[558566] tmp[558573]))
    }
    {
      (558585 'move' tmp[558565](558582 '_paramFoldLogical' tmp[558566] 0))
    }
    unknown call_tmp[625831] "expr temp" "maybe param" "maybe type" "temp"
    (625834 'move' call_tmp[625831](79135 call _cond_test tmp[558565]))
    if call_tmp[625831]
    {
      unknown call_tmp[625838] "maybe param" "maybe type" "temp"
      (625841 'move' call_tmp[625838](77418 call size _mt[243] this[77320]))
      const len[77421] "dead at end of block" "const" "insert auto destroy"
      (541233 'init var' len[77421] call_tmp[625838])
      (77424 'end of statement')
      const tasksPerLocale[77427] "dead at end of block" "const" "insert auto destroy"
      (541235 'init var' tasksPerLocale[77427] dataParTasksPerLocale[93281])
      (77430 'end of statement')
      const ignoreRunning[77432] "dead at end of block" "const" "insert auto destroy"
      (541237 'init var' ignoreRunning[77432] dataParIgnoreRunningTasks[93287])
      (77435 'end of statement')
      const minIndicesPerTask[77437] "dead at end of block" "const" "insert auto destroy"
      (541239 'init var' minIndicesPerTask[77437] dataParMinGranularity[93293])
      (77440 'end of statement')
      unknown dptpl[77453] "dead at end of block" "insert auto destroy"
      unknown tmp[558592] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558593] "maybe param" "temp"
      unknown call_tmp[625843] "expr temp" "maybe param" "maybe type" "temp"
      (625846 'move' call_tmp[625843](77443 call == tasksPerLocale[77427] 0))
      (558598 'move' tmp[558593](558596 call _cond_test call_tmp[625843]))
      if tmp[558593]
      {
        unknown tmp[558600] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[625848] "expr temp" "maybe param" "maybe type" "temp"
        (625851 'move' call_tmp[625848](357943 call here[90435]))
        (558602 'move' tmp[558600](77446 call maxTaskPar _mt[243] call_tmp[625848]))
        (558607 'move' tmp[558592](558604 '_paramFoldLogical' tmp[558593] tmp[558600]))
      }
      {
        (558612 'move' tmp[558592](558609 '_paramFoldLogical' tmp[558593] tasksPerLocale[77427]))
      }
      (541241 'init var' dptpl[77453] tmp[558592])
      (77456 'end of statement')
      unknown call_tmp[625855] "expr temp" "maybe param" "maybe type" "temp"
      (625858 'move' call_tmp[625855](77458 call ! ignoreRunning[77432]))
      unknown call_tmp[625860] "expr temp" "maybe param" "maybe type" "temp"
      (625863 'move' call_tmp[625860](77495 call _cond_test call_tmp[625855]))
      if call_tmp[625860]
      {
        unknown call_tmp[625865] "expr temp" "maybe param" "maybe type" "temp"
        (625868 'move' call_tmp[625865](357945 call here[90435]))
        unknown call_tmp[625872] "expr temp" "maybe param" "maybe type" "temp"
        (625875 'move' call_tmp[625872](77467 call(77463 call (partial) runningTasks _mt[243] call_tmp[625865])))
        unknown call_tmp[625877] "maybe param" "maybe type" "temp"
        (625880 'move' call_tmp[625877](77469 call - call_tmp[625872] 1))
        const otherTasks[77471] "dead at end of block" "const" "insert auto destroy"
        (541243 'init var' otherTasks[77471] call_tmp[625877])
        (77474 'end of statement')
        unknown tmp[558619] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[558620] "maybe param" "temp"
        unknown call_tmp[625882] "expr temp" "maybe param" "maybe type" "temp"
        (625885 'move' call_tmp[625882](77479 call < otherTasks[77471] dptpl[77453]))
        (558625 'move' tmp[558620](558623 call _cond_test call_tmp[625882]))
        if tmp[558620]
        {
          unknown tmp[558627] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[625887] "expr temp" "maybe param" "maybe type" "temp"
          (625890 'move' call_tmp[625887](77483 call - dptpl[77453] otherTasks[77471]))
          (558629 'move' tmp[558627](77486 call _cast int(64)[13] call_tmp[625887]))
          (558634 'move' tmp[558619](558631 '_paramFoldLogical' tmp[558620] tmp[558627]))
        }
        {
          (558639 'move' tmp[558619](558636 '_paramFoldLogical' tmp[558620] 1))
        }
        (77492 call = dptpl[77453] tmp[558619])
        (476209 'end of statement' dptpl[77453] otherTasks[77471] dptpl[77453] dptpl[77453] otherTasks[77471])
      }
      unknown call_tmp[625892] "maybe param" "maybe type" "temp"
      (625895 'move' call_tmp[625892](77503 call min numSublocs[77406] dptpl[77453]))
      const numSublocTasks[77504] "dead at end of block" "const" "insert auto destroy"
      (541245 'init var' numSublocTasks[77504] call_tmp[625892])
      (77507 'end of statement')
      const numChunks[77523] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558646] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558647] "maybe param" "temp"
      unknown call_tmp[625897] "expr temp" "maybe param" "maybe type" "temp"
      (625900 'move' call_tmp[625897](77510 'task_get_serial'))
      (558652 'move' tmp[558647](558650 call _cond_test call_tmp[625897]))
      if tmp[558647]
      {
        (558657 'move' tmp[558646](558654 '_paramFoldLogical' tmp[558647] 1))
      }
      {
        unknown tmp[558659] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (558661 'move' tmp[558659](77519 call _computeNumChunks numSublocTasks[77504](ignoreRunning = 1) minIndicesPerTask[77437] len[77421]))
        (558666 'move' tmp[558646](558663 '_paramFoldLogical' tmp[558647] tmp[558659]))
      }
      (541247 'init var' numChunks[77523] tmp[558646])
      (77526 'end of statement' tasksPerLocale[77427] tasksPerLocale[77427] numSublocs[77406] dptpl[77453] numSublocTasks[77504] minIndicesPerTask[77437] len[77421])
      unknown call_tmp[625902] "expr temp" "maybe param" "maybe type" "temp"
      (625905 'move' call_tmp[625902](77643 call _cond_test debugDataParNuma[93407]))
      if call_tmp[625902]
      {
        (77640 call chpl_debug_writeln "### numSublocs = " numSublocs[77406] "\n" "### numTasksPerSubloc = " numSublocTasks[77504] "\n" "### ignoreRunning = " ignoreRunning[77432] "\n" "### minIndicesPerTask = " minIndicesPerTask[77437] "\n" "### numChunks = " numChunks[77523])
        (476220 'end of statement' numSublocs[77406] numSublocTasks[77504] ignoreRunning[77432] minIndicesPerTask[77437] numChunks[77523])
      }
      unknown call_tmp[625907] "expr temp" "maybe param" "maybe type" "temp"
      (625910 'move' call_tmp[625907](77649 call == numChunks[77523] 1))
      unknown call_tmp[625912] "expr temp" "maybe param" "maybe type" "temp"
      (625915 'move' call_tmp[625912](78748 call _cond_test call_tmp[625907]))
      if call_tmp[625912]
      {
        unknown yret[511589] "YVV" "temp"
        unknown call_tmp[625917] "expr temp" "maybe param" "maybe type" "temp"
        (625920 'move' call_tmp[625917](77654 call - len[77421] 1))
        unknown call_tmp[625922] "expr temp" "maybe param" "maybe type" "temp"
        (625925 'move' call_tmp[625922](77656 call chpl_build_bounded_range 0 call_tmp[625917]))
        unknown call_tmp[625927] "expr temp" "maybe param" "maybe type" "temp"
        (625930 'move' call_tmp[625927](77658 call _build_tuple call_tmp[625922]))
        (511592 'move' yret[511589](511591 'deref' call_tmp[625927]))
        (511594 yield yret[511589])
        (476226 'end of statement' len[77421])
      }
      {
        {
          unknown tmpIter[78207] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[625932] "expr temp" "maybe param" "maybe type" "temp"
          (625935 'move' call_tmp[625932](77665 call chpl_build_low_bounded_range 0))
          (78210 'move' tmpIter[78207](77668 call # call_tmp[625932] numChunks[77523]))
          unknown isRngDomArr[78728] "maybe param" "temp"
          unknown tmp[420847] "maybe param" "temp"
          (420858 'move' tmp[420847](78730 call isBoundedRange tmpIter[78207]))
          unknown call_tmp[625937] "expr temp" "maybe param" "maybe type" "temp"
          (625940 'move' call_tmp[625937](420860 call _cond_invalid tmp[420847]))
          if call_tmp[625937]
          {
            (420863 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558700] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558701] "maybe param" "temp"
          unknown call_tmp[625942] "expr temp" "maybe param" "maybe type" "temp"
          (625945 'move' call_tmp[625942](420848 call isTrue tmp[420847]))
          (558706 'move' tmp[558701](558704 call _cond_test call_tmp[625942]))
          if tmp[558701]
          {
            (558711 'move' tmp[558700](558708 '_paramFoldLogical' tmp[558701] 1))
          }
          {
            unknown tmp[420868] "maybe param" "temp"
            (420879 'move' tmp[420868](78733 call isDomain tmpIter[78207]))
            unknown call_tmp[625947] "expr temp" "maybe param" "maybe type" "temp"
            (625950 'move' call_tmp[625947](420881 call _cond_invalid tmp[420868]))
            if call_tmp[625947]
            {
              (420884 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[558673] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[558674] "maybe param" "temp"
            unknown call_tmp[625952] "expr temp" "maybe param" "maybe type" "temp"
            (625955 'move' call_tmp[625952](420869 call isTrue tmp[420868]))
            (558679 'move' tmp[558674](558677 call _cond_test call_tmp[625952]))
            if tmp[558674]
            {
              (558684 'move' tmp[558673](558681 '_paramFoldLogical' tmp[558674] 1))
            }
            {
              unknown tmp[558686] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[625957] "expr temp" "maybe param" "maybe type" "temp"
              (625960 'move' call_tmp[625957](78736 call isArray tmpIter[78207]))
              (558688 'move' tmp[558686](420873 call isTrue call_tmp[625957]))
              (558693 'move' tmp[558673](558690 '_paramFoldLogical' tmp[558674] tmp[558686]))
            }
            unknown tmp[558713] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (558715 'move' tmp[558713](420852 call isTrue tmp[558673]))
            (558720 'move' tmp[558700](558717 '_paramFoldLogical' tmp[558701] tmp[558713]))
          }
          (78743 'move' isRngDomArr[78728] tmp[558700])
          if isRngDomArr[78728]
          {
            const _coforallCount[78600] "const" "end count" "temp"
            (78665 'move' _coforallCount[78600](78662 call _endCountAlloc 0))
            unknown numTasks[78601] "temp"
            (78649 'move' numTasks[78601](78645 call size _mt[243] tmpIter[78207]))
            (78640 call _upEndCount _coforallCount[78600] 0 numTasks[78601])
            (476229 'end of statement')
            unknown _indexOfInterest[78607] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78608] "expr temp" "temp"
            (78617 'move' _iterator[78608](78615 call _getIterator tmpIter[78207]))
            Defer
            {
              {
                (78633 call _freeIterator _iterator[78608])
              }
            }
            { scopeless type
              (78622 'move' _indexOfInterest[78607](78619 call iteratorIndex _iterator[78608]))
            }
            ForLoop[78609]
            {
              unknown chunk[78626] "coforall index var" "index var" "insert auto destroy"
              (476231 'end of statement')
              (78628 'move' chunk[78626] _indexOfInterest[78607])
              (476232 'end of statement' chunk[78626])
              const tmp[78213] "const" "temp"
              unknown call_tmp[625964] "expr temp" "maybe param" "maybe type" "temp"
              (625967 'move' call_tmp[625964](357950 call here[90435]))
              unknown call_tmp[625971] "expr temp" "maybe param" "maybe type" "temp"
              (625974 'move' call_tmp[625971](78223 call(78220 call (partial) getChild _mt[243] call_tmp[625964]) chunk[78626]))
              unknown call_tmp[625976] "expr temp" "maybe param" "maybe type" "temp"
              (625979 'move' call_tmp[625976](78218 '_wide_get_locale' call_tmp[625971]))
              (78215 'move' tmp[78213](78217 'deref' call_tmp[625976]))
              {
                {
                  unknown call_tmp[625981] "expr temp" "maybe param" "maybe type" "temp"
                  (625984 'move' call_tmp[625981](78231 call _cond_test debugDataParNuma[93407]))
                  if call_tmp[625981]
                  {
                    unknown call_tmp[625986] "expr temp" "maybe param" "maybe type" "temp"
                    (625989 'move' call_tmp[625986](78240 call chpl_getSubloc))
                    unknown call_tmp[625991] "expr temp" "maybe param" "maybe type" "temp"
                    (625994 'move' call_tmp[625991](78237 call != chunk[78626] call_tmp[625986]))
                    unknown call_tmp[625996] "expr temp" "maybe param" "maybe type" "temp"
                    (625999 'move' call_tmp[625996](78235 call _cond_test call_tmp[625991]))
                    if call_tmp[625996]
                    {
                      unknown call_tmp[626001] "expr temp" "maybe param" "maybe type" "temp"
                      (626004 'move' call_tmp[626001](78249 call chpl_getSubloc))
                      (78244 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78626] ", on " call_tmp[626001] ") ***")
                      (476234 'end of statement' chunk[78626])
                    }
                  }
                  unknown call_tmp[626006] "expr temp" "maybe param" "maybe type" "temp"
                  (626009 'move' call_tmp[626006](78261 call - len[77421] 1))
                  unknown call_tmp[626011] "maybe param" "maybe type" "temp"
                  (626014 'move' call_tmp[626011](78256 call _computeBlock len[77421] numChunks[77523] chunk[78626] call_tmp[626006]))
                  const tmp[78254] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541249 'init var' tmp[78254] call_tmp[626011])
                  (78266 call _check_tuple_var_decl tmp[78254] 2)
                  (476236 'end of statement')
                  unknown call_tmp[626016] "maybe param" "maybe type" "temp"
                  (626019 'move' call_tmp[626016](78271 call tmp[78254] 0))
                  const lo[78269] "dead at end of block" "const" "insert auto destroy"
                  (541251 'init var' lo[78269] call_tmp[626016])
                  unknown call_tmp[626021] "maybe param" "maybe type" "temp"
                  (626024 'move' call_tmp[626021](78276 call tmp[78254] 1))
                  const hi[78274] "dead at end of block" "const" "insert auto destroy"
                  (541253 'init var' hi[78274] call_tmp[626021])
                  (78279 'end of statement')
                  unknown call_tmp[626026] "maybe param" "maybe type" "temp"
                  (626029 'move' call_tmp[626026](78283 call chpl_build_bounded_range lo[78269] hi[78274]))
                  const locRange[78281] "dead at end of block" "const" "insert auto destroy"
                  (541255 'init var' locRange[78281] call_tmp[626026])
                  (78287 'end of statement')
                  unknown call_tmp[626033] "maybe param" "maybe type" "temp"
                  (626036 'move' call_tmp[626033](78291 call size _mt[243] locRange[78281]))
                  const locLen[78289] "dead at end of block" "const" "insert auto destroy"
                  (541257 'init var' locLen[78289] call_tmp[626033])
                  (78295 'end of statement')
                  const numSublocTasks[78297] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[558727] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[558728] "maybe param" "temp"
                  unknown call_tmp[626038] "expr temp" "maybe param" "maybe type" "temp"
                  (626041 'move' call_tmp[626038](78302 call % dptpl[77453] numChunks[77523]))
                  unknown call_tmp[626043] "expr temp" "maybe param" "maybe type" "temp"
                  (626046 'move' call_tmp[626043](78299 call < chunk[78626] call_tmp[626038]))
                  (558733 'move' tmp[558728](558731 call _cond_test call_tmp[626043]))
                  if tmp[558728]
                  {
                    unknown tmp[558735] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[626048] "expr temp" "maybe param" "maybe type" "temp"
                    (626051 'move' call_tmp[626048](78309 call / dptpl[77453] numChunks[77523]))
                    (558737 'move' tmp[558735](78307 call + call_tmp[626048] 1))
                    (558742 'move' tmp[558727](558739 '_paramFoldLogical' tmp[558728] tmp[558735]))
                  }
                  {
                    unknown tmp[558744] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (558746 'move' tmp[558744](78315 call / dptpl[77453] numChunks[77523]))
                    (558751 'move' tmp[558727](558748 '_paramFoldLogical' tmp[558728] tmp[558744]))
                  }
                  (541259 'init var' numSublocTasks[78297] tmp[558727])
                  (78320 'end of statement')
                  unknown call_tmp[626053] "maybe param" "maybe type" "temp"
                  (626056 'move' call_tmp[626053](78324 call _computeNumChunks numSublocTasks[78297](ignoreRunning = 1) minIndicesPerTask[77437] locLen[78289]))
                  const numTasks[78322] "dead at end of block" "const" "insert auto destroy"
                  (541261 'init var' numTasks[78322] call_tmp[626053])
                  (78331 'end of statement' lo[78269] hi[78274] locRange[78281] chunk[78626] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] numSublocTasks[78297] minIndicesPerTask[77437] locLen[78289])
                  {
                    unknown tmpIter[78333] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[626058] "expr temp" "maybe param" "maybe type" "temp"
                    (626061 'move' call_tmp[626058](78340 call chpl_build_low_bounded_range 0))
                    (78335 'move' tmpIter[78333](78338 call # call_tmp[626058] numTasks[78322]))
                    unknown isRngDomArr[78343] "maybe param" "temp"
                    unknown tmp[420805] "maybe param" "temp"
                    (420816 'move' tmp[420805](78350 call isBoundedRange tmpIter[78333]))
                    unknown call_tmp[626063] "expr temp" "maybe param" "maybe type" "temp"
                    (626066 'move' call_tmp[626063](420818 call _cond_invalid tmp[420805]))
                    if call_tmp[626063]
                    {
                      (420821 call compilerError "cannot promote short-circuiting || operator")
                    }
                    unknown tmp[558785] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[558786] "maybe param" "temp"
                    unknown call_tmp[626068] "expr temp" "maybe param" "maybe type" "temp"
                    (626071 'move' call_tmp[626068](420806 call isTrue tmp[420805]))
                    (558791 'move' tmp[558786](558789 call _cond_test call_tmp[626068]))
                    if tmp[558786]
                    {
                      (558796 'move' tmp[558785](558793 '_paramFoldLogical' tmp[558786] 1))
                    }
                    {
                      unknown tmp[420826] "maybe param" "temp"
                      (420837 'move' tmp[420826](78355 call isDomain tmpIter[78333]))
                      unknown call_tmp[626073] "expr temp" "maybe param" "maybe type" "temp"
                      (626076 'move' call_tmp[626073](420839 call _cond_invalid tmp[420826]))
                      if call_tmp[626073]
                      {
                        (420842 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[558758] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[558759] "maybe param" "temp"
                      unknown call_tmp[626078] "expr temp" "maybe param" "maybe type" "temp"
                      (626081 'move' call_tmp[626078](420827 call isTrue tmp[420826]))
                      (558764 'move' tmp[558759](558762 call _cond_test call_tmp[626078]))
                      if tmp[558759]
                      {
                        (558769 'move' tmp[558758](558766 '_paramFoldLogical' tmp[558759] 1))
                      }
                      {
                        unknown tmp[558771] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        unknown call_tmp[626083] "expr temp" "maybe param" "maybe type" "temp"
                        (626086 'move' call_tmp[626083](78358 call isArray tmpIter[78333]))
                        (558773 'move' tmp[558771](420831 call isTrue call_tmp[626083]))
                        (558778 'move' tmp[558758](558775 '_paramFoldLogical' tmp[558759] tmp[558771]))
                      }
                      unknown tmp[558798] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (558800 'move' tmp[558798](420810 call isTrue tmp[558758]))
                      (558805 'move' tmp[558785](558802 '_paramFoldLogical' tmp[558786] tmp[558798]))
                    }
                    (78345 'move' isRngDomArr[78343] tmp[558785])
                    if isRngDomArr[78343]
                    {
                      const _coforallCount[78362] "const" "end count" "temp"
                      (78364 'move' _coforallCount[78362](78367 call _endCountAlloc 1))
                      unknown numTasks[78369] "temp"
                      (78371 'move' numTasks[78369](78374 call size _mt[243] tmpIter[78333]))
                      (78378 call _upEndCount _coforallCount[78362] 1 numTasks[78369])
                      (476251 'end of statement')
                      (78383 call chpl_resetTaskSpawn numTasks[78369])
                      (476252 'end of statement')
                      unknown _indexOfInterest[78385] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78387] "expr temp" "temp"
                      (78389 'move' _iterator[78387](78392 call _getIterator tmpIter[78333]))
                      Defer
                      {
                        {
                          (78396 call _freeIterator _iterator[78387])
                        }
                      }
                      { scopeless type
                        (78400 'move' _indexOfInterest[78385](78403 call iteratorIndex _iterator[78387]))
                      }
                      ForLoop[78405]
                      {
                        unknown core[78408] "coforall index var" "index var" "insert auto destroy"
                        (476254 'end of statement')
                        (78410 'move' core[78408] _indexOfInterest[78385])
                        (476255 'end of statement' core[78408])
                        {
                          {
                            unknown call_tmp[626090] "maybe param" "maybe type" "temp"
                            (626093 'move' call_tmp[626090](78419 call _computeBlock locLen[78289] numTasks[78322] core[78408] hi[78274] lo[78269] lo[78269]))
                            const tmp[78417] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541263 'init var' tmp[78417] call_tmp[626090])
                            (78428 call _check_tuple_var_decl tmp[78417] 2)
                            (476257 'end of statement')
                            unknown call_tmp[626095] "maybe param" "maybe type" "temp"
                            (626098 'move' call_tmp[626095](78433 call tmp[78417] 0))
                            const low[78431] "dead at end of block" "const" "insert auto destroy"
                            (541265 'init var' low[78431] call_tmp[626095])
                            unknown call_tmp[626100] "maybe param" "maybe type" "temp"
                            (626103 'move' call_tmp[626100](78438 call tmp[78417] 1))
                            const high[78436] "dead at end of block" "const" "insert auto destroy"
                            (541267 'init var' high[78436] call_tmp[626100])
                            (78441 'end of statement')
                            unknown call_tmp[626105] "expr temp" "maybe param" "maybe type" "temp"
                            (626108 'move' call_tmp[626105](78443 call _cond_test debugDataParNuma[93407]))
                            if call_tmp[626105]
                            {
                              unknown call_tmp[626110] "expr temp" "maybe param" "maybe type" "temp"
                              (626113 'move' call_tmp[626110](78457 call chpl_build_bounded_range low[78431] high[78436]))
                              (78447 call chpl_debug_writeln "### chunk = " chunk[78626] "  core = " core[78408] "  " "locRange = " locRange[78281] "  coreRange = " call_tmp[626110])
                              (476258 'end of statement' chunk[78626] core[78408] locRange[78281] low[78431] high[78436])
                            }
                            unknown yret[511596] "YVV" "temp"
                            unknown call_tmp[626115] "expr temp" "maybe param" "maybe type" "temp"
                            (626118 'move' call_tmp[626115](78465 call chpl_build_bounded_range low[78431] high[78436]))
                            unknown call_tmp[626120] "expr temp" "maybe param" "maybe type" "temp"
                            (626123 'move' call_tmp[626120](78463 call _build_tuple call_tmp[626115]))
                            (511599 'move' yret[511596](511598 'deref' call_tmp[626120]))
                            (511601 yield yret[511596])
                            (476264 'end of statement' low[78431] high[78436])
                          }
                          (78469 call _downEndCount _coforallCount[78362] nil[44])
                          (78414 'coforall loop')
                        }
                        label _continueLabel[78472]
                        _indexOfInterest[78385]
                        _iterator[78387]
                      }
                      label _breakLabel[78474]
                      Defer
                      {
                        {
                          (78478 call _endCountFree _coforallCount[78362])
                        }
                      }
                      (78482 call _waitEndCount _coforallCount[78362] 1 numTasks[78369])
                    }
                    {
                      const _coforallCount[78487] "const" "end count" "temp"
                      (78489 'move' _coforallCount[78487](78492 call _endCountAlloc 1))
                      unknown _indexOfInterest[78494] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78496] "expr temp" "temp"
                      (78498 'move' _iterator[78496](78501 call _getIterator tmpIter[78333]))
                      Defer
                      {
                        {
                          (78505 call _freeIterator _iterator[78496])
                        }
                      }
                      { scopeless type
                        (78509 'move' _indexOfInterest[78494](78512 call iteratorIndex _iterator[78496]))
                      }
                      ForLoop[78514]
                      {
                        unknown core[78517] "coforall index var" "index var" "insert auto destroy"
                        (476271 'end of statement')
                        (78519 'move' core[78517] _indexOfInterest[78494])
                        (476272 'end of statement' core[78517])
                        (78523 call _upEndCount _coforallCount[78487] 1)
                        (476274 'end of statement')
                        {
                          {
                            unknown call_tmp[626125] "maybe param" "maybe type" "temp"
                            (626128 'move' call_tmp[626125](78532 call _computeBlock locLen[78289] numTasks[78322] core[78517] hi[78274] lo[78269] lo[78269]))
                            const tmp[78530] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541269 'init var' tmp[78530] call_tmp[626125])
                            (78541 call _check_tuple_var_decl tmp[78530] 2)
                            (476275 'end of statement')
                            unknown call_tmp[626130] "maybe param" "maybe type" "temp"
                            (626133 'move' call_tmp[626130](78546 call tmp[78530] 0))
                            const low[78544] "dead at end of block" "const" "insert auto destroy"
                            (541271 'init var' low[78544] call_tmp[626130])
                            unknown call_tmp[626135] "maybe param" "maybe type" "temp"
                            (626138 'move' call_tmp[626135](78551 call tmp[78530] 1))
                            const high[78549] "dead at end of block" "const" "insert auto destroy"
                            (541273 'init var' high[78549] call_tmp[626135])
                            (78554 'end of statement')
                            unknown call_tmp[626140] "expr temp" "maybe param" "maybe type" "temp"
                            (626143 'move' call_tmp[626140](78556 call _cond_test debugDataParNuma[93407]))
                            if call_tmp[626140]
                            {
                              unknown call_tmp[626145] "expr temp" "maybe param" "maybe type" "temp"
                              (626148 'move' call_tmp[626145](78570 call chpl_build_bounded_range low[78544] high[78549]))
                              (78560 call chpl_debug_writeln "### chunk = " chunk[78626] "  core = " core[78517] "  " "locRange = " locRange[78281] "  coreRange = " call_tmp[626145])
                              (476276 'end of statement' chunk[78626] core[78517] locRange[78281] low[78544] high[78549])
                            }
                            unknown yret[511603] "YVV" "temp"
                            unknown call_tmp[626150] "expr temp" "maybe param" "maybe type" "temp"
                            (626153 'move' call_tmp[626150](78578 call chpl_build_bounded_range low[78544] high[78549]))
                            unknown call_tmp[626155] "expr temp" "maybe param" "maybe type" "temp"
                            (626158 'move' call_tmp[626155](78576 call _build_tuple call_tmp[626150]))
                            (511606 'move' yret[511603](511605 'deref' call_tmp[626155]))
                            (511608 yield yret[511603])
                            (476282 'end of statement' low[78544] high[78549])
                          }
                          (78582 call _downEndCount _coforallCount[78487] nil[44])
                          (78527 'coforall loop')
                        }
                        label _continueLabel[78585]
                        _indexOfInterest[78494]
                        _iterator[78496]
                      }
                      label _breakLabel[78587]
                      Defer
                      {
                        {
                          (78591 call _endCountFree _coforallCount[78487])
                        }
                      }
                      (78595 call _waitEndCount _coforallCount[78487] 1)
                    }
                  }
                }
                (78602 call _downEndCount _coforallCount[78600] nil[44])
                (78226 'coforall on block' 1 tmp[78213])
              }
              label _continueLabel[78612]
              _indexOfInterest[78607]
              _iterator[78608]
            }
            label _breakLabel[78613]
            Defer
            {
              {
                (78652 call _endCountFree _coforallCount[78600])
              }
            }
            (78657 call _waitEndCount _coforallCount[78600] 0 numTasks[78601])
          }
          {
            const _coforallCount[78669] "const" "end count" "temp"
            (78725 'move' _coforallCount[78669](78722 call _endCountAlloc 0))
            unknown _indexOfInterest[78676] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78677] "expr temp" "temp"
            (78686 'move' _iterator[78677](78684 call _getIterator tmpIter[78207]))
            Defer
            {
              {
                (78702 call _freeIterator _iterator[78677])
              }
            }
            { scopeless type
              (78691 'move' _indexOfInterest[78676](78688 call iteratorIndex _iterator[78677]))
            }
            ForLoop[78678]
            {
              unknown chunk[78695] "coforall index var" "index var" "insert auto destroy"
              (476292 'end of statement')
              (78697 'move' chunk[78695] _indexOfInterest[78676])
              (476293 'end of statement' chunk[78695])
              (78709 call _upEndCount _coforallCount[78669] 0)
              (476295 'end of statement')
              const tmp[78196] "const" "temp"
              unknown call_tmp[626160] "expr temp" "maybe param" "maybe type" "temp"
              (626163 'move' call_tmp[626160](357947 call here[90435]))
              unknown call_tmp[626167] "expr temp" "maybe param" "maybe type" "temp"
              (626170 'move' call_tmp[626167](77678 call(77673 call (partial) getChild _mt[243] call_tmp[626160]) chunk[78695]))
              unknown call_tmp[626172] "expr temp" "maybe param" "maybe type" "temp"
              (626175 'move' call_tmp[626172](78193 '_wide_get_locale' call_tmp[626167]))
              (78198 'move' tmp[78196](78194 'deref' call_tmp[626172]))
              {
                {
                  unknown call_tmp[626177] "expr temp" "maybe param" "maybe type" "temp"
                  (626180 'move' call_tmp[626177](77751 call _cond_test debugDataParNuma[93407]))
                  if call_tmp[626177]
                  {
                    unknown call_tmp[626182] "expr temp" "maybe param" "maybe type" "temp"
                    (626185 'move' call_tmp[626182](77683 call chpl_getSubloc))
                    unknown call_tmp[626187] "expr temp" "maybe param" "maybe type" "temp"
                    (626190 'move' call_tmp[626187](77684 call != chunk[78695] call_tmp[626182]))
                    unknown call_tmp[626192] "expr temp" "maybe param" "maybe type" "temp"
                    (626195 'move' call_tmp[626192](77745 call _cond_test call_tmp[626187]))
                    if call_tmp[626192]
                    {
                      unknown call_tmp[626197] "expr temp" "maybe param" "maybe type" "temp"
                      (626200 'move' call_tmp[626197](77725 call chpl_getSubloc))
                      (77743 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[78695] ", on " call_tmp[626197] ") ***")
                      (476296 'end of statement' chunk[78695])
                    }
                  }
                  unknown call_tmp[626202] "expr temp" "maybe param" "maybe type" "temp"
                  (626205 'move' call_tmp[626202](77768 call - len[77421] 1))
                  unknown call_tmp[626207] "maybe param" "maybe type" "temp"
                  (626210 'move' call_tmp[626207](77770 call _computeBlock len[77421] numChunks[77523] chunk[78695] call_tmp[626202]))
                  const tmp[77771] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541275 'init var' tmp[77771] call_tmp[626207])
                  (77778 call _check_tuple_var_decl tmp[77771] 2)
                  (476298 'end of statement')
                  unknown call_tmp[626212] "maybe param" "maybe type" "temp"
                  (626215 'move' call_tmp[626212](77772 call tmp[77771] 0))
                  const lo[77756] "dead at end of block" "const" "insert auto destroy"
                  (541277 'init var' lo[77756] call_tmp[626212])
                  unknown call_tmp[626217] "maybe param" "maybe type" "temp"
                  (626220 'move' call_tmp[626217](77775 call tmp[77771] 1))
                  const hi[77758] "dead at end of block" "const" "insert auto destroy"
                  (541279 'init var' hi[77758] call_tmp[626217])
                  (77783 'end of statement')
                  unknown call_tmp[626222] "maybe param" "maybe type" "temp"
                  (626225 'move' call_tmp[626222](77786 call chpl_build_bounded_range lo[77756] hi[77758]))
                  const locRange[77788] "dead at end of block" "const" "insert auto destroy"
                  (541281 'init var' locRange[77788] call_tmp[626222])
                  (77791 'end of statement')
                  unknown call_tmp[626229] "maybe param" "maybe type" "temp"
                  (626232 'move' call_tmp[626229](77793 call size _mt[243] locRange[77788]))
                  const locLen[77796] "dead at end of block" "const" "insert auto destroy"
                  (541283 'init var' locLen[77796] call_tmp[626229])
                  (77799 'end of statement')
                  const numSublocTasks[77821] "dead at end of block" "const" "insert auto destroy"
                  unknown tmp[558812] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                  unknown tmp[558813] "maybe param" "temp"
                  unknown call_tmp[626234] "expr temp" "maybe param" "maybe type" "temp"
                  (626237 'move' call_tmp[626234](77803 call % dptpl[77453] numChunks[77523]))
                  unknown call_tmp[626239] "expr temp" "maybe param" "maybe type" "temp"
                  (626242 'move' call_tmp[626239](77805 call < chunk[78695] call_tmp[626234]))
                  (558818 'move' tmp[558813](558816 call _cond_test call_tmp[626239]))
                  if tmp[558813]
                  {
                    unknown tmp[558820] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    unknown call_tmp[626244] "expr temp" "maybe param" "maybe type" "temp"
                    (626247 'move' call_tmp[626244](77809 call / dptpl[77453] numChunks[77523]))
                    (558822 'move' tmp[558820](77812 call + call_tmp[626244] 1))
                    (558827 'move' tmp[558812](558824 '_paramFoldLogical' tmp[558813] tmp[558820]))
                  }
                  {
                    unknown tmp[558829] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                    (558831 'move' tmp[558829](77816 call / dptpl[77453] numChunks[77523]))
                    (558836 'move' tmp[558812](558833 '_paramFoldLogical' tmp[558813] tmp[558829]))
                  }
                  (541285 'init var' numSublocTasks[77821] tmp[558812])
                  (77824 'end of statement')
                  unknown call_tmp[626249] "maybe param" "maybe type" "temp"
                  (626252 'move' call_tmp[626249](77832 call _computeNumChunks numSublocTasks[77821](ignoreRunning = 1) minIndicesPerTask[77437] locLen[77796]))
                  const numTasks[77833] "dead at end of block" "const" "insert auto destroy"
                  (541287 'init var' numTasks[77833] call_tmp[626249])
                  (77836 'end of statement' lo[77756] hi[77758] locRange[77788] chunk[78695] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] dptpl[77453] numChunks[77523] numSublocTasks[77821] minIndicesPerTask[77437] locLen[77796])
                  {
                    unknown tmpIter[77982] "expr temp" "maybe ref" "no copy" "temp"
                    unknown call_tmp[626254] "expr temp" "maybe param" "maybe type" "temp"
                    (626257 'move' call_tmp[626254](77839 call chpl_build_low_bounded_range 0))
                    (77985 'move' tmpIter[77982](77842 call # call_tmp[626254] numTasks[77833]))
                    unknown isRngDomArr[78174] "maybe param" "temp"
                    unknown tmp[420763] "maybe param" "temp"
                    (420774 'move' tmp[420763](78176 call isBoundedRange tmpIter[77982]))
                    unknown call_tmp[626259] "expr temp" "maybe param" "maybe type" "temp"
                    (626262 'move' call_tmp[626259](420776 call _cond_invalid tmp[420763]))
                    if call_tmp[626259]
                    {
                      (420779 call compilerError "cannot promote short-circuiting || operator")
                    }
                    unknown tmp[558870] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[558871] "maybe param" "temp"
                    unknown call_tmp[626264] "expr temp" "maybe param" "maybe type" "temp"
                    (626267 'move' call_tmp[626264](420764 call isTrue tmp[420763]))
                    (558876 'move' tmp[558871](558874 call _cond_test call_tmp[626264]))
                    if tmp[558871]
                    {
                      (558881 'move' tmp[558870](558878 '_paramFoldLogical' tmp[558871] 1))
                    }
                    {
                      unknown tmp[420784] "maybe param" "temp"
                      (420795 'move' tmp[420784](78179 call isDomain tmpIter[77982]))
                      unknown call_tmp[626269] "expr temp" "maybe param" "maybe type" "temp"
                      (626272 'move' call_tmp[626269](420797 call _cond_invalid tmp[420784]))
                      if call_tmp[626269]
                      {
                        (420800 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[558843] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[558844] "maybe param" "temp"
                      unknown call_tmp[626274] "expr temp" "maybe param" "maybe type" "temp"
                      (626277 'move' call_tmp[626274](420785 call isTrue tmp[420784]))
                      (558849 'move' tmp[558844](558847 call _cond_test call_tmp[626274]))
                      if tmp[558844]
                      {
                        (558854 'move' tmp[558843](558851 '_paramFoldLogical' tmp[558844] 1))
                      }
                      {
                        unknown tmp[558856] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        unknown call_tmp[626279] "expr temp" "maybe param" "maybe type" "temp"
                        (626282 'move' call_tmp[626279](78182 call isArray tmpIter[77982]))
                        (558858 'move' tmp[558856](420789 call isTrue call_tmp[626279]))
                        (558863 'move' tmp[558843](558860 '_paramFoldLogical' tmp[558844] tmp[558856]))
                      }
                      unknown tmp[558883] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (558885 'move' tmp[558883](420768 call isTrue tmp[558843]))
                      (558890 'move' tmp[558870](558887 '_paramFoldLogical' tmp[558871] tmp[558883]))
                    }
                    (78189 'move' isRngDomArr[78174] tmp[558870])
                    if isRngDomArr[78174]
                    {
                      const _coforallCount[78041] "const" "end count" "temp"
                      (78110 'move' _coforallCount[78041](78107 call _endCountAlloc 1))
                      unknown numTasks[78042] "temp"
                      (78094 'move' numTasks[78042](78090 call size _mt[243] tmpIter[77982]))
                      (78085 call _upEndCount _coforallCount[78041] 1 numTasks[78042])
                      (476313 'end of statement')
                      (78082 call chpl_resetTaskSpawn numTasks[78042])
                      (476314 'end of statement')
                      unknown _indexOfInterest[78049] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78050] "expr temp" "temp"
                      (78059 'move' _iterator[78050](78057 call _getIterator tmpIter[77982]))
                      Defer
                      {
                        {
                          (78075 call _freeIterator _iterator[78050])
                        }
                      }
                      { scopeless type
                        (78064 'move' _indexOfInterest[78049](78061 call iteratorIndex _iterator[78050]))
                      }
                      ForLoop[78051]
                      {
                        unknown core[78068] "coforall index var" "index var" "insert auto destroy"
                        (476316 'end of statement')
                        (78070 'move' core[78068] _indexOfInterest[78049])
                        (476317 'end of statement' core[78068])
                        {
                          {
                            unknown call_tmp[626286] "maybe param" "maybe type" "temp"
                            (626289 'move' call_tmp[626286](77991 call _computeBlock locLen[77796] numTasks[77833] core[78068] hi[77758] lo[77756] lo[77756]))
                            const tmp[77989] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541289 'init var' tmp[77989] call_tmp[626286])
                            (78000 call _check_tuple_var_decl tmp[77989] 2)
                            (476319 'end of statement')
                            unknown call_tmp[626291] "maybe param" "maybe type" "temp"
                            (626294 'move' call_tmp[626291](78005 call tmp[77989] 0))
                            const low[78003] "dead at end of block" "const" "insert auto destroy"
                            (541291 'init var' low[78003] call_tmp[626291])
                            unknown call_tmp[626296] "maybe param" "maybe type" "temp"
                            (626299 'move' call_tmp[626296](78010 call tmp[77989] 1))
                            const high[78008] "dead at end of block" "const" "insert auto destroy"
                            (541293 'init var' high[78008] call_tmp[626296])
                            (78013 'end of statement')
                            unknown call_tmp[626301] "expr temp" "maybe param" "maybe type" "temp"
                            (626304 'move' call_tmp[626301](78015 call _cond_test debugDataParNuma[93407]))
                            if call_tmp[626301]
                            {
                              unknown call_tmp[626306] "expr temp" "maybe param" "maybe type" "temp"
                              (626309 'move' call_tmp[626306](78029 call chpl_build_bounded_range low[78003] high[78008]))
                              (78019 call chpl_debug_writeln "### chunk = " chunk[78695] "  core = " core[78068] "  " "locRange = " locRange[77788] "  coreRange = " call_tmp[626306])
                              (476320 'end of statement' chunk[78695] core[78068] locRange[77788] low[78003] high[78008])
                            }
                            unknown yret[511610] "YVV" "temp"
                            unknown call_tmp[626311] "expr temp" "maybe param" "maybe type" "temp"
                            (626314 'move' call_tmp[626311](78037 call chpl_build_bounded_range low[78003] high[78008]))
                            unknown call_tmp[626316] "expr temp" "maybe param" "maybe type" "temp"
                            (626319 'move' call_tmp[626316](78035 call _build_tuple call_tmp[626311]))
                            (511613 'move' yret[511610](511612 'deref' call_tmp[626316]))
                            (511615 yield yret[511610])
                            (476326 'end of statement' low[78003] high[78008])
                          }
                          (78044 call _downEndCount _coforallCount[78041] nil[44])
                          (78043 'coforall loop')
                        }
                        label _continueLabel[78054]
                        _indexOfInterest[78049]
                        _iterator[78050]
                      }
                      label _breakLabel[78055]
                      Defer
                      {
                        {
                          (78097 call _endCountFree _coforallCount[78041])
                        }
                      }
                      (78102 call _waitEndCount _coforallCount[78041] 1 numTasks[78042])
                    }
                    {
                      const _coforallCount[78114] "const" "end count" "temp"
                      (78171 'move' _coforallCount[78114](78168 call _endCountAlloc 1))
                      unknown _indexOfInterest[78122] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[78123] "expr temp" "temp"
                      (78132 'move' _iterator[78123](78130 call _getIterator tmpIter[77982]))
                      Defer
                      {
                        {
                          (78148 call _freeIterator _iterator[78123])
                        }
                      }
                      { scopeless type
                        (78137 'move' _indexOfInterest[78122](78134 call iteratorIndex _iterator[78123]))
                      }
                      ForLoop[78124]
                      {
                        unknown core[78141] "coforall index var" "index var" "insert auto destroy"
                        (476333 'end of statement')
                        (78143 'move' core[78141] _indexOfInterest[78122])
                        (476334 'end of statement' core[78141])
                        (78155 call _upEndCount _coforallCount[78114] 1)
                        (476336 'end of statement')
                        {
                          {
                            unknown call_tmp[626321] "maybe param" "maybe type" "temp"
                            (626324 'move' call_tmp[626321](77857 call _computeBlock locLen[77796] numTasks[77833] core[78141] hi[77758] lo[77756] lo[77756]))
                            const tmp[77858] "dead at end of block" "const" "insert auto destroy" "temp"
                            (541295 'init var' tmp[77858] call_tmp[626321])
                            (77865 call _check_tuple_var_decl tmp[77858] 2)
                            (476337 'end of statement')
                            unknown call_tmp[626326] "maybe param" "maybe type" "temp"
                            (626329 'move' call_tmp[626326](77859 call tmp[77858] 0))
                            const low[77844] "dead at end of block" "const" "insert auto destroy"
                            (541297 'init var' low[77844] call_tmp[626326])
                            unknown call_tmp[626331] "maybe param" "maybe type" "temp"
                            (626334 'move' call_tmp[626331](77862 call tmp[77858] 1))
                            const high[77846] "dead at end of block" "const" "insert auto destroy"
                            (541299 'init var' high[77846] call_tmp[626331])
                            (77870 'end of statement')
                            unknown call_tmp[626336] "expr temp" "maybe param" "maybe type" "temp"
                            (626339 'move' call_tmp[626336](77970 call _cond_test debugDataParNuma[93407]))
                            if call_tmp[626336]
                            {
                              unknown call_tmp[626341] "expr temp" "maybe param" "maybe type" "temp"
                              (626344 'move' call_tmp[626341](77965 call chpl_build_bounded_range low[77844] high[77846]))
                              (77967 call chpl_debug_writeln "### chunk = " chunk[78695] "  core = " core[78141] "  " "locRange = " locRange[77788] "  coreRange = " call_tmp[626341])
                              (476338 'end of statement' chunk[78695] core[78141] locRange[77788] low[77844] high[77846])
                            }
                            unknown yret[511617] "YVV" "temp"
                            unknown call_tmp[626346] "expr temp" "maybe param" "maybe type" "temp"
                            (626349 'move' call_tmp[626346](77976 call chpl_build_bounded_range low[77844] high[77846]))
                            unknown call_tmp[626351] "expr temp" "maybe param" "maybe type" "temp"
                            (626354 'move' call_tmp[626351](77978 call _build_tuple call_tmp[626346]))
                            (511620 'move' yret[511617](511619 'deref' call_tmp[626351]))
                            (511622 yield yret[511617])
                            (476344 'end of statement' low[77844] high[77846])
                          }
                          (78117 call _downEndCount _coforallCount[78114] nil[44])
                          (78116 'coforall loop')
                        }
                        label _continueLabel[78127]
                        _indexOfInterest[78122]
                        _iterator[78123]
                      }
                      label _breakLabel[78128]
                      Defer
                      {
                        {
                          (78159 call _endCountFree _coforallCount[78114])
                        }
                      }
                      (78164 call _waitEndCount _coforallCount[78114] 1)
                    }
                  }
                }
                (78671 call _downEndCount _coforallCount[78669] nil[44])
                (78201 'coforall on block' 1 tmp[78196])
              }
              label _continueLabel[78681]
              _indexOfInterest[78676]
              _iterator[78677]
            }
            label _breakLabel[78682]
            Defer
            {
              {
                (78713 call _endCountFree _coforallCount[78669])
              }
            }
            (78718 call _waitEndCount _coforallCount[78669] 0)
          }
        }
      }
    }
    {
      unknown call_tmp[626358] "maybe param" "maybe type" "temp"
      (626361 'move' call_tmp[626358](78753 call size _mt[243] this[77320]))
      unknown v[78756] "dead at end of block" "insert auto destroy"
      (541301 'init var' v[78756] call_tmp[626358])
      (78759 'end of statement')
      const numChunks[78772] "dead at end of block" "const" "insert auto destroy"
      unknown tmp[558897] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[558898] "maybe param" "temp"
      unknown call_tmp[626363] "expr temp" "maybe param" "maybe type" "temp"
      (626366 'move' call_tmp[626363](78763 'task_get_serial'))
      (558903 'move' tmp[558898](558901 call _cond_test call_tmp[626363]))
      if tmp[558898]
      {
        (558908 'move' tmp[558897](558905 '_paramFoldLogical' tmp[558898] 1))
      }
      {
        unknown tmp[558910] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (558912 'move' tmp[558910](78768 call _computeNumChunks v[78756]))
        (558917 'move' tmp[558897](558914 '_paramFoldLogical' tmp[558898] tmp[558910]))
      }
      (541303 'init var' numChunks[78772] tmp[558897])
      (78775 'end of statement' v[78756])
      unknown call_tmp[626368] "expr temp" "maybe param" "maybe type" "temp"
      (626371 'move' call_tmp[626368](78825 call _cond_test debugChapelRange[64195]))
      if call_tmp[626368]
      {
        (78783 call chpl_debug_writeln "*** RI: length=" v[78756] " numChunks=" numChunks[78772])
        (476354 'end of statement' v[78756] numChunks[78772])
        (78823 call chpl_debug_writeln "*** RI: Using " numChunks[78772] " chunk(s)")
        (476357 'end of statement' numChunks[78772])
      }
      unknown call_tmp[626373] "expr temp" "maybe param" "maybe type" "temp"
      (626376 'move' call_tmp[626373](78831 call == numChunks[78772] 1))
      unknown call_tmp[626378] "expr temp" "maybe param" "maybe type" "temp"
      (626381 'move' call_tmp[626378](79130 call _cond_test call_tmp[626373]))
      if call_tmp[626378]
      {
        unknown yret[511624] "YVV" "temp"
        unknown call_tmp[626383] "expr temp" "maybe param" "maybe type" "temp"
        (626386 'move' call_tmp[626383](78836 call - v[78756] 1))
        unknown call_tmp[626388] "expr temp" "maybe param" "maybe type" "temp"
        (626391 'move' call_tmp[626388](78838 call chpl_build_bounded_range 0 call_tmp[626383]))
        unknown call_tmp[626393] "expr temp" "maybe param" "maybe type" "temp"
        (626396 'move' call_tmp[626393](78840 call _build_tuple call_tmp[626388]))
        (511627 'move' yret[511624](511626 'deref' call_tmp[626393]))
        (511629 yield yret[511624])
        (476359 'end of statement' v[78756])
      }
      {
        {
          unknown tmpIter[78921] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[626398] "expr temp" "maybe param" "maybe type" "temp"
          (626401 'move' call_tmp[626398](78846 call chpl_build_low_bounded_range 0))
          (78924 'move' tmpIter[78921](78849 call # call_tmp[626398] numChunks[78772]))
          unknown isRngDomArr[79110] "maybe param" "temp"
          unknown tmp[420889] "maybe param" "temp"
          (420900 'move' tmp[420889](79112 call isBoundedRange tmpIter[78921]))
          unknown call_tmp[626403] "expr temp" "maybe param" "maybe type" "temp"
          (626406 'move' call_tmp[626403](420902 call _cond_invalid tmp[420889]))
          if call_tmp[626403]
          {
            (420905 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[558951] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[558952] "maybe param" "temp"
          unknown call_tmp[626408] "expr temp" "maybe param" "maybe type" "temp"
          (626411 'move' call_tmp[626408](420890 call isTrue tmp[420889]))
          (558957 'move' tmp[558952](558955 call _cond_test call_tmp[626408]))
          if tmp[558952]
          {
            (558962 'move' tmp[558951](558959 '_paramFoldLogical' tmp[558952] 1))
          }
          {
            unknown tmp[420910] "maybe param" "temp"
            (420921 'move' tmp[420910](79115 call isDomain tmpIter[78921]))
            unknown call_tmp[626413] "expr temp" "maybe param" "maybe type" "temp"
            (626416 'move' call_tmp[626413](420923 call _cond_invalid tmp[420910]))
            if call_tmp[626413]
            {
              (420926 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[558924] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[558925] "maybe param" "temp"
            unknown call_tmp[626418] "expr temp" "maybe param" "maybe type" "temp"
            (626421 'move' call_tmp[626418](420911 call isTrue tmp[420910]))
            (558930 'move' tmp[558925](558928 call _cond_test call_tmp[626418]))
            if tmp[558925]
            {
              (558935 'move' tmp[558924](558932 '_paramFoldLogical' tmp[558925] 1))
            }
            {
              unknown tmp[558937] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[626423] "expr temp" "maybe param" "maybe type" "temp"
              (626426 'move' call_tmp[626423](79118 call isArray tmpIter[78921]))
              (558939 'move' tmp[558937](420915 call isTrue call_tmp[626423]))
              (558944 'move' tmp[558924](558941 '_paramFoldLogical' tmp[558925] tmp[558937]))
            }
            unknown tmp[558964] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (558966 'move' tmp[558964](420894 call isTrue tmp[558924]))
            (558971 'move' tmp[558951](558968 '_paramFoldLogical' tmp[558952] tmp[558964]))
          }
          (79125 'move' isRngDomArr[79110] tmp[558951])
          if isRngDomArr[79110]
          {
            const _coforallCount[78977] "const" "end count" "temp"
            (79046 'move' _coforallCount[78977](79043 call _endCountAlloc 1))
            unknown numTasks[78978] "temp"
            (79030 'move' numTasks[78978](79026 call size _mt[243] tmpIter[78921]))
            (79021 call _upEndCount _coforallCount[78977] 1 numTasks[78978])
            (476362 'end of statement')
            (79018 call chpl_resetTaskSpawn numTasks[78978])
            (476363 'end of statement')
            unknown _indexOfInterest[78985] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[78986] "expr temp" "temp"
            (78995 'move' _iterator[78986](78993 call _getIterator tmpIter[78921]))
            Defer
            {
              {
                (79011 call _freeIterator _iterator[78986])
              }
            }
            { scopeless type
              (79000 'move' _indexOfInterest[78985](78997 call iteratorIndex _iterator[78986]))
            }
            ForLoop[78987]
            {
              unknown chunk[79004] "coforall index var" "index var" "insert auto destroy"
              (476365 'end of statement')
              (79006 'move' chunk[79004] _indexOfInterest[78985])
              (476366 'end of statement' chunk[79004])
              {
                {
                  unknown call_tmp[626430] "expr temp" "maybe param" "maybe type" "temp"
                  (626433 'move' call_tmp[626430](78935 call - v[78756] 1))
                  unknown call_tmp[626435] "maybe param" "maybe type" "temp"
                  (626438 'move' call_tmp[626435](78930 call _computeBlock v[78756] numChunks[78772] chunk[79004] call_tmp[626430]))
                  const tmp[78928] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541305 'init var' tmp[78928] call_tmp[626435])
                  (78940 call _check_tuple_var_decl tmp[78928] 2)
                  (476368 'end of statement')
                  unknown call_tmp[626440] "maybe param" "maybe type" "temp"
                  (626443 'move' call_tmp[626440](78945 call tmp[78928] 0))
                  const lo[78943] "dead at end of block" "const" "insert auto destroy"
                  (541307 'init var' lo[78943] call_tmp[626440])
                  unknown call_tmp[626445] "maybe param" "maybe type" "temp"
                  (626448 'move' call_tmp[626445](78950 call tmp[78928] 1))
                  const hi[78948] "dead at end of block" "const" "insert auto destroy"
                  (541309 'init var' hi[78948] call_tmp[626445])
                  (78953 'end of statement')
                  unknown call_tmp[626450] "expr temp" "maybe param" "maybe type" "temp"
                  (626453 'move' call_tmp[626450](78955 call _cond_test debugChapelRange[64195]))
                  if call_tmp[626450]
                  {
                    unknown call_tmp[626455] "expr temp" "maybe param" "maybe type" "temp"
                    (626458 'move' call_tmp[626455](78965 call chpl_build_bounded_range lo[78943] hi[78948]))
                    unknown call_tmp[626460] "expr temp" "maybe param" "maybe type" "temp"
                    (626463 'move' call_tmp[626460](78963 call _build_tuple call_tmp[626455]))
                    (78960 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626460])
                    (476369 'end of statement' lo[78943] hi[78948])
                  }
                  unknown yret[511631] "YVV" "temp"
                  unknown call_tmp[626465] "expr temp" "maybe param" "maybe type" "temp"
                  (626468 'move' call_tmp[626465](78973 call chpl_build_bounded_range lo[78943] hi[78948]))
                  unknown call_tmp[626470] "expr temp" "maybe param" "maybe type" "temp"
                  (626473 'move' call_tmp[626470](78971 call _build_tuple call_tmp[626465]))
                  (511634 'move' yret[511631](511633 'deref' call_tmp[626470]))
                  (511636 yield yret[511631])
                  (476372 'end of statement' lo[78943] hi[78948])
                }
                (78980 call _downEndCount _coforallCount[78977] nil[44])
                (78979 'coforall loop')
              }
              label _continueLabel[78990]
              _indexOfInterest[78985]
              _iterator[78986]
            }
            label _breakLabel[78991]
            Defer
            {
              {
                (79033 call _endCountFree _coforallCount[78977])
              }
            }
            (79038 call _waitEndCount _coforallCount[78977] 1 numTasks[78978])
          }
          {
            const _coforallCount[79050] "const" "end count" "temp"
            (79107 'move' _coforallCount[79050](79104 call _endCountAlloc 1))
            unknown _indexOfInterest[79058] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[79059] "expr temp" "temp"
            (79068 'move' _iterator[79059](79066 call _getIterator tmpIter[78921]))
            Defer
            {
              {
                (79084 call _freeIterator _iterator[79059])
              }
            }
            { scopeless type
              (79073 'move' _indexOfInterest[79058](79070 call iteratorIndex _iterator[79059]))
            }
            ForLoop[79060]
            {
              unknown chunk[79077] "coforall index var" "index var" "insert auto destroy"
              (476379 'end of statement')
              (79079 'move' chunk[79077] _indexOfInterest[79058])
              (476380 'end of statement' chunk[79077])
              (79091 call _upEndCount _coforallCount[79050] 1)
              (476382 'end of statement')
              {
                {
                  unknown call_tmp[626475] "expr temp" "maybe param" "maybe type" "temp"
                  (626478 'move' call_tmp[626475](78863 call - v[78756] 1))
                  unknown call_tmp[626480] "maybe param" "maybe type" "temp"
                  (626483 'move' call_tmp[626480](78865 call _computeBlock v[78756] numChunks[78772] chunk[79077] call_tmp[626475]))
                  const tmp[78866] "dead at end of block" "const" "insert auto destroy" "temp"
                  (541311 'init var' tmp[78866] call_tmp[626480])
                  (78873 call _check_tuple_var_decl tmp[78866] 2)
                  (476383 'end of statement')
                  unknown call_tmp[626485] "maybe param" "maybe type" "temp"
                  (626488 'move' call_tmp[626485](78867 call tmp[78866] 0))
                  const lo[78851] "dead at end of block" "const" "insert auto destroy"
                  (541313 'init var' lo[78851] call_tmp[626485])
                  unknown call_tmp[626490] "maybe param" "maybe type" "temp"
                  (626493 'move' call_tmp[626490](78870 call tmp[78866] 1))
                  const hi[78853] "dead at end of block" "const" "insert auto destroy"
                  (541315 'init var' hi[78853] call_tmp[626490])
                  (78878 'end of statement')
                  unknown call_tmp[626495] "expr temp" "maybe param" "maybe type" "temp"
                  (626498 'move' call_tmp[626495](78908 call _cond_test debugChapelRange[64195]))
                  if call_tmp[626495]
                  {
                    unknown call_tmp[626500] "expr temp" "maybe param" "maybe type" "temp"
                    (626503 'move' call_tmp[626500](78902 call chpl_build_bounded_range lo[78851] hi[78853]))
                    unknown call_tmp[626505] "expr temp" "maybe param" "maybe type" "temp"
                    (626508 'move' call_tmp[626505](78904 call _build_tuple call_tmp[626500]))
                    (78906 call chpl_debug_writeln "*** RI: tuple = " call_tmp[626505])
                    (476384 'end of statement' lo[78851] hi[78853])
                  }
                  unknown yret[511638] "YVV" "temp"
                  unknown call_tmp[626510] "expr temp" "maybe param" "maybe type" "temp"
                  (626513 'move' call_tmp[626510](78915 call chpl_build_bounded_range lo[78851] hi[78853]))
                  unknown call_tmp[626515] "expr temp" "maybe param" "maybe type" "temp"
                  (626518 'move' call_tmp[626515](78917 call _build_tuple call_tmp[626510]))
                  (511641 'move' yret[511638](511640 'deref' call_tmp[626515]))
                  (511643 yield yret[511638])
                  (476387 'end of statement' lo[78851] hi[78853])
                }
                (79053 call _downEndCount _coforallCount[79050] nil[44])
                (79052 'coforall loop')
              }
              label _continueLabel[79063]
              _indexOfInterest[79058]
              _iterator[79059]
            }
            label _breakLabel[79064]
            Defer
            {
              {
                (79095 call _endCountFree _coforallCount[79050])
              }
            }
            (79100 call _waitEndCount _coforallCount[79050] 1)
          }
        }
      }
    }
    (511587 return ret[511585])
  }
  where {
    (77330 call == tag[77315] leader[447])
  }
  function range[64316](?).these[79149](arg _mt[79156]:_MT[238], arg this[79153]:range[64316](?) :
  range[64316](?), param arg tag[79146]:iterKind[453], arg followThis[79151]:_any[178](?)) : _unknown[51] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[511647] "RVV" "temp"
    unknown tmp[420952] "maybe param" "temp"
    (420963 'move' tmp[420952] 1)
    unknown call_tmp[626520] "expr temp" "maybe param" "maybe type" "temp"
    (626523 'move' call_tmp[626520](420965 call _cond_invalid tmp[420952]))
    if call_tmp[626520]
    {
      (420968 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[558978] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[558979] "maybe param" "temp"
    unknown call_tmp[626525] "expr temp" "maybe param" "maybe type" "temp"
    (626528 'move' call_tmp[626525](420953 call isTrue tmp[420952]))
    (558984 'move' tmp[558979](558982 call _cond_test call_tmp[626525]))
    if tmp[558979]
    {
      unknown tmp[558986] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626532] "expr temp" "maybe param" "maybe type" "temp"
      (626535 'move' call_tmp[626532](79171 call(79167 call (partial) isAmbiguous _mt[243] this[79153])))
      (558988 'move' tmp[558986](420956 call isTrue call_tmp[626532]))
      (558993 'move' tmp[558978](558990 '_paramFoldLogical' tmp[558979] tmp[558986]))
    }
    {
      (558998 'move' tmp[558978](558995 '_paramFoldLogical' tmp[558979] 0))
    }
    unknown call_tmp[626537] "expr temp" "maybe param" "maybe type" "temp"
    (626540 'move' call_tmp[626537](79182 call _cond_test tmp[558978]))
    if call_tmp[626537]
    {
      (79180 call boundsCheckHalt module=[255] HaltWrappers[209910] "these -- Attempt to iterate over a range with ambiguous alignment.")
      (357957 'referenced modules list' HaltWrappers[209910])
    }
    unknown call_tmp[626544] "expr temp" "maybe param" "maybe type" "temp"
    (626547 'move' call_tmp[626544](375871 call boundedType _mt[243] this[79153]))
    unknown call_tmp[626549] "expr temp" "maybe param" "maybe type" "temp"
    (626552 'move' call_tmp[626549](79193 call == call_tmp[626544] boundedNone[64211]))
    unknown call_tmp[626554] "expr temp" "maybe param" "maybe type" "temp"
    (626557 'move' call_tmp[626554](79200 call _cond_test call_tmp[626549]))
    if call_tmp[626554]
    {
      (79198 call compilerError "iteration over a range with no bounds")
    }
    unknown tmp[420973] "maybe param" "temp"
    unknown call_tmp[626561] "expr temp" "maybe param" "maybe type" "temp"
    (626564 'move' call_tmp[626561](375876 call stridable _mt[243] this[79153]))
    (420984 'move' tmp[420973](79206 call ! call_tmp[626561]))
    unknown call_tmp[626566] "expr temp" "maybe param" "maybe type" "temp"
    (626569 'move' call_tmp[626566](420986 call _cond_invalid tmp[420973]))
    if call_tmp[626566]
    {
      (420989 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559005] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559006] "maybe param" "temp"
    unknown call_tmp[626571] "expr temp" "maybe param" "maybe type" "temp"
    (626574 'move' call_tmp[626571](420974 call isTrue tmp[420973]))
    (559011 'move' tmp[559006](559009 call _cond_test call_tmp[626571]))
    if tmp[559006]
    {
      unknown tmp[559013] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626578] "expr temp" "maybe param" "maybe type" "temp"
      (626581 'move' call_tmp[626578](375881 call boundedType _mt[243] this[79153]))
      unknown call_tmp[626583] "expr temp" "maybe param" "maybe type" "temp"
      (626586 'move' call_tmp[626583](79213 call == call_tmp[626578] boundedHigh[64209]))
      (559015 'move' tmp[559013](420977 call isTrue call_tmp[626583]))
      (559020 'move' tmp[559005](559017 '_paramFoldLogical' tmp[559006] tmp[559013]))
    }
    {
      (559025 'move' tmp[559005](559022 '_paramFoldLogical' tmp[559006] 0))
    }
    unknown call_tmp[626588] "expr temp" "maybe param" "maybe type" "temp"
    (626591 'move' call_tmp[626588](79238 call _cond_test tmp[559005]))
    if call_tmp[626588]
    {
      (79236 call compilerError "iteration over a range with no first index")
    }
    unknown call_tmp[626595] "expr temp" "maybe param" "maybe type" "temp"
    (626598 'move' call_tmp[626595](79244 call size _mt[243] followThis[79151]))
    unknown call_tmp[626600] "expr temp" "maybe param" "maybe type" "temp"
    (626603 'move' call_tmp[626600](79248 call != call_tmp[626595] 1))
    unknown call_tmp[626605] "expr temp" "maybe param" "maybe type" "temp"
    (626608 'move' call_tmp[626605](79271 call _cond_test call_tmp[626600]))
    if call_tmp[626605]
    {
      (79269 call compilerError "iteration over a range with multi-dimensional iterator")
    }
    unknown call_tmp[626610] "expr temp" "maybe param" "maybe type" "temp"
    (626613 'move' call_tmp[626610](79299 call _cond_test debugChapelRange[64195]))
    if call_tmp[626610]
    {
      (79297 call chpl_debug_writeln "In range follower code: Following " followThis[79151])
    }
    unknown call_tmp[626615] "maybe param" "maybe type" "temp"
    (626618 'move' call_tmp[626615](79307 call followThis[79151] 0))
    unknown myFollowThis[79308] "dead at end of block" "insert auto destroy"
    (541317 'init var' myFollowThis[79308] call_tmp[626615])
    (79311 'end of statement')
    unknown call_tmp[626620] "expr temp" "maybe param" "maybe type" "temp"
    (626623 'move' call_tmp[626620](79335 call _cond_test debugChapelRange[64195]))
    if call_tmp[626620]
    {
      (79333 call chpl_debug_writeln "Range = " myFollowThis[79308])
      (476400 'end of statement' myFollowThis[79308])
    }
    unknown tmp[420994] "maybe param" "temp"
    (421005 'move' tmp[420994] 1)
    unknown call_tmp[626625] "expr temp" "maybe param" "maybe type" "temp"
    (626628 'move' call_tmp[626625](421007 call _cond_invalid tmp[420994]))
    if call_tmp[626625]
    {
      (421010 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559032] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559033] "maybe param" "temp"
    unknown call_tmp[626630] "expr temp" "maybe param" "maybe type" "temp"
    (626633 'move' call_tmp[626630](420995 call isTrue tmp[420994]))
    (559038 'move' tmp[559033](559036 call _cond_test call_tmp[626630]))
    if tmp[559033]
    {
      unknown tmp[559040] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626637] "expr temp" "maybe param" "maybe type" "temp"
      (626640 'move' call_tmp[626637](79346 call(79342 call (partial) hasFirst _mt[243] this[79153])))
      unknown call_tmp[626642] "expr temp" "maybe param" "maybe type" "temp"
      (626645 'move' call_tmp[626642](79347 call ! call_tmp[626637]))
      (559042 'move' tmp[559040](420998 call isTrue call_tmp[626642]))
      (559047 'move' tmp[559032](559044 '_paramFoldLogical' tmp[559033] tmp[559040]))
    }
    {
      (559052 'move' tmp[559032](559049 '_paramFoldLogical' tmp[559033] 0))
    }
    unknown call_tmp[626647] "expr temp" "maybe param" "maybe type" "temp"
    (626650 'move' call_tmp[626647](79409 call _cond_test tmp[559032]))
    if call_tmp[626647]
    {
      unknown call_tmp[626654] "expr temp" "maybe param" "maybe type" "temp"
      (626657 'move' call_tmp[626654](79356 call(79352 call (partial) isEmpty _mt[243] this[79153])))
      unknown call_tmp[626659] "expr temp" "maybe param" "maybe type" "temp"
      (626662 'move' call_tmp[626659](79404 call _cond_test call_tmp[626654]))
      if call_tmp[626659]
      {
        unknown call_tmp[626666] "expr temp" "maybe param" "maybe type" "temp"
        (626669 'move' call_tmp[626666](79362 call(79358 call (partial) isEmpty _mt[243] myFollowThis[79308])))
        unknown call_tmp[626671] "expr temp" "maybe param" "maybe type" "temp"
        (626674 'move' call_tmp[626671](79363 call ! call_tmp[626666]))
        unknown call_tmp[626676] "expr temp" "maybe param" "maybe type" "temp"
        (626679 'move' call_tmp[626676](79389 call _cond_test call_tmp[626671]))
        if call_tmp[626676]
        {
          (79387 call boundsCheckHalt module=[255] HaltWrappers[209910] "size mismatch in zippered iteration")
          (357969 'referenced modules list' HaltWrappers[209910])
        }
      }
      {
        (79401 call boundsCheckHalt module=[255] HaltWrappers[209910] "iteration over a range with no first index")
        (357975 'referenced modules list' HaltWrappers[209910])
      }
    }
    unknown tmp[421036] "maybe param" "temp"
    (421047 'move' tmp[421036] 1)
    unknown call_tmp[626681] "expr temp" "maybe param" "maybe type" "temp"
    (626684 'move' call_tmp[626681](421049 call _cond_invalid tmp[421036]))
    if call_tmp[626681]
    {
      (421052 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559059] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559060] "maybe param" "temp"
    unknown call_tmp[626686] "expr temp" "maybe param" "maybe type" "temp"
    (626689 'move' call_tmp[626686](421037 call isTrue tmp[421036]))
    (559065 'move' tmp[559060](559063 call _cond_test call_tmp[626686]))
    if tmp[559060]
    {
      unknown tmp[559067] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626693] "expr temp" "maybe param" "maybe type" "temp"
      (626696 'move' call_tmp[626693](79419 call(79415 call (partial) hasFirst _mt[243] myFollowThis[79308])))
      unknown call_tmp[626698] "expr temp" "maybe param" "maybe type" "temp"
      (626701 'move' call_tmp[626698](79420 call ! call_tmp[626693]))
      (559069 'move' tmp[559067](421040 call isTrue call_tmp[626698]))
      (559074 'move' tmp[559059](559071 '_paramFoldLogical' tmp[559060] tmp[559067]))
    }
    {
      (559079 'move' tmp[559059](559076 '_paramFoldLogical' tmp[559060] 0))
    }
    unknown call_tmp[626703] "expr temp" "maybe param" "maybe type" "temp"
    (626706 'move' call_tmp[626703](79472 call _cond_test tmp[559059]))
    if call_tmp[626703]
    {
      unknown tmp[421015] "maybe param" "temp"
      unknown call_tmp[626710] "expr temp" "maybe param" "maybe type" "temp"
      (626713 'move' call_tmp[626710](79429 call(79425 call (partial) isAmbiguous _mt[243] myFollowThis[79308])))
      (421026 'move' tmp[421015](79430 call ! call_tmp[626710]))
      unknown call_tmp[626715] "expr temp" "maybe param" "maybe type" "temp"
      (626718 'move' call_tmp[626715](421028 call _cond_invalid tmp[421015]))
      if call_tmp[626715]
      {
        (421031 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559086] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559087] "maybe param" "temp"
      unknown call_tmp[626720] "expr temp" "maybe param" "maybe type" "temp"
      (626723 'move' call_tmp[626720](421016 call isTrue tmp[421015]))
      (559092 'move' tmp[559087](559090 call _cond_test call_tmp[626720]))
      if tmp[559087]
      {
        unknown tmp[559094] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626727] "expr temp" "maybe param" "maybe type" "temp"
        (626730 'move' call_tmp[626727](79437 call(79433 call (partial) isEmpty _mt[243] myFollowThis[79308])))
        (559096 'move' tmp[559094](421019 call isTrue call_tmp[626727]))
        (559101 'move' tmp[559086](559098 '_paramFoldLogical' tmp[559087] tmp[559094]))
      }
      {
        (559106 'move' tmp[559086](559103 '_paramFoldLogical' tmp[559087] 0))
      }
      unknown call_tmp[626732] "expr temp" "maybe param" "maybe type" "temp"
      (626735 'move' call_tmp[626732](79440 call ! tmp[559086]))
      unknown call_tmp[626737] "expr temp" "maybe param" "maybe type" "temp"
      (626740 'move' call_tmp[626737](79466 call _cond_test call_tmp[626732]))
      if call_tmp[626737]
      {
        (79464 call boundsCheckHalt module=[255] HaltWrappers[209910] "zippered iteration over a range with no first index")
        (357984 'referenced modules list' HaltWrappers[209910])
      }
    }
    unknown tmp[421120] "maybe param" "temp"
    unknown tmp[421141] "maybe param" "temp"
    (421152 'move' tmp[421141](79479 call isBoundedRange myFollowThis[79308]))
    unknown call_tmp[626742] "expr temp" "maybe param" "maybe type" "temp"
    (626745 'move' call_tmp[626742](421154 call _cond_invalid tmp[421141]))
    if call_tmp[626742]
    {
      (421157 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559113] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559114] "maybe param" "temp"
    unknown call_tmp[626747] "expr temp" "maybe param" "maybe type" "temp"
    (626750 'move' call_tmp[626747](421142 call isTrue tmp[421141]))
    (559119 'move' tmp[559114](559117 call _cond_test call_tmp[626747]))
    if tmp[559114]
    {
      unknown tmp[559121] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626754] "expr temp" "maybe param" "maybe type" "temp"
      (626757 'move' call_tmp[626754](79481 call stridable _mt[243] myFollowThis[79308]))
      unknown call_tmp[626759] "expr temp" "maybe param" "maybe type" "temp"
      (626762 'move' call_tmp[626759](79484 call ! call_tmp[626754]))
      (559123 'move' tmp[559121](421145 call isTrue call_tmp[626759]))
      (559128 'move' tmp[559113](559125 '_paramFoldLogical' tmp[559114] tmp[559121]))
    }
    {
      (559133 'move' tmp[559113](559130 '_paramFoldLogical' tmp[559114] 0))
    }
    (421131 'move' tmp[421120] tmp[559113])
    unknown call_tmp[626764] "expr temp" "maybe param" "maybe type" "temp"
    (626767 'move' call_tmp[626764](421133 call _cond_invalid tmp[421120]))
    if call_tmp[626764]
    {
      (421136 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[559140] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559141] "maybe param" "temp"
    unknown call_tmp[626769] "expr temp" "maybe param" "maybe type" "temp"
    (626772 'move' call_tmp[626769](421121 call isTrue tmp[421120]))
    (559146 'move' tmp[559141](559144 call _cond_test call_tmp[626769]))
    if tmp[559141]
    {
      (559151 'move' tmp[559140](559148 '_paramFoldLogical' tmp[559141] 1))
    }
    {
      unknown tmp[559153] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[626776] "expr temp" "maybe param" "maybe type" "temp"
      (626779 'move' call_tmp[626776](79493 call(79489 call (partial) hasLast _mt[243] myFollowThis[79308])))
      (559155 'move' tmp[559153](421125 call isTrue call_tmp[626776]))
      (559160 'move' tmp[559140](559157 '_paramFoldLogical' tmp[559141] tmp[559153]))
    }
    unknown call_tmp[626781] "expr temp" "maybe param" "maybe type" "temp"
    (626784 'move' call_tmp[626781](80144 call _cond_test tmp[559140]))
    if call_tmp[626781]
    {
      unknown call_tmp[626788] "maybe param" "maybe type" "temp"
      (626791 'move' call_tmp[626788](79497 call size _mt[243] myFollowThis[79308]))
      const flwlen[79500] "dead at end of block" "const" "insert auto destroy"
      (541319 'init var' flwlen[79500] call_tmp[626788])
      (79503 'end of statement' myFollowThis[79308])
      unknown tmp[421057] "maybe param" "temp"
      (421068 'move' tmp[421057] 1)
      unknown call_tmp[626793] "expr temp" "maybe param" "maybe type" "temp"
      (626796 'move' call_tmp[626793](421070 call _cond_invalid tmp[421057]))
      if call_tmp[626793]
      {
        (421073 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559167] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559168] "maybe param" "temp"
      unknown call_tmp[626798] "expr temp" "maybe param" "maybe type" "temp"
      (626801 'move' call_tmp[626798](421058 call isTrue tmp[421057]))
      (559173 'move' tmp[559168](559171 call _cond_test call_tmp[626798]))
      if tmp[559168]
      {
        unknown tmp[559175] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626805] "expr temp" "maybe param" "maybe type" "temp"
        (626808 'move' call_tmp[626805](79511 call(79507 call (partial) hasLast _mt[243] this[79153])))
        (559177 'move' tmp[559175](421061 call isTrue call_tmp[626805]))
        (559182 'move' tmp[559167](559179 '_paramFoldLogical' tmp[559168] tmp[559175]))
      }
      {
        (559187 'move' tmp[559167](559184 '_paramFoldLogical' tmp[559168] 0))
      }
      unknown call_tmp[626810] "expr temp" "maybe param" "maybe type" "temp"
      (626813 'move' call_tmp[626810](79583 call _cond_test tmp[559167]))
      if call_tmp[626810]
      {
        unknown call_tmp[626815] "expr temp" "maybe param" "maybe type" "temp"
        (626818 'move' call_tmp[626815](79517 call isBoundedRange this[79153]))
        unknown call_tmp[626820] "expr temp" "maybe param" "maybe type" "temp"
        (626823 'move' call_tmp[626820](79577 call _cond_test call_tmp[626815]))
        if call_tmp[626820]
        {
          unknown call_tmp[626827] "expr temp" "maybe param" "maybe type" "temp"
          (626830 'move' call_tmp[626827](79519 call size _mt[243] this[79153]))
          unknown call_tmp[626832] "expr temp" "maybe param" "maybe type" "temp"
          (626835 'move' call_tmp[626832](79523 call < call_tmp[626827] flwlen[79500]))
          unknown call_tmp[626837] "expr temp" "maybe param" "maybe type" "temp"
          (626840 'move' call_tmp[626837](79549 call _cond_test call_tmp[626832]))
          if call_tmp[626837]
          {
            (79547 call boundsCheckHalt module=[255] HaltWrappers[209910] "zippered iteration over a range with too few indices")
            (357995 'referenced modules list' HaltWrappers[209910])
          }
        }
        {
          (79575 call assert 0 "hasFirst && hasLast do not imply isBoundedRange")
        }
      }
      unknown tmp[421078] "maybe param" "temp"
      (421089 'move' tmp[421078](79588 call stridable _mt[243] this[79153]))
      unknown call_tmp[626844] "expr temp" "maybe param" "maybe type" "temp"
      (626847 'move' call_tmp[626844](421091 call _cond_invalid tmp[421078]))
      if call_tmp[626844]
      {
        (421094 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559194] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559195] "maybe param" "temp"
      unknown call_tmp[626849] "expr temp" "maybe param" "maybe type" "temp"
      (626852 'move' call_tmp[626849](421079 call isTrue tmp[421078]))
      (559200 'move' tmp[559195](559198 call _cond_test call_tmp[626849]))
      if tmp[559195]
      {
        (559205 'move' tmp[559194](559202 '_paramFoldLogical' tmp[559195] 1))
      }
      {
        unknown tmp[559207] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[626856] "expr temp" "maybe param" "maybe type" "temp"
        (626859 'move' call_tmp[626856](79592 call stridable _mt[243] myFollowThis[79308]))
        (559209 'move' tmp[559207](421083 call isTrue call_tmp[626856]))
        (559214 'move' tmp[559194](559211 '_paramFoldLogical' tmp[559195] tmp[559207]))
      }
      unknown call_tmp[626861] "expr temp" "maybe param" "maybe type" "temp"
      (626864 'move' call_tmp[626861](79933 call _cond_test tmp[559194]))
      if call_tmp[626861]
      {
        unknown call_tmp[626868] "expr temp" "maybe param" "maybe type" "temp"
        (626871 'move' call_tmp[626868](79600 call(375896 call (partial) chpl_intToIdx _mt[243] this[79153]) 1))
        unknown call_tmp[626875] "expr temp" "maybe param" "maybe type" "temp"
        (626878 'move' call_tmp[626875](79604 call(375900 call (partial) chpl_intToIdx _mt[243] this[79153]) 0))
        unknown call_tmp[626880] "expr temp" "maybe param" "maybe type" "temp"
        (626883 'move' call_tmp[626880](79605 call chpl_build_bounded_range call_tmp[626868] call_tmp[626875]))
        unknown call_tmp[626887] "expr temp" "maybe param" "maybe type" "temp"
        (626890 'move' call_tmp[626887](375904 call intIdxType _mt[243] this[79153]))
        unknown call_tmp[626892] "expr temp" "maybe param" "maybe type" "temp"
        (626895 'move' call_tmp[626892](79611 call chpl__rangeStrideType call_tmp[626887]))
        unknown call_tmp[626897] "expr temp" "maybe param" "maybe type" "temp"
        (626900 'move' call_tmp[626897](79612 call _cast call_tmp[626892] 1))
        unknown call_tmp[626902] "maybe param" "maybe type" "temp"
        (626905 'move' call_tmp[626902](79614 call chpl_by call_tmp[626880] call_tmp[626897]))
        unknown r[79616] "dead at end of block" "insert auto destroy"
        (541321 'init var' r[79616] call_tmp[626902])
        (79619 'end of statement')
        unknown call_tmp[626907] "expr temp" "maybe param" "maybe type" "temp"
        (626910 'move' call_tmp[626907](79623 call != flwlen[79500] 0))
        unknown call_tmp[626912] "expr temp" "maybe param" "maybe type" "temp"
        (626915 'move' call_tmp[626912](79725 call _cond_test call_tmp[626907]))
        if call_tmp[626912]
        {
          unknown call_tmp[626919] "expr temp" "maybe param" "maybe type" "temp"
          (626922 'move' call_tmp[626919](79626 call stride _mt[243] this[79153]))
          unknown call_tmp[626926] "expr temp" "maybe param" "maybe type" "temp"
          (626929 'move' call_tmp[626926](79630 call stride _mt[243] myFollowThis[79308]))
          unknown call_tmp[626931] "maybe param" "maybe type" "temp"
          (626934 'move' call_tmp[626931](79633 call * call_tmp[626919] call_tmp[626926]))
          const stride[79635] "dead at end of block" "const" "insert auto destroy"
          (541323 'init var' stride[79635] call_tmp[626931])
          (79638 'end of statement')
          unknown call_tmp[626940] "expr temp" "maybe param" "maybe type" "temp"
          (626943 'move' call_tmp[626940](79645 call first _mt[243] myFollowThis[79308]))
          unknown call_tmp[626945] "maybe param" "maybe type" "temp"
          (626948 'move' call_tmp[626945](79649 call(79641 call (partial) orderToIndex _mt[243] this[79153]) call_tmp[626940]))
          unknown low[79650] "dead at end of block" "insert auto destroy"
          (541325 'init var' low[79650] call_tmp[626945])
          (79653 'end of statement')
          unknown call_tmp[626954] "expr temp" "maybe param" "maybe type" "temp"
          (626957 'move' call_tmp[626954](375914 call strType _mt[243] this[79153]))
          unknown call_tmp[626959] "expr temp" "maybe param" "maybe type" "temp"
          (626962 'move' call_tmp[626959](79658 call chpl__idxToInt low[79650]))
          unknown call_tmp[626964] "expr temp" "maybe param" "maybe type" "temp"
          (626967 'move' call_tmp[626964](79660 call _cast call_tmp[626954] call_tmp[626959]))
          unknown call_tmp[626971] "expr temp" "maybe param" "maybe type" "temp"
          (626974 'move' call_tmp[626971](375920 call strType _mt[243] this[79153]))
          unknown call_tmp[626976] "expr temp" "maybe param" "maybe type" "temp"
          (626979 'move' call_tmp[626976](79665 call - flwlen[79500] 1))
          unknown call_tmp[626981] "expr temp" "maybe param" "maybe type" "temp"
          (626984 'move' call_tmp[626981](79668 call _cast call_tmp[626971] call_tmp[626976]))
          unknown call_tmp[626986] "expr temp" "maybe param" "maybe type" "temp"
          (626989 'move' call_tmp[626986](79670 call * stride[79635] call_tmp[626981]))
          unknown call_tmp[626991] "expr temp" "maybe param" "maybe type" "temp"
          (626994 'move' call_tmp[626991](79672 call + call_tmp[626964] call_tmp[626986]))
          unknown call_tmp[626996] "maybe param" "maybe type" "temp"
          (626999 'move' call_tmp[626996](79675 call(375909 call (partial) chpl_intToIdx _mt[243] this[79153]) call_tmp[626991]))
          unknown high[79676] "dead at end of block" "insert auto destroy"
          (541327 'init var' high[79676] call_tmp[626996])
          (79679 'end of statement' myFollowThis[79308] myFollowThis[79308] low[79650] stride[79635] flwlen[79500])
          unknown call_tmp[627005] "expr temp" "maybe param" "maybe type" "temp"
          (627008 'move' call_tmp[627005](79687 call last _mt[243] myFollowThis[79308]))
          unknown call_tmp[627010] "expr temp" "maybe param" "maybe type" "temp"
          (627013 'move' call_tmp[627010](79691 call(79683 call (partial) orderToIndex _mt[243] this[79153]) call_tmp[627005]))
          unknown call_tmp[627015] "expr temp" "maybe param" "maybe type" "temp"
          (627018 'move' call_tmp[627015](79692 call == high[79676] call_tmp[627010]))
          (79695 call assert call_tmp[627015])
          (476420 'end of statement' high[79676] myFollowThis[79308])
          unknown call_tmp[627020] "expr temp" "maybe param" "maybe type" "temp"
          (627023 'move' call_tmp[627020](79699 call < stride[79635] 0))
          unknown call_tmp[627025] "expr temp" "maybe param" "maybe type" "temp"
          (627028 'move' call_tmp[627025](79706 call _cond_test call_tmp[627020]))
          if call_tmp[627025]
          {
            (79703 call <=> low[79650] high[79676])
            (476423 'end of statement' low[79650] high[79676])
          }
          unknown call_tmp[627030] "expr temp" "maybe param" "maybe type" "temp"
          (627033 'move' call_tmp[627030](79714 call chpl_build_bounded_range low[79650] high[79676]))
          unknown call_tmp[627037] "expr temp" "maybe param" "maybe type" "temp"
          (627040 'move' call_tmp[627037](375932 call strType _mt[243] this[79153]))
          unknown call_tmp[627042] "expr temp" "maybe param" "maybe type" "temp"
          (627045 'move' call_tmp[627042](79718 call _cast call_tmp[627037] stride[79635]))
          unknown call_tmp[627047] "expr temp" "maybe param" "maybe type" "temp"
          (627050 'move' call_tmp[627047](79720 call chpl_by call_tmp[627030] call_tmp[627042]))
          (79722 call = r[79616] call_tmp[627047])
          (476426 'end of statement' r[79616] low[79650] high[79676] stride[79635])
        }
        unknown call_tmp[627052] "expr temp" "maybe param" "maybe type" "temp"
        (627055 'move' call_tmp[627052](79752 call _cond_test debugChapelRange[64195]))
        if call_tmp[627052]
        {
          (79750 call chpl_debug_writeln "Expanded range = " r[79616])
          (476431 'end of statement' r[79616])
        }
        {
          unknown _indexOfInterest[79762] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79763] "expr temp" "temp"
          (79772 'move' _iterator[79763](79770 call _getIterator r[79616]))
          Defer
          {
            {
              (79788 call _freeIterator _iterator[79763])
            }
          }
          { scopeless type
            (79777 'move' _indexOfInterest[79762](79774 call iteratorIndex _iterator[79763]))
          }
          ForLoop[79764]
          {
            unknown i[79781] "index var" "insert auto destroy"
            (476434 'end of statement')
            (79783 'move' i[79781] _indexOfInterest[79762])
            (476435 'end of statement' i[79781])
            unknown yret[511651] "YVV" "temp"
            (511654 'move' yret[511651](511653 'deref' i[79781]))
            (511656 yield yret[511651])
            (476437 'end of statement' i[79781])
            label _continueLabel[79767]
            _indexOfInterest[79762]
            _iterator[79763]
          }
          label _breakLabel[79768]
        }
      }
      {
        unknown call_tmp[627059] "expr temp" "maybe param" "maybe type" "temp"
        (627062 'move' call_tmp[627059](375941 call idxType _mt[243] this[79153]))
        unknown call_tmp[627064] "expr temp" "maybe param" "maybe type" "temp"
        (627067 'move' call_tmp[627064](79799 call chpl__intToIdx call_tmp[627059] 1))
        unknown call_tmp[627071] "expr temp" "maybe param" "maybe type" "temp"
        (627074 'move' call_tmp[627071](375946 call idxType _mt[243] this[79153]))
        unknown call_tmp[627076] "expr temp" "maybe param" "maybe type" "temp"
        (627079 'move' call_tmp[627076](79804 call chpl__intToIdx call_tmp[627071] 0))
        unknown call_tmp[627081] "maybe param" "maybe type" "temp"
        (627084 'move' call_tmp[627081](79805 call chpl_build_bounded_range call_tmp[627064] call_tmp[627076]))
        unknown r[79807] "dead at end of block" "insert auto destroy"
        (541329 'init var' r[79807] call_tmp[627081])
        (79810 'end of statement')
        unknown call_tmp[627086] "expr temp" "maybe param" "maybe type" "temp"
        (627089 'move' call_tmp[627086](79814 call != flwlen[79500] 0))
        unknown call_tmp[627091] "expr temp" "maybe param" "maybe type" "temp"
        (627094 'move' call_tmp[627091](79879 call _cond_test call_tmp[627086]))
        if call_tmp[627091]
        {
          unknown call_tmp[627100] "expr temp" "maybe param" "maybe type" "temp"
          (627103 'move' call_tmp[627100](79821 call first _mt[243] myFollowThis[79308]))
          unknown call_tmp[627105] "maybe param" "maybe type" "temp"
          (627108 'move' call_tmp[627105](79825 call(79817 call (partial) orderToIndex _mt[243] this[79153]) call_tmp[627100]))
          const low[79826] "dead at end of block" "const" "insert auto destroy"
          (541331 'init var' low[79826] call_tmp[627105])
          (79829 'end of statement')
          unknown call_tmp[627114] "expr temp" "maybe param" "maybe type" "temp"
          (627117 'move' call_tmp[627114](375956 call strType _mt[243] this[79153]))
          unknown call_tmp[627119] "expr temp" "maybe param" "maybe type" "temp"
          (627122 'move' call_tmp[627119](79835 call chpl__idxToInt low[79826]))
          unknown call_tmp[627124] "expr temp" "maybe param" "maybe type" "temp"
          (627127 'move' call_tmp[627124](79837 call _cast call_tmp[627114] call_tmp[627119]))
          unknown call_tmp[627131] "expr temp" "maybe param" "maybe type" "temp"
          (627134 'move' call_tmp[627131](375961 call strType _mt[243] this[79153]))
          unknown call_tmp[627136] "expr temp" "maybe param" "maybe type" "temp"
          (627139 'move' call_tmp[627136](79841 call - flwlen[79500] 1))
          unknown call_tmp[627141] "expr temp" "maybe param" "maybe type" "temp"
          (627144 'move' call_tmp[627141](79844 call _cast call_tmp[627131] call_tmp[627136]))
          unknown call_tmp[627146] "expr temp" "maybe param" "maybe type" "temp"
          (627149 'move' call_tmp[627146](79846 call + call_tmp[627124] call_tmp[627141]))
          unknown call_tmp[627151] "maybe param" "maybe type" "temp"
          (627154 'move' call_tmp[627151](79849 call(375951 call (partial) chpl_intToIdx _mt[243] this[79153]) call_tmp[627146]))
          const high[79850] "dead at end of block" "const" "insert auto destroy"
          (541333 'init var' high[79850] call_tmp[627151])
          (79853 'end of statement' myFollowThis[79308] low[79826] flwlen[79500])
          unknown call_tmp[627160] "expr temp" "maybe param" "maybe type" "temp"
          (627163 'move' call_tmp[627160](79861 call last _mt[243] myFollowThis[79308]))
          unknown call_tmp[627165] "expr temp" "maybe param" "maybe type" "temp"
          (627168 'move' call_tmp[627165](79865 call(79857 call (partial) orderToIndex _mt[243] this[79153]) call_tmp[627160]))
          unknown call_tmp[627170] "expr temp" "maybe param" "maybe type" "temp"
          (627173 'move' call_tmp[627170](79866 call == high[79850] call_tmp[627165]))
          (79869 call assert call_tmp[627170])
          (476442 'end of statement' high[79850] myFollowThis[79308])
          unknown call_tmp[627175] "expr temp" "maybe param" "maybe type" "temp"
          (627178 'move' call_tmp[627175](79874 call chpl_build_bounded_range low[79826] high[79850]))
          (79876 call = r[79807] call_tmp[627175])
          (476445 'end of statement' r[79807] low[79826] high[79850])
        }
        unknown call_tmp[627180] "expr temp" "maybe param" "maybe type" "temp"
        (627183 'move' call_tmp[627180](79890 call _cond_test debugChapelRange[64195]))
        if call_tmp[627180]
        {
          (79888 call chpl_debug_writeln "Expanded range = " r[79807])
          (476449 'end of statement' r[79807])
        }
        {
          unknown _indexOfInterest[79900] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[79901] "expr temp" "temp"
          (79910 'move' _iterator[79901](79908 call _getIterator r[79807]))
          Defer
          {
            {
              (79926 call _freeIterator _iterator[79901])
            }
          }
          { scopeless type
            (79915 'move' _indexOfInterest[79900](79912 call iteratorIndex _iterator[79901]))
          }
          ForLoop[79902]
          {
            unknown i[79919] "index var" "insert auto destroy"
            (476452 'end of statement')
            (79921 'move' i[79919] _indexOfInterest[79900])
            (476453 'end of statement' i[79919])
            unknown yret[511658] "YVV" "temp"
            (511661 'move' yret[511658](511660 'deref' i[79919]))
            (511663 yield yret[511658])
            (476455 'end of statement' i[79919])
            label _continueLabel[79905]
            _indexOfInterest[79900]
            _iterator[79901]
          }
          label _breakLabel[79906]
        }
      }
    }
    {
      unknown tmp[421099] "maybe param" "temp"
      (421110 'move' tmp[421099] 1)
      unknown call_tmp[627185] "expr temp" "maybe param" "maybe type" "temp"
      (627188 'move' call_tmp[627185](421112 call _cond_invalid tmp[421099]))
      if call_tmp[627185]
      {
        (421115 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559221] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559222] "maybe param" "temp"
      unknown call_tmp[627190] "expr temp" "maybe param" "maybe type" "temp"
      (627193 'move' call_tmp[627190](421100 call isTrue tmp[421099]))
      (559227 'move' tmp[559222](559225 call _cond_test call_tmp[627190]))
      if tmp[559222]
      {
        unknown tmp[559229] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627197] "expr temp" "maybe param" "maybe type" "temp"
        (627200 'move' call_tmp[627197](79943 call(79939 call (partial) hasLast _mt[243] this[79153])))
        (559231 'move' tmp[559229](421103 call isTrue call_tmp[627197]))
        (559236 'move' tmp[559221](559233 '_paramFoldLogical' tmp[559222] tmp[559229]))
      }
      {
        (559241 'move' tmp[559221](559238 '_paramFoldLogical' tmp[559222] 0))
      }
      unknown call_tmp[627202] "expr temp" "maybe param" "maybe type" "temp"
      (627205 'move' call_tmp[627202](79974 call _cond_test tmp[559221]))
      if call_tmp[627202]
      {
        (79972 call zipLengthHalt module=[255] HaltWrappers[209910] "zippered iteration where a bounded range follows an unbounded iterator")
        (358014 'referenced modules list' HaltWrappers[209910])
      }
      unknown call_tmp[627211] "expr temp" "maybe param" "maybe type" "temp"
      (627214 'move' call_tmp[627211](79985 call first _mt[243] myFollowThis[79308]))
      unknown call_tmp[627216] "maybe param" "maybe type" "temp"
      (627219 'move' call_tmp[627216](79989 call(79981 call (partial) orderToIndex _mt[243] this[79153]) call_tmp[627211]))
      const first[79990] "dead at end of block" "const" "insert auto destroy"
      (541335 'init var' first[79990] call_tmp[627216])
      (79993 'end of statement')
      unknown call_tmp[627223] "expr temp" "maybe param" "maybe type" "temp"
      (627226 'move' call_tmp[627223](79995 call stride _mt[243] this[79153]))
      unknown call_tmp[627230] "expr temp" "maybe param" "maybe type" "temp"
      (627233 'move' call_tmp[627230](79999 call stride _mt[243] myFollowThis[79308]))
      unknown call_tmp[627235] "maybe param" "maybe type" "temp"
      (627238 'move' call_tmp[627235](80002 call * call_tmp[627223] call_tmp[627230]))
      const stride[80004] "dead at end of block" "const" "insert auto destroy"
      (541337 'init var' stride[80004] call_tmp[627235])
      (80007 'end of statement' myFollowThis[79308] myFollowThis[79308])
      unknown call_tmp[627240] "expr temp" "maybe param" "maybe type" "temp"
      (627243 'move' call_tmp[627240](80010 call > stride[80004] 0))
      unknown call_tmp[627245] "expr temp" "maybe param" "maybe type" "temp"
      (627248 'move' call_tmp[627245](80140 call _cond_test call_tmp[627240]))
      if call_tmp[627245]
      {
        unknown call_tmp[627250] "expr temp" "maybe param" "maybe type" "temp"
        (627253 'move' call_tmp[627250](80013 call chpl_build_low_bounded_range first[79990]))
        unknown call_tmp[627257] "expr temp" "maybe param" "maybe type" "temp"
        (627260 'move' call_tmp[627257](375977 call strType _mt[243] this[79153]))
        unknown call_tmp[627262] "expr temp" "maybe param" "maybe type" "temp"
        (627265 'move' call_tmp[627262](80017 call _cast call_tmp[627257] stride[80004]))
        unknown call_tmp[627267] "maybe param" "maybe type" "temp"
        (627270 'move' call_tmp[627267](80019 call chpl_by call_tmp[627250] call_tmp[627262]))
        const r[80021] "dead at end of block" "const" "insert auto destroy"
        (541339 'init var' r[80021] call_tmp[627267])
        (80024 'end of statement' first[79990] stride[80004])
        unknown call_tmp[627272] "expr temp" "maybe param" "maybe type" "temp"
        (627275 'move' call_tmp[627272](80033 call _cond_test debugChapelRange[64195]))
        if call_tmp[627272]
        {
          (80031 call chpl_debug_writeln "Expanded range = " r[80021])
          (476463 'end of statement' r[80021])
        }
        {
          unknown _indexOfInterest[80043] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80044] "expr temp" "temp"
          (80053 'move' _iterator[80044](80051 call _getIterator r[80021]))
          Defer
          {
            {
              (80069 call _freeIterator _iterator[80044])
            }
          }
          { scopeless type
            (80058 'move' _indexOfInterest[80043](80055 call iteratorIndex _iterator[80044]))
          }
          ForLoop[80045]
          {
            unknown i[80062] "index var" "insert auto destroy"
            (476466 'end of statement')
            (80064 'move' i[80062] _indexOfInterest[80043])
            (476467 'end of statement' i[80062])
            unknown yret[511665] "YVV" "temp"
            (511668 'move' yret[511665](511667 'deref' i[80062]))
            (511670 yield yret[511665])
            (476469 'end of statement' i[80062])
            label _continueLabel[80048]
            _indexOfInterest[80043]
            _iterator[80044]
          }
          label _breakLabel[80049]
        }
      }
      {
        unknown call_tmp[627277] "expr temp" "maybe param" "maybe type" "temp"
        (627280 'move' call_tmp[627277](80077 call chpl_build_high_bounded_range first[79990]))
        unknown call_tmp[627284] "expr temp" "maybe param" "maybe type" "temp"
        (627287 'move' call_tmp[627284](375987 call strType _mt[243] this[79153]))
        unknown call_tmp[627289] "expr temp" "maybe param" "maybe type" "temp"
        (627292 'move' call_tmp[627289](80081 call _cast call_tmp[627284] stride[80004]))
        unknown call_tmp[627294] "maybe param" "maybe type" "temp"
        (627297 'move' call_tmp[627294](80083 call chpl_by call_tmp[627277] call_tmp[627289]))
        const r[80085] "dead at end of block" "const" "insert auto destroy"
        (541341 'init var' r[80085] call_tmp[627294])
        (80088 'end of statement' first[79990] stride[80004])
        unknown call_tmp[627299] "expr temp" "maybe param" "maybe type" "temp"
        (627302 'move' call_tmp[627299](80097 call _cond_test debugChapelRange[64195]))
        if call_tmp[627299]
        {
          (80095 call chpl_debug_writeln "Expanded range = " r[80085])
          (476473 'end of statement' r[80085])
        }
        {
          unknown _indexOfInterest[80107] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80108] "expr temp" "temp"
          (80117 'move' _iterator[80108](80115 call _getIterator r[80085]))
          Defer
          {
            {
              (80133 call _freeIterator _iterator[80108])
            }
          }
          { scopeless type
            (80122 'move' _indexOfInterest[80107](80119 call iteratorIndex _iterator[80108]))
          }
          ForLoop[80109]
          {
            unknown i[80126] "index var" "insert auto destroy"
            (476476 'end of statement')
            (80128 'move' i[80126] _indexOfInterest[80107])
            (476477 'end of statement' i[80126])
            unknown yret[511672] "YVV" "temp"
            (511675 'move' yret[511672](511674 'deref' i[80126]))
            (511677 yield yret[511672])
            (476479 'end of statement' i[80126])
            label _continueLabel[80112]
            _indexOfInterest[80107]
            _iterator[80108]
          }
          label _breakLabel[80113]
        }
      }
    }
    (511649 return ret[511647])
  }
  where {
    (79163 call == tag[79146] follower[449])
  }
  function _cast[80157](arg t[80154]:string[26], arg x[80163]:range[64316](?)) : _unknown[51]
  {
    unknown ret[511681] "RVV" "temp"
    unknown ret[80167] "dead at end of block" "insert auto destroy"
    (541343 'default init var' ret[80167] string[26])
    (80170 'end of statement')
    unknown call_tmp[627306] "expr temp" "maybe param" "maybe type" "temp"
    (627309 'move' call_tmp[627306](80177 call(80173 call (partial) hasLowBound _mt[243] x[80163])))
    unknown call_tmp[627311] "expr temp" "maybe param" "maybe type" "temp"
    (627314 'move' call_tmp[627311](80189 call _cond_test call_tmp[627306]))
    if call_tmp[627311]
    {
      unknown call_tmp[627318] "expr temp" "maybe param" "maybe type" "temp"
      (627321 'move' call_tmp[627318](80180 call low _mt[243] x[80163]))
      unknown call_tmp[627323] "expr temp" "maybe param" "maybe type" "temp"
      (627326 'move' call_tmp[627323](80184 call _cast string[26] call_tmp[627318]))
      (80186 call += ret[80167] call_tmp[627323])
      (476481 'end of statement' ret[80167])
    }
    (80212 call += ret[80167] "..")
    (476483 'end of statement' ret[80167])
    unknown call_tmp[627330] "expr temp" "maybe param" "maybe type" "temp"
    (627333 'move' call_tmp[627330](80220 call(80216 call (partial) hasHighBound _mt[243] x[80163])))
    unknown call_tmp[627335] "expr temp" "maybe param" "maybe type" "temp"
    (627338 'move' call_tmp[627335](80232 call _cond_test call_tmp[627330]))
    if call_tmp[627335]
    {
      unknown call_tmp[627342] "expr temp" "maybe param" "maybe type" "temp"
      (627345 'move' call_tmp[627342](80223 call high _mt[243] x[80163]))
      unknown call_tmp[627347] "expr temp" "maybe param" "maybe type" "temp"
      (627350 'move' call_tmp[627347](80227 call _cast string[26] call_tmp[627342]))
      (80229 call += ret[80167] call_tmp[627347])
      (476485 'end of statement' ret[80167])
    }
    unknown call_tmp[627354] "expr temp" "maybe param" "maybe type" "temp"
    (627357 'move' call_tmp[627354](80238 call stride _mt[243] x[80163]))
    unknown call_tmp[627359] "expr temp" "maybe param" "maybe type" "temp"
    (627362 'move' call_tmp[627359](80242 call != call_tmp[627354] 1))
    unknown call_tmp[627364] "expr temp" "maybe param" "maybe type" "temp"
    (627367 'move' call_tmp[627364](80258 call _cond_test call_tmp[627359]))
    if call_tmp[627364]
    {
      unknown call_tmp[627371] "expr temp" "maybe param" "maybe type" "temp"
      (627374 'move' call_tmp[627371](80247 call stride _mt[243] x[80163]))
      unknown call_tmp[627376] "expr temp" "maybe param" "maybe type" "temp"
      (627379 'move' call_tmp[627376](80251 call _cast string[26] call_tmp[627371]))
      unknown call_tmp[627381] "expr temp" "maybe param" "maybe type" "temp"
      (627384 'move' call_tmp[627381](80253 call + " by " call_tmp[627376]))
      (80255 call += ret[80167] call_tmp[627381])
      (476487 'end of statement' ret[80167])
    }
    unknown alignCheckRange[80264] "dead at end of block" "insert auto destroy"
    (541345 'init var' alignCheckRange[80264] x[80163])
    (80267 'end of statement')
    (80275 call(80271 call (partial) normalizeAlignment _mt[243] alignCheckRange[80264]))
    (476489 'end of statement' alignCheckRange[80264])
    unknown call_tmp[627390] "expr temp" "maybe param" "maybe type" "temp"
    (627393 'move' call_tmp[627390](80284 call(80280 call (partial) isNaturallyAligned _mt[243] alignCheckRange[80264])))
    unknown call_tmp[627395] "expr temp" "maybe param" "maybe type" "temp"
    (627398 'move' call_tmp[627395](80285 call ! call_tmp[627390]))
    unknown call_tmp[627400] "expr temp" "maybe param" "maybe type" "temp"
    (627403 'move' call_tmp[627400](80327 call _cond_test call_tmp[627395]))
    if call_tmp[627400]
    {
      unknown call_tmp[627407] "expr temp" "maybe param" "maybe type" "temp"
      (627410 'move' call_tmp[627407](80308 call alignment _mt[243] x[80163]))
      unknown call_tmp[627412] "expr temp" "maybe param" "maybe type" "temp"
      (627415 'move' call_tmp[627412](80312 call chpl__idxToInt call_tmp[627407]))
      unknown call_tmp[627419] "expr temp" "maybe param" "maybe type" "temp"
      (627422 'move' call_tmp[627419](80315 call stride _mt[243] x[80163]))
      unknown call_tmp[627424] "expr temp" "maybe param" "maybe type" "temp"
      (627427 'move' call_tmp[627424](80318 call chpl__mod call_tmp[627412] call_tmp[627419]))
      unknown call_tmp[627429] "expr temp" "maybe param" "maybe type" "temp"
      (627432 'move' call_tmp[627429](80320 call _cast string[26] call_tmp[627424]))
      unknown call_tmp[627434] "expr temp" "maybe param" "maybe type" "temp"
      (627437 'move' call_tmp[627434](80322 call + " align " call_tmp[627429]))
      (80324 call += ret[80167] call_tmp[627434])
      (476491 'end of statement' ret[80167])
    }
    (511686 'move' ret[511681](511685 'deref' ret[80167]))
    gotoReturn _end__cast[511679] _end__cast[511679]
    (476493 'end of statement' ret[80167])
    label _end__cast[511679]
    (511683 return ret[511681])
  }
  function range[64316](?).normalizeAlignment[80340](arg _mt[80345]:_MT[238], ref arg this[80342]:range[64316](?) :
  range[64316](?)) : _unknown[51] "method" "no doc" "no return value for void"
  {
    unknown tmp[421162] "maybe param" "temp"
    (421173 'move' tmp[421162](376004 call stridable _mt[243] this[80342]))
    unknown call_tmp[627441] "expr temp" "maybe param" "maybe type" "temp"
    (627444 'move' call_tmp[627441](421175 call _cond_invalid tmp[421162]))
    if call_tmp[627441]
    {
      (421178 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559248] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559249] "maybe param" "temp"
    unknown call_tmp[627446] "expr temp" "maybe param" "maybe type" "temp"
    (627449 'move' call_tmp[627446](421163 call isTrue tmp[421162]))
    (559254 'move' tmp[559249](559252 call _cond_test call_tmp[627446]))
    if tmp[559249]
    {
      unknown tmp[559256] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627453] "expr temp" "maybe param" "maybe type" "temp"
      (627456 'move' call_tmp[627453](376008 call aligned _mt[243] this[80342]))
      unknown call_tmp[627458] "expr temp" "maybe param" "maybe type" "temp"
      (627461 'move' call_tmp[627458](80349 call ! call_tmp[627453]))
      (559258 'move' tmp[559256](421166 call isTrue call_tmp[627458]))
      (559263 'move' tmp[559248](559260 '_paramFoldLogical' tmp[559249] tmp[559256]))
    }
    {
      (559268 'move' tmp[559248](559265 '_paramFoldLogical' tmp[559249] 0))
    }
    unknown call_tmp[627463] "expr temp" "maybe param" "maybe type" "temp"
    (627466 'move' call_tmp[627463](80403 call _cond_test tmp[559248]))
    if call_tmp[627463]
    {
      unknown tmp[559360] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559361] "maybe param" "temp"
      unknown call_tmp[627468] "expr temp" "maybe param" "maybe type" "temp"
      (627471 'move' call_tmp[627468](80357 call isBoundedRange this[80342]))
      (559366 'move' tmp[559361](559364 call _cond_test call_tmp[627468]))
      if tmp[559361]
      {
        unknown tmp[559275] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559276] "maybe param" "temp"
        unknown call_tmp[627475] "expr temp" "maybe param" "maybe type" "temp"
        (627478 'move' call_tmp[627475](376018 call stride _mt[243] this[80342]))
        unknown call_tmp[627480] "expr temp" "maybe param" "maybe type" "temp"
        (627483 'move' call_tmp[627480](80360 call > call_tmp[627475] 0))
        (559281 'move' tmp[559276](559279 call _cond_test call_tmp[627480]))
        if tmp[559276]
        {
          unknown tmp[559283] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559285 'move' tmp[559283](376023 call _low _mt[243] this[80342]))
          (559290 'move' tmp[559275](559287 '_paramFoldLogical' tmp[559276] tmp[559283]))
        }
        {
          unknown tmp[559292] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559294 'move' tmp[559292](376028 call _high _mt[243] this[80342]))
          (559299 'move' tmp[559275](559296 '_paramFoldLogical' tmp[559276] tmp[559292]))
        }
        (559371 'move' tmp[559360](559368 '_paramFoldLogical' tmp[559361] tmp[559275]))
      }
      {
        unknown tmp[559333] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[559334] "maybe param" "temp"
        unknown call_tmp[627491] "expr temp" "maybe param" "maybe type" "temp"
        (627494 'move' call_tmp[627491](80368 call boundedType _mt[243] this[80342]))
        unknown call_tmp[627496] "expr temp" "maybe param" "maybe type" "temp"
        (627499 'move' call_tmp[627496](80375 call == call_tmp[627491] boundedLow[64207]))
        (559339 'move' tmp[559334](559337 call _cond_test call_tmp[627496]))
        if tmp[559334]
        {
          unknown tmp[559341] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559343 'move' tmp[559341](376033 call _low _mt[243] this[80342]))
          (559348 'move' tmp[559333](559345 '_paramFoldLogical' tmp[559334] tmp[559341]))
        }
        {
          unknown tmp[559306] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[559307] "maybe param" "temp"
          unknown call_tmp[627505] "expr temp" "maybe param" "maybe type" "temp"
          (627508 'move' call_tmp[627505](80379 call boundedType _mt[243] this[80342]))
          unknown call_tmp[627510] "expr temp" "maybe param" "maybe type" "temp"
          (627513 'move' call_tmp[627510](80386 call == call_tmp[627505] boundedHigh[64209]))
          (559312 'move' tmp[559307](559310 call _cond_test call_tmp[627510]))
          if tmp[559307]
          {
            unknown tmp[559314] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (559316 'move' tmp[559314](376038 call _high _mt[243] this[80342]))
            (559321 'move' tmp[559306](559318 '_paramFoldLogical' tmp[559307] tmp[559314]))
          }
          {
            (559326 'move' tmp[559306](559323 '_paramFoldLogical' tmp[559307] 0))
          }
          (559353 'move' tmp[559333](559350 '_paramFoldLogical' tmp[559334] tmp[559306]))
        }
        (559376 'move' tmp[559360](559373 '_paramFoldLogical' tmp[559361] tmp[559333]))
      }
      unknown call_tmp[627519] "expr temp" "maybe param" "maybe type" "temp"
      (627522 'move' call_tmp[627519](376013 call _alignment _mt[243] this[80342]))
      (80399 call = call_tmp[627519] tmp[559360])
    }
    (511690 return _void[55])
  }
  function range[64316](?).chpl__unTranslate[80417](arg _mt[80422]:_MT[238], arg this[80419]:range[64316](?) :
  range[64316](?), arg i[80414] :
  (376042 call intIdxType _mt[243] this[80419])) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511694] "RVV" "temp"
    unknown call_tmp[627526] "expr temp" "maybe param" "maybe type" "temp"
    (627529 'move' call_tmp[627526](80426 call - this[80419] i[80414]))
    (511699 'move' ret[511694](511698 'deref' call_tmp[627526]))
    (511696 return ret[511694])
  }
  function range[64316](?).chpl__unTranslate[80438](arg _mt[80443]:_MT[238], arg this[80440]:range[64316](?) :
  range[64316](?), arg i[80436]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511703] "RVV" "temp"
    unknown call_tmp[627531] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627534 'move' call_tmp[627531](80447 'typeof' i[80436]))
    unknown call_tmp[627536] "expr temp" "maybe param" "maybe type" "temp"
    (627539 'move' call_tmp[627536](80449 call isIntType call_tmp[627531]))
    unknown call_tmp[627541] "expr temp" "maybe param" "maybe type" "temp"
    (627544 'move' call_tmp[627541](80465 call _cond_test call_tmp[627536]))
    if call_tmp[627541]
    {
      unknown call_tmp[627546] "expr temp" "maybe param" "maybe type" "temp"
      (627549 'move' call_tmp[627546](80452 call - this[80440] i[80436]))
      (511708 'move' ret[511703](511707 'deref' call_tmp[627546]))
      gotoReturn _end_chpl__unTranslate[511701] _end_chpl__unTranslate[511701]
    }
    {
      unknown call_tmp[627551] "expr temp" "maybe param" "maybe type" "temp"
      (627554 'move' call_tmp[627551](80460 call abs i[80436]))
      unknown call_tmp[627556] "expr temp" "maybe param" "maybe type" "temp"
      (627559 'move' call_tmp[627556](80461 call + this[80440] call_tmp[627551]))
      (511713 'move' ret[511703](511712 'deref' call_tmp[627556]))
      gotoReturn _end_chpl__unTranslate[511701] _end_chpl__unTranslate[511701]
    }
    label _end_chpl__unTranslate[511701]
    (511705 return ret[511703])
  }
  function chpl__hasAlignment[80483](arg r[80480]:range[64316](?)) : _unknown[51]
  {
    unknown ret[511719] "RVV" "temp"
    unknown tmp[421183] "maybe param" "temp"
    (421194 'move' tmp[421183](80490 call(80486 call (partial) hasLowBound _mt[243] r[80480])))
    unknown call_tmp[627563] "expr temp" "maybe param" "maybe type" "temp"
    (627566 'move' call_tmp[627563](421196 call _cond_invalid tmp[421183]))
    if call_tmp[627563]
    {
      (421199 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559383] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559384] "maybe param" "temp"
    unknown call_tmp[627568] "expr temp" "maybe param" "maybe type" "temp"
    (627571 'move' call_tmp[627568](421184 call isTrue tmp[421183]))
    (559389 'move' tmp[559384](559387 call _cond_test call_tmp[627568]))
    if tmp[559384]
    {
      unknown tmp[559391] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627575] "expr temp" "maybe param" "maybe type" "temp"
      (627578 'move' call_tmp[627575](80492 call stride _mt[243] r[80480]))
      unknown call_tmp[627580] "expr temp" "maybe param" "maybe type" "temp"
      (627583 'move' call_tmp[627580](80496 call >= call_tmp[627575] 2))
      (559393 'move' tmp[559391](421187 call isTrue call_tmp[627580]))
      (559398 'move' tmp[559383](559395 '_paramFoldLogical' tmp[559384] tmp[559391]))
    }
    {
      (559403 'move' tmp[559383](559400 '_paramFoldLogical' tmp[559384] 0))
    }
    unknown call_tmp[627585] "expr temp" "maybe param" "maybe type" "temp"
    (627588 'move' call_tmp[627585](80503 call _cond_test tmp[559383]))
    if call_tmp[627585]
    {
      (511724 'move' ret[511719](511723 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511717] _end_chpl__hasAlignment[511717]
    }
    unknown tmp[421204] "maybe param" "temp"
    (421215 'move' tmp[421204](80514 call(80510 call (partial) hasHighBound _mt[243] r[80480])))
    unknown call_tmp[627592] "expr temp" "maybe param" "maybe type" "temp"
    (627595 'move' call_tmp[627592](421217 call _cond_invalid tmp[421204]))
    if call_tmp[627592]
    {
      (421220 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559410] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559411] "maybe param" "temp"
    unknown call_tmp[627597] "expr temp" "maybe param" "maybe type" "temp"
    (627600 'move' call_tmp[627597](421205 call isTrue tmp[421204]))
    (559416 'move' tmp[559411](559414 call _cond_test call_tmp[627597]))
    if tmp[559411]
    {
      unknown tmp[559418] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627604] "expr temp" "maybe param" "maybe type" "temp"
      (627607 'move' call_tmp[627604](80516 call stride _mt[243] r[80480]))
      unknown call_tmp[627609] "expr temp" "maybe param" "maybe type" "temp"
      (627612 'move' call_tmp[627609](80520 call - 2))
      unknown call_tmp[627614] "expr temp" "maybe param" "maybe type" "temp"
      (627617 'move' call_tmp[627614](80522 call <= call_tmp[627604] call_tmp[627609]))
      (559420 'move' tmp[559418](421208 call isTrue call_tmp[627614]))
      (559425 'move' tmp[559410](559422 '_paramFoldLogical' tmp[559411] tmp[559418]))
    }
    {
      (559430 'move' tmp[559410](559427 '_paramFoldLogical' tmp[559411] 0))
    }
    unknown call_tmp[627619] "expr temp" "maybe param" "maybe type" "temp"
    (627622 'move' call_tmp[627619](80529 call _cond_test tmp[559410]))
    if call_tmp[627619]
    {
      (511729 'move' ret[511719](511728 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[511717] _end_chpl__hasAlignment[511717]
    }
    (511734 'move' ret[511719](511733 'deref' 0))
    label _end_chpl__hasAlignment[511717]
    (511721 return ret[511719])
  }
  function chpl__mod[80545](arg dividend[80542]:integral[199](?), arg modulus[80548]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511738] "RVV" "temp"
    unknown call_tmp[627624] "expr temp" "maybe param" "maybe type" "temp"
    (627627 'move' call_tmp[627624](80554 call abs modulus[80548]))
    unknown call_tmp[627631] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627634 'move' call_tmp[627631](80559 'typeof' dividend[80542]))
    unknown call_tmp[627636] "maybe param" "maybe type" "temp"
    (627639 'move' call_tmp[627636](80561 call(80555 call (partial) safeCast _mt[243] call_tmp[627624]) call_tmp[627631]))
    const m[80562] "dead at end of block" "const" "insert auto destroy"
    (541347 'init var' m[80562] call_tmp[627636])
    (80565 'end of statement')
    unknown call_tmp[627641] "maybe param" "maybe type" "temp"
    (627644 'move' call_tmp[627641](80569 call % dividend[80542] m[80562]))
    unknown tmp[80571] "dead at end of block" "insert auto destroy"
    (541349 'init var' tmp[80571] call_tmp[627641])
    (80574 'end of statement' m[80562])
    unknown call_tmp[627646] "expr temp" "maybe param" "maybe type" "temp"
    (627649 'move' call_tmp[627646](80578 call isInt dividend[80542]))
    unknown call_tmp[627651] "expr temp" "maybe param" "maybe type" "temp"
    (627654 'move' call_tmp[627651](80593 call _cond_test call_tmp[627646]))
    if call_tmp[627651]
    {
      unknown call_tmp[627656] "expr temp" "maybe param" "maybe type" "temp"
      (627659 'move' call_tmp[627656](80581 call < tmp[80571] 0))
      unknown call_tmp[627661] "expr temp" "maybe param" "maybe type" "temp"
      (627664 'move' call_tmp[627661](80588 call _cond_test call_tmp[627656]))
      if call_tmp[627661]
      {
        (80585 call += tmp[80571] m[80562])
        (476506 'end of statement' tmp[80571] m[80562])
      }
    }
    (511743 'move' ret[511738](511742 'deref' tmp[80571]))
    gotoReturn _end_chpl__mod[511736] _end_chpl__mod[511736]
    (476509 'end of statement' tmp[80571])
    label _end_chpl__mod[511736]
    (511740 return ret[511738])
  }
  function chpl__diffMod[80609](arg minuend[80606]:integral[199](?), arg subtrahend[80612]:integral[199](?), arg modulus[80616]:integral[199](?)) : _unknown[51]
  {
    unknown ret[511749] "RVV" "temp"
    unknown call_tmp[627666] "expr temp" "maybe param" "maybe type" "temp"
    (627669 'move' call_tmp[627666](80630 call abs modulus[80616]))
    unknown call_tmp[627673] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627676 'move' call_tmp[627673](80635 'typeof' minuend[80606]))
    unknown call_tmp[627678] "maybe param" "maybe type" "temp"
    (627681 'move' call_tmp[627678](80637 call(80631 call (partial) safeCast _mt[243] call_tmp[627666]) call_tmp[627673]))
    const m[80638] "dead at end of block" "const" "insert auto destroy"
    (541351 'init var' m[80638] call_tmp[627678])
    (80641 'end of statement')
    unknown call_tmp[627683] "maybe param" "maybe type" "temp"
    (627686 'move' call_tmp[627683](80647 call chpl__mod minuend[80606] m[80638]))
    unknown minMod[80648] "dead at end of block" "insert auto destroy"
    (541353 'init var' minMod[80648] call_tmp[627683])
    (80651 'end of statement')
    unknown call_tmp[627688] "maybe param" "maybe type" "temp"
    (627691 'move' call_tmp[627688](80656 call chpl__mod subtrahend[80612] m[80638]))
    unknown subMod[80657] "dead at end of block" "insert auto destroy"
    (541355 'init var' subMod[80657] call_tmp[627688])
    (80660 'end of statement' m[80638] m[80638])
    unknown tmp[559437] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559438] "maybe param" "temp"
    unknown call_tmp[627693] "expr temp" "maybe param" "maybe type" "temp"
    (627696 'move' call_tmp[627693](80663 call < minMod[80648] subMod[80657]))
    (559443 'move' tmp[559438](559441 call _cond_test call_tmp[627693]))
    if tmp[559438]
    {
      unknown tmp[559445] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627698] "expr temp" "maybe param" "maybe type" "temp"
      (627701 'move' call_tmp[627698](80668 call - subMod[80657] minMod[80648]))
      (559447 'move' tmp[559445](80670 call - m[80638] call_tmp[627698]))
      (559452 'move' tmp[559437](559449 '_paramFoldLogical' tmp[559438] tmp[559445]))
    }
    {
      unknown tmp[559454] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (559456 'move' tmp[559454](80674 call - minMod[80648] subMod[80657]))
      (559461 'move' tmp[559437](559458 '_paramFoldLogical' tmp[559438] tmp[559454]))
    }
    unknown call_tmp[627703] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627706 'move' call_tmp[627703](511753 'typeof' minuend[80606]))
    (511756 'move' ret[511749](511755 'coerce' tmp[559437] call_tmp[627703]))
    gotoReturn _end_chpl__diffMod[511747] _end_chpl__diffMod[511747]
    (476513 'end of statement' minMod[80648] subMod[80657] m[80638] subMod[80657] minMod[80648] minMod[80648] subMod[80657])
    label _end_chpl__diffMod[511747]
    (511751 return ret[511749])
  }
  where {
    unknown call_tmp[627708] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627711 'move' call_tmp[627708](80622 'typeof' minuend[80606]))
    unknown call_tmp[627713] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627716 'move' call_tmp[627713](80624 'typeof' subtrahend[80612]))
    (80625 call == call_tmp[627708] call_tmp[627713])
  }
  { scopeless type
    (80620 'typeof' minuend[80606])
  }
  function chpl__diffMod[80691](arg minuend[80688]:integral[199](?), arg subtrahend[80694]:integral[199](?), arg modulus[80698]:integral[199](?)) : _unknown[51] "no return value for void"
  {
    (80720 call compilerError "chpl__diffMod -- Operand types must match.")
    (511760 return _void[55])
  }
  function chpl__add[80732](arg a[80729]:_any[178](?), arg b[80735] :
  (459629 'typeof' a[80729]), arg resultType[80738]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511764] "RVV" "temp"
    unknown call_tmp[627718] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (627721 'move' call_tmp[627718](459631 'typeof' a[80729]))
    unknown call_tmp[627723] "expr temp" "maybe param" "maybe type" "temp"
    (627726 'move' call_tmp[627723](80743 call isIntegralType call_tmp[627718]))
    unknown call_tmp[627728] "expr temp" "maybe param" "maybe type" "temp"
    (627731 'move' call_tmp[627728](80744 call ! call_tmp[627723]))
    unknown call_tmp[627733] "expr temp" "maybe param" "maybe type" "temp"
    (627736 'move' call_tmp[627733](80767 call _cond_test call_tmp[627728]))
    if call_tmp[627733]
    {
      (80765 call compilerError "Values must be of integral type.")
    }
    unknown tmp[421225] "maybe param" "temp"
    unknown tmp[421246] "maybe param" "temp"
    (421257 'move' tmp[421246](80775 call > a[80729] 0))
    unknown call_tmp[627738] "expr temp" "maybe param" "maybe type" "temp"
    (627741 'move' call_tmp[627738](421259 call _cond_invalid tmp[421246]))
    if call_tmp[627738]
    {
      (421262 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559468] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559469] "maybe param" "temp"
    unknown call_tmp[627743] "expr temp" "maybe param" "maybe type" "temp"
    (627746 'move' call_tmp[627743](421247 call isTrue tmp[421246]))
    (559474 'move' tmp[559469](559472 call _cond_test call_tmp[627743]))
    if tmp[559469]
    {
      unknown tmp[559476] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627748] "expr temp" "maybe param" "maybe type" "temp"
      (627751 'move' call_tmp[627748](80779 call > b[80735] 0))
      (559478 'move' tmp[559476](421250 call isTrue call_tmp[627748]))
      (559483 'move' tmp[559468](559480 '_paramFoldLogical' tmp[559469] tmp[559476]))
    }
    {
      (559488 'move' tmp[559468](559485 '_paramFoldLogical' tmp[559469] 0))
    }
    (421236 'move' tmp[421225] tmp[559468])
    unknown call_tmp[627753] "expr temp" "maybe param" "maybe type" "temp"
    (627756 'move' call_tmp[627753](421238 call _cond_invalid tmp[421225]))
    if call_tmp[627753]
    {
      (421241 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559495] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559496] "maybe param" "temp"
    unknown call_tmp[627758] "expr temp" "maybe param" "maybe type" "temp"
    (627761 'move' call_tmp[627758](421226 call isTrue tmp[421225]))
    (559501 'move' tmp[559496](559499 call _cond_test call_tmp[627758]))
    if tmp[559496]
    {
      unknown tmp[559503] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627763] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (627766 'move' call_tmp[627763](459633 'typeof' a[80729]))
      unknown call_tmp[627768] "expr temp" "maybe param" "maybe type" "temp"
      (627771 'move' call_tmp[627768](80787 call max call_tmp[627763]))
      unknown call_tmp[627773] "expr temp" "maybe param" "maybe type" "temp"
      (627776 'move' call_tmp[627773](80789 call - call_tmp[627768] a[80729]))
      unknown call_tmp[627778] "expr temp" "maybe param" "maybe type" "temp"
      (627781 'move' call_tmp[627778](80791 call > b[80735] call_tmp[627773]))
      (559505 'move' tmp[559503](421229 call isTrue call_tmp[627778]))
      (559510 'move' tmp[559495](559507 '_paramFoldLogical' tmp[559496] tmp[559503]))
    }
    {
      (559515 'move' tmp[559495](559512 '_paramFoldLogical' tmp[559496] 0))
    }
    unknown call_tmp[627783] "expr temp" "maybe param" "maybe type" "temp"
    (627786 'move' call_tmp[627783](80801 call _cond_test tmp[559495]))
    if call_tmp[627783]
    {
      unknown call_tmp[627788] "expr temp" "maybe param" "maybe type" "temp"
      (627791 'move' call_tmp[627788](80798 call max resultType[80738]))
      (511769 'move' ret[511764](511768 'deref' call_tmp[627788]))
      gotoReturn _end_chpl__add[511762] _end_chpl__add[511762]
    }
    unknown tmp[421267] "maybe param" "temp"
    unknown tmp[421288] "maybe param" "temp"
    (421299 'move' tmp[421288](80808 call < a[80729] 0))
    unknown call_tmp[627793] "expr temp" "maybe param" "maybe type" "temp"
    (627796 'move' call_tmp[627793](421301 call _cond_invalid tmp[421288]))
    if call_tmp[627793]
    {
      (421304 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559522] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559523] "maybe param" "temp"
    unknown call_tmp[627798] "expr temp" "maybe param" "maybe type" "temp"
    (627801 'move' call_tmp[627798](421289 call isTrue tmp[421288]))
    (559528 'move' tmp[559523](559526 call _cond_test call_tmp[627798]))
    if tmp[559523]
    {
      unknown tmp[559530] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627803] "expr temp" "maybe param" "maybe type" "temp"
      (627806 'move' call_tmp[627803](80812 call < b[80735] 0))
      (559532 'move' tmp[559530](421292 call isTrue call_tmp[627803]))
      (559537 'move' tmp[559522](559534 '_paramFoldLogical' tmp[559523] tmp[559530]))
    }
    {
      (559542 'move' tmp[559522](559539 '_paramFoldLogical' tmp[559523] 0))
    }
    (421278 'move' tmp[421267] tmp[559522])
    unknown call_tmp[627808] "expr temp" "maybe param" "maybe type" "temp"
    (627811 'move' call_tmp[627808](421280 call _cond_invalid tmp[421267]))
    if call_tmp[627808]
    {
      (421283 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[559549] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[559550] "maybe param" "temp"
    unknown call_tmp[627813] "expr temp" "maybe param" "maybe type" "temp"
    (627816 'move' call_tmp[627813](421268 call isTrue tmp[421267]))
    (559555 'move' tmp[559550](559553 call _cond_test call_tmp[627813]))
    if tmp[559550]
    {
      unknown tmp[559557] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[627818] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (627821 'move' call_tmp[627818](459635 'typeof' a[80729]))
      unknown call_tmp[627823] "expr temp" "maybe param" "maybe type" "temp"
      (627826 'move' call_tmp[627823](80820 call min call_tmp[627818]))
      unknown call_tmp[627828] "expr temp" "maybe param" "maybe type" "temp"
      (627831 'move' call_tmp[627828](80822 call - call_tmp[627823] a[80729]))
      unknown call_tmp[627833] "expr temp" "maybe param" "maybe type" "temp"
      (627836 'move' call_tmp[627833](80824 call < b[80735] call_tmp[627828]))
      (559559 'move' tmp[559557](421271 call isTrue call_tmp[627833]))
      (559564 'move' tmp[559549](559561 '_paramFoldLogical' tmp[559550] tmp[559557]))
    }
    {
      (559569 'move' tmp[559549](559566 '_paramFoldLogical' tmp[559550] 0))
    }
    unknown call_tmp[627838] "expr temp" "maybe param" "maybe type" "temp"
    (627841 'move' call_tmp[627838](80834 call _cond_test tmp[559549]))
    if call_tmp[627838]
    {
      unknown call_tmp[627843] "expr temp" "maybe param" "maybe type" "temp"
      (627846 'move' call_tmp[627843](80831 call min resultType[80738]))
      (511774 'move' ret[511764](511773 'deref' call_tmp[627843]))
      gotoReturn _end_chpl__add[511762] _end_chpl__add[511762]
    }
    unknown call_tmp[627848] "expr temp" "maybe param" "maybe type" "temp"
    (627851 'move' call_tmp[627848](80842 call isUintType resultType[80738]))
    unknown call_tmp[627853] "expr temp" "maybe param" "maybe type" "temp"
    (627856 'move' call_tmp[627853](80919 call _cond_test call_tmp[627848]))
    if call_tmp[627853]
    {
      unknown tmp[421309] "maybe param" "temp"
      unknown tmp[421330] "maybe param" "temp"
      unknown tmp[421351] "maybe param" "temp"
      (421362 'move' tmp[421351](80845 call < a[80729] 0))
      unknown call_tmp[627858] "expr temp" "maybe param" "maybe type" "temp"
      (627861 'move' call_tmp[627858](421364 call _cond_invalid tmp[421351]))
      if call_tmp[627858]
      {
        (421367 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559576] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559577] "maybe param" "temp"
      unknown call_tmp[627863] "expr temp" "maybe param" "maybe type" "temp"
      (627866 'move' call_tmp[627863](421352 call isTrue tmp[421351]))
      (559582 'move' tmp[559577](559580 call _cond_test call_tmp[627863]))
      if tmp[559577]
      {
        unknown tmp[559584] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[627868] "expr temp" "maybe param" "maybe type" "temp"
        (627871 'move' call_tmp[627868](80849 call > b[80735] 0))
        (559586 'move' tmp[559584](421355 call isTrue call_tmp[627868]))
        (559591 'move' tmp[559576](559588 '_paramFoldLogical' tmp[559577] tmp[559584]))
      }
      {
        (559596 'move' tmp[559576](559593 '_paramFoldLogical' tmp[559577] 0))
      }
      (421341 'move' tmp[421330] tmp[559576])
      unknown call_tmp[627873] "expr temp" "maybe param" "maybe type" "temp"
      (627876 'move' call_tmp[627873](421343 call _cond_invalid tmp[421330]))
      if call_tmp[627873]
      {
        (421346 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559630] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559631] "maybe param" "temp"
      unknown call_tmp[627878] "expr temp" "maybe param" "maybe type" "temp"
      (627881 'move' call_tmp[627878](421331 call isTrue tmp[421330]))
      (559636 'move' tmp[559631](559634 call _cond_test call_tmp[627878]))
      if tmp[559631]
      {
        unknown tmp[421372] "maybe param" "temp"
        unknown call_tmp[627883] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (627886 'move' call_tmp[627883](459637 'typeof' a[80729]))
        unknown call_tmp[627888] "expr temp" "maybe param" "maybe type" "temp"
        (627891 'move' call_tmp[627888](80857 call min call_tmp[627883]))
        (421383 'move' tmp[421372](80858 call == a[80729] call_tmp[627888]))
        unknown call_tmp[627893] "expr temp" "maybe param" "maybe type" "temp"
        (627896 'move' call_tmp[627893](421385 call _cond_invalid tmp[421372]))
        if call_tmp[627893]
        {
          (421388 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[559603] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559604] "maybe param" "temp"
        unknown call_tmp[627898] "expr temp" "maybe param" "maybe type" "temp"
        (627901 'move' call_tmp[627898](421373 call isTrue tmp[421372]))
        (559609 'move' tmp[559604](559607 call _cond_test call_tmp[627898]))
        if tmp[559604]
        {
          (559614 'move' tmp[559603](559611 '_paramFoldLogical' tmp[559604] 1))
        }
        {
          unknown tmp[559616] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[627903] "expr temp" "maybe param" "maybe type" "temp"
          (627906 'move' call_tmp[627903](80863 call abs a[80729]))
          unknown call_tmp[627908] "expr temp" "maybe param" "maybe type" "temp"
          (627911 'move' call_tmp[627908](80867 call abs b[80735]))
          unknown call_tmp[627913] "expr temp" "maybe param" "maybe type" "temp"
          (627916 'move' call_tmp[627913](80868 call > call_tmp[627903] call_tmp[627908]))
          (559618 'move' tmp[559616](421377 call isTrue call_tmp[627913]))
          (559623 'move' tmp[559603](559620 '_paramFoldLogical' tmp[559604] tmp[559616]))
        }
        unknown tmp[559638] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559640 'move' tmp[559638](421334 call isTrue tmp[559603]))
        (559645 'move' tmp[559630](559642 '_paramFoldLogical' tmp[559631] tmp[559638]))
      }
      {
        (559650 'move' tmp[559630](559647 '_paramFoldLogical' tmp[559631] 0))
      }
      (421320 'move' tmp[421309] tmp[559630])
      unknown call_tmp[627918] "expr temp" "maybe param" "maybe type" "temp"
      (627921 'move' call_tmp[627918](421322 call _cond_invalid tmp[421309]))
      if call_tmp[627918]
      {
        (421325 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559738] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559739] "maybe param" "temp"
      unknown call_tmp[627923] "expr temp" "maybe param" "maybe type" "temp"
      (627926 'move' call_tmp[627923](421310 call isTrue tmp[421309]))
      (559744 'move' tmp[559739](559742 call _cond_test call_tmp[627923]))
      if tmp[559739]
      {
        (559749 'move' tmp[559738](559746 '_paramFoldLogical' tmp[559739] 1))
      }
      {
        unknown tmp[421393] "maybe param" "temp"
        unknown tmp[421414] "maybe param" "temp"
        (421425 'move' tmp[421414](80876 call > a[80729] 0))
        unknown call_tmp[627928] "expr temp" "maybe param" "maybe type" "temp"
        (627931 'move' call_tmp[627928](421427 call _cond_invalid tmp[421414]))
        if call_tmp[627928]
        {
          (421430 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559657] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559658] "maybe param" "temp"
        unknown call_tmp[627933] "expr temp" "maybe param" "maybe type" "temp"
        (627936 'move' call_tmp[627933](421415 call isTrue tmp[421414]))
        (559663 'move' tmp[559658](559661 call _cond_test call_tmp[627933]))
        if tmp[559658]
        {
          unknown tmp[559665] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[627938] "expr temp" "maybe param" "maybe type" "temp"
          (627941 'move' call_tmp[627938](80880 call < b[80735] 0))
          (559667 'move' tmp[559665](421418 call isTrue call_tmp[627938]))
          (559672 'move' tmp[559657](559669 '_paramFoldLogical' tmp[559658] tmp[559665]))
        }
        {
          (559677 'move' tmp[559657](559674 '_paramFoldLogical' tmp[559658] 0))
        }
        (421404 'move' tmp[421393] tmp[559657])
        unknown call_tmp[627943] "expr temp" "maybe param" "maybe type" "temp"
        (627946 'move' call_tmp[627943](421406 call _cond_invalid tmp[421393]))
        if call_tmp[627943]
        {
          (421409 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559711] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559712] "maybe param" "temp"
        unknown call_tmp[627948] "expr temp" "maybe param" "maybe type" "temp"
        (627951 'move' call_tmp[627948](421394 call isTrue tmp[421393]))
        (559717 'move' tmp[559712](559715 call _cond_test call_tmp[627948]))
        if tmp[559712]
        {
          unknown tmp[421435] "maybe param" "temp"
          unknown call_tmp[627953] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (627956 'move' call_tmp[627953](459639 'typeof' a[80729]))
          unknown call_tmp[627958] "expr temp" "maybe param" "maybe type" "temp"
          (627961 'move' call_tmp[627958](80888 call min call_tmp[627953]))
          (421446 'move' tmp[421435](80889 call == b[80735] call_tmp[627958]))
          unknown call_tmp[627963] "expr temp" "maybe param" "maybe type" "temp"
          (627966 'move' call_tmp[627963](421448 call _cond_invalid tmp[421435]))
          if call_tmp[627963]
          {
            (421451 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[559684] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[559685] "maybe param" "temp"
          unknown call_tmp[627968] "expr temp" "maybe param" "maybe type" "temp"
          (627971 'move' call_tmp[627968](421436 call isTrue tmp[421435]))
          (559690 'move' tmp[559685](559688 call _cond_test call_tmp[627968]))
          if tmp[559685]
          {
            (559695 'move' tmp[559684](559692 '_paramFoldLogical' tmp[559685] 1))
          }
          {
            unknown tmp[559697] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[627973] "expr temp" "maybe param" "maybe type" "temp"
            (627976 'move' call_tmp[627973](80894 call abs b[80735]))
            unknown call_tmp[627978] "expr temp" "maybe param" "maybe type" "temp"
            (627981 'move' call_tmp[627978](80898 call abs a[80729]))
            unknown call_tmp[627983] "expr temp" "maybe param" "maybe type" "temp"
            (627986 'move' call_tmp[627983](80899 call > call_tmp[627973] call_tmp[627978]))
            (559699 'move' tmp[559697](421440 call isTrue call_tmp[627983]))
            (559704 'move' tmp[559684](559701 '_paramFoldLogical' tmp[559685] tmp[559697]))
          }
          unknown tmp[559719] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (559721 'move' tmp[559719](421397 call isTrue tmp[559684]))
          (559726 'move' tmp[559711](559723 '_paramFoldLogical' tmp[559712] tmp[559719]))
        }
        {
          (559731 'move' tmp[559711](559728 '_paramFoldLogical' tmp[559712] 0))
        }
        unknown tmp[559751] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559753 'move' tmp[559751](421314 call isTrue tmp[559711]))
        (559758 'move' tmp[559738](559755 '_paramFoldLogical' tmp[559739] tmp[559751]))
      }
      unknown call_tmp[627988] "expr temp" "maybe param" "maybe type" "temp"
      (627991 'move' call_tmp[627988](80913 call _cond_test tmp[559738]))
      if call_tmp[627988]
      {
        unknown call_tmp[627993] "expr temp" "maybe param" "maybe type" "temp"
        (627996 'move' call_tmp[627993](80909 call _cast resultType[80738] 0))
        (511779 'move' ret[511764](511778 'deref' call_tmp[627993]))
        gotoReturn _end_chpl__add[511762] _end_chpl__add[511762]
      }
    }
    unknown call_tmp[627998] "expr temp" "maybe param" "maybe type" "temp"
    (628001 'move' call_tmp[627998](80925 call + a[80729] b[80735]))
    unknown call_tmp[628003] "expr temp" "maybe param" "maybe type" "temp"
    (628006 'move' call_tmp[628003](80928 call _cast resultType[80738] call_tmp[627998]))
    (511784 'move' ret[511764](511783 'deref' call_tmp[628003]))
    label _end_chpl__add[511762]
    (511766 return ret[511764])
  }
  function chpl__addRangeStrides[80938](arg start[80936]:_any[178](?), arg stride[80940]:_any[178](?), arg count[80942]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511815] "RVV" "temp"
    function convert[80950](arg a[80948]:_any[178](?), arg b[80952]:_any[178](?)) param : _unknown[51]
    {
      unknown ret[511788] "RVV" "param" "temp"
      unknown tmp[421456] "maybe param" "temp"
      unknown tmp[421477] "maybe param" "temp"
      unknown call_tmp[628008] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (628011 'move' call_tmp[628008](80955 'typeof' a[80948]))
      unknown call_tmp[628013] "expr temp" "maybe param" "maybe type" "temp"
      (628016 'move' call_tmp[628013](80959 call int(64)[13] 64))
      (421488 'move' tmp[421477](80960 call == call_tmp[628008] call_tmp[628013]))
      unknown call_tmp[628018] "expr temp" "maybe param" "maybe type" "temp"
      (628021 'move' call_tmp[628018](421490 call _cond_invalid tmp[421477]))
      if call_tmp[628018]
      {
        (421493 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[559765] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559766] "maybe param" "temp"
      unknown call_tmp[628023] "expr temp" "maybe param" "maybe type" "temp"
      (628026 'move' call_tmp[628023](421478 call isTrue tmp[421477]))
      (559771 'move' tmp[559766](559769 call _cond_test call_tmp[628023]))
      if tmp[559766]
      {
        unknown tmp[559773] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628028] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628031 'move' call_tmp[628028](80963 'typeof' b[80952]))
        unknown call_tmp[628033] "expr temp" "maybe param" "maybe type" "temp"
        (628036 'move' call_tmp[628033](80967 call uint(64)[115] 64))
        unknown call_tmp[628038] "expr temp" "maybe param" "maybe type" "temp"
        (628041 'move' call_tmp[628038](80968 call == call_tmp[628028] call_tmp[628033]))
        (559775 'move' tmp[559773](421481 call isTrue call_tmp[628038]))
        (559780 'move' tmp[559765](559777 '_paramFoldLogical' tmp[559766] tmp[559773]))
      }
      {
        (559785 'move' tmp[559765](559782 '_paramFoldLogical' tmp[559766] 0))
      }
      (421467 'move' tmp[421456] tmp[559765])
      unknown call_tmp[628043] "expr temp" "maybe param" "maybe type" "temp"
      (628046 'move' call_tmp[628043](421469 call _cond_invalid tmp[421456]))
      if call_tmp[628043]
      {
        (421472 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559819] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559820] "maybe param" "temp"
      unknown call_tmp[628048] "expr temp" "maybe param" "maybe type" "temp"
      (628051 'move' call_tmp[628048](421457 call isTrue tmp[421456]))
      (559825 'move' tmp[559820](559823 call _cond_test call_tmp[628048]))
      if tmp[559820]
      {
        (559830 'move' tmp[559819](559827 '_paramFoldLogical' tmp[559820] 1))
      }
      {
        unknown tmp[421498] "maybe param" "temp"
        unknown call_tmp[628053] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (628056 'move' call_tmp[628053](80973 'typeof' a[80948]))
        unknown call_tmp[628058] "expr temp" "maybe param" "maybe type" "temp"
        (628061 'move' call_tmp[628058](80977 call uint(64)[115] 64))
        (421509 'move' tmp[421498](80978 call == call_tmp[628053] call_tmp[628058]))
        unknown call_tmp[628063] "expr temp" "maybe param" "maybe type" "temp"
        (628066 'move' call_tmp[628063](421511 call _cond_invalid tmp[421498]))
        if call_tmp[628063]
        {
          (421514 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[559792] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[559793] "maybe param" "temp"
        unknown call_tmp[628068] "expr temp" "maybe param" "maybe type" "temp"
        (628071 'move' call_tmp[628068](421499 call isTrue tmp[421498]))
        (559798 'move' tmp[559793](559796 call _cond_test call_tmp[628068]))
        if tmp[559793]
        {
          unknown tmp[559800] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[628073] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (628076 'move' call_tmp[628073](80981 'typeof' b[80952]))
          unknown call_tmp[628078] "expr temp" "maybe param" "maybe type" "temp"
          (628081 'move' call_tmp[628078](80985 call int(64)[13] 64))
          unknown call_tmp[628083] "expr temp" "maybe param" "maybe type" "temp"
          (628086 'move' call_tmp[628083](80986 call == call_tmp[628073] call_tmp[628078]))
          (559802 'move' tmp[559800](421502 call isTrue call_tmp[628083]))
          (559807 'move' tmp[559792](559804 '_paramFoldLogical' tmp[559793] tmp[559800]))
        }
        {
          (559812 'move' tmp[559792](559809 '_paramFoldLogical' tmp[559793] 0))
        }
        unknown tmp[559832] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559834 'move' tmp[559832](421461 call isTrue tmp[559792]))
        (559839 'move' tmp[559819](559836 '_paramFoldLogical' tmp[559820] tmp[559832]))
      }
      (511793 'move' ret[511788](511792 'deref' tmp[559819]))
      (511790 return ret[511788])
    }
    function mul[81002](arg a[81000]:_any[178](?), arg b[81004]:_any[178](?)) : _unknown[51]
    {
      unknown ret[511797] "RVV" "temp"
      unknown tmp[559846] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559847] "maybe param" "temp"
      unknown call_tmp[628088] "expr temp" "maybe param" "maybe type" "temp"
      (628091 'move' call_tmp[628088](81010 call convert a[81000] b[81004]))
      (559852 'move' tmp[559847](559850 call _cond_test call_tmp[628088]))
      if tmp[559847]
      {
        unknown tmp[559854] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628093] "expr temp" "maybe param" "maybe type" "temp"
        (628096 'move' call_tmp[628093](81015 call int(64)[13] 64))
        unknown call_tmp[628098] "expr temp" "maybe param" "maybe type" "temp"
        (628101 'move' call_tmp[628098](81016 call _cast call_tmp[628093] a[81000]))
        unknown call_tmp[628103] "expr temp" "maybe param" "maybe type" "temp"
        (628106 'move' call_tmp[628103](81022 call int(64)[13] 64))
        unknown call_tmp[628108] "expr temp" "maybe param" "maybe type" "temp"
        (628111 'move' call_tmp[628108](81023 call _cast call_tmp[628103] b[81004]))
        (559856 'move' tmp[559854](81025 call * call_tmp[628098] call_tmp[628108]))
        (559861 'move' tmp[559846](559858 '_paramFoldLogical' tmp[559847] tmp[559854]))
      }
      {
        unknown tmp[559863] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559865 'move' tmp[559863](81029 call * a[81000] b[81004]))
        (559870 'move' tmp[559846](559867 '_paramFoldLogical' tmp[559847] tmp[559863]))
      }
      (511802 'move' ret[511797](511801 'deref' tmp[559846]))
      (511799 return ret[511797])
    }
    function add[81043](arg a[81041]:_any[178](?), arg b[81045]:_any[178](?)) : _unknown[51]
    {
      unknown ret[511806] "RVV" "temp"
      unknown tmp[559877] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559878] "maybe param" "temp"
      unknown call_tmp[628113] "expr temp" "maybe param" "maybe type" "temp"
      (628116 'move' call_tmp[628113](81051 call convert a[81041] b[81045]))
      (559883 'move' tmp[559878](559881 call _cond_test call_tmp[628113]))
      if tmp[559878]
      {
        unknown tmp[559885] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628118] "expr temp" "maybe param" "maybe type" "temp"
        (628121 'move' call_tmp[628118](81056 call int(64)[13] 64))
        unknown call_tmp[628123] "expr temp" "maybe param" "maybe type" "temp"
        (628126 'move' call_tmp[628123](81057 call _cast call_tmp[628118] a[81041]))
        unknown call_tmp[628128] "expr temp" "maybe param" "maybe type" "temp"
        (628131 'move' call_tmp[628128](81063 call int(64)[13] 64))
        unknown call_tmp[628133] "expr temp" "maybe param" "maybe type" "temp"
        (628136 'move' call_tmp[628133](81064 call _cast call_tmp[628128] b[81045]))
        (559887 'move' tmp[559885](81066 call + call_tmp[628123] call_tmp[628133]))
        (559892 'move' tmp[559877](559889 '_paramFoldLogical' tmp[559878] tmp[559885]))
      }
      {
        unknown tmp[559894] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (559896 'move' tmp[559894](81070 call + a[81041] b[81045]))
        (559901 'move' tmp[559877](559898 '_paramFoldLogical' tmp[559878] tmp[559894]))
      }
      (511811 'move' ret[511806](511810 'deref' tmp[559877]))
      (511808 return ret[511806])
    }
    unknown call_tmp[628138] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628141 'move' call_tmp[628138](81090 'typeof' start[80936]))
    unknown call_tmp[628143] "expr temp" "maybe param" "maybe type" "temp"
    (628146 'move' call_tmp[628143](81087 call mul stride[80940] count[80942]))
    unknown call_tmp[628148] "expr temp" "maybe param" "maybe type" "temp"
    (628151 'move' call_tmp[628148](81088 call add start[80936] call_tmp[628143]))
    unknown call_tmp[628153] "expr temp" "maybe param" "maybe type" "temp"
    (628156 'move' call_tmp[628153](81091 call _cast call_tmp[628138] call_tmp[628148]))
    unknown call_tmp[628158] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628161 'move' call_tmp[628158](511819 'typeof' start[80936]))
    (511822 'move' ret[511815](511821 'coerce' call_tmp[628153] call_tmp[628158]))
    (511817 return ret[511815])
  }
  { scopeless type
    (80945 'typeof' start[80936])
  }
  function chpl__extendedEuclidHelper[81102](arg u[81100]:_any[178](?), arg v[81104]:_any[178](?)) : _unknown[51]
  {
    unknown ret[511826] "RVV" "temp"
    unknown call_tmp[628163] "maybe param" "maybe type" "temp" "type variable"
    (628166 'move' call_tmp[628163](81107 'typeof' u[81100]))
    unknown zero[81109] "dead at end of block" "insert auto destroy"
    (541357 'init var' zero[81109] 0 call_tmp[628163])
    (81112 'end of statement')
    unknown call_tmp[628168] "maybe param" "maybe type" "temp" "type variable"
    (628171 'move' call_tmp[628168](81115 'typeof' u[81100]))
    unknown one[81117] "dead at end of block" "insert auto destroy"
    (541359 'init var' one[81117] 1 call_tmp[628168])
    (81120 'end of statement')
    unknown call_tmp[628173] "maybe param" "maybe type" "temp"
    (628176 'move' call_tmp[628173](81125 call _build_tuple one[81117] zero[81109] u[81100]))
    unknown U[81127] "dead at end of block" "insert auto destroy"
    (541361 'init var' U[81127] call_tmp[628173])
    (81130 'end of statement')
    unknown call_tmp[628178] "maybe param" "maybe type" "temp"
    (628181 'move' call_tmp[628178](81135 call _build_tuple zero[81109] one[81117] v[81104]))
    unknown V[81137] "dead at end of block" "insert auto destroy"
    (541363 'init var' V[81137] call_tmp[628178])
    (81140 'end of statement' one[81117] zero[81109] zero[81109] one[81117])
    {
      unknown tmp[81189] "temp"
      unknown call_tmp[628183] "expr temp" "maybe param" "maybe type" "temp"
      (628186 'move' call_tmp[628183](81214 call V[81137] 2))
      unknown call_tmp[628188] "expr temp" "maybe param" "maybe type" "temp"
      (628191 'move' call_tmp[628188](81212 call != call_tmp[628183] 0))
      (81217 'move' tmp[81189](81210 call _cond_test call_tmp[628188]))
      WhileDo[81194]
      {
        {
          unknown oldU[81149] "dead at end of block" "insert auto destroy"
          (541365 'init var' oldU[81149] U[81127])
          (81152 'end of statement')
          unknown call_tmp[628193] "expr temp" "maybe param" "maybe type" "temp"
          (628196 'move' call_tmp[628193](81157 call U[81127] 2))
          unknown call_tmp[628198] "expr temp" "maybe param" "maybe type" "temp"
          (628201 'move' call_tmp[628198](81161 call V[81137] 2))
          unknown call_tmp[628203] "maybe param" "maybe type" "temp"
          (628206 'move' call_tmp[628203](81162 call / call_tmp[628193] call_tmp[628198]))
          unknown q[81164] "dead at end of block" "insert auto destroy"
          (541367 'init var' q[81164] call_tmp[628203])
          (81167 'end of statement' U[81127] U[81127] V[81137])
          (81170 call = U[81127] V[81137])
          (476547 'end of statement' U[81127] V[81137])
          unknown call_tmp[628208] "expr temp" "maybe param" "maybe type" "temp"
          (628211 'move' call_tmp[628208](81180 call _build_tuple q[81164] q[81164] q[81164]))
          unknown call_tmp[628213] "expr temp" "maybe param" "maybe type" "temp"
          (628216 'move' call_tmp[628213](81182 call * V[81137] call_tmp[628208]))
          unknown call_tmp[628218] "expr temp" "maybe param" "maybe type" "temp"
          (628221 'move' call_tmp[628218](81184 call - oldU[81149] call_tmp[628213]))
          (81186 call = V[81137] call_tmp[628218])
          (476550 'end of statement' V[81137] oldU[81149] V[81137] q[81164] q[81164] q[81164])
        }
        label _continueLabel[81192]
        unknown call_tmp[628223] "expr temp" "maybe param" "maybe type" "temp"
        (628226 'move' call_tmp[628223](81202 call V[81137] 2))
        unknown call_tmp[628228] "expr temp" "maybe param" "maybe type" "temp"
        (628231 'move' call_tmp[628228](81200 call != call_tmp[628223] 0))
        (81205 'move' tmp[81189](81198 call _cond_test call_tmp[628228]))
        tmp[81189]
      }
      label _breakLabel[81193]
    }
    unknown call_tmp[628233] "expr temp" "maybe param" "maybe type" "temp"
    (628236 'move' call_tmp[628233](81223 call U[81127] 2))
    unknown call_tmp[628238] "expr temp" "maybe param" "maybe type" "temp"
    (628241 'move' call_tmp[628238](81227 call U[81127] 0))
    unknown call_tmp[628243] "expr temp" "maybe param" "maybe type" "temp"
    (628246 'move' call_tmp[628243](81229 call _build_tuple call_tmp[628233] call_tmp[628238]))
    (511831 'move' ret[511826](511830 'deref' call_tmp[628243]))
    gotoReturn _end_chpl__extendedEuclidHelper[511824] _end_chpl__extendedEuclidHelper[511824]
    (476557 'end of statement' U[81127] U[81127])
    label _end_chpl__extendedEuclidHelper[511824]
    (511828 return ret[511826])
  }
  function chpl__extendedEuclid[81244](arg u[81241] :
  (81240 call int(64)[13] 32), arg v[81250] :
  (81249 call int(64)[13] 32)) : _unknown[51] "inline"
  {
    unknown ret[511837] "RVV" "temp"
    unknown call_tmp[628248] "expr temp" "maybe param" "maybe type" "temp"
    (628251 'move' call_tmp[628248](81257 call chpl__extendedEuclidHelper u[81241] v[81250]))
    (511842 'move' ret[511837](511841 'deref' call_tmp[628248]))
    (511839 return ret[511837])
  }
  function chpl__extendedEuclid[81272](arg u[81269] :
  (81268 call int(64)[13] 64), arg v[81278] :
  (81277 call int(64)[13] 64)) : _unknown[51] "inline"
  {
    unknown ret[511846] "RVV" "temp"
    unknown call_tmp[628253] "expr temp" "maybe param" "maybe type" "temp"
    (628256 'move' call_tmp[628253](81285 call chpl__extendedEuclidHelper u[81269] v[81278]))
    (511851 'move' ret[511846](511850 'deref' call_tmp[628253]))
    (511848 return ret[511846])
  }
  function chpl__rangeIdxTypeError[81295](arg idxType[81293]:_any[178](?)) : _unknown[51] "private" "no return value for void"
  {
    unknown call_tmp[628258] "expr temp" "maybe param" "maybe type" "temp"
    (628261 'move' call_tmp[628258](81318 call _cast string[26] idxType[81293]))
    (81337 call compilerError "ranges don't support '" call_tmp[628258] "' as their idxType")
    (511853 return _void[55])
  }
  function chpl__rangeStrideType[81346](arg idxType[81344]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[511857] "RVV" "temp" "type variable"
    unknown call_tmp[628263] "expr temp" "maybe param" "maybe type" "temp"
    (628266 'move' call_tmp[628263](81351 call isIntegralType idxType[81344]))
    unknown call_tmp[628268] "expr temp" "maybe param" "maybe type" "temp"
    (628271 'move' call_tmp[628268](81383 call _cond_test call_tmp[628263]))
    if call_tmp[628268]
    {
      unknown call_tmp[628273] "expr temp" "maybe param" "maybe type" "temp"
      (628276 'move' call_tmp[628273](81355 call chpl__signedType idxType[81344]))
      (511862 'move' ret[511857](511861 'deref' call_tmp[628273]))
      gotoReturn _end_chpl__rangeStrideType[511855] _end_chpl__rangeStrideType[511855]
    }
    {
      unknown tmp[421519] "maybe param" "temp"
      (421530 'move' tmp[421519](81362 call isEnumType idxType[81344]))
      unknown call_tmp[628278] "expr temp" "maybe param" "maybe type" "temp"
      (628281 'move' call_tmp[628278](421532 call _cond_invalid tmp[421519]))
      if call_tmp[628278]
      {
        (421535 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559908] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559909] "maybe param" "temp"
      unknown call_tmp[628283] "expr temp" "maybe param" "maybe type" "temp"
      (628286 'move' call_tmp[628283](421520 call isTrue tmp[421519]))
      (559914 'move' tmp[559909](559912 call _cond_test call_tmp[628283]))
      if tmp[559909]
      {
        (559919 'move' tmp[559908](559916 '_paramFoldLogical' tmp[559909] 1))
      }
      {
        unknown tmp[559921] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628288] "expr temp" "maybe param" "maybe type" "temp"
        (628291 'move' call_tmp[628288](81366 call isBoolType idxType[81344]))
        (559923 'move' tmp[559921](421524 call isTrue call_tmp[628288]))
        (559928 'move' tmp[559908](559925 '_paramFoldLogical' tmp[559909] tmp[559921]))
      }
      unknown call_tmp[628293] "expr temp" "maybe param" "maybe type" "temp"
      (628296 'move' call_tmp[628293](81379 call _cond_test tmp[559908]))
      if call_tmp[628293]
      {
        (511867 'move' ret[511857](511866 'deref' int(64)[13]))
        gotoReturn _end_chpl__rangeStrideType[511855] _end_chpl__rangeStrideType[511855]
      }
      {
        (81376 call chpl__rangeIdxTypeError idxType[81344])
      }
    }
    label _end_chpl__rangeStrideType[511855]
    (511859 return ret[511857])
  }
  function chpl__rangeUnsignedType[81395](arg idxType[81393]:_any[178](?)) type : _unknown[51] "private"
  {
    unknown ret[511873] "RVV" "temp" "type variable"
    unknown call_tmp[628298] "expr temp" "maybe param" "maybe type" "temp"
    (628301 'move' call_tmp[628298](81400 call isIntegralType idxType[81393]))
    unknown call_tmp[628303] "expr temp" "maybe param" "maybe type" "temp"
    (628306 'move' call_tmp[628303](81432 call _cond_test call_tmp[628298]))
    if call_tmp[628303]
    {
      unknown call_tmp[628308] "expr temp" "maybe param" "maybe type" "temp"
      (628311 'move' call_tmp[628308](81404 call chpl__unsignedType idxType[81393]))
      (511878 'move' ret[511873](511877 'deref' call_tmp[628308]))
      gotoReturn _end_chpl__rangeUnsignedType[511871] _end_chpl__rangeUnsignedType[511871]
    }
    {
      unknown tmp[421540] "maybe param" "temp"
      (421551 'move' tmp[421540](81411 call isEnumType idxType[81393]))
      unknown call_tmp[628313] "expr temp" "maybe param" "maybe type" "temp"
      (628316 'move' call_tmp[628313](421553 call _cond_invalid tmp[421540]))
      if call_tmp[628313]
      {
        (421556 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[559935] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[559936] "maybe param" "temp"
      unknown call_tmp[628318] "expr temp" "maybe param" "maybe type" "temp"
      (628321 'move' call_tmp[628318](421541 call isTrue tmp[421540]))
      (559941 'move' tmp[559936](559939 call _cond_test call_tmp[628318]))
      if tmp[559936]
      {
        (559946 'move' tmp[559935](559943 '_paramFoldLogical' tmp[559936] 1))
      }
      {
        unknown tmp[559948] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[628323] "expr temp" "maybe param" "maybe type" "temp"
        (628326 'move' call_tmp[628323](81415 call isBoolType idxType[81393]))
        (559950 'move' tmp[559948](421545 call isTrue call_tmp[628323]))
        (559955 'move' tmp[559935](559952 '_paramFoldLogical' tmp[559936] tmp[559948]))
      }
      unknown call_tmp[628328] "expr temp" "maybe param" "maybe type" "temp"
      (628331 'move' call_tmp[628328](81428 call _cond_test tmp[559935]))
      if call_tmp[628328]
      {
        (511883 'move' ret[511873](511882 'deref' uint(64)[115]))
        gotoReturn _end_chpl__rangeUnsignedType[511871] _end_chpl__rangeUnsignedType[511871]
      }
      {
        (81425 call chpl__rangeIdxTypeError idxType[81393])
      }
    }
    label _end_chpl__rangeUnsignedType[511871]
    (511875 return ret[511873])
  }
  function chpl__idxTypeToIntIdxType[81444](arg idxType[81442]:_any[178](?)) type : _unknown[51] "no doc"
  {
    unknown ret[511889] "RVV" "temp" "type variable"
    unknown call_tmp[628333] "expr temp" "maybe param" "maybe type" "temp"
    (628336 'move' call_tmp[628333](81449 call isBoolType idxType[81442]))
    unknown call_tmp[628338] "expr temp" "maybe param" "maybe type" "temp"
    (628341 'move' call_tmp[628338](81503 call _cond_test call_tmp[628333]))
    if call_tmp[628338]
    {
      (511894 'move' ret[511889](511893 'deref' int(64)[13]))
      gotoReturn _end_chpl__idxTypeToIntIdxType[511887] _end_chpl__idxTypeToIntIdxType[511887]
    }
    {
      unknown call_tmp[628343] "expr temp" "maybe param" "maybe type" "temp"
      (628346 'move' call_tmp[628343](81457 call isEnumType idxType[81442]))
      unknown call_tmp[628348] "expr temp" "maybe param" "maybe type" "temp"
      (628351 'move' call_tmp[628348](81499 call _cond_test call_tmp[628343]))
      if call_tmp[628348]
      {
        unknown call_tmp[628355] "expr temp" "maybe param" "maybe type" "temp"
        (628358 'move' call_tmp[628355](81459 call size _mt[243] idxType[81442]))
        unknown call_tmp[628360] "expr temp" "maybe param" "maybe type" "temp"
        (628363 'move' call_tmp[628360](81463 call < call_tmp[628355] 2))
        unknown call_tmp[628365] "expr temp" "maybe param" "maybe type" "temp"
        (628368 'move' call_tmp[628365](81486 call _cond_test call_tmp[628360]))
        if call_tmp[628365]
        {
          (81484 call compilerError "ranges are not currently supported for enums with fewer than two values")
        }
        (511899 'move' ret[511889](511898 'deref' int(64)[13]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[511887] _end_chpl__idxTypeToIntIdxType[511887]
      }
      {
        (511904 'move' ret[511889](511903 'deref' idxType[81442]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[511887] _end_chpl__idxTypeToIntIdxType[511887]
      }
    }
    label _end_chpl__idxTypeToIntIdxType[511887]
    (511891 return ret[511889])
  }
  function range[64316](?).chpl_intToIdx[81516](arg _mt[81521]:_MT[238], arg this[81518]:range[64316](?) :
  range[64316](?), arg i[81514]:_any[178](?)) : _unknown[51] "inline" "method" "no doc"
  {
    unknown ret[511910] "RVV" "temp"
    unknown call_tmp[628372] "expr temp" "maybe param" "maybe type" "temp"
    (628375 'move' call_tmp[628372](81525 call idxType _mt[243] this[81518]))
    unknown call_tmp[628377] "expr temp" "maybe param" "maybe type" "temp"
    (628380 'move' call_tmp[628377](81530 call chpl__intToIdx call_tmp[628372] i[81514]))
    (511915 'move' ret[511910](511914 'deref' call_tmp[628377]))
    (511912 return ret[511910])
  }
  function chpl__intToIdx[81542](arg idxType[81539]:integral[199](?), arg i[81545]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[511919] "RVV" "temp"
    unknown call_tmp[628382] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628385 'move' call_tmp[628382](81549 'typeof' i[81545]))
    unknown call_tmp[628387] "expr temp" "maybe param" "maybe type" "temp"
    (628390 'move' call_tmp[628387](81551 call == call_tmp[628382] idxType[81539]))
    unknown call_tmp[628392] "expr temp" "maybe param" "maybe type" "temp"
    (628395 'move' call_tmp[628392](81562 call _cond_test call_tmp[628387]))
    if call_tmp[628392]
    {
      (511924 'move' ret[511919](511923 'deref' i[81545]))
      gotoReturn _end_chpl__intToIdx[511917] _end_chpl__intToIdx[511917]
    }
    {
      unknown call_tmp[628397] "expr temp" "maybe param" "maybe type" "temp"
      (628400 'move' call_tmp[628397](81558 call _cast idxType[81539] i[81545]))
      (511929 'move' ret[511919](511928 'deref' call_tmp[628397]))
      gotoReturn _end_chpl__intToIdx[511917] _end_chpl__intToIdx[511917]
    }
    label _end_chpl__intToIdx[511917]
    (511921 return ret[511919])
  }
  function chpl__intToIdx[81577](arg idxType[81574]:integral[199](?), param arg i[81580]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[511935] "RVV" "temp"
    unknown call_tmp[628402] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (628405 'move' call_tmp[628402](81584 'typeof' i[81580]))
    unknown call_tmp[628407] "expr temp" "maybe param" "maybe type" "temp"
    (628410 'move' call_tmp[628407](81586 call == call_tmp[628402] idxType[81574]))
    unknown call_tmp[628412] "expr temp" "maybe param" "maybe type" "temp"
    (628415 'move' call_tmp[628412](81597 call _cond_test call_tmp[628407]))
    if call_tmp[628412]
    {
      (511940 'move' ret[511935](511939 'deref' i[81580]))
      gotoReturn _end_chpl__intToIdx[511933] _end_chpl__intToIdx[511933]
    }
    {
      unknown call_tmp[628417] "expr temp" "maybe param" "maybe type" "temp"
      (628420 'move' call_tmp[628417](81593 call _cast idxType[81574] i[81580]))
      (511945 'move' ret[511935](511944 'deref' call_tmp[628417]))
      gotoReturn _end_chpl__intToIdx[511933] _end_chpl__intToIdx[511933]
    }
    label _end_chpl__intToIdx[511933]
    (511937 return ret[511935])
  }
  function chpl__intToIdx[81612](arg idxType[81609]:enum[187](?), arg i[81615]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[511951] "RVV" "temp"
    unknown call_tmp[628422] "expr temp" "maybe param" "maybe type" "temp"
    (628425 'move' call_tmp[628422](81622 call chpl__orderToEnum i[81615] idxType[81609]))
    (511956 'move' ret[511951](511955 'deref' call_tmp[628422]))
    (511953 return ret[511951])
  }
  function chpl__intToIdx[81632](arg idxType[81630]:_any[178](?), arg i[81635]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[511960] "RVV" "temp"
    unknown call_tmp[628427] "expr temp" "maybe param" "maybe type" "temp"
    (628430 'move' call_tmp[628427](81644 call _cast bool[10] i[81635]))
    (511965 'move' ret[511960](511964 'deref' call_tmp[628427]))
    (511962 return ret[511960])
  }
  where {
    (81641 call isBoolType idxType[81630])
  }
  function chpl__intToIdx[81656](arg idxType[81654]:_any[178](?), param arg i[81659]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[511969] "RVV" "param" "temp"
    unknown call_tmp[628432] "expr temp" "maybe param" "maybe type" "temp"
    (628435 'move' call_tmp[628432](81668 call _cast bool[10] i[81659]))
    (511974 'move' ret[511969](511973 'deref' call_tmp[628432]))
    (511971 return ret[511969])
  }
  where {
    (81665 call isBoolType idxType[81654])
  }
  function chpl__intToIdx[81680](arg idxType[81678]:_any[178](?), arg i[81683]:nothing[7]) : _unknown[51] "inline"
  {
    unknown ret[511978] "RVV" "temp"
    (511983 'move' ret[511978](511982 'deref' none[57]))
    (511980 return ret[511978])
  }
  function chpl__idxToInt[81698](arg i[81695]:integral[199](?)) : _unknown[51] "inline"
  {
    unknown ret[511987] "RVV" "temp"
    (511992 'move' ret[511987](511991 'deref' i[81695]))
    (511989 return ret[511987])
  }
  function chpl__idxToInt[81712](param arg i[81709]:integral[199](?)) param : _unknown[51] "inline"
  {
    unknown ret[511996] "RVV" "param" "temp"
    (512001 'move' ret[511996](512000 'deref' i[81709]))
    (511998 return ret[511996])
  }
  function chpl__idxToInt[81726](arg i[81723]:enum[187](?)) : _unknown[51] "inline"
  {
    unknown ret[512005] "RVV" "temp"
    unknown call_tmp[628437] "expr temp" "maybe param" "maybe type" "temp"
    (628440 'move' call_tmp[628437](81731 call chpl__enumToOrder i[81723]))
    (512010 'move' ret[512005](512009 'deref' call_tmp[628437]))
    (512007 return ret[512005])
  }
  function chpl__idxToInt[81743](arg i[81740]:bool[10]) : _unknown[51] "inline"
  {
    unknown ret[512014] "RVV" "temp"
    unknown call_tmp[628442] "expr temp" "maybe param" "maybe type" "temp"
    (628445 'move' call_tmp[628442](81747 call _cast int(64)[13] i[81740]))
    (512019 'move' ret[512014](512018 'deref' call_tmp[628442]))
    (512016 return ret[512014])
  }
  function chpl__idxToInt[81760](param arg i[81757]:bool[10]) param : _unknown[51] "inline"
  {
    unknown ret[512023] "RVV" "param" "temp"
    unknown call_tmp[628447] "expr temp" "maybe param" "maybe type" "temp"
    (628450 'move' call_tmp[628447](81764 call _cast int(64)[13] i[81757]))
    (512028 'move' ret[512023](512027 'deref' call_tmp[628447]))
    (512025 return ret[512023])
  }
  (354961 'used modules list'(64184 'use' ChapelBase[307])(64186 'use' SysBasic[223428])(64187 'use' HaltWrappers[209910])(64191 'use' Math[215770])(64193 'use' DSIUtil[230800]))
}