AST dump for AtomicsCommon after pass flattenClasses.
Module use list: ChapelStandard 

{
  function atomic_refcnt[52099].inc[51959](arg _mt[52103]:_MT[238], arg this[52101]:atomic_refcnt[52099], arg cnt[51956] =
  1) : _unknown[51] "inline" "method" "primary method" "no return value for void"
  {
    if(51983 call _cond_test CHPL_CACHE_REMOTE[367])
    {
      (51973 call(51963 call .(357253 call . this[52101] c"_cnt") c"add") cnt[51956](order = relaxed[186976]))
    }
    {
      (51981 call(51976 call .(357259 call . this[52101] c"_cnt") c"add") cnt[51956])
    }
  }
  function atomic_refcnt[52099].dec[51994](arg _mt[52107]:_MT[238], arg this[52105]:atomic_refcnt[52099]) : _unknown[51] "inline" "method" "primary method"
  {
    unknown got[52004](52003 call int(64)[13] 64)
    (52007 'end of statement')
    if(52071 call _cond_test CHPL_CACHE_REMOTE[367])
    {
      (52023 call = got[52004](52022 call(52012 call .(357264 call . this[52105] c"_cnt") c"fetchSub") 1(order = release[186972])))
      if(52043 call _cond_test(52029 call == got[52004] 1))
      {
        (52037 call atomicFence acquire[186974])
        (52041 return 0)
      }
      (52051 return(52049 call - got[52004] 1))
    }
    {
      (52061 call = got[52004](52060 call(52055 call .(357271 call . this[52105] c"_cnt") c"fetchSub") 1))
      (52069 return(52067 call - got[52004] 1))
    }
  }
  { scopeless type
    (51999 call int(64)[13] 64)
  }
  function atomic_refcnt[52099].read[52080](arg _mt[52111]:_MT[238], arg this[52109]:atomic_refcnt[52099]) : _unknown[51] "inline" "method" "primary method"
  {
    (52092 return(52091 call(52087 call .(357276 call . this[52109] c"_cnt") c"read")))
  }
  { scopeless type
    (52085 call int(64)[13] 64)
  }
  type atomic_refcnt[52099] unknown _cnt[51949](51948 call chpl__processorAtomicType int(64)[13])
  (355098 'used modules list'(51941 'use' ChapelStandard[20264]))
}