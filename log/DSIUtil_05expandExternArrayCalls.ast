AST dump for DSIUtil after pass expandExternArrayCalls.
Module use list: 

{
  (352920 'use' ChapelStandard)
  function getDataParTasksPerLocale[225868]() : _unknown[51] "inline"
  {
    (225871 return dataParTasksPerLocale)
  }
  function getDataParIgnoreRunningTasks[225878]() : _unknown[51] "inline"
  {
    (225881 return dataParIgnoreRunningTasks)
  }
  function getDataParMinGranularity[225888]() : _unknown[51] "inline"
  {
    (225891 return dataParMinGranularity)
  }
  function createTuple[225900](param arg rank[225898]:_any[178](?), arg t[225902]:_any[178](?), arg val[225904]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[225910](225908 call * rank t)
      (225913 'end of statement')
    }
    {
      unknown i[225930] 0
      unknown tmp[225931] "maybe param" "temp"
      (225943 'move' tmp[225931](225941 call chpl_compute_low_param_loop_bound 0(225918 call - rank 1)))
      unknown tmp[225932] "maybe param" "temp"
      (225953 'move' tmp[225932](225951 call chpl_compute_high_param_loop_bound 0(225948 call - rank 1)))
      unknown tmp[225933] "maybe param" "temp"
      (225956 'move' tmp[225933] 1)
      ParamForLoop[225958]
      { i[225930] tmp[225931] tmp[225932] tmp[225933]
        { scopeless
          (225927 call =(225925 call tup i) val)
        }
      }
      label _unused_continueLabel[225935]
      label _breakLabel[225934]
    }
    (225968 return tup)
  }
  function _computeChunkStuff[225976](arg maxTasks[225974]:_any[178](?), arg ignoreRunning[225978]:_any[178](?), arg minSize[225980]:_any[178](?), arg ranges[225982]:_any[178](?), param arg adjustToOneDim[225985] =
  1) : _unknown[51]
  {
    { scopeless
      unknown rank[225997] "param"(225994 call . ranges c"size")
      (226000 'end of statement')
    }
    unknown EC[226003] "type variable" uint[115]
    { scopeless
      unknown numElems[226010](226008 call _cast EC 1)
      (226013 'end of statement')
    }
    {
      unknown i[226036] 0
      unknown tmp[226037] "maybe param" "temp"
      (226049 'move' tmp[226037](226047 call chpl_compute_low_param_loop_bound 0(226017 call - rank 1)))
      unknown tmp[226038] "maybe param" "temp"
      (226059 'move' tmp[226038](226057 call chpl_compute_high_param_loop_bound 0(226054 call - rank 1)))
      unknown tmp[226039] "maybe param" "temp"
      (226062 'move' tmp[226039] 1)
      ParamForLoop[226064]
      { i[226036] tmp[226037] tmp[226038] tmp[226039]
        {
          (226032 call *= numElems(226030 call _cast EC(226026 call .(226025 call ranges i) c"size")))
        }
      }
      label _unused_continueLabel[226041]
      label _breakLabel[226040]
    }
    { scopeless
      unknown numChunks[226080](226079 call _computeNumChunks maxTasks ignoreRunning minSize numElems)
      (226083 'end of statement')
    }
    if(226097 call _cond_test(226086 call == numChunks 0))
    {
      { scopeless
        (226095 return(226093 call _build_tuple 0(226090 call - 1)))
      }
    }
    (226108 call assert(226105 call > numChunks 0))
    { scopeless
      unknown parDim[226113](226111 call - 1)
      (226116 'end of statement')
    }
    { scopeless
      unknown maxDim[226120](226118 call - 1)
      (226123 'end of statement')
    }
    { scopeless
      unknown maxElems[226128](226127 call min EC)
      (226131 'end of statement')
    }
    {
      unknown _indexOfInterest[226194] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[226195] "expr temp" "temp"
      (226204 'move' _iterator[226195](226202 call _getIterator(226212 call chpl_direct_range_iter 0(226209 call - rank 1) 1)))
      Defer
      {
        {
          (226228 call _freeIterator _iterator[226195])
        }
      }
      { scopeless type
        (226217 'move' _indexOfInterest[226194](226214 call iteratorIndex _iterator[226195]))
      }
      ForLoop[226196]
      {
        unknown i[226221] "index var" "insert auto destroy"
        (226223 'move' i[226221] _indexOfInterest[226194])
        {
          { scopeless
            const curElems[226150] "const"(226148 call _cast EC(226144 call .(226143 call ranges i) c"size"))
            (226153 'end of statement')
          }
          if(226171 call _cond_test(226160 call >= curElems(226158 call _cast EC numChunks)))
          {
            (226164 call = parDim i)
            break nil[44]
          }
          if(226190 call _cond_test(226177 call > curElems maxElems))
          {
            (226181 call = maxElems curElems)
            (226187 call = maxDim i)
          }
        }
        label _continueLabel[226199]
        _indexOfInterest[226194]
        _iterator[226195]
      }
      label _breakLabel[226200]
    }
    if(226270 call _cond_test(226239 call == parDim(226237 call - 1)))
    {
      (226243 call = parDim maxDim)
      if(226265 call _cond_test(226255 call && adjustToOneDim(226253 call < maxElems(226251 call _cast EC numChunks))))
      {
        { scopeless
          (226262 call = numChunks(226260 call _cast int[13] maxElems))
        }
      }
    }
    (226279 return(226277 call _build_tuple numChunks parDim))
  }
  { scopeless type
    (225991 call _build_tuple int[13] int[13])
  }
  function _computeNumChunks[226288](arg maxTasks[226286]:_any[178](?), arg ignoreRunning[226290]:_any[178](?), arg minSize[226292]:_any[178](?), arg numElems[226294]:_any[178](?)) : _unknown[51]
  {
    if(226304 call _cond_test(226299 call <= numElems 0))
    {
      { scopeless
        (226302 return 0)
      }
    }
    unknown EC[226311] "type variable" uint[115]
    { scopeless
      const unumElems[226318] "const"(226316 call _cast EC numElems)
      (226321 'end of statement')
    }
    { scopeless
      unknown numChunks[226326](226324 call _cast int[13] maxTasks)
      (226329 'end of statement')
    }
    if(226366 call _cond_test(226331 call ! ignoreRunning))
    {
      { scopeless
        const otherTasks[226342] "const"(226340 call -(226338 call(226334 call . here c"runningTasks")) 1)
        (226345 'end of statement')
      }
      (226363 call = numChunks(226360 IfExpr (226350 call < otherTasks maxTasks) then
      { scopeless
        (226357 call _cast int[13](226354 call - maxTasks otherTasks))
      } else
      { scopeless
        1
      } ))
    }
    if(226447 call _cond_test(226372 call > minSize 0))
    {
      unknown tmp[226396] "temp"
      (226444 'move' tmp[226396](226427 call _cond_test(226429 call &&(226431 call < unumElems(226434 call _cast EC(226437 call * minSize numChunks)))(226441 call > numChunks 1))))
      WhileDo[226401]
      {
        {
          (226392 call -= numChunks 1)
        }
        label _continueLabel[226399]
        (226422 'move' tmp[226396](226405 call _cond_test(226407 call &&(226409 call < unumElems(226412 call _cast EC(226415 call * minSize numChunks)))(226419 call > numChunks 1))))
        tmp[226396]
      }
      label _breakLabel[226400]
    }
    if(226466 call _cond_test(226456 call >(226453 call _cast EC numChunks) unumElems))
    {
      { scopeless
        (226463 call = numChunks(226461 call _cast int[13] unumElems))
      }
    }
    (226472 return numChunks)
  }
  { scopeless type
    int[13]
  }
  function _computeNumChunks[226481](arg numElems[226479]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown numTasks[226496](226493 IfExpr (226486 call == dataParTasksPerLocale 0) then
      { scopeless
        (226489 call . here c"maxTaskPar")
      } else
      { scopeless
        dataParTasksPerLocale
      } )
      (226499 'end of statement')
    }
    { scopeless
      unknown ignoreRunning[226502] dataParIgnoreRunningTasks
      (226505 'end of statement')
    }
    { scopeless
      unknown minIndicesPerTask[226507] dataParMinGranularity
      (226510 'end of statement')
    }
    { scopeless
      unknown numChunks[226518](226517 call _computeNumChunks numTasks ignoreRunning minIndicesPerTask numElems)
      (226521 'end of statement')
    }
    (226523 return numChunks)
  }
  { scopeless type
    int[13]
  }
  function _computeChunkStartEnd[226532](arg nElems[226530]:_any[178](?), arg nChunks[226534]:_any[178](?), arg myCnk[226536]:_any[178](?)) : _unknown[51]
  {
    unknown IT[226553] "type variable"(226550 IfExpr (226546 call ==(226544 'typeof' nElems) uint[115]) then
    { scopeless
      uint[115]
    } else
    { scopeless
      int[13]
    } )
    { scopeless
      const tmp[226579] "const" "temp"(226577 call _build_tuple(226566 call _cast IT nElems)(226570 call _cast IT nChunks)(226575 call _cast IT myCnk))
      (226589 call _check_tuple_var_decl tmp[226579] 3)
      const numElems[226557] "const"(226580 call tmp[226579] 0)
      const numChunks[226559] "const"(226583 call tmp[226579] 1)
      const myChunk[226561] "const"(226586 call tmp[226579] 2)
      (226594 'end of statement')
    }
    unknown RT[226597] "type variable"(226596 'typeof' nElems)
    { scopeless
      unknown div[226604](226602 call / numElems numChunks)
      (226607 'end of statement')
    }
    { scopeless
      unknown rem[226612](226610 call % numElems numChunks)
      (226615 'end of statement')
    }
    (226628 call assert(226625 call &&(226619 call <= 1 myChunk)(226623 call <= myChunk numChunks)))
    if(226699 call _cond_test(226632 call <= myChunk rem))
    {
      { scopeless
        unknown endIx[226641](226639 call * myChunk(226637 call + div 1))
        (226644 'end of statement')
      }
      (226660 return(226658 call _build_tuple(226651 call _cast RT(226648 call - endIx div))(226655 call _cast RT endIx)))
    }
    {
      { scopeless
        unknown startIx1[226675](226673 call - numElems(226671 call *(226668 call +(226665 call - numChunks myChunk) 1) div))
        (226678 'end of statement')
      }
      (226697 return(226695 call _build_tuple(226685 call _cast RT(226682 call + startIx1 1))(226692 call _cast RT(226689 call + startIx1 div))))
    }
  }
  { scopeless type
    (226541 call * 2(226540 'typeof' nElems))
  }
  function intCeilXDivByY[226710](arg x[226708]:_any[178](?), arg y[226712]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      (226724 return(226722 call + 1(226720 call /(226717 call - x 1) y)))
    }
  }
  function _computeBlock[226733](arg numelems[226731]:_any[178](?), arg numblocks[226735]:_any[178](?), arg blocknum[226737]:_any[178](?), arg wayhi[226739]:_any[178](?), arg waylo[226746] =
  (226744 call _cast(226743 'typeof' wayhi) 0), arg lo[226754] =
  (226752 call _cast(226751 'typeof' wayhi) 0)) : _unknown[51]
  {
    if(226776 call _cond_test(226759 call == numelems 0))
    {
      { scopeless
        (226774 return(226772 call _build_tuple(226764 call _cast(226763 'typeof' lo) 1)(226769 call _cast(226768 'typeof' lo) 0)))
      }
    }
    { scopeless
      const blo[226814] "const"(226811 IfExpr (226784 call == blocknum 0) then
      { scopeless
        waylo
      } else
      { scopeless
        (226809 call + lo(226807 call _cast(226806 'typeof' lo)(226804 call intCeilXDivByY(226797 call *(226791 call _cast uint[115] numelems)(226795 call _cast uint[115] blocknum))(226802 call _cast uint[115] numblocks))))
      } )
      (226817 'end of statement')
    }
    { scopeless
      const bhi[226859] "const"(226856 IfExpr (226823 call == blocknum(226821 call - numblocks 1)) then
      { scopeless
        wayhi
      } else
      { scopeless
        (226854 call -(226851 call + lo(226849 call _cast(226848 'typeof' lo)(226846 call intCeilXDivByY(226839 call *(226830 call _cast uint[115] numelems)(226837 call _cast uint[115](226834 call + blocknum 1)))(226844 call _cast uint[115] numblocks)))) 1)
      } )
      (226862 'end of statement')
    }
    (226868 return(226866 call _build_tuple blo bhi))
  }
  function _factor[226878](param arg rank[226875] :
  int[13], arg value[226880]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown factors[226886](226884 call * rank int[13])
      (226889 'end of statement')
    }
    {
      unknown i[226906] 0
      unknown tmp[226907] "maybe param" "temp"
      (226919 'move' tmp[226907](226917 call chpl_compute_low_param_loop_bound 0(226894 call - rank 1)))
      unknown tmp[226908] "maybe param" "temp"
      (226929 'move' tmp[226908](226927 call chpl_compute_high_param_loop_bound 0(226924 call - rank 1)))
      unknown tmp[226909] "maybe param" "temp"
      (226932 'move' tmp[226909] 1)
      ParamForLoop[226934]
      { i[226906] tmp[226907] tmp[226908] tmp[226909]
        { scopeless
          (226903 call =(226901 call factors i) 1)
        }
      }
      label _unused_continueLabel[226911]
      label _breakLabel[226910]
    }
    if(227140 call _cond_test(226945 call >= value 1))
    {
      { scopeless
        unknown iv[226948] value
        (226951 'end of statement')
      }
      { scopeless
        unknown factor[226954] 1
        (226957 'end of statement')
      }
      {
        unknown tmp[227113] "temp"
        (227137 'move' tmp[227113](227132 call _cond_test(227134 call > iv 1)))
        WhileDo[227118]
        {
          {
            {
              unknown _indexOfInterest[227074] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[227075] "expr temp" "temp"
              (227084 'move' _iterator[227075](227082 call _getIterator(227089 call chpl_direct_range_iter 2 iv 1)))
              Defer
              {
                {
                  (227105 call _freeIterator _iterator[227075])
                }
              }
              { scopeless type
                (227094 'move' _indexOfInterest[227074](227091 call iteratorIndex _iterator[227075]))
              }
              ForLoop[227076]
              {
                unknown i[227098] "index var" "insert auto destroy"
                (227100 'move' i[227098] _indexOfInterest[227074])
                {
                  if(227069 call _cond_test(226972 call ==(226969 call % iv i) 0))
                  {
                    { scopeless
                      unknown j[226975] 0
                      (226978 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[227009] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[227010] "expr temp" "temp"
                      (227019 'move' _iterator[227010](227017 call _getIterator(227027 call chpl_direct_range_iter 1(227024 call - rank 1) 1)))
                      Defer
                      {
                        {
                          (227043 call _freeIterator _iterator[227010])
                        }
                      }
                      { scopeless type
                        (227032 'move' _indexOfInterest[227009](227029 call iteratorIndex _iterator[227010]))
                      }
                      ForLoop[227011]
                      {
                        unknown i[227036] "index var" "insert auto destroy"
                        (227038 'move' i[227036] _indexOfInterest[227009])
                        {
                          if(227003 call _cond_test(226996 call <(226991 call factors i)(226995 call factors j)))
                          {
                            { scopeless
                              (227000 call = j i)
                            }
                          }
                        }
                        label _continueLabel[227014]
                        _indexOfInterest[227009]
                        _iterator[227010]
                      }
                      label _breakLabel[227015]
                    }
                    (227055 call *=(227053 call factors j) i)
                    (227063 call = iv(227061 call / iv i))
                    break nil[44]
                  }
                }
                label _continueLabel[227079]
                _indexOfInterest[227074]
                _iterator[227075]
              }
              label _breakLabel[227080]
            }
          }
          label _continueLabel[227116]
          (227127 'move' tmp[227113](227122 call _cond_test(227124 call > iv 1)))
          tmp[227113]
        }
        label _breakLabel[227117]
      }
    }
    {
      unknown _indexOfInterest[227233] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[227234] "expr temp" "temp"
      (227243 'move' _iterator[227234](227241 call _getIterator(227251 call chpl_direct_range_iter 0(227248 call - rank 1) 1)))
      Defer
      {
        {
          (227267 call _freeIterator _iterator[227234])
        }
      }
      { scopeless type
        (227256 'move' _indexOfInterest[227233](227253 call iteratorIndex _iterator[227234]))
      }
      ForLoop[227235]
      {
        unknown i[227260] "index var" "insert auto destroy"
        (227262 'move' i[227260] _indexOfInterest[227233])
        {
          unknown _indexOfInterest[227189] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[227190] "expr temp" "temp"
          (227199 'move' _iterator[227190](227197 call _getIterator(227210 call chpl_direct_range_iter(227203 call + i 1)(227207 call - rank 1) 1)))
          Defer
          {
            {
              (227226 call _freeIterator _iterator[227190])
            }
          }
          { scopeless type
            (227215 'move' _indexOfInterest[227189](227212 call iteratorIndex _iterator[227190]))
          }
          ForLoop[227191]
          {
            unknown j[227219] "index var" "insert auto destroy"
            (227221 'move' j[227219] _indexOfInterest[227189])
            { scopeless
              if(227184 call _cond_test(227171 call <(227166 call factors i)(227170 call factors j)))
              {
                { scopeless
                  (227181 call <=>(227176 call factors i)(227180 call factors j))
                }
              }
            }
            label _continueLabel[227194]
            _indexOfInterest[227189]
            _iterator[227190]
          }
          label _breakLabel[227195]
        }
        label _continueLabel[227238]
        _indexOfInterest[227233]
        _iterator[227234]
      }
      label _breakLabel[227239]
    }
    (227275 return factors)
  }
  function computeZeroBasedDomain[227285](arg dom[227282] :
  _domain) : _unknown[51]
  {
    { scopeless
      (227300 return(227298 call chpl__buildDomainExpr(227296 'expand_tuple'(227295 call computeZeroBasedRanges(227293 call(227289 call . dom c"dims"))))))
    }
  }
  function computeZeroBasedRanges[227311](arg ranges[227308] :
  _tuple) : _unknown[51]
  {
    function helper[227317](arg idxType[227315]:_any[178](?), arg first[227319]:_any[178](?), arg rest[227322]:_any[178](?) ...) : _unknown[51]
    {
      if(227397 call _cond_test(227330 call >(227326 call . rest c"size") 1))
      {
        { scopeless
          (227357 return(227355 call _build_tuple(227345 call #(227336 call chpl_build_low_bounded_range(227334 call _cast idxType 0))(227343 call _cast idxType(227339 call . first c"size")))(227353 'expand_tuple'(227352 call helper idxType(227351 'expand_tuple' rest)))))
        }
      }
      {
        { scopeless
          (227395 return(227393 call _build_tuple(227372 call #(227363 call chpl_build_low_bounded_range(227361 call _cast idxType 0))(227370 call _cast idxType(227366 call . first c"size")))(227390 call #(227378 call chpl_build_low_bounded_range(227376 call _cast idxType 0))(227388 call _cast idxType(227384 call .(227383 call rest 0) c"size")))))
        }
      }
    }
    unknown idxType[227414] "type variable"(227411 call .(227410 call ranges 0) c"idxType")
    if(227454 call _cond_test(227422 call >(227418 call . ranges c"size") 1))
    {
      { scopeless
        (227430 return(227429 call helper idxType(227428 'expand_tuple' ranges)))
      }
    }
    {
      { scopeless
        (227452 return(227450 call _build_tuple(227448 call #(227436 call chpl_build_low_bounded_range(227434 call _cast idxType 0))(227446 call _cast idxType(227442 call .(227441 call ranges 0) c"size")))))
      }
    }
  }
  function densify[227468](arg sub[227465] :
  _domain, arg whole[227471] :
  _domain, arg userErrors[227475] =
  1) : _unknown[51]
  {
    unknown argtypes[227497] "type variable"(227496 'typeof'(227494 call _build_tuple sub whole))
    (227514 call _densiCheck(227510 call ==(227503 call . sub c"rank")(227507 call . whole c"rank")) argtypes)
    (227527 call _densiIdxCheck(227518 call . sub c"idxType")(227523 call . whole c"idxType") argtypes)
    (227549 return(227547 call chpl__buildDomainExpr(227545 'expand_tuple'(227544 call densify(227535 call(227531 call . sub c"dims"))(227542 call(227538 call . whole c"dims")) userErrors))))
  }
  { scopeless type
    (227489 call chpl__buildDomainRuntimeType defaultDist(227479 call . whole c"rank")(227484 call . whole c"idxType") 1)
  }
  function densify[227558](arg subs[227556]:_any[178](?), arg wholes[227560]:_any[178](?), arg userErrors[227563] =
  1) : _unknown[51]
  {
    unknown argtypes[227582] "type variable"(227581 'typeof'(227579 call _build_tuple subs wholes))
    (227599 call _densiCheck(227595 call ==(227588 call . wholes c"size")(227592 call . subs c"size")) argtypes)
    (227611 call _densiCheck(227608 call isRange(227606 call subs 0)) argtypes)
    (227623 call _densiCheck(227620 call isRange(227618 call wholes 0)) argtypes)
    (227631 call _densiEnsureBounded(227629 call subs 0))
    (227650 call _densiIdxCheck(227638 call .(227637 call subs 0) c"idxType")(227646 call .(227645 call wholes 0) c"idxType") argtypes)
    { scopeless
      unknown rank[227656] "param"(227653 call . wholes c"size")
      (227659 'end of statement')
    }
    unknown IT[227667] "type variable"(227664 call .(227663 call wholes 0) c"idxType")
    { scopeless
      unknown result[227682](227680 call * rank(227679 call range IT(227675 call . BoundedRangeType c"bounded") 1))
      (227685 'end of statement')
    }
    {
      unknown d[227777] 0
      unknown tmp[227778] "maybe param" "temp"
      (227790 'move' tmp[227778](227788 call chpl_compute_low_param_loop_bound 0(227689 call - rank 1)))
      unknown tmp[227779] "maybe param" "temp"
      (227800 'move' tmp[227779](227798 call chpl_compute_high_param_loop_bound 0(227795 call - rank 1)))
      unknown tmp[227780] "maybe param" "temp"
      (227803 'move' tmp[227780] 1)
      ParamForLoop[227805]
      { d[227777] tmp[227778] tmp[227779] tmp[227780]
        {
          (227703 call _densiCheck(227700 call isRange(227698 call subs d)) argtypes)
          (227716 call _densiCheck(227713 call isRange(227711 call wholes d)) argtypes)
          (227729 call _densiIdxCheck(227723 call .(227722 call wholes d) c"idxType") IT argtypes)
          (227737 call _densiEnsureBounded(227735 call subs d))
          (227756 call _densiIdxCheck(227744 call .(227743 call subs d) c"idxType")(227752 call .(227751 call wholes d) c"idxType") argtypes)
          (227774 call =(227761 call result d)(227773 call densify(227766 call subs d)(227771 call wholes d) userErrors))
        }
      }
      label _unused_continueLabel[227782]
      label _breakLabel[227781]
    }
    (227815 return result)
  }
  where {
    (227574 call &&(227569 call isTuple subs)(227573 call isTuple wholes))
  }
  function densify[227832](arg s[227829] :
  (227828 call range ?[260](boundedType = unknown B[227825])), arg w[227842] :
  (227841 call range unknown IT[227835] ?[260](stridable = 1)), arg userErrors[227846] =
  1) : _unknown[51]
  {
    (227858 call _densiEnsureBounded s)
    (227874 call _densiIdxCheck(227863 call . s c"idxType") IT(227873 'typeof'(227871 call _build_tuple s w)))
    function ensure[227880](arg cond[227878]:_any[178](?), arg args[227883]:_any[178](?) ...) : _unknown[51]
    {
      if(227909 call _cond_test userErrors)
      {
        if(227896 call _cond_test(227888 call ! cond))
        {
          { scopeless
            (227894 call halt(227892 'expand_tuple' args))
          }
        }
      }
      {
        { scopeless
          (227907 call assert cond(227906 'expand_tuple' args))
        }
      }
    }
    if(228233 call _cond_test(227922 call ==(227918 call . s c"size") 0))
    {
      (227934 return(227932 call chpl_build_bounded_range(227926 call _cast IT 1)(227930 call _cast IT 0)))
    }
    {
      (227999 call ensure(227943 call >(227939 call . w c"size") 0) "densify(s=" s ", w=" w "): w is empty while s is not")
      { scopeless
        unknown low[228013](228012 call(228004 call . w c"indexOrder")(228008 call . s c"first")) IT
        (228016 'end of statement')
      }
      (228044 call ensure(228020 call >= low 0) "densify(s=" s ", w=" w "): s.first is not in w")
      if(228229 call _cond_test(228051 call ==(228047 call . s c"size") 1))
      {
        (228057 return(228055 call chpl_build_bounded_range low low))
      }
      {
        { scopeless
          unknown high[228071](228070 call(228062 call . w c"indexOrder")(228066 call . s c"last")) IT
          (228074 'end of statement')
        }
        (228103 call ensure(228079 call >= high 0) "densify(s=" s ", w=" w "): s.last is not in w")
        (228141 call ensure(228117 call ==(228114 call %(228107 call . s c"stride")(228111 call . w c"stride")) 0) "densify(s=" s ", w=" w "): s.stride is not a multiple of w.stride")
        { scopeless
          const stride[228153] "const"(228151 call /(228144 call . s c"stride")(228148 call . w c"stride"))
          (228156 'end of statement')
        }
        if(228166 call _cond_test(228159 call < stride 0))
        {
          { scopeless
            (228163 call <=> low high)
          }
        }
        (228218 call assert(228174 call <= low high) "densify(s=" s ", w=" w "): got low (" low ") larger than high (" high ")")
        (228227 return(228225 call chpl_by(228222 call chpl_build_bounded_range low high) stride))
      }
    }
  }
  { scopeless type
    (227854 call range IT B 1)
  }
  function densify[228255](arg sArg[228252] :
  (228251 call range ?[260](boundedType = unknown B[228245])(stridable = unknown S[228248])), arg w[228265] :
  (228264 call range unknown IT[228258] ?[260](stridable = 0)), arg userErrors[228269] =
  1) : _unknown[51]
  {
    (228281 call _densiEnsureBounded sArg)
    (228297 call _densiIdxCheck(228286 call . sArg c"idxType") IT(228296 'typeof'(228294 call _build_tuple sArg w)))
    { scopeless
      const s[228308] "const"(228306 call _cast(228305 call range IT B S) sArg)
      (228311 'end of statement')
    }
    function ensure[228316](arg cond[228314]:_any[178](?)) : _unknown[51]
    {
      if(228337 call _cond_test userErrors)
      {
        if(228326 call _cond_test(228320 call ! cond))
        {
          { scopeless
            (228324 call halt)
          }
        }
      }
      {
        { scopeless
          (228335 call assert cond)
        }
      }
    }
    (228376 call ensure(228373 call ||(228351 call(228347 call . s c"isEmpty"))(228371 call <=(228353 call . w c"low")(228368 IfExpr (228359 call isIntType IT) then
    { scopeless
      (228361 call . s c"alignedLow")
    } else
    { scopeless
      (228365 call . s c"low")
    } ))))
    (228408 call ensure(228405 call ||(228393 call ||(228384 call(228380 call . s c"isEmpty"))(228391 call !(228390 call(228386 call . w c"hasHighBound"))))(228403 call <=(228396 call . s c"alignedHigh")(228400 call . w c"high"))))
    if(228434 call _cond_test(228420 call &&(228413 call isUintType IT)(228419 call(228415 call . s c"isEmpty"))))
    {
      { scopeless
        (228432 return(228430 call chpl_build_bounded_range(228424 call _cast IT 1)(228428 call _cast IT 0)))
      }
    }
    (228454 return(228452 call _cast(228451 call range IT B S)(228444 call - s(228441 call . w c"low"))))
  }
  { scopeless type
    (228277 call range IT B S)
  }
  function _densiEnsureBounded[228463](arg arg[228461]:_any[178](?)) : _unknown[51]
  {
    if(228493 call _cond_test(228469 call !(228468 call isBoundedRange arg)))
    {
      { scopeless
        (228491 call compilerError "densify() currently requires that sub-ranges be bounded" 2)
      }
    }
  }
  function _densiIdxCheck[228505](arg subIdxType[228503]:_any[178](?), arg wholeIdxType[228507]:_any[178](?), arg argtypes[228509]:_any[178](?)) : _unknown[51]
  {
    (228521 call _densiCheck(228516 call chpl__legalIntCoerce subIdxType wholeIdxType) argtypes(errlevel = 3))
  }
  function _densiCheck[228530](param arg cond[228528]:_any[178](?), arg argtypes[228532]:_any[178](?), param arg errlevel[228535] =
  2) : _unknown[51]
  {
    if(228569 call _cond_test(228539 call ! cond))
    {
      { scopeless
        (228567 call compilerError "densify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges (except stridability and range b(228564 call _cast string[26] argtypes) errlevel)
      }
    }
  }
  function unDensify[228583](arg dense[228580] :
  _domain, arg whole[228586] :
  _domain, arg userErrors[228590] =
  1) : _unknown[51]
  {
    unknown argtypes[228612] "type variable"(228611 'typeof'(228609 call _build_tuple dense whole))
    (228629 call _undensCheck(228625 call ==(228618 call . dense c"rank")(228622 call . whole c"rank")) argtypes)
    (228651 return(228649 call chpl__buildDomainExpr(228647 'expand_tuple'(228646 call unDensify(228637 call(228633 call . dense c"dims"))(228644 call(228640 call . whole c"dims")) userErrors))))
  }
  { scopeless type
    (228604 call chpl__buildDomainRuntimeType defaultDist(228594 call . whole c"rank")(228599 call . whole c"idxType") 1)
  }
  function unDensify[228660](arg denses[228658]:_any[178](?), arg wholes[228662]:_any[178](?), arg userErrors[228665] =
  1) : _unknown[51]
  {
    unknown argtypes[228684] "type variable"(228683 'typeof'(228681 call _build_tuple denses wholes))
    (228701 call _undensCheck(228697 call ==(228690 call . wholes c"size")(228694 call . denses c"size")) argtypes)
    (228713 call _undensCheck(228710 call isRange(228708 call denses 0)) argtypes)
    (228725 call _undensCheck(228722 call isRange(228720 call wholes 0)) argtypes)
    (228733 call _undensEnsureBounded(228731 call denses 0))
    { scopeless
      unknown rank[228739] "param"(228736 call . wholes c"size")
      (228742 'end of statement')
    }
    unknown IT[228750] "type variable"(228747 call .(228746 call wholes 0) c"idxType")
    { scopeless
      unknown result[228765](228763 call * rank(228762 call range IT(228758 call . BoundedRangeType c"bounded") 1))
      (228768 'end of statement')
    }
    {
      unknown d[228843] 0
      unknown tmp[228844] "maybe param" "temp"
      (228856 'move' tmp[228844](228854 call chpl_compute_low_param_loop_bound 0(228772 call - rank 1)))
      unknown tmp[228845] "maybe param" "temp"
      (228866 'move' tmp[228845](228864 call chpl_compute_high_param_loop_bound 0(228861 call - rank 1)))
      unknown tmp[228846] "maybe param" "temp"
      (228869 'move' tmp[228846] 1)
      ParamForLoop[228871]
      { d[228843] tmp[228844] tmp[228845] tmp[228846]
        {
          (228786 call _undensCheck(228783 call isRange(228781 call denses d)) argtypes)
          (228799 call _undensCheck(228796 call isRange(228794 call wholes d)) argtypes)
          (228815 call _undensCheck(228812 call chpl__legalIntCoerce(228807 call .(228806 call wholes d) c"idxType") IT) argtypes)
          (228823 call _undensEnsureBounded(228821 call denses d))
          (228840 call =(228828 call result d)(228839 call unDensify(228833 call denses d)(228838 call wholes d)))
        }
      }
      label _unused_continueLabel[228848]
      label _breakLabel[228847]
    }
    (228881 return result)
  }
  where {
    (228676 call &&(228671 call isTuple denses)(228675 call isTuple wholes))
  }
  function unDensify[228898](arg dense[228895] :
  (228894 call range ?[260](boundedType = unknown B[228891])), arg whole[228908] :
  (228907 call range unknown IT[228901] ?[260](stridable = 1))) : _unknown[51]
  {
    (228920 call _undensEnsureBounded dense)
    if(228954 call _cond_test(228931 call ==(228924 call . whole c"boundedType")(228928 call . BoundedRangeType c"boundedNone")))
    {
      { scopeless
        (228952 call compilerError "unDensify(): the 'whole' argument must have at least one bound")
      }
    }
    if(228978 call _cond_test(228964 call ==(228960 call . dense c"size") 0))
    {
      { scopeless
        (228976 return(228974 call chpl_build_bounded_range(228968 call _cast IT 1)(228972 call _cast IT 0)))
      }
    }
    if(229012 call _cond_test(228989 call !(228988 call(228984 call . whole c"hasFirst"))))
    {
      { scopeless
        (229010 call halt "unDensify() is invoked with the 'whole' range that has no first index")
      }
    }
    { scopeless
      unknown low[229028](229027 call(229019 call . whole c"orderToIndex")(229023 call . dense c"first")) IT
      (229031 'end of statement')
    }
    { scopeless
      const stride[229042] "const"(229040 call *(229033 call . whole c"stride")(229037 call . dense c"stride"))
      (229045 'end of statement')
    }
    { scopeless
      unknown high[229059](229058 call chpl__addRangeStrides low stride(229056 call -(229052 call . dense c"size") 1)) IT
      (229062 'end of statement')
    }
    (229078 call assert(229075 call == high(229074 call(229066 call . whole c"orderToIndex")(229070 call . dense c"last"))))
    if(229089 call _cond_test(229082 call < stride 0))
    {
      { scopeless
        (229086 call <=> low high)
      }
    }
    (229141 call assert(229097 call <= low high) "unDensify(dense=" dense ", whole=" whole "): got low (" low ") larger than high (" high ")")
    (229150 return(229148 call chpl_by(229145 call chpl_build_bounded_range low high) stride))
  }
  { scopeless type
    (228916 call range IT B 1)
  }
  function unDensify[229170](arg dense[229167] :
  (229166 call range ?[260](boundedType = unknown B[229160])(stridable = unknown S[229163])), arg whole[229180] :
  (229179 call range unknown IT[229173] ?[260](stridable = 0))) : _unknown[51]
  {
    if(229218 call _cond_test(229195 call !(229194 call(229190 call . whole c"hasLowBound"))))
    {
      { scopeless
        (229216 call compilerError "unDensify(): the 'whole' argument, when not stridable, must have a low bound")
      }
    }
    (229239 return(229237 call _cast(229236 call range IT B S)(229229 call + dense(229226 call . whole c"low"))))
  }
  { scopeless type
    (229188 call range IT B S)
  }
  function _undensEnsureBounded[229248](arg arg[229246]:_any[178](?)) : _unknown[51]
  {
    if(229278 call _cond_test(229254 call !(229253 call isBoundedRange arg)))
    {
      { scopeless
        (229276 call compilerError "unDensify() currently requires that the densified ranges be bounded" 2)
      }
    }
  }
  function _undensCheck[229290](param arg cond[229288]:_any[178](?), arg argtypes[229292]:_any[178](?), param arg errlevel[229295] =
  2) : _unknown[51]
  {
    if(229329 call _cond_test(229299 call ! cond))
    {
      { scopeless
        (229327 call compilerError "unDensify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges, but is invoked on "(229324 call _cast string[26] argtypes) errlevel)
      }
    }
  }
  function setupTargetLocalesArray[229341](ref arg targetLocDom[229339]:_any[178](?), arg targetLocArr[229343]:_any[178](?), arg specifiedLocArr[229345]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown rank[229351] "param"(229348 call . targetLocDom c"rank")
      (229354 'end of statement')
    }
    if(229593 call _cond_test(229367 call &&(229358 call != rank 1)(229365 call ==(229361 call . specifiedLocArr c"rank") 1)))
    {
      { scopeless
        const factors[229377] "const"(229376 call _factor rank(229373 call . specifiedLocArr c"size"))
        (229380 'end of statement')
      }
      { scopeless
        unknown ranges[229386](229384 call * rank range)
        (229389 'end of statement')
      }
      {
        unknown i[229413] 0
        unknown tmp[229414] "maybe param" "temp"
        (229426 'move' tmp[229414](229424 call chpl_compute_low_param_loop_bound 0(229393 call - rank 1)))
        unknown tmp[229415] "maybe param" "temp"
        (229436 'move' tmp[229415](229434 call chpl_compute_high_param_loop_bound 0(229431 call - rank 1)))
        unknown tmp[229416] "maybe param" "temp"
        (229439 'move' tmp[229416] 1)
        ParamForLoop[229441]
        { i[229413] tmp[229414] tmp[229415] tmp[229416]
          { scopeless
            (229410 call =(229400 call ranges i)(229408 call #(229402 call chpl_build_low_bounded_range 0)(229407 call factors i)))
          }
        }
        label _unused_continueLabel[229418]
        label _breakLabel[229417]
      }
      (229456 call = targetLocDom(229454 call chpl__buildDomainExpr(229452 'expand_tuple' ranges)))
      (229465 call = targetLocArr(229464 call reshape specifiedLocArr targetLocDom))
    }
    {
      if(229496 call _cond_test(229473 call !=(229469 call . specifiedLocArr c"rank") rank))
      {
        { scopeless
          (229494 call compilerError "specified target array of locales must equal 1 or distribution rank")
        }
      }
      { scopeless
        unknown ranges[229506](229504 call * rank range)
        (229509 'end of statement')
      }
      {
        unknown i[229542] 0
        unknown tmp[229543] "maybe param" "temp"
        (229555 'move' tmp[229543](229553 call chpl_compute_low_param_loop_bound 0(229513 call - rank 1)))
        unknown tmp[229544] "maybe param" "temp"
        (229565 'move' tmp[229544](229563 call chpl_compute_high_param_loop_bound 0(229560 call - rank 1)))
        unknown tmp[229545] "maybe param" "temp"
        (229568 'move' tmp[229545] 1)
        ParamForLoop[229570]
        { i[229542] tmp[229543] tmp[229544] tmp[229545]
          { scopeless
            (229539 call =(229520 call ranges i)(229537 call #(229522 call chpl_build_low_bounded_range 0)(229534 call .(229533 call(229528 call .(229525 call . specifiedLocArr c"_dom") c"dim") i) c"size")))
          }
        }
        label _unused_continueLabel[229547]
        label _breakLabel[229546]
      }
      (229585 call = targetLocDom(229583 call chpl__buildDomainExpr(229581 'expand_tuple' ranges)))
      (229590 call = targetLocArr specifiedLocArr)
    }
  }
  function setupTargetLocRanges[229603](param arg rank[229601]:_any[178](?), arg specifiedLocArr[229605]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown ranges[229611](229609 call * rank range)
      (229614 'end of statement')
    }
    if(229789 call _cond_test(229627 call &&(229618 call != rank 1)(229625 call ==(229621 call . specifiedLocArr c"rank") 1)))
    {
      { scopeless
        const factors[229637] "const"(229636 call _factor rank(229633 call . specifiedLocArr c"size"))
        (229640 'end of statement')
      }
      {
        unknown i[229665] 0
        unknown tmp[229666] "maybe param" "temp"
        (229678 'move' tmp[229666](229676 call chpl_compute_low_param_loop_bound 0(229645 call - rank 1)))
        unknown tmp[229667] "maybe param" "temp"
        (229688 'move' tmp[229667](229686 call chpl_compute_high_param_loop_bound 0(229683 call - rank 1)))
        unknown tmp[229668] "maybe param" "temp"
        (229691 'move' tmp[229668] 1)
        ParamForLoop[229693]
        { i[229665] tmp[229666] tmp[229667] tmp[229668]
          { scopeless
            (229662 call =(229652 call ranges i)(229660 call #(229654 call chpl_build_low_bounded_range 0)(229659 call factors i)))
          }
        }
        label _unused_continueLabel[229670]
        label _breakLabel[229669]
      }
    }
    {
      if(229714 call _cond_test(229707 call !=(229703 call . specifiedLocArr c"rank") rank))
      {
        { scopeless
          (229712 call compilerError "specified target array of locales must equal 1 or distribution rank")
        }
      }
      {
        unknown i[229752] 0
        unknown tmp[229753] "maybe param" "temp"
        (229765 'move' tmp[229753](229763 call chpl_compute_low_param_loop_bound 0(229723 call - rank 1)))
        unknown tmp[229754] "maybe param" "temp"
        (229775 'move' tmp[229754](229773 call chpl_compute_high_param_loop_bound 0(229770 call - rank 1)))
        unknown tmp[229755] "maybe param" "temp"
        (229778 'move' tmp[229755] 1)
        ParamForLoop[229780]
        { i[229752] tmp[229753] tmp[229754] tmp[229755]
          { scopeless
            (229749 call =(229730 call ranges i)(229747 call #(229732 call chpl_build_low_bounded_range 0)(229744 call .(229743 call(229738 call .(229735 call . specifiedLocArr c"_dom") c"dim") i) c"size")))
          }
        }
        label _unused_continueLabel[229757]
        label _breakLabel[229756]
      }
    }
    (229794 return ranges)
  }
  function createWholeDomainForInds[229802](param arg rank[229800]:_any[178](?), arg idxType[229804]:_any[178](?), param arg stridable[229806]:_any[178](?), arg inds[229808]:_any[178](?)) : _unknown[51]
  {
    if(229841 call _cond_test(229813 call isDomain inds))
    {
      (229815 return inds)
    }
    {
      { scopeless
        unknown result[229825](229823 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (229828 'end of statement')
      }
      (229836 call(229831 call . result c"setIndices") inds)
      (229839 return result)
    }
  }
  function bulkCommComputeActiveDims[229852](arg LeftDims[229850]:_any[178](?), arg RightDims[229854]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown LeftRank[229860] "param"(229857 call . LeftDims c"size")
      (229863 'end of statement')
    }
    { scopeless
      unknown RightRank[229869] "param"(229866 call . RightDims c"size")
      (229872 'end of statement')
    }
    { scopeless
      unknown minRank[229878] "param"(229877 call min LeftRank RightRank)
      (229881 'end of statement')
    }
    { scopeless
      unknown inferredRank[229883] 0
      (229886 'end of statement')
    }
    { scopeless
      unknown LeftActives[229887](229892 call * minRank int[13])
      unknown RightActives[229894](229898 'typeof' LeftActives)
      (229899 'end of statement')
    }
    { scopeless
      unknown li[229901] 0
      unknown ri[229905] 0
      (229908 'end of statement')
    }
    function advance[229911]() : _unknown[51]
    {
      {
        unknown tmp[229946] "temp"
        (230012 'move' tmp[229946](229986 call _cond_test(229988 call &&(229990 call ==(229992 call .(229994 call LeftDims li) c"size") 1)(229999 call !=(230001 call .(230003 call LeftDims li) c"size")(230007 call .(230009 call RightDims ri) c"size")))))
        WhileDo[229951]
        {
          { scopeless
            (229943 call += li 1)
          }
          label _continueLabel[229949]
          (229981 'move' tmp[229946](229955 call _cond_test(229957 call &&(229959 call ==(229961 call .(229963 call LeftDims li) c"size") 1)(229968 call !=(229970 call .(229972 call LeftDims li) c"size")(229976 call .(229978 call RightDims ri) c"size")))))
          tmp[229946]
        }
        label _breakLabel[229950]
      }
      {
        unknown tmp[230049] "temp"
        (230115 'move' tmp[230049](230089 call _cond_test(230091 call &&(230093 call ==(230095 call .(230097 call RightDims ri) c"size") 1)(230102 call !=(230104 call .(230106 call RightDims ri) c"size")(230110 call .(230112 call LeftDims li) c"size")))))
        WhileDo[230054]
        {
          { scopeless
            (230046 call += ri 1)
          }
          label _continueLabel[230052]
          (230084 'move' tmp[230049](230058 call _cond_test(230060 call &&(230062 call ==(230064 call .(230066 call RightDims ri) c"size") 1)(230071 call !=(230073 call .(230075 call RightDims ri) c"size")(230079 call .(230081 call LeftDims li) c"size")))))
          tmp[230049]
        }
        label _breakLabel[230053]
      }
      (230136 call assert(230133 call ==(230123 call .(230122 call LeftDims li) c"size")(230130 call .(230129 call RightDims ri) c"size")))
    }
    {
      unknown tmp[230186] "temp"
      DoWhile[230207]
      {
        {
          (230142 call advance)
          (230150 call =(230148 call LeftActives inferredRank) li)
          (230158 call =(230156 call RightActives inferredRank) ri)
          (230163 call += inferredRank 1)
          (230168 call += li 1)
          (230173 call += ri 1)
          label _continueLabel[230189]
          (230205 'move' tmp[230186](230194 call _cond_test(230196 call &&(230198 call < li LeftRank)(230202 call < ri RightRank))))
        }
        tmp[230186]
      }
      label _breakLabel[230190]
    }
    (230217 return(230215 call _build_tuple LeftActives RightActives inferredRank))
  }
  function bulkCommTranslateDomain[230227](arg srcSlice[230224] :
  _domain, arg srcDom[230230] :
  _domain, arg targetDom[230234] :
  _domain) : _unknown[51]
  {
    if(230268 call _cond_test(230245 call !=(230238 call . srcSlice c"rank")(230242 call . srcDom c"rank")))
    {
      { scopeless
        (230266 call compilerError "bulkCommTranslateDomain: source slice and source domain must have identical rank")
      }
    }
    { scopeless
      const tmp[230296] "const" "temp"(230295 call bulkCommComputeActiveDims(230287 call(230283 call . srcDom c"dims"))(230294 call(230290 call . targetDom c"dims")))
      (230306 call _check_tuple_var_decl tmp[230296] 3)
      const SrcActives[230274] "const"(230297 call tmp[230296] 0)
      const TargetActives[230276] "const"(230300 call tmp[230296] 1)
      const inferredRank[230278] "const"(230303 call tmp[230296] 2)
      (230311 'end of statement')
    }
    { scopeless
      unknown needsStridable[230322] "param"(230320 call ||(230313 call . targetDom c"stridable")(230317 call . srcSlice c"stridable"))
      (230325 'end of statement')
    }
    { scopeless
      unknown rngs[230347](230346 call(230342 call . targetDom c"dims"))(230339 call *(230327 call . targetDom c"rank")(230338 call range(230332 call . targetDom c"idxType")(stridable = needsStridable)))
      (230350 'end of statement')
    }
    {
      unknown _indexOfInterest[230415] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[230416] "expr temp" "temp"
      (230425 'move' _iterator[230416](230423 call _getIterator(230433 call chpl_direct_range_iter 0(230430 call - inferredRank 1) 1)))
      Defer
      {
        {
          (230449 call _freeIterator _iterator[230416])
        }
      }
      { scopeless type
        (230438 'move' _indexOfInterest[230415](230435 call iteratorIndex _iterator[230416]))
      }
      ForLoop[230417]
      {
        unknown i[230442] "index var" "insert auto destroy"
        (230444 'move' i[230442] _indexOfInterest[230415])
        {
          { scopeless
            const SD[230363] "const"(230362 call SrcActives i)
            (230366 'end of statement')
          }
          { scopeless
            const TD[230372] "const"(230371 call TargetActives i)
            (230375 'end of statement')
          }
          { scopeless
            const dense[230393] "const"(230392 call densify(230383 call(230378 call . srcSlice c"dim") SD)(230391 call(230386 call . srcDom c"dim") SD))
            (230396 'end of statement')
          }
          (230412 call =(230400 call rngs TD)(230411 call unDensify dense(230410 call(230405 call . targetDom c"dim") TD)))
        }
        label _continueLabel[230420]
        _indexOfInterest[230415]
        _iterator[230416]
      }
      label _breakLabel[230421]
    }
    (230461 return(230459 call chpl__buildDomainExpr(230457 'expand_tuple' rngs)))
  }
  function bulkCommConvertCoordinate[230469](arg ind[230467]:_any[178](?), arg bView[230472] :
  _domain, arg aView[230476] :
  _domain) : _unknown[51]
  {
    if(230542 call _cond_test(230487 call !=(230480 call . bView c"rank")(230484 call . aView c"rank")))
    {
      (230539 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - domain ranks must match: bView.rank = "(230513 call _cast string[26](230509 call . bView c"rank")) ", aView.rank = "(230537 call _cast string[26](230533 call . aView c"rank")))
    }
    { scopeless
      unknown rank[230551] "param"(230548 call . aView c"rank")
      (230554 'end of statement')
    }
    { scopeless
      const b[230559] "const"(230558 call chpl__tuplify ind)
      (230562 'end of statement')
    }
    if(230653 call _cond_test(230568 call !=(230564 call . b c"size") rank))
    {
      { scopeless
        unknown plural[230598] "param"(230595 IfExpr (230575 call ==(230571 call . b c"size") 1) then
        { scopeless
          " element"
        } else
        { scopeless
          " elements"
        } )
        (230601 'end of statement')
      }
      (230651 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - expecting index with "(230624 call _cast string[26] rank) " elements, got "(230648 call _cast string[26](230644 call . b c"size")) plural)
    }
    unknown idxType[230661] "type variable"(230658 call . aView c"idxType")
    { scopeless
      const AD[230670] "const"(230669 call(230665 call . aView c"dims"))
      (230673 'end of statement')
    }
    { scopeless
      const BD[230680] "const"(230679 call(230675 call . bView c"dims"))
      (230683 'end of statement')
    }
    { scopeless
      unknown result[230688](230686 call * rank idxType)
      (230691 'end of statement')
    }
    {
      unknown i[230758] 0
      unknown tmp[230759] "maybe param" "temp"
      (230771 'move' tmp[230759](230769 call chpl_compute_low_param_loop_bound 0(230695 call - rank 1)))
      unknown tmp[230760] "maybe param" "temp"
      (230781 'move' tmp[230760](230779 call chpl_compute_high_param_loop_bound 0(230776 call - rank 1)))
      unknown tmp[230761] "maybe param" "temp"
      (230784 'move' tmp[230761] 1)
      ParamForLoop[230786]
      { i[230758] tmp[230759] tmp[230760] tmp[230761]
        {
          { scopeless
            const ar[230703] "const"(230702 call AD i)
            const br[230710] "const"(230709 call BD i)
            (230713 'end of statement')
          }
          if(230730 call _cond_test boundsChecking)
          {
            { scopeless
              (230728 call assert(230726 call(230718 call . br c"contains")(230724 call b i)))
            }
          }
          (230755 call =(230738 call result i)(230754 call(230740 call . ar c"orderToIndex")(230752 call(230744 call . br c"indexOrder")(230750 call b i))))
        }
      }
      label _unused_continueLabel[230763]
      label _breakLabel[230762]
    }
    (230796 return result)
  }
}