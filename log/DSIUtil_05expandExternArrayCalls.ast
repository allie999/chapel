AST dump for DSIUtil after pass expandExternArrayCalls.
Module use list: 

{
  (353048 'use' ChapelStandard)
  function getDataParTasksPerLocale[225975]() : _unknown[51] "inline"
  {
    (225978 return dataParTasksPerLocale)
  }
  function getDataParIgnoreRunningTasks[225985]() : _unknown[51] "inline"
  {
    (225988 return dataParIgnoreRunningTasks)
  }
  function getDataParMinGranularity[225995]() : _unknown[51] "inline"
  {
    (225998 return dataParMinGranularity)
  }
  function createTuple[226007](param arg rank[226005]:_any[178](?), arg t[226009]:_any[178](?), arg val[226011]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[226017](226015 call * rank t)
      (226020 'end of statement')
    }
    {
      unknown i[226037] 0
      unknown tmp[226038] "maybe param" "temp"
      (226050 'move' tmp[226038](226048 call chpl_compute_low_param_loop_bound 0(226025 call - rank 1)))
      unknown tmp[226039] "maybe param" "temp"
      (226060 'move' tmp[226039](226058 call chpl_compute_high_param_loop_bound 0(226055 call - rank 1)))
      unknown tmp[226040] "maybe param" "temp"
      (226063 'move' tmp[226040] 1)
      ParamForLoop[226065]
      { i[226037] tmp[226038] tmp[226039] tmp[226040]
        { scopeless
          (226034 call =(226032 call tup i) val)
        }
      }
      label _unused_continueLabel[226042]
      label _breakLabel[226041]
    }
    (226075 return tup)
  }
  function _computeChunkStuff[226083](arg maxTasks[226081]:_any[178](?), arg ignoreRunning[226085]:_any[178](?), arg minSize[226087]:_any[178](?), arg ranges[226089]:_any[178](?), param arg adjustToOneDim[226092] =
  1) : _unknown[51]
  {
    { scopeless
      unknown rank[226104] "param"(226101 call . ranges c"size")
      (226107 'end of statement')
    }
    unknown EC[226110] "type variable" uint[115]
    { scopeless
      unknown numElems[226117](226115 call _cast EC 1)
      (226120 'end of statement')
    }
    {
      unknown i[226143] 0
      unknown tmp[226144] "maybe param" "temp"
      (226156 'move' tmp[226144](226154 call chpl_compute_low_param_loop_bound 0(226124 call - rank 1)))
      unknown tmp[226145] "maybe param" "temp"
      (226166 'move' tmp[226145](226164 call chpl_compute_high_param_loop_bound 0(226161 call - rank 1)))
      unknown tmp[226146] "maybe param" "temp"
      (226169 'move' tmp[226146] 1)
      ParamForLoop[226171]
      { i[226143] tmp[226144] tmp[226145] tmp[226146]
        {
          (226139 call *= numElems(226137 call _cast EC(226133 call .(226132 call ranges i) c"size")))
        }
      }
      label _unused_continueLabel[226148]
      label _breakLabel[226147]
    }
    { scopeless
      unknown numChunks[226187](226186 call _computeNumChunks maxTasks ignoreRunning minSize numElems)
      (226190 'end of statement')
    }
    if(226204 call _cond_test(226193 call == numChunks 0))
    {
      { scopeless
        (226202 return(226200 call _build_tuple 0(226197 call - 1)))
      }
    }
    (226215 call assert(226212 call > numChunks 0))
    { scopeless
      unknown parDim[226220](226218 call - 1)
      (226223 'end of statement')
    }
    { scopeless
      unknown maxDim[226227](226225 call - 1)
      (226230 'end of statement')
    }
    { scopeless
      unknown maxElems[226235](226234 call min EC)
      (226238 'end of statement')
    }
    {
      unknown _indexOfInterest[226301] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[226302] "expr temp" "temp"
      (226311 'move' _iterator[226302](226309 call _getIterator(226319 call chpl_direct_range_iter 0(226316 call - rank 1) 1)))
      Defer
      {
        {
          (226335 call _freeIterator _iterator[226302])
        }
      }
      { scopeless type
        (226324 'move' _indexOfInterest[226301](226321 call iteratorIndex _iterator[226302]))
      }
      ForLoop[226303]
      {
        unknown i[226328] "index var" "insert auto destroy"
        (226330 'move' i[226328] _indexOfInterest[226301])
        {
          { scopeless
            const curElems[226257] "const"(226255 call _cast EC(226251 call .(226250 call ranges i) c"size"))
            (226260 'end of statement')
          }
          if(226278 call _cond_test(226267 call >= curElems(226265 call _cast EC numChunks)))
          {
            (226271 call = parDim i)
            break nil[44]
          }
          if(226297 call _cond_test(226284 call > curElems maxElems))
          {
            (226288 call = maxElems curElems)
            (226294 call = maxDim i)
          }
        }
        label _continueLabel[226306]
        _indexOfInterest[226301]
        _iterator[226302]
      }
      label _breakLabel[226307]
    }
    if(226377 call _cond_test(226346 call == parDim(226344 call - 1)))
    {
      (226350 call = parDim maxDim)
      if(226372 call _cond_test(226362 call && adjustToOneDim(226360 call < maxElems(226358 call _cast EC numChunks))))
      {
        { scopeless
          (226369 call = numChunks(226367 call _cast int[13] maxElems))
        }
      }
    }
    (226386 return(226384 call _build_tuple numChunks parDim))
  }
  { scopeless type
    (226098 call _build_tuple int[13] int[13])
  }
  function _computeNumChunks[226395](arg maxTasks[226393]:_any[178](?), arg ignoreRunning[226397]:_any[178](?), arg minSize[226399]:_any[178](?), arg numElems[226401]:_any[178](?)) : _unknown[51]
  {
    if(226411 call _cond_test(226406 call <= numElems 0))
    {
      { scopeless
        (226409 return 0)
      }
    }
    unknown EC[226418] "type variable" uint[115]
    { scopeless
      const unumElems[226425] "const"(226423 call _cast EC numElems)
      (226428 'end of statement')
    }
    { scopeless
      unknown numChunks[226433](226431 call _cast int[13] maxTasks)
      (226436 'end of statement')
    }
    if(226473 call _cond_test(226438 call ! ignoreRunning))
    {
      { scopeless
        const otherTasks[226449] "const"(226447 call -(226445 call(226441 call . here c"runningTasks")) 1)
        (226452 'end of statement')
      }
      (226470 call = numChunks(226467 IfExpr (226457 call < otherTasks maxTasks) then
      { scopeless
        (226464 call _cast int[13](226461 call - maxTasks otherTasks))
      } else
      { scopeless
        1
      } ))
    }
    if(226554 call _cond_test(226479 call > minSize 0))
    {
      unknown tmp[226503] "temp"
      (226551 'move' tmp[226503](226534 call _cond_test(226536 call &&(226538 call < unumElems(226541 call _cast EC(226544 call * minSize numChunks)))(226548 call > numChunks 1))))
      WhileDo[226508]
      {
        {
          (226499 call -= numChunks 1)
        }
        label _continueLabel[226506]
        (226529 'move' tmp[226503](226512 call _cond_test(226514 call &&(226516 call < unumElems(226519 call _cast EC(226522 call * minSize numChunks)))(226526 call > numChunks 1))))
        tmp[226503]
      }
      label _breakLabel[226507]
    }
    if(226573 call _cond_test(226563 call >(226560 call _cast EC numChunks) unumElems))
    {
      { scopeless
        (226570 call = numChunks(226568 call _cast int[13] unumElems))
      }
    }
    (226579 return numChunks)
  }
  { scopeless type
    int[13]
  }
  function _computeNumChunks[226588](arg numElems[226586]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown numTasks[226603](226600 IfExpr (226593 call == dataParTasksPerLocale 0) then
      { scopeless
        (226596 call . here c"maxTaskPar")
      } else
      { scopeless
        dataParTasksPerLocale
      } )
      (226606 'end of statement')
    }
    { scopeless
      unknown ignoreRunning[226609] dataParIgnoreRunningTasks
      (226612 'end of statement')
    }
    { scopeless
      unknown minIndicesPerTask[226614] dataParMinGranularity
      (226617 'end of statement')
    }
    { scopeless
      unknown numChunks[226625](226624 call _computeNumChunks numTasks ignoreRunning minIndicesPerTask numElems)
      (226628 'end of statement')
    }
    (226630 return numChunks)
  }
  { scopeless type
    int[13]
  }
  function _computeChunkStartEnd[226639](arg nElems[226637]:_any[178](?), arg nChunks[226641]:_any[178](?), arg myCnk[226643]:_any[178](?)) : _unknown[51]
  {
    unknown IT[226660] "type variable"(226657 IfExpr (226653 call ==(226651 'typeof' nElems) uint[115]) then
    { scopeless
      uint[115]
    } else
    { scopeless
      int[13]
    } )
    { scopeless
      const tmp[226686] "const" "temp"(226684 call _build_tuple(226673 call _cast IT nElems)(226677 call _cast IT nChunks)(226682 call _cast IT myCnk))
      (226696 call _check_tuple_var_decl tmp[226686] 3)
      const numElems[226664] "const"(226687 call tmp[226686] 0)
      const numChunks[226666] "const"(226690 call tmp[226686] 1)
      const myChunk[226668] "const"(226693 call tmp[226686] 2)
      (226701 'end of statement')
    }
    unknown RT[226704] "type variable"(226703 'typeof' nElems)
    { scopeless
      unknown div[226711](226709 call / numElems numChunks)
      (226714 'end of statement')
    }
    { scopeless
      unknown rem[226719](226717 call % numElems numChunks)
      (226722 'end of statement')
    }
    (226735 call assert(226732 call &&(226726 call <= 1 myChunk)(226730 call <= myChunk numChunks)))
    if(226806 call _cond_test(226739 call <= myChunk rem))
    {
      { scopeless
        unknown endIx[226748](226746 call * myChunk(226744 call + div 1))
        (226751 'end of statement')
      }
      (226767 return(226765 call _build_tuple(226758 call _cast RT(226755 call - endIx div))(226762 call _cast RT endIx)))
    }
    {
      { scopeless
        unknown startIx1[226782](226780 call - numElems(226778 call *(226775 call +(226772 call - numChunks myChunk) 1) div))
        (226785 'end of statement')
      }
      (226804 return(226802 call _build_tuple(226792 call _cast RT(226789 call + startIx1 1))(226799 call _cast RT(226796 call + startIx1 div))))
    }
  }
  { scopeless type
    (226648 call * 2(226647 'typeof' nElems))
  }
  function intCeilXDivByY[226817](arg x[226815]:_any[178](?), arg y[226819]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      (226831 return(226829 call + 1(226827 call /(226824 call - x 1) y)))
    }
  }
  function _computeBlock[226840](arg numelems[226838]:_any[178](?), arg numblocks[226842]:_any[178](?), arg blocknum[226844]:_any[178](?), arg wayhi[226846]:_any[178](?), arg waylo[226853] =
  (226851 call _cast(226850 'typeof' wayhi) 0), arg lo[226861] =
  (226859 call _cast(226858 'typeof' wayhi) 0)) : _unknown[51]
  {
    if(226883 call _cond_test(226866 call == numelems 0))
    {
      { scopeless
        (226881 return(226879 call _build_tuple(226871 call _cast(226870 'typeof' lo) 1)(226876 call _cast(226875 'typeof' lo) 0)))
      }
    }
    { scopeless
      const blo[226921] "const"(226918 IfExpr (226891 call == blocknum 0) then
      { scopeless
        waylo
      } else
      { scopeless
        (226916 call + lo(226914 call _cast(226913 'typeof' lo)(226911 call intCeilXDivByY(226904 call *(226898 call _cast uint[115] numelems)(226902 call _cast uint[115] blocknum))(226909 call _cast uint[115] numblocks))))
      } )
      (226924 'end of statement')
    }
    { scopeless
      const bhi[226966] "const"(226963 IfExpr (226930 call == blocknum(226928 call - numblocks 1)) then
      { scopeless
        wayhi
      } else
      { scopeless
        (226961 call -(226958 call + lo(226956 call _cast(226955 'typeof' lo)(226953 call intCeilXDivByY(226946 call *(226937 call _cast uint[115] numelems)(226944 call _cast uint[115](226941 call + blocknum 1)))(226951 call _cast uint[115] numblocks)))) 1)
      } )
      (226969 'end of statement')
    }
    (226975 return(226973 call _build_tuple blo bhi))
  }
  function _factor[226985](param arg rank[226982] :
  int[13], arg value[226987]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown factors[226993](226991 call * rank int[13])
      (226996 'end of statement')
    }
    {
      unknown i[227013] 0
      unknown tmp[227014] "maybe param" "temp"
      (227026 'move' tmp[227014](227024 call chpl_compute_low_param_loop_bound 0(227001 call - rank 1)))
      unknown tmp[227015] "maybe param" "temp"
      (227036 'move' tmp[227015](227034 call chpl_compute_high_param_loop_bound 0(227031 call - rank 1)))
      unknown tmp[227016] "maybe param" "temp"
      (227039 'move' tmp[227016] 1)
      ParamForLoop[227041]
      { i[227013] tmp[227014] tmp[227015] tmp[227016]
        { scopeless
          (227010 call =(227008 call factors i) 1)
        }
      }
      label _unused_continueLabel[227018]
      label _breakLabel[227017]
    }
    if(227247 call _cond_test(227052 call >= value 1))
    {
      { scopeless
        unknown iv[227055] value
        (227058 'end of statement')
      }
      { scopeless
        unknown factor[227061] 1
        (227064 'end of statement')
      }
      {
        unknown tmp[227220] "temp"
        (227244 'move' tmp[227220](227239 call _cond_test(227241 call > iv 1)))
        WhileDo[227225]
        {
          {
            {
              unknown _indexOfInterest[227181] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[227182] "expr temp" "temp"
              (227191 'move' _iterator[227182](227189 call _getIterator(227196 call chpl_direct_range_iter 2 iv 1)))
              Defer
              {
                {
                  (227212 call _freeIterator _iterator[227182])
                }
              }
              { scopeless type
                (227201 'move' _indexOfInterest[227181](227198 call iteratorIndex _iterator[227182]))
              }
              ForLoop[227183]
              {
                unknown i[227205] "index var" "insert auto destroy"
                (227207 'move' i[227205] _indexOfInterest[227181])
                {
                  if(227176 call _cond_test(227079 call ==(227076 call % iv i) 0))
                  {
                    { scopeless
                      unknown j[227082] 0
                      (227085 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[227116] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[227117] "expr temp" "temp"
                      (227126 'move' _iterator[227117](227124 call _getIterator(227134 call chpl_direct_range_iter 1(227131 call - rank 1) 1)))
                      Defer
                      {
                        {
                          (227150 call _freeIterator _iterator[227117])
                        }
                      }
                      { scopeless type
                        (227139 'move' _indexOfInterest[227116](227136 call iteratorIndex _iterator[227117]))
                      }
                      ForLoop[227118]
                      {
                        unknown i[227143] "index var" "insert auto destroy"
                        (227145 'move' i[227143] _indexOfInterest[227116])
                        {
                          if(227110 call _cond_test(227103 call <(227098 call factors i)(227102 call factors j)))
                          {
                            { scopeless
                              (227107 call = j i)
                            }
                          }
                        }
                        label _continueLabel[227121]
                        _indexOfInterest[227116]
                        _iterator[227117]
                      }
                      label _breakLabel[227122]
                    }
                    (227162 call *=(227160 call factors j) i)
                    (227170 call = iv(227168 call / iv i))
                    break nil[44]
                  }
                }
                label _continueLabel[227186]
                _indexOfInterest[227181]
                _iterator[227182]
              }
              label _breakLabel[227187]
            }
          }
          label _continueLabel[227223]
          (227234 'move' tmp[227220](227229 call _cond_test(227231 call > iv 1)))
          tmp[227220]
        }
        label _breakLabel[227224]
      }
    }
    {
      unknown _indexOfInterest[227340] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[227341] "expr temp" "temp"
      (227350 'move' _iterator[227341](227348 call _getIterator(227358 call chpl_direct_range_iter 0(227355 call - rank 1) 1)))
      Defer
      {
        {
          (227374 call _freeIterator _iterator[227341])
        }
      }
      { scopeless type
        (227363 'move' _indexOfInterest[227340](227360 call iteratorIndex _iterator[227341]))
      }
      ForLoop[227342]
      {
        unknown i[227367] "index var" "insert auto destroy"
        (227369 'move' i[227367] _indexOfInterest[227340])
        {
          unknown _indexOfInterest[227296] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[227297] "expr temp" "temp"
          (227306 'move' _iterator[227297](227304 call _getIterator(227317 call chpl_direct_range_iter(227310 call + i 1)(227314 call - rank 1) 1)))
          Defer
          {
            {
              (227333 call _freeIterator _iterator[227297])
            }
          }
          { scopeless type
            (227322 'move' _indexOfInterest[227296](227319 call iteratorIndex _iterator[227297]))
          }
          ForLoop[227298]
          {
            unknown j[227326] "index var" "insert auto destroy"
            (227328 'move' j[227326] _indexOfInterest[227296])
            { scopeless
              if(227291 call _cond_test(227278 call <(227273 call factors i)(227277 call factors j)))
              {
                { scopeless
                  (227288 call <=>(227283 call factors i)(227287 call factors j))
                }
              }
            }
            label _continueLabel[227301]
            _indexOfInterest[227296]
            _iterator[227297]
          }
          label _breakLabel[227302]
        }
        label _continueLabel[227345]
        _indexOfInterest[227340]
        _iterator[227341]
      }
      label _breakLabel[227346]
    }
    (227382 return factors)
  }
  function computeZeroBasedDomain[227392](arg dom[227389] :
  _domain) : _unknown[51]
  {
    { scopeless
      (227407 return(227405 call chpl__buildDomainExpr(227403 'expand_tuple'(227402 call computeZeroBasedRanges(227400 call(227396 call . dom c"dims"))))))
    }
  }
  function computeZeroBasedRanges[227418](arg ranges[227415] :
  _tuple) : _unknown[51]
  {
    function helper[227424](arg idxType[227422]:_any[178](?), arg first[227426]:_any[178](?), arg rest[227429]:_any[178](?) ...) : _unknown[51]
    {
      if(227504 call _cond_test(227437 call >(227433 call . rest c"size") 1))
      {
        { scopeless
          (227464 return(227462 call _build_tuple(227452 call #(227443 call chpl_build_low_bounded_range(227441 call _cast idxType 0))(227450 call _cast idxType(227446 call . first c"size")))(227460 'expand_tuple'(227459 call helper idxType(227458 'expand_tuple' rest)))))
        }
      }
      {
        { scopeless
          (227502 return(227500 call _build_tuple(227479 call #(227470 call chpl_build_low_bounded_range(227468 call _cast idxType 0))(227477 call _cast idxType(227473 call . first c"size")))(227497 call #(227485 call chpl_build_low_bounded_range(227483 call _cast idxType 0))(227495 call _cast idxType(227491 call .(227490 call rest 0) c"size")))))
        }
      }
    }
    unknown idxType[227521] "type variable"(227518 call .(227517 call ranges 0) c"idxType")
    if(227561 call _cond_test(227529 call >(227525 call . ranges c"size") 1))
    {
      { scopeless
        (227537 return(227536 call helper idxType(227535 'expand_tuple' ranges)))
      }
    }
    {
      { scopeless
        (227559 return(227557 call _build_tuple(227555 call #(227543 call chpl_build_low_bounded_range(227541 call _cast idxType 0))(227553 call _cast idxType(227549 call .(227548 call ranges 0) c"size")))))
      }
    }
  }
  function densify[227575](arg sub[227572] :
  _domain, arg whole[227578] :
  _domain, arg userErrors[227582] =
  1) : _unknown[51]
  {
    unknown argtypes[227604] "type variable"(227603 'typeof'(227601 call _build_tuple sub whole))
    (227621 call _densiCheck(227617 call ==(227610 call . sub c"rank")(227614 call . whole c"rank")) argtypes)
    (227634 call _densiIdxCheck(227625 call . sub c"idxType")(227630 call . whole c"idxType") argtypes)
    (227656 return(227654 call chpl__buildDomainExpr(227652 'expand_tuple'(227651 call densify(227642 call(227638 call . sub c"dims"))(227649 call(227645 call . whole c"dims")) userErrors))))
  }
  { scopeless type
    (227596 call chpl__buildDomainRuntimeType defaultDist(227586 call . whole c"rank")(227591 call . whole c"idxType") 1)
  }
  function densify[227665](arg subs[227663]:_any[178](?), arg wholes[227667]:_any[178](?), arg userErrors[227670] =
  1) : _unknown[51]
  {
    unknown argtypes[227689] "type variable"(227688 'typeof'(227686 call _build_tuple subs wholes))
    (227706 call _densiCheck(227702 call ==(227695 call . wholes c"size")(227699 call . subs c"size")) argtypes)
    (227718 call _densiCheck(227715 call isRange(227713 call subs 0)) argtypes)
    (227730 call _densiCheck(227727 call isRange(227725 call wholes 0)) argtypes)
    (227738 call _densiEnsureBounded(227736 call subs 0))
    (227757 call _densiIdxCheck(227745 call .(227744 call subs 0) c"idxType")(227753 call .(227752 call wholes 0) c"idxType") argtypes)
    { scopeless
      unknown rank[227763] "param"(227760 call . wholes c"size")
      (227766 'end of statement')
    }
    unknown IT[227774] "type variable"(227771 call .(227770 call wholes 0) c"idxType")
    { scopeless
      unknown result[227789](227787 call * rank(227786 call range IT(227782 call . BoundedRangeType c"bounded") 1))
      (227792 'end of statement')
    }
    {
      unknown d[227884] 0
      unknown tmp[227885] "maybe param" "temp"
      (227897 'move' tmp[227885](227895 call chpl_compute_low_param_loop_bound 0(227796 call - rank 1)))
      unknown tmp[227886] "maybe param" "temp"
      (227907 'move' tmp[227886](227905 call chpl_compute_high_param_loop_bound 0(227902 call - rank 1)))
      unknown tmp[227887] "maybe param" "temp"
      (227910 'move' tmp[227887] 1)
      ParamForLoop[227912]
      { d[227884] tmp[227885] tmp[227886] tmp[227887]
        {
          (227810 call _densiCheck(227807 call isRange(227805 call subs d)) argtypes)
          (227823 call _densiCheck(227820 call isRange(227818 call wholes d)) argtypes)
          (227836 call _densiIdxCheck(227830 call .(227829 call wholes d) c"idxType") IT argtypes)
          (227844 call _densiEnsureBounded(227842 call subs d))
          (227863 call _densiIdxCheck(227851 call .(227850 call subs d) c"idxType")(227859 call .(227858 call wholes d) c"idxType") argtypes)
          (227881 call =(227868 call result d)(227880 call densify(227873 call subs d)(227878 call wholes d) userErrors))
        }
      }
      label _unused_continueLabel[227889]
      label _breakLabel[227888]
    }
    (227922 return result)
  }
  where {
    (227681 call &&(227676 call isTuple subs)(227680 call isTuple wholes))
  }
  function densify[227939](arg s[227936] :
  (227935 call range ?[260](boundedType = unknown B[227932])), arg w[227949] :
  (227948 call range unknown IT[227942] ?[260](stridable = 1)), arg userErrors[227953] =
  1) : _unknown[51]
  {
    (227965 call _densiEnsureBounded s)
    (227981 call _densiIdxCheck(227970 call . s c"idxType") IT(227980 'typeof'(227978 call _build_tuple s w)))
    function ensure[227987](arg cond[227985]:_any[178](?), arg args[227990]:_any[178](?) ...) : _unknown[51]
    {
      if(228016 call _cond_test userErrors)
      {
        if(228003 call _cond_test(227995 call ! cond))
        {
          { scopeless
            (228001 call halt(227999 'expand_tuple' args))
          }
        }
      }
      {
        { scopeless
          (228014 call assert cond(228013 'expand_tuple' args))
        }
      }
    }
    if(228340 call _cond_test(228029 call ==(228025 call . s c"size") 0))
    {
      (228041 return(228039 call chpl_build_bounded_range(228033 call _cast IT 1)(228037 call _cast IT 0)))
    }
    {
      (228106 call ensure(228050 call >(228046 call . w c"size") 0) "densify(s=" s ", w=" w "): w is empty while s is not")
      { scopeless
        unknown low[228120](228119 call(228111 call . w c"indexOrder")(228115 call . s c"first")) IT
        (228123 'end of statement')
      }
      (228151 call ensure(228127 call >= low 0) "densify(s=" s ", w=" w "): s.first is not in w")
      if(228336 call _cond_test(228158 call ==(228154 call . s c"size") 1))
      {
        (228164 return(228162 call chpl_build_bounded_range low low))
      }
      {
        { scopeless
          unknown high[228178](228177 call(228169 call . w c"indexOrder")(228173 call . s c"last")) IT
          (228181 'end of statement')
        }
        (228210 call ensure(228186 call >= high 0) "densify(s=" s ", w=" w "): s.last is not in w")
        (228248 call ensure(228224 call ==(228221 call %(228214 call . s c"stride")(228218 call . w c"stride")) 0) "densify(s=" s ", w=" w "): s.stride is not a multiple of w.stride")
        { scopeless
          const stride[228260] "const"(228258 call /(228251 call . s c"stride")(228255 call . w c"stride"))
          (228263 'end of statement')
        }
        if(228273 call _cond_test(228266 call < stride 0))
        {
          { scopeless
            (228270 call <=> low high)
          }
        }
        (228325 call assert(228281 call <= low high) "densify(s=" s ", w=" w "): got low (" low ") larger than high (" high ")")
        (228334 return(228332 call chpl_by(228329 call chpl_build_bounded_range low high) stride))
      }
    }
  }
  { scopeless type
    (227961 call range IT B 1)
  }
  function densify[228362](arg sArg[228359] :
  (228358 call range ?[260](boundedType = unknown B[228352])(stridable = unknown S[228355])), arg w[228372] :
  (228371 call range unknown IT[228365] ?[260](stridable = 0)), arg userErrors[228376] =
  1) : _unknown[51]
  {
    (228388 call _densiEnsureBounded sArg)
    (228404 call _densiIdxCheck(228393 call . sArg c"idxType") IT(228403 'typeof'(228401 call _build_tuple sArg w)))
    { scopeless
      const s[228415] "const"(228413 call _cast(228412 call range IT B S) sArg)
      (228418 'end of statement')
    }
    function ensure[228423](arg cond[228421]:_any[178](?)) : _unknown[51]
    {
      if(228444 call _cond_test userErrors)
      {
        if(228433 call _cond_test(228427 call ! cond))
        {
          { scopeless
            (228431 call halt)
          }
        }
      }
      {
        { scopeless
          (228442 call assert cond)
        }
      }
    }
    (228483 call ensure(228480 call ||(228458 call(228454 call . s c"isEmpty"))(228478 call <=(228460 call . w c"low")(228475 IfExpr (228466 call isIntType IT) then
    { scopeless
      (228468 call . s c"alignedLow")
    } else
    { scopeless
      (228472 call . s c"low")
    } ))))
    (228515 call ensure(228512 call ||(228500 call ||(228491 call(228487 call . s c"isEmpty"))(228498 call !(228497 call(228493 call . w c"hasHighBound"))))(228510 call <=(228503 call . s c"alignedHigh")(228507 call . w c"high"))))
    if(228541 call _cond_test(228527 call &&(228520 call isUintType IT)(228526 call(228522 call . s c"isEmpty"))))
    {
      { scopeless
        (228539 return(228537 call chpl_build_bounded_range(228531 call _cast IT 1)(228535 call _cast IT 0)))
      }
    }
    (228561 return(228559 call _cast(228558 call range IT B S)(228551 call - s(228548 call . w c"low"))))
  }
  { scopeless type
    (228384 call range IT B S)
  }
  function _densiEnsureBounded[228570](arg arg[228568]:_any[178](?)) : _unknown[51]
  {
    if(228600 call _cond_test(228576 call !(228575 call isBoundedRange arg)))
    {
      { scopeless
        (228598 call compilerError "densify() currently requires that sub-ranges be bounded" 2)
      }
    }
  }
  function _densiIdxCheck[228612](arg subIdxType[228610]:_any[178](?), arg wholeIdxType[228614]:_any[178](?), arg argtypes[228616]:_any[178](?)) : _unknown[51]
  {
    (228628 call _densiCheck(228623 call chpl__legalIntCoerce subIdxType wholeIdxType) argtypes(errlevel = 3))
  }
  function _densiCheck[228637](param arg cond[228635]:_any[178](?), arg argtypes[228639]:_any[178](?), param arg errlevel[228642] =
  2) : _unknown[51]
  {
    if(228676 call _cond_test(228646 call ! cond))
    {
      { scopeless
        (228674 call compilerError "densify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges (except stridability and range b(228671 call _cast string[26] argtypes) errlevel)
      }
    }
  }
  function unDensify[228690](arg dense[228687] :
  _domain, arg whole[228693] :
  _domain, arg userErrors[228697] =
  1) : _unknown[51]
  {
    unknown argtypes[228719] "type variable"(228718 'typeof'(228716 call _build_tuple dense whole))
    (228736 call _undensCheck(228732 call ==(228725 call . dense c"rank")(228729 call . whole c"rank")) argtypes)
    (228758 return(228756 call chpl__buildDomainExpr(228754 'expand_tuple'(228753 call unDensify(228744 call(228740 call . dense c"dims"))(228751 call(228747 call . whole c"dims")) userErrors))))
  }
  { scopeless type
    (228711 call chpl__buildDomainRuntimeType defaultDist(228701 call . whole c"rank")(228706 call . whole c"idxType") 1)
  }
  function unDensify[228767](arg denses[228765]:_any[178](?), arg wholes[228769]:_any[178](?), arg userErrors[228772] =
  1) : _unknown[51]
  {
    unknown argtypes[228791] "type variable"(228790 'typeof'(228788 call _build_tuple denses wholes))
    (228808 call _undensCheck(228804 call ==(228797 call . wholes c"size")(228801 call . denses c"size")) argtypes)
    (228820 call _undensCheck(228817 call isRange(228815 call denses 0)) argtypes)
    (228832 call _undensCheck(228829 call isRange(228827 call wholes 0)) argtypes)
    (228840 call _undensEnsureBounded(228838 call denses 0))
    { scopeless
      unknown rank[228846] "param"(228843 call . wholes c"size")
      (228849 'end of statement')
    }
    unknown IT[228857] "type variable"(228854 call .(228853 call wholes 0) c"idxType")
    { scopeless
      unknown result[228872](228870 call * rank(228869 call range IT(228865 call . BoundedRangeType c"bounded") 1))
      (228875 'end of statement')
    }
    {
      unknown d[228950] 0
      unknown tmp[228951] "maybe param" "temp"
      (228963 'move' tmp[228951](228961 call chpl_compute_low_param_loop_bound 0(228879 call - rank 1)))
      unknown tmp[228952] "maybe param" "temp"
      (228973 'move' tmp[228952](228971 call chpl_compute_high_param_loop_bound 0(228968 call - rank 1)))
      unknown tmp[228953] "maybe param" "temp"
      (228976 'move' tmp[228953] 1)
      ParamForLoop[228978]
      { d[228950] tmp[228951] tmp[228952] tmp[228953]
        {
          (228893 call _undensCheck(228890 call isRange(228888 call denses d)) argtypes)
          (228906 call _undensCheck(228903 call isRange(228901 call wholes d)) argtypes)
          (228922 call _undensCheck(228919 call chpl__legalIntCoerce(228914 call .(228913 call wholes d) c"idxType") IT) argtypes)
          (228930 call _undensEnsureBounded(228928 call denses d))
          (228947 call =(228935 call result d)(228946 call unDensify(228940 call denses d)(228945 call wholes d)))
        }
      }
      label _unused_continueLabel[228955]
      label _breakLabel[228954]
    }
    (228988 return result)
  }
  where {
    (228783 call &&(228778 call isTuple denses)(228782 call isTuple wholes))
  }
  function unDensify[229005](arg dense[229002] :
  (229001 call range ?[260](boundedType = unknown B[228998])), arg whole[229015] :
  (229014 call range unknown IT[229008] ?[260](stridable = 1))) : _unknown[51]
  {
    (229027 call _undensEnsureBounded dense)
    if(229061 call _cond_test(229038 call ==(229031 call . whole c"boundedType")(229035 call . BoundedRangeType c"boundedNone")))
    {
      { scopeless
        (229059 call compilerError "unDensify(): the 'whole' argument must have at least one bound")
      }
    }
    if(229085 call _cond_test(229071 call ==(229067 call . dense c"size") 0))
    {
      { scopeless
        (229083 return(229081 call chpl_build_bounded_range(229075 call _cast IT 1)(229079 call _cast IT 0)))
      }
    }
    if(229119 call _cond_test(229096 call !(229095 call(229091 call . whole c"hasFirst"))))
    {
      { scopeless
        (229117 call halt "unDensify() is invoked with the 'whole' range that has no first index")
      }
    }
    { scopeless
      unknown low[229135](229134 call(229126 call . whole c"orderToIndex")(229130 call . dense c"first")) IT
      (229138 'end of statement')
    }
    { scopeless
      const stride[229149] "const"(229147 call *(229140 call . whole c"stride")(229144 call . dense c"stride"))
      (229152 'end of statement')
    }
    { scopeless
      unknown high[229166](229165 call chpl__addRangeStrides low stride(229163 call -(229159 call . dense c"size") 1)) IT
      (229169 'end of statement')
    }
    (229185 call assert(229182 call == high(229181 call(229173 call . whole c"orderToIndex")(229177 call . dense c"last"))))
    if(229196 call _cond_test(229189 call < stride 0))
    {
      { scopeless
        (229193 call <=> low high)
      }
    }
    (229248 call assert(229204 call <= low high) "unDensify(dense=" dense ", whole=" whole "): got low (" low ") larger than high (" high ")")
    (229257 return(229255 call chpl_by(229252 call chpl_build_bounded_range low high) stride))
  }
  { scopeless type
    (229023 call range IT B 1)
  }
  function unDensify[229277](arg dense[229274] :
  (229273 call range ?[260](boundedType = unknown B[229267])(stridable = unknown S[229270])), arg whole[229287] :
  (229286 call range unknown IT[229280] ?[260](stridable = 0))) : _unknown[51]
  {
    if(229325 call _cond_test(229302 call !(229301 call(229297 call . whole c"hasLowBound"))))
    {
      { scopeless
        (229323 call compilerError "unDensify(): the 'whole' argument, when not stridable, must have a low bound")
      }
    }
    (229346 return(229344 call _cast(229343 call range IT B S)(229336 call + dense(229333 call . whole c"low"))))
  }
  { scopeless type
    (229295 call range IT B S)
  }
  function _undensEnsureBounded[229355](arg arg[229353]:_any[178](?)) : _unknown[51]
  {
    if(229385 call _cond_test(229361 call !(229360 call isBoundedRange arg)))
    {
      { scopeless
        (229383 call compilerError "unDensify() currently requires that the densified ranges be bounded" 2)
      }
    }
  }
  function _undensCheck[229397](param arg cond[229395]:_any[178](?), arg argtypes[229399]:_any[178](?), param arg errlevel[229402] =
  2) : _unknown[51]
  {
    if(229436 call _cond_test(229406 call ! cond))
    {
      { scopeless
        (229434 call compilerError "unDensify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges, but is invoked on "(229431 call _cast string[26] argtypes) errlevel)
      }
    }
  }
  function setupTargetLocalesArray[229448](ref arg targetLocDom[229446]:_any[178](?), arg targetLocArr[229450]:_any[178](?), arg specifiedLocArr[229452]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown rank[229458] "param"(229455 call . targetLocDom c"rank")
      (229461 'end of statement')
    }
    if(229700 call _cond_test(229474 call &&(229465 call != rank 1)(229472 call ==(229468 call . specifiedLocArr c"rank") 1)))
    {
      { scopeless
        const factors[229484] "const"(229483 call _factor rank(229480 call . specifiedLocArr c"size"))
        (229487 'end of statement')
      }
      { scopeless
        unknown ranges[229493](229491 call * rank range)
        (229496 'end of statement')
      }
      {
        unknown i[229520] 0
        unknown tmp[229521] "maybe param" "temp"
        (229533 'move' tmp[229521](229531 call chpl_compute_low_param_loop_bound 0(229500 call - rank 1)))
        unknown tmp[229522] "maybe param" "temp"
        (229543 'move' tmp[229522](229541 call chpl_compute_high_param_loop_bound 0(229538 call - rank 1)))
        unknown tmp[229523] "maybe param" "temp"
        (229546 'move' tmp[229523] 1)
        ParamForLoop[229548]
        { i[229520] tmp[229521] tmp[229522] tmp[229523]
          { scopeless
            (229517 call =(229507 call ranges i)(229515 call #(229509 call chpl_build_low_bounded_range 0)(229514 call factors i)))
          }
        }
        label _unused_continueLabel[229525]
        label _breakLabel[229524]
      }
      (229563 call = targetLocDom(229561 call chpl__buildDomainExpr(229559 'expand_tuple' ranges)))
      (229572 call = targetLocArr(229571 call reshape specifiedLocArr targetLocDom))
    }
    {
      if(229603 call _cond_test(229580 call !=(229576 call . specifiedLocArr c"rank") rank))
      {
        { scopeless
          (229601 call compilerError "specified target array of locales must equal 1 or distribution rank")
        }
      }
      { scopeless
        unknown ranges[229613](229611 call * rank range)
        (229616 'end of statement')
      }
      {
        unknown i[229649] 0
        unknown tmp[229650] "maybe param" "temp"
        (229662 'move' tmp[229650](229660 call chpl_compute_low_param_loop_bound 0(229620 call - rank 1)))
        unknown tmp[229651] "maybe param" "temp"
        (229672 'move' tmp[229651](229670 call chpl_compute_high_param_loop_bound 0(229667 call - rank 1)))
        unknown tmp[229652] "maybe param" "temp"
        (229675 'move' tmp[229652] 1)
        ParamForLoop[229677]
        { i[229649] tmp[229650] tmp[229651] tmp[229652]
          { scopeless
            (229646 call =(229627 call ranges i)(229644 call #(229629 call chpl_build_low_bounded_range 0)(229641 call .(229640 call(229635 call .(229632 call . specifiedLocArr c"_dom") c"dim") i) c"size")))
          }
        }
        label _unused_continueLabel[229654]
        label _breakLabel[229653]
      }
      (229692 call = targetLocDom(229690 call chpl__buildDomainExpr(229688 'expand_tuple' ranges)))
      (229697 call = targetLocArr specifiedLocArr)
    }
  }
  function setupTargetLocRanges[229710](param arg rank[229708]:_any[178](?), arg specifiedLocArr[229712]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown ranges[229718](229716 call * rank range)
      (229721 'end of statement')
    }
    if(229896 call _cond_test(229734 call &&(229725 call != rank 1)(229732 call ==(229728 call . specifiedLocArr c"rank") 1)))
    {
      { scopeless
        const factors[229744] "const"(229743 call _factor rank(229740 call . specifiedLocArr c"size"))
        (229747 'end of statement')
      }
      {
        unknown i[229772] 0
        unknown tmp[229773] "maybe param" "temp"
        (229785 'move' tmp[229773](229783 call chpl_compute_low_param_loop_bound 0(229752 call - rank 1)))
        unknown tmp[229774] "maybe param" "temp"
        (229795 'move' tmp[229774](229793 call chpl_compute_high_param_loop_bound 0(229790 call - rank 1)))
        unknown tmp[229775] "maybe param" "temp"
        (229798 'move' tmp[229775] 1)
        ParamForLoop[229800]
        { i[229772] tmp[229773] tmp[229774] tmp[229775]
          { scopeless
            (229769 call =(229759 call ranges i)(229767 call #(229761 call chpl_build_low_bounded_range 0)(229766 call factors i)))
          }
        }
        label _unused_continueLabel[229777]
        label _breakLabel[229776]
      }
    }
    {
      if(229821 call _cond_test(229814 call !=(229810 call . specifiedLocArr c"rank") rank))
      {
        { scopeless
          (229819 call compilerError "specified target array of locales must equal 1 or distribution rank")
        }
      }
      {
        unknown i[229859] 0
        unknown tmp[229860] "maybe param" "temp"
        (229872 'move' tmp[229860](229870 call chpl_compute_low_param_loop_bound 0(229830 call - rank 1)))
        unknown tmp[229861] "maybe param" "temp"
        (229882 'move' tmp[229861](229880 call chpl_compute_high_param_loop_bound 0(229877 call - rank 1)))
        unknown tmp[229862] "maybe param" "temp"
        (229885 'move' tmp[229862] 1)
        ParamForLoop[229887]
        { i[229859] tmp[229860] tmp[229861] tmp[229862]
          { scopeless
            (229856 call =(229837 call ranges i)(229854 call #(229839 call chpl_build_low_bounded_range 0)(229851 call .(229850 call(229845 call .(229842 call . specifiedLocArr c"_dom") c"dim") i) c"size")))
          }
        }
        label _unused_continueLabel[229864]
        label _breakLabel[229863]
      }
    }
    (229901 return ranges)
  }
  function createWholeDomainForInds[229909](param arg rank[229907]:_any[178](?), arg idxType[229911]:_any[178](?), param arg stridable[229913]:_any[178](?), arg inds[229915]:_any[178](?)) : _unknown[51]
  {
    if(229948 call _cond_test(229920 call isDomain inds))
    {
      (229922 return inds)
    }
    {
      { scopeless
        unknown result[229932](229930 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (229935 'end of statement')
      }
      (229943 call(229938 call . result c"setIndices") inds)
      (229946 return result)
    }
  }
  function bulkCommComputeActiveDims[229959](arg LeftDims[229957]:_any[178](?), arg RightDims[229961]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown LeftRank[229967] "param"(229964 call . LeftDims c"size")
      (229970 'end of statement')
    }
    { scopeless
      unknown RightRank[229976] "param"(229973 call . RightDims c"size")
      (229979 'end of statement')
    }
    { scopeless
      unknown minRank[229985] "param"(229984 call min LeftRank RightRank)
      (229988 'end of statement')
    }
    { scopeless
      unknown inferredRank[229990] 0
      (229993 'end of statement')
    }
    { scopeless
      unknown LeftActives[229994](229999 call * minRank int[13])
      unknown RightActives[230001](230005 'typeof' LeftActives)
      (230006 'end of statement')
    }
    { scopeless
      unknown li[230008] 0
      unknown ri[230012] 0
      (230015 'end of statement')
    }
    function advance[230018]() : _unknown[51]
    {
      {
        unknown tmp[230053] "temp"
        (230119 'move' tmp[230053](230093 call _cond_test(230095 call &&(230097 call ==(230099 call .(230101 call LeftDims li) c"size") 1)(230106 call !=(230108 call .(230110 call LeftDims li) c"size")(230114 call .(230116 call RightDims ri) c"size")))))
        WhileDo[230058]
        {
          { scopeless
            (230050 call += li 1)
          }
          label _continueLabel[230056]
          (230088 'move' tmp[230053](230062 call _cond_test(230064 call &&(230066 call ==(230068 call .(230070 call LeftDims li) c"size") 1)(230075 call !=(230077 call .(230079 call LeftDims li) c"size")(230083 call .(230085 call RightDims ri) c"size")))))
          tmp[230053]
        }
        label _breakLabel[230057]
      }
      {
        unknown tmp[230156] "temp"
        (230222 'move' tmp[230156](230196 call _cond_test(230198 call &&(230200 call ==(230202 call .(230204 call RightDims ri) c"size") 1)(230209 call !=(230211 call .(230213 call RightDims ri) c"size")(230217 call .(230219 call LeftDims li) c"size")))))
        WhileDo[230161]
        {
          { scopeless
            (230153 call += ri 1)
          }
          label _continueLabel[230159]
          (230191 'move' tmp[230156](230165 call _cond_test(230167 call &&(230169 call ==(230171 call .(230173 call RightDims ri) c"size") 1)(230178 call !=(230180 call .(230182 call RightDims ri) c"size")(230186 call .(230188 call LeftDims li) c"size")))))
          tmp[230156]
        }
        label _breakLabel[230160]
      }
      (230243 call assert(230240 call ==(230230 call .(230229 call LeftDims li) c"size")(230237 call .(230236 call RightDims ri) c"size")))
    }
    {
      unknown tmp[230293] "temp"
      DoWhile[230314]
      {
        {
          (230249 call advance)
          (230257 call =(230255 call LeftActives inferredRank) li)
          (230265 call =(230263 call RightActives inferredRank) ri)
          (230270 call += inferredRank 1)
          (230275 call += li 1)
          (230280 call += ri 1)
          label _continueLabel[230296]
          (230312 'move' tmp[230293](230301 call _cond_test(230303 call &&(230305 call < li LeftRank)(230309 call < ri RightRank))))
        }
        tmp[230293]
      }
      label _breakLabel[230297]
    }
    (230324 return(230322 call _build_tuple LeftActives RightActives inferredRank))
  }
  function bulkCommTranslateDomain[230334](arg srcSlice[230331] :
  _domain, arg srcDom[230337] :
  _domain, arg targetDom[230341] :
  _domain) : _unknown[51]
  {
    if(230375 call _cond_test(230352 call !=(230345 call . srcSlice c"rank")(230349 call . srcDom c"rank")))
    {
      { scopeless
        (230373 call compilerError "bulkCommTranslateDomain: source slice and source domain must have identical rank")
      }
    }
    { scopeless
      const tmp[230403] "const" "temp"(230402 call bulkCommComputeActiveDims(230394 call(230390 call . srcDom c"dims"))(230401 call(230397 call . targetDom c"dims")))
      (230413 call _check_tuple_var_decl tmp[230403] 3)
      const SrcActives[230381] "const"(230404 call tmp[230403] 0)
      const TargetActives[230383] "const"(230407 call tmp[230403] 1)
      const inferredRank[230385] "const"(230410 call tmp[230403] 2)
      (230418 'end of statement')
    }
    { scopeless
      unknown needsStridable[230429] "param"(230427 call ||(230420 call . targetDom c"stridable")(230424 call . srcSlice c"stridable"))
      (230432 'end of statement')
    }
    { scopeless
      unknown rngs[230454](230453 call(230449 call . targetDom c"dims"))(230446 call *(230434 call . targetDom c"rank")(230445 call range(230439 call . targetDom c"idxType")(stridable = needsStridable)))
      (230457 'end of statement')
    }
    {
      unknown _indexOfInterest[230522] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[230523] "expr temp" "temp"
      (230532 'move' _iterator[230523](230530 call _getIterator(230540 call chpl_direct_range_iter 0(230537 call - inferredRank 1) 1)))
      Defer
      {
        {
          (230556 call _freeIterator _iterator[230523])
        }
      }
      { scopeless type
        (230545 'move' _indexOfInterest[230522](230542 call iteratorIndex _iterator[230523]))
      }
      ForLoop[230524]
      {
        unknown i[230549] "index var" "insert auto destroy"
        (230551 'move' i[230549] _indexOfInterest[230522])
        {
          { scopeless
            const SD[230470] "const"(230469 call SrcActives i)
            (230473 'end of statement')
          }
          { scopeless
            const TD[230479] "const"(230478 call TargetActives i)
            (230482 'end of statement')
          }
          { scopeless
            const dense[230500] "const"(230499 call densify(230490 call(230485 call . srcSlice c"dim") SD)(230498 call(230493 call . srcDom c"dim") SD))
            (230503 'end of statement')
          }
          (230519 call =(230507 call rngs TD)(230518 call unDensify dense(230517 call(230512 call . targetDom c"dim") TD)))
        }
        label _continueLabel[230527]
        _indexOfInterest[230522]
        _iterator[230523]
      }
      label _breakLabel[230528]
    }
    (230568 return(230566 call chpl__buildDomainExpr(230564 'expand_tuple' rngs)))
  }
  function bulkCommConvertCoordinate[230576](arg ind[230574]:_any[178](?), arg bView[230579] :
  _domain, arg aView[230583] :
  _domain) : _unknown[51]
  {
    if(230649 call _cond_test(230594 call !=(230587 call . bView c"rank")(230591 call . aView c"rank")))
    {
      (230646 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - domain ranks must match: bView.rank = "(230620 call _cast string[26](230616 call . bView c"rank")) ", aView.rank = "(230644 call _cast string[26](230640 call . aView c"rank")))
    }
    { scopeless
      unknown rank[230658] "param"(230655 call . aView c"rank")
      (230661 'end of statement')
    }
    { scopeless
      const b[230666] "const"(230665 call chpl__tuplify ind)
      (230669 'end of statement')
    }
    if(230760 call _cond_test(230675 call !=(230671 call . b c"size") rank))
    {
      { scopeless
        unknown plural[230705] "param"(230702 IfExpr (230682 call ==(230678 call . b c"size") 1) then
        { scopeless
          " element"
        } else
        { scopeless
          " elements"
        } )
        (230708 'end of statement')
      }
      (230758 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - expecting index with "(230731 call _cast string[26] rank) " elements, got "(230755 call _cast string[26](230751 call . b c"size")) plural)
    }
    unknown idxType[230768] "type variable"(230765 call . aView c"idxType")
    { scopeless
      const AD[230777] "const"(230776 call(230772 call . aView c"dims"))
      (230780 'end of statement')
    }
    { scopeless
      const BD[230787] "const"(230786 call(230782 call . bView c"dims"))
      (230790 'end of statement')
    }
    { scopeless
      unknown result[230795](230793 call * rank idxType)
      (230798 'end of statement')
    }
    {
      unknown i[230865] 0
      unknown tmp[230866] "maybe param" "temp"
      (230878 'move' tmp[230866](230876 call chpl_compute_low_param_loop_bound 0(230802 call - rank 1)))
      unknown tmp[230867] "maybe param" "temp"
      (230888 'move' tmp[230867](230886 call chpl_compute_high_param_loop_bound 0(230883 call - rank 1)))
      unknown tmp[230868] "maybe param" "temp"
      (230891 'move' tmp[230868] 1)
      ParamForLoop[230893]
      { i[230865] tmp[230866] tmp[230867] tmp[230868]
        {
          { scopeless
            const ar[230810] "const"(230809 call AD i)
            const br[230817] "const"(230816 call BD i)
            (230820 'end of statement')
          }
          if(230837 call _cond_test boundsChecking)
          {
            { scopeless
              (230835 call assert(230833 call(230825 call . br c"contains")(230831 call b i)))
            }
          }
          (230862 call =(230845 call result i)(230861 call(230847 call . ar c"orderToIndex")(230859 call(230851 call . br c"indexOrder")(230857 call b i))))
        }
      }
      label _unused_continueLabel[230870]
      label _breakLabel[230869]
    }
    (230903 return result)
  }
}