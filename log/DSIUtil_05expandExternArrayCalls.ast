AST dump for DSIUtil after pass expandExternArrayCalls.
Module use list: 

{
  (353008 'use' ChapelStandard)
  function getDataParTasksPerLocale[225956]() : _unknown[51] "inline"
  {
    (225959 return dataParTasksPerLocale)
  }
  function getDataParIgnoreRunningTasks[225966]() : _unknown[51] "inline"
  {
    (225969 return dataParIgnoreRunningTasks)
  }
  function getDataParMinGranularity[225976]() : _unknown[51] "inline"
  {
    (225979 return dataParMinGranularity)
  }
  function createTuple[225988](param arg rank[225986]:_any[178](?), arg t[225990]:_any[178](?), arg val[225992]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown tup[225998](225996 call * rank t)
      (226001 'end of statement')
    }
    {
      unknown i[226018] 0
      unknown tmp[226019] "maybe param" "temp"
      (226031 'move' tmp[226019](226029 call chpl_compute_low_param_loop_bound 0(226006 call - rank 1)))
      unknown tmp[226020] "maybe param" "temp"
      (226041 'move' tmp[226020](226039 call chpl_compute_high_param_loop_bound 0(226036 call - rank 1)))
      unknown tmp[226021] "maybe param" "temp"
      (226044 'move' tmp[226021] 1)
      ParamForLoop[226046]
      { i[226018] tmp[226019] tmp[226020] tmp[226021]
        { scopeless
          (226015 call =(226013 call tup i) val)
        }
      }
      label _unused_continueLabel[226023]
      label _breakLabel[226022]
    }
    (226056 return tup)
  }
  function _computeChunkStuff[226064](arg maxTasks[226062]:_any[178](?), arg ignoreRunning[226066]:_any[178](?), arg minSize[226068]:_any[178](?), arg ranges[226070]:_any[178](?), param arg adjustToOneDim[226073] =
  1) : _unknown[51]
  {
    { scopeless
      unknown rank[226085] "param"(226082 call . ranges c"size")
      (226088 'end of statement')
    }
    unknown EC[226091] "type variable" uint[115]
    { scopeless
      unknown numElems[226098](226096 call _cast EC 1)
      (226101 'end of statement')
    }
    {
      unknown i[226124] 0
      unknown tmp[226125] "maybe param" "temp"
      (226137 'move' tmp[226125](226135 call chpl_compute_low_param_loop_bound 0(226105 call - rank 1)))
      unknown tmp[226126] "maybe param" "temp"
      (226147 'move' tmp[226126](226145 call chpl_compute_high_param_loop_bound 0(226142 call - rank 1)))
      unknown tmp[226127] "maybe param" "temp"
      (226150 'move' tmp[226127] 1)
      ParamForLoop[226152]
      { i[226124] tmp[226125] tmp[226126] tmp[226127]
        {
          (226120 call *= numElems(226118 call _cast EC(226114 call .(226113 call ranges i) c"size")))
        }
      }
      label _unused_continueLabel[226129]
      label _breakLabel[226128]
    }
    { scopeless
      unknown numChunks[226168](226167 call _computeNumChunks maxTasks ignoreRunning minSize numElems)
      (226171 'end of statement')
    }
    if(226185 call _cond_test(226174 call == numChunks 0))
    {
      { scopeless
        (226183 return(226181 call _build_tuple 0(226178 call - 1)))
      }
    }
    (226196 call assert(226193 call > numChunks 0))
    { scopeless
      unknown parDim[226201](226199 call - 1)
      (226204 'end of statement')
    }
    { scopeless
      unknown maxDim[226208](226206 call - 1)
      (226211 'end of statement')
    }
    { scopeless
      unknown maxElems[226216](226215 call min EC)
      (226219 'end of statement')
    }
    {
      unknown _indexOfInterest[226282] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[226283] "expr temp" "temp"
      (226292 'move' _iterator[226283](226290 call _getIterator(226300 call chpl_direct_range_iter 0(226297 call - rank 1) 1)))
      Defer
      {
        {
          (226316 call _freeIterator _iterator[226283])
        }
      }
      { scopeless type
        (226305 'move' _indexOfInterest[226282](226302 call iteratorIndex _iterator[226283]))
      }
      ForLoop[226284]
      {
        unknown i[226309] "index var" "insert auto destroy"
        (226311 'move' i[226309] _indexOfInterest[226282])
        {
          { scopeless
            const curElems[226238] "const"(226236 call _cast EC(226232 call .(226231 call ranges i) c"size"))
            (226241 'end of statement')
          }
          if(226259 call _cond_test(226248 call >= curElems(226246 call _cast EC numChunks)))
          {
            (226252 call = parDim i)
            break nil[44]
          }
          if(226278 call _cond_test(226265 call > curElems maxElems))
          {
            (226269 call = maxElems curElems)
            (226275 call = maxDim i)
          }
        }
        label _continueLabel[226287]
        _indexOfInterest[226282]
        _iterator[226283]
      }
      label _breakLabel[226288]
    }
    if(226358 call _cond_test(226327 call == parDim(226325 call - 1)))
    {
      (226331 call = parDim maxDim)
      if(226353 call _cond_test(226343 call && adjustToOneDim(226341 call < maxElems(226339 call _cast EC numChunks))))
      {
        { scopeless
          (226350 call = numChunks(226348 call _cast int[13] maxElems))
        }
      }
    }
    (226367 return(226365 call _build_tuple numChunks parDim))
  }
  { scopeless type
    (226079 call _build_tuple int[13] int[13])
  }
  function _computeNumChunks[226376](arg maxTasks[226374]:_any[178](?), arg ignoreRunning[226378]:_any[178](?), arg minSize[226380]:_any[178](?), arg numElems[226382]:_any[178](?)) : _unknown[51]
  {
    if(226392 call _cond_test(226387 call <= numElems 0))
    {
      { scopeless
        (226390 return 0)
      }
    }
    unknown EC[226399] "type variable" uint[115]
    { scopeless
      const unumElems[226406] "const"(226404 call _cast EC numElems)
      (226409 'end of statement')
    }
    { scopeless
      unknown numChunks[226414](226412 call _cast int[13] maxTasks)
      (226417 'end of statement')
    }
    if(226454 call _cond_test(226419 call ! ignoreRunning))
    {
      { scopeless
        const otherTasks[226430] "const"(226428 call -(226426 call(226422 call . here c"runningTasks")) 1)
        (226433 'end of statement')
      }
      (226451 call = numChunks(226448 IfExpr (226438 call < otherTasks maxTasks) then
      { scopeless
        (226445 call _cast int[13](226442 call - maxTasks otherTasks))
      } else
      { scopeless
        1
      } ))
    }
    if(226535 call _cond_test(226460 call > minSize 0))
    {
      unknown tmp[226484] "temp"
      (226532 'move' tmp[226484](226515 call _cond_test(226517 call &&(226519 call < unumElems(226522 call _cast EC(226525 call * minSize numChunks)))(226529 call > numChunks 1))))
      WhileDo[226489]
      {
        {
          (226480 call -= numChunks 1)
        }
        label _continueLabel[226487]
        (226510 'move' tmp[226484](226493 call _cond_test(226495 call &&(226497 call < unumElems(226500 call _cast EC(226503 call * minSize numChunks)))(226507 call > numChunks 1))))
        tmp[226484]
      }
      label _breakLabel[226488]
    }
    if(226554 call _cond_test(226544 call >(226541 call _cast EC numChunks) unumElems))
    {
      { scopeless
        (226551 call = numChunks(226549 call _cast int[13] unumElems))
      }
    }
    (226560 return numChunks)
  }
  { scopeless type
    int[13]
  }
  function _computeNumChunks[226569](arg numElems[226567]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown numTasks[226584](226581 IfExpr (226574 call == dataParTasksPerLocale 0) then
      { scopeless
        (226577 call . here c"maxTaskPar")
      } else
      { scopeless
        dataParTasksPerLocale
      } )
      (226587 'end of statement')
    }
    { scopeless
      unknown ignoreRunning[226590] dataParIgnoreRunningTasks
      (226593 'end of statement')
    }
    { scopeless
      unknown minIndicesPerTask[226595] dataParMinGranularity
      (226598 'end of statement')
    }
    { scopeless
      unknown numChunks[226606](226605 call _computeNumChunks numTasks ignoreRunning minIndicesPerTask numElems)
      (226609 'end of statement')
    }
    (226611 return numChunks)
  }
  { scopeless type
    int[13]
  }
  function _computeChunkStartEnd[226620](arg nElems[226618]:_any[178](?), arg nChunks[226622]:_any[178](?), arg myCnk[226624]:_any[178](?)) : _unknown[51]
  {
    unknown IT[226641] "type variable"(226638 IfExpr (226634 call ==(226632 'typeof' nElems) uint[115]) then
    { scopeless
      uint[115]
    } else
    { scopeless
      int[13]
    } )
    { scopeless
      const tmp[226667] "const" "temp"(226665 call _build_tuple(226654 call _cast IT nElems)(226658 call _cast IT nChunks)(226663 call _cast IT myCnk))
      (226677 call _check_tuple_var_decl tmp[226667] 3)
      const numElems[226645] "const"(226668 call tmp[226667] 0)
      const numChunks[226647] "const"(226671 call tmp[226667] 1)
      const myChunk[226649] "const"(226674 call tmp[226667] 2)
      (226682 'end of statement')
    }
    unknown RT[226685] "type variable"(226684 'typeof' nElems)
    { scopeless
      unknown div[226692](226690 call / numElems numChunks)
      (226695 'end of statement')
    }
    { scopeless
      unknown rem[226700](226698 call % numElems numChunks)
      (226703 'end of statement')
    }
    (226716 call assert(226713 call &&(226707 call <= 1 myChunk)(226711 call <= myChunk numChunks)))
    if(226787 call _cond_test(226720 call <= myChunk rem))
    {
      { scopeless
        unknown endIx[226729](226727 call * myChunk(226725 call + div 1))
        (226732 'end of statement')
      }
      (226748 return(226746 call _build_tuple(226739 call _cast RT(226736 call - endIx div))(226743 call _cast RT endIx)))
    }
    {
      { scopeless
        unknown startIx1[226763](226761 call - numElems(226759 call *(226756 call +(226753 call - numChunks myChunk) 1) div))
        (226766 'end of statement')
      }
      (226785 return(226783 call _build_tuple(226773 call _cast RT(226770 call + startIx1 1))(226780 call _cast RT(226777 call + startIx1 div))))
    }
  }
  { scopeless type
    (226629 call * 2(226628 'typeof' nElems))
  }
  function intCeilXDivByY[226798](arg x[226796]:_any[178](?), arg y[226800]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      (226812 return(226810 call + 1(226808 call /(226805 call - x 1) y)))
    }
  }
  function _computeBlock[226821](arg numelems[226819]:_any[178](?), arg numblocks[226823]:_any[178](?), arg blocknum[226825]:_any[178](?), arg wayhi[226827]:_any[178](?), arg waylo[226834] =
  (226832 call _cast(226831 'typeof' wayhi) 0), arg lo[226842] =
  (226840 call _cast(226839 'typeof' wayhi) 0)) : _unknown[51]
  {
    if(226864 call _cond_test(226847 call == numelems 0))
    {
      { scopeless
        (226862 return(226860 call _build_tuple(226852 call _cast(226851 'typeof' lo) 1)(226857 call _cast(226856 'typeof' lo) 0)))
      }
    }
    { scopeless
      const blo[226902] "const"(226899 IfExpr (226872 call == blocknum 0) then
      { scopeless
        waylo
      } else
      { scopeless
        (226897 call + lo(226895 call _cast(226894 'typeof' lo)(226892 call intCeilXDivByY(226885 call *(226879 call _cast uint[115] numelems)(226883 call _cast uint[115] blocknum))(226890 call _cast uint[115] numblocks))))
      } )
      (226905 'end of statement')
    }
    { scopeless
      const bhi[226947] "const"(226944 IfExpr (226911 call == blocknum(226909 call - numblocks 1)) then
      { scopeless
        wayhi
      } else
      { scopeless
        (226942 call -(226939 call + lo(226937 call _cast(226936 'typeof' lo)(226934 call intCeilXDivByY(226927 call *(226918 call _cast uint[115] numelems)(226925 call _cast uint[115](226922 call + blocknum 1)))(226932 call _cast uint[115] numblocks)))) 1)
      } )
      (226950 'end of statement')
    }
    (226956 return(226954 call _build_tuple blo bhi))
  }
  function _factor[226966](param arg rank[226963] :
  int[13], arg value[226968]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown factors[226974](226972 call * rank int[13])
      (226977 'end of statement')
    }
    {
      unknown i[226994] 0
      unknown tmp[226995] "maybe param" "temp"
      (227007 'move' tmp[226995](227005 call chpl_compute_low_param_loop_bound 0(226982 call - rank 1)))
      unknown tmp[226996] "maybe param" "temp"
      (227017 'move' tmp[226996](227015 call chpl_compute_high_param_loop_bound 0(227012 call - rank 1)))
      unknown tmp[226997] "maybe param" "temp"
      (227020 'move' tmp[226997] 1)
      ParamForLoop[227022]
      { i[226994] tmp[226995] tmp[226996] tmp[226997]
        { scopeless
          (226991 call =(226989 call factors i) 1)
        }
      }
      label _unused_continueLabel[226999]
      label _breakLabel[226998]
    }
    if(227228 call _cond_test(227033 call >= value 1))
    {
      { scopeless
        unknown iv[227036] value
        (227039 'end of statement')
      }
      { scopeless
        unknown factor[227042] 1
        (227045 'end of statement')
      }
      {
        unknown tmp[227201] "temp"
        (227225 'move' tmp[227201](227220 call _cond_test(227222 call > iv 1)))
        WhileDo[227206]
        {
          {
            {
              unknown _indexOfInterest[227162] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[227163] "expr temp" "temp"
              (227172 'move' _iterator[227163](227170 call _getIterator(227177 call chpl_direct_range_iter 2 iv 1)))
              Defer
              {
                {
                  (227193 call _freeIterator _iterator[227163])
                }
              }
              { scopeless type
                (227182 'move' _indexOfInterest[227162](227179 call iteratorIndex _iterator[227163]))
              }
              ForLoop[227164]
              {
                unknown i[227186] "index var" "insert auto destroy"
                (227188 'move' i[227186] _indexOfInterest[227162])
                {
                  if(227157 call _cond_test(227060 call ==(227057 call % iv i) 0))
                  {
                    { scopeless
                      unknown j[227063] 0
                      (227066 'end of statement')
                    }
                    {
                      unknown _indexOfInterest[227097] "an _indexOfInterest or chpl__followIdx variable" "temp"
                      unknown _iterator[227098] "expr temp" "temp"
                      (227107 'move' _iterator[227098](227105 call _getIterator(227115 call chpl_direct_range_iter 1(227112 call - rank 1) 1)))
                      Defer
                      {
                        {
                          (227131 call _freeIterator _iterator[227098])
                        }
                      }
                      { scopeless type
                        (227120 'move' _indexOfInterest[227097](227117 call iteratorIndex _iterator[227098]))
                      }
                      ForLoop[227099]
                      {
                        unknown i[227124] "index var" "insert auto destroy"
                        (227126 'move' i[227124] _indexOfInterest[227097])
                        {
                          if(227091 call _cond_test(227084 call <(227079 call factors i)(227083 call factors j)))
                          {
                            { scopeless
                              (227088 call = j i)
                            }
                          }
                        }
                        label _continueLabel[227102]
                        _indexOfInterest[227097]
                        _iterator[227098]
                      }
                      label _breakLabel[227103]
                    }
                    (227143 call *=(227141 call factors j) i)
                    (227151 call = iv(227149 call / iv i))
                    break nil[44]
                  }
                }
                label _continueLabel[227167]
                _indexOfInterest[227162]
                _iterator[227163]
              }
              label _breakLabel[227168]
            }
          }
          label _continueLabel[227204]
          (227215 'move' tmp[227201](227210 call _cond_test(227212 call > iv 1)))
          tmp[227201]
        }
        label _breakLabel[227205]
      }
    }
    {
      unknown _indexOfInterest[227321] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[227322] "expr temp" "temp"
      (227331 'move' _iterator[227322](227329 call _getIterator(227339 call chpl_direct_range_iter 0(227336 call - rank 1) 1)))
      Defer
      {
        {
          (227355 call _freeIterator _iterator[227322])
        }
      }
      { scopeless type
        (227344 'move' _indexOfInterest[227321](227341 call iteratorIndex _iterator[227322]))
      }
      ForLoop[227323]
      {
        unknown i[227348] "index var" "insert auto destroy"
        (227350 'move' i[227348] _indexOfInterest[227321])
        {
          unknown _indexOfInterest[227277] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[227278] "expr temp" "temp"
          (227287 'move' _iterator[227278](227285 call _getIterator(227298 call chpl_direct_range_iter(227291 call + i 1)(227295 call - rank 1) 1)))
          Defer
          {
            {
              (227314 call _freeIterator _iterator[227278])
            }
          }
          { scopeless type
            (227303 'move' _indexOfInterest[227277](227300 call iteratorIndex _iterator[227278]))
          }
          ForLoop[227279]
          {
            unknown j[227307] "index var" "insert auto destroy"
            (227309 'move' j[227307] _indexOfInterest[227277])
            { scopeless
              if(227272 call _cond_test(227259 call <(227254 call factors i)(227258 call factors j)))
              {
                { scopeless
                  (227269 call <=>(227264 call factors i)(227268 call factors j))
                }
              }
            }
            label _continueLabel[227282]
            _indexOfInterest[227277]
            _iterator[227278]
          }
          label _breakLabel[227283]
        }
        label _continueLabel[227326]
        _indexOfInterest[227321]
        _iterator[227322]
      }
      label _breakLabel[227327]
    }
    (227363 return factors)
  }
  function computeZeroBasedDomain[227373](arg dom[227370] :
  _domain) : _unknown[51]
  {
    { scopeless
      (227388 return(227386 call chpl__buildDomainExpr(227384 'expand_tuple'(227383 call computeZeroBasedRanges(227381 call(227377 call . dom c"dims"))))))
    }
  }
  function computeZeroBasedRanges[227399](arg ranges[227396] :
  _tuple) : _unknown[51]
  {
    function helper[227405](arg idxType[227403]:_any[178](?), arg first[227407]:_any[178](?), arg rest[227410]:_any[178](?) ...) : _unknown[51]
    {
      if(227485 call _cond_test(227418 call >(227414 call . rest c"size") 1))
      {
        { scopeless
          (227445 return(227443 call _build_tuple(227433 call #(227424 call chpl_build_low_bounded_range(227422 call _cast idxType 0))(227431 call _cast idxType(227427 call . first c"size")))(227441 'expand_tuple'(227440 call helper idxType(227439 'expand_tuple' rest)))))
        }
      }
      {
        { scopeless
          (227483 return(227481 call _build_tuple(227460 call #(227451 call chpl_build_low_bounded_range(227449 call _cast idxType 0))(227458 call _cast idxType(227454 call . first c"size")))(227478 call #(227466 call chpl_build_low_bounded_range(227464 call _cast idxType 0))(227476 call _cast idxType(227472 call .(227471 call rest 0) c"size")))))
        }
      }
    }
    unknown idxType[227502] "type variable"(227499 call .(227498 call ranges 0) c"idxType")
    if(227542 call _cond_test(227510 call >(227506 call . ranges c"size") 1))
    {
      { scopeless
        (227518 return(227517 call helper idxType(227516 'expand_tuple' ranges)))
      }
    }
    {
      { scopeless
        (227540 return(227538 call _build_tuple(227536 call #(227524 call chpl_build_low_bounded_range(227522 call _cast idxType 0))(227534 call _cast idxType(227530 call .(227529 call ranges 0) c"size")))))
      }
    }
  }
  function densify[227556](arg sub[227553] :
  _domain, arg whole[227559] :
  _domain, arg userErrors[227563] =
  1) : _unknown[51]
  {
    unknown argtypes[227585] "type variable"(227584 'typeof'(227582 call _build_tuple sub whole))
    (227602 call _densiCheck(227598 call ==(227591 call . sub c"rank")(227595 call . whole c"rank")) argtypes)
    (227615 call _densiIdxCheck(227606 call . sub c"idxType")(227611 call . whole c"idxType") argtypes)
    (227637 return(227635 call chpl__buildDomainExpr(227633 'expand_tuple'(227632 call densify(227623 call(227619 call . sub c"dims"))(227630 call(227626 call . whole c"dims")) userErrors))))
  }
  { scopeless type
    (227577 call chpl__buildDomainRuntimeType defaultDist(227567 call . whole c"rank")(227572 call . whole c"idxType") 1)
  }
  function densify[227646](arg subs[227644]:_any[178](?), arg wholes[227648]:_any[178](?), arg userErrors[227651] =
  1) : _unknown[51]
  {
    unknown argtypes[227670] "type variable"(227669 'typeof'(227667 call _build_tuple subs wholes))
    (227687 call _densiCheck(227683 call ==(227676 call . wholes c"size")(227680 call . subs c"size")) argtypes)
    (227699 call _densiCheck(227696 call isRange(227694 call subs 0)) argtypes)
    (227711 call _densiCheck(227708 call isRange(227706 call wholes 0)) argtypes)
    (227719 call _densiEnsureBounded(227717 call subs 0))
    (227738 call _densiIdxCheck(227726 call .(227725 call subs 0) c"idxType")(227734 call .(227733 call wholes 0) c"idxType") argtypes)
    { scopeless
      unknown rank[227744] "param"(227741 call . wholes c"size")
      (227747 'end of statement')
    }
    unknown IT[227755] "type variable"(227752 call .(227751 call wholes 0) c"idxType")
    { scopeless
      unknown result[227770](227768 call * rank(227767 call range IT(227763 call . BoundedRangeType c"bounded") 1))
      (227773 'end of statement')
    }
    {
      unknown d[227865] 0
      unknown tmp[227866] "maybe param" "temp"
      (227878 'move' tmp[227866](227876 call chpl_compute_low_param_loop_bound 0(227777 call - rank 1)))
      unknown tmp[227867] "maybe param" "temp"
      (227888 'move' tmp[227867](227886 call chpl_compute_high_param_loop_bound 0(227883 call - rank 1)))
      unknown tmp[227868] "maybe param" "temp"
      (227891 'move' tmp[227868] 1)
      ParamForLoop[227893]
      { d[227865] tmp[227866] tmp[227867] tmp[227868]
        {
          (227791 call _densiCheck(227788 call isRange(227786 call subs d)) argtypes)
          (227804 call _densiCheck(227801 call isRange(227799 call wholes d)) argtypes)
          (227817 call _densiIdxCheck(227811 call .(227810 call wholes d) c"idxType") IT argtypes)
          (227825 call _densiEnsureBounded(227823 call subs d))
          (227844 call _densiIdxCheck(227832 call .(227831 call subs d) c"idxType")(227840 call .(227839 call wholes d) c"idxType") argtypes)
          (227862 call =(227849 call result d)(227861 call densify(227854 call subs d)(227859 call wholes d) userErrors))
        }
      }
      label _unused_continueLabel[227870]
      label _breakLabel[227869]
    }
    (227903 return result)
  }
  where {
    (227662 call &&(227657 call isTuple subs)(227661 call isTuple wholes))
  }
  function densify[227920](arg s[227917] :
  (227916 call range ?[260](boundedType = unknown B[227913])), arg w[227930] :
  (227929 call range unknown IT[227923] ?[260](stridable = 1)), arg userErrors[227934] =
  1) : _unknown[51]
  {
    (227946 call _densiEnsureBounded s)
    (227962 call _densiIdxCheck(227951 call . s c"idxType") IT(227961 'typeof'(227959 call _build_tuple s w)))
    function ensure[227968](arg cond[227966]:_any[178](?), arg args[227971]:_any[178](?) ...) : _unknown[51]
    {
      if(227997 call _cond_test userErrors)
      {
        if(227984 call _cond_test(227976 call ! cond))
        {
          { scopeless
            (227982 call halt(227980 'expand_tuple' args))
          }
        }
      }
      {
        { scopeless
          (227995 call assert cond(227994 'expand_tuple' args))
        }
      }
    }
    if(228321 call _cond_test(228010 call ==(228006 call . s c"size") 0))
    {
      (228022 return(228020 call chpl_build_bounded_range(228014 call _cast IT 1)(228018 call _cast IT 0)))
    }
    {
      (228087 call ensure(228031 call >(228027 call . w c"size") 0) "densify(s=" s ", w=" w "): w is empty while s is not")
      { scopeless
        unknown low[228101](228100 call(228092 call . w c"indexOrder")(228096 call . s c"first")) IT
        (228104 'end of statement')
      }
      (228132 call ensure(228108 call >= low 0) "densify(s=" s ", w=" w "): s.first is not in w")
      if(228317 call _cond_test(228139 call ==(228135 call . s c"size") 1))
      {
        (228145 return(228143 call chpl_build_bounded_range low low))
      }
      {
        { scopeless
          unknown high[228159](228158 call(228150 call . w c"indexOrder")(228154 call . s c"last")) IT
          (228162 'end of statement')
        }
        (228191 call ensure(228167 call >= high 0) "densify(s=" s ", w=" w "): s.last is not in w")
        (228229 call ensure(228205 call ==(228202 call %(228195 call . s c"stride")(228199 call . w c"stride")) 0) "densify(s=" s ", w=" w "): s.stride is not a multiple of w.stride")
        { scopeless
          const stride[228241] "const"(228239 call /(228232 call . s c"stride")(228236 call . w c"stride"))
          (228244 'end of statement')
        }
        if(228254 call _cond_test(228247 call < stride 0))
        {
          { scopeless
            (228251 call <=> low high)
          }
        }
        (228306 call assert(228262 call <= low high) "densify(s=" s ", w=" w "): got low (" low ") larger than high (" high ")")
        (228315 return(228313 call chpl_by(228310 call chpl_build_bounded_range low high) stride))
      }
    }
  }
  { scopeless type
    (227942 call range IT B 1)
  }
  function densify[228343](arg sArg[228340] :
  (228339 call range ?[260](boundedType = unknown B[228333])(stridable = unknown S[228336])), arg w[228353] :
  (228352 call range unknown IT[228346] ?[260](stridable = 0)), arg userErrors[228357] =
  1) : _unknown[51]
  {
    (228369 call _densiEnsureBounded sArg)
    (228385 call _densiIdxCheck(228374 call . sArg c"idxType") IT(228384 'typeof'(228382 call _build_tuple sArg w)))
    { scopeless
      const s[228396] "const"(228394 call _cast(228393 call range IT B S) sArg)
      (228399 'end of statement')
    }
    function ensure[228404](arg cond[228402]:_any[178](?)) : _unknown[51]
    {
      if(228425 call _cond_test userErrors)
      {
        if(228414 call _cond_test(228408 call ! cond))
        {
          { scopeless
            (228412 call halt)
          }
        }
      }
      {
        { scopeless
          (228423 call assert cond)
        }
      }
    }
    (228464 call ensure(228461 call ||(228439 call(228435 call . s c"isEmpty"))(228459 call <=(228441 call . w c"low")(228456 IfExpr (228447 call isIntType IT) then
    { scopeless
      (228449 call . s c"alignedLow")
    } else
    { scopeless
      (228453 call . s c"low")
    } ))))
    (228496 call ensure(228493 call ||(228481 call ||(228472 call(228468 call . s c"isEmpty"))(228479 call !(228478 call(228474 call . w c"hasHighBound"))))(228491 call <=(228484 call . s c"alignedHigh")(228488 call . w c"high"))))
    if(228522 call _cond_test(228508 call &&(228501 call isUintType IT)(228507 call(228503 call . s c"isEmpty"))))
    {
      { scopeless
        (228520 return(228518 call chpl_build_bounded_range(228512 call _cast IT 1)(228516 call _cast IT 0)))
      }
    }
    (228542 return(228540 call _cast(228539 call range IT B S)(228532 call - s(228529 call . w c"low"))))
  }
  { scopeless type
    (228365 call range IT B S)
  }
  function _densiEnsureBounded[228551](arg arg[228549]:_any[178](?)) : _unknown[51]
  {
    if(228581 call _cond_test(228557 call !(228556 call isBoundedRange arg)))
    {
      { scopeless
        (228579 call compilerError "densify() currently requires that sub-ranges be bounded" 2)
      }
    }
  }
  function _densiIdxCheck[228593](arg subIdxType[228591]:_any[178](?), arg wholeIdxType[228595]:_any[178](?), arg argtypes[228597]:_any[178](?)) : _unknown[51]
  {
    (228609 call _densiCheck(228604 call chpl__legalIntCoerce subIdxType wholeIdxType) argtypes(errlevel = 3))
  }
  function _densiCheck[228618](param arg cond[228616]:_any[178](?), arg argtypes[228620]:_any[178](?), param arg errlevel[228623] =
  2) : _unknown[51]
  {
    if(228657 call _cond_test(228627 call ! cond))
    {
      { scopeless
        (228655 call compilerError "densify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges (except stridability and range b(228652 call _cast string[26] argtypes) errlevel)
      }
    }
  }
  function unDensify[228671](arg dense[228668] :
  _domain, arg whole[228674] :
  _domain, arg userErrors[228678] =
  1) : _unknown[51]
  {
    unknown argtypes[228700] "type variable"(228699 'typeof'(228697 call _build_tuple dense whole))
    (228717 call _undensCheck(228713 call ==(228706 call . dense c"rank")(228710 call . whole c"rank")) argtypes)
    (228739 return(228737 call chpl__buildDomainExpr(228735 'expand_tuple'(228734 call unDensify(228725 call(228721 call . dense c"dims"))(228732 call(228728 call . whole c"dims")) userErrors))))
  }
  { scopeless type
    (228692 call chpl__buildDomainRuntimeType defaultDist(228682 call . whole c"rank")(228687 call . whole c"idxType") 1)
  }
  function unDensify[228748](arg denses[228746]:_any[178](?), arg wholes[228750]:_any[178](?), arg userErrors[228753] =
  1) : _unknown[51]
  {
    unknown argtypes[228772] "type variable"(228771 'typeof'(228769 call _build_tuple denses wholes))
    (228789 call _undensCheck(228785 call ==(228778 call . wholes c"size")(228782 call . denses c"size")) argtypes)
    (228801 call _undensCheck(228798 call isRange(228796 call denses 0)) argtypes)
    (228813 call _undensCheck(228810 call isRange(228808 call wholes 0)) argtypes)
    (228821 call _undensEnsureBounded(228819 call denses 0))
    { scopeless
      unknown rank[228827] "param"(228824 call . wholes c"size")
      (228830 'end of statement')
    }
    unknown IT[228838] "type variable"(228835 call .(228834 call wholes 0) c"idxType")
    { scopeless
      unknown result[228853](228851 call * rank(228850 call range IT(228846 call . BoundedRangeType c"bounded") 1))
      (228856 'end of statement')
    }
    {
      unknown d[228931] 0
      unknown tmp[228932] "maybe param" "temp"
      (228944 'move' tmp[228932](228942 call chpl_compute_low_param_loop_bound 0(228860 call - rank 1)))
      unknown tmp[228933] "maybe param" "temp"
      (228954 'move' tmp[228933](228952 call chpl_compute_high_param_loop_bound 0(228949 call - rank 1)))
      unknown tmp[228934] "maybe param" "temp"
      (228957 'move' tmp[228934] 1)
      ParamForLoop[228959]
      { d[228931] tmp[228932] tmp[228933] tmp[228934]
        {
          (228874 call _undensCheck(228871 call isRange(228869 call denses d)) argtypes)
          (228887 call _undensCheck(228884 call isRange(228882 call wholes d)) argtypes)
          (228903 call _undensCheck(228900 call chpl__legalIntCoerce(228895 call .(228894 call wholes d) c"idxType") IT) argtypes)
          (228911 call _undensEnsureBounded(228909 call denses d))
          (228928 call =(228916 call result d)(228927 call unDensify(228921 call denses d)(228926 call wholes d)))
        }
      }
      label _unused_continueLabel[228936]
      label _breakLabel[228935]
    }
    (228969 return result)
  }
  where {
    (228764 call &&(228759 call isTuple denses)(228763 call isTuple wholes))
  }
  function unDensify[228986](arg dense[228983] :
  (228982 call range ?[260](boundedType = unknown B[228979])), arg whole[228996] :
  (228995 call range unknown IT[228989] ?[260](stridable = 1))) : _unknown[51]
  {
    (229008 call _undensEnsureBounded dense)
    if(229042 call _cond_test(229019 call ==(229012 call . whole c"boundedType")(229016 call . BoundedRangeType c"boundedNone")))
    {
      { scopeless
        (229040 call compilerError "unDensify(): the 'whole' argument must have at least one bound")
      }
    }
    if(229066 call _cond_test(229052 call ==(229048 call . dense c"size") 0))
    {
      { scopeless
        (229064 return(229062 call chpl_build_bounded_range(229056 call _cast IT 1)(229060 call _cast IT 0)))
      }
    }
    if(229100 call _cond_test(229077 call !(229076 call(229072 call . whole c"hasFirst"))))
    {
      { scopeless
        (229098 call halt "unDensify() is invoked with the 'whole' range that has no first index")
      }
    }
    { scopeless
      unknown low[229116](229115 call(229107 call . whole c"orderToIndex")(229111 call . dense c"first")) IT
      (229119 'end of statement')
    }
    { scopeless
      const stride[229130] "const"(229128 call *(229121 call . whole c"stride")(229125 call . dense c"stride"))
      (229133 'end of statement')
    }
    { scopeless
      unknown high[229147](229146 call chpl__addRangeStrides low stride(229144 call -(229140 call . dense c"size") 1)) IT
      (229150 'end of statement')
    }
    (229166 call assert(229163 call == high(229162 call(229154 call . whole c"orderToIndex")(229158 call . dense c"last"))))
    if(229177 call _cond_test(229170 call < stride 0))
    {
      { scopeless
        (229174 call <=> low high)
      }
    }
    (229229 call assert(229185 call <= low high) "unDensify(dense=" dense ", whole=" whole "): got low (" low ") larger than high (" high ")")
    (229238 return(229236 call chpl_by(229233 call chpl_build_bounded_range low high) stride))
  }
  { scopeless type
    (229004 call range IT B 1)
  }
  function unDensify[229258](arg dense[229255] :
  (229254 call range ?[260](boundedType = unknown B[229248])(stridable = unknown S[229251])), arg whole[229268] :
  (229267 call range unknown IT[229261] ?[260](stridable = 0))) : _unknown[51]
  {
    if(229306 call _cond_test(229283 call !(229282 call(229278 call . whole c"hasLowBound"))))
    {
      { scopeless
        (229304 call compilerError "unDensify(): the 'whole' argument, when not stridable, must have a low bound")
      }
    }
    (229327 return(229325 call _cast(229324 call range IT B S)(229317 call + dense(229314 call . whole c"low"))))
  }
  { scopeless type
    (229276 call range IT B S)
  }
  function _undensEnsureBounded[229336](arg arg[229334]:_any[178](?)) : _unknown[51]
  {
    if(229366 call _cond_test(229342 call !(229341 call isBoundedRange arg)))
    {
      { scopeless
        (229364 call compilerError "unDensify() currently requires that the densified ranges be bounded" 2)
      }
    }
  }
  function _undensCheck[229378](param arg cond[229376]:_any[178](?), arg argtypes[229380]:_any[178](?), param arg errlevel[229383] =
  2) : _unknown[51]
  {
    if(229417 call _cond_test(229387 call ! cond))
    {
      { scopeless
        (229415 call compilerError "unDensify() is defined only on matching domains, ranges, and quasi-homogeneous tuples of ranges, but is invoked on "(229412 call _cast string[26] argtypes) errlevel)
      }
    }
  }
  function setupTargetLocalesArray[229429](ref arg targetLocDom[229427]:_any[178](?), arg targetLocArr[229431]:_any[178](?), arg specifiedLocArr[229433]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown rank[229439] "param"(229436 call . targetLocDom c"rank")
      (229442 'end of statement')
    }
    if(229681 call _cond_test(229455 call &&(229446 call != rank 1)(229453 call ==(229449 call . specifiedLocArr c"rank") 1)))
    {
      { scopeless
        const factors[229465] "const"(229464 call _factor rank(229461 call . specifiedLocArr c"size"))
        (229468 'end of statement')
      }
      { scopeless
        unknown ranges[229474](229472 call * rank range)
        (229477 'end of statement')
      }
      {
        unknown i[229501] 0
        unknown tmp[229502] "maybe param" "temp"
        (229514 'move' tmp[229502](229512 call chpl_compute_low_param_loop_bound 0(229481 call - rank 1)))
        unknown tmp[229503] "maybe param" "temp"
        (229524 'move' tmp[229503](229522 call chpl_compute_high_param_loop_bound 0(229519 call - rank 1)))
        unknown tmp[229504] "maybe param" "temp"
        (229527 'move' tmp[229504] 1)
        ParamForLoop[229529]
        { i[229501] tmp[229502] tmp[229503] tmp[229504]
          { scopeless
            (229498 call =(229488 call ranges i)(229496 call #(229490 call chpl_build_low_bounded_range 0)(229495 call factors i)))
          }
        }
        label _unused_continueLabel[229506]
        label _breakLabel[229505]
      }
      (229544 call = targetLocDom(229542 call chpl__buildDomainExpr(229540 'expand_tuple' ranges)))
      (229553 call = targetLocArr(229552 call reshape specifiedLocArr targetLocDom))
    }
    {
      if(229584 call _cond_test(229561 call !=(229557 call . specifiedLocArr c"rank") rank))
      {
        { scopeless
          (229582 call compilerError "specified target array of locales must equal 1 or distribution rank")
        }
      }
      { scopeless
        unknown ranges[229594](229592 call * rank range)
        (229597 'end of statement')
      }
      {
        unknown i[229630] 0
        unknown tmp[229631] "maybe param" "temp"
        (229643 'move' tmp[229631](229641 call chpl_compute_low_param_loop_bound 0(229601 call - rank 1)))
        unknown tmp[229632] "maybe param" "temp"
        (229653 'move' tmp[229632](229651 call chpl_compute_high_param_loop_bound 0(229648 call - rank 1)))
        unknown tmp[229633] "maybe param" "temp"
        (229656 'move' tmp[229633] 1)
        ParamForLoop[229658]
        { i[229630] tmp[229631] tmp[229632] tmp[229633]
          { scopeless
            (229627 call =(229608 call ranges i)(229625 call #(229610 call chpl_build_low_bounded_range 0)(229622 call .(229621 call(229616 call .(229613 call . specifiedLocArr c"_dom") c"dim") i) c"size")))
          }
        }
        label _unused_continueLabel[229635]
        label _breakLabel[229634]
      }
      (229673 call = targetLocDom(229671 call chpl__buildDomainExpr(229669 'expand_tuple' ranges)))
      (229678 call = targetLocArr specifiedLocArr)
    }
  }
  function setupTargetLocRanges[229691](param arg rank[229689]:_any[178](?), arg specifiedLocArr[229693]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown ranges[229699](229697 call * rank range)
      (229702 'end of statement')
    }
    if(229877 call _cond_test(229715 call &&(229706 call != rank 1)(229713 call ==(229709 call . specifiedLocArr c"rank") 1)))
    {
      { scopeless
        const factors[229725] "const"(229724 call _factor rank(229721 call . specifiedLocArr c"size"))
        (229728 'end of statement')
      }
      {
        unknown i[229753] 0
        unknown tmp[229754] "maybe param" "temp"
        (229766 'move' tmp[229754](229764 call chpl_compute_low_param_loop_bound 0(229733 call - rank 1)))
        unknown tmp[229755] "maybe param" "temp"
        (229776 'move' tmp[229755](229774 call chpl_compute_high_param_loop_bound 0(229771 call - rank 1)))
        unknown tmp[229756] "maybe param" "temp"
        (229779 'move' tmp[229756] 1)
        ParamForLoop[229781]
        { i[229753] tmp[229754] tmp[229755] tmp[229756]
          { scopeless
            (229750 call =(229740 call ranges i)(229748 call #(229742 call chpl_build_low_bounded_range 0)(229747 call factors i)))
          }
        }
        label _unused_continueLabel[229758]
        label _breakLabel[229757]
      }
    }
    {
      if(229802 call _cond_test(229795 call !=(229791 call . specifiedLocArr c"rank") rank))
      {
        { scopeless
          (229800 call compilerError "specified target array of locales must equal 1 or distribution rank")
        }
      }
      {
        unknown i[229840] 0
        unknown tmp[229841] "maybe param" "temp"
        (229853 'move' tmp[229841](229851 call chpl_compute_low_param_loop_bound 0(229811 call - rank 1)))
        unknown tmp[229842] "maybe param" "temp"
        (229863 'move' tmp[229842](229861 call chpl_compute_high_param_loop_bound 0(229858 call - rank 1)))
        unknown tmp[229843] "maybe param" "temp"
        (229866 'move' tmp[229843] 1)
        ParamForLoop[229868]
        { i[229840] tmp[229841] tmp[229842] tmp[229843]
          { scopeless
            (229837 call =(229818 call ranges i)(229835 call #(229820 call chpl_build_low_bounded_range 0)(229832 call .(229831 call(229826 call .(229823 call . specifiedLocArr c"_dom") c"dim") i) c"size")))
          }
        }
        label _unused_continueLabel[229845]
        label _breakLabel[229844]
      }
    }
    (229882 return ranges)
  }
  function createWholeDomainForInds[229890](param arg rank[229888]:_any[178](?), arg idxType[229892]:_any[178](?), param arg stridable[229894]:_any[178](?), arg inds[229896]:_any[178](?)) : _unknown[51]
  {
    if(229929 call _cond_test(229901 call isDomain inds))
    {
      (229903 return inds)
    }
    {
      { scopeless
        unknown result[229913](229911 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
        (229916 'end of statement')
      }
      (229924 call(229919 call . result c"setIndices") inds)
      (229927 return result)
    }
  }
  function bulkCommComputeActiveDims[229940](arg LeftDims[229938]:_any[178](?), arg RightDims[229942]:_any[178](?)) : _unknown[51]
  {
    { scopeless
      unknown LeftRank[229948] "param"(229945 call . LeftDims c"size")
      (229951 'end of statement')
    }
    { scopeless
      unknown RightRank[229957] "param"(229954 call . RightDims c"size")
      (229960 'end of statement')
    }
    { scopeless
      unknown minRank[229966] "param"(229965 call min LeftRank RightRank)
      (229969 'end of statement')
    }
    { scopeless
      unknown inferredRank[229971] 0
      (229974 'end of statement')
    }
    { scopeless
      unknown LeftActives[229975](229980 call * minRank int[13])
      unknown RightActives[229982](229986 'typeof' LeftActives)
      (229987 'end of statement')
    }
    { scopeless
      unknown li[229989] 0
      unknown ri[229993] 0
      (229996 'end of statement')
    }
    function advance[229999]() : _unknown[51]
    {
      {
        unknown tmp[230034] "temp"
        (230100 'move' tmp[230034](230074 call _cond_test(230076 call &&(230078 call ==(230080 call .(230082 call LeftDims li) c"size") 1)(230087 call !=(230089 call .(230091 call LeftDims li) c"size")(230095 call .(230097 call RightDims ri) c"size")))))
        WhileDo[230039]
        {
          { scopeless
            (230031 call += li 1)
          }
          label _continueLabel[230037]
          (230069 'move' tmp[230034](230043 call _cond_test(230045 call &&(230047 call ==(230049 call .(230051 call LeftDims li) c"size") 1)(230056 call !=(230058 call .(230060 call LeftDims li) c"size")(230064 call .(230066 call RightDims ri) c"size")))))
          tmp[230034]
        }
        label _breakLabel[230038]
      }
      {
        unknown tmp[230137] "temp"
        (230203 'move' tmp[230137](230177 call _cond_test(230179 call &&(230181 call ==(230183 call .(230185 call RightDims ri) c"size") 1)(230190 call !=(230192 call .(230194 call RightDims ri) c"size")(230198 call .(230200 call LeftDims li) c"size")))))
        WhileDo[230142]
        {
          { scopeless
            (230134 call += ri 1)
          }
          label _continueLabel[230140]
          (230172 'move' tmp[230137](230146 call _cond_test(230148 call &&(230150 call ==(230152 call .(230154 call RightDims ri) c"size") 1)(230159 call !=(230161 call .(230163 call RightDims ri) c"size")(230167 call .(230169 call LeftDims li) c"size")))))
          tmp[230137]
        }
        label _breakLabel[230141]
      }
      (230224 call assert(230221 call ==(230211 call .(230210 call LeftDims li) c"size")(230218 call .(230217 call RightDims ri) c"size")))
    }
    {
      unknown tmp[230274] "temp"
      DoWhile[230295]
      {
        {
          (230230 call advance)
          (230238 call =(230236 call LeftActives inferredRank) li)
          (230246 call =(230244 call RightActives inferredRank) ri)
          (230251 call += inferredRank 1)
          (230256 call += li 1)
          (230261 call += ri 1)
          label _continueLabel[230277]
          (230293 'move' tmp[230274](230282 call _cond_test(230284 call &&(230286 call < li LeftRank)(230290 call < ri RightRank))))
        }
        tmp[230274]
      }
      label _breakLabel[230278]
    }
    (230305 return(230303 call _build_tuple LeftActives RightActives inferredRank))
  }
  function bulkCommTranslateDomain[230315](arg srcSlice[230312] :
  _domain, arg srcDom[230318] :
  _domain, arg targetDom[230322] :
  _domain) : _unknown[51]
  {
    if(230356 call _cond_test(230333 call !=(230326 call . srcSlice c"rank")(230330 call . srcDom c"rank")))
    {
      { scopeless
        (230354 call compilerError "bulkCommTranslateDomain: source slice and source domain must have identical rank")
      }
    }
    { scopeless
      const tmp[230384] "const" "temp"(230383 call bulkCommComputeActiveDims(230375 call(230371 call . srcDom c"dims"))(230382 call(230378 call . targetDom c"dims")))
      (230394 call _check_tuple_var_decl tmp[230384] 3)
      const SrcActives[230362] "const"(230385 call tmp[230384] 0)
      const TargetActives[230364] "const"(230388 call tmp[230384] 1)
      const inferredRank[230366] "const"(230391 call tmp[230384] 2)
      (230399 'end of statement')
    }
    { scopeless
      unknown needsStridable[230410] "param"(230408 call ||(230401 call . targetDom c"stridable")(230405 call . srcSlice c"stridable"))
      (230413 'end of statement')
    }
    { scopeless
      unknown rngs[230435](230434 call(230430 call . targetDom c"dims"))(230427 call *(230415 call . targetDom c"rank")(230426 call range(230420 call . targetDom c"idxType")(stridable = needsStridable)))
      (230438 'end of statement')
    }
    {
      unknown _indexOfInterest[230503] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[230504] "expr temp" "temp"
      (230513 'move' _iterator[230504](230511 call _getIterator(230521 call chpl_direct_range_iter 0(230518 call - inferredRank 1) 1)))
      Defer
      {
        {
          (230537 call _freeIterator _iterator[230504])
        }
      }
      { scopeless type
        (230526 'move' _indexOfInterest[230503](230523 call iteratorIndex _iterator[230504]))
      }
      ForLoop[230505]
      {
        unknown i[230530] "index var" "insert auto destroy"
        (230532 'move' i[230530] _indexOfInterest[230503])
        {
          { scopeless
            const SD[230451] "const"(230450 call SrcActives i)
            (230454 'end of statement')
          }
          { scopeless
            const TD[230460] "const"(230459 call TargetActives i)
            (230463 'end of statement')
          }
          { scopeless
            const dense[230481] "const"(230480 call densify(230471 call(230466 call . srcSlice c"dim") SD)(230479 call(230474 call . srcDom c"dim") SD))
            (230484 'end of statement')
          }
          (230500 call =(230488 call rngs TD)(230499 call unDensify dense(230498 call(230493 call . targetDom c"dim") TD)))
        }
        label _continueLabel[230508]
        _indexOfInterest[230503]
        _iterator[230504]
      }
      label _breakLabel[230509]
    }
    (230549 return(230547 call chpl__buildDomainExpr(230545 'expand_tuple' rngs)))
  }
  function bulkCommConvertCoordinate[230557](arg ind[230555]:_any[178](?), arg bView[230560] :
  _domain, arg aView[230564] :
  _domain) : _unknown[51]
  {
    if(230630 call _cond_test(230575 call !=(230568 call . bView c"rank")(230572 call . aView c"rank")))
    {
      (230627 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - domain ranks must match: bView.rank = "(230601 call _cast string[26](230597 call . bView c"rank")) ", aView.rank = "(230625 call _cast string[26](230621 call . aView c"rank")))
    }
    { scopeless
      unknown rank[230639] "param"(230636 call . aView c"rank")
      (230642 'end of statement')
    }
    { scopeless
      const b[230647] "const"(230646 call chpl__tuplify ind)
      (230650 'end of statement')
    }
    if(230741 call _cond_test(230656 call !=(230652 call . b c"size") rank))
    {
      { scopeless
        unknown plural[230686] "param"(230683 IfExpr (230663 call ==(230659 call . b c"size") 1) then
        { scopeless
          " element"
        } else
        { scopeless
          " elements"
        } )
        (230689 'end of statement')
      }
      (230739 call compilerError "Invalid arguments passed to bulkCommConvertCoordinate - expecting index with "(230712 call _cast string[26] rank) " elements, got "(230736 call _cast string[26](230732 call . b c"size")) plural)
    }
    unknown idxType[230749] "type variable"(230746 call . aView c"idxType")
    { scopeless
      const AD[230758] "const"(230757 call(230753 call . aView c"dims"))
      (230761 'end of statement')
    }
    { scopeless
      const BD[230768] "const"(230767 call(230763 call . bView c"dims"))
      (230771 'end of statement')
    }
    { scopeless
      unknown result[230776](230774 call * rank idxType)
      (230779 'end of statement')
    }
    {
      unknown i[230846] 0
      unknown tmp[230847] "maybe param" "temp"
      (230859 'move' tmp[230847](230857 call chpl_compute_low_param_loop_bound 0(230783 call - rank 1)))
      unknown tmp[230848] "maybe param" "temp"
      (230869 'move' tmp[230848](230867 call chpl_compute_high_param_loop_bound 0(230864 call - rank 1)))
      unknown tmp[230849] "maybe param" "temp"
      (230872 'move' tmp[230849] 1)
      ParamForLoop[230874]
      { i[230846] tmp[230847] tmp[230848] tmp[230849]
        {
          { scopeless
            const ar[230791] "const"(230790 call AD i)
            const br[230798] "const"(230797 call BD i)
            (230801 'end of statement')
          }
          if(230818 call _cond_test boundsChecking)
          {
            { scopeless
              (230816 call assert(230814 call(230806 call . br c"contains")(230812 call b i)))
            }
          }
          (230843 call =(230826 call result i)(230842 call(230828 call . ar c"orderToIndex")(230840 call(230832 call . br c"indexOrder")(230838 call b i))))
        }
      }
      label _unused_continueLabel[230851]
      label _breakLabel[230850]
    }
    (230884 return result)
  }
}