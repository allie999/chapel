AST dump for OwnedObject after pass createTaskFunctions.
Module use list: ChapelStandard HaltWrappers 

{
  function chpl__init_OwnedObject[415924]() : void[4] "insert line file info" "module init"
  {
    (505329 return _void[55])
  }
  function _owned[30](?).chpl_forwarding_expr1[39603](arg _mt[40580]:_MT[238], arg this[40578]:_owned[30](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[505083] "RVV" "temp"
    (505087 'move' ret[505083](39602 call(370376 call (partial) borrow _mt[243] this[40578])))
    (505085 return ret[505083])
  }
  function _owned[30](?).init[39613](arg _mt[40584]:_MT[238], ref arg this[40582]:_owned[30](?), arg chpl_t[39611]:_any[178](?)) : void[4] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[602924] "expr temp" "maybe param" "maybe type" "temp"
    (602927 'move' call_tmp[602924](39618 call isClass chpl_t[39611]))
    unknown call_tmp[602929] "expr temp" "maybe param" "maybe type" "temp"
    (602932 'move' call_tmp[602929](39619 call ! call_tmp[602924]))
    unknown call_tmp[602934] "expr temp" "maybe param" "maybe type" "temp"
    (602937 'move' call_tmp[602934](39642 call _cond_test call_tmp[602929]))
    if call_tmp[602934]
    {
      (39640 call compilerError "owned only works with classes")
    }
    unknown tmp[454054] "temp" "type variable"
    (454056 'move' tmp[454054](39657 call _to_borrowed chpl_t[39611]))
    (454058 'init field' this[40582] c"chpl_t" tmp[454054])
    (474019 'end of statement')
    unknown call_tmp[602939] "expr temp" "maybe param" "maybe type" "temp"
    (602942 'move' call_tmp[602939](454072 '.v' this[40582] c"chpl_t"))
    unknown call_tmp[602944] "maybe param" "maybe type" "temp"
    (602947 'move' call_tmp[602944](454064 'to nilable class' call_tmp[602939]))
    unknown tmp[454062] "temp"
    (454066 'init var' tmp[454062] nil[44] call_tmp[602944])
    (454068 'init field' this[40582] c"chpl_p" tmp[454062])
    (474020 'end of statement')
    (505089 return _void[55])
  }
  function _owned[30](?).init[39679](arg _mt[40588]:_MT[238], ref arg this[40586]:_owned[30](?), arg p[39676]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (39700 call compilerError "cannot initialize owned from a borrow")
    (474021 'end of statement')
    unknown call_tmp[602951] "expr temp" "maybe param" "maybe type" "temp"
    (602954 'move' call_tmp[602951](39712 call _to_unmanaged p[39676]))
    (39714 call(39706 call (partial) init _mt[243] this[40586]) call_tmp[602951])
    (505091 return _void[55])
  }
  function _owned[30](?).init[39724](arg _mt[40592]:_MT[238], ref arg this[40590]:_owned[30](?), arg p[39721]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454075] "temp" "type variable"
    unknown call_tmp[602956] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602959 'move' call_tmp[602956](39732 'typeof' p[39721]))
    (454077 'move' tmp[454075](39734 call _to_borrowed call_tmp[602956]))
    (454079 'init field' this[40590] c"chpl_t" tmp[454075])
    (474023 'end of statement')
    unknown call_tmp[602961] "maybe param" "maybe type" "temp"
    (602964 'move' call_tmp[602961](39746 call _to_borrowed p[39721]))
    unknown call_tmp[602966] "expr temp" "maybe param" "maybe type" "temp"
    (602969 'move' call_tmp[602966](454093 '.v' this[40590] c"chpl_t"))
    unknown call_tmp[602971] "maybe param" "maybe type" "temp"
    (602974 'move' call_tmp[602971](454085 'to nilable class' call_tmp[602966]))
    unknown tmp[454083] "temp"
    (454087 'init var' tmp[454083] call_tmp[602961] call_tmp[602971])
    (454089 'init field' this[40590] c"chpl_p" tmp[454083])
    (474024 'end of statement')
    (505093 return _void[55])
  }
  function _owned[30](?).init[39759](arg _mt[40596]:_MT[238], ref arg this[40594]:_owned[30](?), arg p[39756]:_any[178](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (39790 call compilerError "owned only works with classes")
    (474025 'end of statement')
    unknown tmp[454102] "temp" "type variable"
    (454104 'move' tmp[454102](454096 'typeof' p[39756]))
    (454106 'init field' this[40594] c"chpl_t" tmp[454102])
    (474026 'end of statement')
    unknown call_tmp[602976] "expr temp" "maybe param" "maybe type" "temp"
    (602979 'move' call_tmp[602976](454120 '.v' this[40594] c"chpl_t"))
    unknown call_tmp[602981] "maybe param" "maybe type" "temp"
    (602984 'move' call_tmp[602981](454112 'to nilable class' call_tmp[602976]))
    unknown tmp[454110] "temp"
    (454114 'init var' tmp[454110] p[39756] call_tmp[602981])
    (454116 'init field' this[40594] c"chpl_p" tmp[454110])
    (474027 'end of statement')
    (505095 return _void[55])
  }
  where {
    unknown tmp[418101] "maybe param" "temp"
    unknown tmp[418122] "maybe param" "temp"
    unknown call_tmp[602986] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602989 'move' call_tmp[602986](454098 'typeof' p[39756]))
    unknown call_tmp[602991] "expr temp" "maybe param" "maybe type" "temp"
    (602994 'move' call_tmp[602991](39764 call isClass call_tmp[602986]))
    (418133 'move' tmp[418122](39766 call == call_tmp[602991] 0))
    unknown call_tmp[602996] "expr temp" "maybe param" "maybe type" "temp"
    (602999 'move' call_tmp[602996](418135 call _cond_invalid tmp[418122]))
    if call_tmp[602996]
    {
      (418138 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553873] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553874] "maybe param" "temp"
    unknown call_tmp[603001] "expr temp" "maybe param" "maybe type" "temp"
    (603004 'move' call_tmp[603001](418123 call isTrue tmp[418122]))
    (553879 'move' tmp[553874](553877 call _cond_test call_tmp[603001]))
    if tmp[553874]
    {
      unknown tmp[553881] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603006] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603009 'move' call_tmp[603006](454100 'typeof' p[39756]))
      unknown call_tmp[603011] "expr temp" "maybe param" "maybe type" "temp"
      (603014 'move' call_tmp[603011](354186 'is_subtype' _owned[30](?) call_tmp[603006]))
      unknown call_tmp[603016] "expr temp" "maybe param" "maybe type" "temp"
      (603019 'move' call_tmp[603016](39774 call == call_tmp[603011] 0))
      (553883 'move' tmp[553881](418126 call isTrue call_tmp[603016]))
      (553888 'move' tmp[553873](553885 '_paramFoldLogical' tmp[553874] tmp[553881]))
    }
    {
      (553893 'move' tmp[553873](553890 '_paramFoldLogical' tmp[553874] 0))
    }
    (418112 'move' tmp[418101] tmp[553873])
    unknown call_tmp[603021] "expr temp" "maybe param" "maybe type" "temp"
    (603024 'move' call_tmp[603021](418114 call _cond_invalid tmp[418101]))
    if call_tmp[603021]
    {
      (418117 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553900] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553901] "maybe param" "temp"
    unknown call_tmp[603026] "expr temp" "maybe param" "maybe type" "temp"
    (603029 'move' call_tmp[603026](418102 call isTrue tmp[418101]))
    (553906 'move' tmp[553901](553904 call _cond_test call_tmp[603026]))
    if tmp[553901]
    {
      unknown tmp[553908] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603031] "expr temp" "maybe param" "maybe type" "temp"
      (603034 'move' call_tmp[603031](39781 call isIterator p[39756]))
      unknown call_tmp[603036] "expr temp" "maybe param" "maybe type" "temp"
      (603039 'move' call_tmp[603036](39783 call == call_tmp[603031] 0))
      (553910 'move' tmp[553908](418105 call isTrue call_tmp[603036]))
      (553915 'move' tmp[553900](553912 '_paramFoldLogical' tmp[553901] tmp[553908]))
    }
    {
      (553920 'move' tmp[553900](553917 '_paramFoldLogical' tmp[553901] 0))
    }
    (748176 call chpl_statementLevelSymbol tmp[553900])
  }
  function _owned[30](?).init=[39818](arg _mt[40600]:_MT[238], ref arg this[40598]:_owned[30](?), ref arg src[39815]:_owned[30](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[418143] "maybe param" "temp"
    unknown call_tmp[603041] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603044 'move' call_tmp[603041](39822 'typeof' this[40598]))
    (418154 'move' tmp[418143](39824 call isNonNilableClass call_tmp[603041]))
    unknown call_tmp[603046] "expr temp" "maybe param" "maybe type" "temp"
    (603049 'move' call_tmp[603046](418156 call _cond_invalid tmp[418143]))
    if call_tmp[603046]
    {
      (418159 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553927] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553928] "maybe param" "temp"
    unknown call_tmp[603051] "expr temp" "maybe param" "maybe type" "temp"
    (603054 'move' call_tmp[603051](418144 call isTrue tmp[418143]))
    (553933 'move' tmp[553928](553931 call _cond_test call_tmp[603051]))
    if tmp[553928]
    {
      unknown tmp[553935] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603056] "expr temp" "maybe param" "maybe type" "temp"
      (603059 'move' call_tmp[603056](39828 call isNilableClass src[39815]))
      (553937 'move' tmp[553935](418147 call isTrue call_tmp[603056]))
      (553942 'move' tmp[553927](553939 '_paramFoldLogical' tmp[553928] tmp[553935]))
    }
    {
      (553947 'move' tmp[553927](553944 '_paramFoldLogical' tmp[553928] 0))
    }
    unknown call_tmp[603061] "expr temp" "maybe param" "maybe type" "temp"
    (603064 'move' call_tmp[603061](39854 call _cond_test tmp[553927]))
    if call_tmp[603061]
    {
      (39852 call compilerError "cannot create a non-nilable owned variable from a nilable class instance")
    }
    unknown call_tmp[603066] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603069 'move' call_tmp[603066](39867 'typeof' this[40598]))
    unknown call_tmp[603073] "expr temp" "maybe param" "maybe type" "temp"
    (603076 'move' call_tmp[603073](39868 call chpl_t _mt[243] call_tmp[603066]))
    unknown call_tmp[603080] "expr temp" "maybe param" "maybe type" "temp"
    (603083 'move' call_tmp[603080](39862 call chpl_t _mt[243] src[39815]))
    unknown call_tmp[603085] "expr temp" "maybe param" "maybe type" "temp"
    (603088 'move' call_tmp[603085](354187 'is_coercible' call_tmp[603073] call_tmp[603080]))
    unknown call_tmp[603090] "expr temp" "maybe param" "maybe type" "temp"
    (603093 'move' call_tmp[603090](39873 call == call_tmp[603085] 0))
    unknown call_tmp[603095] "expr temp" "maybe param" "maybe type" "temp"
    (603098 'move' call_tmp[603095](39940 call _cond_test call_tmp[603090]))
    if call_tmp[603095]
    {
      unknown call_tmp[603100] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603103 'move' call_tmp[603100](39895 'typeof' src[39815]))
      unknown call_tmp[603105] "expr temp" "maybe param" "maybe type" "temp"
      (603108 'move' call_tmp[603105](39897 call _cast string[26] call_tmp[603100]))
      unknown call_tmp[603110] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603113 'move' call_tmp[603110](39917 'typeof' this[40598]))
      unknown call_tmp[603115] "expr temp" "maybe param" "maybe type" "temp"
      (603118 'move' call_tmp[603115](39919 call _cast string[26] call_tmp[603110]))
      (39938 call compilerError "cannot coerce '" call_tmp[603105] "' to '" call_tmp[603115] "' in initialization")
    }
    unknown tmp[454123] "temp" "type variable"
    unknown call_tmp[603120] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603123 'move' call_tmp[603120](39950 'typeof' this[40598]))
    (454125 'move' tmp[454123](39951 call chpl_t _mt[243] call_tmp[603120]))
    (454127 'init field' this[40598] c"chpl_t" tmp[454123])
    (474031 'end of statement')
    unknown call_tmp[603129] "maybe param" "maybe type" "temp"
    (603132 'move' call_tmp[603129](39966 call(39962 call (partial) release _mt[243] src[39815])))
    unknown call_tmp[603134] "expr temp" "maybe param" "maybe type" "temp"
    (603137 'move' call_tmp[603134](454141 '.v' this[40598] c"chpl_t"))
    unknown call_tmp[603139] "maybe param" "maybe type" "temp"
    (603142 'move' call_tmp[603139](454133 'to nilable class' call_tmp[603134]))
    unknown tmp[454131] "temp"
    (454135 'init var' tmp[454131] call_tmp[603129] call_tmp[603139])
    (454137 'init field' this[40598] c"chpl_p" tmp[454131])
    (474032 'end of statement')
    (505097 return _void[55])
  }
  function _owned[30](?).init=[39985](arg _mt[40604]:_MT[238], ref arg this[40602]:_owned[30](?), arg src[39982]:_shared[32](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40006 call compilerError "cannot create an owned variable from a shared class instance")
    (474033 'end of statement')
    unknown tmp[454144] "temp" "type variable"
    (454146 'move' tmp[454144] int(64)[13])
    (454148 'init field' this[40602] c"chpl_t" tmp[454144])
    (474034 'end of statement')
    unknown tmp[454153] "temp"
    unknown call_tmp[603144] "expr temp" "maybe param" "maybe type" "temp"
    (603147 'move' call_tmp[603144](454163 '.v' this[40602] c"chpl_t"))
    unknown call_tmp[603149] "expr temp" "maybe param" "maybe type" "temp"
    (603152 'move' call_tmp[603149](454155 'to nilable class' call_tmp[603144]))
    (454157 'default init var' tmp[454153] call_tmp[603149])
    (454159 '.=' this[40602] c"chpl_p" tmp[454153])
    (474035 'end of statement')
    (505099 return _void[55])
  }
  function _owned[30](?).init=[40025](arg _mt[40608]:_MT[238], ref arg this[40606]:_owned[30](?), arg src[40022]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40048 call compilerError "cannot create an owned variable from a borrowed class instance")
    (474036 'end of statement')
    unknown tmp[454166] "temp" "type variable"
    (454168 'move' tmp[454166] int(64)[13])
    (454170 'init field' this[40606] c"chpl_t" tmp[454166])
    (474037 'end of statement')
    unknown tmp[454175] "temp"
    unknown call_tmp[603154] "expr temp" "maybe param" "maybe type" "temp"
    (603157 'move' call_tmp[603154](454185 '.v' this[40606] c"chpl_t"))
    unknown call_tmp[603159] "expr temp" "maybe param" "maybe type" "temp"
    (603162 'move' call_tmp[603159](454177 'to nilable class' call_tmp[603154]))
    (454179 'default init var' tmp[454175] call_tmp[603159])
    (454181 '.=' this[40606] c"chpl_p" tmp[454175])
    (474038 'end of statement')
    (505101 return _void[55])
  }
  function _owned[30](?).init=[40067](arg _mt[40612]:_MT[238], ref arg this[40610]:_owned[30](?), arg src[40064]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40088 call compilerError "cannot create an owned variable from an unmanaged class instance")
    (474039 'end of statement')
    unknown tmp[454188] "temp" "type variable"
    (454190 'move' tmp[454188] int(64)[13])
    (454192 'init field' this[40610] c"chpl_t" tmp[454188])
    (474040 'end of statement')
    unknown tmp[454197] "temp"
    unknown call_tmp[603164] "expr temp" "maybe param" "maybe type" "temp"
    (603167 'move' call_tmp[603164](454207 '.v' this[40610] c"chpl_t"))
    unknown call_tmp[603169] "expr temp" "maybe param" "maybe type" "temp"
    (603172 'move' call_tmp[603169](454199 'to nilable class' call_tmp[603164]))
    (454201 'default init var' tmp[454197] call_tmp[603169])
    (454203 '.=' this[40610] c"chpl_p" tmp[454197])
    (474041 'end of statement')
    (505103 return _void[55])
  }
  function _owned[30](?).init=[40107](arg _mt[40616]:_MT[238], ref arg this[40614]:_owned[30](?), arg src[40104]:_nilType[42]) : void[4] "leaves this nil" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[603176] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603179 'move' call_tmp[603176](40114 'typeof' this[40614]))
    unknown call_tmp[603183] "expr temp" "maybe param" "maybe type" "temp"
    (603186 'move' call_tmp[603183](40115 call chpl_t _mt[243] call_tmp[603176]))
    (40119 call(40110 call (partial) init _mt[243] this[40614]) call_tmp[603183])
    (474042 'end of statement')
    unknown call_tmp[603190] "expr temp" "maybe param" "maybe type" "temp"
    (603193 'move' call_tmp[603190](370402 call chpl_t _mt[243] this[40614]))
    unknown call_tmp[603195] "expr temp" "maybe param" "maybe type" "temp"
    (603198 'move' call_tmp[603195](40125 call isNonNilableClass call_tmp[603190]))
    unknown call_tmp[603200] "expr temp" "maybe param" "maybe type" "temp"
    (603203 'move' call_tmp[603200](40147 call _cond_test call_tmp[603195]))
    if call_tmp[603200]
    {
      (40145 call compilerError "Assigning non-nilable owned to nil")
    }
    (505105 return _void[55])
  }
  function _owned[30](?).init[40160](arg _mt[40620]:_MT[238], ref arg this[40618]:_owned[30](?), ref arg src[40157]:_owned[30](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454210] "temp" "type variable"
    (454212 'move' tmp[454210](40167 call chpl_t _mt[243] src[40157]))
    (454214 'init field' this[40618] c"chpl_t" tmp[454210])
    (474044 'end of statement')
    unknown call_tmp[603209] "maybe param" "maybe type" "temp"
    (603212 'move' call_tmp[603209](40183 call(40179 call (partial) release _mt[243] src[40157])))
    unknown call_tmp[603214] "expr temp" "maybe param" "maybe type" "temp"
    (603217 'move' call_tmp[603214](454228 '.v' this[40618] c"chpl_t"))
    unknown call_tmp[603219] "maybe param" "maybe type" "temp"
    (603222 'move' call_tmp[603219](454220 'to nilable class' call_tmp[603214]))
    unknown tmp[454218] "temp"
    (454222 'init var' tmp[454218] call_tmp[603209] call_tmp[603219])
    (454224 'init field' this[40618] c"chpl_p" tmp[454218])
    (474045 'end of statement')
    (505107 return _void[55])
  }
  function _owned[30](?).create[40193](arg _mt[40624]:_MT[238], arg this[40622]:_owned[30](?), arg source[40191]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[603224] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603227 'move' call_tmp[603224](40215 'typeof' source[40191]))
    unknown call_tmp[603229] "expr temp" "maybe param" "maybe type" "temp"
    (603232 'move' call_tmp[603229](40217 call _cast string[26] call_tmp[603224]))
    (40219 call compilerError "cannot create an 'owned' from " call_tmp[603229])
    (505109 return _void[55])
  }
  function _owned[30](?).create[40230](arg _mt[40628]:_MT[238], arg this[40626]:_owned[30](?), in arg take[40227]:_owned[30](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[505113] "RVV" "temp"
    (505118 'move' ret[505113](505117 'deref' take[40227]))
    (505115 return ret[505113])
  }
  function _owned[30](?).create[40244](arg _mt[40632]:_MT[238], arg this[40630]:_owned[30](?), arg p[40241]:unmanaged[220](?)) : _unknown[51] "inline" "method" "primary method" "unsafe"
  {
    unknown ret[505122] "RVV" "temp"
    unknown result[40251] "dead at end of block" "insert auto destroy"
    unknown call_tmp[603234] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603237 'move' call_tmp[603234](40247 'typeof' p[40241]))
    unknown call_tmp[603239] "expr temp" "maybe param" "maybe type" "temp"
    (603242 'move' call_tmp[603239](40249 call _cast _owned[30](?) call_tmp[603234]))
    (540523 'default init var' result[40251] call_tmp[603239])
    (40254 'end of statement')
    (40264 call(40259 call (partial) retain _mt[243] result[40251]) p[40241])
    (474048 'end of statement' result[40251])
    (505127 'move' ret[505122](505126 'deref' result[40251]))
    gotoReturn _end_create[505120] _end_create[505120]
    (474050 'end of statement' result[40251])
    label _end_create[505120]
    (505124 return ret[505122])
  }
  function _owned[30](?).deinit[40273](arg _mt[40636]:_MT[238], arg this[40634]:_owned[30](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603248] "expr temp" "maybe param" "maybe type" "temp"
    (603251 'move' call_tmp[603248](370415 call chpl_p _mt[243] this[40634]))
    unknown call_tmp[603253] "expr temp" "maybe param" "maybe type" "temp"
    (603256 'move' call_tmp[603253](40278 call isClass call_tmp[603248]))
    unknown call_tmp[603258] "expr temp" "maybe param" "maybe type" "temp"
    (603261 'move' call_tmp[603258](40297 call _cond_test call_tmp[603253]))
    if call_tmp[603258]
    {
      unknown call_tmp[603265] "expr temp" "maybe param" "maybe type" "temp"
      (603268 'move' call_tmp[603265](370420 call chpl_p _mt[243] this[40634]))
      unknown call_tmp[603270] "expr temp" "maybe param" "maybe type" "temp"
      (603273 'move' call_tmp[603270](40281 call != call_tmp[603265] nil[44]))
      unknown call_tmp[603275] "expr temp" "maybe param" "maybe type" "temp"
      (603278 'move' call_tmp[603275](40291 call _cond_test call_tmp[603270]))
      if call_tmp[603275]
      {
        unknown call_tmp[603282] "expr temp" "maybe param" "maybe type" "temp"
        (603285 'move' call_tmp[603282](370425 call chpl_p _mt[243] this[40634]))
        unknown call_tmp[603287] "expr temp" "maybe param" "maybe type" "temp"
        (603290 'move' call_tmp[603287](40286 call _to_unmanaged call_tmp[603282]))
        (40288 call chpl__delete call_tmp[603287])
      }
    }
    (505131 return _void[55])
  }
  function _owned[30](?).clear[40306](arg _mt[40640]:_MT[238], ref arg this[40638]:_owned[30](?)) : _unknown[51] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603294] "expr temp" "maybe param" "maybe type" "temp"
    (603297 'move' call_tmp[603294](370430 call chpl_p _mt[243] this[40638]))
    unknown call_tmp[603299] "expr temp" "maybe param" "maybe type" "temp"
    (603302 'move' call_tmp[603299](40310 call != call_tmp[603294] nil[44]))
    unknown call_tmp[603304] "expr temp" "maybe param" "maybe type" "temp"
    (603307 'move' call_tmp[603304](40326 call _cond_test call_tmp[603299]))
    if call_tmp[603304]
    {
      unknown call_tmp[603311] "expr temp" "maybe param" "maybe type" "temp"
      (603314 'move' call_tmp[603311](370435 call chpl_p _mt[243] this[40638]))
      unknown call_tmp[603316] "expr temp" "maybe param" "maybe type" "temp"
      (603319 'move' call_tmp[603316](40315 call _to_unmanaged call_tmp[603311]))
      (40317 call chpl__delete call_tmp[603316])
      (474053 'end of statement')
      unknown call_tmp[603323] "expr temp" "maybe param" "maybe type" "temp"
      (603326 'move' call_tmp[603323](370440 call chpl_p _mt[243] this[40638]))
      (40323 call = call_tmp[603323] nil[44])
    }
    (505133 return _void[55])
  }
  function _owned[30](?).retain[40339](arg _mt[40644]:_MT[238], ref arg this[40642]:_owned[30](?), arg newPtr[40336]:unmanaged[220](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603330] "expr temp" "maybe param" "maybe type" "temp"
    (603333 'move' call_tmp[603330](370446 call chpl_t _mt[243] this[40642]))
    unknown call_tmp[603335] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603338 'move' call_tmp[603335](40343 'typeof' newPtr[40336]))
    unknown call_tmp[603340] "expr temp" "maybe param" "maybe type" "temp"
    (603343 'move' call_tmp[603340](354188 'is_coercible' call_tmp[603330] call_tmp[603335]))
    unknown call_tmp[603345] "expr temp" "maybe param" "maybe type" "temp"
    (603348 'move' call_tmp[603345](40347 call ! call_tmp[603340]))
    unknown call_tmp[603350] "expr temp" "maybe param" "maybe type" "temp"
    (603353 'move' call_tmp[603350](40443 call _cond_test call_tmp[603345]))
    if call_tmp[603350]
    {
      unknown call_tmp[603355] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603358 'move' call_tmp[603355](40368 'typeof' newPtr[40336]))
      unknown call_tmp[603360] "expr temp" "maybe param" "maybe type" "temp"
      (603363 'move' call_tmp[603360](40370 call _cast string[26] call_tmp[603355]))
      unknown call_tmp[603365] "expr temp" "maybe param" "maybe type" "temp"
      (603368 'move' call_tmp[603365](40372 call + "cannot retain '" call_tmp[603360]))
      unknown call_tmp[603370] "expr temp" "maybe param" "maybe type" "temp"
      (603373 'move' call_tmp[603370](40391 call + call_tmp[603365] "' "))
      unknown call_tmp[603375] "expr temp" "maybe param" "maybe type" "temp"
      (603378 'move' call_tmp[603375](40410 call + call_tmp[603370] "(expected '"))
      unknown call_tmp[603382] "expr temp" "maybe param" "maybe type" "temp"
      (603385 'move' call_tmp[603382](370452 call chpl_t _mt[243] this[40642]))
      unknown call_tmp[603387] "expr temp" "maybe param" "maybe type" "temp"
      (603390 'move' call_tmp[603387](40415 call _to_unmanaged call_tmp[603382]))
      unknown call_tmp[603392] "expr temp" "maybe param" "maybe type" "temp"
      (603395 'move' call_tmp[603392](40417 call _cast string[26] call_tmp[603387]))
      unknown call_tmp[603397] "expr temp" "maybe param" "maybe type" "temp"
      (603400 'move' call_tmp[603397](40419 call + call_tmp[603375] call_tmp[603392]))
      unknown call_tmp[603402] "expr temp" "maybe param" "maybe type" "temp"
      (603405 'move' call_tmp[603402](40438 call + call_tmp[603397] "')"))
      (40441 call compilerError call_tmp[603402])
    }
    unknown call_tmp[603409] "maybe param" "maybe type" "temp"
    (603412 'move' call_tmp[603409](370457 call chpl_p _mt[243] this[40642]))
    unknown oldPtr[40450] "dead at end of block" "insert auto destroy"
    (540525 'init var' oldPtr[40450] call_tmp[603409])
    (40453 'end of statement')
    unknown call_tmp[603416] "expr temp" "maybe param" "maybe type" "temp"
    (603419 'move' call_tmp[603416](370462 call chpl_p _mt[243] this[40642]))
    (40456 call = call_tmp[603416] newPtr[40336])
    (474056 'end of statement')
    unknown call_tmp[603421] "expr temp" "maybe param" "maybe type" "temp"
    (603424 'move' call_tmp[603421](40468 call _cond_test oldPtr[40450]))
    if call_tmp[603421]
    {
      unknown call_tmp[603426] "expr temp" "maybe param" "maybe type" "temp"
      (603429 'move' call_tmp[603426](40463 call _to_unmanaged oldPtr[40450]))
      (40465 call chpl__delete call_tmp[603426])
      (474057 'end of statement' oldPtr[40450])
    }
    (505135 return _void[55])
  }
  function _owned[30](?).release[40477](arg _mt[40648]:_MT[238], ref arg this[40646]:_owned[30](?)) : _unknown[51] "leaves this nil" "nil from this" "method" "primary method"
  {
    unknown ret[505139] "RVV" "temp"
    unknown call_tmp[603433] "maybe param" "maybe type" "temp"
    (603436 'move' call_tmp[603433](370470 call chpl_p _mt[243] this[40646]))
    unknown oldPtr[40480] "dead at end of block" "insert auto destroy"
    (540527 'init var' oldPtr[40480] call_tmp[603433])
    (40483 'end of statement')
    unknown call_tmp[603440] "expr temp" "maybe param" "maybe type" "temp"
    (603443 'move' call_tmp[603440](370475 call chpl_p _mt[243] this[40646]))
    (40487 call = call_tmp[603440] nil[44])
    (474059 'end of statement')
    unknown call_tmp[603447] "expr temp" "maybe param" "maybe type" "temp"
    (603450 'move' call_tmp[603447](370480 call chpl_t _mt[243] this[40646]))
    unknown call_tmp[603452] "expr temp" "maybe param" "maybe type" "temp"
    (603455 'move' call_tmp[603452](40493 call _to_nilable call_tmp[603447]))
    unknown call_tmp[603459] "expr temp" "maybe param" "maybe type" "temp"
    (603462 'move' call_tmp[603459](370485 call chpl_t _mt[243] this[40646]))
    unknown call_tmp[603464] "expr temp" "maybe param" "maybe type" "temp"
    (603467 'move' call_tmp[603464](40495 call == call_tmp[603452] call_tmp[603459]))
    unknown call_tmp[603469] "expr temp" "maybe param" "maybe type" "temp"
    (603472 'move' call_tmp[603469](40513 call _cond_test call_tmp[603464]))
    if call_tmp[603469]
    {
      unknown call_tmp[603474] "expr temp" "maybe param" "maybe type" "temp"
      (603477 'move' call_tmp[603474](40500 call _to_unmanaged oldPtr[40480]))
      (505144 'move' ret[505139](505143 'deref' call_tmp[603474]))
      gotoReturn _end_release[505137] _end_release[505137]
      (474060 'end of statement' oldPtr[40480])
    }
    {
      unknown call_tmp[603479] "expr temp" "maybe param" "maybe type" "temp"
      (603482 'move' call_tmp[603479](40506 call postfix! oldPtr[40480]))
      unknown call_tmp[603484] "expr temp" "maybe param" "maybe type" "temp"
      (603487 'move' call_tmp[603484](40509 call _to_unmanaged call_tmp[603479]))
      (505149 'move' ret[505139](505148 'deref' call_tmp[603484]))
      gotoReturn _end_release[505137] _end_release[505137]
      (474062 'end of statement' oldPtr[40480])
    }
    label _end_release[505137]
    (505141 return ret[505139])
  }
  function _owned[30](?).borrow[40521](arg _mt[40652]:_MT[238], arg this[40650]:_owned[30](?)) : _unknown[51] "nil from this" "method" "primary method"
  {
    unknown ret[505155] "RVV" "temp"
    unknown call_tmp[603491] "expr temp" "maybe param" "maybe type" "temp"
    (603494 'move' call_tmp[603491](370492 call chpl_t _mt[243] this[40650]))
    unknown call_tmp[603496] "expr temp" "maybe param" "maybe type" "temp"
    (603499 'move' call_tmp[603496](40526 call _to_nilable call_tmp[603491]))
    unknown call_tmp[603503] "expr temp" "maybe param" "maybe type" "temp"
    (603506 'move' call_tmp[603503](370497 call chpl_t _mt[243] this[40650]))
    unknown call_tmp[603508] "expr temp" "maybe param" "maybe type" "temp"
    (603511 'move' call_tmp[603508](40528 call == call_tmp[603496] call_tmp[603503]))
    unknown call_tmp[603513] "expr temp" "maybe param" "maybe type" "temp"
    (603516 'move' call_tmp[603513](40540 call _cond_test call_tmp[603508]))
    if call_tmp[603513]
    {
      unknown call_tmp[603520] "expr temp" "maybe param" "maybe type" "temp"
      (603523 'move' call_tmp[603520](370502 call chpl_p _mt[243] this[40650]))
      (505160 'move' ret[505155](505159 'deref' call_tmp[603520]))
      gotoReturn _end_borrow[505153] _end_borrow[505153]
    }
    {
      unknown call_tmp[603527] "expr temp" "maybe param" "maybe type" "temp"
      (603530 'move' call_tmp[603527](370507 call chpl_p _mt[243] this[40650]))
      unknown call_tmp[603532] "expr temp" "maybe param" "maybe type" "temp"
      (603535 'move' call_tmp[603532](40535 call postfix! call_tmp[603527]))
      (505165 'move' ret[505155](505164 'deref' call_tmp[603532]))
      gotoReturn _end_borrow[505153] _end_borrow[505153]
    }
    label _end_borrow[505153]
    (505157 return ret[505155])
  }
  function _owned[30](?).borrow[40549](arg _mt[40656]:_MT[238], arg this[40654]:_owned[30](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[505171] "RVV" "temp" "type variable"
    unknown call_tmp[603539] "expr temp" "maybe param" "maybe type" "temp"
    (603542 'move' call_tmp[603539](370512 call chpl_t _mt[243] this[40654]))
    unknown call_tmp[603544] "expr temp" "maybe param" "maybe type" "temp"
    (603547 'move' call_tmp[603544](40554 call _to_nilable call_tmp[603539]))
    unknown call_tmp[603551] "expr temp" "maybe param" "maybe type" "temp"
    (603554 'move' call_tmp[603551](370517 call chpl_t _mt[243] this[40654]))
    unknown call_tmp[603556] "expr temp" "maybe param" "maybe type" "temp"
    (603559 'move' call_tmp[603556](40556 call == call_tmp[603544] call_tmp[603551]))
    unknown call_tmp[603561] "expr temp" "maybe param" "maybe type" "temp"
    (603564 'move' call_tmp[603561](40569 call _cond_test call_tmp[603556]))
    if call_tmp[603561]
    {
      unknown call_tmp[603568] "expr temp" "maybe param" "maybe type" "temp"
      (603571 'move' call_tmp[603568](370522 call chpl_t _mt[243] this[40654]))
      (505176 'move' ret[505171](505175 'deref' call_tmp[603568]))
      gotoReturn _end_borrow[505169] _end_borrow[505169]
    }
    {
      unknown call_tmp[603575] "expr temp" "maybe param" "maybe type" "temp"
      (603578 'move' call_tmp[603575](370527 call chpl_t _mt[243] this[40654]))
      unknown call_tmp[603580] "expr temp" "maybe param" "maybe type" "temp"
      (603583 'move' call_tmp[603580](40565 call _to_nonnil call_tmp[603575]))
      (505181 'move' ret[505171](505180 'deref' call_tmp[603580]))
      gotoReturn _end_borrow[505169] _end_borrow[505169]
    }
    label _end_borrow[505169]
    (505173 return ret[505171])
  }
  function _owned[30](?).chpl_t[758068](arg _mt[758070]:_MT[238], arg this[758072]:_owned[30](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[758091] "RVV" "temp" "type variable"
    unknown call_tmp[758105] "expr temp" "maybe param" "maybe type" "temp"
    (758108 'move' call_tmp[758105](758077 'is bound' this[758072] c"chpl_t"))
    if call_tmp[758105]
    {
      unknown call_tmp[758110] "expr temp" "maybe param" "maybe type" "temp"
      (758113 'move' call_tmp[758110](758076 '.v' this[758072] c"chpl_t"))
      (758096 'move' ret[758091](758095 'deref' call_tmp[758110]))
      gotoReturn _end_chpl_t[758089] _end_chpl_t[758089]
    }
    {
      (758101 'move' ret[758091](758100 'deref' _uninstantiated[258]))
      gotoReturn _end_chpl_t[758089] _end_chpl_t[758089]
    }
    label _end_chpl_t[758089]
    (758093 return ret[758091])
  }
  function _owned[30](?).chpl_t[758115](arg _mt[758117]:_MT[238], arg this[758119]:_owned[30](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[758138] "RVV" "temp" "type variable"
    unknown call_tmp[758152] "expr temp" "maybe param" "maybe type" "temp"
    (758155 'move' call_tmp[758152](758124 'is bound' this[758119] c"chpl_t"))
    if call_tmp[758152]
    {
      unknown call_tmp[758157] "expr temp" "maybe param" "maybe type" "temp"
      (758160 'move' call_tmp[758157](758123 '.v' this[758119] c"chpl_t"))
      (758143 'move' ret[758138](758142 'deref' call_tmp[758157]))
      gotoReturn _end_chpl_t[758136] _end_chpl_t[758136]
    }
    {
      (758148 'move' ret[758138](758147 'deref' _uninstantiated[258]))
      gotoReturn _end_chpl_t[758136] _end_chpl_t[758136]
    }
    label _end_chpl_t[758136]
    (758140 return ret[758138])
  }
  function _owned[30](?).chpl_p[758162](arg _mt[758164]:_MT[238], ref arg this[758166]:_owned[30](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[758176] "RVV" "temp"
    unknown call_tmp[758183] "expr temp" "maybe param" "maybe type" "temp"
    (758186 'move' call_tmp[758183](758170 '.' this[758166] c"chpl_p"))
    (758181 'move' ret[758176](758180 'addr of' call_tmp[758183]))
    (758178 return ret[758176])
  }
  function _owned[30](?).writeThis[758188](arg _mt[758192]:_MT[238], arg this[758190]:_owned[30](?), arg f[758191]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (758203 call(758199 call (partial) readWriteThis _mt[243] this[758190]) f[758191])
    (758206 return _void[55])
  }
  function _owned[30](?).readThis[758210](arg _mt[758214]:_MT[238], arg this[758212]:_owned[30](?), arg f[758213]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (758222 call(758218 call (partial) readWriteThis _mt[243] this[758212]) f[758213])
    (758226 return _void[55])
  }
  function chpl_fields_are_comparable[758242](arg _arg1[758244]:_owned[30](?), arg _arg2[758245]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758263]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758270] "expr temp" "maybe param" "maybe type" "temp"
    (758273 'move' call_tmp[758270](758248 call chpl_p _mt[243] _arg1[758244]))
    unknown call_tmp[758275] "expr temp" "maybe param" "maybe type" "temp"
    (758278 'move' call_tmp[758275](758252 call chpl_p _mt[243] _arg2[758245]))
    unknown call_tmp[758280] "expr temp" "maybe param" "maybe type" "temp"
    (758283 'move' call_tmp[758280](758256 'call resolves' c"==" call_tmp[758270] call_tmp[758275]))
    (758268 'move' ret[758263](758267 'deref' call_tmp[758280]))
    (758265 return ret[758263])
  }
  function ==[758230](arg _arg1[758232]:_owned[30](?), arg _arg2[758233]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758312]:bool[10] "RVV" "temp"
    unknown call_tmp[758324] "expr temp" "maybe param" "maybe type" "temp"
    (758327 'move' call_tmp[758324](758291 call chpl_p _mt[243] _arg1[758232]))
    unknown call_tmp[758329] "expr temp" "maybe param" "maybe type" "temp"
    (758332 'move' call_tmp[758329](758295 call chpl_p _mt[243] _arg2[758233]))
    unknown call_tmp[758334] "expr temp" "maybe param" "maybe type" "temp"
    (758337 'move' call_tmp[758334](758299 call != call_tmp[758324] call_tmp[758329]))
    if call_tmp[758334]
    {
      (758317 'move' ret[758312](758316 'deref' 0))
      gotoReturn _end_==[758310] _end_==[758310]
    }
    (758322 'move' ret[758312](758321 'deref' 1))
    label _end_==[758310]
    (758314 return ret[758312])
  }
  where {
    unknown call_tmp[758339] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758342 'move' call_tmp[758339](758236 'typeof' _arg1[758232]))
    unknown call_tmp[758344] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758347 'move' call_tmp[758344](758238 'typeof' _arg2[758233]))
    unknown call_tmp[758349] "expr temp" "maybe param" "maybe type" "temp"
    (758352 'move' call_tmp[758349](758240 call == call_tmp[758339] call_tmp[758344]))
    unknown call_tmp[758354] "expr temp" "maybe param" "maybe type" "temp"
    (758357 'move' call_tmp[758354](758285 call chpl_fields_are_comparable[758242] _arg1[758232] _arg2[758233]))
    (758289 '&' call_tmp[758349] call_tmp[758354])
  }
  function chpl_fields_are_comparable[758371](arg _arg1[758373]:_owned[30](?), arg _arg2[758374]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758392]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758399] "expr temp" "maybe param" "maybe type" "temp"
    (758402 'move' call_tmp[758399](758377 call chpl_p _mt[243] _arg1[758373]))
    unknown call_tmp[758404] "expr temp" "maybe param" "maybe type" "temp"
    (758407 'move' call_tmp[758404](758381 call chpl_p _mt[243] _arg2[758374]))
    unknown call_tmp[758409] "expr temp" "maybe param" "maybe type" "temp"
    (758412 'move' call_tmp[758409](758385 'call resolves' c"!=" call_tmp[758399] call_tmp[758404]))
    (758397 'move' ret[758392](758396 'deref' call_tmp[758409]))
    (758394 return ret[758392])
  }
  function !=[758359](arg _arg1[758361]:_owned[30](?), arg _arg2[758362]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758441]:bool[10] "RVV" "temp"
    unknown call_tmp[758453] "expr temp" "maybe param" "maybe type" "temp"
    (758456 'move' call_tmp[758453](758420 call chpl_p _mt[243] _arg1[758361]))
    unknown call_tmp[758458] "expr temp" "maybe param" "maybe type" "temp"
    (758461 'move' call_tmp[758458](758424 call chpl_p _mt[243] _arg2[758362]))
    unknown call_tmp[758463] "expr temp" "maybe param" "maybe type" "temp"
    (758466 'move' call_tmp[758463](758428 call != call_tmp[758453] call_tmp[758458]))
    if call_tmp[758463]
    {
      (758446 'move' ret[758441](758445 'deref' 1))
      gotoReturn _end_!=[758439] _end_!=[758439]
    }
    (758451 'move' ret[758441](758450 'deref' 0))
    label _end_!=[758439]
    (758443 return ret[758441])
  }
  where {
    unknown call_tmp[758468] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758471 'move' call_tmp[758468](758365 'typeof' _arg1[758361]))
    unknown call_tmp[758473] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758476 'move' call_tmp[758473](758367 'typeof' _arg2[758362]))
    unknown call_tmp[758478] "expr temp" "maybe param" "maybe type" "temp"
    (758481 'move' call_tmp[758478](758369 call == call_tmp[758468] call_tmp[758473]))
    unknown call_tmp[758483] "expr temp" "maybe param" "maybe type" "temp"
    (758486 'move' call_tmp[758483](758414 call chpl_fields_are_comparable[758371] _arg1[758361] _arg2[758362]))
    (758418 '&' call_tmp[758478] call_tmp[758483])
  }
  function chpl_fields_are_comparable[758500](arg _arg1[758502]:_owned[30](?), arg _arg2[758503]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758521]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758528] "expr temp" "maybe param" "maybe type" "temp"
    (758531 'move' call_tmp[758528](758506 call chpl_p _mt[243] _arg1[758502]))
    unknown call_tmp[758533] "expr temp" "maybe param" "maybe type" "temp"
    (758536 'move' call_tmp[758533](758510 call chpl_p _mt[243] _arg2[758503]))
    unknown call_tmp[758538] "expr temp" "maybe param" "maybe type" "temp"
    (758541 'move' call_tmp[758538](758514 'call resolves' c"<" call_tmp[758528] call_tmp[758533]))
    (758526 'move' ret[758521](758525 'deref' call_tmp[758538]))
    (758523 return ret[758521])
  }
  function <[758488](arg _arg1[758490]:_owned[30](?), arg _arg2[758491]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758585]:bool[10] "RVV" "temp"
    unknown call_tmp[758602] "expr temp" "maybe param" "maybe type" "temp"
    (758605 'move' call_tmp[758602](758549 call chpl_p _mt[243] _arg1[758490]))
    unknown call_tmp[758607] "expr temp" "maybe param" "maybe type" "temp"
    (758610 'move' call_tmp[758607](758553 call chpl_p _mt[243] _arg2[758491]))
    unknown call_tmp[758612] "expr temp" "maybe param" "maybe type" "temp"
    (758615 'move' call_tmp[758612](758557 call < call_tmp[758602] call_tmp[758607]))
    if call_tmp[758612]
    {
      (758590 'move' ret[758585](758589 'deref' 1))
      gotoReturn _end_<[758583] _end_<[758583]
    }
    unknown call_tmp[758617] "expr temp" "maybe param" "maybe type" "temp"
    (758620 'move' call_tmp[758617](758563 call chpl_p _mt[243] _arg1[758490]))
    unknown call_tmp[758622] "expr temp" "maybe param" "maybe type" "temp"
    (758625 'move' call_tmp[758622](758567 call chpl_p _mt[243] _arg2[758491]))
    unknown call_tmp[758627] "expr temp" "maybe param" "maybe type" "temp"
    (758630 'move' call_tmp[758627](758571 call > call_tmp[758617] call_tmp[758622]))
    if call_tmp[758627]
    {
      (758595 'move' ret[758585](758594 'deref' 0))
      gotoReturn _end_<[758583] _end_<[758583]
    }
    (758600 'move' ret[758585](758599 'deref' 0))
    label _end_<[758583]
    (758587 return ret[758585])
  }
  where {
    unknown call_tmp[758632] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758635 'move' call_tmp[758632](758494 'typeof' _arg1[758490]))
    unknown call_tmp[758637] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758640 'move' call_tmp[758637](758496 'typeof' _arg2[758491]))
    unknown call_tmp[758642] "expr temp" "maybe param" "maybe type" "temp"
    (758645 'move' call_tmp[758642](758498 call == call_tmp[758632] call_tmp[758637]))
    unknown call_tmp[758647] "expr temp" "maybe param" "maybe type" "temp"
    (758650 'move' call_tmp[758647](758543 call chpl_fields_are_comparable[758500] _arg1[758490] _arg2[758491]))
    (758547 '&' call_tmp[758642] call_tmp[758647])
  }
  function chpl_fields_are_comparable[758664](arg _arg1[758666]:_owned[30](?), arg _arg2[758667]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758685]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758692] "expr temp" "maybe param" "maybe type" "temp"
    (758695 'move' call_tmp[758692](758670 call chpl_p _mt[243] _arg1[758666]))
    unknown call_tmp[758697] "expr temp" "maybe param" "maybe type" "temp"
    (758700 'move' call_tmp[758697](758674 call chpl_p _mt[243] _arg2[758667]))
    unknown call_tmp[758702] "expr temp" "maybe param" "maybe type" "temp"
    (758705 'move' call_tmp[758702](758678 'call resolves' c"<=" call_tmp[758692] call_tmp[758697]))
    (758690 'move' ret[758685](758689 'deref' call_tmp[758702]))
    (758687 return ret[758685])
  }
  function <=[758652](arg _arg1[758654]:_owned[30](?), arg _arg2[758655]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758749]:bool[10] "RVV" "temp"
    unknown call_tmp[758766] "expr temp" "maybe param" "maybe type" "temp"
    (758769 'move' call_tmp[758766](758713 call chpl_p _mt[243] _arg1[758654]))
    unknown call_tmp[758771] "expr temp" "maybe param" "maybe type" "temp"
    (758774 'move' call_tmp[758771](758717 call chpl_p _mt[243] _arg2[758655]))
    unknown call_tmp[758776] "expr temp" "maybe param" "maybe type" "temp"
    (758779 'move' call_tmp[758776](758721 call < call_tmp[758766] call_tmp[758771]))
    if call_tmp[758776]
    {
      (758754 'move' ret[758749](758753 'deref' 1))
      gotoReturn _end_<=[758747] _end_<=[758747]
    }
    unknown call_tmp[758781] "expr temp" "maybe param" "maybe type" "temp"
    (758784 'move' call_tmp[758781](758727 call chpl_p _mt[243] _arg1[758654]))
    unknown call_tmp[758786] "expr temp" "maybe param" "maybe type" "temp"
    (758789 'move' call_tmp[758786](758731 call chpl_p _mt[243] _arg2[758655]))
    unknown call_tmp[758791] "expr temp" "maybe param" "maybe type" "temp"
    (758794 'move' call_tmp[758791](758735 call > call_tmp[758781] call_tmp[758786]))
    if call_tmp[758791]
    {
      (758759 'move' ret[758749](758758 'deref' 0))
      gotoReturn _end_<=[758747] _end_<=[758747]
    }
    (758764 'move' ret[758749](758763 'deref' 1))
    label _end_<=[758747]
    (758751 return ret[758749])
  }
  where {
    unknown call_tmp[758796] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758799 'move' call_tmp[758796](758658 'typeof' _arg1[758654]))
    unknown call_tmp[758801] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758804 'move' call_tmp[758801](758660 'typeof' _arg2[758655]))
    unknown call_tmp[758806] "expr temp" "maybe param" "maybe type" "temp"
    (758809 'move' call_tmp[758806](758662 call == call_tmp[758796] call_tmp[758801]))
    unknown call_tmp[758811] "expr temp" "maybe param" "maybe type" "temp"
    (758814 'move' call_tmp[758811](758707 call chpl_fields_are_comparable[758664] _arg1[758654] _arg2[758655]))
    (758711 '&' call_tmp[758806] call_tmp[758811])
  }
  function chpl_fields_are_comparable[758828](arg _arg1[758830]:_owned[30](?), arg _arg2[758831]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758849]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758856] "expr temp" "maybe param" "maybe type" "temp"
    (758859 'move' call_tmp[758856](758834 call chpl_p _mt[243] _arg1[758830]))
    unknown call_tmp[758861] "expr temp" "maybe param" "maybe type" "temp"
    (758864 'move' call_tmp[758861](758838 call chpl_p _mt[243] _arg2[758831]))
    unknown call_tmp[758866] "expr temp" "maybe param" "maybe type" "temp"
    (758869 'move' call_tmp[758866](758842 'call resolves' c">" call_tmp[758856] call_tmp[758861]))
    (758854 'move' ret[758849](758853 'deref' call_tmp[758866]))
    (758851 return ret[758849])
  }
  function >[758816](arg _arg1[758818]:_owned[30](?), arg _arg2[758819]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758913]:bool[10] "RVV" "temp"
    unknown call_tmp[758930] "expr temp" "maybe param" "maybe type" "temp"
    (758933 'move' call_tmp[758930](758877 call chpl_p _mt[243] _arg1[758818]))
    unknown call_tmp[758935] "expr temp" "maybe param" "maybe type" "temp"
    (758938 'move' call_tmp[758935](758881 call chpl_p _mt[243] _arg2[758819]))
    unknown call_tmp[758940] "expr temp" "maybe param" "maybe type" "temp"
    (758943 'move' call_tmp[758940](758885 call > call_tmp[758930] call_tmp[758935]))
    if call_tmp[758940]
    {
      (758918 'move' ret[758913](758917 'deref' 1))
      gotoReturn _end_>[758911] _end_>[758911]
    }
    unknown call_tmp[758945] "expr temp" "maybe param" "maybe type" "temp"
    (758948 'move' call_tmp[758945](758891 call chpl_p _mt[243] _arg1[758818]))
    unknown call_tmp[758950] "expr temp" "maybe param" "maybe type" "temp"
    (758953 'move' call_tmp[758950](758895 call chpl_p _mt[243] _arg2[758819]))
    unknown call_tmp[758955] "expr temp" "maybe param" "maybe type" "temp"
    (758958 'move' call_tmp[758955](758899 call < call_tmp[758945] call_tmp[758950]))
    if call_tmp[758955]
    {
      (758923 'move' ret[758913](758922 'deref' 0))
      gotoReturn _end_>[758911] _end_>[758911]
    }
    (758928 'move' ret[758913](758927 'deref' 0))
    label _end_>[758911]
    (758915 return ret[758913])
  }
  where {
    unknown call_tmp[758960] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758963 'move' call_tmp[758960](758822 'typeof' _arg1[758818]))
    unknown call_tmp[758965] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758968 'move' call_tmp[758965](758824 'typeof' _arg2[758819]))
    unknown call_tmp[758970] "expr temp" "maybe param" "maybe type" "temp"
    (758973 'move' call_tmp[758970](758826 call == call_tmp[758960] call_tmp[758965]))
    unknown call_tmp[758975] "expr temp" "maybe param" "maybe type" "temp"
    (758978 'move' call_tmp[758975](758871 call chpl_fields_are_comparable[758828] _arg1[758818] _arg2[758819]))
    (758875 '&' call_tmp[758970] call_tmp[758975])
  }
  function chpl_fields_are_comparable[758992](arg _arg1[758994]:_owned[30](?), arg _arg2[758995]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[759013]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[759020] "expr temp" "maybe param" "maybe type" "temp"
    (759023 'move' call_tmp[759020](758998 call chpl_p _mt[243] _arg1[758994]))
    unknown call_tmp[759025] "expr temp" "maybe param" "maybe type" "temp"
    (759028 'move' call_tmp[759025](759002 call chpl_p _mt[243] _arg2[758995]))
    unknown call_tmp[759030] "expr temp" "maybe param" "maybe type" "temp"
    (759033 'move' call_tmp[759030](759006 'call resolves' c">=" call_tmp[759020] call_tmp[759025]))
    (759018 'move' ret[759013](759017 'deref' call_tmp[759030]))
    (759015 return ret[759013])
  }
  function >=[758980](arg _arg1[758982]:_owned[30](?), arg _arg2[758983]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[759077]:bool[10] "RVV" "temp"
    unknown call_tmp[759094] "expr temp" "maybe param" "maybe type" "temp"
    (759097 'move' call_tmp[759094](759041 call chpl_p _mt[243] _arg1[758982]))
    unknown call_tmp[759099] "expr temp" "maybe param" "maybe type" "temp"
    (759102 'move' call_tmp[759099](759045 call chpl_p _mt[243] _arg2[758983]))
    unknown call_tmp[759104] "expr temp" "maybe param" "maybe type" "temp"
    (759107 'move' call_tmp[759104](759049 call > call_tmp[759094] call_tmp[759099]))
    if call_tmp[759104]
    {
      (759082 'move' ret[759077](759081 'deref' 1))
      gotoReturn _end_>=[759075] _end_>=[759075]
    }
    unknown call_tmp[759109] "expr temp" "maybe param" "maybe type" "temp"
    (759112 'move' call_tmp[759109](759055 call chpl_p _mt[243] _arg1[758982]))
    unknown call_tmp[759114] "expr temp" "maybe param" "maybe type" "temp"
    (759117 'move' call_tmp[759114](759059 call chpl_p _mt[243] _arg2[758983]))
    unknown call_tmp[759119] "expr temp" "maybe param" "maybe type" "temp"
    (759122 'move' call_tmp[759119](759063 call < call_tmp[759109] call_tmp[759114]))
    if call_tmp[759119]
    {
      (759087 'move' ret[759077](759086 'deref' 0))
      gotoReturn _end_>=[759075] _end_>=[759075]
    }
    (759092 'move' ret[759077](759091 'deref' 1))
    label _end_>=[759075]
    (759079 return ret[759077])
  }
  where {
    unknown call_tmp[759124] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759127 'move' call_tmp[759124](758986 'typeof' _arg1[758982]))
    unknown call_tmp[759129] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759132 'move' call_tmp[759129](758988 'typeof' _arg2[758983]))
    unknown call_tmp[759134] "expr temp" "maybe param" "maybe type" "temp"
    (759137 'move' call_tmp[759134](758990 call == call_tmp[759124] call_tmp[759129]))
    unknown call_tmp[759139] "expr temp" "maybe param" "maybe type" "temp"
    (759142 'move' call_tmp[759139](759035 call chpl_fields_are_comparable[758992] _arg1[758982] _arg2[758983]))
    (759039 '&' call_tmp[759134] call_tmp[759139])
  }
  function chpl__defaultHash[759144](arg r[759146]:_owned[30](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[759168] "RVV" "temp"
    unknown call_tmp[759175] "expr temp" "maybe param" "maybe type" "temp"
    (759178 'move' call_tmp[759175](759154 call chpl_p _mt[243] r[759146]))
    unknown call_tmp[759180] "expr temp" "maybe param" "maybe type" "temp"
    (759183 'move' call_tmp[759180](759158 call chpl__defaultHash call_tmp[759175]))
    unknown call_tmp[759185] "expr temp" "maybe param" "maybe type" "temp"
    (759188 'move' call_tmp[759185](759148 call chpl_t _mt[243] r[759146]))
    unknown call_tmp[759190] "expr temp" "maybe param" "maybe type" "temp"
    (759193 'move' call_tmp[759190](759152 call chpl__defaultHash call_tmp[759185]))
    unknown call_tmp[759195] "expr temp" "maybe param" "maybe type" "temp"
    (759198 'move' call_tmp[759195](759160 call chpl__defaultHashCombine call_tmp[759180] call_tmp[759190] 2))
    (759173 'move' ret[759168](759172 'deref' call_tmp[759195]))
    (759170 return ret[759168])
  }
  type _owned[30](?) unknown chpl_t[39589] "no doc" "type variable" unknown chpl_p[39596] "no doc" "owned"(39595 'to nilable class' chpl_t[39589]) forwarding ( )
  type owned[415356](?)
  type owned?[415352](?)
  function =[40665](ref arg lhs[40662]:_owned[30](?), ref arg rhs[40668]:_owned[30](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown tmp[418185] "maybe param" "temp"
    unknown call_tmp[603587] "expr temp" "maybe param" "maybe type" "temp"
    (603590 'move' call_tmp[603587](40688 call chpl_p _mt[243] lhs[40662]))
    (418196 'move' tmp[418185](40692 call == call_tmp[603587] nil[44]))
    unknown call_tmp[603592] "expr temp" "maybe param" "maybe type" "temp"
    (603595 'move' call_tmp[603592](418198 call _cond_invalid tmp[418185]))
    if call_tmp[603592]
    {
      (418201 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553954] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553955] "maybe param" "temp"
    unknown call_tmp[603597] "expr temp" "maybe param" "maybe type" "temp"
    (603600 'move' call_tmp[603597](418186 call isTrue tmp[418185]))
    (553960 'move' tmp[553955](553958 call _cond_test call_tmp[603597]))
    if tmp[553955]
    {
      unknown tmp[553962] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603604] "expr temp" "maybe param" "maybe type" "temp"
      (603607 'move' call_tmp[603604](40695 call chpl_p _mt[243] rhs[40668]))
      unknown call_tmp[603609] "expr temp" "maybe param" "maybe type" "temp"
      (603612 'move' call_tmp[603609](40699 call == call_tmp[603604] nil[44]))
      (553964 'move' tmp[553962](418189 call isTrue call_tmp[603609]))
      (553969 'move' tmp[553954](553966 '_paramFoldLogical' tmp[553955] tmp[553962]))
    }
    {
      (553974 'move' tmp[553954](553971 '_paramFoldLogical' tmp[553955] 0))
    }
    unknown call_tmp[603614] "expr temp" "maybe param" "maybe type" "temp"
    (603617 'move' call_tmp[603614](40705 call _cond_test tmp[553954]))
    if call_tmp[603614]
    {
      gotoReturn _end_=[505185] _end_=[505185]
    }
    unknown tmp[418206] "maybe param" "temp"
    (418217 'move' tmp[418206] 1)
    unknown call_tmp[603619] "expr temp" "maybe param" "maybe type" "temp"
    (603622 'move' call_tmp[603619](418219 call _cond_invalid tmp[418206]))
    if call_tmp[603619]
    {
      (418222 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[553981] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553982] "maybe param" "temp"
    unknown call_tmp[603624] "expr temp" "maybe param" "maybe type" "temp"
    (603627 'move' call_tmp[603624](418207 call isTrue tmp[418206]))
    (553987 'move' tmp[553982](553985 call _cond_test call_tmp[603624]))
    if tmp[553982]
    {
      (553992 'move' tmp[553981](553989 '_paramFoldLogical' tmp[553982] 1))
    }
    {
      unknown tmp[553994] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (553996 'move' tmp[553994](418211 call isTrue enablePostfixBangChecks[324]))
      (554001 'move' tmp[553981](553998 '_paramFoldLogical' tmp[553982] tmp[553994]))
    }
    unknown call_tmp[603629] "expr temp" "maybe param" "maybe type" "temp"
    (603632 'move' call_tmp[603629](40763 call _cond_test tmp[553981]))
    if call_tmp[603629]
    {
      unknown call_tmp[603636] "expr temp" "maybe param" "maybe type" "temp"
      (603639 'move' call_tmp[603636](40716 call chpl_t _mt[243] lhs[40662]))
      unknown call_tmp[603641] "expr temp" "maybe param" "maybe type" "temp"
      (603644 'move' call_tmp[603641](40720 call isNonNilableClass call_tmp[603636]))
      unknown call_tmp[603646] "expr temp" "maybe param" "maybe type" "temp"
      (603649 'move' call_tmp[603646](40758 call _cond_test call_tmp[603641]))
      if call_tmp[603646]
      {
        unknown call_tmp[603653] "expr temp" "maybe param" "maybe type" "temp"
        (603656 'move' call_tmp[603653](40722 call chpl_p _mt[243] rhs[40668]))
        unknown call_tmp[603658] "expr temp" "maybe param" "maybe type" "temp"
        (603661 'move' call_tmp[603658](40726 call == call_tmp[603653] nil[44]))
        unknown call_tmp[603663] "expr temp" "maybe param" "maybe type" "temp"
        (603666 'move' call_tmp[603663](40753 call _cond_test call_tmp[603658]))
        if call_tmp[603663]
        {
          (40750 call nilCheckHalt module=[255] HaltWrappers[209998] "assigning nil to non-nilable owned")
          (356896 'referenced modules list' HaltWrappers[209998])
        }
      }
    }
    unknown call_tmp[603672] "expr temp" "maybe param" "maybe type" "temp"
    (603675 'move' call_tmp[603672](40776 call(40772 call (partial) release _mt[243] rhs[40668])))
    (40778 call(40768 call (partial) retain _mt[243] lhs[40662]) call_tmp[603672])
    label _end_=[505185]
    (505187 return _void[55])
    (355024 'used modules list'(40684 'import' HaltWrappers[209998]))
  }
  where {
    unknown tmp[418164] "maybe param" "temp"
    (418175 'move' tmp[418164](40674 call isNonNilableClass lhs[40662]))
    unknown call_tmp[603677] "expr temp" "maybe param" "maybe type" "temp"
    (603680 'move' call_tmp[603677](418177 call _cond_invalid tmp[418164]))
    if call_tmp[603677]
    {
      (418180 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554008] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554009] "maybe param" "temp"
    unknown call_tmp[603682] "expr temp" "maybe param" "maybe type" "temp"
    (603685 'move' call_tmp[603682](418165 call isTrue tmp[418164]))
    (554014 'move' tmp[554009](554012 call _cond_test call_tmp[603682]))
    if tmp[554009]
    {
      unknown tmp[554016] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603687] "expr temp" "maybe param" "maybe type" "temp"
      (603690 'move' call_tmp[603687](40678 call isNilableClass rhs[40668]))
      (554018 'move' tmp[554016](418168 call isTrue call_tmp[603687]))
      (554023 'move' tmp[554008](554020 '_paramFoldLogical' tmp[554009] tmp[554016]))
    }
    {
      (554028 'move' tmp[554008](554025 '_paramFoldLogical' tmp[554009] 0))
    }
    (40681 call ! tmp[554008])
  }
  function =[40789](ref arg lhs[40786]:_owned[30](?), arg rhs[40792]:_nilType[42]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (40808 call(40804 call (partial) clear _mt[243] lhs[40786]))
    (505191 return _void[55])
  }
  where {
    unknown call_tmp[603694] "expr temp" "maybe param" "maybe type" "temp"
    (603697 'move' call_tmp[603694](40798 call isNonNilableClass lhs[40786]))
    (40799 call ! call_tmp[603694])
  }
  function <=>[40820](ref arg lhs[40817]:_owned[30](?), ref arg rhs[40824]:_owned[30](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[603701] "expr temp" "maybe param" "maybe type" "temp"
    (603704 'move' call_tmp[603701](40828 call chpl_p _mt[243] lhs[40817]))
    unknown call_tmp[603708] "expr temp" "maybe param" "maybe type" "temp"
    (603711 'move' call_tmp[603708](40832 call chpl_p _mt[243] rhs[40824]))
    (40835 call <=> call_tmp[603701] call_tmp[603708])
    (505193 return _void[55])
  }
  function chpl__initCopy[40847](ref arg src[40844]:_owned[30](?)) : _unknown[51] "init copy fn" "no doc"
  {
    unknown ret[505197] "RVV" "temp"
    unknown call_tmp[603713] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603716 'move' call_tmp[603713](747735 'new' _owned[30](?) src[40844]))
    unknown ret[40854] "dead at end of block"
    (540529 'init var' ret[40854] call_tmp[603713])
    (40857 'end of statement')
    (505202 'move' ret[505197](505201 'deref' ret[40854]))
    gotoReturn _end_chpl__initCopy[505195] _end_chpl__initCopy[505195]
    (474075 'end of statement' ret[40854])
    label _end_chpl__initCopy[505195]
    (505199 return ret[505197])
  }
  function chpl__autoCopy[40870](ref arg src[40867]:_owned[30](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[505208] "RVV" "temp"
    unknown call_tmp[603718] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603721 'move' call_tmp[603718](747736 'new' _owned[30](?) src[40867]))
    unknown ret[40877] "dead at end of block" "insert auto destroy"
    (540531 'init var' ret[40877] call_tmp[603718])
    (40880 'end of statement')
    (505213 'move' ret[505208](505212 'deref' ret[40877]))
    gotoReturn _end_chpl__autoCopy[505206] _end_chpl__autoCopy[505206]
    (474077 'end of statement' ret[40877])
    label _end_chpl__autoCopy[505206]
    (505210 return ret[505208])
  }
  function chpl__autoDestroy[40893](ref arg x[40890]:_owned[30](?)) : _unknown[51] "auto destroy fn" "no doc" "no return value for void"
  {
    unknown call_tmp[603723] "expr temp" "maybe param" "maybe type" "temp"
    (603726 'move' call_tmp[603723](40900 'deref' x[40890]))
    (40901 'call destructor' call_tmp[603723])
    (505217 return _void[55])
  }
  function _owned[30](?).readWriteThis[40911](arg _mt[40916]:_MT[238], arg this[40913]:_owned[30](?) :
  _owned[30](?), arg f[40909]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    unknown call_tmp[603730] "expr temp" "maybe param" "maybe type" "temp"
    (603733 'move' call_tmp[603730](40920 call chpl_p _mt[243] this[40913]))
    (40923 call <~> f[40909] call_tmp[603730])
    (505219 return _void[55])
  }
  function _cast[40938](arg t[40935]:owned?[415352](?), in arg x[40943]:owned[415356](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505223] "RVV" "temp"
    unknown call_tmp[603737] "expr temp" "maybe param" "maybe type" "temp"
    (603740 'move' call_tmp[603737](40967 call chpl_t _mt[243] t[40935]))
    unknown call_tmp[603742] "expr temp" "maybe param" "maybe type" "temp"
    (603745 'move' call_tmp[603742](40971 call _to_unmanaged call_tmp[603737]))
    unknown call_tmp[603747] "expr temp" "maybe param" "maybe type" "temp"
    (603750 'move' call_tmp[603747](40973 call _to_nilable call_tmp[603742]))
    unknown call_tmp[603754] "expr temp" "maybe param" "maybe type" "temp"
    (603757 'move' call_tmp[603754](40961 call chpl_p _mt[243] x[40943]))
    unknown call_tmp[603759] "maybe param" "maybe type" "temp"
    (603762 'move' call_tmp[603759](40974 call _cast call_tmp[603747] call_tmp[603754]))
    unknown castPtr[40976] "dead at end of block" "insert auto destroy"
    (540533 'init var' castPtr[40976] call_tmp[603759])
    (40979 'end of statement')
    unknown call_tmp[603766] "expr temp" "maybe param" "maybe type" "temp"
    (603769 'move' call_tmp[603766](40982 call chpl_p _mt[243] x[40943]))
    (40986 call = call_tmp[603766] nil[44])
    (474081 'end of statement')
    unknown call_tmp[603771] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603774 'move' call_tmp[603771](747737 'new' _owned[30](?) castPtr[40976]))
    (505228 'move' ret[505223](505227 'deref' call_tmp[603771]))
    gotoReturn _end__cast[505221] _end__cast[505221]
    (474082 'end of statement' castPtr[40976])
    label _end__cast[505221]
    (505225 return ret[505223])
  }
  where {
    unknown call_tmp[603778] "expr temp" "maybe param" "maybe type" "temp"
    (603781 'move' call_tmp[603778](40954 call chpl_t _mt[243] t[40935]))
    unknown call_tmp[603783] "expr temp" "maybe param" "maybe type" "temp"
    (603786 'move' call_tmp[603783](40958 call _to_nonnil call_tmp[603778]))
    unknown call_tmp[603790] "expr temp" "maybe param" "maybe type" "temp"
    (603793 'move' call_tmp[603790](40948 call chpl_t _mt[243] x[40943]))
    (354190 'is_subtype' call_tmp[603783] call_tmp[603790])
  }
  function _cast[41008](arg t[41005]:owned?[415352](?), in arg x[41014]:owned?[415352](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505234] "RVV" "temp"
    unknown call_tmp[603797] "expr temp" "maybe param" "maybe type" "temp"
    (603800 'move' call_tmp[603797](41035 call chpl_t _mt[243] t[41005]))
    unknown call_tmp[603802] "expr temp" "maybe param" "maybe type" "temp"
    (603805 'move' call_tmp[603802](41039 call _to_unmanaged call_tmp[603797]))
    unknown call_tmp[603807] "expr temp" "maybe param" "maybe type" "temp"
    (603810 'move' call_tmp[603807](41041 call _to_nilable call_tmp[603802]))
    unknown call_tmp[603814] "expr temp" "maybe param" "maybe type" "temp"
    (603817 'move' call_tmp[603814](41029 call chpl_p _mt[243] x[41014]))
    unknown call_tmp[603819] "maybe param" "maybe type" "temp"
    (603822 'move' call_tmp[603819](41042 call _cast call_tmp[603807] call_tmp[603814]))
    unknown castPtr[41044] "dead at end of block" "insert auto destroy"
    (540535 'init var' castPtr[41044] call_tmp[603819])
    (41047 'end of statement')
    unknown call_tmp[603826] "expr temp" "maybe param" "maybe type" "temp"
    (603829 'move' call_tmp[603826](41050 call chpl_p _mt[243] x[41014]))
    (41054 call = call_tmp[603826] nil[44])
    (474084 'end of statement')
    unknown call_tmp[603831] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603834 'move' call_tmp[603831](747738 'new' _owned[30](?) castPtr[41044]))
    (505239 'move' ret[505234](505238 'deref' call_tmp[603831]))
    gotoReturn _end__cast[505232] _end__cast[505232]
    (474085 'end of statement' castPtr[41044])
    label _end__cast[505232]
    (505236 return ret[505234])
  }
  where {
    unknown call_tmp[603838] "expr temp" "maybe param" "maybe type" "temp"
    (603841 'move' call_tmp[603838](41024 call chpl_t _mt[243] t[41005]))
    unknown call_tmp[603845] "expr temp" "maybe param" "maybe type" "temp"
    (603848 'move' call_tmp[603845](41019 call chpl_t _mt[243] x[41014]))
    (354191 'is_subtype' call_tmp[603838] call_tmp[603845])
  }
  function _cast[41075](arg t[41072]:owned[415356](?), in arg x[41080]:owned[415356](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505245] "RVV" "temp"
    unknown call_tmp[603852] "expr temp" "maybe param" "maybe type" "temp"
    (603855 'move' call_tmp[603852](41101 call chpl_t _mt[243] t[41072]))
    unknown call_tmp[603857] "expr temp" "maybe param" "maybe type" "temp"
    (603860 'move' call_tmp[603857](41105 call _to_unmanaged call_tmp[603852]))
    unknown call_tmp[603862] "expr temp" "maybe param" "maybe type" "temp"
    (603865 'move' call_tmp[603862](41107 call _to_nilable call_tmp[603857]))
    unknown call_tmp[603869] "expr temp" "maybe param" "maybe type" "temp"
    (603872 'move' call_tmp[603869](41095 call chpl_p _mt[243] x[41080]))
    unknown call_tmp[603874] "maybe param" "maybe type" "temp"
    (603877 'move' call_tmp[603874](41108 call _cast call_tmp[603862] call_tmp[603869]))
    unknown castPtr[41110] "dead at end of block" "insert auto destroy"
    (540537 'init var' castPtr[41110] call_tmp[603874])
    (41113 'end of statement')
    unknown call_tmp[603881] "expr temp" "maybe param" "maybe type" "temp"
    (603884 'move' call_tmp[603881](41116 call chpl_p _mt[243] x[41080]))
    (41120 call = call_tmp[603881] nil[44])
    (474087 'end of statement')
    unknown call_tmp[603886] "expr temp" "maybe param" "maybe type" "temp"
    (603889 'move' call_tmp[603886](41126 call postfix! castPtr[41110]))
    unknown call_tmp[603891] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603894 'move' call_tmp[603891](747739 'new' _owned[30](?) call_tmp[603886]))
    (505250 'move' ret[505245](505249 'deref' call_tmp[603891]))
    gotoReturn _end__cast[505243] _end__cast[505243]
    (474088 'end of statement' castPtr[41110])
    label _end__cast[505243]
    (505247 return ret[505245])
  }
  where {
    unknown call_tmp[603898] "expr temp" "maybe param" "maybe type" "temp"
    (603901 'move' call_tmp[603898](41090 call chpl_t _mt[243] t[41072]))
    unknown call_tmp[603905] "expr temp" "maybe param" "maybe type" "temp"
    (603908 'move' call_tmp[603905](41085 call chpl_t _mt[243] x[41080]))
    (354192 'is_subtype' call_tmp[603898] call_tmp[603905])
  }
  function _cast[41143](arg t[41140]:owned[415356](?), in arg x[41149]:owned?[415352](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505256] "RVV" "temp"
    unknown call_tmp[603912] "expr temp" "maybe param" "maybe type" "temp"
    (603915 'move' call_tmp[603912](41173 call chpl_t _mt[243] t[41140]))
    unknown call_tmp[603917] "expr temp" "maybe param" "maybe type" "temp"
    (603920 'move' call_tmp[603917](41177 call _to_unmanaged call_tmp[603912]))
    unknown call_tmp[603922] "expr temp" "maybe param" "maybe type" "temp"
    (603925 'move' call_tmp[603922](41179 call _to_nilable call_tmp[603917]))
    unknown call_tmp[603929] "expr temp" "maybe param" "maybe type" "temp"
    (603932 'move' call_tmp[603929](41167 call chpl_p _mt[243] x[41149]))
    unknown call_tmp[603934] "maybe param" "maybe type" "temp"
    (603937 'move' call_tmp[603934](41180 call _cast call_tmp[603922] call_tmp[603929]))
    unknown castPtr[41182] "dead at end of block" "insert auto destroy"
    (540539 'init var' castPtr[41182] call_tmp[603934])
    (41185 'end of statement')
    unknown call_tmp[603939] "expr temp" "maybe param" "maybe type" "temp"
    (603942 'move' call_tmp[603939](41189 call == castPtr[41182] nil[44]))
    unknown call_tmp[603944] "expr temp" "maybe param" "maybe type" "temp"
    (603947 'move' call_tmp[603944](41200 call _cond_test call_tmp[603939]))
    if call_tmp[603944]
    {
      unknown call_tmp[603949] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (603952 'move' call_tmp[603949](747740 'new' NilClassError[368285](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[603954] "expr temp" "maybe param" "maybe type" "temp"
      (603957 'move' call_tmp[603954](468029 call chpl_fix_thrown_error call_tmp[603949]))
      (41197 'throw' call_tmp[603954])
    }
    unknown call_tmp[603961] "expr temp" "maybe param" "maybe type" "temp"
    (603964 'move' call_tmp[603961](41205 call chpl_p _mt[243] x[41149]))
    (41209 call = call_tmp[603961] nil[44])
    (474091 'end of statement')
    unknown call_tmp[603966] "expr temp" "maybe param" "maybe type" "temp"
    (603969 'move' call_tmp[603966](41215 call postfix! castPtr[41182]))
    unknown call_tmp[603971] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603974 'move' call_tmp[603971](747741 'new' _owned[30](?) call_tmp[603966]))
    (505261 'move' ret[505256](505260 'deref' call_tmp[603971]))
    gotoReturn _end__cast[505254] _end__cast[505254]
    (474092 'end of statement' castPtr[41182])
    label _end__cast[505254]
    (505258 return ret[505256])
  }
  where {
    unknown call_tmp[603978] "expr temp" "maybe param" "maybe type" "temp"
    (603981 'move' call_tmp[603978](41162 call chpl_t _mt[243] t[41140]))
    unknown call_tmp[603985] "expr temp" "maybe param" "maybe type" "temp"
    (603988 'move' call_tmp[603985](41155 call chpl_t _mt[243] x[41149]))
    unknown call_tmp[603990] "expr temp" "maybe param" "maybe type" "temp"
    (603993 'move' call_tmp[603990](41159 call _to_nonnil call_tmp[603985]))
    (354193 'is_subtype' call_tmp[603978] call_tmp[603990])
  }
  function _cast[41232](arg t[41229]:owned[415356](?), ref arg x[41238]:owned?[415352](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505267] "RVV" "temp"
    unknown call_tmp[603997] "expr temp" "maybe param" "maybe type" "temp"
    (604000 'move' call_tmp[603997](41256 call chpl_p _mt[243] x[41238]))
    unknown call_tmp[604002] "expr temp" "maybe param" "maybe type" "temp"
    (604005 'move' call_tmp[604002](41260 call == call_tmp[603997] nil[44]))
    unknown call_tmp[604007] "expr temp" "maybe param" "maybe type" "temp"
    (604010 'move' call_tmp[604007](41271 call _cond_test call_tmp[604002]))
    if call_tmp[604007]
    {
      unknown call_tmp[604012] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (604015 'move' call_tmp[604012](747742 'new' NilClassError[368285](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[604017] "expr temp" "maybe param" "maybe type" "temp"
      (604020 'move' call_tmp[604017](468031 call chpl_fix_thrown_error call_tmp[604012]))
      (41268 'throw' call_tmp[604017])
    }
    unknown call_tmp[604024] "expr temp" "maybe param" "maybe type" "temp"
    (604027 'move' call_tmp[604024](41283 call chpl_t _mt[243] t[41229]))
    unknown call_tmp[604029] "expr temp" "maybe param" "maybe type" "temp"
    (604032 'move' call_tmp[604029](41287 call _to_unmanaged call_tmp[604024]))
    unknown call_tmp[604034] "expr temp" "maybe param" "maybe type" "temp"
    (604037 'move' call_tmp[604034](41289 call _to_nonnil call_tmp[604029]))
    unknown call_tmp[604041] "expr temp" "maybe param" "maybe type" "temp"
    (604044 'move' call_tmp[604041](41277 call chpl_p _mt[243] x[41238]))
    unknown call_tmp[604046] "maybe param" "maybe type" "temp"
    (604049 'move' call_tmp[604046](41290 call _cast call_tmp[604034] call_tmp[604041]))
    unknown castPtr[41293] "dead at end of block" "insert auto destroy"
    (540541 'init var' castPtr[41293] call_tmp[604046])
    (41296 'end of statement')
    unknown call_tmp[604053] "expr temp" "maybe param" "maybe type" "temp"
    (604056 'move' call_tmp[604053](41298 call chpl_p _mt[243] x[41238]))
    (41302 call = call_tmp[604053] nil[44])
    (474095 'end of statement')
    unknown call_tmp[604058] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604061 'move' call_tmp[604058](747743 'new' _owned[30](?) castPtr[41293]))
    (505272 'move' ret[505267](505271 'deref' call_tmp[604058]))
    gotoReturn _end__cast[505265] _end__cast[505265]
    (474096 'end of statement' castPtr[41293])
    label _end__cast[505265]
    (505269 return ret[505267])
  }
  where {
    unknown call_tmp[604065] "expr temp" "maybe param" "maybe type" "temp"
    (604068 'move' call_tmp[604065](41249 call chpl_t _mt[243] x[41238]))
    unknown call_tmp[604070] "expr temp" "maybe param" "maybe type" "temp"
    (604073 'move' call_tmp[604070](41253 call _to_nonnil call_tmp[604065]))
    unknown call_tmp[604077] "expr temp" "maybe param" "maybe type" "temp"
    (604080 'move' call_tmp[604077](41243 call chpl_t _mt[243] t[41229]))
    (354194 'is_proper_subtype' call_tmp[604070] call_tmp[604077])
  }
  function _cast[41323](arg t[41320]:owned[415356](?), ref arg x[41328]:owned[415356](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505278] "RVV" "temp"
    unknown call_tmp[604084] "expr temp" "maybe param" "maybe type" "temp"
    (604087 'move' call_tmp[604084](41349 call chpl_t _mt[243] t[41320]))
    unknown call_tmp[604089] "expr temp" "maybe param" "maybe type" "temp"
    (604092 'move' call_tmp[604089](41353 call _to_unmanaged call_tmp[604084]))
    unknown call_tmp[604094] "expr temp" "maybe param" "maybe type" "temp"
    (604097 'move' call_tmp[604094](41355 call _to_nonnil call_tmp[604089]))
    unknown call_tmp[604101] "expr temp" "maybe param" "maybe type" "temp"
    (604104 'move' call_tmp[604101](41343 call chpl_p _mt[243] x[41328]))
    unknown call_tmp[604106] "maybe param" "maybe type" "temp"
    (604109 'move' call_tmp[604106](41356 call _cast call_tmp[604094] call_tmp[604101]))
    unknown castPtr[41359] "dead at end of block" "insert auto destroy"
    (540543 'init var' castPtr[41359] call_tmp[604106])
    (41362 'end of statement')
    unknown call_tmp[604113] "expr temp" "maybe param" "maybe type" "temp"
    (604116 'move' call_tmp[604113](41365 call chpl_p _mt[243] x[41328]))
    (41369 call = call_tmp[604113] nil[44])
    (474098 'end of statement')
    unknown call_tmp[604118] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604121 'move' call_tmp[604118](747744 'new' _owned[30](?) castPtr[41359]))
    (505283 'move' ret[505278](505282 'deref' call_tmp[604118]))
    gotoReturn _end__cast[505276] _end__cast[505276]
    (474099 'end of statement' castPtr[41359])
    label _end__cast[505276]
    (505280 return ret[505278])
  }
  where {
    unknown call_tmp[604125] "expr temp" "maybe param" "maybe type" "temp"
    (604128 'move' call_tmp[604125](41338 call chpl_t _mt[243] x[41328]))
    unknown call_tmp[604132] "expr temp" "maybe param" "maybe type" "temp"
    (604135 'move' call_tmp[604132](41333 call chpl_t _mt[243] t[41320]))
    (354195 'is_proper_subtype' call_tmp[604125] call_tmp[604132])
  }
  function _cast[41391](arg t[41388]:owned?[415352](?), ref arg x[41397]:owned?[415352](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505289] "RVV" "temp"
    unknown call_tmp[604139] "expr temp" "maybe param" "maybe type" "temp"
    (604142 'move' call_tmp[604139](41418 call chpl_t _mt[243] t[41388]))
    unknown call_tmp[604144] "expr temp" "maybe param" "maybe type" "temp"
    (604147 'move' call_tmp[604144](41422 call _to_unmanaged call_tmp[604139]))
    unknown call_tmp[604149] "expr temp" "maybe param" "maybe type" "temp"
    (604152 'move' call_tmp[604149](41424 call _to_nilable call_tmp[604144]))
    unknown call_tmp[604156] "expr temp" "maybe param" "maybe type" "temp"
    (604159 'move' call_tmp[604156](41412 call chpl_p _mt[243] x[41397]))
    unknown call_tmp[604161] "maybe param" "maybe type" "temp"
    (604164 'move' call_tmp[604161](41425 call _cast call_tmp[604149] call_tmp[604156]))
    unknown castPtr[41427] "dead at end of block" "insert auto destroy"
    (540545 'init var' castPtr[41427] call_tmp[604161])
    (41430 'end of statement')
    unknown call_tmp[604166] "expr temp" "maybe param" "maybe type" "temp"
    (604169 'move' call_tmp[604166](41434 call != castPtr[41427] nil[44]))
    unknown call_tmp[604171] "expr temp" "maybe param" "maybe type" "temp"
    (604174 'move' call_tmp[604171](41445 call _cond_test call_tmp[604166]))
    if call_tmp[604171]
    {
      unknown call_tmp[604178] "expr temp" "maybe param" "maybe type" "temp"
      (604181 'move' call_tmp[604178](41437 call chpl_p _mt[243] x[41397]))
      (41441 call = call_tmp[604178] nil[44])
    }
    unknown call_tmp[604183] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604186 'move' call_tmp[604183](747745 'new' _owned[30](?) castPtr[41427]))
    (505294 'move' ret[505289](505293 'deref' call_tmp[604183]))
    gotoReturn _end__cast[505287] _end__cast[505287]
    (474102 'end of statement' castPtr[41427])
    label _end__cast[505287]
    (505291 return ret[505289])
  }
  where {
    unknown call_tmp[604190] "expr temp" "maybe param" "maybe type" "temp"
    (604193 'move' call_tmp[604190](41407 call chpl_t _mt[243] x[41397]))
    unknown call_tmp[604197] "expr temp" "maybe param" "maybe type" "temp"
    (604200 'move' call_tmp[604197](41402 call chpl_t _mt[243] t[41388]))
    (354196 'is_proper_subtype' call_tmp[604190] call_tmp[604197])
  }
  function _cast[41468](arg t[41465]:owned?[415352](?), ref arg x[41473]:owned[415356](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505300] "RVV" "temp"
    unknown call_tmp[604204] "expr temp" "maybe param" "maybe type" "temp"
    (604207 'move' call_tmp[604204](41497 call chpl_t _mt[243] t[41465]))
    unknown call_tmp[604209] "expr temp" "maybe param" "maybe type" "temp"
    (604212 'move' call_tmp[604209](41501 call _to_unmanaged call_tmp[604204]))
    unknown call_tmp[604214] "expr temp" "maybe param" "maybe type" "temp"
    (604217 'move' call_tmp[604214](41503 call _to_nilable call_tmp[604209]))
    unknown call_tmp[604221] "expr temp" "maybe param" "maybe type" "temp"
    (604224 'move' call_tmp[604221](41491 call chpl_p _mt[243] x[41473]))
    unknown call_tmp[604226] "maybe param" "maybe type" "temp"
    (604229 'move' call_tmp[604226](41504 call _cast call_tmp[604214] call_tmp[604221]))
    unknown castPtr[41506] "dead at end of block" "insert auto destroy"
    (540547 'init var' castPtr[41506] call_tmp[604226])
    (41509 'end of statement')
    unknown call_tmp[604231] "expr temp" "maybe param" "maybe type" "temp"
    (604234 'move' call_tmp[604231](41513 call != castPtr[41506] nil[44]))
    unknown call_tmp[604236] "expr temp" "maybe param" "maybe type" "temp"
    (604239 'move' call_tmp[604236](41524 call _cond_test call_tmp[604231]))
    if call_tmp[604236]
    {
      unknown call_tmp[604243] "expr temp" "maybe param" "maybe type" "temp"
      (604246 'move' call_tmp[604243](41516 call chpl_p _mt[243] x[41473]))
      (41520 call = call_tmp[604243] nil[44])
    }
    unknown call_tmp[604248] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604251 'move' call_tmp[604248](747746 'new' _owned[30](?) castPtr[41506]))
    (505305 'move' ret[505300](505304 'deref' call_tmp[604248]))
    gotoReturn _end__cast[505298] _end__cast[505298]
    (474105 'end of statement' castPtr[41506])
    label _end__cast[505298]
    (505302 return ret[505300])
  }
  where {
    unknown call_tmp[604255] "expr temp" "maybe param" "maybe type" "temp"
    (604258 'move' call_tmp[604255](41486 call chpl_t _mt[243] x[41473]))
    unknown call_tmp[604262] "expr temp" "maybe param" "maybe type" "temp"
    (604265 'move' call_tmp[604262](41479 call chpl_t _mt[243] t[41465]))
    unknown call_tmp[604267] "expr temp" "maybe param" "maybe type" "temp"
    (604270 'move' call_tmp[604267](41483 call _to_nonnil call_tmp[604262]))
    (354197 'is_proper_subtype' call_tmp[604255] call_tmp[604267])
  }
  function _cast[41544](arg t[41541]:_owned[30](?), arg x[41547]:_nilType[42]) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505311] "RVV" "temp"
    unknown call_tmp[604274] "expr temp" "maybe param" "maybe type" "temp"
    (604277 'move' call_tmp[604274](41552 call chpl_t _mt[243] t[41541]))
    unknown call_tmp[604279] "expr temp" "maybe param" "maybe type" "temp"
    (604282 'move' call_tmp[604279](41556 call isNonNilableClass call_tmp[604274]))
    unknown call_tmp[604284] "expr temp" "maybe param" "maybe type" "temp"
    (604287 'move' call_tmp[604284](41578 call _cond_test call_tmp[604279]))
    if call_tmp[604284]
    {
      (41576 call compilerError "Illegal cast from nil to non-nilable owned type")
    }
    unknown tmp[41585] "dead at end of block" "insert auto destroy"
    (540549 'default init var' tmp[41585] t[41541])
    (41588 'end of statement')
    (505316 'move' ret[505311](505315 'deref' tmp[41585]))
    gotoReturn _end__cast[505309] _end__cast[505309]
    (474108 'end of statement' tmp[41585])
    label _end__cast[505309]
    (505313 return ret[505311])
  }
  function postfix![41600](const  ref arg x[41597]:_owned[30](?)) : _unknown[51] "always propagate line file info" "inline" "no doc"
  {
    unknown ret[505322] "RVV" "temp"
    unknown call_tmp[604289] "expr temp" "maybe param" "maybe type" "temp"
    (604292 'move' call_tmp[604289](41646 call _cond_test 1))
    if call_tmp[604289]
    {
      unknown call_tmp[604296] "expr temp" "maybe param" "maybe type" "temp"
      (604299 'move' call_tmp[604296](41609 call chpl_t _mt[243] x[41597]))
      unknown call_tmp[604301] "expr temp" "maybe param" "maybe type" "temp"
      (604304 'move' call_tmp[604301](41613 call _to_nilable call_tmp[604296]))
      unknown call_tmp[604308] "expr temp" "maybe param" "maybe type" "temp"
      (604311 'move' call_tmp[604308](41615 call chpl_t _mt[243] x[41597]))
      unknown call_tmp[604313] "expr temp" "maybe param" "maybe type" "temp"
      (604316 'move' call_tmp[604313](41618 call == call_tmp[604301] call_tmp[604308]))
      unknown call_tmp[604318] "expr temp" "maybe param" "maybe type" "temp"
      (604321 'move' call_tmp[604318](41641 call _cond_test call_tmp[604313]))
      if call_tmp[604318]
      {
        unknown call_tmp[604325] "expr temp" "maybe param" "maybe type" "temp"
        (604328 'move' call_tmp[604325](41621 call chpl_p _mt[243] x[41597]))
        unknown call_tmp[604330] "expr temp" "maybe param" "maybe type" "temp"
        (604333 'move' call_tmp[604330](41625 call == call_tmp[604325] nil[44]))
        unknown call_tmp[604335] "expr temp" "maybe param" "maybe type" "temp"
        (604338 'move' call_tmp[604335](41636 call _cond_test call_tmp[604330]))
        if call_tmp[604335]
        {
          (41633 call nilCheckHalt module=[255] HaltWrappers[209998] "argument to ! is nil")
          (356953 'referenced modules list' HaltWrappers[209998])
        }
      }
    }
    unknown call_tmp[604342] "expr temp" "maybe param" "maybe type" "temp"
    (604345 'move' call_tmp[604342](41652 call chpl_p _mt[243] x[41597]))
    unknown call_tmp[604347] "expr temp" "maybe param" "maybe type" "temp"
    (604350 'move' call_tmp[604347](41656 call _to_nonnil call_tmp[604342]))
    (505327 'move' ret[505322](505326 'deref' call_tmp[604347]))
    (505324 return ret[505322])
    (355026 'used modules list'(41603 'import' HaltWrappers[209998]))
  }
  (355022 'used modules list'(39585 'use' ChapelStandard[20264]))
}