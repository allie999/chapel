AST dump for OwnedObject after pass createTaskFunctions.
Module use list: ChapelStandard HaltWrappers 

{
  function chpl__init_OwnedObject[415962]() : void[4] "insert line file info" "module init"
  {
    (505370 return _void[55])
  }
  function _owned[30](?).chpl_forwarding_expr1[39606](arg _mt[40583]:_MT[238], arg this[40581]:_owned[30](?)) : _unknown[51] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[505124] "RVV" "temp"
    (505128 'move' ret[505124](39605 call(370416 call (partial) borrow _mt[243] this[40581])))
    (505126 return ret[505124])
  }
  function _owned[30](?).init[39616](arg _mt[40587]:_MT[238], ref arg this[40585]:_owned[30](?), arg chpl_t[39614]:_any[178](?)) : void[4] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[602963] "expr temp" "maybe param" "maybe type" "temp"
    (602966 'move' call_tmp[602963](39621 call isClass chpl_t[39614]))
    unknown call_tmp[602968] "expr temp" "maybe param" "maybe type" "temp"
    (602971 'move' call_tmp[602968](39622 call ! call_tmp[602963]))
    unknown call_tmp[602973] "expr temp" "maybe param" "maybe type" "temp"
    (602976 'move' call_tmp[602973](39645 call _cond_test call_tmp[602968]))
    if call_tmp[602973]
    {
      (39643 call compilerError "owned only works with classes")
    }
    unknown tmp[454092] "temp" "type variable"
    (454094 'move' tmp[454092](39660 call _to_borrowed chpl_t[39614]))
    (454096 'init field' this[40585] c"chpl_t" tmp[454092])
    (474061 'end of statement')
    unknown call_tmp[602978] "expr temp" "maybe param" "maybe type" "temp"
    (602981 'move' call_tmp[602978](454110 '.v' this[40585] c"chpl_t"))
    unknown call_tmp[602983] "maybe param" "maybe type" "temp"
    (602986 'move' call_tmp[602983](454102 'to nilable class' call_tmp[602978]))
    unknown tmp[454100] "temp"
    (454104 'init var' tmp[454100] nil[44] call_tmp[602983])
    (454106 'init field' this[40585] c"chpl_p" tmp[454100])
    (474062 'end of statement')
    (505130 return _void[55])
  }
  function _owned[30](?).init[39682](arg _mt[40591]:_MT[238], ref arg this[40589]:_owned[30](?), arg p[39679]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (39703 call compilerError "cannot initialize owned from a borrow")
    (474063 'end of statement')
    unknown call_tmp[602990] "expr temp" "maybe param" "maybe type" "temp"
    (602993 'move' call_tmp[602990](39715 call _to_unmanaged p[39679]))
    (39717 call(39709 call (partial) init _mt[243] this[40589]) call_tmp[602990])
    (505132 return _void[55])
  }
  function _owned[30](?).init[39727](arg _mt[40595]:_MT[238], ref arg this[40593]:_owned[30](?), arg p[39724]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454113] "temp" "type variable"
    unknown call_tmp[602995] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602998 'move' call_tmp[602995](39735 'typeof' p[39724]))
    (454115 'move' tmp[454113](39737 call _to_borrowed call_tmp[602995]))
    (454117 'init field' this[40593] c"chpl_t" tmp[454113])
    (474065 'end of statement')
    unknown call_tmp[603000] "maybe param" "maybe type" "temp"
    (603003 'move' call_tmp[603000](39749 call _to_borrowed p[39724]))
    unknown call_tmp[603005] "expr temp" "maybe param" "maybe type" "temp"
    (603008 'move' call_tmp[603005](454131 '.v' this[40593] c"chpl_t"))
    unknown call_tmp[603010] "maybe param" "maybe type" "temp"
    (603013 'move' call_tmp[603010](454123 'to nilable class' call_tmp[603005]))
    unknown tmp[454121] "temp"
    (454125 'init var' tmp[454121] call_tmp[603000] call_tmp[603010])
    (454127 'init field' this[40593] c"chpl_p" tmp[454121])
    (474066 'end of statement')
    (505134 return _void[55])
  }
  function _owned[30](?).init[39762](arg _mt[40599]:_MT[238], ref arg this[40597]:_owned[30](?), arg p[39759]:_any[178](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (39793 call compilerError "owned only works with classes")
    (474067 'end of statement')
    unknown tmp[454140] "temp" "type variable"
    (454142 'move' tmp[454140](454134 'typeof' p[39759]))
    (454144 'init field' this[40597] c"chpl_t" tmp[454140])
    (474068 'end of statement')
    unknown call_tmp[603015] "expr temp" "maybe param" "maybe type" "temp"
    (603018 'move' call_tmp[603015](454158 '.v' this[40597] c"chpl_t"))
    unknown call_tmp[603020] "maybe param" "maybe type" "temp"
    (603023 'move' call_tmp[603020](454150 'to nilable class' call_tmp[603015]))
    unknown tmp[454148] "temp"
    (454152 'init var' tmp[454148] p[39759] call_tmp[603020])
    (454154 'init field' this[40597] c"chpl_p" tmp[454148])
    (474069 'end of statement')
    (505136 return _void[55])
  }
  where {
    unknown tmp[418139] "maybe param" "temp"
    unknown tmp[418160] "maybe param" "temp"
    unknown call_tmp[603025] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603028 'move' call_tmp[603025](454136 'typeof' p[39759]))
    unknown call_tmp[603030] "expr temp" "maybe param" "maybe type" "temp"
    (603033 'move' call_tmp[603030](39767 call isClass call_tmp[603025]))
    (418171 'move' tmp[418160](39769 call == call_tmp[603030] 0))
    unknown call_tmp[603035] "expr temp" "maybe param" "maybe type" "temp"
    (603038 'move' call_tmp[603035](418173 call _cond_invalid tmp[418160]))
    if call_tmp[603035]
    {
      (418176 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553912] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553913] "maybe param" "temp"
    unknown call_tmp[603040] "expr temp" "maybe param" "maybe type" "temp"
    (603043 'move' call_tmp[603040](418161 call isTrue tmp[418160]))
    (553918 'move' tmp[553913](553916 call _cond_test call_tmp[603040]))
    if tmp[553913]
    {
      unknown tmp[553920] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603045] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603048 'move' call_tmp[603045](454138 'typeof' p[39759]))
      unknown call_tmp[603050] "expr temp" "maybe param" "maybe type" "temp"
      (603053 'move' call_tmp[603050](354226 'is_subtype' _owned[30](?) call_tmp[603045]))
      unknown call_tmp[603055] "expr temp" "maybe param" "maybe type" "temp"
      (603058 'move' call_tmp[603055](39777 call == call_tmp[603050] 0))
      (553922 'move' tmp[553920](418164 call isTrue call_tmp[603055]))
      (553927 'move' tmp[553912](553924 '_paramFoldLogical' tmp[553913] tmp[553920]))
    }
    {
      (553932 'move' tmp[553912](553929 '_paramFoldLogical' tmp[553913] 0))
    }
    (418150 'move' tmp[418139] tmp[553912])
    unknown call_tmp[603060] "expr temp" "maybe param" "maybe type" "temp"
    (603063 'move' call_tmp[603060](418152 call _cond_invalid tmp[418139]))
    if call_tmp[603060]
    {
      (418155 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553939] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553940] "maybe param" "temp"
    unknown call_tmp[603065] "expr temp" "maybe param" "maybe type" "temp"
    (603068 'move' call_tmp[603065](418140 call isTrue tmp[418139]))
    (553945 'move' tmp[553940](553943 call _cond_test call_tmp[603065]))
    if tmp[553940]
    {
      unknown tmp[553947] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603070] "expr temp" "maybe param" "maybe type" "temp"
      (603073 'move' call_tmp[603070](39784 call isIterator p[39759]))
      unknown call_tmp[603075] "expr temp" "maybe param" "maybe type" "temp"
      (603078 'move' call_tmp[603075](39786 call == call_tmp[603070] 0))
      (553949 'move' tmp[553947](418143 call isTrue call_tmp[603075]))
      (553954 'move' tmp[553939](553951 '_paramFoldLogical' tmp[553940] tmp[553947]))
    }
    {
      (553959 'move' tmp[553939](553956 '_paramFoldLogical' tmp[553940] 0))
    }
    (748195 call chpl_statementLevelSymbol tmp[553939])
  }
  function _owned[30](?).init=[39821](arg _mt[40603]:_MT[238], ref arg this[40601]:_owned[30](?), ref arg src[39818]:_owned[30](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[418181] "maybe param" "temp"
    unknown call_tmp[603080] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603083 'move' call_tmp[603080](39825 'typeof' this[40601]))
    (418192 'move' tmp[418181](39827 call isNonNilableClass call_tmp[603080]))
    unknown call_tmp[603085] "expr temp" "maybe param" "maybe type" "temp"
    (603088 'move' call_tmp[603085](418194 call _cond_invalid tmp[418181]))
    if call_tmp[603085]
    {
      (418197 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553966] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553967] "maybe param" "temp"
    unknown call_tmp[603090] "expr temp" "maybe param" "maybe type" "temp"
    (603093 'move' call_tmp[603090](418182 call isTrue tmp[418181]))
    (553972 'move' tmp[553967](553970 call _cond_test call_tmp[603090]))
    if tmp[553967]
    {
      unknown tmp[553974] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603095] "expr temp" "maybe param" "maybe type" "temp"
      (603098 'move' call_tmp[603095](39831 call isNilableClass src[39818]))
      (553976 'move' tmp[553974](418185 call isTrue call_tmp[603095]))
      (553981 'move' tmp[553966](553978 '_paramFoldLogical' tmp[553967] tmp[553974]))
    }
    {
      (553986 'move' tmp[553966](553983 '_paramFoldLogical' tmp[553967] 0))
    }
    unknown call_tmp[603100] "expr temp" "maybe param" "maybe type" "temp"
    (603103 'move' call_tmp[603100](39857 call _cond_test tmp[553966]))
    if call_tmp[603100]
    {
      (39855 call compilerError "cannot create a non-nilable owned variable from a nilable class instance")
    }
    unknown call_tmp[603105] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603108 'move' call_tmp[603105](39870 'typeof' this[40601]))
    unknown call_tmp[603112] "expr temp" "maybe param" "maybe type" "temp"
    (603115 'move' call_tmp[603112](39871 call chpl_t _mt[243] call_tmp[603105]))
    unknown call_tmp[603119] "expr temp" "maybe param" "maybe type" "temp"
    (603122 'move' call_tmp[603119](39865 call chpl_t _mt[243] src[39818]))
    unknown call_tmp[603124] "expr temp" "maybe param" "maybe type" "temp"
    (603127 'move' call_tmp[603124](354227 'is_coercible' call_tmp[603112] call_tmp[603119]))
    unknown call_tmp[603129] "expr temp" "maybe param" "maybe type" "temp"
    (603132 'move' call_tmp[603129](39876 call == call_tmp[603124] 0))
    unknown call_tmp[603134] "expr temp" "maybe param" "maybe type" "temp"
    (603137 'move' call_tmp[603134](39943 call _cond_test call_tmp[603129]))
    if call_tmp[603134]
    {
      unknown call_tmp[603139] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603142 'move' call_tmp[603139](39898 'typeof' src[39818]))
      unknown call_tmp[603144] "expr temp" "maybe param" "maybe type" "temp"
      (603147 'move' call_tmp[603144](39900 call _cast string[26] call_tmp[603139]))
      unknown call_tmp[603149] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603152 'move' call_tmp[603149](39920 'typeof' this[40601]))
      unknown call_tmp[603154] "expr temp" "maybe param" "maybe type" "temp"
      (603157 'move' call_tmp[603154](39922 call _cast string[26] call_tmp[603149]))
      (39941 call compilerError "cannot coerce '" call_tmp[603144] "' to '" call_tmp[603154] "' in initialization")
    }
    unknown tmp[454161] "temp" "type variable"
    unknown call_tmp[603159] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603162 'move' call_tmp[603159](39953 'typeof' this[40601]))
    (454163 'move' tmp[454161](39954 call chpl_t _mt[243] call_tmp[603159]))
    (454165 'init field' this[40601] c"chpl_t" tmp[454161])
    (474073 'end of statement')
    unknown call_tmp[603168] "maybe param" "maybe type" "temp"
    (603171 'move' call_tmp[603168](39969 call(39965 call (partial) release _mt[243] src[39818])))
    unknown call_tmp[603173] "expr temp" "maybe param" "maybe type" "temp"
    (603176 'move' call_tmp[603173](454179 '.v' this[40601] c"chpl_t"))
    unknown call_tmp[603178] "maybe param" "maybe type" "temp"
    (603181 'move' call_tmp[603178](454171 'to nilable class' call_tmp[603173]))
    unknown tmp[454169] "temp"
    (454173 'init var' tmp[454169] call_tmp[603168] call_tmp[603178])
    (454175 'init field' this[40601] c"chpl_p" tmp[454169])
    (474074 'end of statement')
    (505138 return _void[55])
  }
  function _owned[30](?).init=[39988](arg _mt[40607]:_MT[238], ref arg this[40605]:_owned[30](?), arg src[39985]:_shared[32](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40009 call compilerError "cannot create an owned variable from a shared class instance")
    (474075 'end of statement')
    unknown tmp[454182] "temp" "type variable"
    (454184 'move' tmp[454182] int(64)[13])
    (454186 'init field' this[40605] c"chpl_t" tmp[454182])
    (474076 'end of statement')
    unknown tmp[454191] "temp"
    unknown call_tmp[603183] "expr temp" "maybe param" "maybe type" "temp"
    (603186 'move' call_tmp[603183](454201 '.v' this[40605] c"chpl_t"))
    unknown call_tmp[603188] "expr temp" "maybe param" "maybe type" "temp"
    (603191 'move' call_tmp[603188](454193 'to nilable class' call_tmp[603183]))
    (454195 'default init var' tmp[454191] call_tmp[603188])
    (454197 '.=' this[40605] c"chpl_p" tmp[454191])
    (474077 'end of statement')
    (505140 return _void[55])
  }
  function _owned[30](?).init=[40028](arg _mt[40611]:_MT[238], ref arg this[40609]:_owned[30](?), arg src[40025]:borrowed[211](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40051 call compilerError "cannot create an owned variable from a borrowed class instance")
    (474078 'end of statement')
    unknown tmp[454204] "temp" "type variable"
    (454206 'move' tmp[454204] int(64)[13])
    (454208 'init field' this[40609] c"chpl_t" tmp[454204])
    (474079 'end of statement')
    unknown tmp[454213] "temp"
    unknown call_tmp[603193] "expr temp" "maybe param" "maybe type" "temp"
    (603196 'move' call_tmp[603193](454223 '.v' this[40609] c"chpl_t"))
    unknown call_tmp[603198] "expr temp" "maybe param" "maybe type" "temp"
    (603201 'move' call_tmp[603198](454215 'to nilable class' call_tmp[603193]))
    (454217 'default init var' tmp[454213] call_tmp[603198])
    (454219 '.=' this[40609] c"chpl_p" tmp[454213])
    (474080 'end of statement')
    (505142 return _void[55])
  }
  function _owned[30](?).init=[40070](arg _mt[40615]:_MT[238], ref arg this[40613]:_owned[30](?), arg src[40067]:unmanaged[220](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (40091 call compilerError "cannot create an owned variable from an unmanaged class instance")
    (474081 'end of statement')
    unknown tmp[454226] "temp" "type variable"
    (454228 'move' tmp[454226] int(64)[13])
    (454230 'init field' this[40613] c"chpl_t" tmp[454226])
    (474082 'end of statement')
    unknown tmp[454235] "temp"
    unknown call_tmp[603203] "expr temp" "maybe param" "maybe type" "temp"
    (603206 'move' call_tmp[603203](454245 '.v' this[40613] c"chpl_t"))
    unknown call_tmp[603208] "expr temp" "maybe param" "maybe type" "temp"
    (603211 'move' call_tmp[603208](454237 'to nilable class' call_tmp[603203]))
    (454239 'default init var' tmp[454235] call_tmp[603208])
    (454241 '.=' this[40613] c"chpl_p" tmp[454235])
    (474083 'end of statement')
    (505144 return _void[55])
  }
  function _owned[30](?).init=[40110](arg _mt[40619]:_MT[238], ref arg this[40617]:_owned[30](?), arg src[40107]:_nilType[42]) : void[4] "leaves this nil" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[603215] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603218 'move' call_tmp[603215](40117 'typeof' this[40617]))
    unknown call_tmp[603222] "expr temp" "maybe param" "maybe type" "temp"
    (603225 'move' call_tmp[603222](40118 call chpl_t _mt[243] call_tmp[603215]))
    (40122 call(40113 call (partial) init _mt[243] this[40617]) call_tmp[603222])
    (474084 'end of statement')
    unknown call_tmp[603229] "expr temp" "maybe param" "maybe type" "temp"
    (603232 'move' call_tmp[603229](370442 call chpl_t _mt[243] this[40617]))
    unknown call_tmp[603234] "expr temp" "maybe param" "maybe type" "temp"
    (603237 'move' call_tmp[603234](40128 call isNonNilableClass call_tmp[603229]))
    unknown call_tmp[603239] "expr temp" "maybe param" "maybe type" "temp"
    (603242 'move' call_tmp[603239](40150 call _cond_test call_tmp[603234]))
    if call_tmp[603239]
    {
      (40148 call compilerError "Assigning non-nilable owned to nil")
    }
    (505146 return _void[55])
  }
  function _owned[30](?).init[40163](arg _mt[40623]:_MT[238], ref arg this[40621]:_owned[30](?), ref arg src[40160]:_owned[30](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[454248] "temp" "type variable"
    (454250 'move' tmp[454248](40170 call chpl_t _mt[243] src[40160]))
    (454252 'init field' this[40621] c"chpl_t" tmp[454248])
    (474086 'end of statement')
    unknown call_tmp[603248] "maybe param" "maybe type" "temp"
    (603251 'move' call_tmp[603248](40186 call(40182 call (partial) release _mt[243] src[40160])))
    unknown call_tmp[603253] "expr temp" "maybe param" "maybe type" "temp"
    (603256 'move' call_tmp[603253](454266 '.v' this[40621] c"chpl_t"))
    unknown call_tmp[603258] "maybe param" "maybe type" "temp"
    (603261 'move' call_tmp[603258](454258 'to nilable class' call_tmp[603253]))
    unknown tmp[454256] "temp"
    (454260 'init var' tmp[454256] call_tmp[603248] call_tmp[603258])
    (454262 'init field' this[40621] c"chpl_p" tmp[454256])
    (474087 'end of statement')
    (505148 return _void[55])
  }
  function _owned[30](?).create[40196](arg _mt[40627]:_MT[238], arg this[40625]:_owned[30](?), arg source[40194]:_any[178](?)) : _unknown[51] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[603263] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603266 'move' call_tmp[603263](40218 'typeof' source[40194]))
    unknown call_tmp[603268] "expr temp" "maybe param" "maybe type" "temp"
    (603271 'move' call_tmp[603268](40220 call _cast string[26] call_tmp[603263]))
    (40222 call compilerError "cannot create an 'owned' from " call_tmp[603268])
    (505150 return _void[55])
  }
  function _owned[30](?).create[40233](arg _mt[40631]:_MT[238], arg this[40629]:_owned[30](?), in arg take[40230]:_owned[30](?)) : _unknown[51] "inline" "method" "primary method"
  {
    unknown ret[505154] "RVV" "temp"
    (505159 'move' ret[505154](505158 'deref' take[40230]))
    (505156 return ret[505154])
  }
  function _owned[30](?).create[40247](arg _mt[40635]:_MT[238], arg this[40633]:_owned[30](?), arg p[40244]:unmanaged[220](?)) : _unknown[51] "inline" "method" "primary method" "unsafe"
  {
    unknown ret[505163] "RVV" "temp"
    unknown result[40254] "dead at end of block" "insert auto destroy"
    unknown call_tmp[603273] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603276 'move' call_tmp[603273](40250 'typeof' p[40244]))
    unknown call_tmp[603278] "expr temp" "maybe param" "maybe type" "temp"
    (603281 'move' call_tmp[603278](40252 call _cast _owned[30](?) call_tmp[603273]))
    (540564 'default init var' result[40254] call_tmp[603278])
    (40257 'end of statement')
    (40267 call(40262 call (partial) retain _mt[243] result[40254]) p[40244])
    (474090 'end of statement' result[40254])
    (505168 'move' ret[505163](505167 'deref' result[40254]))
    gotoReturn _end_create[505161] _end_create[505161]
    (474092 'end of statement' result[40254])
    label _end_create[505161]
    (505165 return ret[505163])
  }
  function _owned[30](?).deinit[40276](arg _mt[40639]:_MT[238], arg this[40637]:_owned[30](?)) : _unknown[51] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603287] "expr temp" "maybe param" "maybe type" "temp"
    (603290 'move' call_tmp[603287](370455 call chpl_p _mt[243] this[40637]))
    unknown call_tmp[603292] "expr temp" "maybe param" "maybe type" "temp"
    (603295 'move' call_tmp[603292](40281 call isClass call_tmp[603287]))
    unknown call_tmp[603297] "expr temp" "maybe param" "maybe type" "temp"
    (603300 'move' call_tmp[603297](40300 call _cond_test call_tmp[603292]))
    if call_tmp[603297]
    {
      unknown call_tmp[603304] "expr temp" "maybe param" "maybe type" "temp"
      (603307 'move' call_tmp[603304](370460 call chpl_p _mt[243] this[40637]))
      unknown call_tmp[603309] "expr temp" "maybe param" "maybe type" "temp"
      (603312 'move' call_tmp[603309](40284 call != call_tmp[603304] nil[44]))
      unknown call_tmp[603314] "expr temp" "maybe param" "maybe type" "temp"
      (603317 'move' call_tmp[603314](40294 call _cond_test call_tmp[603309]))
      if call_tmp[603314]
      {
        unknown call_tmp[603321] "expr temp" "maybe param" "maybe type" "temp"
        (603324 'move' call_tmp[603321](370465 call chpl_p _mt[243] this[40637]))
        unknown call_tmp[603326] "expr temp" "maybe param" "maybe type" "temp"
        (603329 'move' call_tmp[603326](40289 call _to_unmanaged call_tmp[603321]))
        (40291 call chpl__delete call_tmp[603326])
      }
    }
    (505172 return _void[55])
  }
  function _owned[30](?).clear[40309](arg _mt[40643]:_MT[238], ref arg this[40641]:_owned[30](?)) : _unknown[51] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603333] "expr temp" "maybe param" "maybe type" "temp"
    (603336 'move' call_tmp[603333](370470 call chpl_p _mt[243] this[40641]))
    unknown call_tmp[603338] "expr temp" "maybe param" "maybe type" "temp"
    (603341 'move' call_tmp[603338](40313 call != call_tmp[603333] nil[44]))
    unknown call_tmp[603343] "expr temp" "maybe param" "maybe type" "temp"
    (603346 'move' call_tmp[603343](40329 call _cond_test call_tmp[603338]))
    if call_tmp[603343]
    {
      unknown call_tmp[603350] "expr temp" "maybe param" "maybe type" "temp"
      (603353 'move' call_tmp[603350](370475 call chpl_p _mt[243] this[40641]))
      unknown call_tmp[603355] "expr temp" "maybe param" "maybe type" "temp"
      (603358 'move' call_tmp[603355](40318 call _to_unmanaged call_tmp[603350]))
      (40320 call chpl__delete call_tmp[603355])
      (474095 'end of statement')
      unknown call_tmp[603362] "expr temp" "maybe param" "maybe type" "temp"
      (603365 'move' call_tmp[603362](370480 call chpl_p _mt[243] this[40641]))
      (40326 call = call_tmp[603362] nil[44])
    }
    (505174 return _void[55])
  }
  function _owned[30](?).retain[40342](arg _mt[40647]:_MT[238], ref arg this[40645]:_owned[30](?), arg newPtr[40339]:unmanaged[220](?)) : _unknown[51] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[603369] "expr temp" "maybe param" "maybe type" "temp"
    (603372 'move' call_tmp[603369](370486 call chpl_t _mt[243] this[40645]))
    unknown call_tmp[603374] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (603377 'move' call_tmp[603374](40346 'typeof' newPtr[40339]))
    unknown call_tmp[603379] "expr temp" "maybe param" "maybe type" "temp"
    (603382 'move' call_tmp[603379](354228 'is_coercible' call_tmp[603369] call_tmp[603374]))
    unknown call_tmp[603384] "expr temp" "maybe param" "maybe type" "temp"
    (603387 'move' call_tmp[603384](40350 call ! call_tmp[603379]))
    unknown call_tmp[603389] "expr temp" "maybe param" "maybe type" "temp"
    (603392 'move' call_tmp[603389](40446 call _cond_test call_tmp[603384]))
    if call_tmp[603389]
    {
      unknown call_tmp[603394] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (603397 'move' call_tmp[603394](40371 'typeof' newPtr[40339]))
      unknown call_tmp[603399] "expr temp" "maybe param" "maybe type" "temp"
      (603402 'move' call_tmp[603399](40373 call _cast string[26] call_tmp[603394]))
      unknown call_tmp[603404] "expr temp" "maybe param" "maybe type" "temp"
      (603407 'move' call_tmp[603404](40375 call + "cannot retain '" call_tmp[603399]))
      unknown call_tmp[603409] "expr temp" "maybe param" "maybe type" "temp"
      (603412 'move' call_tmp[603409](40394 call + call_tmp[603404] "' "))
      unknown call_tmp[603414] "expr temp" "maybe param" "maybe type" "temp"
      (603417 'move' call_tmp[603414](40413 call + call_tmp[603409] "(expected '"))
      unknown call_tmp[603421] "expr temp" "maybe param" "maybe type" "temp"
      (603424 'move' call_tmp[603421](370492 call chpl_t _mt[243] this[40645]))
      unknown call_tmp[603426] "expr temp" "maybe param" "maybe type" "temp"
      (603429 'move' call_tmp[603426](40418 call _to_unmanaged call_tmp[603421]))
      unknown call_tmp[603431] "expr temp" "maybe param" "maybe type" "temp"
      (603434 'move' call_tmp[603431](40420 call _cast string[26] call_tmp[603426]))
      unknown call_tmp[603436] "expr temp" "maybe param" "maybe type" "temp"
      (603439 'move' call_tmp[603436](40422 call + call_tmp[603414] call_tmp[603431]))
      unknown call_tmp[603441] "expr temp" "maybe param" "maybe type" "temp"
      (603444 'move' call_tmp[603441](40441 call + call_tmp[603436] "')"))
      (40444 call compilerError call_tmp[603441])
    }
    unknown call_tmp[603448] "maybe param" "maybe type" "temp"
    (603451 'move' call_tmp[603448](370497 call chpl_p _mt[243] this[40645]))
    unknown oldPtr[40453] "dead at end of block" "insert auto destroy"
    (540566 'init var' oldPtr[40453] call_tmp[603448])
    (40456 'end of statement')
    unknown call_tmp[603455] "expr temp" "maybe param" "maybe type" "temp"
    (603458 'move' call_tmp[603455](370502 call chpl_p _mt[243] this[40645]))
    (40459 call = call_tmp[603455] newPtr[40339])
    (474098 'end of statement')
    unknown call_tmp[603460] "expr temp" "maybe param" "maybe type" "temp"
    (603463 'move' call_tmp[603460](40471 call _cond_test oldPtr[40453]))
    if call_tmp[603460]
    {
      unknown call_tmp[603465] "expr temp" "maybe param" "maybe type" "temp"
      (603468 'move' call_tmp[603465](40466 call _to_unmanaged oldPtr[40453]))
      (40468 call chpl__delete call_tmp[603465])
      (474099 'end of statement' oldPtr[40453])
    }
    (505176 return _void[55])
  }
  function _owned[30](?).release[40480](arg _mt[40651]:_MT[238], ref arg this[40649]:_owned[30](?)) : _unknown[51] "leaves this nil" "nil from this" "method" "primary method"
  {
    unknown ret[505180] "RVV" "temp"
    unknown call_tmp[603472] "maybe param" "maybe type" "temp"
    (603475 'move' call_tmp[603472](370510 call chpl_p _mt[243] this[40649]))
    unknown oldPtr[40483] "dead at end of block" "insert auto destroy"
    (540568 'init var' oldPtr[40483] call_tmp[603472])
    (40486 'end of statement')
    unknown call_tmp[603479] "expr temp" "maybe param" "maybe type" "temp"
    (603482 'move' call_tmp[603479](370515 call chpl_p _mt[243] this[40649]))
    (40490 call = call_tmp[603479] nil[44])
    (474101 'end of statement')
    unknown call_tmp[603486] "expr temp" "maybe param" "maybe type" "temp"
    (603489 'move' call_tmp[603486](370520 call chpl_t _mt[243] this[40649]))
    unknown call_tmp[603491] "expr temp" "maybe param" "maybe type" "temp"
    (603494 'move' call_tmp[603491](40496 call _to_nilable call_tmp[603486]))
    unknown call_tmp[603498] "expr temp" "maybe param" "maybe type" "temp"
    (603501 'move' call_tmp[603498](370525 call chpl_t _mt[243] this[40649]))
    unknown call_tmp[603503] "expr temp" "maybe param" "maybe type" "temp"
    (603506 'move' call_tmp[603503](40498 call == call_tmp[603491] call_tmp[603498]))
    unknown call_tmp[603508] "expr temp" "maybe param" "maybe type" "temp"
    (603511 'move' call_tmp[603508](40516 call _cond_test call_tmp[603503]))
    if call_tmp[603508]
    {
      unknown call_tmp[603513] "expr temp" "maybe param" "maybe type" "temp"
      (603516 'move' call_tmp[603513](40503 call _to_unmanaged oldPtr[40483]))
      (505185 'move' ret[505180](505184 'deref' call_tmp[603513]))
      gotoReturn _end_release[505178] _end_release[505178]
      (474102 'end of statement' oldPtr[40483])
    }
    {
      unknown call_tmp[603518] "expr temp" "maybe param" "maybe type" "temp"
      (603521 'move' call_tmp[603518](40509 call postfix! oldPtr[40483]))
      unknown call_tmp[603523] "expr temp" "maybe param" "maybe type" "temp"
      (603526 'move' call_tmp[603523](40512 call _to_unmanaged call_tmp[603518]))
      (505190 'move' ret[505180](505189 'deref' call_tmp[603523]))
      gotoReturn _end_release[505178] _end_release[505178]
      (474104 'end of statement' oldPtr[40483])
    }
    label _end_release[505178]
    (505182 return ret[505180])
  }
  function _owned[30](?).borrow[40524](arg _mt[40655]:_MT[238], arg this[40653]:_owned[30](?)) : _unknown[51] "nil from this" "method" "primary method"
  {
    unknown ret[505196] "RVV" "temp"
    unknown call_tmp[603530] "expr temp" "maybe param" "maybe type" "temp"
    (603533 'move' call_tmp[603530](370532 call chpl_t _mt[243] this[40653]))
    unknown call_tmp[603535] "expr temp" "maybe param" "maybe type" "temp"
    (603538 'move' call_tmp[603535](40529 call _to_nilable call_tmp[603530]))
    unknown call_tmp[603542] "expr temp" "maybe param" "maybe type" "temp"
    (603545 'move' call_tmp[603542](370537 call chpl_t _mt[243] this[40653]))
    unknown call_tmp[603547] "expr temp" "maybe param" "maybe type" "temp"
    (603550 'move' call_tmp[603547](40531 call == call_tmp[603535] call_tmp[603542]))
    unknown call_tmp[603552] "expr temp" "maybe param" "maybe type" "temp"
    (603555 'move' call_tmp[603552](40543 call _cond_test call_tmp[603547]))
    if call_tmp[603552]
    {
      unknown call_tmp[603559] "expr temp" "maybe param" "maybe type" "temp"
      (603562 'move' call_tmp[603559](370542 call chpl_p _mt[243] this[40653]))
      (505201 'move' ret[505196](505200 'deref' call_tmp[603559]))
      gotoReturn _end_borrow[505194] _end_borrow[505194]
    }
    {
      unknown call_tmp[603566] "expr temp" "maybe param" "maybe type" "temp"
      (603569 'move' call_tmp[603566](370547 call chpl_p _mt[243] this[40653]))
      unknown call_tmp[603571] "expr temp" "maybe param" "maybe type" "temp"
      (603574 'move' call_tmp[603571](40538 call postfix! call_tmp[603566]))
      (505206 'move' ret[505196](505205 'deref' call_tmp[603571]))
      gotoReturn _end_borrow[505194] _end_borrow[505194]
    }
    label _end_borrow[505194]
    (505198 return ret[505196])
  }
  function _owned[30](?).borrow[40552](arg _mt[40659]:_MT[238], arg this[40657]:_owned[30](?)) type : _unknown[51] "method" "primary method"
  {
    unknown ret[505212] "RVV" "temp" "type variable"
    unknown call_tmp[603578] "expr temp" "maybe param" "maybe type" "temp"
    (603581 'move' call_tmp[603578](370552 call chpl_t _mt[243] this[40657]))
    unknown call_tmp[603583] "expr temp" "maybe param" "maybe type" "temp"
    (603586 'move' call_tmp[603583](40557 call _to_nilable call_tmp[603578]))
    unknown call_tmp[603590] "expr temp" "maybe param" "maybe type" "temp"
    (603593 'move' call_tmp[603590](370557 call chpl_t _mt[243] this[40657]))
    unknown call_tmp[603595] "expr temp" "maybe param" "maybe type" "temp"
    (603598 'move' call_tmp[603595](40559 call == call_tmp[603583] call_tmp[603590]))
    unknown call_tmp[603600] "expr temp" "maybe param" "maybe type" "temp"
    (603603 'move' call_tmp[603600](40572 call _cond_test call_tmp[603595]))
    if call_tmp[603600]
    {
      unknown call_tmp[603607] "expr temp" "maybe param" "maybe type" "temp"
      (603610 'move' call_tmp[603607](370562 call chpl_t _mt[243] this[40657]))
      (505217 'move' ret[505212](505216 'deref' call_tmp[603607]))
      gotoReturn _end_borrow[505210] _end_borrow[505210]
    }
    {
      unknown call_tmp[603614] "expr temp" "maybe param" "maybe type" "temp"
      (603617 'move' call_tmp[603614](370567 call chpl_t _mt[243] this[40657]))
      unknown call_tmp[603619] "expr temp" "maybe param" "maybe type" "temp"
      (603622 'move' call_tmp[603619](40568 call _to_nonnil call_tmp[603614]))
      (505222 'move' ret[505212](505221 'deref' call_tmp[603619]))
      gotoReturn _end_borrow[505210] _end_borrow[505210]
    }
    label _end_borrow[505210]
    (505214 return ret[505212])
  }
  function _owned[30](?).chpl_t[758087](arg _mt[758089]:_MT[238], arg this[758091]:_owned[30](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[758110] "RVV" "temp" "type variable"
    unknown call_tmp[758124] "expr temp" "maybe param" "maybe type" "temp"
    (758127 'move' call_tmp[758124](758096 'is bound' this[758091] c"chpl_t"))
    if call_tmp[758124]
    {
      unknown call_tmp[758129] "expr temp" "maybe param" "maybe type" "temp"
      (758132 'move' call_tmp[758129](758095 '.v' this[758091] c"chpl_t"))
      (758115 'move' ret[758110](758114 'deref' call_tmp[758129]))
      gotoReturn _end_chpl_t[758108] _end_chpl_t[758108]
    }
    {
      (758120 'move' ret[758110](758119 'deref' _uninstantiated[258]))
      gotoReturn _end_chpl_t[758108] _end_chpl_t[758108]
    }
    label _end_chpl_t[758108]
    (758112 return ret[758110])
  }
  function _owned[30](?).chpl_t[758134](arg _mt[758136]:_MT[238], arg this[758138]:_owned[30](?)) type : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[758157] "RVV" "temp" "type variable"
    unknown call_tmp[758171] "expr temp" "maybe param" "maybe type" "temp"
    (758174 'move' call_tmp[758171](758143 'is bound' this[758138] c"chpl_t"))
    if call_tmp[758171]
    {
      unknown call_tmp[758176] "expr temp" "maybe param" "maybe type" "temp"
      (758179 'move' call_tmp[758176](758142 '.v' this[758138] c"chpl_t"))
      (758162 'move' ret[758157](758161 'deref' call_tmp[758176]))
      gotoReturn _end_chpl_t[758155] _end_chpl_t[758155]
    }
    {
      (758167 'move' ret[758157](758166 'deref' _uninstantiated[258]))
      gotoReturn _end_chpl_t[758155] _end_chpl_t[758155]
    }
    label _end_chpl_t[758155]
    (758159 return ret[758157])
  }
  function _owned[30](?).chpl_p[758181](arg _mt[758183]:_MT[238], ref arg this[758185]:_owned[30](?)) ref : _unknown[51] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[758195] "RVV" "temp"
    unknown call_tmp[758202] "expr temp" "maybe param" "maybe type" "temp"
    (758205 'move' call_tmp[758202](758189 '.' this[758185] c"chpl_p"))
    (758200 'move' ret[758195](758199 'addr of' call_tmp[758202]))
    (758197 return ret[758195])
  }
  function _owned[30](?).writeThis[758207](arg _mt[758211]:_MT[238], arg this[758209]:_owned[30](?), arg f[758210]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (758222 call(758218 call (partial) readWriteThis _mt[243] this[758209]) f[758210])
    (758225 return _void[55])
  }
  function _owned[30](?).readThis[758229](arg _mt[758233]:_MT[238], arg this[758231]:_owned[30](?), arg f[758232]:_any[178](?)) : void[4] throws "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (758241 call(758237 call (partial) readWriteThis _mt[243] this[758231]) f[758232])
    (758245 return _void[55])
  }
  function chpl_fields_are_comparable[758261](arg _arg1[758263]:_owned[30](?), arg _arg2[758264]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758282]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758289] "expr temp" "maybe param" "maybe type" "temp"
    (758292 'move' call_tmp[758289](758267 call chpl_p _mt[243] _arg1[758263]))
    unknown call_tmp[758294] "expr temp" "maybe param" "maybe type" "temp"
    (758297 'move' call_tmp[758294](758271 call chpl_p _mt[243] _arg2[758264]))
    unknown call_tmp[758299] "expr temp" "maybe param" "maybe type" "temp"
    (758302 'move' call_tmp[758299](758275 'call resolves' c"==" call_tmp[758289] call_tmp[758294]))
    (758287 'move' ret[758282](758286 'deref' call_tmp[758299]))
    (758284 return ret[758282])
  }
  function ==[758249](arg _arg1[758251]:_owned[30](?), arg _arg2[758252]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758331]:bool[10] "RVV" "temp"
    unknown call_tmp[758343] "expr temp" "maybe param" "maybe type" "temp"
    (758346 'move' call_tmp[758343](758310 call chpl_p _mt[243] _arg1[758251]))
    unknown call_tmp[758348] "expr temp" "maybe param" "maybe type" "temp"
    (758351 'move' call_tmp[758348](758314 call chpl_p _mt[243] _arg2[758252]))
    unknown call_tmp[758353] "expr temp" "maybe param" "maybe type" "temp"
    (758356 'move' call_tmp[758353](758318 call != call_tmp[758343] call_tmp[758348]))
    if call_tmp[758353]
    {
      (758336 'move' ret[758331](758335 'deref' 0))
      gotoReturn _end_==[758329] _end_==[758329]
    }
    (758341 'move' ret[758331](758340 'deref' 1))
    label _end_==[758329]
    (758333 return ret[758331])
  }
  where {
    unknown call_tmp[758358] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758361 'move' call_tmp[758358](758255 'typeof' _arg1[758251]))
    unknown call_tmp[758363] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758366 'move' call_tmp[758363](758257 'typeof' _arg2[758252]))
    unknown call_tmp[758368] "expr temp" "maybe param" "maybe type" "temp"
    (758371 'move' call_tmp[758368](758259 call == call_tmp[758358] call_tmp[758363]))
    unknown call_tmp[758373] "expr temp" "maybe param" "maybe type" "temp"
    (758376 'move' call_tmp[758373](758304 call chpl_fields_are_comparable[758261] _arg1[758251] _arg2[758252]))
    (758308 '&' call_tmp[758368] call_tmp[758373])
  }
  function chpl_fields_are_comparable[758390](arg _arg1[758392]:_owned[30](?), arg _arg2[758393]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758411]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758418] "expr temp" "maybe param" "maybe type" "temp"
    (758421 'move' call_tmp[758418](758396 call chpl_p _mt[243] _arg1[758392]))
    unknown call_tmp[758423] "expr temp" "maybe param" "maybe type" "temp"
    (758426 'move' call_tmp[758423](758400 call chpl_p _mt[243] _arg2[758393]))
    unknown call_tmp[758428] "expr temp" "maybe param" "maybe type" "temp"
    (758431 'move' call_tmp[758428](758404 'call resolves' c"!=" call_tmp[758418] call_tmp[758423]))
    (758416 'move' ret[758411](758415 'deref' call_tmp[758428]))
    (758413 return ret[758411])
  }
  function !=[758378](arg _arg1[758380]:_owned[30](?), arg _arg2[758381]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758460]:bool[10] "RVV" "temp"
    unknown call_tmp[758472] "expr temp" "maybe param" "maybe type" "temp"
    (758475 'move' call_tmp[758472](758439 call chpl_p _mt[243] _arg1[758380]))
    unknown call_tmp[758477] "expr temp" "maybe param" "maybe type" "temp"
    (758480 'move' call_tmp[758477](758443 call chpl_p _mt[243] _arg2[758381]))
    unknown call_tmp[758482] "expr temp" "maybe param" "maybe type" "temp"
    (758485 'move' call_tmp[758482](758447 call != call_tmp[758472] call_tmp[758477]))
    if call_tmp[758482]
    {
      (758465 'move' ret[758460](758464 'deref' 1))
      gotoReturn _end_!=[758458] _end_!=[758458]
    }
    (758470 'move' ret[758460](758469 'deref' 0))
    label _end_!=[758458]
    (758462 return ret[758460])
  }
  where {
    unknown call_tmp[758487] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758490 'move' call_tmp[758487](758384 'typeof' _arg1[758380]))
    unknown call_tmp[758492] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758495 'move' call_tmp[758492](758386 'typeof' _arg2[758381]))
    unknown call_tmp[758497] "expr temp" "maybe param" "maybe type" "temp"
    (758500 'move' call_tmp[758497](758388 call == call_tmp[758487] call_tmp[758492]))
    unknown call_tmp[758502] "expr temp" "maybe param" "maybe type" "temp"
    (758505 'move' call_tmp[758502](758433 call chpl_fields_are_comparable[758390] _arg1[758380] _arg2[758381]))
    (758437 '&' call_tmp[758497] call_tmp[758502])
  }
  function chpl_fields_are_comparable[758519](arg _arg1[758521]:_owned[30](?), arg _arg2[758522]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758540]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758547] "expr temp" "maybe param" "maybe type" "temp"
    (758550 'move' call_tmp[758547](758525 call chpl_p _mt[243] _arg1[758521]))
    unknown call_tmp[758552] "expr temp" "maybe param" "maybe type" "temp"
    (758555 'move' call_tmp[758552](758529 call chpl_p _mt[243] _arg2[758522]))
    unknown call_tmp[758557] "expr temp" "maybe param" "maybe type" "temp"
    (758560 'move' call_tmp[758557](758533 'call resolves' c"<" call_tmp[758547] call_tmp[758552]))
    (758545 'move' ret[758540](758544 'deref' call_tmp[758557]))
    (758542 return ret[758540])
  }
  function <[758507](arg _arg1[758509]:_owned[30](?), arg _arg2[758510]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758604]:bool[10] "RVV" "temp"
    unknown call_tmp[758621] "expr temp" "maybe param" "maybe type" "temp"
    (758624 'move' call_tmp[758621](758568 call chpl_p _mt[243] _arg1[758509]))
    unknown call_tmp[758626] "expr temp" "maybe param" "maybe type" "temp"
    (758629 'move' call_tmp[758626](758572 call chpl_p _mt[243] _arg2[758510]))
    unknown call_tmp[758631] "expr temp" "maybe param" "maybe type" "temp"
    (758634 'move' call_tmp[758631](758576 call < call_tmp[758621] call_tmp[758626]))
    if call_tmp[758631]
    {
      (758609 'move' ret[758604](758608 'deref' 1))
      gotoReturn _end_<[758602] _end_<[758602]
    }
    unknown call_tmp[758636] "expr temp" "maybe param" "maybe type" "temp"
    (758639 'move' call_tmp[758636](758582 call chpl_p _mt[243] _arg1[758509]))
    unknown call_tmp[758641] "expr temp" "maybe param" "maybe type" "temp"
    (758644 'move' call_tmp[758641](758586 call chpl_p _mt[243] _arg2[758510]))
    unknown call_tmp[758646] "expr temp" "maybe param" "maybe type" "temp"
    (758649 'move' call_tmp[758646](758590 call > call_tmp[758636] call_tmp[758641]))
    if call_tmp[758646]
    {
      (758614 'move' ret[758604](758613 'deref' 0))
      gotoReturn _end_<[758602] _end_<[758602]
    }
    (758619 'move' ret[758604](758618 'deref' 0))
    label _end_<[758602]
    (758606 return ret[758604])
  }
  where {
    unknown call_tmp[758651] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758654 'move' call_tmp[758651](758513 'typeof' _arg1[758509]))
    unknown call_tmp[758656] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758659 'move' call_tmp[758656](758515 'typeof' _arg2[758510]))
    unknown call_tmp[758661] "expr temp" "maybe param" "maybe type" "temp"
    (758664 'move' call_tmp[758661](758517 call == call_tmp[758651] call_tmp[758656]))
    unknown call_tmp[758666] "expr temp" "maybe param" "maybe type" "temp"
    (758669 'move' call_tmp[758666](758562 call chpl_fields_are_comparable[758519] _arg1[758509] _arg2[758510]))
    (758566 '&' call_tmp[758661] call_tmp[758666])
  }
  function chpl_fields_are_comparable[758683](arg _arg1[758685]:_owned[30](?), arg _arg2[758686]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758704]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758711] "expr temp" "maybe param" "maybe type" "temp"
    (758714 'move' call_tmp[758711](758689 call chpl_p _mt[243] _arg1[758685]))
    unknown call_tmp[758716] "expr temp" "maybe param" "maybe type" "temp"
    (758719 'move' call_tmp[758716](758693 call chpl_p _mt[243] _arg2[758686]))
    unknown call_tmp[758721] "expr temp" "maybe param" "maybe type" "temp"
    (758724 'move' call_tmp[758721](758697 'call resolves' c"<=" call_tmp[758711] call_tmp[758716]))
    (758709 'move' ret[758704](758708 'deref' call_tmp[758721]))
    (758706 return ret[758704])
  }
  function <=[758671](arg _arg1[758673]:_owned[30](?), arg _arg2[758674]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758768]:bool[10] "RVV" "temp"
    unknown call_tmp[758785] "expr temp" "maybe param" "maybe type" "temp"
    (758788 'move' call_tmp[758785](758732 call chpl_p _mt[243] _arg1[758673]))
    unknown call_tmp[758790] "expr temp" "maybe param" "maybe type" "temp"
    (758793 'move' call_tmp[758790](758736 call chpl_p _mt[243] _arg2[758674]))
    unknown call_tmp[758795] "expr temp" "maybe param" "maybe type" "temp"
    (758798 'move' call_tmp[758795](758740 call < call_tmp[758785] call_tmp[758790]))
    if call_tmp[758795]
    {
      (758773 'move' ret[758768](758772 'deref' 1))
      gotoReturn _end_<=[758766] _end_<=[758766]
    }
    unknown call_tmp[758800] "expr temp" "maybe param" "maybe type" "temp"
    (758803 'move' call_tmp[758800](758746 call chpl_p _mt[243] _arg1[758673]))
    unknown call_tmp[758805] "expr temp" "maybe param" "maybe type" "temp"
    (758808 'move' call_tmp[758805](758750 call chpl_p _mt[243] _arg2[758674]))
    unknown call_tmp[758810] "expr temp" "maybe param" "maybe type" "temp"
    (758813 'move' call_tmp[758810](758754 call > call_tmp[758800] call_tmp[758805]))
    if call_tmp[758810]
    {
      (758778 'move' ret[758768](758777 'deref' 0))
      gotoReturn _end_<=[758766] _end_<=[758766]
    }
    (758783 'move' ret[758768](758782 'deref' 1))
    label _end_<=[758766]
    (758770 return ret[758768])
  }
  where {
    unknown call_tmp[758815] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758818 'move' call_tmp[758815](758677 'typeof' _arg1[758673]))
    unknown call_tmp[758820] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758823 'move' call_tmp[758820](758679 'typeof' _arg2[758674]))
    unknown call_tmp[758825] "expr temp" "maybe param" "maybe type" "temp"
    (758828 'move' call_tmp[758825](758681 call == call_tmp[758815] call_tmp[758820]))
    unknown call_tmp[758830] "expr temp" "maybe param" "maybe type" "temp"
    (758833 'move' call_tmp[758830](758726 call chpl_fields_are_comparable[758683] _arg1[758673] _arg2[758674]))
    (758730 '&' call_tmp[758825] call_tmp[758830])
  }
  function chpl_fields_are_comparable[758847](arg _arg1[758849]:_owned[30](?), arg _arg2[758850]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[758868]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[758875] "expr temp" "maybe param" "maybe type" "temp"
    (758878 'move' call_tmp[758875](758853 call chpl_p _mt[243] _arg1[758849]))
    unknown call_tmp[758880] "expr temp" "maybe param" "maybe type" "temp"
    (758883 'move' call_tmp[758880](758857 call chpl_p _mt[243] _arg2[758850]))
    unknown call_tmp[758885] "expr temp" "maybe param" "maybe type" "temp"
    (758888 'move' call_tmp[758885](758861 'call resolves' c">" call_tmp[758875] call_tmp[758880]))
    (758873 'move' ret[758868](758872 'deref' call_tmp[758885]))
    (758870 return ret[758868])
  }
  function >[758835](arg _arg1[758837]:_owned[30](?), arg _arg2[758838]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[758932]:bool[10] "RVV" "temp"
    unknown call_tmp[758949] "expr temp" "maybe param" "maybe type" "temp"
    (758952 'move' call_tmp[758949](758896 call chpl_p _mt[243] _arg1[758837]))
    unknown call_tmp[758954] "expr temp" "maybe param" "maybe type" "temp"
    (758957 'move' call_tmp[758954](758900 call chpl_p _mt[243] _arg2[758838]))
    unknown call_tmp[758959] "expr temp" "maybe param" "maybe type" "temp"
    (758962 'move' call_tmp[758959](758904 call > call_tmp[758949] call_tmp[758954]))
    if call_tmp[758959]
    {
      (758937 'move' ret[758932](758936 'deref' 1))
      gotoReturn _end_>[758930] _end_>[758930]
    }
    unknown call_tmp[758964] "expr temp" "maybe param" "maybe type" "temp"
    (758967 'move' call_tmp[758964](758910 call chpl_p _mt[243] _arg1[758837]))
    unknown call_tmp[758969] "expr temp" "maybe param" "maybe type" "temp"
    (758972 'move' call_tmp[758969](758914 call chpl_p _mt[243] _arg2[758838]))
    unknown call_tmp[758974] "expr temp" "maybe param" "maybe type" "temp"
    (758977 'move' call_tmp[758974](758918 call < call_tmp[758964] call_tmp[758969]))
    if call_tmp[758974]
    {
      (758942 'move' ret[758932](758941 'deref' 0))
      gotoReturn _end_>[758930] _end_>[758930]
    }
    (758947 'move' ret[758932](758946 'deref' 0))
    label _end_>[758930]
    (758934 return ret[758932])
  }
  where {
    unknown call_tmp[758979] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758982 'move' call_tmp[758979](758841 'typeof' _arg1[758837]))
    unknown call_tmp[758984] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (758987 'move' call_tmp[758984](758843 'typeof' _arg2[758838]))
    unknown call_tmp[758989] "expr temp" "maybe param" "maybe type" "temp"
    (758992 'move' call_tmp[758989](758845 call == call_tmp[758979] call_tmp[758984]))
    unknown call_tmp[758994] "expr temp" "maybe param" "maybe type" "temp"
    (758997 'move' call_tmp[758994](758890 call chpl_fields_are_comparable[758847] _arg1[758837] _arg2[758838]))
    (758894 '&' call_tmp[758989] call_tmp[758994])
  }
  function chpl_fields_are_comparable[759011](arg _arg1[759013]:_owned[30](?), arg _arg2[759014]:_owned[30](?)) param : bool[10] "compiler generated" "last resort" "param"
  {
    val ret[759032]:bool[10] "RVV" "param" "temp"
    unknown call_tmp[759039] "expr temp" "maybe param" "maybe type" "temp"
    (759042 'move' call_tmp[759039](759017 call chpl_p _mt[243] _arg1[759013]))
    unknown call_tmp[759044] "expr temp" "maybe param" "maybe type" "temp"
    (759047 'move' call_tmp[759044](759021 call chpl_p _mt[243] _arg2[759014]))
    unknown call_tmp[759049] "expr temp" "maybe param" "maybe type" "temp"
    (759052 'move' call_tmp[759049](759025 'call resolves' c">=" call_tmp[759039] call_tmp[759044]))
    (759037 'move' ret[759032](759036 'deref' call_tmp[759049]))
    (759034 return ret[759032])
  }
  function >=[758999](arg _arg1[759001]:_owned[30](?), arg _arg2[759002]:_owned[30](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[759096]:bool[10] "RVV" "temp"
    unknown call_tmp[759113] "expr temp" "maybe param" "maybe type" "temp"
    (759116 'move' call_tmp[759113](759060 call chpl_p _mt[243] _arg1[759001]))
    unknown call_tmp[759118] "expr temp" "maybe param" "maybe type" "temp"
    (759121 'move' call_tmp[759118](759064 call chpl_p _mt[243] _arg2[759002]))
    unknown call_tmp[759123] "expr temp" "maybe param" "maybe type" "temp"
    (759126 'move' call_tmp[759123](759068 call > call_tmp[759113] call_tmp[759118]))
    if call_tmp[759123]
    {
      (759101 'move' ret[759096](759100 'deref' 1))
      gotoReturn _end_>=[759094] _end_>=[759094]
    }
    unknown call_tmp[759128] "expr temp" "maybe param" "maybe type" "temp"
    (759131 'move' call_tmp[759128](759074 call chpl_p _mt[243] _arg1[759001]))
    unknown call_tmp[759133] "expr temp" "maybe param" "maybe type" "temp"
    (759136 'move' call_tmp[759133](759078 call chpl_p _mt[243] _arg2[759002]))
    unknown call_tmp[759138] "expr temp" "maybe param" "maybe type" "temp"
    (759141 'move' call_tmp[759138](759082 call < call_tmp[759128] call_tmp[759133]))
    if call_tmp[759138]
    {
      (759106 'move' ret[759096](759105 'deref' 0))
      gotoReturn _end_>=[759094] _end_>=[759094]
    }
    (759111 'move' ret[759096](759110 'deref' 1))
    label _end_>=[759094]
    (759098 return ret[759096])
  }
  where {
    unknown call_tmp[759143] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759146 'move' call_tmp[759143](759005 'typeof' _arg1[759001]))
    unknown call_tmp[759148] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (759151 'move' call_tmp[759148](759007 'typeof' _arg2[759002]))
    unknown call_tmp[759153] "expr temp" "maybe param" "maybe type" "temp"
    (759156 'move' call_tmp[759153](759009 call == call_tmp[759143] call_tmp[759148]))
    unknown call_tmp[759158] "expr temp" "maybe param" "maybe type" "temp"
    (759161 'move' call_tmp[759158](759054 call chpl_fields_are_comparable[759011] _arg1[759001] _arg2[759002]))
    (759058 '&' call_tmp[759153] call_tmp[759158])
  }
  function chpl__defaultHash[759163](arg r[759165]:_owned[30](?)) : _unknown[51] "compiler generated" "last resort"
  {
    unknown ret[759187] "RVV" "temp"
    unknown call_tmp[759194] "expr temp" "maybe param" "maybe type" "temp"
    (759197 'move' call_tmp[759194](759173 call chpl_p _mt[243] r[759165]))
    unknown call_tmp[759199] "expr temp" "maybe param" "maybe type" "temp"
    (759202 'move' call_tmp[759199](759177 call chpl__defaultHash call_tmp[759194]))
    unknown call_tmp[759204] "expr temp" "maybe param" "maybe type" "temp"
    (759207 'move' call_tmp[759204](759167 call chpl_t _mt[243] r[759165]))
    unknown call_tmp[759209] "expr temp" "maybe param" "maybe type" "temp"
    (759212 'move' call_tmp[759209](759171 call chpl__defaultHash call_tmp[759204]))
    unknown call_tmp[759214] "expr temp" "maybe param" "maybe type" "temp"
    (759217 'move' call_tmp[759214](759179 call chpl__defaultHashCombine call_tmp[759199] call_tmp[759209] 2))
    (759192 'move' ret[759187](759191 'deref' call_tmp[759214]))
    (759189 return ret[759187])
  }
  type _owned[30](?) unknown chpl_t[39592] "no doc" "type variable" unknown chpl_p[39599] "no doc" "owned"(39598 'to nilable class' chpl_t[39592]) forwarding ( )
  type owned[415394](?)
  type owned?[415390](?)
  function =[40668](ref arg lhs[40665]:_owned[30](?), ref arg rhs[40671]:_owned[30](?)) : _unknown[51] "assignop" "no return value for void"
  {
    unknown tmp[418223] "maybe param" "temp"
    unknown call_tmp[603626] "expr temp" "maybe param" "maybe type" "temp"
    (603629 'move' call_tmp[603626](40691 call chpl_p _mt[243] lhs[40665]))
    (418234 'move' tmp[418223](40695 call == call_tmp[603626] nil[44]))
    unknown call_tmp[603631] "expr temp" "maybe param" "maybe type" "temp"
    (603634 'move' call_tmp[603631](418236 call _cond_invalid tmp[418223]))
    if call_tmp[603631]
    {
      (418239 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[553993] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[553994] "maybe param" "temp"
    unknown call_tmp[603636] "expr temp" "maybe param" "maybe type" "temp"
    (603639 'move' call_tmp[603636](418224 call isTrue tmp[418223]))
    (553999 'move' tmp[553994](553997 call _cond_test call_tmp[603636]))
    if tmp[553994]
    {
      unknown tmp[554001] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603643] "expr temp" "maybe param" "maybe type" "temp"
      (603646 'move' call_tmp[603643](40698 call chpl_p _mt[243] rhs[40671]))
      unknown call_tmp[603648] "expr temp" "maybe param" "maybe type" "temp"
      (603651 'move' call_tmp[603648](40702 call == call_tmp[603643] nil[44]))
      (554003 'move' tmp[554001](418227 call isTrue call_tmp[603648]))
      (554008 'move' tmp[553993](554005 '_paramFoldLogical' tmp[553994] tmp[554001]))
    }
    {
      (554013 'move' tmp[553993](554010 '_paramFoldLogical' tmp[553994] 0))
    }
    unknown call_tmp[603653] "expr temp" "maybe param" "maybe type" "temp"
    (603656 'move' call_tmp[603653](40708 call _cond_test tmp[553993]))
    if call_tmp[603653]
    {
      gotoReturn _end_=[505226] _end_=[505226]
    }
    unknown tmp[418244] "maybe param" "temp"
    (418255 'move' tmp[418244] 1)
    unknown call_tmp[603658] "expr temp" "maybe param" "maybe type" "temp"
    (603661 'move' call_tmp[603658](418257 call _cond_invalid tmp[418244]))
    if call_tmp[603658]
    {
      (418260 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[554020] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554021] "maybe param" "temp"
    unknown call_tmp[603663] "expr temp" "maybe param" "maybe type" "temp"
    (603666 'move' call_tmp[603663](418245 call isTrue tmp[418244]))
    (554026 'move' tmp[554021](554024 call _cond_test call_tmp[603663]))
    if tmp[554021]
    {
      (554031 'move' tmp[554020](554028 '_paramFoldLogical' tmp[554021] 1))
    }
    {
      unknown tmp[554033] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (554035 'move' tmp[554033](418249 call isTrue enablePostfixBangChecks[324]))
      (554040 'move' tmp[554020](554037 '_paramFoldLogical' tmp[554021] tmp[554033]))
    }
    unknown call_tmp[603668] "expr temp" "maybe param" "maybe type" "temp"
    (603671 'move' call_tmp[603668](40766 call _cond_test tmp[554020]))
    if call_tmp[603668]
    {
      unknown call_tmp[603675] "expr temp" "maybe param" "maybe type" "temp"
      (603678 'move' call_tmp[603675](40719 call chpl_t _mt[243] lhs[40665]))
      unknown call_tmp[603680] "expr temp" "maybe param" "maybe type" "temp"
      (603683 'move' call_tmp[603680](40723 call isNonNilableClass call_tmp[603675]))
      unknown call_tmp[603685] "expr temp" "maybe param" "maybe type" "temp"
      (603688 'move' call_tmp[603685](40761 call _cond_test call_tmp[603680]))
      if call_tmp[603685]
      {
        unknown call_tmp[603692] "expr temp" "maybe param" "maybe type" "temp"
        (603695 'move' call_tmp[603692](40725 call chpl_p _mt[243] rhs[40671]))
        unknown call_tmp[603697] "expr temp" "maybe param" "maybe type" "temp"
        (603700 'move' call_tmp[603697](40729 call == call_tmp[603692] nil[44]))
        unknown call_tmp[603702] "expr temp" "maybe param" "maybe type" "temp"
        (603705 'move' call_tmp[603702](40756 call _cond_test call_tmp[603697]))
        if call_tmp[603702]
        {
          (40753 call nilCheckHalt module=[255] HaltWrappers[210016] "assigning nil to non-nilable owned")
          (356936 'referenced modules list' HaltWrappers[210016])
        }
      }
    }
    unknown call_tmp[603711] "expr temp" "maybe param" "maybe type" "temp"
    (603714 'move' call_tmp[603711](40779 call(40775 call (partial) release _mt[243] rhs[40671])))
    (40781 call(40771 call (partial) retain _mt[243] lhs[40665]) call_tmp[603711])
    label _end_=[505226]
    (505228 return _void[55])
    (355064 'used modules list'(40687 'import' HaltWrappers[210016]))
  }
  where {
    unknown tmp[418202] "maybe param" "temp"
    (418213 'move' tmp[418202](40677 call isNonNilableClass lhs[40665]))
    unknown call_tmp[603716] "expr temp" "maybe param" "maybe type" "temp"
    (603719 'move' call_tmp[603716](418215 call _cond_invalid tmp[418202]))
    if call_tmp[603716]
    {
      (418218 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[554047] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[554048] "maybe param" "temp"
    unknown call_tmp[603721] "expr temp" "maybe param" "maybe type" "temp"
    (603724 'move' call_tmp[603721](418203 call isTrue tmp[418202]))
    (554053 'move' tmp[554048](554051 call _cond_test call_tmp[603721]))
    if tmp[554048]
    {
      unknown tmp[554055] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603726] "expr temp" "maybe param" "maybe type" "temp"
      (603729 'move' call_tmp[603726](40681 call isNilableClass rhs[40671]))
      (554057 'move' tmp[554055](418206 call isTrue call_tmp[603726]))
      (554062 'move' tmp[554047](554059 '_paramFoldLogical' tmp[554048] tmp[554055]))
    }
    {
      (554067 'move' tmp[554047](554064 '_paramFoldLogical' tmp[554048] 0))
    }
    (40684 call ! tmp[554047])
  }
  function =[40792](ref arg lhs[40789]:_owned[30](?), arg rhs[40795]:_nilType[42]) : _unknown[51] "assignop" "no doc" "no return value for void"
  {
    (40811 call(40807 call (partial) clear _mt[243] lhs[40789]))
    (505232 return _void[55])
  }
  where {
    unknown call_tmp[603733] "expr temp" "maybe param" "maybe type" "temp"
    (603736 'move' call_tmp[603733](40801 call isNonNilableClass lhs[40789]))
    (40802 call ! call_tmp[603733])
  }
  function <=>[40823](ref arg lhs[40820]:_owned[30](?), ref arg rhs[40827]:_owned[30](?)) : _unknown[51] "no return value for void"
  {
    unknown call_tmp[603740] "expr temp" "maybe param" "maybe type" "temp"
    (603743 'move' call_tmp[603740](40831 call chpl_p _mt[243] lhs[40820]))
    unknown call_tmp[603747] "expr temp" "maybe param" "maybe type" "temp"
    (603750 'move' call_tmp[603747](40835 call chpl_p _mt[243] rhs[40827]))
    (40838 call <=> call_tmp[603740] call_tmp[603747])
    (505234 return _void[55])
  }
  function chpl__initCopy[40850](ref arg src[40847]:_owned[30](?)) : _unknown[51] "init copy fn" "no doc"
  {
    unknown ret[505238] "RVV" "temp"
    unknown call_tmp[603752] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603755 'move' call_tmp[603752](747754 'new' _owned[30](?) src[40847]))
    unknown ret[40857] "dead at end of block"
    (540570 'init var' ret[40857] call_tmp[603752])
    (40860 'end of statement')
    (505243 'move' ret[505238](505242 'deref' ret[40857]))
    gotoReturn _end_chpl__initCopy[505236] _end_chpl__initCopy[505236]
    (474117 'end of statement' ret[40857])
    label _end_chpl__initCopy[505236]
    (505240 return ret[505238])
  }
  function chpl__autoCopy[40873](ref arg src[40870]:_owned[30](?)) : _unknown[51] "auto copy fn" "no doc"
  {
    unknown ret[505249] "RVV" "temp"
    unknown call_tmp[603757] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603760 'move' call_tmp[603757](747755 'new' _owned[30](?) src[40870]))
    unknown ret[40880] "dead at end of block" "insert auto destroy"
    (540572 'init var' ret[40880] call_tmp[603757])
    (40883 'end of statement')
    (505254 'move' ret[505249](505253 'deref' ret[40880]))
    gotoReturn _end_chpl__autoCopy[505247] _end_chpl__autoCopy[505247]
    (474119 'end of statement' ret[40880])
    label _end_chpl__autoCopy[505247]
    (505251 return ret[505249])
  }
  function chpl__autoDestroy[40896](ref arg x[40893]:_owned[30](?)) : _unknown[51] "auto destroy fn" "no doc" "no return value for void"
  {
    unknown call_tmp[603762] "expr temp" "maybe param" "maybe type" "temp"
    (603765 'move' call_tmp[603762](40903 'deref' x[40893]))
    (40904 'call destructor' call_tmp[603762])
    (505258 return _void[55])
  }
  function _owned[30](?).readWriteThis[40914](arg _mt[40919]:_MT[238], arg this[40916]:_owned[30](?) :
  _owned[30](?), arg f[40912]:_any[178](?)) : _unknown[51] throws "method" "no doc" "no return value for void"
  {
    unknown call_tmp[603769] "expr temp" "maybe param" "maybe type" "temp"
    (603772 'move' call_tmp[603769](40923 call chpl_p _mt[243] this[40916]))
    (40926 call <~> f[40912] call_tmp[603769])
    (505260 return _void[55])
  }
  function _cast[40941](arg t[40938]:owned?[415390](?), in arg x[40946]:owned[415394](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505264] "RVV" "temp"
    unknown call_tmp[603776] "expr temp" "maybe param" "maybe type" "temp"
    (603779 'move' call_tmp[603776](40970 call chpl_t _mt[243] t[40938]))
    unknown call_tmp[603781] "expr temp" "maybe param" "maybe type" "temp"
    (603784 'move' call_tmp[603781](40974 call _to_unmanaged call_tmp[603776]))
    unknown call_tmp[603786] "expr temp" "maybe param" "maybe type" "temp"
    (603789 'move' call_tmp[603786](40976 call _to_nilable call_tmp[603781]))
    unknown call_tmp[603793] "expr temp" "maybe param" "maybe type" "temp"
    (603796 'move' call_tmp[603793](40964 call chpl_p _mt[243] x[40946]))
    unknown call_tmp[603798] "maybe param" "maybe type" "temp"
    (603801 'move' call_tmp[603798](40977 call _cast call_tmp[603786] call_tmp[603793]))
    unknown castPtr[40979] "dead at end of block" "insert auto destroy"
    (540574 'init var' castPtr[40979] call_tmp[603798])
    (40982 'end of statement')
    unknown call_tmp[603805] "expr temp" "maybe param" "maybe type" "temp"
    (603808 'move' call_tmp[603805](40985 call chpl_p _mt[243] x[40946]))
    (40989 call = call_tmp[603805] nil[44])
    (474123 'end of statement')
    unknown call_tmp[603810] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603813 'move' call_tmp[603810](747756 'new' _owned[30](?) castPtr[40979]))
    (505269 'move' ret[505264](505268 'deref' call_tmp[603810]))
    gotoReturn _end__cast[505262] _end__cast[505262]
    (474124 'end of statement' castPtr[40979])
    label _end__cast[505262]
    (505266 return ret[505264])
  }
  where {
    unknown call_tmp[603817] "expr temp" "maybe param" "maybe type" "temp"
    (603820 'move' call_tmp[603817](40957 call chpl_t _mt[243] t[40938]))
    unknown call_tmp[603822] "expr temp" "maybe param" "maybe type" "temp"
    (603825 'move' call_tmp[603822](40961 call _to_nonnil call_tmp[603817]))
    unknown call_tmp[603829] "expr temp" "maybe param" "maybe type" "temp"
    (603832 'move' call_tmp[603829](40951 call chpl_t _mt[243] x[40946]))
    (354230 'is_subtype' call_tmp[603822] call_tmp[603829])
  }
  function _cast[41011](arg t[41008]:owned?[415390](?), in arg x[41017]:owned?[415390](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505275] "RVV" "temp"
    unknown call_tmp[603836] "expr temp" "maybe param" "maybe type" "temp"
    (603839 'move' call_tmp[603836](41038 call chpl_t _mt[243] t[41008]))
    unknown call_tmp[603841] "expr temp" "maybe param" "maybe type" "temp"
    (603844 'move' call_tmp[603841](41042 call _to_unmanaged call_tmp[603836]))
    unknown call_tmp[603846] "expr temp" "maybe param" "maybe type" "temp"
    (603849 'move' call_tmp[603846](41044 call _to_nilable call_tmp[603841]))
    unknown call_tmp[603853] "expr temp" "maybe param" "maybe type" "temp"
    (603856 'move' call_tmp[603853](41032 call chpl_p _mt[243] x[41017]))
    unknown call_tmp[603858] "maybe param" "maybe type" "temp"
    (603861 'move' call_tmp[603858](41045 call _cast call_tmp[603846] call_tmp[603853]))
    unknown castPtr[41047] "dead at end of block" "insert auto destroy"
    (540576 'init var' castPtr[41047] call_tmp[603858])
    (41050 'end of statement')
    unknown call_tmp[603865] "expr temp" "maybe param" "maybe type" "temp"
    (603868 'move' call_tmp[603865](41053 call chpl_p _mt[243] x[41017]))
    (41057 call = call_tmp[603865] nil[44])
    (474126 'end of statement')
    unknown call_tmp[603870] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603873 'move' call_tmp[603870](747757 'new' _owned[30](?) castPtr[41047]))
    (505280 'move' ret[505275](505279 'deref' call_tmp[603870]))
    gotoReturn _end__cast[505273] _end__cast[505273]
    (474127 'end of statement' castPtr[41047])
    label _end__cast[505273]
    (505277 return ret[505275])
  }
  where {
    unknown call_tmp[603877] "expr temp" "maybe param" "maybe type" "temp"
    (603880 'move' call_tmp[603877](41027 call chpl_t _mt[243] t[41008]))
    unknown call_tmp[603884] "expr temp" "maybe param" "maybe type" "temp"
    (603887 'move' call_tmp[603884](41022 call chpl_t _mt[243] x[41017]))
    (354231 'is_subtype' call_tmp[603877] call_tmp[603884])
  }
  function _cast[41078](arg t[41075]:owned[415394](?), in arg x[41083]:owned[415394](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505286] "RVV" "temp"
    unknown call_tmp[603891] "expr temp" "maybe param" "maybe type" "temp"
    (603894 'move' call_tmp[603891](41104 call chpl_t _mt[243] t[41075]))
    unknown call_tmp[603896] "expr temp" "maybe param" "maybe type" "temp"
    (603899 'move' call_tmp[603896](41108 call _to_unmanaged call_tmp[603891]))
    unknown call_tmp[603901] "expr temp" "maybe param" "maybe type" "temp"
    (603904 'move' call_tmp[603901](41110 call _to_nilable call_tmp[603896]))
    unknown call_tmp[603908] "expr temp" "maybe param" "maybe type" "temp"
    (603911 'move' call_tmp[603908](41098 call chpl_p _mt[243] x[41083]))
    unknown call_tmp[603913] "maybe param" "maybe type" "temp"
    (603916 'move' call_tmp[603913](41111 call _cast call_tmp[603901] call_tmp[603908]))
    unknown castPtr[41113] "dead at end of block" "insert auto destroy"
    (540578 'init var' castPtr[41113] call_tmp[603913])
    (41116 'end of statement')
    unknown call_tmp[603920] "expr temp" "maybe param" "maybe type" "temp"
    (603923 'move' call_tmp[603920](41119 call chpl_p _mt[243] x[41083]))
    (41123 call = call_tmp[603920] nil[44])
    (474129 'end of statement')
    unknown call_tmp[603925] "expr temp" "maybe param" "maybe type" "temp"
    (603928 'move' call_tmp[603925](41129 call postfix! castPtr[41113]))
    unknown call_tmp[603930] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603933 'move' call_tmp[603930](747758 'new' _owned[30](?) call_tmp[603925]))
    (505291 'move' ret[505286](505290 'deref' call_tmp[603930]))
    gotoReturn _end__cast[505284] _end__cast[505284]
    (474130 'end of statement' castPtr[41113])
    label _end__cast[505284]
    (505288 return ret[505286])
  }
  where {
    unknown call_tmp[603937] "expr temp" "maybe param" "maybe type" "temp"
    (603940 'move' call_tmp[603937](41093 call chpl_t _mt[243] t[41075]))
    unknown call_tmp[603944] "expr temp" "maybe param" "maybe type" "temp"
    (603947 'move' call_tmp[603944](41088 call chpl_t _mt[243] x[41083]))
    (354232 'is_subtype' call_tmp[603937] call_tmp[603944])
  }
  function _cast[41146](arg t[41143]:owned[415394](?), in arg x[41152]:owned?[415390](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505297] "RVV" "temp"
    unknown call_tmp[603951] "expr temp" "maybe param" "maybe type" "temp"
    (603954 'move' call_tmp[603951](41176 call chpl_t _mt[243] t[41143]))
    unknown call_tmp[603956] "expr temp" "maybe param" "maybe type" "temp"
    (603959 'move' call_tmp[603956](41180 call _to_unmanaged call_tmp[603951]))
    unknown call_tmp[603961] "expr temp" "maybe param" "maybe type" "temp"
    (603964 'move' call_tmp[603961](41182 call _to_nilable call_tmp[603956]))
    unknown call_tmp[603968] "expr temp" "maybe param" "maybe type" "temp"
    (603971 'move' call_tmp[603968](41170 call chpl_p _mt[243] x[41152]))
    unknown call_tmp[603973] "maybe param" "maybe type" "temp"
    (603976 'move' call_tmp[603973](41183 call _cast call_tmp[603961] call_tmp[603968]))
    unknown castPtr[41185] "dead at end of block" "insert auto destroy"
    (540580 'init var' castPtr[41185] call_tmp[603973])
    (41188 'end of statement')
    unknown call_tmp[603978] "expr temp" "maybe param" "maybe type" "temp"
    (603981 'move' call_tmp[603978](41192 call == castPtr[41185] nil[44]))
    unknown call_tmp[603983] "expr temp" "maybe param" "maybe type" "temp"
    (603986 'move' call_tmp[603983](41203 call _cond_test call_tmp[603978]))
    if call_tmp[603983]
    {
      unknown call_tmp[603988] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (603991 'move' call_tmp[603988](747759 'new' NilClassError[368325](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[603993] "expr temp" "maybe param" "maybe type" "temp"
      (603996 'move' call_tmp[603993](468067 call chpl_fix_thrown_error call_tmp[603988]))
      (41200 'throw' call_tmp[603993])
    }
    unknown call_tmp[604000] "expr temp" "maybe param" "maybe type" "temp"
    (604003 'move' call_tmp[604000](41208 call chpl_p _mt[243] x[41152]))
    (41212 call = call_tmp[604000] nil[44])
    (474133 'end of statement')
    unknown call_tmp[604005] "expr temp" "maybe param" "maybe type" "temp"
    (604008 'move' call_tmp[604005](41218 call postfix! castPtr[41185]))
    unknown call_tmp[604010] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604013 'move' call_tmp[604010](747760 'new' _owned[30](?) call_tmp[604005]))
    (505302 'move' ret[505297](505301 'deref' call_tmp[604010]))
    gotoReturn _end__cast[505295] _end__cast[505295]
    (474134 'end of statement' castPtr[41185])
    label _end__cast[505295]
    (505299 return ret[505297])
  }
  where {
    unknown call_tmp[604017] "expr temp" "maybe param" "maybe type" "temp"
    (604020 'move' call_tmp[604017](41165 call chpl_t _mt[243] t[41143]))
    unknown call_tmp[604024] "expr temp" "maybe param" "maybe type" "temp"
    (604027 'move' call_tmp[604024](41158 call chpl_t _mt[243] x[41152]))
    unknown call_tmp[604029] "expr temp" "maybe param" "maybe type" "temp"
    (604032 'move' call_tmp[604029](41162 call _to_nonnil call_tmp[604024]))
    (354233 'is_subtype' call_tmp[604017] call_tmp[604029])
  }
  function _cast[41235](arg t[41232]:owned[415394](?), ref arg x[41241]:owned?[415390](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505308] "RVV" "temp"
    unknown call_tmp[604036] "expr temp" "maybe param" "maybe type" "temp"
    (604039 'move' call_tmp[604036](41259 call chpl_p _mt[243] x[41241]))
    unknown call_tmp[604041] "expr temp" "maybe param" "maybe type" "temp"
    (604044 'move' call_tmp[604041](41263 call == call_tmp[604036] nil[44]))
    unknown call_tmp[604046] "expr temp" "maybe param" "maybe type" "temp"
    (604049 'move' call_tmp[604046](41274 call _cond_test call_tmp[604041]))
    if call_tmp[604046]
    {
      unknown call_tmp[604051] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (604054 'move' call_tmp[604051](747761 'new' NilClassError[368325](?)(_chpl_manager = _owned[30](?))))
      unknown call_tmp[604056] "expr temp" "maybe param" "maybe type" "temp"
      (604059 'move' call_tmp[604056](468069 call chpl_fix_thrown_error call_tmp[604051]))
      (41271 'throw' call_tmp[604056])
    }
    unknown call_tmp[604063] "expr temp" "maybe param" "maybe type" "temp"
    (604066 'move' call_tmp[604063](41286 call chpl_t _mt[243] t[41232]))
    unknown call_tmp[604068] "expr temp" "maybe param" "maybe type" "temp"
    (604071 'move' call_tmp[604068](41290 call _to_unmanaged call_tmp[604063]))
    unknown call_tmp[604073] "expr temp" "maybe param" "maybe type" "temp"
    (604076 'move' call_tmp[604073](41292 call _to_nonnil call_tmp[604068]))
    unknown call_tmp[604080] "expr temp" "maybe param" "maybe type" "temp"
    (604083 'move' call_tmp[604080](41280 call chpl_p _mt[243] x[41241]))
    unknown call_tmp[604085] "maybe param" "maybe type" "temp"
    (604088 'move' call_tmp[604085](41293 call _cast call_tmp[604073] call_tmp[604080]))
    unknown castPtr[41296] "dead at end of block" "insert auto destroy"
    (540582 'init var' castPtr[41296] call_tmp[604085])
    (41299 'end of statement')
    unknown call_tmp[604092] "expr temp" "maybe param" "maybe type" "temp"
    (604095 'move' call_tmp[604092](41301 call chpl_p _mt[243] x[41241]))
    (41305 call = call_tmp[604092] nil[44])
    (474137 'end of statement')
    unknown call_tmp[604097] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604100 'move' call_tmp[604097](747762 'new' _owned[30](?) castPtr[41296]))
    (505313 'move' ret[505308](505312 'deref' call_tmp[604097]))
    gotoReturn _end__cast[505306] _end__cast[505306]
    (474138 'end of statement' castPtr[41296])
    label _end__cast[505306]
    (505310 return ret[505308])
  }
  where {
    unknown call_tmp[604104] "expr temp" "maybe param" "maybe type" "temp"
    (604107 'move' call_tmp[604104](41252 call chpl_t _mt[243] x[41241]))
    unknown call_tmp[604109] "expr temp" "maybe param" "maybe type" "temp"
    (604112 'move' call_tmp[604109](41256 call _to_nonnil call_tmp[604104]))
    unknown call_tmp[604116] "expr temp" "maybe param" "maybe type" "temp"
    (604119 'move' call_tmp[604116](41246 call chpl_t _mt[243] t[41232]))
    (354234 'is_proper_subtype' call_tmp[604109] call_tmp[604116])
  }
  function _cast[41326](arg t[41323]:owned[415394](?), ref arg x[41331]:owned[415394](?)) : _unknown[51] throws "inline" "no doc"
  {
    unknown ret[505319] "RVV" "temp"
    unknown call_tmp[604123] "expr temp" "maybe param" "maybe type" "temp"
    (604126 'move' call_tmp[604123](41352 call chpl_t _mt[243] t[41323]))
    unknown call_tmp[604128] "expr temp" "maybe param" "maybe type" "temp"
    (604131 'move' call_tmp[604128](41356 call _to_unmanaged call_tmp[604123]))
    unknown call_tmp[604133] "expr temp" "maybe param" "maybe type" "temp"
    (604136 'move' call_tmp[604133](41358 call _to_nonnil call_tmp[604128]))
    unknown call_tmp[604140] "expr temp" "maybe param" "maybe type" "temp"
    (604143 'move' call_tmp[604140](41346 call chpl_p _mt[243] x[41331]))
    unknown call_tmp[604145] "maybe param" "maybe type" "temp"
    (604148 'move' call_tmp[604145](41359 call _cast call_tmp[604133] call_tmp[604140]))
    unknown castPtr[41362] "dead at end of block" "insert auto destroy"
    (540584 'init var' castPtr[41362] call_tmp[604145])
    (41365 'end of statement')
    unknown call_tmp[604152] "expr temp" "maybe param" "maybe type" "temp"
    (604155 'move' call_tmp[604152](41368 call chpl_p _mt[243] x[41331]))
    (41372 call = call_tmp[604152] nil[44])
    (474140 'end of statement')
    unknown call_tmp[604157] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604160 'move' call_tmp[604157](747763 'new' _owned[30](?) castPtr[41362]))
    (505324 'move' ret[505319](505323 'deref' call_tmp[604157]))
    gotoReturn _end__cast[505317] _end__cast[505317]
    (474141 'end of statement' castPtr[41362])
    label _end__cast[505317]
    (505321 return ret[505319])
  }
  where {
    unknown call_tmp[604164] "expr temp" "maybe param" "maybe type" "temp"
    (604167 'move' call_tmp[604164](41341 call chpl_t _mt[243] x[41331]))
    unknown call_tmp[604171] "expr temp" "maybe param" "maybe type" "temp"
    (604174 'move' call_tmp[604171](41336 call chpl_t _mt[243] t[41323]))
    (354235 'is_proper_subtype' call_tmp[604164] call_tmp[604171])
  }
  function _cast[41394](arg t[41391]:owned?[415390](?), ref arg x[41400]:owned?[415390](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505330] "RVV" "temp"
    unknown call_tmp[604178] "expr temp" "maybe param" "maybe type" "temp"
    (604181 'move' call_tmp[604178](41421 call chpl_t _mt[243] t[41391]))
    unknown call_tmp[604183] "expr temp" "maybe param" "maybe type" "temp"
    (604186 'move' call_tmp[604183](41425 call _to_unmanaged call_tmp[604178]))
    unknown call_tmp[604188] "expr temp" "maybe param" "maybe type" "temp"
    (604191 'move' call_tmp[604188](41427 call _to_nilable call_tmp[604183]))
    unknown call_tmp[604195] "expr temp" "maybe param" "maybe type" "temp"
    (604198 'move' call_tmp[604195](41415 call chpl_p _mt[243] x[41400]))
    unknown call_tmp[604200] "maybe param" "maybe type" "temp"
    (604203 'move' call_tmp[604200](41428 call _cast call_tmp[604188] call_tmp[604195]))
    unknown castPtr[41430] "dead at end of block" "insert auto destroy"
    (540586 'init var' castPtr[41430] call_tmp[604200])
    (41433 'end of statement')
    unknown call_tmp[604205] "expr temp" "maybe param" "maybe type" "temp"
    (604208 'move' call_tmp[604205](41437 call != castPtr[41430] nil[44]))
    unknown call_tmp[604210] "expr temp" "maybe param" "maybe type" "temp"
    (604213 'move' call_tmp[604210](41448 call _cond_test call_tmp[604205]))
    if call_tmp[604210]
    {
      unknown call_tmp[604217] "expr temp" "maybe param" "maybe type" "temp"
      (604220 'move' call_tmp[604217](41440 call chpl_p _mt[243] x[41400]))
      (41444 call = call_tmp[604217] nil[44])
    }
    unknown call_tmp[604222] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604225 'move' call_tmp[604222](747764 'new' _owned[30](?) castPtr[41430]))
    (505335 'move' ret[505330](505334 'deref' call_tmp[604222]))
    gotoReturn _end__cast[505328] _end__cast[505328]
    (474144 'end of statement' castPtr[41430])
    label _end__cast[505328]
    (505332 return ret[505330])
  }
  where {
    unknown call_tmp[604229] "expr temp" "maybe param" "maybe type" "temp"
    (604232 'move' call_tmp[604229](41410 call chpl_t _mt[243] x[41400]))
    unknown call_tmp[604236] "expr temp" "maybe param" "maybe type" "temp"
    (604239 'move' call_tmp[604236](41405 call chpl_t _mt[243] t[41391]))
    (354236 'is_proper_subtype' call_tmp[604229] call_tmp[604236])
  }
  function _cast[41471](arg t[41468]:owned?[415390](?), ref arg x[41476]:owned[415394](?)) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505341] "RVV" "temp"
    unknown call_tmp[604243] "expr temp" "maybe param" "maybe type" "temp"
    (604246 'move' call_tmp[604243](41500 call chpl_t _mt[243] t[41468]))
    unknown call_tmp[604248] "expr temp" "maybe param" "maybe type" "temp"
    (604251 'move' call_tmp[604248](41504 call _to_unmanaged call_tmp[604243]))
    unknown call_tmp[604253] "expr temp" "maybe param" "maybe type" "temp"
    (604256 'move' call_tmp[604253](41506 call _to_nilable call_tmp[604248]))
    unknown call_tmp[604260] "expr temp" "maybe param" "maybe type" "temp"
    (604263 'move' call_tmp[604260](41494 call chpl_p _mt[243] x[41476]))
    unknown call_tmp[604265] "maybe param" "maybe type" "temp"
    (604268 'move' call_tmp[604265](41507 call _cast call_tmp[604253] call_tmp[604260]))
    unknown castPtr[41509] "dead at end of block" "insert auto destroy"
    (540588 'init var' castPtr[41509] call_tmp[604265])
    (41512 'end of statement')
    unknown call_tmp[604270] "expr temp" "maybe param" "maybe type" "temp"
    (604273 'move' call_tmp[604270](41516 call != castPtr[41509] nil[44]))
    unknown call_tmp[604275] "expr temp" "maybe param" "maybe type" "temp"
    (604278 'move' call_tmp[604275](41527 call _cond_test call_tmp[604270]))
    if call_tmp[604275]
    {
      unknown call_tmp[604282] "expr temp" "maybe param" "maybe type" "temp"
      (604285 'move' call_tmp[604282](41519 call chpl_p _mt[243] x[41476]))
      (41523 call = call_tmp[604282] nil[44])
    }
    unknown call_tmp[604287] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604290 'move' call_tmp[604287](747765 'new' _owned[30](?) castPtr[41509]))
    (505346 'move' ret[505341](505345 'deref' call_tmp[604287]))
    gotoReturn _end__cast[505339] _end__cast[505339]
    (474147 'end of statement' castPtr[41509])
    label _end__cast[505339]
    (505343 return ret[505341])
  }
  where {
    unknown call_tmp[604294] "expr temp" "maybe param" "maybe type" "temp"
    (604297 'move' call_tmp[604294](41489 call chpl_t _mt[243] x[41476]))
    unknown call_tmp[604301] "expr temp" "maybe param" "maybe type" "temp"
    (604304 'move' call_tmp[604301](41482 call chpl_t _mt[243] t[41468]))
    unknown call_tmp[604306] "expr temp" "maybe param" "maybe type" "temp"
    (604309 'move' call_tmp[604306](41486 call _to_nonnil call_tmp[604301]))
    (354237 'is_proper_subtype' call_tmp[604294] call_tmp[604306])
  }
  function _cast[41547](arg t[41544]:_owned[30](?), arg x[41550]:_nilType[42]) : _unknown[51] "inline" "no doc"
  {
    unknown ret[505352] "RVV" "temp"
    unknown call_tmp[604313] "expr temp" "maybe param" "maybe type" "temp"
    (604316 'move' call_tmp[604313](41555 call chpl_t _mt[243] t[41544]))
    unknown call_tmp[604318] "expr temp" "maybe param" "maybe type" "temp"
    (604321 'move' call_tmp[604318](41559 call isNonNilableClass call_tmp[604313]))
    unknown call_tmp[604323] "expr temp" "maybe param" "maybe type" "temp"
    (604326 'move' call_tmp[604323](41581 call _cond_test call_tmp[604318]))
    if call_tmp[604323]
    {
      (41579 call compilerError "Illegal cast from nil to non-nilable owned type")
    }
    unknown tmp[41588] "dead at end of block" "insert auto destroy"
    (540590 'default init var' tmp[41588] t[41544])
    (41591 'end of statement')
    (505357 'move' ret[505352](505356 'deref' tmp[41588]))
    gotoReturn _end__cast[505350] _end__cast[505350]
    (474150 'end of statement' tmp[41588])
    label _end__cast[505350]
    (505354 return ret[505352])
  }
  function postfix![41603](const  ref arg x[41600]:_owned[30](?)) : _unknown[51] "always propagate line file info" "inline" "no doc"
  {
    unknown ret[505363] "RVV" "temp"
    unknown call_tmp[604328] "expr temp" "maybe param" "maybe type" "temp"
    (604331 'move' call_tmp[604328](41649 call _cond_test 1))
    if call_tmp[604328]
    {
      unknown call_tmp[604335] "expr temp" "maybe param" "maybe type" "temp"
      (604338 'move' call_tmp[604335](41612 call chpl_t _mt[243] x[41600]))
      unknown call_tmp[604340] "expr temp" "maybe param" "maybe type" "temp"
      (604343 'move' call_tmp[604340](41616 call _to_nilable call_tmp[604335]))
      unknown call_tmp[604347] "expr temp" "maybe param" "maybe type" "temp"
      (604350 'move' call_tmp[604347](41618 call chpl_t _mt[243] x[41600]))
      unknown call_tmp[604352] "expr temp" "maybe param" "maybe type" "temp"
      (604355 'move' call_tmp[604352](41621 call == call_tmp[604340] call_tmp[604347]))
      unknown call_tmp[604357] "expr temp" "maybe param" "maybe type" "temp"
      (604360 'move' call_tmp[604357](41644 call _cond_test call_tmp[604352]))
      if call_tmp[604357]
      {
        unknown call_tmp[604364] "expr temp" "maybe param" "maybe type" "temp"
        (604367 'move' call_tmp[604364](41624 call chpl_p _mt[243] x[41600]))
        unknown call_tmp[604369] "expr temp" "maybe param" "maybe type" "temp"
        (604372 'move' call_tmp[604369](41628 call == call_tmp[604364] nil[44]))
        unknown call_tmp[604374] "expr temp" "maybe param" "maybe type" "temp"
        (604377 'move' call_tmp[604374](41639 call _cond_test call_tmp[604369]))
        if call_tmp[604374]
        {
          (41636 call nilCheckHalt module=[255] HaltWrappers[210016] "argument to ! is nil")
          (356993 'referenced modules list' HaltWrappers[210016])
        }
      }
    }
    unknown call_tmp[604381] "expr temp" "maybe param" "maybe type" "temp"
    (604384 'move' call_tmp[604381](41655 call chpl_p _mt[243] x[41600]))
    unknown call_tmp[604386] "expr temp" "maybe param" "maybe type" "temp"
    (604389 'move' call_tmp[604386](41659 call _to_nonnil call_tmp[604381]))
    (505368 'move' ret[505363](505367 'deref' call_tmp[604386]))
    (505365 return ret[505363])
    (355066 'used modules list'(41606 'import' HaltWrappers[210016]))
  }
  (355062 'used modules list'(39588 'use' ChapelStandard[20267]))
}